   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "main.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.osc_enable,"ax",%progbits
  27              	 .align 1
  28              	 .arch armv7-m
  29              	 .syntax unified
  30              	 .thumb
  31              	 .thumb_func
  32              	 .fpu softvfp
  34              	osc_enable:
  35              	.LFB69:
  36              	 .file 1 ".././hal/sam3u1c/inc/sam3u/osc.h"
   1:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \brief Chip-specific oscillator management functions.
   5:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  44:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/osc.h **** #define CHIP_OSC_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  47:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "board.h"
  48:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "pmc.h"
  49:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  50:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/sam3u/osc.h **** extern "C" {
  54:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  55:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @endcond
  57:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  58:.././hal/sam3u1c/inc/sam3u/osc.h **** /*
  59:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Below BOARD_XXX macros are related to the specific board, and
  60:.././hal/sam3u1c/inc/sam3u/osc.h ****  * should be defined by the board code, otherwise default value are used.
  61:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  62:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_XTAL)
  63:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock xtal frequency has not been defined.
  64:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_XTAL      (32768UL)
  65:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  66:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  67:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_BYPASS)
  68:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock bypass frequency has not been defined.
  69:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_BYPASS    (32768UL)
  70:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  71:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  72:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_XTAL)
  73:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal frequency has not been defined.
  74:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_XTAL    (12000000UL)
  75:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  76:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  77:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_BYPASS)
  78:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock bypass frequency has not been defined.
  79:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_BYPASS  (12000000UL)
  80:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  81:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  82:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_OSC_STARTUP_US)
  83:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal startup time has not been defined.
  84:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_OSC_STARTUP_US      (15625UL)
  85:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  86:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  87:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
  88:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \weakgroup osc_group
  89:.././hal/sam3u1c/inc/sam3u/osc.h ****  * @{
  90:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  91:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  92:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator identifiers
  93:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
  94:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC             0    //!< Internal 32kHz RC oscillator.
  95:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL           1    //!< External 32kHz crystal oscillator.
  96:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS         2    //!< External 32kHz bypass oscillator.
  97:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC            3    //!< Internal 4MHz RC oscillator.
  98:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC            4    //!< Internal 8MHz RC oscillator.
  99:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC           5    //!< Internal 12MHz RC oscillator.
 100:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL             6    //!< External crystal oscillator.
 101:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS           7    //!< External bypass oscillator.
 102:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 103:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 104:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator clock speed in hertz
 105:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
 106:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC_HZ          CHIP_FREQ_SLCK_RC               //!< Internal 32kHz RC oscillat
 107:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL_HZ        BOARD_FREQ_SLCK_XTAL            //!< External 32kHz crystal osc
 108:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS_HZ      BOARD_FREQ_SLCK_BYPASS          //!< External 32kHz bypass osci
 109:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC_HZ         CHIP_FREQ_MAINCK_RC_4MHZ        //!< Internal 4MHz RC oscillato
 110:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC_HZ         CHIP_FREQ_MAINCK_RC_8MHZ        //!< Internal 8MHz RC oscillato
 111:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC_HZ        CHIP_FREQ_MAINCK_RC_12MHZ       //!< Internal 12MHz RC oscillat
 112:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillato
 113:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator
 114:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 115:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 116:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_enable(uint32_t ul_id)
 117:.././hal/sam3u1c/inc/sam3u/osc.h **** {
  37              	 .loc 1 117 1
  38              	 .cfi_startproc
  39              	 
  40              	 
  41 0000 80B5     	 push {r7,lr}
  42              	.LCFI0:
  43              	 .cfi_def_cfa_offset 8
  44              	 .cfi_offset 7,-8
  45              	 .cfi_offset 14,-4
  46 0002 82B0     	 sub sp,sp,#8
  47              	.LCFI1:
  48              	 .cfi_def_cfa_offset 16
  49 0004 00AF     	 add r7,sp,#0
  50              	.LCFI2:
  51              	 .cfi_def_cfa_register 7
  52 0006 7860     	 str r0,[r7,#4]
  53 0008 7B68     	 ldr r3,[r7,#4]
  54 000a 072B     	 cmp r3,#7
  55 000c 2ED8     	 bhi .L12
  56 000e 01A2     	 adr r2,.L4
  57 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
  58              	 .p2align 2
  59              	.L4:
  60 0014 6B000000 	 .word .L13+1
  61 0018 35000000 	 .word .L10+1
  62 001c 3D000000 	 .word .L9+1
  63 0020 45000000 	 .word .L8+1
  64 0024 4D000000 	 .word .L7+1
  65 0028 55000000 	 .word .L6+1
  66 002c 5D000000 	 .word .L5+1
  67 0030 65000000 	 .word .L3+1
  68              	 .p2align 1
  69              	.L10:
 118:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 119:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 121:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 122:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 123:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  70              	 .loc 1 123 3
  71 0034 0020     	 movs r0,#0
  72 0036 0F4B     	 ldr r3,.L14
  73 0038 9847     	 blx r3
  74              	.LVL0:
 124:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  75              	 .loc 1 124 3
  76 003a 17E0     	 b .L2
  77              	.L9:
 125:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 127:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  78              	 .loc 1 127 3
  79 003c 0120     	 movs r0,#1
  80 003e 0D4B     	 ldr r3,.L14
  81 0040 9847     	 blx r3
  82              	.LVL1:
 128:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  83              	 .loc 1 128 3
  84 0042 13E0     	 b .L2
  85              	.L8:
 129:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 130:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 131:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 132:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  86              	 .loc 1 132 3
  87 0044 0020     	 movs r0,#0
  88 0046 0C4B     	 ldr r3,.L14+4
  89 0048 9847     	 blx r3
  90              	.LVL2:
 133:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  91              	 .loc 1 133 3
  92 004a 0FE0     	 b .L2
  93              	.L7:
 134:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 135:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 136:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  94              	 .loc 1 136 3
  95 004c 1020     	 movs r0,#16
  96 004e 0A4B     	 ldr r3,.L14+4
  97 0050 9847     	 blx r3
  98              	.LVL3:
 137:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  99              	 .loc 1 137 3
 100 0052 0BE0     	 b .L2
 101              	.L6:
 138:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 139:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 140:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
 102              	 .loc 1 140 3
 103 0054 2020     	 movs r0,#32
 104 0056 084B     	 ldr r3,.L14+4
 105 0058 9847     	 blx r3
 106              	.LVL4:
 141:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 107              	 .loc 1 141 3
 108 005a 07E0     	 b .L2
 109              	.L5:
 142:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 143:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 144:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 145:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
 110              	 .loc 1 145 3
 111 005c 3E20     	 movs r0,#62
 112 005e 074B     	 ldr r3,.L14+8
 113 0060 9847     	 blx r3
 114              	.LVL5:
 146:.././hal/sam3u1c/inc/sam3u/osc.h **** 				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
 147:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 115              	 .loc 1 147 3
 116 0062 03E0     	 b .L2
 117              	.L3:
 148:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 149:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 150:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_bypass_main_xtal();
 118              	 .loc 1 150 3
 119 0064 064B     	 ldr r3,.L14+12
 120 0066 9847     	 blx r3
 121              	.LVL6:
 151:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 122              	 .loc 1 151 3
 123 0068 00E0     	 b .L2
 124              	.L13:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 125              	 .loc 1 120 3
 126 006a 00BF     	 nop
 127              	.L2:
 128              	.L12:
 152:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 153:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 129              	 .loc 1 153 1
 130 006c 00BF     	 nop
 131 006e 0837     	 adds r7,r7,#8
 132              	.LCFI3:
 133              	 .cfi_def_cfa_offset 8
 134 0070 BD46     	 mov sp,r7
 135              	.LCFI4:
 136              	 .cfi_def_cfa_register 13
 137              	 
 138 0072 80BD     	 pop {r7,pc}
 139              	.L15:
 140              	 .align 2
 141              	.L14:
 142 0074 00000000 	 .word pmc_switch_sclk_to_32kxtal
 143 0078 00000000 	 .word pmc_osc_enable_fastrc
 144 007c 00000000 	 .word pmc_osc_enable_main_xtal
 145 0080 00000000 	 .word pmc_osc_bypass_main_xtal
 146              	 .cfi_endproc
 147              	.LFE69:
 149              	 .section .text.osc_is_ready,"ax",%progbits
 150              	 .align 1
 151              	 .syntax unified
 152              	 .thumb
 153              	 .thumb_func
 154              	 .fpu softvfp
 156              	osc_is_ready:
 157              	.LFB71:
 154:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 155:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_disable(uint32_t ul_id)
 156:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 157:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 158:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 159:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 160:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 161:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 162:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 163:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 164:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 165:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 166:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_fastrc();
 167:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 168:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 169:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 170:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_XTAL);
 171:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 172:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 173:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 174:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_BYPASS);
 175:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 176:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 177:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 178:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 179:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline bool osc_is_ready(uint32_t ul_id)
 180:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 158              	 .loc 1 180 1
 159              	 .cfi_startproc
 160              	 
 161              	 
 162 0000 80B5     	 push {r7,lr}
 163              	.LCFI5:
 164              	 .cfi_def_cfa_offset 8
 165              	 .cfi_offset 7,-8
 166              	 .cfi_offset 14,-4
 167 0002 82B0     	 sub sp,sp,#8
 168              	.LCFI6:
 169              	 .cfi_def_cfa_offset 16
 170 0004 00AF     	 add r7,sp,#0
 171              	.LCFI7:
 172              	 .cfi_def_cfa_register 7
 173 0006 7860     	 str r0,[r7,#4]
 174 0008 7B68     	 ldr r3,[r7,#4]
 175 000a 072B     	 cmp r3,#7
 176 000c 2FD8     	 bhi .L17
 177 000e 01A2     	 adr r2,.L19
 178 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 179              	 .p2align 2
 180              	.L19:
 181 0014 35000000 	 .word .L22+1
 182 0018 39000000 	 .word .L21+1
 183 001c 39000000 	 .word .L21+1
 184 0020 4B000000 	 .word .L20+1
 185 0024 4B000000 	 .word .L20+1
 186 0028 4B000000 	 .word .L20+1
 187 002c 5D000000 	 .word .L18+1
 188 0030 5D000000 	 .word .L18+1
 189              	 .p2align 1
 190              	.L22:
 181:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 182:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 183:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return 1;
 191              	 .loc 1 183 10
 192 0034 0123     	 movs r3,#1
 193 0036 1BE0     	 b .L23
 194              	.L21:
 184:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 185:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 186:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 187:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_32kxtal();
 195              	 .loc 1 187 10
 196 0038 0F4B     	 ldr r3,.L24
 197 003a 9847     	 blx r3
 198              	.LVL7:
 199 003c 0346     	 mov r3,r0
 200 003e 002B     	 cmp r3,#0
 201 0040 14BF     	 ite ne
 202 0042 0123     	 movne r3,#1
 203 0044 0023     	 moveq r3,#0
 204 0046 DBB2     	 uxtb r3,r3
 205 0048 12E0     	 b .L23
 206              	.L20:
 188:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 189:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 190:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 191:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 192:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_fastrc();
 207              	 .loc 1 192 10
 208 004a 0C4B     	 ldr r3,.L24+4
 209 004c 9847     	 blx r3
 210              	.LVL8:
 211 004e 0346     	 mov r3,r0
 212 0050 002B     	 cmp r3,#0
 213 0052 14BF     	 ite ne
 214 0054 0123     	 movne r3,#1
 215 0056 0023     	 moveq r3,#0
 216 0058 DBB2     	 uxtb r3,r3
 217 005a 09E0     	 b .L23
 218              	.L18:
 193:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 194:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 195:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 196:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_main_xtal();
 219              	 .loc 1 196 10
 220 005c 084B     	 ldr r3,.L24+8
 221 005e 9847     	 blx r3
 222              	.LVL9:
 223 0060 0346     	 mov r3,r0
 224 0062 002B     	 cmp r3,#0
 225 0064 14BF     	 ite ne
 226 0066 0123     	 movne r3,#1
 227 0068 0023     	 moveq r3,#0
 228 006a DBB2     	 uxtb r3,r3
 229 006c 00E0     	 b .L23
 230              	.L17:
 197:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 198:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 199:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 231              	 .loc 1 199 9
 232 006e 0023     	 movs r3,#0
 233              	.L23:
 200:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 234              	 .loc 1 200 1
 235 0070 1846     	 mov r0,r3
 236 0072 0837     	 adds r7,r7,#8
 237              	.LCFI8:
 238              	 .cfi_def_cfa_offset 8
 239 0074 BD46     	 mov sp,r7
 240              	.LCFI9:
 241              	 .cfi_def_cfa_register 13
 242              	 
 243 0076 80BD     	 pop {r7,pc}
 244              	.L25:
 245              	 .align 2
 246              	.L24:
 247 0078 00000000 	 .word pmc_osc_is_ready_32kxtal
 248 007c 00000000 	 .word pmc_osc_is_ready_fastrc
 249 0080 00000000 	 .word pmc_osc_is_ready_main_xtal
 250              	 .cfi_endproc
 251              	.LFE71:
 253              	 .section .text.osc_get_rate,"ax",%progbits
 254              	 .align 1
 255              	 .syntax unified
 256              	 .thumb
 257              	 .thumb_func
 258              	 .fpu softvfp
 260              	osc_get_rate:
 261              	.LFB72:
 201:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 202:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline uint32_t osc_get_rate(uint32_t ul_id)
 203:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 262              	 .loc 1 203 1
 263              	 .cfi_startproc
 264              	 
 265              	 
 266              	 
 267 0000 80B4     	 push {r7}
 268              	.LCFI10:
 269              	 .cfi_def_cfa_offset 4
 270              	 .cfi_offset 7,-4
 271 0002 83B0     	 sub sp,sp,#12
 272              	.LCFI11:
 273              	 .cfi_def_cfa_offset 16
 274 0004 00AF     	 add r7,sp,#0
 275              	.LCFI12:
 276              	 .cfi_def_cfa_register 7
 277 0006 7860     	 str r0,[r7,#4]
 278 0008 7B68     	 ldr r3,[r7,#4]
 279 000a 072B     	 cmp r3,#7
 280 000c 23D8     	 bhi .L27
 281 000e 01A2     	 adr r2,.L29
 282 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 283              	 .p2align 2
 284              	.L29:
 285 0014 35000000 	 .word .L36+1
 286 0018 3B000000 	 .word .L35+1
 287 001c 3F000000 	 .word .L34+1
 288 0020 43000000 	 .word .L33+1
 289 0024 47000000 	 .word .L32+1
 290 0028 4B000000 	 .word .L31+1
 291 002c 4F000000 	 .word .L30+1
 292 0030 53000000 	 .word .L28+1
 293              	 .p2align 1
 294              	.L36:
 204:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 205:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 206:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_SLCK_32K_RC_HZ;
 295              	 .loc 1 206 10
 296 0034 4FF4FA43 	 mov r3,#32000
 297 0038 0EE0     	 b .L37
 298              	.L35:
 207:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 208:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 209:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_XTAL;
 299              	 .loc 1 209 10
 300 003a 0023     	 movs r3,#0
 301 003c 0CE0     	 b .L37
 302              	.L34:
 210:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 211:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 212:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_BYPASS;
 303              	 .loc 1 212 10
 304 003e 0023     	 movs r3,#0
 305 0040 0AE0     	 b .L37
 306              	.L33:
 213:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 214:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 215:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_4M_RC_HZ;
 307              	 .loc 1 215 10
 308 0042 084B     	 ldr r3,.L38
 309 0044 08E0     	 b .L37
 310              	.L32:
 216:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 217:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 218:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_8M_RC_HZ;
 311              	 .loc 1 218 10
 312 0046 084B     	 ldr r3,.L38+4
 313 0048 06E0     	 b .L37
 314              	.L31:
 219:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 220:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 221:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_12M_RC_HZ;
 315              	 .loc 1 221 10
 316 004a 084B     	 ldr r3,.L38+8
 317 004c 04E0     	 b .L37
 318              	.L30:
 222:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 223:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 224:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_XTAL;
 319              	 .loc 1 224 10
 320 004e 074B     	 ldr r3,.L38+8
 321 0050 02E0     	 b .L37
 322              	.L28:
 225:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 226:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 227:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_BYPASS;
 323              	 .loc 1 227 10
 324 0052 064B     	 ldr r3,.L38+8
 325 0054 00E0     	 b .L37
 326              	.L27:
 228:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 229:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 230:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 327              	 .loc 1 230 9
 328 0056 0023     	 movs r3,#0
 329              	.L37:
 231:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 330              	 .loc 1 231 1
 331 0058 1846     	 mov r0,r3
 332 005a 0C37     	 adds r7,r7,#12
 333              	.LCFI13:
 334              	 .cfi_def_cfa_offset 4
 335 005c BD46     	 mov sp,r7
 336              	.LCFI14:
 337              	 .cfi_def_cfa_register 13
 338              	 
 339 005e 80BC     	 pop {r7}
 340              	.LCFI15:
 341              	 .cfi_restore 7
 342              	 .cfi_def_cfa_offset 0
 343 0060 7047     	 bx lr
 344              	.L39:
 345 0062 00BF     	 .align 2
 346              	.L38:
 347 0064 00093D00 	 .word 4000000
 348 0068 00127A00 	 .word 8000000
 349 006c 001BB700 	 .word 12000000
 350              	 .cfi_endproc
 351              	.LFE72:
 353              	 .section .text.osc_wait_ready,"ax",%progbits
 354              	 .align 1
 355              	 .syntax unified
 356              	 .thumb
 357              	 .thumb_func
 358              	 .fpu softvfp
 360              	osc_wait_ready:
 361              	.LFB73:
 362              	 .file 2 ".././hal/sam3u1c/inc/osc.h"
   1:.././hal/sam3u1c/inc/osc.h **** /**
   2:.././hal/sam3u1c/inc/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/osc.h ****  *
   4:.././hal/sam3u1c/inc/osc.h ****  * \brief Oscillator management
   5:.././hal/sam3u1c/inc/osc.h ****  *
   6:.././hal/sam3u1c/inc/osc.h ****  * Copyright (c) 2010-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/osc.h ****  *
   8:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/osc.h ****  *
  10:.././hal/sam3u1c/inc/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/osc.h ****  *
  12:.././hal/sam3u1c/inc/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/osc.h ****  *
  15:.././hal/sam3u1c/inc/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/osc.h ****  *
  18:.././hal/sam3u1c/inc/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/osc.h ****  *
  22:.././hal/sam3u1c/inc/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/osc.h ****  *
  25:.././hal/sam3u1c/inc/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/osc.h ****  *
  28:.././hal/sam3u1c/inc/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/osc.h ****  *
  40:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/osc.h ****  *
  42:.././hal/sam3u1c/inc/osc.h ****  */
  43:.././hal/sam3u1c/inc/osc.h **** #ifndef OSC_H_INCLUDED
  44:.././hal/sam3u1c/inc/osc.h **** #define OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/osc.h **** 
  46:.././hal/sam3u1c/inc/osc.h **** #include "parts.h"
  47:.././hal/sam3u1c/inc/osc.h **** #include "conf_clock.h"
  48:.././hal/sam3u1c/inc/osc.h **** 
  49:.././hal/sam3u1c/inc/osc.h **** #if SAM3S
  50:.././hal/sam3u1c/inc/osc.h **** # include "sam3s/osc.h"
  51:.././hal/sam3u1c/inc/osc.h **** #elif SAM3XA
  52:.././hal/sam3u1c/inc/osc.h **** # include "sam3x/osc.h"
  53:.././hal/sam3u1c/inc/osc.h **** #elif SAM3U
  54:.././hal/sam3u1c/inc/osc.h **** # include "sam3u/osc.h"
  55:.././hal/sam3u1c/inc/osc.h **** #elif SAM3N
  56:.././hal/sam3u1c/inc/osc.h **** # include "sam3n/osc.h"
  57:.././hal/sam3u1c/inc/osc.h **** #elif SAM4S
  58:.././hal/sam3u1c/inc/osc.h **** # include "sam4s/osc.h"
  59:.././hal/sam3u1c/inc/osc.h **** #elif SAM4E
  60:.././hal/sam3u1c/inc/osc.h **** # include "sam4e/osc.h"
  61:.././hal/sam3u1c/inc/osc.h **** #elif SAM4C
  62:.././hal/sam3u1c/inc/osc.h **** # include "sam4c/osc.h"
  63:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CM
  64:.././hal/sam3u1c/inc/osc.h **** # include "sam4cm/osc.h"
  65:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CP
  66:.././hal/sam3u1c/inc/osc.h **** # include "sam4cp/osc.h"
  67:.././hal/sam3u1c/inc/osc.h **** #elif SAM4L
  68:.././hal/sam3u1c/inc/osc.h **** # include "sam4l/osc.h"
  69:.././hal/sam3u1c/inc/osc.h **** #elif SAM4N
  70:.././hal/sam3u1c/inc/osc.h **** # include "sam4n/osc.h"
  71:.././hal/sam3u1c/inc/osc.h **** #elif SAMG
  72:.././hal/sam3u1c/inc/osc.h **** # include "samg/osc.h"
  73:.././hal/sam3u1c/inc/osc.h **** #elif (UC3A0 || UC3A1)
  74:.././hal/sam3u1c/inc/osc.h **** # include "uc3a0_a1/osc.h"
  75:.././hal/sam3u1c/inc/osc.h **** #elif UC3A3
  76:.././hal/sam3u1c/inc/osc.h **** # include "uc3a3_a4/osc.h"
  77:.././hal/sam3u1c/inc/osc.h **** #elif UC3B
  78:.././hal/sam3u1c/inc/osc.h **** # include "uc3b0_b1/osc.h"
  79:.././hal/sam3u1c/inc/osc.h **** #elif UC3C
  80:.././hal/sam3u1c/inc/osc.h **** # include "uc3c/osc.h"
  81:.././hal/sam3u1c/inc/osc.h **** #elif UC3D
  82:.././hal/sam3u1c/inc/osc.h **** # include "uc3d/osc.h"
  83:.././hal/sam3u1c/inc/osc.h **** #elif UC3L
  84:.././hal/sam3u1c/inc/osc.h **** # include "uc3l/osc.h"
  85:.././hal/sam3u1c/inc/osc.h **** #elif XMEGA
  86:.././hal/sam3u1c/inc/osc.h **** # include "xmega/osc.h"
  87:.././hal/sam3u1c/inc/osc.h **** #else
  88:.././hal/sam3u1c/inc/osc.h **** # error Unsupported chip type
  89:.././hal/sam3u1c/inc/osc.h **** #endif
  90:.././hal/sam3u1c/inc/osc.h **** 
  91:.././hal/sam3u1c/inc/osc.h **** /**
  92:.././hal/sam3u1c/inc/osc.h ****  * \ingroup clk_group
  93:.././hal/sam3u1c/inc/osc.h ****  * \defgroup osc_group Oscillator Management
  94:.././hal/sam3u1c/inc/osc.h ****  *
  95:.././hal/sam3u1c/inc/osc.h ****  * This group contains functions and definitions related to configuring
  96:.././hal/sam3u1c/inc/osc.h ****  * and enabling/disabling on-chip oscillators. Internal RC-oscillators,
  97:.././hal/sam3u1c/inc/osc.h ****  * external crystal oscillators and external clock generators are
  98:.././hal/sam3u1c/inc/osc.h ****  * supported by this module. What all of these have in common is that
  99:.././hal/sam3u1c/inc/osc.h ****  * they swing at a fixed, nominal frequency which is normally not
 100:.././hal/sam3u1c/inc/osc.h ****  * adjustable.
 101:.././hal/sam3u1c/inc/osc.h ****  *
 102:.././hal/sam3u1c/inc/osc.h ****  * \par Example: Enabling an oscillator
 103:.././hal/sam3u1c/inc/osc.h ****  *
 104:.././hal/sam3u1c/inc/osc.h ****  * The following example demonstrates how to enable the external
 105:.././hal/sam3u1c/inc/osc.h ****  * oscillator on XMEGA A and wait for it to be ready to use. The
 106:.././hal/sam3u1c/inc/osc.h ****  * oscillator identifiers are platform-specific, so while the same
 107:.././hal/sam3u1c/inc/osc.h ****  * procedure is used on all platforms, the parameter to osc_enable()
 108:.././hal/sam3u1c/inc/osc.h ****  * will be different from device to device.
 109:.././hal/sam3u1c/inc/osc.h ****  * \code
 110:.././hal/sam3u1c/inc/osc.h **** 	osc_enable(OSC_ID_XOSC);
 111:.././hal/sam3u1c/inc/osc.h **** 	osc_wait_ready(OSC_ID_XOSC); \endcode
 112:.././hal/sam3u1c/inc/osc.h ****  *
 113:.././hal/sam3u1c/inc/osc.h ****  * \section osc_group_board Board-specific Definitions
 114:.././hal/sam3u1c/inc/osc.h ****  * If external oscillators are used, the board code must provide the
 115:.././hal/sam3u1c/inc/osc.h ****  * following definitions for each of those:
 116:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_HZ: The nominal frequency of the oscillator.
 117:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_STARTUP_US: The startup time of the
 118:.././hal/sam3u1c/inc/osc.h ****  *     oscillator in microseconds.
 119:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_TYPE: The type of oscillator connected, i.e.
 120:.././hal/sam3u1c/inc/osc.h ****  *     whether it's a crystal or external clock, and sometimes what kind
 121:.././hal/sam3u1c/inc/osc.h ****  *     of crystal it is. The meaning of this value is platform-specific.
 122:.././hal/sam3u1c/inc/osc.h ****  *
 123:.././hal/sam3u1c/inc/osc.h ****  * @{
 124:.././hal/sam3u1c/inc/osc.h ****  */
 125:.././hal/sam3u1c/inc/osc.h **** 
 126:.././hal/sam3u1c/inc/osc.h **** //! \name Oscillator Management
 127:.././hal/sam3u1c/inc/osc.h **** //@{
 128:.././hal/sam3u1c/inc/osc.h **** /**
 129:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_enable(uint8_t id)
 130:.././hal/sam3u1c/inc/osc.h ****  * \brief Enable oscillator \a id
 131:.././hal/sam3u1c/inc/osc.h ****  *
 132:.././hal/sam3u1c/inc/osc.h ****  * The startup time and mode value is automatically determined based on
 133:.././hal/sam3u1c/inc/osc.h ****  * definitions in the board code.
 134:.././hal/sam3u1c/inc/osc.h ****  */
 135:.././hal/sam3u1c/inc/osc.h **** /**
 136:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_disable(uint8_t id)
 137:.././hal/sam3u1c/inc/osc.h ****  * \brief Disable oscillator \a id
 138:.././hal/sam3u1c/inc/osc.h ****  */
 139:.././hal/sam3u1c/inc/osc.h **** /**
 140:.././hal/sam3u1c/inc/osc.h ****  * \fn osc_is_ready(uint8_t id)
 141:.././hal/sam3u1c/inc/osc.h ****  * \brief Determine whether oscillator \a id is ready.
 142:.././hal/sam3u1c/inc/osc.h ****  * \retval true Oscillator \a id is running and ready to use as a clock
 143:.././hal/sam3u1c/inc/osc.h ****  * source.
 144:.././hal/sam3u1c/inc/osc.h ****  * \retval false Oscillator \a id is not running.
 145:.././hal/sam3u1c/inc/osc.h ****  */
 146:.././hal/sam3u1c/inc/osc.h **** /**
 147:.././hal/sam3u1c/inc/osc.h ****  * \fn uint32_t osc_get_rate(uint8_t id)
 148:.././hal/sam3u1c/inc/osc.h ****  * \brief Return the frequency of oscillator \a id in Hz
 149:.././hal/sam3u1c/inc/osc.h ****  */
 150:.././hal/sam3u1c/inc/osc.h **** 
 151:.././hal/sam3u1c/inc/osc.h **** #ifndef __ASSEMBLY__
 152:.././hal/sam3u1c/inc/osc.h **** 
 153:.././hal/sam3u1c/inc/osc.h **** /**
 154:.././hal/sam3u1c/inc/osc.h ****  * \brief Wait until the oscillator identified by \a id is ready
 155:.././hal/sam3u1c/inc/osc.h ****  *
 156:.././hal/sam3u1c/inc/osc.h ****  * This function will busy-wait for the oscillator identified by \a id
 157:.././hal/sam3u1c/inc/osc.h ****  * to become stable and ready to use as a clock source.
 158:.././hal/sam3u1c/inc/osc.h ****  *
 159:.././hal/sam3u1c/inc/osc.h ****  * \param id A number identifying the oscillator to wait for.
 160:.././hal/sam3u1c/inc/osc.h ****  */
 161:.././hal/sam3u1c/inc/osc.h **** static inline void osc_wait_ready(uint8_t id)
 162:.././hal/sam3u1c/inc/osc.h **** {
 363              	 .loc 2 162 1
 364              	 .cfi_startproc
 365              	 
 366              	 
 367 0000 80B5     	 push {r7,lr}
 368              	.LCFI16:
 369              	 .cfi_def_cfa_offset 8
 370              	 .cfi_offset 7,-8
 371              	 .cfi_offset 14,-4
 372 0002 82B0     	 sub sp,sp,#8
 373              	.LCFI17:
 374              	 .cfi_def_cfa_offset 16
 375 0004 00AF     	 add r7,sp,#0
 376              	.LCFI18:
 377              	 .cfi_def_cfa_register 7
 378 0006 0346     	 mov r3,r0
 379 0008 FB71     	 strb r3,[r7,#7]
 163:.././hal/sam3u1c/inc/osc.h **** 	while (!osc_is_ready(id)) {
 380              	 .loc 2 163 8
 381 000a 00BF     	 nop
 382              	.L41:
 383              	 .loc 2 163 10 discriminator 1
 384 000c FB79     	 ldrb r3,[r7,#7]
 385 000e 1846     	 mov r0,r3
 386 0010 064B     	 ldr r3,.L42
 387 0012 9847     	 blx r3
 388              	.LVL10:
 389 0014 0346     	 mov r3,r0
 390              	 .loc 2 163 9 discriminator 1
 391 0016 83F00103 	 eor r3,r3,#1
 392 001a DBB2     	 uxtb r3,r3
 393              	 .loc 2 163 8 discriminator 1
 394 001c 002B     	 cmp r3,#0
 395 001e F5D1     	 bne .L41
 164:.././hal/sam3u1c/inc/osc.h **** 		/* Do nothing */
 165:.././hal/sam3u1c/inc/osc.h **** 	}
 166:.././hal/sam3u1c/inc/osc.h **** }
 396              	 .loc 2 166 1
 397 0020 00BF     	 nop
 398 0022 00BF     	 nop
 399 0024 0837     	 adds r7,r7,#8
 400              	.LCFI19:
 401              	 .cfi_def_cfa_offset 8
 402 0026 BD46     	 mov sp,r7
 403              	.LCFI20:
 404              	 .cfi_def_cfa_register 13
 405              	 
 406 0028 80BD     	 pop {r7,pc}
 407              	.L43:
 408 002a 00BF     	 .align 2
 409              	.L42:
 410 002c 00000000 	 .word osc_is_ready
 411              	 .cfi_endproc
 412              	.LFE73:
 414              	 .section .text.pll_config_init,"ax",%progbits
 415              	 .align 1
 416              	 .syntax unified
 417              	 .thumb
 418              	 .thumb_func
 419              	 .fpu softvfp
 421              	pll_config_init:
 422              	.LFB74:
 423              	 .file 3 ".././hal/sam3u1c/inc/sam3u/pll.h"
   1:.././hal/sam3u1c/inc/sam3u/pll.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \brief Chip-specific PLL definitions.
   5:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/pll.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/pll.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/pll.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/pll.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/pll.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/pll.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/pll.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/pll.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/pll.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/pll.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/pll.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/pll.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/pll.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/pll.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/pll.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/pll.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/pll.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/pll.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/pll.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  44:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifndef CHIP_PLL_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/pll.h **** #define CHIP_PLL_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  47:.././hal/sam3u1c/inc/sam3u/pll.h **** #include <osc.h>
  48:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  49:.././hal/sam3u1c/inc/sam3u/pll.h **** /// @cond 0
  50:.././hal/sam3u1c/inc/sam3u/pll.h **** /**INDENT-OFF**/
  51:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef __cplusplus
  52:.././hal/sam3u1c/inc/sam3u/pll.h **** extern "C" {
  53:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
  54:.././hal/sam3u1c/inc/sam3u/pll.h **** /**INDENT-ON**/
  55:.././hal/sam3u1c/inc/sam3u/pll.h **** /// @endcond
  56:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  57:.././hal/sam3u1c/inc/sam3u/pll.h **** /**
  58:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \weakgroup pll_group
  59:.././hal/sam3u1c/inc/sam3u/pll.h ****  * @{
  60:.././hal/sam3u1c/inc/sam3u/pll.h ****  */
  61:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  62:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_OUTPUT_MIN_HZ   96000000
  63:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_OUTPUT_MAX_HZ   192000000
  64:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  65:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_INPUT_MIN_HZ    8000000
  66:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_INPUT_MAX_HZ    16000000
  67:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  68:.././hal/sam3u1c/inc/sam3u/pll.h **** #define NR_PLLS             2
  69:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLLA_ID             0
  70:.././hal/sam3u1c/inc/sam3u/pll.h **** #define UPLL_ID             1   //!< USB UTMI PLL.
  71:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  72:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_UPLL_HZ         480000000
  73:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  74:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_COUNT           0x3fU
  75:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  76:.././hal/sam3u1c/inc/sam3u/pll.h **** enum pll_source {
  77:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_4M_RC  = OSC_MAINCK_4M_RC,     //!< Internal 4MHz RC oscillator.
  78:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_8M_RC  = OSC_MAINCK_8M_RC,     //!< Internal 8MHz RC oscillator.
  79:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_12M_RC = OSC_MAINCK_12M_RC,    //!< Internal 12MHz RC oscillator.
  80:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_XTAL   = OSC_MAINCK_XTAL,      //!< External crystal oscillator.
  81:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_BYPASS = OSC_MAINCK_BYPASS,    //!< External bypass oscillator.
  82:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_NR_SOURCES,                               //!< Number of PLL sources.
  83:.././hal/sam3u1c/inc/sam3u/pll.h **** };
  84:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  85:.././hal/sam3u1c/inc/sam3u/pll.h **** struct pll_config {
  86:.././hal/sam3u1c/inc/sam3u/pll.h **** 	uint32_t ctrl;
  87:.././hal/sam3u1c/inc/sam3u/pll.h **** };
  88:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  89:.././hal/sam3u1c/inc/sam3u/pll.h **** #define pll_get_default_rate(pll_id)                                       \
  90:.././hal/sam3u1c/inc/sam3u/pll.h **** 	((osc_get_rate(CONFIG_PLL##pll_id##_SOURCE)                        \
  91:.././hal/sam3u1c/inc/sam3u/pll.h **** 			* CONFIG_PLL##pll_id##_MUL)                        \
  92:.././hal/sam3u1c/inc/sam3u/pll.h **** 			/ CONFIG_PLL##pll_id##_DIV)
  93:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  94:.././hal/sam3u1c/inc/sam3u/pll.h **** /* Force UTMI PLL parameters (Hardware defined) */
  95:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL1_SOURCE
  96:.././hal/sam3u1c/inc/sam3u/pll.h **** # undef CONFIG_PLL1_SOURCE
  97:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
  98:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL1_MUL
  99:.././hal/sam3u1c/inc/sam3u/pll.h **** # undef CONFIG_PLL1_MUL
 100:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 101:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL1_DIV
 102:.././hal/sam3u1c/inc/sam3u/pll.h **** # undef CONFIG_PLL1_DIV
 103:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 104:.././hal/sam3u1c/inc/sam3u/pll.h **** #define CONFIG_PLL1_SOURCE  PLL_SRC_MAINCK_XTAL
 105:.././hal/sam3u1c/inc/sam3u/pll.h **** #define CONFIG_PLL1_MUL     0
 106:.././hal/sam3u1c/inc/sam3u/pll.h **** #define CONFIG_PLL1_DIV     0
 107:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 108:.././hal/sam3u1c/inc/sam3u/pll.h **** /**
 109:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \note The SAM3U PLL hardware interprets mul as mul+1. For readability the
 110:.././hal/sam3u1c/inc/sam3u/pll.h ****  *       hardware mul+1 is hidden in this implementation. Use mul as mul
 111:.././hal/sam3u1c/inc/sam3u/pll.h ****  *       effective value.
 112:.././hal/sam3u1c/inc/sam3u/pll.h ****  */
 113:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_config_init(struct pll_config *p_cfg,
 114:.././hal/sam3u1c/inc/sam3u/pll.h **** 		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
 115:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 424              	 .loc 3 115 1
 425              	 .cfi_startproc
 426              	 
 427              	 
 428 0000 80B5     	 push {r7,lr}
 429              	.LCFI21:
 430              	 .cfi_def_cfa_offset 8
 431              	 .cfi_offset 7,-8
 432              	 .cfi_offset 14,-4
 433 0002 86B0     	 sub sp,sp,#24
 434              	.LCFI22:
 435              	 .cfi_def_cfa_offset 32
 436 0004 00AF     	 add r7,sp,#0
 437              	.LCFI23:
 438              	 .cfi_def_cfa_register 7
 439 0006 F860     	 str r0,[r7,#12]
 440 0008 7A60     	 str r2,[r7,#4]
 441 000a 3B60     	 str r3,[r7]
 442 000c 0B46     	 mov r3,r1
 443 000e FB72     	 strb r3,[r7,#11]
 116:.././hal/sam3u1c/inc/sam3u/pll.h **** 	uint32_t vco_hz;
 117:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 118:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(e_src < PLL_NR_SOURCES);
 119:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 120:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
 444              	 .loc 3 120 5
 445 0010 7B68     	 ldr r3,[r7,#4]
 446 0012 002B     	 cmp r3,#0
 447 0014 07D1     	 bne .L45
 448              	 .loc 3 120 18 discriminator 1
 449 0016 3B68     	 ldr r3,[r7]
 450 0018 002B     	 cmp r3,#0
 451 001a 04D1     	 bne .L45
 121:.././hal/sam3u1c/inc/sam3u/pll.h **** 		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
 452              	 .loc 3 121 15
 453 001c FB68     	 ldr r3,[r7,#12]
 454 001e 4FF47002 	 mov r2,#15728640
 455 0022 1A60     	 str r2,[r3]
 456 0024 1AE0     	 b .L46
 457              	.L45:
 122:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else { /* PLLA */
 123:.././hal/sam3u1c/inc/sam3u/pll.h **** 		/* Calculate internal VCO frequency */
 124:.././hal/sam3u1c/inc/sam3u/pll.h **** 		vco_hz = osc_get_rate(e_src) / ul_div;
 458              	 .loc 3 124 12
 459 0026 FB7A     	 ldrb r3,[r7,#11]
 460 0028 1846     	 mov r0,r3
 461 002a 0E4B     	 ldr r3,.L47
 462 002c 9847     	 blx r3
 463              	.LVL11:
 464 002e 0246     	 mov r2,r0
 465              	 .loc 3 124 10
 466 0030 7B68     	 ldr r3,[r7,#4]
 467 0032 B2FBF3F3 	 udiv r3,r2,r3
 468 0036 7B61     	 str r3,[r7,#20]
 125:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
 126:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
 127:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 128:.././hal/sam3u1c/inc/sam3u/pll.h **** 		vco_hz *= ul_mul;
 469              	 .loc 3 128 10
 470 0038 7B69     	 ldr r3,[r7,#20]
 471 003a 3A68     	 ldr r2,[r7]
 472 003c 02FB03F3 	 mul r3,r2,r3
 473 0040 7B61     	 str r3,[r7,#20]
 129:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
 130:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
 131:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 132:.././hal/sam3u1c/inc/sam3u/pll.h **** 		/* PMC hardware will automatically make it mul+1 */
 133:.././hal/sam3u1c/inc/sam3u/pll.h **** 		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
 474              	 .loc 3 133 17
 475 0042 3B68     	 ldr r3,[r7]
 476 0044 013B     	 subs r3,r3,#1
 477 0046 1A04     	 lsls r2,r3,#16
 478 0048 074B     	 ldr r3,.L47+4
 479 004a 1340     	 ands r3,r3,r2
 134:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CKGR_PLLAR_DIVA(ul_div) |
 480              	 .loc 3 134 4
 481 004c 7A68     	 ldr r2,[r7,#4]
 482 004e D2B2     	 uxtb r2,r2
 133:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CKGR_PLLAR_DIVA(ul_div) |
 483              	 .loc 3 133 45
 484 0050 1343     	 orrs r3,r3,r2
 485              	 .loc 3 134 28
 486 0052 43F47C52 	 orr r2,r3,#16128
 133:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CKGR_PLLAR_DIVA(ul_div) |
 487              	 .loc 3 133 15
 488 0056 FB68     	 ldr r3,[r7,#12]
 489 0058 1A60     	 str r2,[r3]
 135:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
 136:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 137:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 490              	 .loc 3 137 1
 491 005a 00BF     	 nop
 492              	.L46:
 493 005c 00BF     	 nop
 494 005e 1837     	 adds r7,r7,#24
 495              	.LCFI24:
 496              	 .cfi_def_cfa_offset 8
 497 0060 BD46     	 mov sp,r7
 498              	.LCFI25:
 499              	 .cfi_def_cfa_register 13
 500              	 
 501 0062 80BD     	 pop {r7,pc}
 502              	.L48:
 503              	 .align 2
 504              	.L47:
 505 0064 00000000 	 .word osc_get_rate
 506 0068 0000FF07 	 .word 134152192
 507              	 .cfi_endproc
 508              	.LFE74:
 510              	 .section .text.pll_enable,"ax",%progbits
 511              	 .align 1
 512              	 .syntax unified
 513              	 .thumb
 514              	 .thumb_func
 515              	 .fpu softvfp
 517              	pll_enable:
 518              	.LFB77:
 138:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 139:.././hal/sam3u1c/inc/sam3u/pll.h **** #define pll_config_defaults(cfg, pll_id)                                   \
 140:.././hal/sam3u1c/inc/sam3u/pll.h **** 	pll_config_init(cfg,                                               \
 141:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CONFIG_PLL##pll_id##_SOURCE,                       \
 142:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CONFIG_PLL##pll_id##_DIV,                          \
 143:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CONFIG_PLL##pll_id##_MUL)
 144:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 145:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_config_read(struct pll_config *p_cfg, uint32_t ul_pll_id)
 146:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 147:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 148:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 149:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 150:.././hal/sam3u1c/inc/sam3u/pll.h **** 		p_cfg->ctrl = PMC->CKGR_PLLAR;
 151:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 152:.././hal/sam3u1c/inc/sam3u/pll.h **** 		p_cfg->ctrl = PMC->CKGR_UCKR;
 153:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 154:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 155:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 156:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_config_write(const struct pll_config *p_cfg,
 157:.././hal/sam3u1c/inc/sam3u/pll.h **** 		uint32_t ul_pll_id)
 158:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 159:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 160:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 161:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 162:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pmc_disable_pllack(); // Always stop PLL first!
 163:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
 164:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 165:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_UCKR = p_cfg->ctrl;
 166:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 167:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 168:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 169:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_enable(const struct pll_config *p_cfg,
 170:.././hal/sam3u1c/inc/sam3u/pll.h **** 		uint32_t ul_pll_id)
 171:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 519              	 .loc 3 171 1
 520              	 .cfi_startproc
 521              	 
 522              	 
 523 0000 80B5     	 push {r7,lr}
 524              	.LCFI26:
 525              	 .cfi_def_cfa_offset 8
 526              	 .cfi_offset 7,-8
 527              	 .cfi_offset 14,-4
 528 0002 82B0     	 sub sp,sp,#8
 529              	.LCFI27:
 530              	 .cfi_def_cfa_offset 16
 531 0004 00AF     	 add r7,sp,#0
 532              	.LCFI28:
 533              	 .cfi_def_cfa_register 7
 534 0006 7860     	 str r0,[r7,#4]
 535 0008 3960     	 str r1,[r7]
 172:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 173:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 174:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 536              	 .loc 3 174 5
 537 000a 3B68     	 ldr r3,[r7]
 538 000c 002B     	 cmp r3,#0
 539 000e 08D1     	 bne .L50
 175:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pmc_disable_pllack(); // Always stop PLL first!
 540              	 .loc 3 175 3
 541 0010 094B     	 ldr r3,.L53
 542 0012 9847     	 blx r3
 543              	.LVL12:
 176:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
 544              	 .loc 3 176 43
 545 0014 7B68     	 ldr r3,[r7,#4]
 546 0016 1B68     	 ldr r3,[r3]
 547              	 .loc 3 176 6
 548 0018 084A     	 ldr r2,.L53+4
 549              	 .loc 3 176 36
 550 001a 43F00053 	 orr r3,r3,#536870912
 551              	 .loc 3 176 19
 552 001e 9362     	 str r3,[r2,#40]
 177:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
 179:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 180:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 553              	 .loc 3 180 1
 554 0020 05E0     	 b .L52
 555              	.L50:
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 556              	 .loc 3 178 25
 557 0022 7B68     	 ldr r3,[r7,#4]
 558 0024 1B68     	 ldr r3,[r3]
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 559              	 .loc 3 178 6
 560 0026 054A     	 ldr r2,.L53+4
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 561              	 .loc 3 178 32
 562 0028 43F48033 	 orr r3,r3,#65536
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 563              	 .loc 3 178 18
 564 002c D361     	 str r3,[r2,#28]
 565              	.L52:
 566              	 .loc 3 180 1
 567 002e 00BF     	 nop
 568 0030 0837     	 adds r7,r7,#8
 569              	.LCFI29:
 570              	 .cfi_def_cfa_offset 8
 571 0032 BD46     	 mov sp,r7
 572              	.LCFI30:
 573              	 .cfi_def_cfa_register 13
 574              	 
 575 0034 80BD     	 pop {r7,pc}
 576              	.L54:
 577 0036 00BF     	 .align 2
 578              	.L53:
 579 0038 00000000 	 .word pmc_disable_pllack
 580 003c 00040E40 	 .word 1074660352
 581              	 .cfi_endproc
 582              	.LFE77:
 584              	 .section .text.pll_is_locked,"ax",%progbits
 585              	 .align 1
 586              	 .syntax unified
 587              	 .thumb
 588              	 .thumb_func
 589              	 .fpu softvfp
 591              	pll_is_locked:
 592              	.LFB79:
 181:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 182:.././hal/sam3u1c/inc/sam3u/pll.h **** /**
 183:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \note This will only disable the selected PLL, not the underlying oscillator
 184:.././hal/sam3u1c/inc/sam3u/pll.h ****  *       (mainck).
 185:.././hal/sam3u1c/inc/sam3u/pll.h ****  */
 186:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_disable(uint32_t ul_pll_id)
 187:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 188:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 189:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 190:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 191:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pmc_disable_pllack();
 192:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 193:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
 194:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 195:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 196:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 197:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
 198:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 593              	 .loc 3 198 1
 594              	 .cfi_startproc
 595              	 
 596              	 
 597 0000 80B5     	 push {r7,lr}
 598              	.LCFI31:
 599              	 .cfi_def_cfa_offset 8
 600              	 .cfi_offset 7,-8
 601              	 .cfi_offset 14,-4
 602 0002 82B0     	 sub sp,sp,#8
 603              	.LCFI32:
 604              	 .cfi_def_cfa_offset 16
 605 0004 00AF     	 add r7,sp,#0
 606              	.LCFI33:
 607              	 .cfi_def_cfa_register 7
 608 0006 7860     	 str r0,[r7,#4]
 199:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 200:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 201:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 609              	 .loc 3 201 5
 610 0008 7B68     	 ldr r3,[r7,#4]
 611 000a 002B     	 cmp r3,#0
 612 000c 03D1     	 bne .L56
 202:.././hal/sam3u1c/inc/sam3u/pll.h **** 		return pmc_is_locked_pllack();
 613              	 .loc 3 202 10
 614 000e 054B     	 ldr r3,.L58
 615 0010 9847     	 blx r3
 616              	.LVL13:
 617 0012 0346     	 mov r3,r0
 618 0014 02E0     	 b .L57
 619              	.L56:
 203:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 204:.././hal/sam3u1c/inc/sam3u/pll.h **** 		return pmc_is_locked_upll();
 620              	 .loc 3 204 10
 621 0016 044B     	 ldr r3,.L58+4
 622 0018 9847     	 blx r3
 623              	.LVL14:
 624 001a 0346     	 mov r3,r0
 625              	.L57:
 205:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 206:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 626              	 .loc 3 206 1
 627 001c 1846     	 mov r0,r3
 628 001e 0837     	 adds r7,r7,#8
 629              	.LCFI34:
 630              	 .cfi_def_cfa_offset 8
 631 0020 BD46     	 mov sp,r7
 632              	.LCFI35:
 633              	 .cfi_def_cfa_register 13
 634              	 
 635 0022 80BD     	 pop {r7,pc}
 636              	.L59:
 637              	 .align 2
 638              	.L58:
 639 0024 00000000 	 .word pmc_is_locked_pllack
 640 0028 00000000 	 .word pmc_is_locked_upll
 641              	 .cfi_endproc
 642              	.LFE79:
 644              	 .section .text.pll_enable_source,"ax",%progbits
 645              	 .align 1
 646              	 .syntax unified
 647              	 .thumb
 648              	 .thumb_func
 649              	 .fpu softvfp
 651              	pll_enable_source:
 652              	.LFB80:
 207:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 208:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_enable_source(enum pll_source e_src)
 209:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 653              	 .loc 3 209 1
 654              	 .cfi_startproc
 655              	 
 656              	 
 657 0000 80B5     	 push {r7,lr}
 658              	.LCFI36:
 659              	 .cfi_def_cfa_offset 8
 660              	 .cfi_offset 7,-8
 661              	 .cfi_offset 14,-4
 662 0002 82B0     	 sub sp,sp,#8
 663              	.LCFI37:
 664              	 .cfi_def_cfa_offset 16
 665 0004 00AF     	 add r7,sp,#0
 666              	.LCFI38:
 667              	 .cfi_def_cfa_register 7
 668 0006 0346     	 mov r3,r0
 669 0008 FB71     	 strb r3,[r7,#7]
 210:.././hal/sam3u1c/inc/sam3u/pll.h **** 	switch (e_src) {
 670              	 .loc 3 210 2
 671 000a FB79     	 ldrb r3,[r7,#7]
 672 000c 033B     	 subs r3,r3,#3
 673 000e 042B     	 cmp r3,#4
 674 0010 08D8     	 bhi .L63
 211:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_4M_RC:
 212:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_8M_RC:
 213:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_12M_RC:
 214:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_XTAL:
 215:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_BYPASS:
 216:.././hal/sam3u1c/inc/sam3u/pll.h **** 		osc_enable(e_src);
 675              	 .loc 3 216 3
 676 0012 FB79     	 ldrb r3,[r7,#7]
 677 0014 1846     	 mov r0,r3
 678 0016 064B     	 ldr r3,.L64
 679 0018 9847     	 blx r3
 680              	.LVL15:
 217:.././hal/sam3u1c/inc/sam3u/pll.h **** 		osc_wait_ready(e_src);
 681              	 .loc 3 217 3
 682 001a FB79     	 ldrb r3,[r7,#7]
 683 001c 1846     	 mov r0,r3
 684 001e 054B     	 ldr r3,.L64+4
 685 0020 9847     	 blx r3
 686              	.LVL16:
 218:.././hal/sam3u1c/inc/sam3u/pll.h **** 		break;
 687              	 .loc 3 218 3
 688 0022 00E0     	 b .L62
 689              	.L63:
 219:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 220:.././hal/sam3u1c/inc/sam3u/pll.h **** 	default:
 221:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(false);
 222:.././hal/sam3u1c/inc/sam3u/pll.h **** 		break;
 690              	 .loc 3 222 3
 691 0024 00BF     	 nop
 692              	.L62:
 223:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 224:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 693              	 .loc 3 224 1
 694 0026 00BF     	 nop
 695 0028 0837     	 adds r7,r7,#8
 696              	.LCFI39:
 697              	 .cfi_def_cfa_offset 8
 698 002a BD46     	 mov sp,r7
 699              	.LCFI40:
 700              	 .cfi_def_cfa_register 13
 701              	 
 702 002c 80BD     	 pop {r7,pc}
 703              	.L65:
 704 002e 00BF     	 .align 2
 705              	.L64:
 706 0030 00000000 	 .word osc_enable
 707 0034 00000000 	 .word osc_wait_ready
 708              	 .cfi_endproc
 709              	.LFE80:
 711              	 .section .text.pll_enable_config_defaults,"ax",%progbits
 712              	 .align 1
 713              	 .syntax unified
 714              	 .thumb
 715              	 .thumb_func
 716              	 .fpu softvfp
 718              	pll_enable_config_defaults:
 719              	.LFB81:
 225:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 226:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
 227:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 720              	 .loc 3 227 1
 721              	 .cfi_startproc
 722              	 
 723              	 
 724 0000 90B5     	 push {r4,r7,lr}
 725              	.LCFI41:
 726              	 .cfi_def_cfa_offset 12
 727              	 .cfi_offset 4,-12
 728              	 .cfi_offset 7,-8
 729              	 .cfi_offset 14,-4
 730 0002 85B0     	 sub sp,sp,#20
 731              	.LCFI42:
 732              	 .cfi_def_cfa_offset 32
 733 0004 00AF     	 add r7,sp,#0
 734              	.LCFI43:
 735              	 .cfi_def_cfa_register 7
 736 0006 7860     	 str r0,[r7,#4]
 228:.././hal/sam3u1c/inc/sam3u/pll.h **** 	struct pll_config pllcfg;
 229:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 230:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (pll_is_locked(ul_pll_id)) {
 737              	 .loc 3 230 6
 738 0008 7868     	 ldr r0,[r7,#4]
 739 000a 214B     	 ldr r3,.L77
 740 000c 9847     	 blx r3
 741              	.LVL17:
 742 000e 0346     	 mov r3,r0
 743              	 .loc 3 230 5
 744 0010 002B     	 cmp r3,#0
 745 0012 39D1     	 bne .L76
 231:.././hal/sam3u1c/inc/sam3u/pll.h **** 		return; // Pll already running
 232:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 233:.././hal/sam3u1c/inc/sam3u/pll.h **** 	switch (ul_pll_id) {
 746              	 .loc 3 233 2
 747 0014 7B68     	 ldr r3,[r7,#4]
 748 0016 002B     	 cmp r3,#0
 749 0018 03D0     	 beq .L69
 750 001a 7B68     	 ldr r3,[r7,#4]
 751 001c 012B     	 cmp r3,#1
 752 001e 15D0     	 beq .L70
 234:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL0_SOURCE
 235:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case 0:
 236:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pll_enable_source(CONFIG_PLL0_SOURCE);
 237:.././hal/sam3u1c/inc/sam3u/pll.h **** 		// Source is mainck, select source for mainck
 238:.././hal/sam3u1c/inc/sam3u/pll.h **** 		if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_4M_RC ||
 239:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_8M_RC ||
 240:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_12M_RC) {
 241:.././hal/sam3u1c/inc/sam3u/pll.h **** 			pmc_mainck_osc_select(0);
 242:.././hal/sam3u1c/inc/sam3u/pll.h **** 			while(!pmc_osc_is_ready_mainck());
 243:.././hal/sam3u1c/inc/sam3u/pll.h **** #  ifndef CONFIG_PLL1_SOURCE
 244:.././hal/sam3u1c/inc/sam3u/pll.h **** 			pmc_osc_disable_main_xtal();
 245:.././hal/sam3u1c/inc/sam3u/pll.h **** #  endif
 246:.././hal/sam3u1c/inc/sam3u/pll.h **** 		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
 247:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
 248:.././hal/sam3u1c/inc/sam3u/pll.h **** 			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
 249:.././hal/sam3u1c/inc/sam3u/pll.h **** 			while(!pmc_osc_is_ready_mainck());
 250:.././hal/sam3u1c/inc/sam3u/pll.h **** 		}
 251:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pll_config_init(&pllcfg,
 252:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_SOURCE,
 253:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_DIV,
 254:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_MUL);
 255:.././hal/sam3u1c/inc/sam3u/pll.h **** 		break;
 256:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 257:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL1_SOURCE
 258:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case 1:
 259:.././hal/sam3u1c/inc/sam3u/pll.h **** 		if (pmc_osc_is_bypassed_main_xtal()) {
 260:.././hal/sam3u1c/inc/sam3u/pll.h **** 			// There must be 12MHz clock source on board
 261:.././hal/sam3u1c/inc/sam3u/pll.h **** 		} else {
 262:.././hal/sam3u1c/inc/sam3u/pll.h **** 			// By default, enable and uses XTAL 12MHz
 263:.././hal/sam3u1c/inc/sam3u/pll.h **** 			pll_enable_source(CONFIG_PLL1_SOURCE);
 264:.././hal/sam3u1c/inc/sam3u/pll.h **** 		}
 265:.././hal/sam3u1c/inc/sam3u/pll.h **** 		// Source is main osc
 266:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pll_config_init(&pllcfg,
 267:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL1_SOURCE,
 268:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL1_DIV,
 269:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL1_MUL);
 270:.././hal/sam3u1c/inc/sam3u/pll.h **** 		break;
 271:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 272:.././hal/sam3u1c/inc/sam3u/pll.h **** 	default:
 273:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(false);
 274:.././hal/sam3u1c/inc/sam3u/pll.h **** 		break;
 753              	 .loc 3 274 3
 754 0020 24E0     	 b .L73
 755              	.L69:
 236:.././hal/sam3u1c/inc/sam3u/pll.h **** 		// Source is mainck, select source for mainck
 756              	 .loc 3 236 3
 757 0022 0620     	 movs r0,#6
 758 0024 1B4B     	 ldr r3,.L77+4
 759 0026 9847     	 blx r3
 760              	.LVL18:
 248:.././hal/sam3u1c/inc/sam3u/pll.h **** 			while(!pmc_osc_is_ready_mainck());
 761              	 .loc 3 248 4
 762 0028 4FF08070 	 mov r0,#16777216
 763 002c 1A4B     	 ldr r3,.L77+8
 764 002e 9847     	 blx r3
 765              	.LVL19:
 249:.././hal/sam3u1c/inc/sam3u/pll.h **** 		}
 766              	 .loc 3 249 9
 767 0030 00BF     	 nop
 768              	.L72:
 249:.././hal/sam3u1c/inc/sam3u/pll.h **** 		}
 769              	 .loc 3 249 11 discriminator 1
 770 0032 1A4B     	 ldr r3,.L77+12
 771 0034 9847     	 blx r3
 772              	.LVL20:
 773 0036 0346     	 mov r3,r0
 249:.././hal/sam3u1c/inc/sam3u/pll.h **** 		}
 774              	 .loc 3 249 9 discriminator 1
 775 0038 002B     	 cmp r3,#0
 776 003a FAD0     	 beq .L72
 251:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_SOURCE,
 777              	 .loc 3 251 3
 778 003c 07F10C00 	 add r0,r7,#12
 779 0040 1023     	 movs r3,#16
 780 0042 0122     	 movs r2,#1
 781 0044 0621     	 movs r1,#6
 782 0046 164C     	 ldr r4,.L77+16
 783 0048 A047     	 blx r4
 784              	.LVL21:
 255:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 785              	 .loc 3 255 3
 786 004a 0FE0     	 b .L73
 787              	.L70:
 259:.././hal/sam3u1c/inc/sam3u/pll.h **** 			// There must be 12MHz clock source on board
 788              	 .loc 3 259 7
 789 004c 154B     	 ldr r3,.L77+20
 790 004e 9847     	 blx r3
 791              	.LVL22:
 792 0050 0346     	 mov r3,r0
 259:.././hal/sam3u1c/inc/sam3u/pll.h **** 			// There must be 12MHz clock source on board
 793              	 .loc 3 259 6
 794 0052 002B     	 cmp r3,#0
 795 0054 02D1     	 bne .L74
 263:.././hal/sam3u1c/inc/sam3u/pll.h **** 		}
 796              	 .loc 3 263 4
 797 0056 0620     	 movs r0,#6
 798 0058 0E4B     	 ldr r3,.L77+4
 799 005a 9847     	 blx r3
 800              	.LVL23:
 801              	.L74:
 266:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL1_SOURCE,
 802              	 .loc 3 266 3
 803 005c 07F10C00 	 add r0,r7,#12
 804 0060 0023     	 movs r3,#0
 805 0062 0022     	 movs r2,#0
 806 0064 0621     	 movs r1,#6
 807 0066 0E4C     	 ldr r4,.L77+16
 808 0068 A047     	 blx r4
 809              	.LVL24:
 270:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 810              	 .loc 3 270 3
 811 006a 00BF     	 nop
 812              	.L73:
 275:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 276:.././hal/sam3u1c/inc/sam3u/pll.h **** 	pll_enable(&pllcfg, ul_pll_id);
 813              	 .loc 3 276 2
 814 006c 07F10C03 	 add r3,r7,#12
 815 0070 7968     	 ldr r1,[r7,#4]
 816 0072 1846     	 mov r0,r3
 817 0074 0C4B     	 ldr r3,.L77+24
 818 0076 9847     	 blx r3
 819              	.LVL25:
 277:.././hal/sam3u1c/inc/sam3u/pll.h **** 	while (!pll_is_locked(ul_pll_id));
 820              	 .loc 3 277 8
 821 0078 00BF     	 nop
 822              	.L75:
 823              	 .loc 3 277 10 discriminator 1
 824 007a 7868     	 ldr r0,[r7,#4]
 825 007c 044B     	 ldr r3,.L77
 826 007e 9847     	 blx r3
 827              	.LVL26:
 828 0080 0346     	 mov r3,r0
 829              	 .loc 3 277 8 discriminator 1
 830 0082 002B     	 cmp r3,#0
 831 0084 F9D0     	 beq .L75
 832 0086 00E0     	 b .L66
 833              	.L76:
 231:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 834              	 .loc 3 231 3
 835 0088 00BF     	 nop
 836              	.L66:
 278:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 837              	 .loc 3 278 1
 838 008a 1437     	 adds r7,r7,#20
 839              	.LCFI44:
 840              	 .cfi_def_cfa_offset 12
 841 008c BD46     	 mov sp,r7
 842              	.LCFI45:
 843              	 .cfi_def_cfa_register 13
 844              	 
 845 008e 90BD     	 pop {r4,r7,pc}
 846              	.L78:
 847              	 .align 2
 848              	.L77:
 849 0090 00000000 	 .word pll_is_locked
 850 0094 00000000 	 .word pll_enable_source
 851 0098 00000000 	 .word pmc_mainck_osc_select
 852 009c 00000000 	 .word pmc_osc_is_ready_mainck
 853 00a0 00000000 	 .word pll_config_init
 854 00a4 00000000 	 .word pmc_osc_is_bypassed_main_xtal
 855 00a8 00000000 	 .word pll_enable
 856              	 .cfi_endproc
 857              	.LFE81:
 859              	 .section .text.sleepmgr_sleep,"ax",%progbits
 860              	 .align 1
 861              	 .syntax unified
 862              	 .thumb
 863              	 .thumb_func
 864              	 .fpu softvfp
 866              	sleepmgr_sleep:
 867              	.LFB165:
 868              	 .file 4 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
   1:.././hal/sam3u1c/inc/sam/sleepmgr.h **** /**
   2:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \file
   3:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
   4:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \brief SAM3/SAM4 Sleep manager implementation.
   5:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
   6:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * Copyright (c) 2012 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
   8:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  10:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  12:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  15:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  18:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  22:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  25:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  28:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  40:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  42:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  */
  43:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  44:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #ifndef SAM_SLEEPMGR_INCLUDED
  45:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #define SAM_SLEEPMGR_INCLUDED
  46:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  47:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #ifdef __cplusplus
  48:.././hal/sam3u1c/inc/sam/sleepmgr.h **** extern "C" {
  49:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #endif
  50:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  51:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #include <compiler.h>
  52:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #include <conf_sleepmgr.h>
  53:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #include <sleep.h>
  54:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #include <interrupt.h>
  55:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  56:.././hal/sam3u1c/inc/sam/sleepmgr.h **** /**
  57:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \weakgroup sleepmgr_group
  58:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * @{
  59:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  */
  60:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #if (SAMG51 || SAMG53 || SAMG54)
  61:.././hal/sam3u1c/inc/sam/sleepmgr.h **** enum sleepmgr_mode {
  62:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	//! Active mode.
  63:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_ACTIVE = 0,
  64:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	/*! Wait mode, wakeup fast (in 3ms).
  65:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  Potential Wake Up sources: fast startup events */
  66:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_WAIT_FAST,
  67:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	/*! Wait mode.
  68:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  Potential Wake Up sources: fast startup events */
  69:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_WAIT,
  70:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  71:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_NR_OF_MODES,
  72:.././hal/sam3u1c/inc/sam/sleepmgr.h **** };
  73:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  74:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #else
  75:.././hal/sam3u1c/inc/sam/sleepmgr.h **** enum sleepmgr_mode {
  76:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	//! Active mode.
  77:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_ACTIVE = 0,
  78:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	/*! WFE sleep mode.
  79:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  Potential Wake Up sources:
  80:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  fast startup events (USB, RTC, RTT, WKUPs),
  81:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  interrupt, and events. */
  82:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_SLEEP_WFE,
  83:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	/*! WFI sleep mode.
  84:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 * Potential Wake Up sources: fast startup events and interrupt. */
  85:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_SLEEP_WFI,
  86:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	/*! Wait mode, wakeup fast (in 3ms).
  87:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  XTAL is not disabled when sleep.
  88:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  Potential Wake Up sources: fast startup events */
  89:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_WAIT_FAST,
  90:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	/*! Wait mode.
  91:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  Potential Wake Up sources: fast startup events */
  92:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_WAIT,
  93:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	//! Backup mode. Potential Wake Up sources: WKUPs, SM, RTT, RTC.
  94:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_BACKUP,
  95:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  96:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_NR_OF_MODES,
  97:.././hal/sam3u1c/inc/sam/sleepmgr.h **** };
  98:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #endif
  99:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
 100:.././hal/sam3u1c/inc/sam/sleepmgr.h **** /**
 101:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \internal
 102:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \name Internal arrays
 103:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * @{
 104:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  */
 105:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #if defined(CONFIG_SLEEPMGR_ENABLE) || defined(__DOXYGEN__)
 106:.././hal/sam3u1c/inc/sam/sleepmgr.h **** //! Sleep mode lock counters
 107:.././hal/sam3u1c/inc/sam/sleepmgr.h **** extern uint8_t sleepmgr_locks[];
 108:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 109:.././hal/sam3u1c/inc/sam/sleepmgr.h **** //! @}
 110:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
 111:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
 112:.././hal/sam3u1c/inc/sam/sleepmgr.h **** static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
 113:.././hal/sam3u1c/inc/sam/sleepmgr.h **** {
 869              	 .loc 4 113 1
 870              	 .cfi_startproc
 871              	 
 872              	 
 873 0000 80B5     	 push {r7,lr}
 874              	.LCFI46:
 875              	 .cfi_def_cfa_offset 8
 876              	 .cfi_offset 7,-8
 877              	 .cfi_offset 14,-4
 878 0002 82B0     	 sub sp,sp,#8
 879              	.LCFI47:
 880              	 .cfi_def_cfa_offset 16
 881 0004 00AF     	 add r7,sp,#0
 882              	.LCFI48:
 883              	 .cfi_def_cfa_register 7
 884 0006 0346     	 mov r3,r0
 885 0008 FB71     	 strb r3,[r7,#7]
 886              	.LBB15:
 887              	.LBB16:
 888              	 .file 5 ".././hal/sam3u1c/inc/core_cmFunc.h"
   1:.././hal/sam3u1c/inc/core_cmFunc.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @date     19. January 2012
   6:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
   7:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  10:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:.././hal/sam3u1c/inc/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:.././hal/sam3u1c/inc/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  15:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  22:.././hal/sam3u1c/inc/core_cmFunc.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  24:.././hal/sam3u1c/inc/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  27:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  28:.././hal/sam3u1c/inc/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:.././hal/sam3u1c/inc/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:.././hal/sam3u1c/inc/core_cmFunc.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  33:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  34:.././hal/sam3u1c/inc/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmFunc.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  37:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  41:.././hal/sam3u1c/inc/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:.././hal/sam3u1c/inc/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  44:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Control Register
  45:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  46:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
  47:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  48:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Control Register value
  49:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  50:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  51:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  52:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regControl);
  54:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  55:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  56:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  57:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Control Register
  58:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  59:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  61:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  63:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  64:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  65:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regControl = control;
  67:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  68:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  69:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  70:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get IPSR Register
  71:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  72:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  73:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  74:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               IPSR Register value
  75:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  76:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  77:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  78:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regIPSR);
  80:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  81:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  82:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  83:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get APSR Register
  84:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  85:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  87:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               APSR Register value
  88:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  89:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  90:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  91:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regAPSR);
  93:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  94:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  95:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  96:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
  97:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  98:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 100:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               xPSR Register value
 101:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 102:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 103:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 104:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regXPSR);
 106:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 107:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 108:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 109:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 111:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 113:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               PSP Register value
 114:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 115:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 116:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 117:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regProcessStackPointer);
 119:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 120:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 121:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 122:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 124:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 126:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 128:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 129:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 130:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 133:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 134:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 135:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 137:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 139:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               MSP Register value
 140:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 141:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 142:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 143:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regMainStackPointer);
 145:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 146:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 147:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 148:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 150:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 152:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 154:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 155:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 156:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 159:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 160:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 161:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Priority Mask
 162:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 163:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 165:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Priority Mask value
 166:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 167:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 168:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 169:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regPriMask);
 171:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 172:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 173:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 174:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Priority Mask
 175:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 176:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 178:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 180:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 181:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 182:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regPriMask = (priMask);
 184:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 185:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 186:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 187:.././hal/sam3u1c/inc/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 189:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Enable FIQ
 190:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 191:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:.././hal/sam3u1c/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 194:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 196:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 197:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Disable FIQ
 198:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 199:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:.././hal/sam3u1c/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 202:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 204:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 205:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Base Priority
 206:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 207:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 209:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Base Priority register value
 210:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 211:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 212:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 213:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regBasePri);
 215:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 216:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 217:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 218:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Base Priority
 219:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 220:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 222:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 224:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 225:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 226:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 229:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 230:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 231:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Fault Mask
 232:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 233:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 235:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Fault Mask register value
 236:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 237:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 238:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 239:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regFaultMask);
 241:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 242:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 243:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 244:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Fault Mask
 245:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 246:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 248:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 250:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 252:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 255:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 256:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 258:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 259:.././hal/sam3u1c/inc/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 261:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get FPSCR
 262:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 263:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 265:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 267:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 268:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 269:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regfpscr);
 272:.././hal/sam3u1c/inc/core_cmFunc.h **** #else
 273:.././hal/sam3u1c/inc/core_cmFunc.h ****    return(0);
 274:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
 275:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 276:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 277:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 278:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set FPSCR
 279:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 280:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 282:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 284:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 285:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 286:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regfpscr = (fpscr);
 289:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
 290:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 291:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 292:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 294:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 295:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:.././hal/sam3u1c/inc/core_cmFunc.h **** /* IAR iccarm specific functions */
 297:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 298:.././hal/sam3u1c/inc/core_cmFunc.h **** #include <cmsis_iar.h>
 299:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 300:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 301:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:.././hal/sam3u1c/inc/core_cmFunc.h **** /* TI CCS specific functions */
 303:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 304:.././hal/sam3u1c/inc/core_cmFunc.h **** #include <cmsis_ccs.h>
 305:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 306:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 307:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:.././hal/sam3u1c/inc/core_cmFunc.h **** /* GNU gcc specific functions */
 309:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 310:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 311:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 312:.././hal/sam3u1c/inc/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 313:.././hal/sam3u1c/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 314:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 315:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 316:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 317:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 318:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 319:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 320:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 321:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 322:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 323:.././hal/sam3u1c/inc/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 324:.././hal/sam3u1c/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 325:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 326:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 327:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 328:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 889              	 .loc 5 328 3
 890              	 .syntax unified
 891              	
 892 000a 72B6     	 cpsid i
 893              	
 329:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 894              	 .loc 5 329 1
 895              	 .thumb
 896              	 .syntax unified
 897 000c 00BF     	 nop
 898              	.LBE16:
 899              	.LBE15:
 900              	.LBB17:
 901              	.LBB18:
 902              	 .file 6 ".././hal/sam3u1c/inc/core_cmInstr.h"
   1:.././hal/sam3u1c/inc/core_cmInstr.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @date     07. February 2012
   6:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
   7:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  10:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  15:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  22:.././hal/sam3u1c/inc/core_cmInstr.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  24:.././hal/sam3u1c/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  27:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  28:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:.././hal/sam3u1c/inc/core_cmInstr.h ****   Access to dedicated instructions
  31:.././hal/sam3u1c/inc/core_cmInstr.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmInstr.h **** */
  33:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  34:.././hal/sam3u1c/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  37:.././hal/sam3u1c/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  41:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  42:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
  43:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  44:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  46:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __NOP                             __nop
  47:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  48:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  49:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  51:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
  53:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  54:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFI                             __wfi
  55:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  56:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  57:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
  58:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  59:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  62:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFE                             __wfe
  63:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  64:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  65:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
  66:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  67:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  69:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SEV                             __sev
  70:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  71:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  72:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  74:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  78:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  80:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  81:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  83:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  86:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  88:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  89:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  91:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  94:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  96:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  97:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  99:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 101:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 103:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 104:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __REV                             __rev
 105:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 106:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 107:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 109:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 111:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 113:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 114:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 116:.././hal/sam3u1c/inc/core_cmInstr.h ****   rev16 r0, r0
 117:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 118:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 119:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 120:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 121:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 123:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 125:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 127:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 128:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 130:.././hal/sam3u1c/inc/core_cmInstr.h ****   revsh r0, r0
 131:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 132:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 133:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 134:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 135:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 137:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 139:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Rotated value
 142:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 143:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ROR                             __ror
 144:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 145:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 146:.././hal/sam3u1c/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 148:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 150:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 152:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 154:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 155:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 156:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 157:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 158:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 160:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 162:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 165:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 167:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 168:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 170:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 172:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 175:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 177:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 178:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 180:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 182:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 185:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 187:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 188:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 190:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 192:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 193:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 195:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 196:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 197:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 199:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 200:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 202:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 204:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 205:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 207:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 208:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 209:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 211:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 212:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 214:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 216:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 217:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 219:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 220:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 221:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 223:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 224:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 226:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 228:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 229:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 230:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 231:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 232:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 233:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 234:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates a signed value.
 235:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 236:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 239:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 240:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 241:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 242:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 243:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 245:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 246:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 247:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 250:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 251:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __USAT                            __usat
 252:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 253:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 254:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 255:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 256:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 258:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 260:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 261:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLZ                             __clz
 262:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 263:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 265:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 266:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 267:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:.././hal/sam3u1c/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 270:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_iar.h>
 271:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 272:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 273:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:.././hal/sam3u1c/inc/core_cmInstr.h **** /* TI CCS specific functions */
 275:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 276:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 278:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 279:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:.././hal/sam3u1c/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 281:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 282:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
 283:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 284:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 286:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 288:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 289:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 290:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 291:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 292:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 294:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
 296:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 297:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 299:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 301:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 302:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 303:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
 304:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 305:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 308:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 310:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 312:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 313:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 314:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
 315:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 316:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 318:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 320:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("sev");
 321:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 322:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 323:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 324:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 326:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 330:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 332:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("isb");
 333:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 334:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 335:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 336:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 338:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 341:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 343:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 345:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 346:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 347:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 349:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 352:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 354:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("dmb");
 903              	 .loc 6 354 3
 904              	 .syntax unified
 905              	
 906 000e BFF35F8F 	 dmb
 907              	
 355:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 908              	 .loc 6 355 1
 909              	 .thumb
 910              	 .syntax unified
 911 0012 00BF     	 nop
 912              	.LBE18:
 913              	.LBE17:
 114:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	Assert(sleep_mode != SLEEPMGR_ACTIVE);
 115:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 116:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	cpu_irq_disable();
 914              	 .loc 4 116 2
 915 0014 054B     	 ldr r3,.L80
 916 0016 0022     	 movs r2,#0
 917 0018 1A70     	 strb r2,[r3]
 117:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
 118:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	// Atomically enable the global interrupts and enter the sleep mode.
 119:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	pmc_sleep(sleep_mode);
 918              	 .loc 4 119 2
 919 001a FB79     	 ldrb r3,[r7,#7]
 920 001c 1846     	 mov r0,r3
 921 001e 044B     	 ldr r3,.L80+4
 922 0020 9847     	 blx r3
 923              	.LVL27:
 120:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #else
 121:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	UNUSED(sleep_mode);
 122:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	cpu_irq_enable();
 123:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 124:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
 125:.././hal/sam3u1c/inc/sam/sleepmgr.h **** }
 924              	 .loc 4 125 1
 925 0022 00BF     	 nop
 926 0024 0837     	 adds r7,r7,#8
 927              	.LCFI49:
 928              	 .cfi_def_cfa_offset 8
 929 0026 BD46     	 mov sp,r7
 930              	.LCFI50:
 931              	 .cfi_def_cfa_register 13
 932              	 
 933 0028 80BD     	 pop {r7,pc}
 934              	.L81:
 935 002a 00BF     	 .align 2
 936              	.L80:
 937 002c 00000000 	 .word g_interrupt_enabled
 938 0030 00000000 	 .word pmc_sleep
 939              	 .cfi_endproc
 940              	.LFE165:
 942              	 .section .text.sleepmgr_init,"ax",%progbits
 943              	 .align 1
 944              	 .syntax unified
 945              	 .thumb
 946              	 .thumb_func
 947              	 .fpu softvfp
 949              	sleepmgr_init:
 950              	.LFB166:
 951              	 .file 7 ".././hal/sam3u1c/inc/sleepmgr.h"
   1:.././hal/sam3u1c/inc/sleepmgr.h **** /**
   2:.././hal/sam3u1c/inc/sleepmgr.h ****  * \file
   3:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   4:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Sleep manager
   5:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   6:.././hal/sam3u1c/inc/sleepmgr.h ****  * Copyright (c) 2010 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   8:.././hal/sam3u1c/inc/sleepmgr.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  10:.././hal/sam3u1c/inc/sleepmgr.h ****  * \page License
  11:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  12:.././hal/sam3u1c/inc/sleepmgr.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sleepmgr.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  15:.././hal/sam3u1c/inc/sleepmgr.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sleepmgr.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  18:.././hal/sam3u1c/inc/sleepmgr.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sleepmgr.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sleepmgr.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  22:.././hal/sam3u1c/inc/sleepmgr.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sleepmgr.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  25:.././hal/sam3u1c/inc/sleepmgr.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sleepmgr.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  28:.././hal/sam3u1c/inc/sleepmgr.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sleepmgr.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sleepmgr.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sleepmgr.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sleepmgr.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sleepmgr.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sleepmgr.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sleepmgr.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sleepmgr.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sleepmgr.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sleepmgr.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  40:.././hal/sam3u1c/inc/sleepmgr.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  42:.././hal/sam3u1c/inc/sleepmgr.h ****  */
  43:.././hal/sam3u1c/inc/sleepmgr.h **** #ifndef SLEEPMGR_H
  44:.././hal/sam3u1c/inc/sleepmgr.h **** #define SLEEPMGR_H
  45:.././hal/sam3u1c/inc/sleepmgr.h **** 
  46:.././hal/sam3u1c/inc/sleepmgr.h **** #include <compiler.h>
  47:.././hal/sam3u1c/inc/sleepmgr.h **** #include <parts.h>
  48:.././hal/sam3u1c/inc/sleepmgr.h **** 
  49:.././hal/sam3u1c/inc/sleepmgr.h **** #if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM
  50:.././hal/sam3u1c/inc/sleepmgr.h **** # include "sam/sleepmgr.h"
  51:.././hal/sam3u1c/inc/sleepmgr.h **** #elif XMEGA
  52:.././hal/sam3u1c/inc/sleepmgr.h **** # include "xmega/sleepmgr.h"
  53:.././hal/sam3u1c/inc/sleepmgr.h **** #elif UC3
  54:.././hal/sam3u1c/inc/sleepmgr.h **** # include "uc3/sleepmgr.h"
  55:.././hal/sam3u1c/inc/sleepmgr.h **** #elif SAM4L
  56:.././hal/sam3u1c/inc/sleepmgr.h **** # include "sam4l/sleepmgr.h"
  57:.././hal/sam3u1c/inc/sleepmgr.h **** #elif MEGA
  58:.././hal/sam3u1c/inc/sleepmgr.h **** # include "mega/sleepmgr.h"
  59:.././hal/sam3u1c/inc/sleepmgr.h **** #elif (SAMD20 || SAMD21 || SAMR21 || SAMD11)
  60:.././hal/sam3u1c/inc/sleepmgr.h **** # include "samd/sleepmgr.h"
  61:.././hal/sam3u1c/inc/sleepmgr.h **** #else
  62:.././hal/sam3u1c/inc/sleepmgr.h **** # error Unsupported device.
  63:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
  64:.././hal/sam3u1c/inc/sleepmgr.h **** 
  65:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef __cplusplus
  66:.././hal/sam3u1c/inc/sleepmgr.h **** extern "C" {
  67:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
  68:.././hal/sam3u1c/inc/sleepmgr.h **** 
  69:.././hal/sam3u1c/inc/sleepmgr.h **** /**
  70:.././hal/sam3u1c/inc/sleepmgr.h ****  * \defgroup sleepmgr_group Sleep manager
  71:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  72:.././hal/sam3u1c/inc/sleepmgr.h ****  * The sleep manager is a service for ensuring that the device is not put to
  73:.././hal/sam3u1c/inc/sleepmgr.h ****  * sleep in deeper sleep modes than the system (e.g., peripheral drivers,
  74:.././hal/sam3u1c/inc/sleepmgr.h ****  * services or the application) allows at any given time.
  75:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  76:.././hal/sam3u1c/inc/sleepmgr.h ****  * It is based on the use of lock counting for the individual sleep modes, and
  77:.././hal/sam3u1c/inc/sleepmgr.h ****  * will put the device to sleep in the shallowest sleep mode that has a non-zero
  78:.././hal/sam3u1c/inc/sleepmgr.h ****  * lock count. The drivers/services/application can change these counts by use
  79:.././hal/sam3u1c/inc/sleepmgr.h ****  * of \ref sleepmgr_lock_mode and \ref sleepmgr_unlock_mode.
  80:.././hal/sam3u1c/inc/sleepmgr.h ****  * Refer to \ref sleepmgr_mode for a list of the sleep modes available for
  81:.././hal/sam3u1c/inc/sleepmgr.h ****  * locking, and the device datasheet for information on their effect.
  82:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  83:.././hal/sam3u1c/inc/sleepmgr.h ****  * The application must supply the file \ref conf_sleepmgr.h.
  84:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  85:.././hal/sam3u1c/inc/sleepmgr.h ****  * For the sleep manager to be enabled, the symbol \ref CONFIG_SLEEPMGR_ENABLE
  86:.././hal/sam3u1c/inc/sleepmgr.h ****  * must be defined, e.g., in \ref conf_sleepmgr.h. If this symbol is not
  87:.././hal/sam3u1c/inc/sleepmgr.h ****  * defined, the functions are replaced with dummy functions and no RAM is used.
  88:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  89:.././hal/sam3u1c/inc/sleepmgr.h ****  * @{
  90:.././hal/sam3u1c/inc/sleepmgr.h ****  */
  91:.././hal/sam3u1c/inc/sleepmgr.h **** 
  92:.././hal/sam3u1c/inc/sleepmgr.h **** /**
  93:.././hal/sam3u1c/inc/sleepmgr.h ****  * \def CONFIG_SLEEPMGR_ENABLE
  94:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Configuration symbol for enabling the sleep manager
  95:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  96:.././hal/sam3u1c/inc/sleepmgr.h ****  * If this symbol is not defined, the functions of this service are replaced
  97:.././hal/sam3u1c/inc/sleepmgr.h ****  * with dummy functions. This is useful for reducing code size and execution
  98:.././hal/sam3u1c/inc/sleepmgr.h ****  * time if the sleep manager is not needed in the application.
  99:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 100:.././hal/sam3u1c/inc/sleepmgr.h ****  * This symbol may be defined in \ref conf_sleepmgr.h.
 101:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 102:.././hal/sam3u1c/inc/sleepmgr.h **** #if defined(__DOXYGEN__) && !defined(CONFIG_SLEEPMGR_ENABLE)
 103:.././hal/sam3u1c/inc/sleepmgr.h **** #  define CONFIG_SLEEPMGR_ENABLE
 104:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
 105:.././hal/sam3u1c/inc/sleepmgr.h **** 
 106:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 107:.././hal/sam3u1c/inc/sleepmgr.h ****  * \enum sleepmgr_mode
 108:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Sleep mode locks
 109:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 110:.././hal/sam3u1c/inc/sleepmgr.h ****  * Identifiers for the different sleep mode locks.
 111:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 112:.././hal/sam3u1c/inc/sleepmgr.h **** 
 113:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 114:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Initialize the lock counts
 115:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 116:.././hal/sam3u1c/inc/sleepmgr.h ****  * Sets all lock counts to 0, except the very last one, which is set to 1. This
 117:.././hal/sam3u1c/inc/sleepmgr.h ****  * is done to simplify the algorithm for finding the deepest allowable sleep
 118:.././hal/sam3u1c/inc/sleepmgr.h ****  * mode in \ref sleepmgr_enter_sleep.
 119:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 120:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_init(void)
 121:.././hal/sam3u1c/inc/sleepmgr.h **** {
 952              	 .loc 7 121 1
 953              	 .cfi_startproc
 954              	 
 955              	 
 956              	 
 957 0000 80B4     	 push {r7}
 958              	.LCFI51:
 959              	 .cfi_def_cfa_offset 4
 960              	 .cfi_offset 7,-4
 961 0002 83B0     	 sub sp,sp,#12
 962              	.LCFI52:
 963              	 .cfi_def_cfa_offset 16
 964 0004 00AF     	 add r7,sp,#0
 965              	.LCFI53:
 966              	 .cfi_def_cfa_register 7
 122:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 123:.././hal/sam3u1c/inc/sleepmgr.h **** 	uint8_t i;
 124:.././hal/sam3u1c/inc/sleepmgr.h **** 
 125:.././hal/sam3u1c/inc/sleepmgr.h **** 	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
 967              	 .loc 7 125 9
 968 0006 0023     	 movs r3,#0
 969 0008 FB71     	 strb r3,[r7,#7]
 970              	 .loc 7 125 2
 971 000a 06E0     	 b .L83
 972              	.L84:
 126:.././hal/sam3u1c/inc/sleepmgr.h **** 		sleepmgr_locks[i] = 0;
 973              	 .loc 7 126 17 discriminator 3
 974 000c FB79     	 ldrb r3,[r7,#7]
 975              	 .loc 7 126 21 discriminator 3
 976 000e 084A     	 ldr r2,.L85
 977 0010 0021     	 movs r1,#0
 978 0012 D154     	 strb r1,[r2,r3]
 125:.././hal/sam3u1c/inc/sleepmgr.h **** 		sleepmgr_locks[i] = 0;
 979              	 .loc 7 125 45 discriminator 3
 980 0014 FB79     	 ldrb r3,[r7,#7]
 981 0016 0133     	 adds r3,r3,#1
 982 0018 FB71     	 strb r3,[r7,#7]
 983              	.L83:
 125:.././hal/sam3u1c/inc/sleepmgr.h **** 		sleepmgr_locks[i] = 0;
 984              	 .loc 7 125 2 discriminator 1
 985 001a FB79     	 ldrb r3,[r7,#7]
 986 001c 042B     	 cmp r3,#4
 987 001e F5D9     	 bls .L84
 127:.././hal/sam3u1c/inc/sleepmgr.h **** 	}
 128:.././hal/sam3u1c/inc/sleepmgr.h **** 	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
 988              	 .loc 7 128 43
 989 0020 034B     	 ldr r3,.L85
 990 0022 0122     	 movs r2,#1
 991 0024 5A71     	 strb r2,[r3,#5]
 129:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 130:.././hal/sam3u1c/inc/sleepmgr.h **** }
 992              	 .loc 7 130 1
 993 0026 00BF     	 nop
 994 0028 0C37     	 adds r7,r7,#12
 995              	.LCFI54:
 996              	 .cfi_def_cfa_offset 4
 997 002a BD46     	 mov sp,r7
 998              	.LCFI55:
 999              	 .cfi_def_cfa_register 13
 1000              	 
 1001 002c 80BC     	 pop {r7}
 1002              	.LCFI56:
 1003              	 .cfi_restore 7
 1004              	 .cfi_def_cfa_offset 0
 1005 002e 7047     	 bx lr
 1006              	.L86:
 1007              	 .align 2
 1008              	.L85:
 1009 0030 00000000 	 .word sleepmgr_locks
 1010              	 .cfi_endproc
 1011              	.LFE166:
 1013              	 .section .text.sleepmgr_get_sleep_mode,"ax",%progbits
 1014              	 .align 1
 1015              	 .syntax unified
 1016              	 .thumb
 1017              	 .thumb_func
 1018              	 .fpu softvfp
 1020              	sleepmgr_get_sleep_mode:
 1021              	.LFB169:
 131:.././hal/sam3u1c/inc/sleepmgr.h **** 
 132:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 133:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Increase lock count for a sleep mode
 134:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 135:.././hal/sam3u1c/inc/sleepmgr.h ****  * Increases the lock count for \a mode to ensure that the sleep manager does
 136:.././hal/sam3u1c/inc/sleepmgr.h ****  * not put the device to sleep in the deeper sleep modes.
 137:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 138:.././hal/sam3u1c/inc/sleepmgr.h ****  * \param mode Sleep mode to lock.
 139:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 140:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
 141:.././hal/sam3u1c/inc/sleepmgr.h **** {
 142:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 143:.././hal/sam3u1c/inc/sleepmgr.h **** 	irqflags_t flags;
 144:.././hal/sam3u1c/inc/sleepmgr.h **** 
 145:.././hal/sam3u1c/inc/sleepmgr.h **** 	Assert(sleepmgr_locks[mode] < 0xff);
 146:.././hal/sam3u1c/inc/sleepmgr.h **** 
 147:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Enter a critical section
 148:.././hal/sam3u1c/inc/sleepmgr.h **** 	flags = cpu_irq_save();
 149:.././hal/sam3u1c/inc/sleepmgr.h **** 
 150:.././hal/sam3u1c/inc/sleepmgr.h **** 	++sleepmgr_locks[mode];
 151:.././hal/sam3u1c/inc/sleepmgr.h **** 
 152:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Leave the critical section
 153:.././hal/sam3u1c/inc/sleepmgr.h **** 	cpu_irq_restore(flags);
 154:.././hal/sam3u1c/inc/sleepmgr.h **** #else
 155:.././hal/sam3u1c/inc/sleepmgr.h **** 	UNUSED(mode);
 156:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 157:.././hal/sam3u1c/inc/sleepmgr.h **** }
 158:.././hal/sam3u1c/inc/sleepmgr.h **** 
 159:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 160:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Decrease lock count for a sleep mode
 161:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 162:.././hal/sam3u1c/inc/sleepmgr.h ****  * Decreases the lock count for \a mode. If the lock count reaches 0, the sleep
 163:.././hal/sam3u1c/inc/sleepmgr.h ****  * manager can put the device to sleep in the deeper sleep modes.
 164:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 165:.././hal/sam3u1c/inc/sleepmgr.h ****  * \param mode Sleep mode to unlock.
 166:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 167:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
 168:.././hal/sam3u1c/inc/sleepmgr.h **** {
 169:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 170:.././hal/sam3u1c/inc/sleepmgr.h **** 	irqflags_t flags;
 171:.././hal/sam3u1c/inc/sleepmgr.h **** 
 172:.././hal/sam3u1c/inc/sleepmgr.h **** 	Assert(sleepmgr_locks[mode]);
 173:.././hal/sam3u1c/inc/sleepmgr.h **** 
 174:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Enter a critical section
 175:.././hal/sam3u1c/inc/sleepmgr.h **** 	flags = cpu_irq_save();
 176:.././hal/sam3u1c/inc/sleepmgr.h **** 
 177:.././hal/sam3u1c/inc/sleepmgr.h **** 	--sleepmgr_locks[mode];
 178:.././hal/sam3u1c/inc/sleepmgr.h **** 
 179:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Leave the critical section
 180:.././hal/sam3u1c/inc/sleepmgr.h **** 	cpu_irq_restore(flags);
 181:.././hal/sam3u1c/inc/sleepmgr.h **** #else
 182:.././hal/sam3u1c/inc/sleepmgr.h **** 	UNUSED(mode);
 183:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 184:.././hal/sam3u1c/inc/sleepmgr.h **** }
 185:.././hal/sam3u1c/inc/sleepmgr.h **** 
 186:.././hal/sam3u1c/inc/sleepmgr.h ****  /**
 187:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Retrieves the deepest allowable sleep mode
 188:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 189:.././hal/sam3u1c/inc/sleepmgr.h ****  * Searches through the sleep mode lock counts, starting at the shallowest sleep
 190:.././hal/sam3u1c/inc/sleepmgr.h ****  * mode, until the first non-zero lock count is found. The deepest allowable
 191:.././hal/sam3u1c/inc/sleepmgr.h ****  * sleep mode is then returned.
 192:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 193:.././hal/sam3u1c/inc/sleepmgr.h **** static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
 194:.././hal/sam3u1c/inc/sleepmgr.h **** {
 1022              	 .loc 7 194 1
 1023              	 .cfi_startproc
 1024              	 
 1025              	 
 1026              	 
 1027 0000 80B4     	 push {r7}
 1028              	.LCFI57:
 1029              	 .cfi_def_cfa_offset 4
 1030              	 .cfi_offset 7,-4
 1031 0002 83B0     	 sub sp,sp,#12
 1032              	.LCFI58:
 1033              	 .cfi_def_cfa_offset 16
 1034 0004 00AF     	 add r7,sp,#0
 1035              	.LCFI59:
 1036              	 .cfi_def_cfa_register 7
 195:.././hal/sam3u1c/inc/sleepmgr.h **** 	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
 1037              	 .loc 7 195 21
 1038 0006 0023     	 movs r3,#0
 1039 0008 FB71     	 strb r3,[r7,#7]
 196:.././hal/sam3u1c/inc/sleepmgr.h **** 
 197:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 198:.././hal/sam3u1c/inc/sleepmgr.h **** 	uint8_t *lock_ptr = sleepmgr_locks;
 1040              	 .loc 7 198 11
 1041 000a 094B     	 ldr r3,.L91
 1042 000c 3B60     	 str r3,[r7]
 199:.././hal/sam3u1c/inc/sleepmgr.h **** 
 200:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Find first non-zero lock count, starting with the shallowest modes.
 201:.././hal/sam3u1c/inc/sleepmgr.h **** 	while (!(*lock_ptr)) {
 1043              	 .loc 7 201 8
 1044 000e 05E0     	 b .L88
 1045              	.L89:
 202:.././hal/sam3u1c/inc/sleepmgr.h **** 		lock_ptr++;
 1046              	 .loc 7 202 11
 1047 0010 3B68     	 ldr r3,[r7]
 1048 0012 0133     	 adds r3,r3,#1
 1049 0014 3B60     	 str r3,[r7]
 203:.././hal/sam3u1c/inc/sleepmgr.h **** 		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
 1050              	 .loc 7 203 14
 1051 0016 FB79     	 ldrb r3,[r7,#7]
 1052 0018 0133     	 adds r3,r3,#1
 1053 001a FB71     	 strb r3,[r7,#7]
 1054              	.L88:
 201:.././hal/sam3u1c/inc/sleepmgr.h **** 		lock_ptr++;
 1055              	 .loc 7 201 11
 1056 001c 3B68     	 ldr r3,[r7]
 1057 001e 1B78     	 ldrb r3,[r3]
 201:.././hal/sam3u1c/inc/sleepmgr.h **** 		lock_ptr++;
 1058              	 .loc 7 201 8
 1059 0020 002B     	 cmp r3,#0
 1060 0022 F5D0     	 beq .L89
 204:.././hal/sam3u1c/inc/sleepmgr.h **** 	}
 205:.././hal/sam3u1c/inc/sleepmgr.h **** 
 206:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Catch the case where one too many sleepmgr_unlock_mode() call has been
 207:.././hal/sam3u1c/inc/sleepmgr.h **** 	// performed on the deepest sleep mode.
 208:.././hal/sam3u1c/inc/sleepmgr.h **** 	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);
 209:.././hal/sam3u1c/inc/sleepmgr.h **** 
 210:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 211:.././hal/sam3u1c/inc/sleepmgr.h **** 
 212:.././hal/sam3u1c/inc/sleepmgr.h **** 	return sleep_mode;
 1061              	 .loc 7 212 9
 1062 0024 FB79     	 ldrb r3,[r7,#7]
 213:.././hal/sam3u1c/inc/sleepmgr.h **** }
 1063              	 .loc 7 213 1
 1064 0026 1846     	 mov r0,r3
 1065 0028 0C37     	 adds r7,r7,#12
 1066              	.LCFI60:
 1067              	 .cfi_def_cfa_offset 4
 1068 002a BD46     	 mov sp,r7
 1069              	.LCFI61:
 1070              	 .cfi_def_cfa_register 13
 1071              	 
 1072 002c 80BC     	 pop {r7}
 1073              	.LCFI62:
 1074              	 .cfi_restore 7
 1075              	 .cfi_def_cfa_offset 0
 1076 002e 7047     	 bx lr
 1077              	.L92:
 1078              	 .align 2
 1079              	.L91:
 1080 0030 00000000 	 .word sleepmgr_locks
 1081              	 .cfi_endproc
 1082              	.LFE169:
 1084              	 .section .text.sleepmgr_enter_sleep,"ax",%progbits
 1085              	 .align 1
 1086              	 .syntax unified
 1087              	 .thumb
 1088              	 .thumb_func
 1089              	 .fpu softvfp
 1091              	sleepmgr_enter_sleep:
 1092              	.LFB170:
 214:.././hal/sam3u1c/inc/sleepmgr.h **** 
 215:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 216:.././hal/sam3u1c/inc/sleepmgr.h ****  * \fn sleepmgr_enter_sleep
 217:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Go to sleep in the deepest allowed mode
 218:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 219:.././hal/sam3u1c/inc/sleepmgr.h ****  * Searches through the sleep mode lock counts, starting at the shallowest sleep
 220:.././hal/sam3u1c/inc/sleepmgr.h ****  * mode, until the first non-zero lock count is found. The device is then put to
 221:.././hal/sam3u1c/inc/sleepmgr.h ****  * sleep in the sleep mode that corresponds to the lock.
 222:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 223:.././hal/sam3u1c/inc/sleepmgr.h ****  * \note This function enables interrupts before going to sleep, and will leave
 224:.././hal/sam3u1c/inc/sleepmgr.h ****  * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 225:.././hal/sam3u1c/inc/sleepmgr.h ****  * mode being locked.
 226:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 227:.././hal/sam3u1c/inc/sleepmgr.h **** 
 228:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_enter_sleep(void)
 229:.././hal/sam3u1c/inc/sleepmgr.h **** {
 1093              	 .loc 7 229 1
 1094              	 .cfi_startproc
 1095              	 
 1096              	 
 1097 0000 80B5     	 push {r7,lr}
 1098              	.LCFI63:
 1099              	 .cfi_def_cfa_offset 8
 1100              	 .cfi_offset 7,-8
 1101              	 .cfi_offset 14,-4
 1102 0002 82B0     	 sub sp,sp,#8
 1103              	.LCFI64:
 1104              	 .cfi_def_cfa_offset 16
 1105 0004 00AF     	 add r7,sp,#0
 1106              	.LCFI65:
 1107              	 .cfi_def_cfa_register 7
 230:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 231:.././hal/sam3u1c/inc/sleepmgr.h **** 	enum sleepmgr_mode sleep_mode;
 232:.././hal/sam3u1c/inc/sleepmgr.h **** 
 233:.././hal/sam3u1c/inc/sleepmgr.h **** 	//cpu_irq_disable();
 234:.././hal/sam3u1c/inc/sleepmgr.h **** 
 235:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Find the deepest allowable sleep mode
 236:.././hal/sam3u1c/inc/sleepmgr.h **** 	sleep_mode = sleepmgr_get_sleep_mode();
 1108              	 .loc 7 236 15
 1109 0006 0B4B     	 ldr r3,.L96
 1110 0008 9847     	 blx r3
 1111              	.LVL28:
 1112 000a 0346     	 mov r3,r0
 1113 000c FB71     	 strb r3,[r7,#7]
 237:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Return right away if first mode (ACTIVE) is locked.
 238:.././hal/sam3u1c/inc/sleepmgr.h **** 	if (sleep_mode==SLEEPMGR_ACTIVE) {
 1114              	 .loc 7 238 5
 1115 000e FB79     	 ldrb r3,[r7,#7]
 1116 0010 002B     	 cmp r3,#0
 1117 0012 08D1     	 bne .L94
 239:.././hal/sam3u1c/inc/sleepmgr.h **** 		cpu_irq_enable();
 1118              	 .loc 7 239 3
 1119 0014 084B     	 ldr r3,.L96+4
 1120 0016 0122     	 movs r2,#1
 1121 0018 1A70     	 strb r2,[r3]
 1122              	.LBB19:
 1123              	.LBB20:
 354:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 1124              	 .loc 6 354 3
 1125              	 .syntax unified
 1126              	
 1127 001a BFF35F8F 	 dmb
 1128              	
 1129              	 .loc 6 355 1
 1130              	 .thumb
 1131              	 .syntax unified
 1132 001e 00BF     	 nop
 1133              	.LBE20:
 1134              	.LBE19:
 1135              	.LBB21:
 1136              	.LBB22:
 317:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 1137              	 .loc 5 317 3
 1138              	 .syntax unified
 1139              	
 1140 0020 62B6     	 cpsie i
 1141              	
 318:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 1142              	 .loc 5 318 1
 1143              	 .thumb
 1144              	 .syntax unified
 1145 0022 00BF     	 nop
 1146              	.LBE22:
 1147              	.LBE21:
 240:.././hal/sam3u1c/inc/sleepmgr.h **** 		return;
 1148              	 .loc 7 240 3
 1149 0024 03E0     	 b .L93
 1150              	.L94:
 241:.././hal/sam3u1c/inc/sleepmgr.h **** 	}
 242:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Enter the deepest allowable sleep mode with interrupts enabled
 243:.././hal/sam3u1c/inc/sleepmgr.h **** 	sleepmgr_sleep(sleep_mode);
 1151              	 .loc 7 243 2
 1152 0026 FB79     	 ldrb r3,[r7,#7]
 1153 0028 1846     	 mov r0,r3
 1154 002a 044B     	 ldr r3,.L96+8
 1155 002c 9847     	 blx r3
 1156              	.LVL29:
 1157              	.L93:
 244:.././hal/sam3u1c/inc/sleepmgr.h **** #else
 245:.././hal/sam3u1c/inc/sleepmgr.h **** 	cpu_irq_enable();
 246:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 247:.././hal/sam3u1c/inc/sleepmgr.h **** }
 1158              	 .loc 7 247 1
 1159 002e 0837     	 adds r7,r7,#8
 1160              	.LCFI66:
 1161              	 .cfi_def_cfa_offset 8
 1162 0030 BD46     	 mov sp,r7
 1163              	.LCFI67:
 1164              	 .cfi_def_cfa_register 13
 1165              	 
 1166 0032 80BD     	 pop {r7,pc}
 1167              	.L97:
 1168              	 .align 2
 1169              	.L96:
 1170 0034 00000000 	 .word sleepmgr_get_sleep_mode
 1171 0038 00000000 	 .word g_interrupt_enabled
 1172 003c 00000000 	 .word sleepmgr_sleep
 1173              	 .cfi_endproc
 1174              	.LFE170:
 1176              	 .section .text.genclk_config_defaults,"ax",%progbits
 1177              	 .align 1
 1178              	 .syntax unified
 1179              	 .thumb
 1180              	 .thumb_func
 1181              	 .fpu softvfp
 1183              	genclk_config_defaults:
 1184              	.LFB182:
 1185              	 .file 8 ".././hal/sam3u1c/inc/genclk.h"
   1:.././hal/sam3u1c/inc/genclk.h **** /**
   2:.././hal/sam3u1c/inc/genclk.h ****  * \file
   3:.././hal/sam3u1c/inc/genclk.h ****  *
   4:.././hal/sam3u1c/inc/genclk.h ****  * \brief Chip-specific generic clock management.
   5:.././hal/sam3u1c/inc/genclk.h ****  *
   6:.././hal/sam3u1c/inc/genclk.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/genclk.h ****  *
   8:.././hal/sam3u1c/inc/genclk.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/genclk.h ****  *
  10:.././hal/sam3u1c/inc/genclk.h ****  * \page License
  11:.././hal/sam3u1c/inc/genclk.h ****  *
  12:.././hal/sam3u1c/inc/genclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/genclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/genclk.h ****  *
  15:.././hal/sam3u1c/inc/genclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/genclk.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/genclk.h ****  *
  18:.././hal/sam3u1c/inc/genclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/genclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/genclk.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/genclk.h ****  *
  22:.././hal/sam3u1c/inc/genclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/genclk.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/genclk.h ****  *
  25:.././hal/sam3u1c/inc/genclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/genclk.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/genclk.h ****  *
  28:.././hal/sam3u1c/inc/genclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/genclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/genclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/genclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/genclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/genclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/genclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/genclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/genclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/genclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/genclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/genclk.h ****  *
  40:.././hal/sam3u1c/inc/genclk.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/genclk.h ****  *
  42:.././hal/sam3u1c/inc/genclk.h ****  */
  43:.././hal/sam3u1c/inc/genclk.h **** 
  44:.././hal/sam3u1c/inc/genclk.h **** #ifndef CHIP_GENCLK_H_INCLUDED
  45:.././hal/sam3u1c/inc/genclk.h **** #define CHIP_GENCLK_H_INCLUDED
  46:.././hal/sam3u1c/inc/genclk.h **** 
  47:.././hal/sam3u1c/inc/genclk.h **** #include <osc.h>
  48:.././hal/sam3u1c/inc/genclk.h **** #include <pll.h>
  49:.././hal/sam3u1c/inc/genclk.h **** 
  50:.././hal/sam3u1c/inc/genclk.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/genclk.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/genclk.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/genclk.h **** extern "C" {
  54:.././hal/sam3u1c/inc/genclk.h **** #endif
  55:.././hal/sam3u1c/inc/genclk.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/genclk.h **** /// @endcond
  57:.././hal/sam3u1c/inc/genclk.h **** 
  58:.././hal/sam3u1c/inc/genclk.h **** /**
  59:.././hal/sam3u1c/inc/genclk.h ****  * \weakgroup genclk_group
  60:.././hal/sam3u1c/inc/genclk.h ****  * @{
  61:.././hal/sam3u1c/inc/genclk.h ****  */
  62:.././hal/sam3u1c/inc/genclk.h **** 
  63:.././hal/sam3u1c/inc/genclk.h **** //! \name Programmable Clock Identifiers (PCK)
  64:.././hal/sam3u1c/inc/genclk.h **** //@{
  65:.././hal/sam3u1c/inc/genclk.h **** #define GENCLK_PCK_0      0 //!< PCK0 ID
  66:.././hal/sam3u1c/inc/genclk.h **** #define GENCLK_PCK_1      1 //!< PCK1 ID
  67:.././hal/sam3u1c/inc/genclk.h **** #define GENCLK_PCK_2      2 //!< PCK2 ID
  68:.././hal/sam3u1c/inc/genclk.h **** //@}
  69:.././hal/sam3u1c/inc/genclk.h **** 
  70:.././hal/sam3u1c/inc/genclk.h **** //! \name Programmable Clock Sources (PCK)
  71:.././hal/sam3u1c/inc/genclk.h **** //@{
  72:.././hal/sam3u1c/inc/genclk.h **** 
  73:.././hal/sam3u1c/inc/genclk.h **** enum genclk_source {
  74:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_SLCK_RC       = 0, //!< Internal 32kHz RC oscillator as PCK source clock
  75:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_SLCK_XTAL     = 1, //!< External 32kHz crystal oscillator as PCK source clock
  76:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_SLCK_BYPASS   = 2, //!< External 32kHz bypass oscillator as PCK source clock
  77:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_MAINCK_4M_RC  = 3, //!< Internal 4MHz RC oscillator as PCK source clock
  78:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_MAINCK_8M_RC  = 4, //!< Internal 8MHz RC oscillator as PCK source clock
  79:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_MAINCK_12M_RC = 5, //!< Internal 12MHz RC oscillator as PCK source clock
  80:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_MAINCK_XTAL   = 6, //!< External crystal oscillator as PCK source clock
  81:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_MAINCK_BYPASS = 7, //!< External bypass oscillator as PCK source clock
  82:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_PLLACK        = 8, //!< Use PLLACK as PCK source clock
  83:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_PLLBCK        = 9, //!< Use PLLBCK as PCK source clock
  84:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_MCK           = 10, //!< Use Master Clk as PCK source clock
  85:.././hal/sam3u1c/inc/genclk.h **** };
  86:.././hal/sam3u1c/inc/genclk.h **** 
  87:.././hal/sam3u1c/inc/genclk.h **** //@}
  88:.././hal/sam3u1c/inc/genclk.h **** 
  89:.././hal/sam3u1c/inc/genclk.h **** //! \name Programmable Clock Prescalers (PCK)
  90:.././hal/sam3u1c/inc/genclk.h **** //@{
  91:.././hal/sam3u1c/inc/genclk.h **** 
  92:.././hal/sam3u1c/inc/genclk.h **** enum genclk_divider {
  93:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_1  = PMC_PCK_PRES_CLK_1, //!< Set PCK clock prescaler to 1
  94:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_2  = PMC_PCK_PRES_CLK_2, //!< Set PCK clock prescaler to 2
  95:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_4  = PMC_PCK_PRES_CLK_4, //!< Set PCK clock prescaler to 4
  96:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_8  = PMC_PCK_PRES_CLK_8, //!< Set PCK clock prescaler to 8
  97:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_16 = PMC_PCK_PRES_CLK_16, //!< Set PCK clock prescaler to 16
  98:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_32 = PMC_PCK_PRES_CLK_32, //!< Set PCK clock prescaler to 32
  99:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_64 = PMC_PCK_PRES_CLK_64, //!< Set PCK clock prescaler to 64
 100:.././hal/sam3u1c/inc/genclk.h **** };
 101:.././hal/sam3u1c/inc/genclk.h **** 
 102:.././hal/sam3u1c/inc/genclk.h **** //@}
 103:.././hal/sam3u1c/inc/genclk.h **** 
 104:.././hal/sam3u1c/inc/genclk.h **** struct genclk_config {
 105:.././hal/sam3u1c/inc/genclk.h **** 	uint32_t ctrl;
 106:.././hal/sam3u1c/inc/genclk.h **** };
 107:.././hal/sam3u1c/inc/genclk.h **** 
 108:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_config_defaults(struct genclk_config *p_cfg,
 109:.././hal/sam3u1c/inc/genclk.h **** 		uint32_t ul_id)
 110:.././hal/sam3u1c/inc/genclk.h **** {
 1186              	 .loc 8 110 1
 1187              	 .cfi_startproc
 1188              	 
 1189              	 
 1190              	 
 1191 0000 80B4     	 push {r7}
 1192              	.LCFI68:
 1193              	 .cfi_def_cfa_offset 4
 1194              	 .cfi_offset 7,-4
 1195 0002 83B0     	 sub sp,sp,#12
 1196              	.LCFI69:
 1197              	 .cfi_def_cfa_offset 16
 1198 0004 00AF     	 add r7,sp,#0
 1199              	.LCFI70:
 1200              	 .cfi_def_cfa_register 7
 1201 0006 7860     	 str r0,[r7,#4]
 1202 0008 3960     	 str r1,[r7]
 111:.././hal/sam3u1c/inc/genclk.h **** 	ul_id = ul_id;
 112:.././hal/sam3u1c/inc/genclk.h **** 	p_cfg->ctrl = 0;
 1203              	 .loc 8 112 14
 1204 000a 7B68     	 ldr r3,[r7,#4]
 1205 000c 0022     	 movs r2,#0
 1206 000e 1A60     	 str r2,[r3]
 113:.././hal/sam3u1c/inc/genclk.h **** }
 1207              	 .loc 8 113 1
 1208 0010 00BF     	 nop
 1209 0012 0C37     	 adds r7,r7,#12
 1210              	.LCFI71:
 1211              	 .cfi_def_cfa_offset 4
 1212 0014 BD46     	 mov sp,r7
 1213              	.LCFI72:
 1214              	 .cfi_def_cfa_register 13
 1215              	 
 1216 0016 80BC     	 pop {r7}
 1217              	.LCFI73:
 1218              	 .cfi_restore 7
 1219              	 .cfi_def_cfa_offset 0
 1220 0018 7047     	 bx lr
 1221              	 .cfi_endproc
 1222              	.LFE182:
 1224              	 .section .text.genclk_config_set_source,"ax",%progbits
 1225              	 .align 1
 1226              	 .syntax unified
 1227              	 .thumb
 1228              	 .thumb_func
 1229              	 .fpu softvfp
 1231              	genclk_config_set_source:
 1232              	.LFB185:
 114:.././hal/sam3u1c/inc/genclk.h **** 
 115:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_config_read(struct genclk_config *p_cfg,
 116:.././hal/sam3u1c/inc/genclk.h **** 		uint32_t ul_id)
 117:.././hal/sam3u1c/inc/genclk.h **** {
 118:.././hal/sam3u1c/inc/genclk.h **** 	p_cfg->ctrl = PMC->PMC_PCK[ul_id];
 119:.././hal/sam3u1c/inc/genclk.h **** }
 120:.././hal/sam3u1c/inc/genclk.h **** 
 121:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_config_write(const struct genclk_config *p_cfg,
 122:.././hal/sam3u1c/inc/genclk.h **** 		uint32_t ul_id)
 123:.././hal/sam3u1c/inc/genclk.h **** {
 124:.././hal/sam3u1c/inc/genclk.h **** 	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
 125:.././hal/sam3u1c/inc/genclk.h **** }
 126:.././hal/sam3u1c/inc/genclk.h **** 
 127:.././hal/sam3u1c/inc/genclk.h **** //! \name Programmable Clock Source and Prescaler configuration
 128:.././hal/sam3u1c/inc/genclk.h **** //@{
 129:.././hal/sam3u1c/inc/genclk.h **** 
 130:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_config_set_source(struct genclk_config *p_cfg,
 131:.././hal/sam3u1c/inc/genclk.h **** 		enum genclk_source e_src)
 132:.././hal/sam3u1c/inc/genclk.h **** {
 1233              	 .loc 8 132 1
 1234              	 .cfi_startproc
 1235              	 
 1236              	 
 1237              	 
 1238 0000 80B4     	 push {r7}
 1239              	.LCFI74:
 1240              	 .cfi_def_cfa_offset 4
 1241              	 .cfi_offset 7,-4
 1242 0002 83B0     	 sub sp,sp,#12
 1243              	.LCFI75:
 1244              	 .cfi_def_cfa_offset 16
 1245 0004 00AF     	 add r7,sp,#0
 1246              	.LCFI76:
 1247              	 .cfi_def_cfa_register 7
 1248 0006 7860     	 str r0,[r7,#4]
 1249 0008 0B46     	 mov r3,r1
 1250 000a FB70     	 strb r3,[r7,#3]
 133:.././hal/sam3u1c/inc/genclk.h **** 	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
 1251              	 .loc 8 133 14
 1252 000c 7B68     	 ldr r3,[r7,#4]
 1253 000e 1B68     	 ldr r3,[r3]
 1254 0010 23F00702 	 bic r2,r3,#7
 1255 0014 7B68     	 ldr r3,[r7,#4]
 1256 0016 1A60     	 str r2,[r3]
 134:.././hal/sam3u1c/inc/genclk.h **** 
 135:.././hal/sam3u1c/inc/genclk.h **** 	switch (e_src) {
 1257              	 .loc 8 135 2
 1258 0018 FB78     	 ldrb r3,[r7,#3]
 1259 001a 0A2B     	 cmp r3,#10
 1260 001c 39D8     	 bhi .L107
 1261 001e 01A2     	 adr r2,.L102
 1262 0020 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1263              	 .p2align 2
 1264              	.L102:
 1265 0024 51000000 	 .word .L106+1
 1266 0028 51000000 	 .word .L106+1
 1267 002c 51000000 	 .word .L106+1
 1268 0030 5B000000 	 .word .L105+1
 1269 0034 5B000000 	 .word .L105+1
 1270 0038 5B000000 	 .word .L105+1
 1271 003c 5B000000 	 .word .L105+1
 1272 0040 5B000000 	 .word .L105+1
 1273 0044 69000000 	 .word .L104+1
 1274 0048 77000000 	 .word .L103+1
 1275 004c 85000000 	 .word .L101+1
 1276              	 .p2align 1
 1277              	.L106:
 136:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_SLCK_RC:
 137:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_SLCK_XTAL:
 138:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_SLCK_BYPASS:
 139:.././hal/sam3u1c/inc/genclk.h **** 		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
 1278              	 .loc 8 139 15
 1279 0050 7B68     	 ldr r3,[r7,#4]
 1280 0052 1A68     	 ldr r2,[r3]
 1281 0054 7B68     	 ldr r3,[r7,#4]
 1282 0056 1A60     	 str r2,[r3]
 140:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1283              	 .loc 8 140 3
 1284 0058 1BE0     	 b .L100
 1285              	.L105:
 141:.././hal/sam3u1c/inc/genclk.h **** 
 142:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_4M_RC:
 143:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_8M_RC:
 144:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_12M_RC:
 145:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_XTAL:
 146:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_BYPASS:
 147:.././hal/sam3u1c/inc/genclk.h **** 		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
 1286              	 .loc 8 147 15
 1287 005a 7B68     	 ldr r3,[r7,#4]
 1288 005c 1B68     	 ldr r3,[r3]
 1289 005e 43F00102 	 orr r2,r3,#1
 1290 0062 7B68     	 ldr r3,[r7,#4]
 1291 0064 1A60     	 str r2,[r3]
 148:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1292              	 .loc 8 148 3
 1293 0066 14E0     	 b .L100
 1294              	.L104:
 149:.././hal/sam3u1c/inc/genclk.h **** 
 150:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_PLLACK:
 151:.././hal/sam3u1c/inc/genclk.h **** 		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
 1295              	 .loc 8 151 15
 1296 0068 7B68     	 ldr r3,[r7,#4]
 1297 006a 1B68     	 ldr r3,[r3]
 1298 006c 43F00202 	 orr r2,r3,#2
 1299 0070 7B68     	 ldr r3,[r7,#4]
 1300 0072 1A60     	 str r2,[r3]
 152:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1301              	 .loc 8 152 3
 1302 0074 0DE0     	 b .L100
 1303              	.L103:
 153:.././hal/sam3u1c/inc/genclk.h **** 
 154:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_PLLBCK:
 155:.././hal/sam3u1c/inc/genclk.h **** 		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
 1304              	 .loc 8 155 15
 1305 0076 7B68     	 ldr r3,[r7,#4]
 1306 0078 1B68     	 ldr r3,[r3]
 1307 007a 43F00302 	 orr r2,r3,#3
 1308 007e 7B68     	 ldr r3,[r7,#4]
 1309 0080 1A60     	 str r2,[r3]
 156:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1310              	 .loc 8 156 3
 1311 0082 06E0     	 b .L100
 1312              	.L101:
 157:.././hal/sam3u1c/inc/genclk.h **** 
 158:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MCK:
 159:.././hal/sam3u1c/inc/genclk.h **** 		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
 1313              	 .loc 8 159 15
 1314 0084 7B68     	 ldr r3,[r7,#4]
 1315 0086 1B68     	 ldr r3,[r3]
 1316 0088 43F00402 	 orr r2,r3,#4
 1317 008c 7B68     	 ldr r3,[r7,#4]
 1318 008e 1A60     	 str r2,[r3]
 160:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1319              	 .loc 8 160 3
 1320 0090 00BF     	 nop
 1321              	.L100:
 1322              	.L107:
 161:.././hal/sam3u1c/inc/genclk.h **** 	}
 162:.././hal/sam3u1c/inc/genclk.h **** }
 1323              	 .loc 8 162 1
 1324 0092 00BF     	 nop
 1325 0094 0C37     	 adds r7,r7,#12
 1326              	.LCFI77:
 1327              	 .cfi_def_cfa_offset 4
 1328 0096 BD46     	 mov sp,r7
 1329              	.LCFI78:
 1330              	 .cfi_def_cfa_register 13
 1331              	 
 1332 0098 80BC     	 pop {r7}
 1333              	.LCFI79:
 1334              	 .cfi_restore 7
 1335              	 .cfi_def_cfa_offset 0
 1336 009a 7047     	 bx lr
 1337              	 .cfi_endproc
 1338              	.LFE185:
 1340              	 .section .text.genclk_config_set_divider,"ax",%progbits
 1341              	 .align 1
 1342              	 .syntax unified
 1343              	 .thumb
 1344              	 .thumb_func
 1345              	 .fpu softvfp
 1347              	genclk_config_set_divider:
 1348              	.LFB186:
 163:.././hal/sam3u1c/inc/genclk.h **** 
 164:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
 165:.././hal/sam3u1c/inc/genclk.h **** 		uint32_t e_divider)
 166:.././hal/sam3u1c/inc/genclk.h **** {
 1349              	 .loc 8 166 1
 1350              	 .cfi_startproc
 1351              	 
 1352              	 
 1353              	 
 1354 0000 80B4     	 push {r7}
 1355              	.LCFI80:
 1356              	 .cfi_def_cfa_offset 4
 1357              	 .cfi_offset 7,-4
 1358 0002 83B0     	 sub sp,sp,#12
 1359              	.LCFI81:
 1360              	 .cfi_def_cfa_offset 16
 1361 0004 00AF     	 add r7,sp,#0
 1362              	.LCFI82:
 1363              	 .cfi_def_cfa_register 7
 1364 0006 7860     	 str r0,[r7,#4]
 1365 0008 3960     	 str r1,[r7]
 167:.././hal/sam3u1c/inc/genclk.h **** 	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
 1366              	 .loc 8 167 14
 1367 000a 7B68     	 ldr r3,[r7,#4]
 1368 000c 1B68     	 ldr r3,[r3]
 1369 000e 23F07002 	 bic r2,r3,#112
 1370 0012 7B68     	 ldr r3,[r7,#4]
 1371 0014 1A60     	 str r2,[r3]
 168:.././hal/sam3u1c/inc/genclk.h **** 	p_cfg->ctrl |= e_divider;
 1372              	 .loc 8 168 14
 1373 0016 7B68     	 ldr r3,[r7,#4]
 1374 0018 1A68     	 ldr r2,[r3]
 1375 001a 3B68     	 ldr r3,[r7]
 1376 001c 1A43     	 orrs r2,r2,r3
 1377 001e 7B68     	 ldr r3,[r7,#4]
 1378 0020 1A60     	 str r2,[r3]
 169:.././hal/sam3u1c/inc/genclk.h **** }
 1379              	 .loc 8 169 1
 1380 0022 00BF     	 nop
 1381 0024 0C37     	 adds r7,r7,#12
 1382              	.LCFI83:
 1383              	 .cfi_def_cfa_offset 4
 1384 0026 BD46     	 mov sp,r7
 1385              	.LCFI84:
 1386              	 .cfi_def_cfa_register 13
 1387              	 
 1388 0028 80BC     	 pop {r7}
 1389              	.LCFI85:
 1390              	 .cfi_restore 7
 1391              	 .cfi_def_cfa_offset 0
 1392 002a 7047     	 bx lr
 1393              	 .cfi_endproc
 1394              	.LFE186:
 1396              	 .section .text.genclk_enable,"ax",%progbits
 1397              	 .align 1
 1398              	 .syntax unified
 1399              	 .thumb
 1400              	 .thumb_func
 1401              	 .fpu softvfp
 1403              	genclk_enable:
 1404              	.LFB187:
 170:.././hal/sam3u1c/inc/genclk.h **** 
 171:.././hal/sam3u1c/inc/genclk.h **** //@}
 172:.././hal/sam3u1c/inc/genclk.h **** 
 173:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_enable(const struct genclk_config *p_cfg,
 174:.././hal/sam3u1c/inc/genclk.h **** 		uint32_t ul_id)
 175:.././hal/sam3u1c/inc/genclk.h **** {
 1405              	 .loc 8 175 1
 1406              	 .cfi_startproc
 1407              	 
 1408              	 
 1409 0000 80B5     	 push {r7,lr}
 1410              	.LCFI86:
 1411              	 .cfi_def_cfa_offset 8
 1412              	 .cfi_offset 7,-8
 1413              	 .cfi_offset 14,-4
 1414 0002 82B0     	 sub sp,sp,#8
 1415              	.LCFI87:
 1416              	 .cfi_def_cfa_offset 16
 1417 0004 00AF     	 add r7,sp,#0
 1418              	.LCFI88:
 1419              	 .cfi_def_cfa_register 7
 1420 0006 7860     	 str r0,[r7,#4]
 1421 0008 3960     	 str r1,[r7]
 176:.././hal/sam3u1c/inc/genclk.h **** 	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
 1422              	 .loc 8 176 5
 1423 000a 0749     	 ldr r1,.L110
 1424              	 .loc 8 176 29
 1425 000c 7B68     	 ldr r3,[r7,#4]
 1426 000e 1A68     	 ldr r2,[r3]
 1427              	 .loc 8 176 22
 1428 0010 3B68     	 ldr r3,[r7]
 1429 0012 1033     	 adds r3,r3,#16
 1430 0014 41F82320 	 str r2,[r1,r3,lsl#2]
 177:.././hal/sam3u1c/inc/genclk.h **** 	pmc_enable_pck(ul_id);
 1431              	 .loc 8 177 2
 1432 0018 3868     	 ldr r0,[r7]
 1433 001a 044B     	 ldr r3,.L110+4
 1434 001c 9847     	 blx r3
 1435              	.LVL30:
 178:.././hal/sam3u1c/inc/genclk.h **** }
 1436              	 .loc 8 178 1
 1437 001e 00BF     	 nop
 1438 0020 0837     	 adds r7,r7,#8
 1439              	.LCFI89:
 1440              	 .cfi_def_cfa_offset 8
 1441 0022 BD46     	 mov sp,r7
 1442              	.LCFI90:
 1443              	 .cfi_def_cfa_register 13
 1444              	 
 1445 0024 80BD     	 pop {r7,pc}
 1446              	.L111:
 1447 0026 00BF     	 .align 2
 1448              	.L110:
 1449 0028 00040E40 	 .word 1074660352
 1450 002c 00000000 	 .word pmc_enable_pck
 1451              	 .cfi_endproc
 1452              	.LFE187:
 1454              	 .section .text.genclk_enable_source,"ax",%progbits
 1455              	 .align 1
 1456              	 .syntax unified
 1457              	 .thumb
 1458              	 .thumb_func
 1459              	 .fpu softvfp
 1461              	genclk_enable_source:
 1462              	.LFB189:
 179:.././hal/sam3u1c/inc/genclk.h **** 
 180:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_disable(uint32_t ul_id)
 181:.././hal/sam3u1c/inc/genclk.h **** {
 182:.././hal/sam3u1c/inc/genclk.h **** 	pmc_disable_pck(ul_id);
 183:.././hal/sam3u1c/inc/genclk.h **** }
 184:.././hal/sam3u1c/inc/genclk.h **** 
 185:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_enable_source(enum genclk_source e_src)
 186:.././hal/sam3u1c/inc/genclk.h **** {
 1463              	 .loc 8 186 1
 1464              	 .cfi_startproc
 1465              	 
 1466              	 
 1467 0000 80B5     	 push {r7,lr}
 1468              	.LCFI91:
 1469              	 .cfi_def_cfa_offset 8
 1470              	 .cfi_offset 7,-8
 1471              	 .cfi_offset 14,-4
 1472 0002 82B0     	 sub sp,sp,#8
 1473              	.LCFI92:
 1474              	 .cfi_def_cfa_offset 16
 1475 0004 00AF     	 add r7,sp,#0
 1476              	.LCFI93:
 1477              	 .cfi_def_cfa_register 7
 1478 0006 0346     	 mov r3,r0
 1479 0008 FB71     	 strb r3,[r7,#7]
 187:.././hal/sam3u1c/inc/genclk.h **** 	switch (e_src) {
 1480              	 .loc 8 187 2
 1481 000a FB79     	 ldrb r3,[r7,#7]
 1482 000c 0A2B     	 cmp r3,#10
 1483 000e 00F2A280 	 bhi .L135
 1484 0012 01A2     	 adr r2,.L115
 1485 0014 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1486              	 .p2align 2
 1487              	.L115:
 1488 0018 45000000 	 .word .L125+1
 1489 001c 67000000 	 .word .L124+1
 1490 0020 87000000 	 .word .L123+1
 1491 0024 A7000000 	 .word .L122+1
 1492 0028 C7000000 	 .word .L121+1
 1493 002c E7000000 	 .word .L120+1
 1494 0030 07010000 	 .word .L119+1
 1495 0034 27010000 	 .word .L118+1
 1496 0038 47010000 	 .word .L117+1
 1497 003c 4F010000 	 .word .L116+1
 1498 0040 57010000 	 .word .L135+1
 1499              	 .p2align 1
 1500              	.L125:
 188:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_SLCK_RC:
 189:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
 1501              	 .loc 8 189 8
 1502 0044 0020     	 movs r0,#0
 1503 0046 4E4B     	 ldr r3,.L145
 1504 0048 9847     	 blx r3
 1505              	.LVL31:
 1506 004a 0346     	 mov r3,r0
 1507              	 .loc 8 189 7
 1508 004c 83F00103 	 eor r3,r3,#1
 1509 0050 DBB2     	 uxtb r3,r3
 1510              	 .loc 8 189 6
 1511 0052 002B     	 cmp r3,#0
 1512 0054 00F08180 	 beq .L136
 190:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_SLCK_32K_RC);
 1513              	 .loc 8 190 4
 1514 0058 0020     	 movs r0,#0
 1515 005a 4A4B     	 ldr r3,.L145+4
 1516 005c 9847     	 blx r3
 1517              	.LVL32:
 191:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_SLCK_32K_RC);
 1518              	 .loc 8 191 4
 1519 005e 0020     	 movs r0,#0
 1520 0060 494B     	 ldr r3,.L145+8
 1521 0062 9847     	 blx r3
 1522              	.LVL33:
 192:.././hal/sam3u1c/inc/genclk.h **** 		}
 193:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1523              	 .loc 8 193 3
 1524 0064 79E0     	 b .L136
 1525              	.L124:
 194:.././hal/sam3u1c/inc/genclk.h **** 
 195:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_SLCK_XTAL:
 196:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
 1526              	 .loc 8 196 8
 1527 0066 0120     	 movs r0,#1
 1528 0068 454B     	 ldr r3,.L145
 1529 006a 9847     	 blx r3
 1530              	.LVL34:
 1531 006c 0346     	 mov r3,r0
 1532              	 .loc 8 196 7
 1533 006e 83F00103 	 eor r3,r3,#1
 1534 0072 DBB2     	 uxtb r3,r3
 1535              	 .loc 8 196 6
 1536 0074 002B     	 cmp r3,#0
 1537 0076 72D0     	 beq .L137
 197:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_SLCK_32K_XTAL);
 1538              	 .loc 8 197 4
 1539 0078 0120     	 movs r0,#1
 1540 007a 424B     	 ldr r3,.L145+4
 1541 007c 9847     	 blx r3
 1542              	.LVL35:
 198:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_SLCK_32K_XTAL);
 1543              	 .loc 8 198 4
 1544 007e 0120     	 movs r0,#1
 1545 0080 414B     	 ldr r3,.L145+8
 1546 0082 9847     	 blx r3
 1547              	.LVL36:
 199:.././hal/sam3u1c/inc/genclk.h **** 		}
 200:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1548              	 .loc 8 200 3
 1549 0084 6BE0     	 b .L137
 1550              	.L123:
 201:.././hal/sam3u1c/inc/genclk.h **** 
 202:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_SLCK_BYPASS:
 203:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
 1551              	 .loc 8 203 8
 1552 0086 0220     	 movs r0,#2
 1553 0088 3D4B     	 ldr r3,.L145
 1554 008a 9847     	 blx r3
 1555              	.LVL37:
 1556 008c 0346     	 mov r3,r0
 1557              	 .loc 8 203 7
 1558 008e 83F00103 	 eor r3,r3,#1
 1559 0092 DBB2     	 uxtb r3,r3
 1560              	 .loc 8 203 6
 1561 0094 002B     	 cmp r3,#0
 1562 0096 64D0     	 beq .L138
 204:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_SLCK_32K_BYPASS);
 1563              	 .loc 8 204 4
 1564 0098 0220     	 movs r0,#2
 1565 009a 3A4B     	 ldr r3,.L145+4
 1566 009c 9847     	 blx r3
 1567              	.LVL38:
 205:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_SLCK_32K_BYPASS);
 1568              	 .loc 8 205 4
 1569 009e 0220     	 movs r0,#2
 1570 00a0 394B     	 ldr r3,.L145+8
 1571 00a2 9847     	 blx r3
 1572              	.LVL39:
 206:.././hal/sam3u1c/inc/genclk.h **** 		}
 207:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1573              	 .loc 8 207 3
 1574 00a4 5DE0     	 b .L138
 1575              	.L122:
 208:.././hal/sam3u1c/inc/genclk.h **** 
 209:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_4M_RC:
 210:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
 1576              	 .loc 8 210 8
 1577 00a6 0320     	 movs r0,#3
 1578 00a8 354B     	 ldr r3,.L145
 1579 00aa 9847     	 blx r3
 1580              	.LVL40:
 1581 00ac 0346     	 mov r3,r0
 1582              	 .loc 8 210 7
 1583 00ae 83F00103 	 eor r3,r3,#1
 1584 00b2 DBB2     	 uxtb r3,r3
 1585              	 .loc 8 210 6
 1586 00b4 002B     	 cmp r3,#0
 1587 00b6 56D0     	 beq .L139
 211:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_MAINCK_4M_RC);
 1588              	 .loc 8 211 4
 1589 00b8 0320     	 movs r0,#3
 1590 00ba 324B     	 ldr r3,.L145+4
 1591 00bc 9847     	 blx r3
 1592              	.LVL41:
 212:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_MAINCK_4M_RC);
 1593              	 .loc 8 212 4
 1594 00be 0320     	 movs r0,#3
 1595 00c0 314B     	 ldr r3,.L145+8
 1596 00c2 9847     	 blx r3
 1597              	.LVL42:
 213:.././hal/sam3u1c/inc/genclk.h **** 		}
 214:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1598              	 .loc 8 214 3
 1599 00c4 4FE0     	 b .L139
 1600              	.L121:
 215:.././hal/sam3u1c/inc/genclk.h **** 
 216:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_8M_RC:
 217:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
 1601              	 .loc 8 217 8
 1602 00c6 0420     	 movs r0,#4
 1603 00c8 2D4B     	 ldr r3,.L145
 1604 00ca 9847     	 blx r3
 1605              	.LVL43:
 1606 00cc 0346     	 mov r3,r0
 1607              	 .loc 8 217 7
 1608 00ce 83F00103 	 eor r3,r3,#1
 1609 00d2 DBB2     	 uxtb r3,r3
 1610              	 .loc 8 217 6
 1611 00d4 002B     	 cmp r3,#0
 1612 00d6 48D0     	 beq .L140
 218:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_MAINCK_8M_RC);
 1613              	 .loc 8 218 4
 1614 00d8 0420     	 movs r0,#4
 1615 00da 2A4B     	 ldr r3,.L145+4
 1616 00dc 9847     	 blx r3
 1617              	.LVL44:
 219:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_MAINCK_8M_RC);
 1618              	 .loc 8 219 4
 1619 00de 0420     	 movs r0,#4
 1620 00e0 294B     	 ldr r3,.L145+8
 1621 00e2 9847     	 blx r3
 1622              	.LVL45:
 220:.././hal/sam3u1c/inc/genclk.h **** 		}
 221:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1623              	 .loc 8 221 3
 1624 00e4 41E0     	 b .L140
 1625              	.L120:
 222:.././hal/sam3u1c/inc/genclk.h **** 
 223:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_12M_RC:
 224:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
 1626              	 .loc 8 224 8
 1627 00e6 0520     	 movs r0,#5
 1628 00e8 254B     	 ldr r3,.L145
 1629 00ea 9847     	 blx r3
 1630              	.LVL46:
 1631 00ec 0346     	 mov r3,r0
 1632              	 .loc 8 224 7
 1633 00ee 83F00103 	 eor r3,r3,#1
 1634 00f2 DBB2     	 uxtb r3,r3
 1635              	 .loc 8 224 6
 1636 00f4 002B     	 cmp r3,#0
 1637 00f6 3AD0     	 beq .L141
 225:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_MAINCK_12M_RC);
 1638              	 .loc 8 225 4
 1639 00f8 0520     	 movs r0,#5
 1640 00fa 224B     	 ldr r3,.L145+4
 1641 00fc 9847     	 blx r3
 1642              	.LVL47:
 226:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_MAINCK_12M_RC);
 1643              	 .loc 8 226 4
 1644 00fe 0520     	 movs r0,#5
 1645 0100 214B     	 ldr r3,.L145+8
 1646 0102 9847     	 blx r3
 1647              	.LVL48:
 227:.././hal/sam3u1c/inc/genclk.h **** 		}
 228:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1648              	 .loc 8 228 3
 1649 0104 33E0     	 b .L141
 1650              	.L119:
 229:.././hal/sam3u1c/inc/genclk.h **** 
 230:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_XTAL:
 231:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
 1651              	 .loc 8 231 8
 1652 0106 0620     	 movs r0,#6
 1653 0108 1D4B     	 ldr r3,.L145
 1654 010a 9847     	 blx r3
 1655              	.LVL49:
 1656 010c 0346     	 mov r3,r0
 1657              	 .loc 8 231 7
 1658 010e 83F00103 	 eor r3,r3,#1
 1659 0112 DBB2     	 uxtb r3,r3
 1660              	 .loc 8 231 6
 1661 0114 002B     	 cmp r3,#0
 1662 0116 2CD0     	 beq .L142
 232:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_MAINCK_XTAL);
 1663              	 .loc 8 232 4
 1664 0118 0620     	 movs r0,#6
 1665 011a 1A4B     	 ldr r3,.L145+4
 1666 011c 9847     	 blx r3
 1667              	.LVL50:
 233:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_MAINCK_XTAL);
 1668              	 .loc 8 233 4
 1669 011e 0620     	 movs r0,#6
 1670 0120 194B     	 ldr r3,.L145+8
 1671 0122 9847     	 blx r3
 1672              	.LVL51:
 234:.././hal/sam3u1c/inc/genclk.h **** 		}
 235:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1673              	 .loc 8 235 3
 1674 0124 25E0     	 b .L142
 1675              	.L118:
 236:.././hal/sam3u1c/inc/genclk.h **** 
 237:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_BYPASS:
 238:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
 1676              	 .loc 8 238 8
 1677 0126 0720     	 movs r0,#7
 1678 0128 154B     	 ldr r3,.L145
 1679 012a 9847     	 blx r3
 1680              	.LVL52:
 1681 012c 0346     	 mov r3,r0
 1682              	 .loc 8 238 7
 1683 012e 83F00103 	 eor r3,r3,#1
 1684 0132 DBB2     	 uxtb r3,r3
 1685              	 .loc 8 238 6
 1686 0134 002B     	 cmp r3,#0
 1687 0136 1ED0     	 beq .L143
 239:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_MAINCK_BYPASS);
 1688              	 .loc 8 239 4
 1689 0138 0720     	 movs r0,#7
 1690 013a 124B     	 ldr r3,.L145+4
 1691 013c 9847     	 blx r3
 1692              	.LVL53:
 240:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_MAINCK_BYPASS);
 1693              	 .loc 8 240 4
 1694 013e 0720     	 movs r0,#7
 1695 0140 114B     	 ldr r3,.L145+8
 1696 0142 9847     	 blx r3
 1697              	.LVL54:
 241:.././hal/sam3u1c/inc/genclk.h **** 		}
 242:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1698              	 .loc 8 242 3
 1699 0144 17E0     	 b .L143
 1700              	.L117:
 243:.././hal/sam3u1c/inc/genclk.h **** 
 244:.././hal/sam3u1c/inc/genclk.h **** #ifdef CONFIG_PLL0_SOURCE
 245:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_PLLACK:
 246:.././hal/sam3u1c/inc/genclk.h **** 		pll_enable_config_defaults(0);
 1701              	 .loc 8 246 3
 1702 0146 0020     	 movs r0,#0
 1703 0148 104B     	 ldr r3,.L145+12
 1704 014a 9847     	 blx r3
 1705              	.LVL55:
 247:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1706              	 .loc 8 247 3
 1707 014c 14E0     	 b .L127
 1708              	.L116:
 248:.././hal/sam3u1c/inc/genclk.h **** #endif
 249:.././hal/sam3u1c/inc/genclk.h **** 
 250:.././hal/sam3u1c/inc/genclk.h **** #ifdef CONFIG_PLL1_SOURCE
 251:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_PLLBCK:
 252:.././hal/sam3u1c/inc/genclk.h **** 		pll_enable_config_defaults(1);
 1709              	 .loc 8 252 3
 1710 014e 0120     	 movs r0,#1
 1711 0150 0E4B     	 ldr r3,.L145+12
 1712 0152 9847     	 blx r3
 1713              	.LVL56:
 253:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1714              	 .loc 8 253 3
 1715 0154 10E0     	 b .L127
 1716              	.L135:
 254:.././hal/sam3u1c/inc/genclk.h **** #endif
 255:.././hal/sam3u1c/inc/genclk.h **** 
 256:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MCK:
 257:.././hal/sam3u1c/inc/genclk.h **** 		break;
 258:.././hal/sam3u1c/inc/genclk.h **** 
 259:.././hal/sam3u1c/inc/genclk.h **** 	default:
 260:.././hal/sam3u1c/inc/genclk.h **** 		Assert(false);
 261:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1717              	 .loc 8 261 3
 1718 0156 00BF     	 nop
 1719 0158 0EE0     	 b .L144
 1720              	.L136:
 193:.././hal/sam3u1c/inc/genclk.h **** 
 1721              	 .loc 8 193 3
 1722 015a 00BF     	 nop
 1723 015c 0CE0     	 b .L144
 1724              	.L137:
 200:.././hal/sam3u1c/inc/genclk.h **** 
 1725              	 .loc 8 200 3
 1726 015e 00BF     	 nop
 1727 0160 0AE0     	 b .L144
 1728              	.L138:
 207:.././hal/sam3u1c/inc/genclk.h **** 
 1729              	 .loc 8 207 3
 1730 0162 00BF     	 nop
 1731 0164 08E0     	 b .L144
 1732              	.L139:
 214:.././hal/sam3u1c/inc/genclk.h **** 
 1733              	 .loc 8 214 3
 1734 0166 00BF     	 nop
 1735 0168 06E0     	 b .L144
 1736              	.L140:
 221:.././hal/sam3u1c/inc/genclk.h **** 
 1737              	 .loc 8 221 3
 1738 016a 00BF     	 nop
 1739 016c 04E0     	 b .L144
 1740              	.L141:
 228:.././hal/sam3u1c/inc/genclk.h **** 
 1741              	 .loc 8 228 3
 1742 016e 00BF     	 nop
 1743 0170 02E0     	 b .L144
 1744              	.L142:
 235:.././hal/sam3u1c/inc/genclk.h **** 
 1745              	 .loc 8 235 3
 1746 0172 00BF     	 nop
 1747 0174 00E0     	 b .L144
 1748              	.L143:
 242:.././hal/sam3u1c/inc/genclk.h **** 
 1749              	 .loc 8 242 3
 1750 0176 00BF     	 nop
 1751              	.L127:
 1752              	.L144:
 262:.././hal/sam3u1c/inc/genclk.h **** 	}
 263:.././hal/sam3u1c/inc/genclk.h **** }
 1753              	 .loc 8 263 1
 1754 0178 00BF     	 nop
 1755 017a 0837     	 adds r7,r7,#8
 1756              	.LCFI94:
 1757              	 .cfi_def_cfa_offset 8
 1758 017c BD46     	 mov sp,r7
 1759              	.LCFI95:
 1760              	 .cfi_def_cfa_register 13
 1761              	 
 1762 017e 80BD     	 pop {r7,pc}
 1763              	.L146:
 1764              	 .align 2
 1765              	.L145:
 1766 0180 00000000 	 .word osc_is_ready
 1767 0184 00000000 	 .word osc_enable
 1768 0188 00000000 	 .word osc_wait_ready
 1769 018c 00000000 	 .word pll_enable_config_defaults
 1770              	 .cfi_endproc
 1771              	.LFE189:
 1773              	 .global usb_serial_number
 1774              	 .section .data.usb_serial_number,"aw"
 1775              	 .align 2
 1778              	usb_serial_number:
 1779 0000 30303030 	 .ascii "000000000000DEADBEEF\000"
 1779      30303030 
 1779      30303030 
 1779      44454144 
 1779      42454546 
 1780 0015 00000000 	 .space 12
 1780      00000000 
 1780      00000000 
 1781              	 .section .text.phywhisperer_setup_pins,"ax",%progbits
 1782              	 .align 1
 1783              	 .global phywhisperer_setup_pins
 1784              	 .syntax unified
 1785              	 .thumb
 1786              	 .thumb_func
 1787              	 .fpu softvfp
 1789              	phywhisperer_setup_pins:
 1790              	.LFB190:
 1791              	 .file 9 "main.c"
   1:main.c        **** #include <asf.h>
   2:main.c        **** #include "conf_usb.h"
   3:main.c        **** #include "stdio_serial.h"
   4:main.c        **** #include "ui.h"
   5:main.c        **** #include "genclk.h"
   6:main.c        **** #include "tasks.h"
   7:main.c        **** #include "usb_xmem.h"
   8:main.c        **** #include "fpga_program.h"
   9:main.c        **** #include "usb.h"
  10:main.c        **** #include "sysclk.h"
  11:main.c        **** #include <string.h>
  12:main.c        **** 
  13:main.c        **** //Serial Number - will be read by device ID
  14:main.c        **** char usb_serial_number[33] = "000000000000DEADBEEF";
  15:main.c        **** 
  16:main.c        **** 
  17:main.c        **** void phywhisperer_setup_pins(void)
  18:main.c        **** {
 1792              	 .loc 9 18 1
 1793              	 .cfi_startproc
 1794              	 
 1795              	 
 1796 0000 80B5     	 push {r7,lr}
 1797              	.LCFI96:
 1798              	 .cfi_def_cfa_offset 8
 1799              	 .cfi_offset 7,-8
 1800              	 .cfi_offset 14,-4
 1801 0002 00AF     	 add r7,sp,#0
 1802              	.LCFI97:
 1803              	 .cfi_def_cfa_register 7
  19:main.c        ****     board_init();
 1804              	 .loc 9 19 5
 1805 0004 3F4B     	 ldr r3,.L148
 1806 0006 9847     	 blx r3
 1807              	.LVL57:
  20:main.c        **** 
  21:main.c        ****     
  22:main.c        ****     //Configure FPGA to allow programming via USB
  23:main.c        ****     fpga_program_init();
 1808              	 .loc 9 23 5
 1809 0008 3F4B     	 ldr r3,.L148+4
 1810 000a 9847     	 blx r3
 1811              	.LVL58:
  24:main.c        **** 
  25:main.c        ****     /* Enable SMC */
  26:main.c        ****     pmc_enable_periph_clk(ID_SMC);
 1812              	 .loc 9 26 5
 1813 000c 0920     	 movs r0,#9
 1814 000e 3F4B     	 ldr r3,.L148+8
 1815 0010 9847     	 blx r3
 1816              	.LVL59:
  27:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
 1817              	 .loc 9 27 5
 1818 0012 3F49     	 ldr r1,.L148+12
 1819 0014 2920     	 movs r0,#41
 1820 0016 3F4B     	 ldr r3,.L148+16
 1821 0018 9847     	 blx r3
 1822              	.LVL60:
  28:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
 1823              	 .loc 9 28 5
 1824 001a 3D49     	 ldr r1,.L148+12
 1825 001c 2A20     	 movs r0,#42
 1826 001e 3D4B     	 ldr r3,.L148+16
 1827 0020 9847     	 blx r3
 1828              	.LVL61:
  29:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
 1829              	 .loc 9 29 5
 1830 0022 3B49     	 ldr r1,.L148+12
 1831 0024 2B20     	 movs r0,#43
 1832 0026 3B4B     	 ldr r3,.L148+16
 1833 0028 9847     	 blx r3
 1834              	.LVL62:
  30:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
 1835              	 .loc 9 30 5
 1836 002a 3949     	 ldr r1,.L148+12
 1837 002c 2C20     	 movs r0,#44
 1838 002e 394B     	 ldr r3,.L148+16
 1839 0030 9847     	 blx r3
 1840              	.LVL63:
  31:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
 1841              	 .loc 9 31 5
 1842 0032 3749     	 ldr r1,.L148+12
 1843 0034 2D20     	 movs r0,#45
 1844 0036 374B     	 ldr r3,.L148+16
 1845 0038 9847     	 blx r3
 1846              	.LVL64:
  32:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
 1847              	 .loc 9 32 5
 1848 003a 3549     	 ldr r1,.L148+12
 1849 003c 2E20     	 movs r0,#46
 1850 003e 354B     	 ldr r3,.L148+16
 1851 0040 9847     	 blx r3
 1852              	.LVL65:
  33:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
 1853              	 .loc 9 33 5
 1854 0042 3349     	 ldr r1,.L148+12
 1855 0044 2F20     	 movs r0,#47
 1856 0046 334B     	 ldr r3,.L148+16
 1857 0048 9847     	 blx r3
 1858              	.LVL66:
  34:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
 1859              	 .loc 9 34 5
 1860 004a 3149     	 ldr r1,.L148+12
 1861 004c 3020     	 movs r0,#48
 1862 004e 314B     	 ldr r3,.L148+16
 1863 0050 9847     	 blx r3
 1864              	.LVL67:
  35:main.c        ****     gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
 1865              	 .loc 9 35 5
 1866 0052 2F49     	 ldr r1,.L148+12
 1867 0054 3320     	 movs r0,#51
 1868 0056 2F4B     	 ldr r3,.L148+16
 1869 0058 9847     	 blx r3
 1870              	.LVL68:
  36:main.c        ****     gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
 1871              	 .loc 9 36 5
 1872 005a 2D49     	 ldr r1,.L148+12
 1873 005c 3720     	 movs r0,#55
 1874 005e 2D4B     	 ldr r3,.L148+16
 1875 0060 9847     	 blx r3
 1876              	.LVL69:
  37:main.c        ****     gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
 1877              	 .loc 9 37 5
 1878 0062 2B49     	 ldr r1,.L148+12
 1879 0064 3420     	 movs r0,#52
 1880 0066 2B4B     	 ldr r3,.L148+16
 1881 0068 9847     	 blx r3
 1882              	.LVL70:
  38:main.c        **** 
  39:main.c        ****     gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
 1883              	 .loc 9 39 5
 1884 006a 4FF04052 	 mov r2,#805306368
 1885 006e 40F2BF11 	 movw r1,#447
 1886 0072 2948     	 ldr r0,.L148+20
 1887 0074 294B     	 ldr r3,.L148+24
 1888 0076 9847     	 blx r3
 1889              	.LVL71:
  40:main.c        ****     pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
 1890              	 .loc 9 40 5
 1891 0078 40F2BF11 	 movw r1,#447
 1892 007c 2648     	 ldr r0,.L148+20
 1893 007e 284B     	 ldr r3,.L148+28
 1894 0080 9847     	 blx r3
 1895              	.LVL72:
  41:main.c        **** 
  42:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
 1896              	 .loc 9 42 5
 1897 0082 2849     	 ldr r1,.L148+32
 1898 0084 2720     	 movs r0,#39
 1899 0086 234B     	 ldr r3,.L148+16
 1900 0088 9847     	 blx r3
 1901              	.LVL73:
  43:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
 1902              	 .loc 9 43 5
 1903 008a 2649     	 ldr r1,.L148+32
 1904 008c 2820     	 movs r0,#40
 1905 008e 214B     	 ldr r3,.L148+16
 1906 0090 9847     	 blx r3
 1907              	.LVL74:
  44:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
 1908              	 .loc 9 44 5
 1909 0092 2449     	 ldr r1,.L148+32
 1910 0094 2020     	 movs r0,#32
 1911 0096 1F4B     	 ldr r3,.L148+16
 1912 0098 9847     	 blx r3
 1913              	.LVL75:
  45:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
 1914              	 .loc 9 45 5
 1915 009a 2249     	 ldr r1,.L148+32
 1916 009c 2120     	 movs r0,#33
 1917 009e 1D4B     	 ldr r3,.L148+16
 1918 00a0 9847     	 blx r3
 1919              	.LVL76:
  46:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
 1920              	 .loc 9 46 5
 1921 00a2 2049     	 ldr r1,.L148+32
 1922 00a4 2220     	 movs r0,#34
 1923 00a6 1B4B     	 ldr r3,.L148+16
 1924 00a8 9847     	 blx r3
 1925              	.LVL77:
  47:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
 1926              	 .loc 9 47 5
 1927 00aa 1E49     	 ldr r1,.L148+32
 1928 00ac 2320     	 movs r0,#35
 1929 00ae 194B     	 ldr r3,.L148+16
 1930 00b0 9847     	 blx r3
 1931              	.LVL78:
  48:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
 1932              	 .loc 9 48 5
 1933 00b2 1C49     	 ldr r1,.L148+32
 1934 00b4 2420     	 movs r0,#36
 1935 00b6 174B     	 ldr r3,.L148+16
 1936 00b8 9847     	 blx r3
 1937              	.LVL79:
  49:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
 1938              	 .loc 9 49 5
 1939 00ba 1A49     	 ldr r1,.L148+32
 1940 00bc 2520     	 movs r0,#37
 1941 00be 154B     	 ldr r3,.L148+16
 1942 00c0 9847     	 blx r3
 1943              	.LVL80:
  50:main.c        **** 
  51:main.c        ****     gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
 1944              	 .loc 9 51 5
 1945 00c2 4FF04051 	 mov r1,#805306368
 1946 00c6 2620     	 movs r0,#38
 1947 00c8 124B     	 ldr r3,.L148+16
 1948 00ca 9847     	 blx r3
 1949              	.LVL81:
  52:main.c        ****     gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
 1950              	 .loc 9 52 5
 1951 00cc 4FF06051 	 mov r1,#939524096
 1952 00d0 3120     	 movs r0,#49
 1953 00d2 104B     	 ldr r3,.L148+16
 1954 00d4 9847     	 blx r3
 1955              	.LVL82:
  53:main.c        **** 
  54:main.c        ****     smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
 1956              	 .loc 9 54 5
 1957 00d6 0022     	 movs r2,#0
 1958 00d8 0021     	 movs r1,#0
 1959 00da 1348     	 ldr r0,.L148+36
 1960 00dc 134B     	 ldr r3,.L148+40
 1961 00de 9847     	 blx r3
 1962              	.LVL83:
  55:main.c        ****                          | SMC_SETUP_NCS_WR_SETUP(0)
  56:main.c        ****                          | SMC_SETUP_NRD_SETUP(0)
  57:main.c        ****                          | SMC_SETUP_NCS_RD_SETUP(0));
  58:main.c        ****     smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(0)
 1963              	 .loc 9 58 5
 1964 00e0 0022     	 movs r2,#0
 1965 00e2 0021     	 movs r1,#0
 1966 00e4 1048     	 ldr r0,.L148+36
 1967 00e6 124B     	 ldr r3,.L148+44
 1968 00e8 9847     	 blx r3
 1969              	.LVL84:
  59:main.c        ****                          | SMC_PULSE_NCS_WR_PULSE(0)
  60:main.c        ****                          | SMC_PULSE_NRD_PULSE(0)
  61:main.c        ****                          | SMC_PULSE_NCS_RD_PULSE(0));
  62:main.c        ****     smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(1)
 1970              	 .loc 9 62 5
 1971 00ea 4FF00112 	 mov r2,#65537
 1972 00ee 0021     	 movs r1,#0
 1973 00f0 0D48     	 ldr r0,.L148+36
 1974 00f2 104B     	 ldr r3,.L148+48
 1975 00f4 9847     	 blx r3
 1976              	.LVL85:
  63:main.c        ****                          | SMC_CYCLE_NRD_CYCLE(1));
  64:main.c        ****     smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
 1977              	 .loc 9 64 5
 1978 00f6 0322     	 movs r2,#3
 1979 00f8 0021     	 movs r1,#0
 1980 00fa 0B48     	 ldr r0,.L148+36
 1981 00fc 0E4B     	 ldr r3,.L148+52
 1982 00fe 9847     	 blx r3
 1983              	.LVL86:
  65:main.c        ****                  | SMC_MODE_DBW_BIT_8);
  66:main.c        **** }
 1984              	 .loc 9 66 1
 1985 0100 00BF     	 nop
 1986 0102 80BD     	 pop {r7,pc}
 1987              	.L149:
 1988              	 .align 2
 1989              	.L148:
 1990 0104 00000000 	 .word board_init
 1991 0108 00000000 	 .word fpga_program_init
 1992 010c 00000000 	 .word pmc_enable_periph_clk
 1993 0110 01000008 	 .word 134217729
 1994 0114 00000000 	 .word pio_configure_pin
 1995 0118 000E0E40 	 .word 1074662912
 1996 011c 00000000 	 .word pio_configure_pin_group
 1997 0120 00000000 	 .word pio_enable_output_write
 1998 0124 01000010 	 .word 268435457
 1999 0128 00000E40 	 .word 1074659328
 2000 012c 00000000 	 .word smc_set_setup_timing
 2001 0130 00000000 	 .word smc_set_pulse_timing
 2002 0134 00000000 	 .word smc_set_cycle_timing
 2003 0138 00000000 	 .word smc_set_mode
 2004              	 .cfi_endproc
 2005              	.LFE190:
 2007              	 .section .text.hacky_delay,"ax",%progbits
 2008              	 .align 1
 2009              	 .global hacky_delay
 2010              	 .syntax unified
 2011              	 .thumb
 2012              	 .thumb_func
 2013              	 .fpu softvfp
 2015              	hacky_delay:
 2016              	.LFB191:
  67:main.c        **** 
  68:main.c        **** void hacky_delay(void)
  69:main.c        **** {
 2017              	 .loc 9 69 1
 2018              	 .cfi_startproc
 2019              	 
 2020              	 
 2021              	 
 2022 0000 80B4     	 push {r7}
 2023              	.LCFI98:
 2024              	 .cfi_def_cfa_offset 4
 2025              	 .cfi_offset 7,-4
 2026 0002 83B0     	 sub sp,sp,#12
 2027              	.LCFI99:
 2028              	 .cfi_def_cfa_offset 16
 2029 0004 00AF     	 add r7,sp,#0
 2030              	.LCFI100:
 2031              	 .cfi_def_cfa_register 7
 2032              	.LBB23:
  70:main.c        ****     for (volatile uint32_t i = 0; i < 250000; i++);
 2033              	 .loc 9 70 28
 2034 0006 0023     	 movs r3,#0
 2035 0008 7B60     	 str r3,[r7,#4]
 2036              	 .loc 9 70 5
 2037 000a 02E0     	 b .L151
 2038              	.L152:
 2039              	 .loc 9 70 48 discriminator 3
 2040 000c 7B68     	 ldr r3,[r7,#4]
 2041 000e 0133     	 adds r3,r3,#1
 2042 0010 7B60     	 str r3,[r7,#4]
 2043              	.L151:
 2044              	 .loc 9 70 37 discriminator 1
 2045 0012 7B68     	 ldr r3,[r7,#4]
 2046              	 .loc 9 70 5 discriminator 1
 2047 0014 044A     	 ldr r2,.L153
 2048 0016 9342     	 cmp r3,r2
 2049 0018 F8D9     	 bls .L152
 2050              	.LBE23:
  71:main.c        **** }
 2051              	 .loc 9 71 1
 2052 001a 00BF     	 nop
 2053 001c 00BF     	 nop
 2054 001e 0C37     	 adds r7,r7,#12
 2055              	.LCFI101:
 2056              	 .cfi_def_cfa_offset 4
 2057 0020 BD46     	 mov sp,r7
 2058              	.LCFI102:
 2059              	 .cfi_def_cfa_register 13
 2060              	 
 2061 0022 80BC     	 pop {r7}
 2062              	.LCFI103:
 2063              	 .cfi_restore 7
 2064              	 .cfi_def_cfa_offset 0
 2065 0024 7047     	 bx lr
 2066              	.L154:
 2067 0026 00BF     	 .align 2
 2068              	.L153:
 2069 0028 8FD00300 	 .word 249999
 2070              	 .cfi_endproc
 2071              	.LFE191:
 2073              	 .section .text.genclk_enable_config,"ax",%progbits
 2074              	 .align 1
 2075              	 .syntax unified
 2076              	 .thumb
 2077              	 .thumb_func
 2078              	 .fpu softvfp
 2080              	genclk_enable_config:
 2081              	.LFB192:
  72:main.c        **** 
  73:main.c        **** static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divid
  74:main.c        **** {
 2082              	 .loc 9 74 1
 2083              	 .cfi_startproc
 2084              	 
 2085              	 
 2086 0000 80B5     	 push {r7,lr}
 2087              	.LCFI104:
 2088              	 .cfi_def_cfa_offset 8
 2089              	 .cfi_offset 7,-8
 2090              	 .cfi_offset 14,-4
 2091 0002 86B0     	 sub sp,sp,#24
 2092              	.LCFI105:
 2093              	 .cfi_def_cfa_offset 32
 2094 0004 00AF     	 add r7,sp,#0
 2095              	.LCFI106:
 2096              	 .cfi_def_cfa_register 7
 2097 0006 F860     	 str r0,[r7,#12]
 2098 0008 0B46     	 mov r3,r1
 2099 000a 7A60     	 str r2,[r7,#4]
 2100 000c FB72     	 strb r3,[r7,#11]
  75:main.c        ****     struct genclk_config gcfg;
  76:main.c        **** 
  77:main.c        ****     genclk_config_defaults(&gcfg, id);
 2101              	 .loc 9 77 5
 2102 000e 07F11403 	 add r3,r7,#20
 2103 0012 F968     	 ldr r1,[r7,#12]
 2104 0014 1846     	 mov r0,r3
 2105 0016 0E4B     	 ldr r3,.L156
 2106 0018 9847     	 blx r3
 2107              	.LVL87:
  78:main.c        ****     genclk_enable_source(src);
 2108              	 .loc 9 78 5
 2109 001a FB7A     	 ldrb r3,[r7,#11]
 2110 001c 1846     	 mov r0,r3
 2111 001e 0D4B     	 ldr r3,.L156+4
 2112 0020 9847     	 blx r3
 2113              	.LVL88:
  79:main.c        ****     genclk_config_set_source(&gcfg, src);
 2114              	 .loc 9 79 5
 2115 0022 FA7A     	 ldrb r2,[r7,#11]
 2116 0024 07F11403 	 add r3,r7,#20
 2117 0028 1146     	 mov r1,r2
 2118 002a 1846     	 mov r0,r3
 2119 002c 0A4B     	 ldr r3,.L156+8
 2120 002e 9847     	 blx r3
 2121              	.LVL89:
  80:main.c        ****     genclk_config_set_divider(&gcfg, divider);
 2122              	 .loc 9 80 5
 2123 0030 07F11403 	 add r3,r7,#20
 2124 0034 7968     	 ldr r1,[r7,#4]
 2125 0036 1846     	 mov r0,r3
 2126 0038 084B     	 ldr r3,.L156+12
 2127 003a 9847     	 blx r3
 2128              	.LVL90:
  81:main.c        ****     genclk_enable(&gcfg, id);
 2129              	 .loc 9 81 5
 2130 003c 07F11403 	 add r3,r7,#20
 2131 0040 F968     	 ldr r1,[r7,#12]
 2132 0042 1846     	 mov r0,r3
 2133 0044 064B     	 ldr r3,.L156+16
 2134 0046 9847     	 blx r3
 2135              	.LVL91:
  82:main.c        **** }
 2136              	 .loc 9 82 1
 2137 0048 00BF     	 nop
 2138 004a 1837     	 adds r7,r7,#24
 2139              	.LCFI107:
 2140              	 .cfi_def_cfa_offset 8
 2141 004c BD46     	 mov sp,r7
 2142              	.LCFI108:
 2143              	 .cfi_def_cfa_register 13
 2144              	 
 2145 004e 80BD     	 pop {r7,pc}
 2146              	.L157:
 2147              	 .align 2
 2148              	.L156:
 2149 0050 00000000 	 .word genclk_config_defaults
 2150 0054 00000000 	 .word genclk_enable_source
 2151 0058 00000000 	 .word genclk_config_set_source
 2152 005c 00000000 	 .word genclk_config_set_divider
 2153 0060 00000000 	 .word genclk_enable
 2154              	 .cfi_endproc
 2155              	.LFE192:
 2157              	 .section .rodata
 2158              	 .align 2
 2159              	.LC0:
 2160 0000 25303878 	 .ascii "%08x\000"
 2160      00
 2161              	 .section .text.main,"ax",%progbits
 2162              	 .align 1
 2163              	 .global main
 2164              	 .syntax unified
 2165              	 .thumb
 2166              	 .thumb_func
 2167              	 .fpu softvfp
 2169              	main:
 2170              	.LFB193:
  83:main.c        **** 
  84:main.c        **** 
  85:main.c        **** int main(void)
  86:main.c        **** {
 2171              	 .loc 9 86 1
 2172              	 .cfi_startproc
 2173              	 
 2174              	 
 2175 0000 80B5     	 push {r7,lr}
 2176              	.LCFI109:
 2177              	 .cfi_def_cfa_offset 8
 2178              	 .cfi_offset 7,-8
 2179              	 .cfi_offset 14,-4
 2180 0002 86B0     	 sub sp,sp,#24
 2181              	.LCFI110:
 2182              	 .cfi_def_cfa_offset 32
 2183 0004 00AF     	 add r7,sp,#0
 2184              	.LCFI111:
 2185              	 .cfi_def_cfa_register 7
  87:main.c        ****     uint32_t serial_number[4];
  88:main.c        **** 
  89:main.c        ****     // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
  90:main.c        ****     flash_read_unique_id(serial_number, sizeof(serial_number));
 2186              	 .loc 9 90 5
 2187 0006 3B1D     	 adds r3,r7,#4
 2188 0008 1021     	 movs r1,#16
 2189 000a 1846     	 mov r0,r3
 2190 000c 1B4B     	 ldr r3,.L162
 2191 000e 9847     	 blx r3
 2192              	.LVL92:
  91:main.c        **** 
  92:main.c        ****     irq_initialize_vectors();
  93:main.c        ****     cpu_irq_enable();
 2193              	 .loc 9 93 5
 2194 0010 1B4B     	 ldr r3,.L162+4
 2195 0012 0122     	 movs r2,#1
 2196 0014 1A70     	 strb r2,[r3]
 2197              	.LBB24:
 2198              	.LBB25:
 354:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 2199              	 .loc 6 354 3
 2200              	 .syntax unified
 2201              	
 2202 0016 BFF35F8F 	 dmb
 2203              	
 2204              	 .loc 6 355 1
 2205              	 .thumb
 2206              	 .syntax unified
 2207 001a 00BF     	 nop
 2208              	.LBE25:
 2209              	.LBE24:
 2210              	.LBB26:
 2211              	.LBB27:
 317:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 2212              	 .loc 5 317 3
 2213              	 .syntax unified
 2214              	
 2215 001c 62B6     	 cpsie i
 2216              	
 318:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 2217              	 .loc 5 318 1
 2218              	 .thumb
 2219              	 .syntax unified
 2220 001e 00BF     	 nop
 2221              	.LBE27:
 2222              	.LBE26:
  94:main.c        **** 
  95:main.c        ****     // Initialize the sleep manager
  96:main.c        ****     sleepmgr_init();
 2223              	 .loc 9 96 5
 2224 0020 184B     	 ldr r3,.L162+8
 2225 0022 9847     	 blx r3
 2226              	.LVL93:
  97:main.c        **** #if !SAMD21 && !SAMR21
  98:main.c        ****     sysclk_init();
 2227              	 .loc 9 98 5
 2228 0024 184B     	 ldr r3,.L162+12
 2229 0026 9847     	 blx r3
 2230              	.LVL94:
  99:main.c        ****     phywhisperer_setup_pins();
 2231              	 .loc 9 99 5
 2232 0028 184B     	 ldr r3,.L162+16
 2233 002a 9847     	 blx r3
 2234              	.LVL95:
 2235              	.LBB28:
 100:main.c        **** #else
 101:main.c        ****     system_init();
 102:main.c        **** #endif
 103:main.c        **** 
 104:main.c        **** 	//Convert serial number to ASCII for USB Serial number
 105:main.c        **** 	for(unsigned int i = 0; i < 4; i++){
 2236              	 .loc 9 105 19
 2237 002c 0023     	 movs r3,#0
 2238 002e 7B61     	 str r3,[r7,#20]
 2239              	 .loc 9 105 2
 2240 0030 11E0     	 b .L159
 2241              	.L160:
 106:main.c        **** 		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
 2242              	 .loc 9 106 31 discriminator 3
 2243 0032 7B69     	 ldr r3,[r7,#20]
 2244 0034 DB00     	 lsls r3,r3,#3
 2245              	 .loc 9 106 3 discriminator 3
 2246 0036 164A     	 ldr r2,.L162+20
 2247 0038 9818     	 adds r0,r3,r2
 2248              	 .loc 9 106 71 discriminator 3
 2249 003a 7B69     	 ldr r3,[r7,#20]
 2250 003c 9B00     	 lsls r3,r3,#2
 2251 003e 07F11802 	 add r2,r7,#24
 2252 0042 1344     	 add r3,r3,r2
 2253 0044 53F8143C 	 ldr r3,[r3,#-20]
 2254              	 .loc 9 106 3 discriminator 3
 2255 0048 1A46     	 mov r2,r3
 2256 004a 1249     	 ldr r1,.L162+24
 2257 004c 124B     	 ldr r3,.L162+28
 2258 004e 9847     	 blx r3
 2259              	.LVL96:
 105:main.c        **** 		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
 2260              	 .loc 9 105 34 discriminator 3
 2261 0050 7B69     	 ldr r3,[r7,#20]
 2262 0052 0133     	 adds r3,r3,#1
 2263 0054 7B61     	 str r3,[r7,#20]
 2264              	.L159:
 105:main.c        **** 		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
 2265              	 .loc 9 105 2 discriminator 1
 2266 0056 7B69     	 ldr r3,[r7,#20]
 2267 0058 032B     	 cmp r3,#3
 2268 005a EAD9     	 bls .L160
 2269              	.LBE28:
 107:main.c        **** 	}
 108:main.c        **** 	usb_serial_number[32] = 0;
 2270              	 .loc 9 108 24
 2271 005c 0C4B     	 ldr r3,.L162+20
 2272 005e 0022     	 movs r2,#0
 2273 0060 83F82020 	 strb r2,[r3,#32]
 109:main.c        **** 
 110:main.c        ****     genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
 2274              	 .loc 9 110 5
 2275 0064 0022     	 movs r2,#0
 2276 0066 0A21     	 movs r1,#10
 2277 0068 0120     	 movs r0,#1
 2278 006a 0C4B     	 ldr r3,.L162+32
 2279 006c 9847     	 blx r3
 2280              	.LVL97:
 111:main.c        ****     udc_start();
 2281              	 .loc 9 111 5
 2282 006e 0C4B     	 ldr r3,.L162+36
 2283 0070 9847     	 blx r3
 2284              	.LVL98:
 112:main.c        **** 
 113:main.c        ****     ui_init();
 2285              	 .loc 9 113 5
 2286 0072 0C4B     	 ldr r3,.L162+40
 2287 0074 9847     	 blx r3
 2288              	.LVL99:
 2289              	.L161:
 114:main.c        ****     while(1) {
 115:main.c        ****         sleepmgr_enter_sleep();
 2290              	 .loc 9 115 9 discriminator 1
 2291 0076 0C4B     	 ldr r3,.L162+44
 2292 0078 9847     	 blx r3
 2293              	.LVL100:
 2294 007a FCE7     	 b .L161
 2295              	.L163:
 2296              	 .align 2
 2297              	.L162:
 2298 007c 00000000 	 .word flash_read_unique_id
 2299 0080 00000000 	 .word g_interrupt_enabled
 2300 0084 00000000 	 .word sleepmgr_init
 2301 0088 00000000 	 .word sysclk_init
 2302 008c 00000000 	 .word phywhisperer_setup_pins
 2303 0090 00000000 	 .word usb_serial_number
 2304 0094 00000000 	 .word .LC0
 2305 0098 00000000 	 .word sprintf
 2306 009c 00000000 	 .word genclk_enable_config
 2307 00a0 00000000 	 .word udc_start
 2308 00a4 00000000 	 .word ui_init
 2309 00a8 00000000 	 .word sleepmgr_enter_sleep
 2310              	 .cfi_endproc
 2311              	.LFE193:
 2313              	 .text
 2314              	.Letext0:
 2315              	 .file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 2316              	 .file 11 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 2317              	 .file 12 ".././hal/sam3u1c/inc/sam3u1c.h"
 2318              	 .file 13 ".././hal/sam3u1c/inc/core_cm3.h"
 2319              	 .file 14 ".././hal/sam3u1c/inc/system_sam3u.h"
 2320              	 .file 15 ".././hal/sam3u1c/inc/component/component_pio.h"
 2321              	 .file 16 ".././hal/sam3u1c/inc/component/component_pmc.h"
 2322              	 .file 17 ".././hal/sam3u1c/inc/component/component_smc.h"
 2323              	 .file 18 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 2324              	 .file 19 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 2325              	 .file 20 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 2326              	 .file 21 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 2327              	 .file 22 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 2328              	 .file 23 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 2329              	 .file 24 ".././hal/sam3u1c/inc/compiler.h"
 2330              	 .file 25 ".././hal/sam3u1c/inc/pio.h"
 2331              	 .file 26 "./conf_usb.h"
 2332              	 .file 27 ".././hal/sam3u1c/inc/usb_protocol.h"
 2333              	 .file 28 ".././hal/sam3u1c/inc/udi.h"
 2334              	 .file 29 ".././hal/sam3u1c/inc/udc_desc.h"
 2335              	 .file 30 ".././hal/sam3u1c/inc/udd.h"
 2336              	 .file 31 ".././hal/sam3u1c/inc/udi_vendor.h"
 2337              	 .file 32 ".././hal/sam3u1c/inc/stdio_serial.h"
 2338              	 .file 33 ".././hal/sam3u1c/inc/tasks.h"
 2339              	 .file 34 "usb_xmem.h"
 2340              	 .file 35 "fpga_program.h"
 2341              	 .file 36 ".././hal/sam3u1c/inc/usb.h"
 2342              	 .file 37 ".././hal/sam3u1c/inc/flash_efc.h"
 2343              	 .file 38 ".././hal/sam3u1c/inc/sam3u/sysclk.h"
 2344              	 .file 39 ".././hal/sam3u1c/inc/udc.h"
 2345              	 .file 40 ".././hal/sam3u1c/inc/ui.h"
 2346              	 .file 41 ".././hal/sam3u1c/inc/board.h"
 2347              	 .file 42 ".././hal/sam3u1c/inc/pmc.h"
 2348              	 .file 43 ".././hal/sam3u1c/inc/smc.h"
 2349              	 .file 44 ".././hal/sam3u1c/inc/sleep.h"
 2350              	 .file 45 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.osc_enable:00000000 $t
    {standard input}:34     .text.osc_enable:00000000 osc_enable
    {standard input}:60     .text.osc_enable:00000014 $d
    {standard input}:68     .text.osc_enable:00000034 $t
    {standard input}:142    .text.osc_enable:00000074 $d
    {standard input}:150    .text.osc_is_ready:00000000 $t
    {standard input}:156    .text.osc_is_ready:00000000 osc_is_ready
    {standard input}:181    .text.osc_is_ready:00000014 $d
    {standard input}:189    .text.osc_is_ready:00000034 $t
    {standard input}:247    .text.osc_is_ready:00000078 $d
    {standard input}:254    .text.osc_get_rate:00000000 $t
    {standard input}:260    .text.osc_get_rate:00000000 osc_get_rate
    {standard input}:285    .text.osc_get_rate:00000014 $d
    {standard input}:293    .text.osc_get_rate:00000034 $t
    {standard input}:347    .text.osc_get_rate:00000064 $d
    {standard input}:354    .text.osc_wait_ready:00000000 $t
    {standard input}:360    .text.osc_wait_ready:00000000 osc_wait_ready
    {standard input}:410    .text.osc_wait_ready:0000002c $d
    {standard input}:415    .text.pll_config_init:00000000 $t
    {standard input}:421    .text.pll_config_init:00000000 pll_config_init
    {standard input}:505    .text.pll_config_init:00000064 $d
    {standard input}:511    .text.pll_enable:00000000 $t
    {standard input}:517    .text.pll_enable:00000000 pll_enable
    {standard input}:579    .text.pll_enable:00000038 $d
    {standard input}:585    .text.pll_is_locked:00000000 $t
    {standard input}:591    .text.pll_is_locked:00000000 pll_is_locked
    {standard input}:639    .text.pll_is_locked:00000024 $d
    {standard input}:645    .text.pll_enable_source:00000000 $t
    {standard input}:651    .text.pll_enable_source:00000000 pll_enable_source
    {standard input}:706    .text.pll_enable_source:00000030 $d
    {standard input}:712    .text.pll_enable_config_defaults:00000000 $t
    {standard input}:718    .text.pll_enable_config_defaults:00000000 pll_enable_config_defaults
    {standard input}:849    .text.pll_enable_config_defaults:00000090 $d
    {standard input}:860    .text.sleepmgr_sleep:00000000 $t
    {standard input}:866    .text.sleepmgr_sleep:00000000 sleepmgr_sleep
    {standard input}:937    .text.sleepmgr_sleep:0000002c $d
    {standard input}:943    .text.sleepmgr_init:00000000 $t
    {standard input}:949    .text.sleepmgr_init:00000000 sleepmgr_init
    {standard input}:1009   .text.sleepmgr_init:00000030 $d
    {standard input}:1014   .text.sleepmgr_get_sleep_mode:00000000 $t
    {standard input}:1020   .text.sleepmgr_get_sleep_mode:00000000 sleepmgr_get_sleep_mode
    {standard input}:1080   .text.sleepmgr_get_sleep_mode:00000030 $d
    {standard input}:1085   .text.sleepmgr_enter_sleep:00000000 $t
    {standard input}:1091   .text.sleepmgr_enter_sleep:00000000 sleepmgr_enter_sleep
    {standard input}:1170   .text.sleepmgr_enter_sleep:00000034 $d
    {standard input}:1177   .text.genclk_config_defaults:00000000 $t
    {standard input}:1183   .text.genclk_config_defaults:00000000 genclk_config_defaults
    {standard input}:1225   .text.genclk_config_set_source:00000000 $t
    {standard input}:1231   .text.genclk_config_set_source:00000000 genclk_config_set_source
    {standard input}:1265   .text.genclk_config_set_source:00000024 $d
    {standard input}:1276   .text.genclk_config_set_source:00000050 $t
    {standard input}:1341   .text.genclk_config_set_divider:00000000 $t
    {standard input}:1347   .text.genclk_config_set_divider:00000000 genclk_config_set_divider
    {standard input}:1397   .text.genclk_enable:00000000 $t
    {standard input}:1403   .text.genclk_enable:00000000 genclk_enable
    {standard input}:1449   .text.genclk_enable:00000028 $d
    {standard input}:1455   .text.genclk_enable_source:00000000 $t
    {standard input}:1461   .text.genclk_enable_source:00000000 genclk_enable_source
    {standard input}:1488   .text.genclk_enable_source:00000018 $d
    {standard input}:1499   .text.genclk_enable_source:00000044 $t
    {standard input}:1766   .text.genclk_enable_source:00000180 $d
    {standard input}:1778   .data.usb_serial_number:00000000 usb_serial_number
    {standard input}:1775   .data.usb_serial_number:00000000 $d
    {standard input}:1782   .text.phywhisperer_setup_pins:00000000 $t
    {standard input}:1789   .text.phywhisperer_setup_pins:00000000 phywhisperer_setup_pins
    {standard input}:1990   .text.phywhisperer_setup_pins:00000104 $d
    {standard input}:2008   .text.hacky_delay:00000000 $t
    {standard input}:2015   .text.hacky_delay:00000000 hacky_delay
    {standard input}:2069   .text.hacky_delay:00000028 $d
    {standard input}:2074   .text.genclk_enable_config:00000000 $t
    {standard input}:2080   .text.genclk_enable_config:00000000 genclk_enable_config
    {standard input}:2149   .text.genclk_enable_config:00000050 $d
    {standard input}:2158   .rodata:00000000 $d
    {standard input}:2162   .text.main:00000000 $t
    {standard input}:2169   .text.main:00000000 main
    {standard input}:2298   .text.main:0000007c $d
                           .group:00000000 wm4.0.84f01b7600eb36308f16331d3d2e9779
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.48.3fc21f768e842120f151448a98046af0
                           .group:00000000 wm4.cw521.h.62.38d76eca36ece19cb9950be38af128c7
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.cycle_counter.h.44.fde38fb1acfd6555d72e65fae6e86af5
                           .group:00000000 wm4.delay.h.105.f2a8ab5e71eab0684cf6985b5c2fc9e8
                           .group:00000000 wm4.efc.h.45.ec5734119c630498df26106bacf9a684
                           .group:00000000 wm4.flash_efc.h.90.a4a39259055880dc10b861c5fe1b99e7
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.sam_gpio.h.50.76a45c51855d665134f8211cd601d693
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.smc.h.45.17a94aa976bb62b1109d03e8a314a569
                           .group:00000000 wm4.spi.h.45.712c66be09ffbac297c2e00923077297
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3
                           .group:00000000 wm4.twi.h.45.ba70de99d200dafba570ce8f7058737a
                           .group:00000000 wm4.twi_master.h.90.08c062d0fa8f8aeea342ceeb79263395
                           .group:00000000 wm4.twi_slave.h.45.8b3d1a3d2e43ebc7d0161f4142989871
                           .group:00000000 wm4.uart.h.45.a5af743b8064bd84d1a6438457096e18
                           .group:00000000 wm4.usart.h.46.eae6fe592b7ea0768efef8d312e7f44f
                           .group:00000000 wm4.conf_uart_serial.h.45.245cdceaa1a3811fd043bf660ce38054
                           .group:00000000 wm4.conf_usb.h.45.2f7207bed7467dcf9cb11fbc6ebe572c
                           .group:00000000 wm4.udi_vendor_conf.h.56.4348c8e521d040f44df868219dae6785
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.genclk.h.45.f7865052b40a907e4bab1a8f483a50e2
                           .group:00000000 wm4.usb_xmem.h.16.2bfdefafb315212fe60310212368ffbb
                           .group:00000000 wm4.fpga_program.h.36.190ebe3d8947892068b52cb69c85273d
                           .group:00000000 wm4.usb.h.20.f560de5b472e2e451b5cba954e5d0064
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd

UNDEFINED SYMBOLS
pmc_switch_sclk_to_32kxtal
pmc_osc_enable_fastrc
pmc_osc_enable_main_xtal
pmc_osc_bypass_main_xtal
pmc_osc_is_ready_32kxtal
pmc_osc_is_ready_fastrc
pmc_osc_is_ready_main_xtal
pmc_disable_pllack
pmc_is_locked_pllack
pmc_is_locked_upll
pmc_mainck_osc_select
pmc_osc_is_ready_mainck
pmc_osc_is_bypassed_main_xtal
g_interrupt_enabled
pmc_sleep
sleepmgr_locks
pmc_enable_pck
board_init
fpga_program_init
pmc_enable_periph_clk
pio_configure_pin
pio_configure_pin_group
pio_enable_output_write
smc_set_setup_timing
smc_set_pulse_timing
smc_set_cycle_timing
smc_set_mode
flash_read_unique_id
sysclk_init
sprintf
udc_start
ui_init
