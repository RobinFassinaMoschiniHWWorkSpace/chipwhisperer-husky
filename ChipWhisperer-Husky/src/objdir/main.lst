   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "main.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.osc_enable,"ax",%progbits
  27              	 .align 1
  28              	 .arch armv7-m
  29              	 .syntax unified
  30              	 .thumb
  31              	 .thumb_func
  32              	 .fpu softvfp
  34              	osc_enable:
  35              	.LFB69:
  36              	 .file 1 ".././hal/sam3u1c/inc/sam3u/osc.h"
   1:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \brief Chip-specific oscillator management functions.
   5:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  44:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/osc.h **** #define CHIP_OSC_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  47:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "board.h"
  48:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "pmc.h"
  49:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  50:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/sam3u/osc.h **** extern "C" {
  54:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  55:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @endcond
  57:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  58:.././hal/sam3u1c/inc/sam3u/osc.h **** /*
  59:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Below BOARD_XXX macros are related to the specific board, and
  60:.././hal/sam3u1c/inc/sam3u/osc.h ****  * should be defined by the board code, otherwise default value are used.
  61:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  62:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_XTAL)
  63:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock xtal frequency has not been defined.
  64:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_XTAL      (32768UL)
  65:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  66:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  67:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_BYPASS)
  68:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock bypass frequency has not been defined.
  69:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_BYPASS    (32768UL)
  70:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  71:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  72:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_XTAL)
  73:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal frequency has not been defined.
  74:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_XTAL    (12000000UL)
  75:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  76:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  77:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_BYPASS)
  78:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock bypass frequency has not been defined.
  79:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_BYPASS  (12000000UL)
  80:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  81:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  82:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_OSC_STARTUP_US)
  83:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal startup time has not been defined.
  84:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_OSC_STARTUP_US      (15625UL)
  85:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  86:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  87:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
  88:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \weakgroup osc_group
  89:.././hal/sam3u1c/inc/sam3u/osc.h ****  * @{
  90:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  91:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  92:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator identifiers
  93:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
  94:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC             0    //!< Internal 32kHz RC oscillator.
  95:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL           1    //!< External 32kHz crystal oscillator.
  96:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS         2    //!< External 32kHz bypass oscillator.
  97:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC            3    //!< Internal 4MHz RC oscillator.
  98:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC            4    //!< Internal 8MHz RC oscillator.
  99:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC           5    //!< Internal 12MHz RC oscillator.
 100:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL             6    //!< External crystal oscillator.
 101:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS           7    //!< External bypass oscillator.
 102:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 103:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 104:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator clock speed in hertz
 105:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
 106:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC_HZ          CHIP_FREQ_SLCK_RC               //!< Internal 32kHz RC oscillat
 107:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL_HZ        BOARD_FREQ_SLCK_XTAL            //!< External 32kHz crystal osc
 108:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS_HZ      BOARD_FREQ_SLCK_BYPASS          //!< External 32kHz bypass osci
 109:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC_HZ         CHIP_FREQ_MAINCK_RC_4MHZ        //!< Internal 4MHz RC oscillato
 110:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC_HZ         CHIP_FREQ_MAINCK_RC_8MHZ        //!< Internal 8MHz RC oscillato
 111:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC_HZ        CHIP_FREQ_MAINCK_RC_12MHZ       //!< Internal 12MHz RC oscillat
 112:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillato
 113:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator
 114:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 115:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 116:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_enable(uint32_t ul_id)
 117:.././hal/sam3u1c/inc/sam3u/osc.h **** {
  37              	 .loc 1 117 1
  38              	 .cfi_startproc
  39              	 
  40              	 
  41 0000 80B5     	 push {r7,lr}
  42              	.LCFI0:
  43              	 .cfi_def_cfa_offset 8
  44              	 .cfi_offset 7,-8
  45              	 .cfi_offset 14,-4
  46 0002 82B0     	 sub sp,sp,#8
  47              	.LCFI1:
  48              	 .cfi_def_cfa_offset 16
  49 0004 00AF     	 add r7,sp,#0
  50              	.LCFI2:
  51              	 .cfi_def_cfa_register 7
  52 0006 7860     	 str r0,[r7,#4]
  53 0008 7B68     	 ldr r3,[r7,#4]
  54 000a 072B     	 cmp r3,#7
  55 000c 2ED8     	 bhi .L12
  56 000e 01A2     	 adr r2,.L4
  57 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
  58              	 .p2align 2
  59              	.L4:
  60 0014 6B000000 	 .word .L13+1
  61 0018 35000000 	 .word .L10+1
  62 001c 3D000000 	 .word .L9+1
  63 0020 45000000 	 .word .L8+1
  64 0024 4D000000 	 .word .L7+1
  65 0028 55000000 	 .word .L6+1
  66 002c 5D000000 	 .word .L5+1
  67 0030 65000000 	 .word .L3+1
  68              	 .p2align 1
  69              	.L10:
 118:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 119:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 121:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 122:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 123:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  70              	 .loc 1 123 3
  71 0034 0020     	 movs r0,#0
  72 0036 0F4B     	 ldr r3,.L14
  73 0038 9847     	 blx r3
  74              	.LVL0:
 124:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  75              	 .loc 1 124 3
  76 003a 17E0     	 b .L2
  77              	.L9:
 125:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 127:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  78              	 .loc 1 127 3
  79 003c 0120     	 movs r0,#1
  80 003e 0D4B     	 ldr r3,.L14
  81 0040 9847     	 blx r3
  82              	.LVL1:
 128:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  83              	 .loc 1 128 3
  84 0042 13E0     	 b .L2
  85              	.L8:
 129:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 130:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 131:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 132:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  86              	 .loc 1 132 3
  87 0044 0020     	 movs r0,#0
  88 0046 0C4B     	 ldr r3,.L14+4
  89 0048 9847     	 blx r3
  90              	.LVL2:
 133:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  91              	 .loc 1 133 3
  92 004a 0FE0     	 b .L2
  93              	.L7:
 134:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 135:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 136:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  94              	 .loc 1 136 3
  95 004c 1020     	 movs r0,#16
  96 004e 0A4B     	 ldr r3,.L14+4
  97 0050 9847     	 blx r3
  98              	.LVL3:
 137:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  99              	 .loc 1 137 3
 100 0052 0BE0     	 b .L2
 101              	.L6:
 138:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 139:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 140:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
 102              	 .loc 1 140 3
 103 0054 2020     	 movs r0,#32
 104 0056 084B     	 ldr r3,.L14+4
 105 0058 9847     	 blx r3
 106              	.LVL4:
 141:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 107              	 .loc 1 141 3
 108 005a 07E0     	 b .L2
 109              	.L5:
 142:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 143:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 144:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 145:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
 110              	 .loc 1 145 3
 111 005c 3E20     	 movs r0,#62
 112 005e 074B     	 ldr r3,.L14+8
 113 0060 9847     	 blx r3
 114              	.LVL5:
 146:.././hal/sam3u1c/inc/sam3u/osc.h **** 				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
 147:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 115              	 .loc 1 147 3
 116 0062 03E0     	 b .L2
 117              	.L3:
 148:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 149:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 150:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_bypass_main_xtal();
 118              	 .loc 1 150 3
 119 0064 064B     	 ldr r3,.L14+12
 120 0066 9847     	 blx r3
 121              	.LVL6:
 151:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 122              	 .loc 1 151 3
 123 0068 00E0     	 b .L2
 124              	.L13:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 125              	 .loc 1 120 3
 126 006a 00BF     	 nop
 127              	.L2:
 128              	.L12:
 152:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 153:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 129              	 .loc 1 153 1
 130 006c 00BF     	 nop
 131 006e 0837     	 adds r7,r7,#8
 132              	.LCFI3:
 133              	 .cfi_def_cfa_offset 8
 134 0070 BD46     	 mov sp,r7
 135              	.LCFI4:
 136              	 .cfi_def_cfa_register 13
 137              	 
 138 0072 80BD     	 pop {r7,pc}
 139              	.L15:
 140              	 .align 2
 141              	.L14:
 142 0074 00000000 	 .word pmc_switch_sclk_to_32kxtal
 143 0078 00000000 	 .word pmc_osc_enable_fastrc
 144 007c 00000000 	 .word pmc_osc_enable_main_xtal
 145 0080 00000000 	 .word pmc_osc_bypass_main_xtal
 146              	 .cfi_endproc
 147              	.LFE69:
 149              	 .section .text.osc_is_ready,"ax",%progbits
 150              	 .align 1
 151              	 .syntax unified
 152              	 .thumb
 153              	 .thumb_func
 154              	 .fpu softvfp
 156              	osc_is_ready:
 157              	.LFB71:
 154:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 155:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_disable(uint32_t ul_id)
 156:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 157:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 158:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 159:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 160:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 161:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 162:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 163:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 164:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 165:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 166:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_fastrc();
 167:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 168:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 169:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 170:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_XTAL);
 171:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 172:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 173:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 174:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_BYPASS);
 175:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 176:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 177:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 178:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 179:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline bool osc_is_ready(uint32_t ul_id)
 180:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 158              	 .loc 1 180 1
 159              	 .cfi_startproc
 160              	 
 161              	 
 162 0000 80B5     	 push {r7,lr}
 163              	.LCFI5:
 164              	 .cfi_def_cfa_offset 8
 165              	 .cfi_offset 7,-8
 166              	 .cfi_offset 14,-4
 167 0002 82B0     	 sub sp,sp,#8
 168              	.LCFI6:
 169              	 .cfi_def_cfa_offset 16
 170 0004 00AF     	 add r7,sp,#0
 171              	.LCFI7:
 172              	 .cfi_def_cfa_register 7
 173 0006 7860     	 str r0,[r7,#4]
 174 0008 7B68     	 ldr r3,[r7,#4]
 175 000a 072B     	 cmp r3,#7
 176 000c 2FD8     	 bhi .L17
 177 000e 01A2     	 adr r2,.L19
 178 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 179              	 .p2align 2
 180              	.L19:
 181 0014 35000000 	 .word .L22+1
 182 0018 39000000 	 .word .L21+1
 183 001c 39000000 	 .word .L21+1
 184 0020 4B000000 	 .word .L20+1
 185 0024 4B000000 	 .word .L20+1
 186 0028 4B000000 	 .word .L20+1
 187 002c 5D000000 	 .word .L18+1
 188 0030 5D000000 	 .word .L18+1
 189              	 .p2align 1
 190              	.L22:
 181:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 182:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 183:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return 1;
 191              	 .loc 1 183 10
 192 0034 0123     	 movs r3,#1
 193 0036 1BE0     	 b .L23
 194              	.L21:
 184:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 185:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 186:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 187:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_32kxtal();
 195              	 .loc 1 187 10
 196 0038 0F4B     	 ldr r3,.L24
 197 003a 9847     	 blx r3
 198              	.LVL7:
 199 003c 0346     	 mov r3,r0
 200 003e 002B     	 cmp r3,#0
 201 0040 14BF     	 ite ne
 202 0042 0123     	 movne r3,#1
 203 0044 0023     	 moveq r3,#0
 204 0046 DBB2     	 uxtb r3,r3
 205 0048 12E0     	 b .L23
 206              	.L20:
 188:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 189:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 190:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 191:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 192:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_fastrc();
 207              	 .loc 1 192 10
 208 004a 0C4B     	 ldr r3,.L24+4
 209 004c 9847     	 blx r3
 210              	.LVL8:
 211 004e 0346     	 mov r3,r0
 212 0050 002B     	 cmp r3,#0
 213 0052 14BF     	 ite ne
 214 0054 0123     	 movne r3,#1
 215 0056 0023     	 moveq r3,#0
 216 0058 DBB2     	 uxtb r3,r3
 217 005a 09E0     	 b .L23
 218              	.L18:
 193:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 194:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 195:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 196:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_main_xtal();
 219              	 .loc 1 196 10
 220 005c 084B     	 ldr r3,.L24+8
 221 005e 9847     	 blx r3
 222              	.LVL9:
 223 0060 0346     	 mov r3,r0
 224 0062 002B     	 cmp r3,#0
 225 0064 14BF     	 ite ne
 226 0066 0123     	 movne r3,#1
 227 0068 0023     	 moveq r3,#0
 228 006a DBB2     	 uxtb r3,r3
 229 006c 00E0     	 b .L23
 230              	.L17:
 197:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 198:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 199:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 231              	 .loc 1 199 9
 232 006e 0023     	 movs r3,#0
 233              	.L23:
 200:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 234              	 .loc 1 200 1
 235 0070 1846     	 mov r0,r3
 236 0072 0837     	 adds r7,r7,#8
 237              	.LCFI8:
 238              	 .cfi_def_cfa_offset 8
 239 0074 BD46     	 mov sp,r7
 240              	.LCFI9:
 241              	 .cfi_def_cfa_register 13
 242              	 
 243 0076 80BD     	 pop {r7,pc}
 244              	.L25:
 245              	 .align 2
 246              	.L24:
 247 0078 00000000 	 .word pmc_osc_is_ready_32kxtal
 248 007c 00000000 	 .word pmc_osc_is_ready_fastrc
 249 0080 00000000 	 .word pmc_osc_is_ready_main_xtal
 250              	 .cfi_endproc
 251              	.LFE71:
 253              	 .section .text.osc_get_rate,"ax",%progbits
 254              	 .align 1
 255              	 .syntax unified
 256              	 .thumb
 257              	 .thumb_func
 258              	 .fpu softvfp
 260              	osc_get_rate:
 261              	.LFB72:
 201:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 202:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline uint32_t osc_get_rate(uint32_t ul_id)
 203:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 262              	 .loc 1 203 1
 263              	 .cfi_startproc
 264              	 
 265              	 
 266              	 
 267 0000 80B4     	 push {r7}
 268              	.LCFI10:
 269              	 .cfi_def_cfa_offset 4
 270              	 .cfi_offset 7,-4
 271 0002 83B0     	 sub sp,sp,#12
 272              	.LCFI11:
 273              	 .cfi_def_cfa_offset 16
 274 0004 00AF     	 add r7,sp,#0
 275              	.LCFI12:
 276              	 .cfi_def_cfa_register 7
 277 0006 7860     	 str r0,[r7,#4]
 278 0008 7B68     	 ldr r3,[r7,#4]
 279 000a 072B     	 cmp r3,#7
 280 000c 23D8     	 bhi .L27
 281 000e 01A2     	 adr r2,.L29
 282 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 283              	 .p2align 2
 284              	.L29:
 285 0014 35000000 	 .word .L36+1
 286 0018 3B000000 	 .word .L35+1
 287 001c 3F000000 	 .word .L34+1
 288 0020 43000000 	 .word .L33+1
 289 0024 47000000 	 .word .L32+1
 290 0028 4B000000 	 .word .L31+1
 291 002c 4F000000 	 .word .L30+1
 292 0030 53000000 	 .word .L28+1
 293              	 .p2align 1
 294              	.L36:
 204:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 205:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 206:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_SLCK_32K_RC_HZ;
 295              	 .loc 1 206 10
 296 0034 4FF4FA43 	 mov r3,#32000
 297 0038 0EE0     	 b .L37
 298              	.L35:
 207:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 208:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 209:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_XTAL;
 299              	 .loc 1 209 10
 300 003a 0023     	 movs r3,#0
 301 003c 0CE0     	 b .L37
 302              	.L34:
 210:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 211:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 212:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_BYPASS;
 303              	 .loc 1 212 10
 304 003e 0023     	 movs r3,#0
 305 0040 0AE0     	 b .L37
 306              	.L33:
 213:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 214:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 215:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_4M_RC_HZ;
 307              	 .loc 1 215 10
 308 0042 084B     	 ldr r3,.L38
 309 0044 08E0     	 b .L37
 310              	.L32:
 216:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 217:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 218:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_8M_RC_HZ;
 311              	 .loc 1 218 10
 312 0046 084B     	 ldr r3,.L38+4
 313 0048 06E0     	 b .L37
 314              	.L31:
 219:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 220:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 221:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_12M_RC_HZ;
 315              	 .loc 1 221 10
 316 004a 084B     	 ldr r3,.L38+8
 317 004c 04E0     	 b .L37
 318              	.L30:
 222:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 223:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 224:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_XTAL;
 319              	 .loc 1 224 10
 320 004e 074B     	 ldr r3,.L38+8
 321 0050 02E0     	 b .L37
 322              	.L28:
 225:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 226:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 227:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_BYPASS;
 323              	 .loc 1 227 10
 324 0052 064B     	 ldr r3,.L38+8
 325 0054 00E0     	 b .L37
 326              	.L27:
 228:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 229:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 230:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 327              	 .loc 1 230 9
 328 0056 0023     	 movs r3,#0
 329              	.L37:
 231:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 330              	 .loc 1 231 1
 331 0058 1846     	 mov r0,r3
 332 005a 0C37     	 adds r7,r7,#12
 333              	.LCFI13:
 334              	 .cfi_def_cfa_offset 4
 335 005c BD46     	 mov sp,r7
 336              	.LCFI14:
 337              	 .cfi_def_cfa_register 13
 338              	 
 339 005e 80BC     	 pop {r7}
 340              	.LCFI15:
 341              	 .cfi_restore 7
 342              	 .cfi_def_cfa_offset 0
 343 0060 7047     	 bx lr
 344              	.L39:
 345 0062 00BF     	 .align 2
 346              	.L38:
 347 0064 00093D00 	 .word 4000000
 348 0068 00127A00 	 .word 8000000
 349 006c 001BB700 	 .word 12000000
 350              	 .cfi_endproc
 351              	.LFE72:
 353              	 .section .text.osc_wait_ready,"ax",%progbits
 354              	 .align 1
 355              	 .syntax unified
 356              	 .thumb
 357              	 .thumb_func
 358              	 .fpu softvfp
 360              	osc_wait_ready:
 361              	.LFB73:
 362              	 .file 2 ".././hal/sam3u1c/inc/osc.h"
   1:.././hal/sam3u1c/inc/osc.h **** /**
   2:.././hal/sam3u1c/inc/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/osc.h ****  *
   4:.././hal/sam3u1c/inc/osc.h ****  * \brief Oscillator management
   5:.././hal/sam3u1c/inc/osc.h ****  *
   6:.././hal/sam3u1c/inc/osc.h ****  * Copyright (c) 2010-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/osc.h ****  *
   8:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/osc.h ****  *
  10:.././hal/sam3u1c/inc/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/osc.h ****  *
  12:.././hal/sam3u1c/inc/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/osc.h ****  *
  15:.././hal/sam3u1c/inc/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/osc.h ****  *
  18:.././hal/sam3u1c/inc/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/osc.h ****  *
  22:.././hal/sam3u1c/inc/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/osc.h ****  *
  25:.././hal/sam3u1c/inc/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/osc.h ****  *
  28:.././hal/sam3u1c/inc/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/osc.h ****  *
  40:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/osc.h ****  *
  42:.././hal/sam3u1c/inc/osc.h ****  */
  43:.././hal/sam3u1c/inc/osc.h **** #ifndef OSC_H_INCLUDED
  44:.././hal/sam3u1c/inc/osc.h **** #define OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/osc.h **** 
  46:.././hal/sam3u1c/inc/osc.h **** #include "parts.h"
  47:.././hal/sam3u1c/inc/osc.h **** #include "conf_clock.h"
  48:.././hal/sam3u1c/inc/osc.h **** 
  49:.././hal/sam3u1c/inc/osc.h **** #if SAM3S
  50:.././hal/sam3u1c/inc/osc.h **** # include "sam3s/osc.h"
  51:.././hal/sam3u1c/inc/osc.h **** #elif SAM3XA
  52:.././hal/sam3u1c/inc/osc.h **** # include "sam3x/osc.h"
  53:.././hal/sam3u1c/inc/osc.h **** #elif SAM3U
  54:.././hal/sam3u1c/inc/osc.h **** # include "sam3u/osc.h"
  55:.././hal/sam3u1c/inc/osc.h **** #elif SAM3N
  56:.././hal/sam3u1c/inc/osc.h **** # include "sam3n/osc.h"
  57:.././hal/sam3u1c/inc/osc.h **** #elif SAM4S
  58:.././hal/sam3u1c/inc/osc.h **** # include "sam4s/osc.h"
  59:.././hal/sam3u1c/inc/osc.h **** #elif SAM4E
  60:.././hal/sam3u1c/inc/osc.h **** # include "sam4e/osc.h"
  61:.././hal/sam3u1c/inc/osc.h **** #elif SAM4C
  62:.././hal/sam3u1c/inc/osc.h **** # include "sam4c/osc.h"
  63:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CM
  64:.././hal/sam3u1c/inc/osc.h **** # include "sam4cm/osc.h"
  65:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CP
  66:.././hal/sam3u1c/inc/osc.h **** # include "sam4cp/osc.h"
  67:.././hal/sam3u1c/inc/osc.h **** #elif SAM4L
  68:.././hal/sam3u1c/inc/osc.h **** # include "sam4l/osc.h"
  69:.././hal/sam3u1c/inc/osc.h **** #elif SAM4N
  70:.././hal/sam3u1c/inc/osc.h **** # include "sam4n/osc.h"
  71:.././hal/sam3u1c/inc/osc.h **** #elif SAMG
  72:.././hal/sam3u1c/inc/osc.h **** # include "samg/osc.h"
  73:.././hal/sam3u1c/inc/osc.h **** #elif (UC3A0 || UC3A1)
  74:.././hal/sam3u1c/inc/osc.h **** # include "uc3a0_a1/osc.h"
  75:.././hal/sam3u1c/inc/osc.h **** #elif UC3A3
  76:.././hal/sam3u1c/inc/osc.h **** # include "uc3a3_a4/osc.h"
  77:.././hal/sam3u1c/inc/osc.h **** #elif UC3B
  78:.././hal/sam3u1c/inc/osc.h **** # include "uc3b0_b1/osc.h"
  79:.././hal/sam3u1c/inc/osc.h **** #elif UC3C
  80:.././hal/sam3u1c/inc/osc.h **** # include "uc3c/osc.h"
  81:.././hal/sam3u1c/inc/osc.h **** #elif UC3D
  82:.././hal/sam3u1c/inc/osc.h **** # include "uc3d/osc.h"
  83:.././hal/sam3u1c/inc/osc.h **** #elif UC3L
  84:.././hal/sam3u1c/inc/osc.h **** # include "uc3l/osc.h"
  85:.././hal/sam3u1c/inc/osc.h **** #elif XMEGA
  86:.././hal/sam3u1c/inc/osc.h **** # include "xmega/osc.h"
  87:.././hal/sam3u1c/inc/osc.h **** #else
  88:.././hal/sam3u1c/inc/osc.h **** # error Unsupported chip type
  89:.././hal/sam3u1c/inc/osc.h **** #endif
  90:.././hal/sam3u1c/inc/osc.h **** 
  91:.././hal/sam3u1c/inc/osc.h **** /**
  92:.././hal/sam3u1c/inc/osc.h ****  * \ingroup clk_group
  93:.././hal/sam3u1c/inc/osc.h ****  * \defgroup osc_group Oscillator Management
  94:.././hal/sam3u1c/inc/osc.h ****  *
  95:.././hal/sam3u1c/inc/osc.h ****  * This group contains functions and definitions related to configuring
  96:.././hal/sam3u1c/inc/osc.h ****  * and enabling/disabling on-chip oscillators. Internal RC-oscillators,
  97:.././hal/sam3u1c/inc/osc.h ****  * external crystal oscillators and external clock generators are
  98:.././hal/sam3u1c/inc/osc.h ****  * supported by this module. What all of these have in common is that
  99:.././hal/sam3u1c/inc/osc.h ****  * they swing at a fixed, nominal frequency which is normally not
 100:.././hal/sam3u1c/inc/osc.h ****  * adjustable.
 101:.././hal/sam3u1c/inc/osc.h ****  *
 102:.././hal/sam3u1c/inc/osc.h ****  * \par Example: Enabling an oscillator
 103:.././hal/sam3u1c/inc/osc.h ****  *
 104:.././hal/sam3u1c/inc/osc.h ****  * The following example demonstrates how to enable the external
 105:.././hal/sam3u1c/inc/osc.h ****  * oscillator on XMEGA A and wait for it to be ready to use. The
 106:.././hal/sam3u1c/inc/osc.h ****  * oscillator identifiers are platform-specific, so while the same
 107:.././hal/sam3u1c/inc/osc.h ****  * procedure is used on all platforms, the parameter to osc_enable()
 108:.././hal/sam3u1c/inc/osc.h ****  * will be different from device to device.
 109:.././hal/sam3u1c/inc/osc.h ****  * \code
 110:.././hal/sam3u1c/inc/osc.h **** 	osc_enable(OSC_ID_XOSC);
 111:.././hal/sam3u1c/inc/osc.h **** 	osc_wait_ready(OSC_ID_XOSC); \endcode
 112:.././hal/sam3u1c/inc/osc.h ****  *
 113:.././hal/sam3u1c/inc/osc.h ****  * \section osc_group_board Board-specific Definitions
 114:.././hal/sam3u1c/inc/osc.h ****  * If external oscillators are used, the board code must provide the
 115:.././hal/sam3u1c/inc/osc.h ****  * following definitions for each of those:
 116:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_HZ: The nominal frequency of the oscillator.
 117:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_STARTUP_US: The startup time of the
 118:.././hal/sam3u1c/inc/osc.h ****  *     oscillator in microseconds.
 119:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_TYPE: The type of oscillator connected, i.e.
 120:.././hal/sam3u1c/inc/osc.h ****  *     whether it's a crystal or external clock, and sometimes what kind
 121:.././hal/sam3u1c/inc/osc.h ****  *     of crystal it is. The meaning of this value is platform-specific.
 122:.././hal/sam3u1c/inc/osc.h ****  *
 123:.././hal/sam3u1c/inc/osc.h ****  * @{
 124:.././hal/sam3u1c/inc/osc.h ****  */
 125:.././hal/sam3u1c/inc/osc.h **** 
 126:.././hal/sam3u1c/inc/osc.h **** //! \name Oscillator Management
 127:.././hal/sam3u1c/inc/osc.h **** //@{
 128:.././hal/sam3u1c/inc/osc.h **** /**
 129:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_enable(uint8_t id)
 130:.././hal/sam3u1c/inc/osc.h ****  * \brief Enable oscillator \a id
 131:.././hal/sam3u1c/inc/osc.h ****  *
 132:.././hal/sam3u1c/inc/osc.h ****  * The startup time and mode value is automatically determined based on
 133:.././hal/sam3u1c/inc/osc.h ****  * definitions in the board code.
 134:.././hal/sam3u1c/inc/osc.h ****  */
 135:.././hal/sam3u1c/inc/osc.h **** /**
 136:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_disable(uint8_t id)
 137:.././hal/sam3u1c/inc/osc.h ****  * \brief Disable oscillator \a id
 138:.././hal/sam3u1c/inc/osc.h ****  */
 139:.././hal/sam3u1c/inc/osc.h **** /**
 140:.././hal/sam3u1c/inc/osc.h ****  * \fn osc_is_ready(uint8_t id)
 141:.././hal/sam3u1c/inc/osc.h ****  * \brief Determine whether oscillator \a id is ready.
 142:.././hal/sam3u1c/inc/osc.h ****  * \retval true Oscillator \a id is running and ready to use as a clock
 143:.././hal/sam3u1c/inc/osc.h ****  * source.
 144:.././hal/sam3u1c/inc/osc.h ****  * \retval false Oscillator \a id is not running.
 145:.././hal/sam3u1c/inc/osc.h ****  */
 146:.././hal/sam3u1c/inc/osc.h **** /**
 147:.././hal/sam3u1c/inc/osc.h ****  * \fn uint32_t osc_get_rate(uint8_t id)
 148:.././hal/sam3u1c/inc/osc.h ****  * \brief Return the frequency of oscillator \a id in Hz
 149:.././hal/sam3u1c/inc/osc.h ****  */
 150:.././hal/sam3u1c/inc/osc.h **** 
 151:.././hal/sam3u1c/inc/osc.h **** #ifndef __ASSEMBLY__
 152:.././hal/sam3u1c/inc/osc.h **** 
 153:.././hal/sam3u1c/inc/osc.h **** /**
 154:.././hal/sam3u1c/inc/osc.h ****  * \brief Wait until the oscillator identified by \a id is ready
 155:.././hal/sam3u1c/inc/osc.h ****  *
 156:.././hal/sam3u1c/inc/osc.h ****  * This function will busy-wait for the oscillator identified by \a id
 157:.././hal/sam3u1c/inc/osc.h ****  * to become stable and ready to use as a clock source.
 158:.././hal/sam3u1c/inc/osc.h ****  *
 159:.././hal/sam3u1c/inc/osc.h ****  * \param id A number identifying the oscillator to wait for.
 160:.././hal/sam3u1c/inc/osc.h ****  */
 161:.././hal/sam3u1c/inc/osc.h **** static inline void osc_wait_ready(uint8_t id)
 162:.././hal/sam3u1c/inc/osc.h **** {
 363              	 .loc 2 162 1
 364              	 .cfi_startproc
 365              	 
 366              	 
 367 0000 80B5     	 push {r7,lr}
 368              	.LCFI16:
 369              	 .cfi_def_cfa_offset 8
 370              	 .cfi_offset 7,-8
 371              	 .cfi_offset 14,-4
 372 0002 82B0     	 sub sp,sp,#8
 373              	.LCFI17:
 374              	 .cfi_def_cfa_offset 16
 375 0004 00AF     	 add r7,sp,#0
 376              	.LCFI18:
 377              	 .cfi_def_cfa_register 7
 378 0006 0346     	 mov r3,r0
 379 0008 FB71     	 strb r3,[r7,#7]
 163:.././hal/sam3u1c/inc/osc.h **** 	while (!osc_is_ready(id)) {
 380              	 .loc 2 163 8
 381 000a 00BF     	 nop
 382              	.L41:
 383              	 .loc 2 163 10 discriminator 1
 384 000c FB79     	 ldrb r3,[r7,#7]
 385 000e 1846     	 mov r0,r3
 386 0010 064B     	 ldr r3,.L42
 387 0012 9847     	 blx r3
 388              	.LVL10:
 389 0014 0346     	 mov r3,r0
 390              	 .loc 2 163 9 discriminator 1
 391 0016 83F00103 	 eor r3,r3,#1
 392 001a DBB2     	 uxtb r3,r3
 393              	 .loc 2 163 8 discriminator 1
 394 001c 002B     	 cmp r3,#0
 395 001e F5D1     	 bne .L41
 164:.././hal/sam3u1c/inc/osc.h **** 		/* Do nothing */
 165:.././hal/sam3u1c/inc/osc.h **** 	}
 166:.././hal/sam3u1c/inc/osc.h **** }
 396              	 .loc 2 166 1
 397 0020 00BF     	 nop
 398 0022 00BF     	 nop
 399 0024 0837     	 adds r7,r7,#8
 400              	.LCFI19:
 401              	 .cfi_def_cfa_offset 8
 402 0026 BD46     	 mov sp,r7
 403              	.LCFI20:
 404              	 .cfi_def_cfa_register 13
 405              	 
 406 0028 80BD     	 pop {r7,pc}
 407              	.L43:
 408 002a 00BF     	 .align 2
 409              	.L42:
 410 002c 00000000 	 .word osc_is_ready
 411              	 .cfi_endproc
 412              	.LFE73:
 414              	 .section .text.pll_config_init,"ax",%progbits
 415              	 .align 1
 416              	 .syntax unified
 417              	 .thumb
 418              	 .thumb_func
 419              	 .fpu softvfp
 421              	pll_config_init:
 422              	.LFB74:
 423              	 .file 3 ".././hal/sam3u1c/inc/sam3u/pll.h"
   1:.././hal/sam3u1c/inc/sam3u/pll.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \brief Chip-specific PLL definitions.
   5:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/pll.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/pll.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/pll.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/pll.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/pll.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/pll.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/pll.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/pll.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/pll.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/pll.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/pll.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/pll.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/pll.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/pll.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/pll.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/pll.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/pll.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/pll.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/pll.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/pll.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/pll.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  44:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifndef CHIP_PLL_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/pll.h **** #define CHIP_PLL_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  47:.././hal/sam3u1c/inc/sam3u/pll.h **** #include <osc.h>
  48:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  49:.././hal/sam3u1c/inc/sam3u/pll.h **** /// @cond 0
  50:.././hal/sam3u1c/inc/sam3u/pll.h **** /**INDENT-OFF**/
  51:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef __cplusplus
  52:.././hal/sam3u1c/inc/sam3u/pll.h **** extern "C" {
  53:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
  54:.././hal/sam3u1c/inc/sam3u/pll.h **** /**INDENT-ON**/
  55:.././hal/sam3u1c/inc/sam3u/pll.h **** /// @endcond
  56:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  57:.././hal/sam3u1c/inc/sam3u/pll.h **** /**
  58:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \weakgroup pll_group
  59:.././hal/sam3u1c/inc/sam3u/pll.h ****  * @{
  60:.././hal/sam3u1c/inc/sam3u/pll.h ****  */
  61:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  62:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_OUTPUT_MIN_HZ   96000000
  63:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_OUTPUT_MAX_HZ   192000000
  64:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  65:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_INPUT_MIN_HZ    8000000
  66:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_INPUT_MAX_HZ    16000000
  67:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  68:.././hal/sam3u1c/inc/sam3u/pll.h **** #define NR_PLLS             2
  69:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLLA_ID             0
  70:.././hal/sam3u1c/inc/sam3u/pll.h **** #define UPLL_ID             1   //!< USB UTMI PLL.
  71:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  72:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_UPLL_HZ         480000000
  73:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  74:.././hal/sam3u1c/inc/sam3u/pll.h **** #define PLL_COUNT           0x3fU
  75:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  76:.././hal/sam3u1c/inc/sam3u/pll.h **** enum pll_source {
  77:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_4M_RC  = OSC_MAINCK_4M_RC,     //!< Internal 4MHz RC oscillator.
  78:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_8M_RC  = OSC_MAINCK_8M_RC,     //!< Internal 8MHz RC oscillator.
  79:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_12M_RC = OSC_MAINCK_12M_RC,    //!< Internal 12MHz RC oscillator.
  80:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_XTAL   = OSC_MAINCK_XTAL,      //!< External crystal oscillator.
  81:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_SRC_MAINCK_BYPASS = OSC_MAINCK_BYPASS,    //!< External bypass oscillator.
  82:.././hal/sam3u1c/inc/sam3u/pll.h **** 	PLL_NR_SOURCES,                               //!< Number of PLL sources.
  83:.././hal/sam3u1c/inc/sam3u/pll.h **** };
  84:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  85:.././hal/sam3u1c/inc/sam3u/pll.h **** struct pll_config {
  86:.././hal/sam3u1c/inc/sam3u/pll.h **** 	uint32_t ctrl;
  87:.././hal/sam3u1c/inc/sam3u/pll.h **** };
  88:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  89:.././hal/sam3u1c/inc/sam3u/pll.h **** #define pll_get_default_rate(pll_id)                                       \
  90:.././hal/sam3u1c/inc/sam3u/pll.h **** 	((osc_get_rate(CONFIG_PLL##pll_id##_SOURCE)                        \
  91:.././hal/sam3u1c/inc/sam3u/pll.h **** 			* CONFIG_PLL##pll_id##_MUL)                        \
  92:.././hal/sam3u1c/inc/sam3u/pll.h **** 			/ CONFIG_PLL##pll_id##_DIV)
  93:.././hal/sam3u1c/inc/sam3u/pll.h **** 
  94:.././hal/sam3u1c/inc/sam3u/pll.h **** /* Force UTMI PLL parameters (Hardware defined) */
  95:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL1_SOURCE
  96:.././hal/sam3u1c/inc/sam3u/pll.h **** # undef CONFIG_PLL1_SOURCE
  97:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
  98:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL1_MUL
  99:.././hal/sam3u1c/inc/sam3u/pll.h **** # undef CONFIG_PLL1_MUL
 100:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 101:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL1_DIV
 102:.././hal/sam3u1c/inc/sam3u/pll.h **** # undef CONFIG_PLL1_DIV
 103:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 104:.././hal/sam3u1c/inc/sam3u/pll.h **** #define CONFIG_PLL1_SOURCE  PLL_SRC_MAINCK_XTAL
 105:.././hal/sam3u1c/inc/sam3u/pll.h **** #define CONFIG_PLL1_MUL     0
 106:.././hal/sam3u1c/inc/sam3u/pll.h **** #define CONFIG_PLL1_DIV     0
 107:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 108:.././hal/sam3u1c/inc/sam3u/pll.h **** /**
 109:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \note The SAM3U PLL hardware interprets mul as mul+1. For readability the
 110:.././hal/sam3u1c/inc/sam3u/pll.h ****  *       hardware mul+1 is hidden in this implementation. Use mul as mul
 111:.././hal/sam3u1c/inc/sam3u/pll.h ****  *       effective value.
 112:.././hal/sam3u1c/inc/sam3u/pll.h ****  */
 113:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_config_init(struct pll_config *p_cfg,
 114:.././hal/sam3u1c/inc/sam3u/pll.h **** 		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
 115:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 424              	 .loc 3 115 1
 425              	 .cfi_startproc
 426              	 
 427              	 
 428 0000 80B5     	 push {r7,lr}
 429              	.LCFI21:
 430              	 .cfi_def_cfa_offset 8
 431              	 .cfi_offset 7,-8
 432              	 .cfi_offset 14,-4
 433 0002 86B0     	 sub sp,sp,#24
 434              	.LCFI22:
 435              	 .cfi_def_cfa_offset 32
 436 0004 00AF     	 add r7,sp,#0
 437              	.LCFI23:
 438              	 .cfi_def_cfa_register 7
 439 0006 F860     	 str r0,[r7,#12]
 440 0008 7A60     	 str r2,[r7,#4]
 441 000a 3B60     	 str r3,[r7]
 442 000c 0B46     	 mov r3,r1
 443 000e FB72     	 strb r3,[r7,#11]
 116:.././hal/sam3u1c/inc/sam3u/pll.h **** 	uint32_t vco_hz;
 117:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 118:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(e_src < PLL_NR_SOURCES);
 119:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 120:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
 444              	 .loc 3 120 5
 445 0010 7B68     	 ldr r3,[r7,#4]
 446 0012 002B     	 cmp r3,#0
 447 0014 07D1     	 bne .L45
 448              	 .loc 3 120 18 discriminator 1
 449 0016 3B68     	 ldr r3,[r7]
 450 0018 002B     	 cmp r3,#0
 451 001a 04D1     	 bne .L45
 121:.././hal/sam3u1c/inc/sam3u/pll.h **** 		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
 452              	 .loc 3 121 15
 453 001c FB68     	 ldr r3,[r7,#12]
 454 001e 4FF47002 	 mov r2,#15728640
 455 0022 1A60     	 str r2,[r3]
 456 0024 1AE0     	 b .L46
 457              	.L45:
 122:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else { /* PLLA */
 123:.././hal/sam3u1c/inc/sam3u/pll.h **** 		/* Calculate internal VCO frequency */
 124:.././hal/sam3u1c/inc/sam3u/pll.h **** 		vco_hz = osc_get_rate(e_src) / ul_div;
 458              	 .loc 3 124 12
 459 0026 FB7A     	 ldrb r3,[r7,#11]
 460 0028 1846     	 mov r0,r3
 461 002a 0E4B     	 ldr r3,.L47
 462 002c 9847     	 blx r3
 463              	.LVL11:
 464 002e 0246     	 mov r2,r0
 465              	 .loc 3 124 10
 466 0030 7B68     	 ldr r3,[r7,#4]
 467 0032 B2FBF3F3 	 udiv r3,r2,r3
 468 0036 7B61     	 str r3,[r7,#20]
 125:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
 126:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
 127:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 128:.././hal/sam3u1c/inc/sam3u/pll.h **** 		vco_hz *= ul_mul;
 469              	 .loc 3 128 10
 470 0038 7B69     	 ldr r3,[r7,#20]
 471 003a 3A68     	 ldr r2,[r7]
 472 003c 02FB03F3 	 mul r3,r2,r3
 473 0040 7B61     	 str r3,[r7,#20]
 129:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
 130:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
 131:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 132:.././hal/sam3u1c/inc/sam3u/pll.h **** 		/* PMC hardware will automatically make it mul+1 */
 133:.././hal/sam3u1c/inc/sam3u/pll.h **** 		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
 474              	 .loc 3 133 17
 475 0042 3B68     	 ldr r3,[r7]
 476 0044 013B     	 subs r3,r3,#1
 477 0046 1A04     	 lsls r2,r3,#16
 478 0048 074B     	 ldr r3,.L47+4
 479 004a 1340     	 ands r3,r3,r2
 134:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CKGR_PLLAR_DIVA(ul_div) |
 480              	 .loc 3 134 4
 481 004c 7A68     	 ldr r2,[r7,#4]
 482 004e D2B2     	 uxtb r2,r2
 133:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CKGR_PLLAR_DIVA(ul_div) |
 483              	 .loc 3 133 45
 484 0050 1343     	 orrs r3,r3,r2
 485              	 .loc 3 134 28
 486 0052 43F47C52 	 orr r2,r3,#16128
 133:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CKGR_PLLAR_DIVA(ul_div) |
 487              	 .loc 3 133 15
 488 0056 FB68     	 ldr r3,[r7,#12]
 489 0058 1A60     	 str r2,[r3]
 135:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
 136:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 137:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 490              	 .loc 3 137 1
 491 005a 00BF     	 nop
 492              	.L46:
 493 005c 00BF     	 nop
 494 005e 1837     	 adds r7,r7,#24
 495              	.LCFI24:
 496              	 .cfi_def_cfa_offset 8
 497 0060 BD46     	 mov sp,r7
 498              	.LCFI25:
 499              	 .cfi_def_cfa_register 13
 500              	 
 501 0062 80BD     	 pop {r7,pc}
 502              	.L48:
 503              	 .align 2
 504              	.L47:
 505 0064 00000000 	 .word osc_get_rate
 506 0068 0000FF07 	 .word 134152192
 507              	 .cfi_endproc
 508              	.LFE74:
 510              	 .section .text.pll_enable,"ax",%progbits
 511              	 .align 1
 512              	 .syntax unified
 513              	 .thumb
 514              	 .thumb_func
 515              	 .fpu softvfp
 517              	pll_enable:
 518              	.LFB77:
 138:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 139:.././hal/sam3u1c/inc/sam3u/pll.h **** #define pll_config_defaults(cfg, pll_id)                                   \
 140:.././hal/sam3u1c/inc/sam3u/pll.h **** 	pll_config_init(cfg,                                               \
 141:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CONFIG_PLL##pll_id##_SOURCE,                       \
 142:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CONFIG_PLL##pll_id##_DIV,                          \
 143:.././hal/sam3u1c/inc/sam3u/pll.h **** 			CONFIG_PLL##pll_id##_MUL)
 144:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 145:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_config_read(struct pll_config *p_cfg, uint32_t ul_pll_id)
 146:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 147:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 148:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 149:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 150:.././hal/sam3u1c/inc/sam3u/pll.h **** 		p_cfg->ctrl = PMC->CKGR_PLLAR;
 151:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 152:.././hal/sam3u1c/inc/sam3u/pll.h **** 		p_cfg->ctrl = PMC->CKGR_UCKR;
 153:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 154:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 155:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 156:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_config_write(const struct pll_config *p_cfg,
 157:.././hal/sam3u1c/inc/sam3u/pll.h **** 		uint32_t ul_pll_id)
 158:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 159:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 160:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 161:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 162:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pmc_disable_pllack(); // Always stop PLL first!
 163:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
 164:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 165:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_UCKR = p_cfg->ctrl;
 166:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 167:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 168:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 169:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_enable(const struct pll_config *p_cfg,
 170:.././hal/sam3u1c/inc/sam3u/pll.h **** 		uint32_t ul_pll_id)
 171:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 519              	 .loc 3 171 1
 520              	 .cfi_startproc
 521              	 
 522              	 
 523 0000 80B5     	 push {r7,lr}
 524              	.LCFI26:
 525              	 .cfi_def_cfa_offset 8
 526              	 .cfi_offset 7,-8
 527              	 .cfi_offset 14,-4
 528 0002 82B0     	 sub sp,sp,#8
 529              	.LCFI27:
 530              	 .cfi_def_cfa_offset 16
 531 0004 00AF     	 add r7,sp,#0
 532              	.LCFI28:
 533              	 .cfi_def_cfa_register 7
 534 0006 7860     	 str r0,[r7,#4]
 535 0008 3960     	 str r1,[r7]
 172:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 173:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 174:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 536              	 .loc 3 174 5
 537 000a 3B68     	 ldr r3,[r7]
 538 000c 002B     	 cmp r3,#0
 539 000e 08D1     	 bne .L50
 175:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pmc_disable_pllack(); // Always stop PLL first!
 540              	 .loc 3 175 3
 541 0010 094B     	 ldr r3,.L53
 542 0012 9847     	 blx r3
 543              	.LVL12:
 176:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
 544              	 .loc 3 176 43
 545 0014 7B68     	 ldr r3,[r7,#4]
 546 0016 1B68     	 ldr r3,[r3]
 547              	 .loc 3 176 6
 548 0018 084A     	 ldr r2,.L53+4
 549              	 .loc 3 176 36
 550 001a 43F00053 	 orr r3,r3,#536870912
 551              	 .loc 3 176 19
 552 001e 9362     	 str r3,[r2,#40]
 177:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
 179:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 180:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 553              	 .loc 3 180 1
 554 0020 05E0     	 b .L52
 555              	.L50:
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 556              	 .loc 3 178 25
 557 0022 7B68     	 ldr r3,[r7,#4]
 558 0024 1B68     	 ldr r3,[r3]
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 559              	 .loc 3 178 6
 560 0026 054A     	 ldr r2,.L53+4
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 561              	 .loc 3 178 32
 562 0028 43F48033 	 orr r3,r3,#65536
 178:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 563              	 .loc 3 178 18
 564 002c D361     	 str r3,[r2,#28]
 565              	.L52:
 566              	 .loc 3 180 1
 567 002e 00BF     	 nop
 568 0030 0837     	 adds r7,r7,#8
 569              	.LCFI29:
 570              	 .cfi_def_cfa_offset 8
 571 0032 BD46     	 mov sp,r7
 572              	.LCFI30:
 573              	 .cfi_def_cfa_register 13
 574              	 
 575 0034 80BD     	 pop {r7,pc}
 576              	.L54:
 577 0036 00BF     	 .align 2
 578              	.L53:
 579 0038 00000000 	 .word pmc_disable_pllack
 580 003c 00040E40 	 .word 1074660352
 581              	 .cfi_endproc
 582              	.LFE77:
 584              	 .section .text.pll_is_locked,"ax",%progbits
 585              	 .align 1
 586              	 .syntax unified
 587              	 .thumb
 588              	 .thumb_func
 589              	 .fpu softvfp
 591              	pll_is_locked:
 592              	.LFB79:
 181:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 182:.././hal/sam3u1c/inc/sam3u/pll.h **** /**
 183:.././hal/sam3u1c/inc/sam3u/pll.h ****  * \note This will only disable the selected PLL, not the underlying oscillator
 184:.././hal/sam3u1c/inc/sam3u/pll.h ****  *       (mainck).
 185:.././hal/sam3u1c/inc/sam3u/pll.h ****  */
 186:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_disable(uint32_t ul_pll_id)
 187:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 188:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 189:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 190:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 191:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pmc_disable_pllack();
 192:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 193:.././hal/sam3u1c/inc/sam3u/pll.h **** 		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
 194:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 195:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 196:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 197:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
 198:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 593              	 .loc 3 198 1
 594              	 .cfi_startproc
 595              	 
 596              	 
 597 0000 80B5     	 push {r7,lr}
 598              	.LCFI31:
 599              	 .cfi_def_cfa_offset 8
 600              	 .cfi_offset 7,-8
 601              	 .cfi_offset 14,-4
 602 0002 82B0     	 sub sp,sp,#8
 603              	.LCFI32:
 604              	 .cfi_def_cfa_offset 16
 605 0004 00AF     	 add r7,sp,#0
 606              	.LCFI33:
 607              	 .cfi_def_cfa_register 7
 608 0006 7860     	 str r0,[r7,#4]
 199:.././hal/sam3u1c/inc/sam3u/pll.h **** 	Assert(ul_pll_id < NR_PLLS);
 200:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 201:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (ul_pll_id == PLLA_ID) {
 609              	 .loc 3 201 5
 610 0008 7B68     	 ldr r3,[r7,#4]
 611 000a 002B     	 cmp r3,#0
 612 000c 03D1     	 bne .L56
 202:.././hal/sam3u1c/inc/sam3u/pll.h **** 		return pmc_is_locked_pllack();
 613              	 .loc 3 202 10
 614 000e 054B     	 ldr r3,.L58
 615 0010 9847     	 blx r3
 616              	.LVL13:
 617 0012 0346     	 mov r3,r0
 618 0014 02E0     	 b .L57
 619              	.L56:
 203:.././hal/sam3u1c/inc/sam3u/pll.h **** 	} else {
 204:.././hal/sam3u1c/inc/sam3u/pll.h **** 		return pmc_is_locked_upll();
 620              	 .loc 3 204 10
 621 0016 044B     	 ldr r3,.L58+4
 622 0018 9847     	 blx r3
 623              	.LVL14:
 624 001a 0346     	 mov r3,r0
 625              	.L57:
 205:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 206:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 626              	 .loc 3 206 1
 627 001c 1846     	 mov r0,r3
 628 001e 0837     	 adds r7,r7,#8
 629              	.LCFI34:
 630              	 .cfi_def_cfa_offset 8
 631 0020 BD46     	 mov sp,r7
 632              	.LCFI35:
 633              	 .cfi_def_cfa_register 13
 634              	 
 635 0022 80BD     	 pop {r7,pc}
 636              	.L59:
 637              	 .align 2
 638              	.L58:
 639 0024 00000000 	 .word pmc_is_locked_pllack
 640 0028 00000000 	 .word pmc_is_locked_upll
 641              	 .cfi_endproc
 642              	.LFE79:
 644              	 .section .text.pll_enable_source,"ax",%progbits
 645              	 .align 1
 646              	 .syntax unified
 647              	 .thumb
 648              	 .thumb_func
 649              	 .fpu softvfp
 651              	pll_enable_source:
 652              	.LFB80:
 207:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 208:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_enable_source(enum pll_source e_src)
 209:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 653              	 .loc 3 209 1
 654              	 .cfi_startproc
 655              	 
 656              	 
 657 0000 80B5     	 push {r7,lr}
 658              	.LCFI36:
 659              	 .cfi_def_cfa_offset 8
 660              	 .cfi_offset 7,-8
 661              	 .cfi_offset 14,-4
 662 0002 82B0     	 sub sp,sp,#8
 663              	.LCFI37:
 664              	 .cfi_def_cfa_offset 16
 665 0004 00AF     	 add r7,sp,#0
 666              	.LCFI38:
 667              	 .cfi_def_cfa_register 7
 668 0006 0346     	 mov r3,r0
 669 0008 FB71     	 strb r3,[r7,#7]
 210:.././hal/sam3u1c/inc/sam3u/pll.h **** 	switch (e_src) {
 670              	 .loc 3 210 2
 671 000a FB79     	 ldrb r3,[r7,#7]
 672 000c 033B     	 subs r3,r3,#3
 673 000e 042B     	 cmp r3,#4
 674 0010 08D8     	 bhi .L63
 211:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_4M_RC:
 212:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_8M_RC:
 213:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_12M_RC:
 214:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_XTAL:
 215:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case PLL_SRC_MAINCK_BYPASS:
 216:.././hal/sam3u1c/inc/sam3u/pll.h **** 		osc_enable(e_src);
 675              	 .loc 3 216 3
 676 0012 FB79     	 ldrb r3,[r7,#7]
 677 0014 1846     	 mov r0,r3
 678 0016 064B     	 ldr r3,.L64
 679 0018 9847     	 blx r3
 680              	.LVL15:
 217:.././hal/sam3u1c/inc/sam3u/pll.h **** 		osc_wait_ready(e_src);
 681              	 .loc 3 217 3
 682 001a FB79     	 ldrb r3,[r7,#7]
 683 001c 1846     	 mov r0,r3
 684 001e 054B     	 ldr r3,.L64+4
 685 0020 9847     	 blx r3
 686              	.LVL16:
 218:.././hal/sam3u1c/inc/sam3u/pll.h **** 		break;
 687              	 .loc 3 218 3
 688 0022 00E0     	 b .L62
 689              	.L63:
 219:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 220:.././hal/sam3u1c/inc/sam3u/pll.h **** 	default:
 221:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(false);
 222:.././hal/sam3u1c/inc/sam3u/pll.h **** 		break;
 690              	 .loc 3 222 3
 691 0024 00BF     	 nop
 692              	.L62:
 223:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 224:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 693              	 .loc 3 224 1
 694 0026 00BF     	 nop
 695 0028 0837     	 adds r7,r7,#8
 696              	.LCFI39:
 697              	 .cfi_def_cfa_offset 8
 698 002a BD46     	 mov sp,r7
 699              	.LCFI40:
 700              	 .cfi_def_cfa_register 13
 701              	 
 702 002c 80BD     	 pop {r7,pc}
 703              	.L65:
 704 002e 00BF     	 .align 2
 705              	.L64:
 706 0030 00000000 	 .word osc_enable
 707 0034 00000000 	 .word osc_wait_ready
 708              	 .cfi_endproc
 709              	.LFE80:
 711              	 .section .text.pll_enable_config_defaults,"ax",%progbits
 712              	 .align 1
 713              	 .syntax unified
 714              	 .thumb
 715              	 .thumb_func
 716              	 .fpu softvfp
 718              	pll_enable_config_defaults:
 719              	.LFB81:
 225:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 226:.././hal/sam3u1c/inc/sam3u/pll.h **** static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
 227:.././hal/sam3u1c/inc/sam3u/pll.h **** {
 720              	 .loc 3 227 1
 721              	 .cfi_startproc
 722              	 
 723              	 
 724 0000 90B5     	 push {r4,r7,lr}
 725              	.LCFI41:
 726              	 .cfi_def_cfa_offset 12
 727              	 .cfi_offset 4,-12
 728              	 .cfi_offset 7,-8
 729              	 .cfi_offset 14,-4
 730 0002 85B0     	 sub sp,sp,#20
 731              	.LCFI42:
 732              	 .cfi_def_cfa_offset 32
 733 0004 00AF     	 add r7,sp,#0
 734              	.LCFI43:
 735              	 .cfi_def_cfa_register 7
 736 0006 7860     	 str r0,[r7,#4]
 228:.././hal/sam3u1c/inc/sam3u/pll.h **** 	struct pll_config pllcfg;
 229:.././hal/sam3u1c/inc/sam3u/pll.h **** 
 230:.././hal/sam3u1c/inc/sam3u/pll.h **** 	if (pll_is_locked(ul_pll_id)) {
 737              	 .loc 3 230 6
 738 0008 7868     	 ldr r0,[r7,#4]
 739 000a 214B     	 ldr r3,.L77
 740 000c 9847     	 blx r3
 741              	.LVL17:
 742 000e 0346     	 mov r3,r0
 743              	 .loc 3 230 5
 744 0010 002B     	 cmp r3,#0
 745 0012 39D1     	 bne .L76
 231:.././hal/sam3u1c/inc/sam3u/pll.h **** 		return; // Pll already running
 232:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 233:.././hal/sam3u1c/inc/sam3u/pll.h **** 	switch (ul_pll_id) {
 746              	 .loc 3 233 2
 747 0014 7B68     	 ldr r3,[r7,#4]
 748 0016 002B     	 cmp r3,#0
 749 0018 03D0     	 beq .L69
 750 001a 7B68     	 ldr r3,[r7,#4]
 751 001c 012B     	 cmp r3,#1
 752 001e 15D0     	 beq .L70
 234:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL0_SOURCE
 235:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case 0:
 236:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pll_enable_source(CONFIG_PLL0_SOURCE);
 237:.././hal/sam3u1c/inc/sam3u/pll.h **** 		// Source is mainck, select source for mainck
 238:.././hal/sam3u1c/inc/sam3u/pll.h **** 		if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_4M_RC ||
 239:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_8M_RC ||
 240:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_12M_RC) {
 241:.././hal/sam3u1c/inc/sam3u/pll.h **** 			pmc_mainck_osc_select(0);
 242:.././hal/sam3u1c/inc/sam3u/pll.h **** 			while(!pmc_osc_is_ready_mainck());
 243:.././hal/sam3u1c/inc/sam3u/pll.h **** #  ifndef CONFIG_PLL1_SOURCE
 244:.././hal/sam3u1c/inc/sam3u/pll.h **** 			pmc_osc_disable_main_xtal();
 245:.././hal/sam3u1c/inc/sam3u/pll.h **** #  endif
 246:.././hal/sam3u1c/inc/sam3u/pll.h **** 		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
 247:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
 248:.././hal/sam3u1c/inc/sam3u/pll.h **** 			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
 249:.././hal/sam3u1c/inc/sam3u/pll.h **** 			while(!pmc_osc_is_ready_mainck());
 250:.././hal/sam3u1c/inc/sam3u/pll.h **** 		}
 251:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pll_config_init(&pllcfg,
 252:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_SOURCE,
 253:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_DIV,
 254:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_MUL);
 255:.././hal/sam3u1c/inc/sam3u/pll.h **** 		break;
 256:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 257:.././hal/sam3u1c/inc/sam3u/pll.h **** #ifdef CONFIG_PLL1_SOURCE
 258:.././hal/sam3u1c/inc/sam3u/pll.h **** 	case 1:
 259:.././hal/sam3u1c/inc/sam3u/pll.h **** 		if (pmc_osc_is_bypassed_main_xtal()) {
 260:.././hal/sam3u1c/inc/sam3u/pll.h **** 			// There must be 12MHz clock source on board
 261:.././hal/sam3u1c/inc/sam3u/pll.h **** 		} else {
 262:.././hal/sam3u1c/inc/sam3u/pll.h **** 			// By default, enable and uses XTAL 12MHz
 263:.././hal/sam3u1c/inc/sam3u/pll.h **** 			pll_enable_source(CONFIG_PLL1_SOURCE);
 264:.././hal/sam3u1c/inc/sam3u/pll.h **** 		}
 265:.././hal/sam3u1c/inc/sam3u/pll.h **** 		// Source is main osc
 266:.././hal/sam3u1c/inc/sam3u/pll.h **** 		pll_config_init(&pllcfg,
 267:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL1_SOURCE,
 268:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL1_DIV,
 269:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL1_MUL);
 270:.././hal/sam3u1c/inc/sam3u/pll.h **** 		break;
 271:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 272:.././hal/sam3u1c/inc/sam3u/pll.h **** 	default:
 273:.././hal/sam3u1c/inc/sam3u/pll.h **** 		Assert(false);
 274:.././hal/sam3u1c/inc/sam3u/pll.h **** 		break;
 753              	 .loc 3 274 3
 754 0020 24E0     	 b .L73
 755              	.L69:
 236:.././hal/sam3u1c/inc/sam3u/pll.h **** 		// Source is mainck, select source for mainck
 756              	 .loc 3 236 3
 757 0022 0620     	 movs r0,#6
 758 0024 1B4B     	 ldr r3,.L77+4
 759 0026 9847     	 blx r3
 760              	.LVL18:
 248:.././hal/sam3u1c/inc/sam3u/pll.h **** 			while(!pmc_osc_is_ready_mainck());
 761              	 .loc 3 248 4
 762 0028 4FF08070 	 mov r0,#16777216
 763 002c 1A4B     	 ldr r3,.L77+8
 764 002e 9847     	 blx r3
 765              	.LVL19:
 249:.././hal/sam3u1c/inc/sam3u/pll.h **** 		}
 766              	 .loc 3 249 9
 767 0030 00BF     	 nop
 768              	.L72:
 249:.././hal/sam3u1c/inc/sam3u/pll.h **** 		}
 769              	 .loc 3 249 11 discriminator 1
 770 0032 1A4B     	 ldr r3,.L77+12
 771 0034 9847     	 blx r3
 772              	.LVL20:
 773 0036 0346     	 mov r3,r0
 249:.././hal/sam3u1c/inc/sam3u/pll.h **** 		}
 774              	 .loc 3 249 9 discriminator 1
 775 0038 002B     	 cmp r3,#0
 776 003a FAD0     	 beq .L72
 251:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL0_SOURCE,
 777              	 .loc 3 251 3
 778 003c 07F10C00 	 add r0,r7,#12
 779 0040 1023     	 movs r3,#16
 780 0042 0122     	 movs r2,#1
 781 0044 0621     	 movs r1,#6
 782 0046 164C     	 ldr r4,.L77+16
 783 0048 A047     	 blx r4
 784              	.LVL21:
 255:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 785              	 .loc 3 255 3
 786 004a 0FE0     	 b .L73
 787              	.L70:
 259:.././hal/sam3u1c/inc/sam3u/pll.h **** 			// There must be 12MHz clock source on board
 788              	 .loc 3 259 7
 789 004c 154B     	 ldr r3,.L77+20
 790 004e 9847     	 blx r3
 791              	.LVL22:
 792 0050 0346     	 mov r3,r0
 259:.././hal/sam3u1c/inc/sam3u/pll.h **** 			// There must be 12MHz clock source on board
 793              	 .loc 3 259 6
 794 0052 002B     	 cmp r3,#0
 795 0054 02D1     	 bne .L74
 263:.././hal/sam3u1c/inc/sam3u/pll.h **** 		}
 796              	 .loc 3 263 4
 797 0056 0620     	 movs r0,#6
 798 0058 0E4B     	 ldr r3,.L77+4
 799 005a 9847     	 blx r3
 800              	.LVL23:
 801              	.L74:
 266:.././hal/sam3u1c/inc/sam3u/pll.h **** 				CONFIG_PLL1_SOURCE,
 802              	 .loc 3 266 3
 803 005c 07F10C00 	 add r0,r7,#12
 804 0060 0023     	 movs r3,#0
 805 0062 0022     	 movs r2,#0
 806 0064 0621     	 movs r1,#6
 807 0066 0E4C     	 ldr r4,.L77+16
 808 0068 A047     	 blx r4
 809              	.LVL24:
 270:.././hal/sam3u1c/inc/sam3u/pll.h **** #endif
 810              	 .loc 3 270 3
 811 006a 00BF     	 nop
 812              	.L73:
 275:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 276:.././hal/sam3u1c/inc/sam3u/pll.h **** 	pll_enable(&pllcfg, ul_pll_id);
 813              	 .loc 3 276 2
 814 006c 07F10C03 	 add r3,r7,#12
 815 0070 7968     	 ldr r1,[r7,#4]
 816 0072 1846     	 mov r0,r3
 817 0074 0C4B     	 ldr r3,.L77+24
 818 0076 9847     	 blx r3
 819              	.LVL25:
 277:.././hal/sam3u1c/inc/sam3u/pll.h **** 	while (!pll_is_locked(ul_pll_id));
 820              	 .loc 3 277 8
 821 0078 00BF     	 nop
 822              	.L75:
 823              	 .loc 3 277 10 discriminator 1
 824 007a 7868     	 ldr r0,[r7,#4]
 825 007c 044B     	 ldr r3,.L77
 826 007e 9847     	 blx r3
 827              	.LVL26:
 828 0080 0346     	 mov r3,r0
 829              	 .loc 3 277 8 discriminator 1
 830 0082 002B     	 cmp r3,#0
 831 0084 F9D0     	 beq .L75
 832 0086 00E0     	 b .L66
 833              	.L76:
 231:.././hal/sam3u1c/inc/sam3u/pll.h **** 	}
 834              	 .loc 3 231 3
 835 0088 00BF     	 nop
 836              	.L66:
 278:.././hal/sam3u1c/inc/sam3u/pll.h **** }
 837              	 .loc 3 278 1
 838 008a 1437     	 adds r7,r7,#20
 839              	.LCFI44:
 840              	 .cfi_def_cfa_offset 12
 841 008c BD46     	 mov sp,r7
 842              	.LCFI45:
 843              	 .cfi_def_cfa_register 13
 844              	 
 845 008e 90BD     	 pop {r4,r7,pc}
 846              	.L78:
 847              	 .align 2
 848              	.L77:
 849 0090 00000000 	 .word pll_is_locked
 850 0094 00000000 	 .word pll_enable_source
 851 0098 00000000 	 .word pmc_mainck_osc_select
 852 009c 00000000 	 .word pmc_osc_is_ready_mainck
 853 00a0 00000000 	 .word pll_config_init
 854 00a4 00000000 	 .word pmc_osc_is_bypassed_main_xtal
 855 00a8 00000000 	 .word pll_enable
 856              	 .cfi_endproc
 857              	.LFE81:
 859              	 .section .text.ioport_set_pin_mode,"ax",%progbits
 860              	 .align 1
 861              	 .syntax unified
 862              	 .thumb
 863              	 .thumb_func
 864              	 .fpu softvfp
 866              	ioport_set_pin_mode:
 867              	.LFB116:
 868              	 .file 4 ".././hal/sam3u1c/inc/ioport.h"
   1:.././hal/sam3u1c/inc/ioport.h **** /**
   2:.././hal/sam3u1c/inc/ioport.h ****  * \file
   3:.././hal/sam3u1c/inc/ioport.h ****  *
   4:.././hal/sam3u1c/inc/ioport.h ****  * \brief Common IOPORT service main header file for AVR, UC3 and ARM
   5:.././hal/sam3u1c/inc/ioport.h ****  *        architectures.
   6:.././hal/sam3u1c/inc/ioport.h ****  *
   7:.././hal/sam3u1c/inc/ioport.h ****  * Copyright (c) 2012-2014 Atmel Corporation. All rights reserved.
   8:.././hal/sam3u1c/inc/ioport.h ****  *
   9:.././hal/sam3u1c/inc/ioport.h ****  * \asf_license_start
  10:.././hal/sam3u1c/inc/ioport.h ****  *
  11:.././hal/sam3u1c/inc/ioport.h ****  * \page License
  12:.././hal/sam3u1c/inc/ioport.h ****  *
  13:.././hal/sam3u1c/inc/ioport.h ****  * Redistribution and use in source and binary forms, with or without
  14:.././hal/sam3u1c/inc/ioport.h ****  * modification, are permitted provided that the following conditions are met:
  15:.././hal/sam3u1c/inc/ioport.h ****  *
  16:.././hal/sam3u1c/inc/ioport.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:.././hal/sam3u1c/inc/ioport.h ****  *    this list of conditions and the following disclaimer.
  18:.././hal/sam3u1c/inc/ioport.h ****  *
  19:.././hal/sam3u1c/inc/ioport.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:.././hal/sam3u1c/inc/ioport.h ****  *    this list of conditions and the following disclaimer in the documentation
  21:.././hal/sam3u1c/inc/ioport.h ****  *    and/or other materials provided with the distribution.
  22:.././hal/sam3u1c/inc/ioport.h ****  *
  23:.././hal/sam3u1c/inc/ioport.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:.././hal/sam3u1c/inc/ioport.h ****  *    from this software without specific prior written permission.
  25:.././hal/sam3u1c/inc/ioport.h ****  *
  26:.././hal/sam3u1c/inc/ioport.h ****  * 4. This software may only be redistributed and used in connection with an
  27:.././hal/sam3u1c/inc/ioport.h ****  *    Atmel microcontroller product.
  28:.././hal/sam3u1c/inc/ioport.h ****  *
  29:.././hal/sam3u1c/inc/ioport.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:.././hal/sam3u1c/inc/ioport.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:.././hal/sam3u1c/inc/ioport.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:.././hal/sam3u1c/inc/ioport.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:.././hal/sam3u1c/inc/ioport.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:.././hal/sam3u1c/inc/ioport.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:.././hal/sam3u1c/inc/ioport.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:.././hal/sam3u1c/inc/ioport.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:.././hal/sam3u1c/inc/ioport.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:.././hal/sam3u1c/inc/ioport.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:.././hal/sam3u1c/inc/ioport.h ****  * POSSIBILITY OF SUCH DAMAGE.
  40:.././hal/sam3u1c/inc/ioport.h ****  *
  41:.././hal/sam3u1c/inc/ioport.h ****  * \asf_license_stop
  42:.././hal/sam3u1c/inc/ioport.h ****  *
  43:.././hal/sam3u1c/inc/ioport.h ****  */
  44:.././hal/sam3u1c/inc/ioport.h **** #ifndef IOPORT_H
  45:.././hal/sam3u1c/inc/ioport.h **** #define IOPORT_H
  46:.././hal/sam3u1c/inc/ioport.h **** 
  47:.././hal/sam3u1c/inc/ioport.h **** #ifdef __cplusplus
  48:.././hal/sam3u1c/inc/ioport.h **** extern "C" {
  49:.././hal/sam3u1c/inc/ioport.h **** #endif
  50:.././hal/sam3u1c/inc/ioport.h **** 
  51:.././hal/sam3u1c/inc/ioport.h **** #include <parts.h>
  52:.././hal/sam3u1c/inc/ioport.h **** #include <compiler.h>
  53:.././hal/sam3u1c/inc/ioport.h **** 
  54:.././hal/sam3u1c/inc/ioport.h **** /**
  55:.././hal/sam3u1c/inc/ioport.h ****  * \defgroup ioport_group Common IOPORT API
  56:.././hal/sam3u1c/inc/ioport.h ****  *
  57:.././hal/sam3u1c/inc/ioport.h ****  * See \ref ioport_quickstart.
  58:.././hal/sam3u1c/inc/ioport.h ****  *
  59:.././hal/sam3u1c/inc/ioport.h ****  * This is common IOPORT service for GPIO pin configuration and control in a
  60:.././hal/sam3u1c/inc/ioport.h ****  * standardized manner across the MEGA, MEGA_RF, XMEGA, UC3 and ARM devices.
  61:.././hal/sam3u1c/inc/ioport.h ****  *
  62:.././hal/sam3u1c/inc/ioport.h ****  * Port pin control code is optimized for each platform, and should produce
  63:.././hal/sam3u1c/inc/ioport.h ****  * both compact and fast execution times when used with constant values.
  64:.././hal/sam3u1c/inc/ioport.h ****  *
  65:.././hal/sam3u1c/inc/ioport.h ****  * \section dependencies Dependencies
  66:.././hal/sam3u1c/inc/ioport.h ****  * This driver depends on the following modules:
  67:.././hal/sam3u1c/inc/ioport.h ****  * - \ref sysclk_group for clock speed and functions.
  68:.././hal/sam3u1c/inc/ioport.h ****  * @{
  69:.././hal/sam3u1c/inc/ioport.h ****  */
  70:.././hal/sam3u1c/inc/ioport.h **** 
  71:.././hal/sam3u1c/inc/ioport.h **** /**
  72:.././hal/sam3u1c/inc/ioport.h ****  * \def IOPORT_CREATE_PIN(port, pin)
  73:.././hal/sam3u1c/inc/ioport.h ****  * \brief Create IOPORT pin number
  74:.././hal/sam3u1c/inc/ioport.h ****  *
  75:.././hal/sam3u1c/inc/ioport.h ****  * Create a IOPORT pin number for use with the IOPORT functions.
  76:.././hal/sam3u1c/inc/ioport.h ****  *
  77:.././hal/sam3u1c/inc/ioport.h ****  * \param port IOPORT port (e.g. PORTA, PA or PIOA depending on chosen
  78:.././hal/sam3u1c/inc/ioport.h ****  *             architecture)
  79:.././hal/sam3u1c/inc/ioport.h ****  * \param pin IOPORT zero-based index of the I/O pin
  80:.././hal/sam3u1c/inc/ioport.h ****  */
  81:.././hal/sam3u1c/inc/ioport.h **** 
  82:.././hal/sam3u1c/inc/ioport.h **** /** \brief IOPORT pin directions */
  83:.././hal/sam3u1c/inc/ioport.h **** enum ioport_direction {
  84:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_DIR_INPUT,  /*!< IOPORT input direction */
  85:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_DIR_OUTPUT, /*!< IOPORT output direction */
  86:.././hal/sam3u1c/inc/ioport.h **** };
  87:.././hal/sam3u1c/inc/ioport.h **** 
  88:.././hal/sam3u1c/inc/ioport.h **** /** \brief IOPORT levels */
  89:.././hal/sam3u1c/inc/ioport.h **** enum ioport_value {
  90:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_PIN_LEVEL_LOW,  /*!< IOPORT pin value low */
  91:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_PIN_LEVEL_HIGH, /*!< IOPORT pin value high */
  92:.././hal/sam3u1c/inc/ioport.h **** };
  93:.././hal/sam3u1c/inc/ioport.h **** 
  94:.././hal/sam3u1c/inc/ioport.h **** #if MEGA_RF
  95:.././hal/sam3u1c/inc/ioport.h **** /** \brief IOPORT edge sense modes */
  96:.././hal/sam3u1c/inc/ioport.h **** enum ioport_sense {
  97:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_SENSE_LEVEL,     /*!< IOPORT sense low level  */
  98:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
  99:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 100:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 101:.././hal/sam3u1c/inc/ioport.h **** };
 102:.././hal/sam3u1c/inc/ioport.h **** #elif SAM && !SAM4L
 103:.././hal/sam3u1c/inc/ioport.h **** /** \brief IOPORT edge sense modes */
 104:.././hal/sam3u1c/inc/ioport.h **** enum ioport_sense {
 105:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
 106:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 107:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 108:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_SENSE_LEVEL_LOW, /*!< IOPORT sense low level  */
 109:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_SENSE_LEVEL_HIGH,/*!< IOPORT sense High level  */
 110:.././hal/sam3u1c/inc/ioport.h **** };
 111:.././hal/sam3u1c/inc/ioport.h **** #else
 112:.././hal/sam3u1c/inc/ioport.h **** enum ioport_sense {
 113:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_SENSE_BOTHEDGES, /*!< IOPORT sense both rising and falling edges */
 114:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_SENSE_RISING,    /*!< IOPORT sense rising edges */
 115:.././hal/sam3u1c/inc/ioport.h **** 	IOPORT_SENSE_FALLING,   /*!< IOPORT sense falling edges */
 116:.././hal/sam3u1c/inc/ioport.h **** };
 117:.././hal/sam3u1c/inc/ioport.h **** #endif
 118:.././hal/sam3u1c/inc/ioport.h **** 
 119:.././hal/sam3u1c/inc/ioport.h **** 
 120:.././hal/sam3u1c/inc/ioport.h **** #if XMEGA
 121:.././hal/sam3u1c/inc/ioport.h **** # include "xmega/ioport.h"
 122:.././hal/sam3u1c/inc/ioport.h **** # if defined(IOPORT_XMEGA_COMPAT)
 123:.././hal/sam3u1c/inc/ioport.h **** #  include "xmega/ioport_compat.h"
 124:.././hal/sam3u1c/inc/ioport.h **** # endif
 125:.././hal/sam3u1c/inc/ioport.h **** #elif MEGA
 126:.././hal/sam3u1c/inc/ioport.h **** #  include "mega/ioport.h"
 127:.././hal/sam3u1c/inc/ioport.h **** #elif UC3
 128:.././hal/sam3u1c/inc/ioport.h **** # include "uc3/ioport.h"
 129:.././hal/sam3u1c/inc/ioport.h **** #elif SAM
 130:.././hal/sam3u1c/inc/ioport.h **** # if SAM4L
 131:.././hal/sam3u1c/inc/ioport.h **** #  include "sam/ioport_gpio.h"
 132:.././hal/sam3u1c/inc/ioport.h **** # elif (SAMD20 | SAMD21)
 133:.././hal/sam3u1c/inc/ioport.h **** #  include "sam0/ioport.h"
 134:.././hal/sam3u1c/inc/ioport.h **** # else
 135:.././hal/sam3u1c/inc/ioport.h **** #  include "sam/ioport_pio.h"
 136:.././hal/sam3u1c/inc/ioport.h **** # endif
 137:.././hal/sam3u1c/inc/ioport.h **** #endif
 138:.././hal/sam3u1c/inc/ioport.h **** 
 139:.././hal/sam3u1c/inc/ioport.h **** /**
 140:.././hal/sam3u1c/inc/ioport.h ****  * \brief Initializes the IOPORT service, ready for use.
 141:.././hal/sam3u1c/inc/ioport.h ****  *
 142:.././hal/sam3u1c/inc/ioport.h ****  * This function must be called before using any other functions in the IOPORT
 143:.././hal/sam3u1c/inc/ioport.h ****  * service.
 144:.././hal/sam3u1c/inc/ioport.h ****  */
 145:.././hal/sam3u1c/inc/ioport.h **** static inline void ioport_init(void)
 146:.././hal/sam3u1c/inc/ioport.h **** {
 147:.././hal/sam3u1c/inc/ioport.h **** 	arch_ioport_init();
 148:.././hal/sam3u1c/inc/ioport.h **** }
 149:.././hal/sam3u1c/inc/ioport.h **** 
 150:.././hal/sam3u1c/inc/ioport.h **** /**
 151:.././hal/sam3u1c/inc/ioport.h ****  * \brief Enable an IOPORT pin, based on a pin created with \ref
 152:.././hal/sam3u1c/inc/ioport.h ****  * IOPORT_CREATE_PIN().
 153:.././hal/sam3u1c/inc/ioport.h ****  *
 154:.././hal/sam3u1c/inc/ioport.h ****  * \param pin  IOPORT pin to enable
 155:.././hal/sam3u1c/inc/ioport.h ****  */
 156:.././hal/sam3u1c/inc/ioport.h **** static inline void ioport_enable_pin(ioport_pin_t pin)
 157:.././hal/sam3u1c/inc/ioport.h **** {
 158:.././hal/sam3u1c/inc/ioport.h **** 	arch_ioport_enable_pin(pin);
 159:.././hal/sam3u1c/inc/ioport.h **** }
 160:.././hal/sam3u1c/inc/ioport.h **** 
 161:.././hal/sam3u1c/inc/ioport.h **** /**
 162:.././hal/sam3u1c/inc/ioport.h ****  * \brief Enable multiple pins in a single IOPORT port.
 163:.././hal/sam3u1c/inc/ioport.h ****  *
 164:.././hal/sam3u1c/inc/ioport.h ****  * \param port IOPORT port to enable
 165:.././hal/sam3u1c/inc/ioport.h ****  * \param mask Mask of pins within the port to enable
 166:.././hal/sam3u1c/inc/ioport.h ****  */
 167:.././hal/sam3u1c/inc/ioport.h **** static inline void ioport_enable_port(ioport_port_t port,
 168:.././hal/sam3u1c/inc/ioport.h **** 		ioport_port_mask_t mask)
 169:.././hal/sam3u1c/inc/ioport.h **** {
 170:.././hal/sam3u1c/inc/ioport.h **** 	arch_ioport_enable_port(port, mask);
 171:.././hal/sam3u1c/inc/ioport.h **** }
 172:.././hal/sam3u1c/inc/ioport.h **** 
 173:.././hal/sam3u1c/inc/ioport.h **** /**
 174:.././hal/sam3u1c/inc/ioport.h ****  * \brief Disable IOPORT pin, based on a pin created with \ref
 175:.././hal/sam3u1c/inc/ioport.h ****  *        IOPORT_CREATE_PIN().
 176:.././hal/sam3u1c/inc/ioport.h ****  *
 177:.././hal/sam3u1c/inc/ioport.h ****  * \param pin IOPORT pin to disable
 178:.././hal/sam3u1c/inc/ioport.h ****  */
 179:.././hal/sam3u1c/inc/ioport.h **** static inline void ioport_disable_pin(ioport_pin_t pin)
 180:.././hal/sam3u1c/inc/ioport.h **** {
 181:.././hal/sam3u1c/inc/ioport.h **** 	arch_ioport_disable_pin(pin);
 182:.././hal/sam3u1c/inc/ioport.h **** }
 183:.././hal/sam3u1c/inc/ioport.h **** 
 184:.././hal/sam3u1c/inc/ioport.h **** /**
 185:.././hal/sam3u1c/inc/ioport.h ****  * \brief Disable multiple pins in a single IOPORT port.
 186:.././hal/sam3u1c/inc/ioport.h ****  *
 187:.././hal/sam3u1c/inc/ioport.h ****  * \param port IOPORT port to disable
 188:.././hal/sam3u1c/inc/ioport.h ****  * \param mask Pin mask of pins to disable
 189:.././hal/sam3u1c/inc/ioport.h ****  */
 190:.././hal/sam3u1c/inc/ioport.h **** static inline void ioport_disable_port(ioport_port_t port,
 191:.././hal/sam3u1c/inc/ioport.h **** 		ioport_port_mask_t mask)
 192:.././hal/sam3u1c/inc/ioport.h **** {
 193:.././hal/sam3u1c/inc/ioport.h **** 	arch_ioport_disable_port(port, mask);
 194:.././hal/sam3u1c/inc/ioport.h **** }
 195:.././hal/sam3u1c/inc/ioport.h **** 
 196:.././hal/sam3u1c/inc/ioport.h **** /**
 197:.././hal/sam3u1c/inc/ioport.h ****  * \brief Set multiple pin modes in a single IOPORT port, such as pull-up,
 198:.././hal/sam3u1c/inc/ioport.h ****  * pull-down, etc. configuration.
 199:.././hal/sam3u1c/inc/ioport.h ****  *
 200:.././hal/sam3u1c/inc/ioport.h ****  * \param port IOPORT port to configure
 201:.././hal/sam3u1c/inc/ioport.h ****  * \param mask Pin mask of pins to configure
 202:.././hal/sam3u1c/inc/ioport.h ****  * \param mode Mode masks to configure for the specified pins (\ref
 203:.././hal/sam3u1c/inc/ioport.h ****  * ioport_modes)
 204:.././hal/sam3u1c/inc/ioport.h ****  */
 205:.././hal/sam3u1c/inc/ioport.h **** static inline void ioport_set_port_mode(ioport_port_t port,
 206:.././hal/sam3u1c/inc/ioport.h **** 		ioport_port_mask_t mask, ioport_mode_t mode)
 207:.././hal/sam3u1c/inc/ioport.h **** {
 208:.././hal/sam3u1c/inc/ioport.h **** 	arch_ioport_set_port_mode(port, mask, mode);
 209:.././hal/sam3u1c/inc/ioport.h **** }
 210:.././hal/sam3u1c/inc/ioport.h **** 
 211:.././hal/sam3u1c/inc/ioport.h **** /**
 212:.././hal/sam3u1c/inc/ioport.h ****  * \brief Set pin mode for one single IOPORT pin.
 213:.././hal/sam3u1c/inc/ioport.h ****  *
 214:.././hal/sam3u1c/inc/ioport.h ****  * \param pin IOPORT pin to configure
 215:.././hal/sam3u1c/inc/ioport.h ****  * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 216:.././hal/sam3u1c/inc/ioport.h ****  */
 217:.././hal/sam3u1c/inc/ioport.h **** static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
 218:.././hal/sam3u1c/inc/ioport.h **** {
 869              	 .loc 4 218 1
 870              	 .cfi_startproc
 871              	 
 872              	 
 873              	 
 874 0000 80B4     	 push {r7}
 875              	.LCFI46:
 876              	 .cfi_def_cfa_offset 4
 877              	 .cfi_offset 7,-4
 878 0002 8DB0     	 sub sp,sp,#52
 879              	.LCFI47:
 880              	 .cfi_def_cfa_offset 56
 881 0004 00AF     	 add r7,sp,#0
 882              	.LCFI48:
 883              	 .cfi_def_cfa_register 7
 884 0006 7860     	 str r0,[r7,#4]
 885 0008 3960     	 str r1,[r7]
 886 000a 7B68     	 ldr r3,[r7,#4]
 887 000c FB62     	 str r3,[r7,#44]
 888 000e 3B68     	 ldr r3,[r7]
 889 0010 BB62     	 str r3,[r7,#40]
 890 0012 FB6A     	 ldr r3,[r7,#44]
 891 0014 7B62     	 str r3,[r7,#36]
 892              	.LBB35:
 893              	.LBB36:
 894              	.LBB37:
 895              	.LBB38:
 896              	 .file 5 ".././hal/sam3u1c/inc/sam/ioport_pio.h"
   1:.././hal/sam3u1c/inc/sam/ioport_pio.h **** /**
   2:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * \file
   3:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
   4:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * \brief SAM architecture specific IOPORT service implementation header file.
   5:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
   6:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * Copyright (c) 2012-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
   8:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
  10:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
  12:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
  15:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
  18:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
  22:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
  25:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
  28:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
  40:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
  42:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  */
  43:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #ifndef IOPORT_SAM_H
  44:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_SAM_H
  45:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  46:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #include <sysclk.h>
  47:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  48:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_CREATE_PIN(port, pin) ((IOPORT_ ## port) * 32 + (pin))
  49:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_BASE_ADDRESS (uintptr_t)PIOA
  50:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_PIO_OFFSET   ((uintptr_t)PIOB - (uintptr_t)PIOA)
  51:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  52:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_PIOA     0
  53:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_PIOB     1
  54:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_PIOC     2
  55:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_PIOD     3
  56:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_PIOE     4
  57:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_PIOF     5
  58:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  59:.././hal/sam3u1c/inc/sam/ioport_pio.h **** /**
  60:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * \weakgroup ioport_group
  61:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * \section ioport_modes IOPORT Modes
  62:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
  63:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * For details on these please see the SAM Manual.
  64:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  *
  65:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  * @{
  66:.././hal/sam3u1c/inc/sam/ioport_pio.h ****  */
  67:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  68:.././hal/sam3u1c/inc/sam/ioport_pio.h **** /** \name IOPORT Mode bit definitions */
  69:.././hal/sam3u1c/inc/sam/ioport_pio.h **** /** @{ */
  70:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_MODE_MUX_MASK            (0x7 << 0) /*!< MUX bits mask */
  71:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_MODE_MUX_BIT0            (  1 << 0) /*!< MUX BIT0 mask */
  72:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  73:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #if SAM3N || SAM3S || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAMG || SAM4CP
  74:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_MODE_MUX_BIT1            (  1 << 1) /*!< MUX BIT1 mask */
  75:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
  76:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  77:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_MODE_MUX_A               (  0 << 0) /*!< MUX function A */
  78:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_MODE_MUX_B               (  1 << 0) /*!< MUX function B */
  79:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  80:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #if SAM3N || SAM3S || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAMG || SAM4CP
  81:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_MODE_MUX_C               (  2 << 0) /*!< MUX function C */
  82:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_MODE_MUX_D               (  3 << 0) /*!< MUX function D */
  83:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
  84:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  85:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_MODE_PULLUP              (  1 << 3) /*!< Pull-up */
  86:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  87:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #if SAM3N || SAM3S || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAMG || SAM4CP
  88:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_MODE_PULLDOWN            (  1 << 4) /*!< Pull-down */
  89:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
  90:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  91:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_MODE_OPEN_DRAIN          (  1 << 5) /*!< Open drain */
  92:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  93:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_MODE_GLITCH_FILTER       (  1 << 6) /*!< Glitch filter */
  94:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #define IOPORT_MODE_DEBOUNCE            (  1 << 7) /*!< Input debounce */
  95:.././hal/sam3u1c/inc/sam/ioport_pio.h **** /** @} */
  96:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  97:.././hal/sam3u1c/inc/sam/ioport_pio.h **** /** @} */
  98:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
  99:.././hal/sam3u1c/inc/sam/ioport_pio.h **** typedef uint32_t ioport_mode_t;
 100:.././hal/sam3u1c/inc/sam/ioport_pio.h **** typedef uint32_t ioport_pin_t;
 101:.././hal/sam3u1c/inc/sam/ioport_pio.h **** typedef uint32_t ioport_port_t;
 102:.././hal/sam3u1c/inc/sam/ioport_pio.h **** typedef uint32_t ioport_port_mask_t;
 103:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 104:.././hal/sam3u1c/inc/sam/ioport_pio.h **** __always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
 105:.././hal/sam3u1c/inc/sam/ioport_pio.h **** {
 106:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	return pin >> 5;
 897              	 .loc 5 106 13
 898 0016 7B6A     	 ldr r3,[r7,#36]
 899 0018 5A09     	 lsrs r2,r3,#5
 900 001a FB6A     	 ldr r3,[r7,#44]
 901 001c 3B62     	 str r3,[r7,#32]
 902              	.LBE38:
 903              	.LBE37:
 904              	.LBB39:
 905              	.LBB40:
 107:.././hal/sam3u1c/inc/sam/ioport_pio.h **** }
 108:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 109:.././hal/sam3u1c/inc/sam/ioport_pio.h **** __always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
 110:.././hal/sam3u1c/inc/sam/ioport_pio.h **** {
 111:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #if (SAM4C || SAM4CM || SAM4CP)
 112:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	if (port == IOPORT_PIOC) {
 113:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		return (Pio *)(uintptr_t)PIOC;
 114:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #  ifdef ID_PIOD
 115:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	} else if (port == IOPORT_PIOD) {
 116:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		return (Pio *)(uintptr_t)PIOD;
 117:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #  endif
 118:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	} else {
 119:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 120:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		       (IOPORT_PIO_OFFSET * port));
 121:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	}
 122:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #else
 123:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
 124:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	       (IOPORT_PIO_OFFSET * port));
 125:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
 126:.././hal/sam3u1c/inc/sam/ioport_pio.h **** }
 127:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 128:.././hal/sam3u1c/inc/sam/ioport_pio.h **** __always_inline static Pio *arch_ioport_pin_to_base(ioport_pin_t pin)
 129:.././hal/sam3u1c/inc/sam/ioport_pio.h **** {
 130:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
 131:.././hal/sam3u1c/inc/sam/ioport_pio.h **** }
 132:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 133:.././hal/sam3u1c/inc/sam/ioport_pio.h **** __always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
 134:.././hal/sam3u1c/inc/sam/ioport_pio.h **** {
 135:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	return 1U << (pin & 0x1F);
 906              	 .loc 5 135 20
 907 001e 3B6A     	 ldr r3,[r7,#32]
 908 0020 03F01F03 	 and r3,r3,#31
 909              	 .loc 5 135 12
 910 0024 0121     	 movs r1,#1
 911 0026 01FA03F3 	 lsl r3,r1,r3
 912 002a FA61     	 str r2,[r7,#28]
 913 002c BB61     	 str r3,[r7,#24]
 914 002e BB6A     	 ldr r3,[r7,#40]
 915 0030 7B61     	 str r3,[r7,#20]
 916 0032 FB69     	 ldr r3,[r7,#28]
 917 0034 3B61     	 str r3,[r7,#16]
 918              	.LBE40:
 919              	.LBE39:
 920              	.LBB41:
 921              	.LBB42:
 922              	.LBB43:
 923              	.LBB44:
 123:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	       (IOPORT_PIO_OFFSET * port));
 924              	 .loc 5 123 48
 925 0036 3B69     	 ldr r3,[r7,#16]
 926 0038 03F50013 	 add r3,r3,#2097152
 927 003c 03F20673 	 addw r3,r3,#1798
 928 0040 5B02     	 lsls r3,r3,#9
 929              	.LBE44:
 930              	.LBE43:
 136:.././hal/sam3u1c/inc/sam/ioport_pio.h **** }
 137:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 138:.././hal/sam3u1c/inc/sam/ioport_pio.h **** __always_inline static void arch_ioport_init(void)
 139:.././hal/sam3u1c/inc/sam/ioport_pio.h **** {
 140:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #ifdef ID_PIOA
 141:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	sysclk_enable_peripheral_clock(ID_PIOA);
 142:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
 143:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #ifdef ID_PIOB
 144:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	sysclk_enable_peripheral_clock(ID_PIOB);
 145:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
 146:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #ifdef ID_PIOC
 147:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	sysclk_enable_peripheral_clock(ID_PIOC);
 148:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
 149:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #ifdef ID_PIOD
 150:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	sysclk_enable_peripheral_clock(ID_PIOD);
 151:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
 152:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #ifdef ID_PIOE
 153:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	sysclk_enable_peripheral_clock(ID_PIOE);
 154:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
 155:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #ifdef ID_PIOF
 156:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	sysclk_enable_peripheral_clock(ID_PIOF);
 157:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
 158:.././hal/sam3u1c/inc/sam/ioport_pio.h **** }
 159:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 160:.././hal/sam3u1c/inc/sam/ioport_pio.h **** __always_inline static void arch_ioport_enable_port(ioport_port_t port,
 161:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		ioport_port_mask_t mask)
 162:.././hal/sam3u1c/inc/sam/ioport_pio.h **** {
 163:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	arch_ioport_port_to_base(port)->PIO_PER = mask;
 164:.././hal/sam3u1c/inc/sam/ioport_pio.h **** }
 165:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 166:.././hal/sam3u1c/inc/sam/ioport_pio.h **** __always_inline static void arch_ioport_disable_port(ioport_port_t port,
 167:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		ioport_port_mask_t mask)
 168:.././hal/sam3u1c/inc/sam/ioport_pio.h **** {
 169:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	arch_ioport_port_to_base(port)->PIO_PDR = mask;
 170:.././hal/sam3u1c/inc/sam/ioport_pio.h **** }
 171:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 172:.././hal/sam3u1c/inc/sam/ioport_pio.h **** __always_inline static void arch_ioport_enable_pin(ioport_pin_t pin)
 173:.././hal/sam3u1c/inc/sam/ioport_pio.h **** {
 174:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	arch_ioport_enable_port(arch_ioport_pin_to_port_id(pin),
 175:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 			arch_ioport_pin_to_mask(pin));
 176:.././hal/sam3u1c/inc/sam/ioport_pio.h **** }
 177:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 178:.././hal/sam3u1c/inc/sam/ioport_pio.h **** __always_inline static void arch_ioport_disable_pin(ioport_pin_t pin)
 179:.././hal/sam3u1c/inc/sam/ioport_pio.h **** {
 180:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	arch_ioport_disable_port(arch_ioport_pin_to_port_id(pin),
 181:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 			arch_ioport_pin_to_mask(pin));
 182:.././hal/sam3u1c/inc/sam/ioport_pio.h **** }
 183:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 184:.././hal/sam3u1c/inc/sam/ioport_pio.h **** __always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
 185:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		ioport_port_mask_t mask, ioport_mode_t mode)
 186:.././hal/sam3u1c/inc/sam/ioport_pio.h **** {
 187:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	Pio *base = arch_ioport_port_to_base(port);
 931              	 .loc 5 187 14
 932 0042 FB60     	 str r3,[r7,#12]
 188:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 189:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	if (mode & IOPORT_MODE_PULLUP) {
 933              	 .loc 5 189 11
 934 0044 7B69     	 ldr r3,[r7,#20]
 935 0046 03F00803 	 and r3,r3,#8
 936              	 .loc 5 189 5
 937 004a 002B     	 cmp r3,#0
 938 004c 03D0     	 beq .L83
 190:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_PUER = mask;
 939              	 .loc 5 190 18
 940 004e FB68     	 ldr r3,[r7,#12]
 941 0050 BA69     	 ldr r2,[r7,#24]
 942 0052 5A66     	 str r2,[r3,#100]
 943 0054 02E0     	 b .L84
 944              	.L83:
 191:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	} else {
 192:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_PUDR = mask;
 945              	 .loc 5 192 18
 946 0056 FB68     	 ldr r3,[r7,#12]
 947 0058 BA69     	 ldr r2,[r7,#24]
 948 005a 1A66     	 str r2,[r3,#96]
 949              	.L84:
 193:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	}
 194:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 195:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #if defined(IOPORT_MODE_PULLDOWN)
 196:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	if (mode & IOPORT_MODE_PULLDOWN) {
 197:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_PPDER = mask;
 198:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	} else {
 199:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_PPDDR = mask;
 200:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	}
 201:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
 202:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 203:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	if (mode & IOPORT_MODE_OPEN_DRAIN) {
 950              	 .loc 5 203 11
 951 005c 7B69     	 ldr r3,[r7,#20]
 952 005e 03F02003 	 and r3,r3,#32
 953              	 .loc 5 203 5
 954 0062 002B     	 cmp r3,#0
 955 0064 03D0     	 beq .L85
 204:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_MDER = mask;
 956              	 .loc 5 204 18
 957 0066 FB68     	 ldr r3,[r7,#12]
 958 0068 BA69     	 ldr r2,[r7,#24]
 959 006a 1A65     	 str r2,[r3,#80]
 960 006c 02E0     	 b .L86
 961              	.L85:
 205:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	} else {
 206:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_MDDR = mask;
 962              	 .loc 5 206 18
 963 006e FB68     	 ldr r3,[r7,#12]
 964 0070 BA69     	 ldr r2,[r7,#24]
 965 0072 5A65     	 str r2,[r3,#84]
 966              	.L86:
 207:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	}
 208:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 209:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
 967              	 .loc 5 209 11
 968 0074 7B69     	 ldr r3,[r7,#20]
 969 0076 03F0C003 	 and r3,r3,#192
 970              	 .loc 5 209 5
 971 007a 002B     	 cmp r3,#0
 972 007c 03D0     	 beq .L87
 210:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_IFER = mask;
 973              	 .loc 5 210 18
 974 007e FB68     	 ldr r3,[r7,#12]
 975 0080 BA69     	 ldr r2,[r7,#24]
 976 0082 1A62     	 str r2,[r3,#32]
 977 0084 02E0     	 b .L88
 978              	.L87:
 211:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	} else {
 212:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_IFDR = mask;
 979              	 .loc 5 212 18
 980 0086 FB68     	 ldr r3,[r7,#12]
 981 0088 BA69     	 ldr r2,[r7,#24]
 982 008a 5A62     	 str r2,[r3,#36]
 983              	.L88:
 213:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	}
 214:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 215:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	if (mode & IOPORT_MODE_DEBOUNCE) {
 984              	 .loc 5 215 11
 985 008c 7B69     	 ldr r3,[r7,#20]
 986 008e 03F08003 	 and r3,r3,#128
 987              	 .loc 5 215 5
 988 0092 002B     	 cmp r3,#0
 989 0094 04D0     	 beq .L89
 216:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #if SAM3U || SAM3XA
 217:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_DIFSR = mask;
 990              	 .loc 5 217 19
 991 0096 FB68     	 ldr r3,[r7,#12]
 992 0098 BA69     	 ldr r2,[r7,#24]
 993 009a C3F88420 	 str r2,[r3,#132]
 994 009e 03E0     	 b .L90
 995              	.L89:
 218:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #else
 219:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_IFSCER = mask;
 220:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
 221:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	} else {
 222:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #if SAM3U || SAM3XA
 223:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_SCIFSR = mask;
 996              	 .loc 5 223 20
 997 00a0 FB68     	 ldr r3,[r7,#12]
 998 00a2 BA69     	 ldr r2,[r7,#24]
 999 00a4 C3F88020 	 str r2,[r3,#128]
 1000              	.L90:
 224:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #else
 225:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_IFSCDR = mask;
 226:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
 227:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	}
 228:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 229:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #if !defined(IOPORT_MODE_MUX_BIT1)
 230:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	if (mode & IOPORT_MODE_MUX_BIT0) {
 1001              	 .loc 5 230 11
 1002 00a8 7B69     	 ldr r3,[r7,#20]
 1003 00aa 03F00103 	 and r3,r3,#1
 1004              	 .loc 5 230 5
 1005 00ae 002B     	 cmp r3,#0
 1006 00b0 06D0     	 beq .L91
 231:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_ABSR |= mask;
 1007              	 .loc 5 231 18
 1008 00b2 FB68     	 ldr r3,[r7,#12]
 1009 00b4 1A6F     	 ldr r2,[r3,#112]
 1010 00b6 BB69     	 ldr r3,[r7,#24]
 1011 00b8 1A43     	 orrs r2,r2,r3
 1012 00ba FB68     	 ldr r3,[r7,#12]
 1013 00bc 1A67     	 str r2,[r3,#112]
 232:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	} else {
 233:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_ABSR &= ~mask;
 234:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	}
 235:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #else
 236:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	if (mode & IOPORT_MODE_MUX_BIT0) {
 237:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_ABCDSR[0] |= mask;
 238:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	} else {
 239:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_ABCDSR[0] &= ~mask;
 240:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	}
 241:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 242:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	if (mode & IOPORT_MODE_MUX_BIT1) {
 243:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_ABCDSR[1] |= mask;
 244:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	} else {
 245:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		base->PIO_ABCDSR[1] &= ~mask;
 246:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	}
 247:.././hal/sam3u1c/inc/sam/ioport_pio.h **** #endif
 248:.././hal/sam3u1c/inc/sam/ioport_pio.h **** }
 1014              	 .loc 5 248 1
 1015 00be 06E0     	 b .L94
 1016              	.L91:
 233:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	}
 1017              	 .loc 5 233 18
 1018 00c0 FB68     	 ldr r3,[r7,#12]
 1019 00c2 1A6F     	 ldr r2,[r3,#112]
 233:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	}
 1020              	 .loc 5 233 21
 1021 00c4 BB69     	 ldr r3,[r7,#24]
 1022 00c6 DB43     	 mvns r3,r3
 233:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	}
 1023              	 .loc 5 233 18
 1024 00c8 1A40     	 ands r2,r2,r3
 1025 00ca FB68     	 ldr r3,[r7,#12]
 1026 00cc 1A67     	 str r2,[r3,#112]
 1027              	.L94:
 1028              	 .loc 5 248 1
 1029 00ce 00BF     	 nop
 1030              	.LBE42:
 1031              	.LBE41:
 249:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 
 250:.././hal/sam3u1c/inc/sam/ioport_pio.h **** __always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
 251:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 		ioport_mode_t mode)
 252:.././hal/sam3u1c/inc/sam/ioport_pio.h **** {
 253:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
 254:.././hal/sam3u1c/inc/sam/ioport_pio.h **** 			arch_ioport_pin_to_mask(pin), mode);
 255:.././hal/sam3u1c/inc/sam/ioport_pio.h **** }
 1032              	 .loc 5 255 1
 1033 00d0 00BF     	 nop
 1034              	.LBE36:
 1035              	.LBE35:
 219:.././hal/sam3u1c/inc/ioport.h **** 	arch_ioport_set_pin_mode(pin, mode);
 220:.././hal/sam3u1c/inc/ioport.h **** }
 1036              	 .loc 4 220 1
 1037 00d2 00BF     	 nop
 1038 00d4 3437     	 adds r7,r7,#52
 1039              	.LCFI49:
 1040              	 .cfi_def_cfa_offset 4
 1041 00d6 BD46     	 mov sp,r7
 1042              	.LCFI50:
 1043              	 .cfi_def_cfa_register 13
 1044              	 
 1045 00d8 80BC     	 pop {r7}
 1046              	.LCFI51:
 1047              	 .cfi_restore 7
 1048              	 .cfi_def_cfa_offset 0
 1049 00da 7047     	 bx lr
 1050              	 .cfi_endproc
 1051              	.LFE116:
 1053              	 .section .text.sleepmgr_sleep,"ax",%progbits
 1054              	 .align 1
 1055              	 .syntax unified
 1056              	 .thumb
 1057              	 .thumb_func
 1058              	 .fpu softvfp
 1060              	sleepmgr_sleep:
 1061              	.LFB165:
 1062              	 .file 6 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
   1:.././hal/sam3u1c/inc/sam/sleepmgr.h **** /**
   2:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \file
   3:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
   4:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \brief SAM3/SAM4 Sleep manager implementation.
   5:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
   6:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * Copyright (c) 2012 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
   8:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  10:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  12:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  15:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  18:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  22:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  25:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  28:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  40:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  *
  42:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  */
  43:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  44:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #ifndef SAM_SLEEPMGR_INCLUDED
  45:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #define SAM_SLEEPMGR_INCLUDED
  46:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  47:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #ifdef __cplusplus
  48:.././hal/sam3u1c/inc/sam/sleepmgr.h **** extern "C" {
  49:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #endif
  50:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  51:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #include <compiler.h>
  52:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #include <conf_sleepmgr.h>
  53:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #include <sleep.h>
  54:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #include <interrupt.h>
  55:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  56:.././hal/sam3u1c/inc/sam/sleepmgr.h **** /**
  57:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \weakgroup sleepmgr_group
  58:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * @{
  59:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  */
  60:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #if (SAMG51 || SAMG53 || SAMG54)
  61:.././hal/sam3u1c/inc/sam/sleepmgr.h **** enum sleepmgr_mode {
  62:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	//! Active mode.
  63:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_ACTIVE = 0,
  64:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	/*! Wait mode, wakeup fast (in 3ms).
  65:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  Potential Wake Up sources: fast startup events */
  66:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_WAIT_FAST,
  67:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	/*! Wait mode.
  68:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  Potential Wake Up sources: fast startup events */
  69:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_WAIT,
  70:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  71:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_NR_OF_MODES,
  72:.././hal/sam3u1c/inc/sam/sleepmgr.h **** };
  73:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  74:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #else
  75:.././hal/sam3u1c/inc/sam/sleepmgr.h **** enum sleepmgr_mode {
  76:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	//! Active mode.
  77:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_ACTIVE = 0,
  78:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	/*! WFE sleep mode.
  79:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  Potential Wake Up sources:
  80:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  fast startup events (USB, RTC, RTT, WKUPs),
  81:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  interrupt, and events. */
  82:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_SLEEP_WFE,
  83:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	/*! WFI sleep mode.
  84:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 * Potential Wake Up sources: fast startup events and interrupt. */
  85:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_SLEEP_WFI,
  86:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	/*! Wait mode, wakeup fast (in 3ms).
  87:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  XTAL is not disabled when sleep.
  88:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  Potential Wake Up sources: fast startup events */
  89:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_WAIT_FAST,
  90:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	/*! Wait mode.
  91:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	 *  Potential Wake Up sources: fast startup events */
  92:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_WAIT,
  93:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	//! Backup mode. Potential Wake Up sources: WKUPs, SM, RTT, RTC.
  94:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_BACKUP,
  95:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
  96:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	SLEEPMGR_NR_OF_MODES,
  97:.././hal/sam3u1c/inc/sam/sleepmgr.h **** };
  98:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #endif
  99:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
 100:.././hal/sam3u1c/inc/sam/sleepmgr.h **** /**
 101:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \internal
 102:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * \name Internal arrays
 103:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  * @{
 104:.././hal/sam3u1c/inc/sam/sleepmgr.h ****  */
 105:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #if defined(CONFIG_SLEEPMGR_ENABLE) || defined(__DOXYGEN__)
 106:.././hal/sam3u1c/inc/sam/sleepmgr.h **** //! Sleep mode lock counters
 107:.././hal/sam3u1c/inc/sam/sleepmgr.h **** extern uint8_t sleepmgr_locks[];
 108:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 109:.././hal/sam3u1c/inc/sam/sleepmgr.h **** //! @}
 110:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
 111:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
 112:.././hal/sam3u1c/inc/sam/sleepmgr.h **** static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
 113:.././hal/sam3u1c/inc/sam/sleepmgr.h **** {
 1063              	 .loc 6 113 1
 1064              	 .cfi_startproc
 1065              	 
 1066              	 
 1067 0000 80B5     	 push {r7,lr}
 1068              	.LCFI52:
 1069              	 .cfi_def_cfa_offset 8
 1070              	 .cfi_offset 7,-8
 1071              	 .cfi_offset 14,-4
 1072 0002 82B0     	 sub sp,sp,#8
 1073              	.LCFI53:
 1074              	 .cfi_def_cfa_offset 16
 1075 0004 00AF     	 add r7,sp,#0
 1076              	.LCFI54:
 1077              	 .cfi_def_cfa_register 7
 1078 0006 0346     	 mov r3,r0
 1079 0008 FB71     	 strb r3,[r7,#7]
 1080              	.LBB45:
 1081              	.LBB46:
 1082              	 .file 7 ".././hal/sam3u1c/inc/core_cmFunc.h"
   1:.././hal/sam3u1c/inc/core_cmFunc.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @date     19. January 2012
   6:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
   7:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  10:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:.././hal/sam3u1c/inc/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:.././hal/sam3u1c/inc/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  15:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  22:.././hal/sam3u1c/inc/core_cmFunc.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  24:.././hal/sam3u1c/inc/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  27:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  28:.././hal/sam3u1c/inc/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:.././hal/sam3u1c/inc/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:.././hal/sam3u1c/inc/core_cmFunc.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  33:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  34:.././hal/sam3u1c/inc/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmFunc.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  37:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  41:.././hal/sam3u1c/inc/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:.././hal/sam3u1c/inc/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  44:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Control Register
  45:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  46:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
  47:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  48:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Control Register value
  49:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  50:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  51:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  52:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regControl);
  54:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  55:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  56:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  57:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Control Register
  58:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  59:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  61:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  63:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  64:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  65:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regControl = control;
  67:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  68:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  69:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  70:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get IPSR Register
  71:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  72:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  73:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  74:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               IPSR Register value
  75:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  76:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  77:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  78:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regIPSR);
  80:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  81:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  82:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  83:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get APSR Register
  84:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  85:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  87:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               APSR Register value
  88:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  89:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  90:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  91:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regAPSR);
  93:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  94:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  95:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  96:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
  97:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  98:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 100:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               xPSR Register value
 101:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 102:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 103:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 104:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regXPSR);
 106:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 107:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 108:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 109:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 111:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 113:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               PSP Register value
 114:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 115:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 116:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 117:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regProcessStackPointer);
 119:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 120:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 121:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 122:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 124:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 126:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 128:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 129:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 130:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 133:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 134:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 135:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 137:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 139:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               MSP Register value
 140:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 141:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 142:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 143:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regMainStackPointer);
 145:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 146:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 147:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 148:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 150:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 152:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 154:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 155:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 156:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 159:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 160:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 161:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Priority Mask
 162:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 163:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 165:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Priority Mask value
 166:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 167:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 168:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 169:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regPriMask);
 171:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 172:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 173:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 174:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Priority Mask
 175:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 176:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 178:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 180:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 181:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 182:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regPriMask = (priMask);
 184:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 185:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 186:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 187:.././hal/sam3u1c/inc/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 189:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Enable FIQ
 190:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 191:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:.././hal/sam3u1c/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 194:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 196:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 197:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Disable FIQ
 198:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 199:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:.././hal/sam3u1c/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 202:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 204:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 205:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Base Priority
 206:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 207:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 209:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Base Priority register value
 210:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 211:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 212:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 213:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regBasePri);
 215:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 216:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 217:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 218:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Base Priority
 219:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 220:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 222:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 224:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 225:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 226:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 229:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 230:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 231:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Fault Mask
 232:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 233:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 235:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Fault Mask register value
 236:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 237:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 238:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 239:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regFaultMask);
 241:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 242:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 243:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 244:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Fault Mask
 245:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 246:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 248:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 250:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 252:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 255:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 256:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 258:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 259:.././hal/sam3u1c/inc/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 261:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get FPSCR
 262:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 263:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 265:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 267:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 268:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 269:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regfpscr);
 272:.././hal/sam3u1c/inc/core_cmFunc.h **** #else
 273:.././hal/sam3u1c/inc/core_cmFunc.h ****    return(0);
 274:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
 275:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 276:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 277:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 278:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set FPSCR
 279:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 280:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 282:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 284:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 285:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 286:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regfpscr = (fpscr);
 289:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
 290:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 291:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 292:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 294:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 295:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:.././hal/sam3u1c/inc/core_cmFunc.h **** /* IAR iccarm specific functions */
 297:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 298:.././hal/sam3u1c/inc/core_cmFunc.h **** #include <cmsis_iar.h>
 299:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 300:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 301:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:.././hal/sam3u1c/inc/core_cmFunc.h **** /* TI CCS specific functions */
 303:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 304:.././hal/sam3u1c/inc/core_cmFunc.h **** #include <cmsis_ccs.h>
 305:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 306:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 307:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:.././hal/sam3u1c/inc/core_cmFunc.h **** /* GNU gcc specific functions */
 309:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 310:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 311:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 312:.././hal/sam3u1c/inc/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 313:.././hal/sam3u1c/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 314:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 315:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 316:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 317:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 318:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 319:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 320:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 321:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 322:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 323:.././hal/sam3u1c/inc/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 324:.././hal/sam3u1c/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 325:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 326:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 327:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 328:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 1083              	 .loc 7 328 3
 1084              	 .syntax unified
 1085              	
 1086 000a 72B6     	 cpsid i
 1087              	
 329:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 1088              	 .loc 7 329 1
 1089              	 .thumb
 1090              	 .syntax unified
 1091 000c 00BF     	 nop
 1092              	.LBE46:
 1093              	.LBE45:
 1094              	.LBB47:
 1095              	.LBB48:
 1096              	 .file 8 ".././hal/sam3u1c/inc/core_cmInstr.h"
   1:.././hal/sam3u1c/inc/core_cmInstr.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @date     07. February 2012
   6:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
   7:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  10:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  15:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  22:.././hal/sam3u1c/inc/core_cmInstr.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  24:.././hal/sam3u1c/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  27:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  28:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:.././hal/sam3u1c/inc/core_cmInstr.h ****   Access to dedicated instructions
  31:.././hal/sam3u1c/inc/core_cmInstr.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmInstr.h **** */
  33:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  34:.././hal/sam3u1c/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  37:.././hal/sam3u1c/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  41:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  42:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
  43:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  44:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  46:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __NOP                             __nop
  47:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  48:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  49:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  51:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
  53:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  54:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFI                             __wfi
  55:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  56:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  57:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
  58:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  59:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  62:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFE                             __wfe
  63:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  64:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  65:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
  66:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  67:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  69:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SEV                             __sev
  70:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  71:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  72:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  74:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  78:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  80:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  81:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  83:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  86:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  88:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  89:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  91:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  94:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  96:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  97:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  99:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 101:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 103:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 104:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __REV                             __rev
 105:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 106:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 107:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 109:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 111:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 113:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 114:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 116:.././hal/sam3u1c/inc/core_cmInstr.h ****   rev16 r0, r0
 117:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 118:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 119:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 120:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 121:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 123:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 125:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 127:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 128:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 130:.././hal/sam3u1c/inc/core_cmInstr.h ****   revsh r0, r0
 131:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 132:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 133:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 134:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 135:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 137:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 139:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Rotated value
 142:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 143:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ROR                             __ror
 144:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 145:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 146:.././hal/sam3u1c/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 148:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 150:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 152:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 154:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 155:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 156:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 157:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 158:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 160:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 162:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 165:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 167:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 168:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 170:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 172:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 175:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 177:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 178:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 180:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 182:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 185:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 187:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 188:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 190:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 192:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 193:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 195:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 196:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 197:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 199:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 200:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 202:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 204:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 205:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 207:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 208:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 209:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 211:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 212:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 214:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 216:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 217:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 219:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 220:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 221:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 223:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 224:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 226:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 228:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 229:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 230:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 231:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 232:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 233:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 234:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates a signed value.
 235:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 236:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 239:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 240:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 241:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 242:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 243:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 245:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 246:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 247:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 250:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 251:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __USAT                            __usat
 252:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 253:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 254:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 255:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 256:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 258:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 260:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 261:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLZ                             __clz
 262:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 263:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 265:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 266:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 267:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:.././hal/sam3u1c/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 270:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_iar.h>
 271:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 272:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 273:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:.././hal/sam3u1c/inc/core_cmInstr.h **** /* TI CCS specific functions */
 275:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 276:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 278:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 279:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:.././hal/sam3u1c/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 281:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 282:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
 283:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 284:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 286:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 288:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 289:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 290:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 291:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 292:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 294:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
 296:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 297:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 299:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 301:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 302:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 303:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
 304:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 305:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 308:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 310:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 312:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 313:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 314:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
 315:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 316:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 318:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 320:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("sev");
 321:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 322:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 323:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 324:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 326:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 330:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 332:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("isb");
 333:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 334:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 335:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 336:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 338:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 341:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 343:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 345:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 346:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 347:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 349:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 352:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 354:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("dmb");
 1097              	 .loc 8 354 3
 1098              	 .syntax unified
 1099              	
 1100 000e BFF35F8F 	 dmb
 1101              	
 355:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 1102              	 .loc 8 355 1
 1103              	 .thumb
 1104              	 .syntax unified
 1105 0012 00BF     	 nop
 1106              	.LBE48:
 1107              	.LBE47:
 114:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	Assert(sleep_mode != SLEEPMGR_ACTIVE);
 115:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 116:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	cpu_irq_disable();
 1108              	 .loc 6 116 2
 1109 0014 054B     	 ldr r3,.L96
 1110 0016 0022     	 movs r2,#0
 1111 0018 1A70     	 strb r2,[r3]
 117:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
 118:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	// Atomically enable the global interrupts and enter the sleep mode.
 119:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	pmc_sleep(sleep_mode);
 1112              	 .loc 6 119 2
 1113 001a FB79     	 ldrb r3,[r7,#7]
 1114 001c 1846     	 mov r0,r3
 1115 001e 044B     	 ldr r3,.L96+4
 1116 0020 9847     	 blx r3
 1117              	.LVL27:
 120:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #else
 121:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	UNUSED(sleep_mode);
 122:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 	cpu_irq_enable();
 123:.././hal/sam3u1c/inc/sam/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 124:.././hal/sam3u1c/inc/sam/sleepmgr.h **** 
 125:.././hal/sam3u1c/inc/sam/sleepmgr.h **** }
 1118              	 .loc 6 125 1
 1119 0022 00BF     	 nop
 1120 0024 0837     	 adds r7,r7,#8
 1121              	.LCFI55:
 1122              	 .cfi_def_cfa_offset 8
 1123 0026 BD46     	 mov sp,r7
 1124              	.LCFI56:
 1125              	 .cfi_def_cfa_register 13
 1126              	 
 1127 0028 80BD     	 pop {r7,pc}
 1128              	.L97:
 1129 002a 00BF     	 .align 2
 1130              	.L96:
 1131 002c 00000000 	 .word g_interrupt_enabled
 1132 0030 00000000 	 .word pmc_sleep
 1133              	 .cfi_endproc
 1134              	.LFE165:
 1136              	 .section .text.sleepmgr_init,"ax",%progbits
 1137              	 .align 1
 1138              	 .syntax unified
 1139              	 .thumb
 1140              	 .thumb_func
 1141              	 .fpu softvfp
 1143              	sleepmgr_init:
 1144              	.LFB166:
 1145              	 .file 9 ".././hal/sam3u1c/inc/sleepmgr.h"
   1:.././hal/sam3u1c/inc/sleepmgr.h **** /**
   2:.././hal/sam3u1c/inc/sleepmgr.h ****  * \file
   3:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   4:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Sleep manager
   5:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   6:.././hal/sam3u1c/inc/sleepmgr.h ****  * Copyright (c) 2010 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   8:.././hal/sam3u1c/inc/sleepmgr.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  10:.././hal/sam3u1c/inc/sleepmgr.h ****  * \page License
  11:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  12:.././hal/sam3u1c/inc/sleepmgr.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sleepmgr.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  15:.././hal/sam3u1c/inc/sleepmgr.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sleepmgr.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  18:.././hal/sam3u1c/inc/sleepmgr.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sleepmgr.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sleepmgr.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  22:.././hal/sam3u1c/inc/sleepmgr.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sleepmgr.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  25:.././hal/sam3u1c/inc/sleepmgr.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sleepmgr.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  28:.././hal/sam3u1c/inc/sleepmgr.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sleepmgr.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sleepmgr.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sleepmgr.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sleepmgr.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sleepmgr.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sleepmgr.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sleepmgr.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sleepmgr.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sleepmgr.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sleepmgr.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  40:.././hal/sam3u1c/inc/sleepmgr.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  42:.././hal/sam3u1c/inc/sleepmgr.h ****  */
  43:.././hal/sam3u1c/inc/sleepmgr.h **** #ifndef SLEEPMGR_H
  44:.././hal/sam3u1c/inc/sleepmgr.h **** #define SLEEPMGR_H
  45:.././hal/sam3u1c/inc/sleepmgr.h **** 
  46:.././hal/sam3u1c/inc/sleepmgr.h **** #include <compiler.h>
  47:.././hal/sam3u1c/inc/sleepmgr.h **** #include <parts.h>
  48:.././hal/sam3u1c/inc/sleepmgr.h **** 
  49:.././hal/sam3u1c/inc/sleepmgr.h **** #if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM
  50:.././hal/sam3u1c/inc/sleepmgr.h **** # include "sam/sleepmgr.h"
  51:.././hal/sam3u1c/inc/sleepmgr.h **** #elif XMEGA
  52:.././hal/sam3u1c/inc/sleepmgr.h **** # include "xmega/sleepmgr.h"
  53:.././hal/sam3u1c/inc/sleepmgr.h **** #elif UC3
  54:.././hal/sam3u1c/inc/sleepmgr.h **** # include "uc3/sleepmgr.h"
  55:.././hal/sam3u1c/inc/sleepmgr.h **** #elif SAM4L
  56:.././hal/sam3u1c/inc/sleepmgr.h **** # include "sam4l/sleepmgr.h"
  57:.././hal/sam3u1c/inc/sleepmgr.h **** #elif MEGA
  58:.././hal/sam3u1c/inc/sleepmgr.h **** # include "mega/sleepmgr.h"
  59:.././hal/sam3u1c/inc/sleepmgr.h **** #elif (SAMD20 || SAMD21 || SAMR21 || SAMD11)
  60:.././hal/sam3u1c/inc/sleepmgr.h **** # include "samd/sleepmgr.h"
  61:.././hal/sam3u1c/inc/sleepmgr.h **** #else
  62:.././hal/sam3u1c/inc/sleepmgr.h **** # error Unsupported device.
  63:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
  64:.././hal/sam3u1c/inc/sleepmgr.h **** 
  65:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef __cplusplus
  66:.././hal/sam3u1c/inc/sleepmgr.h **** extern "C" {
  67:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
  68:.././hal/sam3u1c/inc/sleepmgr.h **** 
  69:.././hal/sam3u1c/inc/sleepmgr.h **** /**
  70:.././hal/sam3u1c/inc/sleepmgr.h ****  * \defgroup sleepmgr_group Sleep manager
  71:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  72:.././hal/sam3u1c/inc/sleepmgr.h ****  * The sleep manager is a service for ensuring that the device is not put to
  73:.././hal/sam3u1c/inc/sleepmgr.h ****  * sleep in deeper sleep modes than the system (e.g., peripheral drivers,
  74:.././hal/sam3u1c/inc/sleepmgr.h ****  * services or the application) allows at any given time.
  75:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  76:.././hal/sam3u1c/inc/sleepmgr.h ****  * It is based on the use of lock counting for the individual sleep modes, and
  77:.././hal/sam3u1c/inc/sleepmgr.h ****  * will put the device to sleep in the shallowest sleep mode that has a non-zero
  78:.././hal/sam3u1c/inc/sleepmgr.h ****  * lock count. The drivers/services/application can change these counts by use
  79:.././hal/sam3u1c/inc/sleepmgr.h ****  * of \ref sleepmgr_lock_mode and \ref sleepmgr_unlock_mode.
  80:.././hal/sam3u1c/inc/sleepmgr.h ****  * Refer to \ref sleepmgr_mode for a list of the sleep modes available for
  81:.././hal/sam3u1c/inc/sleepmgr.h ****  * locking, and the device datasheet for information on their effect.
  82:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  83:.././hal/sam3u1c/inc/sleepmgr.h ****  * The application must supply the file \ref conf_sleepmgr.h.
  84:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  85:.././hal/sam3u1c/inc/sleepmgr.h ****  * For the sleep manager to be enabled, the symbol \ref CONFIG_SLEEPMGR_ENABLE
  86:.././hal/sam3u1c/inc/sleepmgr.h ****  * must be defined, e.g., in \ref conf_sleepmgr.h. If this symbol is not
  87:.././hal/sam3u1c/inc/sleepmgr.h ****  * defined, the functions are replaced with dummy functions and no RAM is used.
  88:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  89:.././hal/sam3u1c/inc/sleepmgr.h ****  * @{
  90:.././hal/sam3u1c/inc/sleepmgr.h ****  */
  91:.././hal/sam3u1c/inc/sleepmgr.h **** 
  92:.././hal/sam3u1c/inc/sleepmgr.h **** /**
  93:.././hal/sam3u1c/inc/sleepmgr.h ****  * \def CONFIG_SLEEPMGR_ENABLE
  94:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Configuration symbol for enabling the sleep manager
  95:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  96:.././hal/sam3u1c/inc/sleepmgr.h ****  * If this symbol is not defined, the functions of this service are replaced
  97:.././hal/sam3u1c/inc/sleepmgr.h ****  * with dummy functions. This is useful for reducing code size and execution
  98:.././hal/sam3u1c/inc/sleepmgr.h ****  * time if the sleep manager is not needed in the application.
  99:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 100:.././hal/sam3u1c/inc/sleepmgr.h ****  * This symbol may be defined in \ref conf_sleepmgr.h.
 101:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 102:.././hal/sam3u1c/inc/sleepmgr.h **** #if defined(__DOXYGEN__) && !defined(CONFIG_SLEEPMGR_ENABLE)
 103:.././hal/sam3u1c/inc/sleepmgr.h **** #  define CONFIG_SLEEPMGR_ENABLE
 104:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
 105:.././hal/sam3u1c/inc/sleepmgr.h **** 
 106:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 107:.././hal/sam3u1c/inc/sleepmgr.h ****  * \enum sleepmgr_mode
 108:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Sleep mode locks
 109:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 110:.././hal/sam3u1c/inc/sleepmgr.h ****  * Identifiers for the different sleep mode locks.
 111:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 112:.././hal/sam3u1c/inc/sleepmgr.h **** 
 113:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 114:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Initialize the lock counts
 115:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 116:.././hal/sam3u1c/inc/sleepmgr.h ****  * Sets all lock counts to 0, except the very last one, which is set to 1. This
 117:.././hal/sam3u1c/inc/sleepmgr.h ****  * is done to simplify the algorithm for finding the deepest allowable sleep
 118:.././hal/sam3u1c/inc/sleepmgr.h ****  * mode in \ref sleepmgr_enter_sleep.
 119:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 120:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_init(void)
 121:.././hal/sam3u1c/inc/sleepmgr.h **** {
 1146              	 .loc 9 121 1
 1147              	 .cfi_startproc
 1148              	 
 1149              	 
 1150              	 
 1151 0000 80B4     	 push {r7}
 1152              	.LCFI57:
 1153              	 .cfi_def_cfa_offset 4
 1154              	 .cfi_offset 7,-4
 1155 0002 83B0     	 sub sp,sp,#12
 1156              	.LCFI58:
 1157              	 .cfi_def_cfa_offset 16
 1158 0004 00AF     	 add r7,sp,#0
 1159              	.LCFI59:
 1160              	 .cfi_def_cfa_register 7
 122:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 123:.././hal/sam3u1c/inc/sleepmgr.h **** 	uint8_t i;
 124:.././hal/sam3u1c/inc/sleepmgr.h **** 
 125:.././hal/sam3u1c/inc/sleepmgr.h **** 	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
 1161              	 .loc 9 125 9
 1162 0006 0023     	 movs r3,#0
 1163 0008 FB71     	 strb r3,[r7,#7]
 1164              	 .loc 9 125 2
 1165 000a 06E0     	 b .L99
 1166              	.L100:
 126:.././hal/sam3u1c/inc/sleepmgr.h **** 		sleepmgr_locks[i] = 0;
 1167              	 .loc 9 126 17 discriminator 3
 1168 000c FB79     	 ldrb r3,[r7,#7]
 1169              	 .loc 9 126 21 discriminator 3
 1170 000e 084A     	 ldr r2,.L101
 1171 0010 0021     	 movs r1,#0
 1172 0012 D154     	 strb r1,[r2,r3]
 125:.././hal/sam3u1c/inc/sleepmgr.h **** 		sleepmgr_locks[i] = 0;
 1173              	 .loc 9 125 45 discriminator 3
 1174 0014 FB79     	 ldrb r3,[r7,#7]
 1175 0016 0133     	 adds r3,r3,#1
 1176 0018 FB71     	 strb r3,[r7,#7]
 1177              	.L99:
 125:.././hal/sam3u1c/inc/sleepmgr.h **** 		sleepmgr_locks[i] = 0;
 1178              	 .loc 9 125 2 discriminator 1
 1179 001a FB79     	 ldrb r3,[r7,#7]
 1180 001c 042B     	 cmp r3,#4
 1181 001e F5D9     	 bls .L100
 127:.././hal/sam3u1c/inc/sleepmgr.h **** 	}
 128:.././hal/sam3u1c/inc/sleepmgr.h **** 	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
 1182              	 .loc 9 128 43
 1183 0020 034B     	 ldr r3,.L101
 1184 0022 0122     	 movs r2,#1
 1185 0024 5A71     	 strb r2,[r3,#5]
 129:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 130:.././hal/sam3u1c/inc/sleepmgr.h **** }
 1186              	 .loc 9 130 1
 1187 0026 00BF     	 nop
 1188 0028 0C37     	 adds r7,r7,#12
 1189              	.LCFI60:
 1190              	 .cfi_def_cfa_offset 4
 1191 002a BD46     	 mov sp,r7
 1192              	.LCFI61:
 1193              	 .cfi_def_cfa_register 13
 1194              	 
 1195 002c 80BC     	 pop {r7}
 1196              	.LCFI62:
 1197              	 .cfi_restore 7
 1198              	 .cfi_def_cfa_offset 0
 1199 002e 7047     	 bx lr
 1200              	.L102:
 1201              	 .align 2
 1202              	.L101:
 1203 0030 00000000 	 .word sleepmgr_locks
 1204              	 .cfi_endproc
 1205              	.LFE166:
 1207              	 .section .text.sleepmgr_get_sleep_mode,"ax",%progbits
 1208              	 .align 1
 1209              	 .syntax unified
 1210              	 .thumb
 1211              	 .thumb_func
 1212              	 .fpu softvfp
 1214              	sleepmgr_get_sleep_mode:
 1215              	.LFB169:
 131:.././hal/sam3u1c/inc/sleepmgr.h **** 
 132:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 133:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Increase lock count for a sleep mode
 134:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 135:.././hal/sam3u1c/inc/sleepmgr.h ****  * Increases the lock count for \a mode to ensure that the sleep manager does
 136:.././hal/sam3u1c/inc/sleepmgr.h ****  * not put the device to sleep in the deeper sleep modes.
 137:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 138:.././hal/sam3u1c/inc/sleepmgr.h ****  * \param mode Sleep mode to lock.
 139:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 140:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
 141:.././hal/sam3u1c/inc/sleepmgr.h **** {
 142:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 143:.././hal/sam3u1c/inc/sleepmgr.h **** 	irqflags_t flags;
 144:.././hal/sam3u1c/inc/sleepmgr.h **** 
 145:.././hal/sam3u1c/inc/sleepmgr.h **** 	Assert(sleepmgr_locks[mode] < 0xff);
 146:.././hal/sam3u1c/inc/sleepmgr.h **** 
 147:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Enter a critical section
 148:.././hal/sam3u1c/inc/sleepmgr.h **** 	flags = cpu_irq_save();
 149:.././hal/sam3u1c/inc/sleepmgr.h **** 
 150:.././hal/sam3u1c/inc/sleepmgr.h **** 	++sleepmgr_locks[mode];
 151:.././hal/sam3u1c/inc/sleepmgr.h **** 
 152:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Leave the critical section
 153:.././hal/sam3u1c/inc/sleepmgr.h **** 	cpu_irq_restore(flags);
 154:.././hal/sam3u1c/inc/sleepmgr.h **** #else
 155:.././hal/sam3u1c/inc/sleepmgr.h **** 	UNUSED(mode);
 156:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 157:.././hal/sam3u1c/inc/sleepmgr.h **** }
 158:.././hal/sam3u1c/inc/sleepmgr.h **** 
 159:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 160:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Decrease lock count for a sleep mode
 161:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 162:.././hal/sam3u1c/inc/sleepmgr.h ****  * Decreases the lock count for \a mode. If the lock count reaches 0, the sleep
 163:.././hal/sam3u1c/inc/sleepmgr.h ****  * manager can put the device to sleep in the deeper sleep modes.
 164:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 165:.././hal/sam3u1c/inc/sleepmgr.h ****  * \param mode Sleep mode to unlock.
 166:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 167:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
 168:.././hal/sam3u1c/inc/sleepmgr.h **** {
 169:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 170:.././hal/sam3u1c/inc/sleepmgr.h **** 	irqflags_t flags;
 171:.././hal/sam3u1c/inc/sleepmgr.h **** 
 172:.././hal/sam3u1c/inc/sleepmgr.h **** 	Assert(sleepmgr_locks[mode]);
 173:.././hal/sam3u1c/inc/sleepmgr.h **** 
 174:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Enter a critical section
 175:.././hal/sam3u1c/inc/sleepmgr.h **** 	flags = cpu_irq_save();
 176:.././hal/sam3u1c/inc/sleepmgr.h **** 
 177:.././hal/sam3u1c/inc/sleepmgr.h **** 	--sleepmgr_locks[mode];
 178:.././hal/sam3u1c/inc/sleepmgr.h **** 
 179:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Leave the critical section
 180:.././hal/sam3u1c/inc/sleepmgr.h **** 	cpu_irq_restore(flags);
 181:.././hal/sam3u1c/inc/sleepmgr.h **** #else
 182:.././hal/sam3u1c/inc/sleepmgr.h **** 	UNUSED(mode);
 183:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 184:.././hal/sam3u1c/inc/sleepmgr.h **** }
 185:.././hal/sam3u1c/inc/sleepmgr.h **** 
 186:.././hal/sam3u1c/inc/sleepmgr.h ****  /**
 187:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Retrieves the deepest allowable sleep mode
 188:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 189:.././hal/sam3u1c/inc/sleepmgr.h ****  * Searches through the sleep mode lock counts, starting at the shallowest sleep
 190:.././hal/sam3u1c/inc/sleepmgr.h ****  * mode, until the first non-zero lock count is found. The deepest allowable
 191:.././hal/sam3u1c/inc/sleepmgr.h ****  * sleep mode is then returned.
 192:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 193:.././hal/sam3u1c/inc/sleepmgr.h **** static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
 194:.././hal/sam3u1c/inc/sleepmgr.h **** {
 1216              	 .loc 9 194 1
 1217              	 .cfi_startproc
 1218              	 
 1219              	 
 1220              	 
 1221 0000 80B4     	 push {r7}
 1222              	.LCFI63:
 1223              	 .cfi_def_cfa_offset 4
 1224              	 .cfi_offset 7,-4
 1225 0002 83B0     	 sub sp,sp,#12
 1226              	.LCFI64:
 1227              	 .cfi_def_cfa_offset 16
 1228 0004 00AF     	 add r7,sp,#0
 1229              	.LCFI65:
 1230              	 .cfi_def_cfa_register 7
 195:.././hal/sam3u1c/inc/sleepmgr.h **** 	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
 1231              	 .loc 9 195 21
 1232 0006 0023     	 movs r3,#0
 1233 0008 FB71     	 strb r3,[r7,#7]
 196:.././hal/sam3u1c/inc/sleepmgr.h **** 
 197:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 198:.././hal/sam3u1c/inc/sleepmgr.h **** 	uint8_t *lock_ptr = sleepmgr_locks;
 1234              	 .loc 9 198 11
 1235 000a 094B     	 ldr r3,.L107
 1236 000c 3B60     	 str r3,[r7]
 199:.././hal/sam3u1c/inc/sleepmgr.h **** 
 200:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Find first non-zero lock count, starting with the shallowest modes.
 201:.././hal/sam3u1c/inc/sleepmgr.h **** 	while (!(*lock_ptr)) {
 1237              	 .loc 9 201 8
 1238 000e 05E0     	 b .L104
 1239              	.L105:
 202:.././hal/sam3u1c/inc/sleepmgr.h **** 		lock_ptr++;
 1240              	 .loc 9 202 11
 1241 0010 3B68     	 ldr r3,[r7]
 1242 0012 0133     	 adds r3,r3,#1
 1243 0014 3B60     	 str r3,[r7]
 203:.././hal/sam3u1c/inc/sleepmgr.h **** 		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
 1244              	 .loc 9 203 14
 1245 0016 FB79     	 ldrb r3,[r7,#7]
 1246 0018 0133     	 adds r3,r3,#1
 1247 001a FB71     	 strb r3,[r7,#7]
 1248              	.L104:
 201:.././hal/sam3u1c/inc/sleepmgr.h **** 		lock_ptr++;
 1249              	 .loc 9 201 11
 1250 001c 3B68     	 ldr r3,[r7]
 1251 001e 1B78     	 ldrb r3,[r3]
 201:.././hal/sam3u1c/inc/sleepmgr.h **** 		lock_ptr++;
 1252              	 .loc 9 201 8
 1253 0020 002B     	 cmp r3,#0
 1254 0022 F5D0     	 beq .L105
 204:.././hal/sam3u1c/inc/sleepmgr.h **** 	}
 205:.././hal/sam3u1c/inc/sleepmgr.h **** 
 206:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Catch the case where one too many sleepmgr_unlock_mode() call has been
 207:.././hal/sam3u1c/inc/sleepmgr.h **** 	// performed on the deepest sleep mode.
 208:.././hal/sam3u1c/inc/sleepmgr.h **** 	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);
 209:.././hal/sam3u1c/inc/sleepmgr.h **** 
 210:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 211:.././hal/sam3u1c/inc/sleepmgr.h **** 
 212:.././hal/sam3u1c/inc/sleepmgr.h **** 	return sleep_mode;
 1255              	 .loc 9 212 9
 1256 0024 FB79     	 ldrb r3,[r7,#7]
 213:.././hal/sam3u1c/inc/sleepmgr.h **** }
 1257              	 .loc 9 213 1
 1258 0026 1846     	 mov r0,r3
 1259 0028 0C37     	 adds r7,r7,#12
 1260              	.LCFI66:
 1261              	 .cfi_def_cfa_offset 4
 1262 002a BD46     	 mov sp,r7
 1263              	.LCFI67:
 1264              	 .cfi_def_cfa_register 13
 1265              	 
 1266 002c 80BC     	 pop {r7}
 1267              	.LCFI68:
 1268              	 .cfi_restore 7
 1269              	 .cfi_def_cfa_offset 0
 1270 002e 7047     	 bx lr
 1271              	.L108:
 1272              	 .align 2
 1273              	.L107:
 1274 0030 00000000 	 .word sleepmgr_locks
 1275              	 .cfi_endproc
 1276              	.LFE169:
 1278              	 .section .text.sleepmgr_enter_sleep,"ax",%progbits
 1279              	 .align 1
 1280              	 .syntax unified
 1281              	 .thumb
 1282              	 .thumb_func
 1283              	 .fpu softvfp
 1285              	sleepmgr_enter_sleep:
 1286              	.LFB170:
 214:.././hal/sam3u1c/inc/sleepmgr.h **** 
 215:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 216:.././hal/sam3u1c/inc/sleepmgr.h ****  * \fn sleepmgr_enter_sleep
 217:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Go to sleep in the deepest allowed mode
 218:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 219:.././hal/sam3u1c/inc/sleepmgr.h ****  * Searches through the sleep mode lock counts, starting at the shallowest sleep
 220:.././hal/sam3u1c/inc/sleepmgr.h ****  * mode, until the first non-zero lock count is found. The device is then put to
 221:.././hal/sam3u1c/inc/sleepmgr.h ****  * sleep in the sleep mode that corresponds to the lock.
 222:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 223:.././hal/sam3u1c/inc/sleepmgr.h ****  * \note This function enables interrupts before going to sleep, and will leave
 224:.././hal/sam3u1c/inc/sleepmgr.h ****  * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 225:.././hal/sam3u1c/inc/sleepmgr.h ****  * mode being locked.
 226:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 227:.././hal/sam3u1c/inc/sleepmgr.h **** 
 228:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_enter_sleep(void)
 229:.././hal/sam3u1c/inc/sleepmgr.h **** {
 1287              	 .loc 9 229 1
 1288              	 .cfi_startproc
 1289              	 
 1290              	 
 1291 0000 80B5     	 push {r7,lr}
 1292              	.LCFI69:
 1293              	 .cfi_def_cfa_offset 8
 1294              	 .cfi_offset 7,-8
 1295              	 .cfi_offset 14,-4
 1296 0002 82B0     	 sub sp,sp,#8
 1297              	.LCFI70:
 1298              	 .cfi_def_cfa_offset 16
 1299 0004 00AF     	 add r7,sp,#0
 1300              	.LCFI71:
 1301              	 .cfi_def_cfa_register 7
 230:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 231:.././hal/sam3u1c/inc/sleepmgr.h **** 	enum sleepmgr_mode sleep_mode;
 232:.././hal/sam3u1c/inc/sleepmgr.h **** 
 233:.././hal/sam3u1c/inc/sleepmgr.h **** 	//cpu_irq_disable();
 234:.././hal/sam3u1c/inc/sleepmgr.h **** 
 235:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Find the deepest allowable sleep mode
 236:.././hal/sam3u1c/inc/sleepmgr.h **** 	sleep_mode = sleepmgr_get_sleep_mode();
 1302              	 .loc 9 236 15
 1303 0006 0B4B     	 ldr r3,.L112
 1304 0008 9847     	 blx r3
 1305              	.LVL28:
 1306 000a 0346     	 mov r3,r0
 1307 000c FB71     	 strb r3,[r7,#7]
 237:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Return right away if first mode (ACTIVE) is locked.
 238:.././hal/sam3u1c/inc/sleepmgr.h **** 	if (sleep_mode==SLEEPMGR_ACTIVE) {
 1308              	 .loc 9 238 5
 1309 000e FB79     	 ldrb r3,[r7,#7]
 1310 0010 002B     	 cmp r3,#0
 1311 0012 08D1     	 bne .L110
 239:.././hal/sam3u1c/inc/sleepmgr.h **** 		cpu_irq_enable();
 1312              	 .loc 9 239 3
 1313 0014 084B     	 ldr r3,.L112+4
 1314 0016 0122     	 movs r2,#1
 1315 0018 1A70     	 strb r2,[r3]
 1316              	.LBB49:
 1317              	.LBB50:
 354:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 1318              	 .loc 8 354 3
 1319              	 .syntax unified
 1320              	
 1321 001a BFF35F8F 	 dmb
 1322              	
 1323              	 .loc 8 355 1
 1324              	 .thumb
 1325              	 .syntax unified
 1326 001e 00BF     	 nop
 1327              	.LBE50:
 1328              	.LBE49:
 1329              	.LBB51:
 1330              	.LBB52:
 317:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 1331              	 .loc 7 317 3
 1332              	 .syntax unified
 1333              	
 1334 0020 62B6     	 cpsie i
 1335              	
 318:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 1336              	 .loc 7 318 1
 1337              	 .thumb
 1338              	 .syntax unified
 1339 0022 00BF     	 nop
 1340              	.LBE52:
 1341              	.LBE51:
 240:.././hal/sam3u1c/inc/sleepmgr.h **** 		return;
 1342              	 .loc 9 240 3
 1343 0024 03E0     	 b .L109
 1344              	.L110:
 241:.././hal/sam3u1c/inc/sleepmgr.h **** 	}
 242:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Enter the deepest allowable sleep mode with interrupts enabled
 243:.././hal/sam3u1c/inc/sleepmgr.h **** 	sleepmgr_sleep(sleep_mode);
 1345              	 .loc 9 243 2
 1346 0026 FB79     	 ldrb r3,[r7,#7]
 1347 0028 1846     	 mov r0,r3
 1348 002a 044B     	 ldr r3,.L112+8
 1349 002c 9847     	 blx r3
 1350              	.LVL29:
 1351              	.L109:
 244:.././hal/sam3u1c/inc/sleepmgr.h **** #else
 245:.././hal/sam3u1c/inc/sleepmgr.h **** 	cpu_irq_enable();
 246:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 247:.././hal/sam3u1c/inc/sleepmgr.h **** }
 1352              	 .loc 9 247 1
 1353 002e 0837     	 adds r7,r7,#8
 1354              	.LCFI72:
 1355              	 .cfi_def_cfa_offset 8
 1356 0030 BD46     	 mov sp,r7
 1357              	.LCFI73:
 1358              	 .cfi_def_cfa_register 13
 1359              	 
 1360 0032 80BD     	 pop {r7,pc}
 1361              	.L113:
 1362              	 .align 2
 1363              	.L112:
 1364 0034 00000000 	 .word sleepmgr_get_sleep_mode
 1365 0038 00000000 	 .word g_interrupt_enabled
 1366 003c 00000000 	 .word sleepmgr_sleep
 1367              	 .cfi_endproc
 1368              	.LFE170:
 1370              	 .section .text.genclk_config_defaults,"ax",%progbits
 1371              	 .align 1
 1372              	 .syntax unified
 1373              	 .thumb
 1374              	 .thumb_func
 1375              	 .fpu softvfp
 1377              	genclk_config_defaults:
 1378              	.LFB182:
 1379              	 .file 10 ".././hal/sam3u1c/inc/genclk.h"
   1:.././hal/sam3u1c/inc/genclk.h **** /**
   2:.././hal/sam3u1c/inc/genclk.h ****  * \file
   3:.././hal/sam3u1c/inc/genclk.h ****  *
   4:.././hal/sam3u1c/inc/genclk.h ****  * \brief Chip-specific generic clock management.
   5:.././hal/sam3u1c/inc/genclk.h ****  *
   6:.././hal/sam3u1c/inc/genclk.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/genclk.h ****  *
   8:.././hal/sam3u1c/inc/genclk.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/genclk.h ****  *
  10:.././hal/sam3u1c/inc/genclk.h ****  * \page License
  11:.././hal/sam3u1c/inc/genclk.h ****  *
  12:.././hal/sam3u1c/inc/genclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/genclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/genclk.h ****  *
  15:.././hal/sam3u1c/inc/genclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/genclk.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/genclk.h ****  *
  18:.././hal/sam3u1c/inc/genclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/genclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/genclk.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/genclk.h ****  *
  22:.././hal/sam3u1c/inc/genclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/genclk.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/genclk.h ****  *
  25:.././hal/sam3u1c/inc/genclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/genclk.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/genclk.h ****  *
  28:.././hal/sam3u1c/inc/genclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/genclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/genclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/genclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/genclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/genclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/genclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/genclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/genclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/genclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/genclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/genclk.h ****  *
  40:.././hal/sam3u1c/inc/genclk.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/genclk.h ****  *
  42:.././hal/sam3u1c/inc/genclk.h ****  */
  43:.././hal/sam3u1c/inc/genclk.h **** 
  44:.././hal/sam3u1c/inc/genclk.h **** #ifndef CHIP_GENCLK_H_INCLUDED
  45:.././hal/sam3u1c/inc/genclk.h **** #define CHIP_GENCLK_H_INCLUDED
  46:.././hal/sam3u1c/inc/genclk.h **** 
  47:.././hal/sam3u1c/inc/genclk.h **** #include <osc.h>
  48:.././hal/sam3u1c/inc/genclk.h **** #include <pll.h>
  49:.././hal/sam3u1c/inc/genclk.h **** 
  50:.././hal/sam3u1c/inc/genclk.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/genclk.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/genclk.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/genclk.h **** extern "C" {
  54:.././hal/sam3u1c/inc/genclk.h **** #endif
  55:.././hal/sam3u1c/inc/genclk.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/genclk.h **** /// @endcond
  57:.././hal/sam3u1c/inc/genclk.h **** 
  58:.././hal/sam3u1c/inc/genclk.h **** /**
  59:.././hal/sam3u1c/inc/genclk.h ****  * \weakgroup genclk_group
  60:.././hal/sam3u1c/inc/genclk.h ****  * @{
  61:.././hal/sam3u1c/inc/genclk.h ****  */
  62:.././hal/sam3u1c/inc/genclk.h **** 
  63:.././hal/sam3u1c/inc/genclk.h **** //! \name Programmable Clock Identifiers (PCK)
  64:.././hal/sam3u1c/inc/genclk.h **** //@{
  65:.././hal/sam3u1c/inc/genclk.h **** #define GENCLK_PCK_0      0 //!< PCK0 ID
  66:.././hal/sam3u1c/inc/genclk.h **** #define GENCLK_PCK_1      1 //!< PCK1 ID
  67:.././hal/sam3u1c/inc/genclk.h **** #define GENCLK_PCK_2      2 //!< PCK2 ID
  68:.././hal/sam3u1c/inc/genclk.h **** //@}
  69:.././hal/sam3u1c/inc/genclk.h **** 
  70:.././hal/sam3u1c/inc/genclk.h **** //! \name Programmable Clock Sources (PCK)
  71:.././hal/sam3u1c/inc/genclk.h **** //@{
  72:.././hal/sam3u1c/inc/genclk.h **** 
  73:.././hal/sam3u1c/inc/genclk.h **** enum genclk_source {
  74:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_SLCK_RC       = 0, //!< Internal 32kHz RC oscillator as PCK source clock
  75:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_SLCK_XTAL     = 1, //!< External 32kHz crystal oscillator as PCK source clock
  76:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_SLCK_BYPASS   = 2, //!< External 32kHz bypass oscillator as PCK source clock
  77:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_MAINCK_4M_RC  = 3, //!< Internal 4MHz RC oscillator as PCK source clock
  78:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_MAINCK_8M_RC  = 4, //!< Internal 8MHz RC oscillator as PCK source clock
  79:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_MAINCK_12M_RC = 5, //!< Internal 12MHz RC oscillator as PCK source clock
  80:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_MAINCK_XTAL   = 6, //!< External crystal oscillator as PCK source clock
  81:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_MAINCK_BYPASS = 7, //!< External bypass oscillator as PCK source clock
  82:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_PLLACK        = 8, //!< Use PLLACK as PCK source clock
  83:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_PLLBCK        = 9, //!< Use PLLBCK as PCK source clock
  84:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_SRC_MCK           = 10, //!< Use Master Clk as PCK source clock
  85:.././hal/sam3u1c/inc/genclk.h **** };
  86:.././hal/sam3u1c/inc/genclk.h **** 
  87:.././hal/sam3u1c/inc/genclk.h **** //@}
  88:.././hal/sam3u1c/inc/genclk.h **** 
  89:.././hal/sam3u1c/inc/genclk.h **** //! \name Programmable Clock Prescalers (PCK)
  90:.././hal/sam3u1c/inc/genclk.h **** //@{
  91:.././hal/sam3u1c/inc/genclk.h **** 
  92:.././hal/sam3u1c/inc/genclk.h **** enum genclk_divider {
  93:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_1  = PMC_PCK_PRES_CLK_1, //!< Set PCK clock prescaler to 1
  94:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_2  = PMC_PCK_PRES_CLK_2, //!< Set PCK clock prescaler to 2
  95:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_4  = PMC_PCK_PRES_CLK_4, //!< Set PCK clock prescaler to 4
  96:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_8  = PMC_PCK_PRES_CLK_8, //!< Set PCK clock prescaler to 8
  97:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_16 = PMC_PCK_PRES_CLK_16, //!< Set PCK clock prescaler to 16
  98:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_32 = PMC_PCK_PRES_CLK_32, //!< Set PCK clock prescaler to 32
  99:.././hal/sam3u1c/inc/genclk.h **** 	GENCLK_PCK_PRES_64 = PMC_PCK_PRES_CLK_64, //!< Set PCK clock prescaler to 64
 100:.././hal/sam3u1c/inc/genclk.h **** };
 101:.././hal/sam3u1c/inc/genclk.h **** 
 102:.././hal/sam3u1c/inc/genclk.h **** //@}
 103:.././hal/sam3u1c/inc/genclk.h **** 
 104:.././hal/sam3u1c/inc/genclk.h **** struct genclk_config {
 105:.././hal/sam3u1c/inc/genclk.h **** 	uint32_t ctrl;
 106:.././hal/sam3u1c/inc/genclk.h **** };
 107:.././hal/sam3u1c/inc/genclk.h **** 
 108:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_config_defaults(struct genclk_config *p_cfg,
 109:.././hal/sam3u1c/inc/genclk.h **** 		uint32_t ul_id)
 110:.././hal/sam3u1c/inc/genclk.h **** {
 1380              	 .loc 10 110 1
 1381              	 .cfi_startproc
 1382              	 
 1383              	 
 1384              	 
 1385 0000 80B4     	 push {r7}
 1386              	.LCFI74:
 1387              	 .cfi_def_cfa_offset 4
 1388              	 .cfi_offset 7,-4
 1389 0002 83B0     	 sub sp,sp,#12
 1390              	.LCFI75:
 1391              	 .cfi_def_cfa_offset 16
 1392 0004 00AF     	 add r7,sp,#0
 1393              	.LCFI76:
 1394              	 .cfi_def_cfa_register 7
 1395 0006 7860     	 str r0,[r7,#4]
 1396 0008 3960     	 str r1,[r7]
 111:.././hal/sam3u1c/inc/genclk.h **** 	ul_id = ul_id;
 112:.././hal/sam3u1c/inc/genclk.h **** 	p_cfg->ctrl = 0;
 1397              	 .loc 10 112 14
 1398 000a 7B68     	 ldr r3,[r7,#4]
 1399 000c 0022     	 movs r2,#0
 1400 000e 1A60     	 str r2,[r3]
 113:.././hal/sam3u1c/inc/genclk.h **** }
 1401              	 .loc 10 113 1
 1402 0010 00BF     	 nop
 1403 0012 0C37     	 adds r7,r7,#12
 1404              	.LCFI77:
 1405              	 .cfi_def_cfa_offset 4
 1406 0014 BD46     	 mov sp,r7
 1407              	.LCFI78:
 1408              	 .cfi_def_cfa_register 13
 1409              	 
 1410 0016 80BC     	 pop {r7}
 1411              	.LCFI79:
 1412              	 .cfi_restore 7
 1413              	 .cfi_def_cfa_offset 0
 1414 0018 7047     	 bx lr
 1415              	 .cfi_endproc
 1416              	.LFE182:
 1418              	 .section .text.genclk_config_set_source,"ax",%progbits
 1419              	 .align 1
 1420              	 .syntax unified
 1421              	 .thumb
 1422              	 .thumb_func
 1423              	 .fpu softvfp
 1425              	genclk_config_set_source:
 1426              	.LFB185:
 114:.././hal/sam3u1c/inc/genclk.h **** 
 115:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_config_read(struct genclk_config *p_cfg,
 116:.././hal/sam3u1c/inc/genclk.h **** 		uint32_t ul_id)
 117:.././hal/sam3u1c/inc/genclk.h **** {
 118:.././hal/sam3u1c/inc/genclk.h **** 	p_cfg->ctrl = PMC->PMC_PCK[ul_id];
 119:.././hal/sam3u1c/inc/genclk.h **** }
 120:.././hal/sam3u1c/inc/genclk.h **** 
 121:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_config_write(const struct genclk_config *p_cfg,
 122:.././hal/sam3u1c/inc/genclk.h **** 		uint32_t ul_id)
 123:.././hal/sam3u1c/inc/genclk.h **** {
 124:.././hal/sam3u1c/inc/genclk.h **** 	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
 125:.././hal/sam3u1c/inc/genclk.h **** }
 126:.././hal/sam3u1c/inc/genclk.h **** 
 127:.././hal/sam3u1c/inc/genclk.h **** //! \name Programmable Clock Source and Prescaler configuration
 128:.././hal/sam3u1c/inc/genclk.h **** //@{
 129:.././hal/sam3u1c/inc/genclk.h **** 
 130:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_config_set_source(struct genclk_config *p_cfg,
 131:.././hal/sam3u1c/inc/genclk.h **** 		enum genclk_source e_src)
 132:.././hal/sam3u1c/inc/genclk.h **** {
 1427              	 .loc 10 132 1
 1428              	 .cfi_startproc
 1429              	 
 1430              	 
 1431              	 
 1432 0000 80B4     	 push {r7}
 1433              	.LCFI80:
 1434              	 .cfi_def_cfa_offset 4
 1435              	 .cfi_offset 7,-4
 1436 0002 83B0     	 sub sp,sp,#12
 1437              	.LCFI81:
 1438              	 .cfi_def_cfa_offset 16
 1439 0004 00AF     	 add r7,sp,#0
 1440              	.LCFI82:
 1441              	 .cfi_def_cfa_register 7
 1442 0006 7860     	 str r0,[r7,#4]
 1443 0008 0B46     	 mov r3,r1
 1444 000a FB70     	 strb r3,[r7,#3]
 133:.././hal/sam3u1c/inc/genclk.h **** 	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
 1445              	 .loc 10 133 14
 1446 000c 7B68     	 ldr r3,[r7,#4]
 1447 000e 1B68     	 ldr r3,[r3]
 1448 0010 23F00702 	 bic r2,r3,#7
 1449 0014 7B68     	 ldr r3,[r7,#4]
 1450 0016 1A60     	 str r2,[r3]
 134:.././hal/sam3u1c/inc/genclk.h **** 
 135:.././hal/sam3u1c/inc/genclk.h **** 	switch (e_src) {
 1451              	 .loc 10 135 2
 1452 0018 FB78     	 ldrb r3,[r7,#3]
 1453 001a 0A2B     	 cmp r3,#10
 1454 001c 39D8     	 bhi .L123
 1455 001e 01A2     	 adr r2,.L118
 1456 0020 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1457              	 .p2align 2
 1458              	.L118:
 1459 0024 51000000 	 .word .L122+1
 1460 0028 51000000 	 .word .L122+1
 1461 002c 51000000 	 .word .L122+1
 1462 0030 5B000000 	 .word .L121+1
 1463 0034 5B000000 	 .word .L121+1
 1464 0038 5B000000 	 .word .L121+1
 1465 003c 5B000000 	 .word .L121+1
 1466 0040 5B000000 	 .word .L121+1
 1467 0044 69000000 	 .word .L120+1
 1468 0048 77000000 	 .word .L119+1
 1469 004c 85000000 	 .word .L117+1
 1470              	 .p2align 1
 1471              	.L122:
 136:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_SLCK_RC:
 137:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_SLCK_XTAL:
 138:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_SLCK_BYPASS:
 139:.././hal/sam3u1c/inc/genclk.h **** 		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
 1472              	 .loc 10 139 15
 1473 0050 7B68     	 ldr r3,[r7,#4]
 1474 0052 1A68     	 ldr r2,[r3]
 1475 0054 7B68     	 ldr r3,[r7,#4]
 1476 0056 1A60     	 str r2,[r3]
 140:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1477              	 .loc 10 140 3
 1478 0058 1BE0     	 b .L116
 1479              	.L121:
 141:.././hal/sam3u1c/inc/genclk.h **** 
 142:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_4M_RC:
 143:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_8M_RC:
 144:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_12M_RC:
 145:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_XTAL:
 146:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_BYPASS:
 147:.././hal/sam3u1c/inc/genclk.h **** 		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
 1480              	 .loc 10 147 15
 1481 005a 7B68     	 ldr r3,[r7,#4]
 1482 005c 1B68     	 ldr r3,[r3]
 1483 005e 43F00102 	 orr r2,r3,#1
 1484 0062 7B68     	 ldr r3,[r7,#4]
 1485 0064 1A60     	 str r2,[r3]
 148:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1486              	 .loc 10 148 3
 1487 0066 14E0     	 b .L116
 1488              	.L120:
 149:.././hal/sam3u1c/inc/genclk.h **** 
 150:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_PLLACK:
 151:.././hal/sam3u1c/inc/genclk.h **** 		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
 1489              	 .loc 10 151 15
 1490 0068 7B68     	 ldr r3,[r7,#4]
 1491 006a 1B68     	 ldr r3,[r3]
 1492 006c 43F00202 	 orr r2,r3,#2
 1493 0070 7B68     	 ldr r3,[r7,#4]
 1494 0072 1A60     	 str r2,[r3]
 152:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1495              	 .loc 10 152 3
 1496 0074 0DE0     	 b .L116
 1497              	.L119:
 153:.././hal/sam3u1c/inc/genclk.h **** 
 154:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_PLLBCK:
 155:.././hal/sam3u1c/inc/genclk.h **** 		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
 1498              	 .loc 10 155 15
 1499 0076 7B68     	 ldr r3,[r7,#4]
 1500 0078 1B68     	 ldr r3,[r3]
 1501 007a 43F00302 	 orr r2,r3,#3
 1502 007e 7B68     	 ldr r3,[r7,#4]
 1503 0080 1A60     	 str r2,[r3]
 156:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1504              	 .loc 10 156 3
 1505 0082 06E0     	 b .L116
 1506              	.L117:
 157:.././hal/sam3u1c/inc/genclk.h **** 
 158:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MCK:
 159:.././hal/sam3u1c/inc/genclk.h **** 		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
 1507              	 .loc 10 159 15
 1508 0084 7B68     	 ldr r3,[r7,#4]
 1509 0086 1B68     	 ldr r3,[r3]
 1510 0088 43F00402 	 orr r2,r3,#4
 1511 008c 7B68     	 ldr r3,[r7,#4]
 1512 008e 1A60     	 str r2,[r3]
 160:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1513              	 .loc 10 160 3
 1514 0090 00BF     	 nop
 1515              	.L116:
 1516              	.L123:
 161:.././hal/sam3u1c/inc/genclk.h **** 	}
 162:.././hal/sam3u1c/inc/genclk.h **** }
 1517              	 .loc 10 162 1
 1518 0092 00BF     	 nop
 1519 0094 0C37     	 adds r7,r7,#12
 1520              	.LCFI83:
 1521              	 .cfi_def_cfa_offset 4
 1522 0096 BD46     	 mov sp,r7
 1523              	.LCFI84:
 1524              	 .cfi_def_cfa_register 13
 1525              	 
 1526 0098 80BC     	 pop {r7}
 1527              	.LCFI85:
 1528              	 .cfi_restore 7
 1529              	 .cfi_def_cfa_offset 0
 1530 009a 7047     	 bx lr
 1531              	 .cfi_endproc
 1532              	.LFE185:
 1534              	 .section .text.genclk_config_set_divider,"ax",%progbits
 1535              	 .align 1
 1536              	 .syntax unified
 1537              	 .thumb
 1538              	 .thumb_func
 1539              	 .fpu softvfp
 1541              	genclk_config_set_divider:
 1542              	.LFB186:
 163:.././hal/sam3u1c/inc/genclk.h **** 
 164:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
 165:.././hal/sam3u1c/inc/genclk.h **** 		uint32_t e_divider)
 166:.././hal/sam3u1c/inc/genclk.h **** {
 1543              	 .loc 10 166 1
 1544              	 .cfi_startproc
 1545              	 
 1546              	 
 1547              	 
 1548 0000 80B4     	 push {r7}
 1549              	.LCFI86:
 1550              	 .cfi_def_cfa_offset 4
 1551              	 .cfi_offset 7,-4
 1552 0002 83B0     	 sub sp,sp,#12
 1553              	.LCFI87:
 1554              	 .cfi_def_cfa_offset 16
 1555 0004 00AF     	 add r7,sp,#0
 1556              	.LCFI88:
 1557              	 .cfi_def_cfa_register 7
 1558 0006 7860     	 str r0,[r7,#4]
 1559 0008 3960     	 str r1,[r7]
 167:.././hal/sam3u1c/inc/genclk.h **** 	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
 1560              	 .loc 10 167 14
 1561 000a 7B68     	 ldr r3,[r7,#4]
 1562 000c 1B68     	 ldr r3,[r3]
 1563 000e 23F07002 	 bic r2,r3,#112
 1564 0012 7B68     	 ldr r3,[r7,#4]
 1565 0014 1A60     	 str r2,[r3]
 168:.././hal/sam3u1c/inc/genclk.h **** 	p_cfg->ctrl |= e_divider;
 1566              	 .loc 10 168 14
 1567 0016 7B68     	 ldr r3,[r7,#4]
 1568 0018 1A68     	 ldr r2,[r3]
 1569 001a 3B68     	 ldr r3,[r7]
 1570 001c 1A43     	 orrs r2,r2,r3
 1571 001e 7B68     	 ldr r3,[r7,#4]
 1572 0020 1A60     	 str r2,[r3]
 169:.././hal/sam3u1c/inc/genclk.h **** }
 1573              	 .loc 10 169 1
 1574 0022 00BF     	 nop
 1575 0024 0C37     	 adds r7,r7,#12
 1576              	.LCFI89:
 1577              	 .cfi_def_cfa_offset 4
 1578 0026 BD46     	 mov sp,r7
 1579              	.LCFI90:
 1580              	 .cfi_def_cfa_register 13
 1581              	 
 1582 0028 80BC     	 pop {r7}
 1583              	.LCFI91:
 1584              	 .cfi_restore 7
 1585              	 .cfi_def_cfa_offset 0
 1586 002a 7047     	 bx lr
 1587              	 .cfi_endproc
 1588              	.LFE186:
 1590              	 .section .text.genclk_enable,"ax",%progbits
 1591              	 .align 1
 1592              	 .syntax unified
 1593              	 .thumb
 1594              	 .thumb_func
 1595              	 .fpu softvfp
 1597              	genclk_enable:
 1598              	.LFB187:
 170:.././hal/sam3u1c/inc/genclk.h **** 
 171:.././hal/sam3u1c/inc/genclk.h **** //@}
 172:.././hal/sam3u1c/inc/genclk.h **** 
 173:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_enable(const struct genclk_config *p_cfg,
 174:.././hal/sam3u1c/inc/genclk.h **** 		uint32_t ul_id)
 175:.././hal/sam3u1c/inc/genclk.h **** {
 1599              	 .loc 10 175 1
 1600              	 .cfi_startproc
 1601              	 
 1602              	 
 1603 0000 80B5     	 push {r7,lr}
 1604              	.LCFI92:
 1605              	 .cfi_def_cfa_offset 8
 1606              	 .cfi_offset 7,-8
 1607              	 .cfi_offset 14,-4
 1608 0002 82B0     	 sub sp,sp,#8
 1609              	.LCFI93:
 1610              	 .cfi_def_cfa_offset 16
 1611 0004 00AF     	 add r7,sp,#0
 1612              	.LCFI94:
 1613              	 .cfi_def_cfa_register 7
 1614 0006 7860     	 str r0,[r7,#4]
 1615 0008 3960     	 str r1,[r7]
 176:.././hal/sam3u1c/inc/genclk.h **** 	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
 1616              	 .loc 10 176 5
 1617 000a 0749     	 ldr r1,.L126
 1618              	 .loc 10 176 29
 1619 000c 7B68     	 ldr r3,[r7,#4]
 1620 000e 1A68     	 ldr r2,[r3]
 1621              	 .loc 10 176 22
 1622 0010 3B68     	 ldr r3,[r7]
 1623 0012 1033     	 adds r3,r3,#16
 1624 0014 41F82320 	 str r2,[r1,r3,lsl#2]
 177:.././hal/sam3u1c/inc/genclk.h **** 	pmc_enable_pck(ul_id);
 1625              	 .loc 10 177 2
 1626 0018 3868     	 ldr r0,[r7]
 1627 001a 044B     	 ldr r3,.L126+4
 1628 001c 9847     	 blx r3
 1629              	.LVL30:
 178:.././hal/sam3u1c/inc/genclk.h **** }
 1630              	 .loc 10 178 1
 1631 001e 00BF     	 nop
 1632 0020 0837     	 adds r7,r7,#8
 1633              	.LCFI95:
 1634              	 .cfi_def_cfa_offset 8
 1635 0022 BD46     	 mov sp,r7
 1636              	.LCFI96:
 1637              	 .cfi_def_cfa_register 13
 1638              	 
 1639 0024 80BD     	 pop {r7,pc}
 1640              	.L127:
 1641 0026 00BF     	 .align 2
 1642              	.L126:
 1643 0028 00040E40 	 .word 1074660352
 1644 002c 00000000 	 .word pmc_enable_pck
 1645              	 .cfi_endproc
 1646              	.LFE187:
 1648              	 .section .text.genclk_enable_source,"ax",%progbits
 1649              	 .align 1
 1650              	 .syntax unified
 1651              	 .thumb
 1652              	 .thumb_func
 1653              	 .fpu softvfp
 1655              	genclk_enable_source:
 1656              	.LFB189:
 179:.././hal/sam3u1c/inc/genclk.h **** 
 180:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_disable(uint32_t ul_id)
 181:.././hal/sam3u1c/inc/genclk.h **** {
 182:.././hal/sam3u1c/inc/genclk.h **** 	pmc_disable_pck(ul_id);
 183:.././hal/sam3u1c/inc/genclk.h **** }
 184:.././hal/sam3u1c/inc/genclk.h **** 
 185:.././hal/sam3u1c/inc/genclk.h **** static inline void genclk_enable_source(enum genclk_source e_src)
 186:.././hal/sam3u1c/inc/genclk.h **** {
 1657              	 .loc 10 186 1
 1658              	 .cfi_startproc
 1659              	 
 1660              	 
 1661 0000 80B5     	 push {r7,lr}
 1662              	.LCFI97:
 1663              	 .cfi_def_cfa_offset 8
 1664              	 .cfi_offset 7,-8
 1665              	 .cfi_offset 14,-4
 1666 0002 82B0     	 sub sp,sp,#8
 1667              	.LCFI98:
 1668              	 .cfi_def_cfa_offset 16
 1669 0004 00AF     	 add r7,sp,#0
 1670              	.LCFI99:
 1671              	 .cfi_def_cfa_register 7
 1672 0006 0346     	 mov r3,r0
 1673 0008 FB71     	 strb r3,[r7,#7]
 187:.././hal/sam3u1c/inc/genclk.h **** 	switch (e_src) {
 1674              	 .loc 10 187 2
 1675 000a FB79     	 ldrb r3,[r7,#7]
 1676 000c 0A2B     	 cmp r3,#10
 1677 000e 00F2A280 	 bhi .L151
 1678 0012 01A2     	 adr r2,.L131
 1679 0014 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1680              	 .p2align 2
 1681              	.L131:
 1682 0018 45000000 	 .word .L141+1
 1683 001c 67000000 	 .word .L140+1
 1684 0020 87000000 	 .word .L139+1
 1685 0024 A7000000 	 .word .L138+1
 1686 0028 C7000000 	 .word .L137+1
 1687 002c E7000000 	 .word .L136+1
 1688 0030 07010000 	 .word .L135+1
 1689 0034 27010000 	 .word .L134+1
 1690 0038 47010000 	 .word .L133+1
 1691 003c 4F010000 	 .word .L132+1
 1692 0040 57010000 	 .word .L151+1
 1693              	 .p2align 1
 1694              	.L141:
 188:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_SLCK_RC:
 189:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
 1695              	 .loc 10 189 8
 1696 0044 0020     	 movs r0,#0
 1697 0046 4E4B     	 ldr r3,.L161
 1698 0048 9847     	 blx r3
 1699              	.LVL31:
 1700 004a 0346     	 mov r3,r0
 1701              	 .loc 10 189 7
 1702 004c 83F00103 	 eor r3,r3,#1
 1703 0050 DBB2     	 uxtb r3,r3
 1704              	 .loc 10 189 6
 1705 0052 002B     	 cmp r3,#0
 1706 0054 00F08180 	 beq .L152
 190:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_SLCK_32K_RC);
 1707              	 .loc 10 190 4
 1708 0058 0020     	 movs r0,#0
 1709 005a 4A4B     	 ldr r3,.L161+4
 1710 005c 9847     	 blx r3
 1711              	.LVL32:
 191:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_SLCK_32K_RC);
 1712              	 .loc 10 191 4
 1713 005e 0020     	 movs r0,#0
 1714 0060 494B     	 ldr r3,.L161+8
 1715 0062 9847     	 blx r3
 1716              	.LVL33:
 192:.././hal/sam3u1c/inc/genclk.h **** 		}
 193:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1717              	 .loc 10 193 3
 1718 0064 79E0     	 b .L152
 1719              	.L140:
 194:.././hal/sam3u1c/inc/genclk.h **** 
 195:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_SLCK_XTAL:
 196:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
 1720              	 .loc 10 196 8
 1721 0066 0120     	 movs r0,#1
 1722 0068 454B     	 ldr r3,.L161
 1723 006a 9847     	 blx r3
 1724              	.LVL34:
 1725 006c 0346     	 mov r3,r0
 1726              	 .loc 10 196 7
 1727 006e 83F00103 	 eor r3,r3,#1
 1728 0072 DBB2     	 uxtb r3,r3
 1729              	 .loc 10 196 6
 1730 0074 002B     	 cmp r3,#0
 1731 0076 72D0     	 beq .L153
 197:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_SLCK_32K_XTAL);
 1732              	 .loc 10 197 4
 1733 0078 0120     	 movs r0,#1
 1734 007a 424B     	 ldr r3,.L161+4
 1735 007c 9847     	 blx r3
 1736              	.LVL35:
 198:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_SLCK_32K_XTAL);
 1737              	 .loc 10 198 4
 1738 007e 0120     	 movs r0,#1
 1739 0080 414B     	 ldr r3,.L161+8
 1740 0082 9847     	 blx r3
 1741              	.LVL36:
 199:.././hal/sam3u1c/inc/genclk.h **** 		}
 200:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1742              	 .loc 10 200 3
 1743 0084 6BE0     	 b .L153
 1744              	.L139:
 201:.././hal/sam3u1c/inc/genclk.h **** 
 202:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_SLCK_BYPASS:
 203:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
 1745              	 .loc 10 203 8
 1746 0086 0220     	 movs r0,#2
 1747 0088 3D4B     	 ldr r3,.L161
 1748 008a 9847     	 blx r3
 1749              	.LVL37:
 1750 008c 0346     	 mov r3,r0
 1751              	 .loc 10 203 7
 1752 008e 83F00103 	 eor r3,r3,#1
 1753 0092 DBB2     	 uxtb r3,r3
 1754              	 .loc 10 203 6
 1755 0094 002B     	 cmp r3,#0
 1756 0096 64D0     	 beq .L154
 204:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_SLCK_32K_BYPASS);
 1757              	 .loc 10 204 4
 1758 0098 0220     	 movs r0,#2
 1759 009a 3A4B     	 ldr r3,.L161+4
 1760 009c 9847     	 blx r3
 1761              	.LVL38:
 205:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_SLCK_32K_BYPASS);
 1762              	 .loc 10 205 4
 1763 009e 0220     	 movs r0,#2
 1764 00a0 394B     	 ldr r3,.L161+8
 1765 00a2 9847     	 blx r3
 1766              	.LVL39:
 206:.././hal/sam3u1c/inc/genclk.h **** 		}
 207:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1767              	 .loc 10 207 3
 1768 00a4 5DE0     	 b .L154
 1769              	.L138:
 208:.././hal/sam3u1c/inc/genclk.h **** 
 209:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_4M_RC:
 210:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
 1770              	 .loc 10 210 8
 1771 00a6 0320     	 movs r0,#3
 1772 00a8 354B     	 ldr r3,.L161
 1773 00aa 9847     	 blx r3
 1774              	.LVL40:
 1775 00ac 0346     	 mov r3,r0
 1776              	 .loc 10 210 7
 1777 00ae 83F00103 	 eor r3,r3,#1
 1778 00b2 DBB2     	 uxtb r3,r3
 1779              	 .loc 10 210 6
 1780 00b4 002B     	 cmp r3,#0
 1781 00b6 56D0     	 beq .L155
 211:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_MAINCK_4M_RC);
 1782              	 .loc 10 211 4
 1783 00b8 0320     	 movs r0,#3
 1784 00ba 324B     	 ldr r3,.L161+4
 1785 00bc 9847     	 blx r3
 1786              	.LVL41:
 212:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_MAINCK_4M_RC);
 1787              	 .loc 10 212 4
 1788 00be 0320     	 movs r0,#3
 1789 00c0 314B     	 ldr r3,.L161+8
 1790 00c2 9847     	 blx r3
 1791              	.LVL42:
 213:.././hal/sam3u1c/inc/genclk.h **** 		}
 214:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1792              	 .loc 10 214 3
 1793 00c4 4FE0     	 b .L155
 1794              	.L137:
 215:.././hal/sam3u1c/inc/genclk.h **** 
 216:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_8M_RC:
 217:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
 1795              	 .loc 10 217 8
 1796 00c6 0420     	 movs r0,#4
 1797 00c8 2D4B     	 ldr r3,.L161
 1798 00ca 9847     	 blx r3
 1799              	.LVL43:
 1800 00cc 0346     	 mov r3,r0
 1801              	 .loc 10 217 7
 1802 00ce 83F00103 	 eor r3,r3,#1
 1803 00d2 DBB2     	 uxtb r3,r3
 1804              	 .loc 10 217 6
 1805 00d4 002B     	 cmp r3,#0
 1806 00d6 48D0     	 beq .L156
 218:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_MAINCK_8M_RC);
 1807              	 .loc 10 218 4
 1808 00d8 0420     	 movs r0,#4
 1809 00da 2A4B     	 ldr r3,.L161+4
 1810 00dc 9847     	 blx r3
 1811              	.LVL44:
 219:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_MAINCK_8M_RC);
 1812              	 .loc 10 219 4
 1813 00de 0420     	 movs r0,#4
 1814 00e0 294B     	 ldr r3,.L161+8
 1815 00e2 9847     	 blx r3
 1816              	.LVL45:
 220:.././hal/sam3u1c/inc/genclk.h **** 		}
 221:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1817              	 .loc 10 221 3
 1818 00e4 41E0     	 b .L156
 1819              	.L136:
 222:.././hal/sam3u1c/inc/genclk.h **** 
 223:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_12M_RC:
 224:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
 1820              	 .loc 10 224 8
 1821 00e6 0520     	 movs r0,#5
 1822 00e8 254B     	 ldr r3,.L161
 1823 00ea 9847     	 blx r3
 1824              	.LVL46:
 1825 00ec 0346     	 mov r3,r0
 1826              	 .loc 10 224 7
 1827 00ee 83F00103 	 eor r3,r3,#1
 1828 00f2 DBB2     	 uxtb r3,r3
 1829              	 .loc 10 224 6
 1830 00f4 002B     	 cmp r3,#0
 1831 00f6 3AD0     	 beq .L157
 225:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_MAINCK_12M_RC);
 1832              	 .loc 10 225 4
 1833 00f8 0520     	 movs r0,#5
 1834 00fa 224B     	 ldr r3,.L161+4
 1835 00fc 9847     	 blx r3
 1836              	.LVL47:
 226:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_MAINCK_12M_RC);
 1837              	 .loc 10 226 4
 1838 00fe 0520     	 movs r0,#5
 1839 0100 214B     	 ldr r3,.L161+8
 1840 0102 9847     	 blx r3
 1841              	.LVL48:
 227:.././hal/sam3u1c/inc/genclk.h **** 		}
 228:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1842              	 .loc 10 228 3
 1843 0104 33E0     	 b .L157
 1844              	.L135:
 229:.././hal/sam3u1c/inc/genclk.h **** 
 230:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_XTAL:
 231:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
 1845              	 .loc 10 231 8
 1846 0106 0620     	 movs r0,#6
 1847 0108 1D4B     	 ldr r3,.L161
 1848 010a 9847     	 blx r3
 1849              	.LVL49:
 1850 010c 0346     	 mov r3,r0
 1851              	 .loc 10 231 7
 1852 010e 83F00103 	 eor r3,r3,#1
 1853 0112 DBB2     	 uxtb r3,r3
 1854              	 .loc 10 231 6
 1855 0114 002B     	 cmp r3,#0
 1856 0116 2CD0     	 beq .L158
 232:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_MAINCK_XTAL);
 1857              	 .loc 10 232 4
 1858 0118 0620     	 movs r0,#6
 1859 011a 1A4B     	 ldr r3,.L161+4
 1860 011c 9847     	 blx r3
 1861              	.LVL50:
 233:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_MAINCK_XTAL);
 1862              	 .loc 10 233 4
 1863 011e 0620     	 movs r0,#6
 1864 0120 194B     	 ldr r3,.L161+8
 1865 0122 9847     	 blx r3
 1866              	.LVL51:
 234:.././hal/sam3u1c/inc/genclk.h **** 		}
 235:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1867              	 .loc 10 235 3
 1868 0124 25E0     	 b .L158
 1869              	.L134:
 236:.././hal/sam3u1c/inc/genclk.h **** 
 237:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MAINCK_BYPASS:
 238:.././hal/sam3u1c/inc/genclk.h **** 		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
 1870              	 .loc 10 238 8
 1871 0126 0720     	 movs r0,#7
 1872 0128 154B     	 ldr r3,.L161
 1873 012a 9847     	 blx r3
 1874              	.LVL52:
 1875 012c 0346     	 mov r3,r0
 1876              	 .loc 10 238 7
 1877 012e 83F00103 	 eor r3,r3,#1
 1878 0132 DBB2     	 uxtb r3,r3
 1879              	 .loc 10 238 6
 1880 0134 002B     	 cmp r3,#0
 1881 0136 1ED0     	 beq .L159
 239:.././hal/sam3u1c/inc/genclk.h **** 			osc_enable(OSC_MAINCK_BYPASS);
 1882              	 .loc 10 239 4
 1883 0138 0720     	 movs r0,#7
 1884 013a 124B     	 ldr r3,.L161+4
 1885 013c 9847     	 blx r3
 1886              	.LVL53:
 240:.././hal/sam3u1c/inc/genclk.h **** 			osc_wait_ready(OSC_MAINCK_BYPASS);
 1887              	 .loc 10 240 4
 1888 013e 0720     	 movs r0,#7
 1889 0140 114B     	 ldr r3,.L161+8
 1890 0142 9847     	 blx r3
 1891              	.LVL54:
 241:.././hal/sam3u1c/inc/genclk.h **** 		}
 242:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1892              	 .loc 10 242 3
 1893 0144 17E0     	 b .L159
 1894              	.L133:
 243:.././hal/sam3u1c/inc/genclk.h **** 
 244:.././hal/sam3u1c/inc/genclk.h **** #ifdef CONFIG_PLL0_SOURCE
 245:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_PLLACK:
 246:.././hal/sam3u1c/inc/genclk.h **** 		pll_enable_config_defaults(0);
 1895              	 .loc 10 246 3
 1896 0146 0020     	 movs r0,#0
 1897 0148 104B     	 ldr r3,.L161+12
 1898 014a 9847     	 blx r3
 1899              	.LVL55:
 247:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1900              	 .loc 10 247 3
 1901 014c 14E0     	 b .L143
 1902              	.L132:
 248:.././hal/sam3u1c/inc/genclk.h **** #endif
 249:.././hal/sam3u1c/inc/genclk.h **** 
 250:.././hal/sam3u1c/inc/genclk.h **** #ifdef CONFIG_PLL1_SOURCE
 251:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_PLLBCK:
 252:.././hal/sam3u1c/inc/genclk.h **** 		pll_enable_config_defaults(1);
 1903              	 .loc 10 252 3
 1904 014e 0120     	 movs r0,#1
 1905 0150 0E4B     	 ldr r3,.L161+12
 1906 0152 9847     	 blx r3
 1907              	.LVL56:
 253:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1908              	 .loc 10 253 3
 1909 0154 10E0     	 b .L143
 1910              	.L151:
 254:.././hal/sam3u1c/inc/genclk.h **** #endif
 255:.././hal/sam3u1c/inc/genclk.h **** 
 256:.././hal/sam3u1c/inc/genclk.h **** 	case GENCLK_PCK_SRC_MCK:
 257:.././hal/sam3u1c/inc/genclk.h **** 		break;
 258:.././hal/sam3u1c/inc/genclk.h **** 
 259:.././hal/sam3u1c/inc/genclk.h **** 	default:
 260:.././hal/sam3u1c/inc/genclk.h **** 		Assert(false);
 261:.././hal/sam3u1c/inc/genclk.h **** 		break;
 1911              	 .loc 10 261 3
 1912 0156 00BF     	 nop
 1913 0158 0EE0     	 b .L160
 1914              	.L152:
 193:.././hal/sam3u1c/inc/genclk.h **** 
 1915              	 .loc 10 193 3
 1916 015a 00BF     	 nop
 1917 015c 0CE0     	 b .L160
 1918              	.L153:
 200:.././hal/sam3u1c/inc/genclk.h **** 
 1919              	 .loc 10 200 3
 1920 015e 00BF     	 nop
 1921 0160 0AE0     	 b .L160
 1922              	.L154:
 207:.././hal/sam3u1c/inc/genclk.h **** 
 1923              	 .loc 10 207 3
 1924 0162 00BF     	 nop
 1925 0164 08E0     	 b .L160
 1926              	.L155:
 214:.././hal/sam3u1c/inc/genclk.h **** 
 1927              	 .loc 10 214 3
 1928 0166 00BF     	 nop
 1929 0168 06E0     	 b .L160
 1930              	.L156:
 221:.././hal/sam3u1c/inc/genclk.h **** 
 1931              	 .loc 10 221 3
 1932 016a 00BF     	 nop
 1933 016c 04E0     	 b .L160
 1934              	.L157:
 228:.././hal/sam3u1c/inc/genclk.h **** 
 1935              	 .loc 10 228 3
 1936 016e 00BF     	 nop
 1937 0170 02E0     	 b .L160
 1938              	.L158:
 235:.././hal/sam3u1c/inc/genclk.h **** 
 1939              	 .loc 10 235 3
 1940 0172 00BF     	 nop
 1941 0174 00E0     	 b .L160
 1942              	.L159:
 242:.././hal/sam3u1c/inc/genclk.h **** 
 1943              	 .loc 10 242 3
 1944 0176 00BF     	 nop
 1945              	.L143:
 1946              	.L160:
 262:.././hal/sam3u1c/inc/genclk.h **** 	}
 263:.././hal/sam3u1c/inc/genclk.h **** }
 1947              	 .loc 10 263 1
 1948 0178 00BF     	 nop
 1949 017a 0837     	 adds r7,r7,#8
 1950              	.LCFI100:
 1951              	 .cfi_def_cfa_offset 8
 1952 017c BD46     	 mov sp,r7
 1953              	.LCFI101:
 1954              	 .cfi_def_cfa_register 13
 1955              	 
 1956 017e 80BD     	 pop {r7,pc}
 1957              	.L162:
 1958              	 .align 2
 1959              	.L161:
 1960 0180 00000000 	 .word osc_is_ready
 1961 0184 00000000 	 .word osc_enable
 1962 0188 00000000 	 .word osc_wait_ready
 1963 018c 00000000 	 .word pll_enable_config_defaults
 1964              	 .cfi_endproc
 1965              	.LFE189:
 1967              	 .global usb_serial_number
 1968              	 .section .data.usb_serial_number,"aw"
 1969              	 .align 2
 1972              	usb_serial_number:
 1973 0000 30303030 	 .ascii "000000000000DEADBEEF\000"
 1973      30303030 
 1973      30303030 
 1973      44454144 
 1973      42454546 
 1974 0015 00000000 	 .space 12
 1974      00000000 
 1974      00000000 
 1975              	 .section .text.phywhisperer_setup_pins,"ax",%progbits
 1976              	 .align 1
 1977              	 .global phywhisperer_setup_pins
 1978              	 .syntax unified
 1979              	 .thumb
 1980              	 .thumb_func
 1981              	 .fpu softvfp
 1983              	phywhisperer_setup_pins:
 1984              	.LFB190:
 1985              	 .file 11 "main.c"
   1:main.c        **** #include <asf.h>
   2:main.c        **** #include "conf_usb.h"
   3:main.c        **** #include "stdio_serial.h"
   4:main.c        **** #include "ui.h"
   5:main.c        **** #include "genclk.h"
   6:main.c        **** #include "tasks.h"
   7:main.c        **** #include "usb_xmem.h"
   8:main.c        **** #include "fpga_program.h"
   9:main.c        **** #include "usb.h"
  10:main.c        **** #include "sysclk.h"
  11:main.c        **** #include <string.h>
  12:main.c        **** 
  13:main.c        **** //Serial Number - will be read by device ID
  14:main.c        **** char usb_serial_number[33] = "000000000000DEADBEEF";
  15:main.c        **** 
  16:main.c        **** 
  17:main.c        **** void phywhisperer_setup_pins(void)
  18:main.c        **** {
 1986              	 .loc 11 18 1
 1987              	 .cfi_startproc
 1988              	 
 1989              	 
 1990 0000 80B5     	 push {r7,lr}
 1991              	.LCFI102:
 1992              	 .cfi_def_cfa_offset 8
 1993              	 .cfi_offset 7,-8
 1994              	 .cfi_offset 14,-4
 1995 0002 00AF     	 add r7,sp,#0
 1996              	.LCFI103:
 1997              	 .cfi_def_cfa_register 7
  19:main.c        ****     board_init();
 1998              	 .loc 11 19 5
 1999 0004 3A4B     	 ldr r3,.L164
 2000 0006 9847     	 blx r3
 2001              	.LVL57:
  20:main.c        ****     ioport_set_pin_mode(BUTTON_IN, IOPORT_MODE_PULLUP); //(1 << 2) = PULL UP
 2002              	 .loc 11 20 5
 2003 0008 0821     	 movs r1,#8
 2004 000a 1820     	 movs r0,#24
 2005 000c 394B     	 ldr r3,.L164+4
 2006 000e 9847     	 blx r3
 2007              	.LVL58:
  21:main.c        ****     PIOA->PIO_ODR = (1 << BUTTON_IN);
 2008              	 .loc 11 21 9
 2009 0010 394B     	 ldr r3,.L164+8
 2010              	 .loc 11 21 19
 2011 0012 4FF08072 	 mov r2,#16777216
 2012 0016 5A61     	 str r2,[r3,#20]
  22:main.c        ****     PIOA->PIO_PUER = (1 << BUTTON_IN); // enable pullup
 2013              	 .loc 11 22 9
 2014 0018 374B     	 ldr r3,.L164+8
 2015              	 .loc 11 22 20
 2016 001a 4FF08072 	 mov r2,#16777216
 2017 001e 5A66     	 str r2,[r3,#100]
  23:main.c        ****     PIOA->PIO_DIFSR = (1 << BUTTON_IN); //enable debounce
 2018              	 .loc 11 23 9
 2019 0020 354B     	 ldr r3,.L164+8
 2020              	 .loc 11 23 21
 2021 0022 4FF08072 	 mov r2,#16777216
 2022 0026 C3F88420 	 str r2,[r3,#132]
  24:main.c        **** 
  25:main.c        ****     PIOA->PIO_OER = (1 << F_VB5V) | (1 << F_VBHOST); //enable output mode on VBHOST/VBSNIFF pins
 2023              	 .loc 11 25 9
 2024 002a 334B     	 ldr r3,.L164+8
 2025              	 .loc 11 25 19
 2026 002c 4FF0C062 	 mov r2,#100663296
 2027 0030 1A61     	 str r2,[r3,#16]
  26:main.c        **** 
  27:main.c        ****     
  28:main.c        ****     //Configure FPGA to allow programming via USB
  29:main.c        ****     fpga_program_init();
 2028              	 .loc 11 29 5
 2029 0032 324B     	 ldr r3,.L164+12
 2030 0034 9847     	 blx r3
 2031              	.LVL59:
  30:main.c        **** 
  31:main.c        ****     /* Enable SMC */
  32:main.c        ****     pmc_enable_periph_clk(ID_SMC);
 2032              	 .loc 11 32 5
 2033 0036 0920     	 movs r0,#9
 2034 0038 314B     	 ldr r3,.L164+16
 2035 003a 9847     	 blx r3
 2036              	.LVL60:
  33:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
 2037              	 .loc 11 33 5
 2038 003c 3149     	 ldr r1,.L164+20
 2039 003e 2920     	 movs r0,#41
 2040 0040 314B     	 ldr r3,.L164+24
 2041 0042 9847     	 blx r3
 2042              	.LVL61:
  34:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
 2043              	 .loc 11 34 5
 2044 0044 2F49     	 ldr r1,.L164+20
 2045 0046 2A20     	 movs r0,#42
 2046 0048 2F4B     	 ldr r3,.L164+24
 2047 004a 9847     	 blx r3
 2048              	.LVL62:
  35:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
 2049              	 .loc 11 35 5
 2050 004c 2D49     	 ldr r1,.L164+20
 2051 004e 2B20     	 movs r0,#43
 2052 0050 2D4B     	 ldr r3,.L164+24
 2053 0052 9847     	 blx r3
 2054              	.LVL63:
  36:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
 2055              	 .loc 11 36 5
 2056 0054 2B49     	 ldr r1,.L164+20
 2057 0056 2C20     	 movs r0,#44
 2058 0058 2B4B     	 ldr r3,.L164+24
 2059 005a 9847     	 blx r3
 2060              	.LVL64:
  37:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
 2061              	 .loc 11 37 5
 2062 005c 2949     	 ldr r1,.L164+20
 2063 005e 2D20     	 movs r0,#45
 2064 0060 294B     	 ldr r3,.L164+24
 2065 0062 9847     	 blx r3
 2066              	.LVL65:
  38:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
 2067              	 .loc 11 38 5
 2068 0064 2749     	 ldr r1,.L164+20
 2069 0066 2E20     	 movs r0,#46
 2070 0068 274B     	 ldr r3,.L164+24
 2071 006a 9847     	 blx r3
 2072              	.LVL66:
  39:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
 2073              	 .loc 11 39 5
 2074 006c 2549     	 ldr r1,.L164+20
 2075 006e 2F20     	 movs r0,#47
 2076 0070 254B     	 ldr r3,.L164+24
 2077 0072 9847     	 blx r3
 2078              	.LVL67:
  40:main.c        ****     gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
 2079              	 .loc 11 40 5
 2080 0074 2349     	 ldr r1,.L164+20
 2081 0076 3020     	 movs r0,#48
 2082 0078 234B     	 ldr r3,.L164+24
 2083 007a 9847     	 blx r3
 2084              	.LVL68:
  41:main.c        ****     gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
 2085              	 .loc 11 41 5
 2086 007c 2149     	 ldr r1,.L164+20
 2087 007e 3320     	 movs r0,#51
 2088 0080 214B     	 ldr r3,.L164+24
 2089 0082 9847     	 blx r3
 2090              	.LVL69:
  42:main.c        ****     gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
 2091              	 .loc 11 42 5
 2092 0084 1F49     	 ldr r1,.L164+20
 2093 0086 3720     	 movs r0,#55
 2094 0088 1F4B     	 ldr r3,.L164+24
 2095 008a 9847     	 blx r3
 2096              	.LVL70:
  43:main.c        ****     gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
 2097              	 .loc 11 43 5
 2098 008c 1D49     	 ldr r1,.L164+20
 2099 008e 3420     	 movs r0,#52
 2100 0090 1D4B     	 ldr r3,.L164+24
 2101 0092 9847     	 blx r3
 2102              	.LVL71:
  44:main.c        **** 
  45:main.c        ****     gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
 2103              	 .loc 11 45 5
 2104 0094 4FF04052 	 mov r2,#805306368
 2105 0098 40F2BF11 	 movw r1,#447
 2106 009c 1B48     	 ldr r0,.L164+28
 2107 009e 1C4B     	 ldr r3,.L164+32
 2108 00a0 9847     	 blx r3
 2109              	.LVL72:
  46:main.c        ****     pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
 2110              	 .loc 11 46 5
 2111 00a2 40F2BF11 	 movw r1,#447
 2112 00a6 1948     	 ldr r0,.L164+28
 2113 00a8 1A4B     	 ldr r3,.L164+36
 2114 00aa 9847     	 blx r3
 2115              	.LVL73:
  47:main.c        **** 
  48:main.c        ****     /*
  49:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
  50:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
  51:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
  52:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
  53:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
  54:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
  55:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
  56:main.c        ****     gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
  57:main.c        ****     */
  58:main.c        **** 
  59:main.c        ****     gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
 2116              	 .loc 11 59 5
 2117 00ac 4FF04051 	 mov r1,#805306368
 2118 00b0 2620     	 movs r0,#38
 2119 00b2 154B     	 ldr r3,.L164+24
 2120 00b4 9847     	 blx r3
 2121              	.LVL74:
  60:main.c        ****     gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
 2122              	 .loc 11 60 5
 2123 00b6 4FF06051 	 mov r1,#939524096
 2124 00ba 3120     	 movs r0,#49
 2125 00bc 124B     	 ldr r3,.L164+24
 2126 00be 9847     	 blx r3
 2127              	.LVL75:
  61:main.c        **** 
  62:main.c        ****     smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
 2128              	 .loc 11 62 5
 2129 00c0 0022     	 movs r2,#0
 2130 00c2 0021     	 movs r1,#0
 2131 00c4 1448     	 ldr r0,.L164+40
 2132 00c6 154B     	 ldr r3,.L164+44
 2133 00c8 9847     	 blx r3
 2134              	.LVL76:
  63:main.c        ****                          | SMC_SETUP_NCS_WR_SETUP(0)
  64:main.c        ****                          | SMC_SETUP_NRD_SETUP(0)
  65:main.c        ****                          | SMC_SETUP_NCS_RD_SETUP(0));
  66:main.c        ****     smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(0)
 2135              	 .loc 11 66 5
 2136 00ca 0022     	 movs r2,#0
 2137 00cc 0021     	 movs r1,#0
 2138 00ce 1248     	 ldr r0,.L164+40
 2139 00d0 134B     	 ldr r3,.L164+48
 2140 00d2 9847     	 blx r3
 2141              	.LVL77:
  67:main.c        ****                          | SMC_PULSE_NCS_WR_PULSE(0)
  68:main.c        ****                          | SMC_PULSE_NRD_PULSE(0)
  69:main.c        ****                          | SMC_PULSE_NCS_RD_PULSE(0));
  70:main.c        ****     smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(1)
 2142              	 .loc 11 70 5
 2143 00d4 4FF00112 	 mov r2,#65537
 2144 00d8 0021     	 movs r1,#0
 2145 00da 0F48     	 ldr r0,.L164+40
 2146 00dc 114B     	 ldr r3,.L164+52
 2147 00de 9847     	 blx r3
 2148              	.LVL78:
  71:main.c        ****                          | SMC_CYCLE_NRD_CYCLE(1));
  72:main.c        ****     smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
 2149              	 .loc 11 72 5
 2150 00e0 0322     	 movs r2,#3
 2151 00e2 0021     	 movs r1,#0
 2152 00e4 0C48     	 ldr r0,.L164+40
 2153 00e6 104B     	 ldr r3,.L164+56
 2154 00e8 9847     	 blx r3
 2155              	.LVL79:
  73:main.c        ****                  | SMC_MODE_DBW_BIT_8);
  74:main.c        **** }
 2156              	 .loc 11 74 1
 2157 00ea 00BF     	 nop
 2158 00ec 80BD     	 pop {r7,pc}
 2159              	.L165:
 2160 00ee 00BF     	 .align 2
 2161              	.L164:
 2162 00f0 00000000 	 .word board_init
 2163 00f4 00000000 	 .word ioport_set_pin_mode
 2164 00f8 000C0E40 	 .word 1074662400
 2165 00fc 00000000 	 .word fpga_program_init
 2166 0100 00000000 	 .word pmc_enable_periph_clk
 2167 0104 01000008 	 .word 134217729
 2168 0108 00000000 	 .word pio_configure_pin
 2169 010c 000E0E40 	 .word 1074662912
 2170 0110 00000000 	 .word pio_configure_pin_group
 2171 0114 00000000 	 .word pio_enable_output_write
 2172 0118 00000E40 	 .word 1074659328
 2173 011c 00000000 	 .word smc_set_setup_timing
 2174 0120 00000000 	 .word smc_set_pulse_timing
 2175 0124 00000000 	 .word smc_set_cycle_timing
 2176 0128 00000000 	 .word smc_set_mode
 2177              	 .cfi_endproc
 2178              	.LFE190:
 2180              	 .section .text.hacky_delay,"ax",%progbits
 2181              	 .align 1
 2182              	 .global hacky_delay
 2183              	 .syntax unified
 2184              	 .thumb
 2185              	 .thumb_func
 2186              	 .fpu softvfp
 2188              	hacky_delay:
 2189              	.LFB191:
  75:main.c        **** 
  76:main.c        **** void hacky_delay(void)
  77:main.c        **** {
 2190              	 .loc 11 77 1
 2191              	 .cfi_startproc
 2192              	 
 2193              	 
 2194              	 
 2195 0000 80B4     	 push {r7}
 2196              	.LCFI104:
 2197              	 .cfi_def_cfa_offset 4
 2198              	 .cfi_offset 7,-4
 2199 0002 83B0     	 sub sp,sp,#12
 2200              	.LCFI105:
 2201              	 .cfi_def_cfa_offset 16
 2202 0004 00AF     	 add r7,sp,#0
 2203              	.LCFI106:
 2204              	 .cfi_def_cfa_register 7
 2205              	.LBB53:
  78:main.c        ****     for (volatile uint32_t i = 0; i < 250000; i++);
 2206              	 .loc 11 78 28
 2207 0006 0023     	 movs r3,#0
 2208 0008 7B60     	 str r3,[r7,#4]
 2209              	 .loc 11 78 5
 2210 000a 02E0     	 b .L167
 2211              	.L168:
 2212              	 .loc 11 78 48 discriminator 3
 2213 000c 7B68     	 ldr r3,[r7,#4]
 2214 000e 0133     	 adds r3,r3,#1
 2215 0010 7B60     	 str r3,[r7,#4]
 2216              	.L167:
 2217              	 .loc 11 78 37 discriminator 1
 2218 0012 7B68     	 ldr r3,[r7,#4]
 2219              	 .loc 11 78 5 discriminator 1
 2220 0014 044A     	 ldr r2,.L169
 2221 0016 9342     	 cmp r3,r2
 2222 0018 F8D9     	 bls .L168
 2223              	.LBE53:
  79:main.c        **** }
 2224              	 .loc 11 79 1
 2225 001a 00BF     	 nop
 2226 001c 00BF     	 nop
 2227 001e 0C37     	 adds r7,r7,#12
 2228              	.LCFI107:
 2229              	 .cfi_def_cfa_offset 4
 2230 0020 BD46     	 mov sp,r7
 2231              	.LCFI108:
 2232              	 .cfi_def_cfa_register 13
 2233              	 
 2234 0022 80BC     	 pop {r7}
 2235              	.LCFI109:
 2236              	 .cfi_restore 7
 2237              	 .cfi_def_cfa_offset 0
 2238 0024 7047     	 bx lr
 2239              	.L170:
 2240 0026 00BF     	 .align 2
 2241              	.L169:
 2242 0028 8FD00300 	 .word 249999
 2243              	 .cfi_endproc
 2244              	.LFE191:
 2246              	 .section .text.genclk_enable_config,"ax",%progbits
 2247              	 .align 1
 2248              	 .syntax unified
 2249              	 .thumb
 2250              	 .thumb_func
 2251              	 .fpu softvfp
 2253              	genclk_enable_config:
 2254              	.LFB192:
  80:main.c        **** 
  81:main.c        **** static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divid
  82:main.c        **** {
 2255              	 .loc 11 82 1
 2256              	 .cfi_startproc
 2257              	 
 2258              	 
 2259 0000 80B5     	 push {r7,lr}
 2260              	.LCFI110:
 2261              	 .cfi_def_cfa_offset 8
 2262              	 .cfi_offset 7,-8
 2263              	 .cfi_offset 14,-4
 2264 0002 86B0     	 sub sp,sp,#24
 2265              	.LCFI111:
 2266              	 .cfi_def_cfa_offset 32
 2267 0004 00AF     	 add r7,sp,#0
 2268              	.LCFI112:
 2269              	 .cfi_def_cfa_register 7
 2270 0006 F860     	 str r0,[r7,#12]
 2271 0008 0B46     	 mov r3,r1
 2272 000a 7A60     	 str r2,[r7,#4]
 2273 000c FB72     	 strb r3,[r7,#11]
  83:main.c        ****     struct genclk_config gcfg;
  84:main.c        **** 
  85:main.c        ****     genclk_config_defaults(&gcfg, id);
 2274              	 .loc 11 85 5
 2275 000e 07F11403 	 add r3,r7,#20
 2276 0012 F968     	 ldr r1,[r7,#12]
 2277 0014 1846     	 mov r0,r3
 2278 0016 0E4B     	 ldr r3,.L172
 2279 0018 9847     	 blx r3
 2280              	.LVL80:
  86:main.c        ****     genclk_enable_source(src);
 2281              	 .loc 11 86 5
 2282 001a FB7A     	 ldrb r3,[r7,#11]
 2283 001c 1846     	 mov r0,r3
 2284 001e 0D4B     	 ldr r3,.L172+4
 2285 0020 9847     	 blx r3
 2286              	.LVL81:
  87:main.c        ****     genclk_config_set_source(&gcfg, src);
 2287              	 .loc 11 87 5
 2288 0022 FA7A     	 ldrb r2,[r7,#11]
 2289 0024 07F11403 	 add r3,r7,#20
 2290 0028 1146     	 mov r1,r2
 2291 002a 1846     	 mov r0,r3
 2292 002c 0A4B     	 ldr r3,.L172+8
 2293 002e 9847     	 blx r3
 2294              	.LVL82:
  88:main.c        ****     genclk_config_set_divider(&gcfg, divider);
 2295              	 .loc 11 88 5
 2296 0030 07F11403 	 add r3,r7,#20
 2297 0034 7968     	 ldr r1,[r7,#4]
 2298 0036 1846     	 mov r0,r3
 2299 0038 084B     	 ldr r3,.L172+12
 2300 003a 9847     	 blx r3
 2301              	.LVL83:
  89:main.c        ****     genclk_enable(&gcfg, id);
 2302              	 .loc 11 89 5
 2303 003c 07F11403 	 add r3,r7,#20
 2304 0040 F968     	 ldr r1,[r7,#12]
 2305 0042 1846     	 mov r0,r3
 2306 0044 064B     	 ldr r3,.L172+16
 2307 0046 9847     	 blx r3
 2308              	.LVL84:
  90:main.c        **** }
 2309              	 .loc 11 90 1
 2310 0048 00BF     	 nop
 2311 004a 1837     	 adds r7,r7,#24
 2312              	.LCFI113:
 2313              	 .cfi_def_cfa_offset 8
 2314 004c BD46     	 mov sp,r7
 2315              	.LCFI114:
 2316              	 .cfi_def_cfa_register 13
 2317              	 
 2318 004e 80BD     	 pop {r7,pc}
 2319              	.L173:
 2320              	 .align 2
 2321              	.L172:
 2322 0050 00000000 	 .word genclk_config_defaults
 2323 0054 00000000 	 .word genclk_enable_source
 2324 0058 00000000 	 .word genclk_config_set_source
 2325 005c 00000000 	 .word genclk_config_set_divider
 2326 0060 00000000 	 .word genclk_enable
 2327              	 .cfi_endproc
 2328              	.LFE192:
 2330              	 .section .rodata
 2331              	 .align 2
 2332              	.LC0:
 2333 0000 25303878 	 .ascii "%08x\000"
 2333      00
 2334              	 .section .text.main,"ax",%progbits
 2335              	 .align 1
 2336              	 .global main
 2337              	 .syntax unified
 2338              	 .thumb
 2339              	 .thumb_func
 2340              	 .fpu softvfp
 2342              	main:
 2343              	.LFB193:
  91:main.c        **** 
  92:main.c        **** 
  93:main.c        **** int main(void)
  94:main.c        **** {
 2344              	 .loc 11 94 1
 2345              	 .cfi_startproc
 2346              	 
 2347              	 
 2348 0000 80B5     	 push {r7,lr}
 2349              	.LCFI115:
 2350              	 .cfi_def_cfa_offset 8
 2351              	 .cfi_offset 7,-8
 2352              	 .cfi_offset 14,-4
 2353 0002 86B0     	 sub sp,sp,#24
 2354              	.LCFI116:
 2355              	 .cfi_def_cfa_offset 32
 2356 0004 00AF     	 add r7,sp,#0
 2357              	.LCFI117:
 2358              	 .cfi_def_cfa_register 7
  95:main.c        ****     uint32_t serial_number[4];
  96:main.c        **** 
  97:main.c        ****     // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
  98:main.c        ****     flash_read_unique_id(serial_number, sizeof(serial_number));
 2359              	 .loc 11 98 5
 2360 0006 3B46     	 mov r3,r7
 2361 0008 1021     	 movs r1,#16
 2362 000a 1846     	 mov r0,r3
 2363 000c 1D4B     	 ldr r3,.L178
 2364 000e 9847     	 blx r3
 2365              	.LVL85:
  99:main.c        **** 
 100:main.c        ****     irq_initialize_vectors();
 101:main.c        ****     cpu_irq_enable();
 2366              	 .loc 11 101 5
 2367 0010 1D4B     	 ldr r3,.L178+4
 2368 0012 0122     	 movs r2,#1
 2369 0014 1A70     	 strb r2,[r3]
 2370              	.LBB54:
 2371              	.LBB55:
 354:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 2372              	 .loc 8 354 3
 2373              	 .syntax unified
 2374              	
 2375 0016 BFF35F8F 	 dmb
 2376              	
 2377              	 .loc 8 355 1
 2378              	 .thumb
 2379              	 .syntax unified
 2380 001a 00BF     	 nop
 2381              	.LBE55:
 2382              	.LBE54:
 2383              	.LBB56:
 2384              	.LBB57:
 317:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 2385              	 .loc 7 317 3
 2386              	 .syntax unified
 2387              	
 2388 001c 62B6     	 cpsie i
 2389              	
 318:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 2390              	 .loc 7 318 1
 2391              	 .thumb
 2392              	 .syntax unified
 2393 001e 00BF     	 nop
 2394              	.LBE57:
 2395              	.LBE56:
 102:main.c        **** 
 103:main.c        ****     // Initialize the sleep manager
 104:main.c        ****     sleepmgr_init();
 2396              	 .loc 11 104 5
 2397 0020 1A4B     	 ldr r3,.L178+8
 2398 0022 9847     	 blx r3
 2399              	.LVL86:
 105:main.c        **** #if !SAMD21 && !SAMR21
 106:main.c        ****     sysclk_init();
 2400              	 .loc 11 106 5
 2401 0024 1A4B     	 ldr r3,.L178+12
 2402 0026 9847     	 blx r3
 2403              	.LVL87:
 107:main.c        ****     phywhisperer_setup_pins();
 2404              	 .loc 11 107 5
 2405 0028 1A4B     	 ldr r3,.L178+16
 2406 002a 9847     	 blx r3
 2407              	.LVL88:
 2408              	.LBB58:
 108:main.c        **** #else
 109:main.c        ****     system_init();
 110:main.c        **** #endif
 111:main.c        **** 
 112:main.c        **** 	//Convert serial number to ASCII for USB Serial number
 113:main.c        **** 	for(unsigned int i = 0; i < 4; i++){
 2409              	 .loc 11 113 19
 2410 002c 0023     	 movs r3,#0
 2411 002e 7B61     	 str r3,[r7,#20]
 2412              	 .loc 11 113 2
 2413 0030 11E0     	 b .L175
 2414              	.L176:
 114:main.c        **** 		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
 2415              	 .loc 11 114 31 discriminator 3
 2416 0032 7B69     	 ldr r3,[r7,#20]
 2417 0034 DB00     	 lsls r3,r3,#3
 2418              	 .loc 11 114 3 discriminator 3
 2419 0036 184A     	 ldr r2,.L178+20
 2420 0038 9818     	 adds r0,r3,r2
 2421              	 .loc 11 114 71 discriminator 3
 2422 003a 7B69     	 ldr r3,[r7,#20]
 2423 003c 9B00     	 lsls r3,r3,#2
 2424 003e 07F11802 	 add r2,r7,#24
 2425 0042 1344     	 add r3,r3,r2
 2426 0044 53F8183C 	 ldr r3,[r3,#-24]
 2427              	 .loc 11 114 3 discriminator 3
 2428 0048 1A46     	 mov r2,r3
 2429 004a 1449     	 ldr r1,.L178+24
 2430 004c 144B     	 ldr r3,.L178+28
 2431 004e 9847     	 blx r3
 2432              	.LVL89:
 113:main.c        **** 		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
 2433              	 .loc 11 113 34 discriminator 3
 2434 0050 7B69     	 ldr r3,[r7,#20]
 2435 0052 0133     	 adds r3,r3,#1
 2436 0054 7B61     	 str r3,[r7,#20]
 2437              	.L175:
 113:main.c        **** 		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
 2438              	 .loc 11 113 2 discriminator 1
 2439 0056 7B69     	 ldr r3,[r7,#20]
 2440 0058 032B     	 cmp r3,#3
 2441 005a EAD9     	 bls .L176
 2442              	.LBE58:
 115:main.c        **** 	}
 116:main.c        **** 	usb_serial_number[32] = 0;
 2443              	 .loc 11 116 24
 2444 005c 0E4B     	 ldr r3,.L178+20
 2445 005e 0022     	 movs r2,#0
 2446 0060 83F82020 	 strb r2,[r3,#32]
 117:main.c        **** 
 118:main.c        ****     genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
 2447              	 .loc 11 118 5
 2448 0064 0022     	 movs r2,#0
 2449 0066 0A21     	 movs r1,#10
 2450 0068 0120     	 movs r0,#1
 2451 006a 0E4B     	 ldr r3,.L178+32
 2452 006c 9847     	 blx r3
 2453              	.LVL90:
 119:main.c        ****     udc_start();
 2454              	 .loc 11 119 5
 2455 006e 0E4B     	 ldr r3,.L178+36
 2456 0070 9847     	 blx r3
 2457              	.LVL91:
 120:main.c        **** 
 121:main.c        ****     USB_PWR_STATE = 0;
 2458              	 .loc 11 121 19
 2459 0072 0E4B     	 ldr r3,.L178+40
 2460 0074 0022     	 movs r2,#0
 2461 0076 1A70     	 strb r2,[r3]
 122:main.c        **** 
 123:main.c        ****     uint8_t curr_pwr_setting = 0;
 2462              	 .loc 11 123 13
 2463 0078 0023     	 movs r3,#0
 2464 007a FB74     	 strb r3,[r7,#19]
 2465              	.L177:
 124:main.c        ****     while(1) {
 125:main.c        ****         sleepmgr_enter_sleep();
 2466              	 .loc 11 125 9 discriminator 1
 2467 007c 0C4B     	 ldr r3,.L178+44
 2468 007e 9847     	 blx r3
 2469              	.LVL92:
 2470 0080 FCE7     	 b .L177
 2471              	.L179:
 2472 0082 00BF     	 .align 2
 2473              	.L178:
 2474 0084 00000000 	 .word flash_read_unique_id
 2475 0088 00000000 	 .word g_interrupt_enabled
 2476 008c 00000000 	 .word sleepmgr_init
 2477 0090 00000000 	 .word sysclk_init
 2478 0094 00000000 	 .word phywhisperer_setup_pins
 2479 0098 00000000 	 .word usb_serial_number
 2480 009c 00000000 	 .word .LC0
 2481 00a0 00000000 	 .word sprintf
 2482 00a4 00000000 	 .word genclk_enable_config
 2483 00a8 00000000 	 .word udc_start
 2484 00ac 00000000 	 .word USB_PWR_STATE
 2485 00b0 00000000 	 .word sleepmgr_enter_sleep
 2486              	 .cfi_endproc
 2487              	.LFE193:
 2489              	 .text
 2490              	.Letext0:
 2491              	 .file 12 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 2492              	 .file 13 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 2493              	 .file 14 ".././hal/sam3u1c/inc/sam3u1c.h"
 2494              	 .file 15 ".././hal/sam3u1c/inc/core_cm3.h"
 2495              	 .file 16 ".././hal/sam3u1c/inc/system_sam3u.h"
 2496              	 .file 17 ".././hal/sam3u1c/inc/component/component_pio.h"
 2497              	 .file 18 ".././hal/sam3u1c/inc/component/component_pmc.h"
 2498              	 .file 19 ".././hal/sam3u1c/inc/component/component_smc.h"
 2499              	 .file 20 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 2500              	 .file 21 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 2501              	 .file 22 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 2502              	 .file 23 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 2503              	 .file 24 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 2504              	 .file 25 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 2505              	 .file 26 ".././hal/sam3u1c/inc/compiler.h"
 2506              	 .file 27 ".././hal/sam3u1c/inc/pio.h"
 2507              	 .file 28 "./conf_usb.h"
 2508              	 .file 29 ".././hal/sam3u1c/inc/usb_protocol.h"
 2509              	 .file 30 ".././hal/sam3u1c/inc/udi.h"
 2510              	 .file 31 ".././hal/sam3u1c/inc/udc_desc.h"
 2511              	 .file 32 ".././hal/sam3u1c/inc/udd.h"
 2512              	 .file 33 ".././hal/sam3u1c/inc/udi_vendor.h"
 2513              	 .file 34 ".././hal/sam3u1c/inc/stdio_serial.h"
 2514              	 .file 35 ".././hal/sam3u1c/inc/tasks.h"
 2515              	 .file 36 "usb_xmem.h"
 2516              	 .file 37 "fpga_program.h"
 2517              	 .file 38 ".././hal/sam3u1c/inc/usb.h"
 2518              	 .file 39 ".././hal/sam3u1c/inc/flash_efc.h"
 2519              	 .file 40 ".././hal/sam3u1c/inc/sam3u/sysclk.h"
 2520              	 .file 41 ".././hal/sam3u1c/inc/udc.h"
 2521              	 .file 42 ".././hal/sam3u1c/inc/board.h"
 2522              	 .file 43 ".././hal/sam3u1c/inc/pmc.h"
 2523              	 .file 44 ".././hal/sam3u1c/inc/smc.h"
 2524              	 .file 45 ".././hal/sam3u1c/inc/sleep.h"
 2525              	 .file 46 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.osc_enable:00000000 $t
    {standard input}:34     .text.osc_enable:00000000 osc_enable
    {standard input}:60     .text.osc_enable:00000014 $d
    {standard input}:68     .text.osc_enable:00000034 $t
    {standard input}:142    .text.osc_enable:00000074 $d
    {standard input}:150    .text.osc_is_ready:00000000 $t
    {standard input}:156    .text.osc_is_ready:00000000 osc_is_ready
    {standard input}:181    .text.osc_is_ready:00000014 $d
    {standard input}:189    .text.osc_is_ready:00000034 $t
    {standard input}:247    .text.osc_is_ready:00000078 $d
    {standard input}:254    .text.osc_get_rate:00000000 $t
    {standard input}:260    .text.osc_get_rate:00000000 osc_get_rate
    {standard input}:285    .text.osc_get_rate:00000014 $d
    {standard input}:293    .text.osc_get_rate:00000034 $t
    {standard input}:347    .text.osc_get_rate:00000064 $d
    {standard input}:354    .text.osc_wait_ready:00000000 $t
    {standard input}:360    .text.osc_wait_ready:00000000 osc_wait_ready
    {standard input}:410    .text.osc_wait_ready:0000002c $d
    {standard input}:415    .text.pll_config_init:00000000 $t
    {standard input}:421    .text.pll_config_init:00000000 pll_config_init
    {standard input}:505    .text.pll_config_init:00000064 $d
    {standard input}:511    .text.pll_enable:00000000 $t
    {standard input}:517    .text.pll_enable:00000000 pll_enable
    {standard input}:579    .text.pll_enable:00000038 $d
    {standard input}:585    .text.pll_is_locked:00000000 $t
    {standard input}:591    .text.pll_is_locked:00000000 pll_is_locked
    {standard input}:639    .text.pll_is_locked:00000024 $d
    {standard input}:645    .text.pll_enable_source:00000000 $t
    {standard input}:651    .text.pll_enable_source:00000000 pll_enable_source
    {standard input}:706    .text.pll_enable_source:00000030 $d
    {standard input}:712    .text.pll_enable_config_defaults:00000000 $t
    {standard input}:718    .text.pll_enable_config_defaults:00000000 pll_enable_config_defaults
    {standard input}:849    .text.pll_enable_config_defaults:00000090 $d
    {standard input}:860    .text.ioport_set_pin_mode:00000000 $t
    {standard input}:866    .text.ioport_set_pin_mode:00000000 ioport_set_pin_mode
    {standard input}:1054   .text.sleepmgr_sleep:00000000 $t
    {standard input}:1060   .text.sleepmgr_sleep:00000000 sleepmgr_sleep
    {standard input}:1131   .text.sleepmgr_sleep:0000002c $d
    {standard input}:1137   .text.sleepmgr_init:00000000 $t
    {standard input}:1143   .text.sleepmgr_init:00000000 sleepmgr_init
    {standard input}:1203   .text.sleepmgr_init:00000030 $d
    {standard input}:1208   .text.sleepmgr_get_sleep_mode:00000000 $t
    {standard input}:1214   .text.sleepmgr_get_sleep_mode:00000000 sleepmgr_get_sleep_mode
    {standard input}:1274   .text.sleepmgr_get_sleep_mode:00000030 $d
    {standard input}:1279   .text.sleepmgr_enter_sleep:00000000 $t
    {standard input}:1285   .text.sleepmgr_enter_sleep:00000000 sleepmgr_enter_sleep
    {standard input}:1364   .text.sleepmgr_enter_sleep:00000034 $d
    {standard input}:1371   .text.genclk_config_defaults:00000000 $t
    {standard input}:1377   .text.genclk_config_defaults:00000000 genclk_config_defaults
    {standard input}:1419   .text.genclk_config_set_source:00000000 $t
    {standard input}:1425   .text.genclk_config_set_source:00000000 genclk_config_set_source
    {standard input}:1459   .text.genclk_config_set_source:00000024 $d
    {standard input}:1470   .text.genclk_config_set_source:00000050 $t
    {standard input}:1535   .text.genclk_config_set_divider:00000000 $t
    {standard input}:1541   .text.genclk_config_set_divider:00000000 genclk_config_set_divider
    {standard input}:1591   .text.genclk_enable:00000000 $t
    {standard input}:1597   .text.genclk_enable:00000000 genclk_enable
    {standard input}:1643   .text.genclk_enable:00000028 $d
    {standard input}:1649   .text.genclk_enable_source:00000000 $t
    {standard input}:1655   .text.genclk_enable_source:00000000 genclk_enable_source
    {standard input}:1682   .text.genclk_enable_source:00000018 $d
    {standard input}:1693   .text.genclk_enable_source:00000044 $t
    {standard input}:1960   .text.genclk_enable_source:00000180 $d
    {standard input}:1972   .data.usb_serial_number:00000000 usb_serial_number
    {standard input}:1969   .data.usb_serial_number:00000000 $d
    {standard input}:1976   .text.phywhisperer_setup_pins:00000000 $t
    {standard input}:1983   .text.phywhisperer_setup_pins:00000000 phywhisperer_setup_pins
    {standard input}:2162   .text.phywhisperer_setup_pins:000000f0 $d
    {standard input}:2181   .text.hacky_delay:00000000 $t
    {standard input}:2188   .text.hacky_delay:00000000 hacky_delay
    {standard input}:2242   .text.hacky_delay:00000028 $d
    {standard input}:2247   .text.genclk_enable_config:00000000 $t
    {standard input}:2253   .text.genclk_enable_config:00000000 genclk_enable_config
    {standard input}:2322   .text.genclk_enable_config:00000050 $d
    {standard input}:2331   .rodata:00000000 $d
    {standard input}:2335   .text.main:00000000 $t
    {standard input}:2342   .text.main:00000000 main
    {standard input}:2474   .text.main:00000084 $d
                           .group:00000000 wm4.0.2cd8a2cb7ff4c48cec7eeec776a1dd8c
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.48.ce8d06c36cc583d9bf62738411f62e4d
                           .group:00000000 wm4.cw521.h.62.1727e9a463c60d459e36c42a4e5a0f86
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.cycle_counter.h.44.fde38fb1acfd6555d72e65fae6e86af5
                           .group:00000000 wm4.delay.h.105.f2a8ab5e71eab0684cf6985b5c2fc9e8
                           .group:00000000 wm4.efc.h.45.ec5734119c630498df26106bacf9a684
                           .group:00000000 wm4.flash_efc.h.90.a4a39259055880dc10b861c5fe1b99e7
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.sam_gpio.h.50.76a45c51855d665134f8211cd601d693
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.smc.h.45.17a94aa976bb62b1109d03e8a314a569
                           .group:00000000 wm4.spi.h.45.712c66be09ffbac297c2e00923077297
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3
                           .group:00000000 wm4.twi.h.45.ba70de99d200dafba570ce8f7058737a
                           .group:00000000 wm4.twi_master.h.90.08c062d0fa8f8aeea342ceeb79263395
                           .group:00000000 wm4.twi_slave.h.45.8b3d1a3d2e43ebc7d0161f4142989871
                           .group:00000000 wm4.uart.h.45.a5af743b8064bd84d1a6438457096e18
                           .group:00000000 wm4.usart.h.46.eae6fe592b7ea0768efef8d312e7f44f
                           .group:00000000 wm4.conf_uart_serial.h.45.245cdceaa1a3811fd043bf660ce38054
                           .group:00000000 wm4.conf_usb.h.45.2f7207bed7467dcf9cb11fbc6ebe572c
                           .group:00000000 wm4.udi_vendor_conf.h.56.4348c8e521d040f44df868219dae6785
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.genclk.h.45.f7865052b40a907e4bab1a8f483a50e2
                           .group:00000000 wm4.usb_xmem.h.16.2bfdefafb315212fe60310212368ffbb
                           .group:00000000 wm4.fpga_program.h.36.ca9933fdd1528ae3419efe9d74ea4ee5
                           .group:00000000 wm4.usb.h.20.f560de5b472e2e451b5cba954e5d0064
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd

UNDEFINED SYMBOLS
pmc_switch_sclk_to_32kxtal
pmc_osc_enable_fastrc
pmc_osc_enable_main_xtal
pmc_osc_bypass_main_xtal
pmc_osc_is_ready_32kxtal
pmc_osc_is_ready_fastrc
pmc_osc_is_ready_main_xtal
pmc_disable_pllack
pmc_is_locked_pllack
pmc_is_locked_upll
pmc_mainck_osc_select
pmc_osc_is_ready_mainck
pmc_osc_is_bypassed_main_xtal
g_interrupt_enabled
pmc_sleep
sleepmgr_locks
pmc_enable_pck
board_init
fpga_program_init
pmc_enable_periph_clk
pio_configure_pin
pio_configure_pin_group
pio_enable_output_write
smc_set_setup_timing
smc_set_pulse_timing
smc_set_cycle_timing
smc_set_mode
flash_read_unique_id
sysclk_init
sprintf
udc_start
USB_PWR_STATE
