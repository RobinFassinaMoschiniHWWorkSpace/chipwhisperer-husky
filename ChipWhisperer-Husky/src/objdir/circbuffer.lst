   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "circbuffer.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.init_circ_buf,"ax",%progbits
  16              	 .align 1
  17              	 .global init_circ_buf
  18              	 .arch armv7-m
  19              	 .syntax unified
  20              	 .thumb
  21              	 .thumb_func
  22              	 .fpu softvfp
  24              	init_circ_buf:
  25              	.LFB0:
  26              	 .file 1 ".././hal/sam3u1c/circbuffer.c"
   1:.././hal/sam3u1c/circbuffer.c **** /*
   2:.././hal/sam3u1c/circbuffer.c ****  * Copyright (c) 2014 NewAE Technology Inc.
   3:.././hal/sam3u1c/circbuffer.c ****  * All rights reserved.
   4:.././hal/sam3u1c/circbuffer.c ****  *
   5:.././hal/sam3u1c/circbuffer.c ****  * Redistribution and use in source and binary forms, with or without modification,
   6:.././hal/sam3u1c/circbuffer.c ****  * are permitted provided that the following conditions are met:
   7:.././hal/sam3u1c/circbuffer.c ****  *
   8:.././hal/sam3u1c/circbuffer.c ****  * * Redistributions of source code must retain the above copyright notice, this list
   9:.././hal/sam3u1c/circbuffer.c ****  *   of conditions and the following disclaimer.
  10:.././hal/sam3u1c/circbuffer.c ****  *
  11:.././hal/sam3u1c/circbuffer.c ****  * * Redistributions in binary form must reproduce the above copyright notice, this
  12:.././hal/sam3u1c/circbuffer.c ****  *   list of conditions and the following disclaimer in the documentation and/or other
  13:.././hal/sam3u1c/circbuffer.c ****  *   materials provided with the distribution.
  14:.././hal/sam3u1c/circbuffer.c ****  *
  15:.././hal/sam3u1c/circbuffer.c ****  * * Neither the name of the author nor the names of its contributors may be
  16:.././hal/sam3u1c/circbuffer.c ****  *   used to endorse or promote products derived from this software without specific
  17:.././hal/sam3u1c/circbuffer.c ****  *   prior written permission.
  18:.././hal/sam3u1c/circbuffer.c ****  *
  19:.././hal/sam3u1c/circbuffer.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
  20:.././hal/sam3u1c/circbuffer.c ****  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  21:.././hal/sam3u1c/circbuffer.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  22:.././hal/sam3u1c/circbuffer.c ****  * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  23:.././hal/sam3u1c/circbuffer.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
  24:.././hal/sam3u1c/circbuffer.c ****  * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
  25:.././hal/sam3u1c/circbuffer.c ****  * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  26:.././hal/sam3u1c/circbuffer.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  27:.././hal/sam3u1c/circbuffer.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  28:.././hal/sam3u1c/circbuffer.c ****  * DAMAGE.
  29:.././hal/sam3u1c/circbuffer.c ****  */
  30:.././hal/sam3u1c/circbuffer.c **** #include "circbuffer.h"
  31:.././hal/sam3u1c/circbuffer.c **** 
  32:.././hal/sam3u1c/circbuffer.c **** /*
  33:.././hal/sam3u1c/circbuffer.c ****     @brief Initializes the circular buffer.
  34:.././hal/sam3u1c/circbuffer.c **** 
  35:.././hal/sam3u1c/circbuffer.c ****     @param cbuf Points to the structure to be initialized.
  36:.././hal/sam3u1c/circbuffer.c **** */
  37:.././hal/sam3u1c/circbuffer.c **** void init_circ_buf(tcirc_buf *cbuf)
  38:.././hal/sam3u1c/circbuffer.c **** {
  27              	 .loc 1 38 1
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  39:.././hal/sam3u1c/circbuffer.c ****     cbuf->head = cbuf->tail = 0;
  43              	 .loc 1 39 29
  44 0008 0023     	 movs r3,#0
  45 000a 7A68     	 ldr r2,[r7,#4]
  46 000c 5360     	 str r3,[r2,#4]
  47              	 .loc 1 39 16
  48 000e 7A68     	 ldr r2,[r7,#4]
  49 0010 1360     	 str r3,[r2]
  40:.././hal/sam3u1c/circbuffer.c ****     cbuf->dropped = 0;
  50              	 .loc 1 40 19
  51 0012 7B68     	 ldr r3,[r7,#4]
  52 0014 0022     	 movs r2,#0
  53 0016 9A60     	 str r2,[r3,#8]
  41:.././hal/sam3u1c/circbuffer.c **** }
  54              	 .loc 1 41 1
  55 0018 00BF     	 nop
  56 001a 0C37     	 adds r7,r7,#12
  57              	.LCFI3:
  58              	 .cfi_def_cfa_offset 4
  59 001c BD46     	 mov sp,r7
  60              	.LCFI4:
  61              	 .cfi_def_cfa_register 13
  62              	 
  63 001e 80BC     	 pop {r7}
  64              	.LCFI5:
  65              	 .cfi_restore 7
  66              	 .cfi_def_cfa_offset 0
  67 0020 7047     	 bx lr
  68              	 .cfi_endproc
  69              	.LFE0:
  71              	 .section .text.add_to_circ_buf,"ax",%progbits
  72              	 .align 1
  73              	 .global add_to_circ_buf
  74              	 .syntax unified
  75              	 .thumb
  76              	 .thumb_func
  77              	 .fpu softvfp
  79              	add_to_circ_buf:
  80              	.LFB1:
  42:.././hal/sam3u1c/circbuffer.c **** 
  43:.././hal/sam3u1c/circbuffer.c **** /*
  44:.././hal/sam3u1c/circbuffer.c ****     @brief This will add a character to the circular buffer.
  45:.././hal/sam3u1c/circbuffer.c **** 
  46:.././hal/sam3u1c/circbuffer.c ****     @param cbuf Pointer to structure that contains data.
  47:.././hal/sam3u1c/circbuffer.c ****     @param ch Character to add to buffer.
  48:.././hal/sam3u1c/circbuffer.c **** */
  49:.././hal/sam3u1c/circbuffer.c **** void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
  50:.././hal/sam3u1c/circbuffer.c **** {
  81              	 .loc 1 50 1
  82              	 .cfi_startproc
  83              	 
  84              	 
  85              	 
  86 0000 80B4     	 push {r7}
  87              	.LCFI6:
  88              	 .cfi_def_cfa_offset 4
  89              	 .cfi_offset 7,-4
  90 0002 85B0     	 sub sp,sp,#20
  91              	.LCFI7:
  92              	 .cfi_def_cfa_offset 24
  93 0004 00AF     	 add r7,sp,#0
  94              	.LCFI8:
  95              	 .cfi_def_cfa_register 7
  96 0006 7860     	 str r0,[r7,#4]
  97 0008 0B46     	 mov r3,r1
  98 000a FB70     	 strb r3,[r7,#3]
  99 000c 1346     	 mov r3,r2
 100 000e BB70     	 strb r3,[r7,#2]
  51:.././hal/sam3u1c/circbuffer.c ****     // Add char to buffer
  52:.././hal/sam3u1c/circbuffer.c ****     unsigned int newhead = cbuf->head;
 101              	 .loc 1 52 18
 102 0010 7B68     	 ldr r3,[r7,#4]
 103 0012 1B68     	 ldr r3,[r3]
 104 0014 FB60     	 str r3,[r7,#12]
  53:.././hal/sam3u1c/circbuffer.c ****     newhead++;
 105              	 .loc 1 53 12
 106 0016 FB68     	 ldr r3,[r7,#12]
 107 0018 0133     	 adds r3,r3,#1
 108 001a FB60     	 str r3,[r7,#12]
  54:.././hal/sam3u1c/circbuffer.c ****     if (newhead >= CIRCBUFSIZE)
 109              	 .loc 1 54 8
 110 001c FB68     	 ldr r3,[r7,#12]
 111 001e 7F2B     	 cmp r3,#127
 112 0020 0ED9     	 bls .L4
  55:.././hal/sam3u1c/circbuffer.c ****         newhead = 0;
 113              	 .loc 1 55 17
 114 0022 0023     	 movs r3,#0
 115 0024 FB60     	 str r3,[r7,#12]
  56:.././hal/sam3u1c/circbuffer.c ****     while (newhead == cbuf->tail)
 116              	 .loc 1 56 11
 117 0026 0BE0     	 b .L4
 118              	.L6:
  57:.././hal/sam3u1c/circbuffer.c ****     {
  58:.././hal/sam3u1c/circbuffer.c ****         if (!block)
 119              	 .loc 1 58 13
 120 0028 BB78     	 ldrb r3,[r7,#2]
 121 002a 83F00103 	 eor r3,r3,#1
 122 002e DBB2     	 uxtb r3,r3
 123              	 .loc 1 58 12
 124 0030 002B     	 cmp r3,#0
 125 0032 05D0     	 beq .L4
  59:.././hal/sam3u1c/circbuffer.c ****         {
  60:.././hal/sam3u1c/circbuffer.c ****             cbuf->dropped++;
 126              	 .loc 1 60 17
 127 0034 7B68     	 ldr r3,[r7,#4]
 128 0036 9B68     	 ldr r3,[r3,#8]
 129              	 .loc 1 60 26
 130 0038 5A1C     	 adds r2,r3,#1
 131 003a 7B68     	 ldr r3,[r7,#4]
 132 003c 9A60     	 str r2,[r3,#8]
  61:.././hal/sam3u1c/circbuffer.c ****             return;
 133              	 .loc 1 61 13
 134 003e 0DE0     	 b .L2
 135              	.L4:
  56:.././hal/sam3u1c/circbuffer.c ****     {
 136              	 .loc 1 56 27
 137 0040 7B68     	 ldr r3,[r7,#4]
 138 0042 5B68     	 ldr r3,[r3,#4]
  56:.././hal/sam3u1c/circbuffer.c ****     {
 139              	 .loc 1 56 11
 140 0044 FA68     	 ldr r2,[r7,#12]
 141 0046 9A42     	 cmp r2,r3
 142 0048 EED0     	 beq .L6
  62:.././hal/sam3u1c/circbuffer.c ****         }
  63:.././hal/sam3u1c/circbuffer.c ****         
  64:.././hal/sam3u1c/circbuffer.c ****         //Add processing here?
  65:.././hal/sam3u1c/circbuffer.c ****         
  66:.././hal/sam3u1c/circbuffer.c ****     }
  67:.././hal/sam3u1c/circbuffer.c **** 
  68:.././hal/sam3u1c/circbuffer.c ****     cbuf->buf[cbuf->head] = ch;
 143              	 .loc 1 68 19
 144 004a 7B68     	 ldr r3,[r7,#4]
 145 004c 1B68     	 ldr r3,[r3]
 146              	 .loc 1 68 27
 147 004e 7A68     	 ldr r2,[r7,#4]
 148 0050 1344     	 add r3,r3,r2
 149 0052 FA78     	 ldrb r2,[r7,#3]
 150 0054 1A73     	 strb r2,[r3,#12]
  69:.././hal/sam3u1c/circbuffer.c ****     cbuf->head = newhead;
 151              	 .loc 1 69 16
 152 0056 7B68     	 ldr r3,[r7,#4]
 153 0058 FA68     	 ldr r2,[r7,#12]
 154 005a 1A60     	 str r2,[r3]
 155              	.L2:
  70:.././hal/sam3u1c/circbuffer.c **** }
 156              	 .loc 1 70 1
 157 005c 1437     	 adds r7,r7,#20
 158              	.LCFI9:
 159              	 .cfi_def_cfa_offset 4
 160 005e BD46     	 mov sp,r7
 161              	.LCFI10:
 162              	 .cfi_def_cfa_register 13
 163              	 
 164 0060 80BC     	 pop {r7}
 165              	.LCFI11:
 166              	 .cfi_restore 7
 167              	 .cfi_def_cfa_offset 0
 168 0062 7047     	 bx lr
 169              	 .cfi_endproc
 170              	.LFE1:
 172              	 .section .text.get_from_circ_buf,"ax",%progbits
 173              	 .align 1
 174              	 .global get_from_circ_buf
 175              	 .syntax unified
 176              	 .thumb
 177              	 .thumb_func
 178              	 .fpu softvfp
 180              	get_from_circ_buf:
 181              	.LFB2:
  71:.././hal/sam3u1c/circbuffer.c **** 
  72:.././hal/sam3u1c/circbuffer.c **** /*
  73:.././hal/sam3u1c/circbuffer.c ****     @brief This will get a character out of the circular buffer.
  74:.././hal/sam3u1c/circbuffer.c **** 
  75:.././hal/sam3u1c/circbuffer.c ****     @param cbuf Pointer to structure that contains data.
  76:.././hal/sam3u1c/circbuffer.c **** 
  77:.././hal/sam3u1c/circbuffer.c ****     @return retval Character to be returned from buffer.  If no char
  78:.././hal/sam3u1c/circbuffer.c ****     is available, returns SERIAL_ERR.
  79:.././hal/sam3u1c/circbuffer.c **** */
  80:.././hal/sam3u1c/circbuffer.c **** uint8_t get_from_circ_buf(tcirc_buf *cbuf)
  81:.././hal/sam3u1c/circbuffer.c **** {
 182              	 .loc 1 81 1
 183              	 .cfi_startproc
 184              	 
 185              	 
 186              	 
 187 0000 80B4     	 push {r7}
 188              	.LCFI12:
 189              	 .cfi_def_cfa_offset 4
 190              	 .cfi_offset 7,-4
 191 0002 85B0     	 sub sp,sp,#20
 192              	.LCFI13:
 193              	 .cfi_def_cfa_offset 24
 194 0004 00AF     	 add r7,sp,#0
 195              	.LCFI14:
 196              	 .cfi_def_cfa_register 7
 197 0006 7860     	 str r0,[r7,#4]
  82:.././hal/sam3u1c/circbuffer.c ****     // Get char from buffer
  83:.././hal/sam3u1c/circbuffer.c ****     // Be sure to check first that there is a char in buffer
  84:.././hal/sam3u1c/circbuffer.c ****     unsigned int newtail = cbuf->tail;
 198              	 .loc 1 84 18
 199 0008 7B68     	 ldr r3,[r7,#4]
 200 000a 5B68     	 ldr r3,[r3,#4]
 201 000c FB60     	 str r3,[r7,#12]
  85:.././hal/sam3u1c/circbuffer.c ****     uint8_t retval = cbuf->buf[newtail];
 202              	 .loc 1 85 13
 203 000e 7A68     	 ldr r2,[r7,#4]
 204 0010 FB68     	 ldr r3,[r7,#12]
 205 0012 1344     	 add r3,r3,r2
 206 0014 0C33     	 adds r3,r3,#12
 207 0016 1B78     	 ldrb r3,[r3]
 208 0018 FB72     	 strb r3,[r7,#11]
  86:.././hal/sam3u1c/circbuffer.c **** 
  87:.././hal/sam3u1c/circbuffer.c ****     if (newtail == cbuf->head)
 209              	 .loc 1 87 24
 210 001a 7B68     	 ldr r3,[r7,#4]
 211 001c 1B68     	 ldr r3,[r3]
 212              	 .loc 1 87 8
 213 001e FA68     	 ldr r2,[r7,#12]
 214 0020 9A42     	 cmp r2,r3
 215 0022 01D1     	 bne .L8
  88:.././hal/sam3u1c/circbuffer.c ****         return SERIAL_ERR;
 216              	 .loc 1 88 16
 217 0024 FF23     	 movs r3,#255
 218 0026 0BE0     	 b .L9
 219              	.L8:
  89:.././hal/sam3u1c/circbuffer.c **** 
  90:.././hal/sam3u1c/circbuffer.c ****     newtail++;
 220              	 .loc 1 90 12
 221 0028 FB68     	 ldr r3,[r7,#12]
 222 002a 0133     	 adds r3,r3,#1
 223 002c FB60     	 str r3,[r7,#12]
  91:.././hal/sam3u1c/circbuffer.c ****     if (newtail >= CIRCBUFSIZE)
 224              	 .loc 1 91 8
 225 002e FB68     	 ldr r3,[r7,#12]
 226 0030 7F2B     	 cmp r3,#127
 227 0032 01D9     	 bls .L10
  92:.././hal/sam3u1c/circbuffer.c ****         // Rollover
  93:.././hal/sam3u1c/circbuffer.c ****         newtail = 0;
 228              	 .loc 1 93 17
 229 0034 0023     	 movs r3,#0
 230 0036 FB60     	 str r3,[r7,#12]
 231              	.L10:
  94:.././hal/sam3u1c/circbuffer.c ****     cbuf->tail = newtail;
 232              	 .loc 1 94 16
 233 0038 7B68     	 ldr r3,[r7,#4]
 234 003a FA68     	 ldr r2,[r7,#12]
 235 003c 5A60     	 str r2,[r3,#4]
  95:.././hal/sam3u1c/circbuffer.c **** 
  96:.././hal/sam3u1c/circbuffer.c ****     return retval;
 236              	 .loc 1 96 12
 237 003e FB7A     	 ldrb r3,[r7,#11]
 238              	.L9:
  97:.././hal/sam3u1c/circbuffer.c **** }
 239              	 .loc 1 97 1
 240 0040 1846     	 mov r0,r3
 241 0042 1437     	 adds r7,r7,#20
 242              	.LCFI15:
 243              	 .cfi_def_cfa_offset 4
 244 0044 BD46     	 mov sp,r7
 245              	.LCFI16:
 246              	 .cfi_def_cfa_register 13
 247              	 
 248 0046 80BC     	 pop {r7}
 249              	.LCFI17:
 250              	 .cfi_restore 7
 251              	 .cfi_def_cfa_offset 0
 252 0048 7047     	 bx lr
 253              	 .cfi_endproc
 254              	.LFE2:
 256              	 .section .text.circ_buf_has_char,"ax",%progbits
 257              	 .align 1
 258              	 .global circ_buf_has_char
 259              	 .syntax unified
 260              	 .thumb
 261              	 .thumb_func
 262              	 .fpu softvfp
 264              	circ_buf_has_char:
 265              	.LFB3:
  98:.././hal/sam3u1c/circbuffer.c **** 
  99:.././hal/sam3u1c/circbuffer.c **** /*
 100:.././hal/sam3u1c/circbuffer.c ****     @brief This will determine if there is a character in the circular buffer.
 101:.././hal/sam3u1c/circbuffer.c **** 
 102:.././hal/sam3u1c/circbuffer.c ****     @param cbuf Pointer to structure that contains data.
 103:.././hal/sam3u1c/circbuffer.c **** 
 104:.././hal/sam3u1c/circbuffer.c ****     @retval true if buffer contains data.
 105:.././hal/sam3u1c/circbuffer.c ****     @retval false if buffer is empty.
 106:.././hal/sam3u1c/circbuffer.c **** */
 107:.././hal/sam3u1c/circbuffer.c **** bool circ_buf_has_char(tcirc_buf *cbuf)
 108:.././hal/sam3u1c/circbuffer.c **** {
 266              	 .loc 1 108 1
 267              	 .cfi_startproc
 268              	 
 269              	 
 270              	 
 271 0000 80B4     	 push {r7}
 272              	.LCFI18:
 273              	 .cfi_def_cfa_offset 4
 274              	 .cfi_offset 7,-4
 275 0002 85B0     	 sub sp,sp,#20
 276              	.LCFI19:
 277              	 .cfi_def_cfa_offset 24
 278 0004 00AF     	 add r7,sp,#0
 279              	.LCFI20:
 280              	 .cfi_def_cfa_register 7
 281 0006 7860     	 str r0,[r7,#4]
 109:.././hal/sam3u1c/circbuffer.c ****     // Return true if buffer empty
 110:.././hal/sam3u1c/circbuffer.c ****     unsigned int head = cbuf->head;
 282              	 .loc 1 110 18
 283 0008 7B68     	 ldr r3,[r7,#4]
 284 000a 1B68     	 ldr r3,[r3]
 285 000c FB60     	 str r3,[r7,#12]
 111:.././hal/sam3u1c/circbuffer.c ****     return (head != cbuf->tail);
 286              	 .loc 1 111 25
 287 000e 7B68     	 ldr r3,[r7,#4]
 288 0010 5B68     	 ldr r3,[r3,#4]
 289              	 .loc 1 111 18
 290 0012 FA68     	 ldr r2,[r7,#12]
 291 0014 9A42     	 cmp r2,r3
 292 0016 14BF     	 ite ne
 293 0018 0123     	 movne r3,#1
 294 001a 0023     	 moveq r3,#0
 295 001c DBB2     	 uxtb r3,r3
 112:.././hal/sam3u1c/circbuffer.c **** }
 296              	 .loc 1 112 1
 297 001e 1846     	 mov r0,r3
 298 0020 1437     	 adds r7,r7,#20
 299              	.LCFI21:
 300              	 .cfi_def_cfa_offset 4
 301 0022 BD46     	 mov sp,r7
 302              	.LCFI22:
 303              	 .cfi_def_cfa_register 13
 304              	 
 305 0024 80BC     	 pop {r7}
 306              	.LCFI23:
 307              	 .cfi_restore 7
 308              	 .cfi_def_cfa_offset 0
 309 0026 7047     	 bx lr
 310              	 .cfi_endproc
 311              	.LFE3:
 313              	 .section .text.circ_buf_count,"ax",%progbits
 314              	 .align 1
 315              	 .global circ_buf_count
 316              	 .syntax unified
 317              	 .thumb
 318              	 .thumb_func
 319              	 .fpu softvfp
 321              	circ_buf_count:
 322              	.LFB4:
 113:.././hal/sam3u1c/circbuffer.c **** 
 114:.././hal/sam3u1c/circbuffer.c **** /*
 115:.././hal/sam3u1c/circbuffer.c ****    @brief Returns the number of stored chars in the circular buffer.
 116:.././hal/sam3u1c/circbuffer.c **** 
 117:.././hal/sam3u1c/circbuffer.c ****    @param cbuf is the circular buffer to query
 118:.././hal/sam3u1c/circbuffer.c **** 
 119:.././hal/sam3u1c/circbuffer.c ****    @return count Number of chars in buffer.
 120:.././hal/sam3u1c/circbuffer.c ****  */
 121:.././hal/sam3u1c/circbuffer.c **** unsigned int circ_buf_count(tcirc_buf *cbuf)
 122:.././hal/sam3u1c/circbuffer.c **** {
 323              	 .loc 1 122 1
 324              	 .cfi_startproc
 325              	 
 326              	 
 327              	 
 328 0000 80B4     	 push {r7}
 329              	.LCFI24:
 330              	 .cfi_def_cfa_offset 4
 331              	 .cfi_offset 7,-4
 332 0002 85B0     	 sub sp,sp,#20
 333              	.LCFI25:
 334              	 .cfi_def_cfa_offset 24
 335 0004 00AF     	 add r7,sp,#0
 336              	.LCFI26:
 337              	 .cfi_def_cfa_register 7
 338 0006 7860     	 str r0,[r7,#4]
 123:.././hal/sam3u1c/circbuffer.c ****     int count;
 124:.././hal/sam3u1c/circbuffer.c **** 
 125:.././hal/sam3u1c/circbuffer.c ****     count = cbuf->head;
 339              	 .loc 1 125 17
 340 0008 7B68     	 ldr r3,[r7,#4]
 341 000a 1B68     	 ldr r3,[r3]
 342              	 .loc 1 125 11
 343 000c FB60     	 str r3,[r7,#12]
 126:.././hal/sam3u1c/circbuffer.c ****     count -= cbuf->tail;
 344              	 .loc 1 126 18
 345 000e 7B68     	 ldr r3,[r7,#4]
 346 0010 5B68     	 ldr r3,[r3,#4]
 347              	 .loc 1 126 11
 348 0012 FA68     	 ldr r2,[r7,#12]
 349 0014 D31A     	 subs r3,r2,r3
 350 0016 FB60     	 str r3,[r7,#12]
 127:.././hal/sam3u1c/circbuffer.c ****     if (count < 0)
 351              	 .loc 1 127 8
 352 0018 FB68     	 ldr r3,[r7,#12]
 353 001a 002B     	 cmp r3,#0
 354 001c 02DA     	 bge .L14
 128:.././hal/sam3u1c/circbuffer.c ****         count += CIRCBUFSIZE;
 355              	 .loc 1 128 15
 356 001e FB68     	 ldr r3,[r7,#12]
 357 0020 8033     	 adds r3,r3,#128
 358 0022 FB60     	 str r3,[r7,#12]
 359              	.L14:
 129:.././hal/sam3u1c/circbuffer.c ****     return (unsigned int)count;
 360              	 .loc 1 129 12
 361 0024 FB68     	 ldr r3,[r7,#12]
 130:.././hal/sam3u1c/circbuffer.c **** }
 362              	 .loc 1 130 1
 363 0026 1846     	 mov r0,r3
 364 0028 1437     	 adds r7,r7,#20
 365              	.LCFI27:
 366              	 .cfi_def_cfa_offset 4
 367 002a BD46     	 mov sp,r7
 368              	.LCFI28:
 369              	 .cfi_def_cfa_register 13
 370              	 
 371 002c 80BC     	 pop {r7}
 372              	.LCFI29:
 373              	 .cfi_restore 7
 374              	 .cfi_def_cfa_offset 0
 375 002e 7047     	 bx lr
 376              	 .cfi_endproc
 377              	.LFE4:
 379              	 .text
 380              	.Letext0:
 381              	 .file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 382              	 .file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 383              	 .file 4 ".././hal/sam3u1c/inc/circbuffer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 circbuffer.c
    {standard input}:16     .text.init_circ_buf:00000000 $t
    {standard input}:24     .text.init_circ_buf:00000000 init_circ_buf
    {standard input}:72     .text.add_to_circ_buf:00000000 $t
    {standard input}:79     .text.add_to_circ_buf:00000000 add_to_circ_buf
    {standard input}:173    .text.get_from_circ_buf:00000000 $t
    {standard input}:180    .text.get_from_circ_buf:00000000 get_from_circ_buf
    {standard input}:257    .text.circ_buf_has_char:00000000 $t
    {standard input}:264    .text.circ_buf_has_char:00000000 circ_buf_has_char
    {standard input}:314    .text.circ_buf_count:00000000 $t
    {standard input}:321    .text.circ_buf_count:00000000 circ_buf_count
                           .group:00000000 wm4.0.2cd8a2cb7ff4c48cec7eeec776a1dd8c
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.circbuffer.h.37.0d38773ce8409187f466a90500c0dcd0
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed

NO UNDEFINED SYMBOLS
