   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "V2Protocol.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .comm CurrentAddress,4,4
  27              	 .comm MustLoadExtendedAddress,1,1
  28              	 .section .text.V2Protocol_Init,"ax",%progbits
  29              	 .align 1
  30              	 .global V2Protocol_Init
  31              	 .arch armv7-m
  32              	 .syntax unified
  33              	 .thumb
  34              	 .thumb_func
  35              	 .fpu softvfp
  37              	V2Protocol_Init:
  38              	.LFB184:
  39              	 .file 1 "V2Protocol.c"
   1:V2Protocol.c  **** /* This file is based on the excellent LUFA Library, which is:
   2:V2Protocol.c  ****   Copyright (C) Dean Camera, 2013. See www.lufa-lib.org
   3:V2Protocol.c  ****   
   4:V2Protocol.c  ****   Note it has been modified for the SAM3U by NewAE Technology Inc.,
   5:V2Protocol.c  ****   changes Copyright (C) NewAE Technology Inc, 2015. Changes have
   6:V2Protocol.c  ****   generally basterdized and reduced the functionality of the original
   7:V2Protocol.c  ****   code, so please see original code if using this to port. 
   8:V2Protocol.c  **** */
   9:V2Protocol.c  **** 
  10:V2Protocol.c  **** /*
  11:V2Protocol.c  ****   Copyright 2013  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  12:V2Protocol.c  **** 
  13:V2Protocol.c  ****   Permission to use, copy, modify, distribute, and sell this
  14:V2Protocol.c  ****   software and its documentation for any purpose is hereby granted
  15:V2Protocol.c  ****   without fee, provided that the above copyright notice appear in
  16:V2Protocol.c  ****   all copies and that both that the copyright notice and this
  17:V2Protocol.c  ****   permission notice and warranty disclaimer appear in supporting
  18:V2Protocol.c  ****   documentation, and that the name of the author not be used in
  19:V2Protocol.c  ****   advertising or publicity pertaining to distribution of the
  20:V2Protocol.c  ****   software without specific, written prior permission.
  21:V2Protocol.c  **** 
  22:V2Protocol.c  ****   The author disclaims all warranties with regard to this
  23:V2Protocol.c  ****   software, including all implied warranties of merchantability
  24:V2Protocol.c  ****   and fitness.  In no event shall the author be liable for any
  25:V2Protocol.c  ****   special, indirect or consequential damages or any damages
  26:V2Protocol.c  ****   whatsoever resulting from loss of use, data or profits, whether
  27:V2Protocol.c  ****   in an action of contract, negligence or other tortious action,
  28:V2Protocol.c  ****   arising out of or in connection with the use or performance of
  29:V2Protocol.c  ****   this software.
  30:V2Protocol.c  **** */
  31:V2Protocol.c  **** 
  32:V2Protocol.c  **** /** \file
  33:V2Protocol.c  ****  *
  34:V2Protocol.c  ****  *  V2Protocol handler, to process V2 Protocol commands used in Atmel programmer devices.
  35:V2Protocol.c  ****  */
  36:V2Protocol.c  **** 
  37:V2Protocol.c  **** #define  INCLUDE_FROM_V2PROTOCOL_C
  38:V2Protocol.c  **** #include "V2Protocol.h"
  39:V2Protocol.c  **** #include "XPROGTimeout.h"
  40:V2Protocol.c  **** #include <string.h>
  41:V2Protocol.c  **** #include "cw521.h"
  42:V2Protocol.c  **** 
  43:V2Protocol.c  **** /** Current memory address for FLASH/EEPROM memory read/write commands */
  44:V2Protocol.c  **** uint32_t CurrentAddress;
  45:V2Protocol.c  **** 
  46:V2Protocol.c  **** /** Flag to indicate that the next read/write operation must update the device's current extended F
  47:V2Protocol.c  **** bool MustLoadExtendedAddress;
  48:V2Protocol.c  **** 
  49:V2Protocol.c  **** 
  50:V2Protocol.c  **** /** Initializes the hardware and software associated with the V2 protocol command handling. */
  51:V2Protocol.c  **** void V2Protocol_Init(void)
  52:V2Protocol.c  **** {
  40              	 .loc 1 52 1
  41              	 .cfi_startproc
  42              	 
  43              	 
  44              	 
  45 0000 80B4     	 push {r7}
  46              	.LCFI0:
  47              	 .cfi_def_cfa_offset 4
  48              	 .cfi_offset 7,-4
  49 0002 00AF     	 add r7,sp,#0
  50              	.LCFI1:
  51              	 .cfi_def_cfa_register 7
  53:V2Protocol.c  **** 	;
  54:V2Protocol.c  **** }
  52              	 .loc 1 54 1
  53 0004 00BF     	 nop
  54 0006 BD46     	 mov sp,r7
  55              	.LCFI2:
  56              	 .cfi_def_cfa_register 13
  57              	 
  58 0008 80BC     	 pop {r7}
  59              	.LCFI3:
  60              	 .cfi_restore 7
  61              	 .cfi_def_cfa_offset 0
  62 000a 7047     	 bx lr
  63              	 .cfi_endproc
  64              	.LFE184:
  66              	 .section .bss.status_payload,"aw",%nobits
  67              	 .align 2
  70              	status_payload:
  71 0000 00000000 	 .space 32
  71      00000000 
  71      00000000 
  71      00000000 
  71      00000000 
  72              	 .comm avrisp_status_payload,32,4
  73              	 .comm avrisp_status_payload_size,2,2
  74              	 .section .text.V2Protocol_ProcessCommand,"ax",%progbits
  75              	 .align 1
  76              	 .global V2Protocol_ProcessCommand
  77              	 .syntax unified
  78              	 .thumb
  79              	 .thumb_func
  80              	 .fpu softvfp
  82              	V2Protocol_ProcessCommand:
  83              	.LFB185:
  55:V2Protocol.c  **** 
  56:V2Protocol.c  **** static uint8_t status_payload[32];
  57:V2Protocol.c  **** 
  58:V2Protocol.c  **** uint8_t avrisp_status_payload[32];
  59:V2Protocol.c  **** uint16_t avrisp_status_payload_size;
  60:V2Protocol.c  **** 
  61:V2Protocol.c  **** #define AVR_BUF_SIZE 256
  62:V2Protocol.c  **** 
  63:V2Protocol.c  **** /** Master V2 Protocol packet handler, for received V2 Protocol packets from a connected host.
  64:V2Protocol.c  ****  *  This routine decodes the issued command and passes off the handling of the command to the
  65:V2Protocol.c  ****  *  appropriate function.
  66:V2Protocol.c  ****  */
  67:V2Protocol.c  **** bool V2Protocol_ProcessCommand(void)
  68:V2Protocol.c  **** {
  84              	 .loc 1 68 1
  85              	 .cfi_startproc
  86              	 
  87              	 
  88 0000 80B5     	 push {r7,lr}
  89              	.LCFI4:
  90              	 .cfi_def_cfa_offset 8
  91              	 .cfi_offset 7,-8
  92              	 .cfi_offset 14,-4
  93 0002 82B0     	 sub sp,sp,#8
  94              	.LCFI5:
  95              	 .cfi_def_cfa_offset 16
  96 0004 00AF     	 add r7,sp,#0
  97              	.LCFI6:
  98              	 .cfi_def_cfa_register 7
  69:V2Protocol.c  **** 	status_payload[0] = udd_g_ctrlreq.req.wValue & 0xff;
  99              	 .loc 1 69 39
 100 0006 684B     	 ldr r3,.L24
 101 0008 5B88     	 ldrh r3,[r3,#2]
 102              	 .loc 1 69 20
 103 000a DAB2     	 uxtb r2,r3
 104 000c 674B     	 ldr r3,.L24+4
 105 000e 1A70     	 strb r2,[r3]
  70:V2Protocol.c  **** 	uint8_t V2Command = status_payload[0];
 106              	 .loc 1 70 10
 107 0010 664B     	 ldr r3,.L24+4
 108 0012 1B78     	 ldrb r3,[r3]
 109 0014 FB71     	 strb r3,[r7,#7]
  71:V2Protocol.c  **** 	
  72:V2Protocol.c  **** 	static uint8_t avr_rambuf[AVR_BUF_SIZE];
  73:V2Protocol.c  **** 	uint8_t offset;
  74:V2Protocol.c  **** 
  75:V2Protocol.c  **** 	
  76:V2Protocol.c  **** 	/* Reset timeout counter duration and start the timer */
  77:V2Protocol.c  **** 	//TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
  78:V2Protocol.c  **** 	start_timeoutcnt();
 110              	 .loc 1 78 2
 111 0016 664B     	 ldr r3,.L24+8
 112 0018 9847     	 blx r3
 113              	.LVL0:
  79:V2Protocol.c  **** 
  80:V2Protocol.c  **** 	switch (V2Command)
 114              	 .loc 1 80 2
 115 001a FB79     	 ldrb r3,[r7,#7]
 116 001c 013B     	 subs r3,r3,#1
 117 001e 212B     	 cmp r3,#33
 118 0020 00F2B780 	 bhi .L3
 119 0024 01A2     	 adr r2,.L5
 120 0026 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 121 002a 00BF     	 .p2align 2
 122              	.L5:
 123 002c B5000000 	 .word .L19+1
 124 0030 BB000000 	 .word .L18+1
 125 0034 BB000000 	 .word .L18+1
 126 0038 93010000 	 .word .L3+1
 127 003c 93010000 	 .word .L3+1
 128 0040 C5000000 	 .word .L17+1
 129 0044 93010000 	 .word .L3+1
 130 0048 93010000 	 .word .L3+1
 131 004c 93010000 	 .word .L3+1
 132 0050 CB000000 	 .word .L16+1
 133 0054 93010000 	 .word .L3+1
 134 0058 93010000 	 .word .L3+1
 135 005c 93010000 	 .word .L3+1
 136 0060 93010000 	 .word .L3+1
 137 0064 93010000 	 .word .L3+1
 138 0068 D1000000 	 .word .L15+1
 139 006c D7000000 	 .word .L14+1
 140 0070 F5000000 	 .word .L13+1
 141 0074 DD000000 	 .word .L12+1
 142 0078 E9000000 	 .word .L11+1
 143 007c DD000000 	 .word .L12+1
 144 0080 E9000000 	 .word .L11+1
 145 0084 05010000 	 .word .L10+1
 146 0088 FB000000 	 .word .L9+1
 147 008c 05010000 	 .word .L10+1
 148 0090 FB000000 	 .word .L9+1
 149 0094 FB000000 	 .word .L9+1
 150 0098 FB000000 	 .word .L9+1
 151 009c 0F010000 	 .word .L8+1
 152 00a0 93010000 	 .word .L3+1
 153 00a4 93010000 	 .word .L3+1
 154 00a8 15010000 	 .word .L7+1
 155 00ac 5F010000 	 .word .L6+1
 156 00b0 2D010000 	 .word .L4+1
 157              	 .p2align 1
 158              	.L19:
  81:V2Protocol.c  **** 	{
  82:V2Protocol.c  **** 		case CMD_SIGN_ON:
  83:V2Protocol.c  **** 			V2Protocol_SignOn();
 159              	 .loc 1 83 4
 160 00b4 3F4B     	 ldr r3,.L24+12
 161 00b6 9847     	 blx r3
 162              	.LVL1:
  84:V2Protocol.c  **** 			break;
 163              	 .loc 1 84 4
 164 00b8 70E0     	 b .L20
 165              	.L18:
  85:V2Protocol.c  **** 		case CMD_SET_PARAMETER:
  86:V2Protocol.c  **** 		case CMD_GET_PARAMETER:
  87:V2Protocol.c  **** 			V2Protocol_GetSetParam(V2Command);
 166              	 .loc 1 87 4
 167 00ba FB79     	 ldrb r3,[r7,#7]
 168 00bc 1846     	 mov r0,r3
 169 00be 3E4B     	 ldr r3,.L24+16
 170 00c0 9847     	 blx r3
 171              	.LVL2:
  88:V2Protocol.c  **** 			break;
 172              	 .loc 1 88 4
 173 00c2 6BE0     	 b .L20
 174              	.L17:
  89:V2Protocol.c  **** 		case CMD_LOAD_ADDRESS:
  90:V2Protocol.c  **** 			V2Protocol_LoadAddress();
 175              	 .loc 1 90 4
 176 00c4 3D4B     	 ldr r3,.L24+20
 177 00c6 9847     	 blx r3
 178              	.LVL3:
  91:V2Protocol.c  **** 			break;
 179              	 .loc 1 91 4
 180 00c8 68E0     	 b .L20
 181              	.L16:
  92:V2Protocol.c  **** 		case CMD_RESET_PROTECTION:
  93:V2Protocol.c  **** 			V2Protocol_ResetProtection();
 182              	 .loc 1 93 4
 183 00ca 3D4B     	 ldr r3,.L24+24
 184 00cc 9847     	 blx r3
 185              	.LVL4:
  94:V2Protocol.c  **** 			break;
 186              	 .loc 1 94 4
 187 00ce 65E0     	 b .L20
 188              	.L15:
  95:V2Protocol.c  **** 
  96:V2Protocol.c  **** 		case CMD_ENTER_PROGMODE_ISP:
  97:V2Protocol.c  **** 			ISPProtocol_EnterISPMode();
 189              	 .loc 1 97 4
 190 00d0 3C4B     	 ldr r3,.L24+28
 191 00d2 9847     	 blx r3
 192              	.LVL5:
  98:V2Protocol.c  **** 			break;
 193              	 .loc 1 98 4
 194 00d4 62E0     	 b .L20
 195              	.L14:
  99:V2Protocol.c  **** 		case CMD_LEAVE_PROGMODE_ISP:
 100:V2Protocol.c  **** 			ISPProtocol_LeaveISPMode();
 196              	 .loc 1 100 4
 197 00d6 3C4B     	 ldr r3,.L24+32
 198 00d8 9847     	 blx r3
 199              	.LVL6:
 101:V2Protocol.c  **** 			break;
 200              	 .loc 1 101 4
 201 00da 5FE0     	 b .L20
 202              	.L12:
 102:V2Protocol.c  **** 		case CMD_PROGRAM_FLASH_ISP:
 103:V2Protocol.c  **** 		case CMD_PROGRAM_EEPROM_ISP:
 104:V2Protocol.c  **** 			ISPProtocol_ProgramMemory(V2Command, avr_rambuf);
 203              	 .loc 1 104 4
 204 00dc FB79     	 ldrb r3,[r7,#7]
 205 00de 3B49     	 ldr r1,.L24+36
 206 00e0 1846     	 mov r0,r3
 207 00e2 3B4B     	 ldr r3,.L24+40
 208 00e4 9847     	 blx r3
 209              	.LVL7:
 105:V2Protocol.c  **** 			break;
 210              	 .loc 1 105 4
 211 00e6 59E0     	 b .L20
 212              	.L11:
 106:V2Protocol.c  **** 		case CMD_READ_FLASH_ISP:
 107:V2Protocol.c  **** 		case CMD_READ_EEPROM_ISP:
 108:V2Protocol.c  **** 			ISPProtocol_ReadMemory(V2Command, avr_rambuf);
 213              	 .loc 1 108 4
 214 00e8 FB79     	 ldrb r3,[r7,#7]
 215 00ea 3849     	 ldr r1,.L24+36
 216 00ec 1846     	 mov r0,r3
 217 00ee 394B     	 ldr r3,.L24+44
 218 00f0 9847     	 blx r3
 219              	.LVL8:
 109:V2Protocol.c  **** 			break;
 220              	 .loc 1 109 4
 221 00f2 53E0     	 b .L20
 222              	.L13:
 110:V2Protocol.c  **** 		case CMD_CHIP_ERASE_ISP:
 111:V2Protocol.c  **** 			ISPProtocol_ChipErase();
 223              	 .loc 1 111 4
 224 00f4 384B     	 ldr r3,.L24+48
 225 00f6 9847     	 blx r3
 226              	.LVL9:
 112:V2Protocol.c  **** 			break;
 227              	 .loc 1 112 4
 228 00f8 50E0     	 b .L20
 229              	.L9:
 113:V2Protocol.c  **** 		case CMD_READ_FUSE_ISP:
 114:V2Protocol.c  **** 		case CMD_READ_LOCK_ISP:
 115:V2Protocol.c  **** 		case CMD_READ_SIGNATURE_ISP:
 116:V2Protocol.c  **** 		case CMD_READ_OSCCAL_ISP:
 117:V2Protocol.c  **** 			ISPProtocol_ReadFuseLockSigOSCCAL(V2Command);
 230              	 .loc 1 117 4
 231 00fa FB79     	 ldrb r3,[r7,#7]
 232 00fc 1846     	 mov r0,r3
 233 00fe 374B     	 ldr r3,.L24+52
 234 0100 9847     	 blx r3
 235              	.LVL10:
 118:V2Protocol.c  **** 			break;
 236              	 .loc 1 118 4
 237 0102 4BE0     	 b .L20
 238              	.L10:
 119:V2Protocol.c  **** 		case CMD_PROGRAM_FUSE_ISP:
 120:V2Protocol.c  **** 		case CMD_PROGRAM_LOCK_ISP:
 121:V2Protocol.c  **** 			ISPProtocol_WriteFuseLock(V2Command);
 239              	 .loc 1 121 4
 240 0104 FB79     	 ldrb r3,[r7,#7]
 241 0106 1846     	 mov r0,r3
 242 0108 354B     	 ldr r3,.L24+56
 243 010a 9847     	 blx r3
 244              	.LVL11:
 122:V2Protocol.c  **** 			break;
 245              	 .loc 1 122 4
 246 010c 46E0     	 b .L20
 247              	.L8:
 123:V2Protocol.c  **** 		case CMD_SPI_MULTI:
 124:V2Protocol.c  **** 			ISPProtocol_SPIMulti();
 248              	 .loc 1 124 4
 249 010e 354B     	 ldr r3,.L24+60
 250 0110 9847     	 blx r3
 251              	.LVL12:
 125:V2Protocol.c  **** 			break;
 252              	 .loc 1 125 4
 253 0112 43E0     	 b .L20
 254              	.L7:
 126:V2Protocol.c  **** 
 127:V2Protocol.c  **** 		case CMD_GET_STATUS:
 128:V2Protocol.c  **** 			udd_g_ctrlreq.payload = avrisp_status_payload;
 255              	 .loc 1 128 26
 256 0114 244B     	 ldr r3,.L24
 257 0116 344A     	 ldr r2,.L24+64
 258 0118 9A60     	 str r2,[r3,#8]
 129:V2Protocol.c  **** 			udd_g_ctrlreq.payload_size = avrisp_status_payload_size;
 259              	 .loc 1 129 31
 260 011a 344B     	 ldr r3,.L24+68
 261 011c 1A88     	 ldrh r2,[r3]
 262 011e 224B     	 ldr r3,.L24
 263 0120 9A81     	 strh r2,[r3,#12]
 130:V2Protocol.c  **** 			avrisp_status_payload_size = 0;
 264              	 .loc 1 130 31
 265 0122 324B     	 ldr r3,.L24+68
 266 0124 0022     	 movs r2,#0
 267 0126 1A80     	 strh r2,[r3]
 131:V2Protocol.c  **** 			return true;
 268              	 .loc 1 131 11
 269 0128 0123     	 movs r3,#1
 270 012a 38E0     	 b .L21
 271              	.L4:
 132:V2Protocol.c  **** 			
 133:V2Protocol.c  **** 			
 134:V2Protocol.c  **** 		//Read data from internal RAM buffer
 135:V2Protocol.c  **** 		case CMD_GET_RAMBUF:
 136:V2Protocol.c  **** 			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
 272              	 .loc 1 136 31
 273 012c 1E4B     	 ldr r3,.L24
 274 012e 5B88     	 ldrh r3,[r3,#2]
 275              	 .loc 1 136 11
 276 0130 1B0A     	 lsrs r3,r3,#8
 277 0132 9BB2     	 uxth r3,r3
 278 0134 BB71     	 strb r3,[r7,#6]
 137:V2Protocol.c  **** 			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
 279              	 .loc 1 137 16
 280 0136 BB79     	 ldrb r3,[r7,#6]
 281              	 .loc 1 137 35
 282 0138 1B4A     	 ldr r2,.L24
 283 013a D288     	 ldrh r2,[r2,#6]
 284              	 .loc 1 137 16
 285 013c 1344     	 add r3,r3,r2
 286              	 .loc 1 137 7
 287 013e B3F5807F 	 cmp r3,#256
 288 0142 01DD     	 ble .L22
 138:V2Protocol.c  **** 				//nice try!
 139:V2Protocol.c  **** 				return false;
 289              	 .loc 1 139 12
 290 0144 0023     	 movs r3,#0
 291 0146 2AE0     	 b .L21
 292              	.L22:
 140:V2Protocol.c  **** 			}
 141:V2Protocol.c  **** 		
 142:V2Protocol.c  **** 			udd_g_ctrlreq.payload = avr_rambuf + offset;
 293              	 .loc 1 142 39
 294 0148 BB79     	 ldrb r3,[r7,#6]
 295 014a 204A     	 ldr r2,.L24+36
 296 014c 1344     	 add r3,r3,r2
 297              	 .loc 1 142 26
 298 014e 164A     	 ldr r2,.L24
 299 0150 9360     	 str r3,[r2,#8]
 143:V2Protocol.c  **** 			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
 300              	 .loc 1 143 50
 301 0152 154B     	 ldr r3,.L24
 302 0154 DA88     	 ldrh r2,[r3,#6]
 303              	 .loc 1 143 31
 304 0156 144B     	 ldr r3,.L24
 305 0158 9A81     	 strh r2,[r3,#12]
 144:V2Protocol.c  **** 			return true;
 306              	 .loc 1 144 11
 307 015a 0123     	 movs r3,#1
 308 015c 1FE0     	 b .L21
 309              	.L6:
 145:V2Protocol.c  **** 			break;
 146:V2Protocol.c  **** 		
 147:V2Protocol.c  **** 		//Write data to intername RAM buffer
 148:V2Protocol.c  **** 		case CMD_SET_RAMBUF:
 149:V2Protocol.c  **** 			offset = (udd_g_ctrlreq.req.wValue >> 8) & 0xff;
 310              	 .loc 1 149 31
 311 015e 124B     	 ldr r3,.L24
 312 0160 5B88     	 ldrh r3,[r3,#2]
 313              	 .loc 1 149 11
 314 0162 1B0A     	 lsrs r3,r3,#8
 315 0164 9BB2     	 uxth r3,r3
 316 0166 BB71     	 strb r3,[r7,#6]
 150:V2Protocol.c  **** 			if ((offset + udd_g_ctrlreq.req.wLength) > AVR_BUF_SIZE){
 317              	 .loc 1 150 16
 318 0168 BB79     	 ldrb r3,[r7,#6]
 319              	 .loc 1 150 35
 320 016a 0F4A     	 ldr r2,.L24
 321 016c D288     	 ldrh r2,[r2,#6]
 322              	 .loc 1 150 16
 323 016e 1344     	 add r3,r3,r2
 324              	 .loc 1 150 7
 325 0170 B3F5807F 	 cmp r3,#256
 326 0174 01DD     	 ble .L23
 151:V2Protocol.c  **** 				//nice try!
 152:V2Protocol.c  **** 				return false;
 327              	 .loc 1 152 12
 328 0176 0023     	 movs r3,#0
 329 0178 11E0     	 b .L21
 330              	.L23:
 153:V2Protocol.c  **** 			}
 154:V2Protocol.c  **** 		
 155:V2Protocol.c  **** 			memcpy(avr_rambuf + offset, udd_g_ctrlreq.payload, udd_g_ctrlreq.req.wLength);
 331              	 .loc 1 155 4
 332 017a BB79     	 ldrb r3,[r7,#6]
 333 017c 134A     	 ldr r2,.L24+36
 334 017e 1344     	 add r3,r3,r2
 335              	 .loc 1 155 45
 336 0180 094A     	 ldr r2,.L24
 337 0182 9168     	 ldr r1,[r2,#8]
 338              	 .loc 1 155 72
 339 0184 084A     	 ldr r2,.L24
 340 0186 D288     	 ldrh r2,[r2,#6]
 341              	 .loc 1 155 4
 342 0188 1846     	 mov r0,r3
 343 018a 194B     	 ldr r3,.L24+72
 344 018c 9847     	 blx r3
 345              	.LVL13:
 156:V2Protocol.c  **** 			return true;
 346              	 .loc 1 156 11
 347 018e 0123     	 movs r3,#1
 348 0190 05E0     	 b .L21
 349              	.L3:
 157:V2Protocol.c  **** 			break;
 158:V2Protocol.c  **** 
 159:V2Protocol.c  **** 		default:
 160:V2Protocol.c  **** 			V2Protocol_UnknownCommand(V2Command);
 350              	 .loc 1 160 4
 351 0192 FB79     	 ldrb r3,[r7,#7]
 352 0194 1846     	 mov r0,r3
 353 0196 174B     	 ldr r3,.L24+76
 354 0198 9847     	 blx r3
 355              	.LVL14:
 161:V2Protocol.c  **** 			break;
 356              	 .loc 1 161 4
 357 019a 00BF     	 nop
 358              	.L20:
 162:V2Protocol.c  **** 	}
 163:V2Protocol.c  **** 
 164:V2Protocol.c  **** 	return true;
 359              	 .loc 1 164 9
 360 019c 0123     	 movs r3,#1
 361              	.L21:
 165:V2Protocol.c  **** }
 362              	 .loc 1 165 1
 363 019e 1846     	 mov r0,r3
 364 01a0 0837     	 adds r7,r7,#8
 365              	.LCFI7:
 366              	 .cfi_def_cfa_offset 8
 367 01a2 BD46     	 mov sp,r7
 368              	.LCFI8:
 369              	 .cfi_def_cfa_register 13
 370              	 
 371 01a4 80BD     	 pop {r7,pc}
 372              	.L25:
 373 01a6 00BF     	 .align 2
 374              	.L24:
 375 01a8 00000000 	 .word udd_g_ctrlreq
 376 01ac 00000000 	 .word status_payload
 377 01b0 00000000 	 .word start_timeoutcnt
 378 01b4 00000000 	 .word V2Protocol_SignOn
 379 01b8 00000000 	 .word V2Protocol_GetSetParam
 380 01bc 00000000 	 .word V2Protocol_LoadAddress
 381 01c0 00000000 	 .word V2Protocol_ResetProtection
 382 01c4 00000000 	 .word ISPProtocol_EnterISPMode
 383 01c8 00000000 	 .word ISPProtocol_LeaveISPMode
 384 01cc 00000000 	 .word avr_rambuf.9107
 385 01d0 00000000 	 .word ISPProtocol_ProgramMemory
 386 01d4 00000000 	 .word ISPProtocol_ReadMemory
 387 01d8 00000000 	 .word ISPProtocol_ChipErase
 388 01dc 00000000 	 .word ISPProtocol_ReadFuseLockSigOSCCAL
 389 01e0 00000000 	 .word ISPProtocol_WriteFuseLock
 390 01e4 00000000 	 .word ISPProtocol_SPIMulti
 391 01e8 00000000 	 .word avrisp_status_payload
 392 01ec 00000000 	 .word avrisp_status_payload_size
 393 01f0 00000000 	 .word memcpy
 394 01f4 00000000 	 .word V2Protocol_UnknownCommand
 395              	 .cfi_endproc
 396              	.LFE185:
 398              	 .section .text.V2Protocol_UnknownCommand,"ax",%progbits
 399              	 .align 1
 400              	 .syntax unified
 401              	 .thumb
 402              	 .thumb_func
 403              	 .fpu softvfp
 405              	V2Protocol_UnknownCommand:
 406              	.LFB186:
 166:V2Protocol.c  **** 
 167:V2Protocol.c  **** /** Handler for unknown V2 protocol commands. This discards all sent data and returns a
 168:V2Protocol.c  ****  *  STATUS_CMD_UNKNOWN status back to the host.
 169:V2Protocol.c  ****  *
 170:V2Protocol.c  ****  *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 171:V2Protocol.c  ****  */
 172:V2Protocol.c  **** static void V2Protocol_UnknownCommand(const uint8_t V2Command)
 173:V2Protocol.c  **** {
 407              	 .loc 1 173 1
 408              	 .cfi_startproc
 409              	 
 410              	 
 411              	 
 412 0000 80B4     	 push {r7}
 413              	.LCFI9:
 414              	 .cfi_def_cfa_offset 4
 415              	 .cfi_offset 7,-4
 416 0002 83B0     	 sub sp,sp,#12
 417              	.LCFI10:
 418              	 .cfi_def_cfa_offset 16
 419 0004 00AF     	 add r7,sp,#0
 420              	.LCFI11:
 421              	 .cfi_def_cfa_register 7
 422 0006 0346     	 mov r3,r0
 423 0008 FB71     	 strb r3,[r7,#7]
 174:V2Protocol.c  **** 	avrisp_status_payload[1] = STATUS_CMD_UNKNOWN;
 424              	 .loc 1 174 27
 425 000a 054B     	 ldr r3,.L27
 426 000c C922     	 movs r2,#201
 427 000e 5A70     	 strb r2,[r3,#1]
 175:V2Protocol.c  **** 	avrisp_status_payload_size = 2;
 428              	 .loc 1 175 29
 429 0010 044B     	 ldr r3,.L27+4
 430 0012 0222     	 movs r2,#2
 431 0014 1A80     	 strh r2,[r3]
 176:V2Protocol.c  **** }
 432              	 .loc 1 176 1
 433 0016 00BF     	 nop
 434 0018 0C37     	 adds r7,r7,#12
 435              	.LCFI12:
 436              	 .cfi_def_cfa_offset 4
 437 001a BD46     	 mov sp,r7
 438              	.LCFI13:
 439              	 .cfi_def_cfa_register 13
 440              	 
 441 001c 80BC     	 pop {r7}
 442              	.LCFI14:
 443              	 .cfi_restore 7
 444              	 .cfi_def_cfa_offset 0
 445 001e 7047     	 bx lr
 446              	.L28:
 447              	 .align 2
 448              	.L27:
 449 0020 00000000 	 .word avrisp_status_payload
 450 0024 00000000 	 .word avrisp_status_payload_size
 451              	 .cfi_endproc
 452              	.LFE186:
 454              	 .section .rodata
 455              	 .align 2
 456              	.LC0:
 457 0000 43574C49 	 .ascii "CWLITE_AVRISP\000"
 457      54455F41 
 457      56524953 
 457      5000
 458              	 .section .text.V2Protocol_SignOn,"ax",%progbits
 459              	 .align 1
 460              	 .syntax unified
 461              	 .thumb
 462              	 .thumb_func
 463              	 .fpu softvfp
 465              	V2Protocol_SignOn:
 466              	.LFB187:
 177:V2Protocol.c  **** 
 178:V2Protocol.c  **** /** Handler for the CMD_SIGN_ON command, returning the programmer ID string to the host. */
 179:V2Protocol.c  **** static void V2Protocol_SignOn(void)
 180:V2Protocol.c  **** {
 467              	 .loc 1 180 1
 468              	 .cfi_startproc
 469              	 
 470              	 
 471 0000 80B5     	 push {r7,lr}
 472              	.LCFI15:
 473              	 .cfi_def_cfa_offset 8
 474              	 .cfi_offset 7,-8
 475              	 .cfi_offset 14,-4
 476 0002 00AF     	 add r7,sp,#0
 477              	.LCFI16:
 478              	 .cfi_def_cfa_register 7
 181:V2Protocol.c  **** 	status_payload[1] = STATUS_CMD_OK;
 479              	 .loc 1 181 20
 480 0004 094B     	 ldr r3,.L30
 481 0006 0022     	 movs r2,#0
 482 0008 5A70     	 strb r2,[r3,#1]
 182:V2Protocol.c  **** 	status_payload[2] = sizeof(PROGRAMMER_ID) - 1;
 483              	 .loc 1 182 20
 484 000a 084B     	 ldr r3,.L30
 485 000c 0D22     	 movs r2,#13
 486 000e 9A70     	 strb r2,[r3,#2]
 183:V2Protocol.c  **** 	memcpy(status_payload + 3, PROGRAMMER_ID, sizeof(PROGRAMMER_ID) - 1);
 487              	 .loc 1 183 2
 488 0010 074B     	 ldr r3,.L30+4
 489 0012 0D22     	 movs r2,#13
 490 0014 0749     	 ldr r1,.L30+8
 491 0016 1846     	 mov r0,r3
 492 0018 074B     	 ldr r3,.L30+12
 493 001a 9847     	 blx r3
 494              	.LVL15:
 184:V2Protocol.c  **** 	udd_g_ctrlreq.payload = status_payload;
 495              	 .loc 1 184 24
 496 001c 074B     	 ldr r3,.L30+16
 497 001e 034A     	 ldr r2,.L30
 498 0020 9A60     	 str r2,[r3,#8]
 185:V2Protocol.c  **** 	udd_g_ctrlreq.payload_size = 3+sizeof(PROGRAMMER_ID) - 1;
 499              	 .loc 1 185 29
 500 0022 064B     	 ldr r3,.L30+16
 501 0024 1022     	 movs r2,#16
 502 0026 9A81     	 strh r2,[r3,#12]
 186:V2Protocol.c  **** }
 503              	 .loc 1 186 1
 504 0028 00BF     	 nop
 505 002a 80BD     	 pop {r7,pc}
 506              	.L31:
 507              	 .align 2
 508              	.L30:
 509 002c 00000000 	 .word status_payload
 510 0030 03000000 	 .word status_payload+3
 511 0034 00000000 	 .word .LC0
 512 0038 00000000 	 .word memcpy
 513 003c 00000000 	 .word udd_g_ctrlreq
 514              	 .cfi_endproc
 515              	.LFE187:
 517              	 .section .text.V2Protocol_ResetProtection,"ax",%progbits
 518              	 .align 1
 519              	 .syntax unified
 520              	 .thumb
 521              	 .thumb_func
 522              	 .fpu softvfp
 524              	V2Protocol_ResetProtection:
 525              	.LFB188:
 187:V2Protocol.c  **** 
 188:V2Protocol.c  **** /** Handler for the CMD_RESET_PROTECTION command, implemented as a dummy ACK function as
 189:V2Protocol.c  ****  *  no target short-circuit protection is currently implemented.
 190:V2Protocol.c  ****  */
 191:V2Protocol.c  **** static void V2Protocol_ResetProtection(void)
 192:V2Protocol.c  **** {
 526              	 .loc 1 192 1
 527              	 .cfi_startproc
 528              	 
 529              	 
 530              	 
 531 0000 80B4     	 push {r7}
 532              	.LCFI17:
 533              	 .cfi_def_cfa_offset 4
 534              	 .cfi_offset 7,-4
 535 0002 00AF     	 add r7,sp,#0
 536              	.LCFI18:
 537              	 .cfi_def_cfa_register 7
 193:V2Protocol.c  **** 	avrisp_status_payload[1] = STATUS_CMD_OK;
 538              	 .loc 1 193 27
 539 0004 044B     	 ldr r3,.L33
 540 0006 0022     	 movs r2,#0
 541 0008 5A70     	 strb r2,[r3,#1]
 194:V2Protocol.c  **** 	avrisp_status_payload_size = 2;
 542              	 .loc 1 194 29
 543 000a 044B     	 ldr r3,.L33+4
 544 000c 0222     	 movs r2,#2
 545 000e 1A80     	 strh r2,[r3]
 195:V2Protocol.c  **** }
 546              	 .loc 1 195 1
 547 0010 00BF     	 nop
 548 0012 BD46     	 mov sp,r7
 549              	.LCFI19:
 550              	 .cfi_def_cfa_register 13
 551              	 
 552 0014 80BC     	 pop {r7}
 553              	.LCFI20:
 554              	 .cfi_restore 7
 555              	 .cfi_def_cfa_offset 0
 556 0016 7047     	 bx lr
 557              	.L34:
 558              	 .align 2
 559              	.L33:
 560 0018 00000000 	 .word avrisp_status_payload
 561 001c 00000000 	 .word avrisp_status_payload_size
 562              	 .cfi_endproc
 563              	.LFE188:
 565              	 .section .text.V2Protocol_GetSetParam,"ax",%progbits
 566              	 .align 1
 567              	 .syntax unified
 568              	 .thumb
 569              	 .thumb_func
 570              	 .fpu softvfp
 572              	V2Protocol_GetSetParam:
 573              	.LFB189:
 196:V2Protocol.c  **** 
 197:V2Protocol.c  **** 
 198:V2Protocol.c  **** /** Handler for the CMD_SET_PARAMETER and CMD_GET_PARAMETER commands from the host, setting or
 199:V2Protocol.c  ****  *  getting a device parameter's value from the parameter table.
 200:V2Protocol.c  ****  *
 201:V2Protocol.c  ****  *  \param[in] V2Command  Issued V2 Protocol command byte from the host
 202:V2Protocol.c  ****  */
 203:V2Protocol.c  **** static void V2Protocol_GetSetParam(const uint8_t V2Command)
 204:V2Protocol.c  **** {
 574              	 .loc 1 204 1
 575              	 .cfi_startproc
 576              	 
 577              	 
 578 0000 80B5     	 push {r7,lr}
 579              	.LCFI21:
 580              	 .cfi_def_cfa_offset 8
 581              	 .cfi_offset 7,-8
 582              	 .cfi_offset 14,-4
 583 0002 84B0     	 sub sp,sp,#16
 584              	.LCFI22:
 585              	 .cfi_def_cfa_offset 24
 586 0004 00AF     	 add r7,sp,#0
 587              	.LCFI23:
 588              	 .cfi_def_cfa_register 7
 589 0006 0346     	 mov r3,r0
 590 0008 FB71     	 strb r3,[r7,#7]
 205:V2Protocol.c  **** 	uint8_t ParamID = udd_g_ctrlreq.payload[0];
 591              	 .loc 1 205 33
 592 000a 244B     	 ldr r3,.L40
 593 000c 9B68     	 ldr r3,[r3,#8]
 594              	 .loc 1 205 10
 595 000e 1B78     	 ldrb r3,[r3]
 596 0010 BB73     	 strb r3,[r7,#14]
 206:V2Protocol.c  **** 	uint8_t ParamValue;
 207:V2Protocol.c  **** 
 208:V2Protocol.c  **** 	if (V2Command == CMD_SET_PARAMETER) {
 597              	 .loc 1 208 5
 598 0012 FB79     	 ldrb r3,[r7,#7]
 599 0014 022B     	 cmp r3,#2
 600 0016 03D1     	 bne .L36
 209:V2Protocol.c  **** 	  ParamValue = udd_g_ctrlreq.payload[1];	  
 601              	 .loc 1 209 30
 602 0018 204B     	 ldr r3,.L40
 603 001a 9B68     	 ldr r3,[r3,#8]
 604              	 .loc 1 209 15
 605 001c 5B78     	 ldrb r3,[r3,#1]
 606 001e FB73     	 strb r3,[r7,#15]
 607              	.L36:
 210:V2Protocol.c  **** 	}
 211:V2Protocol.c  **** 
 212:V2Protocol.c  **** 	avrisp_status_payload_size = 2;
 608              	 .loc 1 212 29
 609 0020 1F4B     	 ldr r3,.L40+4
 610 0022 0222     	 movs r2,#2
 611 0024 1A80     	 strh r2,[r3]
 213:V2Protocol.c  **** 
 214:V2Protocol.c  **** 	uint8_t ParamPrivs = V2Params_GetParameterPrivileges(ParamID);
 612              	 .loc 1 214 23
 613 0026 BB7B     	 ldrb r3,[r7,#14]
 614 0028 1846     	 mov r0,r3
 615 002a 1E4B     	 ldr r3,.L40+8
 616 002c 9847     	 blx r3
 617              	.LVL16:
 618 002e 0346     	 mov r3,r0
 619 0030 7B73     	 strb r3,[r7,#13]
 215:V2Protocol.c  **** 
 216:V2Protocol.c  **** 	if ((V2Command == CMD_SET_PARAMETER) && (ParamPrivs & PARAM_PRIV_WRITE))
 620              	 .loc 1 216 5
 621 0032 FB79     	 ldrb r3,[r7,#7]
 622 0034 022B     	 cmp r3,#2
 623 0036 0ED1     	 bne .L37
 624              	 .loc 1 216 54 discriminator 1
 625 0038 7B7B     	 ldrb r3,[r7,#13]
 626 003a 03F00203 	 and r3,r3,#2
 627              	 .loc 1 216 39 discriminator 1
 628 003e 002B     	 cmp r3,#0
 629 0040 09D0     	 beq .L37
 217:V2Protocol.c  **** 	{
 218:V2Protocol.c  **** 		avrisp_status_payload[1] = STATUS_CMD_OK;
 630              	 .loc 1 218 28
 631 0042 194B     	 ldr r3,.L40+12
 632 0044 0022     	 movs r2,#0
 633 0046 5A70     	 strb r2,[r3,#1]
 219:V2Protocol.c  **** 		V2Params_SetParameterValue(ParamID, ParamValue);
 634              	 .loc 1 219 3
 635 0048 FA7B     	 ldrb r2,[r7,#15]
 636 004a BB7B     	 ldrb r3,[r7,#14]
 637 004c 1146     	 mov r1,r2
 638 004e 1846     	 mov r0,r3
 639 0050 164B     	 ldr r3,.L40+16
 640 0052 9847     	 blx r3
 641              	.LVL17:
 642 0054 1DE0     	 b .L38
 643              	.L37:
 220:V2Protocol.c  **** 	}
 221:V2Protocol.c  **** 	else if ((V2Command == CMD_GET_PARAMETER) && (ParamPrivs & PARAM_PRIV_READ))
 644              	 .loc 1 221 10
 645 0056 FB79     	 ldrb r3,[r7,#7]
 646 0058 032B     	 cmp r3,#3
 647 005a 16D1     	 bne .L39
 648              	 .loc 1 221 59 discriminator 1
 649 005c 7B7B     	 ldrb r3,[r7,#13]
 650 005e 03F00103 	 and r3,r3,#1
 651              	 .loc 1 221 44 discriminator 1
 652 0062 002B     	 cmp r3,#0
 653 0064 11D0     	 beq .L39
 222:V2Protocol.c  **** 	{
 223:V2Protocol.c  **** 		avrisp_status_payload[1] = STATUS_CMD_OK;
 654              	 .loc 1 223 28
 655 0066 104B     	 ldr r3,.L40+12
 656 0068 0022     	 movs r2,#0
 657 006a 5A70     	 strb r2,[r3,#1]
 224:V2Protocol.c  **** 		avrisp_status_payload[2] = V2Params_GetParameterValue(ParamID);
 658              	 .loc 1 224 30
 659 006c BB7B     	 ldrb r3,[r7,#14]
 660 006e 1846     	 mov r0,r3
 661 0070 0F4B     	 ldr r3,.L40+20
 662 0072 9847     	 blx r3
 663              	.LVL18:
 664 0074 0346     	 mov r3,r0
 665 0076 1A46     	 mov r2,r3
 666              	 .loc 1 224 28
 667 0078 0B4B     	 ldr r3,.L40+12
 668 007a 9A70     	 strb r2,[r3,#2]
 225:V2Protocol.c  **** 		avrisp_status_payload_size += 1;
 669              	 .loc 1 225 30
 670 007c 084B     	 ldr r3,.L40+4
 671 007e 1B88     	 ldrh r3,[r3]
 672 0080 0133     	 adds r3,r3,#1
 673 0082 9AB2     	 uxth r2,r3
 674 0084 064B     	 ldr r3,.L40+4
 675 0086 1A80     	 strh r2,[r3]
 676 0088 03E0     	 b .L38
 677              	.L39:
 226:V2Protocol.c  **** 	}
 227:V2Protocol.c  **** 	else
 228:V2Protocol.c  **** 	{
 229:V2Protocol.c  **** 		avrisp_status_payload[1] = STATUS_CMD_FAILED;
 678              	 .loc 1 229 28
 679 008a 074B     	 ldr r3,.L40+12
 680 008c C022     	 movs r2,#192
 681 008e 5A70     	 strb r2,[r3,#1]
 230:V2Protocol.c  **** 	}
 231:V2Protocol.c  **** }
 682              	 .loc 1 231 1
 683 0090 00BF     	 nop
 684              	.L38:
 685 0092 00BF     	 nop
 686 0094 1037     	 adds r7,r7,#16
 687              	.LCFI24:
 688              	 .cfi_def_cfa_offset 8
 689 0096 BD46     	 mov sp,r7
 690              	.LCFI25:
 691              	 .cfi_def_cfa_register 13
 692              	 
 693 0098 80BD     	 pop {r7,pc}
 694              	.L41:
 695 009a 00BF     	 .align 2
 696              	.L40:
 697 009c 00000000 	 .word udd_g_ctrlreq
 698 00a0 00000000 	 .word avrisp_status_payload_size
 699 00a4 00000000 	 .word V2Params_GetParameterPrivileges
 700 00a8 00000000 	 .word avrisp_status_payload
 701 00ac 00000000 	 .word V2Params_SetParameterValue
 702 00b0 00000000 	 .word V2Params_GetParameterValue
 703              	 .cfi_endproc
 704              	.LFE189:
 706              	 .section .rodata
 707 000e 0000     	 .align 2
 708              	.LC1:
 709 0010 41565250 	 .ascii "AVRPROG: Address = %02x\012\000"
 709      524F473A 
 709      20416464 
 709      72657373 
 709      203D2025 
 710              	 .section .text.V2Protocol_LoadAddress,"ax",%progbits
 711              	 .align 1
 712              	 .syntax unified
 713              	 .thumb
 714              	 .thumb_func
 715              	 .fpu softvfp
 717              	V2Protocol_LoadAddress:
 718              	.LFB190:
 232:V2Protocol.c  **** 
 233:V2Protocol.c  **** /** Handler for the CMD_LOAD_ADDRESS command, loading the given device address into a
 234:V2Protocol.c  ****  *  global storage variable for later use, and issuing LOAD EXTENDED ADDRESS commands
 235:V2Protocol.c  ****  *  to the attached device as required.
 236:V2Protocol.c  ****  */
 237:V2Protocol.c  **** static void V2Protocol_LoadAddress(void)
 238:V2Protocol.c  **** {
 719              	 .loc 1 238 1
 720              	 .cfi_startproc
 721              	 
 722              	 
 723 0000 80B5     	 push {r7,lr}
 724              	.LCFI26:
 725              	 .cfi_def_cfa_offset 8
 726              	 .cfi_offset 7,-8
 727              	 .cfi_offset 14,-4
 728 0002 00AF     	 add r7,sp,#0
 729              	.LCFI27:
 730              	 .cfi_def_cfa_register 7
 239:V2Protocol.c  **** 	CurrentAddress = (udd_g_ctrlreq.payload[3] << 24) | (udd_g_ctrlreq.payload[2] << 16) | (udd_g_ctrl
 731              	 .loc 1 239 33
 732 0004 164B     	 ldr r3,.L44
 733 0006 9B68     	 ldr r3,[r3,#8]
 734              	 .loc 1 239 41
 735 0008 0333     	 adds r3,r3,#3
 736 000a 1B78     	 ldrb r3,[r3]
 737              	 .loc 1 239 45
 738 000c 1A06     	 lsls r2,r3,#24
 739              	 .loc 1 239 68
 740 000e 144B     	 ldr r3,.L44
 741 0010 9B68     	 ldr r3,[r3,#8]
 742              	 .loc 1 239 76
 743 0012 0233     	 adds r3,r3,#2
 744 0014 1B78     	 ldrb r3,[r3]
 745              	 .loc 1 239 80
 746 0016 1B04     	 lsls r3,r3,#16
 747              	 .loc 1 239 52
 748 0018 1A43     	 orrs r2,r2,r3
 749              	 .loc 1 239 103
 750 001a 114B     	 ldr r3,.L44
 751 001c 9B68     	 ldr r3,[r3,#8]
 752              	 .loc 1 239 111
 753 001e 0133     	 adds r3,r3,#1
 754 0020 1B78     	 ldrb r3,[r3]
 755              	 .loc 1 239 115
 756 0022 1B02     	 lsls r3,r3,#8
 757              	 .loc 1 239 87
 758 0024 1343     	 orrs r3,r3,r2
 759              	 .loc 1 239 137
 760 0026 0E4A     	 ldr r2,.L44
 761 0028 9268     	 ldr r2,[r2,#8]
 762              	 .loc 1 239 145
 763 002a 1278     	 ldrb r2,[r2]
 764              	 .loc 1 239 121
 765 002c 1343     	 orrs r3,r3,r2
 766 002e 1A46     	 mov r2,r3
 767              	 .loc 1 239 17
 768 0030 0C4B     	 ldr r3,.L44+4
 769 0032 1A60     	 str r2,[r3]
 240:V2Protocol.c  **** 
 241:V2Protocol.c  **** 	if (CurrentAddress & (1UL << 31))
 770              	 .loc 1 241 6
 771 0034 0B4B     	 ldr r3,.L44+4
 772 0036 1B68     	 ldr r3,[r3]
 773              	 .loc 1 241 5
 774 0038 002B     	 cmp r3,#0
 775 003a 02DA     	 bge .L43
 242:V2Protocol.c  **** 	  MustLoadExtendedAddress = true;
 776              	 .loc 1 242 28
 777 003c 0A4B     	 ldr r3,.L44+8
 778 003e 0122     	 movs r2,#1
 779 0040 1A70     	 strb r2,[r3]
 780              	.L43:
 243:V2Protocol.c  **** 	  
 244:V2Protocol.c  **** 	printf("AVRPROG: Address = %02x\n", (unsigned int)CurrentAddress);
 781              	 .loc 1 244 2
 782 0042 084B     	 ldr r3,.L44+4
 783 0044 1B68     	 ldr r3,[r3]
 784 0046 1946     	 mov r1,r3
 785 0048 0848     	 ldr r0,.L44+12
 786 004a 094B     	 ldr r3,.L44+16
 787 004c 9847     	 blx r3
 788              	.LVL19:
 245:V2Protocol.c  **** 
 246:V2Protocol.c  **** 	avrisp_status_payload[1] = STATUS_CMD_OK;
 789              	 .loc 1 246 27
 790 004e 094B     	 ldr r3,.L44+20
 791 0050 0022     	 movs r2,#0
 792 0052 5A70     	 strb r2,[r3,#1]
 247:V2Protocol.c  **** 	avrisp_status_payload_size = 2;
 793              	 .loc 1 247 29
 794 0054 084B     	 ldr r3,.L44+24
 795 0056 0222     	 movs r2,#2
 796 0058 1A80     	 strh r2,[r3]
 248:V2Protocol.c  **** }
 797              	 .loc 1 248 1
 798 005a 00BF     	 nop
 799 005c 80BD     	 pop {r7,pc}
 800              	.L45:
 801 005e 00BF     	 .align 2
 802              	.L44:
 803 0060 00000000 	 .word udd_g_ctrlreq
 804 0064 00000000 	 .word CurrentAddress
 805 0068 00000000 	 .word MustLoadExtendedAddress
 806 006c 10000000 	 .word .LC1
 807 0070 00000000 	 .word iprintf
 808 0074 00000000 	 .word avrisp_status_payload
 809 0078 00000000 	 .word avrisp_status_payload_size
 810              	 .cfi_endproc
 811              	.LFE190:
 813              	 .section .bss.avr_rambuf.9107,"aw",%nobits
 814              	 .align 2
 817              	avr_rambuf.9107:
 818 0000 00000000 	 .space 256
 818      00000000 
 818      00000000 
 818      00000000 
 818      00000000 
 819              	 .text
 820              	.Letext0:
 821              	 .file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 822              	 .file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 823              	 .file 4 ".././hal/sam3u1c/inc/core_cm3.h"
 824              	 .file 5 ".././hal/sam3u1c/inc/system_sam3u.h"
 825              	 .file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 826              	 .file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 827              	 .file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 828              	 .file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 829              	 .file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 830              	 .file 11 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 831              	 .file 12 ".././hal/sam3u1c/inc/compiler.h"
 832              	 .file 13 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
 833              	 .file 14 "./conf_usb.h"
 834              	 .file 15 ".././hal/sam3u1c/inc/usb_protocol.h"
 835              	 .file 16 ".././hal/sam3u1c/inc/udi.h"
 836              	 .file 17 ".././hal/sam3u1c/inc/udc_desc.h"
 837              	 .file 18 ".././hal/sam3u1c/inc/udd.h"
 838              	 .file 19 ".././hal/sam3u1c/inc/udi_vendor.h"
 839              	 .file 20 "XPROGTimeout.h"
 840              	 .file 21 "V2Protocol.h"
 841              	 .file 22 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdio.h"
 842              	 .file 23 "V2ProtocolParams.h"
 843              	 .file 24 "ISPProtocol.h"
 844              	 .file 25 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 V2Protocol.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
                            *COM*:00000004 CurrentAddress
                            *COM*:00000001 MustLoadExtendedAddress
    {standard input}:29     .text.V2Protocol_Init:00000000 $t
    {standard input}:37     .text.V2Protocol_Init:00000000 V2Protocol_Init
    {standard input}:67     .bss.status_payload:00000000 $d
    {standard input}:70     .bss.status_payload:00000000 status_payload
                            *COM*:00000020 avrisp_status_payload
                            *COM*:00000002 avrisp_status_payload_size
    {standard input}:75     .text.V2Protocol_ProcessCommand:00000000 $t
    {standard input}:82     .text.V2Protocol_ProcessCommand:00000000 V2Protocol_ProcessCommand
    {standard input}:123    .text.V2Protocol_ProcessCommand:0000002c $d
    {standard input}:157    .text.V2Protocol_ProcessCommand:000000b4 $t
    {standard input}:375    .text.V2Protocol_ProcessCommand:000001a8 $d
    {standard input}:465    .text.V2Protocol_SignOn:00000000 V2Protocol_SignOn
    {standard input}:572    .text.V2Protocol_GetSetParam:00000000 V2Protocol_GetSetParam
    {standard input}:717    .text.V2Protocol_LoadAddress:00000000 V2Protocol_LoadAddress
    {standard input}:524    .text.V2Protocol_ResetProtection:00000000 V2Protocol_ResetProtection
    {standard input}:817    .bss.avr_rambuf.9107:00000000 avr_rambuf.9107
    {standard input}:405    .text.V2Protocol_UnknownCommand:00000000 V2Protocol_UnknownCommand
    {standard input}:399    .text.V2Protocol_UnknownCommand:00000000 $t
    {standard input}:449    .text.V2Protocol_UnknownCommand:00000020 $d
    {standard input}:455    .rodata:00000000 $d
    {standard input}:459    .text.V2Protocol_SignOn:00000000 $t
    {standard input}:509    .text.V2Protocol_SignOn:0000002c $d
    {standard input}:518    .text.V2Protocol_ResetProtection:00000000 $t
    {standard input}:560    .text.V2Protocol_ResetProtection:00000018 $d
    {standard input}:566    .text.V2Protocol_GetSetParam:00000000 $t
    {standard input}:697    .text.V2Protocol_GetSetParam:0000009c $d
    {standard input}:711    .text.V2Protocol_LoadAddress:00000000 $t
    {standard input}:803    .text.V2Protocol_LoadAddress:00000060 $d
    {standard input}:814    .bss.avr_rambuf.9107:00000000 $d
                           .group:00000000 wm4.0.2cd8a2cb7ff4c48cec7eeec776a1dd8c
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.48.ce8d06c36cc583d9bf62738411f62e4d
                           .group:00000000 wm4.cw521.h.62.1727e9a463c60d459e36c42a4e5a0f86
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.cycle_counter.h.44.fde38fb1acfd6555d72e65fae6e86af5
                           .group:00000000 wm4.delay.h.105.f2a8ab5e71eab0684cf6985b5c2fc9e8
                           .group:00000000 wm4.efc.h.45.ec5734119c630498df26106bacf9a684
                           .group:00000000 wm4.flash_efc.h.90.a4a39259055880dc10b861c5fe1b99e7
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.sam_gpio.h.50.76a45c51855d665134f8211cd601d693
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.smc.h.45.17a94aa976bb62b1109d03e8a314a569
                           .group:00000000 wm4.spi.h.45.712c66be09ffbac297c2e00923077297
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3
                           .group:00000000 wm4.twi.h.45.ba70de99d200dafba570ce8f7058737a
                           .group:00000000 wm4.twi_master.h.90.08c062d0fa8f8aeea342ceeb79263395
                           .group:00000000 wm4.twi_slave.h.45.8b3d1a3d2e43ebc7d0161f4142989871
                           .group:00000000 wm4.uart.h.45.a5af743b8064bd84d1a6438457096e18
                           .group:00000000 wm4.usart.h.46.eae6fe592b7ea0768efef8d312e7f44f
                           .group:00000000 wm4.conf_uart_serial.h.45.245cdceaa1a3811fd043bf660ce38054
                           .group:00000000 wm4.conf_usb.h.45.2f7207bed7467dcf9cb11fbc6ebe572c
                           .group:00000000 wm4.udi_vendor_conf.h.56.4348c8e521d040f44df868219dae6785
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.V2ProtocolConstants.h.37.9bf16fd2ae5d223b4504404f34063b2d
                           .group:00000000 wm4.ISPProtocol.h.38.e5e0dd312bebbc8df11522adb3decb21
                           .group:00000000 wm4.ISPTarget.h.50.523ab5c75c84ecee1eba3c8576d9b11a
                           .group:00000000 wm4.V2ProtocolParams.h.47.77ffe24f39fdee76136b1a6cd17622ea
                           .group:00000000 wm4.V2Protocol.h.50.00f5564fabc070724b66bfdabab7441a
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd

UNDEFINED SYMBOLS
udd_g_ctrlreq
start_timeoutcnt
ISPProtocol_EnterISPMode
ISPProtocol_LeaveISPMode
ISPProtocol_ProgramMemory
ISPProtocol_ReadMemory
ISPProtocol_ChipErase
ISPProtocol_ReadFuseLockSigOSCCAL
ISPProtocol_WriteFuseLock
ISPProtocol_SPIMulti
memcpy
V2Params_GetParameterPrivileges
V2Params_SetParameterValue
V2Params_GetParameterValue
iprintf
