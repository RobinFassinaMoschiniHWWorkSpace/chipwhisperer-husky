   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "usb.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.osc_enable,"ax",%progbits
  27              	 .align 1
  28              	 .arch armv7-m
  29              	 .syntax unified
  30              	 .thumb
  31              	 .thumb_func
  32              	 .fpu softvfp
  34              	osc_enable:
  35              	.LFB69:
  36              	 .file 1 ".././hal/sam3u1c/inc/sam3u/osc.h"
   1:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \brief Chip-specific oscillator management functions.
   5:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  44:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/osc.h **** #define CHIP_OSC_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  47:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "board.h"
  48:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "pmc.h"
  49:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  50:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/sam3u/osc.h **** extern "C" {
  54:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  55:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @endcond
  57:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  58:.././hal/sam3u1c/inc/sam3u/osc.h **** /*
  59:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Below BOARD_XXX macros are related to the specific board, and
  60:.././hal/sam3u1c/inc/sam3u/osc.h ****  * should be defined by the board code, otherwise default value are used.
  61:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  62:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_XTAL)
  63:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock xtal frequency has not been defined.
  64:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_XTAL      (32768UL)
  65:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  66:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  67:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_BYPASS)
  68:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock bypass frequency has not been defined.
  69:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_BYPASS    (32768UL)
  70:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  71:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  72:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_XTAL)
  73:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal frequency has not been defined.
  74:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_XTAL    (12000000UL)
  75:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  76:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  77:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_BYPASS)
  78:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock bypass frequency has not been defined.
  79:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_BYPASS  (12000000UL)
  80:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  81:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  82:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_OSC_STARTUP_US)
  83:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal startup time has not been defined.
  84:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_OSC_STARTUP_US      (15625UL)
  85:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  86:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  87:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
  88:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \weakgroup osc_group
  89:.././hal/sam3u1c/inc/sam3u/osc.h ****  * @{
  90:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  91:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  92:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator identifiers
  93:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
  94:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC             0    //!< Internal 32kHz RC oscillator.
  95:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL           1    //!< External 32kHz crystal oscillator.
  96:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS         2    //!< External 32kHz bypass oscillator.
  97:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC            3    //!< Internal 4MHz RC oscillator.
  98:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC            4    //!< Internal 8MHz RC oscillator.
  99:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC           5    //!< Internal 12MHz RC oscillator.
 100:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL             6    //!< External crystal oscillator.
 101:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS           7    //!< External bypass oscillator.
 102:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 103:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 104:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator clock speed in hertz
 105:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
 106:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC_HZ          CHIP_FREQ_SLCK_RC               //!< Internal 32kHz RC oscillat
 107:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL_HZ        BOARD_FREQ_SLCK_XTAL            //!< External 32kHz crystal osc
 108:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS_HZ      BOARD_FREQ_SLCK_BYPASS          //!< External 32kHz bypass osci
 109:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC_HZ         CHIP_FREQ_MAINCK_RC_4MHZ        //!< Internal 4MHz RC oscillato
 110:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC_HZ         CHIP_FREQ_MAINCK_RC_8MHZ        //!< Internal 8MHz RC oscillato
 111:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC_HZ        CHIP_FREQ_MAINCK_RC_12MHZ       //!< Internal 12MHz RC oscillat
 112:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillato
 113:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator
 114:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 115:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 116:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_enable(uint32_t ul_id)
 117:.././hal/sam3u1c/inc/sam3u/osc.h **** {
  37              	 .loc 1 117 1
  38              	 .cfi_startproc
  39              	 
  40              	 
  41 0000 80B5     	 push {r7,lr}
  42              	.LCFI0:
  43              	 .cfi_def_cfa_offset 8
  44              	 .cfi_offset 7,-8
  45              	 .cfi_offset 14,-4
  46 0002 82B0     	 sub sp,sp,#8
  47              	.LCFI1:
  48              	 .cfi_def_cfa_offset 16
  49 0004 00AF     	 add r7,sp,#0
  50              	.LCFI2:
  51              	 .cfi_def_cfa_register 7
  52 0006 7860     	 str r0,[r7,#4]
  53 0008 7B68     	 ldr r3,[r7,#4]
  54 000a 072B     	 cmp r3,#7
  55 000c 2ED8     	 bhi .L12
  56 000e 01A2     	 adr r2,.L4
  57 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
  58              	 .p2align 2
  59              	.L4:
  60 0014 6B000000 	 .word .L13+1
  61 0018 35000000 	 .word .L10+1
  62 001c 3D000000 	 .word .L9+1
  63 0020 45000000 	 .word .L8+1
  64 0024 4D000000 	 .word .L7+1
  65 0028 55000000 	 .word .L6+1
  66 002c 5D000000 	 .word .L5+1
  67 0030 65000000 	 .word .L3+1
  68              	 .p2align 1
  69              	.L10:
 118:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 119:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 121:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 122:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 123:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  70              	 .loc 1 123 3
  71 0034 0020     	 movs r0,#0
  72 0036 0F4B     	 ldr r3,.L14
  73 0038 9847     	 blx r3
  74              	.LVL0:
 124:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  75              	 .loc 1 124 3
  76 003a 17E0     	 b .L2
  77              	.L9:
 125:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 127:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  78              	 .loc 1 127 3
  79 003c 0120     	 movs r0,#1
  80 003e 0D4B     	 ldr r3,.L14
  81 0040 9847     	 blx r3
  82              	.LVL1:
 128:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  83              	 .loc 1 128 3
  84 0042 13E0     	 b .L2
  85              	.L8:
 129:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 130:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 131:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 132:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  86              	 .loc 1 132 3
  87 0044 0020     	 movs r0,#0
  88 0046 0C4B     	 ldr r3,.L14+4
  89 0048 9847     	 blx r3
  90              	.LVL2:
 133:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  91              	 .loc 1 133 3
  92 004a 0FE0     	 b .L2
  93              	.L7:
 134:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 135:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 136:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  94              	 .loc 1 136 3
  95 004c 1020     	 movs r0,#16
  96 004e 0A4B     	 ldr r3,.L14+4
  97 0050 9847     	 blx r3
  98              	.LVL3:
 137:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
  99              	 .loc 1 137 3
 100 0052 0BE0     	 b .L2
 101              	.L6:
 138:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 139:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 140:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
 102              	 .loc 1 140 3
 103 0054 2020     	 movs r0,#32
 104 0056 084B     	 ldr r3,.L14+4
 105 0058 9847     	 blx r3
 106              	.LVL4:
 141:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 107              	 .loc 1 141 3
 108 005a 07E0     	 b .L2
 109              	.L5:
 142:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 143:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 144:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 145:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
 110              	 .loc 1 145 3
 111 005c 3E20     	 movs r0,#62
 112 005e 074B     	 ldr r3,.L14+8
 113 0060 9847     	 blx r3
 114              	.LVL5:
 146:.././hal/sam3u1c/inc/sam3u/osc.h **** 				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
 147:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 115              	 .loc 1 147 3
 116 0062 03E0     	 b .L2
 117              	.L3:
 148:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 149:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 150:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_bypass_main_xtal();
 118              	 .loc 1 150 3
 119 0064 064B     	 ldr r3,.L14+12
 120 0066 9847     	 blx r3
 121              	.LVL6:
 151:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 122              	 .loc 1 151 3
 123 0068 00E0     	 b .L2
 124              	.L13:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 125              	 .loc 1 120 3
 126 006a 00BF     	 nop
 127              	.L2:
 128              	.L12:
 152:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 153:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 129              	 .loc 1 153 1
 130 006c 00BF     	 nop
 131 006e 0837     	 adds r7,r7,#8
 132              	.LCFI3:
 133              	 .cfi_def_cfa_offset 8
 134 0070 BD46     	 mov sp,r7
 135              	.LCFI4:
 136              	 .cfi_def_cfa_register 13
 137              	 
 138 0072 80BD     	 pop {r7,pc}
 139              	.L15:
 140              	 .align 2
 141              	.L14:
 142 0074 00000000 	 .word pmc_switch_sclk_to_32kxtal
 143 0078 00000000 	 .word pmc_osc_enable_fastrc
 144 007c 00000000 	 .word pmc_osc_enable_main_xtal
 145 0080 00000000 	 .word pmc_osc_bypass_main_xtal
 146              	 .cfi_endproc
 147              	.LFE69:
 149              	 .section .text.osc_is_ready,"ax",%progbits
 150              	 .align 1
 151              	 .syntax unified
 152              	 .thumb
 153              	 .thumb_func
 154              	 .fpu softvfp
 156              	osc_is_ready:
 157              	.LFB71:
 154:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 155:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_disable(uint32_t ul_id)
 156:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 157:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 158:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 159:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 160:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 161:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 162:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 163:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 164:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 165:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 166:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_fastrc();
 167:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 168:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 169:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 170:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_XTAL);
 171:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 172:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 173:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 174:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_BYPASS);
 175:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 176:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 177:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 178:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 179:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline bool osc_is_ready(uint32_t ul_id)
 180:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 158              	 .loc 1 180 1
 159              	 .cfi_startproc
 160              	 
 161              	 
 162 0000 80B5     	 push {r7,lr}
 163              	.LCFI5:
 164              	 .cfi_def_cfa_offset 8
 165              	 .cfi_offset 7,-8
 166              	 .cfi_offset 14,-4
 167 0002 82B0     	 sub sp,sp,#8
 168              	.LCFI6:
 169              	 .cfi_def_cfa_offset 16
 170 0004 00AF     	 add r7,sp,#0
 171              	.LCFI7:
 172              	 .cfi_def_cfa_register 7
 173 0006 7860     	 str r0,[r7,#4]
 174 0008 7B68     	 ldr r3,[r7,#4]
 175 000a 072B     	 cmp r3,#7
 176 000c 2FD8     	 bhi .L17
 177 000e 01A2     	 adr r2,.L19
 178 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 179              	 .p2align 2
 180              	.L19:
 181 0014 35000000 	 .word .L22+1
 182 0018 39000000 	 .word .L21+1
 183 001c 39000000 	 .word .L21+1
 184 0020 4B000000 	 .word .L20+1
 185 0024 4B000000 	 .word .L20+1
 186 0028 4B000000 	 .word .L20+1
 187 002c 5D000000 	 .word .L18+1
 188 0030 5D000000 	 .word .L18+1
 189              	 .p2align 1
 190              	.L22:
 181:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 182:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 183:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return 1;
 191              	 .loc 1 183 10
 192 0034 0123     	 movs r3,#1
 193 0036 1BE0     	 b .L23
 194              	.L21:
 184:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 185:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 186:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 187:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_32kxtal();
 195              	 .loc 1 187 10
 196 0038 0F4B     	 ldr r3,.L24
 197 003a 9847     	 blx r3
 198              	.LVL7:
 199 003c 0346     	 mov r3,r0
 200 003e 002B     	 cmp r3,#0
 201 0040 14BF     	 ite ne
 202 0042 0123     	 movne r3,#1
 203 0044 0023     	 moveq r3,#0
 204 0046 DBB2     	 uxtb r3,r3
 205 0048 12E0     	 b .L23
 206              	.L20:
 188:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 189:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 190:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 191:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 192:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_fastrc();
 207              	 .loc 1 192 10
 208 004a 0C4B     	 ldr r3,.L24+4
 209 004c 9847     	 blx r3
 210              	.LVL8:
 211 004e 0346     	 mov r3,r0
 212 0050 002B     	 cmp r3,#0
 213 0052 14BF     	 ite ne
 214 0054 0123     	 movne r3,#1
 215 0056 0023     	 moveq r3,#0
 216 0058 DBB2     	 uxtb r3,r3
 217 005a 09E0     	 b .L23
 218              	.L18:
 193:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 194:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 195:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 196:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_main_xtal();
 219              	 .loc 1 196 10
 220 005c 084B     	 ldr r3,.L24+8
 221 005e 9847     	 blx r3
 222              	.LVL9:
 223 0060 0346     	 mov r3,r0
 224 0062 002B     	 cmp r3,#0
 225 0064 14BF     	 ite ne
 226 0066 0123     	 movne r3,#1
 227 0068 0023     	 moveq r3,#0
 228 006a DBB2     	 uxtb r3,r3
 229 006c 00E0     	 b .L23
 230              	.L17:
 197:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 198:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 199:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 231              	 .loc 1 199 9
 232 006e 0023     	 movs r3,#0
 233              	.L23:
 200:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 234              	 .loc 1 200 1
 235 0070 1846     	 mov r0,r3
 236 0072 0837     	 adds r7,r7,#8
 237              	.LCFI8:
 238              	 .cfi_def_cfa_offset 8
 239 0074 BD46     	 mov sp,r7
 240              	.LCFI9:
 241              	 .cfi_def_cfa_register 13
 242              	 
 243 0076 80BD     	 pop {r7,pc}
 244              	.L25:
 245              	 .align 2
 246              	.L24:
 247 0078 00000000 	 .word pmc_osc_is_ready_32kxtal
 248 007c 00000000 	 .word pmc_osc_is_ready_fastrc
 249 0080 00000000 	 .word pmc_osc_is_ready_main_xtal
 250              	 .cfi_endproc
 251              	.LFE71:
 253              	 .section .text.osc_wait_ready,"ax",%progbits
 254              	 .align 1
 255              	 .syntax unified
 256              	 .thumb
 257              	 .thumb_func
 258              	 .fpu softvfp
 260              	osc_wait_ready:
 261              	.LFB73:
 262              	 .file 2 ".././hal/sam3u1c/inc/osc.h"
   1:.././hal/sam3u1c/inc/osc.h **** /**
   2:.././hal/sam3u1c/inc/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/osc.h ****  *
   4:.././hal/sam3u1c/inc/osc.h ****  * \brief Oscillator management
   5:.././hal/sam3u1c/inc/osc.h ****  *
   6:.././hal/sam3u1c/inc/osc.h ****  * Copyright (c) 2010-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/osc.h ****  *
   8:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/osc.h ****  *
  10:.././hal/sam3u1c/inc/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/osc.h ****  *
  12:.././hal/sam3u1c/inc/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/osc.h ****  *
  15:.././hal/sam3u1c/inc/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/osc.h ****  *
  18:.././hal/sam3u1c/inc/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/osc.h ****  *
  22:.././hal/sam3u1c/inc/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/osc.h ****  *
  25:.././hal/sam3u1c/inc/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/osc.h ****  *
  28:.././hal/sam3u1c/inc/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/osc.h ****  *
  40:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/osc.h ****  *
  42:.././hal/sam3u1c/inc/osc.h ****  */
  43:.././hal/sam3u1c/inc/osc.h **** #ifndef OSC_H_INCLUDED
  44:.././hal/sam3u1c/inc/osc.h **** #define OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/osc.h **** 
  46:.././hal/sam3u1c/inc/osc.h **** #include "parts.h"
  47:.././hal/sam3u1c/inc/osc.h **** #include "conf_clock.h"
  48:.././hal/sam3u1c/inc/osc.h **** 
  49:.././hal/sam3u1c/inc/osc.h **** #if SAM3S
  50:.././hal/sam3u1c/inc/osc.h **** # include "sam3s/osc.h"
  51:.././hal/sam3u1c/inc/osc.h **** #elif SAM3XA
  52:.././hal/sam3u1c/inc/osc.h **** # include "sam3x/osc.h"
  53:.././hal/sam3u1c/inc/osc.h **** #elif SAM3U
  54:.././hal/sam3u1c/inc/osc.h **** # include "sam3u/osc.h"
  55:.././hal/sam3u1c/inc/osc.h **** #elif SAM3N
  56:.././hal/sam3u1c/inc/osc.h **** # include "sam3n/osc.h"
  57:.././hal/sam3u1c/inc/osc.h **** #elif SAM4S
  58:.././hal/sam3u1c/inc/osc.h **** # include "sam4s/osc.h"
  59:.././hal/sam3u1c/inc/osc.h **** #elif SAM4E
  60:.././hal/sam3u1c/inc/osc.h **** # include "sam4e/osc.h"
  61:.././hal/sam3u1c/inc/osc.h **** #elif SAM4C
  62:.././hal/sam3u1c/inc/osc.h **** # include "sam4c/osc.h"
  63:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CM
  64:.././hal/sam3u1c/inc/osc.h **** # include "sam4cm/osc.h"
  65:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CP
  66:.././hal/sam3u1c/inc/osc.h **** # include "sam4cp/osc.h"
  67:.././hal/sam3u1c/inc/osc.h **** #elif SAM4L
  68:.././hal/sam3u1c/inc/osc.h **** # include "sam4l/osc.h"
  69:.././hal/sam3u1c/inc/osc.h **** #elif SAM4N
  70:.././hal/sam3u1c/inc/osc.h **** # include "sam4n/osc.h"
  71:.././hal/sam3u1c/inc/osc.h **** #elif SAMG
  72:.././hal/sam3u1c/inc/osc.h **** # include "samg/osc.h"
  73:.././hal/sam3u1c/inc/osc.h **** #elif (UC3A0 || UC3A1)
  74:.././hal/sam3u1c/inc/osc.h **** # include "uc3a0_a1/osc.h"
  75:.././hal/sam3u1c/inc/osc.h **** #elif UC3A3
  76:.././hal/sam3u1c/inc/osc.h **** # include "uc3a3_a4/osc.h"
  77:.././hal/sam3u1c/inc/osc.h **** #elif UC3B
  78:.././hal/sam3u1c/inc/osc.h **** # include "uc3b0_b1/osc.h"
  79:.././hal/sam3u1c/inc/osc.h **** #elif UC3C
  80:.././hal/sam3u1c/inc/osc.h **** # include "uc3c/osc.h"
  81:.././hal/sam3u1c/inc/osc.h **** #elif UC3D
  82:.././hal/sam3u1c/inc/osc.h **** # include "uc3d/osc.h"
  83:.././hal/sam3u1c/inc/osc.h **** #elif UC3L
  84:.././hal/sam3u1c/inc/osc.h **** # include "uc3l/osc.h"
  85:.././hal/sam3u1c/inc/osc.h **** #elif XMEGA
  86:.././hal/sam3u1c/inc/osc.h **** # include "xmega/osc.h"
  87:.././hal/sam3u1c/inc/osc.h **** #else
  88:.././hal/sam3u1c/inc/osc.h **** # error Unsupported chip type
  89:.././hal/sam3u1c/inc/osc.h **** #endif
  90:.././hal/sam3u1c/inc/osc.h **** 
  91:.././hal/sam3u1c/inc/osc.h **** /**
  92:.././hal/sam3u1c/inc/osc.h ****  * \ingroup clk_group
  93:.././hal/sam3u1c/inc/osc.h ****  * \defgroup osc_group Oscillator Management
  94:.././hal/sam3u1c/inc/osc.h ****  *
  95:.././hal/sam3u1c/inc/osc.h ****  * This group contains functions and definitions related to configuring
  96:.././hal/sam3u1c/inc/osc.h ****  * and enabling/disabling on-chip oscillators. Internal RC-oscillators,
  97:.././hal/sam3u1c/inc/osc.h ****  * external crystal oscillators and external clock generators are
  98:.././hal/sam3u1c/inc/osc.h ****  * supported by this module. What all of these have in common is that
  99:.././hal/sam3u1c/inc/osc.h ****  * they swing at a fixed, nominal frequency which is normally not
 100:.././hal/sam3u1c/inc/osc.h ****  * adjustable.
 101:.././hal/sam3u1c/inc/osc.h ****  *
 102:.././hal/sam3u1c/inc/osc.h ****  * \par Example: Enabling an oscillator
 103:.././hal/sam3u1c/inc/osc.h ****  *
 104:.././hal/sam3u1c/inc/osc.h ****  * The following example demonstrates how to enable the external
 105:.././hal/sam3u1c/inc/osc.h ****  * oscillator on XMEGA A and wait for it to be ready to use. The
 106:.././hal/sam3u1c/inc/osc.h ****  * oscillator identifiers are platform-specific, so while the same
 107:.././hal/sam3u1c/inc/osc.h ****  * procedure is used on all platforms, the parameter to osc_enable()
 108:.././hal/sam3u1c/inc/osc.h ****  * will be different from device to device.
 109:.././hal/sam3u1c/inc/osc.h ****  * \code
 110:.././hal/sam3u1c/inc/osc.h **** 	osc_enable(OSC_ID_XOSC);
 111:.././hal/sam3u1c/inc/osc.h **** 	osc_wait_ready(OSC_ID_XOSC); \endcode
 112:.././hal/sam3u1c/inc/osc.h ****  *
 113:.././hal/sam3u1c/inc/osc.h ****  * \section osc_group_board Board-specific Definitions
 114:.././hal/sam3u1c/inc/osc.h ****  * If external oscillators are used, the board code must provide the
 115:.././hal/sam3u1c/inc/osc.h ****  * following definitions for each of those:
 116:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_HZ: The nominal frequency of the oscillator.
 117:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_STARTUP_US: The startup time of the
 118:.././hal/sam3u1c/inc/osc.h ****  *     oscillator in microseconds.
 119:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_TYPE: The type of oscillator connected, i.e.
 120:.././hal/sam3u1c/inc/osc.h ****  *     whether it's a crystal or external clock, and sometimes what kind
 121:.././hal/sam3u1c/inc/osc.h ****  *     of crystal it is. The meaning of this value is platform-specific.
 122:.././hal/sam3u1c/inc/osc.h ****  *
 123:.././hal/sam3u1c/inc/osc.h ****  * @{
 124:.././hal/sam3u1c/inc/osc.h ****  */
 125:.././hal/sam3u1c/inc/osc.h **** 
 126:.././hal/sam3u1c/inc/osc.h **** //! \name Oscillator Management
 127:.././hal/sam3u1c/inc/osc.h **** //@{
 128:.././hal/sam3u1c/inc/osc.h **** /**
 129:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_enable(uint8_t id)
 130:.././hal/sam3u1c/inc/osc.h ****  * \brief Enable oscillator \a id
 131:.././hal/sam3u1c/inc/osc.h ****  *
 132:.././hal/sam3u1c/inc/osc.h ****  * The startup time and mode value is automatically determined based on
 133:.././hal/sam3u1c/inc/osc.h ****  * definitions in the board code.
 134:.././hal/sam3u1c/inc/osc.h ****  */
 135:.././hal/sam3u1c/inc/osc.h **** /**
 136:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_disable(uint8_t id)
 137:.././hal/sam3u1c/inc/osc.h ****  * \brief Disable oscillator \a id
 138:.././hal/sam3u1c/inc/osc.h ****  */
 139:.././hal/sam3u1c/inc/osc.h **** /**
 140:.././hal/sam3u1c/inc/osc.h ****  * \fn osc_is_ready(uint8_t id)
 141:.././hal/sam3u1c/inc/osc.h ****  * \brief Determine whether oscillator \a id is ready.
 142:.././hal/sam3u1c/inc/osc.h ****  * \retval true Oscillator \a id is running and ready to use as a clock
 143:.././hal/sam3u1c/inc/osc.h ****  * source.
 144:.././hal/sam3u1c/inc/osc.h ****  * \retval false Oscillator \a id is not running.
 145:.././hal/sam3u1c/inc/osc.h ****  */
 146:.././hal/sam3u1c/inc/osc.h **** /**
 147:.././hal/sam3u1c/inc/osc.h ****  * \fn uint32_t osc_get_rate(uint8_t id)
 148:.././hal/sam3u1c/inc/osc.h ****  * \brief Return the frequency of oscillator \a id in Hz
 149:.././hal/sam3u1c/inc/osc.h ****  */
 150:.././hal/sam3u1c/inc/osc.h **** 
 151:.././hal/sam3u1c/inc/osc.h **** #ifndef __ASSEMBLY__
 152:.././hal/sam3u1c/inc/osc.h **** 
 153:.././hal/sam3u1c/inc/osc.h **** /**
 154:.././hal/sam3u1c/inc/osc.h ****  * \brief Wait until the oscillator identified by \a id is ready
 155:.././hal/sam3u1c/inc/osc.h ****  *
 156:.././hal/sam3u1c/inc/osc.h ****  * This function will busy-wait for the oscillator identified by \a id
 157:.././hal/sam3u1c/inc/osc.h ****  * to become stable and ready to use as a clock source.
 158:.././hal/sam3u1c/inc/osc.h ****  *
 159:.././hal/sam3u1c/inc/osc.h ****  * \param id A number identifying the oscillator to wait for.
 160:.././hal/sam3u1c/inc/osc.h ****  */
 161:.././hal/sam3u1c/inc/osc.h **** static inline void osc_wait_ready(uint8_t id)
 162:.././hal/sam3u1c/inc/osc.h **** {
 263              	 .loc 2 162 1
 264              	 .cfi_startproc
 265              	 
 266              	 
 267 0000 80B5     	 push {r7,lr}
 268              	.LCFI10:
 269              	 .cfi_def_cfa_offset 8
 270              	 .cfi_offset 7,-8
 271              	 .cfi_offset 14,-4
 272 0002 82B0     	 sub sp,sp,#8
 273              	.LCFI11:
 274              	 .cfi_def_cfa_offset 16
 275 0004 00AF     	 add r7,sp,#0
 276              	.LCFI12:
 277              	 .cfi_def_cfa_register 7
 278 0006 0346     	 mov r3,r0
 279 0008 FB71     	 strb r3,[r7,#7]
 163:.././hal/sam3u1c/inc/osc.h **** 	while (!osc_is_ready(id)) {
 280              	 .loc 2 163 8
 281 000a 00BF     	 nop
 282              	.L27:
 283              	 .loc 2 163 10 discriminator 1
 284 000c FB79     	 ldrb r3,[r7,#7]
 285 000e 1846     	 mov r0,r3
 286 0010 064B     	 ldr r3,.L28
 287 0012 9847     	 blx r3
 288              	.LVL10:
 289 0014 0346     	 mov r3,r0
 290              	 .loc 2 163 9 discriminator 1
 291 0016 83F00103 	 eor r3,r3,#1
 292 001a DBB2     	 uxtb r3,r3
 293              	 .loc 2 163 8 discriminator 1
 294 001c 002B     	 cmp r3,#0
 295 001e F5D1     	 bne .L27
 164:.././hal/sam3u1c/inc/osc.h **** 		/* Do nothing */
 165:.././hal/sam3u1c/inc/osc.h **** 	}
 166:.././hal/sam3u1c/inc/osc.h **** }
 296              	 .loc 2 166 1
 297 0020 00BF     	 nop
 298 0022 00BF     	 nop
 299 0024 0837     	 adds r7,r7,#8
 300              	.LCFI13:
 301              	 .cfi_def_cfa_offset 8
 302 0026 BD46     	 mov sp,r7
 303              	.LCFI14:
 304              	 .cfi_def_cfa_register 13
 305              	 
 306 0028 80BD     	 pop {r7,pc}
 307              	.L29:
 308 002a 00BF     	 .align 2
 309              	.L28:
 310 002c 00000000 	 .word osc_is_ready
 311              	 .cfi_endproc
 312              	.LFE73:
 314              	 .section .text.udc_detach,"ax",%progbits
 315              	 .align 1
 316              	 .syntax unified
 317              	 .thumb
 318              	 .thumb_func
 319              	 .fpu softvfp
 321              	udc_detach:
 322              	.LFB179:
 323              	 .file 3 ".././hal/sam3u1c/inc/udc.h"
   1:.././hal/sam3u1c/inc/udc.h **** /**
   2:.././hal/sam3u1c/inc/udc.h ****  * \file
   3:.././hal/sam3u1c/inc/udc.h ****  *
   4:.././hal/sam3u1c/inc/udc.h ****  * \brief Interface of the USB Device Controller (UDC)
   5:.././hal/sam3u1c/inc/udc.h ****  *
   6:.././hal/sam3u1c/inc/udc.h ****  * Copyright (c) 2009 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/udc.h ****  *
   8:.././hal/sam3u1c/inc/udc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/udc.h ****  *
  10:.././hal/sam3u1c/inc/udc.h ****  * \page License
  11:.././hal/sam3u1c/inc/udc.h ****  *
  12:.././hal/sam3u1c/inc/udc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/udc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/udc.h ****  *
  15:.././hal/sam3u1c/inc/udc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/udc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/udc.h ****  *
  18:.././hal/sam3u1c/inc/udc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/udc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/udc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/udc.h ****  *
  22:.././hal/sam3u1c/inc/udc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/udc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/udc.h ****  *
  25:.././hal/sam3u1c/inc/udc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/udc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/udc.h ****  *
  28:.././hal/sam3u1c/inc/udc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/udc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/udc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/udc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/udc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/udc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/udc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/udc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/udc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/udc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/udc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/udc.h ****  *
  40:.././hal/sam3u1c/inc/udc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/udc.h ****  *
  42:.././hal/sam3u1c/inc/udc.h ****  */
  43:.././hal/sam3u1c/inc/udc.h **** 
  44:.././hal/sam3u1c/inc/udc.h **** #ifndef _UDC_H_
  45:.././hal/sam3u1c/inc/udc.h **** #define _UDC_H_
  46:.././hal/sam3u1c/inc/udc.h **** 
  47:.././hal/sam3u1c/inc/udc.h **** #include "conf_usb.h"
  48:.././hal/sam3u1c/inc/udc.h **** #include "usb_protocol.h"
  49:.././hal/sam3u1c/inc/udc.h **** #include "udc_desc.h"
  50:.././hal/sam3u1c/inc/udc.h **** #include "udd.h"
  51:.././hal/sam3u1c/inc/udc.h **** 
  52:.././hal/sam3u1c/inc/udc.h **** #if USB_DEVICE_VENDOR_ID == 0
  53:.././hal/sam3u1c/inc/udc.h **** #   error USB_DEVICE_VENDOR_ID cannot be equal to 0
  54:.././hal/sam3u1c/inc/udc.h **** #endif
  55:.././hal/sam3u1c/inc/udc.h **** 
  56:.././hal/sam3u1c/inc/udc.h **** #if USB_DEVICE_PRODUCT_ID == 0
  57:.././hal/sam3u1c/inc/udc.h **** #   error USB_DEVICE_PRODUCT_ID cannot be equal to 0
  58:.././hal/sam3u1c/inc/udc.h **** #endif
  59:.././hal/sam3u1c/inc/udc.h **** 
  60:.././hal/sam3u1c/inc/udc.h **** #ifdef __cplusplus
  61:.././hal/sam3u1c/inc/udc.h **** extern "C" {
  62:.././hal/sam3u1c/inc/udc.h **** #endif
  63:.././hal/sam3u1c/inc/udc.h **** 
  64:.././hal/sam3u1c/inc/udc.h **** /**
  65:.././hal/sam3u1c/inc/udc.h ****  * \ingroup usb_device_group
  66:.././hal/sam3u1c/inc/udc.h ****  * \defgroup udc_group USB Device Controller (UDC)
  67:.././hal/sam3u1c/inc/udc.h ****  *
  68:.././hal/sam3u1c/inc/udc.h ****  * The UDC provides a high-level abstraction of the usb device.
  69:.././hal/sam3u1c/inc/udc.h ****  * You can use these functions to control the main device state
  70:.././hal/sam3u1c/inc/udc.h ****  * (start/attach/wakeup).
  71:.././hal/sam3u1c/inc/udc.h ****  *
  72:.././hal/sam3u1c/inc/udc.h ****  * \section USB_DEVICE_CONF USB Device Custom configuration
  73:.././hal/sam3u1c/inc/udc.h ****  * The following USB Device configuration must be included in the conf_usb.h
  74:.././hal/sam3u1c/inc/udc.h ****  * file of the application.
  75:.././hal/sam3u1c/inc/udc.h ****  *
  76:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_VENDOR_ID (Word)<br>
  77:.././hal/sam3u1c/inc/udc.h ****  * Vendor ID provided by USB org (ATMEL 0x03EB).
  78:.././hal/sam3u1c/inc/udc.h ****  *
  79:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_PRODUCT_ID (Word)<br>
  80:.././hal/sam3u1c/inc/udc.h ****  * Product ID (Referenced in usb_atmel.h).
  81:.././hal/sam3u1c/inc/udc.h ****  *
  82:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MAJOR_VERSION (Byte)<br>
  83:.././hal/sam3u1c/inc/udc.h ****  * Major version of the device
  84:.././hal/sam3u1c/inc/udc.h ****  *
  85:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MINOR_VERSION (Byte)<br>
  86:.././hal/sam3u1c/inc/udc.h ****  * Minor version of the device
  87:.././hal/sam3u1c/inc/udc.h ****  *
  88:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MANUFACTURE_NAME (string)<br>
  89:.././hal/sam3u1c/inc/udc.h ****  * ASCII name for the manufacture
  90:.././hal/sam3u1c/inc/udc.h ****  *
  91:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_PRODUCT_NAME (string)<br>
  92:.././hal/sam3u1c/inc/udc.h ****  * ASCII name for the product
  93:.././hal/sam3u1c/inc/udc.h ****  *
  94:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_SERIAL_NAME (string)<br>
  95:.././hal/sam3u1c/inc/udc.h ****  * ASCII name to enable and set a serial number
  96:.././hal/sam3u1c/inc/udc.h ****  *
  97:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_POWER (Numeric)<br>
  98:.././hal/sam3u1c/inc/udc.h ****  * (unit mA) Maximum device power
  99:.././hal/sam3u1c/inc/udc.h ****  *
 100:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_ATTR (Byte)<br>
 101:.././hal/sam3u1c/inc/udc.h ****  * USB attributes available:
 102:.././hal/sam3u1c/inc/udc.h ****  *  - USB_CONFIG_ATTR_SELF_POWERED
 103:.././hal/sam3u1c/inc/udc.h ****  *  - USB_CONFIG_ATTR_REMOTE_WAKEUP
 104:.././hal/sam3u1c/inc/udc.h ****  *  Note: if remote wake enabled then defines remotewakeup callbacks,
 105:.././hal/sam3u1c/inc/udc.h ****  * see Table 5-2. External API from UDC - Callback
 106:.././hal/sam3u1c/inc/udc.h ****  *
 107:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_LOW_SPEED (Only defined)<br>
 108:.././hal/sam3u1c/inc/udc.h ****  * Force the USB Device to run in low speed
 109:.././hal/sam3u1c/inc/udc.h ****  *
 110:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_HS_SUPPORT (Only defined)<br>
 111:.././hal/sam3u1c/inc/udc.h ****  * Authorize the USB Device to run in high speed
 112:.././hal/sam3u1c/inc/udc.h ****  *
 113:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MAX_EP (Byte)<br>
 114:.././hal/sam3u1c/inc/udc.h ****  * Define the maximum endpoint number used by the USB Device.<br>
 115:.././hal/sam3u1c/inc/udc.h ****  * This one is already defined in UDI default configuration.
 116:.././hal/sam3u1c/inc/udc.h ****  * Ex:
 117:.././hal/sam3u1c/inc/udc.h ****  * - When endpoint control 0x00, endpoint 0x01 and
 118:.././hal/sam3u1c/inc/udc.h ****  *   endpoint 0x82 is used then USB_DEVICE_MAX_EP=2
 119:.././hal/sam3u1c/inc/udc.h ****  * - When only endpoint control 0x00 is used then USB_DEVICE_MAX_EP=0
 120:.././hal/sam3u1c/inc/udc.h ****  * - When endpoint 0x01 and endpoint 0x81 is used then USB_DEVICE_MAX_EP=1<br>
 121:.././hal/sam3u1c/inc/udc.h ****  *   (configuration not possible on USBB interface)
 122:.././hal/sam3u1c/inc/udc.h ****  * @{
 123:.././hal/sam3u1c/inc/udc.h ****  */
 124:.././hal/sam3u1c/inc/udc.h **** 
 125:.././hal/sam3u1c/inc/udc.h **** /**
 126:.././hal/sam3u1c/inc/udc.h ****  * \brief Authorizes the VBUS event
 127:.././hal/sam3u1c/inc/udc.h ****  *
 128:.././hal/sam3u1c/inc/udc.h ****  * \return true, if the VBUS monitoring is possible.
 129:.././hal/sam3u1c/inc/udc.h ****  *
 130:.././hal/sam3u1c/inc/udc.h ****  * \section udc_vbus_monitoring VBus monitoring used cases
 131:.././hal/sam3u1c/inc/udc.h ****  *
 132:.././hal/sam3u1c/inc/udc.h ****  * The VBus monitoring is used only for USB SELF Power application.
 133:.././hal/sam3u1c/inc/udc.h ****  *
 134:.././hal/sam3u1c/inc/udc.h ****  * - By default the USB device is automatically attached when Vbus is high
 135:.././hal/sam3u1c/inc/udc.h ****  * or when USB is start for devices without internal Vbus monitoring.
 136:.././hal/sam3u1c/inc/udc.h ****  * conf_usb.h file does not contains define USB_DEVICE_ATTACH_AUTO_DISABLE.
 137:.././hal/sam3u1c/inc/udc.h ****  * \code //#define USB_DEVICE_ATTACH_AUTO_DISABLE \endcode
 138:.././hal/sam3u1c/inc/udc.h ****  *
 139:.././hal/sam3u1c/inc/udc.h ****  * - Add custom VBUS monitoring. conf_usb.h file contains define
 140:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_ATTACH_AUTO_DISABLE:
 141:.././hal/sam3u1c/inc/udc.h ****  * \code #define USB_DEVICE_ATTACH_AUTO_DISABLE \endcode
 142:.././hal/sam3u1c/inc/udc.h ****  * User C file contains:
 143:.././hal/sam3u1c/inc/udc.h ****  * \code  
 144:.././hal/sam3u1c/inc/udc.h **** 	// Authorize VBUS monitoring
 145:.././hal/sam3u1c/inc/udc.h **** 	if (!udc_include_vbus_monitoring()) {
 146:.././hal/sam3u1c/inc/udc.h **** 	  // Implement custom VBUS monitoring via GPIO or other
 147:.././hal/sam3u1c/inc/udc.h **** 	}
 148:.././hal/sam3u1c/inc/udc.h **** 	Event_VBUS_present() // VBUS interrupt or GPIO interrupt or other
 149:.././hal/sam3u1c/inc/udc.h **** 	{
 150:.././hal/sam3u1c/inc/udc.h **** 	  // Attach USB Device
 151:.././hal/sam3u1c/inc/udc.h **** 	  udc_attach();
 152:.././hal/sam3u1c/inc/udc.h **** 	}
 153:.././hal/sam3u1c/inc/udc.h **** \endcode
 154:.././hal/sam3u1c/inc/udc.h ****  *
 155:.././hal/sam3u1c/inc/udc.h ****  * - Case of battery charging. conf_usb.h file contains define
 156:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_ATTACH_AUTO_DISABLE:
 157:.././hal/sam3u1c/inc/udc.h ****  * \code #define USB_DEVICE_ATTACH_AUTO_DISABLE \endcode
 158:.././hal/sam3u1c/inc/udc.h ****  * User C file contains:
 159:.././hal/sam3u1c/inc/udc.h ****  * \code  
 160:.././hal/sam3u1c/inc/udc.h **** 	Event VBUS present() // VBUS interrupt or GPIO interrupt or ..
 161:.././hal/sam3u1c/inc/udc.h **** 	{
 162:.././hal/sam3u1c/inc/udc.h **** 	  // Authorize battery charging, but wait key press to start USB.
 163:.././hal/sam3u1c/inc/udc.h **** 	}
 164:.././hal/sam3u1c/inc/udc.h **** 	Event Key press()
 165:.././hal/sam3u1c/inc/udc.h **** 	{
 166:.././hal/sam3u1c/inc/udc.h **** 	  // Stop batteries charging
 167:.././hal/sam3u1c/inc/udc.h **** 	  // Start USB
 168:.././hal/sam3u1c/inc/udc.h **** 	  udc_attach();
 169:.././hal/sam3u1c/inc/udc.h **** 	}
 170:.././hal/sam3u1c/inc/udc.h **** \endcode
 171:.././hal/sam3u1c/inc/udc.h ****  */
 172:.././hal/sam3u1c/inc/udc.h **** static inline bool udc_include_vbus_monitoring(void)
 173:.././hal/sam3u1c/inc/udc.h **** {
 174:.././hal/sam3u1c/inc/udc.h **** 	return udd_include_vbus_monitoring();
 175:.././hal/sam3u1c/inc/udc.h **** }
 176:.././hal/sam3u1c/inc/udc.h **** 
 177:.././hal/sam3u1c/inc/udc.h **** /*! \brief Start the USB Device stack
 178:.././hal/sam3u1c/inc/udc.h ****  */
 179:.././hal/sam3u1c/inc/udc.h **** void udc_start(void);
 180:.././hal/sam3u1c/inc/udc.h **** 
 181:.././hal/sam3u1c/inc/udc.h **** /*! \brief Stop the USB Device stack
 182:.././hal/sam3u1c/inc/udc.h ****  */
 183:.././hal/sam3u1c/inc/udc.h **** void udc_stop(void);
 184:.././hal/sam3u1c/inc/udc.h **** 
 185:.././hal/sam3u1c/inc/udc.h **** /**
 186:.././hal/sam3u1c/inc/udc.h ****  * \brief Attach device to the bus when possible
 187:.././hal/sam3u1c/inc/udc.h ****  *
 188:.././hal/sam3u1c/inc/udc.h ****  * \warning If a VBus control is included in driver,
 189:.././hal/sam3u1c/inc/udc.h ****  * then it will attach device when an acceptable Vbus
 190:.././hal/sam3u1c/inc/udc.h ****  * level from the host is detected.
 191:.././hal/sam3u1c/inc/udc.h ****  */
 192:.././hal/sam3u1c/inc/udc.h **** static inline void udc_attach(void)
 193:.././hal/sam3u1c/inc/udc.h **** {
 194:.././hal/sam3u1c/inc/udc.h **** 	udd_attach();
 195:.././hal/sam3u1c/inc/udc.h **** }
 196:.././hal/sam3u1c/inc/udc.h **** 
 197:.././hal/sam3u1c/inc/udc.h **** 
 198:.././hal/sam3u1c/inc/udc.h **** /**
 199:.././hal/sam3u1c/inc/udc.h ****  * \brief Detaches the device from the bus
 200:.././hal/sam3u1c/inc/udc.h ****  *
 201:.././hal/sam3u1c/inc/udc.h ****  * The driver must remove pull-up on USB line D- or D+.
 202:.././hal/sam3u1c/inc/udc.h ****  */
 203:.././hal/sam3u1c/inc/udc.h **** static inline void udc_detach(void)
 204:.././hal/sam3u1c/inc/udc.h **** {
 324              	 .loc 3 204 1
 325              	 .cfi_startproc
 326              	 
 327              	 
 328 0000 80B5     	 push {r7,lr}
 329              	.LCFI15:
 330              	 .cfi_def_cfa_offset 8
 331              	 .cfi_offset 7,-8
 332              	 .cfi_offset 14,-4
 333 0002 00AF     	 add r7,sp,#0
 334              	.LCFI16:
 335              	 .cfi_def_cfa_register 7
 205:.././hal/sam3u1c/inc/udc.h **** 	udd_detach();
 336              	 .loc 3 205 2
 337 0004 014B     	 ldr r3,.L31
 338 0006 9847     	 blx r3
 339              	.LVL11:
 206:.././hal/sam3u1c/inc/udc.h **** }
 340              	 .loc 3 206 1
 341 0008 00BF     	 nop
 342 000a 80BD     	 pop {r7,pc}
 343              	.L32:
 344              	 .align 2
 345              	.L31:
 346 000c 00000000 	 .word udd_detach
 347              	 .cfi_endproc
 348              	.LFE179:
 350              	 .global g_captureinprogress
 351              	 .section .data.g_captureinprogress,"aw"
 354              	g_captureinprogress:
 355 0000 01       	 .byte 1
 356              	 .section .data.main_b_vendor_enable,"aw"
 359              	main_b_vendor_enable:
 360 0000 01       	 .byte 1
 361              	 .section .bss.active,"aw",%nobits
 364              	active:
 365 0000 00       	 .space 1
 366              	 .global USB_PWR_STATE
 367              	 .section .bss.USB_PWR_STATE,"aw",%nobits
 370              	USB_PWR_STATE:
 371 0000 00       	 .space 1
 372              	 .section .bss.main_buf_loopback,"aw",%nobits
 373              	 .align 2
 376              	main_buf_loopback:
 377 0000 00000000 	 .space 1024
 377      00000000 
 377      00000000 
 377      00000000 
 377      00000000 
 378              	 .section .text.main_suspend_action,"ax",%progbits
 379              	 .align 1
 380              	 .global main_suspend_action
 381              	 .syntax unified
 382              	 .thumb
 383              	 .thumb_func
 384              	 .fpu softvfp
 386              	main_suspend_action:
 387              	.LFB190:
 388              	 .file 4 "usb.c"
   1:usb.c         **** /*
   2:usb.c         ****   Copyright (c) 2014-2015 NewAE Technology Inc. All rights reserved.
   3:usb.c         ****   This program is free software: you can redistribute it and/or modify
   4:usb.c         ****   it under the terms of the GNU General Public License as published by
   5:usb.c         ****   the Free Software Foundation, either version 3 of the License, or
   6:usb.c         ****   (at your option) any later version.
   7:usb.c         ****   This program is distributed in the hope that it will be useful,
   8:usb.c         ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:usb.c         ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:usb.c         ****   GNU General Public License for more details.
  11:usb.c         ****   You should have received a copy of the GNU General Public License
  12:usb.c         ****   along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:usb.c         **** */
  14:usb.c         **** 
  15:usb.c         **** #include <asf.h>
  16:usb.c         **** #include "conf_usb.h"
  17:usb.c         **** #include "stdio_serial.h"
  18:usb.c         **** #include "ui.h"
  19:usb.c         **** #include "genclk.h"
  20:usb.c         **** #include "usb.h"
  21:usb.c         **** #include "usb_xmem.h"
  22:usb.c         **** #include "fpga_program.h"
  23:usb.c         **** #include <string.h>
  24:usb.c         **** #include <cw521.h>
  25:usb.c         **** 
  26:usb.c         **** #define FW_VER_MAJOR 1
  27:usb.c         **** #define FW_VER_MINOR 1
  28:usb.c         **** #define FW_VER_DEBUG 0
  29:usb.c         **** 
  30:usb.c         **** #define REQ_MEMREAD_BULK 0x10
  31:usb.c         **** #define REQ_MEMWRITE_BULK 0x11
  32:usb.c         **** #define REQ_MEMREAD_CTRL 0x12
  33:usb.c         **** #define REQ_MEMWRITE_CTRL 0x13
  34:usb.c         **** #define REQ_MEMSTREAM 0x14
  35:usb.c         **** #define REQ_FPGA_STATUS 0x15
  36:usb.c         **** #define REQ_FPGA_PROGRAM 0x16
  37:usb.c         **** #define REQ_FW_VERSION 0x17
  38:usb.c         **** #define REQ_USART0_DATA 0x1A
  39:usb.c         **** #define REQ_USART0_CONFIG 0x1B
  40:usb.c         **** #define REQ_SCARD_DATA 0x1C
  41:usb.c         **** #define REQ_SCARD_CONFIG 0x1D
  42:usb.c         **** #define REQ_SCARD_AUX 0x1E
  43:usb.c         **** #define REQ_USART2DUMP_ENABLE 0x1F
  44:usb.c         **** #define REQ_XMEGA_PROGRAM 0x20
  45:usb.c         **** #define REQ_AVR_PROGRAM 0x21
  46:usb.c         **** #define REQ_SAM3U_CFG 0x22
  47:usb.c         **** #define REQ_CC_PROGRAM 0x23
  48:usb.c         **** #define REQ_CHANGE_PWR 0x24
  49:usb.c         **** #define REQ_FPGA_RESET 0x25
  50:usb.c         **** 
  51:usb.c         **** #define USART_TARGET USART0
  52:usb.c         **** #define PIN_USART0_RXD	         (PIO_PA19_IDX)
  53:usb.c         **** #define PIN_USART0_RXD_FLAGS      (PIO_PERIPH_A | PIO_DEFAULT)
  54:usb.c         **** #define PIN_USART0_TXD	        (PIO_PA18_IDX)
  55:usb.c         **** #define PIN_USART0_TXD_FLAGS      (PIO_PERIPH_A | PIO_DEFAULT)
  56:usb.c         **** volatile bool g_captureinprogress = true;
  57:usb.c         **** 
  58:usb.c         **** static volatile bool main_b_vendor_enable = true;
  59:usb.c         **** static bool active = false;
  60:usb.c         **** 
  61:usb.c         **** uint8_t USB_PWR_STATE = 0;
  62:usb.c         **** 
  63:usb.c         **** COMPILER_WORD_ALIGNED
  64:usb.c         **** static uint8_t main_buf_loopback[MAIN_LOOPBACK_SIZE];
  65:usb.c         **** 
  66:usb.c         **** void main_vendor_bulk_in_received(udd_ep_status_t status,
  67:usb.c         ****                                   iram_size_t nb_transfered, udd_ep_id_t ep);
  68:usb.c         **** void main_vendor_bulk_out_received(udd_ep_status_t status,
  69:usb.c         ****                                    iram_size_t nb_transfered, udd_ep_id_t ep);
  70:usb.c         **** 
  71:usb.c         **** //this stuff just turns leds on and off
  72:usb.c         **** void main_suspend_action(void)
  73:usb.c         **** {
 389              	 .loc 4 73 1
 390              	 .cfi_startproc
 391              	 
 392              	 
 393 0000 80B5     	 push {r7,lr}
 394              	.LCFI17:
 395              	 .cfi_def_cfa_offset 8
 396              	 .cfi_offset 7,-8
 397              	 .cfi_offset 14,-4
 398 0002 00AF     	 add r7,sp,#0
 399              	.LCFI18:
 400              	 .cfi_def_cfa_register 7
  74:usb.c         **** 	active = false;
 401              	 .loc 4 74 9
 402 0004 034B     	 ldr r3,.L34
 403 0006 0022     	 movs r2,#0
 404 0008 1A70     	 strb r2,[r3]
  75:usb.c         **** 	ui_powerdown();
 405              	 .loc 4 75 2
 406 000a 034B     	 ldr r3,.L34+4
 407 000c 9847     	 blx r3
 408              	.LVL12:
  76:usb.c         **** }
 409              	 .loc 4 76 1
 410 000e 00BF     	 nop
 411 0010 80BD     	 pop {r7,pc}
 412              	.L35:
 413 0012 00BF     	 .align 2
 414              	.L34:
 415 0014 00000000 	 .word active
 416 0018 00000000 	 .word ui_powerdown
 417              	 .cfi_endproc
 418              	.LFE190:
 420              	 .section .text.main_resume_action,"ax",%progbits
 421              	 .align 1
 422              	 .global main_resume_action
 423              	 .syntax unified
 424              	 .thumb
 425              	 .thumb_func
 426              	 .fpu softvfp
 428              	main_resume_action:
 429              	.LFB191:
  77:usb.c         **** 
  78:usb.c         **** void main_resume_action(void)
  79:usb.c         **** {
 430              	 .loc 4 79 1
 431              	 .cfi_startproc
 432              	 
 433              	 
 434 0000 80B5     	 push {r7,lr}
 435              	.LCFI19:
 436              	 .cfi_def_cfa_offset 8
 437              	 .cfi_offset 7,-8
 438              	 .cfi_offset 14,-4
 439 0002 00AF     	 add r7,sp,#0
 440              	.LCFI20:
 441              	 .cfi_def_cfa_register 7
  80:usb.c         ****     ui_wakeup();
 442              	 .loc 4 80 5
 443 0004 014B     	 ldr r3,.L37
 444 0006 9847     	 blx r3
 445              	.LVL13:
  81:usb.c         **** }
 446              	 .loc 4 81 1
 447 0008 00BF     	 nop
 448 000a 80BD     	 pop {r7,pc}
 449              	.L38:
 450              	 .align 2
 451              	.L37:
 452 000c 00000000 	 .word ui_wakeup
 453              	 .cfi_endproc
 454              	.LFE191:
 456              	 .section .text.main_sof_action,"ax",%progbits
 457              	 .align 1
 458              	 .global main_sof_action
 459              	 .syntax unified
 460              	 .thumb
 461              	 .thumb_func
 462              	 .fpu softvfp
 464              	main_sof_action:
 465              	.LFB192:
  82:usb.c         **** 
  83:usb.c         **** void main_sof_action(void)
  84:usb.c         **** {
 466              	 .loc 4 84 1
 467              	 .cfi_startproc
 468              	 
 469              	 
 470 0000 80B5     	 push {r7,lr}
 471              	.LCFI21:
 472              	 .cfi_def_cfa_offset 8
 473              	 .cfi_offset 7,-8
 474              	 .cfi_offset 14,-4
 475 0002 00AF     	 add r7,sp,#0
 476              	.LCFI22:
 477              	 .cfi_def_cfa_register 7
  85:usb.c         ****     if (!main_b_vendor_enable)
 478              	 .loc 4 85 9
 479 0004 084B     	 ldr r3,.L43
 480 0006 1B78     	 ldrb r3,[r3]
 481 0008 DBB2     	 uxtb r3,r3
 482 000a 83F00103 	 eor r3,r3,#1
 483 000e DBB2     	 uxtb r3,r3
 484              	 .loc 4 85 8
 485 0010 002B     	 cmp r3,#0
 486 0012 06D1     	 bne .L42
  86:usb.c         ****         return;
  87:usb.c         ****     ui_process(udd_get_frame_number());
 487              	 .loc 4 87 5
 488 0014 054B     	 ldr r3,.L43+4
 489 0016 9847     	 blx r3
 490              	.LVL14:
 491 0018 0346     	 mov r3,r0
 492 001a 1846     	 mov r0,r3
 493 001c 044B     	 ldr r3,.L43+8
 494 001e 9847     	 blx r3
 495              	.LVL15:
 496 0020 00E0     	 b .L39
 497              	.L42:
  86:usb.c         ****         return;
 498              	 .loc 4 86 9
 499 0022 00BF     	 nop
 500              	.L39:
  88:usb.c         **** }
 501              	 .loc 4 88 1
 502 0024 80BD     	 pop {r7,pc}
 503              	.L44:
 504 0026 00BF     	 .align 2
 505              	.L43:
 506 0028 00000000 	 .word main_b_vendor_enable
 507 002c 00000000 	 .word udd_get_frame_number
 508 0030 00000000 	 .word ui_process
 509              	 .cfi_endproc
 510              	.LFE192:
 512              	 .section .text.main_vendor_enable,"ax",%progbits
 513              	 .align 1
 514              	 .global main_vendor_enable
 515              	 .syntax unified
 516              	 .thumb
 517              	 .thumb_func
 518              	 .fpu softvfp
 520              	main_vendor_enable:
 521              	.LFB193:
  89:usb.c         **** 
  90:usb.c         **** bool main_vendor_enable(void)
  91:usb.c         **** {
 522              	 .loc 4 91 1
 523              	 .cfi_startproc
 524              	 
 525              	 
 526 0000 80B5     	 push {r7,lr}
 527              	.LCFI23:
 528              	 .cfi_def_cfa_offset 8
 529              	 .cfi_offset 7,-8
 530              	 .cfi_offset 14,-4
 531 0002 00AF     	 add r7,sp,#0
 532              	.LCFI24:
 533              	 .cfi_def_cfa_register 7
  92:usb.c         ****     active = true;
 534              	 .loc 4 92 12
 535 0004 074B     	 ldr r3,.L47
 536 0006 0122     	 movs r2,#1
 537 0008 1A70     	 strb r2,[r3]
  93:usb.c         ****     main_b_vendor_enable = true;
 538              	 .loc 4 93 26
 539 000a 074B     	 ldr r3,.L47+4
 540 000c 0122     	 movs r2,#1
 541 000e 1A70     	 strb r2,[r3]
  94:usb.c         ****     // Start data reception on OUT endpoints
  95:usb.c         **** #if UDI_VENDOR_EPS_SIZE_BULK_FS
  96:usb.c         ****     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  97:usb.c         ****     udi_vendor_bulk_out_run(
 542              	 .loc 4 97 5
 543 0010 064A     	 ldr r2,.L47+8
 544 0012 4FF48061 	 mov r1,#1024
 545 0016 0648     	 ldr r0,.L47+12
 546 0018 064B     	 ldr r3,.L47+16
 547 001a 9847     	 blx r3
 548              	.LVL16:
  98:usb.c         ****         main_buf_loopback,
  99:usb.c         ****         sizeof(main_buf_loopback),
 100:usb.c         ****         main_vendor_bulk_out_received);
 101:usb.c         **** #endif
 102:usb.c         ****     return true;
 549              	 .loc 4 102 12
 550 001c 0123     	 movs r3,#1
 103:usb.c         **** }
 551              	 .loc 4 103 1
 552 001e 1846     	 mov r0,r3
 553 0020 80BD     	 pop {r7,pc}
 554              	.L48:
 555 0022 00BF     	 .align 2
 556              	.L47:
 557 0024 00000000 	 .word active
 558 0028 00000000 	 .word main_b_vendor_enable
 559 002c 00000000 	 .word main_vendor_bulk_out_received
 560 0030 00000000 	 .word main_buf_loopback
 561 0034 00000000 	 .word udi_vendor_bulk_out_run
 562              	 .cfi_endproc
 563              	.LFE193:
 565              	 .section .text.main_vendor_disable,"ax",%progbits
 566              	 .align 1
 567              	 .global main_vendor_disable
 568              	 .syntax unified
 569              	 .thumb
 570              	 .thumb_func
 571              	 .fpu softvfp
 573              	main_vendor_disable:
 574              	.LFB194:
 104:usb.c         **** 
 105:usb.c         **** void main_vendor_disable(void)
 106:usb.c         **** {
 575              	 .loc 4 106 1
 576              	 .cfi_startproc
 577              	 
 578              	 
 579              	 
 580 0000 80B4     	 push {r7}
 581              	.LCFI25:
 582              	 .cfi_def_cfa_offset 4
 583              	 .cfi_offset 7,-4
 584 0002 00AF     	 add r7,sp,#0
 585              	.LCFI26:
 586              	 .cfi_def_cfa_register 7
 107:usb.c         ****     main_b_vendor_enable = false;
 587              	 .loc 4 107 26
 588 0004 034B     	 ldr r3,.L50
 589 0006 0022     	 movs r2,#0
 590 0008 1A70     	 strb r2,[r3]
 108:usb.c         **** }
 591              	 .loc 4 108 1
 592 000a 00BF     	 nop
 593 000c BD46     	 mov sp,r7
 594              	.LCFI27:
 595              	 .cfi_def_cfa_register 13
 596              	 
 597 000e 80BC     	 pop {r7}
 598              	.LCFI28:
 599              	 .cfi_restore 7
 600              	 .cfi_def_cfa_offset 0
 601 0010 7047     	 bx lr
 602              	.L51:
 603 0012 00BF     	 .align 2
 604              	.L50:
 605 0014 00000000 	 .word main_b_vendor_enable
 606              	 .cfi_endproc
 607              	.LFE194:
 609              	 .section .bss.ctrlbuffer,"aw",%nobits
 610              	 .align 2
 613              	ctrlbuffer:
 614 0000 00000000 	 .space 64
 614      00000000 
 614      00000000 
 614      00000000 
 614      00000000 
 615              	 .section .bss.blockendpoint_usage,"aw",%nobits
 618              	blockendpoint_usage:
 619 0000 00       	 .space 1
 620              	 .section .bss.ctrlmemread_buf,"aw",%nobits
 621              	 .align 2
 624              	ctrlmemread_buf:
 625 0000 00000000 	 .space 4
 626              	 .section .bss.ctrlmemread_size,"aw",%nobits
 627              	 .align 2
 630              	ctrlmemread_size:
 631 0000 00000000 	 .space 4
 632              	 .section .text.ctrl_readmem_bulk,"ax",%progbits
 633              	 .align 1
 634              	 .global ctrl_readmem_bulk
 635              	 .syntax unified
 636              	 .thumb
 637              	 .thumb_func
 638              	 .fpu softvfp
 640              	ctrl_readmem_bulk:
 641              	.LFB195:
 109:usb.c         **** 
 110:usb.c         **** #define REQ_MEMREAD_BULK 0x10
 111:usb.c         **** #define REQ_MEMWRITE_BULK 0x11
 112:usb.c         **** #define REQ_MEMREAD_CTRL 0x12
 113:usb.c         **** #define REQ_MEMWRITE_CTRL 0x13
 114:usb.c         **** #define REQ_FW_VERSION 0x17
 115:usb.c         **** #define REQ_SAM3U_CFG 0x22
 116:usb.c         **** 
 117:usb.c         **** COMPILER_WORD_ALIGNED static uint8_t ctrlbuffer[64];
 118:usb.c         **** #define CTRLBUFFER_WORDPTR ((uint32_t *) ((void *)ctrlbuffer))
 119:usb.c         **** 
 120:usb.c         **** typedef enum {
 121:usb.c         ****     bep_emem=0,
 122:usb.c         ****     bep_fpgabitstream=10
 123:usb.c         **** } blockep_usage_t;
 124:usb.c         **** 
 125:usb.c         **** static blockep_usage_t blockendpoint_usage = bep_emem;
 126:usb.c         **** 
 127:usb.c         **** static uint8_t * ctrlmemread_buf;
 128:usb.c         **** static unsigned int ctrlmemread_size;
 129:usb.c         **** 
 130:usb.c         **** void ctrl_readmem_bulk(void);
 131:usb.c         **** void ctrl_readmem_ctrl(void);
 132:usb.c         **** void ctrl_writemem_bulk(void);
 133:usb.c         **** void ctrl_writemem_ctrl(void);
 134:usb.c         **** void ctrl_progfpga_bulk(void);
 135:usb.c         **** 
 136:usb.c         **** 
 137:usb.c         **** void ctrl_readmem_bulk(void){
 642              	 .loc 4 137 29
 643              	 .cfi_startproc
 644              	 
 645              	 
 646 0000 80B5     	 push {r7,lr}
 647              	.LCFI29:
 648              	 .cfi_def_cfa_offset 8
 649              	 .cfi_offset 7,-8
 650              	 .cfi_offset 14,-4
 651 0002 82B0     	 sub sp,sp,#8
 652              	.LCFI30:
 653              	 .cfi_def_cfa_offset 16
 654 0004 00AF     	 add r7,sp,#0
 655              	.LCFI31:
 656              	 .cfi_def_cfa_register 7
 138:usb.c         ****     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 657              	 .loc 4 138 25
 658 0006 0F4B     	 ldr r3,.L54
 659              	 .loc 4 138 14
 660 0008 1B68     	 ldr r3,[r3]
 661 000a 7B60     	 str r3,[r7,#4]
 139:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 662              	 .loc 4 139 14
 663 000c 0D4B     	 ldr r3,.L54
 664 000e 5B68     	 ldr r3,[r3,#4]
 665 0010 3B60     	 str r3,[r7]
 140:usb.c         **** 
 141:usb.c         ****     FPGA_releaselock();
 666              	 .loc 4 141 5
 667 0012 0D4B     	 ldr r3,.L54+4
 668 0014 9847     	 blx r3
 669              	.LVL17:
 142:usb.c         ****     while(!FPGA_setlock(fpga_blockin));
 670              	 .loc 4 142 10
 671 0016 00BF     	 nop
 672              	.L53:
 673              	 .loc 4 142 12 discriminator 1
 674 0018 0220     	 movs r0,#2
 675 001a 0C4B     	 ldr r3,.L54+8
 676 001c 9847     	 blx r3
 677              	.LVL18:
 678 001e 0346     	 mov r3,r0
 679              	 .loc 4 142 10 discriminator 1
 680 0020 002B     	 cmp r3,#0
 681 0022 F9D0     	 beq .L53
 143:usb.c         **** 
 144:usb.c         ****     FPGA_setaddr(address);
 682              	 .loc 4 144 5
 683 0024 3868     	 ldr r0,[r7]
 684 0026 0A4B     	 ldr r3,.L54+12
 685 0028 9847     	 blx r3
 686              	.LVL19:
 145:usb.c         **** 
 146:usb.c         ****     /* Do memory read */
 147:usb.c         ****     udi_vendor_bulk_in_run(
 687              	 .loc 4 147 5
 688 002a 0A4A     	 ldr r2,.L54+16
 689 002c 7968     	 ldr r1,[r7,#4]
 690 002e 4FF0C040 	 mov r0,#1610612736
 691 0032 094B     	 ldr r3,.L54+20
 692 0034 9847     	 blx r3
 693              	.LVL20:
 148:usb.c         ****         (uint8_t *) PSRAM_BASE_ADDRESS,
 149:usb.c         ****         buflen,
 150:usb.c         ****         main_vendor_bulk_in_received
 151:usb.c         ****         );
 152:usb.c         ****     FPGA_releaselock();
 694              	 .loc 4 152 5
 695 0036 044B     	 ldr r3,.L54+4
 696 0038 9847     	 blx r3
 697              	.LVL21:
 153:usb.c         **** }
 698              	 .loc 4 153 1
 699 003a 00BF     	 nop
 700 003c 0837     	 adds r7,r7,#8
 701              	.LCFI32:
 702              	 .cfi_def_cfa_offset 8
 703 003e BD46     	 mov sp,r7
 704              	.LCFI33:
 705              	 .cfi_def_cfa_register 13
 706              	 
 707 0040 80BD     	 pop {r7,pc}
 708              	.L55:
 709 0042 00BF     	 .align 2
 710              	.L54:
 711 0044 00000000 	 .word ctrlbuffer
 712 0048 00000000 	 .word FPGA_releaselock
 713 004c 00000000 	 .word FPGA_setlock
 714 0050 00000000 	 .word FPGA_setaddr
 715 0054 00000000 	 .word main_vendor_bulk_in_received
 716 0058 00000000 	 .word udi_vendor_bulk_in_run
 717              	 .cfi_endproc
 718              	.LFE195:
 720              	 .section .text.ctrl_readmem_ctrl,"ax",%progbits
 721              	 .align 1
 722              	 .global ctrl_readmem_ctrl
 723              	 .syntax unified
 724              	 .thumb
 725              	 .thumb_func
 726              	 .fpu softvfp
 728              	ctrl_readmem_ctrl:
 729              	.LFB196:
 154:usb.c         **** 
 155:usb.c         **** void ctrl_readmem_ctrl(void){
 730              	 .loc 4 155 29
 731              	 .cfi_startproc
 732              	 
 733              	 
 734 0000 80B5     	 push {r7,lr}
 735              	.LCFI34:
 736              	 .cfi_def_cfa_offset 8
 737              	 .cfi_offset 7,-8
 738              	 .cfi_offset 14,-4
 739 0002 82B0     	 sub sp,sp,#8
 740              	.LCFI35:
 741              	 .cfi_def_cfa_offset 16
 742 0004 00AF     	 add r7,sp,#0
 743              	.LCFI36:
 744              	 .cfi_def_cfa_register 7
 156:usb.c         ****     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 745              	 .loc 4 156 25
 746 0006 0F4B     	 ldr r3,.L58
 747              	 .loc 4 156 14
 748 0008 1B68     	 ldr r3,[r3]
 749 000a 7B60     	 str r3,[r7,#4]
 157:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 750              	 .loc 4 157 14
 751 000c 0D4B     	 ldr r3,.L58
 752 000e 5B68     	 ldr r3,[r3,#4]
 753 0010 3B60     	 str r3,[r7]
 158:usb.c         **** 
 159:usb.c         ****     FPGA_releaselock();
 754              	 .loc 4 159 5
 755 0012 0D4B     	 ldr r3,.L58+4
 756 0014 9847     	 blx r3
 757              	.LVL22:
 160:usb.c         ****     while(!FPGA_setlock(fpga_ctrlmem));
 758              	 .loc 4 160 10
 759 0016 00BF     	 nop
 760              	.L57:
 761              	 .loc 4 160 12 discriminator 1
 762 0018 0520     	 movs r0,#5
 763 001a 0C4B     	 ldr r3,.L58+8
 764 001c 9847     	 blx r3
 765              	.LVL23:
 766 001e 0346     	 mov r3,r0
 767              	 .loc 4 160 10 discriminator 1
 768 0020 002B     	 cmp r3,#0
 769 0022 F9D0     	 beq .L57
 161:usb.c         **** 
 162:usb.c         ****     /* Set address */
 163:usb.c         ****     FPGA_setaddr(address);
 770              	 .loc 4 163 5
 771 0024 3868     	 ldr r0,[r7]
 772 0026 0A4B     	 ldr r3,.L58+12
 773 0028 9847     	 blx r3
 774              	.LVL24:
 164:usb.c         **** 
 165:usb.c         ****     /* Do memory read */
 166:usb.c         ****     ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
 775              	 .loc 4 166 21
 776 002a 0A4B     	 ldr r3,.L58+16
 777 002c 4FF0C042 	 mov r2,#1610612736
 778 0030 1A60     	 str r2,[r3]
 167:usb.c         **** 
 168:usb.c         ****     /* Set size to read */
 169:usb.c         ****     ctrlmemread_size = buflen;
 779              	 .loc 4 169 22
 780 0032 094A     	 ldr r2,.L58+20
 781 0034 7B68     	 ldr r3,[r7,#4]
 782 0036 1360     	 str r3,[r2]
 170:usb.c         **** 
 171:usb.c         ****     /* Start Transaction */
 172:usb.c         ****     FPGA_releaselock();
 783              	 .loc 4 172 5
 784 0038 034B     	 ldr r3,.L58+4
 785 003a 9847     	 blx r3
 786              	.LVL25:
 173:usb.c         **** }
 787              	 .loc 4 173 1
 788 003c 00BF     	 nop
 789 003e 0837     	 adds r7,r7,#8
 790              	.LCFI37:
 791              	 .cfi_def_cfa_offset 8
 792 0040 BD46     	 mov sp,r7
 793              	.LCFI38:
 794              	 .cfi_def_cfa_register 13
 795              	 
 796 0042 80BD     	 pop {r7,pc}
 797              	.L59:
 798              	 .align 2
 799              	.L58:
 800 0044 00000000 	 .word ctrlbuffer
 801 0048 00000000 	 .word FPGA_releaselock
 802 004c 00000000 	 .word FPGA_setlock
 803 0050 00000000 	 .word FPGA_setaddr
 804 0054 00000000 	 .word ctrlmemread_buf
 805 0058 00000000 	 .word ctrlmemread_size
 806              	 .cfi_endproc
 807              	.LFE196:
 809              	 .section .text.ctrl_writemem_ctrl,"ax",%progbits
 810              	 .align 1
 811              	 .global ctrl_writemem_ctrl
 812              	 .syntax unified
 813              	 .thumb
 814              	 .thumb_func
 815              	 .fpu softvfp
 817              	ctrl_writemem_ctrl:
 818              	.LFB197:
 174:usb.c         **** 
 175:usb.c         **** 
 176:usb.c         **** void ctrl_writemem_ctrl(void){
 819              	 .loc 4 176 30
 820              	 .cfi_startproc
 821              	 
 822              	 
 823 0000 80B5     	 push {r7,lr}
 824              	.LCFI39:
 825              	 .cfi_def_cfa_offset 8
 826              	 .cfi_offset 7,-8
 827              	 .cfi_offset 14,-4
 828 0002 84B0     	 sub sp,sp,#16
 829              	.LCFI40:
 830              	 .cfi_def_cfa_offset 24
 831 0004 00AF     	 add r7,sp,#0
 832              	.LCFI41:
 833              	 .cfi_def_cfa_register 7
 177:usb.c         ****     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 834              	 .loc 4 177 25
 835 0006 164B     	 ldr r3,.L64
 836              	 .loc 4 177 14
 837 0008 1B68     	 ldr r3,[r3]
 838 000a BB60     	 str r3,[r7,#8]
 178:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 839              	 .loc 4 178 14
 840 000c 144B     	 ldr r3,.L64
 841 000e 5B68     	 ldr r3,[r3,#4]
 842 0010 7B60     	 str r3,[r7,#4]
 179:usb.c         **** 
 180:usb.c         ****     uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
 843              	 .loc 4 180 15
 844 0012 144B     	 ldr r3,.L64+4
 845 0014 3B60     	 str r3,[r7]
 181:usb.c         **** 
 182:usb.c         ****     //printf("Writing to %x, %d\n", address, buflen);
 183:usb.c         **** 
 184:usb.c         ****     FPGA_releaselock();
 846              	 .loc 4 184 5
 847 0016 144B     	 ldr r3,.L64+8
 848 0018 9847     	 blx r3
 849              	.LVL26:
 185:usb.c         ****     while(!FPGA_setlock(fpga_generic));
 850              	 .loc 4 185 10
 851 001a 00BF     	 nop
 852              	.L61:
 853              	 .loc 4 185 12 discriminator 1
 854 001c 0120     	 movs r0,#1
 855 001e 134B     	 ldr r3,.L64+12
 856 0020 9847     	 blx r3
 857              	.LVL27:
 858 0022 0346     	 mov r3,r0
 859              	 .loc 4 185 10 discriminator 1
 860 0024 002B     	 cmp r3,#0
 861 0026 F9D0     	 beq .L61
 186:usb.c         **** 
 187:usb.c         ****     /* Set address */
 188:usb.c         ****     FPGA_setaddr(address);
 862              	 .loc 4 188 5
 863 0028 7868     	 ldr r0,[r7,#4]
 864 002a 114B     	 ldr r3,.L64+16
 865 002c 9847     	 blx r3
 866              	.LVL28:
 867              	.LBB2:
 189:usb.c         **** 
 190:usb.c         ****     /* Start Transaction */
 191:usb.c         **** 
 192:usb.c         ****     /* Do memory write */
 193:usb.c         ****     for(unsigned int i = 0; i < buflen; i++){
 868              	 .loc 4 193 22
 869 002e 0023     	 movs r3,#0
 870 0030 FB60     	 str r3,[r7,#12]
 871              	 .loc 4 193 5
 872 0032 0BE0     	 b .L62
 873              	.L63:
 194:usb.c         ****         xram[i] = ctrlbuf_payload[i];
 874              	 .loc 4 194 34 discriminator 3
 875 0034 3A68     	 ldr r2,[r7]
 876 0036 FB68     	 ldr r3,[r7,#12]
 877 0038 1A44     	 add r2,r2,r3
 878              	 .loc 4 194 13 discriminator 3
 879 003a 0E4B     	 ldr r3,.L64+20
 880 003c 1968     	 ldr r1,[r3]
 881 003e FB68     	 ldr r3,[r7,#12]
 882 0040 0B44     	 add r3,r3,r1
 883              	 .loc 4 194 34 discriminator 3
 884 0042 1278     	 ldrb r2,[r2]
 885              	 .loc 4 194 17 discriminator 3
 886 0044 1A70     	 strb r2,[r3]
 193:usb.c         ****         xram[i] = ctrlbuf_payload[i];
 887              	 .loc 4 193 42 discriminator 3
 888 0046 FB68     	 ldr r3,[r7,#12]
 889 0048 0133     	 adds r3,r3,#1
 890 004a FB60     	 str r3,[r7,#12]
 891              	.L62:
 193:usb.c         ****         xram[i] = ctrlbuf_payload[i];
 892              	 .loc 4 193 5 discriminator 1
 893 004c FA68     	 ldr r2,[r7,#12]
 894 004e BB68     	 ldr r3,[r7,#8]
 895 0050 9A42     	 cmp r2,r3
 896 0052 EFD3     	 bcc .L63
 897              	.LBE2:
 195:usb.c         ****     }
 196:usb.c         **** 
 197:usb.c         ****     FPGA_releaselock();
 898              	 .loc 4 197 5
 899 0054 044B     	 ldr r3,.L64+8
 900 0056 9847     	 blx r3
 901              	.LVL29:
 198:usb.c         **** }
 902              	 .loc 4 198 1
 903 0058 00BF     	 nop
 904 005a 1037     	 adds r7,r7,#16
 905              	.LCFI42:
 906              	 .cfi_def_cfa_offset 8
 907 005c BD46     	 mov sp,r7
 908              	.LCFI43:
 909              	 .cfi_def_cfa_register 13
 910              	 
 911 005e 80BD     	 pop {r7,pc}
 912              	.L65:
 913              	 .align 2
 914              	.L64:
 915 0060 00000000 	 .word ctrlbuffer
 916 0064 08000000 	 .word ctrlbuffer+8
 917 0068 00000000 	 .word FPGA_releaselock
 918 006c 00000000 	 .word FPGA_setlock
 919 0070 00000000 	 .word FPGA_setaddr
 920 0074 00000000 	 .word xram
 921              	 .cfi_endproc
 922              	.LFE197:
 924              	 .section .bss.bulkread_address,"aw",%nobits
 925              	 .align 2
 928              	bulkread_address:
 929 0000 00000000 	 .space 4
 930              	 .section .bss.bulkread_len,"aw",%nobits
 931              	 .align 2
 934              	bulkread_len:
 935 0000 00000000 	 .space 4
 936              	 .section .text.ctrl_writemem_bulk,"ax",%progbits
 937              	 .align 1
 938              	 .global ctrl_writemem_bulk
 939              	 .syntax unified
 940              	 .thumb
 941              	 .thumb_func
 942              	 .fpu softvfp
 944              	ctrl_writemem_bulk:
 945              	.LFB198:
 199:usb.c         **** 
 200:usb.c         **** static uint32_t bulkread_address = 0;
 201:usb.c         **** static uint32_t bulkread_len = 0;
 202:usb.c         **** 
 203:usb.c         **** void ctrl_writemem_bulk(void){
 946              	 .loc 4 203 30
 947              	 .cfi_startproc
 948              	 
 949              	 
 950 0000 80B5     	 push {r7,lr}
 951              	.LCFI44:
 952              	 .cfi_def_cfa_offset 8
 953              	 .cfi_offset 7,-8
 954              	 .cfi_offset 14,-4
 955 0002 82B0     	 sub sp,sp,#8
 956              	.LCFI45:
 957              	 .cfi_def_cfa_offset 16
 958 0004 00AF     	 add r7,sp,#0
 959              	.LCFI46:
 960              	 .cfi_def_cfa_register 7
 204:usb.c         **** //uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 205:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 961              	 .loc 4 205 14
 962 0006 0A4B     	 ldr r3,.L68
 963 0008 5B68     	 ldr r3,[r3,#4]
 964 000a 7B60     	 str r3,[r7,#4]
 206:usb.c         **** 
 207:usb.c         ****     // TODO: see block in
 208:usb.c         ****     FPGA_releaselock();
 965              	 .loc 4 208 5
 966 000c 094B     	 ldr r3,.L68+4
 967 000e 9847     	 blx r3
 968              	.LVL30:
 209:usb.c         ****     while(!FPGA_setlock(fpga_blockout));
 969              	 .loc 4 209 10
 970 0010 00BF     	 nop
 971              	.L67:
 972              	 .loc 4 209 12 discriminator 1
 973 0012 0420     	 movs r0,#4
 974 0014 084B     	 ldr r3,.L68+8
 975 0016 9847     	 blx r3
 976              	.LVL31:
 977 0018 0346     	 mov r3,r0
 978              	 .loc 4 209 10 discriminator 1
 979 001a 002B     	 cmp r3,#0
 980 001c F9D0     	 beq .L67
 210:usb.c         **** 
 211:usb.c         ****     /* Set address */
 212:usb.c         ****     FPGA_setaddr(address);
 981              	 .loc 4 212 5
 982 001e 7868     	 ldr r0,[r7,#4]
 983 0020 064B     	 ldr r3,.L68+12
 984 0022 9847     	 blx r3
 985              	.LVL32:
 213:usb.c         **** 
 214:usb.c         ****     /* Transaction done in generic callback */
 215:usb.c         ****     FPGA_releaselock();
 986              	 .loc 4 215 5
 987 0024 034B     	 ldr r3,.L68+4
 988 0026 9847     	 blx r3
 989              	.LVL33:
 216:usb.c         **** }
 990              	 .loc 4 216 1
 991 0028 00BF     	 nop
 992 002a 0837     	 adds r7,r7,#8
 993              	.LCFI47:
 994              	 .cfi_def_cfa_offset 8
 995 002c BD46     	 mov sp,r7
 996              	.LCFI48:
 997              	 .cfi_def_cfa_register 13
 998              	 
 999 002e 80BD     	 pop {r7,pc}
 1000              	.L69:
 1001              	 .align 2
 1002              	.L68:
 1003 0030 00000000 	 .word ctrlbuffer
 1004 0034 00000000 	 .word FPGA_releaselock
 1005 0038 00000000 	 .word FPGA_setlock
 1006 003c 00000000 	 .word FPGA_setaddr
 1007              	 .cfi_endproc
 1008              	.LFE198:
 1010              	 .section .text.ctrl_sam3ucfg_cb,"ax",%progbits
 1011              	 .align 1
 1012              	 .syntax unified
 1013              	 .thumb
 1014              	 .thumb_func
 1015              	 .fpu softvfp
 1017              	ctrl_sam3ucfg_cb:
 1018              	.LFB199:
 217:usb.c         **** 
 218:usb.c         **** static void ctrl_sam3ucfg_cb(void)
 219:usb.c         **** {
 1019              	 .loc 4 219 1
 1020              	 .cfi_startproc
 1021              	 
 1022              	 
 1023 0000 80B5     	 push {r7,lr}
 1024              	.LCFI49:
 1025              	 .cfi_def_cfa_offset 8
 1026              	 .cfi_offset 7,-8
 1027              	 .cfi_offset 14,-4
 1028 0002 00AF     	 add r7,sp,#0
 1029              	.LCFI50:
 1030              	 .cfi_def_cfa_register 7
 220:usb.c         ****     switch(udd_g_ctrlreq.req.wValue & 0xFF)
 1031              	 .loc 4 220 29
 1032 0004 194B     	 ldr r3,.L79
 1033 0006 5B88     	 ldrh r3,[r3,#2]
 1034              	 .loc 4 220 37
 1035 0008 DBB2     	 uxtb r3,r3
 1036              	 .loc 4 220 5
 1037 000a 032B     	 cmp r3,#3
 1038 000c 14D0     	 beq .L71
 1039 000e 032B     	 cmp r3,#3
 1040 0010 29DC     	 bgt .L78
 1041 0012 012B     	 cmp r3,#1
 1042 0014 02D0     	 beq .L73
 1043 0016 022B     	 cmp r3,#2
 1044 0018 0AD0     	 beq .L74
 221:usb.c         ****     {
 222:usb.c         ****         /* Turn on slow clock */
 223:usb.c         ****     case 0x01:
 224:usb.c         ****         osc_enable(OSC_MAINCK_XTAL);
 225:usb.c         ****         osc_wait_ready(OSC_MAINCK_XTAL);
 226:usb.c         ****         pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 227:usb.c         ****         break;
 228:usb.c         **** 
 229:usb.c         ****         /* Turn off slow clock */
 230:usb.c         ****     case 0x02:
 231:usb.c         ****         pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
 232:usb.c         ****         break;
 233:usb.c         **** 
 234:usb.c         ****         /* Jump to ROM-resident bootloader */
 235:usb.c         ****     case 0x03:
 236:usb.c         ****         /* Turn off connected stuff */
 237:usb.c         ****         //board_power(0);
 238:usb.c         **** 
 239:usb.c         ****         /* Clear ROM-mapping bit. */
 240:usb.c         ****         efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
 241:usb.c         **** 
 242:usb.c         ****         /* Disconnect USB (will kill connection) */
 243:usb.c         ****         udc_detach();
 244:usb.c         **** 
 245:usb.c         ****         /* With knowledge that I will rise again, I lay down my life. */
 246:usb.c         ****         while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
 247:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 248:usb.c         ****         while(1);
 249:usb.c         ****         break;
 250:usb.c         ****         /* Disconnect USB (will kill stuff) */
 251:usb.c         **** 
 252:usb.c         ****         /* Make the jump */
 253:usb.c         ****         break;
 254:usb.c         **** 
 255:usb.c         ****         /* Oh well, sucks to be you */
 256:usb.c         ****     default:
 257:usb.c         ****         break;
 1045              	 .loc 4 257 9
 1046 001a 24E0     	 b .L78
 1047              	.L73:
 224:usb.c         ****         osc_wait_ready(OSC_MAINCK_XTAL);
 1048              	 .loc 4 224 9
 1049 001c 0620     	 movs r0,#6
 1050 001e 144B     	 ldr r3,.L79+4
 1051 0020 9847     	 blx r3
 1052              	.LVL34:
 225:usb.c         ****         pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 1053              	 .loc 4 225 9
 1054 0022 0620     	 movs r0,#6
 1055 0024 134B     	 ldr r3,.L79+8
 1056 0026 9847     	 blx r3
 1057              	.LVL35:
 226:usb.c         ****         break;
 1058              	 .loc 4 226 9
 1059 0028 1020     	 movs r0,#16
 1060 002a 134B     	 ldr r3,.L79+12
 1061 002c 9847     	 blx r3
 1062              	.LVL36:
 227:usb.c         **** 
 1063              	 .loc 4 227 9
 1064 002e 1BE0     	 b .L75
 1065              	.L74:
 231:usb.c         ****         break;
 1066              	 .loc 4 231 9
 1067 0030 1020     	 movs r0,#16
 1068 0032 124B     	 ldr r3,.L79+16
 1069 0034 9847     	 blx r3
 1070              	.LVL37:
 232:usb.c         **** 
 1071              	 .loc 4 232 9
 1072 0036 17E0     	 b .L75
 1073              	.L71:
 240:usb.c         **** 
 1074              	 .loc 4 240 9
 1075 0038 0122     	 movs r2,#1
 1076 003a 0C21     	 movs r1,#12
 1077 003c 1048     	 ldr r0,.L79+20
 1078 003e 114B     	 ldr r3,.L79+24
 1079 0040 9847     	 blx r3
 1080              	.LVL38:
 243:usb.c         **** 
 1081              	 .loc 4 243 9
 1082 0042 114B     	 ldr r3,.L79+28
 1083 0044 9847     	 blx r3
 1084              	.LVL39:
 246:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 1085              	 .loc 4 246 15
 1086 0046 00BF     	 nop
 1087              	.L76:
 246:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 1088              	 .loc 4 246 20 discriminator 1
 1089 0048 104B     	 ldr r3,.L79+32
 1090 004a 5B68     	 ldr r3,[r3,#4]
 246:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 1091              	 .loc 4 246 30 discriminator 1
 1092 004c 03F40033 	 and r3,r3,#131072
 246:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 1093              	 .loc 4 246 15 discriminator 1
 1094 0050 002B     	 cmp r3,#0
 1095 0052 F9D1     	 bne .L76
 247:usb.c         ****         while(1);
 1096              	 .loc 4 247 23
 1097 0054 0D4B     	 ldr r3,.L79+32
 1098 0056 1B68     	 ldr r3,[r3]
 1099 0058 0C4A     	 ldr r2,.L79+32
 1100 005a 43F02543 	 orr r3,r3,#-1526726656
 1101 005e 43F00503 	 orr r3,r3,#5
 1102 0062 1360     	 str r3,[r2]
 1103              	.L77:
 248:usb.c         ****         break;
 1104              	 .loc 4 248 14 discriminator 1
 1105 0064 FEE7     	 b .L77
 1106              	.L78:
 1107              	 .loc 4 257 9
 1108 0066 00BF     	 nop
 1109              	.L75:
 258:usb.c         ****     }
 259:usb.c         **** }
 1110              	 .loc 4 259 1
 1111 0068 00BF     	 nop
 1112 006a 80BD     	 pop {r7,pc}
 1113              	.L80:
 1114              	 .align 2
 1115              	.L79:
 1116 006c 00000000 	 .word udd_g_ctrlreq
 1117 0070 00000000 	 .word osc_enable
 1118 0074 00000000 	 .word osc_wait_ready
 1119 0078 00000000 	 .word pmc_switch_mck_to_mainck
 1120 007c 00000000 	 .word pmc_switch_mck_to_pllack
 1121 0080 00080E40 	 .word 1074661376
 1122 0084 00000000 	 .word efc_perform_command
 1123 0088 00000000 	 .word udc_detach
 1124 008c 00120E40 	 .word 1074663936
 1125              	 .cfi_endproc
 1126              	.LFE199:
 1128              	 .section .text.ctrl_progfpga_bulk,"ax",%progbits
 1129              	 .align 1
 1130              	 .global ctrl_progfpga_bulk
 1131              	 .syntax unified
 1132              	 .thumb
 1133              	 .thumb_func
 1134              	 .fpu softvfp
 1136              	ctrl_progfpga_bulk:
 1137              	.LFB200:
 260:usb.c         **** 
 261:usb.c         **** void ctrl_progfpga_bulk(void){
 1138              	 .loc 4 261 30
 1139              	 .cfi_startproc
 1140              	 
 1141              	 
 1142 0000 80B5     	 push {r7,lr}
 1143              	.LCFI51:
 1144              	 .cfi_def_cfa_offset 8
 1145              	 .cfi_offset 7,-8
 1146              	 .cfi_offset 14,-4
 1147 0002 00AF     	 add r7,sp,#0
 1148              	.LCFI52:
 1149              	 .cfi_def_cfa_register 7
 262:usb.c         **** 
 263:usb.c         ****     switch(udd_g_ctrlreq.req.wValue){
 1150              	 .loc 4 263 29
 1151 0004 0D4B     	 ldr r3,.L88
 1152 0006 5B88     	 ldrh r3,[r3,#2]
 1153              	 .loc 4 263 5
 1154 0008 A22B     	 cmp r3,#162
 1155 000a 0FD0     	 beq .L82
 1156 000c A22B     	 cmp r3,#162
 1157 000e 11DC     	 bgt .L87
 1158 0010 A02B     	 cmp r3,#160
 1159 0012 02D0     	 beq .L84
 1160 0014 A12B     	 cmp r3,#161
 1161 0016 03D0     	 beq .L85
 264:usb.c         ****     case 0xA0:
 265:usb.c         ****         fpga_program_setup1();
 266:usb.c         ****         break;
 267:usb.c         **** 
 268:usb.c         ****     case 0xA1:
 269:usb.c         ****         /* Waiting on data... */
 270:usb.c         ****         fpga_program_setup2();
 271:usb.c         ****         blockendpoint_usage = bep_fpgabitstream;
 272:usb.c         ****         break;
 273:usb.c         **** 
 274:usb.c         ****     case 0xA2:
 275:usb.c         ****         /* Done */
 276:usb.c         ****         blockendpoint_usage = bep_emem;
 277:usb.c         ****         break;
 278:usb.c         **** 
 279:usb.c         ****     default:
 280:usb.c         ****         break;
 1162              	 .loc 4 280 9
 1163 0018 0CE0     	 b .L87
 1164              	.L84:
 265:usb.c         ****         break;
 1165              	 .loc 4 265 9
 1166 001a 094B     	 ldr r3,.L88+4
 1167 001c 9847     	 blx r3
 1168              	.LVL40:
 266:usb.c         **** 
 1169              	 .loc 4 266 9
 1170 001e 0AE0     	 b .L86
 1171              	.L85:
 270:usb.c         ****         blockendpoint_usage = bep_fpgabitstream;
 1172              	 .loc 4 270 9
 1173 0020 084B     	 ldr r3,.L88+8
 1174 0022 9847     	 blx r3
 1175              	.LVL41:
 271:usb.c         ****         break;
 1176              	 .loc 4 271 29
 1177 0024 084B     	 ldr r3,.L88+12
 1178 0026 0A22     	 movs r2,#10
 1179 0028 1A70     	 strb r2,[r3]
 272:usb.c         **** 
 1180              	 .loc 4 272 9
 1181 002a 04E0     	 b .L86
 1182              	.L82:
 276:usb.c         ****         break;
 1183              	 .loc 4 276 29
 1184 002c 064B     	 ldr r3,.L88+12
 1185 002e 0022     	 movs r2,#0
 1186 0030 1A70     	 strb r2,[r3]
 277:usb.c         **** 
 1187              	 .loc 4 277 9
 1188 0032 00E0     	 b .L86
 1189              	.L87:
 1190              	 .loc 4 280 9
 1191 0034 00BF     	 nop
 1192              	.L86:
 281:usb.c         ****     }
 282:usb.c         **** }
 1193              	 .loc 4 282 1
 1194 0036 00BF     	 nop
 1195 0038 80BD     	 pop {r7,pc}
 1196              	.L89:
 1197 003a 00BF     	 .align 2
 1198              	.L88:
 1199 003c 00000000 	 .word udd_g_ctrlreq
 1200 0040 00000000 	 .word fpga_program_setup1
 1201 0044 00000000 	 .word fpga_program_setup2
 1202 0048 00000000 	 .word blockendpoint_usage
 1203              	 .cfi_endproc
 1204              	.LFE200:
 1206              	 .section .text.ctrl_fpga_reset,"ax",%progbits
 1207              	 .align 1
 1208              	 .global ctrl_fpga_reset
 1209              	 .syntax unified
 1210              	 .thumb
 1211              	 .thumb_func
 1212              	 .fpu softvfp
 1214              	ctrl_fpga_reset:
 1215              	.LFB201:
 283:usb.c         **** 
 284:usb.c         **** void ctrl_fpga_reset(void) {
 1216              	 .loc 4 284 28
 1217              	 .cfi_startproc
 1218              	 
 1219              	 
 1220 0000 80B5     	 push {r7,lr}
 1221              	.LCFI53:
 1222              	 .cfi_def_cfa_offset 8
 1223              	 .cfi_offset 7,-8
 1224              	 .cfi_offset 14,-4
 1225 0002 00AF     	 add r7,sp,#0
 1226              	.LCFI54:
 1227              	 .cfi_def_cfa_register 7
 285:usb.c         ****   gpio_set_pin_high(PIN_EBI_USB_SPARE0);
 1228              	 .loc 4 285 3
 1229 0004 2620     	 movs r0,#38
 1230 0006 034B     	 ldr r3,.L91
 1231 0008 9847     	 blx r3
 1232              	.LVL42:
 286:usb.c         ****   gpio_set_pin_low(PIN_EBI_USB_SPARE0);
 1233              	 .loc 4 286 3
 1234 000a 2620     	 movs r0,#38
 1235 000c 024B     	 ldr r3,.L91+4
 1236 000e 9847     	 blx r3
 1237              	.LVL43:
 287:usb.c         **** }
 1238              	 .loc 4 287 1
 1239 0010 00BF     	 nop
 1240 0012 80BD     	 pop {r7,pc}
 1241              	.L92:
 1242              	 .align 2
 1243              	.L91:
 1244 0014 00000000 	 .word pio_set_pin_high
 1245 0018 00000000 	 .word pio_set_pin_low
 1246              	 .cfi_endproc
 1247              	.LFE201:
 1249              	 .section .text.ctrl_usart_cb,"ax",%progbits
 1250              	 .align 1
 1251              	 .syntax unified
 1252              	 .thumb
 1253              	 .thumb_func
 1254              	 .fpu softvfp
 1256              	ctrl_usart_cb:
 1257              	.LFB202:
 288:usb.c         **** 
 289:usb.c         **** static void ctrl_usart_cb(void)
 290:usb.c         **** {
 1258              	 .loc 4 290 1
 1259              	 .cfi_startproc
 1260              	 
 1261              	 
 1262 0000 80B5     	 push {r7,lr}
 1263              	.LCFI55:
 1264              	 .cfi_def_cfa_offset 8
 1265              	 .cfi_offset 7,-8
 1266              	 .cfi_offset 14,-4
 1267 0002 00AF     	 add r7,sp,#0
 1268              	.LCFI56:
 1269              	 .cfi_def_cfa_register 7
 291:usb.c         **** 	ctrl_usart(USART_TARGET, false);
 1270              	 .loc 4 291 2
 1271 0004 0021     	 movs r1,#0
 1272 0006 0248     	 ldr r0,.L94
 1273 0008 024B     	 ldr r3,.L94+4
 1274 000a 9847     	 blx r3
 1275              	.LVL44:
 292:usb.c         **** }
 1276              	 .loc 4 292 1
 1277 000c 00BF     	 nop
 1278 000e 80BD     	 pop {r7,pc}
 1279              	.L95:
 1280              	 .align 2
 1281              	.L94:
 1282 0010 00000940 	 .word 1074331648
 1283 0014 00000000 	 .word ctrl_usart
 1284              	 .cfi_endproc
 1285              	.LFE202:
 1287              	 .section .text.ctrl_usart_cb_data,"ax",%progbits
 1288              	 .align 1
 1289              	 .syntax unified
 1290              	 .thumb
 1291              	 .thumb_func
 1292              	 .fpu softvfp
 1294              	ctrl_usart_cb_data:
 1295              	.LFB203:
 293:usb.c         **** 
 294:usb.c         **** static void ctrl_usart_cb_data(void)
 295:usb.c         **** {		
 1296              	 .loc 4 295 1
 1297              	 .cfi_startproc
 1298              	 
 1299              	 
 1300 0000 80B5     	 push {r7,lr}
 1301              	.LCFI57:
 1302              	 .cfi_def_cfa_offset 8
 1303              	 .cfi_offset 7,-8
 1304              	 .cfi_offset 14,-4
 1305 0002 82B0     	 sub sp,sp,#8
 1306              	.LCFI58:
 1307              	 .cfi_def_cfa_offset 16
 1308 0004 00AF     	 add r7,sp,#0
 1309              	.LCFI59:
 1310              	 .cfi_def_cfa_register 7
 296:usb.c         **** 	//Catch heartbleed-style error
 297:usb.c         **** 	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
 1311              	 .loc 4 297 23
 1312 0006 104B     	 ldr r3,.L102
 1313 0008 DA88     	 ldrh r2,[r3,#6]
 1314              	 .loc 4 297 47
 1315 000a 0F4B     	 ldr r3,.L102
 1316 000c 9B89     	 ldrh r3,[r3,#12]
 1317              	 .loc 4 297 5
 1318 000e 9A42     	 cmp r2,r3
 1319 0010 16D8     	 bhi .L101
 1320              	.LBB3:
 298:usb.c         **** 		return;
 299:usb.c         **** 	}
 300:usb.c         **** 	
 301:usb.c         **** 	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
 1321              	 .loc 4 301 11
 1322 0012 0023     	 movs r3,#0
 1323 0014 7B60     	 str r3,[r7,#4]
 1324              	 .loc 4 301 2
 1325 0016 0CE0     	 b .L99
 1326              	.L100:
 1327              	.LBB4:
 302:usb.c         **** 		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
 1328              	 .loc 4 302 57 discriminator 3
 1329 0018 0B4B     	 ldr r3,.L102
 1330 001a 9A68     	 ldr r2,[r3,#8]
 1331              	 .loc 4 302 65 discriminator 3
 1332 001c 7B68     	 ldr r3,[r7,#4]
 1333 001e 1344     	 add r3,r3,r2
 1334 0020 1B78     	 ldrb r3,[r3]
 1335              	 .loc 4 302 3 discriminator 3
 1336 0022 1A46     	 mov r2,r3
 1337 0024 0021     	 movs r1,#0
 1338 0026 0948     	 ldr r0,.L102+4
 1339 0028 094B     	 ldr r3,.L102+8
 1340 002a 9847     	 blx r3
 1341              	.LVL45:
 1342              	.LBE4:
 301:usb.c         **** 		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
 1343              	 .loc 4 301 50 discriminator 3
 1344 002c 7B68     	 ldr r3,[r7,#4]
 1345 002e 0133     	 adds r3,r3,#1
 1346 0030 7B60     	 str r3,[r7,#4]
 1347              	.L99:
 301:usb.c         **** 		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
 1348              	 .loc 4 301 39 discriminator 1
 1349 0032 054B     	 ldr r3,.L102
 1350 0034 DB88     	 ldrh r3,[r3,#6]
 1351 0036 1A46     	 mov r2,r3
 301:usb.c         **** 		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
 1352              	 .loc 4 301 2 discriminator 1
 1353 0038 7B68     	 ldr r3,[r7,#4]
 1354 003a 9342     	 cmp r3,r2
 1355 003c ECDB     	 blt .L100
 1356 003e 00E0     	 b .L96
 1357              	.L101:
 1358              	.LBE3:
 298:usb.c         **** 		return;
 1359              	 .loc 4 298 3
 1360 0040 00BF     	 nop
 1361              	.L96:
 303:usb.c         **** 	}
 304:usb.c         **** }
 1362              	 .loc 4 304 1
 1363 0042 0837     	 adds r7,r7,#8
 1364              	.LCFI60:
 1365              	 .cfi_def_cfa_offset 8
 1366 0044 BD46     	 mov sp,r7
 1367              	.LCFI61:
 1368              	 .cfi_def_cfa_register 13
 1369              	 
 1370 0046 80BD     	 pop {r7,pc}
 1371              	.L103:
 1372              	 .align 2
 1373              	.L102:
 1374 0048 00000000 	 .word udd_g_ctrlreq
 1375 004c 00000940 	 .word 1074331648
 1376 0050 00000000 	 .word usart_driver_putchar
 1377              	 .cfi_endproc
 1378              	.LFE203:
 1380              	 .section .text.ctrl_xmega_program_void,"ax",%progbits
 1381              	 .align 1
 1382              	 .global ctrl_xmega_program_void
 1383              	 .syntax unified
 1384              	 .thumb
 1385              	 .thumb_func
 1386              	 .fpu softvfp
 1388              	ctrl_xmega_program_void:
 1389              	.LFB204:
 305:usb.c         **** 
 306:usb.c         **** void ctrl_xmega_program_void(void)
 307:usb.c         **** {
 1390              	 .loc 4 307 1
 1391              	 .cfi_startproc
 1392              	 
 1393              	 
 1394 0000 80B5     	 push {r7,lr}
 1395              	.LCFI62:
 1396              	 .cfi_def_cfa_offset 8
 1397              	 .cfi_offset 7,-8
 1398              	 .cfi_offset 14,-4
 1399 0002 00AF     	 add r7,sp,#0
 1400              	.LCFI63:
 1401              	 .cfi_def_cfa_register 7
 308:usb.c         **** 	XPROGProtocol_Command();
 1402              	 .loc 4 308 2
 1403 0004 014B     	 ldr r3,.L105
 1404 0006 9847     	 blx r3
 1405              	.LVL46:
 309:usb.c         **** }
 1406              	 .loc 4 309 1
 1407 0008 00BF     	 nop
 1408 000a 80BD     	 pop {r7,pc}
 1409              	.L106:
 1410              	 .align 2
 1411              	.L105:
 1412 000c 00000000 	 .word XPROGProtocol_Command
 1413              	 .cfi_endproc
 1414              	.LFE204:
 1416              	 .section .text.ctrl_avr_program_void,"ax",%progbits
 1417              	 .align 1
 1418              	 .global ctrl_avr_program_void
 1419              	 .syntax unified
 1420              	 .thumb
 1421              	 .thumb_func
 1422              	 .fpu softvfp
 1424              	ctrl_avr_program_void:
 1425              	.LFB205:
 310:usb.c         **** 
 311:usb.c         **** void ctrl_avr_program_void(void)
 312:usb.c         **** {
 1426              	 .loc 4 312 1
 1427              	 .cfi_startproc
 1428              	 
 1429              	 
 1430 0000 80B5     	 push {r7,lr}
 1431              	.LCFI64:
 1432              	 .cfi_def_cfa_offset 8
 1433              	 .cfi_offset 7,-8
 1434              	 .cfi_offset 14,-4
 1435 0002 00AF     	 add r7,sp,#0
 1436              	.LCFI65:
 1437              	 .cfi_def_cfa_register 7
 313:usb.c         **** 	V2Protocol_ProcessCommand();
 1438              	 .loc 4 313 2
 1439 0004 014B     	 ldr r3,.L108
 1440 0006 9847     	 blx r3
 1441              	.LVL47:
 314:usb.c         **** }
 1442              	 .loc 4 314 1
 1443 0008 00BF     	 nop
 1444 000a 80BD     	 pop {r7,pc}
 1445              	.L109:
 1446              	 .align 2
 1447              	.L108:
 1448 000c 00000000 	 .word V2Protocol_ProcessCommand
 1449              	 .cfi_endproc
 1450              	.LFE205:
 1452              	 .section .text.main_setup_out_received,"ax",%progbits
 1453              	 .align 1
 1454              	 .global main_setup_out_received
 1455              	 .syntax unified
 1456              	 .thumb
 1457              	 .thumb_func
 1458              	 .fpu softvfp
 1460              	main_setup_out_received:
 1461              	.LFB206:
 315:usb.c         **** 
 316:usb.c         **** bool main_setup_out_received(void)
 317:usb.c         **** {
 1462              	 .loc 4 317 1
 1463              	 .cfi_startproc
 1464              	 
 1465              	 
 1466 0000 80B5     	 push {r7,lr}
 1467              	.LCFI66:
 1468              	 .cfi_def_cfa_offset 8
 1469              	 .cfi_offset 7,-8
 1470              	 .cfi_offset 14,-4
 1471 0002 00AF     	 add r7,sp,#0
 1472              	.LCFI67:
 1473              	 .cfi_def_cfa_register 7
 318:usb.c         ****     //Add buffer if used
 319:usb.c         ****     udd_g_ctrlreq.payload = ctrlbuffer;
 1474              	 .loc 4 319 27
 1475 0004 494B     	 ldr r3,.L132
 1476 0006 4A4A     	 ldr r2,.L132+4
 1477 0008 9A60     	 str r2,[r3,#8]
 320:usb.c         ****     udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
 1478              	 .loc 4 320 34
 1479 000a 484B     	 ldr r3,.L132
 1480 000c DB88     	 ldrh r3,[r3,#6]
 1481 000e 402B     	 cmp r3,#64
 1482 0010 28BF     	 it cs
 1483 0012 4023     	 movcs r3,#64
 1484 0014 9AB2     	 uxth r2,r3
 1485              	 .loc 4 320 32
 1486 0016 454B     	 ldr r3,.L132
 1487 0018 9A81     	 strh r2,[r3,#12]
 321:usb.c         **** 
 322:usb.c         ****     blockendpoint_usage = bep_emem;
 1488              	 .loc 4 322 25
 1489 001a 464B     	 ldr r3,.L132+8
 1490 001c 0022     	 movs r2,#0
 1491 001e 1A70     	 strb r2,[r3]
 323:usb.c         ****     static uint8_t  respbuf[128];
 324:usb.c         ****     switch(udd_g_ctrlreq.req.bRequest){
 1492              	 .loc 4 324 29
 1493 0020 424B     	 ldr r3,.L132
 1494 0022 5B78     	 ldrb r3,[r3,#1]
 1495 0024 103B     	 subs r3,r3,#16
 1496 0026 152B     	 cmp r3,#21
 1497 0028 73D8     	 bhi .L111
 1498 002a 01A2     	 adr r2,.L113
 1499 002c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1500              	 .p2align 2
 1501              	.L113:
 1502 0030 89000000 	 .word .L121+1
 1503 0034 B5000000 	 .word .L120+1
 1504 0038 9F000000 	 .word .L119+1
 1505 003c CB000000 	 .word .L118+1
 1506 0040 13010000 	 .word .L111+1
 1507 0044 13010000 	 .word .L111+1
 1508 0048 F5000000 	 .word .L117+1
 1509 004c 13010000 	 .word .L111+1
 1510 0050 13010000 	 .word .L111+1
 1511 0054 13010000 	 .word .L111+1
 1512 0058 EB000000 	 .word .L116+1
 1513 005c E1000000 	 .word .L115+1
 1514 0060 13010000 	 .word .L111+1
 1515 0064 13010000 	 .word .L111+1
 1516 0068 13010000 	 .word .L111+1
 1517 006c 13010000 	 .word .L111+1
 1518 0070 13010000 	 .word .L111+1
 1519 0074 13010000 	 .word .L111+1
 1520 0078 FF000000 	 .word .L114+1
 1521 007c 13010000 	 .word .L111+1
 1522 0080 13010000 	 .word .L111+1
 1523 0084 09010000 	 .word .L112+1
 1524              	 .p2align 1
 1525              	.L121:
 325:usb.c         ****         /* Memory Read */
 326:usb.c         ****     case REQ_MEMREAD_BULK:
 327:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 1526              	 .loc 4 327 13
 1527 0088 0620     	 movs r0,#6
 1528 008a 2B4B     	 ldr r3,.L132+12
 1529 008c 9847     	 blx r3
 1530              	.LVL48:
 1531 008e 0346     	 mov r3,r0
 1532              	 .loc 4 327 12
 1533 0090 002B     	 cmp r3,#0
 1534 0092 40D0     	 beq .L128
 328:usb.c         ****             udd_g_ctrlreq.callback = ctrl_readmem_bulk;
 1535              	 .loc 4 328 36
 1536 0094 254B     	 ldr r3,.L132
 1537 0096 294A     	 ldr r2,.L132+16
 1538 0098 1A61     	 str r2,[r3,#16]
 329:usb.c         ****             return true;
 1539              	 .loc 4 329 20
 1540 009a 0123     	 movs r3,#1
 1541 009c 43E0     	 b .L123
 1542              	.L119:
 330:usb.c         ****         }
 331:usb.c         ****         break;
 332:usb.c         ****     case REQ_MEMREAD_CTRL:
 333:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 1543              	 .loc 4 333 13
 1544 009e 0620     	 movs r0,#6
 1545 00a0 254B     	 ldr r3,.L132+12
 1546 00a2 9847     	 blx r3
 1547              	.LVL49:
 1548 00a4 0346     	 mov r3,r0
 1549              	 .loc 4 333 12
 1550 00a6 002B     	 cmp r3,#0
 1551 00a8 37D0     	 beq .L129
 334:usb.c         ****             udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
 1552              	 .loc 4 334 36
 1553 00aa 204B     	 ldr r3,.L132
 1554 00ac 244A     	 ldr r2,.L132+20
 1555 00ae 1A61     	 str r2,[r3,#16]
 335:usb.c         ****             return true;
 1556              	 .loc 4 335 20
 1557 00b0 0123     	 movs r3,#1
 1558 00b2 38E0     	 b .L123
 1559              	.L120:
 336:usb.c         ****         }
 337:usb.c         ****         break;
 338:usb.c         **** 
 339:usb.c         **** 
 340:usb.c         ****         /* Memory Write */
 341:usb.c         ****     case REQ_MEMWRITE_BULK:
 342:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 1560              	 .loc 4 342 13
 1561 00b4 0620     	 movs r0,#6
 1562 00b6 204B     	 ldr r3,.L132+12
 1563 00b8 9847     	 blx r3
 1564              	.LVL50:
 1565 00ba 0346     	 mov r3,r0
 1566              	 .loc 4 342 12
 1567 00bc 002B     	 cmp r3,#0
 1568 00be 2ED0     	 beq .L130
 343:usb.c         ****             udd_g_ctrlreq.callback = ctrl_writemem_bulk;
 1569              	 .loc 4 343 36
 1570 00c0 1A4B     	 ldr r3,.L132
 1571 00c2 204A     	 ldr r2,.L132+24
 1572 00c4 1A61     	 str r2,[r3,#16]
 344:usb.c         ****             return true;
 1573              	 .loc 4 344 20
 1574 00c6 0123     	 movs r3,#1
 1575 00c8 2DE0     	 b .L123
 1576              	.L118:
 345:usb.c         ****         }
 346:usb.c         ****         break;
 347:usb.c         ****     // case REQ_XMEGA_PROGRAM:
 348:usb.c         ****     //     /*
 349:usb.c         ****     //     udd_g_ctrlreq.payload = xmegabuffer;
 350:usb.c         ****     //     udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(xmegabuffer));
 351:usb.c         ****     //     */
 352:usb.c         ****     //     udd_g_ctrlreq.callback = ctrl_xmega_program_void;
 353:usb.c         ****     //     return true;
 354:usb.c         **** 
 355:usb.c         ****     // /* AVR Programming */
 356:usb.c         ****     // case REQ_AVR_PROGRAM:
 357:usb.c         ****     //     udd_g_ctrlreq.callback = ctrl_avr_program_void;
 358:usb.c         ****     //     return true;
 359:usb.c         **** 
 360:usb.c         **** 
 361:usb.c         ****     case REQ_MEMWRITE_CTRL:
 362:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 1577              	 .loc 4 362 13
 1578 00ca 0620     	 movs r0,#6
 1579 00cc 1A4B     	 ldr r3,.L132+12
 1580 00ce 9847     	 blx r3
 1581              	.LVL51:
 1582 00d0 0346     	 mov r3,r0
 1583              	 .loc 4 362 12
 1584 00d2 002B     	 cmp r3,#0
 1585 00d4 25D0     	 beq .L131
 363:usb.c         ****             udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
 1586              	 .loc 4 363 36
 1587 00d6 154B     	 ldr r3,.L132
 1588 00d8 1B4A     	 ldr r2,.L132+28
 1589 00da 1A61     	 str r2,[r3,#16]
 364:usb.c         ****             return true;
 1590              	 .loc 4 364 20
 1591 00dc 0123     	 movs r3,#1
 1592 00de 22E0     	 b .L123
 1593              	.L115:
 365:usb.c         ****         }
 366:usb.c         ****         break;
 367:usb.c         **** 
 368:usb.c         **** 		/* Target serial */
 369:usb.c         ****     case REQ_USART0_CONFIG:
 370:usb.c         ****         udd_g_ctrlreq.callback = ctrl_usart_cb;
 1594              	 .loc 4 370 32
 1595 00e0 124B     	 ldr r3,.L132
 1596 00e2 1A4A     	 ldr r2,.L132+32
 1597 00e4 1A61     	 str r2,[r3,#16]
 371:usb.c         ****         return true;
 1598              	 .loc 4 371 16
 1599 00e6 0123     	 movs r3,#1
 1600 00e8 1DE0     	 b .L123
 1601              	.L116:
 372:usb.c         ****         
 373:usb.c         ****     case REQ_USART0_DATA:
 374:usb.c         ****         udd_g_ctrlreq.callback = ctrl_usart_cb_data;
 1602              	 .loc 4 374 32
 1603 00ea 104B     	 ldr r3,.L132
 1604 00ec 184A     	 ldr r2,.L132+36
 1605 00ee 1A61     	 str r2,[r3,#16]
 375:usb.c         ****         return true;
 1606              	 .loc 4 375 16
 1607 00f0 0123     	 movs r3,#1
 1608 00f2 18E0     	 b .L123
 1609              	.L117:
 376:usb.c         **** 
 377:usb.c         ****     case REQ_FPGA_PROGRAM:
 378:usb.c         ****         udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
 1610              	 .loc 4 378 32
 1611 00f4 0D4B     	 ldr r3,.L132
 1612 00f6 174A     	 ldr r2,.L132+40
 1613 00f8 1A61     	 str r2,[r3,#16]
 379:usb.c         ****         return true;
 1614              	 .loc 4 379 16
 1615 00fa 0123     	 movs r3,#1
 1616 00fc 13E0     	 b .L123
 1617              	.L114:
 380:usb.c         **** 
 381:usb.c         ****     case REQ_SAM3U_CFG:
 382:usb.c         ****         udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
 1618              	 .loc 4 382 32
 1619 00fe 0B4B     	 ldr r3,.L132
 1620 0100 154A     	 ldr r2,.L132+44
 1621 0102 1A61     	 str r2,[r3,#16]
 383:usb.c         ****         return true;
 1622              	 .loc 4 383 16
 1623 0104 0123     	 movs r3,#1
 1624 0106 0EE0     	 b .L123
 1625              	.L112:
 384:usb.c         **** 
 385:usb.c         ****     case REQ_FPGA_RESET:
 386:usb.c         ****         udd_g_ctrlreq.callback = ctrl_fpga_reset;
 1626              	 .loc 4 386 32
 1627 0108 084B     	 ldr r3,.L132
 1628 010a 144A     	 ldr r2,.L132+48
 1629 010c 1A61     	 str r2,[r3,#16]
 387:usb.c         ****         return true;
 1630              	 .loc 4 387 16
 1631 010e 0123     	 movs r3,#1
 1632 0110 09E0     	 b .L123
 1633              	.L111:
 388:usb.c         **** 
 389:usb.c         ****     default:
 390:usb.c         ****         return false;
 1634              	 .loc 4 390 16
 1635 0112 0023     	 movs r3,#0
 1636 0114 07E0     	 b .L123
 1637              	.L128:
 331:usb.c         ****     case REQ_MEMREAD_CTRL:
 1638              	 .loc 4 331 9
 1639 0116 00BF     	 nop
 1640 0118 04E0     	 b .L124
 1641              	.L129:
 337:usb.c         **** 
 1642              	 .loc 4 337 9
 1643 011a 00BF     	 nop
 1644 011c 02E0     	 b .L124
 1645              	.L130:
 346:usb.c         ****     // case REQ_XMEGA_PROGRAM:
 1646              	 .loc 4 346 9
 1647 011e 00BF     	 nop
 1648 0120 00E0     	 b .L124
 1649              	.L131:
 366:usb.c         **** 
 1650              	 .loc 4 366 9
 1651 0122 00BF     	 nop
 1652              	.L124:
 391:usb.c         ****     }
 392:usb.c         **** 
 393:usb.c         ****     return false;
 1653              	 .loc 4 393 12
 1654 0124 0023     	 movs r3,#0
 1655              	.L123:
 394:usb.c         **** }
 1656              	 .loc 4 394 1
 1657 0126 1846     	 mov r0,r3
 1658 0128 80BD     	 pop {r7,pc}
 1659              	.L133:
 1660 012a 00BF     	 .align 2
 1661              	.L132:
 1662 012c 00000000 	 .word udd_g_ctrlreq
 1663 0130 00000000 	 .word ctrlbuffer
 1664 0134 00000000 	 .word blockendpoint_usage
 1665 0138 00000000 	 .word FPGA_setlock
 1666 013c 00000000 	 .word ctrl_readmem_bulk
 1667 0140 00000000 	 .word ctrl_readmem_ctrl
 1668 0144 00000000 	 .word ctrl_writemem_bulk
 1669 0148 00000000 	 .word ctrl_writemem_ctrl
 1670 014c 00000000 	 .word ctrl_usart_cb
 1671 0150 00000000 	 .word ctrl_usart_cb_data
 1672 0154 00000000 	 .word ctrl_progfpga_bulk
 1673 0158 00000000 	 .word ctrl_sam3ucfg_cb
 1674 015c 00000000 	 .word ctrl_fpga_reset
 1675              	 .cfi_endproc
 1676              	.LFE206:
 1678              	 .section .text.main_setup_in_received,"ax",%progbits
 1679              	 .align 1
 1680              	 .global main_setup_in_received
 1681              	 .syntax unified
 1682              	 .thumb
 1683              	 .thumb_func
 1684              	 .fpu softvfp
 1686              	main_setup_in_received:
 1687              	.LFB207:
 395:usb.c         **** 
 396:usb.c         **** 
 397:usb.c         **** /*
 398:usb.c         ****   udd_g_ctrlreq.req.bRequest == 0
 399:usb.c         ****   && (udd_g_ctrlreq.req.bRequest == 0)
 400:usb.c         ****   && (0 != udd_g_ctrlreq.req.wLength)
 401:usb.c         **** */
 402:usb.c         **** 
 403:usb.c         **** bool main_setup_in_received(void)
 404:usb.c         **** {
 1688              	 .loc 4 404 1
 1689              	 .cfi_startproc
 1690              	 
 1691              	 
 1692 0000 80B5     	 push {r7,lr}
 1693              	.LCFI68:
 1694              	 .cfi_def_cfa_offset 8
 1695              	 .cfi_offset 7,-8
 1696              	 .cfi_offset 14,-4
 1697 0002 82B0     	 sub sp,sp,#8
 1698              	.LCFI69:
 1699              	 .cfi_def_cfa_offset 16
 1700 0004 00AF     	 add r7,sp,#0
 1701              	.LCFI70:
 1702              	 .cfi_def_cfa_register 7
 405:usb.c         ****     /*
 406:usb.c         ****       udd_g_ctrlreq.payload = main_buf_loopback;
 407:usb.c         ****       udd_g_ctrlreq.payload_size =
 408:usb.c         ****       min( udd_g_ctrlreq.req.wLength,
 409:usb.c         ****       sizeof(main_buf_loopback) );
 410:usb.c         ****     */
 411:usb.c         **** 
 412:usb.c         ****     static uint8_t  respbuf[64];
 413:usb.c         ****     unsigned int cnt;
 414:usb.c         **** 
 415:usb.c         ****     switch(udd_g_ctrlreq.req.bRequest){
 1703              	 .loc 4 415 29
 1704 0006 484B     	 ldr r3,.L146
 1705 0008 5B78     	 ldrb r3,[r3,#1]
 1706 000a 123B     	 subs r3,r3,#18
 1707 000c 092B     	 cmp r3,#9
 1708 000e 00F28580 	 bhi .L135
 1709 0012 01A2     	 adr r2,.L137
 1710 0014 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1711              	 .p2align 2
 1712              	.L137:
 1713 0018 41000000 	 .word .L141+1
 1714 001c 1D010000 	 .word .L135+1
 1715 0020 1D010000 	 .word .L135+1
 1716 0024 E3000000 	 .word .L140+1
 1717 0028 1D010000 	 .word .L135+1
 1718 002c C1000000 	 .word .L139+1
 1719 0030 1D010000 	 .word .L135+1
 1720 0034 1D010000 	 .word .L135+1
 1721 0038 83000000 	 .word .L138+1
 1722 003c 6D000000 	 .word .L136+1
 1723              	 .p2align 1
 1724              	.L141:
 1725              	.LBB5:
 416:usb.c         ****     case REQ_MEMREAD_CTRL:
 417:usb.c         ****         udd_g_ctrlreq.payload = ctrlmemread_buf;
 1726              	 .loc 4 417 31
 1727 0040 3A4B     	 ldr r3,.L146+4
 1728 0042 1B68     	 ldr r3,[r3]
 1729 0044 384A     	 ldr r2,.L146
 1730 0046 9360     	 str r3,[r2,#8]
 418:usb.c         ****         udd_g_ctrlreq.payload_size = ctrlmemread_size;
 1731              	 .loc 4 418 36
 1732 0048 394B     	 ldr r3,.L146+8
 1733 004a 1B68     	 ldr r3,[r3]
 1734 004c 9AB2     	 uxth r2,r3
 1735 004e 364B     	 ldr r3,.L146
 1736 0050 9A81     	 strh r2,[r3,#12]
 419:usb.c         ****         ctrlmemread_size = 0;
 1737              	 .loc 4 419 26
 1738 0052 374B     	 ldr r3,.L146+8
 1739 0054 0022     	 movs r2,#0
 1740 0056 1A60     	 str r2,[r3]
 420:usb.c         **** 
 421:usb.c         ****         if (FPGA_lockstatus() == fpga_ctrlmem){
 1741              	 .loc 4 421 13
 1742 0058 364B     	 ldr r3,.L146+12
 1743 005a 9847     	 blx r3
 1744              	.LVL52:
 1745 005c 0346     	 mov r3,r0
 1746              	 .loc 4 421 12
 1747 005e 052B     	 cmp r3,#5
 1748 0060 02D1     	 bne .L142
 422:usb.c         ****             FPGA_setlock(fpga_unlocked);
 1749              	 .loc 4 422 13
 1750 0062 0020     	 movs r0,#0
 1751 0064 344B     	 ldr r3,.L146+16
 1752 0066 9847     	 blx r3
 1753              	.LVL53:
 1754              	.L142:
 423:usb.c         ****         }
 424:usb.c         **** 
 425:usb.c         ****         return true;
 1755              	 .loc 4 425 16
 1756 0068 0123     	 movs r3,#1
 1757 006a 58E0     	 b .L143
 1758              	.L136:
 426:usb.c         ****         break;
 427:usb.c         **** 
 428:usb.c         ****     // case REQ_XMEGA_PROGRAM:
 429:usb.c         ****     //     return XPROGProtocol_Command();
 430:usb.c         ****     //     break;
 431:usb.c         ****         
 432:usb.c         ****     // case REQ_AVR_PROGRAM:
 433:usb.c         ****     //     return V2Protocol_ProcessCommand();
 434:usb.c         ****     //     break;
 435:usb.c         ****         
 436:usb.c         ****         
 437:usb.c         ****     case REQ_USART0_CONFIG:
 438:usb.c         ****         return ctrl_usart(USART_TARGET, true);
 1759              	 .loc 4 438 16
 1760 006c 0121     	 movs r1,#1
 1761 006e 3348     	 ldr r0,.L146+20
 1762 0070 334B     	 ldr r3,.L146+24
 1763 0072 9847     	 blx r3
 1764              	.LVL54:
 1765 0074 0346     	 mov r3,r0
 1766 0076 002B     	 cmp r3,#0
 1767 0078 14BF     	 ite ne
 1768 007a 0123     	 movne r3,#1
 1769 007c 0023     	 moveq r3,#0
 1770 007e DBB2     	 uxtb r3,r3
 1771 0080 4DE0     	 b .L143
 1772              	.L138:
 439:usb.c         ****         break;
 440:usb.c         ****         
 441:usb.c         ****     case REQ_USART0_DATA:						
 442:usb.c         ****         for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
 1773              	 .loc 4 442 17
 1774 0082 0023     	 movs r3,#0
 1775 0084 7B60     	 str r3,[r7,#4]
 1776              	 .loc 4 442 9
 1777 0086 0CE0     	 b .L144
 1778              	.L145:
 1779              	.LBB6:
 443:usb.c         ****             respbuf[cnt] = usart_driver_getchar(USART_TARGET);
 1780              	 .loc 4 443 28 discriminator 3
 1781 0088 2C48     	 ldr r0,.L146+20
 1782 008a 2E4B     	 ldr r3,.L146+28
 1783 008c 9847     	 blx r3
 1784              	.LVL55:
 1785 008e 0346     	 mov r3,r0
 1786              	 .loc 4 443 26 discriminator 3
 1787 0090 D9B2     	 uxtb r1,r3
 1788 0092 2D4A     	 ldr r2,.L146+32
 1789 0094 7B68     	 ldr r3,[r7,#4]
 1790 0096 1344     	 add r3,r3,r2
 1791 0098 0A46     	 mov r2,r1
 1792 009a 1A70     	 strb r2,[r3]
 1793              	.LBE6:
 442:usb.c         ****             respbuf[cnt] = usart_driver_getchar(USART_TARGET);
 1794              	 .loc 4 442 58 discriminator 3
 1795 009c 7B68     	 ldr r3,[r7,#4]
 1796 009e 0133     	 adds r3,r3,#1
 1797 00a0 7B60     	 str r3,[r7,#4]
 1798              	.L144:
 442:usb.c         ****             respbuf[cnt] = usart_driver_getchar(USART_TARGET);
 1799              	 .loc 4 442 45 discriminator 1
 1800 00a2 214B     	 ldr r3,.L146
 1801 00a4 DB88     	 ldrh r3,[r3,#6]
 1802 00a6 1A46     	 mov r2,r3
 442:usb.c         ****             respbuf[cnt] = usart_driver_getchar(USART_TARGET);
 1803              	 .loc 4 442 9 discriminator 1
 1804 00a8 7B68     	 ldr r3,[r7,#4]
 1805 00aa 9342     	 cmp r3,r2
 1806 00ac ECD3     	 bcc .L145
 444:usb.c         ****         }
 445:usb.c         ****         udd_g_ctrlreq.payload = respbuf;
 1807              	 .loc 4 445 31
 1808 00ae 1E4B     	 ldr r3,.L146
 1809 00b0 254A     	 ldr r2,.L146+32
 1810 00b2 9A60     	 str r2,[r3,#8]
 446:usb.c         ****         udd_g_ctrlreq.payload_size = cnt;
 1811              	 .loc 4 446 36
 1812 00b4 7B68     	 ldr r3,[r7,#4]
 1813 00b6 9AB2     	 uxth r2,r3
 1814 00b8 1B4B     	 ldr r3,.L146
 1815 00ba 9A81     	 strh r2,[r3,#12]
 447:usb.c         ****         return true;
 1816              	 .loc 4 447 16
 1817 00bc 0123     	 movs r3,#1
 1818 00be 2EE0     	 b .L143
 1819              	.L139:
 448:usb.c         ****         break;
 449:usb.c         ****     case REQ_FW_VERSION:
 450:usb.c         ****         respbuf[0] = FW_VER_MAJOR;
 1820              	 .loc 4 450 20
 1821 00c0 214B     	 ldr r3,.L146+32
 1822 00c2 0122     	 movs r2,#1
 1823 00c4 1A70     	 strb r2,[r3]
 451:usb.c         ****         respbuf[1] = FW_VER_MINOR;
 1824              	 .loc 4 451 20
 1825 00c6 204B     	 ldr r3,.L146+32
 1826 00c8 0122     	 movs r2,#1
 1827 00ca 5A70     	 strb r2,[r3,#1]
 452:usb.c         ****         respbuf[2] = FW_VER_DEBUG;
 1828              	 .loc 4 452 20
 1829 00cc 1E4B     	 ldr r3,.L146+32
 1830 00ce 0022     	 movs r2,#0
 1831 00d0 9A70     	 strb r2,[r3,#2]
 453:usb.c         ****         udd_g_ctrlreq.payload = respbuf;
 1832              	 .loc 4 453 31
 1833 00d2 154B     	 ldr r3,.L146
 1834 00d4 1C4A     	 ldr r2,.L146+32
 1835 00d6 9A60     	 str r2,[r3,#8]
 454:usb.c         ****         udd_g_ctrlreq.payload_size = 3;
 1836              	 .loc 4 454 36
 1837 00d8 134B     	 ldr r3,.L146
 1838 00da 0322     	 movs r2,#3
 1839 00dc 9A81     	 strh r2,[r3,#12]
 455:usb.c         ****         return true;
 1840              	 .loc 4 455 16
 1841 00de 0123     	 movs r3,#1
 1842 00e0 1DE0     	 b .L143
 1843              	.L140:
 456:usb.c         ****         break;
 457:usb.c         **** 
 458:usb.c         ****     case REQ_FPGA_STATUS:
 459:usb.c         ****         respbuf[0] = FPGA_ISDONE();
 1844              	 .loc 4 459 22
 1845 00e2 0720     	 movs r0,#7
 1846 00e4 194B     	 ldr r3,.L146+36
 1847 00e6 9847     	 blx r3
 1848              	.LVL56:
 1849 00e8 0346     	 mov r3,r0
 1850 00ea 002B     	 cmp r3,#0
 1851 00ec 14BF     	 ite ne
 1852 00ee 0123     	 movne r3,#1
 1853 00f0 0023     	 moveq r3,#0
 1854 00f2 DBB2     	 uxtb r3,r3
 1855 00f4 1A46     	 mov r2,r3
 1856              	 .loc 4 459 20
 1857 00f6 144B     	 ldr r3,.L146+32
 1858 00f8 1A70     	 strb r2,[r3]
 460:usb.c         ****         respbuf[1] = 0;
 1859              	 .loc 4 460 20
 1860 00fa 134B     	 ldr r3,.L146+32
 1861 00fc 0022     	 movs r2,#0
 1862 00fe 5A70     	 strb r2,[r3,#1]
 461:usb.c         ****         respbuf[2] = 0;
 1863              	 .loc 4 461 20
 1864 0100 114B     	 ldr r3,.L146+32
 1865 0102 0022     	 movs r2,#0
 1866 0104 9A70     	 strb r2,[r3,#2]
 462:usb.c         ****         respbuf[3] = 0;
 1867              	 .loc 4 462 20
 1868 0106 104B     	 ldr r3,.L146+32
 1869 0108 0022     	 movs r2,#0
 1870 010a DA70     	 strb r2,[r3,#3]
 463:usb.c         ****         udd_g_ctrlreq.payload = respbuf;
 1871              	 .loc 4 463 31
 1872 010c 064B     	 ldr r3,.L146
 1873 010e 0E4A     	 ldr r2,.L146+32
 1874 0110 9A60     	 str r2,[r3,#8]
 464:usb.c         ****         udd_g_ctrlreq.payload_size = 4;
 1875              	 .loc 4 464 36
 1876 0112 054B     	 ldr r3,.L146
 1877 0114 0422     	 movs r2,#4
 1878 0116 9A81     	 strh r2,[r3,#12]
 465:usb.c         ****         return true;
 1879              	 .loc 4 465 16
 1880 0118 0123     	 movs r3,#1
 1881 011a 00E0     	 b .L143
 1882              	.L135:
 466:usb.c         ****         break;
 467:usb.c         ****     default:
 468:usb.c         ****         return false;
 1883              	 .loc 4 468 16
 1884 011c 0023     	 movs r3,#0
 1885              	.L143:
 1886              	.LBE5:
 469:usb.c         ****     }
 470:usb.c         ****     return false;
 471:usb.c         **** }
 1887              	 .loc 4 471 1
 1888 011e 1846     	 mov r0,r3
 1889 0120 0837     	 adds r7,r7,#8
 1890              	.LCFI71:
 1891              	 .cfi_def_cfa_offset 8
 1892 0122 BD46     	 mov sp,r7
 1893              	.LCFI72:
 1894              	 .cfi_def_cfa_register 13
 1895              	 
 1896 0124 80BD     	 pop {r7,pc}
 1897              	.L147:
 1898 0126 00BF     	 .align 2
 1899              	.L146:
 1900 0128 00000000 	 .word udd_g_ctrlreq
 1901 012c 00000000 	 .word ctrlmemread_buf
 1902 0130 00000000 	 .word ctrlmemread_size
 1903 0134 00000000 	 .word FPGA_lockstatus
 1904 0138 00000000 	 .word FPGA_setlock
 1905 013c 00000940 	 .word 1074331648
 1906 0140 00000000 	 .word ctrl_usart
 1907 0144 00000000 	 .word usart_driver_getchar
 1908 0148 00000000 	 .word respbuf.9297
 1909 014c 00000000 	 .word pio_get_pin_value
 1910              	 .cfi_endproc
 1911              	.LFE207:
 1913              	 .section .text.main_vendor_bulk_in_received,"ax",%progbits
 1914              	 .align 1
 1915              	 .global main_vendor_bulk_in_received
 1916              	 .syntax unified
 1917              	 .thumb
 1918              	 .thumb_func
 1919              	 .fpu softvfp
 1921              	main_vendor_bulk_in_received:
 1922              	.LFB208:
 472:usb.c         **** 
 473:usb.c         **** void main_vendor_bulk_in_received(udd_ep_status_t status,
 474:usb.c         ****                                   iram_size_t nb_transfered, udd_ep_id_t ep)
 475:usb.c         **** {
 1923              	 .loc 4 475 1
 1924              	 .cfi_startproc
 1925              	 
 1926              	 
 1927 0000 80B5     	 push {r7,lr}
 1928              	.LCFI73:
 1929              	 .cfi_def_cfa_offset 8
 1930              	 .cfi_offset 7,-8
 1931              	 .cfi_offset 14,-4
 1932 0002 82B0     	 sub sp,sp,#8
 1933              	.LCFI74:
 1934              	 .cfi_def_cfa_offset 16
 1935 0004 00AF     	 add r7,sp,#0
 1936              	.LCFI75:
 1937              	 .cfi_def_cfa_register 7
 1938 0006 0346     	 mov r3,r0
 1939 0008 3960     	 str r1,[r7]
 1940 000a FB71     	 strb r3,[r7,#7]
 1941 000c 1346     	 mov r3,r2
 1942 000e BB71     	 strb r3,[r7,#6]
 476:usb.c         ****     UNUSED(nb_transfered);
 477:usb.c         ****     UNUSED(ep);
 478:usb.c         ****     if (UDD_EP_TRANSFER_OK != status) {
 1943              	 .loc 4 478 8
 1944 0010 FB79     	 ldrb r3,[r7,#7]
 1945 0012 002B     	 cmp r3,#0
 1946 0014 08D1     	 bne .L151
 479:usb.c         ****         return; // Transfer aborted/error
 480:usb.c         ****     }
 481:usb.c         **** 
 482:usb.c         ****     if (FPGA_lockstatus() == fpga_blockin){
 1947              	 .loc 4 482 9
 1948 0016 064B     	 ldr r3,.L152
 1949 0018 9847     	 blx r3
 1950              	.LVL57:
 1951 001a 0346     	 mov r3,r0
 1952              	 .loc 4 482 8
 1953 001c 022B     	 cmp r3,#2
 1954 001e 04D1     	 bne .L148
 483:usb.c         ****         FPGA_setlock(fpga_unlocked);
 1955              	 .loc 4 483 9
 1956 0020 0020     	 movs r0,#0
 1957 0022 044B     	 ldr r3,.L152+4
 1958 0024 9847     	 blx r3
 1959              	.LVL58:
 1960 0026 00E0     	 b .L148
 1961              	.L151:
 479:usb.c         ****         return; // Transfer aborted/error
 1962              	 .loc 4 479 9
 1963 0028 00BF     	 nop
 1964              	.L148:
 484:usb.c         ****     }
 485:usb.c         **** }
 1965              	 .loc 4 485 1
 1966 002a 0837     	 adds r7,r7,#8
 1967              	.LCFI76:
 1968              	 .cfi_def_cfa_offset 8
 1969 002c BD46     	 mov sp,r7
 1970              	.LCFI77:
 1971              	 .cfi_def_cfa_register 13
 1972              	 
 1973 002e 80BD     	 pop {r7,pc}
 1974              	.L153:
 1975              	 .align 2
 1976              	.L152:
 1977 0030 00000000 	 .word FPGA_lockstatus
 1978 0034 00000000 	 .word FPGA_setlock
 1979              	 .cfi_endproc
 1980              	.LFE208:
 1982              	 .section .text.main_vendor_bulk_out_received,"ax",%progbits
 1983              	 .align 1
 1984              	 .global main_vendor_bulk_out_received
 1985              	 .syntax unified
 1986              	 .thumb
 1987              	 .thumb_func
 1988              	 .fpu softvfp
 1990              	main_vendor_bulk_out_received:
 1991              	.LFB209:
 486:usb.c         **** 
 487:usb.c         **** void main_vendor_bulk_out_received(udd_ep_status_t status,
 488:usb.c         ****                                    iram_size_t nb_transfered, udd_ep_id_t ep)
 489:usb.c         **** {
 1992              	 .loc 4 489 1
 1993              	 .cfi_startproc
 1994              	 
 1995              	 
 1996 0000 80B5     	 push {r7,lr}
 1997              	.LCFI78:
 1998              	 .cfi_def_cfa_offset 8
 1999              	 .cfi_offset 7,-8
 2000              	 .cfi_offset 14,-4
 2001 0002 84B0     	 sub sp,sp,#16
 2002              	.LCFI79:
 2003              	 .cfi_def_cfa_offset 24
 2004 0004 00AF     	 add r7,sp,#0
 2005              	.LCFI80:
 2006              	 .cfi_def_cfa_register 7
 2007 0006 0346     	 mov r3,r0
 2008 0008 3960     	 str r1,[r7]
 2009 000a FB71     	 strb r3,[r7,#7]
 2010 000c 1346     	 mov r3,r2
 2011 000e BB71     	 strb r3,[r7,#6]
 490:usb.c         ****     UNUSED(ep);
 491:usb.c         ****     if (UDD_EP_TRANSFER_OK != status) {
 2012              	 .loc 4 491 8
 2013 0010 FB79     	 ldrb r3,[r7,#7]
 2014 0012 002B     	 cmp r3,#0
 2015 0014 06D0     	 beq .L155
 492:usb.c         ****         // Transfer aborted
 493:usb.c         **** 
 494:usb.c         ****         //restart
 495:usb.c         ****         udi_vendor_bulk_out_run(
 2016              	 .loc 4 495 9
 2017 0016 224A     	 ldr r2,.L163
 2018 0018 4FF48061 	 mov r1,#1024
 2019 001c 2148     	 ldr r0,.L163+4
 2020 001e 224B     	 ldr r3,.L163+8
 2021 0020 9847     	 blx r3
 2022              	.LVL59:
 496:usb.c         ****             main_buf_loopback,
 497:usb.c         ****             sizeof(main_buf_loopback),
 498:usb.c         ****             main_vendor_bulk_out_received);
 499:usb.c         **** 
 500:usb.c         ****         return;
 2023              	 .loc 4 500 9
 2024 0022 39E0     	 b .L154
 2025              	.L155:
 501:usb.c         ****     }
 502:usb.c         **** 
 503:usb.c         ****     if (blockendpoint_usage == bep_emem){
 2026              	 .loc 4 503 29
 2027 0024 214B     	 ldr r3,.L163+12
 2028 0026 1B78     	 ldrb r3,[r3]
 2029              	 .loc 4 503 8
 2030 0028 002B     	 cmp r3,#0
 2031 002a 1AD1     	 bne .L157
 2032              	.LBB7:
 504:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 2033              	 .loc 4 504 26
 2034 002c 0023     	 movs r3,#0
 2035 002e FB60     	 str r3,[r7,#12]
 2036              	 .loc 4 504 9
 2037 0030 0BE0     	 b .L158
 2038              	.L159:
 505:usb.c         ****             xram[i] = main_buf_loopback[i];
 2039              	 .loc 4 505 17 discriminator 3
 2040 0032 1F4B     	 ldr r3,.L163+16
 2041 0034 1A68     	 ldr r2,[r3]
 2042 0036 FB68     	 ldr r3,[r7,#12]
 2043 0038 1344     	 add r3,r3,r2
 2044              	 .loc 4 505 40 discriminator 3
 2045 003a 1A49     	 ldr r1,.L163+4
 2046 003c FA68     	 ldr r2,[r7,#12]
 2047 003e 0A44     	 add r2,r2,r1
 2048 0040 1278     	 ldrb r2,[r2]
 2049              	 .loc 4 505 21 discriminator 3
 2050 0042 1A70     	 strb r2,[r3]
 504:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 2051              	 .loc 4 504 53 discriminator 3
 2052 0044 FB68     	 ldr r3,[r7,#12]
 2053 0046 0133     	 adds r3,r3,#1
 2054 0048 FB60     	 str r3,[r7,#12]
 2055              	.L158:
 504:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 2056              	 .loc 4 504 9 discriminator 1
 2057 004a FA68     	 ldr r2,[r7,#12]
 2058 004c 3B68     	 ldr r3,[r7]
 2059 004e 9A42     	 cmp r2,r3
 2060 0050 EFD3     	 bcc .L159
 2061              	.LBE7:
 506:usb.c         ****         }
 507:usb.c         **** 
 508:usb.c         ****         if (FPGA_lockstatus() == fpga_blockout){
 2062              	 .loc 4 508 13
 2063 0052 184B     	 ldr r3,.L163+20
 2064 0054 9847     	 blx r3
 2065              	.LVL60:
 2066 0056 0346     	 mov r3,r0
 2067              	 .loc 4 508 12
 2068 0058 042B     	 cmp r3,#4
 2069 005a 17D1     	 bne .L160
 509:usb.c         ****             FPGA_releaselock();
 2070              	 .loc 4 509 13
 2071 005c 164B     	 ldr r3,.L163+24
 2072 005e 9847     	 blx r3
 2073              	.LVL61:
 2074 0060 14E0     	 b .L160
 2075              	.L157:
 510:usb.c         ****         }
 511:usb.c         ****     } else if (blockendpoint_usage == bep_fpgabitstream){
 2076              	 .loc 4 511 36
 2077 0062 124B     	 ldr r3,.L163+12
 2078 0064 1B78     	 ldrb r3,[r3]
 2079              	 .loc 4 511 15
 2080 0066 0A2B     	 cmp r3,#10
 2081 0068 10D1     	 bne .L160
 2082              	.LBB8:
 512:usb.c         **** 
 513:usb.c         ****         /* Send byte to FPGA - this could eventually be done via SPI */
 514:usb.c         ****         // TODO: is this dangerous?
 515:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 2083              	 .loc 4 515 26
 2084 006a 0023     	 movs r3,#0
 2085 006c BB60     	 str r3,[r7,#8]
 2086              	 .loc 4 515 9
 2087 006e 09E0     	 b .L161
 2088              	.L162:
 516:usb.c         ****             fpga_program_sendbyte(main_buf_loopback[i]);
 2089              	 .loc 4 516 13 discriminator 3
 2090 0070 0C4A     	 ldr r2,.L163+4
 2091 0072 BB68     	 ldr r3,[r7,#8]
 2092 0074 1344     	 add r3,r3,r2
 2093 0076 1B78     	 ldrb r3,[r3]
 2094 0078 1846     	 mov r0,r3
 2095 007a 104B     	 ldr r3,.L163+28
 2096 007c 9847     	 blx r3
 2097              	.LVL62:
 515:usb.c         ****             fpga_program_sendbyte(main_buf_loopback[i]);
 2098              	 .loc 4 515 53 discriminator 3
 2099 007e BB68     	 ldr r3,[r7,#8]
 2100 0080 0133     	 adds r3,r3,#1
 2101 0082 BB60     	 str r3,[r7,#8]
 2102              	.L161:
 515:usb.c         ****             fpga_program_sendbyte(main_buf_loopback[i]);
 2103              	 .loc 4 515 9 discriminator 1
 2104 0084 BA68     	 ldr r2,[r7,#8]
 2105 0086 3B68     	 ldr r3,[r7]
 2106 0088 9A42     	 cmp r2,r3
 2107 008a F1D3     	 bcc .L162
 2108              	.L160:
 2109              	.LBE8:
 517:usb.c         ****         }
 518:usb.c         **** #if FPGA_USE_BITBANG
 519:usb.c         ****         FPGA_CCLK_LOW();
 520:usb.c         **** #endif
 521:usb.c         ****     }
 522:usb.c         **** 
 523:usb.c         ****     //printf("BULKOUT: %d bytes\n", (int)nb_transfered);
 524:usb.c         **** 
 525:usb.c         ****     udi_vendor_bulk_out_run(
 2110              	 .loc 4 525 5
 2111 008c 044A     	 ldr r2,.L163
 2112 008e 4FF48061 	 mov r1,#1024
 2113 0092 0448     	 ldr r0,.L163+4
 2114 0094 044B     	 ldr r3,.L163+8
 2115 0096 9847     	 blx r3
 2116              	.LVL63:
 2117              	.L154:
 526:usb.c         ****         main_buf_loopback,
 527:usb.c         ****         sizeof(main_buf_loopback),
 528:usb.c         ****         main_vendor_bulk_out_received);
 529:usb.c         **** }
 2118              	 .loc 4 529 1
 2119 0098 1037     	 adds r7,r7,#16
 2120              	.LCFI81:
 2121              	 .cfi_def_cfa_offset 8
 2122 009a BD46     	 mov sp,r7
 2123              	.LCFI82:
 2124              	 .cfi_def_cfa_register 13
 2125              	 
 2126 009c 80BD     	 pop {r7,pc}
 2127              	.L164:
 2128 009e 00BF     	 .align 2
 2129              	.L163:
 2130 00a0 00000000 	 .word main_vendor_bulk_out_received
 2131 00a4 00000000 	 .word main_buf_loopback
 2132 00a8 00000000 	 .word udi_vendor_bulk_out_run
 2133 00ac 00000000 	 .word blockendpoint_usage
 2134 00b0 00000000 	 .word xram
 2135 00b4 00000000 	 .word FPGA_lockstatus
 2136 00b8 00000000 	 .word FPGA_releaselock
 2137 00bc 00000000 	 .word fpga_program_sendbyte
 2138              	 .cfi_endproc
 2139              	.LFE209:
 2141              	 .section .bss.respbuf.9282,"aw",%nobits
 2142              	 .align 2
 2145              	respbuf.9282:
 2146 0000 00000000 	 .space 128
 2146      00000000 
 2146      00000000 
 2146      00000000 
 2146      00000000 
 2147              	 .section .bss.respbuf.9297,"aw",%nobits
 2148              	 .align 2
 2151              	respbuf.9297:
 2152 0000 00000000 	 .space 64
 2152      00000000 
 2152      00000000 
 2152      00000000 
 2152      00000000 
 2153              	 .text
 2154              	.Letext0:
 2155              	 .file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 2156              	 .file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 2157              	 .file 7 ".././hal/sam3u1c/inc/sam3u1c.h"
 2158              	 .file 8 ".././hal/sam3u1c/inc/core_cm3.h"
 2159              	 .file 9 ".././hal/sam3u1c/inc/system_sam3u.h"
 2160              	 .file 10 ".././hal/sam3u1c/inc/component/component_efc.h"
 2161              	 .file 11 ".././hal/sam3u1c/inc/component/component_rstc.h"
 2162              	 .file 12 ".././hal/sam3u1c/inc/component/component_usart.h"
 2163              	 .file 13 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 2164              	 .file 14 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 2165              	 .file 15 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 2166              	 .file 16 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 2167              	 .file 17 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 2168              	 .file 18 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 2169              	 .file 19 ".././hal/sam3u1c/inc/compiler.h"
 2170              	 .file 20 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
 2171              	 .file 21 "./conf_usb.h"
 2172              	 .file 22 ".././hal/sam3u1c/inc/usb_protocol.h"
 2173              	 .file 23 ".././hal/sam3u1c/inc/udi.h"
 2174              	 .file 24 ".././hal/sam3u1c/inc/udc_desc.h"
 2175              	 .file 25 ".././hal/sam3u1c/inc/udd.h"
 2176              	 .file 26 ".././hal/sam3u1c/inc/udi_vendor.h"
 2177              	 .file 27 ".././hal/sam3u1c/inc/stdio_serial.h"
 2178              	 .file 28 ".././hal/sam3u1c/inc/usb.h"
 2179              	 .file 29 "usb_xmem.h"
 2180              	 .file 30 "fpga_program.h"
 2181              	 .file 31 ".././hal/sam3u1c/inc/pio.h"
 2182              	 .file 32 ".././hal/sam3u1c/inc/pmc.h"
 2183              	 .file 33 ".././hal/sam3u1c/inc/efc.h"
 2184              	 .file 34 ".././hal/sam3u1c/inc/ui.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.osc_enable:00000000 $t
    {standard input}:34     .text.osc_enable:00000000 osc_enable
    {standard input}:60     .text.osc_enable:00000014 $d
    {standard input}:68     .text.osc_enable:00000034 $t
    {standard input}:142    .text.osc_enable:00000074 $d
    {standard input}:150    .text.osc_is_ready:00000000 $t
    {standard input}:156    .text.osc_is_ready:00000000 osc_is_ready
    {standard input}:181    .text.osc_is_ready:00000014 $d
    {standard input}:189    .text.osc_is_ready:00000034 $t
    {standard input}:247    .text.osc_is_ready:00000078 $d
    {standard input}:254    .text.osc_wait_ready:00000000 $t
    {standard input}:260    .text.osc_wait_ready:00000000 osc_wait_ready
    {standard input}:310    .text.osc_wait_ready:0000002c $d
    {standard input}:315    .text.udc_detach:00000000 $t
    {standard input}:321    .text.udc_detach:00000000 udc_detach
    {standard input}:346    .text.udc_detach:0000000c $d
    {standard input}:354    .data.g_captureinprogress:00000000 g_captureinprogress
    {standard input}:359    .data.main_b_vendor_enable:00000000 main_b_vendor_enable
    {standard input}:364    .bss.active:00000000 active
    {standard input}:365    .bss.active:00000000 $d
    {standard input}:370    .bss.USB_PWR_STATE:00000000 USB_PWR_STATE
    {standard input}:371    .bss.USB_PWR_STATE:00000000 $d
    {standard input}:373    .bss.main_buf_loopback:00000000 $d
    {standard input}:376    .bss.main_buf_loopback:00000000 main_buf_loopback
    {standard input}:379    .text.main_suspend_action:00000000 $t
    {standard input}:386    .text.main_suspend_action:00000000 main_suspend_action
    {standard input}:415    .text.main_suspend_action:00000014 $d
    {standard input}:421    .text.main_resume_action:00000000 $t
    {standard input}:428    .text.main_resume_action:00000000 main_resume_action
    {standard input}:452    .text.main_resume_action:0000000c $d
    {standard input}:457    .text.main_sof_action:00000000 $t
    {standard input}:464    .text.main_sof_action:00000000 main_sof_action
    {standard input}:506    .text.main_sof_action:00000028 $d
    {standard input}:513    .text.main_vendor_enable:00000000 $t
    {standard input}:520    .text.main_vendor_enable:00000000 main_vendor_enable
    {standard input}:557    .text.main_vendor_enable:00000024 $d
    {standard input}:1990   .text.main_vendor_bulk_out_received:00000000 main_vendor_bulk_out_received
    {standard input}:566    .text.main_vendor_disable:00000000 $t
    {standard input}:573    .text.main_vendor_disable:00000000 main_vendor_disable
    {standard input}:605    .text.main_vendor_disable:00000014 $d
    {standard input}:610    .bss.ctrlbuffer:00000000 $d
    {standard input}:613    .bss.ctrlbuffer:00000000 ctrlbuffer
    {standard input}:618    .bss.blockendpoint_usage:00000000 blockendpoint_usage
    {standard input}:619    .bss.blockendpoint_usage:00000000 $d
    {standard input}:621    .bss.ctrlmemread_buf:00000000 $d
    {standard input}:624    .bss.ctrlmemread_buf:00000000 ctrlmemread_buf
    {standard input}:627    .bss.ctrlmemread_size:00000000 $d
    {standard input}:630    .bss.ctrlmemread_size:00000000 ctrlmemread_size
    {standard input}:633    .text.ctrl_readmem_bulk:00000000 $t
    {standard input}:640    .text.ctrl_readmem_bulk:00000000 ctrl_readmem_bulk
    {standard input}:711    .text.ctrl_readmem_bulk:00000044 $d
    {standard input}:1921   .text.main_vendor_bulk_in_received:00000000 main_vendor_bulk_in_received
    {standard input}:721    .text.ctrl_readmem_ctrl:00000000 $t
    {standard input}:728    .text.ctrl_readmem_ctrl:00000000 ctrl_readmem_ctrl
    {standard input}:800    .text.ctrl_readmem_ctrl:00000044 $d
    {standard input}:810    .text.ctrl_writemem_ctrl:00000000 $t
    {standard input}:817    .text.ctrl_writemem_ctrl:00000000 ctrl_writemem_ctrl
    {standard input}:915    .text.ctrl_writemem_ctrl:00000060 $d
    {standard input}:925    .bss.bulkread_address:00000000 $d
    {standard input}:928    .bss.bulkread_address:00000000 bulkread_address
    {standard input}:931    .bss.bulkread_len:00000000 $d
    {standard input}:934    .bss.bulkread_len:00000000 bulkread_len
    {standard input}:937    .text.ctrl_writemem_bulk:00000000 $t
    {standard input}:944    .text.ctrl_writemem_bulk:00000000 ctrl_writemem_bulk
    {standard input}:1003   .text.ctrl_writemem_bulk:00000030 $d
    {standard input}:1011   .text.ctrl_sam3ucfg_cb:00000000 $t
    {standard input}:1017   .text.ctrl_sam3ucfg_cb:00000000 ctrl_sam3ucfg_cb
    {standard input}:1116   .text.ctrl_sam3ucfg_cb:0000006c $d
    {standard input}:1129   .text.ctrl_progfpga_bulk:00000000 $t
    {standard input}:1136   .text.ctrl_progfpga_bulk:00000000 ctrl_progfpga_bulk
    {standard input}:1199   .text.ctrl_progfpga_bulk:0000003c $d
    {standard input}:1207   .text.ctrl_fpga_reset:00000000 $t
    {standard input}:1214   .text.ctrl_fpga_reset:00000000 ctrl_fpga_reset
    {standard input}:1244   .text.ctrl_fpga_reset:00000014 $d
    {standard input}:1250   .text.ctrl_usart_cb:00000000 $t
    {standard input}:1256   .text.ctrl_usart_cb:00000000 ctrl_usart_cb
    {standard input}:1282   .text.ctrl_usart_cb:00000010 $d
    {standard input}:1288   .text.ctrl_usart_cb_data:00000000 $t
    {standard input}:1294   .text.ctrl_usart_cb_data:00000000 ctrl_usart_cb_data
    {standard input}:1374   .text.ctrl_usart_cb_data:00000048 $d
    {standard input}:1381   .text.ctrl_xmega_program_void:00000000 $t
    {standard input}:1388   .text.ctrl_xmega_program_void:00000000 ctrl_xmega_program_void
    {standard input}:1412   .text.ctrl_xmega_program_void:0000000c $d
    {standard input}:1417   .text.ctrl_avr_program_void:00000000 $t
    {standard input}:1424   .text.ctrl_avr_program_void:00000000 ctrl_avr_program_void
    {standard input}:1448   .text.ctrl_avr_program_void:0000000c $d
    {standard input}:1453   .text.main_setup_out_received:00000000 $t
    {standard input}:1460   .text.main_setup_out_received:00000000 main_setup_out_received
    {standard input}:1502   .text.main_setup_out_received:00000030 $d
    {standard input}:1524   .text.main_setup_out_received:00000088 $t
    {standard input}:1662   .text.main_setup_out_received:0000012c $d
    {standard input}:1679   .text.main_setup_in_received:00000000 $t
    {standard input}:1686   .text.main_setup_in_received:00000000 main_setup_in_received
    {standard input}:1713   .text.main_setup_in_received:00000018 $d
    {standard input}:1723   .text.main_setup_in_received:00000040 $t
    {standard input}:1900   .text.main_setup_in_received:00000128 $d
    {standard input}:2151   .bss.respbuf.9297:00000000 respbuf.9297
    {standard input}:1914   .text.main_vendor_bulk_in_received:00000000 $t
    {standard input}:1977   .text.main_vendor_bulk_in_received:00000030 $d
    {standard input}:1983   .text.main_vendor_bulk_out_received:00000000 $t
    {standard input}:2130   .text.main_vendor_bulk_out_received:000000a0 $d
    {standard input}:2142   .bss.respbuf.9282:00000000 $d
    {standard input}:2145   .bss.respbuf.9282:00000000 respbuf.9282
    {standard input}:2148   .bss.respbuf.9297:00000000 $d
                           .group:00000000 wm4.0.84f01b7600eb36308f16331d3d2e9779
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.48.3fc21f768e842120f151448a98046af0
                           .group:00000000 wm4.cw521.h.62.6f487d78438f1a237b2b554798be063f
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.cycle_counter.h.44.fde38fb1acfd6555d72e65fae6e86af5
                           .group:00000000 wm4.delay.h.105.f2a8ab5e71eab0684cf6985b5c2fc9e8
                           .group:00000000 wm4.efc.h.45.ec5734119c630498df26106bacf9a684
                           .group:00000000 wm4.flash_efc.h.90.a4a39259055880dc10b861c5fe1b99e7
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.sam_gpio.h.50.76a45c51855d665134f8211cd601d693
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.smc.h.45.17a94aa976bb62b1109d03e8a314a569
                           .group:00000000 wm4.spi.h.45.712c66be09ffbac297c2e00923077297
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3
                           .group:00000000 wm4.twi.h.45.ba70de99d200dafba570ce8f7058737a
                           .group:00000000 wm4.twi_master.h.90.08c062d0fa8f8aeea342ceeb79263395
                           .group:00000000 wm4.twi_slave.h.45.8b3d1a3d2e43ebc7d0161f4142989871
                           .group:00000000 wm4.uart.h.45.a5af743b8064bd84d1a6438457096e18
                           .group:00000000 wm4.usart.h.46.eae6fe592b7ea0768efef8d312e7f44f
                           .group:00000000 wm4.conf_uart_serial.h.45.245cdceaa1a3811fd043bf660ce38054
                           .group:00000000 wm4.conf_usb.h.45.2f7207bed7467dcf9cb11fbc6ebe572c
                           .group:00000000 wm4.udi_vendor_conf.h.56.4348c8e521d040f44df868219dae6785
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.genclk.h.45.f7865052b40a907e4bab1a8f483a50e2
                           .group:00000000 wm4.usb.h.20.f560de5b472e2e451b5cba954e5d0064
                           .group:00000000 wm4.usb_xmem.h.16.2bfdefafb315212fe60310212368ffbb
                           .group:00000000 wm4.fpga_program.h.36.190ebe3d8947892068b52cb69c85273d
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd

UNDEFINED SYMBOLS
pmc_switch_sclk_to_32kxtal
pmc_osc_enable_fastrc
pmc_osc_enable_main_xtal
pmc_osc_bypass_main_xtal
pmc_osc_is_ready_32kxtal
pmc_osc_is_ready_fastrc
pmc_osc_is_ready_main_xtal
udd_detach
ui_powerdown
ui_wakeup
udd_get_frame_number
ui_process
udi_vendor_bulk_out_run
FPGA_releaselock
FPGA_setlock
FPGA_setaddr
udi_vendor_bulk_in_run
xram
udd_g_ctrlreq
pmc_switch_mck_to_mainck
pmc_switch_mck_to_pllack
efc_perform_command
fpga_program_setup1
fpga_program_setup2
pio_set_pin_high
pio_set_pin_low
ctrl_usart
usart_driver_putchar
XPROGProtocol_Command
V2Protocol_ProcessCommand
FPGA_lockstatus
usart_driver_getchar
pio_get_pin_value
fpga_program_sendbyte
