   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "usb.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.NVIC_EnableIRQ,"ax",%progbits
  16              	 .align 1
  17              	 .arch armv7-m
  18              	 .syntax unified
  19              	 .thumb
  20              	 .thumb_func
  21              	 .fpu softvfp
  23              	NVIC_EnableIRQ:
  24              	.LFB41:
  25              	 .file 1 ".././hal/sam3u1c/inc/core_cm3.h"
   1:.././hal/sam3u1c/inc/core_cm3.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cm3.h ****  * @file     core_cm3.h
   3:.././hal/sam3u1c/inc/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:.././hal/sam3u1c/inc/core_cm3.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cm3.h ****  * @date     03. February 2012
   6:.././hal/sam3u1c/inc/core_cm3.h ****  *
   7:.././hal/sam3u1c/inc/core_cm3.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cm3.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cm3.h ****  *
  10:.././hal/sam3u1c/inc/core_cm3.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cm3.h ****  *
  15:.././hal/sam3u1c/inc/core_cm3.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cm3.h ****  *
  22:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cm3.h **** #if defined ( __ICCARM__ )
  24:.././hal/sam3u1c/inc/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  26:.././hal/sam3u1c/inc/core_cm3.h **** 
  27:.././hal/sam3u1c/inc/core_cm3.h **** #ifdef __cplusplus
  28:.././hal/sam3u1c/inc/core_cm3.h ****  extern "C" {
  29:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  30:.././hal/sam3u1c/inc/core_cm3.h **** 
  31:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:.././hal/sam3u1c/inc/core_cm3.h **** 
  34:.././hal/sam3u1c/inc/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  35:.././hal/sam3u1c/inc/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  36:.././hal/sam3u1c/inc/core_cm3.h ****   
  37:.././hal/sam3u1c/inc/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  38:.././hal/sam3u1c/inc/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'. 
  39:.././hal/sam3u1c/inc/core_cm3.h **** 
  40:.././hal/sam3u1c/inc/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  41:.././hal/sam3u1c/inc/core_cm3.h ****      Unions are used for effective representation of core registers.
  42:.././hal/sam3u1c/inc/core_cm3.h ****    
  43:.././hal/sam3u1c/inc/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  44:.././hal/sam3u1c/inc/core_cm3.h ****      Function-like macros are used to allow more efficient code. 
  45:.././hal/sam3u1c/inc/core_cm3.h ****  */
  46:.././hal/sam3u1c/inc/core_cm3.h **** 
  47:.././hal/sam3u1c/inc/core_cm3.h **** 
  48:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
  49:.././hal/sam3u1c/inc/core_cm3.h ****  *                 CMSIS definitions
  50:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
  51:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup Cortex_M3
  52:.././hal/sam3u1c/inc/core_cm3.h ****   @{
  53:.././hal/sam3u1c/inc/core_cm3.h ****  */
  54:.././hal/sam3u1c/inc/core_cm3.h **** 
  55:.././hal/sam3u1c/inc/core_cm3.h **** /*  CMSIS CM3 definitions */
  56:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  57:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                   /*!< [15:0]  CMSIS HAL s
  58:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  59:.././hal/sam3u1c/inc/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  60:.././hal/sam3u1c/inc/core_cm3.h **** 
  61:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  62:.././hal/sam3u1c/inc/core_cm3.h **** 
  63:.././hal/sam3u1c/inc/core_cm3.h **** 
  64:.././hal/sam3u1c/inc/core_cm3.h **** #if   defined ( __CC_ARM )
  65:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  66:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  67:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  68:.././hal/sam3u1c/inc/core_cm3.h **** 
  69:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
  70:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  71:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  72:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  73:.././hal/sam3u1c/inc/core_cm3.h **** 
  74:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TMS470__ )
  75:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  76:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  77:.././hal/sam3u1c/inc/core_cm3.h **** 
  78:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __GNUC__ )
  79:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  80:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  81:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  82:.././hal/sam3u1c/inc/core_cm3.h **** 
  83:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TASKING__ )
  84:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  85:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  86:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  87:.././hal/sam3u1c/inc/core_cm3.h **** 
  88:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  89:.././hal/sam3u1c/inc/core_cm3.h **** 
  90:.././hal/sam3u1c/inc/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
  91:.././hal/sam3u1c/inc/core_cm3.h **** */
  92:.././hal/sam3u1c/inc/core_cm3.h **** #define __FPU_USED       0
  93:.././hal/sam3u1c/inc/core_cm3.h **** 
  94:.././hal/sam3u1c/inc/core_cm3.h **** #if defined ( __CC_ARM )
  95:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  96:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  97:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
  98:.././hal/sam3u1c/inc/core_cm3.h **** 
  99:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
 100:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __ARMVFP__
 101:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 102:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 103:.././hal/sam3u1c/inc/core_cm3.h **** 
 104:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TMS470__ )
 105:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 106:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 107:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 108:.././hal/sam3u1c/inc/core_cm3.h **** 
 109:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __GNUC__ )
 110:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 111:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 113:.././hal/sam3u1c/inc/core_cm3.h **** 
 114:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TASKING__ )
 115:.././hal/sam3u1c/inc/core_cm3.h ****     /* add preprocessor checks */
 116:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 117:.././hal/sam3u1c/inc/core_cm3.h **** 
 118:.././hal/sam3u1c/inc/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 119:.././hal/sam3u1c/inc/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 120:.././hal/sam3u1c/inc/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 121:.././hal/sam3u1c/inc/core_cm3.h **** 
 122:.././hal/sam3u1c/inc/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 123:.././hal/sam3u1c/inc/core_cm3.h **** 
 124:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CMSIS_GENERIC
 125:.././hal/sam3u1c/inc/core_cm3.h **** 
 126:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 127:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 128:.././hal/sam3u1c/inc/core_cm3.h **** 
 129:.././hal/sam3u1c/inc/core_cm3.h **** /* check device defines and use defaults */
 130:.././hal/sam3u1c/inc/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 131:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __CM3_REV
 132:.././hal/sam3u1c/inc/core_cm3.h ****     #define __CM3_REV               0x0200
 133:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 134:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 135:.././hal/sam3u1c/inc/core_cm3.h **** 
 136:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __MPU_PRESENT
 137:.././hal/sam3u1c/inc/core_cm3.h ****     #define __MPU_PRESENT             0
 138:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 139:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 140:.././hal/sam3u1c/inc/core_cm3.h **** 
 141:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 142:.././hal/sam3u1c/inc/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 143:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 144:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 145:.././hal/sam3u1c/inc/core_cm3.h **** 
 146:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 147:.././hal/sam3u1c/inc/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 148:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 149:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 150:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 151:.././hal/sam3u1c/inc/core_cm3.h **** 
 152:.././hal/sam3u1c/inc/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 153:.././hal/sam3u1c/inc/core_cm3.h **** /**
 154:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 155:.././hal/sam3u1c/inc/core_cm3.h ****  
 156:.././hal/sam3u1c/inc/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 157:.././hal/sam3u1c/inc/core_cm3.h ****     \li to specify the access to peripheral variables.
 158:.././hal/sam3u1c/inc/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 159:.././hal/sam3u1c/inc/core_cm3.h **** */
 160:.././hal/sam3u1c/inc/core_cm3.h **** #ifdef __cplusplus
 161:.././hal/sam3u1c/inc/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 162:.././hal/sam3u1c/inc/core_cm3.h **** #else
 163:.././hal/sam3u1c/inc/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 164:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 165:.././hal/sam3u1c/inc/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 166:.././hal/sam3u1c/inc/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 167:.././hal/sam3u1c/inc/core_cm3.h **** 
 168:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group Cortex_M3 */
 169:.././hal/sam3u1c/inc/core_cm3.h **** 
 170:.././hal/sam3u1c/inc/core_cm3.h **** 
 171:.././hal/sam3u1c/inc/core_cm3.h **** 
 172:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
 173:.././hal/sam3u1c/inc/core_cm3.h ****  *                 Register Abstraction
 174:.././hal/sam3u1c/inc/core_cm3.h ****   Core Register contain:
 175:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Register
 176:.././hal/sam3u1c/inc/core_cm3.h ****   - Core NVIC Register
 177:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SCB Register
 178:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SysTick Register
 179:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Debug Register
 180:.././hal/sam3u1c/inc/core_cm3.h ****   - Core MPU Register
 181:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
 182:.././hal/sam3u1c/inc/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 183:.././hal/sam3u1c/inc/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 184:.././hal/sam3u1c/inc/core_cm3.h **** */
 185:.././hal/sam3u1c/inc/core_cm3.h **** 
 186:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
 187:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 188:.././hal/sam3u1c/inc/core_cm3.h ****     \brief  Core Register type definitions.
 189:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 190:.././hal/sam3u1c/inc/core_cm3.h ****  */
 191:.././hal/sam3u1c/inc/core_cm3.h **** 
 192:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 193:.././hal/sam3u1c/inc/core_cm3.h ****  */
 194:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 195:.././hal/sam3u1c/inc/core_cm3.h **** {
 196:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 197:.././hal/sam3u1c/inc/core_cm3.h ****   {
 198:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 199:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 200:.././hal/sam3u1c/inc/core_cm3.h **** #else
 201:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 202:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 203:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 204:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 205:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 206:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 207:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 208:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 209:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 210:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 211:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 212:.././hal/sam3u1c/inc/core_cm3.h **** } APSR_Type;
 213:.././hal/sam3u1c/inc/core_cm3.h **** 
 214:.././hal/sam3u1c/inc/core_cm3.h **** 
 215:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 216:.././hal/sam3u1c/inc/core_cm3.h ****  */
 217:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 218:.././hal/sam3u1c/inc/core_cm3.h **** {
 219:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 220:.././hal/sam3u1c/inc/core_cm3.h ****   {
 221:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 222:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 223:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 224:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 225:.././hal/sam3u1c/inc/core_cm3.h **** } IPSR_Type;
 226:.././hal/sam3u1c/inc/core_cm3.h **** 
 227:.././hal/sam3u1c/inc/core_cm3.h **** 
 228:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 229:.././hal/sam3u1c/inc/core_cm3.h ****  */
 230:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 231:.././hal/sam3u1c/inc/core_cm3.h **** {
 232:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 233:.././hal/sam3u1c/inc/core_cm3.h ****   {
 234:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 235:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 236:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 237:.././hal/sam3u1c/inc/core_cm3.h **** #else
 238:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 239:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 240:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 241:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 242:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 243:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 244:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 245:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 246:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 247:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 248:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 249:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 250:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 251:.././hal/sam3u1c/inc/core_cm3.h **** } xPSR_Type;
 252:.././hal/sam3u1c/inc/core_cm3.h **** 
 253:.././hal/sam3u1c/inc/core_cm3.h **** 
 254:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 255:.././hal/sam3u1c/inc/core_cm3.h ****  */
 256:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 257:.././hal/sam3u1c/inc/core_cm3.h **** {
 258:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 259:.././hal/sam3u1c/inc/core_cm3.h ****   {
 260:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 261:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 262:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 263:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 264:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 265:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 266:.././hal/sam3u1c/inc/core_cm3.h **** } CONTROL_Type;
 267:.././hal/sam3u1c/inc/core_cm3.h **** 
 268:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_CORE */
 269:.././hal/sam3u1c/inc/core_cm3.h **** 
 270:.././hal/sam3u1c/inc/core_cm3.h **** 
 271:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
 272:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 273:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 274:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 275:.././hal/sam3u1c/inc/core_cm3.h ****  */
 276:.././hal/sam3u1c/inc/core_cm3.h **** 
 277:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 278:.././hal/sam3u1c/inc/core_cm3.h ****  */
 279:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 280:.././hal/sam3u1c/inc/core_cm3.h **** {
 281:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 282:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[24];
 283:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 284:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RSERVED1[24];
 285:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 286:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[24];
 287:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 288:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED3[24];
 289:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 290:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED4[56];
 291:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 292:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED5[644];
 293:.././hal/sam3u1c/inc/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 294:.././hal/sam3u1c/inc/core_cm3.h **** }  NVIC_Type;
 295:.././hal/sam3u1c/inc/core_cm3.h **** 
 296:.././hal/sam3u1c/inc/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 297:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 298:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 299:.././hal/sam3u1c/inc/core_cm3.h **** 
 300:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 301:.././hal/sam3u1c/inc/core_cm3.h **** 
 302:.././hal/sam3u1c/inc/core_cm3.h **** 
 303:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 304:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 305:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 306:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 307:.././hal/sam3u1c/inc/core_cm3.h ****  */
 308:.././hal/sam3u1c/inc/core_cm3.h **** 
 309:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 310:.././hal/sam3u1c/inc/core_cm3.h ****  */
 311:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 312:.././hal/sam3u1c/inc/core_cm3.h **** {
 313:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 314:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 315:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 316:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 317:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 318:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 319:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 320:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 321:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 322:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 323:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 324:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 325:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 326:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 327:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 328:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 329:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 330:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 331:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 332:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[5];
 333:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 334:.././hal/sam3u1c/inc/core_cm3.h **** } SCB_Type;
 335:.././hal/sam3u1c/inc/core_cm3.h **** 
 336:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB CPUID Register Definitions */
 337:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 338:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 339:.././hal/sam3u1c/inc/core_cm3.h **** 
 340:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 341:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 342:.././hal/sam3u1c/inc/core_cm3.h **** 
 343:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 344:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 345:.././hal/sam3u1c/inc/core_cm3.h **** 
 346:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 347:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 348:.././hal/sam3u1c/inc/core_cm3.h **** 
 349:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 350:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 351:.././hal/sam3u1c/inc/core_cm3.h **** 
 352:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 353:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 354:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 355:.././hal/sam3u1c/inc/core_cm3.h **** 
 356:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 357:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 358:.././hal/sam3u1c/inc/core_cm3.h **** 
 359:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 360:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 361:.././hal/sam3u1c/inc/core_cm3.h **** 
 362:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 363:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 364:.././hal/sam3u1c/inc/core_cm3.h **** 
 365:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 366:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 367:.././hal/sam3u1c/inc/core_cm3.h **** 
 368:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 369:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 370:.././hal/sam3u1c/inc/core_cm3.h **** 
 371:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 372:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 373:.././hal/sam3u1c/inc/core_cm3.h **** 
 374:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 375:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 376:.././hal/sam3u1c/inc/core_cm3.h **** 
 377:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 378:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 379:.././hal/sam3u1c/inc/core_cm3.h **** 
 380:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 381:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 382:.././hal/sam3u1c/inc/core_cm3.h **** 
 383:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 384:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 385:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 386:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 387:.././hal/sam3u1c/inc/core_cm3.h **** 
 388:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 389:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 390:.././hal/sam3u1c/inc/core_cm3.h **** #else
 391:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 392:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 393:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 394:.././hal/sam3u1c/inc/core_cm3.h **** 
 395:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 396:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 397:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 398:.././hal/sam3u1c/inc/core_cm3.h **** 
 399:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 400:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 401:.././hal/sam3u1c/inc/core_cm3.h **** 
 402:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 403:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 404:.././hal/sam3u1c/inc/core_cm3.h **** 
 405:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 406:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 407:.././hal/sam3u1c/inc/core_cm3.h **** 
 408:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 409:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:.././hal/sam3u1c/inc/core_cm3.h **** 
 411:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 412:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:.././hal/sam3u1c/inc/core_cm3.h **** 
 414:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 415:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 416:.././hal/sam3u1c/inc/core_cm3.h **** 
 417:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB System Control Register Definitions */
 418:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 419:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 420:.././hal/sam3u1c/inc/core_cm3.h **** 
 421:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 422:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 423:.././hal/sam3u1c/inc/core_cm3.h **** 
 424:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 425:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 426:.././hal/sam3u1c/inc/core_cm3.h **** 
 427:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 428:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 429:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 430:.././hal/sam3u1c/inc/core_cm3.h **** 
 431:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 432:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 433:.././hal/sam3u1c/inc/core_cm3.h **** 
 434:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 435:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 436:.././hal/sam3u1c/inc/core_cm3.h **** 
 437:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 438:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 439:.././hal/sam3u1c/inc/core_cm3.h **** 
 440:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 441:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 442:.././hal/sam3u1c/inc/core_cm3.h **** 
 443:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 444:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 445:.././hal/sam3u1c/inc/core_cm3.h **** 
 446:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 447:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 448:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 449:.././hal/sam3u1c/inc/core_cm3.h **** 
 450:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 451:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 452:.././hal/sam3u1c/inc/core_cm3.h **** 
 453:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 454:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 455:.././hal/sam3u1c/inc/core_cm3.h **** 
 456:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 457:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:.././hal/sam3u1c/inc/core_cm3.h **** 
 459:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 460:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 461:.././hal/sam3u1c/inc/core_cm3.h **** 
 462:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 463:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 464:.././hal/sam3u1c/inc/core_cm3.h **** 
 465:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 466:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 467:.././hal/sam3u1c/inc/core_cm3.h **** 
 468:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 469:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 470:.././hal/sam3u1c/inc/core_cm3.h **** 
 471:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 472:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 473:.././hal/sam3u1c/inc/core_cm3.h **** 
 474:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 475:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 476:.././hal/sam3u1c/inc/core_cm3.h **** 
 477:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 478:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 479:.././hal/sam3u1c/inc/core_cm3.h **** 
 480:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 481:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 482:.././hal/sam3u1c/inc/core_cm3.h **** 
 483:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 484:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 485:.././hal/sam3u1c/inc/core_cm3.h **** 
 486:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 487:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 488:.././hal/sam3u1c/inc/core_cm3.h **** 
 489:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 490:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 491:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 492:.././hal/sam3u1c/inc/core_cm3.h **** 
 493:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 494:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 495:.././hal/sam3u1c/inc/core_cm3.h **** 
 496:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 497:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 498:.././hal/sam3u1c/inc/core_cm3.h **** 
 499:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 500:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 501:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 502:.././hal/sam3u1c/inc/core_cm3.h **** 
 503:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 504:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 505:.././hal/sam3u1c/inc/core_cm3.h **** 
 506:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 507:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 508:.././hal/sam3u1c/inc/core_cm3.h **** 
 509:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 510:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 511:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 512:.././hal/sam3u1c/inc/core_cm3.h **** 
 513:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 514:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 515:.././hal/sam3u1c/inc/core_cm3.h **** 
 516:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 517:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 518:.././hal/sam3u1c/inc/core_cm3.h **** 
 519:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 520:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 521:.././hal/sam3u1c/inc/core_cm3.h **** 
 522:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 523:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 524:.././hal/sam3u1c/inc/core_cm3.h **** 
 525:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SCB */
 526:.././hal/sam3u1c/inc/core_cm3.h **** 
 527:.././hal/sam3u1c/inc/core_cm3.h **** 
 528:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 529:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 530:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 531:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 532:.././hal/sam3u1c/inc/core_cm3.h ****  */
 533:.././hal/sam3u1c/inc/core_cm3.h **** 
 534:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 535:.././hal/sam3u1c/inc/core_cm3.h ****  */
 536:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 537:.././hal/sam3u1c/inc/core_cm3.h **** {
 538:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[1];
 539:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 540:.././hal/sam3u1c/inc/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 541:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 542:.././hal/sam3u1c/inc/core_cm3.h **** #else
 543:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[1];
 544:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 545:.././hal/sam3u1c/inc/core_cm3.h **** } SCnSCB_Type;
 546:.././hal/sam3u1c/inc/core_cm3.h **** 
 547:.././hal/sam3u1c/inc/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 548:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 549:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 550:.././hal/sam3u1c/inc/core_cm3.h **** 
 551:.././hal/sam3u1c/inc/core_cm3.h **** /* Auxiliary Control Register Definitions */
 552:.././hal/sam3u1c/inc/core_cm3.h **** 
 553:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 554:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 555:.././hal/sam3u1c/inc/core_cm3.h **** 
 556:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 557:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 558:.././hal/sam3u1c/inc/core_cm3.h **** 
 559:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 560:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 561:.././hal/sam3u1c/inc/core_cm3.h **** 
 562:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 563:.././hal/sam3u1c/inc/core_cm3.h **** 
 564:.././hal/sam3u1c/inc/core_cm3.h **** 
 565:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 566:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 567:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 568:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 569:.././hal/sam3u1c/inc/core_cm3.h ****  */
 570:.././hal/sam3u1c/inc/core_cm3.h **** 
 571:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 572:.././hal/sam3u1c/inc/core_cm3.h ****  */
 573:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 574:.././hal/sam3u1c/inc/core_cm3.h **** {
 575:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 576:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 577:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 578:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 579:.././hal/sam3u1c/inc/core_cm3.h **** } SysTick_Type;
 580:.././hal/sam3u1c/inc/core_cm3.h **** 
 581:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 582:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 583:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 584:.././hal/sam3u1c/inc/core_cm3.h **** 
 585:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 586:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 587:.././hal/sam3u1c/inc/core_cm3.h **** 
 588:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 589:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 590:.././hal/sam3u1c/inc/core_cm3.h **** 
 591:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 592:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 593:.././hal/sam3u1c/inc/core_cm3.h **** 
 594:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Reload Register Definitions */
 595:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 596:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 597:.././hal/sam3u1c/inc/core_cm3.h **** 
 598:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Current Register Definitions */
 599:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 600:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 601:.././hal/sam3u1c/inc/core_cm3.h **** 
 602:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Calibration Register Definitions */
 603:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 604:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 605:.././hal/sam3u1c/inc/core_cm3.h **** 
 606:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 607:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 608:.././hal/sam3u1c/inc/core_cm3.h **** 
 609:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 610:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 611:.././hal/sam3u1c/inc/core_cm3.h **** 
 612:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 613:.././hal/sam3u1c/inc/core_cm3.h **** 
 614:.././hal/sam3u1c/inc/core_cm3.h **** 
 615:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 616:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 617:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 618:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 619:.././hal/sam3u1c/inc/core_cm3.h ****  */
 620:.././hal/sam3u1c/inc/core_cm3.h **** 
 621:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 622:.././hal/sam3u1c/inc/core_cm3.h ****  */
 623:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 624:.././hal/sam3u1c/inc/core_cm3.h **** {
 625:.././hal/sam3u1c/inc/core_cm3.h ****   __O  union
 626:.././hal/sam3u1c/inc/core_cm3.h ****   {
 627:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 628:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 629:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 630:.././hal/sam3u1c/inc/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 631:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[864];
 632:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 633:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[15];
 634:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 635:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[15];
 636:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 637:.././hal/sam3u1c/inc/core_cm3.h **** } ITM_Type;
 638:.././hal/sam3u1c/inc/core_cm3.h **** 
 639:.././hal/sam3u1c/inc/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 640:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                          /*!< ITM TPR
 641:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)             /*!< ITM TPR
 642:.././hal/sam3u1c/inc/core_cm3.h **** 
 643:.././hal/sam3u1c/inc/core_cm3.h **** /* ITM Trace Control Register Definitions */
 644:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                          /*!< ITM TCR
 645:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                   /*!< ITM TCR
 646:.././hal/sam3u1c/inc/core_cm3.h **** 
 647:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                          /*!< ITM TCR
 648:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)          /*!< ITM TCR
 649:.././hal/sam3u1c/inc/core_cm3.h **** 
 650:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                          /*!< ITM TCR
 651:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                /*!< ITM TCR
 652:.././hal/sam3u1c/inc/core_cm3.h **** 
 653:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                          /*!< ITM TCR
 654:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)             /*!< ITM TCR
 655:.././hal/sam3u1c/inc/core_cm3.h **** 
 656:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                          /*!< ITM TCR
 657:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                 /*!< ITM TCR
 658:.././hal/sam3u1c/inc/core_cm3.h **** 
 659:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TXENA_Pos                   3                                          /*!< ITM TCR
 660:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TXENA_Msk                  (1UL << ITM_TCR_TXENA_Pos)                  /*!< ITM TCR
 661:.././hal/sam3u1c/inc/core_cm3.h **** 
 662:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                          /*!< ITM TCR
 663:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                /*!< ITM TCR
 664:.././hal/sam3u1c/inc/core_cm3.h **** 
 665:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                          /*!< ITM TCR
 666:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                  /*!< ITM TCR
 667:.././hal/sam3u1c/inc/core_cm3.h **** 
 668:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                          /*!< ITM TCR
 669:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                 /*!< ITM TCR
 670:.././hal/sam3u1c/inc/core_cm3.h **** 
 671:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 672:.././hal/sam3u1c/inc/core_cm3.h **** 
 673:.././hal/sam3u1c/inc/core_cm3.h **** 
 674:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 675:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 676:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 677:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 678:.././hal/sam3u1c/inc/core_cm3.h ****  */
 679:.././hal/sam3u1c/inc/core_cm3.h **** 
 680:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 681:.././hal/sam3u1c/inc/core_cm3.h ****  */
 682:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 683:.././hal/sam3u1c/inc/core_cm3.h **** {
 684:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 685:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 686:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 687:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 688:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 689:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 690:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 691:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 692:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 693:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 694:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 695:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[1];
 696:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 697:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 698:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 699:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[1];
 700:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 701:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 702:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 703:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[1];
 704:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 705:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 706:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 707:.././hal/sam3u1c/inc/core_cm3.h **** } DWT_Type;
 708:.././hal/sam3u1c/inc/core_cm3.h **** 
 709:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Control Register Definitions */
 710:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 711:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 712:.././hal/sam3u1c/inc/core_cm3.h **** 
 713:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 714:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 715:.././hal/sam3u1c/inc/core_cm3.h **** 
 716:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 717:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 718:.././hal/sam3u1c/inc/core_cm3.h **** 
 719:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 720:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 721:.././hal/sam3u1c/inc/core_cm3.h **** 
 722:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 723:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 724:.././hal/sam3u1c/inc/core_cm3.h **** 
 725:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 726:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 727:.././hal/sam3u1c/inc/core_cm3.h **** 
 728:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 729:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 730:.././hal/sam3u1c/inc/core_cm3.h **** 
 731:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 732:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 733:.././hal/sam3u1c/inc/core_cm3.h **** 
 734:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 735:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 736:.././hal/sam3u1c/inc/core_cm3.h **** 
 737:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 738:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 739:.././hal/sam3u1c/inc/core_cm3.h **** 
 740:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 741:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 742:.././hal/sam3u1c/inc/core_cm3.h **** 
 743:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 744:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 745:.././hal/sam3u1c/inc/core_cm3.h **** 
 746:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 747:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 748:.././hal/sam3u1c/inc/core_cm3.h **** 
 749:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 750:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 751:.././hal/sam3u1c/inc/core_cm3.h **** 
 752:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 753:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 754:.././hal/sam3u1c/inc/core_cm3.h **** 
 755:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 756:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 757:.././hal/sam3u1c/inc/core_cm3.h **** 
 758:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 759:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 760:.././hal/sam3u1c/inc/core_cm3.h **** 
 761:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 762:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 763:.././hal/sam3u1c/inc/core_cm3.h **** 
 764:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT CPI Count Register Definitions */
 765:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 766:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 767:.././hal/sam3u1c/inc/core_cm3.h **** 
 768:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 769:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 770:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 771:.././hal/sam3u1c/inc/core_cm3.h **** 
 772:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 773:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 774:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 775:.././hal/sam3u1c/inc/core_cm3.h **** 
 776:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT LSU Count Register Definitions */
 777:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 778:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 779:.././hal/sam3u1c/inc/core_cm3.h **** 
 780:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 781:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 782:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 783:.././hal/sam3u1c/inc/core_cm3.h **** 
 784:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 785:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 786:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 787:.././hal/sam3u1c/inc/core_cm3.h **** 
 788:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 789:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 790:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 791:.././hal/sam3u1c/inc/core_cm3.h **** 
 792:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 793:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 794:.././hal/sam3u1c/inc/core_cm3.h **** 
 795:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 796:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 797:.././hal/sam3u1c/inc/core_cm3.h **** 
 798:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 799:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 800:.././hal/sam3u1c/inc/core_cm3.h **** 
 801:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 802:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 803:.././hal/sam3u1c/inc/core_cm3.h **** 
 804:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 805:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 806:.././hal/sam3u1c/inc/core_cm3.h **** 
 807:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 808:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 809:.././hal/sam3u1c/inc/core_cm3.h **** 
 810:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 811:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 812:.././hal/sam3u1c/inc/core_cm3.h **** 
 813:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 814:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 815:.././hal/sam3u1c/inc/core_cm3.h **** 
 816:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 817:.././hal/sam3u1c/inc/core_cm3.h **** 
 818:.././hal/sam3u1c/inc/core_cm3.h **** 
 819:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 820:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 821:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 822:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 823:.././hal/sam3u1c/inc/core_cm3.h ****  */
 824:.././hal/sam3u1c/inc/core_cm3.h **** 
 825:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 826:.././hal/sam3u1c/inc/core_cm3.h ****  */
 827:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 828:.././hal/sam3u1c/inc/core_cm3.h **** {
 829:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 830:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 831:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[2];
 832:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 833:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[55];
 834:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 835:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[131];
 836:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 837:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 838:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 839:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED3[759];
 840:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 841:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 842:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 843:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED4[1];
 844:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 845:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 846:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 847:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED5[39];
 848:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 849:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 850:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED7[8];
 851:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 852:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 853:.././hal/sam3u1c/inc/core_cm3.h **** } TPI_Type;
 854:.././hal/sam3u1c/inc/core_cm3.h **** 
 855:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 856:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 857:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 858:.././hal/sam3u1c/inc/core_cm3.h **** 
 859:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 860:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 861:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 862:.././hal/sam3u1c/inc/core_cm3.h **** 
 863:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 864:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 865:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 866:.././hal/sam3u1c/inc/core_cm3.h **** 
 867:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 868:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 869:.././hal/sam3u1c/inc/core_cm3.h **** 
 870:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 871:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 872:.././hal/sam3u1c/inc/core_cm3.h **** 
 873:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 874:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 875:.././hal/sam3u1c/inc/core_cm3.h **** 
 876:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 877:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 878:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 879:.././hal/sam3u1c/inc/core_cm3.h **** 
 880:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 881:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 882:.././hal/sam3u1c/inc/core_cm3.h **** 
 883:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 884:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 885:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 886:.././hal/sam3u1c/inc/core_cm3.h **** 
 887:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 888:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 889:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 890:.././hal/sam3u1c/inc/core_cm3.h **** 
 891:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 892:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 893:.././hal/sam3u1c/inc/core_cm3.h **** 
 894:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 895:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 896:.././hal/sam3u1c/inc/core_cm3.h **** 
 897:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 898:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 899:.././hal/sam3u1c/inc/core_cm3.h **** 
 900:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 901:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 902:.././hal/sam3u1c/inc/core_cm3.h **** 
 903:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 904:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 905:.././hal/sam3u1c/inc/core_cm3.h **** 
 906:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 907:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 908:.././hal/sam3u1c/inc/core_cm3.h **** 
 909:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 910:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 911:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 912:.././hal/sam3u1c/inc/core_cm3.h **** 
 913:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 914:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 915:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 916:.././hal/sam3u1c/inc/core_cm3.h **** 
 917:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 918:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 919:.././hal/sam3u1c/inc/core_cm3.h **** 
 920:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 921:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 922:.././hal/sam3u1c/inc/core_cm3.h **** 
 923:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 924:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 925:.././hal/sam3u1c/inc/core_cm3.h **** 
 926:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 927:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 928:.././hal/sam3u1c/inc/core_cm3.h **** 
 929:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 930:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 931:.././hal/sam3u1c/inc/core_cm3.h **** 
 932:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 933:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 934:.././hal/sam3u1c/inc/core_cm3.h **** 
 935:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 936:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 937:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 938:.././hal/sam3u1c/inc/core_cm3.h **** 
 939:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 940:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
 941:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
 942:.././hal/sam3u1c/inc/core_cm3.h **** 
 943:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI DEVID Register Definitions */
 944:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
 945:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
 946:.././hal/sam3u1c/inc/core_cm3.h **** 
 947:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
 948:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
 949:.././hal/sam3u1c/inc/core_cm3.h **** 
 950:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
 951:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
 952:.././hal/sam3u1c/inc/core_cm3.h **** 
 953:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
 954:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
 955:.././hal/sam3u1c/inc/core_cm3.h **** 
 956:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
 957:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
 958:.././hal/sam3u1c/inc/core_cm3.h **** 
 959:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
 960:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
 961:.././hal/sam3u1c/inc/core_cm3.h **** 
 962:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
 963:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
 964:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
 965:.././hal/sam3u1c/inc/core_cm3.h **** 
 966:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
 967:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
 968:.././hal/sam3u1c/inc/core_cm3.h **** 
 969:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
 970:.././hal/sam3u1c/inc/core_cm3.h **** 
 971:.././hal/sam3u1c/inc/core_cm3.h **** 
 972:.././hal/sam3u1c/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
 973:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 974:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 975:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
 976:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 977:.././hal/sam3u1c/inc/core_cm3.h ****  */
 978:.././hal/sam3u1c/inc/core_cm3.h **** 
 979:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 980:.././hal/sam3u1c/inc/core_cm3.h ****  */
 981:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 982:.././hal/sam3u1c/inc/core_cm3.h **** {
 983:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 984:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 985:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 986:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 987:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 988:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 989:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 990:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 991:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 992:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 993:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 994:.././hal/sam3u1c/inc/core_cm3.h **** } MPU_Type;
 995:.././hal/sam3u1c/inc/core_cm3.h **** 
 996:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Type Register */
 997:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 998:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 999:.././hal/sam3u1c/inc/core_cm3.h **** 
1000:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1001:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1002:.././hal/sam3u1c/inc/core_cm3.h **** 
1003:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1004:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1005:.././hal/sam3u1c/inc/core_cm3.h **** 
1006:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Control Register */
1007:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1008:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1009:.././hal/sam3u1c/inc/core_cm3.h **** 
1010:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1011:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1012:.././hal/sam3u1c/inc/core_cm3.h **** 
1013:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1014:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1015:.././hal/sam3u1c/inc/core_cm3.h **** 
1016:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Number Register */
1017:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1018:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1019:.././hal/sam3u1c/inc/core_cm3.h **** 
1020:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Base Address Register */
1021:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1022:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1023:.././hal/sam3u1c/inc/core_cm3.h **** 
1024:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1025:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1026:.././hal/sam3u1c/inc/core_cm3.h **** 
1027:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1028:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1029:.././hal/sam3u1c/inc/core_cm3.h **** 
1030:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Attribute and Size Register */
1031:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1032:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1033:.././hal/sam3u1c/inc/core_cm3.h **** 
1034:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1035:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1036:.././hal/sam3u1c/inc/core_cm3.h **** 
1037:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1038:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1039:.././hal/sam3u1c/inc/core_cm3.h **** 
1040:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1041:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1042:.././hal/sam3u1c/inc/core_cm3.h **** 
1043:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_MPU */
1044:.././hal/sam3u1c/inc/core_cm3.h **** #endif
1045:.././hal/sam3u1c/inc/core_cm3.h **** 
1046:.././hal/sam3u1c/inc/core_cm3.h **** 
1047:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
1048:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1049:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1050:.././hal/sam3u1c/inc/core_cm3.h ****   @{
1051:.././hal/sam3u1c/inc/core_cm3.h ****  */
1052:.././hal/sam3u1c/inc/core_cm3.h **** 
1053:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1054:.././hal/sam3u1c/inc/core_cm3.h ****  */
1055:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
1056:.././hal/sam3u1c/inc/core_cm3.h **** {
1057:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1058:.././hal/sam3u1c/inc/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1059:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1060:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1061:.././hal/sam3u1c/inc/core_cm3.h **** } CoreDebug_Type;
1062:.././hal/sam3u1c/inc/core_cm3.h **** 
1063:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Halting Control and Status Register */
1064:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1065:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1066:.././hal/sam3u1c/inc/core_cm3.h **** 
1067:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1068:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1069:.././hal/sam3u1c/inc/core_cm3.h **** 
1070:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1071:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1072:.././hal/sam3u1c/inc/core_cm3.h **** 
1073:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1074:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1075:.././hal/sam3u1c/inc/core_cm3.h **** 
1076:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1077:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1078:.././hal/sam3u1c/inc/core_cm3.h **** 
1079:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1080:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1081:.././hal/sam3u1c/inc/core_cm3.h **** 
1082:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1083:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1084:.././hal/sam3u1c/inc/core_cm3.h **** 
1085:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1086:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1087:.././hal/sam3u1c/inc/core_cm3.h **** 
1088:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1089:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1090:.././hal/sam3u1c/inc/core_cm3.h **** 
1091:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1092:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1093:.././hal/sam3u1c/inc/core_cm3.h **** 
1094:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1095:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1096:.././hal/sam3u1c/inc/core_cm3.h **** 
1097:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1098:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1099:.././hal/sam3u1c/inc/core_cm3.h **** 
1100:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Core Register Selector Register */
1101:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1102:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1103:.././hal/sam3u1c/inc/core_cm3.h **** 
1104:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1105:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1106:.././hal/sam3u1c/inc/core_cm3.h **** 
1107:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1108:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1109:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1110:.././hal/sam3u1c/inc/core_cm3.h **** 
1111:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1112:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1113:.././hal/sam3u1c/inc/core_cm3.h **** 
1114:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1115:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1116:.././hal/sam3u1c/inc/core_cm3.h **** 
1117:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1118:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1119:.././hal/sam3u1c/inc/core_cm3.h **** 
1120:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1121:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1122:.././hal/sam3u1c/inc/core_cm3.h **** 
1123:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1124:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1125:.././hal/sam3u1c/inc/core_cm3.h **** 
1126:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1127:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1128:.././hal/sam3u1c/inc/core_cm3.h **** 
1129:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1130:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1131:.././hal/sam3u1c/inc/core_cm3.h **** 
1132:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1133:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1134:.././hal/sam3u1c/inc/core_cm3.h **** 
1135:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1136:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1137:.././hal/sam3u1c/inc/core_cm3.h **** 
1138:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1139:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1140:.././hal/sam3u1c/inc/core_cm3.h **** 
1141:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1142:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1143:.././hal/sam3u1c/inc/core_cm3.h **** 
1144:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1145:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1146:.././hal/sam3u1c/inc/core_cm3.h **** 
1147:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1148:.././hal/sam3u1c/inc/core_cm3.h **** 
1149:.././hal/sam3u1c/inc/core_cm3.h **** 
1150:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
1151:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1152:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1153:.././hal/sam3u1c/inc/core_cm3.h ****   @{
1154:.././hal/sam3u1c/inc/core_cm3.h ****  */
1155:.././hal/sam3u1c/inc/core_cm3.h **** 
1156:.././hal/sam3u1c/inc/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1157:.././hal/sam3u1c/inc/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1158:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1159:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1160:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1161:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1162:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1163:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1164:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1165:.././hal/sam3u1c/inc/core_cm3.h **** 
1166:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1167:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1168:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1169:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1170:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1171:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1172:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1173:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1174:.././hal/sam3u1c/inc/core_cm3.h **** 
1175:.././hal/sam3u1c/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
1176:.././hal/sam3u1c/inc/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1177:.././hal/sam3u1c/inc/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1178:.././hal/sam3u1c/inc/core_cm3.h **** #endif
1179:.././hal/sam3u1c/inc/core_cm3.h **** 
1180:.././hal/sam3u1c/inc/core_cm3.h **** /*@} */
1181:.././hal/sam3u1c/inc/core_cm3.h **** 
1182:.././hal/sam3u1c/inc/core_cm3.h **** 
1183:.././hal/sam3u1c/inc/core_cm3.h **** 
1184:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
1185:.././hal/sam3u1c/inc/core_cm3.h ****  *                Hardware Abstraction Layer
1186:.././hal/sam3u1c/inc/core_cm3.h ****   Core Function Interface contains:
1187:.././hal/sam3u1c/inc/core_cm3.h ****   - Core NVIC Functions
1188:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SysTick Functions
1189:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Debug Functions
1190:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Register Access Functions
1191:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
1192:.././hal/sam3u1c/inc/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1193:.././hal/sam3u1c/inc/core_cm3.h **** */
1194:.././hal/sam3u1c/inc/core_cm3.h **** 
1195:.././hal/sam3u1c/inc/core_cm3.h **** 
1196:.././hal/sam3u1c/inc/core_cm3.h **** 
1197:.././hal/sam3u1c/inc/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1198:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1199:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1200:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1201:.././hal/sam3u1c/inc/core_cm3.h ****     @{
1202:.././hal/sam3u1c/inc/core_cm3.h ****  */
1203:.././hal/sam3u1c/inc/core_cm3.h **** 
1204:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Priority Grouping
1205:.././hal/sam3u1c/inc/core_cm3.h **** 
1206:.././hal/sam3u1c/inc/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1207:.././hal/sam3u1c/inc/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1208:.././hal/sam3u1c/inc/core_cm3.h ****   Only values from 0..7 are used.
1209:.././hal/sam3u1c/inc/core_cm3.h ****   In case of a conflict between priority grouping and available
1210:.././hal/sam3u1c/inc/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1211:.././hal/sam3u1c/inc/core_cm3.h **** 
1212:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1213:.././hal/sam3u1c/inc/core_cm3.h ****  */
1214:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1215:.././hal/sam3u1c/inc/core_cm3.h **** {
1216:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t reg_value;
1217:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1218:.././hal/sam3u1c/inc/core_cm3.h **** 
1219:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1220:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1221:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value  =  (reg_value                                 |
1222:.././hal/sam3u1c/inc/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1223:.././hal/sam3u1c/inc/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1224:.././hal/sam3u1c/inc/core_cm3.h ****   SCB->AIRCR =  reg_value;
1225:.././hal/sam3u1c/inc/core_cm3.h **** }
1226:.././hal/sam3u1c/inc/core_cm3.h **** 
1227:.././hal/sam3u1c/inc/core_cm3.h **** 
1228:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Priority Grouping
1229:.././hal/sam3u1c/inc/core_cm3.h **** 
1230:.././hal/sam3u1c/inc/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1231:.././hal/sam3u1c/inc/core_cm3.h **** 
1232:.././hal/sam3u1c/inc/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1233:.././hal/sam3u1c/inc/core_cm3.h ****  */
1234:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1235:.././hal/sam3u1c/inc/core_cm3.h **** {
1236:.././hal/sam3u1c/inc/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1237:.././hal/sam3u1c/inc/core_cm3.h **** }
1238:.././hal/sam3u1c/inc/core_cm3.h **** 
1239:.././hal/sam3u1c/inc/core_cm3.h **** 
1240:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Enable External Interrupt
1241:.././hal/sam3u1c/inc/core_cm3.h **** 
1242:.././hal/sam3u1c/inc/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1243:.././hal/sam3u1c/inc/core_cm3.h **** 
1244:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1245:.././hal/sam3u1c/inc/core_cm3.h ****  */
1246:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1247:.././hal/sam3u1c/inc/core_cm3.h **** {
  26              	 .loc 1 1247 1
  27              	 .cfi_startproc
  28              	 
  29              	 
  30              	 
  31 0000 80B4     	 push {r7}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 4
  34              	 .cfi_offset 7,-4
  35 0002 83B0     	 sub sp,sp,#12
  36              	.LCFI1:
  37              	 .cfi_def_cfa_offset 16
  38 0004 00AF     	 add r7,sp,#0
  39              	.LCFI2:
  40              	 .cfi_def_cfa_register 7
  41 0006 0346     	 mov r3,r0
  42 0008 FB71     	 strb r3,[r7,#7]
1248:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  43              	 .loc 1 1248 65
  44 000a FB79     	 ldrb r3,[r7,#7]
  45 000c 03F01F03 	 and r3,r3,#31
  46              	 .loc 1 1248 44
  47 0010 0122     	 movs r2,#1
  48 0012 02FA03F1 	 lsl r1,r2,r3
  49              	 .loc 1 1248 7
  50 0016 054A     	 ldr r2,.L2
  51              	 .loc 1 1248 15
  52 0018 97F90730 	 ldrsb r3,[r7,#7]
  53              	 .loc 1 1248 32
  54 001c 5B09     	 lsrs r3,r3,#5
  55              	 .loc 1 1248 39
  56 001e 42F82310 	 str r1,[r2,r3,lsl#2]
1249:.././hal/sam3u1c/inc/core_cm3.h **** }
  57              	 .loc 1 1249 1
  58 0022 00BF     	 nop
  59 0024 0C37     	 adds r7,r7,#12
  60              	.LCFI3:
  61              	 .cfi_def_cfa_offset 4
  62 0026 BD46     	 mov sp,r7
  63              	.LCFI4:
  64              	 .cfi_def_cfa_register 13
  65              	 
  66 0028 80BC     	 pop {r7}
  67              	.LCFI5:
  68              	 .cfi_restore 7
  69              	 .cfi_def_cfa_offset 0
  70 002a 7047     	 bx lr
  71              	.L3:
  72              	 .align 2
  73              	.L2:
  74 002c 00E100E0 	 .word -536813312
  75              	 .cfi_endproc
  76              	.LFE41:
  78              	 .section .text.NVIC_ClearPendingIRQ,"ax",%progbits
  79              	 .align 1
  80              	 .syntax unified
  81              	 .thumb
  82              	 .thumb_func
  83              	 .fpu softvfp
  85              	NVIC_ClearPendingIRQ:
  86              	.LFB45:
1250:.././hal/sam3u1c/inc/core_cm3.h **** 
1251:.././hal/sam3u1c/inc/core_cm3.h **** 
1252:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Disable External Interrupt
1253:.././hal/sam3u1c/inc/core_cm3.h **** 
1254:.././hal/sam3u1c/inc/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1255:.././hal/sam3u1c/inc/core_cm3.h **** 
1256:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1257:.././hal/sam3u1c/inc/core_cm3.h ****  */
1258:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1259:.././hal/sam3u1c/inc/core_cm3.h **** {
1260:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1261:.././hal/sam3u1c/inc/core_cm3.h **** }
1262:.././hal/sam3u1c/inc/core_cm3.h **** 
1263:.././hal/sam3u1c/inc/core_cm3.h **** 
1264:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Pending Interrupt
1265:.././hal/sam3u1c/inc/core_cm3.h **** 
1266:.././hal/sam3u1c/inc/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1267:.././hal/sam3u1c/inc/core_cm3.h ****     for the specified interrupt.
1268:.././hal/sam3u1c/inc/core_cm3.h **** 
1269:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1270:.././hal/sam3u1c/inc/core_cm3.h ****     
1271:.././hal/sam3u1c/inc/core_cm3.h ****     \return             0  Interrupt status is not pending.
1272:.././hal/sam3u1c/inc/core_cm3.h ****     \return             1  Interrupt status is pending.
1273:.././hal/sam3u1c/inc/core_cm3.h ****  */
1274:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1275:.././hal/sam3u1c/inc/core_cm3.h **** {
1276:.././hal/sam3u1c/inc/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1277:.././hal/sam3u1c/inc/core_cm3.h **** }
1278:.././hal/sam3u1c/inc/core_cm3.h **** 
1279:.././hal/sam3u1c/inc/core_cm3.h **** 
1280:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Pending Interrupt
1281:.././hal/sam3u1c/inc/core_cm3.h **** 
1282:.././hal/sam3u1c/inc/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1283:.././hal/sam3u1c/inc/core_cm3.h **** 
1284:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1285:.././hal/sam3u1c/inc/core_cm3.h ****  */
1286:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1287:.././hal/sam3u1c/inc/core_cm3.h **** {
1288:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1289:.././hal/sam3u1c/inc/core_cm3.h **** }
1290:.././hal/sam3u1c/inc/core_cm3.h **** 
1291:.././hal/sam3u1c/inc/core_cm3.h **** 
1292:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Clear Pending Interrupt
1293:.././hal/sam3u1c/inc/core_cm3.h **** 
1294:.././hal/sam3u1c/inc/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1295:.././hal/sam3u1c/inc/core_cm3.h **** 
1296:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1297:.././hal/sam3u1c/inc/core_cm3.h ****  */
1298:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1299:.././hal/sam3u1c/inc/core_cm3.h **** {
  87              	 .loc 1 1299 1
  88              	 .cfi_startproc
  89              	 
  90              	 
  91              	 
  92 0000 80B4     	 push {r7}
  93              	.LCFI6:
  94              	 .cfi_def_cfa_offset 4
  95              	 .cfi_offset 7,-4
  96 0002 83B0     	 sub sp,sp,#12
  97              	.LCFI7:
  98              	 .cfi_def_cfa_offset 16
  99 0004 00AF     	 add r7,sp,#0
 100              	.LCFI8:
 101              	 .cfi_def_cfa_register 7
 102 0006 0346     	 mov r3,r0
 103 0008 FB71     	 strb r3,[r7,#7]
1300:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 104              	 .loc 1 1300 65
 105 000a FB79     	 ldrb r3,[r7,#7]
 106 000c 03F01F03 	 and r3,r3,#31
 107              	 .loc 1 1300 44
 108 0010 0122     	 movs r2,#1
 109 0012 02FA03F1 	 lsl r1,r2,r3
 110              	 .loc 1 1300 7
 111 0016 064A     	 ldr r2,.L5
 112              	 .loc 1 1300 15
 113 0018 97F90730 	 ldrsb r3,[r7,#7]
 114              	 .loc 1 1300 32
 115 001c 5B09     	 lsrs r3,r3,#5
 116              	 .loc 1 1300 39
 117 001e 6033     	 adds r3,r3,#96
 118 0020 42F82310 	 str r1,[r2,r3,lsl#2]
1301:.././hal/sam3u1c/inc/core_cm3.h **** }
 119              	 .loc 1 1301 1
 120 0024 00BF     	 nop
 121 0026 0C37     	 adds r7,r7,#12
 122              	.LCFI9:
 123              	 .cfi_def_cfa_offset 4
 124 0028 BD46     	 mov sp,r7
 125              	.LCFI10:
 126              	 .cfi_def_cfa_register 13
 127              	 
 128 002a 80BC     	 pop {r7}
 129              	.LCFI11:
 130              	 .cfi_restore 7
 131              	 .cfi_def_cfa_offset 0
 132 002c 7047     	 bx lr
 133              	.L6:
 134 002e 00BF     	 .align 2
 135              	.L5:
 136 0030 00E100E0 	 .word -536813312
 137              	 .cfi_endproc
 138              	.LFE45:
 140              	 .section .text.NVIC_SetPriority,"ax",%progbits
 141              	 .align 1
 142              	 .syntax unified
 143              	 .thumb
 144              	 .thumb_func
 145              	 .fpu softvfp
 147              	NVIC_SetPriority:
 148              	.LFB47:
1302:.././hal/sam3u1c/inc/core_cm3.h **** 
1303:.././hal/sam3u1c/inc/core_cm3.h **** 
1304:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Active Interrupt
1305:.././hal/sam3u1c/inc/core_cm3.h **** 
1306:.././hal/sam3u1c/inc/core_cm3.h ****     The function reads the active register in NVIC and returns the active bit.
1307:.././hal/sam3u1c/inc/core_cm3.h ****     
1308:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1309:.././hal/sam3u1c/inc/core_cm3.h ****     
1310:.././hal/sam3u1c/inc/core_cm3.h ****     \return             0  Interrupt status is not active.
1311:.././hal/sam3u1c/inc/core_cm3.h ****     \return             1  Interrupt status is active.
1312:.././hal/sam3u1c/inc/core_cm3.h ****  */
1313:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1314:.././hal/sam3u1c/inc/core_cm3.h **** {
1315:.././hal/sam3u1c/inc/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1316:.././hal/sam3u1c/inc/core_cm3.h **** }
1317:.././hal/sam3u1c/inc/core_cm3.h **** 
1318:.././hal/sam3u1c/inc/core_cm3.h **** 
1319:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Interrupt Priority
1320:.././hal/sam3u1c/inc/core_cm3.h **** 
1321:.././hal/sam3u1c/inc/core_cm3.h ****     The function sets the priority of an interrupt. 
1322:.././hal/sam3u1c/inc/core_cm3.h **** 
1323:.././hal/sam3u1c/inc/core_cm3.h ****     \note The priority cannot be set for every core interrupt.
1324:.././hal/sam3u1c/inc/core_cm3.h **** 
1325:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number. 
1326:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]  priority  Priority to set.
1327:.././hal/sam3u1c/inc/core_cm3.h ****  */
1328:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1329:.././hal/sam3u1c/inc/core_cm3.h **** {
 149              	 .loc 1 1329 1
 150              	 .cfi_startproc
 151              	 
 152              	 
 153              	 
 154 0000 80B4     	 push {r7}
 155              	.LCFI12:
 156              	 .cfi_def_cfa_offset 4
 157              	 .cfi_offset 7,-4
 158 0002 83B0     	 sub sp,sp,#12
 159              	.LCFI13:
 160              	 .cfi_def_cfa_offset 16
 161 0004 00AF     	 add r7,sp,#0
 162              	.LCFI14:
 163              	 .cfi_def_cfa_register 7
 164 0006 0346     	 mov r3,r0
 165 0008 3960     	 str r1,[r7]
 166 000a FB71     	 strb r3,[r7,#7]
1330:.././hal/sam3u1c/inc/core_cm3.h ****   if(IRQn < 0) {
 167              	 .loc 1 1330 5
 168 000c 97F90730 	 ldrsb r3,[r7,#7]
 169 0010 002B     	 cmp r3,#0
 170 0012 0BDA     	 bge .L8
1331:.././hal/sam3u1c/inc/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 171              	 .loc 1 1331 55
 172 0014 3B68     	 ldr r3,[r7]
 173 0016 DAB2     	 uxtb r2,r3
 174              	 .loc 1 1331 8
 175 0018 0C49     	 ldr r1,.L11
 176              	 .loc 1 1331 32
 177 001a FB79     	 ldrb r3,[r7,#7]
 178 001c 03F00F03 	 and r3,r3,#15
 179              	 .loc 1 1331 38
 180 0020 043B     	 subs r3,r3,#4
 181              	 .loc 1 1331 55
 182 0022 1201     	 lsls r2,r2,#4
 183 0024 D2B2     	 uxtb r2,r2
 184              	 .loc 1 1331 42
 185 0026 0B44     	 add r3,r3,r1
 186 0028 1A76     	 strb r2,[r3,#24]
1332:.././hal/sam3u1c/inc/core_cm3.h ****   else {
1333:.././hal/sam3u1c/inc/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1334:.././hal/sam3u1c/inc/core_cm3.h **** }
 187              	 .loc 1 1334 1
 188 002a 09E0     	 b .L10
 189              	.L8:
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 190              	 .loc 1 1333 45
 191 002c 3B68     	 ldr r3,[r7]
 192 002e DAB2     	 uxtb r2,r3
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 193              	 .loc 1 1333 9
 194 0030 0749     	 ldr r1,.L11+4
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 195              	 .loc 1 1333 14
 196 0032 97F90730 	 ldrsb r3,[r7,#7]
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 197              	 .loc 1 1333 45
 198 0036 1201     	 lsls r2,r2,#4
 199 0038 D2B2     	 uxtb r2,r2
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 200              	 .loc 1 1333 32
 201 003a 0B44     	 add r3,r3,r1
 202 003c 83F80023 	 strb r2,[r3,#768]
 203              	.L10:
 204              	 .loc 1 1334 1
 205 0040 00BF     	 nop
 206 0042 0C37     	 adds r7,r7,#12
 207              	.LCFI15:
 208              	 .cfi_def_cfa_offset 4
 209 0044 BD46     	 mov sp,r7
 210              	.LCFI16:
 211              	 .cfi_def_cfa_register 13
 212              	 
 213 0046 80BC     	 pop {r7}
 214              	.LCFI17:
 215              	 .cfi_restore 7
 216              	 .cfi_def_cfa_offset 0
 217 0048 7047     	 bx lr
 218              	.L12:
 219 004a 00BF     	 .align 2
 220              	.L11:
 221 004c 00ED00E0 	 .word -536810240
 222 0050 00E100E0 	 .word -536813312
 223              	 .cfi_endproc
 224              	.LFE47:
 226              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
 227              	 .align 2
 230              	cpu_irq_critical_section_counter:
 231 0000 00000000 	 .space 4
 232              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
 235              	cpu_irq_prev_interrupt_state:
 236 0000 00       	 .space 1
 237              	 .section .text.osc_enable,"ax",%progbits
 238              	 .align 1
 239              	 .syntax unified
 240              	 .thumb
 241              	 .thumb_func
 242              	 .fpu softvfp
 244              	osc_enable:
 245              	.LFB69:
 246              	 .file 2 ".././hal/sam3u1c/inc/sam3u/osc.h"
   1:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \brief Chip-specific oscillator management functions.
   5:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  44:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/osc.h **** #define CHIP_OSC_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  47:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "board.h"
  48:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "pmc.h"
  49:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  50:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/sam3u/osc.h **** extern "C" {
  54:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  55:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @endcond
  57:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  58:.././hal/sam3u1c/inc/sam3u/osc.h **** /*
  59:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Below BOARD_XXX macros are related to the specific board, and
  60:.././hal/sam3u1c/inc/sam3u/osc.h ****  * should be defined by the board code, otherwise default value are used.
  61:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  62:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_XTAL)
  63:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock xtal frequency has not been defined.
  64:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_XTAL      (32768UL)
  65:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  66:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  67:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_BYPASS)
  68:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock bypass frequency has not been defined.
  69:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_BYPASS    (32768UL)
  70:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  71:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  72:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_XTAL)
  73:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal frequency has not been defined.
  74:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_XTAL    (12000000UL)
  75:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  76:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  77:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_BYPASS)
  78:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock bypass frequency has not been defined.
  79:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_BYPASS  (12000000UL)
  80:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  81:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  82:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_OSC_STARTUP_US)
  83:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal startup time has not been defined.
  84:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_OSC_STARTUP_US      (15625UL)
  85:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  86:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  87:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
  88:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \weakgroup osc_group
  89:.././hal/sam3u1c/inc/sam3u/osc.h ****  * @{
  90:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  91:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  92:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator identifiers
  93:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
  94:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC             0    //!< Internal 32kHz RC oscillator.
  95:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL           1    //!< External 32kHz crystal oscillator.
  96:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS         2    //!< External 32kHz bypass oscillator.
  97:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC            3    //!< Internal 4MHz RC oscillator.
  98:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC            4    //!< Internal 8MHz RC oscillator.
  99:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC           5    //!< Internal 12MHz RC oscillator.
 100:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL             6    //!< External crystal oscillator.
 101:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS           7    //!< External bypass oscillator.
 102:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 103:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 104:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator clock speed in hertz
 105:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
 106:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC_HZ          CHIP_FREQ_SLCK_RC               //!< Internal 32kHz RC oscillat
 107:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL_HZ        BOARD_FREQ_SLCK_XTAL            //!< External 32kHz crystal osc
 108:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS_HZ      BOARD_FREQ_SLCK_BYPASS          //!< External 32kHz bypass osci
 109:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC_HZ         CHIP_FREQ_MAINCK_RC_4MHZ        //!< Internal 4MHz RC oscillato
 110:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC_HZ         CHIP_FREQ_MAINCK_RC_8MHZ        //!< Internal 8MHz RC oscillato
 111:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC_HZ        CHIP_FREQ_MAINCK_RC_12MHZ       //!< Internal 12MHz RC oscillat
 112:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillato
 113:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator
 114:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 115:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 116:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_enable(uint32_t ul_id)
 117:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 247              	 .loc 2 117 1
 248              	 .cfi_startproc
 249              	 
 250              	 
 251 0000 80B5     	 push {r7,lr}
 252              	.LCFI18:
 253              	 .cfi_def_cfa_offset 8
 254              	 .cfi_offset 7,-8
 255              	 .cfi_offset 14,-4
 256 0002 82B0     	 sub sp,sp,#8
 257              	.LCFI19:
 258              	 .cfi_def_cfa_offset 16
 259 0004 00AF     	 add r7,sp,#0
 260              	.LCFI20:
 261              	 .cfi_def_cfa_register 7
 262 0006 7860     	 str r0,[r7,#4]
 263 0008 7B68     	 ldr r3,[r7,#4]
 264 000a 072B     	 cmp r3,#7
 265 000c 2ED8     	 bhi .L24
 266 000e 01A2     	 adr r2,.L16
 267 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 268              	 .p2align 2
 269              	.L16:
 270 0014 6B000000 	 .word .L25+1
 271 0018 35000000 	 .word .L22+1
 272 001c 3D000000 	 .word .L21+1
 273 0020 45000000 	 .word .L20+1
 274 0024 4D000000 	 .word .L19+1
 275 0028 55000000 	 .word .L18+1
 276 002c 5D000000 	 .word .L17+1
 277 0030 65000000 	 .word .L15+1
 278              	 .p2align 1
 279              	.L22:
 118:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 119:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 121:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 122:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 123:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
 280              	 .loc 2 123 3
 281 0034 0020     	 movs r0,#0
 282 0036 0F4B     	 ldr r3,.L26
 283 0038 9847     	 blx r3
 284              	.LVL0:
 124:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 285              	 .loc 2 124 3
 286 003a 17E0     	 b .L14
 287              	.L21:
 125:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 127:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
 288              	 .loc 2 127 3
 289 003c 0120     	 movs r0,#1
 290 003e 0D4B     	 ldr r3,.L26
 291 0040 9847     	 blx r3
 292              	.LVL1:
 128:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 293              	 .loc 2 128 3
 294 0042 13E0     	 b .L14
 295              	.L20:
 129:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 130:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 131:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 132:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
 296              	 .loc 2 132 3
 297 0044 0020     	 movs r0,#0
 298 0046 0C4B     	 ldr r3,.L26+4
 299 0048 9847     	 blx r3
 300              	.LVL2:
 133:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 301              	 .loc 2 133 3
 302 004a 0FE0     	 b .L14
 303              	.L19:
 134:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 135:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 136:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
 304              	 .loc 2 136 3
 305 004c 1020     	 movs r0,#16
 306 004e 0A4B     	 ldr r3,.L26+4
 307 0050 9847     	 blx r3
 308              	.LVL3:
 137:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 309              	 .loc 2 137 3
 310 0052 0BE0     	 b .L14
 311              	.L18:
 138:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 139:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 140:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
 312              	 .loc 2 140 3
 313 0054 2020     	 movs r0,#32
 314 0056 084B     	 ldr r3,.L26+4
 315 0058 9847     	 blx r3
 316              	.LVL4:
 141:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 317              	 .loc 2 141 3
 318 005a 07E0     	 b .L14
 319              	.L17:
 142:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 143:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 144:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 145:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
 320              	 .loc 2 145 3
 321 005c 3E20     	 movs r0,#62
 322 005e 074B     	 ldr r3,.L26+8
 323 0060 9847     	 blx r3
 324              	.LVL5:
 146:.././hal/sam3u1c/inc/sam3u/osc.h **** 				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
 147:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 325              	 .loc 2 147 3
 326 0062 03E0     	 b .L14
 327              	.L15:
 148:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 149:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 150:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_bypass_main_xtal();
 328              	 .loc 2 150 3
 329 0064 064B     	 ldr r3,.L26+12
 330 0066 9847     	 blx r3
 331              	.LVL6:
 151:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 332              	 .loc 2 151 3
 333 0068 00E0     	 b .L14
 334              	.L25:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 335              	 .loc 2 120 3
 336 006a 00BF     	 nop
 337              	.L14:
 338              	.L24:
 152:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 153:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 339              	 .loc 2 153 1
 340 006c 00BF     	 nop
 341 006e 0837     	 adds r7,r7,#8
 342              	.LCFI21:
 343              	 .cfi_def_cfa_offset 8
 344 0070 BD46     	 mov sp,r7
 345              	.LCFI22:
 346              	 .cfi_def_cfa_register 13
 347              	 
 348 0072 80BD     	 pop {r7,pc}
 349              	.L27:
 350              	 .align 2
 351              	.L26:
 352 0074 00000000 	 .word pmc_switch_sclk_to_32kxtal
 353 0078 00000000 	 .word pmc_osc_enable_fastrc
 354 007c 00000000 	 .word pmc_osc_enable_main_xtal
 355 0080 00000000 	 .word pmc_osc_bypass_main_xtal
 356              	 .cfi_endproc
 357              	.LFE69:
 359              	 .section .text.osc_is_ready,"ax",%progbits
 360              	 .align 1
 361              	 .syntax unified
 362              	 .thumb
 363              	 .thumb_func
 364              	 .fpu softvfp
 366              	osc_is_ready:
 367              	.LFB71:
 154:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 155:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_disable(uint32_t ul_id)
 156:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 157:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 158:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 159:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 160:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 161:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 162:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 163:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 164:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 165:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 166:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_fastrc();
 167:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 168:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 169:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 170:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_XTAL);
 171:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 172:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 173:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 174:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_BYPASS);
 175:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 176:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 177:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 178:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 179:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline bool osc_is_ready(uint32_t ul_id)
 180:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 368              	 .loc 2 180 1
 369              	 .cfi_startproc
 370              	 
 371              	 
 372 0000 80B5     	 push {r7,lr}
 373              	.LCFI23:
 374              	 .cfi_def_cfa_offset 8
 375              	 .cfi_offset 7,-8
 376              	 .cfi_offset 14,-4
 377 0002 82B0     	 sub sp,sp,#8
 378              	.LCFI24:
 379              	 .cfi_def_cfa_offset 16
 380 0004 00AF     	 add r7,sp,#0
 381              	.LCFI25:
 382              	 .cfi_def_cfa_register 7
 383 0006 7860     	 str r0,[r7,#4]
 384 0008 7B68     	 ldr r3,[r7,#4]
 385 000a 072B     	 cmp r3,#7
 386 000c 2FD8     	 bhi .L29
 387 000e 01A2     	 adr r2,.L31
 388 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 389              	 .p2align 2
 390              	.L31:
 391 0014 35000000 	 .word .L34+1
 392 0018 39000000 	 .word .L33+1
 393 001c 39000000 	 .word .L33+1
 394 0020 4B000000 	 .word .L32+1
 395 0024 4B000000 	 .word .L32+1
 396 0028 4B000000 	 .word .L32+1
 397 002c 5D000000 	 .word .L30+1
 398 0030 5D000000 	 .word .L30+1
 399              	 .p2align 1
 400              	.L34:
 181:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 182:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 183:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return 1;
 401              	 .loc 2 183 10
 402 0034 0123     	 movs r3,#1
 403 0036 1BE0     	 b .L35
 404              	.L33:
 184:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 185:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 186:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 187:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_32kxtal();
 405              	 .loc 2 187 10
 406 0038 0F4B     	 ldr r3,.L36
 407 003a 9847     	 blx r3
 408              	.LVL7:
 409 003c 0346     	 mov r3,r0
 410 003e 002B     	 cmp r3,#0
 411 0040 14BF     	 ite ne
 412 0042 0123     	 movne r3,#1
 413 0044 0023     	 moveq r3,#0
 414 0046 DBB2     	 uxtb r3,r3
 415 0048 12E0     	 b .L35
 416              	.L32:
 188:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 189:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 190:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 191:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 192:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_fastrc();
 417              	 .loc 2 192 10
 418 004a 0C4B     	 ldr r3,.L36+4
 419 004c 9847     	 blx r3
 420              	.LVL8:
 421 004e 0346     	 mov r3,r0
 422 0050 002B     	 cmp r3,#0
 423 0052 14BF     	 ite ne
 424 0054 0123     	 movne r3,#1
 425 0056 0023     	 moveq r3,#0
 426 0058 DBB2     	 uxtb r3,r3
 427 005a 09E0     	 b .L35
 428              	.L30:
 193:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 194:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 195:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 196:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_main_xtal();
 429              	 .loc 2 196 10
 430 005c 084B     	 ldr r3,.L36+8
 431 005e 9847     	 blx r3
 432              	.LVL9:
 433 0060 0346     	 mov r3,r0
 434 0062 002B     	 cmp r3,#0
 435 0064 14BF     	 ite ne
 436 0066 0123     	 movne r3,#1
 437 0068 0023     	 moveq r3,#0
 438 006a DBB2     	 uxtb r3,r3
 439 006c 00E0     	 b .L35
 440              	.L29:
 197:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 198:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 199:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 441              	 .loc 2 199 9
 442 006e 0023     	 movs r3,#0
 443              	.L35:
 200:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 444              	 .loc 2 200 1
 445 0070 1846     	 mov r0,r3
 446 0072 0837     	 adds r7,r7,#8
 447              	.LCFI26:
 448              	 .cfi_def_cfa_offset 8
 449 0074 BD46     	 mov sp,r7
 450              	.LCFI27:
 451              	 .cfi_def_cfa_register 13
 452              	 
 453 0076 80BD     	 pop {r7,pc}
 454              	.L37:
 455              	 .align 2
 456              	.L36:
 457 0078 00000000 	 .word pmc_osc_is_ready_32kxtal
 458 007c 00000000 	 .word pmc_osc_is_ready_fastrc
 459 0080 00000000 	 .word pmc_osc_is_ready_main_xtal
 460              	 .cfi_endproc
 461              	.LFE71:
 463              	 .section .text.osc_get_rate,"ax",%progbits
 464              	 .align 1
 465              	 .syntax unified
 466              	 .thumb
 467              	 .thumb_func
 468              	 .fpu softvfp
 470              	osc_get_rate:
 471              	.LFB72:
 201:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 202:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline uint32_t osc_get_rate(uint32_t ul_id)
 203:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 472              	 .loc 2 203 1
 473              	 .cfi_startproc
 474              	 
 475              	 
 476              	 
 477 0000 80B4     	 push {r7}
 478              	.LCFI28:
 479              	 .cfi_def_cfa_offset 4
 480              	 .cfi_offset 7,-4
 481 0002 83B0     	 sub sp,sp,#12
 482              	.LCFI29:
 483              	 .cfi_def_cfa_offset 16
 484 0004 00AF     	 add r7,sp,#0
 485              	.LCFI30:
 486              	 .cfi_def_cfa_register 7
 487 0006 7860     	 str r0,[r7,#4]
 488 0008 7B68     	 ldr r3,[r7,#4]
 489 000a 072B     	 cmp r3,#7
 490 000c 23D8     	 bhi .L39
 491 000e 01A2     	 adr r2,.L41
 492 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 493              	 .p2align 2
 494              	.L41:
 495 0014 35000000 	 .word .L48+1
 496 0018 3B000000 	 .word .L47+1
 497 001c 3F000000 	 .word .L46+1
 498 0020 43000000 	 .word .L45+1
 499 0024 47000000 	 .word .L44+1
 500 0028 4B000000 	 .word .L43+1
 501 002c 4F000000 	 .word .L42+1
 502 0030 53000000 	 .word .L40+1
 503              	 .p2align 1
 504              	.L48:
 204:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 205:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 206:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_SLCK_32K_RC_HZ;
 505              	 .loc 2 206 10
 506 0034 4FF4FA43 	 mov r3,#32000
 507 0038 0EE0     	 b .L49
 508              	.L47:
 207:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 208:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 209:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_XTAL;
 509              	 .loc 2 209 10
 510 003a 0023     	 movs r3,#0
 511 003c 0CE0     	 b .L49
 512              	.L46:
 210:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 211:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 212:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_BYPASS;
 513              	 .loc 2 212 10
 514 003e 0023     	 movs r3,#0
 515 0040 0AE0     	 b .L49
 516              	.L45:
 213:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 214:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 215:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_4M_RC_HZ;
 517              	 .loc 2 215 10
 518 0042 084B     	 ldr r3,.L50
 519 0044 08E0     	 b .L49
 520              	.L44:
 216:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 217:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 218:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_8M_RC_HZ;
 521              	 .loc 2 218 10
 522 0046 084B     	 ldr r3,.L50+4
 523 0048 06E0     	 b .L49
 524              	.L43:
 219:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 220:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 221:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_12M_RC_HZ;
 525              	 .loc 2 221 10
 526 004a 084B     	 ldr r3,.L50+8
 527 004c 04E0     	 b .L49
 528              	.L42:
 222:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 223:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 224:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_XTAL;
 529              	 .loc 2 224 10
 530 004e 074B     	 ldr r3,.L50+8
 531 0050 02E0     	 b .L49
 532              	.L40:
 225:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 226:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 227:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_BYPASS;
 533              	 .loc 2 227 10
 534 0052 064B     	 ldr r3,.L50+8
 535 0054 00E0     	 b .L49
 536              	.L39:
 228:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 229:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 230:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 537              	 .loc 2 230 9
 538 0056 0023     	 movs r3,#0
 539              	.L49:
 231:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 540              	 .loc 2 231 1
 541 0058 1846     	 mov r0,r3
 542 005a 0C37     	 adds r7,r7,#12
 543              	.LCFI31:
 544              	 .cfi_def_cfa_offset 4
 545 005c BD46     	 mov sp,r7
 546              	.LCFI32:
 547              	 .cfi_def_cfa_register 13
 548              	 
 549 005e 80BC     	 pop {r7}
 550              	.LCFI33:
 551              	 .cfi_restore 7
 552              	 .cfi_def_cfa_offset 0
 553 0060 7047     	 bx lr
 554              	.L51:
 555 0062 00BF     	 .align 2
 556              	.L50:
 557 0064 00093D00 	 .word 4000000
 558 0068 00127A00 	 .word 8000000
 559 006c 001BB700 	 .word 12000000
 560              	 .cfi_endproc
 561              	.LFE72:
 563              	 .section .text.osc_wait_ready,"ax",%progbits
 564              	 .align 1
 565              	 .syntax unified
 566              	 .thumb
 567              	 .thumb_func
 568              	 .fpu softvfp
 570              	osc_wait_ready:
 571              	.LFB73:
 572              	 .file 3 ".././hal/sam3u1c/inc/osc.h"
   1:.././hal/sam3u1c/inc/osc.h **** /**
   2:.././hal/sam3u1c/inc/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/osc.h ****  *
   4:.././hal/sam3u1c/inc/osc.h ****  * \brief Oscillator management
   5:.././hal/sam3u1c/inc/osc.h ****  *
   6:.././hal/sam3u1c/inc/osc.h ****  * Copyright (c) 2010-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/osc.h ****  *
   8:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/osc.h ****  *
  10:.././hal/sam3u1c/inc/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/osc.h ****  *
  12:.././hal/sam3u1c/inc/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/osc.h ****  *
  15:.././hal/sam3u1c/inc/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/osc.h ****  *
  18:.././hal/sam3u1c/inc/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/osc.h ****  *
  22:.././hal/sam3u1c/inc/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/osc.h ****  *
  25:.././hal/sam3u1c/inc/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/osc.h ****  *
  28:.././hal/sam3u1c/inc/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/osc.h ****  *
  40:.././hal/sam3u1c/inc/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/osc.h ****  *
  42:.././hal/sam3u1c/inc/osc.h ****  */
  43:.././hal/sam3u1c/inc/osc.h **** #ifndef OSC_H_INCLUDED
  44:.././hal/sam3u1c/inc/osc.h **** #define OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/osc.h **** 
  46:.././hal/sam3u1c/inc/osc.h **** #include "parts.h"
  47:.././hal/sam3u1c/inc/osc.h **** #include "conf_clock.h"
  48:.././hal/sam3u1c/inc/osc.h **** 
  49:.././hal/sam3u1c/inc/osc.h **** #if SAM3S
  50:.././hal/sam3u1c/inc/osc.h **** # include "sam3s/osc.h"
  51:.././hal/sam3u1c/inc/osc.h **** #elif SAM3XA
  52:.././hal/sam3u1c/inc/osc.h **** # include "sam3x/osc.h"
  53:.././hal/sam3u1c/inc/osc.h **** #elif SAM3U
  54:.././hal/sam3u1c/inc/osc.h **** # include "sam3u/osc.h"
  55:.././hal/sam3u1c/inc/osc.h **** #elif SAM3N
  56:.././hal/sam3u1c/inc/osc.h **** # include "sam3n/osc.h"
  57:.././hal/sam3u1c/inc/osc.h **** #elif SAM4S
  58:.././hal/sam3u1c/inc/osc.h **** # include "sam4s/osc.h"
  59:.././hal/sam3u1c/inc/osc.h **** #elif SAM4E
  60:.././hal/sam3u1c/inc/osc.h **** # include "sam4e/osc.h"
  61:.././hal/sam3u1c/inc/osc.h **** #elif SAM4C
  62:.././hal/sam3u1c/inc/osc.h **** # include "sam4c/osc.h"
  63:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CM
  64:.././hal/sam3u1c/inc/osc.h **** # include "sam4cm/osc.h"
  65:.././hal/sam3u1c/inc/osc.h **** #elif SAM4CP
  66:.././hal/sam3u1c/inc/osc.h **** # include "sam4cp/osc.h"
  67:.././hal/sam3u1c/inc/osc.h **** #elif SAM4L
  68:.././hal/sam3u1c/inc/osc.h **** # include "sam4l/osc.h"
  69:.././hal/sam3u1c/inc/osc.h **** #elif SAM4N
  70:.././hal/sam3u1c/inc/osc.h **** # include "sam4n/osc.h"
  71:.././hal/sam3u1c/inc/osc.h **** #elif SAMG
  72:.././hal/sam3u1c/inc/osc.h **** # include "samg/osc.h"
  73:.././hal/sam3u1c/inc/osc.h **** #elif (UC3A0 || UC3A1)
  74:.././hal/sam3u1c/inc/osc.h **** # include "uc3a0_a1/osc.h"
  75:.././hal/sam3u1c/inc/osc.h **** #elif UC3A3
  76:.././hal/sam3u1c/inc/osc.h **** # include "uc3a3_a4/osc.h"
  77:.././hal/sam3u1c/inc/osc.h **** #elif UC3B
  78:.././hal/sam3u1c/inc/osc.h **** # include "uc3b0_b1/osc.h"
  79:.././hal/sam3u1c/inc/osc.h **** #elif UC3C
  80:.././hal/sam3u1c/inc/osc.h **** # include "uc3c/osc.h"
  81:.././hal/sam3u1c/inc/osc.h **** #elif UC3D
  82:.././hal/sam3u1c/inc/osc.h **** # include "uc3d/osc.h"
  83:.././hal/sam3u1c/inc/osc.h **** #elif UC3L
  84:.././hal/sam3u1c/inc/osc.h **** # include "uc3l/osc.h"
  85:.././hal/sam3u1c/inc/osc.h **** #elif XMEGA
  86:.././hal/sam3u1c/inc/osc.h **** # include "xmega/osc.h"
  87:.././hal/sam3u1c/inc/osc.h **** #else
  88:.././hal/sam3u1c/inc/osc.h **** # error Unsupported chip type
  89:.././hal/sam3u1c/inc/osc.h **** #endif
  90:.././hal/sam3u1c/inc/osc.h **** 
  91:.././hal/sam3u1c/inc/osc.h **** /**
  92:.././hal/sam3u1c/inc/osc.h ****  * \ingroup clk_group
  93:.././hal/sam3u1c/inc/osc.h ****  * \defgroup osc_group Oscillator Management
  94:.././hal/sam3u1c/inc/osc.h ****  *
  95:.././hal/sam3u1c/inc/osc.h ****  * This group contains functions and definitions related to configuring
  96:.././hal/sam3u1c/inc/osc.h ****  * and enabling/disabling on-chip oscillators. Internal RC-oscillators,
  97:.././hal/sam3u1c/inc/osc.h ****  * external crystal oscillators and external clock generators are
  98:.././hal/sam3u1c/inc/osc.h ****  * supported by this module. What all of these have in common is that
  99:.././hal/sam3u1c/inc/osc.h ****  * they swing at a fixed, nominal frequency which is normally not
 100:.././hal/sam3u1c/inc/osc.h ****  * adjustable.
 101:.././hal/sam3u1c/inc/osc.h ****  *
 102:.././hal/sam3u1c/inc/osc.h ****  * \par Example: Enabling an oscillator
 103:.././hal/sam3u1c/inc/osc.h ****  *
 104:.././hal/sam3u1c/inc/osc.h ****  * The following example demonstrates how to enable the external
 105:.././hal/sam3u1c/inc/osc.h ****  * oscillator on XMEGA A and wait for it to be ready to use. The
 106:.././hal/sam3u1c/inc/osc.h ****  * oscillator identifiers are platform-specific, so while the same
 107:.././hal/sam3u1c/inc/osc.h ****  * procedure is used on all platforms, the parameter to osc_enable()
 108:.././hal/sam3u1c/inc/osc.h ****  * will be different from device to device.
 109:.././hal/sam3u1c/inc/osc.h ****  * \code
 110:.././hal/sam3u1c/inc/osc.h **** 	osc_enable(OSC_ID_XOSC);
 111:.././hal/sam3u1c/inc/osc.h **** 	osc_wait_ready(OSC_ID_XOSC); \endcode
 112:.././hal/sam3u1c/inc/osc.h ****  *
 113:.././hal/sam3u1c/inc/osc.h ****  * \section osc_group_board Board-specific Definitions
 114:.././hal/sam3u1c/inc/osc.h ****  * If external oscillators are used, the board code must provide the
 115:.././hal/sam3u1c/inc/osc.h ****  * following definitions for each of those:
 116:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_HZ: The nominal frequency of the oscillator.
 117:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_STARTUP_US: The startup time of the
 118:.././hal/sam3u1c/inc/osc.h ****  *     oscillator in microseconds.
 119:.././hal/sam3u1c/inc/osc.h ****  *   - \b BOARD_<osc name>_TYPE: The type of oscillator connected, i.e.
 120:.././hal/sam3u1c/inc/osc.h ****  *     whether it's a crystal or external clock, and sometimes what kind
 121:.././hal/sam3u1c/inc/osc.h ****  *     of crystal it is. The meaning of this value is platform-specific.
 122:.././hal/sam3u1c/inc/osc.h ****  *
 123:.././hal/sam3u1c/inc/osc.h ****  * @{
 124:.././hal/sam3u1c/inc/osc.h ****  */
 125:.././hal/sam3u1c/inc/osc.h **** 
 126:.././hal/sam3u1c/inc/osc.h **** //! \name Oscillator Management
 127:.././hal/sam3u1c/inc/osc.h **** //@{
 128:.././hal/sam3u1c/inc/osc.h **** /**
 129:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_enable(uint8_t id)
 130:.././hal/sam3u1c/inc/osc.h ****  * \brief Enable oscillator \a id
 131:.././hal/sam3u1c/inc/osc.h ****  *
 132:.././hal/sam3u1c/inc/osc.h ****  * The startup time and mode value is automatically determined based on
 133:.././hal/sam3u1c/inc/osc.h ****  * definitions in the board code.
 134:.././hal/sam3u1c/inc/osc.h ****  */
 135:.././hal/sam3u1c/inc/osc.h **** /**
 136:.././hal/sam3u1c/inc/osc.h ****  * \fn void osc_disable(uint8_t id)
 137:.././hal/sam3u1c/inc/osc.h ****  * \brief Disable oscillator \a id
 138:.././hal/sam3u1c/inc/osc.h ****  */
 139:.././hal/sam3u1c/inc/osc.h **** /**
 140:.././hal/sam3u1c/inc/osc.h ****  * \fn osc_is_ready(uint8_t id)
 141:.././hal/sam3u1c/inc/osc.h ****  * \brief Determine whether oscillator \a id is ready.
 142:.././hal/sam3u1c/inc/osc.h ****  * \retval true Oscillator \a id is running and ready to use as a clock
 143:.././hal/sam3u1c/inc/osc.h ****  * source.
 144:.././hal/sam3u1c/inc/osc.h ****  * \retval false Oscillator \a id is not running.
 145:.././hal/sam3u1c/inc/osc.h ****  */
 146:.././hal/sam3u1c/inc/osc.h **** /**
 147:.././hal/sam3u1c/inc/osc.h ****  * \fn uint32_t osc_get_rate(uint8_t id)
 148:.././hal/sam3u1c/inc/osc.h ****  * \brief Return the frequency of oscillator \a id in Hz
 149:.././hal/sam3u1c/inc/osc.h ****  */
 150:.././hal/sam3u1c/inc/osc.h **** 
 151:.././hal/sam3u1c/inc/osc.h **** #ifndef __ASSEMBLY__
 152:.././hal/sam3u1c/inc/osc.h **** 
 153:.././hal/sam3u1c/inc/osc.h **** /**
 154:.././hal/sam3u1c/inc/osc.h ****  * \brief Wait until the oscillator identified by \a id is ready
 155:.././hal/sam3u1c/inc/osc.h ****  *
 156:.././hal/sam3u1c/inc/osc.h ****  * This function will busy-wait for the oscillator identified by \a id
 157:.././hal/sam3u1c/inc/osc.h ****  * to become stable and ready to use as a clock source.
 158:.././hal/sam3u1c/inc/osc.h ****  *
 159:.././hal/sam3u1c/inc/osc.h ****  * \param id A number identifying the oscillator to wait for.
 160:.././hal/sam3u1c/inc/osc.h ****  */
 161:.././hal/sam3u1c/inc/osc.h **** static inline void osc_wait_ready(uint8_t id)
 162:.././hal/sam3u1c/inc/osc.h **** {
 573              	 .loc 3 162 1
 574              	 .cfi_startproc
 575              	 
 576              	 
 577 0000 80B5     	 push {r7,lr}
 578              	.LCFI34:
 579              	 .cfi_def_cfa_offset 8
 580              	 .cfi_offset 7,-8
 581              	 .cfi_offset 14,-4
 582 0002 82B0     	 sub sp,sp,#8
 583              	.LCFI35:
 584              	 .cfi_def_cfa_offset 16
 585 0004 00AF     	 add r7,sp,#0
 586              	.LCFI36:
 587              	 .cfi_def_cfa_register 7
 588 0006 0346     	 mov r3,r0
 589 0008 FB71     	 strb r3,[r7,#7]
 163:.././hal/sam3u1c/inc/osc.h **** 	while (!osc_is_ready(id)) {
 590              	 .loc 3 163 8
 591 000a 00BF     	 nop
 592              	.L53:
 593              	 .loc 3 163 10 discriminator 1
 594 000c FB79     	 ldrb r3,[r7,#7]
 595 000e 1846     	 mov r0,r3
 596 0010 064B     	 ldr r3,.L54
 597 0012 9847     	 blx r3
 598              	.LVL10:
 599 0014 0346     	 mov r3,r0
 600              	 .loc 3 163 9 discriminator 1
 601 0016 83F00103 	 eor r3,r3,#1
 602 001a DBB2     	 uxtb r3,r3
 603              	 .loc 3 163 8 discriminator 1
 604 001c 002B     	 cmp r3,#0
 605 001e F5D1     	 bne .L53
 164:.././hal/sam3u1c/inc/osc.h **** 		/* Do nothing */
 165:.././hal/sam3u1c/inc/osc.h **** 	}
 166:.././hal/sam3u1c/inc/osc.h **** }
 606              	 .loc 3 166 1
 607 0020 00BF     	 nop
 608 0022 00BF     	 nop
 609 0024 0837     	 adds r7,r7,#8
 610              	.LCFI37:
 611              	 .cfi_def_cfa_offset 8
 612 0026 BD46     	 mov sp,r7
 613              	.LCFI38:
 614              	 .cfi_def_cfa_register 13
 615              	 
 616 0028 80BD     	 pop {r7,pc}
 617              	.L55:
 618 002a 00BF     	 .align 2
 619              	.L54:
 620 002c 00000000 	 .word osc_is_ready
 621              	 .cfi_endproc
 622              	.LFE73:
 624              	 .section .text.sysclk_get_main_hz,"ax",%progbits
 625              	 .align 1
 626              	 .syntax unified
 627              	 .thumb
 628              	 .thumb_func
 629              	 .fpu softvfp
 631              	sysclk_get_main_hz:
 632              	.LFB83:
 633              	 .file 4 ".././hal/sam3u1c/inc/sam3u/sysclk.h"
   1:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Chip-specific system clock management functions.
   5:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Copyright (c) 2011 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  44:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CHIP_SYSCLK_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define CHIP_SYSCLK_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  47:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #include <osc.h>
  48:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #include <pll.h>
  49:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  50:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
  51:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \page sysclk_quickstart Quick Start Guide for the System Clock Management service (SAM3U)
  52:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  53:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This is the quick start guide for the \ref sysclk_group "System Clock Management"
  54:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * service, with step-by-step instructions on how to configure and use the service for
  55:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * specific use cases.
  56:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  57:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \section sysclk_quickstart_usecases System Clock Management use cases
  58:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * - \ref sysclk_quickstart_basic
  59:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  60:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \section sysclk_quickstart_basic Basic usage of the System Clock Management service
  61:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This section will present a basic use case for the System Clock Management service.
  62:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This use case will configure the main system clock to 96MHz, using an internal PLL
  63:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * module to multiply the frequency of a crystal attached to the microcontroller.
  64:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  65:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_prereq Prerequisites
  66:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  - None
  67:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  68:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_setup_steps Initialization code
  69:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Add to the application initialization code:
  70:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \code
  71:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	sysclk_init();
  72:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
  73:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  74:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_setup_steps_workflow Workflow
  75:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * -# Configure the system clocks according to the settings in conf_clock.h:
  76:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \code sysclk_init(); \endcode
  77:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  78:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_example_code Example code
  79:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   Add or uncomment the following in your conf_clock.h header file, commenting out all other
  80:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   definitions of the same symbol(s):
  81:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code
  82:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_SYSCLK_SOURCE        SYSCLK_SRC_PLLACK
  83:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  84:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   // Fpll0 = (Fclk * PLL_mul) / PLL_div
  85:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_SOURCE          PLL_SRC_MAINCK_XTAL
  86:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_MUL             (96000000UL / BOARD_FREQ_MAINCK_XTAL)
  87:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_DIV             1
  88:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  89:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   // Fbus = Fsys / BUS_div
  90:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_SYSCLK_PRES          SYSCLK_PRES_1
  91:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
  92:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  93:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_example_workflow Workflow
  94:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the main system clock to use the output of the PLL module as its source:
  95:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code #define CONFIG_SYSCLK_SOURCE          SYSCLK_SRC_PLLACK \endcode
  96:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the PLL module to use the fast external fast crystal oscillator as its source:
  97:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code #define CONFIG_PLL0_SOURCE            PLL_SRC_MAINCK_XTAL \endcode
  98:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the PLL module to multiply the external fast crystal oscillator frequency up to 96
  99:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code
 100:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_PLL0_MUL             (96000000UL / BOARD_FREQ_MAINCK_XTAL)
 101:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_PLL0_DIV             1
 102:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
 103:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \note For user boards, \c BOARD_FREQ_MAINCK_XTAL should be defined in the board \c conf_board.
 104:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *         file as the frequency of the fast crystal attached to the microcontroller.
 105:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the main clock to run at the full 96MHz, disable scaling of the main system clock 
 106:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \code
 107:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_SYSCLK_PRES         SYSCLK_PRES_1
 108:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
 109:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \note Some dividers are powers of two, while others are integer division factors. Refer to th
 110:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *          formulas in the conf_clock.h template commented above each division define.
 111:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 112:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 113:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /// @cond 0
 114:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**INDENT-OFF**/
 115:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __cplusplus
 116:.././hal/sam3u1c/inc/sam3u/sysclk.h **** extern "C" {
 117:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 118:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**INDENT-ON**/
 119:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /// @endcond
 120:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 121:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 122:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \weakgroup sysclk_group
 123:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * @{
 124:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 125:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 126:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Configuration Symbols
 127:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 128:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 129:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_SYSCLK_SOURCE
 130:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Initial/static main system clock source
 131:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 132:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The main system clock will be configured to use this clock during
 133:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * initialization.
 134:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 135:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CONFIG_SYSCLK_SOURCE
 136:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_SYSCLK_SOURCE   SYSCLK_SRC_MAINCK_4M_RC
 137:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 138:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 139:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_SYSCLK_PRES
 140:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Initial CPU clock divider (mck)
 141:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 142:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The MCK will run at
 143:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \f[
 144:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   f_{MCK} = \frac{f_{sys}}{\mathrm{CONFIG\_SYSCLK\_PRES}}\,\mbox{Hz}
 145:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \f]
 146:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * after initialization.
 147:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 148:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CONFIG_SYSCLK_PRES
 149:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_SYSCLK_PRES  0
 150:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 151:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 152:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 153:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 154:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Master Clock Sources (MCK)
 155:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 156:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_RC              0       //!< Internal 32kHz RC oscillator as master source 
 157:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_XTAL            1       //!< External 32kHz crystal oscillator as master so
 158:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_BYPASS          2       //!< External 32kHz bypass oscillator as master sou
 159:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_4M_RC         3       //!< Internal 4MHz RC oscillator as master source c
 160:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_8M_RC         4       //!< Internal 8MHz RC oscillator as master source c
 161:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_12M_RC        5       //!< Internal 12MHz RC oscillator as master source 
 162:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_XTAL          6       //!< External crystal oscillator as master source c
 163:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_BYPASS        7       //!< External bypass oscillator as master source cl
 164:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_PLLACK               8       //!< Use PLLACK as master source clock
 165:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_UPLLCK               9       //!< Use UPLLCK as master source clock
 166:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 167:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 168:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Master Clock Prescalers (MCK)
 169:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 170:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_1           PMC_MCKR_PRES_CLK_1     //!< Set master clock prescaler to 1
 171:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_2           PMC_MCKR_PRES_CLK_2     //!< Set master clock prescaler to 2
 172:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_4           PMC_MCKR_PRES_CLK_4     //!< Set master clock prescaler to 4
 173:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_8           PMC_MCKR_PRES_CLK_8     //!< Set master clock prescaler to 8
 174:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_16          PMC_MCKR_PRES_CLK_16    //!< Set master clock prescaler to 16
 175:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_32          PMC_MCKR_PRES_CLK_32    //!< Set master clock prescaler to 32
 176:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_64          PMC_MCKR_PRES_CLK_64    //!< Set master clock prescaler to 64
 177:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_3           PMC_MCKR_PRES_CLK_3     //!< Set master clock prescaler to 3
 178:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 179:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 180:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 181:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_USBCLK_SOURCE
 182:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Configuration symbol for the USB generic clock source
 183:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 184:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Sets the clock source to use for the USB. The source must also be properly
 185:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configured.
 186:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 187:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Define this to one of the \c USBCLK_SRC_xxx settings. Leave it undefined if
 188:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * USB is not required.
 189:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 190:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __DOXYGEN__
 191:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_USBCLK_SOURCE
 192:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 193:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 194:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 195:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_USBCLK_DIV
 196:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Configuration symbol for the USB generic clock divider setting
 197:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 198:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Sets the clock division for the USB generic clock. If a USB clock source is
 199:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * selected with CONFIG_USBCLK_SOURCE, this configuration symbol must also be
 200:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * defined.
 201:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 202:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __DOXYGEN__
 203:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_USBCLK_DIV
 204:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 205:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 206:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 207:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \name Querying the system clock
 208:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 209:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The following functions may be used to query the current frequency of
 210:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * the system clock and the CPU and bus clocks derived from it.
 211:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * sysclk_get_main_hz() and sysclk_get_cpu_hz() can be assumed to be
 212:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * available on all platforms, although some platforms may define
 213:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * additional accessors for various chip-internal bus clocks. These are
 214:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * usually not intended to be queried directly by generic code.
 215:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 216:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 217:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 218:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 219:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 220:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 221:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \todo This function assumes that the main clock source never changes
 222:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * once it's been set up, and that PLL0 always runs at the compile-time
 223:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configured default rate. While this is probably the most common
 224:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configuration, which we want to support as a special case for
 225:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * performance reasons, we will at some point need to support more
 226:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * dynamic setups as well.
 227:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 228:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 229:.././hal/sam3u1c/inc/sam3u/sysclk.h **** extern uint32_t sysclk_initialized;
 230:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 231:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 232:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 634              	 .loc 4 232 1
 635              	 .cfi_startproc
 636              	 
 637              	 
 638 0000 80B5     	 push {r7,lr}
 639              	.LCFI39:
 640              	 .cfi_def_cfa_offset 8
 641              	 .cfi_offset 7,-8
 642              	 .cfi_offset 14,-4
 643 0002 00AF     	 add r7,sp,#0
 644              	.LCFI40:
 645              	 .cfi_def_cfa_register 7
 233:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 234:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	if (!sysclk_initialized ) {
 235:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 236:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 237:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 238:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 239:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* Config system clock setting */
 240:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_RC) {
 241:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_RC_HZ;
 242:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_XTAL) {
 243:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_XTAL_HZ;
 244:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_BYPASS) {
 245:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_BYPASS_HZ;
 246:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_4M_RC) {
 247:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 248:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_8M_RC) {
 249:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_8M_RC_HZ;
 250:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_12M_RC) {
 251:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_12M_RC_HZ;
 252:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_XTAL) {
 253:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_XTAL_HZ;
 254:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
 255:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_BYPASS_HZ;
 256:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 257:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef CONFIG_PLL0_SOURCE
 258:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
 259:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return pll_get_default_rate(0);
 646              	 .loc 4 259 10
 647 0004 0620     	 movs r0,#6
 648 0006 034B     	 ldr r3,.L58
 649 0008 9847     	 blx r3
 650              	.LVL11:
 651 000a 0346     	 mov r3,r0
 652 000c 1B01     	 lsls r3,r3,#4
 260:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 261:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 262:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 263:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef CONFIG_PLL1_SOURCE
 264:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_UPLLCK) {
 265:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return PLL_UPLL_HZ;
 266:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 267:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 268:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else {
 269:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
 270:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return 0;
 271:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 272:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 653              	 .loc 4 272 1
 654 000e 1846     	 mov r0,r3
 655 0010 80BD     	 pop {r7,pc}
 656              	.L59:
 657 0012 00BF     	 .align 2
 658              	.L58:
 659 0014 00000000 	 .word osc_get_rate
 660              	 .cfi_endproc
 661              	.LFE83:
 663              	 .section .text.sysclk_get_cpu_hz,"ax",%progbits
 664              	 .align 1
 665              	 .syntax unified
 666              	 .thumb
 667              	 .thumb_func
 668              	 .fpu softvfp
 670              	sysclk_get_cpu_hz:
 671              	.LFB84:
 273:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 274:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 275:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Return the current rate in Hz of the CPU clock
 276:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 277:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \todo This function assumes that the CPU always runs at the system
 278:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clock frequency. We want to support at least two more scenarios:
 279:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Fixed CPU/bus clock dividers (config symbols) and dynamic CPU/bus
 280:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clock dividers (which may change at run time). Ditto for all the bus
 281:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clocks.
 282:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 283:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \return Frequency of the CPU clock, in Hz.
 284:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 285:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_cpu_hz(void)
 286:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 672              	 .loc 4 286 1
 673              	 .cfi_startproc
 674              	 
 675              	 
 676 0000 80B5     	 push {r7,lr}
 677              	.LCFI41:
 678              	 .cfi_def_cfa_offset 8
 679              	 .cfi_offset 7,-8
 680              	 .cfi_offset 14,-4
 681 0002 00AF     	 add r7,sp,#0
 682              	.LCFI42:
 683              	 .cfi_def_cfa_register 7
 287:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
 288:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* prescaler, not an immediate value. */
 289:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	return sysclk_get_main_hz() /
 684              	 .loc 4 289 9
 685 0004 024B     	 ldr r3,.L62
 686 0006 9847     	 blx r3
 687              	.LVL12:
 688 0008 0346     	 mov r3,r0
 689              	 .loc 4 289 30
 690 000a 5B08     	 lsrs r3,r3,#1
 290:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
 291:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
 292:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 691              	 .loc 4 292 1
 692 000c 1846     	 mov r0,r3
 693 000e 80BD     	 pop {r7,pc}
 694              	.L63:
 695              	 .align 2
 696              	.L62:
 697 0010 00000000 	 .word sysclk_get_main_hz
 698              	 .cfi_endproc
 699              	.LFE84:
 701              	 .section .text.sysclk_enable_peripheral_clock,"ax",%progbits
 702              	 .align 1
 703              	 .syntax unified
 704              	 .thumb
 705              	 .thumb_func
 706              	 .fpu softvfp
 708              	sysclk_enable_peripheral_clock:
 709              	.LFB87:
 293:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 294:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 295:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Retrieves the current rate in Hz of the peripheral clocks.
 296:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 297:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \return Frequency of the peripheral clocks, in Hz.
 298:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 299:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_peripheral_hz(void)
 300:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 301:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
 302:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* prescaler, not an immediate value. */
 303:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	return sysclk_get_main_hz() /
 304:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
 305:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
 306:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 307:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 308:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 309:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Retrieves the current rate in Hz of the Peripheral Bus clock attached
 310:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *        to the specified peripheral.
 311:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 312:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \param module Pointer to the module's base address.
 313:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 314:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \return Frequency of the bus attached to the specified peripheral, in Hz.
 315:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 316:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
 317:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 318:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	UNUSED(module);
 319:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	return sysclk_get_peripheral_hz();
 320:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 321:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 322:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 323:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Enabling and disabling synchronous clocks
 324:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 325:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 326:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 327:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Enable a peripheral's clock.
 328:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 329:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \param ul_id Id (number) of the peripheral clock.
 330:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 331:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
 332:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 710              	 .loc 4 332 1
 711              	 .cfi_startproc
 712              	 
 713              	 
 714 0000 80B5     	 push {r7,lr}
 715              	.LCFI43:
 716              	 .cfi_def_cfa_offset 8
 717              	 .cfi_offset 7,-8
 718              	 .cfi_offset 14,-4
 719 0002 82B0     	 sub sp,sp,#8
 720              	.LCFI44:
 721              	 .cfi_def_cfa_offset 16
 722 0004 00AF     	 add r7,sp,#0
 723              	.LCFI45:
 724              	 .cfi_def_cfa_register 7
 725 0006 7860     	 str r0,[r7,#4]
 333:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	pmc_enable_periph_clk(ul_id);
 726              	 .loc 4 333 2
 727 0008 7868     	 ldr r0,[r7,#4]
 728 000a 034B     	 ldr r3,.L65
 729 000c 9847     	 blx r3
 730              	.LVL13:
 334:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 731              	 .loc 4 334 1
 732 000e 00BF     	 nop
 733 0010 0837     	 adds r7,r7,#8
 734              	.LCFI46:
 735              	 .cfi_def_cfa_offset 8
 736 0012 BD46     	 mov sp,r7
 737              	.LCFI47:
 738              	 .cfi_def_cfa_register 13
 739              	 
 740 0014 80BD     	 pop {r7,pc}
 741              	.L66:
 742 0016 00BF     	 .align 2
 743              	.L65:
 744 0018 00000000 	 .word pmc_enable_periph_clk
 745              	 .cfi_endproc
 746              	.LFE87:
 748              	 .section .text.udc_detach,"ax",%progbits
 749              	 .align 1
 750              	 .syntax unified
 751              	 .thumb
 752              	 .thumb_func
 753              	 .fpu softvfp
 755              	udc_detach:
 756              	.LFB173:
 757              	 .file 5 ".././hal/sam3u1c/inc/udc.h"
   1:.././hal/sam3u1c/inc/udc.h **** /**
   2:.././hal/sam3u1c/inc/udc.h ****  * \file
   3:.././hal/sam3u1c/inc/udc.h ****  *
   4:.././hal/sam3u1c/inc/udc.h ****  * \brief Interface of the USB Device Controller (UDC)
   5:.././hal/sam3u1c/inc/udc.h ****  *
   6:.././hal/sam3u1c/inc/udc.h ****  * Copyright (c) 2009 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/udc.h ****  *
   8:.././hal/sam3u1c/inc/udc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/udc.h ****  *
  10:.././hal/sam3u1c/inc/udc.h ****  * \page License
  11:.././hal/sam3u1c/inc/udc.h ****  *
  12:.././hal/sam3u1c/inc/udc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/udc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/udc.h ****  *
  15:.././hal/sam3u1c/inc/udc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/udc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/udc.h ****  *
  18:.././hal/sam3u1c/inc/udc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/udc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/udc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/udc.h ****  *
  22:.././hal/sam3u1c/inc/udc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/udc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/udc.h ****  *
  25:.././hal/sam3u1c/inc/udc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/udc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/udc.h ****  *
  28:.././hal/sam3u1c/inc/udc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/udc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/udc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/udc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/udc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/udc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/udc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/udc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/udc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/udc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/udc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/udc.h ****  *
  40:.././hal/sam3u1c/inc/udc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/udc.h ****  *
  42:.././hal/sam3u1c/inc/udc.h ****  */
  43:.././hal/sam3u1c/inc/udc.h **** 
  44:.././hal/sam3u1c/inc/udc.h **** #ifndef _UDC_H_
  45:.././hal/sam3u1c/inc/udc.h **** #define _UDC_H_
  46:.././hal/sam3u1c/inc/udc.h **** 
  47:.././hal/sam3u1c/inc/udc.h **** #include "conf_usb.h"
  48:.././hal/sam3u1c/inc/udc.h **** #include "usb_protocol.h"
  49:.././hal/sam3u1c/inc/udc.h **** #include "udc_desc.h"
  50:.././hal/sam3u1c/inc/udc.h **** #include "udd.h"
  51:.././hal/sam3u1c/inc/udc.h **** 
  52:.././hal/sam3u1c/inc/udc.h **** #if USB_DEVICE_VENDOR_ID == 0
  53:.././hal/sam3u1c/inc/udc.h **** #   error USB_DEVICE_VENDOR_ID cannot be equal to 0
  54:.././hal/sam3u1c/inc/udc.h **** #endif
  55:.././hal/sam3u1c/inc/udc.h **** 
  56:.././hal/sam3u1c/inc/udc.h **** #if USB_DEVICE_PRODUCT_ID == 0
  57:.././hal/sam3u1c/inc/udc.h **** #   error USB_DEVICE_PRODUCT_ID cannot be equal to 0
  58:.././hal/sam3u1c/inc/udc.h **** #endif
  59:.././hal/sam3u1c/inc/udc.h **** 
  60:.././hal/sam3u1c/inc/udc.h **** #ifdef __cplusplus
  61:.././hal/sam3u1c/inc/udc.h **** extern "C" {
  62:.././hal/sam3u1c/inc/udc.h **** #endif
  63:.././hal/sam3u1c/inc/udc.h **** 
  64:.././hal/sam3u1c/inc/udc.h **** /**
  65:.././hal/sam3u1c/inc/udc.h ****  * \ingroup usb_device_group
  66:.././hal/sam3u1c/inc/udc.h ****  * \defgroup udc_group USB Device Controller (UDC)
  67:.././hal/sam3u1c/inc/udc.h ****  *
  68:.././hal/sam3u1c/inc/udc.h ****  * The UDC provides a high-level abstraction of the usb device.
  69:.././hal/sam3u1c/inc/udc.h ****  * You can use these functions to control the main device state
  70:.././hal/sam3u1c/inc/udc.h ****  * (start/attach/wakeup).
  71:.././hal/sam3u1c/inc/udc.h ****  *
  72:.././hal/sam3u1c/inc/udc.h ****  * \section USB_DEVICE_CONF USB Device Custom configuration
  73:.././hal/sam3u1c/inc/udc.h ****  * The following USB Device configuration must be included in the conf_usb.h
  74:.././hal/sam3u1c/inc/udc.h ****  * file of the application.
  75:.././hal/sam3u1c/inc/udc.h ****  *
  76:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_VENDOR_ID (Word)<br>
  77:.././hal/sam3u1c/inc/udc.h ****  * Vendor ID provided by USB org (ATMEL 0x03EB).
  78:.././hal/sam3u1c/inc/udc.h ****  *
  79:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_PRODUCT_ID (Word)<br>
  80:.././hal/sam3u1c/inc/udc.h ****  * Product ID (Referenced in usb_atmel.h).
  81:.././hal/sam3u1c/inc/udc.h ****  *
  82:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MAJOR_VERSION (Byte)<br>
  83:.././hal/sam3u1c/inc/udc.h ****  * Major version of the device
  84:.././hal/sam3u1c/inc/udc.h ****  *
  85:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MINOR_VERSION (Byte)<br>
  86:.././hal/sam3u1c/inc/udc.h ****  * Minor version of the device
  87:.././hal/sam3u1c/inc/udc.h ****  *
  88:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MANUFACTURE_NAME (string)<br>
  89:.././hal/sam3u1c/inc/udc.h ****  * ASCII name for the manufacture
  90:.././hal/sam3u1c/inc/udc.h ****  *
  91:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_PRODUCT_NAME (string)<br>
  92:.././hal/sam3u1c/inc/udc.h ****  * ASCII name for the product
  93:.././hal/sam3u1c/inc/udc.h ****  *
  94:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_SERIAL_NAME (string)<br>
  95:.././hal/sam3u1c/inc/udc.h ****  * ASCII name to enable and set a serial number
  96:.././hal/sam3u1c/inc/udc.h ****  *
  97:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_POWER (Numeric)<br>
  98:.././hal/sam3u1c/inc/udc.h ****  * (unit mA) Maximum device power
  99:.././hal/sam3u1c/inc/udc.h ****  *
 100:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_ATTR (Byte)<br>
 101:.././hal/sam3u1c/inc/udc.h ****  * USB attributes available:
 102:.././hal/sam3u1c/inc/udc.h ****  *  - USB_CONFIG_ATTR_SELF_POWERED
 103:.././hal/sam3u1c/inc/udc.h ****  *  - USB_CONFIG_ATTR_REMOTE_WAKEUP
 104:.././hal/sam3u1c/inc/udc.h ****  *  Note: if remote wake enabled then defines remotewakeup callbacks,
 105:.././hal/sam3u1c/inc/udc.h ****  * see Table 5-2. External API from UDC - Callback
 106:.././hal/sam3u1c/inc/udc.h ****  *
 107:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_LOW_SPEED (Only defined)<br>
 108:.././hal/sam3u1c/inc/udc.h ****  * Force the USB Device to run in low speed
 109:.././hal/sam3u1c/inc/udc.h ****  *
 110:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_HS_SUPPORT (Only defined)<br>
 111:.././hal/sam3u1c/inc/udc.h ****  * Authorize the USB Device to run in high speed
 112:.././hal/sam3u1c/inc/udc.h ****  *
 113:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_MAX_EP (Byte)<br>
 114:.././hal/sam3u1c/inc/udc.h ****  * Define the maximum endpoint number used by the USB Device.<br>
 115:.././hal/sam3u1c/inc/udc.h ****  * This one is already defined in UDI default configuration.
 116:.././hal/sam3u1c/inc/udc.h ****  * Ex:
 117:.././hal/sam3u1c/inc/udc.h ****  * - When endpoint control 0x00, endpoint 0x01 and
 118:.././hal/sam3u1c/inc/udc.h ****  *   endpoint 0x82 is used then USB_DEVICE_MAX_EP=2
 119:.././hal/sam3u1c/inc/udc.h ****  * - When only endpoint control 0x00 is used then USB_DEVICE_MAX_EP=0
 120:.././hal/sam3u1c/inc/udc.h ****  * - When endpoint 0x01 and endpoint 0x81 is used then USB_DEVICE_MAX_EP=1<br>
 121:.././hal/sam3u1c/inc/udc.h ****  *   (configuration not possible on USBB interface)
 122:.././hal/sam3u1c/inc/udc.h ****  * @{
 123:.././hal/sam3u1c/inc/udc.h ****  */
 124:.././hal/sam3u1c/inc/udc.h **** 
 125:.././hal/sam3u1c/inc/udc.h **** /**
 126:.././hal/sam3u1c/inc/udc.h ****  * \brief Authorizes the VBUS event
 127:.././hal/sam3u1c/inc/udc.h ****  *
 128:.././hal/sam3u1c/inc/udc.h ****  * \return true, if the VBUS monitoring is possible.
 129:.././hal/sam3u1c/inc/udc.h ****  *
 130:.././hal/sam3u1c/inc/udc.h ****  * \section udc_vbus_monitoring VBus monitoring used cases
 131:.././hal/sam3u1c/inc/udc.h ****  *
 132:.././hal/sam3u1c/inc/udc.h ****  * The VBus monitoring is used only for USB SELF Power application.
 133:.././hal/sam3u1c/inc/udc.h ****  *
 134:.././hal/sam3u1c/inc/udc.h ****  * - By default the USB device is automatically attached when Vbus is high
 135:.././hal/sam3u1c/inc/udc.h ****  * or when USB is start for devices without internal Vbus monitoring.
 136:.././hal/sam3u1c/inc/udc.h ****  * conf_usb.h file does not contains define USB_DEVICE_ATTACH_AUTO_DISABLE.
 137:.././hal/sam3u1c/inc/udc.h ****  * \code //#define USB_DEVICE_ATTACH_AUTO_DISABLE \endcode
 138:.././hal/sam3u1c/inc/udc.h ****  *
 139:.././hal/sam3u1c/inc/udc.h ****  * - Add custom VBUS monitoring. conf_usb.h file contains define
 140:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_ATTACH_AUTO_DISABLE:
 141:.././hal/sam3u1c/inc/udc.h ****  * \code #define USB_DEVICE_ATTACH_AUTO_DISABLE \endcode
 142:.././hal/sam3u1c/inc/udc.h ****  * User C file contains:
 143:.././hal/sam3u1c/inc/udc.h ****  * \code  
 144:.././hal/sam3u1c/inc/udc.h **** 	// Authorize VBUS monitoring
 145:.././hal/sam3u1c/inc/udc.h **** 	if (!udc_include_vbus_monitoring()) {
 146:.././hal/sam3u1c/inc/udc.h **** 	  // Implement custom VBUS monitoring via GPIO or other
 147:.././hal/sam3u1c/inc/udc.h **** 	}
 148:.././hal/sam3u1c/inc/udc.h **** 	Event_VBUS_present() // VBUS interrupt or GPIO interrupt or other
 149:.././hal/sam3u1c/inc/udc.h **** 	{
 150:.././hal/sam3u1c/inc/udc.h **** 	  // Attach USB Device
 151:.././hal/sam3u1c/inc/udc.h **** 	  udc_attach();
 152:.././hal/sam3u1c/inc/udc.h **** 	}
 153:.././hal/sam3u1c/inc/udc.h **** \endcode
 154:.././hal/sam3u1c/inc/udc.h ****  *
 155:.././hal/sam3u1c/inc/udc.h ****  * - Case of battery charging. conf_usb.h file contains define
 156:.././hal/sam3u1c/inc/udc.h ****  * USB_DEVICE_ATTACH_AUTO_DISABLE:
 157:.././hal/sam3u1c/inc/udc.h ****  * \code #define USB_DEVICE_ATTACH_AUTO_DISABLE \endcode
 158:.././hal/sam3u1c/inc/udc.h ****  * User C file contains:
 159:.././hal/sam3u1c/inc/udc.h ****  * \code  
 160:.././hal/sam3u1c/inc/udc.h **** 	Event VBUS present() // VBUS interrupt or GPIO interrupt or ..
 161:.././hal/sam3u1c/inc/udc.h **** 	{
 162:.././hal/sam3u1c/inc/udc.h **** 	  // Authorize battery charging, but wait key press to start USB.
 163:.././hal/sam3u1c/inc/udc.h **** 	}
 164:.././hal/sam3u1c/inc/udc.h **** 	Event Key press()
 165:.././hal/sam3u1c/inc/udc.h **** 	{
 166:.././hal/sam3u1c/inc/udc.h **** 	  // Stop batteries charging
 167:.././hal/sam3u1c/inc/udc.h **** 	  // Start USB
 168:.././hal/sam3u1c/inc/udc.h **** 	  udc_attach();
 169:.././hal/sam3u1c/inc/udc.h **** 	}
 170:.././hal/sam3u1c/inc/udc.h **** \endcode
 171:.././hal/sam3u1c/inc/udc.h ****  */
 172:.././hal/sam3u1c/inc/udc.h **** static inline bool udc_include_vbus_monitoring(void)
 173:.././hal/sam3u1c/inc/udc.h **** {
 174:.././hal/sam3u1c/inc/udc.h **** 	return udd_include_vbus_monitoring();
 175:.././hal/sam3u1c/inc/udc.h **** }
 176:.././hal/sam3u1c/inc/udc.h **** 
 177:.././hal/sam3u1c/inc/udc.h **** /*! \brief Start the USB Device stack
 178:.././hal/sam3u1c/inc/udc.h ****  */
 179:.././hal/sam3u1c/inc/udc.h **** void udc_start(void);
 180:.././hal/sam3u1c/inc/udc.h **** 
 181:.././hal/sam3u1c/inc/udc.h **** /*! \brief Stop the USB Device stack
 182:.././hal/sam3u1c/inc/udc.h ****  */
 183:.././hal/sam3u1c/inc/udc.h **** void udc_stop(void);
 184:.././hal/sam3u1c/inc/udc.h **** 
 185:.././hal/sam3u1c/inc/udc.h **** /**
 186:.././hal/sam3u1c/inc/udc.h ****  * \brief Attach device to the bus when possible
 187:.././hal/sam3u1c/inc/udc.h ****  *
 188:.././hal/sam3u1c/inc/udc.h ****  * \warning If a VBus control is included in driver,
 189:.././hal/sam3u1c/inc/udc.h ****  * then it will attach device when an acceptable Vbus
 190:.././hal/sam3u1c/inc/udc.h ****  * level from the host is detected.
 191:.././hal/sam3u1c/inc/udc.h ****  */
 192:.././hal/sam3u1c/inc/udc.h **** static inline void udc_attach(void)
 193:.././hal/sam3u1c/inc/udc.h **** {
 194:.././hal/sam3u1c/inc/udc.h **** 	udd_attach();
 195:.././hal/sam3u1c/inc/udc.h **** }
 196:.././hal/sam3u1c/inc/udc.h **** 
 197:.././hal/sam3u1c/inc/udc.h **** 
 198:.././hal/sam3u1c/inc/udc.h **** /**
 199:.././hal/sam3u1c/inc/udc.h ****  * \brief Detaches the device from the bus
 200:.././hal/sam3u1c/inc/udc.h ****  *
 201:.././hal/sam3u1c/inc/udc.h ****  * The driver must remove pull-up on USB line D- or D+.
 202:.././hal/sam3u1c/inc/udc.h ****  */
 203:.././hal/sam3u1c/inc/udc.h **** static inline void udc_detach(void)
 204:.././hal/sam3u1c/inc/udc.h **** {
 758              	 .loc 5 204 1
 759              	 .cfi_startproc
 760              	 
 761              	 
 762 0000 80B5     	 push {r7,lr}
 763              	.LCFI48:
 764              	 .cfi_def_cfa_offset 8
 765              	 .cfi_offset 7,-8
 766              	 .cfi_offset 14,-4
 767 0002 00AF     	 add r7,sp,#0
 768              	.LCFI49:
 769              	 .cfi_def_cfa_register 7
 205:.././hal/sam3u1c/inc/udc.h **** 	udd_detach();
 770              	 .loc 5 205 2
 771 0004 014B     	 ldr r3,.L68
 772 0006 9847     	 blx r3
 773              	.LVL14:
 206:.././hal/sam3u1c/inc/udc.h **** }
 774              	 .loc 5 206 1
 775 0008 00BF     	 nop
 776 000a 80BD     	 pop {r7,pc}
 777              	.L69:
 778              	 .align 2
 779              	.L68:
 780 000c 00000000 	 .word udd_detach
 781              	 .cfi_endproc
 782              	.LFE173:
 784              	 .global g_captureinprogress
 785              	 .section .data.g_captureinprogress,"aw"
 788              	g_captureinprogress:
 789 0000 01       	 .byte 1
 790              	 .section .data.main_b_vendor_enable,"aw"
 793              	main_b_vendor_enable:
 794 0000 01       	 .byte 1
 795              	 .section .bss.active,"aw",%nobits
 798              	active:
 799 0000 00       	 .space 1
 800              	 .global USB_PWR_STATE
 801              	 .section .bss.USB_PWR_STATE,"aw",%nobits
 804              	USB_PWR_STATE:
 805 0000 00       	 .space 1
 806              	 .section .bss.main_buf_loopback,"aw",%nobits
 807              	 .align 2
 810              	main_buf_loopback:
 811 0000 00000000 	 .space 1024
 811      00000000 
 811      00000000 
 811      00000000 
 811      00000000 
 812              	 .section .text.main_suspend_action,"ax",%progbits
 813              	 .align 1
 814              	 .global main_suspend_action
 815              	 .syntax unified
 816              	 .thumb
 817              	 .thumb_func
 818              	 .fpu softvfp
 820              	main_suspend_action:
 821              	.LFB188:
 822              	 .file 6 "usb.c"
   1:usb.c         **** /*
   2:usb.c         ****   Copyright (c) 2014-2015 NewAE Technology Inc. All rights reserved.
   3:usb.c         ****   This program is free software: you can redistribute it and/or modify
   4:usb.c         ****   it under the terms of the GNU General Public License as published by
   5:usb.c         ****   the Free Software Foundation, either version 3 of the License, or
   6:usb.c         ****   (at your option) any later version.
   7:usb.c         ****   This program is distributed in the hope that it will be useful,
   8:usb.c         ****   but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:usb.c         ****   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:usb.c         ****   GNU General Public License for more details.
  11:usb.c         ****   You should have received a copy of the GNU General Public License
  12:usb.c         ****   along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:usb.c         **** */
  14:usb.c         **** 
  15:usb.c         **** #include <asf.h>
  16:usb.c         **** #include "conf_usb.h"
  17:usb.c         **** #include "stdio_serial.h"
  18:usb.c         **** #include "ui.h"
  19:usb.c         **** #include "genclk.h"
  20:usb.c         **** #include "usb.h"
  21:usb.c         **** #include "usb_xmem.h"
  22:usb.c         **** #include "fpga_program.h"
  23:usb.c         **** #include "circbuffer.h"
  24:usb.c         **** #include <string.h>
  25:usb.c         **** #include <cw521.h>
  26:usb.c         **** 
  27:usb.c         **** #define FW_VER_MAJOR 1
  28:usb.c         **** #define FW_VER_MINOR 1
  29:usb.c         **** #define FW_VER_DEBUG 0
  30:usb.c         **** 
  31:usb.c         **** #define REQ_MEMREAD_BULK 0x10
  32:usb.c         **** #define REQ_MEMWRITE_BULK 0x11
  33:usb.c         **** #define REQ_MEMREAD_CTRL 0x12
  34:usb.c         **** #define REQ_MEMWRITE_CTRL 0x13
  35:usb.c         **** #define REQ_MEMSTREAM 0x14
  36:usb.c         **** #define REQ_FPGA_STATUS 0x15
  37:usb.c         **** #define REQ_FPGA_PROGRAM 0x16
  38:usb.c         **** #define REQ_FW_VERSION 0x17
  39:usb.c         **** #define REQ_USART0_DATA 0x1A
  40:usb.c         **** #define REQ_USART0_CONFIG 0x1B
  41:usb.c         **** #define REQ_SCARD_DATA 0x1C
  42:usb.c         **** #define REQ_SCARD_CONFIG 0x1D
  43:usb.c         **** #define REQ_SCARD_AUX 0x1E
  44:usb.c         **** #define REQ_USART2DUMP_ENABLE 0x1F
  45:usb.c         **** #define REQ_XMEGA_PROGRAM 0x20
  46:usb.c         **** #define REQ_AVR_PROGRAM 0x21
  47:usb.c         **** #define REQ_SAM3U_CFG 0x22
  48:usb.c         **** #define REQ_CC_PROGRAM 0x23
  49:usb.c         **** #define REQ_CHANGE_PWR 0x24
  50:usb.c         **** #define REQ_FPGA_RESET 0x25
  51:usb.c         **** #define REQ_SPI_ADC 0x26
  52:usb.c         **** 
  53:usb.c         **** #define USART_TARGET USART0
  54:usb.c         **** #define PIN_USART0_RXD	         (PIO_PA19_IDX)
  55:usb.c         **** #define PIN_USART0_RXD_FLAGS      (PIO_PERIPH_A | PIO_DEFAULT)
  56:usb.c         **** #define PIN_USART0_TXD	        (PIO_PA18_IDX)
  57:usb.c         **** #define PIN_USART0_TXD_FLAGS      (PIO_PERIPH_A | PIO_DEFAULT)
  58:usb.c         **** volatile bool g_captureinprogress = true;
  59:usb.c         **** 
  60:usb.c         **** static volatile bool main_b_vendor_enable = true;
  61:usb.c         **** static bool active = false;
  62:usb.c         **** 
  63:usb.c         **** uint8_t USB_PWR_STATE = 0;
  64:usb.c         **** 
  65:usb.c         **** COMPILER_WORD_ALIGNED
  66:usb.c         **** static uint8_t main_buf_loopback[MAIN_LOOPBACK_SIZE];
  67:usb.c         **** 
  68:usb.c         **** void main_vendor_bulk_in_received(udd_ep_status_t status,
  69:usb.c         ****                                   iram_size_t nb_transfered, udd_ep_id_t ep);
  70:usb.c         **** void main_vendor_bulk_out_received(udd_ep_status_t status,
  71:usb.c         ****                                    iram_size_t nb_transfered, udd_ep_id_t ep);
  72:usb.c         **** 
  73:usb.c         **** //this stuff just turns leds on and off
  74:usb.c         **** void main_suspend_action(void)
  75:usb.c         **** {
 823              	 .loc 6 75 1
 824              	 .cfi_startproc
 825              	 
 826              	 
 827 0000 80B5     	 push {r7,lr}
 828              	.LCFI50:
 829              	 .cfi_def_cfa_offset 8
 830              	 .cfi_offset 7,-8
 831              	 .cfi_offset 14,-4
 832 0002 00AF     	 add r7,sp,#0
 833              	.LCFI51:
 834              	 .cfi_def_cfa_register 7
  76:usb.c         **** 	active = false;
 835              	 .loc 6 76 9
 836 0004 034B     	 ldr r3,.L71
 837 0006 0022     	 movs r2,#0
 838 0008 1A70     	 strb r2,[r3]
  77:usb.c         **** 	ui_powerdown();
 839              	 .loc 6 77 2
 840 000a 034B     	 ldr r3,.L71+4
 841 000c 9847     	 blx r3
 842              	.LVL15:
  78:usb.c         **** }
 843              	 .loc 6 78 1
 844 000e 00BF     	 nop
 845 0010 80BD     	 pop {r7,pc}
 846              	.L72:
 847 0012 00BF     	 .align 2
 848              	.L71:
 849 0014 00000000 	 .word active
 850 0018 00000000 	 .word ui_powerdown
 851              	 .cfi_endproc
 852              	.LFE188:
 854              	 .section .text.main_resume_action,"ax",%progbits
 855              	 .align 1
 856              	 .global main_resume_action
 857              	 .syntax unified
 858              	 .thumb
 859              	 .thumb_func
 860              	 .fpu softvfp
 862              	main_resume_action:
 863              	.LFB189:
  79:usb.c         **** 
  80:usb.c         **** void main_resume_action(void)
  81:usb.c         **** {
 864              	 .loc 6 81 1
 865              	 .cfi_startproc
 866              	 
 867              	 
 868 0000 80B5     	 push {r7,lr}
 869              	.LCFI52:
 870              	 .cfi_def_cfa_offset 8
 871              	 .cfi_offset 7,-8
 872              	 .cfi_offset 14,-4
 873 0002 00AF     	 add r7,sp,#0
 874              	.LCFI53:
 875              	 .cfi_def_cfa_register 7
  82:usb.c         ****     ui_wakeup();
 876              	 .loc 6 82 5
 877 0004 014B     	 ldr r3,.L74
 878 0006 9847     	 blx r3
 879              	.LVL16:
  83:usb.c         **** }
 880              	 .loc 6 83 1
 881 0008 00BF     	 nop
 882 000a 80BD     	 pop {r7,pc}
 883              	.L75:
 884              	 .align 2
 885              	.L74:
 886 000c 00000000 	 .word ui_wakeup
 887              	 .cfi_endproc
 888              	.LFE189:
 890              	 .section .text.main_sof_action,"ax",%progbits
 891              	 .align 1
 892              	 .global main_sof_action
 893              	 .syntax unified
 894              	 .thumb
 895              	 .thumb_func
 896              	 .fpu softvfp
 898              	main_sof_action:
 899              	.LFB190:
  84:usb.c         **** 
  85:usb.c         **** void main_sof_action(void)
  86:usb.c         **** {
 900              	 .loc 6 86 1
 901              	 .cfi_startproc
 902              	 
 903              	 
 904 0000 80B5     	 push {r7,lr}
 905              	.LCFI54:
 906              	 .cfi_def_cfa_offset 8
 907              	 .cfi_offset 7,-8
 908              	 .cfi_offset 14,-4
 909 0002 00AF     	 add r7,sp,#0
 910              	.LCFI55:
 911              	 .cfi_def_cfa_register 7
  87:usb.c         ****     if (!main_b_vendor_enable)
 912              	 .loc 6 87 9
 913 0004 084B     	 ldr r3,.L80
 914 0006 1B78     	 ldrb r3,[r3]
 915 0008 DBB2     	 uxtb r3,r3
 916 000a 83F00103 	 eor r3,r3,#1
 917 000e DBB2     	 uxtb r3,r3
 918              	 .loc 6 87 8
 919 0010 002B     	 cmp r3,#0
 920 0012 06D1     	 bne .L79
  88:usb.c         ****         return;
  89:usb.c         ****     ui_process(udd_get_frame_number());
 921              	 .loc 6 89 5
 922 0014 054B     	 ldr r3,.L80+4
 923 0016 9847     	 blx r3
 924              	.LVL17:
 925 0018 0346     	 mov r3,r0
 926 001a 1846     	 mov r0,r3
 927 001c 044B     	 ldr r3,.L80+8
 928 001e 9847     	 blx r3
 929              	.LVL18:
 930 0020 00E0     	 b .L76
 931              	.L79:
  88:usb.c         ****         return;
 932              	 .loc 6 88 9
 933 0022 00BF     	 nop
 934              	.L76:
  90:usb.c         **** }
 935              	 .loc 6 90 1
 936 0024 80BD     	 pop {r7,pc}
 937              	.L81:
 938 0026 00BF     	 .align 2
 939              	.L80:
 940 0028 00000000 	 .word main_b_vendor_enable
 941 002c 00000000 	 .word udd_get_frame_number
 942 0030 00000000 	 .word ui_process
 943              	 .cfi_endproc
 944              	.LFE190:
 946              	 .section .text.main_vendor_enable,"ax",%progbits
 947              	 .align 1
 948              	 .global main_vendor_enable
 949              	 .syntax unified
 950              	 .thumb
 951              	 .thumb_func
 952              	 .fpu softvfp
 954              	main_vendor_enable:
 955              	.LFB191:
  91:usb.c         **** 
  92:usb.c         **** bool main_vendor_enable(void)
  93:usb.c         **** {
 956              	 .loc 6 93 1
 957              	 .cfi_startproc
 958              	 
 959              	 
 960 0000 80B5     	 push {r7,lr}
 961              	.LCFI56:
 962              	 .cfi_def_cfa_offset 8
 963              	 .cfi_offset 7,-8
 964              	 .cfi_offset 14,-4
 965 0002 00AF     	 add r7,sp,#0
 966              	.LCFI57:
 967              	 .cfi_def_cfa_register 7
  94:usb.c         ****     active = true;
 968              	 .loc 6 94 12
 969 0004 074B     	 ldr r3,.L84
 970 0006 0122     	 movs r2,#1
 971 0008 1A70     	 strb r2,[r3]
  95:usb.c         ****     main_b_vendor_enable = true;
 972              	 .loc 6 95 26
 973 000a 074B     	 ldr r3,.L84+4
 974 000c 0122     	 movs r2,#1
 975 000e 1A70     	 strb r2,[r3]
  96:usb.c         ****     // Start data reception on OUT endpoints
  97:usb.c         **** #if UDI_VENDOR_EPS_SIZE_BULK_FS
  98:usb.c         ****     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
  99:usb.c         ****     udi_vendor_bulk_out_run(
 976              	 .loc 6 99 5
 977 0010 064A     	 ldr r2,.L84+8
 978 0012 4FF48061 	 mov r1,#1024
 979 0016 0648     	 ldr r0,.L84+12
 980 0018 064B     	 ldr r3,.L84+16
 981 001a 9847     	 blx r3
 982              	.LVL19:
 100:usb.c         ****         main_buf_loopback,
 101:usb.c         ****         sizeof(main_buf_loopback),
 102:usb.c         ****         main_vendor_bulk_out_received);
 103:usb.c         **** #endif
 104:usb.c         ****     return true;
 983              	 .loc 6 104 12
 984 001c 0123     	 movs r3,#1
 105:usb.c         **** }
 985              	 .loc 6 105 1
 986 001e 1846     	 mov r0,r3
 987 0020 80BD     	 pop {r7,pc}
 988              	.L85:
 989 0022 00BF     	 .align 2
 990              	.L84:
 991 0024 00000000 	 .word active
 992 0028 00000000 	 .word main_b_vendor_enable
 993 002c 00000000 	 .word main_vendor_bulk_out_received
 994 0030 00000000 	 .word main_buf_loopback
 995 0034 00000000 	 .word udi_vendor_bulk_out_run
 996              	 .cfi_endproc
 997              	.LFE191:
 999              	 .section .text.main_vendor_disable,"ax",%progbits
 1000              	 .align 1
 1001              	 .global main_vendor_disable
 1002              	 .syntax unified
 1003              	 .thumb
 1004              	 .thumb_func
 1005              	 .fpu softvfp
 1007              	main_vendor_disable:
 1008              	.LFB192:
 106:usb.c         **** 
 107:usb.c         **** void main_vendor_disable(void)
 108:usb.c         **** {
 1009              	 .loc 6 108 1
 1010              	 .cfi_startproc
 1011              	 
 1012              	 
 1013              	 
 1014 0000 80B4     	 push {r7}
 1015              	.LCFI58:
 1016              	 .cfi_def_cfa_offset 4
 1017              	 .cfi_offset 7,-4
 1018 0002 00AF     	 add r7,sp,#0
 1019              	.LCFI59:
 1020              	 .cfi_def_cfa_register 7
 109:usb.c         ****     main_b_vendor_enable = false;
 1021              	 .loc 6 109 26
 1022 0004 034B     	 ldr r3,.L87
 1023 0006 0022     	 movs r2,#0
 1024 0008 1A70     	 strb r2,[r3]
 110:usb.c         **** }
 1025              	 .loc 6 110 1
 1026 000a 00BF     	 nop
 1027 000c BD46     	 mov sp,r7
 1028              	.LCFI60:
 1029              	 .cfi_def_cfa_register 13
 1030              	 
 1031 000e 80BC     	 pop {r7}
 1032              	.LCFI61:
 1033              	 .cfi_restore 7
 1034              	 .cfi_def_cfa_offset 0
 1035 0010 7047     	 bx lr
 1036              	.L88:
 1037 0012 00BF     	 .align 2
 1038              	.L87:
 1039 0014 00000000 	 .word main_b_vendor_enable
 1040              	 .cfi_endproc
 1041              	.LFE192:
 1043              	 .section .bss.ctrlbuffer,"aw",%nobits
 1044              	 .align 2
 1047              	ctrlbuffer:
 1048 0000 00000000 	 .space 64
 1048      00000000 
 1048      00000000 
 1048      00000000 
 1048      00000000 
 1049              	 .section .bss.blockendpoint_usage,"aw",%nobits
 1052              	blockendpoint_usage:
 1053 0000 00       	 .space 1
 1054              	 .section .bss.ctrlmemread_buf,"aw",%nobits
 1055              	 .align 2
 1058              	ctrlmemread_buf:
 1059 0000 00000000 	 .space 4
 1060              	 .section .bss.ctrlmemread_size,"aw",%nobits
 1061              	 .align 2
 1064              	ctrlmemread_size:
 1065 0000 00000000 	 .space 4
 1066              	 .section .text.ctrl_readmem_bulk,"ax",%progbits
 1067              	 .align 1
 1068              	 .global ctrl_readmem_bulk
 1069              	 .syntax unified
 1070              	 .thumb
 1071              	 .thumb_func
 1072              	 .fpu softvfp
 1074              	ctrl_readmem_bulk:
 1075              	.LFB193:
 111:usb.c         **** 
 112:usb.c         **** #define REQ_MEMREAD_BULK 0x10
 113:usb.c         **** #define REQ_MEMWRITE_BULK 0x11
 114:usb.c         **** #define REQ_MEMREAD_CTRL 0x12
 115:usb.c         **** #define REQ_MEMWRITE_CTRL 0x13
 116:usb.c         **** #define REQ_FW_VERSION 0x17
 117:usb.c         **** #define REQ_SAM3U_CFG 0x22
 118:usb.c         **** 
 119:usb.c         **** COMPILER_WORD_ALIGNED static uint8_t ctrlbuffer[64];
 120:usb.c         **** #define CTRLBUFFER_WORDPTR ((uint32_t *) ((void *)ctrlbuffer))
 121:usb.c         **** 
 122:usb.c         **** typedef enum {
 123:usb.c         ****     bep_emem=0,
 124:usb.c         ****     bep_fpgabitstream=10
 125:usb.c         **** } blockep_usage_t;
 126:usb.c         **** 
 127:usb.c         **** static blockep_usage_t blockendpoint_usage = bep_emem;
 128:usb.c         **** 
 129:usb.c         **** static uint8_t * ctrlmemread_buf;
 130:usb.c         **** static unsigned int ctrlmemread_size;
 131:usb.c         **** 
 132:usb.c         **** void ctrl_readmem_bulk(void);
 133:usb.c         **** void ctrl_readmem_ctrl(void);
 134:usb.c         **** void ctrl_writemem_bulk(void);
 135:usb.c         **** void ctrl_writemem_ctrl(void);
 136:usb.c         **** void ctrl_progfpga_bulk(void);
 137:usb.c         **** 
 138:usb.c         **** 
 139:usb.c         **** void ctrl_readmem_bulk(void){
 1076              	 .loc 6 139 29
 1077              	 .cfi_startproc
 1078              	 
 1079              	 
 1080 0000 80B5     	 push {r7,lr}
 1081              	.LCFI62:
 1082              	 .cfi_def_cfa_offset 8
 1083              	 .cfi_offset 7,-8
 1084              	 .cfi_offset 14,-4
 1085 0002 82B0     	 sub sp,sp,#8
 1086              	.LCFI63:
 1087              	 .cfi_def_cfa_offset 16
 1088 0004 00AF     	 add r7,sp,#0
 1089              	.LCFI64:
 1090              	 .cfi_def_cfa_register 7
 140:usb.c         ****     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 1091              	 .loc 6 140 25
 1092 0006 0F4B     	 ldr r3,.L91
 1093              	 .loc 6 140 14
 1094 0008 1B68     	 ldr r3,[r3]
 1095 000a 7B60     	 str r3,[r7,#4]
 141:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 1096              	 .loc 6 141 14
 1097 000c 0D4B     	 ldr r3,.L91
 1098 000e 5B68     	 ldr r3,[r3,#4]
 1099 0010 3B60     	 str r3,[r7]
 142:usb.c         **** 
 143:usb.c         ****     FPGA_releaselock();
 1100              	 .loc 6 143 5
 1101 0012 0D4B     	 ldr r3,.L91+4
 1102 0014 9847     	 blx r3
 1103              	.LVL20:
 144:usb.c         ****     while(!FPGA_setlock(fpga_blockin));
 1104              	 .loc 6 144 10
 1105 0016 00BF     	 nop
 1106              	.L90:
 1107              	 .loc 6 144 12 discriminator 1
 1108 0018 0220     	 movs r0,#2
 1109 001a 0C4B     	 ldr r3,.L91+8
 1110 001c 9847     	 blx r3
 1111              	.LVL21:
 1112 001e 0346     	 mov r3,r0
 1113              	 .loc 6 144 10 discriminator 1
 1114 0020 002B     	 cmp r3,#0
 1115 0022 F9D0     	 beq .L90
 145:usb.c         **** 
 146:usb.c         ****     FPGA_setaddr(address);
 1116              	 .loc 6 146 5
 1117 0024 3868     	 ldr r0,[r7]
 1118 0026 0A4B     	 ldr r3,.L91+12
 1119 0028 9847     	 blx r3
 1120              	.LVL22:
 147:usb.c         **** 
 148:usb.c         ****     /* Do memory read */
 149:usb.c         ****     udi_vendor_bulk_in_run(
 1121              	 .loc 6 149 5
 1122 002a 0A4A     	 ldr r2,.L91+16
 1123 002c 7968     	 ldr r1,[r7,#4]
 1124 002e 4FF0C040 	 mov r0,#1610612736
 1125 0032 094B     	 ldr r3,.L91+20
 1126 0034 9847     	 blx r3
 1127              	.LVL23:
 150:usb.c         ****         (uint8_t *) PSRAM_BASE_ADDRESS,
 151:usb.c         ****         buflen,
 152:usb.c         ****         main_vendor_bulk_in_received
 153:usb.c         ****         );
 154:usb.c         ****     FPGA_releaselock();
 1128              	 .loc 6 154 5
 1129 0036 044B     	 ldr r3,.L91+4
 1130 0038 9847     	 blx r3
 1131              	.LVL24:
 155:usb.c         **** }
 1132              	 .loc 6 155 1
 1133 003a 00BF     	 nop
 1134 003c 0837     	 adds r7,r7,#8
 1135              	.LCFI65:
 1136              	 .cfi_def_cfa_offset 8
 1137 003e BD46     	 mov sp,r7
 1138              	.LCFI66:
 1139              	 .cfi_def_cfa_register 13
 1140              	 
 1141 0040 80BD     	 pop {r7,pc}
 1142              	.L92:
 1143 0042 00BF     	 .align 2
 1144              	.L91:
 1145 0044 00000000 	 .word ctrlbuffer
 1146 0048 00000000 	 .word FPGA_releaselock
 1147 004c 00000000 	 .word FPGA_setlock
 1148 0050 00000000 	 .word FPGA_setaddr
 1149 0054 00000000 	 .word main_vendor_bulk_in_received
 1150 0058 00000000 	 .word udi_vendor_bulk_in_run
 1151              	 .cfi_endproc
 1152              	.LFE193:
 1154              	 .section .text.ctrl_readmem_ctrl,"ax",%progbits
 1155              	 .align 1
 1156              	 .global ctrl_readmem_ctrl
 1157              	 .syntax unified
 1158              	 .thumb
 1159              	 .thumb_func
 1160              	 .fpu softvfp
 1162              	ctrl_readmem_ctrl:
 1163              	.LFB194:
 156:usb.c         **** 
 157:usb.c         **** void ctrl_readmem_ctrl(void){
 1164              	 .loc 6 157 29
 1165              	 .cfi_startproc
 1166              	 
 1167              	 
 1168 0000 80B5     	 push {r7,lr}
 1169              	.LCFI67:
 1170              	 .cfi_def_cfa_offset 8
 1171              	 .cfi_offset 7,-8
 1172              	 .cfi_offset 14,-4
 1173 0002 82B0     	 sub sp,sp,#8
 1174              	.LCFI68:
 1175              	 .cfi_def_cfa_offset 16
 1176 0004 00AF     	 add r7,sp,#0
 1177              	.LCFI69:
 1178              	 .cfi_def_cfa_register 7
 158:usb.c         ****     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 1179              	 .loc 6 158 25
 1180 0006 0F4B     	 ldr r3,.L95
 1181              	 .loc 6 158 14
 1182 0008 1B68     	 ldr r3,[r3]
 1183 000a 7B60     	 str r3,[r7,#4]
 159:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 1184              	 .loc 6 159 14
 1185 000c 0D4B     	 ldr r3,.L95
 1186 000e 5B68     	 ldr r3,[r3,#4]
 1187 0010 3B60     	 str r3,[r7]
 160:usb.c         **** 
 161:usb.c         ****     FPGA_releaselock();
 1188              	 .loc 6 161 5
 1189 0012 0D4B     	 ldr r3,.L95+4
 1190 0014 9847     	 blx r3
 1191              	.LVL25:
 162:usb.c         ****     while(!FPGA_setlock(fpga_ctrlmem));
 1192              	 .loc 6 162 10
 1193 0016 00BF     	 nop
 1194              	.L94:
 1195              	 .loc 6 162 12 discriminator 1
 1196 0018 0520     	 movs r0,#5
 1197 001a 0C4B     	 ldr r3,.L95+8
 1198 001c 9847     	 blx r3
 1199              	.LVL26:
 1200 001e 0346     	 mov r3,r0
 1201              	 .loc 6 162 10 discriminator 1
 1202 0020 002B     	 cmp r3,#0
 1203 0022 F9D0     	 beq .L94
 163:usb.c         **** 
 164:usb.c         ****     /* Set address */
 165:usb.c         ****     FPGA_setaddr(address);
 1204              	 .loc 6 165 5
 1205 0024 3868     	 ldr r0,[r7]
 1206 0026 0A4B     	 ldr r3,.L95+12
 1207 0028 9847     	 blx r3
 1208              	.LVL27:
 166:usb.c         **** 
 167:usb.c         ****     /* Do memory read */
 168:usb.c         ****     ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
 1209              	 .loc 6 168 21
 1210 002a 0A4B     	 ldr r3,.L95+16
 1211 002c 4FF0C042 	 mov r2,#1610612736
 1212 0030 1A60     	 str r2,[r3]
 169:usb.c         **** 
 170:usb.c         ****     /* Set size to read */
 171:usb.c         ****     ctrlmemread_size = buflen;
 1213              	 .loc 6 171 22
 1214 0032 094A     	 ldr r2,.L95+20
 1215 0034 7B68     	 ldr r3,[r7,#4]
 1216 0036 1360     	 str r3,[r2]
 172:usb.c         **** 
 173:usb.c         ****     /* Start Transaction */
 174:usb.c         ****     FPGA_releaselock();
 1217              	 .loc 6 174 5
 1218 0038 034B     	 ldr r3,.L95+4
 1219 003a 9847     	 blx r3
 1220              	.LVL28:
 175:usb.c         **** }
 1221              	 .loc 6 175 1
 1222 003c 00BF     	 nop
 1223 003e 0837     	 adds r7,r7,#8
 1224              	.LCFI70:
 1225              	 .cfi_def_cfa_offset 8
 1226 0040 BD46     	 mov sp,r7
 1227              	.LCFI71:
 1228              	 .cfi_def_cfa_register 13
 1229              	 
 1230 0042 80BD     	 pop {r7,pc}
 1231              	.L96:
 1232              	 .align 2
 1233              	.L95:
 1234 0044 00000000 	 .word ctrlbuffer
 1235 0048 00000000 	 .word FPGA_releaselock
 1236 004c 00000000 	 .word FPGA_setlock
 1237 0050 00000000 	 .word FPGA_setaddr
 1238 0054 00000000 	 .word ctrlmemread_buf
 1239 0058 00000000 	 .word ctrlmemread_size
 1240              	 .cfi_endproc
 1241              	.LFE194:
 1243              	 .section .text.ctrl_writemem_ctrl,"ax",%progbits
 1244              	 .align 1
 1245              	 .global ctrl_writemem_ctrl
 1246              	 .syntax unified
 1247              	 .thumb
 1248              	 .thumb_func
 1249              	 .fpu softvfp
 1251              	ctrl_writemem_ctrl:
 1252              	.LFB195:
 176:usb.c         **** 
 177:usb.c         **** 
 178:usb.c         **** void ctrl_writemem_ctrl(void){
 1253              	 .loc 6 178 30
 1254              	 .cfi_startproc
 1255              	 
 1256              	 
 1257 0000 80B5     	 push {r7,lr}
 1258              	.LCFI72:
 1259              	 .cfi_def_cfa_offset 8
 1260              	 .cfi_offset 7,-8
 1261              	 .cfi_offset 14,-4
 1262 0002 84B0     	 sub sp,sp,#16
 1263              	.LCFI73:
 1264              	 .cfi_def_cfa_offset 24
 1265 0004 00AF     	 add r7,sp,#0
 1266              	.LCFI74:
 1267              	 .cfi_def_cfa_register 7
 179:usb.c         ****     uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 1268              	 .loc 6 179 25
 1269 0006 164B     	 ldr r3,.L101
 1270              	 .loc 6 179 14
 1271 0008 1B68     	 ldr r3,[r3]
 1272 000a BB60     	 str r3,[r7,#8]
 180:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 1273              	 .loc 6 180 14
 1274 000c 144B     	 ldr r3,.L101
 1275 000e 5B68     	 ldr r3,[r3,#4]
 1276 0010 7B60     	 str r3,[r7,#4]
 181:usb.c         **** 
 182:usb.c         ****     uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
 1277              	 .loc 6 182 15
 1278 0012 144B     	 ldr r3,.L101+4
 1279 0014 3B60     	 str r3,[r7]
 183:usb.c         **** 
 184:usb.c         ****     //printf("Writing to %x, %d\n", address, buflen);
 185:usb.c         **** 
 186:usb.c         ****     FPGA_releaselock();
 1280              	 .loc 6 186 5
 1281 0016 144B     	 ldr r3,.L101+8
 1282 0018 9847     	 blx r3
 1283              	.LVL29:
 187:usb.c         ****     while(!FPGA_setlock(fpga_generic));
 1284              	 .loc 6 187 10
 1285 001a 00BF     	 nop
 1286              	.L98:
 1287              	 .loc 6 187 12 discriminator 1
 1288 001c 0120     	 movs r0,#1
 1289 001e 134B     	 ldr r3,.L101+12
 1290 0020 9847     	 blx r3
 1291              	.LVL30:
 1292 0022 0346     	 mov r3,r0
 1293              	 .loc 6 187 10 discriminator 1
 1294 0024 002B     	 cmp r3,#0
 1295 0026 F9D0     	 beq .L98
 188:usb.c         **** 
 189:usb.c         ****     /* Set address */
 190:usb.c         ****     FPGA_setaddr(address);
 1296              	 .loc 6 190 5
 1297 0028 7868     	 ldr r0,[r7,#4]
 1298 002a 114B     	 ldr r3,.L101+16
 1299 002c 9847     	 blx r3
 1300              	.LVL31:
 1301              	.LBB2:
 191:usb.c         **** 
 192:usb.c         ****     /* Start Transaction */
 193:usb.c         **** 
 194:usb.c         ****     /* Do memory write */
 195:usb.c         ****     for(unsigned int i = 0; i < buflen; i++){
 1302              	 .loc 6 195 22
 1303 002e 0023     	 movs r3,#0
 1304 0030 FB60     	 str r3,[r7,#12]
 1305              	 .loc 6 195 5
 1306 0032 0BE0     	 b .L99
 1307              	.L100:
 196:usb.c         ****         xram[i] = ctrlbuf_payload[i];
 1308              	 .loc 6 196 34 discriminator 3
 1309 0034 3A68     	 ldr r2,[r7]
 1310 0036 FB68     	 ldr r3,[r7,#12]
 1311 0038 1A44     	 add r2,r2,r3
 1312              	 .loc 6 196 13 discriminator 3
 1313 003a 0E4B     	 ldr r3,.L101+20
 1314 003c 1968     	 ldr r1,[r3]
 1315 003e FB68     	 ldr r3,[r7,#12]
 1316 0040 0B44     	 add r3,r3,r1
 1317              	 .loc 6 196 34 discriminator 3
 1318 0042 1278     	 ldrb r2,[r2]
 1319              	 .loc 6 196 17 discriminator 3
 1320 0044 1A70     	 strb r2,[r3]
 195:usb.c         ****         xram[i] = ctrlbuf_payload[i];
 1321              	 .loc 6 195 42 discriminator 3
 1322 0046 FB68     	 ldr r3,[r7,#12]
 1323 0048 0133     	 adds r3,r3,#1
 1324 004a FB60     	 str r3,[r7,#12]
 1325              	.L99:
 195:usb.c         ****         xram[i] = ctrlbuf_payload[i];
 1326              	 .loc 6 195 5 discriminator 1
 1327 004c FA68     	 ldr r2,[r7,#12]
 1328 004e BB68     	 ldr r3,[r7,#8]
 1329 0050 9A42     	 cmp r2,r3
 1330 0052 EFD3     	 bcc .L100
 1331              	.LBE2:
 197:usb.c         ****     }
 198:usb.c         **** 
 199:usb.c         ****     FPGA_releaselock();
 1332              	 .loc 6 199 5
 1333 0054 044B     	 ldr r3,.L101+8
 1334 0056 9847     	 blx r3
 1335              	.LVL32:
 200:usb.c         **** }
 1336              	 .loc 6 200 1
 1337 0058 00BF     	 nop
 1338 005a 1037     	 adds r7,r7,#16
 1339              	.LCFI75:
 1340              	 .cfi_def_cfa_offset 8
 1341 005c BD46     	 mov sp,r7
 1342              	.LCFI76:
 1343              	 .cfi_def_cfa_register 13
 1344              	 
 1345 005e 80BD     	 pop {r7,pc}
 1346              	.L102:
 1347              	 .align 2
 1348              	.L101:
 1349 0060 00000000 	 .word ctrlbuffer
 1350 0064 08000000 	 .word ctrlbuffer+8
 1351 0068 00000000 	 .word FPGA_releaselock
 1352 006c 00000000 	 .word FPGA_setlock
 1353 0070 00000000 	 .word FPGA_setaddr
 1354 0074 00000000 	 .word xram
 1355              	 .cfi_endproc
 1356              	.LFE195:
 1358              	 .section .bss.bulkread_address,"aw",%nobits
 1359              	 .align 2
 1362              	bulkread_address:
 1363 0000 00000000 	 .space 4
 1364              	 .section .bss.bulkread_len,"aw",%nobits
 1365              	 .align 2
 1368              	bulkread_len:
 1369 0000 00000000 	 .space 4
 1370              	 .section .text.ctrl_writemem_bulk,"ax",%progbits
 1371              	 .align 1
 1372              	 .global ctrl_writemem_bulk
 1373              	 .syntax unified
 1374              	 .thumb
 1375              	 .thumb_func
 1376              	 .fpu softvfp
 1378              	ctrl_writemem_bulk:
 1379              	.LFB196:
 201:usb.c         **** 
 202:usb.c         **** static uint32_t bulkread_address = 0;
 203:usb.c         **** static uint32_t bulkread_len = 0;
 204:usb.c         **** 
 205:usb.c         **** void ctrl_writemem_bulk(void){
 1380              	 .loc 6 205 30
 1381              	 .cfi_startproc
 1382              	 
 1383              	 
 1384 0000 80B5     	 push {r7,lr}
 1385              	.LCFI77:
 1386              	 .cfi_def_cfa_offset 8
 1387              	 .cfi_offset 7,-8
 1388              	 .cfi_offset 14,-4
 1389 0002 82B0     	 sub sp,sp,#8
 1390              	.LCFI78:
 1391              	 .cfi_def_cfa_offset 16
 1392 0004 00AF     	 add r7,sp,#0
 1393              	.LCFI79:
 1394              	 .cfi_def_cfa_register 7
 206:usb.c         **** //uint32_t buflen = *(CTRLBUFFER_WORDPTR);
 207:usb.c         ****     uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
 1395              	 .loc 6 207 14
 1396 0006 0A4B     	 ldr r3,.L105
 1397 0008 5B68     	 ldr r3,[r3,#4]
 1398 000a 7B60     	 str r3,[r7,#4]
 208:usb.c         **** 
 209:usb.c         ****     // TODO: see block in
 210:usb.c         ****     FPGA_releaselock();
 1399              	 .loc 6 210 5
 1400 000c 094B     	 ldr r3,.L105+4
 1401 000e 9847     	 blx r3
 1402              	.LVL33:
 211:usb.c         ****     while(!FPGA_setlock(fpga_blockout));
 1403              	 .loc 6 211 10
 1404 0010 00BF     	 nop
 1405              	.L104:
 1406              	 .loc 6 211 12 discriminator 1
 1407 0012 0420     	 movs r0,#4
 1408 0014 084B     	 ldr r3,.L105+8
 1409 0016 9847     	 blx r3
 1410              	.LVL34:
 1411 0018 0346     	 mov r3,r0
 1412              	 .loc 6 211 10 discriminator 1
 1413 001a 002B     	 cmp r3,#0
 1414 001c F9D0     	 beq .L104
 212:usb.c         **** 
 213:usb.c         ****     /* Set address */
 214:usb.c         ****     FPGA_setaddr(address);
 1415              	 .loc 6 214 5
 1416 001e 7868     	 ldr r0,[r7,#4]
 1417 0020 064B     	 ldr r3,.L105+12
 1418 0022 9847     	 blx r3
 1419              	.LVL35:
 215:usb.c         **** 
 216:usb.c         ****     /* Transaction done in generic callback */
 217:usb.c         ****     FPGA_releaselock();
 1420              	 .loc 6 217 5
 1421 0024 034B     	 ldr r3,.L105+4
 1422 0026 9847     	 blx r3
 1423              	.LVL36:
 218:usb.c         **** }
 1424              	 .loc 6 218 1
 1425 0028 00BF     	 nop
 1426 002a 0837     	 adds r7,r7,#8
 1427              	.LCFI80:
 1428              	 .cfi_def_cfa_offset 8
 1429 002c BD46     	 mov sp,r7
 1430              	.LCFI81:
 1431              	 .cfi_def_cfa_register 13
 1432              	 
 1433 002e 80BD     	 pop {r7,pc}
 1434              	.L106:
 1435              	 .align 2
 1436              	.L105:
 1437 0030 00000000 	 .word ctrlbuffer
 1438 0034 00000000 	 .word FPGA_releaselock
 1439 0038 00000000 	 .word FPGA_setlock
 1440 003c 00000000 	 .word FPGA_setaddr
 1441              	 .cfi_endproc
 1442              	.LFE196:
 1444              	 .section .text.ctrl_sam3ucfg_cb,"ax",%progbits
 1445              	 .align 1
 1446              	 .syntax unified
 1447              	 .thumb
 1448              	 .thumb_func
 1449              	 .fpu softvfp
 1451              	ctrl_sam3ucfg_cb:
 1452              	.LFB197:
 219:usb.c         **** 
 220:usb.c         **** static void ctrl_sam3ucfg_cb(void)
 221:usb.c         **** {
 1453              	 .loc 6 221 1
 1454              	 .cfi_startproc
 1455              	 
 1456              	 
 1457 0000 80B5     	 push {r7,lr}
 1458              	.LCFI82:
 1459              	 .cfi_def_cfa_offset 8
 1460              	 .cfi_offset 7,-8
 1461              	 .cfi_offset 14,-4
 1462 0002 00AF     	 add r7,sp,#0
 1463              	.LCFI83:
 1464              	 .cfi_def_cfa_register 7
 222:usb.c         ****     switch(udd_g_ctrlreq.req.wValue & 0xFF)
 1465              	 .loc 6 222 29
 1466 0004 194B     	 ldr r3,.L116
 1467 0006 5B88     	 ldrh r3,[r3,#2]
 1468              	 .loc 6 222 37
 1469 0008 DBB2     	 uxtb r3,r3
 1470              	 .loc 6 222 5
 1471 000a 032B     	 cmp r3,#3
 1472 000c 14D0     	 beq .L108
 1473 000e 032B     	 cmp r3,#3
 1474 0010 29DC     	 bgt .L115
 1475 0012 012B     	 cmp r3,#1
 1476 0014 02D0     	 beq .L110
 1477 0016 022B     	 cmp r3,#2
 1478 0018 0AD0     	 beq .L111
 223:usb.c         ****     {
 224:usb.c         ****         /* Turn on slow clock */
 225:usb.c         ****     case 0x01:
 226:usb.c         ****         osc_enable(OSC_MAINCK_XTAL);
 227:usb.c         ****         osc_wait_ready(OSC_MAINCK_XTAL);
 228:usb.c         ****         pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 229:usb.c         ****         break;
 230:usb.c         **** 
 231:usb.c         ****         /* Turn off slow clock */
 232:usb.c         ****     case 0x02:
 233:usb.c         ****         pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
 234:usb.c         ****         break;
 235:usb.c         **** 
 236:usb.c         ****         /* Jump to ROM-resident bootloader */
 237:usb.c         ****     case 0x03:
 238:usb.c         ****         /* Turn off connected stuff */
 239:usb.c         ****         //board_power(0);
 240:usb.c         **** 
 241:usb.c         ****         /* Clear ROM-mapping bit. */
 242:usb.c         ****         efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
 243:usb.c         **** 
 244:usb.c         ****         /* Disconnect USB (will kill connection) */
 245:usb.c         ****         udc_detach();
 246:usb.c         **** 
 247:usb.c         ****         /* With knowledge that I will rise again, I lay down my life. */
 248:usb.c         ****         while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
 249:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 250:usb.c         ****         while(1);
 251:usb.c         ****         break;
 252:usb.c         ****         /* Disconnect USB (will kill stuff) */
 253:usb.c         **** 
 254:usb.c         ****         /* Make the jump */
 255:usb.c         ****         break;
 256:usb.c         **** 
 257:usb.c         ****         /* Oh well, sucks to be you */
 258:usb.c         ****     default:
 259:usb.c         ****         break;
 1479              	 .loc 6 259 9
 1480 001a 24E0     	 b .L115
 1481              	.L110:
 226:usb.c         ****         osc_wait_ready(OSC_MAINCK_XTAL);
 1482              	 .loc 6 226 9
 1483 001c 0620     	 movs r0,#6
 1484 001e 144B     	 ldr r3,.L116+4
 1485 0020 9847     	 blx r3
 1486              	.LVL37:
 227:usb.c         ****         pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 1487              	 .loc 6 227 9
 1488 0022 0620     	 movs r0,#6
 1489 0024 134B     	 ldr r3,.L116+8
 1490 0026 9847     	 blx r3
 1491              	.LVL38:
 228:usb.c         ****         break;
 1492              	 .loc 6 228 9
 1493 0028 1020     	 movs r0,#16
 1494 002a 134B     	 ldr r3,.L116+12
 1495 002c 9847     	 blx r3
 1496              	.LVL39:
 229:usb.c         **** 
 1497              	 .loc 6 229 9
 1498 002e 1BE0     	 b .L112
 1499              	.L111:
 233:usb.c         ****         break;
 1500              	 .loc 6 233 9
 1501 0030 1020     	 movs r0,#16
 1502 0032 124B     	 ldr r3,.L116+16
 1503 0034 9847     	 blx r3
 1504              	.LVL40:
 234:usb.c         **** 
 1505              	 .loc 6 234 9
 1506 0036 17E0     	 b .L112
 1507              	.L108:
 242:usb.c         **** 
 1508              	 .loc 6 242 9
 1509 0038 0122     	 movs r2,#1
 1510 003a 0C21     	 movs r1,#12
 1511 003c 1048     	 ldr r0,.L116+20
 1512 003e 114B     	 ldr r3,.L116+24
 1513 0040 9847     	 blx r3
 1514              	.LVL41:
 245:usb.c         **** 
 1515              	 .loc 6 245 9
 1516 0042 114B     	 ldr r3,.L116+28
 1517 0044 9847     	 blx r3
 1518              	.LVL42:
 248:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 1519              	 .loc 6 248 15
 1520 0046 00BF     	 nop
 1521              	.L113:
 248:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 1522              	 .loc 6 248 20 discriminator 1
 1523 0048 104B     	 ldr r3,.L116+32
 1524 004a 5B68     	 ldr r3,[r3,#4]
 248:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 1525              	 .loc 6 248 30 discriminator 1
 1526 004c 03F40033 	 and r3,r3,#131072
 248:usb.c         ****         RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
 1527              	 .loc 6 248 15 discriminator 1
 1528 0050 002B     	 cmp r3,#0
 1529 0052 F9D1     	 bne .L113
 249:usb.c         ****         while(1);
 1530              	 .loc 6 249 23
 1531 0054 0D4B     	 ldr r3,.L116+32
 1532 0056 1B68     	 ldr r3,[r3]
 1533 0058 0C4A     	 ldr r2,.L116+32
 1534 005a 43F02543 	 orr r3,r3,#-1526726656
 1535 005e 43F00503 	 orr r3,r3,#5
 1536 0062 1360     	 str r3,[r2]
 1537              	.L114:
 250:usb.c         ****         break;
 1538              	 .loc 6 250 14 discriminator 1
 1539 0064 FEE7     	 b .L114
 1540              	.L115:
 1541              	 .loc 6 259 9
 1542 0066 00BF     	 nop
 1543              	.L112:
 260:usb.c         ****     }
 261:usb.c         **** }
 1544              	 .loc 6 261 1
 1545 0068 00BF     	 nop
 1546 006a 80BD     	 pop {r7,pc}
 1547              	.L117:
 1548              	 .align 2
 1549              	.L116:
 1550 006c 00000000 	 .word udd_g_ctrlreq
 1551 0070 00000000 	 .word osc_enable
 1552 0074 00000000 	 .word osc_wait_ready
 1553 0078 00000000 	 .word pmc_switch_mck_to_mainck
 1554 007c 00000000 	 .word pmc_switch_mck_to_pllack
 1555 0080 00080E40 	 .word 1074661376
 1556 0084 00000000 	 .word efc_perform_command
 1557 0088 00000000 	 .word udc_detach
 1558 008c 00120E40 	 .word 1074663936
 1559              	 .cfi_endproc
 1560              	.LFE197:
 1562              	 .section .text.ctrl_progfpga_bulk,"ax",%progbits
 1563              	 .align 1
 1564              	 .global ctrl_progfpga_bulk
 1565              	 .syntax unified
 1566              	 .thumb
 1567              	 .thumb_func
 1568              	 .fpu softvfp
 1570              	ctrl_progfpga_bulk:
 1571              	.LFB198:
 262:usb.c         **** 
 263:usb.c         **** void ctrl_progfpga_bulk(void){
 1572              	 .loc 6 263 30
 1573              	 .cfi_startproc
 1574              	 
 1575              	 
 1576 0000 80B5     	 push {r7,lr}
 1577              	.LCFI84:
 1578              	 .cfi_def_cfa_offset 8
 1579              	 .cfi_offset 7,-8
 1580              	 .cfi_offset 14,-4
 1581 0002 00AF     	 add r7,sp,#0
 1582              	.LCFI85:
 1583              	 .cfi_def_cfa_register 7
 264:usb.c         **** 
 265:usb.c         ****     switch(udd_g_ctrlreq.req.wValue){
 1584              	 .loc 6 265 29
 1585 0004 0D4B     	 ldr r3,.L125
 1586 0006 5B88     	 ldrh r3,[r3,#2]
 1587              	 .loc 6 265 5
 1588 0008 A22B     	 cmp r3,#162
 1589 000a 0FD0     	 beq .L119
 1590 000c A22B     	 cmp r3,#162
 1591 000e 11DC     	 bgt .L124
 1592 0010 A02B     	 cmp r3,#160
 1593 0012 02D0     	 beq .L121
 1594 0014 A12B     	 cmp r3,#161
 1595 0016 03D0     	 beq .L122
 266:usb.c         ****     case 0xA0:
 267:usb.c         ****         fpga_program_setup1();
 268:usb.c         ****         break;
 269:usb.c         **** 
 270:usb.c         ****     case 0xA1:
 271:usb.c         ****         /* Waiting on data... */
 272:usb.c         ****         fpga_program_setup2();
 273:usb.c         ****         blockendpoint_usage = bep_fpgabitstream;
 274:usb.c         ****         break;
 275:usb.c         **** 
 276:usb.c         ****     case 0xA2:
 277:usb.c         ****         /* Done */
 278:usb.c         ****         blockendpoint_usage = bep_emem;
 279:usb.c         ****         break;
 280:usb.c         **** 
 281:usb.c         ****     default:
 282:usb.c         ****         break;
 1596              	 .loc 6 282 9
 1597 0018 0CE0     	 b .L124
 1598              	.L121:
 267:usb.c         ****         break;
 1599              	 .loc 6 267 9
 1600 001a 094B     	 ldr r3,.L125+4
 1601 001c 9847     	 blx r3
 1602              	.LVL43:
 268:usb.c         **** 
 1603              	 .loc 6 268 9
 1604 001e 0AE0     	 b .L123
 1605              	.L122:
 272:usb.c         ****         blockendpoint_usage = bep_fpgabitstream;
 1606              	 .loc 6 272 9
 1607 0020 084B     	 ldr r3,.L125+8
 1608 0022 9847     	 blx r3
 1609              	.LVL44:
 273:usb.c         ****         break;
 1610              	 .loc 6 273 29
 1611 0024 084B     	 ldr r3,.L125+12
 1612 0026 0A22     	 movs r2,#10
 1613 0028 1A70     	 strb r2,[r3]
 274:usb.c         **** 
 1614              	 .loc 6 274 9
 1615 002a 04E0     	 b .L123
 1616              	.L119:
 278:usb.c         ****         break;
 1617              	 .loc 6 278 29
 1618 002c 064B     	 ldr r3,.L125+12
 1619 002e 0022     	 movs r2,#0
 1620 0030 1A70     	 strb r2,[r3]
 279:usb.c         **** 
 1621              	 .loc 6 279 9
 1622 0032 00E0     	 b .L123
 1623              	.L124:
 1624              	 .loc 6 282 9
 1625 0034 00BF     	 nop
 1626              	.L123:
 283:usb.c         ****     }
 284:usb.c         **** }
 1627              	 .loc 6 284 1
 1628 0036 00BF     	 nop
 1629 0038 80BD     	 pop {r7,pc}
 1630              	.L126:
 1631 003a 00BF     	 .align 2
 1632              	.L125:
 1633 003c 00000000 	 .word udd_g_ctrlreq
 1634 0040 00000000 	 .word fpga_program_setup1
 1635 0044 00000000 	 .word fpga_program_setup2
 1636 0048 00000000 	 .word blockendpoint_usage
 1637              	 .cfi_endproc
 1638              	.LFE198:
 1640              	 .section .text.ctrl_fpga_reset,"ax",%progbits
 1641              	 .align 1
 1642              	 .global ctrl_fpga_reset
 1643              	 .syntax unified
 1644              	 .thumb
 1645              	 .thumb_func
 1646              	 .fpu softvfp
 1648              	ctrl_fpga_reset:
 1649              	.LFB199:
 285:usb.c         **** 
 286:usb.c         **** void ctrl_fpga_reset(void) {
 1650              	 .loc 6 286 28
 1651              	 .cfi_startproc
 1652              	 
 1653              	 
 1654 0000 80B5     	 push {r7,lr}
 1655              	.LCFI86:
 1656              	 .cfi_def_cfa_offset 8
 1657              	 .cfi_offset 7,-8
 1658              	 .cfi_offset 14,-4
 1659 0002 00AF     	 add r7,sp,#0
 1660              	.LCFI87:
 1661              	 .cfi_def_cfa_register 7
 287:usb.c         ****   gpio_set_pin_high(PIN_EBI_USB_SPARE0);
 1662              	 .loc 6 287 3
 1663 0004 2620     	 movs r0,#38
 1664 0006 034B     	 ldr r3,.L128
 1665 0008 9847     	 blx r3
 1666              	.LVL45:
 288:usb.c         ****   gpio_set_pin_low(PIN_EBI_USB_SPARE0);
 1667              	 .loc 6 288 3
 1668 000a 2620     	 movs r0,#38
 1669 000c 024B     	 ldr r3,.L128+4
 1670 000e 9847     	 blx r3
 1671              	.LVL46:
 289:usb.c         **** }
 1672              	 .loc 6 289 1
 1673 0010 00BF     	 nop
 1674 0012 80BD     	 pop {r7,pc}
 1675              	.L129:
 1676              	 .align 2
 1677              	.L128:
 1678 0014 00000000 	 .word pio_set_pin_high
 1679 0018 00000000 	 .word pio_set_pin_low
 1680              	 .cfi_endproc
 1681              	.LFE199:
 1683              	 .section .text.ctrl_usart_cb,"ax",%progbits
 1684              	 .align 1
 1685              	 .syntax unified
 1686              	 .thumb
 1687              	 .thumb_func
 1688              	 .fpu softvfp
 1690              	ctrl_usart_cb:
 1691              	.LFB200:
 290:usb.c         **** 
 291:usb.c         **** static void ctrl_usart_cb(void)
 292:usb.c         **** {
 1692              	 .loc 6 292 1
 1693              	 .cfi_startproc
 1694              	 
 1695              	 
 1696 0000 80B5     	 push {r7,lr}
 1697              	.LCFI88:
 1698              	 .cfi_def_cfa_offset 8
 1699              	 .cfi_offset 7,-8
 1700              	 .cfi_offset 14,-4
 1701 0002 00AF     	 add r7,sp,#0
 1702              	.LCFI89:
 1703              	 .cfi_def_cfa_register 7
 293:usb.c         **** 	ctrl_usart(USART_TARGET, false);
 1704              	 .loc 6 293 2
 1705 0004 0021     	 movs r1,#0
 1706 0006 0248     	 ldr r0,.L131
 1707 0008 024B     	 ldr r3,.L131+4
 1708 000a 9847     	 blx r3
 1709              	.LVL47:
 294:usb.c         **** }
 1710              	 .loc 6 294 1
 1711 000c 00BF     	 nop
 1712 000e 80BD     	 pop {r7,pc}
 1713              	.L132:
 1714              	 .align 2
 1715              	.L131:
 1716 0010 00000940 	 .word 1074331648
 1717 0014 00000000 	 .word ctrl_usart
 1718              	 .cfi_endproc
 1719              	.LFE200:
 1721              	 .section .text.ctrl_usart_cb_data,"ax",%progbits
 1722              	 .align 1
 1723              	 .syntax unified
 1724              	 .thumb
 1725              	 .thumb_func
 1726              	 .fpu softvfp
 1728              	ctrl_usart_cb_data:
 1729              	.LFB201:
 295:usb.c         **** 
 296:usb.c         **** static void ctrl_usart_cb_data(void)
 297:usb.c         **** {		
 1730              	 .loc 6 297 1
 1731              	 .cfi_startproc
 1732              	 
 1733              	 
 1734 0000 80B5     	 push {r7,lr}
 1735              	.LCFI90:
 1736              	 .cfi_def_cfa_offset 8
 1737              	 .cfi_offset 7,-8
 1738              	 .cfi_offset 14,-4
 1739 0002 82B0     	 sub sp,sp,#8
 1740              	.LCFI91:
 1741              	 .cfi_def_cfa_offset 16
 1742 0004 00AF     	 add r7,sp,#0
 1743              	.LCFI92:
 1744              	 .cfi_def_cfa_register 7
 298:usb.c         **** 	//Catch heartbleed-style error
 299:usb.c         **** 	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
 1745              	 .loc 6 299 23
 1746 0006 104B     	 ldr r3,.L139
 1747 0008 DA88     	 ldrh r2,[r3,#6]
 1748              	 .loc 6 299 47
 1749 000a 0F4B     	 ldr r3,.L139
 1750 000c 9B89     	 ldrh r3,[r3,#12]
 1751              	 .loc 6 299 5
 1752 000e 9A42     	 cmp r2,r3
 1753 0010 16D8     	 bhi .L138
 1754              	.LBB3:
 300:usb.c         **** 		return;
 301:usb.c         **** 	}
 302:usb.c         **** 	
 303:usb.c         **** 	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
 1755              	 .loc 6 303 11
 1756 0012 0023     	 movs r3,#0
 1757 0014 7B60     	 str r3,[r7,#4]
 1758              	 .loc 6 303 2
 1759 0016 0CE0     	 b .L136
 1760              	.L137:
 1761              	.LBB4:
 304:usb.c         **** 		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
 1762              	 .loc 6 304 57 discriminator 3
 1763 0018 0B4B     	 ldr r3,.L139
 1764 001a 9A68     	 ldr r2,[r3,#8]
 1765              	 .loc 6 304 65 discriminator 3
 1766 001c 7B68     	 ldr r3,[r7,#4]
 1767 001e 1344     	 add r3,r3,r2
 1768 0020 1B78     	 ldrb r3,[r3]
 1769              	 .loc 6 304 3 discriminator 3
 1770 0022 1A46     	 mov r2,r3
 1771 0024 0021     	 movs r1,#0
 1772 0026 0948     	 ldr r0,.L139+4
 1773 0028 094B     	 ldr r3,.L139+8
 1774 002a 9847     	 blx r3
 1775              	.LVL48:
 1776              	.LBE4:
 303:usb.c         **** 		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
 1777              	 .loc 6 303 50 discriminator 3
 1778 002c 7B68     	 ldr r3,[r7,#4]
 1779 002e 0133     	 adds r3,r3,#1
 1780 0030 7B60     	 str r3,[r7,#4]
 1781              	.L136:
 303:usb.c         **** 		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
 1782              	 .loc 6 303 39 discriminator 1
 1783 0032 054B     	 ldr r3,.L139
 1784 0034 DB88     	 ldrh r3,[r3,#6]
 1785 0036 1A46     	 mov r2,r3
 303:usb.c         **** 		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
 1786              	 .loc 6 303 2 discriminator 1
 1787 0038 7B68     	 ldr r3,[r7,#4]
 1788 003a 9342     	 cmp r3,r2
 1789 003c ECDB     	 blt .L137
 1790 003e 00E0     	 b .L133
 1791              	.L138:
 1792              	.LBE3:
 300:usb.c         **** 		return;
 1793              	 .loc 6 300 3
 1794 0040 00BF     	 nop
 1795              	.L133:
 305:usb.c         **** 	}
 306:usb.c         **** }
 1796              	 .loc 6 306 1
 1797 0042 0837     	 adds r7,r7,#8
 1798              	.LCFI93:
 1799              	 .cfi_def_cfa_offset 8
 1800 0044 BD46     	 mov sp,r7
 1801              	.LCFI94:
 1802              	 .cfi_def_cfa_register 13
 1803              	 
 1804 0046 80BD     	 pop {r7,pc}
 1805              	.L140:
 1806              	 .align 2
 1807              	.L139:
 1808 0048 00000000 	 .word udd_g_ctrlreq
 1809 004c 00000940 	 .word 1074331648
 1810 0050 00000000 	 .word usart_driver_putchar
 1811              	 .cfi_endproc
 1812              	.LFE201:
 1814              	 .section .text.spi_adc_cb,"ax",%progbits
 1815              	 .align 1
 1816              	 .syntax unified
 1817              	 .thumb
 1818              	 .thumb_func
 1819              	 .fpu softvfp
 1821              	spi_adc_cb:
 1822              	.LFB202:
 307:usb.c         **** 
 308:usb.c         **** static void spi_adc_cb(void)
 309:usb.c         **** {
 1823              	 .loc 6 309 1
 1824              	 .cfi_startproc
 1825              	 
 1826              	 
 1827 0000 80B5     	 push {r7,lr}
 1828              	.LCFI95:
 1829              	 .cfi_def_cfa_offset 8
 1830              	 .cfi_offset 7,-8
 1831              	 .cfi_offset 14,-4
 1832 0002 00AF     	 add r7,sp,#0
 1833              	.LCFI96:
 1834              	 .cfi_def_cfa_register 7
 310:usb.c         **** 	//Just do single byte writes for now
 311:usb.c         **** 	if (udd_g_ctrlreq.req.wLength > 2){
 1835              	 .loc 6 311 23
 1836 0004 094B     	 ldr r3,.L145
 1837 0006 DB88     	 ldrh r3,[r3,#6]
 1838              	 .loc 6 311 5
 1839 0008 022B     	 cmp r3,#2
 1840 000a 0CD8     	 bhi .L144
 312:usb.c         **** 		return;
 313:usb.c         **** 	}
 314:usb.c         ****     write_spi_adc(udd_g_ctrlreq.payload[0], udd_g_ctrlreq.payload[1]);
 1841              	 .loc 6 314 32
 1842 000c 074B     	 ldr r3,.L145
 1843 000e 9B68     	 ldr r3,[r3,#8]
 1844              	 .loc 6 314 40
 1845 0010 1B78     	 ldrb r3,[r3]
 1846              	 .loc 6 314 5
 1847 0012 1A46     	 mov r2,r3
 1848              	 .loc 6 314 58
 1849 0014 054B     	 ldr r3,.L145
 1850 0016 9B68     	 ldr r3,[r3,#8]
 1851              	 .loc 6 314 66
 1852 0018 0133     	 adds r3,r3,#1
 1853 001a 1B78     	 ldrb r3,[r3]
 1854              	 .loc 6 314 5
 1855 001c 1946     	 mov r1,r3
 1856 001e 1046     	 mov r0,r2
 1857 0020 034B     	 ldr r3,.L145+4
 1858 0022 9847     	 blx r3
 1859              	.LVL49:
 1860 0024 00E0     	 b .L141
 1861              	.L144:
 312:usb.c         **** 		return;
 1862              	 .loc 6 312 3
 1863 0026 00BF     	 nop
 1864              	.L141:
 315:usb.c         **** }
 1865              	 .loc 6 315 1
 1866 0028 80BD     	 pop {r7,pc}
 1867              	.L146:
 1868 002a 00BF     	 .align 2
 1869              	.L145:
 1870 002c 00000000 	 .word udd_g_ctrlreq
 1871 0030 00000000 	 .word write_spi_adc
 1872              	 .cfi_endproc
 1873              	.LFE202:
 1875              	 .section .text.ctrl_xmega_program_void,"ax",%progbits
 1876              	 .align 1
 1877              	 .global ctrl_xmega_program_void
 1878              	 .syntax unified
 1879              	 .thumb
 1880              	 .thumb_func
 1881              	 .fpu softvfp
 1883              	ctrl_xmega_program_void:
 1884              	.LFB203:
 316:usb.c         **** 
 317:usb.c         **** void ctrl_xmega_program_void(void)
 318:usb.c         **** {
 1885              	 .loc 6 318 1
 1886              	 .cfi_startproc
 1887              	 
 1888              	 
 1889 0000 80B5     	 push {r7,lr}
 1890              	.LCFI97:
 1891              	 .cfi_def_cfa_offset 8
 1892              	 .cfi_offset 7,-8
 1893              	 .cfi_offset 14,-4
 1894 0002 00AF     	 add r7,sp,#0
 1895              	.LCFI98:
 1896              	 .cfi_def_cfa_register 7
 319:usb.c         **** 	XPROGProtocol_Command();
 1897              	 .loc 6 319 2
 1898 0004 014B     	 ldr r3,.L148
 1899 0006 9847     	 blx r3
 1900              	.LVL50:
 320:usb.c         **** }
 1901              	 .loc 6 320 1
 1902 0008 00BF     	 nop
 1903 000a 80BD     	 pop {r7,pc}
 1904              	.L149:
 1905              	 .align 2
 1906              	.L148:
 1907 000c 00000000 	 .word XPROGProtocol_Command
 1908              	 .cfi_endproc
 1909              	.LFE203:
 1911              	 .section .text.ctrl_avr_program_void,"ax",%progbits
 1912              	 .align 1
 1913              	 .global ctrl_avr_program_void
 1914              	 .syntax unified
 1915              	 .thumb
 1916              	 .thumb_func
 1917              	 .fpu softvfp
 1919              	ctrl_avr_program_void:
 1920              	.LFB204:
 321:usb.c         **** 
 322:usb.c         **** void ctrl_avr_program_void(void)
 323:usb.c         **** {
 1921              	 .loc 6 323 1
 1922              	 .cfi_startproc
 1923              	 
 1924              	 
 1925 0000 80B5     	 push {r7,lr}
 1926              	.LCFI99:
 1927              	 .cfi_def_cfa_offset 8
 1928              	 .cfi_offset 7,-8
 1929              	 .cfi_offset 14,-4
 1930 0002 00AF     	 add r7,sp,#0
 1931              	.LCFI100:
 1932              	 .cfi_def_cfa_register 7
 324:usb.c         **** 	V2Protocol_ProcessCommand();
 1933              	 .loc 6 324 2
 1934 0004 014B     	 ldr r3,.L151
 1935 0006 9847     	 blx r3
 1936              	.LVL51:
 325:usb.c         **** }
 1937              	 .loc 6 325 1
 1938 0008 00BF     	 nop
 1939 000a 80BD     	 pop {r7,pc}
 1940              	.L152:
 1941              	 .align 2
 1942              	.L151:
 1943 000c 00000000 	 .word V2Protocol_ProcessCommand
 1944              	 .cfi_endproc
 1945              	.LFE204:
 1947              	 .section .text.main_setup_out_received,"ax",%progbits
 1948              	 .align 1
 1949              	 .global main_setup_out_received
 1950              	 .syntax unified
 1951              	 .thumb
 1952              	 .thumb_func
 1953              	 .fpu softvfp
 1955              	main_setup_out_received:
 1956              	.LFB205:
 326:usb.c         **** 
 327:usb.c         **** bool main_setup_out_received(void)
 328:usb.c         **** {
 1957              	 .loc 6 328 1
 1958              	 .cfi_startproc
 1959              	 
 1960              	 
 1961 0000 80B5     	 push {r7,lr}
 1962              	.LCFI101:
 1963              	 .cfi_def_cfa_offset 8
 1964              	 .cfi_offset 7,-8
 1965              	 .cfi_offset 14,-4
 1966 0002 00AF     	 add r7,sp,#0
 1967              	.LCFI102:
 1968              	 .cfi_def_cfa_register 7
 329:usb.c         ****     //Add buffer if used
 330:usb.c         ****     udd_g_ctrlreq.payload = ctrlbuffer;
 1969              	 .loc 6 330 27
 1970 0004 4C4B     	 ldr r3,.L176
 1971 0006 4D4A     	 ldr r2,.L176+4
 1972 0008 9A60     	 str r2,[r3,#8]
 331:usb.c         ****     udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
 1973              	 .loc 6 331 34
 1974 000a 4B4B     	 ldr r3,.L176
 1975 000c DB88     	 ldrh r3,[r3,#6]
 1976 000e 402B     	 cmp r3,#64
 1977 0010 28BF     	 it cs
 1978 0012 4023     	 movcs r3,#64
 1979 0014 9AB2     	 uxth r2,r3
 1980              	 .loc 6 331 32
 1981 0016 484B     	 ldr r3,.L176
 1982 0018 9A81     	 strh r2,[r3,#12]
 332:usb.c         **** 
 333:usb.c         ****     blockendpoint_usage = bep_emem;
 1983              	 .loc 6 333 25
 1984 001a 494B     	 ldr r3,.L176+8
 1985 001c 0022     	 movs r2,#0
 1986 001e 1A70     	 strb r2,[r3]
 334:usb.c         ****     static uint8_t  respbuf[128];
 335:usb.c         ****     switch(udd_g_ctrlreq.req.bRequest){
 1987              	 .loc 6 335 29
 1988 0020 454B     	 ldr r3,.L176
 1989 0022 5B78     	 ldrb r3,[r3,#1]
 1990 0024 103B     	 subs r3,r3,#16
 1991 0026 162B     	 cmp r3,#22
 1992 0028 7AD8     	 bhi .L154
 1993 002a 01A2     	 adr r2,.L156
 1994 002c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1995              	 .p2align 2
 1996              	.L156:
 1997 0030 8D000000 	 .word .L165+1
 1998 0034 B9000000 	 .word .L164+1
 1999 0038 A3000000 	 .word .L163+1
 2000 003c CF000000 	 .word .L162+1
 2001 0040 21010000 	 .word .L154+1
 2002 0044 21010000 	 .word .L154+1
 2003 0048 F9000000 	 .word .L161+1
 2004 004c 21010000 	 .word .L154+1
 2005 0050 21010000 	 .word .L154+1
 2006 0054 21010000 	 .word .L154+1
 2007 0058 EF000000 	 .word .L160+1
 2008 005c E5000000 	 .word .L159+1
 2009 0060 21010000 	 .word .L154+1
 2010 0064 21010000 	 .word .L154+1
 2011 0068 21010000 	 .word .L154+1
 2012 006c 21010000 	 .word .L154+1
 2013 0070 21010000 	 .word .L154+1
 2014 0074 21010000 	 .word .L154+1
 2015 0078 03010000 	 .word .L158+1
 2016 007c 21010000 	 .word .L154+1
 2017 0080 21010000 	 .word .L154+1
 2018 0084 0D010000 	 .word .L157+1
 2019 0088 17010000 	 .word .L155+1
 2020              	 .p2align 1
 2021              	.L165:
 336:usb.c         ****         /* Memory Read */
 337:usb.c         ****     case REQ_MEMREAD_BULK:
 338:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 2022              	 .loc 6 338 13
 2023 008c 0620     	 movs r0,#6
 2024 008e 2D4B     	 ldr r3,.L176+12
 2025 0090 9847     	 blx r3
 2026              	.LVL52:
 2027 0092 0346     	 mov r3,r0
 2028              	 .loc 6 338 12
 2029 0094 002B     	 cmp r3,#0
 2030 0096 45D0     	 beq .L172
 339:usb.c         ****             udd_g_ctrlreq.callback = ctrl_readmem_bulk;
 2031              	 .loc 6 339 36
 2032 0098 274B     	 ldr r3,.L176
 2033 009a 2B4A     	 ldr r2,.L176+16
 2034 009c 1A61     	 str r2,[r3,#16]
 340:usb.c         ****             return true;
 2035              	 .loc 6 340 20
 2036 009e 0123     	 movs r3,#1
 2037 00a0 48E0     	 b .L167
 2038              	.L163:
 341:usb.c         ****         }
 342:usb.c         ****         break;
 343:usb.c         ****     case REQ_MEMREAD_CTRL:
 344:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 2039              	 .loc 6 344 13
 2040 00a2 0620     	 movs r0,#6
 2041 00a4 274B     	 ldr r3,.L176+12
 2042 00a6 9847     	 blx r3
 2043              	.LVL53:
 2044 00a8 0346     	 mov r3,r0
 2045              	 .loc 6 344 12
 2046 00aa 002B     	 cmp r3,#0
 2047 00ac 3CD0     	 beq .L173
 345:usb.c         ****             udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
 2048              	 .loc 6 345 36
 2049 00ae 224B     	 ldr r3,.L176
 2050 00b0 264A     	 ldr r2,.L176+20
 2051 00b2 1A61     	 str r2,[r3,#16]
 346:usb.c         ****             return true;
 2052              	 .loc 6 346 20
 2053 00b4 0123     	 movs r3,#1
 2054 00b6 3DE0     	 b .L167
 2055              	.L164:
 347:usb.c         ****         }
 348:usb.c         ****         break;
 349:usb.c         **** 
 350:usb.c         **** 
 351:usb.c         ****         /* Memory Write */
 352:usb.c         ****     case REQ_MEMWRITE_BULK:
 353:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 2056              	 .loc 6 353 13
 2057 00b8 0620     	 movs r0,#6
 2058 00ba 224B     	 ldr r3,.L176+12
 2059 00bc 9847     	 blx r3
 2060              	.LVL54:
 2061 00be 0346     	 mov r3,r0
 2062              	 .loc 6 353 12
 2063 00c0 002B     	 cmp r3,#0
 2064 00c2 33D0     	 beq .L174
 354:usb.c         ****             udd_g_ctrlreq.callback = ctrl_writemem_bulk;
 2065              	 .loc 6 354 36
 2066 00c4 1C4B     	 ldr r3,.L176
 2067 00c6 224A     	 ldr r2,.L176+24
 2068 00c8 1A61     	 str r2,[r3,#16]
 355:usb.c         ****             return true;
 2069              	 .loc 6 355 20
 2070 00ca 0123     	 movs r3,#1
 2071 00cc 32E0     	 b .L167
 2072              	.L162:
 356:usb.c         ****         }
 357:usb.c         ****         break;
 358:usb.c         ****     // case REQ_XMEGA_PROGRAM:
 359:usb.c         ****     //     /*
 360:usb.c         ****     //     udd_g_ctrlreq.payload = xmegabuffer;
 361:usb.c         ****     //     udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(xmegabuffer));
 362:usb.c         ****     //     */
 363:usb.c         ****     //     udd_g_ctrlreq.callback = ctrl_xmega_program_void;
 364:usb.c         ****     //     return true;
 365:usb.c         **** 
 366:usb.c         ****     // /* AVR Programming */
 367:usb.c         ****     // case REQ_AVR_PROGRAM:
 368:usb.c         ****     //     udd_g_ctrlreq.callback = ctrl_avr_program_void;
 369:usb.c         ****     //     return true;
 370:usb.c         **** 
 371:usb.c         **** 
 372:usb.c         ****     case REQ_MEMWRITE_CTRL:
 373:usb.c         ****         if (FPGA_setlock(fpga_usblocked)){
 2073              	 .loc 6 373 13
 2074 00ce 0620     	 movs r0,#6
 2075 00d0 1C4B     	 ldr r3,.L176+12
 2076 00d2 9847     	 blx r3
 2077              	.LVL55:
 2078 00d4 0346     	 mov r3,r0
 2079              	 .loc 6 373 12
 2080 00d6 002B     	 cmp r3,#0
 2081 00d8 2AD0     	 beq .L175
 374:usb.c         ****             udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
 2082              	 .loc 6 374 36
 2083 00da 174B     	 ldr r3,.L176
 2084 00dc 1D4A     	 ldr r2,.L176+28
 2085 00de 1A61     	 str r2,[r3,#16]
 375:usb.c         ****             return true;
 2086              	 .loc 6 375 20
 2087 00e0 0123     	 movs r3,#1
 2088 00e2 27E0     	 b .L167
 2089              	.L159:
 376:usb.c         ****         }
 377:usb.c         ****         break;
 378:usb.c         **** 
 379:usb.c         **** 		/* Target serial */
 380:usb.c         ****     case REQ_USART0_CONFIG:
 381:usb.c         ****         udd_g_ctrlreq.callback = ctrl_usart_cb;
 2090              	 .loc 6 381 32
 2091 00e4 144B     	 ldr r3,.L176
 2092 00e6 1C4A     	 ldr r2,.L176+32
 2093 00e8 1A61     	 str r2,[r3,#16]
 382:usb.c         ****         return true;
 2094              	 .loc 6 382 16
 2095 00ea 0123     	 movs r3,#1
 2096 00ec 22E0     	 b .L167
 2097              	.L160:
 383:usb.c         ****         
 384:usb.c         ****     case REQ_USART0_DATA:
 385:usb.c         ****         udd_g_ctrlreq.callback = ctrl_usart_cb_data;
 2098              	 .loc 6 385 32
 2099 00ee 124B     	 ldr r3,.L176
 2100 00f0 1A4A     	 ldr r2,.L176+36
 2101 00f2 1A61     	 str r2,[r3,#16]
 386:usb.c         ****         return true;
 2102              	 .loc 6 386 16
 2103 00f4 0123     	 movs r3,#1
 2104 00f6 1DE0     	 b .L167
 2105              	.L161:
 387:usb.c         **** 
 388:usb.c         ****     case REQ_FPGA_PROGRAM:
 389:usb.c         ****         udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
 2106              	 .loc 6 389 32
 2107 00f8 0F4B     	 ldr r3,.L176
 2108 00fa 194A     	 ldr r2,.L176+40
 2109 00fc 1A61     	 str r2,[r3,#16]
 390:usb.c         ****         return true;
 2110              	 .loc 6 390 16
 2111 00fe 0123     	 movs r3,#1
 2112 0100 18E0     	 b .L167
 2113              	.L158:
 391:usb.c         **** 
 392:usb.c         ****     case REQ_SAM3U_CFG:
 393:usb.c         ****         udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
 2114              	 .loc 6 393 32
 2115 0102 0D4B     	 ldr r3,.L176
 2116 0104 174A     	 ldr r2,.L176+44
 2117 0106 1A61     	 str r2,[r3,#16]
 394:usb.c         ****         return true;
 2118              	 .loc 6 394 16
 2119 0108 0123     	 movs r3,#1
 2120 010a 13E0     	 b .L167
 2121              	.L157:
 395:usb.c         **** 
 396:usb.c         ****     case REQ_FPGA_RESET:
 397:usb.c         ****         udd_g_ctrlreq.callback = ctrl_fpga_reset;
 2122              	 .loc 6 397 32
 2123 010c 0A4B     	 ldr r3,.L176
 2124 010e 164A     	 ldr r2,.L176+48
 2125 0110 1A61     	 str r2,[r3,#16]
 398:usb.c         ****         return true;
 2126              	 .loc 6 398 16
 2127 0112 0123     	 movs r3,#1
 2128 0114 0EE0     	 b .L167
 2129              	.L155:
 399:usb.c         ****     case REQ_SPI_ADC:
 400:usb.c         ****         udd_g_ctrlreq.callback = spi_adc_cb;
 2130              	 .loc 6 400 32
 2131 0116 084B     	 ldr r3,.L176
 2132 0118 144A     	 ldr r2,.L176+52
 2133 011a 1A61     	 str r2,[r3,#16]
 401:usb.c         ****         return true;
 2134              	 .loc 6 401 16
 2135 011c 0123     	 movs r3,#1
 2136 011e 09E0     	 b .L167
 2137              	.L154:
 402:usb.c         ****     default:
 403:usb.c         ****         return false;
 2138              	 .loc 6 403 16
 2139 0120 0023     	 movs r3,#0
 2140 0122 07E0     	 b .L167
 2141              	.L172:
 342:usb.c         ****     case REQ_MEMREAD_CTRL:
 2142              	 .loc 6 342 9
 2143 0124 00BF     	 nop
 2144 0126 04E0     	 b .L168
 2145              	.L173:
 348:usb.c         **** 
 2146              	 .loc 6 348 9
 2147 0128 00BF     	 nop
 2148 012a 02E0     	 b .L168
 2149              	.L174:
 357:usb.c         ****     // case REQ_XMEGA_PROGRAM:
 2150              	 .loc 6 357 9
 2151 012c 00BF     	 nop
 2152 012e 00E0     	 b .L168
 2153              	.L175:
 377:usb.c         **** 
 2154              	 .loc 6 377 9
 2155 0130 00BF     	 nop
 2156              	.L168:
 404:usb.c         ****     }
 405:usb.c         **** 
 406:usb.c         ****     return false;
 2157              	 .loc 6 406 12
 2158 0132 0023     	 movs r3,#0
 2159              	.L167:
 407:usb.c         **** }
 2160              	 .loc 6 407 1
 2161 0134 1846     	 mov r0,r3
 2162 0136 80BD     	 pop {r7,pc}
 2163              	.L177:
 2164              	 .align 2
 2165              	.L176:
 2166 0138 00000000 	 .word udd_g_ctrlreq
 2167 013c 00000000 	 .word ctrlbuffer
 2168 0140 00000000 	 .word blockendpoint_usage
 2169 0144 00000000 	 .word FPGA_setlock
 2170 0148 00000000 	 .word ctrl_readmem_bulk
 2171 014c 00000000 	 .word ctrl_readmem_ctrl
 2172 0150 00000000 	 .word ctrl_writemem_bulk
 2173 0154 00000000 	 .word ctrl_writemem_ctrl
 2174 0158 00000000 	 .word ctrl_usart_cb
 2175 015c 00000000 	 .word ctrl_usart_cb_data
 2176 0160 00000000 	 .word ctrl_progfpga_bulk
 2177 0164 00000000 	 .word ctrl_sam3ucfg_cb
 2178 0168 00000000 	 .word ctrl_fpga_reset
 2179 016c 00000000 	 .word spi_adc_cb
 2180              	 .cfi_endproc
 2181              	.LFE205:
 2183              	 .section .text.main_setup_in_received,"ax",%progbits
 2184              	 .align 1
 2185              	 .global main_setup_in_received
 2186              	 .syntax unified
 2187              	 .thumb
 2188              	 .thumb_func
 2189              	 .fpu softvfp
 2191              	main_setup_in_received:
 2192              	.LFB206:
 408:usb.c         **** 
 409:usb.c         **** 
 410:usb.c         **** /*
 411:usb.c         ****   udd_g_ctrlreq.req.bRequest == 0
 412:usb.c         ****   && (udd_g_ctrlreq.req.bRequest == 0)
 413:usb.c         ****   && (0 != udd_g_ctrlreq.req.wLength)
 414:usb.c         **** */
 415:usb.c         **** 
 416:usb.c         **** bool main_setup_in_received(void)
 417:usb.c         **** {
 2193              	 .loc 6 417 1
 2194              	 .cfi_startproc
 2195              	 
 2196              	 
 2197 0000 80B5     	 push {r7,lr}
 2198              	.LCFI103:
 2199              	 .cfi_def_cfa_offset 8
 2200              	 .cfi_offset 7,-8
 2201              	 .cfi_offset 14,-4
 2202 0002 82B0     	 sub sp,sp,#8
 2203              	.LCFI104:
 2204              	 .cfi_def_cfa_offset 16
 2205 0004 00AF     	 add r7,sp,#0
 2206              	.LCFI105:
 2207              	 .cfi_def_cfa_register 7
 418:usb.c         ****     /*
 419:usb.c         ****       udd_g_ctrlreq.payload = main_buf_loopback;
 420:usb.c         ****       udd_g_ctrlreq.payload_size =
 421:usb.c         ****       min( udd_g_ctrlreq.req.wLength,
 422:usb.c         ****       sizeof(main_buf_loopback) );
 423:usb.c         ****     */
 424:usb.c         **** 
 425:usb.c         ****     static uint8_t  respbuf[64];
 426:usb.c         ****     unsigned int cnt;
 427:usb.c         **** 
 428:usb.c         ****     switch(udd_g_ctrlreq.req.bRequest){
 2208              	 .loc 6 428 29
 2209 0006 5C4B     	 ldr r3,.L191
 2210 0008 5B78     	 ldrb r3,[r3,#1]
 2211 000a 123B     	 subs r3,r3,#18
 2212 000c 142B     	 cmp r3,#20
 2213 000e 00F2AD80 	 bhi .L179
 2214 0012 01A2     	 adr r2,.L181
 2215 0014 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2216              	 .p2align 2
 2217              	.L181:
 2218 0018 6D000000 	 .word .L186+1
 2219 001c 6D010000 	 .word .L179+1
 2220 0020 6D010000 	 .word .L179+1
 2221 0024 0F010000 	 .word .L185+1
 2222 0028 6D010000 	 .word .L179+1
 2223 002c ED000000 	 .word .L184+1
 2224 0030 6D010000 	 .word .L179+1
 2225 0034 6D010000 	 .word .L179+1
 2226 0038 AF000000 	 .word .L183+1
 2227 003c 99000000 	 .word .L182+1
 2228 0040 6D010000 	 .word .L179+1
 2229 0044 6D010000 	 .word .L179+1
 2230 0048 6D010000 	 .word .L179+1
 2231 004c 6D010000 	 .word .L179+1
 2232 0050 6D010000 	 .word .L179+1
 2233 0054 6D010000 	 .word .L179+1
 2234 0058 6D010000 	 .word .L179+1
 2235 005c 6D010000 	 .word .L179+1
 2236 0060 6D010000 	 .word .L179+1
 2237 0064 6D010000 	 .word .L179+1
 2238 0068 49010000 	 .word .L180+1
 2239              	 .p2align 1
 2240              	.L186:
 2241              	.LBB5:
 429:usb.c         ****     case REQ_MEMREAD_CTRL:
 430:usb.c         ****         udd_g_ctrlreq.payload = ctrlmemread_buf;
 2242              	 .loc 6 430 31
 2243 006c 434B     	 ldr r3,.L191+4
 2244 006e 1B68     	 ldr r3,[r3]
 2245 0070 414A     	 ldr r2,.L191
 2246 0072 9360     	 str r3,[r2,#8]
 431:usb.c         ****         udd_g_ctrlreq.payload_size = ctrlmemread_size;
 2247              	 .loc 6 431 36
 2248 0074 424B     	 ldr r3,.L191+8
 2249 0076 1B68     	 ldr r3,[r3]
 2250 0078 9AB2     	 uxth r2,r3
 2251 007a 3F4B     	 ldr r3,.L191
 2252 007c 9A81     	 strh r2,[r3,#12]
 432:usb.c         ****         ctrlmemread_size = 0;
 2253              	 .loc 6 432 26
 2254 007e 404B     	 ldr r3,.L191+8
 2255 0080 0022     	 movs r2,#0
 2256 0082 1A60     	 str r2,[r3]
 433:usb.c         **** 
 434:usb.c         ****         if (FPGA_lockstatus() == fpga_ctrlmem){
 2257              	 .loc 6 434 13
 2258 0084 3F4B     	 ldr r3,.L191+12
 2259 0086 9847     	 blx r3
 2260              	.LVL56:
 2261 0088 0346     	 mov r3,r0
 2262              	 .loc 6 434 12
 2263 008a 052B     	 cmp r3,#5
 2264 008c 02D1     	 bne .L187
 435:usb.c         ****             FPGA_setlock(fpga_unlocked);
 2265              	 .loc 6 435 13
 2266 008e 0020     	 movs r0,#0
 2267 0090 3D4B     	 ldr r3,.L191+16
 2268 0092 9847     	 blx r3
 2269              	.LVL57:
 2270              	.L187:
 436:usb.c         ****         }
 437:usb.c         **** 
 438:usb.c         ****         return true;
 2271              	 .loc 6 438 16
 2272 0094 0123     	 movs r3,#1
 2273 0096 6AE0     	 b .L188
 2274              	.L182:
 439:usb.c         ****         break;
 440:usb.c         **** 
 441:usb.c         ****     // case REQ_XMEGA_PROGRAM:
 442:usb.c         ****     //     return XPROGProtocol_Command();
 443:usb.c         ****     //     break;
 444:usb.c         ****         
 445:usb.c         ****     // case REQ_AVR_PROGRAM:
 446:usb.c         ****     //     return V2Protocol_ProcessCommand();
 447:usb.c         ****     //     break;
 448:usb.c         ****         
 449:usb.c         ****         
 450:usb.c         ****     case REQ_USART0_CONFIG:
 451:usb.c         ****         return ctrl_usart(USART_TARGET, true);
 2275              	 .loc 6 451 16
 2276 0098 0121     	 movs r1,#1
 2277 009a 3C48     	 ldr r0,.L191+20
 2278 009c 3C4B     	 ldr r3,.L191+24
 2279 009e 9847     	 blx r3
 2280              	.LVL58:
 2281 00a0 0346     	 mov r3,r0
 2282 00a2 002B     	 cmp r3,#0
 2283 00a4 14BF     	 ite ne
 2284 00a6 0123     	 movne r3,#1
 2285 00a8 0023     	 moveq r3,#0
 2286 00aa DBB2     	 uxtb r3,r3
 2287 00ac 5FE0     	 b .L188
 2288              	.L183:
 452:usb.c         ****         break;
 453:usb.c         ****         
 454:usb.c         ****     case REQ_USART0_DATA:						
 455:usb.c         ****         for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
 2289              	 .loc 6 455 17
 2290 00ae 0023     	 movs r3,#0
 2291 00b0 7B60     	 str r3,[r7,#4]
 2292              	 .loc 6 455 9
 2293 00b2 0CE0     	 b .L189
 2294              	.L190:
 2295              	.LBB6:
 456:usb.c         ****             respbuf[cnt] = usart_driver_getchar(USART_TARGET);
 2296              	 .loc 6 456 28 discriminator 3
 2297 00b4 3548     	 ldr r0,.L191+20
 2298 00b6 374B     	 ldr r3,.L191+28
 2299 00b8 9847     	 blx r3
 2300              	.LVL59:
 2301 00ba 0346     	 mov r3,r0
 2302              	 .loc 6 456 26 discriminator 3
 2303 00bc D9B2     	 uxtb r1,r3
 2304 00be 364A     	 ldr r2,.L191+32
 2305 00c0 7B68     	 ldr r3,[r7,#4]
 2306 00c2 1344     	 add r3,r3,r2
 2307 00c4 0A46     	 mov r2,r1
 2308 00c6 1A70     	 strb r2,[r3]
 2309              	.LBE6:
 455:usb.c         ****             respbuf[cnt] = usart_driver_getchar(USART_TARGET);
 2310              	 .loc 6 455 58 discriminator 3
 2311 00c8 7B68     	 ldr r3,[r7,#4]
 2312 00ca 0133     	 adds r3,r3,#1
 2313 00cc 7B60     	 str r3,[r7,#4]
 2314              	.L189:
 455:usb.c         ****             respbuf[cnt] = usart_driver_getchar(USART_TARGET);
 2315              	 .loc 6 455 45 discriminator 1
 2316 00ce 2A4B     	 ldr r3,.L191
 2317 00d0 DB88     	 ldrh r3,[r3,#6]
 2318 00d2 1A46     	 mov r2,r3
 455:usb.c         ****             respbuf[cnt] = usart_driver_getchar(USART_TARGET);
 2319              	 .loc 6 455 9 discriminator 1
 2320 00d4 7B68     	 ldr r3,[r7,#4]
 2321 00d6 9342     	 cmp r3,r2
 2322 00d8 ECD3     	 bcc .L190
 457:usb.c         ****         }
 458:usb.c         ****         udd_g_ctrlreq.payload = respbuf;
 2323              	 .loc 6 458 31
 2324 00da 274B     	 ldr r3,.L191
 2325 00dc 2E4A     	 ldr r2,.L191+32
 2326 00de 9A60     	 str r2,[r3,#8]
 459:usb.c         ****         udd_g_ctrlreq.payload_size = cnt;
 2327              	 .loc 6 459 36
 2328 00e0 7B68     	 ldr r3,[r7,#4]
 2329 00e2 9AB2     	 uxth r2,r3
 2330 00e4 244B     	 ldr r3,.L191
 2331 00e6 9A81     	 strh r2,[r3,#12]
 460:usb.c         ****         return true;
 2332              	 .loc 6 460 16
 2333 00e8 0123     	 movs r3,#1
 2334 00ea 40E0     	 b .L188
 2335              	.L184:
 461:usb.c         ****         break;
 462:usb.c         ****     case REQ_FW_VERSION:
 463:usb.c         ****         respbuf[0] = FW_VER_MAJOR;
 2336              	 .loc 6 463 20
 2337 00ec 2A4B     	 ldr r3,.L191+32
 2338 00ee 0122     	 movs r2,#1
 2339 00f0 1A70     	 strb r2,[r3]
 464:usb.c         ****         respbuf[1] = FW_VER_MINOR;
 2340              	 .loc 6 464 20
 2341 00f2 294B     	 ldr r3,.L191+32
 2342 00f4 0122     	 movs r2,#1
 2343 00f6 5A70     	 strb r2,[r3,#1]
 465:usb.c         ****         respbuf[2] = FW_VER_DEBUG;
 2344              	 .loc 6 465 20
 2345 00f8 274B     	 ldr r3,.L191+32
 2346 00fa 0022     	 movs r2,#0
 2347 00fc 9A70     	 strb r2,[r3,#2]
 466:usb.c         ****         udd_g_ctrlreq.payload = respbuf;
 2348              	 .loc 6 466 31
 2349 00fe 1E4B     	 ldr r3,.L191
 2350 0100 254A     	 ldr r2,.L191+32
 2351 0102 9A60     	 str r2,[r3,#8]
 467:usb.c         ****         udd_g_ctrlreq.payload_size = 3;
 2352              	 .loc 6 467 36
 2353 0104 1C4B     	 ldr r3,.L191
 2354 0106 0322     	 movs r2,#3
 2355 0108 9A81     	 strh r2,[r3,#12]
 468:usb.c         ****         return true;
 2356              	 .loc 6 468 16
 2357 010a 0123     	 movs r3,#1
 2358 010c 2FE0     	 b .L188
 2359              	.L185:
 469:usb.c         ****         break;
 470:usb.c         **** 
 471:usb.c         ****     case REQ_FPGA_STATUS:
 472:usb.c         ****         respbuf[0] = FPGA_ISDONE();
 2360              	 .loc 6 472 22
 2361 010e 0720     	 movs r0,#7
 2362 0110 224B     	 ldr r3,.L191+36
 2363 0112 9847     	 blx r3
 2364              	.LVL60:
 2365 0114 0346     	 mov r3,r0
 2366 0116 002B     	 cmp r3,#0
 2367 0118 14BF     	 ite ne
 2368 011a 0123     	 movne r3,#1
 2369 011c 0023     	 moveq r3,#0
 2370 011e DBB2     	 uxtb r3,r3
 2371 0120 1A46     	 mov r2,r3
 2372              	 .loc 6 472 20
 2373 0122 1D4B     	 ldr r3,.L191+32
 2374 0124 1A70     	 strb r2,[r3]
 473:usb.c         ****         respbuf[1] = 0;
 2375              	 .loc 6 473 20
 2376 0126 1C4B     	 ldr r3,.L191+32
 2377 0128 0022     	 movs r2,#0
 2378 012a 5A70     	 strb r2,[r3,#1]
 474:usb.c         ****         respbuf[2] = 0;
 2379              	 .loc 6 474 20
 2380 012c 1A4B     	 ldr r3,.L191+32
 2381 012e 0022     	 movs r2,#0
 2382 0130 9A70     	 strb r2,[r3,#2]
 475:usb.c         ****         respbuf[3] = 0;
 2383              	 .loc 6 475 20
 2384 0132 194B     	 ldr r3,.L191+32
 2385 0134 0022     	 movs r2,#0
 2386 0136 DA70     	 strb r2,[r3,#3]
 476:usb.c         ****         udd_g_ctrlreq.payload = respbuf;
 2387              	 .loc 6 476 31
 2388 0138 0F4B     	 ldr r3,.L191
 2389 013a 174A     	 ldr r2,.L191+32
 2390 013c 9A60     	 str r2,[r3,#8]
 477:usb.c         ****         udd_g_ctrlreq.payload_size = 4;
 2391              	 .loc 6 477 36
 2392 013e 0E4B     	 ldr r3,.L191
 2393 0140 0422     	 movs r2,#4
 2394 0142 9A81     	 strh r2,[r3,#12]
 478:usb.c         ****         return true;
 2395              	 .loc 6 478 16
 2396 0144 0123     	 movs r3,#1
 2397 0146 12E0     	 b .L188
 2398              	.L180:
 479:usb.c         ****         break;
 480:usb.c         ****     case REQ_SPI_ADC:
 481:usb.c         ****         respbuf[0] = read_spi_adc(udd_g_ctrlreq.req.wValue & 0xFF);
 2399              	 .loc 6 481 52
 2400 0148 0B4B     	 ldr r3,.L191
 2401 014a 5B88     	 ldrh r3,[r3,#2]
 2402              	 .loc 6 481 22
 2403 014c DBB2     	 uxtb r3,r3
 2404 014e 1846     	 mov r0,r3
 2405 0150 134B     	 ldr r3,.L191+40
 2406 0152 9847     	 blx r3
 2407              	.LVL61:
 2408 0154 0346     	 mov r3,r0
 2409              	 .loc 6 481 20
 2410 0156 DAB2     	 uxtb r2,r3
 2411 0158 0F4B     	 ldr r3,.L191+32
 2412 015a 1A70     	 strb r2,[r3]
 482:usb.c         ****         udd_g_ctrlreq.payload = respbuf;
 2413              	 .loc 6 482 31
 2414 015c 064B     	 ldr r3,.L191
 2415 015e 0E4A     	 ldr r2,.L191+32
 2416 0160 9A60     	 str r2,[r3,#8]
 483:usb.c         ****         udd_g_ctrlreq.payload_size = 1;
 2417              	 .loc 6 483 36
 2418 0162 054B     	 ldr r3,.L191
 2419 0164 0122     	 movs r2,#1
 2420 0166 9A81     	 strh r2,[r3,#12]
 484:usb.c         ****         return true;
 2421              	 .loc 6 484 16
 2422 0168 0123     	 movs r3,#1
 2423 016a 00E0     	 b .L188
 2424              	.L179:
 485:usb.c         ****         break;
 486:usb.c         ****     default:
 487:usb.c         ****         return false;
 2425              	 .loc 6 487 16
 2426 016c 0023     	 movs r3,#0
 2427              	.L188:
 2428              	.LBE5:
 488:usb.c         ****     }
 489:usb.c         ****     return false;
 490:usb.c         **** }
 2429              	 .loc 6 490 1
 2430 016e 1846     	 mov r0,r3
 2431 0170 0837     	 adds r7,r7,#8
 2432              	.LCFI106:
 2433              	 .cfi_def_cfa_offset 8
 2434 0172 BD46     	 mov sp,r7
 2435              	.LCFI107:
 2436              	 .cfi_def_cfa_register 13
 2437              	 
 2438 0174 80BD     	 pop {r7,pc}
 2439              	.L192:
 2440 0176 00BF     	 .align 2
 2441              	.L191:
 2442 0178 00000000 	 .word udd_g_ctrlreq
 2443 017c 00000000 	 .word ctrlmemread_buf
 2444 0180 00000000 	 .word ctrlmemread_size
 2445 0184 00000000 	 .word FPGA_lockstatus
 2446 0188 00000000 	 .word FPGA_setlock
 2447 018c 00000940 	 .word 1074331648
 2448 0190 00000000 	 .word ctrl_usart
 2449 0194 00000000 	 .word usart_driver_getchar
 2450 0198 00000000 	 .word respbuf.9421
 2451 019c 00000000 	 .word pio_get_pin_value
 2452 01a0 00000000 	 .word read_spi_adc
 2453              	 .cfi_endproc
 2454              	.LFE206:
 2456              	 .section .text.main_vendor_bulk_in_received,"ax",%progbits
 2457              	 .align 1
 2458              	 .global main_vendor_bulk_in_received
 2459              	 .syntax unified
 2460              	 .thumb
 2461              	 .thumb_func
 2462              	 .fpu softvfp
 2464              	main_vendor_bulk_in_received:
 2465              	.LFB207:
 491:usb.c         **** 
 492:usb.c         **** void main_vendor_bulk_in_received(udd_ep_status_t status,
 493:usb.c         ****                                   iram_size_t nb_transfered, udd_ep_id_t ep)
 494:usb.c         **** {
 2466              	 .loc 6 494 1
 2467              	 .cfi_startproc
 2468              	 
 2469              	 
 2470 0000 80B5     	 push {r7,lr}
 2471              	.LCFI108:
 2472              	 .cfi_def_cfa_offset 8
 2473              	 .cfi_offset 7,-8
 2474              	 .cfi_offset 14,-4
 2475 0002 82B0     	 sub sp,sp,#8
 2476              	.LCFI109:
 2477              	 .cfi_def_cfa_offset 16
 2478 0004 00AF     	 add r7,sp,#0
 2479              	.LCFI110:
 2480              	 .cfi_def_cfa_register 7
 2481 0006 0346     	 mov r3,r0
 2482 0008 3960     	 str r1,[r7]
 2483 000a FB71     	 strb r3,[r7,#7]
 2484 000c 1346     	 mov r3,r2
 2485 000e BB71     	 strb r3,[r7,#6]
 495:usb.c         ****     UNUSED(nb_transfered);
 496:usb.c         ****     UNUSED(ep);
 497:usb.c         ****     if (UDD_EP_TRANSFER_OK != status) {
 2486              	 .loc 6 497 8
 2487 0010 FB79     	 ldrb r3,[r7,#7]
 2488 0012 002B     	 cmp r3,#0
 2489 0014 08D1     	 bne .L196
 498:usb.c         ****         return; // Transfer aborted/error
 499:usb.c         ****     }
 500:usb.c         **** 
 501:usb.c         ****     if (FPGA_lockstatus() == fpga_blockin){
 2490              	 .loc 6 501 9
 2491 0016 064B     	 ldr r3,.L197
 2492 0018 9847     	 blx r3
 2493              	.LVL62:
 2494 001a 0346     	 mov r3,r0
 2495              	 .loc 6 501 8
 2496 001c 022B     	 cmp r3,#2
 2497 001e 04D1     	 bne .L193
 502:usb.c         ****         FPGA_setlock(fpga_unlocked);
 2498              	 .loc 6 502 9
 2499 0020 0020     	 movs r0,#0
 2500 0022 044B     	 ldr r3,.L197+4
 2501 0024 9847     	 blx r3
 2502              	.LVL63:
 2503 0026 00E0     	 b .L193
 2504              	.L196:
 498:usb.c         ****         return; // Transfer aborted/error
 2505              	 .loc 6 498 9
 2506 0028 00BF     	 nop
 2507              	.L193:
 503:usb.c         ****     }
 504:usb.c         **** }
 2508              	 .loc 6 504 1
 2509 002a 0837     	 adds r7,r7,#8
 2510              	.LCFI111:
 2511              	 .cfi_def_cfa_offset 8
 2512 002c BD46     	 mov sp,r7
 2513              	.LCFI112:
 2514              	 .cfi_def_cfa_register 13
 2515              	 
 2516 002e 80BD     	 pop {r7,pc}
 2517              	.L198:
 2518              	 .align 2
 2519              	.L197:
 2520 0030 00000000 	 .word FPGA_lockstatus
 2521 0034 00000000 	 .word FPGA_setlock
 2522              	 .cfi_endproc
 2523              	.LFE207:
 2525              	 .section .text.main_vendor_bulk_out_received,"ax",%progbits
 2526              	 .align 1
 2527              	 .global main_vendor_bulk_out_received
 2528              	 .syntax unified
 2529              	 .thumb
 2530              	 .thumb_func
 2531              	 .fpu softvfp
 2533              	main_vendor_bulk_out_received:
 2534              	.LFB208:
 505:usb.c         **** 
 506:usb.c         **** void main_vendor_bulk_out_received(udd_ep_status_t status,
 507:usb.c         ****                                    iram_size_t nb_transfered, udd_ep_id_t ep)
 508:usb.c         **** {
 2535              	 .loc 6 508 1
 2536              	 .cfi_startproc
 2537              	 
 2538              	 
 2539 0000 80B5     	 push {r7,lr}
 2540              	.LCFI113:
 2541              	 .cfi_def_cfa_offset 8
 2542              	 .cfi_offset 7,-8
 2543              	 .cfi_offset 14,-4
 2544 0002 84B0     	 sub sp,sp,#16
 2545              	.LCFI114:
 2546              	 .cfi_def_cfa_offset 24
 2547 0004 00AF     	 add r7,sp,#0
 2548              	.LCFI115:
 2549              	 .cfi_def_cfa_register 7
 2550 0006 0346     	 mov r3,r0
 2551 0008 3960     	 str r1,[r7]
 2552 000a FB71     	 strb r3,[r7,#7]
 2553 000c 1346     	 mov r3,r2
 2554 000e BB71     	 strb r3,[r7,#6]
 509:usb.c         ****     UNUSED(ep);
 510:usb.c         ****     if (UDD_EP_TRANSFER_OK != status) {
 2555              	 .loc 6 510 8
 2556 0010 FB79     	 ldrb r3,[r7,#7]
 2557 0012 002B     	 cmp r3,#0
 2558 0014 06D0     	 beq .L200
 511:usb.c         ****         // Transfer aborted
 512:usb.c         **** 
 513:usb.c         ****         //restart
 514:usb.c         ****         udi_vendor_bulk_out_run(
 2559              	 .loc 6 514 9
 2560 0016 224A     	 ldr r2,.L208
 2561 0018 4FF48061 	 mov r1,#1024
 2562 001c 2148     	 ldr r0,.L208+4
 2563 001e 224B     	 ldr r3,.L208+8
 2564 0020 9847     	 blx r3
 2565              	.LVL64:
 515:usb.c         ****             main_buf_loopback,
 516:usb.c         ****             sizeof(main_buf_loopback),
 517:usb.c         ****             main_vendor_bulk_out_received);
 518:usb.c         **** 
 519:usb.c         ****         return;
 2566              	 .loc 6 519 9
 2567 0022 39E0     	 b .L199
 2568              	.L200:
 520:usb.c         ****     }
 521:usb.c         **** 
 522:usb.c         ****     if (blockendpoint_usage == bep_emem){
 2569              	 .loc 6 522 29
 2570 0024 214B     	 ldr r3,.L208+12
 2571 0026 1B78     	 ldrb r3,[r3]
 2572              	 .loc 6 522 8
 2573 0028 002B     	 cmp r3,#0
 2574 002a 1AD1     	 bne .L202
 2575              	.LBB7:
 523:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 2576              	 .loc 6 523 26
 2577 002c 0023     	 movs r3,#0
 2578 002e FB60     	 str r3,[r7,#12]
 2579              	 .loc 6 523 9
 2580 0030 0BE0     	 b .L203
 2581              	.L204:
 524:usb.c         ****             xram[i] = main_buf_loopback[i];
 2582              	 .loc 6 524 17 discriminator 3
 2583 0032 1F4B     	 ldr r3,.L208+16
 2584 0034 1A68     	 ldr r2,[r3]
 2585 0036 FB68     	 ldr r3,[r7,#12]
 2586 0038 1344     	 add r3,r3,r2
 2587              	 .loc 6 524 40 discriminator 3
 2588 003a 1A49     	 ldr r1,.L208+4
 2589 003c FA68     	 ldr r2,[r7,#12]
 2590 003e 0A44     	 add r2,r2,r1
 2591 0040 1278     	 ldrb r2,[r2]
 2592              	 .loc 6 524 21 discriminator 3
 2593 0042 1A70     	 strb r2,[r3]
 523:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 2594              	 .loc 6 523 53 discriminator 3
 2595 0044 FB68     	 ldr r3,[r7,#12]
 2596 0046 0133     	 adds r3,r3,#1
 2597 0048 FB60     	 str r3,[r7,#12]
 2598              	.L203:
 523:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 2599              	 .loc 6 523 9 discriminator 1
 2600 004a FA68     	 ldr r2,[r7,#12]
 2601 004c 3B68     	 ldr r3,[r7]
 2602 004e 9A42     	 cmp r2,r3
 2603 0050 EFD3     	 bcc .L204
 2604              	.LBE7:
 525:usb.c         ****         }
 526:usb.c         **** 
 527:usb.c         ****         if (FPGA_lockstatus() == fpga_blockout){
 2605              	 .loc 6 527 13
 2606 0052 184B     	 ldr r3,.L208+20
 2607 0054 9847     	 blx r3
 2608              	.LVL65:
 2609 0056 0346     	 mov r3,r0
 2610              	 .loc 6 527 12
 2611 0058 042B     	 cmp r3,#4
 2612 005a 17D1     	 bne .L205
 528:usb.c         ****             FPGA_releaselock();
 2613              	 .loc 6 528 13
 2614 005c 164B     	 ldr r3,.L208+24
 2615 005e 9847     	 blx r3
 2616              	.LVL66:
 2617 0060 14E0     	 b .L205
 2618              	.L202:
 529:usb.c         ****         }
 530:usb.c         ****     } else if (blockendpoint_usage == bep_fpgabitstream){
 2619              	 .loc 6 530 36
 2620 0062 124B     	 ldr r3,.L208+12
 2621 0064 1B78     	 ldrb r3,[r3]
 2622              	 .loc 6 530 15
 2623 0066 0A2B     	 cmp r3,#10
 2624 0068 10D1     	 bne .L205
 2625              	.LBB8:
 531:usb.c         **** 
 532:usb.c         ****         /* Send byte to FPGA - this could eventually be done via SPI */
 533:usb.c         ****         // TODO: is this dangerous?
 534:usb.c         ****         for(unsigned int i = 0; i < nb_transfered; i++){
 2626              	 .loc 6 534 26
 2627 006a 0023     	 movs r3,#0
 2628 006c BB60     	 str r3,[r7,#8]
 2629              	 .loc 6 534 9
 2630 006e 09E0     	 b .L206
 2631              	.L207:
 535:usb.c         ****             fpga_program_sendbyte(main_buf_loopback[i]);
 2632              	 .loc 6 535 13 discriminator 3
 2633 0070 0C4A     	 ldr r2,.L208+4
 2634 0072 BB68     	 ldr r3,[r7,#8]
 2635 0074 1344     	 add r3,r3,r2
 2636 0076 1B78     	 ldrb r3,[r3]
 2637 0078 1846     	 mov r0,r3
 2638 007a 104B     	 ldr r3,.L208+28
 2639 007c 9847     	 blx r3
 2640              	.LVL67:
 534:usb.c         ****             fpga_program_sendbyte(main_buf_loopback[i]);
 2641              	 .loc 6 534 53 discriminator 3
 2642 007e BB68     	 ldr r3,[r7,#8]
 2643 0080 0133     	 adds r3,r3,#1
 2644 0082 BB60     	 str r3,[r7,#8]
 2645              	.L206:
 534:usb.c         ****             fpga_program_sendbyte(main_buf_loopback[i]);
 2646              	 .loc 6 534 9 discriminator 1
 2647 0084 BA68     	 ldr r2,[r7,#8]
 2648 0086 3B68     	 ldr r3,[r7]
 2649 0088 9A42     	 cmp r2,r3
 2650 008a F1D3     	 bcc .L207
 2651              	.L205:
 2652              	.LBE8:
 536:usb.c         ****         }
 537:usb.c         **** #if FPGA_USE_BITBANG
 538:usb.c         ****         FPGA_CCLK_LOW();
 539:usb.c         **** #endif
 540:usb.c         ****     }
 541:usb.c         **** 
 542:usb.c         ****     //printf("BULKOUT: %d bytes\n", (int)nb_transfered);
 543:usb.c         **** 
 544:usb.c         ****     udi_vendor_bulk_out_run(
 2653              	 .loc 6 544 5
 2654 008c 044A     	 ldr r2,.L208
 2655 008e 4FF48061 	 mov r1,#1024
 2656 0092 0448     	 ldr r0,.L208+4
 2657 0094 044B     	 ldr r3,.L208+8
 2658 0096 9847     	 blx r3
 2659              	.LVL68:
 2660              	.L199:
 545:usb.c         ****         main_buf_loopback,
 546:usb.c         ****         sizeof(main_buf_loopback),
 547:usb.c         ****         main_vendor_bulk_out_received);
 548:usb.c         **** }
 2661              	 .loc 6 548 1
 2662 0098 1037     	 adds r7,r7,#16
 2663              	.LCFI116:
 2664              	 .cfi_def_cfa_offset 8
 2665 009a BD46     	 mov sp,r7
 2666              	.LCFI117:
 2667              	 .cfi_def_cfa_register 13
 2668              	 
 2669 009c 80BD     	 pop {r7,pc}
 2670              	.L209:
 2671 009e 00BF     	 .align 2
 2672              	.L208:
 2673 00a0 00000000 	 .word main_vendor_bulk_out_received
 2674 00a4 00000000 	 .word main_buf_loopback
 2675 00a8 00000000 	 .word udi_vendor_bulk_out_run
 2676 00ac 00000000 	 .word blockendpoint_usage
 2677 00b0 00000000 	 .word xram
 2678 00b4 00000000 	 .word FPGA_lockstatus
 2679 00b8 00000000 	 .word FPGA_releaselock
 2680 00bc 00000000 	 .word fpga_program_sendbyte
 2681              	 .cfi_endproc
 2682              	.LFE208:
 2684              	 .global enable_cdc_transfer
 2685              	 .section .bss.enable_cdc_transfer,"aw",%nobits
 2686              	 .align 2
 2689              	enable_cdc_transfer:
 2690 0000 0000     	 .space 2
 2691              	 .section .text.cdc_enable,"ax",%progbits
 2692              	 .align 1
 2693              	 .global cdc_enable
 2694              	 .syntax unified
 2695              	 .thumb
 2696              	 .thumb_func
 2697              	 .fpu softvfp
 2699              	cdc_enable:
 2700              	.LFB209:
 549:usb.c         **** 
 550:usb.c         **** 
 551:usb.c         **** 
 552:usb.c         **** /////////////////////////////////////////////////////////
 553:usb.c         **** /////////////////////////////////////////////////////////
 554:usb.c         **** /////////////////////////////////////////////////////////
 555:usb.c         **** /////////////////////////////////////////////////////////
 556:usb.c         **** // USB CDC
 557:usb.c         **** /////////////////////////////////////////////////////////
 558:usb.c         **** /////////////////////////////////////////////////////////
 559:usb.c         **** /////////////////////////////////////////////////////////
 560:usb.c         **** /////////////////////////////////////////////////////////
 561:usb.c         **** #include "usb_protocol_cdc.h"
 562:usb.c         **** volatile bool enable_cdc_transfer[2] = {false, false};
 563:usb.c         **** 	extern volatile bool usart_x_enabled[4];
 564:usb.c         **** bool cdc_enable(uint8_t port)
 565:usb.c         **** {
 2701              	 .loc 6 565 1
 2702              	 .cfi_startproc
 2703              	 
 2704              	 
 2705              	 
 2706 0000 80B4     	 push {r7}
 2707              	.LCFI118:
 2708              	 .cfi_def_cfa_offset 4
 2709              	 .cfi_offset 7,-4
 2710 0002 83B0     	 sub sp,sp,#12
 2711              	.LCFI119:
 2712              	 .cfi_def_cfa_offset 16
 2713 0004 00AF     	 add r7,sp,#0
 2714              	.LCFI120:
 2715              	 .cfi_def_cfa_register 7
 2716 0006 0346     	 mov r3,r0
 2717 0008 FB71     	 strb r3,[r7,#7]
 566:usb.c         **** 	enable_cdc_transfer[port] = true;
 2718              	 .loc 6 566 21
 2719 000a FB79     	 ldrb r3,[r7,#7]
 2720              	 .loc 6 566 28
 2721 000c 044A     	 ldr r2,.L212
 2722 000e 0121     	 movs r1,#1
 2723 0010 D154     	 strb r1,[r2,r3]
 567:usb.c         **** 	return true;
 2724              	 .loc 6 567 9
 2725 0012 0123     	 movs r3,#1
 568:usb.c         **** }
 2726              	 .loc 6 568 1
 2727 0014 1846     	 mov r0,r3
 2728 0016 0C37     	 adds r7,r7,#12
 2729              	.LCFI121:
 2730              	 .cfi_def_cfa_offset 4
 2731 0018 BD46     	 mov sp,r7
 2732              	.LCFI122:
 2733              	 .cfi_def_cfa_register 13
 2734              	 
 2735 001a 80BC     	 pop {r7}
 2736              	.LCFI123:
 2737              	 .cfi_restore 7
 2738              	 .cfi_def_cfa_offset 0
 2739 001c 7047     	 bx lr
 2740              	.L213:
 2741 001e 00BF     	 .align 2
 2742              	.L212:
 2743 0020 00000000 	 .word enable_cdc_transfer
 2744              	 .cfi_endproc
 2745              	.LFE209:
 2747              	 .section .text.cdc_disable,"ax",%progbits
 2748              	 .align 1
 2749              	 .global cdc_disable
 2750              	 .syntax unified
 2751              	 .thumb
 2752              	 .thumb_func
 2753              	 .fpu softvfp
 2755              	cdc_disable:
 2756              	.LFB210:
 569:usb.c         **** 
 570:usb.c         **** void cdc_disable(uint8_t port)
 571:usb.c         **** {
 2757              	 .loc 6 571 1
 2758              	 .cfi_startproc
 2759              	 
 2760              	 
 2761              	 
 2762 0000 80B4     	 push {r7}
 2763              	.LCFI124:
 2764              	 .cfi_def_cfa_offset 4
 2765              	 .cfi_offset 7,-4
 2766 0002 83B0     	 sub sp,sp,#12
 2767              	.LCFI125:
 2768              	 .cfi_def_cfa_offset 16
 2769 0004 00AF     	 add r7,sp,#0
 2770              	.LCFI126:
 2771              	 .cfi_def_cfa_register 7
 2772 0006 0346     	 mov r3,r0
 2773 0008 FB71     	 strb r3,[r7,#7]
 572:usb.c         **** 	enable_cdc_transfer[port] = false;
 2774              	 .loc 6 572 21
 2775 000a FB79     	 ldrb r3,[r7,#7]
 2776              	 .loc 6 572 28
 2777 000c 034A     	 ldr r2,.L215
 2778 000e 0021     	 movs r1,#0
 2779 0010 D154     	 strb r1,[r2,r3]
 573:usb.c         **** }
 2780              	 .loc 6 573 1
 2781 0012 00BF     	 nop
 2782 0014 0C37     	 adds r7,r7,#12
 2783              	.LCFI127:
 2784              	 .cfi_def_cfa_offset 4
 2785 0016 BD46     	 mov sp,r7
 2786              	.LCFI128:
 2787              	 .cfi_def_cfa_register 13
 2788              	 
 2789 0018 80BC     	 pop {r7}
 2790              	.LCFI129:
 2791              	 .cfi_restore 7
 2792              	 .cfi_def_cfa_offset 0
 2793 001a 7047     	 bx lr
 2794              	.L216:
 2795              	 .align 2
 2796              	.L215:
 2797 001c 00000000 	 .word enable_cdc_transfer
 2798              	 .cfi_endproc
 2799              	.LFE210:
 2801              	 .section .bss.uart_buf,"aw",%nobits
 2802              	 .align 2
 2805              	uart_buf:
 2806 0000 00000000 	 .space 512
 2806      00000000 
 2806      00000000 
 2806      00000000 
 2806      00000000 
 2807              	 .section .text.my_callback_rx_notify,"ax",%progbits
 2808              	 .align 1
 2809              	 .global my_callback_rx_notify
 2810              	 .syntax unified
 2811              	 .thumb
 2812              	 .thumb_func
 2813              	 .fpu softvfp
 2815              	my_callback_rx_notify:
 2816              	.LFB211:
 574:usb.c         **** 
 575:usb.c         **** /*
 576:usb.c         **** 		case REQ_USART0_DATA:
 577:usb.c         **** 		for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
 578:usb.c         **** 			respbuf[cnt] = usart_driver_getchar(USART_TARGET);
 579:usb.c         **** 		}
 580:usb.c         **** 		udd_g_ctrlreq.payload = respbuf;
 581:usb.c         **** 		udd_g_ctrlreq.payload_size = cnt;
 582:usb.c         **** 		return true;
 583:usb.c         **** 		break;
 584:usb.c         **** 		
 585:usb.c         **** 			//Catch heartbleed-style error
 586:usb.c         **** 			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
 587:usb.c         **** 				return;
 588:usb.c         **** 			}
 589:usb.c         **** 			
 590:usb.c         **** 			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
 591:usb.c         **** 				usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
 592:usb.c         **** 			}
 593:usb.c         **** */
 594:usb.c         **** static uint8_t uart_buf[512] = {0};
 595:usb.c         **** void my_callback_rx_notify(uint8_t port)
 596:usb.c         **** {
 2817              	 .loc 6 596 1
 2818              	 .cfi_startproc
 2819              	 
 2820              	 
 2821 0000 80B5     	 push {r7,lr}
 2822              	.LCFI130:
 2823              	 .cfi_def_cfa_offset 8
 2824              	 .cfi_offset 7,-8
 2825              	 .cfi_offset 14,-4
 2826 0002 84B0     	 sub sp,sp,#16
 2827              	.LCFI131:
 2828              	 .cfi_def_cfa_offset 24
 2829 0004 00AF     	 add r7,sp,#0
 2830              	.LCFI132:
 2831              	 .cfi_def_cfa_register 7
 2832 0006 0346     	 mov r3,r0
 2833 0008 FB71     	 strb r3,[r7,#7]
 597:usb.c         **** 	//iram_size_t udi_cdc_multi_get_nb_received_data
 598:usb.c         **** 	
 599:usb.c         **** 	if (enable_cdc_transfer[port] && usart_x_enabled[0]) {
 2834              	 .loc 6 599 25
 2835 000a FB79     	 ldrb r3,[r7,#7]
 2836 000c 1D4A     	 ldr r2,.L224
 2837 000e D35C     	 ldrb r3,[r2,r3]
 2838 0010 DBB2     	 uxtb r3,r3
 2839              	 .loc 6 599 5
 2840 0012 002B     	 cmp r3,#0
 2841 0014 31D0     	 beq .L223
 2842              	 .loc 6 599 50 discriminator 1
 2843 0016 1C4B     	 ldr r3,.L224+4
 2844 0018 1B78     	 ldrb r3,[r3]
 2845 001a DBB2     	 uxtb r3,r3
 2846              	 .loc 6 599 32 discriminator 1
 2847 001c 002B     	 cmp r3,#0
 2848 001e 2CD0     	 beq .L223
 2849              	.LBB9:
 600:usb.c         **** 		iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
 2850              	 .loc 6 600 26
 2851 0020 FB79     	 ldrb r3,[r7,#7]
 2852 0022 1846     	 mov r0,r3
 2853 0024 194B     	 ldr r3,.L224+8
 2854 0026 9847     	 blx r3
 2855              	.LVL69:
 2856 0028 F860     	 str r0,[r7,#12]
 601:usb.c         **** 		while (num_char > 0) {
 2857              	 .loc 6 601 9
 2858 002a 23E0     	 b .L219
 2859              	.L222:
 602:usb.c         **** 			num_char = (num_char > 512) ? 512 : num_char;
 2860              	 .loc 6 602 13
 2861 002c FB68     	 ldr r3,[r7,#12]
 2862 002e B3F5007F 	 cmp r3,#512
 2863 0032 28BF     	 it cs
 2864 0034 4FF40073 	 movcs r3,#512
 2865 0038 FB60     	 str r3,[r7,#12]
 603:usb.c         **** 			udi_cdc_multi_read_buf(port, uart_buf, num_char);
 2866              	 .loc 6 603 4
 2867 003a FB79     	 ldrb r3,[r7,#7]
 2868 003c FA68     	 ldr r2,[r7,#12]
 2869 003e 1449     	 ldr r1,.L224+12
 2870 0040 1846     	 mov r0,r3
 2871 0042 144B     	 ldr r3,.L224+16
 2872 0044 9847     	 blx r3
 2873              	.LVL70:
 2874              	.LBB10:
 604:usb.c         **** 			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
 2875              	 .loc 6 604 18
 2876 0046 0023     	 movs r3,#0
 2877 0048 7B81     	 strh r3,[r7,#10]
 2878              	 .loc 6 604 4
 2879 004a 0AE0     	 b .L220
 2880              	.L221:
 2881              	.LBB11:
 605:usb.c         **** 				//usart_driver_putchar(USART_TARGET, NULL, udi_cdc_multi_getc(port));
 606:usb.c         **** 				usart_driver_putchar(USART_TARGET, NULL, uart_buf[i]);
 2882              	 .loc 6 606 54 discriminator 3
 2883 004c 7B89     	 ldrh r3,[r7,#10]
 2884 004e 104A     	 ldr r2,.L224+12
 2885 0050 D35C     	 ldrb r3,[r2,r3]
 2886              	 .loc 6 606 5 discriminator 3
 2887 0052 1A46     	 mov r2,r3
 2888 0054 0021     	 movs r1,#0
 2889 0056 1048     	 ldr r0,.L224+20
 2890 0058 104B     	 ldr r3,.L224+24
 2891 005a 9847     	 blx r3
 2892              	.LVL71:
 2893              	.LBE11:
 604:usb.c         **** 			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
 2894              	 .loc 6 604 40 discriminator 3
 2895 005c 7B89     	 ldrh r3,[r7,#10]
 2896 005e 0133     	 adds r3,r3,#1
 2897 0060 7B81     	 strh r3,[r7,#10]
 2898              	.L220:
 604:usb.c         **** 			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
 2899              	 .loc 6 604 27 discriminator 1
 2900 0062 7B89     	 ldrh r3,[r7,#10]
 604:usb.c         **** 			for (uint16_t i = 0; i < num_char; i++) { //num_char; num_char > 0; num_char--) {
 2901              	 .loc 6 604 4 discriminator 1
 2902 0064 FA68     	 ldr r2,[r7,#12]
 2903 0066 9A42     	 cmp r2,r3
 2904 0068 F0D8     	 bhi .L221
 2905              	.LBE10:
 607:usb.c         **** 			}
 608:usb.c         **** 			num_char = udi_cdc_multi_get_nb_received_data(port);
 2906              	 .loc 6 608 15
 2907 006a FB79     	 ldrb r3,[r7,#7]
 2908 006c 1846     	 mov r0,r3
 2909 006e 074B     	 ldr r3,.L224+8
 2910 0070 9847     	 blx r3
 2911              	.LVL72:
 2912 0072 F860     	 str r0,[r7,#12]
 2913              	.L219:
 601:usb.c         **** 			num_char = (num_char > 512) ? 512 : num_char;
 2914              	 .loc 6 601 9
 2915 0074 FB68     	 ldr r3,[r7,#12]
 2916 0076 002B     	 cmp r3,#0
 2917 0078 D8D1     	 bne .L222
 2918              	.L223:
 2919              	.LBE9:
 609:usb.c         **** 		}
 610:usb.c         **** 		#if 0
 611:usb.c         **** 		udi_cdc_read_no_polling(uart_buf, 128);
 612:usb.c         **** 		uint8_t *st = uart_buf;
 613:usb.c         **** 		while (*st) {
 614:usb.c         **** 			udi_cdc_putc(*st++);
 615:usb.c         **** 		}
 616:usb.c         **** 		#endif
 617:usb.c         **** 	}
 618:usb.c         **** }
 2920              	 .loc 6 618 1
 2921 007a 00BF     	 nop
 2922 007c 1037     	 adds r7,r7,#16
 2923              	.LCFI133:
 2924              	 .cfi_def_cfa_offset 8
 2925 007e BD46     	 mov sp,r7
 2926              	.LCFI134:
 2927              	 .cfi_def_cfa_register 13
 2928              	 
 2929 0080 80BD     	 pop {r7,pc}
 2930              	.L225:
 2931 0082 00BF     	 .align 2
 2932              	.L224:
 2933 0084 00000000 	 .word enable_cdc_transfer
 2934 0088 00000000 	 .word usart_x_enabled
 2935 008c 00000000 	 .word udi_cdc_multi_get_nb_received_data
 2936 0090 00000000 	 .word uart_buf
 2937 0094 00000000 	 .word udi_cdc_multi_read_buf
 2938 0098 00000940 	 .word 1074331648
 2939 009c 00000000 	 .word usart_driver_putchar
 2940              	 .cfi_endproc
 2941              	.LFE211:
 2943              	 .section .text.my_callback_config,"ax",%progbits
 2944              	 .align 1
 2945              	 .global my_callback_config
 2946              	 .syntax unified
 2947              	 .thumb
 2948              	 .thumb_func
 2949              	 .fpu softvfp
 2951              	my_callback_config:
 2952              	.LFB212:
 619:usb.c         **** 
 620:usb.c         **** extern tcirc_buf rx0buf, tx0buf;
 621:usb.c         **** extern tcirc_buf usb_usart_circ_buf;
 622:usb.c         **** 
 623:usb.c         **** void my_callback_config(uint8_t port, usb_cdc_line_coding_t * cfg)
 624:usb.c         **** {
 2953              	 .loc 6 624 1
 2954              	 .cfi_startproc
 2955              	 
 2956              	 
 2957 0000 80B5     	 push {r7,lr}
 2958              	.LCFI135:
 2959              	 .cfi_def_cfa_offset 8
 2960              	 .cfi_offset 7,-8
 2961              	 .cfi_offset 14,-4
 2962 0002 88B0     	 sub sp,sp,#32
 2963              	.LCFI136:
 2964              	 .cfi_def_cfa_offset 40
 2965 0004 00AF     	 add r7,sp,#0
 2966              	.LCFI137:
 2967              	 .cfi_def_cfa_register 7
 2968 0006 0346     	 mov r3,r0
 2969 0008 3960     	 str r1,[r7]
 2970 000a FB71     	 strb r3,[r7,#7]
 625:usb.c         **** 	if (enable_cdc_transfer[port] && usart_x_enabled[0]) {
 2971              	 .loc 6 625 25
 2972 000c FB79     	 ldrb r3,[r7,#7]
 2973 000e 444A     	 ldr r2,.L245
 2974 0010 D35C     	 ldrb r3,[r2,r3]
 2975 0012 DBB2     	 uxtb r3,r3
 2976              	 .loc 6 625 5
 2977 0014 002B     	 cmp r3,#0
 2978 0016 00F08080 	 beq .L226
 2979              	 .loc 6 625 50 discriminator 1
 2980 001a 424B     	 ldr r3,.L245+4
 2981 001c 1B78     	 ldrb r3,[r3]
 2982 001e DBB2     	 uxtb r3,r3
 2983              	 .loc 6 625 32 discriminator 1
 2984 0020 002B     	 cmp r3,#0
 2985 0022 7AD0     	 beq .L226
 2986              	.LBB12:
 626:usb.c         **** 		sam_usart_opt_t usartopts;
 627:usb.c         **** 		if (port != 0){
 2987              	 .loc 6 627 6
 2988 0024 FB79     	 ldrb r3,[r7,#7]
 2989 0026 002B     	 cmp r3,#0
 2990 0028 70D1     	 bne .L241
 628:usb.c         **** 			return;
 629:usb.c         **** 		}
 630:usb.c         **** 		if (cfg->bDataBits < 5)
 2991              	 .loc 6 630 10
 2992 002a 3B68     	 ldr r3,[r7]
 2993 002c 9B79     	 ldrb r3,[r3,#6]
 2994              	 .loc 6 630 6
 2995 002e 042B     	 cmp r3,#4
 2996 0030 6ED9     	 bls .L242
 631:usb.c         **** 			return;
 632:usb.c         **** 		if (cfg->bCharFormat > 2)
 2997              	 .loc 6 632 10
 2998 0032 3B68     	 ldr r3,[r7]
 2999 0034 1B79     	 ldrb r3,[r3,#4]
 3000              	 .loc 6 632 6
 3001 0036 022B     	 cmp r3,#2
 3002 0038 6CD8     	 bhi .L243
 633:usb.c         **** 			return;
 634:usb.c         **** 	
 635:usb.c         **** 		usartopts.baudrate = cfg->dwDTERate;
 3003              	 .loc 6 635 27
 3004 003a 3B68     	 ldr r3,[r7]
 3005 003c 1B68     	 ldr r3,[r3]
 3006              	 .loc 6 635 22
 3007 003e BB60     	 str r3,[r7,#8]
 636:usb.c         **** 		usartopts.channel_mode = US_MR_CHMODE_NORMAL;
 3008              	 .loc 6 636 26
 3009 0040 0023     	 movs r3,#0
 3010 0042 BB61     	 str r3,[r7,#24]
 637:usb.c         **** 		usartopts.stop_bits = ((uint32_t)cfg->bCharFormat) << 12;
 3011              	 .loc 6 637 39
 3012 0044 3B68     	 ldr r3,[r7]
 3013 0046 1B79     	 ldrb r3,[r3,#4]
 3014              	 .loc 6 637 54
 3015 0048 1B03     	 lsls r3,r3,#12
 3016              	 .loc 6 637 23
 3017 004a 7B61     	 str r3,[r7,#20]
 638:usb.c         **** 		usartopts.char_length = ((uint32_t)cfg->bDataBits - 5) << 6;
 3018              	 .loc 6 638 41
 3019 004c 3B68     	 ldr r3,[r7]
 3020 004e 9B79     	 ldrb r3,[r3,#6]
 3021              	 .loc 6 638 53
 3022 0050 053B     	 subs r3,r3,#5
 3023              	 .loc 6 638 58
 3024 0052 9B01     	 lsls r3,r3,#6
 3025              	 .loc 6 638 25
 3026 0054 FB60     	 str r3,[r7,#12]
 639:usb.c         **** 		switch(cfg->bParityType) {
 3027              	 .loc 6 639 13
 3028 0056 3B68     	 ldr r3,[r7]
 3029 0058 5B79     	 ldrb r3,[r3,#5]
 3030 005a 042B     	 cmp r3,#4
 3031 005c 5CD8     	 bhi .L244
 3032 005e 01A2     	 adr r2,.L234
 3033 0060 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 3034              	 .p2align 2
 3035              	.L234:
 3036 0064 79000000 	 .word .L238+1
 3037 0068 81000000 	 .word .L237+1
 3038 006c 89000000 	 .word .L236+1
 3039 0070 8F000000 	 .word .L235+1
 3040 0074 97000000 	 .word .L233+1
 3041              	 .p2align 1
 3042              	.L238:
 640:usb.c         **** 			case CDC_PAR_NONE:
 641:usb.c         **** 			usartopts.parity_type = US_MR_PAR_NO;
 3043              	 .loc 6 641 26
 3044 0078 4FF40063 	 mov r3,#2048
 3045 007c 3B61     	 str r3,[r7,#16]
 642:usb.c         **** 			break;
 3046              	 .loc 6 642 4
 3047 007e 0EE0     	 b .L239
 3048              	.L237:
 643:usb.c         **** 			case CDC_PAR_ODD:
 644:usb.c         **** 			usartopts.parity_type = US_MR_PAR_ODD;
 3049              	 .loc 6 644 26
 3050 0080 4FF40073 	 mov r3,#512
 3051 0084 3B61     	 str r3,[r7,#16]
 645:usb.c         **** 			break;
 3052              	 .loc 6 645 4
 3053 0086 0AE0     	 b .L239
 3054              	.L236:
 646:usb.c         **** 			case CDC_PAR_EVEN:
 647:usb.c         **** 			usartopts.parity_type = US_MR_PAR_EVEN;
 3055              	 .loc 6 647 26
 3056 0088 0023     	 movs r3,#0
 3057 008a 3B61     	 str r3,[r7,#16]
 648:usb.c         **** 			break;
 3058              	 .loc 6 648 4
 3059 008c 07E0     	 b .L239
 3060              	.L235:
 649:usb.c         **** 			case CDC_PAR_MARK:
 650:usb.c         **** 			usartopts.parity_type = US_MR_PAR_MARK;
 3061              	 .loc 6 650 26
 3062 008e 4FF4C063 	 mov r3,#1536
 3063 0092 3B61     	 str r3,[r7,#16]
 651:usb.c         **** 			break;
 3064              	 .loc 6 651 4
 3065 0094 03E0     	 b .L239
 3066              	.L233:
 652:usb.c         **** 			case CDC_PAR_SPACE:
 653:usb.c         **** 			usartopts.parity_type = US_MR_PAR_SPACE;
 3067              	 .loc 6 653 26
 3068 0096 4FF48063 	 mov r3,#1024
 3069 009a 3B61     	 str r3,[r7,#16]
 654:usb.c         **** 			break;
 3070              	 .loc 6 654 4
 3071 009c 00BF     	 nop
 3072              	.L239:
 655:usb.c         **** 			default:
 656:usb.c         **** 			return;
 657:usb.c         **** 		}
 658:usb.c         **** 		if (port == 0)
 3073              	 .loc 6 658 6
 3074 009e FB79     	 ldrb r3,[r7,#7]
 3075 00a0 002B     	 cmp r3,#0
 3076 00a2 3AD1     	 bne .L226
 659:usb.c         **** 		{
 660:usb.c         **** 			//completely restart USART - otherwise breaks tx or stalls
 661:usb.c         **** 			sysclk_enable_peripheral_clock(ID_USART0);
 3077              	 .loc 6 661 4
 3078 00a4 0D20     	 movs r0,#13
 3079 00a6 204B     	 ldr r3,.L245+8
 3080 00a8 9847     	 blx r3
 3081              	.LVL73:
 662:usb.c         **** 			init_circ_buf(&usb_usart_circ_buf);
 3082              	 .loc 6 662 4
 3083 00aa 2048     	 ldr r0,.L245+12
 3084 00ac 204B     	 ldr r3,.L245+16
 3085 00ae 9847     	 blx r3
 3086              	.LVL74:
 663:usb.c         **** 			init_circ_buf(&tx0buf);
 3087              	 .loc 6 663 4
 3088 00b0 2048     	 ldr r0,.L245+20
 3089 00b2 1F4B     	 ldr r3,.L245+16
 3090 00b4 9847     	 blx r3
 3091              	.LVL75:
 664:usb.c         **** 			init_circ_buf(&rx0buf);
 3092              	 .loc 6 664 4
 3093 00b6 2048     	 ldr r0,.L245+24
 3094 00b8 1D4B     	 ldr r3,.L245+16
 3095 00ba 9847     	 blx r3
 3096              	.LVL76:
 665:usb.c         **** 			usart_init_rs232(USART0, &usartopts,  sysclk_get_cpu_hz());
 3097              	 .loc 6 665 4
 3098 00bc 1F4B     	 ldr r3,.L245+28
 3099 00be 9847     	 blx r3
 3100              	.LVL77:
 3101 00c0 0246     	 mov r2,r0
 3102 00c2 07F10803 	 add r3,r7,#8
 3103 00c6 1946     	 mov r1,r3
 3104 00c8 1D48     	 ldr r0,.L245+32
 3105 00ca 1E4B     	 ldr r3,.L245+36
 3106 00cc 9847     	 blx r3
 3107              	.LVL78:
 666:usb.c         **** 			
 667:usb.c         **** 			usart_enable_rx(USART0);
 3108              	 .loc 6 667 4
 3109 00ce 1C48     	 ldr r0,.L245+32
 3110 00d0 1D4B     	 ldr r3,.L245+40
 3111 00d2 9847     	 blx r3
 3112              	.LVL79:
 668:usb.c         **** 			usart_enable_tx(USART0);
 3113              	 .loc 6 668 4
 3114 00d4 1A48     	 ldr r0,.L245+32
 3115 00d6 1D4B     	 ldr r3,.L245+44
 3116 00d8 9847     	 blx r3
 3117              	.LVL80:
 669:usb.c         **** 			
 670:usb.c         **** 			usart_enable_interrupt(USART0, UART_IER_RXRDY);
 3118              	 .loc 6 670 4
 3119 00da 0121     	 movs r1,#1
 3120 00dc 1848     	 ldr r0,.L245+32
 3121 00de 1C4B     	 ldr r3,.L245+48
 3122 00e0 9847     	 blx r3
 3123              	.LVL81:
 671:usb.c         **** 			
 672:usb.c         **** 			gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
 3124              	 .loc 6 672 4
 3125 00e2 4FF00061 	 mov r1,#134217728
 3126 00e6 1320     	 movs r0,#19
 3127 00e8 1A4B     	 ldr r3,.L245+52
 3128 00ea 9847     	 blx r3
 3129              	.LVL82:
 673:usb.c         **** 			gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
 3130              	 .loc 6 673 4
 3131 00ec 4FF00061 	 mov r1,#134217728
 3132 00f0 1220     	 movs r0,#18
 3133 00f2 184B     	 ldr r3,.L245+52
 3134 00f4 9847     	 blx r3
 3135              	.LVL83:
 674:usb.c         **** 			irq_register_handler(USART0_IRQn, 5);
 3136              	 .loc 6 674 4
 3137 00f6 0D20     	 movs r0,#13
 3138 00f8 174B     	 ldr r3,.L245+56
 3139 00fa 9847     	 blx r3
 3140              	.LVL84:
 3141 00fc 0521     	 movs r1,#5
 3142 00fe 0D20     	 movs r0,#13
 3143 0100 164B     	 ldr r3,.L245+60
 3144 0102 9847     	 blx r3
 3145              	.LVL85:
 3146 0104 0D20     	 movs r0,#13
 3147 0106 164B     	 ldr r3,.L245+64
 3148 0108 9847     	 blx r3
 3149              	.LVL86:
 3150 010a 06E0     	 b .L226
 3151              	.L241:
 628:usb.c         **** 		}
 3152              	 .loc 6 628 4
 3153 010c 00BF     	 nop
 3154 010e 04E0     	 b .L226
 3155              	.L242:
 631:usb.c         **** 		if (cfg->bCharFormat > 2)
 3156              	 .loc 6 631 4
 3157 0110 00BF     	 nop
 3158 0112 02E0     	 b .L226
 3159              	.L243:
 633:usb.c         **** 	
 3160              	 .loc 6 633 4
 3161 0114 00BF     	 nop
 3162 0116 00E0     	 b .L226
 3163              	.L244:
 656:usb.c         **** 		}
 3164              	 .loc 6 656 4
 3165 0118 00BF     	 nop
 3166              	.L226:
 3167              	.LBE12:
 675:usb.c         **** 		}
 676:usb.c         **** 	}
 677:usb.c         **** 		
 678:usb.c         **** }
 3168              	 .loc 6 678 1
 3169 011a 2037     	 adds r7,r7,#32
 3170              	.LCFI138:
 3171              	 .cfi_def_cfa_offset 8
 3172 011c BD46     	 mov sp,r7
 3173              	.LCFI139:
 3174              	 .cfi_def_cfa_register 13
 3175              	 
 3176 011e 80BD     	 pop {r7,pc}
 3177              	.L246:
 3178              	 .align 2
 3179              	.L245:
 3180 0120 00000000 	 .word enable_cdc_transfer
 3181 0124 00000000 	 .word usart_x_enabled
 3182 0128 00000000 	 .word sysclk_enable_peripheral_clock
 3183 012c 00000000 	 .word usb_usart_circ_buf
 3184 0130 00000000 	 .word init_circ_buf
 3185 0134 00000000 	 .word tx0buf
 3186 0138 00000000 	 .word rx0buf
 3187 013c 00000000 	 .word sysclk_get_cpu_hz
 3188 0140 00000940 	 .word 1074331648
 3189 0144 00000000 	 .word usart_init_rs232
 3190 0148 00000000 	 .word usart_enable_rx
 3191 014c 00000000 	 .word usart_enable_tx
 3192 0150 00000000 	 .word usart_enable_interrupt
 3193 0154 00000000 	 .word pio_configure_pin
 3194 0158 00000000 	 .word NVIC_ClearPendingIRQ
 3195 015c 00000000 	 .word NVIC_SetPriority
 3196 0160 00000000 	 .word NVIC_EnableIRQ
 3197              	 .cfi_endproc
 3198              	.LFE212:
 3200              	 .section .bss.respbuf.9405,"aw",%nobits
 3201              	 .align 2
 3204              	respbuf.9405:
 3205 0000 00000000 	 .space 128
 3205      00000000 
 3205      00000000 
 3205      00000000 
 3205      00000000 
 3206              	 .section .bss.respbuf.9421,"aw",%nobits
 3207              	 .align 2
 3210              	respbuf.9421:
 3211 0000 00000000 	 .space 64
 3211      00000000 
 3211      00000000 
 3211      00000000 
 3211      00000000 
 3212              	 .text
 3213              	.Letext0:
 3214              	 .file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 3215              	 .file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 3216              	 .file 9 ".././hal/sam3u1c/inc/sam3u1c.h"
 3217              	 .file 10 ".././hal/sam3u1c/inc/system_sam3u.h"
 3218              	 .file 11 ".././hal/sam3u1c/inc/component/component_efc.h"
 3219              	 .file 12 ".././hal/sam3u1c/inc/component/component_rstc.h"
 3220              	 .file 13 ".././hal/sam3u1c/inc/component/component_usart.h"
 3221              	 .file 14 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 3222              	 .file 15 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 3223              	 .file 16 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 3224              	 .file 17 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 3225              	 .file 18 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 3226              	 .file 19 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 3227              	 .file 20 ".././hal/sam3u1c/inc/compiler.h"
 3228              	 .file 21 ".././hal/sam3u1c/inc/sam3u/pll.h"
 3229              	 .file 22 ".././hal/sam3u1c/inc/pio.h"
 3230              	 .file 23 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
 3231              	 .file 24 ".././hal/sam3u1c/inc/usart.h"
 3232              	 .file 25 ".././hal/sam3u1c/inc/usb_protocol_cdc.h"
 3233              	 .file 26 "./conf_usb.h"
 3234              	 .file 27 ".././hal/sam3u1c/inc/usb_protocol.h"
 3235              	 .file 28 ".././hal/sam3u1c/inc/udi.h"
 3236              	 .file 29 ".././hal/sam3u1c/inc/udc_desc.h"
 3237              	 .file 30 ".././hal/sam3u1c/inc/udd.h"
 3238              	 .file 31 ".././hal/sam3u1c/inc/udi_vendor.h"
 3239              	 .file 32 ".././hal/sam3u1c/inc/udi_cdc.h"
 3240              	 .file 33 ".././hal/sam3u1c/inc/stdio_serial.h"
 3241              	 .file 34 ".././hal/sam3u1c/inc/usb.h"
 3242              	 .file 35 "usb_xmem.h"
 3243              	 .file 36 "fpga_program.h"
 3244              	 .file 37 ".././hal/sam3u1c/inc/circbuffer.h"
 3245              	 .file 38 ".././hal/sam3u1c/inc/pmc.h"
 3246              	 .file 39 ".././hal/sam3u1c/inc/efc.h"
 3247              	 .file 40 ".././hal/sam3u1c/inc/ui.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usb.c
    {standard input}:16     .text.NVIC_EnableIRQ:00000000 $t
    {standard input}:23     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
    {standard input}:74     .text.NVIC_EnableIRQ:0000002c $d
    {standard input}:79     .text.NVIC_ClearPendingIRQ:00000000 $t
    {standard input}:85     .text.NVIC_ClearPendingIRQ:00000000 NVIC_ClearPendingIRQ
    {standard input}:136    .text.NVIC_ClearPendingIRQ:00000030 $d
    {standard input}:141    .text.NVIC_SetPriority:00000000 $t
    {standard input}:147    .text.NVIC_SetPriority:00000000 NVIC_SetPriority
    {standard input}:221    .text.NVIC_SetPriority:0000004c $d
    {standard input}:227    .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:230    .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:235    .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:236    .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:238    .text.osc_enable:00000000 $t
    {standard input}:244    .text.osc_enable:00000000 osc_enable
    {standard input}:270    .text.osc_enable:00000014 $d
    {standard input}:278    .text.osc_enable:00000034 $t
    {standard input}:352    .text.osc_enable:00000074 $d
    {standard input}:360    .text.osc_is_ready:00000000 $t
    {standard input}:366    .text.osc_is_ready:00000000 osc_is_ready
    {standard input}:391    .text.osc_is_ready:00000014 $d
    {standard input}:399    .text.osc_is_ready:00000034 $t
    {standard input}:457    .text.osc_is_ready:00000078 $d
    {standard input}:464    .text.osc_get_rate:00000000 $t
    {standard input}:470    .text.osc_get_rate:00000000 osc_get_rate
    {standard input}:495    .text.osc_get_rate:00000014 $d
    {standard input}:503    .text.osc_get_rate:00000034 $t
    {standard input}:557    .text.osc_get_rate:00000064 $d
    {standard input}:564    .text.osc_wait_ready:00000000 $t
    {standard input}:570    .text.osc_wait_ready:00000000 osc_wait_ready
    {standard input}:620    .text.osc_wait_ready:0000002c $d
    {standard input}:625    .text.sysclk_get_main_hz:00000000 $t
    {standard input}:631    .text.sysclk_get_main_hz:00000000 sysclk_get_main_hz
    {standard input}:659    .text.sysclk_get_main_hz:00000014 $d
    {standard input}:664    .text.sysclk_get_cpu_hz:00000000 $t
    {standard input}:670    .text.sysclk_get_cpu_hz:00000000 sysclk_get_cpu_hz
    {standard input}:697    .text.sysclk_get_cpu_hz:00000010 $d
    {standard input}:702    .text.sysclk_enable_peripheral_clock:00000000 $t
    {standard input}:708    .text.sysclk_enable_peripheral_clock:00000000 sysclk_enable_peripheral_clock
    {standard input}:744    .text.sysclk_enable_peripheral_clock:00000018 $d
    {standard input}:749    .text.udc_detach:00000000 $t
    {standard input}:755    .text.udc_detach:00000000 udc_detach
    {standard input}:780    .text.udc_detach:0000000c $d
    {standard input}:788    .data.g_captureinprogress:00000000 g_captureinprogress
    {standard input}:793    .data.main_b_vendor_enable:00000000 main_b_vendor_enable
    {standard input}:798    .bss.active:00000000 active
    {standard input}:799    .bss.active:00000000 $d
    {standard input}:804    .bss.USB_PWR_STATE:00000000 USB_PWR_STATE
    {standard input}:805    .bss.USB_PWR_STATE:00000000 $d
    {standard input}:807    .bss.main_buf_loopback:00000000 $d
    {standard input}:810    .bss.main_buf_loopback:00000000 main_buf_loopback
    {standard input}:813    .text.main_suspend_action:00000000 $t
    {standard input}:820    .text.main_suspend_action:00000000 main_suspend_action
    {standard input}:849    .text.main_suspend_action:00000014 $d
    {standard input}:855    .text.main_resume_action:00000000 $t
    {standard input}:862    .text.main_resume_action:00000000 main_resume_action
    {standard input}:886    .text.main_resume_action:0000000c $d
    {standard input}:891    .text.main_sof_action:00000000 $t
    {standard input}:898    .text.main_sof_action:00000000 main_sof_action
    {standard input}:940    .text.main_sof_action:00000028 $d
    {standard input}:947    .text.main_vendor_enable:00000000 $t
    {standard input}:954    .text.main_vendor_enable:00000000 main_vendor_enable
    {standard input}:991    .text.main_vendor_enable:00000024 $d
    {standard input}:2533   .text.main_vendor_bulk_out_received:00000000 main_vendor_bulk_out_received
    {standard input}:1000   .text.main_vendor_disable:00000000 $t
    {standard input}:1007   .text.main_vendor_disable:00000000 main_vendor_disable
    {standard input}:1039   .text.main_vendor_disable:00000014 $d
    {standard input}:1044   .bss.ctrlbuffer:00000000 $d
    {standard input}:1047   .bss.ctrlbuffer:00000000 ctrlbuffer
    {standard input}:1052   .bss.blockendpoint_usage:00000000 blockendpoint_usage
    {standard input}:1053   .bss.blockendpoint_usage:00000000 $d
    {standard input}:1055   .bss.ctrlmemread_buf:00000000 $d
    {standard input}:1058   .bss.ctrlmemread_buf:00000000 ctrlmemread_buf
    {standard input}:1061   .bss.ctrlmemread_size:00000000 $d
    {standard input}:1064   .bss.ctrlmemread_size:00000000 ctrlmemread_size
    {standard input}:1067   .text.ctrl_readmem_bulk:00000000 $t
    {standard input}:1074   .text.ctrl_readmem_bulk:00000000 ctrl_readmem_bulk
    {standard input}:1145   .text.ctrl_readmem_bulk:00000044 $d
    {standard input}:2464   .text.main_vendor_bulk_in_received:00000000 main_vendor_bulk_in_received
    {standard input}:1155   .text.ctrl_readmem_ctrl:00000000 $t
    {standard input}:1162   .text.ctrl_readmem_ctrl:00000000 ctrl_readmem_ctrl
    {standard input}:1234   .text.ctrl_readmem_ctrl:00000044 $d
    {standard input}:1244   .text.ctrl_writemem_ctrl:00000000 $t
    {standard input}:1251   .text.ctrl_writemem_ctrl:00000000 ctrl_writemem_ctrl
    {standard input}:1349   .text.ctrl_writemem_ctrl:00000060 $d
    {standard input}:1359   .bss.bulkread_address:00000000 $d
    {standard input}:1362   .bss.bulkread_address:00000000 bulkread_address
    {standard input}:1365   .bss.bulkread_len:00000000 $d
    {standard input}:1368   .bss.bulkread_len:00000000 bulkread_len
    {standard input}:1371   .text.ctrl_writemem_bulk:00000000 $t
    {standard input}:1378   .text.ctrl_writemem_bulk:00000000 ctrl_writemem_bulk
    {standard input}:1437   .text.ctrl_writemem_bulk:00000030 $d
    {standard input}:1445   .text.ctrl_sam3ucfg_cb:00000000 $t
    {standard input}:1451   .text.ctrl_sam3ucfg_cb:00000000 ctrl_sam3ucfg_cb
    {standard input}:1550   .text.ctrl_sam3ucfg_cb:0000006c $d
    {standard input}:1563   .text.ctrl_progfpga_bulk:00000000 $t
    {standard input}:1570   .text.ctrl_progfpga_bulk:00000000 ctrl_progfpga_bulk
    {standard input}:1633   .text.ctrl_progfpga_bulk:0000003c $d
    {standard input}:1641   .text.ctrl_fpga_reset:00000000 $t
    {standard input}:1648   .text.ctrl_fpga_reset:00000000 ctrl_fpga_reset
    {standard input}:1678   .text.ctrl_fpga_reset:00000014 $d
    {standard input}:1684   .text.ctrl_usart_cb:00000000 $t
    {standard input}:1690   .text.ctrl_usart_cb:00000000 ctrl_usart_cb
    {standard input}:1716   .text.ctrl_usart_cb:00000010 $d
    {standard input}:1722   .text.ctrl_usart_cb_data:00000000 $t
    {standard input}:1728   .text.ctrl_usart_cb_data:00000000 ctrl_usart_cb_data
    {standard input}:1808   .text.ctrl_usart_cb_data:00000048 $d
    {standard input}:1815   .text.spi_adc_cb:00000000 $t
    {standard input}:1821   .text.spi_adc_cb:00000000 spi_adc_cb
    {standard input}:1870   .text.spi_adc_cb:0000002c $d
    {standard input}:1876   .text.ctrl_xmega_program_void:00000000 $t
    {standard input}:1883   .text.ctrl_xmega_program_void:00000000 ctrl_xmega_program_void
    {standard input}:1907   .text.ctrl_xmega_program_void:0000000c $d
    {standard input}:1912   .text.ctrl_avr_program_void:00000000 $t
    {standard input}:1919   .text.ctrl_avr_program_void:00000000 ctrl_avr_program_void
    {standard input}:1943   .text.ctrl_avr_program_void:0000000c $d
    {standard input}:1948   .text.main_setup_out_received:00000000 $t
    {standard input}:1955   .text.main_setup_out_received:00000000 main_setup_out_received
    {standard input}:1997   .text.main_setup_out_received:00000030 $d
    {standard input}:2020   .text.main_setup_out_received:0000008c $t
    {standard input}:2166   .text.main_setup_out_received:00000138 $d
    {standard input}:2184   .text.main_setup_in_received:00000000 $t
    {standard input}:2191   .text.main_setup_in_received:00000000 main_setup_in_received
    {standard input}:2218   .text.main_setup_in_received:00000018 $d
    {standard input}:2239   .text.main_setup_in_received:0000006c $t
    {standard input}:2442   .text.main_setup_in_received:00000178 $d
    {standard input}:3210   .bss.respbuf.9421:00000000 respbuf.9421
    {standard input}:2457   .text.main_vendor_bulk_in_received:00000000 $t
    {standard input}:2520   .text.main_vendor_bulk_in_received:00000030 $d
    {standard input}:2526   .text.main_vendor_bulk_out_received:00000000 $t
    {standard input}:2673   .text.main_vendor_bulk_out_received:000000a0 $d
    {standard input}:2689   .bss.enable_cdc_transfer:00000000 enable_cdc_transfer
    {standard input}:2686   .bss.enable_cdc_transfer:00000000 $d
    {standard input}:2692   .text.cdc_enable:00000000 $t
    {standard input}:2699   .text.cdc_enable:00000000 cdc_enable
    {standard input}:2743   .text.cdc_enable:00000020 $d
    {standard input}:2748   .text.cdc_disable:00000000 $t
    {standard input}:2755   .text.cdc_disable:00000000 cdc_disable
    {standard input}:2797   .text.cdc_disable:0000001c $d
    {standard input}:2802   .bss.uart_buf:00000000 $d
    {standard input}:2805   .bss.uart_buf:00000000 uart_buf
    {standard input}:2808   .text.my_callback_rx_notify:00000000 $t
    {standard input}:2815   .text.my_callback_rx_notify:00000000 my_callback_rx_notify
    {standard input}:2933   .text.my_callback_rx_notify:00000084 $d
    {standard input}:2944   .text.my_callback_config:00000000 $t
    {standard input}:2951   .text.my_callback_config:00000000 my_callback_config
    {standard input}:3036   .text.my_callback_config:00000064 $d
    {standard input}:3041   .text.my_callback_config:00000078 $t
    {standard input}:3180   .text.my_callback_config:00000120 $d
    {standard input}:3201   .bss.respbuf.9405:00000000 $d
    {standard input}:3204   .bss.respbuf.9405:00000000 respbuf.9405
    {standard input}:3207   .bss.respbuf.9421:00000000 $d
                           .group:00000000 wm4.0.84f01b7600eb36308f16331d3d2e9779
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.48.3fc21f768e842120f151448a98046af0
                           .group:00000000 wm4.cw521.h.62.38d76eca36ece19cb9950be38af128c7
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.cycle_counter.h.44.fde38fb1acfd6555d72e65fae6e86af5
                           .group:00000000 wm4.delay.h.105.f2a8ab5e71eab0684cf6985b5c2fc9e8
                           .group:00000000 wm4.efc.h.45.ec5734119c630498df26106bacf9a684
                           .group:00000000 wm4.flash_efc.h.90.a4a39259055880dc10b861c5fe1b99e7
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.sam_gpio.h.50.76a45c51855d665134f8211cd601d693
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.smc.h.45.17a94aa976bb62b1109d03e8a314a569
                           .group:00000000 wm4.spi.h.45.712c66be09ffbac297c2e00923077297
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3
                           .group:00000000 wm4.usart.h.46.eae6fe592b7ea0768efef8d312e7f44f
                           .group:00000000 wm4.usb_protocol_cdc.h.37.f6a736c1ba557ae596ae60fafc889d06
                           .group:00000000 wm4.conf_usb.h.38.caec09ff3c405b5325f1f32790b86cb2
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.udi_cdc.h.116.611453a0c813c5f2b6cd437c48e7eee8
                           .group:00000000 wm4.uart.h.45.a5af743b8064bd84d1a6438457096e18
                           .group:00000000 wm4.conf_uart_serial.h.45.245cdceaa1a3811fd043bf660ce38054
                           .group:00000000 wm4.genclk.h.45.f7865052b40a907e4bab1a8f483a50e2
                           .group:00000000 wm4.usb.h.20.f560de5b472e2e451b5cba954e5d0064
                           .group:00000000 wm4.usb_xmem.h.16.2bfdefafb315212fe60310212368ffbb
                           .group:00000000 wm4.fpga_program.h.36.190ebe3d8947892068b52cb69c85273d
                           .group:00000000 wm4.circbuffer.h.31.4149e39e4888e1a5cfa2187a0570dc84
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd

UNDEFINED SYMBOLS
pmc_switch_sclk_to_32kxtal
pmc_osc_enable_fastrc
pmc_osc_enable_main_xtal
pmc_osc_bypass_main_xtal
pmc_osc_is_ready_32kxtal
pmc_osc_is_ready_fastrc
pmc_osc_is_ready_main_xtal
pmc_enable_periph_clk
udd_detach
ui_powerdown
ui_wakeup
udd_get_frame_number
ui_process
udi_vendor_bulk_out_run
FPGA_releaselock
FPGA_setlock
FPGA_setaddr
udi_vendor_bulk_in_run
xram
udd_g_ctrlreq
pmc_switch_mck_to_mainck
pmc_switch_mck_to_pllack
efc_perform_command
fpga_program_setup1
fpga_program_setup2
pio_set_pin_high
pio_set_pin_low
ctrl_usart
usart_driver_putchar
write_spi_adc
XPROGProtocol_Command
V2Protocol_ProcessCommand
FPGA_lockstatus
usart_driver_getchar
pio_get_pin_value
read_spi_adc
fpga_program_sendbyte
usart_x_enabled
udi_cdc_multi_get_nb_received_data
udi_cdc_multi_read_buf
usb_usart_circ_buf
init_circ_buf
tx0buf
rx0buf
usart_init_rs232
usart_enable_rx
usart_enable_tx
usart_enable_interrupt
pio_configure_pin
