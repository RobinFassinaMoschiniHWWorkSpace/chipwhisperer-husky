   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "udphs_device.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.NVIC_EnableIRQ,"ax",%progbits
  16              	 .align 1
  17              	 .arch armv7-m
  18              	 .syntax unified
  19              	 .thumb
  20              	 .thumb_func
  21              	 .fpu softvfp
  23              	NVIC_EnableIRQ:
  24              	.LFB41:
  25              	 .file 1 ".././hal/sam3u1c/inc/core_cm3.h"
   1:.././hal/sam3u1c/inc/core_cm3.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cm3.h ****  * @file     core_cm3.h
   3:.././hal/sam3u1c/inc/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:.././hal/sam3u1c/inc/core_cm3.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cm3.h ****  * @date     03. February 2012
   6:.././hal/sam3u1c/inc/core_cm3.h ****  *
   7:.././hal/sam3u1c/inc/core_cm3.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cm3.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cm3.h ****  *
  10:.././hal/sam3u1c/inc/core_cm3.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cm3.h ****  *
  15:.././hal/sam3u1c/inc/core_cm3.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cm3.h ****  *
  22:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cm3.h **** #if defined ( __ICCARM__ )
  24:.././hal/sam3u1c/inc/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  26:.././hal/sam3u1c/inc/core_cm3.h **** 
  27:.././hal/sam3u1c/inc/core_cm3.h **** #ifdef __cplusplus
  28:.././hal/sam3u1c/inc/core_cm3.h ****  extern "C" {
  29:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  30:.././hal/sam3u1c/inc/core_cm3.h **** 
  31:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:.././hal/sam3u1c/inc/core_cm3.h **** 
  34:.././hal/sam3u1c/inc/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  35:.././hal/sam3u1c/inc/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  36:.././hal/sam3u1c/inc/core_cm3.h ****   
  37:.././hal/sam3u1c/inc/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  38:.././hal/sam3u1c/inc/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'. 
  39:.././hal/sam3u1c/inc/core_cm3.h **** 
  40:.././hal/sam3u1c/inc/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  41:.././hal/sam3u1c/inc/core_cm3.h ****      Unions are used for effective representation of core registers.
  42:.././hal/sam3u1c/inc/core_cm3.h ****    
  43:.././hal/sam3u1c/inc/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  44:.././hal/sam3u1c/inc/core_cm3.h ****      Function-like macros are used to allow more efficient code. 
  45:.././hal/sam3u1c/inc/core_cm3.h ****  */
  46:.././hal/sam3u1c/inc/core_cm3.h **** 
  47:.././hal/sam3u1c/inc/core_cm3.h **** 
  48:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
  49:.././hal/sam3u1c/inc/core_cm3.h ****  *                 CMSIS definitions
  50:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
  51:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup Cortex_M3
  52:.././hal/sam3u1c/inc/core_cm3.h ****   @{
  53:.././hal/sam3u1c/inc/core_cm3.h ****  */
  54:.././hal/sam3u1c/inc/core_cm3.h **** 
  55:.././hal/sam3u1c/inc/core_cm3.h **** /*  CMSIS CM3 definitions */
  56:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  57:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                   /*!< [15:0]  CMSIS HAL s
  58:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  59:.././hal/sam3u1c/inc/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  60:.././hal/sam3u1c/inc/core_cm3.h **** 
  61:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  62:.././hal/sam3u1c/inc/core_cm3.h **** 
  63:.././hal/sam3u1c/inc/core_cm3.h **** 
  64:.././hal/sam3u1c/inc/core_cm3.h **** #if   defined ( __CC_ARM )
  65:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  66:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  67:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  68:.././hal/sam3u1c/inc/core_cm3.h **** 
  69:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
  70:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  71:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  72:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  73:.././hal/sam3u1c/inc/core_cm3.h **** 
  74:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TMS470__ )
  75:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  76:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  77:.././hal/sam3u1c/inc/core_cm3.h **** 
  78:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __GNUC__ )
  79:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  80:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  81:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  82:.././hal/sam3u1c/inc/core_cm3.h **** 
  83:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TASKING__ )
  84:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  85:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  86:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  87:.././hal/sam3u1c/inc/core_cm3.h **** 
  88:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  89:.././hal/sam3u1c/inc/core_cm3.h **** 
  90:.././hal/sam3u1c/inc/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
  91:.././hal/sam3u1c/inc/core_cm3.h **** */
  92:.././hal/sam3u1c/inc/core_cm3.h **** #define __FPU_USED       0
  93:.././hal/sam3u1c/inc/core_cm3.h **** 
  94:.././hal/sam3u1c/inc/core_cm3.h **** #if defined ( __CC_ARM )
  95:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  96:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  97:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
  98:.././hal/sam3u1c/inc/core_cm3.h **** 
  99:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
 100:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __ARMVFP__
 101:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 102:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 103:.././hal/sam3u1c/inc/core_cm3.h **** 
 104:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TMS470__ )
 105:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 106:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 107:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 108:.././hal/sam3u1c/inc/core_cm3.h **** 
 109:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __GNUC__ )
 110:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 111:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 113:.././hal/sam3u1c/inc/core_cm3.h **** 
 114:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TASKING__ )
 115:.././hal/sam3u1c/inc/core_cm3.h ****     /* add preprocessor checks */
 116:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 117:.././hal/sam3u1c/inc/core_cm3.h **** 
 118:.././hal/sam3u1c/inc/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 119:.././hal/sam3u1c/inc/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 120:.././hal/sam3u1c/inc/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 121:.././hal/sam3u1c/inc/core_cm3.h **** 
 122:.././hal/sam3u1c/inc/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 123:.././hal/sam3u1c/inc/core_cm3.h **** 
 124:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CMSIS_GENERIC
 125:.././hal/sam3u1c/inc/core_cm3.h **** 
 126:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 127:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 128:.././hal/sam3u1c/inc/core_cm3.h **** 
 129:.././hal/sam3u1c/inc/core_cm3.h **** /* check device defines and use defaults */
 130:.././hal/sam3u1c/inc/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 131:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __CM3_REV
 132:.././hal/sam3u1c/inc/core_cm3.h ****     #define __CM3_REV               0x0200
 133:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 134:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 135:.././hal/sam3u1c/inc/core_cm3.h **** 
 136:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __MPU_PRESENT
 137:.././hal/sam3u1c/inc/core_cm3.h ****     #define __MPU_PRESENT             0
 138:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 139:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 140:.././hal/sam3u1c/inc/core_cm3.h **** 
 141:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 142:.././hal/sam3u1c/inc/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 143:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 144:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 145:.././hal/sam3u1c/inc/core_cm3.h **** 
 146:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 147:.././hal/sam3u1c/inc/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 148:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 149:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 150:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 151:.././hal/sam3u1c/inc/core_cm3.h **** 
 152:.././hal/sam3u1c/inc/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 153:.././hal/sam3u1c/inc/core_cm3.h **** /**
 154:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 155:.././hal/sam3u1c/inc/core_cm3.h ****  
 156:.././hal/sam3u1c/inc/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 157:.././hal/sam3u1c/inc/core_cm3.h ****     \li to specify the access to peripheral variables.
 158:.././hal/sam3u1c/inc/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 159:.././hal/sam3u1c/inc/core_cm3.h **** */
 160:.././hal/sam3u1c/inc/core_cm3.h **** #ifdef __cplusplus
 161:.././hal/sam3u1c/inc/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 162:.././hal/sam3u1c/inc/core_cm3.h **** #else
 163:.././hal/sam3u1c/inc/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 164:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 165:.././hal/sam3u1c/inc/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 166:.././hal/sam3u1c/inc/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 167:.././hal/sam3u1c/inc/core_cm3.h **** 
 168:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group Cortex_M3 */
 169:.././hal/sam3u1c/inc/core_cm3.h **** 
 170:.././hal/sam3u1c/inc/core_cm3.h **** 
 171:.././hal/sam3u1c/inc/core_cm3.h **** 
 172:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
 173:.././hal/sam3u1c/inc/core_cm3.h ****  *                 Register Abstraction
 174:.././hal/sam3u1c/inc/core_cm3.h ****   Core Register contain:
 175:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Register
 176:.././hal/sam3u1c/inc/core_cm3.h ****   - Core NVIC Register
 177:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SCB Register
 178:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SysTick Register
 179:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Debug Register
 180:.././hal/sam3u1c/inc/core_cm3.h ****   - Core MPU Register
 181:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
 182:.././hal/sam3u1c/inc/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 183:.././hal/sam3u1c/inc/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 184:.././hal/sam3u1c/inc/core_cm3.h **** */
 185:.././hal/sam3u1c/inc/core_cm3.h **** 
 186:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
 187:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 188:.././hal/sam3u1c/inc/core_cm3.h ****     \brief  Core Register type definitions.
 189:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 190:.././hal/sam3u1c/inc/core_cm3.h ****  */
 191:.././hal/sam3u1c/inc/core_cm3.h **** 
 192:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 193:.././hal/sam3u1c/inc/core_cm3.h ****  */
 194:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 195:.././hal/sam3u1c/inc/core_cm3.h **** {
 196:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 197:.././hal/sam3u1c/inc/core_cm3.h ****   {
 198:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 199:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 200:.././hal/sam3u1c/inc/core_cm3.h **** #else
 201:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 202:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 203:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 204:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 205:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 206:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 207:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 208:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 209:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 210:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 211:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 212:.././hal/sam3u1c/inc/core_cm3.h **** } APSR_Type;
 213:.././hal/sam3u1c/inc/core_cm3.h **** 
 214:.././hal/sam3u1c/inc/core_cm3.h **** 
 215:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 216:.././hal/sam3u1c/inc/core_cm3.h ****  */
 217:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 218:.././hal/sam3u1c/inc/core_cm3.h **** {
 219:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 220:.././hal/sam3u1c/inc/core_cm3.h ****   {
 221:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 222:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 223:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 224:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 225:.././hal/sam3u1c/inc/core_cm3.h **** } IPSR_Type;
 226:.././hal/sam3u1c/inc/core_cm3.h **** 
 227:.././hal/sam3u1c/inc/core_cm3.h **** 
 228:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 229:.././hal/sam3u1c/inc/core_cm3.h ****  */
 230:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 231:.././hal/sam3u1c/inc/core_cm3.h **** {
 232:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 233:.././hal/sam3u1c/inc/core_cm3.h ****   {
 234:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 235:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 236:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 237:.././hal/sam3u1c/inc/core_cm3.h **** #else
 238:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 239:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 240:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 241:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 242:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 243:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 244:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 245:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 246:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 247:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 248:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 249:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 250:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 251:.././hal/sam3u1c/inc/core_cm3.h **** } xPSR_Type;
 252:.././hal/sam3u1c/inc/core_cm3.h **** 
 253:.././hal/sam3u1c/inc/core_cm3.h **** 
 254:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 255:.././hal/sam3u1c/inc/core_cm3.h ****  */
 256:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 257:.././hal/sam3u1c/inc/core_cm3.h **** {
 258:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 259:.././hal/sam3u1c/inc/core_cm3.h ****   {
 260:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 261:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 262:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 263:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 264:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 265:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 266:.././hal/sam3u1c/inc/core_cm3.h **** } CONTROL_Type;
 267:.././hal/sam3u1c/inc/core_cm3.h **** 
 268:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_CORE */
 269:.././hal/sam3u1c/inc/core_cm3.h **** 
 270:.././hal/sam3u1c/inc/core_cm3.h **** 
 271:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
 272:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 273:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 274:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 275:.././hal/sam3u1c/inc/core_cm3.h ****  */
 276:.././hal/sam3u1c/inc/core_cm3.h **** 
 277:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 278:.././hal/sam3u1c/inc/core_cm3.h ****  */
 279:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 280:.././hal/sam3u1c/inc/core_cm3.h **** {
 281:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 282:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[24];
 283:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 284:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RSERVED1[24];
 285:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 286:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[24];
 287:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 288:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED3[24];
 289:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 290:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED4[56];
 291:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 292:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED5[644];
 293:.././hal/sam3u1c/inc/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 294:.././hal/sam3u1c/inc/core_cm3.h **** }  NVIC_Type;
 295:.././hal/sam3u1c/inc/core_cm3.h **** 
 296:.././hal/sam3u1c/inc/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 297:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 298:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 299:.././hal/sam3u1c/inc/core_cm3.h **** 
 300:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 301:.././hal/sam3u1c/inc/core_cm3.h **** 
 302:.././hal/sam3u1c/inc/core_cm3.h **** 
 303:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 304:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 305:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 306:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 307:.././hal/sam3u1c/inc/core_cm3.h ****  */
 308:.././hal/sam3u1c/inc/core_cm3.h **** 
 309:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 310:.././hal/sam3u1c/inc/core_cm3.h ****  */
 311:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 312:.././hal/sam3u1c/inc/core_cm3.h **** {
 313:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 314:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 315:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 316:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 317:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 318:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 319:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 320:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 321:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 322:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 323:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 324:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 325:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 326:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 327:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 328:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 329:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 330:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 331:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 332:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[5];
 333:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 334:.././hal/sam3u1c/inc/core_cm3.h **** } SCB_Type;
 335:.././hal/sam3u1c/inc/core_cm3.h **** 
 336:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB CPUID Register Definitions */
 337:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 338:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 339:.././hal/sam3u1c/inc/core_cm3.h **** 
 340:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 341:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 342:.././hal/sam3u1c/inc/core_cm3.h **** 
 343:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 344:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 345:.././hal/sam3u1c/inc/core_cm3.h **** 
 346:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 347:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 348:.././hal/sam3u1c/inc/core_cm3.h **** 
 349:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 350:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 351:.././hal/sam3u1c/inc/core_cm3.h **** 
 352:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 353:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 354:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 355:.././hal/sam3u1c/inc/core_cm3.h **** 
 356:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 357:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 358:.././hal/sam3u1c/inc/core_cm3.h **** 
 359:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 360:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 361:.././hal/sam3u1c/inc/core_cm3.h **** 
 362:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 363:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 364:.././hal/sam3u1c/inc/core_cm3.h **** 
 365:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 366:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 367:.././hal/sam3u1c/inc/core_cm3.h **** 
 368:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 369:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 370:.././hal/sam3u1c/inc/core_cm3.h **** 
 371:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 372:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 373:.././hal/sam3u1c/inc/core_cm3.h **** 
 374:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 375:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 376:.././hal/sam3u1c/inc/core_cm3.h **** 
 377:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 378:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 379:.././hal/sam3u1c/inc/core_cm3.h **** 
 380:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 381:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 382:.././hal/sam3u1c/inc/core_cm3.h **** 
 383:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 384:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 385:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 386:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 387:.././hal/sam3u1c/inc/core_cm3.h **** 
 388:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 389:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 390:.././hal/sam3u1c/inc/core_cm3.h **** #else
 391:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 392:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 393:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 394:.././hal/sam3u1c/inc/core_cm3.h **** 
 395:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 396:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 397:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 398:.././hal/sam3u1c/inc/core_cm3.h **** 
 399:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 400:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 401:.././hal/sam3u1c/inc/core_cm3.h **** 
 402:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 403:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 404:.././hal/sam3u1c/inc/core_cm3.h **** 
 405:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 406:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 407:.././hal/sam3u1c/inc/core_cm3.h **** 
 408:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 409:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:.././hal/sam3u1c/inc/core_cm3.h **** 
 411:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 412:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:.././hal/sam3u1c/inc/core_cm3.h **** 
 414:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 415:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 416:.././hal/sam3u1c/inc/core_cm3.h **** 
 417:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB System Control Register Definitions */
 418:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 419:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 420:.././hal/sam3u1c/inc/core_cm3.h **** 
 421:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 422:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 423:.././hal/sam3u1c/inc/core_cm3.h **** 
 424:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 425:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 426:.././hal/sam3u1c/inc/core_cm3.h **** 
 427:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 428:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 429:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 430:.././hal/sam3u1c/inc/core_cm3.h **** 
 431:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 432:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 433:.././hal/sam3u1c/inc/core_cm3.h **** 
 434:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 435:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 436:.././hal/sam3u1c/inc/core_cm3.h **** 
 437:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 438:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 439:.././hal/sam3u1c/inc/core_cm3.h **** 
 440:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 441:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 442:.././hal/sam3u1c/inc/core_cm3.h **** 
 443:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 444:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 445:.././hal/sam3u1c/inc/core_cm3.h **** 
 446:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 447:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 448:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 449:.././hal/sam3u1c/inc/core_cm3.h **** 
 450:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 451:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 452:.././hal/sam3u1c/inc/core_cm3.h **** 
 453:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 454:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 455:.././hal/sam3u1c/inc/core_cm3.h **** 
 456:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 457:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:.././hal/sam3u1c/inc/core_cm3.h **** 
 459:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 460:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 461:.././hal/sam3u1c/inc/core_cm3.h **** 
 462:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 463:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 464:.././hal/sam3u1c/inc/core_cm3.h **** 
 465:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 466:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 467:.././hal/sam3u1c/inc/core_cm3.h **** 
 468:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 469:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 470:.././hal/sam3u1c/inc/core_cm3.h **** 
 471:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 472:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 473:.././hal/sam3u1c/inc/core_cm3.h **** 
 474:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 475:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 476:.././hal/sam3u1c/inc/core_cm3.h **** 
 477:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 478:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 479:.././hal/sam3u1c/inc/core_cm3.h **** 
 480:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 481:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 482:.././hal/sam3u1c/inc/core_cm3.h **** 
 483:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 484:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 485:.././hal/sam3u1c/inc/core_cm3.h **** 
 486:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 487:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 488:.././hal/sam3u1c/inc/core_cm3.h **** 
 489:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 490:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 491:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 492:.././hal/sam3u1c/inc/core_cm3.h **** 
 493:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 494:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 495:.././hal/sam3u1c/inc/core_cm3.h **** 
 496:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 497:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 498:.././hal/sam3u1c/inc/core_cm3.h **** 
 499:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 500:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 501:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 502:.././hal/sam3u1c/inc/core_cm3.h **** 
 503:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 504:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 505:.././hal/sam3u1c/inc/core_cm3.h **** 
 506:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 507:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 508:.././hal/sam3u1c/inc/core_cm3.h **** 
 509:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 510:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 511:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 512:.././hal/sam3u1c/inc/core_cm3.h **** 
 513:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 514:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 515:.././hal/sam3u1c/inc/core_cm3.h **** 
 516:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 517:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 518:.././hal/sam3u1c/inc/core_cm3.h **** 
 519:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 520:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 521:.././hal/sam3u1c/inc/core_cm3.h **** 
 522:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 523:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 524:.././hal/sam3u1c/inc/core_cm3.h **** 
 525:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SCB */
 526:.././hal/sam3u1c/inc/core_cm3.h **** 
 527:.././hal/sam3u1c/inc/core_cm3.h **** 
 528:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 529:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 530:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 531:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 532:.././hal/sam3u1c/inc/core_cm3.h ****  */
 533:.././hal/sam3u1c/inc/core_cm3.h **** 
 534:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 535:.././hal/sam3u1c/inc/core_cm3.h ****  */
 536:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 537:.././hal/sam3u1c/inc/core_cm3.h **** {
 538:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[1];
 539:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 540:.././hal/sam3u1c/inc/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 541:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 542:.././hal/sam3u1c/inc/core_cm3.h **** #else
 543:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[1];
 544:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 545:.././hal/sam3u1c/inc/core_cm3.h **** } SCnSCB_Type;
 546:.././hal/sam3u1c/inc/core_cm3.h **** 
 547:.././hal/sam3u1c/inc/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 548:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 549:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 550:.././hal/sam3u1c/inc/core_cm3.h **** 
 551:.././hal/sam3u1c/inc/core_cm3.h **** /* Auxiliary Control Register Definitions */
 552:.././hal/sam3u1c/inc/core_cm3.h **** 
 553:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 554:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 555:.././hal/sam3u1c/inc/core_cm3.h **** 
 556:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 557:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 558:.././hal/sam3u1c/inc/core_cm3.h **** 
 559:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 560:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 561:.././hal/sam3u1c/inc/core_cm3.h **** 
 562:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 563:.././hal/sam3u1c/inc/core_cm3.h **** 
 564:.././hal/sam3u1c/inc/core_cm3.h **** 
 565:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 566:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 567:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 568:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 569:.././hal/sam3u1c/inc/core_cm3.h ****  */
 570:.././hal/sam3u1c/inc/core_cm3.h **** 
 571:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 572:.././hal/sam3u1c/inc/core_cm3.h ****  */
 573:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 574:.././hal/sam3u1c/inc/core_cm3.h **** {
 575:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 576:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 577:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 578:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 579:.././hal/sam3u1c/inc/core_cm3.h **** } SysTick_Type;
 580:.././hal/sam3u1c/inc/core_cm3.h **** 
 581:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 582:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 583:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 584:.././hal/sam3u1c/inc/core_cm3.h **** 
 585:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 586:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 587:.././hal/sam3u1c/inc/core_cm3.h **** 
 588:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 589:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 590:.././hal/sam3u1c/inc/core_cm3.h **** 
 591:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 592:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 593:.././hal/sam3u1c/inc/core_cm3.h **** 
 594:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Reload Register Definitions */
 595:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 596:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 597:.././hal/sam3u1c/inc/core_cm3.h **** 
 598:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Current Register Definitions */
 599:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 600:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 601:.././hal/sam3u1c/inc/core_cm3.h **** 
 602:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Calibration Register Definitions */
 603:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 604:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 605:.././hal/sam3u1c/inc/core_cm3.h **** 
 606:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 607:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 608:.././hal/sam3u1c/inc/core_cm3.h **** 
 609:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 610:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 611:.././hal/sam3u1c/inc/core_cm3.h **** 
 612:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 613:.././hal/sam3u1c/inc/core_cm3.h **** 
 614:.././hal/sam3u1c/inc/core_cm3.h **** 
 615:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 616:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 617:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 618:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 619:.././hal/sam3u1c/inc/core_cm3.h ****  */
 620:.././hal/sam3u1c/inc/core_cm3.h **** 
 621:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 622:.././hal/sam3u1c/inc/core_cm3.h ****  */
 623:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 624:.././hal/sam3u1c/inc/core_cm3.h **** {
 625:.././hal/sam3u1c/inc/core_cm3.h ****   __O  union
 626:.././hal/sam3u1c/inc/core_cm3.h ****   {
 627:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 628:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 629:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 630:.././hal/sam3u1c/inc/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 631:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[864];
 632:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 633:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[15];
 634:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 635:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[15];
 636:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 637:.././hal/sam3u1c/inc/core_cm3.h **** } ITM_Type;
 638:.././hal/sam3u1c/inc/core_cm3.h **** 
 639:.././hal/sam3u1c/inc/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 640:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                          /*!< ITM TPR
 641:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)             /*!< ITM TPR
 642:.././hal/sam3u1c/inc/core_cm3.h **** 
 643:.././hal/sam3u1c/inc/core_cm3.h **** /* ITM Trace Control Register Definitions */
 644:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                          /*!< ITM TCR
 645:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                   /*!< ITM TCR
 646:.././hal/sam3u1c/inc/core_cm3.h **** 
 647:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                          /*!< ITM TCR
 648:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)          /*!< ITM TCR
 649:.././hal/sam3u1c/inc/core_cm3.h **** 
 650:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                          /*!< ITM TCR
 651:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                /*!< ITM TCR
 652:.././hal/sam3u1c/inc/core_cm3.h **** 
 653:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                          /*!< ITM TCR
 654:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)             /*!< ITM TCR
 655:.././hal/sam3u1c/inc/core_cm3.h **** 
 656:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                          /*!< ITM TCR
 657:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                 /*!< ITM TCR
 658:.././hal/sam3u1c/inc/core_cm3.h **** 
 659:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TXENA_Pos                   3                                          /*!< ITM TCR
 660:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TXENA_Msk                  (1UL << ITM_TCR_TXENA_Pos)                  /*!< ITM TCR
 661:.././hal/sam3u1c/inc/core_cm3.h **** 
 662:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                          /*!< ITM TCR
 663:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                /*!< ITM TCR
 664:.././hal/sam3u1c/inc/core_cm3.h **** 
 665:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                          /*!< ITM TCR
 666:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                  /*!< ITM TCR
 667:.././hal/sam3u1c/inc/core_cm3.h **** 
 668:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                          /*!< ITM TCR
 669:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                 /*!< ITM TCR
 670:.././hal/sam3u1c/inc/core_cm3.h **** 
 671:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 672:.././hal/sam3u1c/inc/core_cm3.h **** 
 673:.././hal/sam3u1c/inc/core_cm3.h **** 
 674:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 675:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 676:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 677:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 678:.././hal/sam3u1c/inc/core_cm3.h ****  */
 679:.././hal/sam3u1c/inc/core_cm3.h **** 
 680:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 681:.././hal/sam3u1c/inc/core_cm3.h ****  */
 682:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 683:.././hal/sam3u1c/inc/core_cm3.h **** {
 684:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 685:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 686:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 687:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 688:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 689:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 690:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 691:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 692:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 693:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 694:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 695:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[1];
 696:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 697:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 698:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 699:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[1];
 700:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 701:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 702:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 703:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[1];
 704:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 705:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 706:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 707:.././hal/sam3u1c/inc/core_cm3.h **** } DWT_Type;
 708:.././hal/sam3u1c/inc/core_cm3.h **** 
 709:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Control Register Definitions */
 710:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 711:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 712:.././hal/sam3u1c/inc/core_cm3.h **** 
 713:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 714:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 715:.././hal/sam3u1c/inc/core_cm3.h **** 
 716:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 717:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 718:.././hal/sam3u1c/inc/core_cm3.h **** 
 719:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 720:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 721:.././hal/sam3u1c/inc/core_cm3.h **** 
 722:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 723:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 724:.././hal/sam3u1c/inc/core_cm3.h **** 
 725:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 726:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 727:.././hal/sam3u1c/inc/core_cm3.h **** 
 728:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 729:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 730:.././hal/sam3u1c/inc/core_cm3.h **** 
 731:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 732:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 733:.././hal/sam3u1c/inc/core_cm3.h **** 
 734:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 735:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 736:.././hal/sam3u1c/inc/core_cm3.h **** 
 737:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 738:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 739:.././hal/sam3u1c/inc/core_cm3.h **** 
 740:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 741:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 742:.././hal/sam3u1c/inc/core_cm3.h **** 
 743:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 744:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 745:.././hal/sam3u1c/inc/core_cm3.h **** 
 746:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 747:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 748:.././hal/sam3u1c/inc/core_cm3.h **** 
 749:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 750:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 751:.././hal/sam3u1c/inc/core_cm3.h **** 
 752:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 753:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 754:.././hal/sam3u1c/inc/core_cm3.h **** 
 755:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 756:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 757:.././hal/sam3u1c/inc/core_cm3.h **** 
 758:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 759:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 760:.././hal/sam3u1c/inc/core_cm3.h **** 
 761:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 762:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 763:.././hal/sam3u1c/inc/core_cm3.h **** 
 764:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT CPI Count Register Definitions */
 765:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 766:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 767:.././hal/sam3u1c/inc/core_cm3.h **** 
 768:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 769:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 770:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 771:.././hal/sam3u1c/inc/core_cm3.h **** 
 772:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 773:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 774:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 775:.././hal/sam3u1c/inc/core_cm3.h **** 
 776:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT LSU Count Register Definitions */
 777:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 778:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 779:.././hal/sam3u1c/inc/core_cm3.h **** 
 780:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 781:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 782:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 783:.././hal/sam3u1c/inc/core_cm3.h **** 
 784:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 785:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 786:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 787:.././hal/sam3u1c/inc/core_cm3.h **** 
 788:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 789:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 790:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 791:.././hal/sam3u1c/inc/core_cm3.h **** 
 792:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 793:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 794:.././hal/sam3u1c/inc/core_cm3.h **** 
 795:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 796:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 797:.././hal/sam3u1c/inc/core_cm3.h **** 
 798:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 799:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 800:.././hal/sam3u1c/inc/core_cm3.h **** 
 801:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 802:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 803:.././hal/sam3u1c/inc/core_cm3.h **** 
 804:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 805:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 806:.././hal/sam3u1c/inc/core_cm3.h **** 
 807:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 808:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 809:.././hal/sam3u1c/inc/core_cm3.h **** 
 810:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 811:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 812:.././hal/sam3u1c/inc/core_cm3.h **** 
 813:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 814:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 815:.././hal/sam3u1c/inc/core_cm3.h **** 
 816:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 817:.././hal/sam3u1c/inc/core_cm3.h **** 
 818:.././hal/sam3u1c/inc/core_cm3.h **** 
 819:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 820:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 821:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 822:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 823:.././hal/sam3u1c/inc/core_cm3.h ****  */
 824:.././hal/sam3u1c/inc/core_cm3.h **** 
 825:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 826:.././hal/sam3u1c/inc/core_cm3.h ****  */
 827:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 828:.././hal/sam3u1c/inc/core_cm3.h **** {
 829:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 830:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 831:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[2];
 832:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 833:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[55];
 834:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 835:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[131];
 836:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 837:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 838:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 839:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED3[759];
 840:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 841:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 842:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 843:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED4[1];
 844:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 845:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 846:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 847:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED5[39];
 848:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 849:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 850:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED7[8];
 851:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 852:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 853:.././hal/sam3u1c/inc/core_cm3.h **** } TPI_Type;
 854:.././hal/sam3u1c/inc/core_cm3.h **** 
 855:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 856:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 857:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 858:.././hal/sam3u1c/inc/core_cm3.h **** 
 859:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 860:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 861:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 862:.././hal/sam3u1c/inc/core_cm3.h **** 
 863:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 864:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 865:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 866:.././hal/sam3u1c/inc/core_cm3.h **** 
 867:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 868:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 869:.././hal/sam3u1c/inc/core_cm3.h **** 
 870:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 871:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 872:.././hal/sam3u1c/inc/core_cm3.h **** 
 873:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 874:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 875:.././hal/sam3u1c/inc/core_cm3.h **** 
 876:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 877:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 878:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 879:.././hal/sam3u1c/inc/core_cm3.h **** 
 880:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 881:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 882:.././hal/sam3u1c/inc/core_cm3.h **** 
 883:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 884:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 885:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 886:.././hal/sam3u1c/inc/core_cm3.h **** 
 887:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 888:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 889:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 890:.././hal/sam3u1c/inc/core_cm3.h **** 
 891:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 892:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 893:.././hal/sam3u1c/inc/core_cm3.h **** 
 894:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 895:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 896:.././hal/sam3u1c/inc/core_cm3.h **** 
 897:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 898:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 899:.././hal/sam3u1c/inc/core_cm3.h **** 
 900:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 901:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 902:.././hal/sam3u1c/inc/core_cm3.h **** 
 903:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 904:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 905:.././hal/sam3u1c/inc/core_cm3.h **** 
 906:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 907:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 908:.././hal/sam3u1c/inc/core_cm3.h **** 
 909:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 910:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 911:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 912:.././hal/sam3u1c/inc/core_cm3.h **** 
 913:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 914:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 915:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 916:.././hal/sam3u1c/inc/core_cm3.h **** 
 917:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 918:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 919:.././hal/sam3u1c/inc/core_cm3.h **** 
 920:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 921:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 922:.././hal/sam3u1c/inc/core_cm3.h **** 
 923:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 924:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 925:.././hal/sam3u1c/inc/core_cm3.h **** 
 926:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 927:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 928:.././hal/sam3u1c/inc/core_cm3.h **** 
 929:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 930:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 931:.././hal/sam3u1c/inc/core_cm3.h **** 
 932:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 933:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 934:.././hal/sam3u1c/inc/core_cm3.h **** 
 935:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 936:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 937:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 938:.././hal/sam3u1c/inc/core_cm3.h **** 
 939:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 940:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
 941:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
 942:.././hal/sam3u1c/inc/core_cm3.h **** 
 943:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI DEVID Register Definitions */
 944:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
 945:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
 946:.././hal/sam3u1c/inc/core_cm3.h **** 
 947:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
 948:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
 949:.././hal/sam3u1c/inc/core_cm3.h **** 
 950:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
 951:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
 952:.././hal/sam3u1c/inc/core_cm3.h **** 
 953:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
 954:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
 955:.././hal/sam3u1c/inc/core_cm3.h **** 
 956:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
 957:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
 958:.././hal/sam3u1c/inc/core_cm3.h **** 
 959:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
 960:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
 961:.././hal/sam3u1c/inc/core_cm3.h **** 
 962:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
 963:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
 964:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
 965:.././hal/sam3u1c/inc/core_cm3.h **** 
 966:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
 967:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
 968:.././hal/sam3u1c/inc/core_cm3.h **** 
 969:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
 970:.././hal/sam3u1c/inc/core_cm3.h **** 
 971:.././hal/sam3u1c/inc/core_cm3.h **** 
 972:.././hal/sam3u1c/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
 973:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 974:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 975:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
 976:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 977:.././hal/sam3u1c/inc/core_cm3.h ****  */
 978:.././hal/sam3u1c/inc/core_cm3.h **** 
 979:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 980:.././hal/sam3u1c/inc/core_cm3.h ****  */
 981:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 982:.././hal/sam3u1c/inc/core_cm3.h **** {
 983:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 984:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 985:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 986:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 987:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 988:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 989:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 990:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 991:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 992:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 993:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 994:.././hal/sam3u1c/inc/core_cm3.h **** } MPU_Type;
 995:.././hal/sam3u1c/inc/core_cm3.h **** 
 996:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Type Register */
 997:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 998:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 999:.././hal/sam3u1c/inc/core_cm3.h **** 
1000:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1001:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1002:.././hal/sam3u1c/inc/core_cm3.h **** 
1003:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1004:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1005:.././hal/sam3u1c/inc/core_cm3.h **** 
1006:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Control Register */
1007:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1008:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1009:.././hal/sam3u1c/inc/core_cm3.h **** 
1010:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1011:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1012:.././hal/sam3u1c/inc/core_cm3.h **** 
1013:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1014:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1015:.././hal/sam3u1c/inc/core_cm3.h **** 
1016:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Number Register */
1017:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1018:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1019:.././hal/sam3u1c/inc/core_cm3.h **** 
1020:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Base Address Register */
1021:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1022:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1023:.././hal/sam3u1c/inc/core_cm3.h **** 
1024:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1025:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1026:.././hal/sam3u1c/inc/core_cm3.h **** 
1027:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1028:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1029:.././hal/sam3u1c/inc/core_cm3.h **** 
1030:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Attribute and Size Register */
1031:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1032:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1033:.././hal/sam3u1c/inc/core_cm3.h **** 
1034:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1035:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1036:.././hal/sam3u1c/inc/core_cm3.h **** 
1037:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1038:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1039:.././hal/sam3u1c/inc/core_cm3.h **** 
1040:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1041:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1042:.././hal/sam3u1c/inc/core_cm3.h **** 
1043:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_MPU */
1044:.././hal/sam3u1c/inc/core_cm3.h **** #endif
1045:.././hal/sam3u1c/inc/core_cm3.h **** 
1046:.././hal/sam3u1c/inc/core_cm3.h **** 
1047:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
1048:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1049:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1050:.././hal/sam3u1c/inc/core_cm3.h ****   @{
1051:.././hal/sam3u1c/inc/core_cm3.h ****  */
1052:.././hal/sam3u1c/inc/core_cm3.h **** 
1053:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1054:.././hal/sam3u1c/inc/core_cm3.h ****  */
1055:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
1056:.././hal/sam3u1c/inc/core_cm3.h **** {
1057:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1058:.././hal/sam3u1c/inc/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1059:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1060:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1061:.././hal/sam3u1c/inc/core_cm3.h **** } CoreDebug_Type;
1062:.././hal/sam3u1c/inc/core_cm3.h **** 
1063:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Halting Control and Status Register */
1064:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1065:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1066:.././hal/sam3u1c/inc/core_cm3.h **** 
1067:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1068:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1069:.././hal/sam3u1c/inc/core_cm3.h **** 
1070:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1071:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1072:.././hal/sam3u1c/inc/core_cm3.h **** 
1073:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1074:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1075:.././hal/sam3u1c/inc/core_cm3.h **** 
1076:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1077:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1078:.././hal/sam3u1c/inc/core_cm3.h **** 
1079:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1080:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1081:.././hal/sam3u1c/inc/core_cm3.h **** 
1082:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1083:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1084:.././hal/sam3u1c/inc/core_cm3.h **** 
1085:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1086:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1087:.././hal/sam3u1c/inc/core_cm3.h **** 
1088:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1089:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1090:.././hal/sam3u1c/inc/core_cm3.h **** 
1091:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1092:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1093:.././hal/sam3u1c/inc/core_cm3.h **** 
1094:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1095:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1096:.././hal/sam3u1c/inc/core_cm3.h **** 
1097:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1098:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1099:.././hal/sam3u1c/inc/core_cm3.h **** 
1100:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Core Register Selector Register */
1101:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1102:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1103:.././hal/sam3u1c/inc/core_cm3.h **** 
1104:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1105:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1106:.././hal/sam3u1c/inc/core_cm3.h **** 
1107:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1108:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1109:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1110:.././hal/sam3u1c/inc/core_cm3.h **** 
1111:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1112:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1113:.././hal/sam3u1c/inc/core_cm3.h **** 
1114:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1115:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1116:.././hal/sam3u1c/inc/core_cm3.h **** 
1117:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1118:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1119:.././hal/sam3u1c/inc/core_cm3.h **** 
1120:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1121:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1122:.././hal/sam3u1c/inc/core_cm3.h **** 
1123:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1124:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1125:.././hal/sam3u1c/inc/core_cm3.h **** 
1126:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1127:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1128:.././hal/sam3u1c/inc/core_cm3.h **** 
1129:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1130:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1131:.././hal/sam3u1c/inc/core_cm3.h **** 
1132:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1133:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1134:.././hal/sam3u1c/inc/core_cm3.h **** 
1135:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1136:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1137:.././hal/sam3u1c/inc/core_cm3.h **** 
1138:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1139:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1140:.././hal/sam3u1c/inc/core_cm3.h **** 
1141:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1142:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1143:.././hal/sam3u1c/inc/core_cm3.h **** 
1144:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1145:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1146:.././hal/sam3u1c/inc/core_cm3.h **** 
1147:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1148:.././hal/sam3u1c/inc/core_cm3.h **** 
1149:.././hal/sam3u1c/inc/core_cm3.h **** 
1150:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
1151:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1152:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1153:.././hal/sam3u1c/inc/core_cm3.h ****   @{
1154:.././hal/sam3u1c/inc/core_cm3.h ****  */
1155:.././hal/sam3u1c/inc/core_cm3.h **** 
1156:.././hal/sam3u1c/inc/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1157:.././hal/sam3u1c/inc/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1158:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1159:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1160:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1161:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1162:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1163:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1164:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1165:.././hal/sam3u1c/inc/core_cm3.h **** 
1166:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1167:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1168:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1169:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1170:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1171:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1172:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1173:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1174:.././hal/sam3u1c/inc/core_cm3.h **** 
1175:.././hal/sam3u1c/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
1176:.././hal/sam3u1c/inc/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1177:.././hal/sam3u1c/inc/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1178:.././hal/sam3u1c/inc/core_cm3.h **** #endif
1179:.././hal/sam3u1c/inc/core_cm3.h **** 
1180:.././hal/sam3u1c/inc/core_cm3.h **** /*@} */
1181:.././hal/sam3u1c/inc/core_cm3.h **** 
1182:.././hal/sam3u1c/inc/core_cm3.h **** 
1183:.././hal/sam3u1c/inc/core_cm3.h **** 
1184:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
1185:.././hal/sam3u1c/inc/core_cm3.h ****  *                Hardware Abstraction Layer
1186:.././hal/sam3u1c/inc/core_cm3.h ****   Core Function Interface contains:
1187:.././hal/sam3u1c/inc/core_cm3.h ****   - Core NVIC Functions
1188:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SysTick Functions
1189:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Debug Functions
1190:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Register Access Functions
1191:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
1192:.././hal/sam3u1c/inc/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1193:.././hal/sam3u1c/inc/core_cm3.h **** */
1194:.././hal/sam3u1c/inc/core_cm3.h **** 
1195:.././hal/sam3u1c/inc/core_cm3.h **** 
1196:.././hal/sam3u1c/inc/core_cm3.h **** 
1197:.././hal/sam3u1c/inc/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1198:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1199:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1200:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1201:.././hal/sam3u1c/inc/core_cm3.h ****     @{
1202:.././hal/sam3u1c/inc/core_cm3.h ****  */
1203:.././hal/sam3u1c/inc/core_cm3.h **** 
1204:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Priority Grouping
1205:.././hal/sam3u1c/inc/core_cm3.h **** 
1206:.././hal/sam3u1c/inc/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1207:.././hal/sam3u1c/inc/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1208:.././hal/sam3u1c/inc/core_cm3.h ****   Only values from 0..7 are used.
1209:.././hal/sam3u1c/inc/core_cm3.h ****   In case of a conflict between priority grouping and available
1210:.././hal/sam3u1c/inc/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1211:.././hal/sam3u1c/inc/core_cm3.h **** 
1212:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1213:.././hal/sam3u1c/inc/core_cm3.h ****  */
1214:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1215:.././hal/sam3u1c/inc/core_cm3.h **** {
1216:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t reg_value;
1217:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1218:.././hal/sam3u1c/inc/core_cm3.h **** 
1219:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1220:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1221:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value  =  (reg_value                                 |
1222:.././hal/sam3u1c/inc/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1223:.././hal/sam3u1c/inc/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1224:.././hal/sam3u1c/inc/core_cm3.h ****   SCB->AIRCR =  reg_value;
1225:.././hal/sam3u1c/inc/core_cm3.h **** }
1226:.././hal/sam3u1c/inc/core_cm3.h **** 
1227:.././hal/sam3u1c/inc/core_cm3.h **** 
1228:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Priority Grouping
1229:.././hal/sam3u1c/inc/core_cm3.h **** 
1230:.././hal/sam3u1c/inc/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1231:.././hal/sam3u1c/inc/core_cm3.h **** 
1232:.././hal/sam3u1c/inc/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1233:.././hal/sam3u1c/inc/core_cm3.h ****  */
1234:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1235:.././hal/sam3u1c/inc/core_cm3.h **** {
1236:.././hal/sam3u1c/inc/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1237:.././hal/sam3u1c/inc/core_cm3.h **** }
1238:.././hal/sam3u1c/inc/core_cm3.h **** 
1239:.././hal/sam3u1c/inc/core_cm3.h **** 
1240:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Enable External Interrupt
1241:.././hal/sam3u1c/inc/core_cm3.h **** 
1242:.././hal/sam3u1c/inc/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1243:.././hal/sam3u1c/inc/core_cm3.h **** 
1244:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1245:.././hal/sam3u1c/inc/core_cm3.h ****  */
1246:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1247:.././hal/sam3u1c/inc/core_cm3.h **** {
  26              	 .loc 1 1247 1
  27              	 .cfi_startproc
  28              	 
  29              	 
  30              	 
  31 0000 80B4     	 push {r7}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 4
  34              	 .cfi_offset 7,-4
  35 0002 83B0     	 sub sp,sp,#12
  36              	.LCFI1:
  37              	 .cfi_def_cfa_offset 16
  38 0004 00AF     	 add r7,sp,#0
  39              	.LCFI2:
  40              	 .cfi_def_cfa_register 7
  41 0006 0346     	 mov r3,r0
  42 0008 FB71     	 strb r3,[r7,#7]
1248:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  43              	 .loc 1 1248 65
  44 000a FB79     	 ldrb r3,[r7,#7]
  45 000c 03F01F03 	 and r3,r3,#31
  46              	 .loc 1 1248 44
  47 0010 0122     	 movs r2,#1
  48 0012 02FA03F1 	 lsl r1,r2,r3
  49              	 .loc 1 1248 7
  50 0016 054A     	 ldr r2,.L2
  51              	 .loc 1 1248 15
  52 0018 97F90730 	 ldrsb r3,[r7,#7]
  53              	 .loc 1 1248 32
  54 001c 5B09     	 lsrs r3,r3,#5
  55              	 .loc 1 1248 39
  56 001e 42F82310 	 str r1,[r2,r3,lsl#2]
1249:.././hal/sam3u1c/inc/core_cm3.h **** }
  57              	 .loc 1 1249 1
  58 0022 00BF     	 nop
  59 0024 0C37     	 adds r7,r7,#12
  60              	.LCFI3:
  61              	 .cfi_def_cfa_offset 4
  62 0026 BD46     	 mov sp,r7
  63              	.LCFI4:
  64              	 .cfi_def_cfa_register 13
  65              	 
  66 0028 80BC     	 pop {r7}
  67              	.LCFI5:
  68              	 .cfi_restore 7
  69              	 .cfi_def_cfa_offset 0
  70 002a 7047     	 bx lr
  71              	.L3:
  72              	 .align 2
  73              	.L2:
  74 002c 00E100E0 	 .word -536813312
  75              	 .cfi_endproc
  76              	.LFE41:
  78              	 .section .text.NVIC_SetPriority,"ax",%progbits
  79              	 .align 1
  80              	 .syntax unified
  81              	 .thumb
  82              	 .thumb_func
  83              	 .fpu softvfp
  85              	NVIC_SetPriority:
  86              	.LFB47:
1250:.././hal/sam3u1c/inc/core_cm3.h **** 
1251:.././hal/sam3u1c/inc/core_cm3.h **** 
1252:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Disable External Interrupt
1253:.././hal/sam3u1c/inc/core_cm3.h **** 
1254:.././hal/sam3u1c/inc/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1255:.././hal/sam3u1c/inc/core_cm3.h **** 
1256:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1257:.././hal/sam3u1c/inc/core_cm3.h ****  */
1258:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1259:.././hal/sam3u1c/inc/core_cm3.h **** {
1260:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1261:.././hal/sam3u1c/inc/core_cm3.h **** }
1262:.././hal/sam3u1c/inc/core_cm3.h **** 
1263:.././hal/sam3u1c/inc/core_cm3.h **** 
1264:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Pending Interrupt
1265:.././hal/sam3u1c/inc/core_cm3.h **** 
1266:.././hal/sam3u1c/inc/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1267:.././hal/sam3u1c/inc/core_cm3.h ****     for the specified interrupt.
1268:.././hal/sam3u1c/inc/core_cm3.h **** 
1269:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1270:.././hal/sam3u1c/inc/core_cm3.h ****     
1271:.././hal/sam3u1c/inc/core_cm3.h ****     \return             0  Interrupt status is not pending.
1272:.././hal/sam3u1c/inc/core_cm3.h ****     \return             1  Interrupt status is pending.
1273:.././hal/sam3u1c/inc/core_cm3.h ****  */
1274:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1275:.././hal/sam3u1c/inc/core_cm3.h **** {
1276:.././hal/sam3u1c/inc/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1277:.././hal/sam3u1c/inc/core_cm3.h **** }
1278:.././hal/sam3u1c/inc/core_cm3.h **** 
1279:.././hal/sam3u1c/inc/core_cm3.h **** 
1280:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Pending Interrupt
1281:.././hal/sam3u1c/inc/core_cm3.h **** 
1282:.././hal/sam3u1c/inc/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1283:.././hal/sam3u1c/inc/core_cm3.h **** 
1284:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1285:.././hal/sam3u1c/inc/core_cm3.h ****  */
1286:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1287:.././hal/sam3u1c/inc/core_cm3.h **** {
1288:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1289:.././hal/sam3u1c/inc/core_cm3.h **** }
1290:.././hal/sam3u1c/inc/core_cm3.h **** 
1291:.././hal/sam3u1c/inc/core_cm3.h **** 
1292:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Clear Pending Interrupt
1293:.././hal/sam3u1c/inc/core_cm3.h **** 
1294:.././hal/sam3u1c/inc/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1295:.././hal/sam3u1c/inc/core_cm3.h **** 
1296:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1297:.././hal/sam3u1c/inc/core_cm3.h ****  */
1298:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1299:.././hal/sam3u1c/inc/core_cm3.h **** {
1300:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1301:.././hal/sam3u1c/inc/core_cm3.h **** }
1302:.././hal/sam3u1c/inc/core_cm3.h **** 
1303:.././hal/sam3u1c/inc/core_cm3.h **** 
1304:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Active Interrupt
1305:.././hal/sam3u1c/inc/core_cm3.h **** 
1306:.././hal/sam3u1c/inc/core_cm3.h ****     The function reads the active register in NVIC and returns the active bit.
1307:.././hal/sam3u1c/inc/core_cm3.h ****     
1308:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1309:.././hal/sam3u1c/inc/core_cm3.h ****     
1310:.././hal/sam3u1c/inc/core_cm3.h ****     \return             0  Interrupt status is not active.
1311:.././hal/sam3u1c/inc/core_cm3.h ****     \return             1  Interrupt status is active.
1312:.././hal/sam3u1c/inc/core_cm3.h ****  */
1313:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1314:.././hal/sam3u1c/inc/core_cm3.h **** {
1315:.././hal/sam3u1c/inc/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1316:.././hal/sam3u1c/inc/core_cm3.h **** }
1317:.././hal/sam3u1c/inc/core_cm3.h **** 
1318:.././hal/sam3u1c/inc/core_cm3.h **** 
1319:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Interrupt Priority
1320:.././hal/sam3u1c/inc/core_cm3.h **** 
1321:.././hal/sam3u1c/inc/core_cm3.h ****     The function sets the priority of an interrupt. 
1322:.././hal/sam3u1c/inc/core_cm3.h **** 
1323:.././hal/sam3u1c/inc/core_cm3.h ****     \note The priority cannot be set for every core interrupt.
1324:.././hal/sam3u1c/inc/core_cm3.h **** 
1325:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number. 
1326:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]  priority  Priority to set.
1327:.././hal/sam3u1c/inc/core_cm3.h ****  */
1328:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1329:.././hal/sam3u1c/inc/core_cm3.h **** {
  87              	 .loc 1 1329 1
  88              	 .cfi_startproc
  89              	 
  90              	 
  91              	 
  92 0000 80B4     	 push {r7}
  93              	.LCFI6:
  94              	 .cfi_def_cfa_offset 4
  95              	 .cfi_offset 7,-4
  96 0002 83B0     	 sub sp,sp,#12
  97              	.LCFI7:
  98              	 .cfi_def_cfa_offset 16
  99 0004 00AF     	 add r7,sp,#0
 100              	.LCFI8:
 101              	 .cfi_def_cfa_register 7
 102 0006 0346     	 mov r3,r0
 103 0008 3960     	 str r1,[r7]
 104 000a FB71     	 strb r3,[r7,#7]
1330:.././hal/sam3u1c/inc/core_cm3.h ****   if(IRQn < 0) {
 105              	 .loc 1 1330 5
 106 000c 97F90730 	 ldrsb r3,[r7,#7]
 107 0010 002B     	 cmp r3,#0
 108 0012 0BDA     	 bge .L5
1331:.././hal/sam3u1c/inc/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 109              	 .loc 1 1331 55
 110 0014 3B68     	 ldr r3,[r7]
 111 0016 DAB2     	 uxtb r2,r3
 112              	 .loc 1 1331 8
 113 0018 0C49     	 ldr r1,.L8
 114              	 .loc 1 1331 32
 115 001a FB79     	 ldrb r3,[r7,#7]
 116 001c 03F00F03 	 and r3,r3,#15
 117              	 .loc 1 1331 38
 118 0020 043B     	 subs r3,r3,#4
 119              	 .loc 1 1331 55
 120 0022 1201     	 lsls r2,r2,#4
 121 0024 D2B2     	 uxtb r2,r2
 122              	 .loc 1 1331 42
 123 0026 0B44     	 add r3,r3,r1
 124 0028 1A76     	 strb r2,[r3,#24]
1332:.././hal/sam3u1c/inc/core_cm3.h ****   else {
1333:.././hal/sam3u1c/inc/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1334:.././hal/sam3u1c/inc/core_cm3.h **** }
 125              	 .loc 1 1334 1
 126 002a 09E0     	 b .L7
 127              	.L5:
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 128              	 .loc 1 1333 45
 129 002c 3B68     	 ldr r3,[r7]
 130 002e DAB2     	 uxtb r2,r3
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 131              	 .loc 1 1333 9
 132 0030 0749     	 ldr r1,.L8+4
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 133              	 .loc 1 1333 14
 134 0032 97F90730 	 ldrsb r3,[r7,#7]
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 135              	 .loc 1 1333 45
 136 0036 1201     	 lsls r2,r2,#4
 137 0038 D2B2     	 uxtb r2,r2
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 138              	 .loc 1 1333 32
 139 003a 0B44     	 add r3,r3,r1
 140 003c 83F80023 	 strb r2,[r3,#768]
 141              	.L7:
 142              	 .loc 1 1334 1
 143 0040 00BF     	 nop
 144 0042 0C37     	 adds r7,r7,#12
 145              	.LCFI9:
 146              	 .cfi_def_cfa_offset 4
 147 0044 BD46     	 mov sp,r7
 148              	.LCFI10:
 149              	 .cfi_def_cfa_register 13
 150              	 
 151 0046 80BC     	 pop {r7}
 152              	.LCFI11:
 153              	 .cfi_restore 7
 154              	 .cfi_def_cfa_offset 0
 155 0048 7047     	 bx lr
 156              	.L9:
 157 004a 00BF     	 .align 2
 158              	.L8:
 159 004c 00ED00E0 	 .word -536810240
 160 0050 00E100E0 	 .word -536813312
 161              	 .cfi_endproc
 162              	.LFE47:
 164              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
 165              	 .align 2
 168              	cpu_irq_critical_section_counter:
 169 0000 00000000 	 .space 4
 170              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
 173              	cpu_irq_prev_interrupt_state:
 174 0000 00       	 .space 1
 175              	 .section .text.cpu_irq_save,"ax",%progbits
 176              	 .align 1
 177              	 .syntax unified
 178              	 .thumb
 179              	 .thumb_func
 180              	 .fpu softvfp
 182              	cpu_irq_save:
 183              	.LFB59:
 184              	 .file 2 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
   1:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
   2:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \file
   3:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
   4:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \brief Global interrupt management for SAM D20, SAM3 and SAM4 (NVIC based)
   5:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
   6:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * Copyright (c) 2012-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
   8:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  10:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \page License
  11:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  12:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  15:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  18:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  22:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  25:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  28:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  40:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  42:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  43:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  44:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #ifndef UTILS_INTERRUPT_INTERRUPT_H
  45:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #define UTILS_INTERRUPT_INTERRUPT_H
  46:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  47:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #include <compiler.h>
  48:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #include <parts.h>
  49:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  50:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #ifdef __cplusplus
  51:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** extern "C" {
  52:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #endif
  53:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  54:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
  55:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \weakgroup interrupt_group
  56:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  57:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * @{
  58:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  59:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  60:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
  61:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \name Interrupt Service Routine definition
  62:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  63:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * @{
  64:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  65:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  66:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
  67:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \brief Define service routine
  68:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  69:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \note For NVIC devices the interrupt service routines are predefined to
  70:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *       add to vector table in binary generation, so there is no service
  71:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *       register at run time. The routine collections are in exceptions.h.
  72:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  73:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * Usage:
  74:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \code
  75:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	ISR(foo_irq_handler)
  76:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	{
  77:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	     // Function definition
  78:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	     ...
  79:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	}
  80:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** \endcode
  81:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  82:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \param func Name for the function.
  83:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  84:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define ISR(func)   \
  85:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	void func (void)
  86:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
  87:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
  88:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \brief Initialize interrupt vectors
  89:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  90:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
  91:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * to do to initialize them, except defined the vector function with
  92:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * right name.
  93:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
  94:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * This must be called prior to \ref irq_register_handler.
  95:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
  96:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define irq_initialize_vectors()   \
  97:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	do {                             \
  98:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	} while(0)
  99:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 100:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** /**
 101:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \brief Register handler for interrupt
 102:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
 103:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * For NVIC the interrupt vectors are put in vector table. So nothing
 104:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * to do to register them, except defined the vector function with
 105:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * right name.
 106:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
 107:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * Usage:
 108:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \code
 109:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	irq_initialize_vectors();
 110:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	irq_register_handler(foo_irq_handler);
 111:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** \endcode
 112:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *
 113:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \note The function \a func must be defined with the \ref ISR macro.
 114:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  * \note The functions prototypes can be found in the device exception header
 115:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  *       files (exceptions.h).
 116:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h ****  */
 117:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define irq_register_handler(int_num, int_prio)                      \
 118:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	NVIC_ClearPendingIRQ(    (IRQn_Type)int_num);                      \
 119:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	NVIC_SetPriority(    (IRQn_Type)int_num, int_prio);                \
 120:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	NVIC_EnableIRQ(      (IRQn_Type)int_num);                          \
 121:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 122:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** //@}
 123:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 124:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_enable()                     \
 125:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 126:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = true;            \
 127:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 128:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		__enable_irq();                        \
 129:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 130:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #  define cpu_irq_disable()                    \
 131:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	do {                                       \
 132:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		__disable_irq();                       \
 133:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		__DMB();                               \
 134:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		g_interrupt_enabled = false;           \
 135:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	} while (0)
 136:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 137:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** typedef uint32_t irqflags_t;
 138:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 139:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #if !defined(__DOXYGEN__)
 140:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** extern volatile bool g_interrupt_enabled;
 141:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #endif
 142:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 143:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** #define cpu_irq_is_enabled()    (__get_PRIMASK() == 0)
 144:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 145:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static volatile uint32_t cpu_irq_critical_section_counter;
 146:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static volatile bool     cpu_irq_prev_interrupt_state;
 147:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 148:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static inline irqflags_t cpu_irq_save(void)
 149:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** {
 185              	 .loc 2 149 1
 186              	 .cfi_startproc
 187              	 
 188              	 
 189              	 
 190 0000 80B4     	 push {r7}
 191              	.LCFI12:
 192              	 .cfi_def_cfa_offset 4
 193              	 .cfi_offset 7,-4
 194 0002 83B0     	 sub sp,sp,#12
 195              	.LCFI13:
 196              	 .cfi_def_cfa_offset 16
 197 0004 00AF     	 add r7,sp,#0
 198              	.LCFI14:
 199              	 .cfi_def_cfa_register 7
 200              	.LBB16:
 201              	.LBB17:
 202              	 .file 3 ".././hal/sam3u1c/inc/core_cmFunc.h"
   1:.././hal/sam3u1c/inc/core_cmFunc.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @date     19. January 2012
   6:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
   7:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmFunc.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  10:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:.././hal/sam3u1c/inc/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:.././hal/sam3u1c/inc/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  15:.././hal/sam3u1c/inc/core_cmFunc.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmFunc.h ****  *
  22:.././hal/sam3u1c/inc/core_cmFunc.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  24:.././hal/sam3u1c/inc/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  27:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  28:.././hal/sam3u1c/inc/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:.././hal/sam3u1c/inc/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:.././hal/sam3u1c/inc/core_cmFunc.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  33:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  34:.././hal/sam3u1c/inc/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmFunc.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  37:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  41:.././hal/sam3u1c/inc/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:.././hal/sam3u1c/inc/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  44:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Control Register
  45:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  46:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
  47:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  48:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Control Register value
  49:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  50:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_CONTROL(void)
  51:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  52:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regControl);
  54:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  55:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  56:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  57:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Control Register
  58:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  59:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  61:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  63:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_CONTROL(uint32_t control)
  64:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  65:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regControl = control;
  67:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  68:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  69:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  70:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get IPSR Register
  71:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  72:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the IPSR Register.
  73:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  74:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               IPSR Register value
  75:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  76:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_IPSR(void)
  77:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  78:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regIPSR);
  80:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  81:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  82:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  83:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get APSR Register
  84:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  85:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  87:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               APSR Register value
  88:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
  89:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_APSR(void)
  90:.././hal/sam3u1c/inc/core_cmFunc.h **** {
  91:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regAPSR);
  93:.././hal/sam3u1c/inc/core_cmFunc.h **** }
  94:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  95:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  96:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
  97:.././hal/sam3u1c/inc/core_cmFunc.h **** 
  98:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 100:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               xPSR Register value
 101:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 102:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_xPSR(void)
 103:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 104:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regXPSR);
 106:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 107:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 108:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 109:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 111:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 113:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               PSP Register value
 114:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 115:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PSP(void)
 116:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 117:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regProcessStackPointer);
 119:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 120:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 121:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 122:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 124:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 126:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 128:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 129:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 130:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 133:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 134:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 135:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 137:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 139:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               MSP Register value
 140:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 141:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_MSP(void)
 142:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 143:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regMainStackPointer);
 145:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 146:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 147:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 148:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 150:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 152:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 154:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 155:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 156:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 159:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 160:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 161:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Priority Mask
 162:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 163:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 165:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Priority Mask value
 166:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 167:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_PRIMASK(void)
 168:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 169:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regPriMask);
 171:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 172:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 173:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 174:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Priority Mask
 175:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 176:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 178:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 180:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 181:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 182:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regPriMask = (priMask);
 184:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 185:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 186:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 187:.././hal/sam3u1c/inc/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 189:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Enable FIQ
 190:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 191:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:.././hal/sam3u1c/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 194:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 196:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 197:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Disable FIQ
 198:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 199:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:.././hal/sam3u1c/inc/core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 202:.././hal/sam3u1c/inc/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 204:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 205:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Base Priority
 206:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 207:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 209:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Base Priority register value
 210:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 211:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t  __get_BASEPRI(void)
 212:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 213:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regBasePri);
 215:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 216:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 217:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 218:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Base Priority
 219:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 220:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 222:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 224:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
 225:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 226:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 229:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 230:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 231:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Fault Mask
 232:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 233:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 235:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Fault Mask register value
 236:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 237:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 238:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 239:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regFaultMask);
 241:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 242:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 243:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 244:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Fault Mask
 245:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 246:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 248:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 250:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 252:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 255:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 256:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 258:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 259:.././hal/sam3u1c/inc/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 261:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get FPSCR
 262:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 263:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 265:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 267:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE uint32_t __get_FPSCR(void)
 268:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 269:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(__regfpscr);
 272:.././hal/sam3u1c/inc/core_cmFunc.h **** #else
 273:.././hal/sam3u1c/inc/core_cmFunc.h ****    return(0);
 274:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
 275:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 276:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 277:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 278:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set FPSCR
 279:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 280:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 282:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 284:.././hal/sam3u1c/inc/core_cmFunc.h **** __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 285:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 286:.././hal/sam3u1c/inc/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:.././hal/sam3u1c/inc/core_cmFunc.h ****   __regfpscr = (fpscr);
 289:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif
 290:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 291:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 292:.././hal/sam3u1c/inc/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 294:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 295:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:.././hal/sam3u1c/inc/core_cmFunc.h **** /* IAR iccarm specific functions */
 297:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 298:.././hal/sam3u1c/inc/core_cmFunc.h **** #include <cmsis_iar.h>
 299:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 300:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 301:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:.././hal/sam3u1c/inc/core_cmFunc.h **** /* TI CCS specific functions */
 303:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 304:.././hal/sam3u1c/inc/core_cmFunc.h **** #include <cmsis_ccs.h>
 305:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 306:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 307:.././hal/sam3u1c/inc/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:.././hal/sam3u1c/inc/core_cmFunc.h **** /* GNU gcc specific functions */
 309:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 310:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 311:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 312:.././hal/sam3u1c/inc/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 313:.././hal/sam3u1c/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 314:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 315:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
 316:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 317:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 318:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 319:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 320:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 321:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 322:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 323:.././hal/sam3u1c/inc/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 324:.././hal/sam3u1c/inc/core_cmFunc.h ****   Can only be executed in Privileged modes.
 325:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 326:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
 327:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 328:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 329:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 330:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 331:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 332:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Control Register
 333:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 334:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the Control Register.
 335:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 336:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Control Register value
 337:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 338:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
 339:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 340:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 341:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 342:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 343:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 344:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 345:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 346:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 347:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Control Register
 348:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 349:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function writes the given value to the Control Register.
 350:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 351:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 352:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 353:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
 354:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 355:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 356:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 357:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 358:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 359:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get IPSR Register
 360:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 361:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the IPSR Register.
 362:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 363:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               IPSR Register value
 364:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 365:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 366:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 367:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 368:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 369:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 370:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 371:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 372:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 373:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 374:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get APSR Register
 375:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 376:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the APSR Register.
 377:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 378:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               APSR Register value
 379:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 380:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 381:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 382:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 383:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 384:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 385:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 386:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 387:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 388:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 389:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get xPSR Register
 390:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 391:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 392:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 393:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               xPSR Register value
 394:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 395:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 396:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 397:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 398:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 399:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 400:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 401:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 402:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 403:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 404:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 405:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 406:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 407:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 408:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               PSP Register value
 409:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 410:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 411:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 412:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t result;
 413:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 414:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 415:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 416:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 417:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 418:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 419:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 420:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 421:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 422:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 423:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 424:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 425:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 426:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 427:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 428:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 429:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 430:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 431:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 432:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 433:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 434:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 435:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               MSP Register value
 436:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 437:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 438:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 439:.././hal/sam3u1c/inc/core_cmFunc.h ****   register uint32_t result;
 440:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 441:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 442:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 443:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 444:.././hal/sam3u1c/inc/core_cmFunc.h ****  
 445:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 446:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 447:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 448:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 449:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 450:.././hal/sam3u1c/inc/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 451:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 452:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 453:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 454:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 455:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 456:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 457:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 458:.././hal/sam3u1c/inc/core_cmFunc.h **** /** \brief  Get Priority Mask
 459:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 460:.././hal/sam3u1c/inc/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 461:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 462:.././hal/sam3u1c/inc/core_cmFunc.h ****     \return               Priority Mask value
 463:.././hal/sam3u1c/inc/core_cmFunc.h ****  */
 464:.././hal/sam3u1c/inc/core_cmFunc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 465:.././hal/sam3u1c/inc/core_cmFunc.h **** {
 466:.././hal/sam3u1c/inc/core_cmFunc.h ****   uint32_t result;
 467:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 468:.././hal/sam3u1c/inc/core_cmFunc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 203              	 .loc 3 468 3
 204              	 .syntax unified
 205              	
 206 0006 EFF31083 	 MRS r3,primask
 207              	
 208              	 .thumb
 209              	 .syntax unified
 210 000a 3B60     	 str r3,[r7]
 469:.././hal/sam3u1c/inc/core_cmFunc.h ****   return(result);
 211              	 .loc 3 469 9
 212 000c 3B68     	 ldr r3,[r7]
 213              	.LBE17:
 214              	.LBE16:
 150:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	irqflags_t flags = cpu_irq_is_enabled();
 215              	 .loc 2 150 21
 216 000e 002B     	 cmp r3,#0
 217 0010 0CBF     	 ite eq
 218 0012 0123     	 moveq r3,#1
 219 0014 0023     	 movne r3,#0
 220 0016 DBB2     	 uxtb r3,r3
 221              	 .loc 2 150 13
 222 0018 7B60     	 str r3,[r7,#4]
 223              	.LBB18:
 224              	.LBB19:
 328:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 225              	 .loc 3 328 3
 226              	 .syntax unified
 227              	
 228 001a 72B6     	 cpsid i
 229              	
 329:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 230              	 .loc 3 329 1
 231              	 .thumb
 232              	 .syntax unified
 233 001c 00BF     	 nop
 234              	.LBE19:
 235              	.LBE18:
 236              	.LBB20:
 237              	.LBB21:
 238              	 .file 4 ".././hal/sam3u1c/inc/core_cmInstr.h"
   1:.././hal/sam3u1c/inc/core_cmInstr.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @date     07. February 2012
   6:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
   7:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  10:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  15:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  22:.././hal/sam3u1c/inc/core_cmInstr.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  24:.././hal/sam3u1c/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  27:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  28:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:.././hal/sam3u1c/inc/core_cmInstr.h ****   Access to dedicated instructions
  31:.././hal/sam3u1c/inc/core_cmInstr.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmInstr.h **** */
  33:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  34:.././hal/sam3u1c/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  37:.././hal/sam3u1c/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  41:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  42:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
  43:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  44:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  46:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __NOP                             __nop
  47:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  48:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  49:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  51:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
  53:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  54:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFI                             __wfi
  55:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  56:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  57:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
  58:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  59:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  62:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFE                             __wfe
  63:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  64:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  65:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
  66:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  67:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  69:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SEV                             __sev
  70:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  71:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  72:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  74:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  78:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  80:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  81:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  83:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  86:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  88:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  89:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  91:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  94:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  96:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  97:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  99:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 101:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 103:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 104:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __REV                             __rev
 105:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 106:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 107:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 109:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 111:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 113:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 114:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 116:.././hal/sam3u1c/inc/core_cmInstr.h ****   rev16 r0, r0
 117:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 118:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 119:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 120:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 121:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 123:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 125:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 127:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 128:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 130:.././hal/sam3u1c/inc/core_cmInstr.h ****   revsh r0, r0
 131:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 132:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 133:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 134:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 135:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 137:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 139:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Rotated value
 142:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 143:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ROR                             __ror
 144:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 145:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 146:.././hal/sam3u1c/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 148:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 150:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 152:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 154:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 155:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 156:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 157:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 158:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 160:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 162:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 165:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 167:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 168:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 170:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 172:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 175:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 177:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 178:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 180:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 182:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 185:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 187:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 188:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 190:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 192:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 193:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 195:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 196:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 197:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 199:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 200:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 202:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 204:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 205:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 207:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 208:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 209:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 211:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 212:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 214:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 216:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 217:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 219:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 220:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 221:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 223:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 224:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 226:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 228:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 229:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 230:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 231:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 232:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 233:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 234:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates a signed value.
 235:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 236:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 239:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 240:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 241:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 242:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 243:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 245:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 246:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 247:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 250:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 251:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __USAT                            __usat
 252:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 253:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 254:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 255:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 256:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 258:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 260:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 261:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLZ                             __clz
 262:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 263:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 265:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 266:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 267:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:.././hal/sam3u1c/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 270:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_iar.h>
 271:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 272:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 273:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:.././hal/sam3u1c/inc/core_cmInstr.h **** /* TI CCS specific functions */
 275:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 276:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 278:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 279:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:.././hal/sam3u1c/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 281:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 282:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
 283:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 284:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 286:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 288:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 289:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 290:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 291:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 292:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 294:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
 296:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 297:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 299:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 300:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 301:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 302:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 303:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
 304:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 305:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 308:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 310:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfe");
 311:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 312:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 313:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 314:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
 315:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 316:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 318:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 319:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 320:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("sev");
 321:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 322:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 323:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 324:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 325:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 326:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 327:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 328:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
 329:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 330:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 331:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 332:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("isb");
 333:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 334:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 335:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 336:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 337:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 338:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 339:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 340:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 341:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 342:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 343:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("dsb");
 344:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 345:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 346:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 347:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
 348:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 349:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 350:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 351:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 352:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
 353:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 354:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("dmb");
 239              	 .loc 4 354 3
 240              	 .syntax unified
 241              	
 242 001e BFF35F8F 	 dmb
 243              	
 355:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 244              	 .loc 4 355 1
 245              	 .thumb
 246              	 .syntax unified
 247 0022 00BF     	 nop
 248              	.LBE21:
 249              	.LBE20:
 151:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	cpu_irq_disable();
 250              	 .loc 2 151 2
 251 0024 044B     	 ldr r3,.L13
 252 0026 0022     	 movs r2,#0
 253 0028 1A70     	 strb r2,[r3]
 152:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	return flags;
 254              	 .loc 2 152 9
 255 002a 7B68     	 ldr r3,[r7,#4]
 153:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** }
 256              	 .loc 2 153 1
 257 002c 1846     	 mov r0,r3
 258 002e 0C37     	 adds r7,r7,#12
 259              	.LCFI15:
 260              	 .cfi_def_cfa_offset 4
 261 0030 BD46     	 mov sp,r7
 262              	.LCFI16:
 263              	 .cfi_def_cfa_register 13
 264              	 
 265 0032 80BC     	 pop {r7}
 266              	.LCFI17:
 267              	 .cfi_restore 7
 268              	 .cfi_def_cfa_offset 0
 269 0034 7047     	 bx lr
 270              	.L14:
 271 0036 00BF     	 .align 2
 272              	.L13:
 273 0038 00000000 	 .word g_interrupt_enabled
 274              	 .cfi_endproc
 275              	.LFE59:
 277              	 .section .text.cpu_irq_is_enabled_flags,"ax",%progbits
 278              	 .align 1
 279              	 .syntax unified
 280              	 .thumb
 281              	 .thumb_func
 282              	 .fpu softvfp
 284              	cpu_irq_is_enabled_flags:
 285              	.LFB60:
 154:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 155:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
 156:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** {
 286              	 .loc 2 156 1
 287              	 .cfi_startproc
 288              	 
 289              	 
 290              	 
 291 0000 80B4     	 push {r7}
 292              	.LCFI18:
 293              	 .cfi_def_cfa_offset 4
 294              	 .cfi_offset 7,-4
 295 0002 83B0     	 sub sp,sp,#12
 296              	.LCFI19:
 297              	 .cfi_def_cfa_offset 16
 298 0004 00AF     	 add r7,sp,#0
 299              	.LCFI20:
 300              	 .cfi_def_cfa_register 7
 301 0006 7860     	 str r0,[r7,#4]
 157:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	return (flags);
 302              	 .loc 2 157 9
 303 0008 7B68     	 ldr r3,[r7,#4]
 304 000a 002B     	 cmp r3,#0
 305 000c 14BF     	 ite ne
 306 000e 0123     	 movne r3,#1
 307 0010 0023     	 moveq r3,#0
 308 0012 DBB2     	 uxtb r3,r3
 158:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** }
 309              	 .loc 2 158 1
 310 0014 1846     	 mov r0,r3
 311 0016 0C37     	 adds r7,r7,#12
 312              	.LCFI21:
 313              	 .cfi_def_cfa_offset 4
 314 0018 BD46     	 mov sp,r7
 315              	.LCFI22:
 316              	 .cfi_def_cfa_register 13
 317              	 
 318 001a 80BC     	 pop {r7}
 319              	.LCFI23:
 320              	 .cfi_restore 7
 321              	 .cfi_def_cfa_offset 0
 322 001c 7047     	 bx lr
 323              	 .cfi_endproc
 324              	.LFE60:
 326              	 .section .text.cpu_irq_restore,"ax",%progbits
 327              	 .align 1
 328              	 .syntax unified
 329              	 .thumb
 330              	 .thumb_func
 331              	 .fpu softvfp
 333              	cpu_irq_restore:
 334              	.LFB61:
 159:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 
 160:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** static inline void cpu_irq_restore(irqflags_t flags)
 161:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** {
 335              	 .loc 2 161 1
 336              	 .cfi_startproc
 337              	 
 338              	 
 339 0000 80B5     	 push {r7,lr}
 340              	.LCFI24:
 341              	 .cfi_def_cfa_offset 8
 342              	 .cfi_offset 7,-8
 343              	 .cfi_offset 14,-4
 344 0002 82B0     	 sub sp,sp,#8
 345              	.LCFI25:
 346              	 .cfi_def_cfa_offset 16
 347 0004 00AF     	 add r7,sp,#0
 348              	.LCFI26:
 349              	 .cfi_def_cfa_register 7
 350 0006 7860     	 str r0,[r7,#4]
 162:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 	if (cpu_irq_is_enabled_flags(flags))
 351              	 .loc 2 162 6
 352 0008 7868     	 ldr r0,[r7,#4]
 353 000a 084B     	 ldr r3,.L20
 354 000c 9847     	 blx r3
 355              	.LVL0:
 356 000e 0346     	 mov r3,r0
 357              	 .loc 2 162 5
 358 0010 002B     	 cmp r3,#0
 359 0012 07D0     	 beq .L19
 163:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** 		cpu_irq_enable();
 360              	 .loc 2 163 3
 361 0014 064B     	 ldr r3,.L20+4
 362 0016 0122     	 movs r2,#1
 363 0018 1A70     	 strb r2,[r3]
 364              	.LBB22:
 365              	.LBB23:
 354:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 366              	 .loc 4 354 3
 367              	 .syntax unified
 368              	
 369 001a BFF35F8F 	 dmb
 370              	
 371              	 .loc 4 355 1
 372              	 .thumb
 373              	 .syntax unified
 374 001e 00BF     	 nop
 375              	.LBE23:
 376              	.LBE22:
 377              	.LBB24:
 378              	.LBB25:
 317:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 379              	 .loc 3 317 3
 380              	 .syntax unified
 381              	
 382 0020 62B6     	 cpsie i
 383              	
 318:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 384              	 .loc 3 318 1
 385              	 .thumb
 386              	 .syntax unified
 387 0022 00BF     	 nop
 388              	.L19:
 389              	.LBE25:
 390              	.LBE24:
 164:.././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h **** }
 391              	 .loc 2 164 1
 392 0024 00BF     	 nop
 393 0026 0837     	 adds r7,r7,#8
 394              	.LCFI27:
 395              	 .cfi_def_cfa_offset 8
 396 0028 BD46     	 mov sp,r7
 397              	.LCFI28:
 398              	 .cfi_def_cfa_register 13
 399              	 
 400 002a 80BD     	 pop {r7,pc}
 401              	.L21:
 402              	 .align 2
 403              	.L20:
 404 002c 00000000 	 .word cpu_irq_is_enabled_flags
 405 0030 00000000 	 .word g_interrupt_enabled
 406              	 .cfi_endproc
 407              	.LFE61:
 409              	 .section .text.sleepmgr_lock_mode,"ax",%progbits
 410              	 .align 1
 411              	 .syntax unified
 412              	 .thumb
 413              	 .thumb_func
 414              	 .fpu softvfp
 416              	sleepmgr_lock_mode:
 417              	.LFB134:
 418              	 .file 5 ".././hal/sam3u1c/inc/sleepmgr.h"
   1:.././hal/sam3u1c/inc/sleepmgr.h **** /**
   2:.././hal/sam3u1c/inc/sleepmgr.h ****  * \file
   3:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   4:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Sleep manager
   5:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   6:.././hal/sam3u1c/inc/sleepmgr.h ****  * Copyright (c) 2010 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sleepmgr.h ****  *
   8:.././hal/sam3u1c/inc/sleepmgr.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  10:.././hal/sam3u1c/inc/sleepmgr.h ****  * \page License
  11:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  12:.././hal/sam3u1c/inc/sleepmgr.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sleepmgr.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  15:.././hal/sam3u1c/inc/sleepmgr.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sleepmgr.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  18:.././hal/sam3u1c/inc/sleepmgr.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sleepmgr.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sleepmgr.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  22:.././hal/sam3u1c/inc/sleepmgr.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sleepmgr.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  25:.././hal/sam3u1c/inc/sleepmgr.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sleepmgr.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  28:.././hal/sam3u1c/inc/sleepmgr.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sleepmgr.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sleepmgr.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sleepmgr.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sleepmgr.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sleepmgr.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sleepmgr.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sleepmgr.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sleepmgr.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sleepmgr.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sleepmgr.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  40:.././hal/sam3u1c/inc/sleepmgr.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  42:.././hal/sam3u1c/inc/sleepmgr.h ****  */
  43:.././hal/sam3u1c/inc/sleepmgr.h **** #ifndef SLEEPMGR_H
  44:.././hal/sam3u1c/inc/sleepmgr.h **** #define SLEEPMGR_H
  45:.././hal/sam3u1c/inc/sleepmgr.h **** 
  46:.././hal/sam3u1c/inc/sleepmgr.h **** #include <compiler.h>
  47:.././hal/sam3u1c/inc/sleepmgr.h **** #include <parts.h>
  48:.././hal/sam3u1c/inc/sleepmgr.h **** 
  49:.././hal/sam3u1c/inc/sleepmgr.h **** #if (SAM3S || SAM3U || SAM3N || SAM3XA || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM
  50:.././hal/sam3u1c/inc/sleepmgr.h **** # include "sam/sleepmgr.h"
  51:.././hal/sam3u1c/inc/sleepmgr.h **** #elif XMEGA
  52:.././hal/sam3u1c/inc/sleepmgr.h **** # include "xmega/sleepmgr.h"
  53:.././hal/sam3u1c/inc/sleepmgr.h **** #elif UC3
  54:.././hal/sam3u1c/inc/sleepmgr.h **** # include "uc3/sleepmgr.h"
  55:.././hal/sam3u1c/inc/sleepmgr.h **** #elif SAM4L
  56:.././hal/sam3u1c/inc/sleepmgr.h **** # include "sam4l/sleepmgr.h"
  57:.././hal/sam3u1c/inc/sleepmgr.h **** #elif MEGA
  58:.././hal/sam3u1c/inc/sleepmgr.h **** # include "mega/sleepmgr.h"
  59:.././hal/sam3u1c/inc/sleepmgr.h **** #elif (SAMD20 || SAMD21 || SAMR21 || SAMD11)
  60:.././hal/sam3u1c/inc/sleepmgr.h **** # include "samd/sleepmgr.h"
  61:.././hal/sam3u1c/inc/sleepmgr.h **** #else
  62:.././hal/sam3u1c/inc/sleepmgr.h **** # error Unsupported device.
  63:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
  64:.././hal/sam3u1c/inc/sleepmgr.h **** 
  65:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef __cplusplus
  66:.././hal/sam3u1c/inc/sleepmgr.h **** extern "C" {
  67:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
  68:.././hal/sam3u1c/inc/sleepmgr.h **** 
  69:.././hal/sam3u1c/inc/sleepmgr.h **** /**
  70:.././hal/sam3u1c/inc/sleepmgr.h ****  * \defgroup sleepmgr_group Sleep manager
  71:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  72:.././hal/sam3u1c/inc/sleepmgr.h ****  * The sleep manager is a service for ensuring that the device is not put to
  73:.././hal/sam3u1c/inc/sleepmgr.h ****  * sleep in deeper sleep modes than the system (e.g., peripheral drivers,
  74:.././hal/sam3u1c/inc/sleepmgr.h ****  * services or the application) allows at any given time.
  75:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  76:.././hal/sam3u1c/inc/sleepmgr.h ****  * It is based on the use of lock counting for the individual sleep modes, and
  77:.././hal/sam3u1c/inc/sleepmgr.h ****  * will put the device to sleep in the shallowest sleep mode that has a non-zero
  78:.././hal/sam3u1c/inc/sleepmgr.h ****  * lock count. The drivers/services/application can change these counts by use
  79:.././hal/sam3u1c/inc/sleepmgr.h ****  * of \ref sleepmgr_lock_mode and \ref sleepmgr_unlock_mode.
  80:.././hal/sam3u1c/inc/sleepmgr.h ****  * Refer to \ref sleepmgr_mode for a list of the sleep modes available for
  81:.././hal/sam3u1c/inc/sleepmgr.h ****  * locking, and the device datasheet for information on their effect.
  82:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  83:.././hal/sam3u1c/inc/sleepmgr.h ****  * The application must supply the file \ref conf_sleepmgr.h.
  84:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  85:.././hal/sam3u1c/inc/sleepmgr.h ****  * For the sleep manager to be enabled, the symbol \ref CONFIG_SLEEPMGR_ENABLE
  86:.././hal/sam3u1c/inc/sleepmgr.h ****  * must be defined, e.g., in \ref conf_sleepmgr.h. If this symbol is not
  87:.././hal/sam3u1c/inc/sleepmgr.h ****  * defined, the functions are replaced with dummy functions and no RAM is used.
  88:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  89:.././hal/sam3u1c/inc/sleepmgr.h ****  * @{
  90:.././hal/sam3u1c/inc/sleepmgr.h ****  */
  91:.././hal/sam3u1c/inc/sleepmgr.h **** 
  92:.././hal/sam3u1c/inc/sleepmgr.h **** /**
  93:.././hal/sam3u1c/inc/sleepmgr.h ****  * \def CONFIG_SLEEPMGR_ENABLE
  94:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Configuration symbol for enabling the sleep manager
  95:.././hal/sam3u1c/inc/sleepmgr.h ****  *
  96:.././hal/sam3u1c/inc/sleepmgr.h ****  * If this symbol is not defined, the functions of this service are replaced
  97:.././hal/sam3u1c/inc/sleepmgr.h ****  * with dummy functions. This is useful for reducing code size and execution
  98:.././hal/sam3u1c/inc/sleepmgr.h ****  * time if the sleep manager is not needed in the application.
  99:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 100:.././hal/sam3u1c/inc/sleepmgr.h ****  * This symbol may be defined in \ref conf_sleepmgr.h.
 101:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 102:.././hal/sam3u1c/inc/sleepmgr.h **** #if defined(__DOXYGEN__) && !defined(CONFIG_SLEEPMGR_ENABLE)
 103:.././hal/sam3u1c/inc/sleepmgr.h **** #  define CONFIG_SLEEPMGR_ENABLE
 104:.././hal/sam3u1c/inc/sleepmgr.h **** #endif
 105:.././hal/sam3u1c/inc/sleepmgr.h **** 
 106:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 107:.././hal/sam3u1c/inc/sleepmgr.h ****  * \enum sleepmgr_mode
 108:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Sleep mode locks
 109:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 110:.././hal/sam3u1c/inc/sleepmgr.h ****  * Identifiers for the different sleep mode locks.
 111:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 112:.././hal/sam3u1c/inc/sleepmgr.h **** 
 113:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 114:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Initialize the lock counts
 115:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 116:.././hal/sam3u1c/inc/sleepmgr.h ****  * Sets all lock counts to 0, except the very last one, which is set to 1. This
 117:.././hal/sam3u1c/inc/sleepmgr.h ****  * is done to simplify the algorithm for finding the deepest allowable sleep
 118:.././hal/sam3u1c/inc/sleepmgr.h ****  * mode in \ref sleepmgr_enter_sleep.
 119:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 120:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_init(void)
 121:.././hal/sam3u1c/inc/sleepmgr.h **** {
 122:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 123:.././hal/sam3u1c/inc/sleepmgr.h **** 	uint8_t i;
 124:.././hal/sam3u1c/inc/sleepmgr.h **** 
 125:.././hal/sam3u1c/inc/sleepmgr.h **** 	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
 126:.././hal/sam3u1c/inc/sleepmgr.h **** 		sleepmgr_locks[i] = 0;
 127:.././hal/sam3u1c/inc/sleepmgr.h **** 	}
 128:.././hal/sam3u1c/inc/sleepmgr.h **** 	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
 129:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 130:.././hal/sam3u1c/inc/sleepmgr.h **** }
 131:.././hal/sam3u1c/inc/sleepmgr.h **** 
 132:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 133:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Increase lock count for a sleep mode
 134:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 135:.././hal/sam3u1c/inc/sleepmgr.h ****  * Increases the lock count for \a mode to ensure that the sleep manager does
 136:.././hal/sam3u1c/inc/sleepmgr.h ****  * not put the device to sleep in the deeper sleep modes.
 137:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 138:.././hal/sam3u1c/inc/sleepmgr.h ****  * \param mode Sleep mode to lock.
 139:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 140:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
 141:.././hal/sam3u1c/inc/sleepmgr.h **** {
 419              	 .loc 5 141 1
 420              	 .cfi_startproc
 421              	 
 422              	 
 423 0000 80B5     	 push {r7,lr}
 424              	.LCFI29:
 425              	 .cfi_def_cfa_offset 8
 426              	 .cfi_offset 7,-8
 427              	 .cfi_offset 14,-4
 428 0002 84B0     	 sub sp,sp,#16
 429              	.LCFI30:
 430              	 .cfi_def_cfa_offset 24
 431 0004 00AF     	 add r7,sp,#0
 432              	.LCFI31:
 433              	 .cfi_def_cfa_register 7
 434 0006 0346     	 mov r3,r0
 435 0008 FB71     	 strb r3,[r7,#7]
 142:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 143:.././hal/sam3u1c/inc/sleepmgr.h **** 	irqflags_t flags;
 144:.././hal/sam3u1c/inc/sleepmgr.h **** 
 145:.././hal/sam3u1c/inc/sleepmgr.h **** 	Assert(sleepmgr_locks[mode] < 0xff);
 146:.././hal/sam3u1c/inc/sleepmgr.h **** 
 147:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Enter a critical section
 148:.././hal/sam3u1c/inc/sleepmgr.h **** 	flags = cpu_irq_save();
 436              	 .loc 5 148 10
 437 000a 084B     	 ldr r3,.L23
 438 000c 9847     	 blx r3
 439              	.LVL1:
 440 000e F860     	 str r0,[r7,#12]
 149:.././hal/sam3u1c/inc/sleepmgr.h **** 
 150:.././hal/sam3u1c/inc/sleepmgr.h **** 	++sleepmgr_locks[mode];
 441              	 .loc 5 150 18
 442 0010 FB79     	 ldrb r3,[r7,#7]
 443 0012 074A     	 ldr r2,.L23+4
 444 0014 D25C     	 ldrb r2,[r2,r3]
 445              	 .loc 5 150 2
 446 0016 0132     	 adds r2,r2,#1
 447 0018 D1B2     	 uxtb r1,r2
 448 001a 054A     	 ldr r2,.L23+4
 449 001c D154     	 strb r1,[r2,r3]
 151:.././hal/sam3u1c/inc/sleepmgr.h **** 
 152:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Leave the critical section
 153:.././hal/sam3u1c/inc/sleepmgr.h **** 	cpu_irq_restore(flags);
 450              	 .loc 5 153 2
 451 001e F868     	 ldr r0,[r7,#12]
 452 0020 044B     	 ldr r3,.L23+8
 453 0022 9847     	 blx r3
 454              	.LVL2:
 154:.././hal/sam3u1c/inc/sleepmgr.h **** #else
 155:.././hal/sam3u1c/inc/sleepmgr.h **** 	UNUSED(mode);
 156:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 157:.././hal/sam3u1c/inc/sleepmgr.h **** }
 455              	 .loc 5 157 1
 456 0024 00BF     	 nop
 457 0026 1037     	 adds r7,r7,#16
 458              	.LCFI32:
 459              	 .cfi_def_cfa_offset 8
 460 0028 BD46     	 mov sp,r7
 461              	.LCFI33:
 462              	 .cfi_def_cfa_register 13
 463              	 
 464 002a 80BD     	 pop {r7,pc}
 465              	.L24:
 466              	 .align 2
 467              	.L23:
 468 002c 00000000 	 .word cpu_irq_save
 469 0030 00000000 	 .word sleepmgr_locks
 470 0034 00000000 	 .word cpu_irq_restore
 471              	 .cfi_endproc
 472              	.LFE134:
 474              	 .section .text.sleepmgr_unlock_mode,"ax",%progbits
 475              	 .align 1
 476              	 .syntax unified
 477              	 .thumb
 478              	 .thumb_func
 479              	 .fpu softvfp
 481              	sleepmgr_unlock_mode:
 482              	.LFB135:
 158:.././hal/sam3u1c/inc/sleepmgr.h **** 
 159:.././hal/sam3u1c/inc/sleepmgr.h **** /**
 160:.././hal/sam3u1c/inc/sleepmgr.h ****  * \brief Decrease lock count for a sleep mode
 161:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 162:.././hal/sam3u1c/inc/sleepmgr.h ****  * Decreases the lock count for \a mode. If the lock count reaches 0, the sleep
 163:.././hal/sam3u1c/inc/sleepmgr.h ****  * manager can put the device to sleep in the deeper sleep modes.
 164:.././hal/sam3u1c/inc/sleepmgr.h ****  *
 165:.././hal/sam3u1c/inc/sleepmgr.h ****  * \param mode Sleep mode to unlock.
 166:.././hal/sam3u1c/inc/sleepmgr.h ****  */
 167:.././hal/sam3u1c/inc/sleepmgr.h **** static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
 168:.././hal/sam3u1c/inc/sleepmgr.h **** {
 483              	 .loc 5 168 1
 484              	 .cfi_startproc
 485              	 
 486              	 
 487 0000 80B5     	 push {r7,lr}
 488              	.LCFI34:
 489              	 .cfi_def_cfa_offset 8
 490              	 .cfi_offset 7,-8
 491              	 .cfi_offset 14,-4
 492 0002 84B0     	 sub sp,sp,#16
 493              	.LCFI35:
 494              	 .cfi_def_cfa_offset 24
 495 0004 00AF     	 add r7,sp,#0
 496              	.LCFI36:
 497              	 .cfi_def_cfa_register 7
 498 0006 0346     	 mov r3,r0
 499 0008 FB71     	 strb r3,[r7,#7]
 169:.././hal/sam3u1c/inc/sleepmgr.h **** #ifdef CONFIG_SLEEPMGR_ENABLE
 170:.././hal/sam3u1c/inc/sleepmgr.h **** 	irqflags_t flags;
 171:.././hal/sam3u1c/inc/sleepmgr.h **** 
 172:.././hal/sam3u1c/inc/sleepmgr.h **** 	Assert(sleepmgr_locks[mode]);
 173:.././hal/sam3u1c/inc/sleepmgr.h **** 
 174:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Enter a critical section
 175:.././hal/sam3u1c/inc/sleepmgr.h **** 	flags = cpu_irq_save();
 500              	 .loc 5 175 10
 501 000a 084B     	 ldr r3,.L26
 502 000c 9847     	 blx r3
 503              	.LVL3:
 504 000e F860     	 str r0,[r7,#12]
 176:.././hal/sam3u1c/inc/sleepmgr.h **** 
 177:.././hal/sam3u1c/inc/sleepmgr.h **** 	--sleepmgr_locks[mode];
 505              	 .loc 5 177 18
 506 0010 FB79     	 ldrb r3,[r7,#7]
 507 0012 074A     	 ldr r2,.L26+4
 508 0014 D25C     	 ldrb r2,[r2,r3]
 509              	 .loc 5 177 2
 510 0016 013A     	 subs r2,r2,#1
 511 0018 D1B2     	 uxtb r1,r2
 512 001a 054A     	 ldr r2,.L26+4
 513 001c D154     	 strb r1,[r2,r3]
 178:.././hal/sam3u1c/inc/sleepmgr.h **** 
 179:.././hal/sam3u1c/inc/sleepmgr.h **** 	// Leave the critical section
 180:.././hal/sam3u1c/inc/sleepmgr.h **** 	cpu_irq_restore(flags);
 514              	 .loc 5 180 2
 515 001e F868     	 ldr r0,[r7,#12]
 516 0020 044B     	 ldr r3,.L26+8
 517 0022 9847     	 blx r3
 518              	.LVL4:
 181:.././hal/sam3u1c/inc/sleepmgr.h **** #else
 182:.././hal/sam3u1c/inc/sleepmgr.h **** 	UNUSED(mode);
 183:.././hal/sam3u1c/inc/sleepmgr.h **** #endif /* CONFIG_SLEEPMGR_ENABLE */
 184:.././hal/sam3u1c/inc/sleepmgr.h **** }
 519              	 .loc 5 184 1
 520 0024 00BF     	 nop
 521 0026 1037     	 adds r7,r7,#16
 522              	.LCFI37:
 523              	 .cfi_def_cfa_offset 8
 524 0028 BD46     	 mov sp,r7
 525              	.LCFI38:
 526              	 .cfi_def_cfa_register 13
 527              	 
 528 002a 80BD     	 pop {r7,pc}
 529              	.L27:
 530              	 .align 2
 531              	.L26:
 532 002c 00000000 	 .word cpu_irq_save
 533 0030 00000000 	 .word sleepmgr_locks
 534 0034 00000000 	 .word cpu_irq_restore
 535              	 .cfi_endproc
 536              	.LFE135:
 538              	 .section .bss.udd_b_idle,"aw",%nobits
 541              	udd_b_idle:
 542 0000 00       	 .space 1
 543              	 .section .text.udd_sleep_mode,"ax",%progbits
 544              	 .align 1
 545              	 .syntax unified
 546              	 .thumb
 547              	 .thumb_func
 548              	 .fpu softvfp
 550              	udd_sleep_mode:
 551              	.LFB138:
 552              	 .file 6 ".././hal/sam3u1c/udphs_device.c"
   1:.././hal/sam3u1c/udphs_device.c **** /**
   2:.././hal/sam3u1c/udphs_device.c ****  * \file
   3:.././hal/sam3u1c/udphs_device.c ****  *
   4:.././hal/sam3u1c/udphs_device.c ****  * \brief USB Device Driver for UDPHS. Compliant with common UDD driver.
   5:.././hal/sam3u1c/udphs_device.c ****  *
   6:.././hal/sam3u1c/udphs_device.c ****  * Copyright (c) 2012 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/udphs_device.c ****  *
   8:.././hal/sam3u1c/udphs_device.c ****  * \asf_license_start
   9:.././hal/sam3u1c/udphs_device.c ****  *
  10:.././hal/sam3u1c/udphs_device.c ****  * \page License
  11:.././hal/sam3u1c/udphs_device.c ****  *
  12:.././hal/sam3u1c/udphs_device.c ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/udphs_device.c ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/udphs_device.c ****  *
  15:.././hal/sam3u1c/udphs_device.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/udphs_device.c ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/udphs_device.c ****  *
  18:.././hal/sam3u1c/udphs_device.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/udphs_device.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/udphs_device.c ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/udphs_device.c ****  *
  22:.././hal/sam3u1c/udphs_device.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/udphs_device.c ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/udphs_device.c ****  *
  25:.././hal/sam3u1c/udphs_device.c ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/udphs_device.c ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/udphs_device.c ****  *
  28:.././hal/sam3u1c/udphs_device.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/udphs_device.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/udphs_device.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/udphs_device.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/udphs_device.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/udphs_device.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/udphs_device.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/udphs_device.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/udphs_device.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/udphs_device.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/udphs_device.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/udphs_device.c ****  *
  40:.././hal/sam3u1c/udphs_device.c ****  * \asf_license_stop
  41:.././hal/sam3u1c/udphs_device.c ****  *
  42:.././hal/sam3u1c/udphs_device.c ****  */
  43:.././hal/sam3u1c/udphs_device.c **** 
  44:.././hal/sam3u1c/udphs_device.c **** #include "conf_usb.h"
  45:.././hal/sam3u1c/udphs_device.c **** #include "sysclk.h"
  46:.././hal/sam3u1c/udphs_device.c **** #include "udd.h"
  47:.././hal/sam3u1c/udphs_device.c **** #include "udphs_device.h"
  48:.././hal/sam3u1c/udphs_device.c **** #include <string.h>
  49:.././hal/sam3u1c/udphs_device.c **** 
  50:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
  51:.././hal/sam3u1c/udphs_device.c **** #  include "sleep.h"
  52:.././hal/sam3u1c/udphs_device.c **** #  include "sleepmgr.h"
  53:.././hal/sam3u1c/udphs_device.c **** #endif
  54:.././hal/sam3u1c/udphs_device.c **** 
  55:.././hal/sam3u1c/udphs_device.c **** #if !(SAM3U)
  56:.././hal/sam3u1c/udphs_device.c **** #  error The current UDPHS Device Driver supports only SAM3U.
  57:.././hal/sam3u1c/udphs_device.c **** #endif
  58:.././hal/sam3u1c/udphs_device.c **** 
  59:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_LOW_SPEED
  60:.././hal/sam3u1c/udphs_device.c **** #  error The Low speed mode is not supported on this part, please remove USB_DEVICE_LOW_SPEED in co
  61:.././hal/sam3u1c/udphs_device.c **** #endif
  62:.././hal/sam3u1c/udphs_device.c **** 
  63:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_USB_INT_FUN
  64:.././hal/sam3u1c/udphs_device.c **** #  define UDD_USB_INT_FUN UDPHS_Handler
  65:.././hal/sam3u1c/udphs_device.c **** #endif
  66:.././hal/sam3u1c/udphs_device.c **** 
  67:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_USB_INT_LEVEL
  68:.././hal/sam3u1c/udphs_device.c **** #  define UDD_USB_INT_LEVEL 5 // By default USB interrupt have low priority
  69:.././hal/sam3u1c/udphs_device.c **** #endif
  70:.././hal/sam3u1c/udphs_device.c **** 
  71:.././hal/sam3u1c/udphs_device.c **** #ifndef UDC_VBUS_EVENT
  72:.././hal/sam3u1c/udphs_device.c **** #  define UDC_VBUS_EVENT(present)
  73:.././hal/sam3u1c/udphs_device.c **** #endif
  74:.././hal/sam3u1c/udphs_device.c **** 
  75:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_USED(ep)      (USB_DEVICE_MAX_EP >= ep)
  76:.././hal/sam3u1c/udphs_device.c **** 
  77:.././hal/sam3u1c/udphs_device.c **** // for debug text
  78:.././hal/sam3u1c/udphs_device.c **** //#define dbg_print printf
  79:.././hal/sam3u1c/udphs_device.c **** #define dbg_print(...)
  80:.././hal/sam3u1c/udphs_device.c **** 
  81:.././hal/sam3u1c/udphs_device.c **** /**
  82:.././hal/sam3u1c/udphs_device.c ****  * \ingroup udd_group
  83:.././hal/sam3u1c/udphs_device.c ****  * \defgroup udd_udphs_group USB Device High-Speed Port (UDPHS)
  84:.././hal/sam3u1c/udphs_device.c ****  *
  85:.././hal/sam3u1c/udphs_device.c ****  * \section UDPHS_CONF UDPHS Custom configuration
  86:.././hal/sam3u1c/udphs_device.c ****  * The following UDPHS driver configuration must be included in the conf_usb.h
  87:.././hal/sam3u1c/udphs_device.c ****  * file of the application.
  88:.././hal/sam3u1c/udphs_device.c ****  *
  89:.././hal/sam3u1c/udphs_device.c ****  * UDD_USB_INT_LEVEL<br>
  90:.././hal/sam3u1c/udphs_device.c ****  * Option to change the interrupt priority (0 to 15) by default 5 (recommended).
  91:.././hal/sam3u1c/udphs_device.c ****  *
  92:.././hal/sam3u1c/udphs_device.c ****  * UDD_USB_INT_FUN<br>
  93:.././hal/sam3u1c/udphs_device.c ****  * Option to fit interrupt function to what defined in exception table.
  94:.././hal/sam3u1c/udphs_device.c ****  *
  95:.././hal/sam3u1c/udphs_device.c ****  * UDD_ISOCHRONOUS_NB_BANK(ep)<br>
  96:.././hal/sam3u1c/udphs_device.c ****  * Feature to reduce or increase isochronous endpoints buffering (1 to 3).
  97:.././hal/sam3u1c/udphs_device.c ****  * Default value 2.
  98:.././hal/sam3u1c/udphs_device.c ****  *
  99:.././hal/sam3u1c/udphs_device.c ****  * UDD_BULK_NB_BANK(ep)<br>
 100:.././hal/sam3u1c/udphs_device.c ****  * Feature to reduce or increase bulk endpoints buffering (1 to 2).
 101:.././hal/sam3u1c/udphs_device.c ****  * Default value 2.
 102:.././hal/sam3u1c/udphs_device.c ****  *
 103:.././hal/sam3u1c/udphs_device.c ****  * UDD_INTERRUPT_NB_BANK(ep)<br>
 104:.././hal/sam3u1c/udphs_device.c ****  * Feature to reduce or increase interrupt endpoints buffering (1 to 2).
 105:.././hal/sam3u1c/udphs_device.c ****  * Default value 1.
 106:.././hal/sam3u1c/udphs_device.c ****  *
 107:.././hal/sam3u1c/udphs_device.c ****  * \section Callbacks management
 108:.././hal/sam3u1c/udphs_device.c ****  * The USB driver is fully managed by interrupt and does not request periodic
 109:.././hal/sam3u1c/udphs_device.c ****  * task. Thereby, the USB events use callbacks to transfer the information.
 110:.././hal/sam3u1c/udphs_device.c ****  * The callbacks are declared in static during compilation or in variable during
 111:.././hal/sam3u1c/udphs_device.c ****  * code execution.
 112:.././hal/sam3u1c/udphs_device.c ****  *
 113:.././hal/sam3u1c/udphs_device.c ****  * Static declarations defined in conf_usb.h:
 114:.././hal/sam3u1c/udphs_device.c ****  * - UDC_VBUS_EVENT(bool b_present)<br>
 115:.././hal/sam3u1c/udphs_device.c ****  *   To signal Vbus level change
 116:.././hal/sam3u1c/udphs_device.c ****  * - UDC_SUSPEND_EVENT()<br>
 117:.././hal/sam3u1c/udphs_device.c ****  *   Called when USB bus enter in suspend mode
 118:.././hal/sam3u1c/udphs_device.c ****  * - UDC_RESUME_EVENT()<br>
 119:.././hal/sam3u1c/udphs_device.c ****  *   Called when USB bus is wakeup
 120:.././hal/sam3u1c/udphs_device.c ****  * - UDC_SOF_EVENT()<br>
 121:.././hal/sam3u1c/udphs_device.c ****  *   Called for each received SOF, Note: Each 1ms in HS/FS mode only.
 122:.././hal/sam3u1c/udphs_device.c ****  *
 123:.././hal/sam3u1c/udphs_device.c ****  * Dynamic callbacks, called "endpoint job" , are registered
 124:.././hal/sam3u1c/udphs_device.c ****  * in udd_ep_job_t structure via the following functions:
 125:.././hal/sam3u1c/udphs_device.c ****  * - udd_ep_run()<br>
 126:.././hal/sam3u1c/udphs_device.c ****  *   To call it when a transfer is finish
 127:.././hal/sam3u1c/udphs_device.c ****  * - udd_ep_wait_stall_clear()<br>
 128:.././hal/sam3u1c/udphs_device.c ****  *   To call it when a endpoint halt is disabled
 129:.././hal/sam3u1c/udphs_device.c ****  *
 130:.././hal/sam3u1c/udphs_device.c ****  * \section Power mode management
 131:.././hal/sam3u1c/udphs_device.c ****  * The Sleep modes authorized :
 132:.././hal/sam3u1c/udphs_device.c ****  * - in USB IDLE state, the UDPHS needs of USB clock and authorizes up to sleep mode WFI.
 133:.././hal/sam3u1c/udphs_device.c ****  * - in USB SUSPEND state, the UDPHS no needs USB clock and authorizes up to sleep mode WAIT.
 134:.././hal/sam3u1c/udphs_device.c ****  * @{
 135:.././hal/sam3u1c/udphs_device.c ****  */
 136:.././hal/sam3u1c/udphs_device.c **** 
 137:.././hal/sam3u1c/udphs_device.c **** // Check USB Device configuration
 138:.././hal/sam3u1c/udphs_device.c **** #ifndef USB_DEVICE_EP_CTRL_SIZE
 139:.././hal/sam3u1c/udphs_device.c **** #  error USB_DEVICE_EP_CTRL_SIZE not defined
 140:.././hal/sam3u1c/udphs_device.c **** #endif
 141:.././hal/sam3u1c/udphs_device.c **** #ifndef USB_DEVICE_MAX_EP
 142:.././hal/sam3u1c/udphs_device.c **** #  error USB_DEVICE_MAX_EP not defined
 143:.././hal/sam3u1c/udphs_device.c **** #endif
 144:.././hal/sam3u1c/udphs_device.c **** #if USB_DEVICE_MAX_EP > (UDD_MAX_PEP_NB-1) // USB_DEVICE_MAX_EP does not include control endpoint
 145:.././hal/sam3u1c/udphs_device.c **** #  error USB_DEVICE_MAX_EP is too high and not supported by this part
 146:.././hal/sam3u1c/udphs_device.c **** #endif
 147:.././hal/sam3u1c/udphs_device.c **** 
 148:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_ISO_NBANK_ERROR(ep)            \
 149:.././hal/sam3u1c/udphs_device.c **** 	( (UDD_ISOCHRONOUS_NB_BANK(ep) < 1)   \
 150:.././hal/sam3u1c/udphs_device.c **** 		|| (UDD_ISOCHRONOUS_NB_BANK(ep) > 3) )
 151:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_BULK_NBANK_ERROR(ep)           \
 152:.././hal/sam3u1c/udphs_device.c **** 	( (UDD_BULK_NB_BANK(ep) < 1) || (UDD_BULK_NB_BANK(ep) > 2) )
 153:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_INT_NBANK_ERROR(ep)            \
 154:.././hal/sam3u1c/udphs_device.c **** 	( (UDD_INTERRUPT_NB_BANK(ep) < 1) || (UDD_INTERRUPT_NB_BANK(ep) > 2) )
 155:.././hal/sam3u1c/udphs_device.c **** 
 156:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_ISO_NB_BANK_ERROR(ep)          \
 157:.././hal/sam3u1c/udphs_device.c **** 	(UDD_EP_USED(ep) && UDD_EP_ISO_NBANK_ERROR(ep))
 158:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_BULK_NB_BANK_ERROR(ep)         \
 159:.././hal/sam3u1c/udphs_device.c **** 	(UDD_EP_USED(ep) && UDD_EP_ISO_NBANK_ERROR(ep))
 160:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_INT_NB_BANK_ERROR(ep)          \
 161:.././hal/sam3u1c/udphs_device.c **** 	(UDD_EP_USED(ep) && UDD_EP_ISO_NBANK_ERROR(ep))
 162:.././hal/sam3u1c/udphs_device.c **** 
 163:.././hal/sam3u1c/udphs_device.c **** #define UDD_EP_NB_BANK_ERROR(ep, type)        \
 164:.././hal/sam3u1c/udphs_device.c **** 	(ATPASTE3(UDD_EP_, type, _NB_BANK_ERROR(ep)))
 165:.././hal/sam3u1c/udphs_device.c **** 
 166:.././hal/sam3u1c/udphs_device.c **** #define UDD_ISO_NB_BANK_ERROR \
 167:.././hal/sam3u1c/udphs_device.c **** 	(          UDD_EP_NB_BANK_ERROR( 1, ISO) \
 168:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 2, ISO) \
 169:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 3, ISO) \
 170:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 4, ISO) \
 171:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 5, ISO) \
 172:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 6, ISO) \
 173:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 7, ISO) \
 174:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 8, ISO) \
 175:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 9, ISO) \
 176:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(10, ISO) \
 177:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(11, ISO) \
 178:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(12, ISO) \
 179:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(13, ISO) \
 180:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(14, ISO) \
 181:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(15, ISO) )
 182:.././hal/sam3u1c/udphs_device.c **** #define UDD_BULK_NB_BANK_ERROR \
 183:.././hal/sam3u1c/udphs_device.c **** 	(          UDD_EP_NB_BANK_ERROR( 1, BULK) \
 184:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 2, BULK) \
 185:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 3, BULK) \
 186:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 4, BULK) \
 187:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 5, BULK) \
 188:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 6, BULK) \
 189:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 7, BULK) \
 190:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 8, BULK) \
 191:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 9, BULK) \
 192:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(10, BULK) \
 193:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(11, BULK) \
 194:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(12, BULK) \
 195:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(13, BULK) \
 196:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(14, BULK) \
 197:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(15, BULK) )
 198:.././hal/sam3u1c/udphs_device.c **** #define UDD_INTERRUPT_NB_BANK_ERROR \
 199:.././hal/sam3u1c/udphs_device.c **** 	(          UDD_EP_NB_BANK_ERROR( 1, INT) \
 200:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 2, INT) \
 201:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 3, INT) \
 202:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 4, INT) \
 203:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 5, INT) \
 204:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 6, INT) \
 205:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 7, INT) \
 206:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 8, INT) \
 207:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR( 9, INT) \
 208:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(10, INT) \
 209:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(11, INT) \
 210:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(12, INT) \
 211:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(13, INT) \
 212:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(14, INT) \
 213:.././hal/sam3u1c/udphs_device.c **** 		|| UDD_EP_NB_BANK_ERROR(15, INT) )
 214:.././hal/sam3u1c/udphs_device.c **** 
 215:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_ISOCHRONOUS_NB_BANK
 216:.././hal/sam3u1c/udphs_device.c **** # define UDD_ISOCHRONOUS_NB_BANK(ep) 2
 217:.././hal/sam3u1c/udphs_device.c **** #else
 218:.././hal/sam3u1c/udphs_device.c **** # if UDD_ISO_NB_BANK_ERROR
 219:.././hal/sam3u1c/udphs_device.c **** #  error UDD_ISOCHRONOUS_NB_BANK(ep) must be define within 1 to 3.
 220:.././hal/sam3u1c/udphs_device.c **** # endif
 221:.././hal/sam3u1c/udphs_device.c **** #endif
 222:.././hal/sam3u1c/udphs_device.c **** 
 223:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_BULK_NB_BANK
 224:.././hal/sam3u1c/udphs_device.c **** # define UDD_BULK_NB_BANK(ep) 2
 225:.././hal/sam3u1c/udphs_device.c **** #else
 226:.././hal/sam3u1c/udphs_device.c **** # if UDD_BULK_NB_BANK_ERROR
 227:.././hal/sam3u1c/udphs_device.c **** #  error UDD_BULK_NB_BANK must be define with 1 or 2.
 228:.././hal/sam3u1c/udphs_device.c **** # endif
 229:.././hal/sam3u1c/udphs_device.c **** #endif
 230:.././hal/sam3u1c/udphs_device.c **** 
 231:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_INTERRUPT_NB_BANK
 232:.././hal/sam3u1c/udphs_device.c **** # define UDD_INTERRUPT_NB_BANK(ep) 1
 233:.././hal/sam3u1c/udphs_device.c **** #else
 234:.././hal/sam3u1c/udphs_device.c **** # if UDD_INTERRUPT_NB_BANK_ERROR
 235:.././hal/sam3u1c/udphs_device.c **** #  error UDD_INTERRUPT_NB_BANK must be define with 1 or 2.
 236:.././hal/sam3u1c/udphs_device.c **** # endif
 237:.././hal/sam3u1c/udphs_device.c **** #endif
 238:.././hal/sam3u1c/udphs_device.c **** 
 239:.././hal/sam3u1c/udphs_device.c **** 
 240:.././hal/sam3u1c/udphs_device.c **** /**
 241:.././hal/sam3u1c/udphs_device.c ****  * \name Power management routine.
 242:.././hal/sam3u1c/udphs_device.c ****  */
 243:.././hal/sam3u1c/udphs_device.c **** //@{
 244:.././hal/sam3u1c/udphs_device.c **** 
 245:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
 246:.././hal/sam3u1c/udphs_device.c **** 
 247:.././hal/sam3u1c/udphs_device.c **** //! Definition of sleep levels
 248:.././hal/sam3u1c/udphs_device.c **** #define UDPHS_SLEEP_MODE_USB_SUSPEND  SLEEPMGR_WAIT_FAST
 249:.././hal/sam3u1c/udphs_device.c **** #define UDPHS_SLEEP_MODE_USB_IDLE     SLEEPMGR_SLEEP_WFI
 250:.././hal/sam3u1c/udphs_device.c **** 
 251:.././hal/sam3u1c/udphs_device.c **** //! State of USB line
 252:.././hal/sam3u1c/udphs_device.c **** static bool udd_b_idle;
 253:.././hal/sam3u1c/udphs_device.c **** 
 254:.././hal/sam3u1c/udphs_device.c **** 
 255:.././hal/sam3u1c/udphs_device.c **** /*! \brief Authorize or not the CPU powerdown mode
 256:.././hal/sam3u1c/udphs_device.c ****  *
 257:.././hal/sam3u1c/udphs_device.c ****  * \param b_enable   true to authorize idle mode
 258:.././hal/sam3u1c/udphs_device.c ****  */
 259:.././hal/sam3u1c/udphs_device.c **** static void udd_sleep_mode(bool b_idle)
 260:.././hal/sam3u1c/udphs_device.c **** {
 553              	 .loc 6 260 1
 554              	 .cfi_startproc
 555              	 
 556              	 
 557 0000 80B5     	 push {r7,lr}
 558              	.LCFI39:
 559              	 .cfi_def_cfa_offset 8
 560              	 .cfi_offset 7,-8
 561              	 .cfi_offset 14,-4
 562 0002 82B0     	 sub sp,sp,#8
 563              	.LCFI40:
 564              	 .cfi_def_cfa_offset 16
 565 0004 00AF     	 add r7,sp,#0
 566              	.LCFI41:
 567              	 .cfi_def_cfa_register 7
 568 0006 0346     	 mov r3,r0
 569 0008 FB71     	 strb r3,[r7,#7]
 261:.././hal/sam3u1c/udphs_device.c **** 	if (!b_idle && udd_b_idle) {
 570              	 .loc 6 261 6
 571 000a FB79     	 ldrb r3,[r7,#7]
 572 000c 83F00103 	 eor r3,r3,#1
 573 0010 DBB2     	 uxtb r3,r3
 574              	 .loc 6 261 5
 575 0012 002B     	 cmp r3,#0
 576 0014 06D0     	 beq .L29
 577              	 .loc 6 261 14 discriminator 1
 578 0016 0D4B     	 ldr r3,.L31
 579 0018 1B78     	 ldrb r3,[r3]
 580 001a 002B     	 cmp r3,#0
 581 001c 02D0     	 beq .L29
 262:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("_S ");
 263:.././hal/sam3u1c/udphs_device.c **** 		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
 582              	 .loc 6 263 3
 583 001e 0220     	 movs r0,#2
 584 0020 0B4B     	 ldr r3,.L31+4
 585 0022 9847     	 blx r3
 586              	.LVL5:
 587              	.L29:
 264:.././hal/sam3u1c/udphs_device.c **** 	}
 265:.././hal/sam3u1c/udphs_device.c **** 	if (b_idle && !udd_b_idle) {
 588              	 .loc 6 265 5
 589 0024 FB79     	 ldrb r3,[r7,#7]
 590 0026 002B     	 cmp r3,#0
 591 0028 09D0     	 beq .L30
 592              	 .loc 6 265 16 discriminator 1
 593 002a 084B     	 ldr r3,.L31
 594 002c 1B78     	 ldrb r3,[r3]
 595 002e 83F00103 	 eor r3,r3,#1
 596 0032 DBB2     	 uxtb r3,r3
 597              	 .loc 6 265 13 discriminator 1
 598 0034 002B     	 cmp r3,#0
 599 0036 02D0     	 beq .L30
 266:.././hal/sam3u1c/udphs_device.c **** 		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
 600              	 .loc 6 266 3
 601 0038 0220     	 movs r0,#2
 602 003a 064B     	 ldr r3,.L31+8
 603 003c 9847     	 blx r3
 604              	.LVL6:
 605              	.L30:
 267:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("_W ");
 268:.././hal/sam3u1c/udphs_device.c **** 	}
 269:.././hal/sam3u1c/udphs_device.c **** 	udd_b_idle = b_idle;
 606              	 .loc 6 269 13
 607 003e 034A     	 ldr r2,.L31
 608 0040 FB79     	 ldrb r3,[r7,#7]
 609 0042 1370     	 strb r3,[r2]
 270:.././hal/sam3u1c/udphs_device.c **** }
 610              	 .loc 6 270 1
 611 0044 00BF     	 nop
 612 0046 0837     	 adds r7,r7,#8
 613              	.LCFI42:
 614              	 .cfi_def_cfa_offset 8
 615 0048 BD46     	 mov sp,r7
 616              	.LCFI43:
 617              	 .cfi_def_cfa_register 13
 618              	 
 619 004a 80BD     	 pop {r7,pc}
 620              	.L32:
 621              	 .align 2
 622              	.L31:
 623 004c 00000000 	 .word udd_b_idle
 624 0050 00000000 	 .word sleepmgr_unlock_mode
 625 0054 00000000 	 .word sleepmgr_lock_mode
 626              	 .cfi_endproc
 627              	.LFE138:
 629              	 .comm udd_g_ctrlreq,24,4
 630              	 .section .bss.udd_ep_control_state,"aw",%nobits
 633              	udd_ep_control_state:
 634 0000 00       	 .space 1
 635              	 .section .bss.udd_ctrl_prev_payload_buf_cnt,"aw",%nobits
 636              	 .align 1
 639              	udd_ctrl_prev_payload_buf_cnt:
 640 0000 0000     	 .space 2
 641              	 .section .bss.udd_ctrl_payload_buf_cnt,"aw",%nobits
 642              	 .align 1
 645              	udd_ctrl_payload_buf_cnt:
 646 0000 0000     	 .space 2
 647              	 .section .bss.udd_ep_job,"aw",%nobits
 648              	 .align 2
 651              	udd_ep_job:
 652 0000 00000000 	 .space 48
 652      00000000 
 652      00000000 
 652      00000000 
 652      00000000 
 653              	 .section .text.UDPHS_Handler,"ax",%progbits
 654              	 .align 1
 655              	 .global UDPHS_Handler
 656              	 .syntax unified
 657              	 .thumb
 658              	 .thumb_func
 659              	 .fpu softvfp
 661              	UDPHS_Handler:
 662              	.LFB139:
 271:.././hal/sam3u1c/udphs_device.c **** #else
 272:.././hal/sam3u1c/udphs_device.c **** 
 273:.././hal/sam3u1c/udphs_device.c **** static void udd_sleep_mode(bool b_idle)
 274:.././hal/sam3u1c/udphs_device.c **** {
 275:.././hal/sam3u1c/udphs_device.c **** 	UNUSED(b_idle);
 276:.././hal/sam3u1c/udphs_device.c **** }
 277:.././hal/sam3u1c/udphs_device.c **** 
 278:.././hal/sam3u1c/udphs_device.c **** #endif // UDD_NO_SLEEP_MGR
 279:.././hal/sam3u1c/udphs_device.c **** 
 280:.././hal/sam3u1c/udphs_device.c **** //@}
 281:.././hal/sam3u1c/udphs_device.c **** 
 282:.././hal/sam3u1c/udphs_device.c **** /**
 283:.././hal/sam3u1c/udphs_device.c ****  * \name VBus monitor routine
 284:.././hal/sam3u1c/udphs_device.c ****  */
 285:.././hal/sam3u1c/udphs_device.c **** //@{
 286:.././hal/sam3u1c/udphs_device.c **** 
 287:.././hal/sam3u1c/udphs_device.c **** #if UDD_VBUS_IO
 288:.././hal/sam3u1c/udphs_device.c **** 
 289:.././hal/sam3u1c/udphs_device.c **** # if !defined(UDD_NO_SLEEP_MGR) && !defined(USB_VBUS_WKUP)
 290:.././hal/sam3u1c/udphs_device.c **** /* Lock to SLEEPMGR_SLEEP_WFI if VBus not connected */
 291:.././hal/sam3u1c/udphs_device.c **** static bool b_vbus_sleep_lock = false;
 292:.././hal/sam3u1c/udphs_device.c **** /**
 293:.././hal/sam3u1c/udphs_device.c ****  * Lock sleep mode for VBus PIO pin change detection
 294:.././hal/sam3u1c/udphs_device.c ****  */
 295:.././hal/sam3u1c/udphs_device.c **** static void udd_vbus_monitor_sleep_mode(bool b_lock)
 296:.././hal/sam3u1c/udphs_device.c **** {
 297:.././hal/sam3u1c/udphs_device.c **** 	if (b_lock && !b_vbus_sleep_lock) {
 298:.././hal/sam3u1c/udphs_device.c **** 		b_vbus_sleep_lock = true;
 299:.././hal/sam3u1c/udphs_device.c **** 		sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
 300:.././hal/sam3u1c/udphs_device.c **** 	}
 301:.././hal/sam3u1c/udphs_device.c **** 	if (!b_lock && b_vbus_sleep_lock) {
 302:.././hal/sam3u1c/udphs_device.c **** 		b_vbus_sleep_lock = false;
 303:.././hal/sam3u1c/udphs_device.c **** 		sleepmgr_unlock_mode(SLEEPMGR_SLEEP_WFI);
 304:.././hal/sam3u1c/udphs_device.c **** 	}
 305:.././hal/sam3u1c/udphs_device.c **** }
 306:.././hal/sam3u1c/udphs_device.c **** # else
 307:.././hal/sam3u1c/udphs_device.c **** #  define udd_vbus_monitor_sleep_mode(lock)
 308:.././hal/sam3u1c/udphs_device.c **** # endif
 309:.././hal/sam3u1c/udphs_device.c **** 
 310:.././hal/sam3u1c/udphs_device.c **** /**
 311:.././hal/sam3u1c/udphs_device.c ****  * USB VBus pin change handler
 312:.././hal/sam3u1c/udphs_device.c ****  */
 313:.././hal/sam3u1c/udphs_device.c **** static void udd_vbus_handler(uint32_t id, uint32_t mask)
 314:.././hal/sam3u1c/udphs_device.c **** {
 315:.././hal/sam3u1c/udphs_device.c **** 	if (USB_VBUS_PIO_ID != id || USB_VBUS_PIO_MASK != mask) {
 316:.././hal/sam3u1c/udphs_device.c **** 		return;
 317:.././hal/sam3u1c/udphs_device.c **** 	}
 318:.././hal/sam3u1c/udphs_device.c **** 	/* PIO interrupt status has been cleared, just detect level */
 319:.././hal/sam3u1c/udphs_device.c **** 	bool b_vbus_high = Is_udd_vbus_high();
 320:.././hal/sam3u1c/udphs_device.c **** 	if (b_vbus_high) {
 321:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_vbus_interrupt(true);
 322:.././hal/sam3u1c/udphs_device.c **** 		udd_vbus_monitor_sleep_mode(false);
 323:.././hal/sam3u1c/udphs_device.c **** 		udd_attach();
 324:.././hal/sam3u1c/udphs_device.c **** 	} else {
 325:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_vbus_interrupt(false);
 326:.././hal/sam3u1c/udphs_device.c **** 		udd_vbus_monitor_sleep_mode(true);
 327:.././hal/sam3u1c/udphs_device.c **** 		udd_detach();
 328:.././hal/sam3u1c/udphs_device.c **** 	}
 329:.././hal/sam3u1c/udphs_device.c **** 	UDC_VBUS_EVENT(b_vbus_high);
 330:.././hal/sam3u1c/udphs_device.c **** }
 331:.././hal/sam3u1c/udphs_device.c **** 
 332:.././hal/sam3u1c/udphs_device.c **** #endif
 333:.././hal/sam3u1c/udphs_device.c **** 
 334:.././hal/sam3u1c/udphs_device.c **** //@}
 335:.././hal/sam3u1c/udphs_device.c **** 
 336:.././hal/sam3u1c/udphs_device.c **** /**
 337:.././hal/sam3u1c/udphs_device.c ****  * \name Control endpoint low level management routine.
 338:.././hal/sam3u1c/udphs_device.c ****  *
 339:.././hal/sam3u1c/udphs_device.c ****  * This function performs control endpoint management.
 340:.././hal/sam3u1c/udphs_device.c ****  * It handle the SETUP/DATA/HANDSHAKE phases of a control transaction.
 341:.././hal/sam3u1c/udphs_device.c ****  */
 342:.././hal/sam3u1c/udphs_device.c **** //@{
 343:.././hal/sam3u1c/udphs_device.c **** 
 344:.././hal/sam3u1c/udphs_device.c **** //! Global variable to give and record information about setup request management
 345:.././hal/sam3u1c/udphs_device.c **** COMPILER_WORD_ALIGNED udd_ctrl_request_t udd_g_ctrlreq;
 346:.././hal/sam3u1c/udphs_device.c **** 
 347:.././hal/sam3u1c/udphs_device.c **** //! Bit definitions about endpoint control state machine for udd_ep_control_state
 348:.././hal/sam3u1c/udphs_device.c **** typedef enum {
 349:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_SETUP                  = 0, //!< Wait a SETUP packet
 350:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_DATA_OUT               = 1, //!< Wait a OUT data packet
 351:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_DATA_IN                = 2, //!< Wait a IN data packet
 352:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP  = 3, //!< Wait a IN ZLP packet
 353:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP = 4, //!< Wait a OUT ZLP packet
 354:.././hal/sam3u1c/udphs_device.c **** 	UDD_EPCTRL_STALL_REQ              = 5, //!< STALL enabled on IN & OUT packet
 355:.././hal/sam3u1c/udphs_device.c **** } udd_ctrl_ep_state_t;
 356:.././hal/sam3u1c/udphs_device.c **** 
 357:.././hal/sam3u1c/udphs_device.c **** //! State of the endpoint control management
 358:.././hal/sam3u1c/udphs_device.c **** static udd_ctrl_ep_state_t udd_ep_control_state;
 359:.././hal/sam3u1c/udphs_device.c **** 
 360:.././hal/sam3u1c/udphs_device.c **** //! Total number of data received/sent during data packet phase with previous payload buffers
 361:.././hal/sam3u1c/udphs_device.c **** static uint16_t udd_ctrl_prev_payload_buf_cnt;
 362:.././hal/sam3u1c/udphs_device.c **** 
 363:.././hal/sam3u1c/udphs_device.c **** //! Number of data received/sent to/from udd_g_ctrlreq.payload buffer
 364:.././hal/sam3u1c/udphs_device.c **** static uint16_t udd_ctrl_payload_buf_cnt;
 365:.././hal/sam3u1c/udphs_device.c **** 
 366:.././hal/sam3u1c/udphs_device.c **** /**
 367:.././hal/sam3u1c/udphs_device.c ****  * \brief Reset control endpoint
 368:.././hal/sam3u1c/udphs_device.c ****  *
 369:.././hal/sam3u1c/udphs_device.c ****  * Called after a USB line reset or when UDD is enabled
 370:.././hal/sam3u1c/udphs_device.c ****  */
 371:.././hal/sam3u1c/udphs_device.c **** static void udd_reset_ep_ctrl(void);
 372:.././hal/sam3u1c/udphs_device.c **** 
 373:.././hal/sam3u1c/udphs_device.c **** /**
 374:.././hal/sam3u1c/udphs_device.c ****  * \brief Reset control endpoint management
 375:.././hal/sam3u1c/udphs_device.c ****  *
 376:.././hal/sam3u1c/udphs_device.c ****  * Called after a USB line reset or at the end of SETUP request (after ZLP)
 377:.././hal/sam3u1c/udphs_device.c ****  */
 378:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_init(void);
 379:.././hal/sam3u1c/udphs_device.c **** 
 380:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed reception of SETUP packet on control endpoint
 381:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_setup_received(void);
 382:.././hal/sam3u1c/udphs_device.c **** 
 383:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed reception of IN packet on control endpoint
 384:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_in_sent(void);
 385:.././hal/sam3u1c/udphs_device.c **** 
 386:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed reception of OUT packet on control endpoint
 387:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_out_received(void);
 388:.././hal/sam3u1c/udphs_device.c **** 
 389:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed underflow event of IN packet on control endpoint
 390:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_underflow(void);
 391:.././hal/sam3u1c/udphs_device.c **** 
 392:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed overflow event of OUT packet on control endpoint
 393:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_overflow(void);
 394:.././hal/sam3u1c/udphs_device.c **** 
 395:.././hal/sam3u1c/udphs_device.c **** //! \brief Managed stall event of IN/OUT packet on control endpoint
 396:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_stall_data(void);
 397:.././hal/sam3u1c/udphs_device.c **** 
 398:.././hal/sam3u1c/udphs_device.c **** //! \brief Send a ZLP IN on control endpoint
 399:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_send_zlp_in(void);
 400:.././hal/sam3u1c/udphs_device.c **** 
 401:.././hal/sam3u1c/udphs_device.c **** //! \brief Send a ZLP OUT on control endpoint
 402:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_send_zlp_out(void);
 403:.././hal/sam3u1c/udphs_device.c **** 
 404:.././hal/sam3u1c/udphs_device.c **** //! \brief Call callback associated to setup request
 405:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_endofrequest(void);
 406:.././hal/sam3u1c/udphs_device.c **** 
 407:.././hal/sam3u1c/udphs_device.c **** 
 408:.././hal/sam3u1c/udphs_device.c **** /**
 409:.././hal/sam3u1c/udphs_device.c ****  * \brief Main interrupt routine for control endpoint
 410:.././hal/sam3u1c/udphs_device.c ****  *
 411:.././hal/sam3u1c/udphs_device.c ****  * This switches control endpoint events to correct sub function.
 412:.././hal/sam3u1c/udphs_device.c ****  *
 413:.././hal/sam3u1c/udphs_device.c ****  * \return \c 1 if an event about control endpoint is occurred, otherwise \c 0.
 414:.././hal/sam3u1c/udphs_device.c ****  */
 415:.././hal/sam3u1c/udphs_device.c **** static bool udd_ctrl_interrupt(void);
 416:.././hal/sam3u1c/udphs_device.c **** 
 417:.././hal/sam3u1c/udphs_device.c **** //@}
 418:.././hal/sam3u1c/udphs_device.c **** 
 419:.././hal/sam3u1c/udphs_device.c **** 
 420:.././hal/sam3u1c/udphs_device.c **** /**
 421:.././hal/sam3u1c/udphs_device.c ****  * \name Management of bulk/interrupt/isochronous endpoints
 422:.././hal/sam3u1c/udphs_device.c ****  *
 423:.././hal/sam3u1c/udphs_device.c ****  * The UDD manages the data transfer on endpoints:
 424:.././hal/sam3u1c/udphs_device.c ****  * - Start data transfer on endpoint with USB Device DMA
 425:.././hal/sam3u1c/udphs_device.c ****  * - Send a ZLP packet if requested
 426:.././hal/sam3u1c/udphs_device.c ****  * - Call callback registered to signal end of transfer
 427:.././hal/sam3u1c/udphs_device.c ****  * The transfer abort and stall feature are supported.
 428:.././hal/sam3u1c/udphs_device.c ****  */
 429:.././hal/sam3u1c/udphs_device.c **** //@{
 430:.././hal/sam3u1c/udphs_device.c **** #if (0!=USB_DEVICE_MAX_EP)
 431:.././hal/sam3u1c/udphs_device.c **** 
 432:.././hal/sam3u1c/udphs_device.c **** //! Structure definition about job registered on an endpoint
 433:.././hal/sam3u1c/udphs_device.c **** typedef struct {
 434:.././hal/sam3u1c/udphs_device.c **** 	union {
 435:.././hal/sam3u1c/udphs_device.c **** 		//! Callback to call at the end of transfer
 436:.././hal/sam3u1c/udphs_device.c **** 		udd_callback_trans_t call_trans;
 437:.././hal/sam3u1c/udphs_device.c **** 
 438:.././hal/sam3u1c/udphs_device.c **** 		//! Callback to call when the endpoint halt is cleared
 439:.././hal/sam3u1c/udphs_device.c **** 		udd_callback_halt_cleared_t call_nohalt;
 440:.././hal/sam3u1c/udphs_device.c **** 	};
 441:.././hal/sam3u1c/udphs_device.c **** 	//! Buffer located in internal RAM to send or fill during job
 442:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *buf;
 443:.././hal/sam3u1c/udphs_device.c **** 	//! Size of buffer to send or fill
 444:.././hal/sam3u1c/udphs_device.c **** 	iram_size_t buf_size;
 445:.././hal/sam3u1c/udphs_device.c **** 	//!< Size of data transfered
 446:.././hal/sam3u1c/udphs_device.c **** 	iram_size_t buf_cnt;
 447:.././hal/sam3u1c/udphs_device.c **** 	//!< Size of data prepared for DMA last time
 448:.././hal/sam3u1c/udphs_device.c **** 	iram_size_t buf_load;
 449:.././hal/sam3u1c/udphs_device.c **** 	//! A job is registered on this endpoint
 450:.././hal/sam3u1c/udphs_device.c **** 	uint8_t busy:1;
 451:.././hal/sam3u1c/udphs_device.c **** 	//! A short packet is requested for this job on endpoint IN
 452:.././hal/sam3u1c/udphs_device.c **** 	uint8_t b_shortpacket:1;
 453:.././hal/sam3u1c/udphs_device.c **** 	//! A stall has been requested but not executed
 454:.././hal/sam3u1c/udphs_device.c **** 	uint8_t stall_requested:1;
 455:.././hal/sam3u1c/udphs_device.c **** } udd_ep_job_t;
 456:.././hal/sam3u1c/udphs_device.c **** 
 457:.././hal/sam3u1c/udphs_device.c **** 
 458:.././hal/sam3u1c/udphs_device.c **** //! Array to register a job on bulk/interrupt/isochronous endpoint
 459:.././hal/sam3u1c/udphs_device.c **** static udd_ep_job_t udd_ep_job[USB_DEVICE_MAX_EP];
 460:.././hal/sam3u1c/udphs_device.c **** 
 461:.././hal/sam3u1c/udphs_device.c **** //! \brief Reset all job table
 462:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_job_table_reset(void);
 463:.././hal/sam3u1c/udphs_device.c **** 
 464:.././hal/sam3u1c/udphs_device.c **** //! \brief Abort all endpoint jobs on going
 465:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_job_table_kill(void);
 466:.././hal/sam3u1c/udphs_device.c **** 
 467:.././hal/sam3u1c/udphs_device.c **** /**
 468:.././hal/sam3u1c/udphs_device.c ****  * \brief Abort endpoint job on going
 469:.././hal/sam3u1c/udphs_device.c ****  *
 470:.././hal/sam3u1c/udphs_device.c ****  * \param ep         endpoint number of job to abort
 471:.././hal/sam3u1c/udphs_device.c ****  */
 472:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_abort_job(udd_ep_id_t ep);
 473:.././hal/sam3u1c/udphs_device.c **** 
 474:.././hal/sam3u1c/udphs_device.c **** /**
 475:.././hal/sam3u1c/udphs_device.c ****  * \brief Call the callback associated to the job which is finished
 476:.././hal/sam3u1c/udphs_device.c ****  *
 477:.././hal/sam3u1c/udphs_device.c ****  * \param ptr_job  job to complete
 478:.././hal/sam3u1c/udphs_device.c ****  * \param b_abort  if true then the job has been aborted
 479:.././hal/sam3u1c/udphs_device.c ****  */
 480:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num);
 481:.././hal/sam3u1c/udphs_device.c **** 
 482:.././hal/sam3u1c/udphs_device.c **** /**
 483:.././hal/sam3u1c/udphs_device.c ****  * \brief Start the next transfer if necessary or complete the job associated.
 484:.././hal/sam3u1c/udphs_device.c ****  *
 485:.././hal/sam3u1c/udphs_device.c ****  * \param ep         endpoint number without direction flag
 486:.././hal/sam3u1c/udphs_device.c ****  */
 487:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_trans_done(udd_ep_id_t ep);
 488:.././hal/sam3u1c/udphs_device.c **** 
 489:.././hal/sam3u1c/udphs_device.c **** /**
 490:.././hal/sam3u1c/udphs_device.c ****  * \brief Main interrupt routine for bulk/interrupt/isochronous endpoints
 491:.././hal/sam3u1c/udphs_device.c ****  *
 492:.././hal/sam3u1c/udphs_device.c ****  * This switches endpoint events to correct sub function.
 493:.././hal/sam3u1c/udphs_device.c ****  *
 494:.././hal/sam3u1c/udphs_device.c ****  * \return \c 1 if an event about bulk/interrupt/isochronous endpoints has occurred, otherwise \c 0
 495:.././hal/sam3u1c/udphs_device.c ****  */
 496:.././hal/sam3u1c/udphs_device.c **** static bool udd_ep_interrupt(void);
 497:.././hal/sam3u1c/udphs_device.c **** 
 498:.././hal/sam3u1c/udphs_device.c **** #endif // (0!=USB_DEVICE_MAX_EP)
 499:.././hal/sam3u1c/udphs_device.c **** //@}
 500:.././hal/sam3u1c/udphs_device.c **** 
 501:.././hal/sam3u1c/udphs_device.c **** 
 502:.././hal/sam3u1c/udphs_device.c **** //--------------------------------------------------------
 503:.././hal/sam3u1c/udphs_device.c **** //--- INTERNAL ROUTINES TO MANAGED GLOBAL EVENTS
 504:.././hal/sam3u1c/udphs_device.c **** /**
 505:.././hal/sam3u1c/udphs_device.c ****  * \internal
 506:.././hal/sam3u1c/udphs_device.c ****  * \brief Function called by UDPHS interrupt to manage USB Device interrupts
 507:.././hal/sam3u1c/udphs_device.c ****  *
 508:.././hal/sam3u1c/udphs_device.c ****  * USB Device interrupt events are split in three parts:
 509:.././hal/sam3u1c/udphs_device.c ****  * - USB line events (SOF, reset, suspend, resume, wakeup)
 510:.././hal/sam3u1c/udphs_device.c ****  * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 511:.././hal/sam3u1c/udphs_device.c ****  * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 512:.././hal/sam3u1c/udphs_device.c ****  *
 513:.././hal/sam3u1c/udphs_device.c ****  * Note:
 514:.././hal/sam3u1c/udphs_device.c ****  * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 515:.././hal/sam3u1c/udphs_device.c ****  * because this one can not be occurred during the USB ISR (=during INTX is masked).
 516:.././hal/sam3u1c/udphs_device.c ****  * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 517:.././hal/sam3u1c/udphs_device.c ****  */
 518:.././hal/sam3u1c/udphs_device.c **** ISR(UDD_USB_INT_FUN)
 519:.././hal/sam3u1c/udphs_device.c **** {
 663              	 .loc 6 519 1
 664              	 .cfi_startproc
 665              	 
 666              	 
 667 0000 80B5     	 push {r7,lr}
 668              	.LCFI44:
 669              	 .cfi_def_cfa_offset 8
 670              	 .cfi_offset 7,-8
 671              	 .cfi_offset 14,-4
 672 0002 00AF     	 add r7,sp,#0
 673              	.LCFI45:
 674              	 .cfi_def_cfa_register 7
 520:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph_ck();
 675              	 .loc 6 520 2
 676 0004 1D20     	 movs r0,#29
 677 0006 5F4B     	 ldr r3,.L49
 678 0008 9847     	 blx r3
 679              	.LVL7:
 521:.././hal/sam3u1c/udphs_device.c **** 
 522:.././hal/sam3u1c/udphs_device.c **** 	/* For fast wakeup clocks restore
 523:.././hal/sam3u1c/udphs_device.c **** 	 * In WAIT mode, clocks are switched to FASTRC.
 524:.././hal/sam3u1c/udphs_device.c **** 	 * After wakeup clocks should be restored, before that ISR should not
 525:.././hal/sam3u1c/udphs_device.c **** 	 * be served.
 526:.././hal/sam3u1c/udphs_device.c **** 	 */
 527:.././hal/sam3u1c/udphs_device.c **** 	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
 680              	 .loc 6 527 7
 681 000a 5F4B     	 ldr r3,.L49+4
 682 000c 9847     	 blx r3
 683              	.LVL8:
 684 000e 0346     	 mov r3,r0
 685              	 .loc 6 527 6
 686 0010 83F00103 	 eor r3,r3,#1
 687 0014 DBB2     	 uxtb r3,r3
 688              	 .loc 6 527 5
 689 0016 002B     	 cmp r3,#0
 690 0018 0ED0     	 beq .L34
 691              	 .loc 6 527 43 discriminator 1
 692 001a 5C4B     	 ldr r3,.L49+8
 693 001c 5B69     	 ldr r3,[r3,#20]
 694 001e 03F00203 	 and r3,r3,#2
 695              	 .loc 6 527 39 discriminator 1
 696 0022 002B     	 cmp r3,#0
 697 0024 08D1     	 bne .L34
 698              	.LBB26:
 699              	.LBB27:
 328:.././hal/sam3u1c/inc/core_cmFunc.h **** }
 700              	 .loc 3 328 3
 701              	 .syntax unified
 702              	
 703 0026 72B6     	 cpsid i
 704              	
 329:.././hal/sam3u1c/inc/core_cmFunc.h **** 
 705              	 .loc 3 329 1
 706              	 .thumb
 707              	 .syntax unified
 708 0028 00BF     	 nop
 709              	.LBE27:
 710              	.LBE26:
 711              	.LBB28:
 712              	.LBB29:
 354:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 713              	 .loc 4 354 3
 714              	 .syntax unified
 715              	
 716 002a BFF35F8F 	 dmb
 717              	
 718              	 .loc 4 355 1
 719              	 .thumb
 720              	 .syntax unified
 721 002e 00BF     	 nop
 722              	.LBE29:
 723              	.LBE28:
 528:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_disable();
 724              	 .loc 6 528 3
 725 0030 574B     	 ldr r3,.L49+12
 726 0032 0022     	 movs r2,#0
 727 0034 1A70     	 strb r2,[r3]
 529:.././hal/sam3u1c/udphs_device.c **** 		return;
 728              	 .loc 6 529 3
 729 0036 A4E0     	 b .L33
 730              	.L34:
 530:.././hal/sam3u1c/udphs_device.c **** 	}
 531:.././hal/sam3u1c/udphs_device.c **** 
 532:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_sof()) {
 731              	 .loc 6 532 6
 732 0038 544B     	 ldr r3,.L49+8
 733 003a 5B69     	 ldr r3,[r3,#20]
 734 003c 03F00803 	 and r3,r3,#8
 735              	 .loc 6 532 5
 736 0040 002B     	 cmp r3,#0
 737 0042 0DD0     	 beq .L36
 533:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_sof();
 738              	 .loc 6 533 3
 739 0044 514B     	 ldr r3,.L49+8
 740 0046 0822     	 movs r2,#8
 741 0048 9A61     	 str r2,[r3,#24]
 534:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_full_speed_mode()) {
 742              	 .loc 6 534 7
 743 004a 504B     	 ldr r3,.L49+8
 744 004c 5B69     	 ldr r3,[r3,#20]
 745 004e 03F00103 	 and r3,r3,#1
 746              	 .loc 6 534 6
 747 0052 002B     	 cmp r3,#0
 748 0054 01D1     	 bne .L37
 535:.././hal/sam3u1c/udphs_device.c **** 			udc_sof_notify();
 749              	 .loc 6 535 4
 750 0056 4F4B     	 ldr r3,.L49+16
 751 0058 9847     	 blx r3
 752              	.LVL9:
 753              	.L37:
 536:.././hal/sam3u1c/udphs_device.c **** 		}
 537:.././hal/sam3u1c/udphs_device.c **** #ifdef UDC_SOF_EVENT
 538:.././hal/sam3u1c/udphs_device.c **** 		UDC_SOF_EVENT();
 754              	 .loc 6 538 3
 755 005a 4F4B     	 ldr r3,.L49+20
 756 005c 9847     	 blx r3
 757              	.LVL10:
 539:.././hal/sam3u1c/udphs_device.c **** #endif
 540:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_sof_end;
 758              	 .loc 6 540 3
 759 005e 8FE0     	 b .L44
 760              	.L36:
 541:.././hal/sam3u1c/udphs_device.c **** 	}
 542:.././hal/sam3u1c/udphs_device.c **** 
 543:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_msof()) {
 761              	 .loc 6 543 6
 762 0060 4A4B     	 ldr r3,.L49+8
 763 0062 5B69     	 ldr r3,[r3,#20]
 764 0064 03F00403 	 and r3,r3,#4
 765              	 .loc 6 543 5
 766 0068 002B     	 cmp r3,#0
 767 006a 05D0     	 beq .L39
 544:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_msof();
 768              	 .loc 6 544 3
 769 006c 474B     	 ldr r3,.L49+8
 770 006e 0422     	 movs r2,#4
 771 0070 9A61     	 str r2,[r3,#24]
 545:.././hal/sam3u1c/udphs_device.c **** 		udc_sof_notify();
 772              	 .loc 6 545 3
 773 0072 484B     	 ldr r3,.L49+16
 774 0074 9847     	 blx r3
 775              	.LVL11:
 546:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_sof_end;
 776              	 .loc 6 546 3
 777 0076 83E0     	 b .L44
 778              	.L39:
 547:.././hal/sam3u1c/udphs_device.c **** 	}
 548:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');
 549:.././hal/sam3u1c/udphs_device.c **** 
 550:.././hal/sam3u1c/udphs_device.c **** 	if (udd_ctrl_interrupt()) {
 779              	 .loc 6 550 6
 780 0078 484B     	 ldr r3,.L49+24
 781 007a 9847     	 blx r3
 782              	.LVL12:
 783 007c 0346     	 mov r3,r0
 784              	 .loc 6 550 5
 785 007e 002B     	 cmp r3,#0
 786 0080 79D1     	 bne .L45
 551:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
 552:.././hal/sam3u1c/udphs_device.c **** 	}
 553:.././hal/sam3u1c/udphs_device.c **** 
 554:.././hal/sam3u1c/udphs_device.c **** #if (0 != USB_DEVICE_MAX_EP)
 555:.././hal/sam3u1c/udphs_device.c **** 	if (udd_ep_interrupt()) {
 787              	 .loc 6 555 6
 788 0082 474B     	 ldr r3,.L49+28
 789 0084 9847     	 blx r3
 790              	.LVL13:
 791 0086 0346     	 mov r3,r0
 792              	 .loc 6 555 5
 793 0088 002B     	 cmp r3,#0
 794 008a 76D1     	 bne .L46
 556:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
 557:.././hal/sam3u1c/udphs_device.c **** 	}
 558:.././hal/sam3u1c/udphs_device.c **** #endif
 559:.././hal/sam3u1c/udphs_device.c **** 
 560:.././hal/sam3u1c/udphs_device.c **** 	// USB bus reset detection
 561:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_reset()) {
 795              	 .loc 6 561 6
 796 008c 3F4B     	 ldr r3,.L49+8
 797 008e 5B69     	 ldr r3,[r3,#20]
 798 0090 03F01003 	 and r3,r3,#16
 799              	 .loc 6 561 5
 800 0094 002B     	 cmp r3,#0
 801 0096 1DD0     	 beq .L42
 562:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("EoR ");
 563:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_reset();
 802              	 .loc 6 563 3
 803 0098 3C4B     	 ldr r3,.L49+8
 804 009a 1022     	 movs r2,#16
 805 009c 9A61     	 str r2,[r3,#24]
 564:.././hal/sam3u1c/udphs_device.c **** 		// Abort all jobs on-going
 565:.././hal/sam3u1c/udphs_device.c **** #if (USB_DEVICE_MAX_EP != 0)
 566:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job_table_kill();
 806              	 .loc 6 566 3
 807 009e 414B     	 ldr r3,.L49+32
 808 00a0 9847     	 blx r3
 809              	.LVL14:
 567:.././hal/sam3u1c/udphs_device.c **** #endif
 568:.././hal/sam3u1c/udphs_device.c **** 		// Reset USB Device Stack Core
 569:.././hal/sam3u1c/udphs_device.c **** 		udc_reset();
 810              	 .loc 6 569 3
 811 00a2 414B     	 ldr r3,.L49+36
 812 00a4 9847     	 blx r3
 813              	.LVL15:
 570:.././hal/sam3u1c/udphs_device.c **** 		// Reset endpoint control
 571:.././hal/sam3u1c/udphs_device.c **** 		udd_reset_ep_ctrl();
 814              	 .loc 6 571 3
 815 00a6 414B     	 ldr r3,.L49+40
 816 00a8 9847     	 blx r3
 817              	.LVL16:
 572:.././hal/sam3u1c/udphs_device.c **** 		// Reset endpoint control management
 573:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_init();
 818              	 .loc 6 573 3
 819 00aa 414B     	 ldr r3,.L49+44
 820 00ac 9847     	 blx r3
 821              	.LVL17:
 574:.././hal/sam3u1c/udphs_device.c **** 		// Enable SOF interrupts cleared by USB reset event
 575:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_sof_interrupt();
 822              	 .loc 6 575 3
 823 00ae 374B     	 ldr r3,.L49+8
 824 00b0 1B69     	 ldr r3,[r3,#16]
 825 00b2 364A     	 ldr r2,.L49+8
 826 00b4 43F00803 	 orr r3,r3,#8
 827 00b8 1361     	 str r3,[r2,#16]
 576:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_msof_interrupt();
 828              	 .loc 6 576 3
 829 00ba 344B     	 ldr r3,.L49+8
 830 00bc 1B69     	 ldr r3,[r3,#16]
 831 00be 334A     	 ldr r2,.L49+8
 832 00c0 43F00403 	 orr r3,r3,#4
 833 00c4 1361     	 str r3,[r2,#16]
 577:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_suspend_interrupt();
 834              	 .loc 6 577 3
 835 00c6 314B     	 ldr r3,.L49+8
 836 00c8 1B69     	 ldr r3,[r3,#16]
 837 00ca 304A     	 ldr r2,.L49+8
 838 00cc 43F00203 	 orr r3,r3,#2
 839 00d0 1361     	 str r3,[r2,#16]
 578:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end;
 840              	 .loc 6 578 3
 841 00d2 55E0     	 b .L44
 842              	.L42:
 579:.././hal/sam3u1c/udphs_device.c **** 	}
 580:.././hal/sam3u1c/udphs_device.c **** 
 581:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
 843              	 .loc 6 581 6
 844 00d4 2D4B     	 ldr r3,.L49+8
 845 00d6 1B69     	 ldr r3,[r3,#16]
 846 00d8 03F00203 	 and r3,r3,#2
 847              	 .loc 6 581 5
 848 00dc 002B     	 cmp r3,#0
 849 00de 20D0     	 beq .L43
 850              	 .loc 6 581 44 discriminator 1
 851 00e0 2A4B     	 ldr r3,.L49+8
 852 00e2 5B69     	 ldr r3,[r3,#20]
 853 00e4 03F00203 	 and r3,r3,#2
 854              	 .loc 6 581 41 discriminator 1
 855 00e8 002B     	 cmp r3,#0
 856 00ea 1AD0     	 beq .L43
 582:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Susp ");
 583:.././hal/sam3u1c/udphs_device.c **** 		// Remove old wakeup status
 584:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_wake_up();
 857              	 .loc 6 584 3
 858 00ec 274B     	 ldr r3,.L49+8
 859 00ee 2022     	 movs r2,#32
 860 00f0 9A61     	 str r2,[r3,#24]
 585:.././hal/sam3u1c/udphs_device.c **** 		// The suspend interrupt is automatic acked when a wakeup occur
 586:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_suspend_interrupt();
 861              	 .loc 6 586 3
 862 00f2 264B     	 ldr r3,.L49+8
 863 00f4 1B69     	 ldr r3,[r3,#16]
 864 00f6 254A     	 ldr r2,.L49+8
 865 00f8 23F00203 	 bic r3,r3,#2
 866 00fc 1361     	 str r3,[r2,#16]
 587:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_wake_up_interrupt();
 867              	 .loc 6 587 3
 868 00fe 234B     	 ldr r3,.L49+8
 869 0100 1B69     	 ldr r3,[r3,#16]
 870 0102 224A     	 ldr r2,.L49+8
 871 0104 43F02003 	 orr r3,r3,#32
 872 0108 1361     	 str r3,[r2,#16]
 588:.././hal/sam3u1c/udphs_device.c **** 
 589:.././hal/sam3u1c/udphs_device.c **** 		// The wakeup interrupt is generated even if the device controller clock is disabled.
 590:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_suspend();
 873              	 .loc 6 590 3
 874 010a 204B     	 ldr r3,.L49+8
 875 010c 0222     	 movs r2,#2
 876 010e 9A61     	 str r2,[r3,#24]
 591:.././hal/sam3u1c/udphs_device.c **** 
 592:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_periph_ck();
 877              	 .loc 6 592 3
 878 0110 1D20     	 movs r0,#29
 879 0112 284B     	 ldr r3,.L49+48
 880 0114 9847     	 blx r3
 881              	.LVL18:
 593:.././hal/sam3u1c/udphs_device.c **** 
 594:.././hal/sam3u1c/udphs_device.c **** #ifdef UDC_SUSPEND_EVENT
 595:.././hal/sam3u1c/udphs_device.c **** 		UDC_SUSPEND_EVENT();
 882              	 .loc 6 595 3
 883 0116 284B     	 ldr r3,.L49+52
 884 0118 9847     	 blx r3
 885              	.LVL19:
 596:.././hal/sam3u1c/udphs_device.c **** #endif
 597:.././hal/sam3u1c/udphs_device.c **** 		udd_sleep_mode(false); // Enter in SUSPEND mode
 886              	 .loc 6 597 3
 887 011a 0020     	 movs r0,#0
 888 011c 274B     	 ldr r3,.L49+56
 889 011e 9847     	 blx r3
 890              	.LVL20:
 598:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end;
 891              	 .loc 6 598 3
 892 0120 2EE0     	 b .L44
 893              	.L43:
 599:.././hal/sam3u1c/udphs_device.c **** 	}
 600:.././hal/sam3u1c/udphs_device.c **** 
 601:.././hal/sam3u1c/udphs_device.c **** 	// On wakeup, _IEN is reseted only with EoR enabled
 602:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_wake_up()) {
 894              	 .loc 6 602 6
 895 0122 1A4B     	 ldr r3,.L49+8
 896 0124 5B69     	 ldr r3,[r3,#20]
 897 0126 03F02003 	 and r3,r3,#32
 898              	 .loc 6 602 5
 899 012a 002B     	 cmp r3,#0
 900 012c 27D0     	 beq .L47
 603:.././hal/sam3u1c/udphs_device.c **** 		udd_sleep_mode(true); // Enter in IDLE mode
 901              	 .loc 6 603 3
 902 012e 0120     	 movs r0,#1
 903 0130 224B     	 ldr r3,.L49+56
 904 0132 9847     	 blx r3
 905              	.LVL21:
 604:.././hal/sam3u1c/udphs_device.c **** 		// Remove old suspend status
 605:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_suspend();
 906              	 .loc 6 605 3
 907 0134 154B     	 ldr r3,.L49+8
 908 0136 0222     	 movs r2,#2
 909 0138 9A61     	 str r2,[r3,#24]
 606:.././hal/sam3u1c/udphs_device.c **** 		// Ack wakeup interrupt and enable suspend interrupt
 607:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_wake_up();
 910              	 .loc 6 607 3
 911 013a 144B     	 ldr r3,.L49+8
 912 013c 2022     	 movs r2,#32
 913 013e 9A61     	 str r2,[r3,#24]
 608:.././hal/sam3u1c/udphs_device.c **** 		// Ack wakeup interrupt and enable suspend interrupt
 609:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_wake_up_interrupt();
 914              	 .loc 6 609 3
 915 0140 124B     	 ldr r3,.L49+8
 916 0142 1B69     	 ldr r3,[r3,#16]
 917 0144 114A     	 ldr r2,.L49+8
 918 0146 23F02003 	 bic r3,r3,#32
 919 014a 1361     	 str r3,[r2,#16]
 610:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_suspend_interrupt();
 920              	 .loc 6 610 3
 921 014c 0F4B     	 ldr r3,.L49+8
 922 014e 1B69     	 ldr r3,[r3,#16]
 923 0150 0E4A     	 ldr r2,.L49+8
 924 0152 43F00203 	 orr r3,r3,#2
 925 0156 1361     	 str r3,[r2,#16]
 611:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_sof_interrupt();
 926              	 .loc 6 611 3
 927 0158 0C4B     	 ldr r3,.L49+8
 928 015a 1B69     	 ldr r3,[r3,#16]
 929 015c 0B4A     	 ldr r2,.L49+8
 930 015e 43F00803 	 orr r3,r3,#8
 931 0162 1361     	 str r3,[r2,#16]
 612:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_msof_interrupt();
 932              	 .loc 6 612 3
 933 0164 094B     	 ldr r3,.L49+8
 934 0166 1B69     	 ldr r3,[r3,#16]
 935 0168 084A     	 ldr r2,.L49+8
 936 016a 43F00403 	 orr r3,r3,#4
 937 016e 1361     	 str r3,[r2,#16]
 613:.././hal/sam3u1c/udphs_device.c **** 
 614:.././hal/sam3u1c/udphs_device.c **** #ifdef UDC_RESUME_EVENT
 615:.././hal/sam3u1c/udphs_device.c **** 		UDC_RESUME_EVENT();
 938              	 .loc 6 615 3
 939 0170 134B     	 ldr r3,.L49+60
 940 0172 9847     	 blx r3
 941              	.LVL22:
 616:.././hal/sam3u1c/udphs_device.c **** #endif
 617:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Wkup ");
 618:.././hal/sam3u1c/udphs_device.c **** 		goto udd_interrupt_end;
 942              	 .loc 6 618 3
 943 0174 04E0     	 b .L44
 944              	.L38:
 945              	.L45:
 551:.././hal/sam3u1c/udphs_device.c **** 	}
 946              	 .loc 6 551 3
 947 0176 00BF     	 nop
 948 0178 02E0     	 b .L48
 949              	.L46:
 556:.././hal/sam3u1c/udphs_device.c **** 	}
 950              	 .loc 6 556 3
 951 017a 00BF     	 nop
 952 017c 00E0     	 b .L48
 953              	.L47:
 619:.././hal/sam3u1c/udphs_device.c **** 	}
 620:.././hal/sam3u1c/udphs_device.c **** 	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
 621:.././hal/sam3u1c/udphs_device.c **** 
 622:.././hal/sam3u1c/udphs_device.c **** udd_interrupt_end:
 954              	 .loc 6 622 1
 955 017e 00BF     	 nop
 956              	.L44:
 957              	.L48:
 623:.././hal/sam3u1c/udphs_device.c **** 	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
 624:.././hal/sam3u1c/udphs_device.c **** 	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
 625:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("\n\r");
 626:.././hal/sam3u1c/udphs_device.c **** udd_interrupt_sof_end:
 627:.././hal/sam3u1c/udphs_device.c **** 	return;
 958              	 .loc 6 627 2
 959 0180 00BF     	 nop
 960              	.L33:
 628:.././hal/sam3u1c/udphs_device.c **** }
 961              	 .loc 6 628 1
 962 0182 80BD     	 pop {r7,pc}
 963              	.L50:
 964              	 .align 2
 965              	.L49:
 966 0184 00000000 	 .word pmc_enable_periph_clk
 967 0188 00000000 	 .word pmc_is_wakeup_clocks_restored
 968 018c 00400A40 	 .word 1074413568
 969 0190 00000000 	 .word g_interrupt_enabled
 970 0194 00000000 	 .word udc_sof_notify
 971 0198 00000000 	 .word main_sof_action
 972 019c 00000000 	 .word udd_ctrl_interrupt
 973 01a0 00000000 	 .word udd_ep_interrupt
 974 01a4 00000000 	 .word udd_ep_job_table_kill
 975 01a8 00000000 	 .word udc_reset
 976 01ac 00000000 	 .word udd_reset_ep_ctrl
 977 01b0 00000000 	 .word udd_ctrl_init
 978 01b4 00000000 	 .word pmc_disable_periph_clk
 979 01b8 00000000 	 .word main_suspend_action
 980 01bc 00000000 	 .word udd_sleep_mode
 981 01c0 00000000 	 .word main_resume_action
 982              	 .cfi_endproc
 983              	.LFE139:
 985              	 .section .text.udd_include_vbus_monitoring,"ax",%progbits
 986              	 .align 1
 987              	 .global udd_include_vbus_monitoring
 988              	 .syntax unified
 989              	 .thumb
 990              	 .thumb_func
 991              	 .fpu softvfp
 993              	udd_include_vbus_monitoring:
 994              	.LFB140:
 629:.././hal/sam3u1c/udphs_device.c **** 
 630:.././hal/sam3u1c/udphs_device.c **** 
 631:.././hal/sam3u1c/udphs_device.c **** bool udd_include_vbus_monitoring(void)
 632:.././hal/sam3u1c/udphs_device.c **** {
 995              	 .loc 6 632 1
 996              	 .cfi_startproc
 997              	 
 998              	 
 999              	 
 1000 0000 80B4     	 push {r7}
 1001              	.LCFI46:
 1002              	 .cfi_def_cfa_offset 4
 1003              	 .cfi_offset 7,-4
 1004 0002 00AF     	 add r7,sp,#0
 1005              	.LCFI47:
 1006              	 .cfi_def_cfa_register 7
 633:.././hal/sam3u1c/udphs_device.c **** #if UDD_VBUS_IO
 634:.././hal/sam3u1c/udphs_device.c **** 	return true;
 635:.././hal/sam3u1c/udphs_device.c **** #else
 636:.././hal/sam3u1c/udphs_device.c **** 	return false;
 1007              	 .loc 6 636 9
 1008 0004 0023     	 movs r3,#0
 637:.././hal/sam3u1c/udphs_device.c **** #endif
 638:.././hal/sam3u1c/udphs_device.c **** }
 1009              	 .loc 6 638 1
 1010 0006 1846     	 mov r0,r3
 1011 0008 BD46     	 mov sp,r7
 1012              	.LCFI48:
 1013              	 .cfi_def_cfa_register 13
 1014              	 
 1015 000a 80BC     	 pop {r7}
 1016              	.LCFI49:
 1017              	 .cfi_restore 7
 1018              	 .cfi_def_cfa_offset 0
 1019 000c 7047     	 bx lr
 1020              	 .cfi_endproc
 1021              	.LFE140:
 1023              	 .section .text.udd_enable,"ax",%progbits
 1024              	 .align 1
 1025              	 .global udd_enable
 1026              	 .syntax unified
 1027              	 .thumb
 1028              	 .thumb_func
 1029              	 .fpu softvfp
 1031              	udd_enable:
 1032              	.LFB141:
 639:.././hal/sam3u1c/udphs_device.c **** 
 640:.././hal/sam3u1c/udphs_device.c **** 
 641:.././hal/sam3u1c/udphs_device.c **** void udd_enable(void)
 642:.././hal/sam3u1c/udphs_device.c **** {
 1033              	 .loc 6 642 1
 1034              	 .cfi_startproc
 1035              	 
 1036              	 
 1037 0000 80B5     	 push {r7,lr}
 1038              	.LCFI50:
 1039              	 .cfi_def_cfa_offset 8
 1040              	 .cfi_offset 7,-8
 1041              	 .cfi_offset 14,-4
 1042 0002 82B0     	 sub sp,sp,#8
 1043              	.LCFI51:
 1044              	 .cfi_def_cfa_offset 16
 1045 0004 00AF     	 add r7,sp,#0
 1046              	.LCFI52:
 1047              	 .cfi_def_cfa_register 7
 643:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
 644:.././hal/sam3u1c/udphs_device.c **** 	sysclk_enable_usb();
 1048              	 .loc 6 644 2
 1049 0006 194B     	 ldr r3,.L54
 1050 0008 9847     	 blx r3
 1051              	.LVL23:
 645:.././hal/sam3u1c/udphs_device.c **** 
 646:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph_ck();
 1052              	 .loc 6 646 2
 1053 000a 1D20     	 movs r0,#29
 1054 000c 184B     	 ldr r3,.L54+4
 1055 000e 9847     	 blx r3
 1056              	.LVL24:
 647:.././hal/sam3u1c/udphs_device.c **** 
 648:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 1057              	 .loc 6 648 10
 1058 0010 184B     	 ldr r3,.L54+8
 1059 0012 9847     	 blx r3
 1060              	.LVL25:
 1061 0014 7860     	 str r0,[r7,#4]
 649:.././hal/sam3u1c/udphs_device.c **** 
 650:.././hal/sam3u1c/udphs_device.c **** 	//** Enable USB hardware
 651:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph();
 1062              	 .loc 6 651 2
 1063 0016 184B     	 ldr r3,.L54+12
 1064 0018 1B68     	 ldr r3,[r3]
 1065 001a 174A     	 ldr r2,.L54+12
 1066 001c 43F48073 	 orr r3,r3,#256
 1067 0020 1360     	 str r3,[r2]
 652:.././hal/sam3u1c/udphs_device.c **** 
 653:.././hal/sam3u1c/udphs_device.c **** 	// Cortex-M3, uses NVIC, no need to register IRQ handler
 654:.././hal/sam3u1c/udphs_device.c **** 	// Here, only the Device mode is possible,
 655:.././hal/sam3u1c/udphs_device.c **** 	// UDPHS interrupt is UDD interrupt
 656:.././hal/sam3u1c/udphs_device.c **** 	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
 1068              	 .loc 6 656 2
 1069 0022 0521     	 movs r1,#5
 1070 0024 1D20     	 movs r0,#29
 1071 0026 154B     	 ldr r3,.L54+16
 1072 0028 9847     	 blx r3
 1073              	.LVL26:
 657:.././hal/sam3u1c/udphs_device.c **** 	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
 1074              	 .loc 6 657 2
 1075 002a 1D20     	 movs r0,#29
 1076 002c 144B     	 ldr r3,.L54+20
 1077 002e 9847     	 blx r3
 1078              	.LVL27:
 658:.././hal/sam3u1c/udphs_device.c **** 
 659:.././hal/sam3u1c/udphs_device.c **** 	// Reset internal variables
 660:.././hal/sam3u1c/udphs_device.c **** #if (0!=USB_DEVICE_MAX_EP)
 661:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_table_reset();
 1079              	 .loc 6 661 2
 1080 0030 144B     	 ldr r3,.L54+24
 1081 0032 9847     	 blx r3
 1082              	.LVL28:
 662:.././hal/sam3u1c/udphs_device.c **** #endif
 663:.././hal/sam3u1c/udphs_device.c **** 
 664:.././hal/sam3u1c/udphs_device.c **** 	// Set the USB speed requested by configuration file
 665:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_HS_SUPPORT
 666:.././hal/sam3u1c/udphs_device.c **** 	udd_high_speed_enable();
 1083              	 .loc 6 666 2
 1084 0034 104B     	 ldr r3,.L54+12
 1085 0036 D3F8E030 	 ldr r3,[r3,#224]
 1086 003a 0F4A     	 ldr r2,.L54+12
 1087 003c 23F00303 	 bic r3,r3,#3
 1088 0040 C2F8E030 	 str r3,[r2,#224]
 667:.././hal/sam3u1c/udphs_device.c **** #else
 668:.././hal/sam3u1c/udphs_device.c **** 	udd_high_speed_disable();
 669:.././hal/sam3u1c/udphs_device.c **** #endif
 670:.././hal/sam3u1c/udphs_device.c **** 
 671:.././hal/sam3u1c/udphs_device.c **** 	// Always authorize asynchronous USB interrupts to exit of sleep mode
 672:.././hal/sam3u1c/udphs_device.c **** 	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
 1089              	 .loc 6 672 2
 1090 0044 4FF48020 	 mov r0,#262144
 1091 0048 0F4B     	 ldr r3,.L54+28
 1092 004a 9847     	 blx r3
 1093              	.LVL29:
 673:.././hal/sam3u1c/udphs_device.c **** 
 674:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
 675:.././hal/sam3u1c/udphs_device.c **** 	// Initialize the sleep mode authorized for the USB suspend mode
 676:.././hal/sam3u1c/udphs_device.c **** 	udd_b_idle = false;
 1094              	 .loc 6 676 13
 1095 004c 0F4B     	 ldr r3,.L54+32
 1096 004e 0022     	 movs r2,#0
 1097 0050 1A70     	 strb r2,[r3]
 677:.././hal/sam3u1c/udphs_device.c **** 	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
 1098              	 .loc 6 677 2
 1099 0052 0320     	 movs r0,#3
 1100 0054 0E4B     	 ldr r3,.L54+36
 1101 0056 9847     	 blx r3
 1102              	.LVL30:
 678:.././hal/sam3u1c/udphs_device.c **** #endif
 679:.././hal/sam3u1c/udphs_device.c **** 
 680:.././hal/sam3u1c/udphs_device.c **** #if UDD_VBUS_IO
 681:.././hal/sam3u1c/udphs_device.c **** 	/* Initialize VBus monitor */
 682:.././hal/sam3u1c/udphs_device.c **** 	udd_vbus_init(udd_vbus_handler);
 683:.././hal/sam3u1c/udphs_device.c **** 	udd_vbus_monitor_sleep_mode(true);
 684:.././hal/sam3u1c/udphs_device.c **** 	/* Force Vbus interrupt when Vbus is always high
 685:.././hal/sam3u1c/udphs_device.c **** 	 * This is possible due to a short timing between a Host mode stop/start.
 686:.././hal/sam3u1c/udphs_device.c **** 	 */
 687:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_vbus_high()) {
 688:.././hal/sam3u1c/udphs_device.c **** 		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
 689:.././hal/sam3u1c/udphs_device.c **** 	}
 690:.././hal/sam3u1c/udphs_device.c **** #else
 691:.././hal/sam3u1c/udphs_device.c **** #  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
 692:.././hal/sam3u1c/udphs_device.c **** 	udd_attach();
 1103              	 .loc 6 692 2
 1104 0058 0E4B     	 ldr r3,.L54+40
 1105 005a 9847     	 blx r3
 1106              	.LVL31:
 693:.././hal/sam3u1c/udphs_device.c **** #  endif
 694:.././hal/sam3u1c/udphs_device.c **** #endif
 695:.././hal/sam3u1c/udphs_device.c **** 
 696:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 1107              	 .loc 6 696 2
 1108 005c 7868     	 ldr r0,[r7,#4]
 1109 005e 0E4B     	 ldr r3,.L54+44
 1110 0060 9847     	 blx r3
 1111              	.LVL32:
 697:.././hal/sam3u1c/udphs_device.c **** }
 1112              	 .loc 6 697 1
 1113 0062 00BF     	 nop
 1114 0064 0837     	 adds r7,r7,#8
 1115              	.LCFI53:
 1116              	 .cfi_def_cfa_offset 8
 1117 0066 BD46     	 mov sp,r7
 1118              	.LCFI54:
 1119              	 .cfi_def_cfa_register 13
 1120              	 
 1121 0068 80BD     	 pop {r7,pc}
 1122              	.L55:
 1123 006a 00BF     	 .align 2
 1124              	.L54:
 1125 006c 00000000 	 .word sysclk_enable_usb
 1126 0070 00000000 	 .word pmc_enable_periph_clk
 1127 0074 00000000 	 .word cpu_irq_save
 1128 0078 00400A40 	 .word 1074413568
 1129 007c 00000000 	 .word NVIC_SetPriority
 1130 0080 00000000 	 .word NVIC_EnableIRQ
 1131 0084 00000000 	 .word udd_ep_job_table_reset
 1132 0088 00000000 	 .word pmc_set_fast_startup_input
 1133 008c 00000000 	 .word udd_b_idle
 1134 0090 00000000 	 .word sleepmgr_lock_mode
 1135 0094 00000000 	 .word udd_attach
 1136 0098 00000000 	 .word cpu_irq_restore
 1137              	 .cfi_endproc
 1138              	.LFE141:
 1140              	 .section .text.udd_disable,"ax",%progbits
 1141              	 .align 1
 1142              	 .global udd_disable
 1143              	 .syntax unified
 1144              	 .thumb
 1145              	 .thumb_func
 1146              	 .fpu softvfp
 1148              	udd_disable:
 1149              	.LFB142:
 698:.././hal/sam3u1c/udphs_device.c **** 
 699:.././hal/sam3u1c/udphs_device.c **** 
 700:.././hal/sam3u1c/udphs_device.c **** void udd_disable(void)
 701:.././hal/sam3u1c/udphs_device.c **** {
 1150              	 .loc 6 701 1
 1151              	 .cfi_startproc
 1152              	 
 1153              	 
 1154 0000 80B5     	 push {r7,lr}
 1155              	.LCFI55:
 1156              	 .cfi_def_cfa_offset 8
 1157              	 .cfi_offset 7,-8
 1158              	 .cfi_offset 14,-4
 1159 0002 82B0     	 sub sp,sp,#8
 1160              	.LCFI56:
 1161              	 .cfi_def_cfa_offset 16
 1162 0004 00AF     	 add r7,sp,#0
 1163              	.LCFI57:
 1164              	 .cfi_def_cfa_register 7
 702:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
 703:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 1165              	 .loc 6 703 10
 1166 0006 0D4B     	 ldr r3,.L57
 1167 0008 9847     	 blx r3
 1168              	.LVL33:
 1169 000a 7860     	 str r0,[r7,#4]
 704:.././hal/sam3u1c/udphs_device.c **** 	// Disable USB
 705:.././hal/sam3u1c/udphs_device.c **** 	udd_reset_periph();
 1170              	 .loc 6 705 2
 1171 000c 0C4B     	 ldr r3,.L57+4
 1172 000e 1B68     	 ldr r3,[r3]
 1173 0010 0B4A     	 ldr r2,.L57+4
 1174 0012 23F48073 	 bic r3,r3,#256
 1175 0016 1360     	 str r3,[r2]
 706:.././hal/sam3u1c/udphs_device.c **** 	sysclk_disable_usb();
 1176              	 .loc 6 706 2
 1177 0018 0A4B     	 ldr r3,.L57+8
 1178 001a 9847     	 blx r3
 1179              	.LVL34:
 707:.././hal/sam3u1c/udphs_device.c **** 	pmc_disable_periph_clk(ID_UDPHS);
 1180              	 .loc 6 707 2
 1181 001c 1D20     	 movs r0,#29
 1182 001e 0A4B     	 ldr r3,.L57+12
 1183 0020 9847     	 blx r3
 1184              	.LVL35:
 708:.././hal/sam3u1c/udphs_device.c **** 	udd_sleep_mode(false);
 1185              	 .loc 6 708 2
 1186 0022 0020     	 movs r0,#0
 1187 0024 094B     	 ldr r3,.L57+16
 1188 0026 9847     	 blx r3
 1189              	.LVL36:
 709:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
 710:.././hal/sam3u1c/udphs_device.c **** 	sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
 1190              	 .loc 6 710 2
 1191 0028 0320     	 movs r0,#3
 1192 002a 094B     	 ldr r3,.L57+20
 1193 002c 9847     	 blx r3
 1194              	.LVL37:
 711:.././hal/sam3u1c/udphs_device.c **** #endif
 712:.././hal/sam3u1c/udphs_device.c **** 
 713:.././hal/sam3u1c/udphs_device.c **** # if UDD_VBUS_IO
 714:.././hal/sam3u1c/udphs_device.c **** 	udd_vbus_monitor_sleep_mode(false);
 715:.././hal/sam3u1c/udphs_device.c **** # endif
 716:.././hal/sam3u1c/udphs_device.c **** 
 717:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 1195              	 .loc 6 717 2
 1196 002e 7868     	 ldr r0,[r7,#4]
 1197 0030 084B     	 ldr r3,.L57+24
 1198 0032 9847     	 blx r3
 1199              	.LVL38:
 718:.././hal/sam3u1c/udphs_device.c **** }
 1200              	 .loc 6 718 1
 1201 0034 00BF     	 nop
 1202 0036 0837     	 adds r7,r7,#8
 1203              	.LCFI58:
 1204              	 .cfi_def_cfa_offset 8
 1205 0038 BD46     	 mov sp,r7
 1206              	.LCFI59:
 1207              	 .cfi_def_cfa_register 13
 1208              	 
 1209 003a 80BD     	 pop {r7,pc}
 1210              	.L58:
 1211              	 .align 2
 1212              	.L57:
 1213 003c 00000000 	 .word cpu_irq_save
 1214 0040 00400A40 	 .word 1074413568
 1215 0044 00000000 	 .word sysclk_disable_usb
 1216 0048 00000000 	 .word pmc_disable_periph_clk
 1217 004c 00000000 	 .word udd_sleep_mode
 1218 0050 00000000 	 .word sleepmgr_unlock_mode
 1219 0054 00000000 	 .word cpu_irq_restore
 1220              	 .cfi_endproc
 1221              	.LFE142:
 1223              	 .section .text.udd_attach,"ax",%progbits
 1224              	 .align 1
 1225              	 .global udd_attach
 1226              	 .syntax unified
 1227              	 .thumb
 1228              	 .thumb_func
 1229              	 .fpu softvfp
 1231              	udd_attach:
 1232              	.LFB143:
 719:.././hal/sam3u1c/udphs_device.c **** 
 720:.././hal/sam3u1c/udphs_device.c **** 
 721:.././hal/sam3u1c/udphs_device.c **** void udd_attach(void)
 722:.././hal/sam3u1c/udphs_device.c **** {
 1233              	 .loc 6 722 1
 1234              	 .cfi_startproc
 1235              	 
 1236              	 
 1237 0000 80B5     	 push {r7,lr}
 1238              	.LCFI60:
 1239              	 .cfi_def_cfa_offset 8
 1240              	 .cfi_offset 7,-8
 1241              	 .cfi_offset 14,-4
 1242 0002 82B0     	 sub sp,sp,#8
 1243              	.LCFI61:
 1244              	 .cfi_def_cfa_offset 16
 1245 0004 00AF     	 add r7,sp,#0
 1246              	.LCFI62:
 1247              	 .cfi_def_cfa_register 7
 723:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
 724:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 1248              	 .loc 6 724 10
 1249 0006 264B     	 ldr r3,.L60
 1250 0008 9847     	 blx r3
 1251              	.LVL39:
 1252 000a 7860     	 str r0,[r7,#4]
 725:.././hal/sam3u1c/udphs_device.c **** 
 726:.././hal/sam3u1c/udphs_device.c **** 	// At startup the USB bus state is unknown,
 727:.././hal/sam3u1c/udphs_device.c **** 	// therefore the state is considered IDLE to not miss any USB event
 728:.././hal/sam3u1c/udphs_device.c **** 	udd_sleep_mode(true);
 1253              	 .loc 6 728 2
 1254 000c 0120     	 movs r0,#1
 1255 000e 254B     	 ldr r3,.L60+4
 1256 0010 9847     	 blx r3
 1257              	.LVL40:
 729:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph_ck();
 1258              	 .loc 6 729 2
 1259 0012 1D20     	 movs r0,#29
 1260 0014 244B     	 ldr r3,.L60+8
 1261 0016 9847     	 blx r3
 1262              	.LVL41:
 730:.././hal/sam3u1c/udphs_device.c **** 
 731:.././hal/sam3u1c/udphs_device.c **** 	// Authorize attach if Vbus is present
 732:.././hal/sam3u1c/udphs_device.c **** 	udd_attach_device();
 1263              	 .loc 6 732 2
 1264 0018 244B     	 ldr r3,.L60+12
 1265 001a 1B68     	 ldr r3,[r3]
 1266 001c 234A     	 ldr r2,.L60+12
 1267 001e 43F40063 	 orr r3,r3,#2048
 1268 0022 1360     	 str r3,[r2]
 1269 0024 214B     	 ldr r3,.L60+12
 1270 0026 1B68     	 ldr r3,[r3]
 1271 0028 204A     	 ldr r2,.L60+12
 1272 002a 23F40073 	 bic r3,r3,#512
 1273 002e 1360     	 str r3,[r2]
 733:.././hal/sam3u1c/udphs_device.c **** 
 734:.././hal/sam3u1c/udphs_device.c **** 	// Enable USB line events
 735:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_reset_interrupt();
 1274              	 .loc 6 735 2
 1275 0030 1E4B     	 ldr r3,.L60+12
 1276 0032 1B69     	 ldr r3,[r3,#16]
 1277 0034 1D4A     	 ldr r2,.L60+12
 1278 0036 43F01003 	 orr r3,r3,#16
 1279 003a 1361     	 str r3,[r2,#16]
 736:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_suspend_interrupt();
 1280              	 .loc 6 736 2
 1281 003c 1B4B     	 ldr r3,.L60+12
 1282 003e 1B69     	 ldr r3,[r3,#16]
 1283 0040 1A4A     	 ldr r2,.L60+12
 1284 0042 43F00203 	 orr r3,r3,#2
 1285 0046 1361     	 str r3,[r2,#16]
 737:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_wake_up_interrupt();
 1286              	 .loc 6 737 2
 1287 0048 184B     	 ldr r3,.L60+12
 1288 004a 1B69     	 ldr r3,[r3,#16]
 1289 004c 174A     	 ldr r2,.L60+12
 1290 004e 43F02003 	 orr r3,r3,#32
 1291 0052 1361     	 str r3,[r2,#16]
 738:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_sof_interrupt();
 1292              	 .loc 6 738 2
 1293 0054 154B     	 ldr r3,.L60+12
 1294 0056 1B69     	 ldr r3,[r3,#16]
 1295 0058 144A     	 ldr r2,.L60+12
 1296 005a 43F00803 	 orr r3,r3,#8
 1297 005e 1361     	 str r3,[r2,#16]
 739:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_HS_SUPPORT
 740:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_msof_interrupt();
 1298              	 .loc 6 740 2
 1299 0060 124B     	 ldr r3,.L60+12
 1300 0062 1B69     	 ldr r3,[r3,#16]
 1301 0064 114A     	 ldr r2,.L60+12
 1302 0066 43F00403 	 orr r3,r3,#4
 1303 006a 1361     	 str r3,[r2,#16]
 741:.././hal/sam3u1c/udphs_device.c **** #endif
 742:.././hal/sam3u1c/udphs_device.c **** 	// Reset following interrupts flag
 743:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_sof();
 1304              	 .loc 6 743 2
 1305 006c 0F4B     	 ldr r3,.L60+12
 1306 006e 0822     	 movs r2,#8
 1307 0070 9A61     	 str r2,[r3,#24]
 744:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_msof();
 1308              	 .loc 6 744 2
 1309 0072 0E4B     	 ldr r3,.L60+12
 1310 0074 0422     	 movs r2,#4
 1311 0076 9A61     	 str r2,[r3,#24]
 745:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_reset();
 1312              	 .loc 6 745 2
 1313 0078 0C4B     	 ldr r3,.L60+12
 1314 007a 1022     	 movs r2,#16
 1315 007c 9A61     	 str r2,[r3,#24]
 746:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_suspend();
 1316              	 .loc 6 746 2
 1317 007e 0B4B     	 ldr r3,.L60+12
 1318 0080 0222     	 movs r2,#2
 1319 0082 9A61     	 str r2,[r3,#24]
 747:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_wake_up();
 1320              	 .loc 6 747 2
 1321 0084 094B     	 ldr r3,.L60+12
 1322 0086 2022     	 movs r2,#32
 1323 0088 9A61     	 str r2,[r3,#24]
 748:.././hal/sam3u1c/udphs_device.c **** 
 749:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_periph_ck();
 1324              	 .loc 6 749 2
 1325 008a 1D20     	 movs r0,#29
 1326 008c 084B     	 ldr r3,.L60+16
 1327 008e 9847     	 blx r3
 1328              	.LVL42:
 750:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 1329              	 .loc 6 750 2
 1330 0090 7868     	 ldr r0,[r7,#4]
 1331 0092 084B     	 ldr r3,.L60+20
 1332 0094 9847     	 blx r3
 1333              	.LVL43:
 751:.././hal/sam3u1c/udphs_device.c **** }
 1334              	 .loc 6 751 1
 1335 0096 00BF     	 nop
 1336 0098 0837     	 adds r7,r7,#8
 1337              	.LCFI63:
 1338              	 .cfi_def_cfa_offset 8
 1339 009a BD46     	 mov sp,r7
 1340              	.LCFI64:
 1341              	 .cfi_def_cfa_register 13
 1342              	 
 1343 009c 80BD     	 pop {r7,pc}
 1344              	.L61:
 1345 009e 00BF     	 .align 2
 1346              	.L60:
 1347 00a0 00000000 	 .word cpu_irq_save
 1348 00a4 00000000 	 .word udd_sleep_mode
 1349 00a8 00000000 	 .word pmc_enable_periph_clk
 1350 00ac 00400A40 	 .word 1074413568
 1351 00b0 00000000 	 .word pmc_disable_periph_clk
 1352 00b4 00000000 	 .word cpu_irq_restore
 1353              	 .cfi_endproc
 1354              	.LFE143:
 1356              	 .section .text.udd_detach,"ax",%progbits
 1357              	 .align 1
 1358              	 .global udd_detach
 1359              	 .syntax unified
 1360              	 .thumb
 1361              	 .thumb_func
 1362              	 .fpu softvfp
 1364              	udd_detach:
 1365              	.LFB144:
 752:.././hal/sam3u1c/udphs_device.c **** 
 753:.././hal/sam3u1c/udphs_device.c **** 
 754:.././hal/sam3u1c/udphs_device.c **** void udd_detach(void)
 755:.././hal/sam3u1c/udphs_device.c **** {
 1366              	 .loc 6 755 1
 1367              	 .cfi_startproc
 1368              	 
 1369              	 
 1370 0000 80B5     	 push {r7,lr}
 1371              	.LCFI65:
 1372              	 .cfi_def_cfa_offset 8
 1373              	 .cfi_offset 7,-8
 1374              	 .cfi_offset 14,-4
 1375 0002 00AF     	 add r7,sp,#0
 1376              	.LCFI66:
 1377              	 .cfi_def_cfa_register 7
 756:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_periph_ck();
 1378              	 .loc 6 756 2
 1379 0004 1D20     	 movs r0,#29
 1380 0006 0B4B     	 ldr r3,.L63
 1381 0008 9847     	 blx r3
 1382              	.LVL44:
 757:.././hal/sam3u1c/udphs_device.c **** 	// Detach device from the bus
 758:.././hal/sam3u1c/udphs_device.c **** 	udd_detach_device();
 1383              	 .loc 6 758 2
 1384 000a 0B4B     	 ldr r3,.L63+4
 1385 000c 1B68     	 ldr r3,[r3]
 1386 000e 0A4A     	 ldr r2,.L63+4
 1387 0010 43F40073 	 orr r3,r3,#512
 1388 0014 1360     	 str r3,[r2]
 1389 0016 084B     	 ldr r3,.L63+4
 1390 0018 1B68     	 ldr r3,[r3]
 1391 001a 074A     	 ldr r2,.L63+4
 1392 001c 23F40063 	 bic r3,r3,#2048
 1393 0020 1360     	 str r3,[r2]
 759:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_periph_ck();
 1394              	 .loc 6 759 2
 1395 0022 1D20     	 movs r0,#29
 1396 0024 054B     	 ldr r3,.L63+8
 1397 0026 9847     	 blx r3
 1398              	.LVL45:
 760:.././hal/sam3u1c/udphs_device.c **** 	udd_sleep_mode(false);
 1399              	 .loc 6 760 2
 1400 0028 0020     	 movs r0,#0
 1401 002a 054B     	 ldr r3,.L63+12
 1402 002c 9847     	 blx r3
 1403              	.LVL46:
 761:.././hal/sam3u1c/udphs_device.c **** }
 1404              	 .loc 6 761 1
 1405 002e 00BF     	 nop
 1406 0030 80BD     	 pop {r7,pc}
 1407              	.L64:
 1408 0032 00BF     	 .align 2
 1409              	.L63:
 1410 0034 00000000 	 .word pmc_enable_periph_clk
 1411 0038 00400A40 	 .word 1074413568
 1412 003c 00000000 	 .word pmc_disable_periph_clk
 1413 0040 00000000 	 .word udd_sleep_mode
 1414              	 .cfi_endproc
 1415              	.LFE144:
 1417              	 .section .text.udd_is_high_speed,"ax",%progbits
 1418              	 .align 1
 1419              	 .global udd_is_high_speed
 1420              	 .syntax unified
 1421              	 .thumb
 1422              	 .thumb_func
 1423              	 .fpu softvfp
 1425              	udd_is_high_speed:
 1426              	.LFB145:
 762:.././hal/sam3u1c/udphs_device.c **** 
 763:.././hal/sam3u1c/udphs_device.c **** 
 764:.././hal/sam3u1c/udphs_device.c **** bool udd_is_high_speed(void)
 765:.././hal/sam3u1c/udphs_device.c **** {
 1427              	 .loc 6 765 1
 1428              	 .cfi_startproc
 1429              	 
 1430              	 
 1431              	 
 1432 0000 80B4     	 push {r7}
 1433              	.LCFI67:
 1434              	 .cfi_def_cfa_offset 4
 1435              	 .cfi_offset 7,-4
 1436 0002 00AF     	 add r7,sp,#0
 1437              	.LCFI68:
 1438              	 .cfi_def_cfa_register 7
 766:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_HS_SUPPORT
 767:.././hal/sam3u1c/udphs_device.c **** 	return !Is_udd_full_speed_mode();
 1439              	 .loc 6 767 10
 1440 0004 064B     	 ldr r3,.L67
 1441 0006 5B69     	 ldr r3,[r3,#20]
 1442 0008 03F00103 	 and r3,r3,#1
 1443              	 .loc 6 767 9
 1444 000c 002B     	 cmp r3,#0
 1445 000e 14BF     	 ite ne
 1446 0010 0123     	 movne r3,#1
 1447 0012 0023     	 moveq r3,#0
 1448 0014 DBB2     	 uxtb r3,r3
 768:.././hal/sam3u1c/udphs_device.c **** #else
 769:.././hal/sam3u1c/udphs_device.c **** 	return false;
 770:.././hal/sam3u1c/udphs_device.c **** #endif
 771:.././hal/sam3u1c/udphs_device.c **** }
 1449              	 .loc 6 771 1
 1450 0016 1846     	 mov r0,r3
 1451 0018 BD46     	 mov sp,r7
 1452              	.LCFI69:
 1453              	 .cfi_def_cfa_register 13
 1454              	 
 1455 001a 80BC     	 pop {r7}
 1456              	.LCFI70:
 1457              	 .cfi_restore 7
 1458              	 .cfi_def_cfa_offset 0
 1459 001c 7047     	 bx lr
 1460              	.L68:
 1461 001e 00BF     	 .align 2
 1462              	.L67:
 1463 0020 00400A40 	 .word 1074413568
 1464              	 .cfi_endproc
 1465              	.LFE145:
 1467              	 .section .text.udd_set_address,"ax",%progbits
 1468              	 .align 1
 1469              	 .global udd_set_address
 1470              	 .syntax unified
 1471              	 .thumb
 1472              	 .thumb_func
 1473              	 .fpu softvfp
 1475              	udd_set_address:
 1476              	.LFB146:
 772:.././hal/sam3u1c/udphs_device.c **** 
 773:.././hal/sam3u1c/udphs_device.c **** 
 774:.././hal/sam3u1c/udphs_device.c **** void udd_set_address(uint8_t address)
 775:.././hal/sam3u1c/udphs_device.c **** {
 1477              	 .loc 6 775 1
 1478              	 .cfi_startproc
 1479              	 
 1480              	 
 1481              	 
 1482 0000 80B4     	 push {r7}
 1483              	.LCFI71:
 1484              	 .cfi_def_cfa_offset 4
 1485              	 .cfi_offset 7,-4
 1486 0002 83B0     	 sub sp,sp,#12
 1487              	.LCFI72:
 1488              	 .cfi_def_cfa_offset 16
 1489 0004 00AF     	 add r7,sp,#0
 1490              	.LCFI73:
 1491              	 .cfi_def_cfa_register 7
 1492 0006 0346     	 mov r3,r0
 1493 0008 FB71     	 strb r3,[r7,#7]
 776:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("Addr%d ", address);
 777:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_address();
 1494              	 .loc 6 777 2
 1495 000a 0D4B     	 ldr r3,.L70
 1496 000c 1B68     	 ldr r3,[r3]
 1497 000e 0C4A     	 ldr r2,.L70
 1498 0010 23F08003 	 bic r3,r3,#128
 1499 0014 1360     	 str r3,[r2]
 778:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_address(address);
 1500              	 .loc 6 778 2
 1501 0016 0A4B     	 ldr r3,.L70
 1502 0018 1B68     	 ldr r3,[r3]
 1503 001a 23F07F02 	 bic r2,r3,#127
 1504 001e FB79     	 ldrb r3,[r7,#7]
 1505 0020 03F07F03 	 and r3,r3,#127
 1506 0024 0649     	 ldr r1,.L70
 1507 0026 1343     	 orrs r3,r3,r2
 1508 0028 0B60     	 str r3,[r1]
 779:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_address();
 1509              	 .loc 6 779 2
 1510 002a 054B     	 ldr r3,.L70
 1511 002c 1B68     	 ldr r3,[r3]
 1512 002e 044A     	 ldr r2,.L70
 1513 0030 43F08003 	 orr r3,r3,#128
 1514 0034 1360     	 str r3,[r2]
 780:.././hal/sam3u1c/udphs_device.c **** }
 1515              	 .loc 6 780 1
 1516 0036 00BF     	 nop
 1517 0038 0C37     	 adds r7,r7,#12
 1518              	.LCFI74:
 1519              	 .cfi_def_cfa_offset 4
 1520 003a BD46     	 mov sp,r7
 1521              	.LCFI75:
 1522              	 .cfi_def_cfa_register 13
 1523              	 
 1524 003c 80BC     	 pop {r7}
 1525              	.LCFI76:
 1526              	 .cfi_restore 7
 1527              	 .cfi_def_cfa_offset 0
 1528 003e 7047     	 bx lr
 1529              	.L71:
 1530              	 .align 2
 1531              	.L70:
 1532 0040 00400A40 	 .word 1074413568
 1533              	 .cfi_endproc
 1534              	.LFE146:
 1536              	 .section .text.udd_getaddress,"ax",%progbits
 1537              	 .align 1
 1538              	 .global udd_getaddress
 1539              	 .syntax unified
 1540              	 .thumb
 1541              	 .thumb_func
 1542              	 .fpu softvfp
 1544              	udd_getaddress:
 1545              	.LFB147:
 781:.././hal/sam3u1c/udphs_device.c **** 
 782:.././hal/sam3u1c/udphs_device.c **** 
 783:.././hal/sam3u1c/udphs_device.c **** uint8_t udd_getaddress(void)
 784:.././hal/sam3u1c/udphs_device.c **** {
 1546              	 .loc 6 784 1
 1547              	 .cfi_startproc
 1548              	 
 1549              	 
 1550              	 
 1551 0000 80B4     	 push {r7}
 1552              	.LCFI77:
 1553              	 .cfi_def_cfa_offset 4
 1554              	 .cfi_offset 7,-4
 1555 0002 00AF     	 add r7,sp,#0
 1556              	.LCFI78:
 1557              	 .cfi_def_cfa_register 7
 785:.././hal/sam3u1c/udphs_device.c **** 	return udd_get_configured_address();
 1558              	 .loc 6 785 9
 1559 0004 044B     	 ldr r3,.L74
 1560 0006 1B68     	 ldr r3,[r3]
 1561 0008 DBB2     	 uxtb r3,r3
 1562 000a 03F07F03 	 and r3,r3,#127
 1563 000e DBB2     	 uxtb r3,r3
 786:.././hal/sam3u1c/udphs_device.c **** }
 1564              	 .loc 6 786 1
 1565 0010 1846     	 mov r0,r3
 1566 0012 BD46     	 mov sp,r7
 1567              	.LCFI79:
 1568              	 .cfi_def_cfa_register 13
 1569              	 
 1570 0014 80BC     	 pop {r7}
 1571              	.LCFI80:
 1572              	 .cfi_restore 7
 1573              	 .cfi_def_cfa_offset 0
 1574 0016 7047     	 bx lr
 1575              	.L75:
 1576              	 .align 2
 1577              	.L74:
 1578 0018 00400A40 	 .word 1074413568
 1579              	 .cfi_endproc
 1580              	.LFE147:
 1582              	 .section .text.udd_get_frame_number,"ax",%progbits
 1583              	 .align 1
 1584              	 .global udd_get_frame_number
 1585              	 .syntax unified
 1586              	 .thumb
 1587              	 .thumb_func
 1588              	 .fpu softvfp
 1590              	udd_get_frame_number:
 1591              	.LFB148:
 787:.././hal/sam3u1c/udphs_device.c **** 
 788:.././hal/sam3u1c/udphs_device.c **** 
 789:.././hal/sam3u1c/udphs_device.c **** uint16_t udd_get_frame_number(void)
 790:.././hal/sam3u1c/udphs_device.c **** {
 1592              	 .loc 6 790 1
 1593              	 .cfi_startproc
 1594              	 
 1595              	 
 1596              	 
 1597 0000 80B4     	 push {r7}
 1598              	.LCFI81:
 1599              	 .cfi_def_cfa_offset 4
 1600              	 .cfi_offset 7,-4
 1601 0002 00AF     	 add r7,sp,#0
 1602              	.LCFI82:
 1603              	 .cfi_def_cfa_register 7
 791:.././hal/sam3u1c/udphs_device.c **** 	return udd_frame_number();
 1604              	 .loc 6 791 9
 1605 0004 054B     	 ldr r3,.L78
 1606 0006 5B68     	 ldr r3,[r3,#4]
 1607 0008 DB08     	 lsrs r3,r3,#3
 1608 000a 9BB2     	 uxth r3,r3
 1609 000c C3F30A03 	 ubfx r3,r3,#0,#11
 1610 0010 9BB2     	 uxth r3,r3
 792:.././hal/sam3u1c/udphs_device.c **** }
 1611              	 .loc 6 792 1
 1612 0012 1846     	 mov r0,r3
 1613 0014 BD46     	 mov sp,r7
 1614              	.LCFI83:
 1615              	 .cfi_def_cfa_register 13
 1616              	 
 1617 0016 80BC     	 pop {r7}
 1618              	.LCFI84:
 1619              	 .cfi_restore 7
 1620              	 .cfi_def_cfa_offset 0
 1621 0018 7047     	 bx lr
 1622              	.L79:
 1623 001a 00BF     	 .align 2
 1624              	.L78:
 1625 001c 00400A40 	 .word 1074413568
 1626              	 .cfi_endproc
 1627              	.LFE148:
 1629              	 .section .text.udd_get_micro_frame_number,"ax",%progbits
 1630              	 .align 1
 1631              	 .global udd_get_micro_frame_number
 1632              	 .syntax unified
 1633              	 .thumb
 1634              	 .thumb_func
 1635              	 .fpu softvfp
 1637              	udd_get_micro_frame_number:
 1638              	.LFB149:
 793:.././hal/sam3u1c/udphs_device.c **** 
 794:.././hal/sam3u1c/udphs_device.c **** uint16_t udd_get_micro_frame_number(void)
 795:.././hal/sam3u1c/udphs_device.c **** {
 1639              	 .loc 6 795 1
 1640              	 .cfi_startproc
 1641              	 
 1642              	 
 1643              	 
 1644 0000 80B4     	 push {r7}
 1645              	.LCFI85:
 1646              	 .cfi_def_cfa_offset 4
 1647              	 .cfi_offset 7,-4
 1648 0002 00AF     	 add r7,sp,#0
 1649              	.LCFI86:
 1650              	 .cfi_def_cfa_register 7
 796:.././hal/sam3u1c/udphs_device.c **** 	return udd_micro_frame_number();
 1651              	 .loc 6 796 9
 1652 0004 044B     	 ldr r3,.L82
 1653 0006 5B68     	 ldr r3,[r3,#4]
 1654 0008 9BB2     	 uxth r3,r3
 1655 000a 03F00703 	 and r3,r3,#7
 1656 000e 9BB2     	 uxth r3,r3
 797:.././hal/sam3u1c/udphs_device.c **** }
 1657              	 .loc 6 797 1
 1658 0010 1846     	 mov r0,r3
 1659 0012 BD46     	 mov sp,r7
 1660              	.LCFI87:
 1661              	 .cfi_def_cfa_register 13
 1662              	 
 1663 0014 80BC     	 pop {r7}
 1664              	.LCFI88:
 1665              	 .cfi_restore 7
 1666              	 .cfi_def_cfa_offset 0
 1667 0016 7047     	 bx lr
 1668              	.L83:
 1669              	 .align 2
 1670              	.L82:
 1671 0018 00400A40 	 .word 1074413568
 1672              	 .cfi_endproc
 1673              	.LFE149:
 1675              	 .section .text.udd_send_remotewakeup,"ax",%progbits
 1676              	 .align 1
 1677              	 .global udd_send_remotewakeup
 1678              	 .syntax unified
 1679              	 .thumb
 1680              	 .thumb_func
 1681              	 .fpu softvfp
 1683              	udd_send_remotewakeup:
 1684              	.LFB150:
 798:.././hal/sam3u1c/udphs_device.c **** 
 799:.././hal/sam3u1c/udphs_device.c **** void udd_send_remotewakeup(void)
 800:.././hal/sam3u1c/udphs_device.c **** {
 1685              	 .loc 6 800 1
 1686              	 .cfi_startproc
 1687              	 
 1688              	 
 1689 0000 80B5     	 push {r7,lr}
 1690              	.LCFI89:
 1691              	 .cfi_def_cfa_offset 8
 1692              	 .cfi_offset 7,-8
 1693              	 .cfi_offset 14,-4
 1694 0002 00AF     	 add r7,sp,#0
 1695              	.LCFI90:
 1696              	 .cfi_def_cfa_register 7
 801:.././hal/sam3u1c/udphs_device.c **** #ifndef UDD_NO_SLEEP_MGR
 802:.././hal/sam3u1c/udphs_device.c **** 	if (!udd_b_idle)
 1697              	 .loc 6 802 6
 1698 0004 0A4B     	 ldr r3,.L87
 1699 0006 1B78     	 ldrb r3,[r3]
 1700 0008 83F00103 	 eor r3,r3,#1
 1701 000c DBB2     	 uxtb r3,r3
 1702              	 .loc 6 802 5
 1703 000e 002B     	 cmp r3,#0
 1704 0010 0BD0     	 beq .L86
 803:.././hal/sam3u1c/udphs_device.c **** #endif
 804:.././hal/sam3u1c/udphs_device.c **** 	{
 805:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("SendWkup\n\r");
 806:.././hal/sam3u1c/udphs_device.c **** 		udd_sleep_mode(true); // Enter in IDLE mode
 1705              	 .loc 6 806 3
 1706 0012 0120     	 movs r0,#1
 1707 0014 074B     	 ldr r3,.L87+4
 1708 0016 9847     	 blx r3
 1709              	.LVL47:
 807:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_periph_ck();
 1710              	 .loc 6 807 3
 1711 0018 1D20     	 movs r0,#29
 1712 001a 074B     	 ldr r3,.L87+8
 1713 001c 9847     	 blx r3
 1714              	.LVL48:
 808:.././hal/sam3u1c/udphs_device.c **** 		udd_initiate_remote_wake_up();
 1715              	 .loc 6 808 3
 1716 001e 074B     	 ldr r3,.L87+12
 1717 0020 1B68     	 ldr r3,[r3]
 1718 0022 064A     	 ldr r2,.L87+12
 1719 0024 43F48063 	 orr r3,r3,#1024
 1720 0028 1360     	 str r3,[r2]
 1721              	.L86:
 809:.././hal/sam3u1c/udphs_device.c **** 	}
 810:.././hal/sam3u1c/udphs_device.c **** }
 1722              	 .loc 6 810 1
 1723 002a 00BF     	 nop
 1724 002c 80BD     	 pop {r7,pc}
 1725              	.L88:
 1726 002e 00BF     	 .align 2
 1727              	.L87:
 1728 0030 00000000 	 .word udd_b_idle
 1729 0034 00000000 	 .word udd_sleep_mode
 1730 0038 00000000 	 .word pmc_enable_periph_clk
 1731 003c 00400A40 	 .word 1074413568
 1732              	 .cfi_endproc
 1733              	.LFE150:
 1735              	 .section .text.udd_set_setup_payload,"ax",%progbits
 1736              	 .align 1
 1737              	 .global udd_set_setup_payload
 1738              	 .syntax unified
 1739              	 .thumb
 1740              	 .thumb_func
 1741              	 .fpu softvfp
 1743              	udd_set_setup_payload:
 1744              	.LFB151:
 811:.././hal/sam3u1c/udphs_device.c **** 
 812:.././hal/sam3u1c/udphs_device.c **** 
 813:.././hal/sam3u1c/udphs_device.c **** void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
 814:.././hal/sam3u1c/udphs_device.c **** {
 1745              	 .loc 6 814 1
 1746              	 .cfi_startproc
 1747              	 
 1748              	 
 1749              	 
 1750 0000 80B4     	 push {r7}
 1751              	.LCFI91:
 1752              	 .cfi_def_cfa_offset 4
 1753              	 .cfi_offset 7,-4
 1754 0002 83B0     	 sub sp,sp,#12
 1755              	.LCFI92:
 1756              	 .cfi_def_cfa_offset 16
 1757 0004 00AF     	 add r7,sp,#0
 1758              	.LCFI93:
 1759              	 .cfi_def_cfa_register 7
 1760 0006 7860     	 str r0,[r7,#4]
 1761 0008 0B46     	 mov r3,r1
 1762 000a 7B80     	 strh r3,[r7,#2]
 815:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.payload = payload;
 1763              	 .loc 6 815 24
 1764 000c 054A     	 ldr r2,.L90
 1765 000e 7B68     	 ldr r3,[r7,#4]
 1766 0010 9360     	 str r3,[r2,#8]
 816:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.payload_size = payload_size;
 1767              	 .loc 6 816 29
 1768 0012 044A     	 ldr r2,.L90
 1769 0014 7B88     	 ldrh r3,[r7,#2]
 1770 0016 9381     	 strh r3,[r2,#12]
 817:.././hal/sam3u1c/udphs_device.c **** }
 1771              	 .loc 6 817 1
 1772 0018 00BF     	 nop
 1773 001a 0C37     	 adds r7,r7,#12
 1774              	.LCFI94:
 1775              	 .cfi_def_cfa_offset 4
 1776 001c BD46     	 mov sp,r7
 1777              	.LCFI95:
 1778              	 .cfi_def_cfa_register 13
 1779              	 
 1780 001e 80BC     	 pop {r7}
 1781              	.LCFI96:
 1782              	 .cfi_restore 7
 1783              	 .cfi_def_cfa_offset 0
 1784 0020 7047     	 bx lr
 1785              	.L91:
 1786 0022 00BF     	 .align 2
 1787              	.L90:
 1788 0024 00000000 	 .word udd_g_ctrlreq
 1789              	 .cfi_endproc
 1790              	.LFE151:
 1792              	 .section .text.udd_ep_alloc,"ax",%progbits
 1793              	 .align 1
 1794              	 .global udd_ep_alloc
 1795              	 .syntax unified
 1796              	 .thumb
 1797              	 .thumb_func
 1798              	 .fpu softvfp
 1800              	udd_ep_alloc:
 1801              	.LFB152:
 818:.././hal/sam3u1c/udphs_device.c **** 
 819:.././hal/sam3u1c/udphs_device.c **** 
 820:.././hal/sam3u1c/udphs_device.c **** #if (0!=USB_DEVICE_MAX_EP)
 821:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
 822:.././hal/sam3u1c/udphs_device.c **** 		uint16_t MaxEndpointSize)
 823:.././hal/sam3u1c/udphs_device.c **** {
 1802              	 .loc 6 823 1
 1803              	 .cfi_startproc
 1804              	 
 1805              	 
 1806 0000 90B5     	 push {r4,r7,lr}
 1807              	.LCFI97:
 1808              	 .cfi_def_cfa_offset 12
 1809              	 .cfi_offset 4,-12
 1810              	 .cfi_offset 7,-8
 1811              	 .cfi_offset 14,-4
 1812 0002 89B0     	 sub sp,sp,#36
 1813              	.LCFI98:
 1814              	 .cfi_def_cfa_offset 48
 1815 0004 02AF     	 add r7,sp,#8
 1816              	.LCFI99:
 1817              	 .cfi_def_cfa 7,40
 1818 0006 0346     	 mov r3,r0
 1819 0008 FB71     	 strb r3,[r7,#7]
 1820 000a 0B46     	 mov r3,r1
 1821 000c BB71     	 strb r3,[r7,#6]
 1822 000e 1346     	 mov r3,r2
 1823 0010 BB80     	 strh r3,[r7,#4]
 824:.././hal/sam3u1c/udphs_device.c **** 	bool b_dir_in;
 825:.././hal/sam3u1c/udphs_device.c **** 	uint16_t ep_allocated;
 826:.././hal/sam3u1c/udphs_device.c **** 	uint8_t nb_bank, bank, nb_tran = 0, i;
 1824              	 .loc 6 826 25
 1825 0012 0023     	 movs r3,#0
 1826 0014 FB74     	 strb r3,[r7,#19]
 827:.././hal/sam3u1c/udphs_device.c **** 	bool b_iso_hbw = false;
 1827              	 .loc 6 827 7
 1828 0016 0023     	 movs r3,#0
 1829 0018 7B74     	 strb r3,[r7,#17]
 828:.././hal/sam3u1c/udphs_device.c **** 
 829:.././hal/sam3u1c/udphs_device.c **** 	b_dir_in = ep & USB_EP_DIR_IN;
 1830              	 .loc 6 829 16
 1831 001a FB79     	 ldrb r3,[r7,#7]
 1832 001c 03F08003 	 and r3,r3,#128
 1833              	 .loc 6 829 11
 1834 0020 002B     	 cmp r3,#0
 1835 0022 14BF     	 ite ne
 1836 0024 0123     	 movne r3,#1
 1837 0026 0023     	 moveq r3,#0
 1838 0028 3B74     	 strb r3,[r7,#16]
 830:.././hal/sam3u1c/udphs_device.c **** 	ep = ep & USB_EP_ADDR_MASK;
 1839              	 .loc 6 830 5
 1840 002a FB79     	 ldrb r3,[r7,#7]
 1841 002c 03F00F03 	 and r3,r3,#15
 1842 0030 FB71     	 strb r3,[r7,#7]
 831:.././hal/sam3u1c/udphs_device.c **** 
 832:.././hal/sam3u1c/udphs_device.c **** 	if (ep > USB_DEVICE_MAX_EP) {
 1843              	 .loc 6 832 5
 1844 0032 FB79     	 ldrb r3,[r7,#7]
 1845 0034 022B     	 cmp r3,#2
 1846 0036 01D9     	 bls .L93
 833:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1847              	 .loc 6 833 10
 1848 0038 0023     	 movs r3,#0
 1849 003a B4E1     	 b .L94
 1850              	.L93:
 834:.././hal/sam3u1c/udphs_device.c **** 	}
 835:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_enabled(ep)) {
 1851              	 .loc 6 835 6
 1852 003c B34A     	 ldr r2,.L133
 1853 003e FB79     	 ldrb r3,[r7,#7]
 1854 0040 5B01     	 lsls r3,r3,#5
 1855 0042 1344     	 add r3,r3,r2
 1856 0044 03F58673 	 add r3,r3,#268
 1857 0048 1B68     	 ldr r3,[r3]
 1858 004a 03F00103 	 and r3,r3,#1
 1859              	 .loc 6 835 5
 1860 004e 002B     	 cmp r3,#0
 1861 0050 01D0     	 beq .L95
 836:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1862              	 .loc 6 836 10
 1863 0052 0023     	 movs r3,#0
 1864 0054 A7E1     	 b .L94
 1865              	.L95:
 837:.././hal/sam3u1c/udphs_device.c **** 	}
 838:.././hal/sam3u1c/udphs_device.c **** 
 839:.././hal/sam3u1c/udphs_device.c **** 	// Bank choice
 840:.././hal/sam3u1c/udphs_device.c **** 	switch (bmAttributes & USB_EP_TYPE_MASK) {
 1866              	 .loc 6 840 23
 1867 0056 BB79     	 ldrb r3,[r7,#6]
 1868 0058 03F00303 	 and r3,r3,#3
 1869              	 .loc 6 840 2
 1870 005c 032B     	 cmp r3,#3
 1871 005e 1AD0     	 beq .L96
 1872 0060 032B     	 cmp r3,#3
 1873 0062 1EDC     	 bgt .L97
 1874 0064 012B     	 cmp r3,#1
 1875 0066 02D0     	 beq .L98
 1876 0068 022B     	 cmp r3,#2
 1877 006a 17D0     	 beq .L99
 1878 006c 19E0     	 b .L97
 1879              	.L98:
 841:.././hal/sam3u1c/udphs_device.c **** 	case USB_EP_TYPE_ISOCHRONOUS:
 842:.././hal/sam3u1c/udphs_device.c **** 		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
 1880              	 .loc 6 842 15
 1881 006e FB79     	 ldrb r3,[r7,#7]
 1882 0070 002B     	 cmp r3,#0
 1883 0072 07D0     	 beq .L100
 1884              	 .loc 6 842 15 is_stmt 0 discriminator 1
 1885 0074 FB79     	 ldrb r3,[r7,#7]
 1886 0076 032B     	 cmp r3,#3
 1887 0078 04D0     	 beq .L100
 1888              	 .loc 6 842 15 discriminator 3
 1889 007a FB79     	 ldrb r3,[r7,#7]
 1890 007c 042B     	 cmp r3,#4
 1891 007e 01D0     	 beq .L100
 1892              	 .loc 6 842 15 discriminator 5
 1893 0080 0123     	 movs r3,#1
 1894 0082 00E0     	 b .L101
 1895              	.L100:
 1896              	 .loc 6 842 15 discriminator 6
 1897 0084 0023     	 movs r3,#0
 1898              	.L101:
 1899              	 .loc 6 842 13 is_stmt 1 discriminator 8
 1900 0086 7B74     	 strb r3,[r7,#17]
 1901 0088 7B7C     	 ldrb r3,[r7,#17]
 1902 008a 03F00103 	 and r3,r3,#1
 1903 008e 7B74     	 strb r3,[r7,#17]
 843:.././hal/sam3u1c/udphs_device.c **** 		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
 1904              	 .loc 6 843 11 discriminator 8
 1905 0090 0123     	 movs r3,#1
 1906 0092 7B75     	 strb r3,[r7,#21]
 844:.././hal/sam3u1c/udphs_device.c **** 		break;
 1907              	 .loc 6 844 3 discriminator 8
 1908 0094 07E0     	 b .L102
 1909              	.L96:
 845:.././hal/sam3u1c/udphs_device.c **** 	case USB_EP_TYPE_INTERRUPT:
 846:.././hal/sam3u1c/udphs_device.c **** 		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
 1910              	 .loc 6 846 11
 1911 0096 0123     	 movs r3,#1
 1912 0098 7B75     	 strb r3,[r7,#21]
 847:.././hal/sam3u1c/udphs_device.c **** 		break;
 1913              	 .loc 6 847 3
 1914 009a 04E0     	 b .L102
 1915              	.L99:
 848:.././hal/sam3u1c/udphs_device.c **** 	case USB_EP_TYPE_BULK:
 849:.././hal/sam3u1c/udphs_device.c **** 		nb_bank = UDD_BULK_NB_BANK(ep);
 1916              	 .loc 6 849 11
 1917 009c 0223     	 movs r3,#2
 1918 009e 7B75     	 strb r3,[r7,#21]
 850:.././hal/sam3u1c/udphs_device.c **** 		break;
 1919              	 .loc 6 850 3
 1920 00a0 01E0     	 b .L102
 1921              	.L97:
 851:.././hal/sam3u1c/udphs_device.c **** 	default:
 852:.././hal/sam3u1c/udphs_device.c **** 		Assert(false);
 853:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1922              	 .loc 6 853 10
 1923 00a2 0023     	 movs r3,#0
 1924 00a4 7FE1     	 b .L94
 1925              	.L102:
 854:.././hal/sam3u1c/udphs_device.c **** 	}
 855:.././hal/sam3u1c/udphs_device.c **** 	switch (nb_bank) {
 1926              	 .loc 6 855 2
 1927 00a6 7B7D     	 ldrb r3,[r7,#21]
 1928 00a8 032B     	 cmp r3,#3
 1929 00aa 0CD0     	 beq .L103
 1930 00ac 032B     	 cmp r3,#3
 1931 00ae 0DDC     	 bgt .L104
 1932 00b0 012B     	 cmp r3,#1
 1933 00b2 02D0     	 beq .L105
 1934 00b4 022B     	 cmp r3,#2
 1935 00b6 03D0     	 beq .L106
 1936 00b8 08E0     	 b .L104
 1937              	.L105:
 856:.././hal/sam3u1c/udphs_device.c **** 	case 1:
 857:.././hal/sam3u1c/udphs_device.c **** 		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
 1938              	 .loc 6 857 8
 1939 00ba 0123     	 movs r3,#1
 1940 00bc 3B75     	 strb r3,[r7,#20]
 858:.././hal/sam3u1c/udphs_device.c **** 		break;
 1941              	 .loc 6 858 3
 1942 00be 07E0     	 b .L107
 1943              	.L106:
 859:.././hal/sam3u1c/udphs_device.c **** 	case 2:
 860:.././hal/sam3u1c/udphs_device.c **** 		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
 1944              	 .loc 6 860 8
 1945 00c0 0223     	 movs r3,#2
 1946 00c2 3B75     	 strb r3,[r7,#20]
 861:.././hal/sam3u1c/udphs_device.c **** 		break;
 1947              	 .loc 6 861 3
 1948 00c4 04E0     	 b .L107
 1949              	.L103:
 862:.././hal/sam3u1c/udphs_device.c **** 	case 3:
 863:.././hal/sam3u1c/udphs_device.c **** 		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
 1950              	 .loc 6 863 8
 1951 00c6 0323     	 movs r3,#3
 1952 00c8 3B75     	 strb r3,[r7,#20]
 864:.././hal/sam3u1c/udphs_device.c **** 		break;
 1953              	 .loc 6 864 3
 1954 00ca 01E0     	 b .L107
 1955              	.L104:
 865:.././hal/sam3u1c/udphs_device.c **** 	default:
 866:.././hal/sam3u1c/udphs_device.c **** 		Assert(false);
 867:.././hal/sam3u1c/udphs_device.c **** 		return false;
 1956              	 .loc 6 867 10
 1957 00cc 0023     	 movs r3,#0
 1958 00ce 6AE1     	 b .L94
 1959              	.L107:
 868:.././hal/sam3u1c/udphs_device.c **** 	}
 869:.././hal/sam3u1c/udphs_device.c **** 	if (b_iso_hbw) {
 1960              	 .loc 6 869 5
 1961 00d0 7B7C     	 ldrb r3,[r7,#17]
 1962 00d2 002B     	 cmp r3,#0
 1963 00d4 17D0     	 beq .L108
 870:.././hal/sam3u1c/udphs_device.c **** 		switch(MaxEndpointSize & (0x3u << 11)) {
 1964              	 .loc 6 870 26
 1965 00d6 BB88     	 ldrh r3,[r7,#4]
 1966 00d8 03F4C053 	 and r3,r3,#6144
 1967              	 .loc 6 870 3
 1968 00dc B3F5006F 	 cmp r3,#2048
 1969 00e0 03D0     	 beq .L109
 1970 00e2 B3F5805F 	 cmp r3,#4096
 1971 00e6 03D0     	 beq .L110
 1972 00e8 05E0     	 b .L131
 1973              	.L109:
 871:.././hal/sam3u1c/udphs_device.c **** 		case (0x1u << 11):
 872:.././hal/sam3u1c/udphs_device.c **** 			nb_tran = 2;
 1974              	 .loc 6 872 12
 1975 00ea 0223     	 movs r3,#2
 1976 00ec FB74     	 strb r3,[r7,#19]
 873:.././hal/sam3u1c/udphs_device.c **** 			break;
 1977              	 .loc 6 873 4
 1978 00ee 05E0     	 b .L112
 1979              	.L110:
 874:.././hal/sam3u1c/udphs_device.c **** 		case (0x2u << 11):
 875:.././hal/sam3u1c/udphs_device.c **** 			nb_tran = 3;
 1980              	 .loc 6 875 12
 1981 00f0 0323     	 movs r3,#3
 1982 00f2 FB74     	 strb r3,[r7,#19]
 876:.././hal/sam3u1c/udphs_device.c **** 			break;
 1983              	 .loc 6 876 4
 1984 00f4 02E0     	 b .L112
 1985              	.L131:
 877:.././hal/sam3u1c/udphs_device.c **** 		default:
 878:.././hal/sam3u1c/udphs_device.c **** 			nb_tran = 1;
 1986              	 .loc 6 878 12
 1987 00f6 0123     	 movs r3,#1
 1988 00f8 FB74     	 strb r3,[r7,#19]
 879:.././hal/sam3u1c/udphs_device.c **** 			break;
 1989              	 .loc 6 879 4
 1990 00fa 00BF     	 nop
 1991              	.L112:
 880:.././hal/sam3u1c/udphs_device.c **** 		}
 881:.././hal/sam3u1c/udphs_device.c **** 		MaxEndpointSize &= ~(0x3u << 11);
 1992              	 .loc 6 881 19
 1993 00fc BB88     	 ldrh r3,[r7,#4]
 1994 00fe 23F4C053 	 bic r3,r3,#6144
 1995 0102 BB80     	 strh r3,[r7,#4]
 1996 0104 06E0     	 b .L113
 1997              	.L108:
 882:.././hal/sam3u1c/udphs_device.c **** 	} else if (MaxEndpointSize & (0x3u << 11)) {
 1998              	 .loc 6 882 29
 1999 0106 BB88     	 ldrh r3,[r7,#4]
 2000 0108 03F4C053 	 and r3,r3,#6144
 2001              	 .loc 6 882 12
 2002 010c 002B     	 cmp r3,#0
 2003 010e 01D0     	 beq .L113
 883:.././hal/sam3u1c/udphs_device.c **** 		// High BW not supported
 884:.././hal/sam3u1c/udphs_device.c **** 		return false;
 2004              	 .loc 6 884 10
 2005 0110 0023     	 movs r3,#0
 2006 0112 48E1     	 b .L94
 2007              	.L113:
 885:.././hal/sam3u1c/udphs_device.c **** 	}
 886:.././hal/sam3u1c/udphs_device.c **** 
 887:.././hal/sam3u1c/udphs_device.c **** 	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
 888:.././hal/sam3u1c/udphs_device.c **** 	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));
 889:.././hal/sam3u1c/udphs_device.c **** 
 890:.././hal/sam3u1c/udphs_device.c **** 	// Set configuration of new endpoint
 891:.././hal/sam3u1c/udphs_device.c **** 	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
 892:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
 2008              	 .loc 6 892 2
 2009 0114 7D4A     	 ldr r2,.L133
 2010 0116 FB79     	 ldrb r3,[r7,#7]
 2011 0118 0833     	 adds r3,r3,#8
 2012 011a 5B01     	 lsls r3,r3,#5
 2013 011c 1344     	 add r3,r3,r2
 2014 011e 1B68     	 ldr r3,[r3]
 2015 0120 23F47F73 	 bic r3,r3,#1020
 2016 0124 23F00303 	 bic r3,r3,#3
 2017 0128 BA79     	 ldrb r2,[r7,#6]
 2018 012a 1201     	 lsls r2,r2,#4
 2019 012c 02F03002 	 and r2,r2,#48
 2020 0130 397C     	 ldrb r1,[r7,#16]
 2021 0132 0029     	 cmp r1,#0
 2022 0134 01D0     	 beq .L114
 2023              	 .loc 6 892 2 is_stmt 0 discriminator 1
 2024 0136 0821     	 movs r1,#8
 2025 0138 00E0     	 b .L115
 2026              	.L114:
 2027              	 .loc 6 892 2 discriminator 2
 2028 013a 0021     	 movs r1,#0
 2029              	.L115:
 2030              	 .loc 6 892 2 discriminator 4
 2031 013c 1143     	 orrs r1,r1,r2
 2032 013e BA88     	 ldrh r2,[r7,#4]
 2033 0140 B2F5806F 	 cmp r2,#1024
 2034 0144 07D2     	 bcs .L116
 2035              	 .loc 6 892 2 discriminator 5
 2036 0146 BA88     	 ldrh r2,[r7,#4]
 2037 0148 082A     	 cmp r2,#8
 2038 014a 38BF     	 it cc
 2039 014c 0822     	 movcc r2,#8
 2040 014e 92B2     	 uxth r2,r2
 2041 0150 5200     	 lsls r2,r2,#1
 2042 0152 013A     	 subs r2,r2,#1
 2043 0154 01E0     	 b .L117
 2044              	.L116:
 2045              	 .loc 6 892 2 discriminator 6
 2046 0156 40F2FF72 	 movw r2,#2047
 2047              	.L117:
 2048              	 .loc 6 892 2 discriminator 8
 2049 015a B2FA82F2 	 clz r2,r2
 2050 015e C2F11C02 	 rsb r2,r2,#28
 2051 0162 1143     	 orrs r1,r1,r2
 2052 0164 3A7D     	 ldrb r2,[r7,#20]
 2053 0166 9201     	 lsls r2,r2,#6
 2054 0168 D2B2     	 uxtb r2,r2
 2055 016a 1143     	 orrs r1,r1,r2
 2056 016c 7A7C     	 ldrb r2,[r7,#17]
 2057 016e 002A     	 cmp r2,#0
 2058 0170 04D0     	 beq .L118
 2059              	 .loc 6 892 2 discriminator 9
 2060 0172 FA7C     	 ldrb r2,[r7,#19]
 2061 0174 1202     	 lsls r2,r2,#8
 2062 0176 02F44072 	 and r2,r2,#768
 2063 017a 00E0     	 b .L119
 2064              	.L118:
 2065              	 .loc 6 892 2 discriminator 10
 2066 017c 0022     	 movs r2,#0
 2067              	.L119:
 2068              	 .loc 6 892 2 discriminator 12
 2069 017e 0A43     	 orrs r2,r2,r1
 2070 0180 C2F30902 	 ubfx r2,r2,#0,#10
 2071 0184 6148     	 ldr r0,.L133
 2072 0186 F979     	 ldrb r1,[r7,#7]
 2073 0188 1A43     	 orrs r2,r2,r3
 2074 018a 01F10803 	 add r3,r1,#8
 2075 018e 5B01     	 lsls r3,r3,#5
 2076 0190 0344     	 add r3,r3,r0
 2077 0192 1A60     	 str r2,[r3]
 893:.././hal/sam3u1c/udphs_device.c **** 			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
 894:.././hal/sam3u1c/udphs_device.c **** 	if (!Is_udd_endpoint_mapped(ep)) {
 2078              	 .loc 6 894 7 is_stmt 1 discriminator 12
 2079 0194 5D4A     	 ldr r2,.L133
 2080 0196 FB79     	 ldrb r3,[r7,#7]
 2081 0198 0833     	 adds r3,r3,#8
 2082 019a 5B01     	 lsls r3,r3,#5
 2083 019c 1344     	 add r3,r3,r2
 2084 019e 1B68     	 ldr r3,[r3]
 2085              	 .loc 6 894 5 discriminator 12
 2086 01a0 002B     	 cmp r3,#0
 2087 01a2 01DB     	 blt .L120
 895:.././hal/sam3u1c/udphs_device.c **** 		return false;
 2088              	 .loc 6 895 10
 2089 01a4 0023     	 movs r3,#0
 2090 01a6 FEE0     	 b .L94
 2091              	.L120:
 896:.././hal/sam3u1c/udphs_device.c **** 	}
 897:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_endpoint(ep);
 2092              	 .loc 6 897 2
 2093 01a8 584A     	 ldr r2,.L133
 2094 01aa FB79     	 ldrb r3,[r7,#7]
 2095 01ac 0833     	 adds r3,r3,#8
 2096 01ae 5B01     	 lsls r3,r3,#5
 2097 01b0 1344     	 add r3,r3,r2
 2098 01b2 0433     	 adds r3,r3,#4
 2099 01b4 0122     	 movs r2,#1
 2100 01b6 1A60     	 str r2,[r3]
 898:.././hal/sam3u1c/udphs_device.c **** 
 899:.././hal/sam3u1c/udphs_device.c **** 	// To avoid conflict during reorganization of the DPRAM
 900:.././hal/sam3u1c/udphs_device.c **** 	// the superior endpoint must be unallocated and reallocated
 901:.././hal/sam3u1c/udphs_device.c **** 	ep_allocated = 0;
 2101              	 .loc 6 901 15
 2102 01b8 0023     	 movs r3,#0
 2103 01ba FB82     	 strh r3,[r7,#22]
 902:.././hal/sam3u1c/udphs_device.c **** 
 903:.././hal/sam3u1c/udphs_device.c **** 	// Unalloc endpoints superior
 904:.././hal/sam3u1c/udphs_device.c **** 	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
 2104              	 .loc 6 904 9
 2105 01bc 0223     	 movs r3,#2
 2106 01be BB74     	 strb r3,[r7,#18]
 2107              	 .loc 6 904 2
 2108 01c0 39E0     	 b .L121
 2109              	.L123:
 905:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_enabled(i)) {
 2110              	 .loc 6 905 7
 2111 01c2 524A     	 ldr r2,.L133
 2112 01c4 BB7C     	 ldrb r3,[r7,#18]
 2113 01c6 5B01     	 lsls r3,r3,#5
 2114 01c8 1344     	 add r3,r3,r2
 2115 01ca 03F58673 	 add r3,r3,#268
 2116 01ce 1B68     	 ldr r3,[r3]
 2117 01d0 03F00103 	 and r3,r3,#1
 2118              	 .loc 6 905 6
 2119 01d4 002B     	 cmp r3,#0
 2120 01d6 2BD0     	 beq .L122
 906:.././hal/sam3u1c/udphs_device.c **** 			// Save number of bank value
 907:.././hal/sam3u1c/udphs_device.c **** 			bank = udd_get_endpoint_bank(i);
 2121              	 .loc 6 907 11
 2122 01d8 4C4A     	 ldr r2,.L133
 2123 01da BB7C     	 ldrb r3,[r7,#18]
 2124 01dc 0833     	 adds r3,r3,#8
 2125 01de 5B01     	 lsls r3,r3,#5
 2126 01e0 1344     	 add r3,r3,r2
 2127 01e2 1B68     	 ldr r3,[r3]
 2128 01e4 9B09     	 lsrs r3,r3,#6
 2129 01e6 DBB2     	 uxtb r3,r3
 2130              	 .loc 6 907 9
 2131 01e8 03F00303 	 and r3,r3,#3
 2132 01ec 3B75     	 strb r3,[r7,#20]
 908:.././hal/sam3u1c/udphs_device.c **** 			ep_allocated |=  bank << (i * 2);
 2133              	 .loc 6 908 26
 2134 01ee 3A7D     	 ldrb r2,[r7,#20]
 2135              	 .loc 6 908 32
 2136 01f0 BB7C     	 ldrb r3,[r7,#18]
 2137 01f2 5B00     	 lsls r3,r3,#1
 2138              	 .loc 6 908 26
 2139 01f4 02FA03F3 	 lsl r3,r2,r3
 2140              	 .loc 6 908 17
 2141 01f8 1AB2     	 sxth r2,r3
 2142 01fa B7F91630 	 ldrsh r3,[r7,#22]
 2143 01fe 1343     	 orrs r3,r3,r2
 2144 0200 1BB2     	 sxth r3,r3
 2145 0202 FB82     	 strh r3,[r7,#22]
 909:.././hal/sam3u1c/udphs_device.c **** 			// Disable and unallocate endpoint
 910:.././hal/sam3u1c/udphs_device.c **** 			udd_disable_endpoint(i);
 2146              	 .loc 6 910 4
 2147 0204 414A     	 ldr r2,.L133
 2148 0206 BB7C     	 ldrb r3,[r7,#18]
 2149 0208 5B01     	 lsls r3,r3,#5
 2150 020a 1344     	 add r3,r3,r2
 2151 020c 03F58473 	 add r3,r3,#264
 2152 0210 0122     	 movs r2,#1
 2153 0212 1A60     	 str r2,[r3]
 911:.././hal/sam3u1c/udphs_device.c **** 			udd_configure_endpoint_bank(i, 0);
 2154              	 .loc 6 911 4
 2155 0214 3D4A     	 ldr r2,.L133
 2156 0216 BB7C     	 ldrb r3,[r7,#18]
 2157 0218 0833     	 adds r3,r3,#8
 2158 021a 5B01     	 lsls r3,r3,#5
 2159 021c 1344     	 add r3,r3,r2
 2160 021e 1A68     	 ldr r2,[r3]
 2161 0220 3A49     	 ldr r1,.L133
 2162 0222 BB7C     	 ldrb r3,[r7,#18]
 2163 0224 22F0C002 	 bic r2,r2,#192
 2164 0228 0833     	 adds r3,r3,#8
 2165 022a 5B01     	 lsls r3,r3,#5
 2166 022c 0B44     	 add r3,r3,r1
 2167 022e 1A60     	 str r2,[r3]
 2168              	.L122:
 904:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_enabled(i)) {
 2169              	 .loc 6 904 40 discriminator 2
 2170 0230 BB7C     	 ldrb r3,[r7,#18]
 2171 0232 013B     	 subs r3,r3,#1
 2172 0234 BB74     	 strb r3,[r7,#18]
 2173              	.L121:
 904:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_enabled(i)) {
 2174              	 .loc 6 904 2 discriminator 1
 2175 0236 BA7C     	 ldrb r2,[r7,#18]
 2176 0238 FB79     	 ldrb r3,[r7,#7]
 2177 023a 9A42     	 cmp r2,r3
 2178 023c C1D2     	 bcs .L123
 912:.././hal/sam3u1c/udphs_device.c **** 
 913:.././hal/sam3u1c/udphs_device.c **** 		}
 914:.././hal/sam3u1c/udphs_device.c **** 	}
 915:.././hal/sam3u1c/udphs_device.c **** 
 916:.././hal/sam3u1c/udphs_device.c **** 	// Realloc/Enable endpoints
 917:.././hal/sam3u1c/udphs_device.c **** 	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
 2179              	 .loc 6 917 9
 2180 023e FB79     	 ldrb r3,[r7,#7]
 2181 0240 BB74     	 strb r3,[r7,#18]
 2182              	 .loc 6 917 2
 2183 0242 ABE0     	 b .L124
 2184              	.L130:
 2185              	.LBB30:
 918:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
 2186              	 .loc 6 918 41
 2187 0244 BB7C     	 ldrb r3,[r7,#18]
 2188 0246 5A1E     	 subs r2,r3,#1
 2189              	 .loc 6 918 17
 2190 0248 1346     	 mov r3,r2
 2191 024a 5B00     	 lsls r3,r3,#1
 2192 024c 1344     	 add r3,r3,r2
 2193 024e DB00     	 lsls r3,r3,#3
 2194 0250 2F4A     	 ldr r2,.L133+4
 2195 0252 1344     	 add r3,r3,r2
 2196 0254 FB60     	 str r3,[r7,#12]
 919:.././hal/sam3u1c/udphs_device.c **** 		bool b_restart = ptr_job->busy;
 2197              	 .loc 6 919 27
 2198 0256 FB68     	 ldr r3,[r7,#12]
 2199 0258 1B7D     	 ldrb r3,[r3,#20]
 2200 025a C3F30003 	 ubfx r3,r3,#0,#1
 2201 025e DBB2     	 uxtb r3,r3
 2202              	 .loc 6 919 8
 2203 0260 002B     	 cmp r3,#0
 2204 0262 14BF     	 ite ne
 2205 0264 0123     	 movne r3,#1
 2206 0266 0023     	 moveq r3,#0
 2207 0268 FB72     	 strb r3,[r7,#11]
 920:.././hal/sam3u1c/udphs_device.c **** 		// Unallocated banks?
 921:.././hal/sam3u1c/udphs_device.c **** 		bank = (ep_allocated >> (i * 2)) & 0x03;
 2208              	 .loc 6 921 24
 2209 026a FA8A     	 ldrh r2,[r7,#22]
 2210              	 .loc 6 921 30
 2211 026c BB7C     	 ldrb r3,[r7,#18]
 2212 026e 5B00     	 lsls r3,r3,#1
 2213              	 .loc 6 921 24
 2214 0270 42FA03F3 	 asr r3,r2,r3
 2215              	 .loc 6 921 36
 2216 0274 DBB2     	 uxtb r3,r3
 2217              	 .loc 6 921 8
 2218 0276 03F00303 	 and r3,r3,#3
 2219 027a 3B75     	 strb r3,[r7,#20]
 922:.././hal/sam3u1c/udphs_device.c **** 		if (bank == 0) {
 2220              	 .loc 6 922 6
 2221 027c 3B7D     	 ldrb r3,[r7,#20]
 2222 027e 002B     	 cmp r3,#0
 2223 0280 00F08880 	 beq .L132
 923:.././hal/sam3u1c/udphs_device.c **** 			continue;
 924:.././hal/sam3u1c/udphs_device.c **** 		}
 925:.././hal/sam3u1c/udphs_device.c **** 		// Restart running job because
 926:.././hal/sam3u1c/udphs_device.c **** 		// memory window slides up and its data is lost
 927:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->busy = false;
 2224              	 .loc 6 927 17
 2225 0284 FA68     	 ldr r2,[r7,#12]
 2226 0286 137D     	 ldrb r3,[r2,#20]
 2227 0288 6FF30003 	 bfc r3,#0,#1
 2228 028c 1375     	 strb r3,[r2,#20]
 928:.././hal/sam3u1c/udphs_device.c **** 		// Re-allocate memory
 929:.././hal/sam3u1c/udphs_device.c **** 		udd_configure_endpoint_bank(i, bank);
 2229              	 .loc 6 929 3
 2230 028e 1F4A     	 ldr r2,.L133
 2231 0290 BB7C     	 ldrb r3,[r7,#18]
 2232 0292 0833     	 adds r3,r3,#8
 2233 0294 5B01     	 lsls r3,r3,#5
 2234 0296 1344     	 add r3,r3,r2
 2235 0298 1B68     	 ldr r3,[r3]
 2236 029a 23F0C001 	 bic r1,r3,#192
 2237 029e 3B7D     	 ldrb r3,[r7,#20]
 2238 02a0 9B01     	 lsls r3,r3,#6
 2239 02a2 DAB2     	 uxtb r2,r3
 2240 02a4 1948     	 ldr r0,.L133
 2241 02a6 BB7C     	 ldrb r3,[r7,#18]
 2242 02a8 0A43     	 orrs r2,r2,r1
 2243 02aa 0833     	 adds r3,r3,#8
 2244 02ac 5B01     	 lsls r3,r3,#5
 2245 02ae 0344     	 add r3,r3,r0
 2246 02b0 1A60     	 str r2,[r3]
 930:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_endpoint(i);
 2247              	 .loc 6 930 3
 2248 02b2 164A     	 ldr r2,.L133
 2249 02b4 BB7C     	 ldrb r3,[r7,#18]
 2250 02b6 0833     	 adds r3,r3,#8
 2251 02b8 5B01     	 lsls r3,r3,#5
 2252 02ba 1344     	 add r3,r3,r2
 2253 02bc 0433     	 adds r3,r3,#4
 2254 02be 0122     	 movs r2,#1
 2255 02c0 1A60     	 str r2,[r3]
 931:.././hal/sam3u1c/udphs_device.c **** 		if (!Is_udd_endpoint_mapped(i)) {
 2256              	 .loc 6 931 8
 2257 02c2 124A     	 ldr r2,.L133
 2258 02c4 BB7C     	 ldrb r3,[r7,#18]
 2259 02c6 0833     	 adds r3,r3,#8
 2260 02c8 5B01     	 lsls r3,r3,#5
 2261 02ca 1344     	 add r3,r3,r2
 2262 02cc 1B68     	 ldr r3,[r3]
 2263              	 .loc 6 931 6
 2264 02ce 002B     	 cmp r3,#0
 2265 02d0 20DB     	 blt .L127
 932:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("ErrRealloc%d-JobE ", i);
 933:.././hal/sam3u1c/udphs_device.c **** 			if (NULL == ptr_job->call_trans) {
 2266              	 .loc 6 933 23
 2267 02d2 FB68     	 ldr r3,[r7,#12]
 2268 02d4 1B68     	 ldr r3,[r3]
 2269              	 .loc 6 933 7
 2270 02d6 002B     	 cmp r3,#0
 2271 02d8 01D1     	 bne .L128
 934:.././hal/sam3u1c/udphs_device.c **** 				return false;
 2272              	 .loc 6 934 12
 2273 02da 0023     	 movs r3,#0
 2274 02dc 63E0     	 b .L94
 2275              	.L128:
 935:.././hal/sam3u1c/udphs_device.c **** 			}
 936:.././hal/sam3u1c/udphs_device.c **** 			if (Is_udd_endpoint_in(i)) {
 2276              	 .loc 6 936 8
 2277 02de 0B4A     	 ldr r2,.L133
 2278 02e0 BB7C     	 ldrb r3,[r7,#18]
 2279 02e2 0833     	 adds r3,r3,#8
 2280 02e4 5B01     	 lsls r3,r3,#5
 2281 02e6 1344     	 add r3,r3,r2
 2282 02e8 1B68     	 ldr r3,[r3]
 2283 02ea 03F00803 	 and r3,r3,#8
 2284              	 .loc 6 936 7
 2285 02ee 002B     	 cmp r3,#0
 2286 02f0 03D0     	 beq .L129
 937:.././hal/sam3u1c/udphs_device.c **** 				i |= USB_EP_DIR_IN;
 2287              	 .loc 6 937 7
 2288 02f2 BB7C     	 ldrb r3,[r7,#18]
 2289 02f4 63F07F03 	 orn r3,r3,#127
 2290 02f8 BB74     	 strb r3,[r7,#18]
 2291              	.L129:
 938:.././hal/sam3u1c/udphs_device.c **** 			}
 939:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
 2292              	 .loc 6 939 11
 2293 02fa FB68     	 ldr r3,[r7,#12]
 2294 02fc 1B68     	 ldr r3,[r3]
 2295              	 .loc 6 939 4
 2296 02fe FA68     	 ldr r2,[r7,#12]
 2297 0300 D168     	 ldr r1,[r2,#12]
 2298 0302 BA7C     	 ldrb r2,[r7,#18]
 2299 0304 0120     	 movs r0,#1
 2300 0306 9847     	 blx r3
 2301              	.LVL49:
 940:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->buf_cnt, i);
 941:.././hal/sam3u1c/udphs_device.c **** 			return false;
 2302              	 .loc 6 941 11
 2303 0308 0023     	 movs r3,#0
 2304 030a 4CE0     	 b .L94
 2305              	.L134:
 2306              	 .align 2
 2307              	.L133:
 2308 030c 00400A40 	 .word 1074413568
 2309 0310 00000000 	 .word udd_ep_job
 2310              	.L127:
 942:.././hal/sam3u1c/udphs_device.c **** 		}
 943:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_endpoint_bank_autoswitch(i);
 2311              	 .loc 6 943 3
 2312 0314 264A     	 ldr r2,.L135
 2313 0316 BB7C     	 ldrb r3,[r7,#18]
 2314 0318 0833     	 adds r3,r3,#8
 2315 031a 5B01     	 lsls r3,r3,#5
 2316 031c 1344     	 add r3,r3,r2
 2317 031e 0433     	 adds r3,r3,#4
 2318 0320 1A68     	 ldr r2,[r3]
 2319 0322 2349     	 ldr r1,.L135
 2320 0324 BB7C     	 ldrb r3,[r7,#18]
 2321 0326 42F00202 	 orr r2,r2,#2
 2322 032a 0833     	 adds r3,r3,#8
 2323 032c 5B01     	 lsls r3,r3,#5
 2324 032e 0B44     	 add r3,r3,r1
 2325 0330 0433     	 adds r3,r3,#4
 2326 0332 1A60     	 str r2,[r3]
 944:.././hal/sam3u1c/udphs_device.c **** 		if (b_restart) {
 2327              	 .loc 6 944 6
 2328 0334 FB7A     	 ldrb r3,[r7,#11]
 2329 0336 002B     	 cmp r3,#0
 2330 0338 2DD0     	 beq .L126
 945:.././hal/sam3u1c/udphs_device.c **** 			// Re-run the job remaining part
 946:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->buf_cnt -= ptr_job->buf_load;
 2331              	 .loc 6 946 21
 2332 033a FB68     	 ldr r3,[r7,#12]
 2333 033c DA68     	 ldr r2,[r3,#12]
 2334              	 .loc 6 946 31
 2335 033e FB68     	 ldr r3,[r7,#12]
 2336 0340 1B69     	 ldr r3,[r3,#16]
 2337              	 .loc 6 946 21
 2338 0342 D21A     	 subs r2,r2,r3
 2339 0344 FB68     	 ldr r3,[r7,#12]
 2340 0346 DA60     	 str r2,[r3,#12]
 947:.././hal/sam3u1c/udphs_device.c **** 			b_restart = udd_ep_run(i,
 948:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->b_shortpacket,
 2341              	 .loc 6 948 13
 2342 0348 FB68     	 ldr r3,[r7,#12]
 2343 034a 1B7D     	 ldrb r3,[r3,#20]
 2344 034c C3F34003 	 ubfx r3,r3,#1,#1
 2345 0350 DBB2     	 uxtb r3,r3
 947:.././hal/sam3u1c/udphs_device.c **** 			b_restart = udd_ep_run(i,
 2346              	 .loc 6 947 16
 2347 0352 002B     	 cmp r3,#0
 2348 0354 14BF     	 ite ne
 2349 0356 0123     	 movne r3,#1
 2350 0358 0023     	 moveq r3,#0
 2351 035a D9B2     	 uxtb r1,r3
 949:.././hal/sam3u1c/udphs_device.c **** 					&ptr_job->buf[ptr_job->buf_cnt],
 2352              	 .loc 6 949 14
 2353 035c FB68     	 ldr r3,[r7,#12]
 2354 035e 5A68     	 ldr r2,[r3,#4]
 2355              	 .loc 6 949 27
 2356 0360 FB68     	 ldr r3,[r7,#12]
 2357 0362 DB68     	 ldr r3,[r3,#12]
 947:.././hal/sam3u1c/udphs_device.c **** 			b_restart = udd_ep_run(i,
 2358              	 .loc 6 947 16
 2359 0364 D418     	 adds r4,r2,r3
 950:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->buf_size
 2360              	 .loc 6 950 13
 2361 0366 FB68     	 ldr r3,[r7,#12]
 2362 0368 9A68     	 ldr r2,[r3,#8]
 951:.././hal/sam3u1c/udphs_device.c **** 						- ptr_job->buf_cnt,
 2363              	 .loc 6 951 16
 2364 036a FB68     	 ldr r3,[r7,#12]
 2365 036c DB68     	 ldr r3,[r3,#12]
 947:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->b_shortpacket,
 2366              	 .loc 6 947 16
 2367 036e D21A     	 subs r2,r2,r3
 2368 0370 FB68     	 ldr r3,[r7,#12]
 2369 0372 1B68     	 ldr r3,[r3]
 2370 0374 B87C     	 ldrb r0,[r7,#18]
 2371 0376 0093     	 str r3,[sp]
 2372 0378 1346     	 mov r3,r2
 2373 037a 2246     	 mov r2,r4
 2374 037c 0D4C     	 ldr r4,.L135+4
 2375 037e A047     	 blx r4
 2376              	.LVL50:
 2377 0380 0346     	 mov r3,r0
 2378 0382 FB72     	 strb r3,[r7,#11]
 952:.././hal/sam3u1c/udphs_device.c **** 					ptr_job->call_trans);
 953:.././hal/sam3u1c/udphs_device.c **** 			if (!b_restart) {
 2379              	 .loc 6 953 8
 2380 0384 FB7A     	 ldrb r3,[r7,#11]
 2381 0386 83F00103 	 eor r3,r3,#1
 2382 038a DBB2     	 uxtb r3,r3
 2383              	 .loc 6 953 7
 2384 038c 002B     	 cmp r3,#0
 2385 038e 02D0     	 beq .L126
 954:.././hal/sam3u1c/udphs_device.c **** 				dbg_print("ErrReRun%d ", i);
 955:.././hal/sam3u1c/udphs_device.c **** 				return false;
 2386              	 .loc 6 955 12
 2387 0390 0023     	 movs r3,#0
 2388 0392 08E0     	 b .L94
 2389              	.L132:
 923:.././hal/sam3u1c/udphs_device.c **** 		}
 2390              	 .loc 6 923 4
 2391 0394 00BF     	 nop
 2392              	.L126:
 2393              	.LBE30:
 917:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
 2394              	 .loc 6 917 40 discriminator 2
 2395 0396 BB7C     	 ldrb r3,[r7,#18]
 2396 0398 0133     	 adds r3,r3,#1
 2397 039a BB74     	 strb r3,[r7,#18]
 2398              	.L124:
 917:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
 2399              	 .loc 6 917 2 discriminator 1
 2400 039c BB7C     	 ldrb r3,[r7,#18]
 2401 039e 022B     	 cmp r3,#2
 2402 03a0 7FF650AF 	 bls .L130
 956:.././hal/sam3u1c/udphs_device.c **** 			}
 957:.././hal/sam3u1c/udphs_device.c **** 		}
 958:.././hal/sam3u1c/udphs_device.c **** 	}
 959:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
 960:.././hal/sam3u1c/udphs_device.c **** 	return true;
 2403              	 .loc 6 960 9
 2404 03a4 0123     	 movs r3,#1
 2405              	.L94:
 961:.././hal/sam3u1c/udphs_device.c **** }
 2406              	 .loc 6 961 1
 2407 03a6 1846     	 mov r0,r3
 2408 03a8 1C37     	 adds r7,r7,#28
 2409              	.LCFI100:
 2410              	 .cfi_def_cfa_offset 12
 2411 03aa BD46     	 mov sp,r7
 2412              	.LCFI101:
 2413              	 .cfi_def_cfa_register 13
 2414              	 
 2415 03ac 90BD     	 pop {r4,r7,pc}
 2416              	.L136:
 2417 03ae 00BF     	 .align 2
 2418              	.L135:
 2419 03b0 00400A40 	 .word 1074413568
 2420 03b4 00000000 	 .word udd_ep_run
 2421              	 .cfi_endproc
 2422              	.LFE152:
 2424              	 .section .text.udd_ep_free,"ax",%progbits
 2425              	 .align 1
 2426              	 .global udd_ep_free
 2427              	 .syntax unified
 2428              	 .thumb
 2429              	 .thumb_func
 2430              	 .fpu softvfp
 2432              	udd_ep_free:
 2433              	.LFB153:
 962:.././hal/sam3u1c/udphs_device.c **** 
 963:.././hal/sam3u1c/udphs_device.c **** 
 964:.././hal/sam3u1c/udphs_device.c **** void udd_ep_free(udd_ep_id_t ep)
 965:.././hal/sam3u1c/udphs_device.c **** {
 2434              	 .loc 6 965 1
 2435              	 .cfi_startproc
 2436              	 
 2437              	 
 2438 0000 80B5     	 push {r7,lr}
 2439              	.LCFI102:
 2440              	 .cfi_def_cfa_offset 8
 2441              	 .cfi_offset 7,-8
 2442              	 .cfi_offset 14,-4
 2443 0002 84B0     	 sub sp,sp,#16
 2444              	.LCFI103:
 2445              	 .cfi_def_cfa_offset 24
 2446 0004 00AF     	 add r7,sp,#0
 2447              	.LCFI104:
 2448              	 .cfi_def_cfa_register 7
 2449 0006 0346     	 mov r3,r0
 2450 0008 FB71     	 strb r3,[r7,#7]
 966:.././hal/sam3u1c/udphs_device.c **** 	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 2451              	 .loc 6 966 10
 2452 000a FB79     	 ldrb r3,[r7,#7]
 2453 000c 03F00F03 	 and r3,r3,#15
 2454 0010 FB73     	 strb r3,[r7,#15]
 967:.././hal/sam3u1c/udphs_device.c **** 
 968:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep_index) {
 2455              	 .loc 6 968 5
 2456 0012 FB7B     	 ldrb r3,[r7,#15]
 2457 0014 022B     	 cmp r3,#2
 2458 0016 28D8     	 bhi .L140
 969:.././hal/sam3u1c/udphs_device.c **** 		return;
 970:.././hal/sam3u1c/udphs_device.c **** 	}
 971:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_endpoint(ep_index);
 2459              	 .loc 6 971 2
 2460 0018 164A     	 ldr r2,.L141
 2461 001a FB7B     	 ldrb r3,[r7,#15]
 2462 001c 5B01     	 lsls r3,r3,#5
 2463 001e 1344     	 add r3,r3,r2
 2464 0020 03F58473 	 add r3,r3,#264
 2465 0024 0122     	 movs r2,#1
 2466 0026 1A60     	 str r2,[r3]
 972:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_endpoint_bank(ep_index, 0);
 2467              	 .loc 6 972 2
 2468 0028 124A     	 ldr r2,.L141
 2469 002a FB7B     	 ldrb r3,[r7,#15]
 2470 002c 0833     	 adds r3,r3,#8
 2471 002e 5B01     	 lsls r3,r3,#5
 2472 0030 1344     	 add r3,r3,r2
 2473 0032 1A68     	 ldr r2,[r3]
 2474 0034 0F49     	 ldr r1,.L141
 2475 0036 FB7B     	 ldrb r3,[r7,#15]
 2476 0038 22F0C002 	 bic r2,r2,#192
 2477 003c 0833     	 adds r3,r3,#8
 2478 003e 5B01     	 lsls r3,r3,#5
 2479 0040 0B44     	 add r3,r3,r1
 2480 0042 1A60     	 str r2,[r3]
 973:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_abort_job(ep);
 2481              	 .loc 6 973 2
 2482 0044 FB79     	 ldrb r3,[r7,#7]
 2483 0046 1846     	 mov r0,r3
 2484 0048 0B4B     	 ldr r3,.L141+4
 2485 004a 9847     	 blx r3
 2486              	.LVL51:
 974:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job[ep_index - 1].stall_requested = false;
 2487              	 .loc 6 974 22
 2488 004c FB7B     	 ldrb r3,[r7,#15]
 2489 004e 5A1E     	 subs r2,r3,#1
 2490              	 .loc 6 974 43
 2491 0050 0A49     	 ldr r1,.L141+8
 2492 0052 1346     	 mov r3,r2
 2493 0054 5B00     	 lsls r3,r3,#1
 2494 0056 1344     	 add r3,r3,r2
 2495 0058 DB00     	 lsls r3,r3,#3
 2496 005a 0B44     	 add r3,r3,r1
 2497 005c 03F11002 	 add r2,r3,#16
 2498 0060 1379     	 ldrb r3,[r2,#4]
 2499 0062 6FF38203 	 bfc r3,#2,#1
 2500 0066 1371     	 strb r3,[r2,#4]
 2501 0068 00E0     	 b .L137
 2502              	.L140:
 969:.././hal/sam3u1c/udphs_device.c **** 	}
 2503              	 .loc 6 969 3
 2504 006a 00BF     	 nop
 2505              	.L137:
 975:.././hal/sam3u1c/udphs_device.c **** }
 2506              	 .loc 6 975 1
 2507 006c 1037     	 adds r7,r7,#16
 2508              	.LCFI105:
 2509              	 .cfi_def_cfa_offset 8
 2510 006e BD46     	 mov sp,r7
 2511              	.LCFI106:
 2512              	 .cfi_def_cfa_register 13
 2513              	 
 2514 0070 80BD     	 pop {r7,pc}
 2515              	.L142:
 2516 0072 00BF     	 .align 2
 2517              	.L141:
 2518 0074 00400A40 	 .word 1074413568
 2519 0078 00000000 	 .word udd_ep_abort_job
 2520 007c 00000000 	 .word udd_ep_job
 2521              	 .cfi_endproc
 2522              	.LFE153:
 2524              	 .section .text.udd_ep_is_halted,"ax",%progbits
 2525              	 .align 1
 2526              	 .global udd_ep_is_halted
 2527              	 .syntax unified
 2528              	 .thumb
 2529              	 .thumb_func
 2530              	 .fpu softvfp
 2532              	udd_ep_is_halted:
 2533              	.LFB154:
 976:.././hal/sam3u1c/udphs_device.c **** 
 977:.././hal/sam3u1c/udphs_device.c **** 
 978:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_is_halted(udd_ep_id_t ep)
 979:.././hal/sam3u1c/udphs_device.c **** {
 2534              	 .loc 6 979 1
 2535              	 .cfi_startproc
 2536              	 
 2537              	 
 2538              	 
 2539 0000 80B4     	 push {r7}
 2540              	.LCFI107:
 2541              	 .cfi_def_cfa_offset 4
 2542              	 .cfi_offset 7,-4
 2543 0002 85B0     	 sub sp,sp,#20
 2544              	.LCFI108:
 2545              	 .cfi_def_cfa_offset 24
 2546 0004 00AF     	 add r7,sp,#0
 2547              	.LCFI109:
 2548              	 .cfi_def_cfa_register 7
 2549 0006 0346     	 mov r3,r0
 2550 0008 FB71     	 strb r3,[r7,#7]
 980:.././hal/sam3u1c/udphs_device.c **** 	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 2551              	 .loc 6 980 10
 2552 000a FB79     	 ldrb r3,[r7,#7]
 2553 000c 03F00F03 	 and r3,r3,#15
 2554 0010 FB73     	 strb r3,[r7,#15]
 981:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
 2555              	 .loc 6 981 47
 2556 0012 FB7B     	 ldrb r3,[r7,#15]
 2557 0014 5A1E     	 subs r2,r3,#1
 2558              	 .loc 6 981 16
 2559 0016 1346     	 mov r3,r2
 2560 0018 5B00     	 lsls r3,r3,#1
 2561 001a 1344     	 add r3,r3,r2
 2562 001c DB00     	 lsls r3,r3,#3
 2563 001e 104A     	 ldr r2,.L148
 2564 0020 1344     	 add r3,r3,r2
 2565 0022 BB60     	 str r3,[r7,#8]
 982:.././hal/sam3u1c/udphs_device.c **** 	return (Is_udd_endpoint_stall_requested(ep_index)
 2566              	 .loc 6 982 10
 2567 0024 0F4A     	 ldr r2,.L148+4
 2568 0026 FB7B     	 ldrb r3,[r7,#15]
 2569 0028 5B01     	 lsls r3,r3,#5
 2570 002a 1344     	 add r3,r3,r2
 2571 002c 03F58E73 	 add r3,r3,#284
 2572 0030 1B68     	 ldr r3,[r3]
 2573 0032 03F02003 	 and r3,r3,#32
 983:.././hal/sam3u1c/udphs_device.c **** 			|| ptr_job->stall_requested);
 2574              	 .loc 6 983 4
 2575 0036 002B     	 cmp r3,#0
 2576 0038 06D1     	 bne .L144
 2577              	 .loc 6 983 4 is_stmt 0 discriminator 2
 2578 003a BB68     	 ldr r3,[r7,#8]
 2579 003c 1B7D     	 ldrb r3,[r3,#20]
 2580 003e 03F00403 	 and r3,r3,#4
 2581 0042 DBB2     	 uxtb r3,r3
 2582 0044 002B     	 cmp r3,#0
 2583 0046 01D0     	 beq .L145
 2584              	.L144:
 2585              	 .loc 6 983 4 discriminator 3
 2586 0048 0123     	 movs r3,#1
 2587 004a 00E0     	 b .L146
 2588              	.L145:
 2589              	 .loc 6 983 4 discriminator 4
 2590 004c 0023     	 movs r3,#0
 2591              	.L146:
 2592              	 .loc 6 983 4 discriminator 6
 2593 004e 03F00103 	 and r3,r3,#1
 2594 0052 DBB2     	 uxtb r3,r3
 984:.././hal/sam3u1c/udphs_device.c **** }
 2595              	 .loc 6 984 1 is_stmt 1 discriminator 6
 2596 0054 1846     	 mov r0,r3
 2597 0056 1437     	 adds r7,r7,#20
 2598              	.LCFI110:
 2599              	 .cfi_def_cfa_offset 4
 2600 0058 BD46     	 mov sp,r7
 2601              	.LCFI111:
 2602              	 .cfi_def_cfa_register 13
 2603              	 
 2604 005a 80BC     	 pop {r7}
 2605              	.LCFI112:
 2606              	 .cfi_restore 7
 2607              	 .cfi_def_cfa_offset 0
 2608 005c 7047     	 bx lr
 2609              	.L149:
 2610 005e 00BF     	 .align 2
 2611              	.L148:
 2612 0060 00000000 	 .word udd_ep_job
 2613 0064 00400A40 	 .word 1074413568
 2614              	 .cfi_endproc
 2615              	.LFE154:
 2617              	 .section .text.udd_ep_set_halt,"ax",%progbits
 2618              	 .align 1
 2619              	 .global udd_ep_set_halt
 2620              	 .syntax unified
 2621              	 .thumb
 2622              	 .thumb_func
 2623              	 .fpu softvfp
 2625              	udd_ep_set_halt:
 2626              	.LFB155:
 985:.././hal/sam3u1c/udphs_device.c **** 
 986:.././hal/sam3u1c/udphs_device.c **** 
 987:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_set_halt(udd_ep_id_t ep)
 988:.././hal/sam3u1c/udphs_device.c **** {
 2627              	 .loc 6 988 1
 2628              	 .cfi_startproc
 2629              	 
 2630              	 
 2631              	 
 2632 0000 80B4     	 push {r7}
 2633              	.LCFI113:
 2634              	 .cfi_def_cfa_offset 4
 2635              	 .cfi_offset 7,-4
 2636 0002 85B0     	 sub sp,sp,#20
 2637              	.LCFI114:
 2638              	 .cfi_def_cfa_offset 24
 2639 0004 00AF     	 add r7,sp,#0
 2640              	.LCFI115:
 2641              	 .cfi_def_cfa_register 7
 2642 0006 0346     	 mov r3,r0
 2643 0008 FB71     	 strb r3,[r7,#7]
 989:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
 990:.././hal/sam3u1c/udphs_device.c **** 	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 2644              	 .loc 6 990 10
 2645 000a FB79     	 ldrb r3,[r7,#7]
 2646 000c 03F00F03 	 and r3,r3,#15
 2647 0010 FB73     	 strb r3,[r7,#15]
 991:.././hal/sam3u1c/udphs_device.c **** 
 992:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep_index) {
 2648              	 .loc 6 992 5
 2649 0012 FB7B     	 ldrb r3,[r7,#15]
 2650 0014 022B     	 cmp r3,#2
 2651 0016 01D9     	 bls .L151
 993:.././hal/sam3u1c/udphs_device.c **** 		return false;
 2652              	 .loc 6 993 10
 2653 0018 0023     	 movs r3,#0
 2654 001a 71E0     	 b .L152
 2655              	.L151:
 994:.././hal/sam3u1c/udphs_device.c **** 	}
 995:.././hal/sam3u1c/udphs_device.c **** 
 996:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep_index - 1];
 2656              	 .loc 6 996 33
 2657 001c FB7B     	 ldrb r3,[r7,#15]
 2658 001e 5A1E     	 subs r2,r3,#1
 2659              	 .loc 6 996 10
 2660 0020 1346     	 mov r3,r2
 2661 0022 5B00     	 lsls r3,r3,#1
 2662 0024 1344     	 add r3,r3,r2
 2663 0026 DB00     	 lsls r3,r3,#3
 2664 0028 384A     	 ldr r2,.L157
 2665 002a 1344     	 add r3,r3,r2
 2666 002c BB60     	 str r3,[r7,#8]
 997:.././hal/sam3u1c/udphs_device.c **** 
 998:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
 2667              	 .loc 6 998 6
 2668 002e 384A     	 ldr r2,.L157+4
 2669 0030 FB7B     	 ldrb r3,[r7,#15]
 2670 0032 5B01     	 lsls r3,r3,#5
 2671 0034 1344     	 add r3,r3,r2
 2672 0036 03F58E73 	 add r3,r3,#284
 2673 003a 1B68     	 ldr r3,[r3]
 2674 003c 03F02003 	 and r3,r3,#32
 2675              	 .loc 6 998 5
 2676 0040 002B     	 cmp r3,#0
 2677 0042 06D1     	 bne .L153
 999:.././hal/sam3u1c/udphs_device.c **** 			|| ptr_job->stall_requested) { // Endpoint stall is requested
 2678              	 .loc 6 999 4
 2679 0044 BB68     	 ldr r3,[r7,#8]
 2680 0046 1B7D     	 ldrb r3,[r3,#20]
 2681 0048 03F00403 	 and r3,r3,#4
 2682 004c DBB2     	 uxtb r3,r3
 2683 004e 002B     	 cmp r3,#0
 2684 0050 01D0     	 beq .L154
 2685              	.L153:
1000:.././hal/sam3u1c/udphs_device.c **** 		return true; // Already STALL
 2686              	 .loc 6 1000 10
 2687 0052 0123     	 movs r3,#1
 2688 0054 54E0     	 b .L152
 2689              	.L154:
1001:.././hal/sam3u1c/udphs_device.c **** 	}
1002:.././hal/sam3u1c/udphs_device.c **** 
1003:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->busy == true) {
 2690              	 .loc 6 1003 20
 2691 0056 BB68     	 ldr r3,[r7,#8]
 2692 0058 1B7D     	 ldrb r3,[r3,#20]
 2693 005a 03F00103 	 and r3,r3,#1
 2694 005e DBB2     	 uxtb r3,r3
 2695              	 .loc 6 1003 5
 2696 0060 002B     	 cmp r3,#0
 2697 0062 01D0     	 beq .L155
1004:.././hal/sam3u1c/udphs_device.c **** 		return false; // Job on going, stall impossible
 2698              	 .loc 6 1004 10
 2699 0064 0023     	 movs r3,#0
 2700 0066 4BE0     	 b .L152
 2701              	.L155:
1005:.././hal/sam3u1c/udphs_device.c **** 	}
1006:.././hal/sam3u1c/udphs_device.c **** 
1007:.././hal/sam3u1c/udphs_device.c **** 	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
 2702              	 .loc 6 1007 6
 2703 0068 97F90730 	 ldrsb r3,[r7,#7]
 2704              	 .loc 6 1007 5
 2705 006c 002B     	 cmp r3,#0
 2706 006e 25DA     	 bge .L156
 2707              	 .loc 6 1007 36 discriminator 1
 2708 0070 274A     	 ldr r2,.L157+4
 2709 0072 FB7B     	 ldrb r3,[r7,#15]
 2710 0074 5B01     	 lsls r3,r3,#5
 2711 0076 1344     	 add r3,r3,r2
 2712 0078 03F58E73 	 add r3,r3,#284
 2713 007c 1B68     	 ldr r3,[r3]
 2714 007e 9B0C     	 lsrs r3,r3,#18
 2715 0080 03F00303 	 and r3,r3,#3
 2716              	 .loc 6 1007 27 discriminator 1
 2717 0084 002B     	 cmp r3,#0
 2718 0086 19D0     	 beq .L156
1008:.././hal/sam3u1c/udphs_device.c **** 			// Delay the stall after the end of IN transfer on USB line
1009:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->stall_requested = true;
 2719              	 .loc 6 1009 29
 2720 0088 BA68     	 ldr r2,[r7,#8]
 2721 008a 137D     	 ldrb r3,[r2,#20]
 2722 008c 43F00403 	 orr r3,r3,#4
 2723 0090 1375     	 strb r3,[r2,#20]
1010:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_bank_interrupt(ep_index);
 2724              	 .loc 6 1010 4
 2725 0092 1F4A     	 ldr r2,.L157+4
 2726 0094 FB7B     	 ldrb r3,[r7,#15]
 2727 0096 0833     	 adds r3,r3,#8
 2728 0098 5B01     	 lsls r3,r3,#5
 2729 009a 1344     	 add r3,r3,r2
 2730 009c 0433     	 adds r3,r3,#4
 2731 009e 4FF48022 	 mov r2,#262144
 2732 00a2 1A60     	 str r2,[r3]
1011:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_endpoint_interrupt(ep_index);
 2733              	 .loc 6 1011 4
 2734 00a4 1A4B     	 ldr r3,.L157+4
 2735 00a6 1A69     	 ldr r2,[r3,#16]
 2736 00a8 FB7B     	 ldrb r3,[r7,#15]
 2737 00aa 4FF48071 	 mov r1,#256
 2738 00ae 01FA03F3 	 lsl r3,r1,r3
 2739 00b2 1749     	 ldr r1,.L157+4
 2740 00b4 1343     	 orrs r3,r3,r2
 2741 00b6 0B61     	 str r3,[r1,#16]
1012:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("<reqHalt%x> ", ep);
1013:.././hal/sam3u1c/udphs_device.c **** 			return true;
 2742              	 .loc 6 1013 11
 2743 00b8 0123     	 movs r3,#1
 2744 00ba 21E0     	 b .L152
 2745              	.L156:
1014:.././hal/sam3u1c/udphs_device.c **** 	}
1015:.././hal/sam3u1c/udphs_device.c **** 
1016:.././hal/sam3u1c/udphs_device.c **** 	// Stall endpoint immediately
1017:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_endpoint_bank_autoswitch(ep_index);
 2746              	 .loc 6 1017 2
 2747 00bc 144A     	 ldr r2,.L157+4
 2748 00be FB7B     	 ldrb r3,[r7,#15]
 2749 00c0 5B01     	 lsls r3,r3,#5
 2750 00c2 1344     	 add r3,r3,r2
 2751 00c4 03F58473 	 add r3,r3,#264
 2752 00c8 1A68     	 ldr r2,[r3]
 2753 00ca 1149     	 ldr r1,.L157+4
 2754 00cc FB7B     	 ldrb r3,[r7,#15]
 2755 00ce 22F00202 	 bic r2,r2,#2
 2756 00d2 5B01     	 lsls r3,r3,#5
 2757 00d4 0B44     	 add r3,r3,r1
 2758 00d6 03F58473 	 add r3,r3,#264
 2759 00da 1A60     	 str r2,[r3]
1018:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_stall(ep_index);
 2760              	 .loc 6 1018 2
 2761 00dc 0C4A     	 ldr r2,.L157+4
 2762 00de FB7B     	 ldrb r3,[r7,#15]
 2763 00e0 5B01     	 lsls r3,r3,#5
 2764 00e2 1344     	 add r3,r3,r2
 2765 00e4 03F58C73 	 add r3,r3,#280
 2766 00e8 4FF40052 	 mov r2,#8192
 2767 00ec 1A60     	 str r2,[r3]
1019:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_stall_handshake(ep_index);
 2768              	 .loc 6 1019 2
 2769 00ee 084A     	 ldr r2,.L157+4
 2770 00f0 FB7B     	 ldrb r3,[r7,#15]
 2771 00f2 5B01     	 lsls r3,r3,#5
 2772 00f4 1344     	 add r3,r3,r2
 2773 00f6 03F58A73 	 add r3,r3,#276
 2774 00fa 2022     	 movs r2,#32
 2775 00fc 1A60     	 str r2,[r3]
1020:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("<Halt%x> ", ep);
1021:.././hal/sam3u1c/udphs_device.c **** 	return true;
 2776              	 .loc 6 1021 9
 2777 00fe 0123     	 movs r3,#1
 2778              	.L152:
1022:.././hal/sam3u1c/udphs_device.c **** }
 2779              	 .loc 6 1022 1
 2780 0100 1846     	 mov r0,r3
 2781 0102 1437     	 adds r7,r7,#20
 2782              	.LCFI116:
 2783              	 .cfi_def_cfa_offset 4
 2784 0104 BD46     	 mov sp,r7
 2785              	.LCFI117:
 2786              	 .cfi_def_cfa_register 13
 2787              	 
 2788 0106 80BC     	 pop {r7}
 2789              	.LCFI118:
 2790              	 .cfi_restore 7
 2791              	 .cfi_def_cfa_offset 0
 2792 0108 7047     	 bx lr
 2793              	.L158:
 2794 010a 00BF     	 .align 2
 2795              	.L157:
 2796 010c 00000000 	 .word udd_ep_job
 2797 0110 00400A40 	 .word 1074413568
 2798              	 .cfi_endproc
 2799              	.LFE155:
 2801              	 .section .text.udd_ep_clear_halt,"ax",%progbits
 2802              	 .align 1
 2803              	 .global udd_ep_clear_halt
 2804              	 .syntax unified
 2805              	 .thumb
 2806              	 .thumb_func
 2807              	 .fpu softvfp
 2809              	udd_ep_clear_halt:
 2810              	.LFB156:
1023:.././hal/sam3u1c/udphs_device.c **** 
1024:.././hal/sam3u1c/udphs_device.c **** 
1025:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_clear_halt(udd_ep_id_t ep)
1026:.././hal/sam3u1c/udphs_device.c **** {
 2811              	 .loc 6 1026 1
 2812              	 .cfi_startproc
 2813              	 
 2814              	 
 2815 0000 80B5     	 push {r7,lr}
 2816              	.LCFI119:
 2817              	 .cfi_def_cfa_offset 8
 2818              	 .cfi_offset 7,-8
 2819              	 .cfi_offset 14,-4
 2820 0002 84B0     	 sub sp,sp,#16
 2821              	.LCFI120:
 2822              	 .cfi_def_cfa_offset 24
 2823 0004 00AF     	 add r7,sp,#0
 2824              	.LCFI121:
 2825              	 .cfi_def_cfa_register 7
 2826 0006 0346     	 mov r3,r0
 2827 0008 FB71     	 strb r3,[r7,#7]
1027:.././hal/sam3u1c/udphs_device.c **** 	bool b_stall_cleared = false;
 2828              	 .loc 6 1027 7
 2829 000a 0023     	 movs r3,#0
 2830 000c FB73     	 strb r3,[r7,#15]
1028:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1029:.././hal/sam3u1c/udphs_device.c **** 
1030:.././hal/sam3u1c/udphs_device.c **** 	ep &= USB_EP_ADDR_MASK;
 2831              	 .loc 6 1030 5
 2832 000e FB79     	 ldrb r3,[r7,#7]
 2833 0010 03F00F03 	 and r3,r3,#15
 2834 0014 FB71     	 strb r3,[r7,#7]
1031:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep)
 2835              	 .loc 6 1031 5
 2836 0016 FB79     	 ldrb r3,[r7,#7]
 2837 0018 022B     	 cmp r3,#2
 2838 001a 01D9     	 bls .L160
1032:.././hal/sam3u1c/udphs_device.c **** 		return false;
 2839              	 .loc 6 1032 10
 2840 001c 0023     	 movs r3,#0
 2841 001e 7EE0     	 b .L161
 2842              	.L160:
1033:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep - 1];
 2843              	 .loc 6 1033 27
 2844 0020 FB79     	 ldrb r3,[r7,#7]
 2845 0022 5A1E     	 subs r2,r3,#1
 2846              	 .loc 6 1033 10
 2847 0024 1346     	 mov r3,r2
 2848 0026 5B00     	 lsls r3,r3,#1
 2849 0028 1344     	 add r3,r3,r2
 2850 002a DB00     	 lsls r3,r3,#3
 2851 002c 3E4A     	 ldr r2,.L166
 2852 002e 1344     	 add r3,r3,r2
 2853 0030 BB60     	 str r3,[r7,#8]
1034:.././hal/sam3u1c/udphs_device.c **** 
1035:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->stall_requested) {
 2854              	 .loc 6 1035 6
 2855 0032 BB68     	 ldr r3,[r7,#8]
 2856 0034 1B7D     	 ldrb r3,[r3,#20]
 2857 0036 03F00403 	 and r3,r3,#4
 2858 003a DBB2     	 uxtb r3,r3
 2859              	 .loc 6 1035 5
 2860 003c 002B     	 cmp r3,#0
 2861 003e 1AD0     	 beq .L162
1036:.././hal/sam3u1c/udphs_device.c **** 		// Endpoint stall has been requested but not done
1037:.././hal/sam3u1c/udphs_device.c **** 		// Remove stall request
1038:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("<unWHalt%x> ", ep);
1039:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->stall_requested = false;
 2862              	 .loc 6 1039 28
 2863 0040 BA68     	 ldr r2,[r7,#8]
 2864 0042 137D     	 ldrb r3,[r2,#20]
 2865 0044 6FF38203 	 bfc r3,#2,#1
 2866 0048 1375     	 strb r3,[r2,#20]
1040:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_bank_interrupt(ep);
 2867              	 .loc 6 1040 3
 2868 004a 384A     	 ldr r2,.L166+4
 2869 004c FB79     	 ldrb r3,[r7,#7]
 2870 004e 5B01     	 lsls r3,r3,#5
 2871 0050 1344     	 add r3,r3,r2
 2872 0052 03F58473 	 add r3,r3,#264
 2873 0056 4FF48022 	 mov r2,#262144
 2874 005a 1A60     	 str r2,[r3]
1041:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_endpoint_interrupt(ep);
 2875              	 .loc 6 1041 3
 2876 005c 334B     	 ldr r3,.L166+4
 2877 005e 1A69     	 ldr r2,[r3,#16]
 2878 0060 FB79     	 ldrb r3,[r7,#7]
 2879 0062 4FF48071 	 mov r1,#256
 2880 0066 01FA03F3 	 lsl r3,r1,r3
 2881 006a DB43     	 mvns r3,r3
 2882 006c 2F49     	 ldr r1,.L166+4
 2883 006e 1340     	 ands r3,r3,r2
 2884 0070 0B61     	 str r3,[r1,#16]
1042:.././hal/sam3u1c/udphs_device.c **** 		b_stall_cleared = true;
 2885              	 .loc 6 1042 19
 2886 0072 0123     	 movs r3,#1
 2887 0074 FB73     	 strb r3,[r7,#15]
 2888              	.L162:
1043:.././hal/sam3u1c/udphs_device.c **** 	}
1044:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_stall_requested(ep)) {
 2889              	 .loc 6 1044 6
 2890 0076 2D4A     	 ldr r2,.L166+4
 2891 0078 FB79     	 ldrb r3,[r7,#7]
 2892 007a 5B01     	 lsls r3,r3,#5
 2893 007c 1344     	 add r3,r3,r2
 2894 007e 03F58E73 	 add r3,r3,#284
 2895 0082 1B68     	 ldr r3,[r3]
 2896 0084 03F02003 	 and r3,r3,#32
 2897              	 .loc 6 1044 5
 2898 0088 002B     	 cmp r3,#0
 2899 008a 35D0     	 beq .L163
1045:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("<unHalt%x> ", ep);
1046:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_stall(ep)) {
 2900              	 .loc 6 1046 7
 2901 008c 274A     	 ldr r2,.L166+4
 2902 008e FB79     	 ldrb r3,[r7,#7]
 2903 0090 5B01     	 lsls r3,r3,#5
 2904 0092 1344     	 add r3,r3,r2
 2905 0094 03F58E73 	 add r3,r3,#284
 2906 0098 1B68     	 ldr r3,[r3]
 2907 009a 03F40053 	 and r3,r3,#8192
 2908              	 .loc 6 1046 6
 2909 009e 002B     	 cmp r3,#0
 2910 00a0 10D0     	 beq .L164
1047:.././hal/sam3u1c/udphs_device.c **** 			udd_ack_stall(ep);
 2911              	 .loc 6 1047 4
 2912 00a2 224A     	 ldr r2,.L166+4
 2913 00a4 FB79     	 ldrb r3,[r7,#7]
 2914 00a6 5B01     	 lsls r3,r3,#5
 2915 00a8 1344     	 add r3,r3,r2
 2916 00aa 03F58C73 	 add r3,r3,#280
 2917 00ae 4FF40052 	 mov r2,#8192
 2918 00b2 1A60     	 str r2,[r3]
1048:.././hal/sam3u1c/udphs_device.c **** 			// A packet has been stalled
1049:.././hal/sam3u1c/udphs_device.c **** 			// then reset datatoggle
1050:.././hal/sam3u1c/udphs_device.c **** 			udd_reset_data_toggle(ep);
 2919              	 .loc 6 1050 4
 2920 00b4 1D4A     	 ldr r2,.L166+4
 2921 00b6 FB79     	 ldrb r3,[r7,#7]
 2922 00b8 5B01     	 lsls r3,r3,#5
 2923 00ba 1344     	 add r3,r3,r2
 2924 00bc 03F58C73 	 add r3,r3,#280
 2925 00c0 4022     	 movs r2,#64
 2926 00c2 1A60     	 str r2,[r3]
 2927              	.L164:
1051:.././hal/sam3u1c/udphs_device.c **** 		}
1052:.././hal/sam3u1c/udphs_device.c **** 		// Disable stall
1053:.././hal/sam3u1c/udphs_device.c **** 		udd_disable_stall_handshake(ep);
 2928              	 .loc 6 1053 3
 2929 00c4 194A     	 ldr r2,.L166+4
 2930 00c6 FB79     	 ldrb r3,[r7,#7]
 2931 00c8 5B01     	 lsls r3,r3,#5
 2932 00ca 1344     	 add r3,r3,r2
 2933 00cc 03F58C73 	 add r3,r3,#280
 2934 00d0 2022     	 movs r2,#32
 2935 00d2 1A60     	 str r2,[r3]
1054:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_endpoint_bank_autoswitch(ep);
 2936              	 .loc 6 1054 3
 2937 00d4 154A     	 ldr r2,.L166+4
 2938 00d6 FB79     	 ldrb r3,[r7,#7]
 2939 00d8 0833     	 adds r3,r3,#8
 2940 00da 5B01     	 lsls r3,r3,#5
 2941 00dc 1344     	 add r3,r3,r2
 2942 00de 0433     	 adds r3,r3,#4
 2943 00e0 1A68     	 ldr r2,[r3]
 2944 00e2 1249     	 ldr r1,.L166+4
 2945 00e4 FB79     	 ldrb r3,[r7,#7]
 2946 00e6 42F00202 	 orr r2,r2,#2
 2947 00ea 0833     	 adds r3,r3,#8
 2948 00ec 5B01     	 lsls r3,r3,#5
 2949 00ee 0B44     	 add r3,r3,r1
 2950 00f0 0433     	 adds r3,r3,#4
 2951 00f2 1A60     	 str r2,[r3]
1055:.././hal/sam3u1c/udphs_device.c **** 		b_stall_cleared = true;
 2952              	 .loc 6 1055 19
 2953 00f4 0123     	 movs r3,#1
 2954 00f6 FB73     	 strb r3,[r7,#15]
 2955              	.L163:
1056:.././hal/sam3u1c/udphs_device.c **** 	}
1057:.././hal/sam3u1c/udphs_device.c **** 	if (b_stall_cleared) {
 2956              	 .loc 6 1057 5
 2957 00f8 FB7B     	 ldrb r3,[r7,#15]
 2958 00fa 002B     	 cmp r3,#0
 2959 00fc 0ED0     	 beq .L165
1058:.././hal/sam3u1c/udphs_device.c **** 		// If a job is register on clear halt action
1059:.././hal/sam3u1c/udphs_device.c **** 		// then execute callback
1060:.././hal/sam3u1c/udphs_device.c **** 		if (ptr_job->busy == true) {
 2960              	 .loc 6 1060 21
 2961 00fe BB68     	 ldr r3,[r7,#8]
 2962 0100 1B7D     	 ldrb r3,[r3,#20]
 2963 0102 03F00103 	 and r3,r3,#1
 2964 0106 DBB2     	 uxtb r3,r3
 2965              	 .loc 6 1060 6
 2966 0108 002B     	 cmp r3,#0
 2967 010a 07D0     	 beq .L165
1061:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->busy = false;
 2968              	 .loc 6 1061 18
 2969 010c BA68     	 ldr r2,[r7,#8]
 2970 010e 137D     	 ldrb r3,[r2,#20]
 2971 0110 6FF30003 	 bfc r3,#0,#1
 2972 0114 1375     	 strb r3,[r2,#20]
1062:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->call_nohalt();
 2973              	 .loc 6 1062 11
 2974 0116 BB68     	 ldr r3,[r7,#8]
 2975 0118 1B68     	 ldr r3,[r3]
 2976              	 .loc 6 1062 4
 2977 011a 9847     	 blx r3
 2978              	.LVL52:
 2979              	.L165:
1063:.././hal/sam3u1c/udphs_device.c **** 		}
1064:.././hal/sam3u1c/udphs_device.c **** 	}
1065:.././hal/sam3u1c/udphs_device.c **** 	return true;
 2980              	 .loc 6 1065 9
 2981 011c 0123     	 movs r3,#1
 2982              	.L161:
1066:.././hal/sam3u1c/udphs_device.c **** }
 2983              	 .loc 6 1066 1
 2984 011e 1846     	 mov r0,r3
 2985 0120 1037     	 adds r7,r7,#16
 2986              	.LCFI122:
 2987              	 .cfi_def_cfa_offset 8
 2988 0122 BD46     	 mov sp,r7
 2989              	.LCFI123:
 2990              	 .cfi_def_cfa_register 13
 2991              	 
 2992 0124 80BD     	 pop {r7,pc}
 2993              	.L167:
 2994 0126 00BF     	 .align 2
 2995              	.L166:
 2996 0128 00000000 	 .word udd_ep_job
 2997 012c 00400A40 	 .word 1074413568
 2998              	 .cfi_endproc
 2999              	.LFE156:
 3001              	 .section .text.udd_ep_run,"ax",%progbits
 3002              	 .align 1
 3003              	 .global udd_ep_run
 3004              	 .syntax unified
 3005              	 .thumb
 3006              	 .thumb_func
 3007              	 .fpu softvfp
 3009              	udd_ep_run:
 3010              	.LFB157:
1067:.././hal/sam3u1c/udphs_device.c **** 
1068:.././hal/sam3u1c/udphs_device.c **** 
1069:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
1070:.././hal/sam3u1c/udphs_device.c **** 		uint8_t * buf, iram_size_t buf_size,
1071:.././hal/sam3u1c/udphs_device.c **** 		udd_callback_trans_t callback)
1072:.././hal/sam3u1c/udphs_device.c **** {
 3011              	 .loc 6 1072 1
 3012              	 .cfi_startproc
 3013              	 
 3014              	 
 3015 0000 80B5     	 push {r7,lr}
 3016              	.LCFI124:
 3017              	 .cfi_def_cfa_offset 8
 3018              	 .cfi_offset 7,-8
 3019              	 .cfi_offset 14,-4
 3020 0002 86B0     	 sub sp,sp,#24
 3021              	.LCFI125:
 3022              	 .cfi_def_cfa_offset 32
 3023 0004 00AF     	 add r7,sp,#0
 3024              	.LCFI126:
 3025              	 .cfi_def_cfa_register 7
 3026 0006 BA60     	 str r2,[r7,#8]
 3027 0008 7B60     	 str r3,[r7,#4]
 3028 000a 0346     	 mov r3,r0
 3029 000c FB73     	 strb r3,[r7,#15]
 3030 000e 0B46     	 mov r3,r1
 3031 0010 BB73     	 strb r3,[r7,#14]
1073:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1074:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1075:.././hal/sam3u1c/udphs_device.c **** 
1076:.././hal/sam3u1c/udphs_device.c **** 	ep &= USB_EP_ADDR_MASK;
 3032              	 .loc 6 1076 5
 3033 0012 FB7B     	 ldrb r3,[r7,#15]
 3034 0014 03F00F03 	 and r3,r3,#15
 3035 0018 FB73     	 strb r3,[r7,#15]
1077:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep) {
 3036              	 .loc 6 1077 5
 3037 001a FB7B     	 ldrb r3,[r7,#15]
 3038 001c 022B     	 cmp r3,#2
 3039 001e 01D9     	 bls .L169
1078:.././hal/sam3u1c/udphs_device.c **** 		return false;
 3040              	 .loc 6 1078 10
 3041 0020 0023     	 movs r3,#0
 3042 0022 63E0     	 b .L170
 3043              	.L169:
1079:.././hal/sam3u1c/udphs_device.c **** 	}
1080:.././hal/sam3u1c/udphs_device.c **** 
1081:.././hal/sam3u1c/udphs_device.c **** 	// Get job about endpoint
1082:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep - 1];
 3044              	 .loc 6 1082 27
 3045 0024 FB7B     	 ldrb r3,[r7,#15]
 3046 0026 5A1E     	 subs r2,r3,#1
 3047              	 .loc 6 1082 10
 3048 0028 1346     	 mov r3,r2
 3049 002a 5B00     	 lsls r3,r3,#1
 3050 002c 1344     	 add r3,r3,r2
 3051 002e DB00     	 lsls r3,r3,#3
 3052 0030 304A     	 ldr r2,.L177
 3053 0032 1344     	 add r3,r3,r2
 3054 0034 7B61     	 str r3,[r7,#20]
1083:.././hal/sam3u1c/udphs_device.c **** 
1084:.././hal/sam3u1c/udphs_device.c **** 	if ((!Is_udd_endpoint_enabled(ep))
 3055              	 .loc 6 1084 8
 3056 0036 304A     	 ldr r2,.L177+4
 3057 0038 FB7B     	 ldrb r3,[r7,#15]
 3058 003a 5B01     	 lsls r3,r3,#5
 3059 003c 1344     	 add r3,r3,r2
 3060 003e 03F58673 	 add r3,r3,#268
 3061 0042 1B68     	 ldr r3,[r3]
 3062 0044 03F00103 	 and r3,r3,#1
 3063              	 .loc 6 1084 5
 3064 0048 002B     	 cmp r3,#0
 3065 004a 11D0     	 beq .L171
1085:.././hal/sam3u1c/udphs_device.c **** 			|| Is_udd_endpoint_stall_requested(ep)
 3066              	 .loc 6 1085 7
 3067 004c 2A4A     	 ldr r2,.L177+4
 3068 004e FB7B     	 ldrb r3,[r7,#15]
 3069 0050 5B01     	 lsls r3,r3,#5
 3070 0052 1344     	 add r3,r3,r2
 3071 0054 03F58E73 	 add r3,r3,#284
 3072 0058 1B68     	 ldr r3,[r3]
 3073 005a 03F02003 	 and r3,r3,#32
 3074              	 .loc 6 1085 4
 3075 005e 002B     	 cmp r3,#0
 3076 0060 06D1     	 bne .L171
1086:.././hal/sam3u1c/udphs_device.c **** 			|| ptr_job->stall_requested) {
 3077              	 .loc 6 1086 4
 3078 0062 7B69     	 ldr r3,[r7,#20]
 3079 0064 1B7D     	 ldrb r3,[r3,#20]
 3080 0066 03F00403 	 and r3,r3,#4
 3081 006a DBB2     	 uxtb r3,r3
 3082 006c 002B     	 cmp r3,#0
 3083 006e 01D0     	 beq .L172
 3084              	.L171:
1087:.././hal/sam3u1c/udphs_device.c **** 		return false; // Endpoint is halted
 3085              	 .loc 6 1087 10
 3086 0070 0023     	 movs r3,#0
 3087 0072 3BE0     	 b .L170
 3088              	.L172:
1088:.././hal/sam3u1c/udphs_device.c **** 	}
1089:.././hal/sam3u1c/udphs_device.c **** 
1090:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 3089              	 .loc 6 1090 10
 3090 0074 214B     	 ldr r3,.L177+8
 3091 0076 9847     	 blx r3
 3092              	.LVL53:
 3093 0078 3861     	 str r0,[r7,#16]
1091:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->busy == true) {
 3094              	 .loc 6 1091 20
 3095 007a 7B69     	 ldr r3,[r7,#20]
 3096 007c 1B7D     	 ldrb r3,[r3,#20]
 3097 007e 03F00103 	 and r3,r3,#1
 3098 0082 DBB2     	 uxtb r3,r3
 3099              	 .loc 6 1091 5
 3100 0084 002B     	 cmp r3,#0
 3101 0086 04D0     	 beq .L173
1092:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_restore(flags);
 3102              	 .loc 6 1092 3
 3103 0088 3869     	 ldr r0,[r7,#16]
 3104 008a 1D4B     	 ldr r3,.L177+12
 3105 008c 9847     	 blx r3
 3106              	.LVL54:
1093:.././hal/sam3u1c/udphs_device.c **** 		return false; // Job already on going
 3107              	 .loc 6 1093 10
 3108 008e 0023     	 movs r3,#0
 3109 0090 2CE0     	 b .L170
 3110              	.L173:
1094:.././hal/sam3u1c/udphs_device.c **** 	}
1095:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->busy = true;
 3111              	 .loc 6 1095 16
 3112 0092 7A69     	 ldr r2,[r7,#20]
 3113 0094 137D     	 ldrb r3,[r2,#20]
 3114 0096 43F00103 	 orr r3,r3,#1
 3115 009a 1375     	 strb r3,[r2,#20]
1096:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 3116              	 .loc 6 1096 2
 3117 009c 3869     	 ldr r0,[r7,#16]
 3118 009e 184B     	 ldr r3,.L177+12
 3119 00a0 9847     	 blx r3
 3120              	.LVL55:
1097:.././hal/sam3u1c/udphs_device.c **** 
1098:.././hal/sam3u1c/udphs_device.c **** 	// No job running. Let's setup a new one.
1099:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->buf = buf;
 3121              	 .loc 6 1099 15
 3122 00a2 7B69     	 ldr r3,[r7,#20]
 3123 00a4 BA68     	 ldr r2,[r7,#8]
 3124 00a6 5A60     	 str r2,[r3,#4]
1100:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->buf_size = buf_size;
 3125              	 .loc 6 1100 20
 3126 00a8 7B69     	 ldr r3,[r7,#20]
 3127 00aa 7A68     	 ldr r2,[r7,#4]
 3128 00ac 9A60     	 str r2,[r3,#8]
1101:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->buf_cnt = 0;
 3129              	 .loc 6 1101 19
 3130 00ae 7B69     	 ldr r3,[r7,#20]
 3131 00b0 0022     	 movs r2,#0
 3132 00b2 DA60     	 str r2,[r3,#12]
1102:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->buf_load = 0;
 3133              	 .loc 6 1102 20
 3134 00b4 7B69     	 ldr r3,[r7,#20]
 3135 00b6 0022     	 movs r2,#0
 3136 00b8 1A61     	 str r2,[r3,#16]
1103:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->call_trans = callback;
 3137              	 .loc 6 1103 22
 3138 00ba 7B69     	 ldr r3,[r7,#20]
 3139 00bc 3A6A     	 ldr r2,[r7,#32]
 3140 00be 1A60     	 str r2,[r3]
1104:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
 3141              	 .loc 6 1104 41
 3142 00c0 BB7B     	 ldrb r3,[r7,#14]
 3143 00c2 002B     	 cmp r3,#0
 3144 00c4 02D1     	 bne .L174
 3145              	 .loc 6 1104 41 is_stmt 0 discriminator 2
 3146 00c6 7B68     	 ldr r3,[r7,#4]
 3147 00c8 002B     	 cmp r3,#0
 3148 00ca 01D1     	 bne .L175
 3149              	.L174:
 3150              	 .loc 6 1104 41 discriminator 3
 3151 00cc 0123     	 movs r3,#1
 3152 00ce 00E0     	 b .L176
 3153              	.L175:
 3154              	 .loc 6 1104 41 discriminator 4
 3155 00d0 0023     	 movs r3,#0
 3156              	.L176:
 3157              	 .loc 6 1104 41 discriminator 6
 3158 00d2 03F00103 	 and r3,r3,#1
 3159 00d6 D9B2     	 uxtb r1,r3
 3160              	 .loc 6 1104 25 is_stmt 1 discriminator 6
 3161 00d8 7A69     	 ldr r2,[r7,#20]
 3162 00da 137D     	 ldrb r3,[r2,#20]
 3163 00dc 61F34103 	 bfi r3,r1,#1,#1
 3164 00e0 1375     	 strb r3,[r2,#20]
1105:.././hal/sam3u1c/udphs_device.c **** 
1106:.././hal/sam3u1c/udphs_device.c **** 	// Request first DMA transfer
1107:.././hal/sam3u1c/udphs_device.c **** 	//dbg_print("runDMA%d\n\r", ep);
1108:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_trans_done(ep);
 3165              	 .loc 6 1108 2 discriminator 6
 3166 00e2 FB7B     	 ldrb r3,[r7,#15]
 3167 00e4 1846     	 mov r0,r3
 3168 00e6 074B     	 ldr r3,.L177+16
 3169 00e8 9847     	 blx r3
 3170              	.LVL56:
1109:.././hal/sam3u1c/udphs_device.c **** 	return true;
 3171              	 .loc 6 1109 9 discriminator 6
 3172 00ea 0123     	 movs r3,#1
 3173              	.L170:
1110:.././hal/sam3u1c/udphs_device.c **** }
 3174              	 .loc 6 1110 1
 3175 00ec 1846     	 mov r0,r3
 3176 00ee 1837     	 adds r7,r7,#24
 3177              	.LCFI127:
 3178              	 .cfi_def_cfa_offset 8
 3179 00f0 BD46     	 mov sp,r7
 3180              	.LCFI128:
 3181              	 .cfi_def_cfa_register 13
 3182              	 
 3183 00f2 80BD     	 pop {r7,pc}
 3184              	.L178:
 3185              	 .align 2
 3186              	.L177:
 3187 00f4 00000000 	 .word udd_ep_job
 3188 00f8 00400A40 	 .word 1074413568
 3189 00fc 00000000 	 .word cpu_irq_save
 3190 0100 00000000 	 .word cpu_irq_restore
 3191 0104 00000000 	 .word udd_ep_trans_done
 3192              	 .cfi_endproc
 3193              	.LFE157:
 3195              	 .section .text.udd_ep_abort,"ax",%progbits
 3196              	 .align 1
 3197              	 .global udd_ep_abort
 3198              	 .syntax unified
 3199              	 .thumb
 3200              	 .thumb_func
 3201              	 .fpu softvfp
 3203              	udd_ep_abort:
 3204              	.LFB158:
1111:.././hal/sam3u1c/udphs_device.c **** 
1112:.././hal/sam3u1c/udphs_device.c **** 
1113:.././hal/sam3u1c/udphs_device.c **** void udd_ep_abort(udd_ep_id_t ep)
1114:.././hal/sam3u1c/udphs_device.c **** {
 3205              	 .loc 6 1114 1
 3206              	 .cfi_startproc
 3207              	 
 3208              	 
 3209 0000 80B5     	 push {r7,lr}
 3210              	.LCFI129:
 3211              	 .cfi_def_cfa_offset 8
 3212              	 .cfi_offset 7,-8
 3213              	 .cfi_offset 14,-4
 3214 0002 84B0     	 sub sp,sp,#16
 3215              	.LCFI130:
 3216              	 .cfi_def_cfa_offset 24
 3217 0004 00AF     	 add r7,sp,#0
 3218              	.LCFI131:
 3219              	 .cfi_def_cfa_register 7
 3220 0006 0346     	 mov r3,r0
 3221 0008 FB71     	 strb r3,[r7,#7]
1115:.././hal/sam3u1c/udphs_device.c **** 	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
 3222              	 .loc 6 1115 10
 3223 000a FB79     	 ldrb r3,[r7,#7]
 3224 000c 03F00F03 	 and r3,r3,#15
 3225 0010 FB73     	 strb r3,[r7,#15]
1116:.././hal/sam3u1c/udphs_device.c **** 	// Stop DMA transfer
1117:.././hal/sam3u1c/udphs_device.c **** 	udd_endpoint_dma_set_control(ep_index, 0);
 3226              	 .loc 6 1117 2
 3227 0012 FB7B     	 ldrb r3,[r7,#15]
 3228 0014 1A01     	 lsls r2,r3,#4
 3229 0016 194B     	 ldr r3,.L184
 3230 0018 1344     	 add r3,r3,r2
 3231 001a 0022     	 movs r2,#0
 3232 001c 9A60     	 str r2,[r3,#8]
1118:.././hal/sam3u1c/udphs_device.c **** 	// Kill banks for IN
1119:.././hal/sam3u1c/udphs_device.c **** 	if (ep & USB_EP_DIR_IN) {
 3233              	 .loc 6 1119 6
 3234 001e 97F90730 	 ldrsb r3,[r7,#7]
 3235              	 .loc 6 1119 5
 3236 0022 002B     	 cmp r3,#0
 3237 0024 21DA     	 bge .L180
1120:.././hal/sam3u1c/udphs_device.c **** 		for(;udd_nb_busy_bank(ep_index);) {
 3238              	 .loc 6 1120 3
 3239 0026 14E0     	 b .L181
 3240              	.L183:
1121:.././hal/sam3u1c/udphs_device.c **** 			udd_kill_last_in_bank(ep_index);
 3241              	 .loc 6 1121 4
 3242 0028 154A     	 ldr r2,.L184+4
 3243 002a FB7B     	 ldrb r3,[r7,#15]
 3244 002c 5B01     	 lsls r3,r3,#5
 3245 002e 1344     	 add r3,r3,r2
 3246 0030 03F58A73 	 add r3,r3,#276
 3247 0034 4FF40072 	 mov r2,#512
 3248 0038 1A60     	 str r2,[r3]
1122:.././hal/sam3u1c/udphs_device.c **** 			while(Is_udd_kill_last(ep_index));
 3249              	 .loc 6 1122 9
 3250 003a 00BF     	 nop
 3251              	.L182:
 3252              	 .loc 6 1122 10 discriminator 1
 3253 003c 104A     	 ldr r2,.L184+4
 3254 003e FB7B     	 ldrb r3,[r7,#15]
 3255 0040 5B01     	 lsls r3,r3,#5
 3256 0042 1344     	 add r3,r3,r2
 3257 0044 03F58E73 	 add r3,r3,#284
 3258 0048 1B68     	 ldr r3,[r3]
 3259 004a 03F40073 	 and r3,r3,#512
 3260              	 .loc 6 1122 9 discriminator 1
 3261 004e 002B     	 cmp r3,#0
 3262 0050 F4D1     	 bne .L182
 3263              	.L181:
1120:.././hal/sam3u1c/udphs_device.c **** 		for(;udd_nb_busy_bank(ep_index);) {
 3264              	 .loc 6 1120 8
 3265 0052 0B4A     	 ldr r2,.L184+4
 3266 0054 FB7B     	 ldrb r3,[r7,#15]
 3267 0056 5B01     	 lsls r3,r3,#5
 3268 0058 1344     	 add r3,r3,r2
 3269 005a 03F58E73 	 add r3,r3,#284
 3270 005e 1B68     	 ldr r3,[r3]
 3271 0060 9B0C     	 lsrs r3,r3,#18
 3272 0062 03F00303 	 and r3,r3,#3
1120:.././hal/sam3u1c/udphs_device.c **** 		for(;udd_nb_busy_bank(ep_index);) {
 3273              	 .loc 6 1120 3
 3274 0066 002B     	 cmp r3,#0
 3275 0068 DED1     	 bne .L183
 3276              	.L180:
1123:.././hal/sam3u1c/udphs_device.c **** 		}
1124:.././hal/sam3u1c/udphs_device.c **** 	}
1125:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_abort_job(ep);
 3277              	 .loc 6 1125 2
 3278 006a FB79     	 ldrb r3,[r7,#7]
 3279 006c 1846     	 mov r0,r3
 3280 006e 054B     	 ldr r3,.L184+8
 3281 0070 9847     	 blx r3
 3282              	.LVL57:
1126:.././hal/sam3u1c/udphs_device.c **** }
 3283              	 .loc 6 1126 1
 3284 0072 00BF     	 nop
 3285 0074 1037     	 adds r7,r7,#16
 3286              	.LCFI132:
 3287              	 .cfi_def_cfa_offset 8
 3288 0076 BD46     	 mov sp,r7
 3289              	.LCFI133:
 3290              	 .cfi_def_cfa_register 13
 3291              	 
 3292 0078 80BD     	 pop {r7,pc}
 3293              	.L185:
 3294 007a 00BF     	 .align 2
 3295              	.L184:
 3296 007c 00430A40 	 .word 1074414336
 3297 0080 00400A40 	 .word 1074413568
 3298 0084 00000000 	 .word udd_ep_abort_job
 3299              	 .cfi_endproc
 3300              	.LFE158:
 3302              	 .section .text.udd_ep_wait_stall_clear,"ax",%progbits
 3303              	 .align 1
 3304              	 .global udd_ep_wait_stall_clear
 3305              	 .syntax unified
 3306              	 .thumb
 3307              	 .thumb_func
 3308              	 .fpu softvfp
 3310              	udd_ep_wait_stall_clear:
 3311              	.LFB159:
1127:.././hal/sam3u1c/udphs_device.c **** 
1128:.././hal/sam3u1c/udphs_device.c **** 
1129:.././hal/sam3u1c/udphs_device.c **** bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
1130:.././hal/sam3u1c/udphs_device.c **** 		udd_callback_halt_cleared_t callback)
1131:.././hal/sam3u1c/udphs_device.c **** {
 3312              	 .loc 6 1131 1
 3313              	 .cfi_startproc
 3314              	 
 3315              	 
 3316 0000 80B5     	 push {r7,lr}
 3317              	.LCFI134:
 3318              	 .cfi_def_cfa_offset 8
 3319              	 .cfi_offset 7,-8
 3320              	 .cfi_offset 14,-4
 3321 0002 84B0     	 sub sp,sp,#16
 3322              	.LCFI135:
 3323              	 .cfi_def_cfa_offset 24
 3324 0004 00AF     	 add r7,sp,#0
 3325              	.LCFI136:
 3326              	 .cfi_def_cfa_register 7
 3327 0006 0346     	 mov r3,r0
 3328 0008 3960     	 str r1,[r7]
 3329 000a FB71     	 strb r3,[r7,#7]
1132:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1133:.././hal/sam3u1c/udphs_device.c **** 
1134:.././hal/sam3u1c/udphs_device.c **** 	ep &= USB_EP_ADDR_MASK;
 3330              	 .loc 6 1134 5
 3331 000c FB79     	 ldrb r3,[r7,#7]
 3332 000e 03F00F03 	 and r3,r3,#15
 3333 0012 FB71     	 strb r3,[r7,#7]
1135:.././hal/sam3u1c/udphs_device.c **** 	if (USB_DEVICE_MAX_EP < ep) {
 3334              	 .loc 6 1135 5
 3335 0014 FB79     	 ldrb r3,[r7,#7]
 3336 0016 022B     	 cmp r3,#2
 3337 0018 01D9     	 bls .L187
1136:.././hal/sam3u1c/udphs_device.c **** 		return false;
 3338              	 .loc 6 1136 10
 3339 001a 0023     	 movs r3,#0
 3340 001c 3CE0     	 b .L188
 3341              	.L187:
1137:.././hal/sam3u1c/udphs_device.c **** 	}
1138:.././hal/sam3u1c/udphs_device.c **** 
1139:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep - 1];
 3342              	 .loc 6 1139 27
 3343 001e FB79     	 ldrb r3,[r7,#7]
 3344 0020 5A1E     	 subs r2,r3,#1
 3345              	 .loc 6 1139 10
 3346 0022 1346     	 mov r3,r2
 3347 0024 5B00     	 lsls r3,r3,#1
 3348 0026 1344     	 add r3,r3,r2
 3349 0028 DB00     	 lsls r3,r3,#3
 3350 002a 1D4A     	 ldr r2,.L194
 3351 002c 1344     	 add r3,r3,r2
 3352 002e FB60     	 str r3,[r7,#12]
1140:.././hal/sam3u1c/udphs_device.c **** 
1141:.././hal/sam3u1c/udphs_device.c **** 	if (!Is_udd_endpoint_enabled(ep)) {
 3353              	 .loc 6 1141 7
 3354 0030 1C4A     	 ldr r2,.L194+4
 3355 0032 FB79     	 ldrb r3,[r7,#7]
 3356 0034 5B01     	 lsls r3,r3,#5
 3357 0036 1344     	 add r3,r3,r2
 3358 0038 03F58673 	 add r3,r3,#268
 3359 003c 1B68     	 ldr r3,[r3]
 3360 003e 03F00103 	 and r3,r3,#1
 3361              	 .loc 6 1141 5
 3362 0042 002B     	 cmp r3,#0
 3363 0044 01D1     	 bne .L189
1142:.././hal/sam3u1c/udphs_device.c **** 		return false; // Endpoint not enabled
 3364              	 .loc 6 1142 10
 3365 0046 0023     	 movs r3,#0
 3366 0048 26E0     	 b .L188
 3367              	.L189:
1143:.././hal/sam3u1c/udphs_device.c **** 	}
1144:.././hal/sam3u1c/udphs_device.c **** 
1145:.././hal/sam3u1c/udphs_device.c **** 	// Wait clear halt endpoint
1146:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->busy == true) {
 3368              	 .loc 6 1146 20
 3369 004a FB68     	 ldr r3,[r7,#12]
 3370 004c 1B7D     	 ldrb r3,[r3,#20]
 3371 004e 03F00103 	 and r3,r3,#1
 3372 0052 DBB2     	 uxtb r3,r3
 3373              	 .loc 6 1146 5
 3374 0054 002B     	 cmp r3,#0
 3375 0056 01D0     	 beq .L190
1147:.././hal/sam3u1c/udphs_device.c **** 		return false; // Job already on going
 3376              	 .loc 6 1147 10
 3377 0058 0023     	 movs r3,#0
 3378 005a 1DE0     	 b .L188
 3379              	.L190:
1148:.././hal/sam3u1c/udphs_device.c **** 	}
1149:.././hal/sam3u1c/udphs_device.c **** 
1150:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_stall_requested(ep)
 3380              	 .loc 6 1150 6
 3381 005c 114A     	 ldr r2,.L194+4
 3382 005e FB79     	 ldrb r3,[r7,#7]
 3383 0060 5B01     	 lsls r3,r3,#5
 3384 0062 1344     	 add r3,r3,r2
 3385 0064 03F58E73 	 add r3,r3,#284
 3386 0068 1B68     	 ldr r3,[r3]
 3387 006a 03F02003 	 and r3,r3,#32
 3388              	 .loc 6 1150 5
 3389 006e 002B     	 cmp r3,#0
 3390 0070 06D1     	 bne .L191
1151:.././hal/sam3u1c/udphs_device.c **** 			|| ptr_job->stall_requested) {
 3391              	 .loc 6 1151 4
 3392 0072 FB68     	 ldr r3,[r7,#12]
 3393 0074 1B7D     	 ldrb r3,[r3,#20]
 3394 0076 03F00403 	 and r3,r3,#4
 3395 007a DBB2     	 uxtb r3,r3
 3396 007c 002B     	 cmp r3,#0
 3397 007e 08D0     	 beq .L192
 3398              	.L191:
1152:.././hal/sam3u1c/udphs_device.c **** 		// Endpoint halted then registers the callback
1153:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->busy = true;
 3399              	 .loc 6 1153 17
 3400 0080 FA68     	 ldr r2,[r7,#12]
 3401 0082 137D     	 ldrb r3,[r2,#20]
 3402 0084 43F00103 	 orr r3,r3,#1
 3403 0088 1375     	 strb r3,[r2,#20]
1154:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->call_nohalt = callback;
 3404              	 .loc 6 1154 24
 3405 008a FB68     	 ldr r3,[r7,#12]
 3406 008c 3A68     	 ldr r2,[r7]
 3407 008e 1A60     	 str r2,[r3]
 3408 0090 01E0     	 b .L193
 3409              	.L192:
1155:.././hal/sam3u1c/udphs_device.c **** 	} else {
1156:.././hal/sam3u1c/udphs_device.c **** 		// endpoint not halted then call directly callback
1157:.././hal/sam3u1c/udphs_device.c **** 		callback();
 3410              	 .loc 6 1157 3
 3411 0092 3B68     	 ldr r3,[r7]
 3412 0094 9847     	 blx r3
 3413              	.LVL58:
 3414              	.L193:
1158:.././hal/sam3u1c/udphs_device.c **** 	}
1159:.././hal/sam3u1c/udphs_device.c **** 	return true;
 3415              	 .loc 6 1159 9
 3416 0096 0123     	 movs r3,#1
 3417              	.L188:
1160:.././hal/sam3u1c/udphs_device.c **** }
 3418              	 .loc 6 1160 1
 3419 0098 1846     	 mov r0,r3
 3420 009a 1037     	 adds r7,r7,#16
 3421              	.LCFI137:
 3422              	 .cfi_def_cfa_offset 8
 3423 009c BD46     	 mov sp,r7
 3424              	.LCFI138:
 3425              	 .cfi_def_cfa_register 13
 3426              	 
 3427 009e 80BD     	 pop {r7,pc}
 3428              	.L195:
 3429              	 .align 2
 3430              	.L194:
 3431 00a0 00000000 	 .word udd_ep_job
 3432 00a4 00400A40 	 .word 1074413568
 3433              	 .cfi_endproc
 3434              	.LFE159:
 3436              	 .section .text.udd_test_mode_j,"ax",%progbits
 3437              	 .align 1
 3438              	 .global udd_test_mode_j
 3439              	 .syntax unified
 3440              	 .thumb
 3441              	 .thumb_func
 3442              	 .fpu softvfp
 3444              	udd_test_mode_j:
 3445              	.LFB160:
1161:.././hal/sam3u1c/udphs_device.c **** #endif // (0!=USB_DEVICE_MAX_EP)
1162:.././hal/sam3u1c/udphs_device.c **** 
1163:.././hal/sam3u1c/udphs_device.c **** 
1164:.././hal/sam3u1c/udphs_device.c **** #ifdef USB_DEVICE_HS_SUPPORT
1165:.././hal/sam3u1c/udphs_device.c **** 
1166:.././hal/sam3u1c/udphs_device.c **** void udd_test_mode_j(void)
1167:.././hal/sam3u1c/udphs_device.c **** {
 3446              	 .loc 6 1167 1
 3447              	 .cfi_startproc
 3448              	 
 3449              	 
 3450              	 
 3451 0000 80B4     	 push {r7}
 3452              	.LCFI139:
 3453              	 .cfi_def_cfa_offset 4
 3454              	 .cfi_offset 7,-4
 3455 0002 00AF     	 add r7,sp,#0
 3456              	.LCFI140:
 3457              	 .cfi_def_cfa_register 7
1168:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode();
 3458              	 .loc 6 1168 2
 3459 0004 0A4B     	 ldr r3,.L197
 3460 0006 D3F8E030 	 ldr r3,[r3,#224]
 3461 000a 23F00303 	 bic r3,r3,#3
 3462 000e 084A     	 ldr r2,.L197
 3463 0010 43F00203 	 orr r3,r3,#2
 3464 0014 C2F8E030 	 str r3,[r2,#224]
1169:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode_j();
 3465              	 .loc 6 1169 2
 3466 0018 054B     	 ldr r3,.L197
 3467 001a D3F8E030 	 ldr r3,[r3,#224]
 3468 001e 044A     	 ldr r2,.L197
 3469 0020 43F00403 	 orr r3,r3,#4
 3470 0024 C2F8E030 	 str r3,[r2,#224]
1170:.././hal/sam3u1c/udphs_device.c **** }
 3471              	 .loc 6 1170 1
 3472 0028 00BF     	 nop
 3473 002a BD46     	 mov sp,r7
 3474              	.LCFI141:
 3475              	 .cfi_def_cfa_register 13
 3476              	 
 3477 002c 80BC     	 pop {r7}
 3478              	.LCFI142:
 3479              	 .cfi_restore 7
 3480              	 .cfi_def_cfa_offset 0
 3481 002e 7047     	 bx lr
 3482              	.L198:
 3483              	 .align 2
 3484              	.L197:
 3485 0030 00400A40 	 .word 1074413568
 3486              	 .cfi_endproc
 3487              	.LFE160:
 3489              	 .section .text.udd_test_mode_k,"ax",%progbits
 3490              	 .align 1
 3491              	 .global udd_test_mode_k
 3492              	 .syntax unified
 3493              	 .thumb
 3494              	 .thumb_func
 3495              	 .fpu softvfp
 3497              	udd_test_mode_k:
 3498              	.LFB161:
1171:.././hal/sam3u1c/udphs_device.c **** 
1172:.././hal/sam3u1c/udphs_device.c **** 
1173:.././hal/sam3u1c/udphs_device.c **** void udd_test_mode_k(void)
1174:.././hal/sam3u1c/udphs_device.c **** {
 3499              	 .loc 6 1174 1
 3500              	 .cfi_startproc
 3501              	 
 3502              	 
 3503              	 
 3504 0000 80B4     	 push {r7}
 3505              	.LCFI143:
 3506              	 .cfi_def_cfa_offset 4
 3507              	 .cfi_offset 7,-4
 3508 0002 00AF     	 add r7,sp,#0
 3509              	.LCFI144:
 3510              	 .cfi_def_cfa_register 7
1175:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode();
 3511              	 .loc 6 1175 2
 3512 0004 0A4B     	 ldr r3,.L200
 3513 0006 D3F8E030 	 ldr r3,[r3,#224]
 3514 000a 23F00303 	 bic r3,r3,#3
 3515 000e 084A     	 ldr r2,.L200
 3516 0010 43F00203 	 orr r3,r3,#2
 3517 0014 C2F8E030 	 str r3,[r2,#224]
1176:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode_k();
 3518              	 .loc 6 1176 2
 3519 0018 054B     	 ldr r3,.L200
 3520 001a D3F8E030 	 ldr r3,[r3,#224]
 3521 001e 044A     	 ldr r2,.L200
 3522 0020 43F00803 	 orr r3,r3,#8
 3523 0024 C2F8E030 	 str r3,[r2,#224]
1177:.././hal/sam3u1c/udphs_device.c **** }
 3524              	 .loc 6 1177 1
 3525 0028 00BF     	 nop
 3526 002a BD46     	 mov sp,r7
 3527              	.LCFI145:
 3528              	 .cfi_def_cfa_register 13
 3529              	 
 3530 002c 80BC     	 pop {r7}
 3531              	.LCFI146:
 3532              	 .cfi_restore 7
 3533              	 .cfi_def_cfa_offset 0
 3534 002e 7047     	 bx lr
 3535              	.L201:
 3536              	 .align 2
 3537              	.L200:
 3538 0030 00400A40 	 .word 1074413568
 3539              	 .cfi_endproc
 3540              	.LFE161:
 3542              	 .section .text.udd_test_mode_se0_nak,"ax",%progbits
 3543              	 .align 1
 3544              	 .global udd_test_mode_se0_nak
 3545              	 .syntax unified
 3546              	 .thumb
 3547              	 .thumb_func
 3548              	 .fpu softvfp
 3550              	udd_test_mode_se0_nak:
 3551              	.LFB162:
1178:.././hal/sam3u1c/udphs_device.c **** 
1179:.././hal/sam3u1c/udphs_device.c **** 
1180:.././hal/sam3u1c/udphs_device.c **** void udd_test_mode_se0_nak(void)
1181:.././hal/sam3u1c/udphs_device.c **** {
 3552              	 .loc 6 1181 1
 3553              	 .cfi_startproc
 3554              	 
 3555              	 
 3556              	 
 3557 0000 80B4     	 push {r7}
 3558              	.LCFI147:
 3559              	 .cfi_def_cfa_offset 4
 3560              	 .cfi_offset 7,-4
 3561 0002 00AF     	 add r7,sp,#0
 3562              	.LCFI148:
 3563              	 .cfi_def_cfa_register 7
1182:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode();
 3564              	 .loc 6 1182 2
 3565 0004 064B     	 ldr r3,.L203
 3566 0006 D3F8E030 	 ldr r3,[r3,#224]
 3567 000a 23F00303 	 bic r3,r3,#3
 3568 000e 044A     	 ldr r2,.L203
 3569 0010 43F00203 	 orr r3,r3,#2
 3570 0014 C2F8E030 	 str r3,[r2,#224]
1183:.././hal/sam3u1c/udphs_device.c **** }
 3571              	 .loc 6 1183 1
 3572 0018 00BF     	 nop
 3573 001a BD46     	 mov sp,r7
 3574              	.LCFI149:
 3575              	 .cfi_def_cfa_register 13
 3576              	 
 3577 001c 80BC     	 pop {r7}
 3578              	.LCFI150:
 3579              	 .cfi_restore 7
 3580              	 .cfi_def_cfa_offset 0
 3581 001e 7047     	 bx lr
 3582              	.L204:
 3583              	 .align 2
 3584              	.L203:
 3585 0020 00400A40 	 .word 1074413568
 3586              	 .cfi_endproc
 3587              	.LFE162:
 3589              	 .section .rodata
 3590              	 .align 2
 3591              	.LC0:
 3592 0000 00000000 	 .ascii "\000\000\000\000\000\000\000\000\000\252\252\252\252"
 3592      00000000 
 3592      00AAAAAA 
 3592      AA
 3593 000d AAAAAAAA 	 .ascii "\252\252\252\252\356\356\356\356\356\356\356\356\376"
 3593      EEEEEEEE 
 3593      EEEEEEEE 
 3593      FE
 3594 001a FFFFFFFF 	 .ascii "\377\377\377\377\377\377\377\377\377\377\377\177\277"
 3594      FFFFFFFF 
 3594      FFFFFF7F 
 3594      BF
 3595 0027 DFEFF7FB 	 .ascii "\337\357\367\373\375\374~\277\337\357\367\373\375~"
 3595      FDFC7EBF 
 3595      DFEFF7FB 
 3595      FD7E
 3596              	 .section .text.udd_test_mode_packet,"ax",%progbits
 3597              	 .align 1
 3598              	 .global udd_test_mode_packet
 3599              	 .syntax unified
 3600              	 .thumb
 3601              	 .thumb_func
 3602              	 .fpu softvfp
 3604              	udd_test_mode_packet:
 3605              	.LFB163:
1184:.././hal/sam3u1c/udphs_device.c **** 
1185:.././hal/sam3u1c/udphs_device.c **** 
1186:.././hal/sam3u1c/udphs_device.c **** void udd_test_mode_packet(void)
1187:.././hal/sam3u1c/udphs_device.c **** {
 3606              	 .loc 6 1187 1
 3607              	 .cfi_startproc
 3608              	 
 3609              	 
 3610              	 
 3611 0000 B0B4     	 push {r4,r5,r7}
 3612              	.LCFI151:
 3613              	 .cfi_def_cfa_offset 12
 3614              	 .cfi_offset 4,-12
 3615              	 .cfi_offset 5,-8
 3616              	 .cfi_offset 7,-4
 3617 0002 93B0     	 sub sp,sp,#76
 3618              	.LCFI152:
 3619              	 .cfi_def_cfa_offset 88
 3620 0004 00AF     	 add r7,sp,#0
 3621              	.LCFI153:
 3622              	 .cfi_def_cfa_register 7
1188:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1189:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr_dest;
1190:.././hal/sam3u1c/udphs_device.c **** 	const uint8_t *ptr_src;
1191:.././hal/sam3u1c/udphs_device.c **** 
1192:.././hal/sam3u1c/udphs_device.c **** 	const uint8_t test_packet[] = {
 3623              	 .loc 6 1192 16
 3624 0006 2E4B     	 ldr r3,.L208
 3625 0008 3C1D     	 adds r4,r7,#4
 3626 000a 1D46     	 mov r5,r3
 3627 000c 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 3628 000e 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 3629 0010 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 3630 0012 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 3631 0014 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 3632 0016 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 3633 0018 95E80300 	 ldm r5,{r0,r1}
 3634 001c 2060     	 str r0,[r4]
 3635 001e 0434     	 adds r4,r4,#4
 3636 0020 2170     	 strb r1,[r4]
1193:.././hal/sam3u1c/udphs_device.c **** 		// 00000000 * 9
1194:.././hal/sam3u1c/udphs_device.c **** 		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
1195:.././hal/sam3u1c/udphs_device.c **** 		// 01010101 * 8
1196:.././hal/sam3u1c/udphs_device.c **** 		0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
1197:.././hal/sam3u1c/udphs_device.c **** 		// 01110111 * 8
1198:.././hal/sam3u1c/udphs_device.c **** 		0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE, 0xEE,
1199:.././hal/sam3u1c/udphs_device.c **** 		// 0, {111111S * 15}, 111111
1200:.././hal/sam3u1c/udphs_device.c **** 		0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
1201:.././hal/sam3u1c/udphs_device.c **** 				0xFF, 0xFF,
1202:.././hal/sam3u1c/udphs_device.c **** 		// S, 111111S, {0111111S * 7}
1203:.././hal/sam3u1c/udphs_device.c **** 		0x7F, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD,
1204:.././hal/sam3u1c/udphs_device.c **** 		// 00111111, {S0111111 * 9}, S0
1205:.././hal/sam3u1c/udphs_device.c **** 		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
1206:.././hal/sam3u1c/udphs_device.c **** 	};
1207:.././hal/sam3u1c/udphs_device.c **** 
1208:.././hal/sam3u1c/udphs_device.c **** 	// Reconfigure control endpoint to bulk IN endpoint
1209:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_endpoint(0);
 3637              	 .loc 6 1209 2
 3638 0022 284B     	 ldr r3,.L208+4
 3639 0024 0122     	 movs r2,#1
 3640 0026 C3F80821 	 str r2,[r3,#264]
1210:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_endpoint(0, // endpoint number: 0
 3641              	 .loc 6 1210 2
 3642 002a 264B     	 ldr r3,.L208+4
 3643 002c D3F80031 	 ldr r3,[r3,#256]
 3644 0030 23F47F73 	 bic r3,r3,#1020
 3645 0034 23F00303 	 bic r3,r3,#3
 3646 0038 224A     	 ldr r2,.L208+4
 3647 003a 43F06B03 	 orr r3,r3,#107
 3648 003e C2F80031 	 str r3,[r2,#256]
1211:.././hal/sam3u1c/udphs_device.c **** 			USB_EP_TYPE_BULK, // Type: bulk
1212:.././hal/sam3u1c/udphs_device.c **** 			1, // dir: IN
1213:.././hal/sam3u1c/udphs_device.c **** 			64, //Size
1214:.././hal/sam3u1c/udphs_device.c **** 			1, // Bank Number
1215:.././hal/sam3u1c/udphs_device.c **** 			0); // NB Trans (not used for bulk ept)
1216:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_endpoint(0);
 3649              	 .loc 6 1216 2
 3650 0042 204B     	 ldr r3,.L208+4
 3651 0044 0122     	 movs r2,#1
 3652 0046 C3F80421 	 str r2,[r3,#260]
1217:.././hal/sam3u1c/udphs_device.c **** 
1218:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode();
 3653              	 .loc 6 1218 2
 3654 004a 1E4B     	 ldr r3,.L208+4
 3655 004c D3F8E030 	 ldr r3,[r3,#224]
 3656 0050 23F00303 	 bic r3,r3,#3
 3657 0054 1B4A     	 ldr r2,.L208+4
 3658 0056 43F00203 	 orr r3,r3,#2
 3659 005a C2F8E030 	 str r3,[r2,#224]
1219:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_hs_test_mode_packet();
 3660              	 .loc 6 1219 2
 3661 005e 194B     	 ldr r3,.L208+4
 3662 0060 D3F8E030 	 ldr r3,[r3,#224]
 3663 0064 174A     	 ldr r2,.L208+4
 3664 0066 43F01003 	 orr r3,r3,#16
 3665 006a C2F8E030 	 str r3,[r2,#224]
1220:.././hal/sam3u1c/udphs_device.c **** 
1221:.././hal/sam3u1c/udphs_device.c **** 	// Send packet on endpoint 0
1222:.././hal/sam3u1c/udphs_device.c **** 	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
 3666              	 .loc 6 1222 11
 3667 006e 164B     	 ldr r3,.L208+8
 3668 0070 3B64     	 str r3,[r7,#64]
1223:.././hal/sam3u1c/udphs_device.c **** 	ptr_src = test_packet;
 3669              	 .loc 6 1223 10
 3670 0072 3B1D     	 adds r3,r7,#4
 3671 0074 FB63     	 str r3,[r7,#60]
1224:.././hal/sam3u1c/udphs_device.c **** 
1225:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < sizeof(test_packet); i++) {
 3672              	 .loc 6 1225 9
 3673 0076 0023     	 movs r3,#0
 3674 0078 87F84730 	 strb r3,[r7,#71]
 3675              	 .loc 6 1225 2
 3676 007c 0CE0     	 b .L206
 3677              	.L207:
1226:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 3678              	 .loc 6 1226 25 discriminator 3
 3679 007e FA6B     	 ldr r2,[r7,#60]
 3680 0080 531C     	 adds r3,r2,#1
 3681 0082 FB63     	 str r3,[r7,#60]
 3682              	 .loc 6 1226 12 discriminator 3
 3683 0084 3B6C     	 ldr r3,[r7,#64]
 3684 0086 591C     	 adds r1,r3,#1
 3685 0088 3964     	 str r1,[r7,#64]
 3686              	 .loc 6 1226 17 discriminator 3
 3687 008a 1278     	 ldrb r2,[r2]
 3688              	 .loc 6 1226 15 discriminator 3
 3689 008c 1A70     	 strb r2,[r3]
1225:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 3690              	 .loc 6 1225 40 discriminator 3
 3691 008e 97F84730 	 ldrb r3,[r7,#71]
 3692 0092 0133     	 adds r3,r3,#1
 3693 0094 87F84730 	 strb r3,[r7,#71]
 3694              	.L206:
1225:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 3695              	 .loc 6 1225 2 discriminator 1
 3696 0098 97F84730 	 ldrb r3,[r7,#71]
 3697 009c 342B     	 cmp r3,#52
 3698 009e EED9     	 bls .L207
1227:.././hal/sam3u1c/udphs_device.c **** 	}
1228:.././hal/sam3u1c/udphs_device.c **** 	// Validate and send the data available in the control endpoint buffer
1229:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_in_send(0);
 3699              	 .loc 6 1229 2
 3700 00a0 084B     	 ldr r3,.L208+4
 3701 00a2 4FF48062 	 mov r2,#1024
 3702 00a6 C3F81821 	 str r2,[r3,#280]
1230:.././hal/sam3u1c/udphs_device.c **** 	udd_raise_tx_pkt_ready(0);
 3703              	 .loc 6 1230 2
 3704 00aa 064B     	 ldr r3,.L208+4
 3705 00ac 4FF40062 	 mov r2,#2048
 3706 00b0 C3F81421 	 str r2,[r3,#276]
1231:.././hal/sam3u1c/udphs_device.c **** }
 3707              	 .loc 6 1231 1
 3708 00b4 00BF     	 nop
 3709 00b6 4C37     	 adds r7,r7,#76
 3710              	.LCFI154:
 3711              	 .cfi_def_cfa_offset 12
 3712 00b8 BD46     	 mov sp,r7
 3713              	.LCFI155:
 3714              	 .cfi_def_cfa_register 13
 3715              	 
 3716 00ba B0BC     	 pop {r4,r5,r7}
 3717              	.LCFI156:
 3718              	 .cfi_restore 7
 3719              	 .cfi_restore 5
 3720              	 .cfi_restore 4
 3721              	 .cfi_def_cfa_offset 0
 3722 00bc 7047     	 bx lr
 3723              	.L209:
 3724 00be 00BF     	 .align 2
 3725              	.L208:
 3726 00c0 00000000 	 .word .LC0
 3727 00c4 00400A40 	 .word 1074413568
 3728 00c8 00001820 	 .word 538443776
 3729              	 .cfi_endproc
 3730              	.LFE163:
 3732              	 .section .text.udd_reset_ep_ctrl,"ax",%progbits
 3733              	 .align 1
 3734              	 .syntax unified
 3735              	 .thumb
 3736              	 .thumb_func
 3737              	 .fpu softvfp
 3739              	udd_reset_ep_ctrl:
 3740              	.LFB164:
1232:.././hal/sam3u1c/udphs_device.c **** #endif // USB_DEVICE_HS_SUPPORT
1233:.././hal/sam3u1c/udphs_device.c **** 
1234:.././hal/sam3u1c/udphs_device.c **** 
1235:.././hal/sam3u1c/udphs_device.c **** 
1236:.././hal/sam3u1c/udphs_device.c **** //--------------------------------------------------------
1237:.././hal/sam3u1c/udphs_device.c **** //--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT
1238:.././hal/sam3u1c/udphs_device.c **** 
1239:.././hal/sam3u1c/udphs_device.c **** static void udd_reset_ep_ctrl(void)
1240:.././hal/sam3u1c/udphs_device.c **** {
 3741              	 .loc 6 1240 1
 3742              	 .cfi_startproc
 3743              	 
 3744              	 
 3745 0000 80B5     	 push {r7,lr}
 3746              	.LCFI157:
 3747              	 .cfi_def_cfa_offset 8
 3748              	 .cfi_offset 7,-8
 3749              	 .cfi_offset 14,-4
 3750 0002 82B0     	 sub sp,sp,#8
 3751              	.LCFI158:
 3752              	 .cfi_def_cfa_offset 16
 3753 0004 00AF     	 add r7,sp,#0
 3754              	.LCFI159:
 3755              	 .cfi_def_cfa_register 7
1241:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1242:.././hal/sam3u1c/udphs_device.c **** 
1243:.././hal/sam3u1c/udphs_device.c **** 	// Reset USB address to 0
1244:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_address(0);
 3756              	 .loc 6 1244 2
 3757 0006 1B4B     	 ldr r3,.L211
 3758 0008 1B68     	 ldr r3,[r3]
 3759 000a 1A4A     	 ldr r2,.L211
 3760 000c 23F07F03 	 bic r3,r3,#127
 3761 0010 1360     	 str r3,[r2]
1245:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_address();
 3762              	 .loc 6 1245 2
 3763 0012 184B     	 ldr r3,.L211
 3764 0014 1B68     	 ldr r3,[r3]
 3765 0016 174A     	 ldr r2,.L211
 3766 0018 43F08003 	 orr r3,r3,#128
 3767 001c 1360     	 str r3,[r2]
1246:.././hal/sam3u1c/udphs_device.c **** 
1247:.././hal/sam3u1c/udphs_device.c **** 	// Alloc and configure control endpoint
1248:.././hal/sam3u1c/udphs_device.c **** 	udd_configure_endpoint(0,
 3768              	 .loc 6 1248 2
 3769 001e 154B     	 ldr r3,.L211
 3770 0020 D3F80031 	 ldr r3,[r3,#256]
 3771 0024 23F47F73 	 bic r3,r3,#1020
 3772 0028 23F00303 	 bic r3,r3,#3
 3773 002c 114A     	 ldr r2,.L211
 3774 002e 43F04303 	 orr r3,r3,#67
 3775 0032 C2F80031 	 str r3,[r2,#256]
1249:.././hal/sam3u1c/udphs_device.c **** 			USB_EP_TYPE_CONTROL,
1250:.././hal/sam3u1c/udphs_device.c **** 			0,
1251:.././hal/sam3u1c/udphs_device.c **** 			USB_DEVICE_EP_CTRL_SIZE,
1252:.././hal/sam3u1c/udphs_device.c **** 			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
1253:.././hal/sam3u1c/udphs_device.c **** 			0);
1254:.././hal/sam3u1c/udphs_device.c **** 
1255:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
1256:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_endpoint(0);
 3776              	 .loc 6 1256 2
 3777 0036 0F4B     	 ldr r3,.L211
 3778 0038 0122     	 movs r2,#1
 3779 003a C3F80421 	 str r2,[r3,#260]
1257:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 3780              	 .loc 6 1257 10
 3781 003e 0E4B     	 ldr r3,.L211+4
 3782 0040 9847     	 blx r3
 3783              	.LVL59:
 3784 0042 7860     	 str r0,[r7,#4]
1258:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_setup_received_interrupt(0);
 3785              	 .loc 6 1258 2
 3786 0044 0B4B     	 ldr r3,.L211
 3787 0046 4FF48052 	 mov r2,#4096
 3788 004a C3F80421 	 str r2,[r3,#260]
1259:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_out_received_interrupt(0);
 3789              	 .loc 6 1259 2
 3790 004e 094B     	 ldr r3,.L211
 3791 0050 4FF40072 	 mov r2,#512
 3792 0054 C3F80421 	 str r2,[r3,#260]
1260:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_endpoint_interrupt(0);
 3793              	 .loc 6 1260 2
 3794 0058 064B     	 ldr r3,.L211
 3795 005a 1B69     	 ldr r3,[r3,#16]
 3796 005c 054A     	 ldr r2,.L211
 3797 005e 43F48073 	 orr r3,r3,#256
 3798 0062 1361     	 str r3,[r2,#16]
1261:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 3799              	 .loc 6 1261 2
 3800 0064 7868     	 ldr r0,[r7,#4]
 3801 0066 054B     	 ldr r3,.L211+8
 3802 0068 9847     	 blx r3
 3803              	.LVL60:
1262:.././hal/sam3u1c/udphs_device.c **** }
 3804              	 .loc 6 1262 1
 3805 006a 00BF     	 nop
 3806 006c 0837     	 adds r7,r7,#8
 3807              	.LCFI160:
 3808              	 .cfi_def_cfa_offset 8
 3809 006e BD46     	 mov sp,r7
 3810              	.LCFI161:
 3811              	 .cfi_def_cfa_register 13
 3812              	 
 3813 0070 80BD     	 pop {r7,pc}
 3814              	.L212:
 3815 0072 00BF     	 .align 2
 3816              	.L211:
 3817 0074 00400A40 	 .word 1074413568
 3818 0078 00000000 	 .word cpu_irq_save
 3819 007c 00000000 	 .word cpu_irq_restore
 3820              	 .cfi_endproc
 3821              	.LFE164:
 3823              	 .section .text.udd_ctrl_init,"ax",%progbits
 3824              	 .align 1
 3825              	 .syntax unified
 3826              	 .thumb
 3827              	 .thumb_func
 3828              	 .fpu softvfp
 3830              	udd_ctrl_init:
 3831              	.LFB165:
1263:.././hal/sam3u1c/udphs_device.c **** 
1264:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_init(void)
1265:.././hal/sam3u1c/udphs_device.c **** {
 3832              	 .loc 6 1265 1
 3833              	 .cfi_startproc
 3834              	 
 3835              	 
 3836 0000 80B5     	 push {r7,lr}
 3837              	.LCFI162:
 3838              	 .cfi_def_cfa_offset 8
 3839              	 .cfi_offset 7,-8
 3840              	 .cfi_offset 14,-4
 3841 0002 82B0     	 sub sp,sp,#8
 3842              	.LCFI163:
 3843              	 .cfi_def_cfa_offset 16
 3844 0004 00AF     	 add r7,sp,#0
 3845              	.LCFI164:
 3846              	 .cfi_def_cfa_register 7
1266:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1267:.././hal/sam3u1c/udphs_device.c **** 
1268:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("ctlInit ");
1269:.././hal/sam3u1c/udphs_device.c **** 
1270:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 3847              	 .loc 6 1270 10
 3848 0006 104B     	 ldr r3,.L214
 3849 0008 9847     	 blx r3
 3850              	.LVL61:
 3851 000a 7860     	 str r0,[r7,#4]
1271:.././hal/sam3u1c/udphs_device.c **** 	// In case of abort of IN Data Phase:
1272:.././hal/sam3u1c/udphs_device.c **** 	// No need to abort IN transfer (rise TXINI),
1273:.././hal/sam3u1c/udphs_device.c **** 	// because it is automatically done by hardware when a Setup packet is received.
1274:.././hal/sam3u1c/udphs_device.c **** 	// But the interrupt must be disabled to don't generate interrupt TXINI
1275:.././hal/sam3u1c/udphs_device.c **** 	// after SETUP reception.
1276:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_in_send_interrupt(0);
 3852              	 .loc 6 1276 2
 3853 000c 0F4B     	 ldr r3,.L214+4
 3854 000e 4FF48062 	 mov r2,#1024
 3855 0012 C3F80821 	 str r2,[r3,#264]
1277:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 3856              	 .loc 6 1277 2
 3857 0016 7868     	 ldr r0,[r7,#4]
 3858 0018 0D4B     	 ldr r3,.L214+8
 3859 001a 9847     	 blx r3
 3860              	.LVL62:
1278:.././hal/sam3u1c/udphs_device.c **** 
1279:.././hal/sam3u1c/udphs_device.c **** 	// In case of OUT ZLP event is no processed before Setup event occurs
1280:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_out_received(0);
 3861              	 .loc 6 1280 2
 3862 001c 0B4B     	 ldr r3,.L214+4
 3863 001e 4FF40072 	 mov r2,#512
 3864 0022 C3F81821 	 str r2,[r3,#280]
1281:.././hal/sam3u1c/udphs_device.c **** 
1282:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.callback = NULL;
 3865              	 .loc 6 1282 25
 3866 0026 0B4B     	 ldr r3,.L214+12
 3867 0028 0022     	 movs r2,#0
 3868 002a 1A61     	 str r2,[r3,#16]
1283:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.over_under_run = NULL;
 3869              	 .loc 6 1283 31
 3870 002c 094B     	 ldr r3,.L214+12
 3871 002e 0022     	 movs r2,#0
 3872 0030 5A61     	 str r2,[r3,#20]
1284:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.payload_size = 0;
 3873              	 .loc 6 1284 29
 3874 0032 084B     	 ldr r3,.L214+12
 3875 0034 0022     	 movs r2,#0
 3876 0036 9A81     	 strh r2,[r3,#12]
1285:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_control_state = UDD_EPCTRL_SETUP;
 3877              	 .loc 6 1285 23
 3878 0038 074B     	 ldr r3,.L214+16
 3879 003a 0022     	 movs r2,#0
 3880 003c 1A70     	 strb r2,[r3]
1286:.././hal/sam3u1c/udphs_device.c **** }
 3881              	 .loc 6 1286 1
 3882 003e 00BF     	 nop
 3883 0040 0837     	 adds r7,r7,#8
 3884              	.LCFI165:
 3885              	 .cfi_def_cfa_offset 8
 3886 0042 BD46     	 mov sp,r7
 3887              	.LCFI166:
 3888              	 .cfi_def_cfa_register 13
 3889              	 
 3890 0044 80BD     	 pop {r7,pc}
 3891              	.L215:
 3892 0046 00BF     	 .align 2
 3893              	.L214:
 3894 0048 00000000 	 .word cpu_irq_save
 3895 004c 00400A40 	 .word 1074413568
 3896 0050 00000000 	 .word cpu_irq_restore
 3897 0054 00000000 	 .word udd_g_ctrlreq
 3898 0058 00000000 	 .word udd_ep_control_state
 3899              	 .cfi_endproc
 3900              	.LFE165:
 3902              	 .section .text.udd_ctrl_setup_received,"ax",%progbits
 3903              	 .align 1
 3904              	 .syntax unified
 3905              	 .thumb
 3906              	 .thumb_func
 3907              	 .fpu softvfp
 3909              	udd_ctrl_setup_received:
 3910              	.LFB166:
1287:.././hal/sam3u1c/udphs_device.c **** 
1288:.././hal/sam3u1c/udphs_device.c **** 
1289:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_setup_received(void)
1290:.././hal/sam3u1c/udphs_device.c **** {
 3911              	 .loc 6 1290 1
 3912              	 .cfi_startproc
 3913              	 
 3914              	 
 3915 0000 80B5     	 push {r7,lr}
 3916              	.LCFI167:
 3917              	 .cfi_def_cfa_offset 8
 3918              	 .cfi_offset 7,-8
 3919              	 .cfi_offset 14,-4
 3920 0002 84B0     	 sub sp,sp,#16
 3921              	.LCFI168:
 3922              	 .cfi_def_cfa_offset 24
 3923 0004 00AF     	 add r7,sp,#0
 3924              	.LCFI169:
 3925              	 .cfi_def_cfa_register 7
1291:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1292:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1293:.././hal/sam3u1c/udphs_device.c **** 
1294:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
 3926              	 .loc 6 1294 23
 3927 0006 404B     	 ldr r3,.L225
 3928 0008 1B78     	 ldrb r3,[r3]
 3929              	 .loc 6 1294 5
 3930 000a 002B     	 cmp r3,#0
 3931 000c 03D0     	 beq .L217
1295:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("sErr ");
1296:.././hal/sam3u1c/udphs_device.c **** 		// May be a hidden DATA or ZLP phase
1297:.././hal/sam3u1c/udphs_device.c **** 		// or protocol abort
1298:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_endofrequest();
 3932              	 .loc 6 1298 3
 3933 000e 3F4B     	 ldr r3,.L225+4
 3934 0010 9847     	 blx r3
 3935              	.LVL63:
1299:.././hal/sam3u1c/udphs_device.c **** 
1300:.././hal/sam3u1c/udphs_device.c **** 		// Reinitializes control endpoint management
1301:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_init();
 3936              	 .loc 6 1301 3
 3937 0012 3F4B     	 ldr r3,.L225+8
 3938 0014 9847     	 blx r3
 3939              	.LVL64:
 3940              	.L217:
1302:.././hal/sam3u1c/udphs_device.c **** 	}
1303:.././hal/sam3u1c/udphs_device.c **** 	// Fill setup request structure
1304:.././hal/sam3u1c/udphs_device.c **** 	if (8 != udd_byte_count(0)) {
 3941              	 .loc 6 1304 11
 3942 0016 3F4B     	 ldr r3,.L225+12
 3943 0018 D3F81C31 	 ldr r3,[r3,#284]
 3944 001c 1B0D     	 lsrs r3,r3,#20
 3945 001e C3F30A03 	 ubfx r3,r3,#0,#11
 3946              	 .loc 6 1304 5
 3947 0022 082B     	 cmp r3,#8
 3948 0024 07D0     	 beq .L218
1305:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("cntErr ");
1306:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_stall_data();
 3949              	 .loc 6 1306 3
 3950 0026 3C4B     	 ldr r3,.L225+16
 3951 0028 9847     	 blx r3
 3952              	.LVL65:
1307:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_setup_received(0);
 3953              	 .loc 6 1307 3
 3954 002a 3A4B     	 ldr r3,.L225+12
 3955 002c 4FF48052 	 mov r2,#4096
 3956 0030 C3F81821 	 str r2,[r3,#280]
1308:.././hal/sam3u1c/udphs_device.c **** 		return; // Error data number doesn't correspond to SETUP packet
 3957              	 .loc 6 1308 3
 3958 0034 64E0     	 b .L216
 3959              	.L218:
1309:.././hal/sam3u1c/udphs_device.c **** 	}
1310:.././hal/sam3u1c/udphs_device.c **** 
1311:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
 3960              	 .loc 6 1311 11
 3961 0036 394B     	 ldr r3,.L225+20
 3962 0038 BB60     	 str r3,[r7,#8]
1312:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < 8; i++) {
 3963              	 .loc 6 1312 9
 3964 003a 0023     	 movs r3,#0
 3965 003c FB73     	 strb r3,[r7,#15]
 3966              	 .loc 6 1312 2
 3967 003e 0AE0     	 b .L220
 3968              	.L221:
1313:.././hal/sam3u1c/udphs_device.c **** 		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
 3969              	 .loc 6 1313 46 discriminator 3
 3970 0040 BB68     	 ldr r3,[r7,#8]
 3971 0042 5A1C     	 adds r2,r3,#1
 3972 0044 BA60     	 str r2,[r7,#8]
 3973              	 .loc 6 1313 36 discriminator 3
 3974 0046 FA7B     	 ldrb r2,[r7,#15]
 3975 0048 3549     	 ldr r1,.L225+24
 3976 004a 0A44     	 add r2,r2,r1
 3977              	 .loc 6 1313 42 discriminator 3
 3978 004c 1B78     	 ldrb r3,[r3]
 3979              	 .loc 6 1313 40 discriminator 3
 3980 004e 1370     	 strb r3,[r2]
1312:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < 8; i++) {
 3981              	 .loc 6 1312 22 discriminator 3
 3982 0050 FB7B     	 ldrb r3,[r7,#15]
 3983 0052 0133     	 adds r3,r3,#1
 3984 0054 FB73     	 strb r3,[r7,#15]
 3985              	.L220:
1312:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < 8; i++) {
 3986              	 .loc 6 1312 2 discriminator 1
 3987 0056 FB7B     	 ldrb r3,[r7,#15]
 3988 0058 072B     	 cmp r3,#7
 3989 005a F1D9     	 bls .L221
1314:.././hal/sam3u1c/udphs_device.c **** 	}
1315:.././hal/sam3u1c/udphs_device.c **** 	// Manage LSB/MSB to fit with CPU usage
1316:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
 3990              	 .loc 6 1316 29
 3991 005c 304B     	 ldr r3,.L225+24
 3992 005e 5A88     	 ldrh r2,[r3,#2]
 3993              	 .loc 6 1316 27
 3994 0060 2F4B     	 ldr r3,.L225+24
 3995 0062 5A80     	 strh r2,[r3,#2]
1317:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
 3996              	 .loc 6 1317 29
 3997 0064 2E4B     	 ldr r3,.L225+24
 3998 0066 9A88     	 ldrh r2,[r3,#4]
 3999              	 .loc 6 1317 27
 4000 0068 2D4B     	 ldr r3,.L225+24
 4001 006a 9A80     	 strh r2,[r3,#4]
1318:.././hal/sam3u1c/udphs_device.c **** 	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
 4002              	 .loc 6 1318 30
 4003 006c 2C4B     	 ldr r3,.L225+24
 4004 006e DA88     	 ldrh r2,[r3,#6]
 4005              	 .loc 6 1318 28
 4006 0070 2B4B     	 ldr r3,.L225+24
 4007 0072 DA80     	 strh r2,[r3,#6]
1319:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("(%x %x %x %x %x) ",
1320:.././hal/sam3u1c/udphs_device.c **** 			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
1321:.././hal/sam3u1c/udphs_device.c **** 			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
1322:.././hal/sam3u1c/udphs_device.c **** 			udd_g_ctrlreq.req.wLength);
1323:.././hal/sam3u1c/udphs_device.c **** 
1324:.././hal/sam3u1c/udphs_device.c **** 	// Decode setup request
1325:.././hal/sam3u1c/udphs_device.c **** 	if (udc_process_setup() == false) {
 4008              	 .loc 6 1325 6
 4009 0074 2B4B     	 ldr r3,.L225+28
 4010 0076 9847     	 blx r3
 4011              	.LVL66:
 4012 0078 0346     	 mov r3,r0
 4013              	 .loc 6 1325 26
 4014 007a 83F00103 	 eor r3,r3,#1
 4015 007e DBB2     	 uxtb r3,r3
 4016              	 .loc 6 1325 5
 4017 0080 002B     	 cmp r3,#0
 4018 0082 07D0     	 beq .L222
1326:.././hal/sam3u1c/udphs_device.c **** 		// Setup request unknown then stall it
1327:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("ProcErr ");
1328:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_stall_data();
 4019              	 .loc 6 1328 3
 4020 0084 244B     	 ldr r3,.L225+16
 4021 0086 9847     	 blx r3
 4022              	.LVL67:
1329:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_setup_received(0);
 4023              	 .loc 6 1329 3
 4024 0088 224B     	 ldr r3,.L225+12
 4025 008a 4FF48052 	 mov r2,#4096
 4026 008e C3F81821 	 str r2,[r3,#280]
1330:.././hal/sam3u1c/udphs_device.c **** 		return;
 4027              	 .loc 6 1330 3
 4028 0092 35E0     	 b .L216
 4029              	.L222:
1331:.././hal/sam3u1c/udphs_device.c **** 	}
1332:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_setup_received(0);
 4030              	 .loc 6 1332 2
 4031 0094 1F4B     	 ldr r3,.L225+12
 4032 0096 4FF48052 	 mov r2,#4096
 4033 009a C3F81821 	 str r2,[r3,#280]
1333:.././hal/sam3u1c/udphs_device.c **** 
1334:.././hal/sam3u1c/udphs_device.c **** 	if (Udd_setup_is_in()) {
 4034              	 .loc 6 1334 6
 4035 009e 204B     	 ldr r3,.L225+24
 4036 00a0 1B78     	 ldrb r3,[r3]
 4037 00a2 5BB2     	 sxtb r3,r3
 4038              	 .loc 6 1334 5
 4039 00a4 002B     	 cmp r3,#0
 4040 00a6 0BDA     	 bge .L223
1335:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("_I ");
1336:.././hal/sam3u1c/udphs_device.c **** 		// IN data phase requested
1337:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_prev_payload_buf_cnt = 0;
 4041              	 .loc 6 1337 33
 4042 00a8 1F4B     	 ldr r3,.L225+32
 4043 00aa 0022     	 movs r2,#0
 4044 00ac 1A80     	 strh r2,[r3]
1338:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_payload_buf_cnt = 0;
 4045              	 .loc 6 1338 28
 4046 00ae 1F4B     	 ldr r3,.L225+36
 4047 00b0 0022     	 movs r2,#0
 4048 00b2 1A80     	 strh r2,[r3]
1339:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
 4049              	 .loc 6 1339 24
 4050 00b4 144B     	 ldr r3,.L225
 4051 00b6 0222     	 movs r2,#2
 4052 00b8 1A70     	 strb r2,[r3]
1340:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_in_sent(); // Send first data transfer
 4053              	 .loc 6 1340 3
 4054 00ba 1D4B     	 ldr r3,.L225+40
 4055 00bc 9847     	 blx r3
 4056              	.LVL68:
 4057 00be 1FE0     	 b .L216
 4058              	.L223:
1341:.././hal/sam3u1c/udphs_device.c **** 	} else {
1342:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("_O ");
1343:.././hal/sam3u1c/udphs_device.c **** 		if (0 == udd_g_ctrlreq.req.wLength) {
 4059              	 .loc 6 1343 29
 4060 00c0 174B     	 ldr r3,.L225+24
 4061 00c2 DB88     	 ldrh r3,[r3,#6]
 4062              	 .loc 6 1343 6
 4063 00c4 002B     	 cmp r3,#0
 4064 00c6 02D1     	 bne .L224
1344:.././hal/sam3u1c/udphs_device.c **** 			// No data phase requested
1345:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("Zl ");
1346:.././hal/sam3u1c/udphs_device.c **** 			// Send IN ZLP to ACK setup request
1347:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_send_zlp_in();
 4065              	 .loc 6 1347 4
 4066 00c8 1A4B     	 ldr r3,.L225+44
 4067 00ca 9847     	 blx r3
 4068              	.LVL69:
1348:.././hal/sam3u1c/udphs_device.c **** 			return;
 4069              	 .loc 6 1348 4
 4070 00cc 18E0     	 b .L216
 4071              	.L224:
1349:.././hal/sam3u1c/udphs_device.c **** 		}
1350:.././hal/sam3u1c/udphs_device.c **** 		// OUT data phase requested
1351:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_prev_payload_buf_cnt = 0;
 4072              	 .loc 6 1351 33
 4073 00ce 164B     	 ldr r3,.L225+32
 4074 00d0 0022     	 movs r2,#0
 4075 00d2 1A80     	 strh r2,[r3]
1352:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_payload_buf_cnt = 0;
 4076              	 .loc 6 1352 28
 4077 00d4 154B     	 ldr r3,.L225+36
 4078 00d6 0022     	 movs r2,#0
 4079 00d8 1A80     	 strh r2,[r3]
1353:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
 4080              	 .loc 6 1353 24
 4081 00da 0B4B     	 ldr r3,.L225
 4082 00dc 0122     	 movs r2,#1
 4083 00de 1A70     	 strb r2,[r3]
1354:.././hal/sam3u1c/udphs_device.c **** 		// To detect a protocol error, enable nak interrupt on data IN phase
1355:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_nak_in(0);
 4084              	 .loc 6 1355 3
 4085 00e0 0C4B     	 ldr r3,.L225+12
 4086 00e2 4FF48042 	 mov r2,#16384
 4087 00e6 C3F81821 	 str r2,[r3,#280]
1356:.././hal/sam3u1c/udphs_device.c **** 		flags = cpu_irq_save();
 4088              	 .loc 6 1356 11
 4089 00ea 134B     	 ldr r3,.L225+48
 4090 00ec 9847     	 blx r3
 4091              	.LVL70:
 4092 00ee 7860     	 str r0,[r7,#4]
1357:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_nak_in_interrupt(0);
 4093              	 .loc 6 1357 3
 4094 00f0 084B     	 ldr r3,.L225+12
 4095 00f2 4FF48042 	 mov r2,#16384
 4096 00f6 C3F80421 	 str r2,[r3,#260]
1358:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_restore(flags);
 4097              	 .loc 6 1358 3
 4098 00fa 7868     	 ldr r0,[r7,#4]
 4099 00fc 0F4B     	 ldr r3,.L225+52
 4100 00fe 9847     	 blx r3
 4101              	.LVL71:
 4102              	.L216:
1359:.././hal/sam3u1c/udphs_device.c **** 	}
1360:.././hal/sam3u1c/udphs_device.c **** }
 4103              	 .loc 6 1360 1
 4104 0100 1037     	 adds r7,r7,#16
 4105              	.LCFI170:
 4106              	 .cfi_def_cfa_offset 8
 4107 0102 BD46     	 mov sp,r7
 4108              	.LCFI171:
 4109              	 .cfi_def_cfa_register 13
 4110              	 
 4111 0104 80BD     	 pop {r7,pc}
 4112              	.L226:
 4113 0106 00BF     	 .align 2
 4114              	.L225:
 4115 0108 00000000 	 .word udd_ep_control_state
 4116 010c 00000000 	 .word udd_ctrl_endofrequest
 4117 0110 00000000 	 .word udd_ctrl_init
 4118 0114 00400A40 	 .word 1074413568
 4119 0118 00000000 	 .word udd_ctrl_stall_data
 4120 011c 00001820 	 .word 538443776
 4121 0120 00000000 	 .word udd_g_ctrlreq
 4122 0124 00000000 	 .word udc_process_setup
 4123 0128 00000000 	 .word udd_ctrl_prev_payload_buf_cnt
 4124 012c 00000000 	 .word udd_ctrl_payload_buf_cnt
 4125 0130 00000000 	 .word udd_ctrl_in_sent
 4126 0134 00000000 	 .word udd_ctrl_send_zlp_in
 4127 0138 00000000 	 .word cpu_irq_save
 4128 013c 00000000 	 .word cpu_irq_restore
 4129              	 .cfi_endproc
 4130              	.LFE166:
 4132              	 .section .text.udd_ctrl_in_sent,"ax",%progbits
 4133              	 .align 1
 4134              	 .syntax unified
 4135              	 .thumb
 4136              	 .thumb_func
 4137              	 .fpu softvfp
 4139              	udd_ctrl_in_sent:
 4140              	.LFB167:
1361:.././hal/sam3u1c/udphs_device.c **** 
1362:.././hal/sam3u1c/udphs_device.c **** 
1363:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_in_sent(void)
1364:.././hal/sam3u1c/udphs_device.c **** {
 4141              	 .loc 6 1364 1
 4142              	 .cfi_startproc
 4143              	 
 4144              	 
 4145 0000 80B5     	 push {r7,lr}
 4146              	.LCFI172:
 4147              	 .cfi_def_cfa_offset 8
 4148              	 .cfi_offset 7,-8
 4149              	 .cfi_offset 14,-4
 4150 0002 84B0     	 sub sp,sp,#16
 4151              	.LCFI173:
 4152              	 .cfi_def_cfa_offset 24
 4153 0004 00AF     	 add r7,sp,#0
 4154              	.LCFI174:
 4155              	 .cfi_def_cfa_register 7
1365:.././hal/sam3u1c/udphs_device.c **** 	static bool b_shortpacket = false;
1366:.././hal/sam3u1c/udphs_device.c **** 	uint16_t nb_remain;
1367:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1368:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr_dest, *ptr_src;
1369:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1370:.././hal/sam3u1c/udphs_device.c **** 
1371:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4156              	 .loc 6 1371 10
 4157 0006 4C4B     	 ldr r3,.L238
 4158 0008 9847     	 blx r3
 4159              	.LVL72:
 4160 000a 3860     	 str r0,[r7]
1372:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_in_send_interrupt(0);
 4161              	 .loc 6 1372 2
 4162 000c 4B4B     	 ldr r3,.L238+4
 4163 000e 4FF48062 	 mov r2,#1024
 4164 0012 C3F80821 	 str r2,[r3,#264]
1373:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4165              	 .loc 6 1373 2
 4166 0016 3868     	 ldr r0,[r7]
 4167 0018 494B     	 ldr r3,.L238+8
 4168 001a 9847     	 blx r3
 4169              	.LVL73:
1374:.././hal/sam3u1c/udphs_device.c **** 
1375:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
 4170              	 .loc 6 1375 39
 4171 001c 494B     	 ldr r3,.L238+12
 4172 001e 1B78     	 ldrb r3,[r3]
 4173              	 .loc 6 1375 5
 4174 0020 032B     	 cmp r3,#3
 4175 0022 04D1     	 bne .L228
1376:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("ZlpE\n\r");
1377:.././hal/sam3u1c/udphs_device.c **** 		// ZLP on IN is sent, then valid end of setup request
1378:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_endofrequest();
 4176              	 .loc 6 1378 3
 4177 0024 484B     	 ldr r3,.L238+16
 4178 0026 9847     	 blx r3
 4179              	.LVL74:
1379:.././hal/sam3u1c/udphs_device.c **** 		// Reinitializes control endpoint management
1380:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_init();
 4180              	 .loc 6 1380 3
 4181 0028 484B     	 ldr r3,.L238+20
 4182 002a 9847     	 blx r3
 4183              	.LVL75:
1381:.././hal/sam3u1c/udphs_device.c **** 		return;
 4184              	 .loc 6 1381 3
 4185 002c 81E0     	 b .L227
 4186              	.L228:
1382:.././hal/sam3u1c/udphs_device.c **** 	}
1383:.././hal/sam3u1c/udphs_device.c **** 	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);
1384:.././hal/sam3u1c/udphs_device.c **** 
1385:.././hal/sam3u1c/udphs_device.c **** 	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
 4187              	 .loc 6 1385 27
 4188 002e 484B     	 ldr r3,.L238+24
 4189 0030 9A89     	 ldrh r2,[r3,#12]
 4190              	 .loc 6 1385 41
 4191 0032 484B     	 ldr r3,.L238+28
 4192 0034 1B88     	 ldrh r3,[r3]
 4193              	 .loc 6 1385 12
 4194 0036 D31A     	 subs r3,r2,r3
 4195 0038 FB81     	 strh r3,[r7,#14]
1386:.././hal/sam3u1c/udphs_device.c **** 	if (0 == nb_remain) {
 4196              	 .loc 6 1386 5
 4197 003a FB89     	 ldrh r3,[r7,#14]
 4198 003c 002B     	 cmp r3,#0
 4199 003e 27D1     	 bne .L230
1387:.././hal/sam3u1c/udphs_device.c **** 		// All content of current buffer payload are sent
1388:.././hal/sam3u1c/udphs_device.c **** 		// Update number of total data sending by previous payload buffer
1389:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
 4200              	 .loc 6 1389 33
 4201 0040 454B     	 ldr r3,.L238+32
 4202 0042 1A88     	 ldrh r2,[r3]
 4203 0044 434B     	 ldr r3,.L238+28
 4204 0046 1B88     	 ldrh r3,[r3]
 4205 0048 1344     	 add r3,r3,r2
 4206 004a 9AB2     	 uxth r2,r3
 4207 004c 424B     	 ldr r3,.L238+32
 4208 004e 1A80     	 strh r2,[r3]
1390:.././hal/sam3u1c/udphs_device.c **** 		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
 4209              	 .loc 6 1390 25
 4210 0050 3F4B     	 ldr r3,.L238+24
 4211 0052 DA88     	 ldrh r2,[r3,#6]
 4212              	 .loc 6 1390 34
 4213 0054 404B     	 ldr r3,.L238+32
 4214 0056 1B88     	 ldrh r3,[r3]
 4215              	 .loc 6 1390 6
 4216 0058 9A42     	 cmp r2,r3
 4217 005a 03D0     	 beq .L231
1391:.././hal/sam3u1c/udphs_device.c **** 				|| b_shortpacket) {
 4218              	 .loc 6 1391 5
 4219 005c 3F4B     	 ldr r3,.L238+36
 4220 005e 1B78     	 ldrb r3,[r3]
 4221 0060 002B     	 cmp r3,#0
 4222 0062 02D0     	 beq .L232
 4223              	.L231:
1392:.././hal/sam3u1c/udphs_device.c **** 			// All data requested are transfered or a short packet has been sent
1393:.././hal/sam3u1c/udphs_device.c **** 			// then it is the end of data phase.
1394:.././hal/sam3u1c/udphs_device.c **** 			// Generate an OUT ZLP for handshake phase.
1395:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("_zO ");
1396:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_send_zlp_out();
 4224              	 .loc 6 1396 4
 4225 0064 3E4B     	 ldr r3,.L238+40
 4226 0066 9847     	 blx r3
 4227              	.LVL76:
1397:.././hal/sam3u1c/udphs_device.c **** 			return;
 4228              	 .loc 6 1397 4
 4229 0068 63E0     	 b .L227
 4230              	.L232:
1398:.././hal/sam3u1c/udphs_device.c **** 		}
1399:.././hal/sam3u1c/udphs_device.c **** 		// Need of new buffer because the data phase is not complete
1400:.././hal/sam3u1c/udphs_device.c **** 		if ((!udd_g_ctrlreq.over_under_run)
 4231              	 .loc 6 1400 22
 4232 006a 394B     	 ldr r3,.L238+24
 4233 006c 5B69     	 ldr r3,[r3,#20]
 4234              	 .loc 6 1400 6
 4235 006e 002B     	 cmp r3,#0
 4236 0070 0ED0     	 beq .L230
1401:.././hal/sam3u1c/udphs_device.c **** 				|| (!udd_g_ctrlreq.over_under_run())) {
 4237              	 .loc 6 1401 23
 4238 0072 374B     	 ldr r3,.L238+24
 4239 0074 5B69     	 ldr r3,[r3,#20]
 4240              	 .loc 6 1401 10
 4241 0076 9847     	 blx r3
 4242              	.LVL77:
 4243 0078 0346     	 mov r3,r0
 4244              	 .loc 6 1401 9
 4245 007a 83F00103 	 eor r3,r3,#1
 4246 007e DBB2     	 uxtb r3,r3
 4247              	 .loc 6 1401 5
 4248 0080 002B     	 cmp r3,#0
 4249 0082 05D1     	 bne .L230
1402:.././hal/sam3u1c/udphs_device.c **** 			// Underrun then send zlp on IN
1403:.././hal/sam3u1c/udphs_device.c **** 			// Here nb_remain=0 and allows to send a IN ZLP
1404:.././hal/sam3u1c/udphs_device.c **** 		} else {
1405:.././hal/sam3u1c/udphs_device.c **** 			// A new payload buffer is given
1406:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_payload_buf_cnt = 0;
 4250              	 .loc 6 1406 29
 4251 0084 334B     	 ldr r3,.L238+28
 4252 0086 0022     	 movs r2,#0
 4253 0088 1A80     	 strh r2,[r3]
1407:.././hal/sam3u1c/udphs_device.c **** 			nb_remain = udd_g_ctrlreq.payload_size;
 4254              	 .loc 6 1407 14
 4255 008a 314B     	 ldr r3,.L238+24
 4256 008c 9B89     	 ldrh r3,[r3,#12]
 4257 008e FB81     	 strh r3,[r7,#14]
 4258              	.L230:
1408:.././hal/sam3u1c/udphs_device.c **** 		}
1409:.././hal/sam3u1c/udphs_device.c **** 	}
1410:.././hal/sam3u1c/udphs_device.c **** 	// Continue transfer and send next data
1411:.././hal/sam3u1c/udphs_device.c **** 	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
 4259              	 .loc 6 1411 5
 4260 0090 FB89     	 ldrh r3,[r7,#14]
 4261 0092 3F2B     	 cmp r3,#63
 4262 0094 05D9     	 bls .L233
1412:.././hal/sam3u1c/udphs_device.c **** 		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
 4263              	 .loc 6 1412 13
 4264 0096 4023     	 movs r3,#64
 4265 0098 FB81     	 strh r3,[r7,#14]
1413:.././hal/sam3u1c/udphs_device.c **** 		b_shortpacket = false;
 4266              	 .loc 6 1413 17
 4267 009a 304B     	 ldr r3,.L238+36
 4268 009c 0022     	 movs r2,#0
 4269 009e 1A70     	 strb r2,[r3]
 4270 00a0 02E0     	 b .L234
 4271              	.L233:
1414:.././hal/sam3u1c/udphs_device.c **** 	} else {
1415:.././hal/sam3u1c/udphs_device.c **** 		b_shortpacket = true;
 4272              	 .loc 6 1415 17
 4273 00a2 2E4B     	 ldr r3,.L238+36
 4274 00a4 0122     	 movs r2,#1
 4275 00a6 1A70     	 strb r2,[r3]
 4276              	.L234:
1416:.././hal/sam3u1c/udphs_device.c **** 	}
1417:.././hal/sam3u1c/udphs_device.c **** 	// Fill buffer of endpoint control
1418:.././hal/sam3u1c/udphs_device.c **** 	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
 4277              	 .loc 6 1418 11
 4278 00a8 2E4B     	 ldr r3,.L238+44
 4279 00aa BB60     	 str r3,[r7,#8]
1419:.././hal/sam3u1c/udphs_device.c **** 	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
 4280              	 .loc 6 1419 25
 4281 00ac 284B     	 ldr r3,.L238+24
 4282 00ae 9B68     	 ldr r3,[r3,#8]
 4283              	 .loc 6 1419 34
 4284 00b0 284A     	 ldr r2,.L238+28
 4285 00b2 1288     	 ldrh r2,[r2]
 4286              	 .loc 6 1419 10
 4287 00b4 1344     	 add r3,r3,r2
 4288 00b6 7B60     	 str r3,[r7,#4]
1420:.././hal/sam3u1c/udphs_device.c **** 	//** Critical section
1421:.././hal/sam3u1c/udphs_device.c **** 	// Only in case of DATA IN phase abort without USB Reset signal after.
1422:.././hal/sam3u1c/udphs_device.c **** 	// The IN data don't must be written in endpoint 0 DPRAM during
1423:.././hal/sam3u1c/udphs_device.c **** 	// a next setup reception in same endpoint 0 DPRAM.
1424:.././hal/sam3u1c/udphs_device.c **** 	// Thereby, an OUT ZLP reception must check before IN data write
1425:.././hal/sam3u1c/udphs_device.c **** 	// and if no OUT ZLP is received the data must be written quickly (800us)
1426:.././hal/sam3u1c/udphs_device.c **** 	// before an eventually ZLP OUT and SETUP reception
1427:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4289              	 .loc 6 1427 10
 4290 00b8 1F4B     	 ldr r3,.L238
 4291 00ba 9847     	 blx r3
 4292              	.LVL78:
 4293 00bc 3860     	 str r0,[r7]
1428:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_out_received(0)) {
 4294              	 .loc 6 1428 6
 4295 00be 1F4B     	 ldr r3,.L238+4
 4296 00c0 D3F81C31 	 ldr r3,[r3,#284]
 4297 00c4 03F40073 	 and r3,r3,#512
 4298              	 .loc 6 1428 5
 4299 00c8 002B     	 cmp r3,#0
 4300 00ca 06D0     	 beq .L235
1429:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Abort ");
1430:.././hal/sam3u1c/udphs_device.c **** 		// IN DATA phase aborted by OUT ZLP
1431:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_restore(flags);
 4301              	 .loc 6 1431 3
 4302 00cc 3868     	 ldr r0,[r7]
 4303 00ce 1C4B     	 ldr r3,.L238+8
 4304 00d0 9847     	 blx r3
 4305              	.LVL79:
1432:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
 4306              	 .loc 6 1432 24
 4307 00d2 1C4B     	 ldr r3,.L238+12
 4308 00d4 0422     	 movs r2,#4
 4309 00d6 1A70     	 strb r2,[r3]
1433:.././hal/sam3u1c/udphs_device.c **** 		return; // Exit of IN DATA phase
 4310              	 .loc 6 1433 3
 4311 00d8 2BE0     	 b .L227
 4312              	.L235:
1434:.././hal/sam3u1c/udphs_device.c **** 	}
1435:.././hal/sam3u1c/udphs_device.c **** 	// dbg_print("t%d ", nb_remain);
1436:.././hal/sam3u1c/udphs_device.c **** 	// Write quickly the IN data
1437:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_remain; i++) {
 4313              	 .loc 6 1437 9
 4314 00da 0023     	 movs r3,#0
 4315 00dc 7B73     	 strb r3,[r7,#13]
 4316              	 .loc 6 1437 2
 4317 00de 0AE0     	 b .L236
 4318              	.L237:
1438:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4319              	 .loc 6 1438 25 discriminator 3
 4320 00e0 7A68     	 ldr r2,[r7,#4]
 4321 00e2 531C     	 adds r3,r2,#1
 4322 00e4 7B60     	 str r3,[r7,#4]
 4323              	 .loc 6 1438 12 discriminator 3
 4324 00e6 BB68     	 ldr r3,[r7,#8]
 4325 00e8 591C     	 adds r1,r3,#1
 4326 00ea B960     	 str r1,[r7,#8]
 4327              	 .loc 6 1438 17 discriminator 3
 4328 00ec 1278     	 ldrb r2,[r2]
 4329              	 .loc 6 1438 15 discriminator 3
 4330 00ee 1A70     	 strb r2,[r3]
1437:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4331              	 .loc 6 1437 30 discriminator 3
 4332 00f0 7B7B     	 ldrb r3,[r7,#13]
 4333 00f2 0133     	 adds r3,r3,#1
 4334 00f4 7B73     	 strb r3,[r7,#13]
 4335              	.L236:
1437:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4336              	 .loc 6 1437 16 discriminator 1
 4337 00f6 7B7B     	 ldrb r3,[r7,#13]
 4338 00f8 9BB2     	 uxth r3,r3
1437:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4339              	 .loc 6 1437 2 discriminator 1
 4340 00fa FA89     	 ldrh r2,[r7,#14]
 4341 00fc 9A42     	 cmp r2,r3
 4342 00fe EFD8     	 bhi .L237
1439:.././hal/sam3u1c/udphs_device.c **** 	}
1440:.././hal/sam3u1c/udphs_device.c **** 	udd_ctrl_payload_buf_cnt += nb_remain;
 4343              	 .loc 6 1440 27
 4344 0100 144B     	 ldr r3,.L238+28
 4345 0102 1A88     	 ldrh r2,[r3]
 4346 0104 FB89     	 ldrh r3,[r7,#14]
 4347 0106 1344     	 add r3,r3,r2
 4348 0108 9AB2     	 uxth r2,r3
 4349 010a 124B     	 ldr r3,.L238+28
 4350 010c 1A80     	 strh r2,[r3]
1441:.././hal/sam3u1c/udphs_device.c **** 
1442:.././hal/sam3u1c/udphs_device.c **** 	// Validate and send the data available in the control endpoint buffer
1443:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_in_send(0);
 4351              	 .loc 6 1443 2
 4352 010e 0B4B     	 ldr r3,.L238+4
 4353 0110 4FF48062 	 mov r2,#1024
 4354 0114 C3F81821 	 str r2,[r3,#280]
1444:.././hal/sam3u1c/udphs_device.c **** 	udd_raise_tx_pkt_ready(0);
 4355              	 .loc 6 1444 2
 4356 0118 084B     	 ldr r3,.L238+4
 4357 011a 4FF40062 	 mov r2,#2048
 4358 011e C3F81421 	 str r2,[r3,#276]
1445:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_in_send_interrupt(0);
 4359              	 .loc 6 1445 2
 4360 0122 064B     	 ldr r3,.L238+4
 4361 0124 4FF48062 	 mov r2,#1024
 4362 0128 C3F80421 	 str r2,[r3,#260]
1446:.././hal/sam3u1c/udphs_device.c **** 	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
1447:.././hal/sam3u1c/udphs_device.c **** 	// because OUT endpoint is already free and ZLP OUT accepted.
1448:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4363              	 .loc 6 1448 2
 4364 012c 3868     	 ldr r0,[r7]
 4365 012e 044B     	 ldr r3,.L238+8
 4366 0130 9847     	 blx r3
 4367              	.LVL80:
 4368              	.L227:
1449:.././hal/sam3u1c/udphs_device.c **** }
 4369              	 .loc 6 1449 1
 4370 0132 1037     	 adds r7,r7,#16
 4371              	.LCFI175:
 4372              	 .cfi_def_cfa_offset 8
 4373 0134 BD46     	 mov sp,r7
 4374              	.LCFI176:
 4375              	 .cfi_def_cfa_register 13
 4376              	 
 4377 0136 80BD     	 pop {r7,pc}
 4378              	.L239:
 4379              	 .align 2
 4380              	.L238:
 4381 0138 00000000 	 .word cpu_irq_save
 4382 013c 00400A40 	 .word 1074413568
 4383 0140 00000000 	 .word cpu_irq_restore
 4384 0144 00000000 	 .word udd_ep_control_state
 4385 0148 00000000 	 .word udd_ctrl_endofrequest
 4386 014c 00000000 	 .word udd_ctrl_init
 4387 0150 00000000 	 .word udd_g_ctrlreq
 4388 0154 00000000 	 .word udd_ctrl_payload_buf_cnt
 4389 0158 00000000 	 .word udd_ctrl_prev_payload_buf_cnt
 4390 015c 00000000 	 .word b_shortpacket.8448
 4391 0160 00000000 	 .word udd_ctrl_send_zlp_out
 4392 0164 00001820 	 .word 538443776
 4393              	 .cfi_endproc
 4394              	.LFE167:
 4396              	 .section .text.udd_ctrl_out_received,"ax",%progbits
 4397              	 .align 1
 4398              	 .syntax unified
 4399              	 .thumb
 4400              	 .thumb_func
 4401              	 .fpu softvfp
 4403              	udd_ctrl_out_received:
 4404              	.LFB168:
1450:.././hal/sam3u1c/udphs_device.c **** 
1451:.././hal/sam3u1c/udphs_device.c **** 
1452:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_out_received(void)
1453:.././hal/sam3u1c/udphs_device.c **** {
 4405              	 .loc 6 1453 1
 4406              	 .cfi_startproc
 4407              	 
 4408              	 
 4409 0000 80B5     	 push {r7,lr}
 4410              	.LCFI177:
 4411              	 .cfi_def_cfa_offset 8
 4412              	 .cfi_offset 7,-8
 4413              	 .cfi_offset 14,-4
 4414 0002 84B0     	 sub sp,sp,#16
 4415              	.LCFI178:
 4416              	 .cfi_def_cfa_offset 24
 4417 0004 00AF     	 add r7,sp,#0
 4418              	.LCFI179:
 4419              	 .cfi_def_cfa_register 7
1454:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1455:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1456:.././hal/sam3u1c/udphs_device.c **** 	uint16_t nb_data;
1457:.././hal/sam3u1c/udphs_device.c **** 
1458:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
 4420              	 .loc 6 1458 26
 4421 0006 614B     	 ldr r3,.L255
 4422 0008 1B78     	 ldrb r3,[r3]
 4423              	 .loc 6 1458 5
 4424 000a 012B     	 cmp r3,#1
 4425 000c 0FD0     	 beq .L241
1459:.././hal/sam3u1c/udphs_device.c **** 		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
 4426              	 .loc 6 1459 27
 4427 000e 5F4B     	 ldr r3,.L255
 4428 0010 1B78     	 ldrb r3,[r3]
 4429              	 .loc 6 1459 6
 4430 0012 022B     	 cmp r3,#2
 4431 0014 03D0     	 beq .L242
1460:.././hal/sam3u1c/udphs_device.c **** 				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
 4432              	 .loc 6 1460 43
 4433 0016 5D4B     	 ldr r3,.L255
 4434 0018 1B78     	 ldrb r3,[r3]
 4435              	 .loc 6 1460 5
 4436 001a 042B     	 cmp r3,#4
 4437 001c 02D1     	 bne .L243
 4438              	.L242:
1461:.././hal/sam3u1c/udphs_device.c **** 				udd_ep_control_state)) {
1462:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("EoStp\n\r");
1463:.././hal/sam3u1c/udphs_device.c **** 			// End of SETUP request:
1464:.././hal/sam3u1c/udphs_device.c **** 			// - Data IN Phase aborted,
1465:.././hal/sam3u1c/udphs_device.c **** 			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
1466:.././hal/sam3u1c/udphs_device.c **** 			// - or ZLP OUT received normally.
1467:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_endofrequest();
 4439              	 .loc 6 1467 4
 4440 001e 5C4B     	 ldr r3,.L255+4
 4441 0020 9847     	 blx r3
 4442              	.LVL81:
 4443 0022 01E0     	 b .L244
 4444              	.L243:
1468:.././hal/sam3u1c/udphs_device.c **** 		} else {
1469:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("ErrStp\n\r");
1470:.././hal/sam3u1c/udphs_device.c **** 			// Protocol error during SETUP request
1471:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_stall_data();
 4445              	 .loc 6 1471 4
 4446 0024 5B4B     	 ldr r3,.L255+8
 4447 0026 9847     	 blx r3
 4448              	.LVL82:
 4449              	.L244:
1472:.././hal/sam3u1c/udphs_device.c **** 		}
1473:.././hal/sam3u1c/udphs_device.c **** 		// Reinitializes control endpoint management
1474:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_init();
 4450              	 .loc 6 1474 3
 4451 0028 5B4B     	 ldr r3,.L255+12
 4452 002a 9847     	 blx r3
 4453              	.LVL83:
1475:.././hal/sam3u1c/udphs_device.c **** 		return;
 4454              	 .loc 6 1475 3
 4455 002c ABE0     	 b .L240
 4456              	.L241:
1476:.././hal/sam3u1c/udphs_device.c **** 	}
1477:.././hal/sam3u1c/udphs_device.c **** 	// Read data received during OUT phase
1478:.././hal/sam3u1c/udphs_device.c **** 	nb_data = udd_byte_count(0);
 4457              	 .loc 6 1478 12
 4458 002e 5B4B     	 ldr r3,.L255+16
 4459 0030 D3F81C31 	 ldr r3,[r3,#284]
 4460 0034 1B0D     	 lsrs r3,r3,#20
 4461 0036 9BB2     	 uxth r3,r3
 4462              	 .loc 6 1478 10
 4463 0038 C3F30A03 	 ubfx r3,r3,#0,#11
 4464 003c BB81     	 strh r3,[r7,#12]
1479:.././hal/sam3u1c/udphs_device.c **** 	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
 4465              	 .loc 6 1479 19
 4466 003e 584B     	 ldr r3,.L255+20
 4467 0040 9B89     	 ldrh r3,[r3,#12]
 4468 0042 1A46     	 mov r2,r3
 4469              	 .loc 6 1479 61
 4470 0044 574B     	 ldr r3,.L255+24
 4471 0046 1B88     	 ldrh r3,[r3]
 4472 0048 1946     	 mov r1,r3
 4473 004a BB89     	 ldrh r3,[r7,#12]
 4474 004c 0B44     	 add r3,r3,r1
 4475              	 .loc 6 1479 5
 4476 004e 9A42     	 cmp r2,r3
 4477 0050 05DA     	 bge .L246
1480:.././hal/sam3u1c/udphs_device.c **** 		// Payload buffer too small
1481:.././hal/sam3u1c/udphs_device.c **** 		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
 4478              	 .loc 6 1481 26
 4479 0052 534B     	 ldr r3,.L255+20
 4480 0054 9A89     	 ldrh r2,[r3,#12]
 4481              	 .loc 6 1481 40
 4482 0056 534B     	 ldr r3,.L255+24
 4483 0058 1B88     	 ldrh r3,[r3]
 4484              	 .loc 6 1481 11
 4485 005a D31A     	 subs r3,r2,r3
 4486 005c BB81     	 strh r3,[r7,#12]
 4487              	.L246:
1482:.././hal/sam3u1c/udphs_device.c **** 	}
1483:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
 4488              	 .loc 6 1483 11
 4489 005e 524B     	 ldr r3,.L255+28
 4490 0060 BB60     	 str r3,[r7,#8]
1484:.././hal/sam3u1c/udphs_device.c **** 	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
 4491              	 .loc 6 1484 35
 4492 0062 4F4B     	 ldr r3,.L255+20
 4493 0064 9B68     	 ldr r3,[r3,#8]
 4494              	 .loc 6 1484 44
 4495 0066 4F4A     	 ldr r2,.L255+24
 4496 0068 1288     	 ldrh r2,[r2]
 4497              	 .loc 6 1484 11
 4498 006a 1344     	 add r3,r3,r2
 4499 006c 7B60     	 str r3,[r7,#4]
1485:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_data; i++) {
 4500              	 .loc 6 1485 9
 4501 006e 0023     	 movs r3,#0
 4502 0070 FB73     	 strb r3,[r7,#15]
 4503              	 .loc 6 1485 2
 4504 0072 0AE0     	 b .L247
 4505              	.L248:
1486:.././hal/sam3u1c/udphs_device.c **** 		*ptr_dest++ = *ptr_src++;
 4506              	 .loc 6 1486 25 discriminator 3
 4507 0074 BA68     	 ldr r2,[r7,#8]
 4508 0076 531C     	 adds r3,r2,#1
 4509 0078 BB60     	 str r3,[r7,#8]
 4510              	 .loc 6 1486 12 discriminator 3
 4511 007a 7B68     	 ldr r3,[r7,#4]
 4512 007c 591C     	 adds r1,r3,#1
 4513 007e 7960     	 str r1,[r7,#4]
 4514              	 .loc 6 1486 17 discriminator 3
 4515 0080 1278     	 ldrb r2,[r2]
 4516              	 .loc 6 1486 15 discriminator 3
 4517 0082 1A70     	 strb r2,[r3]
1485:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_data; i++) {
 4518              	 .loc 6 1485 28 discriminator 3
 4519 0084 FB7B     	 ldrb r3,[r7,#15]
 4520 0086 0133     	 adds r3,r3,#1
 4521 0088 FB73     	 strb r3,[r7,#15]
 4522              	.L247:
1485:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_data; i++) {
 4523              	 .loc 6 1485 16 discriminator 1
 4524 008a FB7B     	 ldrb r3,[r7,#15]
 4525 008c 9BB2     	 uxth r3,r3
1485:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < nb_data; i++) {
 4526              	 .loc 6 1485 2 discriminator 1
 4527 008e BA89     	 ldrh r2,[r7,#12]
 4528 0090 9A42     	 cmp r2,r3
 4529 0092 EFD8     	 bhi .L248
1487:.././hal/sam3u1c/udphs_device.c **** 	}
1488:.././hal/sam3u1c/udphs_device.c **** 	udd_ctrl_payload_buf_cnt += nb_data;
 4530              	 .loc 6 1488 27
 4531 0094 434B     	 ldr r3,.L255+24
 4532 0096 1A88     	 ldrh r2,[r3]
 4533 0098 BB89     	 ldrh r3,[r7,#12]
 4534 009a 1344     	 add r3,r3,r2
 4535 009c 9AB2     	 uxth r2,r3
 4536 009e 414B     	 ldr r3,.L255+24
 4537 00a0 1A80     	 strh r2,[r3]
1489:.././hal/sam3u1c/udphs_device.c **** 
1490:.././hal/sam3u1c/udphs_device.c **** 	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
 4538              	 .loc 6 1490 5
 4539 00a2 BB89     	 ldrh r3,[r7,#12]
 4540 00a4 402B     	 cmp r3,#64
 4541 00a6 0AD1     	 bne .L249
1491:.././hal/sam3u1c/udphs_device.c **** 			|| (udd_g_ctrlreq.req.wLength <=
 4542              	 .loc 6 1491 25
 4543 00a8 3D4B     	 ldr r3,.L255+20
 4544 00aa DB88     	 ldrh r3,[r3,#6]
 4545 00ac 1A46     	 mov r2,r3
1492:.././hal/sam3u1c/udphs_device.c **** 			(udd_ctrl_prev_payload_buf_cnt +
 4546              	 .loc 6 1492 35
 4547 00ae 3F4B     	 ldr r3,.L255+32
 4548 00b0 1B88     	 ldrh r3,[r3]
 4549 00b2 1946     	 mov r1,r3
 4550 00b4 3B4B     	 ldr r3,.L255+24
 4551 00b6 1B88     	 ldrh r3,[r3]
 4552 00b8 0B44     	 add r3,r3,r1
1491:.././hal/sam3u1c/udphs_device.c **** 			|| (udd_g_ctrlreq.req.wLength <=
 4553              	 .loc 6 1491 4
 4554 00ba 9A42     	 cmp r2,r3
 4555 00bc 20DC     	 bgt .L250
 4556              	.L249:
1493:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_payload_buf_cnt))) {
1494:.././hal/sam3u1c/udphs_device.c **** 		// End of reception because it is a short packet
1495:.././hal/sam3u1c/udphs_device.c **** 		// Before send ZLP, call intermediate callback
1496:.././hal/sam3u1c/udphs_device.c **** 		// in case of data receive generate a stall
1497:.././hal/sam3u1c/udphs_device.c **** 		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
 4557              	 .loc 6 1497 30
 4558 00be 394B     	 ldr r3,.L255+24
 4559 00c0 1A88     	 ldrh r2,[r3]
 4560 00c2 374B     	 ldr r3,.L255+20
 4561 00c4 9A81     	 strh r2,[r3,#12]
1498:.././hal/sam3u1c/udphs_device.c **** 		if (NULL != udd_g_ctrlreq.over_under_run) {
 4562              	 .loc 6 1498 28
 4563 00c6 364B     	 ldr r3,.L255+20
 4564 00c8 5B69     	 ldr r3,[r3,#20]
 4565              	 .loc 6 1498 6
 4566 00ca 002B     	 cmp r3,#0
 4567 00cc 10D0     	 beq .L251
1499:.././hal/sam3u1c/udphs_device.c **** 			if (!udd_g_ctrlreq.over_under_run()) {
 4568              	 .loc 6 1499 22
 4569 00ce 344B     	 ldr r3,.L255+20
 4570 00d0 5B69     	 ldr r3,[r3,#20]
 4571              	 .loc 6 1499 9
 4572 00d2 9847     	 blx r3
 4573              	.LVL84:
 4574 00d4 0346     	 mov r3,r0
 4575              	 .loc 6 1499 8
 4576 00d6 83F00103 	 eor r3,r3,#1
 4577 00da DBB2     	 uxtb r3,r3
 4578              	 .loc 6 1499 7
 4579 00dc 002B     	 cmp r3,#0
 4580 00de 07D0     	 beq .L251
1500:.././hal/sam3u1c/udphs_device.c **** 				// Stall ZLP
1501:.././hal/sam3u1c/udphs_device.c **** 				udd_ctrl_stall_data();
 4581              	 .loc 6 1501 5
 4582 00e0 2C4B     	 ldr r3,.L255+8
 4583 00e2 9847     	 blx r3
 4584              	.LVL85:
1502:.././hal/sam3u1c/udphs_device.c **** 				// Ack reception of OUT to replace NAK by a STALL
1503:.././hal/sam3u1c/udphs_device.c **** 				udd_ack_out_received(0);
 4585              	 .loc 6 1503 5
 4586 00e4 2D4B     	 ldr r3,.L255+16
 4587 00e6 4FF40072 	 mov r2,#512
 4588 00ea C3F81821 	 str r2,[r3,#280]
1504:.././hal/sam3u1c/udphs_device.c **** 				return;
 4589              	 .loc 6 1504 5
 4590 00ee 4AE0     	 b .L240
 4591              	.L251:
1505:.././hal/sam3u1c/udphs_device.c **** 			}
1506:.././hal/sam3u1c/udphs_device.c **** 		}
1507:.././hal/sam3u1c/udphs_device.c **** 		// Send IN ZLP to ACK setup request
1508:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_out_received(0);
 4592              	 .loc 6 1508 3
 4593 00f0 2A4B     	 ldr r3,.L255+16
 4594 00f2 4FF40072 	 mov r2,#512
 4595 00f6 C3F81821 	 str r2,[r3,#280]
1509:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_send_zlp_in();
 4596              	 .loc 6 1509 3
 4597 00fa 2D4B     	 ldr r3,.L255+36
 4598 00fc 9847     	 blx r3
 4599              	.LVL86:
1510:.././hal/sam3u1c/udphs_device.c **** 		return;
 4600              	 .loc 6 1510 3
 4601 00fe 42E0     	 b .L240
 4602              	.L250:
1511:.././hal/sam3u1c/udphs_device.c **** 	}
1512:.././hal/sam3u1c/udphs_device.c **** 
1513:.././hal/sam3u1c/udphs_device.c **** 	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
 4603              	 .loc 6 1513 19
 4604 0100 274B     	 ldr r3,.L255+20
 4605 0102 9A89     	 ldrh r2,[r3,#12]
 4606              	 .loc 6 1513 33
 4607 0104 274B     	 ldr r3,.L255+24
 4608 0106 1B88     	 ldrh r3,[r3]
 4609              	 .loc 6 1513 5
 4610 0108 9A42     	 cmp r2,r3
 4611 010a 27D1     	 bne .L252
1514:.././hal/sam3u1c/udphs_device.c **** 		// Overrun then request a new payload buffer
1515:.././hal/sam3u1c/udphs_device.c **** 		if (!udd_g_ctrlreq.over_under_run) {
 4612              	 .loc 6 1515 21
 4613 010c 244B     	 ldr r3,.L255+20
 4614 010e 5B69     	 ldr r3,[r3,#20]
 4615              	 .loc 6 1515 6
 4616 0110 002B     	 cmp r3,#0
 4617 0112 07D1     	 bne .L253
1516:.././hal/sam3u1c/udphs_device.c **** 			// No callback available to request a new payload buffer
1517:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_stall_data();
 4618              	 .loc 6 1517 4
 4619 0114 1F4B     	 ldr r3,.L255+8
 4620 0116 9847     	 blx r3
 4621              	.LVL87:
1518:.././hal/sam3u1c/udphs_device.c **** 			// Ack reception of OUT to replace NAK by a STALL
1519:.././hal/sam3u1c/udphs_device.c **** 			udd_ack_out_received(0);
 4622              	 .loc 6 1519 4
 4623 0118 204B     	 ldr r3,.L255+16
 4624 011a 4FF40072 	 mov r2,#512
 4625 011e C3F81821 	 str r2,[r3,#280]
1520:.././hal/sam3u1c/udphs_device.c **** 			return;
 4626              	 .loc 6 1520 4
 4627 0122 30E0     	 b .L240
 4628              	.L253:
1521:.././hal/sam3u1c/udphs_device.c **** 		}
1522:.././hal/sam3u1c/udphs_device.c **** 		if (!udd_g_ctrlreq.over_under_run()) {
 4629              	 .loc 6 1522 21
 4630 0124 1E4B     	 ldr r3,.L255+20
 4631 0126 5B69     	 ldr r3,[r3,#20]
 4632              	 .loc 6 1522 8
 4633 0128 9847     	 blx r3
 4634              	.LVL88:
 4635 012a 0346     	 mov r3,r0
 4636              	 .loc 6 1522 7
 4637 012c 83F00103 	 eor r3,r3,#1
 4638 0130 DBB2     	 uxtb r3,r3
 4639              	 .loc 6 1522 6
 4640 0132 002B     	 cmp r3,#0
 4641 0134 07D0     	 beq .L254
1523:.././hal/sam3u1c/udphs_device.c **** 			// No new payload buffer delivered
1524:.././hal/sam3u1c/udphs_device.c **** 			udd_ctrl_stall_data();
 4642              	 .loc 6 1524 4
 4643 0136 174B     	 ldr r3,.L255+8
 4644 0138 9847     	 blx r3
 4645              	.LVL89:
1525:.././hal/sam3u1c/udphs_device.c **** 			// Ack reception of OUT to replace NAK by a STALL
1526:.././hal/sam3u1c/udphs_device.c **** 			udd_ack_out_received(0);
 4646              	 .loc 6 1526 4
 4647 013a 184B     	 ldr r3,.L255+16
 4648 013c 4FF40072 	 mov r2,#512
 4649 0140 C3F81821 	 str r2,[r3,#280]
1527:.././hal/sam3u1c/udphs_device.c **** 			return;
 4650              	 .loc 6 1527 4
 4651 0144 1FE0     	 b .L240
 4652              	.L254:
1528:.././hal/sam3u1c/udphs_device.c **** 		}
1529:.././hal/sam3u1c/udphs_device.c **** 		// New payload buffer available
1530:.././hal/sam3u1c/udphs_device.c **** 		// Update number of total data received
1531:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
 4653              	 .loc 6 1531 33
 4654 0146 194B     	 ldr r3,.L255+32
 4655 0148 1A88     	 ldrh r2,[r3]
 4656 014a 164B     	 ldr r3,.L255+24
 4657 014c 1B88     	 ldrh r3,[r3]
 4658 014e 1344     	 add r3,r3,r2
 4659 0150 9AB2     	 uxth r2,r3
 4660 0152 164B     	 ldr r3,.L255+32
 4661 0154 1A80     	 strh r2,[r3]
1532:.././hal/sam3u1c/udphs_device.c **** 		// Reinit reception on payload buffer
1533:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_payload_buf_cnt = 0;
 4662              	 .loc 6 1533 28
 4663 0156 134B     	 ldr r3,.L255+24
 4664 0158 0022     	 movs r2,#0
 4665 015a 1A80     	 strh r2,[r3]
 4666              	.L252:
1534:.././hal/sam3u1c/udphs_device.c **** 	}
1535:.././hal/sam3u1c/udphs_device.c **** 	// Free buffer of control endpoint to authorize next reception
1536:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_out_received(0);
 4667              	 .loc 6 1536 2
 4668 015c 0F4B     	 ldr r3,.L255+16
 4669 015e 4FF40072 	 mov r2,#512
 4670 0162 C3F81821 	 str r2,[r3,#280]
1537:.././hal/sam3u1c/udphs_device.c **** 	// To detect a protocol error, enable nak interrupt on data IN phase
1538:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_nak_in(0);
 4671              	 .loc 6 1538 2
 4672 0166 0D4B     	 ldr r3,.L255+16
 4673 0168 4FF48042 	 mov r2,#16384
 4674 016c C3F81821 	 str r2,[r3,#280]
1539:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4675              	 .loc 6 1539 10
 4676 0170 104B     	 ldr r3,.L255+40
 4677 0172 9847     	 blx r3
 4678              	.LVL90:
 4679 0174 3860     	 str r0,[r7]
1540:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_nak_in_interrupt(0);
 4680              	 .loc 6 1540 2
 4681 0176 094B     	 ldr r3,.L255+16
 4682 0178 4FF48042 	 mov r2,#16384
 4683 017c C3F80421 	 str r2,[r3,#260]
1541:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4684              	 .loc 6 1541 2
 4685 0180 3868     	 ldr r0,[r7]
 4686 0182 0D4B     	 ldr r3,.L255+44
 4687 0184 9847     	 blx r3
 4688              	.LVL91:
 4689              	.L240:
1542:.././hal/sam3u1c/udphs_device.c **** }
 4690              	 .loc 6 1542 1
 4691 0186 1037     	 adds r7,r7,#16
 4692              	.LCFI180:
 4693              	 .cfi_def_cfa_offset 8
 4694 0188 BD46     	 mov sp,r7
 4695              	.LCFI181:
 4696              	 .cfi_def_cfa_register 13
 4697              	 
 4698 018a 80BD     	 pop {r7,pc}
 4699              	.L256:
 4700              	 .align 2
 4701              	.L255:
 4702 018c 00000000 	 .word udd_ep_control_state
 4703 0190 00000000 	 .word udd_ctrl_endofrequest
 4704 0194 00000000 	 .word udd_ctrl_stall_data
 4705 0198 00000000 	 .word udd_ctrl_init
 4706 019c 00400A40 	 .word 1074413568
 4707 01a0 00000000 	 .word udd_g_ctrlreq
 4708 01a4 00000000 	 .word udd_ctrl_payload_buf_cnt
 4709 01a8 00001820 	 .word 538443776
 4710 01ac 00000000 	 .word udd_ctrl_prev_payload_buf_cnt
 4711 01b0 00000000 	 .word udd_ctrl_send_zlp_in
 4712 01b4 00000000 	 .word cpu_irq_save
 4713 01b8 00000000 	 .word cpu_irq_restore
 4714              	 .cfi_endproc
 4715              	.LFE168:
 4717              	 .section .text.udd_ctrl_underflow,"ax",%progbits
 4718              	 .align 1
 4719              	 .syntax unified
 4720              	 .thumb
 4721              	 .thumb_func
 4722              	 .fpu softvfp
 4724              	udd_ctrl_underflow:
 4725              	.LFB169:
1543:.././hal/sam3u1c/udphs_device.c **** 
1544:.././hal/sam3u1c/udphs_device.c **** 
1545:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_underflow(void)
1546:.././hal/sam3u1c/udphs_device.c **** {
 4726              	 .loc 6 1546 1
 4727              	 .cfi_startproc
 4728              	 
 4729              	 
 4730 0000 80B5     	 push {r7,lr}
 4731              	.LCFI182:
 4732              	 .cfi_def_cfa_offset 8
 4733              	 .cfi_offset 7,-8
 4734              	 .cfi_offset 14,-4
 4735 0002 00AF     	 add r7,sp,#0
 4736              	.LCFI183:
 4737              	 .cfi_def_cfa_register 7
1547:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_out_received(0))
 4738              	 .loc 6 1547 6
 4739 0004 0C4B     	 ldr r3,.L262
 4740 0006 D3F81C31 	 ldr r3,[r3,#284]
 4741 000a 03F40073 	 and r3,r3,#512
 4742              	 .loc 6 1547 5
 4743 000e 002B     	 cmp r3,#0
 4744 0010 0FD1     	 bne .L261
1548:.././hal/sam3u1c/udphs_device.c **** 		return; // underflow ignored if OUT data is received
1549:.././hal/sam3u1c/udphs_device.c **** 
1550:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
 4745              	 .loc 6 1550 26
 4746 0012 0A4B     	 ldr r3,.L262+4
 4747 0014 1B78     	 ldrb r3,[r3]
 4748              	 .loc 6 1550 5
 4749 0016 012B     	 cmp r3,#1
 4750 0018 02D1     	 bne .L260
1551:.././hal/sam3u1c/udphs_device.c **** 		// Host want to stop OUT transaction
1552:.././hal/sam3u1c/udphs_device.c **** 		// then stop to wait OUT data phase and wait IN ZLP handshake
1553:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_send_zlp_in();
 4751              	 .loc 6 1553 3
 4752 001a 094B     	 ldr r3,.L262+8
 4753 001c 9847     	 blx r3
 4754              	.LVL92:
 4755 001e 09E0     	 b .L257
 4756              	.L260:
1554:.././hal/sam3u1c/udphs_device.c **** 	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
 4757              	 .loc 6 1554 47
 4758 0020 064B     	 ldr r3,.L262+4
 4759 0022 1B78     	 ldrb r3,[r3]
 4760              	 .loc 6 1554 12
 4761 0024 042B     	 cmp r3,#4
 4762 0026 05D1     	 bne .L257
1555:.././hal/sam3u1c/udphs_device.c **** 		// A OUT handshake is waiting by device,
1556:.././hal/sam3u1c/udphs_device.c **** 		// but host want extra IN data then stall extra IN data
1557:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_stall_handshake(0);
 4763              	 .loc 6 1557 3
 4764 0028 034B     	 ldr r3,.L262
 4765 002a 2022     	 movs r2,#32
 4766 002c C3F81421 	 str r2,[r3,#276]
 4767 0030 00E0     	 b .L257
 4768              	.L261:
1548:.././hal/sam3u1c/udphs_device.c **** 
 4769              	 .loc 6 1548 3
 4770 0032 00BF     	 nop
 4771              	.L257:
1558:.././hal/sam3u1c/udphs_device.c **** 	}
1559:.././hal/sam3u1c/udphs_device.c **** }
 4772              	 .loc 6 1559 1
 4773 0034 80BD     	 pop {r7,pc}
 4774              	.L263:
 4775 0036 00BF     	 .align 2
 4776              	.L262:
 4777 0038 00400A40 	 .word 1074413568
 4778 003c 00000000 	 .word udd_ep_control_state
 4779 0040 00000000 	 .word udd_ctrl_send_zlp_in
 4780              	 .cfi_endproc
 4781              	.LFE169:
 4783              	 .section .text.udd_ctrl_overflow,"ax",%progbits
 4784              	 .align 1
 4785              	 .syntax unified
 4786              	 .thumb
 4787              	 .thumb_func
 4788              	 .fpu softvfp
 4790              	udd_ctrl_overflow:
 4791              	.LFB170:
1560:.././hal/sam3u1c/udphs_device.c **** 
1561:.././hal/sam3u1c/udphs_device.c **** 
1562:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_overflow(void)
1563:.././hal/sam3u1c/udphs_device.c **** {
 4792              	 .loc 6 1563 1
 4793              	 .cfi_startproc
 4794              	 
 4795              	 
 4796              	 
 4797 0000 80B4     	 push {r7}
 4798              	.LCFI184:
 4799              	 .cfi_def_cfa_offset 4
 4800              	 .cfi_offset 7,-4
 4801 0002 00AF     	 add r7,sp,#0
 4802              	.LCFI185:
 4803              	 .cfi_def_cfa_register 7
1564:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_in_send(0))
 4804              	 .loc 6 1564 6
 4805 0004 094B     	 ldr r3,.L268
 4806 0006 D3F81C31 	 ldr r3,[r3,#284]
 4807 000a 03F48063 	 and r3,r3,#1024
 4808              	 .loc 6 1564 5
 4809 000e 002B     	 cmp r3,#0
 4810 0010 08D1     	 bne .L267
1565:.././hal/sam3u1c/udphs_device.c **** 		return; // overflow ignored if IN data is received
1566:.././hal/sam3u1c/udphs_device.c **** 
1567:.././hal/sam3u1c/udphs_device.c **** 	// The case of UDD_EPCTRL_DATA_IN is not managed
1568:.././hal/sam3u1c/udphs_device.c **** 	// because the OUT endpoint is already free and OUT ZLP accepted
1569:.././hal/sam3u1c/udphs_device.c **** 
1570:.././hal/sam3u1c/udphs_device.c **** 	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
 4811              	 .loc 6 1570 39
 4812 0012 074B     	 ldr r3,.L268+4
 4813 0014 1B78     	 ldrb r3,[r3]
 4814              	 .loc 6 1570 5
 4815 0016 032B     	 cmp r3,#3
 4816 0018 05D1     	 bne .L264
1571:.././hal/sam3u1c/udphs_device.c **** 		// A IN handshake is waiting by device,
1572:.././hal/sam3u1c/udphs_device.c **** 		// but host want extra OUT data then stall extra OUT data
1573:.././hal/sam3u1c/udphs_device.c **** 		udd_enable_stall_handshake(0);
 4817              	 .loc 6 1573 3
 4818 001a 044B     	 ldr r3,.L268
 4819 001c 2022     	 movs r2,#32
 4820 001e C3F81421 	 str r2,[r3,#276]
 4821 0022 00E0     	 b .L264
 4822              	.L267:
1565:.././hal/sam3u1c/udphs_device.c **** 		return; // overflow ignored if IN data is received
 4823              	 .loc 6 1565 3
 4824 0024 00BF     	 nop
 4825              	.L264:
1574:.././hal/sam3u1c/udphs_device.c **** 	}
1575:.././hal/sam3u1c/udphs_device.c **** }
 4826              	 .loc 6 1575 1
 4827 0026 BD46     	 mov sp,r7
 4828              	.LCFI186:
 4829              	 .cfi_def_cfa_register 13
 4830              	 
 4831 0028 80BC     	 pop {r7}
 4832              	.LCFI187:
 4833              	 .cfi_restore 7
 4834              	 .cfi_def_cfa_offset 0
 4835 002a 7047     	 bx lr
 4836              	.L269:
 4837              	 .align 2
 4838              	.L268:
 4839 002c 00400A40 	 .word 1074413568
 4840 0030 00000000 	 .word udd_ep_control_state
 4841              	 .cfi_endproc
 4842              	.LFE170:
 4844              	 .section .text.udd_ctrl_stall_data,"ax",%progbits
 4845              	 .align 1
 4846              	 .syntax unified
 4847              	 .thumb
 4848              	 .thumb_func
 4849              	 .fpu softvfp
 4851              	udd_ctrl_stall_data:
 4852              	.LFB171:
1576:.././hal/sam3u1c/udphs_device.c **** 
1577:.././hal/sam3u1c/udphs_device.c **** 
1578:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_stall_data(void)
1579:.././hal/sam3u1c/udphs_device.c **** {
 4853              	 .loc 6 1579 1
 4854              	 .cfi_startproc
 4855              	 
 4856              	 
 4857              	 
 4858 0000 80B4     	 push {r7}
 4859              	.LCFI188:
 4860              	 .cfi_def_cfa_offset 4
 4861              	 .cfi_offset 7,-4
 4862 0002 00AF     	 add r7,sp,#0
 4863              	.LCFI189:
 4864              	 .cfi_def_cfa_register 7
1580:.././hal/sam3u1c/udphs_device.c **** 	// Stall all packets on IN & OUT control endpoint
1581:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
 4865              	 .loc 6 1581 23
 4866 0004 054B     	 ldr r3,.L271
 4867 0006 0522     	 movs r2,#5
 4868 0008 1A70     	 strb r2,[r3]
1582:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_stall_handshake(0);
 4869              	 .loc 6 1582 2
 4870 000a 054B     	 ldr r3,.L271+4
 4871 000c 2022     	 movs r2,#32
 4872 000e C3F81421 	 str r2,[r3,#276]
1583:.././hal/sam3u1c/udphs_device.c **** }
 4873              	 .loc 6 1583 1
 4874 0012 00BF     	 nop
 4875 0014 BD46     	 mov sp,r7
 4876              	.LCFI190:
 4877              	 .cfi_def_cfa_register 13
 4878              	 
 4879 0016 80BC     	 pop {r7}
 4880              	.LCFI191:
 4881              	 .cfi_restore 7
 4882              	 .cfi_def_cfa_offset 0
 4883 0018 7047     	 bx lr
 4884              	.L272:
 4885 001a 00BF     	 .align 2
 4886              	.L271:
 4887 001c 00000000 	 .word udd_ep_control_state
 4888 0020 00400A40 	 .word 1074413568
 4889              	 .cfi_endproc
 4890              	.LFE171:
 4892              	 .section .text.udd_ctrl_send_zlp_in,"ax",%progbits
 4893              	 .align 1
 4894              	 .syntax unified
 4895              	 .thumb
 4896              	 .thumb_func
 4897              	 .fpu softvfp
 4899              	udd_ctrl_send_zlp_in:
 4900              	.LFB172:
1584:.././hal/sam3u1c/udphs_device.c **** 
1585:.././hal/sam3u1c/udphs_device.c **** 
1586:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_send_zlp_in(void)
1587:.././hal/sam3u1c/udphs_device.c **** {
 4901              	 .loc 6 1587 1
 4902              	 .cfi_startproc
 4903              	 
 4904              	 
 4905 0000 80B5     	 push {r7,lr}
 4906              	.LCFI192:
 4907              	 .cfi_def_cfa_offset 8
 4908              	 .cfi_offset 7,-8
 4909              	 .cfi_offset 14,-4
 4910 0002 82B0     	 sub sp,sp,#8
 4911              	.LCFI193:
 4912              	 .cfi_def_cfa_offset 16
 4913 0004 00AF     	 add r7,sp,#0
 4914              	.LCFI194:
 4915              	 .cfi_def_cfa_register 7
1588:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1589:.././hal/sam3u1c/udphs_device.c **** 
1590:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
 4916              	 .loc 6 1590 23
 4917 0006 134B     	 ldr r3,.L274
 4918 0008 0322     	 movs r2,#3
 4919 000a 1A70     	 strb r2,[r3]
1591:.././hal/sam3u1c/udphs_device.c **** 
1592:.././hal/sam3u1c/udphs_device.c **** 	// Validate and send empty IN packet on control endpoint
1593:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4920              	 .loc 6 1593 10
 4921 000c 124B     	 ldr r3,.L274+4
 4922 000e 9847     	 blx r3
 4923              	.LVL93:
 4924 0010 7860     	 str r0,[r7,#4]
1594:.././hal/sam3u1c/udphs_device.c **** 	// Send ZLP on IN endpoint
1595:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_in_send(0);
 4925              	 .loc 6 1595 2
 4926 0012 124B     	 ldr r3,.L274+8
 4927 0014 4FF48062 	 mov r2,#1024
 4928 0018 C3F81821 	 str r2,[r3,#280]
1596:.././hal/sam3u1c/udphs_device.c **** 	udd_raise_tx_pkt_ready(0);
 4929              	 .loc 6 1596 2
 4930 001c 0F4B     	 ldr r3,.L274+8
 4931 001e 4FF40062 	 mov r2,#2048
 4932 0022 C3F81421 	 str r2,[r3,#276]
1597:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_in_send_interrupt(0);
 4933              	 .loc 6 1597 2
 4934 0026 0D4B     	 ldr r3,.L274+8
 4935 0028 4FF48062 	 mov r2,#1024
 4936 002c C3F80421 	 str r2,[r3,#260]
1598:.././hal/sam3u1c/udphs_device.c **** 	// To detect a protocol error, enable nak interrupt on data OUT phase
1599:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_nak_out(0);
 4937              	 .loc 6 1599 2
 4938 0030 0A4B     	 ldr r3,.L274+8
 4939 0032 4FF40042 	 mov r2,#32768
 4940 0036 C3F81821 	 str r2,[r3,#280]
1600:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_nak_out_interrupt(0);
 4941              	 .loc 6 1600 2
 4942 003a 084B     	 ldr r3,.L274+8
 4943 003c 4FF40042 	 mov r2,#32768
 4944 0040 C3F80421 	 str r2,[r3,#260]
1601:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 4945              	 .loc 6 1601 2
 4946 0044 7868     	 ldr r0,[r7,#4]
 4947 0046 064B     	 ldr r3,.L274+12
 4948 0048 9847     	 blx r3
 4949              	.LVL94:
1602:.././hal/sam3u1c/udphs_device.c **** }
 4950              	 .loc 6 1602 1
 4951 004a 00BF     	 nop
 4952 004c 0837     	 adds r7,r7,#8
 4953              	.LCFI195:
 4954              	 .cfi_def_cfa_offset 8
 4955 004e BD46     	 mov sp,r7
 4956              	.LCFI196:
 4957              	 .cfi_def_cfa_register 13
 4958              	 
 4959 0050 80BD     	 pop {r7,pc}
 4960              	.L275:
 4961 0052 00BF     	 .align 2
 4962              	.L274:
 4963 0054 00000000 	 .word udd_ep_control_state
 4964 0058 00000000 	 .word cpu_irq_save
 4965 005c 00400A40 	 .word 1074413568
 4966 0060 00000000 	 .word cpu_irq_restore
 4967              	 .cfi_endproc
 4968              	.LFE172:
 4970              	 .section .text.udd_ctrl_send_zlp_out,"ax",%progbits
 4971              	 .align 1
 4972              	 .syntax unified
 4973              	 .thumb
 4974              	 .thumb_func
 4975              	 .fpu softvfp
 4977              	udd_ctrl_send_zlp_out:
 4978              	.LFB173:
1603:.././hal/sam3u1c/udphs_device.c **** 
1604:.././hal/sam3u1c/udphs_device.c **** 
1605:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_send_zlp_out(void)
1606:.././hal/sam3u1c/udphs_device.c **** {
 4979              	 .loc 6 1606 1
 4980              	 .cfi_startproc
 4981              	 
 4982              	 
 4983 0000 80B5     	 push {r7,lr}
 4984              	.LCFI197:
 4985              	 .cfi_def_cfa_offset 8
 4986              	 .cfi_offset 7,-8
 4987              	 .cfi_offset 14,-4
 4988 0002 82B0     	 sub sp,sp,#8
 4989              	.LCFI198:
 4990              	 .cfi_def_cfa_offset 16
 4991 0004 00AF     	 add r7,sp,#0
 4992              	.LCFI199:
 4993              	 .cfi_def_cfa_register 7
1607:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1608:.././hal/sam3u1c/udphs_device.c **** 
1609:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
 4994              	 .loc 6 1609 23
 4995 0006 0B4B     	 ldr r3,.L277
 4996 0008 0422     	 movs r2,#4
 4997 000a 1A70     	 strb r2,[r3]
1610:.././hal/sam3u1c/udphs_device.c **** 	// No action is necessary to accept OUT ZLP
1611:.././hal/sam3u1c/udphs_device.c **** 	// because the buffer of control endpoint is already free
1612:.././hal/sam3u1c/udphs_device.c **** 
1613:.././hal/sam3u1c/udphs_device.c **** 	// To detect a protocol error, enable nak interrupt on data IN phase
1614:.././hal/sam3u1c/udphs_device.c **** 	flags = cpu_irq_save();
 4998              	 .loc 6 1614 10
 4999 000c 0A4B     	 ldr r3,.L277+4
 5000 000e 9847     	 blx r3
 5001              	.LVL95:
 5002 0010 7860     	 str r0,[r7,#4]
1615:.././hal/sam3u1c/udphs_device.c **** 	udd_ack_nak_in(0);
 5003              	 .loc 6 1615 2
 5004 0012 0A4B     	 ldr r3,.L277+8
 5005 0014 4FF48042 	 mov r2,#16384
 5006 0018 C3F81821 	 str r2,[r3,#280]
1616:.././hal/sam3u1c/udphs_device.c **** 	udd_enable_nak_in_interrupt(0);
 5007              	 .loc 6 1616 2
 5008 001c 074B     	 ldr r3,.L277+8
 5009 001e 4FF48042 	 mov r2,#16384
 5010 0022 C3F80421 	 str r2,[r3,#260]
1617:.././hal/sam3u1c/udphs_device.c **** 	cpu_irq_restore(flags);
 5011              	 .loc 6 1617 2
 5012 0026 7868     	 ldr r0,[r7,#4]
 5013 0028 054B     	 ldr r3,.L277+12
 5014 002a 9847     	 blx r3
 5015              	.LVL96:
1618:.././hal/sam3u1c/udphs_device.c **** }
 5016              	 .loc 6 1618 1
 5017 002c 00BF     	 nop
 5018 002e 0837     	 adds r7,r7,#8
 5019              	.LCFI200:
 5020              	 .cfi_def_cfa_offset 8
 5021 0030 BD46     	 mov sp,r7
 5022              	.LCFI201:
 5023              	 .cfi_def_cfa_register 13
 5024              	 
 5025 0032 80BD     	 pop {r7,pc}
 5026              	.L278:
 5027              	 .align 2
 5028              	.L277:
 5029 0034 00000000 	 .word udd_ep_control_state
 5030 0038 00000000 	 .word cpu_irq_save
 5031 003c 00400A40 	 .word 1074413568
 5032 0040 00000000 	 .word cpu_irq_restore
 5033              	 .cfi_endproc
 5034              	.LFE173:
 5036              	 .section .text.udd_ctrl_endofrequest,"ax",%progbits
 5037              	 .align 1
 5038              	 .syntax unified
 5039              	 .thumb
 5040              	 .thumb_func
 5041              	 .fpu softvfp
 5043              	udd_ctrl_endofrequest:
 5044              	.LFB174:
1619:.././hal/sam3u1c/udphs_device.c **** 
1620:.././hal/sam3u1c/udphs_device.c **** 
1621:.././hal/sam3u1c/udphs_device.c **** static void udd_ctrl_endofrequest(void)
1622:.././hal/sam3u1c/udphs_device.c **** {
 5045              	 .loc 6 1622 1
 5046              	 .cfi_startproc
 5047              	 
 5048              	 
 5049 0000 80B5     	 push {r7,lr}
 5050              	.LCFI202:
 5051              	 .cfi_def_cfa_offset 8
 5052              	 .cfi_offset 7,-8
 5053              	 .cfi_offset 14,-4
 5054 0002 00AF     	 add r7,sp,#0
 5055              	.LCFI203:
 5056              	 .cfi_def_cfa_register 7
1623:.././hal/sam3u1c/udphs_device.c **** 	// If a callback is registered then call it
1624:.././hal/sam3u1c/udphs_device.c **** 	if (udd_g_ctrlreq.callback) {
 5057              	 .loc 6 1624 19
 5058 0004 044B     	 ldr r3,.L282
 5059 0006 1B69     	 ldr r3,[r3,#16]
 5060              	 .loc 6 1624 5
 5061 0008 002B     	 cmp r3,#0
 5062 000a 02D0     	 beq .L281
1625:.././hal/sam3u1c/udphs_device.c **** 		udd_g_ctrlreq.callback();
 5063              	 .loc 6 1625 16
 5064 000c 024B     	 ldr r3,.L282
 5065 000e 1B69     	 ldr r3,[r3,#16]
 5066              	 .loc 6 1625 3
 5067 0010 9847     	 blx r3
 5068              	.LVL97:
 5069              	.L281:
1626:.././hal/sam3u1c/udphs_device.c **** 	}
1627:.././hal/sam3u1c/udphs_device.c **** }
 5070              	 .loc 6 1627 1
 5071 0012 00BF     	 nop
 5072 0014 80BD     	 pop {r7,pc}
 5073              	.L283:
 5074 0016 00BF     	 .align 2
 5075              	.L282:
 5076 0018 00000000 	 .word udd_g_ctrlreq
 5077              	 .cfi_endproc
 5078              	.LFE174:
 5080              	 .section .text.udd_ctrl_interrupt,"ax",%progbits
 5081              	 .align 1
 5082              	 .syntax unified
 5083              	 .thumb
 5084              	 .thumb_func
 5085              	 .fpu softvfp
 5087              	udd_ctrl_interrupt:
 5088              	.LFB175:
1628:.././hal/sam3u1c/udphs_device.c **** 
1629:.././hal/sam3u1c/udphs_device.c **** 
1630:.././hal/sam3u1c/udphs_device.c **** static bool udd_ctrl_interrupt(void)
1631:.././hal/sam3u1c/udphs_device.c **** {
 5089              	 .loc 6 1631 1
 5090              	 .cfi_startproc
 5091              	 
 5092              	 
 5093 0000 80B5     	 push {r7,lr}
 5094              	.LCFI204:
 5095              	 .cfi_def_cfa_offset 8
 5096              	 .cfi_offset 7,-8
 5097              	 .cfi_offset 14,-4
 5098 0002 82B0     	 sub sp,sp,#8
 5099              	.LCFI205:
 5100              	 .cfi_def_cfa_offset 16
 5101 0004 00AF     	 add r7,sp,#0
 5102              	.LCFI206:
 5103              	 .cfi_def_cfa_register 7
1632:.././hal/sam3u1c/udphs_device.c **** 	uint32_t status = udd_get_endpoint_status(0);
 5104              	 .loc 6 1632 20
 5105 0006 314B     	 ldr r3,.L293
 5106              	 .loc 6 1632 11
 5107 0008 D3F81C31 	 ldr r3,[r3,#284]
 5108 000c 7B60     	 str r3,[r7,#4]
1633:.././hal/sam3u1c/udphs_device.c **** 
1634:.././hal/sam3u1c/udphs_device.c **** 	if (!Is_udd_endpoint_interrupt(0)) {
 5109              	 .loc 6 1634 7
 5110 000e 2F4B     	 ldr r3,.L293
 5111 0010 5B69     	 ldr r3,[r3,#20]
 5112 0012 03F48073 	 and r3,r3,#256
 5113              	 .loc 6 1634 5
 5114 0016 002B     	 cmp r3,#0
 5115 0018 01D1     	 bne .L285
1635:.././hal/sam3u1c/udphs_device.c **** 		return false; // No interrupt events on control endpoint
 5116              	 .loc 6 1635 10
 5117 001a 0023     	 movs r3,#0
 5118 001c 52E0     	 b .L286
 5119              	.L285:
1636:.././hal/sam3u1c/udphs_device.c **** 	}
1637:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("0: ");
1638:.././hal/sam3u1c/udphs_device.c **** 
1639:.././hal/sam3u1c/udphs_device.c **** 	// By default disable overflow and underflow interrupt
1640:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_nak_in_interrupt(0);
 5120              	 .loc 6 1640 2
 5121 001e 2B4B     	 ldr r3,.L293
 5122 0020 4FF48042 	 mov r2,#16384
 5123 0024 C3F80821 	 str r2,[r3,#264]
1641:.././hal/sam3u1c/udphs_device.c **** 	udd_disable_nak_out_interrupt(0);
 5124              	 .loc 6 1641 2
 5125 0028 284B     	 ldr r3,.L293
 5126 002a 4FF40042 	 mov r2,#32768
 5127 002e C3F80821 	 str r2,[r3,#264]
1642:.././hal/sam3u1c/udphs_device.c **** 
1643:.././hal/sam3u1c/udphs_device.c **** 	// Search event on control endpoint
1644:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_setup_received(status)) {
 5128              	 .loc 6 1644 6
 5129 0032 7B68     	 ldr r3,[r7,#4]
 5130 0034 03F48053 	 and r3,r3,#4096
 5131              	 .loc 6 1644 5
 5132 0038 002B     	 cmp r3,#0
 5133 003a 03D0     	 beq .L287
1645:.././hal/sam3u1c/udphs_device.c **** 		// SETUP packet received
1646:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Stp ");
1647:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_setup_received();
 5134              	 .loc 6 1647 3
 5135 003c 244B     	 ldr r3,.L293+4
 5136 003e 9847     	 blx r3
 5137              	.LVL98:
1648:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5138              	 .loc 6 1648 10
 5139 0040 0123     	 movs r3,#1
 5140 0042 3FE0     	 b .L286
 5141              	.L287:
1649:.././hal/sam3u1c/udphs_device.c **** 	}
1650:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_in_sent(status)
 5142              	 .loc 6 1650 6
 5143 0044 7B68     	 ldr r3,[r7,#4]
 5144 0046 03F48063 	 and r3,r3,#1024
 5145              	 .loc 6 1650 5
 5146 004a 002B     	 cmp r3,#0
 5147 004c 0AD0     	 beq .L288
1651:.././hal/sam3u1c/udphs_device.c **** 			&& Is_udd_in_send_interrupt_enabled(0)) {
 5148              	 .loc 6 1651 7
 5149 004e 1F4B     	 ldr r3,.L293
 5150 0050 D3F80C31 	 ldr r3,[r3,#268]
 5151 0054 03F48063 	 and r3,r3,#1024
 5152              	 .loc 6 1651 4
 5153 0058 002B     	 cmp r3,#0
 5154 005a 03D0     	 beq .L288
1652:.././hal/sam3u1c/udphs_device.c **** 		// IN packet sent
1653:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("In ");
1654:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_in_sent();
 5155              	 .loc 6 1654 3
 5156 005c 1D4B     	 ldr r3,.L293+8
 5157 005e 9847     	 blx r3
 5158              	.LVL99:
1655:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5159              	 .loc 6 1655 10
 5160 0060 0123     	 movs r3,#1
 5161 0062 2FE0     	 b .L286
 5162              	.L288:
1656:.././hal/sam3u1c/udphs_device.c **** 	}
1657:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_out_received(status)) {
 5163              	 .loc 6 1657 6
 5164 0064 7B68     	 ldr r3,[r7,#4]
 5165 0066 03F40073 	 and r3,r3,#512
 5166              	 .loc 6 1657 5
 5167 006a 002B     	 cmp r3,#0
 5168 006c 03D0     	 beq .L289
1658:.././hal/sam3u1c/udphs_device.c **** 		// OUT packet received
1659:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Out ");
1660:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_out_received();
 5169              	 .loc 6 1660 3
 5170 006e 1A4B     	 ldr r3,.L293+12
 5171 0070 9847     	 blx r3
 5172              	.LVL100:
1661:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5173              	 .loc 6 1661 10
 5174 0072 0123     	 movs r3,#1
 5175 0074 26E0     	 b .L286
 5176              	.L289:
1662:.././hal/sam3u1c/udphs_device.c **** 	}
1663:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_stall(status)) {
 5177              	 .loc 6 1663 6
 5178 0076 7B68     	 ldr r3,[r7,#4]
 5179 0078 03F40053 	 and r3,r3,#8192
 5180              	 .loc 6 1663 5
 5181 007c 002B     	 cmp r3,#0
 5182 007e 04D0     	 beq .L290
1664:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("Stall\n\r");
1665:.././hal/sam3u1c/udphs_device.c **** 		// STALLed
1666:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_stall(0);
 5183              	 .loc 6 1666 3
 5184 0080 124B     	 ldr r3,.L293
 5185 0082 4FF40052 	 mov r2,#8192
 5186 0086 C3F81821 	 str r2,[r3,#280]
 5187              	.L290:
1667:.././hal/sam3u1c/udphs_device.c **** 	}
1668:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_nak_out(status)) {
 5188              	 .loc 6 1668 6
 5189 008a 7B68     	 ldr r3,[r7,#4]
 5190 008c 03F40043 	 and r3,r3,#32768
 5191              	 .loc 6 1668 5
 5192 0090 002B     	 cmp r3,#0
 5193 0092 08D0     	 beq .L291
1669:.././hal/sam3u1c/udphs_device.c **** 		// Overflow on OUT packet
1670:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("NakO ");
1671:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_nak_out(0);
 5194              	 .loc 6 1671 3
 5195 0094 0D4B     	 ldr r3,.L293
 5196 0096 4FF40042 	 mov r2,#32768
 5197 009a C3F81821 	 str r2,[r3,#280]
1672:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_overflow();
 5198              	 .loc 6 1672 3
 5199 009e 0F4B     	 ldr r3,.L293+16
 5200 00a0 9847     	 blx r3
 5201              	.LVL101:
1673:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5202              	 .loc 6 1673 10
 5203 00a2 0123     	 movs r3,#1
 5204 00a4 0EE0     	 b .L286
 5205              	.L291:
1674:.././hal/sam3u1c/udphs_device.c **** 	}
1675:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_status_nak_in(status)) {
 5206              	 .loc 6 1675 6
 5207 00a6 7B68     	 ldr r3,[r7,#4]
 5208 00a8 03F48043 	 and r3,r3,#16384
 5209              	 .loc 6 1675 5
 5210 00ac 002B     	 cmp r3,#0
 5211 00ae 08D0     	 beq .L292
1676:.././hal/sam3u1c/udphs_device.c **** 		// Underflow on IN packet
1677:.././hal/sam3u1c/udphs_device.c **** 		dbg_print("NakI ");
1678:.././hal/sam3u1c/udphs_device.c **** 		udd_ack_nak_in(0);
 5212              	 .loc 6 1678 3
 5213 00b0 064B     	 ldr r3,.L293
 5214 00b2 4FF48042 	 mov r2,#16384
 5215 00b6 C3F81821 	 str r2,[r3,#280]
1679:.././hal/sam3u1c/udphs_device.c **** 		udd_ctrl_underflow();
 5216              	 .loc 6 1679 3
 5217 00ba 094B     	 ldr r3,.L293+20
 5218 00bc 9847     	 blx r3
 5219              	.LVL102:
1680:.././hal/sam3u1c/udphs_device.c **** 		return true;
 5220              	 .loc 6 1680 10
 5221 00be 0123     	 movs r3,#1
 5222 00c0 00E0     	 b .L286
 5223              	.L292:
1681:.././hal/sam3u1c/udphs_device.c **** 	}
1682:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("UnH ");
1683:.././hal/sam3u1c/udphs_device.c **** 	return false;
 5224              	 .loc 6 1683 9
 5225 00c2 0023     	 movs r3,#0
 5226              	.L286:
1684:.././hal/sam3u1c/udphs_device.c **** }
 5227              	 .loc 6 1684 1
 5228 00c4 1846     	 mov r0,r3
 5229 00c6 0837     	 adds r7,r7,#8
 5230              	.LCFI207:
 5231              	 .cfi_def_cfa_offset 8
 5232 00c8 BD46     	 mov sp,r7
 5233              	.LCFI208:
 5234              	 .cfi_def_cfa_register 13
 5235              	 
 5236 00ca 80BD     	 pop {r7,pc}
 5237              	.L294:
 5238              	 .align 2
 5239              	.L293:
 5240 00cc 00400A40 	 .word 1074413568
 5241 00d0 00000000 	 .word udd_ctrl_setup_received
 5242 00d4 00000000 	 .word udd_ctrl_in_sent
 5243 00d8 00000000 	 .word udd_ctrl_out_received
 5244 00dc 00000000 	 .word udd_ctrl_overflow
 5245 00e0 00000000 	 .word udd_ctrl_underflow
 5246              	 .cfi_endproc
 5247              	.LFE175:
 5249              	 .section .text.udd_ep_job_table_reset,"ax",%progbits
 5250              	 .align 1
 5251              	 .syntax unified
 5252              	 .thumb
 5253              	 .thumb_func
 5254              	 .fpu softvfp
 5256              	udd_ep_job_table_reset:
 5257              	.LFB176:
1685:.././hal/sam3u1c/udphs_device.c **** 
1686:.././hal/sam3u1c/udphs_device.c **** 
1687:.././hal/sam3u1c/udphs_device.c **** //--------------------------------------------------------
1688:.././hal/sam3u1c/udphs_device.c **** //--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS
1689:.././hal/sam3u1c/udphs_device.c **** 
1690:.././hal/sam3u1c/udphs_device.c **** #if (0!=USB_DEVICE_MAX_EP)
1691:.././hal/sam3u1c/udphs_device.c **** 
1692:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_job_table_reset(void)
1693:.././hal/sam3u1c/udphs_device.c **** {
 5258              	 .loc 6 1693 1
 5259              	 .cfi_startproc
 5260              	 
 5261              	 
 5262              	 
 5263 0000 80B4     	 push {r7}
 5264              	.LCFI209:
 5265              	 .cfi_def_cfa_offset 4
 5266              	 .cfi_offset 7,-4
 5267 0002 83B0     	 sub sp,sp,#12
 5268              	.LCFI210:
 5269              	 .cfi_def_cfa_offset 16
 5270 0004 00AF     	 add r7,sp,#0
 5271              	.LCFI211:
 5272              	 .cfi_def_cfa_register 7
1694:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1695:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
 5273              	 .loc 6 1695 9
 5274 0006 0023     	 movs r3,#0
 5275 0008 FB71     	 strb r3,[r7,#7]
 5276              	 .loc 6 1695 2
 5277 000a 1CE0     	 b .L296
 5278              	.L297:
1696:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job[i].busy = false;
 5279              	 .loc 6 1696 16 discriminator 3
 5280 000c FA79     	 ldrb r2,[r7,#7]
 5281              	 .loc 6 1696 22 discriminator 3
 5282 000e 1249     	 ldr r1,.L298
 5283 0010 1346     	 mov r3,r2
 5284 0012 5B00     	 lsls r3,r3,#1
 5285 0014 1344     	 add r3,r3,r2
 5286 0016 DB00     	 lsls r3,r3,#3
 5287 0018 0B44     	 add r3,r3,r1
 5288 001a 03F11002 	 add r2,r3,#16
 5289 001e 1379     	 ldrb r3,[r2,#4]
 5290 0020 6FF30003 	 bfc r3,#0,#1
 5291 0024 1371     	 strb r3,[r2,#4]
1697:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job[i].stall_requested = false;
 5292              	 .loc 6 1697 16 discriminator 3
 5293 0026 FA79     	 ldrb r2,[r7,#7]
 5294              	 .loc 6 1697 33 discriminator 3
 5295 0028 0B49     	 ldr r1,.L298
 5296 002a 1346     	 mov r3,r2
 5297 002c 5B00     	 lsls r3,r3,#1
 5298 002e 1344     	 add r3,r3,r2
 5299 0030 DB00     	 lsls r3,r3,#3
 5300 0032 0B44     	 add r3,r3,r1
 5301 0034 03F11002 	 add r2,r3,#16
 5302 0038 1379     	 ldrb r3,[r2,#4]
 5303 003a 6FF38203 	 bfc r3,#2,#1
 5304 003e 1371     	 strb r3,[r2,#4]
1695:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job[i].busy = false;
 5305              	 .loc 6 1695 38 discriminator 3
 5306 0040 FB79     	 ldrb r3,[r7,#7]
 5307 0042 0133     	 adds r3,r3,#1
 5308 0044 FB71     	 strb r3,[r7,#7]
 5309              	.L296:
1695:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_job[i].busy = false;
 5310              	 .loc 6 1695 2 discriminator 1
 5311 0046 FB79     	 ldrb r3,[r7,#7]
 5312 0048 012B     	 cmp r3,#1
 5313 004a DFD9     	 bls .L297
1698:.././hal/sam3u1c/udphs_device.c **** 	}
1699:.././hal/sam3u1c/udphs_device.c **** }
 5314              	 .loc 6 1699 1
 5315 004c 00BF     	 nop
 5316 004e 00BF     	 nop
 5317 0050 0C37     	 adds r7,r7,#12
 5318              	.LCFI212:
 5319              	 .cfi_def_cfa_offset 4
 5320 0052 BD46     	 mov sp,r7
 5321              	.LCFI213:
 5322              	 .cfi_def_cfa_register 13
 5323              	 
 5324 0054 80BC     	 pop {r7}
 5325              	.LCFI214:
 5326              	 .cfi_restore 7
 5327              	 .cfi_def_cfa_offset 0
 5328 0056 7047     	 bx lr
 5329              	.L299:
 5330              	 .align 2
 5331              	.L298:
 5332 0058 00000000 	 .word udd_ep_job
 5333              	 .cfi_endproc
 5334              	.LFE176:
 5336              	 .section .text.udd_ep_job_table_kill,"ax",%progbits
 5337              	 .align 1
 5338              	 .syntax unified
 5339              	 .thumb
 5340              	 .thumb_func
 5341              	 .fpu softvfp
 5343              	udd_ep_job_table_kill:
 5344              	.LFB177:
1700:.././hal/sam3u1c/udphs_device.c **** 
1701:.././hal/sam3u1c/udphs_device.c **** 
1702:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_job_table_kill(void)
1703:.././hal/sam3u1c/udphs_device.c **** {
 5345              	 .loc 6 1703 1
 5346              	 .cfi_startproc
 5347              	 
 5348              	 
 5349 0000 80B5     	 push {r7,lr}
 5350              	.LCFI215:
 5351              	 .cfi_def_cfa_offset 8
 5352              	 .cfi_offset 7,-8
 5353              	 .cfi_offset 14,-4
 5354 0002 82B0     	 sub sp,sp,#8
 5355              	.LCFI216:
 5356              	 .cfi_def_cfa_offset 16
 5357 0004 00AF     	 add r7,sp,#0
 5358              	.LCFI217:
 5359              	 .cfi_def_cfa_register 7
1704:.././hal/sam3u1c/udphs_device.c **** 	uint8_t i;
1705:.././hal/sam3u1c/udphs_device.c **** 
1706:.././hal/sam3u1c/udphs_device.c **** 	// For each endpoint, kill job
1707:.././hal/sam3u1c/udphs_device.c **** 	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
 5360              	 .loc 6 1707 9
 5361 0006 0023     	 movs r3,#0
 5362 0008 FB71     	 strb r3,[r7,#7]
 5363              	 .loc 6 1707 2
 5364 000a 10E0     	 b .L301
 5365              	.L302:
1708:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
 5366              	 .loc 6 1708 32 discriminator 3
 5367 000c FA79     	 ldrb r2,[r7,#7]
 5368              	 .loc 6 1708 3 discriminator 3
 5369 000e 1346     	 mov r3,r2
 5370 0010 5B00     	 lsls r3,r3,#1
 5371 0012 1344     	 add r3,r3,r2
 5372 0014 DB00     	 lsls r3,r3,#3
 5373 0016 0A4A     	 ldr r2,.L303
 5374 0018 9818     	 adds r0,r3,r2
 5375 001a FB79     	 ldrb r3,[r7,#7]
 5376 001c 0133     	 adds r3,r3,#1
 5377 001e DBB2     	 uxtb r3,r3
 5378 0020 1A46     	 mov r2,r3
 5379 0022 0121     	 movs r1,#1
 5380 0024 074B     	 ldr r3,.L303+4
 5381 0026 9847     	 blx r3
 5382              	.LVL103:
1707:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
 5383              	 .loc 6 1707 38 discriminator 3
 5384 0028 FB79     	 ldrb r3,[r7,#7]
 5385 002a 0133     	 adds r3,r3,#1
 5386 002c FB71     	 strb r3,[r7,#7]
 5387              	.L301:
1707:.././hal/sam3u1c/udphs_device.c **** 		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
 5388              	 .loc 6 1707 2 discriminator 1
 5389 002e FB79     	 ldrb r3,[r7,#7]
 5390 0030 012B     	 cmp r3,#1
 5391 0032 EBD9     	 bls .L302
1709:.././hal/sam3u1c/udphs_device.c **** 	}
1710:.././hal/sam3u1c/udphs_device.c **** }
 5392              	 .loc 6 1710 1
 5393 0034 00BF     	 nop
 5394 0036 00BF     	 nop
 5395 0038 0837     	 adds r7,r7,#8
 5396              	.LCFI218:
 5397              	 .cfi_def_cfa_offset 8
 5398 003a BD46     	 mov sp,r7
 5399              	.LCFI219:
 5400              	 .cfi_def_cfa_register 13
 5401              	 
 5402 003c 80BD     	 pop {r7,pc}
 5403              	.L304:
 5404 003e 00BF     	 .align 2
 5405              	.L303:
 5406 0040 00000000 	 .word udd_ep_job
 5407 0044 00000000 	 .word udd_ep_finish_job
 5408              	 .cfi_endproc
 5409              	.LFE177:
 5411              	 .section .text.udd_ep_abort_job,"ax",%progbits
 5412              	 .align 1
 5413              	 .syntax unified
 5414              	 .thumb
 5415              	 .thumb_func
 5416              	 .fpu softvfp
 5418              	udd_ep_abort_job:
 5419              	.LFB178:
1711:.././hal/sam3u1c/udphs_device.c **** 
1712:.././hal/sam3u1c/udphs_device.c **** 
1713:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_abort_job(udd_ep_id_t ep)
1714:.././hal/sam3u1c/udphs_device.c **** {
 5420              	 .loc 6 1714 1
 5421              	 .cfi_startproc
 5422              	 
 5423              	 
 5424 0000 80B5     	 push {r7,lr}
 5425              	.LCFI220:
 5426              	 .cfi_def_cfa_offset 8
 5427              	 .cfi_offset 7,-8
 5428              	 .cfi_offset 14,-4
 5429 0002 82B0     	 sub sp,sp,#8
 5430              	.LCFI221:
 5431              	 .cfi_def_cfa_offset 16
 5432 0004 00AF     	 add r7,sp,#0
 5433              	.LCFI222:
 5434              	 .cfi_def_cfa_register 7
 5435 0006 0346     	 mov r3,r0
 5436 0008 FB71     	 strb r3,[r7,#7]
1715:.././hal/sam3u1c/udphs_device.c **** 	ep &= USB_EP_ADDR_MASK;
 5437              	 .loc 6 1715 5
 5438 000a FB79     	 ldrb r3,[r7,#7]
 5439 000c 03F00F03 	 and r3,r3,#15
 5440 0010 FB71     	 strb r3,[r7,#7]
1716:.././hal/sam3u1c/udphs_device.c **** 
1717:.././hal/sam3u1c/udphs_device.c **** 	// Abort job on endpoint
1718:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
 5441              	 .loc 6 1718 35
 5442 0012 FB79     	 ldrb r3,[r7,#7]
 5443 0014 5A1E     	 subs r2,r3,#1
 5444              	 .loc 6 1718 2
 5445 0016 1346     	 mov r3,r2
 5446 0018 5B00     	 lsls r3,r3,#1
 5447 001a 1344     	 add r3,r3,r2
 5448 001c DB00     	 lsls r3,r3,#3
 5449 001e 054A     	 ldr r2,.L306
 5450 0020 1344     	 add r3,r3,r2
 5451 0022 FA79     	 ldrb r2,[r7,#7]
 5452 0024 0121     	 movs r1,#1
 5453 0026 1846     	 mov r0,r3
 5454 0028 034B     	 ldr r3,.L306+4
 5455 002a 9847     	 blx r3
 5456              	.LVL104:
1719:.././hal/sam3u1c/udphs_device.c **** }
 5457              	 .loc 6 1719 1
 5458 002c 00BF     	 nop
 5459 002e 0837     	 adds r7,r7,#8
 5460              	.LCFI223:
 5461              	 .cfi_def_cfa_offset 8
 5462 0030 BD46     	 mov sp,r7
 5463              	.LCFI224:
 5464              	 .cfi_def_cfa_register 13
 5465              	 
 5466 0032 80BD     	 pop {r7,pc}
 5467              	.L307:
 5468              	 .align 2
 5469              	.L306:
 5470 0034 00000000 	 .word udd_ep_job
 5471 0038 00000000 	 .word udd_ep_finish_job
 5472              	 .cfi_endproc
 5473              	.LFE178:
 5475              	 .section .text.udd_ep_finish_job,"ax",%progbits
 5476              	 .align 1
 5477              	 .syntax unified
 5478              	 .thumb
 5479              	 .thumb_func
 5480              	 .fpu softvfp
 5482              	udd_ep_finish_job:
 5483              	.LFB179:
1720:.././hal/sam3u1c/udphs_device.c **** 
1721:.././hal/sam3u1c/udphs_device.c **** 
1722:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
1723:.././hal/sam3u1c/udphs_device.c **** {
 5484              	 .loc 6 1723 1
 5485              	 .cfi_startproc
 5486              	 
 5487              	 
 5488 0000 80B5     	 push {r7,lr}
 5489              	.LCFI225:
 5490              	 .cfi_def_cfa_offset 8
 5491              	 .cfi_offset 7,-8
 5492              	 .cfi_offset 14,-4
 5493 0002 82B0     	 sub sp,sp,#8
 5494              	.LCFI226:
 5495              	 .cfi_def_cfa_offset 16
 5496 0004 00AF     	 add r7,sp,#0
 5497              	.LCFI227:
 5498              	 .cfi_def_cfa_register 7
 5499 0006 7860     	 str r0,[r7,#4]
 5500 0008 0B46     	 mov r3,r1
 5501 000a FB70     	 strb r3,[r7,#3]
 5502 000c 1346     	 mov r3,r2
 5503 000e BB70     	 strb r3,[r7,#2]
1724:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->busy == false) {
 5504              	 .loc 6 1724 20
 5505 0010 7B68     	 ldr r3,[r7,#4]
 5506 0012 1B7D     	 ldrb r3,[r3,#20]
 5507 0014 03F00103 	 and r3,r3,#1
 5508 0018 DBB2     	 uxtb r3,r3
 5509              	 .loc 6 1724 5
 5510 001a 002B     	 cmp r3,#0
 5511 001c 1FD0     	 beq .L313
1725:.././hal/sam3u1c/udphs_device.c **** 		return; // No on-going job
1726:.././hal/sam3u1c/udphs_device.c **** 	}
1727:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->busy = false;
 5512              	 .loc 6 1727 16
 5513 001e 7A68     	 ldr r2,[r7,#4]
 5514 0020 137D     	 ldrb r3,[r2,#20]
 5515 0022 6FF30003 	 bfc r3,#0,#1
 5516 0026 1375     	 strb r3,[r2,#20]
1728:.././hal/sam3u1c/udphs_device.c **** 	dbg_print("JobE%d ", b_abort);
1729:.././hal/sam3u1c/udphs_device.c **** 	if (NULL == ptr_job->call_trans) {
 5517              	 .loc 6 1729 21
 5518 0028 7B68     	 ldr r3,[r7,#4]
 5519 002a 1B68     	 ldr r3,[r3]
 5520              	 .loc 6 1729 5
 5521 002c 002B     	 cmp r3,#0
 5522 002e 18D0     	 beq .L314
1730:.././hal/sam3u1c/udphs_device.c **** 		return; // No callback linked to job
1731:.././hal/sam3u1c/udphs_device.c **** 	}
1732:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_in(ep_num)) {
 5523              	 .loc 6 1732 6
 5524 0030 0E4A     	 ldr r2,.L315
 5525 0032 BB78     	 ldrb r3,[r7,#2]
 5526 0034 0833     	 adds r3,r3,#8
 5527 0036 5B01     	 lsls r3,r3,#5
 5528 0038 1344     	 add r3,r3,r2
 5529 003a 1B68     	 ldr r3,[r3]
 5530 003c 03F00803 	 and r3,r3,#8
 5531              	 .loc 6 1732 5
 5532 0040 002B     	 cmp r3,#0
 5533 0042 03D0     	 beq .L312
1733:.././hal/sam3u1c/udphs_device.c **** 		ep_num |= USB_EP_DIR_IN;
 5534              	 .loc 6 1733 10
 5535 0044 BB78     	 ldrb r3,[r7,#2]
 5536 0046 63F07F03 	 orn r3,r3,#127
 5537 004a BB70     	 strb r3,[r7,#2]
 5538              	.L312:
1734:.././hal/sam3u1c/udphs_device.c **** 	}
1735:.././hal/sam3u1c/udphs_device.c **** 	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
 5539              	 .loc 6 1735 9
 5540 004c 7B68     	 ldr r3,[r7,#4]
 5541 004e 1B68     	 ldr r3,[r3]
 5542              	 .loc 6 1735 2
 5543 0050 FA78     	 ldrb r2,[r7,#3]
 5544 0052 1046     	 mov r0,r2
 5545 0054 7A68     	 ldr r2,[r7,#4]
 5546 0056 9168     	 ldr r1,[r2,#8]
 5547 0058 BA78     	 ldrb r2,[r7,#2]
 5548 005a 9847     	 blx r3
 5549              	.LVL105:
 5550 005c 02E0     	 b .L308
 5551              	.L313:
1725:.././hal/sam3u1c/udphs_device.c **** 	}
 5552              	 .loc 6 1725 3
 5553 005e 00BF     	 nop
 5554 0060 00E0     	 b .L308
 5555              	.L314:
1730:.././hal/sam3u1c/udphs_device.c **** 	}
 5556              	 .loc 6 1730 3
 5557 0062 00BF     	 nop
 5558              	.L308:
1736:.././hal/sam3u1c/udphs_device.c **** 			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
1737:.././hal/sam3u1c/udphs_device.c **** }
 5559              	 .loc 6 1737 1
 5560 0064 0837     	 adds r7,r7,#8
 5561              	.LCFI228:
 5562              	 .cfi_def_cfa_offset 8
 5563 0066 BD46     	 mov sp,r7
 5564              	.LCFI229:
 5565              	 .cfi_def_cfa_register 13
 5566              	 
 5567 0068 80BD     	 pop {r7,pc}
 5568              	.L316:
 5569 006a 00BF     	 .align 2
 5570              	.L315:
 5571 006c 00400A40 	 .word 1074413568
 5572              	 .cfi_endproc
 5573              	.LFE179:
 5575              	 .section .text.udd_ep_trans_done,"ax",%progbits
 5576              	 .align 1
 5577              	 .syntax unified
 5578              	 .thumb
 5579              	 .thumb_func
 5580              	 .fpu softvfp
 5582              	udd_ep_trans_done:
 5583              	.LFB180:
1738:.././hal/sam3u1c/udphs_device.c **** 
1739:.././hal/sam3u1c/udphs_device.c **** static void udd_ep_trans_done(udd_ep_id_t ep)
1740:.././hal/sam3u1c/udphs_device.c **** {
 5584              	 .loc 6 1740 1
 5585              	 .cfi_startproc
 5586              	 
 5587              	 
 5588 0000 80B5     	 push {r7,lr}
 5589              	.LCFI230:
 5590              	 .cfi_def_cfa_offset 8
 5591              	 .cfi_offset 7,-8
 5592              	 .cfi_offset 14,-4
 5593 0002 86B0     	 sub sp,sp,#24
 5594              	.LCFI231:
 5595              	 .cfi_def_cfa_offset 32
 5596 0004 00AF     	 add r7,sp,#0
 5597              	.LCFI232:
 5598              	 .cfi_def_cfa_register 7
 5599 0006 0346     	 mov r3,r0
 5600 0008 FB71     	 strb r3,[r7,#7]
1741:.././hal/sam3u1c/udphs_device.c **** 	uint32_t udd_dma_ctrl = 0;
 5601              	 .loc 6 1741 11
 5602 000a 0023     	 movs r3,#0
 5603 000c 7B61     	 str r3,[r7,#20]
1742:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1743:.././hal/sam3u1c/udphs_device.c **** 	iram_size_t next_trans;
1744:.././hal/sam3u1c/udphs_device.c **** 	irqflags_t flags;
1745:.././hal/sam3u1c/udphs_device.c **** 
1746:.././hal/sam3u1c/udphs_device.c **** 	// Get job corresponding at endpoint
1747:.././hal/sam3u1c/udphs_device.c **** 	ptr_job = &udd_ep_job[ep - 1];
 5604              	 .loc 6 1747 27
 5605 000e FB79     	 ldrb r3,[r7,#7]
 5606 0010 5A1E     	 subs r2,r3,#1
 5607              	 .loc 6 1747 10
 5608 0012 1346     	 mov r3,r2
 5609 0014 5B00     	 lsls r3,r3,#1
 5610 0016 1344     	 add r3,r3,r2
 5611 0018 DB00     	 lsls r3,r3,#3
 5612 001a 6D4A     	 ldr r2,.L329
 5613 001c 1344     	 add r3,r3,r2
 5614 001e FB60     	 str r3,[r7,#12]
1748:.././hal/sam3u1c/udphs_device.c **** 
1749:.././hal/sam3u1c/udphs_device.c **** 	if (!ptr_job->busy) {
 5615              	 .loc 6 1749 6
 5616 0020 FB68     	 ldr r3,[r7,#12]
 5617 0022 1B7D     	 ldrb r3,[r3,#20]
 5618 0024 03F00103 	 and r3,r3,#1
 5619 0028 DBB2     	 uxtb r3,r3
 5620              	 .loc 6 1749 5
 5621 002a 002B     	 cmp r3,#0
 5622 002c 00F0CC80 	 beq .L328
1750:.././hal/sam3u1c/udphs_device.c **** 		return; // No job is running, then ignore it (system error)
1751:.././hal/sam3u1c/udphs_device.c **** 	}
1752:.././hal/sam3u1c/udphs_device.c **** 
1753:.././hal/sam3u1c/udphs_device.c **** 	if (ptr_job->buf_cnt != ptr_job->buf_size) {
 5623              	 .loc 6 1753 13
 5624 0030 FB68     	 ldr r3,[r7,#12]
 5625 0032 DA68     	 ldr r2,[r3,#12]
 5626              	 .loc 6 1753 33
 5627 0034 FB68     	 ldr r3,[r7,#12]
 5628 0036 9B68     	 ldr r3,[r3,#8]
 5629              	 .loc 6 1753 5
 5630 0038 9A42     	 cmp r2,r3
 5631 003a 00F09980 	 beq .L320
1754:.././hal/sam3u1c/udphs_device.c **** 		// Need to send or receive other data
1755:.././hal/sam3u1c/udphs_device.c **** 		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
 5632              	 .loc 6 1755 23
 5633 003e FB68     	 ldr r3,[r7,#12]
 5634 0040 9A68     	 ldr r2,[r3,#8]
 5635              	 .loc 6 1755 43
 5636 0042 FB68     	 ldr r3,[r7,#12]
 5637 0044 DB68     	 ldr r3,[r3,#12]
 5638              	 .loc 6 1755 14
 5639 0046 D31A     	 subs r3,r2,r3
 5640 0048 3B61     	 str r3,[r7,#16]
1756:.././hal/sam3u1c/udphs_device.c **** 
1757:.././hal/sam3u1c/udphs_device.c **** 		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
 5641              	 .loc 6 1757 6
 5642 004a 3B69     	 ldr r3,[r7,#16]
 5643 004c B3F5803F 	 cmp r3,#65536
 5644 0050 05D9     	 bls .L321
1758:.././hal/sam3u1c/udphs_device.c **** 			// The USB hardware support a maximum
1759:.././hal/sam3u1c/udphs_device.c **** 			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
1760:.././hal/sam3u1c/udphs_device.c **** 			next_trans = UDD_ENDPOINT_MAX_TRANS;
 5645              	 .loc 6 1760 15
 5646 0052 4FF48033 	 mov r3,#65536
 5647 0056 3B61     	 str r3,[r7,#16]
1761:.././hal/sam3u1c/udphs_device.c **** 
1762:.././hal/sam3u1c/udphs_device.c **** 			// Set 0 to transfer the maximum
1763:.././hal/sam3u1c/udphs_device.c **** 			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
 5648              	 .loc 6 1763 17
 5649 0058 0023     	 movs r3,#0
 5650 005a 7B61     	 str r3,[r7,#20]
 5651 005c 02E0     	 b .L322
 5652              	.L321:
1764:.././hal/sam3u1c/udphs_device.c **** 		} else {
1765:.././hal/sam3u1c/udphs_device.c **** 			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
 5653              	 .loc 6 1765 17
 5654 005e 3B69     	 ldr r3,[r7,#16]
 5655 0060 1B04     	 lsls r3,r3,#16
 5656 0062 7B61     	 str r3,[r7,#20]
 5657              	.L322:
1766:.././hal/sam3u1c/udphs_device.c **** 		}
1767:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_in(ep)) {
 5658              	 .loc 6 1767 7
 5659 0064 5B4A     	 ldr r2,.L329+4
 5660 0066 FB79     	 ldrb r3,[r7,#7]
 5661 0068 0833     	 adds r3,r3,#8
 5662 006a 5B01     	 lsls r3,r3,#5
 5663 006c 1344     	 add r3,r3,r2
 5664 006e 1B68     	 ldr r3,[r3]
 5665 0070 03F00803 	 and r3,r3,#8
 5666              	 .loc 6 1767 6
 5667 0074 002B     	 cmp r3,#0
 5668 0076 1DD0     	 beq .L323
1768:.././hal/sam3u1c/udphs_device.c **** 			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
 5669              	 .loc 6 1768 27
 5670 0078 564A     	 ldr r2,.L329+4
 5671 007a FB79     	 ldrb r3,[r7,#7]
 5672 007c 0833     	 adds r3,r3,#8
 5673 007e 5B01     	 lsls r3,r3,#5
 5674 0080 1344     	 add r3,r3,r2
 5675 0082 1B68     	 ldr r3,[r3]
 5676 0084 03F00703 	 and r3,r3,#7
 5677 0088 0822     	 movs r2,#8
 5678 008a 02FA03F3 	 lsl r3,r2,r3
 5679 008e 1A46     	 mov r2,r3
 5680              	 .loc 6 1768 25
 5681 0090 3B69     	 ldr r3,[r7,#16]
 5682 0092 B3FBF2F1 	 udiv r1,r3,r2
 5683 0096 02FB01F2 	 mul r2,r2,r1
 5684 009a 9B1A     	 subs r3,r3,r2
 5685              	 .loc 6 1768 7
 5686 009c 002B     	 cmp r3,#0
 5687 009e 27D0     	 beq .L324
1769:.././hal/sam3u1c/udphs_device.c **** 				// Enable short packet option
1770:.././hal/sam3u1c/udphs_device.c **** 				// else the DMA transfer is accepted
1771:.././hal/sam3u1c/udphs_device.c **** 				// and interrupt DMA valid but nothing is sent.
1772:.././hal/sam3u1c/udphs_device.c **** 				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
 5688              	 .loc 6 1772 18
 5689 00a0 7B69     	 ldr r3,[r7,#20]
 5690 00a2 43F00803 	 orr r3,r3,#8
 5691 00a6 7B61     	 str r3,[r7,#20]
1773:.././hal/sam3u1c/udphs_device.c **** 				// No need to request another ZLP
1774:.././hal/sam3u1c/udphs_device.c **** 				ptr_job->b_shortpacket = false;
 5692              	 .loc 6 1774 28
 5693 00a8 FA68     	 ldr r2,[r7,#12]
 5694 00aa 137D     	 ldrb r3,[r2,#20]
 5695 00ac 6FF34103 	 bfc r3,#1,#1
 5696 00b0 1375     	 strb r3,[r2,#20]
 5697 00b2 1DE0     	 b .L324
 5698              	.L323:
1775:.././hal/sam3u1c/udphs_device.c **** 			}
1776:.././hal/sam3u1c/udphs_device.c **** 		} else {
1777:.././hal/sam3u1c/udphs_device.c **** 			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
 5699              	 .loc 6 1777 36
 5700 00b4 474A     	 ldr r2,.L329+4
 5701 00b6 FB79     	 ldrb r3,[r7,#7]
 5702 00b8 0833     	 adds r3,r3,#8
 5703 00ba 5B01     	 lsls r3,r3,#5
 5704 00bc 1344     	 add r3,r3,r2
 5705 00be 1B68     	 ldr r3,[r3]
 5706 00c0 1B09     	 lsrs r3,r3,#4
 5707 00c2 03F00303 	 and r3,r3,#3
 5708              	 .loc 6 1777 7
 5709 00c6 012B     	 cmp r3,#1
 5710 00c8 0ED1     	 bne .L325
1778:.././hal/sam3u1c/udphs_device.c **** 					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
 5711              	 .loc 6 1778 38
 5712 00ca 424A     	 ldr r2,.L329+4
 5713 00cc FB79     	 ldrb r3,[r7,#7]
 5714 00ce 0833     	 adds r3,r3,#8
 5715 00d0 5B01     	 lsls r3,r3,#5
 5716 00d2 1344     	 add r3,r3,r2
 5717 00d4 1B68     	 ldr r3,[r3]
 5718 00d6 03F00703 	 and r3,r3,#7
 5719 00da 0822     	 movs r2,#8
 5720 00dc 02FA03F3 	 lsl r3,r2,r3
 5721              	 .loc 6 1778 24
 5722 00e0 1A46     	 mov r2,r3
 5723              	 .loc 6 1778 6
 5724 00e2 3B69     	 ldr r3,[r7,#16]
 5725 00e4 9342     	 cmp r3,r2
 5726 00e6 03D8     	 bhi .L324
 5727              	.L325:
1779:.././hal/sam3u1c/udphs_device.c **** 
1780:.././hal/sam3u1c/udphs_device.c **** 				// Enable short packet reception
1781:.././hal/sam3u1c/udphs_device.c **** 				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
 5728              	 .loc 6 1781 18
 5729 00e8 7B69     	 ldr r3,[r7,#20]
 5730 00ea 43F01403 	 orr r3,r3,#20
 5731 00ee 7B61     	 str r3,[r7,#20]
 5732              	.L324:
1782:.././hal/sam3u1c/udphs_device.c **** 						| UDPHS_DMACONTROL_END_TR_EN;
1783:.././hal/sam3u1c/udphs_device.c **** 			}
1784:.././hal/sam3u1c/udphs_device.c **** 		}
1785:.././hal/sam3u1c/udphs_device.c **** 
1786:.././hal/sam3u1c/udphs_device.c **** 		// Start USB DMA to fill or read fifo of the selected endpoint
1787:.././hal/sam3u1c/udphs_device.c **** 		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
 5733              	 .loc 6 1787 3
 5734 00f0 FB68     	 ldr r3,[r7,#12]
 5735 00f2 5A68     	 ldr r2,[r3,#4]
 5736 00f4 FB68     	 ldr r3,[r7,#12]
 5737 00f6 DB68     	 ldr r3,[r3,#12]
 5738 00f8 D118     	 adds r1,r2,r3
 5739 00fa FB79     	 ldrb r3,[r7,#7]
 5740 00fc 1A01     	 lsls r2,r3,#4
 5741 00fe 364B     	 ldr r3,.L329+8
 5742 0100 1344     	 add r3,r3,r2
 5743 0102 0A46     	 mov r2,r1
 5744 0104 5A60     	 str r2,[r3,#4]
1788:.././hal/sam3u1c/udphs_device.c **** 		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
 5745              	 .loc 6 1788 16
 5746 0106 7B69     	 ldr r3,[r7,#20]
 5747 0108 43F02103 	 orr r3,r3,#33
 5748 010c 7B61     	 str r3,[r7,#20]
1789:.././hal/sam3u1c/udphs_device.c **** 
1790:.././hal/sam3u1c/udphs_device.c **** 		// Disable IRQs to have a short sequence
1791:.././hal/sam3u1c/udphs_device.c **** 		// between read of EOT_STA and DMA enable
1792:.././hal/sam3u1c/udphs_device.c **** 		flags = cpu_irq_save();
 5749              	 .loc 6 1792 11
 5750 010e 334B     	 ldr r3,.L329+12
 5751 0110 9847     	 blx r3
 5752              	.LVL106:
 5753 0112 B860     	 str r0,[r7,#8]
1793:.././hal/sam3u1c/udphs_device.c **** 		if (!(udd_endpoint_dma_get_status(ep)
 5754              	 .loc 6 1793 9
 5755 0114 FB79     	 ldrb r3,[r7,#7]
 5756 0116 1A01     	 lsls r2,r3,#4
 5757 0118 2F4B     	 ldr r3,.L329+8
 5758 011a 1344     	 add r3,r3,r2
 5759 011c DB68     	 ldr r3,[r3,#12]
1794:.././hal/sam3u1c/udphs_device.c **** 				& UDPHS_DMASTATUS_END_TR_ST)) {
 5760              	 .loc 6 1794 5
 5761 011e 03F01003 	 and r3,r3,#16
1793:.././hal/sam3u1c/udphs_device.c **** 		if (!(udd_endpoint_dma_get_status(ep)
 5762              	 .loc 6 1793 6
 5763 0122 002B     	 cmp r3,#0
 5764 0124 1DD1     	 bne .L326
1795:.././hal/sam3u1c/udphs_device.c **** 			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
 5765              	 .loc 6 1795 4
 5766 0126 FB79     	 ldrb r3,[r7,#7]
 5767 0128 1A01     	 lsls r2,r3,#4
 5768 012a 2B4B     	 ldr r3,.L329+8
 5769 012c 1344     	 add r3,r3,r2
 5770 012e 7A69     	 ldr r2,[r7,#20]
 5771 0130 9A60     	 str r2,[r3,#8]
1796:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->buf_cnt += next_trans;
 5772              	 .loc 6 1796 21
 5773 0132 FB68     	 ldr r3,[r7,#12]
 5774 0134 DA68     	 ldr r2,[r3,#12]
 5775 0136 3B69     	 ldr r3,[r7,#16]
 5776 0138 1A44     	 add r2,r2,r3
 5777 013a FB68     	 ldr r3,[r7,#12]
 5778 013c DA60     	 str r2,[r3,#12]
1797:.././hal/sam3u1c/udphs_device.c **** 			ptr_job->buf_load = next_trans;
 5779              	 .loc 6 1797 22
 5780 013e FB68     	 ldr r3,[r7,#12]
 5781 0140 3A69     	 ldr r2,[r7,#16]
 5782 0142 1A61     	 str r2,[r3,#16]
1798:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_endpoint_dma_interrupt(ep);
 5783              	 .loc 6 1798 4
 5784 0144 234B     	 ldr r3,.L329+4
 5785 0146 1A69     	 ldr r2,[r3,#16]
 5786 0148 FB79     	 ldrb r3,[r7,#7]
 5787 014a 013B     	 subs r3,r3,#1
 5788 014c 4FF00071 	 mov r1,#33554432
 5789 0150 01FA03F3 	 lsl r3,r1,r3
 5790 0154 1F49     	 ldr r1,.L329+4
 5791 0156 1343     	 orrs r3,r3,r2
 5792 0158 0B61     	 str r3,[r1,#16]
1799:.././hal/sam3u1c/udphs_device.c **** 			cpu_irq_restore(flags);
 5793              	 .loc 6 1799 4
 5794 015a B868     	 ldr r0,[r7,#8]
 5795 015c 204B     	 ldr r3,.L329+16
 5796 015e 9847     	 blx r3
 5797              	.LVL107:
1800:.././hal/sam3u1c/udphs_device.c **** 			return;
 5798              	 .loc 6 1800 4
 5799 0160 33E0     	 b .L317
 5800              	.L326:
1801:.././hal/sam3u1c/udphs_device.c **** 		}
1802:.././hal/sam3u1c/udphs_device.c **** 		cpu_irq_restore(flags);
 5801              	 .loc 6 1802 3
 5802 0162 B868     	 ldr r0,[r7,#8]
 5803 0164 1E4B     	 ldr r3,.L329+16
 5804 0166 9847     	 blx r3
 5805              	.LVL108:
1803:.././hal/sam3u1c/udphs_device.c **** 
1804:.././hal/sam3u1c/udphs_device.c **** 		// Here a ZLP has been received
1805:.././hal/sam3u1c/udphs_device.c **** 		// and the DMA transfer must be not started.
1806:.././hal/sam3u1c/udphs_device.c **** 		// It is the end of transfer
1807:.././hal/sam3u1c/udphs_device.c **** 		ptr_job->buf_size = ptr_job->buf_cnt;
 5806              	 .loc 6 1807 30
 5807 0168 FB68     	 ldr r3,[r7,#12]
 5808 016a DA68     	 ldr r2,[r3,#12]
 5809              	 .loc 6 1807 21
 5810 016c FB68     	 ldr r3,[r7,#12]
 5811 016e 9A60     	 str r2,[r3,#8]
 5812              	.L320:
1808:.././hal/sam3u1c/udphs_device.c **** 	}
1809:.././hal/sam3u1c/udphs_device.c **** 	if (Is_udd_endpoint_in(ep)) {
 5813              	 .loc 6 1809 6
 5814 0170 184A     	 ldr r2,.L329+4
 5815 0172 FB79     	 ldrb r3,[r7,#7]
 5816 0174 0833     	 adds r3,r3,#8
 5817 0176 5B01     	 lsls r3,r3,#5
 5818 0178 1344     	 add r3,r3,r2
 5819 017a 1B68     	 ldr r3,[r3]
 5820 017c 03F00803 	 and r3,r3,#8
 5821              	 .loc 6 1809 5
 5822 0180 002B     	 cmp r3,#0
 5823 0182 1AD0     	 beq .L327
1810:.././hal/sam3u1c/udphs_device.c **** 		if (ptr_job->b_shortpacket) {
 5824              	 .loc 6 1810 7
 5825 0184 FB68     	 ldr r3,[r7,#12]
 5826 0186 1B7D     	 ldrb r3,[r3,#20]
 5827 0188 03F00203 	 and r3,r3,#2
 5828 018c DBB2     	 uxtb r3,r3
 5829              	 .loc 6 1810 6
 5830 018e 002B     	 cmp r3,#0
 5831 0190 13D0     	 beq .L327
1811:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("zlp ");
1812:.././hal/sam3u1c/udphs_device.c **** 			// Need to send a ZLP (No possible with USB DMA)
1813:.././hal/sam3u1c/udphs_device.c **** 			// enable interrupt to wait a free bank to sent ZLP
1814:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_tx_pkt_ready_interrupt(ep);
 5832              	 .loc 6 1814 4
 5833 0192 104A     	 ldr r2,.L329+4
 5834 0194 FB79     	 ldrb r3,[r7,#7]
 5835 0196 0833     	 adds r3,r3,#8
 5836 0198 5B01     	 lsls r3,r3,#5
 5837 019a 1344     	 add r3,r3,r2
 5838 019c 0433     	 adds r3,r3,#4
 5839 019e 4FF40062 	 mov r2,#2048
 5840 01a2 1A60     	 str r2,[r3]
1815:.././hal/sam3u1c/udphs_device.c **** 			udd_enable_endpoint_interrupt(ep);
 5841              	 .loc 6 1815 4
 5842 01a4 0B4B     	 ldr r3,.L329+4
 5843 01a6 1A69     	 ldr r2,[r3,#16]
 5844 01a8 FB79     	 ldrb r3,[r7,#7]
 5845 01aa 4FF48071 	 mov r1,#256
 5846 01ae 01FA03F3 	 lsl r3,r1,r3
 5847 01b2 0849     	 ldr r1,.L329+4
 5848 01b4 1343     	 orrs r3,r3,r2
 5849 01b6 0B61     	 str r3,[r1,#16]
1816:.././hal/sam3u1c/udphs_device.c **** 			return;
 5850              	 .loc 6 1816 4
 5851 01b8 07E0     	 b .L317
 5852              	.L327:
1817:.././hal/sam3u1c/udphs_device.c **** 		}
1818:.././hal/sam3u1c/udphs_device.c **** 	}
1819:.././hal/sam3u1c/udphs_device.c **** 	// Call callback to signal end of transfer
1820:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_finish_job(ptr_job, false, ep);
 5853              	 .loc 6 1820 2
 5854 01ba FB79     	 ldrb r3,[r7,#7]
 5855 01bc 1A46     	 mov r2,r3
 5856 01be 0021     	 movs r1,#0
 5857 01c0 F868     	 ldr r0,[r7,#12]
 5858 01c2 084B     	 ldr r3,.L329+20
 5859 01c4 9847     	 blx r3
 5860              	.LVL109:
 5861 01c6 00E0     	 b .L317
 5862              	.L328:
1750:.././hal/sam3u1c/udphs_device.c **** 	}
 5863              	 .loc 6 1750 3
 5864 01c8 00BF     	 nop
 5865              	.L317:
1821:.././hal/sam3u1c/udphs_device.c **** }
 5866              	 .loc 6 1821 1
 5867 01ca 1837     	 adds r7,r7,#24
 5868              	.LCFI233:
 5869              	 .cfi_def_cfa_offset 8
 5870 01cc BD46     	 mov sp,r7
 5871              	.LCFI234:
 5872              	 .cfi_def_cfa_register 13
 5873              	 
 5874 01ce 80BD     	 pop {r7,pc}
 5875              	.L330:
 5876              	 .align 2
 5877              	.L329:
 5878 01d0 00000000 	 .word udd_ep_job
 5879 01d4 00400A40 	 .word 1074413568
 5880 01d8 00430A40 	 .word 1074414336
 5881 01dc 00000000 	 .word cpu_irq_save
 5882 01e0 00000000 	 .word cpu_irq_restore
 5883 01e4 00000000 	 .word udd_ep_finish_job
 5884              	 .cfi_endproc
 5885              	.LFE180:
 5887              	 .section .text.udd_ep_interrupt,"ax",%progbits
 5888              	 .align 1
 5889              	 .syntax unified
 5890              	 .thumb
 5891              	 .thumb_func
 5892              	 .fpu softvfp
 5894              	udd_ep_interrupt:
 5895              	.LFB181:
1822:.././hal/sam3u1c/udphs_device.c **** 
1823:.././hal/sam3u1c/udphs_device.c **** 
1824:.././hal/sam3u1c/udphs_device.c **** static bool udd_ep_interrupt(void)
1825:.././hal/sam3u1c/udphs_device.c **** {
 5896              	 .loc 6 1825 1
 5897              	 .cfi_startproc
 5898              	 
 5899              	 
 5900 0000 80B5     	 push {r7,lr}
 5901              	.LCFI235:
 5902              	 .cfi_def_cfa_offset 8
 5903              	 .cfi_offset 7,-8
 5904              	 .cfi_offset 14,-4
 5905 0002 84B0     	 sub sp,sp,#16
 5906              	.LCFI236:
 5907              	 .cfi_def_cfa_offset 24
 5908 0004 00AF     	 add r7,sp,#0
 5909              	.LCFI237:
 5910              	 .cfi_def_cfa_register 7
1826:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_id_t ep;
1827:.././hal/sam3u1c/udphs_device.c **** 	udd_ep_job_t *ptr_job;
1828:.././hal/sam3u1c/udphs_device.c **** 
1829:.././hal/sam3u1c/udphs_device.c **** 	// For each endpoint different of control endpoint (0)
1830:.././hal/sam3u1c/udphs_device.c **** 	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
 5911              	 .loc 6 1830 10
 5912 0006 0123     	 movs r3,#1
 5913 0008 FB73     	 strb r3,[r7,#15]
 5914              	 .loc 6 1830 2
 5915 000a E0E0     	 b .L332
 5916              	.L339:
1831:.././hal/sam3u1c/udphs_device.c **** 		// Get job corresponding at endpoint
1832:.././hal/sam3u1c/udphs_device.c **** 		ptr_job = &udd_ep_job[ep - 1];
 5917              	 .loc 6 1832 28
 5918 000c FB7B     	 ldrb r3,[r7,#15]
 5919 000e 5A1E     	 subs r2,r3,#1
 5920              	 .loc 6 1832 11
 5921 0010 1346     	 mov r3,r2
 5922 0012 5B00     	 lsls r3,r3,#1
 5923 0014 1344     	 add r3,r3,r2
 5924 0016 DB00     	 lsls r3,r3,#3
 5925 0018 714A     	 ldr r2,.L340
 5926 001a 1344     	 add r3,r3,r2
 5927 001c BB60     	 str r3,[r7,#8]
1833:.././hal/sam3u1c/udphs_device.c **** 
1834:.././hal/sam3u1c/udphs_device.c **** 		// Check DMA event
1835:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
 5928              	 .loc 6 1835 7
 5929 001e 714B     	 ldr r3,.L340+4
 5930 0020 1A69     	 ldr r2,[r3,#16]
 5931 0022 FB7B     	 ldrb r3,[r7,#15]
 5932 0024 013B     	 subs r3,r3,#1
 5933 0026 4FF00071 	 mov r1,#33554432
 5934 002a 01FA03F3 	 lsl r3,r1,r3
 5935 002e 1340     	 ands r3,r3,r2
 5936              	 .loc 6 1835 6
 5937 0030 002B     	 cmp r3,#0
 5938 0032 3CD0     	 beq .L333
1836:.././hal/sam3u1c/udphs_device.c **** 				&& Is_udd_endpoint_dma_interrupt(ep)) {
 5939              	 .loc 6 1836 8
 5940 0034 6B4B     	 ldr r3,.L340+4
 5941 0036 5A69     	 ldr r2,[r3,#20]
 5942 0038 FB7B     	 ldrb r3,[r7,#15]
 5943 003a 013B     	 subs r3,r3,#1
 5944 003c 4FF00071 	 mov r1,#33554432
 5945 0040 01FA03F3 	 lsl r3,r1,r3
 5946 0044 1340     	 ands r3,r3,r2
 5947              	 .loc 6 1836 5
 5948 0046 002B     	 cmp r3,#0
 5949 0048 31D0     	 beq .L333
 5950              	.LBB31:
1837:.././hal/sam3u1c/udphs_device.c **** 			uint32_t nb_remaining;
1838:.././hal/sam3u1c/udphs_device.c **** 			if (udd_endpoint_dma_get_status(ep)
 5951              	 .loc 6 1838 8
 5952 004a FB7B     	 ldrb r3,[r7,#15]
 5953 004c 1A01     	 lsls r2,r3,#4
 5954 004e 664B     	 ldr r3,.L340+8
 5955 0050 1344     	 add r3,r3,r2
 5956 0052 DB68     	 ldr r3,[r3,#12]
1839:.././hal/sam3u1c/udphs_device.c **** 					& UDPHS_DMASTATUS_CHANN_ENB) {
 5957              	 .loc 6 1839 6
 5958 0054 03F00103 	 and r3,r3,#1
1838:.././hal/sam3u1c/udphs_device.c **** 					& UDPHS_DMASTATUS_CHANN_ENB) {
 5959              	 .loc 6 1838 7
 5960 0058 002B     	 cmp r3,#0
 5961 005a 01D0     	 beq .L334
1840:.././hal/sam3u1c/udphs_device.c **** 				return true; // Ignore EOT_STA interrupt
 5962              	 .loc 6 1840 12
 5963 005c 0123     	 movs r3,#1
 5964 005e BBE0     	 b .L335
 5965              	.L334:
1841:.././hal/sam3u1c/udphs_device.c **** 			}
1842:.././hal/sam3u1c/udphs_device.c **** 			dbg_print("dma%d: ", ep);
1843:.././hal/sam3u1c/udphs_device.c **** 			udd_disable_endpoint_dma_interrupt(ep);
 5966              	 .loc 6 1843 4
 5967 0060 604B     	 ldr r3,.L340+4
 5968 0062 1A69     	 ldr r2,[r3,#16]
 5969 0064 FB7B     	 ldrb r3,[r7,#15]
 5970 0066 013B     	 subs r3,r3,#1
 5971 0068 4FF00071 	 mov r1,#33554432
 5972 006c 01FA03F3 	 lsl r3,r1,r3
 5973 0070 DB43     	 mvns r3,r3
 5974 0072 5C49     	 ldr r1,.L340+4
 5975 0074 1340     	 ands r3,r3,r2
 5976 0076 0B61     	 str r3,[r1,#16]
1844:.././hal/sam3u1c/udphs_device.c **** 			// Save number of data no transfered
1845:.././hal/sam3u1c/udphs_device.c **** 			nb_remaining = (udd_endpoint_dma_get_status(ep) &
 5977              	 .loc 6 1845 20
 5978 0078 FB7B     	 ldrb r3,[r7,#15]
 5979 007a 1A01     	 lsls r2,r3,#4
 5980 007c 5A4B     	 ldr r3,.L340+8
 5981 007e 1344     	 add r3,r3,r2
 5982 0080 DB68     	 ldr r3,[r3,#12]
1846:.././hal/sam3u1c/udphs_device.c **** 					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
1847:.././hal/sam3u1c/udphs_device.c **** 					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
 5983              	 .loc 6 1847 6
 5984 0082 1B0C     	 lsrs r3,r3,#16
1845:.././hal/sam3u1c/udphs_device.c **** 					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
 5985              	 .loc 6 1845 17
 5986 0084 9BB2     	 uxth r3,r3
 5987 0086 7B60     	 str r3,[r7,#4]
1848:.././hal/sam3u1c/udphs_device.c **** 			if (nb_remaining) {
 5988              	 .loc 6 1848 7
 5989 0088 7B68     	 ldr r3,[r7,#4]
 5990 008a 002B     	 cmp r3,#0
 5991 008c 09D0     	 beq .L336
1849:.././hal/sam3u1c/udphs_device.c **** 				// Transfer no complete (short packet or ZLP) then:
1850:.././hal/sam3u1c/udphs_device.c **** 				// Update number of data transfered
1851:.././hal/sam3u1c/udphs_device.c **** 				ptr_job->buf_cnt -= nb_remaining;
 5992              	 .loc 6 1851 22
 5993 008e BB68     	 ldr r3,[r7,#8]
 5994 0090 DA68     	 ldr r2,[r3,#12]
 5995 0092 7B68     	 ldr r3,[r7,#4]
 5996 0094 D21A     	 subs r2,r2,r3
 5997 0096 BB68     	 ldr r3,[r7,#8]
 5998 0098 DA60     	 str r2,[r3,#12]
1852:.././hal/sam3u1c/udphs_device.c **** 				// Set transfer complete to stop the transfer
1853:.././hal/sam3u1c/udphs_device.c **** 				ptr_job->buf_size = ptr_job->buf_cnt;
 5999              	 .loc 6 1853 32
 6000 009a BB68     	 ldr r3,[r7,#8]
 6001 009c DA68     	 ldr r2,[r3,#12]
 6002              	 .loc 6 1853 23
 6003 009e BB68     	 ldr r3,[r7,#8]
 6004 00a0 9A60     	 str r2,[r3,#8]
 6005              	.L336:
1854:.././hal/sam3u1c/udphs_device.c **** 			}
1855:.././hal/sam3u1c/udphs_device.c **** 			udd_ep_trans_done(ep);
 6006              	 .loc 6 1855 4
 6007 00a2 FB7B     	 ldrb r3,[r7,#15]
 6008 00a4 1846     	 mov r0,r3
 6009 00a6 514B     	 ldr r3,.L340+12
 6010 00a8 9847     	 blx r3
 6011              	.LVL110:
1856:.././hal/sam3u1c/udphs_device.c **** 			return true;
 6012              	 .loc 6 1856 11
 6013 00aa 0123     	 movs r3,#1
 6014 00ac 94E0     	 b .L335
 6015              	.L333:
 6016              	.LBE31:
1857:.././hal/sam3u1c/udphs_device.c **** 		}
1858:.././hal/sam3u1c/udphs_device.c **** 		// Check empty bank interrupt event
1859:.././hal/sam3u1c/udphs_device.c **** 		if (Is_udd_endpoint_interrupt_enabled(ep)) {
 6017              	 .loc 6 1859 7
 6018 00ae 4D4B     	 ldr r3,.L340+4
 6019 00b0 1A69     	 ldr r2,[r3,#16]
 6020 00b2 FB7B     	 ldrb r3,[r7,#15]
 6021 00b4 4FF48071 	 mov r1,#256
 6022 00b8 01FA03F3 	 lsl r3,r1,r3
 6023 00bc 1340     	 ands r3,r3,r2
 6024              	 .loc 6 1859 6
 6025 00be 002B     	 cmp r3,#0
 6026 00c0 00F08280 	 beq .L337
1860:.././hal/sam3u1c/udphs_device.c **** 			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
 6027              	 .loc 6 1860 8
 6028 00c4 474A     	 ldr r2,.L340+4
 6029 00c6 FB7B     	 ldrb r3,[r7,#15]
 6030 00c8 5B01     	 lsls r3,r3,#5
 6031 00ca 1344     	 add r3,r3,r2
 6032 00cc 03F58673 	 add r3,r3,#268
 6033 00d0 1B68     	 ldr r3,[r3]
 6034 00d2 03F40063 	 and r3,r3,#2048
 6035              	 .loc 6 1860 7
 6036 00d6 002B     	 cmp r3,#0
 6037 00d8 24D0     	 beq .L338
1861:.././hal/sam3u1c/udphs_device.c **** 					&& !Is_udd_tx_pkt_ready(ep)) {
 6038              	 .loc 6 1861 10
 6039 00da 424A     	 ldr r2,.L340+4
 6040 00dc FB7B     	 ldrb r3,[r7,#15]
 6041 00de 5B01     	 lsls r3,r3,#5
 6042 00e0 1344     	 add r3,r3,r2
 6043 00e2 03F58E73 	 add r3,r3,#284
 6044 00e6 1B68     	 ldr r3,[r3]
 6045 00e8 03F40063 	 and r3,r3,#2048
 6046              	 .loc 6 1861 6
 6047 00ec 002B     	 cmp r3,#0
 6048 00ee 19D1     	 bne .L338
1862:.././hal/sam3u1c/udphs_device.c **** 				udd_disable_tx_pkt_ready_interrupt(ep);
 6049              	 .loc 6 1862 5
 6050 00f0 3C4A     	 ldr r2,.L340+4
 6051 00f2 FB7B     	 ldrb r3,[r7,#15]
 6052 00f4 5B01     	 lsls r3,r3,#5
 6053 00f6 1344     	 add r3,r3,r2
 6054 00f8 03F58473 	 add r3,r3,#264
 6055 00fc 4FF40062 	 mov r2,#2048
 6056 0100 1A60     	 str r2,[r3]
1863:.././hal/sam3u1c/udphs_device.c **** 				// One bank is free then send a ZLP
1864:.././hal/sam3u1c/udphs_device.c **** 				udd_raise_tx_pkt_ready(ep);
 6057              	 .loc 6 1864 5
 6058 0102 384A     	 ldr r2,.L340+4
 6059 0104 FB7B     	 ldrb r3,[r7,#15]
 6060 0106 5B01     	 lsls r3,r3,#5
 6061 0108 1344     	 add r3,r3,r2
 6062 010a 03F58A73 	 add r3,r3,#276
 6063 010e 4FF40062 	 mov r2,#2048
 6064 0112 1A60     	 str r2,[r3]
1865:.././hal/sam3u1c/udphs_device.c **** 				udd_ep_finish_job(ptr_job, false, ep);
 6065              	 .loc 6 1865 5
 6066 0114 FB7B     	 ldrb r3,[r7,#15]
 6067 0116 1A46     	 mov r2,r3
 6068 0118 0021     	 movs r1,#0
 6069 011a B868     	 ldr r0,[r7,#8]
 6070 011c 344B     	 ldr r3,.L340+16
 6071 011e 9847     	 blx r3
 6072              	.LVL111:
1866:.././hal/sam3u1c/udphs_device.c **** 				return true;
 6073              	 .loc 6 1866 12
 6074 0120 0123     	 movs r3,#1
 6075 0122 59E0     	 b .L335
 6076              	.L338:
1867:.././hal/sam3u1c/udphs_device.c **** 			}
1868:.././hal/sam3u1c/udphs_device.c **** 			if (Is_udd_bank_interrupt_enabled(ep)
 6077              	 .loc 6 1868 8
 6078 0124 2F4A     	 ldr r2,.L340+4
 6079 0126 FB7B     	 ldrb r3,[r7,#15]
 6080 0128 5B01     	 lsls r3,r3,#5
 6081 012a 1344     	 add r3,r3,r2
 6082 012c 03F58673 	 add r3,r3,#268
 6083 0130 1B68     	 ldr r3,[r3]
 6084 0132 03F48023 	 and r3,r3,#262144
 6085              	 .loc 6 1868 7
 6086 0136 002B     	 cmp r3,#0
 6087 0138 46D0     	 beq .L337
1869:.././hal/sam3u1c/udphs_device.c **** 					&& (0 == udd_nb_busy_bank(ep))) {
 6088              	 .loc 6 1869 15
 6089 013a 2A4A     	 ldr r2,.L340+4
 6090 013c FB7B     	 ldrb r3,[r7,#15]
 6091 013e 5B01     	 lsls r3,r3,#5
 6092 0140 1344     	 add r3,r3,r2
 6093 0142 03F58E73 	 add r3,r3,#284
 6094 0146 1B68     	 ldr r3,[r3]
 6095 0148 9B0C     	 lsrs r3,r3,#18
 6096 014a 03F00303 	 and r3,r3,#3
 6097              	 .loc 6 1869 6
 6098 014e 002B     	 cmp r3,#0
 6099 0150 3AD1     	 bne .L337
1870:.././hal/sam3u1c/udphs_device.c **** 				// End of background transfer on IN endpoint
1871:.././hal/sam3u1c/udphs_device.c **** 				udd_disable_bank_interrupt(ep);
 6100              	 .loc 6 1871 5
 6101 0152 244A     	 ldr r2,.L340+4
 6102 0154 FB7B     	 ldrb r3,[r7,#15]
 6103 0156 5B01     	 lsls r3,r3,#5
 6104 0158 1344     	 add r3,r3,r2
 6105 015a 03F58473 	 add r3,r3,#264
 6106 015e 4FF48022 	 mov r2,#262144
 6107 0162 1A60     	 str r2,[r3]
1872:.././hal/sam3u1c/udphs_device.c **** 				udd_disable_endpoint_interrupt(ep);
 6108              	 .loc 6 1872 5
 6109 0164 1F4B     	 ldr r3,.L340+4
 6110 0166 1A69     	 ldr r2,[r3,#16]
 6111 0168 FB7B     	 ldrb r3,[r7,#15]
 6112 016a 4FF48071 	 mov r1,#256
 6113 016e 01FA03F3 	 lsl r3,r1,r3
 6114 0172 DB43     	 mvns r3,r3
 6115 0174 1B49     	 ldr r1,.L340+4
 6116 0176 1340     	 ands r3,r3,r2
 6117 0178 0B61     	 str r3,[r1,#16]
1873:.././hal/sam3u1c/udphs_device.c **** 
1874:.././hal/sam3u1c/udphs_device.c **** 				Assert(ptr_job->stall_requested);
1875:.././hal/sam3u1c/udphs_device.c **** 				// A stall has been requested during background transfer
1876:.././hal/sam3u1c/udphs_device.c **** 				ptr_job->stall_requested = false;
 6118              	 .loc 6 1876 30
 6119 017a BA68     	 ldr r2,[r7,#8]
 6120 017c 137D     	 ldrb r3,[r2,#20]
 6121 017e 6FF38203 	 bfc r3,#2,#1
 6122 0182 1375     	 strb r3,[r2,#20]
1877:.././hal/sam3u1c/udphs_device.c **** 				udd_disable_endpoint_bank_autoswitch(ep);
 6123              	 .loc 6 1877 5
 6124 0184 174A     	 ldr r2,.L340+4
 6125 0186 FB7B     	 ldrb r3,[r7,#15]
 6126 0188 5B01     	 lsls r3,r3,#5
 6127 018a 1344     	 add r3,r3,r2
 6128 018c 03F58473 	 add r3,r3,#264
 6129 0190 1A68     	 ldr r2,[r3]
 6130 0192 1449     	 ldr r1,.L340+4
 6131 0194 FB7B     	 ldrb r3,[r7,#15]
 6132 0196 22F00202 	 bic r2,r2,#2
 6133 019a 5B01     	 lsls r3,r3,#5
 6134 019c 0B44     	 add r3,r3,r1
 6135 019e 03F58473 	 add r3,r3,#264
 6136 01a2 1A60     	 str r2,[r3]
1878:.././hal/sam3u1c/udphs_device.c **** 				udd_enable_stall_handshake(ep);
 6137              	 .loc 6 1878 5
 6138 01a4 0F4A     	 ldr r2,.L340+4
 6139 01a6 FB7B     	 ldrb r3,[r7,#15]
 6140 01a8 5B01     	 lsls r3,r3,#5
 6141 01aa 1344     	 add r3,r3,r2
 6142 01ac 03F58A73 	 add r3,r3,#276
 6143 01b0 2022     	 movs r2,#32
 6144 01b2 1A60     	 str r2,[r3]
1879:.././hal/sam3u1c/udphs_device.c **** 				udd_reset_data_toggle(ep);
 6145              	 .loc 6 1879 5
 6146 01b4 0B4A     	 ldr r2,.L340+4
 6147 01b6 FB7B     	 ldrb r3,[r7,#15]
 6148 01b8 5B01     	 lsls r3,r3,#5
 6149 01ba 1344     	 add r3,r3,r2
 6150 01bc 03F58C73 	 add r3,r3,#280
 6151 01c0 4022     	 movs r2,#64
 6152 01c2 1A60     	 str r2,[r3]
1880:.././hal/sam3u1c/udphs_device.c **** 				//dbg_print("exHalt%x ", ep);
1881:.././hal/sam3u1c/udphs_device.c **** 				return true;
 6153              	 .loc 6 1881 12
 6154 01c4 0123     	 movs r3,#1
 6155 01c6 07E0     	 b .L335
 6156              	.L337:
1830:.././hal/sam3u1c/udphs_device.c **** 		// Get job corresponding at endpoint
 6157              	 .loc 6 1830 42 discriminator 2
 6158 01c8 FB7B     	 ldrb r3,[r7,#15]
 6159 01ca 0133     	 adds r3,r3,#1
 6160 01cc FB73     	 strb r3,[r7,#15]
 6161              	.L332:
1830:.././hal/sam3u1c/udphs_device.c **** 		// Get job corresponding at endpoint
 6162              	 .loc 6 1830 2 discriminator 1
 6163 01ce FB7B     	 ldrb r3,[r7,#15]
 6164 01d0 022B     	 cmp r3,#2
 6165 01d2 7FF61BAF 	 bls .L339
1882:.././hal/sam3u1c/udphs_device.c **** 			}
1883:.././hal/sam3u1c/udphs_device.c **** 		}
1884:.././hal/sam3u1c/udphs_device.c **** 	}
1885:.././hal/sam3u1c/udphs_device.c **** 	return false;
 6166              	 .loc 6 1885 9
 6167 01d6 0023     	 movs r3,#0
 6168              	.L335:
1886:.././hal/sam3u1c/udphs_device.c **** }
 6169              	 .loc 6 1886 1
 6170 01d8 1846     	 mov r0,r3
 6171 01da 1037     	 adds r7,r7,#16
 6172              	.LCFI238:
 6173              	 .cfi_def_cfa_offset 8
 6174 01dc BD46     	 mov sp,r7
 6175              	.LCFI239:
 6176              	 .cfi_def_cfa_register 13
 6177              	 
 6178 01de 80BD     	 pop {r7,pc}
 6179              	.L341:
 6180              	 .align 2
 6181              	.L340:
 6182 01e0 00000000 	 .word udd_ep_job
 6183 01e4 00400A40 	 .word 1074413568
 6184 01e8 00430A40 	 .word 1074414336
 6185 01ec 00000000 	 .word udd_ep_trans_done
 6186 01f0 00000000 	 .word udd_ep_finish_job
 6187              	 .cfi_endproc
 6188              	.LFE181:
 6190              	 .section .bss.b_shortpacket.8448,"aw",%nobits
 6193              	b_shortpacket.8448:
 6194 0000 00       	 .space 1
 6195              	 .text
 6196              	.Letext0:
 6197              	 .file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 6198              	 .file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 6199              	 .file 9 ".././hal/sam3u1c/inc/sam3u1c.h"
 6200              	 .file 10 ".././hal/sam3u1c/inc/system_sam3u.h"
 6201              	 .file 11 ".././hal/sam3u1c/inc/component/component_udphs.h"
 6202              	 .file 12 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 6203              	 .file 13 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 6204              	 .file 14 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 6205              	 .file 15 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 6206              	 .file 16 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 6207              	 .file 17 ".././hal/sam3u1c/inc/compiler.h"
 6208              	 .file 18 "./conf_usb.h"
 6209              	 .file 19 ".././hal/sam3u1c/inc/usb_protocol.h"
 6210              	 .file 20 ".././hal/sam3u1c/inc/udi.h"
 6211              	 .file 21 ".././hal/sam3u1c/inc/udc_desc.h"
 6212              	 .file 22 ".././hal/sam3u1c/inc/udd.h"
 6213              	 .file 23 ".././hal/sam3u1c/inc/udi_vendor.h"
 6214              	 .file 24 ".././hal/sam3u1c/inc/udphs_device.h"
 6215              	 .file 25 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
 6216              	 .file 26 ".././hal/sam3u1c/inc/pmc.h"
 6217              	 .file 27 ".././hal/sam3u1c/inc/sam3u/sysclk.h"
 6218              	 .file 28 ".././hal/sam3u1c/inc/sleep.h"
 6219              	 .file 29 ".././hal/sam3u1c/inc/main.h"
DEFINED SYMBOLS
                            *ABS*:00000000 udphs_device.c
    {standard input}:16     .text.NVIC_EnableIRQ:00000000 $t
    {standard input}:23     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
    {standard input}:74     .text.NVIC_EnableIRQ:0000002c $d
    {standard input}:79     .text.NVIC_SetPriority:00000000 $t
    {standard input}:85     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
    {standard input}:159    .text.NVIC_SetPriority:0000004c $d
    {standard input}:165    .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:168    .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:173    .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:174    .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:176    .text.cpu_irq_save:00000000 $t
    {standard input}:182    .text.cpu_irq_save:00000000 cpu_irq_save
    {standard input}:273    .text.cpu_irq_save:00000038 $d
    {standard input}:278    .text.cpu_irq_is_enabled_flags:00000000 $t
    {standard input}:284    .text.cpu_irq_is_enabled_flags:00000000 cpu_irq_is_enabled_flags
    {standard input}:327    .text.cpu_irq_restore:00000000 $t
    {standard input}:333    .text.cpu_irq_restore:00000000 cpu_irq_restore
    {standard input}:404    .text.cpu_irq_restore:0000002c $d
    {standard input}:410    .text.sleepmgr_lock_mode:00000000 $t
    {standard input}:416    .text.sleepmgr_lock_mode:00000000 sleepmgr_lock_mode
    {standard input}:468    .text.sleepmgr_lock_mode:0000002c $d
    {standard input}:475    .text.sleepmgr_unlock_mode:00000000 $t
    {standard input}:481    .text.sleepmgr_unlock_mode:00000000 sleepmgr_unlock_mode
    {standard input}:532    .text.sleepmgr_unlock_mode:0000002c $d
    {standard input}:541    .bss.udd_b_idle:00000000 udd_b_idle
    {standard input}:542    .bss.udd_b_idle:00000000 $d
    {standard input}:544    .text.udd_sleep_mode:00000000 $t
    {standard input}:550    .text.udd_sleep_mode:00000000 udd_sleep_mode
    {standard input}:623    .text.udd_sleep_mode:0000004c $d
                            *COM*:00000018 udd_g_ctrlreq
    {standard input}:633    .bss.udd_ep_control_state:00000000 udd_ep_control_state
    {standard input}:634    .bss.udd_ep_control_state:00000000 $d
    {standard input}:636    .bss.udd_ctrl_prev_payload_buf_cnt:00000000 $d
    {standard input}:639    .bss.udd_ctrl_prev_payload_buf_cnt:00000000 udd_ctrl_prev_payload_buf_cnt
    {standard input}:642    .bss.udd_ctrl_payload_buf_cnt:00000000 $d
    {standard input}:645    .bss.udd_ctrl_payload_buf_cnt:00000000 udd_ctrl_payload_buf_cnt
    {standard input}:648    .bss.udd_ep_job:00000000 $d
    {standard input}:651    .bss.udd_ep_job:00000000 udd_ep_job
    {standard input}:654    .text.UDPHS_Handler:00000000 $t
    {standard input}:661    .text.UDPHS_Handler:00000000 UDPHS_Handler
    {standard input}:966    .text.UDPHS_Handler:00000184 $d
    {standard input}:5087   .text.udd_ctrl_interrupt:00000000 udd_ctrl_interrupt
    {standard input}:5894   .text.udd_ep_interrupt:00000000 udd_ep_interrupt
    {standard input}:5343   .text.udd_ep_job_table_kill:00000000 udd_ep_job_table_kill
    {standard input}:3739   .text.udd_reset_ep_ctrl:00000000 udd_reset_ep_ctrl
    {standard input}:3830   .text.udd_ctrl_init:00000000 udd_ctrl_init
    {standard input}:986    .text.udd_include_vbus_monitoring:00000000 $t
    {standard input}:993    .text.udd_include_vbus_monitoring:00000000 udd_include_vbus_monitoring
    {standard input}:1024   .text.udd_enable:00000000 $t
    {standard input}:1031   .text.udd_enable:00000000 udd_enable
    {standard input}:1125   .text.udd_enable:0000006c $d
    {standard input}:5256   .text.udd_ep_job_table_reset:00000000 udd_ep_job_table_reset
    {standard input}:1231   .text.udd_attach:00000000 udd_attach
    {standard input}:1141   .text.udd_disable:00000000 $t
    {standard input}:1148   .text.udd_disable:00000000 udd_disable
    {standard input}:1213   .text.udd_disable:0000003c $d
    {standard input}:1224   .text.udd_attach:00000000 $t
    {standard input}:1347   .text.udd_attach:000000a0 $d
    {standard input}:1357   .text.udd_detach:00000000 $t
    {standard input}:1364   .text.udd_detach:00000000 udd_detach
    {standard input}:1410   .text.udd_detach:00000034 $d
    {standard input}:1418   .text.udd_is_high_speed:00000000 $t
    {standard input}:1425   .text.udd_is_high_speed:00000000 udd_is_high_speed
    {standard input}:1463   .text.udd_is_high_speed:00000020 $d
    {standard input}:1468   .text.udd_set_address:00000000 $t
    {standard input}:1475   .text.udd_set_address:00000000 udd_set_address
    {standard input}:1532   .text.udd_set_address:00000040 $d
    {standard input}:1537   .text.udd_getaddress:00000000 $t
    {standard input}:1544   .text.udd_getaddress:00000000 udd_getaddress
    {standard input}:1578   .text.udd_getaddress:00000018 $d
    {standard input}:1583   .text.udd_get_frame_number:00000000 $t
    {standard input}:1590   .text.udd_get_frame_number:00000000 udd_get_frame_number
    {standard input}:1625   .text.udd_get_frame_number:0000001c $d
    {standard input}:1630   .text.udd_get_micro_frame_number:00000000 $t
    {standard input}:1637   .text.udd_get_micro_frame_number:00000000 udd_get_micro_frame_number
    {standard input}:1671   .text.udd_get_micro_frame_number:00000018 $d
    {standard input}:1676   .text.udd_send_remotewakeup:00000000 $t
    {standard input}:1683   .text.udd_send_remotewakeup:00000000 udd_send_remotewakeup
    {standard input}:1728   .text.udd_send_remotewakeup:00000030 $d
    {standard input}:1736   .text.udd_set_setup_payload:00000000 $t
    {standard input}:1743   .text.udd_set_setup_payload:00000000 udd_set_setup_payload
    {standard input}:1788   .text.udd_set_setup_payload:00000024 $d
    {standard input}:1793   .text.udd_ep_alloc:00000000 $t
    {standard input}:1800   .text.udd_ep_alloc:00000000 udd_ep_alloc
    {standard input}:2308   .text.udd_ep_alloc:0000030c $d
    {standard input}:2312   .text.udd_ep_alloc:00000314 $t
    {standard input}:2419   .text.udd_ep_alloc:000003b0 $d
    {standard input}:3009   .text.udd_ep_run:00000000 udd_ep_run
    {standard input}:2425   .text.udd_ep_free:00000000 $t
    {standard input}:2432   .text.udd_ep_free:00000000 udd_ep_free
    {standard input}:2518   .text.udd_ep_free:00000074 $d
    {standard input}:5418   .text.udd_ep_abort_job:00000000 udd_ep_abort_job
    {standard input}:2525   .text.udd_ep_is_halted:00000000 $t
    {standard input}:2532   .text.udd_ep_is_halted:00000000 udd_ep_is_halted
    {standard input}:2612   .text.udd_ep_is_halted:00000060 $d
    {standard input}:2618   .text.udd_ep_set_halt:00000000 $t
    {standard input}:2625   .text.udd_ep_set_halt:00000000 udd_ep_set_halt
    {standard input}:2796   .text.udd_ep_set_halt:0000010c $d
    {standard input}:2802   .text.udd_ep_clear_halt:00000000 $t
    {standard input}:2809   .text.udd_ep_clear_halt:00000000 udd_ep_clear_halt
    {standard input}:2996   .text.udd_ep_clear_halt:00000128 $d
    {standard input}:3002   .text.udd_ep_run:00000000 $t
    {standard input}:3187   .text.udd_ep_run:000000f4 $d
    {standard input}:5582   .text.udd_ep_trans_done:00000000 udd_ep_trans_done
    {standard input}:3196   .text.udd_ep_abort:00000000 $t
    {standard input}:3203   .text.udd_ep_abort:00000000 udd_ep_abort
    {standard input}:3296   .text.udd_ep_abort:0000007c $d
    {standard input}:3303   .text.udd_ep_wait_stall_clear:00000000 $t
    {standard input}:3310   .text.udd_ep_wait_stall_clear:00000000 udd_ep_wait_stall_clear
    {standard input}:3431   .text.udd_ep_wait_stall_clear:000000a0 $d
    {standard input}:3437   .text.udd_test_mode_j:00000000 $t
    {standard input}:3444   .text.udd_test_mode_j:00000000 udd_test_mode_j
    {standard input}:3485   .text.udd_test_mode_j:00000030 $d
    {standard input}:3490   .text.udd_test_mode_k:00000000 $t
    {standard input}:3497   .text.udd_test_mode_k:00000000 udd_test_mode_k
    {standard input}:3538   .text.udd_test_mode_k:00000030 $d
    {standard input}:3543   .text.udd_test_mode_se0_nak:00000000 $t
    {standard input}:3550   .text.udd_test_mode_se0_nak:00000000 udd_test_mode_se0_nak
    {standard input}:3585   .text.udd_test_mode_se0_nak:00000020 $d
    {standard input}:3590   .rodata:00000000 $d
    {standard input}:3597   .text.udd_test_mode_packet:00000000 $t
    {standard input}:3604   .text.udd_test_mode_packet:00000000 udd_test_mode_packet
    {standard input}:3726   .text.udd_test_mode_packet:000000c0 $d
    {standard input}:3733   .text.udd_reset_ep_ctrl:00000000 $t
    {standard input}:3817   .text.udd_reset_ep_ctrl:00000074 $d
    {standard input}:3824   .text.udd_ctrl_init:00000000 $t
    {standard input}:3894   .text.udd_ctrl_init:00000048 $d
    {standard input}:3903   .text.udd_ctrl_setup_received:00000000 $t
    {standard input}:3909   .text.udd_ctrl_setup_received:00000000 udd_ctrl_setup_received
    {standard input}:4115   .text.udd_ctrl_setup_received:00000108 $d
    {standard input}:5043   .text.udd_ctrl_endofrequest:00000000 udd_ctrl_endofrequest
    {standard input}:4851   .text.udd_ctrl_stall_data:00000000 udd_ctrl_stall_data
    {standard input}:4139   .text.udd_ctrl_in_sent:00000000 udd_ctrl_in_sent
    {standard input}:4899   .text.udd_ctrl_send_zlp_in:00000000 udd_ctrl_send_zlp_in
    {standard input}:4133   .text.udd_ctrl_in_sent:00000000 $t
    {standard input}:4381   .text.udd_ctrl_in_sent:00000138 $d
    {standard input}:6193   .bss.b_shortpacket.8448:00000000 b_shortpacket.8448
    {standard input}:4977   .text.udd_ctrl_send_zlp_out:00000000 udd_ctrl_send_zlp_out
    {standard input}:4397   .text.udd_ctrl_out_received:00000000 $t
    {standard input}:4403   .text.udd_ctrl_out_received:00000000 udd_ctrl_out_received
    {standard input}:4702   .text.udd_ctrl_out_received:0000018c $d
    {standard input}:4718   .text.udd_ctrl_underflow:00000000 $t
    {standard input}:4724   .text.udd_ctrl_underflow:00000000 udd_ctrl_underflow
    {standard input}:4777   .text.udd_ctrl_underflow:00000038 $d
    {standard input}:4784   .text.udd_ctrl_overflow:00000000 $t
    {standard input}:4790   .text.udd_ctrl_overflow:00000000 udd_ctrl_overflow
    {standard input}:4839   .text.udd_ctrl_overflow:0000002c $d
    {standard input}:4845   .text.udd_ctrl_stall_data:00000000 $t
    {standard input}:4887   .text.udd_ctrl_stall_data:0000001c $d
    {standard input}:4893   .text.udd_ctrl_send_zlp_in:00000000 $t
    {standard input}:4963   .text.udd_ctrl_send_zlp_in:00000054 $d
    {standard input}:4971   .text.udd_ctrl_send_zlp_out:00000000 $t
    {standard input}:5029   .text.udd_ctrl_send_zlp_out:00000034 $d
    {standard input}:5037   .text.udd_ctrl_endofrequest:00000000 $t
    {standard input}:5076   .text.udd_ctrl_endofrequest:00000018 $d
    {standard input}:5081   .text.udd_ctrl_interrupt:00000000 $t
    {standard input}:5240   .text.udd_ctrl_interrupt:000000cc $d
    {standard input}:5250   .text.udd_ep_job_table_reset:00000000 $t
    {standard input}:5332   .text.udd_ep_job_table_reset:00000058 $d
    {standard input}:5337   .text.udd_ep_job_table_kill:00000000 $t
    {standard input}:5406   .text.udd_ep_job_table_kill:00000040 $d
    {standard input}:5482   .text.udd_ep_finish_job:00000000 udd_ep_finish_job
    {standard input}:5412   .text.udd_ep_abort_job:00000000 $t
    {standard input}:5470   .text.udd_ep_abort_job:00000034 $d
    {standard input}:5476   .text.udd_ep_finish_job:00000000 $t
    {standard input}:5571   .text.udd_ep_finish_job:0000006c $d
    {standard input}:5576   .text.udd_ep_trans_done:00000000 $t
    {standard input}:5878   .text.udd_ep_trans_done:000001d0 $d
    {standard input}:5888   .text.udd_ep_interrupt:00000000 $t
    {standard input}:6182   .text.udd_ep_interrupt:000001e0 $d
    {standard input}:6194   .bss.b_shortpacket.8448:00000000 $d
                           .group:00000000 wm4.0.2cd8a2cb7ff4c48cec7eeec776a1dd8c
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_usb.h.56.f175acea7b1aa84c1a9647f9b8aa7250
                           .group:00000000 wm4.udi_vendor_conf.h.56.4348c8e521d040f44df868219dae6785
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.69.3670053ec9e880dbc2016be2b8dca792
                           .group:00000000 wm4.cw521.h.62.d34c289ace4a92d90be8fb389db40479
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.conf_board.h.45.aac520ee9dd7e984e12efac1b366b8fe
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.udphs_device.h.91.605096afd8c16fcd75a5a1c11b74776b
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3

UNDEFINED SYMBOLS
g_interrupt_enabled
sleepmgr_locks
pmc_enable_periph_clk
pmc_is_wakeup_clocks_restored
udc_sof_notify
main_sof_action
udc_reset
pmc_disable_periph_clk
main_suspend_action
main_resume_action
sysclk_enable_usb
pmc_set_fast_startup_input
sysclk_disable_usb
udc_process_setup
