   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "flash_efc.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.osc_get_rate,"ax",%progbits
  27              	 .align 1
  28              	 .arch armv7-m
  29              	 .syntax unified
  30              	 .thumb
  31              	 .thumb_func
  32              	 .fpu softvfp
  34              	osc_get_rate:
  35              	.LFB72:
  36              	 .file 1 ".././hal/sam3u1c/inc/sam3u/osc.h"
   1:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \brief Chip-specific oscillator management functions.
   5:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  44:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/osc.h **** #define CHIP_OSC_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  47:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "board.h"
  48:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "pmc.h"
  49:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  50:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/sam3u/osc.h **** extern "C" {
  54:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  55:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @endcond
  57:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  58:.././hal/sam3u1c/inc/sam3u/osc.h **** /*
  59:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Below BOARD_XXX macros are related to the specific board, and
  60:.././hal/sam3u1c/inc/sam3u/osc.h ****  * should be defined by the board code, otherwise default value are used.
  61:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  62:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_XTAL)
  63:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock xtal frequency has not been defined.
  64:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_XTAL      (32768UL)
  65:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  66:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  67:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_BYPASS)
  68:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock bypass frequency has not been defined.
  69:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_BYPASS    (32768UL)
  70:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  71:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  72:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_XTAL)
  73:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal frequency has not been defined.
  74:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_XTAL    (12000000UL)
  75:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  76:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  77:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_BYPASS)
  78:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock bypass frequency has not been defined.
  79:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_BYPASS  (12000000UL)
  80:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  81:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  82:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_OSC_STARTUP_US)
  83:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal startup time has not been defined.
  84:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_OSC_STARTUP_US      (15625UL)
  85:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  86:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  87:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
  88:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \weakgroup osc_group
  89:.././hal/sam3u1c/inc/sam3u/osc.h ****  * @{
  90:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  91:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  92:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator identifiers
  93:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
  94:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC             0    //!< Internal 32kHz RC oscillator.
  95:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL           1    //!< External 32kHz crystal oscillator.
  96:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS         2    //!< External 32kHz bypass oscillator.
  97:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC            3    //!< Internal 4MHz RC oscillator.
  98:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC            4    //!< Internal 8MHz RC oscillator.
  99:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC           5    //!< Internal 12MHz RC oscillator.
 100:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL             6    //!< External crystal oscillator.
 101:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS           7    //!< External bypass oscillator.
 102:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 103:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 104:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator clock speed in hertz
 105:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
 106:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC_HZ          CHIP_FREQ_SLCK_RC               //!< Internal 32kHz RC oscillat
 107:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL_HZ        BOARD_FREQ_SLCK_XTAL            //!< External 32kHz crystal osc
 108:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS_HZ      BOARD_FREQ_SLCK_BYPASS          //!< External 32kHz bypass osci
 109:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC_HZ         CHIP_FREQ_MAINCK_RC_4MHZ        //!< Internal 4MHz RC oscillato
 110:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC_HZ         CHIP_FREQ_MAINCK_RC_8MHZ        //!< Internal 8MHz RC oscillato
 111:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC_HZ        CHIP_FREQ_MAINCK_RC_12MHZ       //!< Internal 12MHz RC oscillat
 112:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillato
 113:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator
 114:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 115:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 116:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_enable(uint32_t ul_id)
 117:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 118:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 119:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 121:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 122:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 123:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
 124:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 125:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 127:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
 128:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 129:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 130:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 131:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 132:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
 133:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 134:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 135:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 136:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
 137:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 138:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 139:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 140:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
 141:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 142:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 143:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 144:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 145:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
 146:.././hal/sam3u1c/inc/sam3u/osc.h **** 				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
 147:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 148:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 149:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 150:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_bypass_main_xtal();
 151:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 152:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 153:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 154:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 155:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_disable(uint32_t ul_id)
 156:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 157:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 158:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 159:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 160:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 161:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 162:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 163:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 164:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 165:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 166:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_fastrc();
 167:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 168:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 169:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 170:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_XTAL);
 171:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 172:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 173:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 174:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_BYPASS);
 175:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 176:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 177:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 178:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 179:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline bool osc_is_ready(uint32_t ul_id)
 180:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 181:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 182:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 183:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return 1;
 184:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 185:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 186:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 187:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_32kxtal();
 188:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 189:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 190:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 191:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 192:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_fastrc();
 193:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 194:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 195:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 196:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_main_xtal();
 197:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 198:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 199:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 200:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 201:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 202:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline uint32_t osc_get_rate(uint32_t ul_id)
 203:.././hal/sam3u1c/inc/sam3u/osc.h **** {
  37              	 .loc 1 203 1
  38              	 .cfi_startproc
  39              	 
  40              	 
  41              	 
  42 0000 80B4     	 push {r7}
  43              	.LCFI0:
  44              	 .cfi_def_cfa_offset 4
  45              	 .cfi_offset 7,-4
  46 0002 83B0     	 sub sp,sp,#12
  47              	.LCFI1:
  48              	 .cfi_def_cfa_offset 16
  49 0004 00AF     	 add r7,sp,#0
  50              	.LCFI2:
  51              	 .cfi_def_cfa_register 7
  52 0006 7860     	 str r0,[r7,#4]
  53 0008 7B68     	 ldr r3,[r7,#4]
  54 000a 072B     	 cmp r3,#7
  55 000c 23D8     	 bhi .L2
  56 000e 01A2     	 adr r2,.L4
  57 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
  58              	 .p2align 2
  59              	.L4:
  60 0014 35000000 	 .word .L11+1
  61 0018 3B000000 	 .word .L10+1
  62 001c 3F000000 	 .word .L9+1
  63 0020 43000000 	 .word .L8+1
  64 0024 47000000 	 .word .L7+1
  65 0028 4B000000 	 .word .L6+1
  66 002c 4F000000 	 .word .L5+1
  67 0030 53000000 	 .word .L3+1
  68              	 .p2align 1
  69              	.L11:
 204:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 205:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 206:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_SLCK_32K_RC_HZ;
  70              	 .loc 1 206 10
  71 0034 4FF4FA43 	 mov r3,#32000
  72 0038 0EE0     	 b .L12
  73              	.L10:
 207:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 208:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 209:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_XTAL;
  74              	 .loc 1 209 10
  75 003a 0023     	 movs r3,#0
  76 003c 0CE0     	 b .L12
  77              	.L9:
 210:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 211:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 212:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_BYPASS;
  78              	 .loc 1 212 10
  79 003e 0023     	 movs r3,#0
  80 0040 0AE0     	 b .L12
  81              	.L8:
 213:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 214:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 215:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_4M_RC_HZ;
  82              	 .loc 1 215 10
  83 0042 084B     	 ldr r3,.L13
  84 0044 08E0     	 b .L12
  85              	.L7:
 216:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 217:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 218:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_8M_RC_HZ;
  86              	 .loc 1 218 10
  87 0046 084B     	 ldr r3,.L13+4
  88 0048 06E0     	 b .L12
  89              	.L6:
 219:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 220:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 221:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_12M_RC_HZ;
  90              	 .loc 1 221 10
  91 004a 084B     	 ldr r3,.L13+8
  92 004c 04E0     	 b .L12
  93              	.L5:
 222:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 223:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 224:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_XTAL;
  94              	 .loc 1 224 10
  95 004e 074B     	 ldr r3,.L13+8
  96 0050 02E0     	 b .L12
  97              	.L3:
 225:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 226:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 227:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_BYPASS;
  98              	 .loc 1 227 10
  99 0052 064B     	 ldr r3,.L13+8
 100 0054 00E0     	 b .L12
 101              	.L2:
 228:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 229:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 230:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 102              	 .loc 1 230 9
 103 0056 0023     	 movs r3,#0
 104              	.L12:
 231:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 105              	 .loc 1 231 1
 106 0058 1846     	 mov r0,r3
 107 005a 0C37     	 adds r7,r7,#12
 108              	.LCFI3:
 109              	 .cfi_def_cfa_offset 4
 110 005c BD46     	 mov sp,r7
 111              	.LCFI4:
 112              	 .cfi_def_cfa_register 13
 113              	 
 114 005e 80BC     	 pop {r7}
 115              	.LCFI5:
 116              	 .cfi_restore 7
 117              	 .cfi_def_cfa_offset 0
 118 0060 7047     	 bx lr
 119              	.L14:
 120 0062 00BF     	 .align 2
 121              	.L13:
 122 0064 00093D00 	 .word 4000000
 123 0068 00127A00 	 .word 8000000
 124 006c 001BB700 	 .word 12000000
 125              	 .cfi_endproc
 126              	.LFE72:
 128              	 .section .text.sysclk_get_main_hz,"ax",%progbits
 129              	 .align 1
 130              	 .syntax unified
 131              	 .thumb
 132              	 .thumb_func
 133              	 .fpu softvfp
 135              	sysclk_get_main_hz:
 136              	.LFB83:
 137              	 .file 2 ".././hal/sam3u1c/inc/sam3u/sysclk.h"
   1:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Chip-specific system clock management functions.
   5:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Copyright (c) 2011 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  44:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CHIP_SYSCLK_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define CHIP_SYSCLK_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  47:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #include <osc.h>
  48:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #include <pll.h>
  49:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  50:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
  51:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \page sysclk_quickstart Quick Start Guide for the System Clock Management service (SAM3U)
  52:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  53:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This is the quick start guide for the \ref sysclk_group "System Clock Management"
  54:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * service, with step-by-step instructions on how to configure and use the service for
  55:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * specific use cases.
  56:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  57:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \section sysclk_quickstart_usecases System Clock Management use cases
  58:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * - \ref sysclk_quickstart_basic
  59:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  60:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \section sysclk_quickstart_basic Basic usage of the System Clock Management service
  61:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This section will present a basic use case for the System Clock Management service.
  62:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This use case will configure the main system clock to 96MHz, using an internal PLL
  63:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * module to multiply the frequency of a crystal attached to the microcontroller.
  64:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  65:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_prereq Prerequisites
  66:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  - None
  67:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  68:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_setup_steps Initialization code
  69:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Add to the application initialization code:
  70:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \code
  71:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	sysclk_init();
  72:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
  73:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  74:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_setup_steps_workflow Workflow
  75:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * -# Configure the system clocks according to the settings in conf_clock.h:
  76:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \code sysclk_init(); \endcode
  77:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  78:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_example_code Example code
  79:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   Add or uncomment the following in your conf_clock.h header file, commenting out all other
  80:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   definitions of the same symbol(s):
  81:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code
  82:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_SYSCLK_SOURCE        SYSCLK_SRC_PLLACK
  83:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  84:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   // Fpll0 = (Fclk * PLL_mul) / PLL_div
  85:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_SOURCE          PLL_SRC_MAINCK_XTAL
  86:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_MUL             (96000000UL / BOARD_FREQ_MAINCK_XTAL)
  87:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_DIV             1
  88:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  89:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   // Fbus = Fsys / BUS_div
  90:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_SYSCLK_PRES          SYSCLK_PRES_1
  91:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
  92:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  93:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_example_workflow Workflow
  94:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the main system clock to use the output of the PLL module as its source:
  95:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code #define CONFIG_SYSCLK_SOURCE          SYSCLK_SRC_PLLACK \endcode
  96:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the PLL module to use the fast external fast crystal oscillator as its source:
  97:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code #define CONFIG_PLL0_SOURCE            PLL_SRC_MAINCK_XTAL \endcode
  98:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the PLL module to multiply the external fast crystal oscillator frequency up to 96
  99:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code
 100:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_PLL0_MUL             (96000000UL / BOARD_FREQ_MAINCK_XTAL)
 101:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_PLL0_DIV             1
 102:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
 103:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \note For user boards, \c BOARD_FREQ_MAINCK_XTAL should be defined in the board \c conf_board.
 104:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *         file as the frequency of the fast crystal attached to the microcontroller.
 105:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the main clock to run at the full 96MHz, disable scaling of the main system clock 
 106:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \code
 107:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_SYSCLK_PRES         SYSCLK_PRES_1
 108:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
 109:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \note Some dividers are powers of two, while others are integer division factors. Refer to th
 110:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *          formulas in the conf_clock.h template commented above each division define.
 111:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 112:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 113:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /// @cond 0
 114:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**INDENT-OFF**/
 115:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __cplusplus
 116:.././hal/sam3u1c/inc/sam3u/sysclk.h **** extern "C" {
 117:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 118:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**INDENT-ON**/
 119:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /// @endcond
 120:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 121:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 122:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \weakgroup sysclk_group
 123:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * @{
 124:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 125:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 126:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Configuration Symbols
 127:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 128:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 129:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_SYSCLK_SOURCE
 130:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Initial/static main system clock source
 131:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 132:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The main system clock will be configured to use this clock during
 133:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * initialization.
 134:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 135:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CONFIG_SYSCLK_SOURCE
 136:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_SYSCLK_SOURCE   SYSCLK_SRC_MAINCK_4M_RC
 137:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 138:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 139:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_SYSCLK_PRES
 140:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Initial CPU clock divider (mck)
 141:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 142:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The MCK will run at
 143:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \f[
 144:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   f_{MCK} = \frac{f_{sys}}{\mathrm{CONFIG\_SYSCLK\_PRES}}\,\mbox{Hz}
 145:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \f]
 146:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * after initialization.
 147:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 148:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CONFIG_SYSCLK_PRES
 149:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_SYSCLK_PRES  0
 150:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 151:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 152:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 153:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 154:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Master Clock Sources (MCK)
 155:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 156:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_RC              0       //!< Internal 32kHz RC oscillator as master source 
 157:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_XTAL            1       //!< External 32kHz crystal oscillator as master so
 158:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_BYPASS          2       //!< External 32kHz bypass oscillator as master sou
 159:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_4M_RC         3       //!< Internal 4MHz RC oscillator as master source c
 160:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_8M_RC         4       //!< Internal 8MHz RC oscillator as master source c
 161:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_12M_RC        5       //!< Internal 12MHz RC oscillator as master source 
 162:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_XTAL          6       //!< External crystal oscillator as master source c
 163:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_BYPASS        7       //!< External bypass oscillator as master source cl
 164:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_PLLACK               8       //!< Use PLLACK as master source clock
 165:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_UPLLCK               9       //!< Use UPLLCK as master source clock
 166:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 167:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 168:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Master Clock Prescalers (MCK)
 169:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 170:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_1           PMC_MCKR_PRES_CLK_1     //!< Set master clock prescaler to 1
 171:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_2           PMC_MCKR_PRES_CLK_2     //!< Set master clock prescaler to 2
 172:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_4           PMC_MCKR_PRES_CLK_4     //!< Set master clock prescaler to 4
 173:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_8           PMC_MCKR_PRES_CLK_8     //!< Set master clock prescaler to 8
 174:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_16          PMC_MCKR_PRES_CLK_16    //!< Set master clock prescaler to 16
 175:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_32          PMC_MCKR_PRES_CLK_32    //!< Set master clock prescaler to 32
 176:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_64          PMC_MCKR_PRES_CLK_64    //!< Set master clock prescaler to 64
 177:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_3           PMC_MCKR_PRES_CLK_3     //!< Set master clock prescaler to 3
 178:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 179:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 180:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 181:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_USBCLK_SOURCE
 182:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Configuration symbol for the USB generic clock source
 183:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 184:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Sets the clock source to use for the USB. The source must also be properly
 185:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configured.
 186:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 187:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Define this to one of the \c USBCLK_SRC_xxx settings. Leave it undefined if
 188:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * USB is not required.
 189:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 190:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __DOXYGEN__
 191:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_USBCLK_SOURCE
 192:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 193:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 194:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 195:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_USBCLK_DIV
 196:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Configuration symbol for the USB generic clock divider setting
 197:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 198:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Sets the clock division for the USB generic clock. If a USB clock source is
 199:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * selected with CONFIG_USBCLK_SOURCE, this configuration symbol must also be
 200:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * defined.
 201:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 202:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __DOXYGEN__
 203:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_USBCLK_DIV
 204:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 205:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 206:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 207:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \name Querying the system clock
 208:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 209:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The following functions may be used to query the current frequency of
 210:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * the system clock and the CPU and bus clocks derived from it.
 211:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * sysclk_get_main_hz() and sysclk_get_cpu_hz() can be assumed to be
 212:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * available on all platforms, although some platforms may define
 213:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * additional accessors for various chip-internal bus clocks. These are
 214:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * usually not intended to be queried directly by generic code.
 215:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 216:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 217:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 218:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 219:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 220:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 221:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \todo This function assumes that the main clock source never changes
 222:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * once it's been set up, and that PLL0 always runs at the compile-time
 223:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configured default rate. While this is probably the most common
 224:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configuration, which we want to support as a special case for
 225:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * performance reasons, we will at some point need to support more
 226:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * dynamic setups as well.
 227:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 228:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 229:.././hal/sam3u1c/inc/sam3u/sysclk.h **** extern uint32_t sysclk_initialized;
 230:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 231:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 232:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 138              	 .loc 2 232 1
 139              	 .cfi_startproc
 140              	 
 141              	 
 142 0000 80B5     	 push {r7,lr}
 143              	.LCFI6:
 144              	 .cfi_def_cfa_offset 8
 145              	 .cfi_offset 7,-8
 146              	 .cfi_offset 14,-4
 147 0002 00AF     	 add r7,sp,#0
 148              	.LCFI7:
 149              	 .cfi_def_cfa_register 7
 233:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 234:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	if (!sysclk_initialized ) {
 235:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 236:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 237:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 238:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 239:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* Config system clock setting */
 240:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_RC) {
 241:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_RC_HZ;
 242:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_XTAL) {
 243:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_XTAL_HZ;
 244:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_BYPASS) {
 245:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_BYPASS_HZ;
 246:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_4M_RC) {
 247:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 248:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_8M_RC) {
 249:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_8M_RC_HZ;
 250:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_12M_RC) {
 251:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_12M_RC_HZ;
 252:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_XTAL) {
 253:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_XTAL_HZ;
 254:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
 255:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_BYPASS_HZ;
 256:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 257:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef CONFIG_PLL0_SOURCE
 258:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
 259:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return pll_get_default_rate(0);
 150              	 .loc 2 259 10
 151 0004 0620     	 movs r0,#6
 152 0006 034B     	 ldr r3,.L17
 153 0008 9847     	 blx r3
 154              	.LVL0:
 155 000a 0346     	 mov r3,r0
 156 000c 1B01     	 lsls r3,r3,#4
 260:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 261:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 262:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 263:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef CONFIG_PLL1_SOURCE
 264:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_UPLLCK) {
 265:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return PLL_UPLL_HZ;
 266:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 267:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 268:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else {
 269:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
 270:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return 0;
 271:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 272:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 157              	 .loc 2 272 1
 158 000e 1846     	 mov r0,r3
 159 0010 80BD     	 pop {r7,pc}
 160              	.L18:
 161 0012 00BF     	 .align 2
 162              	.L17:
 163 0014 00000000 	 .word osc_get_rate
 164              	 .cfi_endproc
 165              	.LFE83:
 167              	 .section .text.sysclk_get_cpu_hz,"ax",%progbits
 168              	 .align 1
 169              	 .syntax unified
 170              	 .thumb
 171              	 .thumb_func
 172              	 .fpu softvfp
 174              	sysclk_get_cpu_hz:
 175              	.LFB84:
 273:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 274:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 275:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Return the current rate in Hz of the CPU clock
 276:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 277:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \todo This function assumes that the CPU always runs at the system
 278:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clock frequency. We want to support at least two more scenarios:
 279:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Fixed CPU/bus clock dividers (config symbols) and dynamic CPU/bus
 280:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clock dividers (which may change at run time). Ditto for all the bus
 281:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clocks.
 282:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 283:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \return Frequency of the CPU clock, in Hz.
 284:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 285:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_cpu_hz(void)
 286:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 176              	 .loc 2 286 1
 177              	 .cfi_startproc
 178              	 
 179              	 
 180 0000 80B5     	 push {r7,lr}
 181              	.LCFI8:
 182              	 .cfi_def_cfa_offset 8
 183              	 .cfi_offset 7,-8
 184              	 .cfi_offset 14,-4
 185 0002 00AF     	 add r7,sp,#0
 186              	.LCFI9:
 187              	 .cfi_def_cfa_register 7
 287:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
 288:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* prescaler, not an immediate value. */
 289:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	return sysclk_get_main_hz() /
 188              	 .loc 2 289 9
 189 0004 024B     	 ldr r3,.L21
 190 0006 9847     	 blx r3
 191              	.LVL1:
 192 0008 0346     	 mov r3,r0
 193              	 .loc 2 289 30
 194 000a 5B08     	 lsrs r3,r3,#1
 290:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
 291:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
 292:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 195              	 .loc 2 292 1
 196 000c 1846     	 mov r0,r3
 197 000e 80BD     	 pop {r7,pc}
 198              	.L22:
 199              	 .align 2
 200              	.L21:
 201 0010 00000000 	 .word sysclk_get_main_hz
 202              	 .cfi_endproc
 203              	.LFE84:
 205              	 .section .bss.gs_ul_page_buffer,"aw",%nobits
 206              	 .align 2
 209              	gs_ul_page_buffer:
 210 0000 00000000 	 .space 256
 210      00000000 
 210      00000000 
 210      00000000 
 210      00000000 
 211              	 .section .text.translate_address,"ax",%progbits
 212              	 .align 1
 213              	 .syntax unified
 214              	 .thumb
 215              	 .thumb_func
 216              	 .fpu softvfp
 218              	translate_address:
 219              	.LFB89:
 220              	 .file 3 ".././hal/sam3u1c/flash_efc.c"
   1:.././hal/sam3u1c/flash_efc.c **** /**
   2:.././hal/sam3u1c/flash_efc.c ****  * \file
   3:.././hal/sam3u1c/flash_efc.c ****  *
   4:.././hal/sam3u1c/flash_efc.c ****  * \brief Embedded Flash service for SAM.
   5:.././hal/sam3u1c/flash_efc.c ****  *
   6:.././hal/sam3u1c/flash_efc.c ****  * Copyright (c) 2011-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/flash_efc.c ****  *
   8:.././hal/sam3u1c/flash_efc.c ****  * \asf_license_start
   9:.././hal/sam3u1c/flash_efc.c ****  *
  10:.././hal/sam3u1c/flash_efc.c ****  * \page License
  11:.././hal/sam3u1c/flash_efc.c ****  *
  12:.././hal/sam3u1c/flash_efc.c ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/flash_efc.c ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/flash_efc.c ****  *
  15:.././hal/sam3u1c/flash_efc.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/flash_efc.c ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/flash_efc.c ****  *
  18:.././hal/sam3u1c/flash_efc.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/flash_efc.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/flash_efc.c ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/flash_efc.c ****  *
  22:.././hal/sam3u1c/flash_efc.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/flash_efc.c ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/flash_efc.c ****  *
  25:.././hal/sam3u1c/flash_efc.c ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/flash_efc.c ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/flash_efc.c ****  *
  28:.././hal/sam3u1c/flash_efc.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/flash_efc.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/flash_efc.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/flash_efc.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/flash_efc.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/flash_efc.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/flash_efc.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/flash_efc.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/flash_efc.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/flash_efc.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/flash_efc.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/flash_efc.c ****  *
  40:.././hal/sam3u1c/flash_efc.c ****  * \asf_license_stop
  41:.././hal/sam3u1c/flash_efc.c ****  *
  42:.././hal/sam3u1c/flash_efc.c ****  */
  43:.././hal/sam3u1c/flash_efc.c **** 
  44:.././hal/sam3u1c/flash_efc.c **** #include <string.h>
  45:.././hal/sam3u1c/flash_efc.c **** #include <assert.h>
  46:.././hal/sam3u1c/flash_efc.c **** #include "flash_efc.h"
  47:.././hal/sam3u1c/flash_efc.c **** #include "sysclk.h"
  48:.././hal/sam3u1c/flash_efc.c **** 
  49:.././hal/sam3u1c/flash_efc.c **** /// @cond 0
  50:.././hal/sam3u1c/flash_efc.c **** /**INDENT-OFF**/
  51:.././hal/sam3u1c/flash_efc.c **** #ifdef __cplusplus
  52:.././hal/sam3u1c/flash_efc.c **** extern "C" {
  53:.././hal/sam3u1c/flash_efc.c **** #endif
  54:.././hal/sam3u1c/flash_efc.c **** /**INDENT-ON**/
  55:.././hal/sam3u1c/flash_efc.c **** /// @endcond
  56:.././hal/sam3u1c/flash_efc.c **** 
  57:.././hal/sam3u1c/flash_efc.c **** /**
  58:.././hal/sam3u1c/flash_efc.c ****  * \defgroup sam_services_flash_efc_group Embedded Flash Service
  59:.././hal/sam3u1c/flash_efc.c ****  *
  60:.././hal/sam3u1c/flash_efc.c ****  * The Embedded Flash service provides functions for internal flash operations.
  61:.././hal/sam3u1c/flash_efc.c ****  *
  62:.././hal/sam3u1c/flash_efc.c ****  * @{
  63:.././hal/sam3u1c/flash_efc.c ****  */
  64:.././hal/sam3u1c/flash_efc.c **** 
  65:.././hal/sam3u1c/flash_efc.c **** #if (SAM4E || SAM4N || SAM4S || SAM4C || SAMG || SAM4CP || SAM4CM)
  66:.././hal/sam3u1c/flash_efc.c **** /* User signature size */
  67:.././hal/sam3u1c/flash_efc.c **** # define FLASH_USER_SIG_SIZE   (512)
  68:.././hal/sam3u1c/flash_efc.c **** #endif
  69:.././hal/sam3u1c/flash_efc.c **** 
  70:.././hal/sam3u1c/flash_efc.c **** #if SAM4S
  71:.././hal/sam3u1c/flash_efc.c **** /* Internal Flash Controller 0. */
  72:.././hal/sam3u1c/flash_efc.c **** # define EFC     EFC0
  73:.././hal/sam3u1c/flash_efc.c **** #if (SAM4SD16 || SAM4SD32)
  74:.././hal/sam3u1c/flash_efc.c **** /* The max GPNVM number. */
  75:.././hal/sam3u1c/flash_efc.c **** # define GPNVM_NUM_MAX        3
  76:.././hal/sam3u1c/flash_efc.c **** #else
  77:.././hal/sam3u1c/flash_efc.c **** /* The max GPNVM number. */
  78:.././hal/sam3u1c/flash_efc.c **** # define GPNVM_NUM_MAX        2
  79:.././hal/sam3u1c/flash_efc.c **** #endif
  80:.././hal/sam3u1c/flash_efc.c **** /* Internal Flash 0 base address. */
  81:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_ADDR     IFLASH0_ADDR
  82:.././hal/sam3u1c/flash_efc.c **** /* Internal flash page size. */
  83:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_PAGE_SIZE     IFLASH0_PAGE_SIZE
  84:.././hal/sam3u1c/flash_efc.c **** /* Internal flash lock region size. */
  85:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_LOCK_REGION_SIZE     IFLASH0_LOCK_REGION_SIZE
  86:.././hal/sam3u1c/flash_efc.c **** #elif (SAM3XA || SAM3U4)
  87:.././hal/sam3u1c/flash_efc.c **** /* Internal Flash Controller 0. */
  88:.././hal/sam3u1c/flash_efc.c **** # define EFC     EFC0
  89:.././hal/sam3u1c/flash_efc.c **** /* The max GPNVM number. */
  90:.././hal/sam3u1c/flash_efc.c **** # define GPNVM_NUM_MAX        3
  91:.././hal/sam3u1c/flash_efc.c **** /* Internal Flash 0 base address. */
  92:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_ADDR     IFLASH0_ADDR
  93:.././hal/sam3u1c/flash_efc.c **** /* Internal flash page size. */
  94:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_PAGE_SIZE     IFLASH0_PAGE_SIZE
  95:.././hal/sam3u1c/flash_efc.c **** /* Internal flash lock region size. */
  96:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_LOCK_REGION_SIZE     IFLASH0_LOCK_REGION_SIZE
  97:.././hal/sam3u1c/flash_efc.c **** #elif (SAM3U)
  98:.././hal/sam3u1c/flash_efc.c **** /* There is no EFC1 for SAM3U except for SAM3U4 */
  99:.././hal/sam3u1c/flash_efc.c **** # undef EFC1
 100:.././hal/sam3u1c/flash_efc.c **** /* Internal Flash Controller 0. */
 101:.././hal/sam3u1c/flash_efc.c **** # define EFC     EFC0
 102:.././hal/sam3u1c/flash_efc.c **** /* The max GPNVM number. */
 103:.././hal/sam3u1c/flash_efc.c **** # define GPNVM_NUM_MAX        2
 104:.././hal/sam3u1c/flash_efc.c **** /* Internal Flash 0 base address. */
 105:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_ADDR     IFLASH0_ADDR
 106:.././hal/sam3u1c/flash_efc.c **** /* Internal flash page size. */
 107:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_PAGE_SIZE     IFLASH0_PAGE_SIZE
 108:.././hal/sam3u1c/flash_efc.c **** /* Internal flash lock region size. */
 109:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_LOCK_REGION_SIZE     IFLASH0_LOCK_REGION_SIZE
 110:.././hal/sam3u1c/flash_efc.c **** #elif (SAM3SD8)
 111:.././hal/sam3u1c/flash_efc.c **** /* The max GPNVM number. */
 112:.././hal/sam3u1c/flash_efc.c **** # define GPNVM_NUM_MAX        3
 113:.././hal/sam3u1c/flash_efc.c **** /* Internal flash page size. */
 114:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_PAGE_SIZE     IFLASH0_PAGE_SIZE
 115:.././hal/sam3u1c/flash_efc.c **** /* Internal flash lock region size. */
 116:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_LOCK_REGION_SIZE     IFLASH0_LOCK_REGION_SIZE
 117:.././hal/sam3u1c/flash_efc.c **** #elif (SAM4C32 || SAM4CMP32 || SAM4CMS32)
 118:.././hal/sam3u1c/flash_efc.c **** /* The max GPNVM number SAM4C(M)32. */
 119:.././hal/sam3u1c/flash_efc.c **** # define GPNVM_NUM_MAX        3
 120:.././hal/sam3u1c/flash_efc.c **** #else
 121:.././hal/sam3u1c/flash_efc.c **** /* The max GPNVM number. */
 122:.././hal/sam3u1c/flash_efc.c **** # define GPNVM_NUM_MAX        2
 123:.././hal/sam3u1c/flash_efc.c **** #endif
 124:.././hal/sam3u1c/flash_efc.c **** 
 125:.././hal/sam3u1c/flash_efc.c **** #if (SAM4C || SAM4CP || SAM4CM)
 126:.././hal/sam3u1c/flash_efc.c **** #if (SAM4C32 || SAM4CMP32 || SAM4CMS32)
 127:.././hal/sam3u1c/flash_efc.c **** # define EFC     EFC0
 128:.././hal/sam3u1c/flash_efc.c **** /* Internal Flash 0 base address. */
 129:.././hal/sam3u1c/flash_efc.c **** # define IFLASH0_ADDR    IFLASH0_CNC_ADDR
 130:.././hal/sam3u1c/flash_efc.c **** # define IFLASH1_ADDR    IFLASH1_CNC_ADDR
 131:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_ADDR     IFLASH0_ADDR
 132:.././hal/sam3u1c/flash_efc.c **** /* Internal flash page size. */
 133:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_PAGE_SIZE     IFLASH0_PAGE_SIZE
 134:.././hal/sam3u1c/flash_efc.c **** /* Internal flash lock region size. */
 135:.././hal/sam3u1c/flash_efc.c **** # define IFLASH_LOCK_REGION_SIZE     IFLASH0_LOCK_REGION_SIZE
 136:.././hal/sam3u1c/flash_efc.c **** #else
 137:.././hal/sam3u1c/flash_efc.c **** #define IFLASH_ADDR  IFLASH_CNC_ADDR
 138:.././hal/sam3u1c/flash_efc.c **** #endif
 139:.././hal/sam3u1c/flash_efc.c **** #endif
 140:.././hal/sam3u1c/flash_efc.c **** 
 141:.././hal/sam3u1c/flash_efc.c **** /* Flash page buffer for alignment */
 142:.././hal/sam3u1c/flash_efc.c **** static uint32_t gs_ul_page_buffer[IFLASH_PAGE_SIZE / sizeof(uint32_t)];
 143:.././hal/sam3u1c/flash_efc.c **** 
 144:.././hal/sam3u1c/flash_efc.c **** /**
 145:.././hal/sam3u1c/flash_efc.c ****  * \brief Translate the given flash address to page and offset values.
 146:.././hal/sam3u1c/flash_efc.c ****  * \note pus_page and pus_offset must not be null in order to store the
 147:.././hal/sam3u1c/flash_efc.c ****  * corresponding values.
 148:.././hal/sam3u1c/flash_efc.c ****  *
 149:.././hal/sam3u1c/flash_efc.c ****  * \param pp_efc Pointer to an EFC pointer.
 150:.././hal/sam3u1c/flash_efc.c ****  * \param ul_addr Address to translate.
 151:.././hal/sam3u1c/flash_efc.c ****  * \param pus_page The first page accessed.
 152:.././hal/sam3u1c/flash_efc.c ****  * \param pus_offset Byte offset in the first page.
 153:.././hal/sam3u1c/flash_efc.c ****  */
 154:.././hal/sam3u1c/flash_efc.c **** static void translate_address(Efc **pp_efc, uint32_t ul_addr,
 155:.././hal/sam3u1c/flash_efc.c **** 		uint16_t *pus_page, uint16_t *pus_offset)
 156:.././hal/sam3u1c/flash_efc.c **** {
 221              	 .loc 3 156 1
 222              	 .cfi_startproc
 223              	 
 224              	 
 225              	 
 226 0000 80B4     	 push {r7}
 227              	.LCFI10:
 228              	 .cfi_def_cfa_offset 4
 229              	 .cfi_offset 7,-4
 230 0002 87B0     	 sub sp,sp,#28
 231              	.LCFI11:
 232              	 .cfi_def_cfa_offset 32
 233 0004 00AF     	 add r7,sp,#0
 234              	.LCFI12:
 235              	 .cfi_def_cfa_register 7
 236 0006 F860     	 str r0,[r7,#12]
 237 0008 B960     	 str r1,[r7,#8]
 238 000a 7A60     	 str r2,[r7,#4]
 239 000c 3B60     	 str r3,[r7]
 157:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 158:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_page;
 159:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_offset;
 160:.././hal/sam3u1c/flash_efc.c **** 
 161:.././hal/sam3u1c/flash_efc.c **** #if (SAM3XA || SAM3U4)
 162:.././hal/sam3u1c/flash_efc.c **** 	if (ul_addr >= IFLASH1_ADDR) {
 163:.././hal/sam3u1c/flash_efc.c **** 		p_efc = EFC1;
 164:.././hal/sam3u1c/flash_efc.c **** 		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
 165:.././hal/sam3u1c/flash_efc.c **** 		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
 166:.././hal/sam3u1c/flash_efc.c **** 	} else {
 167:.././hal/sam3u1c/flash_efc.c **** 		p_efc = EFC0;
 168:.././hal/sam3u1c/flash_efc.c **** 		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
 169:.././hal/sam3u1c/flash_efc.c **** 		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
 170:.././hal/sam3u1c/flash_efc.c **** 	}
 171:.././hal/sam3u1c/flash_efc.c **** #elif (SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMP32 || SAM4CMS32)
 172:.././hal/sam3u1c/flash_efc.c **** 	uint32_t uc_gpnvm2;
 173:.././hal/sam3u1c/flash_efc.c **** 	uc_gpnvm2 = flash_is_gpnvm_set(2);
 174:.././hal/sam3u1c/flash_efc.c **** 	if (ul_addr >= IFLASH1_ADDR) {
 175:.././hal/sam3u1c/flash_efc.c **** 		if(uc_gpnvm2 == FLASH_RC_YES) {
 176:.././hal/sam3u1c/flash_efc.c **** 			p_efc = EFC0;
 177:.././hal/sam3u1c/flash_efc.c **** 		} else {
 178:.././hal/sam3u1c/flash_efc.c **** 			p_efc = EFC1;
 179:.././hal/sam3u1c/flash_efc.c **** 		}
 180:.././hal/sam3u1c/flash_efc.c **** 		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
 181:.././hal/sam3u1c/flash_efc.c **** 		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
 182:.././hal/sam3u1c/flash_efc.c **** 	} else {
 183:.././hal/sam3u1c/flash_efc.c **** 		if(uc_gpnvm2 == FLASH_RC_YES) {
 184:.././hal/sam3u1c/flash_efc.c **** 			p_efc = EFC1;
 185:.././hal/sam3u1c/flash_efc.c **** 		} else {
 186:.././hal/sam3u1c/flash_efc.c **** 			p_efc = EFC0;
 187:.././hal/sam3u1c/flash_efc.c **** 		}
 188:.././hal/sam3u1c/flash_efc.c **** 		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
 189:.././hal/sam3u1c/flash_efc.c **** 		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
 190:.././hal/sam3u1c/flash_efc.c **** 	}
 191:.././hal/sam3u1c/flash_efc.c **** #elif (SAM3SD8)
 192:.././hal/sam3u1c/flash_efc.c **** 	p_efc = EFC;
 193:.././hal/sam3u1c/flash_efc.c **** 	us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
 194:.././hal/sam3u1c/flash_efc.c **** 	us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
 195:.././hal/sam3u1c/flash_efc.c **** #else
 196:.././hal/sam3u1c/flash_efc.c **** 	Assert(ul_addr >= IFLASH_ADDR);
 197:.././hal/sam3u1c/flash_efc.c **** 	Assert(ul_addr <= (IFLASH_ADDR + IFLASH_SIZE));
 198:.././hal/sam3u1c/flash_efc.c **** 
 199:.././hal/sam3u1c/flash_efc.c **** 	p_efc = EFC;
 240              	 .loc 3 199 8
 241 000e 114B     	 ldr r3,.L28
 242 0010 7B61     	 str r3,[r7,#20]
 200:.././hal/sam3u1c/flash_efc.c **** 	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
 243              	 .loc 3 200 21
 244 0012 BB68     	 ldr r3,[r7,#8]
 245 0014 A3F50023 	 sub r3,r3,#524288
 246              	 .loc 3 200 36
 247 0018 1B0A     	 lsrs r3,r3,#8
 248              	 .loc 3 200 10
 249 001a 7B82     	 strh r3,[r7,#18]
 201:.././hal/sam3u1c/flash_efc.c **** 	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
 250              	 .loc 3 201 38
 251 001c BB68     	 ldr r3,[r7,#8]
 252 001e 9BB2     	 uxth r3,r3
 253              	 .loc 3 201 12
 254 0020 DBB2     	 uxtb r3,r3
 255 0022 3B82     	 strh r3,[r7,#16]
 202:.././hal/sam3u1c/flash_efc.c **** #endif
 203:.././hal/sam3u1c/flash_efc.c **** 
 204:.././hal/sam3u1c/flash_efc.c **** 	/* Store values */
 205:.././hal/sam3u1c/flash_efc.c **** 	if (pp_efc) {
 256              	 .loc 3 205 5
 257 0024 FB68     	 ldr r3,[r7,#12]
 258 0026 002B     	 cmp r3,#0
 259 0028 02D0     	 beq .L24
 206:.././hal/sam3u1c/flash_efc.c **** 		*pp_efc = p_efc;
 260              	 .loc 3 206 11
 261 002a FB68     	 ldr r3,[r7,#12]
 262 002c 7A69     	 ldr r2,[r7,#20]
 263 002e 1A60     	 str r2,[r3]
 264              	.L24:
 207:.././hal/sam3u1c/flash_efc.c **** 	}
 208:.././hal/sam3u1c/flash_efc.c **** 
 209:.././hal/sam3u1c/flash_efc.c **** 	if (pus_page) {
 265              	 .loc 3 209 5
 266 0030 7B68     	 ldr r3,[r7,#4]
 267 0032 002B     	 cmp r3,#0
 268 0034 02D0     	 beq .L25
 210:.././hal/sam3u1c/flash_efc.c **** 		*pus_page = us_page;
 269              	 .loc 3 210 13
 270 0036 7B68     	 ldr r3,[r7,#4]
 271 0038 7A8A     	 ldrh r2,[r7,#18]
 272 003a 1A80     	 strh r2,[r3]
 273              	.L25:
 211:.././hal/sam3u1c/flash_efc.c **** 	}
 212:.././hal/sam3u1c/flash_efc.c **** 
 213:.././hal/sam3u1c/flash_efc.c **** 	if (pus_offset) {
 274              	 .loc 3 213 5
 275 003c 3B68     	 ldr r3,[r7]
 276 003e 002B     	 cmp r3,#0
 277 0040 02D0     	 beq .L27
 214:.././hal/sam3u1c/flash_efc.c **** 		*pus_offset = us_offset;
 278              	 .loc 3 214 15
 279 0042 3B68     	 ldr r3,[r7]
 280 0044 3A8A     	 ldrh r2,[r7,#16]
 281 0046 1A80     	 strh r2,[r3]
 282              	.L27:
 215:.././hal/sam3u1c/flash_efc.c **** 	}
 216:.././hal/sam3u1c/flash_efc.c **** }
 283              	 .loc 3 216 1
 284 0048 00BF     	 nop
 285 004a 1C37     	 adds r7,r7,#28
 286              	.LCFI13:
 287              	 .cfi_def_cfa_offset 4
 288 004c BD46     	 mov sp,r7
 289              	.LCFI14:
 290              	 .cfi_def_cfa_register 13
 291              	 
 292 004e 80BC     	 pop {r7}
 293              	.LCFI15:
 294              	 .cfi_restore 7
 295              	 .cfi_def_cfa_offset 0
 296 0050 7047     	 bx lr
 297              	.L29:
 298 0052 00BF     	 .align 2
 299              	.L28:
 300 0054 00080E40 	 .word 1074661376
 301              	 .cfi_endproc
 302              	.LFE89:
 304              	 .section .text.compute_address,"ax",%progbits
 305              	 .align 1
 306              	 .syntax unified
 307              	 .thumb
 308              	 .thumb_func
 309              	 .fpu softvfp
 311              	compute_address:
 312              	.LFB90:
 217:.././hal/sam3u1c/flash_efc.c **** 
 218:.././hal/sam3u1c/flash_efc.c **** /**
 219:.././hal/sam3u1c/flash_efc.c ****  * \brief Compute the address of a flash by the given page and offset.
 220:.././hal/sam3u1c/flash_efc.c ****  *
 221:.././hal/sam3u1c/flash_efc.c ****  * \param p_efc Pointer to an EFC instance.
 222:.././hal/sam3u1c/flash_efc.c ****  * \param us_page Page number.
 223:.././hal/sam3u1c/flash_efc.c ****  * \param us_offset Byte offset inside page.
 224:.././hal/sam3u1c/flash_efc.c ****  * \param pul_addr Computed address (optional).
 225:.././hal/sam3u1c/flash_efc.c ****  */
 226:.././hal/sam3u1c/flash_efc.c **** static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
 227:.././hal/sam3u1c/flash_efc.c **** 		uint32_t *pul_addr)
 228:.././hal/sam3u1c/flash_efc.c **** {
 313              	 .loc 3 228 1
 314              	 .cfi_startproc
 315              	 
 316              	 
 317              	 
 318 0000 80B4     	 push {r7}
 319              	.LCFI16:
 320              	 .cfi_def_cfa_offset 4
 321              	 .cfi_offset 7,-4
 322 0002 87B0     	 sub sp,sp,#28
 323              	.LCFI17:
 324              	 .cfi_def_cfa_offset 32
 325 0004 00AF     	 add r7,sp,#0
 326              	.LCFI18:
 327              	 .cfi_def_cfa_register 7
 328 0006 F860     	 str r0,[r7,#12]
 329 0008 7B60     	 str r3,[r7,#4]
 330 000a 0B46     	 mov r3,r1
 331 000c 7B81     	 strh r3,[r7,#10]
 332 000e 1346     	 mov r3,r2
 333 0010 3B81     	 strh r3,[r7,#8]
 229:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_addr;
 230:.././hal/sam3u1c/flash_efc.c **** 
 231:.././hal/sam3u1c/flash_efc.c **** /* Dual bank flash */
 232:.././hal/sam3u1c/flash_efc.c **** #ifdef EFC1
 233:.././hal/sam3u1c/flash_efc.c **** 	/* Compute address */
 234:.././hal/sam3u1c/flash_efc.c **** #if (SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMP32 || SAM4CMS32)
 235:.././hal/sam3u1c/flash_efc.c **** 	uint32_t uc_gpnvm2;
 236:.././hal/sam3u1c/flash_efc.c **** 	uc_gpnvm2 = flash_is_gpnvm_set(2);
 237:.././hal/sam3u1c/flash_efc.c **** 	if (p_efc == EFC0) {
 238:.././hal/sam3u1c/flash_efc.c **** 		if(uc_gpnvm2 == FLASH_RC_YES) {
 239:.././hal/sam3u1c/flash_efc.c **** 			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
 240:.././hal/sam3u1c/flash_efc.c **** 		} else {
 241:.././hal/sam3u1c/flash_efc.c **** 			ul_addr = IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
 242:.././hal/sam3u1c/flash_efc.c **** 		}
 243:.././hal/sam3u1c/flash_efc.c **** 	} else {
 244:.././hal/sam3u1c/flash_efc.c **** 		if(uc_gpnvm2 == FLASH_RC_YES) {
 245:.././hal/sam3u1c/flash_efc.c **** 			ul_addr = IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
 246:.././hal/sam3u1c/flash_efc.c **** 		} else {
 247:.././hal/sam3u1c/flash_efc.c **** 			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
 248:.././hal/sam3u1c/flash_efc.c **** 		}
 249:.././hal/sam3u1c/flash_efc.c **** 	}
 250:.././hal/sam3u1c/flash_efc.c **** #else
 251:.././hal/sam3u1c/flash_efc.c **** 	ul_addr = (p_efc == EFC0) ?
 252:.././hal/sam3u1c/flash_efc.c **** 			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
 253:.././hal/sam3u1c/flash_efc.c **** 			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
 254:.././hal/sam3u1c/flash_efc.c **** #endif
 255:.././hal/sam3u1c/flash_efc.c **** /* One bank flash */
 256:.././hal/sam3u1c/flash_efc.c **** #else
 257:.././hal/sam3u1c/flash_efc.c **** 	/* avoid Cppcheck Warning */
 258:.././hal/sam3u1c/flash_efc.c **** 	UNUSED(p_efc);
 259:.././hal/sam3u1c/flash_efc.c **** 	/* Compute address */
 260:.././hal/sam3u1c/flash_efc.c **** 	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
 334              	 .loc 3 260 24
 335 0012 7B89     	 ldrh r3,[r7,#10]
 336 0014 03F50063 	 add r3,r3,#2048
 337 0018 1A02     	 lsls r2,r3,#8
 338              	 .loc 3 260 53
 339 001a 3B89     	 ldrh r3,[r7,#8]
 340              	 .loc 3 260 10
 341 001c 1344     	 add r3,r3,r2
 342 001e 7B61     	 str r3,[r7,#20]
 261:.././hal/sam3u1c/flash_efc.c **** #endif
 262:.././hal/sam3u1c/flash_efc.c **** 
 263:.././hal/sam3u1c/flash_efc.c **** 	/* Store result */
 264:.././hal/sam3u1c/flash_efc.c **** 	if (pul_addr != NULL) {
 343              	 .loc 3 264 5
 344 0020 7B68     	 ldr r3,[r7,#4]
 345 0022 002B     	 cmp r3,#0
 346 0024 02D0     	 beq .L32
 265:.././hal/sam3u1c/flash_efc.c **** 		*pul_addr = ul_addr;
 347              	 .loc 3 265 13
 348 0026 7B68     	 ldr r3,[r7,#4]
 349 0028 7A69     	 ldr r2,[r7,#20]
 350 002a 1A60     	 str r2,[r3]
 351              	.L32:
 266:.././hal/sam3u1c/flash_efc.c **** 	}
 267:.././hal/sam3u1c/flash_efc.c **** }
 352              	 .loc 3 267 1
 353 002c 00BF     	 nop
 354 002e 1C37     	 adds r7,r7,#28
 355              	.LCFI19:
 356              	 .cfi_def_cfa_offset 4
 357 0030 BD46     	 mov sp,r7
 358              	.LCFI20:
 359              	 .cfi_def_cfa_register 13
 360              	 
 361 0032 80BC     	 pop {r7}
 362              	.LCFI21:
 363              	 .cfi_restore 7
 364              	 .cfi_def_cfa_offset 0
 365 0034 7047     	 bx lr
 366              	 .cfi_endproc
 367              	.LFE90:
 369              	 .section .text.compute_lock_range,"ax",%progbits
 370              	 .align 1
 371              	 .syntax unified
 372              	 .thumb
 373              	 .thumb_func
 374              	 .fpu softvfp
 376              	compute_lock_range:
 377              	.LFB91:
 268:.././hal/sam3u1c/flash_efc.c **** 
 269:.././hal/sam3u1c/flash_efc.c **** /**
 270:.././hal/sam3u1c/flash_efc.c ****  * \brief Compute the lock range associated with the given address range.
 271:.././hal/sam3u1c/flash_efc.c ****  *
 272:.././hal/sam3u1c/flash_efc.c ****  * \param ul_start Start address of lock range.
 273:.././hal/sam3u1c/flash_efc.c ****  * \param ul_end End address of lock range.
 274:.././hal/sam3u1c/flash_efc.c ****  * \param pul_actual_start Actual start address of lock range.
 275:.././hal/sam3u1c/flash_efc.c ****  * \param pul_actual_end Actual end address of lock range.
 276:.././hal/sam3u1c/flash_efc.c ****  */
 277:.././hal/sam3u1c/flash_efc.c **** static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
 278:.././hal/sam3u1c/flash_efc.c **** 		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
 279:.././hal/sam3u1c/flash_efc.c **** {
 378              	 .loc 3 279 1
 379              	 .cfi_startproc
 380              	 
 381              	 
 382              	 
 383 0000 80B4     	 push {r7}
 384              	.LCFI22:
 385              	 .cfi_def_cfa_offset 4
 386              	 .cfi_offset 7,-4
 387 0002 87B0     	 sub sp,sp,#28
 388              	.LCFI23:
 389              	 .cfi_def_cfa_offset 32
 390 0004 00AF     	 add r7,sp,#0
 391              	.LCFI24:
 392              	 .cfi_def_cfa_register 7
 393 0006 F860     	 str r0,[r7,#12]
 394 0008 B960     	 str r1,[r7,#8]
 395 000a 7A60     	 str r2,[r7,#4]
 396 000c 3B60     	 str r3,[r7]
 280:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_actual_start, ul_actual_end;
 281:.././hal/sam3u1c/flash_efc.c **** 
 282:.././hal/sam3u1c/flash_efc.c **** 	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
 397              	 .loc 3 282 18
 398 000e FB68     	 ldr r3,[r7,#12]
 399 0010 23F4FF53 	 bic r3,r3,#8160
 400 0014 23F01F03 	 bic r3,r3,#31
 401 0018 7B61     	 str r3,[r7,#20]
 283:.././hal/sam3u1c/flash_efc.c **** 	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
 402              	 .loc 3 283 25
 403 001a BB68     	 ldr r3,[r7,#8]
 404 001c 23F4FF53 	 bic r3,r3,#8160
 405 0020 23F01F03 	 bic r3,r3,#31
 406              	 .loc 3 283 16
 407 0024 03F5FF53 	 add r3,r3,#8160
 408 0028 1F33     	 adds r3,r3,#31
 409 002a 3B61     	 str r3,[r7,#16]
 284:.././hal/sam3u1c/flash_efc.c **** 			IFLASH_LOCK_REGION_SIZE - 1;
 285:.././hal/sam3u1c/flash_efc.c **** 
 286:.././hal/sam3u1c/flash_efc.c **** 	if (pul_actual_start) {
 410              	 .loc 3 286 5
 411 002c 7B68     	 ldr r3,[r7,#4]
 412 002e 002B     	 cmp r3,#0
 413 0030 02D0     	 beq .L34
 287:.././hal/sam3u1c/flash_efc.c **** 		*pul_actual_start = ul_actual_start;
 414              	 .loc 3 287 21
 415 0032 7B68     	 ldr r3,[r7,#4]
 416 0034 7A69     	 ldr r2,[r7,#20]
 417 0036 1A60     	 str r2,[r3]
 418              	.L34:
 288:.././hal/sam3u1c/flash_efc.c **** 	}
 289:.././hal/sam3u1c/flash_efc.c **** 
 290:.././hal/sam3u1c/flash_efc.c **** 	if (pul_actual_end) {
 419              	 .loc 3 290 5
 420 0038 3B68     	 ldr r3,[r7]
 421 003a 002B     	 cmp r3,#0
 422 003c 02D0     	 beq .L36
 291:.././hal/sam3u1c/flash_efc.c **** 		*pul_actual_end = ul_actual_end;
 423              	 .loc 3 291 19
 424 003e 3B68     	 ldr r3,[r7]
 425 0040 3A69     	 ldr r2,[r7,#16]
 426 0042 1A60     	 str r2,[r3]
 427              	.L36:
 292:.././hal/sam3u1c/flash_efc.c **** 	}
 293:.././hal/sam3u1c/flash_efc.c **** }
 428              	 .loc 3 293 1
 429 0044 00BF     	 nop
 430 0046 1C37     	 adds r7,r7,#28
 431              	.LCFI25:
 432              	 .cfi_def_cfa_offset 4
 433 0048 BD46     	 mov sp,r7
 434              	.LCFI26:
 435              	 .cfi_def_cfa_register 13
 436              	 
 437 004a 80BC     	 pop {r7}
 438              	.LCFI27:
 439              	 .cfi_restore 7
 440              	 .cfi_def_cfa_offset 0
 441 004c 7047     	 bx lr
 442              	 .cfi_endproc
 443              	.LFE91:
 445              	 .section .text.flash_init,"ax",%progbits
 446              	 .align 1
 447              	 .global flash_init
 448              	 .syntax unified
 449              	 .thumb
 450              	 .thumb_func
 451              	 .fpu softvfp
 453              	flash_init:
 454              	.LFB92:
 294:.././hal/sam3u1c/flash_efc.c **** 
 295:.././hal/sam3u1c/flash_efc.c **** /**
 296:.././hal/sam3u1c/flash_efc.c ****  * \brief Initialize the flash service.
 297:.././hal/sam3u1c/flash_efc.c ****  *
 298:.././hal/sam3u1c/flash_efc.c ****  * \param ul_mode FLASH_ACCESS_MODE_128 or FLASH_ACCESS_MODE_64.
 299:.././hal/sam3u1c/flash_efc.c ****  * \param ul_fws The number of wait states in cycle (no shift).
 300:.././hal/sam3u1c/flash_efc.c ****  *
 301:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful; otherwise returns an error code.
 302:.././hal/sam3u1c/flash_efc.c ****  */
 303:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
 304:.././hal/sam3u1c/flash_efc.c **** {
 455              	 .loc 3 304 1
 456              	 .cfi_startproc
 457              	 
 458              	 
 459 0000 80B5     	 push {r7,lr}
 460              	.LCFI28:
 461              	 .cfi_def_cfa_offset 8
 462              	 .cfi_offset 7,-8
 463              	 .cfi_offset 14,-4
 464 0002 82B0     	 sub sp,sp,#8
 465              	.LCFI29:
 466              	 .cfi_def_cfa_offset 16
 467 0004 00AF     	 add r7,sp,#0
 468              	.LCFI30:
 469              	 .cfi_def_cfa_register 7
 470 0006 7860     	 str r0,[r7,#4]
 471 0008 3960     	 str r1,[r7]
 305:.././hal/sam3u1c/flash_efc.c **** 	efc_init(EFC, ul_mode, ul_fws);
 472              	 .loc 3 305 2
 473 000a 3A68     	 ldr r2,[r7]
 474 000c 7968     	 ldr r1,[r7,#4]
 475 000e 0448     	 ldr r0,.L39
 476 0010 044B     	 ldr r3,.L39+4
 477 0012 9847     	 blx r3
 478              	.LVL2:
 306:.././hal/sam3u1c/flash_efc.c **** 
 307:.././hal/sam3u1c/flash_efc.c **** #ifdef EFC1
 308:.././hal/sam3u1c/flash_efc.c **** 	efc_init(EFC1, ul_mode, ul_fws);
 309:.././hal/sam3u1c/flash_efc.c **** #endif
 310:.././hal/sam3u1c/flash_efc.c **** 
 311:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_OK;
 479              	 .loc 3 311 9
 480 0014 0023     	 movs r3,#0
 312:.././hal/sam3u1c/flash_efc.c **** }
 481              	 .loc 3 312 1
 482 0016 1846     	 mov r0,r3
 483 0018 0837     	 adds r7,r7,#8
 484              	.LCFI31:
 485              	 .cfi_def_cfa_offset 8
 486 001a BD46     	 mov sp,r7
 487              	.LCFI32:
 488              	 .cfi_def_cfa_register 13
 489              	 
 490 001c 80BD     	 pop {r7,pc}
 491              	.L40:
 492 001e 00BF     	 .align 2
 493              	.L39:
 494 0020 00080E40 	 .word 1074661376
 495 0024 00000000 	 .word efc_init
 496              	 .cfi_endproc
 497              	.LFE92:
 499              	 .section .text.flash_set_wait_state,"ax",%progbits
 500              	 .align 1
 501              	 .global flash_set_wait_state
 502              	 .syntax unified
 503              	 .thumb
 504              	 .thumb_func
 505              	 .fpu softvfp
 507              	flash_set_wait_state:
 508              	.LFB93:
 313:.././hal/sam3u1c/flash_efc.c **** 
 314:.././hal/sam3u1c/flash_efc.c **** /**
 315:.././hal/sam3u1c/flash_efc.c ****  * \brief Set flash wait state.
 316:.././hal/sam3u1c/flash_efc.c ****  *
 317:.././hal/sam3u1c/flash_efc.c ****  * \param ul_address Flash bank start address.
 318:.././hal/sam3u1c/flash_efc.c ****  * \param ul_fws The number of wait states in cycle (no shift).
 319:.././hal/sam3u1c/flash_efc.c ****  *
 320:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful; otherwise returns an error code.
 321:.././hal/sam3u1c/flash_efc.c ****  */
 322:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_set_wait_state(uint32_t ul_address, uint32_t ul_fws)
 323:.././hal/sam3u1c/flash_efc.c **** {
 509              	 .loc 3 323 1
 510              	 .cfi_startproc
 511              	 
 512              	 
 513 0000 90B5     	 push {r4,r7,lr}
 514              	.LCFI33:
 515              	 .cfi_def_cfa_offset 12
 516              	 .cfi_offset 4,-12
 517              	 .cfi_offset 7,-8
 518              	 .cfi_offset 14,-4
 519 0002 85B0     	 sub sp,sp,#20
 520              	.LCFI34:
 521              	 .cfi_def_cfa_offset 32
 522 0004 00AF     	 add r7,sp,#0
 523              	.LCFI35:
 524              	 .cfi_def_cfa_register 7
 525 0006 7860     	 str r0,[r7,#4]
 526 0008 3960     	 str r1,[r7]
 324:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 325:.././hal/sam3u1c/flash_efc.c **** 
 326:.././hal/sam3u1c/flash_efc.c **** 	translate_address(&p_efc, ul_address, NULL, NULL);
 527              	 .loc 3 326 2
 528 000a 07F10C00 	 add r0,r7,#12
 529 000e 0023     	 movs r3,#0
 530 0010 0022     	 movs r2,#0
 531 0012 7968     	 ldr r1,[r7,#4]
 532 0014 054C     	 ldr r4,.L43
 533 0016 A047     	 blx r4
 534              	.LVL3:
 327:.././hal/sam3u1c/flash_efc.c **** 	efc_set_wait_state(p_efc, ul_fws);
 535              	 .loc 3 327 2
 536 0018 FB68     	 ldr r3,[r7,#12]
 537 001a 3968     	 ldr r1,[r7]
 538 001c 1846     	 mov r0,r3
 539 001e 044B     	 ldr r3,.L43+4
 540 0020 9847     	 blx r3
 541              	.LVL4:
 328:.././hal/sam3u1c/flash_efc.c **** 
 329:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_OK;
 542              	 .loc 3 329 9
 543 0022 0023     	 movs r3,#0
 330:.././hal/sam3u1c/flash_efc.c **** }
 544              	 .loc 3 330 1
 545 0024 1846     	 mov r0,r3
 546 0026 1437     	 adds r7,r7,#20
 547              	.LCFI36:
 548              	 .cfi_def_cfa_offset 12
 549 0028 BD46     	 mov sp,r7
 550              	.LCFI37:
 551              	 .cfi_def_cfa_register 13
 552              	 
 553 002a 90BD     	 pop {r4,r7,pc}
 554              	.L44:
 555              	 .align 2
 556              	.L43:
 557 002c 00000000 	 .word translate_address
 558 0030 00000000 	 .word efc_set_wait_state
 559              	 .cfi_endproc
 560              	.LFE93:
 562              	 .section .text.flash_set_wait_state_adaptively,"ax",%progbits
 563              	 .align 1
 564              	 .global flash_set_wait_state_adaptively
 565              	 .syntax unified
 566              	 .thumb
 567              	 .thumb_func
 568              	 .fpu softvfp
 570              	flash_set_wait_state_adaptively:
 571              	.LFB94:
 331:.././hal/sam3u1c/flash_efc.c **** 
 332:.././hal/sam3u1c/flash_efc.c **** /**
 333:.././hal/sam3u1c/flash_efc.c ****  * \brief Set flash wait state.
 334:.././hal/sam3u1c/flash_efc.c ****  *
 335:.././hal/sam3u1c/flash_efc.c ****  * \param ul_address Flash bank start address.
 336:.././hal/sam3u1c/flash_efc.c ****  * \param ul_fws The number of wait states in cycle (no shift).
 337:.././hal/sam3u1c/flash_efc.c ****  *
 338:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful; otherwise returns an error code.
 339:.././hal/sam3u1c/flash_efc.c ****  */
 340:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_set_wait_state_adaptively(uint32_t ul_address)
 341:.././hal/sam3u1c/flash_efc.c **** {
 572              	 .loc 3 341 1
 573              	 .cfi_startproc
 574              	 
 575              	 
 576 0000 90B5     	 push {r4,r7,lr}
 577              	.LCFI38:
 578              	 .cfi_def_cfa_offset 12
 579              	 .cfi_offset 4,-12
 580              	 .cfi_offset 7,-8
 581              	 .cfi_offset 14,-4
 582 0002 85B0     	 sub sp,sp,#20
 583              	.LCFI39:
 584              	 .cfi_def_cfa_offset 32
 585 0004 00AF     	 add r7,sp,#0
 586              	.LCFI40:
 587              	 .cfi_def_cfa_register 7
 588 0006 7860     	 str r0,[r7,#4]
 342:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 343:.././hal/sam3u1c/flash_efc.c **** 	uint32_t clock = sysclk_get_cpu_hz();
 589              	 .loc 3 343 19
 590 0008 1D4B     	 ldr r3,.L52
 591 000a 9847     	 blx r3
 592              	.LVL5:
 593 000c F860     	 str r0,[r7,#12]
 344:.././hal/sam3u1c/flash_efc.c **** 
 345:.././hal/sam3u1c/flash_efc.c **** 	translate_address(&p_efc, ul_address, NULL, NULL);
 594              	 .loc 3 345 2
 595 000e 07F10800 	 add r0,r7,#8
 596 0012 0023     	 movs r3,#0
 597 0014 0022     	 movs r2,#0
 598 0016 7968     	 ldr r1,[r7,#4]
 599 0018 1A4C     	 ldr r4,.L52+4
 600 001a A047     	 blx r4
 601              	.LVL6:
 346:.././hal/sam3u1c/flash_efc.c **** 
 347:.././hal/sam3u1c/flash_efc.c **** 	/* Set FWS for embedded Flash access according to operating frequency */
 348:.././hal/sam3u1c/flash_efc.c **** 	if (clock < CHIP_FREQ_FWS_0) {
 602              	 .loc 3 348 5
 603 001c FB68     	 ldr r3,[r7,#12]
 604 001e 1A4A     	 ldr r2,.L52+8
 605 0020 9342     	 cmp r3,r2
 606 0022 05D2     	 bcs .L46
 349:.././hal/sam3u1c/flash_efc.c **** 		efc_set_wait_state(p_efc, 0);
 607              	 .loc 3 349 3
 608 0024 BB68     	 ldr r3,[r7,#8]
 609 0026 0021     	 movs r1,#0
 610 0028 1846     	 mov r0,r3
 611 002a 184B     	 ldr r3,.L52+12
 612 002c 9847     	 blx r3
 613              	.LVL7:
 614 002e 22E0     	 b .L47
 615              	.L46:
 350:.././hal/sam3u1c/flash_efc.c **** 	} else if (clock < CHIP_FREQ_FWS_1) {
 616              	 .loc 3 350 12
 617 0030 FB68     	 ldr r3,[r7,#12]
 618 0032 174A     	 ldr r2,.L52+16
 619 0034 9342     	 cmp r3,r2
 620 0036 05D2     	 bcs .L48
 351:.././hal/sam3u1c/flash_efc.c **** 		efc_set_wait_state(p_efc, 1);
 621              	 .loc 3 351 3
 622 0038 BB68     	 ldr r3,[r7,#8]
 623 003a 0121     	 movs r1,#1
 624 003c 1846     	 mov r0,r3
 625 003e 134B     	 ldr r3,.L52+12
 626 0040 9847     	 blx r3
 627              	.LVL8:
 628 0042 18E0     	 b .L47
 629              	.L48:
 352:.././hal/sam3u1c/flash_efc.c **** 	} else if (clock < CHIP_FREQ_FWS_2) {
 630              	 .loc 3 352 12
 631 0044 FB68     	 ldr r3,[r7,#12]
 632 0046 134A     	 ldr r2,.L52+20
 633 0048 9342     	 cmp r3,r2
 634 004a 05D8     	 bhi .L49
 353:.././hal/sam3u1c/flash_efc.c **** 		efc_set_wait_state(p_efc, 2);
 635              	 .loc 3 353 3
 636 004c BB68     	 ldr r3,[r7,#8]
 637 004e 0221     	 movs r1,#2
 638 0050 1846     	 mov r0,r3
 639 0052 0E4B     	 ldr r3,.L52+12
 640 0054 9847     	 blx r3
 641              	.LVL9:
 642 0056 0EE0     	 b .L47
 643              	.L49:
 354:.././hal/sam3u1c/flash_efc.c **** #if (SAM3XA || SAM3U)
 355:.././hal/sam3u1c/flash_efc.c **** 	} else if (clock < CHIP_FREQ_FWS_3) {
 644              	 .loc 3 355 12
 645 0058 FB68     	 ldr r3,[r7,#12]
 646 005a 0F4A     	 ldr r2,.L52+24
 647 005c 9342     	 cmp r3,r2
 648 005e 05D8     	 bhi .L50
 356:.././hal/sam3u1c/flash_efc.c **** 		efc_set_wait_state(p_efc, 3);
 649              	 .loc 3 356 3
 650 0060 BB68     	 ldr r3,[r7,#8]
 651 0062 0321     	 movs r1,#3
 652 0064 1846     	 mov r0,r3
 653 0066 094B     	 ldr r3,.L52+12
 654 0068 9847     	 blx r3
 655              	.LVL10:
 656 006a 04E0     	 b .L47
 657              	.L50:
 357:.././hal/sam3u1c/flash_efc.c **** 	} else {
 358:.././hal/sam3u1c/flash_efc.c **** 		efc_set_wait_state(p_efc, 4);
 658              	 .loc 3 358 3
 659 006c BB68     	 ldr r3,[r7,#8]
 660 006e 0421     	 movs r1,#4
 661 0070 1846     	 mov r0,r3
 662 0072 064B     	 ldr r3,.L52+12
 663 0074 9847     	 blx r3
 664              	.LVL11:
 665              	.L47:
 359:.././hal/sam3u1c/flash_efc.c **** 	}
 360:.././hal/sam3u1c/flash_efc.c **** #elif (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM)
 361:.././hal/sam3u1c/flash_efc.c **** 	} else if (clock < CHIP_FREQ_FWS_3) {
 362:.././hal/sam3u1c/flash_efc.c **** 		efc_set_wait_state(p_efc, 3);
 363:.././hal/sam3u1c/flash_efc.c **** 	} else if (clock < CHIP_FREQ_FWS_4) {
 364:.././hal/sam3u1c/flash_efc.c **** 		efc_set_wait_state(p_efc, 4);
 365:.././hal/sam3u1c/flash_efc.c **** 	} else {
 366:.././hal/sam3u1c/flash_efc.c **** 		efc_set_wait_state(p_efc, 5);
 367:.././hal/sam3u1c/flash_efc.c **** 	}
 368:.././hal/sam3u1c/flash_efc.c **** #else
 369:.././hal/sam3u1c/flash_efc.c **** 	} else {
 370:.././hal/sam3u1c/flash_efc.c **** 		efc_set_wait_state(p_efc, 3);
 371:.././hal/sam3u1c/flash_efc.c **** 	}
 372:.././hal/sam3u1c/flash_efc.c **** #endif
 373:.././hal/sam3u1c/flash_efc.c **** 
 374:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_OK;
 666              	 .loc 3 374 9
 667 0076 0023     	 movs r3,#0
 375:.././hal/sam3u1c/flash_efc.c **** }
 668              	 .loc 3 375 1
 669 0078 1846     	 mov r0,r3
 670 007a 1437     	 adds r7,r7,#20
 671              	.LCFI41:
 672              	 .cfi_def_cfa_offset 12
 673 007c BD46     	 mov sp,r7
 674              	.LCFI42:
 675              	 .cfi_def_cfa_register 13
 676              	 
 677 007e 90BD     	 pop {r4,r7,pc}
 678              	.L53:
 679              	 .align 2
 680              	.L52:
 681 0080 00000000 	 .word sysclk_get_cpu_hz
 682 0084 00000000 	 .word translate_address
 683 0088 00366E01 	 .word 24000000
 684 008c 00000000 	 .word efc_set_wait_state
 685 0090 005A6202 	 .word 40000000
 686 0094 FFA14A04 	 .word 71999999
 687 0098 FFBC0105 	 .word 83999999
 688              	 .cfi_endproc
 689              	.LFE94:
 691              	 .section .text.flash_get_wait_state,"ax",%progbits
 692              	 .align 1
 693              	 .global flash_get_wait_state
 694              	 .syntax unified
 695              	 .thumb
 696              	 .thumb_func
 697              	 .fpu softvfp
 699              	flash_get_wait_state:
 700              	.LFB95:
 376:.././hal/sam3u1c/flash_efc.c **** 
 377:.././hal/sam3u1c/flash_efc.c **** /**
 378:.././hal/sam3u1c/flash_efc.c ****  * \brief Get flash wait state.
 379:.././hal/sam3u1c/flash_efc.c ****  *
 380:.././hal/sam3u1c/flash_efc.c ****  * \param ul_address Flash bank start address.
 381:.././hal/sam3u1c/flash_efc.c ****  *
 382:.././hal/sam3u1c/flash_efc.c ****  * \return The number of wait states in cycle (no shift).
 383:.././hal/sam3u1c/flash_efc.c ****  */
 384:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_get_wait_state(uint32_t ul_address)
 385:.././hal/sam3u1c/flash_efc.c **** {
 701              	 .loc 3 385 1
 702              	 .cfi_startproc
 703              	 
 704              	 
 705 0000 90B5     	 push {r4,r7,lr}
 706              	.LCFI43:
 707              	 .cfi_def_cfa_offset 12
 708              	 .cfi_offset 4,-12
 709              	 .cfi_offset 7,-8
 710              	 .cfi_offset 14,-4
 711 0002 85B0     	 sub sp,sp,#20
 712              	.LCFI44:
 713              	 .cfi_def_cfa_offset 32
 714 0004 00AF     	 add r7,sp,#0
 715              	.LCFI45:
 716              	 .cfi_def_cfa_register 7
 717 0006 7860     	 str r0,[r7,#4]
 386:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 387:.././hal/sam3u1c/flash_efc.c **** 
 388:.././hal/sam3u1c/flash_efc.c **** 	translate_address(&p_efc, ul_address, NULL, NULL);
 718              	 .loc 3 388 2
 719 0008 07F10C00 	 add r0,r7,#12
 720 000c 0023     	 movs r3,#0
 721 000e 0022     	 movs r2,#0
 722 0010 7968     	 ldr r1,[r7,#4]
 723 0012 054C     	 ldr r4,.L56
 724 0014 A047     	 blx r4
 725              	.LVL12:
 389:.././hal/sam3u1c/flash_efc.c **** 	return efc_get_wait_state(p_efc);
 726              	 .loc 3 389 9
 727 0016 FB68     	 ldr r3,[r7,#12]
 728 0018 1846     	 mov r0,r3
 729 001a 044B     	 ldr r3,.L56+4
 730 001c 9847     	 blx r3
 731              	.LVL13:
 732 001e 0346     	 mov r3,r0
 390:.././hal/sam3u1c/flash_efc.c **** }
 733              	 .loc 3 390 1
 734 0020 1846     	 mov r0,r3
 735 0022 1437     	 adds r7,r7,#20
 736              	.LCFI46:
 737              	 .cfi_def_cfa_offset 12
 738 0024 BD46     	 mov sp,r7
 739              	.LCFI47:
 740              	 .cfi_def_cfa_register 13
 741              	 
 742 0026 90BD     	 pop {r4,r7,pc}
 743              	.L57:
 744              	 .align 2
 745              	.L56:
 746 0028 00000000 	 .word translate_address
 747 002c 00000000 	 .word efc_get_wait_state
 748              	 .cfi_endproc
 749              	.LFE95:
 751              	 .section .text.flash_get_descriptor,"ax",%progbits
 752              	 .align 1
 753              	 .global flash_get_descriptor
 754              	 .syntax unified
 755              	 .thumb
 756              	 .thumb_func
 757              	 .fpu softvfp
 759              	flash_get_descriptor:
 760              	.LFB96:
 391:.././hal/sam3u1c/flash_efc.c **** 
 392:.././hal/sam3u1c/flash_efc.c **** /**
 393:.././hal/sam3u1c/flash_efc.c ****  * \brief Get flash descriptor.
 394:.././hal/sam3u1c/flash_efc.c ****  *
 395:.././hal/sam3u1c/flash_efc.c ****  * \param ul_address Flash bank start address.
 396:.././hal/sam3u1c/flash_efc.c ****  * \param pul_flash_descriptor Pointer to a data buffer to store flash descriptor.
 397:.././hal/sam3u1c/flash_efc.c ****  * \param ul_size Data buffer size in DWORD.
 398:.././hal/sam3u1c/flash_efc.c ****  *
 399:.././hal/sam3u1c/flash_efc.c ****  * \return The actual descriptor length.
 400:.././hal/sam3u1c/flash_efc.c ****  */
 401:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_get_descriptor(uint32_t ul_address,
 402:.././hal/sam3u1c/flash_efc.c **** 		uint32_t *pul_flash_descriptor, uint32_t ul_size)
 403:.././hal/sam3u1c/flash_efc.c **** {
 761              	 .loc 3 403 1
 762              	 .cfi_startproc
 763              	 
 764              	 
 765 0000 90B5     	 push {r4,r7,lr}
 766              	.LCFI48:
 767              	 .cfi_def_cfa_offset 12
 768              	 .cfi_offset 4,-12
 769              	 .cfi_offset 7,-8
 770              	 .cfi_offset 14,-4
 771 0002 89B0     	 sub sp,sp,#36
 772              	.LCFI49:
 773              	 .cfi_def_cfa_offset 48
 774 0004 00AF     	 add r7,sp,#0
 775              	.LCFI50:
 776              	 .cfi_def_cfa_register 7
 777 0006 F860     	 str r0,[r7,#12]
 778 0008 B960     	 str r1,[r7,#8]
 779 000a 7A60     	 str r2,[r7,#4]
 404:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 405:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_tmp;
 406:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_cnt;
 407:.././hal/sam3u1c/flash_efc.c **** 
 408:.././hal/sam3u1c/flash_efc.c **** 	translate_address(&p_efc, ul_address, NULL, NULL);
 780              	 .loc 3 408 2
 781 000c 07F11400 	 add r0,r7,#20
 782 0010 0023     	 movs r3,#0
 783 0012 0022     	 movs r2,#0
 784 0014 F968     	 ldr r1,[r7,#12]
 785 0016 144C     	 ldr r4,.L64
 786 0018 A047     	 blx r4
 787              	.LVL14:
 409:.././hal/sam3u1c/flash_efc.c **** 
 410:.././hal/sam3u1c/flash_efc.c **** 	/* Command fails */
 411:.././hal/sam3u1c/flash_efc.c **** 	if (FLASH_RC_OK != efc_perform_command(p_efc, EFC_FCMD_GETD, 0)) {
 788              	 .loc 3 411 21
 789 001a 7B69     	 ldr r3,[r7,#20]
 790 001c 0022     	 movs r2,#0
 791 001e 0021     	 movs r1,#0
 792 0020 1846     	 mov r0,r3
 793 0022 124B     	 ldr r3,.L64+4
 794 0024 9847     	 blx r3
 795              	.LVL15:
 796 0026 0346     	 mov r3,r0
 797              	 .loc 3 411 5
 798 0028 002B     	 cmp r3,#0
 799 002a 01D0     	 beq .L59
 412:.././hal/sam3u1c/flash_efc.c **** 		return 0;
 800              	 .loc 3 412 10
 801 002c 0023     	 movs r3,#0
 802 002e 17E0     	 b .L63
 803              	.L59:
 413:.././hal/sam3u1c/flash_efc.c **** 	} else {
 414:.././hal/sam3u1c/flash_efc.c **** 		/* Read until no result */
 415:.././hal/sam3u1c/flash_efc.c **** 		for (ul_cnt = 0;; ul_cnt++) {
 804              	 .loc 3 415 15
 805 0030 0023     	 movs r3,#0
 806 0032 FB61     	 str r3,[r7,#28]
 807              	.L62:
 416:.././hal/sam3u1c/flash_efc.c **** 			ul_tmp = efc_get_result(p_efc);
 808              	 .loc 3 416 13
 809 0034 7B69     	 ldr r3,[r7,#20]
 810 0036 1846     	 mov r0,r3
 811 0038 0D4B     	 ldr r3,.L64+8
 812 003a 9847     	 blx r3
 813              	.LVL16:
 814 003c B861     	 str r0,[r7,#24]
 417:.././hal/sam3u1c/flash_efc.c **** 			if ((ul_size > ul_cnt) && (ul_tmp != 0)) {
 815              	 .loc 3 417 7
 816 003e 7A68     	 ldr r2,[r7,#4]
 817 0040 FB69     	 ldr r3,[r7,#28]
 818 0042 9A42     	 cmp r2,r3
 819 0044 0BD9     	 bls .L61
 820              	 .loc 3 417 27 discriminator 1
 821 0046 BB69     	 ldr r3,[r7,#24]
 822 0048 002B     	 cmp r3,#0
 823 004a 08D0     	 beq .L61
 418:.././hal/sam3u1c/flash_efc.c **** 				*pul_flash_descriptor++ = ul_tmp;
 824              	 .loc 3 418 26
 825 004c BB68     	 ldr r3,[r7,#8]
 826 004e 1A1D     	 adds r2,r3,#4
 827 0050 BA60     	 str r2,[r7,#8]
 828              	 .loc 3 418 29
 829 0052 BA69     	 ldr r2,[r7,#24]
 830 0054 1A60     	 str r2,[r3]
 415:.././hal/sam3u1c/flash_efc.c **** 			ul_tmp = efc_get_result(p_efc);
 831              	 .loc 3 415 27
 832 0056 FB69     	 ldr r3,[r7,#28]
 833 0058 0133     	 adds r3,r3,#1
 834 005a FB61     	 str r3,[r7,#28]
 416:.././hal/sam3u1c/flash_efc.c **** 			if ((ul_size > ul_cnt) && (ul_tmp != 0)) {
 835              	 .loc 3 416 11
 836 005c EAE7     	 b .L62
 837              	.L61:
 419:.././hal/sam3u1c/flash_efc.c **** 			} else {
 420:.././hal/sam3u1c/flash_efc.c **** 				break;
 421:.././hal/sam3u1c/flash_efc.c **** 			}
 422:.././hal/sam3u1c/flash_efc.c **** 		}
 423:.././hal/sam3u1c/flash_efc.c **** 	}
 424:.././hal/sam3u1c/flash_efc.c **** 
 425:.././hal/sam3u1c/flash_efc.c **** 	return ul_cnt;
 838              	 .loc 3 425 9
 839 005e FB69     	 ldr r3,[r7,#28]
 840              	.L63:
 426:.././hal/sam3u1c/flash_efc.c **** }
 841              	 .loc 3 426 1 discriminator 1
 842 0060 1846     	 mov r0,r3
 843 0062 2437     	 adds r7,r7,#36
 844              	.LCFI51:
 845              	 .cfi_def_cfa_offset 12
 846 0064 BD46     	 mov sp,r7
 847              	.LCFI52:
 848              	 .cfi_def_cfa_register 13
 849              	 
 850 0066 90BD     	 pop {r4,r7,pc}
 851              	.L65:
 852              	 .align 2
 853              	.L64:
 854 0068 00000000 	 .word translate_address
 855 006c 00000000 	 .word efc_perform_command
 856 0070 00000000 	 .word efc_get_result
 857              	 .cfi_endproc
 858              	.LFE96:
 860              	 .section .text.flash_get_page_count,"ax",%progbits
 861              	 .align 1
 862              	 .global flash_get_page_count
 863              	 .syntax unified
 864              	 .thumb
 865              	 .thumb_func
 866              	 .fpu softvfp
 868              	flash_get_page_count:
 869              	.LFB97:
 427:.././hal/sam3u1c/flash_efc.c **** 
 428:.././hal/sam3u1c/flash_efc.c **** /**
 429:.././hal/sam3u1c/flash_efc.c ****  * \brief Get flash total page count for the specified bank.
 430:.././hal/sam3u1c/flash_efc.c ****  *
 431:.././hal/sam3u1c/flash_efc.c ****  * \note The flash descriptor must be fetched from flash_get_descriptor
 432:.././hal/sam3u1c/flash_efc.c ****  * function first.
 433:.././hal/sam3u1c/flash_efc.c ****  *
 434:.././hal/sam3u1c/flash_efc.c ****  * \param pul_flash_descriptor Pointer to a flash descriptor.
 435:.././hal/sam3u1c/flash_efc.c ****  *
 436:.././hal/sam3u1c/flash_efc.c ****  * \return The flash total page count.
 437:.././hal/sam3u1c/flash_efc.c ****  */
 438:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_get_page_count(const uint32_t *pul_flash_descriptor)
 439:.././hal/sam3u1c/flash_efc.c **** {
 870              	 .loc 3 439 1
 871              	 .cfi_startproc
 872              	 
 873              	 
 874              	 
 875 0000 80B4     	 push {r7}
 876              	.LCFI53:
 877              	 .cfi_def_cfa_offset 4
 878              	 .cfi_offset 7,-4
 879 0002 83B0     	 sub sp,sp,#12
 880              	.LCFI54:
 881              	 .cfi_def_cfa_offset 16
 882 0004 00AF     	 add r7,sp,#0
 883              	.LCFI55:
 884              	 .cfi_def_cfa_register 7
 885 0006 7860     	 str r0,[r7,#4]
 440:.././hal/sam3u1c/flash_efc.c **** 	return (pul_flash_descriptor[1] / pul_flash_descriptor[2]);
 886              	 .loc 3 440 30
 887 0008 7B68     	 ldr r3,[r7,#4]
 888 000a 0433     	 adds r3,r3,#4
 889 000c 1A68     	 ldr r2,[r3]
 890              	 .loc 3 440 56
 891 000e 7B68     	 ldr r3,[r7,#4]
 892 0010 0833     	 adds r3,r3,#8
 893 0012 1B68     	 ldr r3,[r3]
 894              	 .loc 3 440 34
 895 0014 B2FBF3F3 	 udiv r3,r2,r3
 441:.././hal/sam3u1c/flash_efc.c **** }
 896              	 .loc 3 441 1
 897 0018 1846     	 mov r0,r3
 898 001a 0C37     	 adds r7,r7,#12
 899              	.LCFI56:
 900              	 .cfi_def_cfa_offset 4
 901 001c BD46     	 mov sp,r7
 902              	.LCFI57:
 903              	 .cfi_def_cfa_register 13
 904              	 
 905 001e 80BC     	 pop {r7}
 906              	.LCFI58:
 907              	 .cfi_restore 7
 908              	 .cfi_def_cfa_offset 0
 909 0020 7047     	 bx lr
 910              	 .cfi_endproc
 911              	.LFE97:
 913              	 .section .text.flash_get_page_count_per_region,"ax",%progbits
 914              	 .align 1
 915              	 .global flash_get_page_count_per_region
 916              	 .syntax unified
 917              	 .thumb
 918              	 .thumb_func
 919              	 .fpu softvfp
 921              	flash_get_page_count_per_region:
 922              	.LFB98:
 442:.././hal/sam3u1c/flash_efc.c **** 
 443:.././hal/sam3u1c/flash_efc.c **** /**
 444:.././hal/sam3u1c/flash_efc.c ****  * \brief Get flash page count per region (plane) for the specified bank.
 445:.././hal/sam3u1c/flash_efc.c ****  *
 446:.././hal/sam3u1c/flash_efc.c ****  * \note The flash descriptor must be fetched from flash_get_descriptor
 447:.././hal/sam3u1c/flash_efc.c ****  * function first.
 448:.././hal/sam3u1c/flash_efc.c ****  *
 449:.././hal/sam3u1c/flash_efc.c ****  * \param pul_flash_descriptor Pointer to a flash descriptor.
 450:.././hal/sam3u1c/flash_efc.c ****  *
 451:.././hal/sam3u1c/flash_efc.c ****  * \return The flash page count per region (plane).
 452:.././hal/sam3u1c/flash_efc.c ****  */
 453:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_get_page_count_per_region(const uint32_t *pul_flash_descriptor)
 454:.././hal/sam3u1c/flash_efc.c **** {
 923              	 .loc 3 454 1
 924              	 .cfi_startproc
 925              	 
 926              	 
 927              	 
 928 0000 80B4     	 push {r7}
 929              	.LCFI59:
 930              	 .cfi_def_cfa_offset 4
 931              	 .cfi_offset 7,-4
 932 0002 83B0     	 sub sp,sp,#12
 933              	.LCFI60:
 934              	 .cfi_def_cfa_offset 16
 935 0004 00AF     	 add r7,sp,#0
 936              	.LCFI61:
 937              	 .cfi_def_cfa_register 7
 938 0006 7860     	 str r0,[r7,#4]
 455:.././hal/sam3u1c/flash_efc.c **** 	return (pul_flash_descriptor[4] / pul_flash_descriptor[2]);
 939              	 .loc 3 455 30
 940 0008 7B68     	 ldr r3,[r7,#4]
 941 000a 1033     	 adds r3,r3,#16
 942 000c 1A68     	 ldr r2,[r3]
 943              	 .loc 3 455 56
 944 000e 7B68     	 ldr r3,[r7,#4]
 945 0010 0833     	 adds r3,r3,#8
 946 0012 1B68     	 ldr r3,[r3]
 947              	 .loc 3 455 34
 948 0014 B2FBF3F3 	 udiv r3,r2,r3
 456:.././hal/sam3u1c/flash_efc.c **** }
 949              	 .loc 3 456 1
 950 0018 1846     	 mov r0,r3
 951 001a 0C37     	 adds r7,r7,#12
 952              	.LCFI62:
 953              	 .cfi_def_cfa_offset 4
 954 001c BD46     	 mov sp,r7
 955              	.LCFI63:
 956              	 .cfi_def_cfa_register 13
 957              	 
 958 001e 80BC     	 pop {r7}
 959              	.LCFI64:
 960              	 .cfi_restore 7
 961              	 .cfi_def_cfa_offset 0
 962 0020 7047     	 bx lr
 963              	 .cfi_endproc
 964              	.LFE98:
 966              	 .section .text.flash_get_region_count,"ax",%progbits
 967              	 .align 1
 968              	 .global flash_get_region_count
 969              	 .syntax unified
 970              	 .thumb
 971              	 .thumb_func
 972              	 .fpu softvfp
 974              	flash_get_region_count:
 975              	.LFB99:
 457:.././hal/sam3u1c/flash_efc.c **** 
 458:.././hal/sam3u1c/flash_efc.c **** /**
 459:.././hal/sam3u1c/flash_efc.c ****  * \brief Get flash region (plane) count for the specified bank.
 460:.././hal/sam3u1c/flash_efc.c ****  *
 461:.././hal/sam3u1c/flash_efc.c ****  * \note The flash descriptor must be fetched from flash_get_descriptor
 462:.././hal/sam3u1c/flash_efc.c ****  * function first.
 463:.././hal/sam3u1c/flash_efc.c ****  *
 464:.././hal/sam3u1c/flash_efc.c ****  * \param pul_flash_descriptor Pointer to a flash descriptor.
 465:.././hal/sam3u1c/flash_efc.c ****  *
 466:.././hal/sam3u1c/flash_efc.c ****  * \return The flash region (plane) count.
 467:.././hal/sam3u1c/flash_efc.c ****  */
 468:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_get_region_count(const uint32_t *pul_flash_descriptor)
 469:.././hal/sam3u1c/flash_efc.c **** {
 976              	 .loc 3 469 1
 977              	 .cfi_startproc
 978              	 
 979              	 
 980              	 
 981 0000 80B4     	 push {r7}
 982              	.LCFI65:
 983              	 .cfi_def_cfa_offset 4
 984              	 .cfi_offset 7,-4
 985 0002 83B0     	 sub sp,sp,#12
 986              	.LCFI66:
 987              	 .cfi_def_cfa_offset 16
 988 0004 00AF     	 add r7,sp,#0
 989              	.LCFI67:
 990              	 .cfi_def_cfa_register 7
 991 0006 7860     	 str r0,[r7,#4]
 470:.././hal/sam3u1c/flash_efc.c **** 	return (pul_flash_descriptor[3]);
 992              	 .loc 3 470 30
 993 0008 7B68     	 ldr r3,[r7,#4]
 994 000a 0C33     	 adds r3,r3,#12
 995 000c 1B68     	 ldr r3,[r3]
 471:.././hal/sam3u1c/flash_efc.c **** }
 996              	 .loc 3 471 1
 997 000e 1846     	 mov r0,r3
 998 0010 0C37     	 adds r7,r7,#12
 999              	.LCFI68:
 1000              	 .cfi_def_cfa_offset 4
 1001 0012 BD46     	 mov sp,r7
 1002              	.LCFI69:
 1003              	 .cfi_def_cfa_register 13
 1004              	 
 1005 0014 80BC     	 pop {r7}
 1006              	.LCFI70:
 1007              	 .cfi_restore 7
 1008              	 .cfi_def_cfa_offset 0
 1009 0016 7047     	 bx lr
 1010              	 .cfi_endproc
 1011              	.LFE99:
 1013              	 .section .text.flash_erase_all,"ax",%progbits
 1014              	 .align 1
 1015              	 .global flash_erase_all
 1016              	 .syntax unified
 1017              	 .thumb
 1018              	 .thumb_func
 1019              	 .fpu softvfp
 1021              	flash_erase_all:
 1022              	.LFB100:
 472:.././hal/sam3u1c/flash_efc.c **** 
 473:.././hal/sam3u1c/flash_efc.c **** /**
 474:.././hal/sam3u1c/flash_efc.c ****  * \brief Erase the entire flash.
 475:.././hal/sam3u1c/flash_efc.c ****  *
 476:.././hal/sam3u1c/flash_efc.c ****  * \note Only the flash bank including ul_address will be erased. If there are
 477:.././hal/sam3u1c/flash_efc.c ****  * two flash banks, we need to call this function twice with each bank start
 478:.././hal/sam3u1c/flash_efc.c ****  * address.
 479:.././hal/sam3u1c/flash_efc.c ****  *
 480:.././hal/sam3u1c/flash_efc.c ****  * \param ul_address  Flash bank start address.
 481:.././hal/sam3u1c/flash_efc.c ****  *
 482:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful; otherwise returns an error code.
 483:.././hal/sam3u1c/flash_efc.c ****  */
 484:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_erase_all(uint32_t ul_address)
 485:.././hal/sam3u1c/flash_efc.c **** {
 1023              	 .loc 3 485 1
 1024              	 .cfi_startproc
 1025              	 
 1026              	 
 1027 0000 90B5     	 push {r4,r7,lr}
 1028              	.LCFI71:
 1029              	 .cfi_def_cfa_offset 12
 1030              	 .cfi_offset 4,-12
 1031              	 .cfi_offset 7,-8
 1032              	 .cfi_offset 14,-4
 1033 0002 85B0     	 sub sp,sp,#20
 1034              	.LCFI72:
 1035              	 .cfi_def_cfa_offset 32
 1036 0004 00AF     	 add r7,sp,#0
 1037              	.LCFI73:
 1038              	 .cfi_def_cfa_register 7
 1039 0006 7860     	 str r0,[r7,#4]
 486:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 487:.././hal/sam3u1c/flash_efc.c **** 
 488:.././hal/sam3u1c/flash_efc.c **** 	translate_address(&p_efc, ul_address, NULL, NULL);
 1040              	 .loc 3 488 2
 1041 0008 07F10C00 	 add r0,r7,#12
 1042 000c 0023     	 movs r3,#0
 1043 000e 0022     	 movs r2,#0
 1044 0010 7968     	 ldr r1,[r7,#4]
 1045 0012 094C     	 ldr r4,.L76
 1046 0014 A047     	 blx r4
 1047              	.LVL17:
 489:.././hal/sam3u1c/flash_efc.c **** 
 490:.././hal/sam3u1c/flash_efc.c **** 	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_EA, 0)) {
 1048              	 .loc 3 490 19
 1049 0016 FB68     	 ldr r3,[r7,#12]
 1050 0018 0022     	 movs r2,#0
 1051 001a 0521     	 movs r1,#5
 1052 001c 1846     	 mov r0,r3
 1053 001e 074B     	 ldr r3,.L76+4
 1054 0020 9847     	 blx r3
 1055              	.LVL18:
 1056 0022 0346     	 mov r3,r0
 1057              	 .loc 3 490 5
 1058 0024 002B     	 cmp r3,#0
 1059 0026 01D0     	 beq .L73
 491:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_ERROR;
 1060              	 .loc 3 491 10
 1061 0028 1023     	 movs r3,#16
 1062 002a 00E0     	 b .L75
 1063              	.L73:
 492:.././hal/sam3u1c/flash_efc.c **** 	}
 493:.././hal/sam3u1c/flash_efc.c **** 
 494:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_OK;
 1064              	 .loc 3 494 9
 1065 002c 0023     	 movs r3,#0
 1066              	.L75:
 495:.././hal/sam3u1c/flash_efc.c **** }
 1067              	 .loc 3 495 1 discriminator 1
 1068 002e 1846     	 mov r0,r3
 1069 0030 1437     	 adds r7,r7,#20
 1070              	.LCFI74:
 1071              	 .cfi_def_cfa_offset 12
 1072 0032 BD46     	 mov sp,r7
 1073              	.LCFI75:
 1074              	 .cfi_def_cfa_register 13
 1075              	 
 1076 0034 90BD     	 pop {r4,r7,pc}
 1077              	.L77:
 1078 0036 00BF     	 .align 2
 1079              	.L76:
 1080 0038 00000000 	 .word translate_address
 1081 003c 00000000 	 .word efc_perform_command
 1082              	 .cfi_endproc
 1083              	.LFE100:
 1085              	 .section .text.flash_write,"ax",%progbits
 1086              	 .align 1
 1087              	 .global flash_write
 1088              	 .syntax unified
 1089              	 .thumb
 1090              	 .thumb_func
 1091              	 .fpu softvfp
 1093              	flash_write:
 1094              	.LFB101:
 496:.././hal/sam3u1c/flash_efc.c **** 
 497:.././hal/sam3u1c/flash_efc.c **** #if SAM3SD8
 498:.././hal/sam3u1c/flash_efc.c **** /**
 499:.././hal/sam3u1c/flash_efc.c ****  * \brief Erase the flash by plane.
 500:.././hal/sam3u1c/flash_efc.c ****  *
 501:.././hal/sam3u1c/flash_efc.c ****  * \param ul_address Flash plane start address.
 502:.././hal/sam3u1c/flash_efc.c ****  *
 503:.././hal/sam3u1c/flash_efc.c ****  * \note Erase plane command needs a page number parameter which belongs to
 504:.././hal/sam3u1c/flash_efc.c ****  * the plane to be erased.
 505:.././hal/sam3u1c/flash_efc.c ****  *
 506:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful; otherwise returns an error code.
 507:.././hal/sam3u1c/flash_efc.c ****  */
 508:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_erase_plane(uint32_t ul_address)
 509:.././hal/sam3u1c/flash_efc.c **** {
 510:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 511:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_page;
 512:.././hal/sam3u1c/flash_efc.c **** 
 513:.././hal/sam3u1c/flash_efc.c **** 	translate_address(&p_efc, ul_address, &us_page, NULL);
 514:.././hal/sam3u1c/flash_efc.c **** 
 515:.././hal/sam3u1c/flash_efc.c **** 	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_EPL, us_page)) {
 516:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_ERROR;
 517:.././hal/sam3u1c/flash_efc.c **** 	}
 518:.././hal/sam3u1c/flash_efc.c **** 
 519:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_OK;
 520:.././hal/sam3u1c/flash_efc.c **** }
 521:.././hal/sam3u1c/flash_efc.c **** #endif
 522:.././hal/sam3u1c/flash_efc.c **** 
 523:.././hal/sam3u1c/flash_efc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
 524:.././hal/sam3u1c/flash_efc.c **** /**
 525:.././hal/sam3u1c/flash_efc.c ****  * \brief Erase the specified pages of flash.
 526:.././hal/sam3u1c/flash_efc.c ****  *
 527:.././hal/sam3u1c/flash_efc.c ****  * \param ul_address Flash bank start address.
 528:.././hal/sam3u1c/flash_efc.c ****  *
 529:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful; otherwise returns an error code.
 530:.././hal/sam3u1c/flash_efc.c ****  */
 531:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_erase_page(uint32_t ul_address, uint8_t uc_page_num)
 532:.././hal/sam3u1c/flash_efc.c **** {
 533:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 534:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_page;
 535:.././hal/sam3u1c/flash_efc.c **** 
 536:.././hal/sam3u1c/flash_efc.c **** 	if (uc_page_num >= IFLASH_ERASE_PAGES_INVALID) {
 537:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_INVALID;
 538:.././hal/sam3u1c/flash_efc.c **** 	}
 539:.././hal/sam3u1c/flash_efc.c **** 
 540:.././hal/sam3u1c/flash_efc.c **** 	if (ul_address & (IFLASH_PAGE_SIZE - 1)) {
 541:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_INVALID;
 542:.././hal/sam3u1c/flash_efc.c **** 	}
 543:.././hal/sam3u1c/flash_efc.c **** 
 544:.././hal/sam3u1c/flash_efc.c **** 	translate_address(&p_efc, ul_address, &us_page, NULL);
 545:.././hal/sam3u1c/flash_efc.c **** 
 546:.././hal/sam3u1c/flash_efc.c **** 	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_EPA,
 547:.././hal/sam3u1c/flash_efc.c **** 					(us_page | uc_page_num))) {
 548:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_ERROR;
 549:.././hal/sam3u1c/flash_efc.c **** 	}
 550:.././hal/sam3u1c/flash_efc.c **** 
 551:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_OK;
 552:.././hal/sam3u1c/flash_efc.c **** }
 553:.././hal/sam3u1c/flash_efc.c **** 
 554:.././hal/sam3u1c/flash_efc.c **** /**
 555:.././hal/sam3u1c/flash_efc.c ****  * \brief Erase the flash sector.
 556:.././hal/sam3u1c/flash_efc.c ****  *
 557:.././hal/sam3u1c/flash_efc.c ****  * \note Erase sector command needs a page number parameter which belongs to
 558:.././hal/sam3u1c/flash_efc.c ****  * the sector to be erased.
 559:.././hal/sam3u1c/flash_efc.c ****  *
 560:.././hal/sam3u1c/flash_efc.c ****  * \param ul_address Flash sector start address.
 561:.././hal/sam3u1c/flash_efc.c ****  *
 562:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful; otherwise returns an error code.
 563:.././hal/sam3u1c/flash_efc.c ****  */
 564:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_erase_sector(uint32_t ul_address)
 565:.././hal/sam3u1c/flash_efc.c **** {
 566:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 567:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_page;
 568:.././hal/sam3u1c/flash_efc.c **** 
 569:.././hal/sam3u1c/flash_efc.c **** 	translate_address(&p_efc, ul_address, &us_page, NULL);
 570:.././hal/sam3u1c/flash_efc.c **** 
 571:.././hal/sam3u1c/flash_efc.c **** 	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_ES, us_page)) {
 572:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_ERROR;
 573:.././hal/sam3u1c/flash_efc.c **** 	}
 574:.././hal/sam3u1c/flash_efc.c **** 
 575:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_OK;
 576:.././hal/sam3u1c/flash_efc.c **** }
 577:.././hal/sam3u1c/flash_efc.c **** #endif
 578:.././hal/sam3u1c/flash_efc.c **** 
 579:.././hal/sam3u1c/flash_efc.c **** /**
 580:.././hal/sam3u1c/flash_efc.c ****  * \brief Write a data buffer on flash.
 581:.././hal/sam3u1c/flash_efc.c ****  *
 582:.././hal/sam3u1c/flash_efc.c ****  * \note This function works in polling mode, and thus only returns when the
 583:.././hal/sam3u1c/flash_efc.c ****  * data has been effectively written.
 584:.././hal/sam3u1c/flash_efc.c ****  * \note For dual bank flash, this function doesn't support cross write from
 585:.././hal/sam3u1c/flash_efc.c ****  * bank 0 to bank 1. In this case, flash_write must be called twice (ie for
 586:.././hal/sam3u1c/flash_efc.c ****  * each bank).
 587:.././hal/sam3u1c/flash_efc.c ****  *
 588:.././hal/sam3u1c/flash_efc.c ****  * \param ul_address Write address.
 589:.././hal/sam3u1c/flash_efc.c ****  * \param p_buffer Data buffer.
 590:.././hal/sam3u1c/flash_efc.c ****  * \param ul_size Size of data buffer in bytes.
 591:.././hal/sam3u1c/flash_efc.c ****  * \param ul_erase_flag Flag to set if erase first.
 592:.././hal/sam3u1c/flash_efc.c ****  *
 593:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful, otherwise returns an error code.
 594:.././hal/sam3u1c/flash_efc.c ****  */
 595:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
 596:.././hal/sam3u1c/flash_efc.c **** 		uint32_t ul_size, uint32_t ul_erase_flag)
 597:.././hal/sam3u1c/flash_efc.c **** {
 1095              	 .loc 3 597 1
 1096              	 .cfi_startproc
 1097              	 
 1098              	 
 1099 0000 90B5     	 push {r4,r7,lr}
 1100              	.LCFI76:
 1101              	 .cfi_def_cfa_offset 12
 1102              	 .cfi_offset 4,-12
 1103              	 .cfi_offset 7,-8
 1104              	 .cfi_offset 14,-4
 1105 0002 8FB0     	 sub sp,sp,#60
 1106              	.LCFI77:
 1107              	 .cfi_def_cfa_offset 72
 1108 0004 00AF     	 add r7,sp,#0
 1109              	.LCFI78:
 1110              	 .cfi_def_cfa_register 7
 1111 0006 F860     	 str r0,[r7,#12]
 1112 0008 B960     	 str r1,[r7,#8]
 1113 000a 7A60     	 str r2,[r7,#4]
 1114 000c 3B60     	 str r3,[r7]
 598:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 599:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_fws_temp;
 600:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_page;
 601:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_offset;
 602:.././hal/sam3u1c/flash_efc.c **** 	uint32_t writeSize;
 603:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_page_addr;
 604:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_padding;
 605:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_error;
 606:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_idx;
 607:.././hal/sam3u1c/flash_efc.c **** 	uint32_t *p_aligned_dest;
 608:.././hal/sam3u1c/flash_efc.c **** 	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
 1115              	 .loc 3 608 11
 1116 000e 494B     	 ldr r3,.L88
 1117 0010 BB62     	 str r3,[r7,#40]
 609:.././hal/sam3u1c/flash_efc.c **** 
 610:.././hal/sam3u1c/flash_efc.c **** 	translate_address(&p_efc, ul_address, &us_page, &us_offset);
 1118              	 .loc 3 610 2
 1119 0012 07F11403 	 add r3,r7,#20
 1120 0016 07F11602 	 add r2,r7,#22
 1121 001a 07F11800 	 add r0,r7,#24
 1122 001e F968     	 ldr r1,[r7,#12]
 1123 0020 454C     	 ldr r4,.L88+4
 1124 0022 A047     	 blx r4
 1125              	.LVL19:
 611:.././hal/sam3u1c/flash_efc.c **** 
 612:.././hal/sam3u1c/flash_efc.c **** 	/* According to the errata, set the wait state value to 6. */
 613:.././hal/sam3u1c/flash_efc.c **** 	ul_fws_temp = efc_get_wait_state(p_efc);
 1126              	 .loc 3 613 16
 1127 0024 BB69     	 ldr r3,[r7,#24]
 1128 0026 1846     	 mov r0,r3
 1129 0028 444B     	 ldr r3,.L88+8
 1130 002a 9847     	 blx r3
 1131              	.LVL20:
 1132 002c 7862     	 str r0,[r7,#36]
 614:.././hal/sam3u1c/flash_efc.c **** 	efc_set_wait_state(p_efc, 6);
 1133              	 .loc 3 614 2
 1134 002e BB69     	 ldr r3,[r7,#24]
 1135 0030 0621     	 movs r1,#6
 1136 0032 1846     	 mov r0,r3
 1137 0034 424B     	 ldr r3,.L88+12
 1138 0036 9847     	 blx r3
 1139              	.LVL21:
 615:.././hal/sam3u1c/flash_efc.c **** 
 616:.././hal/sam3u1c/flash_efc.c **** 	/* Write all pages */
 617:.././hal/sam3u1c/flash_efc.c **** 	while (ul_size > 0) {
 1140              	 .loc 3 617 8
 1141 0038 6FE0     	 b .L79
 1142              	.L86:
 618:.././hal/sam3u1c/flash_efc.c **** 		/* Copy data in temporary buffer to avoid alignment problems. */
 619:.././hal/sam3u1c/flash_efc.c **** 		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
 1143              	 .loc 3 619 15
 1144 003a BB8A     	 ldrh r3,[r7,#20]
 1145 003c C3F58073 	 rsb r3,r3,#256
 1146              	 .loc 3 619 13
 1147 0040 7A68     	 ldr r2,[r7,#4]
 1148 0042 9342     	 cmp r3,r2
 1149 0044 28BF     	 it cs
 1150 0046 1346     	 movcs r3,r2
 1151 0048 3B62     	 str r3,[r7,#32]
 620:.././hal/sam3u1c/flash_efc.c **** 				ul_size);
 621:.././hal/sam3u1c/flash_efc.c **** 		compute_address(p_efc, us_page, 0, &ul_page_addr);
 1152              	 .loc 3 621 3
 1153 004a B869     	 ldr r0,[r7,#24]
 1154 004c F98A     	 ldrh r1,[r7,#22]
 1155 004e 07F11003 	 add r3,r7,#16
 1156 0052 0022     	 movs r2,#0
 1157 0054 3B4C     	 ldr r4,.L88+16
 1158 0056 A047     	 blx r4
 1159              	.LVL22:
 622:.././hal/sam3u1c/flash_efc.c **** 		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
 1160              	 .loc 3 622 45
 1161 0058 3B6A     	 ldr r3,[r7,#32]
 1162 005a 9AB2     	 uxth r2,r3
 1163 005c BB8A     	 ldrh r3,[r7,#20]
 1164 005e 1344     	 add r3,r3,r2
 1165 0060 9BB2     	 uxth r3,r3
 1166              	 .loc 3 622 14
 1167 0062 C3F58073 	 rsb r3,r3,#256
 1168 0066 FB83     	 strh r3,[r7,#30]
 623:.././hal/sam3u1c/flash_efc.c **** 
 624:.././hal/sam3u1c/flash_efc.c **** 		/* Pre-buffer data */
 625:.././hal/sam3u1c/flash_efc.c **** 		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
 1169              	 .loc 3 625 3
 1170 0068 3B69     	 ldr r3,[r7,#16]
 1171 006a 1946     	 mov r1,r3
 1172 006c BB8A     	 ldrh r3,[r7,#20]
 1173 006e 1A46     	 mov r2,r3
 1174 0070 B86A     	 ldr r0,[r7,#40]
 1175 0072 354B     	 ldr r3,.L88+20
 1176 0074 9847     	 blx r3
 1177              	.LVL23:
 626:.././hal/sam3u1c/flash_efc.c **** 
 627:.././hal/sam3u1c/flash_efc.c **** 		/* Buffer data */
 628:.././hal/sam3u1c/flash_efc.c **** 		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
 1178              	 .loc 3 628 3
 1179 0076 BB8A     	 ldrh r3,[r7,#20]
 1180 0078 1A46     	 mov r2,r3
 1181              	 .loc 3 628 26
 1182 007a BB6A     	 ldr r3,[r7,#40]
 1183 007c 1344     	 add r3,r3,r2
 1184              	 .loc 3 628 3
 1185 007e 3A6A     	 ldr r2,[r7,#32]
 1186 0080 B968     	 ldr r1,[r7,#8]
 1187 0082 1846     	 mov r0,r3
 1188 0084 304B     	 ldr r3,.L88+20
 1189 0086 9847     	 blx r3
 1190              	.LVL24:
 629:.././hal/sam3u1c/flash_efc.c **** 
 630:.././hal/sam3u1c/flash_efc.c **** 		/* Post-buffer data */
 631:.././hal/sam3u1c/flash_efc.c **** 		memcpy(puc_page_buffer + us_offset + writeSize,
 1191              	 .loc 3 631 38
 1192 0088 BB8A     	 ldrh r3,[r7,#20]
 1193 008a 1A46     	 mov r2,r3
 1194 008c 3B6A     	 ldr r3,[r7,#32]
 1195 008e 1344     	 add r3,r3,r2
 1196 0090 BA6A     	 ldr r2,[r7,#40]
 1197 0092 D018     	 adds r0,r2,r3
 632:.././hal/sam3u1c/flash_efc.c **** 				(void *)(ul_page_addr + us_offset + writeSize),
 1198              	 .loc 3 632 27
 1199 0094 BB8A     	 ldrh r3,[r7,#20]
 1200 0096 1A46     	 mov r2,r3
 1201 0098 3B69     	 ldr r3,[r7,#16]
 1202 009a 1A44     	 add r2,r2,r3
 1203              	 .loc 3 632 39
 1204 009c 3B6A     	 ldr r3,[r7,#32]
 1205 009e 1344     	 add r3,r3,r2
 631:.././hal/sam3u1c/flash_efc.c **** 				(void *)(ul_page_addr + us_offset + writeSize),
 1206              	 .loc 3 631 3
 1207 00a0 1946     	 mov r1,r3
 1208 00a2 FB8B     	 ldrh r3,[r7,#30]
 1209 00a4 1A46     	 mov r2,r3
 1210 00a6 284B     	 ldr r3,.L88+20
 1211 00a8 9847     	 blx r3
 1212              	.LVL25:
 633:.././hal/sam3u1c/flash_efc.c **** 				us_padding);
 634:.././hal/sam3u1c/flash_efc.c **** 
 635:.././hal/sam3u1c/flash_efc.c **** 		/* Write page.
 636:.././hal/sam3u1c/flash_efc.c **** 		 * Writing 8-bit and 16-bit data is not allowed and may lead to
 637:.././hal/sam3u1c/flash_efc.c **** 		 * unpredictable data corruption.
 638:.././hal/sam3u1c/flash_efc.c **** 		 */
 639:.././hal/sam3u1c/flash_efc.c **** 		p_aligned_dest = (uint32_t *) ul_page_addr;
 1213              	 .loc 3 639 20
 1214 00aa 3B69     	 ldr r3,[r7,#16]
 1215              	 .loc 3 639 18
 1216 00ac FB62     	 str r3,[r7,#44]
 640:.././hal/sam3u1c/flash_efc.c **** 		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
 1217              	 .loc 3 640 15
 1218 00ae 0023     	 movs r3,#0
 1219 00b0 3B63     	 str r3,[r7,#48]
 1220              	 .loc 3 640 3
 1221 00b2 0AE0     	 b .L80
 1222              	.L81:
 641:.././hal/sam3u1c/flash_efc.c **** 				++ul_idx) {
 642:.././hal/sam3u1c/flash_efc.c **** 			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
 1223              	 .loc 3 642 19
 1224 00b4 FB6A     	 ldr r3,[r7,#44]
 1225 00b6 1A1D     	 adds r2,r3,#4
 1226 00b8 FA62     	 str r2,[r7,#44]
 1227              	 .loc 3 642 41
 1228 00ba 1E49     	 ldr r1,.L88
 1229 00bc 3A6B     	 ldr r2,[r7,#48]
 1230 00be 51F82220 	 ldr r2,[r1,r2,lsl#2]
 1231              	 .loc 3 642 22
 1232 00c2 1A60     	 str r2,[r3]
 641:.././hal/sam3u1c/flash_efc.c **** 				++ul_idx) {
 1233              	 .loc 3 641 5
 1234 00c4 3B6B     	 ldr r3,[r7,#48]
 1235 00c6 0133     	 adds r3,r3,#1
 1236 00c8 3B63     	 str r3,[r7,#48]
 1237              	.L80:
 640:.././hal/sam3u1c/flash_efc.c **** 		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
 1238              	 .loc 3 640 3 discriminator 1
 1239 00ca 3B6B     	 ldr r3,[r7,#48]
 1240 00cc 3F2B     	 cmp r3,#63
 1241 00ce F1D9     	 bls .L81
 643:.././hal/sam3u1c/flash_efc.c **** 		}
 644:.././hal/sam3u1c/flash_efc.c **** 
 645:.././hal/sam3u1c/flash_efc.c **** 		if (ul_erase_flag) {
 1242              	 .loc 3 645 6
 1243 00d0 3B68     	 ldr r3,[r7]
 1244 00d2 002B     	 cmp r3,#0
 1245 00d4 07D0     	 beq .L82
 646:.././hal/sam3u1c/flash_efc.c **** 			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
 1246              	 .loc 3 646 15
 1247 00d6 BB69     	 ldr r3,[r7,#24]
 1248 00d8 FA8A     	 ldrh r2,[r7,#22]
 1249 00da 0321     	 movs r1,#3
 1250 00dc 1846     	 mov r0,r3
 1251 00de 1B4B     	 ldr r3,.L88+24
 1252 00e0 9847     	 blx r3
 1253              	.LVL26:
 1254 00e2 7863     	 str r0,[r7,#52]
 1255 00e4 06E0     	 b .L83
 1256              	.L82:
 647:.././hal/sam3u1c/flash_efc.c **** 					us_page);
 648:.././hal/sam3u1c/flash_efc.c **** 		} else {
 649:.././hal/sam3u1c/flash_efc.c **** 			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
 1257              	 .loc 3 649 15
 1258 00e6 BB69     	 ldr r3,[r7,#24]
 1259 00e8 FA8A     	 ldrh r2,[r7,#22]
 1260 00ea 0121     	 movs r1,#1
 1261 00ec 1846     	 mov r0,r3
 1262 00ee 174B     	 ldr r3,.L88+24
 1263 00f0 9847     	 blx r3
 1264              	.LVL27:
 1265 00f2 7863     	 str r0,[r7,#52]
 1266              	.L83:
 650:.././hal/sam3u1c/flash_efc.c **** 					us_page);
 651:.././hal/sam3u1c/flash_efc.c **** 		}
 652:.././hal/sam3u1c/flash_efc.c **** 
 653:.././hal/sam3u1c/flash_efc.c **** 		if (ul_error) {
 1267              	 .loc 3 653 6
 1268 00f4 7B6B     	 ldr r3,[r7,#52]
 1269 00f6 002B     	 cmp r3,#0
 1270 00f8 01D0     	 beq .L84
 654:.././hal/sam3u1c/flash_efc.c **** 			return ul_error;
 1271              	 .loc 3 654 11
 1272 00fa 7B6B     	 ldr r3,[r7,#52]
 1273 00fc 16E0     	 b .L87
 1274              	.L84:
 655:.././hal/sam3u1c/flash_efc.c **** 		}
 656:.././hal/sam3u1c/flash_efc.c **** 
 657:.././hal/sam3u1c/flash_efc.c **** 		/* Progression */
 658:.././hal/sam3u1c/flash_efc.c **** 		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
 1275              	 .loc 3 658 23
 1276 00fe BA68     	 ldr r2,[r7,#8]
 1277              	 .loc 3 658 43
 1278 0100 3B6A     	 ldr r3,[r7,#32]
 1279 0102 1344     	 add r3,r3,r2
 1280              	 .loc 3 658 12
 1281 0104 BB60     	 str r3,[r7,#8]
 659:.././hal/sam3u1c/flash_efc.c **** 		ul_size -= writeSize;
 1282              	 .loc 3 659 11
 1283 0106 7A68     	 ldr r2,[r7,#4]
 1284 0108 3B6A     	 ldr r3,[r7,#32]
 1285 010a D31A     	 subs r3,r2,r3
 1286 010c 7B60     	 str r3,[r7,#4]
 660:.././hal/sam3u1c/flash_efc.c **** 		us_page++;
 1287              	 .loc 3 660 10
 1288 010e FB8A     	 ldrh r3,[r7,#22]
 1289 0110 0133     	 adds r3,r3,#1
 1290 0112 9BB2     	 uxth r3,r3
 1291 0114 FB82     	 strh r3,[r7,#22]
 661:.././hal/sam3u1c/flash_efc.c **** 		us_offset = 0;
 1292              	 .loc 3 661 13
 1293 0116 0023     	 movs r3,#0
 1294 0118 BB82     	 strh r3,[r7,#20]
 1295              	.L79:
 617:.././hal/sam3u1c/flash_efc.c **** 		/* Copy data in temporary buffer to avoid alignment problems. */
 1296              	 .loc 3 617 8
 1297 011a 7B68     	 ldr r3,[r7,#4]
 1298 011c 002B     	 cmp r3,#0
 1299 011e 8CD1     	 bne .L86
 662:.././hal/sam3u1c/flash_efc.c **** 	}
 663:.././hal/sam3u1c/flash_efc.c **** 
 664:.././hal/sam3u1c/flash_efc.c **** 	/* According to the errata, restore the wait state value. */
 665:.././hal/sam3u1c/flash_efc.c **** 	efc_set_wait_state(p_efc, ul_fws_temp);
 1300              	 .loc 3 665 2
 1301 0120 BB69     	 ldr r3,[r7,#24]
 1302 0122 796A     	 ldr r1,[r7,#36]
 1303 0124 1846     	 mov r0,r3
 1304 0126 064B     	 ldr r3,.L88+12
 1305 0128 9847     	 blx r3
 1306              	.LVL28:
 666:.././hal/sam3u1c/flash_efc.c **** 
 667:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_OK;
 1307              	 .loc 3 667 9
 1308 012a 0023     	 movs r3,#0
 1309              	.L87:
 668:.././hal/sam3u1c/flash_efc.c **** }
 1310              	 .loc 3 668 1 discriminator 1
 1311 012c 1846     	 mov r0,r3
 1312 012e 3C37     	 adds r7,r7,#60
 1313              	.LCFI79:
 1314              	 .cfi_def_cfa_offset 12
 1315 0130 BD46     	 mov sp,r7
 1316              	.LCFI80:
 1317              	 .cfi_def_cfa_register 13
 1318              	 
 1319 0132 90BD     	 pop {r4,r7,pc}
 1320              	.L89:
 1321              	 .align 2
 1322              	.L88:
 1323 0134 00000000 	 .word gs_ul_page_buffer
 1324 0138 00000000 	 .word translate_address
 1325 013c 00000000 	 .word efc_get_wait_state
 1326 0140 00000000 	 .word efc_set_wait_state
 1327 0144 00000000 	 .word compute_address
 1328 0148 00000000 	 .word memcpy
 1329 014c 00000000 	 .word efc_perform_command
 1330              	 .cfi_endproc
 1331              	.LFE101:
 1333              	 .section .text.flash_lock,"ax",%progbits
 1334              	 .align 1
 1335              	 .global flash_lock
 1336              	 .syntax unified
 1337              	 .thumb
 1338              	 .thumb_func
 1339              	 .fpu softvfp
 1341              	flash_lock:
 1342              	.LFB102:
 669:.././hal/sam3u1c/flash_efc.c **** 
 670:.././hal/sam3u1c/flash_efc.c **** 
 671:.././hal/sam3u1c/flash_efc.c **** /**
 672:.././hal/sam3u1c/flash_efc.c ****  * \brief Lock all the regions in the given address range. The actual lock
 673:.././hal/sam3u1c/flash_efc.c ****  * range is reported through two output parameters.
 674:.././hal/sam3u1c/flash_efc.c ****  *
 675:.././hal/sam3u1c/flash_efc.c ****  * \param ul_start Start address of lock range.
 676:.././hal/sam3u1c/flash_efc.c ****  * \param ul_end End address of lock range.
 677:.././hal/sam3u1c/flash_efc.c ****  * \param pul_actual_start Start address of the actual lock range (optional).
 678:.././hal/sam3u1c/flash_efc.c ****  * \param pul_actual_end End address of the actual lock range (optional).
 679:.././hal/sam3u1c/flash_efc.c ****  *
 680:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful, otherwise returns an error code.
 681:.././hal/sam3u1c/flash_efc.c ****  */
 682:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
 683:.././hal/sam3u1c/flash_efc.c **** 		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
 684:.././hal/sam3u1c/flash_efc.c **** {
 1343              	 .loc 3 684 1
 1344              	 .cfi_startproc
 1345              	 
 1346              	 
 1347 0000 90B5     	 push {r4,r7,lr}
 1348              	.LCFI81:
 1349              	 .cfi_def_cfa_offset 12
 1350              	 .cfi_offset 4,-12
 1351              	 .cfi_offset 7,-8
 1352              	 .cfi_offset 14,-4
 1353 0002 8BB0     	 sub sp,sp,#44
 1354              	.LCFI82:
 1355              	 .cfi_def_cfa_offset 56
 1356 0004 00AF     	 add r7,sp,#0
 1357              	.LCFI83:
 1358              	 .cfi_def_cfa_register 7
 1359 0006 F860     	 str r0,[r7,#12]
 1360 0008 B960     	 str r1,[r7,#8]
 1361 000a 7A60     	 str r2,[r7,#4]
 1362 000c 3B60     	 str r3,[r7]
 685:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 686:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_actual_start, ul_actual_end;
 687:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_start_page, us_end_page;
 688:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_error;
 689:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_num_pages_in_region =
 1363              	 .loc 3 689 11
 1364 000e 2023     	 movs r3,#32
 1365 0010 FB84     	 strh r3,[r7,#38]
 690:.././hal/sam3u1c/flash_efc.c **** 			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;
 691:.././hal/sam3u1c/flash_efc.c **** 
 692:.././hal/sam3u1c/flash_efc.c **** 	/* Compute actual lock range and store it */
 693:.././hal/sam3u1c/flash_efc.c **** 	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
 1366              	 .loc 3 693 2
 1367 0012 07F11403 	 add r3,r7,#20
 1368 0016 07F11802 	 add r2,r7,#24
 1369 001a B968     	 ldr r1,[r7,#8]
 1370 001c F868     	 ldr r0,[r7,#12]
 1371 001e 1C4C     	 ldr r4,.L98
 1372 0020 A047     	 blx r4
 1373              	.LVL29:
 694:.././hal/sam3u1c/flash_efc.c **** 
 695:.././hal/sam3u1c/flash_efc.c **** 	if (pul_actual_start != NULL) {
 1374              	 .loc 3 695 5
 1375 0022 7B68     	 ldr r3,[r7,#4]
 1376 0024 002B     	 cmp r3,#0
 1377 0026 02D0     	 beq .L91
 696:.././hal/sam3u1c/flash_efc.c **** 		*pul_actual_start = ul_actual_start;
 1378              	 .loc 3 696 21
 1379 0028 BA69     	 ldr r2,[r7,#24]
 1380 002a 7B68     	 ldr r3,[r7,#4]
 1381 002c 1A60     	 str r2,[r3]
 1382              	.L91:
 697:.././hal/sam3u1c/flash_efc.c **** 	}
 698:.././hal/sam3u1c/flash_efc.c **** 
 699:.././hal/sam3u1c/flash_efc.c **** 	if (pul_actual_end != NULL) {
 1383              	 .loc 3 699 5
 1384 002e 3B68     	 ldr r3,[r7]
 1385 0030 002B     	 cmp r3,#0
 1386 0032 02D0     	 beq .L92
 700:.././hal/sam3u1c/flash_efc.c **** 		*pul_actual_end = ul_actual_end;
 1387              	 .loc 3 700 19
 1388 0034 7A69     	 ldr r2,[r7,#20]
 1389 0036 3B68     	 ldr r3,[r7]
 1390 0038 1A60     	 str r2,[r3]
 1391              	.L92:
 701:.././hal/sam3u1c/flash_efc.c **** 	}
 702:.././hal/sam3u1c/flash_efc.c **** 
 703:.././hal/sam3u1c/flash_efc.c **** 	/* Compute page numbers */
 704:.././hal/sam3u1c/flash_efc.c **** 	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
 1392              	 .loc 3 704 2
 1393 003a B969     	 ldr r1,[r7,#24]
 1394 003c 07F11202 	 add r2,r7,#18
 1395 0040 07F11C00 	 add r0,r7,#28
 1396 0044 0023     	 movs r3,#0
 1397 0046 134C     	 ldr r4,.L98+4
 1398 0048 A047     	 blx r4
 1399              	.LVL30:
 705:.././hal/sam3u1c/flash_efc.c **** 	translate_address(0, ul_actual_end, &us_end_page, 0);
 1400              	 .loc 3 705 2
 1401 004a 7969     	 ldr r1,[r7,#20]
 1402 004c 07F11002 	 add r2,r7,#16
 1403 0050 0023     	 movs r3,#0
 1404 0052 0020     	 movs r0,#0
 1405 0054 0F4C     	 ldr r4,.L98+4
 1406 0056 A047     	 blx r4
 1407              	.LVL31:
 706:.././hal/sam3u1c/flash_efc.c **** 
 707:.././hal/sam3u1c/flash_efc.c **** 	/* Lock all pages */
 708:.././hal/sam3u1c/flash_efc.c **** 	while (us_start_page < us_end_page) {
 1408              	 .loc 3 708 8
 1409 0058 10E0     	 b .L93
 1410              	.L96:
 709:.././hal/sam3u1c/flash_efc.c **** 		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
 1411              	 .loc 3 709 14
 1412 005a FB69     	 ldr r3,[r7,#28]
 1413 005c 7A8A     	 ldrh r2,[r7,#18]
 1414 005e 0821     	 movs r1,#8
 1415 0060 1846     	 mov r0,r3
 1416 0062 0D4B     	 ldr r3,.L98+8
 1417 0064 9847     	 blx r3
 1418              	.LVL32:
 1419 0066 3862     	 str r0,[r7,#32]
 710:.././hal/sam3u1c/flash_efc.c **** 
 711:.././hal/sam3u1c/flash_efc.c **** 		if (ul_error) {
 1420              	 .loc 3 711 6
 1421 0068 3B6A     	 ldr r3,[r7,#32]
 1422 006a 002B     	 cmp r3,#0
 1423 006c 01D0     	 beq .L94
 712:.././hal/sam3u1c/flash_efc.c **** 			return ul_error;
 1424              	 .loc 3 712 11
 1425 006e 3B6A     	 ldr r3,[r7,#32]
 1426 0070 09E0     	 b .L97
 1427              	.L94:
 713:.././hal/sam3u1c/flash_efc.c **** 		}
 714:.././hal/sam3u1c/flash_efc.c **** 		us_start_page += us_num_pages_in_region;
 1428              	 .loc 3 714 17
 1429 0072 7A8A     	 ldrh r2,[r7,#18]
 1430 0074 FB8C     	 ldrh r3,[r7,#38]
 1431 0076 1344     	 add r3,r3,r2
 1432 0078 9BB2     	 uxth r3,r3
 1433 007a 7B82     	 strh r3,[r7,#18]
 1434              	.L93:
 708:.././hal/sam3u1c/flash_efc.c **** 		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
 1435              	 .loc 3 708 23
 1436 007c 7A8A     	 ldrh r2,[r7,#18]
 1437 007e 3B8A     	 ldrh r3,[r7,#16]
 708:.././hal/sam3u1c/flash_efc.c **** 		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
 1438              	 .loc 3 708 8
 1439 0080 9A42     	 cmp r2,r3
 1440 0082 EAD3     	 bcc .L96
 715:.././hal/sam3u1c/flash_efc.c **** 	}
 716:.././hal/sam3u1c/flash_efc.c **** 
 717:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_OK;
 1441              	 .loc 3 717 9
 1442 0084 0023     	 movs r3,#0
 1443              	.L97:
 718:.././hal/sam3u1c/flash_efc.c **** }
 1444              	 .loc 3 718 1 discriminator 1
 1445 0086 1846     	 mov r0,r3
 1446 0088 2C37     	 adds r7,r7,#44
 1447              	.LCFI84:
 1448              	 .cfi_def_cfa_offset 12
 1449 008a BD46     	 mov sp,r7
 1450              	.LCFI85:
 1451              	 .cfi_def_cfa_register 13
 1452              	 
 1453 008c 90BD     	 pop {r4,r7,pc}
 1454              	.L99:
 1455 008e 00BF     	 .align 2
 1456              	.L98:
 1457 0090 00000000 	 .word compute_lock_range
 1458 0094 00000000 	 .word translate_address
 1459 0098 00000000 	 .word efc_perform_command
 1460              	 .cfi_endproc
 1461              	.LFE102:
 1463              	 .section .text.flash_unlock,"ax",%progbits
 1464              	 .align 1
 1465              	 .global flash_unlock
 1466              	 .syntax unified
 1467              	 .thumb
 1468              	 .thumb_func
 1469              	 .fpu softvfp
 1471              	flash_unlock:
 1472              	.LFB103:
 719:.././hal/sam3u1c/flash_efc.c **** 
 720:.././hal/sam3u1c/flash_efc.c **** /**
 721:.././hal/sam3u1c/flash_efc.c ****  * \brief Unlock all the regions in the given address range. The actual unlock
 722:.././hal/sam3u1c/flash_efc.c ****  * range is reported through two output parameters.
 723:.././hal/sam3u1c/flash_efc.c ****  *
 724:.././hal/sam3u1c/flash_efc.c ****  * \param ul_start Start address of unlock range.
 725:.././hal/sam3u1c/flash_efc.c ****  * \param ul_end End address of unlock range.
 726:.././hal/sam3u1c/flash_efc.c ****  * \param pul_actual_start Start address of the actual unlock range (optional).
 727:.././hal/sam3u1c/flash_efc.c ****  * \param pul_actual_end End address of the actual unlock range (optional).
 728:.././hal/sam3u1c/flash_efc.c ****  *
 729:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful, otherwise returns an error code.
 730:.././hal/sam3u1c/flash_efc.c ****  */
 731:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
 732:.././hal/sam3u1c/flash_efc.c **** 		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
 733:.././hal/sam3u1c/flash_efc.c **** {
 1473              	 .loc 3 733 1
 1474              	 .cfi_startproc
 1475              	 
 1476              	 
 1477 0000 90B5     	 push {r4,r7,lr}
 1478              	.LCFI86:
 1479              	 .cfi_def_cfa_offset 12
 1480              	 .cfi_offset 4,-12
 1481              	 .cfi_offset 7,-8
 1482              	 .cfi_offset 14,-4
 1483 0002 8BB0     	 sub sp,sp,#44
 1484              	.LCFI87:
 1485              	 .cfi_def_cfa_offset 56
 1486 0004 00AF     	 add r7,sp,#0
 1487              	.LCFI88:
 1488              	 .cfi_def_cfa_register 7
 1489 0006 F860     	 str r0,[r7,#12]
 1490 0008 B960     	 str r1,[r7,#8]
 1491 000a 7A60     	 str r2,[r7,#4]
 1492 000c 3B60     	 str r3,[r7]
 734:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 735:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_actual_start, ul_actual_end;
 736:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_start_page, us_end_page;
 737:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_error;
 738:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_num_pages_in_region =
 1493              	 .loc 3 738 11
 1494 000e 2023     	 movs r3,#32
 1495 0010 FB84     	 strh r3,[r7,#38]
 739:.././hal/sam3u1c/flash_efc.c **** 			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;
 740:.././hal/sam3u1c/flash_efc.c **** 
 741:.././hal/sam3u1c/flash_efc.c **** 	/* Compute actual unlock range and store it */
 742:.././hal/sam3u1c/flash_efc.c **** 	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
 1496              	 .loc 3 742 2
 1497 0012 07F11403 	 add r3,r7,#20
 1498 0016 07F11802 	 add r2,r7,#24
 1499 001a B968     	 ldr r1,[r7,#8]
 1500 001c F868     	 ldr r0,[r7,#12]
 1501 001e 1C4C     	 ldr r4,.L108
 1502 0020 A047     	 blx r4
 1503              	.LVL33:
 743:.././hal/sam3u1c/flash_efc.c **** 	if (pul_actual_start != NULL) {
 1504              	 .loc 3 743 5
 1505 0022 7B68     	 ldr r3,[r7,#4]
 1506 0024 002B     	 cmp r3,#0
 1507 0026 02D0     	 beq .L101
 744:.././hal/sam3u1c/flash_efc.c **** 		*pul_actual_start = ul_actual_start;
 1508              	 .loc 3 744 21
 1509 0028 BA69     	 ldr r2,[r7,#24]
 1510 002a 7B68     	 ldr r3,[r7,#4]
 1511 002c 1A60     	 str r2,[r3]
 1512              	.L101:
 745:.././hal/sam3u1c/flash_efc.c **** 	}
 746:.././hal/sam3u1c/flash_efc.c **** 	if (pul_actual_end != NULL) {
 1513              	 .loc 3 746 5
 1514 002e 3B68     	 ldr r3,[r7]
 1515 0030 002B     	 cmp r3,#0
 1516 0032 02D0     	 beq .L102
 747:.././hal/sam3u1c/flash_efc.c **** 		*pul_actual_end = ul_actual_end;
 1517              	 .loc 3 747 19
 1518 0034 7A69     	 ldr r2,[r7,#20]
 1519 0036 3B68     	 ldr r3,[r7]
 1520 0038 1A60     	 str r2,[r3]
 1521              	.L102:
 748:.././hal/sam3u1c/flash_efc.c **** 	}
 749:.././hal/sam3u1c/flash_efc.c **** 
 750:.././hal/sam3u1c/flash_efc.c **** 	/* Compute page numbers */
 751:.././hal/sam3u1c/flash_efc.c **** 	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
 1522              	 .loc 3 751 2
 1523 003a B969     	 ldr r1,[r7,#24]
 1524 003c 07F11202 	 add r2,r7,#18
 1525 0040 07F11C00 	 add r0,r7,#28
 1526 0044 0023     	 movs r3,#0
 1527 0046 134C     	 ldr r4,.L108+4
 1528 0048 A047     	 blx r4
 1529              	.LVL34:
 752:.././hal/sam3u1c/flash_efc.c **** 	translate_address(0, ul_actual_end, &us_end_page, 0);
 1530              	 .loc 3 752 2
 1531 004a 7969     	 ldr r1,[r7,#20]
 1532 004c 07F11002 	 add r2,r7,#16
 1533 0050 0023     	 movs r3,#0
 1534 0052 0020     	 movs r0,#0
 1535 0054 0F4C     	 ldr r4,.L108+4
 1536 0056 A047     	 blx r4
 1537              	.LVL35:
 753:.././hal/sam3u1c/flash_efc.c **** 
 754:.././hal/sam3u1c/flash_efc.c **** 	/* Unlock all pages */
 755:.././hal/sam3u1c/flash_efc.c **** 	while (us_start_page < us_end_page) {
 1538              	 .loc 3 755 8
 1539 0058 10E0     	 b .L103
 1540              	.L106:
 756:.././hal/sam3u1c/flash_efc.c **** 		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
 1541              	 .loc 3 756 14
 1542 005a FB69     	 ldr r3,[r7,#28]
 1543 005c 7A8A     	 ldrh r2,[r7,#18]
 1544 005e 0921     	 movs r1,#9
 1545 0060 1846     	 mov r0,r3
 1546 0062 0D4B     	 ldr r3,.L108+8
 1547 0064 9847     	 blx r3
 1548              	.LVL36:
 1549 0066 3862     	 str r0,[r7,#32]
 757:.././hal/sam3u1c/flash_efc.c **** 				us_start_page);
 758:.././hal/sam3u1c/flash_efc.c **** 		if (ul_error) {
 1550              	 .loc 3 758 6
 1551 0068 3B6A     	 ldr r3,[r7,#32]
 1552 006a 002B     	 cmp r3,#0
 1553 006c 01D0     	 beq .L104
 759:.././hal/sam3u1c/flash_efc.c **** 			return ul_error;
 1554              	 .loc 3 759 11
 1555 006e 3B6A     	 ldr r3,[r7,#32]
 1556 0070 09E0     	 b .L107
 1557              	.L104:
 760:.././hal/sam3u1c/flash_efc.c **** 		}
 761:.././hal/sam3u1c/flash_efc.c **** 		us_start_page += us_num_pages_in_region;
 1558              	 .loc 3 761 17
 1559 0072 7A8A     	 ldrh r2,[r7,#18]
 1560 0074 FB8C     	 ldrh r3,[r7,#38]
 1561 0076 1344     	 add r3,r3,r2
 1562 0078 9BB2     	 uxth r3,r3
 1563 007a 7B82     	 strh r3,[r7,#18]
 1564              	.L103:
 755:.././hal/sam3u1c/flash_efc.c **** 		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
 1565              	 .loc 3 755 23
 1566 007c 7A8A     	 ldrh r2,[r7,#18]
 1567 007e 3B8A     	 ldrh r3,[r7,#16]
 755:.././hal/sam3u1c/flash_efc.c **** 		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
 1568              	 .loc 3 755 8
 1569 0080 9A42     	 cmp r2,r3
 1570 0082 EAD3     	 bcc .L106
 762:.././hal/sam3u1c/flash_efc.c **** 	}
 763:.././hal/sam3u1c/flash_efc.c **** 
 764:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_OK;
 1571              	 .loc 3 764 9
 1572 0084 0023     	 movs r3,#0
 1573              	.L107:
 765:.././hal/sam3u1c/flash_efc.c **** }
 1574              	 .loc 3 765 1 discriminator 1
 1575 0086 1846     	 mov r0,r3
 1576 0088 2C37     	 adds r7,r7,#44
 1577              	.LCFI89:
 1578              	 .cfi_def_cfa_offset 12
 1579 008a BD46     	 mov sp,r7
 1580              	.LCFI90:
 1581              	 .cfi_def_cfa_register 13
 1582              	 
 1583 008c 90BD     	 pop {r4,r7,pc}
 1584              	.L109:
 1585 008e 00BF     	 .align 2
 1586              	.L108:
 1587 0090 00000000 	 .word compute_lock_range
 1588 0094 00000000 	 .word translate_address
 1589 0098 00000000 	 .word efc_perform_command
 1590              	 .cfi_endproc
 1591              	.LFE103:
 1593              	 .section .text.flash_is_locked,"ax",%progbits
 1594              	 .align 1
 1595              	 .global flash_is_locked
 1596              	 .syntax unified
 1597              	 .thumb
 1598              	 .thumb_func
 1599              	 .fpu softvfp
 1601              	flash_is_locked:
 1602              	.LFB104:
 766:.././hal/sam3u1c/flash_efc.c **** 
 767:.././hal/sam3u1c/flash_efc.c **** /**
 768:.././hal/sam3u1c/flash_efc.c ****  * \brief Get the number of locked regions inside the given address range.
 769:.././hal/sam3u1c/flash_efc.c ****  *
 770:.././hal/sam3u1c/flash_efc.c ****  * \param ul_start Start address of range
 771:.././hal/sam3u1c/flash_efc.c ****  * \param ul_end End address of range.
 772:.././hal/sam3u1c/flash_efc.c ****  *
 773:.././hal/sam3u1c/flash_efc.c ****  * \return The number of locked regions inside the given address range.
 774:.././hal/sam3u1c/flash_efc.c ****  */
 775:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_is_locked(uint32_t ul_start, uint32_t ul_end)
 776:.././hal/sam3u1c/flash_efc.c **** {
 1603              	 .loc 3 776 1
 1604              	 .cfi_startproc
 1605              	 
 1606              	 
 1607 0000 90B5     	 push {r4,r7,lr}
 1608              	.LCFI91:
 1609              	 .cfi_def_cfa_offset 12
 1610              	 .cfi_offset 4,-12
 1611              	 .cfi_offset 7,-8
 1612              	 .cfi_offset 14,-4
 1613 0002 8BB0     	 sub sp,sp,#44
 1614              	.LCFI92:
 1615              	 .cfi_def_cfa_offset 56
 1616 0004 00AF     	 add r7,sp,#0
 1617              	.LCFI93:
 1618              	 .cfi_def_cfa_register 7
 1619 0006 7860     	 str r0,[r7,#4]
 1620 0008 3960     	 str r1,[r7]
 777:.././hal/sam3u1c/flash_efc.c **** 	Efc *p_efc;
 778:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_start_page, us_end_page;
 779:.././hal/sam3u1c/flash_efc.c **** 	uint8_t uc_start_region, uc_end_region;
 780:.././hal/sam3u1c/flash_efc.c **** 	uint16_t us_num_pages_in_region;
 781:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_status;
 782:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_error;
 783:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_num_locked_regions = 0;
 1621              	 .loc 3 783 11
 1622 000a 0023     	 movs r3,#0
 1623 000c 3B62     	 str r3,[r7,#32]
 784:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_count = 0;
 1624              	 .loc 3 784 11
 1625 000e 0023     	 movs r3,#0
 1626 0010 FB61     	 str r3,[r7,#28]
 785:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_bit = 0;
 1627              	 .loc 3 785 11
 1628 0012 0023     	 movs r3,#0
 1629 0014 BB61     	 str r3,[r7,#24]
 786:.././hal/sam3u1c/flash_efc.c **** 
 787:.././hal/sam3u1c/flash_efc.c **** 	Assert(ul_end >= ul_start);
 788:.././hal/sam3u1c/flash_efc.c **** 
 789:.././hal/sam3u1c/flash_efc.c **** #ifdef EFC1
 790:.././hal/sam3u1c/flash_efc.c **** 	Assert(((ul_start >= IFLASH0_ADDR)
 791:.././hal/sam3u1c/flash_efc.c **** 				&& (ul_end <= IFLASH0_ADDR + IFLASH0_SIZE))
 792:.././hal/sam3u1c/flash_efc.c **** 				|| ((ul_start >= IFLASH1_ADDR)
 793:.././hal/sam3u1c/flash_efc.c **** 					&& (ul_end <= IFLASH1_ADDR + IFLASH1_SIZE)));
 794:.././hal/sam3u1c/flash_efc.c **** #else
 795:.././hal/sam3u1c/flash_efc.c **** 	Assert((ul_start >= IFLASH_ADDR)
 796:.././hal/sam3u1c/flash_efc.c **** 				&& (ul_end <= IFLASH_ADDR + IFLASH_SIZE));
 797:.././hal/sam3u1c/flash_efc.c **** #endif
 798:.././hal/sam3u1c/flash_efc.c **** 
 799:.././hal/sam3u1c/flash_efc.c **** 	/* Compute page numbers */
 800:.././hal/sam3u1c/flash_efc.c **** 	translate_address(&p_efc, ul_start, &us_start_page, 0);
 1630              	 .loc 3 800 2
 1631 0016 07F10A02 	 add r2,r7,#10
 1632 001a 07F10C00 	 add r0,r7,#12
 1633 001e 0023     	 movs r3,#0
 1634 0020 7968     	 ldr r1,[r7,#4]
 1635 0022 344C     	 ldr r4,.L119
 1636 0024 A047     	 blx r4
 1637              	.LVL37:
 801:.././hal/sam3u1c/flash_efc.c **** 	translate_address(0, ul_end, &us_end_page, 0);
 1638              	 .loc 3 801 2
 1639 0026 07F10802 	 add r2,r7,#8
 1640 002a 0023     	 movs r3,#0
 1641 002c 3968     	 ldr r1,[r7]
 1642 002e 0020     	 movs r0,#0
 1643 0030 304C     	 ldr r4,.L119
 1644 0032 A047     	 blx r4
 1645              	.LVL38:
 802:.././hal/sam3u1c/flash_efc.c **** 
 803:.././hal/sam3u1c/flash_efc.c **** 	/* Compute region numbers */
 804:.././hal/sam3u1c/flash_efc.c **** 	us_num_pages_in_region = IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;
 1646              	 .loc 3 804 25
 1647 0034 2023     	 movs r3,#32
 1648 0036 FB82     	 strh r3,[r7,#22]
 805:.././hal/sam3u1c/flash_efc.c **** 	uc_start_region = us_start_page / us_num_pages_in_region;
 1649              	 .loc 3 805 18
 1650 0038 7A89     	 ldrh r2,[r7,#10]
 1651 003a FB8A     	 ldrh r3,[r7,#22]
 1652 003c B2FBF3F3 	 udiv r3,r2,r3
 1653 0040 9BB2     	 uxth r3,r3
 1654 0042 7B75     	 strb r3,[r7,#21]
 806:.././hal/sam3u1c/flash_efc.c **** 	uc_end_region = us_end_page / us_num_pages_in_region;
 1655              	 .loc 3 806 16
 1656 0044 3A89     	 ldrh r2,[r7,#8]
 1657 0046 FB8A     	 ldrh r3,[r7,#22]
 1658 0048 B2FBF3F3 	 udiv r3,r2,r3
 1659 004c 9BB2     	 uxth r3,r3
 1660 004e 3B75     	 strb r3,[r7,#20]
 807:.././hal/sam3u1c/flash_efc.c **** 
 808:.././hal/sam3u1c/flash_efc.c **** 	/* Retrieve lock status */
 809:.././hal/sam3u1c/flash_efc.c **** 	ul_error = efc_perform_command(p_efc, EFC_FCMD_GLB, 0);
 1661              	 .loc 3 809 13
 1662 0050 FB68     	 ldr r3,[r7,#12]
 1663 0052 0022     	 movs r2,#0
 1664 0054 0A21     	 movs r1,#10
 1665 0056 1846     	 mov r0,r3
 1666 0058 274B     	 ldr r3,.L119+4
 1667 005a 9847     	 blx r3
 1668              	.LVL39:
 1669 005c 3861     	 str r0,[r7,#16]
 810:.././hal/sam3u1c/flash_efc.c **** 	if (ul_error) {
 1670              	 .loc 3 810 5
 1671 005e 3B69     	 ldr r3,[r7,#16]
 1672 0060 002B     	 cmp r3,#0
 1673 0062 01D0     	 beq .L111
 811:.././hal/sam3u1c/flash_efc.c **** 		return ul_error;
 1674              	 .loc 3 811 10
 1675 0064 3B69     	 ldr r3,[r7,#16]
 1676 0066 40E0     	 b .L118
 1677              	.L111:
 812:.././hal/sam3u1c/flash_efc.c **** 	}
 813:.././hal/sam3u1c/flash_efc.c ****     UNUSED(ul_error);
 814:.././hal/sam3u1c/flash_efc.c **** 
 815:.././hal/sam3u1c/flash_efc.c **** 	/* Skip unrequested regions (if necessary) */
 816:.././hal/sam3u1c/flash_efc.c **** 	ul_status = efc_get_result(p_efc);
 1678              	 .loc 3 816 14
 1679 0068 FB68     	 ldr r3,[r7,#12]
 1680 006a 1846     	 mov r0,r3
 1681 006c 234B     	 ldr r3,.L119+8
 1682 006e 9847     	 blx r3
 1683              	.LVL40:
 1684 0070 7862     	 str r0,[r7,#36]
 817:.././hal/sam3u1c/flash_efc.c **** 	while (!(ul_count <= uc_start_region &&
 1685              	 .loc 3 817 8
 1686 0072 07E0     	 b .L113
 1687              	.L114:
 818:.././hal/sam3u1c/flash_efc.c **** 			uc_start_region < (ul_count + 32))) {
 819:.././hal/sam3u1c/flash_efc.c **** 		ul_status = efc_get_result(p_efc);
 1688              	 .loc 3 819 15
 1689 0074 FB68     	 ldr r3,[r7,#12]
 1690 0076 1846     	 mov r0,r3
 1691 0078 204B     	 ldr r3,.L119+8
 1692 007a 9847     	 blx r3
 1693              	.LVL41:
 1694 007c 7862     	 str r0,[r7,#36]
 820:.././hal/sam3u1c/flash_efc.c **** 		ul_count += 32;
 1695              	 .loc 3 820 12
 1696 007e FB69     	 ldr r3,[r7,#28]
 1697 0080 2033     	 adds r3,r3,#32
 1698 0082 FB61     	 str r3,[r7,#28]
 1699              	.L113:
 817:.././hal/sam3u1c/flash_efc.c **** 	while (!(ul_count <= uc_start_region &&
 1700              	 .loc 3 817 20
 1701 0084 7B7D     	 ldrb r3,[r7,#21]
 817:.././hal/sam3u1c/flash_efc.c **** 	while (!(ul_count <= uc_start_region &&
 1702              	 .loc 3 817 8
 1703 0086 FA69     	 ldr r2,[r7,#28]
 1704 0088 9A42     	 cmp r2,r3
 1705 008a F3D8     	 bhi .L114
 818:.././hal/sam3u1c/flash_efc.c **** 			uc_start_region < (ul_count + 32))) {
 1706              	 .loc 3 818 20 discriminator 1
 1707 008c 7A7D     	 ldrb r2,[r7,#21]
 818:.././hal/sam3u1c/flash_efc.c **** 			uc_start_region < (ul_count + 32))) {
 1708              	 .loc 3 818 32 discriminator 1
 1709 008e FB69     	 ldr r3,[r7,#28]
 1710 0090 2033     	 adds r3,r3,#32
 817:.././hal/sam3u1c/flash_efc.c **** 	while (!(ul_count <= uc_start_region &&
 1711              	 .loc 3 817 9 discriminator 1
 1712 0092 9A42     	 cmp r2,r3
 1713 0094 EED2     	 bcs .L114
 821:.././hal/sam3u1c/flash_efc.c **** 	}
 822:.././hal/sam3u1c/flash_efc.c **** 
 823:.././hal/sam3u1c/flash_efc.c **** 	/* Check status of each involved region */
 824:.././hal/sam3u1c/flash_efc.c **** 	ul_bit = uc_start_region - ul_count;
 1714              	 .loc 3 824 27
 1715 0096 7A7D     	 ldrb r2,[r7,#21]
 1716              	 .loc 3 824 9
 1717 0098 FB69     	 ldr r3,[r7,#28]
 1718 009a D31A     	 subs r3,r2,r3
 1719 009c BB61     	 str r3,[r7,#24]
 825:.././hal/sam3u1c/flash_efc.c **** 
 826:.././hal/sam3u1c/flash_efc.c **** 	/* Number of region to check (must be > 0) */
 827:.././hal/sam3u1c/flash_efc.c **** 	ul_count = uc_end_region - uc_start_region + 1;
 1720              	 .loc 3 827 27
 1721 009e 3A7D     	 ldrb r2,[r7,#20]
 1722 00a0 7B7D     	 ldrb r3,[r7,#21]
 1723 00a2 D31A     	 subs r3,r2,r3
 1724              	 .loc 3 827 45
 1725 00a4 0133     	 adds r3,r3,#1
 1726              	 .loc 3 827 11
 1727 00a6 FB61     	 str r3,[r7,#28]
 828:.././hal/sam3u1c/flash_efc.c **** 
 829:.././hal/sam3u1c/flash_efc.c **** 	while (ul_count > 0) {
 1728              	 .loc 3 829 8
 1729 00a8 1BE0     	 b .L115
 1730              	.L117:
 830:.././hal/sam3u1c/flash_efc.c **** 		if (ul_status & (1 << (ul_bit))) {
 1731              	 .loc 3 830 22
 1732 00aa 0122     	 movs r2,#1
 1733 00ac BB69     	 ldr r3,[r7,#24]
 1734 00ae 02FA03F3 	 lsl r3,r2,r3
 1735 00b2 1A46     	 mov r2,r3
 1736              	 .loc 3 830 17
 1737 00b4 7B6A     	 ldr r3,[r7,#36]
 1738 00b6 1340     	 ands r3,r3,r2
 1739              	 .loc 3 830 6
 1740 00b8 002B     	 cmp r3,#0
 1741 00ba 02D0     	 beq .L116
 831:.././hal/sam3u1c/flash_efc.c **** 			ul_num_locked_regions++;
 1742              	 .loc 3 831 25
 1743 00bc 3B6A     	 ldr r3,[r7,#32]
 1744 00be 0133     	 adds r3,r3,#1
 1745 00c0 3B62     	 str r3,[r7,#32]
 1746              	.L116:
 832:.././hal/sam3u1c/flash_efc.c **** 		}
 833:.././hal/sam3u1c/flash_efc.c **** 
 834:.././hal/sam3u1c/flash_efc.c **** 		ul_count -= 1;
 1747              	 .loc 3 834 12
 1748 00c2 FB69     	 ldr r3,[r7,#28]
 1749 00c4 013B     	 subs r3,r3,#1
 1750 00c6 FB61     	 str r3,[r7,#28]
 835:.././hal/sam3u1c/flash_efc.c **** 		ul_bit += 1;
 1751              	 .loc 3 835 10
 1752 00c8 BB69     	 ldr r3,[r7,#24]
 1753 00ca 0133     	 adds r3,r3,#1
 1754 00cc BB61     	 str r3,[r7,#24]
 836:.././hal/sam3u1c/flash_efc.c **** 		if (ul_bit == 32) {
 1755              	 .loc 3 836 6
 1756 00ce BB69     	 ldr r3,[r7,#24]
 1757 00d0 202B     	 cmp r3,#32
 1758 00d2 06D1     	 bne .L115
 837:.././hal/sam3u1c/flash_efc.c **** 			ul_status = efc_get_result(p_efc);
 1759              	 .loc 3 837 16
 1760 00d4 FB68     	 ldr r3,[r7,#12]
 1761 00d6 1846     	 mov r0,r3
 1762 00d8 084B     	 ldr r3,.L119+8
 1763 00da 9847     	 blx r3
 1764              	.LVL42:
 1765 00dc 7862     	 str r0,[r7,#36]
 838:.././hal/sam3u1c/flash_efc.c **** 			ul_bit = 0;
 1766              	 .loc 3 838 11
 1767 00de 0023     	 movs r3,#0
 1768 00e0 BB61     	 str r3,[r7,#24]
 1769              	.L115:
 829:.././hal/sam3u1c/flash_efc.c **** 		if (ul_status & (1 << (ul_bit))) {
 1770              	 .loc 3 829 8
 1771 00e2 FB69     	 ldr r3,[r7,#28]
 1772 00e4 002B     	 cmp r3,#0
 1773 00e6 E0D1     	 bne .L117
 839:.././hal/sam3u1c/flash_efc.c **** 		}
 840:.././hal/sam3u1c/flash_efc.c **** 	}
 841:.././hal/sam3u1c/flash_efc.c **** 
 842:.././hal/sam3u1c/flash_efc.c **** 	return ul_num_locked_regions;
 1774              	 .loc 3 842 9
 1775 00e8 3B6A     	 ldr r3,[r7,#32]
 1776              	.L118:
 843:.././hal/sam3u1c/flash_efc.c **** }
 1777              	 .loc 3 843 1 discriminator 1
 1778 00ea 1846     	 mov r0,r3
 1779 00ec 2C37     	 adds r7,r7,#44
 1780              	.LCFI94:
 1781              	 .cfi_def_cfa_offset 12
 1782 00ee BD46     	 mov sp,r7
 1783              	.LCFI95:
 1784              	 .cfi_def_cfa_register 13
 1785              	 
 1786 00f0 90BD     	 pop {r4,r7,pc}
 1787              	.L120:
 1788 00f2 00BF     	 .align 2
 1789              	.L119:
 1790 00f4 00000000 	 .word translate_address
 1791 00f8 00000000 	 .word efc_perform_command
 1792 00fc 00000000 	 .word efc_get_result
 1793              	 .cfi_endproc
 1794              	.LFE104:
 1796              	 .section .text.flash_set_gpnvm,"ax",%progbits
 1797              	 .align 1
 1798              	 .global flash_set_gpnvm
 1799              	 .syntax unified
 1800              	 .thumb
 1801              	 .thumb_func
 1802              	 .fpu softvfp
 1804              	flash_set_gpnvm:
 1805              	.LFB105:
 844:.././hal/sam3u1c/flash_efc.c **** 
 845:.././hal/sam3u1c/flash_efc.c **** /**
 846:.././hal/sam3u1c/flash_efc.c ****  * \brief Set the given GPNVM bit.
 847:.././hal/sam3u1c/flash_efc.c ****  *
 848:.././hal/sam3u1c/flash_efc.c ****  * \param ul_gpnvm GPNVM bit index.
 849:.././hal/sam3u1c/flash_efc.c ****  *
 850:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful; otherwise returns an error code.
 851:.././hal/sam3u1c/flash_efc.c ****  */
 852:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
 853:.././hal/sam3u1c/flash_efc.c **** {
 1806              	 .loc 3 853 1
 1807              	 .cfi_startproc
 1808              	 
 1809              	 
 1810 0000 80B5     	 push {r7,lr}
 1811              	.LCFI96:
 1812              	 .cfi_def_cfa_offset 8
 1813              	 .cfi_offset 7,-8
 1814              	 .cfi_offset 14,-4
 1815 0002 82B0     	 sub sp,sp,#8
 1816              	.LCFI97:
 1817              	 .cfi_def_cfa_offset 16
 1818 0004 00AF     	 add r7,sp,#0
 1819              	.LCFI98:
 1820              	 .cfi_def_cfa_register 7
 1821 0006 7860     	 str r0,[r7,#4]
 854:.././hal/sam3u1c/flash_efc.c **** 	if (ul_gpnvm >= GPNVM_NUM_MAX) {
 1822              	 .loc 3 854 5
 1823 0008 7B68     	 ldr r3,[r7,#4]
 1824 000a 012B     	 cmp r3,#1
 1825 000c 01D9     	 bls .L122
 855:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_INVALID;
 1826              	 .loc 3 855 10
 1827 000e 1123     	 movs r3,#17
 1828 0010 12E0     	 b .L123
 1829              	.L122:
 856:.././hal/sam3u1c/flash_efc.c **** 	}
 857:.././hal/sam3u1c/flash_efc.c **** 
 858:.././hal/sam3u1c/flash_efc.c **** 	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
 1830              	 .loc 3 858 22
 1831 0012 7868     	 ldr r0,[r7,#4]
 1832 0014 0A4B     	 ldr r3,.L126
 1833 0016 9847     	 blx r3
 1834              	.LVL43:
 1835 0018 0346     	 mov r3,r0
 1836              	 .loc 3 858 5
 1837 001a 012B     	 cmp r3,#1
 1838 001c 01D1     	 bne .L124
 859:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_OK;
 1839              	 .loc 3 859 10
 1840 001e 0023     	 movs r3,#0
 1841 0020 0AE0     	 b .L123
 1842              	.L124:
 860:.././hal/sam3u1c/flash_efc.c **** 	}
 861:.././hal/sam3u1c/flash_efc.c **** 
 862:.././hal/sam3u1c/flash_efc.c **** 	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
 1843              	 .loc 3 862 19
 1844 0022 7A68     	 ldr r2,[r7,#4]
 1845 0024 0B21     	 movs r1,#11
 1846 0026 0748     	 ldr r0,.L126+4
 1847 0028 074B     	 ldr r3,.L126+8
 1848 002a 9847     	 blx r3
 1849              	.LVL44:
 1850 002c 0346     	 mov r3,r0
 1851              	 .loc 3 862 5
 1852 002e 002B     	 cmp r3,#0
 1853 0030 01D1     	 bne .L125
 863:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_OK;
 1854              	 .loc 3 863 10
 1855 0032 0023     	 movs r3,#0
 1856 0034 00E0     	 b .L123
 1857              	.L125:
 864:.././hal/sam3u1c/flash_efc.c **** 	}
 865:.././hal/sam3u1c/flash_efc.c **** 
 866:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_ERROR;
 1858              	 .loc 3 866 9
 1859 0036 1023     	 movs r3,#16
 1860              	.L123:
 867:.././hal/sam3u1c/flash_efc.c **** }
 1861              	 .loc 3 867 1
 1862 0038 1846     	 mov r0,r3
 1863 003a 0837     	 adds r7,r7,#8
 1864              	.LCFI99:
 1865              	 .cfi_def_cfa_offset 8
 1866 003c BD46     	 mov sp,r7
 1867              	.LCFI100:
 1868              	 .cfi_def_cfa_register 13
 1869              	 
 1870 003e 80BD     	 pop {r7,pc}
 1871              	.L127:
 1872              	 .align 2
 1873              	.L126:
 1874 0040 00000000 	 .word flash_is_gpnvm_set
 1875 0044 00080E40 	 .word 1074661376
 1876 0048 00000000 	 .word efc_perform_command
 1877              	 .cfi_endproc
 1878              	.LFE105:
 1880              	 .section .text.flash_clear_gpnvm,"ax",%progbits
 1881              	 .align 1
 1882              	 .global flash_clear_gpnvm
 1883              	 .syntax unified
 1884              	 .thumb
 1885              	 .thumb_func
 1886              	 .fpu softvfp
 1888              	flash_clear_gpnvm:
 1889              	.LFB106:
 868:.././hal/sam3u1c/flash_efc.c **** 
 869:.././hal/sam3u1c/flash_efc.c **** /**
 870:.././hal/sam3u1c/flash_efc.c ****  * \brief Clear the given GPNVM bit.
 871:.././hal/sam3u1c/flash_efc.c ****  *
 872:.././hal/sam3u1c/flash_efc.c ****  * \param ul_gpnvm GPNVM bit index.
 873:.././hal/sam3u1c/flash_efc.c ****  *
 874:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful; otherwise returns an error code.
 875:.././hal/sam3u1c/flash_efc.c ****  */
 876:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_clear_gpnvm(uint32_t ul_gpnvm)
 877:.././hal/sam3u1c/flash_efc.c **** {
 1890              	 .loc 3 877 1
 1891              	 .cfi_startproc
 1892              	 
 1893              	 
 1894 0000 80B5     	 push {r7,lr}
 1895              	.LCFI101:
 1896              	 .cfi_def_cfa_offset 8
 1897              	 .cfi_offset 7,-8
 1898              	 .cfi_offset 14,-4
 1899 0002 82B0     	 sub sp,sp,#8
 1900              	.LCFI102:
 1901              	 .cfi_def_cfa_offset 16
 1902 0004 00AF     	 add r7,sp,#0
 1903              	.LCFI103:
 1904              	 .cfi_def_cfa_register 7
 1905 0006 7860     	 str r0,[r7,#4]
 878:.././hal/sam3u1c/flash_efc.c **** 	if (ul_gpnvm >= GPNVM_NUM_MAX) {
 1906              	 .loc 3 878 5
 1907 0008 7B68     	 ldr r3,[r7,#4]
 1908 000a 012B     	 cmp r3,#1
 1909 000c 01D9     	 bls .L129
 879:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_INVALID;
 1910              	 .loc 3 879 10
 1911 000e 1123     	 movs r3,#17
 1912 0010 12E0     	 b .L130
 1913              	.L129:
 880:.././hal/sam3u1c/flash_efc.c **** 	}
 881:.././hal/sam3u1c/flash_efc.c **** 
 882:.././hal/sam3u1c/flash_efc.c **** 	if (FLASH_RC_NO == flash_is_gpnvm_set(ul_gpnvm)) {
 1914              	 .loc 3 882 21
 1915 0012 7868     	 ldr r0,[r7,#4]
 1916 0014 0A4B     	 ldr r3,.L133
 1917 0016 9847     	 blx r3
 1918              	.LVL45:
 1919 0018 0346     	 mov r3,r0
 1920              	 .loc 3 882 5
 1921 001a 002B     	 cmp r3,#0
 1922 001c 01D1     	 bne .L131
 883:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_OK;
 1923              	 .loc 3 883 10
 1924 001e 0023     	 movs r3,#0
 1925 0020 0AE0     	 b .L130
 1926              	.L131:
 884:.././hal/sam3u1c/flash_efc.c **** 	}
 885:.././hal/sam3u1c/flash_efc.c **** 
 886:.././hal/sam3u1c/flash_efc.c **** 	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_CGPB, ul_gpnvm)) {
 1927              	 .loc 3 886 19
 1928 0022 7A68     	 ldr r2,[r7,#4]
 1929 0024 0C21     	 movs r1,#12
 1930 0026 0748     	 ldr r0,.L133+4
 1931 0028 074B     	 ldr r3,.L133+8
 1932 002a 9847     	 blx r3
 1933              	.LVL46:
 1934 002c 0346     	 mov r3,r0
 1935              	 .loc 3 886 5
 1936 002e 002B     	 cmp r3,#0
 1937 0030 01D1     	 bne .L132
 887:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_OK;
 1938              	 .loc 3 887 10
 1939 0032 0023     	 movs r3,#0
 1940 0034 00E0     	 b .L130
 1941              	.L132:
 888:.././hal/sam3u1c/flash_efc.c **** 	}
 889:.././hal/sam3u1c/flash_efc.c **** 
 890:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_ERROR;
 1942              	 .loc 3 890 9
 1943 0036 1023     	 movs r3,#16
 1944              	.L130:
 891:.././hal/sam3u1c/flash_efc.c **** }
 1945              	 .loc 3 891 1
 1946 0038 1846     	 mov r0,r3
 1947 003a 0837     	 adds r7,r7,#8
 1948              	.LCFI104:
 1949              	 .cfi_def_cfa_offset 8
 1950 003c BD46     	 mov sp,r7
 1951              	.LCFI105:
 1952              	 .cfi_def_cfa_register 13
 1953              	 
 1954 003e 80BD     	 pop {r7,pc}
 1955              	.L134:
 1956              	 .align 2
 1957              	.L133:
 1958 0040 00000000 	 .word flash_is_gpnvm_set
 1959 0044 00080E40 	 .word 1074661376
 1960 0048 00000000 	 .word efc_perform_command
 1961              	 .cfi_endproc
 1962              	.LFE106:
 1964              	 .section .text.flash_is_gpnvm_set,"ax",%progbits
 1965              	 .align 1
 1966              	 .global flash_is_gpnvm_set
 1967              	 .syntax unified
 1968              	 .thumb
 1969              	 .thumb_func
 1970              	 .fpu softvfp
 1972              	flash_is_gpnvm_set:
 1973              	.LFB107:
 892:.././hal/sam3u1c/flash_efc.c **** 
 893:.././hal/sam3u1c/flash_efc.c **** /**
 894:.././hal/sam3u1c/flash_efc.c ****  * \brief Check if the given GPNVM bit is set or not.
 895:.././hal/sam3u1c/flash_efc.c ****  *
 896:.././hal/sam3u1c/flash_efc.c ****  * \param ul_gpnvm GPNVM bit index.
 897:.././hal/sam3u1c/flash_efc.c ****  *
 898:.././hal/sam3u1c/flash_efc.c ****  * \retval 1 If the given GPNVM bit is currently set.
 899:.././hal/sam3u1c/flash_efc.c ****  * \retval 0 If the given GPNVM bit is currently cleared.
 900:.././hal/sam3u1c/flash_efc.c ****  * otherwise returns an error code.
 901:.././hal/sam3u1c/flash_efc.c ****  */
 902:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
 903:.././hal/sam3u1c/flash_efc.c **** {
 1974              	 .loc 3 903 1
 1975              	 .cfi_startproc
 1976              	 
 1977              	 
 1978 0000 80B5     	 push {r7,lr}
 1979              	.LCFI106:
 1980              	 .cfi_def_cfa_offset 8
 1981              	 .cfi_offset 7,-8
 1982              	 .cfi_offset 14,-4
 1983 0002 84B0     	 sub sp,sp,#16
 1984              	.LCFI107:
 1985              	 .cfi_def_cfa_offset 24
 1986 0004 00AF     	 add r7,sp,#0
 1987              	.LCFI108:
 1988              	 .cfi_def_cfa_register 7
 1989 0006 7860     	 str r0,[r7,#4]
 904:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_gpnvm_bits;
 905:.././hal/sam3u1c/flash_efc.c **** 
 906:.././hal/sam3u1c/flash_efc.c **** 	if (ul_gpnvm >= GPNVM_NUM_MAX) {
 1990              	 .loc 3 906 5
 1991 0008 7B68     	 ldr r3,[r7,#4]
 1992 000a 012B     	 cmp r3,#1
 1993 000c 01D9     	 bls .L136
 907:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_INVALID;
 1994              	 .loc 3 907 10
 1995 000e 1123     	 movs r3,#17
 1996 0010 19E0     	 b .L137
 1997              	.L136:
 908:.././hal/sam3u1c/flash_efc.c **** 	}
 909:.././hal/sam3u1c/flash_efc.c **** 
 910:.././hal/sam3u1c/flash_efc.c **** 	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
 1998              	 .loc 3 910 19
 1999 0012 0022     	 movs r2,#0
 2000 0014 0D21     	 movs r1,#13
 2001 0016 0E48     	 ldr r0,.L140
 2002 0018 0E4B     	 ldr r3,.L140+4
 2003 001a 9847     	 blx r3
 2004              	.LVL47:
 2005 001c 0346     	 mov r3,r0
 2006              	 .loc 3 910 5
 2007 001e 002B     	 cmp r3,#0
 2008 0020 01D0     	 beq .L138
 911:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_ERROR;
 2009              	 .loc 3 911 10
 2010 0022 1023     	 movs r3,#16
 2011 0024 0FE0     	 b .L137
 2012              	.L138:
 912:.././hal/sam3u1c/flash_efc.c **** 	}
 913:.././hal/sam3u1c/flash_efc.c **** 
 914:.././hal/sam3u1c/flash_efc.c **** 	ul_gpnvm_bits = efc_get_result(EFC);
 2013              	 .loc 3 914 18
 2014 0026 0A48     	 ldr r0,.L140
 2015 0028 0B4B     	 ldr r3,.L140+8
 2016 002a 9847     	 blx r3
 2017              	.LVL48:
 2018 002c F860     	 str r0,[r7,#12]
 915:.././hal/sam3u1c/flash_efc.c **** 	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
 2019              	 .loc 3 915 25
 2020 002e 0122     	 movs r2,#1
 2021 0030 7B68     	 ldr r3,[r7,#4]
 2022 0032 02FA03F3 	 lsl r3,r2,r3
 2023 0036 1A46     	 mov r2,r3
 2024              	 .loc 3 915 20
 2025 0038 FB68     	 ldr r3,[r7,#12]
 2026 003a 1340     	 ands r3,r3,r2
 2027              	 .loc 3 915 5
 2028 003c 002B     	 cmp r3,#0
 2029 003e 01D0     	 beq .L139
 916:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_YES;
 2030              	 .loc 3 916 10
 2031 0040 0123     	 movs r3,#1
 2032 0042 00E0     	 b .L137
 2033              	.L139:
 917:.././hal/sam3u1c/flash_efc.c **** 	}
 918:.././hal/sam3u1c/flash_efc.c **** 
 919:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_NO;
 2034              	 .loc 3 919 9
 2035 0044 0023     	 movs r3,#0
 2036              	.L137:
 920:.././hal/sam3u1c/flash_efc.c **** }
 2037              	 .loc 3 920 1
 2038 0046 1846     	 mov r0,r3
 2039 0048 1037     	 adds r7,r7,#16
 2040              	.LCFI109:
 2041              	 .cfi_def_cfa_offset 8
 2042 004a BD46     	 mov sp,r7
 2043              	.LCFI110:
 2044              	 .cfi_def_cfa_register 13
 2045              	 
 2046 004c 80BD     	 pop {r7,pc}
 2047              	.L141:
 2048 004e 00BF     	 .align 2
 2049              	.L140:
 2050 0050 00080E40 	 .word 1074661376
 2051 0054 00000000 	 .word efc_perform_command
 2052 0058 00000000 	 .word efc_get_result
 2053              	 .cfi_endproc
 2054              	.LFE107:
 2056              	 .section .text.flash_enable_security_bit,"ax",%progbits
 2057              	 .align 1
 2058              	 .global flash_enable_security_bit
 2059              	 .syntax unified
 2060              	 .thumb
 2061              	 .thumb_func
 2062              	 .fpu softvfp
 2064              	flash_enable_security_bit:
 2065              	.LFB108:
 921:.././hal/sam3u1c/flash_efc.c **** 
 922:.././hal/sam3u1c/flash_efc.c **** /**
 923:.././hal/sam3u1c/flash_efc.c ****  * \brief Set security bit.
 924:.././hal/sam3u1c/flash_efc.c ****  *
 925:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful; otherwise returns an error code.
 926:.././hal/sam3u1c/flash_efc.c ****  */
 927:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_enable_security_bit(void)
 928:.././hal/sam3u1c/flash_efc.c **** {
 2066              	 .loc 3 928 1
 2067              	 .cfi_startproc
 2068              	 
 2069              	 
 2070 0000 80B5     	 push {r7,lr}
 2071              	.LCFI111:
 2072              	 .cfi_def_cfa_offset 8
 2073              	 .cfi_offset 7,-8
 2074              	 .cfi_offset 14,-4
 2075 0002 00AF     	 add r7,sp,#0
 2076              	.LCFI112:
 2077              	 .cfi_def_cfa_register 7
 929:.././hal/sam3u1c/flash_efc.c **** 	return flash_set_gpnvm(0);
 2078              	 .loc 3 929 9
 2079 0004 0020     	 movs r0,#0
 2080 0006 024B     	 ldr r3,.L144
 2081 0008 9847     	 blx r3
 2082              	.LVL49:
 2083 000a 0346     	 mov r3,r0
 930:.././hal/sam3u1c/flash_efc.c **** }
 2084              	 .loc 3 930 1
 2085 000c 1846     	 mov r0,r3
 2086 000e 80BD     	 pop {r7,pc}
 2087              	.L145:
 2088              	 .align 2
 2089              	.L144:
 2090 0010 00000000 	 .word flash_set_gpnvm
 2091              	 .cfi_endproc
 2092              	.LFE108:
 2094              	 .section .text.flash_is_security_bit_enabled,"ax",%progbits
 2095              	 .align 1
 2096              	 .global flash_is_security_bit_enabled
 2097              	 .syntax unified
 2098              	 .thumb
 2099              	 .thumb_func
 2100              	 .fpu softvfp
 2102              	flash_is_security_bit_enabled:
 2103              	.LFB109:
 931:.././hal/sam3u1c/flash_efc.c **** 
 932:.././hal/sam3u1c/flash_efc.c **** /**
 933:.././hal/sam3u1c/flash_efc.c ****  * \brief Check if the security bit is set or not.
 934:.././hal/sam3u1c/flash_efc.c ****  *
 935:.././hal/sam3u1c/flash_efc.c ****  * \retval 1 If the security bit is currently set.
 936:.././hal/sam3u1c/flash_efc.c ****  * \retval 0 If the security bit is currently cleared.
 937:.././hal/sam3u1c/flash_efc.c ****  * otherwise returns an error code.
 938:.././hal/sam3u1c/flash_efc.c ****  */
 939:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_is_security_bit_enabled(void)
 940:.././hal/sam3u1c/flash_efc.c **** {
 2104              	 .loc 3 940 1
 2105              	 .cfi_startproc
 2106              	 
 2107              	 
 2108 0000 80B5     	 push {r7,lr}
 2109              	.LCFI113:
 2110              	 .cfi_def_cfa_offset 8
 2111              	 .cfi_offset 7,-8
 2112              	 .cfi_offset 14,-4
 2113 0002 00AF     	 add r7,sp,#0
 2114              	.LCFI114:
 2115              	 .cfi_def_cfa_register 7
 941:.././hal/sam3u1c/flash_efc.c **** 	return flash_is_gpnvm_set(0);
 2116              	 .loc 3 941 9
 2117 0004 0020     	 movs r0,#0
 2118 0006 024B     	 ldr r3,.L148
 2119 0008 9847     	 blx r3
 2120              	.LVL50:
 2121 000a 0346     	 mov r3,r0
 942:.././hal/sam3u1c/flash_efc.c **** }
 2122              	 .loc 3 942 1
 2123 000c 1846     	 mov r0,r3
 2124 000e 80BD     	 pop {r7,pc}
 2125              	.L149:
 2126              	 .align 2
 2127              	.L148:
 2128 0010 00000000 	 .word flash_is_gpnvm_set
 2129              	 .cfi_endproc
 2130              	.LFE109:
 2132              	 .section .text.flash_read_unique_id,"ax",%progbits
 2133              	 .align 1
 2134              	 .global flash_read_unique_id
 2135              	 .syntax unified
 2136              	 .thumb
 2137              	 .thumb_func
 2138              	 .fpu softvfp
 2140              	flash_read_unique_id:
 2141              	.LFB110:
 943:.././hal/sam3u1c/flash_efc.c **** 
 944:.././hal/sam3u1c/flash_efc.c **** /**
 945:.././hal/sam3u1c/flash_efc.c ****  * \brief Read the flash unique ID.
 946:.././hal/sam3u1c/flash_efc.c ****  *
 947:.././hal/sam3u1c/flash_efc.c ****  * \param pul_data Pointer to a data buffer to store 128-bit unique ID.
 948:.././hal/sam3u1c/flash_efc.c ****  * \param ul_size Data buffer size in DWORD.
 949:.././hal/sam3u1c/flash_efc.c ****  *
 950:.././hal/sam3u1c/flash_efc.c ****  * \return 0 if successful; otherwise returns an error code.
 951:.././hal/sam3u1c/flash_efc.c ****  */
 952:.././hal/sam3u1c/flash_efc.c **** uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
 953:.././hal/sam3u1c/flash_efc.c **** {
 2142              	 .loc 3 953 1
 2143              	 .cfi_startproc
 2144              	 
 2145              	 
 2146 0000 90B5     	 push {r4,r7,lr}
 2147              	.LCFI115:
 2148              	 .cfi_def_cfa_offset 12
 2149              	 .cfi_offset 4,-12
 2150              	 .cfi_offset 7,-8
 2151              	 .cfi_offset 14,-4
 2152 0002 8BB0     	 sub sp,sp,#44
 2153              	.LCFI116:
 2154              	 .cfi_def_cfa_offset 56
 2155 0004 02AF     	 add r7,sp,#8
 2156              	.LCFI117:
 2157              	 .cfi_def_cfa 7,48
 2158 0006 7860     	 str r0,[r7,#4]
 2159 0008 3960     	 str r1,[r7]
 954:.././hal/sam3u1c/flash_efc.c **** 	uint32_t uid_buf[4];
 955:.././hal/sam3u1c/flash_efc.c **** 	uint32_t ul_idx;
 956:.././hal/sam3u1c/flash_efc.c **** 
 957:.././hal/sam3u1c/flash_efc.c **** 	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
 2160              	 .loc 3 957 21
 2161 000a 07F10C03 	 add r3,r7,#12
 2162 000e 0422     	 movs r2,#4
 2163 0010 0092     	 str r2,[sp]
 2164 0012 0F22     	 movs r2,#15
 2165 0014 0E21     	 movs r1,#14
 2166 0016 1448     	 ldr r0,.L157
 2167 0018 144C     	 ldr r4,.L157+4
 2168 001a A047     	 blx r4
 2169              	.LVL51:
 2170 001c 0346     	 mov r3,r0
 2171              	 .loc 3 957 5
 2172 001e 002B     	 cmp r3,#0
 2173 0020 01D0     	 beq .L151
 958:.././hal/sam3u1c/flash_efc.c **** 			EFC_FCMD_SPUI, uid_buf, 4)) {
 959:.././hal/sam3u1c/flash_efc.c **** 		return FLASH_RC_ERROR;
 2174              	 .loc 3 959 10
 2175 0022 1023     	 movs r3,#16
 2176 0024 1BE0     	 b .L156
 2177              	.L151:
 960:.././hal/sam3u1c/flash_efc.c **** 	}
 961:.././hal/sam3u1c/flash_efc.c **** 
 962:.././hal/sam3u1c/flash_efc.c **** 	if (ul_size > 4) {
 2178              	 .loc 3 962 5
 2179 0026 3B68     	 ldr r3,[r7]
 2180 0028 042B     	 cmp r3,#4
 2181 002a 01D9     	 bls .L153
 963:.././hal/sam3u1c/flash_efc.c **** 		/* Only 4 dword to store unique ID */
 964:.././hal/sam3u1c/flash_efc.c **** 		ul_size = 4;
 2182              	 .loc 3 964 11
 2183 002c 0423     	 movs r3,#4
 2184 002e 3B60     	 str r3,[r7]
 2185              	.L153:
 965:.././hal/sam3u1c/flash_efc.c **** 	}
 966:.././hal/sam3u1c/flash_efc.c **** 
 967:.././hal/sam3u1c/flash_efc.c **** 	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
 2186              	 .loc 3 967 14
 2187 0030 0023     	 movs r3,#0
 2188 0032 FB61     	 str r3,[r7,#28]
 2189              	 .loc 3 967 2
 2190 0034 0EE0     	 b .L154
 2191              	.L155:
 968:.././hal/sam3u1c/flash_efc.c **** 		pul_data[ul_idx] = uid_buf[ul_idx];
 2192              	 .loc 3 968 11 discriminator 3
 2193 0036 FB69     	 ldr r3,[r7,#28]
 2194 0038 9B00     	 lsls r3,r3,#2
 2195 003a 7A68     	 ldr r2,[r7,#4]
 2196 003c 1A44     	 add r2,r2,r3
 2197              	 .loc 3 968 29 discriminator 3
 2198 003e FB69     	 ldr r3,[r7,#28]
 2199 0040 9B00     	 lsls r3,r3,#2
 2200 0042 07F12001 	 add r1,r7,#32
 2201 0046 0B44     	 add r3,r3,r1
 2202 0048 53F8143C 	 ldr r3,[r3,#-20]
 2203              	 .loc 3 968 20 discriminator 3
 2204 004c 1360     	 str r3,[r2]
 967:.././hal/sam3u1c/flash_efc.c **** 		pul_data[ul_idx] = uid_buf[ul_idx];
 2205              	 .loc 3 967 43 discriminator 3
 2206 004e FB69     	 ldr r3,[r7,#28]
 2207 0050 0133     	 adds r3,r3,#1
 2208 0052 FB61     	 str r3,[r7,#28]
 2209              	.L154:
 967:.././hal/sam3u1c/flash_efc.c **** 		pul_data[ul_idx] = uid_buf[ul_idx];
 2210              	 .loc 3 967 2 discriminator 1
 2211 0054 FA69     	 ldr r2,[r7,#28]
 2212 0056 3B68     	 ldr r3,[r7]
 2213 0058 9A42     	 cmp r2,r3
 2214 005a ECD3     	 bcc .L155
 969:.././hal/sam3u1c/flash_efc.c **** 	}
 970:.././hal/sam3u1c/flash_efc.c **** 
 971:.././hal/sam3u1c/flash_efc.c **** 	return FLASH_RC_OK;
 2215              	 .loc 3 971 9
 2216 005c 0023     	 movs r3,#0
 2217              	.L156:
 972:.././hal/sam3u1c/flash_efc.c **** }
 2218              	 .loc 3 972 1 discriminator 1
 2219 005e 1846     	 mov r0,r3
 2220 0060 2437     	 adds r7,r7,#36
 2221              	.LCFI118:
 2222              	 .cfi_def_cfa_offset 12
 2223 0062 BD46     	 mov sp,r7
 2224              	.LCFI119:
 2225              	 .cfi_def_cfa_register 13
 2226              	 
 2227 0064 90BD     	 pop {r4,r7,pc}
 2228              	.L158:
 2229 0066 00BF     	 .align 2
 2230              	.L157:
 2231 0068 00080E40 	 .word 1074661376
 2232 006c 00000000 	 .word efc_perform_read_sequence
 2233              	 .cfi_endproc
 2234              	.LFE110:
 2236              	 .text
 2237              	.Letext0:
 2238              	 .file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 2239              	 .file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 2240              	 .file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 2241              	 .file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 2242              	 .file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 2243              	 .file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 2244              	 .file 10 ".././hal/sam3u1c/inc/sam3u1c.h"
 2245              	 .file 11 ".././hal/sam3u1c/inc/core_cm3.h"
 2246              	 .file 12 ".././hal/sam3u1c/inc/system_sam3u.h"
 2247              	 .file 13 ".././hal/sam3u1c/inc/component/component_efc.h"
 2248              	 .file 14 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 2249              	 .file 15 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 2250              	 .file 16 ".././hal/sam3u1c/inc/efc.h"
 2251              	 .file 17 ".././hal/sam3u1c/inc/flash_efc.h"
 2252              	 .file 18 ".././hal/sam3u1c/inc/sam3u/pll.h"
 2253              	 .file 19 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 flash_efc.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.osc_get_rate:00000000 $t
    {standard input}:34     .text.osc_get_rate:00000000 osc_get_rate
    {standard input}:60     .text.osc_get_rate:00000014 $d
    {standard input}:68     .text.osc_get_rate:00000034 $t
    {standard input}:122    .text.osc_get_rate:00000064 $d
    {standard input}:129    .text.sysclk_get_main_hz:00000000 $t
    {standard input}:135    .text.sysclk_get_main_hz:00000000 sysclk_get_main_hz
    {standard input}:163    .text.sysclk_get_main_hz:00000014 $d
    {standard input}:168    .text.sysclk_get_cpu_hz:00000000 $t
    {standard input}:174    .text.sysclk_get_cpu_hz:00000000 sysclk_get_cpu_hz
    {standard input}:201    .text.sysclk_get_cpu_hz:00000010 $d
    {standard input}:206    .bss.gs_ul_page_buffer:00000000 $d
    {standard input}:209    .bss.gs_ul_page_buffer:00000000 gs_ul_page_buffer
    {standard input}:212    .text.translate_address:00000000 $t
    {standard input}:218    .text.translate_address:00000000 translate_address
    {standard input}:300    .text.translate_address:00000054 $d
    {standard input}:305    .text.compute_address:00000000 $t
    {standard input}:311    .text.compute_address:00000000 compute_address
    {standard input}:370    .text.compute_lock_range:00000000 $t
    {standard input}:376    .text.compute_lock_range:00000000 compute_lock_range
    {standard input}:446    .text.flash_init:00000000 $t
    {standard input}:453    .text.flash_init:00000000 flash_init
    {standard input}:494    .text.flash_init:00000020 $d
    {standard input}:500    .text.flash_set_wait_state:00000000 $t
    {standard input}:507    .text.flash_set_wait_state:00000000 flash_set_wait_state
    {standard input}:557    .text.flash_set_wait_state:0000002c $d
    {standard input}:563    .text.flash_set_wait_state_adaptively:00000000 $t
    {standard input}:570    .text.flash_set_wait_state_adaptively:00000000 flash_set_wait_state_adaptively
    {standard input}:681    .text.flash_set_wait_state_adaptively:00000080 $d
    {standard input}:692    .text.flash_get_wait_state:00000000 $t
    {standard input}:699    .text.flash_get_wait_state:00000000 flash_get_wait_state
    {standard input}:746    .text.flash_get_wait_state:00000028 $d
    {standard input}:752    .text.flash_get_descriptor:00000000 $t
    {standard input}:759    .text.flash_get_descriptor:00000000 flash_get_descriptor
    {standard input}:854    .text.flash_get_descriptor:00000068 $d
    {standard input}:861    .text.flash_get_page_count:00000000 $t
    {standard input}:868    .text.flash_get_page_count:00000000 flash_get_page_count
    {standard input}:914    .text.flash_get_page_count_per_region:00000000 $t
    {standard input}:921    .text.flash_get_page_count_per_region:00000000 flash_get_page_count_per_region
    {standard input}:967    .text.flash_get_region_count:00000000 $t
    {standard input}:974    .text.flash_get_region_count:00000000 flash_get_region_count
    {standard input}:1014   .text.flash_erase_all:00000000 $t
    {standard input}:1021   .text.flash_erase_all:00000000 flash_erase_all
    {standard input}:1080   .text.flash_erase_all:00000038 $d
    {standard input}:1086   .text.flash_write:00000000 $t
    {standard input}:1093   .text.flash_write:00000000 flash_write
    {standard input}:1323   .text.flash_write:00000134 $d
    {standard input}:1334   .text.flash_lock:00000000 $t
    {standard input}:1341   .text.flash_lock:00000000 flash_lock
    {standard input}:1457   .text.flash_lock:00000090 $d
    {standard input}:1464   .text.flash_unlock:00000000 $t
    {standard input}:1471   .text.flash_unlock:00000000 flash_unlock
    {standard input}:1587   .text.flash_unlock:00000090 $d
    {standard input}:1594   .text.flash_is_locked:00000000 $t
    {standard input}:1601   .text.flash_is_locked:00000000 flash_is_locked
    {standard input}:1790   .text.flash_is_locked:000000f4 $d
    {standard input}:1797   .text.flash_set_gpnvm:00000000 $t
    {standard input}:1804   .text.flash_set_gpnvm:00000000 flash_set_gpnvm
    {standard input}:1874   .text.flash_set_gpnvm:00000040 $d
    {standard input}:1972   .text.flash_is_gpnvm_set:00000000 flash_is_gpnvm_set
    {standard input}:1881   .text.flash_clear_gpnvm:00000000 $t
    {standard input}:1888   .text.flash_clear_gpnvm:00000000 flash_clear_gpnvm
    {standard input}:1958   .text.flash_clear_gpnvm:00000040 $d
    {standard input}:1965   .text.flash_is_gpnvm_set:00000000 $t
    {standard input}:2050   .text.flash_is_gpnvm_set:00000050 $d
    {standard input}:2057   .text.flash_enable_security_bit:00000000 $t
    {standard input}:2064   .text.flash_enable_security_bit:00000000 flash_enable_security_bit
    {standard input}:2090   .text.flash_enable_security_bit:00000010 $d
    {standard input}:2095   .text.flash_is_security_bit_enabled:00000000 $t
    {standard input}:2102   .text.flash_is_security_bit_enabled:00000000 flash_is_security_bit_enabled
    {standard input}:2128   .text.flash_is_security_bit_enabled:00000010 $d
    {standard input}:2133   .text.flash_read_unique_id:00000000 $t
    {standard input}:2140   .text.flash_read_unique_id:00000000 flash_read_unique_id
    {standard input}:2231   .text.flash_read_unique_id:00000068 $d
                           .group:00000000 wm4.0.84f01b7600eb36308f16331d3d2e9779
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.newlib.h.18.1c9fedb6b3cd797cff253cc0fd593ef2
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.features.h.22.026edb2397769f4ae13f35900dbdb560
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.assert.h.11.7fe9eb241be6b0fee772a1e693b81ae3
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.efc.h.45.ec5734119c630498df26106bacf9a684
                           .group:00000000 wm4.flash_efc.h.90.a4a39259055880dc10b861c5fe1b99e7
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.48.3fc21f768e842120f151448a98046af0
                           .group:00000000 wm4.cw521.h.62.38d76eca36ece19cb9950be38af128c7
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84

UNDEFINED SYMBOLS
efc_init
efc_set_wait_state
efc_get_wait_state
efc_perform_command
efc_get_result
memcpy
efc_perform_read_sequence
