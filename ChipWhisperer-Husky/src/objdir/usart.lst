   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "usart.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.usart_set_async_baudrate,"ax",%progbits
  27              	 .align 1
  28              	 .global usart_set_async_baudrate
  29              	 .arch armv7-m
  30              	 .syntax unified
  31              	 .thumb
  32              	 .thumb_func
  33              	 .fpu softvfp
  35              	usart_set_async_baudrate:
  36              	.LFB69:
  37              	 .file 1 ".././hal/sam3u1c/usart.c"
   1:.././hal/sam3u1c/usart.c **** /**
   2:.././hal/sam3u1c/usart.c ****  * \file
   3:.././hal/sam3u1c/usart.c ****  *
   4:.././hal/sam3u1c/usart.c ****  * \brief Universal Synchronous Asynchronous Receiver Transmitter (USART) driver
   5:.././hal/sam3u1c/usart.c ****  * for SAM.
   6:.././hal/sam3u1c/usart.c ****  *
   7:.././hal/sam3u1c/usart.c ****  * Copyright (c) 2011-2014 Atmel Corporation. All rights reserved.
   8:.././hal/sam3u1c/usart.c ****  *
   9:.././hal/sam3u1c/usart.c ****  * \asf_license_start
  10:.././hal/sam3u1c/usart.c ****  *
  11:.././hal/sam3u1c/usart.c ****  * \page License
  12:.././hal/sam3u1c/usart.c ****  *
  13:.././hal/sam3u1c/usart.c ****  * Redistribution and use in source and binary forms, with or without
  14:.././hal/sam3u1c/usart.c ****  * modification, are permitted provided that the following conditions are met:
  15:.././hal/sam3u1c/usart.c ****  *
  16:.././hal/sam3u1c/usart.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:.././hal/sam3u1c/usart.c ****  *    this list of conditions and the following disclaimer.
  18:.././hal/sam3u1c/usart.c ****  *
  19:.././hal/sam3u1c/usart.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  20:.././hal/sam3u1c/usart.c ****  *    this list of conditions and the following disclaimer in the documentation
  21:.././hal/sam3u1c/usart.c ****  *    and/or other materials provided with the distribution.
  22:.././hal/sam3u1c/usart.c ****  *
  23:.././hal/sam3u1c/usart.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  24:.././hal/sam3u1c/usart.c ****  *    from this software without specific prior written permission.
  25:.././hal/sam3u1c/usart.c ****  *
  26:.././hal/sam3u1c/usart.c ****  * 4. This software may only be redistributed and used in connection with an
  27:.././hal/sam3u1c/usart.c ****  *    Atmel microcontroller product.
  28:.././hal/sam3u1c/usart.c ****  *
  29:.././hal/sam3u1c/usart.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  30:.././hal/sam3u1c/usart.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  31:.././hal/sam3u1c/usart.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  32:.././hal/sam3u1c/usart.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  33:.././hal/sam3u1c/usart.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  34:.././hal/sam3u1c/usart.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  35:.././hal/sam3u1c/usart.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  36:.././hal/sam3u1c/usart.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  37:.././hal/sam3u1c/usart.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  38:.././hal/sam3u1c/usart.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  39:.././hal/sam3u1c/usart.c ****  * POSSIBILITY OF SUCH DAMAGE.
  40:.././hal/sam3u1c/usart.c ****  *
  41:.././hal/sam3u1c/usart.c ****  * \asf_license_stop
  42:.././hal/sam3u1c/usart.c ****  *
  43:.././hal/sam3u1c/usart.c ****  */
  44:.././hal/sam3u1c/usart.c **** 
  45:.././hal/sam3u1c/usart.c **** #include "usart.h"
  46:.././hal/sam3u1c/usart.c **** 
  47:.././hal/sam3u1c/usart.c **** /// @cond 0
  48:.././hal/sam3u1c/usart.c **** /**INDENT-OFF**/
  49:.././hal/sam3u1c/usart.c **** #ifdef __cplusplus
  50:.././hal/sam3u1c/usart.c **** extern "C" {
  51:.././hal/sam3u1c/usart.c **** #endif
  52:.././hal/sam3u1c/usart.c **** /**INDENT-ON**/
  53:.././hal/sam3u1c/usart.c **** /// @endcond
  54:.././hal/sam3u1c/usart.c **** 
  55:.././hal/sam3u1c/usart.c **** /**
  56:.././hal/sam3u1c/usart.c ****  * \defgroup sam_drivers_usart_group Universal Synchronous Asynchronous
  57:.././hal/sam3u1c/usart.c ****  * Receiver Transmitter (USART)
  58:.././hal/sam3u1c/usart.c ****  *
  59:.././hal/sam3u1c/usart.c ****  * The Universal Synchronous Asynchronous Receiver Transceiver (USART)
  60:.././hal/sam3u1c/usart.c ****  * provides one full duplex universal synchronous asynchronous serial link.
  61:.././hal/sam3u1c/usart.c ****  * Data frame format is widely programmable (data length, parity, number of
  62:.././hal/sam3u1c/usart.c ****  * stop bits) to support a maximum of standards. The receiver implements
  63:.././hal/sam3u1c/usart.c ****  * parity error, framing error and overrun error detection. The receiver
  64:.././hal/sam3u1c/usart.c ****  * time-out enables handling variable-length frames and the transmitter
  65:.././hal/sam3u1c/usart.c ****  * timeguard facilitates communications with slow remote devices. Multidrop
  66:.././hal/sam3u1c/usart.c ****  * communications are also supported through address bit handling in reception
  67:.././hal/sam3u1c/usart.c ****  * and transmission. The driver supports the following modes:
  68:.././hal/sam3u1c/usart.c ****  * RS232, RS485, SPI, IrDA, ISO7816, MODEM, Hardware handshaking and LIN.
  69:.././hal/sam3u1c/usart.c ****  *
  70:.././hal/sam3u1c/usart.c ****  * @{
  71:.././hal/sam3u1c/usart.c ****  */
  72:.././hal/sam3u1c/usart.c **** 
  73:.././hal/sam3u1c/usart.c **** /* The write protect key value. */
  74:.././hal/sam3u1c/usart.c **** #ifndef US_WPMR_WPKEY_PASSWD
  75:.././hal/sam3u1c/usart.c **** #define US_WPMR_WPKEY_PASSWD    US_WPMR_WPKEY(0x555341U)
  76:.././hal/sam3u1c/usart.c **** #endif
  77:.././hal/sam3u1c/usart.c **** 
  78:.././hal/sam3u1c/usart.c **** #ifndef US_WPMR_WPKEY_PASSWD
  79:.././hal/sam3u1c/usart.c **** #  define US_WPMR_WPKEY_PASSWD US_WPMR_WPKEY(US_WPKEY_VALUE)
  80:.././hal/sam3u1c/usart.c **** #endif
  81:.././hal/sam3u1c/usart.c **** 
  82:.././hal/sam3u1c/usart.c **** /* The CD value scope programmed in MR register. */
  83:.././hal/sam3u1c/usart.c **** #define MIN_CD_VALUE                  0x01
  84:.././hal/sam3u1c/usart.c **** #define MIN_CD_VALUE_SPI              0x04
  85:.././hal/sam3u1c/usart.c **** #define MAX_CD_VALUE                  US_BRGR_CD_Msk
  86:.././hal/sam3u1c/usart.c **** 
  87:.././hal/sam3u1c/usart.c **** /* The receiver sampling divide of baudrate clock. */
  88:.././hal/sam3u1c/usart.c **** #define HIGH_FRQ_SAMPLE_DIV           16
  89:.././hal/sam3u1c/usart.c **** #define LOW_FRQ_SAMPLE_DIV            8
  90:.././hal/sam3u1c/usart.c **** 
  91:.././hal/sam3u1c/usart.c **** /* Max transmitter timeguard. */
  92:.././hal/sam3u1c/usart.c **** #define MAX_TRAN_GUARD_TIME           US_TTGR_TG_Msk
  93:.././hal/sam3u1c/usart.c **** 
  94:.././hal/sam3u1c/usart.c **** /* The non-existent parity error number. */
  95:.././hal/sam3u1c/usart.c **** #define USART_PARITY_ERROR            5
  96:.././hal/sam3u1c/usart.c **** 
  97:.././hal/sam3u1c/usart.c **** /* ISO7816 protocol type. */
  98:.././hal/sam3u1c/usart.c **** #define ISO7816_T_0                   0
  99:.././hal/sam3u1c/usart.c **** #define ISO7816_T_1                   1
 100:.././hal/sam3u1c/usart.c **** 
 101:.././hal/sam3u1c/usart.c **** /**
 102:.././hal/sam3u1c/usart.c ****  * \brief Calculate a clock divider(CD) and a fractional part (FP) for the
 103:.././hal/sam3u1c/usart.c ****  * USART asynchronous modes to generate a baudrate as close as possible to
 104:.././hal/sam3u1c/usart.c ****  * the baudrate set point.
 105:.././hal/sam3u1c/usart.c ****  *
 106:.././hal/sam3u1c/usart.c ****  * \note Baud rate calculation: Baudrate = ul_mck/(Over * (CD + FP/8))
 107:.././hal/sam3u1c/usart.c ****  * (Over being 16 or 8). The maximal oversampling is selected if it allows to
 108:.././hal/sam3u1c/usart.c ****  * generate a baudrate close to the set point.
 109:.././hal/sam3u1c/usart.c ****  *
 110:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 111:.././hal/sam3u1c/usart.c ****  * \param baudrate Baud rate set point.
 112:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 113:.././hal/sam3u1c/usart.c ****  *
 114:.././hal/sam3u1c/usart.c ****  * \retval 0 Baud rate is successfully initialized.
 115:.././hal/sam3u1c/usart.c ****  * \retval 1 Baud rate set point is out of range for the given input clock
 116:.././hal/sam3u1c/usart.c ****  * frequency.
 117:.././hal/sam3u1c/usart.c ****  */
 118:.././hal/sam3u1c/usart.c **** uint32_t usart_set_async_baudrate(Usart *p_usart,
 119:.././hal/sam3u1c/usart.c **** 		uint32_t baudrate, uint32_t ul_mck)
 120:.././hal/sam3u1c/usart.c **** {
  38              	 .loc 1 120 1
  39              	 .cfi_startproc
  40              	 
  41              	 
  42              	 
  43 0000 80B4     	 push {r7}
  44              	.LCFI0:
  45              	 .cfi_def_cfa_offset 4
  46              	 .cfi_offset 7,-4
  47 0002 89B0     	 sub sp,sp,#36
  48              	.LCFI1:
  49              	 .cfi_def_cfa_offset 40
  50 0004 00AF     	 add r7,sp,#0
  51              	.LCFI2:
  52              	 .cfi_def_cfa_register 7
  53 0006 F860     	 str r0,[r7,#12]
  54 0008 B960     	 str r1,[r7,#8]
  55 000a 7A60     	 str r2,[r7,#4]
 121:.././hal/sam3u1c/usart.c **** 	uint32_t over;
 122:.././hal/sam3u1c/usart.c **** 	uint32_t cd_fp;
 123:.././hal/sam3u1c/usart.c **** 	uint32_t cd;
 124:.././hal/sam3u1c/usart.c **** 	uint32_t fp;
 125:.././hal/sam3u1c/usart.c **** 
 126:.././hal/sam3u1c/usart.c **** 	/* Calculate the receiver sampling divide of baudrate clock. */
 127:.././hal/sam3u1c/usart.c **** 	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  56              	 .loc 1 127 36
  57 000c BB68     	 ldr r3,[r7,#8]
  58 000e 1B01     	 lsls r3,r3,#4
  59              	 .loc 1 127 5
  60 0010 7A68     	 ldr r2,[r7,#4]
  61 0012 9A42     	 cmp r2,r3
  62 0014 02D3     	 bcc .L2
 128:.././hal/sam3u1c/usart.c **** 		over = HIGH_FRQ_SAMPLE_DIV;
  63              	 .loc 1 128 8
  64 0016 1023     	 movs r3,#16
  65 0018 FB61     	 str r3,[r7,#28]
  66 001a 01E0     	 b .L3
  67              	.L2:
 129:.././hal/sam3u1c/usart.c **** 	} else {
 130:.././hal/sam3u1c/usart.c **** 		over = LOW_FRQ_SAMPLE_DIV;
  68              	 .loc 1 130 8
  69 001c 0823     	 movs r3,#8
  70 001e FB61     	 str r3,[r7,#28]
  71              	.L3:
 131:.././hal/sam3u1c/usart.c **** 	}
 132:.././hal/sam3u1c/usart.c **** 
 133:.././hal/sam3u1c/usart.c **** 	/* Calculate clock divider according to the fraction calculated formula. */
 134:.././hal/sam3u1c/usart.c **** 	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  72              	 .loc 1 134 13
  73 0020 7B68     	 ldr r3,[r7,#4]
  74 0022 DA00     	 lsls r2,r3,#3
  75              	 .loc 1 134 30
  76 0024 FB69     	 ldr r3,[r7,#28]
  77 0026 B968     	 ldr r1,[r7,#8]
  78 0028 01FB03F3 	 mul r3,r1,r3
  79              	 .loc 1 134 42
  80 002c 5B08     	 lsrs r3,r3,#1
  81              	 .loc 1 134 22
  82 002e 1A44     	 add r2,r2,r3
  83              	 .loc 1 134 55
  84 0030 FB69     	 ldr r3,[r7,#28]
  85 0032 B968     	 ldr r1,[r7,#8]
  86 0034 01FB03F3 	 mul r3,r1,r3
  87              	 .loc 1 134 8
  88 0038 B2FBF3F3 	 udiv r3,r2,r3
  89 003c BB61     	 str r3,[r7,#24]
 135:.././hal/sam3u1c/usart.c **** 	cd = cd_fp >> 3;
  90              	 .loc 1 135 5
  91 003e BB69     	 ldr r3,[r7,#24]
  92 0040 DB08     	 lsrs r3,r3,#3
  93 0042 7B61     	 str r3,[r7,#20]
 136:.././hal/sam3u1c/usart.c **** 	fp = cd_fp & 0x07;
  94              	 .loc 1 136 5
  95 0044 BB69     	 ldr r3,[r7,#24]
  96 0046 03F00703 	 and r3,r3,#7
  97 004a 3B61     	 str r3,[r7,#16]
 137:.././hal/sam3u1c/usart.c **** 	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  98              	 .loc 1 137 5
  99 004c 7B69     	 ldr r3,[r7,#20]
 100 004e 002B     	 cmp r3,#0
 101 0050 03D0     	 beq .L4
 102              	 .loc 1 137 24 discriminator 1
 103 0052 7B69     	 ldr r3,[r7,#20]
 104 0054 B3F5803F 	 cmp r3,#65536
 105 0058 01D3     	 bcc .L5
 106              	.L4:
 138:.././hal/sam3u1c/usart.c **** 		return 1;
 107              	 .loc 1 138 10
 108 005a 0123     	 movs r3,#1
 109 005c 0FE0     	 b .L6
 110              	.L5:
 139:.././hal/sam3u1c/usart.c **** 	}
 140:.././hal/sam3u1c/usart.c **** 
 141:.././hal/sam3u1c/usart.c **** 	/* Configure the OVER bit in MR register. */
 142:.././hal/sam3u1c/usart.c **** 	if (over == 8) {
 111              	 .loc 1 142 5
 112 005e FB69     	 ldr r3,[r7,#28]
 113 0060 082B     	 cmp r3,#8
 114 0062 05D1     	 bne .L7
 143:.././hal/sam3u1c/usart.c **** 		p_usart->US_MR |= US_MR_OVER;
 115              	 .loc 1 143 18
 116 0064 FB68     	 ldr r3,[r7,#12]
 117 0066 5B68     	 ldr r3,[r3,#4]
 118 0068 43F40022 	 orr r2,r3,#524288
 119 006c FB68     	 ldr r3,[r7,#12]
 120 006e 5A60     	 str r2,[r3,#4]
 121              	.L7:
 144:.././hal/sam3u1c/usart.c **** 	}
 145:.././hal/sam3u1c/usart.c **** 
 146:.././hal/sam3u1c/usart.c **** 	/* Configure the baudrate generate register. */
 147:.././hal/sam3u1c/usart.c **** 	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
 122              	 .loc 1 147 50
 123 0070 3B69     	 ldr r3,[r7,#16]
 124 0072 1A04     	 lsls r2,r3,#16
 125              	 .loc 1 147 44
 126 0074 7B69     	 ldr r3,[r7,#20]
 127 0076 1A43     	 orrs r2,r2,r3
 128              	 .loc 1 147 19
 129 0078 FB68     	 ldr r3,[r7,#12]
 130 007a 1A62     	 str r2,[r3,#32]
 148:.././hal/sam3u1c/usart.c **** 
 149:.././hal/sam3u1c/usart.c **** 	return 0;
 131              	 .loc 1 149 9
 132 007c 0023     	 movs r3,#0
 133              	.L6:
 150:.././hal/sam3u1c/usart.c **** }
 134              	 .loc 1 150 1
 135 007e 1846     	 mov r0,r3
 136 0080 2437     	 adds r7,r7,#36
 137              	.LCFI3:
 138              	 .cfi_def_cfa_offset 4
 139 0082 BD46     	 mov sp,r7
 140              	.LCFI4:
 141              	 .cfi_def_cfa_register 13
 142              	 
 143 0084 80BC     	 pop {r7}
 144              	.LCFI5:
 145              	 .cfi_restore 7
 146              	 .cfi_def_cfa_offset 0
 147 0086 7047     	 bx lr
 148              	 .cfi_endproc
 149              	.LFE69:
 151              	 .section .text.usart_set_sync_master_baudrate,"ax",%progbits
 152              	 .align 1
 153              	 .syntax unified
 154              	 .thumb
 155              	 .thumb_func
 156              	 .fpu softvfp
 158              	usart_set_sync_master_baudrate:
 159              	.LFB70:
 151:.././hal/sam3u1c/usart.c **** 
 152:.././hal/sam3u1c/usart.c **** /**
 153:.././hal/sam3u1c/usart.c ****  * \brief Calculate a clock divider for the USART synchronous master modes
 154:.././hal/sam3u1c/usart.c ****  * to generate a baudrate as close as possible to the baudrate set point.
 155:.././hal/sam3u1c/usart.c ****  *
 156:.././hal/sam3u1c/usart.c ****  * \note Synchronous baudrate calculation: baudrate = ul_mck / cd
 157:.././hal/sam3u1c/usart.c ****  *
 158:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 159:.././hal/sam3u1c/usart.c ****  * \param baudrate Baud rate set point.
 160:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 161:.././hal/sam3u1c/usart.c ****  *
 162:.././hal/sam3u1c/usart.c ****  * \retval 0 Baud rate is successfully initialized.
 163:.././hal/sam3u1c/usart.c ****  * \retval 1 Baud rate set point is out of range for the given input clock
 164:.././hal/sam3u1c/usart.c ****  * frequency.
 165:.././hal/sam3u1c/usart.c ****  */
 166:.././hal/sam3u1c/usart.c **** static uint32_t usart_set_sync_master_baudrate(Usart *p_usart,
 167:.././hal/sam3u1c/usart.c **** 		uint32_t baudrate, uint32_t ul_mck)
 168:.././hal/sam3u1c/usart.c **** {
 160              	 .loc 1 168 1
 161              	 .cfi_startproc
 162              	 
 163              	 
 164              	 
 165 0000 80B4     	 push {r7}
 166              	.LCFI6:
 167              	 .cfi_def_cfa_offset 4
 168              	 .cfi_offset 7,-4
 169 0002 87B0     	 sub sp,sp,#28
 170              	.LCFI7:
 171              	 .cfi_def_cfa_offset 32
 172 0004 00AF     	 add r7,sp,#0
 173              	.LCFI8:
 174              	 .cfi_def_cfa_register 7
 175 0006 F860     	 str r0,[r7,#12]
 176 0008 B960     	 str r1,[r7,#8]
 177 000a 7A60     	 str r2,[r7,#4]
 169:.././hal/sam3u1c/usart.c **** 	uint32_t cd;
 170:.././hal/sam3u1c/usart.c **** 
 171:.././hal/sam3u1c/usart.c **** 	/* Calculate clock divider according to the formula in synchronous mode. */
 172:.././hal/sam3u1c/usart.c **** 	cd = (ul_mck + baudrate / 2) / baudrate;
 178              	 .loc 1 172 26
 179 000c BB68     	 ldr r3,[r7,#8]
 180 000e 5A08     	 lsrs r2,r3,#1
 181              	 .loc 1 172 15
 182 0010 7B68     	 ldr r3,[r7,#4]
 183 0012 1A44     	 add r2,r2,r3
 184              	 .loc 1 172 5
 185 0014 BB68     	 ldr r3,[r7,#8]
 186 0016 B2FBF3F3 	 udiv r3,r2,r3
 187 001a 7B61     	 str r3,[r7,#20]
 173:.././hal/sam3u1c/usart.c **** 
 174:.././hal/sam3u1c/usart.c **** 	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
 188              	 .loc 1 174 5
 189 001c 7B69     	 ldr r3,[r7,#20]
 190 001e 002B     	 cmp r3,#0
 191 0020 03D0     	 beq .L9
 192              	 .loc 1 174 24 discriminator 1
 193 0022 7B69     	 ldr r3,[r7,#20]
 194 0024 B3F5803F 	 cmp r3,#65536
 195 0028 01D3     	 bcc .L10
 196              	.L9:
 175:.././hal/sam3u1c/usart.c **** 		return 1;
 197              	 .loc 1 175 10
 198 002a 0123     	 movs r3,#1
 199 002c 0BE0     	 b .L11
 200              	.L10:
 176:.././hal/sam3u1c/usart.c **** 	}
 177:.././hal/sam3u1c/usart.c **** 
 178:.././hal/sam3u1c/usart.c **** 	/* Configure the baudrate generate register. */
 179:.././hal/sam3u1c/usart.c **** 	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
 201              	 .loc 1 179 19
 202 002e FB68     	 ldr r3,[r7,#12]
 203 0030 7A69     	 ldr r2,[r7,#20]
 204 0032 1A62     	 str r2,[r3,#32]
 180:.././hal/sam3u1c/usart.c **** 
 181:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
 205              	 .loc 1 181 27
 206 0034 FB68     	 ldr r3,[r7,#12]
 207 0036 5B68     	 ldr r3,[r3,#4]
 182:.././hal/sam3u1c/usart.c **** 			US_MR_USCLKS_MCK | US_MR_SYNC;
 208              	 .loc 1 182 21
 209 0038 23F49873 	 bic r3,r3,#304
 210 003c 43F48072 	 orr r2,r3,#256
 181:.././hal/sam3u1c/usart.c **** 			US_MR_USCLKS_MCK | US_MR_SYNC;
 211              	 .loc 1 181 17
 212 0040 FB68     	 ldr r3,[r7,#12]
 213 0042 5A60     	 str r2,[r3,#4]
 183:.././hal/sam3u1c/usart.c **** 	return 0;
 214              	 .loc 1 183 9
 215 0044 0023     	 movs r3,#0
 216              	.L11:
 184:.././hal/sam3u1c/usart.c **** }
 217              	 .loc 1 184 1
 218 0046 1846     	 mov r0,r3
 219 0048 1C37     	 adds r7,r7,#28
 220              	.LCFI9:
 221              	 .cfi_def_cfa_offset 4
 222 004a BD46     	 mov sp,r7
 223              	.LCFI10:
 224              	 .cfi_def_cfa_register 13
 225              	 
 226 004c 80BC     	 pop {r7}
 227              	.LCFI11:
 228              	 .cfi_restore 7
 229              	 .cfi_def_cfa_offset 0
 230 004e 7047     	 bx lr
 231              	 .cfi_endproc
 232              	.LFE70:
 234              	 .section .text.usart_set_sync_slave_baudrate,"ax",%progbits
 235              	 .align 1
 236              	 .syntax unified
 237              	 .thumb
 238              	 .thumb_func
 239              	 .fpu softvfp
 241              	usart_set_sync_slave_baudrate:
 242              	.LFB71:
 185:.././hal/sam3u1c/usart.c **** 
 186:.././hal/sam3u1c/usart.c **** /**
 187:.././hal/sam3u1c/usart.c ****  * \brief Select the SCK pin as the source of baud rate for the USART
 188:.././hal/sam3u1c/usart.c ****  * synchronous slave modes.
 189:.././hal/sam3u1c/usart.c ****  *
 190:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 191:.././hal/sam3u1c/usart.c ****  */
 192:.././hal/sam3u1c/usart.c **** static void usart_set_sync_slave_baudrate(Usart *p_usart)
 193:.././hal/sam3u1c/usart.c **** {
 243              	 .loc 1 193 1
 244              	 .cfi_startproc
 245              	 
 246              	 
 247              	 
 248 0000 80B4     	 push {r7}
 249              	.LCFI12:
 250              	 .cfi_def_cfa_offset 4
 251              	 .cfi_offset 7,-4
 252 0002 83B0     	 sub sp,sp,#12
 253              	.LCFI13:
 254              	 .cfi_def_cfa_offset 16
 255 0004 00AF     	 add r7,sp,#0
 256              	.LCFI14:
 257              	 .cfi_def_cfa_register 7
 258 0006 7860     	 str r0,[r7,#4]
 194:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
 259              	 .loc 1 194 27
 260 0008 7B68     	 ldr r3,[r7,#4]
 261 000a 5B68     	 ldr r3,[r3,#4]
 195:.././hal/sam3u1c/usart.c **** 			US_MR_USCLKS_SCK | US_MR_SYNC;
 262              	 .loc 1 195 21
 263 000c 43F49872 	 orr r2,r3,#304
 194:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USCLKS_Msk) |
 264              	 .loc 1 194 17
 265 0010 7B68     	 ldr r3,[r7,#4]
 266 0012 5A60     	 str r2,[r3,#4]
 196:.././hal/sam3u1c/usart.c **** }
 267              	 .loc 1 196 1
 268 0014 00BF     	 nop
 269 0016 0C37     	 adds r7,r7,#12
 270              	.LCFI15:
 271              	 .cfi_def_cfa_offset 4
 272 0018 BD46     	 mov sp,r7
 273              	.LCFI16:
 274              	 .cfi_def_cfa_register 13
 275              	 
 276 001a 80BC     	 pop {r7}
 277              	.LCFI17:
 278              	 .cfi_restore 7
 279              	 .cfi_def_cfa_offset 0
 280 001c 7047     	 bx lr
 281              	 .cfi_endproc
 282              	.LFE71:
 284              	 .section .text.usart_set_iso7816_clock,"ax",%progbits
 285              	 .align 1
 286              	 .syntax unified
 287              	 .thumb
 288              	 .thumb_func
 289              	 .fpu softvfp
 291              	usart_set_iso7816_clock:
 292              	.LFB72:
 197:.././hal/sam3u1c/usart.c **** 
 198:.././hal/sam3u1c/usart.c **** 
 199:.././hal/sam3u1c/usart.c **** /**
 200:.././hal/sam3u1c/usart.c ****  * \brief Calculate a clock divider (\e CD) for the USART ISO7816 mode to
 201:.././hal/sam3u1c/usart.c ****  * generate an ISO7816 clock as close as possible to the clock set point.
 202:.././hal/sam3u1c/usart.c ****  *
 203:.././hal/sam3u1c/usart.c ****  * \note ISO7816 clock calculation: Clock = ul_mck / cd
 204:.././hal/sam3u1c/usart.c ****  *
 205:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 206:.././hal/sam3u1c/usart.c ****  * \param clock ISO7816 clock set point.
 207:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 208:.././hal/sam3u1c/usart.c ****  *
 209:.././hal/sam3u1c/usart.c ****  * \retval 0 ISO7816 clock is successfully initialized.
 210:.././hal/sam3u1c/usart.c ****  * \retval 1 ISO7816 clock set point is out of range for the given input clock
 211:.././hal/sam3u1c/usart.c ****  * frequency.
 212:.././hal/sam3u1c/usart.c ****  */
 213:.././hal/sam3u1c/usart.c **** static uint32_t usart_set_iso7816_clock(Usart *p_usart,
 214:.././hal/sam3u1c/usart.c **** 		uint32_t clock, uint32_t ul_mck)
 215:.././hal/sam3u1c/usart.c **** {
 293              	 .loc 1 215 1
 294              	 .cfi_startproc
 295              	 
 296              	 
 297              	 
 298 0000 80B4     	 push {r7}
 299              	.LCFI18:
 300              	 .cfi_def_cfa_offset 4
 301              	 .cfi_offset 7,-4
 302 0002 87B0     	 sub sp,sp,#28
 303              	.LCFI19:
 304              	 .cfi_def_cfa_offset 32
 305 0004 00AF     	 add r7,sp,#0
 306              	.LCFI20:
 307              	 .cfi_def_cfa_register 7
 308 0006 F860     	 str r0,[r7,#12]
 309 0008 B960     	 str r1,[r7,#8]
 310 000a 7A60     	 str r2,[r7,#4]
 216:.././hal/sam3u1c/usart.c **** 	uint32_t cd;
 217:.././hal/sam3u1c/usart.c **** 
 218:.././hal/sam3u1c/usart.c **** 	/* Calculate clock divider according to the formula in ISO7816 mode. */
 219:.././hal/sam3u1c/usart.c **** 	cd = (ul_mck + clock / 2) / clock;
 311              	 .loc 1 219 23
 312 000c BB68     	 ldr r3,[r7,#8]
 313 000e 5A08     	 lsrs r2,r3,#1
 314              	 .loc 1 219 15
 315 0010 7B68     	 ldr r3,[r7,#4]
 316 0012 1A44     	 add r2,r2,r3
 317              	 .loc 1 219 5
 318 0014 BB68     	 ldr r3,[r7,#8]
 319 0016 B2FBF3F3 	 udiv r3,r2,r3
 320 001a 7B61     	 str r3,[r7,#20]
 220:.././hal/sam3u1c/usart.c **** 
 221:.././hal/sam3u1c/usart.c **** 	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
 321              	 .loc 1 221 5
 322 001c 7B69     	 ldr r3,[r7,#20]
 323 001e 002B     	 cmp r3,#0
 324 0020 03D0     	 beq .L14
 325              	 .loc 1 221 24 discriminator 1
 326 0022 7B69     	 ldr r3,[r7,#20]
 327 0024 B3F5803F 	 cmp r3,#65536
 328 0028 01D3     	 bcc .L15
 329              	.L14:
 222:.././hal/sam3u1c/usart.c **** 		return 1;
 330              	 .loc 1 222 10
 331 002a 0123     	 movs r3,#1
 332 002c 0DE0     	 b .L16
 333              	.L15:
 223:.././hal/sam3u1c/usart.c **** 	}
 224:.././hal/sam3u1c/usart.c **** 
 225:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~(US_MR_USCLKS_Msk | US_MR_SYNC |
 334              	 .loc 1 225 27
 335 002e FB68     	 ldr r3,[r7,#12]
 336 0030 5B68     	 ldr r3,[r3,#4]
 226:.././hal/sam3u1c/usart.c **** 			US_MR_OVER)) | US_MR_USCLKS_MCK | US_MR_CLKO;
 337              	 .loc 1 226 36
 338 0032 23F44023 	 bic r3,r3,#786432
 339 0036 23F49873 	 bic r3,r3,#304
 340 003a 43F48022 	 orr r2,r3,#262144
 225:.././hal/sam3u1c/usart.c **** 			US_MR_OVER)) | US_MR_USCLKS_MCK | US_MR_CLKO;
 341              	 .loc 1 225 17
 342 003e FB68     	 ldr r3,[r7,#12]
 343 0040 5A60     	 str r2,[r3,#4]
 227:.././hal/sam3u1c/usart.c **** 
 228:.././hal/sam3u1c/usart.c **** 	/* Configure the baudrate generate register. */
 229:.././hal/sam3u1c/usart.c **** 	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
 344              	 .loc 1 229 19
 345 0042 FB68     	 ldr r3,[r7,#12]
 346 0044 7A69     	 ldr r2,[r7,#20]
 347 0046 1A62     	 str r2,[r3,#32]
 230:.././hal/sam3u1c/usart.c **** 
 231:.././hal/sam3u1c/usart.c **** 	return 0;
 348              	 .loc 1 231 9
 349 0048 0023     	 movs r3,#0
 350              	.L16:
 232:.././hal/sam3u1c/usart.c **** }
 351              	 .loc 1 232 1
 352 004a 1846     	 mov r0,r3
 353 004c 1C37     	 adds r7,r7,#28
 354              	.LCFI21:
 355              	 .cfi_def_cfa_offset 4
 356 004e BD46     	 mov sp,r7
 357              	.LCFI22:
 358              	 .cfi_def_cfa_register 13
 359              	 
 360 0050 80BC     	 pop {r7}
 361              	.LCFI23:
 362              	 .cfi_restore 7
 363              	 .cfi_def_cfa_offset 0
 364 0052 7047     	 bx lr
 365              	 .cfi_endproc
 366              	.LFE72:
 368              	 .section .text.usart_set_spi_master_baudrate,"ax",%progbits
 369              	 .align 1
 370              	 .syntax unified
 371              	 .thumb
 372              	 .thumb_func
 373              	 .fpu softvfp
 375              	usart_set_spi_master_baudrate:
 376              	.LFB73:
 233:.././hal/sam3u1c/usart.c **** 
 234:.././hal/sam3u1c/usart.c **** /**
 235:.././hal/sam3u1c/usart.c ****  * \brief Calculate a clock divider (\e CD) for the USART SPI master mode to
 236:.././hal/sam3u1c/usart.c ****  * generate a baud rate as close as possible to the baud rate set point.
 237:.././hal/sam3u1c/usart.c ****  *
 238:.././hal/sam3u1c/usart.c ****  * \note Baud rate calculation:
 239:.././hal/sam3u1c/usart.c ****  * \f$ Baudrate = \frac{SelectedClock}{CD} \f$.
 240:.././hal/sam3u1c/usart.c ****  *
 241:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 242:.././hal/sam3u1c/usart.c ****  * \param baudrate Baud rate set point.
 243:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 244:.././hal/sam3u1c/usart.c ****  *
 245:.././hal/sam3u1c/usart.c ****  * \retval 0 Baud rate is successfully initialized.
 246:.././hal/sam3u1c/usart.c ****  * \retval 1 Baud rate set point is out of range for the given input clock
 247:.././hal/sam3u1c/usart.c ****  * frequency.
 248:.././hal/sam3u1c/usart.c ****  */
 249:.././hal/sam3u1c/usart.c **** static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
 250:.././hal/sam3u1c/usart.c **** 		uint32_t baudrate, uint32_t ul_mck)
 251:.././hal/sam3u1c/usart.c **** {
 377              	 .loc 1 251 1
 378              	 .cfi_startproc
 379              	 
 380              	 
 381              	 
 382 0000 80B4     	 push {r7}
 383              	.LCFI24:
 384              	 .cfi_def_cfa_offset 4
 385              	 .cfi_offset 7,-4
 386 0002 87B0     	 sub sp,sp,#28
 387              	.LCFI25:
 388              	 .cfi_def_cfa_offset 32
 389 0004 00AF     	 add r7,sp,#0
 390              	.LCFI26:
 391              	 .cfi_def_cfa_register 7
 392 0006 F860     	 str r0,[r7,#12]
 393 0008 B960     	 str r1,[r7,#8]
 394 000a 7A60     	 str r2,[r7,#4]
 252:.././hal/sam3u1c/usart.c **** 	uint32_t cd;
 253:.././hal/sam3u1c/usart.c **** 
 254:.././hal/sam3u1c/usart.c **** 	/* Calculate the clock divider according to the formula in SPI mode. */
 255:.././hal/sam3u1c/usart.c **** 	cd = (ul_mck + baudrate / 2) / baudrate;
 395              	 .loc 1 255 26
 396 000c BB68     	 ldr r3,[r7,#8]
 397 000e 5A08     	 lsrs r2,r3,#1
 398              	 .loc 1 255 15
 399 0010 7B68     	 ldr r3,[r7,#4]
 400 0012 1A44     	 add r2,r2,r3
 401              	 .loc 1 255 5
 402 0014 BB68     	 ldr r3,[r7,#8]
 403 0016 B2FBF3F3 	 udiv r3,r2,r3
 404 001a 7B61     	 str r3,[r7,#20]
 256:.././hal/sam3u1c/usart.c **** 
 257:.././hal/sam3u1c/usart.c **** 	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
 405              	 .loc 1 257 5
 406 001c 7B69     	 ldr r3,[r7,#20]
 407 001e 032B     	 cmp r3,#3
 408 0020 03D9     	 bls .L18
 409              	 .loc 1 257 28 discriminator 1
 410 0022 7B69     	 ldr r3,[r7,#20]
 411 0024 B3F5803F 	 cmp r3,#65536
 412 0028 01D3     	 bcc .L19
 413              	.L18:
 258:.././hal/sam3u1c/usart.c **** 		return 1;
 414              	 .loc 1 258 10
 415 002a 0123     	 movs r3,#1
 416 002c 03E0     	 b .L20
 417              	.L19:
 259:.././hal/sam3u1c/usart.c **** 	}
 260:.././hal/sam3u1c/usart.c **** 
 261:.././hal/sam3u1c/usart.c **** 	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
 418              	 .loc 1 261 19
 419 002e FB68     	 ldr r3,[r7,#12]
 420 0030 7A69     	 ldr r2,[r7,#20]
 421 0032 1A62     	 str r2,[r3,#32]
 262:.././hal/sam3u1c/usart.c **** 
 263:.././hal/sam3u1c/usart.c **** 	return 0;
 422              	 .loc 1 263 9
 423 0034 0023     	 movs r3,#0
 424              	.L20:
 264:.././hal/sam3u1c/usart.c **** }
 425              	 .loc 1 264 1
 426 0036 1846     	 mov r0,r3
 427 0038 1C37     	 adds r7,r7,#28
 428              	.LCFI27:
 429              	 .cfi_def_cfa_offset 4
 430 003a BD46     	 mov sp,r7
 431              	.LCFI28:
 432              	 .cfi_def_cfa_register 13
 433              	 
 434 003c 80BC     	 pop {r7}
 435              	.LCFI29:
 436              	 .cfi_restore 7
 437              	 .cfi_def_cfa_offset 0
 438 003e 7047     	 bx lr
 439              	 .cfi_endproc
 440              	.LFE73:
 442              	 .section .text.usart_set_spi_slave_baudrate,"ax",%progbits
 443              	 .align 1
 444              	 .syntax unified
 445              	 .thumb
 446              	 .thumb_func
 447              	 .fpu softvfp
 449              	usart_set_spi_slave_baudrate:
 450              	.LFB74:
 265:.././hal/sam3u1c/usart.c **** 
 266:.././hal/sam3u1c/usart.c **** /**
 267:.././hal/sam3u1c/usart.c ****  * \brief Select the SCK pin as the source of baudrate for the USART SPI slave
 268:.././hal/sam3u1c/usart.c ****  * mode.
 269:.././hal/sam3u1c/usart.c ****  *
 270:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 271:.././hal/sam3u1c/usart.c ****  */
 272:.././hal/sam3u1c/usart.c **** static void usart_set_spi_slave_baudrate(Usart *p_usart)
 273:.././hal/sam3u1c/usart.c **** {
 451              	 .loc 1 273 1
 452              	 .cfi_startproc
 453              	 
 454              	 
 455              	 
 456 0000 80B4     	 push {r7}
 457              	.LCFI30:
 458              	 .cfi_def_cfa_offset 4
 459              	 .cfi_offset 7,-4
 460 0002 83B0     	 sub sp,sp,#12
 461              	.LCFI31:
 462              	 .cfi_def_cfa_offset 16
 463 0004 00AF     	 add r7,sp,#0
 464              	.LCFI32:
 465              	 .cfi_def_cfa_register 7
 466 0006 7860     	 str r0,[r7,#4]
 274:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR &= ~US_MR_USCLKS_Msk;
 467              	 .loc 1 274 17
 468 0008 7B68     	 ldr r3,[r7,#4]
 469 000a 5B68     	 ldr r3,[r3,#4]
 470 000c 23F03002 	 bic r2,r3,#48
 471 0010 7B68     	 ldr r3,[r7,#4]
 472 0012 5A60     	 str r2,[r3,#4]
 275:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= US_MR_USCLKS_SCK;
 473              	 .loc 1 275 17
 474 0014 7B68     	 ldr r3,[r7,#4]
 475 0016 5B68     	 ldr r3,[r3,#4]
 476 0018 43F03002 	 orr r2,r3,#48
 477 001c 7B68     	 ldr r3,[r7,#4]
 478 001e 5A60     	 str r2,[r3,#4]
 276:.././hal/sam3u1c/usart.c **** }
 479              	 .loc 1 276 1
 480 0020 00BF     	 nop
 481 0022 0C37     	 adds r7,r7,#12
 482              	.LCFI33:
 483              	 .cfi_def_cfa_offset 4
 484 0024 BD46     	 mov sp,r7
 485              	.LCFI34:
 486              	 .cfi_def_cfa_register 13
 487              	 
 488 0026 80BC     	 pop {r7}
 489              	.LCFI35:
 490              	 .cfi_restore 7
 491              	 .cfi_def_cfa_offset 0
 492 0028 7047     	 bx lr
 493              	 .cfi_endproc
 494              	.LFE74:
 496              	 .section .text.usart_reset,"ax",%progbits
 497              	 .align 1
 498              	 .global usart_reset
 499              	 .syntax unified
 500              	 .thumb
 501              	 .thumb_func
 502              	 .fpu softvfp
 504              	usart_reset:
 505              	.LFB75:
 277:.././hal/sam3u1c/usart.c **** 
 278:.././hal/sam3u1c/usart.c **** /**
 279:.././hal/sam3u1c/usart.c ****  * \brief Reset the USART and disable TX and RX.
 280:.././hal/sam3u1c/usart.c ****  *
 281:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 282:.././hal/sam3u1c/usart.c ****  */
 283:.././hal/sam3u1c/usart.c **** void usart_reset(Usart *p_usart)
 284:.././hal/sam3u1c/usart.c **** {
 506              	 .loc 1 284 1
 507              	 .cfi_startproc
 508              	 
 509              	 
 510 0000 80B5     	 push {r7,lr}
 511              	.LCFI36:
 512              	 .cfi_def_cfa_offset 8
 513              	 .cfi_offset 7,-8
 514              	 .cfi_offset 14,-4
 515 0002 82B0     	 sub sp,sp,#8
 516              	.LCFI37:
 517              	 .cfi_def_cfa_offset 16
 518 0004 00AF     	 add r7,sp,#0
 519              	.LCFI38:
 520              	 .cfi_def_cfa_register 7
 521 0006 7860     	 str r0,[r7,#4]
 285:.././hal/sam3u1c/usart.c **** 	/* Disable the Write Protect. */
 286:.././hal/sam3u1c/usart.c **** 	usart_disable_writeprotect(p_usart);
 522              	 .loc 1 286 2
 523 0008 7868     	 ldr r0,[r7,#4]
 524 000a 0F4B     	 ldr r3,.L23
 525 000c 9847     	 blx r3
 526              	.LVL0:
 287:.././hal/sam3u1c/usart.c **** 
 288:.././hal/sam3u1c/usart.c **** 	/* Reset registers that could cause unpredictable behavior after reset. */
 289:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = 0;
 527              	 .loc 1 289 17
 528 000e 7B68     	 ldr r3,[r7,#4]
 529 0010 0022     	 movs r2,#0
 530 0012 5A60     	 str r2,[r3,#4]
 290:.././hal/sam3u1c/usart.c **** 	p_usart->US_RTOR = 0;
 531              	 .loc 1 290 19
 532 0014 7B68     	 ldr r3,[r7,#4]
 533 0016 0022     	 movs r2,#0
 534 0018 5A62     	 str r2,[r3,#36]
 291:.././hal/sam3u1c/usart.c **** 	p_usart->US_TTGR = 0;
 535              	 .loc 1 291 19
 536 001a 7B68     	 ldr r3,[r7,#4]
 537 001c 0022     	 movs r2,#0
 538 001e 9A62     	 str r2,[r3,#40]
 292:.././hal/sam3u1c/usart.c **** 
 293:.././hal/sam3u1c/usart.c **** 	/* Disable TX and RX. */
 294:.././hal/sam3u1c/usart.c **** 	usart_reset_tx(p_usart);
 539              	 .loc 1 294 2
 540 0020 7868     	 ldr r0,[r7,#4]
 541 0022 0A4B     	 ldr r3,.L23+4
 542 0024 9847     	 blx r3
 543              	.LVL1:
 295:.././hal/sam3u1c/usart.c **** 	usart_reset_rx(p_usart);
 544              	 .loc 1 295 2
 545 0026 7868     	 ldr r0,[r7,#4]
 546 0028 094B     	 ldr r3,.L23+8
 547 002a 9847     	 blx r3
 548              	.LVL2:
 296:.././hal/sam3u1c/usart.c **** 	/* Reset status bits. */
 297:.././hal/sam3u1c/usart.c **** 	usart_reset_status(p_usart);
 549              	 .loc 1 297 2
 550 002c 7868     	 ldr r0,[r7,#4]
 551 002e 094B     	 ldr r3,.L23+12
 552 0030 9847     	 blx r3
 553              	.LVL3:
 298:.././hal/sam3u1c/usart.c **** 	/* Turn off RTS and DTR if exist. */
 299:.././hal/sam3u1c/usart.c **** 	usart_drive_RTS_pin_high(p_usart);
 554              	 .loc 1 299 2
 555 0032 7868     	 ldr r0,[r7,#4]
 556 0034 084B     	 ldr r3,.L23+16
 557 0036 9847     	 blx r3
 558              	.LVL4:
 300:.././hal/sam3u1c/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
 301:.././hal/sam3u1c/usart.c **** 	usart_drive_DTR_pin_high(p_usart);
 559              	 .loc 1 301 2
 560 0038 7868     	 ldr r0,[r7,#4]
 561 003a 084B     	 ldr r3,.L23+20
 562 003c 9847     	 blx r3
 563              	.LVL5:
 302:.././hal/sam3u1c/usart.c **** #endif
 303:.././hal/sam3u1c/usart.c **** }
 564              	 .loc 1 303 1
 565 003e 00BF     	 nop
 566 0040 0837     	 adds r7,r7,#8
 567              	.LCFI39:
 568              	 .cfi_def_cfa_offset 8
 569 0042 BD46     	 mov sp,r7
 570              	.LCFI40:
 571              	 .cfi_def_cfa_register 13
 572              	 
 573 0044 80BD     	 pop {r7,pc}
 574              	.L24:
 575 0046 00BF     	 .align 2
 576              	.L23:
 577 0048 00000000 	 .word usart_disable_writeprotect
 578 004c 00000000 	 .word usart_reset_tx
 579 0050 00000000 	 .word usart_reset_rx
 580 0054 00000000 	 .word usart_reset_status
 581 0058 00000000 	 .word usart_drive_RTS_pin_high
 582 005c 00000000 	 .word usart_drive_DTR_pin_high
 583              	 .cfi_endproc
 584              	.LFE75:
 586              	 .section .text.usart_init_rs232,"ax",%progbits
 587              	 .align 1
 588              	 .global usart_init_rs232
 589              	 .syntax unified
 590              	 .thumb
 591              	 .thumb_func
 592              	 .fpu softvfp
 594              	usart_init_rs232:
 595              	.LFB76:
 304:.././hal/sam3u1c/usart.c **** 
 305:.././hal/sam3u1c/usart.c **** /**
 306:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in RS232 mode.
 307:.././hal/sam3u1c/usart.c ****  *
 308:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 309:.././hal/sam3u1c/usart.c ****  *
 310:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 311:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 312:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 313:.././hal/sam3u1c/usart.c ****  *
 314:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 315:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 316:.././hal/sam3u1c/usart.c ****  */
 317:.././hal/sam3u1c/usart.c **** uint32_t usart_init_rs232(Usart *p_usart,
 318:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 319:.././hal/sam3u1c/usart.c **** {
 596              	 .loc 1 319 1
 597              	 .cfi_startproc
 598              	 
 599              	 
 600 0000 80B5     	 push {r7,lr}
 601              	.LCFI41:
 602              	 .cfi_def_cfa_offset 8
 603              	 .cfi_offset 7,-8
 604              	 .cfi_offset 14,-4
 605 0002 84B0     	 sub sp,sp,#16
 606              	.LCFI42:
 607              	 .cfi_def_cfa_offset 24
 608 0004 00AF     	 add r7,sp,#0
 609              	.LCFI43:
 610              	 .cfi_def_cfa_register 7
 611 0006 F860     	 str r0,[r7,#12]
 612 0008 B960     	 str r1,[r7,#8]
 613 000a 7A60     	 str r2,[r7,#4]
 320:.././hal/sam3u1c/usart.c **** 	static uint32_t ul_reg_val;
 321:.././hal/sam3u1c/usart.c **** 
 322:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 323:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 614              	 .loc 1 323 2
 615 000c F868     	 ldr r0,[r7,#12]
 616 000e 1A4B     	 ldr r3,.L29
 617 0010 9847     	 blx r3
 618              	.LVL6:
 324:.././hal/sam3u1c/usart.c **** 
 325:.././hal/sam3u1c/usart.c **** 	ul_reg_val = 0;
 619              	 .loc 1 325 13
 620 0012 1A4B     	 ldr r3,.L29+4
 621 0014 0022     	 movs r2,#0
 622 0016 1A60     	 str r2,[r3]
 326:.././hal/sam3u1c/usart.c **** 	/* Check whether the input values are legal. */
 327:.././hal/sam3u1c/usart.c **** 	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
 623              	 .loc 1 327 5
 624 0018 BB68     	 ldr r3,[r7,#8]
 625 001a 002B     	 cmp r3,#0
 626 001c 09D0     	 beq .L26
 627              	 .loc 1 327 22 discriminator 1
 628 001e BB68     	 ldr r3,[r7,#8]
 629 0020 1B68     	 ldr r3,[r3]
 630 0022 7A68     	 ldr r2,[r7,#4]
 631 0024 1946     	 mov r1,r3
 632 0026 F868     	 ldr r0,[r7,#12]
 633 0028 154B     	 ldr r3,.L29+8
 634 002a 9847     	 blx r3
 635              	.LVL7:
 636 002c 0346     	 mov r3,r0
 637              	 .loc 1 327 19 discriminator 1
 638 002e 002B     	 cmp r3,#0
 639 0030 01D0     	 beq .L27
 640              	.L26:
 328:.././hal/sam3u1c/usart.c **** 			p_usart_opt->baudrate, ul_mck)) {
 329:.././hal/sam3u1c/usart.c **** 		return 1;
 641              	 .loc 1 329 10
 642 0032 0123     	 movs r3,#1
 643 0034 1BE0     	 b .L28
 644              	.L27:
 330:.././hal/sam3u1c/usart.c **** 	}
 331:.././hal/sam3u1c/usart.c **** 
 332:.././hal/sam3u1c/usart.c **** 	/* Configure the USART option. */
 333:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
 645              	 .loc 1 333 27
 646 0036 BB68     	 ldr r3,[r7,#8]
 647 0038 5A68     	 ldr r2,[r3,#4]
 648              	 .loc 1 333 54
 649 003a BB68     	 ldr r3,[r7,#8]
 650 003c 9B68     	 ldr r3,[r3,#8]
 651              	 .loc 1 333 41
 652 003e 1A43     	 orrs r2,r2,r3
 334:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 653              	 .loc 1 334 15
 654 0040 BB68     	 ldr r3,[r7,#8]
 655 0042 1B69     	 ldr r3,[r3,#16]
 333:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 656              	 .loc 1 333 68
 657 0044 1A43     	 orrs r2,r2,r3
 658              	 .loc 1 334 43
 659 0046 BB68     	 ldr r3,[r7,#8]
 660 0048 DB68     	 ldr r3,[r3,#12]
 661              	 .loc 1 334 30
 662 004a 1A43     	 orrs r2,r2,r3
 333:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 663              	 .loc 1 333 13
 664 004c 0B4B     	 ldr r3,.L29+4
 665 004e 1B68     	 ldr r3,[r3]
 666 0050 1343     	 orrs r3,r3,r2
 667 0052 0A4A     	 ldr r2,.L29+4
 668 0054 1360     	 str r3,[r2]
 335:.././hal/sam3u1c/usart.c **** 
 336:.././hal/sam3u1c/usart.c **** 	/* Configure the USART mode as normal mode. */
 337:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_NORMAL;
 669              	 .loc 1 337 13
 670 0056 094B     	 ldr r3,.L29+4
 671 0058 1B68     	 ldr r3,[r3]
 672 005a 084A     	 ldr r2,.L29+4
 673 005c 1360     	 str r3,[r2]
 338:.././hal/sam3u1c/usart.c **** 
 339:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 674              	 .loc 1 339 17
 675 005e FB68     	 ldr r3,[r7,#12]
 676 0060 5A68     	 ldr r2,[r3,#4]
 677 0062 064B     	 ldr r3,.L29+4
 678 0064 1B68     	 ldr r3,[r3]
 679 0066 1A43     	 orrs r2,r2,r3
 680 0068 FB68     	 ldr r3,[r7,#12]
 681 006a 5A60     	 str r2,[r3,#4]
 340:.././hal/sam3u1c/usart.c **** 
 341:.././hal/sam3u1c/usart.c **** 	return 0;
 682              	 .loc 1 341 9
 683 006c 0023     	 movs r3,#0
 684              	.L28:
 342:.././hal/sam3u1c/usart.c **** }
 685              	 .loc 1 342 1
 686 006e 1846     	 mov r0,r3
 687 0070 1037     	 adds r7,r7,#16
 688              	.LCFI44:
 689              	 .cfi_def_cfa_offset 8
 690 0072 BD46     	 mov sp,r7
 691              	.LCFI45:
 692              	 .cfi_def_cfa_register 13
 693              	 
 694 0074 80BD     	 pop {r7,pc}
 695              	.L30:
 696 0076 00BF     	 .align 2
 697              	.L29:
 698 0078 00000000 	 .word usart_reset
 699 007c 00000000 	 .word ul_reg_val.7160
 700 0080 00000000 	 .word usart_set_async_baudrate
 701              	 .cfi_endproc
 702              	.LFE76:
 704              	 .section .text.usart_init_hw_handshaking,"ax",%progbits
 705              	 .align 1
 706              	 .global usart_init_hw_handshaking
 707              	 .syntax unified
 708              	 .thumb
 709              	 .thumb_func
 710              	 .fpu softvfp
 712              	usart_init_hw_handshaking:
 713              	.LFB77:
 343:.././hal/sam3u1c/usart.c **** 
 344:.././hal/sam3u1c/usart.c **** /**
 345:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in hardware handshaking mode.
 346:.././hal/sam3u1c/usart.c ****  *
 347:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 348:.././hal/sam3u1c/usart.c ****  *
 349:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 350:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 351:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 352:.././hal/sam3u1c/usart.c ****  *
 353:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 354:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 355:.././hal/sam3u1c/usart.c ****  */
 356:.././hal/sam3u1c/usart.c **** uint32_t usart_init_hw_handshaking(Usart *p_usart,
 357:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 358:.././hal/sam3u1c/usart.c **** {
 714              	 .loc 1 358 1
 715              	 .cfi_startproc
 716              	 
 717              	 
 718 0000 80B5     	 push {r7,lr}
 719              	.LCFI46:
 720              	 .cfi_def_cfa_offset 8
 721              	 .cfi_offset 7,-8
 722              	 .cfi_offset 14,-4
 723 0002 84B0     	 sub sp,sp,#16
 724              	.LCFI47:
 725              	 .cfi_def_cfa_offset 24
 726 0004 00AF     	 add r7,sp,#0
 727              	.LCFI48:
 728              	 .cfi_def_cfa_register 7
 729 0006 F860     	 str r0,[r7,#12]
 730 0008 B960     	 str r1,[r7,#8]
 731 000a 7A60     	 str r2,[r7,#4]
 359:.././hal/sam3u1c/usart.c **** 	/* Initialize the USART as standard RS232. */
 360:.././hal/sam3u1c/usart.c **** 	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
 732              	 .loc 1 360 6
 733 000c 7A68     	 ldr r2,[r7,#4]
 734 000e B968     	 ldr r1,[r7,#8]
 735 0010 F868     	 ldr r0,[r7,#12]
 736 0012 0A4B     	 ldr r3,.L34
 737 0014 9847     	 blx r3
 738              	.LVL8:
 739 0016 0346     	 mov r3,r0
 740              	 .loc 1 360 5
 741 0018 002B     	 cmp r3,#0
 742 001a 01D0     	 beq .L32
 361:.././hal/sam3u1c/usart.c **** 		return 1;
 743              	 .loc 1 361 10
 744 001c 0123     	 movs r3,#1
 745 001e 08E0     	 b .L33
 746              	.L32:
 362:.././hal/sam3u1c/usart.c **** 	}
 363:.././hal/sam3u1c/usart.c **** 
 364:.././hal/sam3u1c/usart.c **** 	/* Set hardware handshaking mode. */
 365:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 747              	 .loc 1 365 27
 748 0020 FB68     	 ldr r3,[r7,#12]
 749 0022 5B68     	 ldr r3,[r3,#4]
 750              	 .loc 1 365 35
 751 0024 23F00F03 	 bic r3,r3,#15
 752              	 .loc 1 365 60
 753 0028 43F00202 	 orr r2,r3,#2
 754              	 .loc 1 365 17
 755 002c FB68     	 ldr r3,[r7,#12]
 756 002e 5A60     	 str r2,[r3,#4]
 366:.././hal/sam3u1c/usart.c **** 			US_MR_USART_MODE_HW_HANDSHAKING;
 367:.././hal/sam3u1c/usart.c **** 
 368:.././hal/sam3u1c/usart.c **** 	return 0;
 757              	 .loc 1 368 9
 758 0030 0023     	 movs r3,#0
 759              	.L33:
 369:.././hal/sam3u1c/usart.c **** }
 760              	 .loc 1 369 1
 761 0032 1846     	 mov r0,r3
 762 0034 1037     	 adds r7,r7,#16
 763              	.LCFI49:
 764              	 .cfi_def_cfa_offset 8
 765 0036 BD46     	 mov sp,r7
 766              	.LCFI50:
 767              	 .cfi_def_cfa_register 13
 768              	 
 769 0038 80BD     	 pop {r7,pc}
 770              	.L35:
 771 003a 00BF     	 .align 2
 772              	.L34:
 773 003c 00000000 	 .word usart_init_rs232
 774              	 .cfi_endproc
 775              	.LFE77:
 777              	 .section .text.usart_init_modem,"ax",%progbits
 778              	 .align 1
 779              	 .global usart_init_modem
 780              	 .syntax unified
 781              	 .thumb
 782              	 .thumb_func
 783              	 .fpu softvfp
 785              	usart_init_modem:
 786              	.LFB78:
 370:.././hal/sam3u1c/usart.c **** 
 371:.././hal/sam3u1c/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
 372:.././hal/sam3u1c/usart.c **** 
 373:.././hal/sam3u1c/usart.c **** /**
 374:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in modem mode.
 375:.././hal/sam3u1c/usart.c ****  *
 376:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 377:.././hal/sam3u1c/usart.c ****  *
 378:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 379:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 380:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 381:.././hal/sam3u1c/usart.c ****  *
 382:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 383:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 384:.././hal/sam3u1c/usart.c ****  */
 385:.././hal/sam3u1c/usart.c **** uint32_t usart_init_modem(Usart *p_usart,
 386:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 387:.././hal/sam3u1c/usart.c **** {
 787              	 .loc 1 387 1
 788              	 .cfi_startproc
 789              	 
 790              	 
 791 0000 80B5     	 push {r7,lr}
 792              	.LCFI51:
 793              	 .cfi_def_cfa_offset 8
 794              	 .cfi_offset 7,-8
 795              	 .cfi_offset 14,-4
 796 0002 84B0     	 sub sp,sp,#16
 797              	.LCFI52:
 798              	 .cfi_def_cfa_offset 24
 799 0004 00AF     	 add r7,sp,#0
 800              	.LCFI53:
 801              	 .cfi_def_cfa_register 7
 802 0006 F860     	 str r0,[r7,#12]
 803 0008 B960     	 str r1,[r7,#8]
 804 000a 7A60     	 str r2,[r7,#4]
 388:.././hal/sam3u1c/usart.c **** 	/*
 389:.././hal/sam3u1c/usart.c **** 	 * SAM3S, SAM4S and SAM4E series support MODEM mode only on USART1,
 390:.././hal/sam3u1c/usart.c **** 	 * SAM3U and SAM4L series support MODEM mode only on USART0.
 391:.././hal/sam3u1c/usart.c **** 	 */
 392:.././hal/sam3u1c/usart.c **** #if (SAM3S || SAM4S || SAM4E)
 393:.././hal/sam3u1c/usart.c **** #ifdef USART1
 394:.././hal/sam3u1c/usart.c **** 	if (p_usart != USART1) {
 395:.././hal/sam3u1c/usart.c **** 		return 1;
 396:.././hal/sam3u1c/usart.c **** 	}
 397:.././hal/sam3u1c/usart.c **** #endif
 398:.././hal/sam3u1c/usart.c **** #elif (SAM3U || SAM4L)
 399:.././hal/sam3u1c/usart.c **** 	if (p_usart != USART0) {
 805              	 .loc 1 399 5
 806 000c FB68     	 ldr r3,[r7,#12]
 807 000e 0E4A     	 ldr r2,.L40
 808 0010 9342     	 cmp r3,r2
 809 0012 01D0     	 beq .L37
 400:.././hal/sam3u1c/usart.c **** 		return 1;
 810              	 .loc 1 400 10
 811 0014 0123     	 movs r3,#1
 812 0016 12E0     	 b .L38
 813              	.L37:
 401:.././hal/sam3u1c/usart.c **** 	}
 402:.././hal/sam3u1c/usart.c **** #endif
 403:.././hal/sam3u1c/usart.c **** 
 404:.././hal/sam3u1c/usart.c **** 	/* Initialize the USART as standard RS232. */
 405:.././hal/sam3u1c/usart.c **** 	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
 814              	 .loc 1 405 6
 815 0018 7A68     	 ldr r2,[r7,#4]
 816 001a B968     	 ldr r1,[r7,#8]
 817 001c F868     	 ldr r0,[r7,#12]
 818 001e 0B4B     	 ldr r3,.L40+4
 819 0020 9847     	 blx r3
 820              	.LVL9:
 821 0022 0346     	 mov r3,r0
 822              	 .loc 1 405 5
 823 0024 002B     	 cmp r3,#0
 824 0026 01D0     	 beq .L39
 406:.././hal/sam3u1c/usart.c **** 		return 1;
 825              	 .loc 1 406 10
 826 0028 0123     	 movs r3,#1
 827 002a 08E0     	 b .L38
 828              	.L39:
 407:.././hal/sam3u1c/usart.c **** 	}
 408:.././hal/sam3u1c/usart.c **** 
 409:.././hal/sam3u1c/usart.c **** 	/* Set MODEM mode. */
 410:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 829              	 .loc 1 410 27
 830 002c FB68     	 ldr r3,[r7,#12]
 831 002e 5B68     	 ldr r3,[r3,#4]
 832              	 .loc 1 410 35
 833 0030 23F00F03 	 bic r3,r3,#15
 834              	 .loc 1 410 60
 835 0034 43F00302 	 orr r2,r3,#3
 836              	 .loc 1 410 17
 837 0038 FB68     	 ldr r3,[r7,#12]
 838 003a 5A60     	 str r2,[r3,#4]
 411:.././hal/sam3u1c/usart.c **** 			US_MR_USART_MODE_MODEM;
 412:.././hal/sam3u1c/usart.c **** 
 413:.././hal/sam3u1c/usart.c **** 	return 0;
 839              	 .loc 1 413 9
 840 003c 0023     	 movs r3,#0
 841              	.L38:
 414:.././hal/sam3u1c/usart.c **** }
 842              	 .loc 1 414 1
 843 003e 1846     	 mov r0,r3
 844 0040 1037     	 adds r7,r7,#16
 845              	.LCFI54:
 846              	 .cfi_def_cfa_offset 8
 847 0042 BD46     	 mov sp,r7
 848              	.LCFI55:
 849              	 .cfi_def_cfa_register 13
 850              	 
 851 0044 80BD     	 pop {r7,pc}
 852              	.L41:
 853 0046 00BF     	 .align 2
 854              	.L40:
 855 0048 00000940 	 .word 1074331648
 856 004c 00000000 	 .word usart_init_rs232
 857              	 .cfi_endproc
 858              	.LFE78:
 860              	 .section .text.usart_init_sync_master,"ax",%progbits
 861              	 .align 1
 862              	 .global usart_init_sync_master
 863              	 .syntax unified
 864              	 .thumb
 865              	 .thumb_func
 866              	 .fpu softvfp
 868              	usart_init_sync_master:
 869              	.LFB79:
 415:.././hal/sam3u1c/usart.c **** #endif
 416:.././hal/sam3u1c/usart.c **** 
 417:.././hal/sam3u1c/usart.c **** /**
 418:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in SYNC mode and act as a master.
 419:.././hal/sam3u1c/usart.c ****  *
 420:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 421:.././hal/sam3u1c/usart.c ****  *
 422:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 423:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 424:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 425:.././hal/sam3u1c/usart.c ****  *
 426:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 427:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 428:.././hal/sam3u1c/usart.c ****  */
 429:.././hal/sam3u1c/usart.c **** uint32_t usart_init_sync_master(Usart *p_usart,
 430:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 431:.././hal/sam3u1c/usart.c **** {
 870              	 .loc 1 431 1
 871              	 .cfi_startproc
 872              	 
 873              	 
 874 0000 80B5     	 push {r7,lr}
 875              	.LCFI56:
 876              	 .cfi_def_cfa_offset 8
 877              	 .cfi_offset 7,-8
 878              	 .cfi_offset 14,-4
 879 0002 84B0     	 sub sp,sp,#16
 880              	.LCFI57:
 881              	 .cfi_def_cfa_offset 24
 882 0004 00AF     	 add r7,sp,#0
 883              	.LCFI58:
 884              	 .cfi_def_cfa_register 7
 885 0006 F860     	 str r0,[r7,#12]
 886 0008 B960     	 str r1,[r7,#8]
 887 000a 7A60     	 str r2,[r7,#4]
 432:.././hal/sam3u1c/usart.c **** 	static uint32_t ul_reg_val;
 433:.././hal/sam3u1c/usart.c **** 
 434:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 435:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 888              	 .loc 1 435 2
 889 000c F868     	 ldr r0,[r7,#12]
 890 000e 1B4B     	 ldr r3,.L46
 891 0010 9847     	 blx r3
 892              	.LVL10:
 436:.././hal/sam3u1c/usart.c **** 
 437:.././hal/sam3u1c/usart.c **** 	ul_reg_val = 0;
 893              	 .loc 1 437 13
 894 0012 1B4B     	 ldr r3,.L46+4
 895 0014 0022     	 movs r2,#0
 896 0016 1A60     	 str r2,[r3]
 438:.././hal/sam3u1c/usart.c **** 	/* Check whether the input values are legal. */
 439:.././hal/sam3u1c/usart.c **** 	if (!p_usart_opt || usart_set_sync_master_baudrate(p_usart,
 897              	 .loc 1 439 5
 898 0018 BB68     	 ldr r3,[r7,#8]
 899 001a 002B     	 cmp r3,#0
 900 001c 09D0     	 beq .L43
 901              	 .loc 1 439 22 discriminator 1
 902 001e BB68     	 ldr r3,[r7,#8]
 903 0020 1B68     	 ldr r3,[r3]
 904 0022 7A68     	 ldr r2,[r7,#4]
 905 0024 1946     	 mov r1,r3
 906 0026 F868     	 ldr r0,[r7,#12]
 907 0028 164B     	 ldr r3,.L46+8
 908 002a 9847     	 blx r3
 909              	.LVL11:
 910 002c 0346     	 mov r3,r0
 911              	 .loc 1 439 19 discriminator 1
 912 002e 002B     	 cmp r3,#0
 913 0030 01D0     	 beq .L44
 914              	.L43:
 440:.././hal/sam3u1c/usart.c **** 			p_usart_opt->baudrate, ul_mck)) {
 441:.././hal/sam3u1c/usart.c **** 		return 1;
 915              	 .loc 1 441 10
 916 0032 0123     	 movs r3,#1
 917 0034 1DE0     	 b .L45
 918              	.L44:
 442:.././hal/sam3u1c/usart.c **** 	}
 443:.././hal/sam3u1c/usart.c **** 
 444:.././hal/sam3u1c/usart.c **** 	/* Configure the USART option. */
 445:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
 919              	 .loc 1 445 27
 920 0036 BB68     	 ldr r3,[r7,#8]
 921 0038 5A68     	 ldr r2,[r3,#4]
 922              	 .loc 1 445 54
 923 003a BB68     	 ldr r3,[r7,#8]
 924 003c 9B68     	 ldr r3,[r3,#8]
 925              	 .loc 1 445 41
 926 003e 1A43     	 orrs r2,r2,r3
 446:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 927              	 .loc 1 446 15
 928 0040 BB68     	 ldr r3,[r7,#8]
 929 0042 1B69     	 ldr r3,[r3,#16]
 445:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 930              	 .loc 1 445 68
 931 0044 1A43     	 orrs r2,r2,r3
 932              	 .loc 1 446 43
 933 0046 BB68     	 ldr r3,[r7,#8]
 934 0048 DB68     	 ldr r3,[r3,#12]
 935              	 .loc 1 446 30
 936 004a 1A43     	 orrs r2,r2,r3
 445:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 937              	 .loc 1 445 13
 938 004c 0C4B     	 ldr r3,.L46+4
 939 004e 1B68     	 ldr r3,[r3]
 940 0050 1343     	 orrs r3,r3,r2
 941 0052 0B4A     	 ldr r2,.L46+4
 942 0054 1360     	 str r3,[r2]
 447:.././hal/sam3u1c/usart.c **** 
 448:.././hal/sam3u1c/usart.c **** 	/* Set normal mode and output clock as synchronous master. */
 449:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_NORMAL | US_MR_CLKO;
 943              	 .loc 1 449 13
 944 0056 0A4B     	 ldr r3,.L46+4
 945 0058 1B68     	 ldr r3,[r3]
 946 005a 43F48023 	 orr r3,r3,#262144
 947 005e 084A     	 ldr r2,.L46+4
 948 0060 1360     	 str r3,[r2]
 450:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 949              	 .loc 1 450 17
 950 0062 FB68     	 ldr r3,[r7,#12]
 951 0064 5A68     	 ldr r2,[r3,#4]
 952 0066 064B     	 ldr r3,.L46+4
 953 0068 1B68     	 ldr r3,[r3]
 954 006a 1A43     	 orrs r2,r2,r3
 955 006c FB68     	 ldr r3,[r7,#12]
 956 006e 5A60     	 str r2,[r3,#4]
 451:.././hal/sam3u1c/usart.c **** 
 452:.././hal/sam3u1c/usart.c **** 	return 0;
 957              	 .loc 1 452 9
 958 0070 0023     	 movs r3,#0
 959              	.L45:
 453:.././hal/sam3u1c/usart.c **** }
 960              	 .loc 1 453 1
 961 0072 1846     	 mov r0,r3
 962 0074 1037     	 adds r7,r7,#16
 963              	.LCFI59:
 964              	 .cfi_def_cfa_offset 8
 965 0076 BD46     	 mov sp,r7
 966              	.LCFI60:
 967              	 .cfi_def_cfa_register 13
 968              	 
 969 0078 80BD     	 pop {r7,pc}
 970              	.L47:
 971 007a 00BF     	 .align 2
 972              	.L46:
 973 007c 00000000 	 .word usart_reset
 974 0080 00000000 	 .word ul_reg_val.7176
 975 0084 00000000 	 .word usart_set_sync_master_baudrate
 976              	 .cfi_endproc
 977              	.LFE79:
 979              	 .section .text.usart_init_sync_slave,"ax",%progbits
 980              	 .align 1
 981              	 .global usart_init_sync_slave
 982              	 .syntax unified
 983              	 .thumb
 984              	 .thumb_func
 985              	 .fpu softvfp
 987              	usart_init_sync_slave:
 988              	.LFB80:
 454:.././hal/sam3u1c/usart.c **** 
 455:.././hal/sam3u1c/usart.c **** /**
 456:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in SYNC mode and act as a slave.
 457:.././hal/sam3u1c/usart.c ****  *
 458:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 459:.././hal/sam3u1c/usart.c ****  *
 460:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 461:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 462:.././hal/sam3u1c/usart.c ****  *
 463:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 464:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 465:.././hal/sam3u1c/usart.c ****  */
 466:.././hal/sam3u1c/usart.c **** uint32_t usart_init_sync_slave(Usart *p_usart,
 467:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt)
 468:.././hal/sam3u1c/usart.c **** {
 989              	 .loc 1 468 1
 990              	 .cfi_startproc
 991              	 
 992              	 
 993 0000 80B5     	 push {r7,lr}
 994              	.LCFI61:
 995              	 .cfi_def_cfa_offset 8
 996              	 .cfi_offset 7,-8
 997              	 .cfi_offset 14,-4
 998 0002 82B0     	 sub sp,sp,#8
 999              	.LCFI62:
 1000              	 .cfi_def_cfa_offset 16
 1001 0004 00AF     	 add r7,sp,#0
 1002              	.LCFI63:
 1003              	 .cfi_def_cfa_register 7
 1004 0006 7860     	 str r0,[r7,#4]
 1005 0008 3960     	 str r1,[r7]
 469:.././hal/sam3u1c/usart.c **** 	static uint32_t ul_reg_val;
 470:.././hal/sam3u1c/usart.c **** 
 471:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 472:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 1006              	 .loc 1 472 2
 1007 000a 7868     	 ldr r0,[r7,#4]
 1008 000c 164B     	 ldr r3,.L51
 1009 000e 9847     	 blx r3
 1010              	.LVL12:
 473:.././hal/sam3u1c/usart.c **** 
 474:.././hal/sam3u1c/usart.c **** 	ul_reg_val = 0;
 1011              	 .loc 1 474 13
 1012 0010 164B     	 ldr r3,.L51+4
 1013 0012 0022     	 movs r2,#0
 1014 0014 1A60     	 str r2,[r3]
 475:.././hal/sam3u1c/usart.c **** 	usart_set_sync_slave_baudrate(p_usart);
 1015              	 .loc 1 475 2
 1016 0016 7868     	 ldr r0,[r7,#4]
 1017 0018 154B     	 ldr r3,.L51+8
 1018 001a 9847     	 blx r3
 1019              	.LVL13:
 476:.././hal/sam3u1c/usart.c **** 
 477:.././hal/sam3u1c/usart.c **** 	/* Check whether the input values are legal. */
 478:.././hal/sam3u1c/usart.c **** 	if (!p_usart_opt) {
 1020              	 .loc 1 478 5
 1021 001c 3B68     	 ldr r3,[r7]
 1022 001e 002B     	 cmp r3,#0
 1023 0020 01D1     	 bne .L49
 479:.././hal/sam3u1c/usart.c **** 		return 1;
 1024              	 .loc 1 479 10
 1025 0022 0123     	 movs r3,#1
 1026 0024 1BE0     	 b .L50
 1027              	.L49:
 480:.././hal/sam3u1c/usart.c **** 	}
 481:.././hal/sam3u1c/usart.c **** 
 482:.././hal/sam3u1c/usart.c **** 	/* Configure the USART option. */
 483:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
 1028              	 .loc 1 483 27
 1029 0026 3B68     	 ldr r3,[r7]
 1030 0028 5A68     	 ldr r2,[r3,#4]
 1031              	 .loc 1 483 54
 1032 002a 3B68     	 ldr r3,[r7]
 1033 002c 9B68     	 ldr r3,[r3,#8]
 1034              	 .loc 1 483 41
 1035 002e 1A43     	 orrs r2,r2,r3
 484:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1036              	 .loc 1 484 15
 1037 0030 3B68     	 ldr r3,[r7]
 1038 0032 1B69     	 ldr r3,[r3,#16]
 483:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1039              	 .loc 1 483 68
 1040 0034 1A43     	 orrs r2,r2,r3
 1041              	 .loc 1 484 43
 1042 0036 3B68     	 ldr r3,[r7]
 1043 0038 DB68     	 ldr r3,[r3,#12]
 1044              	 .loc 1 484 30
 1045 003a 1A43     	 orrs r2,r2,r3
 483:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
 1046              	 .loc 1 483 13
 1047 003c 0B4B     	 ldr r3,.L51+4
 1048 003e 1B68     	 ldr r3,[r3]
 1049 0040 1343     	 orrs r3,r3,r2
 1050 0042 0A4A     	 ldr r2,.L51+4
 1051 0044 1360     	 str r3,[r2]
 485:.././hal/sam3u1c/usart.c **** 
 486:.././hal/sam3u1c/usart.c **** 	/* Set normal mode. */
 487:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_NORMAL;
 1052              	 .loc 1 487 13
 1053 0046 094B     	 ldr r3,.L51+4
 1054 0048 1B68     	 ldr r3,[r3]
 1055 004a 084A     	 ldr r2,.L51+4
 1056 004c 1360     	 str r3,[r2]
 488:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 1057              	 .loc 1 488 17
 1058 004e 7B68     	 ldr r3,[r7,#4]
 1059 0050 5A68     	 ldr r2,[r3,#4]
 1060 0052 064B     	 ldr r3,.L51+4
 1061 0054 1B68     	 ldr r3,[r3]
 1062 0056 1A43     	 orrs r2,r2,r3
 1063 0058 7B68     	 ldr r3,[r7,#4]
 1064 005a 5A60     	 str r2,[r3,#4]
 489:.././hal/sam3u1c/usart.c **** 
 490:.././hal/sam3u1c/usart.c **** 	return 0;
 1065              	 .loc 1 490 9
 1066 005c 0023     	 movs r3,#0
 1067              	.L50:
 491:.././hal/sam3u1c/usart.c **** }
 1068              	 .loc 1 491 1
 1069 005e 1846     	 mov r0,r3
 1070 0060 0837     	 adds r7,r7,#8
 1071              	.LCFI64:
 1072              	 .cfi_def_cfa_offset 8
 1073 0062 BD46     	 mov sp,r7
 1074              	.LCFI65:
 1075              	 .cfi_def_cfa_register 13
 1076              	 
 1077 0064 80BD     	 pop {r7,pc}
 1078              	.L52:
 1079 0066 00BF     	 .align 2
 1080              	.L51:
 1081 0068 00000000 	 .word usart_reset
 1082 006c 00000000 	 .word ul_reg_val.7181
 1083 0070 00000000 	 .word usart_set_sync_slave_baudrate
 1084              	 .cfi_endproc
 1085              	.LFE80:
 1087              	 .section .text.usart_init_rs485,"ax",%progbits
 1088              	 .align 1
 1089              	 .global usart_init_rs485
 1090              	 .syntax unified
 1091              	 .thumb
 1092              	 .thumb_func
 1093              	 .fpu softvfp
 1095              	usart_init_rs485:
 1096              	.LFB81:
 492:.././hal/sam3u1c/usart.c **** 
 493:.././hal/sam3u1c/usart.c **** /**
 494:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in RS485 mode.
 495:.././hal/sam3u1c/usart.c ****  *
 496:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 497:.././hal/sam3u1c/usart.c ****  *
 498:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 499:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 500:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 501:.././hal/sam3u1c/usart.c ****  *
 502:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 503:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 504:.././hal/sam3u1c/usart.c ****  */
 505:.././hal/sam3u1c/usart.c **** uint32_t usart_init_rs485(Usart *p_usart,
 506:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 507:.././hal/sam3u1c/usart.c **** {
 1097              	 .loc 1 507 1
 1098              	 .cfi_startproc
 1099              	 
 1100              	 
 1101 0000 80B5     	 push {r7,lr}
 1102              	.LCFI66:
 1103              	 .cfi_def_cfa_offset 8
 1104              	 .cfi_offset 7,-8
 1105              	 .cfi_offset 14,-4
 1106 0002 84B0     	 sub sp,sp,#16
 1107              	.LCFI67:
 1108              	 .cfi_def_cfa_offset 24
 1109 0004 00AF     	 add r7,sp,#0
 1110              	.LCFI68:
 1111              	 .cfi_def_cfa_register 7
 1112 0006 F860     	 str r0,[r7,#12]
 1113 0008 B960     	 str r1,[r7,#8]
 1114 000a 7A60     	 str r2,[r7,#4]
 508:.././hal/sam3u1c/usart.c **** 	/* Initialize the USART as standard RS232. */
 509:.././hal/sam3u1c/usart.c **** 	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
 1115              	 .loc 1 509 6
 1116 000c 7A68     	 ldr r2,[r7,#4]
 1117 000e B968     	 ldr r1,[r7,#8]
 1118 0010 F868     	 ldr r0,[r7,#12]
 1119 0012 0A4B     	 ldr r3,.L56
 1120 0014 9847     	 blx r3
 1121              	.LVL14:
 1122 0016 0346     	 mov r3,r0
 1123              	 .loc 1 509 5
 1124 0018 002B     	 cmp r3,#0
 1125 001a 01D0     	 beq .L54
 510:.././hal/sam3u1c/usart.c **** 		return 1;
 1126              	 .loc 1 510 10
 1127 001c 0123     	 movs r3,#1
 1128 001e 08E0     	 b .L55
 1129              	.L54:
 511:.././hal/sam3u1c/usart.c **** 	}
 512:.././hal/sam3u1c/usart.c **** 
 513:.././hal/sam3u1c/usart.c **** 	/* Set RS485 mode. */
 514:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 1130              	 .loc 1 514 27
 1131 0020 FB68     	 ldr r3,[r7,#12]
 1132 0022 5B68     	 ldr r3,[r3,#4]
 1133              	 .loc 1 514 35
 1134 0024 23F00F03 	 bic r3,r3,#15
 1135              	 .loc 1 514 60
 1136 0028 43F00102 	 orr r2,r3,#1
 1137              	 .loc 1 514 17
 1138 002c FB68     	 ldr r3,[r7,#12]
 1139 002e 5A60     	 str r2,[r3,#4]
 515:.././hal/sam3u1c/usart.c **** 			US_MR_USART_MODE_RS485;
 516:.././hal/sam3u1c/usart.c **** 
 517:.././hal/sam3u1c/usart.c **** 	return 0;
 1140              	 .loc 1 517 9
 1141 0030 0023     	 movs r3,#0
 1142              	.L55:
 518:.././hal/sam3u1c/usart.c **** }
 1143              	 .loc 1 518 1
 1144 0032 1846     	 mov r0,r3
 1145 0034 1037     	 adds r7,r7,#16
 1146              	.LCFI69:
 1147              	 .cfi_def_cfa_offset 8
 1148 0036 BD46     	 mov sp,r7
 1149              	.LCFI70:
 1150              	 .cfi_def_cfa_register 13
 1151              	 
 1152 0038 80BD     	 pop {r7,pc}
 1153              	.L57:
 1154 003a 00BF     	 .align 2
 1155              	.L56:
 1156 003c 00000000 	 .word usart_init_rs232
 1157              	 .cfi_endproc
 1158              	.LFE81:
 1160              	 .section .text.usart_init_irda,"ax",%progbits
 1161              	 .align 1
 1162              	 .global usart_init_irda
 1163              	 .syntax unified
 1164              	 .thumb
 1165              	 .thumb_func
 1166              	 .fpu softvfp
 1168              	usart_init_irda:
 1169              	.LFB82:
 519:.././hal/sam3u1c/usart.c **** 
 520:.././hal/sam3u1c/usart.c **** #if (!SAMG55)
 521:.././hal/sam3u1c/usart.c **** /**
 522:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in IrDA mode.
 523:.././hal/sam3u1c/usart.c ****  *
 524:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 525:.././hal/sam3u1c/usart.c ****  *
 526:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 527:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 528:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 529:.././hal/sam3u1c/usart.c ****  *
 530:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 531:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 532:.././hal/sam3u1c/usart.c ****  */
 533:.././hal/sam3u1c/usart.c **** uint32_t usart_init_irda(Usart *p_usart,
 534:.././hal/sam3u1c/usart.c **** 		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
 535:.././hal/sam3u1c/usart.c **** {
 1170              	 .loc 1 535 1
 1171              	 .cfi_startproc
 1172              	 
 1173              	 
 1174 0000 80B5     	 push {r7,lr}
 1175              	.LCFI71:
 1176              	 .cfi_def_cfa_offset 8
 1177              	 .cfi_offset 7,-8
 1178              	 .cfi_offset 14,-4
 1179 0002 84B0     	 sub sp,sp,#16
 1180              	.LCFI72:
 1181              	 .cfi_def_cfa_offset 24
 1182 0004 00AF     	 add r7,sp,#0
 1183              	.LCFI73:
 1184              	 .cfi_def_cfa_register 7
 1185 0006 F860     	 str r0,[r7,#12]
 1186 0008 B960     	 str r1,[r7,#8]
 1187 000a 7A60     	 str r2,[r7,#4]
 536:.././hal/sam3u1c/usart.c **** 	/* Initialize the USART as standard RS232. */
 537:.././hal/sam3u1c/usart.c **** 	if (usart_init_rs232(p_usart, p_usart_opt, ul_mck)) {
 1188              	 .loc 1 537 6
 1189 000c 7A68     	 ldr r2,[r7,#4]
 1190 000e B968     	 ldr r1,[r7,#8]
 1191 0010 F868     	 ldr r0,[r7,#12]
 1192 0012 0C4B     	 ldr r3,.L61
 1193 0014 9847     	 blx r3
 1194              	.LVL15:
 1195 0016 0346     	 mov r3,r0
 1196              	 .loc 1 537 5
 1197 0018 002B     	 cmp r3,#0
 1198 001a 01D0     	 beq .L59
 538:.././hal/sam3u1c/usart.c **** 		return 1;
 1199              	 .loc 1 538 10
 1200 001c 0123     	 movs r3,#1
 1201 001e 0CE0     	 b .L60
 1202              	.L59:
 539:.././hal/sam3u1c/usart.c **** 	}
 540:.././hal/sam3u1c/usart.c **** 
 541:.././hal/sam3u1c/usart.c **** 	/* Set IrDA filter. */
 542:.././hal/sam3u1c/usart.c **** 	p_usart->US_IF = p_usart_opt->irda_filter;
 1203              	 .loc 1 542 30
 1204 0020 BB68     	 ldr r3,[r7,#8]
 1205 0022 5A69     	 ldr r2,[r3,#20]
 1206              	 .loc 1 542 17
 1207 0024 FB68     	 ldr r3,[r7,#12]
 1208 0026 DA64     	 str r2,[r3,#76]
 543:.././hal/sam3u1c/usart.c **** 
 544:.././hal/sam3u1c/usart.c **** 	/* Set IrDA mode. */
 545:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 1209              	 .loc 1 545 27
 1210 0028 FB68     	 ldr r3,[r7,#12]
 1211 002a 5B68     	 ldr r3,[r3,#4]
 1212              	 .loc 1 545 35
 1213 002c 23F00F03 	 bic r3,r3,#15
 1214              	 .loc 1 545 60
 1215 0030 43F00802 	 orr r2,r3,#8
 1216              	 .loc 1 545 17
 1217 0034 FB68     	 ldr r3,[r7,#12]
 1218 0036 5A60     	 str r2,[r3,#4]
 546:.././hal/sam3u1c/usart.c **** 			US_MR_USART_MODE_IRDA;
 547:.././hal/sam3u1c/usart.c **** 
 548:.././hal/sam3u1c/usart.c **** 	return 0;
 1219              	 .loc 1 548 9
 1220 0038 0023     	 movs r3,#0
 1221              	.L60:
 549:.././hal/sam3u1c/usart.c **** }
 1222              	 .loc 1 549 1
 1223 003a 1846     	 mov r0,r3
 1224 003c 1037     	 adds r7,r7,#16
 1225              	.LCFI74:
 1226              	 .cfi_def_cfa_offset 8
 1227 003e BD46     	 mov sp,r7
 1228              	.LCFI75:
 1229              	 .cfi_def_cfa_register 13
 1230              	 
 1231 0040 80BD     	 pop {r7,pc}
 1232              	.L62:
 1233 0042 00BF     	 .align 2
 1234              	.L61:
 1235 0044 00000000 	 .word usart_init_rs232
 1236              	 .cfi_endproc
 1237              	.LFE82:
 1239              	 .section .text.usart_init_iso7816,"ax",%progbits
 1240              	 .align 1
 1241              	 .global usart_init_iso7816
 1242              	 .syntax unified
 1243              	 .thumb
 1244              	 .thumb_func
 1245              	 .fpu softvfp
 1247              	usart_init_iso7816:
 1248              	.LFB83:
 550:.././hal/sam3u1c/usart.c **** #endif
 551:.././hal/sam3u1c/usart.c **** 
 552:.././hal/sam3u1c/usart.c **** /**
 553:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in ISO7816 mode.
 554:.././hal/sam3u1c/usart.c ****  *
 555:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 556:.././hal/sam3u1c/usart.c ****  *
 557:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 558:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 559:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 560:.././hal/sam3u1c/usart.c ****  *
 561:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 562:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 563:.././hal/sam3u1c/usart.c ****  */
 564:.././hal/sam3u1c/usart.c **** uint32_t usart_init_iso7816(Usart *p_usart,
 565:.././hal/sam3u1c/usart.c **** 		const usart_iso7816_opt_t *p_usart_opt, uint32_t ul_mck)
 566:.././hal/sam3u1c/usart.c **** {
 1249              	 .loc 1 566 1
 1250              	 .cfi_startproc
 1251              	 
 1252              	 
 1253 0000 80B5     	 push {r7,lr}
 1254              	.LCFI76:
 1255              	 .cfi_def_cfa_offset 8
 1256              	 .cfi_offset 7,-8
 1257              	 .cfi_offset 14,-4
 1258 0002 84B0     	 sub sp,sp,#16
 1259              	.LCFI77:
 1260              	 .cfi_def_cfa_offset 24
 1261 0004 00AF     	 add r7,sp,#0
 1262              	.LCFI78:
 1263              	 .cfi_def_cfa_register 7
 1264 0006 F860     	 str r0,[r7,#12]
 1265 0008 B960     	 str r1,[r7,#8]
 1266 000a 7A60     	 str r2,[r7,#4]
 567:.././hal/sam3u1c/usart.c **** 	static uint32_t ul_reg_val;
 568:.././hal/sam3u1c/usart.c **** 
 569:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 570:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 1267              	 .loc 1 570 2
 1268 000c F868     	 ldr r0,[r7,#12]
 1269 000e 3E4B     	 ldr r3,.L75
 1270 0010 9847     	 blx r3
 1271              	.LVL16:
 571:.././hal/sam3u1c/usart.c **** 
 572:.././hal/sam3u1c/usart.c **** 	ul_reg_val = 0;
 1272              	 .loc 1 572 13
 1273 0012 3E4B     	 ldr r3,.L75+4
 1274 0014 0022     	 movs r2,#0
 1275 0016 1A60     	 str r2,[r3]
 573:.././hal/sam3u1c/usart.c **** 
 574:.././hal/sam3u1c/usart.c **** 	/* Check whether the input values are legal. */
 575:.././hal/sam3u1c/usart.c **** 	if (!p_usart_opt || ((p_usart_opt->parity_type != US_MR_PAR_EVEN) &&
 1276              	 .loc 1 575 5
 1277 0018 BB68     	 ldr r3,[r7,#8]
 1278 001a 002B     	 cmp r3,#0
 1279 001c 08D0     	 beq .L64
 1280              	 .loc 1 575 35 discriminator 1
 1281 001e BB68     	 ldr r3,[r7,#8]
 1282 0020 9B68     	 ldr r3,[r3,#8]
 1283              	 .loc 1 575 19 discriminator 1
 1284 0022 002B     	 cmp r3,#0
 1285 0024 06D0     	 beq .L65
 576:.././hal/sam3u1c/usart.c **** 			(p_usart_opt->parity_type != US_MR_PAR_ODD))) {
 1286              	 .loc 1 576 16 discriminator 2
 1287 0026 BB68     	 ldr r3,[r7,#8]
 1288 0028 9B68     	 ldr r3,[r3,#8]
 575:.././hal/sam3u1c/usart.c **** 			(p_usart_opt->parity_type != US_MR_PAR_ODD))) {
 1289              	 .loc 1 575 68 discriminator 2
 1290 002a B3F5007F 	 cmp r3,#512
 1291 002e 01D0     	 beq .L65
 1292              	.L64:
 577:.././hal/sam3u1c/usart.c **** 		return 1;
 1293              	 .loc 1 577 10
 1294 0030 0123     	 movs r3,#1
 1295 0032 64E0     	 b .L66
 1296              	.L65:
 578:.././hal/sam3u1c/usart.c **** 	}
 579:.././hal/sam3u1c/usart.c **** 
 580:.././hal/sam3u1c/usart.c **** 	if (p_usart_opt->protocol_type == ISO7816_T_0) {
 1297              	 .loc 1 580 17
 1298 0034 BB68     	 ldr r3,[r7,#8]
 1299 0036 DB69     	 ldr r3,[r3,#28]
 1300              	 .loc 1 580 5
 1301 0038 002B     	 cmp r3,#0
 1302 003a 16D1     	 bne .L67
 581:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_USART_MODE_IS07816_T_0 | US_MR_NBSTOP_2_BIT |
 582:.././hal/sam3u1c/usart.c **** 				(p_usart_opt->max_iterations << US_MR_MAX_ITERATION_Pos);
 1303              	 .loc 1 582 17
 1304 003c BB68     	 ldr r3,[r7,#8]
 1305 003e 5B69     	 ldr r3,[r3,#20]
 1306              	 .loc 1 582 34
 1307 0040 1A06     	 lsls r2,r3,#24
 581:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_USART_MODE_IS07816_T_0 | US_MR_NBSTOP_2_BIT |
 1308              	 .loc 1 581 14
 1309 0042 324B     	 ldr r3,.L75+4
 1310 0044 1B68     	 ldr r3,[r3]
 1311 0046 1343     	 orrs r3,r3,r2
 1312 0048 43F40053 	 orr r3,r3,#8192
 1313 004c 43F00403 	 orr r3,r3,#4
 1314 0050 2E4A     	 ldr r2,.L75+4
 1315 0052 1360     	 str r3,[r2]
 583:.././hal/sam3u1c/usart.c **** 
 584:.././hal/sam3u1c/usart.c **** 		if (p_usart_opt->bit_order) {
 1316              	 .loc 1 584 18
 1317 0054 BB68     	 ldr r3,[r7,#8]
 1318 0056 9B69     	 ldr r3,[r3,#24]
 1319              	 .loc 1 584 6
 1320 0058 002B     	 cmp r3,#0
 1321 005a 1DD0     	 beq .L68
 585:.././hal/sam3u1c/usart.c **** 			ul_reg_val |= US_MR_MSBF;
 1322              	 .loc 1 585 15
 1323 005c 2B4B     	 ldr r3,.L75+4
 1324 005e 1B68     	 ldr r3,[r3]
 1325 0060 43F48033 	 orr r3,r3,#65536
 1326 0064 294A     	 ldr r2,.L75+4
 1327 0066 1360     	 str r3,[r2]
 1328 0068 16E0     	 b .L68
 1329              	.L67:
 586:.././hal/sam3u1c/usart.c **** 		}
 587:.././hal/sam3u1c/usart.c **** 	} else if (p_usart_opt->protocol_type == ISO7816_T_1) {
 1330              	 .loc 1 587 24
 1331 006a BB68     	 ldr r3,[r7,#8]
 1332 006c DB69     	 ldr r3,[r3,#28]
 1333              	 .loc 1 587 12
 1334 006e 012B     	 cmp r3,#1
 1335 0070 10D1     	 bne .L69
 588:.././hal/sam3u1c/usart.c **** 		/*
 589:.././hal/sam3u1c/usart.c **** 		 * Only LSBF is used in the T=1 protocol, and max_iterations field
 590:.././hal/sam3u1c/usart.c **** 		 * is only used in T=0 mode.
 591:.././hal/sam3u1c/usart.c **** 		 */
 592:.././hal/sam3u1c/usart.c **** 		if (p_usart_opt->bit_order || p_usart_opt->max_iterations) {
 1336              	 .loc 1 592 18
 1337 0072 BB68     	 ldr r3,[r7,#8]
 1338 0074 9B69     	 ldr r3,[r3,#24]
 1339              	 .loc 1 592 6
 1340 0076 002B     	 cmp r3,#0
 1341 0078 03D1     	 bne .L70
 1342              	 .loc 1 592 44 discriminator 1
 1343 007a BB68     	 ldr r3,[r7,#8]
 1344 007c 5B69     	 ldr r3,[r3,#20]
 1345              	 .loc 1 592 30 discriminator 1
 1346 007e 002B     	 cmp r3,#0
 1347 0080 01D0     	 beq .L71
 1348              	.L70:
 593:.././hal/sam3u1c/usart.c **** 			return 1;
 1349              	 .loc 1 593 11
 1350 0082 0123     	 movs r3,#1
 1351 0084 3BE0     	 b .L66
 1352              	.L71:
 594:.././hal/sam3u1c/usart.c **** 		}
 595:.././hal/sam3u1c/usart.c **** 		
 596:.././hal/sam3u1c/usart.c **** 		/* Set USART mode to ISO7816, T=1, and always uses 1 stop bit. */
 597:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_USART_MODE_IS07816_T_1 | US_MR_NBSTOP_1_BIT;
 1353              	 .loc 1 597 14
 1354 0086 214B     	 ldr r3,.L75+4
 1355 0088 1B68     	 ldr r3,[r3]
 1356 008a 43F00603 	 orr r3,r3,#6
 1357 008e 1F4A     	 ldr r2,.L75+4
 1358 0090 1360     	 str r3,[r2]
 1359 0092 01E0     	 b .L68
 1360              	.L69:
 598:.././hal/sam3u1c/usart.c **** 	} else {
 599:.././hal/sam3u1c/usart.c **** 		return 1;
 1361              	 .loc 1 599 10
 1362 0094 0123     	 movs r3,#1
 1363 0096 32E0     	 b .L66
 1364              	.L68:
 600:.././hal/sam3u1c/usart.c **** 	}
 601:.././hal/sam3u1c/usart.c **** 
 602:.././hal/sam3u1c/usart.c **** 	/* Set up the baudrate. */
 603:.././hal/sam3u1c/usart.c **** 	if (usart_set_iso7816_clock(p_usart, p_usart_opt->iso7816_hz, ul_mck)) {
 1365              	 .loc 1 603 6
 1366 0098 BB68     	 ldr r3,[r7,#8]
 1367 009a 1B68     	 ldr r3,[r3]
 1368 009c 7A68     	 ldr r2,[r7,#4]
 1369 009e 1946     	 mov r1,r3
 1370 00a0 F868     	 ldr r0,[r7,#12]
 1371 00a2 1B4B     	 ldr r3,.L75+8
 1372 00a4 9847     	 blx r3
 1373              	.LVL17:
 1374 00a6 0346     	 mov r3,r0
 1375              	 .loc 1 603 5
 1376 00a8 002B     	 cmp r3,#0
 1377 00aa 01D0     	 beq .L72
 604:.././hal/sam3u1c/usart.c **** 		return 1;
 1378              	 .loc 1 604 10
 1379 00ac 0123     	 movs r3,#1
 1380 00ae 26E0     	 b .L66
 1381              	.L72:
 605:.././hal/sam3u1c/usart.c **** 	}
 606:.././hal/sam3u1c/usart.c **** 
 607:.././hal/sam3u1c/usart.c **** 	/* Set FIDI register: bit rate = iso7816_hz / fidi_ratio. */
 608:.././hal/sam3u1c/usart.c **** 	p_usart->US_FIDI = p_usart_opt->fidi_ratio;
 1382              	 .loc 1 608 32
 1383 00b0 BB68     	 ldr r3,[r7,#8]
 1384 00b2 5A68     	 ldr r2,[r3,#4]
 1385              	 .loc 1 608 19
 1386 00b4 FB68     	 ldr r3,[r7,#12]
 1387 00b6 1A64     	 str r2,[r3,#64]
 609:.././hal/sam3u1c/usart.c **** 
 610:.././hal/sam3u1c/usart.c **** 	/* Set ISO7816 parity type in the MODE register. */
 611:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= p_usart_opt->parity_type;
 1388              	 .loc 1 611 27
 1389 00b8 BB68     	 ldr r3,[r7,#8]
 1390 00ba 9A68     	 ldr r2,[r3,#8]
 1391              	 .loc 1 611 13
 1392 00bc 134B     	 ldr r3,.L75+4
 1393 00be 1B68     	 ldr r3,[r3]
 1394 00c0 1343     	 orrs r3,r3,r2
 1395 00c2 124A     	 ldr r2,.L75+4
 1396 00c4 1360     	 str r3,[r2]
 612:.././hal/sam3u1c/usart.c **** 
 613:.././hal/sam3u1c/usart.c **** 	if (p_usart_opt->inhibit_nack) {
 1397              	 .loc 1 613 17
 1398 00c6 BB68     	 ldr r3,[r7,#8]
 1399 00c8 DB68     	 ldr r3,[r3,#12]
 1400              	 .loc 1 613 5
 1401 00ca 002B     	 cmp r3,#0
 1402 00cc 05D0     	 beq .L73
 614:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_INACK;
 1403              	 .loc 1 614 14
 1404 00ce 0F4B     	 ldr r3,.L75+4
 1405 00d0 1B68     	 ldr r3,[r3]
 1406 00d2 43F48013 	 orr r3,r3,#1048576
 1407 00d6 0D4A     	 ldr r2,.L75+4
 1408 00d8 1360     	 str r3,[r2]
 1409              	.L73:
 615:.././hal/sam3u1c/usart.c **** 	}
 616:.././hal/sam3u1c/usart.c **** 	if (p_usart_opt->dis_suc_nack) {
 1410              	 .loc 1 616 17
 1411 00da BB68     	 ldr r3,[r7,#8]
 1412 00dc 1B69     	 ldr r3,[r3,#16]
 1413              	 .loc 1 616 5
 1414 00de 002B     	 cmp r3,#0
 1415 00e0 05D0     	 beq .L74
 617:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_DSNACK;
 1416              	 .loc 1 617 14
 1417 00e2 0A4B     	 ldr r3,.L75+4
 1418 00e4 1B68     	 ldr r3,[r3]
 1419 00e6 43F40013 	 orr r3,r3,#2097152
 1420 00ea 084A     	 ldr r2,.L75+4
 1421 00ec 1360     	 str r3,[r2]
 1422              	.L74:
 618:.././hal/sam3u1c/usart.c **** 	}
 619:.././hal/sam3u1c/usart.c **** 
 620:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 1423              	 .loc 1 620 17
 1424 00ee FB68     	 ldr r3,[r7,#12]
 1425 00f0 5A68     	 ldr r2,[r3,#4]
 1426 00f2 064B     	 ldr r3,.L75+4
 1427 00f4 1B68     	 ldr r3,[r3]
 1428 00f6 1A43     	 orrs r2,r2,r3
 1429 00f8 FB68     	 ldr r3,[r7,#12]
 1430 00fa 5A60     	 str r2,[r3,#4]
 621:.././hal/sam3u1c/usart.c **** 
 622:.././hal/sam3u1c/usart.c **** 	return 0;
 1431              	 .loc 1 622 9
 1432 00fc 0023     	 movs r3,#0
 1433              	.L66:
 623:.././hal/sam3u1c/usart.c **** }
 1434              	 .loc 1 623 1
 1435 00fe 1846     	 mov r0,r3
 1436 0100 1037     	 adds r7,r7,#16
 1437              	.LCFI79:
 1438              	 .cfi_def_cfa_offset 8
 1439 0102 BD46     	 mov sp,r7
 1440              	.LCFI80:
 1441              	 .cfi_def_cfa_register 13
 1442              	 
 1443 0104 80BD     	 pop {r7,pc}
 1444              	.L76:
 1445 0106 00BF     	 .align 2
 1446              	.L75:
 1447 0108 00000000 	 .word usart_reset
 1448 010c 00000000 	 .word ul_reg_val.7197
 1449 0110 00000000 	 .word usart_set_iso7816_clock
 1450              	 .cfi_endproc
 1451              	.LFE83:
 1453              	 .section .text.usart_init_spi_master,"ax",%progbits
 1454              	 .align 1
 1455              	 .global usart_init_spi_master
 1456              	 .syntax unified
 1457              	 .thumb
 1458              	 .thumb_func
 1459              	 .fpu softvfp
 1461              	usart_init_spi_master:
 1462              	.LFB84:
 624:.././hal/sam3u1c/usart.c **** 
 625:.././hal/sam3u1c/usart.c **** /**
 626:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in SPI mode and act as a master.
 627:.././hal/sam3u1c/usart.c ****  *
 628:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 629:.././hal/sam3u1c/usart.c ****  *
 630:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 631:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 632:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 633:.././hal/sam3u1c/usart.c ****  *
 634:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 635:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 636:.././hal/sam3u1c/usart.c ****  */
 637:.././hal/sam3u1c/usart.c **** uint32_t usart_init_spi_master(Usart *p_usart,
 638:.././hal/sam3u1c/usart.c **** 		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
 639:.././hal/sam3u1c/usart.c **** {
 1463              	 .loc 1 639 1
 1464              	 .cfi_startproc
 1465              	 
 1466              	 
 1467 0000 80B5     	 push {r7,lr}
 1468              	.LCFI81:
 1469              	 .cfi_def_cfa_offset 8
 1470              	 .cfi_offset 7,-8
 1471              	 .cfi_offset 14,-4
 1472 0002 84B0     	 sub sp,sp,#16
 1473              	.LCFI82:
 1474              	 .cfi_def_cfa_offset 24
 1475 0004 00AF     	 add r7,sp,#0
 1476              	.LCFI83:
 1477              	 .cfi_def_cfa_register 7
 1478 0006 F860     	 str r0,[r7,#12]
 1479 0008 B960     	 str r1,[r7,#8]
 1480 000a 7A60     	 str r2,[r7,#4]
 640:.././hal/sam3u1c/usart.c **** 	static uint32_t ul_reg_val;
 641:.././hal/sam3u1c/usart.c **** 
 642:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 643:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 1481              	 .loc 1 643 2
 1482 000c F868     	 ldr r0,[r7,#12]
 1483 000e 3D4B     	 ldr r3,.L89
 1484 0010 9847     	 blx r3
 1485              	.LVL18:
 644:.././hal/sam3u1c/usart.c **** 
 645:.././hal/sam3u1c/usart.c **** 	ul_reg_val = 0;
 1486              	 .loc 1 645 13
 1487 0012 3D4B     	 ldr r3,.L89+4
 1488 0014 0022     	 movs r2,#0
 1489 0016 1A60     	 str r2,[r3]
 646:.././hal/sam3u1c/usart.c **** 	/* Check whether the input values are legal. */
 647:.././hal/sam3u1c/usart.c **** 	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
 1490              	 .loc 1 647 5
 1491 0018 BB68     	 ldr r3,[r7,#8]
 1492 001a 002B     	 cmp r3,#0
 1493 001c 0DD0     	 beq .L78
 1494              	 .loc 1 647 34 discriminator 1
 1495 001e BB68     	 ldr r3,[r7,#8]
 1496 0020 9B68     	 ldr r3,[r3,#8]
 1497              	 .loc 1 647 19 discriminator 1
 1498 0022 032B     	 cmp r3,#3
 1499 0024 09D8     	 bhi .L78
 648:.././hal/sam3u1c/usart.c **** 			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
 1500              	 .loc 1 648 4 discriminator 2
 1501 0026 BB68     	 ldr r3,[r7,#8]
 1502 0028 1B68     	 ldr r3,[r3]
 1503 002a 7A68     	 ldr r2,[r7,#4]
 1504 002c 1946     	 mov r1,r3
 1505 002e F868     	 ldr r0,[r7,#12]
 1506 0030 364B     	 ldr r3,.L89+8
 1507 0032 9847     	 blx r3
 1508              	.LVL19:
 1509 0034 0346     	 mov r3,r0
 647:.././hal/sam3u1c/usart.c **** 			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
 1510              	 .loc 1 647 59 discriminator 2
 1511 0036 002B     	 cmp r3,#0
 1512 0038 01D0     	 beq .L79
 1513              	.L78:
 649:.././hal/sam3u1c/usart.c **** 			ul_mck)) {
 650:.././hal/sam3u1c/usart.c **** 		return 1;
 1514              	 .loc 1 650 10
 1515 003a 0123     	 movs r3,#1
 1516 003c 5DE0     	 b .L80
 1517              	.L79:
 651:.././hal/sam3u1c/usart.c **** 	}
 652:.././hal/sam3u1c/usart.c **** 
 653:.././hal/sam3u1c/usart.c **** 	/* Configure the character length bit in MR register. */
 654:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= p_usart_opt->char_length;
 1518              	 .loc 1 654 27
 1519 003e BB68     	 ldr r3,[r7,#8]
 1520 0040 5A68     	 ldr r2,[r3,#4]
 1521              	 .loc 1 654 13
 1522 0042 314B     	 ldr r3,.L89+4
 1523 0044 1B68     	 ldr r3,[r3]
 1524 0046 1343     	 orrs r3,r3,r2
 1525 0048 2F4A     	 ldr r2,.L89+4
 1526 004a 1360     	 str r3,[r2]
 655:.././hal/sam3u1c/usart.c **** 
 656:.././hal/sam3u1c/usart.c **** 	/* Set SPI master mode and channel mode. */
 657:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
 658:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode;
 1527              	 .loc 1 658 15
 1528 004c BB68     	 ldr r3,[r7,#8]
 1529 004e DA68     	 ldr r2,[r3,#12]
 657:.././hal/sam3u1c/usart.c **** 			p_usart_opt->channel_mode;
 1530              	 .loc 1 657 13
 1531 0050 2D4B     	 ldr r3,.L89+4
 1532 0052 1B68     	 ldr r3,[r3]
 1533 0054 1343     	 orrs r3,r3,r2
 1534 0056 43F48023 	 orr r3,r3,#262144
 1535 005a 43F00E03 	 orr r3,r3,#14
 1536 005e 2A4A     	 ldr r2,.L89+4
 1537 0060 1360     	 str r3,[r2]
 659:.././hal/sam3u1c/usart.c **** 
 660:.././hal/sam3u1c/usart.c **** 	switch (p_usart_opt->spi_mode) {
 1538              	 .loc 1 660 21
 1539 0062 BB68     	 ldr r3,[r7,#8]
 1540 0064 9B68     	 ldr r3,[r3,#8]
 1541 0066 032B     	 cmp r3,#3
 1542 0068 3ED8     	 bhi .L88
 1543 006a 01A2     	 adr r2,.L83
 1544 006c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1545              	 .p2align 2
 1546              	.L83:
 1547 0070 81000000 	 .word .L86+1
 1548 0074 9B000000 	 .word .L85+1
 1549 0078 B5000000 	 .word .L84+1
 1550 007c CF000000 	 .word .L82+1
 1551              	 .p2align 1
 1552              	.L86:
 661:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_0:
 662:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPHA;
 1553              	 .loc 1 662 14
 1554 0080 214B     	 ldr r3,.L89+4
 1555 0082 1B68     	 ldr r3,[r3]
 1556 0084 43F48073 	 orr r3,r3,#256
 1557 0088 1F4A     	 ldr r2,.L89+4
 1558 008a 1360     	 str r3,[r2]
 663:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 1559              	 .loc 1 663 14
 1560 008c 1E4B     	 ldr r3,.L89+4
 1561 008e 1B68     	 ldr r3,[r3]
 1562 0090 23F48033 	 bic r3,r3,#65536
 1563 0094 1C4A     	 ldr r2,.L89+4
 1564 0096 1360     	 str r3,[r2]
 664:.././hal/sam3u1c/usart.c **** 		break;
 1565              	 .loc 1 664 3
 1566 0098 27E0     	 b .L87
 1567              	.L85:
 665:.././hal/sam3u1c/usart.c **** 
 666:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_1:
 667:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 1568              	 .loc 1 667 14
 1569 009a 1B4B     	 ldr r3,.L89+4
 1570 009c 1B68     	 ldr r3,[r3]
 1571 009e 23F48073 	 bic r3,r3,#256
 1572 00a2 194A     	 ldr r2,.L89+4
 1573 00a4 1360     	 str r3,[r2]
 668:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 1574              	 .loc 1 668 14
 1575 00a6 184B     	 ldr r3,.L89+4
 1576 00a8 1B68     	 ldr r3,[r3]
 1577 00aa 23F48033 	 bic r3,r3,#65536
 1578 00ae 164A     	 ldr r2,.L89+4
 1579 00b0 1360     	 str r3,[r2]
 669:.././hal/sam3u1c/usart.c **** 		break;
 1580              	 .loc 1 669 3
 1581 00b2 1AE0     	 b .L87
 1582              	.L84:
 670:.././hal/sam3u1c/usart.c **** 
 671:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_2:
 672:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPHA;
 1583              	 .loc 1 672 14
 1584 00b4 144B     	 ldr r3,.L89+4
 1585 00b6 1B68     	 ldr r3,[r3]
 1586 00b8 43F48073 	 orr r3,r3,#256
 1587 00bc 124A     	 ldr r2,.L89+4
 1588 00be 1360     	 str r3,[r2]
 673:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 1589              	 .loc 1 673 14
 1590 00c0 114B     	 ldr r3,.L89+4
 1591 00c2 1B68     	 ldr r3,[r3]
 1592 00c4 43F48033 	 orr r3,r3,#65536
 1593 00c8 0F4A     	 ldr r2,.L89+4
 1594 00ca 1360     	 str r3,[r2]
 674:.././hal/sam3u1c/usart.c **** 		break;
 1595              	 .loc 1 674 3
 1596 00cc 0DE0     	 b .L87
 1597              	.L82:
 675:.././hal/sam3u1c/usart.c **** 
 676:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_3:
 677:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 1598              	 .loc 1 677 14
 1599 00ce 0E4B     	 ldr r3,.L89+4
 1600 00d0 1B68     	 ldr r3,[r3]
 1601 00d2 23F48073 	 bic r3,r3,#256
 1602 00d6 0C4A     	 ldr r2,.L89+4
 1603 00d8 1360     	 str r3,[r2]
 678:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 1604              	 .loc 1 678 14
 1605 00da 0B4B     	 ldr r3,.L89+4
 1606 00dc 1B68     	 ldr r3,[r3]
 1607 00de 43F48033 	 orr r3,r3,#65536
 1608 00e2 094A     	 ldr r2,.L89+4
 1609 00e4 1360     	 str r3,[r2]
 679:.././hal/sam3u1c/usart.c **** 		break;
 1610              	 .loc 1 679 3
 1611 00e6 00E0     	 b .L87
 1612              	.L88:
 680:.././hal/sam3u1c/usart.c **** 
 681:.././hal/sam3u1c/usart.c **** 	default:
 682:.././hal/sam3u1c/usart.c **** 		break;
 1613              	 .loc 1 682 3
 1614 00e8 00BF     	 nop
 1615              	.L87:
 683:.././hal/sam3u1c/usart.c **** 	}
 684:.././hal/sam3u1c/usart.c **** 
 685:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 1616              	 .loc 1 685 17
 1617 00ea FB68     	 ldr r3,[r7,#12]
 1618 00ec 5A68     	 ldr r2,[r3,#4]
 1619 00ee 064B     	 ldr r3,.L89+4
 1620 00f0 1B68     	 ldr r3,[r3]
 1621 00f2 1A43     	 orrs r2,r2,r3
 1622 00f4 FB68     	 ldr r3,[r7,#12]
 1623 00f6 5A60     	 str r2,[r3,#4]
 686:.././hal/sam3u1c/usart.c **** 
 687:.././hal/sam3u1c/usart.c **** 	return 0;
 1624              	 .loc 1 687 9
 1625 00f8 0023     	 movs r3,#0
 1626              	.L80:
 688:.././hal/sam3u1c/usart.c **** }
 1627              	 .loc 1 688 1
 1628 00fa 1846     	 mov r0,r3
 1629 00fc 1037     	 adds r7,r7,#16
 1630              	.LCFI84:
 1631              	 .cfi_def_cfa_offset 8
 1632 00fe BD46     	 mov sp,r7
 1633              	.LCFI85:
 1634              	 .cfi_def_cfa_register 13
 1635              	 
 1636 0100 80BD     	 pop {r7,pc}
 1637              	.L90:
 1638 0102 00BF     	 .align 2
 1639              	.L89:
 1640 0104 00000000 	 .word usart_reset
 1641 0108 00000000 	 .word ul_reg_val.7203
 1642 010c 00000000 	 .word usart_set_spi_master_baudrate
 1643              	 .cfi_endproc
 1644              	.LFE84:
 1646              	 .section .text.usart_init_spi_slave,"ax",%progbits
 1647              	 .align 1
 1648              	 .global usart_init_spi_slave
 1649              	 .syntax unified
 1650              	 .thumb
 1651              	 .thumb_func
 1652              	 .fpu softvfp
 1654              	usart_init_spi_slave:
 1655              	.LFB85:
 689:.././hal/sam3u1c/usart.c **** 
 690:.././hal/sam3u1c/usart.c **** /**
 691:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in SPI mode and act as a slave.
 692:.././hal/sam3u1c/usart.c ****  *
 693:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 694:.././hal/sam3u1c/usart.c ****  *
 695:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 696:.././hal/sam3u1c/usart.c ****  * \param p_usart_opt Pointer to sam_usart_opt_t instance.
 697:.././hal/sam3u1c/usart.c ****  *
 698:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 699:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 700:.././hal/sam3u1c/usart.c ****  */
 701:.././hal/sam3u1c/usart.c **** uint32_t usart_init_spi_slave(Usart *p_usart,
 702:.././hal/sam3u1c/usart.c **** 		const usart_spi_opt_t *p_usart_opt)
 703:.././hal/sam3u1c/usart.c **** {
 1656              	 .loc 1 703 1
 1657              	 .cfi_startproc
 1658              	 
 1659              	 
 1660 0000 80B5     	 push {r7,lr}
 1661              	.LCFI86:
 1662              	 .cfi_def_cfa_offset 8
 1663              	 .cfi_offset 7,-8
 1664              	 .cfi_offset 14,-4
 1665 0002 82B0     	 sub sp,sp,#8
 1666              	.LCFI87:
 1667              	 .cfi_def_cfa_offset 16
 1668 0004 00AF     	 add r7,sp,#0
 1669              	.LCFI88:
 1670              	 .cfi_def_cfa_register 7
 1671 0006 7860     	 str r0,[r7,#4]
 1672 0008 3960     	 str r1,[r7]
 704:.././hal/sam3u1c/usart.c **** 	static uint32_t ul_reg_val;
 705:.././hal/sam3u1c/usart.c **** 
 706:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 707:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 1673              	 .loc 1 707 2
 1674 000a 7868     	 ldr r0,[r7,#4]
 1675 000c 384B     	 ldr r3,.L103
 1676 000e 9847     	 blx r3
 1677              	.LVL20:
 708:.././hal/sam3u1c/usart.c **** 
 709:.././hal/sam3u1c/usart.c **** 	ul_reg_val = 0;
 1678              	 .loc 1 709 13
 1679 0010 384B     	 ldr r3,.L103+4
 1680 0012 0022     	 movs r2,#0
 1681 0014 1A60     	 str r2,[r3]
 710:.././hal/sam3u1c/usart.c **** 	usart_set_spi_slave_baudrate(p_usart);
 1682              	 .loc 1 710 2
 1683 0016 7868     	 ldr r0,[r7,#4]
 1684 0018 374B     	 ldr r3,.L103+8
 1685 001a 9847     	 blx r3
 1686              	.LVL21:
 711:.././hal/sam3u1c/usart.c **** 
 712:.././hal/sam3u1c/usart.c **** 	/* Check whether the input values are legal. */
 713:.././hal/sam3u1c/usart.c **** 	if (!p_usart_opt || p_usart_opt->spi_mode > SPI_MODE_3) {
 1687              	 .loc 1 713 5
 1688 001c 3B68     	 ldr r3,[r7]
 1689 001e 002B     	 cmp r3,#0
 1690 0020 03D0     	 beq .L92
 1691              	 .loc 1 713 33 discriminator 1
 1692 0022 3B68     	 ldr r3,[r7]
 1693 0024 9B68     	 ldr r3,[r3,#8]
 1694              	 .loc 1 713 19 discriminator 1
 1695 0026 032B     	 cmp r3,#3
 1696 0028 01D9     	 bls .L93
 1697              	.L92:
 714:.././hal/sam3u1c/usart.c **** 		return 1;
 1698              	 .loc 1 714 10
 1699 002a 0123     	 movs r3,#1
 1700 002c 5BE0     	 b .L94
 1701              	.L93:
 715:.././hal/sam3u1c/usart.c **** 	}
 716:.././hal/sam3u1c/usart.c **** 
 717:.././hal/sam3u1c/usart.c **** 	/* Configure the character length bit in MR register. */
 718:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= p_usart_opt->char_length;
 1702              	 .loc 1 718 27
 1703 002e 3B68     	 ldr r3,[r7]
 1704 0030 5A68     	 ldr r2,[r3,#4]
 1705              	 .loc 1 718 13
 1706 0032 304B     	 ldr r3,.L103+4
 1707 0034 1B68     	 ldr r3,[r3]
 1708 0036 1343     	 orrs r3,r3,r2
 1709 0038 2E4A     	 ldr r2,.L103+4
 1710 003a 1360     	 str r3,[r2]
 719:.././hal/sam3u1c/usart.c **** 
 720:.././hal/sam3u1c/usart.c **** 	/* Set SPI slave mode and channel mode. */
 721:.././hal/sam3u1c/usart.c **** 	ul_reg_val |= US_MR_USART_MODE_SPI_SLAVE | p_usart_opt->channel_mode;
 1711              	 .loc 1 721 56
 1712 003c 3B68     	 ldr r3,[r7]
 1713 003e DA68     	 ldr r2,[r3,#12]
 1714              	 .loc 1 721 13
 1715 0040 2C4B     	 ldr r3,.L103+4
 1716 0042 1B68     	 ldr r3,[r3]
 1717 0044 1343     	 orrs r3,r3,r2
 1718 0046 43F00F03 	 orr r3,r3,#15
 1719 004a 2A4A     	 ldr r2,.L103+4
 1720 004c 1360     	 str r3,[r2]
 722:.././hal/sam3u1c/usart.c **** 
 723:.././hal/sam3u1c/usart.c **** 	switch (p_usart_opt->spi_mode) {
 1721              	 .loc 1 723 21
 1722 004e 3B68     	 ldr r3,[r7]
 1723 0050 9B68     	 ldr r3,[r3,#8]
 1724 0052 032B     	 cmp r3,#3
 1725 0054 3ED8     	 bhi .L102
 1726 0056 01A2     	 adr r2,.L97
 1727 0058 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1728              	 .p2align 2
 1729              	.L97:
 1730 005c 6D000000 	 .word .L100+1
 1731 0060 87000000 	 .word .L99+1
 1732 0064 A1000000 	 .word .L98+1
 1733 0068 BB000000 	 .word .L96+1
 1734              	 .p2align 1
 1735              	.L100:
 724:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_0:
 725:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPHA;
 1736              	 .loc 1 725 14
 1737 006c 214B     	 ldr r3,.L103+4
 1738 006e 1B68     	 ldr r3,[r3]
 1739 0070 43F48073 	 orr r3,r3,#256
 1740 0074 1F4A     	 ldr r2,.L103+4
 1741 0076 1360     	 str r3,[r2]
 726:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 1742              	 .loc 1 726 14
 1743 0078 1E4B     	 ldr r3,.L103+4
 1744 007a 1B68     	 ldr r3,[r3]
 1745 007c 23F48033 	 bic r3,r3,#65536
 1746 0080 1C4A     	 ldr r2,.L103+4
 1747 0082 1360     	 str r3,[r2]
 727:.././hal/sam3u1c/usart.c **** 		break;
 1748              	 .loc 1 727 3
 1749 0084 27E0     	 b .L101
 1750              	.L99:
 728:.././hal/sam3u1c/usart.c **** 
 729:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_1:
 730:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 1751              	 .loc 1 730 14
 1752 0086 1B4B     	 ldr r3,.L103+4
 1753 0088 1B68     	 ldr r3,[r3]
 1754 008a 23F48073 	 bic r3,r3,#256
 1755 008e 194A     	 ldr r2,.L103+4
 1756 0090 1360     	 str r3,[r2]
 731:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPOL;
 1757              	 .loc 1 731 14
 1758 0092 184B     	 ldr r3,.L103+4
 1759 0094 1B68     	 ldr r3,[r3]
 1760 0096 23F48033 	 bic r3,r3,#65536
 1761 009a 164A     	 ldr r2,.L103+4
 1762 009c 1360     	 str r3,[r2]
 732:.././hal/sam3u1c/usart.c **** 		break;
 1763              	 .loc 1 732 3
 1764 009e 1AE0     	 b .L101
 1765              	.L98:
 733:.././hal/sam3u1c/usart.c **** 
 734:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_2:
 735:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPHA;
 1766              	 .loc 1 735 14
 1767 00a0 144B     	 ldr r3,.L103+4
 1768 00a2 1B68     	 ldr r3,[r3]
 1769 00a4 43F48073 	 orr r3,r3,#256
 1770 00a8 124A     	 ldr r2,.L103+4
 1771 00aa 1360     	 str r3,[r2]
 736:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 1772              	 .loc 1 736 14
 1773 00ac 114B     	 ldr r3,.L103+4
 1774 00ae 1B68     	 ldr r3,[r3]
 1775 00b0 43F48033 	 orr r3,r3,#65536
 1776 00b4 0F4A     	 ldr r2,.L103+4
 1777 00b6 1360     	 str r3,[r2]
 737:.././hal/sam3u1c/usart.c **** 		break;
 1778              	 .loc 1 737 3
 1779 00b8 0DE0     	 b .L101
 1780              	.L96:
 738:.././hal/sam3u1c/usart.c **** 
 739:.././hal/sam3u1c/usart.c **** 	case SPI_MODE_3:
 740:.././hal/sam3u1c/usart.c **** 		ul_reg_val |= US_MR_CPOL;
 1781              	 .loc 1 740 14
 1782 00ba 0E4B     	 ldr r3,.L103+4
 1783 00bc 1B68     	 ldr r3,[r3]
 1784 00be 43F48033 	 orr r3,r3,#65536
 1785 00c2 0C4A     	 ldr r2,.L103+4
 1786 00c4 1360     	 str r3,[r2]
 741:.././hal/sam3u1c/usart.c **** 		ul_reg_val &= ~US_MR_CPHA;
 1787              	 .loc 1 741 14
 1788 00c6 0B4B     	 ldr r3,.L103+4
 1789 00c8 1B68     	 ldr r3,[r3]
 1790 00ca 23F48073 	 bic r3,r3,#256
 1791 00ce 094A     	 ldr r2,.L103+4
 1792 00d0 1360     	 str r3,[r2]
 742:.././hal/sam3u1c/usart.c **** 		break;
 1793              	 .loc 1 742 3
 1794 00d2 00E0     	 b .L101
 1795              	.L102:
 743:.././hal/sam3u1c/usart.c **** 
 744:.././hal/sam3u1c/usart.c **** 	default:
 745:.././hal/sam3u1c/usart.c **** 		break;
 1796              	 .loc 1 745 3
 1797 00d4 00BF     	 nop
 1798              	.L101:
 746:.././hal/sam3u1c/usart.c **** 	}
 747:.././hal/sam3u1c/usart.c **** 
 748:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR |= ul_reg_val;
 1799              	 .loc 1 748 17
 1800 00d6 7B68     	 ldr r3,[r7,#4]
 1801 00d8 5A68     	 ldr r2,[r3,#4]
 1802 00da 064B     	 ldr r3,.L103+4
 1803 00dc 1B68     	 ldr r3,[r3]
 1804 00de 1A43     	 orrs r2,r2,r3
 1805 00e0 7B68     	 ldr r3,[r7,#4]
 1806 00e2 5A60     	 str r2,[r3,#4]
 749:.././hal/sam3u1c/usart.c **** 
 750:.././hal/sam3u1c/usart.c **** 	return 0;
 1807              	 .loc 1 750 9
 1808 00e4 0023     	 movs r3,#0
 1809              	.L94:
 751:.././hal/sam3u1c/usart.c **** }
 1810              	 .loc 1 751 1
 1811 00e6 1846     	 mov r0,r3
 1812 00e8 0837     	 adds r7,r7,#8
 1813              	.LCFI89:
 1814              	 .cfi_def_cfa_offset 8
 1815 00ea BD46     	 mov sp,r7
 1816              	.LCFI90:
 1817              	 .cfi_def_cfa_register 13
 1818              	 
 1819 00ec 80BD     	 pop {r7,pc}
 1820              	.L104:
 1821 00ee 00BF     	 .align 2
 1822              	.L103:
 1823 00f0 00000000 	 .word usart_reset
 1824 00f4 00000000 	 .word ul_reg_val.7214
 1825 00f8 00000000 	 .word usart_set_spi_slave_baudrate
 1826              	 .cfi_endproc
 1827              	.LFE85:
 1829              	 .section .text.usart_enable_tx,"ax",%progbits
 1830              	 .align 1
 1831              	 .global usart_enable_tx
 1832              	 .syntax unified
 1833              	 .thumb
 1834              	 .thumb_func
 1835              	 .fpu softvfp
 1837              	usart_enable_tx:
 1838              	.LFB86:
 752:.././hal/sam3u1c/usart.c **** 
 753:.././hal/sam3u1c/usart.c **** #if (SAM3XA || SAM4L || SAMG55)
 754:.././hal/sam3u1c/usart.c **** 
 755:.././hal/sam3u1c/usart.c **** /**
 756:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in LIN mode and act as a LIN master.
 757:.././hal/sam3u1c/usart.c ****  *
 758:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 759:.././hal/sam3u1c/usart.c ****  *
 760:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 761:.././hal/sam3u1c/usart.c ****  * \param ul_baudrate Baudrate to be used.
 762:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 763:.././hal/sam3u1c/usart.c ****  *
 764:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 765:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 766:.././hal/sam3u1c/usart.c ****  */
 767:.././hal/sam3u1c/usart.c **** uint32_t usart_init_lin_master(Usart *p_usart,uint32_t ul_baudrate,
 768:.././hal/sam3u1c/usart.c **** 		uint32_t ul_mck)
 769:.././hal/sam3u1c/usart.c **** {
 770:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 771:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 772:.././hal/sam3u1c/usart.c **** 
 773:.././hal/sam3u1c/usart.c **** 	/* Set up the baudrate. */
 774:.././hal/sam3u1c/usart.c **** 	if (usart_set_async_baudrate(p_usart, ul_baudrate, ul_mck)) {
 775:.././hal/sam3u1c/usart.c **** 		return 1;
 776:.././hal/sam3u1c/usart.c **** 	}
 777:.././hal/sam3u1c/usart.c **** 
 778:.././hal/sam3u1c/usart.c **** 	/* Set LIN master mode. */
 779:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 780:.././hal/sam3u1c/usart.c **** 			US_MR_USART_MODE_LIN_MASTER;
 781:.././hal/sam3u1c/usart.c **** 
 782:.././hal/sam3u1c/usart.c **** 	usart_enable_rx(p_usart);
 783:.././hal/sam3u1c/usart.c **** 	usart_enable_tx(p_usart);
 784:.././hal/sam3u1c/usart.c **** 
 785:.././hal/sam3u1c/usart.c **** 	return 0;
 786:.././hal/sam3u1c/usart.c **** }
 787:.././hal/sam3u1c/usart.c **** 
 788:.././hal/sam3u1c/usart.c **** /**
 789:.././hal/sam3u1c/usart.c ****  * \brief Configure USART to work in LIN mode and act as a LIN slave.
 790:.././hal/sam3u1c/usart.c ****  *
 791:.././hal/sam3u1c/usart.c ****  * \note By default, the transmitter and receiver aren't enabled.
 792:.././hal/sam3u1c/usart.c ****  *
 793:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 794:.././hal/sam3u1c/usart.c ****  * \param ul_baudrate Baudrate to be used.
 795:.././hal/sam3u1c/usart.c ****  * \param ul_mck USART module input clock frequency.
 796:.././hal/sam3u1c/usart.c ****  *
 797:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
 798:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
 799:.././hal/sam3u1c/usart.c ****  */
 800:.././hal/sam3u1c/usart.c **** uint32_t usart_init_lin_slave(Usart *p_usart, uint32_t ul_baudrate,
 801:.././hal/sam3u1c/usart.c **** 		uint32_t ul_mck)
 802:.././hal/sam3u1c/usart.c **** {
 803:.././hal/sam3u1c/usart.c **** 	/* Reset the USART and shut down TX and RX. */
 804:.././hal/sam3u1c/usart.c **** 	usart_reset(p_usart);
 805:.././hal/sam3u1c/usart.c **** 
 806:.././hal/sam3u1c/usart.c **** 	usart_enable_rx(p_usart);
 807:.././hal/sam3u1c/usart.c **** 	usart_enable_tx(p_usart);
 808:.././hal/sam3u1c/usart.c **** 
 809:.././hal/sam3u1c/usart.c **** 	/* Set LIN slave mode. */
 810:.././hal/sam3u1c/usart.c **** 	p_usart->US_MR = (p_usart->US_MR & ~US_MR_USART_MODE_Msk) |
 811:.././hal/sam3u1c/usart.c **** 			US_MR_USART_MODE_LIN_SLAVE;
 812:.././hal/sam3u1c/usart.c **** 
 813:.././hal/sam3u1c/usart.c **** 	/* Set up the baudrate. */
 814:.././hal/sam3u1c/usart.c **** 	if (usart_set_async_baudrate(p_usart, ul_baudrate, ul_mck)) {
 815:.././hal/sam3u1c/usart.c **** 		return 1;
 816:.././hal/sam3u1c/usart.c **** 	}
 817:.././hal/sam3u1c/usart.c **** 
 818:.././hal/sam3u1c/usart.c **** 	return 0;
 819:.././hal/sam3u1c/usart.c **** }
 820:.././hal/sam3u1c/usart.c **** 
 821:.././hal/sam3u1c/usart.c **** /**
 822:.././hal/sam3u1c/usart.c ****  * \brief Abort the current LIN transmission.
 823:.././hal/sam3u1c/usart.c ****  *
 824:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 825:.././hal/sam3u1c/usart.c ****  */
 826:.././hal/sam3u1c/usart.c **** void usart_lin_abort_tx(Usart *p_usart)
 827:.././hal/sam3u1c/usart.c **** {
 828:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_LINABT;
 829:.././hal/sam3u1c/usart.c **** }
 830:.././hal/sam3u1c/usart.c **** 
 831:.././hal/sam3u1c/usart.c **** /**
 832:.././hal/sam3u1c/usart.c ****  * \brief Send a wakeup signal on the LIN bus.
 833:.././hal/sam3u1c/usart.c ****  *
 834:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 835:.././hal/sam3u1c/usart.c ****  */
 836:.././hal/sam3u1c/usart.c **** void usart_lin_send_wakeup_signal(Usart *p_usart)
 837:.././hal/sam3u1c/usart.c **** {
 838:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_LINWKUP;
 839:.././hal/sam3u1c/usart.c **** }
 840:.././hal/sam3u1c/usart.c **** 
 841:.././hal/sam3u1c/usart.c **** /**
 842:.././hal/sam3u1c/usart.c ****  * \brief Configure the LIN node action, which should be one of PUBLISH,
 843:.././hal/sam3u1c/usart.c ****  * SUBSCRIBE or IGNORE.
 844:.././hal/sam3u1c/usart.c ****  *
 845:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 846:.././hal/sam3u1c/usart.c ****  * \param uc_action 0 for PUBLISH, 1 for SUBSCRIBE, 2 for IGNORE.
 847:.././hal/sam3u1c/usart.c ****  */
 848:.././hal/sam3u1c/usart.c **** void usart_lin_set_node_action(Usart *p_usart, uint8_t uc_action)
 849:.././hal/sam3u1c/usart.c **** {
 850:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_NACT_Msk) |
 851:.././hal/sam3u1c/usart.c **** 			(uc_action << US_LINMR_NACT_Pos);
 852:.././hal/sam3u1c/usart.c **** }
 853:.././hal/sam3u1c/usart.c **** 
 854:.././hal/sam3u1c/usart.c **** /**
 855:.././hal/sam3u1c/usart.c ****  * \brief Disable the parity check during the LIN communication.
 856:.././hal/sam3u1c/usart.c ****  *
 857:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 858:.././hal/sam3u1c/usart.c ****  */
 859:.././hal/sam3u1c/usart.c **** void usart_lin_disable_parity(Usart *p_usart)
 860:.././hal/sam3u1c/usart.c **** {
 861:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR |= US_LINMR_PARDIS;
 862:.././hal/sam3u1c/usart.c **** }
 863:.././hal/sam3u1c/usart.c **** 
 864:.././hal/sam3u1c/usart.c **** /**
 865:.././hal/sam3u1c/usart.c ****  * \brief Enable the parity check during the LIN communication.
 866:.././hal/sam3u1c/usart.c ****  *
 867:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 868:.././hal/sam3u1c/usart.c ****  */
 869:.././hal/sam3u1c/usart.c **** void usart_lin_enable_parity(Usart *p_usart)
 870:.././hal/sam3u1c/usart.c **** {
 871:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR &= ~US_LINMR_PARDIS;
 872:.././hal/sam3u1c/usart.c **** }
 873:.././hal/sam3u1c/usart.c **** 
 874:.././hal/sam3u1c/usart.c **** /**
 875:.././hal/sam3u1c/usart.c ****  * \brief Disable the checksum during the LIN communication.
 876:.././hal/sam3u1c/usart.c ****  *
 877:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 878:.././hal/sam3u1c/usart.c ****  */
 879:.././hal/sam3u1c/usart.c **** void usart_lin_disable_checksum(Usart *p_usart)
 880:.././hal/sam3u1c/usart.c **** {
 881:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR |= US_LINMR_CHKDIS;
 882:.././hal/sam3u1c/usart.c **** }
 883:.././hal/sam3u1c/usart.c **** 
 884:.././hal/sam3u1c/usart.c **** /**
 885:.././hal/sam3u1c/usart.c ****  * \brief Enable the checksum during the LIN communication.
 886:.././hal/sam3u1c/usart.c ****  *
 887:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 888:.././hal/sam3u1c/usart.c ****  */
 889:.././hal/sam3u1c/usart.c **** void usart_lin_enable_checksum(Usart *p_usart)
 890:.././hal/sam3u1c/usart.c **** {
 891:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR &= ~US_LINMR_CHKDIS;
 892:.././hal/sam3u1c/usart.c **** }
 893:.././hal/sam3u1c/usart.c **** 
 894:.././hal/sam3u1c/usart.c **** /**
 895:.././hal/sam3u1c/usart.c ****  * \brief Configure the checksum type during the LIN communication.
 896:.././hal/sam3u1c/usart.c ****  *
 897:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 898:.././hal/sam3u1c/usart.c ****  * \param uc_type 0 for LIN 2.0 Enhanced checksum or 1 for LIN 1.3 Classic
 899:.././hal/sam3u1c/usart.c ****  *  checksum.
 900:.././hal/sam3u1c/usart.c ****  */
 901:.././hal/sam3u1c/usart.c **** void usart_lin_set_checksum_type(Usart *p_usart, uint8_t uc_type)
 902:.././hal/sam3u1c/usart.c **** {
 903:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_CHKTYP) |
 904:.././hal/sam3u1c/usart.c **** 			(uc_type << 4);
 905:.././hal/sam3u1c/usart.c **** }
 906:.././hal/sam3u1c/usart.c **** 
 907:.././hal/sam3u1c/usart.c **** /**
 908:.././hal/sam3u1c/usart.c ****  * \brief Configure the data length mode during the LIN communication.
 909:.././hal/sam3u1c/usart.c ****  *
 910:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 911:.././hal/sam3u1c/usart.c ****  * \param uc_mode Indicate the data length type: 0 if the data length is
 912:.././hal/sam3u1c/usart.c ****  * defined by the DLC of LIN mode register or 1 if the data length is defined
 913:.././hal/sam3u1c/usart.c ****  * by the bit 5 and 6 of the identifier.
 914:.././hal/sam3u1c/usart.c ****  */
 915:.././hal/sam3u1c/usart.c **** void usart_lin_set_data_len_mode(Usart *p_usart, uint8_t uc_mode)
 916:.././hal/sam3u1c/usart.c **** {
 917:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_DLM) |
 918:.././hal/sam3u1c/usart.c **** 			(uc_mode << 5);
 919:.././hal/sam3u1c/usart.c **** }
 920:.././hal/sam3u1c/usart.c **** 
 921:.././hal/sam3u1c/usart.c **** /**
 922:.././hal/sam3u1c/usart.c ****  * \brief Disable the frame slot mode during the LIN communication.
 923:.././hal/sam3u1c/usart.c ****  *
 924:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 925:.././hal/sam3u1c/usart.c ****  */
 926:.././hal/sam3u1c/usart.c **** void usart_lin_disable_frame_slot(Usart *p_usart)
 927:.././hal/sam3u1c/usart.c **** {
 928:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR |= US_LINMR_FSDIS;
 929:.././hal/sam3u1c/usart.c **** }
 930:.././hal/sam3u1c/usart.c **** 
 931:.././hal/sam3u1c/usart.c **** /**
 932:.././hal/sam3u1c/usart.c ****  * \brief Enable the frame slot mode during the LIN communication.
 933:.././hal/sam3u1c/usart.c ****  *
 934:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 935:.././hal/sam3u1c/usart.c ****  */
 936:.././hal/sam3u1c/usart.c **** void usart_lin_enable_frame_slot(Usart *p_usart)
 937:.././hal/sam3u1c/usart.c **** {
 938:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR &= ~US_LINMR_FSDIS;
 939:.././hal/sam3u1c/usart.c **** }
 940:.././hal/sam3u1c/usart.c **** 
 941:.././hal/sam3u1c/usart.c **** /**
 942:.././hal/sam3u1c/usart.c ****  * \brief Configure the wakeup signal type during the LIN communication.
 943:.././hal/sam3u1c/usart.c ****  *
 944:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 945:.././hal/sam3u1c/usart.c ****  * \param uc_type Indicate the checksum type: 0 if the wakeup signal is a
 946:.././hal/sam3u1c/usart.c ****  * LIN 2.0 wakeup signal; 1 if the wakeup signal is a LIN 1.3 wakeup signal.
 947:.././hal/sam3u1c/usart.c ****  */
 948:.././hal/sam3u1c/usart.c **** void usart_lin_set_wakeup_signal_type(Usart *p_usart, uint8_t uc_type)
 949:.././hal/sam3u1c/usart.c **** {
 950:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_WKUPTYP) |
 951:.././hal/sam3u1c/usart.c **** 			(uc_type << 7);
 952:.././hal/sam3u1c/usart.c **** }
 953:.././hal/sam3u1c/usart.c **** 
 954:.././hal/sam3u1c/usart.c **** /**
 955:.././hal/sam3u1c/usart.c ****  * \brief Configure the response data length if the data length is defined by
 956:.././hal/sam3u1c/usart.c ****  * the DLC field during the LIN communication.
 957:.././hal/sam3u1c/usart.c ****  *
 958:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 959:.././hal/sam3u1c/usart.c ****  * \param uc_len Indicate the response data length.
 960:.././hal/sam3u1c/usart.c ****  */
 961:.././hal/sam3u1c/usart.c **** void usart_lin_set_response_data_len(Usart *p_usart, uint8_t uc_len)
 962:.././hal/sam3u1c/usart.c **** {
 963:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR = (p_usart->US_LINMR & ~US_LINMR_DLC_Msk) |
 964:.././hal/sam3u1c/usart.c **** 			((uc_len - 1) << US_LINMR_DLC_Pos);
 965:.././hal/sam3u1c/usart.c **** }
 966:.././hal/sam3u1c/usart.c **** 
 967:.././hal/sam3u1c/usart.c **** /**
 968:.././hal/sam3u1c/usart.c ****  * \brief The LIN mode register is not written by the PDC.
 969:.././hal/sam3u1c/usart.c ****  *
 970:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 971:.././hal/sam3u1c/usart.c ****  */
 972:.././hal/sam3u1c/usart.c **** void usart_lin_disable_pdc_mode(Usart *p_usart)
 973:.././hal/sam3u1c/usart.c **** {
 974:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR &= ~US_LINMR_PDCM;
 975:.././hal/sam3u1c/usart.c **** }
 976:.././hal/sam3u1c/usart.c **** 
 977:.././hal/sam3u1c/usart.c **** /**
 978:.././hal/sam3u1c/usart.c ****  * \brief The LIN mode register (except this flag) is written by the PDC.
 979:.././hal/sam3u1c/usart.c ****  *
 980:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 981:.././hal/sam3u1c/usart.c ****  */
 982:.././hal/sam3u1c/usart.c **** void usart_lin_enable_pdc_mode(Usart *p_usart)
 983:.././hal/sam3u1c/usart.c **** {
 984:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINMR |= US_LINMR_PDCM;
 985:.././hal/sam3u1c/usart.c **** }
 986:.././hal/sam3u1c/usart.c **** 
 987:.././hal/sam3u1c/usart.c **** /**
 988:.././hal/sam3u1c/usart.c ****  * \brief Configure the LIN identifier when USART works in LIN master mode.
 989:.././hal/sam3u1c/usart.c ****  *
 990:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
 991:.././hal/sam3u1c/usart.c ****  * \param uc_id The identifier to be transmitted.
 992:.././hal/sam3u1c/usart.c ****  */
 993:.././hal/sam3u1c/usart.c **** void usart_lin_set_tx_identifier(Usart *p_usart, uint8_t uc_id)
 994:.././hal/sam3u1c/usart.c **** {
 995:.././hal/sam3u1c/usart.c **** 	p_usart->US_LINIR = (p_usart->US_LINIR & ~US_LINIR_IDCHR_Msk) |
 996:.././hal/sam3u1c/usart.c **** 			US_LINIR_IDCHR(uc_id);
 997:.././hal/sam3u1c/usart.c **** }
 998:.././hal/sam3u1c/usart.c **** 
 999:.././hal/sam3u1c/usart.c **** /**
1000:.././hal/sam3u1c/usart.c ****  * \brief Read the identifier when USART works in LIN mode.
1001:.././hal/sam3u1c/usart.c ****  *
1002:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1003:.././hal/sam3u1c/usart.c ****  *
1004:.././hal/sam3u1c/usart.c ****  * \return The last identifier received in LIN slave mode or the last
1005:.././hal/sam3u1c/usart.c ****  * identifier transmitted in LIN master mode.
1006:.././hal/sam3u1c/usart.c ****  */
1007:.././hal/sam3u1c/usart.c **** uint8_t usart_lin_read_identifier(Usart *p_usart)
1008:.././hal/sam3u1c/usart.c **** {
1009:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_LINIR & US_LINIR_IDCHR_Msk);
1010:.././hal/sam3u1c/usart.c **** }
1011:.././hal/sam3u1c/usart.c **** 
1012:.././hal/sam3u1c/usart.c **** /**
1013:.././hal/sam3u1c/usart.c ****  * \brief Get data length.
1014:.././hal/sam3u1c/usart.c ****  *
1015:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1016:.././hal/sam3u1c/usart.c ****  *
1017:.././hal/sam3u1c/usart.c ****  * \return Data length.
1018:.././hal/sam3u1c/usart.c ****  */
1019:.././hal/sam3u1c/usart.c **** uint8_t usart_lin_get_data_length(Usart *usart)
1020:.././hal/sam3u1c/usart.c **** {
1021:.././hal/sam3u1c/usart.c **** 	if (usart->US_LINMR & US_LINMR_DLM) {
1022:.././hal/sam3u1c/usart.c **** 		uint8_t data_length = 1 << ((usart->US_LINIR >>
1023:.././hal/sam3u1c/usart.c **** 				(US_LINIR_IDCHR_Pos + 4)) & 0x03);
1024:.././hal/sam3u1c/usart.c **** 		return data_length;
1025:.././hal/sam3u1c/usart.c **** 	} else {
1026:.././hal/sam3u1c/usart.c **** 		return ((usart->US_LINMR & US_LINMR_DLC_Msk) >> US_LINMR_DLC_Pos) + 1;
1027:.././hal/sam3u1c/usart.c **** 	}
1028:.././hal/sam3u1c/usart.c **** }
1029:.././hal/sam3u1c/usart.c **** 
1030:.././hal/sam3u1c/usart.c **** #endif
1031:.././hal/sam3u1c/usart.c **** 
1032:.././hal/sam3u1c/usart.c **** /**
1033:.././hal/sam3u1c/usart.c ****  * \brief Enable USART transmitter.
1034:.././hal/sam3u1c/usart.c ****  *
1035:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1036:.././hal/sam3u1c/usart.c ****  */
1037:.././hal/sam3u1c/usart.c **** void usart_enable_tx(Usart *p_usart)
1038:.././hal/sam3u1c/usart.c **** {
 1839              	 .loc 1 1038 1
 1840              	 .cfi_startproc
 1841              	 
 1842              	 
 1843              	 
 1844 0000 80B4     	 push {r7}
 1845              	.LCFI91:
 1846              	 .cfi_def_cfa_offset 4
 1847              	 .cfi_offset 7,-4
 1848 0002 83B0     	 sub sp,sp,#12
 1849              	.LCFI92:
 1850              	 .cfi_def_cfa_offset 16
 1851 0004 00AF     	 add r7,sp,#0
 1852              	.LCFI93:
 1853              	 .cfi_def_cfa_register 7
 1854 0006 7860     	 str r0,[r7,#4]
1039:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_TXEN;
 1855              	 .loc 1 1039 17
 1856 0008 7B68     	 ldr r3,[r7,#4]
 1857 000a 4022     	 movs r2,#64
 1858 000c 1A60     	 str r2,[r3]
1040:.././hal/sam3u1c/usart.c **** }
 1859              	 .loc 1 1040 1
 1860 000e 00BF     	 nop
 1861 0010 0C37     	 adds r7,r7,#12
 1862              	.LCFI94:
 1863              	 .cfi_def_cfa_offset 4
 1864 0012 BD46     	 mov sp,r7
 1865              	.LCFI95:
 1866              	 .cfi_def_cfa_register 13
 1867              	 
 1868 0014 80BC     	 pop {r7}
 1869              	.LCFI96:
 1870              	 .cfi_restore 7
 1871              	 .cfi_def_cfa_offset 0
 1872 0016 7047     	 bx lr
 1873              	 .cfi_endproc
 1874              	.LFE86:
 1876              	 .section .text.usart_disable_tx,"ax",%progbits
 1877              	 .align 1
 1878              	 .global usart_disable_tx
 1879              	 .syntax unified
 1880              	 .thumb
 1881              	 .thumb_func
 1882              	 .fpu softvfp
 1884              	usart_disable_tx:
 1885              	.LFB87:
1041:.././hal/sam3u1c/usart.c **** 
1042:.././hal/sam3u1c/usart.c **** /**
1043:.././hal/sam3u1c/usart.c ****  * \brief Disable USART transmitter.
1044:.././hal/sam3u1c/usart.c ****  *
1045:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1046:.././hal/sam3u1c/usart.c ****  */
1047:.././hal/sam3u1c/usart.c **** void usart_disable_tx(Usart *p_usart)
1048:.././hal/sam3u1c/usart.c **** {
 1886              	 .loc 1 1048 1
 1887              	 .cfi_startproc
 1888              	 
 1889              	 
 1890              	 
 1891 0000 80B4     	 push {r7}
 1892              	.LCFI97:
 1893              	 .cfi_def_cfa_offset 4
 1894              	 .cfi_offset 7,-4
 1895 0002 83B0     	 sub sp,sp,#12
 1896              	.LCFI98:
 1897              	 .cfi_def_cfa_offset 16
 1898 0004 00AF     	 add r7,sp,#0
 1899              	.LCFI99:
 1900              	 .cfi_def_cfa_register 7
 1901 0006 7860     	 str r0,[r7,#4]
1049:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_TXDIS;
 1902              	 .loc 1 1049 17
 1903 0008 7B68     	 ldr r3,[r7,#4]
 1904 000a 8022     	 movs r2,#128
 1905 000c 1A60     	 str r2,[r3]
1050:.././hal/sam3u1c/usart.c **** }
 1906              	 .loc 1 1050 1
 1907 000e 00BF     	 nop
 1908 0010 0C37     	 adds r7,r7,#12
 1909              	.LCFI100:
 1910              	 .cfi_def_cfa_offset 4
 1911 0012 BD46     	 mov sp,r7
 1912              	.LCFI101:
 1913              	 .cfi_def_cfa_register 13
 1914              	 
 1915 0014 80BC     	 pop {r7}
 1916              	.LCFI102:
 1917              	 .cfi_restore 7
 1918              	 .cfi_def_cfa_offset 0
 1919 0016 7047     	 bx lr
 1920              	 .cfi_endproc
 1921              	.LFE87:
 1923              	 .section .text.usart_reset_tx,"ax",%progbits
 1924              	 .align 1
 1925              	 .global usart_reset_tx
 1926              	 .syntax unified
 1927              	 .thumb
 1928              	 .thumb_func
 1929              	 .fpu softvfp
 1931              	usart_reset_tx:
 1932              	.LFB88:
1051:.././hal/sam3u1c/usart.c **** 
1052:.././hal/sam3u1c/usart.c **** /**
1053:.././hal/sam3u1c/usart.c ****  * \brief Immediately stop and disable USART transmitter.
1054:.././hal/sam3u1c/usart.c ****  *
1055:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1056:.././hal/sam3u1c/usart.c ****  */
1057:.././hal/sam3u1c/usart.c **** void usart_reset_tx(Usart *p_usart)
1058:.././hal/sam3u1c/usart.c **** {
 1933              	 .loc 1 1058 1
 1934              	 .cfi_startproc
 1935              	 
 1936              	 
 1937              	 
 1938 0000 80B4     	 push {r7}
 1939              	.LCFI103:
 1940              	 .cfi_def_cfa_offset 4
 1941              	 .cfi_offset 7,-4
 1942 0002 83B0     	 sub sp,sp,#12
 1943              	.LCFI104:
 1944              	 .cfi_def_cfa_offset 16
 1945 0004 00AF     	 add r7,sp,#0
 1946              	.LCFI105:
 1947              	 .cfi_def_cfa_register 7
 1948 0006 7860     	 str r0,[r7,#4]
1059:.././hal/sam3u1c/usart.c **** 	/* Reset transmitter */
1060:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
 1949              	 .loc 1 1060 17
 1950 0008 7B68     	 ldr r3,[r7,#4]
 1951 000a 8822     	 movs r2,#136
 1952 000c 1A60     	 str r2,[r3]
1061:.././hal/sam3u1c/usart.c **** }
 1953              	 .loc 1 1061 1
 1954 000e 00BF     	 nop
 1955 0010 0C37     	 adds r7,r7,#12
 1956              	.LCFI106:
 1957              	 .cfi_def_cfa_offset 4
 1958 0012 BD46     	 mov sp,r7
 1959              	.LCFI107:
 1960              	 .cfi_def_cfa_register 13
 1961              	 
 1962 0014 80BC     	 pop {r7}
 1963              	.LCFI108:
 1964              	 .cfi_restore 7
 1965              	 .cfi_def_cfa_offset 0
 1966 0016 7047     	 bx lr
 1967              	 .cfi_endproc
 1968              	.LFE88:
 1970              	 .section .text.usart_set_tx_timeguard,"ax",%progbits
 1971              	 .align 1
 1972              	 .global usart_set_tx_timeguard
 1973              	 .syntax unified
 1974              	 .thumb
 1975              	 .thumb_func
 1976              	 .fpu softvfp
 1978              	usart_set_tx_timeguard:
 1979              	.LFB89:
1062:.././hal/sam3u1c/usart.c **** 
1063:.././hal/sam3u1c/usart.c **** /**
1064:.././hal/sam3u1c/usart.c ****  * \brief Configure the transmit timeguard register.
1065:.././hal/sam3u1c/usart.c ****  *
1066:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1067:.././hal/sam3u1c/usart.c ****  * \param timeguard The value of transmit timeguard.
1068:.././hal/sam3u1c/usart.c ****  */
1069:.././hal/sam3u1c/usart.c **** void usart_set_tx_timeguard(Usart *p_usart, uint32_t timeguard)
1070:.././hal/sam3u1c/usart.c **** {
 1980              	 .loc 1 1070 1
 1981              	 .cfi_startproc
 1982              	 
 1983              	 
 1984              	 
 1985 0000 80B4     	 push {r7}
 1986              	.LCFI109:
 1987              	 .cfi_def_cfa_offset 4
 1988              	 .cfi_offset 7,-4
 1989 0002 83B0     	 sub sp,sp,#12
 1990              	.LCFI110:
 1991              	 .cfi_def_cfa_offset 16
 1992 0004 00AF     	 add r7,sp,#0
 1993              	.LCFI111:
 1994              	 .cfi_def_cfa_register 7
 1995 0006 7860     	 str r0,[r7,#4]
 1996 0008 3960     	 str r1,[r7]
1071:.././hal/sam3u1c/usart.c **** 	p_usart->US_TTGR = timeguard;
 1997              	 .loc 1 1071 19
 1998 000a 7B68     	 ldr r3,[r7,#4]
 1999 000c 3A68     	 ldr r2,[r7]
 2000 000e 9A62     	 str r2,[r3,#40]
1072:.././hal/sam3u1c/usart.c **** }
 2001              	 .loc 1 1072 1
 2002 0010 00BF     	 nop
 2003 0012 0C37     	 adds r7,r7,#12
 2004              	.LCFI112:
 2005              	 .cfi_def_cfa_offset 4
 2006 0014 BD46     	 mov sp,r7
 2007              	.LCFI113:
 2008              	 .cfi_def_cfa_register 13
 2009              	 
 2010 0016 80BC     	 pop {r7}
 2011              	.LCFI114:
 2012              	 .cfi_restore 7
 2013              	 .cfi_def_cfa_offset 0
 2014 0018 7047     	 bx lr
 2015              	 .cfi_endproc
 2016              	.LFE89:
 2018              	 .section .text.usart_enable_rx,"ax",%progbits
 2019              	 .align 1
 2020              	 .global usart_enable_rx
 2021              	 .syntax unified
 2022              	 .thumb
 2023              	 .thumb_func
 2024              	 .fpu softvfp
 2026              	usart_enable_rx:
 2027              	.LFB90:
1073:.././hal/sam3u1c/usart.c **** 
1074:.././hal/sam3u1c/usart.c **** /**
1075:.././hal/sam3u1c/usart.c ****  * \brief Enable USART receiver.
1076:.././hal/sam3u1c/usart.c ****  *
1077:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1078:.././hal/sam3u1c/usart.c ****  */
1079:.././hal/sam3u1c/usart.c **** void usart_enable_rx(Usart *p_usart)
1080:.././hal/sam3u1c/usart.c **** {
 2028              	 .loc 1 1080 1
 2029              	 .cfi_startproc
 2030              	 
 2031              	 
 2032              	 
 2033 0000 80B4     	 push {r7}
 2034              	.LCFI115:
 2035              	 .cfi_def_cfa_offset 4
 2036              	 .cfi_offset 7,-4
 2037 0002 83B0     	 sub sp,sp,#12
 2038              	.LCFI116:
 2039              	 .cfi_def_cfa_offset 16
 2040 0004 00AF     	 add r7,sp,#0
 2041              	.LCFI117:
 2042              	 .cfi_def_cfa_register 7
 2043 0006 7860     	 str r0,[r7,#4]
1081:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RXEN;
 2044              	 .loc 1 1081 17
 2045 0008 7B68     	 ldr r3,[r7,#4]
 2046 000a 1022     	 movs r2,#16
 2047 000c 1A60     	 str r2,[r3]
1082:.././hal/sam3u1c/usart.c **** }
 2048              	 .loc 1 1082 1
 2049 000e 00BF     	 nop
 2050 0010 0C37     	 adds r7,r7,#12
 2051              	.LCFI118:
 2052              	 .cfi_def_cfa_offset 4
 2053 0012 BD46     	 mov sp,r7
 2054              	.LCFI119:
 2055              	 .cfi_def_cfa_register 13
 2056              	 
 2057 0014 80BC     	 pop {r7}
 2058              	.LCFI120:
 2059              	 .cfi_restore 7
 2060              	 .cfi_def_cfa_offset 0
 2061 0016 7047     	 bx lr
 2062              	 .cfi_endproc
 2063              	.LFE90:
 2065              	 .section .text.usart_disable_rx,"ax",%progbits
 2066              	 .align 1
 2067              	 .global usart_disable_rx
 2068              	 .syntax unified
 2069              	 .thumb
 2070              	 .thumb_func
 2071              	 .fpu softvfp
 2073              	usart_disable_rx:
 2074              	.LFB91:
1083:.././hal/sam3u1c/usart.c **** 
1084:.././hal/sam3u1c/usart.c **** /**
1085:.././hal/sam3u1c/usart.c ****  * \brief Disable USART receiver.
1086:.././hal/sam3u1c/usart.c ****  *
1087:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1088:.././hal/sam3u1c/usart.c ****  */
1089:.././hal/sam3u1c/usart.c **** void usart_disable_rx(Usart *p_usart)
1090:.././hal/sam3u1c/usart.c **** {
 2075              	 .loc 1 1090 1
 2076              	 .cfi_startproc
 2077              	 
 2078              	 
 2079              	 
 2080 0000 80B4     	 push {r7}
 2081              	.LCFI121:
 2082              	 .cfi_def_cfa_offset 4
 2083              	 .cfi_offset 7,-4
 2084 0002 83B0     	 sub sp,sp,#12
 2085              	.LCFI122:
 2086              	 .cfi_def_cfa_offset 16
 2087 0004 00AF     	 add r7,sp,#0
 2088              	.LCFI123:
 2089              	 .cfi_def_cfa_register 7
 2090 0006 7860     	 str r0,[r7,#4]
1091:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RXDIS;
 2091              	 .loc 1 1091 17
 2092 0008 7B68     	 ldr r3,[r7,#4]
 2093 000a 2022     	 movs r2,#32
 2094 000c 1A60     	 str r2,[r3]
1092:.././hal/sam3u1c/usart.c **** }
 2095              	 .loc 1 1092 1
 2096 000e 00BF     	 nop
 2097 0010 0C37     	 adds r7,r7,#12
 2098              	.LCFI124:
 2099              	 .cfi_def_cfa_offset 4
 2100 0012 BD46     	 mov sp,r7
 2101              	.LCFI125:
 2102              	 .cfi_def_cfa_register 13
 2103              	 
 2104 0014 80BC     	 pop {r7}
 2105              	.LCFI126:
 2106              	 .cfi_restore 7
 2107              	 .cfi_def_cfa_offset 0
 2108 0016 7047     	 bx lr
 2109              	 .cfi_endproc
 2110              	.LFE91:
 2112              	 .section .text.usart_reset_rx,"ax",%progbits
 2113              	 .align 1
 2114              	 .global usart_reset_rx
 2115              	 .syntax unified
 2116              	 .thumb
 2117              	 .thumb_func
 2118              	 .fpu softvfp
 2120              	usart_reset_rx:
 2121              	.LFB92:
1093:.././hal/sam3u1c/usart.c **** 
1094:.././hal/sam3u1c/usart.c **** /**
1095:.././hal/sam3u1c/usart.c ****  * \brief Immediately stop and disable USART receiver.
1096:.././hal/sam3u1c/usart.c ****  *
1097:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1098:.././hal/sam3u1c/usart.c ****  */
1099:.././hal/sam3u1c/usart.c **** void usart_reset_rx(Usart *p_usart)
1100:.././hal/sam3u1c/usart.c **** {
 2122              	 .loc 1 1100 1
 2123              	 .cfi_startproc
 2124              	 
 2125              	 
 2126              	 
 2127 0000 80B4     	 push {r7}
 2128              	.LCFI127:
 2129              	 .cfi_def_cfa_offset 4
 2130              	 .cfi_offset 7,-4
 2131 0002 83B0     	 sub sp,sp,#12
 2132              	.LCFI128:
 2133              	 .cfi_def_cfa_offset 16
 2134 0004 00AF     	 add r7,sp,#0
 2135              	.LCFI129:
 2136              	 .cfi_def_cfa_register 7
 2137 0006 7860     	 str r0,[r7,#4]
1101:.././hal/sam3u1c/usart.c **** 	/* Reset Receiver */
1102:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
 2138              	 .loc 1 1102 17
 2139 0008 7B68     	 ldr r3,[r7,#4]
 2140 000a 2422     	 movs r2,#36
 2141 000c 1A60     	 str r2,[r3]
1103:.././hal/sam3u1c/usart.c **** }
 2142              	 .loc 1 1103 1
 2143 000e 00BF     	 nop
 2144 0010 0C37     	 adds r7,r7,#12
 2145              	.LCFI130:
 2146              	 .cfi_def_cfa_offset 4
 2147 0012 BD46     	 mov sp,r7
 2148              	.LCFI131:
 2149              	 .cfi_def_cfa_register 13
 2150              	 
 2151 0014 80BC     	 pop {r7}
 2152              	.LCFI132:
 2153              	 .cfi_restore 7
 2154              	 .cfi_def_cfa_offset 0
 2155 0016 7047     	 bx lr
 2156              	 .cfi_endproc
 2157              	.LFE92:
 2159              	 .section .text.usart_set_rx_timeout,"ax",%progbits
 2160              	 .align 1
 2161              	 .global usart_set_rx_timeout
 2162              	 .syntax unified
 2163              	 .thumb
 2164              	 .thumb_func
 2165              	 .fpu softvfp
 2167              	usart_set_rx_timeout:
 2168              	.LFB93:
1104:.././hal/sam3u1c/usart.c **** 
1105:.././hal/sam3u1c/usart.c **** /**
1106:.././hal/sam3u1c/usart.c ****  * \brief Configure the receive timeout register.
1107:.././hal/sam3u1c/usart.c ****  *
1108:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1109:.././hal/sam3u1c/usart.c ****  * \param timeout The value of receive timeout.
1110:.././hal/sam3u1c/usart.c ****  */
1111:.././hal/sam3u1c/usart.c **** void usart_set_rx_timeout(Usart *p_usart, uint32_t timeout)
1112:.././hal/sam3u1c/usart.c **** {
 2169              	 .loc 1 1112 1
 2170              	 .cfi_startproc
 2171              	 
 2172              	 
 2173              	 
 2174 0000 80B4     	 push {r7}
 2175              	.LCFI133:
 2176              	 .cfi_def_cfa_offset 4
 2177              	 .cfi_offset 7,-4
 2178 0002 83B0     	 sub sp,sp,#12
 2179              	.LCFI134:
 2180              	 .cfi_def_cfa_offset 16
 2181 0004 00AF     	 add r7,sp,#0
 2182              	.LCFI135:
 2183              	 .cfi_def_cfa_register 7
 2184 0006 7860     	 str r0,[r7,#4]
 2185 0008 3960     	 str r1,[r7]
1113:.././hal/sam3u1c/usart.c **** 	p_usart->US_RTOR = timeout;
 2186              	 .loc 1 1113 19
 2187 000a 7B68     	 ldr r3,[r7,#4]
 2188 000c 3A68     	 ldr r2,[r7]
 2189 000e 5A62     	 str r2,[r3,#36]
1114:.././hal/sam3u1c/usart.c **** }
 2190              	 .loc 1 1114 1
 2191 0010 00BF     	 nop
 2192 0012 0C37     	 adds r7,r7,#12
 2193              	.LCFI136:
 2194              	 .cfi_def_cfa_offset 4
 2195 0014 BD46     	 mov sp,r7
 2196              	.LCFI137:
 2197              	 .cfi_def_cfa_register 13
 2198              	 
 2199 0016 80BC     	 pop {r7}
 2200              	.LCFI138:
 2201              	 .cfi_restore 7
 2202              	 .cfi_def_cfa_offset 0
 2203 0018 7047     	 bx lr
 2204              	 .cfi_endproc
 2205              	.LFE93:
 2207              	 .section .text.usart_enable_interrupt,"ax",%progbits
 2208              	 .align 1
 2209              	 .global usart_enable_interrupt
 2210              	 .syntax unified
 2211              	 .thumb
 2212              	 .thumb_func
 2213              	 .fpu softvfp
 2215              	usart_enable_interrupt:
 2216              	.LFB94:
1115:.././hal/sam3u1c/usart.c **** 
1116:.././hal/sam3u1c/usart.c **** /**
1117:.././hal/sam3u1c/usart.c ****  * \brief Enable USART interrupts.
1118:.././hal/sam3u1c/usart.c ****  *
1119:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART peripheral.
1120:.././hal/sam3u1c/usart.c ****  * \param ul_sources Interrupt sources bit map.
1121:.././hal/sam3u1c/usart.c ****  */
1122:.././hal/sam3u1c/usart.c **** void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
1123:.././hal/sam3u1c/usart.c **** {
 2217              	 .loc 1 1123 1
 2218              	 .cfi_startproc
 2219              	 
 2220              	 
 2221              	 
 2222 0000 80B4     	 push {r7}
 2223              	.LCFI139:
 2224              	 .cfi_def_cfa_offset 4
 2225              	 .cfi_offset 7,-4
 2226 0002 83B0     	 sub sp,sp,#12
 2227              	.LCFI140:
 2228              	 .cfi_def_cfa_offset 16
 2229 0004 00AF     	 add r7,sp,#0
 2230              	.LCFI141:
 2231              	 .cfi_def_cfa_register 7
 2232 0006 7860     	 str r0,[r7,#4]
 2233 0008 3960     	 str r1,[r7]
1124:.././hal/sam3u1c/usart.c **** 	p_usart->US_IER = ul_sources;
 2234              	 .loc 1 1124 18
 2235 000a 7B68     	 ldr r3,[r7,#4]
 2236 000c 3A68     	 ldr r2,[r7]
 2237 000e 9A60     	 str r2,[r3,#8]
1125:.././hal/sam3u1c/usart.c **** }
 2238              	 .loc 1 1125 1
 2239 0010 00BF     	 nop
 2240 0012 0C37     	 adds r7,r7,#12
 2241              	.LCFI142:
 2242              	 .cfi_def_cfa_offset 4
 2243 0014 BD46     	 mov sp,r7
 2244              	.LCFI143:
 2245              	 .cfi_def_cfa_register 13
 2246              	 
 2247 0016 80BC     	 pop {r7}
 2248              	.LCFI144:
 2249              	 .cfi_restore 7
 2250              	 .cfi_def_cfa_offset 0
 2251 0018 7047     	 bx lr
 2252              	 .cfi_endproc
 2253              	.LFE94:
 2255              	 .section .text.usart_disable_interrupt,"ax",%progbits
 2256              	 .align 1
 2257              	 .global usart_disable_interrupt
 2258              	 .syntax unified
 2259              	 .thumb
 2260              	 .thumb_func
 2261              	 .fpu softvfp
 2263              	usart_disable_interrupt:
 2264              	.LFB95:
1126:.././hal/sam3u1c/usart.c **** 
1127:.././hal/sam3u1c/usart.c **** /**
1128:.././hal/sam3u1c/usart.c ****  * \brief Disable USART interrupts.
1129:.././hal/sam3u1c/usart.c ****  *
1130:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART peripheral.
1131:.././hal/sam3u1c/usart.c ****  * \param ul_sources Interrupt sources bit map.
1132:.././hal/sam3u1c/usart.c ****  */
1133:.././hal/sam3u1c/usart.c **** void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
1134:.././hal/sam3u1c/usart.c **** {
 2265              	 .loc 1 1134 1
 2266              	 .cfi_startproc
 2267              	 
 2268              	 
 2269              	 
 2270 0000 80B4     	 push {r7}
 2271              	.LCFI145:
 2272              	 .cfi_def_cfa_offset 4
 2273              	 .cfi_offset 7,-4
 2274 0002 83B0     	 sub sp,sp,#12
 2275              	.LCFI146:
 2276              	 .cfi_def_cfa_offset 16
 2277 0004 00AF     	 add r7,sp,#0
 2278              	.LCFI147:
 2279              	 .cfi_def_cfa_register 7
 2280 0006 7860     	 str r0,[r7,#4]
 2281 0008 3960     	 str r1,[r7]
1135:.././hal/sam3u1c/usart.c **** 	p_usart->US_IDR = ul_sources;
 2282              	 .loc 1 1135 18
 2283 000a 7B68     	 ldr r3,[r7,#4]
 2284 000c 3A68     	 ldr r2,[r7]
 2285 000e DA60     	 str r2,[r3,#12]
1136:.././hal/sam3u1c/usart.c **** }
 2286              	 .loc 1 1136 1
 2287 0010 00BF     	 nop
 2288 0012 0C37     	 adds r7,r7,#12
 2289              	.LCFI148:
 2290              	 .cfi_def_cfa_offset 4
 2291 0014 BD46     	 mov sp,r7
 2292              	.LCFI149:
 2293              	 .cfi_def_cfa_register 13
 2294              	 
 2295 0016 80BC     	 pop {r7}
 2296              	.LCFI150:
 2297              	 .cfi_restore 7
 2298              	 .cfi_def_cfa_offset 0
 2299 0018 7047     	 bx lr
 2300              	 .cfi_endproc
 2301              	.LFE95:
 2303              	 .section .text.usart_get_interrupt_mask,"ax",%progbits
 2304              	 .align 1
 2305              	 .global usart_get_interrupt_mask
 2306              	 .syntax unified
 2307              	 .thumb
 2308              	 .thumb_func
 2309              	 .fpu softvfp
 2311              	usart_get_interrupt_mask:
 2312              	.LFB96:
1137:.././hal/sam3u1c/usart.c **** 
1138:.././hal/sam3u1c/usart.c **** /**
1139:.././hal/sam3u1c/usart.c ****  * \brief Read USART interrupt mask.
1140:.././hal/sam3u1c/usart.c ****  *
1141:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART peripheral.
1142:.././hal/sam3u1c/usart.c ****  *
1143:.././hal/sam3u1c/usart.c ****  * \return The interrupt mask value.
1144:.././hal/sam3u1c/usart.c ****  */
1145:.././hal/sam3u1c/usart.c **** uint32_t usart_get_interrupt_mask(Usart *p_usart)
1146:.././hal/sam3u1c/usart.c **** {
 2313              	 .loc 1 1146 1
 2314              	 .cfi_startproc
 2315              	 
 2316              	 
 2317              	 
 2318 0000 80B4     	 push {r7}
 2319              	.LCFI151:
 2320              	 .cfi_def_cfa_offset 4
 2321              	 .cfi_offset 7,-4
 2322 0002 83B0     	 sub sp,sp,#12
 2323              	.LCFI152:
 2324              	 .cfi_def_cfa_offset 16
 2325 0004 00AF     	 add r7,sp,#0
 2326              	.LCFI153:
 2327              	 .cfi_def_cfa_register 7
 2328 0006 7860     	 str r0,[r7,#4]
1147:.././hal/sam3u1c/usart.c **** 	return p_usart->US_IMR;
 2329              	 .loc 1 1147 16
 2330 0008 7B68     	 ldr r3,[r7,#4]
 2331 000a 1B69     	 ldr r3,[r3,#16]
1148:.././hal/sam3u1c/usart.c **** }
 2332              	 .loc 1 1148 1
 2333 000c 1846     	 mov r0,r3
 2334 000e 0C37     	 adds r7,r7,#12
 2335              	.LCFI154:
 2336              	 .cfi_def_cfa_offset 4
 2337 0010 BD46     	 mov sp,r7
 2338              	.LCFI155:
 2339              	 .cfi_def_cfa_register 13
 2340              	 
 2341 0012 80BC     	 pop {r7}
 2342              	.LCFI156:
 2343              	 .cfi_restore 7
 2344              	 .cfi_def_cfa_offset 0
 2345 0014 7047     	 bx lr
 2346              	 .cfi_endproc
 2347              	.LFE96:
 2349              	 .section .text.usart_get_status,"ax",%progbits
 2350              	 .align 1
 2351              	 .global usart_get_status
 2352              	 .syntax unified
 2353              	 .thumb
 2354              	 .thumb_func
 2355              	 .fpu softvfp
 2357              	usart_get_status:
 2358              	.LFB97:
1149:.././hal/sam3u1c/usart.c **** 
1150:.././hal/sam3u1c/usart.c **** /**
1151:.././hal/sam3u1c/usart.c ****  * \brief Get current status.
1152:.././hal/sam3u1c/usart.c ****  *
1153:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1154:.././hal/sam3u1c/usart.c ****  *
1155:.././hal/sam3u1c/usart.c ****  * \return The current USART status.
1156:.././hal/sam3u1c/usart.c ****  */
1157:.././hal/sam3u1c/usart.c **** uint32_t usart_get_status(Usart *p_usart)
1158:.././hal/sam3u1c/usart.c **** {
 2359              	 .loc 1 1158 1
 2360              	 .cfi_startproc
 2361              	 
 2362              	 
 2363              	 
 2364 0000 80B4     	 push {r7}
 2365              	.LCFI157:
 2366              	 .cfi_def_cfa_offset 4
 2367              	 .cfi_offset 7,-4
 2368 0002 83B0     	 sub sp,sp,#12
 2369              	.LCFI158:
 2370              	 .cfi_def_cfa_offset 16
 2371 0004 00AF     	 add r7,sp,#0
 2372              	.LCFI159:
 2373              	 .cfi_def_cfa_register 7
 2374 0006 7860     	 str r0,[r7,#4]
1159:.././hal/sam3u1c/usart.c **** 	return p_usart->US_CSR;
 2375              	 .loc 1 1159 16
 2376 0008 7B68     	 ldr r3,[r7,#4]
 2377 000a 5B69     	 ldr r3,[r3,#20]
1160:.././hal/sam3u1c/usart.c **** }
 2378              	 .loc 1 1160 1
 2379 000c 1846     	 mov r0,r3
 2380 000e 0C37     	 adds r7,r7,#12
 2381              	.LCFI160:
 2382              	 .cfi_def_cfa_offset 4
 2383 0010 BD46     	 mov sp,r7
 2384              	.LCFI161:
 2385              	 .cfi_def_cfa_register 13
 2386              	 
 2387 0012 80BC     	 pop {r7}
 2388              	.LCFI162:
 2389              	 .cfi_restore 7
 2390              	 .cfi_def_cfa_offset 0
 2391 0014 7047     	 bx lr
 2392              	 .cfi_endproc
 2393              	.LFE97:
 2395              	 .section .text.usart_reset_status,"ax",%progbits
 2396              	 .align 1
 2397              	 .global usart_reset_status
 2398              	 .syntax unified
 2399              	 .thumb
 2400              	 .thumb_func
 2401              	 .fpu softvfp
 2403              	usart_reset_status:
 2404              	.LFB98:
1161:.././hal/sam3u1c/usart.c **** 
1162:.././hal/sam3u1c/usart.c **** /**
1163:.././hal/sam3u1c/usart.c ****  * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
1164:.././hal/sam3u1c/usart.c ****  *
1165:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1166:.././hal/sam3u1c/usart.c ****  */
1167:.././hal/sam3u1c/usart.c **** void usart_reset_status(Usart *p_usart)
1168:.././hal/sam3u1c/usart.c **** {
 2405              	 .loc 1 1168 1
 2406              	 .cfi_startproc
 2407              	 
 2408              	 
 2409              	 
 2410 0000 80B4     	 push {r7}
 2411              	.LCFI163:
 2412              	 .cfi_def_cfa_offset 4
 2413              	 .cfi_offset 7,-4
 2414 0002 83B0     	 sub sp,sp,#12
 2415              	.LCFI164:
 2416              	 .cfi_def_cfa_offset 16
 2417 0004 00AF     	 add r7,sp,#0
 2418              	.LCFI165:
 2419              	 .cfi_def_cfa_register 7
 2420 0006 7860     	 str r0,[r7,#4]
1169:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RSTSTA;
 2421              	 .loc 1 1169 17
 2422 0008 7B68     	 ldr r3,[r7,#4]
 2423 000a 4FF48072 	 mov r2,#256
 2424 000e 1A60     	 str r2,[r3]
1170:.././hal/sam3u1c/usart.c **** }
 2425              	 .loc 1 1170 1
 2426 0010 00BF     	 nop
 2427 0012 0C37     	 adds r7,r7,#12
 2428              	.LCFI166:
 2429              	 .cfi_def_cfa_offset 4
 2430 0014 BD46     	 mov sp,r7
 2431              	.LCFI167:
 2432              	 .cfi_def_cfa_register 13
 2433              	 
 2434 0016 80BC     	 pop {r7}
 2435              	.LCFI168:
 2436              	 .cfi_restore 7
 2437              	 .cfi_def_cfa_offset 0
 2438 0018 7047     	 bx lr
 2439              	 .cfi_endproc
 2440              	.LFE98:
 2442              	 .section .text.usart_start_tx_break,"ax",%progbits
 2443              	 .align 1
 2444              	 .global usart_start_tx_break
 2445              	 .syntax unified
 2446              	 .thumb
 2447              	 .thumb_func
 2448              	 .fpu softvfp
 2450              	usart_start_tx_break:
 2451              	.LFB99:
1171:.././hal/sam3u1c/usart.c **** 
1172:.././hal/sam3u1c/usart.c **** /**
1173:.././hal/sam3u1c/usart.c ****  * \brief Start transmission of a break.
1174:.././hal/sam3u1c/usart.c ****  *
1175:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1176:.././hal/sam3u1c/usart.c ****  */
1177:.././hal/sam3u1c/usart.c **** void usart_start_tx_break(Usart *p_usart)
1178:.././hal/sam3u1c/usart.c **** {
 2452              	 .loc 1 1178 1
 2453              	 .cfi_startproc
 2454              	 
 2455              	 
 2456              	 
 2457 0000 80B4     	 push {r7}
 2458              	.LCFI169:
 2459              	 .cfi_def_cfa_offset 4
 2460              	 .cfi_offset 7,-4
 2461 0002 83B0     	 sub sp,sp,#12
 2462              	.LCFI170:
 2463              	 .cfi_def_cfa_offset 16
 2464 0004 00AF     	 add r7,sp,#0
 2465              	.LCFI171:
 2466              	 .cfi_def_cfa_register 7
 2467 0006 7860     	 str r0,[r7,#4]
1179:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_STTBRK;
 2468              	 .loc 1 1179 17
 2469 0008 7B68     	 ldr r3,[r7,#4]
 2470 000a 4FF40072 	 mov r2,#512
 2471 000e 1A60     	 str r2,[r3]
1180:.././hal/sam3u1c/usart.c **** }
 2472              	 .loc 1 1180 1
 2473 0010 00BF     	 nop
 2474 0012 0C37     	 adds r7,r7,#12
 2475              	.LCFI172:
 2476              	 .cfi_def_cfa_offset 4
 2477 0014 BD46     	 mov sp,r7
 2478              	.LCFI173:
 2479              	 .cfi_def_cfa_register 13
 2480              	 
 2481 0016 80BC     	 pop {r7}
 2482              	.LCFI174:
 2483              	 .cfi_restore 7
 2484              	 .cfi_def_cfa_offset 0
 2485 0018 7047     	 bx lr
 2486              	 .cfi_endproc
 2487              	.LFE99:
 2489              	 .section .text.usart_stop_tx_break,"ax",%progbits
 2490              	 .align 1
 2491              	 .global usart_stop_tx_break
 2492              	 .syntax unified
 2493              	 .thumb
 2494              	 .thumb_func
 2495              	 .fpu softvfp
 2497              	usart_stop_tx_break:
 2498              	.LFB100:
1181:.././hal/sam3u1c/usart.c **** 
1182:.././hal/sam3u1c/usart.c **** /**
1183:.././hal/sam3u1c/usart.c ****  * \brief Stop transmission of a break.
1184:.././hal/sam3u1c/usart.c ****  *
1185:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1186:.././hal/sam3u1c/usart.c ****  */
1187:.././hal/sam3u1c/usart.c **** void usart_stop_tx_break(Usart *p_usart)
1188:.././hal/sam3u1c/usart.c **** {
 2499              	 .loc 1 1188 1
 2500              	 .cfi_startproc
 2501              	 
 2502              	 
 2503              	 
 2504 0000 80B4     	 push {r7}
 2505              	.LCFI175:
 2506              	 .cfi_def_cfa_offset 4
 2507              	 .cfi_offset 7,-4
 2508 0002 83B0     	 sub sp,sp,#12
 2509              	.LCFI176:
 2510              	 .cfi_def_cfa_offset 16
 2511 0004 00AF     	 add r7,sp,#0
 2512              	.LCFI177:
 2513              	 .cfi_def_cfa_register 7
 2514 0006 7860     	 str r0,[r7,#4]
1189:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_STPBRK;
 2515              	 .loc 1 1189 17
 2516 0008 7B68     	 ldr r3,[r7,#4]
 2517 000a 4FF48062 	 mov r2,#1024
 2518 000e 1A60     	 str r2,[r3]
1190:.././hal/sam3u1c/usart.c **** }
 2519              	 .loc 1 1190 1
 2520 0010 00BF     	 nop
 2521 0012 0C37     	 adds r7,r7,#12
 2522              	.LCFI178:
 2523              	 .cfi_def_cfa_offset 4
 2524 0014 BD46     	 mov sp,r7
 2525              	.LCFI179:
 2526              	 .cfi_def_cfa_register 13
 2527              	 
 2528 0016 80BC     	 pop {r7}
 2529              	.LCFI180:
 2530              	 .cfi_restore 7
 2531              	 .cfi_def_cfa_offset 0
 2532 0018 7047     	 bx lr
 2533              	 .cfi_endproc
 2534              	.LFE100:
 2536              	 .section .text.usart_start_rx_timeout,"ax",%progbits
 2537              	 .align 1
 2538              	 .global usart_start_rx_timeout
 2539              	 .syntax unified
 2540              	 .thumb
 2541              	 .thumb_func
 2542              	 .fpu softvfp
 2544              	usart_start_rx_timeout:
 2545              	.LFB101:
1191:.././hal/sam3u1c/usart.c **** 
1192:.././hal/sam3u1c/usart.c **** /**
1193:.././hal/sam3u1c/usart.c ****  * \brief Start waiting for a character before clocking the timeout count.
1194:.././hal/sam3u1c/usart.c ****  * Reset the status bit TIMEOUT in US_CSR.
1195:.././hal/sam3u1c/usart.c ****  *
1196:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1197:.././hal/sam3u1c/usart.c ****  */
1198:.././hal/sam3u1c/usart.c **** void usart_start_rx_timeout(Usart *p_usart)
1199:.././hal/sam3u1c/usart.c **** {
 2546              	 .loc 1 1199 1
 2547              	 .cfi_startproc
 2548              	 
 2549              	 
 2550              	 
 2551 0000 80B4     	 push {r7}
 2552              	.LCFI181:
 2553              	 .cfi_def_cfa_offset 4
 2554              	 .cfi_offset 7,-4
 2555 0002 83B0     	 sub sp,sp,#12
 2556              	.LCFI182:
 2557              	 .cfi_def_cfa_offset 16
 2558 0004 00AF     	 add r7,sp,#0
 2559              	.LCFI183:
 2560              	 .cfi_def_cfa_register 7
 2561 0006 7860     	 str r0,[r7,#4]
1200:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_STTTO;
 2562              	 .loc 1 1200 17
 2563 0008 7B68     	 ldr r3,[r7,#4]
 2564 000a 4FF40062 	 mov r2,#2048
 2565 000e 1A60     	 str r2,[r3]
1201:.././hal/sam3u1c/usart.c **** }
 2566              	 .loc 1 1201 1
 2567 0010 00BF     	 nop
 2568 0012 0C37     	 adds r7,r7,#12
 2569              	.LCFI184:
 2570              	 .cfi_def_cfa_offset 4
 2571 0014 BD46     	 mov sp,r7
 2572              	.LCFI185:
 2573              	 .cfi_def_cfa_register 13
 2574              	 
 2575 0016 80BC     	 pop {r7}
 2576              	.LCFI186:
 2577              	 .cfi_restore 7
 2578              	 .cfi_def_cfa_offset 0
 2579 0018 7047     	 bx lr
 2580              	 .cfi_endproc
 2581              	.LFE101:
 2583              	 .section .text.usart_send_address,"ax",%progbits
 2584              	 .align 1
 2585              	 .global usart_send_address
 2586              	 .syntax unified
 2587              	 .thumb
 2588              	 .thumb_func
 2589              	 .fpu softvfp
 2591              	usart_send_address:
 2592              	.LFB102:
1202:.././hal/sam3u1c/usart.c **** 
1203:.././hal/sam3u1c/usart.c **** /**
1204:.././hal/sam3u1c/usart.c ****  * \brief In Multidrop mode only, the next character written to the US_THR
1205:.././hal/sam3u1c/usart.c ****  * is sent with the address bit set.
1206:.././hal/sam3u1c/usart.c ****  *
1207:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1208:.././hal/sam3u1c/usart.c ****  * \param ul_addr The address to be sent out.
1209:.././hal/sam3u1c/usart.c ****  *
1210:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
1211:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
1212:.././hal/sam3u1c/usart.c ****  */
1213:.././hal/sam3u1c/usart.c **** uint32_t usart_send_address(Usart *p_usart, uint32_t ul_addr)
1214:.././hal/sam3u1c/usart.c **** {
 2593              	 .loc 1 1214 1
 2594              	 .cfi_startproc
 2595              	 
 2596              	 
 2597 0000 80B5     	 push {r7,lr}
 2598              	.LCFI187:
 2599              	 .cfi_def_cfa_offset 8
 2600              	 .cfi_offset 7,-8
 2601              	 .cfi_offset 14,-4
 2602 0002 82B0     	 sub sp,sp,#8
 2603              	.LCFI188:
 2604              	 .cfi_def_cfa_offset 16
 2605 0004 00AF     	 add r7,sp,#0
 2606              	.LCFI189:
 2607              	 .cfi_def_cfa_register 7
 2608 0006 7860     	 str r0,[r7,#4]
 2609 0008 3960     	 str r1,[r7]
1215:.././hal/sam3u1c/usart.c **** 	if ((p_usart->US_MR & US_MR_PAR_MULTIDROP) != US_MR_PAR_MULTIDROP) {
 2610              	 .loc 1 1215 14
 2611 000a 7B68     	 ldr r3,[r7,#4]
 2612 000c 5B68     	 ldr r3,[r3,#4]
 2613              	 .loc 1 1215 22
 2614 000e 03F44063 	 and r3,r3,#3072
 2615              	 .loc 1 1215 5
 2616 0012 B3F5406F 	 cmp r3,#3072
 2617 0016 01D0     	 beq .L124
1216:.././hal/sam3u1c/usart.c **** 		return 1;
 2618              	 .loc 1 1216 10
 2619 0018 0123     	 movs r3,#1
 2620 001a 0DE0     	 b .L125
 2621              	.L124:
1217:.././hal/sam3u1c/usart.c **** 	}
1218:.././hal/sam3u1c/usart.c **** 
1219:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_SENDA;
 2622              	 .loc 1 1219 17
 2623 001c 7B68     	 ldr r3,[r7,#4]
 2624 001e 4FF48052 	 mov r2,#4096
 2625 0022 1A60     	 str r2,[r3]
1220:.././hal/sam3u1c/usart.c **** 
1221:.././hal/sam3u1c/usart.c **** 	if (usart_write(p_usart, ul_addr)) {
 2626              	 .loc 1 1221 6
 2627 0024 3968     	 ldr r1,[r7]
 2628 0026 7868     	 ldr r0,[r7,#4]
 2629 0028 054B     	 ldr r3,.L127
 2630 002a 9847     	 blx r3
 2631              	.LVL22:
 2632 002c 0346     	 mov r3,r0
 2633              	 .loc 1 1221 5
 2634 002e 002B     	 cmp r3,#0
 2635 0030 01D0     	 beq .L126
1222:.././hal/sam3u1c/usart.c **** 		return 1;
 2636              	 .loc 1 1222 10
 2637 0032 0123     	 movs r3,#1
 2638 0034 00E0     	 b .L125
 2639              	.L126:
1223:.././hal/sam3u1c/usart.c **** 	} else {
1224:.././hal/sam3u1c/usart.c **** 		return 0;
 2640              	 .loc 1 1224 10
 2641 0036 0023     	 movs r3,#0
 2642              	.L125:
1225:.././hal/sam3u1c/usart.c **** 	}
1226:.././hal/sam3u1c/usart.c **** }
 2643              	 .loc 1 1226 1
 2644 0038 1846     	 mov r0,r3
 2645 003a 0837     	 adds r7,r7,#8
 2646              	.LCFI190:
 2647              	 .cfi_def_cfa_offset 8
 2648 003c BD46     	 mov sp,r7
 2649              	.LCFI191:
 2650              	 .cfi_def_cfa_register 13
 2651              	 
 2652 003e 80BD     	 pop {r7,pc}
 2653              	.L128:
 2654              	 .align 2
 2655              	.L127:
 2656 0040 00000000 	 .word usart_write
 2657              	 .cfi_endproc
 2658              	.LFE102:
 2660              	 .section .text.usart_reset_iterations,"ax",%progbits
 2661              	 .align 1
 2662              	 .global usart_reset_iterations
 2663              	 .syntax unified
 2664              	 .thumb
 2665              	 .thumb_func
 2666              	 .fpu softvfp
 2668              	usart_reset_iterations:
 2669              	.LFB103:
1227:.././hal/sam3u1c/usart.c **** 
1228:.././hal/sam3u1c/usart.c **** /**
1229:.././hal/sam3u1c/usart.c ****  * \brief Reset the ITERATION in US_CSR when the ISO7816 mode is enabled.
1230:.././hal/sam3u1c/usart.c ****  *
1231:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1232:.././hal/sam3u1c/usart.c ****  */
1233:.././hal/sam3u1c/usart.c **** void usart_reset_iterations(Usart *p_usart)
1234:.././hal/sam3u1c/usart.c **** {
 2670              	 .loc 1 1234 1
 2671              	 .cfi_startproc
 2672              	 
 2673              	 
 2674              	 
 2675 0000 80B4     	 push {r7}
 2676              	.LCFI192:
 2677              	 .cfi_def_cfa_offset 4
 2678              	 .cfi_offset 7,-4
 2679 0002 83B0     	 sub sp,sp,#12
 2680              	.LCFI193:
 2681              	 .cfi_def_cfa_offset 16
 2682 0004 00AF     	 add r7,sp,#0
 2683              	.LCFI194:
 2684              	 .cfi_def_cfa_register 7
 2685 0006 7860     	 str r0,[r7,#4]
1235:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RSTIT;
 2686              	 .loc 1 1235 17
 2687 0008 7B68     	 ldr r3,[r7,#4]
 2688 000a 4FF40052 	 mov r2,#8192
 2689 000e 1A60     	 str r2,[r3]
1236:.././hal/sam3u1c/usart.c **** }
 2690              	 .loc 1 1236 1
 2691 0010 00BF     	 nop
 2692 0012 0C37     	 adds r7,r7,#12
 2693              	.LCFI195:
 2694              	 .cfi_def_cfa_offset 4
 2695 0014 BD46     	 mov sp,r7
 2696              	.LCFI196:
 2697              	 .cfi_def_cfa_register 13
 2698              	 
 2699 0016 80BC     	 pop {r7}
 2700              	.LCFI197:
 2701              	 .cfi_restore 7
 2702              	 .cfi_def_cfa_offset 0
 2703 0018 7047     	 bx lr
 2704              	 .cfi_endproc
 2705              	.LFE103:
 2707              	 .section .text.usart_reset_nack,"ax",%progbits
 2708              	 .align 1
 2709              	 .global usart_reset_nack
 2710              	 .syntax unified
 2711              	 .thumb
 2712              	 .thumb_func
 2713              	 .fpu softvfp
 2715              	usart_reset_nack:
 2716              	.LFB104:
1237:.././hal/sam3u1c/usart.c **** 
1238:.././hal/sam3u1c/usart.c **** /**
1239:.././hal/sam3u1c/usart.c ****  * \brief Reset NACK in US_CSR.
1240:.././hal/sam3u1c/usart.c ****  *
1241:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1242:.././hal/sam3u1c/usart.c ****  */
1243:.././hal/sam3u1c/usart.c **** void usart_reset_nack(Usart *p_usart)
1244:.././hal/sam3u1c/usart.c **** {
 2717              	 .loc 1 1244 1
 2718              	 .cfi_startproc
 2719              	 
 2720              	 
 2721              	 
 2722 0000 80B4     	 push {r7}
 2723              	.LCFI198:
 2724              	 .cfi_def_cfa_offset 4
 2725              	 .cfi_offset 7,-4
 2726 0002 83B0     	 sub sp,sp,#12
 2727              	.LCFI199:
 2728              	 .cfi_def_cfa_offset 16
 2729 0004 00AF     	 add r7,sp,#0
 2730              	.LCFI200:
 2731              	 .cfi_def_cfa_register 7
 2732 0006 7860     	 str r0,[r7,#4]
1245:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RSTNACK;
 2733              	 .loc 1 1245 17
 2734 0008 7B68     	 ldr r3,[r7,#4]
 2735 000a 4FF48042 	 mov r2,#16384
 2736 000e 1A60     	 str r2,[r3]
1246:.././hal/sam3u1c/usart.c **** }
 2737              	 .loc 1 1246 1
 2738 0010 00BF     	 nop
 2739 0012 0C37     	 adds r7,r7,#12
 2740              	.LCFI201:
 2741              	 .cfi_def_cfa_offset 4
 2742 0014 BD46     	 mov sp,r7
 2743              	.LCFI202:
 2744              	 .cfi_def_cfa_register 13
 2745              	 
 2746 0016 80BC     	 pop {r7}
 2747              	.LCFI203:
 2748              	 .cfi_restore 7
 2749              	 .cfi_def_cfa_offset 0
 2750 0018 7047     	 bx lr
 2751              	 .cfi_endproc
 2752              	.LFE104:
 2754              	 .section .text.usart_restart_rx_timeout,"ax",%progbits
 2755              	 .align 1
 2756              	 .global usart_restart_rx_timeout
 2757              	 .syntax unified
 2758              	 .thumb
 2759              	 .thumb_func
 2760              	 .fpu softvfp
 2762              	usart_restart_rx_timeout:
 2763              	.LFB105:
1247:.././hal/sam3u1c/usart.c **** 
1248:.././hal/sam3u1c/usart.c **** /**
1249:.././hal/sam3u1c/usart.c ****  * \brief Restart the receive timeout.
1250:.././hal/sam3u1c/usart.c ****  *
1251:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1252:.././hal/sam3u1c/usart.c ****  */
1253:.././hal/sam3u1c/usart.c **** void usart_restart_rx_timeout(Usart *p_usart)
1254:.././hal/sam3u1c/usart.c **** {
 2764              	 .loc 1 1254 1
 2765              	 .cfi_startproc
 2766              	 
 2767              	 
 2768              	 
 2769 0000 80B4     	 push {r7}
 2770              	.LCFI204:
 2771              	 .cfi_def_cfa_offset 4
 2772              	 .cfi_offset 7,-4
 2773 0002 83B0     	 sub sp,sp,#12
 2774              	.LCFI205:
 2775              	 .cfi_def_cfa_offset 16
 2776 0004 00AF     	 add r7,sp,#0
 2777              	.LCFI206:
 2778              	 .cfi_def_cfa_register 7
 2779 0006 7860     	 str r0,[r7,#4]
1255:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RETTO;
 2780              	 .loc 1 1255 17
 2781 0008 7B68     	 ldr r3,[r7,#4]
 2782 000a 4FF40042 	 mov r2,#32768
 2783 000e 1A60     	 str r2,[r3]
1256:.././hal/sam3u1c/usart.c **** }
 2784              	 .loc 1 1256 1
 2785 0010 00BF     	 nop
 2786 0012 0C37     	 adds r7,r7,#12
 2787              	.LCFI207:
 2788              	 .cfi_def_cfa_offset 4
 2789 0014 BD46     	 mov sp,r7
 2790              	.LCFI208:
 2791              	 .cfi_def_cfa_register 13
 2792              	 
 2793 0016 80BC     	 pop {r7}
 2794              	.LCFI209:
 2795              	 .cfi_restore 7
 2796              	 .cfi_def_cfa_offset 0
 2797 0018 7047     	 bx lr
 2798              	 .cfi_endproc
 2799              	.LFE105:
 2801              	 .section .text.usart_drive_DTR_pin_low,"ax",%progbits
 2802              	 .align 1
 2803              	 .global usart_drive_DTR_pin_low
 2804              	 .syntax unified
 2805              	 .thumb
 2806              	 .thumb_func
 2807              	 .fpu softvfp
 2809              	usart_drive_DTR_pin_low:
 2810              	.LFB106:
1257:.././hal/sam3u1c/usart.c **** 
1258:.././hal/sam3u1c/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
1259:.././hal/sam3u1c/usart.c **** 
1260:.././hal/sam3u1c/usart.c **** /**
1261:.././hal/sam3u1c/usart.c ****  * \brief Drive the pin DTR to 0.
1262:.././hal/sam3u1c/usart.c ****  *
1263:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1264:.././hal/sam3u1c/usart.c ****  */
1265:.././hal/sam3u1c/usart.c **** void usart_drive_DTR_pin_low(Usart *p_usart)
1266:.././hal/sam3u1c/usart.c **** {
 2811              	 .loc 1 1266 1
 2812              	 .cfi_startproc
 2813              	 
 2814              	 
 2815              	 
 2816 0000 80B4     	 push {r7}
 2817              	.LCFI210:
 2818              	 .cfi_def_cfa_offset 4
 2819              	 .cfi_offset 7,-4
 2820 0002 83B0     	 sub sp,sp,#12
 2821              	.LCFI211:
 2822              	 .cfi_def_cfa_offset 16
 2823 0004 00AF     	 add r7,sp,#0
 2824              	.LCFI212:
 2825              	 .cfi_def_cfa_register 7
 2826 0006 7860     	 str r0,[r7,#4]
1267:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_DTREN;
 2827              	 .loc 1 1267 17
 2828 0008 7B68     	 ldr r3,[r7,#4]
 2829 000a 4FF48032 	 mov r2,#65536
 2830 000e 1A60     	 str r2,[r3]
1268:.././hal/sam3u1c/usart.c **** }
 2831              	 .loc 1 1268 1
 2832 0010 00BF     	 nop
 2833 0012 0C37     	 adds r7,r7,#12
 2834              	.LCFI213:
 2835              	 .cfi_def_cfa_offset 4
 2836 0014 BD46     	 mov sp,r7
 2837              	.LCFI214:
 2838              	 .cfi_def_cfa_register 13
 2839              	 
 2840 0016 80BC     	 pop {r7}
 2841              	.LCFI215:
 2842              	 .cfi_restore 7
 2843              	 .cfi_def_cfa_offset 0
 2844 0018 7047     	 bx lr
 2845              	 .cfi_endproc
 2846              	.LFE106:
 2848              	 .section .text.usart_drive_DTR_pin_high,"ax",%progbits
 2849              	 .align 1
 2850              	 .global usart_drive_DTR_pin_high
 2851              	 .syntax unified
 2852              	 .thumb
 2853              	 .thumb_func
 2854              	 .fpu softvfp
 2856              	usart_drive_DTR_pin_high:
 2857              	.LFB107:
1269:.././hal/sam3u1c/usart.c **** 
1270:.././hal/sam3u1c/usart.c **** /**
1271:.././hal/sam3u1c/usart.c ****  * \brief Drive the pin DTR to 1.
1272:.././hal/sam3u1c/usart.c ****  *
1273:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1274:.././hal/sam3u1c/usart.c ****  */
1275:.././hal/sam3u1c/usart.c **** void usart_drive_DTR_pin_high(Usart *p_usart)
1276:.././hal/sam3u1c/usart.c **** {
 2858              	 .loc 1 1276 1
 2859              	 .cfi_startproc
 2860              	 
 2861              	 
 2862              	 
 2863 0000 80B4     	 push {r7}
 2864              	.LCFI216:
 2865              	 .cfi_def_cfa_offset 4
 2866              	 .cfi_offset 7,-4
 2867 0002 83B0     	 sub sp,sp,#12
 2868              	.LCFI217:
 2869              	 .cfi_def_cfa_offset 16
 2870 0004 00AF     	 add r7,sp,#0
 2871              	.LCFI218:
 2872              	 .cfi_def_cfa_register 7
 2873 0006 7860     	 str r0,[r7,#4]
1277:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_DTRDIS;
 2874              	 .loc 1 1277 17
 2875 0008 7B68     	 ldr r3,[r7,#4]
 2876 000a 4FF40032 	 mov r2,#131072
 2877 000e 1A60     	 str r2,[r3]
1278:.././hal/sam3u1c/usart.c **** }
 2878              	 .loc 1 1278 1
 2879 0010 00BF     	 nop
 2880 0012 0C37     	 adds r7,r7,#12
 2881              	.LCFI219:
 2882              	 .cfi_def_cfa_offset 4
 2883 0014 BD46     	 mov sp,r7
 2884              	.LCFI220:
 2885              	 .cfi_def_cfa_register 13
 2886              	 
 2887 0016 80BC     	 pop {r7}
 2888              	.LCFI221:
 2889              	 .cfi_restore 7
 2890              	 .cfi_def_cfa_offset 0
 2891 0018 7047     	 bx lr
 2892              	 .cfi_endproc
 2893              	.LFE107:
 2895              	 .section .text.usart_drive_RTS_pin_low,"ax",%progbits
 2896              	 .align 1
 2897              	 .global usart_drive_RTS_pin_low
 2898              	 .syntax unified
 2899              	 .thumb
 2900              	 .thumb_func
 2901              	 .fpu softvfp
 2903              	usart_drive_RTS_pin_low:
 2904              	.LFB108:
1279:.././hal/sam3u1c/usart.c **** 
1280:.././hal/sam3u1c/usart.c **** #endif
1281:.././hal/sam3u1c/usart.c **** 
1282:.././hal/sam3u1c/usart.c **** /**
1283:.././hal/sam3u1c/usart.c ****  * \brief Drive the pin RTS to 0.
1284:.././hal/sam3u1c/usart.c ****  *
1285:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1286:.././hal/sam3u1c/usart.c ****  */
1287:.././hal/sam3u1c/usart.c **** void usart_drive_RTS_pin_low(Usart *p_usart)
1288:.././hal/sam3u1c/usart.c **** {
 2905              	 .loc 1 1288 1
 2906              	 .cfi_startproc
 2907              	 
 2908              	 
 2909              	 
 2910 0000 80B4     	 push {r7}
 2911              	.LCFI222:
 2912              	 .cfi_def_cfa_offset 4
 2913              	 .cfi_offset 7,-4
 2914 0002 83B0     	 sub sp,sp,#12
 2915              	.LCFI223:
 2916              	 .cfi_def_cfa_offset 16
 2917 0004 00AF     	 add r7,sp,#0
 2918              	.LCFI224:
 2919              	 .cfi_def_cfa_register 7
 2920 0006 7860     	 str r0,[r7,#4]
1289:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RTSEN;
 2921              	 .loc 1 1289 17
 2922 0008 7B68     	 ldr r3,[r7,#4]
 2923 000a 4FF48022 	 mov r2,#262144
 2924 000e 1A60     	 str r2,[r3]
1290:.././hal/sam3u1c/usart.c **** }
 2925              	 .loc 1 1290 1
 2926 0010 00BF     	 nop
 2927 0012 0C37     	 adds r7,r7,#12
 2928              	.LCFI225:
 2929              	 .cfi_def_cfa_offset 4
 2930 0014 BD46     	 mov sp,r7
 2931              	.LCFI226:
 2932              	 .cfi_def_cfa_register 13
 2933              	 
 2934 0016 80BC     	 pop {r7}
 2935              	.LCFI227:
 2936              	 .cfi_restore 7
 2937              	 .cfi_def_cfa_offset 0
 2938 0018 7047     	 bx lr
 2939              	 .cfi_endproc
 2940              	.LFE108:
 2942              	 .section .text.usart_drive_RTS_pin_high,"ax",%progbits
 2943              	 .align 1
 2944              	 .global usart_drive_RTS_pin_high
 2945              	 .syntax unified
 2946              	 .thumb
 2947              	 .thumb_func
 2948              	 .fpu softvfp
 2950              	usart_drive_RTS_pin_high:
 2951              	.LFB109:
1291:.././hal/sam3u1c/usart.c **** 
1292:.././hal/sam3u1c/usart.c **** /**
1293:.././hal/sam3u1c/usart.c ****  * \brief Drive the pin RTS to 1.
1294:.././hal/sam3u1c/usart.c ****  *
1295:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1296:.././hal/sam3u1c/usart.c ****  */
1297:.././hal/sam3u1c/usart.c **** void usart_drive_RTS_pin_high(Usart *p_usart)
1298:.././hal/sam3u1c/usart.c **** {
 2952              	 .loc 1 1298 1
 2953              	 .cfi_startproc
 2954              	 
 2955              	 
 2956              	 
 2957 0000 80B4     	 push {r7}
 2958              	.LCFI228:
 2959              	 .cfi_def_cfa_offset 4
 2960              	 .cfi_offset 7,-4
 2961 0002 83B0     	 sub sp,sp,#12
 2962              	.LCFI229:
 2963              	 .cfi_def_cfa_offset 16
 2964 0004 00AF     	 add r7,sp,#0
 2965              	.LCFI230:
 2966              	 .cfi_def_cfa_register 7
 2967 0006 7860     	 str r0,[r7,#4]
1299:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RTSDIS;
 2968              	 .loc 1 1299 17
 2969 0008 7B68     	 ldr r3,[r7,#4]
 2970 000a 4FF40022 	 mov r2,#524288
 2971 000e 1A60     	 str r2,[r3]
1300:.././hal/sam3u1c/usart.c **** }
 2972              	 .loc 1 1300 1
 2973 0010 00BF     	 nop
 2974 0012 0C37     	 adds r7,r7,#12
 2975              	.LCFI231:
 2976              	 .cfi_def_cfa_offset 4
 2977 0014 BD46     	 mov sp,r7
 2978              	.LCFI232:
 2979              	 .cfi_def_cfa_register 13
 2980              	 
 2981 0016 80BC     	 pop {r7}
 2982              	.LCFI233:
 2983              	 .cfi_restore 7
 2984              	 .cfi_def_cfa_offset 0
 2985 0018 7047     	 bx lr
 2986              	 .cfi_endproc
 2987              	.LFE109:
 2989              	 .section .text.usart_spi_force_chip_select,"ax",%progbits
 2990              	 .align 1
 2991              	 .global usart_spi_force_chip_select
 2992              	 .syntax unified
 2993              	 .thumb
 2994              	 .thumb_func
 2995              	 .fpu softvfp
 2997              	usart_spi_force_chip_select:
 2998              	.LFB110:
1301:.././hal/sam3u1c/usart.c **** 
1302:.././hal/sam3u1c/usart.c **** /**
1303:.././hal/sam3u1c/usart.c ****  * \brief Drive the slave select line NSS (RTS pin) to 0 in SPI master mode.
1304:.././hal/sam3u1c/usart.c ****  *
1305:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1306:.././hal/sam3u1c/usart.c ****  */
1307:.././hal/sam3u1c/usart.c **** void usart_spi_force_chip_select(Usart *p_usart)
1308:.././hal/sam3u1c/usart.c **** {
 2999              	 .loc 1 1308 1
 3000              	 .cfi_startproc
 3001              	 
 3002              	 
 3003              	 
 3004 0000 80B4     	 push {r7}
 3005              	.LCFI234:
 3006              	 .cfi_def_cfa_offset 4
 3007              	 .cfi_offset 7,-4
 3008 0002 83B0     	 sub sp,sp,#12
 3009              	.LCFI235:
 3010              	 .cfi_def_cfa_offset 16
 3011 0004 00AF     	 add r7,sp,#0
 3012              	.LCFI236:
 3013              	 .cfi_def_cfa_register 7
 3014 0006 7860     	 str r0,[r7,#4]
1309:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_FCS;
 3015              	 .loc 1 1309 17
 3016 0008 7B68     	 ldr r3,[r7,#4]
 3017 000a 4FF48022 	 mov r2,#262144
 3018 000e 1A60     	 str r2,[r3]
1310:.././hal/sam3u1c/usart.c **** }
 3019              	 .loc 1 1310 1
 3020 0010 00BF     	 nop
 3021 0012 0C37     	 adds r7,r7,#12
 3022              	.LCFI237:
 3023              	 .cfi_def_cfa_offset 4
 3024 0014 BD46     	 mov sp,r7
 3025              	.LCFI238:
 3026              	 .cfi_def_cfa_register 13
 3027              	 
 3028 0016 80BC     	 pop {r7}
 3029              	.LCFI239:
 3030              	 .cfi_restore 7
 3031              	 .cfi_def_cfa_offset 0
 3032 0018 7047     	 bx lr
 3033              	 .cfi_endproc
 3034              	.LFE110:
 3036              	 .section .text.usart_spi_release_chip_select,"ax",%progbits
 3037              	 .align 1
 3038              	 .global usart_spi_release_chip_select
 3039              	 .syntax unified
 3040              	 .thumb
 3041              	 .thumb_func
 3042              	 .fpu softvfp
 3044              	usart_spi_release_chip_select:
 3045              	.LFB111:
1311:.././hal/sam3u1c/usart.c **** 
1312:.././hal/sam3u1c/usart.c **** /**
1313:.././hal/sam3u1c/usart.c ****  * \brief Drive the slave select line NSS (RTS pin) to 1 in SPI master mode.
1314:.././hal/sam3u1c/usart.c ****  *
1315:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1316:.././hal/sam3u1c/usart.c ****  */
1317:.././hal/sam3u1c/usart.c **** void usart_spi_release_chip_select(Usart *p_usart)
1318:.././hal/sam3u1c/usart.c **** {
 3046              	 .loc 1 1318 1
 3047              	 .cfi_startproc
 3048              	 
 3049              	 
 3050              	 
 3051 0000 80B4     	 push {r7}
 3052              	.LCFI240:
 3053              	 .cfi_def_cfa_offset 4
 3054              	 .cfi_offset 7,-4
 3055 0002 83B0     	 sub sp,sp,#12
 3056              	.LCFI241:
 3057              	 .cfi_def_cfa_offset 16
 3058 0004 00AF     	 add r7,sp,#0
 3059              	.LCFI242:
 3060              	 .cfi_def_cfa_register 7
 3061 0006 7860     	 str r0,[r7,#4]
1319:.././hal/sam3u1c/usart.c **** 	p_usart->US_CR = US_CR_RCS;
 3062              	 .loc 1 1319 17
 3063 0008 7B68     	 ldr r3,[r7,#4]
 3064 000a 4FF40022 	 mov r2,#524288
 3065 000e 1A60     	 str r2,[r3]
1320:.././hal/sam3u1c/usart.c **** }
 3066              	 .loc 1 1320 1
 3067 0010 00BF     	 nop
 3068 0012 0C37     	 adds r7,r7,#12
 3069              	.LCFI243:
 3070              	 .cfi_def_cfa_offset 4
 3071 0014 BD46     	 mov sp,r7
 3072              	.LCFI244:
 3073              	 .cfi_def_cfa_register 13
 3074              	 
 3075 0016 80BC     	 pop {r7}
 3076              	.LCFI245:
 3077              	 .cfi_restore 7
 3078              	 .cfi_def_cfa_offset 0
 3079 0018 7047     	 bx lr
 3080              	 .cfi_endproc
 3081              	.LFE111:
 3083              	 .section .text.usart_is_tx_ready,"ax",%progbits
 3084              	 .align 1
 3085              	 .global usart_is_tx_ready
 3086              	 .syntax unified
 3087              	 .thumb
 3088              	 .thumb_func
 3089              	 .fpu softvfp
 3091              	usart_is_tx_ready:
 3092              	.LFB112:
1321:.././hal/sam3u1c/usart.c **** 
1322:.././hal/sam3u1c/usart.c **** /**
1323:.././hal/sam3u1c/usart.c ****  * \brief Check if Transmit is Ready.
1324:.././hal/sam3u1c/usart.c ****  * Check if data have been loaded in USART_THR and are waiting to be loaded
1325:.././hal/sam3u1c/usart.c ****  * into the Transmit Shift Register (TSR).
1326:.././hal/sam3u1c/usart.c ****  *
1327:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1328:.././hal/sam3u1c/usart.c ****  *
1329:.././hal/sam3u1c/usart.c ****  * \retval 1 No data is in the Transmit Holding Register.
1330:.././hal/sam3u1c/usart.c ****  * \retval 0 There is data in the Transmit Holding Register.
1331:.././hal/sam3u1c/usart.c ****  */
1332:.././hal/sam3u1c/usart.c **** uint32_t usart_is_tx_ready(Usart *p_usart)
1333:.././hal/sam3u1c/usart.c **** {
 3093              	 .loc 1 1333 1
 3094              	 .cfi_startproc
 3095              	 
 3096              	 
 3097              	 
 3098 0000 80B4     	 push {r7}
 3099              	.LCFI246:
 3100              	 .cfi_def_cfa_offset 4
 3101              	 .cfi_offset 7,-4
 3102 0002 83B0     	 sub sp,sp,#12
 3103              	.LCFI247:
 3104              	 .cfi_def_cfa_offset 16
 3105 0004 00AF     	 add r7,sp,#0
 3106              	.LCFI248:
 3107              	 .cfi_def_cfa_register 7
 3108 0006 7860     	 str r0,[r7,#4]
1334:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_TXRDY) > 0;
 3109              	 .loc 1 1334 17
 3110 0008 7B68     	 ldr r3,[r7,#4]
 3111 000a 5B69     	 ldr r3,[r3,#20]
 3112              	 .loc 1 1334 26
 3113 000c 03F00203 	 and r3,r3,#2
 3114              	 .loc 1 1334 42
 3115 0010 002B     	 cmp r3,#0
 3116 0012 14BF     	 ite ne
 3117 0014 0123     	 movne r3,#1
 3118 0016 0023     	 moveq r3,#0
 3119 0018 DBB2     	 uxtb r3,r3
1335:.././hal/sam3u1c/usart.c **** }
 3120              	 .loc 1 1335 1
 3121 001a 1846     	 mov r0,r3
 3122 001c 0C37     	 adds r7,r7,#12
 3123              	.LCFI249:
 3124              	 .cfi_def_cfa_offset 4
 3125 001e BD46     	 mov sp,r7
 3126              	.LCFI250:
 3127              	 .cfi_def_cfa_register 13
 3128              	 
 3129 0020 80BC     	 pop {r7}
 3130              	.LCFI251:
 3131              	 .cfi_restore 7
 3132              	 .cfi_def_cfa_offset 0
 3133 0022 7047     	 bx lr
 3134              	 .cfi_endproc
 3135              	.LFE112:
 3137              	 .section .text.usart_is_tx_empty,"ax",%progbits
 3138              	 .align 1
 3139              	 .global usart_is_tx_empty
 3140              	 .syntax unified
 3141              	 .thumb
 3142              	 .thumb_func
 3143              	 .fpu softvfp
 3145              	usart_is_tx_empty:
 3146              	.LFB113:
1336:.././hal/sam3u1c/usart.c **** 
1337:.././hal/sam3u1c/usart.c **** /**
1338:.././hal/sam3u1c/usart.c ****  * \brief Check if Transmit Holding Register is empty.
1339:.././hal/sam3u1c/usart.c ****  * Check if the last data written in USART_THR have been loaded in TSR and the
1340:.././hal/sam3u1c/usart.c ****  * last data loaded in TSR have been transmitted.
1341:.././hal/sam3u1c/usart.c ****  *
1342:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1343:.././hal/sam3u1c/usart.c ****  *
1344:.././hal/sam3u1c/usart.c ****  * \retval 1 Transmitter is empty.
1345:.././hal/sam3u1c/usart.c ****  * \retval 0 Transmitter is not empty.
1346:.././hal/sam3u1c/usart.c ****  */
1347:.././hal/sam3u1c/usart.c **** uint32_t usart_is_tx_empty(Usart *p_usart)
1348:.././hal/sam3u1c/usart.c **** {
 3147              	 .loc 1 1348 1
 3148              	 .cfi_startproc
 3149              	 
 3150              	 
 3151              	 
 3152 0000 80B4     	 push {r7}
 3153              	.LCFI252:
 3154              	 .cfi_def_cfa_offset 4
 3155              	 .cfi_offset 7,-4
 3156 0002 83B0     	 sub sp,sp,#12
 3157              	.LCFI253:
 3158              	 .cfi_def_cfa_offset 16
 3159 0004 00AF     	 add r7,sp,#0
 3160              	.LCFI254:
 3161              	 .cfi_def_cfa_register 7
 3162 0006 7860     	 str r0,[r7,#4]
1349:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
 3163              	 .loc 1 1349 17
 3164 0008 7B68     	 ldr r3,[r7,#4]
 3165 000a 5B69     	 ldr r3,[r3,#20]
 3166              	 .loc 1 1349 26
 3167 000c 03F40073 	 and r3,r3,#512
 3168              	 .loc 1 1349 44
 3169 0010 002B     	 cmp r3,#0
 3170 0012 14BF     	 ite ne
 3171 0014 0123     	 movne r3,#1
 3172 0016 0023     	 moveq r3,#0
 3173 0018 DBB2     	 uxtb r3,r3
1350:.././hal/sam3u1c/usart.c **** }
 3174              	 .loc 1 1350 1
 3175 001a 1846     	 mov r0,r3
 3176 001c 0C37     	 adds r7,r7,#12
 3177              	.LCFI255:
 3178              	 .cfi_def_cfa_offset 4
 3179 001e BD46     	 mov sp,r7
 3180              	.LCFI256:
 3181              	 .cfi_def_cfa_register 13
 3182              	 
 3183 0020 80BC     	 pop {r7}
 3184              	.LCFI257:
 3185              	 .cfi_restore 7
 3186              	 .cfi_def_cfa_offset 0
 3187 0022 7047     	 bx lr
 3188              	 .cfi_endproc
 3189              	.LFE113:
 3191              	 .section .text.usart_is_rx_ready,"ax",%progbits
 3192              	 .align 1
 3193              	 .global usart_is_rx_ready
 3194              	 .syntax unified
 3195              	 .thumb
 3196              	 .thumb_func
 3197              	 .fpu softvfp
 3199              	usart_is_rx_ready:
 3200              	.LFB114:
1351:.././hal/sam3u1c/usart.c **** 
1352:.././hal/sam3u1c/usart.c **** /**
1353:.././hal/sam3u1c/usart.c ****  * \brief Check if the received data are ready.
1354:.././hal/sam3u1c/usart.c ****  * Check if Data have been received and loaded into USART_RHR.
1355:.././hal/sam3u1c/usart.c ****  *
1356:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1357:.././hal/sam3u1c/usart.c ****  *
1358:.././hal/sam3u1c/usart.c ****  * \retval 1 Some data has been received.
1359:.././hal/sam3u1c/usart.c ****  * \retval 0 No data has been received.
1360:.././hal/sam3u1c/usart.c ****  */
1361:.././hal/sam3u1c/usart.c **** uint32_t usart_is_rx_ready(Usart *p_usart)
1362:.././hal/sam3u1c/usart.c **** {
 3201              	 .loc 1 1362 1
 3202              	 .cfi_startproc
 3203              	 
 3204              	 
 3205              	 
 3206 0000 80B4     	 push {r7}
 3207              	.LCFI258:
 3208              	 .cfi_def_cfa_offset 4
 3209              	 .cfi_offset 7,-4
 3210 0002 83B0     	 sub sp,sp,#12
 3211              	.LCFI259:
 3212              	 .cfi_def_cfa_offset 16
 3213 0004 00AF     	 add r7,sp,#0
 3214              	.LCFI260:
 3215              	 .cfi_def_cfa_register 7
 3216 0006 7860     	 str r0,[r7,#4]
1363:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_RXRDY) > 0;
 3217              	 .loc 1 1363 17
 3218 0008 7B68     	 ldr r3,[r7,#4]
 3219 000a 5B69     	 ldr r3,[r3,#20]
 3220              	 .loc 1 1363 26
 3221 000c 03F00103 	 and r3,r3,#1
 3222              	 .loc 1 1363 42
 3223 0010 002B     	 cmp r3,#0
 3224 0012 14BF     	 ite ne
 3225 0014 0123     	 movne r3,#1
 3226 0016 0023     	 moveq r3,#0
 3227 0018 DBB2     	 uxtb r3,r3
1364:.././hal/sam3u1c/usart.c **** }
 3228              	 .loc 1 1364 1
 3229 001a 1846     	 mov r0,r3
 3230 001c 0C37     	 adds r7,r7,#12
 3231              	.LCFI261:
 3232              	 .cfi_def_cfa_offset 4
 3233 001e BD46     	 mov sp,r7
 3234              	.LCFI262:
 3235              	 .cfi_def_cfa_register 13
 3236              	 
 3237 0020 80BC     	 pop {r7}
 3238              	.LCFI263:
 3239              	 .cfi_restore 7
 3240              	 .cfi_def_cfa_offset 0
 3241 0022 7047     	 bx lr
 3242              	 .cfi_endproc
 3243              	.LFE114:
 3245              	 .section .text.usart_is_rx_buf_end,"ax",%progbits
 3246              	 .align 1
 3247              	 .global usart_is_rx_buf_end
 3248              	 .syntax unified
 3249              	 .thumb
 3250              	 .thumb_func
 3251              	 .fpu softvfp
 3253              	usart_is_rx_buf_end:
 3254              	.LFB115:
1365:.././hal/sam3u1c/usart.c **** 
1366:.././hal/sam3u1c/usart.c **** /**
1367:.././hal/sam3u1c/usart.c ****  * \brief Check if one receive buffer is filled.
1368:.././hal/sam3u1c/usart.c ****  *
1369:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1370:.././hal/sam3u1c/usart.c ****  *
1371:.././hal/sam3u1c/usart.c ****  * \retval 1 Receive is complete.
1372:.././hal/sam3u1c/usart.c ****  * \retval 0 Receive is still pending.
1373:.././hal/sam3u1c/usart.c ****  */
1374:.././hal/sam3u1c/usart.c **** uint32_t usart_is_rx_buf_end(Usart *p_usart)
1375:.././hal/sam3u1c/usart.c **** {
 3255              	 .loc 1 1375 1
 3256              	 .cfi_startproc
 3257              	 
 3258              	 
 3259              	 
 3260 0000 80B4     	 push {r7}
 3261              	.LCFI264:
 3262              	 .cfi_def_cfa_offset 4
 3263              	 .cfi_offset 7,-4
 3264 0002 83B0     	 sub sp,sp,#12
 3265              	.LCFI265:
 3266              	 .cfi_def_cfa_offset 16
 3267 0004 00AF     	 add r7,sp,#0
 3268              	.LCFI266:
 3269              	 .cfi_def_cfa_register 7
 3270 0006 7860     	 str r0,[r7,#4]
1376:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_ENDRX) > 0;
 3271              	 .loc 1 1376 17
 3272 0008 7B68     	 ldr r3,[r7,#4]
 3273 000a 5B69     	 ldr r3,[r3,#20]
 3274              	 .loc 1 1376 26
 3275 000c 03F00803 	 and r3,r3,#8
 3276              	 .loc 1 1376 42
 3277 0010 002B     	 cmp r3,#0
 3278 0012 14BF     	 ite ne
 3279 0014 0123     	 movne r3,#1
 3280 0016 0023     	 moveq r3,#0
 3281 0018 DBB2     	 uxtb r3,r3
1377:.././hal/sam3u1c/usart.c **** }
 3282              	 .loc 1 1377 1
 3283 001a 1846     	 mov r0,r3
 3284 001c 0C37     	 adds r7,r7,#12
 3285              	.LCFI267:
 3286              	 .cfi_def_cfa_offset 4
 3287 001e BD46     	 mov sp,r7
 3288              	.LCFI268:
 3289              	 .cfi_def_cfa_register 13
 3290              	 
 3291 0020 80BC     	 pop {r7}
 3292              	.LCFI269:
 3293              	 .cfi_restore 7
 3294              	 .cfi_def_cfa_offset 0
 3295 0022 7047     	 bx lr
 3296              	 .cfi_endproc
 3297              	.LFE115:
 3299              	 .section .text.usart_is_tx_buf_end,"ax",%progbits
 3300              	 .align 1
 3301              	 .global usart_is_tx_buf_end
 3302              	 .syntax unified
 3303              	 .thumb
 3304              	 .thumb_func
 3305              	 .fpu softvfp
 3307              	usart_is_tx_buf_end:
 3308              	.LFB116:
1378:.././hal/sam3u1c/usart.c **** 
1379:.././hal/sam3u1c/usart.c **** /**
1380:.././hal/sam3u1c/usart.c ****  * \brief Check if one transmit buffer is empty.
1381:.././hal/sam3u1c/usart.c ****  *
1382:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1383:.././hal/sam3u1c/usart.c ****  *
1384:.././hal/sam3u1c/usart.c ****  * \retval 1 Transmit is complete.
1385:.././hal/sam3u1c/usart.c ****  * \retval 0 Transmit is still pending.
1386:.././hal/sam3u1c/usart.c ****  */
1387:.././hal/sam3u1c/usart.c **** uint32_t usart_is_tx_buf_end(Usart *p_usart)
1388:.././hal/sam3u1c/usart.c **** {
 3309              	 .loc 1 1388 1
 3310              	 .cfi_startproc
 3311              	 
 3312              	 
 3313              	 
 3314 0000 80B4     	 push {r7}
 3315              	.LCFI270:
 3316              	 .cfi_def_cfa_offset 4
 3317              	 .cfi_offset 7,-4
 3318 0002 83B0     	 sub sp,sp,#12
 3319              	.LCFI271:
 3320              	 .cfi_def_cfa_offset 16
 3321 0004 00AF     	 add r7,sp,#0
 3322              	.LCFI272:
 3323              	 .cfi_def_cfa_register 7
 3324 0006 7860     	 str r0,[r7,#4]
1389:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_ENDTX) > 0;
 3325              	 .loc 1 1389 17
 3326 0008 7B68     	 ldr r3,[r7,#4]
 3327 000a 5B69     	 ldr r3,[r3,#20]
 3328              	 .loc 1 1389 26
 3329 000c 03F01003 	 and r3,r3,#16
 3330              	 .loc 1 1389 42
 3331 0010 002B     	 cmp r3,#0
 3332 0012 14BF     	 ite ne
 3333 0014 0123     	 movne r3,#1
 3334 0016 0023     	 moveq r3,#0
 3335 0018 DBB2     	 uxtb r3,r3
1390:.././hal/sam3u1c/usart.c **** }
 3336              	 .loc 1 1390 1
 3337 001a 1846     	 mov r0,r3
 3338 001c 0C37     	 adds r7,r7,#12
 3339              	.LCFI273:
 3340              	 .cfi_def_cfa_offset 4
 3341 001e BD46     	 mov sp,r7
 3342              	.LCFI274:
 3343              	 .cfi_def_cfa_register 13
 3344              	 
 3345 0020 80BC     	 pop {r7}
 3346              	.LCFI275:
 3347              	 .cfi_restore 7
 3348              	 .cfi_def_cfa_offset 0
 3349 0022 7047     	 bx lr
 3350              	 .cfi_endproc
 3351              	.LFE116:
 3353              	 .section .text.usart_is_rx_buf_full,"ax",%progbits
 3354              	 .align 1
 3355              	 .global usart_is_rx_buf_full
 3356              	 .syntax unified
 3357              	 .thumb
 3358              	 .thumb_func
 3359              	 .fpu softvfp
 3361              	usart_is_rx_buf_full:
 3362              	.LFB117:
1391:.././hal/sam3u1c/usart.c **** 
1392:.././hal/sam3u1c/usart.c **** /**
1393:.././hal/sam3u1c/usart.c ****  * \brief Check if both receive buffers are full.
1394:.././hal/sam3u1c/usart.c ****  *
1395:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1396:.././hal/sam3u1c/usart.c ****  *
1397:.././hal/sam3u1c/usart.c ****  * \retval 1 Receive buffers are full.
1398:.././hal/sam3u1c/usart.c ****  * \retval 0 Receive buffers are not full.
1399:.././hal/sam3u1c/usart.c ****  */
1400:.././hal/sam3u1c/usart.c **** uint32_t usart_is_rx_buf_full(Usart *p_usart)
1401:.././hal/sam3u1c/usart.c **** {
 3363              	 .loc 1 1401 1
 3364              	 .cfi_startproc
 3365              	 
 3366              	 
 3367              	 
 3368 0000 80B4     	 push {r7}
 3369              	.LCFI276:
 3370              	 .cfi_def_cfa_offset 4
 3371              	 .cfi_offset 7,-4
 3372 0002 83B0     	 sub sp,sp,#12
 3373              	.LCFI277:
 3374              	 .cfi_def_cfa_offset 16
 3375 0004 00AF     	 add r7,sp,#0
 3376              	.LCFI278:
 3377              	 .cfi_def_cfa_register 7
 3378 0006 7860     	 str r0,[r7,#4]
1402:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_RXBUFF) > 0;
 3379              	 .loc 1 1402 17
 3380 0008 7B68     	 ldr r3,[r7,#4]
 3381 000a 5B69     	 ldr r3,[r3,#20]
 3382              	 .loc 1 1402 26
 3383 000c 03F48053 	 and r3,r3,#4096
 3384              	 .loc 1 1402 43
 3385 0010 002B     	 cmp r3,#0
 3386 0012 14BF     	 ite ne
 3387 0014 0123     	 movne r3,#1
 3388 0016 0023     	 moveq r3,#0
 3389 0018 DBB2     	 uxtb r3,r3
1403:.././hal/sam3u1c/usart.c **** }
 3390              	 .loc 1 1403 1
 3391 001a 1846     	 mov r0,r3
 3392 001c 0C37     	 adds r7,r7,#12
 3393              	.LCFI279:
 3394              	 .cfi_def_cfa_offset 4
 3395 001e BD46     	 mov sp,r7
 3396              	.LCFI280:
 3397              	 .cfi_def_cfa_register 13
 3398              	 
 3399 0020 80BC     	 pop {r7}
 3400              	.LCFI281:
 3401              	 .cfi_restore 7
 3402              	 .cfi_def_cfa_offset 0
 3403 0022 7047     	 bx lr
 3404              	 .cfi_endproc
 3405              	.LFE117:
 3407              	 .section .text.usart_is_tx_buf_empty,"ax",%progbits
 3408              	 .align 1
 3409              	 .global usart_is_tx_buf_empty
 3410              	 .syntax unified
 3411              	 .thumb
 3412              	 .thumb_func
 3413              	 .fpu softvfp
 3415              	usart_is_tx_buf_empty:
 3416              	.LFB118:
1404:.././hal/sam3u1c/usart.c **** 
1405:.././hal/sam3u1c/usart.c **** /**
1406:.././hal/sam3u1c/usart.c ****  * \brief Check if both transmit buffers are empty.
1407:.././hal/sam3u1c/usart.c ****  *
1408:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1409:.././hal/sam3u1c/usart.c ****  *
1410:.././hal/sam3u1c/usart.c ****  * \retval 1 Transmit buffers are empty.
1411:.././hal/sam3u1c/usart.c ****  * \retval 0 Transmit buffers are not empty.
1412:.././hal/sam3u1c/usart.c ****  */
1413:.././hal/sam3u1c/usart.c **** uint32_t usart_is_tx_buf_empty(Usart *p_usart)
1414:.././hal/sam3u1c/usart.c **** {
 3417              	 .loc 1 1414 1
 3418              	 .cfi_startproc
 3419              	 
 3420              	 
 3421              	 
 3422 0000 80B4     	 push {r7}
 3423              	.LCFI282:
 3424              	 .cfi_def_cfa_offset 4
 3425              	 .cfi_offset 7,-4
 3426 0002 83B0     	 sub sp,sp,#12
 3427              	.LCFI283:
 3428              	 .cfi_def_cfa_offset 16
 3429 0004 00AF     	 add r7,sp,#0
 3430              	.LCFI284:
 3431              	 .cfi_def_cfa_register 7
 3432 0006 7860     	 str r0,[r7,#4]
1415:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_CSR & US_CSR_TXBUFE) > 0;
 3433              	 .loc 1 1415 17
 3434 0008 7B68     	 ldr r3,[r7,#4]
 3435 000a 5B69     	 ldr r3,[r3,#20]
 3436              	 .loc 1 1415 26
 3437 000c 03F40063 	 and r3,r3,#2048
 3438              	 .loc 1 1415 43
 3439 0010 002B     	 cmp r3,#0
 3440 0012 14BF     	 ite ne
 3441 0014 0123     	 movne r3,#1
 3442 0016 0023     	 moveq r3,#0
 3443 0018 DBB2     	 uxtb r3,r3
1416:.././hal/sam3u1c/usart.c **** }
 3444              	 .loc 1 1416 1
 3445 001a 1846     	 mov r0,r3
 3446 001c 0C37     	 adds r7,r7,#12
 3447              	.LCFI285:
 3448              	 .cfi_def_cfa_offset 4
 3449 001e BD46     	 mov sp,r7
 3450              	.LCFI286:
 3451              	 .cfi_def_cfa_register 13
 3452              	 
 3453 0020 80BC     	 pop {r7}
 3454              	.LCFI287:
 3455              	 .cfi_restore 7
 3456              	 .cfi_def_cfa_offset 0
 3457 0022 7047     	 bx lr
 3458              	 .cfi_endproc
 3459              	.LFE118:
 3461              	 .section .text.usart_write,"ax",%progbits
 3462              	 .align 1
 3463              	 .global usart_write
 3464              	 .syntax unified
 3465              	 .thumb
 3466              	 .thumb_func
 3467              	 .fpu softvfp
 3469              	usart_write:
 3470              	.LFB119:
1417:.././hal/sam3u1c/usart.c **** 
1418:.././hal/sam3u1c/usart.c **** /**
1419:.././hal/sam3u1c/usart.c ****  * \brief Write to USART Transmit Holding Register.
1420:.././hal/sam3u1c/usart.c ****  *
1421:.././hal/sam3u1c/usart.c ****  * \note Before writing user should check if tx is ready (or empty).
1422:.././hal/sam3u1c/usart.c ****  *
1423:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1424:.././hal/sam3u1c/usart.c ****  * \param c Data to be sent.
1425:.././hal/sam3u1c/usart.c ****  *
1426:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
1427:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
1428:.././hal/sam3u1c/usart.c ****  */
1429:.././hal/sam3u1c/usart.c **** uint32_t usart_write(Usart *p_usart, uint32_t c)
1430:.././hal/sam3u1c/usart.c **** {
 3471              	 .loc 1 1430 1
 3472              	 .cfi_startproc
 3473              	 
 3474              	 
 3475              	 
 3476 0000 80B4     	 push {r7}
 3477              	.LCFI288:
 3478              	 .cfi_def_cfa_offset 4
 3479              	 .cfi_offset 7,-4
 3480 0002 83B0     	 sub sp,sp,#12
 3481              	.LCFI289:
 3482              	 .cfi_def_cfa_offset 16
 3483 0004 00AF     	 add r7,sp,#0
 3484              	.LCFI290:
 3485              	 .cfi_def_cfa_register 7
 3486 0006 7860     	 str r0,[r7,#4]
 3487 0008 3960     	 str r1,[r7]
1431:.././hal/sam3u1c/usart.c **** 	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
 3488              	 .loc 1 1431 15
 3489 000a 7B68     	 ldr r3,[r7,#4]
 3490 000c 5B69     	 ldr r3,[r3,#20]
 3491              	 .loc 1 1431 24
 3492 000e 03F00203 	 and r3,r3,#2
 3493              	 .loc 1 1431 5
 3494 0012 002B     	 cmp r3,#0
 3495 0014 01D1     	 bne .L153
1432:.././hal/sam3u1c/usart.c **** 		return 1;
 3496              	 .loc 1 1432 10
 3497 0016 0123     	 movs r3,#1
 3498 0018 05E0     	 b .L154
 3499              	.L153:
1433:.././hal/sam3u1c/usart.c **** 	}
1434:.././hal/sam3u1c/usart.c **** 
1435:.././hal/sam3u1c/usart.c **** 	p_usart->US_THR = US_THR_TXCHR(c);
 3500              	 .loc 1 1435 20
 3501 001a 3B68     	 ldr r3,[r7]
 3502 001c C3F30802 	 ubfx r2,r3,#0,#9
 3503              	 .loc 1 1435 18
 3504 0020 7B68     	 ldr r3,[r7,#4]
 3505 0022 DA61     	 str r2,[r3,#28]
1436:.././hal/sam3u1c/usart.c **** 	return 0;
 3506              	 .loc 1 1436 9
 3507 0024 0023     	 movs r3,#0
 3508              	.L154:
1437:.././hal/sam3u1c/usart.c **** }
 3509              	 .loc 1 1437 1
 3510 0026 1846     	 mov r0,r3
 3511 0028 0C37     	 adds r7,r7,#12
 3512              	.LCFI291:
 3513              	 .cfi_def_cfa_offset 4
 3514 002a BD46     	 mov sp,r7
 3515              	.LCFI292:
 3516              	 .cfi_def_cfa_register 13
 3517              	 
 3518 002c 80BC     	 pop {r7}
 3519              	.LCFI293:
 3520              	 .cfi_restore 7
 3521              	 .cfi_def_cfa_offset 0
 3522 002e 7047     	 bx lr
 3523              	 .cfi_endproc
 3524              	.LFE119:
 3526              	 .section .text.usart_putchar,"ax",%progbits
 3527              	 .align 1
 3528              	 .global usart_putchar
 3529              	 .syntax unified
 3530              	 .thumb
 3531              	 .thumb_func
 3532              	 .fpu softvfp
 3534              	usart_putchar:
 3535              	.LFB120:
1438:.././hal/sam3u1c/usart.c **** 
1439:.././hal/sam3u1c/usart.c **** /**
1440:.././hal/sam3u1c/usart.c ****  * \brief Write to USART Transmit Holding Register.
1441:.././hal/sam3u1c/usart.c ****  *
1442:.././hal/sam3u1c/usart.c ****  * \note Before writing user should check if tx is ready (or empty).
1443:.././hal/sam3u1c/usart.c ****  *
1444:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1445:.././hal/sam3u1c/usart.c ****  * \param c Data to be sent.
1446:.././hal/sam3u1c/usart.c ****  *
1447:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
1448:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
1449:.././hal/sam3u1c/usart.c ****  */
1450:.././hal/sam3u1c/usart.c **** uint32_t usart_putchar(Usart *p_usart, uint32_t c)
1451:.././hal/sam3u1c/usart.c **** {
 3536              	 .loc 1 1451 1
 3537              	 .cfi_startproc
 3538              	 
 3539              	 
 3540              	 
 3541 0000 80B4     	 push {r7}
 3542              	.LCFI294:
 3543              	 .cfi_def_cfa_offset 4
 3544              	 .cfi_offset 7,-4
 3545 0002 83B0     	 sub sp,sp,#12
 3546              	.LCFI295:
 3547              	 .cfi_def_cfa_offset 16
 3548 0004 00AF     	 add r7,sp,#0
 3549              	.LCFI296:
 3550              	 .cfi_def_cfa_register 7
 3551 0006 7860     	 str r0,[r7,#4]
 3552 0008 3960     	 str r1,[r7]
1452:.././hal/sam3u1c/usart.c **** 	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
 3553              	 .loc 1 1452 8
 3554 000a 00BF     	 nop
 3555              	.L156:
 3556              	 .loc 1 1452 18 discriminator 1
 3557 000c 7B68     	 ldr r3,[r7,#4]
 3558 000e 5B69     	 ldr r3,[r3,#20]
 3559              	 .loc 1 1452 27 discriminator 1
 3560 0010 03F00203 	 and r3,r3,#2
 3561              	 .loc 1 1452 8 discriminator 1
 3562 0014 002B     	 cmp r3,#0
 3563 0016 F9D0     	 beq .L156
1453:.././hal/sam3u1c/usart.c **** 	}
1454:.././hal/sam3u1c/usart.c **** 
1455:.././hal/sam3u1c/usart.c **** 	p_usart->US_THR = US_THR_TXCHR(c);
 3564              	 .loc 1 1455 20
 3565 0018 3B68     	 ldr r3,[r7]
 3566 001a C3F30802 	 ubfx r2,r3,#0,#9
 3567              	 .loc 1 1455 18
 3568 001e 7B68     	 ldr r3,[r7,#4]
 3569 0020 DA61     	 str r2,[r3,#28]
1456:.././hal/sam3u1c/usart.c **** 
1457:.././hal/sam3u1c/usart.c **** 	return 0;
 3570              	 .loc 1 1457 9
 3571 0022 0023     	 movs r3,#0
1458:.././hal/sam3u1c/usart.c **** }
 3572              	 .loc 1 1458 1
 3573 0024 1846     	 mov r0,r3
 3574 0026 0C37     	 adds r7,r7,#12
 3575              	.LCFI297:
 3576              	 .cfi_def_cfa_offset 4
 3577 0028 BD46     	 mov sp,r7
 3578              	.LCFI298:
 3579              	 .cfi_def_cfa_register 13
 3580              	 
 3581 002a 80BC     	 pop {r7}
 3582              	.LCFI299:
 3583              	 .cfi_restore 7
 3584              	 .cfi_def_cfa_offset 0
 3585 002c 7047     	 bx lr
 3586              	 .cfi_endproc
 3587              	.LFE120:
 3589              	 .section .text.usart_write_line,"ax",%progbits
 3590              	 .align 1
 3591              	 .global usart_write_line
 3592              	 .syntax unified
 3593              	 .thumb
 3594              	 .thumb_func
 3595              	 .fpu softvfp
 3597              	usart_write_line:
 3598              	.LFB121:
1459:.././hal/sam3u1c/usart.c **** 
1460:.././hal/sam3u1c/usart.c **** /**
1461:.././hal/sam3u1c/usart.c ****  * \brief Write one-line string through USART.
1462:.././hal/sam3u1c/usart.c ****  *
1463:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1464:.././hal/sam3u1c/usart.c ****  * \param string Pointer to one-line string to be sent.
1465:.././hal/sam3u1c/usart.c ****  */
1466:.././hal/sam3u1c/usart.c **** void usart_write_line(Usart *p_usart, const char *string)
1467:.././hal/sam3u1c/usart.c **** {
 3599              	 .loc 1 1467 1
 3600              	 .cfi_startproc
 3601              	 
 3602              	 
 3603 0000 80B5     	 push {r7,lr}
 3604              	.LCFI300:
 3605              	 .cfi_def_cfa_offset 8
 3606              	 .cfi_offset 7,-8
 3607              	 .cfi_offset 14,-4
 3608 0002 82B0     	 sub sp,sp,#8
 3609              	.LCFI301:
 3610              	 .cfi_def_cfa_offset 16
 3611 0004 00AF     	 add r7,sp,#0
 3612              	.LCFI302:
 3613              	 .cfi_def_cfa_register 7
 3614 0006 7860     	 str r0,[r7,#4]
 3615 0008 3960     	 str r1,[r7]
1468:.././hal/sam3u1c/usart.c **** 	while (*string != '\0') {
 3616              	 .loc 1 1468 8
 3617 000a 07E0     	 b .L159
 3618              	.L160:
1469:.././hal/sam3u1c/usart.c **** 		usart_putchar(p_usart, *string++);
 3619              	 .loc 1 1469 33
 3620 000c 3B68     	 ldr r3,[r7]
 3621 000e 5A1C     	 adds r2,r3,#1
 3622 0010 3A60     	 str r2,[r7]
 3623              	 .loc 1 1469 26
 3624 0012 1B78     	 ldrb r3,[r3]
 3625              	 .loc 1 1469 3
 3626 0014 1946     	 mov r1,r3
 3627 0016 7868     	 ldr r0,[r7,#4]
 3628 0018 054B     	 ldr r3,.L161
 3629 001a 9847     	 blx r3
 3630              	.LVL23:
 3631              	.L159:
1468:.././hal/sam3u1c/usart.c **** 	while (*string != '\0') {
 3632              	 .loc 1 1468 9
 3633 001c 3B68     	 ldr r3,[r7]
 3634 001e 1B78     	 ldrb r3,[r3]
1468:.././hal/sam3u1c/usart.c **** 	while (*string != '\0') {
 3635              	 .loc 1 1468 8
 3636 0020 002B     	 cmp r3,#0
 3637 0022 F3D1     	 bne .L160
1470:.././hal/sam3u1c/usart.c **** 	}
1471:.././hal/sam3u1c/usart.c **** }
 3638              	 .loc 1 1471 1
 3639 0024 00BF     	 nop
 3640 0026 00BF     	 nop
 3641 0028 0837     	 adds r7,r7,#8
 3642              	.LCFI303:
 3643              	 .cfi_def_cfa_offset 8
 3644 002a BD46     	 mov sp,r7
 3645              	.LCFI304:
 3646              	 .cfi_def_cfa_register 13
 3647              	 
 3648 002c 80BD     	 pop {r7,pc}
 3649              	.L162:
 3650 002e 00BF     	 .align 2
 3651              	.L161:
 3652 0030 00000000 	 .word usart_putchar
 3653              	 .cfi_endproc
 3654              	.LFE121:
 3656              	 .section .text.usart_read,"ax",%progbits
 3657              	 .align 1
 3658              	 .global usart_read
 3659              	 .syntax unified
 3660              	 .thumb
 3661              	 .thumb_func
 3662              	 .fpu softvfp
 3664              	usart_read:
 3665              	.LFB122:
1472:.././hal/sam3u1c/usart.c **** 
1473:.././hal/sam3u1c/usart.c **** /**
1474:.././hal/sam3u1c/usart.c ****  * \brief Read from USART Receive Holding Register.
1475:.././hal/sam3u1c/usart.c ****  *
1476:.././hal/sam3u1c/usart.c ****  * \note Before reading user should check if rx is ready.
1477:.././hal/sam3u1c/usart.c ****  *
1478:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1479:.././hal/sam3u1c/usart.c ****  * \param c Pointer where the one-byte received data will be stored.
1480:.././hal/sam3u1c/usart.c ****  *
1481:.././hal/sam3u1c/usart.c ****  * \retval 0 on success.
1482:.././hal/sam3u1c/usart.c ****  * \retval 1 if no data is available or errors.
1483:.././hal/sam3u1c/usart.c ****  */
1484:.././hal/sam3u1c/usart.c **** uint32_t usart_read(Usart *p_usart, uint32_t *c)
1485:.././hal/sam3u1c/usart.c **** {
 3666              	 .loc 1 1485 1
 3667              	 .cfi_startproc
 3668              	 
 3669              	 
 3670              	 
 3671 0000 80B4     	 push {r7}
 3672              	.LCFI305:
 3673              	 .cfi_def_cfa_offset 4
 3674              	 .cfi_offset 7,-4
 3675 0002 83B0     	 sub sp,sp,#12
 3676              	.LCFI306:
 3677              	 .cfi_def_cfa_offset 16
 3678 0004 00AF     	 add r7,sp,#0
 3679              	.LCFI307:
 3680              	 .cfi_def_cfa_register 7
 3681 0006 7860     	 str r0,[r7,#4]
 3682 0008 3960     	 str r1,[r7]
1486:.././hal/sam3u1c/usart.c **** 	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
 3683              	 .loc 1 1486 15
 3684 000a 7B68     	 ldr r3,[r7,#4]
 3685 000c 5B69     	 ldr r3,[r3,#20]
 3686              	 .loc 1 1486 24
 3687 000e 03F00103 	 and r3,r3,#1
 3688              	 .loc 1 1486 5
 3689 0012 002B     	 cmp r3,#0
 3690 0014 01D1     	 bne .L164
1487:.././hal/sam3u1c/usart.c **** 		return 1;
 3691              	 .loc 1 1487 10
 3692 0016 0123     	 movs r3,#1
 3693 0018 06E0     	 b .L165
 3694              	.L164:
1488:.././hal/sam3u1c/usart.c **** 	}
1489:.././hal/sam3u1c/usart.c **** 
1490:.././hal/sam3u1c/usart.c **** 	/* Read character */
1491:.././hal/sam3u1c/usart.c **** 	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
 3695              	 .loc 1 1491 14
 3696 001a 7B68     	 ldr r3,[r7,#4]
 3697 001c 9B69     	 ldr r3,[r3,#24]
 3698              	 .loc 1 1491 23
 3699 001e C3F30802 	 ubfx r2,r3,#0,#9
 3700              	 .loc 1 1491 5
 3701 0022 3B68     	 ldr r3,[r7]
 3702 0024 1A60     	 str r2,[r3]
1492:.././hal/sam3u1c/usart.c **** 
1493:.././hal/sam3u1c/usart.c **** 	return 0;
 3703              	 .loc 1 1493 9
 3704 0026 0023     	 movs r3,#0
 3705              	.L165:
1494:.././hal/sam3u1c/usart.c **** }
 3706              	 .loc 1 1494 1
 3707 0028 1846     	 mov r0,r3
 3708 002a 0C37     	 adds r7,r7,#12
 3709              	.LCFI308:
 3710              	 .cfi_def_cfa_offset 4
 3711 002c BD46     	 mov sp,r7
 3712              	.LCFI309:
 3713              	 .cfi_def_cfa_register 13
 3714              	 
 3715 002e 80BC     	 pop {r7}
 3716              	.LCFI310:
 3717              	 .cfi_restore 7
 3718              	 .cfi_def_cfa_offset 0
 3719 0030 7047     	 bx lr
 3720              	 .cfi_endproc
 3721              	.LFE122:
 3723              	 .section .text.usart_getchar,"ax",%progbits
 3724              	 .align 1
 3725              	 .global usart_getchar
 3726              	 .syntax unified
 3727              	 .thumb
 3728              	 .thumb_func
 3729              	 .fpu softvfp
 3731              	usart_getchar:
 3732              	.LFB123:
1495:.././hal/sam3u1c/usart.c **** 
1496:.././hal/sam3u1c/usart.c **** /**
1497:.././hal/sam3u1c/usart.c ****  * \brief Read from USART Receive Holding Register.
1498:.././hal/sam3u1c/usart.c ****  * Before reading user should check if rx is ready.
1499:.././hal/sam3u1c/usart.c ****  *
1500:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1501:.././hal/sam3u1c/usart.c ****  * \param c Pointer where the one-byte received data will be stored.
1502:.././hal/sam3u1c/usart.c ****  *
1503:.././hal/sam3u1c/usart.c ****  * \retval 0 Data has been received.
1504:.././hal/sam3u1c/usart.c ****  * \retval 1 on failure.
1505:.././hal/sam3u1c/usart.c ****  */
1506:.././hal/sam3u1c/usart.c **** uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
1507:.././hal/sam3u1c/usart.c **** {
 3733              	 .loc 1 1507 1
 3734              	 .cfi_startproc
 3735              	 
 3736              	 
 3737              	 
 3738 0000 80B4     	 push {r7}
 3739              	.LCFI311:
 3740              	 .cfi_def_cfa_offset 4
 3741              	 .cfi_offset 7,-4
 3742 0002 83B0     	 sub sp,sp,#12
 3743              	.LCFI312:
 3744              	 .cfi_def_cfa_offset 16
 3745 0004 00AF     	 add r7,sp,#0
 3746              	.LCFI313:
 3747              	 .cfi_def_cfa_register 7
 3748 0006 7860     	 str r0,[r7,#4]
 3749 0008 3960     	 str r1,[r7]
1508:.././hal/sam3u1c/usart.c **** 	/* Wait until it's not empty or timeout has reached. */
1509:.././hal/sam3u1c/usart.c **** 	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
 3750              	 .loc 1 1509 8
 3751 000a 00BF     	 nop
 3752              	.L167:
 3753              	 .loc 1 1509 18 discriminator 1
 3754 000c 7B68     	 ldr r3,[r7,#4]
 3755 000e 5B69     	 ldr r3,[r3,#20]
 3756              	 .loc 1 1509 27 discriminator 1
 3757 0010 03F00103 	 and r3,r3,#1
 3758              	 .loc 1 1509 8 discriminator 1
 3759 0014 002B     	 cmp r3,#0
 3760 0016 F9D0     	 beq .L167
1510:.././hal/sam3u1c/usart.c **** 	}
1511:.././hal/sam3u1c/usart.c **** 
1512:.././hal/sam3u1c/usart.c **** 	/* Read character */
1513:.././hal/sam3u1c/usart.c **** 	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
 3761              	 .loc 1 1513 14
 3762 0018 7B68     	 ldr r3,[r7,#4]
 3763 001a 9B69     	 ldr r3,[r3,#24]
 3764              	 .loc 1 1513 23
 3765 001c C3F30802 	 ubfx r2,r3,#0,#9
 3766              	 .loc 1 1513 5
 3767 0020 3B68     	 ldr r3,[r7]
 3768 0022 1A60     	 str r2,[r3]
1514:.././hal/sam3u1c/usart.c **** 
1515:.././hal/sam3u1c/usart.c **** 	return 0;
 3769              	 .loc 1 1515 9
 3770 0024 0023     	 movs r3,#0
1516:.././hal/sam3u1c/usart.c **** }
 3771              	 .loc 1 1516 1
 3772 0026 1846     	 mov r0,r3
 3773 0028 0C37     	 adds r7,r7,#12
 3774              	.LCFI314:
 3775              	 .cfi_def_cfa_offset 4
 3776 002a BD46     	 mov sp,r7
 3777              	.LCFI315:
 3778              	 .cfi_def_cfa_register 13
 3779              	 
 3780 002c 80BC     	 pop {r7}
 3781              	.LCFI316:
 3782              	 .cfi_restore 7
 3783              	 .cfi_def_cfa_offset 0
 3784 002e 7047     	 bx lr
 3785              	 .cfi_endproc
 3786              	.LFE123:
 3788              	 .section .text.usart_get_tx_access,"ax",%progbits
 3789              	 .align 1
 3790              	 .global usart_get_tx_access
 3791              	 .syntax unified
 3792              	 .thumb
 3793              	 .thumb_func
 3794              	 .fpu softvfp
 3796              	usart_get_tx_access:
 3797              	.LFB124:
1517:.././hal/sam3u1c/usart.c **** 
1518:.././hal/sam3u1c/usart.c **** #if (SAM3XA || SAM3U)
1519:.././hal/sam3u1c/usart.c **** /**
1520:.././hal/sam3u1c/usart.c ****  * \brief Get Transmit address for DMA operation.
1521:.././hal/sam3u1c/usart.c ****  *
1522:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1523:.././hal/sam3u1c/usart.c ****  *
1524:.././hal/sam3u1c/usart.c ****  * \return Transmit address for DMA access.
1525:.././hal/sam3u1c/usart.c ****  */
1526:.././hal/sam3u1c/usart.c **** uint32_t *usart_get_tx_access(Usart *p_usart)
1527:.././hal/sam3u1c/usart.c **** {
 3798              	 .loc 1 1527 1
 3799              	 .cfi_startproc
 3800              	 
 3801              	 
 3802              	 
 3803 0000 80B4     	 push {r7}
 3804              	.LCFI317:
 3805              	 .cfi_def_cfa_offset 4
 3806              	 .cfi_offset 7,-4
 3807 0002 83B0     	 sub sp,sp,#12
 3808              	.LCFI318:
 3809              	 .cfi_def_cfa_offset 16
 3810 0004 00AF     	 add r7,sp,#0
 3811              	.LCFI319:
 3812              	 .cfi_def_cfa_register 7
 3813 0006 7860     	 str r0,[r7,#4]
1528:.././hal/sam3u1c/usart.c **** 	return (uint32_t *)&(p_usart->US_THR);
 3814              	 .loc 1 1528 9
 3815 0008 7B68     	 ldr r3,[r7,#4]
 3816 000a 1C33     	 adds r3,r3,#28
1529:.././hal/sam3u1c/usart.c **** }
 3817              	 .loc 1 1529 1
 3818 000c 1846     	 mov r0,r3
 3819 000e 0C37     	 adds r7,r7,#12
 3820              	.LCFI320:
 3821              	 .cfi_def_cfa_offset 4
 3822 0010 BD46     	 mov sp,r7
 3823              	.LCFI321:
 3824              	 .cfi_def_cfa_register 13
 3825              	 
 3826 0012 80BC     	 pop {r7}
 3827              	.LCFI322:
 3828              	 .cfi_restore 7
 3829              	 .cfi_def_cfa_offset 0
 3830 0014 7047     	 bx lr
 3831              	 .cfi_endproc
 3832              	.LFE124:
 3834              	 .section .text.usart_get_rx_access,"ax",%progbits
 3835              	 .align 1
 3836              	 .global usart_get_rx_access
 3837              	 .syntax unified
 3838              	 .thumb
 3839              	 .thumb_func
 3840              	 .fpu softvfp
 3842              	usart_get_rx_access:
 3843              	.LFB125:
1530:.././hal/sam3u1c/usart.c **** 
1531:.././hal/sam3u1c/usart.c **** /**
1532:.././hal/sam3u1c/usart.c ****  * \brief Get Receive address for DMA operation.
1533:.././hal/sam3u1c/usart.c ****  *
1534:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1535:.././hal/sam3u1c/usart.c ****  *
1536:.././hal/sam3u1c/usart.c ****  * \return Receive address for DMA access.
1537:.././hal/sam3u1c/usart.c ****  */
1538:.././hal/sam3u1c/usart.c **** uint32_t *usart_get_rx_access(Usart *p_usart)
1539:.././hal/sam3u1c/usart.c **** {
 3844              	 .loc 1 1539 1
 3845              	 .cfi_startproc
 3846              	 
 3847              	 
 3848              	 
 3849 0000 80B4     	 push {r7}
 3850              	.LCFI323:
 3851              	 .cfi_def_cfa_offset 4
 3852              	 .cfi_offset 7,-4
 3853 0002 83B0     	 sub sp,sp,#12
 3854              	.LCFI324:
 3855              	 .cfi_def_cfa_offset 16
 3856 0004 00AF     	 add r7,sp,#0
 3857              	.LCFI325:
 3858              	 .cfi_def_cfa_register 7
 3859 0006 7860     	 str r0,[r7,#4]
1540:.././hal/sam3u1c/usart.c **** 	return (uint32_t *)&(p_usart->US_RHR);
 3860              	 .loc 1 1540 9
 3861 0008 7B68     	 ldr r3,[r7,#4]
 3862 000a 1833     	 adds r3,r3,#24
1541:.././hal/sam3u1c/usart.c **** }
 3863              	 .loc 1 1541 1
 3864 000c 1846     	 mov r0,r3
 3865 000e 0C37     	 adds r7,r7,#12
 3866              	.LCFI326:
 3867              	 .cfi_def_cfa_offset 4
 3868 0010 BD46     	 mov sp,r7
 3869              	.LCFI327:
 3870              	 .cfi_def_cfa_register 13
 3871              	 
 3872 0012 80BC     	 pop {r7}
 3873              	.LCFI328:
 3874              	 .cfi_restore 7
 3875              	 .cfi_def_cfa_offset 0
 3876 0014 7047     	 bx lr
 3877              	 .cfi_endproc
 3878              	.LFE125:
 3880              	 .section .text.usart_get_pdc_base,"ax",%progbits
 3881              	 .align 1
 3882              	 .global usart_get_pdc_base
 3883              	 .syntax unified
 3884              	 .thumb
 3885              	 .thumb_func
 3886              	 .fpu softvfp
 3888              	usart_get_pdc_base:
 3889              	.LFB126:
1542:.././hal/sam3u1c/usart.c **** #endif
1543:.././hal/sam3u1c/usart.c **** 
1544:.././hal/sam3u1c/usart.c **** #if (!SAM4L)
1545:.././hal/sam3u1c/usart.c **** /**
1546:.././hal/sam3u1c/usart.c ****  * \brief Get USART PDC base address.
1547:.././hal/sam3u1c/usart.c ****  *
1548:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a UART instance.
1549:.././hal/sam3u1c/usart.c ****  *
1550:.././hal/sam3u1c/usart.c ****  * \return USART PDC registers base for PDC driver to access.
1551:.././hal/sam3u1c/usart.c ****  */
1552:.././hal/sam3u1c/usart.c **** Pdc *usart_get_pdc_base(Usart *p_usart)
1553:.././hal/sam3u1c/usart.c **** {
 3890              	 .loc 1 1553 1
 3891              	 .cfi_startproc
 3892              	 
 3893              	 
 3894              	 
 3895 0000 80B4     	 push {r7}
 3896              	.LCFI329:
 3897              	 .cfi_def_cfa_offset 4
 3898              	 .cfi_offset 7,-4
 3899 0002 85B0     	 sub sp,sp,#20
 3900              	.LCFI330:
 3901              	 .cfi_def_cfa_offset 24
 3902 0004 00AF     	 add r7,sp,#0
 3903              	.LCFI331:
 3904              	 .cfi_def_cfa_register 7
 3905 0006 7860     	 str r0,[r7,#4]
1554:.././hal/sam3u1c/usart.c **** 	Pdc *p_pdc_base;
1555:.././hal/sam3u1c/usart.c **** 
1556:.././hal/sam3u1c/usart.c **** 	p_pdc_base = (Pdc *)NULL;
 3906              	 .loc 1 1556 13
 3907 0008 0023     	 movs r3,#0
 3908 000a FB60     	 str r3,[r7,#12]
1557:.././hal/sam3u1c/usart.c **** 
1558:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART
1559:.././hal/sam3u1c/usart.c **** 	if (p_usart == USART) {
1560:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART;
1561:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
1562:.././hal/sam3u1c/usart.c **** 	}
1563:.././hal/sam3u1c/usart.c **** #endif
1564:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART0
1565:.././hal/sam3u1c/usart.c **** 	if (p_usart == USART0) {
 3909              	 .loc 1 1565 5
 3910 000c 7B68     	 ldr r3,[r7,#4]
 3911 000e 0E4A     	 ldr r2,.L178
 3912 0010 9342     	 cmp r3,r2
 3913 0012 03D1     	 bne .L174
1566:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART0;
 3914              	 .loc 1 1566 14
 3915 0014 0D4B     	 ldr r3,.L178+4
 3916 0016 FB60     	 str r3,[r7,#12]
1567:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
 3917              	 .loc 1 1567 10
 3918 0018 FB68     	 ldr r3,[r7,#12]
 3919 001a 10E0     	 b .L175
 3920              	.L174:
1568:.././hal/sam3u1c/usart.c **** 	}
1569:.././hal/sam3u1c/usart.c **** #endif
1570:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART1
1571:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART1) {
 3921              	 .loc 1 1571 10
 3922 001c 7B68     	 ldr r3,[r7,#4]
 3923 001e 0C4A     	 ldr r2,.L178+8
 3924 0020 9342     	 cmp r3,r2
 3925 0022 03D1     	 bne .L176
1572:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART1;
 3926              	 .loc 1 1572 14
 3927 0024 0B4B     	 ldr r3,.L178+12
 3928 0026 FB60     	 str r3,[r7,#12]
1573:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
 3929              	 .loc 1 1573 10
 3930 0028 FB68     	 ldr r3,[r7,#12]
 3931 002a 08E0     	 b .L175
 3932              	.L176:
1574:.././hal/sam3u1c/usart.c **** 	}
1575:.././hal/sam3u1c/usart.c **** #endif
1576:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART2
1577:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART2) {
 3933              	 .loc 1 1577 10
 3934 002c 7B68     	 ldr r3,[r7,#4]
 3935 002e 0A4A     	 ldr r2,.L178+16
 3936 0030 9342     	 cmp r3,r2
 3937 0032 03D1     	 bne .L177
1578:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART2;
 3938              	 .loc 1 1578 14
 3939 0034 094B     	 ldr r3,.L178+20
 3940 0036 FB60     	 str r3,[r7,#12]
1579:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
 3941              	 .loc 1 1579 10
 3942 0038 FB68     	 ldr r3,[r7,#12]
 3943 003a 00E0     	 b .L175
 3944              	.L177:
1580:.././hal/sam3u1c/usart.c **** 	}
1581:.././hal/sam3u1c/usart.c **** #endif
1582:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART3
1583:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART3) {
1584:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART3;
1585:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
1586:.././hal/sam3u1c/usart.c **** 	}
1587:.././hal/sam3u1c/usart.c **** #endif
1588:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART4
1589:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART4) {
1590:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART4;
1591:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
1592:.././hal/sam3u1c/usart.c **** 	}
1593:.././hal/sam3u1c/usart.c **** #endif
1594:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART5
1595:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART5) {
1596:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART5;
1597:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
1598:.././hal/sam3u1c/usart.c **** 	}
1599:.././hal/sam3u1c/usart.c **** #endif
1600:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART6
1601:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART6) {
1602:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART6;
1603:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
1604:.././hal/sam3u1c/usart.c **** 	}
1605:.././hal/sam3u1c/usart.c **** #endif
1606:.././hal/sam3u1c/usart.c **** #ifdef PDC_USART7
1607:.././hal/sam3u1c/usart.c **** 	else if (p_usart == USART7) {
1608:.././hal/sam3u1c/usart.c **** 		p_pdc_base = PDC_USART7;
1609:.././hal/sam3u1c/usart.c **** 		return p_pdc_base;
1610:.././hal/sam3u1c/usart.c **** 	}
1611:.././hal/sam3u1c/usart.c **** #endif
1612:.././hal/sam3u1c/usart.c **** 
1613:.././hal/sam3u1c/usart.c **** 	return p_pdc_base;
 3945              	 .loc 1 1613 9
 3946 003c FB68     	 ldr r3,[r7,#12]
 3947              	.L175:
1614:.././hal/sam3u1c/usart.c **** }
 3948              	 .loc 1 1614 1
 3949 003e 1846     	 mov r0,r3
 3950 0040 1437     	 adds r7,r7,#20
 3951              	.LCFI332:
 3952              	 .cfi_def_cfa_offset 4
 3953 0042 BD46     	 mov sp,r7
 3954              	.LCFI333:
 3955              	 .cfi_def_cfa_register 13
 3956              	 
 3957 0044 80BC     	 pop {r7}
 3958              	.LCFI334:
 3959              	 .cfi_restore 7
 3960              	 .cfi_def_cfa_offset 0
 3961 0046 7047     	 bx lr
 3962              	.L179:
 3963              	 .align 2
 3964              	.L178:
 3965 0048 00000940 	 .word 1074331648
 3966 004c 00010940 	 .word 1074331904
 3967 0050 00400940 	 .word 1074348032
 3968 0054 00410940 	 .word 1074348288
 3969 0058 00800940 	 .word 1074364416
 3970 005c 00810940 	 .word 1074364672
 3971              	 .cfi_endproc
 3972              	.LFE126:
 3974              	 .section .text.usart_enable_writeprotect,"ax",%progbits
 3975              	 .align 1
 3976              	 .global usart_enable_writeprotect
 3977              	 .syntax unified
 3978              	 .thumb
 3979              	 .thumb_func
 3980              	 .fpu softvfp
 3982              	usart_enable_writeprotect:
 3983              	.LFB127:
1615:.././hal/sam3u1c/usart.c **** #endif
1616:.././hal/sam3u1c/usart.c **** 
1617:.././hal/sam3u1c/usart.c **** /**
1618:.././hal/sam3u1c/usart.c ****  * \brief Enable write protect of USART registers.
1619:.././hal/sam3u1c/usart.c ****  *
1620:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1621:.././hal/sam3u1c/usart.c ****  */
1622:.././hal/sam3u1c/usart.c **** void usart_enable_writeprotect(Usart *p_usart)
1623:.././hal/sam3u1c/usart.c **** {
 3984              	 .loc 1 1623 1
 3985              	 .cfi_startproc
 3986              	 
 3987              	 
 3988              	 
 3989 0000 80B4     	 push {r7}
 3990              	.LCFI335:
 3991              	 .cfi_def_cfa_offset 4
 3992              	 .cfi_offset 7,-4
 3993 0002 83B0     	 sub sp,sp,#12
 3994              	.LCFI336:
 3995              	 .cfi_def_cfa_offset 16
 3996 0004 00AF     	 add r7,sp,#0
 3997              	.LCFI337:
 3998              	 .cfi_def_cfa_register 7
 3999 0006 7860     	 str r0,[r7,#4]
1624:.././hal/sam3u1c/usart.c **** 	p_usart->US_WPMR = US_WPMR_WPEN | US_WPMR_WPKEY_PASSWD;
 4000              	 .loc 1 1624 19
 4001 0008 7B68     	 ldr r3,[r7,#4]
 4002 000a 044A     	 ldr r2,.L181
 4003 000c C3F8E420 	 str r2,[r3,#228]
1625:.././hal/sam3u1c/usart.c **** }
 4004              	 .loc 1 1625 1
 4005 0010 00BF     	 nop
 4006 0012 0C37     	 adds r7,r7,#12
 4007              	.LCFI338:
 4008              	 .cfi_def_cfa_offset 4
 4009 0014 BD46     	 mov sp,r7
 4010              	.LCFI339:
 4011              	 .cfi_def_cfa_register 13
 4012              	 
 4013 0016 80BC     	 pop {r7}
 4014              	.LCFI340:
 4015              	 .cfi_restore 7
 4016              	 .cfi_def_cfa_offset 0
 4017 0018 7047     	 bx lr
 4018              	.L182:
 4019 001a 00BF     	 .align 2
 4020              	.L181:
 4021 001c 01415355 	 .word 1431519489
 4022              	 .cfi_endproc
 4023              	.LFE127:
 4025              	 .section .text.usart_disable_writeprotect,"ax",%progbits
 4026              	 .align 1
 4027              	 .global usart_disable_writeprotect
 4028              	 .syntax unified
 4029              	 .thumb
 4030              	 .thumb_func
 4031              	 .fpu softvfp
 4033              	usart_disable_writeprotect:
 4034              	.LFB128:
1626:.././hal/sam3u1c/usart.c **** 
1627:.././hal/sam3u1c/usart.c **** /**
1628:.././hal/sam3u1c/usart.c ****  * \brief Disable write protect of USART registers.
1629:.././hal/sam3u1c/usart.c ****  *
1630:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1631:.././hal/sam3u1c/usart.c ****  */
1632:.././hal/sam3u1c/usart.c **** void usart_disable_writeprotect(Usart *p_usart)
1633:.././hal/sam3u1c/usart.c **** {
 4035              	 .loc 1 1633 1
 4036              	 .cfi_startproc
 4037              	 
 4038              	 
 4039              	 
 4040 0000 80B4     	 push {r7}
 4041              	.LCFI341:
 4042              	 .cfi_def_cfa_offset 4
 4043              	 .cfi_offset 7,-4
 4044 0002 83B0     	 sub sp,sp,#12
 4045              	.LCFI342:
 4046              	 .cfi_def_cfa_offset 16
 4047 0004 00AF     	 add r7,sp,#0
 4048              	.LCFI343:
 4049              	 .cfi_def_cfa_register 7
 4050 0006 7860     	 str r0,[r7,#4]
1634:.././hal/sam3u1c/usart.c **** 	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
 4051              	 .loc 1 1634 19
 4052 0008 7B68     	 ldr r3,[r7,#4]
 4053 000a 044A     	 ldr r2,.L184
 4054 000c C3F8E420 	 str r2,[r3,#228]
1635:.././hal/sam3u1c/usart.c **** }
 4055              	 .loc 1 1635 1
 4056 0010 00BF     	 nop
 4057 0012 0C37     	 adds r7,r7,#12
 4058              	.LCFI344:
 4059              	 .cfi_def_cfa_offset 4
 4060 0014 BD46     	 mov sp,r7
 4061              	.LCFI345:
 4062              	 .cfi_def_cfa_register 13
 4063              	 
 4064 0016 80BC     	 pop {r7}
 4065              	.LCFI346:
 4066              	 .cfi_restore 7
 4067              	 .cfi_def_cfa_offset 0
 4068 0018 7047     	 bx lr
 4069              	.L185:
 4070 001a 00BF     	 .align 2
 4071              	.L184:
 4072 001c 00415355 	 .word 1431519488
 4073              	 .cfi_endproc
 4074              	.LFE128:
 4076              	 .section .text.usart_get_writeprotect_status,"ax",%progbits
 4077              	 .align 1
 4078              	 .global usart_get_writeprotect_status
 4079              	 .syntax unified
 4080              	 .thumb
 4081              	 .thumb_func
 4082              	 .fpu softvfp
 4084              	usart_get_writeprotect_status:
 4085              	.LFB129:
1636:.././hal/sam3u1c/usart.c **** 
1637:.././hal/sam3u1c/usart.c **** /**
1638:.././hal/sam3u1c/usart.c ****  * \brief Get write protect status.
1639:.././hal/sam3u1c/usart.c ****  *
1640:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1641:.././hal/sam3u1c/usart.c ****  *
1642:.././hal/sam3u1c/usart.c ****  * \return 0 if the peripheral is not protected.
1643:.././hal/sam3u1c/usart.c ****  * \return 16-bit Write Protect Violation Status otherwise.
1644:.././hal/sam3u1c/usart.c ****  */
1645:.././hal/sam3u1c/usart.c **** uint32_t usart_get_writeprotect_status(Usart *p_usart)
1646:.././hal/sam3u1c/usart.c **** {
 4086              	 .loc 1 1646 1
 4087              	 .cfi_startproc
 4088              	 
 4089              	 
 4090              	 
 4091 0000 80B4     	 push {r7}
 4092              	.LCFI347:
 4093              	 .cfi_def_cfa_offset 4
 4094              	 .cfi_offset 7,-4
 4095 0002 85B0     	 sub sp,sp,#20
 4096              	.LCFI348:
 4097              	 .cfi_def_cfa_offset 24
 4098 0004 00AF     	 add r7,sp,#0
 4099              	.LCFI349:
 4100              	 .cfi_def_cfa_register 7
 4101 0006 7860     	 str r0,[r7,#4]
1647:.././hal/sam3u1c/usart.c **** 	uint32_t reg_value;
1648:.././hal/sam3u1c/usart.c **** 
1649:.././hal/sam3u1c/usart.c **** 	reg_value = p_usart->US_WPSR;
 4102              	 .loc 1 1649 12
 4103 0008 7B68     	 ldr r3,[r7,#4]
 4104 000a D3F8E830 	 ldr r3,[r3,#232]
 4105 000e FB60     	 str r3,[r7,#12]
1650:.././hal/sam3u1c/usart.c **** 	if (reg_value & US_WPSR_WPVS) {
 4106              	 .loc 1 1650 16
 4107 0010 FB68     	 ldr r3,[r7,#12]
 4108 0012 03F00103 	 and r3,r3,#1
 4109              	 .loc 1 1650 5
 4110 0016 002B     	 cmp r3,#0
 4111 0018 03D0     	 beq .L187
1651:.././hal/sam3u1c/usart.c **** 		return (reg_value & US_WPSR_WPVSRC_Msk) >> US_WPSR_WPVSRC_Pos;
 4112              	 .loc 1 1651 43
 4113 001a FB68     	 ldr r3,[r7,#12]
 4114 001c 1B0A     	 lsrs r3,r3,#8
 4115 001e 9BB2     	 uxth r3,r3
 4116 0020 00E0     	 b .L188
 4117              	.L187:
1652:.././hal/sam3u1c/usart.c **** 	} else {
1653:.././hal/sam3u1c/usart.c **** 		return 0;
 4118              	 .loc 1 1653 10
 4119 0022 0023     	 movs r3,#0
 4120              	.L188:
1654:.././hal/sam3u1c/usart.c **** 	}
1655:.././hal/sam3u1c/usart.c **** }
 4121              	 .loc 1 1655 1
 4122 0024 1846     	 mov r0,r3
 4123 0026 1437     	 adds r7,r7,#20
 4124              	.LCFI350:
 4125              	 .cfi_def_cfa_offset 4
 4126 0028 BD46     	 mov sp,r7
 4127              	.LCFI351:
 4128              	 .cfi_def_cfa_register 13
 4129              	 
 4130 002a 80BC     	 pop {r7}
 4131              	.LCFI352:
 4132              	 .cfi_restore 7
 4133              	 .cfi_def_cfa_offset 0
 4134 002c 7047     	 bx lr
 4135              	 .cfi_endproc
 4136              	.LFE129:
 4138              	 .section .text.usart_get_error_number,"ax",%progbits
 4139              	 .align 1
 4140              	 .global usart_get_error_number
 4141              	 .syntax unified
 4142              	 .thumb
 4143              	 .thumb_func
 4144              	 .fpu softvfp
 4146              	usart_get_error_number:
 4147              	.LFB130:
1656:.././hal/sam3u1c/usart.c **** 
1657:.././hal/sam3u1c/usart.c **** /**
1658:.././hal/sam3u1c/usart.c ****  * \brief Get the total number of errors that occur during an ISO7816 transfer.
1659:.././hal/sam3u1c/usart.c ****  *
1660:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1661:.././hal/sam3u1c/usart.c ****  *
1662:.././hal/sam3u1c/usart.c ****  * \return The number of errors that occurred.
1663:.././hal/sam3u1c/usart.c ****  */
1664:.././hal/sam3u1c/usart.c **** uint8_t usart_get_error_number(Usart *p_usart)
1665:.././hal/sam3u1c/usart.c **** {
 4148              	 .loc 1 1665 1
 4149              	 .cfi_startproc
 4150              	 
 4151              	 
 4152              	 
 4153 0000 80B4     	 push {r7}
 4154              	.LCFI353:
 4155              	 .cfi_def_cfa_offset 4
 4156              	 .cfi_offset 7,-4
 4157 0002 83B0     	 sub sp,sp,#12
 4158              	.LCFI354:
 4159              	 .cfi_def_cfa_offset 16
 4160 0004 00AF     	 add r7,sp,#0
 4161              	.LCFI355:
 4162              	 .cfi_def_cfa_register 7
 4163 0006 7860     	 str r0,[r7,#4]
1666:.././hal/sam3u1c/usart.c **** 	return (p_usart->US_NER & US_NER_NB_ERRORS_Msk);
 4164              	 .loc 1 1666 17
 4165 0008 7B68     	 ldr r3,[r7,#4]
 4166 000a 5B6C     	 ldr r3,[r3,#68]
 4167              	 .loc 1 1666 26
 4168 000c DBB2     	 uxtb r3,r3
1667:.././hal/sam3u1c/usart.c **** }
 4169              	 .loc 1 1667 1
 4170 000e 1846     	 mov r0,r3
 4171 0010 0C37     	 adds r7,r7,#12
 4172              	.LCFI356:
 4173              	 .cfi_def_cfa_offset 4
 4174 0012 BD46     	 mov sp,r7
 4175              	.LCFI357:
 4176              	 .cfi_def_cfa_register 13
 4177              	 
 4178 0014 80BC     	 pop {r7}
 4179              	.LCFI358:
 4180              	 .cfi_restore 7
 4181              	 .cfi_def_cfa_offset 0
 4182 0016 7047     	 bx lr
 4183              	 .cfi_endproc
 4184              	.LFE130:
 4186              	 .section .text.usart_man_set_tx_pre_len,"ax",%progbits
 4187              	 .align 1
 4188              	 .global usart_man_set_tx_pre_len
 4189              	 .syntax unified
 4190              	 .thumb
 4191              	 .thumb_func
 4192              	 .fpu softvfp
 4194              	usart_man_set_tx_pre_len:
 4195              	.LFB131:
1668:.././hal/sam3u1c/usart.c **** 
1669:.././hal/sam3u1c/usart.c **** #if (SAM3S || SAM4S || SAM3U || SAM3XA || SAM4L || SAM4E || SAM4C || SAM4CP || SAM4CM)
1670:.././hal/sam3u1c/usart.c **** 
1671:.././hal/sam3u1c/usart.c **** /**
1672:.././hal/sam3u1c/usart.c ****  * \brief Configure the transmitter preamble length when the Manchester
1673:.././hal/sam3u1c/usart.c ****  * encode/decode is enabled.
1674:.././hal/sam3u1c/usart.c ****  *
1675:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1676:.././hal/sam3u1c/usart.c ****  * \param uc_len The transmitter preamble length, which should be 0 ~ 15.
1677:.././hal/sam3u1c/usart.c ****  */
1678:.././hal/sam3u1c/usart.c **** void usart_man_set_tx_pre_len(Usart *p_usart, uint8_t uc_len)
1679:.././hal/sam3u1c/usart.c **** {
 4196              	 .loc 1 1679 1
 4197              	 .cfi_startproc
 4198              	 
 4199              	 
 4200              	 
 4201 0000 80B4     	 push {r7}
 4202              	.LCFI359:
 4203              	 .cfi_def_cfa_offset 4
 4204              	 .cfi_offset 7,-4
 4205 0002 83B0     	 sub sp,sp,#12
 4206              	.LCFI360:
 4207              	 .cfi_def_cfa_offset 16
 4208 0004 00AF     	 add r7,sp,#0
 4209              	.LCFI361:
 4210              	 .cfi_def_cfa_register 7
 4211 0006 7860     	 str r0,[r7,#4]
 4212 0008 0B46     	 mov r3,r1
 4213 000a FB70     	 strb r3,[r7,#3]
1680:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_PL_Msk) |
 4214              	 .loc 1 1680 28
 4215 000c 7B68     	 ldr r3,[r7,#4]
 4216 000e 1B6D     	 ldr r3,[r3,#80]
 4217              	 .loc 1 1680 37
 4218 0010 23F00F02 	 bic r2,r3,#15
1681:.././hal/sam3u1c/usart.c **** 			US_MAN_TX_PL(uc_len);
 4219              	 .loc 1 1681 4
 4220 0014 FB78     	 ldrb r3,[r7,#3]
 4221 0016 03F00F03 	 and r3,r3,#15
1680:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_PL_Msk) |
 4222              	 .loc 1 1680 58
 4223 001a 1A43     	 orrs r2,r2,r3
1680:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_PL_Msk) |
 4224              	 .loc 1 1680 18
 4225 001c 7B68     	 ldr r3,[r7,#4]
 4226 001e 1A65     	 str r2,[r3,#80]
1682:.././hal/sam3u1c/usart.c **** }
 4227              	 .loc 1 1682 1
 4228 0020 00BF     	 nop
 4229 0022 0C37     	 adds r7,r7,#12
 4230              	.LCFI362:
 4231              	 .cfi_def_cfa_offset 4
 4232 0024 BD46     	 mov sp,r7
 4233              	.LCFI363:
 4234              	 .cfi_def_cfa_register 13
 4235              	 
 4236 0026 80BC     	 pop {r7}
 4237              	.LCFI364:
 4238              	 .cfi_restore 7
 4239              	 .cfi_def_cfa_offset 0
 4240 0028 7047     	 bx lr
 4241              	 .cfi_endproc
 4242              	.LFE131:
 4244              	 .section .text.usart_man_set_tx_pre_pattern,"ax",%progbits
 4245              	 .align 1
 4246              	 .global usart_man_set_tx_pre_pattern
 4247              	 .syntax unified
 4248              	 .thumb
 4249              	 .thumb_func
 4250              	 .fpu softvfp
 4252              	usart_man_set_tx_pre_pattern:
 4253              	.LFB132:
1683:.././hal/sam3u1c/usart.c **** 
1684:.././hal/sam3u1c/usart.c **** /**
1685:.././hal/sam3u1c/usart.c ****  * \brief Configure the transmitter preamble pattern when the Manchester
1686:.././hal/sam3u1c/usart.c ****  * encode/decode is enabled, which should be 0 ~ 3.
1687:.././hal/sam3u1c/usart.c ****  *
1688:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1689:.././hal/sam3u1c/usart.c ****  * \param uc_pattern 0 if the preamble is composed of '1's;
1690:.././hal/sam3u1c/usart.c ****  * 1 if the preamble is composed of '0's;
1691:.././hal/sam3u1c/usart.c ****  * 2 if the preamble is composed of '01's;
1692:.././hal/sam3u1c/usart.c ****  * 3 if the preamble is composed of '10's.
1693:.././hal/sam3u1c/usart.c ****  */
1694:.././hal/sam3u1c/usart.c **** void usart_man_set_tx_pre_pattern(Usart *p_usart, uint8_t uc_pattern)
1695:.././hal/sam3u1c/usart.c **** {
 4254              	 .loc 1 1695 1
 4255              	 .cfi_startproc
 4256              	 
 4257              	 
 4258              	 
 4259 0000 80B4     	 push {r7}
 4260              	.LCFI365:
 4261              	 .cfi_def_cfa_offset 4
 4262              	 .cfi_offset 7,-4
 4263 0002 83B0     	 sub sp,sp,#12
 4264              	.LCFI366:
 4265              	 .cfi_def_cfa_offset 16
 4266 0004 00AF     	 add r7,sp,#0
 4267              	.LCFI367:
 4268              	 .cfi_def_cfa_register 7
 4269 0006 7860     	 str r0,[r7,#4]
 4270 0008 0B46     	 mov r3,r1
 4271 000a FB70     	 strb r3,[r7,#3]
1696:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_PP_Msk) |
 4272              	 .loc 1 1696 28
 4273 000c 7B68     	 ldr r3,[r7,#4]
 4274 000e 1B6D     	 ldr r3,[r3,#80]
 4275              	 .loc 1 1696 37
 4276 0010 23F44073 	 bic r3,r3,#768
1697:.././hal/sam3u1c/usart.c **** 			(uc_pattern << US_MAN_TX_PP_Pos);
 4277              	 .loc 1 1697 16
 4278 0014 FA78     	 ldrb r2,[r7,#3]
 4279 0016 1202     	 lsls r2,r2,#8
1696:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_PP_Msk) |
 4280              	 .loc 1 1696 58
 4281 0018 1A43     	 orrs r2,r2,r3
1696:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_PP_Msk) |
 4282              	 .loc 1 1696 18
 4283 001a 7B68     	 ldr r3,[r7,#4]
 4284 001c 1A65     	 str r2,[r3,#80]
1698:.././hal/sam3u1c/usart.c **** }
 4285              	 .loc 1 1698 1
 4286 001e 00BF     	 nop
 4287 0020 0C37     	 adds r7,r7,#12
 4288              	.LCFI368:
 4289              	 .cfi_def_cfa_offset 4
 4290 0022 BD46     	 mov sp,r7
 4291              	.LCFI369:
 4292              	 .cfi_def_cfa_register 13
 4293              	 
 4294 0024 80BC     	 pop {r7}
 4295              	.LCFI370:
 4296              	 .cfi_restore 7
 4297              	 .cfi_def_cfa_offset 0
 4298 0026 7047     	 bx lr
 4299              	 .cfi_endproc
 4300              	.LFE132:
 4302              	 .section .text.usart_man_set_tx_polarity,"ax",%progbits
 4303              	 .align 1
 4304              	 .global usart_man_set_tx_polarity
 4305              	 .syntax unified
 4306              	 .thumb
 4307              	 .thumb_func
 4308              	 .fpu softvfp
 4310              	usart_man_set_tx_polarity:
 4311              	.LFB133:
1699:.././hal/sam3u1c/usart.c **** 
1700:.././hal/sam3u1c/usart.c **** /**
1701:.././hal/sam3u1c/usart.c ****  * \brief Configure the transmitter Manchester polarity when the Manchester
1702:.././hal/sam3u1c/usart.c ****  * encode/decode is enabled.
1703:.././hal/sam3u1c/usart.c ****  *
1704:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1705:.././hal/sam3u1c/usart.c ****  * \param uc_polarity Indicate the transmitter Manchester polarity, which
1706:.././hal/sam3u1c/usart.c ****  * should be 0 or 1.
1707:.././hal/sam3u1c/usart.c ****  */
1708:.././hal/sam3u1c/usart.c **** void usart_man_set_tx_polarity(Usart *p_usart, uint8_t uc_polarity)
1709:.././hal/sam3u1c/usart.c **** {
 4312              	 .loc 1 1709 1
 4313              	 .cfi_startproc
 4314              	 
 4315              	 
 4316              	 
 4317 0000 80B4     	 push {r7}
 4318              	.LCFI371:
 4319              	 .cfi_def_cfa_offset 4
 4320              	 .cfi_offset 7,-4
 4321 0002 83B0     	 sub sp,sp,#12
 4322              	.LCFI372:
 4323              	 .cfi_def_cfa_offset 16
 4324 0004 00AF     	 add r7,sp,#0
 4325              	.LCFI373:
 4326              	 .cfi_def_cfa_register 7
 4327 0006 7860     	 str r0,[r7,#4]
 4328 0008 0B46     	 mov r3,r1
 4329 000a FB70     	 strb r3,[r7,#3]
1710:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_MPOL) |
 4330              	 .loc 1 1710 28
 4331 000c 7B68     	 ldr r3,[r7,#4]
 4332 000e 1B6D     	 ldr r3,[r3,#80]
 4333              	 .loc 1 1710 37
 4334 0010 23F48053 	 bic r3,r3,#4096
1711:.././hal/sam3u1c/usart.c **** 			(uc_polarity << 12);
 4335              	 .loc 1 1711 17
 4336 0014 FA78     	 ldrb r2,[r7,#3]
 4337 0016 1203     	 lsls r2,r2,#12
1710:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_MPOL) |
 4338              	 .loc 1 1710 56
 4339 0018 1A43     	 orrs r2,r2,r3
1710:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_TX_MPOL) |
 4340              	 .loc 1 1710 18
 4341 001a 7B68     	 ldr r3,[r7,#4]
 4342 001c 1A65     	 str r2,[r3,#80]
1712:.././hal/sam3u1c/usart.c **** }
 4343              	 .loc 1 1712 1
 4344 001e 00BF     	 nop
 4345 0020 0C37     	 adds r7,r7,#12
 4346              	.LCFI374:
 4347              	 .cfi_def_cfa_offset 4
 4348 0022 BD46     	 mov sp,r7
 4349              	.LCFI375:
 4350              	 .cfi_def_cfa_register 13
 4351              	 
 4352 0024 80BC     	 pop {r7}
 4353              	.LCFI376:
 4354              	 .cfi_restore 7
 4355              	 .cfi_def_cfa_offset 0
 4356 0026 7047     	 bx lr
 4357              	 .cfi_endproc
 4358              	.LFE133:
 4360              	 .section .text.usart_man_set_rx_pre_len,"ax",%progbits
 4361              	 .align 1
 4362              	 .global usart_man_set_rx_pre_len
 4363              	 .syntax unified
 4364              	 .thumb
 4365              	 .thumb_func
 4366              	 .fpu softvfp
 4368              	usart_man_set_rx_pre_len:
 4369              	.LFB134:
1713:.././hal/sam3u1c/usart.c **** 
1714:.././hal/sam3u1c/usart.c **** /**
1715:.././hal/sam3u1c/usart.c ****  * \brief Configure the detected receiver preamble length when the Manchester
1716:.././hal/sam3u1c/usart.c ****  * encode/decode is enabled.
1717:.././hal/sam3u1c/usart.c ****  *
1718:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1719:.././hal/sam3u1c/usart.c ****  * \param uc_len The detected receiver preamble length, which should be 0 ~ 15.
1720:.././hal/sam3u1c/usart.c ****  */
1721:.././hal/sam3u1c/usart.c **** void usart_man_set_rx_pre_len(Usart *p_usart, uint8_t uc_len)
1722:.././hal/sam3u1c/usart.c **** {
 4370              	 .loc 1 1722 1
 4371              	 .cfi_startproc
 4372              	 
 4373              	 
 4374              	 
 4375 0000 80B4     	 push {r7}
 4376              	.LCFI377:
 4377              	 .cfi_def_cfa_offset 4
 4378              	 .cfi_offset 7,-4
 4379 0002 83B0     	 sub sp,sp,#12
 4380              	.LCFI378:
 4381              	 .cfi_def_cfa_offset 16
 4382 0004 00AF     	 add r7,sp,#0
 4383              	.LCFI379:
 4384              	 .cfi_def_cfa_register 7
 4385 0006 7860     	 str r0,[r7,#4]
 4386 0008 0B46     	 mov r3,r1
 4387 000a FB70     	 strb r3,[r7,#3]
1723:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PL_Msk) |
 4388              	 .loc 1 1723 28
 4389 000c 7B68     	 ldr r3,[r7,#4]
 4390 000e 1B6D     	 ldr r3,[r3,#80]
 4391              	 .loc 1 1723 37
 4392 0010 23F47022 	 bic r2,r3,#983040
1724:.././hal/sam3u1c/usart.c **** 			US_MAN_RX_PL(uc_len);
 4393              	 .loc 1 1724 4
 4394 0014 FB78     	 ldrb r3,[r7,#3]
 4395 0016 1B04     	 lsls r3,r3,#16
 4396 0018 03F47023 	 and r3,r3,#983040
1723:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PL_Msk) |
 4397              	 .loc 1 1723 58
 4398 001c 1A43     	 orrs r2,r2,r3
1723:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PL_Msk) |
 4399              	 .loc 1 1723 18
 4400 001e 7B68     	 ldr r3,[r7,#4]
 4401 0020 1A65     	 str r2,[r3,#80]
1725:.././hal/sam3u1c/usart.c **** }
 4402              	 .loc 1 1725 1
 4403 0022 00BF     	 nop
 4404 0024 0C37     	 adds r7,r7,#12
 4405              	.LCFI380:
 4406              	 .cfi_def_cfa_offset 4
 4407 0026 BD46     	 mov sp,r7
 4408              	.LCFI381:
 4409              	 .cfi_def_cfa_register 13
 4410              	 
 4411 0028 80BC     	 pop {r7}
 4412              	.LCFI382:
 4413              	 .cfi_restore 7
 4414              	 .cfi_def_cfa_offset 0
 4415 002a 7047     	 bx lr
 4416              	 .cfi_endproc
 4417              	.LFE134:
 4419              	 .section .text.usart_man_set_rx_pre_pattern,"ax",%progbits
 4420              	 .align 1
 4421              	 .global usart_man_set_rx_pre_pattern
 4422              	 .syntax unified
 4423              	 .thumb
 4424              	 .thumb_func
 4425              	 .fpu softvfp
 4427              	usart_man_set_rx_pre_pattern:
 4428              	.LFB135:
1726:.././hal/sam3u1c/usart.c **** 
1727:.././hal/sam3u1c/usart.c **** /**
1728:.././hal/sam3u1c/usart.c ****  * \brief Configure the detected receiver preamble pattern when the Manchester
1729:.././hal/sam3u1c/usart.c ****  *  encode/decode is enabled, which should be 0 ~ 3.
1730:.././hal/sam3u1c/usart.c ****  *
1731:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1732:.././hal/sam3u1c/usart.c ****  * \param uc_pattern 0 if the preamble is composed of '1's;
1733:.././hal/sam3u1c/usart.c ****  * 1 if the preamble is composed of '0's;
1734:.././hal/sam3u1c/usart.c ****  * 2 if the preamble is composed of '01's;
1735:.././hal/sam3u1c/usart.c ****  * 3 if the preamble is composed of '10's.
1736:.././hal/sam3u1c/usart.c ****  */
1737:.././hal/sam3u1c/usart.c **** void usart_man_set_rx_pre_pattern(Usart *p_usart, uint8_t uc_pattern)
1738:.././hal/sam3u1c/usart.c **** {
 4429              	 .loc 1 1738 1
 4430              	 .cfi_startproc
 4431              	 
 4432              	 
 4433              	 
 4434 0000 80B4     	 push {r7}
 4435              	.LCFI383:
 4436              	 .cfi_def_cfa_offset 4
 4437              	 .cfi_offset 7,-4
 4438 0002 83B0     	 sub sp,sp,#12
 4439              	.LCFI384:
 4440              	 .cfi_def_cfa_offset 16
 4441 0004 00AF     	 add r7,sp,#0
 4442              	.LCFI385:
 4443              	 .cfi_def_cfa_register 7
 4444 0006 7860     	 str r0,[r7,#4]
 4445 0008 0B46     	 mov r3,r1
 4446 000a FB70     	 strb r3,[r7,#3]
1739:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PP_Msk) |
 4447              	 .loc 1 1739 28
 4448 000c 7B68     	 ldr r3,[r7,#4]
 4449 000e 1B6D     	 ldr r3,[r3,#80]
 4450              	 .loc 1 1739 37
 4451 0010 23F04073 	 bic r3,r3,#50331648
1740:.././hal/sam3u1c/usart.c **** 			(uc_pattern << US_MAN_RX_PP_Pos);
 4452              	 .loc 1 1740 16
 4453 0014 FA78     	 ldrb r2,[r7,#3]
 4454 0016 1206     	 lsls r2,r2,#24
1739:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PP_Msk) |
 4455              	 .loc 1 1739 58
 4456 0018 1A43     	 orrs r2,r2,r3
1739:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_PP_Msk) |
 4457              	 .loc 1 1739 18
 4458 001a 7B68     	 ldr r3,[r7,#4]
 4459 001c 1A65     	 str r2,[r3,#80]
1741:.././hal/sam3u1c/usart.c **** }
 4460              	 .loc 1 1741 1
 4461 001e 00BF     	 nop
 4462 0020 0C37     	 adds r7,r7,#12
 4463              	.LCFI386:
 4464              	 .cfi_def_cfa_offset 4
 4465 0022 BD46     	 mov sp,r7
 4466              	.LCFI387:
 4467              	 .cfi_def_cfa_register 13
 4468              	 
 4469 0024 80BC     	 pop {r7}
 4470              	.LCFI388:
 4471              	 .cfi_restore 7
 4472              	 .cfi_def_cfa_offset 0
 4473 0026 7047     	 bx lr
 4474              	 .cfi_endproc
 4475              	.LFE135:
 4477              	 .section .text.usart_man_set_rx_polarity,"ax",%progbits
 4478              	 .align 1
 4479              	 .global usart_man_set_rx_polarity
 4480              	 .syntax unified
 4481              	 .thumb
 4482              	 .thumb_func
 4483              	 .fpu softvfp
 4485              	usart_man_set_rx_polarity:
 4486              	.LFB136:
1742:.././hal/sam3u1c/usart.c **** 
1743:.././hal/sam3u1c/usart.c **** /**
1744:.././hal/sam3u1c/usart.c ****  * \brief Configure the receiver Manchester polarity when the Manchester
1745:.././hal/sam3u1c/usart.c ****  * encode/decode is enabled.
1746:.././hal/sam3u1c/usart.c ****  *
1747:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1748:.././hal/sam3u1c/usart.c ****  * \param uc_polarity Indicate the receiver Manchester polarity, which should
1749:.././hal/sam3u1c/usart.c ****  * be 0 or 1.
1750:.././hal/sam3u1c/usart.c ****  */
1751:.././hal/sam3u1c/usart.c **** void usart_man_set_rx_polarity(Usart *p_usart, uint8_t uc_polarity)
1752:.././hal/sam3u1c/usart.c **** {
 4487              	 .loc 1 1752 1
 4488              	 .cfi_startproc
 4489              	 
 4490              	 
 4491              	 
 4492 0000 80B4     	 push {r7}
 4493              	.LCFI389:
 4494              	 .cfi_def_cfa_offset 4
 4495              	 .cfi_offset 7,-4
 4496 0002 83B0     	 sub sp,sp,#12
 4497              	.LCFI390:
 4498              	 .cfi_def_cfa_offset 16
 4499 0004 00AF     	 add r7,sp,#0
 4500              	.LCFI391:
 4501              	 .cfi_def_cfa_register 7
 4502 0006 7860     	 str r0,[r7,#4]
 4503 0008 0B46     	 mov r3,r1
 4504 000a FB70     	 strb r3,[r7,#3]
1753:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_MPOL) |
 4505              	 .loc 1 1753 28
 4506 000c 7B68     	 ldr r3,[r7,#4]
 4507 000e 1B6D     	 ldr r3,[r3,#80]
 4508              	 .loc 1 1753 37
 4509 0010 23F08053 	 bic r3,r3,#268435456
1754:.././hal/sam3u1c/usart.c **** 			(uc_polarity << 28);
 4510              	 .loc 1 1754 17
 4511 0014 FA78     	 ldrb r2,[r7,#3]
 4512 0016 1207     	 lsls r2,r2,#28
1753:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_MPOL) |
 4513              	 .loc 1 1753 56
 4514 0018 1A43     	 orrs r2,r2,r3
1753:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN = (p_usart->US_MAN & ~US_MAN_RX_MPOL) |
 4515              	 .loc 1 1753 18
 4516 001a 7B68     	 ldr r3,[r7,#4]
 4517 001c 1A65     	 str r2,[r3,#80]
1755:.././hal/sam3u1c/usart.c **** }
 4518              	 .loc 1 1755 1
 4519 001e 00BF     	 nop
 4520 0020 0C37     	 adds r7,r7,#12
 4521              	.LCFI392:
 4522              	 .cfi_def_cfa_offset 4
 4523 0022 BD46     	 mov sp,r7
 4524              	.LCFI393:
 4525              	 .cfi_def_cfa_register 13
 4526              	 
 4527 0024 80BC     	 pop {r7}
 4528              	.LCFI394:
 4529              	 .cfi_restore 7
 4530              	 .cfi_def_cfa_offset 0
 4531 0026 7047     	 bx lr
 4532              	 .cfi_endproc
 4533              	.LFE136:
 4535              	 .section .text.usart_man_enable_drift_compensation,"ax",%progbits
 4536              	 .align 1
 4537              	 .global usart_man_enable_drift_compensation
 4538              	 .syntax unified
 4539              	 .thumb
 4540              	 .thumb_func
 4541              	 .fpu softvfp
 4543              	usart_man_enable_drift_compensation:
 4544              	.LFB137:
1756:.././hal/sam3u1c/usart.c **** 
1757:.././hal/sam3u1c/usart.c **** /**
1758:.././hal/sam3u1c/usart.c ****  * \brief Enable drift compensation.
1759:.././hal/sam3u1c/usart.c ****  *
1760:.././hal/sam3u1c/usart.c ****  * \note The 16X clock mode must be enabled.
1761:.././hal/sam3u1c/usart.c ****  *
1762:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1763:.././hal/sam3u1c/usart.c ****  */
1764:.././hal/sam3u1c/usart.c **** void usart_man_enable_drift_compensation(Usart *p_usart)
1765:.././hal/sam3u1c/usart.c **** {
 4545              	 .loc 1 1765 1
 4546              	 .cfi_startproc
 4547              	 
 4548              	 
 4549              	 
 4550 0000 80B4     	 push {r7}
 4551              	.LCFI395:
 4552              	 .cfi_def_cfa_offset 4
 4553              	 .cfi_offset 7,-4
 4554 0002 83B0     	 sub sp,sp,#12
 4555              	.LCFI396:
 4556              	 .cfi_def_cfa_offset 16
 4557 0004 00AF     	 add r7,sp,#0
 4558              	.LCFI397:
 4559              	 .cfi_def_cfa_register 7
 4560 0006 7860     	 str r0,[r7,#4]
1766:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN |= US_MAN_DRIFT;
 4561              	 .loc 1 1766 18
 4562 0008 7B68     	 ldr r3,[r7,#4]
 4563 000a 1B6D     	 ldr r3,[r3,#80]
 4564 000c 43F08042 	 orr r2,r3,#1073741824
 4565 0010 7B68     	 ldr r3,[r7,#4]
 4566 0012 1A65     	 str r2,[r3,#80]
1767:.././hal/sam3u1c/usart.c **** }
 4567              	 .loc 1 1767 1
 4568 0014 00BF     	 nop
 4569 0016 0C37     	 adds r7,r7,#12
 4570              	.LCFI398:
 4571              	 .cfi_def_cfa_offset 4
 4572 0018 BD46     	 mov sp,r7
 4573              	.LCFI399:
 4574              	 .cfi_def_cfa_register 13
 4575              	 
 4576 001a 80BC     	 pop {r7}
 4577              	.LCFI400:
 4578              	 .cfi_restore 7
 4579              	 .cfi_def_cfa_offset 0
 4580 001c 7047     	 bx lr
 4581              	 .cfi_endproc
 4582              	.LFE137:
 4584              	 .section .text.usart_man_disable_drift_compensation,"ax",%progbits
 4585              	 .align 1
 4586              	 .global usart_man_disable_drift_compensation
 4587              	 .syntax unified
 4588              	 .thumb
 4589              	 .thumb_func
 4590              	 .fpu softvfp
 4592              	usart_man_disable_drift_compensation:
 4593              	.LFB138:
1768:.././hal/sam3u1c/usart.c **** 
1769:.././hal/sam3u1c/usart.c **** /**
1770:.././hal/sam3u1c/usart.c ****  * \brief Disable drift compensation.
1771:.././hal/sam3u1c/usart.c ****  *
1772:.././hal/sam3u1c/usart.c ****  * \param p_usart Pointer to a USART instance.
1773:.././hal/sam3u1c/usart.c ****  */
1774:.././hal/sam3u1c/usart.c **** void usart_man_disable_drift_compensation(Usart *p_usart)
1775:.././hal/sam3u1c/usart.c **** {
 4594              	 .loc 1 1775 1
 4595              	 .cfi_startproc
 4596              	 
 4597              	 
 4598              	 
 4599 0000 80B4     	 push {r7}
 4600              	.LCFI401:
 4601              	 .cfi_def_cfa_offset 4
 4602              	 .cfi_offset 7,-4
 4603 0002 83B0     	 sub sp,sp,#12
 4604              	.LCFI402:
 4605              	 .cfi_def_cfa_offset 16
 4606 0004 00AF     	 add r7,sp,#0
 4607              	.LCFI403:
 4608              	 .cfi_def_cfa_register 7
 4609 0006 7860     	 str r0,[r7,#4]
1776:.././hal/sam3u1c/usart.c **** 	p_usart->US_MAN &= ~US_MAN_DRIFT;
 4610              	 .loc 1 1776 18
 4611 0008 7B68     	 ldr r3,[r7,#4]
 4612 000a 1B6D     	 ldr r3,[r3,#80]
 4613 000c 23F08042 	 bic r2,r3,#1073741824
 4614 0010 7B68     	 ldr r3,[r7,#4]
 4615 0012 1A65     	 str r2,[r3,#80]
1777:.././hal/sam3u1c/usart.c **** }
 4616              	 .loc 1 1777 1
 4617 0014 00BF     	 nop
 4618 0016 0C37     	 adds r7,r7,#12
 4619              	.LCFI404:
 4620              	 .cfi_def_cfa_offset 4
 4621 0018 BD46     	 mov sp,r7
 4622              	.LCFI405:
 4623              	 .cfi_def_cfa_register 13
 4624              	 
 4625 001a 80BC     	 pop {r7}
 4626              	.LCFI406:
 4627              	 .cfi_restore 7
 4628              	 .cfi_def_cfa_offset 0
 4629 001c 7047     	 bx lr
 4630              	 .cfi_endproc
 4631              	.LFE138:
 4633              	 .section .bss.ul_reg_val.7160,"aw",%nobits
 4634              	 .align 2
 4637              	ul_reg_val.7160:
 4638 0000 00000000 	 .space 4
 4639              	 .section .bss.ul_reg_val.7176,"aw",%nobits
 4640              	 .align 2
 4643              	ul_reg_val.7176:
 4644 0000 00000000 	 .space 4
 4645              	 .section .bss.ul_reg_val.7181,"aw",%nobits
 4646              	 .align 2
 4649              	ul_reg_val.7181:
 4650 0000 00000000 	 .space 4
 4651              	 .section .bss.ul_reg_val.7197,"aw",%nobits
 4652              	 .align 2
 4655              	ul_reg_val.7197:
 4656 0000 00000000 	 .space 4
 4657              	 .section .bss.ul_reg_val.7203,"aw",%nobits
 4658              	 .align 2
 4661              	ul_reg_val.7203:
 4662 0000 00000000 	 .space 4
 4663              	 .section .bss.ul_reg_val.7214,"aw",%nobits
 4664              	 .align 2
 4667              	ul_reg_val.7214:
 4668 0000 00000000 	 .space 4
 4669              	 .text
 4670              	.Letext0:
 4671              	 .file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 4672              	 .file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 4673              	 .file 4 ".././hal/sam3u1c/inc/sam3u1c.h"
 4674              	 .file 5 ".././hal/sam3u1c/inc/core_cm3.h"
 4675              	 .file 6 ".././hal/sam3u1c/inc/system_sam3u.h"
 4676              	 .file 7 ".././hal/sam3u1c/inc/component/component_pdc.h"
 4677              	 .file 8 ".././hal/sam3u1c/inc/component/component_usart.h"
 4678              	 .file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 4679              	 .file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 4680              	 .file 11 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 4681              	 .file 12 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 4682              	 .file 13 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 4683              	 .file 14 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 4684              	 .file 15 ".././hal/sam3u1c/inc/usart.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usart.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.usart_set_async_baudrate:00000000 $t
    {standard input}:35     .text.usart_set_async_baudrate:00000000 usart_set_async_baudrate
    {standard input}:152    .text.usart_set_sync_master_baudrate:00000000 $t
    {standard input}:158    .text.usart_set_sync_master_baudrate:00000000 usart_set_sync_master_baudrate
    {standard input}:235    .text.usart_set_sync_slave_baudrate:00000000 $t
    {standard input}:241    .text.usart_set_sync_slave_baudrate:00000000 usart_set_sync_slave_baudrate
    {standard input}:285    .text.usart_set_iso7816_clock:00000000 $t
    {standard input}:291    .text.usart_set_iso7816_clock:00000000 usart_set_iso7816_clock
    {standard input}:369    .text.usart_set_spi_master_baudrate:00000000 $t
    {standard input}:375    .text.usart_set_spi_master_baudrate:00000000 usart_set_spi_master_baudrate
    {standard input}:443    .text.usart_set_spi_slave_baudrate:00000000 $t
    {standard input}:449    .text.usart_set_spi_slave_baudrate:00000000 usart_set_spi_slave_baudrate
    {standard input}:497    .text.usart_reset:00000000 $t
    {standard input}:504    .text.usart_reset:00000000 usart_reset
    {standard input}:577    .text.usart_reset:00000048 $d
    {standard input}:4033   .text.usart_disable_writeprotect:00000000 usart_disable_writeprotect
    {standard input}:1931   .text.usart_reset_tx:00000000 usart_reset_tx
    {standard input}:2120   .text.usart_reset_rx:00000000 usart_reset_rx
    {standard input}:2403   .text.usart_reset_status:00000000 usart_reset_status
    {standard input}:2950   .text.usart_drive_RTS_pin_high:00000000 usart_drive_RTS_pin_high
    {standard input}:2856   .text.usart_drive_DTR_pin_high:00000000 usart_drive_DTR_pin_high
    {standard input}:587    .text.usart_init_rs232:00000000 $t
    {standard input}:594    .text.usart_init_rs232:00000000 usart_init_rs232
    {standard input}:698    .text.usart_init_rs232:00000078 $d
    {standard input}:4637   .bss.ul_reg_val.7160:00000000 ul_reg_val.7160
    {standard input}:705    .text.usart_init_hw_handshaking:00000000 $t
    {standard input}:712    .text.usart_init_hw_handshaking:00000000 usart_init_hw_handshaking
    {standard input}:773    .text.usart_init_hw_handshaking:0000003c $d
    {standard input}:778    .text.usart_init_modem:00000000 $t
    {standard input}:785    .text.usart_init_modem:00000000 usart_init_modem
    {standard input}:855    .text.usart_init_modem:00000048 $d
    {standard input}:861    .text.usart_init_sync_master:00000000 $t
    {standard input}:868    .text.usart_init_sync_master:00000000 usart_init_sync_master
    {standard input}:973    .text.usart_init_sync_master:0000007c $d
    {standard input}:4643   .bss.ul_reg_val.7176:00000000 ul_reg_val.7176
    {standard input}:980    .text.usart_init_sync_slave:00000000 $t
    {standard input}:987    .text.usart_init_sync_slave:00000000 usart_init_sync_slave
    {standard input}:1081   .text.usart_init_sync_slave:00000068 $d
    {standard input}:4649   .bss.ul_reg_val.7181:00000000 ul_reg_val.7181
    {standard input}:1088   .text.usart_init_rs485:00000000 $t
    {standard input}:1095   .text.usart_init_rs485:00000000 usart_init_rs485
    {standard input}:1156   .text.usart_init_rs485:0000003c $d
    {standard input}:1161   .text.usart_init_irda:00000000 $t
    {standard input}:1168   .text.usart_init_irda:00000000 usart_init_irda
    {standard input}:1235   .text.usart_init_irda:00000044 $d
    {standard input}:1240   .text.usart_init_iso7816:00000000 $t
    {standard input}:1247   .text.usart_init_iso7816:00000000 usart_init_iso7816
    {standard input}:1447   .text.usart_init_iso7816:00000108 $d
    {standard input}:4655   .bss.ul_reg_val.7197:00000000 ul_reg_val.7197
    {standard input}:1454   .text.usart_init_spi_master:00000000 $t
    {standard input}:1461   .text.usart_init_spi_master:00000000 usart_init_spi_master
    {standard input}:1547   .text.usart_init_spi_master:00000070 $d
    {standard input}:1551   .text.usart_init_spi_master:00000080 $t
    {standard input}:1640   .text.usart_init_spi_master:00000104 $d
    {standard input}:4661   .bss.ul_reg_val.7203:00000000 ul_reg_val.7203
    {standard input}:1647   .text.usart_init_spi_slave:00000000 $t
    {standard input}:1654   .text.usart_init_spi_slave:00000000 usart_init_spi_slave
    {standard input}:1730   .text.usart_init_spi_slave:0000005c $d
    {standard input}:1734   .text.usart_init_spi_slave:0000006c $t
    {standard input}:1823   .text.usart_init_spi_slave:000000f0 $d
    {standard input}:4667   .bss.ul_reg_val.7214:00000000 ul_reg_val.7214
    {standard input}:1830   .text.usart_enable_tx:00000000 $t
    {standard input}:1837   .text.usart_enable_tx:00000000 usart_enable_tx
    {standard input}:1877   .text.usart_disable_tx:00000000 $t
    {standard input}:1884   .text.usart_disable_tx:00000000 usart_disable_tx
    {standard input}:1924   .text.usart_reset_tx:00000000 $t
    {standard input}:1971   .text.usart_set_tx_timeguard:00000000 $t
    {standard input}:1978   .text.usart_set_tx_timeguard:00000000 usart_set_tx_timeguard
    {standard input}:2019   .text.usart_enable_rx:00000000 $t
    {standard input}:2026   .text.usart_enable_rx:00000000 usart_enable_rx
    {standard input}:2066   .text.usart_disable_rx:00000000 $t
    {standard input}:2073   .text.usart_disable_rx:00000000 usart_disable_rx
    {standard input}:2113   .text.usart_reset_rx:00000000 $t
    {standard input}:2160   .text.usart_set_rx_timeout:00000000 $t
    {standard input}:2167   .text.usart_set_rx_timeout:00000000 usart_set_rx_timeout
    {standard input}:2208   .text.usart_enable_interrupt:00000000 $t
    {standard input}:2215   .text.usart_enable_interrupt:00000000 usart_enable_interrupt
    {standard input}:2256   .text.usart_disable_interrupt:00000000 $t
    {standard input}:2263   .text.usart_disable_interrupt:00000000 usart_disable_interrupt
    {standard input}:2304   .text.usart_get_interrupt_mask:00000000 $t
    {standard input}:2311   .text.usart_get_interrupt_mask:00000000 usart_get_interrupt_mask
    {standard input}:2350   .text.usart_get_status:00000000 $t
    {standard input}:2357   .text.usart_get_status:00000000 usart_get_status
    {standard input}:2396   .text.usart_reset_status:00000000 $t
    {standard input}:2443   .text.usart_start_tx_break:00000000 $t
    {standard input}:2450   .text.usart_start_tx_break:00000000 usart_start_tx_break
    {standard input}:2490   .text.usart_stop_tx_break:00000000 $t
    {standard input}:2497   .text.usart_stop_tx_break:00000000 usart_stop_tx_break
    {standard input}:2537   .text.usart_start_rx_timeout:00000000 $t
    {standard input}:2544   .text.usart_start_rx_timeout:00000000 usart_start_rx_timeout
    {standard input}:2584   .text.usart_send_address:00000000 $t
    {standard input}:2591   .text.usart_send_address:00000000 usart_send_address
    {standard input}:2656   .text.usart_send_address:00000040 $d
    {standard input}:3469   .text.usart_write:00000000 usart_write
    {standard input}:2661   .text.usart_reset_iterations:00000000 $t
    {standard input}:2668   .text.usart_reset_iterations:00000000 usart_reset_iterations
    {standard input}:2708   .text.usart_reset_nack:00000000 $t
    {standard input}:2715   .text.usart_reset_nack:00000000 usart_reset_nack
    {standard input}:2755   .text.usart_restart_rx_timeout:00000000 $t
    {standard input}:2762   .text.usart_restart_rx_timeout:00000000 usart_restart_rx_timeout
    {standard input}:2802   .text.usart_drive_DTR_pin_low:00000000 $t
    {standard input}:2809   .text.usart_drive_DTR_pin_low:00000000 usart_drive_DTR_pin_low
    {standard input}:2849   .text.usart_drive_DTR_pin_high:00000000 $t
    {standard input}:2896   .text.usart_drive_RTS_pin_low:00000000 $t
    {standard input}:2903   .text.usart_drive_RTS_pin_low:00000000 usart_drive_RTS_pin_low
    {standard input}:2943   .text.usart_drive_RTS_pin_high:00000000 $t
    {standard input}:2990   .text.usart_spi_force_chip_select:00000000 $t
    {standard input}:2997   .text.usart_spi_force_chip_select:00000000 usart_spi_force_chip_select
    {standard input}:3037   .text.usart_spi_release_chip_select:00000000 $t
    {standard input}:3044   .text.usart_spi_release_chip_select:00000000 usart_spi_release_chip_select
    {standard input}:3084   .text.usart_is_tx_ready:00000000 $t
    {standard input}:3091   .text.usart_is_tx_ready:00000000 usart_is_tx_ready
    {standard input}:3138   .text.usart_is_tx_empty:00000000 $t
    {standard input}:3145   .text.usart_is_tx_empty:00000000 usart_is_tx_empty
    {standard input}:3192   .text.usart_is_rx_ready:00000000 $t
    {standard input}:3199   .text.usart_is_rx_ready:00000000 usart_is_rx_ready
    {standard input}:3246   .text.usart_is_rx_buf_end:00000000 $t
    {standard input}:3253   .text.usart_is_rx_buf_end:00000000 usart_is_rx_buf_end
    {standard input}:3300   .text.usart_is_tx_buf_end:00000000 $t
    {standard input}:3307   .text.usart_is_tx_buf_end:00000000 usart_is_tx_buf_end
    {standard input}:3354   .text.usart_is_rx_buf_full:00000000 $t
    {standard input}:3361   .text.usart_is_rx_buf_full:00000000 usart_is_rx_buf_full
    {standard input}:3408   .text.usart_is_tx_buf_empty:00000000 $t
    {standard input}:3415   .text.usart_is_tx_buf_empty:00000000 usart_is_tx_buf_empty
    {standard input}:3462   .text.usart_write:00000000 $t
    {standard input}:3527   .text.usart_putchar:00000000 $t
    {standard input}:3534   .text.usart_putchar:00000000 usart_putchar
    {standard input}:3590   .text.usart_write_line:00000000 $t
    {standard input}:3597   .text.usart_write_line:00000000 usart_write_line
    {standard input}:3652   .text.usart_write_line:00000030 $d
    {standard input}:3657   .text.usart_read:00000000 $t
    {standard input}:3664   .text.usart_read:00000000 usart_read
    {standard input}:3724   .text.usart_getchar:00000000 $t
    {standard input}:3731   .text.usart_getchar:00000000 usart_getchar
    {standard input}:3789   .text.usart_get_tx_access:00000000 $t
    {standard input}:3796   .text.usart_get_tx_access:00000000 usart_get_tx_access
    {standard input}:3835   .text.usart_get_rx_access:00000000 $t
    {standard input}:3842   .text.usart_get_rx_access:00000000 usart_get_rx_access
    {standard input}:3881   .text.usart_get_pdc_base:00000000 $t
    {standard input}:3888   .text.usart_get_pdc_base:00000000 usart_get_pdc_base
    {standard input}:3965   .text.usart_get_pdc_base:00000048 $d
    {standard input}:3975   .text.usart_enable_writeprotect:00000000 $t
    {standard input}:3982   .text.usart_enable_writeprotect:00000000 usart_enable_writeprotect
    {standard input}:4021   .text.usart_enable_writeprotect:0000001c $d
    {standard input}:4026   .text.usart_disable_writeprotect:00000000 $t
    {standard input}:4072   .text.usart_disable_writeprotect:0000001c $d
    {standard input}:4077   .text.usart_get_writeprotect_status:00000000 $t
    {standard input}:4084   .text.usart_get_writeprotect_status:00000000 usart_get_writeprotect_status
    {standard input}:4139   .text.usart_get_error_number:00000000 $t
    {standard input}:4146   .text.usart_get_error_number:00000000 usart_get_error_number
    {standard input}:4187   .text.usart_man_set_tx_pre_len:00000000 $t
    {standard input}:4194   .text.usart_man_set_tx_pre_len:00000000 usart_man_set_tx_pre_len
    {standard input}:4245   .text.usart_man_set_tx_pre_pattern:00000000 $t
    {standard input}:4252   .text.usart_man_set_tx_pre_pattern:00000000 usart_man_set_tx_pre_pattern
    {standard input}:4303   .text.usart_man_set_tx_polarity:00000000 $t
    {standard input}:4310   .text.usart_man_set_tx_polarity:00000000 usart_man_set_tx_polarity
    {standard input}:4361   .text.usart_man_set_rx_pre_len:00000000 $t
    {standard input}:4368   .text.usart_man_set_rx_pre_len:00000000 usart_man_set_rx_pre_len
    {standard input}:4420   .text.usart_man_set_rx_pre_pattern:00000000 $t
    {standard input}:4427   .text.usart_man_set_rx_pre_pattern:00000000 usart_man_set_rx_pre_pattern
    {standard input}:4478   .text.usart_man_set_rx_polarity:00000000 $t
    {standard input}:4485   .text.usart_man_set_rx_polarity:00000000 usart_man_set_rx_polarity
    {standard input}:4536   .text.usart_man_enable_drift_compensation:00000000 $t
    {standard input}:4543   .text.usart_man_enable_drift_compensation:00000000 usart_man_enable_drift_compensation
    {standard input}:4585   .text.usart_man_disable_drift_compensation:00000000 $t
    {standard input}:4592   .text.usart_man_disable_drift_compensation:00000000 usart_man_disable_drift_compensation
    {standard input}:4634   .bss.ul_reg_val.7160:00000000 $d
    {standard input}:4640   .bss.ul_reg_val.7176:00000000 $d
    {standard input}:4646   .bss.ul_reg_val.7181:00000000 $d
    {standard input}:4652   .bss.ul_reg_val.7197:00000000 $d
    {standard input}:4658   .bss.ul_reg_val.7203:00000000 $d
    {standard input}:4664   .bss.ul_reg_val.7214:00000000 $d
                           .group:00000000 wm4.0.2cd8a2cb7ff4c48cec7eeec776a1dd8c
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.usart.h.71.248b8e0fdca1a015d75f4e432843f84f

NO UNDEFINED SYMBOLS
