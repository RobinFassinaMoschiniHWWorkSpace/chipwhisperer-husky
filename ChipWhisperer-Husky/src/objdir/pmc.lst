   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "pmc.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.pmc_mck_set_prescaler,"ax",%progbits
  27              	 .align 1
  28              	 .global pmc_mck_set_prescaler
  29              	 .arch armv7-m
  30              	 .syntax unified
  31              	 .thumb
  32              	 .thumb_func
  33              	 .fpu softvfp
  35              	pmc_mck_set_prescaler:
  36              	.LFB69:
  37              	 .file 1 ".././hal/sam3u1c/pmc.c"
   1:.././hal/sam3u1c/pmc.c **** /**
   2:.././hal/sam3u1c/pmc.c ****  * \file
   3:.././hal/sam3u1c/pmc.c ****  *
   4:.././hal/sam3u1c/pmc.c ****  * \brief Power Management Controller (PMC) driver for SAM.
   5:.././hal/sam3u1c/pmc.c ****  *
   6:.././hal/sam3u1c/pmc.c ****  * Copyright (c) 2011 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/pmc.c ****  *
   8:.././hal/sam3u1c/pmc.c ****  * \asf_license_start
   9:.././hal/sam3u1c/pmc.c ****  *
  10:.././hal/sam3u1c/pmc.c ****  * \page License
  11:.././hal/sam3u1c/pmc.c ****  *
  12:.././hal/sam3u1c/pmc.c ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/pmc.c ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/pmc.c ****  *
  15:.././hal/sam3u1c/pmc.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/pmc.c ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/pmc.c ****  *
  18:.././hal/sam3u1c/pmc.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/pmc.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/pmc.c ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/pmc.c ****  *
  22:.././hal/sam3u1c/pmc.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/pmc.c ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/pmc.c ****  *
  25:.././hal/sam3u1c/pmc.c ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/pmc.c ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/pmc.c ****  *
  28:.././hal/sam3u1c/pmc.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/pmc.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/pmc.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/pmc.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/pmc.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/pmc.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/pmc.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/pmc.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/pmc.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/pmc.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/pmc.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/pmc.c ****  *
  40:.././hal/sam3u1c/pmc.c ****  * \asf_license_stop
  41:.././hal/sam3u1c/pmc.c ****  *
  42:.././hal/sam3u1c/pmc.c ****  */
  43:.././hal/sam3u1c/pmc.c **** 
  44:.././hal/sam3u1c/pmc.c **** #include "pmc.h"
  45:.././hal/sam3u1c/pmc.c **** 
  46:.././hal/sam3u1c/pmc.c **** #if (SAM3N)
  47:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    31
  48:.././hal/sam3u1c/pmc.c **** #elif (SAM3XA)
  49:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    44
  50:.././hal/sam3u1c/pmc.c **** #elif (SAM3U)
  51:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    29
  52:.././hal/sam3u1c/pmc.c **** #elif (SAM3S || SAM4S)
  53:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    34
  54:.././hal/sam3u1c/pmc.c **** #elif (SAM4E)
  55:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  56:.././hal/sam3u1c/pmc.c **** #elif (SAM4N)
  57:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    31
  58:.././hal/sam3u1c/pmc.c **** #elif (SAM4C || SAM4CM || SAM4CP)
  59:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    43
  60:.././hal/sam3u1c/pmc.c **** #elif (SAMG51)
  61:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  62:.././hal/sam3u1c/pmc.c **** #elif (SAMG53)
  63:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  64:.././hal/sam3u1c/pmc.c **** #elif (SAMG54)
  65:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    47
  66:.././hal/sam3u1c/pmc.c **** #elif (SAMG55)
  67:.././hal/sam3u1c/pmc.c **** # define MAX_PERIPH_ID    50
  68:.././hal/sam3u1c/pmc.c **** #endif
  69:.././hal/sam3u1c/pmc.c **** 
  70:.././hal/sam3u1c/pmc.c **** /// @cond 0
  71:.././hal/sam3u1c/pmc.c **** /**INDENT-OFF**/
  72:.././hal/sam3u1c/pmc.c **** #ifdef __cplusplus
  73:.././hal/sam3u1c/pmc.c **** extern "C" {
  74:.././hal/sam3u1c/pmc.c **** #endif
  75:.././hal/sam3u1c/pmc.c **** /**INDENT-ON**/
  76:.././hal/sam3u1c/pmc.c **** /// @endcond
  77:.././hal/sam3u1c/pmc.c **** 
  78:.././hal/sam3u1c/pmc.c **** /**
  79:.././hal/sam3u1c/pmc.c ****  * \defgroup sam_drivers_pmc_group Power Management Controller (PMC)
  80:.././hal/sam3u1c/pmc.c ****  *
  81:.././hal/sam3u1c/pmc.c ****  * \par Purpose
  82:.././hal/sam3u1c/pmc.c ****  *
  83:.././hal/sam3u1c/pmc.c ****  * The Power Management Controller (PMC) optimizes power consumption by
  84:.././hal/sam3u1c/pmc.c ****  * controlling all system and user peripheral clocks. The PMC enables/disables
  85:.././hal/sam3u1c/pmc.c ****  * the clock inputs to many of the peripherals and the Cortex-M Processor.
  86:.././hal/sam3u1c/pmc.c ****  *
  87:.././hal/sam3u1c/pmc.c ****  * @{
  88:.././hal/sam3u1c/pmc.c ****  */
  89:.././hal/sam3u1c/pmc.c **** 
  90:.././hal/sam3u1c/pmc.c **** /**
  91:.././hal/sam3u1c/pmc.c ****  * \brief Set the prescaler of the MCK.
  92:.././hal/sam3u1c/pmc.c ****  *
  93:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Prescaler value.
  94:.././hal/sam3u1c/pmc.c ****  */
  95:.././hal/sam3u1c/pmc.c **** void pmc_mck_set_prescaler(uint32_t ul_pres)
  96:.././hal/sam3u1c/pmc.c **** {
  38              	 .loc 1 96 1
  39              	 .cfi_startproc
  40              	 
  41              	 
  42              	 
  43 0000 80B4     	 push {r7}
  44              	.LCFI0:
  45              	 .cfi_def_cfa_offset 4
  46              	 .cfi_offset 7,-4
  47 0002 83B0     	 sub sp,sp,#12
  48              	.LCFI1:
  49              	 .cfi_def_cfa_offset 16
  50 0004 00AF     	 add r7,sp,#0
  51              	.LCFI2:
  52              	 .cfi_def_cfa_register 7
  53 0006 7860     	 str r0,[r7,#4]
  97:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
  98:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  54              	 .loc 1 98 8
  55 0008 0A4B     	 ldr r3,.L3
  56 000a 1B6B     	 ldr r3,[r3,#48]
  57              	 .loc 1 98 19
  58 000c 23F07002 	 bic r2,r3,#112
  97:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
  59              	 .loc 1 97 5
  60 0010 0849     	 ldr r1,.L3
  61              	 .loc 1 98 43
  62 0012 7B68     	 ldr r3,[r7,#4]
  63 0014 1343     	 orrs r3,r3,r2
  97:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
  64              	 .loc 1 97 16
  65 0016 0B63     	 str r3,[r1,#48]
  99:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  66              	 .loc 1 99 8
  67 0018 00BF     	 nop
  68              	.L2:
  69              	 .loc 1 99 14 discriminator 1
  70 001a 064B     	 ldr r3,.L3
  71 001c 9B6E     	 ldr r3,[r3,#104]
  72              	 .loc 1 99 23 discriminator 1
  73 001e 03F00803 	 and r3,r3,#8
  74              	 .loc 1 99 8 discriminator 1
  75 0022 002B     	 cmp r3,#0
  76 0024 F9D0     	 beq .L2
 100:.././hal/sam3u1c/pmc.c **** }
  77              	 .loc 1 100 1
  78 0026 00BF     	 nop
  79 0028 00BF     	 nop
  80 002a 0C37     	 adds r7,r7,#12
  81              	.LCFI3:
  82              	 .cfi_def_cfa_offset 4
  83 002c BD46     	 mov sp,r7
  84              	.LCFI4:
  85              	 .cfi_def_cfa_register 13
  86              	 
  87 002e 80BC     	 pop {r7}
  88              	.LCFI5:
  89              	 .cfi_restore 7
  90              	 .cfi_def_cfa_offset 0
  91 0030 7047     	 bx lr
  92              	.L4:
  93 0032 00BF     	 .align 2
  94              	.L3:
  95 0034 00040E40 	 .word 1074660352
  96              	 .cfi_endproc
  97              	.LFE69:
  99              	 .section .text.pmc_mck_set_source,"ax",%progbits
 100              	 .align 1
 101              	 .global pmc_mck_set_source
 102              	 .syntax unified
 103              	 .thumb
 104              	 .thumb_func
 105              	 .fpu softvfp
 107              	pmc_mck_set_source:
 108              	.LFB70:
 101:.././hal/sam3u1c/pmc.c **** 
 102:.././hal/sam3u1c/pmc.c **** /**
 103:.././hal/sam3u1c/pmc.c ****  * \brief Set the source of the MCK.
 104:.././hal/sam3u1c/pmc.c ****  *
 105:.././hal/sam3u1c/pmc.c ****  * \param ul_source Source selection value.
 106:.././hal/sam3u1c/pmc.c ****  */
 107:.././hal/sam3u1c/pmc.c **** void pmc_mck_set_source(uint32_t ul_source)
 108:.././hal/sam3u1c/pmc.c **** {
 109              	 .loc 1 108 1
 110              	 .cfi_startproc
 111              	 
 112              	 
 113              	 
 114 0000 80B4     	 push {r7}
 115              	.LCFI6:
 116              	 .cfi_def_cfa_offset 4
 117              	 .cfi_offset 7,-4
 118 0002 83B0     	 sub sp,sp,#12
 119              	.LCFI7:
 120              	 .cfi_def_cfa_offset 16
 121 0004 00AF     	 add r7,sp,#0
 122              	.LCFI8:
 123              	 .cfi_def_cfa_register 7
 124 0006 7860     	 str r0,[r7,#4]
 109:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
 110:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) | ul_source;
 125              	 .loc 1 110 8
 126 0008 0A4B     	 ldr r3,.L7
 127 000a 1B6B     	 ldr r3,[r3,#48]
 128              	 .loc 1 110 19
 129 000c 23F00302 	 bic r2,r3,#3
 109:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
 130              	 .loc 1 109 5
 131 0010 0849     	 ldr r1,.L7
 132              	 .loc 1 110 42
 133 0012 7B68     	 ldr r3,[r7,#4]
 134 0014 1343     	 orrs r3,r3,r2
 109:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
 135              	 .loc 1 109 16
 136 0016 0B63     	 str r3,[r1,#48]
 111:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 137              	 .loc 1 111 8
 138 0018 00BF     	 nop
 139              	.L6:
 140              	 .loc 1 111 14 discriminator 1
 141 001a 064B     	 ldr r3,.L7
 142 001c 9B6E     	 ldr r3,[r3,#104]
 143              	 .loc 1 111 23 discriminator 1
 144 001e 03F00803 	 and r3,r3,#8
 145              	 .loc 1 111 8 discriminator 1
 146 0022 002B     	 cmp r3,#0
 147 0024 F9D0     	 beq .L6
 112:.././hal/sam3u1c/pmc.c **** }
 148              	 .loc 1 112 1
 149 0026 00BF     	 nop
 150 0028 00BF     	 nop
 151 002a 0C37     	 adds r7,r7,#12
 152              	.LCFI9:
 153              	 .cfi_def_cfa_offset 4
 154 002c BD46     	 mov sp,r7
 155              	.LCFI10:
 156              	 .cfi_def_cfa_register 13
 157              	 
 158 002e 80BC     	 pop {r7}
 159              	.LCFI11:
 160              	 .cfi_restore 7
 161              	 .cfi_def_cfa_offset 0
 162 0030 7047     	 bx lr
 163              	.L8:
 164 0032 00BF     	 .align 2
 165              	.L7:
 166 0034 00040E40 	 .word 1074660352
 167              	 .cfi_endproc
 168              	.LFE70:
 170              	 .section .text.pmc_switch_mck_to_sclk,"ax",%progbits
 171              	 .align 1
 172              	 .global pmc_switch_mck_to_sclk
 173              	 .syntax unified
 174              	 .thumb
 175              	 .thumb_func
 176              	 .fpu softvfp
 178              	pmc_switch_mck_to_sclk:
 179              	.LFB71:
 113:.././hal/sam3u1c/pmc.c **** 
 114:.././hal/sam3u1c/pmc.c **** /**
 115:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to slow clock.
 116:.././hal/sam3u1c/pmc.c ****  *
 117:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 118:.././hal/sam3u1c/pmc.c ****  *
 119:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 120:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 121:.././hal/sam3u1c/pmc.c ****  */
 122:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_sclk(uint32_t ul_pres)
 123:.././hal/sam3u1c/pmc.c **** {
 180              	 .loc 1 123 1
 181              	 .cfi_startproc
 182              	 
 183              	 
 184              	 
 185 0000 80B4     	 push {r7}
 186              	.LCFI12:
 187              	 .cfi_def_cfa_offset 4
 188              	 .cfi_offset 7,-4
 189 0002 85B0     	 sub sp,sp,#20
 190              	.LCFI13:
 191              	 .cfi_def_cfa_offset 24
 192 0004 00AF     	 add r7,sp,#0
 193              	.LCFI14:
 194              	 .cfi_def_cfa_register 7
 195 0006 7860     	 str r0,[r7,#4]
 124:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 125:.././hal/sam3u1c/pmc.c **** 
 126:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 196              	 .loc 1 126 22
 197 0008 1B4B     	 ldr r3,.L17
 198 000a 1B6B     	 ldr r3,[r3,#48]
 199              	 .loc 1 126 5
 200 000c 1A4A     	 ldr r2,.L17
 201              	 .loc 1 126 56
 202 000e 23F00303 	 bic r3,r3,#3
 203              	 .loc 1 126 16
 204 0012 1363     	 str r3,[r2,#48]
 127:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_SLOW_CLK;
 128:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 205              	 .loc 1 128 18
 206 0014 4FF40063 	 mov r3,#2048
 207 0018 FB60     	 str r3,[r7,#12]
 208              	 .loc 1 128 2
 209 001a 07E0     	 b .L10
 210              	.L13:
 129:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 130:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 211              	 .loc 1 130 6
 212 001c FB68     	 ldr r3,[r7,#12]
 213 001e 002B     	 cmp r3,#0
 214 0020 01D1     	 bne .L11
 131:.././hal/sam3u1c/pmc.c **** 			return 1;
 215              	 .loc 1 131 11
 216 0022 0123     	 movs r3,#1
 217 0024 23E0     	 b .L12
 218              	.L11:
 129:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 219              	 .loc 1 129 4
 220 0026 FB68     	 ldr r3,[r7,#12]
 221 0028 013B     	 subs r3,r3,#1
 222 002a FB60     	 str r3,[r7,#12]
 223              	.L10:
 128:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 224              	 .loc 1 128 38 discriminator 1
 225 002c 124B     	 ldr r3,.L17
 226 002e 9B6E     	 ldr r3,[r3,#104]
 128:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 227              	 .loc 1 128 47 discriminator 1
 228 0030 03F00803 	 and r3,r3,#8
 128:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 229              	 .loc 1 128 2 discriminator 1
 230 0034 002B     	 cmp r3,#0
 231 0036 F1D0     	 beq .L13
 132:.././hal/sam3u1c/pmc.c **** 		}
 133:.././hal/sam3u1c/pmc.c **** 	}
 134:.././hal/sam3u1c/pmc.c **** 
 135:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 232              	 .loc 1 135 22
 233 0038 0F4B     	 ldr r3,.L17
 234 003a 1B6B     	 ldr r3,[r3,#48]
 235              	 .loc 1 135 33
 236 003c 23F07002 	 bic r2,r3,#112
 237              	 .loc 1 135 5
 238 0040 0D49     	 ldr r1,.L17
 239              	 .loc 1 135 57
 240 0042 7B68     	 ldr r3,[r7,#4]
 241 0044 1343     	 orrs r3,r3,r2
 242              	 .loc 1 135 16
 243 0046 0B63     	 str r3,[r1,#48]
 136:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 244              	 .loc 1 136 18
 245 0048 4FF40063 	 mov r3,#2048
 246 004c FB60     	 str r3,[r7,#12]
 247              	 .loc 1 136 2
 248 004e 07E0     	 b .L14
 249              	.L16:
 137:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 138:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 250              	 .loc 1 138 6
 251 0050 FB68     	 ldr r3,[r7,#12]
 252 0052 002B     	 cmp r3,#0
 253 0054 01D1     	 bne .L15
 139:.././hal/sam3u1c/pmc.c **** 			return 1;
 254              	 .loc 1 139 11
 255 0056 0123     	 movs r3,#1
 256 0058 09E0     	 b .L12
 257              	.L15:
 137:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 258              	 .loc 1 137 4
 259 005a FB68     	 ldr r3,[r7,#12]
 260 005c 013B     	 subs r3,r3,#1
 261 005e FB60     	 str r3,[r7,#12]
 262              	.L14:
 136:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 263              	 .loc 1 136 38 discriminator 1
 264 0060 054B     	 ldr r3,.L17
 265 0062 9B6E     	 ldr r3,[r3,#104]
 136:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 266              	 .loc 1 136 47 discriminator 1
 267 0064 03F00803 	 and r3,r3,#8
 136:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 268              	 .loc 1 136 2 discriminator 1
 269 0068 002B     	 cmp r3,#0
 270 006a F1D0     	 beq .L16
 140:.././hal/sam3u1c/pmc.c **** 		}
 141:.././hal/sam3u1c/pmc.c **** 	}
 142:.././hal/sam3u1c/pmc.c **** 
 143:.././hal/sam3u1c/pmc.c **** 	return 0;
 271              	 .loc 1 143 9
 272 006c 0023     	 movs r3,#0
 273              	.L12:
 144:.././hal/sam3u1c/pmc.c **** }
 274              	 .loc 1 144 1
 275 006e 1846     	 mov r0,r3
 276 0070 1437     	 adds r7,r7,#20
 277              	.LCFI15:
 278              	 .cfi_def_cfa_offset 4
 279 0072 BD46     	 mov sp,r7
 280              	.LCFI16:
 281              	 .cfi_def_cfa_register 13
 282              	 
 283 0074 80BC     	 pop {r7}
 284              	.LCFI17:
 285              	 .cfi_restore 7
 286              	 .cfi_def_cfa_offset 0
 287 0076 7047     	 bx lr
 288              	.L18:
 289              	 .align 2
 290              	.L17:
 291 0078 00040E40 	 .word 1074660352
 292              	 .cfi_endproc
 293              	.LFE71:
 295              	 .section .text.pmc_switch_mck_to_mainck,"ax",%progbits
 296              	 .align 1
 297              	 .global pmc_switch_mck_to_mainck
 298              	 .syntax unified
 299              	 .thumb
 300              	 .thumb_func
 301              	 .fpu softvfp
 303              	pmc_switch_mck_to_mainck:
 304              	.LFB72:
 145:.././hal/sam3u1c/pmc.c **** 
 146:.././hal/sam3u1c/pmc.c **** /**
 147:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to main clock.
 148:.././hal/sam3u1c/pmc.c ****  *
 149:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 150:.././hal/sam3u1c/pmc.c ****  *
 151:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 152:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 153:.././hal/sam3u1c/pmc.c ****  */
 154:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
 155:.././hal/sam3u1c/pmc.c **** {
 305              	 .loc 1 155 1
 306              	 .cfi_startproc
 307              	 
 308              	 
 309              	 
 310 0000 80B4     	 push {r7}
 311              	.LCFI18:
 312              	 .cfi_def_cfa_offset 4
 313              	 .cfi_offset 7,-4
 314 0002 85B0     	 sub sp,sp,#20
 315              	.LCFI19:
 316              	 .cfi_def_cfa_offset 24
 317 0004 00AF     	 add r7,sp,#0
 318              	.LCFI20:
 319              	 .cfi_def_cfa_register 7
 320 0006 7860     	 str r0,[r7,#4]
 156:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 157:.././hal/sam3u1c/pmc.c **** 
 158:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 321              	 .loc 1 158 22
 322 0008 1C4B     	 ldr r3,.L27
 323 000a 1B6B     	 ldr r3,[r3,#48]
 324              	 .loc 1 158 33
 325 000c 23F00303 	 bic r3,r3,#3
 326              	 .loc 1 158 5
 327 0010 1A4A     	 ldr r2,.L27
 328              	 .loc 1 158 56
 329 0012 43F00103 	 orr r3,r3,#1
 330              	 .loc 1 158 16
 331 0016 1363     	 str r3,[r2,#48]
 159:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_MAIN_CLK;
 160:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 332              	 .loc 1 160 18
 333 0018 4FF40063 	 mov r3,#2048
 334 001c FB60     	 str r3,[r7,#12]
 335              	 .loc 1 160 2
 336 001e 07E0     	 b .L20
 337              	.L23:
 161:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 162:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 338              	 .loc 1 162 6
 339 0020 FB68     	 ldr r3,[r7,#12]
 340 0022 002B     	 cmp r3,#0
 341 0024 01D1     	 bne .L21
 163:.././hal/sam3u1c/pmc.c **** 			return 1;
 342              	 .loc 1 163 11
 343 0026 0123     	 movs r3,#1
 344 0028 23E0     	 b .L22
 345              	.L21:
 161:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 346              	 .loc 1 161 4
 347 002a FB68     	 ldr r3,[r7,#12]
 348 002c 013B     	 subs r3,r3,#1
 349 002e FB60     	 str r3,[r7,#12]
 350              	.L20:
 160:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 351              	 .loc 1 160 38 discriminator 1
 352 0030 124B     	 ldr r3,.L27
 353 0032 9B6E     	 ldr r3,[r3,#104]
 160:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 354              	 .loc 1 160 47 discriminator 1
 355 0034 03F00803 	 and r3,r3,#8
 160:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 356              	 .loc 1 160 2 discriminator 1
 357 0038 002B     	 cmp r3,#0
 358 003a F1D0     	 beq .L23
 164:.././hal/sam3u1c/pmc.c **** 		}
 165:.././hal/sam3u1c/pmc.c **** 	}
 166:.././hal/sam3u1c/pmc.c **** 
 167:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 359              	 .loc 1 167 22
 360 003c 0F4B     	 ldr r3,.L27
 361 003e 1B6B     	 ldr r3,[r3,#48]
 362              	 .loc 1 167 33
 363 0040 23F07002 	 bic r2,r3,#112
 364              	 .loc 1 167 5
 365 0044 0D49     	 ldr r1,.L27
 366              	 .loc 1 167 57
 367 0046 7B68     	 ldr r3,[r7,#4]
 368 0048 1343     	 orrs r3,r3,r2
 369              	 .loc 1 167 16
 370 004a 0B63     	 str r3,[r1,#48]
 168:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 371              	 .loc 1 168 18
 372 004c 4FF40063 	 mov r3,#2048
 373 0050 FB60     	 str r3,[r7,#12]
 374              	 .loc 1 168 2
 375 0052 07E0     	 b .L24
 376              	.L26:
 169:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 170:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 377              	 .loc 1 170 6
 378 0054 FB68     	 ldr r3,[r7,#12]
 379 0056 002B     	 cmp r3,#0
 380 0058 01D1     	 bne .L25
 171:.././hal/sam3u1c/pmc.c **** 			return 1;
 381              	 .loc 1 171 11
 382 005a 0123     	 movs r3,#1
 383 005c 09E0     	 b .L22
 384              	.L25:
 169:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 385              	 .loc 1 169 4
 386 005e FB68     	 ldr r3,[r7,#12]
 387 0060 013B     	 subs r3,r3,#1
 388 0062 FB60     	 str r3,[r7,#12]
 389              	.L24:
 168:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 390              	 .loc 1 168 38 discriminator 1
 391 0064 054B     	 ldr r3,.L27
 392 0066 9B6E     	 ldr r3,[r3,#104]
 168:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 393              	 .loc 1 168 47 discriminator 1
 394 0068 03F00803 	 and r3,r3,#8
 168:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 395              	 .loc 1 168 2 discriminator 1
 396 006c 002B     	 cmp r3,#0
 397 006e F1D0     	 beq .L26
 172:.././hal/sam3u1c/pmc.c **** 		}
 173:.././hal/sam3u1c/pmc.c **** 	}
 174:.././hal/sam3u1c/pmc.c **** 
 175:.././hal/sam3u1c/pmc.c **** 	return 0;
 398              	 .loc 1 175 9
 399 0070 0023     	 movs r3,#0
 400              	.L22:
 176:.././hal/sam3u1c/pmc.c **** }
 401              	 .loc 1 176 1
 402 0072 1846     	 mov r0,r3
 403 0074 1437     	 adds r7,r7,#20
 404              	.LCFI21:
 405              	 .cfi_def_cfa_offset 4
 406 0076 BD46     	 mov sp,r7
 407              	.LCFI22:
 408              	 .cfi_def_cfa_register 13
 409              	 
 410 0078 80BC     	 pop {r7}
 411              	.LCFI23:
 412              	 .cfi_restore 7
 413              	 .cfi_def_cfa_offset 0
 414 007a 7047     	 bx lr
 415              	.L28:
 416              	 .align 2
 417              	.L27:
 418 007c 00040E40 	 .word 1074660352
 419              	 .cfi_endproc
 420              	.LFE72:
 422              	 .section .text.pmc_switch_mck_to_pllack,"ax",%progbits
 423              	 .align 1
 424              	 .global pmc_switch_mck_to_pllack
 425              	 .syntax unified
 426              	 .thumb
 427              	 .thumb_func
 428              	 .fpu softvfp
 430              	pmc_switch_mck_to_pllack:
 431              	.LFB73:
 177:.././hal/sam3u1c/pmc.c **** 
 178:.././hal/sam3u1c/pmc.c **** /**
 179:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to PLLA clock.
 180:.././hal/sam3u1c/pmc.c ****  *
 181:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 182:.././hal/sam3u1c/pmc.c ****  *
 183:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 184:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 185:.././hal/sam3u1c/pmc.c ****  */
 186:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
 187:.././hal/sam3u1c/pmc.c **** {
 432              	 .loc 1 187 1
 433              	 .cfi_startproc
 434              	 
 435              	 
 436              	 
 437 0000 80B4     	 push {r7}
 438              	.LCFI24:
 439              	 .cfi_def_cfa_offset 4
 440              	 .cfi_offset 7,-4
 441 0002 85B0     	 sub sp,sp,#20
 442              	.LCFI25:
 443              	 .cfi_def_cfa_offset 24
 444 0004 00AF     	 add r7,sp,#0
 445              	.LCFI26:
 446              	 .cfi_def_cfa_register 7
 447 0006 7860     	 str r0,[r7,#4]
 188:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 189:.././hal/sam3u1c/pmc.c **** 
 190:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 448              	 .loc 1 190 22
 449 0008 1C4B     	 ldr r3,.L37
 450 000a 1B6B     	 ldr r3,[r3,#48]
 451              	 .loc 1 190 33
 452 000c 23F07002 	 bic r2,r3,#112
 453              	 .loc 1 190 5
 454 0010 1A49     	 ldr r1,.L37
 455              	 .loc 1 190 57
 456 0012 7B68     	 ldr r3,[r7,#4]
 457 0014 1343     	 orrs r3,r3,r2
 458              	 .loc 1 190 16
 459 0016 0B63     	 str r3,[r1,#48]
 191:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 460              	 .loc 1 191 18
 461 0018 4FF40063 	 mov r3,#2048
 462 001c FB60     	 str r3,[r7,#12]
 463              	 .loc 1 191 2
 464 001e 07E0     	 b .L30
 465              	.L33:
 192:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 193:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 466              	 .loc 1 193 6
 467 0020 FB68     	 ldr r3,[r7,#12]
 468 0022 002B     	 cmp r3,#0
 469 0024 01D1     	 bne .L31
 194:.././hal/sam3u1c/pmc.c **** 			return 1;
 470              	 .loc 1 194 11
 471 0026 0123     	 movs r3,#1
 472 0028 23E0     	 b .L32
 473              	.L31:
 192:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 474              	 .loc 1 192 4
 475 002a FB68     	 ldr r3,[r7,#12]
 476 002c 013B     	 subs r3,r3,#1
 477 002e FB60     	 str r3,[r7,#12]
 478              	.L30:
 191:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 479              	 .loc 1 191 38 discriminator 1
 480 0030 124B     	 ldr r3,.L37
 481 0032 9B6E     	 ldr r3,[r3,#104]
 191:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 482              	 .loc 1 191 47 discriminator 1
 483 0034 03F00803 	 and r3,r3,#8
 191:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 484              	 .loc 1 191 2 discriminator 1
 485 0038 002B     	 cmp r3,#0
 486 003a F1D0     	 beq .L33
 195:.././hal/sam3u1c/pmc.c **** 		}
 196:.././hal/sam3u1c/pmc.c **** 	}
 197:.././hal/sam3u1c/pmc.c **** 
 198:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 487              	 .loc 1 198 22
 488 003c 0F4B     	 ldr r3,.L37
 489 003e 1B6B     	 ldr r3,[r3,#48]
 490              	 .loc 1 198 33
 491 0040 23F00303 	 bic r3,r3,#3
 492              	 .loc 1 198 5
 493 0044 0D4A     	 ldr r2,.L37
 494              	 .loc 1 198 56
 495 0046 43F00203 	 orr r3,r3,#2
 496              	 .loc 1 198 16
 497 004a 1363     	 str r3,[r2,#48]
 199:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_PLLA_CLK;
 200:.././hal/sam3u1c/pmc.c **** 
 201:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 498              	 .loc 1 201 18
 499 004c 4FF40063 	 mov r3,#2048
 500 0050 FB60     	 str r3,[r7,#12]
 501              	 .loc 1 201 2
 502 0052 07E0     	 b .L34
 503              	.L36:
 202:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 203:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 504              	 .loc 1 203 6
 505 0054 FB68     	 ldr r3,[r7,#12]
 506 0056 002B     	 cmp r3,#0
 507 0058 01D1     	 bne .L35
 204:.././hal/sam3u1c/pmc.c **** 			return 1;
 508              	 .loc 1 204 11
 509 005a 0123     	 movs r3,#1
 510 005c 09E0     	 b .L32
 511              	.L35:
 202:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 512              	 .loc 1 202 4
 513 005e FB68     	 ldr r3,[r7,#12]
 514 0060 013B     	 subs r3,r3,#1
 515 0062 FB60     	 str r3,[r7,#12]
 516              	.L34:
 201:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 517              	 .loc 1 201 38 discriminator 1
 518 0064 054B     	 ldr r3,.L37
 519 0066 9B6E     	 ldr r3,[r3,#104]
 201:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 520              	 .loc 1 201 47 discriminator 1
 521 0068 03F00803 	 and r3,r3,#8
 201:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 522              	 .loc 1 201 2 discriminator 1
 523 006c 002B     	 cmp r3,#0
 524 006e F1D0     	 beq .L36
 205:.././hal/sam3u1c/pmc.c **** 		}
 206:.././hal/sam3u1c/pmc.c **** 	}
 207:.././hal/sam3u1c/pmc.c **** 
 208:.././hal/sam3u1c/pmc.c **** 	return 0;
 525              	 .loc 1 208 9
 526 0070 0023     	 movs r3,#0
 527              	.L32:
 209:.././hal/sam3u1c/pmc.c **** }
 528              	 .loc 1 209 1
 529 0072 1846     	 mov r0,r3
 530 0074 1437     	 adds r7,r7,#20
 531              	.LCFI27:
 532              	 .cfi_def_cfa_offset 4
 533 0076 BD46     	 mov sp,r7
 534              	.LCFI28:
 535              	 .cfi_def_cfa_register 13
 536              	 
 537 0078 80BC     	 pop {r7}
 538              	.LCFI29:
 539              	 .cfi_restore 7
 540              	 .cfi_def_cfa_offset 0
 541 007a 7047     	 bx lr
 542              	.L38:
 543              	 .align 2
 544              	.L37:
 545 007c 00040E40 	 .word 1074660352
 546              	 .cfi_endproc
 547              	.LFE73:
 549              	 .section .text.pmc_switch_mck_to_upllck,"ax",%progbits
 550              	 .align 1
 551              	 .global pmc_switch_mck_to_upllck
 552              	 .syntax unified
 553              	 .thumb
 554              	 .thumb_func
 555              	 .fpu softvfp
 557              	pmc_switch_mck_to_upllck:
 558              	.LFB74:
 210:.././hal/sam3u1c/pmc.c **** 
 211:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 212:.././hal/sam3u1c/pmc.c **** /**
 213:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to PLLB clock.
 214:.././hal/sam3u1c/pmc.c ****  *
 215:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 216:.././hal/sam3u1c/pmc.c ****  *
 217:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 218:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 219:.././hal/sam3u1c/pmc.c ****  */
 220:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
 221:.././hal/sam3u1c/pmc.c **** {
 222:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 223:.././hal/sam3u1c/pmc.c **** 
 224:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 225:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 226:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 227:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 228:.././hal/sam3u1c/pmc.c **** 			return 1;
 229:.././hal/sam3u1c/pmc.c **** 		}
 230:.././hal/sam3u1c/pmc.c **** 	}
 231:.././hal/sam3u1c/pmc.c **** 
 232:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 233:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_PLLB_CLK;
 234:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 235:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 236:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 237:.././hal/sam3u1c/pmc.c **** 			return 1;
 238:.././hal/sam3u1c/pmc.c **** 		}
 239:.././hal/sam3u1c/pmc.c **** 	}
 240:.././hal/sam3u1c/pmc.c **** 
 241:.././hal/sam3u1c/pmc.c **** 	return 0;
 242:.././hal/sam3u1c/pmc.c **** }
 243:.././hal/sam3u1c/pmc.c **** #endif
 244:.././hal/sam3u1c/pmc.c **** 
 245:.././hal/sam3u1c/pmc.c **** #if (SAM3XA || SAM3U)
 246:.././hal/sam3u1c/pmc.c **** /**
 247:.././hal/sam3u1c/pmc.c ****  * \brief Switch master clock source selection to UPLL clock.
 248:.././hal/sam3u1c/pmc.c ****  *
 249:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Processor clock prescaler.
 250:.././hal/sam3u1c/pmc.c ****  *
 251:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 252:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 253:.././hal/sam3u1c/pmc.c ****  */
 254:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_mck_to_upllck(uint32_t ul_pres)
 255:.././hal/sam3u1c/pmc.c **** {
 559              	 .loc 1 255 1
 560              	 .cfi_startproc
 561              	 
 562              	 
 563              	 
 564 0000 80B4     	 push {r7}
 565              	.LCFI30:
 566              	 .cfi_def_cfa_offset 4
 567              	 .cfi_offset 7,-4
 568 0002 85B0     	 sub sp,sp,#20
 569              	.LCFI31:
 570              	 .cfi_def_cfa_offset 24
 571 0004 00AF     	 add r7,sp,#0
 572              	.LCFI32:
 573              	 .cfi_def_cfa_register 7
 574 0006 7860     	 str r0,[r7,#4]
 256:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 257:.././hal/sam3u1c/pmc.c **** 
 258:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 575              	 .loc 1 258 22
 576 0008 1B4B     	 ldr r3,.L47
 577 000a 1B6B     	 ldr r3,[r3,#48]
 578              	 .loc 1 258 33
 579 000c 23F07002 	 bic r2,r3,#112
 580              	 .loc 1 258 5
 581 0010 1949     	 ldr r1,.L47
 582              	 .loc 1 258 57
 583 0012 7B68     	 ldr r3,[r7,#4]
 584 0014 1343     	 orrs r3,r3,r2
 585              	 .loc 1 258 16
 586 0016 0B63     	 str r3,[r1,#48]
 259:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 587              	 .loc 1 259 18
 588 0018 4FF40063 	 mov r3,#2048
 589 001c FB60     	 str r3,[r7,#12]
 590              	 .loc 1 259 2
 591 001e 07E0     	 b .L40
 592              	.L43:
 260:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 261:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 593              	 .loc 1 261 6
 594 0020 FB68     	 ldr r3,[r7,#12]
 595 0022 002B     	 cmp r3,#0
 596 0024 01D1     	 bne .L41
 262:.././hal/sam3u1c/pmc.c **** 			return 1;
 597              	 .loc 1 262 11
 598 0026 0123     	 movs r3,#1
 599 0028 21E0     	 b .L42
 600              	.L41:
 260:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 601              	 .loc 1 260 4
 602 002a FB68     	 ldr r3,[r7,#12]
 603 002c 013B     	 subs r3,r3,#1
 604 002e FB60     	 str r3,[r7,#12]
 605              	.L40:
 259:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 606              	 .loc 1 259 38 discriminator 1
 607 0030 114B     	 ldr r3,.L47
 608 0032 9B6E     	 ldr r3,[r3,#104]
 259:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 609              	 .loc 1 259 47 discriminator 1
 610 0034 03F00803 	 and r3,r3,#8
 259:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 611              	 .loc 1 259 2 discriminator 1
 612 0038 002B     	 cmp r3,#0
 613 003a F1D0     	 beq .L43
 263:.././hal/sam3u1c/pmc.c **** 		}
 264:.././hal/sam3u1c/pmc.c **** 	}
 265:.././hal/sam3u1c/pmc.c **** 
 266:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 614              	 .loc 1 266 22
 615 003c 0E4B     	 ldr r3,.L47
 616 003e 1B6B     	 ldr r3,[r3,#48]
 617              	 .loc 1 266 5
 618 0040 0D4A     	 ldr r2,.L47
 619              	 .loc 1 266 56
 620 0042 43F00303 	 orr r3,r3,#3
 621              	 .loc 1 266 16
 622 0046 1363     	 str r3,[r2,#48]
 267:.././hal/sam3u1c/pmc.c **** 			PMC_MCKR_CSS_UPLL_CLK;
 268:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 623              	 .loc 1 268 18
 624 0048 4FF40063 	 mov r3,#2048
 625 004c FB60     	 str r3,[r7,#12]
 626              	 .loc 1 268 2
 627 004e 07E0     	 b .L44
 628              	.L46:
 269:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 270:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 629              	 .loc 1 270 6
 630 0050 FB68     	 ldr r3,[r7,#12]
 631 0052 002B     	 cmp r3,#0
 632 0054 01D1     	 bne .L45
 271:.././hal/sam3u1c/pmc.c **** 			return 1;
 633              	 .loc 1 271 11
 634 0056 0123     	 movs r3,#1
 635 0058 09E0     	 b .L42
 636              	.L45:
 269:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 637              	 .loc 1 269 4
 638 005a FB68     	 ldr r3,[r7,#12]
 639 005c 013B     	 subs r3,r3,#1
 640 005e FB60     	 str r3,[r7,#12]
 641              	.L44:
 268:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 642              	 .loc 1 268 38 discriminator 1
 643 0060 054B     	 ldr r3,.L47
 644 0062 9B6E     	 ldr r3,[r3,#104]
 268:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 645              	 .loc 1 268 47 discriminator 1
 646 0064 03F00803 	 and r3,r3,#8
 268:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 647              	 .loc 1 268 2 discriminator 1
 648 0068 002B     	 cmp r3,#0
 649 006a F1D0     	 beq .L46
 272:.././hal/sam3u1c/pmc.c **** 		}
 273:.././hal/sam3u1c/pmc.c **** 	}
 274:.././hal/sam3u1c/pmc.c **** 
 275:.././hal/sam3u1c/pmc.c **** 	return 0;
 650              	 .loc 1 275 9
 651 006c 0023     	 movs r3,#0
 652              	.L42:
 276:.././hal/sam3u1c/pmc.c **** }
 653              	 .loc 1 276 1
 654 006e 1846     	 mov r0,r3
 655 0070 1437     	 adds r7,r7,#20
 656              	.LCFI33:
 657              	 .cfi_def_cfa_offset 4
 658 0072 BD46     	 mov sp,r7
 659              	.LCFI34:
 660              	 .cfi_def_cfa_register 13
 661              	 
 662 0074 80BC     	 pop {r7}
 663              	.LCFI35:
 664              	 .cfi_restore 7
 665              	 .cfi_def_cfa_offset 0
 666 0076 7047     	 bx lr
 667              	.L48:
 668              	 .align 2
 669              	.L47:
 670 0078 00040E40 	 .word 1074660352
 671              	 .cfi_endproc
 672              	.LFE74:
 674              	 .section .text.pmc_switch_sclk_to_32kxtal,"ax",%progbits
 675              	 .align 1
 676              	 .global pmc_switch_sclk_to_32kxtal
 677              	 .syntax unified
 678              	 .thumb
 679              	 .thumb_func
 680              	 .fpu softvfp
 682              	pmc_switch_sclk_to_32kxtal:
 683              	.LFB75:
 277:.././hal/sam3u1c/pmc.c **** #endif
 278:.././hal/sam3u1c/pmc.c **** 
 279:.././hal/sam3u1c/pmc.c **** /**
 280:.././hal/sam3u1c/pmc.c ****  * \brief Switch slow clock source selection to external 32k (Xtal or Bypass).
 281:.././hal/sam3u1c/pmc.c ****  *
 282:.././hal/sam3u1c/pmc.c ****  * \note This function disables the PLLs.
 283:.././hal/sam3u1c/pmc.c ****  *
 284:.././hal/sam3u1c/pmc.c ****  * \note Switching SCLK back to 32krc is only possible by shutting down the
 285:.././hal/sam3u1c/pmc.c ****  *       VDDIO power supply.
 286:.././hal/sam3u1c/pmc.c ****  *
 287:.././hal/sam3u1c/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 288:.././hal/sam3u1c/pmc.c ****  */
 289:.././hal/sam3u1c/pmc.c **** void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
 290:.././hal/sam3u1c/pmc.c **** {
 684              	 .loc 1 290 1
 685              	 .cfi_startproc
 686              	 
 687              	 
 688              	 
 689 0000 80B4     	 push {r7}
 690              	.LCFI36:
 691              	 .cfi_def_cfa_offset 4
 692              	 .cfi_offset 7,-4
 693 0002 83B0     	 sub sp,sp,#12
 694              	.LCFI37:
 695              	 .cfi_def_cfa_offset 16
 696 0004 00AF     	 add r7,sp,#0
 697              	.LCFI38:
 698              	 .cfi_def_cfa_register 7
 699 0006 7860     	 str r0,[r7,#4]
 291:.././hal/sam3u1c/pmc.c **** 	/* Set Bypass mode if required */
 292:.././hal/sam3u1c/pmc.c **** 	if (ul_bypass == 1) {
 700              	 .loc 1 292 5
 701 0008 7B68     	 ldr r3,[r7,#4]
 702 000a 012B     	 cmp r3,#1
 703 000c 07D1     	 bne .L50
 293:.././hal/sam3u1c/pmc.c **** 		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
 704              	 .loc 1 293 17
 705 000e 084B     	 ldr r3,.L51
 706 0010 9B68     	 ldr r3,[r3,#8]
 707 0012 074A     	 ldr r2,.L51
 708 0014 43F02543 	 orr r3,r3,#-1526726656
 709 0018 43F48013 	 orr r3,r3,#1048576
 710 001c 9360     	 str r3,[r2,#8]
 711              	.L50:
 294:.././hal/sam3u1c/pmc.c **** 			SUPC_MR_OSCBYPASS;
 295:.././hal/sam3u1c/pmc.c **** 	}
 296:.././hal/sam3u1c/pmc.c **** 
 297:.././hal/sam3u1c/pmc.c **** 	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
 712              	 .loc 1 297 6
 713 001e 044B     	 ldr r3,.L51
 714              	 .loc 1 297 16
 715 0020 044A     	 ldr r2,.L51+4
 716 0022 1A60     	 str r2,[r3]
 298:.././hal/sam3u1c/pmc.c **** }
 717              	 .loc 1 298 1
 718 0024 00BF     	 nop
 719 0026 0C37     	 adds r7,r7,#12
 720              	.LCFI39:
 721              	 .cfi_def_cfa_offset 4
 722 0028 BD46     	 mov sp,r7
 723              	.LCFI40:
 724              	 .cfi_def_cfa_register 13
 725              	 
 726 002a 80BC     	 pop {r7}
 727              	.LCFI41:
 728              	 .cfi_restore 7
 729              	 .cfi_def_cfa_offset 0
 730 002c 7047     	 bx lr
 731              	.L52:
 732 002e 00BF     	 .align 2
 733              	.L51:
 734 0030 10120E40 	 .word 1074663952
 735 0034 080000A5 	 .word -1526726648
 736              	 .cfi_endproc
 737              	.LFE75:
 739              	 .section .text.pmc_osc_is_ready_32kxtal,"ax",%progbits
 740              	 .align 1
 741              	 .global pmc_osc_is_ready_32kxtal
 742              	 .syntax unified
 743              	 .thumb
 744              	 .thumb_func
 745              	 .fpu softvfp
 747              	pmc_osc_is_ready_32kxtal:
 748              	.LFB76:
 299:.././hal/sam3u1c/pmc.c **** 
 300:.././hal/sam3u1c/pmc.c **** /**
 301:.././hal/sam3u1c/pmc.c ****  * \brief Check if the external 32k Xtal is ready.
 302:.././hal/sam3u1c/pmc.c ****  *
 303:.././hal/sam3u1c/pmc.c ****  * \retval 1 External 32k Xtal is ready.
 304:.././hal/sam3u1c/pmc.c ****  * \retval 0 External 32k Xtal is not ready.
 305:.././hal/sam3u1c/pmc.c ****  */
 306:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_32kxtal(void)
 307:.././hal/sam3u1c/pmc.c **** {
 749              	 .loc 1 307 1
 750              	 .cfi_startproc
 751              	 
 752              	 
 753              	 
 754 0000 80B4     	 push {r7}
 755              	.LCFI42:
 756              	 .cfi_def_cfa_offset 4
 757              	 .cfi_offset 7,-4
 758 0002 00AF     	 add r7,sp,#0
 759              	.LCFI43:
 760              	 .cfi_def_cfa_register 7
 308:.././hal/sam3u1c/pmc.c **** 	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
 761              	 .loc 1 308 15
 762 0004 094B     	 ldr r3,.L57
 763 0006 5B69     	 ldr r3,[r3,#20]
 764              	 .loc 1 308 25
 765 0008 03F08003 	 and r3,r3,#128
 309:.././hal/sam3u1c/pmc.c **** 			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
 766              	 .loc 1 309 4
 767 000c 002B     	 cmp r3,#0
 768 000e 07D0     	 beq .L54
 769              	 .loc 1 309 11 discriminator 1
 770 0010 074B     	 ldr r3,.L57+4
 771 0012 9B6E     	 ldr r3,[r3,#104]
 772              	 .loc 1 309 20 discriminator 1
 773 0014 03F08003 	 and r3,r3,#128
 774              	 .loc 1 309 4 discriminator 1
 775 0018 002B     	 cmp r3,#0
 776 001a 01D0     	 beq .L54
 777              	 .loc 1 309 4 is_stmt 0 discriminator 3
 778 001c 0123     	 movs r3,#1
 779 001e 00E0     	 b .L55
 780              	.L54:
 781              	 .loc 1 309 4 discriminator 4
 782 0020 0023     	 movs r3,#0
 783              	.L55:
 310:.././hal/sam3u1c/pmc.c **** }
 784              	 .loc 1 310 1 is_stmt 1 discriminator 6
 785 0022 1846     	 mov r0,r3
 786 0024 BD46     	 mov sp,r7
 787              	.LCFI44:
 788              	 .cfi_def_cfa_register 13
 789              	 
 790 0026 80BC     	 pop {r7}
 791              	.LCFI45:
 792              	 .cfi_restore 7
 793              	 .cfi_def_cfa_offset 0
 794 0028 7047     	 bx lr
 795              	.L58:
 796 002a 00BF     	 .align 2
 797              	.L57:
 798 002c 10120E40 	 .word 1074663952
 799 0030 00040E40 	 .word 1074660352
 800              	 .cfi_endproc
 801              	.LFE76:
 803              	 .section .text.pmc_switch_mainck_to_fastrc,"ax",%progbits
 804              	 .align 1
 805              	 .global pmc_switch_mainck_to_fastrc
 806              	 .syntax unified
 807              	 .thumb
 808              	 .thumb_func
 809              	 .fpu softvfp
 811              	pmc_switch_mainck_to_fastrc:
 812              	.LFB77:
 311:.././hal/sam3u1c/pmc.c **** 
 312:.././hal/sam3u1c/pmc.c **** /**
 313:.././hal/sam3u1c/pmc.c ****  * \brief Switch main clock source selection to internal fast RC.
 314:.././hal/sam3u1c/pmc.c ****  *
 315:.././hal/sam3u1c/pmc.c ****  * \param ul_moscrcf Fast RC oscillator(4/8/12Mhz).
 316:.././hal/sam3u1c/pmc.c ****  *
 317:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 318:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 319:.././hal/sam3u1c/pmc.c ****  * \retval 2 Invalid frequency.
 320:.././hal/sam3u1c/pmc.c ****  */
 321:.././hal/sam3u1c/pmc.c **** void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
 322:.././hal/sam3u1c/pmc.c **** {
 813              	 .loc 1 322 1
 814              	 .cfi_startproc
 815              	 
 816              	 
 817              	 
 818 0000 80B4     	 push {r7}
 819              	.LCFI46:
 820              	 .cfi_def_cfa_offset 4
 821              	 .cfi_offset 7,-4
 822 0002 83B0     	 sub sp,sp,#12
 823              	.LCFI47:
 824              	 .cfi_def_cfa_offset 16
 825 0004 00AF     	 add r7,sp,#0
 826              	.LCFI48:
 827              	 .cfi_def_cfa_register 7
 828 0006 7860     	 str r0,[r7,#4]
 323:.././hal/sam3u1c/pmc.c **** 	/* Enable Fast RC oscillator but DO NOT switch to RC now */
 324:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 829              	 .loc 1 324 16
 830 0008 184B     	 ldr r3,.L62
 831 000a 1B6A     	 ldr r3,[r3,#32]
 832 000c 174A     	 ldr r2,.L62
 833 000e 43F45C13 	 orr r3,r3,#3604480
 834 0012 43F00803 	 orr r3,r3,#8
 835 0016 1362     	 str r3,[r2,#32]
 325:.././hal/sam3u1c/pmc.c **** 
 326:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 327:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 836              	 .loc 1 327 8
 837 0018 00BF     	 nop
 838              	.L60:
 839              	 .loc 1 327 14 discriminator 1
 840 001a 144B     	 ldr r3,.L62
 841 001c 9B6E     	 ldr r3,[r3,#104]
 842              	 .loc 1 327 23 discriminator 1
 843 001e 03F40033 	 and r3,r3,#131072
 844              	 .loc 1 327 8 discriminator 1
 845 0022 002B     	 cmp r3,#0
 846 0024 F9D0     	 beq .L60
 328:.././hal/sam3u1c/pmc.c **** 
 329:.././hal/sam3u1c/pmc.c **** 	/* Change Fast RC oscillator frequency */
 330:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 847              	 .loc 1 330 22
 848 0026 114B     	 ldr r3,.L62
 849 0028 1B6A     	 ldr r3,[r3,#32]
 850              	 .loc 1 330 58
 851 002a 23F45C13 	 bic r3,r3,#3604480
 852 002e 23F07003 	 bic r3,r3,#112
 331:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 853              	 .loc 1 331 24
 854 0032 7A68     	 ldr r2,[r7,#4]
 855 0034 1343     	 orrs r3,r3,r2
 330:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 856              	 .loc 1 330 5
 857 0036 0D4A     	 ldr r2,.L62
 858              	 .loc 1 331 24
 859 0038 43F45C13 	 orr r3,r3,#3604480
 330:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 860              	 .loc 1 330 16
 861 003c 1362     	 str r3,[r2,#32]
 332:.././hal/sam3u1c/pmc.c **** 
 333:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 334:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 862              	 .loc 1 334 8
 863 003e 00BF     	 nop
 864              	.L61:
 865              	 .loc 1 334 14 discriminator 1
 866 0040 0A4B     	 ldr r3,.L62
 867 0042 9B6E     	 ldr r3,[r3,#104]
 868              	 .loc 1 334 23 discriminator 1
 869 0044 03F40033 	 and r3,r3,#131072
 870              	 .loc 1 334 8 discriminator 1
 871 0048 002B     	 cmp r3,#0
 872 004a F9D0     	 beq .L61
 335:.././hal/sam3u1c/pmc.c **** 
 336:.././hal/sam3u1c/pmc.c **** 	/* Switch to Fast RC */
 337:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
 873              	 .loc 1 337 22
 874 004c 074B     	 ldr r3,.L62
 875 004e 1B6A     	 ldr r3,[r3,#32]
 876              	 .loc 1 337 54
 877 0050 23F09B73 	 bic r3,r3,#20316160
 878 0054 23F48033 	 bic r3,r3,#65536
 879              	 .loc 1 337 5
 880 0058 044A     	 ldr r2,.L62
 881              	 .loc 1 337 54
 882 005a 43F45C13 	 orr r3,r3,#3604480
 883              	 .loc 1 337 16
 884 005e 1362     	 str r3,[r2,#32]
 338:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD;
 339:.././hal/sam3u1c/pmc.c **** }
 885              	 .loc 1 339 1
 886 0060 00BF     	 nop
 887 0062 0C37     	 adds r7,r7,#12
 888              	.LCFI49:
 889              	 .cfi_def_cfa_offset 4
 890 0064 BD46     	 mov sp,r7
 891              	.LCFI50:
 892              	 .cfi_def_cfa_register 13
 893              	 
 894 0066 80BC     	 pop {r7}
 895              	.LCFI51:
 896              	 .cfi_restore 7
 897              	 .cfi_def_cfa_offset 0
 898 0068 7047     	 bx lr
 899              	.L63:
 900 006a 00BF     	 .align 2
 901              	.L62:
 902 006c 00040E40 	 .word 1074660352
 903              	 .cfi_endproc
 904              	.LFE77:
 906              	 .section .text.pmc_osc_enable_fastrc,"ax",%progbits
 907              	 .align 1
 908              	 .global pmc_osc_enable_fastrc
 909              	 .syntax unified
 910              	 .thumb
 911              	 .thumb_func
 912              	 .fpu softvfp
 914              	pmc_osc_enable_fastrc:
 915              	.LFB78:
 340:.././hal/sam3u1c/pmc.c **** 
 341:.././hal/sam3u1c/pmc.c **** /**
 342:.././hal/sam3u1c/pmc.c ****  * \brief Enable fast RC oscillator.
 343:.././hal/sam3u1c/pmc.c ****  *
 344:.././hal/sam3u1c/pmc.c ****  * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 345:.././hal/sam3u1c/pmc.c ****  */
 346:.././hal/sam3u1c/pmc.c **** void pmc_osc_enable_fastrc(uint32_t ul_rc)
 347:.././hal/sam3u1c/pmc.c **** {
 916              	 .loc 1 347 1
 917              	 .cfi_startproc
 918              	 
 919              	 
 920              	 
 921 0000 80B4     	 push {r7}
 922              	.LCFI52:
 923              	 .cfi_def_cfa_offset 4
 924              	 .cfi_offset 7,-4
 925 0002 83B0     	 sub sp,sp,#12
 926              	.LCFI53:
 927              	 .cfi_def_cfa_offset 16
 928 0004 00AF     	 add r7,sp,#0
 929              	.LCFI54:
 930              	 .cfi_def_cfa_register 7
 931 0006 7860     	 str r0,[r7,#4]
 348:.././hal/sam3u1c/pmc.c **** 	/* Enable Fast RC oscillator but DO NOT switch to RC */
 349:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 932              	 .loc 1 349 16
 933 0008 134B     	 ldr r3,.L67
 934 000a 1B6A     	 ldr r3,[r3,#32]
 935 000c 124A     	 ldr r2,.L67
 936 000e 43F45C13 	 orr r3,r3,#3604480
 937 0012 43F00803 	 orr r3,r3,#8
 938 0016 1362     	 str r3,[r2,#32]
 350:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 351:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 939              	 .loc 1 351 8
 940 0018 00BF     	 nop
 941              	.L65:
 942              	 .loc 1 351 14 discriminator 1
 943 001a 0F4B     	 ldr r3,.L67
 944 001c 9B6E     	 ldr r3,[r3,#104]
 945              	 .loc 1 351 23 discriminator 1
 946 001e 03F40033 	 and r3,r3,#131072
 947              	 .loc 1 351 8 discriminator 1
 948 0022 002B     	 cmp r3,#0
 949 0024 F9D0     	 beq .L65
 352:.././hal/sam3u1c/pmc.c **** 
 353:.././hal/sam3u1c/pmc.c **** 	/* Change Fast RC oscillator frequency */
 354:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 950              	 .loc 1 354 22
 951 0026 0C4B     	 ldr r3,.L67
 952 0028 1B6A     	 ldr r3,[r3,#32]
 953              	 .loc 1 354 58
 954 002a 23F45C13 	 bic r3,r3,#3604480
 955 002e 23F07003 	 bic r3,r3,#112
 355:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 956              	 .loc 1 355 24
 957 0032 7A68     	 ldr r2,[r7,#4]
 958 0034 1343     	 orrs r3,r3,r2
 354:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 959              	 .loc 1 354 5
 960 0036 084A     	 ldr r2,.L67
 961              	 .loc 1 355 24
 962 0038 43F45C13 	 orr r3,r3,#3604480
 354:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 963              	 .loc 1 354 16
 964 003c 1362     	 str r3,[r2,#32]
 356:.././hal/sam3u1c/pmc.c **** 	/* Wait the Fast RC to stabilize */
 357:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 965              	 .loc 1 357 8
 966 003e 00BF     	 nop
 967              	.L66:
 968              	 .loc 1 357 14 discriminator 1
 969 0040 054B     	 ldr r3,.L67
 970 0042 9B6E     	 ldr r3,[r3,#104]
 971              	 .loc 1 357 23 discriminator 1
 972 0044 03F40033 	 and r3,r3,#131072
 973              	 .loc 1 357 8 discriminator 1
 974 0048 002B     	 cmp r3,#0
 975 004a F9D0     	 beq .L66
 358:.././hal/sam3u1c/pmc.c **** }
 976              	 .loc 1 358 1
 977 004c 00BF     	 nop
 978 004e 00BF     	 nop
 979 0050 0C37     	 adds r7,r7,#12
 980              	.LCFI55:
 981              	 .cfi_def_cfa_offset 4
 982 0052 BD46     	 mov sp,r7
 983              	.LCFI56:
 984              	 .cfi_def_cfa_register 13
 985              	 
 986 0054 80BC     	 pop {r7}
 987              	.LCFI57:
 988              	 .cfi_restore 7
 989              	 .cfi_def_cfa_offset 0
 990 0056 7047     	 bx lr
 991              	.L68:
 992              	 .align 2
 993              	.L67:
 994 0058 00040E40 	 .word 1074660352
 995              	 .cfi_endproc
 996              	.LFE78:
 998              	 .section .text.pmc_osc_disable_fastrc,"ax",%progbits
 999              	 .align 1
 1000              	 .global pmc_osc_disable_fastrc
 1001              	 .syntax unified
 1002              	 .thumb
 1003              	 .thumb_func
 1004              	 .fpu softvfp
 1006              	pmc_osc_disable_fastrc:
 1007              	.LFB79:
 359:.././hal/sam3u1c/pmc.c **** 
 360:.././hal/sam3u1c/pmc.c **** /**
 361:.././hal/sam3u1c/pmc.c ****  * \brief Disable the internal fast RC.
 362:.././hal/sam3u1c/pmc.c ****  */
 363:.././hal/sam3u1c/pmc.c **** void pmc_osc_disable_fastrc(void)
 364:.././hal/sam3u1c/pmc.c **** {
 1008              	 .loc 1 364 1
 1009              	 .cfi_startproc
 1010              	 
 1011              	 
 1012              	 
 1013 0000 80B4     	 push {r7}
 1014              	.LCFI58:
 1015              	 .cfi_def_cfa_offset 4
 1016              	 .cfi_offset 7,-4
 1017 0002 00AF     	 add r7,sp,#0
 1018              	.LCFI59:
 1019              	 .cfi_def_cfa_register 7
 365:.././hal/sam3u1c/pmc.c **** 	/* Disable Fast RC oscillator */
 366:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
 1020              	 .loc 1 366 22
 1021 0004 064B     	 ldr r3,.L70
 1022 0006 1B6A     	 ldr r3,[r3,#32]
 367:.././hal/sam3u1c/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 368:.././hal/sam3u1c/pmc.c **** 				| CKGR_MOR_KEY_PASSWD;
 1023              	 .loc 1 368 5
 1024 0008 23F45C13 	 bic r3,r3,#3604480
 1025 000c 23F07803 	 bic r3,r3,#120
 366:.././hal/sam3u1c/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 1026              	 .loc 1 366 5
 1027 0010 034A     	 ldr r2,.L70
 1028              	 .loc 1 368 5
 1029 0012 43F45C13 	 orr r3,r3,#3604480
 366:.././hal/sam3u1c/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 1030              	 .loc 1 366 16
 1031 0016 1362     	 str r3,[r2,#32]
 369:.././hal/sam3u1c/pmc.c **** }
 1032              	 .loc 1 369 1
 1033 0018 00BF     	 nop
 1034 001a BD46     	 mov sp,r7
 1035              	.LCFI60:
 1036              	 .cfi_def_cfa_register 13
 1037              	 
 1038 001c 80BC     	 pop {r7}
 1039              	.LCFI61:
 1040              	 .cfi_restore 7
 1041              	 .cfi_def_cfa_offset 0
 1042 001e 7047     	 bx lr
 1043              	.L71:
 1044              	 .align 2
 1045              	.L70:
 1046 0020 00040E40 	 .word 1074660352
 1047              	 .cfi_endproc
 1048              	.LFE79:
 1050              	 .section .text.pmc_osc_is_ready_fastrc,"ax",%progbits
 1051              	 .align 1
 1052              	 .global pmc_osc_is_ready_fastrc
 1053              	 .syntax unified
 1054              	 .thumb
 1055              	 .thumb_func
 1056              	 .fpu softvfp
 1058              	pmc_osc_is_ready_fastrc:
 1059              	.LFB80:
 370:.././hal/sam3u1c/pmc.c **** 
 371:.././hal/sam3u1c/pmc.c **** /**
 372:.././hal/sam3u1c/pmc.c ****  * \brief Check if the main fastrc is ready.
 373:.././hal/sam3u1c/pmc.c ****  *
 374:.././hal/sam3u1c/pmc.c ****  * \retval 0 Xtal is not ready, otherwise ready.
 375:.././hal/sam3u1c/pmc.c ****  */
 376:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_fastrc(void)
 377:.././hal/sam3u1c/pmc.c **** {
 1060              	 .loc 1 377 1
 1061              	 .cfi_startproc
 1062              	 
 1063              	 
 1064              	 
 1065 0000 80B4     	 push {r7}
 1066              	.LCFI62:
 1067              	 .cfi_def_cfa_offset 4
 1068              	 .cfi_offset 7,-4
 1069 0002 00AF     	 add r7,sp,#0
 1070              	.LCFI63:
 1071              	 .cfi_def_cfa_register 7
 378:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
 1072              	 .loc 1 378 13
 1073 0004 034B     	 ldr r3,.L74
 1074 0006 9B6E     	 ldr r3,[r3,#104]
 1075              	 .loc 1 378 22
 1076 0008 03F40033 	 and r3,r3,#131072
 379:.././hal/sam3u1c/pmc.c **** }
 1077              	 .loc 1 379 1
 1078 000c 1846     	 mov r0,r3
 1079 000e BD46     	 mov sp,r7
 1080              	.LCFI64:
 1081              	 .cfi_def_cfa_register 13
 1082              	 
 1083 0010 80BC     	 pop {r7}
 1084              	.LCFI65:
 1085              	 .cfi_restore 7
 1086              	 .cfi_def_cfa_offset 0
 1087 0012 7047     	 bx lr
 1088              	.L75:
 1089              	 .align 2
 1090              	.L74:
 1091 0014 00040E40 	 .word 1074660352
 1092              	 .cfi_endproc
 1093              	.LFE80:
 1095              	 .section .text.pmc_osc_enable_main_xtal,"ax",%progbits
 1096              	 .align 1
 1097              	 .global pmc_osc_enable_main_xtal
 1098              	 .syntax unified
 1099              	 .thumb
 1100              	 .thumb_func
 1101              	 .fpu softvfp
 1103              	pmc_osc_enable_main_xtal:
 1104              	.LFB81:
 380:.././hal/sam3u1c/pmc.c **** 
 381:.././hal/sam3u1c/pmc.c **** /**
 382:.././hal/sam3u1c/pmc.c ****  * \brief Enable main XTAL oscillator.
 383:.././hal/sam3u1c/pmc.c ****  *
 384:.././hal/sam3u1c/pmc.c ****  * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 385:.././hal/sam3u1c/pmc.c ****  */
 386:.././hal/sam3u1c/pmc.c **** void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
 387:.././hal/sam3u1c/pmc.c **** {
 1105              	 .loc 1 387 1
 1106              	 .cfi_startproc
 1107              	 
 1108              	 
 1109              	 
 1110 0000 80B4     	 push {r7}
 1111              	.LCFI66:
 1112              	 .cfi_def_cfa_offset 4
 1113              	 .cfi_offset 7,-4
 1114 0002 85B0     	 sub sp,sp,#20
 1115              	.LCFI67:
 1116              	 .cfi_def_cfa_offset 24
 1117 0004 00AF     	 add r7,sp,#0
 1118              	.LCFI68:
 1119              	 .cfi_def_cfa_register 7
 1120 0006 7860     	 str r0,[r7,#4]
 388:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1121              	 .loc 1 388 20
 1122 0008 104B     	 ldr r3,.L78
 1123              	 .loc 1 388 11
 1124 000a 1B6A     	 ldr r3,[r3,#32]
 1125 000c FB60     	 str r3,[r7,#12]
 389:.././hal/sam3u1c/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 1126              	 .loc 1 389 6
 1127 000e FB68     	 ldr r3,[r7,#12]
 1128 0010 23F00303 	 bic r3,r3,#3
 1129 0014 FB60     	 str r3,[r7,#12]
 390:.././hal/sam3u1c/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 391:.././hal/sam3u1c/pmc.c **** 			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1130              	 .loc 1 391 4
 1131 0016 7B68     	 ldr r3,[r7,#4]
 1132 0018 1B02     	 lsls r3,r3,#8
 1133 001a 9AB2     	 uxth r2,r3
 390:.././hal/sam3u1c/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1134              	 .loc 1 390 6
 1135 001c FB68     	 ldr r3,[r7,#12]
 1136 001e 1343     	 orrs r3,r3,r2
 1137 0020 43F45C13 	 orr r3,r3,#3604480
 1138 0024 43F00103 	 orr r3,r3,#1
 1139 0028 FB60     	 str r3,[r7,#12]
 392:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = mor;
 1140              	 .loc 1 392 5
 1141 002a 084A     	 ldr r2,.L78
 1142              	 .loc 1 392 16
 1143 002c FB68     	 ldr r3,[r7,#12]
 1144 002e 1362     	 str r3,[r2,#32]
 393:.././hal/sam3u1c/pmc.c **** 	/* Wait the main Xtal to stabilize */
 394:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 1145              	 .loc 1 394 8
 1146 0030 00BF     	 nop
 1147              	.L77:
 1148              	 .loc 1 394 14 discriminator 1
 1149 0032 064B     	 ldr r3,.L78
 1150 0034 9B6E     	 ldr r3,[r3,#104]
 1151              	 .loc 1 394 23 discriminator 1
 1152 0036 03F00103 	 and r3,r3,#1
 1153              	 .loc 1 394 8 discriminator 1
 1154 003a 002B     	 cmp r3,#0
 1155 003c F9D0     	 beq .L77
 395:.././hal/sam3u1c/pmc.c **** }
 1156              	 .loc 1 395 1
 1157 003e 00BF     	 nop
 1158 0040 00BF     	 nop
 1159 0042 1437     	 adds r7,r7,#20
 1160              	.LCFI69:
 1161              	 .cfi_def_cfa_offset 4
 1162 0044 BD46     	 mov sp,r7
 1163              	.LCFI70:
 1164              	 .cfi_def_cfa_register 13
 1165              	 
 1166 0046 80BC     	 pop {r7}
 1167              	.LCFI71:
 1168              	 .cfi_restore 7
 1169              	 .cfi_def_cfa_offset 0
 1170 0048 7047     	 bx lr
 1171              	.L79:
 1172 004a 00BF     	 .align 2
 1173              	.L78:
 1174 004c 00040E40 	 .word 1074660352
 1175              	 .cfi_endproc
 1176              	.LFE81:
 1178              	 .section .text.pmc_osc_bypass_main_xtal,"ax",%progbits
 1179              	 .align 1
 1180              	 .global pmc_osc_bypass_main_xtal
 1181              	 .syntax unified
 1182              	 .thumb
 1183              	 .thumb_func
 1184              	 .fpu softvfp
 1186              	pmc_osc_bypass_main_xtal:
 1187              	.LFB82:
 396:.././hal/sam3u1c/pmc.c **** 
 397:.././hal/sam3u1c/pmc.c **** /**
 398:.././hal/sam3u1c/pmc.c ****  * \brief Bypass main XTAL.
 399:.././hal/sam3u1c/pmc.c ****  */
 400:.././hal/sam3u1c/pmc.c **** void pmc_osc_bypass_main_xtal(void)
 401:.././hal/sam3u1c/pmc.c **** {
 1188              	 .loc 1 401 1
 1189              	 .cfi_startproc
 1190              	 
 1191              	 
 1192              	 
 1193 0000 80B4     	 push {r7}
 1194              	.LCFI72:
 1195              	 .cfi_def_cfa_offset 4
 1196              	 .cfi_offset 7,-4
 1197 0002 83B0     	 sub sp,sp,#12
 1198              	.LCFI73:
 1199              	 .cfi_def_cfa_offset 16
 1200 0004 00AF     	 add r7,sp,#0
 1201              	.LCFI74:
 1202              	 .cfi_def_cfa_register 7
 402:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1203              	 .loc 1 402 20
 1204 0006 0A4B     	 ldr r3,.L81
 1205              	 .loc 1 402 11
 1206 0008 1B6A     	 ldr r3,[r3,#32]
 1207 000a 7B60     	 str r3,[r7,#4]
 403:.././hal/sam3u1c/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 1208              	 .loc 1 403 6
 1209 000c 7B68     	 ldr r3,[r7,#4]
 1210 000e 23F00303 	 bic r3,r3,#3
 1211 0012 7B60     	 str r3,[r7,#4]
 404:.././hal/sam3u1c/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
 1212              	 .loc 1 404 6
 1213 0014 7B68     	 ldr r3,[r7,#4]
 1214 0016 43F45C13 	 orr r3,r3,#3604480
 1215 001a 43F00203 	 orr r3,r3,#2
 1216 001e 7B60     	 str r3,[r7,#4]
 405:.././hal/sam3u1c/pmc.c **** 	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
 406:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = mor;
 1217              	 .loc 1 406 5
 1218 0020 034A     	 ldr r2,.L81
 1219              	 .loc 1 406 16
 1220 0022 7B68     	 ldr r3,[r7,#4]
 1221 0024 1362     	 str r3,[r2,#32]
 407:.././hal/sam3u1c/pmc.c **** 	/* The MOSCXTS in PMC_SR is automatically set */
 408:.././hal/sam3u1c/pmc.c **** }
 1222              	 .loc 1 408 1
 1223 0026 00BF     	 nop
 1224 0028 0C37     	 adds r7,r7,#12
 1225              	.LCFI75:
 1226              	 .cfi_def_cfa_offset 4
 1227 002a BD46     	 mov sp,r7
 1228              	.LCFI76:
 1229              	 .cfi_def_cfa_register 13
 1230              	 
 1231 002c 80BC     	 pop {r7}
 1232              	.LCFI77:
 1233              	 .cfi_restore 7
 1234              	 .cfi_def_cfa_offset 0
 1235 002e 7047     	 bx lr
 1236              	.L82:
 1237              	 .align 2
 1238              	.L81:
 1239 0030 00040E40 	 .word 1074660352
 1240              	 .cfi_endproc
 1241              	.LFE82:
 1243              	 .section .text.pmc_osc_disable_main_xtal,"ax",%progbits
 1244              	 .align 1
 1245              	 .global pmc_osc_disable_main_xtal
 1246              	 .syntax unified
 1247              	 .thumb
 1248              	 .thumb_func
 1249              	 .fpu softvfp
 1251              	pmc_osc_disable_main_xtal:
 1252              	.LFB83:
 409:.././hal/sam3u1c/pmc.c **** 
 410:.././hal/sam3u1c/pmc.c **** /**
 411:.././hal/sam3u1c/pmc.c ****  * \brief Disable the main Xtal.
 412:.././hal/sam3u1c/pmc.c ****  */
 413:.././hal/sam3u1c/pmc.c **** void pmc_osc_disable_main_xtal(void)
 414:.././hal/sam3u1c/pmc.c **** {
 1253              	 .loc 1 414 1
 1254              	 .cfi_startproc
 1255              	 
 1256              	 
 1257              	 
 1258 0000 80B4     	 push {r7}
 1259              	.LCFI78:
 1260              	 .cfi_def_cfa_offset 4
 1261              	 .cfi_offset 7,-4
 1262 0002 83B0     	 sub sp,sp,#12
 1263              	.LCFI79:
 1264              	 .cfi_def_cfa_offset 16
 1265 0004 00AF     	 add r7,sp,#0
 1266              	.LCFI80:
 1267              	 .cfi_def_cfa_register 7
 415:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1268              	 .loc 1 415 20
 1269 0006 084B     	 ldr r3,.L84
 1270              	 .loc 1 415 11
 1271 0008 1B6A     	 ldr r3,[r3,#32]
 1272 000a 7B60     	 str r3,[r7,#4]
 416:.././hal/sam3u1c/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 1273              	 .loc 1 416 6
 1274 000c 7B68     	 ldr r3,[r7,#4]
 1275 000e 23F00303 	 bic r3,r3,#3
 1276 0012 7B60     	 str r3,[r7,#4]
 417:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
 1277              	 .loc 1 417 5
 1278 0014 044A     	 ldr r2,.L84
 1279              	 .loc 1 417 38
 1280 0016 7B68     	 ldr r3,[r7,#4]
 1281 0018 43F45C13 	 orr r3,r3,#3604480
 1282              	 .loc 1 417 16
 1283 001c 1362     	 str r3,[r2,#32]
 418:.././hal/sam3u1c/pmc.c **** }
 1284              	 .loc 1 418 1
 1285 001e 00BF     	 nop
 1286 0020 0C37     	 adds r7,r7,#12
 1287              	.LCFI81:
 1288              	 .cfi_def_cfa_offset 4
 1289 0022 BD46     	 mov sp,r7
 1290              	.LCFI82:
 1291              	 .cfi_def_cfa_register 13
 1292              	 
 1293 0024 80BC     	 pop {r7}
 1294              	.LCFI83:
 1295              	 .cfi_restore 7
 1296              	 .cfi_def_cfa_offset 0
 1297 0026 7047     	 bx lr
 1298              	.L85:
 1299              	 .align 2
 1300              	.L84:
 1301 0028 00040E40 	 .word 1074660352
 1302              	 .cfi_endproc
 1303              	.LFE83:
 1305              	 .section .text.pmc_osc_is_bypassed_main_xtal,"ax",%progbits
 1306              	 .align 1
 1307              	 .global pmc_osc_is_bypassed_main_xtal
 1308              	 .syntax unified
 1309              	 .thumb
 1310              	 .thumb_func
 1311              	 .fpu softvfp
 1313              	pmc_osc_is_bypassed_main_xtal:
 1314              	.LFB84:
 419:.././hal/sam3u1c/pmc.c **** 
 420:.././hal/sam3u1c/pmc.c **** /**
 421:.././hal/sam3u1c/pmc.c ****  * \brief Check if the main crystal is bypassed.
 422:.././hal/sam3u1c/pmc.c ****  *
 423:.././hal/sam3u1c/pmc.c ****  * \retval 0 Xtal is bypassed, otherwise not.
 424:.././hal/sam3u1c/pmc.c ****  */
 425:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_bypassed_main_xtal(void)
 426:.././hal/sam3u1c/pmc.c **** {
 1315              	 .loc 1 426 1
 1316              	 .cfi_startproc
 1317              	 
 1318              	 
 1319              	 
 1320 0000 80B4     	 push {r7}
 1321              	.LCFI84:
 1322              	 .cfi_def_cfa_offset 4
 1323              	 .cfi_offset 7,-4
 1324 0002 00AF     	 add r7,sp,#0
 1325              	.LCFI85:
 1326              	 .cfi_def_cfa_register 7
 427:.././hal/sam3u1c/pmc.c **** 	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
 1327              	 .loc 1 427 13
 1328 0004 034B     	 ldr r3,.L88
 1329 0006 1B6A     	 ldr r3,[r3,#32]
 1330              	 .loc 1 427 24
 1331 0008 03F00203 	 and r3,r3,#2
 428:.././hal/sam3u1c/pmc.c **** }
 1332              	 .loc 1 428 1
 1333 000c 1846     	 mov r0,r3
 1334 000e BD46     	 mov sp,r7
 1335              	.LCFI86:
 1336              	 .cfi_def_cfa_register 13
 1337              	 
 1338 0010 80BC     	 pop {r7}
 1339              	.LCFI87:
 1340              	 .cfi_restore 7
 1341              	 .cfi_def_cfa_offset 0
 1342 0012 7047     	 bx lr
 1343              	.L89:
 1344              	 .align 2
 1345              	.L88:
 1346 0014 00040E40 	 .word 1074660352
 1347              	 .cfi_endproc
 1348              	.LFE84:
 1350              	 .section .text.pmc_osc_is_ready_main_xtal,"ax",%progbits
 1351              	 .align 1
 1352              	 .global pmc_osc_is_ready_main_xtal
 1353              	 .syntax unified
 1354              	 .thumb
 1355              	 .thumb_func
 1356              	 .fpu softvfp
 1358              	pmc_osc_is_ready_main_xtal:
 1359              	.LFB85:
 429:.././hal/sam3u1c/pmc.c **** 
 430:.././hal/sam3u1c/pmc.c **** /**
 431:.././hal/sam3u1c/pmc.c ****  * \brief Check if the main crystal is ready.
 432:.././hal/sam3u1c/pmc.c ****  *
 433:.././hal/sam3u1c/pmc.c ****  * \note If main crystal is bypassed, it's always ready.
 434:.././hal/sam3u1c/pmc.c ****  *
 435:.././hal/sam3u1c/pmc.c ****  * \retval 0 main crystal is not ready, otherwise ready.
 436:.././hal/sam3u1c/pmc.c ****  */
 437:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_main_xtal(void)
 438:.././hal/sam3u1c/pmc.c **** {
 1360              	 .loc 1 438 1
 1361              	 .cfi_startproc
 1362              	 
 1363              	 
 1364              	 
 1365 0000 80B4     	 push {r7}
 1366              	.LCFI88:
 1367              	 .cfi_def_cfa_offset 4
 1368              	 .cfi_offset 7,-4
 1369 0002 00AF     	 add r7,sp,#0
 1370              	.LCFI89:
 1371              	 .cfi_def_cfa_register 7
 439:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
 1372              	 .loc 1 439 13
 1373 0004 034B     	 ldr r3,.L92
 1374 0006 9B6E     	 ldr r3,[r3,#104]
 1375              	 .loc 1 439 22
 1376 0008 03F00103 	 and r3,r3,#1
 440:.././hal/sam3u1c/pmc.c **** }
 1377              	 .loc 1 440 1
 1378 000c 1846     	 mov r0,r3
 1379 000e BD46     	 mov sp,r7
 1380              	.LCFI90:
 1381              	 .cfi_def_cfa_register 13
 1382              	 
 1383 0010 80BC     	 pop {r7}
 1384              	.LCFI91:
 1385              	 .cfi_restore 7
 1386              	 .cfi_def_cfa_offset 0
 1387 0012 7047     	 bx lr
 1388              	.L93:
 1389              	 .align 2
 1390              	.L92:
 1391 0014 00040E40 	 .word 1074660352
 1392              	 .cfi_endproc
 1393              	.LFE85:
 1395              	 .section .text.pmc_switch_mainck_to_xtal,"ax",%progbits
 1396              	 .align 1
 1397              	 .global pmc_switch_mainck_to_xtal
 1398              	 .syntax unified
 1399              	 .thumb
 1400              	 .thumb_func
 1401              	 .fpu softvfp
 1403              	pmc_switch_mainck_to_xtal:
 1404              	.LFB86:
 441:.././hal/sam3u1c/pmc.c **** 
 442:.././hal/sam3u1c/pmc.c **** /**
 443:.././hal/sam3u1c/pmc.c ****  * \brief Switch main clock source selection to external Xtal/Bypass.
 444:.././hal/sam3u1c/pmc.c ****  *
 445:.././hal/sam3u1c/pmc.c ****  * \note The function may switch MCK to SCLK if MCK source is MAINCK to avoid
 446:.././hal/sam3u1c/pmc.c ****  *       any system crash.
 447:.././hal/sam3u1c/pmc.c ****  *
 448:.././hal/sam3u1c/pmc.c ****  * \note If used in Xtal mode, the Xtal is automatically enabled.
 449:.././hal/sam3u1c/pmc.c ****  *
 450:.././hal/sam3u1c/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 451:.././hal/sam3u1c/pmc.c ****  *
 452:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 453:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 454:.././hal/sam3u1c/pmc.c ****  */
 455:.././hal/sam3u1c/pmc.c **** void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
 456:.././hal/sam3u1c/pmc.c **** 		uint32_t ul_xtal_startup_time)
 457:.././hal/sam3u1c/pmc.c **** {
 1405              	 .loc 1 457 1
 1406              	 .cfi_startproc
 1407              	 
 1408              	 
 1409              	 
 1410 0000 80B4     	 push {r7}
 1411              	.LCFI92:
 1412              	 .cfi_def_cfa_offset 4
 1413              	 .cfi_offset 7,-4
 1414 0002 83B0     	 sub sp,sp,#12
 1415              	.LCFI93:
 1416              	 .cfi_def_cfa_offset 16
 1417 0004 00AF     	 add r7,sp,#0
 1418              	.LCFI94:
 1419              	 .cfi_def_cfa_register 7
 1420 0006 7860     	 str r0,[r7,#4]
 1421 0008 3960     	 str r1,[r7]
 458:.././hal/sam3u1c/pmc.c **** 	/* Enable Main Xtal oscillator */
 459:.././hal/sam3u1c/pmc.c **** 	if (ul_bypass) {
 1422              	 .loc 1 459 5
 1423 000a 7B68     	 ldr r3,[r7,#4]
 1424 000c 002B     	 cmp r3,#0
 1425 000e 08D0     	 beq .L95
 460:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1426              	 .loc 1 460 23
 1427 0010 164B     	 ldr r3,.L99
 1428 0012 1B6A     	 ldr r3,[r3,#32]
 461:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
 1429              	 .loc 1 461 45
 1430 0014 164A     	 ldr r2,.L99+4
 1431 0016 1A40     	 ands r2,r2,r3
 460:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1432              	 .loc 1 460 6
 1433 0018 1449     	 ldr r1,.L99
 1434              	 .loc 1 461 45
 1435 001a 164B     	 ldr r3,.L99+8
 1436 001c 1343     	 orrs r3,r3,r2
 460:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1437              	 .loc 1 460 17
 1438 001e 0B62     	 str r3,[r1,#32]
 462:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCSEL;
 463:.././hal/sam3u1c/pmc.c **** 	} else {
 464:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 466:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 467:.././hal/sam3u1c/pmc.c **** 		/* Wait the Xtal to stabilize */
 468:.././hal/sam3u1c/pmc.c **** 		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 469:.././hal/sam3u1c/pmc.c **** 
 470:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
 471:.././hal/sam3u1c/pmc.c **** 	}
 472:.././hal/sam3u1c/pmc.c **** }
 1439              	 .loc 1 472 1
 1440 0020 1EE0     	 b .L98
 1441              	.L95:
 464:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1442              	 .loc 1 464 23
 1443 0022 124B     	 ldr r3,.L99
 1444 0024 1B6A     	 ldr r3,[r3,#32]
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1445              	 .loc 1 465 25
 1446 0026 23F45C13 	 bic r3,r3,#3604480
 1447 002a 23F00303 	 bic r3,r3,#3
 466:.././hal/sam3u1c/pmc.c **** 		/* Wait the Xtal to stabilize */
 1448              	 .loc 1 466 5
 1449 002e 3A68     	 ldr r2,[r7]
 1450 0030 1202     	 lsls r2,r2,#8
 1451 0032 92B2     	 uxth r2,r2
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1452              	 .loc 1 465 45
 1453 0034 1343     	 orrs r3,r3,r2
 464:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1454              	 .loc 1 464 6
 1455 0036 0D4A     	 ldr r2,.L99
 465:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 1456              	 .loc 1 465 45
 1457 0038 43F45C13 	 orr r3,r3,#3604480
 1458 003c 43F00103 	 orr r3,r3,#1
 464:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 1459              	 .loc 1 464 17
 1460 0040 1362     	 str r3,[r2,#32]
 468:.././hal/sam3u1c/pmc.c **** 
 1461              	 .loc 1 468 9
 1462 0042 00BF     	 nop
 1463              	.L97:
 468:.././hal/sam3u1c/pmc.c **** 
 1464              	 .loc 1 468 15 discriminator 1
 1465 0044 094B     	 ldr r3,.L99
 1466 0046 9B6E     	 ldr r3,[r3,#104]
 468:.././hal/sam3u1c/pmc.c **** 
 1467              	 .loc 1 468 24 discriminator 1
 1468 0048 03F00103 	 and r3,r3,#1
 468:.././hal/sam3u1c/pmc.c **** 
 1469              	 .loc 1 468 9 discriminator 1
 1470 004c 002B     	 cmp r3,#0
 1471 004e F9D0     	 beq .L97
 470:.././hal/sam3u1c/pmc.c **** 	}
 1472              	 .loc 1 470 17
 1473 0050 064B     	 ldr r3,.L99
 1474 0052 1B6A     	 ldr r3,[r3,#32]
 1475 0054 054A     	 ldr r2,.L99
 1476 0056 43F09B73 	 orr r3,r3,#20316160
 1477 005a 43F48033 	 orr r3,r3,#65536
 1478 005e 1362     	 str r3,[r2,#32]
 1479              	.L98:
 1480              	 .loc 1 472 1
 1481 0060 00BF     	 nop
 1482 0062 0C37     	 adds r7,r7,#12
 1483              	.LCFI95:
 1484              	 .cfi_def_cfa_offset 4
 1485 0064 BD46     	 mov sp,r7
 1486              	.LCFI96:
 1487              	 .cfi_def_cfa_register 13
 1488              	 
 1489 0066 80BC     	 pop {r7}
 1490              	.LCFI97:
 1491              	 .cfi_restore 7
 1492              	 .cfi_def_cfa_offset 0
 1493 0068 7047     	 bx lr
 1494              	.L100:
 1495 006a 00BF     	 .align 2
 1496              	.L99:
 1497 006c 00040E40 	 .word 1074660352
 1498 0070 FCFFC8FE 	 .word -20381700
 1499 0074 02003701 	 .word 20381698
 1500              	 .cfi_endproc
 1501              	.LFE86:
 1503              	 .section .text.pmc_osc_disable_xtal,"ax",%progbits
 1504              	 .align 1
 1505              	 .global pmc_osc_disable_xtal
 1506              	 .syntax unified
 1507              	 .thumb
 1508              	 .thumb_func
 1509              	 .fpu softvfp
 1511              	pmc_osc_disable_xtal:
 1512              	.LFB87:
 473:.././hal/sam3u1c/pmc.c **** 
 474:.././hal/sam3u1c/pmc.c **** /**
 475:.././hal/sam3u1c/pmc.c ****  * \brief Disable the external Xtal.
 476:.././hal/sam3u1c/pmc.c ****  *
 477:.././hal/sam3u1c/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 478:.././hal/sam3u1c/pmc.c ****  */
 479:.././hal/sam3u1c/pmc.c **** void pmc_osc_disable_xtal(uint32_t ul_bypass)
 480:.././hal/sam3u1c/pmc.c **** {
 1513              	 .loc 1 480 1
 1514              	 .cfi_startproc
 1515              	 
 1516              	 
 1517              	 
 1518 0000 80B4     	 push {r7}
 1519              	.LCFI98:
 1520              	 .cfi_def_cfa_offset 4
 1521              	 .cfi_offset 7,-4
 1522 0002 83B0     	 sub sp,sp,#12
 1523              	.LCFI99:
 1524              	 .cfi_def_cfa_offset 16
 1525 0004 00AF     	 add r7,sp,#0
 1526              	.LCFI100:
 1527              	 .cfi_def_cfa_register 7
 1528 0006 7860     	 str r0,[r7,#4]
 481:.././hal/sam3u1c/pmc.c **** 	/* Disable xtal oscillator */
 482:.././hal/sam3u1c/pmc.c **** 	if (ul_bypass) {
 1529              	 .loc 1 482 5
 1530 0008 7B68     	 ldr r3,[r7,#4]
 1531 000a 002B     	 cmp r3,#0
 1532 000c 0AD0     	 beq .L102
 483:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 1533              	 .loc 1 483 23
 1534 000e 0D4B     	 ldr r3,.L105
 1535 0010 1B6A     	 ldr r3,[r3,#32]
 1536              	 .loc 1 483 56
 1537 0012 23F45C13 	 bic r3,r3,#3604480
 1538 0016 23F00203 	 bic r3,r3,#2
 1539              	 .loc 1 483 6
 1540 001a 0A4A     	 ldr r2,.L105
 1541              	 .loc 1 483 56
 1542 001c 43F45C13 	 orr r3,r3,#3604480
 1543              	 .loc 1 483 17
 1544 0020 1362     	 str r3,[r2,#32]
 484:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 485:.././hal/sam3u1c/pmc.c **** 	} else {
 486:.././hal/sam3u1c/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 487:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 488:.././hal/sam3u1c/pmc.c **** 	}
 489:.././hal/sam3u1c/pmc.c **** }
 1545              	 .loc 1 489 1
 1546 0022 09E0     	 b .L104
 1547              	.L102:
 486:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1548              	 .loc 1 486 23
 1549 0024 074B     	 ldr r3,.L105
 1550 0026 1B6A     	 ldr r3,[r3,#32]
 486:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1551              	 .loc 1 486 56
 1552 0028 23F45C13 	 bic r3,r3,#3604480
 1553 002c 23F00103 	 bic r3,r3,#1
 486:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1554              	 .loc 1 486 6
 1555 0030 044A     	 ldr r2,.L105
 486:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1556              	 .loc 1 486 56
 1557 0032 43F45C13 	 orr r3,r3,#3604480
 486:.././hal/sam3u1c/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1558              	 .loc 1 486 17
 1559 0036 1362     	 str r3,[r2,#32]
 1560              	.L104:
 1561              	 .loc 1 489 1
 1562 0038 00BF     	 nop
 1563 003a 0C37     	 adds r7,r7,#12
 1564              	.LCFI101:
 1565              	 .cfi_def_cfa_offset 4
 1566 003c BD46     	 mov sp,r7
 1567              	.LCFI102:
 1568              	 .cfi_def_cfa_register 13
 1569              	 
 1570 003e 80BC     	 pop {r7}
 1571              	.LCFI103:
 1572              	 .cfi_restore 7
 1573              	 .cfi_def_cfa_offset 0
 1574 0040 7047     	 bx lr
 1575              	.L106:
 1576 0042 00BF     	 .align 2
 1577              	.L105:
 1578 0044 00040E40 	 .word 1074660352
 1579              	 .cfi_endproc
 1580              	.LFE87:
 1582              	 .section .text.pmc_osc_is_ready_mainck,"ax",%progbits
 1583              	 .align 1
 1584              	 .global pmc_osc_is_ready_mainck
 1585              	 .syntax unified
 1586              	 .thumb
 1587              	 .thumb_func
 1588              	 .fpu softvfp
 1590              	pmc_osc_is_ready_mainck:
 1591              	.LFB88:
 490:.././hal/sam3u1c/pmc.c **** 
 491:.././hal/sam3u1c/pmc.c **** /**
 492:.././hal/sam3u1c/pmc.c ****  * \brief Check if the MAINCK is ready. Depending on MOSCEL, MAINCK can be one
 493:.././hal/sam3u1c/pmc.c ****  * of Xtal, bypass or internal RC.
 494:.././hal/sam3u1c/pmc.c ****  *
 495:.././hal/sam3u1c/pmc.c ****  * \retval 1 Xtal is ready.
 496:.././hal/sam3u1c/pmc.c ****  * \retval 0 Xtal is not ready.
 497:.././hal/sam3u1c/pmc.c ****  */
 498:.././hal/sam3u1c/pmc.c **** uint32_t pmc_osc_is_ready_mainck(void)
 499:.././hal/sam3u1c/pmc.c **** {
 1592              	 .loc 1 499 1
 1593              	 .cfi_startproc
 1594              	 
 1595              	 
 1596              	 
 1597 0000 80B4     	 push {r7}
 1598              	.LCFI104:
 1599              	 .cfi_def_cfa_offset 4
 1600              	 .cfi_offset 7,-4
 1601 0002 00AF     	 add r7,sp,#0
 1602              	.LCFI105:
 1603              	 .cfi_def_cfa_register 7
 500:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_SR & PMC_SR_MOSCSELS;
 1604              	 .loc 1 500 12
 1605 0004 034B     	 ldr r3,.L109
 1606 0006 9B6E     	 ldr r3,[r3,#104]
 1607              	 .loc 1 500 21
 1608 0008 03F48033 	 and r3,r3,#65536
 501:.././hal/sam3u1c/pmc.c **** }
 1609              	 .loc 1 501 1
 1610 000c 1846     	 mov r0,r3
 1611 000e BD46     	 mov sp,r7
 1612              	.LCFI106:
 1613              	 .cfi_def_cfa_register 13
 1614              	 
 1615 0010 80BC     	 pop {r7}
 1616              	.LCFI107:
 1617              	 .cfi_restore 7
 1618              	 .cfi_def_cfa_offset 0
 1619 0012 7047     	 bx lr
 1620              	.L110:
 1621              	 .align 2
 1622              	.L109:
 1623 0014 00040E40 	 .word 1074660352
 1624              	 .cfi_endproc
 1625              	.LFE88:
 1627              	 .section .text.pmc_mainck_osc_select,"ax",%progbits
 1628              	 .align 1
 1629              	 .global pmc_mainck_osc_select
 1630              	 .syntax unified
 1631              	 .thumb
 1632              	 .thumb_func
 1633              	 .fpu softvfp
 1635              	pmc_mainck_osc_select:
 1636              	.LFB89:
 502:.././hal/sam3u1c/pmc.c **** 
 503:.././hal/sam3u1c/pmc.c **** /**
 504:.././hal/sam3u1c/pmc.c ****  * \brief Select Main Crystal or internal RC as main clock source.
 505:.././hal/sam3u1c/pmc.c ****  *
 506:.././hal/sam3u1c/pmc.c ****  * \note This function will not enable/disable RC or Main Crystal.
 507:.././hal/sam3u1c/pmc.c ****  *
 508:.././hal/sam3u1c/pmc.c ****  * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 509:.././hal/sam3u1c/pmc.c ****  */
 510:.././hal/sam3u1c/pmc.c **** void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
 511:.././hal/sam3u1c/pmc.c **** {
 1637              	 .loc 1 511 1
 1638              	 .cfi_startproc
 1639              	 
 1640              	 
 1641              	 
 1642 0000 80B4     	 push {r7}
 1643              	.LCFI108:
 1644              	 .cfi_def_cfa_offset 4
 1645              	 .cfi_offset 7,-4
 1646 0002 85B0     	 sub sp,sp,#20
 1647              	.LCFI109:
 1648              	 .cfi_def_cfa_offset 24
 1649 0004 00AF     	 add r7,sp,#0
 1650              	.LCFI110:
 1651              	 .cfi_def_cfa_register 7
 1652 0006 7860     	 str r0,[r7,#4]
 512:.././hal/sam3u1c/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1653              	 .loc 1 512 20
 1654 0008 0C4B     	 ldr r3,.L114
 1655              	 .loc 1 512 11
 1656 000a 1B6A     	 ldr r3,[r3,#32]
 1657 000c FB60     	 str r3,[r7,#12]
 513:.././hal/sam3u1c/pmc.c **** 	if (ul_xtal_rc) {
 1658              	 .loc 1 513 5
 1659 000e 7B68     	 ldr r3,[r7,#4]
 1660 0010 002B     	 cmp r3,#0
 1661 0012 04D0     	 beq .L112
 514:.././hal/sam3u1c/pmc.c **** 		mor |=  CKGR_MOR_MOSCSEL;
 1662              	 .loc 1 514 7
 1663 0014 FB68     	 ldr r3,[r7,#12]
 1664 0016 43F08073 	 orr r3,r3,#16777216
 1665 001a FB60     	 str r3,[r7,#12]
 1666 001c 03E0     	 b .L113
 1667              	.L112:
 515:.././hal/sam3u1c/pmc.c **** 	} else {
 516:.././hal/sam3u1c/pmc.c **** 		mor &= ~CKGR_MOR_MOSCSEL;
 1668              	 .loc 1 516 7
 1669 001e FB68     	 ldr r3,[r7,#12]
 1670 0020 23F08073 	 bic r3,r3,#16777216
 1671 0024 FB60     	 str r3,[r7,#12]
 1672              	.L113:
 517:.././hal/sam3u1c/pmc.c **** 	}
 518:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
 1673              	 .loc 1 518 5
 1674 0026 054A     	 ldr r2,.L114
 1675              	 .loc 1 518 38
 1676 0028 FB68     	 ldr r3,[r7,#12]
 1677 002a 43F45C13 	 orr r3,r3,#3604480
 1678              	 .loc 1 518 16
 1679 002e 1362     	 str r3,[r2,#32]
 519:.././hal/sam3u1c/pmc.c **** }
 1680              	 .loc 1 519 1
 1681 0030 00BF     	 nop
 1682 0032 1437     	 adds r7,r7,#20
 1683              	.LCFI111:
 1684              	 .cfi_def_cfa_offset 4
 1685 0034 BD46     	 mov sp,r7
 1686              	.LCFI112:
 1687              	 .cfi_def_cfa_register 13
 1688              	 
 1689 0036 80BC     	 pop {r7}
 1690              	.LCFI113:
 1691              	 .cfi_restore 7
 1692              	 .cfi_def_cfa_offset 0
 1693 0038 7047     	 bx lr
 1694              	.L115:
 1695 003a 00BF     	 .align 2
 1696              	.L114:
 1697 003c 00040E40 	 .word 1074660352
 1698              	 .cfi_endproc
 1699              	.LFE89:
 1701              	 .section .text.pmc_enable_pllack,"ax",%progbits
 1702              	 .align 1
 1703              	 .global pmc_enable_pllack
 1704              	 .syntax unified
 1705              	 .thumb
 1706              	 .thumb_func
 1707              	 .fpu softvfp
 1709              	pmc_enable_pllack:
 1710              	.LFB90:
 520:.././hal/sam3u1c/pmc.c **** 
 521:.././hal/sam3u1c/pmc.c **** /**
 522:.././hal/sam3u1c/pmc.c ****  * \brief Enable PLLA clock.
 523:.././hal/sam3u1c/pmc.c ****  *
 524:.././hal/sam3u1c/pmc.c ****  * \param mula PLLA multiplier.
 525:.././hal/sam3u1c/pmc.c ****  * \param pllacount PLLA counter.
 526:.././hal/sam3u1c/pmc.c ****  * \param diva Divider.
 527:.././hal/sam3u1c/pmc.c ****  */
 528:.././hal/sam3u1c/pmc.c **** void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
 529:.././hal/sam3u1c/pmc.c **** {
 1711              	 .loc 1 529 1
 1712              	 .cfi_startproc
 1713              	 
 1714              	 
 1715 0000 80B5     	 push {r7,lr}
 1716              	.LCFI114:
 1717              	 .cfi_def_cfa_offset 8
 1718              	 .cfi_offset 7,-8
 1719              	 .cfi_offset 14,-4
 1720 0002 84B0     	 sub sp,sp,#16
 1721              	.LCFI115:
 1722              	 .cfi_def_cfa_offset 24
 1723 0004 00AF     	 add r7,sp,#0
 1724              	.LCFI116:
 1725              	 .cfi_def_cfa_register 7
 1726 0006 F860     	 str r0,[r7,#12]
 1727 0008 B960     	 str r1,[r7,#8]
 1728 000a 7A60     	 str r2,[r7,#4]
 530:.././hal/sam3u1c/pmc.c **** 	/* first disable the PLL to unlock the lock */
 531:.././hal/sam3u1c/pmc.c **** 	pmc_disable_pllack();
 1729              	 .loc 1 531 2
 1730 000c 0E4B     	 ldr r3,.L118
 1731 000e 9847     	 blx r3
 1732              	.LVL0:
 532:.././hal/sam3u1c/pmc.c **** 
 533:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 534:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
 535:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 536:.././hal/sam3u1c/pmc.c **** #else
 537:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
 1733              	 .loc 1 537 37
 1734 0010 7B68     	 ldr r3,[r7,#4]
 1735 0012 DAB2     	 uxtb r2,r3
 538:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1736              	 .loc 1 538 4
 1737 0014 BB68     	 ldr r3,[r7,#8]
 1738 0016 1B02     	 lsls r3,r3,#8
 1739 0018 03F47C53 	 and r3,r3,#16128
 537:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1740              	 .loc 1 537 59
 1741 001c 1A43     	 orrs r2,r2,r3
 1742              	 .loc 1 538 38
 1743 001e FB68     	 ldr r3,[r7,#12]
 1744 0020 1904     	 lsls r1,r3,#16
 1745 0022 0A4B     	 ldr r3,.L118+4
 1746 0024 0B40     	 ands r3,r3,r1
 1747              	 .loc 1 538 36
 1748 0026 1343     	 orrs r3,r3,r2
 537:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1749              	 .loc 1 537 5
 1750 0028 094A     	 ldr r2,.L118+8
 1751              	 .loc 1 538 36
 1752 002a 43F00053 	 orr r3,r3,#536870912
 537:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1753              	 .loc 1 537 18
 1754 002e 9362     	 str r3,[r2,#40]
 539:.././hal/sam3u1c/pmc.c **** #endif
 540:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
 1755              	 .loc 1 540 8
 1756 0030 00BF     	 nop
 1757              	.L117:
 1758              	 .loc 1 540 13 discriminator 1
 1759 0032 074B     	 ldr r3,.L118+8
 1760 0034 9B6E     	 ldr r3,[r3,#104]
 1761              	 .loc 1 540 22 discriminator 1
 1762 0036 03F00203 	 and r3,r3,#2
 1763              	 .loc 1 540 8 discriminator 1
 1764 003a 002B     	 cmp r3,#0
 1765 003c F9D0     	 beq .L117
 541:.././hal/sam3u1c/pmc.c **** }
 1766              	 .loc 1 541 1
 1767 003e 00BF     	 nop
 1768 0040 00BF     	 nop
 1769 0042 1037     	 adds r7,r7,#16
 1770              	.LCFI117:
 1771              	 .cfi_def_cfa_offset 8
 1772 0044 BD46     	 mov sp,r7
 1773              	.LCFI118:
 1774              	 .cfi_def_cfa_register 13
 1775              	 
 1776 0046 80BD     	 pop {r7,pc}
 1777              	.L119:
 1778              	 .align 2
 1779              	.L118:
 1780 0048 00000000 	 .word pmc_disable_pllack
 1781 004c 0000FF07 	 .word 134152192
 1782 0050 00040E40 	 .word 1074660352
 1783              	 .cfi_endproc
 1784              	.LFE90:
 1786              	 .section .text.pmc_disable_pllack,"ax",%progbits
 1787              	 .align 1
 1788              	 .global pmc_disable_pllack
 1789              	 .syntax unified
 1790              	 .thumb
 1791              	 .thumb_func
 1792              	 .fpu softvfp
 1794              	pmc_disable_pllack:
 1795              	.LFB91:
 542:.././hal/sam3u1c/pmc.c **** 
 543:.././hal/sam3u1c/pmc.c **** /**
 544:.././hal/sam3u1c/pmc.c ****  * \brief Disable PLLA clock.
 545:.././hal/sam3u1c/pmc.c ****  */
 546:.././hal/sam3u1c/pmc.c **** void pmc_disable_pllack(void)
 547:.././hal/sam3u1c/pmc.c **** {
 1796              	 .loc 1 547 1
 1797              	 .cfi_startproc
 1798              	 
 1799              	 
 1800              	 
 1801 0000 80B4     	 push {r7}
 1802              	.LCFI119:
 1803              	 .cfi_def_cfa_offset 4
 1804              	 .cfi_offset 7,-4
 1805 0002 00AF     	 add r7,sp,#0
 1806              	.LCFI120:
 1807              	 .cfi_def_cfa_register 7
 548:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 549:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
 550:.././hal/sam3u1c/pmc.c **** #else
 551:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
 1808              	 .loc 1 551 5
 1809 0004 034B     	 ldr r3,.L121
 1810              	 .loc 1 551 18
 1811 0006 4FF00052 	 mov r2,#536870912
 1812 000a 9A62     	 str r2,[r3,#40]
 552:.././hal/sam3u1c/pmc.c **** #endif
 553:.././hal/sam3u1c/pmc.c **** }
 1813              	 .loc 1 553 1
 1814 000c 00BF     	 nop
 1815 000e BD46     	 mov sp,r7
 1816              	.LCFI121:
 1817              	 .cfi_def_cfa_register 13
 1818              	 
 1819 0010 80BC     	 pop {r7}
 1820              	.LCFI122:
 1821              	 .cfi_restore 7
 1822              	 .cfi_def_cfa_offset 0
 1823 0012 7047     	 bx lr
 1824              	.L122:
 1825              	 .align 2
 1826              	.L121:
 1827 0014 00040E40 	 .word 1074660352
 1828              	 .cfi_endproc
 1829              	.LFE91:
 1831              	 .section .text.pmc_is_locked_pllack,"ax",%progbits
 1832              	 .align 1
 1833              	 .global pmc_is_locked_pllack
 1834              	 .syntax unified
 1835              	 .thumb
 1836              	 .thumb_func
 1837              	 .fpu softvfp
 1839              	pmc_is_locked_pllack:
 1840              	.LFB92:
 554:.././hal/sam3u1c/pmc.c **** 
 555:.././hal/sam3u1c/pmc.c **** /**
 556:.././hal/sam3u1c/pmc.c ****  * \brief Is PLLA locked?
 557:.././hal/sam3u1c/pmc.c ****  *
 558:.././hal/sam3u1c/pmc.c ****  * \retval 0 Not locked.
 559:.././hal/sam3u1c/pmc.c ****  * \retval 1 Locked.
 560:.././hal/sam3u1c/pmc.c ****  */
 561:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_locked_pllack(void)
 562:.././hal/sam3u1c/pmc.c **** {
 1841              	 .loc 1 562 1
 1842              	 .cfi_startproc
 1843              	 
 1844              	 
 1845              	 
 1846 0000 80B4     	 push {r7}
 1847              	.LCFI123:
 1848              	 .cfi_def_cfa_offset 4
 1849              	 .cfi_offset 7,-4
 1850 0002 00AF     	 add r7,sp,#0
 1851              	.LCFI124:
 1852              	 .cfi_def_cfa_register 7
 563:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKA);
 1853              	 .loc 1 563 13
 1854 0004 034B     	 ldr r3,.L125
 1855 0006 9B6E     	 ldr r3,[r3,#104]
 1856              	 .loc 1 563 22
 1857 0008 03F00203 	 and r3,r3,#2
 564:.././hal/sam3u1c/pmc.c **** }
 1858              	 .loc 1 564 1
 1859 000c 1846     	 mov r0,r3
 1860 000e BD46     	 mov sp,r7
 1861              	.LCFI125:
 1862              	 .cfi_def_cfa_register 13
 1863              	 
 1864 0010 80BC     	 pop {r7}
 1865              	.LCFI126:
 1866              	 .cfi_restore 7
 1867              	 .cfi_def_cfa_offset 0
 1868 0012 7047     	 bx lr
 1869              	.L126:
 1870              	 .align 2
 1871              	.L125:
 1872 0014 00040E40 	 .word 1074660352
 1873              	 .cfi_endproc
 1874              	.LFE92:
 1876              	 .section .text.pmc_enable_upll_clock,"ax",%progbits
 1877              	 .align 1
 1878              	 .global pmc_enable_upll_clock
 1879              	 .syntax unified
 1880              	 .thumb
 1881              	 .thumb_func
 1882              	 .fpu softvfp
 1884              	pmc_enable_upll_clock:
 1885              	.LFB93:
 565:.././hal/sam3u1c/pmc.c **** 
 566:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 567:.././hal/sam3u1c/pmc.c **** /**
 568:.././hal/sam3u1c/pmc.c ****  * \brief Enable PLLB clock.
 569:.././hal/sam3u1c/pmc.c ****  *
 570:.././hal/sam3u1c/pmc.c ****  * \param mulb PLLB multiplier.
 571:.././hal/sam3u1c/pmc.c ****  * \param pllbcount PLLB counter.
 572:.././hal/sam3u1c/pmc.c ****  * \param divb Divider.
 573:.././hal/sam3u1c/pmc.c ****  */
 574:.././hal/sam3u1c/pmc.c **** void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
 575:.././hal/sam3u1c/pmc.c **** {
 576:.././hal/sam3u1c/pmc.c **** 	/* first disable the PLL to unlock the lock */
 577:.././hal/sam3u1c/pmc.c **** 	pmc_disable_pllbck();
 578:.././hal/sam3u1c/pmc.c **** 
 579:.././hal/sam3u1c/pmc.c **** #if SAMG55
 580:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
 581:.././hal/sam3u1c/pmc.c **** 		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
 582:.././hal/sam3u1c/pmc.c **** #else
 583:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLBR =
 584:.././hal/sam3u1c/pmc.c **** 			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
 585:.././hal/sam3u1c/pmc.c **** 			| CKGR_PLLBR_MULB(mulb);
 586:.././hal/sam3u1c/pmc.c **** #endif
 587:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
 588:.././hal/sam3u1c/pmc.c **** }
 589:.././hal/sam3u1c/pmc.c **** 
 590:.././hal/sam3u1c/pmc.c **** /**
 591:.././hal/sam3u1c/pmc.c ****  * \brief Disable PLLB clock.
 592:.././hal/sam3u1c/pmc.c ****  */
 593:.././hal/sam3u1c/pmc.c **** void pmc_disable_pllbck(void)
 594:.././hal/sam3u1c/pmc.c **** {
 595:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
 596:.././hal/sam3u1c/pmc.c **** }
 597:.././hal/sam3u1c/pmc.c **** 
 598:.././hal/sam3u1c/pmc.c **** /**
 599:.././hal/sam3u1c/pmc.c ****  * \brief Is PLLB locked?
 600:.././hal/sam3u1c/pmc.c ****  *
 601:.././hal/sam3u1c/pmc.c ****  * \retval 0 Not locked.
 602:.././hal/sam3u1c/pmc.c ****  * \retval 1 Locked.
 603:.././hal/sam3u1c/pmc.c ****  */
 604:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_locked_pllbck(void)
 605:.././hal/sam3u1c/pmc.c **** {
 606:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKB);
 607:.././hal/sam3u1c/pmc.c **** }
 608:.././hal/sam3u1c/pmc.c **** #endif
 609:.././hal/sam3u1c/pmc.c **** 
 610:.././hal/sam3u1c/pmc.c **** #if (SAM3XA || SAM3U)
 611:.././hal/sam3u1c/pmc.c **** /**
 612:.././hal/sam3u1c/pmc.c ****  * \brief Enable UPLL clock.
 613:.././hal/sam3u1c/pmc.c ****  */
 614:.././hal/sam3u1c/pmc.c **** void pmc_enable_upll_clock(void)
 615:.././hal/sam3u1c/pmc.c **** {
 1886              	 .loc 1 615 1
 1887              	 .cfi_startproc
 1888              	 
 1889              	 
 1890              	 
 1891 0000 80B4     	 push {r7}
 1892              	.LCFI127:
 1893              	 .cfi_def_cfa_offset 4
 1894              	 .cfi_offset 7,-4
 1895 0002 00AF     	 add r7,sp,#0
 1896              	.LCFI128:
 1897              	 .cfi_def_cfa_register 7
 616:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
 1898              	 .loc 1 616 5
 1899 0004 074B     	 ldr r3,.L129
 1900              	 .loc 1 616 17
 1901 0006 4FF44412 	 mov r2,#3211264
 1902 000a DA61     	 str r2,[r3,#28]
 617:.././hal/sam3u1c/pmc.c **** 
 618:.././hal/sam3u1c/pmc.c **** 	/* Wait UTMI PLL Lock Status */
 619:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
 1903              	 .loc 1 619 8
 1904 000c 00BF     	 nop
 1905              	.L128:
 1906              	 .loc 1 619 14 discriminator 1
 1907 000e 054B     	 ldr r3,.L129
 1908 0010 9B6E     	 ldr r3,[r3,#104]
 1909              	 .loc 1 619 23 discriminator 1
 1910 0012 03F04003 	 and r3,r3,#64
 1911              	 .loc 1 619 8 discriminator 1
 1912 0016 002B     	 cmp r3,#0
 1913 0018 F9D0     	 beq .L128
 620:.././hal/sam3u1c/pmc.c **** }
 1914              	 .loc 1 620 1
 1915 001a 00BF     	 nop
 1916 001c 00BF     	 nop
 1917 001e BD46     	 mov sp,r7
 1918              	.LCFI129:
 1919              	 .cfi_def_cfa_register 13
 1920              	 
 1921 0020 80BC     	 pop {r7}
 1922              	.LCFI130:
 1923              	 .cfi_restore 7
 1924              	 .cfi_def_cfa_offset 0
 1925 0022 7047     	 bx lr
 1926              	.L130:
 1927              	 .align 2
 1928              	.L129:
 1929 0024 00040E40 	 .word 1074660352
 1930              	 .cfi_endproc
 1931              	.LFE93:
 1933              	 .section .text.pmc_disable_upll_clock,"ax",%progbits
 1934              	 .align 1
 1935              	 .global pmc_disable_upll_clock
 1936              	 .syntax unified
 1937              	 .thumb
 1938              	 .thumb_func
 1939              	 .fpu softvfp
 1941              	pmc_disable_upll_clock:
 1942              	.LFB94:
 621:.././hal/sam3u1c/pmc.c **** 
 622:.././hal/sam3u1c/pmc.c **** /**
 623:.././hal/sam3u1c/pmc.c ****  * \brief Disable UPLL clock.
 624:.././hal/sam3u1c/pmc.c ****  */
 625:.././hal/sam3u1c/pmc.c **** void pmc_disable_upll_clock(void)
 626:.././hal/sam3u1c/pmc.c **** {
 1943              	 .loc 1 626 1
 1944              	 .cfi_startproc
 1945              	 
 1946              	 
 1947              	 
 1948 0000 80B4     	 push {r7}
 1949              	.LCFI131:
 1950              	 .cfi_def_cfa_offset 4
 1951              	 .cfi_offset 7,-4
 1952 0002 00AF     	 add r7,sp,#0
 1953              	.LCFI132:
 1954              	 .cfi_def_cfa_register 7
 627:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
 1955              	 .loc 1 627 17
 1956 0004 044B     	 ldr r3,.L132
 1957 0006 DB69     	 ldr r3,[r3,#28]
 1958 0008 034A     	 ldr r2,.L132
 1959 000a 23F48033 	 bic r3,r3,#65536
 1960 000e D361     	 str r3,[r2,#28]
 628:.././hal/sam3u1c/pmc.c **** }
 1961              	 .loc 1 628 1
 1962 0010 00BF     	 nop
 1963 0012 BD46     	 mov sp,r7
 1964              	.LCFI133:
 1965              	 .cfi_def_cfa_register 13
 1966              	 
 1967 0014 80BC     	 pop {r7}
 1968              	.LCFI134:
 1969              	 .cfi_restore 7
 1970              	 .cfi_def_cfa_offset 0
 1971 0016 7047     	 bx lr
 1972              	.L133:
 1973              	 .align 2
 1974              	.L132:
 1975 0018 00040E40 	 .word 1074660352
 1976              	 .cfi_endproc
 1977              	.LFE94:
 1979              	 .section .text.pmc_is_locked_upll,"ax",%progbits
 1980              	 .align 1
 1981              	 .global pmc_is_locked_upll
 1982              	 .syntax unified
 1983              	 .thumb
 1984              	 .thumb_func
 1985              	 .fpu softvfp
 1987              	pmc_is_locked_upll:
 1988              	.LFB95:
 629:.././hal/sam3u1c/pmc.c **** 
 630:.././hal/sam3u1c/pmc.c **** /**
 631:.././hal/sam3u1c/pmc.c ****  * \brief Is UPLL locked?
 632:.././hal/sam3u1c/pmc.c ****  *
 633:.././hal/sam3u1c/pmc.c ****  * \retval 0 Not locked.
 634:.././hal/sam3u1c/pmc.c ****  * \retval 1 Locked.
 635:.././hal/sam3u1c/pmc.c ****  */
 636:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_locked_upll(void)
 637:.././hal/sam3u1c/pmc.c **** {
 1989              	 .loc 1 637 1
 1990              	 .cfi_startproc
 1991              	 
 1992              	 
 1993              	 
 1994 0000 80B4     	 push {r7}
 1995              	.LCFI135:
 1996              	 .cfi_def_cfa_offset 4
 1997              	 .cfi_offset 7,-4
 1998 0002 00AF     	 add r7,sp,#0
 1999              	.LCFI136:
 2000              	 .cfi_def_cfa_register 7
 638:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKU);
 2001              	 .loc 1 638 13
 2002 0004 034B     	 ldr r3,.L136
 2003 0006 9B6E     	 ldr r3,[r3,#104]
 2004              	 .loc 1 638 22
 2005 0008 03F04003 	 and r3,r3,#64
 639:.././hal/sam3u1c/pmc.c **** }
 2006              	 .loc 1 639 1
 2007 000c 1846     	 mov r0,r3
 2008 000e BD46     	 mov sp,r7
 2009              	.LCFI137:
 2010              	 .cfi_def_cfa_register 13
 2011              	 
 2012 0010 80BC     	 pop {r7}
 2013              	.LCFI138:
 2014              	 .cfi_restore 7
 2015              	 .cfi_def_cfa_offset 0
 2016 0012 7047     	 bx lr
 2017              	.L137:
 2018              	 .align 2
 2019              	.L136:
 2020 0014 00040E40 	 .word 1074660352
 2021              	 .cfi_endproc
 2022              	.LFE95:
 2024              	 .section .text.pmc_enable_periph_clk,"ax",%progbits
 2025              	 .align 1
 2026              	 .global pmc_enable_periph_clk
 2027              	 .syntax unified
 2028              	 .thumb
 2029              	 .thumb_func
 2030              	 .fpu softvfp
 2032              	pmc_enable_periph_clk:
 2033              	.LFB96:
 640:.././hal/sam3u1c/pmc.c **** #endif
 641:.././hal/sam3u1c/pmc.c **** 
 642:.././hal/sam3u1c/pmc.c **** /**
 643:.././hal/sam3u1c/pmc.c ****  * \brief Enable the specified peripheral clock.
 644:.././hal/sam3u1c/pmc.c ****  *
 645:.././hal/sam3u1c/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 646:.././hal/sam3u1c/pmc.c ****  *
 647:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 648:.././hal/sam3u1c/pmc.c ****  *
 649:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 650:.././hal/sam3u1c/pmc.c ****  * \retval 1 Invalid parameter.
 651:.././hal/sam3u1c/pmc.c ****  */
 652:.././hal/sam3u1c/pmc.c **** uint32_t pmc_enable_periph_clk(uint32_t ul_id)
 653:.././hal/sam3u1c/pmc.c **** {
 2034              	 .loc 1 653 1
 2035              	 .cfi_startproc
 2036              	 
 2037              	 
 2038              	 
 2039 0000 80B4     	 push {r7}
 2040              	.LCFI139:
 2041              	 .cfi_def_cfa_offset 4
 2042              	 .cfi_offset 7,-4
 2043 0002 83B0     	 sub sp,sp,#12
 2044              	.LCFI140:
 2045              	 .cfi_def_cfa_offset 16
 2046 0004 00AF     	 add r7,sp,#0
 2047              	.LCFI141:
 2048              	 .cfi_def_cfa_register 7
 2049 0006 7860     	 str r0,[r7,#4]
 654:.././hal/sam3u1c/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 2050              	 .loc 1 654 5
 2051 0008 7B68     	 ldr r3,[r7,#4]
 2052 000a 1D2B     	 cmp r3,#29
 2053 000c 01D9     	 bls .L139
 655:.././hal/sam3u1c/pmc.c **** 		return 1;
 2054              	 .loc 1 655 10
 2055 000e 0123     	 movs r3,#1
 2056 0010 15E0     	 b .L140
 2057              	.L139:
 656:.././hal/sam3u1c/pmc.c **** 	}
 657:.././hal/sam3u1c/pmc.c **** 
 658:.././hal/sam3u1c/pmc.c **** 	if (ul_id < 32) {
 2058              	 .loc 1 658 5
 2059 0012 7B68     	 ldr r3,[r7,#4]
 2060 0014 1F2B     	 cmp r3,#31
 2061 0016 11D8     	 bhi .L141
 659:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
 2062              	 .loc 1 659 11
 2063 0018 0B4B     	 ldr r3,.L142
 2064 001a 9A69     	 ldr r2,[r3,#24]
 2065              	 .loc 1 659 29
 2066 001c 0121     	 movs r1,#1
 2067 001e 7B68     	 ldr r3,[r7,#4]
 2068 0020 01FA03F3 	 lsl r3,r1,r3
 2069              	 .loc 1 659 23
 2070 0024 1A40     	 ands r2,r2,r3
 2071              	 .loc 1 659 47
 2072 0026 0121     	 movs r1,#1
 2073 0028 7B68     	 ldr r3,[r7,#4]
 2074 002a 01FA03F3 	 lsl r3,r1,r3
 2075              	 .loc 1 659 6
 2076 002e 9A42     	 cmp r2,r3
 2077 0030 04D0     	 beq .L141
 660:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCER0 = 1 << ul_id;
 2078              	 .loc 1 660 23
 2079 0032 0122     	 movs r2,#1
 2080 0034 7B68     	 ldr r3,[r7,#4]
 2081 0036 9A40     	 lsls r2,r2,r3
 2082              	 .loc 1 660 7
 2083 0038 034B     	 ldr r3,.L142
 2084              	 .loc 1 660 19
 2085 003a 1A61     	 str r2,[r3,#16]
 2086              	.L141:
 661:.././hal/sam3u1c/pmc.c **** 		}
 662:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
 663:.././hal/sam3u1c/pmc.c **** 	} else {
 664:.././hal/sam3u1c/pmc.c **** 		ul_id -= 32;
 665:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
 666:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCER1 = 1 << ul_id;
 667:.././hal/sam3u1c/pmc.c **** 		}
 668:.././hal/sam3u1c/pmc.c **** #endif
 669:.././hal/sam3u1c/pmc.c **** 	}
 670:.././hal/sam3u1c/pmc.c **** 
 671:.././hal/sam3u1c/pmc.c **** 	return 0;
 2087              	 .loc 1 671 9
 2088 003c 0023     	 movs r3,#0
 2089              	.L140:
 672:.././hal/sam3u1c/pmc.c **** }
 2090              	 .loc 1 672 1
 2091 003e 1846     	 mov r0,r3
 2092 0040 0C37     	 adds r7,r7,#12
 2093              	.LCFI142:
 2094              	 .cfi_def_cfa_offset 4
 2095 0042 BD46     	 mov sp,r7
 2096              	.LCFI143:
 2097              	 .cfi_def_cfa_register 13
 2098              	 
 2099 0044 80BC     	 pop {r7}
 2100              	.LCFI144:
 2101              	 .cfi_restore 7
 2102              	 .cfi_def_cfa_offset 0
 2103 0046 7047     	 bx lr
 2104              	.L143:
 2105              	 .align 2
 2106              	.L142:
 2107 0048 00040E40 	 .word 1074660352
 2108              	 .cfi_endproc
 2109              	.LFE96:
 2111              	 .section .text.pmc_disable_periph_clk,"ax",%progbits
 2112              	 .align 1
 2113              	 .global pmc_disable_periph_clk
 2114              	 .syntax unified
 2115              	 .thumb
 2116              	 .thumb_func
 2117              	 .fpu softvfp
 2119              	pmc_disable_periph_clk:
 2120              	.LFB97:
 673:.././hal/sam3u1c/pmc.c **** 
 674:.././hal/sam3u1c/pmc.c **** /**
 675:.././hal/sam3u1c/pmc.c ****  * \brief Disable the specified peripheral clock.
 676:.././hal/sam3u1c/pmc.c ****  *
 677:.././hal/sam3u1c/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 678:.././hal/sam3u1c/pmc.c ****  *
 679:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 680:.././hal/sam3u1c/pmc.c ****  *
 681:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 682:.././hal/sam3u1c/pmc.c ****  * \retval 1 Invalid parameter.
 683:.././hal/sam3u1c/pmc.c ****  */
 684:.././hal/sam3u1c/pmc.c **** uint32_t pmc_disable_periph_clk(uint32_t ul_id)
 685:.././hal/sam3u1c/pmc.c **** {
 2121              	 .loc 1 685 1
 2122              	 .cfi_startproc
 2123              	 
 2124              	 
 2125              	 
 2126 0000 80B4     	 push {r7}
 2127              	.LCFI145:
 2128              	 .cfi_def_cfa_offset 4
 2129              	 .cfi_offset 7,-4
 2130 0002 83B0     	 sub sp,sp,#12
 2131              	.LCFI146:
 2132              	 .cfi_def_cfa_offset 16
 2133 0004 00AF     	 add r7,sp,#0
 2134              	.LCFI147:
 2135              	 .cfi_def_cfa_register 7
 2136 0006 7860     	 str r0,[r7,#4]
 686:.././hal/sam3u1c/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 2137              	 .loc 1 686 5
 2138 0008 7B68     	 ldr r3,[r7,#4]
 2139 000a 1D2B     	 cmp r3,#29
 2140 000c 01D9     	 bls .L145
 687:.././hal/sam3u1c/pmc.c **** 		return 1;
 2141              	 .loc 1 687 10
 2142 000e 0123     	 movs r3,#1
 2143 0010 15E0     	 b .L146
 2144              	.L145:
 688:.././hal/sam3u1c/pmc.c **** 	}
 689:.././hal/sam3u1c/pmc.c **** 
 690:.././hal/sam3u1c/pmc.c **** 	if (ul_id < 32) {
 2145              	 .loc 1 690 5
 2146 0012 7B68     	 ldr r3,[r7,#4]
 2147 0014 1F2B     	 cmp r3,#31
 2148 0016 11D8     	 bhi .L147
 691:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
 2149              	 .loc 1 691 11
 2150 0018 0B4B     	 ldr r3,.L148
 2151 001a 9A69     	 ldr r2,[r3,#24]
 2152              	 .loc 1 691 29
 2153 001c 0121     	 movs r1,#1
 2154 001e 7B68     	 ldr r3,[r7,#4]
 2155 0020 01FA03F3 	 lsl r3,r1,r3
 2156              	 .loc 1 691 23
 2157 0024 1A40     	 ands r2,r2,r3
 2158              	 .loc 1 691 47
 2159 0026 0121     	 movs r1,#1
 2160 0028 7B68     	 ldr r3,[r7,#4]
 2161 002a 01FA03F3 	 lsl r3,r1,r3
 2162              	 .loc 1 691 6
 2163 002e 9A42     	 cmp r2,r3
 2164 0030 04D1     	 bne .L147
 692:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCDR0 = 1 << ul_id;
 2165              	 .loc 1 692 23
 2166 0032 0122     	 movs r2,#1
 2167 0034 7B68     	 ldr r3,[r7,#4]
 2168 0036 9A40     	 lsls r2,r2,r3
 2169              	 .loc 1 692 7
 2170 0038 034B     	 ldr r3,.L148
 2171              	 .loc 1 692 19
 2172 003a 5A61     	 str r2,[r3,#20]
 2173              	.L147:
 693:.././hal/sam3u1c/pmc.c **** 		}
 694:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
 695:.././hal/sam3u1c/pmc.c **** 	} else {
 696:.././hal/sam3u1c/pmc.c **** 		ul_id -= 32;
 697:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
 698:.././hal/sam3u1c/pmc.c **** 			PMC->PMC_PCDR1 = 1 << ul_id;
 699:.././hal/sam3u1c/pmc.c **** 		}
 700:.././hal/sam3u1c/pmc.c **** #endif
 701:.././hal/sam3u1c/pmc.c **** 	}
 702:.././hal/sam3u1c/pmc.c **** 	return 0;
 2174              	 .loc 1 702 9
 2175 003c 0023     	 movs r3,#0
 2176              	.L146:
 703:.././hal/sam3u1c/pmc.c **** }
 2177              	 .loc 1 703 1
 2178 003e 1846     	 mov r0,r3
 2179 0040 0C37     	 adds r7,r7,#12
 2180              	.LCFI148:
 2181              	 .cfi_def_cfa_offset 4
 2182 0042 BD46     	 mov sp,r7
 2183              	.LCFI149:
 2184              	 .cfi_def_cfa_register 13
 2185              	 
 2186 0044 80BC     	 pop {r7}
 2187              	.LCFI150:
 2188              	 .cfi_restore 7
 2189              	 .cfi_def_cfa_offset 0
 2190 0046 7047     	 bx lr
 2191              	.L149:
 2192              	 .align 2
 2193              	.L148:
 2194 0048 00040E40 	 .word 1074660352
 2195              	 .cfi_endproc
 2196              	.LFE97:
 2198              	 .section .text.pmc_enable_all_periph_clk,"ax",%progbits
 2199              	 .align 1
 2200              	 .global pmc_enable_all_periph_clk
 2201              	 .syntax unified
 2202              	 .thumb
 2203              	 .thumb_func
 2204              	 .fpu softvfp
 2206              	pmc_enable_all_periph_clk:
 2207              	.LFB98:
 704:.././hal/sam3u1c/pmc.c **** 
 705:.././hal/sam3u1c/pmc.c **** /**
 706:.././hal/sam3u1c/pmc.c ****  * \brief Enable all peripheral clocks.
 707:.././hal/sam3u1c/pmc.c ****  */
 708:.././hal/sam3u1c/pmc.c **** void pmc_enable_all_periph_clk(void)
 709:.././hal/sam3u1c/pmc.c **** {
 2208              	 .loc 1 709 1
 2209              	 .cfi_startproc
 2210              	 
 2211              	 
 2212              	 
 2213 0000 80B4     	 push {r7}
 2214              	.LCFI151:
 2215              	 .cfi_def_cfa_offset 4
 2216              	 .cfi_offset 7,-4
 2217 0002 00AF     	 add r7,sp,#0
 2218              	.LCFI152:
 2219              	 .cfi_def_cfa_register 7
 710:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCER0 = PMC_MASK_STATUS0;
 2220              	 .loc 1 710 5
 2221 0004 084B     	 ldr r3,.L152
 2222              	 .loc 1 710 17
 2223 0006 6FF00302 	 mvn r2,#3
 2224 000a 1A61     	 str r2,[r3,#16]
 711:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != PMC_MASK_STATUS0);
 2225              	 .loc 1 711 8
 2226 000c 00BF     	 nop
 2227              	.L151:
 2228              	 .loc 1 711 13 discriminator 1
 2229 000e 064B     	 ldr r3,.L152
 2230 0010 9B69     	 ldr r3,[r3,#24]
 2231              	 .loc 1 711 25 discriminator 1
 2232 0012 23F00303 	 bic r3,r3,#3
 2233              	 .loc 1 711 8 discriminator 1
 2234 0016 13F1040F 	 cmn r3,#4
 2235 001a F8D1     	 bne .L151
 712:.././hal/sam3u1c/pmc.c **** 
 713:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 714:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCER1 = PMC_MASK_STATUS1;
 715:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != PMC_MASK_STATUS1);
 716:.././hal/sam3u1c/pmc.c **** #endif
 717:.././hal/sam3u1c/pmc.c **** }
 2236              	 .loc 1 717 1
 2237 001c 00BF     	 nop
 2238 001e 00BF     	 nop
 2239 0020 BD46     	 mov sp,r7
 2240              	.LCFI153:
 2241              	 .cfi_def_cfa_register 13
 2242              	 
 2243 0022 80BC     	 pop {r7}
 2244              	.LCFI154:
 2245              	 .cfi_restore 7
 2246              	 .cfi_def_cfa_offset 0
 2247 0024 7047     	 bx lr
 2248              	.L153:
 2249 0026 00BF     	 .align 2
 2250              	.L152:
 2251 0028 00040E40 	 .word 1074660352
 2252              	 .cfi_endproc
 2253              	.LFE98:
 2255              	 .section .text.pmc_disable_all_periph_clk,"ax",%progbits
 2256              	 .align 1
 2257              	 .global pmc_disable_all_periph_clk
 2258              	 .syntax unified
 2259              	 .thumb
 2260              	 .thumb_func
 2261              	 .fpu softvfp
 2263              	pmc_disable_all_periph_clk:
 2264              	.LFB99:
 718:.././hal/sam3u1c/pmc.c **** 
 719:.././hal/sam3u1c/pmc.c **** /**
 720:.././hal/sam3u1c/pmc.c ****  * \brief Disable all peripheral clocks.
 721:.././hal/sam3u1c/pmc.c ****  */
 722:.././hal/sam3u1c/pmc.c **** void pmc_disable_all_periph_clk(void)
 723:.././hal/sam3u1c/pmc.c **** {
 2265              	 .loc 1 723 1
 2266              	 .cfi_startproc
 2267              	 
 2268              	 
 2269              	 
 2270 0000 80B4     	 push {r7}
 2271              	.LCFI155:
 2272              	 .cfi_def_cfa_offset 4
 2273              	 .cfi_offset 7,-4
 2274 0002 00AF     	 add r7,sp,#0
 2275              	.LCFI156:
 2276              	 .cfi_def_cfa_register 7
 724:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCDR0 = PMC_MASK_STATUS0;
 2277              	 .loc 1 724 5
 2278 0004 074B     	 ldr r3,.L156
 2279              	 .loc 1 724 17
 2280 0006 6FF00302 	 mvn r2,#3
 2281 000a 5A61     	 str r2,[r3,#20]
 725:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != 0);
 2282              	 .loc 1 725 8
 2283 000c 00BF     	 nop
 2284              	.L155:
 2285              	 .loc 1 725 13 discriminator 1
 2286 000e 054B     	 ldr r3,.L156
 2287 0010 9B69     	 ldr r3,[r3,#24]
 2288              	 .loc 1 725 25 discriminator 1
 2289 0012 23F00303 	 bic r3,r3,#3
 2290              	 .loc 1 725 8 discriminator 1
 2291 0016 002B     	 cmp r3,#0
 2292 0018 F9D1     	 bne .L155
 726:.././hal/sam3u1c/pmc.c **** 
 727:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 728:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCDR1 = PMC_MASK_STATUS1;
 729:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != 0);
 730:.././hal/sam3u1c/pmc.c **** #endif
 731:.././hal/sam3u1c/pmc.c **** }
 2293              	 .loc 1 731 1
 2294 001a 00BF     	 nop
 2295 001c 00BF     	 nop
 2296 001e BD46     	 mov sp,r7
 2297              	.LCFI157:
 2298              	 .cfi_def_cfa_register 13
 2299              	 
 2300 0020 80BC     	 pop {r7}
 2301              	.LCFI158:
 2302              	 .cfi_restore 7
 2303              	 .cfi_def_cfa_offset 0
 2304 0022 7047     	 bx lr
 2305              	.L157:
 2306              	 .align 2
 2307              	.L156:
 2308 0024 00040E40 	 .word 1074660352
 2309              	 .cfi_endproc
 2310              	.LFE99:
 2312              	 .section .text.pmc_is_periph_clk_enabled,"ax",%progbits
 2313              	 .align 1
 2314              	 .global pmc_is_periph_clk_enabled
 2315              	 .syntax unified
 2316              	 .thumb
 2317              	 .thumb_func
 2318              	 .fpu softvfp
 2320              	pmc_is_periph_clk_enabled:
 2321              	.LFB100:
 732:.././hal/sam3u1c/pmc.c **** 
 733:.././hal/sam3u1c/pmc.c **** /**
 734:.././hal/sam3u1c/pmc.c ****  * \brief Check if the specified peripheral clock is enabled.
 735:.././hal/sam3u1c/pmc.c ****  *
 736:.././hal/sam3u1c/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 737:.././hal/sam3u1c/pmc.c ****  *
 738:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 739:.././hal/sam3u1c/pmc.c ****  *
 740:.././hal/sam3u1c/pmc.c ****  * \retval 0 Peripheral clock is disabled or unknown.
 741:.././hal/sam3u1c/pmc.c ****  * \retval 1 Peripheral clock is enabled.
 742:.././hal/sam3u1c/pmc.c ****  */
 743:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_periph_clk_enabled(uint32_t ul_id)
 744:.././hal/sam3u1c/pmc.c **** {
 2322              	 .loc 1 744 1
 2323              	 .cfi_startproc
 2324              	 
 2325              	 
 2326              	 
 2327 0000 80B4     	 push {r7}
 2328              	.LCFI159:
 2329              	 .cfi_def_cfa_offset 4
 2330              	 .cfi_offset 7,-4
 2331 0002 83B0     	 sub sp,sp,#12
 2332              	.LCFI160:
 2333              	 .cfi_def_cfa_offset 16
 2334 0004 00AF     	 add r7,sp,#0
 2335              	.LCFI161:
 2336              	 .cfi_def_cfa_register 7
 2337 0006 7860     	 str r0,[r7,#4]
 745:.././hal/sam3u1c/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 2338              	 .loc 1 745 5
 2339 0008 7B68     	 ldr r3,[r7,#4]
 2340 000a 1D2B     	 cmp r3,#29
 2341 000c 01D9     	 bls .L159
 746:.././hal/sam3u1c/pmc.c **** 		return 0;
 2342              	 .loc 1 746 10
 2343 000e 0023     	 movs r3,#0
 2344 0010 0BE0     	 b .L160
 2345              	.L159:
 747:.././hal/sam3u1c/pmc.c **** 	}
 748:.././hal/sam3u1c/pmc.c **** 
 749:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 750:.././hal/sam3u1c/pmc.c **** 	if (ul_id < 32) {
 751:.././hal/sam3u1c/pmc.c **** #endif
 752:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id))) {
 2346              	 .loc 1 752 11
 2347 0012 084B     	 ldr r3,.L162
 2348 0014 9A69     	 ldr r2,[r3,#24]
 2349              	 .loc 1 752 29
 2350 0016 0121     	 movs r1,#1
 2351 0018 7B68     	 ldr r3,[r7,#4]
 2352 001a 01FA03F3 	 lsl r3,r1,r3
 2353              	 .loc 1 752 23
 2354 001e 1340     	 ands r3,r3,r2
 2355              	 .loc 1 752 6
 2356 0020 002B     	 cmp r3,#0
 2357 0022 01D0     	 beq .L161
 753:.././hal/sam3u1c/pmc.c **** 			return 1;
 2358              	 .loc 1 753 11
 2359 0024 0123     	 movs r3,#1
 2360 0026 00E0     	 b .L160
 2361              	.L161:
 754:.././hal/sam3u1c/pmc.c **** 		} else {
 755:.././hal/sam3u1c/pmc.c **** 			return 0;
 2362              	 .loc 1 755 11
 2363 0028 0023     	 movs r3,#0
 2364              	.L160:
 756:.././hal/sam3u1c/pmc.c **** 		}
 757:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP)
 758:.././hal/sam3u1c/pmc.c **** 	} else {
 759:.././hal/sam3u1c/pmc.c **** 		ul_id -= 32;
 760:.././hal/sam3u1c/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id))) {
 761:.././hal/sam3u1c/pmc.c **** 			return 1;
 762:.././hal/sam3u1c/pmc.c **** 		} else {
 763:.././hal/sam3u1c/pmc.c **** 			return 0;
 764:.././hal/sam3u1c/pmc.c **** 		}
 765:.././hal/sam3u1c/pmc.c **** 	}
 766:.././hal/sam3u1c/pmc.c **** #endif
 767:.././hal/sam3u1c/pmc.c **** }
 2365              	 .loc 1 767 1
 2366 002a 1846     	 mov r0,r3
 2367 002c 0C37     	 adds r7,r7,#12
 2368              	.LCFI162:
 2369              	 .cfi_def_cfa_offset 4
 2370 002e BD46     	 mov sp,r7
 2371              	.LCFI163:
 2372              	 .cfi_def_cfa_register 13
 2373              	 
 2374 0030 80BC     	 pop {r7}
 2375              	.LCFI164:
 2376              	 .cfi_restore 7
 2377              	 .cfi_def_cfa_offset 0
 2378 0032 7047     	 bx lr
 2379              	.L163:
 2380              	 .align 2
 2381              	.L162:
 2382 0034 00040E40 	 .word 1074660352
 2383              	 .cfi_endproc
 2384              	.LFE100:
 2386              	 .section .text.pmc_pck_set_prescaler,"ax",%progbits
 2387              	 .align 1
 2388              	 .global pmc_pck_set_prescaler
 2389              	 .syntax unified
 2390              	 .thumb
 2391              	 .thumb_func
 2392              	 .fpu softvfp
 2394              	pmc_pck_set_prescaler:
 2395              	.LFB101:
 768:.././hal/sam3u1c/pmc.c **** 
 769:.././hal/sam3u1c/pmc.c **** /**
 770:.././hal/sam3u1c/pmc.c ****  * \brief Set the prescaler for the specified programmable clock.
 771:.././hal/sam3u1c/pmc.c ****  *
 772:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID.
 773:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Prescaler value.
 774:.././hal/sam3u1c/pmc.c ****  */
 775:.././hal/sam3u1c/pmc.c **** void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
 776:.././hal/sam3u1c/pmc.c **** {
 2396              	 .loc 1 776 1
 2397              	 .cfi_startproc
 2398              	 
 2399              	 
 2400              	 
 2401 0000 80B4     	 push {r7}
 2402              	.LCFI165:
 2403              	 .cfi_def_cfa_offset 4
 2404              	 .cfi_offset 7,-4
 2405 0002 83B0     	 sub sp,sp,#12
 2406              	.LCFI166:
 2407              	 .cfi_def_cfa_offset 16
 2408 0004 00AF     	 add r7,sp,#0
 2409              	.LCFI167:
 2410              	 .cfi_def_cfa_register 7
 2411 0006 7860     	 str r0,[r7,#4]
 2412 0008 3960     	 str r1,[r7]
 777:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 778:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
 2413              	 .loc 1 778 8
 2414 000a 144A     	 ldr r2,.L168
 2415              	 .loc 1 778 17
 2416 000c 7B68     	 ldr r3,[r7,#4]
 2417 000e 1033     	 adds r3,r3,#16
 2418 0010 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2419              	 .loc 1 778 25
 2420 0014 23F07002 	 bic r2,r3,#112
 777:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2421              	 .loc 1 777 5
 2422 0018 1049     	 ldr r1,.L168
 2423              	 .loc 1 778 46
 2424 001a 3B68     	 ldr r3,[r7]
 2425 001c 1A43     	 orrs r2,r2,r3
 777:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2426              	 .loc 1 777 22
 2427 001e 7B68     	 ldr r3,[r7,#4]
 2428 0020 1033     	 adds r3,r3,#16
 2429 0022 41F82320 	 str r2,[r1,r3,lsl#2]
 779:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 2430              	 .loc 1 779 8
 2431 0026 00BF     	 nop
 2432              	.L166:
 2433              	 .loc 1 779 13
 2434 0028 0C4B     	 ldr r3,.L168
 2435 002a 1A68     	 ldr r2,[r3]
 2436              	 .loc 1 779 41
 2437 002c 4FF48071 	 mov r1,#256
 2438 0030 7B68     	 ldr r3,[r7,#4]
 2439 0032 01FA03F3 	 lsl r3,r1,r3
 2440              	 .loc 1 779 24
 2441 0036 1340     	 ands r3,r3,r2
 2442              	 .loc 1 779 8
 2443 0038 002B     	 cmp r3,#0
 2444 003a 09D0     	 beq .L167
 780:.././hal/sam3u1c/pmc.c **** 			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
 2445              	 .loc 1 780 12
 2446 003c 074B     	 ldr r3,.L168
 2447 003e 9A6E     	 ldr r2,[r3,#104]
 2448              	 .loc 1 780 39
 2449 0040 4FF48071 	 mov r1,#256
 2450 0044 7B68     	 ldr r3,[r7,#4]
 2451 0046 01FA03F3 	 lsl r3,r1,r3
 2452              	 .loc 1 780 21
 2453 004a 1340     	 ands r3,r3,r2
 2454              	 .loc 1 780 4
 2455 004c 002B     	 cmp r3,#0
 2456 004e EBD0     	 beq .L166
 2457              	.L167:
 781:.././hal/sam3u1c/pmc.c **** }
 2458              	 .loc 1 781 1
 2459 0050 00BF     	 nop
 2460 0052 0C37     	 adds r7,r7,#12
 2461              	.LCFI168:
 2462              	 .cfi_def_cfa_offset 4
 2463 0054 BD46     	 mov sp,r7
 2464              	.LCFI169:
 2465              	 .cfi_def_cfa_register 13
 2466              	 
 2467 0056 80BC     	 pop {r7}
 2468              	.LCFI170:
 2469              	 .cfi_restore 7
 2470              	 .cfi_def_cfa_offset 0
 2471 0058 7047     	 bx lr
 2472              	.L169:
 2473 005a 00BF     	 .align 2
 2474              	.L168:
 2475 005c 00040E40 	 .word 1074660352
 2476              	 .cfi_endproc
 2477              	.LFE101:
 2479              	 .section .text.pmc_pck_set_source,"ax",%progbits
 2480              	 .align 1
 2481              	 .global pmc_pck_set_source
 2482              	 .syntax unified
 2483              	 .thumb
 2484              	 .thumb_func
 2485              	 .fpu softvfp
 2487              	pmc_pck_set_source:
 2488              	.LFB102:
 782:.././hal/sam3u1c/pmc.c **** 
 783:.././hal/sam3u1c/pmc.c **** /**
 784:.././hal/sam3u1c/pmc.c ****  * \brief Set the source oscillator for the specified programmable clock.
 785:.././hal/sam3u1c/pmc.c ****  *
 786:.././hal/sam3u1c/pmc.c ****  * \param ul_id Peripheral ID.
 787:.././hal/sam3u1c/pmc.c ****  * \param ul_source Source selection value.
 788:.././hal/sam3u1c/pmc.c ****  */
 789:.././hal/sam3u1c/pmc.c **** void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
 790:.././hal/sam3u1c/pmc.c **** {
 2489              	 .loc 1 790 1
 2490              	 .cfi_startproc
 2491              	 
 2492              	 
 2493              	 
 2494 0000 80B4     	 push {r7}
 2495              	.LCFI171:
 2496              	 .cfi_def_cfa_offset 4
 2497              	 .cfi_offset 7,-4
 2498 0002 83B0     	 sub sp,sp,#12
 2499              	.LCFI172:
 2500              	 .cfi_def_cfa_offset 16
 2501 0004 00AF     	 add r7,sp,#0
 2502              	.LCFI173:
 2503              	 .cfi_def_cfa_register 7
 2504 0006 7860     	 str r0,[r7,#4]
 2505 0008 3960     	 str r1,[r7]
 791:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 792:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
 2506              	 .loc 1 792 8
 2507 000a 144A     	 ldr r2,.L174
 2508              	 .loc 1 792 17
 2509 000c 7B68     	 ldr r3,[r7,#4]
 2510 000e 1033     	 adds r3,r3,#16
 2511 0010 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2512              	 .loc 1 792 25
 2513 0014 23F00702 	 bic r2,r3,#7
 791:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2514              	 .loc 1 791 5
 2515 0018 1049     	 ldr r1,.L174
 2516              	 .loc 1 792 45
 2517 001a 3B68     	 ldr r3,[r7]
 2518 001c 1A43     	 orrs r2,r2,r3
 791:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 2519              	 .loc 1 791 22
 2520 001e 7B68     	 ldr r3,[r7,#4]
 2521 0020 1033     	 adds r3,r3,#16
 2522 0022 41F82320 	 str r2,[r1,r3,lsl#2]
 793:.././hal/sam3u1c/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 2523              	 .loc 1 793 8
 2524 0026 00BF     	 nop
 2525              	.L172:
 2526              	 .loc 1 793 13
 2527 0028 0C4B     	 ldr r3,.L174
 2528 002a 1A68     	 ldr r2,[r3]
 2529              	 .loc 1 793 41
 2530 002c 4FF48071 	 mov r1,#256
 2531 0030 7B68     	 ldr r3,[r7,#4]
 2532 0032 01FA03F3 	 lsl r3,r1,r3
 2533              	 .loc 1 793 24
 2534 0036 1340     	 ands r3,r3,r2
 2535              	 .loc 1 793 8
 2536 0038 002B     	 cmp r3,#0
 2537 003a 09D0     	 beq .L173
 794:.././hal/sam3u1c/pmc.c **** 			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
 2538              	 .loc 1 794 12
 2539 003c 074B     	 ldr r3,.L174
 2540 003e 9A6E     	 ldr r2,[r3,#104]
 2541              	 .loc 1 794 39
 2542 0040 4FF48071 	 mov r1,#256
 2543 0044 7B68     	 ldr r3,[r7,#4]
 2544 0046 01FA03F3 	 lsl r3,r1,r3
 2545              	 .loc 1 794 21
 2546 004a 1340     	 ands r3,r3,r2
 2547              	 .loc 1 794 4
 2548 004c 002B     	 cmp r3,#0
 2549 004e EBD0     	 beq .L172
 2550              	.L173:
 795:.././hal/sam3u1c/pmc.c **** }
 2551              	 .loc 1 795 1
 2552 0050 00BF     	 nop
 2553 0052 0C37     	 adds r7,r7,#12
 2554              	.LCFI174:
 2555              	 .cfi_def_cfa_offset 4
 2556 0054 BD46     	 mov sp,r7
 2557              	.LCFI175:
 2558              	 .cfi_def_cfa_register 13
 2559              	 
 2560 0056 80BC     	 pop {r7}
 2561              	.LCFI176:
 2562              	 .cfi_restore 7
 2563              	 .cfi_def_cfa_offset 0
 2564 0058 7047     	 bx lr
 2565              	.L175:
 2566 005a 00BF     	 .align 2
 2567              	.L174:
 2568 005c 00040E40 	 .word 1074660352
 2569              	 .cfi_endproc
 2570              	.LFE102:
 2572              	 .section .text.pmc_switch_pck_to_sclk,"ax",%progbits
 2573              	 .align 1
 2574              	 .global pmc_switch_pck_to_sclk
 2575              	 .syntax unified
 2576              	 .thumb
 2577              	 .thumb_func
 2578              	 .fpu softvfp
 2580              	pmc_switch_pck_to_sclk:
 2581              	.LFB103:
 796:.././hal/sam3u1c/pmc.c **** 
 797:.././hal/sam3u1c/pmc.c **** /**
 798:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to slow clock.
 799:.././hal/sam3u1c/pmc.c ****  *
 800:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 801:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 802:.././hal/sam3u1c/pmc.c ****  *
 803:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 804:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 805:.././hal/sam3u1c/pmc.c ****  */
 806:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_sclk(uint32_t ul_id, uint32_t ul_pres)
 807:.././hal/sam3u1c/pmc.c **** {
 2582              	 .loc 1 807 1
 2583              	 .cfi_startproc
 2584              	 
 2585              	 
 2586              	 
 2587 0000 80B4     	 push {r7}
 2588              	.LCFI177:
 2589              	 .cfi_def_cfa_offset 4
 2590              	 .cfi_offset 7,-4
 2591 0002 85B0     	 sub sp,sp,#20
 2592              	.LCFI178:
 2593              	 .cfi_def_cfa_offset 24
 2594 0004 00AF     	 add r7,sp,#0
 2595              	.LCFI179:
 2596              	 .cfi_def_cfa_register 7
 2597 0006 7860     	 str r0,[r7,#4]
 2598 0008 3960     	 str r1,[r7]
 808:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 809:.././hal/sam3u1c/pmc.c **** 
 810:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_SLOW_CLK | ul_pres;
 2599              	 .loc 1 810 5
 2600 000a 1149     	 ldr r1,.L181
 2601              	 .loc 1 810 22
 2602 000c 7B68     	 ldr r3,[r7,#4]
 2603 000e 1033     	 adds r3,r3,#16
 2604 0010 3A68     	 ldr r2,[r7]
 2605 0012 41F82320 	 str r2,[r1,r3,lsl#2]
 811:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2606              	 .loc 1 811 18
 2607 0016 4FF40063 	 mov r3,#2048
 2608 001a FB60     	 str r3,[r7,#12]
 2609              	 .loc 1 811 2
 2610 001c 07E0     	 b .L177
 2611              	.L180:
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 813:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2612              	 .loc 1 813 6
 2613 001e FB68     	 ldr r3,[r7,#12]
 2614 0020 002B     	 cmp r3,#0
 2615 0022 01D1     	 bne .L178
 814:.././hal/sam3u1c/pmc.c **** 			return 1;
 2616              	 .loc 1 814 11
 2617 0024 0123     	 movs r3,#1
 2618 0026 0DE0     	 b .L179
 2619              	.L178:
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2620              	 .loc 1 812 46 discriminator 1
 2621 0028 FB68     	 ldr r3,[r7,#12]
 2622 002a 013B     	 subs r3,r3,#1
 2623 002c FB60     	 str r3,[r7,#12]
 2624              	.L177:
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2625              	 .loc 1 812 7 discriminator 1
 2626 002e 084B     	 ldr r3,.L181
 2627 0030 9A6E     	 ldr r2,[r3,#104]
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2628              	 .loc 1 812 34 discriminator 1
 2629 0032 4FF48071 	 mov r1,#256
 2630 0036 7B68     	 ldr r3,[r7,#4]
 2631 0038 01FA03F3 	 lsl r3,r1,r3
 812:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2632              	 .loc 1 812 16 discriminator 1
 2633 003c 1340     	 ands r3,r3,r2
 811:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2634              	 .loc 1 811 2 discriminator 1
 2635 003e 002B     	 cmp r3,#0
 2636 0040 EDD0     	 beq .L180
 815:.././hal/sam3u1c/pmc.c **** 		}
 816:.././hal/sam3u1c/pmc.c **** 	}
 817:.././hal/sam3u1c/pmc.c **** 
 818:.././hal/sam3u1c/pmc.c **** 	return 0;
 2637              	 .loc 1 818 9
 2638 0042 0023     	 movs r3,#0
 2639              	.L179:
 819:.././hal/sam3u1c/pmc.c **** }
 2640              	 .loc 1 819 1
 2641 0044 1846     	 mov r0,r3
 2642 0046 1437     	 adds r7,r7,#20
 2643              	.LCFI180:
 2644              	 .cfi_def_cfa_offset 4
 2645 0048 BD46     	 mov sp,r7
 2646              	.LCFI181:
 2647              	 .cfi_def_cfa_register 13
 2648              	 
 2649 004a 80BC     	 pop {r7}
 2650              	.LCFI182:
 2651              	 .cfi_restore 7
 2652              	 .cfi_def_cfa_offset 0
 2653 004c 7047     	 bx lr
 2654              	.L182:
 2655 004e 00BF     	 .align 2
 2656              	.L181:
 2657 0050 00040E40 	 .word 1074660352
 2658              	 .cfi_endproc
 2659              	.LFE103:
 2661              	 .section .text.pmc_switch_pck_to_mainck,"ax",%progbits
 2662              	 .align 1
 2663              	 .global pmc_switch_pck_to_mainck
 2664              	 .syntax unified
 2665              	 .thumb
 2666              	 .thumb_func
 2667              	 .fpu softvfp
 2669              	pmc_switch_pck_to_mainck:
 2670              	.LFB104:
 820:.././hal/sam3u1c/pmc.c **** 
 821:.././hal/sam3u1c/pmc.c **** /**
 822:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to main clock.
 823:.././hal/sam3u1c/pmc.c ****  *
 824:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 825:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 826:.././hal/sam3u1c/pmc.c ****  *
 827:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 828:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 829:.././hal/sam3u1c/pmc.c ****  */
 830:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_mainck(uint32_t ul_id, uint32_t ul_pres)
 831:.././hal/sam3u1c/pmc.c **** {
 2671              	 .loc 1 831 1
 2672              	 .cfi_startproc
 2673              	 
 2674              	 
 2675              	 
 2676 0000 80B4     	 push {r7}
 2677              	.LCFI183:
 2678              	 .cfi_def_cfa_offset 4
 2679              	 .cfi_offset 7,-4
 2680 0002 85B0     	 sub sp,sp,#20
 2681              	.LCFI184:
 2682              	 .cfi_def_cfa_offset 24
 2683 0004 00AF     	 add r7,sp,#0
 2684              	.LCFI185:
 2685              	 .cfi_def_cfa_register 7
 2686 0006 7860     	 str r0,[r7,#4]
 2687 0008 3960     	 str r1,[r7]
 832:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 833:.././hal/sam3u1c/pmc.c **** 
 834:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MAIN_CLK | ul_pres;
 2688              	 .loc 1 834 5
 2689 000a 1249     	 ldr r1,.L188
 2690              	 .loc 1 834 45
 2691 000c 3B68     	 ldr r3,[r7]
 2692 000e 43F00102 	 orr r2,r3,#1
 2693              	 .loc 1 834 22
 2694 0012 7B68     	 ldr r3,[r7,#4]
 2695 0014 1033     	 adds r3,r3,#16
 2696 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 835:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2697              	 .loc 1 835 18
 2698 001a 4FF40063 	 mov r3,#2048
 2699 001e FB60     	 str r3,[r7,#12]
 2700              	 .loc 1 835 2
 2701 0020 07E0     	 b .L184
 2702              	.L187:
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 837:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2703              	 .loc 1 837 6
 2704 0022 FB68     	 ldr r3,[r7,#12]
 2705 0024 002B     	 cmp r3,#0
 2706 0026 01D1     	 bne .L185
 838:.././hal/sam3u1c/pmc.c **** 			return 1;
 2707              	 .loc 1 838 11
 2708 0028 0123     	 movs r3,#1
 2709 002a 0DE0     	 b .L186
 2710              	.L185:
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2711              	 .loc 1 836 46 discriminator 1
 2712 002c FB68     	 ldr r3,[r7,#12]
 2713 002e 013B     	 subs r3,r3,#1
 2714 0030 FB60     	 str r3,[r7,#12]
 2715              	.L184:
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2716              	 .loc 1 836 7 discriminator 1
 2717 0032 084B     	 ldr r3,.L188
 2718 0034 9A6E     	 ldr r2,[r3,#104]
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2719              	 .loc 1 836 34 discriminator 1
 2720 0036 4FF48071 	 mov r1,#256
 2721 003a 7B68     	 ldr r3,[r7,#4]
 2722 003c 01FA03F3 	 lsl r3,r1,r3
 836:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2723              	 .loc 1 836 16 discriminator 1
 2724 0040 1340     	 ands r3,r3,r2
 835:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2725              	 .loc 1 835 2 discriminator 1
 2726 0042 002B     	 cmp r3,#0
 2727 0044 EDD0     	 beq .L187
 839:.././hal/sam3u1c/pmc.c **** 		}
 840:.././hal/sam3u1c/pmc.c **** 	}
 841:.././hal/sam3u1c/pmc.c **** 
 842:.././hal/sam3u1c/pmc.c **** 	return 0;
 2728              	 .loc 1 842 9
 2729 0046 0023     	 movs r3,#0
 2730              	.L186:
 843:.././hal/sam3u1c/pmc.c **** }
 2731              	 .loc 1 843 1
 2732 0048 1846     	 mov r0,r3
 2733 004a 1437     	 adds r7,r7,#20
 2734              	.LCFI186:
 2735              	 .cfi_def_cfa_offset 4
 2736 004c BD46     	 mov sp,r7
 2737              	.LCFI187:
 2738              	 .cfi_def_cfa_register 13
 2739              	 
 2740 004e 80BC     	 pop {r7}
 2741              	.LCFI188:
 2742              	 .cfi_restore 7
 2743              	 .cfi_def_cfa_offset 0
 2744 0050 7047     	 bx lr
 2745              	.L189:
 2746 0052 00BF     	 .align 2
 2747              	.L188:
 2748 0054 00040E40 	 .word 1074660352
 2749              	 .cfi_endproc
 2750              	.LFE104:
 2752              	 .section .text.pmc_switch_pck_to_pllack,"ax",%progbits
 2753              	 .align 1
 2754              	 .global pmc_switch_pck_to_pllack
 2755              	 .syntax unified
 2756              	 .thumb
 2757              	 .thumb_func
 2758              	 .fpu softvfp
 2760              	pmc_switch_pck_to_pllack:
 2761              	.LFB105:
 844:.././hal/sam3u1c/pmc.c **** 
 845:.././hal/sam3u1c/pmc.c **** /**
 846:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to PLLA clock.
 847:.././hal/sam3u1c/pmc.c ****  *
 848:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 849:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 850:.././hal/sam3u1c/pmc.c ****  *
 851:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 852:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 853:.././hal/sam3u1c/pmc.c ****  */
 854:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
 855:.././hal/sam3u1c/pmc.c **** {
 2762              	 .loc 1 855 1
 2763              	 .cfi_startproc
 2764              	 
 2765              	 
 2766              	 
 2767 0000 80B4     	 push {r7}
 2768              	.LCFI189:
 2769              	 .cfi_def_cfa_offset 4
 2770              	 .cfi_offset 7,-4
 2771 0002 85B0     	 sub sp,sp,#20
 2772              	.LCFI190:
 2773              	 .cfi_def_cfa_offset 24
 2774 0004 00AF     	 add r7,sp,#0
 2775              	.LCFI191:
 2776              	 .cfi_def_cfa_register 7
 2777 0006 7860     	 str r0,[r7,#4]
 2778 0008 3960     	 str r1,[r7]
 856:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 857:.././hal/sam3u1c/pmc.c **** 
 858:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
 2779              	 .loc 1 858 5
 2780 000a 1249     	 ldr r1,.L195
 2781              	 .loc 1 858 45
 2782 000c 3B68     	 ldr r3,[r7]
 2783 000e 43F00202 	 orr r2,r3,#2
 2784              	 .loc 1 858 22
 2785 0012 7B68     	 ldr r3,[r7,#4]
 2786 0014 1033     	 adds r3,r3,#16
 2787 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 859:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2788              	 .loc 1 859 18
 2789 001a 4FF40063 	 mov r3,#2048
 2790 001e FB60     	 str r3,[r7,#12]
 2791              	 .loc 1 859 2
 2792 0020 07E0     	 b .L191
 2793              	.L194:
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 861:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2794              	 .loc 1 861 6
 2795 0022 FB68     	 ldr r3,[r7,#12]
 2796 0024 002B     	 cmp r3,#0
 2797 0026 01D1     	 bne .L192
 862:.././hal/sam3u1c/pmc.c **** 			return 1;
 2798              	 .loc 1 862 11
 2799 0028 0123     	 movs r3,#1
 2800 002a 0DE0     	 b .L193
 2801              	.L192:
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2802              	 .loc 1 860 46 discriminator 1
 2803 002c FB68     	 ldr r3,[r7,#12]
 2804 002e 013B     	 subs r3,r3,#1
 2805 0030 FB60     	 str r3,[r7,#12]
 2806              	.L191:
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2807              	 .loc 1 860 7 discriminator 1
 2808 0032 084B     	 ldr r3,.L195
 2809 0034 9A6E     	 ldr r2,[r3,#104]
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2810              	 .loc 1 860 34 discriminator 1
 2811 0036 4FF48071 	 mov r1,#256
 2812 003a 7B68     	 ldr r3,[r7,#4]
 2813 003c 01FA03F3 	 lsl r3,r1,r3
 860:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2814              	 .loc 1 860 16 discriminator 1
 2815 0040 1340     	 ands r3,r3,r2
 859:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2816              	 .loc 1 859 2 discriminator 1
 2817 0042 002B     	 cmp r3,#0
 2818 0044 EDD0     	 beq .L194
 863:.././hal/sam3u1c/pmc.c **** 		}
 864:.././hal/sam3u1c/pmc.c **** 	}
 865:.././hal/sam3u1c/pmc.c **** 
 866:.././hal/sam3u1c/pmc.c **** 	return 0;
 2819              	 .loc 1 866 9
 2820 0046 0023     	 movs r3,#0
 2821              	.L193:
 867:.././hal/sam3u1c/pmc.c **** }
 2822              	 .loc 1 867 1
 2823 0048 1846     	 mov r0,r3
 2824 004a 1437     	 adds r7,r7,#20
 2825              	.LCFI192:
 2826              	 .cfi_def_cfa_offset 4
 2827 004c BD46     	 mov sp,r7
 2828              	.LCFI193:
 2829              	 .cfi_def_cfa_register 13
 2830              	 
 2831 004e 80BC     	 pop {r7}
 2832              	.LCFI194:
 2833              	 .cfi_restore 7
 2834              	 .cfi_def_cfa_offset 0
 2835 0050 7047     	 bx lr
 2836              	.L196:
 2837 0052 00BF     	 .align 2
 2838              	.L195:
 2839 0054 00040E40 	 .word 1074660352
 2840              	 .cfi_endproc
 2841              	.LFE105:
 2843              	 .section .text.pmc_switch_pck_to_upllck,"ax",%progbits
 2844              	 .align 1
 2845              	 .global pmc_switch_pck_to_upllck
 2846              	 .syntax unified
 2847              	 .thumb
 2848              	 .thumb_func
 2849              	 .fpu softvfp
 2851              	pmc_switch_pck_to_upllck:
 2852              	.LFB106:
 868:.././hal/sam3u1c/pmc.c **** 
 869:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 870:.././hal/sam3u1c/pmc.c **** /**
 871:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to PLLB clock.
 872:.././hal/sam3u1c/pmc.c ****  *
 873:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 874:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 875:.././hal/sam3u1c/pmc.c ****  *
 876:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 877:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 878:.././hal/sam3u1c/pmc.c ****  */
 879:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_pllbck(uint32_t ul_id, uint32_t ul_pres)
 880:.././hal/sam3u1c/pmc.c **** {
 881:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 882:.././hal/sam3u1c/pmc.c **** 
 883:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLB_CLK | ul_pres;
 884:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 885:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 886:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 887:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 888:.././hal/sam3u1c/pmc.c **** 			return 1;
 889:.././hal/sam3u1c/pmc.c **** 		}
 890:.././hal/sam3u1c/pmc.c **** 	}
 891:.././hal/sam3u1c/pmc.c **** 
 892:.././hal/sam3u1c/pmc.c **** 	return 0;
 893:.././hal/sam3u1c/pmc.c **** }
 894:.././hal/sam3u1c/pmc.c **** #endif
 895:.././hal/sam3u1c/pmc.c **** 
 896:.././hal/sam3u1c/pmc.c **** #if (SAM3XA || SAM3U)
 897:.././hal/sam3u1c/pmc.c **** /**
 898:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to UPLL clock.
 899:.././hal/sam3u1c/pmc.c ****  *
 900:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 901:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 902:.././hal/sam3u1c/pmc.c ****  *
 903:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 904:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 905:.././hal/sam3u1c/pmc.c ****  */
 906:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_upllck(uint32_t ul_id, uint32_t ul_pres)
 907:.././hal/sam3u1c/pmc.c **** {
 2853              	 .loc 1 907 1
 2854              	 .cfi_startproc
 2855              	 
 2856              	 
 2857              	 
 2858 0000 80B4     	 push {r7}
 2859              	.LCFI195:
 2860              	 .cfi_def_cfa_offset 4
 2861              	 .cfi_offset 7,-4
 2862 0002 85B0     	 sub sp,sp,#20
 2863              	.LCFI196:
 2864              	 .cfi_def_cfa_offset 24
 2865 0004 00AF     	 add r7,sp,#0
 2866              	.LCFI197:
 2867              	 .cfi_def_cfa_register 7
 2868 0006 7860     	 str r0,[r7,#4]
 2869 0008 3960     	 str r1,[r7]
 908:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 909:.././hal/sam3u1c/pmc.c **** 
 910:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_UPLL_CLK | ul_pres;
 2870              	 .loc 1 910 5
 2871 000a 1249     	 ldr r1,.L202
 2872              	 .loc 1 910 45
 2873 000c 3B68     	 ldr r3,[r7]
 2874 000e 43F00302 	 orr r2,r3,#3
 2875              	 .loc 1 910 22
 2876 0012 7B68     	 ldr r3,[r7,#4]
 2877 0014 1033     	 adds r3,r3,#16
 2878 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 911:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2879              	 .loc 1 911 18
 2880 001a 4FF40063 	 mov r3,#2048
 2881 001e FB60     	 str r3,[r7,#12]
 2882              	 .loc 1 911 2
 2883 0020 07E0     	 b .L198
 2884              	.L201:
 912:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 913:.././hal/sam3u1c/pmc.c **** 			--ul_timeout) {
 914:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2885              	 .loc 1 914 6
 2886 0022 FB68     	 ldr r3,[r7,#12]
 2887 0024 002B     	 cmp r3,#0
 2888 0026 01D1     	 bne .L199
 915:.././hal/sam3u1c/pmc.c **** 			return 1;
 2889              	 .loc 1 915 11
 2890 0028 0123     	 movs r3,#1
 2891 002a 0DE0     	 b .L200
 2892              	.L199:
 913:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2893              	 .loc 1 913 4
 2894 002c FB68     	 ldr r3,[r7,#12]
 2895 002e 013B     	 subs r3,r3,#1
 2896 0030 FB60     	 str r3,[r7,#12]
 2897              	.L198:
 912:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2898              	 .loc 1 912 9 discriminator 1
 2899 0032 084B     	 ldr r3,.L202
 2900 0034 9A6E     	 ldr r2,[r3,#104]
 912:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2901              	 .loc 1 912 36 discriminator 1
 2902 0036 4FF48071 	 mov r1,#256
 2903 003a 7B68     	 ldr r3,[r7,#4]
 2904 003c 01FA03F3 	 lsl r3,r1,r3
 912:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2905              	 .loc 1 912 18 discriminator 1
 2906 0040 1340     	 ands r3,r3,r2
 911:.././hal/sam3u1c/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2907              	 .loc 1 911 2 discriminator 1
 2908 0042 002B     	 cmp r3,#0
 2909 0044 EDD0     	 beq .L201
 916:.././hal/sam3u1c/pmc.c **** 		}
 917:.././hal/sam3u1c/pmc.c **** 	}
 918:.././hal/sam3u1c/pmc.c **** 
 919:.././hal/sam3u1c/pmc.c **** 	return 0;
 2910              	 .loc 1 919 9
 2911 0046 0023     	 movs r3,#0
 2912              	.L200:
 920:.././hal/sam3u1c/pmc.c **** }
 2913              	 .loc 1 920 1
 2914 0048 1846     	 mov r0,r3
 2915 004a 1437     	 adds r7,r7,#20
 2916              	.LCFI198:
 2917              	 .cfi_def_cfa_offset 4
 2918 004c BD46     	 mov sp,r7
 2919              	.LCFI199:
 2920              	 .cfi_def_cfa_register 13
 2921              	 
 2922 004e 80BC     	 pop {r7}
 2923              	.LCFI200:
 2924              	 .cfi_restore 7
 2925              	 .cfi_def_cfa_offset 0
 2926 0050 7047     	 bx lr
 2927              	.L203:
 2928 0052 00BF     	 .align 2
 2929              	.L202:
 2930 0054 00040E40 	 .word 1074660352
 2931              	 .cfi_endproc
 2932              	.LFE106:
 2934              	 .section .text.pmc_switch_pck_to_mck,"ax",%progbits
 2935              	 .align 1
 2936              	 .global pmc_switch_pck_to_mck
 2937              	 .syntax unified
 2938              	 .thumb
 2939              	 .thumb_func
 2940              	 .fpu softvfp
 2942              	pmc_switch_pck_to_mck:
 2943              	.LFB107:
 921:.././hal/sam3u1c/pmc.c **** #endif
 922:.././hal/sam3u1c/pmc.c **** 
 923:.././hal/sam3u1c/pmc.c **** /**
 924:.././hal/sam3u1c/pmc.c ****  * \brief Switch programmable clock source selection to mck.
 925:.././hal/sam3u1c/pmc.c ****  *
 926:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 927:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 928:.././hal/sam3u1c/pmc.c ****  *
 929:.././hal/sam3u1c/pmc.c ****  * \retval 0 Success.
 930:.././hal/sam3u1c/pmc.c ****  * \retval 1 Timeout error.
 931:.././hal/sam3u1c/pmc.c ****  */
 932:.././hal/sam3u1c/pmc.c **** uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
 933:.././hal/sam3u1c/pmc.c **** {
 2944              	 .loc 1 933 1
 2945              	 .cfi_startproc
 2946              	 
 2947              	 
 2948              	 
 2949 0000 80B4     	 push {r7}
 2950              	.LCFI201:
 2951              	 .cfi_def_cfa_offset 4
 2952              	 .cfi_offset 7,-4
 2953 0002 85B0     	 sub sp,sp,#20
 2954              	.LCFI202:
 2955              	 .cfi_def_cfa_offset 24
 2956 0004 00AF     	 add r7,sp,#0
 2957              	.LCFI203:
 2958              	 .cfi_def_cfa_register 7
 2959 0006 7860     	 str r0,[r7,#4]
 2960 0008 3960     	 str r1,[r7]
 934:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_timeout;
 935:.././hal/sam3u1c/pmc.c **** 
 936:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
 2961              	 .loc 1 936 5
 2962 000a 1249     	 ldr r1,.L209
 2963              	 .loc 1 936 40
 2964 000c 3B68     	 ldr r3,[r7]
 2965 000e 43F00402 	 orr r2,r3,#4
 2966              	 .loc 1 936 22
 2967 0012 7B68     	 ldr r3,[r7,#4]
 2968 0014 1033     	 adds r3,r3,#16
 2969 0016 41F82320 	 str r2,[r1,r3,lsl#2]
 937:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2970              	 .loc 1 937 18
 2971 001a 4FF40063 	 mov r3,#2048
 2972 001e FB60     	 str r3,[r7,#12]
 2973              	 .loc 1 937 2
 2974 0020 07E0     	 b .L205
 2975              	.L208:
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 939:.././hal/sam3u1c/pmc.c **** 		if (ul_timeout == 0) {
 2976              	 .loc 1 939 6
 2977 0022 FB68     	 ldr r3,[r7,#12]
 2978 0024 002B     	 cmp r3,#0
 2979 0026 01D1     	 bne .L206
 940:.././hal/sam3u1c/pmc.c **** 			return 1;
 2980              	 .loc 1 940 11
 2981 0028 0123     	 movs r3,#1
 2982 002a 0DE0     	 b .L207
 2983              	.L206:
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2984              	 .loc 1 938 46 discriminator 1
 2985 002c FB68     	 ldr r3,[r7,#12]
 2986 002e 013B     	 subs r3,r3,#1
 2987 0030 FB60     	 str r3,[r7,#12]
 2988              	.L205:
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2989              	 .loc 1 938 7 discriminator 1
 2990 0032 084B     	 ldr r3,.L209
 2991 0034 9A6E     	 ldr r2,[r3,#104]
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2992              	 .loc 1 938 34 discriminator 1
 2993 0036 4FF48071 	 mov r1,#256
 2994 003a 7B68     	 ldr r3,[r7,#4]
 2995 003c 01FA03F3 	 lsl r3,r1,r3
 938:.././hal/sam3u1c/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2996              	 .loc 1 938 16 discriminator 1
 2997 0040 1340     	 ands r3,r3,r2
 937:.././hal/sam3u1c/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2998              	 .loc 1 937 2 discriminator 1
 2999 0042 002B     	 cmp r3,#0
 3000 0044 EDD0     	 beq .L208
 941:.././hal/sam3u1c/pmc.c **** 		}
 942:.././hal/sam3u1c/pmc.c **** 	}
 943:.././hal/sam3u1c/pmc.c **** 
 944:.././hal/sam3u1c/pmc.c **** 	return 0;
 3001              	 .loc 1 944 9
 3002 0046 0023     	 movs r3,#0
 3003              	.L207:
 945:.././hal/sam3u1c/pmc.c **** }
 3004              	 .loc 1 945 1
 3005 0048 1846     	 mov r0,r3
 3006 004a 1437     	 adds r7,r7,#20
 3007              	.LCFI204:
 3008              	 .cfi_def_cfa_offset 4
 3009 004c BD46     	 mov sp,r7
 3010              	.LCFI205:
 3011              	 .cfi_def_cfa_register 13
 3012              	 
 3013 004e 80BC     	 pop {r7}
 3014              	.LCFI206:
 3015              	 .cfi_restore 7
 3016              	 .cfi_def_cfa_offset 0
 3017 0050 7047     	 bx lr
 3018              	.L210:
 3019 0052 00BF     	 .align 2
 3020              	.L209:
 3021 0054 00040E40 	 .word 1074660352
 3022              	 .cfi_endproc
 3023              	.LFE107:
 3025              	 .section .text.pmc_enable_pck,"ax",%progbits
 3026              	 .align 1
 3027              	 .global pmc_enable_pck
 3028              	 .syntax unified
 3029              	 .thumb
 3030              	 .thumb_func
 3031              	 .fpu softvfp
 3033              	pmc_enable_pck:
 3034              	.LFB108:
 946:.././hal/sam3u1c/pmc.c **** 
 947:.././hal/sam3u1c/pmc.c **** /**
 948:.././hal/sam3u1c/pmc.c ****  * \brief Enable the specified programmable clock.
 949:.././hal/sam3u1c/pmc.c ****  *
 950:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 951:.././hal/sam3u1c/pmc.c ****  */
 952:.././hal/sam3u1c/pmc.c **** void pmc_enable_pck(uint32_t ul_id)
 953:.././hal/sam3u1c/pmc.c **** {
 3035              	 .loc 1 953 1
 3036              	 .cfi_startproc
 3037              	 
 3038              	 
 3039              	 
 3040 0000 80B4     	 push {r7}
 3041              	.LCFI207:
 3042              	 .cfi_def_cfa_offset 4
 3043              	 .cfi_offset 7,-4
 3044 0002 83B0     	 sub sp,sp,#12
 3045              	.LCFI208:
 3046              	 .cfi_def_cfa_offset 16
 3047 0004 00AF     	 add r7,sp,#0
 3048              	.LCFI209:
 3049              	 .cfi_def_cfa_register 7
 3050 0006 7860     	 str r0,[r7,#4]
 954:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
 3051              	 .loc 1 954 5
 3052 0008 054A     	 ldr r2,.L212
 3053              	 .loc 1 954 32
 3054 000a 4FF48071 	 mov r1,#256
 3055 000e 7B68     	 ldr r3,[r7,#4]
 3056 0010 01FA03F3 	 lsl r3,r1,r3
 3057              	 .loc 1 954 16
 3058 0014 1360     	 str r3,[r2]
 955:.././hal/sam3u1c/pmc.c **** }
 3059              	 .loc 1 955 1
 3060 0016 00BF     	 nop
 3061 0018 0C37     	 adds r7,r7,#12
 3062              	.LCFI210:
 3063              	 .cfi_def_cfa_offset 4
 3064 001a BD46     	 mov sp,r7
 3065              	.LCFI211:
 3066              	 .cfi_def_cfa_register 13
 3067              	 
 3068 001c 80BC     	 pop {r7}
 3069              	.LCFI212:
 3070              	 .cfi_restore 7
 3071              	 .cfi_def_cfa_offset 0
 3072 001e 7047     	 bx lr
 3073              	.L213:
 3074              	 .align 2
 3075              	.L212:
 3076 0020 00040E40 	 .word 1074660352
 3077              	 .cfi_endproc
 3078              	.LFE108:
 3080              	 .section .text.pmc_disable_pck,"ax",%progbits
 3081              	 .align 1
 3082              	 .global pmc_disable_pck
 3083              	 .syntax unified
 3084              	 .thumb
 3085              	 .thumb_func
 3086              	 .fpu softvfp
 3088              	pmc_disable_pck:
 3089              	.LFB109:
 956:.././hal/sam3u1c/pmc.c **** 
 957:.././hal/sam3u1c/pmc.c **** /**
 958:.././hal/sam3u1c/pmc.c ****  * \brief Disable the specified programmable clock.
 959:.././hal/sam3u1c/pmc.c ****  *
 960:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 961:.././hal/sam3u1c/pmc.c ****  */
 962:.././hal/sam3u1c/pmc.c **** void pmc_disable_pck(uint32_t ul_id)
 963:.././hal/sam3u1c/pmc.c **** {
 3090              	 .loc 1 963 1
 3091              	 .cfi_startproc
 3092              	 
 3093              	 
 3094              	 
 3095 0000 80B4     	 push {r7}
 3096              	.LCFI213:
 3097              	 .cfi_def_cfa_offset 4
 3098              	 .cfi_offset 7,-4
 3099 0002 83B0     	 sub sp,sp,#12
 3100              	.LCFI214:
 3101              	 .cfi_def_cfa_offset 16
 3102 0004 00AF     	 add r7,sp,#0
 3103              	.LCFI215:
 3104              	 .cfi_def_cfa_register 7
 3105 0006 7860     	 str r0,[r7,#4]
 964:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
 3106              	 .loc 1 964 5
 3107 0008 054A     	 ldr r2,.L215
 3108              	 .loc 1 964 32
 3109 000a 4FF48071 	 mov r1,#256
 3110 000e 7B68     	 ldr r3,[r7,#4]
 3111 0010 01FA03F3 	 lsl r3,r1,r3
 3112              	 .loc 1 964 16
 3113 0014 5360     	 str r3,[r2,#4]
 965:.././hal/sam3u1c/pmc.c **** }
 3114              	 .loc 1 965 1
 3115 0016 00BF     	 nop
 3116 0018 0C37     	 adds r7,r7,#12
 3117              	.LCFI216:
 3118              	 .cfi_def_cfa_offset 4
 3119 001a BD46     	 mov sp,r7
 3120              	.LCFI217:
 3121              	 .cfi_def_cfa_register 13
 3122              	 
 3123 001c 80BC     	 pop {r7}
 3124              	.LCFI218:
 3125              	 .cfi_restore 7
 3126              	 .cfi_def_cfa_offset 0
 3127 001e 7047     	 bx lr
 3128              	.L216:
 3129              	 .align 2
 3130              	.L215:
 3131 0020 00040E40 	 .word 1074660352
 3132              	 .cfi_endproc
 3133              	.LFE109:
 3135              	 .section .text.pmc_enable_all_pck,"ax",%progbits
 3136              	 .align 1
 3137              	 .global pmc_enable_all_pck
 3138              	 .syntax unified
 3139              	 .thumb
 3140              	 .thumb_func
 3141              	 .fpu softvfp
 3143              	pmc_enable_all_pck:
 3144              	.LFB110:
 966:.././hal/sam3u1c/pmc.c **** 
 967:.././hal/sam3u1c/pmc.c **** /**
 968:.././hal/sam3u1c/pmc.c ****  * \brief Enable all programmable clocks.
 969:.././hal/sam3u1c/pmc.c ****  */
 970:.././hal/sam3u1c/pmc.c **** void pmc_enable_all_pck(void)
 971:.././hal/sam3u1c/pmc.c **** {
 3145              	 .loc 1 971 1
 3146              	 .cfi_startproc
 3147              	 
 3148              	 
 3149              	 
 3150 0000 80B4     	 push {r7}
 3151              	.LCFI219:
 3152              	 .cfi_def_cfa_offset 4
 3153              	 .cfi_offset 7,-4
 3154 0002 00AF     	 add r7,sp,#0
 3155              	.LCFI220:
 3156              	 .cfi_def_cfa_register 7
 972:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_PCK0 | PMC_SCER_PCK1 | PMC_SCER_PCK2;
 3157              	 .loc 1 972 5
 3158 0004 034B     	 ldr r3,.L218
 3159              	 .loc 1 972 16
 3160 0006 4FF4E062 	 mov r2,#1792
 3161 000a 1A60     	 str r2,[r3]
 973:.././hal/sam3u1c/pmc.c **** }
 3162              	 .loc 1 973 1
 3163 000c 00BF     	 nop
 3164 000e BD46     	 mov sp,r7
 3165              	.LCFI221:
 3166              	 .cfi_def_cfa_register 13
 3167              	 
 3168 0010 80BC     	 pop {r7}
 3169              	.LCFI222:
 3170              	 .cfi_restore 7
 3171              	 .cfi_def_cfa_offset 0
 3172 0012 7047     	 bx lr
 3173              	.L219:
 3174              	 .align 2
 3175              	.L218:
 3176 0014 00040E40 	 .word 1074660352
 3177              	 .cfi_endproc
 3178              	.LFE110:
 3180              	 .section .text.pmc_disable_all_pck,"ax",%progbits
 3181              	 .align 1
 3182              	 .global pmc_disable_all_pck
 3183              	 .syntax unified
 3184              	 .thumb
 3185              	 .thumb_func
 3186              	 .fpu softvfp
 3188              	pmc_disable_all_pck:
 3189              	.LFB111:
 974:.././hal/sam3u1c/pmc.c **** 
 975:.././hal/sam3u1c/pmc.c **** /**
 976:.././hal/sam3u1c/pmc.c ****  * \brief Disable all programmable clocks.
 977:.././hal/sam3u1c/pmc.c ****  */
 978:.././hal/sam3u1c/pmc.c **** void pmc_disable_all_pck(void)
 979:.././hal/sam3u1c/pmc.c **** {
 3190              	 .loc 1 979 1
 3191              	 .cfi_startproc
 3192              	 
 3193              	 
 3194              	 
 3195 0000 80B4     	 push {r7}
 3196              	.LCFI223:
 3197              	 .cfi_def_cfa_offset 4
 3198              	 .cfi_offset 7,-4
 3199 0002 00AF     	 add r7,sp,#0
 3200              	.LCFI224:
 3201              	 .cfi_def_cfa_register 7
 980:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_PCK0 | PMC_SCDR_PCK1 | PMC_SCDR_PCK2;
 3202              	 .loc 1 980 5
 3203 0004 034B     	 ldr r3,.L221
 3204              	 .loc 1 980 16
 3205 0006 4FF4E062 	 mov r2,#1792
 3206 000a 5A60     	 str r2,[r3,#4]
 981:.././hal/sam3u1c/pmc.c **** }
 3207              	 .loc 1 981 1
 3208 000c 00BF     	 nop
 3209 000e BD46     	 mov sp,r7
 3210              	.LCFI225:
 3211              	 .cfi_def_cfa_register 13
 3212              	 
 3213 0010 80BC     	 pop {r7}
 3214              	.LCFI226:
 3215              	 .cfi_restore 7
 3216              	 .cfi_def_cfa_offset 0
 3217 0012 7047     	 bx lr
 3218              	.L222:
 3219              	 .align 2
 3220              	.L221:
 3221 0014 00040E40 	 .word 1074660352
 3222              	 .cfi_endproc
 3223              	.LFE111:
 3225              	 .section .text.pmc_is_pck_enabled,"ax",%progbits
 3226              	 .align 1
 3227              	 .global pmc_is_pck_enabled
 3228              	 .syntax unified
 3229              	 .thumb
 3230              	 .thumb_func
 3231              	 .fpu softvfp
 3233              	pmc_is_pck_enabled:
 3234              	.LFB112:
 982:.././hal/sam3u1c/pmc.c **** 
 983:.././hal/sam3u1c/pmc.c **** /**
 984:.././hal/sam3u1c/pmc.c ****  * \brief Check if the specified programmable clock is enabled.
 985:.././hal/sam3u1c/pmc.c ****  *
 986:.././hal/sam3u1c/pmc.c ****  * \param ul_id Id of the programmable clock.
 987:.././hal/sam3u1c/pmc.c ****  *
 988:.././hal/sam3u1c/pmc.c ****  * \retval 0 Programmable clock is disabled or unknown.
 989:.././hal/sam3u1c/pmc.c ****  * \retval 1 Programmable clock is enabled.
 990:.././hal/sam3u1c/pmc.c ****  */
 991:.././hal/sam3u1c/pmc.c **** uint32_t pmc_is_pck_enabled(uint32_t ul_id)
 992:.././hal/sam3u1c/pmc.c **** {
 3235              	 .loc 1 992 1
 3236              	 .cfi_startproc
 3237              	 
 3238              	 
 3239              	 
 3240 0000 80B4     	 push {r7}
 3241              	.LCFI227:
 3242              	 .cfi_def_cfa_offset 4
 3243              	 .cfi_offset 7,-4
 3244 0002 83B0     	 sub sp,sp,#12
 3245              	.LCFI228:
 3246              	 .cfi_def_cfa_offset 16
 3247 0004 00AF     	 add r7,sp,#0
 3248              	.LCFI229:
 3249              	 .cfi_def_cfa_register 7
 3250 0006 7860     	 str r0,[r7,#4]
 993:.././hal/sam3u1c/pmc.c **** 	if (ul_id > 2) {
 3251              	 .loc 1 993 5
 3252 0008 7B68     	 ldr r3,[r7,#4]
 3253 000a 022B     	 cmp r3,#2
 3254 000c 01D9     	 bls .L224
 994:.././hal/sam3u1c/pmc.c **** 		return 0;
 3255              	 .loc 1 994 10
 3256 000e 0023     	 movs r3,#0
 3257 0010 07E0     	 b .L225
 3258              	.L224:
 995:.././hal/sam3u1c/pmc.c **** 	}
 996:.././hal/sam3u1c/pmc.c **** 
 997:.././hal/sam3u1c/pmc.c **** 	return (PMC->PMC_SCSR & (PMC_SCSR_PCK0 << ul_id));
 3259              	 .loc 1 997 13
 3260 0012 064B     	 ldr r3,.L226
 3261 0014 9A68     	 ldr r2,[r3,#8]
 3262              	 .loc 1 997 41
 3263 0016 4FF48071 	 mov r1,#256
 3264 001a 7B68     	 ldr r3,[r7,#4]
 3265 001c 01FA03F3 	 lsl r3,r1,r3
 3266              	 .loc 1 997 24
 3267 0020 1340     	 ands r3,r3,r2
 3268              	.L225:
 998:.././hal/sam3u1c/pmc.c **** }
 3269              	 .loc 1 998 1
 3270 0022 1846     	 mov r0,r3
 3271 0024 0C37     	 adds r7,r7,#12
 3272              	.LCFI230:
 3273              	 .cfi_def_cfa_offset 4
 3274 0026 BD46     	 mov sp,r7
 3275              	.LCFI231:
 3276              	 .cfi_def_cfa_register 13
 3277              	 
 3278 0028 80BC     	 pop {r7}
 3279              	.LCFI232:
 3280              	 .cfi_restore 7
 3281              	 .cfi_def_cfa_offset 0
 3282 002a 7047     	 bx lr
 3283              	.L227:
 3284              	 .align 2
 3285              	.L226:
 3286 002c 00040E40 	 .word 1074660352
 3287              	 .cfi_endproc
 3288              	.LFE112:
 3290              	 .section .text.pmc_enable_interrupt,"ax",%progbits
 3291              	 .align 1
 3292              	 .global pmc_enable_interrupt
 3293              	 .syntax unified
 3294              	 .thumb
 3295              	 .thumb_func
 3296              	 .fpu softvfp
 3298              	pmc_enable_interrupt:
 3299              	.LFB113:
 999:.././hal/sam3u1c/pmc.c **** 
1000:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1001:.././hal/sam3u1c/pmc.c **** /**
1002:.././hal/sam3u1c/pmc.c ****  * \brief Enable Coprocessor Clocks.
1003:.././hal/sam3u1c/pmc.c ****  */
1004:.././hal/sam3u1c/pmc.c **** void pmc_enable_cpck(void)
1005:.././hal/sam3u1c/pmc.c **** {
1006:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
1007:.././hal/sam3u1c/pmc.c **** }
1008:.././hal/sam3u1c/pmc.c **** 
1009:.././hal/sam3u1c/pmc.c **** /**
1010:.././hal/sam3u1c/pmc.c ****  * \brief Disable Coprocessor Clocks.
1011:.././hal/sam3u1c/pmc.c ****  */
1012:.././hal/sam3u1c/pmc.c **** void pmc_disable_cpck(void)
1013:.././hal/sam3u1c/pmc.c **** {
1014:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_CPCK | PMC_SCDR_CPKEY_PASSWD;
1015:.././hal/sam3u1c/pmc.c **** }
1016:.././hal/sam3u1c/pmc.c **** 
1017:.././hal/sam3u1c/pmc.c **** /**
1018:.././hal/sam3u1c/pmc.c ****  * \brief Check if the Coprocessor Clocks is enabled.
1019:.././hal/sam3u1c/pmc.c ****  *
1020:.././hal/sam3u1c/pmc.c ****  * \retval 0 Coprocessor Clocks is disabled.
1021:.././hal/sam3u1c/pmc.c ****  * \retval 1 Coprocessor Clocks is enabled.
1022:.././hal/sam3u1c/pmc.c ****  */
1023:.././hal/sam3u1c/pmc.c **** bool pmc_is_cpck_enabled(void)
1024:.././hal/sam3u1c/pmc.c **** {
1025:.././hal/sam3u1c/pmc.c **** 	if(PMC->PMC_SCSR & PMC_SCSR_CPCK) {
1026:.././hal/sam3u1c/pmc.c **** 		return 1;
1027:.././hal/sam3u1c/pmc.c **** 	} else {
1028:.././hal/sam3u1c/pmc.c **** 		return 0;
1029:.././hal/sam3u1c/pmc.c **** 	}
1030:.././hal/sam3u1c/pmc.c **** }
1031:.././hal/sam3u1c/pmc.c **** 
1032:.././hal/sam3u1c/pmc.c **** /**
1033:.././hal/sam3u1c/pmc.c ****  * \brief Enable Coprocessor Bus Master Clocks.
1034:.././hal/sam3u1c/pmc.c ****  */
1035:.././hal/sam3u1c/pmc.c **** void pmc_enable_cpbmck(void)
1036:.././hal/sam3u1c/pmc.c **** {
1037:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
1038:.././hal/sam3u1c/pmc.c **** }
1039:.././hal/sam3u1c/pmc.c **** 
1040:.././hal/sam3u1c/pmc.c **** /**
1041:.././hal/sam3u1c/pmc.c ****  * \brief Disable Coprocessor Bus Master Clocks.
1042:.././hal/sam3u1c/pmc.c ****  */
1043:.././hal/sam3u1c/pmc.c **** void pmc_disable_cpbmck(void)
1044:.././hal/sam3u1c/pmc.c **** {
1045:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_CPCK | PMC_SCDR_CPKEY_PASSWD;
1046:.././hal/sam3u1c/pmc.c **** }
1047:.././hal/sam3u1c/pmc.c **** 
1048:.././hal/sam3u1c/pmc.c **** /**
1049:.././hal/sam3u1c/pmc.c ****  * \brief Check if the Coprocessor Bus Master Clocks is enabled.
1050:.././hal/sam3u1c/pmc.c ****  *
1051:.././hal/sam3u1c/pmc.c ****  * \retval 0 Coprocessor Bus Master Clocks is disabled.
1052:.././hal/sam3u1c/pmc.c ****  * \retval 1 Coprocessor Bus Master Clocks is enabled.
1053:.././hal/sam3u1c/pmc.c ****  */
1054:.././hal/sam3u1c/pmc.c **** bool pmc_is_cpbmck_enabled(void)
1055:.././hal/sam3u1c/pmc.c **** {
1056:.././hal/sam3u1c/pmc.c **** 	if(PMC->PMC_SCSR & PMC_SCSR_CPBMCK) {
1057:.././hal/sam3u1c/pmc.c **** 		return 1;
1058:.././hal/sam3u1c/pmc.c **** 	} else {
1059:.././hal/sam3u1c/pmc.c **** 		return 0;
1060:.././hal/sam3u1c/pmc.c **** 	}
1061:.././hal/sam3u1c/pmc.c **** }
1062:.././hal/sam3u1c/pmc.c **** 
1063:.././hal/sam3u1c/pmc.c **** /**
1064:.././hal/sam3u1c/pmc.c ****  * \brief Set the prescaler for the Coprocessor Master Clock.
1065:.././hal/sam3u1c/pmc.c ****  *
1066:.././hal/sam3u1c/pmc.c ****  * \param ul_pres Prescaler value.
1067:.././hal/sam3u1c/pmc.c ****  */
1068:.././hal/sam3u1c/pmc.c **** void pmc_cpck_set_prescaler(uint32_t ul_pres)
1069:.././hal/sam3u1c/pmc.c **** {
1070:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
1071:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CPPRES_Msk)) | PMC_MCKR_CPPRES(ul_pres);
1072:.././hal/sam3u1c/pmc.c **** }
1073:.././hal/sam3u1c/pmc.c **** 
1074:.././hal/sam3u1c/pmc.c **** /**
1075:.././hal/sam3u1c/pmc.c ****  * \brief Set the source for the Coprocessor Master Clock.
1076:.././hal/sam3u1c/pmc.c ****  *
1077:.././hal/sam3u1c/pmc.c ****  * \param ul_source Source selection value.
1078:.././hal/sam3u1c/pmc.c ****  */
1079:.././hal/sam3u1c/pmc.c **** void pmc_cpck_set_source(uint32_t ul_source)
1080:.././hal/sam3u1c/pmc.c **** {
1081:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_MCKR =
1082:.././hal/sam3u1c/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CPCSS_Msk)) | ul_source;
1083:.././hal/sam3u1c/pmc.c **** }
1084:.././hal/sam3u1c/pmc.c **** #endif
1085:.././hal/sam3u1c/pmc.c **** 
1086:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55)
1087:.././hal/sam3u1c/pmc.c **** /**
1088:.././hal/sam3u1c/pmc.c ****  * \brief Switch UDP (USB) clock source selection to PLLA clock.
1089:.././hal/sam3u1c/pmc.c ****  *
1090:.././hal/sam3u1c/pmc.c ****  * \param ul_usbdiv Clock divisor.
1091:.././hal/sam3u1c/pmc.c ****  */
1092:.././hal/sam3u1c/pmc.c **** void pmc_switch_udpck_to_pllack(uint32_t ul_usbdiv)
1093:.././hal/sam3u1c/pmc.c **** {
1094:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv);
1095:.././hal/sam3u1c/pmc.c **** }
1096:.././hal/sam3u1c/pmc.c **** #endif
1097:.././hal/sam3u1c/pmc.c **** 
1098:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM4S || SAMG55)
1099:.././hal/sam3u1c/pmc.c **** /**
1100:.././hal/sam3u1c/pmc.c ****  * \brief Switch UDP (USB) clock source selection to PLLB clock.
1101:.././hal/sam3u1c/pmc.c ****  *
1102:.././hal/sam3u1c/pmc.c ****  * \param ul_usbdiv Clock divisor.
1103:.././hal/sam3u1c/pmc.c ****  */
1104:.././hal/sam3u1c/pmc.c **** void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
1105:.././hal/sam3u1c/pmc.c **** {
1106:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
1107:.././hal/sam3u1c/pmc.c **** }
1108:.././hal/sam3u1c/pmc.c **** #endif
1109:.././hal/sam3u1c/pmc.c **** 
1110:.././hal/sam3u1c/pmc.c **** #if (SAM3XA)
1111:.././hal/sam3u1c/pmc.c **** /**
1112:.././hal/sam3u1c/pmc.c ****  * \brief Switch UDP (USB) clock source selection to UPLL clock.
1113:.././hal/sam3u1c/pmc.c ****  *
1114:.././hal/sam3u1c/pmc.c ****  * \param ul_usbdiv Clock divisor.
1115:.././hal/sam3u1c/pmc.c ****  */
1116:.././hal/sam3u1c/pmc.c **** void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
1117:.././hal/sam3u1c/pmc.c **** {
1118:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
1119:.././hal/sam3u1c/pmc.c **** }
1120:.././hal/sam3u1c/pmc.c **** #endif
1121:.././hal/sam3u1c/pmc.c **** 
1122:.././hal/sam3u1c/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55)
1123:.././hal/sam3u1c/pmc.c **** /**
1124:.././hal/sam3u1c/pmc.c ****  * \brief Enable UDP (USB) clock.
1125:.././hal/sam3u1c/pmc.c ****  */
1126:.././hal/sam3u1c/pmc.c **** void pmc_enable_udpck(void)
1127:.././hal/sam3u1c/pmc.c **** {
1128:.././hal/sam3u1c/pmc.c **** # if (SAM3S || SAM4S || SAM4E || SAMG55)
1129:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UDP;
1130:.././hal/sam3u1c/pmc.c **** # else
1131:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
1132:.././hal/sam3u1c/pmc.c **** # endif
1133:.././hal/sam3u1c/pmc.c **** }
1134:.././hal/sam3u1c/pmc.c **** 
1135:.././hal/sam3u1c/pmc.c **** /**
1136:.././hal/sam3u1c/pmc.c ****  * \brief Disable UDP (USB) clock.
1137:.././hal/sam3u1c/pmc.c ****  */
1138:.././hal/sam3u1c/pmc.c **** void pmc_disable_udpck(void)
1139:.././hal/sam3u1c/pmc.c **** {
1140:.././hal/sam3u1c/pmc.c **** # if (SAM3S || SAM4S || SAM4E || SAMG55)
1141:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_UDP;
1142:.././hal/sam3u1c/pmc.c **** # else
1143:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_UOTGCLK;
1144:.././hal/sam3u1c/pmc.c **** # endif
1145:.././hal/sam3u1c/pmc.c **** }
1146:.././hal/sam3u1c/pmc.c **** #endif
1147:.././hal/sam3u1c/pmc.c **** 
1148:.././hal/sam3u1c/pmc.c **** /**
1149:.././hal/sam3u1c/pmc.c ****  * \brief Enable PMC interrupts.
1150:.././hal/sam3u1c/pmc.c ****  *
1151:.././hal/sam3u1c/pmc.c ****  * \param ul_sources Interrupt sources bit map.
1152:.././hal/sam3u1c/pmc.c ****  */
1153:.././hal/sam3u1c/pmc.c **** void pmc_enable_interrupt(uint32_t ul_sources)
1154:.././hal/sam3u1c/pmc.c **** {
 3300              	 .loc 1 1154 1
 3301              	 .cfi_startproc
 3302              	 
 3303              	 
 3304              	 
 3305 0000 80B4     	 push {r7}
 3306              	.LCFI233:
 3307              	 .cfi_def_cfa_offset 4
 3308              	 .cfi_offset 7,-4
 3309 0002 83B0     	 sub sp,sp,#12
 3310              	.LCFI234:
 3311              	 .cfi_def_cfa_offset 16
 3312 0004 00AF     	 add r7,sp,#0
 3313              	.LCFI235:
 3314              	 .cfi_def_cfa_register 7
 3315 0006 7860     	 str r0,[r7,#4]
1155:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_IER = ul_sources;
 3316              	 .loc 1 1155 5
 3317 0008 034A     	 ldr r2,.L229
 3318              	 .loc 1 1155 15
 3319 000a 7B68     	 ldr r3,[r7,#4]
 3320 000c 1366     	 str r3,[r2,#96]
1156:.././hal/sam3u1c/pmc.c **** }
 3321              	 .loc 1 1156 1
 3322 000e 00BF     	 nop
 3323 0010 0C37     	 adds r7,r7,#12
 3324              	.LCFI236:
 3325              	 .cfi_def_cfa_offset 4
 3326 0012 BD46     	 mov sp,r7
 3327              	.LCFI237:
 3328              	 .cfi_def_cfa_register 13
 3329              	 
 3330 0014 80BC     	 pop {r7}
 3331              	.LCFI238:
 3332              	 .cfi_restore 7
 3333              	 .cfi_def_cfa_offset 0
 3334 0016 7047     	 bx lr
 3335              	.L230:
 3336              	 .align 2
 3337              	.L229:
 3338 0018 00040E40 	 .word 1074660352
 3339              	 .cfi_endproc
 3340              	.LFE113:
 3342              	 .section .text.pmc_disable_interrupt,"ax",%progbits
 3343              	 .align 1
 3344              	 .global pmc_disable_interrupt
 3345              	 .syntax unified
 3346              	 .thumb
 3347              	 .thumb_func
 3348              	 .fpu softvfp
 3350              	pmc_disable_interrupt:
 3351              	.LFB114:
1157:.././hal/sam3u1c/pmc.c **** 
1158:.././hal/sam3u1c/pmc.c **** /**
1159:.././hal/sam3u1c/pmc.c ****  * \brief Disable PMC interrupts.
1160:.././hal/sam3u1c/pmc.c ****  *
1161:.././hal/sam3u1c/pmc.c ****  * \param ul_sources Interrupt sources bit map.
1162:.././hal/sam3u1c/pmc.c ****  */
1163:.././hal/sam3u1c/pmc.c **** void pmc_disable_interrupt(uint32_t ul_sources)
1164:.././hal/sam3u1c/pmc.c **** {
 3352              	 .loc 1 1164 1
 3353              	 .cfi_startproc
 3354              	 
 3355              	 
 3356              	 
 3357 0000 80B4     	 push {r7}
 3358              	.LCFI239:
 3359              	 .cfi_def_cfa_offset 4
 3360              	 .cfi_offset 7,-4
 3361 0002 83B0     	 sub sp,sp,#12
 3362              	.LCFI240:
 3363              	 .cfi_def_cfa_offset 16
 3364 0004 00AF     	 add r7,sp,#0
 3365              	.LCFI241:
 3366              	 .cfi_def_cfa_register 7
 3367 0006 7860     	 str r0,[r7,#4]
1165:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_IDR = ul_sources;
 3368              	 .loc 1 1165 5
 3369 0008 034A     	 ldr r2,.L232
 3370              	 .loc 1 1165 15
 3371 000a 7B68     	 ldr r3,[r7,#4]
 3372 000c 5366     	 str r3,[r2,#100]
1166:.././hal/sam3u1c/pmc.c **** }
 3373              	 .loc 1 1166 1
 3374 000e 00BF     	 nop
 3375 0010 0C37     	 adds r7,r7,#12
 3376              	.LCFI242:
 3377              	 .cfi_def_cfa_offset 4
 3378 0012 BD46     	 mov sp,r7
 3379              	.LCFI243:
 3380              	 .cfi_def_cfa_register 13
 3381              	 
 3382 0014 80BC     	 pop {r7}
 3383              	.LCFI244:
 3384              	 .cfi_restore 7
 3385              	 .cfi_def_cfa_offset 0
 3386 0016 7047     	 bx lr
 3387              	.L233:
 3388              	 .align 2
 3389              	.L232:
 3390 0018 00040E40 	 .word 1074660352
 3391              	 .cfi_endproc
 3392              	.LFE114:
 3394              	 .section .text.pmc_get_interrupt_mask,"ax",%progbits
 3395              	 .align 1
 3396              	 .global pmc_get_interrupt_mask
 3397              	 .syntax unified
 3398              	 .thumb
 3399              	 .thumb_func
 3400              	 .fpu softvfp
 3402              	pmc_get_interrupt_mask:
 3403              	.LFB115:
1167:.././hal/sam3u1c/pmc.c **** 
1168:.././hal/sam3u1c/pmc.c **** /**
1169:.././hal/sam3u1c/pmc.c ****  * \brief Get PMC interrupt mask.
1170:.././hal/sam3u1c/pmc.c ****  *
1171:.././hal/sam3u1c/pmc.c ****  * \return The interrupt mask value.
1172:.././hal/sam3u1c/pmc.c ****  */
1173:.././hal/sam3u1c/pmc.c **** uint32_t pmc_get_interrupt_mask(void)
1174:.././hal/sam3u1c/pmc.c **** {
 3404              	 .loc 1 1174 1
 3405              	 .cfi_startproc
 3406              	 
 3407              	 
 3408              	 
 3409 0000 80B4     	 push {r7}
 3410              	.LCFI245:
 3411              	 .cfi_def_cfa_offset 4
 3412              	 .cfi_offset 7,-4
 3413 0002 00AF     	 add r7,sp,#0
 3414              	.LCFI246:
 3415              	 .cfi_def_cfa_register 7
1175:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_IMR;
 3416              	 .loc 1 1175 12
 3417 0004 024B     	 ldr r3,.L236
 3418 0006 DB6E     	 ldr r3,[r3,#108]
1176:.././hal/sam3u1c/pmc.c **** }
 3419              	 .loc 1 1176 1
 3420 0008 1846     	 mov r0,r3
 3421 000a BD46     	 mov sp,r7
 3422              	.LCFI247:
 3423              	 .cfi_def_cfa_register 13
 3424              	 
 3425 000c 80BC     	 pop {r7}
 3426              	.LCFI248:
 3427              	 .cfi_restore 7
 3428              	 .cfi_def_cfa_offset 0
 3429 000e 7047     	 bx lr
 3430              	.L237:
 3431              	 .align 2
 3432              	.L236:
 3433 0010 00040E40 	 .word 1074660352
 3434              	 .cfi_endproc
 3435              	.LFE115:
 3437              	 .section .text.pmc_get_status,"ax",%progbits
 3438              	 .align 1
 3439              	 .global pmc_get_status
 3440              	 .syntax unified
 3441              	 .thumb
 3442              	 .thumb_func
 3443              	 .fpu softvfp
 3445              	pmc_get_status:
 3446              	.LFB116:
1177:.././hal/sam3u1c/pmc.c **** 
1178:.././hal/sam3u1c/pmc.c **** /**
1179:.././hal/sam3u1c/pmc.c ****  * \brief Get current status.
1180:.././hal/sam3u1c/pmc.c ****  *
1181:.././hal/sam3u1c/pmc.c ****  * \return The current PMC status.
1182:.././hal/sam3u1c/pmc.c ****  */
1183:.././hal/sam3u1c/pmc.c **** uint32_t pmc_get_status(void)
1184:.././hal/sam3u1c/pmc.c **** {
 3447              	 .loc 1 1184 1
 3448              	 .cfi_startproc
 3449              	 
 3450              	 
 3451              	 
 3452 0000 80B4     	 push {r7}
 3453              	.LCFI249:
 3454              	 .cfi_def_cfa_offset 4
 3455              	 .cfi_offset 7,-4
 3456 0002 00AF     	 add r7,sp,#0
 3457              	.LCFI250:
 3458              	 .cfi_def_cfa_register 7
1185:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_SR;
 3459              	 .loc 1 1185 12
 3460 0004 024B     	 ldr r3,.L240
 3461 0006 9B6E     	 ldr r3,[r3,#104]
1186:.././hal/sam3u1c/pmc.c **** }
 3462              	 .loc 1 1186 1
 3463 0008 1846     	 mov r0,r3
 3464 000a BD46     	 mov sp,r7
 3465              	.LCFI251:
 3466              	 .cfi_def_cfa_register 13
 3467              	 
 3468 000c 80BC     	 pop {r7}
 3469              	.LCFI252:
 3470              	 .cfi_restore 7
 3471              	 .cfi_def_cfa_offset 0
 3472 000e 7047     	 bx lr
 3473              	.L241:
 3474              	 .align 2
 3475              	.L240:
 3476 0010 00040E40 	 .word 1074660352
 3477              	 .cfi_endproc
 3478              	.LFE116:
 3480              	 .section .text.pmc_set_fast_startup_input,"ax",%progbits
 3481              	 .align 1
 3482              	 .global pmc_set_fast_startup_input
 3483              	 .syntax unified
 3484              	 .thumb
 3485              	 .thumb_func
 3486              	 .fpu softvfp
 3488              	pmc_set_fast_startup_input:
 3489              	.LFB117:
1187:.././hal/sam3u1c/pmc.c **** 
1188:.././hal/sam3u1c/pmc.c **** /**
1189:.././hal/sam3u1c/pmc.c ****  * \brief Set the wake-up inputs for fast startup mode registers
1190:.././hal/sam3u1c/pmc.c ****  *        (event generation).
1191:.././hal/sam3u1c/pmc.c ****  *
1192:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to enable.
1193:.././hal/sam3u1c/pmc.c ****  */
1194:.././hal/sam3u1c/pmc.c **** void pmc_set_fast_startup_input(uint32_t ul_inputs)
1195:.././hal/sam3u1c/pmc.c **** {
 3490              	 .loc 1 1195 1
 3491              	 .cfi_startproc
 3492              	 
 3493              	 
 3494              	 
 3495 0000 80B4     	 push {r7}
 3496              	.LCFI253:
 3497              	 .cfi_def_cfa_offset 4
 3498              	 .cfi_offset 7,-4
 3499 0002 83B0     	 sub sp,sp,#12
 3500              	.LCFI254:
 3501              	 .cfi_def_cfa_offset 16
 3502 0004 00AF     	 add r7,sp,#0
 3503              	.LCFI255:
 3504              	 .cfi_def_cfa_register 7
 3505 0006 7860     	 str r0,[r7,#4]
1196:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 3506              	 .loc 1 1196 12
 3507 0008 7B68     	 ldr r3,[r7,#4]
 3508 000a C3F31203 	 ubfx r3,r3,#0,#19
 3509 000e 7B60     	 str r3,[r7,#4]
1197:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR |= ul_inputs;
 3510              	 .loc 1 1197 16
 3511 0010 054B     	 ldr r3,.L243
 3512 0012 1A6F     	 ldr r2,[r3,#112]
 3513 0014 0449     	 ldr r1,.L243
 3514 0016 7B68     	 ldr r3,[r7,#4]
 3515 0018 1343     	 orrs r3,r3,r2
 3516 001a 0B67     	 str r3,[r1,#112]
1198:.././hal/sam3u1c/pmc.c **** }
 3517              	 .loc 1 1198 1
 3518 001c 00BF     	 nop
 3519 001e 0C37     	 adds r7,r7,#12
 3520              	.LCFI256:
 3521              	 .cfi_def_cfa_offset 4
 3522 0020 BD46     	 mov sp,r7
 3523              	.LCFI257:
 3524              	 .cfi_def_cfa_register 13
 3525              	 
 3526 0022 80BC     	 pop {r7}
 3527              	.LCFI258:
 3528              	 .cfi_restore 7
 3529              	 .cfi_def_cfa_offset 0
 3530 0024 7047     	 bx lr
 3531              	.L244:
 3532 0026 00BF     	 .align 2
 3533              	.L243:
 3534 0028 00040E40 	 .word 1074660352
 3535              	 .cfi_endproc
 3536              	.LFE117:
 3538              	 .section .text.pmc_clr_fast_startup_input,"ax",%progbits
 3539              	 .align 1
 3540              	 .global pmc_clr_fast_startup_input
 3541              	 .syntax unified
 3542              	 .thumb
 3543              	 .thumb_func
 3544              	 .fpu softvfp
 3546              	pmc_clr_fast_startup_input:
 3547              	.LFB118:
1199:.././hal/sam3u1c/pmc.c **** 
1200:.././hal/sam3u1c/pmc.c **** /**
1201:.././hal/sam3u1c/pmc.c ****  * \brief Clear the wake-up inputs for fast startup mode registers
1202:.././hal/sam3u1c/pmc.c ****  *        (remove event generation).
1203:.././hal/sam3u1c/pmc.c ****  *
1204:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to disable.
1205:.././hal/sam3u1c/pmc.c ****  */
1206:.././hal/sam3u1c/pmc.c **** void pmc_clr_fast_startup_input(uint32_t ul_inputs)
1207:.././hal/sam3u1c/pmc.c **** {
 3548              	 .loc 1 1207 1
 3549              	 .cfi_startproc
 3550              	 
 3551              	 
 3552              	 
 3553 0000 80B4     	 push {r7}
 3554              	.LCFI259:
 3555              	 .cfi_def_cfa_offset 4
 3556              	 .cfi_offset 7,-4
 3557 0002 83B0     	 sub sp,sp,#12
 3558              	.LCFI260:
 3559              	 .cfi_def_cfa_offset 16
 3560 0004 00AF     	 add r7,sp,#0
 3561              	.LCFI261:
 3562              	 .cfi_def_cfa_register 7
 3563 0006 7860     	 str r0,[r7,#4]
1208:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 3564              	 .loc 1 1208 12
 3565 0008 7B68     	 ldr r3,[r7,#4]
 3566 000a C3F31203 	 ubfx r3,r3,#0,#19
 3567 000e 7B60     	 str r3,[r7,#4]
1209:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR &= ~ul_inputs;
 3568              	 .loc 1 1209 16
 3569 0010 054B     	 ldr r3,.L246
 3570 0012 1A6F     	 ldr r2,[r3,#112]
 3571              	 .loc 1 1209 19
 3572 0014 7B68     	 ldr r3,[r7,#4]
 3573 0016 DB43     	 mvns r3,r3
 3574              	 .loc 1 1209 16
 3575 0018 0349     	 ldr r1,.L246
 3576 001a 1340     	 ands r3,r3,r2
 3577 001c 0B67     	 str r3,[r1,#112]
1210:.././hal/sam3u1c/pmc.c **** }
 3578              	 .loc 1 1210 1
 3579 001e 00BF     	 nop
 3580 0020 0C37     	 adds r7,r7,#12
 3581              	.LCFI262:
 3582              	 .cfi_def_cfa_offset 4
 3583 0022 BD46     	 mov sp,r7
 3584              	.LCFI263:
 3585              	 .cfi_def_cfa_register 13
 3586              	 
 3587 0024 80BC     	 pop {r7}
 3588              	.LCFI264:
 3589              	 .cfi_restore 7
 3590              	 .cfi_def_cfa_offset 0
 3591 0026 7047     	 bx lr
 3592              	.L247:
 3593              	 .align 2
 3594              	.L246:
 3595 0028 00040E40 	 .word 1074660352
 3596              	 .cfi_endproc
 3597              	.LFE118:
 3599              	 .section .text.pmc_enable_sleepmode,"ax",%progbits
 3600              	 .align 1
 3601              	 .global pmc_enable_sleepmode
 3602              	 .syntax unified
 3603              	 .thumb
 3604              	 .thumb_func
 3605              	 .fpu softvfp
 3607              	pmc_enable_sleepmode:
 3608              	.LFB119:
1211:.././hal/sam3u1c/pmc.c **** 
1212:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1213:.././hal/sam3u1c/pmc.c **** /**
1214:.././hal/sam3u1c/pmc.c ****  * \brief Set the wake-up inputs of coprocessor for fast startup mode registers
1215:.././hal/sam3u1c/pmc.c ****  *        (event generation).
1216:.././hal/sam3u1c/pmc.c ****  *
1217:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to enable.
1218:.././hal/sam3u1c/pmc.c ****  */
1219:.././hal/sam3u1c/pmc.c **** void pmc_cp_set_fast_startup_input(uint32_t ul_inputs)
1220:.././hal/sam3u1c/pmc.c **** {
1221:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
1222:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_CPFSMR |= ul_inputs;
1223:.././hal/sam3u1c/pmc.c **** }
1224:.././hal/sam3u1c/pmc.c **** 
1225:.././hal/sam3u1c/pmc.c **** /**
1226:.././hal/sam3u1c/pmc.c ****  * \brief Clear the wake-up inputs of coprocessor for fast startup mode registers
1227:.././hal/sam3u1c/pmc.c ****  *        (remove event generation).
1228:.././hal/sam3u1c/pmc.c ****  *
1229:.././hal/sam3u1c/pmc.c ****  * \param ul_inputs Wake up inputs to disable.
1230:.././hal/sam3u1c/pmc.c ****  */
1231:.././hal/sam3u1c/pmc.c **** void pmc_cp_clr_fast_startup_input(uint32_t ul_inputs)
1232:.././hal/sam3u1c/pmc.c **** {
1233:.././hal/sam3u1c/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
1234:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_CPFSMR &= ~ul_inputs;
1235:.././hal/sam3u1c/pmc.c **** }
1236:.././hal/sam3u1c/pmc.c **** #endif
1237:.././hal/sam3u1c/pmc.c **** 
1238:.././hal/sam3u1c/pmc.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
1239:.././hal/sam3u1c/pmc.c **** /**
1240:.././hal/sam3u1c/pmc.c ****  * \brief Enable Sleep Mode.
1241:.././hal/sam3u1c/pmc.c ****  * Enter condition: (WFE or WFI) + (SLEEPDEEP bit = 0) + (LPM bit = 0)
1242:.././hal/sam3u1c/pmc.c ****  *
1243:.././hal/sam3u1c/pmc.c ****  * \param uc_type 0 for wait for interrupt, 1 for wait for event.
1244:.././hal/sam3u1c/pmc.c ****  * \note For SAM4S, SAM4C, SAM4CM, SAM4CP and SAM4E series,
1245:.././hal/sam3u1c/pmc.c ****  * since only WFI is effective, uc_type = 1 will be treated as uc_type = 0.
1246:.././hal/sam3u1c/pmc.c ****  */
1247:.././hal/sam3u1c/pmc.c **** void pmc_enable_sleepmode(uint8_t uc_type)
1248:.././hal/sam3u1c/pmc.c **** {
 3609              	 .loc 1 1248 1
 3610              	 .cfi_startproc
 3611              	 
 3612              	 
 3613              	 
 3614 0000 80B4     	 push {r7}
 3615              	.LCFI265:
 3616              	 .cfi_def_cfa_offset 4
 3617              	 .cfi_offset 7,-4
 3618 0002 83B0     	 sub sp,sp,#12
 3619              	.LCFI266:
 3620              	 .cfi_def_cfa_offset 16
 3621 0004 00AF     	 add r7,sp,#0
 3622              	.LCFI267:
 3623              	 .cfi_def_cfa_register 7
 3624 0006 0346     	 mov r3,r0
 3625 0008 FB71     	 strb r3,[r7,#7]
1249:.././hal/sam3u1c/pmc.c **** #if !(SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP)
1250:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR &= (uint32_t) ~ PMC_FSMR_LPM; // Enter Sleep mode
 3626              	 .loc 1 1250 16
 3627 000a 0C4B     	 ldr r3,.L251
 3628 000c 1B6F     	 ldr r3,[r3,#112]
 3629 000e 0B4A     	 ldr r2,.L251
 3630 0010 23F48013 	 bic r3,r3,#1048576
 3631 0014 1367     	 str r3,[r2,#112]
1251:.././hal/sam3u1c/pmc.c **** #endif
1252:.././hal/sam3u1c/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; // Deep sleep
 3632              	 .loc 1 1252 11
 3633 0016 0A4B     	 ldr r3,.L251+4
 3634 0018 1B69     	 ldr r3,[r3,#16]
 3635 001a 094A     	 ldr r2,.L251+4
 3636 001c 23F00403 	 bic r3,r3,#4
 3637 0020 1361     	 str r3,[r2,#16]
1253:.././hal/sam3u1c/pmc.c **** 
1254:.././hal/sam3u1c/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP)
1255:.././hal/sam3u1c/pmc.c **** 	UNUSED(uc_type);
1256:.././hal/sam3u1c/pmc.c **** 	__WFI();
1257:.././hal/sam3u1c/pmc.c **** #else
1258:.././hal/sam3u1c/pmc.c **** 	if (uc_type == 0) {
 3638              	 .loc 1 1258 5
 3639 0022 FB79     	 ldrb r3,[r7,#7]
 3640 0024 002B     	 cmp r3,#0
 3641 0026 01D1     	 bne .L249
 3642              	.LBB12:
 3643              	.LBB13:
 3644              	 .file 2 ".././hal/sam3u1c/inc/core_cmInstr.h"
   1:.././hal/sam3u1c/inc/core_cmInstr.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @date     07. February 2012
   6:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
   7:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  10:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  15:.././hal/sam3u1c/inc/core_cmInstr.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cmInstr.h ****  *
  22:.././hal/sam3u1c/inc/core_cmInstr.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  24:.././hal/sam3u1c/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  27:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  28:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:.././hal/sam3u1c/inc/core_cmInstr.h ****   Access to dedicated instructions
  31:.././hal/sam3u1c/inc/core_cmInstr.h ****   @{
  32:.././hal/sam3u1c/inc/core_cmInstr.h **** */
  33:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  34:.././hal/sam3u1c/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:.././hal/sam3u1c/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  36:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  37:.././hal/sam3u1c/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:.././hal/sam3u1c/inc/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif
  40:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  41:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  42:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
  43:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  44:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  46:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __NOP                             __nop
  47:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  48:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  49:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  51:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
  53:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  54:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFI                             __wfi
  55:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  56:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  57:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
  58:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  59:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  62:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __WFE                             __wfe
  63:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  64:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  65:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Send Event
  66:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  67:.././hal/sam3u1c/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  69:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SEV                             __sev
  70:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  71:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  72:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  74:.././hal/sam3u1c/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:.././hal/sam3u1c/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:.././hal/sam3u1c/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  78:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  80:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  81:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  83:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:.././hal/sam3u1c/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  86:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  88:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  89:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  91:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:.././hal/sam3u1c/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
  94:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  96:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  97:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:.././hal/sam3u1c/inc/core_cmInstr.h **** 
  99:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 101:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 103:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 104:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __REV                             __rev
 105:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 106:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 107:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 109:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 111:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 113:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 114:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 116:.././hal/sam3u1c/inc/core_cmInstr.h ****   rev16 r0, r0
 117:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 118:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 119:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 120:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 121:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 123:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 125:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 127:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 128:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 130:.././hal/sam3u1c/inc/core_cmInstr.h ****   revsh r0, r0
 131:.././hal/sam3u1c/inc/core_cmInstr.h ****   bx lr
 132:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 133:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 134:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 135:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 137:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 139:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Rotated value
 142:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 143:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __ROR                             __ror
 144:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 145:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 146:.././hal/sam3u1c/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 148:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 150:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 152:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return               Reversed value
 154:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 155:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 156:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 157:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 158:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 160:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 162:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 165:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 167:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 168:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 170:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 172:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 175:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 177:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 178:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 180:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 182:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 185:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 187:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 188:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 190:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 192:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 193:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 195:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 196:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 197:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 199:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 200:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 202:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 204:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 205:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 207:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 208:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 209:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 211:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 212:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 214:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 216:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 217:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          0  Function succeeded
 219:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return          1  Function failed
 220:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 221:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 223:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 224:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 226:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 228:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 229:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 230:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 231:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 232:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 233:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 234:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates a signed value.
 235:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 236:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 239:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 240:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 241:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 242:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 243:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 245:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 246:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 247:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             Saturated value
 250:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 251:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __USAT                            __usat
 252:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 253:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 254:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 255:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 256:.././hal/sam3u1c/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 258:.././hal/sam3u1c/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:.././hal/sam3u1c/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 260:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 261:.././hal/sam3u1c/inc/core_cmInstr.h **** #define __CLZ                             __clz
 262:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 263:.././hal/sam3u1c/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 265:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 266:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 267:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:.././hal/sam3u1c/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 270:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_iar.h>
 271:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 272:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 273:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:.././hal/sam3u1c/inc/core_cmInstr.h **** /* TI CCS specific functions */
 275:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 276:.././hal/sam3u1c/inc/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 278:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 279:.././hal/sam3u1c/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:.././hal/sam3u1c/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 281:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 282:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  No Operation
 283:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 284:.././hal/sam3u1c/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 286:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 287:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 288:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 289:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 290:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 291:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 292:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 294:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:.././hal/sam3u1c/inc/core_cmInstr.h ****     until one of a number of events occurs.
 296:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 297:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 298:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 299:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 3645              	 .loc 2 299 3
 3646              	 .syntax unified
 3647              	
 3648 0028 30BF     	 wfi
 3649              	
 300:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 3650              	 .loc 2 300 1
 3651              	 .thumb
 3652              	 .syntax unified
 3653 002a 01E0     	 b .L250
 3654              	.L249:
 3655              	.LBE13:
 3656              	.LBE12:
 3657              	.LBB14:
 3658              	.LBB15:
 301:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 302:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 303:.././hal/sam3u1c/inc/core_cmInstr.h **** /** \brief  Wait For Event
 304:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 305:.././hal/sam3u1c/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:.././hal/sam3u1c/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:.././hal/sam3u1c/inc/core_cmInstr.h ****  */
 308:.././hal/sam3u1c/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 309:.././hal/sam3u1c/inc/core_cmInstr.h **** {
 310:.././hal/sam3u1c/inc/core_cmInstr.h ****   __ASM volatile ("wfe");
 3659              	 .loc 2 310 3
 3660              	 .syntax unified
 3661              	
 3662 002c 20BF     	 wfe
 3663              	
 311:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 3664              	 .loc 2 311 1
 3665              	 .thumb
 3666              	 .syntax unified
 3667 002e 00BF     	 nop
 3668              	.L250:
 3669              	.LBE15:
 3670              	.LBE14:
1259:.././hal/sam3u1c/pmc.c **** 		__WFI();
1260:.././hal/sam3u1c/pmc.c **** 	} else {
1261:.././hal/sam3u1c/pmc.c **** 		__WFE();
1262:.././hal/sam3u1c/pmc.c **** 	}
1263:.././hal/sam3u1c/pmc.c **** #endif
1264:.././hal/sam3u1c/pmc.c **** }
 3671              	 .loc 1 1264 1
 3672 0030 00BF     	 nop
 3673 0032 0C37     	 adds r7,r7,#12
 3674              	.LCFI268:
 3675              	 .cfi_def_cfa_offset 4
 3676 0034 BD46     	 mov sp,r7
 3677              	.LCFI269:
 3678              	 .cfi_def_cfa_register 13
 3679              	 
 3680 0036 80BC     	 pop {r7}
 3681              	.LCFI270:
 3682              	 .cfi_restore 7
 3683              	 .cfi_def_cfa_offset 0
 3684 0038 7047     	 bx lr
 3685              	.L252:
 3686 003a 00BF     	 .align 2
 3687              	.L251:
 3688 003c 00040E40 	 .word 1074660352
 3689 0040 00ED00E0 	 .word -536810240
 3690              	 .cfi_endproc
 3691              	.LFE119:
 3693              	 .section .text.pmc_enable_waitmode,"ax",%progbits
 3694              	 .align 1
 3695              	 .global pmc_enable_waitmode
 3696              	 .syntax unified
 3697              	 .thumb
 3698              	 .thumb_func
 3699              	 .fpu softvfp
 3701              	pmc_enable_waitmode:
 3702              	.LFB120:
1265:.././hal/sam3u1c/pmc.c **** #endif
1266:.././hal/sam3u1c/pmc.c **** 
1267:.././hal/sam3u1c/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAMG || SAM4CP)
1268:.././hal/sam3u1c/pmc.c **** static uint32_t ul_flash_in_wait_mode = PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN;
1269:.././hal/sam3u1c/pmc.c **** /**
1270:.././hal/sam3u1c/pmc.c ****  * \brief Set the embedded flash state in wait mode
1271:.././hal/sam3u1c/pmc.c ****  *
1272:.././hal/sam3u1c/pmc.c ****  * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
1273:.././hal/sam3u1c/pmc.c ****  * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
1274:.././hal/sam3u1c/pmc.c ****  */
1275:.././hal/sam3u1c/pmc.c **** void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
1276:.././hal/sam3u1c/pmc.c **** {
1277:.././hal/sam3u1c/pmc.c **** 	ul_flash_in_wait_mode = ul_flash_state;
1278:.././hal/sam3u1c/pmc.c **** }
1279:.././hal/sam3u1c/pmc.c **** 
1280:.././hal/sam3u1c/pmc.c **** /**
1281:.././hal/sam3u1c/pmc.c ****  * \brief Enable Wait Mode. Enter condition: (WAITMODE bit = 1) +
1282:.././hal/sam3u1c/pmc.c ****  * (SLEEPDEEP bit = 0) + FLPM
1283:.././hal/sam3u1c/pmc.c ****  *
1284:.././hal/sam3u1c/pmc.c ****  * \note In this function the FWS is reset to 0 to get best flash access
1285:.././hal/sam3u1c/pmc.c ****  * performance while running on fast wake up RC clock. Make sure the
1286:.././hal/sam3u1c/pmc.c ****  * non-zero FWS value is saved before invoking this function, and restored
1287:.././hal/sam3u1c/pmc.c ****  * after system woken up, to avoid flash access error.
1288:.././hal/sam3u1c/pmc.c ****  * See \ref pmc_sleep() for entering different sleep modes.
1289:.././hal/sam3u1c/pmc.c ****  */
1290:.././hal/sam3u1c/pmc.c **** void pmc_enable_waitmode(void)
1291:.././hal/sam3u1c/pmc.c **** {
1292:.././hal/sam3u1c/pmc.c **** 	uint32_t i;
1293:.././hal/sam3u1c/pmc.c **** 
1294:.././hal/sam3u1c/pmc.c **** 	/* Flash in wait mode */
1295:.././hal/sam3u1c/pmc.c **** 	i = PMC->PMC_FSMR;
1296:.././hal/sam3u1c/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
1297:.././hal/sam3u1c/pmc.c **** 	i |= ul_flash_in_wait_mode;
1298:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR = i;
1299:.././hal/sam3u1c/pmc.c **** 
1300:.././hal/sam3u1c/pmc.c **** 	/* Clear SLEEPDEEP bit */
1301:.././hal/sam3u1c/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk;
1302:.././hal/sam3u1c/pmc.c **** 
1303:.././hal/sam3u1c/pmc.c **** 	/* Set the WAITMODE bit = 1 */
1304:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
1305:.././hal/sam3u1c/pmc.c **** 
1306:.././hal/sam3u1c/pmc.c **** 	/* Waiting for Master Clock Ready MCKRDY = 1 */
1307:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
1308:.././hal/sam3u1c/pmc.c **** 
1309:.././hal/sam3u1c/pmc.c **** 	/* Waiting for MOSCRCEN bit cleared is strongly recommended
1310:.././hal/sam3u1c/pmc.c **** 	 * to ensure that the core will not execute undesired instructions
1311:.././hal/sam3u1c/pmc.c **** 	 */
1312:.././hal/sam3u1c/pmc.c **** 	for (i = 0; i < 500; i++) {
1313:.././hal/sam3u1c/pmc.c **** 		__NOP();
1314:.././hal/sam3u1c/pmc.c **** 	}
1315:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
1316:.././hal/sam3u1c/pmc.c **** 
1317:.././hal/sam3u1c/pmc.c **** #if (!SAMG)
1318:.././hal/sam3u1c/pmc.c **** 	/* Restore Flash in idle mode */
1319:.././hal/sam3u1c/pmc.c **** 	i = PMC->PMC_FSMR;
1320:.././hal/sam3u1c/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
1321:.././hal/sam3u1c/pmc.c **** 	i |= PMC_WAIT_MODE_FLASH_IDLE;
1322:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR = i;
1323:.././hal/sam3u1c/pmc.c **** #endif
1324:.././hal/sam3u1c/pmc.c **** }
1325:.././hal/sam3u1c/pmc.c **** #else
1326:.././hal/sam3u1c/pmc.c **** /**
1327:.././hal/sam3u1c/pmc.c ****  * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
1328:.././hal/sam3u1c/pmc.c ****  * (LPM bit = 1)
1329:.././hal/sam3u1c/pmc.c ****  */
1330:.././hal/sam3u1c/pmc.c **** void pmc_enable_waitmode(void)
1331:.././hal/sam3u1c/pmc.c **** {
 3703              	 .loc 1 1331 1
 3704              	 .cfi_startproc
 3705              	 
 3706              	 
 3707              	 
 3708 0000 80B4     	 push {r7}
 3709              	.LCFI271:
 3710              	 .cfi_def_cfa_offset 4
 3711              	 .cfi_offset 7,-4
 3712 0002 83B0     	 sub sp,sp,#12
 3713              	.LCFI272:
 3714              	 .cfi_def_cfa_offset 16
 3715 0004 00AF     	 add r7,sp,#0
 3716              	.LCFI273:
 3717              	 .cfi_def_cfa_register 7
1332:.././hal/sam3u1c/pmc.c **** 	uint32_t i;
1333:.././hal/sam3u1c/pmc.c **** 
1334:.././hal/sam3u1c/pmc.c **** 	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
 3718              	 .loc 1 1334 16
 3719 0006 134B     	 ldr r3,.L257
 3720 0008 1B6F     	 ldr r3,[r3,#112]
 3721 000a 124A     	 ldr r2,.L257
 3722 000c 43F48013 	 orr r3,r3,#1048576
 3723 0010 1367     	 str r3,[r2,#112]
1335:.././hal/sam3u1c/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
 3724              	 .loc 1 1335 11
 3725 0012 114B     	 ldr r3,.L257+4
 3726 0014 1B69     	 ldr r3,[r3,#16]
 3727 0016 104A     	 ldr r2,.L257+4
 3728 0018 23F00403 	 bic r3,r3,#4
 3729 001c 1361     	 str r3,[r2,#16]
 3730              	.LBB16:
 3731              	.LBB17:
 310:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 3732              	 .loc 2 310 3
 3733              	 .syntax unified
 3734              	
 3735 001e 20BF     	 wfe
 3736              	
 3737              	 .loc 2 311 1
 3738              	 .thumb
 3739              	 .syntax unified
 3740 0020 00BF     	 nop
 3741              	.LBE17:
 3742              	.LBE16:
1336:.././hal/sam3u1c/pmc.c **** 
1337:.././hal/sam3u1c/pmc.c **** 	__WFE();
1338:.././hal/sam3u1c/pmc.c **** 
1339:.././hal/sam3u1c/pmc.c **** 	/* Waiting for MOSCRCEN bit cleared is strongly recommended
1340:.././hal/sam3u1c/pmc.c **** 	 * to ensure that the core will not execute undesired instructions
1341:.././hal/sam3u1c/pmc.c **** 	 */
1342:.././hal/sam3u1c/pmc.c **** 	for (i = 0; i < 500; i++) {
 3743              	 .loc 1 1342 9
 3744 0022 0023     	 movs r3,#0
 3745 0024 7B60     	 str r3,[r7,#4]
 3746              	 .loc 1 1342 2
 3747 0026 04E0     	 b .L254
 3748              	.L255:
 3749              	.LBB18:
 3750              	.LBB19:
 288:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 3751              	 .loc 2 288 3
 3752              	 .syntax unified
 3753              	
 3754 0028 00BF     	 nop
 3755              	
 289:.././hal/sam3u1c/inc/core_cmInstr.h **** 
 3756              	 .loc 2 289 1
 3757              	 .thumb
 3758              	 .syntax unified
 3759 002a 00BF     	 nop
 3760              	.LBE19:
 3761              	.LBE18:
 3762              	 .loc 1 1342 24
 3763 002c 7B68     	 ldr r3,[r7,#4]
 3764 002e 0133     	 adds r3,r3,#1
 3765 0030 7B60     	 str r3,[r7,#4]
 3766              	.L254:
 3767              	 .loc 1 1342 2 discriminator 1
 3768 0032 7B68     	 ldr r3,[r7,#4]
 3769 0034 B3F5FA7F 	 cmp r3,#500
 3770 0038 F6D3     	 bcc .L255
1343:.././hal/sam3u1c/pmc.c **** 		__NOP();
1344:.././hal/sam3u1c/pmc.c **** 	}
1345:.././hal/sam3u1c/pmc.c **** 	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
 3771              	 .loc 1 1345 8
 3772 003a 00BF     	 nop
 3773              	.L256:
 3774              	 .loc 1 1345 14 discriminator 1
 3775 003c 054B     	 ldr r3,.L257
 3776 003e 1B6A     	 ldr r3,[r3,#32]
 3777              	 .loc 1 1345 25 discriminator 1
 3778 0040 03F00803 	 and r3,r3,#8
 3779              	 .loc 1 1345 8 discriminator 1
 3780 0044 002B     	 cmp r3,#0
 3781 0046 F9D0     	 beq .L256
1346:.././hal/sam3u1c/pmc.c **** 
1347:.././hal/sam3u1c/pmc.c **** }
 3782              	 .loc 1 1347 1
 3783 0048 00BF     	 nop
 3784 004a 00BF     	 nop
 3785 004c 0C37     	 adds r7,r7,#12
 3786              	.LCFI274:
 3787              	 .cfi_def_cfa_offset 4
 3788 004e BD46     	 mov sp,r7
 3789              	.LCFI275:
 3790              	 .cfi_def_cfa_register 13
 3791              	 
 3792 0050 80BC     	 pop {r7}
 3793              	.LCFI276:
 3794              	 .cfi_restore 7
 3795              	 .cfi_def_cfa_offset 0
 3796 0052 7047     	 bx lr
 3797              	.L258:
 3798              	 .align 2
 3799              	.L257:
 3800 0054 00040E40 	 .word 1074660352
 3801 0058 00ED00E0 	 .word -536810240
 3802              	 .cfi_endproc
 3803              	.LFE120:
 3805              	 .section .text.pmc_enable_backupmode,"ax",%progbits
 3806              	 .align 1
 3807              	 .global pmc_enable_backupmode
 3808              	 .syntax unified
 3809              	 .thumb
 3810              	 .thumb_func
 3811              	 .fpu softvfp
 3813              	pmc_enable_backupmode:
 3814              	.LFB121:
1348:.././hal/sam3u1c/pmc.c **** #endif
1349:.././hal/sam3u1c/pmc.c **** 
1350:.././hal/sam3u1c/pmc.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
1351:.././hal/sam3u1c/pmc.c **** /**
1352:.././hal/sam3u1c/pmc.c ****  * \brief Enable Backup Mode. Enter condition: WFE/(VROFF bit = 1) +
1353:.././hal/sam3u1c/pmc.c ****  * (SLEEPDEEP bit = 1)
1354:.././hal/sam3u1c/pmc.c ****  */
1355:.././hal/sam3u1c/pmc.c **** void pmc_enable_backupmode(void)
1356:.././hal/sam3u1c/pmc.c **** {
 3815              	 .loc 1 1356 1
 3816              	 .cfi_startproc
 3817              	 
 3818              	 
 3819              	 
 3820 0000 80B4     	 push {r7}
 3821              	.LCFI277:
 3822              	 .cfi_def_cfa_offset 4
 3823              	 .cfi_offset 7,-4
 3824 0002 00AF     	 add r7,sp,#0
 3825              	.LCFI278:
 3826              	 .cfi_def_cfa_register 7
1357:.././hal/sam3u1c/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1358:.././hal/sam3u1c/pmc.c **** 	uint32_t tmp = SUPC->SUPC_MR & ~(SUPC_MR_BUPPOREN | SUPC_MR_KEY_Msk);
1359:.././hal/sam3u1c/pmc.c **** 	SUPC->SUPC_MR = tmp | SUPC_MR_KEY_PASSWD;
1360:.././hal/sam3u1c/pmc.c **** 	while (SUPC->SUPC_SR & SUPC_SR_BUPPORS);
1361:.././hal/sam3u1c/pmc.c **** #endif
1362:.././hal/sam3u1c/pmc.c **** 	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 3827              	 .loc 1 1362 11
 3828 0004 054B     	 ldr r3,.L260
 3829 0006 1B69     	 ldr r3,[r3,#16]
 3830 0008 044A     	 ldr r2,.L260
 3831 000a 43F00403 	 orr r3,r3,#4
 3832 000e 1361     	 str r3,[r2,#16]
 3833              	.LBB20:
 3834              	.LBB21:
 310:.././hal/sam3u1c/inc/core_cmInstr.h **** }
 3835              	 .loc 2 310 3
 3836              	 .syntax unified
 3837              	
 3838 0010 20BF     	 wfe
 3839              	
 3840              	 .loc 2 311 1
 3841              	 .thumb
 3842              	 .syntax unified
 3843 0012 00BF     	 nop
 3844              	.LBE21:
 3845              	.LBE20:
1363:.././hal/sam3u1c/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55)
1364:.././hal/sam3u1c/pmc.c **** 	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
1365:.././hal/sam3u1c/pmc.c **** 	__WFE();
1366:.././hal/sam3u1c/pmc.c **** 	__WFI();
1367:.././hal/sam3u1c/pmc.c **** #else
1368:.././hal/sam3u1c/pmc.c **** 	__WFE();
1369:.././hal/sam3u1c/pmc.c **** #endif
1370:.././hal/sam3u1c/pmc.c **** }
 3846              	 .loc 1 1370 1
 3847 0014 00BF     	 nop
 3848 0016 BD46     	 mov sp,r7
 3849              	.LCFI279:
 3850              	 .cfi_def_cfa_register 13
 3851              	 
 3852 0018 80BC     	 pop {r7}
 3853              	.LCFI280:
 3854              	 .cfi_restore 7
 3855              	 .cfi_def_cfa_offset 0
 3856 001a 7047     	 bx lr
 3857              	.L261:
 3858              	 .align 2
 3859              	.L260:
 3860 001c 00ED00E0 	 .word -536810240
 3861              	 .cfi_endproc
 3862              	.LFE121:
 3864              	 .section .text.pmc_enable_clock_failure_detector,"ax",%progbits
 3865              	 .align 1
 3866              	 .global pmc_enable_clock_failure_detector
 3867              	 .syntax unified
 3868              	 .thumb
 3869              	 .thumb_func
 3870              	 .fpu softvfp
 3872              	pmc_enable_clock_failure_detector:
 3873              	.LFB122:
1371:.././hal/sam3u1c/pmc.c **** #endif
1372:.././hal/sam3u1c/pmc.c **** 
1373:.././hal/sam3u1c/pmc.c **** /**
1374:.././hal/sam3u1c/pmc.c ****  * \brief Enable Clock Failure Detector.
1375:.././hal/sam3u1c/pmc.c ****  */
1376:.././hal/sam3u1c/pmc.c **** void pmc_enable_clock_failure_detector(void)
1377:.././hal/sam3u1c/pmc.c **** {
 3874              	 .loc 1 1377 1
 3875              	 .cfi_startproc
 3876              	 
 3877              	 
 3878              	 
 3879 0000 80B4     	 push {r7}
 3880              	.LCFI281:
 3881              	 .cfi_def_cfa_offset 4
 3882              	 .cfi_offset 7,-4
 3883 0002 83B0     	 sub sp,sp,#12
 3884              	.LCFI282:
 3885              	 .cfi_def_cfa_offset 16
 3886 0004 00AF     	 add r7,sp,#0
 3887              	.LCFI283:
 3888              	 .cfi_def_cfa_register 7
1378:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR;
 3889              	 .loc 1 1378 23
 3890 0006 074B     	 ldr r3,.L263
 3891              	 .loc 1 1378 11
 3892 0008 1B6A     	 ldr r3,[r3,#32]
 3893 000a 7B60     	 str r3,[r7,#4]
1379:.././hal/sam3u1c/pmc.c **** 
1380:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | CKGR_MOR_CFDEN | ul_reg;
 3894              	 .loc 1 1380 5
 3895 000c 054A     	 ldr r2,.L263
 3896              	 .loc 1 1380 55
 3897 000e 7B68     	 ldr r3,[r7,#4]
 3898 0010 43F00D73 	 orr r3,r3,#36962304
 3899 0014 43F44033 	 orr r3,r3,#196608
 3900              	 .loc 1 1380 16
 3901 0018 1362     	 str r3,[r2,#32]
1381:.././hal/sam3u1c/pmc.c **** }
 3902              	 .loc 1 1381 1
 3903 001a 00BF     	 nop
 3904 001c 0C37     	 adds r7,r7,#12
 3905              	.LCFI284:
 3906              	 .cfi_def_cfa_offset 4
 3907 001e BD46     	 mov sp,r7
 3908              	.LCFI285:
 3909              	 .cfi_def_cfa_register 13
 3910              	 
 3911 0020 80BC     	 pop {r7}
 3912              	.LCFI286:
 3913              	 .cfi_restore 7
 3914              	 .cfi_def_cfa_offset 0
 3915 0022 7047     	 bx lr
 3916              	.L264:
 3917              	 .align 2
 3918              	.L263:
 3919 0024 00040E40 	 .word 1074660352
 3920              	 .cfi_endproc
 3921              	.LFE122:
 3923              	 .section .text.pmc_disable_clock_failure_detector,"ax",%progbits
 3924              	 .align 1
 3925              	 .global pmc_disable_clock_failure_detector
 3926              	 .syntax unified
 3927              	 .thumb
 3928              	 .thumb_func
 3929              	 .fpu softvfp
 3931              	pmc_disable_clock_failure_detector:
 3932              	.LFB123:
1382:.././hal/sam3u1c/pmc.c **** 
1383:.././hal/sam3u1c/pmc.c **** /**
1384:.././hal/sam3u1c/pmc.c ****  * \brief Disable Clock Failure Detector.
1385:.././hal/sam3u1c/pmc.c ****  */
1386:.././hal/sam3u1c/pmc.c **** void pmc_disable_clock_failure_detector(void)
1387:.././hal/sam3u1c/pmc.c **** {
 3933              	 .loc 1 1387 1
 3934              	 .cfi_startproc
 3935              	 
 3936              	 
 3937              	 
 3938 0000 80B4     	 push {r7}
 3939              	.LCFI287:
 3940              	 .cfi_def_cfa_offset 4
 3941              	 .cfi_offset 7,-4
 3942 0002 83B0     	 sub sp,sp,#12
 3943              	.LCFI288:
 3944              	 .cfi_def_cfa_offset 16
 3945 0004 00AF     	 add r7,sp,#0
 3946              	.LCFI289:
 3947              	 .cfi_def_cfa_register 7
1388:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_CFDEN);
 3948              	 .loc 1 1388 23
 3949 0006 074B     	 ldr r3,.L266
 3950 0008 1B6A     	 ldr r3,[r3,#32]
 3951              	 .loc 1 1388 11
 3952 000a 23F00073 	 bic r3,r3,#33554432
 3953 000e 7B60     	 str r3,[r7,#4]
1389:.././hal/sam3u1c/pmc.c **** 
1390:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | ul_reg;
 3954              	 .loc 1 1390 5
 3955 0010 044A     	 ldr r2,.L266
 3956              	 .loc 1 1390 38
 3957 0012 7B68     	 ldr r3,[r7,#4]
 3958 0014 43F45C13 	 orr r3,r3,#3604480
 3959              	 .loc 1 1390 16
 3960 0018 1362     	 str r3,[r2,#32]
1391:.././hal/sam3u1c/pmc.c **** }
 3961              	 .loc 1 1391 1
 3962 001a 00BF     	 nop
 3963 001c 0C37     	 adds r7,r7,#12
 3964              	.LCFI290:
 3965              	 .cfi_def_cfa_offset 4
 3966 001e BD46     	 mov sp,r7
 3967              	.LCFI291:
 3968              	 .cfi_def_cfa_register 13
 3969              	 
 3970 0020 80BC     	 pop {r7}
 3971              	.LCFI292:
 3972              	 .cfi_restore 7
 3973              	 .cfi_def_cfa_offset 0
 3974 0022 7047     	 bx lr
 3975              	.L267:
 3976              	 .align 2
 3977              	.L266:
 3978 0024 00040E40 	 .word 1074660352
 3979              	 .cfi_endproc
 3980              	.LFE123:
 3982              	 .section .text.pmc_set_writeprotect,"ax",%progbits
 3983              	 .align 1
 3984              	 .global pmc_set_writeprotect
 3985              	 .syntax unified
 3986              	 .thumb
 3987              	 .thumb_func
 3988              	 .fpu softvfp
 3990              	pmc_set_writeprotect:
 3991              	.LFB124:
1392:.././hal/sam3u1c/pmc.c **** 
1393:.././hal/sam3u1c/pmc.c **** #if (SAM4N || SAM4C || SAM4CM || SAM4CP)
1394:.././hal/sam3u1c/pmc.c **** /**
1395:.././hal/sam3u1c/pmc.c ****  * \brief Enable Slow Crystal Oscillator Frequency Monitoring.
1396:.././hal/sam3u1c/pmc.c ****  */
1397:.././hal/sam3u1c/pmc.c **** void pmc_enable_sclk_osc_freq_monitor(void)
1398:.././hal/sam3u1c/pmc.c **** {
1399:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR;
1400:.././hal/sam3u1c/pmc.c **** 
1401:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | CKGR_MOR_XT32KFME | ul_reg;
1402:.././hal/sam3u1c/pmc.c **** }
1403:.././hal/sam3u1c/pmc.c **** 
1404:.././hal/sam3u1c/pmc.c **** /**
1405:.././hal/sam3u1c/pmc.c ****  * \brief Disable Slow Crystal Oscillator Frequency Monitoring.
1406:.././hal/sam3u1c/pmc.c ****  */
1407:.././hal/sam3u1c/pmc.c **** void pmc_disable_sclk_osc_freq_monitor(void)
1408:.././hal/sam3u1c/pmc.c **** {
1409:.././hal/sam3u1c/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_XT32KFME);
1410:.././hal/sam3u1c/pmc.c **** 
1411:.././hal/sam3u1c/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | ul_reg;
1412:.././hal/sam3u1c/pmc.c **** }
1413:.././hal/sam3u1c/pmc.c **** #endif
1414:.././hal/sam3u1c/pmc.c **** 
1415:.././hal/sam3u1c/pmc.c **** /**
1416:.././hal/sam3u1c/pmc.c ****  * \brief Enable or disable write protect of PMC registers.
1417:.././hal/sam3u1c/pmc.c ****  *
1418:.././hal/sam3u1c/pmc.c ****  * \param ul_enable 1 to enable, 0 to disable.
1419:.././hal/sam3u1c/pmc.c ****  */
1420:.././hal/sam3u1c/pmc.c **** void pmc_set_writeprotect(uint32_t ul_enable)
1421:.././hal/sam3u1c/pmc.c **** {
 3992              	 .loc 1 1421 1
 3993              	 .cfi_startproc
 3994              	 
 3995              	 
 3996              	 
 3997 0000 80B4     	 push {r7}
 3998              	.LCFI293:
 3999              	 .cfi_def_cfa_offset 4
 4000              	 .cfi_offset 7,-4
 4001 0002 83B0     	 sub sp,sp,#12
 4002              	.LCFI294:
 4003              	 .cfi_def_cfa_offset 16
 4004 0004 00AF     	 add r7,sp,#0
 4005              	.LCFI295:
 4006              	 .cfi_def_cfa_register 7
 4007 0006 7860     	 str r0,[r7,#4]
1422:.././hal/sam3u1c/pmc.c **** 	if (ul_enable) {
 4008              	 .loc 1 1422 5
 4009 0008 7B68     	 ldr r3,[r7,#4]
 4010 000a 002B     	 cmp r3,#0
 4011 000c 04D0     	 beq .L269
1423:.././hal/sam3u1c/pmc.c **** 		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
 4012              	 .loc 1 1423 6
 4013 000e 074B     	 ldr r3,.L272
 4014              	 .loc 1 1423 17
 4015 0010 074A     	 ldr r2,.L272+4
 4016 0012 C3F8E420 	 str r2,[r3,#228]
1424:.././hal/sam3u1c/pmc.c **** 	} else {
1425:.././hal/sam3u1c/pmc.c **** 		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
1426:.././hal/sam3u1c/pmc.c **** 	}
1427:.././hal/sam3u1c/pmc.c **** }
 4017              	 .loc 1 1427 1
 4018 0016 03E0     	 b .L271
 4019              	.L269:
1425:.././hal/sam3u1c/pmc.c **** 	}
 4020              	 .loc 1 1425 6
 4021 0018 044B     	 ldr r3,.L272
1425:.././hal/sam3u1c/pmc.c **** 	}
 4022              	 .loc 1 1425 17
 4023 001a 064A     	 ldr r2,.L272+8
 4024 001c C3F8E420 	 str r2,[r3,#228]
 4025              	.L271:
 4026              	 .loc 1 1427 1
 4027 0020 00BF     	 nop
 4028 0022 0C37     	 adds r7,r7,#12
 4029              	.LCFI296:
 4030              	 .cfi_def_cfa_offset 4
 4031 0024 BD46     	 mov sp,r7
 4032              	.LCFI297:
 4033              	 .cfi_def_cfa_register 13
 4034              	 
 4035 0026 80BC     	 pop {r7}
 4036              	.LCFI298:
 4037              	 .cfi_restore 7
 4038              	 .cfi_def_cfa_offset 0
 4039 0028 7047     	 bx lr
 4040              	.L273:
 4041 002a 00BF     	 .align 2
 4042              	.L272:
 4043 002c 00040E40 	 .word 1074660352
 4044 0030 01434D50 	 .word 1347240705
 4045 0034 00434D50 	 .word 1347240704
 4046              	 .cfi_endproc
 4047              	.LFE124:
 4049              	 .section .text.pmc_get_writeprotect_status,"ax",%progbits
 4050              	 .align 1
 4051              	 .global pmc_get_writeprotect_status
 4052              	 .syntax unified
 4053              	 .thumb
 4054              	 .thumb_func
 4055              	 .fpu softvfp
 4057              	pmc_get_writeprotect_status:
 4058              	.LFB125:
1428:.././hal/sam3u1c/pmc.c **** 
1429:.././hal/sam3u1c/pmc.c **** /**
1430:.././hal/sam3u1c/pmc.c ****  * \brief Return write protect status.
1431:.././hal/sam3u1c/pmc.c ****  *
1432:.././hal/sam3u1c/pmc.c ****  * \retval 0 Protection disabled.
1433:.././hal/sam3u1c/pmc.c ****  * \retval 1 Protection enabled.
1434:.././hal/sam3u1c/pmc.c ****  */
1435:.././hal/sam3u1c/pmc.c **** uint32_t pmc_get_writeprotect_status(void)
1436:.././hal/sam3u1c/pmc.c **** {
 4059              	 .loc 1 1436 1
 4060              	 .cfi_startproc
 4061              	 
 4062              	 
 4063              	 
 4064 0000 80B4     	 push {r7}
 4065              	.LCFI299:
 4066              	 .cfi_def_cfa_offset 4
 4067              	 .cfi_offset 7,-4
 4068 0002 00AF     	 add r7,sp,#0
 4069              	.LCFI300:
 4070              	 .cfi_def_cfa_register 7
1437:.././hal/sam3u1c/pmc.c **** 	return PMC->PMC_WPMR & PMC_WPMR_WPEN;
 4071              	 .loc 1 1437 12
 4072 0004 044B     	 ldr r3,.L276
 4073 0006 D3F8E430 	 ldr r3,[r3,#228]
 4074              	 .loc 1 1437 23
 4075 000a 03F00103 	 and r3,r3,#1
1438:.././hal/sam3u1c/pmc.c **** }
 4076              	 .loc 1 1438 1
 4077 000e 1846     	 mov r0,r3
 4078 0010 BD46     	 mov sp,r7
 4079              	.LCFI301:
 4080              	 .cfi_def_cfa_register 13
 4081              	 
 4082 0012 80BC     	 pop {r7}
 4083              	.LCFI302:
 4084              	 .cfi_restore 7
 4085              	 .cfi_def_cfa_offset 0
 4086 0014 7047     	 bx lr
 4087              	.L277:
 4088 0016 00BF     	 .align 2
 4089              	.L276:
 4090 0018 00040E40 	 .word 1074660352
 4091              	 .cfi_endproc
 4092              	.LFE125:
 4094              	 .text
 4095              	.Letext0:
 4096              	 .file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 4097              	 .file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 4098              	 .file 5 ".././hal/sam3u1c/inc/sam3u1c.h"
 4099              	 .file 6 ".././hal/sam3u1c/inc/core_cm3.h"
 4100              	 .file 7 ".././hal/sam3u1c/inc/system_sam3u.h"
 4101              	 .file 8 ".././hal/sam3u1c/inc/component/component_pmc.h"
 4102              	 .file 9 ".././hal/sam3u1c/inc/component/component_supc.h"
 4103              	 .file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 4104              	 .file 11 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 4105              	 .file 12 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 4106              	 .file 13 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 4107              	 .file 14 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 4108              	 .file 15 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pmc.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.pmc_mck_set_prescaler:00000000 $t
    {standard input}:35     .text.pmc_mck_set_prescaler:00000000 pmc_mck_set_prescaler
    {standard input}:95     .text.pmc_mck_set_prescaler:00000034 $d
    {standard input}:100    .text.pmc_mck_set_source:00000000 $t
    {standard input}:107    .text.pmc_mck_set_source:00000000 pmc_mck_set_source
    {standard input}:166    .text.pmc_mck_set_source:00000034 $d
    {standard input}:171    .text.pmc_switch_mck_to_sclk:00000000 $t
    {standard input}:178    .text.pmc_switch_mck_to_sclk:00000000 pmc_switch_mck_to_sclk
    {standard input}:291    .text.pmc_switch_mck_to_sclk:00000078 $d
    {standard input}:296    .text.pmc_switch_mck_to_mainck:00000000 $t
    {standard input}:303    .text.pmc_switch_mck_to_mainck:00000000 pmc_switch_mck_to_mainck
    {standard input}:418    .text.pmc_switch_mck_to_mainck:0000007c $d
    {standard input}:423    .text.pmc_switch_mck_to_pllack:00000000 $t
    {standard input}:430    .text.pmc_switch_mck_to_pllack:00000000 pmc_switch_mck_to_pllack
    {standard input}:545    .text.pmc_switch_mck_to_pllack:0000007c $d
    {standard input}:550    .text.pmc_switch_mck_to_upllck:00000000 $t
    {standard input}:557    .text.pmc_switch_mck_to_upllck:00000000 pmc_switch_mck_to_upllck
    {standard input}:670    .text.pmc_switch_mck_to_upllck:00000078 $d
    {standard input}:675    .text.pmc_switch_sclk_to_32kxtal:00000000 $t
    {standard input}:682    .text.pmc_switch_sclk_to_32kxtal:00000000 pmc_switch_sclk_to_32kxtal
    {standard input}:734    .text.pmc_switch_sclk_to_32kxtal:00000030 $d
    {standard input}:740    .text.pmc_osc_is_ready_32kxtal:00000000 $t
    {standard input}:747    .text.pmc_osc_is_ready_32kxtal:00000000 pmc_osc_is_ready_32kxtal
    {standard input}:798    .text.pmc_osc_is_ready_32kxtal:0000002c $d
    {standard input}:804    .text.pmc_switch_mainck_to_fastrc:00000000 $t
    {standard input}:811    .text.pmc_switch_mainck_to_fastrc:00000000 pmc_switch_mainck_to_fastrc
    {standard input}:902    .text.pmc_switch_mainck_to_fastrc:0000006c $d
    {standard input}:907    .text.pmc_osc_enable_fastrc:00000000 $t
    {standard input}:914    .text.pmc_osc_enable_fastrc:00000000 pmc_osc_enable_fastrc
    {standard input}:994    .text.pmc_osc_enable_fastrc:00000058 $d
    {standard input}:999    .text.pmc_osc_disable_fastrc:00000000 $t
    {standard input}:1006   .text.pmc_osc_disable_fastrc:00000000 pmc_osc_disable_fastrc
    {standard input}:1046   .text.pmc_osc_disable_fastrc:00000020 $d
    {standard input}:1051   .text.pmc_osc_is_ready_fastrc:00000000 $t
    {standard input}:1058   .text.pmc_osc_is_ready_fastrc:00000000 pmc_osc_is_ready_fastrc
    {standard input}:1091   .text.pmc_osc_is_ready_fastrc:00000014 $d
    {standard input}:1096   .text.pmc_osc_enable_main_xtal:00000000 $t
    {standard input}:1103   .text.pmc_osc_enable_main_xtal:00000000 pmc_osc_enable_main_xtal
    {standard input}:1174   .text.pmc_osc_enable_main_xtal:0000004c $d
    {standard input}:1179   .text.pmc_osc_bypass_main_xtal:00000000 $t
    {standard input}:1186   .text.pmc_osc_bypass_main_xtal:00000000 pmc_osc_bypass_main_xtal
    {standard input}:1239   .text.pmc_osc_bypass_main_xtal:00000030 $d
    {standard input}:1244   .text.pmc_osc_disable_main_xtal:00000000 $t
    {standard input}:1251   .text.pmc_osc_disable_main_xtal:00000000 pmc_osc_disable_main_xtal
    {standard input}:1301   .text.pmc_osc_disable_main_xtal:00000028 $d
    {standard input}:1306   .text.pmc_osc_is_bypassed_main_xtal:00000000 $t
    {standard input}:1313   .text.pmc_osc_is_bypassed_main_xtal:00000000 pmc_osc_is_bypassed_main_xtal
    {standard input}:1346   .text.pmc_osc_is_bypassed_main_xtal:00000014 $d
    {standard input}:1351   .text.pmc_osc_is_ready_main_xtal:00000000 $t
    {standard input}:1358   .text.pmc_osc_is_ready_main_xtal:00000000 pmc_osc_is_ready_main_xtal
    {standard input}:1391   .text.pmc_osc_is_ready_main_xtal:00000014 $d
    {standard input}:1396   .text.pmc_switch_mainck_to_xtal:00000000 $t
    {standard input}:1403   .text.pmc_switch_mainck_to_xtal:00000000 pmc_switch_mainck_to_xtal
    {standard input}:1497   .text.pmc_switch_mainck_to_xtal:0000006c $d
    {standard input}:1504   .text.pmc_osc_disable_xtal:00000000 $t
    {standard input}:1511   .text.pmc_osc_disable_xtal:00000000 pmc_osc_disable_xtal
    {standard input}:1578   .text.pmc_osc_disable_xtal:00000044 $d
    {standard input}:1583   .text.pmc_osc_is_ready_mainck:00000000 $t
    {standard input}:1590   .text.pmc_osc_is_ready_mainck:00000000 pmc_osc_is_ready_mainck
    {standard input}:1623   .text.pmc_osc_is_ready_mainck:00000014 $d
    {standard input}:1628   .text.pmc_mainck_osc_select:00000000 $t
    {standard input}:1635   .text.pmc_mainck_osc_select:00000000 pmc_mainck_osc_select
    {standard input}:1697   .text.pmc_mainck_osc_select:0000003c $d
    {standard input}:1702   .text.pmc_enable_pllack:00000000 $t
    {standard input}:1709   .text.pmc_enable_pllack:00000000 pmc_enable_pllack
    {standard input}:1780   .text.pmc_enable_pllack:00000048 $d
    {standard input}:1794   .text.pmc_disable_pllack:00000000 pmc_disable_pllack
    {standard input}:1787   .text.pmc_disable_pllack:00000000 $t
    {standard input}:1827   .text.pmc_disable_pllack:00000014 $d
    {standard input}:1832   .text.pmc_is_locked_pllack:00000000 $t
    {standard input}:1839   .text.pmc_is_locked_pllack:00000000 pmc_is_locked_pllack
    {standard input}:1872   .text.pmc_is_locked_pllack:00000014 $d
    {standard input}:1877   .text.pmc_enable_upll_clock:00000000 $t
    {standard input}:1884   .text.pmc_enable_upll_clock:00000000 pmc_enable_upll_clock
    {standard input}:1929   .text.pmc_enable_upll_clock:00000024 $d
    {standard input}:1934   .text.pmc_disable_upll_clock:00000000 $t
    {standard input}:1941   .text.pmc_disable_upll_clock:00000000 pmc_disable_upll_clock
    {standard input}:1975   .text.pmc_disable_upll_clock:00000018 $d
    {standard input}:1980   .text.pmc_is_locked_upll:00000000 $t
    {standard input}:1987   .text.pmc_is_locked_upll:00000000 pmc_is_locked_upll
    {standard input}:2020   .text.pmc_is_locked_upll:00000014 $d
    {standard input}:2025   .text.pmc_enable_periph_clk:00000000 $t
    {standard input}:2032   .text.pmc_enable_periph_clk:00000000 pmc_enable_periph_clk
    {standard input}:2107   .text.pmc_enable_periph_clk:00000048 $d
    {standard input}:2112   .text.pmc_disable_periph_clk:00000000 $t
    {standard input}:2119   .text.pmc_disable_periph_clk:00000000 pmc_disable_periph_clk
    {standard input}:2194   .text.pmc_disable_periph_clk:00000048 $d
    {standard input}:2199   .text.pmc_enable_all_periph_clk:00000000 $t
    {standard input}:2206   .text.pmc_enable_all_periph_clk:00000000 pmc_enable_all_periph_clk
    {standard input}:2251   .text.pmc_enable_all_periph_clk:00000028 $d
    {standard input}:2256   .text.pmc_disable_all_periph_clk:00000000 $t
    {standard input}:2263   .text.pmc_disable_all_periph_clk:00000000 pmc_disable_all_periph_clk
    {standard input}:2308   .text.pmc_disable_all_periph_clk:00000024 $d
    {standard input}:2313   .text.pmc_is_periph_clk_enabled:00000000 $t
    {standard input}:2320   .text.pmc_is_periph_clk_enabled:00000000 pmc_is_periph_clk_enabled
    {standard input}:2382   .text.pmc_is_periph_clk_enabled:00000034 $d
    {standard input}:2387   .text.pmc_pck_set_prescaler:00000000 $t
    {standard input}:2394   .text.pmc_pck_set_prescaler:00000000 pmc_pck_set_prescaler
    {standard input}:2475   .text.pmc_pck_set_prescaler:0000005c $d
    {standard input}:2480   .text.pmc_pck_set_source:00000000 $t
    {standard input}:2487   .text.pmc_pck_set_source:00000000 pmc_pck_set_source
    {standard input}:2568   .text.pmc_pck_set_source:0000005c $d
    {standard input}:2573   .text.pmc_switch_pck_to_sclk:00000000 $t
    {standard input}:2580   .text.pmc_switch_pck_to_sclk:00000000 pmc_switch_pck_to_sclk
    {standard input}:2657   .text.pmc_switch_pck_to_sclk:00000050 $d
    {standard input}:2662   .text.pmc_switch_pck_to_mainck:00000000 $t
    {standard input}:2669   .text.pmc_switch_pck_to_mainck:00000000 pmc_switch_pck_to_mainck
    {standard input}:2748   .text.pmc_switch_pck_to_mainck:00000054 $d
    {standard input}:2753   .text.pmc_switch_pck_to_pllack:00000000 $t
    {standard input}:2760   .text.pmc_switch_pck_to_pllack:00000000 pmc_switch_pck_to_pllack
    {standard input}:2839   .text.pmc_switch_pck_to_pllack:00000054 $d
    {standard input}:2844   .text.pmc_switch_pck_to_upllck:00000000 $t
    {standard input}:2851   .text.pmc_switch_pck_to_upllck:00000000 pmc_switch_pck_to_upllck
    {standard input}:2930   .text.pmc_switch_pck_to_upllck:00000054 $d
    {standard input}:2935   .text.pmc_switch_pck_to_mck:00000000 $t
    {standard input}:2942   .text.pmc_switch_pck_to_mck:00000000 pmc_switch_pck_to_mck
    {standard input}:3021   .text.pmc_switch_pck_to_mck:00000054 $d
    {standard input}:3026   .text.pmc_enable_pck:00000000 $t
    {standard input}:3033   .text.pmc_enable_pck:00000000 pmc_enable_pck
    {standard input}:3076   .text.pmc_enable_pck:00000020 $d
    {standard input}:3081   .text.pmc_disable_pck:00000000 $t
    {standard input}:3088   .text.pmc_disable_pck:00000000 pmc_disable_pck
    {standard input}:3131   .text.pmc_disable_pck:00000020 $d
    {standard input}:3136   .text.pmc_enable_all_pck:00000000 $t
    {standard input}:3143   .text.pmc_enable_all_pck:00000000 pmc_enable_all_pck
    {standard input}:3176   .text.pmc_enable_all_pck:00000014 $d
    {standard input}:3181   .text.pmc_disable_all_pck:00000000 $t
    {standard input}:3188   .text.pmc_disable_all_pck:00000000 pmc_disable_all_pck
    {standard input}:3221   .text.pmc_disable_all_pck:00000014 $d
    {standard input}:3226   .text.pmc_is_pck_enabled:00000000 $t
    {standard input}:3233   .text.pmc_is_pck_enabled:00000000 pmc_is_pck_enabled
    {standard input}:3286   .text.pmc_is_pck_enabled:0000002c $d
    {standard input}:3291   .text.pmc_enable_interrupt:00000000 $t
    {standard input}:3298   .text.pmc_enable_interrupt:00000000 pmc_enable_interrupt
    {standard input}:3338   .text.pmc_enable_interrupt:00000018 $d
    {standard input}:3343   .text.pmc_disable_interrupt:00000000 $t
    {standard input}:3350   .text.pmc_disable_interrupt:00000000 pmc_disable_interrupt
    {standard input}:3390   .text.pmc_disable_interrupt:00000018 $d
    {standard input}:3395   .text.pmc_get_interrupt_mask:00000000 $t
    {standard input}:3402   .text.pmc_get_interrupt_mask:00000000 pmc_get_interrupt_mask
    {standard input}:3433   .text.pmc_get_interrupt_mask:00000010 $d
    {standard input}:3438   .text.pmc_get_status:00000000 $t
    {standard input}:3445   .text.pmc_get_status:00000000 pmc_get_status
    {standard input}:3476   .text.pmc_get_status:00000010 $d
    {standard input}:3481   .text.pmc_set_fast_startup_input:00000000 $t
    {standard input}:3488   .text.pmc_set_fast_startup_input:00000000 pmc_set_fast_startup_input
    {standard input}:3534   .text.pmc_set_fast_startup_input:00000028 $d
    {standard input}:3539   .text.pmc_clr_fast_startup_input:00000000 $t
    {standard input}:3546   .text.pmc_clr_fast_startup_input:00000000 pmc_clr_fast_startup_input
    {standard input}:3595   .text.pmc_clr_fast_startup_input:00000028 $d
    {standard input}:3600   .text.pmc_enable_sleepmode:00000000 $t
    {standard input}:3607   .text.pmc_enable_sleepmode:00000000 pmc_enable_sleepmode
    {standard input}:3688   .text.pmc_enable_sleepmode:0000003c $d
    {standard input}:3694   .text.pmc_enable_waitmode:00000000 $t
    {standard input}:3701   .text.pmc_enable_waitmode:00000000 pmc_enable_waitmode
    {standard input}:3800   .text.pmc_enable_waitmode:00000054 $d
    {standard input}:3806   .text.pmc_enable_backupmode:00000000 $t
    {standard input}:3813   .text.pmc_enable_backupmode:00000000 pmc_enable_backupmode
    {standard input}:3860   .text.pmc_enable_backupmode:0000001c $d
    {standard input}:3865   .text.pmc_enable_clock_failure_detector:00000000 $t
    {standard input}:3872   .text.pmc_enable_clock_failure_detector:00000000 pmc_enable_clock_failure_detector
    {standard input}:3919   .text.pmc_enable_clock_failure_detector:00000024 $d
    {standard input}:3924   .text.pmc_disable_clock_failure_detector:00000000 $t
    {standard input}:3931   .text.pmc_disable_clock_failure_detector:00000000 pmc_disable_clock_failure_detector
    {standard input}:3978   .text.pmc_disable_clock_failure_detector:00000024 $d
    {standard input}:3983   .text.pmc_set_writeprotect:00000000 $t
    {standard input}:3990   .text.pmc_set_writeprotect:00000000 pmc_set_writeprotect
    {standard input}:4043   .text.pmc_set_writeprotect:0000002c $d
    {standard input}:4050   .text.pmc_get_writeprotect_status:00000000 $t
    {standard input}:4057   .text.pmc_get_writeprotect_status:00000000 pmc_get_writeprotect_status
    {standard input}:4090   .text.pmc_get_writeprotect_status:00000018 $d
                           .group:00000000 wm4.0.2cd8a2cb7ff4c48cec7eeec776a1dd8c
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.pmc.h.58.e82ab76d364abd9761d4d0905e15fc60

NO UNDEFINED SYMBOLS
