   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "usart_driver.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.NVIC_EnableIRQ,"ax",%progbits
  16              	 .align 1
  17              	 .arch armv7-m
  18              	 .syntax unified
  19              	 .thumb
  20              	 .thumb_func
  21              	 .fpu softvfp
  23              	NVIC_EnableIRQ:
  24              	.LFB41:
  25              	 .file 1 ".././hal/sam3u1c/inc/core_cm3.h"
   1:.././hal/sam3u1c/inc/core_cm3.h **** /**************************************************************************//**
   2:.././hal/sam3u1c/inc/core_cm3.h ****  * @file     core_cm3.h
   3:.././hal/sam3u1c/inc/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:.././hal/sam3u1c/inc/core_cm3.h ****  * @version  V3.00
   5:.././hal/sam3u1c/inc/core_cm3.h ****  * @date     03. February 2012
   6:.././hal/sam3u1c/inc/core_cm3.h ****  *
   7:.././hal/sam3u1c/inc/core_cm3.h ****  * @note
   8:.././hal/sam3u1c/inc/core_cm3.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:.././hal/sam3u1c/inc/core_cm3.h ****  *
  10:.././hal/sam3u1c/inc/core_cm3.h ****  * @par
  11:.././hal/sam3u1c/inc/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:.././hal/sam3u1c/inc/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:.././hal/sam3u1c/inc/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:.././hal/sam3u1c/inc/core_cm3.h ****  *
  15:.././hal/sam3u1c/inc/core_cm3.h ****  * @par
  16:.././hal/sam3u1c/inc/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:.././hal/sam3u1c/inc/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:.././hal/sam3u1c/inc/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:.././hal/sam3u1c/inc/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:.././hal/sam3u1c/inc/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:.././hal/sam3u1c/inc/core_cm3.h ****  *
  22:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
  23:.././hal/sam3u1c/inc/core_cm3.h **** #if defined ( __ICCARM__ )
  24:.././hal/sam3u1c/inc/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  26:.././hal/sam3u1c/inc/core_cm3.h **** 
  27:.././hal/sam3u1c/inc/core_cm3.h **** #ifdef __cplusplus
  28:.././hal/sam3u1c/inc/core_cm3.h ****  extern "C" {
  29:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  30:.././hal/sam3u1c/inc/core_cm3.h **** 
  31:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:.././hal/sam3u1c/inc/core_cm3.h **** 
  34:.././hal/sam3u1c/inc/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  35:.././hal/sam3u1c/inc/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  36:.././hal/sam3u1c/inc/core_cm3.h ****   
  37:.././hal/sam3u1c/inc/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  38:.././hal/sam3u1c/inc/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'. 
  39:.././hal/sam3u1c/inc/core_cm3.h **** 
  40:.././hal/sam3u1c/inc/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  41:.././hal/sam3u1c/inc/core_cm3.h ****      Unions are used for effective representation of core registers.
  42:.././hal/sam3u1c/inc/core_cm3.h ****    
  43:.././hal/sam3u1c/inc/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  44:.././hal/sam3u1c/inc/core_cm3.h ****      Function-like macros are used to allow more efficient code. 
  45:.././hal/sam3u1c/inc/core_cm3.h ****  */
  46:.././hal/sam3u1c/inc/core_cm3.h **** 
  47:.././hal/sam3u1c/inc/core_cm3.h **** 
  48:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
  49:.././hal/sam3u1c/inc/core_cm3.h ****  *                 CMSIS definitions
  50:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
  51:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup Cortex_M3
  52:.././hal/sam3u1c/inc/core_cm3.h ****   @{
  53:.././hal/sam3u1c/inc/core_cm3.h ****  */
  54:.././hal/sam3u1c/inc/core_cm3.h **** 
  55:.././hal/sam3u1c/inc/core_cm3.h **** /*  CMSIS CM3 definitions */
  56:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  57:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                   /*!< [15:0]  CMSIS HAL s
  58:.././hal/sam3u1c/inc/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  59:.././hal/sam3u1c/inc/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  60:.././hal/sam3u1c/inc/core_cm3.h **** 
  61:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  62:.././hal/sam3u1c/inc/core_cm3.h **** 
  63:.././hal/sam3u1c/inc/core_cm3.h **** 
  64:.././hal/sam3u1c/inc/core_cm3.h **** #if   defined ( __CC_ARM )
  65:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  66:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  67:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  68:.././hal/sam3u1c/inc/core_cm3.h **** 
  69:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
  70:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  71:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  72:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  73:.././hal/sam3u1c/inc/core_cm3.h **** 
  74:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TMS470__ )
  75:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  76:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  77:.././hal/sam3u1c/inc/core_cm3.h **** 
  78:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __GNUC__ )
  79:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  80:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  81:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  82:.././hal/sam3u1c/inc/core_cm3.h **** 
  83:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TASKING__ )
  84:.././hal/sam3u1c/inc/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  85:.././hal/sam3u1c/inc/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  86:.././hal/sam3u1c/inc/core_cm3.h ****   #define __STATIC_INLINE  static inline
  87:.././hal/sam3u1c/inc/core_cm3.h **** 
  88:.././hal/sam3u1c/inc/core_cm3.h **** #endif
  89:.././hal/sam3u1c/inc/core_cm3.h **** 
  90:.././hal/sam3u1c/inc/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
  91:.././hal/sam3u1c/inc/core_cm3.h **** */
  92:.././hal/sam3u1c/inc/core_cm3.h **** #define __FPU_USED       0
  93:.././hal/sam3u1c/inc/core_cm3.h **** 
  94:.././hal/sam3u1c/inc/core_cm3.h **** #if defined ( __CC_ARM )
  95:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  96:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  97:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
  98:.././hal/sam3u1c/inc/core_cm3.h **** 
  99:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __ICCARM__ )
 100:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __ARMVFP__
 101:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 102:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 103:.././hal/sam3u1c/inc/core_cm3.h **** 
 104:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TMS470__ )
 105:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 106:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 107:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 108:.././hal/sam3u1c/inc/core_cm3.h **** 
 109:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __GNUC__ )
 110:.././hal/sam3u1c/inc/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 111:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 113:.././hal/sam3u1c/inc/core_cm3.h **** 
 114:.././hal/sam3u1c/inc/core_cm3.h **** #elif defined ( __TASKING__ )
 115:.././hal/sam3u1c/inc/core_cm3.h ****     /* add preprocessor checks */
 116:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 117:.././hal/sam3u1c/inc/core_cm3.h **** 
 118:.././hal/sam3u1c/inc/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 119:.././hal/sam3u1c/inc/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 120:.././hal/sam3u1c/inc/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 121:.././hal/sam3u1c/inc/core_cm3.h **** 
 122:.././hal/sam3u1c/inc/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 123:.././hal/sam3u1c/inc/core_cm3.h **** 
 124:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CMSIS_GENERIC
 125:.././hal/sam3u1c/inc/core_cm3.h **** 
 126:.././hal/sam3u1c/inc/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 127:.././hal/sam3u1c/inc/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 128:.././hal/sam3u1c/inc/core_cm3.h **** 
 129:.././hal/sam3u1c/inc/core_cm3.h **** /* check device defines and use defaults */
 130:.././hal/sam3u1c/inc/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 131:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __CM3_REV
 132:.././hal/sam3u1c/inc/core_cm3.h ****     #define __CM3_REV               0x0200
 133:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 134:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 135:.././hal/sam3u1c/inc/core_cm3.h **** 
 136:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __MPU_PRESENT
 137:.././hal/sam3u1c/inc/core_cm3.h ****     #define __MPU_PRESENT             0
 138:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 139:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 140:.././hal/sam3u1c/inc/core_cm3.h **** 
 141:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 142:.././hal/sam3u1c/inc/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 143:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 144:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 145:.././hal/sam3u1c/inc/core_cm3.h **** 
 146:.././hal/sam3u1c/inc/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 147:.././hal/sam3u1c/inc/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 148:.././hal/sam3u1c/inc/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 149:.././hal/sam3u1c/inc/core_cm3.h ****   #endif
 150:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 151:.././hal/sam3u1c/inc/core_cm3.h **** 
 152:.././hal/sam3u1c/inc/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 153:.././hal/sam3u1c/inc/core_cm3.h **** /**
 154:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 155:.././hal/sam3u1c/inc/core_cm3.h ****  
 156:.././hal/sam3u1c/inc/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 157:.././hal/sam3u1c/inc/core_cm3.h ****     \li to specify the access to peripheral variables.
 158:.././hal/sam3u1c/inc/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 159:.././hal/sam3u1c/inc/core_cm3.h **** */
 160:.././hal/sam3u1c/inc/core_cm3.h **** #ifdef __cplusplus
 161:.././hal/sam3u1c/inc/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 162:.././hal/sam3u1c/inc/core_cm3.h **** #else
 163:.././hal/sam3u1c/inc/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 164:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 165:.././hal/sam3u1c/inc/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 166:.././hal/sam3u1c/inc/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 167:.././hal/sam3u1c/inc/core_cm3.h **** 
 168:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group Cortex_M3 */
 169:.././hal/sam3u1c/inc/core_cm3.h **** 
 170:.././hal/sam3u1c/inc/core_cm3.h **** 
 171:.././hal/sam3u1c/inc/core_cm3.h **** 
 172:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
 173:.././hal/sam3u1c/inc/core_cm3.h ****  *                 Register Abstraction
 174:.././hal/sam3u1c/inc/core_cm3.h ****   Core Register contain:
 175:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Register
 176:.././hal/sam3u1c/inc/core_cm3.h ****   - Core NVIC Register
 177:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SCB Register
 178:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SysTick Register
 179:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Debug Register
 180:.././hal/sam3u1c/inc/core_cm3.h ****   - Core MPU Register
 181:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
 182:.././hal/sam3u1c/inc/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 183:.././hal/sam3u1c/inc/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 184:.././hal/sam3u1c/inc/core_cm3.h **** */
 185:.././hal/sam3u1c/inc/core_cm3.h **** 
 186:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
 187:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 188:.././hal/sam3u1c/inc/core_cm3.h ****     \brief  Core Register type definitions.
 189:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 190:.././hal/sam3u1c/inc/core_cm3.h ****  */
 191:.././hal/sam3u1c/inc/core_cm3.h **** 
 192:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 193:.././hal/sam3u1c/inc/core_cm3.h ****  */
 194:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 195:.././hal/sam3u1c/inc/core_cm3.h **** {
 196:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 197:.././hal/sam3u1c/inc/core_cm3.h ****   {
 198:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 199:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 200:.././hal/sam3u1c/inc/core_cm3.h **** #else
 201:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 202:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 203:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 204:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 205:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 206:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 207:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 208:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 209:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 210:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 211:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 212:.././hal/sam3u1c/inc/core_cm3.h **** } APSR_Type;
 213:.././hal/sam3u1c/inc/core_cm3.h **** 
 214:.././hal/sam3u1c/inc/core_cm3.h **** 
 215:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 216:.././hal/sam3u1c/inc/core_cm3.h ****  */
 217:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 218:.././hal/sam3u1c/inc/core_cm3.h **** {
 219:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 220:.././hal/sam3u1c/inc/core_cm3.h ****   {
 221:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 222:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 223:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 224:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 225:.././hal/sam3u1c/inc/core_cm3.h **** } IPSR_Type;
 226:.././hal/sam3u1c/inc/core_cm3.h **** 
 227:.././hal/sam3u1c/inc/core_cm3.h **** 
 228:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 229:.././hal/sam3u1c/inc/core_cm3.h ****  */
 230:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 231:.././hal/sam3u1c/inc/core_cm3.h **** {
 232:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 233:.././hal/sam3u1c/inc/core_cm3.h ****   {
 234:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 235:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CORTEX_M != 0x04)
 236:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 237:.././hal/sam3u1c/inc/core_cm3.h **** #else
 238:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 239:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 240:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 241:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 242:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 243:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 244:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 245:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 246:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 247:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 248:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 249:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 250:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 251:.././hal/sam3u1c/inc/core_cm3.h **** } xPSR_Type;
 252:.././hal/sam3u1c/inc/core_cm3.h **** 
 253:.././hal/sam3u1c/inc/core_cm3.h **** 
 254:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 255:.././hal/sam3u1c/inc/core_cm3.h ****  */
 256:.././hal/sam3u1c/inc/core_cm3.h **** typedef union
 257:.././hal/sam3u1c/inc/core_cm3.h **** {
 258:.././hal/sam3u1c/inc/core_cm3.h ****   struct
 259:.././hal/sam3u1c/inc/core_cm3.h ****   {
 260:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 261:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 262:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 263:.././hal/sam3u1c/inc/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 264:.././hal/sam3u1c/inc/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 265:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 266:.././hal/sam3u1c/inc/core_cm3.h **** } CONTROL_Type;
 267:.././hal/sam3u1c/inc/core_cm3.h **** 
 268:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_CORE */
 269:.././hal/sam3u1c/inc/core_cm3.h **** 
 270:.././hal/sam3u1c/inc/core_cm3.h **** 
 271:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
 272:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 273:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 274:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 275:.././hal/sam3u1c/inc/core_cm3.h ****  */
 276:.././hal/sam3u1c/inc/core_cm3.h **** 
 277:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 278:.././hal/sam3u1c/inc/core_cm3.h ****  */
 279:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 280:.././hal/sam3u1c/inc/core_cm3.h **** {
 281:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 282:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[24];
 283:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 284:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RSERVED1[24];
 285:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 286:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[24];
 287:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 288:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED3[24];
 289:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 290:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED4[56];
 291:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 292:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED5[644];
 293:.././hal/sam3u1c/inc/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 294:.././hal/sam3u1c/inc/core_cm3.h **** }  NVIC_Type;
 295:.././hal/sam3u1c/inc/core_cm3.h **** 
 296:.././hal/sam3u1c/inc/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 297:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 298:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 299:.././hal/sam3u1c/inc/core_cm3.h **** 
 300:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 301:.././hal/sam3u1c/inc/core_cm3.h **** 
 302:.././hal/sam3u1c/inc/core_cm3.h **** 
 303:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 304:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 305:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 306:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 307:.././hal/sam3u1c/inc/core_cm3.h ****  */
 308:.././hal/sam3u1c/inc/core_cm3.h **** 
 309:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 310:.././hal/sam3u1c/inc/core_cm3.h ****  */
 311:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 312:.././hal/sam3u1c/inc/core_cm3.h **** {
 313:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 314:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 315:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 316:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 317:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 318:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 319:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 320:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 321:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 322:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 323:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 324:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 325:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 326:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 327:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 328:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 329:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 330:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 331:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 332:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[5];
 333:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 334:.././hal/sam3u1c/inc/core_cm3.h **** } SCB_Type;
 335:.././hal/sam3u1c/inc/core_cm3.h **** 
 336:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB CPUID Register Definitions */
 337:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 338:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 339:.././hal/sam3u1c/inc/core_cm3.h **** 
 340:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 341:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 342:.././hal/sam3u1c/inc/core_cm3.h **** 
 343:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 344:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 345:.././hal/sam3u1c/inc/core_cm3.h **** 
 346:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 347:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 348:.././hal/sam3u1c/inc/core_cm3.h **** 
 349:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 350:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 351:.././hal/sam3u1c/inc/core_cm3.h **** 
 352:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 353:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 354:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 355:.././hal/sam3u1c/inc/core_cm3.h **** 
 356:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 357:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 358:.././hal/sam3u1c/inc/core_cm3.h **** 
 359:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 360:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 361:.././hal/sam3u1c/inc/core_cm3.h **** 
 362:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 363:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 364:.././hal/sam3u1c/inc/core_cm3.h **** 
 365:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 366:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 367:.././hal/sam3u1c/inc/core_cm3.h **** 
 368:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 369:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 370:.././hal/sam3u1c/inc/core_cm3.h **** 
 371:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 372:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 373:.././hal/sam3u1c/inc/core_cm3.h **** 
 374:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 375:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 376:.././hal/sam3u1c/inc/core_cm3.h **** 
 377:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 378:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 379:.././hal/sam3u1c/inc/core_cm3.h **** 
 380:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 381:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 382:.././hal/sam3u1c/inc/core_cm3.h **** 
 383:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 384:.././hal/sam3u1c/inc/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 385:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 386:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 387:.././hal/sam3u1c/inc/core_cm3.h **** 
 388:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 389:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 390:.././hal/sam3u1c/inc/core_cm3.h **** #else
 391:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 392:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 393:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 394:.././hal/sam3u1c/inc/core_cm3.h **** 
 395:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 396:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 397:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 398:.././hal/sam3u1c/inc/core_cm3.h **** 
 399:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 400:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 401:.././hal/sam3u1c/inc/core_cm3.h **** 
 402:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 403:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 404:.././hal/sam3u1c/inc/core_cm3.h **** 
 405:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 406:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 407:.././hal/sam3u1c/inc/core_cm3.h **** 
 408:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 409:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:.././hal/sam3u1c/inc/core_cm3.h **** 
 411:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 412:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:.././hal/sam3u1c/inc/core_cm3.h **** 
 414:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 415:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 416:.././hal/sam3u1c/inc/core_cm3.h **** 
 417:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB System Control Register Definitions */
 418:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 419:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 420:.././hal/sam3u1c/inc/core_cm3.h **** 
 421:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 422:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 423:.././hal/sam3u1c/inc/core_cm3.h **** 
 424:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 425:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 426:.././hal/sam3u1c/inc/core_cm3.h **** 
 427:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 428:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 429:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 430:.././hal/sam3u1c/inc/core_cm3.h **** 
 431:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 432:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 433:.././hal/sam3u1c/inc/core_cm3.h **** 
 434:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 435:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 436:.././hal/sam3u1c/inc/core_cm3.h **** 
 437:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 438:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 439:.././hal/sam3u1c/inc/core_cm3.h **** 
 440:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 441:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 442:.././hal/sam3u1c/inc/core_cm3.h **** 
 443:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 444:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 445:.././hal/sam3u1c/inc/core_cm3.h **** 
 446:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 447:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 448:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 449:.././hal/sam3u1c/inc/core_cm3.h **** 
 450:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 451:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 452:.././hal/sam3u1c/inc/core_cm3.h **** 
 453:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 454:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 455:.././hal/sam3u1c/inc/core_cm3.h **** 
 456:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 457:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:.././hal/sam3u1c/inc/core_cm3.h **** 
 459:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 460:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 461:.././hal/sam3u1c/inc/core_cm3.h **** 
 462:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 463:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 464:.././hal/sam3u1c/inc/core_cm3.h **** 
 465:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 466:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 467:.././hal/sam3u1c/inc/core_cm3.h **** 
 468:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 469:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 470:.././hal/sam3u1c/inc/core_cm3.h **** 
 471:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 472:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 473:.././hal/sam3u1c/inc/core_cm3.h **** 
 474:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 475:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 476:.././hal/sam3u1c/inc/core_cm3.h **** 
 477:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 478:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 479:.././hal/sam3u1c/inc/core_cm3.h **** 
 480:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 481:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 482:.././hal/sam3u1c/inc/core_cm3.h **** 
 483:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 484:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 485:.././hal/sam3u1c/inc/core_cm3.h **** 
 486:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 487:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 488:.././hal/sam3u1c/inc/core_cm3.h **** 
 489:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 490:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 491:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 492:.././hal/sam3u1c/inc/core_cm3.h **** 
 493:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 494:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 495:.././hal/sam3u1c/inc/core_cm3.h **** 
 496:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 497:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 498:.././hal/sam3u1c/inc/core_cm3.h **** 
 499:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 500:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 501:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 502:.././hal/sam3u1c/inc/core_cm3.h **** 
 503:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 504:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 505:.././hal/sam3u1c/inc/core_cm3.h **** 
 506:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 507:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 508:.././hal/sam3u1c/inc/core_cm3.h **** 
 509:.././hal/sam3u1c/inc/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 510:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 511:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 512:.././hal/sam3u1c/inc/core_cm3.h **** 
 513:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 514:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 515:.././hal/sam3u1c/inc/core_cm3.h **** 
 516:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 517:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 518:.././hal/sam3u1c/inc/core_cm3.h **** 
 519:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 520:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 521:.././hal/sam3u1c/inc/core_cm3.h **** 
 522:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 523:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 524:.././hal/sam3u1c/inc/core_cm3.h **** 
 525:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SCB */
 526:.././hal/sam3u1c/inc/core_cm3.h **** 
 527:.././hal/sam3u1c/inc/core_cm3.h **** 
 528:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 529:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 530:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 531:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 532:.././hal/sam3u1c/inc/core_cm3.h ****  */
 533:.././hal/sam3u1c/inc/core_cm3.h **** 
 534:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 535:.././hal/sam3u1c/inc/core_cm3.h ****  */
 536:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 537:.././hal/sam3u1c/inc/core_cm3.h **** {
 538:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[1];
 539:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 540:.././hal/sam3u1c/inc/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 541:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 542:.././hal/sam3u1c/inc/core_cm3.h **** #else
 543:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[1];
 544:.././hal/sam3u1c/inc/core_cm3.h **** #endif
 545:.././hal/sam3u1c/inc/core_cm3.h **** } SCnSCB_Type;
 546:.././hal/sam3u1c/inc/core_cm3.h **** 
 547:.././hal/sam3u1c/inc/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 548:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 549:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 550:.././hal/sam3u1c/inc/core_cm3.h **** 
 551:.././hal/sam3u1c/inc/core_cm3.h **** /* Auxiliary Control Register Definitions */
 552:.././hal/sam3u1c/inc/core_cm3.h **** 
 553:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 554:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 555:.././hal/sam3u1c/inc/core_cm3.h **** 
 556:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 557:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 558:.././hal/sam3u1c/inc/core_cm3.h **** 
 559:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 560:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 561:.././hal/sam3u1c/inc/core_cm3.h **** 
 562:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 563:.././hal/sam3u1c/inc/core_cm3.h **** 
 564:.././hal/sam3u1c/inc/core_cm3.h **** 
 565:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 566:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 567:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 568:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 569:.././hal/sam3u1c/inc/core_cm3.h ****  */
 570:.././hal/sam3u1c/inc/core_cm3.h **** 
 571:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 572:.././hal/sam3u1c/inc/core_cm3.h ****  */
 573:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 574:.././hal/sam3u1c/inc/core_cm3.h **** {
 575:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 576:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 577:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 578:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 579:.././hal/sam3u1c/inc/core_cm3.h **** } SysTick_Type;
 580:.././hal/sam3u1c/inc/core_cm3.h **** 
 581:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 582:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 583:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 584:.././hal/sam3u1c/inc/core_cm3.h **** 
 585:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 586:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 587:.././hal/sam3u1c/inc/core_cm3.h **** 
 588:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 589:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 590:.././hal/sam3u1c/inc/core_cm3.h **** 
 591:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 592:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 593:.././hal/sam3u1c/inc/core_cm3.h **** 
 594:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Reload Register Definitions */
 595:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 596:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 597:.././hal/sam3u1c/inc/core_cm3.h **** 
 598:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Current Register Definitions */
 599:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 600:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 601:.././hal/sam3u1c/inc/core_cm3.h **** 
 602:.././hal/sam3u1c/inc/core_cm3.h **** /* SysTick Calibration Register Definitions */
 603:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 604:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 605:.././hal/sam3u1c/inc/core_cm3.h **** 
 606:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 607:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 608:.././hal/sam3u1c/inc/core_cm3.h **** 
 609:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 610:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 611:.././hal/sam3u1c/inc/core_cm3.h **** 
 612:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 613:.././hal/sam3u1c/inc/core_cm3.h **** 
 614:.././hal/sam3u1c/inc/core_cm3.h **** 
 615:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 616:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 617:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 618:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 619:.././hal/sam3u1c/inc/core_cm3.h ****  */
 620:.././hal/sam3u1c/inc/core_cm3.h **** 
 621:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 622:.././hal/sam3u1c/inc/core_cm3.h ****  */
 623:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 624:.././hal/sam3u1c/inc/core_cm3.h **** {
 625:.././hal/sam3u1c/inc/core_cm3.h ****   __O  union
 626:.././hal/sam3u1c/inc/core_cm3.h ****   {
 627:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 628:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 629:.././hal/sam3u1c/inc/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 630:.././hal/sam3u1c/inc/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 631:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[864];
 632:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 633:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[15];
 634:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 635:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[15];
 636:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 637:.././hal/sam3u1c/inc/core_cm3.h **** } ITM_Type;
 638:.././hal/sam3u1c/inc/core_cm3.h **** 
 639:.././hal/sam3u1c/inc/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 640:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                          /*!< ITM TPR
 641:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)             /*!< ITM TPR
 642:.././hal/sam3u1c/inc/core_cm3.h **** 
 643:.././hal/sam3u1c/inc/core_cm3.h **** /* ITM Trace Control Register Definitions */
 644:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                          /*!< ITM TCR
 645:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                   /*!< ITM TCR
 646:.././hal/sam3u1c/inc/core_cm3.h **** 
 647:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                          /*!< ITM TCR
 648:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)          /*!< ITM TCR
 649:.././hal/sam3u1c/inc/core_cm3.h **** 
 650:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                          /*!< ITM TCR
 651:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                /*!< ITM TCR
 652:.././hal/sam3u1c/inc/core_cm3.h **** 
 653:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                          /*!< ITM TCR
 654:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)             /*!< ITM TCR
 655:.././hal/sam3u1c/inc/core_cm3.h **** 
 656:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                          /*!< ITM TCR
 657:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                 /*!< ITM TCR
 658:.././hal/sam3u1c/inc/core_cm3.h **** 
 659:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TXENA_Pos                   3                                          /*!< ITM TCR
 660:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TXENA_Msk                  (1UL << ITM_TCR_TXENA_Pos)                  /*!< ITM TCR
 661:.././hal/sam3u1c/inc/core_cm3.h **** 
 662:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                          /*!< ITM TCR
 663:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                /*!< ITM TCR
 664:.././hal/sam3u1c/inc/core_cm3.h **** 
 665:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                          /*!< ITM TCR
 666:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                  /*!< ITM TCR
 667:.././hal/sam3u1c/inc/core_cm3.h **** 
 668:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                          /*!< ITM TCR
 669:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                 /*!< ITM TCR
 670:.././hal/sam3u1c/inc/core_cm3.h **** 
 671:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 672:.././hal/sam3u1c/inc/core_cm3.h **** 
 673:.././hal/sam3u1c/inc/core_cm3.h **** 
 674:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 675:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 676:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 677:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 678:.././hal/sam3u1c/inc/core_cm3.h ****  */
 679:.././hal/sam3u1c/inc/core_cm3.h **** 
 680:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 681:.././hal/sam3u1c/inc/core_cm3.h ****  */
 682:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 683:.././hal/sam3u1c/inc/core_cm3.h **** {
 684:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 685:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 686:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 687:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 688:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 689:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 690:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 691:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 692:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 693:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 694:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 695:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[1];
 696:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 697:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 698:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 699:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[1];
 700:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 701:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 702:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 703:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[1];
 704:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 705:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 706:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 707:.././hal/sam3u1c/inc/core_cm3.h **** } DWT_Type;
 708:.././hal/sam3u1c/inc/core_cm3.h **** 
 709:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Control Register Definitions */
 710:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 711:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 712:.././hal/sam3u1c/inc/core_cm3.h **** 
 713:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 714:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 715:.././hal/sam3u1c/inc/core_cm3.h **** 
 716:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 717:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 718:.././hal/sam3u1c/inc/core_cm3.h **** 
 719:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 720:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 721:.././hal/sam3u1c/inc/core_cm3.h **** 
 722:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 723:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 724:.././hal/sam3u1c/inc/core_cm3.h **** 
 725:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 726:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 727:.././hal/sam3u1c/inc/core_cm3.h **** 
 728:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 729:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 730:.././hal/sam3u1c/inc/core_cm3.h **** 
 731:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 732:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 733:.././hal/sam3u1c/inc/core_cm3.h **** 
 734:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 735:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 736:.././hal/sam3u1c/inc/core_cm3.h **** 
 737:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 738:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 739:.././hal/sam3u1c/inc/core_cm3.h **** 
 740:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 741:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 742:.././hal/sam3u1c/inc/core_cm3.h **** 
 743:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 744:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 745:.././hal/sam3u1c/inc/core_cm3.h **** 
 746:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 747:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 748:.././hal/sam3u1c/inc/core_cm3.h **** 
 749:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 750:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 751:.././hal/sam3u1c/inc/core_cm3.h **** 
 752:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 753:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 754:.././hal/sam3u1c/inc/core_cm3.h **** 
 755:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 756:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 757:.././hal/sam3u1c/inc/core_cm3.h **** 
 758:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 759:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 760:.././hal/sam3u1c/inc/core_cm3.h **** 
 761:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 762:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 763:.././hal/sam3u1c/inc/core_cm3.h **** 
 764:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT CPI Count Register Definitions */
 765:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 766:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 767:.././hal/sam3u1c/inc/core_cm3.h **** 
 768:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 769:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 770:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 771:.././hal/sam3u1c/inc/core_cm3.h **** 
 772:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 773:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 774:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 775:.././hal/sam3u1c/inc/core_cm3.h **** 
 776:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT LSU Count Register Definitions */
 777:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 778:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 779:.././hal/sam3u1c/inc/core_cm3.h **** 
 780:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 781:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 782:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 783:.././hal/sam3u1c/inc/core_cm3.h **** 
 784:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 785:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 786:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 787:.././hal/sam3u1c/inc/core_cm3.h **** 
 788:.././hal/sam3u1c/inc/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 789:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 790:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 791:.././hal/sam3u1c/inc/core_cm3.h **** 
 792:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 793:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 794:.././hal/sam3u1c/inc/core_cm3.h **** 
 795:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 796:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 797:.././hal/sam3u1c/inc/core_cm3.h **** 
 798:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 799:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 800:.././hal/sam3u1c/inc/core_cm3.h **** 
 801:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 802:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 803:.././hal/sam3u1c/inc/core_cm3.h **** 
 804:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 805:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 806:.././hal/sam3u1c/inc/core_cm3.h **** 
 807:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 808:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 809:.././hal/sam3u1c/inc/core_cm3.h **** 
 810:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 811:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 812:.././hal/sam3u1c/inc/core_cm3.h **** 
 813:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 814:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 815:.././hal/sam3u1c/inc/core_cm3.h **** 
 816:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 817:.././hal/sam3u1c/inc/core_cm3.h **** 
 818:.././hal/sam3u1c/inc/core_cm3.h **** 
 819:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 820:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 821:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 822:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 823:.././hal/sam3u1c/inc/core_cm3.h ****  */
 824:.././hal/sam3u1c/inc/core_cm3.h **** 
 825:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 826:.././hal/sam3u1c/inc/core_cm3.h ****  */
 827:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 828:.././hal/sam3u1c/inc/core_cm3.h **** {
 829:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 830:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 831:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED0[2];
 832:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 833:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED1[55];
 834:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 835:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED2[131];
 836:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 837:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 838:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 839:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED3[759];
 840:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 841:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 842:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 843:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED4[1];
 844:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 845:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 846:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 847:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED5[39];
 848:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 849:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 850:.././hal/sam3u1c/inc/core_cm3.h ****        uint32_t RESERVED7[8];
 851:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 852:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 853:.././hal/sam3u1c/inc/core_cm3.h **** } TPI_Type;
 854:.././hal/sam3u1c/inc/core_cm3.h **** 
 855:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 856:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 857:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 858:.././hal/sam3u1c/inc/core_cm3.h **** 
 859:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 860:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 861:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 862:.././hal/sam3u1c/inc/core_cm3.h **** 
 863:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 864:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 865:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 866:.././hal/sam3u1c/inc/core_cm3.h **** 
 867:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 868:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 869:.././hal/sam3u1c/inc/core_cm3.h **** 
 870:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 871:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 872:.././hal/sam3u1c/inc/core_cm3.h **** 
 873:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 874:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 875:.././hal/sam3u1c/inc/core_cm3.h **** 
 876:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 877:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 878:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 879:.././hal/sam3u1c/inc/core_cm3.h **** 
 880:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 881:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 882:.././hal/sam3u1c/inc/core_cm3.h **** 
 883:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 884:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 885:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 886:.././hal/sam3u1c/inc/core_cm3.h **** 
 887:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 888:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 889:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 890:.././hal/sam3u1c/inc/core_cm3.h **** 
 891:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 892:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 893:.././hal/sam3u1c/inc/core_cm3.h **** 
 894:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 895:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 896:.././hal/sam3u1c/inc/core_cm3.h **** 
 897:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 898:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 899:.././hal/sam3u1c/inc/core_cm3.h **** 
 900:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 901:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 902:.././hal/sam3u1c/inc/core_cm3.h **** 
 903:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 904:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 905:.././hal/sam3u1c/inc/core_cm3.h **** 
 906:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 907:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 908:.././hal/sam3u1c/inc/core_cm3.h **** 
 909:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 910:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 911:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 912:.././hal/sam3u1c/inc/core_cm3.h **** 
 913:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 914:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 915:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 916:.././hal/sam3u1c/inc/core_cm3.h **** 
 917:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 918:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 919:.././hal/sam3u1c/inc/core_cm3.h **** 
 920:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 921:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 922:.././hal/sam3u1c/inc/core_cm3.h **** 
 923:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 924:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 925:.././hal/sam3u1c/inc/core_cm3.h **** 
 926:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 927:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 928:.././hal/sam3u1c/inc/core_cm3.h **** 
 929:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 930:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 931:.././hal/sam3u1c/inc/core_cm3.h **** 
 932:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 933:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 934:.././hal/sam3u1c/inc/core_cm3.h **** 
 935:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 936:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 937:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 938:.././hal/sam3u1c/inc/core_cm3.h **** 
 939:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 940:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
 941:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
 942:.././hal/sam3u1c/inc/core_cm3.h **** 
 943:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI DEVID Register Definitions */
 944:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
 945:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
 946:.././hal/sam3u1c/inc/core_cm3.h **** 
 947:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
 948:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
 949:.././hal/sam3u1c/inc/core_cm3.h **** 
 950:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
 951:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
 952:.././hal/sam3u1c/inc/core_cm3.h **** 
 953:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
 954:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
 955:.././hal/sam3u1c/inc/core_cm3.h **** 
 956:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
 957:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
 958:.././hal/sam3u1c/inc/core_cm3.h **** 
 959:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
 960:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
 961:.././hal/sam3u1c/inc/core_cm3.h **** 
 962:.././hal/sam3u1c/inc/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
 963:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
 964:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
 965:.././hal/sam3u1c/inc/core_cm3.h **** 
 966:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
 967:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
 968:.././hal/sam3u1c/inc/core_cm3.h **** 
 969:.././hal/sam3u1c/inc/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
 970:.././hal/sam3u1c/inc/core_cm3.h **** 
 971:.././hal/sam3u1c/inc/core_cm3.h **** 
 972:.././hal/sam3u1c/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
 973:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
 974:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 975:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
 976:.././hal/sam3u1c/inc/core_cm3.h ****   @{
 977:.././hal/sam3u1c/inc/core_cm3.h ****  */
 978:.././hal/sam3u1c/inc/core_cm3.h **** 
 979:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 980:.././hal/sam3u1c/inc/core_cm3.h ****  */
 981:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
 982:.././hal/sam3u1c/inc/core_cm3.h **** {
 983:.././hal/sam3u1c/inc/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 984:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 985:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 986:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 987:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 988:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 989:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 990:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 991:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 992:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 993:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 994:.././hal/sam3u1c/inc/core_cm3.h **** } MPU_Type;
 995:.././hal/sam3u1c/inc/core_cm3.h **** 
 996:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Type Register */
 997:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 998:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 999:.././hal/sam3u1c/inc/core_cm3.h **** 
1000:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1001:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1002:.././hal/sam3u1c/inc/core_cm3.h **** 
1003:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1004:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1005:.././hal/sam3u1c/inc/core_cm3.h **** 
1006:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Control Register */
1007:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1008:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1009:.././hal/sam3u1c/inc/core_cm3.h **** 
1010:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1011:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1012:.././hal/sam3u1c/inc/core_cm3.h **** 
1013:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1014:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1015:.././hal/sam3u1c/inc/core_cm3.h **** 
1016:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Number Register */
1017:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1018:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1019:.././hal/sam3u1c/inc/core_cm3.h **** 
1020:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Base Address Register */
1021:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1022:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1023:.././hal/sam3u1c/inc/core_cm3.h **** 
1024:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1025:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1026:.././hal/sam3u1c/inc/core_cm3.h **** 
1027:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1028:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1029:.././hal/sam3u1c/inc/core_cm3.h **** 
1030:.././hal/sam3u1c/inc/core_cm3.h **** /* MPU Region Attribute and Size Register */
1031:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1032:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1033:.././hal/sam3u1c/inc/core_cm3.h **** 
1034:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1035:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1036:.././hal/sam3u1c/inc/core_cm3.h **** 
1037:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1038:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1039:.././hal/sam3u1c/inc/core_cm3.h **** 
1040:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1041:.././hal/sam3u1c/inc/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1042:.././hal/sam3u1c/inc/core_cm3.h **** 
1043:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_MPU */
1044:.././hal/sam3u1c/inc/core_cm3.h **** #endif
1045:.././hal/sam3u1c/inc/core_cm3.h **** 
1046:.././hal/sam3u1c/inc/core_cm3.h **** 
1047:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_core_register
1048:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1049:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1050:.././hal/sam3u1c/inc/core_cm3.h ****   @{
1051:.././hal/sam3u1c/inc/core_cm3.h ****  */
1052:.././hal/sam3u1c/inc/core_cm3.h **** 
1053:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1054:.././hal/sam3u1c/inc/core_cm3.h ****  */
1055:.././hal/sam3u1c/inc/core_cm3.h **** typedef struct
1056:.././hal/sam3u1c/inc/core_cm3.h **** {
1057:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1058:.././hal/sam3u1c/inc/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1059:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1060:.././hal/sam3u1c/inc/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1061:.././hal/sam3u1c/inc/core_cm3.h **** } CoreDebug_Type;
1062:.././hal/sam3u1c/inc/core_cm3.h **** 
1063:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Halting Control and Status Register */
1064:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1065:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1066:.././hal/sam3u1c/inc/core_cm3.h **** 
1067:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1068:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1069:.././hal/sam3u1c/inc/core_cm3.h **** 
1070:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1071:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1072:.././hal/sam3u1c/inc/core_cm3.h **** 
1073:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1074:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1075:.././hal/sam3u1c/inc/core_cm3.h **** 
1076:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1077:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1078:.././hal/sam3u1c/inc/core_cm3.h **** 
1079:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1080:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1081:.././hal/sam3u1c/inc/core_cm3.h **** 
1082:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1083:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1084:.././hal/sam3u1c/inc/core_cm3.h **** 
1085:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1086:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1087:.././hal/sam3u1c/inc/core_cm3.h **** 
1088:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1089:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1090:.././hal/sam3u1c/inc/core_cm3.h **** 
1091:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1092:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1093:.././hal/sam3u1c/inc/core_cm3.h **** 
1094:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1095:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1096:.././hal/sam3u1c/inc/core_cm3.h **** 
1097:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1098:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1099:.././hal/sam3u1c/inc/core_cm3.h **** 
1100:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Core Register Selector Register */
1101:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1102:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1103:.././hal/sam3u1c/inc/core_cm3.h **** 
1104:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1105:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1106:.././hal/sam3u1c/inc/core_cm3.h **** 
1107:.././hal/sam3u1c/inc/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1108:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1109:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1110:.././hal/sam3u1c/inc/core_cm3.h **** 
1111:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1112:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1113:.././hal/sam3u1c/inc/core_cm3.h **** 
1114:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1115:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1116:.././hal/sam3u1c/inc/core_cm3.h **** 
1117:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1118:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1119:.././hal/sam3u1c/inc/core_cm3.h **** 
1120:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1121:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1122:.././hal/sam3u1c/inc/core_cm3.h **** 
1123:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1124:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1125:.././hal/sam3u1c/inc/core_cm3.h **** 
1126:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1127:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1128:.././hal/sam3u1c/inc/core_cm3.h **** 
1129:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1130:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1131:.././hal/sam3u1c/inc/core_cm3.h **** 
1132:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1133:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1134:.././hal/sam3u1c/inc/core_cm3.h **** 
1135:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1136:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1137:.././hal/sam3u1c/inc/core_cm3.h **** 
1138:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1139:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1140:.././hal/sam3u1c/inc/core_cm3.h **** 
1141:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1142:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1143:.././hal/sam3u1c/inc/core_cm3.h **** 
1144:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1145:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1146:.././hal/sam3u1c/inc/core_cm3.h **** 
1147:.././hal/sam3u1c/inc/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1148:.././hal/sam3u1c/inc/core_cm3.h **** 
1149:.././hal/sam3u1c/inc/core_cm3.h **** 
1150:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup    CMSIS_core_register
1151:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1152:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1153:.././hal/sam3u1c/inc/core_cm3.h ****   @{
1154:.././hal/sam3u1c/inc/core_cm3.h ****  */
1155:.././hal/sam3u1c/inc/core_cm3.h **** 
1156:.././hal/sam3u1c/inc/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1157:.././hal/sam3u1c/inc/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1158:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1159:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1160:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1161:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1162:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1163:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1164:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1165:.././hal/sam3u1c/inc/core_cm3.h **** 
1166:.././hal/sam3u1c/inc/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1167:.././hal/sam3u1c/inc/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1168:.././hal/sam3u1c/inc/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1169:.././hal/sam3u1c/inc/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1170:.././hal/sam3u1c/inc/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1171:.././hal/sam3u1c/inc/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1172:.././hal/sam3u1c/inc/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1173:.././hal/sam3u1c/inc/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1174:.././hal/sam3u1c/inc/core_cm3.h **** 
1175:.././hal/sam3u1c/inc/core_cm3.h **** #if (__MPU_PRESENT == 1)
1176:.././hal/sam3u1c/inc/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1177:.././hal/sam3u1c/inc/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1178:.././hal/sam3u1c/inc/core_cm3.h **** #endif
1179:.././hal/sam3u1c/inc/core_cm3.h **** 
1180:.././hal/sam3u1c/inc/core_cm3.h **** /*@} */
1181:.././hal/sam3u1c/inc/core_cm3.h **** 
1182:.././hal/sam3u1c/inc/core_cm3.h **** 
1183:.././hal/sam3u1c/inc/core_cm3.h **** 
1184:.././hal/sam3u1c/inc/core_cm3.h **** /*******************************************************************************
1185:.././hal/sam3u1c/inc/core_cm3.h ****  *                Hardware Abstraction Layer
1186:.././hal/sam3u1c/inc/core_cm3.h ****   Core Function Interface contains:
1187:.././hal/sam3u1c/inc/core_cm3.h ****   - Core NVIC Functions
1188:.././hal/sam3u1c/inc/core_cm3.h ****   - Core SysTick Functions
1189:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Debug Functions
1190:.././hal/sam3u1c/inc/core_cm3.h ****   - Core Register Access Functions
1191:.././hal/sam3u1c/inc/core_cm3.h ****  ******************************************************************************/
1192:.././hal/sam3u1c/inc/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1193:.././hal/sam3u1c/inc/core_cm3.h **** */
1194:.././hal/sam3u1c/inc/core_cm3.h **** 
1195:.././hal/sam3u1c/inc/core_cm3.h **** 
1196:.././hal/sam3u1c/inc/core_cm3.h **** 
1197:.././hal/sam3u1c/inc/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1198:.././hal/sam3u1c/inc/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1199:.././hal/sam3u1c/inc/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1200:.././hal/sam3u1c/inc/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1201:.././hal/sam3u1c/inc/core_cm3.h ****     @{
1202:.././hal/sam3u1c/inc/core_cm3.h ****  */
1203:.././hal/sam3u1c/inc/core_cm3.h **** 
1204:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Priority Grouping
1205:.././hal/sam3u1c/inc/core_cm3.h **** 
1206:.././hal/sam3u1c/inc/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1207:.././hal/sam3u1c/inc/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1208:.././hal/sam3u1c/inc/core_cm3.h ****   Only values from 0..7 are used.
1209:.././hal/sam3u1c/inc/core_cm3.h ****   In case of a conflict between priority grouping and available
1210:.././hal/sam3u1c/inc/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1211:.././hal/sam3u1c/inc/core_cm3.h **** 
1212:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1213:.././hal/sam3u1c/inc/core_cm3.h ****  */
1214:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1215:.././hal/sam3u1c/inc/core_cm3.h **** {
1216:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t reg_value;
1217:.././hal/sam3u1c/inc/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1218:.././hal/sam3u1c/inc/core_cm3.h **** 
1219:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1220:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1221:.././hal/sam3u1c/inc/core_cm3.h ****   reg_value  =  (reg_value                                 |
1222:.././hal/sam3u1c/inc/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1223:.././hal/sam3u1c/inc/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1224:.././hal/sam3u1c/inc/core_cm3.h ****   SCB->AIRCR =  reg_value;
1225:.././hal/sam3u1c/inc/core_cm3.h **** }
1226:.././hal/sam3u1c/inc/core_cm3.h **** 
1227:.././hal/sam3u1c/inc/core_cm3.h **** 
1228:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Priority Grouping
1229:.././hal/sam3u1c/inc/core_cm3.h **** 
1230:.././hal/sam3u1c/inc/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1231:.././hal/sam3u1c/inc/core_cm3.h **** 
1232:.././hal/sam3u1c/inc/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1233:.././hal/sam3u1c/inc/core_cm3.h ****  */
1234:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1235:.././hal/sam3u1c/inc/core_cm3.h **** {
1236:.././hal/sam3u1c/inc/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1237:.././hal/sam3u1c/inc/core_cm3.h **** }
1238:.././hal/sam3u1c/inc/core_cm3.h **** 
1239:.././hal/sam3u1c/inc/core_cm3.h **** 
1240:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Enable External Interrupt
1241:.././hal/sam3u1c/inc/core_cm3.h **** 
1242:.././hal/sam3u1c/inc/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1243:.././hal/sam3u1c/inc/core_cm3.h **** 
1244:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1245:.././hal/sam3u1c/inc/core_cm3.h ****  */
1246:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1247:.././hal/sam3u1c/inc/core_cm3.h **** {
  26              	 .loc 1 1247 1
  27              	 .cfi_startproc
  28              	 
  29              	 
  30              	 
  31 0000 80B4     	 push {r7}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 4
  34              	 .cfi_offset 7,-4
  35 0002 83B0     	 sub sp,sp,#12
  36              	.LCFI1:
  37              	 .cfi_def_cfa_offset 16
  38 0004 00AF     	 add r7,sp,#0
  39              	.LCFI2:
  40              	 .cfi_def_cfa_register 7
  41 0006 0346     	 mov r3,r0
  42 0008 FB71     	 strb r3,[r7,#7]
1248:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
  43              	 .loc 1 1248 65
  44 000a FB79     	 ldrb r3,[r7,#7]
  45 000c 03F01F03 	 and r3,r3,#31
  46              	 .loc 1 1248 44
  47 0010 0122     	 movs r2,#1
  48 0012 02FA03F1 	 lsl r1,r2,r3
  49              	 .loc 1 1248 7
  50 0016 054A     	 ldr r2,.L2
  51              	 .loc 1 1248 15
  52 0018 97F90730 	 ldrsb r3,[r7,#7]
  53              	 .loc 1 1248 32
  54 001c 5B09     	 lsrs r3,r3,#5
  55              	 .loc 1 1248 39
  56 001e 42F82310 	 str r1,[r2,r3,lsl#2]
1249:.././hal/sam3u1c/inc/core_cm3.h **** }
  57              	 .loc 1 1249 1
  58 0022 00BF     	 nop
  59 0024 0C37     	 adds r7,r7,#12
  60              	.LCFI3:
  61              	 .cfi_def_cfa_offset 4
  62 0026 BD46     	 mov sp,r7
  63              	.LCFI4:
  64              	 .cfi_def_cfa_register 13
  65              	 
  66 0028 80BC     	 pop {r7}
  67              	.LCFI5:
  68              	 .cfi_restore 7
  69              	 .cfi_def_cfa_offset 0
  70 002a 7047     	 bx lr
  71              	.L3:
  72              	 .align 2
  73              	.L2:
  74 002c 00E100E0 	 .word -536813312
  75              	 .cfi_endproc
  76              	.LFE41:
  78              	 .section .text.NVIC_ClearPendingIRQ,"ax",%progbits
  79              	 .align 1
  80              	 .syntax unified
  81              	 .thumb
  82              	 .thumb_func
  83              	 .fpu softvfp
  85              	NVIC_ClearPendingIRQ:
  86              	.LFB45:
1250:.././hal/sam3u1c/inc/core_cm3.h **** 
1251:.././hal/sam3u1c/inc/core_cm3.h **** 
1252:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Disable External Interrupt
1253:.././hal/sam3u1c/inc/core_cm3.h **** 
1254:.././hal/sam3u1c/inc/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1255:.././hal/sam3u1c/inc/core_cm3.h **** 
1256:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1257:.././hal/sam3u1c/inc/core_cm3.h ****  */
1258:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1259:.././hal/sam3u1c/inc/core_cm3.h **** {
1260:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1261:.././hal/sam3u1c/inc/core_cm3.h **** }
1262:.././hal/sam3u1c/inc/core_cm3.h **** 
1263:.././hal/sam3u1c/inc/core_cm3.h **** 
1264:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Pending Interrupt
1265:.././hal/sam3u1c/inc/core_cm3.h **** 
1266:.././hal/sam3u1c/inc/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1267:.././hal/sam3u1c/inc/core_cm3.h ****     for the specified interrupt.
1268:.././hal/sam3u1c/inc/core_cm3.h **** 
1269:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1270:.././hal/sam3u1c/inc/core_cm3.h ****     
1271:.././hal/sam3u1c/inc/core_cm3.h ****     \return             0  Interrupt status is not pending.
1272:.././hal/sam3u1c/inc/core_cm3.h ****     \return             1  Interrupt status is pending.
1273:.././hal/sam3u1c/inc/core_cm3.h ****  */
1274:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1275:.././hal/sam3u1c/inc/core_cm3.h **** {
1276:.././hal/sam3u1c/inc/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1277:.././hal/sam3u1c/inc/core_cm3.h **** }
1278:.././hal/sam3u1c/inc/core_cm3.h **** 
1279:.././hal/sam3u1c/inc/core_cm3.h **** 
1280:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Pending Interrupt
1281:.././hal/sam3u1c/inc/core_cm3.h **** 
1282:.././hal/sam3u1c/inc/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1283:.././hal/sam3u1c/inc/core_cm3.h **** 
1284:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1285:.././hal/sam3u1c/inc/core_cm3.h ****  */
1286:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1287:.././hal/sam3u1c/inc/core_cm3.h **** {
1288:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1289:.././hal/sam3u1c/inc/core_cm3.h **** }
1290:.././hal/sam3u1c/inc/core_cm3.h **** 
1291:.././hal/sam3u1c/inc/core_cm3.h **** 
1292:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Clear Pending Interrupt
1293:.././hal/sam3u1c/inc/core_cm3.h **** 
1294:.././hal/sam3u1c/inc/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1295:.././hal/sam3u1c/inc/core_cm3.h **** 
1296:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1297:.././hal/sam3u1c/inc/core_cm3.h ****  */
1298:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1299:.././hal/sam3u1c/inc/core_cm3.h **** {
  87              	 .loc 1 1299 1
  88              	 .cfi_startproc
  89              	 
  90              	 
  91              	 
  92 0000 80B4     	 push {r7}
  93              	.LCFI6:
  94              	 .cfi_def_cfa_offset 4
  95              	 .cfi_offset 7,-4
  96 0002 83B0     	 sub sp,sp,#12
  97              	.LCFI7:
  98              	 .cfi_def_cfa_offset 16
  99 0004 00AF     	 add r7,sp,#0
 100              	.LCFI8:
 101              	 .cfi_def_cfa_register 7
 102 0006 0346     	 mov r3,r0
 103 0008 FB71     	 strb r3,[r7,#7]
1300:.././hal/sam3u1c/inc/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 104              	 .loc 1 1300 65
 105 000a FB79     	 ldrb r3,[r7,#7]
 106 000c 03F01F03 	 and r3,r3,#31
 107              	 .loc 1 1300 44
 108 0010 0122     	 movs r2,#1
 109 0012 02FA03F1 	 lsl r1,r2,r3
 110              	 .loc 1 1300 7
 111 0016 064A     	 ldr r2,.L5
 112              	 .loc 1 1300 15
 113 0018 97F90730 	 ldrsb r3,[r7,#7]
 114              	 .loc 1 1300 32
 115 001c 5B09     	 lsrs r3,r3,#5
 116              	 .loc 1 1300 39
 117 001e 6033     	 adds r3,r3,#96
 118 0020 42F82310 	 str r1,[r2,r3,lsl#2]
1301:.././hal/sam3u1c/inc/core_cm3.h **** }
 119              	 .loc 1 1301 1
 120 0024 00BF     	 nop
 121 0026 0C37     	 adds r7,r7,#12
 122              	.LCFI9:
 123              	 .cfi_def_cfa_offset 4
 124 0028 BD46     	 mov sp,r7
 125              	.LCFI10:
 126              	 .cfi_def_cfa_register 13
 127              	 
 128 002a 80BC     	 pop {r7}
 129              	.LCFI11:
 130              	 .cfi_restore 7
 131              	 .cfi_def_cfa_offset 0
 132 002c 7047     	 bx lr
 133              	.L6:
 134 002e 00BF     	 .align 2
 135              	.L5:
 136 0030 00E100E0 	 .word -536813312
 137              	 .cfi_endproc
 138              	.LFE45:
 140              	 .section .text.NVIC_SetPriority,"ax",%progbits
 141              	 .align 1
 142              	 .syntax unified
 143              	 .thumb
 144              	 .thumb_func
 145              	 .fpu softvfp
 147              	NVIC_SetPriority:
 148              	.LFB47:
1302:.././hal/sam3u1c/inc/core_cm3.h **** 
1303:.././hal/sam3u1c/inc/core_cm3.h **** 
1304:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Get Active Interrupt
1305:.././hal/sam3u1c/inc/core_cm3.h **** 
1306:.././hal/sam3u1c/inc/core_cm3.h ****     The function reads the active register in NVIC and returns the active bit.
1307:.././hal/sam3u1c/inc/core_cm3.h ****     
1308:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1309:.././hal/sam3u1c/inc/core_cm3.h ****     
1310:.././hal/sam3u1c/inc/core_cm3.h ****     \return             0  Interrupt status is not active.
1311:.././hal/sam3u1c/inc/core_cm3.h ****     \return             1  Interrupt status is active.
1312:.././hal/sam3u1c/inc/core_cm3.h ****  */
1313:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1314:.././hal/sam3u1c/inc/core_cm3.h **** {
1315:.././hal/sam3u1c/inc/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1316:.././hal/sam3u1c/inc/core_cm3.h **** }
1317:.././hal/sam3u1c/inc/core_cm3.h **** 
1318:.././hal/sam3u1c/inc/core_cm3.h **** 
1319:.././hal/sam3u1c/inc/core_cm3.h **** /** \brief  Set Interrupt Priority
1320:.././hal/sam3u1c/inc/core_cm3.h **** 
1321:.././hal/sam3u1c/inc/core_cm3.h ****     The function sets the priority of an interrupt. 
1322:.././hal/sam3u1c/inc/core_cm3.h **** 
1323:.././hal/sam3u1c/inc/core_cm3.h ****     \note The priority cannot be set for every core interrupt.
1324:.././hal/sam3u1c/inc/core_cm3.h **** 
1325:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]      IRQn  Interrupt number. 
1326:.././hal/sam3u1c/inc/core_cm3.h ****     \param [in]  priority  Priority to set.
1327:.././hal/sam3u1c/inc/core_cm3.h ****  */
1328:.././hal/sam3u1c/inc/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1329:.././hal/sam3u1c/inc/core_cm3.h **** {
 149              	 .loc 1 1329 1
 150              	 .cfi_startproc
 151              	 
 152              	 
 153              	 
 154 0000 80B4     	 push {r7}
 155              	.LCFI12:
 156              	 .cfi_def_cfa_offset 4
 157              	 .cfi_offset 7,-4
 158 0002 83B0     	 sub sp,sp,#12
 159              	.LCFI13:
 160              	 .cfi_def_cfa_offset 16
 161 0004 00AF     	 add r7,sp,#0
 162              	.LCFI14:
 163              	 .cfi_def_cfa_register 7
 164 0006 0346     	 mov r3,r0
 165 0008 3960     	 str r1,[r7]
 166 000a FB71     	 strb r3,[r7,#7]
1330:.././hal/sam3u1c/inc/core_cm3.h ****   if(IRQn < 0) {
 167              	 .loc 1 1330 5
 168 000c 97F90730 	 ldrsb r3,[r7,#7]
 169 0010 002B     	 cmp r3,#0
 170 0012 0BDA     	 bge .L8
1331:.././hal/sam3u1c/inc/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 171              	 .loc 1 1331 55
 172 0014 3B68     	 ldr r3,[r7]
 173 0016 DAB2     	 uxtb r2,r3
 174              	 .loc 1 1331 8
 175 0018 0C49     	 ldr r1,.L11
 176              	 .loc 1 1331 32
 177 001a FB79     	 ldrb r3,[r7,#7]
 178 001c 03F00F03 	 and r3,r3,#15
 179              	 .loc 1 1331 38
 180 0020 043B     	 subs r3,r3,#4
 181              	 .loc 1 1331 55
 182 0022 1201     	 lsls r2,r2,#4
 183 0024 D2B2     	 uxtb r2,r2
 184              	 .loc 1 1331 42
 185 0026 0B44     	 add r3,r3,r1
 186 0028 1A76     	 strb r2,[r3,#24]
1332:.././hal/sam3u1c/inc/core_cm3.h ****   else {
1333:.././hal/sam3u1c/inc/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1334:.././hal/sam3u1c/inc/core_cm3.h **** }
 187              	 .loc 1 1334 1
 188 002a 09E0     	 b .L10
 189              	.L8:
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 190              	 .loc 1 1333 45
 191 002c 3B68     	 ldr r3,[r7]
 192 002e DAB2     	 uxtb r2,r3
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 193              	 .loc 1 1333 9
 194 0030 0749     	 ldr r1,.L11+4
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 195              	 .loc 1 1333 14
 196 0032 97F90730 	 ldrsb r3,[r7,#7]
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 197              	 .loc 1 1333 45
 198 0036 1201     	 lsls r2,r2,#4
 199 0038 D2B2     	 uxtb r2,r2
1333:.././hal/sam3u1c/inc/core_cm3.h **** }
 200              	 .loc 1 1333 32
 201 003a 0B44     	 add r3,r3,r1
 202 003c 83F80023 	 strb r2,[r3,#768]
 203              	.L10:
 204              	 .loc 1 1334 1
 205 0040 00BF     	 nop
 206 0042 0C37     	 adds r7,r7,#12
 207              	.LCFI15:
 208              	 .cfi_def_cfa_offset 4
 209 0044 BD46     	 mov sp,r7
 210              	.LCFI16:
 211              	 .cfi_def_cfa_register 13
 212              	 
 213 0046 80BC     	 pop {r7}
 214              	.LCFI17:
 215              	 .cfi_restore 7
 216              	 .cfi_def_cfa_offset 0
 217 0048 7047     	 bx lr
 218              	.L12:
 219 004a 00BF     	 .align 2
 220              	.L11:
 221 004c 00ED00E0 	 .word -536810240
 222 0050 00E100E0 	 .word -536813312
 223              	 .cfi_endproc
 224              	.LFE47:
 226              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
 227              	 .align 2
 230              	cpu_irq_critical_section_counter:
 231 0000 00000000 	 .space 4
 232              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
 235              	cpu_irq_prev_interrupt_state:
 236 0000 00       	 .space 1
 237              	 .section .text.osc_get_rate,"ax",%progbits
 238              	 .align 1
 239              	 .syntax unified
 240              	 .thumb
 241              	 .thumb_func
 242              	 .fpu softvfp
 244              	osc_get_rate:
 245              	.LFB72:
 246              	 .file 2 ".././hal/sam3u1c/inc/sam3u/osc.h"
   1:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \brief Chip-specific oscillator management functions.
   5:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  44:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/osc.h **** #define CHIP_OSC_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  47:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "board.h"
  48:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "pmc.h"
  49:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  50:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/sam3u/osc.h **** extern "C" {
  54:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  55:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @endcond
  57:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  58:.././hal/sam3u1c/inc/sam3u/osc.h **** /*
  59:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Below BOARD_XXX macros are related to the specific board, and
  60:.././hal/sam3u1c/inc/sam3u/osc.h ****  * should be defined by the board code, otherwise default value are used.
  61:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  62:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_XTAL)
  63:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock xtal frequency has not been defined.
  64:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_XTAL      (32768UL)
  65:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  66:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  67:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_BYPASS)
  68:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock bypass frequency has not been defined.
  69:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_BYPASS    (32768UL)
  70:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  71:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  72:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_XTAL)
  73:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal frequency has not been defined.
  74:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_XTAL    (12000000UL)
  75:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  76:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  77:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_BYPASS)
  78:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock bypass frequency has not been defined.
  79:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_BYPASS  (12000000UL)
  80:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  81:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  82:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_OSC_STARTUP_US)
  83:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal startup time has not been defined.
  84:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_OSC_STARTUP_US      (15625UL)
  85:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  86:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  87:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
  88:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \weakgroup osc_group
  89:.././hal/sam3u1c/inc/sam3u/osc.h ****  * @{
  90:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  91:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  92:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator identifiers
  93:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
  94:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC             0    //!< Internal 32kHz RC oscillator.
  95:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL           1    //!< External 32kHz crystal oscillator.
  96:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS         2    //!< External 32kHz bypass oscillator.
  97:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC            3    //!< Internal 4MHz RC oscillator.
  98:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC            4    //!< Internal 8MHz RC oscillator.
  99:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC           5    //!< Internal 12MHz RC oscillator.
 100:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL             6    //!< External crystal oscillator.
 101:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS           7    //!< External bypass oscillator.
 102:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 103:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 104:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator clock speed in hertz
 105:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
 106:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC_HZ          CHIP_FREQ_SLCK_RC               //!< Internal 32kHz RC oscillat
 107:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL_HZ        BOARD_FREQ_SLCK_XTAL            //!< External 32kHz crystal osc
 108:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS_HZ      BOARD_FREQ_SLCK_BYPASS          //!< External 32kHz bypass osci
 109:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC_HZ         CHIP_FREQ_MAINCK_RC_4MHZ        //!< Internal 4MHz RC oscillato
 110:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC_HZ         CHIP_FREQ_MAINCK_RC_8MHZ        //!< Internal 8MHz RC oscillato
 111:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC_HZ        CHIP_FREQ_MAINCK_RC_12MHZ       //!< Internal 12MHz RC oscillat
 112:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillato
 113:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator
 114:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 115:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 116:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_enable(uint32_t ul_id)
 117:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 118:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 119:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 121:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 122:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 123:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
 124:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 125:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 127:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
 128:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 129:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 130:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 131:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 132:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
 133:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 134:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 135:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 136:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
 137:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 138:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 139:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 140:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
 141:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 142:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 143:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 144:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 145:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
 146:.././hal/sam3u1c/inc/sam3u/osc.h **** 				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
 147:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 148:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 149:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 150:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_bypass_main_xtal();
 151:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 152:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 153:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 154:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 155:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_disable(uint32_t ul_id)
 156:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 157:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 158:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 159:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 160:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 161:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 162:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 163:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 164:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 165:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 166:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_fastrc();
 167:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 168:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 169:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 170:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_XTAL);
 171:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 172:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 173:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 174:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_BYPASS);
 175:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 176:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 177:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 178:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 179:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline bool osc_is_ready(uint32_t ul_id)
 180:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 181:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 182:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 183:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return 1;
 184:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 185:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 186:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 187:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_32kxtal();
 188:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 189:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 190:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 191:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 192:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_fastrc();
 193:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 194:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 195:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 196:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_main_xtal();
 197:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 198:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 199:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 200:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 201:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 202:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline uint32_t osc_get_rate(uint32_t ul_id)
 203:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 247              	 .loc 2 203 1
 248              	 .cfi_startproc
 249              	 
 250              	 
 251              	 
 252 0000 80B4     	 push {r7}
 253              	.LCFI18:
 254              	 .cfi_def_cfa_offset 4
 255              	 .cfi_offset 7,-4
 256 0002 83B0     	 sub sp,sp,#12
 257              	.LCFI19:
 258              	 .cfi_def_cfa_offset 16
 259 0004 00AF     	 add r7,sp,#0
 260              	.LCFI20:
 261              	 .cfi_def_cfa_register 7
 262 0006 7860     	 str r0,[r7,#4]
 263 0008 7B68     	 ldr r3,[r7,#4]
 264 000a 072B     	 cmp r3,#7
 265 000c 23D8     	 bhi .L14
 266 000e 01A2     	 adr r2,.L16
 267 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 268              	 .p2align 2
 269              	.L16:
 270 0014 35000000 	 .word .L23+1
 271 0018 3B000000 	 .word .L22+1
 272 001c 3F000000 	 .word .L21+1
 273 0020 43000000 	 .word .L20+1
 274 0024 47000000 	 .word .L19+1
 275 0028 4B000000 	 .word .L18+1
 276 002c 4F000000 	 .word .L17+1
 277 0030 53000000 	 .word .L15+1
 278              	 .p2align 1
 279              	.L23:
 204:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 205:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 206:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_SLCK_32K_RC_HZ;
 280              	 .loc 2 206 10
 281 0034 4FF4FA43 	 mov r3,#32000
 282 0038 0EE0     	 b .L24
 283              	.L22:
 207:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 208:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 209:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_XTAL;
 284              	 .loc 2 209 10
 285 003a 0023     	 movs r3,#0
 286 003c 0CE0     	 b .L24
 287              	.L21:
 210:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 211:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 212:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_BYPASS;
 288              	 .loc 2 212 10
 289 003e 0023     	 movs r3,#0
 290 0040 0AE0     	 b .L24
 291              	.L20:
 213:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 214:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 215:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_4M_RC_HZ;
 292              	 .loc 2 215 10
 293 0042 084B     	 ldr r3,.L25
 294 0044 08E0     	 b .L24
 295              	.L19:
 216:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 217:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 218:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_8M_RC_HZ;
 296              	 .loc 2 218 10
 297 0046 084B     	 ldr r3,.L25+4
 298 0048 06E0     	 b .L24
 299              	.L18:
 219:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 220:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 221:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_12M_RC_HZ;
 300              	 .loc 2 221 10
 301 004a 084B     	 ldr r3,.L25+8
 302 004c 04E0     	 b .L24
 303              	.L17:
 222:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 223:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 224:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_XTAL;
 304              	 .loc 2 224 10
 305 004e 074B     	 ldr r3,.L25+8
 306 0050 02E0     	 b .L24
 307              	.L15:
 225:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 226:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 227:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_BYPASS;
 308              	 .loc 2 227 10
 309 0052 064B     	 ldr r3,.L25+8
 310 0054 00E0     	 b .L24
 311              	.L14:
 228:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 229:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 230:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 312              	 .loc 2 230 9
 313 0056 0023     	 movs r3,#0
 314              	.L24:
 231:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 315              	 .loc 2 231 1
 316 0058 1846     	 mov r0,r3
 317 005a 0C37     	 adds r7,r7,#12
 318              	.LCFI21:
 319              	 .cfi_def_cfa_offset 4
 320 005c BD46     	 mov sp,r7
 321              	.LCFI22:
 322              	 .cfi_def_cfa_register 13
 323              	 
 324 005e 80BC     	 pop {r7}
 325              	.LCFI23:
 326              	 .cfi_restore 7
 327              	 .cfi_def_cfa_offset 0
 328 0060 7047     	 bx lr
 329              	.L26:
 330 0062 00BF     	 .align 2
 331              	.L25:
 332 0064 00093D00 	 .word 4000000
 333 0068 00127A00 	 .word 8000000
 334 006c 001BB700 	 .word 12000000
 335              	 .cfi_endproc
 336              	.LFE72:
 338              	 .section .text.sysclk_get_main_hz,"ax",%progbits
 339              	 .align 1
 340              	 .syntax unified
 341              	 .thumb
 342              	 .thumb_func
 343              	 .fpu softvfp
 345              	sysclk_get_main_hz:
 346              	.LFB83:
 347              	 .file 3 ".././hal/sam3u1c/inc/sam3u/sysclk.h"
   1:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Chip-specific system clock management functions.
   5:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Copyright (c) 2011 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  44:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CHIP_SYSCLK_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define CHIP_SYSCLK_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  47:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #include <osc.h>
  48:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #include <pll.h>
  49:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  50:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
  51:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \page sysclk_quickstart Quick Start Guide for the System Clock Management service (SAM3U)
  52:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  53:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This is the quick start guide for the \ref sysclk_group "System Clock Management"
  54:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * service, with step-by-step instructions on how to configure and use the service for
  55:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * specific use cases.
  56:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  57:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \section sysclk_quickstart_usecases System Clock Management use cases
  58:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * - \ref sysclk_quickstart_basic
  59:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  60:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \section sysclk_quickstart_basic Basic usage of the System Clock Management service
  61:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This section will present a basic use case for the System Clock Management service.
  62:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This use case will configure the main system clock to 96MHz, using an internal PLL
  63:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * module to multiply the frequency of a crystal attached to the microcontroller.
  64:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  65:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_prereq Prerequisites
  66:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  - None
  67:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  68:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_setup_steps Initialization code
  69:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Add to the application initialization code:
  70:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \code
  71:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	sysclk_init();
  72:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
  73:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  74:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_setup_steps_workflow Workflow
  75:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * -# Configure the system clocks according to the settings in conf_clock.h:
  76:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \code sysclk_init(); \endcode
  77:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  78:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_example_code Example code
  79:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   Add or uncomment the following in your conf_clock.h header file, commenting out all other
  80:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   definitions of the same symbol(s):
  81:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code
  82:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_SYSCLK_SOURCE        SYSCLK_SRC_PLLACK
  83:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  84:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   // Fpll0 = (Fclk * PLL_mul) / PLL_div
  85:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_SOURCE          PLL_SRC_MAINCK_XTAL
  86:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_MUL             (96000000UL / BOARD_FREQ_MAINCK_XTAL)
  87:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_DIV             1
  88:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  89:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   // Fbus = Fsys / BUS_div
  90:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_SYSCLK_PRES          SYSCLK_PRES_1
  91:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
  92:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  93:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_example_workflow Workflow
  94:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the main system clock to use the output of the PLL module as its source:
  95:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code #define CONFIG_SYSCLK_SOURCE          SYSCLK_SRC_PLLACK \endcode
  96:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the PLL module to use the fast external fast crystal oscillator as its source:
  97:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code #define CONFIG_PLL0_SOURCE            PLL_SRC_MAINCK_XTAL \endcode
  98:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the PLL module to multiply the external fast crystal oscillator frequency up to 96
  99:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code
 100:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_PLL0_MUL             (96000000UL / BOARD_FREQ_MAINCK_XTAL)
 101:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_PLL0_DIV             1
 102:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
 103:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \note For user boards, \c BOARD_FREQ_MAINCK_XTAL should be defined in the board \c conf_board.
 104:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *         file as the frequency of the fast crystal attached to the microcontroller.
 105:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the main clock to run at the full 96MHz, disable scaling of the main system clock 
 106:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \code
 107:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_SYSCLK_PRES         SYSCLK_PRES_1
 108:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
 109:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \note Some dividers are powers of two, while others are integer division factors. Refer to th
 110:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *          formulas in the conf_clock.h template commented above each division define.
 111:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 112:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 113:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /// @cond 0
 114:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**INDENT-OFF**/
 115:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __cplusplus
 116:.././hal/sam3u1c/inc/sam3u/sysclk.h **** extern "C" {
 117:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 118:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**INDENT-ON**/
 119:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /// @endcond
 120:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 121:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 122:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \weakgroup sysclk_group
 123:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * @{
 124:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 125:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 126:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Configuration Symbols
 127:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 128:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 129:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_SYSCLK_SOURCE
 130:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Initial/static main system clock source
 131:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 132:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The main system clock will be configured to use this clock during
 133:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * initialization.
 134:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 135:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CONFIG_SYSCLK_SOURCE
 136:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_SYSCLK_SOURCE   SYSCLK_SRC_MAINCK_4M_RC
 137:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 138:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 139:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_SYSCLK_PRES
 140:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Initial CPU clock divider (mck)
 141:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 142:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The MCK will run at
 143:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \f[
 144:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   f_{MCK} = \frac{f_{sys}}{\mathrm{CONFIG\_SYSCLK\_PRES}}\,\mbox{Hz}
 145:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \f]
 146:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * after initialization.
 147:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 148:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CONFIG_SYSCLK_PRES
 149:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_SYSCLK_PRES  0
 150:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 151:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 152:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 153:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 154:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Master Clock Sources (MCK)
 155:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 156:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_RC              0       //!< Internal 32kHz RC oscillator as master source 
 157:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_XTAL            1       //!< External 32kHz crystal oscillator as master so
 158:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_BYPASS          2       //!< External 32kHz bypass oscillator as master sou
 159:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_4M_RC         3       //!< Internal 4MHz RC oscillator as master source c
 160:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_8M_RC         4       //!< Internal 8MHz RC oscillator as master source c
 161:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_12M_RC        5       //!< Internal 12MHz RC oscillator as master source 
 162:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_XTAL          6       //!< External crystal oscillator as master source c
 163:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_BYPASS        7       //!< External bypass oscillator as master source cl
 164:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_PLLACK               8       //!< Use PLLACK as master source clock
 165:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_UPLLCK               9       //!< Use UPLLCK as master source clock
 166:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 167:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 168:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Master Clock Prescalers (MCK)
 169:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 170:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_1           PMC_MCKR_PRES_CLK_1     //!< Set master clock prescaler to 1
 171:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_2           PMC_MCKR_PRES_CLK_2     //!< Set master clock prescaler to 2
 172:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_4           PMC_MCKR_PRES_CLK_4     //!< Set master clock prescaler to 4
 173:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_8           PMC_MCKR_PRES_CLK_8     //!< Set master clock prescaler to 8
 174:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_16          PMC_MCKR_PRES_CLK_16    //!< Set master clock prescaler to 16
 175:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_32          PMC_MCKR_PRES_CLK_32    //!< Set master clock prescaler to 32
 176:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_64          PMC_MCKR_PRES_CLK_64    //!< Set master clock prescaler to 64
 177:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_3           PMC_MCKR_PRES_CLK_3     //!< Set master clock prescaler to 3
 178:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 179:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 180:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 181:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_USBCLK_SOURCE
 182:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Configuration symbol for the USB generic clock source
 183:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 184:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Sets the clock source to use for the USB. The source must also be properly
 185:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configured.
 186:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 187:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Define this to one of the \c USBCLK_SRC_xxx settings. Leave it undefined if
 188:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * USB is not required.
 189:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 190:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __DOXYGEN__
 191:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_USBCLK_SOURCE
 192:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 193:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 194:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 195:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_USBCLK_DIV
 196:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Configuration symbol for the USB generic clock divider setting
 197:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 198:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Sets the clock division for the USB generic clock. If a USB clock source is
 199:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * selected with CONFIG_USBCLK_SOURCE, this configuration symbol must also be
 200:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * defined.
 201:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 202:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __DOXYGEN__
 203:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_USBCLK_DIV
 204:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 205:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 206:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 207:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \name Querying the system clock
 208:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 209:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The following functions may be used to query the current frequency of
 210:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * the system clock and the CPU and bus clocks derived from it.
 211:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * sysclk_get_main_hz() and sysclk_get_cpu_hz() can be assumed to be
 212:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * available on all platforms, although some platforms may define
 213:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * additional accessors for various chip-internal bus clocks. These are
 214:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * usually not intended to be queried directly by generic code.
 215:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 216:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 217:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 218:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 219:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 220:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 221:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \todo This function assumes that the main clock source never changes
 222:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * once it's been set up, and that PLL0 always runs at the compile-time
 223:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configured default rate. While this is probably the most common
 224:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configuration, which we want to support as a special case for
 225:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * performance reasons, we will at some point need to support more
 226:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * dynamic setups as well.
 227:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 228:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 229:.././hal/sam3u1c/inc/sam3u/sysclk.h **** extern uint32_t sysclk_initialized;
 230:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 231:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 232:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 348              	 .loc 3 232 1
 349              	 .cfi_startproc
 350              	 
 351              	 
 352 0000 80B5     	 push {r7,lr}
 353              	.LCFI24:
 354              	 .cfi_def_cfa_offset 8
 355              	 .cfi_offset 7,-8
 356              	 .cfi_offset 14,-4
 357 0002 00AF     	 add r7,sp,#0
 358              	.LCFI25:
 359              	 .cfi_def_cfa_register 7
 233:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 234:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	if (!sysclk_initialized ) {
 235:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 236:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 237:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 238:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 239:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* Config system clock setting */
 240:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_RC) {
 241:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_RC_HZ;
 242:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_XTAL) {
 243:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_XTAL_HZ;
 244:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_BYPASS) {
 245:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_BYPASS_HZ;
 246:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_4M_RC) {
 247:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 248:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_8M_RC) {
 249:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_8M_RC_HZ;
 250:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_12M_RC) {
 251:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_12M_RC_HZ;
 252:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_XTAL) {
 253:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_XTAL_HZ;
 254:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
 255:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_BYPASS_HZ;
 256:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 257:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef CONFIG_PLL0_SOURCE
 258:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
 259:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return pll_get_default_rate(0);
 360              	 .loc 3 259 10
 361 0004 0620     	 movs r0,#6
 362 0006 034B     	 ldr r3,.L29
 363 0008 9847     	 blx r3
 364              	.LVL0:
 365 000a 0346     	 mov r3,r0
 366 000c 1B01     	 lsls r3,r3,#4
 260:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 261:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 262:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 263:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef CONFIG_PLL1_SOURCE
 264:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_UPLLCK) {
 265:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return PLL_UPLL_HZ;
 266:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 267:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 268:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else {
 269:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
 270:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return 0;
 271:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 272:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 367              	 .loc 3 272 1
 368 000e 1846     	 mov r0,r3
 369 0010 80BD     	 pop {r7,pc}
 370              	.L30:
 371 0012 00BF     	 .align 2
 372              	.L29:
 373 0014 00000000 	 .word osc_get_rate
 374              	 .cfi_endproc
 375              	.LFE83:
 377              	 .section .text.sysclk_get_cpu_hz,"ax",%progbits
 378              	 .align 1
 379              	 .syntax unified
 380              	 .thumb
 381              	 .thumb_func
 382              	 .fpu softvfp
 384              	sysclk_get_cpu_hz:
 385              	.LFB84:
 273:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 274:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 275:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Return the current rate in Hz of the CPU clock
 276:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 277:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \todo This function assumes that the CPU always runs at the system
 278:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clock frequency. We want to support at least two more scenarios:
 279:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Fixed CPU/bus clock dividers (config symbols) and dynamic CPU/bus
 280:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clock dividers (which may change at run time). Ditto for all the bus
 281:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clocks.
 282:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 283:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \return Frequency of the CPU clock, in Hz.
 284:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 285:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_cpu_hz(void)
 286:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 386              	 .loc 3 286 1
 387              	 .cfi_startproc
 388              	 
 389              	 
 390 0000 80B5     	 push {r7,lr}
 391              	.LCFI26:
 392              	 .cfi_def_cfa_offset 8
 393              	 .cfi_offset 7,-8
 394              	 .cfi_offset 14,-4
 395 0002 00AF     	 add r7,sp,#0
 396              	.LCFI27:
 397              	 .cfi_def_cfa_register 7
 287:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
 288:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* prescaler, not an immediate value. */
 289:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	return sysclk_get_main_hz() /
 398              	 .loc 3 289 9
 399 0004 024B     	 ldr r3,.L33
 400 0006 9847     	 blx r3
 401              	.LVL1:
 402 0008 0346     	 mov r3,r0
 403              	 .loc 3 289 30
 404 000a 5B08     	 lsrs r3,r3,#1
 290:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
 291:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
 292:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 405              	 .loc 3 292 1
 406 000c 1846     	 mov r0,r3
 407 000e 80BD     	 pop {r7,pc}
 408              	.L34:
 409              	 .align 2
 410              	.L33:
 411 0010 00000000 	 .word sysclk_get_main_hz
 412              	 .cfi_endproc
 413              	.LFE84:
 415              	 .section .text.sysclk_enable_peripheral_clock,"ax",%progbits
 416              	 .align 1
 417              	 .syntax unified
 418              	 .thumb
 419              	 .thumb_func
 420              	 .fpu softvfp
 422              	sysclk_enable_peripheral_clock:
 423              	.LFB87:
 293:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 294:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 295:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Retrieves the current rate in Hz of the peripheral clocks.
 296:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 297:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \return Frequency of the peripheral clocks, in Hz.
 298:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 299:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_peripheral_hz(void)
 300:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 301:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
 302:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* prescaler, not an immediate value. */
 303:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	return sysclk_get_main_hz() /
 304:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
 305:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
 306:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 307:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 308:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 309:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Retrieves the current rate in Hz of the Peripheral Bus clock attached
 310:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *        to the specified peripheral.
 311:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 312:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \param module Pointer to the module's base address.
 313:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 314:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \return Frequency of the bus attached to the specified peripheral, in Hz.
 315:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 316:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_peripheral_bus_hz(const volatile void *module)
 317:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 318:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	UNUSED(module);
 319:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	return sysclk_get_peripheral_hz();
 320:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 321:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 322:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 323:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Enabling and disabling synchronous clocks
 324:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 325:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 326:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 327:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Enable a peripheral's clock.
 328:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 329:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \param ul_id Id (number) of the peripheral clock.
 330:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 331:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
 332:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 424              	 .loc 3 332 1
 425              	 .cfi_startproc
 426              	 
 427              	 
 428 0000 80B5     	 push {r7,lr}
 429              	.LCFI28:
 430              	 .cfi_def_cfa_offset 8
 431              	 .cfi_offset 7,-8
 432              	 .cfi_offset 14,-4
 433 0002 82B0     	 sub sp,sp,#8
 434              	.LCFI29:
 435              	 .cfi_def_cfa_offset 16
 436 0004 00AF     	 add r7,sp,#0
 437              	.LCFI30:
 438              	 .cfi_def_cfa_register 7
 439 0006 7860     	 str r0,[r7,#4]
 333:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	pmc_enable_periph_clk(ul_id);
 440              	 .loc 3 333 2
 441 0008 7868     	 ldr r0,[r7,#4]
 442 000a 034B     	 ldr r3,.L36
 443 000c 9847     	 blx r3
 444              	.LVL2:
 334:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 445              	 .loc 3 334 1
 446 000e 00BF     	 nop
 447 0010 0837     	 adds r7,r7,#8
 448              	.LCFI31:
 449              	 .cfi_def_cfa_offset 8
 450 0012 BD46     	 mov sp,r7
 451              	.LCFI32:
 452              	 .cfi_def_cfa_register 13
 453              	 
 454 0014 80BD     	 pop {r7,pc}
 455              	.L37:
 456 0016 00BF     	 .align 2
 457              	.L36:
 458 0018 00000000 	 .word pmc_enable_periph_clk
 459              	 .cfi_endproc
 460              	.LFE87:
 462              	 .comm rx0buf,140,4
 463              	 .comm tx0buf,140,4
 464              	 .comm rx1buf,140,4
 465              	 .comm tx1buf,140,4
 466              	 .comm rx2buf,140,4
 467              	 .comm tx2buf,140,4
 468              	 .comm rx3buf,140,4
 469              	 .comm tx3buf,140,4
 470              	 .section .text.usart0_enableIO,"ax",%progbits
 471              	 .align 1
 472              	 .syntax unified
 473              	 .thumb
 474              	 .thumb_func
 475              	 .fpu softvfp
 477              	usart0_enableIO:
 478              	.LFB181:
 479              	 .file 4 "usart_driver.c"
   1:usart_driver.c **** /*
   2:usart_driver.c ****  * Copyright (c) 2014-2015 NewAE Technology Inc.
   3:usart_driver.c ****  * All rights reserved.
   4:usart_driver.c ****  *
   5:usart_driver.c ****  * Based on code from FIP, the Flexible IP Stack.
   6:usart_driver.c ****  *
   7:usart_driver.c ****  * Redistribution and use in source and binary forms, with or without modification,
   8:usart_driver.c ****  * are permitted provided that the following conditions are met:
   9:usart_driver.c ****  *
  10:usart_driver.c ****  * * Redistributions of source code must retain the above copyright notice, this list
  11:usart_driver.c ****  *   of conditions and the following disclaimer.
  12:usart_driver.c ****  *
  13:usart_driver.c ****  * * Redistributions in binary form must reproduce the above copyright notice, this
  14:usart_driver.c ****  *   list of conditions and the following disclaimer in the documentation and/or other
  15:usart_driver.c ****  *   materials provided with the distribution.
  16:usart_driver.c ****  *
  17:usart_driver.c ****  * * Neither the name of the author nor the names of its contributors may be
  18:usart_driver.c ****  *   used to endorse or promote products derived from this software without specific
  19:usart_driver.c ****  *   prior written permission.
  20:usart_driver.c ****  *
  21:usart_driver.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
  22:usart_driver.c ****  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  23:usart_driver.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  24:usart_driver.c ****  * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  25:usart_driver.c ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
  26:usart_driver.c ****  * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
  27:usart_driver.c ****  * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:usart_driver.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  29:usart_driver.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
  30:usart_driver.c ****  * DAMAGE.
  31:usart_driver.c ****  */
  32:usart_driver.c **** 
  33:usart_driver.c **** #include <asf.h>
  34:usart_driver.c **** #include <cw521.h>
  35:usart_driver.c **** #include "circbuffer.h"
  36:usart_driver.c **** #include "usart_driver.h"
  37:usart_driver.c **** #include "usart.h"
  38:usart_driver.c **** 
  39:usart_driver.c **** 
  40:usart_driver.c **** #define USART_WVREQ_INIT    0x0010
  41:usart_driver.c **** #define USART_WVREQ_ENABLE  0x0011
  42:usart_driver.c **** #define USART_WVREQ_DISABLE 0x0012
  43:usart_driver.c **** #define USART_WVREQ_NUMWAIT 0x0014
  44:usart_driver.c **** #define USART_WVREQ_NUMWAIT_TX 0x0018
  45:usart_driver.c **** #define PIN_USART0_RXD	         (PIO_PA19_IDX)
  46:usart_driver.c **** #define PIN_USART0_RXD_FLAGS      (PIO_PERIPH_A | PIO_DEFAULT)
  47:usart_driver.c **** #define PIN_USART0_TXD	        (PIO_PA18_IDX)
  48:usart_driver.c **** #define PIN_USART0_TXD_FLAGS      (PIO_PERIPH_A | PIO_DEFAULT)
  49:usart_driver.c **** 
  50:usart_driver.c **** #define word2buf(buf, word)   do{buf[0] = LSB0W(word); buf[1] = LSB1W(word); buf[2] = LSB2W(word); 
  51:usart_driver.c **** #define buf2word(word, buf)   do{word = *((uint32_t *)buf);}while (0)
  52:usart_driver.c **** 	
  53:usart_driver.c **** //TODO: Improve this by using the following array instead of hard-coded hacks
  54:usart_driver.c **** /*	
  55:usart_driver.c **** typedef struct {
  56:usart_driver.c **** 	Usart * usart;
  57:usart_driver.c **** 	sam_usart_opt_t usartopts;
  58:usart_driver.c **** 	tcirc_buf rxbuf;
  59:usart_driver.c **** 	tcirc_buf txbuf;
  60:usart_driver.c **** 	int usart_id;
  61:usart_driver.c **** } usart_driver_t;
  62:usart_driver.c **** 	
  63:usart_driver.c **** #define NUM_USARTS 3
  64:usart_driver.c **** 
  65:usart_driver.c **** usart_driver_t usarts[NUM_USARTS];
  66:usart_driver.c **** */
  67:usart_driver.c **** 	
  68:usart_driver.c **** tcirc_buf rx0buf, tx0buf;
  69:usart_driver.c **** tcirc_buf rx1buf, tx1buf;
  70:usart_driver.c **** tcirc_buf rx2buf, tx2buf;
  71:usart_driver.c **** tcirc_buf rx3buf, tx3buf;
  72:usart_driver.c **** 
  73:usart_driver.c **** static inline void usart0_enableIO(void)
  74:usart_driver.c **** {
 480              	 .loc 4 74 1
 481              	 .cfi_startproc
 482              	 
 483              	 
 484 0000 80B5     	 push {r7,lr}
 485              	.LCFI33:
 486              	 .cfi_def_cfa_offset 8
 487              	 .cfi_offset 7,-8
 488              	 .cfi_offset 14,-4
 489 0002 00AF     	 add r7,sp,#0
 490              	.LCFI34:
 491              	 .cfi_def_cfa_register 7
  75:usart_driver.c **** 	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
 492              	 .loc 4 75 2
 493 0004 4FF00061 	 mov r1,#134217728
 494 0008 1320     	 movs r0,#19
 495 000a 044B     	 ldr r3,.L39
 496 000c 9847     	 blx r3
 497              	.LVL3:
  76:usart_driver.c **** 	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
 498              	 .loc 4 76 2
 499 000e 4FF00061 	 mov r1,#134217728
 500 0012 1220     	 movs r0,#18
 501 0014 014B     	 ldr r3,.L39
 502 0016 9847     	 blx r3
 503              	.LVL4:
  77:usart_driver.c **** }
 504              	 .loc 4 77 1
 505 0018 00BF     	 nop
 506 001a 80BD     	 pop {r7,pc}
 507              	.L40:
 508              	 .align 2
 509              	.L39:
 510 001c 00000000 	 .word pio_configure_pin
 511              	 .cfi_endproc
 512              	.LFE181:
 514              	 .section .rodata
 515              	 .align 2
 516              	.LC0:
 517 0000 456E6162 	 .ascii "Enabling USART0\012\000"
 517      6C696E67 
 517      20555341 
 517      5254300A 
 517      00
 518 0011 000000   	 .align 2
 519              	.LC1:
 520 0014 4552523A 	 .ascii "ERR: Invalid USART Configuration packet?\012\000"
 520      20496E76 
 520      616C6964 
 520      20555341 
 520      52542043 
 521              	 .section .text.ctrl_usart,"ax",%progbits
 522              	 .align 1
 523              	 .global ctrl_usart
 524              	 .syntax unified
 525              	 .thumb
 526              	 .thumb_func
 527              	 .fpu softvfp
 529              	ctrl_usart:
 530              	.LFB182:
  78:usart_driver.c **** 
  79:usart_driver.c **** #define usart1_enableIO() do{;}while(0)
  80:usart_driver.c **** #define usart2_enableIO() do{;}while(0)
  81:usart_driver.c **** 	
  82:usart_driver.c **** #ifdef USART3
  83:usart_driver.c **** static inline void usart3_enableIO(void)
  84:usart_driver.c **** {
  85:usart_driver.c **** 	gpio_configure_pin(PIN_USART3_RXD, PIN_USART3_RXD_FLAGS);
  86:usart_driver.c **** 	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
  87:usart_driver.c **** }
  88:usart_driver.c **** #endif
  89:usart_driver.c **** 
  90:usart_driver.c **** bool ctrl_usart(Usart * usart, bool directionIn)
  91:usart_driver.c **** {
 531              	 .loc 4 91 1
 532              	 .cfi_startproc
 533              	 
 534              	 
 535 0000 80B5     	 push {r7,lr}
 536              	.LCFI35:
 537              	 .cfi_def_cfa_offset 8
 538              	 .cfi_offset 7,-8
 539              	 .cfi_offset 14,-4
 540 0002 8AB0     	 sub sp,sp,#40
 541              	.LCFI36:
 542              	 .cfi_def_cfa_offset 48
 543 0004 00AF     	 add r7,sp,#0
 544              	.LCFI37:
 545              	 .cfi_def_cfa_register 7
 546 0006 7860     	 str r0,[r7,#4]
 547 0008 0B46     	 mov r3,r1
 548 000a FB70     	 strb r3,[r7,#3]
  92:usart_driver.c **** 	uint32_t baud;
  93:usart_driver.c **** 	static uint8_t ctrlbuffer[16];
  94:usart_driver.c **** 	sam_usart_opt_t usartopts;
  95:usart_driver.c **** 	uint32_t cnt;
  96:usart_driver.c **** 			
  97:usart_driver.c **** 	
  98:usart_driver.c **** 	/*
  99:usart_driver.c **** 	
 100:usart_driver.c **** 	Info block same as CDC:
 101:usart_driver.c **** 	
 102:usart_driver.c **** 	uint32_t 	dwDTERate //Baud rate
 103:usart_driver.c **** 	uint8_t 	bCharFormat //Stop bits: 0=1, 1=1.5, 2=2
 104:usart_driver.c **** 	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
 105:usart_driver.c **** 	uint8_t 	bDataBits //Data bits 5,6,7,8
 106:usart_driver.c **** 	
 107:usart_driver.c **** 	*/
 108:usart_driver.c **** 	
 109:usart_driver.c **** 	switch(udd_g_ctrlreq.req.wValue & 0xFF)
 549              	 .loc 4 109 26
 550 000c 994B     	 ldr r3,.L92
 551 000e 5B88     	 ldrh r3,[r3,#2]
 552              	 .loc 4 109 34
 553 0010 DBB2     	 uxtb r3,r3
 554 0012 103B     	 subs r3,r3,#16
 555 0014 082B     	 cmp r3,#8
 556 0016 00F2CB81 	 bhi .L42
 557 001a 01A2     	 adr r2,.L44
 558 001c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 559              	 .p2align 2
 560              	.L44:
 561 0020 45000000 	 .word .L48+1
 562 0024 9D010000 	 .word .L47+1
 563 0028 1F020000 	 .word .L46+1
 564 002c B1030000 	 .word .L42+1
 565 0030 43020000 	 .word .L45+1
 566 0034 B1030000 	 .word .L42+1
 567 0038 B1030000 	 .word .L42+1
 568 003c B1030000 	 .word .L42+1
 569 0040 2B030000 	 .word .L43+1
 570              	 .p2align 1
 571              	.L48:
 110:usart_driver.c **** 	{
 111:usart_driver.c **** 		case USART_WVREQ_INIT:
 112:usart_driver.c **** 			if (directionIn){
 572              	 .loc 4 112 7
 573 0044 FB78     	 ldrb r3,[r7,#3]
 574 0046 002B     	 cmp r3,#0
 575 0048 06D0     	 beq .L49
 113:usart_driver.c **** 				if (udd_g_ctrlreq.req.wLength == 4){
 576              	 .loc 4 113 26
 577 004a 8A4B     	 ldr r3,.L92
 578 004c DB88     	 ldrh r3,[r3,#6]
 579              	 .loc 4 113 8
 580 004e 042B     	 cmp r3,#4
 581 0050 40F0A581 	 bne .L87
 114:usart_driver.c **** 					/*
 115:usart_driver.c **** 					udd_g_ctrlreq.payload_size = 4;
 116:usart_driver.c **** 					udd_g_ctrlreq.payload = ctrlbuffer;
 117:usart_driver.c **** 					word2buf(ctrlbuffer, baud);
 118:usart_driver.c **** 					*/
 119:usart_driver.c **** 					return true;
 582              	 .loc 4 119 13
 583 0054 0123     	 movs r3,#1
 584 0056 ACE1     	 b .L86
 585              	.L49:
 120:usart_driver.c **** 				}
 121:usart_driver.c **** 			} else {	
 122:usart_driver.c **** 					if (udd_g_ctrlreq.req.wLength == 7) 
 586              	 .loc 4 122 27
 587 0058 864B     	 ldr r3,.L92
 588 005a DB88     	 ldrh r3,[r3,#6]
 589              	 .loc 4 122 9
 590 005c 072B     	 cmp r3,#7
 591 005e 40F09980 	 bne .L52
 123:usart_driver.c **** 						{
 124:usart_driver.c **** 					
 125:usart_driver.c **** 						buf2word(baud, udd_g_ctrlreq.payload);	
 592              	 .loc 4 125 7
 593 0062 844B     	 ldr r3,.L92
 594 0064 9B68     	 ldr r3,[r3,#8]
 595 0066 1B68     	 ldr r3,[r3]
 596 0068 7B62     	 str r3,[r7,#36]
 126:usart_driver.c **** 					
 127:usart_driver.c **** 						usartopts.baudrate = baud;
 597              	 .loc 4 127 26
 598 006a 7B6A     	 ldr r3,[r7,#36]
 599 006c FB60     	 str r3,[r7,#12]
 128:usart_driver.c **** 						
 129:usart_driver.c **** 						/* Stop Bits */
 130:usart_driver.c **** 						switch(udd_g_ctrlreq.payload[4])
 600              	 .loc 4 130 27
 601 006e 814B     	 ldr r3,.L92
 602 0070 9B68     	 ldr r3,[r3,#8]
 603              	 .loc 4 130 35
 604 0072 0433     	 adds r3,r3,#4
 605 0074 1B78     	 ldrb r3,[r3]
 606 0076 022B     	 cmp r3,#2
 607 0078 0DD0     	 beq .L53
 608 007a 022B     	 cmp r3,#2
 609 007c 0FDC     	 bgt .L54
 610 007e 002B     	 cmp r3,#0
 611 0080 02D0     	 beq .L55
 612 0082 012B     	 cmp r3,#1
 613 0084 03D0     	 beq .L56
 614 0086 0AE0     	 b .L54
 615              	.L55:
 131:usart_driver.c **** 							{
 132:usart_driver.c **** 							case 0:
 133:usart_driver.c **** 								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
 616              	 .loc 4 133 29
 617 0088 0023     	 movs r3,#0
 618 008a BB61     	 str r3,[r7,#24]
 134:usart_driver.c **** 								break;
 619              	 .loc 4 134 9
 620 008c 09E0     	 b .L57
 621              	.L56:
 135:usart_driver.c **** 							case 1:
 136:usart_driver.c **** 								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
 622              	 .loc 4 136 29
 623 008e 4FF48053 	 mov r3,#4096
 624 0092 BB61     	 str r3,[r7,#24]
 137:usart_driver.c **** 								break;
 625              	 .loc 4 137 9
 626 0094 05E0     	 b .L57
 627              	.L53:
 138:usart_driver.c **** 							case 2:
 139:usart_driver.c **** 								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
 628              	 .loc 4 139 29
 629 0096 4FF40053 	 mov r3,#8192
 630 009a BB61     	 str r3,[r7,#24]
 140:usart_driver.c **** 								break;
 631              	 .loc 4 140 9
 632 009c 01E0     	 b .L57
 633              	.L54:
 141:usart_driver.c **** 							default:
 142:usart_driver.c **** 								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
 634              	 .loc 4 142 29
 635 009e 0023     	 movs r3,#0
 636 00a0 BB61     	 str r3,[r7,#24]
 637              	.L57:
 143:usart_driver.c **** 							}
 144:usart_driver.c **** 					
 145:usart_driver.c **** 						/* Parity */
 146:usart_driver.c **** 						switch(udd_g_ctrlreq.payload[5])
 638              	 .loc 4 146 27
 639 00a2 744B     	 ldr r3,.L92
 640 00a4 9B68     	 ldr r3,[r3,#8]
 641              	 .loc 4 146 35
 642 00a6 0533     	 adds r3,r3,#5
 643 00a8 1B78     	 ldrb r3,[r3]
 644 00aa 042B     	 cmp r3,#4
 645 00ac 1FD8     	 bhi .L58
 646 00ae 01A2     	 adr r2,.L60
 647 00b0 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 648              	 .p2align 2
 649              	.L60:
 650 00b4 C9000000 	 .word .L64+1
 651 00b8 D1000000 	 .word .L63+1
 652 00bc D9000000 	 .word .L62+1
 653 00c0 DF000000 	 .word .L61+1
 654 00c4 E7000000 	 .word .L59+1
 655              	 .p2align 1
 656              	.L64:
 147:usart_driver.c **** 							{
 148:usart_driver.c **** 							case 0:
 149:usart_driver.c **** 								usartopts.parity_type = US_MR_PAR_NO;
 657              	 .loc 4 149 31
 658 00c8 4FF40063 	 mov r3,#2048
 659 00cc 7B61     	 str r3,[r7,#20]
 150:usart_driver.c **** 								break;
 660              	 .loc 4 150 9
 661 00ce 11E0     	 b .L65
 662              	.L63:
 151:usart_driver.c **** 							case 1:
 152:usart_driver.c **** 								usartopts.parity_type = US_MR_PAR_ODD;
 663              	 .loc 4 152 31
 664 00d0 4FF40073 	 mov r3,#512
 665 00d4 7B61     	 str r3,[r7,#20]
 153:usart_driver.c **** 								break;
 666              	 .loc 4 153 9
 667 00d6 0DE0     	 b .L65
 668              	.L62:
 154:usart_driver.c **** 							case 2:
 155:usart_driver.c **** 								usartopts.parity_type = US_MR_PAR_EVEN;
 669              	 .loc 4 155 31
 670 00d8 0023     	 movs r3,#0
 671 00da 7B61     	 str r3,[r7,#20]
 156:usart_driver.c **** 								break;
 672              	 .loc 4 156 9
 673 00dc 0AE0     	 b .L65
 674              	.L61:
 157:usart_driver.c **** 							case 3:
 158:usart_driver.c **** 								usartopts.parity_type = US_MR_PAR_MARK;
 675              	 .loc 4 158 31
 676 00de 4FF4C063 	 mov r3,#1536
 677 00e2 7B61     	 str r3,[r7,#20]
 159:usart_driver.c **** 								break;
 678              	 .loc 4 159 9
 679 00e4 06E0     	 b .L65
 680              	.L59:
 160:usart_driver.c **** 							case 4:
 161:usart_driver.c **** 								usartopts.parity_type = US_MR_PAR_SPACE;
 681              	 .loc 4 161 31
 682 00e6 4FF48063 	 mov r3,#1024
 683 00ea 7B61     	 str r3,[r7,#20]
 162:usart_driver.c **** 								break;							
 684              	 .loc 4 162 9
 685 00ec 02E0     	 b .L65
 686              	.L58:
 163:usart_driver.c **** 							default:
 164:usart_driver.c **** 								usartopts.parity_type = US_MR_PAR_NO;
 687              	 .loc 4 164 31
 688 00ee 4FF40063 	 mov r3,#2048
 689 00f2 7B61     	 str r3,[r7,#20]
 690              	.L65:
 165:usart_driver.c **** 							}
 166:usart_driver.c **** 					
 167:usart_driver.c **** 						/* Data Bits */
 168:usart_driver.c **** 						switch(udd_g_ctrlreq.payload[6])
 691              	 .loc 4 168 27
 692 00f4 5F4B     	 ldr r3,.L92
 693 00f6 9B68     	 ldr r3,[r3,#8]
 694              	 .loc 4 168 35
 695 00f8 0633     	 adds r3,r3,#6
 696 00fa 1B78     	 ldrb r3,[r3]
 697 00fc 072B     	 cmp r3,#7
 698 00fe 0CD0     	 beq .L66
 699 0100 072B     	 cmp r3,#7
 700 0102 0DDC     	 bgt .L67
 701 0104 052B     	 cmp r3,#5
 702 0106 02D0     	 beq .L68
 703 0108 062B     	 cmp r3,#6
 704 010a 03D0     	 beq .L69
 705 010c 08E0     	 b .L67
 706              	.L68:
 169:usart_driver.c **** 							{
 170:usart_driver.c **** 							case 5:
 171:usart_driver.c **** 								usartopts.char_length = US_MR_CHRL_5_BIT;
 707              	 .loc 4 171 31
 708 010e 0023     	 movs r3,#0
 709 0110 3B61     	 str r3,[r7,#16]
 172:usart_driver.c **** 								break;
 710              	 .loc 4 172 9
 711 0112 07E0     	 b .L70
 712              	.L69:
 173:usart_driver.c **** 							case 6:
 174:usart_driver.c **** 								usartopts.char_length = US_MR_CHRL_6_BIT;
 713              	 .loc 4 174 31
 714 0114 4023     	 movs r3,#64
 715 0116 3B61     	 str r3,[r7,#16]
 175:usart_driver.c **** 								break;
 716              	 .loc 4 175 9
 717 0118 04E0     	 b .L70
 718              	.L66:
 176:usart_driver.c **** 							case 7:
 177:usart_driver.c **** 								usartopts.char_length = US_MR_CHRL_7_BIT;
 719              	 .loc 4 177 31
 720 011a 8023     	 movs r3,#128
 721 011c 3B61     	 str r3,[r7,#16]
 178:usart_driver.c **** 								break;					
 722              	 .loc 4 178 9
 723 011e 01E0     	 b .L70
 724              	.L67:
 179:usart_driver.c **** 							case 8:							
 180:usart_driver.c **** 							default:
 181:usart_driver.c **** 								usartopts.char_length = US_MR_CHRL_8_BIT;
 725              	 .loc 4 181 31
 726 0120 C023     	 movs r3,#192
 727 0122 3B61     	 str r3,[r7,#16]
 728              	.L70:
 182:usart_driver.c **** 							}
 183:usart_driver.c **** 							
 184:usart_driver.c **** 						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
 729              	 .loc 4 184 30
 730 0124 0023     	 movs r3,#0
 731 0126 FB61     	 str r3,[r7,#28]
 185:usart_driver.c **** 
 186:usart_driver.c **** 						if (usart == USART0)
 732              	 .loc 4 186 10
 733 0128 7B68     	 ldr r3,[r7,#4]
 734 012a 534A     	 ldr r2,.L92+4
 735 012c 9342     	 cmp r3,r2
 736 012e 0CD1     	 bne .L71
 187:usart_driver.c **** 						{
 188:usart_driver.c **** 							sysclk_enable_peripheral_clock(ID_USART0);
 737              	 .loc 4 188 8
 738 0130 0D20     	 movs r0,#13
 739 0132 524B     	 ldr r3,.L92+8
 740 0134 9847     	 blx r3
 741              	.LVL5:
 189:usart_driver.c **** 							init_circ_buf(&tx0buf);
 742              	 .loc 4 189 8
 743 0136 5248     	 ldr r0,.L92+12
 744 0138 524B     	 ldr r3,.L92+16
 745 013a 9847     	 blx r3
 746              	.LVL6:
 190:usart_driver.c **** 							init_circ_buf(&rx0buf);
 747              	 .loc 4 190 8
 748 013c 5248     	 ldr r0,.L92+20
 749 013e 514B     	 ldr r3,.L92+16
 750 0140 9847     	 blx r3
 751              	.LVL7:
 191:usart_driver.c **** 							printf("Enabling USART0\n");
 752              	 .loc 4 191 8
 753 0142 5248     	 ldr r0,.L92+24
 754 0144 524B     	 ldr r3,.L92+28
 755 0146 9847     	 blx r3
 756              	.LVL8:
 757 0148 1AE0     	 b .L72
 758              	.L71:
 192:usart_driver.c **** 						} else if (usart == USART1)
 759              	 .loc 4 192 17
 760 014a 7B68     	 ldr r3,[r7,#4]
 761 014c 514A     	 ldr r2,.L92+32
 762 014e 9342     	 cmp r3,r2
 763 0150 09D1     	 bne .L73
 193:usart_driver.c **** 						{
 194:usart_driver.c **** 							sysclk_enable_peripheral_clock(ID_USART1);
 764              	 .loc 4 194 8
 765 0152 0E20     	 movs r0,#14
 766 0154 494B     	 ldr r3,.L92+8
 767 0156 9847     	 blx r3
 768              	.LVL9:
 195:usart_driver.c **** 							init_circ_buf(&tx1buf);
 769              	 .loc 4 195 8
 770 0158 4F48     	 ldr r0,.L92+36
 771 015a 4A4B     	 ldr r3,.L92+16
 772 015c 9847     	 blx r3
 773              	.LVL10:
 196:usart_driver.c **** 							init_circ_buf(&rx1buf);
 774              	 .loc 4 196 8
 775 015e 4F48     	 ldr r0,.L92+40
 776 0160 484B     	 ldr r3,.L92+16
 777 0162 9847     	 blx r3
 778              	.LVL11:
 779 0164 0CE0     	 b .L72
 780              	.L73:
 197:usart_driver.c **** 						} else if (usart == USART2)
 781              	 .loc 4 197 17
 782 0166 7B68     	 ldr r3,[r7,#4]
 783 0168 4D4A     	 ldr r2,.L92+44
 784 016a 9342     	 cmp r3,r2
 785 016c 08D1     	 bne .L72
 198:usart_driver.c **** 						{
 199:usart_driver.c **** 							sysclk_enable_peripheral_clock(ID_USART2);
 786              	 .loc 4 199 8
 787 016e 0F20     	 movs r0,#15
 788 0170 424B     	 ldr r3,.L92+8
 789 0172 9847     	 blx r3
 790              	.LVL12:
 200:usart_driver.c **** 							init_circ_buf(&tx2buf);
 791              	 .loc 4 200 8
 792 0174 4B48     	 ldr r0,.L92+48
 793 0176 434B     	 ldr r3,.L92+16
 794 0178 9847     	 blx r3
 795              	.LVL13:
 201:usart_driver.c **** 							init_circ_buf(&rx2buf);
 796              	 .loc 4 201 8
 797 017a 4B48     	 ldr r0,.L92+52
 798 017c 414B     	 ldr r3,.L92+16
 799 017e 9847     	 blx r3
 800              	.LVL14:
 801              	.L72:
 202:usart_driver.c **** 						}
 203:usart_driver.c **** #ifdef USART3
 204:usart_driver.c **** 						else if (usart == USART3)
 205:usart_driver.c **** 						{
 206:usart_driver.c **** 							sysclk_enable_peripheral_clock(ID_USART3);
 207:usart_driver.c **** 							init_circ_buf(&tx3buf);
 208:usart_driver.c **** 							init_circ_buf(&rx3buf);
 209:usart_driver.c **** 						}
 210:usart_driver.c **** #endif
 211:usart_driver.c **** 						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
 802              	 .loc 4 211 7
 803 0180 4A4B     	 ldr r3,.L92+56
 804 0182 9847     	 blx r3
 805              	.LVL15:
 806 0184 0246     	 mov r2,r0
 807 0186 07F10C03 	 add r3,r7,#12
 808 018a 1946     	 mov r1,r3
 809 018c 7868     	 ldr r0,[r7,#4]
 810 018e 484B     	 ldr r3,.L92+60
 811 0190 9847     	 blx r3
 812              	.LVL16:
 212:usart_driver.c **** 					} else {
 213:usart_driver.c **** 						printf("ERR: Invalid USART Configuration packet?\n");
 214:usart_driver.c **** 					}
 215:usart_driver.c **** 			}
 216:usart_driver.c **** 			break;
 813              	 .loc 4 216 4
 814 0192 04E1     	 b .L87
 815              	.L52:
 213:usart_driver.c **** 					}
 816              	 .loc 4 213 7
 817 0194 4748     	 ldr r0,.L92+64
 818 0196 3E4B     	 ldr r3,.L92+28
 819 0198 9847     	 blx r3
 820              	.LVL17:
 821              	 .loc 4 216 4
 822 019a 00E1     	 b .L87
 823              	.L47:
 217:usart_driver.c **** 			
 218:usart_driver.c **** 		case USART_WVREQ_ENABLE:
 219:usart_driver.c **** 			if (directionIn == false){
 824              	 .loc 4 219 20
 825 019c FB78     	 ldrb r3,[r7,#3]
 826 019e 83F00103 	 eor r3,r3,#1
 827 01a2 DBB2     	 uxtb r3,r3
 828              	 .loc 4 219 7
 829 01a4 002B     	 cmp r3,#0
 830 01a6 00F0FC80 	 beq .L88
 220:usart_driver.c **** 				usart_enable_rx(usart);
 831              	 .loc 4 220 5
 832 01aa 7868     	 ldr r0,[r7,#4]
 833 01ac 424B     	 ldr r3,.L92+68
 834 01ae 9847     	 blx r3
 835              	.LVL18:
 221:usart_driver.c **** 				usart_enable_tx(usart);
 836              	 .loc 4 221 5
 837 01b0 7868     	 ldr r0,[r7,#4]
 838 01b2 424B     	 ldr r3,.L92+72
 839 01b4 9847     	 blx r3
 840              	.LVL19:
 222:usart_driver.c **** 				
 223:usart_driver.c **** 				usart_enable_interrupt(usart, UART_IER_RXRDY);
 841              	 .loc 4 223 5
 842 01b6 0121     	 movs r1,#1
 843 01b8 7868     	 ldr r0,[r7,#4]
 844 01ba 414B     	 ldr r3,.L92+76
 845 01bc 9847     	 blx r3
 846              	.LVL20:
 224:usart_driver.c **** 				
 225:usart_driver.c **** 				/* Enable IO Pins */
 226:usart_driver.c **** 				if (usart == USART0){
 847              	 .loc 4 226 8
 848 01be 7B68     	 ldr r3,[r7,#4]
 849 01c0 2D4A     	 ldr r2,.L92+4
 850 01c2 9342     	 cmp r3,r2
 851 01c4 0CD1     	 bne .L75
 227:usart_driver.c **** 					usart0_enableIO();
 852              	 .loc 4 227 6
 853 01c6 3F4B     	 ldr r3,.L92+80
 854 01c8 9847     	 blx r3
 855              	.LVL21:
 228:usart_driver.c **** 					irq_register_handler(USART0_IRQn, 5);
 856              	 .loc 4 228 6
 857 01ca 0D20     	 movs r0,#13
 858 01cc 3E4B     	 ldr r3,.L92+84
 859 01ce 9847     	 blx r3
 860              	.LVL22:
 861 01d0 0521     	 movs r1,#5
 862 01d2 0D20     	 movs r0,#13
 863 01d4 3D4B     	 ldr r3,.L92+88
 864 01d6 9847     	 blx r3
 865              	.LVL23:
 866 01d8 0D20     	 movs r0,#13
 867 01da 3D4B     	 ldr r3,.L92+92
 868 01dc 9847     	 blx r3
 869              	.LVL24:
 229:usart_driver.c **** 				} else if (usart == USART1) {
 230:usart_driver.c **** 					usart1_enableIO();
 231:usart_driver.c **** 					irq_register_handler(USART1_IRQn, 5);
 232:usart_driver.c **** 				} else if (usart == USART2) {
 233:usart_driver.c **** 					usart2_enableIO();
 234:usart_driver.c **** 					irq_register_handler(USART2_IRQn, 5);
 235:usart_driver.c **** 				}
 236:usart_driver.c **** #ifdef USART3
 237:usart_driver.c **** 				else if (usart == USART3) {
 238:usart_driver.c **** 					usart3_enableIO();
 239:usart_driver.c **** 					irq_register_handler(USART3_IRQn, 5);
 240:usart_driver.c **** 				}
 241:usart_driver.c **** #endif
 242:usart_driver.c **** 			}
 243:usart_driver.c **** 			break;
 870              	 .loc 4 243 4
 871 01de E0E0     	 b .L88
 872              	.L75:
 229:usart_driver.c **** 				} else if (usart == USART1) {
 873              	 .loc 4 229 15
 874 01e0 7B68     	 ldr r3,[r7,#4]
 875 01e2 2C4A     	 ldr r2,.L92+32
 876 01e4 9342     	 cmp r3,r2
 877 01e6 0AD1     	 bne .L76
 231:usart_driver.c **** 				} else if (usart == USART2) {
 878              	 .loc 4 231 6
 879 01e8 0E20     	 movs r0,#14
 880 01ea 374B     	 ldr r3,.L92+84
 881 01ec 9847     	 blx r3
 882              	.LVL25:
 883 01ee 0521     	 movs r1,#5
 884 01f0 0E20     	 movs r0,#14
 885 01f2 364B     	 ldr r3,.L92+88
 886 01f4 9847     	 blx r3
 887              	.LVL26:
 888 01f6 0E20     	 movs r0,#14
 889 01f8 354B     	 ldr r3,.L92+92
 890 01fa 9847     	 blx r3
 891              	.LVL27:
 892              	 .loc 4 243 4
 893 01fc D1E0     	 b .L88
 894              	.L76:
 232:usart_driver.c **** 					usart2_enableIO();
 895              	 .loc 4 232 15
 896 01fe 7B68     	 ldr r3,[r7,#4]
 897 0200 274A     	 ldr r2,.L92+44
 898 0202 9342     	 cmp r3,r2
 899 0204 40F0CD80 	 bne .L88
 234:usart_driver.c **** 				}
 900              	 .loc 4 234 6
 901 0208 0F20     	 movs r0,#15
 902 020a 2F4B     	 ldr r3,.L92+84
 903 020c 9847     	 blx r3
 904              	.LVL28:
 905 020e 0521     	 movs r1,#5
 906 0210 0F20     	 movs r0,#15
 907 0212 2E4B     	 ldr r3,.L92+88
 908 0214 9847     	 blx r3
 909              	.LVL29:
 910 0216 0F20     	 movs r0,#15
 911 0218 2D4B     	 ldr r3,.L92+92
 912 021a 9847     	 blx r3
 913              	.LVL30:
 914              	 .loc 4 243 4
 915 021c C1E0     	 b .L88
 916              	.L46:
 244:usart_driver.c **** 						
 245:usart_driver.c **** 		case USART_WVREQ_DISABLE:
 246:usart_driver.c **** 			if (directionIn == false){
 917              	 .loc 4 246 20
 918 021e FB78     	 ldrb r3,[r7,#3]
 919 0220 83F00103 	 eor r3,r3,#1
 920 0224 DBB2     	 uxtb r3,r3
 921              	 .loc 4 246 7
 922 0226 002B     	 cmp r3,#0
 923 0228 00F0BD80 	 beq .L89
 247:usart_driver.c **** 				usart_disable_rx(usart);
 924              	 .loc 4 247 5
 925 022c 7868     	 ldr r0,[r7,#4]
 926 022e 294B     	 ldr r3,.L92+96
 927 0230 9847     	 blx r3
 928              	.LVL31:
 248:usart_driver.c **** 				usart_disable_rx(usart);
 929              	 .loc 4 248 5
 930 0232 7868     	 ldr r0,[r7,#4]
 931 0234 274B     	 ldr r3,.L92+96
 932 0236 9847     	 blx r3
 933              	.LVL32:
 249:usart_driver.c **** 				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
 934              	 .loc 4 249 5
 935 0238 0321     	 movs r1,#3
 936 023a 7868     	 ldr r0,[r7,#4]
 937 023c 264B     	 ldr r3,.L92+100
 938 023e 9847     	 blx r3
 939              	.LVL33:
 250:usart_driver.c **** 			}
 251:usart_driver.c **** 		
 252:usart_driver.c **** 			break;
 940              	 .loc 4 252 4
 941 0240 B1E0     	 b .L89
 942              	.L45:
 253:usart_driver.c **** 			
 254:usart_driver.c **** 		case USART_WVREQ_NUMWAIT:		
 255:usart_driver.c **** 			if (directionIn){
 943              	 .loc 4 255 7
 944 0242 FB78     	 ldrb r3,[r7,#3]
 945 0244 002B     	 cmp r3,#0
 946 0246 00F0B080 	 beq .L90
 256:usart_driver.c **** 				if (udd_g_ctrlreq.req.wLength == 4){
 947              	 .loc 4 256 26
 948 024a 0A4B     	 ldr r3,.L92
 949 024c DB88     	 ldrh r3,[r3,#6]
 950              	 .loc 4 256 8
 951 024e 042B     	 cmp r3,#4
 952 0250 40F0AB80 	 bne .L90
 257:usart_driver.c **** 		
 258:usart_driver.c **** 					udd_g_ctrlreq.payload = ctrlbuffer;
 953              	 .loc 4 258 28
 954 0254 074B     	 ldr r3,.L92
 955 0256 214A     	 ldr r2,.L92+104
 956 0258 9A60     	 str r2,[r3,#8]
 259:usart_driver.c **** 					udd_g_ctrlreq.payload_size = 4;
 957              	 .loc 4 259 33
 958 025a 064B     	 ldr r3,.L92
 959 025c 0422     	 movs r2,#4
 960 025e 9A81     	 strh r2,[r3,#12]
 260:usart_driver.c **** 
 261:usart_driver.c **** 					if (usart == USART0){
 961              	 .loc 4 261 9
 962 0260 7B68     	 ldr r3,[r7,#4]
 963 0262 054A     	 ldr r2,.L92+4
 964 0264 9342     	 cmp r3,r2
 965 0266 3DD1     	 bne .L79
 262:usart_driver.c **** 						cnt = circ_buf_count(&rx0buf);
 966              	 .loc 4 262 13
 967 0268 0748     	 ldr r0,.L92+20
 968 026a 1D4B     	 ldr r3,.L92+108
 969 026c 9847     	 blx r3
 970              	.LVL34:
 971 026e 0346     	 mov r3,r0
 972              	 .loc 4 262 11
 973 0270 BB60     	 str r3,[r7,#8]
 974 0272 4AE0     	 b .L80
 975              	.L93:
 976              	 .align 2
 977              	.L92:
 978 0274 00000000 	 .word udd_g_ctrlreq
 979 0278 00000940 	 .word 1074331648
 980 027c 00000000 	 .word sysclk_enable_peripheral_clock
 981 0280 00000000 	 .word tx0buf
 982 0284 00000000 	 .word init_circ_buf
 983 0288 00000000 	 .word rx0buf
 984 028c 00000000 	 .word .LC0
 985 0290 00000000 	 .word iprintf
 986 0294 00400940 	 .word 1074348032
 987 0298 00000000 	 .word tx1buf
 988 029c 00000000 	 .word rx1buf
 989 02a0 00800940 	 .word 1074364416
 990 02a4 00000000 	 .word tx2buf
 991 02a8 00000000 	 .word rx2buf
 992 02ac 00000000 	 .word sysclk_get_cpu_hz
 993 02b0 00000000 	 .word usart_init_rs232
 994 02b4 14000000 	 .word .LC1
 995 02b8 00000000 	 .word usart_enable_rx
 996 02bc 00000000 	 .word usart_enable_tx
 997 02c0 00000000 	 .word usart_enable_interrupt
 998 02c4 00000000 	 .word usart0_enableIO
 999 02c8 00000000 	 .word NVIC_ClearPendingIRQ
 1000 02cc 00000000 	 .word NVIC_SetPriority
 1001 02d0 00000000 	 .word NVIC_EnableIRQ
 1002 02d4 00000000 	 .word usart_disable_rx
 1003 02d8 00000000 	 .word usart_disable_interrupt
 1004 02dc 00000000 	 .word ctrlbuffer.8844
 1005 02e0 00000000 	 .word circ_buf_count
 1006              	.L79:
 263:usart_driver.c **** 					} else if (usart == USART1){
 1007              	 .loc 4 263 16
 1008 02e4 7B68     	 ldr r3,[r7,#4]
 1009 02e6 354A     	 ldr r2,.L94
 1010 02e8 9342     	 cmp r3,r2
 1011 02ea 05D1     	 bne .L81
 264:usart_driver.c **** 						cnt = circ_buf_count(&rx1buf);
 1012              	 .loc 4 264 13
 1013 02ec 3448     	 ldr r0,.L94+4
 1014 02ee 354B     	 ldr r3,.L94+8
 1015 02f0 9847     	 blx r3
 1016              	.LVL35:
 1017 02f2 0346     	 mov r3,r0
 1018              	 .loc 4 264 11
 1019 02f4 BB60     	 str r3,[r7,#8]
 1020 02f6 08E0     	 b .L80
 1021              	.L81:
 265:usart_driver.c **** 					} else if (usart == USART2){
 1022              	 .loc 4 265 16
 1023 02f8 7B68     	 ldr r3,[r7,#4]
 1024 02fa 334A     	 ldr r2,.L94+12
 1025 02fc 9342     	 cmp r3,r2
 1026 02fe 04D1     	 bne .L80
 266:usart_driver.c **** 						cnt = circ_buf_count(&rx2buf);
 1027              	 .loc 4 266 13
 1028 0300 3248     	 ldr r0,.L94+16
 1029 0302 304B     	 ldr r3,.L94+8
 1030 0304 9847     	 blx r3
 1031              	.LVL36:
 1032 0306 0346     	 mov r3,r0
 1033              	 .loc 4 266 11
 1034 0308 BB60     	 str r3,[r7,#8]
 1035              	.L80:
 267:usart_driver.c **** 					}
 268:usart_driver.c **** #ifdef USART3
 269:usart_driver.c **** 					else if (usart == USART3){
 270:usart_driver.c **** 						cnt = circ_buf_count(&rx3buf);
 271:usart_driver.c **** 					}			
 272:usart_driver.c **** #endif
 273:usart_driver.c **** 					
 274:usart_driver.c **** 					word2buf(ctrlbuffer, cnt);
 1036              	 .loc 4 274 6
 1037 030a 07F10803 	 add r3,r7,#8
 1038 030e 1A78     	 ldrb r2,[r3]
 1039 0310 2F4B     	 ldr r3,.L94+20
 1040 0312 1A70     	 strb r2,[r3]
 1041 0314 7A7A     	 ldrb r2,[r7,#9]
 1042 0316 2E4B     	 ldr r3,.L94+20
 1043 0318 5A70     	 strb r2,[r3,#1]
 1044 031a BA7A     	 ldrb r2,[r7,#10]
 1045 031c 2C4B     	 ldr r3,.L94+20
 1046 031e 9A70     	 strb r2,[r3,#2]
 1047 0320 FA7A     	 ldrb r2,[r7,#11]
 1048 0322 2B4B     	 ldr r3,.L94+20
 1049 0324 DA70     	 strb r2,[r3,#3]
 275:usart_driver.c **** 			
 276:usart_driver.c **** 					return true;
 1050              	 .loc 4 276 13
 1051 0326 0123     	 movs r3,#1
 1052 0328 43E0     	 b .L86
 1053              	.L43:
 277:usart_driver.c **** 				}
 278:usart_driver.c **** 			}
 279:usart_driver.c **** 			break;		
 280:usart_driver.c **** 		case USART_WVREQ_NUMWAIT_TX:		
 281:usart_driver.c **** 			if (directionIn){
 1054              	 .loc 4 281 7
 1055 032a FB78     	 ldrb r3,[r7,#3]
 1056 032c 002B     	 cmp r3,#0
 1057 032e 3ED0     	 beq .L91
 282:usart_driver.c **** 				if (udd_g_ctrlreq.req.wLength == 4){
 1058              	 .loc 4 282 26
 1059 0330 284B     	 ldr r3,.L94+24
 1060 0332 DB88     	 ldrh r3,[r3,#6]
 1061              	 .loc 4 282 8
 1062 0334 042B     	 cmp r3,#4
 1063 0336 3AD1     	 bne .L91
 283:usart_driver.c **** 		
 284:usart_driver.c **** 					udd_g_ctrlreq.payload = ctrlbuffer;
 1064              	 .loc 4 284 28
 1065 0338 264B     	 ldr r3,.L94+24
 1066 033a 254A     	 ldr r2,.L94+20
 1067 033c 9A60     	 str r2,[r3,#8]
 285:usart_driver.c **** 					udd_g_ctrlreq.payload_size = 4;
 1068              	 .loc 4 285 33
 1069 033e 254B     	 ldr r3,.L94+24
 1070 0340 0422     	 movs r2,#4
 1071 0342 9A81     	 strh r2,[r3,#12]
 286:usart_driver.c **** 
 287:usart_driver.c **** 					if (usart == USART0){
 1072              	 .loc 4 287 9
 1073 0344 7B68     	 ldr r3,[r7,#4]
 1074 0346 244A     	 ldr r2,.L94+28
 1075 0348 9342     	 cmp r3,r2
 1076 034a 05D1     	 bne .L83
 288:usart_driver.c **** 						cnt = circ_buf_count(&tx0buf);
 1077              	 .loc 4 288 13
 1078 034c 2348     	 ldr r0,.L94+32
 1079 034e 1D4B     	 ldr r3,.L94+8
 1080 0350 9847     	 blx r3
 1081              	.LVL37:
 1082 0352 0346     	 mov r3,r0
 1083              	 .loc 4 288 11
 1084 0354 BB60     	 str r3,[r7,#8]
 1085 0356 12E0     	 b .L84
 1086              	.L83:
 289:usart_driver.c **** 					} else if (usart == USART1){
 1087              	 .loc 4 289 16
 1088 0358 7B68     	 ldr r3,[r7,#4]
 1089 035a 184A     	 ldr r2,.L94
 1090 035c 9342     	 cmp r3,r2
 1091 035e 05D1     	 bne .L85
 290:usart_driver.c **** 						cnt = circ_buf_count(&tx1buf);
 1092              	 .loc 4 290 13
 1093 0360 1F48     	 ldr r0,.L94+36
 1094 0362 184B     	 ldr r3,.L94+8
 1095 0364 9847     	 blx r3
 1096              	.LVL38:
 1097 0366 0346     	 mov r3,r0
 1098              	 .loc 4 290 11
 1099 0368 BB60     	 str r3,[r7,#8]
 1100 036a 08E0     	 b .L84
 1101              	.L85:
 291:usart_driver.c **** 					} else if (usart == USART2){
 1102              	 .loc 4 291 16
 1103 036c 7B68     	 ldr r3,[r7,#4]
 1104 036e 164A     	 ldr r2,.L94+12
 1105 0370 9342     	 cmp r3,r2
 1106 0372 04D1     	 bne .L84
 292:usart_driver.c **** 						cnt = circ_buf_count(&tx2buf);
 1107              	 .loc 4 292 13
 1108 0374 1B48     	 ldr r0,.L94+40
 1109 0376 134B     	 ldr r3,.L94+8
 1110 0378 9847     	 blx r3
 1111              	.LVL39:
 1112 037a 0346     	 mov r3,r0
 1113              	 .loc 4 292 11
 1114 037c BB60     	 str r3,[r7,#8]
 1115              	.L84:
 293:usart_driver.c **** 					}
 294:usart_driver.c **** #ifdef USART3
 295:usart_driver.c **** 					else if (usart == USART3){
 296:usart_driver.c **** 						cnt = circ_buf_count(&tx3buf);
 297:usart_driver.c **** 					}			
 298:usart_driver.c **** #endif
 299:usart_driver.c **** 					
 300:usart_driver.c **** 					word2buf(ctrlbuffer, cnt);
 1116              	 .loc 4 300 6
 1117 037e 07F10803 	 add r3,r7,#8
 1118 0382 1A78     	 ldrb r2,[r3]
 1119 0384 124B     	 ldr r3,.L94+20
 1120 0386 1A70     	 strb r2,[r3]
 1121 0388 7A7A     	 ldrb r2,[r7,#9]
 1122 038a 114B     	 ldr r3,.L94+20
 1123 038c 5A70     	 strb r2,[r3,#1]
 1124 038e BA7A     	 ldrb r2,[r7,#10]
 1125 0390 0F4B     	 ldr r3,.L94+20
 1126 0392 9A70     	 strb r2,[r3,#2]
 1127 0394 FA7A     	 ldrb r2,[r7,#11]
 1128 0396 0E4B     	 ldr r3,.L94+20
 1129 0398 DA70     	 strb r2,[r3,#3]
 301:usart_driver.c **** 			
 302:usart_driver.c **** 					return true;
 1130              	 .loc 4 302 13
 1131 039a 0123     	 movs r3,#1
 1132 039c 09E0     	 b .L86
 1133              	.L87:
 216:usart_driver.c **** 			
 1134              	 .loc 4 216 4
 1135 039e 00BF     	 nop
 1136 03a0 06E0     	 b .L42
 1137              	.L88:
 243:usart_driver.c **** 						
 1138              	 .loc 4 243 4
 1139 03a2 00BF     	 nop
 1140 03a4 04E0     	 b .L42
 1141              	.L89:
 252:usart_driver.c **** 			
 1142              	 .loc 4 252 4
 1143 03a6 00BF     	 nop
 1144 03a8 02E0     	 b .L42
 1145              	.L90:
 279:usart_driver.c **** 		case USART_WVREQ_NUMWAIT_TX:		
 1146              	 .loc 4 279 4
 1147 03aa 00BF     	 nop
 1148 03ac 00E0     	 b .L42
 1149              	.L91:
 303:usart_driver.c **** 				}
 304:usart_driver.c **** 			}
 305:usart_driver.c **** 			break;		
 1150              	 .loc 4 305 4
 1151 03ae 00BF     	 nop
 1152              	.L42:
 306:usart_driver.c **** 	}
 307:usart_driver.c **** 	
 308:usart_driver.c **** 	return false;
 1153              	 .loc 4 308 9
 1154 03b0 0023     	 movs r3,#0
 1155              	.L86:
 309:usart_driver.c **** }
 1156              	 .loc 4 309 1 discriminator 2
 1157 03b2 1846     	 mov r0,r3
 1158 03b4 2837     	 adds r7,r7,#40
 1159              	.LCFI38:
 1160              	 .cfi_def_cfa_offset 8
 1161 03b6 BD46     	 mov sp,r7
 1162              	.LCFI39:
 1163              	 .cfi_def_cfa_register 13
 1164              	 
 1165 03b8 80BD     	 pop {r7,pc}
 1166              	.L95:
 1167 03ba 00BF     	 .align 2
 1168              	.L94:
 1169 03bc 00400940 	 .word 1074348032
 1170 03c0 00000000 	 .word rx1buf
 1171 03c4 00000000 	 .word circ_buf_count
 1172 03c8 00800940 	 .word 1074364416
 1173 03cc 00000000 	 .word rx2buf
 1174 03d0 00000000 	 .word ctrlbuffer.8844
 1175 03d4 00000000 	 .word udd_g_ctrlreq
 1176 03d8 00000940 	 .word 1074331648
 1177 03dc 00000000 	 .word tx0buf
 1178 03e0 00000000 	 .word tx1buf
 1179 03e4 00000000 	 .word tx2buf
 1180              	 .cfi_endproc
 1181              	.LFE182:
 1183              	 .section .text.usart_driver_putchar,"ax",%progbits
 1184              	 .align 1
 1185              	 .global usart_driver_putchar
 1186              	 .syntax unified
 1187              	 .thumb
 1188              	 .thumb_func
 1189              	 .fpu softvfp
 1191              	usart_driver_putchar:
 1192              	.LFB183:
 310:usart_driver.c **** 
 311:usart_driver.c **** void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
 312:usart_driver.c **** {
 1193              	 .loc 4 312 1
 1194              	 .cfi_startproc
 1195              	 
 1196              	 
 1197 0000 80B5     	 push {r7,lr}
 1198              	.LCFI40:
 1199              	 .cfi_def_cfa_offset 8
 1200              	 .cfi_offset 7,-8
 1201              	 .cfi_offset 14,-4
 1202 0002 84B0     	 sub sp,sp,#16
 1203              	.LCFI41:
 1204              	 .cfi_def_cfa_offset 24
 1205 0004 00AF     	 add r7,sp,#0
 1206              	.LCFI42:
 1207              	 .cfi_def_cfa_register 7
 1208 0006 F860     	 str r0,[r7,#12]
 1209 0008 B960     	 str r1,[r7,#8]
 1210 000a 1346     	 mov r3,r2
 1211 000c FB71     	 strb r3,[r7,#7]
 313:usart_driver.c **** 	if (txbuf == NULL){
 1212              	 .loc 4 313 5
 1213 000e BB68     	 ldr r3,[r7,#8]
 1214 0010 002B     	 cmp r3,#0
 1215 0012 13D1     	 bne .L97
 314:usart_driver.c **** 		if (usart == USART0) txbuf = &tx0buf;
 1216              	 .loc 4 314 6
 1217 0014 FB68     	 ldr r3,[r7,#12]
 1218 0016 194A     	 ldr r2,.L103
 1219 0018 9342     	 cmp r3,r2
 1220 001a 02D1     	 bne .L98
 1221              	 .loc 4 314 30 discriminator 1
 1222 001c 184B     	 ldr r3,.L103+4
 1223 001e BB60     	 str r3,[r7,#8]
 1224 0020 0CE0     	 b .L97
 1225              	.L98:
 315:usart_driver.c **** 		else if (usart == USART1) txbuf = &tx1buf;
 1226              	 .loc 4 315 11
 1227 0022 FB68     	 ldr r3,[r7,#12]
 1228 0024 174A     	 ldr r2,.L103+8
 1229 0026 9342     	 cmp r3,r2
 1230 0028 02D1     	 bne .L99
 1231              	 .loc 4 315 35 discriminator 1
 1232 002a 174B     	 ldr r3,.L103+12
 1233 002c BB60     	 str r3,[r7,#8]
 1234 002e 05E0     	 b .L97
 1235              	.L99:
 316:usart_driver.c **** 		else if (usart == USART2) txbuf = &tx2buf;
 1236              	 .loc 4 316 11
 1237 0030 FB68     	 ldr r3,[r7,#12]
 1238 0032 164A     	 ldr r2,.L103+16
 1239 0034 9342     	 cmp r3,r2
 1240 0036 1CD1     	 bne .L102
 1241              	 .loc 4 316 35 discriminator 1
 1242 0038 154B     	 ldr r3,.L103+20
 1243 003a BB60     	 str r3,[r7,#8]
 1244              	.L97:
 317:usart_driver.c **** #ifdef USART3
 318:usart_driver.c **** 		else if (usart == USART3) txbuf = &tx3buf;
 319:usart_driver.c **** #endif
 320:usart_driver.c **** 		else return;
 321:usart_driver.c **** 	}
 322:usart_driver.c **** 	
 323:usart_driver.c **** 	// Add byte to transmit buffer
 324:usart_driver.c **** 	add_to_circ_buf(txbuf, data, false);
 1245              	 .loc 4 324 2
 1246 003c FB79     	 ldrb r3,[r7,#7]
 1247 003e 0022     	 movs r2,#0
 1248 0040 1946     	 mov r1,r3
 1249 0042 B868     	 ldr r0,[r7,#8]
 1250 0044 134B     	 ldr r3,.L103+24
 1251 0046 9847     	 blx r3
 1252              	.LVL40:
 325:usart_driver.c **** 
 326:usart_driver.c **** 	// Send the first byte if nothing is yet being sent
 327:usart_driver.c **** 	// This is determined by seeing if the TX complete interrupt is
 328:usart_driver.c **** 	// enabled.
 329:usart_driver.c **** 	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
 1253              	 .loc 4 329 7
 1254 0048 F868     	 ldr r0,[r7,#12]
 1255 004a 134B     	 ldr r3,.L103+28
 1256 004c 9847     	 blx r3
 1257              	.LVL41:
 1258 004e 0346     	 mov r3,r0
 1259              	 .loc 4 329 39
 1260 0050 03F00203 	 and r3,r3,#2
 1261              	 .loc 4 329 5
 1262 0054 002B     	 cmp r3,#0
 1263 0056 0DD1     	 bne .L96
 330:usart_driver.c **** 		usart_putchar(usart, get_from_circ_buf(txbuf));
 1264              	 .loc 4 330 24
 1265 0058 B868     	 ldr r0,[r7,#8]
 1266 005a 104B     	 ldr r3,.L103+32
 1267 005c 9847     	 blx r3
 1268              	.LVL42:
 1269 005e 0346     	 mov r3,r0
 1270              	 .loc 4 330 3
 1271 0060 1946     	 mov r1,r3
 1272 0062 F868     	 ldr r0,[r7,#12]
 1273 0064 0E4B     	 ldr r3,.L103+36
 1274 0066 9847     	 blx r3
 1275              	.LVL43:
 331:usart_driver.c **** 		usart_enable_interrupt(usart, US_CSR_TXRDY);
 1276              	 .loc 4 331 3
 1277 0068 0221     	 movs r1,#2
 1278 006a F868     	 ldr r0,[r7,#12]
 1279 006c 0D4B     	 ldr r3,.L103+40
 1280 006e 9847     	 blx r3
 1281              	.LVL44:
 1282 0070 00E0     	 b .L96
 1283              	.L102:
 320:usart_driver.c **** 	}
 1284              	 .loc 4 320 8
 1285 0072 00BF     	 nop
 1286              	.L96:
 332:usart_driver.c **** 	}
 333:usart_driver.c **** }
 1287              	 .loc 4 333 1
 1288 0074 1037     	 adds r7,r7,#16
 1289              	.LCFI43:
 1290              	 .cfi_def_cfa_offset 8
 1291 0076 BD46     	 mov sp,r7
 1292              	.LCFI44:
 1293              	 .cfi_def_cfa_register 13
 1294              	 
 1295 0078 80BD     	 pop {r7,pc}
 1296              	.L104:
 1297 007a 00BF     	 .align 2
 1298              	.L103:
 1299 007c 00000940 	 .word 1074331648
 1300 0080 00000000 	 .word tx0buf
 1301 0084 00400940 	 .word 1074348032
 1302 0088 00000000 	 .word tx1buf
 1303 008c 00800940 	 .word 1074364416
 1304 0090 00000000 	 .word tx2buf
 1305 0094 00000000 	 .word add_to_circ_buf
 1306 0098 00000000 	 .word usart_get_interrupt_mask
 1307 009c 00000000 	 .word get_from_circ_buf
 1308 00a0 00000000 	 .word usart_putchar
 1309 00a4 00000000 	 .word usart_enable_interrupt
 1310              	 .cfi_endproc
 1311              	.LFE183:
 1313              	 .section .text.usart_driver_getchar,"ax",%progbits
 1314              	 .align 1
 1315              	 .global usart_driver_getchar
 1316              	 .syntax unified
 1317              	 .thumb
 1318              	 .thumb_func
 1319              	 .fpu softvfp
 1321              	usart_driver_getchar:
 1322              	.LFB184:
 334:usart_driver.c **** 
 335:usart_driver.c **** uint8_t usart_driver_getchar(Usart * usart)
 336:usart_driver.c **** {
 1323              	 .loc 4 336 1
 1324              	 .cfi_startproc
 1325              	 
 1326              	 
 1327 0000 80B5     	 push {r7,lr}
 1328              	.LCFI45:
 1329              	 .cfi_def_cfa_offset 8
 1330              	 .cfi_offset 7,-8
 1331              	 .cfi_offset 14,-4
 1332 0002 84B0     	 sub sp,sp,#16
 1333              	.LCFI46:
 1334              	 .cfi_def_cfa_offset 24
 1335 0004 00AF     	 add r7,sp,#0
 1336              	.LCFI47:
 1337              	 .cfi_def_cfa_register 7
 1338 0006 7860     	 str r0,[r7,#4]
 337:usart_driver.c **** 	tcirc_buf * rxbuf = NULL;	 
 1339              	 .loc 4 337 14
 1340 0008 0023     	 movs r3,#0
 1341 000a FB60     	 str r3,[r7,#12]
 338:usart_driver.c **** 	if (rxbuf == NULL){
 1342              	 .loc 4 338 5
 1343 000c FB68     	 ldr r3,[r7,#12]
 1344 000e 002B     	 cmp r3,#0
 1345 0010 16D1     	 bne .L106
 339:usart_driver.c **** 			if (usart == USART0) rxbuf = &rx0buf;
 1346              	 .loc 4 339 7
 1347 0012 7B68     	 ldr r3,[r7,#4]
 1348 0014 0E4A     	 ldr r2,.L111
 1349 0016 9342     	 cmp r3,r2
 1350 0018 02D1     	 bne .L107
 1351              	 .loc 4 339 31 discriminator 1
 1352 001a 0E4B     	 ldr r3,.L111+4
 1353 001c FB60     	 str r3,[r7,#12]
 1354 001e 0FE0     	 b .L106
 1355              	.L107:
 340:usart_driver.c **** 			else if (usart == USART1) rxbuf = &rx1buf;
 1356              	 .loc 4 340 12
 1357 0020 7B68     	 ldr r3,[r7,#4]
 1358 0022 0D4A     	 ldr r2,.L111+8
 1359 0024 9342     	 cmp r3,r2
 1360 0026 02D1     	 bne .L108
 1361              	 .loc 4 340 36 discriminator 1
 1362 0028 0C4B     	 ldr r3,.L111+12
 1363 002a FB60     	 str r3,[r7,#12]
 1364 002c 08E0     	 b .L106
 1365              	.L108:
 341:usart_driver.c **** 			else if (usart == USART2) rxbuf = &rx2buf;
 1366              	 .loc 4 341 12
 1367 002e 7B68     	 ldr r3,[r7,#4]
 1368 0030 0B4A     	 ldr r2,.L111+16
 1369 0032 9342     	 cmp r3,r2
 1370 0034 02D1     	 bne .L109
 1371              	 .loc 4 341 36 discriminator 1
 1372 0036 0B4B     	 ldr r3,.L111+20
 1373 0038 FB60     	 str r3,[r7,#12]
 1374 003a 01E0     	 b .L106
 1375              	.L109:
 342:usart_driver.c **** #ifdef USART3
 343:usart_driver.c **** 			else if (usart == USART3) rxbuf = &rx3buf;
 344:usart_driver.c **** #endif
 345:usart_driver.c **** 			else return 0xFF;
 1376              	 .loc 4 345 16
 1377 003c FF23     	 movs r3,#255
 1378 003e 03E0     	 b .L110
 1379              	.L106:
 346:usart_driver.c **** 	}
 347:usart_driver.c **** 	return get_from_circ_buf(rxbuf);
 1380              	 .loc 4 347 9
 1381 0040 F868     	 ldr r0,[r7,#12]
 1382 0042 094B     	 ldr r3,.L111+24
 1383 0044 9847     	 blx r3
 1384              	.LVL45:
 1385 0046 0346     	 mov r3,r0
 1386              	.L110:
 348:usart_driver.c **** }
 1387              	 .loc 4 348 1
 1388 0048 1846     	 mov r0,r3
 1389 004a 1037     	 adds r7,r7,#16
 1390              	.LCFI48:
 1391              	 .cfi_def_cfa_offset 8
 1392 004c BD46     	 mov sp,r7
 1393              	.LCFI49:
 1394              	 .cfi_def_cfa_register 13
 1395              	 
 1396 004e 80BD     	 pop {r7,pc}
 1397              	.L112:
 1398              	 .align 2
 1399              	.L111:
 1400 0050 00000940 	 .word 1074331648
 1401 0054 00000000 	 .word rx0buf
 1402 0058 00400940 	 .word 1074348032
 1403 005c 00000000 	 .word rx1buf
 1404 0060 00800940 	 .word 1074364416
 1405 0064 00000000 	 .word rx2buf
 1406 0068 00000000 	 .word get_from_circ_buf
 1407              	 .cfi_endproc
 1408              	.LFE184:
 1410              	 .section .text.generic_isr,"ax",%progbits
 1411              	 .align 1
 1412              	 .global generic_isr
 1413              	 .syntax unified
 1414              	 .thumb
 1415              	 .thumb_func
 1416              	 .fpu softvfp
 1418              	generic_isr:
 1419              	.LFB185:
 349:usart_driver.c **** 
 350:usart_driver.c **** void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
 351:usart_driver.c **** void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
 352:usart_driver.c **** {
 1420              	 .loc 4 352 1
 1421              	 .cfi_startproc
 1422              	 
 1423              	 
 1424 0000 80B5     	 push {r7,lr}
 1425              	.LCFI50:
 1426              	 .cfi_def_cfa_offset 8
 1427              	 .cfi_offset 7,-8
 1428              	 .cfi_offset 14,-4
 1429 0002 86B0     	 sub sp,sp,#24
 1430              	.LCFI51:
 1431              	 .cfi_def_cfa_offset 32
 1432 0004 00AF     	 add r7,sp,#0
 1433              	.LCFI52:
 1434              	 .cfi_def_cfa_register 7
 1435 0006 F860     	 str r0,[r7,#12]
 1436 0008 B960     	 str r1,[r7,#8]
 1437 000a 7A60     	 str r2,[r7,#4]
 353:usart_driver.c **** 	uint32_t status;
 354:usart_driver.c **** 	status = usart_get_status(usart);
 1438              	 .loc 4 354 11
 1439 000c F868     	 ldr r0,[r7,#12]
 1440 000e 184B     	 ldr r3,.L118
 1441 0010 9847     	 blx r3
 1442              	.LVL46:
 1443 0012 7861     	 str r0,[r7,#20]
 355:usart_driver.c **** 	if (status & US_CSR_RXRDY){
 1444              	 .loc 4 355 13
 1445 0014 7B69     	 ldr r3,[r7,#20]
 1446 0016 03F00103 	 and r3,r3,#1
 1447              	 .loc 4 355 5
 1448 001a 002B     	 cmp r3,#0
 1449 001c 0BD0     	 beq .L114
 1450              	.LBB2:
 356:usart_driver.c **** 		uint32_t temp;
 357:usart_driver.c **** 		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
 1451              	 .loc 4 357 15
 1452 001e FB68     	 ldr r3,[r7,#12]
 1453 0020 9B69     	 ldr r3,[r3,#24]
 1454              	 .loc 4 357 8
 1455 0022 C3F30803 	 ubfx r3,r3,#0,#9
 1456 0026 3B61     	 str r3,[r7,#16]
 358:usart_driver.c **** 		add_to_circ_buf(rxbuf, temp, false);
 1457              	 .loc 4 358 3
 1458 0028 3B69     	 ldr r3,[r7,#16]
 1459 002a DBB2     	 uxtb r3,r3
 1460 002c 0022     	 movs r2,#0
 1461 002e 1946     	 mov r1,r3
 1462 0030 B868     	 ldr r0,[r7,#8]
 1463 0032 104B     	 ldr r3,.L118+4
 1464 0034 9847     	 blx r3
 1465              	.LVL47:
 1466              	.L114:
 1467              	.LBE2:
 359:usart_driver.c **** 	}
 360:usart_driver.c **** 	
 361:usart_driver.c **** 	if (status & US_CSR_TXRDY){
 1468              	 .loc 4 361 13
 1469 0036 7B69     	 ldr r3,[r7,#20]
 1470 0038 03F00203 	 and r3,r3,#2
 1471              	 .loc 4 361 5
 1472 003c 002B     	 cmp r3,#0
 1473 003e 12D0     	 beq .L117
 362:usart_driver.c **** 		if (circ_buf_has_char(txbuf)){
 1474              	 .loc 4 362 7
 1475 0040 7868     	 ldr r0,[r7,#4]
 1476 0042 0D4B     	 ldr r3,.L118+8
 1477 0044 9847     	 blx r3
 1478              	.LVL48:
 1479 0046 0346     	 mov r3,r0
 1480              	 .loc 4 362 6
 1481 0048 002B     	 cmp r3,#0
 1482 004a 08D0     	 beq .L116
 363:usart_driver.c **** 			//Still data to send
 364:usart_driver.c **** 			usart_putchar(usart, get_from_circ_buf(txbuf));			
 1483              	 .loc 4 364 25
 1484 004c 7868     	 ldr r0,[r7,#4]
 1485 004e 0B4B     	 ldr r3,.L118+12
 1486 0050 9847     	 blx r3
 1487              	.LVL49:
 1488 0052 0346     	 mov r3,r0
 1489              	 .loc 4 364 4
 1490 0054 1946     	 mov r1,r3
 1491 0056 F868     	 ldr r0,[r7,#12]
 1492 0058 094B     	 ldr r3,.L118+16
 1493 005a 9847     	 blx r3
 1494              	.LVL50:
 365:usart_driver.c **** 		} else {
 366:usart_driver.c **** 			//No more data, stop this madness
 367:usart_driver.c **** 			usart_disable_interrupt(usart, UART_IER_TXRDY);
 368:usart_driver.c **** 		}
 369:usart_driver.c **** 	}
 370:usart_driver.c **** }
 1495              	 .loc 4 370 1
 1496 005c 03E0     	 b .L117
 1497              	.L116:
 367:usart_driver.c **** 		}
 1498              	 .loc 4 367 4
 1499 005e 0221     	 movs r1,#2
 1500 0060 F868     	 ldr r0,[r7,#12]
 1501 0062 084B     	 ldr r3,.L118+20
 1502 0064 9847     	 blx r3
 1503              	.LVL51:
 1504              	.L117:
 1505              	 .loc 4 370 1
 1506 0066 00BF     	 nop
 1507 0068 1837     	 adds r7,r7,#24
 1508              	.LCFI53:
 1509              	 .cfi_def_cfa_offset 8
 1510 006a BD46     	 mov sp,r7
 1511              	.LCFI54:
 1512              	 .cfi_def_cfa_register 13
 1513              	 
 1514 006c 80BD     	 pop {r7,pc}
 1515              	.L119:
 1516 006e 00BF     	 .align 2
 1517              	.L118:
 1518 0070 00000000 	 .word usart_get_status
 1519 0074 00000000 	 .word add_to_circ_buf
 1520 0078 00000000 	 .word circ_buf_has_char
 1521 007c 00000000 	 .word get_from_circ_buf
 1522 0080 00000000 	 .word usart_putchar
 1523 0084 00000000 	 .word usart_disable_interrupt
 1524              	 .cfi_endproc
 1525              	.LFE185:
 1527              	 .section .text.USART0_Handler,"ax",%progbits
 1528              	 .align 1
 1529              	 .global USART0_Handler
 1530              	 .syntax unified
 1531              	 .thumb
 1532              	 .thumb_func
 1533              	 .fpu softvfp
 1535              	USART0_Handler:
 1536              	.LFB186:
 371:usart_driver.c **** 
 372:usart_driver.c **** ISR(USART0_Handler)
 373:usart_driver.c **** {
 1537              	 .loc 4 373 1
 1538              	 .cfi_startproc
 1539              	 
 1540              	 
 1541 0000 80B5     	 push {r7,lr}
 1542              	.LCFI55:
 1543              	 .cfi_def_cfa_offset 8
 1544              	 .cfi_offset 7,-8
 1545              	 .cfi_offset 14,-4
 1546 0002 00AF     	 add r7,sp,#0
 1547              	.LCFI56:
 1548              	 .cfi_def_cfa_register 7
 374:usart_driver.c **** 	generic_isr(USART0, &rx0buf, &tx0buf);
 1549              	 .loc 4 374 2
 1550 0004 034A     	 ldr r2,.L121
 1551 0006 0449     	 ldr r1,.L121+4
 1552 0008 0448     	 ldr r0,.L121+8
 1553 000a 054B     	 ldr r3,.L121+12
 1554 000c 9847     	 blx r3
 1555              	.LVL52:
 375:usart_driver.c **** }
 1556              	 .loc 4 375 1
 1557 000e 00BF     	 nop
 1558 0010 80BD     	 pop {r7,pc}
 1559              	.L122:
 1560 0012 00BF     	 .align 2
 1561              	.L121:
 1562 0014 00000000 	 .word tx0buf
 1563 0018 00000000 	 .word rx0buf
 1564 001c 00000940 	 .word 1074331648
 1565 0020 00000000 	 .word generic_isr
 1566              	 .cfi_endproc
 1567              	.LFE186:
 1569              	 .section .text.USART1_Handler,"ax",%progbits
 1570              	 .align 1
 1571              	 .global USART1_Handler
 1572              	 .syntax unified
 1573              	 .thumb
 1574              	 .thumb_func
 1575              	 .fpu softvfp
 1577              	USART1_Handler:
 1578              	.LFB187:
 376:usart_driver.c **** 
 377:usart_driver.c **** ISR(USART1_Handler)
 378:usart_driver.c **** {
 1579              	 .loc 4 378 1
 1580              	 .cfi_startproc
 1581              	 
 1582              	 
 1583 0000 80B5     	 push {r7,lr}
 1584              	.LCFI57:
 1585              	 .cfi_def_cfa_offset 8
 1586              	 .cfi_offset 7,-8
 1587              	 .cfi_offset 14,-4
 1588 0002 00AF     	 add r7,sp,#0
 1589              	.LCFI58:
 1590              	 .cfi_def_cfa_register 7
 379:usart_driver.c **** 	generic_isr(USART1, &rx1buf, &tx1buf);
 1591              	 .loc 4 379 2
 1592 0004 034A     	 ldr r2,.L124
 1593 0006 0449     	 ldr r1,.L124+4
 1594 0008 0448     	 ldr r0,.L124+8
 1595 000a 054B     	 ldr r3,.L124+12
 1596 000c 9847     	 blx r3
 1597              	.LVL53:
 380:usart_driver.c **** }
 1598              	 .loc 4 380 1
 1599 000e 00BF     	 nop
 1600 0010 80BD     	 pop {r7,pc}
 1601              	.L125:
 1602 0012 00BF     	 .align 2
 1603              	.L124:
 1604 0014 00000000 	 .word tx1buf
 1605 0018 00000000 	 .word rx1buf
 1606 001c 00400940 	 .word 1074348032
 1607 0020 00000000 	 .word generic_isr
 1608              	 .cfi_endproc
 1609              	.LFE187:
 1611              	 .section .text.USART2_Handler,"ax",%progbits
 1612              	 .align 1
 1613              	 .global USART2_Handler
 1614              	 .syntax unified
 1615              	 .thumb
 1616              	 .thumb_func
 1617              	 .fpu softvfp
 1619              	USART2_Handler:
 1620              	.LFB188:
 381:usart_driver.c **** 
 382:usart_driver.c **** #ifndef USART2_SPIDUMP
 383:usart_driver.c **** ISR(USART2_Handler)
 384:usart_driver.c **** {
 1621              	 .loc 4 384 1
 1622              	 .cfi_startproc
 1623              	 
 1624              	 
 1625 0000 80B5     	 push {r7,lr}
 1626              	.LCFI59:
 1627              	 .cfi_def_cfa_offset 8
 1628              	 .cfi_offset 7,-8
 1629              	 .cfi_offset 14,-4
 1630 0002 00AF     	 add r7,sp,#0
 1631              	.LCFI60:
 1632              	 .cfi_def_cfa_register 7
 385:usart_driver.c **** 	generic_isr(USART2, &rx2buf, &tx2buf);
 1633              	 .loc 4 385 2
 1634 0004 034A     	 ldr r2,.L127
 1635 0006 0449     	 ldr r1,.L127+4
 1636 0008 0448     	 ldr r0,.L127+8
 1637 000a 054B     	 ldr r3,.L127+12
 1638 000c 9847     	 blx r3
 1639              	.LVL54:
 386:usart_driver.c **** }
 1640              	 .loc 4 386 1
 1641 000e 00BF     	 nop
 1642 0010 80BD     	 pop {r7,pc}
 1643              	.L128:
 1644 0012 00BF     	 .align 2
 1645              	.L127:
 1646 0014 00000000 	 .word tx2buf
 1647 0018 00000000 	 .word rx2buf
 1648 001c 00800940 	 .word 1074364416
 1649 0020 00000000 	 .word generic_isr
 1650              	 .cfi_endproc
 1651              	.LFE188:
 1653              	 .section .bss.ctrlbuffer.8844,"aw",%nobits
 1654              	 .align 2
 1657              	ctrlbuffer.8844:
 1658 0000 00000000 	 .space 16
 1658      00000000 
 1658      00000000 
 1658      00000000 
 1659              	 .text
 1660              	.Letext0:
 1661              	 .file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 1662              	 .file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 1663              	 .file 7 ".././hal/sam3u1c/inc/sam3u1c.h"
 1664              	 .file 8 ".././hal/sam3u1c/inc/system_sam3u.h"
 1665              	 .file 9 ".././hal/sam3u1c/inc/component/component_usart.h"
 1666              	 .file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 1667              	 .file 11 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 1668              	 .file 12 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 1669              	 .file 13 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 1670              	 .file 14 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 1671              	 .file 15 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 1672              	 .file 16 ".././hal/sam3u1c/inc/compiler.h"
 1673              	 .file 17 ".././hal/sam3u1c/inc/sam3u/pll.h"
 1674              	 .file 18 ".././hal/sam3u1c/inc/pio.h"
 1675              	 .file 19 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
 1676              	 .file 20 ".././hal/sam3u1c/inc/usart.h"
 1677              	 .file 21 "./conf_usb.h"
 1678              	 .file 22 ".././hal/sam3u1c/inc/usb_protocol.h"
 1679              	 .file 23 ".././hal/sam3u1c/inc/udi.h"
 1680              	 .file 24 ".././hal/sam3u1c/inc/udc_desc.h"
 1681              	 .file 25 ".././hal/sam3u1c/inc/udd.h"
 1682              	 .file 26 ".././hal/sam3u1c/inc/udi_vendor.h"
 1683              	 .file 27 ".././hal/sam3u1c/inc/circbuffer.h"
 1684              	 .file 28 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdio.h"
 1685              	 .file 29 ".././hal/sam3u1c/inc/pmc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 usart_driver.c
    {standard input}:16     .text.NVIC_EnableIRQ:00000000 $t
    {standard input}:23     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
    {standard input}:74     .text.NVIC_EnableIRQ:0000002c $d
    {standard input}:79     .text.NVIC_ClearPendingIRQ:00000000 $t
    {standard input}:85     .text.NVIC_ClearPendingIRQ:00000000 NVIC_ClearPendingIRQ
    {standard input}:136    .text.NVIC_ClearPendingIRQ:00000030 $d
    {standard input}:141    .text.NVIC_SetPriority:00000000 $t
    {standard input}:147    .text.NVIC_SetPriority:00000000 NVIC_SetPriority
    {standard input}:221    .text.NVIC_SetPriority:0000004c $d
    {standard input}:227    .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:230    .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:235    .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:236    .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:238    .text.osc_get_rate:00000000 $t
    {standard input}:244    .text.osc_get_rate:00000000 osc_get_rate
    {standard input}:270    .text.osc_get_rate:00000014 $d
    {standard input}:278    .text.osc_get_rate:00000034 $t
    {standard input}:332    .text.osc_get_rate:00000064 $d
    {standard input}:339    .text.sysclk_get_main_hz:00000000 $t
    {standard input}:345    .text.sysclk_get_main_hz:00000000 sysclk_get_main_hz
    {standard input}:373    .text.sysclk_get_main_hz:00000014 $d
    {standard input}:378    .text.sysclk_get_cpu_hz:00000000 $t
    {standard input}:384    .text.sysclk_get_cpu_hz:00000000 sysclk_get_cpu_hz
    {standard input}:411    .text.sysclk_get_cpu_hz:00000010 $d
    {standard input}:416    .text.sysclk_enable_peripheral_clock:00000000 $t
    {standard input}:422    .text.sysclk_enable_peripheral_clock:00000000 sysclk_enable_peripheral_clock
    {standard input}:458    .text.sysclk_enable_peripheral_clock:00000018 $d
                            *COM*:0000008c rx0buf
                            *COM*:0000008c tx0buf
                            *COM*:0000008c rx1buf
                            *COM*:0000008c tx1buf
                            *COM*:0000008c rx2buf
                            *COM*:0000008c tx2buf
                            *COM*:0000008c rx3buf
                            *COM*:0000008c tx3buf
    {standard input}:471    .text.usart0_enableIO:00000000 $t
    {standard input}:477    .text.usart0_enableIO:00000000 usart0_enableIO
    {standard input}:510    .text.usart0_enableIO:0000001c $d
    {standard input}:515    .rodata:00000000 $d
    {standard input}:522    .text.ctrl_usart:00000000 $t
    {standard input}:529    .text.ctrl_usart:00000000 ctrl_usart
    {standard input}:561    .text.ctrl_usart:00000020 $d
    {standard input}:570    .text.ctrl_usart:00000044 $t
    {standard input}:650    .text.ctrl_usart:000000b4 $d
    {standard input}:655    .text.ctrl_usart:000000c8 $t
    {standard input}:978    .text.ctrl_usart:00000274 $d
    {standard input}:1657   .bss.ctrlbuffer.8844:00000000 ctrlbuffer.8844
    {standard input}:1008   .text.ctrl_usart:000002e4 $t
    {standard input}:1169   .text.ctrl_usart:000003bc $d
    {standard input}:1184   .text.usart_driver_putchar:00000000 $t
    {standard input}:1191   .text.usart_driver_putchar:00000000 usart_driver_putchar
    {standard input}:1299   .text.usart_driver_putchar:0000007c $d
    {standard input}:1314   .text.usart_driver_getchar:00000000 $t
    {standard input}:1321   .text.usart_driver_getchar:00000000 usart_driver_getchar
    {standard input}:1400   .text.usart_driver_getchar:00000050 $d
    {standard input}:1411   .text.generic_isr:00000000 $t
    {standard input}:1418   .text.generic_isr:00000000 generic_isr
    {standard input}:1518   .text.generic_isr:00000070 $d
    {standard input}:1528   .text.USART0_Handler:00000000 $t
    {standard input}:1535   .text.USART0_Handler:00000000 USART0_Handler
    {standard input}:1562   .text.USART0_Handler:00000014 $d
    {standard input}:1570   .text.USART1_Handler:00000000 $t
    {standard input}:1577   .text.USART1_Handler:00000000 USART1_Handler
    {standard input}:1604   .text.USART1_Handler:00000014 $d
    {standard input}:1612   .text.USART2_Handler:00000000 $t
    {standard input}:1619   .text.USART2_Handler:00000000 USART2_Handler
    {standard input}:1646   .text.USART2_Handler:00000014 $d
    {standard input}:1654   .bss.ctrlbuffer.8844:00000000 $d
                           .group:00000000 wm4.0.2cd8a2cb7ff4c48cec7eeec776a1dd8c
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.48.ce8d06c36cc583d9bf62738411f62e4d
                           .group:00000000 wm4.cw521.h.62.d34c289ace4a92d90be8fb389db40479
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.cycle_counter.h.44.fde38fb1acfd6555d72e65fae6e86af5
                           .group:00000000 wm4.delay.h.105.f2a8ab5e71eab0684cf6985b5c2fc9e8
                           .group:00000000 wm4.efc.h.45.ec5734119c630498df26106bacf9a684
                           .group:00000000 wm4.flash_efc.h.90.a4a39259055880dc10b861c5fe1b99e7
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.sam_gpio.h.50.76a45c51855d665134f8211cd601d693
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.smc.h.45.17a94aa976bb62b1109d03e8a314a569
                           .group:00000000 wm4.spi.h.45.712c66be09ffbac297c2e00923077297
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3
                           .group:00000000 wm4.twi.h.45.ba70de99d200dafba570ce8f7058737a
                           .group:00000000 wm4.twi_master.h.90.08c062d0fa8f8aeea342ceeb79263395
                           .group:00000000 wm4.twi_slave.h.45.8b3d1a3d2e43ebc7d0161f4142989871
                           .group:00000000 wm4.uart.h.45.a5af743b8064bd84d1a6438457096e18
                           .group:00000000 wm4.usart.h.46.eae6fe592b7ea0768efef8d312e7f44f
                           .group:00000000 wm4.conf_uart_serial.h.45.245cdceaa1a3811fd043bf660ce38054
                           .group:00000000 wm4.conf_usb.h.45.2f7207bed7467dcf9cb11fbc6ebe572c
                           .group:00000000 wm4.udi_vendor_conf.h.56.4348c8e521d040f44df868219dae6785
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.circbuffer.h.31.0442f870f01f735eed031e2e924982ce

UNDEFINED SYMBOLS
pmc_enable_periph_clk
pio_configure_pin
udd_g_ctrlreq
init_circ_buf
iprintf
usart_init_rs232
usart_enable_rx
usart_enable_tx
usart_enable_interrupt
usart_disable_rx
usart_disable_interrupt
circ_buf_count
add_to_circ_buf
usart_get_interrupt_mask
get_from_circ_buf
usart_putchar
usart_get_status
circ_buf_has_char
