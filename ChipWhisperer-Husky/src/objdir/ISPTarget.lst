   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "ISPTarget.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.osc_get_rate,"ax",%progbits
  27              	 .align 1
  28              	 .arch armv7-m
  29              	 .syntax unified
  30              	 .thumb
  31              	 .thumb_func
  32              	 .fpu softvfp
  34              	osc_get_rate:
  35              	.LFB72:
  36              	 .file 1 ".././hal/sam3u1c/inc/sam3u/osc.h"
   1:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \brief Chip-specific oscillator management functions.
   5:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Copyright (c) 2011 - 2013 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/osc.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/osc.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/osc.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/osc.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/osc.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/osc.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/osc.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/osc.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/osc.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/osc.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/osc.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/osc.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/osc.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/osc.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  44:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifndef CHIP_OSC_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/osc.h **** #define CHIP_OSC_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  47:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "board.h"
  48:.././hal/sam3u1c/inc/sam3u/osc.h **** #include "pmc.h"
  49:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  50:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @cond 0
  51:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-OFF**/
  52:.././hal/sam3u1c/inc/sam3u/osc.h **** #ifdef __cplusplus
  53:.././hal/sam3u1c/inc/sam3u/osc.h **** extern "C" {
  54:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  55:.././hal/sam3u1c/inc/sam3u/osc.h **** /**INDENT-ON**/
  56:.././hal/sam3u1c/inc/sam3u/osc.h **** /// @endcond
  57:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  58:.././hal/sam3u1c/inc/sam3u/osc.h **** /*
  59:.././hal/sam3u1c/inc/sam3u/osc.h ****  * Below BOARD_XXX macros are related to the specific board, and
  60:.././hal/sam3u1c/inc/sam3u/osc.h ****  * should be defined by the board code, otherwise default value are used.
  61:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  62:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_XTAL)
  63:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock xtal frequency has not been defined.
  64:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_XTAL      (32768UL)
  65:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  66:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  67:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_SLCK_BYPASS)
  68:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board slow clock bypass frequency has not been defined.
  69:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_SLCK_BYPASS    (32768UL)
  70:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  71:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  72:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_XTAL)
  73:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal frequency has not been defined.
  74:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_XTAL    (12000000UL)
  75:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  76:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  77:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_FREQ_MAINCK_BYPASS)
  78:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock bypass frequency has not been defined.
  79:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_FREQ_MAINCK_BYPASS  (12000000UL)
  80:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  81:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  82:.././hal/sam3u1c/inc/sam3u/osc.h **** #if !defined(BOARD_OSC_STARTUP_US)
  83:.././hal/sam3u1c/inc/sam3u/osc.h **** #  warning The board main clock xtal startup time has not been defined.
  84:.././hal/sam3u1c/inc/sam3u/osc.h **** #  define BOARD_OSC_STARTUP_US      (15625UL)
  85:.././hal/sam3u1c/inc/sam3u/osc.h **** #endif
  86:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  87:.././hal/sam3u1c/inc/sam3u/osc.h **** /**
  88:.././hal/sam3u1c/inc/sam3u/osc.h ****  * \weakgroup osc_group
  89:.././hal/sam3u1c/inc/sam3u/osc.h ****  * @{
  90:.././hal/sam3u1c/inc/sam3u/osc.h ****  */
  91:.././hal/sam3u1c/inc/sam3u/osc.h **** 
  92:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator identifiers
  93:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
  94:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC             0    //!< Internal 32kHz RC oscillator.
  95:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL           1    //!< External 32kHz crystal oscillator.
  96:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS         2    //!< External 32kHz bypass oscillator.
  97:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC            3    //!< Internal 4MHz RC oscillator.
  98:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC            4    //!< Internal 8MHz RC oscillator.
  99:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC           5    //!< Internal 12MHz RC oscillator.
 100:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL             6    //!< External crystal oscillator.
 101:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS           7    //!< External bypass oscillator.
 102:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 103:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 104:.././hal/sam3u1c/inc/sam3u/osc.h **** //! \name Oscillator clock speed in hertz
 105:.././hal/sam3u1c/inc/sam3u/osc.h **** //@{
 106:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_RC_HZ          CHIP_FREQ_SLCK_RC               //!< Internal 32kHz RC oscillat
 107:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_XTAL_HZ        BOARD_FREQ_SLCK_XTAL            //!< External 32kHz crystal osc
 108:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_SLCK_32K_BYPASS_HZ      BOARD_FREQ_SLCK_BYPASS          //!< External 32kHz bypass osci
 109:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_4M_RC_HZ         CHIP_FREQ_MAINCK_RC_4MHZ        //!< Internal 4MHz RC oscillato
 110:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_8M_RC_HZ         CHIP_FREQ_MAINCK_RC_8MHZ        //!< Internal 8MHz RC oscillato
 111:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_12M_RC_HZ        CHIP_FREQ_MAINCK_RC_12MHZ       //!< Internal 12MHz RC oscillat
 112:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillato
 113:.././hal/sam3u1c/inc/sam3u/osc.h **** #define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator
 114:.././hal/sam3u1c/inc/sam3u/osc.h **** //@}
 115:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 116:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_enable(uint32_t ul_id)
 117:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 118:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 119:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 120:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 121:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 122:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 123:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
 124:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 125:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 126:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 127:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
 128:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 129:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 130:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 131:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 132:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
 133:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 134:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 135:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 136:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
 137:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 138:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 139:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 140:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
 141:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 142:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 143:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 144:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 145:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
 146:.././hal/sam3u1c/inc/sam3u/osc.h **** 				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
 147:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 148:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 149:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 150:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_bypass_main_xtal();
 151:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 152:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 153:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 154:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 155:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline void osc_disable(uint32_t ul_id)
 156:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 157:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 158:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 159:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 160:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 161:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 162:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 163:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 164:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 165:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 166:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_fastrc();
 167:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 168:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 169:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 170:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_XTAL);
 171:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 172:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 173:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 174:.././hal/sam3u1c/inc/sam3u/osc.h **** 		pmc_osc_disable_xtal(PMC_OSC_BYPASS);
 175:.././hal/sam3u1c/inc/sam3u/osc.h **** 		break;
 176:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 177:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 178:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 179:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline bool osc_is_ready(uint32_t ul_id)
 180:.././hal/sam3u1c/inc/sam3u/osc.h **** {
 181:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 182:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 183:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return 1;
 184:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 185:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 186:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 187:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_32kxtal();
 188:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 189:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 190:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 191:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 192:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_fastrc();
 193:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 194:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 195:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 196:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return pmc_osc_is_ready_main_xtal();
 197:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 198:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 199:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 200:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 201:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 202:.././hal/sam3u1c/inc/sam3u/osc.h **** static inline uint32_t osc_get_rate(uint32_t ul_id)
 203:.././hal/sam3u1c/inc/sam3u/osc.h **** {
  37              	 .loc 1 203 1
  38              	 .cfi_startproc
  39              	 
  40              	 
  41              	 
  42 0000 80B4     	 push {r7}
  43              	.LCFI0:
  44              	 .cfi_def_cfa_offset 4
  45              	 .cfi_offset 7,-4
  46 0002 83B0     	 sub sp,sp,#12
  47              	.LCFI1:
  48              	 .cfi_def_cfa_offset 16
  49 0004 00AF     	 add r7,sp,#0
  50              	.LCFI2:
  51              	 .cfi_def_cfa_register 7
  52 0006 7860     	 str r0,[r7,#4]
  53 0008 7B68     	 ldr r3,[r7,#4]
  54 000a 072B     	 cmp r3,#7
  55 000c 23D8     	 bhi .L2
  56 000e 01A2     	 adr r2,.L4
  57 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
  58              	 .p2align 2
  59              	.L4:
  60 0014 35000000 	 .word .L11+1
  61 0018 3B000000 	 .word .L10+1
  62 001c 3F000000 	 .word .L9+1
  63 0020 43000000 	 .word .L8+1
  64 0024 47000000 	 .word .L7+1
  65 0028 4B000000 	 .word .L6+1
  66 002c 4F000000 	 .word .L5+1
  67 0030 53000000 	 .word .L3+1
  68              	 .p2align 1
  69              	.L11:
 204:.././hal/sam3u1c/inc/sam3u/osc.h **** 	switch (ul_id) {
 205:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_RC:
 206:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_SLCK_32K_RC_HZ;
  70              	 .loc 1 206 10
  71 0034 4FF4FA43 	 mov r3,#32000
  72 0038 0EE0     	 b .L12
  73              	.L10:
 207:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 208:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_XTAL:
 209:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_XTAL;
  74              	 .loc 1 209 10
  75 003a 0023     	 movs r3,#0
  76 003c 0CE0     	 b .L12
  77              	.L9:
 210:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 211:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_SLCK_32K_BYPASS:
 212:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_SLCK_BYPASS;
  78              	 .loc 1 212 10
  79 003e 0023     	 movs r3,#0
  80 0040 0AE0     	 b .L12
  81              	.L8:
 213:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 214:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_4M_RC:
 215:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_4M_RC_HZ;
  82              	 .loc 1 215 10
  83 0042 084B     	 ldr r3,.L13
  84 0044 08E0     	 b .L12
  85              	.L7:
 216:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 217:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_8M_RC:
 218:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_8M_RC_HZ;
  86              	 .loc 1 218 10
  87 0046 084B     	 ldr r3,.L13+4
  88 0048 06E0     	 b .L12
  89              	.L6:
 219:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 220:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_12M_RC:
 221:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return OSC_MAINCK_12M_RC_HZ;
  90              	 .loc 1 221 10
  91 004a 084B     	 ldr r3,.L13+8
  92 004c 04E0     	 b .L12
  93              	.L5:
 222:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 223:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_XTAL:
 224:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_XTAL;
  94              	 .loc 1 224 10
  95 004e 074B     	 ldr r3,.L13+8
  96 0050 02E0     	 b .L12
  97              	.L3:
 225:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 226:.././hal/sam3u1c/inc/sam3u/osc.h **** 	case OSC_MAINCK_BYPASS:
 227:.././hal/sam3u1c/inc/sam3u/osc.h **** 		return BOARD_FREQ_MAINCK_BYPASS;
  98              	 .loc 1 227 10
  99 0052 064B     	 ldr r3,.L13+8
 100 0054 00E0     	 b .L12
 101              	.L2:
 228:.././hal/sam3u1c/inc/sam3u/osc.h **** 	}
 229:.././hal/sam3u1c/inc/sam3u/osc.h **** 
 230:.././hal/sam3u1c/inc/sam3u/osc.h **** 	return 0;
 102              	 .loc 1 230 9
 103 0056 0023     	 movs r3,#0
 104              	.L12:
 231:.././hal/sam3u1c/inc/sam3u/osc.h **** }
 105              	 .loc 1 231 1
 106 0058 1846     	 mov r0,r3
 107 005a 0C37     	 adds r7,r7,#12
 108              	.LCFI3:
 109              	 .cfi_def_cfa_offset 4
 110 005c BD46     	 mov sp,r7
 111              	.LCFI4:
 112              	 .cfi_def_cfa_register 13
 113              	 
 114 005e 80BC     	 pop {r7}
 115              	.LCFI5:
 116              	 .cfi_restore 7
 117              	 .cfi_def_cfa_offset 0
 118 0060 7047     	 bx lr
 119              	.L14:
 120 0062 00BF     	 .align 2
 121              	.L13:
 122 0064 00093D00 	 .word 4000000
 123 0068 00127A00 	 .word 8000000
 124 006c 001BB700 	 .word 12000000
 125              	 .cfi_endproc
 126              	.LFE72:
 128              	 .section .text.sysclk_get_main_hz,"ax",%progbits
 129              	 .align 1
 130              	 .syntax unified
 131              	 .thumb
 132              	 .thumb_func
 133              	 .fpu softvfp
 135              	sysclk_get_main_hz:
 136              	.LFB83:
 137              	 .file 2 ".././hal/sam3u1c/inc/sam3u/sysclk.h"
   1:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
   2:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \file
   3:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   4:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Chip-specific system clock management functions.
   5:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   6:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Copyright (c) 2011 - 2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
   8:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  10:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \page License
  11:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  12:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  15:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  18:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  22:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  25:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  28:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  40:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  42:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
  43:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  44:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CHIP_SYSCLK_H_INCLUDED
  45:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define CHIP_SYSCLK_H_INCLUDED
  46:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  47:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #include <osc.h>
  48:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #include <pll.h>
  49:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  50:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
  51:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \page sysclk_quickstart Quick Start Guide for the System Clock Management service (SAM3U)
  52:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  53:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This is the quick start guide for the \ref sysclk_group "System Clock Management"
  54:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * service, with step-by-step instructions on how to configure and use the service for
  55:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * specific use cases.
  56:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  57:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \section sysclk_quickstart_usecases System Clock Management use cases
  58:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * - \ref sysclk_quickstart_basic
  59:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  60:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \section sysclk_quickstart_basic Basic usage of the System Clock Management service
  61:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This section will present a basic use case for the System Clock Management service.
  62:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * This use case will configure the main system clock to 96MHz, using an internal PLL
  63:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * module to multiply the frequency of a crystal attached to the microcontroller.
  64:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  65:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_prereq Prerequisites
  66:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  - None
  67:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  68:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_setup_steps Initialization code
  69:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Add to the application initialization code:
  70:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \code
  71:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	sysclk_init();
  72:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
  73:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  74:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_setup_steps_workflow Workflow
  75:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * -# Configure the system clocks according to the settings in conf_clock.h:
  76:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \code sysclk_init(); \endcode
  77:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  78:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_example_code Example code
  79:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   Add or uncomment the following in your conf_clock.h header file, commenting out all other
  80:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   definitions of the same symbol(s):
  81:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code
  82:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_SYSCLK_SOURCE        SYSCLK_SRC_PLLACK
  83:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  84:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   // Fpll0 = (Fclk * PLL_mul) / PLL_div
  85:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_SOURCE          PLL_SRC_MAINCK_XTAL
  86:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_MUL             (96000000UL / BOARD_FREQ_MAINCK_XTAL)
  87:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_PLL0_DIV             1
  88:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
  89:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   // Fbus = Fsys / BUS_div
  90:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	   #define CONFIG_SYSCLK_PRES          SYSCLK_PRES_1
  91:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
  92:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
  93:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_example_workflow Workflow
  94:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the main system clock to use the output of the PLL module as its source:
  95:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code #define CONFIG_SYSCLK_SOURCE          SYSCLK_SRC_PLLACK \endcode
  96:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the PLL module to use the fast external fast crystal oscillator as its source:
  97:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code #define CONFIG_PLL0_SOURCE            PLL_SRC_MAINCK_XTAL \endcode
  98:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the PLL module to multiply the external fast crystal oscillator frequency up to 96
  99:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \code
 100:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_PLL0_MUL             (96000000UL / BOARD_FREQ_MAINCK_XTAL)
 101:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_PLL0_DIV             1
 102:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
 103:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   \note For user boards, \c BOARD_FREQ_MAINCK_XTAL should be defined in the board \c conf_board.
 104:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *         file as the frequency of the fast crystal attached to the microcontroller.
 105:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *  -# Configure the main clock to run at the full 96MHz, disable scaling of the main system clock 
 106:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \code
 107:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	#define CONFIG_SYSCLK_PRES         SYSCLK_PRES_1
 108:.././hal/sam3u1c/inc/sam3u/sysclk.h **** \endcode
 109:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *    \note Some dividers are powers of two, while others are integer division factors. Refer to th
 110:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *          formulas in the conf_clock.h template commented above each division define.
 111:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 112:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 113:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /// @cond 0
 114:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**INDENT-OFF**/
 115:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __cplusplus
 116:.././hal/sam3u1c/inc/sam3u/sysclk.h **** extern "C" {
 117:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 118:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**INDENT-ON**/
 119:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /// @endcond
 120:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 121:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 122:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \weakgroup sysclk_group
 123:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * @{
 124:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 125:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 126:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Configuration Symbols
 127:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 128:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 129:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_SYSCLK_SOURCE
 130:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Initial/static main system clock source
 131:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 132:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The main system clock will be configured to use this clock during
 133:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * initialization.
 134:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 135:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CONFIG_SYSCLK_SOURCE
 136:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_SYSCLK_SOURCE   SYSCLK_SRC_MAINCK_4M_RC
 137:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 138:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 139:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_SYSCLK_PRES
 140:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Initial CPU clock divider (mck)
 141:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 142:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The MCK will run at
 143:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \f[
 144:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *   f_{MCK} = \frac{f_{sys}}{\mathrm{CONFIG\_SYSCLK\_PRES}}\,\mbox{Hz}
 145:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \f]
 146:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * after initialization.
 147:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 148:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifndef CONFIG_SYSCLK_PRES
 149:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_SYSCLK_PRES  0
 150:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 151:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 152:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 153:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 154:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Master Clock Sources (MCK)
 155:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 156:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_RC              0       //!< Internal 32kHz RC oscillator as master source 
 157:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_XTAL            1       //!< External 32kHz crystal oscillator as master so
 158:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_SLCK_BYPASS          2       //!< External 32kHz bypass oscillator as master sou
 159:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_4M_RC         3       //!< Internal 4MHz RC oscillator as master source c
 160:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_8M_RC         4       //!< Internal 8MHz RC oscillator as master source c
 161:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_12M_RC        5       //!< Internal 12MHz RC oscillator as master source 
 162:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_XTAL          6       //!< External crystal oscillator as master source c
 163:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_MAINCK_BYPASS        7       //!< External bypass oscillator as master source cl
 164:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_PLLACK               8       //!< Use PLLACK as master source clock
 165:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_SRC_UPLLCK               9       //!< Use UPLLCK as master source clock
 166:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 167:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 168:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //! \name Master Clock Prescalers (MCK)
 169:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 170:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_1           PMC_MCKR_PRES_CLK_1     //!< Set master clock prescaler to 1
 171:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_2           PMC_MCKR_PRES_CLK_2     //!< Set master clock prescaler to 2
 172:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_4           PMC_MCKR_PRES_CLK_4     //!< Set master clock prescaler to 4
 173:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_8           PMC_MCKR_PRES_CLK_8     //!< Set master clock prescaler to 8
 174:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_16          PMC_MCKR_PRES_CLK_16    //!< Set master clock prescaler to 16
 175:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_32          PMC_MCKR_PRES_CLK_32    //!< Set master clock prescaler to 32
 176:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_64          PMC_MCKR_PRES_CLK_64    //!< Set master clock prescaler to 64
 177:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #define SYSCLK_PRES_3           PMC_MCKR_PRES_CLK_3     //!< Set master clock prescaler to 3
 178:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@}
 179:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 180:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 181:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_USBCLK_SOURCE
 182:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Configuration symbol for the USB generic clock source
 183:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 184:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Sets the clock source to use for the USB. The source must also be properly
 185:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configured.
 186:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 187:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Define this to one of the \c USBCLK_SRC_xxx settings. Leave it undefined if
 188:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * USB is not required.
 189:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 190:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __DOXYGEN__
 191:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_USBCLK_SOURCE
 192:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 193:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 194:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 195:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \def CONFIG_USBCLK_DIV
 196:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Configuration symbol for the USB generic clock divider setting
 197:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 198:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Sets the clock division for the USB generic clock. If a USB clock source is
 199:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * selected with CONFIG_USBCLK_SOURCE, this configuration symbol must also be
 200:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * defined.
 201:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 202:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef __DOXYGEN__
 203:.././hal/sam3u1c/inc/sam3u/sysclk.h **** # define CONFIG_USBCLK_DIV
 204:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 205:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 206:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 207:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \name Querying the system clock
 208:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 209:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * The following functions may be used to query the current frequency of
 210:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * the system clock and the CPU and bus clocks derived from it.
 211:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * sysclk_get_main_hz() and sysclk_get_cpu_hz() can be assumed to be
 212:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * available on all platforms, although some platforms may define
 213:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * additional accessors for various chip-internal bus clocks. These are
 214:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * usually not intended to be queried directly by generic code.
 215:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 216:.././hal/sam3u1c/inc/sam3u/sysclk.h **** //@{
 217:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 218:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 219:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 220:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 221:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \todo This function assumes that the main clock source never changes
 222:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * once it's been set up, and that PLL0 always runs at the compile-time
 223:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configured default rate. While this is probably the most common
 224:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * configuration, which we want to support as a special case for
 225:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * performance reasons, we will at some point need to support more
 226:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * dynamic setups as well.
 227:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 228:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 229:.././hal/sam3u1c/inc/sam3u/sysclk.h **** extern uint32_t sysclk_initialized;
 230:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 231:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 232:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 138              	 .loc 2 232 1
 139              	 .cfi_startproc
 140              	 
 141              	 
 142 0000 80B5     	 push {r7,lr}
 143              	.LCFI6:
 144              	 .cfi_def_cfa_offset 8
 145              	 .cfi_offset 7,-8
 146              	 .cfi_offset 14,-4
 147 0002 00AF     	 add r7,sp,#0
 148              	.LCFI7:
 149              	 .cfi_def_cfa_register 7
 233:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 234:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	if (!sysclk_initialized ) {
 235:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 236:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 237:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 238:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 239:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* Config system clock setting */
 240:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_RC) {
 241:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_RC_HZ;
 242:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_XTAL) {
 243:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_XTAL_HZ;
 244:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_BYPASS) {
 245:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_SLCK_32K_BYPASS_HZ;
 246:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_4M_RC) {
 247:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 248:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_8M_RC) {
 249:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_8M_RC_HZ;
 250:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_12M_RC) {
 251:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_12M_RC_HZ;
 252:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_XTAL) {
 253:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_XTAL_HZ;
 254:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
 255:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return OSC_MAINCK_BYPASS_HZ;
 256:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 257:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef CONFIG_PLL0_SOURCE
 258:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
 259:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return pll_get_default_rate(0);
 150              	 .loc 2 259 10
 151 0004 0620     	 movs r0,#6
 152 0006 034B     	 ldr r3,.L17
 153 0008 9847     	 blx r3
 154              	.LVL0:
 155 000a 0346     	 mov r3,r0
 156 000c 1B01     	 lsls r3,r3,#4
 260:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 261:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 262:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 263:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #ifdef CONFIG_PLL1_SOURCE
 264:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_UPLLCK) {
 265:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return PLL_UPLL_HZ;
 266:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 267:.././hal/sam3u1c/inc/sam3u/sysclk.h **** #endif
 268:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	else {
 269:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
 270:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		return 0;
 271:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	}
 272:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 157              	 .loc 2 272 1
 158 000e 1846     	 mov r0,r3
 159 0010 80BD     	 pop {r7,pc}
 160              	.L18:
 161 0012 00BF     	 .align 2
 162              	.L17:
 163 0014 00000000 	 .word osc_get_rate
 164              	 .cfi_endproc
 165              	.LFE83:
 167              	 .section .text.sysclk_get_cpu_hz,"ax",%progbits
 168              	 .align 1
 169              	 .syntax unified
 170              	 .thumb
 171              	 .thumb_func
 172              	 .fpu softvfp
 174              	sysclk_get_cpu_hz:
 175              	.LFB84:
 273:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 
 274:.././hal/sam3u1c/inc/sam3u/sysclk.h **** /**
 275:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \brief Return the current rate in Hz of the CPU clock
 276:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 277:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \todo This function assumes that the CPU always runs at the system
 278:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clock frequency. We want to support at least two more scenarios:
 279:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * Fixed CPU/bus clock dividers (config symbols) and dynamic CPU/bus
 280:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clock dividers (which may change at run time). Ditto for all the bus
 281:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * clocks.
 282:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  *
 283:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  * \return Frequency of the CPU clock, in Hz.
 284:.././hal/sam3u1c/inc/sam3u/sysclk.h ****  */
 285:.././hal/sam3u1c/inc/sam3u/sysclk.h **** static inline uint32_t sysclk_get_cpu_hz(void)
 286:.././hal/sam3u1c/inc/sam3u/sysclk.h **** {
 176              	 .loc 2 286 1
 177              	 .cfi_startproc
 178              	 
 179              	 
 180 0000 80B5     	 push {r7,lr}
 181              	.LCFI8:
 182              	 .cfi_def_cfa_offset 8
 183              	 .cfi_offset 7,-8
 184              	 .cfi_offset 14,-4
 185 0002 00AF     	 add r7,sp,#0
 186              	.LCFI9:
 187              	 .cfi_def_cfa_register 7
 287:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
 288:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	/* prescaler, not an immediate value. */
 289:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 	return sysclk_get_main_hz() /
 188              	 .loc 2 289 9
 189 0004 024B     	 ldr r3,.L21
 190 0006 9847     	 blx r3
 191              	.LVL1:
 192 0008 0346     	 mov r3,r0
 193              	 .loc 2 289 30
 194 000a 5B08     	 lsrs r3,r3,#1
 290:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
 291:.././hal/sam3u1c/inc/sam3u/sysclk.h **** 			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
 292:.././hal/sam3u1c/inc/sam3u/sysclk.h **** }
 195              	 .loc 2 292 1
 196 000c 1846     	 mov r0,r3
 197 000e 80BD     	 pop {r7,pc}
 198              	.L22:
 199              	 .align 2
 200              	.L21:
 201 0010 00000000 	 .word sysclk_get_main_hz
 202              	 .cfi_endproc
 203              	.LFE84:
 205              	 .section .text.spi_reset,"ax",%progbits
 206              	 .align 1
 207              	 .syntax unified
 208              	 .thumb
 209              	 .thumb_func
 210              	 .fpu softvfp
 212              	spi_reset:
 213              	.LFB131:
 214              	 .file 3 ".././hal/sam3u1c/inc/spi.h"
   1:.././hal/sam3u1c/inc/spi.h **** /**
   2:.././hal/sam3u1c/inc/spi.h ****  * \file
   3:.././hal/sam3u1c/inc/spi.h ****  *
   4:.././hal/sam3u1c/inc/spi.h ****  * \brief Serial Peripheral Interface (SPI) driver for SAM.
   5:.././hal/sam3u1c/inc/spi.h ****  *
   6:.././hal/sam3u1c/inc/spi.h ****  * Copyright (c) 2011-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/inc/spi.h ****  *
   8:.././hal/sam3u1c/inc/spi.h ****  * \asf_license_start
   9:.././hal/sam3u1c/inc/spi.h ****  *
  10:.././hal/sam3u1c/inc/spi.h ****  * \page License
  11:.././hal/sam3u1c/inc/spi.h ****  *
  12:.././hal/sam3u1c/inc/spi.h ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/inc/spi.h ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/inc/spi.h ****  *
  15:.././hal/sam3u1c/inc/spi.h ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/inc/spi.h ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/inc/spi.h ****  *
  18:.././hal/sam3u1c/inc/spi.h ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/inc/spi.h ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/inc/spi.h ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/inc/spi.h ****  *
  22:.././hal/sam3u1c/inc/spi.h ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/inc/spi.h ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/inc/spi.h ****  *
  25:.././hal/sam3u1c/inc/spi.h ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/inc/spi.h ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/inc/spi.h ****  *
  28:.././hal/sam3u1c/inc/spi.h ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/inc/spi.h ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/inc/spi.h ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/inc/spi.h ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/inc/spi.h ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/inc/spi.h ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/inc/spi.h ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/inc/spi.h ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/inc/spi.h ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/inc/spi.h ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/inc/spi.h ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/inc/spi.h ****  *
  40:.././hal/sam3u1c/inc/spi.h ****  * \asf_license_stop
  41:.././hal/sam3u1c/inc/spi.h ****  *
  42:.././hal/sam3u1c/inc/spi.h ****  */
  43:.././hal/sam3u1c/inc/spi.h **** 
  44:.././hal/sam3u1c/inc/spi.h **** #ifndef SPI_H_INCLUDED
  45:.././hal/sam3u1c/inc/spi.h **** #define SPI_H_INCLUDED
  46:.././hal/sam3u1c/inc/spi.h **** 
  47:.././hal/sam3u1c/inc/spi.h **** #include "compiler.h"
  48:.././hal/sam3u1c/inc/spi.h **** 
  49:.././hal/sam3u1c/inc/spi.h **** /// @cond 0
  50:.././hal/sam3u1c/inc/spi.h **** /**INDENT-OFF**/
  51:.././hal/sam3u1c/inc/spi.h **** #ifdef __cplusplus
  52:.././hal/sam3u1c/inc/spi.h **** extern "C" {
  53:.././hal/sam3u1c/inc/spi.h **** #endif
  54:.././hal/sam3u1c/inc/spi.h **** /**INDENT-ON**/
  55:.././hal/sam3u1c/inc/spi.h **** /// @endcond
  56:.././hal/sam3u1c/inc/spi.h **** 
  57:.././hal/sam3u1c/inc/spi.h **** /** Time-out value (number of attempts). */
  58:.././hal/sam3u1c/inc/spi.h **** #define SPI_TIMEOUT       15000
  59:.././hal/sam3u1c/inc/spi.h **** 
  60:.././hal/sam3u1c/inc/spi.h **** /** Status codes used by the SPI driver. */
  61:.././hal/sam3u1c/inc/spi.h **** typedef enum
  62:.././hal/sam3u1c/inc/spi.h **** {
  63:.././hal/sam3u1c/inc/spi.h **** 	SPI_ERROR = -1,
  64:.././hal/sam3u1c/inc/spi.h **** 	SPI_OK = 0,
  65:.././hal/sam3u1c/inc/spi.h **** 	SPI_ERROR_TIMEOUT = 1,
  66:.././hal/sam3u1c/inc/spi.h **** 	SPI_ERROR_ARGUMENT,
  67:.././hal/sam3u1c/inc/spi.h **** 	SPI_ERROR_OVERRUN,
  68:.././hal/sam3u1c/inc/spi.h **** 	SPI_ERROR_MODE_FAULT,
  69:.././hal/sam3u1c/inc/spi.h **** 	SPI_ERROR_OVERRUN_AND_MODE_FAULT
  70:.././hal/sam3u1c/inc/spi.h **** } spi_status_t;
  71:.././hal/sam3u1c/inc/spi.h **** 
  72:.././hal/sam3u1c/inc/spi.h **** /** SPI Chip Select behavior modes while transferring. */
  73:.././hal/sam3u1c/inc/spi.h **** typedef enum spi_cs_behavior {
  74:.././hal/sam3u1c/inc/spi.h **** 	/** CS does not rise until a new transfer is requested on different chip select. */
  75:.././hal/sam3u1c/inc/spi.h **** 	SPI_CS_KEEP_LOW = SPI_CSR_CSAAT,
  76:.././hal/sam3u1c/inc/spi.h **** 	/** CS rises if there is no more data to transfer. */
  77:.././hal/sam3u1c/inc/spi.h **** 	SPI_CS_RISE_NO_TX = 0,
  78:.././hal/sam3u1c/inc/spi.h **** 	/** CS is de-asserted systematically during a time DLYBCS. */
  79:.././hal/sam3u1c/inc/spi.h **** 	SPI_CS_RISE_FORCED = SPI_CSR_CSNAAT
  80:.././hal/sam3u1c/inc/spi.h **** } spi_cs_behavior_t;
  81:.././hal/sam3u1c/inc/spi.h **** 
  82:.././hal/sam3u1c/inc/spi.h **** /**
  83:.././hal/sam3u1c/inc/spi.h ****  * \brief Generate Peripheral Chip Select Value from Chip Select ID
  84:.././hal/sam3u1c/inc/spi.h ****  * \note When chip select n is working, PCS bit n is set to low level.
  85:.././hal/sam3u1c/inc/spi.h ****  *
  86:.././hal/sam3u1c/inc/spi.h ****  * \param chip_sel_id The chip select number used
  87:.././hal/sam3u1c/inc/spi.h ****  */
  88:.././hal/sam3u1c/inc/spi.h **** #define spi_get_pcs(chip_sel_id) ((~(1u<<(chip_sel_id)))&0xF)
  89:.././hal/sam3u1c/inc/spi.h **** 
  90:.././hal/sam3u1c/inc/spi.h **** /**
  91:.././hal/sam3u1c/inc/spi.h ****  * \brief Reset SPI and set it to Slave mode.
  92:.././hal/sam3u1c/inc/spi.h ****  *
  93:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
  94:.././hal/sam3u1c/inc/spi.h ****  */
  95:.././hal/sam3u1c/inc/spi.h **** static inline void spi_reset(Spi *p_spi)
  96:.././hal/sam3u1c/inc/spi.h **** {
 215              	 .loc 3 96 1
 216              	 .cfi_startproc
 217              	 
 218              	 
 219              	 
 220 0000 80B4     	 push {r7}
 221              	.LCFI10:
 222              	 .cfi_def_cfa_offset 4
 223              	 .cfi_offset 7,-4
 224 0002 83B0     	 sub sp,sp,#12
 225              	.LCFI11:
 226              	 .cfi_def_cfa_offset 16
 227 0004 00AF     	 add r7,sp,#0
 228              	.LCFI12:
 229              	 .cfi_def_cfa_register 7
 230 0006 7860     	 str r0,[r7,#4]
  97:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_CR = SPI_CR_SWRST;
 231              	 .loc 3 97 16
 232 0008 7B68     	 ldr r3,[r7,#4]
 233 000a 8022     	 movs r2,#128
 234 000c 1A60     	 str r2,[r3]
  98:.././hal/sam3u1c/inc/spi.h **** }
 235              	 .loc 3 98 1
 236 000e 00BF     	 nop
 237 0010 0C37     	 adds r7,r7,#12
 238              	.LCFI13:
 239              	 .cfi_def_cfa_offset 4
 240 0012 BD46     	 mov sp,r7
 241              	.LCFI14:
 242              	 .cfi_def_cfa_register 13
 243              	 
 244 0014 80BC     	 pop {r7}
 245              	.LCFI15:
 246              	 .cfi_restore 7
 247              	 .cfi_def_cfa_offset 0
 248 0016 7047     	 bx lr
 249              	 .cfi_endproc
 250              	.LFE131:
 252              	 .section .text.spi_enable,"ax",%progbits
 253              	 .align 1
 254              	 .syntax unified
 255              	 .thumb
 256              	 .thumb_func
 257              	 .fpu softvfp
 259              	spi_enable:
 260              	.LFB132:
  99:.././hal/sam3u1c/inc/spi.h **** 
 100:.././hal/sam3u1c/inc/spi.h **** /**
 101:.././hal/sam3u1c/inc/spi.h ****  * \brief Enable SPI.
 102:.././hal/sam3u1c/inc/spi.h ****  *
 103:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 104:.././hal/sam3u1c/inc/spi.h ****  */
 105:.././hal/sam3u1c/inc/spi.h **** static inline void spi_enable(Spi *p_spi)
 106:.././hal/sam3u1c/inc/spi.h **** {
 261              	 .loc 3 106 1
 262              	 .cfi_startproc
 263              	 
 264              	 
 265              	 
 266 0000 80B4     	 push {r7}
 267              	.LCFI16:
 268              	 .cfi_def_cfa_offset 4
 269              	 .cfi_offset 7,-4
 270 0002 83B0     	 sub sp,sp,#12
 271              	.LCFI17:
 272              	 .cfi_def_cfa_offset 16
 273 0004 00AF     	 add r7,sp,#0
 274              	.LCFI18:
 275              	 .cfi_def_cfa_register 7
 276 0006 7860     	 str r0,[r7,#4]
 107:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_CR = SPI_CR_SPIEN;
 277              	 .loc 3 107 16
 278 0008 7B68     	 ldr r3,[r7,#4]
 279 000a 0122     	 movs r2,#1
 280 000c 1A60     	 str r2,[r3]
 108:.././hal/sam3u1c/inc/spi.h **** }
 281              	 .loc 3 108 1
 282 000e 00BF     	 nop
 283 0010 0C37     	 adds r7,r7,#12
 284              	.LCFI19:
 285              	 .cfi_def_cfa_offset 4
 286 0012 BD46     	 mov sp,r7
 287              	.LCFI20:
 288              	 .cfi_def_cfa_register 13
 289              	 
 290 0014 80BC     	 pop {r7}
 291              	.LCFI21:
 292              	 .cfi_restore 7
 293              	 .cfi_def_cfa_offset 0
 294 0016 7047     	 bx lr
 295              	 .cfi_endproc
 296              	.LFE132:
 298              	 .section .text.spi_disable,"ax",%progbits
 299              	 .align 1
 300              	 .syntax unified
 301              	 .thumb
 302              	 .thumb_func
 303              	 .fpu softvfp
 305              	spi_disable:
 306              	.LFB133:
 109:.././hal/sam3u1c/inc/spi.h **** 
 110:.././hal/sam3u1c/inc/spi.h **** /**
 111:.././hal/sam3u1c/inc/spi.h ****  * \brief Disable SPI.
 112:.././hal/sam3u1c/inc/spi.h ****  *
 113:.././hal/sam3u1c/inc/spi.h ****  * \note CS is de-asserted, which indicates that the last data is done, and user
 114:.././hal/sam3u1c/inc/spi.h ****  * should check TX_EMPTY before disabling SPI.
 115:.././hal/sam3u1c/inc/spi.h ****  *
 116:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 117:.././hal/sam3u1c/inc/spi.h ****  */
 118:.././hal/sam3u1c/inc/spi.h **** static inline void spi_disable(Spi *p_spi)
 119:.././hal/sam3u1c/inc/spi.h **** {
 307              	 .loc 3 119 1
 308              	 .cfi_startproc
 309              	 
 310              	 
 311              	 
 312 0000 80B4     	 push {r7}
 313              	.LCFI22:
 314              	 .cfi_def_cfa_offset 4
 315              	 .cfi_offset 7,-4
 316 0002 83B0     	 sub sp,sp,#12
 317              	.LCFI23:
 318              	 .cfi_def_cfa_offset 16
 319 0004 00AF     	 add r7,sp,#0
 320              	.LCFI24:
 321              	 .cfi_def_cfa_register 7
 322 0006 7860     	 str r0,[r7,#4]
 120:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_CR = SPI_CR_SPIDIS;
 323              	 .loc 3 120 16
 324 0008 7B68     	 ldr r3,[r7,#4]
 325 000a 0222     	 movs r2,#2
 326 000c 1A60     	 str r2,[r3]
 121:.././hal/sam3u1c/inc/spi.h **** }
 327              	 .loc 3 121 1
 328 000e 00BF     	 nop
 329 0010 0C37     	 adds r7,r7,#12
 330              	.LCFI25:
 331              	 .cfi_def_cfa_offset 4
 332 0012 BD46     	 mov sp,r7
 333              	.LCFI26:
 334              	 .cfi_def_cfa_register 13
 335              	 
 336 0014 80BC     	 pop {r7}
 337              	.LCFI27:
 338              	 .cfi_restore 7
 339              	 .cfi_def_cfa_offset 0
 340 0016 7047     	 bx lr
 341              	 .cfi_endproc
 342              	.LFE133:
 344              	 .section .text.spi_set_master_mode,"ax",%progbits
 345              	 .align 1
 346              	 .syntax unified
 347              	 .thumb
 348              	 .thumb_func
 349              	 .fpu softvfp
 351              	spi_set_master_mode:
 352              	.LFB135:
 122:.././hal/sam3u1c/inc/spi.h **** 
 123:.././hal/sam3u1c/inc/spi.h **** /**
 124:.././hal/sam3u1c/inc/spi.h ****  * \brief Issue a LASTXFER command.
 125:.././hal/sam3u1c/inc/spi.h ****  *  The next transfer is the last transfer and after that CS is de-asserted.
 126:.././hal/sam3u1c/inc/spi.h ****  *
 127:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 128:.././hal/sam3u1c/inc/spi.h ****  */
 129:.././hal/sam3u1c/inc/spi.h **** static inline void spi_set_lastxfer(Spi *p_spi)
 130:.././hal/sam3u1c/inc/spi.h **** {
 131:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_CR = SPI_CR_LASTXFER;
 132:.././hal/sam3u1c/inc/spi.h **** }
 133:.././hal/sam3u1c/inc/spi.h **** 
 134:.././hal/sam3u1c/inc/spi.h **** /**
 135:.././hal/sam3u1c/inc/spi.h ****  * \brief Set SPI to Master mode.
 136:.././hal/sam3u1c/inc/spi.h ****  *
 137:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 138:.././hal/sam3u1c/inc/spi.h ****  */
 139:.././hal/sam3u1c/inc/spi.h **** static inline void spi_set_master_mode(Spi *p_spi)
 140:.././hal/sam3u1c/inc/spi.h **** {
 353              	 .loc 3 140 1
 354              	 .cfi_startproc
 355              	 
 356              	 
 357              	 
 358 0000 80B4     	 push {r7}
 359              	.LCFI28:
 360              	 .cfi_def_cfa_offset 4
 361              	 .cfi_offset 7,-4
 362 0002 83B0     	 sub sp,sp,#12
 363              	.LCFI29:
 364              	 .cfi_def_cfa_offset 16
 365 0004 00AF     	 add r7,sp,#0
 366              	.LCFI30:
 367              	 .cfi_def_cfa_register 7
 368 0006 7860     	 str r0,[r7,#4]
 141:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_MR |= SPI_MR_MSTR;
 369              	 .loc 3 141 16
 370 0008 7B68     	 ldr r3,[r7,#4]
 371 000a 5B68     	 ldr r3,[r3,#4]
 372 000c 43F00102 	 orr r2,r3,#1
 373 0010 7B68     	 ldr r3,[r7,#4]
 374 0012 5A60     	 str r2,[r3,#4]
 142:.././hal/sam3u1c/inc/spi.h **** }
 375              	 .loc 3 142 1
 376 0014 00BF     	 nop
 377 0016 0C37     	 adds r7,r7,#12
 378              	.LCFI31:
 379              	 .cfi_def_cfa_offset 4
 380 0018 BD46     	 mov sp,r7
 381              	.LCFI32:
 382              	 .cfi_def_cfa_register 13
 383              	 
 384 001a 80BC     	 pop {r7}
 385              	.LCFI33:
 386              	 .cfi_restore 7
 387              	 .cfi_def_cfa_offset 0
 388 001c 7047     	 bx lr
 389              	 .cfi_endproc
 390              	.LFE135:
 392              	 .section .text.spi_disable_mode_fault_detect,"ax",%progbits
 393              	 .align 1
 394              	 .syntax unified
 395              	 .thumb
 396              	 .thumb_func
 397              	 .fpu softvfp
 399              	spi_disable_mode_fault_detect:
 400              	.LFB145:
 143:.././hal/sam3u1c/inc/spi.h **** 
 144:.././hal/sam3u1c/inc/spi.h **** /**
 145:.././hal/sam3u1c/inc/spi.h ****  * \brief Set SPI to Slave mode.
 146:.././hal/sam3u1c/inc/spi.h ****  *
 147:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 148:.././hal/sam3u1c/inc/spi.h ****  */
 149:.././hal/sam3u1c/inc/spi.h **** static inline void spi_set_slave_mode(Spi *p_spi)
 150:.././hal/sam3u1c/inc/spi.h **** {
 151:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_MR &= (~SPI_MR_MSTR);
 152:.././hal/sam3u1c/inc/spi.h **** }
 153:.././hal/sam3u1c/inc/spi.h **** 
 154:.././hal/sam3u1c/inc/spi.h **** /**
 155:.././hal/sam3u1c/inc/spi.h ****  * \brief Get SPI work mode.
 156:.././hal/sam3u1c/inc/spi.h ****  *
 157:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 158:.././hal/sam3u1c/inc/spi.h ****  *
 159:.././hal/sam3u1c/inc/spi.h ****  * \return 1 for master mode, 0 for slave mode.
 160:.././hal/sam3u1c/inc/spi.h ****  */
 161:.././hal/sam3u1c/inc/spi.h **** static inline uint32_t spi_get_mode(Spi *p_spi)
 162:.././hal/sam3u1c/inc/spi.h **** {
 163:.././hal/sam3u1c/inc/spi.h **** 	if (p_spi->SPI_MR & SPI_MR_MSTR) {
 164:.././hal/sam3u1c/inc/spi.h **** 		return 1;
 165:.././hal/sam3u1c/inc/spi.h **** 	} else {
 166:.././hal/sam3u1c/inc/spi.h **** 		return 0;
 167:.././hal/sam3u1c/inc/spi.h **** 	}
 168:.././hal/sam3u1c/inc/spi.h **** }
 169:.././hal/sam3u1c/inc/spi.h **** 
 170:.././hal/sam3u1c/inc/spi.h **** /**
 171:.././hal/sam3u1c/inc/spi.h ****  * \brief Set Variable Peripheral Select.
 172:.././hal/sam3u1c/inc/spi.h ****  * Peripheral Chip Select can be controlled by SPI_TDR.
 173:.././hal/sam3u1c/inc/spi.h ****  *
 174:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 175:.././hal/sam3u1c/inc/spi.h ****  */
 176:.././hal/sam3u1c/inc/spi.h **** static inline void spi_set_variable_peripheral_select(Spi *p_spi)
 177:.././hal/sam3u1c/inc/spi.h **** {
 178:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_MR |= SPI_MR_PS;
 179:.././hal/sam3u1c/inc/spi.h **** }
 180:.././hal/sam3u1c/inc/spi.h **** 
 181:.././hal/sam3u1c/inc/spi.h **** /**
 182:.././hal/sam3u1c/inc/spi.h ****  * \brief Set Fixed Peripheral Select.
 183:.././hal/sam3u1c/inc/spi.h ****  *  Peripheral Chip Select is controlled by SPI_MR.
 184:.././hal/sam3u1c/inc/spi.h ****  *
 185:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 186:.././hal/sam3u1c/inc/spi.h ****  */
 187:.././hal/sam3u1c/inc/spi.h **** static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
 188:.././hal/sam3u1c/inc/spi.h **** {
 189:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_MR &= (~SPI_MR_PS);
 190:.././hal/sam3u1c/inc/spi.h **** }
 191:.././hal/sam3u1c/inc/spi.h **** 
 192:.././hal/sam3u1c/inc/spi.h **** /**
 193:.././hal/sam3u1c/inc/spi.h ****  * \brief Get Peripheral Select mode.
 194:.././hal/sam3u1c/inc/spi.h ****  *
 195:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 196:.././hal/sam3u1c/inc/spi.h ****  *
 197:.././hal/sam3u1c/inc/spi.h ****  * \return 1 for Variable mode, 0 for fixed mode.
 198:.././hal/sam3u1c/inc/spi.h ****  */
 199:.././hal/sam3u1c/inc/spi.h **** static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
 200:.././hal/sam3u1c/inc/spi.h **** {
 201:.././hal/sam3u1c/inc/spi.h **** 	if (p_spi->SPI_MR & SPI_MR_PS) {
 202:.././hal/sam3u1c/inc/spi.h **** 		return 1;
 203:.././hal/sam3u1c/inc/spi.h **** 	} else {
 204:.././hal/sam3u1c/inc/spi.h **** 		return 0;
 205:.././hal/sam3u1c/inc/spi.h **** 	}
 206:.././hal/sam3u1c/inc/spi.h **** }
 207:.././hal/sam3u1c/inc/spi.h **** 
 208:.././hal/sam3u1c/inc/spi.h **** /**
 209:.././hal/sam3u1c/inc/spi.h ****  * \brief Enable Peripheral Select Decode.
 210:.././hal/sam3u1c/inc/spi.h ****  *
 211:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 212:.././hal/sam3u1c/inc/spi.h ****  */
 213:.././hal/sam3u1c/inc/spi.h **** static inline void spi_enable_peripheral_select_decode(Spi *p_spi)
 214:.././hal/sam3u1c/inc/spi.h **** {
 215:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_MR |= SPI_MR_PCSDEC;
 216:.././hal/sam3u1c/inc/spi.h **** }
 217:.././hal/sam3u1c/inc/spi.h **** 
 218:.././hal/sam3u1c/inc/spi.h **** /**
 219:.././hal/sam3u1c/inc/spi.h ****  * \brief Disable Peripheral Select Decode.
 220:.././hal/sam3u1c/inc/spi.h ****  *
 221:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 222:.././hal/sam3u1c/inc/spi.h ****  */
 223:.././hal/sam3u1c/inc/spi.h **** static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
 224:.././hal/sam3u1c/inc/spi.h **** {
 225:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
 226:.././hal/sam3u1c/inc/spi.h **** }
 227:.././hal/sam3u1c/inc/spi.h **** 
 228:.././hal/sam3u1c/inc/spi.h **** /**
 229:.././hal/sam3u1c/inc/spi.h ****  * \brief Get Peripheral Select Decode mode.
 230:.././hal/sam3u1c/inc/spi.h ****  *
 231:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 232:.././hal/sam3u1c/inc/spi.h ****  *
 233:.././hal/sam3u1c/inc/spi.h ****  * \return 1 for decode mode, 0 for direct mode.
 234:.././hal/sam3u1c/inc/spi.h ****  */
 235:.././hal/sam3u1c/inc/spi.h **** static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
 236:.././hal/sam3u1c/inc/spi.h **** {
 237:.././hal/sam3u1c/inc/spi.h **** 	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
 238:.././hal/sam3u1c/inc/spi.h **** 		return 1;
 239:.././hal/sam3u1c/inc/spi.h **** 	} else {
 240:.././hal/sam3u1c/inc/spi.h **** 		return 0;
 241:.././hal/sam3u1c/inc/spi.h **** 	}
 242:.././hal/sam3u1c/inc/spi.h **** }
 243:.././hal/sam3u1c/inc/spi.h **** 
 244:.././hal/sam3u1c/inc/spi.h **** /**
 245:.././hal/sam3u1c/inc/spi.h ****  * \brief Enable Mode Fault Detection.
 246:.././hal/sam3u1c/inc/spi.h ****  *
 247:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 248:.././hal/sam3u1c/inc/spi.h ****  */
 249:.././hal/sam3u1c/inc/spi.h **** static inline void spi_enable_mode_fault_detect(Spi *p_spi)
 250:.././hal/sam3u1c/inc/spi.h **** {
 251:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_MR &= (~SPI_MR_MODFDIS);
 252:.././hal/sam3u1c/inc/spi.h **** }
 253:.././hal/sam3u1c/inc/spi.h **** 
 254:.././hal/sam3u1c/inc/spi.h **** /**
 255:.././hal/sam3u1c/inc/spi.h ****  * \brief Disable Mode Fault Detection.
 256:.././hal/sam3u1c/inc/spi.h ****  *
 257:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 258:.././hal/sam3u1c/inc/spi.h ****  */
 259:.././hal/sam3u1c/inc/spi.h **** static inline void spi_disable_mode_fault_detect(Spi *p_spi)
 260:.././hal/sam3u1c/inc/spi.h **** {
 401              	 .loc 3 260 1
 402              	 .cfi_startproc
 403              	 
 404              	 
 405              	 
 406 0000 80B4     	 push {r7}
 407              	.LCFI34:
 408              	 .cfi_def_cfa_offset 4
 409              	 .cfi_offset 7,-4
 410 0002 83B0     	 sub sp,sp,#12
 411              	.LCFI35:
 412              	 .cfi_def_cfa_offset 16
 413 0004 00AF     	 add r7,sp,#0
 414              	.LCFI36:
 415              	 .cfi_def_cfa_register 7
 416 0006 7860     	 str r0,[r7,#4]
 261:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_MR |= SPI_MR_MODFDIS;
 417              	 .loc 3 261 16
 418 0008 7B68     	 ldr r3,[r7,#4]
 419 000a 5B68     	 ldr r3,[r3,#4]
 420 000c 43F01002 	 orr r2,r3,#16
 421 0010 7B68     	 ldr r3,[r7,#4]
 422 0012 5A60     	 str r2,[r3,#4]
 262:.././hal/sam3u1c/inc/spi.h **** }
 423              	 .loc 3 262 1
 424 0014 00BF     	 nop
 425 0016 0C37     	 adds r7,r7,#12
 426              	.LCFI37:
 427              	 .cfi_def_cfa_offset 4
 428 0018 BD46     	 mov sp,r7
 429              	.LCFI38:
 430              	 .cfi_def_cfa_register 13
 431              	 
 432 001a 80BC     	 pop {r7}
 433              	.LCFI39:
 434              	 .cfi_restore 7
 435              	 .cfi_def_cfa_offset 0
 436 001c 7047     	 bx lr
 437              	 .cfi_endproc
 438              	.LFE145:
 440              	 .section .text.spi_disable_loopback,"ax",%progbits
 441              	 .align 1
 442              	 .syntax unified
 443              	 .thumb
 444              	 .thumb_func
 445              	 .fpu softvfp
 447              	spi_disable_loopback:
 448              	.LFB151:
 263:.././hal/sam3u1c/inc/spi.h **** 
 264:.././hal/sam3u1c/inc/spi.h **** /**
 265:.././hal/sam3u1c/inc/spi.h ****  * \brief Check if mode fault detection is enabled.
 266:.././hal/sam3u1c/inc/spi.h ****  *
 267:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 268:.././hal/sam3u1c/inc/spi.h ****  *
 269:.././hal/sam3u1c/inc/spi.h ****  * \return 1 for disabled, 0 for enabled.
 270:.././hal/sam3u1c/inc/spi.h ****  */
 271:.././hal/sam3u1c/inc/spi.h **** static inline uint32_t spi_get_mode_fault_detect_setting(Spi *p_spi)
 272:.././hal/sam3u1c/inc/spi.h **** {
 273:.././hal/sam3u1c/inc/spi.h **** 	if (p_spi->SPI_MR & SPI_MR_MODFDIS) {
 274:.././hal/sam3u1c/inc/spi.h **** 		return 1;
 275:.././hal/sam3u1c/inc/spi.h **** 	} else {
 276:.././hal/sam3u1c/inc/spi.h **** 		return 0;
 277:.././hal/sam3u1c/inc/spi.h **** 	}
 278:.././hal/sam3u1c/inc/spi.h **** }
 279:.././hal/sam3u1c/inc/spi.h **** 
 280:.././hal/sam3u1c/inc/spi.h **** /**
 281:.././hal/sam3u1c/inc/spi.h ****  * \brief Enable waiting RX_EMPTY before transfer starts.
 282:.././hal/sam3u1c/inc/spi.h ****  *
 283:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 284:.././hal/sam3u1c/inc/spi.h ****  */
 285:.././hal/sam3u1c/inc/spi.h **** static inline void spi_enable_tx_on_rx_empty(Spi *p_spi)
 286:.././hal/sam3u1c/inc/spi.h **** {
 287:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_MR |= SPI_MR_WDRBT;
 288:.././hal/sam3u1c/inc/spi.h **** }
 289:.././hal/sam3u1c/inc/spi.h **** 
 290:.././hal/sam3u1c/inc/spi.h **** /**
 291:.././hal/sam3u1c/inc/spi.h ****  * \brief Disable waiting RX_EMPTY before transfer starts.
 292:.././hal/sam3u1c/inc/spi.h ****  *
 293:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 294:.././hal/sam3u1c/inc/spi.h ****  */
 295:.././hal/sam3u1c/inc/spi.h **** static inline void spi_disable_tx_on_rx_empty(Spi *p_spi)
 296:.././hal/sam3u1c/inc/spi.h **** {
 297:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_MR &= (~SPI_MR_WDRBT);
 298:.././hal/sam3u1c/inc/spi.h **** }
 299:.././hal/sam3u1c/inc/spi.h **** 
 300:.././hal/sam3u1c/inc/spi.h **** /**
 301:.././hal/sam3u1c/inc/spi.h ****  * \brief Check if SPI waits RX_EMPTY before transfer starts.
 302:.././hal/sam3u1c/inc/spi.h ****  *
 303:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 304:.././hal/sam3u1c/inc/spi.h ****  *
 305:.././hal/sam3u1c/inc/spi.h ****  * \return 1 for SPI waits, 0 for no wait.
 306:.././hal/sam3u1c/inc/spi.h ****  */
 307:.././hal/sam3u1c/inc/spi.h **** static inline uint32_t spi_get_tx_on_rx_empty_setting(Spi *p_spi)
 308:.././hal/sam3u1c/inc/spi.h **** {
 309:.././hal/sam3u1c/inc/spi.h **** 	if (p_spi->SPI_MR & SPI_MR_WDRBT) {
 310:.././hal/sam3u1c/inc/spi.h **** 		return 1;
 311:.././hal/sam3u1c/inc/spi.h **** 	} else {
 312:.././hal/sam3u1c/inc/spi.h **** 		return 0;
 313:.././hal/sam3u1c/inc/spi.h **** 	}
 314:.././hal/sam3u1c/inc/spi.h **** }
 315:.././hal/sam3u1c/inc/spi.h **** 
 316:.././hal/sam3u1c/inc/spi.h **** /**
 317:.././hal/sam3u1c/inc/spi.h ****  * \brief Enable loopback mode.
 318:.././hal/sam3u1c/inc/spi.h ****  *
 319:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 320:.././hal/sam3u1c/inc/spi.h ****  */
 321:.././hal/sam3u1c/inc/spi.h **** static inline void spi_enable_loopback(Spi *p_spi)
 322:.././hal/sam3u1c/inc/spi.h **** {
 323:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_MR |= SPI_MR_LLB;
 324:.././hal/sam3u1c/inc/spi.h **** }
 325:.././hal/sam3u1c/inc/spi.h **** 
 326:.././hal/sam3u1c/inc/spi.h **** /**
 327:.././hal/sam3u1c/inc/spi.h ****  * \brief Disable loopback mode.
 328:.././hal/sam3u1c/inc/spi.h ****  *
 329:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 330:.././hal/sam3u1c/inc/spi.h ****  */
 331:.././hal/sam3u1c/inc/spi.h **** static inline void spi_disable_loopback(Spi *p_spi)
 332:.././hal/sam3u1c/inc/spi.h **** {
 449              	 .loc 3 332 1
 450              	 .cfi_startproc
 451              	 
 452              	 
 453              	 
 454 0000 80B4     	 push {r7}
 455              	.LCFI40:
 456              	 .cfi_def_cfa_offset 4
 457              	 .cfi_offset 7,-4
 458 0002 83B0     	 sub sp,sp,#12
 459              	.LCFI41:
 460              	 .cfi_def_cfa_offset 16
 461 0004 00AF     	 add r7,sp,#0
 462              	.LCFI42:
 463              	 .cfi_def_cfa_register 7
 464 0006 7860     	 str r0,[r7,#4]
 333:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_MR &= (~SPI_MR_LLB);
 465              	 .loc 3 333 16
 466 0008 7B68     	 ldr r3,[r7,#4]
 467 000a 5B68     	 ldr r3,[r3,#4]
 468 000c 23F08002 	 bic r2,r3,#128
 469 0010 7B68     	 ldr r3,[r7,#4]
 470 0012 5A60     	 str r2,[r3,#4]
 334:.././hal/sam3u1c/inc/spi.h **** }
 471              	 .loc 3 334 1
 472 0014 00BF     	 nop
 473 0016 0C37     	 adds r7,r7,#12
 474              	.LCFI43:
 475              	 .cfi_def_cfa_offset 4
 476 0018 BD46     	 mov sp,r7
 477              	.LCFI44:
 478              	 .cfi_def_cfa_register 13
 479              	 
 480 001a 80BC     	 pop {r7}
 481              	.LCFI45:
 482              	 .cfi_restore 7
 483              	 .cfi_def_cfa_offset 0
 484 001c 7047     	 bx lr
 485              	 .cfi_endproc
 486              	.LFE151:
 488              	 .section .text.spi_is_tx_empty,"ax",%progbits
 489              	 .align 1
 490              	 .syntax unified
 491              	 .thumb
 492              	 .thumb_func
 493              	 .fpu softvfp
 495              	spi_is_tx_empty:
 496              	.LFB156:
 335:.././hal/sam3u1c/inc/spi.h **** 
 336:.././hal/sam3u1c/inc/spi.h **** void spi_enable_clock(Spi *p_spi);
 337:.././hal/sam3u1c/inc/spi.h **** void spi_disable_clock(Spi *p_spi);
 338:.././hal/sam3u1c/inc/spi.h **** void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value);
 339:.././hal/sam3u1c/inc/spi.h **** void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay);
 340:.././hal/sam3u1c/inc/spi.h **** spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs);
 341:.././hal/sam3u1c/inc/spi.h **** spi_status_t spi_write(Spi *p_spi, uint16_t us_data, uint8_t uc_pcs,
 342:.././hal/sam3u1c/inc/spi.h **** 		uint8_t uc_last);
 343:.././hal/sam3u1c/inc/spi.h **** 
 344:.././hal/sam3u1c/inc/spi.h **** /**
 345:.././hal/sam3u1c/inc/spi.h ****  * \brief Read status register.
 346:.././hal/sam3u1c/inc/spi.h ****  *
 347:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 348:.././hal/sam3u1c/inc/spi.h ****  *
 349:.././hal/sam3u1c/inc/spi.h ****  * \return SPI status register value.
 350:.././hal/sam3u1c/inc/spi.h ****  */
 351:.././hal/sam3u1c/inc/spi.h **** static inline uint32_t spi_read_status(Spi *p_spi)
 352:.././hal/sam3u1c/inc/spi.h **** {
 353:.././hal/sam3u1c/inc/spi.h **** 	return p_spi->SPI_SR;
 354:.././hal/sam3u1c/inc/spi.h **** }
 355:.././hal/sam3u1c/inc/spi.h **** 
 356:.././hal/sam3u1c/inc/spi.h **** /**
 357:.././hal/sam3u1c/inc/spi.h ****  * \brief Test if the SPI is enabled.
 358:.././hal/sam3u1c/inc/spi.h ****  *
 359:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 360:.././hal/sam3u1c/inc/spi.h ****  *
 361:.././hal/sam3u1c/inc/spi.h ****  * \return 1 if the SPI is enabled, otherwise 0.
 362:.././hal/sam3u1c/inc/spi.h ****  */
 363:.././hal/sam3u1c/inc/spi.h **** static inline uint32_t spi_is_enabled(Spi *p_spi)
 364:.././hal/sam3u1c/inc/spi.h **** {
 365:.././hal/sam3u1c/inc/spi.h **** 	if (p_spi->SPI_SR & SPI_SR_SPIENS) {
 366:.././hal/sam3u1c/inc/spi.h **** 		return 1;
 367:.././hal/sam3u1c/inc/spi.h **** 	} else {
 368:.././hal/sam3u1c/inc/spi.h **** 		return 0;
 369:.././hal/sam3u1c/inc/spi.h **** 	}
 370:.././hal/sam3u1c/inc/spi.h **** }
 371:.././hal/sam3u1c/inc/spi.h **** 
 372:.././hal/sam3u1c/inc/spi.h **** /**
 373:.././hal/sam3u1c/inc/spi.h ****  * \brief Put one data to a SPI peripheral.
 374:.././hal/sam3u1c/inc/spi.h ****  *
 375:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Base address of the SPI instance.
 376:.././hal/sam3u1c/inc/spi.h ****  * \param data The data byte to be loaded
 377:.././hal/sam3u1c/inc/spi.h ****  *
 378:.././hal/sam3u1c/inc/spi.h ****  */
 379:.././hal/sam3u1c/inc/spi.h **** static inline void spi_put(Spi *p_spi, uint16_t data)
 380:.././hal/sam3u1c/inc/spi.h **** {
 381:.././hal/sam3u1c/inc/spi.h **** 	p_spi->SPI_TDR = SPI_TDR_TD(data);
 382:.././hal/sam3u1c/inc/spi.h **** }
 383:.././hal/sam3u1c/inc/spi.h **** 
 384:.././hal/sam3u1c/inc/spi.h **** /** \brief Get one data to a SPI peripheral.
 385:.././hal/sam3u1c/inc/spi.h ****  *
 386:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Base address of the SPI instance.
 387:.././hal/sam3u1c/inc/spi.h ****  * \return The data byte
 388:.././hal/sam3u1c/inc/spi.h ****  *
 389:.././hal/sam3u1c/inc/spi.h ****  */
 390:.././hal/sam3u1c/inc/spi.h **** static inline uint16_t spi_get(Spi *p_spi)
 391:.././hal/sam3u1c/inc/spi.h **** {
 392:.././hal/sam3u1c/inc/spi.h **** 	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
 393:.././hal/sam3u1c/inc/spi.h **** }
 394:.././hal/sam3u1c/inc/spi.h **** 
 395:.././hal/sam3u1c/inc/spi.h **** /**
 396:.././hal/sam3u1c/inc/spi.h ****  * \brief Check if all transmissions are complete.
 397:.././hal/sam3u1c/inc/spi.h ****  *
 398:.././hal/sam3u1c/inc/spi.h ****  * \param p_spi Pointer to an SPI instance.
 399:.././hal/sam3u1c/inc/spi.h ****  *
 400:.././hal/sam3u1c/inc/spi.h ****  * \retval 1 if transmissions are complete.
 401:.././hal/sam3u1c/inc/spi.h ****  * \retval 0 if transmissions are not complete.
 402:.././hal/sam3u1c/inc/spi.h ****  */
 403:.././hal/sam3u1c/inc/spi.h **** static inline uint32_t spi_is_tx_empty(Spi *p_spi)
 404:.././hal/sam3u1c/inc/spi.h **** {
 497              	 .loc 3 404 1
 498              	 .cfi_startproc
 499              	 
 500              	 
 501              	 
 502 0000 80B4     	 push {r7}
 503              	.LCFI46:
 504              	 .cfi_def_cfa_offset 4
 505              	 .cfi_offset 7,-4
 506 0002 83B0     	 sub sp,sp,#12
 507              	.LCFI47:
 508              	 .cfi_def_cfa_offset 16
 509 0004 00AF     	 add r7,sp,#0
 510              	.LCFI48:
 511              	 .cfi_def_cfa_register 7
 512 0006 7860     	 str r0,[r7,#4]
 405:.././hal/sam3u1c/inc/spi.h **** 	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
 513              	 .loc 3 405 11
 514 0008 7B68     	 ldr r3,[r7,#4]
 515 000a 1B69     	 ldr r3,[r3,#16]
 516              	 .loc 3 405 20
 517 000c 03F40073 	 and r3,r3,#512
 518              	 .loc 3 405 5
 519 0010 002B     	 cmp r3,#0
 520 0012 01D0     	 beq .L30
 406:.././hal/sam3u1c/inc/spi.h **** 		return 1;
 521              	 .loc 3 406 10
 522 0014 0123     	 movs r3,#1
 523 0016 00E0     	 b .L31
 524              	.L30:
 407:.././hal/sam3u1c/inc/spi.h **** 	} else {
 408:.././hal/sam3u1c/inc/spi.h **** 		return 0;
 525              	 .loc 3 408 10
 526 0018 0023     	 movs r3,#0
 527              	.L31:
 409:.././hal/sam3u1c/inc/spi.h **** 	}
 410:.././hal/sam3u1c/inc/spi.h **** }
 528              	 .loc 3 410 1
 529 001a 1846     	 mov r0,r3
 530 001c 0C37     	 adds r7,r7,#12
 531              	.LCFI49:
 532              	 .cfi_def_cfa_offset 4
 533 001e BD46     	 mov sp,r7
 534              	.LCFI50:
 535              	 .cfi_def_cfa_register 13
 536              	 
 537 0020 80BC     	 pop {r7}
 538              	.LCFI51:
 539              	 .cfi_restore 7
 540              	 .cfi_def_cfa_offset 0
 541 0022 7047     	 bx lr
 542              	 .cfi_endproc
 543              	.LFE156:
 545              	 .section .text.ISPTarget_SendByte,"ax",%progbits
 546              	 .align 1
 547              	 .syntax unified
 548              	 .thumb
 549              	 .thumb_func
 550              	 .fpu softvfp
 552              	ISPTarget_SendByte:
 553              	.LFB181:
 554              	 .file 4 "ISPTarget.h"
   1:ISPTarget.h   **** /* This file is based on the excellent LUFA Library, which is:
   2:ISPTarget.h   ****   Copyright (C) Dean Camera, 2013. See www.lufa-lib.org
   3:ISPTarget.h   ****   
   4:ISPTarget.h   ****   Note it has been modified for the SAM3U by NewAE Technology Inc.,
   5:ISPTarget.h   ****   changes Copyright (C) NewAE Technology Inc, 2015. Changes have
   6:ISPTarget.h   ****   generally basterdized and reduced the functionality of the original
   7:ISPTarget.h   ****   code, so please see original code if using this to port. 
   8:ISPTarget.h   **** */
   9:ISPTarget.h   **** 
  10:ISPTarget.h   **** /*
  11:ISPTarget.h   ****   Copyright 2013  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  12:ISPTarget.h   **** 
  13:ISPTarget.h   ****   Permission to use, copy, modify, distribute, and sell this
  14:ISPTarget.h   ****   software and its documentation for any purpose is hereby granted
  15:ISPTarget.h   ****   without fee, provided that the above copyright notice appear in
  16:ISPTarget.h   ****   all copies and that both that the copyright notice and this
  17:ISPTarget.h   ****   permission notice and warranty disclaimer appear in supporting
  18:ISPTarget.h   ****   documentation, and that the name of the author not be used in
  19:ISPTarget.h   ****   advertising or publicity pertaining to distribution of the
  20:ISPTarget.h   ****   software without specific, written prior permission.
  21:ISPTarget.h   **** 
  22:ISPTarget.h   ****   The author disclaims all warranties with regard to this
  23:ISPTarget.h   ****   software, including all implied warranties of merchantability
  24:ISPTarget.h   ****   and fitness.  In no event shall the author be liable for any
  25:ISPTarget.h   ****   special, indirect or consequential damages or any damages
  26:ISPTarget.h   ****   whatsoever resulting from loss of use, data or profits, whether
  27:ISPTarget.h   ****   in an action of contract, negligence or other tortious action,
  28:ISPTarget.h   ****   arising out of or in connection with the use or performance of
  29:ISPTarget.h   ****   this software.
  30:ISPTarget.h   **** */
  31:ISPTarget.h   **** 
  32:ISPTarget.h   **** /** \file
  33:ISPTarget.h   ****  *
  34:ISPTarget.h   ****  *  Header file for ISPTarget.c.
  35:ISPTarget.h   ****  */
  36:ISPTarget.h   **** 
  37:ISPTarget.h   **** #ifndef _ISP_TARGET_
  38:ISPTarget.h   **** #define _ISP_TARGET_
  39:ISPTarget.h   **** 
  40:ISPTarget.h   **** 	/* Includes: */
  41:ISPTarget.h   **** 		#include <asf.h>
  42:ISPTarget.h   **** 		#include "delay.h"
  43:ISPTarget.h   **** 		#include "spi.h"
  44:ISPTarget.h   **** 
  45:ISPTarget.h   **** 		#include "V2Protocol.h"
  46:ISPTarget.h   **** 		#include "ISPProtocol.h"
  47:ISPTarget.h   **** 
  48:ISPTarget.h   **** 	/* Macros: */
  49:ISPTarget.h   **** 		/** Low level device command to issue an extended FLASH address, for devices with over 128KB of F
  50:ISPTarget.h   **** 		#define LOAD_EXTENDED_ADDRESS_CMD     0x4D
  51:ISPTarget.h   **** 
  52:ISPTarget.h   **** 		//By default use SPI, can define this to 1 to use the USART module
  53:ISPTarget.h   **** 		//USART in use is defined by AVRISP_USART
  54:ISPTarget.h   **** 		#ifndef AVRISP_USEUART
  55:ISPTarget.h   **** 		#define AVRISP_USEUART 0
  56:ISPTarget.h   **** 		#define AVRISP_USART USART0
  57:ISPTarget.h   **** 		#define AVRISP_USART_ID ID_USART0
  58:ISPTarget.h   **** 		#endif
  59:ISPTarget.h   **** 
  60:ISPTarget.h   **** 	/* Function Prototypes: */
  61:ISPTarget.h   **** 		void    ISPTarget_EnableTargetISP(void);
  62:ISPTarget.h   **** 		void    ISPTarget_DisableTargetISP(void);	
  63:ISPTarget.h   **** 		void    ISPTarget_ChangeTargetResetLine(const bool ResetTarget);
  64:ISPTarget.h   **** 		uint8_t ISPTarget_WaitWhileTargetBusy(void);
  65:ISPTarget.h   **** 		void    ISPTarget_LoadExtendedAddress(void);
  66:ISPTarget.h   **** 		uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
  67:ISPTarget.h   **** 		                                      const uint16_t PollAddress,
  68:ISPTarget.h   **** 		                                      const uint8_t PollValue,
  69:ISPTarget.h   **** 		                                      const uint8_t DelayMS,
  70:ISPTarget.h   **** 		                                      const uint8_t ReadMemCommand);
  71:ISPTarget.h   **** 
  72:ISPTarget.h   **** 	/* Inline Functions: */
  73:ISPTarget.h   **** 		/** Sends a byte of ISP data to the attached target, using the appropriate SPI hardware or
  74:ISPTarget.h   **** 		 *  software routines depending on the selected ISP speed.
  75:ISPTarget.h   **** 		 *
  76:ISPTarget.h   **** 		 *  \param[in] Byte  Byte of data to send to the attached target
  77:ISPTarget.h   **** 		 */
  78:ISPTarget.h   **** 		static inline void ISPTarget_SendByte(const uint8_t data)
  79:ISPTarget.h   **** 		{
 555              	 .loc 4 79 3
 556              	 .cfi_startproc
 557              	 
 558              	 
 559 0000 90B5     	 push {r4,r7,lr}
 560              	.LCFI52:
 561              	 .cfi_def_cfa_offset 12
 562              	 .cfi_offset 4,-12
 563              	 .cfi_offset 7,-8
 564              	 .cfi_offset 14,-4
 565 0002 83B0     	 sub sp,sp,#12
 566              	.LCFI53:
 567              	 .cfi_def_cfa_offset 24
 568 0004 00AF     	 add r7,sp,#0
 569              	.LCFI54:
 570              	 .cfi_def_cfa_register 7
 571 0006 0346     	 mov r3,r0
 572 0008 FB71     	 strb r3,[r7,#7]
  80:ISPTarget.h   **** #if AVRISP_USEUART
  81:ISPTarget.h   **** 		  usart_putchar(AVRISP_USART, data);
  82:ISPTarget.h   **** #else
  83:ISPTarget.h   **** 		  spi_write(SPI, data, 0, 0);
 573              	 .loc 4 83 5
 574 000a FB79     	 ldrb r3,[r7,#7]
 575 000c 99B2     	 uxth r1,r3
 576 000e 0023     	 movs r3,#0
 577 0010 0022     	 movs r2,#0
 578 0012 0348     	 ldr r0,.L33
 579 0014 034C     	 ldr r4,.L33+4
 580 0016 A047     	 blx r4
 581              	.LVL2:
  84:ISPTarget.h   **** #endif
  85:ISPTarget.h   **** 		}
 582              	 .loc 4 85 3
 583 0018 00BF     	 nop
 584 001a 0C37     	 adds r7,r7,#12
 585              	.LCFI55:
 586              	 .cfi_def_cfa_offset 12
 587 001c BD46     	 mov sp,r7
 588              	.LCFI56:
 589              	 .cfi_def_cfa_register 13
 590              	 
 591 001e 90BD     	 pop {r4,r7,pc}
 592              	.L34:
 593              	 .align 2
 594              	.L33:
 595 0020 00800040 	 .word 1073774592
 596 0024 00000000 	 .word spi_write
 597              	 .cfi_endproc
 598              	.LFE181:
 600              	 .section .text.ISPTarget_ReceiveByte,"ax",%progbits
 601              	 .align 1
 602              	 .syntax unified
 603              	 .thumb
 604              	 .thumb_func
 605              	 .fpu softvfp
 607              	ISPTarget_ReceiveByte:
 608              	.LFB182:
  86:ISPTarget.h   **** 
  87:ISPTarget.h   **** 		/** DO NOT USE DIRECTLY - USE ISPTarget_TransferByte() INSTEAD. This will return
  88:ISPTarget.h   **** 		 *  the last read byte, which is probably not what you intended.
  89:ISPTarget.h   **** 		 *
  90:ISPTarget.h   **** 		 *  \return Received byte of data from the attached target
  91:ISPTarget.h   **** 		 */
  92:ISPTarget.h   **** 		static inline uint8_t ISPTarget_ReceiveByte(void)
  93:ISPTarget.h   **** 		{			
 609              	 .loc 4 93 3
 610              	 .cfi_startproc
 611              	 
 612              	 
 613 0000 80B5     	 push {r7,lr}
 614              	.LCFI57:
 615              	 .cfi_def_cfa_offset 8
 616              	 .cfi_offset 7,-8
 617              	 .cfi_offset 14,-4
 618 0002 82B0     	 sub sp,sp,#8
 619              	.LCFI58:
 620              	 .cfi_def_cfa_offset 16
 621 0004 00AF     	 add r7,sp,#0
 622              	.LCFI59:
 623              	 .cfi_def_cfa_register 7
  94:ISPTarget.h   **** #if AVRISP_USEUART
  95:ISPTarget.h   **** 			uint32_t ReceivedByte;
  96:ISPTarget.h   **** 			usart_getchar(AVRISP_USART, &ReceivedByte);
  97:ISPTarget.h   **** #else
  98:ISPTarget.h   **** 			uint16_t ReceivedByte;
  99:ISPTarget.h   **** 			uint8_t _;
 100:ISPTarget.h   **** 			spi_read(SPI, &ReceivedByte, &_);
 624              	 .loc 4 100 4
 625 0006 7A1D     	 adds r2,r7,#5
 626 0008 BB1D     	 adds r3,r7,#6
 627 000a 1946     	 mov r1,r3
 628 000c 0448     	 ldr r0,.L37
 629 000e 054B     	 ldr r3,.L37+4
 630 0010 9847     	 blx r3
 631              	.LVL3:
 101:ISPTarget.h   **** #endif		
 102:ISPTarget.h   **** 			#if defined(INVERTED_ISP_MISO)
 103:ISPTarget.h   **** 			return ~ReceivedByte;
 104:ISPTarget.h   **** 			#else
 105:ISPTarget.h   **** 			return  ReceivedByte;
 632              	 .loc 4 105 12
 633 0012 FB88     	 ldrh r3,[r7,#6]
 634 0014 DBB2     	 uxtb r3,r3
 106:ISPTarget.h   **** 			#endif
 107:ISPTarget.h   **** 		}
 635              	 .loc 4 107 3
 636 0016 1846     	 mov r0,r3
 637 0018 0837     	 adds r7,r7,#8
 638              	.LCFI60:
 639              	 .cfi_def_cfa_offset 8
 640 001a BD46     	 mov sp,r7
 641              	.LCFI61:
 642              	 .cfi_def_cfa_register 13
 643              	 
 644 001c 80BD     	 pop {r7,pc}
 645              	.L38:
 646 001e 00BF     	 .align 2
 647              	.L37:
 648 0020 00800040 	 .word 1073774592
 649 0024 00000000 	 .word spi_read
 650              	 .cfi_endproc
 651              	.LFE182:
 653              	 .section .text.ISPTarget_TransferByte,"ax",%progbits
 654              	 .align 1
 655              	 .syntax unified
 656              	 .thumb
 657              	 .thumb_func
 658              	 .fpu softvfp
 660              	ISPTarget_TransferByte:
 661              	.LFB183:
 108:ISPTarget.h   **** 
 109:ISPTarget.h   **** 		/** Sends and receives a byte of ISP data to and from the attached target, using the
 110:ISPTarget.h   **** 		 *  appropriate SPI hardware or software routines depending on the selected ISP speed.
 111:ISPTarget.h   **** 		 *
 112:ISPTarget.h   **** 		 *  \param[in] Byte  Byte of data to send to the attached target
 113:ISPTarget.h   **** 		 *
 114:ISPTarget.h   **** 		 *  \return Received byte of data from the attached target
 115:ISPTarget.h   **** 		 */
 116:ISPTarget.h   **** 		static inline uint8_t ISPTarget_TransferByte(const uint8_t data)
 117:ISPTarget.h   **** 		{
 662              	 .loc 4 117 3
 663              	 .cfi_startproc
 664              	 
 665              	 
 666 0000 80B5     	 push {r7,lr}
 667              	.LCFI62:
 668              	 .cfi_def_cfa_offset 8
 669              	 .cfi_offset 7,-8
 670              	 .cfi_offset 14,-4
 671 0002 82B0     	 sub sp,sp,#8
 672              	.LCFI63:
 673              	 .cfi_def_cfa_offset 16
 674 0004 00AF     	 add r7,sp,#0
 675              	.LCFI64:
 676              	 .cfi_def_cfa_register 7
 677 0006 0346     	 mov r3,r0
 678 0008 FB71     	 strb r3,[r7,#7]
 118:ISPTarget.h   **** 			ISPTarget_SendByte(data);
 679              	 .loc 4 118 4
 680 000a FB79     	 ldrb r3,[r7,#7]
 681 000c 1846     	 mov r0,r3
 682 000e 084B     	 ldr r3,.L42
 683 0010 9847     	 blx r3
 684              	.LVL4:
 119:ISPTarget.h   **** #if AVRISP_USEUART
 120:ISPTarget.h   **** 			while(usart_is_tx_empty(AVRISP_USART) == 0);
 121:ISPTarget.h   **** #else
 122:ISPTarget.h   **** 			while(spi_is_tx_empty(SPI) == 0);
 685              	 .loc 4 122 9
 686 0012 00BF     	 nop
 687              	.L40:
 688              	 .loc 4 122 10 discriminator 1
 689 0014 0748     	 ldr r0,.L42+4
 690 0016 084B     	 ldr r3,.L42+8
 691 0018 9847     	 blx r3
 692              	.LVL5:
 693 001a 0346     	 mov r3,r0
 694              	 .loc 4 122 9 discriminator 1
 695 001c 002B     	 cmp r3,#0
 696 001e F9D0     	 beq .L40
 123:ISPTarget.h   **** #endif
 124:ISPTarget.h   **** 			return ISPTarget_ReceiveByte();			
 697              	 .loc 4 124 11
 698 0020 064B     	 ldr r3,.L42+12
 699 0022 9847     	 blx r3
 700              	.LVL6:
 701 0024 0346     	 mov r3,r0
 125:ISPTarget.h   **** 		}
 702              	 .loc 4 125 3
 703 0026 1846     	 mov r0,r3
 704 0028 0837     	 adds r7,r7,#8
 705              	.LCFI65:
 706              	 .cfi_def_cfa_offset 8
 707 002a BD46     	 mov sp,r7
 708              	.LCFI66:
 709              	 .cfi_def_cfa_register 13
 710              	 
 711 002c 80BD     	 pop {r7,pc}
 712              	.L43:
 713 002e 00BF     	 .align 2
 714              	.L42:
 715 0030 00000000 	 .word ISPTarget_SendByte
 716 0034 00800040 	 .word 1073774592
 717 0038 00000000 	 .word spi_is_tx_empty
 718 003c 00000000 	 .word ISPTarget_ReceiveByte
 719              	 .cfi_endproc
 720              	.LFE183:
 722              	 .global avrispmkIIfreqs
 723              	 .section .data.avrispmkIIfreqs,"aw"
 724              	 .align 2
 727              	avrispmkIIfreqs:
 728 0000 00127A00 	 .word 8000000
 729 0004 00093D00 	 .word 4000000
 730 0008 80841E00 	 .word 2000000
 731 000c 40420F00 	 .word 1000000
 732 0010 20A10700 	 .word 500000
 733 0014 90D00300 	 .word 250000
 734 0018 48E80100 	 .word 125000
 735 001c 82780100 	 .word 96386
 736 0020 205F0100 	 .word 89888
 737 0024 F3480100 	 .word 84211
 738 0028 68350100 	 .word 79208
 739 002c 0F240100 	 .word 74767
 740 0030 8D140100 	 .word 70797
 741 0034 9B060100 	 .word 67227
 742 0038 00FA0000 	 .word 64000
 743 003c 8DEE0000 	 .word 61069
 744 0040 1BE40000 	 .word 58395
 745 0044 89DA0000 	 .word 55945
 746 0048 9DC90000 	 .word 51613
 747 004c 1AC20000 	 .word 49690
 748 0050 21BB0000 	 .word 47905
 749 0054 A3B40000 	 .word 46243
 750 0058 ECA80000 	 .word 43244
 751 005c 9DA30000 	 .word 41885
 752 0060 F1990000 	 .word 39409
 753 0064 86950000 	 .word 38278
 754 0068 688D0000 	 .word 36200
 755 006c 1F860000 	 .word 34335
 756 0070 8E7F0000 	 .word 32654
 757 0074 99790000 	 .word 31129
 758 0078 2C740000 	 .word 29740
 759 007c 366F0000 	 .word 28470
 760 0080 A86A0000 	 .word 27304
 761 0084 7C640000 	 .word 25724
 762 0088 C0600000 	 .word 24768
 763 008c A55B0000 	 .word 23461
 764 0090 0D570000 	 .word 22285
 765 0094 E5520000 	 .word 21221
 766 0098 1E4F0000 	 .word 20254
 767 009c AB4B0000 	 .word 19371
 768 00a0 82480000 	 .word 18562
 769 00a4 AF440000 	 .word 17583
 770 00a8 12420000 	 .word 16914
 771 00ac E13E0000 	 .word 16097
 772 00b0 FC3B0000 	 .word 15356
 773 00b4 B8380000 	 .word 14520
 774 00b8 5A360000 	 .word 13914
 775 00bc A8330000 	 .word 13224
 776 00c0 37310000 	 .word 12599
 777 00c4 FF2E0000 	 .word 12031
 778 00c8 F72C0000 	 .word 11511
 779 00cc C02A0000 	 .word 10944
 780 00d0 BF280000 	 .word 10431
 781 00d4 EB260000 	 .word 9963
 782 00d8 FC240000 	 .word 9468
 783 00dc 79230000 	 .word 9081
 784 00e0 A4210000 	 .word 8612
 785 00e4 2F200000 	 .word 8239
 786 00e8 AB1E0000 	 .word 7851
 787 00ec 4A1D0000 	 .word 7498
 788 00f0 E11B0000 	 .word 7137
 789 00f4 991A0000 	 .word 6809
 790 00f8 4E190000 	 .word 6478
 791 00fc 22180000 	 .word 6178
 792 0100 F7160000 	 .word 5879
 793 0104 E7150000 	 .word 5607
 794 0108 EF140000 	 .word 5359
 795 010c E5130000 	 .word 5093
 796 0110 06130000 	 .word 4870
 797 0114 19120000 	 .word 4633
 798 0118 42110000 	 .word 4418
 799 011c 71100000 	 .word 4209
 800 0120 B30F0000 	 .word 4019
 801 0124 EF0E0000 	 .word 3823
 802 0128 3D0E0000 	 .word 3645
 803 012c 920D0000 	 .word 3474
 804 0130 EE0C0000 	 .word 3310
 805 0134 590C0000 	 .word 3161
 806 0138 C30B0000 	 .word 3011
 807 013c 350B0000 	 .word 2869
 808 0140 AE0A0000 	 .word 2734
 809 0144 330A0000 	 .word 2611
 810 0148 B4090000 	 .word 2484
 811 014c 41090000 	 .word 2369
 812 0150 D1080000 	 .word 2257
 813 0154 68080000 	 .word 2152
 814 0158 04080000 	 .word 2052
 815 015c A4070000 	 .word 1956
 816 0160 4A070000 	 .word 1866
 817 0164 F3060000 	 .word 1779
 818 0168 9F060000 	 .word 1695
 819 016c 4F060000 	 .word 1615
 820 0170 03060000 	 .word 1539
 821 0174 BC050000 	 .word 1468
 822 0178 76050000 	 .word 1398
 823 017c 35050000 	 .word 1333
 824 0180 F7040000 	 .word 1271
 825 0184 BC040000 	 .word 1212
 826 0188 83040000 	 .word 1155
 827 018c 4D040000 	 .word 1101
 828 0190 19040000 	 .word 1049
 829 0194 E8030000 	 .word 1000
 830 0198 B9030000 	 .word 953
 831 019c 8D030000 	 .word 909
 832 01a0 62030000 	 .word 866
 833 01a4 3A030000 	 .word 826
 834 01a8 13030000 	 .word 787
 835 01ac EE020000 	 .word 750
 836 01b0 CB020000 	 .word 715
 837 01b4 AA020000 	 .word 682
 838 01b8 8A020000 	 .word 650
 839 01bc 6B020000 	 .word 619
 840 01c0 4E020000 	 .word 590
 841 01c4 33020000 	 .word 563
 842 01c8 18020000 	 .word 536
 843 01cc FF010000 	 .word 511
 844 01d0 E7010000 	 .word 487
 845 01d4 D1010000 	 .word 465
 846 01d8 BB010000 	 .word 443
 847 01dc A6010000 	 .word 422
 848 01e0 92010000 	 .word 402
 849 01e4 80010000 	 .word 384
 850 01e8 6E010000 	 .word 366
 851 01ec 5D010000 	 .word 349
 852 01f0 4C010000 	 .word 332
 853 01f4 3D010000 	 .word 317
 854 01f8 2E010000 	 .word 302
 855 01fc 20010000 	 .word 288
 856 0200 12010000 	 .word 274
 857 0204 05010000 	 .word 261
 858 0208 F9000000 	 .word 249
 859 020c EE000000 	 .word 238
 860 0210 E2000000 	 .word 226
 861 0214 D8000000 	 .word 216
 862 0218 CE000000 	 .word 206
 863 021c C4000000 	 .word 196
 864 0220 BB000000 	 .word 187
 865 0224 B2000000 	 .word 178
 866 0228 AA000000 	 .word 170
 867 022c A2000000 	 .word 162
 868 0230 9A000000 	 .word 154
 869 0234 93000000 	 .word 147
 870 0238 8C000000 	 .word 140
 871 023c 86000000 	 .word 134
 872 0240 80000000 	 .word 128
 873 0244 7A000000 	 .word 122
 874 0248 74000000 	 .word 116
 875 024c 6F000000 	 .word 111
 876 0250 69000000 	 .word 105
 877 0254 64000000 	 .word 100
 878 0258 5F000000 	 .word 95
 879 025c 5B000000 	 .word 91
 880 0260 57000000 	 .word 87
 881 0264 53000000 	 .word 83
 882 0268 4F000000 	 .word 79
 883 026c 4B000000 	 .word 75
 884 0270 47000000 	 .word 71
 885 0274 44000000 	 .word 68
 886 0278 41000000 	 .word 65
 887 027c 3E000000 	 .word 62
 888 0280 3B000000 	 .word 59
 889 0284 38000000 	 .word 56
 890 0288 36000000 	 .word 54
 891 028c 33000000 	 .word 51
 892              	 .section .text.ISPTarget_EnableTargetISP,"ax",%progbits
 893              	 .align 1
 894              	 .global ISPTarget_EnableTargetISP
 895              	 .syntax unified
 896              	 .thumb
 897              	 .thumb_func
 898              	 .fpu softvfp
 900              	ISPTarget_EnableTargetISP:
 901              	.LFB184:
 902              	 .file 5 "ISPTarget.c"
   1:ISPTarget.c   **** /* This file is based on the excellent LUFA Library, which is:
   2:ISPTarget.c   ****   Copyright (C) Dean Camera, 2013. See www.lufa-lib.org
   3:ISPTarget.c   ****   
   4:ISPTarget.c   ****   Note it has been modified for the SAM3U by NewAE Technology Inc.,
   5:ISPTarget.c   ****   changes Copyright (C) NewAE Technology Inc, 2015. Changes have
   6:ISPTarget.c   ****   generally basterdized and reduced the functionality of the original
   7:ISPTarget.c   ****   code, so please see original code if using this to port. 
   8:ISPTarget.c   **** */
   9:ISPTarget.c   **** 
  10:ISPTarget.c   **** /*
  11:ISPTarget.c   ****   Copyright 2013  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  12:ISPTarget.c   **** 
  13:ISPTarget.c   ****   Permission to use, copy, modify, distribute, and sell this
  14:ISPTarget.c   ****   software and its documentation for any purpose is hereby granted
  15:ISPTarget.c   ****   without fee, provided that the above copyright notice appear in
  16:ISPTarget.c   ****   all copies and that both that the copyright notice and this
  17:ISPTarget.c   ****   permission notice and warranty disclaimer appear in supporting
  18:ISPTarget.c   ****   documentation, and that the name of the author not be used in
  19:ISPTarget.c   ****   advertising or publicity pertaining to distribution of the
  20:ISPTarget.c   ****   software without specific, written prior permission.
  21:ISPTarget.c   **** 
  22:ISPTarget.c   ****   The author disclaims all warranties with regard to this
  23:ISPTarget.c   ****   software, including all implied warranties of merchantability
  24:ISPTarget.c   ****   and fitness.  In no event shall the author be liable for any
  25:ISPTarget.c   ****   special, indirect or consequential damages or any damages
  26:ISPTarget.c   ****   whatsoever resulting from loss of use, data or profits, whether
  27:ISPTarget.c   ****   in an action of contract, negligence or other tortious action,
  28:ISPTarget.c   ****   arising out of or in connection with the use or performance of
  29:ISPTarget.c   ****   this software.
  30:ISPTarget.c   **** */
  31:ISPTarget.c   **** 
  32:ISPTarget.c   **** /** \file
  33:ISPTarget.c   ****  *
  34:ISPTarget.c   ****  *  Target-related functions for the ISP Protocol decoder.
  35:ISPTarget.c   ****  */
  36:ISPTarget.c   **** 
  37:ISPTarget.c   **** #include "ISPTarget.h"
  38:ISPTarget.c   **** 
  39:ISPTarget.c   **** #include "cw521.h"
  40:ISPTarget.c   **** // frequencies for AVRISP mkII ISP programming
  41:ISPTarget.c   **** uint32_t avrispmkIIfreqs[] = {
  42:ISPTarget.c   **** 	8000000, 4000000, 2000000, 1000000, 500000, 250000, 125000,
  43:ISPTarget.c   **** 	96386, 89888, 84211, 79208, 74767, 70797, 67227, 64000,
  44:ISPTarget.c   **** 	61069, 58395, 55945, 51613, 49690, 47905, 46243, 43244,
  45:ISPTarget.c   **** 	41885, 39409, 38278, 36200, 34335, 32654, 31129, 29740,
  46:ISPTarget.c   **** 	28470, 27304, 25724, 24768, 23461, 22285, 21221, 20254,
  47:ISPTarget.c   **** 	19371, 18562, 17583, 16914, 16097, 15356, 14520, 13914,
  48:ISPTarget.c   **** 	13224, 12599, 12031, 11511, 10944, 10431, 9963, 9468,
  49:ISPTarget.c   **** 	9081, 8612, 8239, 7851, 7498, 7137, 6809, 6478, 6178,
  50:ISPTarget.c   **** 	5879, 5607, 5359, 5093, 4870, 4633, 4418, 4209, 4019,
  51:ISPTarget.c   **** 	3823, 3645, 3474, 3310, 3161, 3011, 2869, 2734, 2611,
  52:ISPTarget.c   **** 	2484, 2369, 2257, 2152, 2052, 1956, 1866, 1779, 1695,
  53:ISPTarget.c   **** 	1615, 1539, 1468, 1398, 1333, 1271, 1212, 1155, 1101,
  54:ISPTarget.c   **** 	1049, 1000, 953, 909, 866, 826, 787, 750, 715, 682,
  55:ISPTarget.c   **** 	650, 619, 590, 563, 536, 511, 487, 465, 443, 422,
  56:ISPTarget.c   **** 	402, 384, 366, 349, 332, 317, 302, 288, 274, 261,
  57:ISPTarget.c   **** 	249, 238, 226, 216, 206, 196, 187, 178, 170, 162,
  58:ISPTarget.c   **** 	154, 147, 140, 134, 128, 122, 116, 111, 105, 100,
  59:ISPTarget.c   **** 	95, 91, 87, 83, 79, 75, 71, 68,
  60:ISPTarget.c   **** 	65, 62, 59, 56, 54, 51};
  61:ISPTarget.c   **** 
  62:ISPTarget.c   **** /** Initializes the appropriate SPI driver (hardware or software, depending on the selected ISP spe
  63:ISPTarget.c   ****  *  communication with the attached target.
  64:ISPTarget.c   ****  */
  65:ISPTarget.c   **** void ISPTarget_EnableTargetISP(void)
  66:ISPTarget.c   **** {
 903              	 .loc 5 66 1
 904              	 .cfi_startproc
 905              	 
 906              	 
 907 0000 80B5     	 push {r7,lr}
 908              	.LCFI67:
 909              	 .cfi_def_cfa_offset 8
 910              	 .cfi_offset 7,-8
 911              	 .cfi_offset 14,-4
 912 0002 82B0     	 sub sp,sp,#8
 913              	.LCFI68:
 914              	 .cfi_def_cfa_offset 16
 915 0004 00AF     	 add r7,sp,#0
 916              	.LCFI69:
 917              	 .cfi_def_cfa_register 7
  67:ISPTarget.c   **** 	uint32_t sckfreq = avrispmkIIfreqs[V2Params_GetParameterValue(PARAM_SCK_DURATION)];
 918              	 .loc 5 67 37
 919 0006 9820     	 movs r0,#152
 920 0008 264B     	 ldr r3,.L46
 921 000a 9847     	 blx r3
 922              	.LVL7:
 923 000c 0346     	 mov r3,r0
 924 000e 1A46     	 mov r2,r3
 925              	 .loc 5 67 11
 926 0010 254B     	 ldr r3,.L46+4
 927 0012 53F82230 	 ldr r3,[r3,r2,lsl#2]
 928 0016 3B60     	 str r3,[r7]
  68:ISPTarget.c   **** 
  69:ISPTarget.c   **** #if AVRISP_USEUART
  70:ISPTarget.c   **** 	usart_spi_opt_t spiopts;
  71:ISPTarget.c   **** 	spiopts.baudrate = sckfreq;
  72:ISPTarget.c   **** 	spiopts.char_length = US_MR_CHRL_8_BIT;
  73:ISPTarget.c   **** 	spiopts.channel_mode = US_MR_CHMODE_NORMAL;
  74:ISPTarget.c   **** 	spiopts.spi_mode = SPI_MODE_0;
  75:ISPTarget.c   **** 	
  76:ISPTarget.c   **** 	sysclk_enable_peripheral_clock(AVRISP_USART_ID);
  77:ISPTarget.c   **** 	usart_init_spi_master(AVRISP_USART, &spiopts, sysclk_get_cpu_hz());
  78:ISPTarget.c   **** 	gpio_configure_pin(AVRISP_MISO_GPIO, AVRISP_MISO_FLAGS);
  79:ISPTarget.c   **** 	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
  80:ISPTarget.c   **** 	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
  81:ISPTarget.c   **** 	usart_enable_tx(AVRISP_USART);
  82:ISPTarget.c   **** 	usart_enable_rx(AVRISP_USART);
  83:ISPTarget.c   **** #else
  84:ISPTarget.c   **** 	spi_enable_clock(SPI);
 929              	 .loc 5 84 2
 930 0018 2448     	 ldr r0,.L46+8
 931 001a 254B     	 ldr r3,.L46+12
 932 001c 9847     	 blx r3
 933              	.LVL8:
  85:ISPTarget.c   **** 	spi_reset(SPI);
 934              	 .loc 5 85 2
 935 001e 2348     	 ldr r0,.L46+8
 936 0020 244B     	 ldr r3,.L46+16
 937 0022 9847     	 blx r3
 938              	.LVL9:
  86:ISPTarget.c   **** 	spi_set_master_mode(SPI);
 939              	 .loc 5 86 2
 940 0024 2148     	 ldr r0,.L46+8
 941 0026 244B     	 ldr r3,.L46+20
 942 0028 9847     	 blx r3
 943              	.LVL10:
  87:ISPTarget.c   **** 	spi_disable_mode_fault_detect(SPI);
 944              	 .loc 5 87 2
 945 002a 2048     	 ldr r0,.L46+8
 946 002c 234B     	 ldr r3,.L46+24
 947 002e 9847     	 blx r3
 948              	.LVL11:
  88:ISPTarget.c   **** 	spi_disable_loopback(SPI);
 949              	 .loc 5 88 2
 950 0030 1E48     	 ldr r0,.L46+8
 951 0032 234B     	 ldr r3,.L46+28
 952 0034 9847     	 blx r3
 953              	.LVL12:
  89:ISPTarget.c   **** 	
  90:ISPTarget.c   **** 	/* Silently fail and just use faster baud if user requests something too slow */
  91:ISPTarget.c   **** 	int16_t bauddiv = spi_calc_baudrate_div(sckfreq, sysclk_get_cpu_hz());
 954              	 .loc 5 91 20
 955 0036 234B     	 ldr r3,.L46+32
 956 0038 9847     	 blx r3
 957              	.LVL13:
 958 003a 0346     	 mov r3,r0
 959 003c 1946     	 mov r1,r3
 960 003e 3868     	 ldr r0,[r7]
 961 0040 214B     	 ldr r3,.L46+36
 962 0042 9847     	 blx r3
 963              	.LVL14:
 964 0044 0346     	 mov r3,r0
 965 0046 FB80     	 strh r3,[r7,#6]
  92:ISPTarget.c   **** 	if (bauddiv < 0){
 966              	 .loc 5 92 5
 967 0048 B7F90630 	 ldrsh r3,[r7,#6]
 968 004c 002B     	 cmp r3,#0
 969 004e 01DA     	 bge .L45
  93:ISPTarget.c   **** 		bauddiv = 255;
 970              	 .loc 5 93 11
 971 0050 FF23     	 movs r3,#255
 972 0052 FB80     	 strh r3,[r7,#6]
 973              	.L45:
  94:ISPTarget.c   **** 	}
  95:ISPTarget.c   **** 	
  96:ISPTarget.c   **** 	//printf("SPI... %d %d\n", bauddiv, sckfreq);
  97:ISPTarget.c   **** 		
  98:ISPTarget.c   **** 	spi_set_clock_polarity(SPI, 0, 0);
 974              	 .loc 5 98 2
 975 0054 0022     	 movs r2,#0
 976 0056 0021     	 movs r1,#0
 977 0058 1448     	 ldr r0,.L46+8
 978 005a 1C4B     	 ldr r3,.L46+40
 979 005c 9847     	 blx r3
 980              	.LVL15:
  99:ISPTarget.c   **** 	spi_set_clock_phase(SPI, 0, 1);
 981              	 .loc 5 99 2
 982 005e 0122     	 movs r2,#1
 983 0060 0021     	 movs r1,#0
 984 0062 1248     	 ldr r0,.L46+8
 985 0064 1A4B     	 ldr r3,.L46+44
 986 0066 9847     	 blx r3
 987              	.LVL16:
 100:ISPTarget.c   **** 	spi_set_baudrate_div(SPI, 0, bauddiv);
 988              	 .loc 5 100 2
 989 0068 FB88     	 ldrh r3,[r7,#6]
 990 006a DBB2     	 uxtb r3,r3
 991 006c 1A46     	 mov r2,r3
 992 006e 0021     	 movs r1,#0
 993 0070 0E48     	 ldr r0,.L46+8
 994 0072 184B     	 ldr r3,.L46+48
 995 0074 9847     	 blx r3
 996              	.LVL17:
 101:ISPTarget.c   **** 	
 102:ISPTarget.c   **** 	spi_enable(SPI);
 997              	 .loc 5 102 2
 998 0076 0D48     	 ldr r0,.L46+8
 999 0078 174B     	 ldr r3,.L46+52
 1000 007a 9847     	 blx r3
 1001              	.LVL18:
 103:ISPTarget.c   **** 	
 104:ISPTarget.c   **** 	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
 1002              	 .loc 5 104 2
 1003 007c 4FF00061 	 mov r1,#134217728
 1004 0080 0E20     	 movs r0,#14
 1005 0082 164B     	 ldr r3,.L46+56
 1006 0084 9847     	 blx r3
 1007              	.LVL19:
 105:ISPTarget.c   **** 	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
 1008              	 .loc 5 105 2
 1009 0086 4FF00061 	 mov r1,#134217728
 1010 008a 0D20     	 movs r0,#13
 1011 008c 134B     	 ldr r3,.L46+56
 1012 008e 9847     	 blx r3
 1013              	.LVL20:
 106:ISPTarget.c   **** 	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
 1014              	 .loc 5 106 2
 1015 0090 4FF00061 	 mov r1,#134217728
 1016 0094 0F20     	 movs r0,#15
 1017 0096 114B     	 ldr r3,.L46+56
 1018 0098 9847     	 blx r3
 1019              	.LVL21:
 107:ISPTarget.c   **** #endif
 108:ISPTarget.c   **** 
 109:ISPTarget.c   **** }
 1020              	 .loc 5 109 1
 1021 009a 00BF     	 nop
 1022 009c 0837     	 adds r7,r7,#8
 1023              	.LCFI70:
 1024              	 .cfi_def_cfa_offset 8
 1025 009e BD46     	 mov sp,r7
 1026              	.LCFI71:
 1027              	 .cfi_def_cfa_register 13
 1028              	 
 1029 00a0 80BD     	 pop {r7,pc}
 1030              	.L47:
 1031 00a2 00BF     	 .align 2
 1032              	.L46:
 1033 00a4 00000000 	 .word V2Params_GetParameterValue
 1034 00a8 00000000 	 .word avrispmkIIfreqs
 1035 00ac 00800040 	 .word 1073774592
 1036 00b0 00000000 	 .word spi_enable_clock
 1037 00b4 00000000 	 .word spi_reset
 1038 00b8 00000000 	 .word spi_set_master_mode
 1039 00bc 00000000 	 .word spi_disable_mode_fault_detect
 1040 00c0 00000000 	 .word spi_disable_loopback
 1041 00c4 00000000 	 .word sysclk_get_cpu_hz
 1042 00c8 00000000 	 .word spi_calc_baudrate_div
 1043 00cc 00000000 	 .word spi_set_clock_polarity
 1044 00d0 00000000 	 .word spi_set_clock_phase
 1045 00d4 00000000 	 .word spi_set_baudrate_div
 1046 00d8 00000000 	 .word spi_enable
 1047 00dc 00000000 	 .word pio_configure_pin
 1048              	 .cfi_endproc
 1049              	.LFE184:
 1051              	 .section .text.ISPTarget_DisableTargetISP,"ax",%progbits
 1052              	 .align 1
 1053              	 .global ISPTarget_DisableTargetISP
 1054              	 .syntax unified
 1055              	 .thumb
 1056              	 .thumb_func
 1057              	 .fpu softvfp
 1059              	ISPTarget_DisableTargetISP:
 1060              	.LFB185:
 110:ISPTarget.c   **** 
 111:ISPTarget.c   **** /** Shuts down the current selected SPI driver (hardware or software, depending on the selected ISP
 112:ISPTarget.c   ****  *  further communications can occur until the driver is re-initialized.
 113:ISPTarget.c   ****  */
 114:ISPTarget.c   **** void ISPTarget_DisableTargetISP(void)
 115:ISPTarget.c   **** {
 1061              	 .loc 5 115 1
 1062              	 .cfi_startproc
 1063              	 
 1064              	 
 1065 0000 80B5     	 push {r7,lr}
 1066              	.LCFI72:
 1067              	 .cfi_def_cfa_offset 8
 1068              	 .cfi_offset 7,-8
 1069              	 .cfi_offset 14,-4
 1070 0002 00AF     	 add r7,sp,#0
 1071              	.LCFI73:
 1072              	 .cfi_def_cfa_register 7
 116:ISPTarget.c   **** #if AVRISP_USEUART
 117:ISPTarget.c   **** 	usart_disable_tx(AVRISP_USART);
 118:ISPTarget.c   **** 	usart_disable_rx(AVRISP_USART);
 119:ISPTarget.c   **** 	sysclk_disable_peripheral_clock(AVRISP_USART_ID);
 120:ISPTarget.c   **** #else
 121:ISPTarget.c   **** 	spi_disable(SPI);
 1073              	 .loc 5 121 2
 1074 0004 0348     	 ldr r0,.L49
 1075 0006 044B     	 ldr r3,.L49+4
 1076 0008 9847     	 blx r3
 1077              	.LVL22:
 122:ISPTarget.c   **** 	spi_disable_clock(SPI);
 1078              	 .loc 5 122 2
 1079 000a 0248     	 ldr r0,.L49
 1080 000c 034B     	 ldr r3,.L49+8
 1081 000e 9847     	 blx r3
 1082              	.LVL23:
 123:ISPTarget.c   **** #endif
 124:ISPTarget.c   **** }
 1083              	 .loc 5 124 1
 1084 0010 00BF     	 nop
 1085 0012 80BD     	 pop {r7,pc}
 1086              	.L50:
 1087              	 .align 2
 1088              	.L49:
 1089 0014 00800040 	 .word 1073774592
 1090 0018 00000000 	 .word spi_disable
 1091 001c 00000000 	 .word spi_disable_clock
 1092              	 .cfi_endproc
 1093              	.LFE185:
 1095              	 .section .text.ISPTarget_ChangeTargetResetLine,"ax",%progbits
 1096              	 .align 1
 1097              	 .global ISPTarget_ChangeTargetResetLine
 1098              	 .syntax unified
 1099              	 .thumb
 1100              	 .thumb_func
 1101              	 .fpu softvfp
 1103              	ISPTarget_ChangeTargetResetLine:
 1104              	.LFB186:
 125:ISPTarget.c   **** 
 126:ISPTarget.c   **** /** Asserts or deasserts the target's reset line, using the correct polarity as set by the host usi
 127:ISPTarget.c   ****  *  When not asserted, the line is tristated so as not to interfere with normal device operation.
 128:ISPTarget.c   ****  *
 129:ISPTarget.c   ****  *  \param[in] ResetTarget  Boolean true when the target should be held in reset, \c false otherwis
 130:ISPTarget.c   ****  */
 131:ISPTarget.c   **** void ISPTarget_ChangeTargetResetLine(const bool ResetTarget)
 132:ISPTarget.c   **** {	
 1105              	 .loc 5 132 1
 1106              	 .cfi_startproc
 1107              	 
 1108              	 
 1109 0000 80B5     	 push {r7,lr}
 1110              	.LCFI74:
 1111              	 .cfi_def_cfa_offset 8
 1112              	 .cfi_offset 7,-8
 1113              	 .cfi_offset 14,-4
 1114 0002 82B0     	 sub sp,sp,#8
 1115              	.LCFI75:
 1116              	 .cfi_def_cfa_offset 16
 1117 0004 00AF     	 add r7,sp,#0
 1118              	.LCFI76:
 1119              	 .cfi_def_cfa_register 7
 1120 0006 0346     	 mov r3,r0
 1121 0008 FB71     	 strb r3,[r7,#7]
 133:ISPTarget.c   **** 	if (ResetTarget)
 1122              	 .loc 5 133 5
 1123 000a FB79     	 ldrb r3,[r7,#7]
 1124 000c 002B     	 cmp r3,#0
 1125 000e 12D0     	 beq .L52
 134:ISPTarget.c   **** 	{
 135:ISPTarget.c   **** 		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
 1126              	 .loc 5 135 3
 1127 0010 4FF06051 	 mov r1,#939524096
 1128 0014 1120     	 movs r0,#17
 1129 0016 0C4B     	 ldr r3,.L56
 1130 0018 9847     	 blx r3
 1131              	.LVL24:
 136:ISPTarget.c   **** 
 137:ISPTarget.c   **** 		if (!(V2Params_GetParameterValue(PARAM_RESET_POLARITY))){
 1132              	 .loc 5 137 9
 1133 001a 9E20     	 movs r0,#158
 1134 001c 0B4B     	 ldr r3,.L56+4
 1135 001e 9847     	 blx r3
 1136              	.LVL25:
 1137 0020 0346     	 mov r3,r0
 1138              	 .loc 5 137 6
 1139 0022 002B     	 cmp r3,#0
 1140 0024 03D1     	 bne .L53
 138:ISPTarget.c   **** 		  gpio_set_pin_high(PIN_TARG_NRST_GPIO);
 1141              	 .loc 5 138 5
 1142 0026 1120     	 movs r0,#17
 1143 0028 094B     	 ldr r3,.L56+8
 1144 002a 9847     	 blx r3
 1145              	.LVL26:
 139:ISPTarget.c   **** 		}else{
 140:ISPTarget.c   ****     	  gpio_set_pin_low(PIN_TARG_NRST_GPIO);
 141:ISPTarget.c   **** 		}
 142:ISPTarget.c   **** 	}
 143:ISPTarget.c   **** 	else
 144:ISPTarget.c   **** 	{
 145:ISPTarget.c   **** 		gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
 146:ISPTarget.c   **** 	}
 147:ISPTarget.c   **** }
 1146              	 .loc 5 147 1
 1147 002c 08E0     	 b .L55
 1148              	.L53:
 140:ISPTarget.c   **** 		}
 1149              	 .loc 5 140 8
 1150 002e 1120     	 movs r0,#17
 1151 0030 084B     	 ldr r3,.L56+12
 1152 0032 9847     	 blx r3
 1153              	.LVL27:
 1154              	 .loc 5 147 1
 1155 0034 04E0     	 b .L55
 1156              	.L52:
 145:ISPTarget.c   **** 	}
 1157              	 .loc 5 145 3
 1158 0036 4FF02051 	 mov r1,#671088640
 1159 003a 1120     	 movs r0,#17
 1160 003c 024B     	 ldr r3,.L56
 1161 003e 9847     	 blx r3
 1162              	.LVL28:
 1163              	.L55:
 1164              	 .loc 5 147 1
 1165 0040 00BF     	 nop
 1166 0042 0837     	 adds r7,r7,#8
 1167              	.LCFI77:
 1168              	 .cfi_def_cfa_offset 8
 1169 0044 BD46     	 mov sp,r7
 1170              	.LCFI78:
 1171              	 .cfi_def_cfa_register 13
 1172              	 
 1173 0046 80BD     	 pop {r7,pc}
 1174              	.L57:
 1175              	 .align 2
 1176              	.L56:
 1177 0048 00000000 	 .word pio_configure_pin
 1178 004c 00000000 	 .word V2Params_GetParameterValue
 1179 0050 00000000 	 .word pio_set_pin_high
 1180 0054 00000000 	 .word pio_set_pin_low
 1181              	 .cfi_endproc
 1182              	.LFE186:
 1184              	 .section .text.ISPTarget_WaitWhileTargetBusy,"ax",%progbits
 1185              	 .align 1
 1186              	 .global ISPTarget_WaitWhileTargetBusy
 1187              	 .syntax unified
 1188              	 .thumb
 1189              	 .thumb_func
 1190              	 .fpu softvfp
 1192              	ISPTarget_WaitWhileTargetBusy:
 1193              	.LFB187:
 148:ISPTarget.c   **** 
 149:ISPTarget.c   **** /** Waits until the target has completed the last operation, by continuously polling the device's
 150:ISPTarget.c   ****  *  BUSY flag until it is cleared, or until the command timeout period has expired.
 151:ISPTarget.c   ****  *
 152:ISPTarget.c   ****  *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_T
 153:ISPTarget.c   ****  */
 154:ISPTarget.c   **** uint8_t ISPTarget_WaitWhileTargetBusy(void)
 155:ISPTarget.c   **** {
 1194              	 .loc 5 155 1
 1195              	 .cfi_startproc
 1196              	 
 1197              	 
 1198 0000 80B5     	 push {r7,lr}
 1199              	.LCFI79:
 1200              	 .cfi_def_cfa_offset 8
 1201              	 .cfi_offset 7,-8
 1202              	 .cfi_offset 14,-4
 1203 0002 00AF     	 add r7,sp,#0
 1204              	.LCFI80:
 1205              	 .cfi_def_cfa_register 7
 1206              	.L60:
 156:ISPTarget.c   **** 	do
 157:ISPTarget.c   **** 	{
 158:ISPTarget.c   **** 		ISPTarget_SendByte(0xF0);
 1207              	 .loc 5 158 3 discriminator 2
 1208 0004 F020     	 movs r0,#240
 1209 0006 0E4B     	 ldr r3,.L64
 1210 0008 9847     	 blx r3
 1211              	.LVL29:
 159:ISPTarget.c   **** 		ISPTarget_SendByte(0x00);
 1212              	 .loc 5 159 3 discriminator 2
 1213 000a 0020     	 movs r0,#0
 1214 000c 0C4B     	 ldr r3,.L64
 1215 000e 9847     	 blx r3
 1216              	.LVL30:
 160:ISPTarget.c   **** 		ISPTarget_SendByte(0x00);
 1217              	 .loc 5 160 3 discriminator 2
 1218 0010 0020     	 movs r0,#0
 1219 0012 0B4B     	 ldr r3,.L64
 1220 0014 9847     	 blx r3
 1221              	.LVL31:
 161:ISPTarget.c   **** 	}
 162:ISPTarget.c   **** 	while ((ISPTarget_TransferByte(0x00) & 0x01) && TimeoutTicksRemaining);
 1222              	 .loc 5 162 10 discriminator 2
 1223 0016 0020     	 movs r0,#0
 1224 0018 0A4B     	 ldr r3,.L64+4
 1225 001a 9847     	 blx r3
 1226              	.LVL32:
 1227 001c 0346     	 mov r3,r0
 1228              	 .loc 5 162 39 discriminator 2
 1229 001e 03F00103 	 and r3,r3,#1
 1230              	 .loc 5 162 2 discriminator 2
 1231 0022 002B     	 cmp r3,#0
 1232 0024 03D0     	 beq .L59
 1233              	 .loc 5 162 47 discriminator 1
 1234 0026 084B     	 ldr r3,.L64+8
 1235 0028 1B68     	 ldr r3,[r3]
 1236 002a 002B     	 cmp r3,#0
 1237 002c EAD1     	 bne .L60
 1238              	.L59:
 163:ISPTarget.c   **** 
 164:ISPTarget.c   **** 	return (TimeoutTicksRemaining > 0) ? STATUS_CMD_OK : STATUS_RDY_BSY_TOUT;
 1239              	 .loc 5 164 32
 1240 002e 064B     	 ldr r3,.L64+8
 1241 0030 1B68     	 ldr r3,[r3]
 1242              	 .loc 5 164 53
 1243 0032 002B     	 cmp r3,#0
 1244 0034 01D0     	 beq .L61
 1245              	 .loc 5 164 53 is_stmt 0 discriminator 1
 1246 0036 0023     	 movs r3,#0
 1247 0038 00E0     	 b .L62
 1248              	.L61:
 1249              	 .loc 5 164 53 discriminator 2
 1250 003a 8123     	 movs r3,#129
 1251              	.L62:
 165:ISPTarget.c   **** }
 1252              	 .loc 5 165 1 is_stmt 1 discriminator 4
 1253 003c 1846     	 mov r0,r3
 1254 003e 80BD     	 pop {r7,pc}
 1255              	.L65:
 1256              	 .align 2
 1257              	.L64:
 1258 0040 00000000 	 .word ISPTarget_SendByte
 1259 0044 00000000 	 .word ISPTarget_TransferByte
 1260 0048 00000000 	 .word TimeoutTicksRemaining
 1261              	 .cfi_endproc
 1262              	.LFE187:
 1264              	 .section .text.ISPTarget_LoadExtendedAddress,"ax",%progbits
 1265              	 .align 1
 1266              	 .global ISPTarget_LoadExtendedAddress
 1267              	 .syntax unified
 1268              	 .thumb
 1269              	 .thumb_func
 1270              	 .fpu softvfp
 1272              	ISPTarget_LoadExtendedAddress:
 1273              	.LFB188:
 166:ISPTarget.c   **** 
 167:ISPTarget.c   **** /** Sends a low-level LOAD EXTENDED ADDRESS command to the target, for addressing of memory beyond 
 168:ISPTarget.c   ****  *  64KB boundary. This sends the command with the correct address as indicated by the current addr
 169:ISPTarget.c   ****  *  pointer variable set by the host when a SET ADDRESS command is issued.
 170:ISPTarget.c   ****  */
 171:ISPTarget.c   **** void ISPTarget_LoadExtendedAddress(void)
 172:ISPTarget.c   **** {
 1274              	 .loc 5 172 1
 1275              	 .cfi_startproc
 1276              	 
 1277              	 
 1278 0000 80B5     	 push {r7,lr}
 1279              	.LCFI81:
 1280              	 .cfi_def_cfa_offset 8
 1281              	 .cfi_offset 7,-8
 1282              	 .cfi_offset 14,-4
 1283 0002 00AF     	 add r7,sp,#0
 1284              	.LCFI82:
 1285              	 .cfi_def_cfa_register 7
 173:ISPTarget.c   **** 	ISPTarget_SendByte(LOAD_EXTENDED_ADDRESS_CMD);
 1286              	 .loc 5 173 2
 1287 0004 4D20     	 movs r0,#77
 1288 0006 084B     	 ldr r3,.L67
 1289 0008 9847     	 blx r3
 1290              	.LVL33:
 174:ISPTarget.c   **** 	ISPTarget_SendByte(0x00);
 1291              	 .loc 5 174 2
 1292 000a 0020     	 movs r0,#0
 1293 000c 064B     	 ldr r3,.L67
 1294 000e 9847     	 blx r3
 1295              	.LVL34:
 175:ISPTarget.c   **** 	ISPTarget_SendByte(CurrentAddress >> 16);
 1296              	 .loc 5 175 36
 1297 0010 064B     	 ldr r3,.L67+4
 1298 0012 1B68     	 ldr r3,[r3]
 1299 0014 1B0C     	 lsrs r3,r3,#16
 1300              	 .loc 5 175 2
 1301 0016 DBB2     	 uxtb r3,r3
 1302 0018 1846     	 mov r0,r3
 1303 001a 034B     	 ldr r3,.L67
 1304 001c 9847     	 blx r3
 1305              	.LVL35:
 176:ISPTarget.c   **** 	ISPTarget_SendByte(0x00);
 1306              	 .loc 5 176 2
 1307 001e 0020     	 movs r0,#0
 1308 0020 014B     	 ldr r3,.L67
 1309 0022 9847     	 blx r3
 1310              	.LVL36:
 177:ISPTarget.c   **** }
 1311              	 .loc 5 177 1
 1312 0024 00BF     	 nop
 1313 0026 80BD     	 pop {r7,pc}
 1314              	.L68:
 1315              	 .align 2
 1316              	.L67:
 1317 0028 00000000 	 .word ISPTarget_SendByte
 1318 002c 00000000 	 .word CurrentAddress
 1319              	 .cfi_endproc
 1320              	.LFE188:
 1322              	 .section .text.ISPTarget_WaitForProgComplete,"ax",%progbits
 1323              	 .align 1
 1324              	 .global ISPTarget_WaitForProgComplete
 1325              	 .syntax unified
 1326              	 .thumb
 1327              	 .thumb_func
 1328              	 .fpu softvfp
 1330              	ISPTarget_WaitForProgComplete:
 1331              	.LFB189:
 178:ISPTarget.c   **** 
 179:ISPTarget.c   **** /** Waits until the last issued target memory programming command has completed, via the check mode
 180:ISPTarget.c   ****  *  the given parameters.
 181:ISPTarget.c   ****  *
 182:ISPTarget.c   ****  *  \param[in] ProgrammingMode  Programming mode used and completion check to use, a mask of \c PRO
 183:ISPTarget.c   ****  *  \param[in] PollAddress      Memory address to poll for completion if polling check mode used
 184:ISPTarget.c   ****  *  \param[in] PollValue        Poll value to check against if polling check mode used
 185:ISPTarget.c   ****  *  \param[in] DelayMS          Milliseconds to delay before returning if delay check mode used
 186:ISPTarget.c   ****  *  \param[in] ReadMemCommand   Device low-level READ MEMORY command to send if value check mode us
 187:ISPTarget.c   ****  *
 188:ISPTarget.c   ****  *  \return V2 Protocol status \ref STATUS_CMD_OK if the no timeout occurred, \ref STATUS_RDY_BSY_T
 189:ISPTarget.c   ****  *          \ref STATUS_CMD_TOUT otherwise
 190:ISPTarget.c   ****  */
 191:ISPTarget.c   **** uint8_t ISPTarget_WaitForProgComplete(const uint8_t ProgrammingMode,
 192:ISPTarget.c   ****                                       const uint16_t PollAddress,
 193:ISPTarget.c   ****                                       const uint8_t PollValue,
 194:ISPTarget.c   ****                                       const uint8_t DelayMS,
 195:ISPTarget.c   ****                                       const uint8_t ReadMemCommand)
 196:ISPTarget.c   **** {
 1332              	 .loc 5 196 1
 1333              	 .cfi_startproc
 1334              	 
 1335              	 
 1336 0000 90B5     	 push {r4,r7,lr}
 1337              	.LCFI83:
 1338              	 .cfi_def_cfa_offset 12
 1339              	 .cfi_offset 4,-12
 1340              	 .cfi_offset 7,-8
 1341              	 .cfi_offset 14,-4
 1342 0002 85B0     	 sub sp,sp,#20
 1343              	.LCFI84:
 1344              	 .cfi_def_cfa_offset 32
 1345 0004 00AF     	 add r7,sp,#0
 1346              	.LCFI85:
 1347              	 .cfi_def_cfa_register 7
 1348 0006 0446     	 mov r4,r0
 1349 0008 0846     	 mov r0,r1
 1350 000a 1146     	 mov r1,r2
 1351 000c 1A46     	 mov r2,r3
 1352 000e 2346     	 mov r3,r4
 1353 0010 FB71     	 strb r3,[r7,#7]
 1354 0012 0346     	 mov r3,r0
 1355 0014 BB80     	 strh r3,[r7,#4]
 1356 0016 0B46     	 mov r3,r1
 1357 0018 BB71     	 strb r3,[r7,#6]
 1358 001a 1346     	 mov r3,r2
 1359 001c FB70     	 strb r3,[r7,#3]
 197:ISPTarget.c   **** 	uint8_t ProgrammingStatus = STATUS_CMD_OK;
 1360              	 .loc 5 197 10
 1361 001e 0023     	 movs r3,#0
 1362 0020 FB73     	 strb r3,[r7,#15]
 198:ISPTarget.c   **** 
 199:ISPTarget.c   **** 	/* Determine method of Programming Complete check */
 200:ISPTarget.c   **** 	switch (ProgrammingMode & ~(PROG_MODE_PAGED_WRITES_MASK | PROG_MODE_COMMIT_PAGE_MASK))
 1363              	 .loc 5 200 26
 1364 0022 FB79     	 ldrb r3,[r7,#7]
 1365 0024 23F08103 	 bic r3,r3,#129
 1366              	 .loc 5 200 2
 1367 0028 202B     	 cmp r3,#32
 1368 002a 45DC     	 bgt .L70
 1369 002c 022B     	 cmp r3,#2
 1370 002e 76DB     	 blt .L71
 1371 0030 023B     	 subs r3,r3,#2
 1372 0032 1E2B     	 cmp r3,#30
 1373 0034 73D8     	 bhi .L71
 1374 0036 01A2     	 adr r2,.L73
 1375 0038 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1376              	 .p2align 2
 1377              	.L73:
 1378 003c BF000000 	 .word .L74+1
 1379 0040 1F010000 	 .word .L71+1
 1380 0044 CB000000 	 .word .L72+1
 1381 0048 1F010000 	 .word .L71+1
 1382 004c 1F010000 	 .word .L71+1
 1383 0050 1F010000 	 .word .L71+1
 1384 0054 13010000 	 .word .L75+1
 1385 0058 1F010000 	 .word .L71+1
 1386 005c 1F010000 	 .word .L71+1
 1387 0060 1F010000 	 .word .L71+1
 1388 0064 1F010000 	 .word .L71+1
 1389 0068 1F010000 	 .word .L71+1
 1390 006c 1F010000 	 .word .L71+1
 1391 0070 1F010000 	 .word .L71+1
 1392 0074 BF000000 	 .word .L74+1
 1393 0078 1F010000 	 .word .L71+1
 1394 007c 1F010000 	 .word .L71+1
 1395 0080 1F010000 	 .word .L71+1
 1396 0084 1F010000 	 .word .L71+1
 1397 0088 1F010000 	 .word .L71+1
 1398 008c 1F010000 	 .word .L71+1
 1399 0090 1F010000 	 .word .L71+1
 1400 0094 1F010000 	 .word .L71+1
 1401 0098 1F010000 	 .word .L71+1
 1402 009c 1F010000 	 .word .L71+1
 1403 00a0 1F010000 	 .word .L71+1
 1404 00a4 1F010000 	 .word .L71+1
 1405 00a8 1F010000 	 .word .L71+1
 1406 00ac 1F010000 	 .word .L71+1
 1407 00b0 1F010000 	 .word .L71+1
 1408 00b4 CB000000 	 .word .L72+1
 1409              	 .p2align 1
 1410              	.L70:
 1411 00b8 402B     	 cmp r3,#64
 1412 00ba 2AD0     	 beq .L75
 1413 00bc 2FE0     	 b .L71
 1414              	.L74:
 201:ISPTarget.c   **** 	{
 202:ISPTarget.c   **** 		case PROG_MODE_WORD_TIMEDELAY_MASK:
 203:ISPTarget.c   **** 		case PROG_MODE_PAGED_TIMEDELAY_MASK:
 204:ISPTarget.c   **** 			ISPProtocol_DelayMS(DelayMS);
 1415              	 .loc 5 204 4
 1416 00be FB78     	 ldrb r3,[r7,#3]
 1417 00c0 1846     	 mov r0,r3
 1418 00c2 1B4B     	 ldr r3,.L81
 1419 00c4 9847     	 blx r3
 1420              	.LVL37:
 205:ISPTarget.c   **** 			break;
 1421              	 .loc 5 205 4
 1422 00c6 2AE0     	 b .L71
 1423              	.L79:
 206:ISPTarget.c   **** 		case PROG_MODE_WORD_VALUE_MASK:
 1424              	 .loc 5 206 3
 1425 00c8 00BF     	 nop
 1426              	.L72:
 207:ISPTarget.c   **** 		case PROG_MODE_PAGED_VALUE_MASK:
 208:ISPTarget.c   **** 			do
 209:ISPTarget.c   **** 			{
 210:ISPTarget.c   **** 				ISPTarget_SendByte(ReadMemCommand);
 1427              	 .loc 5 210 5 discriminator 2
 1428 00ca 97F82030 	 ldrb r3,[r7,#32]
 1429 00ce 1846     	 mov r0,r3
 1430 00d0 184B     	 ldr r3,.L81+4
 1431 00d2 9847     	 blx r3
 1432              	.LVL38:
 211:ISPTarget.c   **** 				ISPTarget_SendByte(PollAddress >> 8);
 1433              	 .loc 5 211 5 discriminator 2
 1434 00d4 BB88     	 ldrh r3,[r7,#4]
 1435 00d6 1B0A     	 lsrs r3,r3,#8
 1436 00d8 9BB2     	 uxth r3,r3
 1437 00da DBB2     	 uxtb r3,r3
 1438 00dc 1846     	 mov r0,r3
 1439 00de 154B     	 ldr r3,.L81+4
 1440 00e0 9847     	 blx r3
 1441              	.LVL39:
 212:ISPTarget.c   **** 				ISPTarget_SendByte(PollAddress & 0xFF);
 1442              	 .loc 5 212 5 discriminator 2
 1443 00e2 BB88     	 ldrh r3,[r7,#4]
 1444 00e4 DBB2     	 uxtb r3,r3
 1445 00e6 1846     	 mov r0,r3
 1446 00e8 124B     	 ldr r3,.L81+4
 1447 00ea 9847     	 blx r3
 1448              	.LVL40:
 213:ISPTarget.c   **** 			}
 214:ISPTarget.c   **** 			while ((ISPTarget_TransferByte(0x00) == PollValue) && TimeoutTicksRemaining);
 1449              	 .loc 5 214 12 discriminator 2
 1450 00ec 0020     	 movs r0,#0
 1451 00ee 124B     	 ldr r3,.L81+8
 1452 00f0 9847     	 blx r3
 1453              	.LVL41:
 1454 00f2 0346     	 mov r3,r0
 1455 00f4 1A46     	 mov r2,r3
 1456              	 .loc 5 214 4 discriminator 2
 1457 00f6 BB79     	 ldrb r3,[r7,#6]
 1458 00f8 9342     	 cmp r3,r2
 1459 00fa 03D1     	 bne .L76
 1460              	 .loc 5 214 55 discriminator 1
 1461 00fc 0F4B     	 ldr r3,.L81+12
 1462 00fe 1B68     	 ldr r3,[r3]
 1463 0100 002B     	 cmp r3,#0
 1464 0102 E1D1     	 bne .L79
 1465              	.L76:
 215:ISPTarget.c   **** 
 216:ISPTarget.c   **** 			if (!(TimeoutTicksRemaining))
 1466              	 .loc 5 216 8
 1467 0104 0D4B     	 ldr r3,.L81+12
 1468 0106 1B68     	 ldr r3,[r3]
 1469              	 .loc 5 216 7
 1470 0108 002B     	 cmp r3,#0
 1471 010a 07D1     	 bne .L80
 217:ISPTarget.c   **** 			  ProgrammingStatus = STATUS_CMD_TOUT;
 1472              	 .loc 5 217 24
 1473 010c 8023     	 movs r3,#128
 1474 010e FB73     	 strb r3,[r7,#15]
 218:ISPTarget.c   **** 
 219:ISPTarget.c   **** 			break;
 1475              	 .loc 5 219 4
 1476 0110 04E0     	 b .L80
 1477              	.L75:
 220:ISPTarget.c   **** 		case PROG_MODE_WORD_READYBUSY_MASK:
 221:ISPTarget.c   **** 		case PROG_MODE_PAGED_READYBUSY_MASK:
 222:ISPTarget.c   **** 			ProgrammingStatus = ISPTarget_WaitWhileTargetBusy();
 1478              	 .loc 5 222 24
 1479 0112 0B4B     	 ldr r3,.L81+16
 1480 0114 9847     	 blx r3
 1481              	.LVL42:
 1482 0116 0346     	 mov r3,r0
 1483 0118 FB73     	 strb r3,[r7,#15]
 223:ISPTarget.c   **** 			break;
 1484              	 .loc 5 223 4
 1485 011a 00E0     	 b .L71
 1486              	.L80:
 219:ISPTarget.c   **** 		case PROG_MODE_WORD_READYBUSY_MASK:
 1487              	 .loc 5 219 4
 1488 011c 00BF     	 nop
 1489              	.L71:
 224:ISPTarget.c   **** 	}
 225:ISPTarget.c   **** 
 226:ISPTarget.c   **** 	/* Program complete - reset timeout */
 227:ISPTarget.c   **** 	TimeoutTicksRemaining = COMMAND_TIMEOUT_TICKS;
 1490              	 .loc 5 227 24
 1491 011e 074B     	 ldr r3,.L81+12
 1492 0120 6422     	 movs r2,#100
 1493 0122 1A60     	 str r2,[r3]
 228:ISPTarget.c   **** 
 229:ISPTarget.c   **** 	return ProgrammingStatus;
 1494              	 .loc 5 229 9
 1495 0124 FB7B     	 ldrb r3,[r7,#15]
 230:ISPTarget.c   **** }
 1496              	 .loc 5 230 1
 1497 0126 1846     	 mov r0,r3
 1498 0128 1437     	 adds r7,r7,#20
 1499              	.LCFI86:
 1500              	 .cfi_def_cfa_offset 12
 1501 012a BD46     	 mov sp,r7
 1502              	.LCFI87:
 1503              	 .cfi_def_cfa_register 13
 1504              	 
 1505 012c 90BD     	 pop {r4,r7,pc}
 1506              	.L82:
 1507 012e 00BF     	 .align 2
 1508              	.L81:
 1509 0130 00000000 	 .word ISPProtocol_DelayMS
 1510 0134 00000000 	 .word ISPTarget_SendByte
 1511 0138 00000000 	 .word ISPTarget_TransferByte
 1512 013c 00000000 	 .word TimeoutTicksRemaining
 1513 0140 00000000 	 .word ISPTarget_WaitWhileTargetBusy
 1514              	 .cfi_endproc
 1515              	.LFE189:
 1517              	 .text
 1518              	.Letext0:
 1519              	 .file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 1520              	 .file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 1521              	 .file 8 ".././hal/sam3u1c/inc/sam3u1c.h"
 1522              	 .file 9 ".././hal/sam3u1c/inc/core_cm3.h"
 1523              	 .file 10 ".././hal/sam3u1c/inc/system_sam3u.h"
 1524              	 .file 11 ".././hal/sam3u1c/inc/component/component_spi.h"
 1525              	 .file 12 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 1526              	 .file 13 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 1527              	 .file 14 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 1528              	 .file 15 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 1529              	 .file 16 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 1530              	 .file 17 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
 1531              	 .file 18 ".././hal/sam3u1c/inc/compiler.h"
 1532              	 .file 19 ".././hal/sam3u1c/inc/sam3u/pll.h"
 1533              	 .file 20 ".././hal/sam3u1c/inc/pio.h"
 1534              	 .file 21 ".././hal/sam3u1c/inc/sam/sleepmgr.h"
 1535              	 .file 22 "./conf_usb.h"
 1536              	 .file 23 ".././hal/sam3u1c/inc/usb_protocol.h"
 1537              	 .file 24 ".././hal/sam3u1c/inc/udi.h"
 1538              	 .file 25 ".././hal/sam3u1c/inc/udc_desc.h"
 1539              	 .file 26 ".././hal/sam3u1c/inc/udd.h"
 1540              	 .file 27 ".././hal/sam3u1c/inc/udi_vendor.h"
 1541              	 .file 28 "XPROGTimeout.h"
 1542              	 .file 29 "V2Protocol.h"
 1543              	 .file 30 "ISPProtocol.h"
 1544              	 .file 31 "V2ProtocolParams.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ISPTarget.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.osc_get_rate:00000000 $t
    {standard input}:34     .text.osc_get_rate:00000000 osc_get_rate
    {standard input}:60     .text.osc_get_rate:00000014 $d
    {standard input}:68     .text.osc_get_rate:00000034 $t
    {standard input}:122    .text.osc_get_rate:00000064 $d
    {standard input}:129    .text.sysclk_get_main_hz:00000000 $t
    {standard input}:135    .text.sysclk_get_main_hz:00000000 sysclk_get_main_hz
    {standard input}:163    .text.sysclk_get_main_hz:00000014 $d
    {standard input}:168    .text.sysclk_get_cpu_hz:00000000 $t
    {standard input}:174    .text.sysclk_get_cpu_hz:00000000 sysclk_get_cpu_hz
    {standard input}:201    .text.sysclk_get_cpu_hz:00000010 $d
    {standard input}:206    .text.spi_reset:00000000 $t
    {standard input}:212    .text.spi_reset:00000000 spi_reset
    {standard input}:253    .text.spi_enable:00000000 $t
    {standard input}:259    .text.spi_enable:00000000 spi_enable
    {standard input}:299    .text.spi_disable:00000000 $t
    {standard input}:305    .text.spi_disable:00000000 spi_disable
    {standard input}:345    .text.spi_set_master_mode:00000000 $t
    {standard input}:351    .text.spi_set_master_mode:00000000 spi_set_master_mode
    {standard input}:393    .text.spi_disable_mode_fault_detect:00000000 $t
    {standard input}:399    .text.spi_disable_mode_fault_detect:00000000 spi_disable_mode_fault_detect
    {standard input}:441    .text.spi_disable_loopback:00000000 $t
    {standard input}:447    .text.spi_disable_loopback:00000000 spi_disable_loopback
    {standard input}:489    .text.spi_is_tx_empty:00000000 $t
    {standard input}:495    .text.spi_is_tx_empty:00000000 spi_is_tx_empty
    {standard input}:546    .text.ISPTarget_SendByte:00000000 $t
    {standard input}:552    .text.ISPTarget_SendByte:00000000 ISPTarget_SendByte
    {standard input}:595    .text.ISPTarget_SendByte:00000020 $d
    {standard input}:601    .text.ISPTarget_ReceiveByte:00000000 $t
    {standard input}:607    .text.ISPTarget_ReceiveByte:00000000 ISPTarget_ReceiveByte
    {standard input}:648    .text.ISPTarget_ReceiveByte:00000020 $d
    {standard input}:654    .text.ISPTarget_TransferByte:00000000 $t
    {standard input}:660    .text.ISPTarget_TransferByte:00000000 ISPTarget_TransferByte
    {standard input}:715    .text.ISPTarget_TransferByte:00000030 $d
    {standard input}:727    .data.avrispmkIIfreqs:00000000 avrispmkIIfreqs
    {standard input}:724    .data.avrispmkIIfreqs:00000000 $d
    {standard input}:893    .text.ISPTarget_EnableTargetISP:00000000 $t
    {standard input}:900    .text.ISPTarget_EnableTargetISP:00000000 ISPTarget_EnableTargetISP
    {standard input}:1033   .text.ISPTarget_EnableTargetISP:000000a4 $d
    {standard input}:1052   .text.ISPTarget_DisableTargetISP:00000000 $t
    {standard input}:1059   .text.ISPTarget_DisableTargetISP:00000000 ISPTarget_DisableTargetISP
    {standard input}:1089   .text.ISPTarget_DisableTargetISP:00000014 $d
    {standard input}:1096   .text.ISPTarget_ChangeTargetResetLine:00000000 $t
    {standard input}:1103   .text.ISPTarget_ChangeTargetResetLine:00000000 ISPTarget_ChangeTargetResetLine
    {standard input}:1177   .text.ISPTarget_ChangeTargetResetLine:00000048 $d
    {standard input}:1185   .text.ISPTarget_WaitWhileTargetBusy:00000000 $t
    {standard input}:1192   .text.ISPTarget_WaitWhileTargetBusy:00000000 ISPTarget_WaitWhileTargetBusy
    {standard input}:1258   .text.ISPTarget_WaitWhileTargetBusy:00000040 $d
    {standard input}:1265   .text.ISPTarget_LoadExtendedAddress:00000000 $t
    {standard input}:1272   .text.ISPTarget_LoadExtendedAddress:00000000 ISPTarget_LoadExtendedAddress
    {standard input}:1317   .text.ISPTarget_LoadExtendedAddress:00000028 $d
    {standard input}:1323   .text.ISPTarget_WaitForProgComplete:00000000 $t
    {standard input}:1330   .text.ISPTarget_WaitForProgComplete:00000000 ISPTarget_WaitForProgComplete
    {standard input}:1378   .text.ISPTarget_WaitForProgComplete:0000003c $d
    {standard input}:1409   .text.ISPTarget_WaitForProgComplete:000000b8 $t
    {standard input}:1509   .text.ISPTarget_WaitForProgComplete:00000130 $d
                           .group:00000000 wm4.0.84f01b7600eb36308f16331d3d2e9779
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1
                           .group:00000000 wm4.conf_clock.h.45.5dc276d21b4d793a62f1a9757cc18d5c
                           .group:00000000 wm4.board.h.48.3fc21f768e842120f151448a98046af0
                           .group:00000000 wm4.cw521.h.62.6f487d78438f1a237b2b554798be063f
                           .group:00000000 wm4.pmc.h.45.bbe1bf97a811e3b283420b2eeadf0b35
                           .group:00000000 wm4.osc.h.94.b766cddafe899eca01d775f7b2906680
                           .group:00000000 wm4.pll.h.45.a605c31ca466ae25752a678e8572be48
                           .group:00000000 wm4.sysclk.h.156.541a142b0016a365728ea1f7c0e3db84
                           .group:00000000 wm4.cycle_counter.h.44.fde38fb1acfd6555d72e65fae6e86af5
                           .group:00000000 wm4.delay.h.105.f2a8ab5e71eab0684cf6985b5c2fc9e8
                           .group:00000000 wm4.efc.h.45.ec5734119c630498df26106bacf9a684
                           .group:00000000 wm4.flash_efc.h.90.a4a39259055880dc10b861c5fe1b99e7
                           .group:00000000 wm4.pio.h.45.95f22b0ea02ddc698ec54fc56bf6f38c
                           .group:00000000 wm4.sam_gpio.h.50.76a45c51855d665134f8211cd601d693
                           .group:00000000 wm4.ioport_pio.h.44.373b34364b4ef25fac62017cd942a761
                           .group:00000000 wm4.sleep.h.45.ef10e1aee6f903405be19980a8333b7f
                           .group:00000000 wm4.smc.h.45.17a94aa976bb62b1109d03e8a314a569
                           .group:00000000 wm4.spi.h.45.712c66be09ffbac297c2e00923077297
                           .group:00000000 wm4.conf_sleepmgr.h.44.d825b913294720022fefe7201514fca3
                           .group:00000000 wm4.twi.h.45.ba70de99d200dafba570ce8f7058737a
                           .group:00000000 wm4.twi_master.h.90.08c062d0fa8f8aeea342ceeb79263395
                           .group:00000000 wm4.twi_slave.h.45.8b3d1a3d2e43ebc7d0161f4142989871
                           .group:00000000 wm4.uart.h.45.a5af743b8064bd84d1a6438457096e18
                           .group:00000000 wm4.usart.h.46.eae6fe592b7ea0768efef8d312e7f44f
                           .group:00000000 wm4.conf_uart_serial.h.45.245cdceaa1a3811fd043bf660ce38054
                           .group:00000000 wm4.conf_usb.h.45.2f7207bed7467dcf9cb11fbc6ebe572c
                           .group:00000000 wm4.udi_vendor_conf.h.56.4348c8e521d040f44df868219dae6785
                           .group:00000000 wm4.usb_atmel.h.45.c31b525dbe01f8d9e2022a03356ec174
                           .group:00000000 wm4.usb_protocol.h.63.850c58f3469fce50a9ac9a6854f7594b
                           .group:00000000 wm4.usb_protocol_vendor.h.45.83dfe073428ff799abc3ed1c7b04c77d
                           .group:00000000 wm4.udc_desc.h.77.5fec235bd7553e7256e345e020840072
                           .group:00000000 wm4.udd.h.103.3ccc59b50c14ec70568e6136eeb22d56
                           .group:00000000 wm4.udi_vendor.h.125.7b9085237d4d4a9757f4c148fba1918d
                           .group:00000000 wm4.V2ProtocolConstants.h.37.9bf16fd2ae5d223b4504404f34063b2d
                           .group:00000000 wm4.V2ProtocolParams.h.47.77ffe24f39fdee76136b1a6cd17622ea
                           .group:00000000 wm4.ISPProtocol.h.38.e5e0dd312bebbc8df11522adb3decb21
                           .group:00000000 wm4.V2Protocol.h.50.00f5564fabc070724b66bfdabab7441a
                           .group:00000000 wm4.ISPTarget.h.50.523ab5c75c84ecee1eba3c8576d9b11a

UNDEFINED SYMBOLS
spi_write
spi_read
V2Params_GetParameterValue
spi_enable_clock
spi_calc_baudrate_div
spi_set_clock_polarity
spi_set_clock_phase
spi_set_baudrate_div
pio_configure_pin
spi_disable_clock
pio_set_pin_high
pio_set_pin_low
TimeoutTicksRemaining
CurrentAddress
ISPProtocol_DelayMS
