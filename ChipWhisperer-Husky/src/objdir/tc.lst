   1              	 .cpu cortex-m3
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,6
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "tc.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
  16              	 .align 2
  19              	cpu_irq_critical_section_counter:
  20 0000 00000000 	 .space 4
  21              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
  24              	cpu_irq_prev_interrupt_state:
  25 0000 00       	 .space 1
  26              	 .section .text.tc_init,"ax",%progbits
  27              	 .align 1
  28              	 .global tc_init
  29              	 .arch armv7-m
  30              	 .syntax unified
  31              	 .thumb
  32              	 .thumb_func
  33              	 .fpu softvfp
  35              	tc_init:
  36              	.LFB69:
  37              	 .file 1 ".././hal/sam3u1c/tc.c"
   1:.././hal/sam3u1c/tc.c **** /**
   2:.././hal/sam3u1c/tc.c ****  * \file
   3:.././hal/sam3u1c/tc.c ****  *
   4:.././hal/sam3u1c/tc.c ****  * \brief SAM Timer Counter (TC) driver.
   5:.././hal/sam3u1c/tc.c ****  *
   6:.././hal/sam3u1c/tc.c ****  * Copyright (c) 2011-2014 Atmel Corporation. All rights reserved.
   7:.././hal/sam3u1c/tc.c ****  *
   8:.././hal/sam3u1c/tc.c ****  * \asf_license_start
   9:.././hal/sam3u1c/tc.c ****  *
  10:.././hal/sam3u1c/tc.c ****  * \page License
  11:.././hal/sam3u1c/tc.c ****  *
  12:.././hal/sam3u1c/tc.c ****  * Redistribution and use in source and binary forms, with or without
  13:.././hal/sam3u1c/tc.c ****  * modification, are permitted provided that the following conditions are met:
  14:.././hal/sam3u1c/tc.c ****  *
  15:.././hal/sam3u1c/tc.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  16:.././hal/sam3u1c/tc.c ****  *    this list of conditions and the following disclaimer.
  17:.././hal/sam3u1c/tc.c ****  *
  18:.././hal/sam3u1c/tc.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:.././hal/sam3u1c/tc.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:.././hal/sam3u1c/tc.c ****  *    and/or other materials provided with the distribution.
  21:.././hal/sam3u1c/tc.c ****  *
  22:.././hal/sam3u1c/tc.c ****  * 3. The name of Atmel may not be used to endorse or promote products derived
  23:.././hal/sam3u1c/tc.c ****  *    from this software without specific prior written permission.
  24:.././hal/sam3u1c/tc.c ****  *
  25:.././hal/sam3u1c/tc.c ****  * 4. This software may only be redistributed and used in connection with an
  26:.././hal/sam3u1c/tc.c ****  *    Atmel microcontroller product.
  27:.././hal/sam3u1c/tc.c ****  *
  28:.././hal/sam3u1c/tc.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  29:.././hal/sam3u1c/tc.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  30:.././hal/sam3u1c/tc.c ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  31:.././hal/sam3u1c/tc.c ****  * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
  32:.././hal/sam3u1c/tc.c ****  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  33:.././hal/sam3u1c/tc.c ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  34:.././hal/sam3u1c/tc.c ****  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  35:.././hal/sam3u1c/tc.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  36:.././hal/sam3u1c/tc.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:.././hal/sam3u1c/tc.c ****  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:.././hal/sam3u1c/tc.c ****  * POSSIBILITY OF SUCH DAMAGE.
  39:.././hal/sam3u1c/tc.c ****  *
  40:.././hal/sam3u1c/tc.c ****  * \asf_license_stop
  41:.././hal/sam3u1c/tc.c ****  *
  42:.././hal/sam3u1c/tc.c ****  */
  43:.././hal/sam3u1c/tc.c **** 
  44:.././hal/sam3u1c/tc.c **** #include <assert.h>
  45:.././hal/sam3u1c/tc.c **** #include "tc.h"
  46:.././hal/sam3u1c/tc.c **** 
  47:.././hal/sam3u1c/tc.c **** /// @cond
  48:.././hal/sam3u1c/tc.c **** /**INDENT-OFF**/
  49:.././hal/sam3u1c/tc.c **** #ifdef __cplusplus
  50:.././hal/sam3u1c/tc.c **** extern "C" {
  51:.././hal/sam3u1c/tc.c **** #endif
  52:.././hal/sam3u1c/tc.c **** /**INDENT-ON**/
  53:.././hal/sam3u1c/tc.c **** /// @endcond
  54:.././hal/sam3u1c/tc.c **** 
  55:.././hal/sam3u1c/tc.c **** #ifndef TC_WPMR_WPKEY_PASSWD
  56:.././hal/sam3u1c/tc.c **** #define TC_WPMR_WPKEY_PASSWD TC_WPMR_WPKEY((uint32_t)0x54494D)
  57:.././hal/sam3u1c/tc.c **** #endif
  58:.././hal/sam3u1c/tc.c **** 
  59:.././hal/sam3u1c/tc.c **** /**
  60:.././hal/sam3u1c/tc.c ****  * \brief Configure TC for timer, waveform generation, or capture.
  61:.././hal/sam3u1c/tc.c ****  *
  62:.././hal/sam3u1c/tc.c ****  * \param[in,out] p_tc   Module hardware register base address pointer
  63:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to configure
  64:.././hal/sam3u1c/tc.c ****  * \param[in] ul_mode    Control mode register bitmask value to set
  65:.././hal/sam3u1c/tc.c ****  *
  66:.././hal/sam3u1c/tc.c ****  * \note For more information regarding <i>ul_mode</i> configuration refer to
  67:.././hal/sam3u1c/tc.c ****  * the section  entitled "Channel Mode Register: Capture Mode" and.or section
  68:.././hal/sam3u1c/tc.c ****  * "Waveform Operating Mode" in the device-specific datasheet.
  69:.././hal/sam3u1c/tc.c ****  *
  70:.././hal/sam3u1c/tc.c ****  * \note If the TC is configured for waveform generation then the external event
  71:.././hal/sam3u1c/tc.c ****  * selection (EEVT) should only be set to TC_CMR_EEVT_TIOB, or the
  72:.././hal/sam3u1c/tc.c ****  * equivalent value of 0, if it really is the intention to use TIOB as an
  73:.././hal/sam3u1c/tc.c ****  * external event trigger. This is because this setting forces TIOB to be
  74:.././hal/sam3u1c/tc.c ****  * an input, even if the external event trigger has not been enabled with
  75:.././hal/sam3u1c/tc.c ****  * TC_CMR_ENETRG, and thus prevents normal operation of TIOB.
  76:.././hal/sam3u1c/tc.c ****  */
  77:.././hal/sam3u1c/tc.c **** void tc_init(
  78:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
  79:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel,
  80:.././hal/sam3u1c/tc.c **** 		uint32_t ul_mode)
  81:.././hal/sam3u1c/tc.c **** {
  38              	 .loc 1 81 1
  39              	 .cfi_startproc
  40              	 
  41              	 
  42              	 
  43 0000 80B4     	 push {r7}
  44              	.LCFI0:
  45              	 .cfi_def_cfa_offset 4
  46              	 .cfi_offset 7,-4
  47 0002 87B0     	 sub sp,sp,#28
  48              	.LCFI1:
  49              	 .cfi_def_cfa_offset 32
  50 0004 00AF     	 add r7,sp,#0
  51              	.LCFI2:
  52              	 .cfi_def_cfa_register 7
  53 0006 F860     	 str r0,[r7,#12]
  54 0008 B960     	 str r1,[r7,#8]
  55 000a 7A60     	 str r2,[r7,#4]
  82:.././hal/sam3u1c/tc.c **** 	TcChannel *tc_channel;
  83:.././hal/sam3u1c/tc.c **** 
  84:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
  85:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
  86:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
  87:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
  88:.././hal/sam3u1c/tc.c **** 	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  56              	 .loc 1 88 15
  57 000c FA68     	 ldr r2,[r7,#12]
  58              	 .loc 1 88 32
  59 000e BB68     	 ldr r3,[r7,#8]
  60 0010 9B01     	 lsls r3,r3,#6
  61              	 .loc 1 88 13
  62 0012 1344     	 add r3,r3,r2
  63 0014 7B61     	 str r3,[r7,#20]
  89:.././hal/sam3u1c/tc.c **** 
  90:.././hal/sam3u1c/tc.c **** 	/*  Disable TC clock. */
  91:.././hal/sam3u1c/tc.c **** 	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  64              	 .loc 1 91 21
  65 0016 7B69     	 ldr r3,[r7,#20]
  66 0018 0222     	 movs r2,#2
  67 001a 1A60     	 str r2,[r3]
  92:.././hal/sam3u1c/tc.c **** 
  93:.././hal/sam3u1c/tc.c **** 	/*  Disable interrupts. */
  94:.././hal/sam3u1c/tc.c **** 	tc_channel->TC_IDR = 0xFFFFFFFF;
  68              	 .loc 1 94 21
  69 001c 7B69     	 ldr r3,[r7,#20]
  70 001e 4FF0FF32 	 mov r2,#-1
  71 0022 9A62     	 str r2,[r3,#40]
  95:.././hal/sam3u1c/tc.c **** 
  96:.././hal/sam3u1c/tc.c **** 	/*  Clear status register. */
  97:.././hal/sam3u1c/tc.c **** 	tc_channel->TC_SR;
  72              	 .loc 1 97 12
  73 0024 7B69     	 ldr r3,[r7,#20]
  74 0026 1B6A     	 ldr r3,[r3,#32]
  98:.././hal/sam3u1c/tc.c **** 
  99:.././hal/sam3u1c/tc.c **** 	/*  Set mode. */
 100:.././hal/sam3u1c/tc.c **** 	tc_channel->TC_CMR = ul_mode;
  75              	 .loc 1 100 21
  76 0028 7B69     	 ldr r3,[r7,#20]
  77 002a 7A68     	 ldr r2,[r7,#4]
  78 002c 5A60     	 str r2,[r3,#4]
 101:.././hal/sam3u1c/tc.c **** }
  79              	 .loc 1 101 1
  80 002e 00BF     	 nop
  81 0030 1C37     	 adds r7,r7,#28
  82              	.LCFI3:
  83              	 .cfi_def_cfa_offset 4
  84 0032 BD46     	 mov sp,r7
  85              	.LCFI4:
  86              	 .cfi_def_cfa_register 13
  87              	 
  88 0034 80BC     	 pop {r7}
  89              	.LCFI5:
  90              	 .cfi_restore 7
  91              	 .cfi_def_cfa_offset 0
  92 0036 7047     	 bx lr
  93              	 .cfi_endproc
  94              	.LFE69:
  96              	 .section .text.tc_sync_trigger,"ax",%progbits
  97              	 .align 1
  98              	 .global tc_sync_trigger
  99              	 .syntax unified
 100              	 .thumb
 101              	 .thumb_func
 102              	 .fpu softvfp
 104              	tc_sync_trigger:
 105              	.LFB70:
 102:.././hal/sam3u1c/tc.c **** 
 103:.././hal/sam3u1c/tc.c **** /**
 104:.././hal/sam3u1c/tc.c ****  * \brief Asserts a SYNC signal to generate a software trigger on
 105:.././hal/sam3u1c/tc.c ****  * all channels.
 106:.././hal/sam3u1c/tc.c ****  *
 107:.././hal/sam3u1c/tc.c ****  * \param[out] p_tc Module hardware register base address pointer
 108:.././hal/sam3u1c/tc.c ****  *
 109:.././hal/sam3u1c/tc.c ****  */
 110:.././hal/sam3u1c/tc.c **** void tc_sync_trigger(
 111:.././hal/sam3u1c/tc.c **** 		Tc *p_tc)
 112:.././hal/sam3u1c/tc.c **** {
 106              	 .loc 1 112 1
 107              	 .cfi_startproc
 108              	 
 109              	 
 110              	 
 111 0000 80B4     	 push {r7}
 112              	.LCFI6:
 113              	 .cfi_def_cfa_offset 4
 114              	 .cfi_offset 7,-4
 115 0002 83B0     	 sub sp,sp,#12
 116              	.LCFI7:
 117              	 .cfi_def_cfa_offset 16
 118 0004 00AF     	 add r7,sp,#0
 119              	.LCFI8:
 120              	 .cfi_def_cfa_register 7
 121 0006 7860     	 str r0,[r7,#4]
 113:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 114:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 115:.././hal/sam3u1c/tc.c **** 	
 116:.././hal/sam3u1c/tc.c **** 	p_tc->TC_BCR = TC_BCR_SYNC;
 122              	 .loc 1 116 15
 123 0008 7B68     	 ldr r3,[r7,#4]
 124 000a 0122     	 movs r2,#1
 125 000c C3F8C020 	 str r2,[r3,#192]
 117:.././hal/sam3u1c/tc.c **** }
 126              	 .loc 1 117 1
 127 0010 00BF     	 nop
 128 0012 0C37     	 adds r7,r7,#12
 129              	.LCFI9:
 130              	 .cfi_def_cfa_offset 4
 131 0014 BD46     	 mov sp,r7
 132              	.LCFI10:
 133              	 .cfi_def_cfa_register 13
 134              	 
 135 0016 80BC     	 pop {r7}
 136              	.LCFI11:
 137              	 .cfi_restore 7
 138              	 .cfi_def_cfa_offset 0
 139 0018 7047     	 bx lr
 140              	 .cfi_endproc
 141              	.LFE70:
 143              	 .section .text.tc_set_block_mode,"ax",%progbits
 144              	 .align 1
 145              	 .global tc_set_block_mode
 146              	 .syntax unified
 147              	 .thumb
 148              	 .thumb_func
 149              	 .fpu softvfp
 151              	tc_set_block_mode:
 152              	.LFB71:
 118:.././hal/sam3u1c/tc.c **** 
 119:.././hal/sam3u1c/tc.c **** /**
 120:.././hal/sam3u1c/tc.c ****  * \brief Configure the TC Block mode.
 121:.././hal/sam3u1c/tc.c ****  *
 122:.././hal/sam3u1c/tc.c ****  * \note The function tc_init() must be called prior to this one.
 123:.././hal/sam3u1c/tc.c ****  *
 124:.././hal/sam3u1c/tc.c ****  * \param[out] p_tc        Module hardware register base address pointer
 125:.././hal/sam3u1c/tc.c ****  * \param[in] ul_blockmode Block mode register value to set
 126:.././hal/sam3u1c/tc.c ****  *
 127:.././hal/sam3u1c/tc.c ****  * \note For more information regarding <i>ul_blockmode</i> configuration refer to
 128:.././hal/sam3u1c/tc.c ****  * the section  entitled "TC Block Mode Register" in the device-specific datasheet.
 129:.././hal/sam3u1c/tc.c ****  */
 130:.././hal/sam3u1c/tc.c **** void tc_set_block_mode(
 131:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 132:.././hal/sam3u1c/tc.c **** 		uint32_t ul_blockmode)
 133:.././hal/sam3u1c/tc.c **** {
 153              	 .loc 1 133 1
 154              	 .cfi_startproc
 155              	 
 156              	 
 157              	 
 158 0000 80B4     	 push {r7}
 159              	.LCFI12:
 160              	 .cfi_def_cfa_offset 4
 161              	 .cfi_offset 7,-4
 162 0002 83B0     	 sub sp,sp,#12
 163              	.LCFI13:
 164              	 .cfi_def_cfa_offset 16
 165 0004 00AF     	 add r7,sp,#0
 166              	.LCFI14:
 167              	 .cfi_def_cfa_register 7
 168 0006 7860     	 str r0,[r7,#4]
 169 0008 3960     	 str r1,[r7]
 134:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 135:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 136:.././hal/sam3u1c/tc.c **** 	
 137:.././hal/sam3u1c/tc.c **** 	p_tc->TC_BMR = ul_blockmode;
 170              	 .loc 1 137 15
 171 000a 7B68     	 ldr r3,[r7,#4]
 172 000c 3A68     	 ldr r2,[r7]
 173 000e C3F8C420 	 str r2,[r3,#196]
 138:.././hal/sam3u1c/tc.c **** }
 174              	 .loc 1 138 1
 175 0012 00BF     	 nop
 176 0014 0C37     	 adds r7,r7,#12
 177              	.LCFI15:
 178              	 .cfi_def_cfa_offset 4
 179 0016 BD46     	 mov sp,r7
 180              	.LCFI16:
 181              	 .cfi_def_cfa_register 13
 182              	 
 183 0018 80BC     	 pop {r7}
 184              	.LCFI17:
 185              	 .cfi_restore 7
 186              	 .cfi_def_cfa_offset 0
 187 001a 7047     	 bx lr
 188              	 .cfi_endproc
 189              	.LFE71:
 191              	 .section .text.tc_start,"ax",%progbits
 192              	 .align 1
 193              	 .global tc_start
 194              	 .syntax unified
 195              	 .thumb
 196              	 .thumb_func
 197              	 .fpu softvfp
 199              	tc_start:
 200              	.LFB72:
 139:.././hal/sam3u1c/tc.c **** 
 140:.././hal/sam3u1c/tc.c **** #if (!SAM3U) || defined(__DOXYGEN__)
 141:.././hal/sam3u1c/tc.c **** 
 142:.././hal/sam3u1c/tc.c **** /**
 143:.././hal/sam3u1c/tc.c ****  * \brief Configure TC for 2-bit Gray Counter for Stepper Motor.
 144:.././hal/sam3u1c/tc.c ****  * \note The function tc_init() must be called prior to this one.
 145:.././hal/sam3u1c/tc.c ****  *
 146:.././hal/sam3u1c/tc.c ****  * \note This function is not available on SAM3U devices.
 147:.././hal/sam3u1c/tc.c ****  *
 148:.././hal/sam3u1c/tc.c ****  * \param[out] p_tc          Module hardware register base address pointer
 149:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel     Channel to configure
 150:.././hal/sam3u1c/tc.c ****  * \param[in] ul_steppermode Stepper motor mode register value to set
 151:.././hal/sam3u1c/tc.c ****  *
 152:.././hal/sam3u1c/tc.c ****  * \return 0 for OK.
 153:.././hal/sam3u1c/tc.c ****  */
 154:.././hal/sam3u1c/tc.c **** uint32_t tc_init_2bit_gray(
 155:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 156:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel,
 157:.././hal/sam3u1c/tc.c **** 		uint32_t ul_steppermode)
 158:.././hal/sam3u1c/tc.c **** {
 159:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 160:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 161:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 162:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 163:.././hal/sam3u1c/tc.c **** 
 164:.././hal/sam3u1c/tc.c **** 	p_tc->TC_CHANNEL[ul_channel].TC_SMMR = ul_steppermode;
 165:.././hal/sam3u1c/tc.c **** 	return 0;
 166:.././hal/sam3u1c/tc.c **** }
 167:.././hal/sam3u1c/tc.c **** 
 168:.././hal/sam3u1c/tc.c **** #endif /* (!SAM3U) || defined(__DOXYGEN__) */
 169:.././hal/sam3u1c/tc.c **** 
 170:.././hal/sam3u1c/tc.c **** /**
 171:.././hal/sam3u1c/tc.c ****  * \brief Start the TC clock on the specified channel.
 172:.././hal/sam3u1c/tc.c ****  *
 173:.././hal/sam3u1c/tc.c ****  * \param[out] p_tc      Module hardware register base address pointer
 174:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to configure
 175:.././hal/sam3u1c/tc.c ****  */
 176:.././hal/sam3u1c/tc.c **** void tc_start(
 177:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 178:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel)
 179:.././hal/sam3u1c/tc.c **** {
 201              	 .loc 1 179 1
 202              	 .cfi_startproc
 203              	 
 204              	 
 205              	 
 206 0000 80B4     	 push {r7}
 207              	.LCFI18:
 208              	 .cfi_def_cfa_offset 4
 209              	 .cfi_offset 7,-4
 210 0002 83B0     	 sub sp,sp,#12
 211              	.LCFI19:
 212              	 .cfi_def_cfa_offset 16
 213 0004 00AF     	 add r7,sp,#0
 214              	.LCFI20:
 215              	 .cfi_def_cfa_register 7
 216 0006 7860     	 str r0,[r7,#4]
 217 0008 3960     	 str r1,[r7]
 180:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 181:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 182:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 183:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 184:.././hal/sam3u1c/tc.c **** 
 185:.././hal/sam3u1c/tc.c **** 	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
 218              	 .loc 1 185 38
 219 000a 7A68     	 ldr r2,[r7,#4]
 220 000c 3B68     	 ldr r3,[r7]
 221 000e 9B01     	 lsls r3,r3,#6
 222 0010 1344     	 add r3,r3,r2
 223 0012 0522     	 movs r2,#5
 224 0014 1A60     	 str r2,[r3]
 186:.././hal/sam3u1c/tc.c **** }
 225              	 .loc 1 186 1
 226 0016 00BF     	 nop
 227 0018 0C37     	 adds r7,r7,#12
 228              	.LCFI21:
 229              	 .cfi_def_cfa_offset 4
 230 001a BD46     	 mov sp,r7
 231              	.LCFI22:
 232              	 .cfi_def_cfa_register 13
 233              	 
 234 001c 80BC     	 pop {r7}
 235              	.LCFI23:
 236              	 .cfi_restore 7
 237              	 .cfi_def_cfa_offset 0
 238 001e 7047     	 bx lr
 239              	 .cfi_endproc
 240              	.LFE72:
 242              	 .section .text.tc_stop,"ax",%progbits
 243              	 .align 1
 244              	 .global tc_stop
 245              	 .syntax unified
 246              	 .thumb
 247              	 .thumb_func
 248              	 .fpu softvfp
 250              	tc_stop:
 251              	.LFB73:
 187:.././hal/sam3u1c/tc.c **** 
 188:.././hal/sam3u1c/tc.c **** /**
 189:.././hal/sam3u1c/tc.c ****  * \brief Stop the TC clock on the specified channel.
 190:.././hal/sam3u1c/tc.c ****  *
 191:.././hal/sam3u1c/tc.c ****  * \param[out] p_tc      Module hardware register base address pointer
 192:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to configure
 193:.././hal/sam3u1c/tc.c ****  */
 194:.././hal/sam3u1c/tc.c **** void tc_stop(
 195:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 196:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel)
 197:.././hal/sam3u1c/tc.c **** {
 252              	 .loc 1 197 1
 253              	 .cfi_startproc
 254              	 
 255              	 
 256              	 
 257 0000 80B4     	 push {r7}
 258              	.LCFI24:
 259              	 .cfi_def_cfa_offset 4
 260              	 .cfi_offset 7,-4
 261 0002 83B0     	 sub sp,sp,#12
 262              	.LCFI25:
 263              	 .cfi_def_cfa_offset 16
 264 0004 00AF     	 add r7,sp,#0
 265              	.LCFI26:
 266              	 .cfi_def_cfa_register 7
 267 0006 7860     	 str r0,[r7,#4]
 268 0008 3960     	 str r1,[r7]
 198:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 199:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 200:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 201:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 202:.././hal/sam3u1c/tc.c **** 
 203:.././hal/sam3u1c/tc.c **** 	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
 269              	 .loc 1 203 38
 270 000a 7A68     	 ldr r2,[r7,#4]
 271 000c 3B68     	 ldr r3,[r7]
 272 000e 9B01     	 lsls r3,r3,#6
 273 0010 1344     	 add r3,r3,r2
 274 0012 0222     	 movs r2,#2
 275 0014 1A60     	 str r2,[r3]
 204:.././hal/sam3u1c/tc.c **** }
 276              	 .loc 1 204 1
 277 0016 00BF     	 nop
 278 0018 0C37     	 adds r7,r7,#12
 279              	.LCFI27:
 280              	 .cfi_def_cfa_offset 4
 281 001a BD46     	 mov sp,r7
 282              	.LCFI28:
 283              	 .cfi_def_cfa_register 13
 284              	 
 285 001c 80BC     	 pop {r7}
 286              	.LCFI29:
 287              	 .cfi_restore 7
 288              	 .cfi_def_cfa_offset 0
 289 001e 7047     	 bx lr
 290              	 .cfi_endproc
 291              	.LFE73:
 293              	 .section .text.tc_read_cv,"ax",%progbits
 294              	 .align 1
 295              	 .global tc_read_cv
 296              	 .syntax unified
 297              	 .thumb
 298              	 .thumb_func
 299              	 .fpu softvfp
 301              	tc_read_cv:
 302              	.LFB74:
 205:.././hal/sam3u1c/tc.c **** 
 206:.././hal/sam3u1c/tc.c **** /**
 207:.././hal/sam3u1c/tc.c ****  * \brief Read the counter value on the specified channel.
 208:.././hal/sam3u1c/tc.c ****  *
 209:.././hal/sam3u1c/tc.c ****  * \param[in] p_tc       Module hardware register base address pointer
 210:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to read
 211:.././hal/sam3u1c/tc.c ****  *
 212:.././hal/sam3u1c/tc.c ****  * \return The counter value.
 213:.././hal/sam3u1c/tc.c ****  */
 214:.././hal/sam3u1c/tc.c **** uint32_t tc_read_cv(
 215:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 216:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel)
 217:.././hal/sam3u1c/tc.c **** {
 303              	 .loc 1 217 1
 304              	 .cfi_startproc
 305              	 
 306              	 
 307              	 
 308 0000 80B4     	 push {r7}
 309              	.LCFI30:
 310              	 .cfi_def_cfa_offset 4
 311              	 .cfi_offset 7,-4
 312 0002 83B0     	 sub sp,sp,#12
 313              	.LCFI31:
 314              	 .cfi_def_cfa_offset 16
 315 0004 00AF     	 add r7,sp,#0
 316              	.LCFI32:
 317              	 .cfi_def_cfa_register 7
 318 0006 7860     	 str r0,[r7,#4]
 319 0008 3960     	 str r1,[r7]
 218:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 219:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 220:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 221:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 222:.././hal/sam3u1c/tc.c **** 
 223:.././hal/sam3u1c/tc.c **** 	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
 320              	 .loc 1 223 37
 321 000a 7A68     	 ldr r2,[r7,#4]
 322 000c 3B68     	 ldr r3,[r7]
 323 000e 9B01     	 lsls r3,r3,#6
 324 0010 1344     	 add r3,r3,r2
 325 0012 1033     	 adds r3,r3,#16
 326 0014 1B68     	 ldr r3,[r3]
 224:.././hal/sam3u1c/tc.c **** }
 327              	 .loc 1 224 1
 328 0016 1846     	 mov r0,r3
 329 0018 0C37     	 adds r7,r7,#12
 330              	.LCFI33:
 331              	 .cfi_def_cfa_offset 4
 332 001a BD46     	 mov sp,r7
 333              	.LCFI34:
 334              	 .cfi_def_cfa_register 13
 335              	 
 336 001c 80BC     	 pop {r7}
 337              	.LCFI35:
 338              	 .cfi_restore 7
 339              	 .cfi_def_cfa_offset 0
 340 001e 7047     	 bx lr
 341              	 .cfi_endproc
 342              	.LFE74:
 344              	 .section .text.tc_read_ra,"ax",%progbits
 345              	 .align 1
 346              	 .global tc_read_ra
 347              	 .syntax unified
 348              	 .thumb
 349              	 .thumb_func
 350              	 .fpu softvfp
 352              	tc_read_ra:
 353              	.LFB75:
 225:.././hal/sam3u1c/tc.c **** 
 226:.././hal/sam3u1c/tc.c **** /**
 227:.././hal/sam3u1c/tc.c ****  * \brief Read TC Register A (RA) on the specified channel.
 228:.././hal/sam3u1c/tc.c ****  *
 229:.././hal/sam3u1c/tc.c ****  * \param[in] p_tc       Module hardware register base address pointer
 230:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to read
 231:.././hal/sam3u1c/tc.c ****  *
 232:.././hal/sam3u1c/tc.c ****  * \return The TC Register A (RA) value.
 233:.././hal/sam3u1c/tc.c ****  */
 234:.././hal/sam3u1c/tc.c **** uint32_t tc_read_ra(
 235:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 236:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel)
 237:.././hal/sam3u1c/tc.c **** {
 354              	 .loc 1 237 1
 355              	 .cfi_startproc
 356              	 
 357              	 
 358              	 
 359 0000 80B4     	 push {r7}
 360              	.LCFI36:
 361              	 .cfi_def_cfa_offset 4
 362              	 .cfi_offset 7,-4
 363 0002 83B0     	 sub sp,sp,#12
 364              	.LCFI37:
 365              	 .cfi_def_cfa_offset 16
 366 0004 00AF     	 add r7,sp,#0
 367              	.LCFI38:
 368              	 .cfi_def_cfa_register 7
 369 0006 7860     	 str r0,[r7,#4]
 370 0008 3960     	 str r1,[r7]
 238:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 239:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 240:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 241:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 242:.././hal/sam3u1c/tc.c **** 
 243:.././hal/sam3u1c/tc.c **** 	return p_tc->TC_CHANNEL[ul_channel].TC_RA;
 371              	 .loc 1 243 37
 372 000a 7A68     	 ldr r2,[r7,#4]
 373 000c 3B68     	 ldr r3,[r7]
 374 000e 9B01     	 lsls r3,r3,#6
 375 0010 1344     	 add r3,r3,r2
 376 0012 1433     	 adds r3,r3,#20
 377 0014 1B68     	 ldr r3,[r3]
 244:.././hal/sam3u1c/tc.c **** }
 378              	 .loc 1 244 1
 379 0016 1846     	 mov r0,r3
 380 0018 0C37     	 adds r7,r7,#12
 381              	.LCFI39:
 382              	 .cfi_def_cfa_offset 4
 383 001a BD46     	 mov sp,r7
 384              	.LCFI40:
 385              	 .cfi_def_cfa_register 13
 386              	 
 387 001c 80BC     	 pop {r7}
 388              	.LCFI41:
 389              	 .cfi_restore 7
 390              	 .cfi_def_cfa_offset 0
 391 001e 7047     	 bx lr
 392              	 .cfi_endproc
 393              	.LFE75:
 395              	 .section .text.tc_read_rb,"ax",%progbits
 396              	 .align 1
 397              	 .global tc_read_rb
 398              	 .syntax unified
 399              	 .thumb
 400              	 .thumb_func
 401              	 .fpu softvfp
 403              	tc_read_rb:
 404              	.LFB76:
 245:.././hal/sam3u1c/tc.c **** 
 246:.././hal/sam3u1c/tc.c **** /**
 247:.././hal/sam3u1c/tc.c ****  * \brief Read TC Register B (RB) on the specified channel.
 248:.././hal/sam3u1c/tc.c ****  *
 249:.././hal/sam3u1c/tc.c ****  * \param[in] p_tc       Module hardware register base address pointer
 250:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to read
 251:.././hal/sam3u1c/tc.c ****  *
 252:.././hal/sam3u1c/tc.c ****  * \return The TC Register B (RB) value.
 253:.././hal/sam3u1c/tc.c ****  */
 254:.././hal/sam3u1c/tc.c **** uint32_t tc_read_rb(
 255:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 256:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel)
 257:.././hal/sam3u1c/tc.c **** {
 405              	 .loc 1 257 1
 406              	 .cfi_startproc
 407              	 
 408              	 
 409              	 
 410 0000 80B4     	 push {r7}
 411              	.LCFI42:
 412              	 .cfi_def_cfa_offset 4
 413              	 .cfi_offset 7,-4
 414 0002 83B0     	 sub sp,sp,#12
 415              	.LCFI43:
 416              	 .cfi_def_cfa_offset 16
 417 0004 00AF     	 add r7,sp,#0
 418              	.LCFI44:
 419              	 .cfi_def_cfa_register 7
 420 0006 7860     	 str r0,[r7,#4]
 421 0008 3960     	 str r1,[r7]
 258:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 259:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 260:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 261:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 262:.././hal/sam3u1c/tc.c **** 
 263:.././hal/sam3u1c/tc.c **** 	return p_tc->TC_CHANNEL[ul_channel].TC_RB;
 422              	 .loc 1 263 37
 423 000a 7A68     	 ldr r2,[r7,#4]
 424 000c 3B68     	 ldr r3,[r7]
 425 000e 9B01     	 lsls r3,r3,#6
 426 0010 1344     	 add r3,r3,r2
 427 0012 1833     	 adds r3,r3,#24
 428 0014 1B68     	 ldr r3,[r3]
 264:.././hal/sam3u1c/tc.c **** }
 429              	 .loc 1 264 1
 430 0016 1846     	 mov r0,r3
 431 0018 0C37     	 adds r7,r7,#12
 432              	.LCFI45:
 433              	 .cfi_def_cfa_offset 4
 434 001a BD46     	 mov sp,r7
 435              	.LCFI46:
 436              	 .cfi_def_cfa_register 13
 437              	 
 438 001c 80BC     	 pop {r7}
 439              	.LCFI47:
 440              	 .cfi_restore 7
 441              	 .cfi_def_cfa_offset 0
 442 001e 7047     	 bx lr
 443              	 .cfi_endproc
 444              	.LFE76:
 446              	 .section .text.tc_read_rc,"ax",%progbits
 447              	 .align 1
 448              	 .global tc_read_rc
 449              	 .syntax unified
 450              	 .thumb
 451              	 .thumb_func
 452              	 .fpu softvfp
 454              	tc_read_rc:
 455              	.LFB77:
 265:.././hal/sam3u1c/tc.c **** 
 266:.././hal/sam3u1c/tc.c **** /**
 267:.././hal/sam3u1c/tc.c ****  * \brief Read TC Register C (RC) on the specified channel.
 268:.././hal/sam3u1c/tc.c ****  *
 269:.././hal/sam3u1c/tc.c ****  * \param[in] p_tc       Module hardware register base address pointer
 270:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to read
 271:.././hal/sam3u1c/tc.c ****  *
 272:.././hal/sam3u1c/tc.c ****  * \return The Register C (RC) value.
 273:.././hal/sam3u1c/tc.c ****  */
 274:.././hal/sam3u1c/tc.c **** uint32_t tc_read_rc(
 275:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 276:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel)
 277:.././hal/sam3u1c/tc.c **** {
 456              	 .loc 1 277 1
 457              	 .cfi_startproc
 458              	 
 459              	 
 460              	 
 461 0000 80B4     	 push {r7}
 462              	.LCFI48:
 463              	 .cfi_def_cfa_offset 4
 464              	 .cfi_offset 7,-4
 465 0002 83B0     	 sub sp,sp,#12
 466              	.LCFI49:
 467              	 .cfi_def_cfa_offset 16
 468 0004 00AF     	 add r7,sp,#0
 469              	.LCFI50:
 470              	 .cfi_def_cfa_register 7
 471 0006 7860     	 str r0,[r7,#4]
 472 0008 3960     	 str r1,[r7]
 278:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 279:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 280:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 281:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 282:.././hal/sam3u1c/tc.c **** 
 283:.././hal/sam3u1c/tc.c **** 	return p_tc->TC_CHANNEL[ul_channel].TC_RC;
 473              	 .loc 1 283 37
 474 000a 7A68     	 ldr r2,[r7,#4]
 475 000c 3B68     	 ldr r3,[r7]
 476 000e 9B01     	 lsls r3,r3,#6
 477 0010 1344     	 add r3,r3,r2
 478 0012 1C33     	 adds r3,r3,#28
 479 0014 1B68     	 ldr r3,[r3]
 284:.././hal/sam3u1c/tc.c **** }
 480              	 .loc 1 284 1
 481 0016 1846     	 mov r0,r3
 482 0018 0C37     	 adds r7,r7,#12
 483              	.LCFI51:
 484              	 .cfi_def_cfa_offset 4
 485 001a BD46     	 mov sp,r7
 486              	.LCFI52:
 487              	 .cfi_def_cfa_register 13
 488              	 
 489 001c 80BC     	 pop {r7}
 490              	.LCFI53:
 491              	 .cfi_restore 7
 492              	 .cfi_def_cfa_offset 0
 493 001e 7047     	 bx lr
 494              	 .cfi_endproc
 495              	.LFE77:
 497              	 .section .text.tc_write_ra,"ax",%progbits
 498              	 .align 1
 499              	 .global tc_write_ra
 500              	 .syntax unified
 501              	 .thumb
 502              	 .thumb_func
 503              	 .fpu softvfp
 505              	tc_write_ra:
 506              	.LFB78:
 285:.././hal/sam3u1c/tc.c **** 
 286:.././hal/sam3u1c/tc.c **** /**
 287:.././hal/sam3u1c/tc.c ****  * \brief Write to TC Register A (RA) on the specified channel.
 288:.././hal/sam3u1c/tc.c ****  *
 289:.././hal/sam3u1c/tc.c ****  * \param[out] p_tc      Module hardware register base address pointer
 290:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to write
 291:.././hal/sam3u1c/tc.c ****  * \param[in] ul_value   Value to write
 292:.././hal/sam3u1c/tc.c ****  */
 293:.././hal/sam3u1c/tc.c **** void tc_write_ra(
 294:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 295:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel,
 296:.././hal/sam3u1c/tc.c **** 		uint32_t ul_value)
 297:.././hal/sam3u1c/tc.c **** {
 507              	 .loc 1 297 1
 508              	 .cfi_startproc
 509              	 
 510              	 
 511              	 
 512 0000 80B4     	 push {r7}
 513              	.LCFI54:
 514              	 .cfi_def_cfa_offset 4
 515              	 .cfi_offset 7,-4
 516 0002 85B0     	 sub sp,sp,#20
 517              	.LCFI55:
 518              	 .cfi_def_cfa_offset 24
 519 0004 00AF     	 add r7,sp,#0
 520              	.LCFI56:
 521              	 .cfi_def_cfa_register 7
 522 0006 F860     	 str r0,[r7,#12]
 523 0008 B960     	 str r1,[r7,#8]
 524 000a 7A60     	 str r2,[r7,#4]
 298:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 299:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 300:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 301:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 302:.././hal/sam3u1c/tc.c **** 
 303:.././hal/sam3u1c/tc.c **** 	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
 525              	 .loc 1 303 37
 526 000c FA68     	 ldr r2,[r7,#12]
 527 000e BB68     	 ldr r3,[r7,#8]
 528 0010 9B01     	 lsls r3,r3,#6
 529 0012 1344     	 add r3,r3,r2
 530 0014 1433     	 adds r3,r3,#20
 531 0016 7A68     	 ldr r2,[r7,#4]
 532 0018 1A60     	 str r2,[r3]
 304:.././hal/sam3u1c/tc.c **** }
 533              	 .loc 1 304 1
 534 001a 00BF     	 nop
 535 001c 1437     	 adds r7,r7,#20
 536              	.LCFI57:
 537              	 .cfi_def_cfa_offset 4
 538 001e BD46     	 mov sp,r7
 539              	.LCFI58:
 540              	 .cfi_def_cfa_register 13
 541              	 
 542 0020 80BC     	 pop {r7}
 543              	.LCFI59:
 544              	 .cfi_restore 7
 545              	 .cfi_def_cfa_offset 0
 546 0022 7047     	 bx lr
 547              	 .cfi_endproc
 548              	.LFE78:
 550              	 .section .text.tc_write_rb,"ax",%progbits
 551              	 .align 1
 552              	 .global tc_write_rb
 553              	 .syntax unified
 554              	 .thumb
 555              	 .thumb_func
 556              	 .fpu softvfp
 558              	tc_write_rb:
 559              	.LFB79:
 305:.././hal/sam3u1c/tc.c **** 
 306:.././hal/sam3u1c/tc.c **** /**
 307:.././hal/sam3u1c/tc.c ****  * \brief Write to TC Register B (RB) on the specified channel.
 308:.././hal/sam3u1c/tc.c ****  *
 309:.././hal/sam3u1c/tc.c ****  * \param[out] p_tc      Module hardware register base address pointer
 310:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to write
 311:.././hal/sam3u1c/tc.c ****  * \param[in] ul_value   Value to write
 312:.././hal/sam3u1c/tc.c ****  */
 313:.././hal/sam3u1c/tc.c **** void tc_write_rb(
 314:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 315:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel,
 316:.././hal/sam3u1c/tc.c **** 		uint32_t ul_value)
 317:.././hal/sam3u1c/tc.c **** {
 560              	 .loc 1 317 1
 561              	 .cfi_startproc
 562              	 
 563              	 
 564              	 
 565 0000 80B4     	 push {r7}
 566              	.LCFI60:
 567              	 .cfi_def_cfa_offset 4
 568              	 .cfi_offset 7,-4
 569 0002 85B0     	 sub sp,sp,#20
 570              	.LCFI61:
 571              	 .cfi_def_cfa_offset 24
 572 0004 00AF     	 add r7,sp,#0
 573              	.LCFI62:
 574              	 .cfi_def_cfa_register 7
 575 0006 F860     	 str r0,[r7,#12]
 576 0008 B960     	 str r1,[r7,#8]
 577 000a 7A60     	 str r2,[r7,#4]
 318:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 319:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 320:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 321:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 322:.././hal/sam3u1c/tc.c **** 
 323:.././hal/sam3u1c/tc.c **** 	p_tc->TC_CHANNEL[ul_channel].TC_RB = ul_value;
 578              	 .loc 1 323 37
 579 000c FA68     	 ldr r2,[r7,#12]
 580 000e BB68     	 ldr r3,[r7,#8]
 581 0010 9B01     	 lsls r3,r3,#6
 582 0012 1344     	 add r3,r3,r2
 583 0014 1833     	 adds r3,r3,#24
 584 0016 7A68     	 ldr r2,[r7,#4]
 585 0018 1A60     	 str r2,[r3]
 324:.././hal/sam3u1c/tc.c **** }
 586              	 .loc 1 324 1
 587 001a 00BF     	 nop
 588 001c 1437     	 adds r7,r7,#20
 589              	.LCFI63:
 590              	 .cfi_def_cfa_offset 4
 591 001e BD46     	 mov sp,r7
 592              	.LCFI64:
 593              	 .cfi_def_cfa_register 13
 594              	 
 595 0020 80BC     	 pop {r7}
 596              	.LCFI65:
 597              	 .cfi_restore 7
 598              	 .cfi_def_cfa_offset 0
 599 0022 7047     	 bx lr
 600              	 .cfi_endproc
 601              	.LFE79:
 603              	 .section .text.tc_write_rc,"ax",%progbits
 604              	 .align 1
 605              	 .global tc_write_rc
 606              	 .syntax unified
 607              	 .thumb
 608              	 .thumb_func
 609              	 .fpu softvfp
 611              	tc_write_rc:
 612              	.LFB80:
 325:.././hal/sam3u1c/tc.c **** 
 326:.././hal/sam3u1c/tc.c **** /**
 327:.././hal/sam3u1c/tc.c ****  * \brief Write to TC Register C (RC) on the selected channel.
 328:.././hal/sam3u1c/tc.c ****  *
 329:.././hal/sam3u1c/tc.c ****  * \param[out] p_tc      Module hardware register base address pointer
 330:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to write
 331:.././hal/sam3u1c/tc.c ****  * \param[in] ul_value   Value to write
 332:.././hal/sam3u1c/tc.c ****  */
 333:.././hal/sam3u1c/tc.c **** void tc_write_rc(
 334:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 335:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel,
 336:.././hal/sam3u1c/tc.c **** 		uint32_t ul_value)
 337:.././hal/sam3u1c/tc.c **** {
 613              	 .loc 1 337 1
 614              	 .cfi_startproc
 615              	 
 616              	 
 617              	 
 618 0000 80B4     	 push {r7}
 619              	.LCFI66:
 620              	 .cfi_def_cfa_offset 4
 621              	 .cfi_offset 7,-4
 622 0002 85B0     	 sub sp,sp,#20
 623              	.LCFI67:
 624              	 .cfi_def_cfa_offset 24
 625 0004 00AF     	 add r7,sp,#0
 626              	.LCFI68:
 627              	 .cfi_def_cfa_register 7
 628 0006 F860     	 str r0,[r7,#12]
 629 0008 B960     	 str r1,[r7,#8]
 630 000a 7A60     	 str r2,[r7,#4]
 338:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 339:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 340:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 341:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 342:.././hal/sam3u1c/tc.c **** 
 343:.././hal/sam3u1c/tc.c **** 	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
 631              	 .loc 1 343 37
 632 000c FA68     	 ldr r2,[r7,#12]
 633 000e BB68     	 ldr r3,[r7,#8]
 634 0010 9B01     	 lsls r3,r3,#6
 635 0012 1344     	 add r3,r3,r2
 636 0014 1C33     	 adds r3,r3,#28
 637 0016 7A68     	 ldr r2,[r7,#4]
 638 0018 1A60     	 str r2,[r3]
 344:.././hal/sam3u1c/tc.c **** }
 639              	 .loc 1 344 1
 640 001a 00BF     	 nop
 641 001c 1437     	 adds r7,r7,#20
 642              	.LCFI69:
 643              	 .cfi_def_cfa_offset 4
 644 001e BD46     	 mov sp,r7
 645              	.LCFI70:
 646              	 .cfi_def_cfa_register 13
 647              	 
 648 0020 80BC     	 pop {r7}
 649              	.LCFI71:
 650              	 .cfi_restore 7
 651              	 .cfi_def_cfa_offset 0
 652 0022 7047     	 bx lr
 653              	 .cfi_endproc
 654              	.LFE80:
 656              	 .section .text.tc_enable_interrupt,"ax",%progbits
 657              	 .align 1
 658              	 .global tc_enable_interrupt
 659              	 .syntax unified
 660              	 .thumb
 661              	 .thumb_func
 662              	 .fpu softvfp
 664              	tc_enable_interrupt:
 665              	.LFB81:
 345:.././hal/sam3u1c/tc.c **** 
 346:.././hal/sam3u1c/tc.c **** /**
 347:.././hal/sam3u1c/tc.c ****  * \brief Enable the TC interrupts on the specified channel.
 348:.././hal/sam3u1c/tc.c ****  *
 349:.././hal/sam3u1c/tc.c ****  * \param[in,out] p_tc   Module hardware register base address pointer
 350:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to configure
 351:.././hal/sam3u1c/tc.c ****  * \param[in] ul_sources Bitmask of interrupt sources
 352:.././hal/sam3u1c/tc.c ****  *
 353:.././hal/sam3u1c/tc.c ****  * Where the input parameter <i>ul_sources</i> can be one or more of the following:
 354:.././hal/sam3u1c/tc.c ****  * <table>
 355:.././hal/sam3u1c/tc.c ****  * <tr>
 356:.././hal/sam3u1c/tc.c ****  *    <th>Parameter Value</th>
 357:.././hal/sam3u1c/tc.c ****  *    <th>Description</th>
 358:.././hal/sam3u1c/tc.c ****  * </tr>
 359:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IER_COVFS</td><td>Enables the Counter Overflow Interrupt</td></tr>
 360:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IER_LOVRS</td><td>Enables the Load Overrun Interrupt</td></tr>
 361:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IER_CPAS</td><td>Enables the RA Compare Interrupt</td></tr>
 362:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IER_CPBS</td><td>Enables the RB Compare Interrupt</td></tr>
 363:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IER_CPCS</td><td>Enables the RC Compare Interrupt</td></tr>
 364:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IER_LDRAS</td><td>Enables the RA Load Interrupt</td></tr>
 365:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IER_LDRBS</td><td>Enables the RB Load Interrupt</td></tr>
 366:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IER_ETRGS</td><td>Enables the External Trigger Interrupt</td></tr>
 367:.././hal/sam3u1c/tc.c ****  * </table>
 368:.././hal/sam3u1c/tc.c ****  */
 369:.././hal/sam3u1c/tc.c **** void tc_enable_interrupt(
 370:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 371:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel,
 372:.././hal/sam3u1c/tc.c **** 		uint32_t ul_sources)
 373:.././hal/sam3u1c/tc.c **** {
 666              	 .loc 1 373 1
 667              	 .cfi_startproc
 668              	 
 669              	 
 670              	 
 671 0000 80B4     	 push {r7}
 672              	.LCFI72:
 673              	 .cfi_def_cfa_offset 4
 674              	 .cfi_offset 7,-4
 675 0002 87B0     	 sub sp,sp,#28
 676              	.LCFI73:
 677              	 .cfi_def_cfa_offset 32
 678 0004 00AF     	 add r7,sp,#0
 679              	.LCFI74:
 680              	 .cfi_def_cfa_register 7
 681 0006 F860     	 str r0,[r7,#12]
 682 0008 B960     	 str r1,[r7,#8]
 683 000a 7A60     	 str r2,[r7,#4]
 374:.././hal/sam3u1c/tc.c **** 	TcChannel *tc_channel;
 375:.././hal/sam3u1c/tc.c **** 
 376:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 377:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 378:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 379:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 380:.././hal/sam3u1c/tc.c **** 	tc_channel = p_tc->TC_CHANNEL + ul_channel;
 684              	 .loc 1 380 15
 685 000c FA68     	 ldr r2,[r7,#12]
 686              	 .loc 1 380 32
 687 000e BB68     	 ldr r3,[r7,#8]
 688 0010 9B01     	 lsls r3,r3,#6
 689              	 .loc 1 380 13
 690 0012 1344     	 add r3,r3,r2
 691 0014 7B61     	 str r3,[r7,#20]
 381:.././hal/sam3u1c/tc.c **** 	tc_channel->TC_IER = ul_sources;
 692              	 .loc 1 381 21
 693 0016 7B69     	 ldr r3,[r7,#20]
 694 0018 7A68     	 ldr r2,[r7,#4]
 695 001a 5A62     	 str r2,[r3,#36]
 382:.././hal/sam3u1c/tc.c **** }
 696              	 .loc 1 382 1
 697 001c 00BF     	 nop
 698 001e 1C37     	 adds r7,r7,#28
 699              	.LCFI75:
 700              	 .cfi_def_cfa_offset 4
 701 0020 BD46     	 mov sp,r7
 702              	.LCFI76:
 703              	 .cfi_def_cfa_register 13
 704              	 
 705 0022 80BC     	 pop {r7}
 706              	.LCFI77:
 707              	 .cfi_restore 7
 708              	 .cfi_def_cfa_offset 0
 709 0024 7047     	 bx lr
 710              	 .cfi_endproc
 711              	.LFE81:
 713              	 .section .text.tc_disable_interrupt,"ax",%progbits
 714              	 .align 1
 715              	 .global tc_disable_interrupt
 716              	 .syntax unified
 717              	 .thumb
 718              	 .thumb_func
 719              	 .fpu softvfp
 721              	tc_disable_interrupt:
 722              	.LFB82:
 383:.././hal/sam3u1c/tc.c **** 
 384:.././hal/sam3u1c/tc.c **** /**
 385:.././hal/sam3u1c/tc.c ****  * \brief Disable TC interrupts on the specified channel.
 386:.././hal/sam3u1c/tc.c ****  *
 387:.././hal/sam3u1c/tc.c ****  * \param[in,out] p_tc   Module hardware register base address pointer
 388:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to configure
 389:.././hal/sam3u1c/tc.c ****  * \param[in] ul_sources A bitmask of Interrupt sources
 390:.././hal/sam3u1c/tc.c ****  *
 391:.././hal/sam3u1c/tc.c ****  * Where the input parameter <i>ul_sources</i> can be one or more of the following:
 392:.././hal/sam3u1c/tc.c ****  * <table>
 393:.././hal/sam3u1c/tc.c ****  * <tr>
 394:.././hal/sam3u1c/tc.c ****  *    <th>Parameter Value</th>
 395:.././hal/sam3u1c/tc.c ****  *    <th>Description</th>
 396:.././hal/sam3u1c/tc.c ****  * </tr>
 397:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IDR_COVFS</td><td>Disables the Counter Overflow Interrupt</td></tr>
 398:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IDR_LOVRS</td><td>Disables the Load Overrun Interrupt</td></tr>
 399:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IDR_CPAS</td><td>Disables the RA Compare Interrupt</td></tr>
 400:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IDR_CPBS</td><td>Disables the RB Compare Interrupt</td></tr>
 401:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IDR_CPCS</td><td>Disables the RC Compare Interrupt</td></tr>
 402:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IDR_LDRAS</td><td>Disables the RA Load Interrupt</td></tr>
 403:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IDR_LDRBS</td><td>Disables the RB Load Interrupt</td></tr>
 404:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_IDR_ETRGS</td><td>Disables the External Trigger Interrupt</td></tr>
 405:.././hal/sam3u1c/tc.c ****  * </table>
 406:.././hal/sam3u1c/tc.c ****  */
 407:.././hal/sam3u1c/tc.c **** void tc_disable_interrupt(
 408:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 409:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel,
 410:.././hal/sam3u1c/tc.c **** 		uint32_t ul_sources)
 411:.././hal/sam3u1c/tc.c **** {
 723              	 .loc 1 411 1
 724              	 .cfi_startproc
 725              	 
 726              	 
 727              	 
 728 0000 80B4     	 push {r7}
 729              	.LCFI78:
 730              	 .cfi_def_cfa_offset 4
 731              	 .cfi_offset 7,-4
 732 0002 87B0     	 sub sp,sp,#28
 733              	.LCFI79:
 734              	 .cfi_def_cfa_offset 32
 735 0004 00AF     	 add r7,sp,#0
 736              	.LCFI80:
 737              	 .cfi_def_cfa_register 7
 738 0006 F860     	 str r0,[r7,#12]
 739 0008 B960     	 str r1,[r7,#8]
 740 000a 7A60     	 str r2,[r7,#4]
 412:.././hal/sam3u1c/tc.c **** 	TcChannel *tc_channel;
 413:.././hal/sam3u1c/tc.c **** 
 414:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 415:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 416:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 417:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 418:.././hal/sam3u1c/tc.c **** 	tc_channel = p_tc->TC_CHANNEL + ul_channel;
 741              	 .loc 1 418 15
 742 000c FA68     	 ldr r2,[r7,#12]
 743              	 .loc 1 418 32
 744 000e BB68     	 ldr r3,[r7,#8]
 745 0010 9B01     	 lsls r3,r3,#6
 746              	 .loc 1 418 13
 747 0012 1344     	 add r3,r3,r2
 748 0014 7B61     	 str r3,[r7,#20]
 419:.././hal/sam3u1c/tc.c **** 	tc_channel->TC_IDR = ul_sources;
 749              	 .loc 1 419 21
 750 0016 7B69     	 ldr r3,[r7,#20]
 751 0018 7A68     	 ldr r2,[r7,#4]
 752 001a 9A62     	 str r2,[r3,#40]
 420:.././hal/sam3u1c/tc.c **** }
 753              	 .loc 1 420 1
 754 001c 00BF     	 nop
 755 001e 1C37     	 adds r7,r7,#28
 756              	.LCFI81:
 757              	 .cfi_def_cfa_offset 4
 758 0020 BD46     	 mov sp,r7
 759              	.LCFI82:
 760              	 .cfi_def_cfa_register 13
 761              	 
 762 0022 80BC     	 pop {r7}
 763              	.LCFI83:
 764              	 .cfi_restore 7
 765              	 .cfi_def_cfa_offset 0
 766 0024 7047     	 bx lr
 767              	 .cfi_endproc
 768              	.LFE82:
 770              	 .section .text.tc_get_interrupt_mask,"ax",%progbits
 771              	 .align 1
 772              	 .global tc_get_interrupt_mask
 773              	 .syntax unified
 774              	 .thumb
 775              	 .thumb_func
 776              	 .fpu softvfp
 778              	tc_get_interrupt_mask:
 779              	.LFB83:
 421:.././hal/sam3u1c/tc.c **** 
 422:.././hal/sam3u1c/tc.c **** /**
 423:.././hal/sam3u1c/tc.c ****  * \brief Read the TC interrupt mask for the specified channel.
 424:.././hal/sam3u1c/tc.c ****  *
 425:.././hal/sam3u1c/tc.c ****  * \param[in] p_tc       Module hardware register base address pointer
 426:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel to read
 427:.././hal/sam3u1c/tc.c ****  *
 428:.././hal/sam3u1c/tc.c ****  * \return The TC interrupt mask value.
 429:.././hal/sam3u1c/tc.c ****  */
 430:.././hal/sam3u1c/tc.c **** uint32_t tc_get_interrupt_mask(
 431:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 432:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel)
 433:.././hal/sam3u1c/tc.c **** {
 780              	 .loc 1 433 1
 781              	 .cfi_startproc
 782              	 
 783              	 
 784              	 
 785 0000 80B4     	 push {r7}
 786              	.LCFI84:
 787              	 .cfi_def_cfa_offset 4
 788              	 .cfi_offset 7,-4
 789 0002 85B0     	 sub sp,sp,#20
 790              	.LCFI85:
 791              	 .cfi_def_cfa_offset 24
 792 0004 00AF     	 add r7,sp,#0
 793              	.LCFI86:
 794              	 .cfi_def_cfa_register 7
 795 0006 7860     	 str r0,[r7,#4]
 796 0008 3960     	 str r1,[r7]
 434:.././hal/sam3u1c/tc.c **** 	TcChannel *tc_channel;
 435:.././hal/sam3u1c/tc.c **** 
 436:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 437:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 438:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 439:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 440:.././hal/sam3u1c/tc.c **** 	tc_channel = p_tc->TC_CHANNEL + ul_channel;
 797              	 .loc 1 440 15
 798 000a 7A68     	 ldr r2,[r7,#4]
 799              	 .loc 1 440 32
 800 000c 3B68     	 ldr r3,[r7]
 801 000e 9B01     	 lsls r3,r3,#6
 802              	 .loc 1 440 13
 803 0010 1344     	 add r3,r3,r2
 804 0012 FB60     	 str r3,[r7,#12]
 441:.././hal/sam3u1c/tc.c **** 	return tc_channel->TC_IMR;
 805              	 .loc 1 441 19
 806 0014 FB68     	 ldr r3,[r7,#12]
 807 0016 DB6A     	 ldr r3,[r3,#44]
 442:.././hal/sam3u1c/tc.c **** }
 808              	 .loc 1 442 1
 809 0018 1846     	 mov r0,r3
 810 001a 1437     	 adds r7,r7,#20
 811              	.LCFI87:
 812              	 .cfi_def_cfa_offset 4
 813 001c BD46     	 mov sp,r7
 814              	.LCFI88:
 815              	 .cfi_def_cfa_register 13
 816              	 
 817 001e 80BC     	 pop {r7}
 818              	.LCFI89:
 819              	 .cfi_restore 7
 820              	 .cfi_def_cfa_offset 0
 821 0020 7047     	 bx lr
 822              	 .cfi_endproc
 823              	.LFE83:
 825              	 .section .text.tc_get_status,"ax",%progbits
 826              	 .align 1
 827              	 .global tc_get_status
 828              	 .syntax unified
 829              	 .thumb
 830              	 .thumb_func
 831              	 .fpu softvfp
 833              	tc_get_status:
 834              	.LFB84:
 443:.././hal/sam3u1c/tc.c **** 
 444:.././hal/sam3u1c/tc.c **** /**
 445:.././hal/sam3u1c/tc.c ****  * \brief Get the current status for the specified TC channel.
 446:.././hal/sam3u1c/tc.c ****  *
 447:.././hal/sam3u1c/tc.c ****  * \param[in] p_tc       Module hardware register base address pointer
 448:.././hal/sam3u1c/tc.c ****  * \param[in] ul_channel Channel number
 449:.././hal/sam3u1c/tc.c ****  *
 450:.././hal/sam3u1c/tc.c ****  * \return The current TC status.
 451:.././hal/sam3u1c/tc.c ****  */
 452:.././hal/sam3u1c/tc.c **** uint32_t tc_get_status(
 453:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 454:.././hal/sam3u1c/tc.c **** 		uint32_t ul_channel)
 455:.././hal/sam3u1c/tc.c **** {
 835              	 .loc 1 455 1
 836              	 .cfi_startproc
 837              	 
 838              	 
 839              	 
 840 0000 80B4     	 push {r7}
 841              	.LCFI90:
 842              	 .cfi_def_cfa_offset 4
 843              	 .cfi_offset 7,-4
 844 0002 85B0     	 sub sp,sp,#20
 845              	.LCFI91:
 846              	 .cfi_def_cfa_offset 24
 847 0004 00AF     	 add r7,sp,#0
 848              	.LCFI92:
 849              	 .cfi_def_cfa_register 7
 850 0006 7860     	 str r0,[r7,#4]
 851 0008 3960     	 str r1,[r7]
 456:.././hal/sam3u1c/tc.c **** 	TcChannel *tc_channel;
 457:.././hal/sam3u1c/tc.c **** 
 458:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 459:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 460:.././hal/sam3u1c/tc.c **** 	Assert(ul_channel <
 461:.././hal/sam3u1c/tc.c **** 			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
 462:.././hal/sam3u1c/tc.c **** 			
 463:.././hal/sam3u1c/tc.c **** 	tc_channel = p_tc->TC_CHANNEL + ul_channel;
 852              	 .loc 1 463 15
 853 000a 7A68     	 ldr r2,[r7,#4]
 854              	 .loc 1 463 32
 855 000c 3B68     	 ldr r3,[r7]
 856 000e 9B01     	 lsls r3,r3,#6
 857              	 .loc 1 463 13
 858 0010 1344     	 add r3,r3,r2
 859 0012 FB60     	 str r3,[r7,#12]
 464:.././hal/sam3u1c/tc.c **** 	return tc_channel->TC_SR;
 860              	 .loc 1 464 19
 861 0014 FB68     	 ldr r3,[r7,#12]
 862 0016 1B6A     	 ldr r3,[r3,#32]
 465:.././hal/sam3u1c/tc.c **** }
 863              	 .loc 1 465 1
 864 0018 1846     	 mov r0,r3
 865 001a 1437     	 adds r7,r7,#20
 866              	.LCFI93:
 867              	 .cfi_def_cfa_offset 4
 868 001c BD46     	 mov sp,r7
 869              	.LCFI94:
 870              	 .cfi_def_cfa_register 13
 871              	 
 872 001e 80BC     	 pop {r7}
 873              	.LCFI95:
 874              	 .cfi_restore 7
 875              	 .cfi_def_cfa_offset 0
 876 0020 7047     	 bx lr
 877              	 .cfi_endproc
 878              	.LFE84:
 880              	 .section .text.tc_find_mck_divisor,"ax",%progbits
 881              	 .align 1
 882              	 .global tc_find_mck_divisor
 883              	 .syntax unified
 884              	 .thumb
 885              	 .thumb_func
 886              	 .fpu softvfp
 888              	tc_find_mck_divisor:
 889              	.LFB85:
 466:.././hal/sam3u1c/tc.c **** 
 467:.././hal/sam3u1c/tc.c **** /* TC divisor used to find the lowest acceptable timer frequency */
 468:.././hal/sam3u1c/tc.c **** #define TC_DIV_FACTOR 65536
 469:.././hal/sam3u1c/tc.c **** 
 470:.././hal/sam3u1c/tc.c **** #if (!SAM4L) && !defined(__DOXYGEN__)
 471:.././hal/sam3u1c/tc.c **** 
 472:.././hal/sam3u1c/tc.c **** #ifndef FREQ_SLOW_CLOCK_EXT
 473:.././hal/sam3u1c/tc.c **** #define FREQ_SLOW_CLOCK_EXT 32768 /* External slow clock frequency (hz) */
 474:.././hal/sam3u1c/tc.c **** #endif
 475:.././hal/sam3u1c/tc.c **** 
 476:.././hal/sam3u1c/tc.c **** /**
 477:.././hal/sam3u1c/tc.c ****  * \brief Find the best MCK divisor.
 478:.././hal/sam3u1c/tc.c ****  *
 479:.././hal/sam3u1c/tc.c ****  * Finds the best MCK divisor given the timer frequency and MCK. The result
 480:.././hal/sam3u1c/tc.c ****  * is guaranteed to satisfy the following equation:
 481:.././hal/sam3u1c/tc.c ****  * \code (MCK / (DIV * 65536)) <= freq <= (MCK / DIV) \endcode
 482:.././hal/sam3u1c/tc.c ****  * with DIV being the lowest possible value, to maximize timing adjust resolution.
 483:.././hal/sam3u1c/tc.c ****  *
 484:.././hal/sam3u1c/tc.c ****  * \param[in] ul_freq     Desired timer frequency
 485:.././hal/sam3u1c/tc.c ****  * \param[in] ul_mck      Master clock frequency
 486:.././hal/sam3u1c/tc.c ****  * \param[out] p_uldiv    Divisor value
 487:.././hal/sam3u1c/tc.c ****  * \param[out] p_ultcclks TCCLKS field value for divisor
 488:.././hal/sam3u1c/tc.c ****  * \param[in] ul_boardmck Board clock frequency
 489:.././hal/sam3u1c/tc.c ****  *
 490:.././hal/sam3u1c/tc.c ****  * \return The divisor found status.
 491:.././hal/sam3u1c/tc.c ****  * \retval 0 No suitable divisor was found
 492:.././hal/sam3u1c/tc.c ****  * \retval 1 A divisor was found
 493:.././hal/sam3u1c/tc.c ****  */
 494:.././hal/sam3u1c/tc.c **** uint32_t tc_find_mck_divisor(
 495:.././hal/sam3u1c/tc.c **** 		uint32_t ul_freq,
 496:.././hal/sam3u1c/tc.c **** 		uint32_t ul_mck,
 497:.././hal/sam3u1c/tc.c **** 		uint32_t *p_uldiv,
 498:.././hal/sam3u1c/tc.c **** 		uint32_t *p_ultcclks,
 499:.././hal/sam3u1c/tc.c **** 		uint32_t ul_boardmck)
 500:.././hal/sam3u1c/tc.c **** {
 890              	 .loc 1 500 1
 891              	 .cfi_startproc
 892              	 
 893              	 
 894              	 
 895 0000 80B4     	 push {r7}
 896              	.LCFI96:
 897              	 .cfi_def_cfa_offset 4
 898              	 .cfi_offset 7,-4
 899 0002 8DB0     	 sub sp,sp,#52
 900              	.LCFI97:
 901              	 .cfi_def_cfa_offset 56
 902 0004 00AF     	 add r7,sp,#0
 903              	.LCFI98:
 904              	 .cfi_def_cfa_register 7
 905 0006 F860     	 str r0,[r7,#12]
 906 0008 B960     	 str r1,[r7,#8]
 907 000a 7A60     	 str r2,[r7,#4]
 908 000c 3B60     	 str r3,[r7]
 501:.././hal/sam3u1c/tc.c **** 	const uint32_t divisors[5] = { 2, 8, 32, 128,
 909              	 .loc 1 501 17
 910 000e 0223     	 movs r3,#2
 911 0010 3B61     	 str r3,[r7,#16]
 912 0012 0823     	 movs r3,#8
 913 0014 7B61     	 str r3,[r7,#20]
 914 0016 2023     	 movs r3,#32
 915 0018 BB61     	 str r3,[r7,#24]
 916 001a 8023     	 movs r3,#128
 917 001c FB61     	 str r3,[r7,#28]
 502:.././hal/sam3u1c/tc.c **** 			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
 918              	 .loc 1 502 16
 919 001e BB6B     	 ldr r3,[r7,#56]
 920 0020 DB0B     	 lsrs r3,r3,#15
 501:.././hal/sam3u1c/tc.c **** 	const uint32_t divisors[5] = { 2, 8, 32, 128,
 921              	 .loc 1 501 17
 922 0022 3B62     	 str r3,[r7,#32]
 503:.././hal/sam3u1c/tc.c **** 	uint32_t ul_index;
 504:.././hal/sam3u1c/tc.c **** 	uint32_t ul_high, ul_low;
 505:.././hal/sam3u1c/tc.c **** 
 506:.././hal/sam3u1c/tc.c **** 	/*  Satisfy frequency bound. */
 507:.././hal/sam3u1c/tc.c **** 	for (ul_index = 0;
 923              	 .loc 1 507 16
 924 0024 0023     	 movs r3,#0
 925 0026 FB62     	 str r3,[r7,#44]
 926              	 .loc 1 507 2
 927 0028 1AE0     	 b .L24
 928              	.L29:
 508:.././hal/sam3u1c/tc.c **** 			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
 509:.././hal/sam3u1c/tc.c **** 			ul_index++) {
 510:.././hal/sam3u1c/tc.c **** 		ul_high = ul_mck / divisors[ul_index];
 929              	 .loc 1 510 30
 930 002a FB6A     	 ldr r3,[r7,#44]
 931 002c 9B00     	 lsls r3,r3,#2
 932 002e 07F13002 	 add r2,r7,#48
 933 0032 1344     	 add r3,r3,r2
 934 0034 53F8203C 	 ldr r3,[r3,#-32]
 935              	 .loc 1 510 11
 936 0038 BA68     	 ldr r2,[r7,#8]
 937 003a B2FBF3F3 	 udiv r3,r2,r3
 938 003e BB62     	 str r3,[r7,#40]
 511:.././hal/sam3u1c/tc.c **** 		ul_low  = ul_high / TC_DIV_FACTOR;
 939              	 .loc 1 511 11
 940 0040 BB6A     	 ldr r3,[r7,#40]
 941 0042 1B0C     	 lsrs r3,r3,#16
 942 0044 7B62     	 str r3,[r7,#36]
 512:.././hal/sam3u1c/tc.c **** 		if (ul_freq > ul_high) {
 943              	 .loc 1 512 6
 944 0046 FA68     	 ldr r2,[r7,#12]
 945 0048 BB6A     	 ldr r3,[r7,#40]
 946 004a 9A42     	 cmp r2,r3
 947 004c 01D9     	 bls .L25
 513:.././hal/sam3u1c/tc.c **** 			return 0;
 948              	 .loc 1 513 11
 949 004e 0023     	 movs r3,#0
 950 0050 23E0     	 b .L33
 951              	.L25:
 514:.././hal/sam3u1c/tc.c **** 		} else if (ul_freq >= ul_low) {
 952              	 .loc 1 514 13
 953 0052 FA68     	 ldr r2,[r7,#12]
 954 0054 7B6A     	 ldr r3,[r7,#36]
 955 0056 9A42     	 cmp r2,r3
 956 0058 06D2     	 bcs .L34
 509:.././hal/sam3u1c/tc.c **** 		ul_high = ul_mck / divisors[ul_index];
 957              	 .loc 1 509 12
 958 005a FB6A     	 ldr r3,[r7,#44]
 959 005c 0133     	 adds r3,r3,#1
 960 005e FB62     	 str r3,[r7,#44]
 961              	.L24:
 507:.././hal/sam3u1c/tc.c **** 			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
 962              	 .loc 1 507 2 discriminator 1
 963 0060 FB6A     	 ldr r3,[r7,#44]
 964 0062 042B     	 cmp r3,#4
 965 0064 E1D9     	 bls .L29
 966 0066 00E0     	 b .L28
 967              	.L34:
 515:.././hal/sam3u1c/tc.c **** 			break;
 968              	 .loc 1 515 4
 969 0068 00BF     	 nop
 970              	.L28:
 516:.././hal/sam3u1c/tc.c **** 		}
 517:.././hal/sam3u1c/tc.c **** 	}
 518:.././hal/sam3u1c/tc.c **** 	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
 971              	 .loc 1 518 5
 972 006a FB6A     	 ldr r3,[r7,#44]
 973 006c 042B     	 cmp r3,#4
 974 006e 01D9     	 bls .L30
 519:.././hal/sam3u1c/tc.c **** 		return 0;
 975              	 .loc 1 519 10
 976 0070 0023     	 movs r3,#0
 977 0072 12E0     	 b .L33
 978              	.L30:
 520:.././hal/sam3u1c/tc.c **** 	}
 521:.././hal/sam3u1c/tc.c **** 
 522:.././hal/sam3u1c/tc.c **** 	/*  Store results. */
 523:.././hal/sam3u1c/tc.c **** 	if (p_uldiv) {
 979              	 .loc 1 523 5
 980 0074 7B68     	 ldr r3,[r7,#4]
 981 0076 002B     	 cmp r3,#0
 982 0078 08D0     	 beq .L31
 524:.././hal/sam3u1c/tc.c **** 		*p_uldiv = divisors[ul_index];
 983              	 .loc 1 524 22
 984 007a FB6A     	 ldr r3,[r7,#44]
 985 007c 9B00     	 lsls r3,r3,#2
 986 007e 07F13002 	 add r2,r7,#48
 987 0082 1344     	 add r3,r3,r2
 988 0084 53F8202C 	 ldr r2,[r3,#-32]
 989              	 .loc 1 524 12
 990 0088 7B68     	 ldr r3,[r7,#4]
 991 008a 1A60     	 str r2,[r3]
 992              	.L31:
 525:.././hal/sam3u1c/tc.c **** 	}
 526:.././hal/sam3u1c/tc.c **** 
 527:.././hal/sam3u1c/tc.c **** 	if (p_ultcclks) {
 993              	 .loc 1 527 5
 994 008c 3B68     	 ldr r3,[r7]
 995 008e 002B     	 cmp r3,#0
 996 0090 02D0     	 beq .L32
 528:.././hal/sam3u1c/tc.c **** 		*p_ultcclks = ul_index;
 997              	 .loc 1 528 15
 998 0092 3B68     	 ldr r3,[r7]
 999 0094 FA6A     	 ldr r2,[r7,#44]
 1000 0096 1A60     	 str r2,[r3]
 1001              	.L32:
 529:.././hal/sam3u1c/tc.c **** 	}
 530:.././hal/sam3u1c/tc.c **** 
 531:.././hal/sam3u1c/tc.c **** 	return 1;
 1002              	 .loc 1 531 9
 1003 0098 0123     	 movs r3,#1
 1004              	.L33:
 532:.././hal/sam3u1c/tc.c **** }
 1005              	 .loc 1 532 1 discriminator 1
 1006 009a 1846     	 mov r0,r3
 1007 009c 3437     	 adds r7,r7,#52
 1008              	.LCFI99:
 1009              	 .cfi_def_cfa_offset 4
 1010 009e BD46     	 mov sp,r7
 1011              	.LCFI100:
 1012              	 .cfi_def_cfa_register 13
 1013              	 
 1014 00a0 80BC     	 pop {r7}
 1015              	.LCFI101:
 1016              	 .cfi_restore 7
 1017              	 .cfi_def_cfa_offset 0
 1018 00a2 7047     	 bx lr
 1019              	 .cfi_endproc
 1020              	.LFE85:
 1022              	 .section .text.tc_enable_qdec_interrupt,"ax",%progbits
 1023              	 .align 1
 1024              	 .global tc_enable_qdec_interrupt
 1025              	 .syntax unified
 1026              	 .thumb
 1027              	 .thumb_func
 1028              	 .fpu softvfp
 1030              	tc_enable_qdec_interrupt:
 1031              	.LFB86:
 533:.././hal/sam3u1c/tc.c **** 
 534:.././hal/sam3u1c/tc.c **** #endif /* (!SAM4L) */
 535:.././hal/sam3u1c/tc.c **** 
 536:.././hal/sam3u1c/tc.c **** #if (SAM4L) || defined(__DOXYGEN__)
 537:.././hal/sam3u1c/tc.c **** /**
 538:.././hal/sam3u1c/tc.c ****  * \brief Find the best PBA/MCK divisor.
 539:.././hal/sam3u1c/tc.c ****  *
 540:.././hal/sam3u1c/tc.c ****  * <b>For SAM4L devices:</b> Finds the best PBA divisor given the timer
 541:.././hal/sam3u1c/tc.c ****  * frequency and PBA clock. The result is guaranteed to satisfy the following equation:
 542:.././hal/sam3u1c/tc.c ****  * \code  (ul_pbaclk / (2* DIV * 65536)) <= freq <= (ul_pbaclk / (2* DIV)) \endcode
 543:.././hal/sam3u1c/tc.c ****  * with DIV being the lowest possible value, to maximize timing adjust resolution.
 544:.././hal/sam3u1c/tc.c ****  *
 545:.././hal/sam3u1c/tc.c ****  * <b>For non SAM4L devices:</b> Finds the best MCK divisor given the timer frequency
 546:.././hal/sam3u1c/tc.c ****  * and MCK. The result is guaranteed to satisfy the following equation:
 547:.././hal/sam3u1c/tc.c ****  * \code (MCK / (DIV * 65536)) <= freq <= (MCK / DIV) \endcode
 548:.././hal/sam3u1c/tc.c ****  * with DIV being the lowest possible value, to maximize timing adjust resolution.
 549:.././hal/sam3u1c/tc.c ****  *
 550:.././hal/sam3u1c/tc.c ****  * \param[in] ul_freq     Desired timer frequency
 551:.././hal/sam3u1c/tc.c ****  * \param[in] ul_mck      PBA clock frequency
 552:.././hal/sam3u1c/tc.c ****  * \param[out] p_uldiv    Divisor value
 553:.././hal/sam3u1c/tc.c ****  * \param[out] p_ultcclks TCCLKS field value for divisor
 554:.././hal/sam3u1c/tc.c ****  * \param[in] ul_boardmck Board clock frequency (set to 0 for SAM4L devices)
 555:.././hal/sam3u1c/tc.c ****  *
 556:.././hal/sam3u1c/tc.c ****  * \return The divisor found status.
 557:.././hal/sam3u1c/tc.c ****  * \retval 0 No suitable divisor was found
 558:.././hal/sam3u1c/tc.c ****  * \retval 1 A divisor was found
 559:.././hal/sam3u1c/tc.c ****  */
 560:.././hal/sam3u1c/tc.c **** uint32_t tc_find_mck_divisor(
 561:.././hal/sam3u1c/tc.c **** 		uint32_t ul_freq,
 562:.././hal/sam3u1c/tc.c **** 		uint32_t ul_mck,
 563:.././hal/sam3u1c/tc.c **** 		uint32_t *p_uldiv,
 564:.././hal/sam3u1c/tc.c **** 		uint32_t *p_ultcclks,
 565:.././hal/sam3u1c/tc.c **** 		uint32_t ul_boardmck)
 566:.././hal/sam3u1c/tc.c **** {
 567:.././hal/sam3u1c/tc.c **** 	const uint32_t divisors[5] = { 0, 2, 8, 32, 128};
 568:.././hal/sam3u1c/tc.c **** 	uint32_t ul_index;
 569:.././hal/sam3u1c/tc.c **** 	uint32_t ul_high, ul_low;
 570:.././hal/sam3u1c/tc.c **** 
 571:.././hal/sam3u1c/tc.c **** 	UNUSED(ul_boardmck);
 572:.././hal/sam3u1c/tc.c **** 
 573:.././hal/sam3u1c/tc.c **** 	/*  Satisfy frequency bound. */
 574:.././hal/sam3u1c/tc.c **** 	for (ul_index = 1;
 575:.././hal/sam3u1c/tc.c **** 			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
 576:.././hal/sam3u1c/tc.c **** 			ul_index++) {
 577:.././hal/sam3u1c/tc.c **** 		ul_high = ul_mck / divisors[ul_index];
 578:.././hal/sam3u1c/tc.c **** 		ul_low  = ul_high / TC_DIV_FACTOR;
 579:.././hal/sam3u1c/tc.c **** 		if (ul_freq > ul_high) {
 580:.././hal/sam3u1c/tc.c **** 			return 0;
 581:.././hal/sam3u1c/tc.c **** 		} else if (ul_freq >= ul_low) {
 582:.././hal/sam3u1c/tc.c **** 			break;
 583:.././hal/sam3u1c/tc.c **** 		}
 584:.././hal/sam3u1c/tc.c **** 	}
 585:.././hal/sam3u1c/tc.c **** 	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
 586:.././hal/sam3u1c/tc.c **** 		return 0;
 587:.././hal/sam3u1c/tc.c **** 	}
 588:.././hal/sam3u1c/tc.c **** 
 589:.././hal/sam3u1c/tc.c **** 	/*  Store results. */
 590:.././hal/sam3u1c/tc.c **** 	if (p_uldiv) {
 591:.././hal/sam3u1c/tc.c **** 		*p_uldiv = divisors[ul_index];
 592:.././hal/sam3u1c/tc.c **** 	}
 593:.././hal/sam3u1c/tc.c **** 
 594:.././hal/sam3u1c/tc.c **** 	if (p_ultcclks) {
 595:.././hal/sam3u1c/tc.c **** 		*p_ultcclks = ul_index;
 596:.././hal/sam3u1c/tc.c **** 	}
 597:.././hal/sam3u1c/tc.c **** 
 598:.././hal/sam3u1c/tc.c **** 	return 1;
 599:.././hal/sam3u1c/tc.c **** }
 600:.././hal/sam3u1c/tc.c **** 
 601:.././hal/sam3u1c/tc.c **** #endif /* (SAM4L) || defined(__DOXYGEN__) */
 602:.././hal/sam3u1c/tc.c **** 
 603:.././hal/sam3u1c/tc.c **** #if (!SAM4L && !SAMG) || defined(__DOXYGEN__)
 604:.././hal/sam3u1c/tc.c **** 
 605:.././hal/sam3u1c/tc.c **** /**
 606:.././hal/sam3u1c/tc.c ****  * \brief Enable TC QDEC interrupts.
 607:.././hal/sam3u1c/tc.c ****  *
 608:.././hal/sam3u1c/tc.c ****  * \note This function is not available on SAM4L or SAMG devices.
 609:.././hal/sam3u1c/tc.c ****  *
 610:.././hal/sam3u1c/tc.c ****  * \param[out] p_tc      Module hardware register base address pointer
 611:.././hal/sam3u1c/tc.c ****  * \param[in] ul_sources A bitmask of QDEC interrupts to be enabled
 612:.././hal/sam3u1c/tc.c ****  *
 613:.././hal/sam3u1c/tc.c ****  * Where the input parameter <i>ul_sources</i> can be one or more of the following:
 614:.././hal/sam3u1c/tc.c ****  * <table>
 615:.././hal/sam3u1c/tc.c ****  * <tr>
 616:.././hal/sam3u1c/tc.c ****  *    <th>Parameter Value</th>
 617:.././hal/sam3u1c/tc.c ****  *    <th>Description</th>
 618:.././hal/sam3u1c/tc.c ****  * </tr>
 619:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_QIER_IDX</td><td>Enable the rising edge detected on IDX input interrupt</td></tr>
 620:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_QIER_DIRCHG</td><td>Enable the change in rotation direction detected interrupt</t
 621:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_QIER_QERR</td><td>Enable the quadrature error detected on PHA/PHB interrupt</td><
 622:.././hal/sam3u1c/tc.c ****  * </table>
 623:.././hal/sam3u1c/tc.c ****  */
 624:.././hal/sam3u1c/tc.c **** void tc_enable_qdec_interrupt(
 625:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 626:.././hal/sam3u1c/tc.c **** 		uint32_t ul_sources)
 627:.././hal/sam3u1c/tc.c **** {
 1032              	 .loc 1 627 1
 1033              	 .cfi_startproc
 1034              	 
 1035              	 
 1036              	 
 1037 0000 80B4     	 push {r7}
 1038              	.LCFI102:
 1039              	 .cfi_def_cfa_offset 4
 1040              	 .cfi_offset 7,-4
 1041 0002 83B0     	 sub sp,sp,#12
 1042              	.LCFI103:
 1043              	 .cfi_def_cfa_offset 16
 1044 0004 00AF     	 add r7,sp,#0
 1045              	.LCFI104:
 1046              	 .cfi_def_cfa_register 7
 1047 0006 7860     	 str r0,[r7,#4]
 1048 0008 3960     	 str r1,[r7]
 628:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 629:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 630:.././hal/sam3u1c/tc.c **** 	
 631:.././hal/sam3u1c/tc.c **** 	p_tc->TC_QIER = ul_sources;
 1049              	 .loc 1 631 16
 1050 000a 7B68     	 ldr r3,[r7,#4]
 1051 000c 3A68     	 ldr r2,[r7]
 1052 000e C3F8C820 	 str r2,[r3,#200]
 632:.././hal/sam3u1c/tc.c **** }
 1053              	 .loc 1 632 1
 1054 0012 00BF     	 nop
 1055 0014 0C37     	 adds r7,r7,#12
 1056              	.LCFI105:
 1057              	 .cfi_def_cfa_offset 4
 1058 0016 BD46     	 mov sp,r7
 1059              	.LCFI106:
 1060              	 .cfi_def_cfa_register 13
 1061              	 
 1062 0018 80BC     	 pop {r7}
 1063              	.LCFI107:
 1064              	 .cfi_restore 7
 1065              	 .cfi_def_cfa_offset 0
 1066 001a 7047     	 bx lr
 1067              	 .cfi_endproc
 1068              	.LFE86:
 1070              	 .section .text.tc_disable_qdec_interrupt,"ax",%progbits
 1071              	 .align 1
 1072              	 .global tc_disable_qdec_interrupt
 1073              	 .syntax unified
 1074              	 .thumb
 1075              	 .thumb_func
 1076              	 .fpu softvfp
 1078              	tc_disable_qdec_interrupt:
 1079              	.LFB87:
 633:.././hal/sam3u1c/tc.c **** 
 634:.././hal/sam3u1c/tc.c **** /**
 635:.././hal/sam3u1c/tc.c ****  * \brief Disable TC QDEC interrupts.
 636:.././hal/sam3u1c/tc.c ****  *
 637:.././hal/sam3u1c/tc.c ****  * \note This function is not available on SAM4L or SAMG devices.
 638:.././hal/sam3u1c/tc.c ****  *
 639:.././hal/sam3u1c/tc.c ****  * \param[out] p_tc      Module hardware register base address pointer
 640:.././hal/sam3u1c/tc.c ****  * \param[in] ul_sources A bitmask of QDEC interrupts to be disabled
 641:.././hal/sam3u1c/tc.c ****  *
 642:.././hal/sam3u1c/tc.c ****  * Where the input parameter <i>ul_sources</i> can be one or more of the following:
 643:.././hal/sam3u1c/tc.c ****  * <table>
 644:.././hal/sam3u1c/tc.c ****  * <tr>
 645:.././hal/sam3u1c/tc.c ****  *    <th>Parameter Value</th>
 646:.././hal/sam3u1c/tc.c ****  *    <th>Description</th>
 647:.././hal/sam3u1c/tc.c ****  * </tr>
 648:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_QIDR_IDX</td><td>Disable the rising edge detected on IDX input interrupt</td></tr
 649:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_QIDR_DIRCHG</td><td>Disable the change in rotation direction detected interrupt</
 650:.././hal/sam3u1c/tc.c ****  *     <tr><td>TC_QIDR_QERR</td><td>Disable the quadrature error detected on PHA/PHB interrupt</td>
 651:.././hal/sam3u1c/tc.c ****  * </table>
 652:.././hal/sam3u1c/tc.c ****  */
 653:.././hal/sam3u1c/tc.c **** void tc_disable_qdec_interrupt(
 654:.././hal/sam3u1c/tc.c **** 		Tc *p_tc,
 655:.././hal/sam3u1c/tc.c **** 		uint32_t ul_sources)
 656:.././hal/sam3u1c/tc.c **** {
 1080              	 .loc 1 656 1
 1081              	 .cfi_startproc
 1082              	 
 1083              	 
 1084              	 
 1085 0000 80B4     	 push {r7}
 1086              	.LCFI108:
 1087              	 .cfi_def_cfa_offset 4
 1088              	 .cfi_offset 7,-4
 1089 0002 83B0     	 sub sp,sp,#12
 1090              	.LCFI109:
 1091              	 .cfi_def_cfa_offset 16
 1092 0004 00AF     	 add r7,sp,#0
 1093              	.LCFI110:
 1094              	 .cfi_def_cfa_register 7
 1095 0006 7860     	 str r0,[r7,#4]
 1096 0008 3960     	 str r1,[r7]
 657:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 658:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 659:.././hal/sam3u1c/tc.c **** 	
 660:.././hal/sam3u1c/tc.c **** 	p_tc->TC_QIDR = ul_sources;
 1097              	 .loc 1 660 16
 1098 000a 7B68     	 ldr r3,[r7,#4]
 1099 000c 3A68     	 ldr r2,[r7]
 1100 000e C3F8CC20 	 str r2,[r3,#204]
 661:.././hal/sam3u1c/tc.c **** }
 1101              	 .loc 1 661 1
 1102 0012 00BF     	 nop
 1103 0014 0C37     	 adds r7,r7,#12
 1104              	.LCFI111:
 1105              	 .cfi_def_cfa_offset 4
 1106 0016 BD46     	 mov sp,r7
 1107              	.LCFI112:
 1108              	 .cfi_def_cfa_register 13
 1109              	 
 1110 0018 80BC     	 pop {r7}
 1111              	.LCFI113:
 1112              	 .cfi_restore 7
 1113              	 .cfi_def_cfa_offset 0
 1114 001a 7047     	 bx lr
 1115              	 .cfi_endproc
 1116              	.LFE87:
 1118              	 .section .text.tc_get_qdec_interrupt_mask,"ax",%progbits
 1119              	 .align 1
 1120              	 .global tc_get_qdec_interrupt_mask
 1121              	 .syntax unified
 1122              	 .thumb
 1123              	 .thumb_func
 1124              	 .fpu softvfp
 1126              	tc_get_qdec_interrupt_mask:
 1127              	.LFB88:
 662:.././hal/sam3u1c/tc.c **** 
 663:.././hal/sam3u1c/tc.c **** /**
 664:.././hal/sam3u1c/tc.c ****  * \brief Read TC QDEC interrupt mask.
 665:.././hal/sam3u1c/tc.c ****  *
 666:.././hal/sam3u1c/tc.c ****  * \note This function is not available on SAM4L or SAMG devices.
 667:.././hal/sam3u1c/tc.c ****  *
 668:.././hal/sam3u1c/tc.c ****  * \param[in] p_tc Module hardware register base address pointer
 669:.././hal/sam3u1c/tc.c ****  *
 670:.././hal/sam3u1c/tc.c ****  * \return The QDEC interrupt mask value.
 671:.././hal/sam3u1c/tc.c ****  */
 672:.././hal/sam3u1c/tc.c **** uint32_t tc_get_qdec_interrupt_mask(
 673:.././hal/sam3u1c/tc.c **** 		Tc *p_tc)
 674:.././hal/sam3u1c/tc.c **** {
 1128              	 .loc 1 674 1
 1129              	 .cfi_startproc
 1130              	 
 1131              	 
 1132              	 
 1133 0000 80B4     	 push {r7}
 1134              	.LCFI114:
 1135              	 .cfi_def_cfa_offset 4
 1136              	 .cfi_offset 7,-4
 1137 0002 83B0     	 sub sp,sp,#12
 1138              	.LCFI115:
 1139              	 .cfi_def_cfa_offset 16
 1140 0004 00AF     	 add r7,sp,#0
 1141              	.LCFI116:
 1142              	 .cfi_def_cfa_register 7
 1143 0006 7860     	 str r0,[r7,#4]
 675:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 676:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 677:.././hal/sam3u1c/tc.c **** 	
 678:.././hal/sam3u1c/tc.c **** 	return p_tc->TC_QIMR;
 1144              	 .loc 1 678 13
 1145 0008 7B68     	 ldr r3,[r7,#4]
 1146 000a D3F8D030 	 ldr r3,[r3,#208]
 679:.././hal/sam3u1c/tc.c **** }
 1147              	 .loc 1 679 1
 1148 000e 1846     	 mov r0,r3
 1149 0010 0C37     	 adds r7,r7,#12
 1150              	.LCFI117:
 1151              	 .cfi_def_cfa_offset 4
 1152 0012 BD46     	 mov sp,r7
 1153              	.LCFI118:
 1154              	 .cfi_def_cfa_register 13
 1155              	 
 1156 0014 80BC     	 pop {r7}
 1157              	.LCFI119:
 1158              	 .cfi_restore 7
 1159              	 .cfi_def_cfa_offset 0
 1160 0016 7047     	 bx lr
 1161              	 .cfi_endproc
 1162              	.LFE88:
 1164              	 .section .text.tc_get_qdec_interrupt_status,"ax",%progbits
 1165              	 .align 1
 1166              	 .global tc_get_qdec_interrupt_status
 1167              	 .syntax unified
 1168              	 .thumb
 1169              	 .thumb_func
 1170              	 .fpu softvfp
 1172              	tc_get_qdec_interrupt_status:
 1173              	.LFB89:
 680:.././hal/sam3u1c/tc.c **** 
 681:.././hal/sam3u1c/tc.c **** /**
 682:.././hal/sam3u1c/tc.c ****  * \brief Get current TC QDEC interrupt status.
 683:.././hal/sam3u1c/tc.c ****  *
 684:.././hal/sam3u1c/tc.c ****  * \note This function is not available on SAM4L or SAMG devices.
 685:.././hal/sam3u1c/tc.c ****  *
 686:.././hal/sam3u1c/tc.c ****  * \param[in] p_tc Module hardware register base address pointer
 687:.././hal/sam3u1c/tc.c ****  *
 688:.././hal/sam3u1c/tc.c ****  * \return The TC QDEC interrupt status.
 689:.././hal/sam3u1c/tc.c ****  */
 690:.././hal/sam3u1c/tc.c **** uint32_t tc_get_qdec_interrupt_status(
 691:.././hal/sam3u1c/tc.c **** 		Tc *p_tc)
 692:.././hal/sam3u1c/tc.c **** {
 1174              	 .loc 1 692 1
 1175              	 .cfi_startproc
 1176              	 
 1177              	 
 1178              	 
 1179 0000 80B4     	 push {r7}
 1180              	.LCFI120:
 1181              	 .cfi_def_cfa_offset 4
 1182              	 .cfi_offset 7,-4
 1183 0002 83B0     	 sub sp,sp,#12
 1184              	.LCFI121:
 1185              	 .cfi_def_cfa_offset 16
 1186 0004 00AF     	 add r7,sp,#0
 1187              	.LCFI122:
 1188              	 .cfi_def_cfa_register 7
 1189 0006 7860     	 str r0,[r7,#4]
 693:.././hal/sam3u1c/tc.c **** 	/* Validate inputs. */
 694:.././hal/sam3u1c/tc.c **** 	Assert(p_tc);
 695:.././hal/sam3u1c/tc.c **** 	
 696:.././hal/sam3u1c/tc.c **** 	return p_tc->TC_QISR;
 1190              	 .loc 1 696 13
 1191 0008 7B68     	 ldr r3,[r7,#4]
 1192 000a D3F8D430 	 ldr r3,[r3,#212]
 697:.././hal/sam3u1c/tc.c **** }
 1193              	 .loc 1 697 1
 1194 000e 1846     	 mov r0,r3
 1195 0010 0C37     	 adds r7,r7,#12
 1196              	.LCFI123:
 1197              	 .cfi_def_cfa_offset 4
 1198 0012 BD46     	 mov sp,r7
 1199              	.LCFI124:
 1200              	 .cfi_def_cfa_register 13
 1201              	 
 1202 0014 80BC     	 pop {r7}
 1203              	.LCFI125:
 1204              	 .cfi_restore 7
 1205              	 .cfi_def_cfa_offset 0
 1206 0016 7047     	 bx lr
 1207              	 .cfi_endproc
 1208              	.LFE89:
 1210              	 .text
 1211              	.Letext0:
 1212              	 .file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 1213              	 .file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 1214              	 .file 4 ".././hal/sam3u1c/inc/sam3u1c.h"
 1215              	 .file 5 ".././hal/sam3u1c/inc/core_cm3.h"
 1216              	 .file 6 ".././hal/sam3u1c/inc/system_sam3u.h"
 1217              	 .file 7 ".././hal/sam3u1c/inc/component/component_tc.h"
 1218              	 .file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none-eabi\\9.3.1\\include\\stddef.h"
 1219              	 .file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 1220              	 .file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 1221              	 .file 11 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 1222              	 .file 12 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\include\\stdlib.h"
 1223              	 .file 13 ".././hal/sam3u1c/inc/interrupt/interrupt_sam_nvic.h"
DEFINED SYMBOLS
                            *ABS*:00000000 tc.c
    {standard input}:16     .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:19     .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:24     .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:25     .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:27     .text.tc_init:00000000 $t
    {standard input}:35     .text.tc_init:00000000 tc_init
    {standard input}:97     .text.tc_sync_trigger:00000000 $t
    {standard input}:104    .text.tc_sync_trigger:00000000 tc_sync_trigger
    {standard input}:144    .text.tc_set_block_mode:00000000 $t
    {standard input}:151    .text.tc_set_block_mode:00000000 tc_set_block_mode
    {standard input}:192    .text.tc_start:00000000 $t
    {standard input}:199    .text.tc_start:00000000 tc_start
    {standard input}:243    .text.tc_stop:00000000 $t
    {standard input}:250    .text.tc_stop:00000000 tc_stop
    {standard input}:294    .text.tc_read_cv:00000000 $t
    {standard input}:301    .text.tc_read_cv:00000000 tc_read_cv
    {standard input}:345    .text.tc_read_ra:00000000 $t
    {standard input}:352    .text.tc_read_ra:00000000 tc_read_ra
    {standard input}:396    .text.tc_read_rb:00000000 $t
    {standard input}:403    .text.tc_read_rb:00000000 tc_read_rb
    {standard input}:447    .text.tc_read_rc:00000000 $t
    {standard input}:454    .text.tc_read_rc:00000000 tc_read_rc
    {standard input}:498    .text.tc_write_ra:00000000 $t
    {standard input}:505    .text.tc_write_ra:00000000 tc_write_ra
    {standard input}:551    .text.tc_write_rb:00000000 $t
    {standard input}:558    .text.tc_write_rb:00000000 tc_write_rb
    {standard input}:604    .text.tc_write_rc:00000000 $t
    {standard input}:611    .text.tc_write_rc:00000000 tc_write_rc
    {standard input}:657    .text.tc_enable_interrupt:00000000 $t
    {standard input}:664    .text.tc_enable_interrupt:00000000 tc_enable_interrupt
    {standard input}:714    .text.tc_disable_interrupt:00000000 $t
    {standard input}:721    .text.tc_disable_interrupt:00000000 tc_disable_interrupt
    {standard input}:771    .text.tc_get_interrupt_mask:00000000 $t
    {standard input}:778    .text.tc_get_interrupt_mask:00000000 tc_get_interrupt_mask
    {standard input}:826    .text.tc_get_status:00000000 $t
    {standard input}:833    .text.tc_get_status:00000000 tc_get_status
    {standard input}:881    .text.tc_find_mck_divisor:00000000 $t
    {standard input}:888    .text.tc_find_mck_divisor:00000000 tc_find_mck_divisor
    {standard input}:1023   .text.tc_enable_qdec_interrupt:00000000 $t
    {standard input}:1030   .text.tc_enable_qdec_interrupt:00000000 tc_enable_qdec_interrupt
    {standard input}:1071   .text.tc_disable_qdec_interrupt:00000000 $t
    {standard input}:1078   .text.tc_disable_qdec_interrupt:00000000 tc_disable_qdec_interrupt
    {standard input}:1119   .text.tc_get_qdec_interrupt_mask:00000000 $t
    {standard input}:1126   .text.tc_get_qdec_interrupt_mask:00000000 tc_get_qdec_interrupt_mask
    {standard input}:1165   .text.tc_get_qdec_interrupt_status:00000000 $t
    {standard input}:1172   .text.tc_get_qdec_interrupt_status:00000000 tc_get_qdec_interrupt_status
                           .group:00000000 wm4.0.2cd8a2cb7ff4c48cec7eeec776a1dd8c
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.newlib.h.18.1c9fedb6b3cd797cff253cc0fd593ef2
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.features.h.22.026edb2397769f4ae13f35900dbdb560
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.assert.h.11.7fe9eb241be6b0fee772a1e693b81ae3
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.45.afc900689b2c82332e69d798acedc875
                           .group:00000000 wm4.tpaste.h.45.af3ee36765243b162c88f7f944858426
                           .group:00000000 wm4.stringz.h.45.c4f6cbe0005e6c1d2139bc6c0e4f4722
                           .group:00000000 wm4.mrepeat.h.59.c5daaed201a4340b0edf435161d0b77f
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam3u1c.h.220.c0b54b5a55bc87791749ae17b1487779
                           .group:00000000 wm4.core_cm3.h.32.5c59c312db585622d253fdb887b0afb1
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm3.h.127.b561404f2a159dc517b409bc244d16c1
                           .group:00000000 wm4.component_adc.h.43.d49887380d07d1cd08cc4e37b3485e31
                           .group:00000000 wm4.component_adc12b.h.43.eadc09f1073923fb91f1f393cc397dcb
                           .group:00000000 wm4.component_chipid.h.43.15825c969b1cc9eeea3d9416499874c8
                           .group:00000000 wm4.component_dmac.h.43.cc8187b1cf6bfeadc91b14fdd28b9e8b
                           .group:00000000 wm4.component_efc.h.43.cb1b3997ad9ea3733ad421ecbfd02fdd
                           .group:00000000 wm4.component_gpbr.h.43.49b7e13894fe38b29f2243bbbe530227
                           .group:00000000 wm4.component_hsmci.h.43.7b7194c92e1480c038f3342f7cec440a
                           .group:00000000 wm4.component_matrix.h.43.1d209838fb75b4827119203a357141ee
                           .group:00000000 wm4.component_pdc.h.43.19528a5f9ef5a348234ea06f89069c55
                           .group:00000000 wm4.component_pio.h.43.163b46c3683ccf92e8de39a5554f50e8
                           .group:00000000 wm4.component_pmc.h.43.ee4f030602866917aeed15fb2b948de8
                           .group:00000000 wm4.component_pwm.h.43.ab6262a86f0aea354b43fe6dce7e7eb3
                           .group:00000000 wm4.component_rstc.h.43.4eb59dc2ddcf585fabf251d0c329fcdd
                           .group:00000000 wm4.component_rtc.h.43.ba8ccafc772b11d562a3cceab8b95072
                           .group:00000000 wm4.component_rtt.h.43.3206ef8f067e5e747c3c4c7e719c1429
                           .group:00000000 wm4.component_smc.h.43.907847915f1a5616734199d7e34424fa
                           .group:00000000 wm4.component_spi.h.43.a2a09df64ab768c0a32be55285c74ded
                           .group:00000000 wm4.component_ssc.h.43.d7c78f990c13fc511671b64798c4bcd0
                           .group:00000000 wm4.component_supc.h.43.7d17f8e5ed3ba815e84381152735062f
                           .group:00000000 wm4.component_tc.h.43.662eac8137408372b4f9d26c0b5f8621
                           .group:00000000 wm4.component_twi.h.43.eda18625bd851fc4605861f5b3240c0b
                           .group:00000000 wm4.component_uart.h.43.2d92735c5ea05c973661e1ba99a2f37c
                           .group:00000000 wm4.component_udphs.h.43.21cecd26a4e44df0013037f29f2716e4
                           .group:00000000 wm4.component_usart.h.43.7872f8f455adb38b67b9fbdb15657fbe
                           .group:00000000 wm4.component_wdt.h.43.e31e10a5469b62c3660b49ab250f802f
                           .group:00000000 wm4.instance_hsmci.h.43.e233236cc7fd5a805539a7ecc0e1d8d2
                           .group:00000000 wm4.instance_ssc.h.43.c0cfabc3b9f3bb60745c913111bce965
                           .group:00000000 wm4.instance_spi.h.43.570ae46af19e4179d9796872b9a8b9bc
                           .group:00000000 wm4.instance_tc0.h.43.049b3a82387d2961594190609e896a29
                           .group:00000000 wm4.instance_twi0.h.43.255dc0afa9e0d45eaea0a935eca2f103
                           .group:00000000 wm4.instance_twi1.h.43.652d1d407893f259f2a817544ba662c2
                           .group:00000000 wm4.instance_pwm.h.43.88294acec3ca56d6fc521038521a1567
                           .group:00000000 wm4.instance_usart0.h.43.e26677512aee3dd3bedd71d394410000
                           .group:00000000 wm4.instance_usart1.h.43.1ba97dbc6610d9fb3132b9d845688201
                           .group:00000000 wm4.instance_usart2.h.43.baa1bf30b3c5acdee90c4a1f50fe9ebd
                           .group:00000000 wm4.instance_udphs.h.43.b1ce94181e0d1f22877b81c6040a4363
                           .group:00000000 wm4.instance_adc12b.h.43.d73ed59e867ccdfdb846d9ef32a50c0c
                           .group:00000000 wm4.instance_adc.h.43.2b7611a00afeb4c555339b844d4b8456
                           .group:00000000 wm4.instance_dmac.h.43.ee72691d84889c8f285932be4a075ddb
                           .group:00000000 wm4.instance_smc.h.43.29610fd00979caaaa65821ad40e9da06
                           .group:00000000 wm4.instance_matrix.h.43.01ee474141594385374c41a29daeeefe
                           .group:00000000 wm4.instance_pmc.h.43.37430325ed7b8b24c3fe640c41c29ef5
                           .group:00000000 wm4.instance_uart.h.43.bd378395ba022bc8670c82ebe656fbbd
                           .group:00000000 wm4.instance_chipid.h.43.29cd8fb600f149aa58830fcc78fe36f9
                           .group:00000000 wm4.instance_efc0.h.43.6b85dba20721a7e9fc4350e78d193680
                           .group:00000000 wm4.instance_efc1.h.43.2c5e94fc4d2742678318d73450d08d57
                           .group:00000000 wm4.instance_pioa.h.43.eeb46cc3bfe01a1f28e67aa3a6851ed8
                           .group:00000000 wm4.instance_piob.h.43.652ce26b6c37ac56f9ed42a9216d9aca
                           .group:00000000 wm4.instance_rstc.h.43.c5de224364a50a85f237c0b864aa4c8f
                           .group:00000000 wm4.instance_supc.h.43.a5f1a5ca08f468ccf34ed3653e045f1f
                           .group:00000000 wm4.instance_rtt.h.43.8622b192c23334996132415e3095df7f
                           .group:00000000 wm4.instance_wdt.h.43.407ea53e133eacf09acf2c7fcb6b7524
                           .group:00000000 wm4.instance_rtc.h.43.f70b77f9180401c8d9d920cb4a1cd166
                           .group:00000000 wm4.instance_gpbr.h.43.9066cb40d557f6755101368854272348
                           .group:00000000 wm4.sam3u1c.h.312.ae446d8e874d34ca3df78faf190c678f
                           .group:00000000 wm4.pio_sam3u1c.h.43.18b24f16e1710ff2a400d88fe33c5107
                           .group:00000000 wm4.sam3u1c.h.442.cd4bbc3af493e98bc9b60c2905132ed0
                           .group:00000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.2bf373aedffd8b393ccd11dc057e8547
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.88.0e6ad966134fa012ce9a34053d3f48aa
                           .group:00000000 wm4.interrupt_sam_nvic.h.45.4876da6c127868305d66389e87e0876f
                           .group:00000000 wm4.compiler.h.425.66dd29c210af3287ed85ec3553a3e6b1

NO UNDEFINED SYMBOLS
