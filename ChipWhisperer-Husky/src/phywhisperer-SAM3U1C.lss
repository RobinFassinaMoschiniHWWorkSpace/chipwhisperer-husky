
phywhisperer-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000de8c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008de8c  0008de8c  0001de8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000df0  20000000  0008de94  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000a80  20000df0  0008ec84  00020df0  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020df0  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00020e19  2**0
                  CONTENTS, READONLY
  7 .debug_info   00028e32  00000000  00000000  00020e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000055a8  00000000  00000000  00049c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000989e  00000000  00000000  0004f23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001258  00000000  00000000  00058add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00001048  00000000  00000000  00059d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001b1a1  00000000  00000000  0005ad7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00019a87  00000000  00000000  00075f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005a27b  00000000  00000000  0008f9a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00005e00  00000000  00000000  000e9c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 19 35 08 00 9d 21 08 00 9d 21 08 00     .@. .5...!...!..
   80010:	9d 21 08 00 9d 21 08 00 9d 21 08 00 00 00 00 00     .!...!...!......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 9d 21 08 00     .............!..
   80030:	9d 21 08 00 00 00 00 00 9d 21 08 00 9d 21 08 00     .!.......!...!..
   80040:	9d 21 08 00 9d 21 08 00 9d 21 08 00 9d 21 08 00     .!...!...!...!..
   80050:	9d 21 08 00 9d 21 08 00 9d 21 08 00 9d 21 08 00     .!...!...!...!..
   80060:	9d 21 08 00 9d 21 08 00 95 29 08 00 ad 29 08 00     .!...!...)...)..
   80070:	9d 21 08 00 25 1c 08 00 49 1c 08 00 6d 1c 08 00     .!..%...I...m...
   80080:	9d 21 08 00 9d 21 08 00 9d 21 08 00 9d 21 08 00     .!...!...!...!..
   80090:	9d 21 08 00 9d 21 08 00 9d 21 08 00 9d 21 08 00     .!...!...!...!..
   800a0:	9d 21 08 00 9d 21 08 00 9d 21 08 00 9d 21 08 00     .!...!...!...!..
   800b0:	9d 21 08 00 01 4d 08 00 9d 21 08 00                 .!...M...!..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000df0 	.word	0x20000df0
   800d8:	00000000 	.word	0x00000000
   800dc:	0008de94 	.word	0x0008de94

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000df4 	.word	0x20000df4
   800f8:	0008de94 	.word	0x0008de94

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
   80170:	00082ac5 	.word	0x00082ac5
   80174:	00082b31 	.word	0x00082b31
   80178:	00082ba5 	.word	0x00082ba5
   8017c:	00082bf5 	.word	0x00082bf5

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
   801f8:	00082afd 	.word	0x00082afd
   801fc:	00082b8d 	.word	0x00082b8d
   80200:	00082c41 	.word	0x00082c41

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b06      	ldr	r3, [pc, #24]	; (802a0 <osc_wait_ready+0x2c>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	bf00      	nop
   80298:	3708      	adds	r7, #8
   8029a:	46bd      	mov	sp, r7
   8029c:	bd80      	pop	{r7, pc}
   8029e:	bf00      	nop
   802a0:	00080181 	.word	0x00080181

000802a4 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a4:	b580      	push	{r7, lr}
   802a6:	b086      	sub	sp, #24
   802a8:	af00      	add	r7, sp, #0
   802aa:	60f8      	str	r0, [r7, #12]
   802ac:	607a      	str	r2, [r7, #4]
   802ae:	603b      	str	r3, [r7, #0]
   802b0:	460b      	mov	r3, r1
   802b2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b4:	687b      	ldr	r3, [r7, #4]
   802b6:	2b00      	cmp	r3, #0
   802b8:	d107      	bne.n	802ca <pll_config_init+0x26>
   802ba:	683b      	ldr	r3, [r7, #0]
   802bc:	2b00      	cmp	r3, #0
   802be:	d104      	bne.n	802ca <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802c0:	68fb      	ldr	r3, [r7, #12]
   802c2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c6:	601a      	str	r2, [r3, #0]
   802c8:	e01a      	b.n	80300 <pll_config_init+0x5c>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802ca:	7afb      	ldrb	r3, [r7, #11]
   802cc:	4618      	mov	r0, r3
   802ce:	4b0e      	ldr	r3, [pc, #56]	; (80308 <pll_config_init+0x64>)
   802d0:	4798      	blx	r3
   802d2:	4602      	mov	r2, r0
   802d4:	687b      	ldr	r3, [r7, #4]
   802d6:	fbb2 f3f3 	udiv	r3, r2, r3
   802da:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802dc:	697b      	ldr	r3, [r7, #20]
   802de:	683a      	ldr	r2, [r7, #0]
   802e0:	fb02 f303 	mul.w	r3, r2, r3
   802e4:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e6:	683b      	ldr	r3, [r7, #0]
   802e8:	3b01      	subs	r3, #1
   802ea:	041a      	lsls	r2, r3, #16
   802ec:	4b07      	ldr	r3, [pc, #28]	; (8030c <pll_config_init+0x68>)
   802ee:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f0:	687a      	ldr	r2, [r7, #4]
   802f2:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f4:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802fa:	68fb      	ldr	r3, [r7, #12]
   802fc:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fe:	bf00      	nop
   80300:	bf00      	nop
   80302:	3718      	adds	r7, #24
   80304:	46bd      	mov	sp, r7
   80306:	bd80      	pop	{r7, pc}
   80308:	00080205 	.word	0x00080205
   8030c:	07ff0000 	.word	0x07ff0000

00080310 <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   80310:	b580      	push	{r7, lr}
   80312:	b082      	sub	sp, #8
   80314:	af00      	add	r7, sp, #0
   80316:	6078      	str	r0, [r7, #4]
   80318:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	2b00      	cmp	r3, #0
   8031e:	d108      	bne.n	80332 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <pll_enable+0x38>)
   80322:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80324:	687b      	ldr	r3, [r7, #4]
   80326:	681b      	ldr	r3, [r3, #0]
   80328:	4a08      	ldr	r2, [pc, #32]	; (8034c <pll_enable+0x3c>)
   8032a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80330:	e005      	b.n	8033e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80332:	687b      	ldr	r3, [r7, #4]
   80334:	681b      	ldr	r3, [r3, #0]
   80336:	4a05      	ldr	r2, [pc, #20]	; (8034c <pll_enable+0x3c>)
   80338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8033c:	61d3      	str	r3, [r2, #28]
}
   8033e:	bf00      	nop
   80340:	3708      	adds	r7, #8
   80342:	46bd      	mov	sp, r7
   80344:	bd80      	pop	{r7, pc}
   80346:	bf00      	nop
   80348:	00082cb1 	.word	0x00082cb1
   8034c:	400e0400 	.word	0x400e0400

00080350 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80350:	b580      	push	{r7, lr}
   80352:	b082      	sub	sp, #8
   80354:	af00      	add	r7, sp, #0
   80356:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80358:	687b      	ldr	r3, [r7, #4]
   8035a:	2b00      	cmp	r3, #0
   8035c:	d103      	bne.n	80366 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <pll_is_locked+0x24>)
   80360:	4798      	blx	r3
   80362:	4603      	mov	r3, r0
   80364:	e002      	b.n	8036c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80366:	4b04      	ldr	r3, [pc, #16]	; (80378 <pll_is_locked+0x28>)
   80368:	4798      	blx	r3
   8036a:	4603      	mov	r3, r0
	}
}
   8036c:	4618      	mov	r0, r3
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
   80374:	00082cc9 	.word	0x00082cc9
   80378:	00082cfd 	.word	0x00082cfd

0008037c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	4603      	mov	r3, r0
   80384:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80386:	79fb      	ldrb	r3, [r7, #7]
   80388:	3b03      	subs	r3, #3
   8038a:	2b04      	cmp	r3, #4
   8038c:	d808      	bhi.n	803a0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038e:	79fb      	ldrb	r3, [r7, #7]
   80390:	4618      	mov	r0, r3
   80392:	4b06      	ldr	r3, [pc, #24]	; (803ac <pll_enable_source+0x30>)
   80394:	4798      	blx	r3
		osc_wait_ready(e_src);
   80396:	79fb      	ldrb	r3, [r7, #7]
   80398:	4618      	mov	r0, r3
   8039a:	4b05      	ldr	r3, [pc, #20]	; (803b0 <pll_enable_source+0x34>)
   8039c:	4798      	blx	r3
		break;
   8039e:	e000      	b.n	803a2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803a0:	bf00      	nop
	}
}
   803a2:	bf00      	nop
   803a4:	3708      	adds	r7, #8
   803a6:	46bd      	mov	sp, r7
   803a8:	bd80      	pop	{r7, pc}
   803aa:	bf00      	nop
   803ac:	000800fd 	.word	0x000800fd
   803b0:	00080275 	.word	0x00080275

000803b4 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b4:	b590      	push	{r4, r7, lr}
   803b6:	b085      	sub	sp, #20
   803b8:	af00      	add	r7, sp, #0
   803ba:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803bc:	6878      	ldr	r0, [r7, #4]
   803be:	4b21      	ldr	r3, [pc, #132]	; (80444 <pll_enable_config_defaults+0x90>)
   803c0:	4798      	blx	r3
   803c2:	4603      	mov	r3, r0
   803c4:	2b00      	cmp	r3, #0
   803c6:	d139      	bne.n	8043c <pll_enable_config_defaults+0x88>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c8:	687b      	ldr	r3, [r7, #4]
   803ca:	2b00      	cmp	r3, #0
   803cc:	d003      	beq.n	803d6 <pll_enable_config_defaults+0x22>
   803ce:	687b      	ldr	r3, [r7, #4]
   803d0:	2b01      	cmp	r3, #1
   803d2:	d015      	beq.n	80400 <pll_enable_config_defaults+0x4c>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803d4:	e024      	b.n	80420 <pll_enable_config_defaults+0x6c>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d6:	2006      	movs	r0, #6
   803d8:	4b1b      	ldr	r3, [pc, #108]	; (80448 <pll_enable_config_defaults+0x94>)
   803da:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803dc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803e0:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x98>)
   803e2:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803e4:	bf00      	nop
   803e6:	4b1a      	ldr	r3, [pc, #104]	; (80450 <pll_enable_config_defaults+0x9c>)
   803e8:	4798      	blx	r3
   803ea:	4603      	mov	r3, r0
   803ec:	2b00      	cmp	r3, #0
   803ee:	d0fa      	beq.n	803e6 <pll_enable_config_defaults+0x32>
		pll_config_init(&pllcfg,
   803f0:	f107 000c 	add.w	r0, r7, #12
   803f4:	2310      	movs	r3, #16
   803f6:	2201      	movs	r2, #1
   803f8:	2106      	movs	r1, #6
   803fa:	4c16      	ldr	r4, [pc, #88]	; (80454 <pll_enable_config_defaults+0xa0>)
   803fc:	47a0      	blx	r4
		break;
   803fe:	e00f      	b.n	80420 <pll_enable_config_defaults+0x6c>
		if (pmc_osc_is_bypassed_main_xtal()) {
   80400:	4b15      	ldr	r3, [pc, #84]	; (80458 <pll_enable_config_defaults+0xa4>)
   80402:	4798      	blx	r3
   80404:	4603      	mov	r3, r0
   80406:	2b00      	cmp	r3, #0
   80408:	d102      	bne.n	80410 <pll_enable_config_defaults+0x5c>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   8040a:	2006      	movs	r0, #6
   8040c:	4b0e      	ldr	r3, [pc, #56]	; (80448 <pll_enable_config_defaults+0x94>)
   8040e:	4798      	blx	r3
		pll_config_init(&pllcfg,
   80410:	f107 000c 	add.w	r0, r7, #12
   80414:	2300      	movs	r3, #0
   80416:	2200      	movs	r2, #0
   80418:	2106      	movs	r1, #6
   8041a:	4c0e      	ldr	r4, [pc, #56]	; (80454 <pll_enable_config_defaults+0xa0>)
   8041c:	47a0      	blx	r4
		break;
   8041e:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   80420:	f107 030c 	add.w	r3, r7, #12
   80424:	6879      	ldr	r1, [r7, #4]
   80426:	4618      	mov	r0, r3
   80428:	4b0c      	ldr	r3, [pc, #48]	; (8045c <pll_enable_config_defaults+0xa8>)
   8042a:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   8042c:	bf00      	nop
   8042e:	6878      	ldr	r0, [r7, #4]
   80430:	4b04      	ldr	r3, [pc, #16]	; (80444 <pll_enable_config_defaults+0x90>)
   80432:	4798      	blx	r3
   80434:	4603      	mov	r3, r0
   80436:	2b00      	cmp	r3, #0
   80438:	d0f9      	beq.n	8042e <pll_enable_config_defaults+0x7a>
   8043a:	e000      	b.n	8043e <pll_enable_config_defaults+0x8a>
		return; // Pll already running
   8043c:	bf00      	nop
}
   8043e:	3714      	adds	r7, #20
   80440:	46bd      	mov	sp, r7
   80442:	bd90      	pop	{r4, r7, pc}
   80444:	00080351 	.word	0x00080351
   80448:	0008037d 	.word	0x0008037d
   8044c:	00082c71 	.word	0x00082c71
   80450:	00082c59 	.word	0x00082c59
   80454:	000802a5 	.word	0x000802a5
   80458:	00082c29 	.word	0x00082c29
   8045c:	00080311 	.word	0x00080311

00080460 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   80460:	b580      	push	{r7, lr}
   80462:	b082      	sub	sp, #8
   80464:	af00      	add	r7, sp, #0
   80466:	4603      	mov	r3, r0
   80468:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8046a:	b672      	cpsid	i
}
   8046c:	bf00      	nop
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8046e:	f3bf 8f5f 	dmb	sy
}
   80472:	bf00      	nop
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80474:	4b05      	ldr	r3, [pc, #20]	; (8048c <sleepmgr_sleep+0x2c>)
   80476:	2200      	movs	r2, #0
   80478:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   8047a:	79fb      	ldrb	r3, [r7, #7]
   8047c:	4618      	mov	r0, r3
   8047e:	4b04      	ldr	r3, [pc, #16]	; (80490 <sleepmgr_sleep+0x30>)
   80480:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   80482:	bf00      	nop
   80484:	3708      	adds	r7, #8
   80486:	46bd      	mov	sp, r7
   80488:	bd80      	pop	{r7, pc}
   8048a:	bf00      	nop
   8048c:	20000284 	.word	0x20000284
   80490:	00082ead 	.word	0x00082ead

00080494 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80494:	b480      	push	{r7}
   80496:	b083      	sub	sp, #12
   80498:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   8049a:	2300      	movs	r3, #0
   8049c:	71fb      	strb	r3, [r7, #7]
   8049e:	e006      	b.n	804ae <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   804a0:	79fb      	ldrb	r3, [r7, #7]
   804a2:	4a08      	ldr	r2, [pc, #32]	; (804c4 <sleepmgr_init+0x30>)
   804a4:	2100      	movs	r1, #0
   804a6:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   804a8:	79fb      	ldrb	r3, [r7, #7]
   804aa:	3301      	adds	r3, #1
   804ac:	71fb      	strb	r3, [r7, #7]
   804ae:	79fb      	ldrb	r3, [r7, #7]
   804b0:	2b04      	cmp	r3, #4
   804b2:	d9f5      	bls.n	804a0 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   804b4:	4b03      	ldr	r3, [pc, #12]	; (804c4 <sleepmgr_init+0x30>)
   804b6:	2201      	movs	r2, #1
   804b8:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   804ba:	bf00      	nop
   804bc:	370c      	adds	r7, #12
   804be:	46bd      	mov	sp, r7
   804c0:	bc80      	pop	{r7}
   804c2:	4770      	bx	lr
   804c4:	20001820 	.word	0x20001820

000804c8 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   804c8:	b480      	push	{r7}
   804ca:	b083      	sub	sp, #12
   804cc:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   804ce:	2300      	movs	r3, #0
   804d0:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   804d2:	4b09      	ldr	r3, [pc, #36]	; (804f8 <sleepmgr_get_sleep_mode+0x30>)
   804d4:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   804d6:	e005      	b.n	804e4 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   804d8:	683b      	ldr	r3, [r7, #0]
   804da:	3301      	adds	r3, #1
   804dc:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   804de:	79fb      	ldrb	r3, [r7, #7]
   804e0:	3301      	adds	r3, #1
   804e2:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   804e4:	683b      	ldr	r3, [r7, #0]
   804e6:	781b      	ldrb	r3, [r3, #0]
   804e8:	2b00      	cmp	r3, #0
   804ea:	d0f5      	beq.n	804d8 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   804ec:	79fb      	ldrb	r3, [r7, #7]
}
   804ee:	4618      	mov	r0, r3
   804f0:	370c      	adds	r7, #12
   804f2:	46bd      	mov	sp, r7
   804f4:	bc80      	pop	{r7}
   804f6:	4770      	bx	lr
   804f8:	20001820 	.word	0x20001820

000804fc <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   804fc:	b580      	push	{r7, lr}
   804fe:	b082      	sub	sp, #8
   80500:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;

	//cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   80502:	4b0b      	ldr	r3, [pc, #44]	; (80530 <sleepmgr_enter_sleep+0x34>)
   80504:	4798      	blx	r3
   80506:	4603      	mov	r3, r0
   80508:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   8050a:	79fb      	ldrb	r3, [r7, #7]
   8050c:	2b00      	cmp	r3, #0
   8050e:	d108      	bne.n	80522 <sleepmgr_enter_sleep+0x26>
		cpu_irq_enable();
   80510:	4b08      	ldr	r3, [pc, #32]	; (80534 <sleepmgr_enter_sleep+0x38>)
   80512:	2201      	movs	r2, #1
   80514:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   80516:	f3bf 8f5f 	dmb	sy
}
   8051a:	bf00      	nop
  __ASM volatile ("cpsie i");
   8051c:	b662      	cpsie	i
}
   8051e:	bf00      	nop
		return;
   80520:	e003      	b.n	8052a <sleepmgr_enter_sleep+0x2e>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   80522:	79fb      	ldrb	r3, [r7, #7]
   80524:	4618      	mov	r0, r3
   80526:	4b04      	ldr	r3, [pc, #16]	; (80538 <sleepmgr_enter_sleep+0x3c>)
   80528:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   8052a:	3708      	adds	r7, #8
   8052c:	46bd      	mov	sp, r7
   8052e:	bd80      	pop	{r7, pc}
   80530:	000804c9 	.word	0x000804c9
   80534:	20000284 	.word	0x20000284
   80538:	00080461 	.word	0x00080461

0008053c <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   8053c:	b480      	push	{r7}
   8053e:	b083      	sub	sp, #12
   80540:	af00      	add	r7, sp, #0
   80542:	6078      	str	r0, [r7, #4]
   80544:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   80546:	687b      	ldr	r3, [r7, #4]
   80548:	2200      	movs	r2, #0
   8054a:	601a      	str	r2, [r3, #0]
}
   8054c:	bf00      	nop
   8054e:	370c      	adds	r7, #12
   80550:	46bd      	mov	sp, r7
   80552:	bc80      	pop	{r7}
   80554:	4770      	bx	lr
   80556:	0000      	movs	r0, r0

00080558 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80558:	b480      	push	{r7}
   8055a:	b083      	sub	sp, #12
   8055c:	af00      	add	r7, sp, #0
   8055e:	6078      	str	r0, [r7, #4]
   80560:	460b      	mov	r3, r1
   80562:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   80564:	687b      	ldr	r3, [r7, #4]
   80566:	681b      	ldr	r3, [r3, #0]
   80568:	f023 0207 	bic.w	r2, r3, #7
   8056c:	687b      	ldr	r3, [r7, #4]
   8056e:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   80570:	78fb      	ldrb	r3, [r7, #3]
   80572:	2b0a      	cmp	r3, #10
   80574:	d839      	bhi.n	805ea <genclk_config_set_source+0x92>
   80576:	a201      	add	r2, pc, #4	; (adr r2, 8057c <genclk_config_set_source+0x24>)
   80578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8057c:	000805a9 	.word	0x000805a9
   80580:	000805a9 	.word	0x000805a9
   80584:	000805a9 	.word	0x000805a9
   80588:	000805b3 	.word	0x000805b3
   8058c:	000805b3 	.word	0x000805b3
   80590:	000805b3 	.word	0x000805b3
   80594:	000805b3 	.word	0x000805b3
   80598:	000805b3 	.word	0x000805b3
   8059c:	000805c1 	.word	0x000805c1
   805a0:	000805cf 	.word	0x000805cf
   805a4:	000805dd 	.word	0x000805dd
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   805a8:	687b      	ldr	r3, [r7, #4]
   805aa:	681a      	ldr	r2, [r3, #0]
   805ac:	687b      	ldr	r3, [r7, #4]
   805ae:	601a      	str	r2, [r3, #0]
		break;
   805b0:	e01b      	b.n	805ea <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   805b2:	687b      	ldr	r3, [r7, #4]
   805b4:	681b      	ldr	r3, [r3, #0]
   805b6:	f043 0201 	orr.w	r2, r3, #1
   805ba:	687b      	ldr	r3, [r7, #4]
   805bc:	601a      	str	r2, [r3, #0]
		break;
   805be:	e014      	b.n	805ea <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   805c0:	687b      	ldr	r3, [r7, #4]
   805c2:	681b      	ldr	r3, [r3, #0]
   805c4:	f043 0202 	orr.w	r2, r3, #2
   805c8:	687b      	ldr	r3, [r7, #4]
   805ca:	601a      	str	r2, [r3, #0]
		break;
   805cc:	e00d      	b.n	805ea <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   805ce:	687b      	ldr	r3, [r7, #4]
   805d0:	681b      	ldr	r3, [r3, #0]
   805d2:	f043 0203 	orr.w	r2, r3, #3
   805d6:	687b      	ldr	r3, [r7, #4]
   805d8:	601a      	str	r2, [r3, #0]
		break;
   805da:	e006      	b.n	805ea <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   805dc:	687b      	ldr	r3, [r7, #4]
   805de:	681b      	ldr	r3, [r3, #0]
   805e0:	f043 0204 	orr.w	r2, r3, #4
   805e4:	687b      	ldr	r3, [r7, #4]
   805e6:	601a      	str	r2, [r3, #0]
		break;
   805e8:	bf00      	nop
	}
}
   805ea:	bf00      	nop
   805ec:	370c      	adds	r7, #12
   805ee:	46bd      	mov	sp, r7
   805f0:	bc80      	pop	{r7}
   805f2:	4770      	bx	lr

000805f4 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   805f4:	b480      	push	{r7}
   805f6:	b083      	sub	sp, #12
   805f8:	af00      	add	r7, sp, #0
   805fa:	6078      	str	r0, [r7, #4]
   805fc:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   805fe:	687b      	ldr	r3, [r7, #4]
   80600:	681b      	ldr	r3, [r3, #0]
   80602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   80606:	687b      	ldr	r3, [r7, #4]
   80608:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   8060a:	687b      	ldr	r3, [r7, #4]
   8060c:	681a      	ldr	r2, [r3, #0]
   8060e:	683b      	ldr	r3, [r7, #0]
   80610:	431a      	orrs	r2, r3
   80612:	687b      	ldr	r3, [r7, #4]
   80614:	601a      	str	r2, [r3, #0]
}
   80616:	bf00      	nop
   80618:	370c      	adds	r7, #12
   8061a:	46bd      	mov	sp, r7
   8061c:	bc80      	pop	{r7}
   8061e:	4770      	bx	lr

00080620 <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80620:	b580      	push	{r7, lr}
   80622:	b082      	sub	sp, #8
   80624:	af00      	add	r7, sp, #0
   80626:	6078      	str	r0, [r7, #4]
   80628:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   8062a:	4907      	ldr	r1, [pc, #28]	; (80648 <genclk_enable+0x28>)
   8062c:	687b      	ldr	r3, [r7, #4]
   8062e:	681a      	ldr	r2, [r3, #0]
   80630:	683b      	ldr	r3, [r7, #0]
   80632:	3310      	adds	r3, #16
   80634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80638:	6838      	ldr	r0, [r7, #0]
   8063a:	4b04      	ldr	r3, [pc, #16]	; (8064c <genclk_enable+0x2c>)
   8063c:	4798      	blx	r3
}
   8063e:	bf00      	nop
   80640:	3708      	adds	r7, #8
   80642:	46bd      	mov	sp, r7
   80644:	bd80      	pop	{r7, pc}
   80646:	bf00      	nop
   80648:	400e0400 	.word	0x400e0400
   8064c:	00082dad 	.word	0x00082dad

00080650 <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   80650:	b580      	push	{r7, lr}
   80652:	b082      	sub	sp, #8
   80654:	af00      	add	r7, sp, #0
   80656:	4603      	mov	r3, r0
   80658:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8065a:	79fb      	ldrb	r3, [r7, #7]
   8065c:	2b0a      	cmp	r3, #10
   8065e:	f200 80a2 	bhi.w	807a6 <genclk_enable_source+0x156>
   80662:	a201      	add	r2, pc, #4	; (adr r2, 80668 <genclk_enable_source+0x18>)
   80664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80668:	00080695 	.word	0x00080695
   8066c:	000806b7 	.word	0x000806b7
   80670:	000806d7 	.word	0x000806d7
   80674:	000806f7 	.word	0x000806f7
   80678:	00080717 	.word	0x00080717
   8067c:	00080737 	.word	0x00080737
   80680:	00080757 	.word	0x00080757
   80684:	00080777 	.word	0x00080777
   80688:	00080797 	.word	0x00080797
   8068c:	0008079f 	.word	0x0008079f
   80690:	000807a7 	.word	0x000807a7
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   80694:	2000      	movs	r0, #0
   80696:	4b4e      	ldr	r3, [pc, #312]	; (807d0 <genclk_enable_source+0x180>)
   80698:	4798      	blx	r3
   8069a:	4603      	mov	r3, r0
   8069c:	f083 0301 	eor.w	r3, r3, #1
   806a0:	b2db      	uxtb	r3, r3
   806a2:	2b00      	cmp	r3, #0
   806a4:	f000 8081 	beq.w	807aa <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   806a8:	2000      	movs	r0, #0
   806aa:	4b4a      	ldr	r3, [pc, #296]	; (807d4 <genclk_enable_source+0x184>)
   806ac:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   806ae:	2000      	movs	r0, #0
   806b0:	4b49      	ldr	r3, [pc, #292]	; (807d8 <genclk_enable_source+0x188>)
   806b2:	4798      	blx	r3
		}
		break;
   806b4:	e079      	b.n	807aa <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   806b6:	2001      	movs	r0, #1
   806b8:	4b45      	ldr	r3, [pc, #276]	; (807d0 <genclk_enable_source+0x180>)
   806ba:	4798      	blx	r3
   806bc:	4603      	mov	r3, r0
   806be:	f083 0301 	eor.w	r3, r3, #1
   806c2:	b2db      	uxtb	r3, r3
   806c4:	2b00      	cmp	r3, #0
   806c6:	d072      	beq.n	807ae <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   806c8:	2001      	movs	r0, #1
   806ca:	4b42      	ldr	r3, [pc, #264]	; (807d4 <genclk_enable_source+0x184>)
   806cc:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   806ce:	2001      	movs	r0, #1
   806d0:	4b41      	ldr	r3, [pc, #260]	; (807d8 <genclk_enable_source+0x188>)
   806d2:	4798      	blx	r3
		}
		break;
   806d4:	e06b      	b.n	807ae <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   806d6:	2002      	movs	r0, #2
   806d8:	4b3d      	ldr	r3, [pc, #244]	; (807d0 <genclk_enable_source+0x180>)
   806da:	4798      	blx	r3
   806dc:	4603      	mov	r3, r0
   806de:	f083 0301 	eor.w	r3, r3, #1
   806e2:	b2db      	uxtb	r3, r3
   806e4:	2b00      	cmp	r3, #0
   806e6:	d064      	beq.n	807b2 <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   806e8:	2002      	movs	r0, #2
   806ea:	4b3a      	ldr	r3, [pc, #232]	; (807d4 <genclk_enable_source+0x184>)
   806ec:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   806ee:	2002      	movs	r0, #2
   806f0:	4b39      	ldr	r3, [pc, #228]	; (807d8 <genclk_enable_source+0x188>)
   806f2:	4798      	blx	r3
		}
		break;
   806f4:	e05d      	b.n	807b2 <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   806f6:	2003      	movs	r0, #3
   806f8:	4b35      	ldr	r3, [pc, #212]	; (807d0 <genclk_enable_source+0x180>)
   806fa:	4798      	blx	r3
   806fc:	4603      	mov	r3, r0
   806fe:	f083 0301 	eor.w	r3, r3, #1
   80702:	b2db      	uxtb	r3, r3
   80704:	2b00      	cmp	r3, #0
   80706:	d056      	beq.n	807b6 <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   80708:	2003      	movs	r0, #3
   8070a:	4b32      	ldr	r3, [pc, #200]	; (807d4 <genclk_enable_source+0x184>)
   8070c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   8070e:	2003      	movs	r0, #3
   80710:	4b31      	ldr	r3, [pc, #196]	; (807d8 <genclk_enable_source+0x188>)
   80712:	4798      	blx	r3
		}
		break;
   80714:	e04f      	b.n	807b6 <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   80716:	2004      	movs	r0, #4
   80718:	4b2d      	ldr	r3, [pc, #180]	; (807d0 <genclk_enable_source+0x180>)
   8071a:	4798      	blx	r3
   8071c:	4603      	mov	r3, r0
   8071e:	f083 0301 	eor.w	r3, r3, #1
   80722:	b2db      	uxtb	r3, r3
   80724:	2b00      	cmp	r3, #0
   80726:	d048      	beq.n	807ba <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   80728:	2004      	movs	r0, #4
   8072a:	4b2a      	ldr	r3, [pc, #168]	; (807d4 <genclk_enable_source+0x184>)
   8072c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   8072e:	2004      	movs	r0, #4
   80730:	4b29      	ldr	r3, [pc, #164]	; (807d8 <genclk_enable_source+0x188>)
   80732:	4798      	blx	r3
		}
		break;
   80734:	e041      	b.n	807ba <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   80736:	2005      	movs	r0, #5
   80738:	4b25      	ldr	r3, [pc, #148]	; (807d0 <genclk_enable_source+0x180>)
   8073a:	4798      	blx	r3
   8073c:	4603      	mov	r3, r0
   8073e:	f083 0301 	eor.w	r3, r3, #1
   80742:	b2db      	uxtb	r3, r3
   80744:	2b00      	cmp	r3, #0
   80746:	d03a      	beq.n	807be <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80748:	2005      	movs	r0, #5
   8074a:	4b22      	ldr	r3, [pc, #136]	; (807d4 <genclk_enable_source+0x184>)
   8074c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   8074e:	2005      	movs	r0, #5
   80750:	4b21      	ldr	r3, [pc, #132]	; (807d8 <genclk_enable_source+0x188>)
   80752:	4798      	blx	r3
		}
		break;
   80754:	e033      	b.n	807be <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   80756:	2006      	movs	r0, #6
   80758:	4b1d      	ldr	r3, [pc, #116]	; (807d0 <genclk_enable_source+0x180>)
   8075a:	4798      	blx	r3
   8075c:	4603      	mov	r3, r0
   8075e:	f083 0301 	eor.w	r3, r3, #1
   80762:	b2db      	uxtb	r3, r3
   80764:	2b00      	cmp	r3, #0
   80766:	d02c      	beq.n	807c2 <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   80768:	2006      	movs	r0, #6
   8076a:	4b1a      	ldr	r3, [pc, #104]	; (807d4 <genclk_enable_source+0x184>)
   8076c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   8076e:	2006      	movs	r0, #6
   80770:	4b19      	ldr	r3, [pc, #100]	; (807d8 <genclk_enable_source+0x188>)
   80772:	4798      	blx	r3
		}
		break;
   80774:	e025      	b.n	807c2 <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   80776:	2007      	movs	r0, #7
   80778:	4b15      	ldr	r3, [pc, #84]	; (807d0 <genclk_enable_source+0x180>)
   8077a:	4798      	blx	r3
   8077c:	4603      	mov	r3, r0
   8077e:	f083 0301 	eor.w	r3, r3, #1
   80782:	b2db      	uxtb	r3, r3
   80784:	2b00      	cmp	r3, #0
   80786:	d01e      	beq.n	807c6 <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   80788:	2007      	movs	r0, #7
   8078a:	4b12      	ldr	r3, [pc, #72]	; (807d4 <genclk_enable_source+0x184>)
   8078c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   8078e:	2007      	movs	r0, #7
   80790:	4b11      	ldr	r3, [pc, #68]	; (807d8 <genclk_enable_source+0x188>)
   80792:	4798      	blx	r3
		}
		break;
   80794:	e017      	b.n	807c6 <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   80796:	2000      	movs	r0, #0
   80798:	4b10      	ldr	r3, [pc, #64]	; (807dc <genclk_enable_source+0x18c>)
   8079a:	4798      	blx	r3
		break;
   8079c:	e014      	b.n	807c8 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   8079e:	2001      	movs	r0, #1
   807a0:	4b0e      	ldr	r3, [pc, #56]	; (807dc <genclk_enable_source+0x18c>)
   807a2:	4798      	blx	r3
		break;
   807a4:	e010      	b.n	807c8 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   807a6:	bf00      	nop
   807a8:	e00e      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807aa:	bf00      	nop
   807ac:	e00c      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807ae:	bf00      	nop
   807b0:	e00a      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807b2:	bf00      	nop
   807b4:	e008      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807b6:	bf00      	nop
   807b8:	e006      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807ba:	bf00      	nop
   807bc:	e004      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807be:	bf00      	nop
   807c0:	e002      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807c2:	bf00      	nop
   807c4:	e000      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807c6:	bf00      	nop
	}
}
   807c8:	bf00      	nop
   807ca:	3708      	adds	r7, #8
   807cc:	46bd      	mov	sp, r7
   807ce:	bd80      	pop	{r7, pc}
   807d0:	00080181 	.word	0x00080181
   807d4:	000800fd 	.word	0x000800fd
   807d8:	00080275 	.word	0x00080275
   807dc:	000803b5 	.word	0x000803b5

000807e0 <phywhisperer_setup_pins>:
//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";


void phywhisperer_setup_pins(void)
{
   807e0:	b580      	push	{r7, lr}
   807e2:	af00      	add	r7, sp, #0
    board_init();
   807e4:	4b3f      	ldr	r3, [pc, #252]	; (808e4 <phywhisperer_setup_pins+0x104>)
   807e6:	4798      	blx	r3

    
    //Configure FPGA to allow programming via USB
    fpga_program_init();
   807e8:	4b3f      	ldr	r3, [pc, #252]	; (808e8 <phywhisperer_setup_pins+0x108>)
   807ea:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   807ec:	2009      	movs	r0, #9
   807ee:	4b3f      	ldr	r3, [pc, #252]	; (808ec <phywhisperer_setup_pins+0x10c>)
   807f0:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   807f2:	493f      	ldr	r1, [pc, #252]	; (808f0 <phywhisperer_setup_pins+0x110>)
   807f4:	2029      	movs	r0, #41	; 0x29
   807f6:	4b3f      	ldr	r3, [pc, #252]	; (808f4 <phywhisperer_setup_pins+0x114>)
   807f8:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   807fa:	493d      	ldr	r1, [pc, #244]	; (808f0 <phywhisperer_setup_pins+0x110>)
   807fc:	202a      	movs	r0, #42	; 0x2a
   807fe:	4b3d      	ldr	r3, [pc, #244]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80800:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   80802:	493b      	ldr	r1, [pc, #236]	; (808f0 <phywhisperer_setup_pins+0x110>)
   80804:	202b      	movs	r0, #43	; 0x2b
   80806:	4b3b      	ldr	r3, [pc, #236]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80808:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   8080a:	4939      	ldr	r1, [pc, #228]	; (808f0 <phywhisperer_setup_pins+0x110>)
   8080c:	202c      	movs	r0, #44	; 0x2c
   8080e:	4b39      	ldr	r3, [pc, #228]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80810:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   80812:	4937      	ldr	r1, [pc, #220]	; (808f0 <phywhisperer_setup_pins+0x110>)
   80814:	202d      	movs	r0, #45	; 0x2d
   80816:	4b37      	ldr	r3, [pc, #220]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80818:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   8081a:	4935      	ldr	r1, [pc, #212]	; (808f0 <phywhisperer_setup_pins+0x110>)
   8081c:	202e      	movs	r0, #46	; 0x2e
   8081e:	4b35      	ldr	r3, [pc, #212]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80820:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80822:	4933      	ldr	r1, [pc, #204]	; (808f0 <phywhisperer_setup_pins+0x110>)
   80824:	202f      	movs	r0, #47	; 0x2f
   80826:	4b33      	ldr	r3, [pc, #204]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80828:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   8082a:	4931      	ldr	r1, [pc, #196]	; (808f0 <phywhisperer_setup_pins+0x110>)
   8082c:	2030      	movs	r0, #48	; 0x30
   8082e:	4b31      	ldr	r3, [pc, #196]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80830:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   80832:	492f      	ldr	r1, [pc, #188]	; (808f0 <phywhisperer_setup_pins+0x110>)
   80834:	2033      	movs	r0, #51	; 0x33
   80836:	4b2f      	ldr	r3, [pc, #188]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80838:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   8083a:	492d      	ldr	r1, [pc, #180]	; (808f0 <phywhisperer_setup_pins+0x110>)
   8083c:	2037      	movs	r0, #55	; 0x37
   8083e:	4b2d      	ldr	r3, [pc, #180]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80840:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80842:	492b      	ldr	r1, [pc, #172]	; (808f0 <phywhisperer_setup_pins+0x110>)
   80844:	2034      	movs	r0, #52	; 0x34
   80846:	4b2b      	ldr	r3, [pc, #172]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80848:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   8084a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   8084e:	f240 11bf 	movw	r1, #447	; 0x1bf
   80852:	4829      	ldr	r0, [pc, #164]	; (808f8 <phywhisperer_setup_pins+0x118>)
   80854:	4b29      	ldr	r3, [pc, #164]	; (808fc <phywhisperer_setup_pins+0x11c>)
   80856:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   80858:	f240 11bf 	movw	r1, #447	; 0x1bf
   8085c:	4826      	ldr	r0, [pc, #152]	; (808f8 <phywhisperer_setup_pins+0x118>)
   8085e:	4b28      	ldr	r3, [pc, #160]	; (80900 <phywhisperer_setup_pins+0x120>)
   80860:	4798      	blx	r3

    gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
   80862:	4928      	ldr	r1, [pc, #160]	; (80904 <phywhisperer_setup_pins+0x124>)
   80864:	2027      	movs	r0, #39	; 0x27
   80866:	4b23      	ldr	r3, [pc, #140]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80868:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
   8086a:	4926      	ldr	r1, [pc, #152]	; (80904 <phywhisperer_setup_pins+0x124>)
   8086c:	2028      	movs	r0, #40	; 0x28
   8086e:	4b21      	ldr	r3, [pc, #132]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80870:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
   80872:	4924      	ldr	r1, [pc, #144]	; (80904 <phywhisperer_setup_pins+0x124>)
   80874:	2020      	movs	r0, #32
   80876:	4b1f      	ldr	r3, [pc, #124]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80878:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
   8087a:	4922      	ldr	r1, [pc, #136]	; (80904 <phywhisperer_setup_pins+0x124>)
   8087c:	2021      	movs	r0, #33	; 0x21
   8087e:	4b1d      	ldr	r3, [pc, #116]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80880:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
   80882:	4920      	ldr	r1, [pc, #128]	; (80904 <phywhisperer_setup_pins+0x124>)
   80884:	2022      	movs	r0, #34	; 0x22
   80886:	4b1b      	ldr	r3, [pc, #108]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80888:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
   8088a:	491e      	ldr	r1, [pc, #120]	; (80904 <phywhisperer_setup_pins+0x124>)
   8088c:	2023      	movs	r0, #35	; 0x23
   8088e:	4b19      	ldr	r3, [pc, #100]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80890:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
   80892:	491c      	ldr	r1, [pc, #112]	; (80904 <phywhisperer_setup_pins+0x124>)
   80894:	2024      	movs	r0, #36	; 0x24
   80896:	4b17      	ldr	r3, [pc, #92]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80898:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
   8089a:	491a      	ldr	r1, [pc, #104]	; (80904 <phywhisperer_setup_pins+0x124>)
   8089c:	2025      	movs	r0, #37	; 0x25
   8089e:	4b15      	ldr	r3, [pc, #84]	; (808f4 <phywhisperer_setup_pins+0x114>)
   808a0:	4798      	blx	r3

    gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
   808a2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   808a6:	2026      	movs	r0, #38	; 0x26
   808a8:	4b12      	ldr	r3, [pc, #72]	; (808f4 <phywhisperer_setup_pins+0x114>)
   808aa:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   808ac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808b0:	2031      	movs	r0, #49	; 0x31
   808b2:	4b10      	ldr	r3, [pc, #64]	; (808f4 <phywhisperer_setup_pins+0x114>)
   808b4:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   808b6:	2200      	movs	r2, #0
   808b8:	2100      	movs	r1, #0
   808ba:	4813      	ldr	r0, [pc, #76]	; (80908 <phywhisperer_setup_pins+0x128>)
   808bc:	4b13      	ldr	r3, [pc, #76]	; (8090c <phywhisperer_setup_pins+0x12c>)
   808be:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(0)
                         | SMC_SETUP_NRD_SETUP(0)
                         | SMC_SETUP_NCS_RD_SETUP(0));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(0)
   808c0:	2200      	movs	r2, #0
   808c2:	2100      	movs	r1, #0
   808c4:	4810      	ldr	r0, [pc, #64]	; (80908 <phywhisperer_setup_pins+0x128>)
   808c6:	4b12      	ldr	r3, [pc, #72]	; (80910 <phywhisperer_setup_pins+0x130>)
   808c8:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(0)
                         | SMC_PULSE_NRD_PULSE(0)
                         | SMC_PULSE_NCS_RD_PULSE(0));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(1)
   808ca:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   808ce:	2100      	movs	r1, #0
   808d0:	480d      	ldr	r0, [pc, #52]	; (80908 <phywhisperer_setup_pins+0x128>)
   808d2:	4b10      	ldr	r3, [pc, #64]	; (80914 <phywhisperer_setup_pins+0x134>)
   808d4:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(1));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   808d6:	2203      	movs	r2, #3
   808d8:	2100      	movs	r1, #0
   808da:	480b      	ldr	r0, [pc, #44]	; (80908 <phywhisperer_setup_pins+0x128>)
   808dc:	4b0e      	ldr	r3, [pc, #56]	; (80918 <phywhisperer_setup_pins+0x138>)
   808de:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   808e0:	bf00      	nop
   808e2:	bd80      	pop	{r7, pc}
   808e4:	00082299 	.word	0x00082299
   808e8:	00081439 	.word	0x00081439
   808ec:	00082d15 	.word	0x00082d15
   808f0:	08000001 	.word	0x08000001
   808f4:	000826b1 	.word	0x000826b1
   808f8:	400e0e00 	.word	0x400e0e00
   808fc:	000827e1 	.word	0x000827e1
   80900:	000825bd 	.word	0x000825bd
   80904:	10000001 	.word	0x10000001
   80908:	400e0000 	.word	0x400e0000
   8090c:	00083305 	.word	0x00083305
   80910:	0008332f 	.word	0x0008332f
   80914:	00083359 	.word	0x00083359
   80918:	00083383 	.word	0x00083383

0008091c <genclk_enable_config>:
{
    for (volatile uint32_t i = 0; i < 250000; i++);
}

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   8091c:	b580      	push	{r7, lr}
   8091e:	b086      	sub	sp, #24
   80920:	af00      	add	r7, sp, #0
   80922:	60f8      	str	r0, [r7, #12]
   80924:	460b      	mov	r3, r1
   80926:	607a      	str	r2, [r7, #4]
   80928:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   8092a:	f107 0314 	add.w	r3, r7, #20
   8092e:	68f9      	ldr	r1, [r7, #12]
   80930:	4618      	mov	r0, r3
   80932:	4b0e      	ldr	r3, [pc, #56]	; (8096c <genclk_enable_config+0x50>)
   80934:	4798      	blx	r3
    genclk_enable_source(src);
   80936:	7afb      	ldrb	r3, [r7, #11]
   80938:	4618      	mov	r0, r3
   8093a:	4b0d      	ldr	r3, [pc, #52]	; (80970 <genclk_enable_config+0x54>)
   8093c:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   8093e:	7afa      	ldrb	r2, [r7, #11]
   80940:	f107 0314 	add.w	r3, r7, #20
   80944:	4611      	mov	r1, r2
   80946:	4618      	mov	r0, r3
   80948:	4b0a      	ldr	r3, [pc, #40]	; (80974 <genclk_enable_config+0x58>)
   8094a:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   8094c:	f107 0314 	add.w	r3, r7, #20
   80950:	6879      	ldr	r1, [r7, #4]
   80952:	4618      	mov	r0, r3
   80954:	4b08      	ldr	r3, [pc, #32]	; (80978 <genclk_enable_config+0x5c>)
   80956:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80958:	f107 0314 	add.w	r3, r7, #20
   8095c:	68f9      	ldr	r1, [r7, #12]
   8095e:	4618      	mov	r0, r3
   80960:	4b06      	ldr	r3, [pc, #24]	; (8097c <genclk_enable_config+0x60>)
   80962:	4798      	blx	r3
}
   80964:	bf00      	nop
   80966:	3718      	adds	r7, #24
   80968:	46bd      	mov	sp, r7
   8096a:	bd80      	pop	{r7, pc}
   8096c:	0008053d 	.word	0x0008053d
   80970:	00080651 	.word	0x00080651
   80974:	00080559 	.word	0x00080559
   80978:	000805f5 	.word	0x000805f5
   8097c:	00080621 	.word	0x00080621

00080980 <main>:


int main(void)
{
   80980:	b580      	push	{r7, lr}
   80982:	b086      	sub	sp, #24
   80984:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80986:	1d3b      	adds	r3, r7, #4
   80988:	2110      	movs	r1, #16
   8098a:	4618      	mov	r0, r3
   8098c:	4b1b      	ldr	r3, [pc, #108]	; (809fc <main+0x7c>)
   8098e:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80990:	4b1b      	ldr	r3, [pc, #108]	; (80a00 <main+0x80>)
   80992:	2201      	movs	r2, #1
   80994:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   80996:	f3bf 8f5f 	dmb	sy
}
   8099a:	bf00      	nop
  __ASM volatile ("cpsie i");
   8099c:	b662      	cpsie	i
}
   8099e:	bf00      	nop

    // Initialize the sleep manager
    sleepmgr_init();
   809a0:	4b18      	ldr	r3, [pc, #96]	; (80a04 <main+0x84>)
   809a2:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   809a4:	4b18      	ldr	r3, [pc, #96]	; (80a08 <main+0x88>)
   809a6:	4798      	blx	r3
    phywhisperer_setup_pins();
   809a8:	4b18      	ldr	r3, [pc, #96]	; (80a0c <main+0x8c>)
   809aa:	4798      	blx	r3
#else
    system_init();
#endif

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   809ac:	2300      	movs	r3, #0
   809ae:	617b      	str	r3, [r7, #20]
   809b0:	e011      	b.n	809d6 <main+0x56>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   809b2:	697b      	ldr	r3, [r7, #20]
   809b4:	00db      	lsls	r3, r3, #3
   809b6:	4a16      	ldr	r2, [pc, #88]	; (80a10 <main+0x90>)
   809b8:	1898      	adds	r0, r3, r2
   809ba:	697b      	ldr	r3, [r7, #20]
   809bc:	009b      	lsls	r3, r3, #2
   809be:	f107 0218 	add.w	r2, r7, #24
   809c2:	4413      	add	r3, r2
   809c4:	f853 3c14 	ldr.w	r3, [r3, #-20]
   809c8:	461a      	mov	r2, r3
   809ca:	4912      	ldr	r1, [pc, #72]	; (80a14 <main+0x94>)
   809cc:	4b12      	ldr	r3, [pc, #72]	; (80a18 <main+0x98>)
   809ce:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   809d0:	697b      	ldr	r3, [r7, #20]
   809d2:	3301      	adds	r3, #1
   809d4:	617b      	str	r3, [r7, #20]
   809d6:	697b      	ldr	r3, [r7, #20]
   809d8:	2b03      	cmp	r3, #3
   809da:	d9ea      	bls.n	809b2 <main+0x32>
	}
	usb_serial_number[32] = 0;
   809dc:	4b0c      	ldr	r3, [pc, #48]	; (80a10 <main+0x90>)
   809de:	2200      	movs	r2, #0
   809e0:	f883 2020 	strb.w	r2, [r3, #32]

    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   809e4:	2200      	movs	r2, #0
   809e6:	210a      	movs	r1, #10
   809e8:	2001      	movs	r0, #1
   809ea:	4b0c      	ldr	r3, [pc, #48]	; (80a1c <main+0x9c>)
   809ec:	4798      	blx	r3
    udc_start();
   809ee:	4b0c      	ldr	r3, [pc, #48]	; (80a20 <main+0xa0>)
   809f0:	4798      	blx	r3

    ui_init();
   809f2:	4b0c      	ldr	r3, [pc, #48]	; (80a24 <main+0xa4>)
   809f4:	4798      	blx	r3
    while(1) {
        sleepmgr_enter_sleep();
   809f6:	4b0c      	ldr	r3, [pc, #48]	; (80a28 <main+0xa8>)
   809f8:	4798      	blx	r3
   809fa:	e7fc      	b.n	809f6 <main+0x76>
   809fc:	000821a5 	.word	0x000821a5
   80a00:	20000284 	.word	0x20000284
   80a04:	00080495 	.word	0x00080495
   80a08:	00083a01 	.word	0x00083a01
   80a0c:	000807e1 	.word	0x000807e1
   80a10:	2000025c 	.word	0x2000025c
   80a14:	0008d9a0 	.word	0x0008d9a0
   80a18:	000871ed 	.word	0x000871ed
   80a1c:	0008091d 	.word	0x0008091d
   80a20:	00083e8d 	.word	0x00083e8d
   80a24:	000867a5 	.word	0x000867a5
   80a28:	000804fd 	.word	0x000804fd

00080a2c <osc_enable>:
{
   80a2c:	b580      	push	{r7, lr}
   80a2e:	b082      	sub	sp, #8
   80a30:	af00      	add	r7, sp, #0
   80a32:	6078      	str	r0, [r7, #4]
   80a34:	687b      	ldr	r3, [r7, #4]
   80a36:	2b07      	cmp	r3, #7
   80a38:	d82e      	bhi.n	80a98 <osc_enable+0x6c>
   80a3a:	a201      	add	r2, pc, #4	; (adr r2, 80a40 <osc_enable+0x14>)
   80a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a40:	00080a97 	.word	0x00080a97
   80a44:	00080a61 	.word	0x00080a61
   80a48:	00080a69 	.word	0x00080a69
   80a4c:	00080a71 	.word	0x00080a71
   80a50:	00080a79 	.word	0x00080a79
   80a54:	00080a81 	.word	0x00080a81
   80a58:	00080a89 	.word	0x00080a89
   80a5c:	00080a91 	.word	0x00080a91
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80a60:	2000      	movs	r0, #0
   80a62:	4b0f      	ldr	r3, [pc, #60]	; (80aa0 <osc_enable+0x74>)
   80a64:	4798      	blx	r3
		break;
   80a66:	e017      	b.n	80a98 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80a68:	2001      	movs	r0, #1
   80a6a:	4b0d      	ldr	r3, [pc, #52]	; (80aa0 <osc_enable+0x74>)
   80a6c:	4798      	blx	r3
		break;
   80a6e:	e013      	b.n	80a98 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80a70:	2000      	movs	r0, #0
   80a72:	4b0c      	ldr	r3, [pc, #48]	; (80aa4 <osc_enable+0x78>)
   80a74:	4798      	blx	r3
		break;
   80a76:	e00f      	b.n	80a98 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80a78:	2010      	movs	r0, #16
   80a7a:	4b0a      	ldr	r3, [pc, #40]	; (80aa4 <osc_enable+0x78>)
   80a7c:	4798      	blx	r3
		break;
   80a7e:	e00b      	b.n	80a98 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80a80:	2020      	movs	r0, #32
   80a82:	4b08      	ldr	r3, [pc, #32]	; (80aa4 <osc_enable+0x78>)
   80a84:	4798      	blx	r3
		break;
   80a86:	e007      	b.n	80a98 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80a88:	203e      	movs	r0, #62	; 0x3e
   80a8a:	4b07      	ldr	r3, [pc, #28]	; (80aa8 <osc_enable+0x7c>)
   80a8c:	4798      	blx	r3
		break;
   80a8e:	e003      	b.n	80a98 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80a90:	4b06      	ldr	r3, [pc, #24]	; (80aac <osc_enable+0x80>)
   80a92:	4798      	blx	r3
		break;
   80a94:	e000      	b.n	80a98 <osc_enable+0x6c>
		break;
   80a96:	bf00      	nop
}
   80a98:	bf00      	nop
   80a9a:	3708      	adds	r7, #8
   80a9c:	46bd      	mov	sp, r7
   80a9e:	bd80      	pop	{r7, pc}
   80aa0:	00082ac5 	.word	0x00082ac5
   80aa4:	00082b31 	.word	0x00082b31
   80aa8:	00082ba5 	.word	0x00082ba5
   80aac:	00082bf5 	.word	0x00082bf5

00080ab0 <osc_is_ready>:
{
   80ab0:	b580      	push	{r7, lr}
   80ab2:	b082      	sub	sp, #8
   80ab4:	af00      	add	r7, sp, #0
   80ab6:	6078      	str	r0, [r7, #4]
   80ab8:	687b      	ldr	r3, [r7, #4]
   80aba:	2b07      	cmp	r3, #7
   80abc:	d82f      	bhi.n	80b1e <osc_is_ready+0x6e>
   80abe:	a201      	add	r2, pc, #4	; (adr r2, 80ac4 <osc_is_ready+0x14>)
   80ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80ac4:	00080ae5 	.word	0x00080ae5
   80ac8:	00080ae9 	.word	0x00080ae9
   80acc:	00080ae9 	.word	0x00080ae9
   80ad0:	00080afb 	.word	0x00080afb
   80ad4:	00080afb 	.word	0x00080afb
   80ad8:	00080afb 	.word	0x00080afb
   80adc:	00080b0d 	.word	0x00080b0d
   80ae0:	00080b0d 	.word	0x00080b0d
		return 1;
   80ae4:	2301      	movs	r3, #1
   80ae6:	e01b      	b.n	80b20 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80ae8:	4b0f      	ldr	r3, [pc, #60]	; (80b28 <osc_is_ready+0x78>)
   80aea:	4798      	blx	r3
   80aec:	4603      	mov	r3, r0
   80aee:	2b00      	cmp	r3, #0
   80af0:	bf14      	ite	ne
   80af2:	2301      	movne	r3, #1
   80af4:	2300      	moveq	r3, #0
   80af6:	b2db      	uxtb	r3, r3
   80af8:	e012      	b.n	80b20 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80afa:	4b0c      	ldr	r3, [pc, #48]	; (80b2c <osc_is_ready+0x7c>)
   80afc:	4798      	blx	r3
   80afe:	4603      	mov	r3, r0
   80b00:	2b00      	cmp	r3, #0
   80b02:	bf14      	ite	ne
   80b04:	2301      	movne	r3, #1
   80b06:	2300      	moveq	r3, #0
   80b08:	b2db      	uxtb	r3, r3
   80b0a:	e009      	b.n	80b20 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80b0c:	4b08      	ldr	r3, [pc, #32]	; (80b30 <osc_is_ready+0x80>)
   80b0e:	4798      	blx	r3
   80b10:	4603      	mov	r3, r0
   80b12:	2b00      	cmp	r3, #0
   80b14:	bf14      	ite	ne
   80b16:	2301      	movne	r3, #1
   80b18:	2300      	moveq	r3, #0
   80b1a:	b2db      	uxtb	r3, r3
   80b1c:	e000      	b.n	80b20 <osc_is_ready+0x70>
	return 0;
   80b1e:	2300      	movs	r3, #0
}
   80b20:	4618      	mov	r0, r3
   80b22:	3708      	adds	r7, #8
   80b24:	46bd      	mov	sp, r7
   80b26:	bd80      	pop	{r7, pc}
   80b28:	00082afd 	.word	0x00082afd
   80b2c:	00082b8d 	.word	0x00082b8d
   80b30:	00082c41 	.word	0x00082c41

00080b34 <osc_wait_ready>:
{
   80b34:	b580      	push	{r7, lr}
   80b36:	b082      	sub	sp, #8
   80b38:	af00      	add	r7, sp, #0
   80b3a:	4603      	mov	r3, r0
   80b3c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80b3e:	bf00      	nop
   80b40:	79fb      	ldrb	r3, [r7, #7]
   80b42:	4618      	mov	r0, r3
   80b44:	4b06      	ldr	r3, [pc, #24]	; (80b60 <osc_wait_ready+0x2c>)
   80b46:	4798      	blx	r3
   80b48:	4603      	mov	r3, r0
   80b4a:	f083 0301 	eor.w	r3, r3, #1
   80b4e:	b2db      	uxtb	r3, r3
   80b50:	2b00      	cmp	r3, #0
   80b52:	d1f5      	bne.n	80b40 <osc_wait_ready+0xc>
}
   80b54:	bf00      	nop
   80b56:	bf00      	nop
   80b58:	3708      	adds	r7, #8
   80b5a:	46bd      	mov	sp, r7
   80b5c:	bd80      	pop	{r7, pc}
   80b5e:	bf00      	nop
   80b60:	00080ab1 	.word	0x00080ab1

00080b64 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   80b64:	b580      	push	{r7, lr}
   80b66:	af00      	add	r7, sp, #0
	udd_detach();
   80b68:	4b01      	ldr	r3, [pc, #4]	; (80b70 <udc_detach+0xc>)
   80b6a:	4798      	blx	r3
}
   80b6c:	bf00      	nop
   80b6e:	bd80      	pop	{r7, pc}
   80b70:	00085019 	.word	0x00085019

00080b74 <main_suspend_action>:
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80b74:	b580      	push	{r7, lr}
   80b76:	af00      	add	r7, sp, #0
	active = false;
   80b78:	4b03      	ldr	r3, [pc, #12]	; (80b88 <main_suspend_action+0x14>)
   80b7a:	2200      	movs	r2, #0
   80b7c:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   80b7e:	4b03      	ldr	r3, [pc, #12]	; (80b8c <main_suspend_action+0x18>)
   80b80:	4798      	blx	r3
}
   80b82:	bf00      	nop
   80b84:	bd80      	pop	{r7, pc}
   80b86:	bf00      	nop
   80b88:	20000e0c 	.word	0x20000e0c
   80b8c:	000867bd 	.word	0x000867bd

00080b90 <main_resume_action>:

void main_resume_action(void)
{
   80b90:	b580      	push	{r7, lr}
   80b92:	af00      	add	r7, sp, #0
    ui_wakeup();
   80b94:	4b01      	ldr	r3, [pc, #4]	; (80b9c <main_resume_action+0xc>)
   80b96:	4798      	blx	r3
}
   80b98:	bf00      	nop
   80b9a:	bd80      	pop	{r7, pc}
   80b9c:	000867d5 	.word	0x000867d5

00080ba0 <main_sof_action>:

void main_sof_action(void)
{
   80ba0:	b580      	push	{r7, lr}
   80ba2:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80ba4:	4b08      	ldr	r3, [pc, #32]	; (80bc8 <main_sof_action+0x28>)
   80ba6:	781b      	ldrb	r3, [r3, #0]
   80ba8:	b2db      	uxtb	r3, r3
   80baa:	f083 0301 	eor.w	r3, r3, #1
   80bae:	b2db      	uxtb	r3, r3
   80bb0:	2b00      	cmp	r3, #0
   80bb2:	d106      	bne.n	80bc2 <main_sof_action+0x22>
        return;
    ui_process(udd_get_frame_number());
   80bb4:	4b05      	ldr	r3, [pc, #20]	; (80bcc <main_sof_action+0x2c>)
   80bb6:	4798      	blx	r3
   80bb8:	4603      	mov	r3, r0
   80bba:	4618      	mov	r0, r3
   80bbc:	4b04      	ldr	r3, [pc, #16]	; (80bd0 <main_sof_action+0x30>)
   80bbe:	4798      	blx	r3
   80bc0:	e000      	b.n	80bc4 <main_sof_action+0x24>
        return;
   80bc2:	bf00      	nop
}
   80bc4:	bd80      	pop	{r7, pc}
   80bc6:	bf00      	nop
   80bc8:	2000027d 	.word	0x2000027d
   80bcc:	000850e1 	.word	0x000850e1
   80bd0:	000867e9 	.word	0x000867e9

00080bd4 <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80bd4:	b580      	push	{r7, lr}
   80bd6:	af00      	add	r7, sp, #0
    active = true;
   80bd8:	4b07      	ldr	r3, [pc, #28]	; (80bf8 <main_vendor_enable+0x24>)
   80bda:	2201      	movs	r2, #1
   80bdc:	701a      	strb	r2, [r3, #0]
    main_b_vendor_enable = true;
   80bde:	4b07      	ldr	r3, [pc, #28]	; (80bfc <main_vendor_enable+0x28>)
   80be0:	2201      	movs	r2, #1
   80be2:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
    //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80be4:	4a06      	ldr	r2, [pc, #24]	; (80c00 <main_vendor_enable+0x2c>)
   80be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80bea:	4806      	ldr	r0, [pc, #24]	; (80c04 <main_vendor_enable+0x30>)
   80bec:	4b06      	ldr	r3, [pc, #24]	; (80c08 <main_vendor_enable+0x34>)
   80bee:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
#endif
    return true;
   80bf0:	2301      	movs	r3, #1
}
   80bf2:	4618      	mov	r0, r3
   80bf4:	bd80      	pop	{r7, pc}
   80bf6:	bf00      	nop
   80bf8:	20000e0c 	.word	0x20000e0c
   80bfc:	2000027d 	.word	0x2000027d
   80c00:	00081209 	.word	0x00081209
   80c04:	20000e10 	.word	0x20000e10
   80c08:	00084af9 	.word	0x00084af9

00080c0c <main_vendor_disable>:

void main_vendor_disable(void)
{
   80c0c:	b480      	push	{r7}
   80c0e:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80c10:	4b03      	ldr	r3, [pc, #12]	; (80c20 <main_vendor_disable+0x14>)
   80c12:	2200      	movs	r2, #0
   80c14:	701a      	strb	r2, [r3, #0]
}
   80c16:	bf00      	nop
   80c18:	46bd      	mov	sp, r7
   80c1a:	bc80      	pop	{r7}
   80c1c:	4770      	bx	lr
   80c1e:	bf00      	nop
   80c20:	2000027d 	.word	0x2000027d

00080c24 <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   80c24:	b580      	push	{r7, lr}
   80c26:	b082      	sub	sp, #8
   80c28:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80c2a:	4b0f      	ldr	r3, [pc, #60]	; (80c68 <ctrl_readmem_bulk+0x44>)
   80c2c:	681b      	ldr	r3, [r3, #0]
   80c2e:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80c30:	4b0d      	ldr	r3, [pc, #52]	; (80c68 <ctrl_readmem_bulk+0x44>)
   80c32:	685b      	ldr	r3, [r3, #4]
   80c34:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80c36:	4b0d      	ldr	r3, [pc, #52]	; (80c6c <ctrl_readmem_bulk+0x48>)
   80c38:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80c3a:	bf00      	nop
   80c3c:	2002      	movs	r0, #2
   80c3e:	4b0c      	ldr	r3, [pc, #48]	; (80c70 <ctrl_readmem_bulk+0x4c>)
   80c40:	4798      	blx	r3
   80c42:	4603      	mov	r3, r0
   80c44:	2b00      	cmp	r3, #0
   80c46:	d0f9      	beq.n	80c3c <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80c48:	6838      	ldr	r0, [r7, #0]
   80c4a:	4b0a      	ldr	r3, [pc, #40]	; (80c74 <ctrl_readmem_bulk+0x50>)
   80c4c:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80c4e:	4a0a      	ldr	r2, [pc, #40]	; (80c78 <ctrl_readmem_bulk+0x54>)
   80c50:	6879      	ldr	r1, [r7, #4]
   80c52:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80c56:	4b09      	ldr	r3, [pc, #36]	; (80c7c <ctrl_readmem_bulk+0x58>)
   80c58:	4798      	blx	r3
        (uint8_t *) PSRAM_BASE_ADDRESS,
        buflen,
        main_vendor_bulk_in_received
        );
    FPGA_releaselock();
   80c5a:	4b04      	ldr	r3, [pc, #16]	; (80c6c <ctrl_readmem_bulk+0x48>)
   80c5c:	4798      	blx	r3
}
   80c5e:	bf00      	nop
   80c60:	3708      	adds	r7, #8
   80c62:	46bd      	mov	sp, r7
   80c64:	bd80      	pop	{r7, pc}
   80c66:	bf00      	nop
   80c68:	20001210 	.word	0x20001210
   80c6c:	00081309 	.word	0x00081309
   80c70:	000812c9 	.word	0x000812c9
   80c74:	00081339 	.word	0x00081339
   80c78:	000811d1 	.word	0x000811d1
   80c7c:	00084acd 	.word	0x00084acd

00080c80 <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80c80:	b580      	push	{r7, lr}
   80c82:	b082      	sub	sp, #8
   80c84:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80c86:	4b0f      	ldr	r3, [pc, #60]	; (80cc4 <ctrl_readmem_ctrl+0x44>)
   80c88:	681b      	ldr	r3, [r3, #0]
   80c8a:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80c8c:	4b0d      	ldr	r3, [pc, #52]	; (80cc4 <ctrl_readmem_ctrl+0x44>)
   80c8e:	685b      	ldr	r3, [r3, #4]
   80c90:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80c92:	4b0d      	ldr	r3, [pc, #52]	; (80cc8 <ctrl_readmem_ctrl+0x48>)
   80c94:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80c96:	bf00      	nop
   80c98:	2005      	movs	r0, #5
   80c9a:	4b0c      	ldr	r3, [pc, #48]	; (80ccc <ctrl_readmem_ctrl+0x4c>)
   80c9c:	4798      	blx	r3
   80c9e:	4603      	mov	r3, r0
   80ca0:	2b00      	cmp	r3, #0
   80ca2:	d0f9      	beq.n	80c98 <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80ca4:	6838      	ldr	r0, [r7, #0]
   80ca6:	4b0a      	ldr	r3, [pc, #40]	; (80cd0 <ctrl_readmem_ctrl+0x50>)
   80ca8:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80caa:	4b0a      	ldr	r3, [pc, #40]	; (80cd4 <ctrl_readmem_ctrl+0x54>)
   80cac:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80cb0:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80cb2:	4a09      	ldr	r2, [pc, #36]	; (80cd8 <ctrl_readmem_ctrl+0x58>)
   80cb4:	687b      	ldr	r3, [r7, #4]
   80cb6:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    FPGA_releaselock();
   80cb8:	4b03      	ldr	r3, [pc, #12]	; (80cc8 <ctrl_readmem_ctrl+0x48>)
   80cba:	4798      	blx	r3
}
   80cbc:	bf00      	nop
   80cbe:	3708      	adds	r7, #8
   80cc0:	46bd      	mov	sp, r7
   80cc2:	bd80      	pop	{r7, pc}
   80cc4:	20001210 	.word	0x20001210
   80cc8:	00081309 	.word	0x00081309
   80ccc:	000812c9 	.word	0x000812c9
   80cd0:	00081339 	.word	0x00081339
   80cd4:	20001254 	.word	0x20001254
   80cd8:	20001258 	.word	0x20001258

00080cdc <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80cdc:	b580      	push	{r7, lr}
   80cde:	b084      	sub	sp, #16
   80ce0:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80ce2:	4b16      	ldr	r3, [pc, #88]	; (80d3c <ctrl_writemem_ctrl+0x60>)
   80ce4:	681b      	ldr	r3, [r3, #0]
   80ce6:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80ce8:	4b14      	ldr	r3, [pc, #80]	; (80d3c <ctrl_writemem_ctrl+0x60>)
   80cea:	685b      	ldr	r3, [r3, #4]
   80cec:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80cee:	4b14      	ldr	r3, [pc, #80]	; (80d40 <ctrl_writemem_ctrl+0x64>)
   80cf0:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   80cf2:	4b14      	ldr	r3, [pc, #80]	; (80d44 <ctrl_writemem_ctrl+0x68>)
   80cf4:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80cf6:	bf00      	nop
   80cf8:	2001      	movs	r0, #1
   80cfa:	4b13      	ldr	r3, [pc, #76]	; (80d48 <ctrl_writemem_ctrl+0x6c>)
   80cfc:	4798      	blx	r3
   80cfe:	4603      	mov	r3, r0
   80d00:	2b00      	cmp	r3, #0
   80d02:	d0f9      	beq.n	80cf8 <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   80d04:	6878      	ldr	r0, [r7, #4]
   80d06:	4b11      	ldr	r3, [pc, #68]	; (80d4c <ctrl_writemem_ctrl+0x70>)
   80d08:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   80d0a:	2300      	movs	r3, #0
   80d0c:	60fb      	str	r3, [r7, #12]
   80d0e:	e00b      	b.n	80d28 <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   80d10:	683a      	ldr	r2, [r7, #0]
   80d12:	68fb      	ldr	r3, [r7, #12]
   80d14:	441a      	add	r2, r3
   80d16:	4b0e      	ldr	r3, [pc, #56]	; (80d50 <ctrl_writemem_ctrl+0x74>)
   80d18:	6819      	ldr	r1, [r3, #0]
   80d1a:	68fb      	ldr	r3, [r7, #12]
   80d1c:	440b      	add	r3, r1
   80d1e:	7812      	ldrb	r2, [r2, #0]
   80d20:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   80d22:	68fb      	ldr	r3, [r7, #12]
   80d24:	3301      	adds	r3, #1
   80d26:	60fb      	str	r3, [r7, #12]
   80d28:	68fa      	ldr	r2, [r7, #12]
   80d2a:	68bb      	ldr	r3, [r7, #8]
   80d2c:	429a      	cmp	r2, r3
   80d2e:	d3ef      	bcc.n	80d10 <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   80d30:	4b04      	ldr	r3, [pc, #16]	; (80d44 <ctrl_writemem_ctrl+0x68>)
   80d32:	4798      	blx	r3
}
   80d34:	bf00      	nop
   80d36:	3710      	adds	r7, #16
   80d38:	46bd      	mov	sp, r7
   80d3a:	bd80      	pop	{r7, pc}
   80d3c:	20001210 	.word	0x20001210
   80d40:	20001218 	.word	0x20001218
   80d44:	00081309 	.word	0x00081309
   80d48:	000812c9 	.word	0x000812c9
   80d4c:	00081339 	.word	0x00081339
   80d50:	20000280 	.word	0x20000280

00080d54 <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   80d54:	b580      	push	{r7, lr}
   80d56:	b082      	sub	sp, #8
   80d58:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80d5a:	4b0a      	ldr	r3, [pc, #40]	; (80d84 <ctrl_writemem_bulk+0x30>)
   80d5c:	685b      	ldr	r3, [r3, #4]
   80d5e:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   80d60:	4b09      	ldr	r3, [pc, #36]	; (80d88 <ctrl_writemem_bulk+0x34>)
   80d62:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   80d64:	bf00      	nop
   80d66:	2004      	movs	r0, #4
   80d68:	4b08      	ldr	r3, [pc, #32]	; (80d8c <ctrl_writemem_bulk+0x38>)
   80d6a:	4798      	blx	r3
   80d6c:	4603      	mov	r3, r0
   80d6e:	2b00      	cmp	r3, #0
   80d70:	d0f9      	beq.n	80d66 <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   80d72:	6878      	ldr	r0, [r7, #4]
   80d74:	4b06      	ldr	r3, [pc, #24]	; (80d90 <ctrl_writemem_bulk+0x3c>)
   80d76:	4798      	blx	r3

    /* Transaction done in generic callback */
    FPGA_releaselock();
   80d78:	4b03      	ldr	r3, [pc, #12]	; (80d88 <ctrl_writemem_bulk+0x34>)
   80d7a:	4798      	blx	r3
}
   80d7c:	bf00      	nop
   80d7e:	3708      	adds	r7, #8
   80d80:	46bd      	mov	sp, r7
   80d82:	bd80      	pop	{r7, pc}
   80d84:	20001210 	.word	0x20001210
   80d88:	00081309 	.word	0x00081309
   80d8c:	000812c9 	.word	0x000812c9
   80d90:	00081339 	.word	0x00081339

00080d94 <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80d94:	b580      	push	{r7, lr}
   80d96:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80d98:	4b19      	ldr	r3, [pc, #100]	; (80e00 <ctrl_sam3ucfg_cb+0x6c>)
   80d9a:	885b      	ldrh	r3, [r3, #2]
   80d9c:	b2db      	uxtb	r3, r3
   80d9e:	2b03      	cmp	r3, #3
   80da0:	d014      	beq.n	80dcc <ctrl_sam3ucfg_cb+0x38>
   80da2:	2b03      	cmp	r3, #3
   80da4:	dc29      	bgt.n	80dfa <ctrl_sam3ucfg_cb+0x66>
   80da6:	2b01      	cmp	r3, #1
   80da8:	d002      	beq.n	80db0 <ctrl_sam3ucfg_cb+0x1c>
   80daa:	2b02      	cmp	r3, #2
   80dac:	d00a      	beq.n	80dc4 <ctrl_sam3ucfg_cb+0x30>
        /* Make the jump */
        break;

        /* Oh well, sucks to be you */
    default:
        break;
   80dae:	e024      	b.n	80dfa <ctrl_sam3ucfg_cb+0x66>
        osc_enable(OSC_MAINCK_XTAL);
   80db0:	2006      	movs	r0, #6
   80db2:	4b14      	ldr	r3, [pc, #80]	; (80e04 <ctrl_sam3ucfg_cb+0x70>)
   80db4:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   80db6:	2006      	movs	r0, #6
   80db8:	4b13      	ldr	r3, [pc, #76]	; (80e08 <ctrl_sam3ucfg_cb+0x74>)
   80dba:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80dbc:	2010      	movs	r0, #16
   80dbe:	4b13      	ldr	r3, [pc, #76]	; (80e0c <ctrl_sam3ucfg_cb+0x78>)
   80dc0:	4798      	blx	r3
        break;
   80dc2:	e01b      	b.n	80dfc <ctrl_sam3ucfg_cb+0x68>
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80dc4:	2010      	movs	r0, #16
   80dc6:	4b12      	ldr	r3, [pc, #72]	; (80e10 <ctrl_sam3ucfg_cb+0x7c>)
   80dc8:	4798      	blx	r3
        break;
   80dca:	e017      	b.n	80dfc <ctrl_sam3ucfg_cb+0x68>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80dcc:	2201      	movs	r2, #1
   80dce:	210c      	movs	r1, #12
   80dd0:	4810      	ldr	r0, [pc, #64]	; (80e14 <ctrl_sam3ucfg_cb+0x80>)
   80dd2:	4b11      	ldr	r3, [pc, #68]	; (80e18 <ctrl_sam3ucfg_cb+0x84>)
   80dd4:	4798      	blx	r3
        udc_detach();
   80dd6:	4b11      	ldr	r3, [pc, #68]	; (80e1c <ctrl_sam3ucfg_cb+0x88>)
   80dd8:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80dda:	bf00      	nop
   80ddc:	4b10      	ldr	r3, [pc, #64]	; (80e20 <ctrl_sam3ucfg_cb+0x8c>)
   80dde:	685b      	ldr	r3, [r3, #4]
   80de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80de4:	2b00      	cmp	r3, #0
   80de6:	d1f9      	bne.n	80ddc <ctrl_sam3ucfg_cb+0x48>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80de8:	4b0d      	ldr	r3, [pc, #52]	; (80e20 <ctrl_sam3ucfg_cb+0x8c>)
   80dea:	681b      	ldr	r3, [r3, #0]
   80dec:	4a0c      	ldr	r2, [pc, #48]	; (80e20 <ctrl_sam3ucfg_cb+0x8c>)
   80dee:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80df2:	f043 0305 	orr.w	r3, r3, #5
   80df6:	6013      	str	r3, [r2, #0]
        while(1);
   80df8:	e7fe      	b.n	80df8 <ctrl_sam3ucfg_cb+0x64>
        break;
   80dfa:	bf00      	nop
    }
}
   80dfc:	bf00      	nop
   80dfe:	bd80      	pop	{r7, pc}
   80e00:	20001828 	.word	0x20001828
   80e04:	00080a2d 	.word	0x00080a2d
   80e08:	00080b35 	.word	0x00080b35
   80e0c:	000829c5 	.word	0x000829c5
   80e10:	00082a45 	.word	0x00082a45
   80e14:	400e0800 	.word	0x400e0800
   80e18:	0008213d 	.word	0x0008213d
   80e1c:	00080b65 	.word	0x00080b65
   80e20:	400e1200 	.word	0x400e1200

00080e24 <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   80e24:	b580      	push	{r7, lr}
   80e26:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   80e28:	4b0d      	ldr	r3, [pc, #52]	; (80e60 <ctrl_progfpga_bulk+0x3c>)
   80e2a:	885b      	ldrh	r3, [r3, #2]
   80e2c:	2ba2      	cmp	r3, #162	; 0xa2
   80e2e:	d00f      	beq.n	80e50 <ctrl_progfpga_bulk+0x2c>
   80e30:	2ba2      	cmp	r3, #162	; 0xa2
   80e32:	dc11      	bgt.n	80e58 <ctrl_progfpga_bulk+0x34>
   80e34:	2ba0      	cmp	r3, #160	; 0xa0
   80e36:	d002      	beq.n	80e3e <ctrl_progfpga_bulk+0x1a>
   80e38:	2ba1      	cmp	r3, #161	; 0xa1
   80e3a:	d003      	beq.n	80e44 <ctrl_progfpga_bulk+0x20>
        /* Done */
        blockendpoint_usage = bep_emem;
        break;

    default:
        break;
   80e3c:	e00c      	b.n	80e58 <ctrl_progfpga_bulk+0x34>
        fpga_program_setup1();
   80e3e:	4b09      	ldr	r3, [pc, #36]	; (80e64 <ctrl_progfpga_bulk+0x40>)
   80e40:	4798      	blx	r3
        break;
   80e42:	e00a      	b.n	80e5a <ctrl_progfpga_bulk+0x36>
        fpga_program_setup2();
   80e44:	4b08      	ldr	r3, [pc, #32]	; (80e68 <ctrl_progfpga_bulk+0x44>)
   80e46:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   80e48:	4b08      	ldr	r3, [pc, #32]	; (80e6c <ctrl_progfpga_bulk+0x48>)
   80e4a:	220a      	movs	r2, #10
   80e4c:	701a      	strb	r2, [r3, #0]
        break;
   80e4e:	e004      	b.n	80e5a <ctrl_progfpga_bulk+0x36>
        blockendpoint_usage = bep_emem;
   80e50:	4b06      	ldr	r3, [pc, #24]	; (80e6c <ctrl_progfpga_bulk+0x48>)
   80e52:	2200      	movs	r2, #0
   80e54:	701a      	strb	r2, [r3, #0]
        break;
   80e56:	e000      	b.n	80e5a <ctrl_progfpga_bulk+0x36>
        break;
   80e58:	bf00      	nop
    }
}
   80e5a:	bf00      	nop
   80e5c:	bd80      	pop	{r7, pc}
   80e5e:	bf00      	nop
   80e60:	20001828 	.word	0x20001828
   80e64:	00081459 	.word	0x00081459
   80e68:	000814d9 	.word	0x000814d9
   80e6c:	20001250 	.word	0x20001250

00080e70 <ctrl_fpga_reset>:

void ctrl_fpga_reset(void) {
   80e70:	b580      	push	{r7, lr}
   80e72:	af00      	add	r7, sp, #0
  gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   80e74:	2026      	movs	r0, #38	; 0x26
   80e76:	4b03      	ldr	r3, [pc, #12]	; (80e84 <ctrl_fpga_reset+0x14>)
   80e78:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   80e7a:	2026      	movs	r0, #38	; 0x26
   80e7c:	4b02      	ldr	r3, [pc, #8]	; (80e88 <ctrl_fpga_reset+0x18>)
   80e7e:	4798      	blx	r3
}
   80e80:	bf00      	nop
   80e82:	bd80      	pop	{r7, pc}
   80e84:	00082651 	.word	0x00082651
   80e88:	00082681 	.word	0x00082681

00080e8c <ctrl_usart_cb>:

static void ctrl_usart_cb(void)
{
   80e8c:	b580      	push	{r7, lr}
   80e8e:	af00      	add	r7, sp, #0
	ctrl_usart(USART_TARGET, false);
   80e90:	2100      	movs	r1, #0
   80e92:	4802      	ldr	r0, [pc, #8]	; (80e9c <ctrl_usart_cb+0x10>)
   80e94:	4b02      	ldr	r3, [pc, #8]	; (80ea0 <ctrl_usart_cb+0x14>)
   80e96:	4798      	blx	r3
}
   80e98:	bf00      	nop
   80e9a:	bd80      	pop	{r7, pc}
   80e9c:	40090000 	.word	0x40090000
   80ea0:	000816a1 	.word	0x000816a1

00080ea4 <ctrl_usart_cb_data>:

static void ctrl_usart_cb_data(void)
{		
   80ea4:	b580      	push	{r7, lr}
   80ea6:	b082      	sub	sp, #8
   80ea8:	af00      	add	r7, sp, #0
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   80eaa:	4b10      	ldr	r3, [pc, #64]	; (80eec <ctrl_usart_cb_data+0x48>)
   80eac:	88da      	ldrh	r2, [r3, #6]
   80eae:	4b0f      	ldr	r3, [pc, #60]	; (80eec <ctrl_usart_cb_data+0x48>)
   80eb0:	899b      	ldrh	r3, [r3, #12]
   80eb2:	429a      	cmp	r2, r3
   80eb4:	d816      	bhi.n	80ee4 <ctrl_usart_cb_data+0x40>
		return;
	}
	
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   80eb6:	2300      	movs	r3, #0
   80eb8:	607b      	str	r3, [r7, #4]
   80eba:	e00c      	b.n	80ed6 <ctrl_usart_cb_data+0x32>
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   80ebc:	4b0b      	ldr	r3, [pc, #44]	; (80eec <ctrl_usart_cb_data+0x48>)
   80ebe:	689a      	ldr	r2, [r3, #8]
   80ec0:	687b      	ldr	r3, [r7, #4]
   80ec2:	4413      	add	r3, r2
   80ec4:	781b      	ldrb	r3, [r3, #0]
   80ec6:	461a      	mov	r2, r3
   80ec8:	2100      	movs	r1, #0
   80eca:	4809      	ldr	r0, [pc, #36]	; (80ef0 <ctrl_usart_cb_data+0x4c>)
   80ecc:	4b09      	ldr	r3, [pc, #36]	; (80ef4 <ctrl_usart_cb_data+0x50>)
   80ece:	4798      	blx	r3
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   80ed0:	687b      	ldr	r3, [r7, #4]
   80ed2:	3301      	adds	r3, #1
   80ed4:	607b      	str	r3, [r7, #4]
   80ed6:	4b05      	ldr	r3, [pc, #20]	; (80eec <ctrl_usart_cb_data+0x48>)
   80ed8:	88db      	ldrh	r3, [r3, #6]
   80eda:	461a      	mov	r2, r3
   80edc:	687b      	ldr	r3, [r7, #4]
   80ede:	4293      	cmp	r3, r2
   80ee0:	dbec      	blt.n	80ebc <ctrl_usart_cb_data+0x18>
   80ee2:	e000      	b.n	80ee6 <ctrl_usart_cb_data+0x42>
		return;
   80ee4:	bf00      	nop
	}
}
   80ee6:	3708      	adds	r7, #8
   80ee8:	46bd      	mov	sp, r7
   80eea:	bd80      	pop	{r7, pc}
   80eec:	20001828 	.word	0x20001828
   80ef0:	40090000 	.word	0x40090000
   80ef4:	00081a89 	.word	0x00081a89

00080ef8 <ctrl_spi_cb>:

static void ctrl_spi_cb(void)
{
   80ef8:	b580      	push	{r7, lr}
   80efa:	af00      	add	r7, sp, #0
    ctrl_spi(SPI, false);
   80efc:	2100      	movs	r1, #0
   80efe:	4802      	ldr	r0, [pc, #8]	; (80f08 <ctrl_spi_cb+0x10>)
   80f00:	4b02      	ldr	r3, [pc, #8]	; (80f0c <ctrl_spi_cb+0x14>)
   80f02:	4798      	blx	r3
}
   80f04:	bf00      	nop
   80f06:	bd80      	pop	{r7, pc}
   80f08:	40008000 	.word	0x40008000
   80f0c:	00081d9d 	.word	0x00081d9d

00080f10 <main_setup_out_received>:
{
	V2Protocol_ProcessCommand();
}

bool main_setup_out_received(void)
{
   80f10:	b580      	push	{r7, lr}
   80f12:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   80f14:	4b4c      	ldr	r3, [pc, #304]	; (81048 <main_setup_out_received+0x138>)
   80f16:	4a4d      	ldr	r2, [pc, #308]	; (8104c <main_setup_out_received+0x13c>)
   80f18:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   80f1a:	4b4b      	ldr	r3, [pc, #300]	; (81048 <main_setup_out_received+0x138>)
   80f1c:	88db      	ldrh	r3, [r3, #6]
   80f1e:	2b40      	cmp	r3, #64	; 0x40
   80f20:	bf28      	it	cs
   80f22:	2340      	movcs	r3, #64	; 0x40
   80f24:	b29a      	uxth	r2, r3
   80f26:	4b48      	ldr	r3, [pc, #288]	; (81048 <main_setup_out_received+0x138>)
   80f28:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   80f2a:	4b49      	ldr	r3, [pc, #292]	; (81050 <main_setup_out_received+0x140>)
   80f2c:	2200      	movs	r2, #0
   80f2e:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   80f30:	4b45      	ldr	r3, [pc, #276]	; (81048 <main_setup_out_received+0x138>)
   80f32:	785b      	ldrb	r3, [r3, #1]
   80f34:	3b10      	subs	r3, #16
   80f36:	2b16      	cmp	r3, #22
   80f38:	d87a      	bhi.n	81030 <main_setup_out_received+0x120>
   80f3a:	a201      	add	r2, pc, #4	; (adr r2, 80f40 <main_setup_out_received+0x30>)
   80f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80f40:	00080f9d 	.word	0x00080f9d
   80f44:	00080fc9 	.word	0x00080fc9
   80f48:	00080fb3 	.word	0x00080fb3
   80f4c:	00080fdf 	.word	0x00080fdf
   80f50:	00081031 	.word	0x00081031
   80f54:	00081031 	.word	0x00081031
   80f58:	00081009 	.word	0x00081009
   80f5c:	00081031 	.word	0x00081031
   80f60:	00081031 	.word	0x00081031
   80f64:	00081031 	.word	0x00081031
   80f68:	00080fff 	.word	0x00080fff
   80f6c:	00080ff5 	.word	0x00080ff5
   80f70:	00081031 	.word	0x00081031
   80f74:	00081031 	.word	0x00081031
   80f78:	00081031 	.word	0x00081031
   80f7c:	00081031 	.word	0x00081031
   80f80:	00081031 	.word	0x00081031
   80f84:	00081031 	.word	0x00081031
   80f88:	00081013 	.word	0x00081013
   80f8c:	00081031 	.word	0x00081031
   80f90:	00081031 	.word	0x00081031
   80f94:	0008101d 	.word	0x0008101d
   80f98:	00081027 	.word	0x00081027
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   80f9c:	2006      	movs	r0, #6
   80f9e:	4b2d      	ldr	r3, [pc, #180]	; (81054 <main_setup_out_received+0x144>)
   80fa0:	4798      	blx	r3
   80fa2:	4603      	mov	r3, r0
   80fa4:	2b00      	cmp	r3, #0
   80fa6:	d045      	beq.n	81034 <main_setup_out_received+0x124>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   80fa8:	4b27      	ldr	r3, [pc, #156]	; (81048 <main_setup_out_received+0x138>)
   80faa:	4a2b      	ldr	r2, [pc, #172]	; (81058 <main_setup_out_received+0x148>)
   80fac:	611a      	str	r2, [r3, #16]
            return true;
   80fae:	2301      	movs	r3, #1
   80fb0:	e048      	b.n	81044 <main_setup_out_received+0x134>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   80fb2:	2006      	movs	r0, #6
   80fb4:	4b27      	ldr	r3, [pc, #156]	; (81054 <main_setup_out_received+0x144>)
   80fb6:	4798      	blx	r3
   80fb8:	4603      	mov	r3, r0
   80fba:	2b00      	cmp	r3, #0
   80fbc:	d03c      	beq.n	81038 <main_setup_out_received+0x128>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   80fbe:	4b22      	ldr	r3, [pc, #136]	; (81048 <main_setup_out_received+0x138>)
   80fc0:	4a26      	ldr	r2, [pc, #152]	; (8105c <main_setup_out_received+0x14c>)
   80fc2:	611a      	str	r2, [r3, #16]
            return true;
   80fc4:	2301      	movs	r3, #1
   80fc6:	e03d      	b.n	81044 <main_setup_out_received+0x134>
        break;


        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   80fc8:	2006      	movs	r0, #6
   80fca:	4b22      	ldr	r3, [pc, #136]	; (81054 <main_setup_out_received+0x144>)
   80fcc:	4798      	blx	r3
   80fce:	4603      	mov	r3, r0
   80fd0:	2b00      	cmp	r3, #0
   80fd2:	d033      	beq.n	8103c <main_setup_out_received+0x12c>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   80fd4:	4b1c      	ldr	r3, [pc, #112]	; (81048 <main_setup_out_received+0x138>)
   80fd6:	4a22      	ldr	r2, [pc, #136]	; (81060 <main_setup_out_received+0x150>)
   80fd8:	611a      	str	r2, [r3, #16]
            return true;
   80fda:	2301      	movs	r3, #1
   80fdc:	e032      	b.n	81044 <main_setup_out_received+0x134>
    //     udd_g_ctrlreq.callback = ctrl_avr_program_void;
    //     return true;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   80fde:	2006      	movs	r0, #6
   80fe0:	4b1c      	ldr	r3, [pc, #112]	; (81054 <main_setup_out_received+0x144>)
   80fe2:	4798      	blx	r3
   80fe4:	4603      	mov	r3, r0
   80fe6:	2b00      	cmp	r3, #0
   80fe8:	d02a      	beq.n	81040 <main_setup_out_received+0x130>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   80fea:	4b17      	ldr	r3, [pc, #92]	; (81048 <main_setup_out_received+0x138>)
   80fec:	4a1d      	ldr	r2, [pc, #116]	; (81064 <main_setup_out_received+0x154>)
   80fee:	611a      	str	r2, [r3, #16]
            return true;
   80ff0:	2301      	movs	r3, #1
   80ff2:	e027      	b.n	81044 <main_setup_out_received+0x134>
        }
        break;

		/* Target serial */
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   80ff4:	4b14      	ldr	r3, [pc, #80]	; (81048 <main_setup_out_received+0x138>)
   80ff6:	4a1c      	ldr	r2, [pc, #112]	; (81068 <main_setup_out_received+0x158>)
   80ff8:	611a      	str	r2, [r3, #16]
        return true;
   80ffa:	2301      	movs	r3, #1
   80ffc:	e022      	b.n	81044 <main_setup_out_received+0x134>
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   80ffe:	4b12      	ldr	r3, [pc, #72]	; (81048 <main_setup_out_received+0x138>)
   81000:	4a1a      	ldr	r2, [pc, #104]	; (8106c <main_setup_out_received+0x15c>)
   81002:	611a      	str	r2, [r3, #16]
        return true;
   81004:	2301      	movs	r3, #1
   81006:	e01d      	b.n	81044 <main_setup_out_received+0x134>

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81008:	4b0f      	ldr	r3, [pc, #60]	; (81048 <main_setup_out_received+0x138>)
   8100a:	4a19      	ldr	r2, [pc, #100]	; (81070 <main_setup_out_received+0x160>)
   8100c:	611a      	str	r2, [r3, #16]
        return true;
   8100e:	2301      	movs	r3, #1
   81010:	e018      	b.n	81044 <main_setup_out_received+0x134>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   81012:	4b0d      	ldr	r3, [pc, #52]	; (81048 <main_setup_out_received+0x138>)
   81014:	4a17      	ldr	r2, [pc, #92]	; (81074 <main_setup_out_received+0x164>)
   81016:	611a      	str	r2, [r3, #16]
        return true;
   81018:	2301      	movs	r3, #1
   8101a:	e013      	b.n	81044 <main_setup_out_received+0x134>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   8101c:	4b0a      	ldr	r3, [pc, #40]	; (81048 <main_setup_out_received+0x138>)
   8101e:	4a16      	ldr	r2, [pc, #88]	; (81078 <main_setup_out_received+0x168>)
   81020:	611a      	str	r2, [r3, #16]
        return true;
   81022:	2301      	movs	r3, #1
   81024:	e00e      	b.n	81044 <main_setup_out_received+0x134>
    case REQ_SPI:
        udd_g_ctrlreq.callback = ctrl_spi_cb;
   81026:	4b08      	ldr	r3, [pc, #32]	; (81048 <main_setup_out_received+0x138>)
   81028:	4a14      	ldr	r2, [pc, #80]	; (8107c <main_setup_out_received+0x16c>)
   8102a:	611a      	str	r2, [r3, #16]
        return true;
   8102c:	2301      	movs	r3, #1
   8102e:	e009      	b.n	81044 <main_setup_out_received+0x134>
    default:
        return false;
   81030:	2300      	movs	r3, #0
   81032:	e007      	b.n	81044 <main_setup_out_received+0x134>
        break;
   81034:	bf00      	nop
   81036:	e004      	b.n	81042 <main_setup_out_received+0x132>
        break;
   81038:	bf00      	nop
   8103a:	e002      	b.n	81042 <main_setup_out_received+0x132>
        break;
   8103c:	bf00      	nop
   8103e:	e000      	b.n	81042 <main_setup_out_received+0x132>
        break;
   81040:	bf00      	nop
    }

    return false;
   81042:	2300      	movs	r3, #0
}
   81044:	4618      	mov	r0, r3
   81046:	bd80      	pop	{r7, pc}
   81048:	20001828 	.word	0x20001828
   8104c:	20001210 	.word	0x20001210
   81050:	20001250 	.word	0x20001250
   81054:	000812c9 	.word	0x000812c9
   81058:	00080c25 	.word	0x00080c25
   8105c:	00080c81 	.word	0x00080c81
   81060:	00080d55 	.word	0x00080d55
   81064:	00080cdd 	.word	0x00080cdd
   81068:	00080e8d 	.word	0x00080e8d
   8106c:	00080ea5 	.word	0x00080ea5
   81070:	00080e25 	.word	0x00080e25
   81074:	00080d95 	.word	0x00080d95
   81078:	00080e71 	.word	0x00080e71
   8107c:	00080ef9 	.word	0x00080ef9

00081080 <main_setup_in_received>:
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   81080:	b580      	push	{r7, lr}
   81082:	b082      	sub	sp, #8
   81084:	af00      	add	r7, sp, #0
    */

    static uint8_t  respbuf[64];
    unsigned int cnt;

    switch(udd_g_ctrlreq.req.bRequest){
   81086:	4b48      	ldr	r3, [pc, #288]	; (811a8 <main_setup_in_received+0x128>)
   81088:	785b      	ldrb	r3, [r3, #1]
   8108a:	3b12      	subs	r3, #18
   8108c:	2b09      	cmp	r3, #9
   8108e:	f200 8085 	bhi.w	8119c <main_setup_in_received+0x11c>
   81092:	a201      	add	r2, pc, #4	; (adr r2, 81098 <main_setup_in_received+0x18>)
   81094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81098:	000810c1 	.word	0x000810c1
   8109c:	0008119d 	.word	0x0008119d
   810a0:	0008119d 	.word	0x0008119d
   810a4:	00081163 	.word	0x00081163
   810a8:	0008119d 	.word	0x0008119d
   810ac:	00081141 	.word	0x00081141
   810b0:	0008119d 	.word	0x0008119d
   810b4:	0008119d 	.word	0x0008119d
   810b8:	00081103 	.word	0x00081103
   810bc:	000810ed 	.word	0x000810ed
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   810c0:	4b3a      	ldr	r3, [pc, #232]	; (811ac <main_setup_in_received+0x12c>)
   810c2:	681b      	ldr	r3, [r3, #0]
   810c4:	4a38      	ldr	r2, [pc, #224]	; (811a8 <main_setup_in_received+0x128>)
   810c6:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   810c8:	4b39      	ldr	r3, [pc, #228]	; (811b0 <main_setup_in_received+0x130>)
   810ca:	681b      	ldr	r3, [r3, #0]
   810cc:	b29a      	uxth	r2, r3
   810ce:	4b36      	ldr	r3, [pc, #216]	; (811a8 <main_setup_in_received+0x128>)
   810d0:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   810d2:	4b37      	ldr	r3, [pc, #220]	; (811b0 <main_setup_in_received+0x130>)
   810d4:	2200      	movs	r2, #0
   810d6:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   810d8:	4b36      	ldr	r3, [pc, #216]	; (811b4 <main_setup_in_received+0x134>)
   810da:	4798      	blx	r3
   810dc:	4603      	mov	r3, r0
   810de:	2b05      	cmp	r3, #5
   810e0:	d102      	bne.n	810e8 <main_setup_in_received+0x68>
            FPGA_setlock(fpga_unlocked);
   810e2:	2000      	movs	r0, #0
   810e4:	4b34      	ldr	r3, [pc, #208]	; (811b8 <main_setup_in_received+0x138>)
   810e6:	4798      	blx	r3
        }

        return true;
   810e8:	2301      	movs	r3, #1
   810ea:	e058      	b.n	8119e <main_setup_in_received+0x11e>
    //     return V2Protocol_ProcessCommand();
    //     break;
        
        
    case REQ_USART0_CONFIG:
        return ctrl_usart(USART_TARGET, true);
   810ec:	2101      	movs	r1, #1
   810ee:	4833      	ldr	r0, [pc, #204]	; (811bc <main_setup_in_received+0x13c>)
   810f0:	4b33      	ldr	r3, [pc, #204]	; (811c0 <main_setup_in_received+0x140>)
   810f2:	4798      	blx	r3
   810f4:	4603      	mov	r3, r0
   810f6:	2b00      	cmp	r3, #0
   810f8:	bf14      	ite	ne
   810fa:	2301      	movne	r3, #1
   810fc:	2300      	moveq	r3, #0
   810fe:	b2db      	uxtb	r3, r3
   81100:	e04d      	b.n	8119e <main_setup_in_received+0x11e>
        break;
        
    case REQ_USART0_DATA:						
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81102:	2300      	movs	r3, #0
   81104:	607b      	str	r3, [r7, #4]
   81106:	e00c      	b.n	81122 <main_setup_in_received+0xa2>
            respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   81108:	482c      	ldr	r0, [pc, #176]	; (811bc <main_setup_in_received+0x13c>)
   8110a:	4b2e      	ldr	r3, [pc, #184]	; (811c4 <main_setup_in_received+0x144>)
   8110c:	4798      	blx	r3
   8110e:	4603      	mov	r3, r0
   81110:	b2d9      	uxtb	r1, r3
   81112:	4a2d      	ldr	r2, [pc, #180]	; (811c8 <main_setup_in_received+0x148>)
   81114:	687b      	ldr	r3, [r7, #4]
   81116:	4413      	add	r3, r2
   81118:	460a      	mov	r2, r1
   8111a:	701a      	strb	r2, [r3, #0]
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8111c:	687b      	ldr	r3, [r7, #4]
   8111e:	3301      	adds	r3, #1
   81120:	607b      	str	r3, [r7, #4]
   81122:	4b21      	ldr	r3, [pc, #132]	; (811a8 <main_setup_in_received+0x128>)
   81124:	88db      	ldrh	r3, [r3, #6]
   81126:	461a      	mov	r2, r3
   81128:	687b      	ldr	r3, [r7, #4]
   8112a:	4293      	cmp	r3, r2
   8112c:	d3ec      	bcc.n	81108 <main_setup_in_received+0x88>
        }
        udd_g_ctrlreq.payload = respbuf;
   8112e:	4b1e      	ldr	r3, [pc, #120]	; (811a8 <main_setup_in_received+0x128>)
   81130:	4a25      	ldr	r2, [pc, #148]	; (811c8 <main_setup_in_received+0x148>)
   81132:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   81134:	687b      	ldr	r3, [r7, #4]
   81136:	b29a      	uxth	r2, r3
   81138:	4b1b      	ldr	r3, [pc, #108]	; (811a8 <main_setup_in_received+0x128>)
   8113a:	819a      	strh	r2, [r3, #12]
        return true;
   8113c:	2301      	movs	r3, #1
   8113e:	e02e      	b.n	8119e <main_setup_in_received+0x11e>
        break;
    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   81140:	4b21      	ldr	r3, [pc, #132]	; (811c8 <main_setup_in_received+0x148>)
   81142:	2201      	movs	r2, #1
   81144:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   81146:	4b20      	ldr	r3, [pc, #128]	; (811c8 <main_setup_in_received+0x148>)
   81148:	2201      	movs	r2, #1
   8114a:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   8114c:	4b1e      	ldr	r3, [pc, #120]	; (811c8 <main_setup_in_received+0x148>)
   8114e:	2200      	movs	r2, #0
   81150:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   81152:	4b15      	ldr	r3, [pc, #84]	; (811a8 <main_setup_in_received+0x128>)
   81154:	4a1c      	ldr	r2, [pc, #112]	; (811c8 <main_setup_in_received+0x148>)
   81156:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   81158:	4b13      	ldr	r3, [pc, #76]	; (811a8 <main_setup_in_received+0x128>)
   8115a:	2203      	movs	r2, #3
   8115c:	819a      	strh	r2, [r3, #12]
        return true;
   8115e:	2301      	movs	r3, #1
   81160:	e01d      	b.n	8119e <main_setup_in_received+0x11e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   81162:	2007      	movs	r0, #7
   81164:	4b19      	ldr	r3, [pc, #100]	; (811cc <main_setup_in_received+0x14c>)
   81166:	4798      	blx	r3
   81168:	4603      	mov	r3, r0
   8116a:	2b00      	cmp	r3, #0
   8116c:	bf14      	ite	ne
   8116e:	2301      	movne	r3, #1
   81170:	2300      	moveq	r3, #0
   81172:	b2db      	uxtb	r3, r3
   81174:	461a      	mov	r2, r3
   81176:	4b14      	ldr	r3, [pc, #80]	; (811c8 <main_setup_in_received+0x148>)
   81178:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   8117a:	4b13      	ldr	r3, [pc, #76]	; (811c8 <main_setup_in_received+0x148>)
   8117c:	2200      	movs	r2, #0
   8117e:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   81180:	4b11      	ldr	r3, [pc, #68]	; (811c8 <main_setup_in_received+0x148>)
   81182:	2200      	movs	r2, #0
   81184:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   81186:	4b10      	ldr	r3, [pc, #64]	; (811c8 <main_setup_in_received+0x148>)
   81188:	2200      	movs	r2, #0
   8118a:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   8118c:	4b06      	ldr	r3, [pc, #24]	; (811a8 <main_setup_in_received+0x128>)
   8118e:	4a0e      	ldr	r2, [pc, #56]	; (811c8 <main_setup_in_received+0x148>)
   81190:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   81192:	4b05      	ldr	r3, [pc, #20]	; (811a8 <main_setup_in_received+0x128>)
   81194:	2204      	movs	r2, #4
   81196:	819a      	strh	r2, [r3, #12]
        return true;
   81198:	2301      	movs	r3, #1
   8119a:	e000      	b.n	8119e <main_setup_in_received+0x11e>
        break;
    default:
        return false;
   8119c:	2300      	movs	r3, #0
    }
    return false;
}
   8119e:	4618      	mov	r0, r3
   811a0:	3708      	adds	r7, #8
   811a2:	46bd      	mov	sp, r7
   811a4:	bd80      	pop	{r7, pc}
   811a6:	bf00      	nop
   811a8:	20001828 	.word	0x20001828
   811ac:	20001254 	.word	0x20001254
   811b0:	20001258 	.word	0x20001258
   811b4:	00081321 	.word	0x00081321
   811b8:	000812c9 	.word	0x000812c9
   811bc:	40090000 	.word	0x40090000
   811c0:	000816a1 	.word	0x000816a1
   811c4:	00081b31 	.word	0x00081b31
   811c8:	2000125c 	.word	0x2000125c
   811cc:	00082621 	.word	0x00082621

000811d0 <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   811d0:	b580      	push	{r7, lr}
   811d2:	b082      	sub	sp, #8
   811d4:	af00      	add	r7, sp, #0
   811d6:	4603      	mov	r3, r0
   811d8:	6039      	str	r1, [r7, #0]
   811da:	71fb      	strb	r3, [r7, #7]
   811dc:	4613      	mov	r3, r2
   811de:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   811e0:	79fb      	ldrb	r3, [r7, #7]
   811e2:	2b00      	cmp	r3, #0
   811e4:	d108      	bne.n	811f8 <main_vendor_bulk_in_received+0x28>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   811e6:	4b06      	ldr	r3, [pc, #24]	; (81200 <main_vendor_bulk_in_received+0x30>)
   811e8:	4798      	blx	r3
   811ea:	4603      	mov	r3, r0
   811ec:	2b02      	cmp	r3, #2
   811ee:	d104      	bne.n	811fa <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   811f0:	2000      	movs	r0, #0
   811f2:	4b04      	ldr	r3, [pc, #16]	; (81204 <main_vendor_bulk_in_received+0x34>)
   811f4:	4798      	blx	r3
   811f6:	e000      	b.n	811fa <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   811f8:	bf00      	nop
    }
}
   811fa:	3708      	adds	r7, #8
   811fc:	46bd      	mov	sp, r7
   811fe:	bd80      	pop	{r7, pc}
   81200:	00081321 	.word	0x00081321
   81204:	000812c9 	.word	0x000812c9

00081208 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81208:	b580      	push	{r7, lr}
   8120a:	b084      	sub	sp, #16
   8120c:	af00      	add	r7, sp, #0
   8120e:	4603      	mov	r3, r0
   81210:	6039      	str	r1, [r7, #0]
   81212:	71fb      	strb	r3, [r7, #7]
   81214:	4613      	mov	r3, r2
   81216:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81218:	79fb      	ldrb	r3, [r7, #7]
   8121a:	2b00      	cmp	r3, #0
   8121c:	d006      	beq.n	8122c <main_vendor_bulk_out_received+0x24>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   8121e:	4a22      	ldr	r2, [pc, #136]	; (812a8 <main_vendor_bulk_out_received+0xa0>)
   81220:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81224:	4821      	ldr	r0, [pc, #132]	; (812ac <main_vendor_bulk_out_received+0xa4>)
   81226:	4b22      	ldr	r3, [pc, #136]	; (812b0 <main_vendor_bulk_out_received+0xa8>)
   81228:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   8122a:	e039      	b.n	812a0 <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   8122c:	4b21      	ldr	r3, [pc, #132]	; (812b4 <main_vendor_bulk_out_received+0xac>)
   8122e:	781b      	ldrb	r3, [r3, #0]
   81230:	2b00      	cmp	r3, #0
   81232:	d11a      	bne.n	8126a <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81234:	2300      	movs	r3, #0
   81236:	60fb      	str	r3, [r7, #12]
   81238:	e00b      	b.n	81252 <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   8123a:	4b1f      	ldr	r3, [pc, #124]	; (812b8 <main_vendor_bulk_out_received+0xb0>)
   8123c:	681a      	ldr	r2, [r3, #0]
   8123e:	68fb      	ldr	r3, [r7, #12]
   81240:	4413      	add	r3, r2
   81242:	491a      	ldr	r1, [pc, #104]	; (812ac <main_vendor_bulk_out_received+0xa4>)
   81244:	68fa      	ldr	r2, [r7, #12]
   81246:	440a      	add	r2, r1
   81248:	7812      	ldrb	r2, [r2, #0]
   8124a:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   8124c:	68fb      	ldr	r3, [r7, #12]
   8124e:	3301      	adds	r3, #1
   81250:	60fb      	str	r3, [r7, #12]
   81252:	68fa      	ldr	r2, [r7, #12]
   81254:	683b      	ldr	r3, [r7, #0]
   81256:	429a      	cmp	r2, r3
   81258:	d3ef      	bcc.n	8123a <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   8125a:	4b18      	ldr	r3, [pc, #96]	; (812bc <main_vendor_bulk_out_received+0xb4>)
   8125c:	4798      	blx	r3
   8125e:	4603      	mov	r3, r0
   81260:	2b04      	cmp	r3, #4
   81262:	d117      	bne.n	81294 <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   81264:	4b16      	ldr	r3, [pc, #88]	; (812c0 <main_vendor_bulk_out_received+0xb8>)
   81266:	4798      	blx	r3
   81268:	e014      	b.n	81294 <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   8126a:	4b12      	ldr	r3, [pc, #72]	; (812b4 <main_vendor_bulk_out_received+0xac>)
   8126c:	781b      	ldrb	r3, [r3, #0]
   8126e:	2b0a      	cmp	r3, #10
   81270:	d110      	bne.n	81294 <main_vendor_bulk_out_received+0x8c>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   81272:	2300      	movs	r3, #0
   81274:	60bb      	str	r3, [r7, #8]
   81276:	e009      	b.n	8128c <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   81278:	4a0c      	ldr	r2, [pc, #48]	; (812ac <main_vendor_bulk_out_received+0xa4>)
   8127a:	68bb      	ldr	r3, [r7, #8]
   8127c:	4413      	add	r3, r2
   8127e:	781b      	ldrb	r3, [r3, #0]
   81280:	4618      	mov	r0, r3
   81282:	4b10      	ldr	r3, [pc, #64]	; (812c4 <main_vendor_bulk_out_received+0xbc>)
   81284:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   81286:	68bb      	ldr	r3, [r7, #8]
   81288:	3301      	adds	r3, #1
   8128a:	60bb      	str	r3, [r7, #8]
   8128c:	68ba      	ldr	r2, [r7, #8]
   8128e:	683b      	ldr	r3, [r7, #0]
   81290:	429a      	cmp	r2, r3
   81292:	d3f1      	bcc.n	81278 <main_vendor_bulk_out_received+0x70>
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   81294:	4a04      	ldr	r2, [pc, #16]	; (812a8 <main_vendor_bulk_out_received+0xa0>)
   81296:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8129a:	4804      	ldr	r0, [pc, #16]	; (812ac <main_vendor_bulk_out_received+0xa4>)
   8129c:	4b04      	ldr	r3, [pc, #16]	; (812b0 <main_vendor_bulk_out_received+0xa8>)
   8129e:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   812a0:	3710      	adds	r7, #16
   812a2:	46bd      	mov	sp, r7
   812a4:	bd80      	pop	{r7, pc}
   812a6:	bf00      	nop
   812a8:	00081209 	.word	0x00081209
   812ac:	20000e10 	.word	0x20000e10
   812b0:	00084af9 	.word	0x00084af9
   812b4:	20001250 	.word	0x20001250
   812b8:	20000280 	.word	0x20000280
   812bc:	00081321 	.word	0x00081321
   812c0:	00081309 	.word	0x00081309
   812c4:	000814ed 	.word	0x000814ed

000812c8 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   812c8:	b580      	push	{r7, lr}
   812ca:	b084      	sub	sp, #16
   812cc:	af00      	add	r7, sp, #0
   812ce:	4603      	mov	r3, r0
   812d0:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   812d2:	2300      	movs	r3, #0
   812d4:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   812d6:	4b09      	ldr	r3, [pc, #36]	; (812fc <FPGA_setlock+0x34>)
   812d8:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   812da:	4b09      	ldr	r3, [pc, #36]	; (81300 <FPGA_setlock+0x38>)
   812dc:	781b      	ldrb	r3, [r3, #0]
   812de:	b2db      	uxtb	r3, r3
   812e0:	2b00      	cmp	r3, #0
   812e2:	d104      	bne.n	812ee <FPGA_setlock+0x26>
  {
    ret = 1;
   812e4:	2301      	movs	r3, #1
   812e6:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   812e8:	4a05      	ldr	r2, [pc, #20]	; (81300 <FPGA_setlock+0x38>)
   812ea:	79fb      	ldrb	r3, [r7, #7]
   812ec:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   812ee:	4b05      	ldr	r3, [pc, #20]	; (81304 <FPGA_setlock+0x3c>)
   812f0:	4798      	blx	r3
  return ret;
   812f2:	68fb      	ldr	r3, [r7, #12]
}
   812f4:	4618      	mov	r0, r3
   812f6:	3710      	adds	r7, #16
   812f8:	46bd      	mov	sp, r7
   812fa:	bd80      	pop	{r7, pc}
   812fc:	000822bd 	.word	0x000822bd
   81300:	2000129c 	.word	0x2000129c
   81304:	00082315 	.word	0x00082315

00081308 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   81308:	b480      	push	{r7}
   8130a:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   8130c:	4b03      	ldr	r3, [pc, #12]	; (8131c <FPGA_releaselock+0x14>)
   8130e:	2200      	movs	r2, #0
   81310:	701a      	strb	r2, [r3, #0]
}
   81312:	bf00      	nop
   81314:	46bd      	mov	sp, r7
   81316:	bc80      	pop	{r7}
   81318:	4770      	bx	lr
   8131a:	bf00      	nop
   8131c:	2000129c 	.word	0x2000129c

00081320 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   81320:	b480      	push	{r7}
   81322:	af00      	add	r7, sp, #0
  return _fpga_locked;
   81324:	4b03      	ldr	r3, [pc, #12]	; (81334 <FPGA_lockstatus+0x14>)
   81326:	781b      	ldrb	r3, [r3, #0]
   81328:	b2db      	uxtb	r3, r3
}
   8132a:	4618      	mov	r0, r3
   8132c:	46bd      	mov	sp, r7
   8132e:	bc80      	pop	{r7}
   81330:	4770      	bx	lr
   81332:	bf00      	nop
   81334:	2000129c 	.word	0x2000129c

00081338 <FPGA_setaddr>:
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   81338:	b580      	push	{r7, lr}
   8133a:	b082      	sub	sp, #8
   8133c:	af00      	add	r7, sp, #0
   8133e:	6078      	str	r0, [r7, #4]
  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
   81340:	4b0c      	ldr	r3, [pc, #48]	; (81374 <FPGA_setaddr+0x3c>)
   81342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81344:	f003 0240 	and.w	r2, r3, #64	; 0x40
   81348:	687b      	ldr	r3, [r7, #4]
   8134a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   8134e:	431a      	orrs	r2, r3
   81350:	687b      	ldr	r3, [r7, #4]
   81352:	005b      	lsls	r3, r3, #1
   81354:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   81358:	4906      	ldr	r1, [pc, #24]	; (81374 <FPGA_setaddr+0x3c>)
   8135a:	4313      	orrs	r3, r2
   8135c:	638b      	str	r3, [r1, #56]	; 0x38
  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   8135e:	2031      	movs	r0, #49	; 0x31
   81360:	4b05      	ldr	r3, [pc, #20]	; (81378 <FPGA_setaddr+0x40>)
   81362:	4798      	blx	r3
  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   81364:	2031      	movs	r0, #49	; 0x31
   81366:	4b05      	ldr	r3, [pc, #20]	; (8137c <FPGA_setaddr+0x44>)
   81368:	4798      	blx	r3
}
   8136a:	bf00      	nop
   8136c:	3708      	adds	r7, #8
   8136e:	46bd      	mov	sp, r7
   81370:	bd80      	pop	{r7, pc}
   81372:	bf00      	nop
   81374:	400e0e00 	.word	0x400e0e00
   81378:	00082681 	.word	0x00082681
   8137c:	00082651 	.word	0x00082651

00081380 <osc_get_rate>:
{
   81380:	b480      	push	{r7}
   81382:	b083      	sub	sp, #12
   81384:	af00      	add	r7, sp, #0
   81386:	6078      	str	r0, [r7, #4]
   81388:	687b      	ldr	r3, [r7, #4]
   8138a:	2b07      	cmp	r3, #7
   8138c:	d823      	bhi.n	813d6 <osc_get_rate+0x56>
   8138e:	a201      	add	r2, pc, #4	; (adr r2, 81394 <osc_get_rate+0x14>)
   81390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81394:	000813b5 	.word	0x000813b5
   81398:	000813bb 	.word	0x000813bb
   8139c:	000813bf 	.word	0x000813bf
   813a0:	000813c3 	.word	0x000813c3
   813a4:	000813c7 	.word	0x000813c7
   813a8:	000813cb 	.word	0x000813cb
   813ac:	000813cf 	.word	0x000813cf
   813b0:	000813d3 	.word	0x000813d3
		return OSC_SLCK_32K_RC_HZ;
   813b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   813b8:	e00e      	b.n	813d8 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   813ba:	2300      	movs	r3, #0
   813bc:	e00c      	b.n	813d8 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   813be:	2300      	movs	r3, #0
   813c0:	e00a      	b.n	813d8 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   813c2:	4b08      	ldr	r3, [pc, #32]	; (813e4 <osc_get_rate+0x64>)
   813c4:	e008      	b.n	813d8 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   813c6:	4b08      	ldr	r3, [pc, #32]	; (813e8 <osc_get_rate+0x68>)
   813c8:	e006      	b.n	813d8 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   813ca:	4b08      	ldr	r3, [pc, #32]	; (813ec <osc_get_rate+0x6c>)
   813cc:	e004      	b.n	813d8 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   813ce:	4b07      	ldr	r3, [pc, #28]	; (813ec <osc_get_rate+0x6c>)
   813d0:	e002      	b.n	813d8 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   813d2:	4b06      	ldr	r3, [pc, #24]	; (813ec <osc_get_rate+0x6c>)
   813d4:	e000      	b.n	813d8 <osc_get_rate+0x58>
	return 0;
   813d6:	2300      	movs	r3, #0
}
   813d8:	4618      	mov	r0, r3
   813da:	370c      	adds	r7, #12
   813dc:	46bd      	mov	sp, r7
   813de:	bc80      	pop	{r7}
   813e0:	4770      	bx	lr
   813e2:	bf00      	nop
   813e4:	003d0900 	.word	0x003d0900
   813e8:	007a1200 	.word	0x007a1200
   813ec:	00b71b00 	.word	0x00b71b00

000813f0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   813f0:	b580      	push	{r7, lr}
   813f2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   813f4:	2006      	movs	r0, #6
   813f6:	4b03      	ldr	r3, [pc, #12]	; (81404 <sysclk_get_main_hz+0x14>)
   813f8:	4798      	blx	r3
   813fa:	4603      	mov	r3, r0
   813fc:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   813fe:	4618      	mov	r0, r3
   81400:	bd80      	pop	{r7, pc}
   81402:	bf00      	nop
   81404:	00081381 	.word	0x00081381

00081408 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81408:	b580      	push	{r7, lr}
   8140a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8140c:	4b02      	ldr	r3, [pc, #8]	; (81418 <sysclk_get_cpu_hz+0x10>)
   8140e:	4798      	blx	r3
   81410:	4603      	mov	r3, r0
   81412:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81414:	4618      	mov	r0, r3
   81416:	bd80      	pop	{r7, pc}
   81418:	000813f1 	.word	0x000813f1

0008141c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   8141c:	b580      	push	{r7, lr}
   8141e:	b082      	sub	sp, #8
   81420:	af00      	add	r7, sp, #0
   81422:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81424:	6878      	ldr	r0, [r7, #4]
   81426:	4b03      	ldr	r3, [pc, #12]	; (81434 <sysclk_enable_peripheral_clock+0x18>)
   81428:	4798      	blx	r3
}
   8142a:	bf00      	nop
   8142c:	3708      	adds	r7, #8
   8142e:	46bd      	mov	sp, r7
   81430:	bd80      	pop	{r7, pc}
   81432:	bf00      	nop
   81434:	00082d15 	.word	0x00082d15

00081438 <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   81438:	b580      	push	{r7, lr}
   8143a:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   8143c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81440:	2019      	movs	r0, #25
   81442:	4b03      	ldr	r3, [pc, #12]	; (81450 <fpga_program_init+0x18>)
   81444:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   81446:	2019      	movs	r0, #25
   81448:	4b02      	ldr	r3, [pc, #8]	; (81454 <fpga_program_init+0x1c>)
   8144a:	4798      	blx	r3
}
   8144c:	bf00      	nop
   8144e:	bd80      	pop	{r7, pc}
   81450:	000826b1 	.word	0x000826b1
   81454:	00082651 	.word	0x00082651

00081458 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   81458:	b580      	push	{r7, lr}
   8145a:	b084      	sub	sp, #16
   8145c:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   8145e:	2019      	movs	r0, #25
   81460:	4b14      	ldr	r3, [pc, #80]	; (814b4 <fpga_program_setup1+0x5c>)
   81462:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   81464:	4b14      	ldr	r3, [pc, #80]	; (814b8 <fpga_program_setup1+0x60>)
   81466:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   81468:	23c0      	movs	r3, #192	; 0xc0
   8146a:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   8146c:	2300      	movs	r3, #0
   8146e:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   81470:	2300      	movs	r3, #0
   81472:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   81474:	200d      	movs	r0, #13
   81476:	4b11      	ldr	r3, [pc, #68]	; (814bc <fpga_program_setup1+0x64>)
   81478:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   8147a:	4b11      	ldr	r3, [pc, #68]	; (814c0 <fpga_program_setup1+0x68>)
   8147c:	4798      	blx	r3
   8147e:	4602      	mov	r2, r0
   81480:	463b      	mov	r3, r7
   81482:	4619      	mov	r1, r3
   81484:	480f      	ldr	r0, [pc, #60]	; (814c4 <fpga_program_setup1+0x6c>)
   81486:	4b10      	ldr	r3, [pc, #64]	; (814c8 <fpga_program_setup1+0x70>)
   81488:	4798      	blx	r3
    FPGA_DO_SETUP();
   8148a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8148e:	2012      	movs	r0, #18
   81490:	4b0e      	ldr	r3, [pc, #56]	; (814cc <fpga_program_setup1+0x74>)
   81492:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   81494:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81498:	2011      	movs	r0, #17
   8149a:	4b0c      	ldr	r3, [pc, #48]	; (814cc <fpga_program_setup1+0x74>)
   8149c:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   8149e:	4b0c      	ldr	r3, [pc, #48]	; (814d0 <fpga_program_setup1+0x78>)
   814a0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   814a4:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   814a6:	4807      	ldr	r0, [pc, #28]	; (814c4 <fpga_program_setup1+0x6c>)
   814a8:	4b0a      	ldr	r3, [pc, #40]	; (814d4 <fpga_program_setup1+0x7c>)
   814aa:	4798      	blx	r3
}
   814ac:	bf00      	nop
   814ae:	3710      	adds	r7, #16
   814b0:	46bd      	mov	sp, r7
   814b2:	bd80      	pop	{r7, pc}
   814b4:	00082681 	.word	0x00082681
   814b8:	00989680 	.word	0x00989680
   814bc:	0008141d 	.word	0x0008141d
   814c0:	00081409 	.word	0x00081409
   814c4:	40090000 	.word	0x40090000
   814c8:	00086a09 	.word	0x00086a09
   814cc:	000826b1 	.word	0x000826b1
   814d0:	400e0c00 	.word	0x400e0c00
   814d4:	00086b19 	.word	0x00086b19

000814d8 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   814d8:	b580      	push	{r7, lr}
   814da:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   814dc:	2019      	movs	r0, #25
   814de:	4b02      	ldr	r3, [pc, #8]	; (814e8 <fpga_program_setup2+0x10>)
   814e0:	4798      	blx	r3
}
   814e2:	bf00      	nop
   814e4:	bd80      	pop	{r7, pc}
   814e6:	bf00      	nop
   814e8:	00082651 	.word	0x00082651

000814ec <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   814ec:	b580      	push	{r7, lr}
   814ee:	b082      	sub	sp, #8
   814f0:	af00      	add	r7, sp, #0
   814f2:	4603      	mov	r3, r0
   814f4:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   814f6:	79fb      	ldrb	r3, [r7, #7]
   814f8:	4619      	mov	r1, r3
   814fa:	4803      	ldr	r0, [pc, #12]	; (81508 <fpga_program_sendbyte+0x1c>)
   814fc:	4b03      	ldr	r3, [pc, #12]	; (8150c <fpga_program_sendbyte+0x20>)
   814fe:	4798      	blx	r3
}
   81500:	bf00      	nop
   81502:	3708      	adds	r7, #8
   81504:	46bd      	mov	sp, r7
   81506:	bd80      	pop	{r7, pc}
   81508:	40090000 	.word	0x40090000
   8150c:	00086c3f 	.word	0x00086c3f

00081510 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81510:	b480      	push	{r7}
   81512:	b083      	sub	sp, #12
   81514:	af00      	add	r7, sp, #0
   81516:	4603      	mov	r3, r0
   81518:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8151a:	79fb      	ldrb	r3, [r7, #7]
   8151c:	f003 031f 	and.w	r3, r3, #31
   81520:	2201      	movs	r2, #1
   81522:	fa02 f103 	lsl.w	r1, r2, r3
   81526:	4a05      	ldr	r2, [pc, #20]	; (8153c <NVIC_EnableIRQ+0x2c>)
   81528:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8152c:	095b      	lsrs	r3, r3, #5
   8152e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   81532:	bf00      	nop
   81534:	370c      	adds	r7, #12
   81536:	46bd      	mov	sp, r7
   81538:	bc80      	pop	{r7}
   8153a:	4770      	bx	lr
   8153c:	e000e100 	.word	0xe000e100

00081540 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81540:	b480      	push	{r7}
   81542:	b083      	sub	sp, #12
   81544:	af00      	add	r7, sp, #0
   81546:	4603      	mov	r3, r0
   81548:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8154a:	79fb      	ldrb	r3, [r7, #7]
   8154c:	f003 031f 	and.w	r3, r3, #31
   81550:	2201      	movs	r2, #1
   81552:	fa02 f103 	lsl.w	r1, r2, r3
   81556:	4a06      	ldr	r2, [pc, #24]	; (81570 <NVIC_ClearPendingIRQ+0x30>)
   81558:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8155c:	095b      	lsrs	r3, r3, #5
   8155e:	3360      	adds	r3, #96	; 0x60
   81560:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   81564:	bf00      	nop
   81566:	370c      	adds	r7, #12
   81568:	46bd      	mov	sp, r7
   8156a:	bc80      	pop	{r7}
   8156c:	4770      	bx	lr
   8156e:	bf00      	nop
   81570:	e000e100 	.word	0xe000e100

00081574 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81574:	b480      	push	{r7}
   81576:	b083      	sub	sp, #12
   81578:	af00      	add	r7, sp, #0
   8157a:	4603      	mov	r3, r0
   8157c:	6039      	str	r1, [r7, #0]
   8157e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81580:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81584:	2b00      	cmp	r3, #0
   81586:	da0b      	bge.n	815a0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81588:	683b      	ldr	r3, [r7, #0]
   8158a:	b2da      	uxtb	r2, r3
   8158c:	490c      	ldr	r1, [pc, #48]	; (815c0 <NVIC_SetPriority+0x4c>)
   8158e:	79fb      	ldrb	r3, [r7, #7]
   81590:	f003 030f 	and.w	r3, r3, #15
   81594:	3b04      	subs	r3, #4
   81596:	0112      	lsls	r2, r2, #4
   81598:	b2d2      	uxtb	r2, r2
   8159a:	440b      	add	r3, r1
   8159c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   8159e:	e009      	b.n	815b4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   815a0:	683b      	ldr	r3, [r7, #0]
   815a2:	b2da      	uxtb	r2, r3
   815a4:	4907      	ldr	r1, [pc, #28]	; (815c4 <NVIC_SetPriority+0x50>)
   815a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   815aa:	0112      	lsls	r2, r2, #4
   815ac:	b2d2      	uxtb	r2, r2
   815ae:	440b      	add	r3, r1
   815b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   815b4:	bf00      	nop
   815b6:	370c      	adds	r7, #12
   815b8:	46bd      	mov	sp, r7
   815ba:	bc80      	pop	{r7}
   815bc:	4770      	bx	lr
   815be:	bf00      	nop
   815c0:	e000ed00 	.word	0xe000ed00
   815c4:	e000e100 	.word	0xe000e100

000815c8 <osc_get_rate>:
{
   815c8:	b480      	push	{r7}
   815ca:	b083      	sub	sp, #12
   815cc:	af00      	add	r7, sp, #0
   815ce:	6078      	str	r0, [r7, #4]
   815d0:	687b      	ldr	r3, [r7, #4]
   815d2:	2b07      	cmp	r3, #7
   815d4:	d823      	bhi.n	8161e <osc_get_rate+0x56>
   815d6:	a201      	add	r2, pc, #4	; (adr r2, 815dc <osc_get_rate+0x14>)
   815d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   815dc:	000815fd 	.word	0x000815fd
   815e0:	00081603 	.word	0x00081603
   815e4:	00081607 	.word	0x00081607
   815e8:	0008160b 	.word	0x0008160b
   815ec:	0008160f 	.word	0x0008160f
   815f0:	00081613 	.word	0x00081613
   815f4:	00081617 	.word	0x00081617
   815f8:	0008161b 	.word	0x0008161b
		return OSC_SLCK_32K_RC_HZ;
   815fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81600:	e00e      	b.n	81620 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   81602:	2300      	movs	r3, #0
   81604:	e00c      	b.n	81620 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   81606:	2300      	movs	r3, #0
   81608:	e00a      	b.n	81620 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8160a:	4b08      	ldr	r3, [pc, #32]	; (8162c <osc_get_rate+0x64>)
   8160c:	e008      	b.n	81620 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   8160e:	4b08      	ldr	r3, [pc, #32]	; (81630 <osc_get_rate+0x68>)
   81610:	e006      	b.n	81620 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   81612:	4b08      	ldr	r3, [pc, #32]	; (81634 <osc_get_rate+0x6c>)
   81614:	e004      	b.n	81620 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   81616:	4b07      	ldr	r3, [pc, #28]	; (81634 <osc_get_rate+0x6c>)
   81618:	e002      	b.n	81620 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   8161a:	4b06      	ldr	r3, [pc, #24]	; (81634 <osc_get_rate+0x6c>)
   8161c:	e000      	b.n	81620 <osc_get_rate+0x58>
	return 0;
   8161e:	2300      	movs	r3, #0
}
   81620:	4618      	mov	r0, r3
   81622:	370c      	adds	r7, #12
   81624:	46bd      	mov	sp, r7
   81626:	bc80      	pop	{r7}
   81628:	4770      	bx	lr
   8162a:	bf00      	nop
   8162c:	003d0900 	.word	0x003d0900
   81630:	007a1200 	.word	0x007a1200
   81634:	00b71b00 	.word	0x00b71b00

00081638 <sysclk_get_main_hz>:
{
   81638:	b580      	push	{r7, lr}
   8163a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   8163c:	2006      	movs	r0, #6
   8163e:	4b03      	ldr	r3, [pc, #12]	; (8164c <sysclk_get_main_hz+0x14>)
   81640:	4798      	blx	r3
   81642:	4603      	mov	r3, r0
   81644:	011b      	lsls	r3, r3, #4
}
   81646:	4618      	mov	r0, r3
   81648:	bd80      	pop	{r7, pc}
   8164a:	bf00      	nop
   8164c:	000815c9 	.word	0x000815c9

00081650 <sysclk_get_cpu_hz>:
{
   81650:	b580      	push	{r7, lr}
   81652:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   81654:	4b02      	ldr	r3, [pc, #8]	; (81660 <sysclk_get_cpu_hz+0x10>)
   81656:	4798      	blx	r3
   81658:	4603      	mov	r3, r0
   8165a:	085b      	lsrs	r3, r3, #1
}
   8165c:	4618      	mov	r0, r3
   8165e:	bd80      	pop	{r7, pc}
   81660:	00081639 	.word	0x00081639

00081664 <sysclk_enable_peripheral_clock>:
{
   81664:	b580      	push	{r7, lr}
   81666:	b082      	sub	sp, #8
   81668:	af00      	add	r7, sp, #0
   8166a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8166c:	6878      	ldr	r0, [r7, #4]
   8166e:	4b03      	ldr	r3, [pc, #12]	; (8167c <sysclk_enable_peripheral_clock+0x18>)
   81670:	4798      	blx	r3
}
   81672:	bf00      	nop
   81674:	3708      	adds	r7, #8
   81676:	46bd      	mov	sp, r7
   81678:	bd80      	pop	{r7, pc}
   8167a:	bf00      	nop
   8167c:	00082d15 	.word	0x00082d15

00081680 <usart0_enableIO>:
tcirc_buf rx1buf, tx1buf;
tcirc_buf rx2buf, tx2buf;
tcirc_buf rx3buf, tx3buf;

static inline void usart0_enableIO(void)
{
   81680:	b580      	push	{r7, lr}
   81682:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81684:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81688:	2013      	movs	r0, #19
   8168a:	4b04      	ldr	r3, [pc, #16]	; (8169c <usart0_enableIO+0x1c>)
   8168c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   8168e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81692:	2012      	movs	r0, #18
   81694:	4b01      	ldr	r3, [pc, #4]	; (8169c <usart0_enableIO+0x1c>)
   81696:	4798      	blx	r3
}
   81698:	bf00      	nop
   8169a:	bd80      	pop	{r7, pc}
   8169c:	000826b1 	.word	0x000826b1

000816a0 <ctrl_usart>:
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
   816a0:	b580      	push	{r7, lr}
   816a2:	b08a      	sub	sp, #40	; 0x28
   816a4:	af00      	add	r7, sp, #0
   816a6:	6078      	str	r0, [r7, #4]
   816a8:	460b      	mov	r3, r1
   816aa:	70fb      	strb	r3, [r7, #3]
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   816ac:	4b99      	ldr	r3, [pc, #612]	; (81914 <ctrl_usart+0x274>)
   816ae:	885b      	ldrh	r3, [r3, #2]
   816b0:	b2db      	uxtb	r3, r3
   816b2:	3b10      	subs	r3, #16
   816b4:	2b08      	cmp	r3, #8
   816b6:	f200 81cb 	bhi.w	81a50 <ctrl_usart+0x3b0>
   816ba:	a201      	add	r2, pc, #4	; (adr r2, 816c0 <ctrl_usart+0x20>)
   816bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   816c0:	000816e5 	.word	0x000816e5
   816c4:	0008183d 	.word	0x0008183d
   816c8:	000818bf 	.word	0x000818bf
   816cc:	00081a51 	.word	0x00081a51
   816d0:	000818e3 	.word	0x000818e3
   816d4:	00081a51 	.word	0x00081a51
   816d8:	00081a51 	.word	0x00081a51
   816dc:	00081a51 	.word	0x00081a51
   816e0:	000819cb 	.word	0x000819cb
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   816e4:	78fb      	ldrb	r3, [r7, #3]
   816e6:	2b00      	cmp	r3, #0
   816e8:	d006      	beq.n	816f8 <ctrl_usart+0x58>
				if (udd_g_ctrlreq.req.wLength == 4){
   816ea:	4b8a      	ldr	r3, [pc, #552]	; (81914 <ctrl_usart+0x274>)
   816ec:	88db      	ldrh	r3, [r3, #6]
   816ee:	2b04      	cmp	r3, #4
   816f0:	f040 81a5 	bne.w	81a3e <ctrl_usart+0x39e>
					/*
					udd_g_ctrlreq.payload_size = 4;
					udd_g_ctrlreq.payload = ctrlbuffer;
					word2buf(ctrlbuffer, baud);
					*/
					return true;
   816f4:	2301      	movs	r3, #1
   816f6:	e1ac      	b.n	81a52 <ctrl_usart+0x3b2>
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   816f8:	4b86      	ldr	r3, [pc, #536]	; (81914 <ctrl_usart+0x274>)
   816fa:	88db      	ldrh	r3, [r3, #6]
   816fc:	2b07      	cmp	r3, #7
   816fe:	f040 8099 	bne.w	81834 <ctrl_usart+0x194>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   81702:	4b84      	ldr	r3, [pc, #528]	; (81914 <ctrl_usart+0x274>)
   81704:	689b      	ldr	r3, [r3, #8]
   81706:	681b      	ldr	r3, [r3, #0]
   81708:	627b      	str	r3, [r7, #36]	; 0x24
					
						usartopts.baudrate = baud;
   8170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8170c:	60fb      	str	r3, [r7, #12]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   8170e:	4b81      	ldr	r3, [pc, #516]	; (81914 <ctrl_usart+0x274>)
   81710:	689b      	ldr	r3, [r3, #8]
   81712:	3304      	adds	r3, #4
   81714:	781b      	ldrb	r3, [r3, #0]
   81716:	2b02      	cmp	r3, #2
   81718:	d00d      	beq.n	81736 <ctrl_usart+0x96>
   8171a:	2b02      	cmp	r3, #2
   8171c:	dc0f      	bgt.n	8173e <ctrl_usart+0x9e>
   8171e:	2b00      	cmp	r3, #0
   81720:	d002      	beq.n	81728 <ctrl_usart+0x88>
   81722:	2b01      	cmp	r3, #1
   81724:	d003      	beq.n	8172e <ctrl_usart+0x8e>
   81726:	e00a      	b.n	8173e <ctrl_usart+0x9e>
							{
							case 0:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81728:	2300      	movs	r3, #0
   8172a:	61bb      	str	r3, [r7, #24]
								break;
   8172c:	e009      	b.n	81742 <ctrl_usart+0xa2>
							case 1:
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   8172e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81732:	61bb      	str	r3, [r7, #24]
								break;
   81734:	e005      	b.n	81742 <ctrl_usart+0xa2>
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   81736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8173a:	61bb      	str	r3, [r7, #24]
								break;
   8173c:	e001      	b.n	81742 <ctrl_usart+0xa2>
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   8173e:	2300      	movs	r3, #0
   81740:	61bb      	str	r3, [r7, #24]
							}
					
						/* Parity */
						switch(udd_g_ctrlreq.payload[5])
   81742:	4b74      	ldr	r3, [pc, #464]	; (81914 <ctrl_usart+0x274>)
   81744:	689b      	ldr	r3, [r3, #8]
   81746:	3305      	adds	r3, #5
   81748:	781b      	ldrb	r3, [r3, #0]
   8174a:	2b04      	cmp	r3, #4
   8174c:	d81f      	bhi.n	8178e <ctrl_usart+0xee>
   8174e:	a201      	add	r2, pc, #4	; (adr r2, 81754 <ctrl_usart+0xb4>)
   81750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81754:	00081769 	.word	0x00081769
   81758:	00081771 	.word	0x00081771
   8175c:	00081779 	.word	0x00081779
   81760:	0008177f 	.word	0x0008177f
   81764:	00081787 	.word	0x00081787
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   81768:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8176c:	617b      	str	r3, [r7, #20]
								break;
   8176e:	e011      	b.n	81794 <ctrl_usart+0xf4>
							case 1:
								usartopts.parity_type = US_MR_PAR_ODD;
   81770:	f44f 7300 	mov.w	r3, #512	; 0x200
   81774:	617b      	str	r3, [r7, #20]
								break;
   81776:	e00d      	b.n	81794 <ctrl_usart+0xf4>
							case 2:
								usartopts.parity_type = US_MR_PAR_EVEN;
   81778:	2300      	movs	r3, #0
   8177a:	617b      	str	r3, [r7, #20]
								break;
   8177c:	e00a      	b.n	81794 <ctrl_usart+0xf4>
							case 3:
								usartopts.parity_type = US_MR_PAR_MARK;
   8177e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81782:	617b      	str	r3, [r7, #20]
								break;
   81784:	e006      	b.n	81794 <ctrl_usart+0xf4>
							case 4:
								usartopts.parity_type = US_MR_PAR_SPACE;
   81786:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8178a:	617b      	str	r3, [r7, #20]
								break;							
   8178c:	e002      	b.n	81794 <ctrl_usart+0xf4>
							default:
								usartopts.parity_type = US_MR_PAR_NO;
   8178e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81792:	617b      	str	r3, [r7, #20]
							}
					
						/* Data Bits */
						switch(udd_g_ctrlreq.payload[6])
   81794:	4b5f      	ldr	r3, [pc, #380]	; (81914 <ctrl_usart+0x274>)
   81796:	689b      	ldr	r3, [r3, #8]
   81798:	3306      	adds	r3, #6
   8179a:	781b      	ldrb	r3, [r3, #0]
   8179c:	2b07      	cmp	r3, #7
   8179e:	d00c      	beq.n	817ba <ctrl_usart+0x11a>
   817a0:	2b07      	cmp	r3, #7
   817a2:	dc0d      	bgt.n	817c0 <ctrl_usart+0x120>
   817a4:	2b05      	cmp	r3, #5
   817a6:	d002      	beq.n	817ae <ctrl_usart+0x10e>
   817a8:	2b06      	cmp	r3, #6
   817aa:	d003      	beq.n	817b4 <ctrl_usart+0x114>
   817ac:	e008      	b.n	817c0 <ctrl_usart+0x120>
							{
							case 5:
								usartopts.char_length = US_MR_CHRL_5_BIT;
   817ae:	2300      	movs	r3, #0
   817b0:	613b      	str	r3, [r7, #16]
								break;
   817b2:	e007      	b.n	817c4 <ctrl_usart+0x124>
							case 6:
								usartopts.char_length = US_MR_CHRL_6_BIT;
   817b4:	2340      	movs	r3, #64	; 0x40
   817b6:	613b      	str	r3, [r7, #16]
								break;
   817b8:	e004      	b.n	817c4 <ctrl_usart+0x124>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
   817ba:	2380      	movs	r3, #128	; 0x80
   817bc:	613b      	str	r3, [r7, #16]
								break;					
   817be:	e001      	b.n	817c4 <ctrl_usart+0x124>
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   817c0:	23c0      	movs	r3, #192	; 0xc0
   817c2:	613b      	str	r3, [r7, #16]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   817c4:	2300      	movs	r3, #0
   817c6:	61fb      	str	r3, [r7, #28]

						if (usart == USART0)
   817c8:	687b      	ldr	r3, [r7, #4]
   817ca:	4a53      	ldr	r2, [pc, #332]	; (81918 <ctrl_usart+0x278>)
   817cc:	4293      	cmp	r3, r2
   817ce:	d10c      	bne.n	817ea <ctrl_usart+0x14a>
						{
							sysclk_enable_peripheral_clock(ID_USART0);
   817d0:	200d      	movs	r0, #13
   817d2:	4b52      	ldr	r3, [pc, #328]	; (8191c <ctrl_usart+0x27c>)
   817d4:	4798      	blx	r3
							init_circ_buf(&tx0buf);
   817d6:	4852      	ldr	r0, [pc, #328]	; (81920 <ctrl_usart+0x280>)
   817d8:	4b52      	ldr	r3, [pc, #328]	; (81924 <ctrl_usart+0x284>)
   817da:	4798      	blx	r3
							init_circ_buf(&rx0buf);
   817dc:	4852      	ldr	r0, [pc, #328]	; (81928 <ctrl_usart+0x288>)
   817de:	4b51      	ldr	r3, [pc, #324]	; (81924 <ctrl_usart+0x284>)
   817e0:	4798      	blx	r3
							printf("Enabling USART0\n");
   817e2:	4852      	ldr	r0, [pc, #328]	; (8192c <ctrl_usart+0x28c>)
   817e4:	4b52      	ldr	r3, [pc, #328]	; (81930 <ctrl_usart+0x290>)
   817e6:	4798      	blx	r3
   817e8:	e01a      	b.n	81820 <ctrl_usart+0x180>
						} else if (usart == USART1)
   817ea:	687b      	ldr	r3, [r7, #4]
   817ec:	4a51      	ldr	r2, [pc, #324]	; (81934 <ctrl_usart+0x294>)
   817ee:	4293      	cmp	r3, r2
   817f0:	d109      	bne.n	81806 <ctrl_usart+0x166>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
   817f2:	200e      	movs	r0, #14
   817f4:	4b49      	ldr	r3, [pc, #292]	; (8191c <ctrl_usart+0x27c>)
   817f6:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   817f8:	484f      	ldr	r0, [pc, #316]	; (81938 <ctrl_usart+0x298>)
   817fa:	4b4a      	ldr	r3, [pc, #296]	; (81924 <ctrl_usart+0x284>)
   817fc:	4798      	blx	r3
							init_circ_buf(&rx1buf);
   817fe:	484f      	ldr	r0, [pc, #316]	; (8193c <ctrl_usart+0x29c>)
   81800:	4b48      	ldr	r3, [pc, #288]	; (81924 <ctrl_usart+0x284>)
   81802:	4798      	blx	r3
   81804:	e00c      	b.n	81820 <ctrl_usart+0x180>
						} else if (usart == USART2)
   81806:	687b      	ldr	r3, [r7, #4]
   81808:	4a4d      	ldr	r2, [pc, #308]	; (81940 <ctrl_usart+0x2a0>)
   8180a:	4293      	cmp	r3, r2
   8180c:	d108      	bne.n	81820 <ctrl_usart+0x180>
						{
							sysclk_enable_peripheral_clock(ID_USART2);
   8180e:	200f      	movs	r0, #15
   81810:	4b42      	ldr	r3, [pc, #264]	; (8191c <ctrl_usart+0x27c>)
   81812:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   81814:	484b      	ldr	r0, [pc, #300]	; (81944 <ctrl_usart+0x2a4>)
   81816:	4b43      	ldr	r3, [pc, #268]	; (81924 <ctrl_usart+0x284>)
   81818:	4798      	blx	r3
							init_circ_buf(&rx2buf);
   8181a:	484b      	ldr	r0, [pc, #300]	; (81948 <ctrl_usart+0x2a8>)
   8181c:	4b41      	ldr	r3, [pc, #260]	; (81924 <ctrl_usart+0x284>)
   8181e:	4798      	blx	r3
							sysclk_enable_peripheral_clock(ID_USART3);
							init_circ_buf(&tx3buf);
							init_circ_buf(&rx3buf);
						}
#endif
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
   81820:	4b4a      	ldr	r3, [pc, #296]	; (8194c <ctrl_usart+0x2ac>)
   81822:	4798      	blx	r3
   81824:	4602      	mov	r2, r0
   81826:	f107 030c 	add.w	r3, r7, #12
   8182a:	4619      	mov	r1, r3
   8182c:	6878      	ldr	r0, [r7, #4]
   8182e:	4b48      	ldr	r3, [pc, #288]	; (81950 <ctrl_usart+0x2b0>)
   81830:	4798      	blx	r3
					} else {
						printf("ERR: Invalid USART Configuration packet?\n");
					}
			}
			break;
   81832:	e104      	b.n	81a3e <ctrl_usart+0x39e>
						printf("ERR: Invalid USART Configuration packet?\n");
   81834:	4847      	ldr	r0, [pc, #284]	; (81954 <ctrl_usart+0x2b4>)
   81836:	4b3e      	ldr	r3, [pc, #248]	; (81930 <ctrl_usart+0x290>)
   81838:	4798      	blx	r3
			break;
   8183a:	e100      	b.n	81a3e <ctrl_usart+0x39e>
			
		case USART_WVREQ_ENABLE:
			if (directionIn == false){
   8183c:	78fb      	ldrb	r3, [r7, #3]
   8183e:	f083 0301 	eor.w	r3, r3, #1
   81842:	b2db      	uxtb	r3, r3
   81844:	2b00      	cmp	r3, #0
   81846:	f000 80fc 	beq.w	81a42 <ctrl_usart+0x3a2>
				usart_enable_rx(usart);
   8184a:	6878      	ldr	r0, [r7, #4]
   8184c:	4b42      	ldr	r3, [pc, #264]	; (81958 <ctrl_usart+0x2b8>)
   8184e:	4798      	blx	r3
				usart_enable_tx(usart);
   81850:	6878      	ldr	r0, [r7, #4]
   81852:	4b42      	ldr	r3, [pc, #264]	; (8195c <ctrl_usart+0x2bc>)
   81854:	4798      	blx	r3
				
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   81856:	2101      	movs	r1, #1
   81858:	6878      	ldr	r0, [r7, #4]
   8185a:	4b41      	ldr	r3, [pc, #260]	; (81960 <ctrl_usart+0x2c0>)
   8185c:	4798      	blx	r3
				
				/* Enable IO Pins */
				if (usart == USART0){
   8185e:	687b      	ldr	r3, [r7, #4]
   81860:	4a2d      	ldr	r2, [pc, #180]	; (81918 <ctrl_usart+0x278>)
   81862:	4293      	cmp	r3, r2
   81864:	d10c      	bne.n	81880 <ctrl_usart+0x1e0>
					usart0_enableIO();
   81866:	4b3f      	ldr	r3, [pc, #252]	; (81964 <ctrl_usart+0x2c4>)
   81868:	4798      	blx	r3
					irq_register_handler(USART0_IRQn, 5);
   8186a:	200d      	movs	r0, #13
   8186c:	4b3e      	ldr	r3, [pc, #248]	; (81968 <ctrl_usart+0x2c8>)
   8186e:	4798      	blx	r3
   81870:	2105      	movs	r1, #5
   81872:	200d      	movs	r0, #13
   81874:	4b3d      	ldr	r3, [pc, #244]	; (8196c <ctrl_usart+0x2cc>)
   81876:	4798      	blx	r3
   81878:	200d      	movs	r0, #13
   8187a:	4b3d      	ldr	r3, [pc, #244]	; (81970 <ctrl_usart+0x2d0>)
   8187c:	4798      	blx	r3
					usart3_enableIO();
					irq_register_handler(USART3_IRQn, 5);
				}
#endif
			}
			break;
   8187e:	e0e0      	b.n	81a42 <ctrl_usart+0x3a2>
				} else if (usart == USART1) {
   81880:	687b      	ldr	r3, [r7, #4]
   81882:	4a2c      	ldr	r2, [pc, #176]	; (81934 <ctrl_usart+0x294>)
   81884:	4293      	cmp	r3, r2
   81886:	d10a      	bne.n	8189e <ctrl_usart+0x1fe>
					irq_register_handler(USART1_IRQn, 5);
   81888:	200e      	movs	r0, #14
   8188a:	4b37      	ldr	r3, [pc, #220]	; (81968 <ctrl_usart+0x2c8>)
   8188c:	4798      	blx	r3
   8188e:	2105      	movs	r1, #5
   81890:	200e      	movs	r0, #14
   81892:	4b36      	ldr	r3, [pc, #216]	; (8196c <ctrl_usart+0x2cc>)
   81894:	4798      	blx	r3
   81896:	200e      	movs	r0, #14
   81898:	4b35      	ldr	r3, [pc, #212]	; (81970 <ctrl_usart+0x2d0>)
   8189a:	4798      	blx	r3
			break;
   8189c:	e0d1      	b.n	81a42 <ctrl_usart+0x3a2>
				} else if (usart == USART2) {
   8189e:	687b      	ldr	r3, [r7, #4]
   818a0:	4a27      	ldr	r2, [pc, #156]	; (81940 <ctrl_usart+0x2a0>)
   818a2:	4293      	cmp	r3, r2
   818a4:	f040 80cd 	bne.w	81a42 <ctrl_usart+0x3a2>
					irq_register_handler(USART2_IRQn, 5);
   818a8:	200f      	movs	r0, #15
   818aa:	4b2f      	ldr	r3, [pc, #188]	; (81968 <ctrl_usart+0x2c8>)
   818ac:	4798      	blx	r3
   818ae:	2105      	movs	r1, #5
   818b0:	200f      	movs	r0, #15
   818b2:	4b2e      	ldr	r3, [pc, #184]	; (8196c <ctrl_usart+0x2cc>)
   818b4:	4798      	blx	r3
   818b6:	200f      	movs	r0, #15
   818b8:	4b2d      	ldr	r3, [pc, #180]	; (81970 <ctrl_usart+0x2d0>)
   818ba:	4798      	blx	r3
			break;
   818bc:	e0c1      	b.n	81a42 <ctrl_usart+0x3a2>
						
		case USART_WVREQ_DISABLE:
			if (directionIn == false){
   818be:	78fb      	ldrb	r3, [r7, #3]
   818c0:	f083 0301 	eor.w	r3, r3, #1
   818c4:	b2db      	uxtb	r3, r3
   818c6:	2b00      	cmp	r3, #0
   818c8:	f000 80bd 	beq.w	81a46 <ctrl_usart+0x3a6>
				usart_disable_rx(usart);
   818cc:	6878      	ldr	r0, [r7, #4]
   818ce:	4b29      	ldr	r3, [pc, #164]	; (81974 <ctrl_usart+0x2d4>)
   818d0:	4798      	blx	r3
				usart_disable_rx(usart);
   818d2:	6878      	ldr	r0, [r7, #4]
   818d4:	4b27      	ldr	r3, [pc, #156]	; (81974 <ctrl_usart+0x2d4>)
   818d6:	4798      	blx	r3
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   818d8:	2103      	movs	r1, #3
   818da:	6878      	ldr	r0, [r7, #4]
   818dc:	4b26      	ldr	r3, [pc, #152]	; (81978 <ctrl_usart+0x2d8>)
   818de:	4798      	blx	r3
			}
		
			break;
   818e0:	e0b1      	b.n	81a46 <ctrl_usart+0x3a6>
			
		case USART_WVREQ_NUMWAIT:		
			if (directionIn){
   818e2:	78fb      	ldrb	r3, [r7, #3]
   818e4:	2b00      	cmp	r3, #0
   818e6:	f000 80b0 	beq.w	81a4a <ctrl_usart+0x3aa>
				if (udd_g_ctrlreq.req.wLength == 4){
   818ea:	4b0a      	ldr	r3, [pc, #40]	; (81914 <ctrl_usart+0x274>)
   818ec:	88db      	ldrh	r3, [r3, #6]
   818ee:	2b04      	cmp	r3, #4
   818f0:	f040 80ab 	bne.w	81a4a <ctrl_usart+0x3aa>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   818f4:	4b07      	ldr	r3, [pc, #28]	; (81914 <ctrl_usart+0x274>)
   818f6:	4a21      	ldr	r2, [pc, #132]	; (8197c <ctrl_usart+0x2dc>)
   818f8:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   818fa:	4b06      	ldr	r3, [pc, #24]	; (81914 <ctrl_usart+0x274>)
   818fc:	2204      	movs	r2, #4
   818fe:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   81900:	687b      	ldr	r3, [r7, #4]
   81902:	4a05      	ldr	r2, [pc, #20]	; (81918 <ctrl_usart+0x278>)
   81904:	4293      	cmp	r3, r2
   81906:	d13d      	bne.n	81984 <ctrl_usart+0x2e4>
						cnt = circ_buf_count(&rx0buf);
   81908:	4807      	ldr	r0, [pc, #28]	; (81928 <ctrl_usart+0x288>)
   8190a:	4b1d      	ldr	r3, [pc, #116]	; (81980 <ctrl_usart+0x2e0>)
   8190c:	4798      	blx	r3
   8190e:	4603      	mov	r3, r0
   81910:	60bb      	str	r3, [r7, #8]
   81912:	e04a      	b.n	819aa <ctrl_usart+0x30a>
   81914:	20001828 	.word	0x20001828
   81918:	40090000 	.word	0x40090000
   8191c:	00081665 	.word	0x00081665
   81920:	20001790 	.word	0x20001790
   81924:	00081f85 	.word	0x00081f85
   81928:	20001448 	.word	0x20001448
   8192c:	0008d9a8 	.word	0x0008d9a8
   81930:	00087039 	.word	0x00087039
   81934:	40094000 	.word	0x40094000
   81938:	20001560 	.word	0x20001560
   8193c:	20001704 	.word	0x20001704
   81940:	40098000 	.word	0x40098000
   81944:	200013bc 	.word	0x200013bc
   81948:	20001678 	.word	0x20001678
   8194c:	00081651 	.word	0x00081651
   81950:	00086985 	.word	0x00086985
   81954:	0008d9bc 	.word	0x0008d9bc
   81958:	00086b49 	.word	0x00086b49
   8195c:	00086b19 	.word	0x00086b19
   81960:	00086b91 	.word	0x00086b91
   81964:	00081681 	.word	0x00081681
   81968:	00081541 	.word	0x00081541
   8196c:	00081575 	.word	0x00081575
   81970:	00081511 	.word	0x00081511
   81974:	00086b61 	.word	0x00086b61
   81978:	00086bab 	.word	0x00086bab
   8197c:	200012a0 	.word	0x200012a0
   81980:	0008207d 	.word	0x0008207d
					} else if (usart == USART1){
   81984:	687b      	ldr	r3, [r7, #4]
   81986:	4a35      	ldr	r2, [pc, #212]	; (81a5c <ctrl_usart+0x3bc>)
   81988:	4293      	cmp	r3, r2
   8198a:	d105      	bne.n	81998 <ctrl_usart+0x2f8>
						cnt = circ_buf_count(&rx1buf);
   8198c:	4834      	ldr	r0, [pc, #208]	; (81a60 <ctrl_usart+0x3c0>)
   8198e:	4b35      	ldr	r3, [pc, #212]	; (81a64 <ctrl_usart+0x3c4>)
   81990:	4798      	blx	r3
   81992:	4603      	mov	r3, r0
   81994:	60bb      	str	r3, [r7, #8]
   81996:	e008      	b.n	819aa <ctrl_usart+0x30a>
					} else if (usart == USART2){
   81998:	687b      	ldr	r3, [r7, #4]
   8199a:	4a33      	ldr	r2, [pc, #204]	; (81a68 <ctrl_usart+0x3c8>)
   8199c:	4293      	cmp	r3, r2
   8199e:	d104      	bne.n	819aa <ctrl_usart+0x30a>
						cnt = circ_buf_count(&rx2buf);
   819a0:	4832      	ldr	r0, [pc, #200]	; (81a6c <ctrl_usart+0x3cc>)
   819a2:	4b30      	ldr	r3, [pc, #192]	; (81a64 <ctrl_usart+0x3c4>)
   819a4:	4798      	blx	r3
   819a6:	4603      	mov	r3, r0
   819a8:	60bb      	str	r3, [r7, #8]
					else if (usart == USART3){
						cnt = circ_buf_count(&rx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
   819aa:	f107 0308 	add.w	r3, r7, #8
   819ae:	781a      	ldrb	r2, [r3, #0]
   819b0:	4b2f      	ldr	r3, [pc, #188]	; (81a70 <ctrl_usart+0x3d0>)
   819b2:	701a      	strb	r2, [r3, #0]
   819b4:	7a7a      	ldrb	r2, [r7, #9]
   819b6:	4b2e      	ldr	r3, [pc, #184]	; (81a70 <ctrl_usart+0x3d0>)
   819b8:	705a      	strb	r2, [r3, #1]
   819ba:	7aba      	ldrb	r2, [r7, #10]
   819bc:	4b2c      	ldr	r3, [pc, #176]	; (81a70 <ctrl_usart+0x3d0>)
   819be:	709a      	strb	r2, [r3, #2]
   819c0:	7afa      	ldrb	r2, [r7, #11]
   819c2:	4b2b      	ldr	r3, [pc, #172]	; (81a70 <ctrl_usart+0x3d0>)
   819c4:	70da      	strb	r2, [r3, #3]
			
					return true;
   819c6:	2301      	movs	r3, #1
   819c8:	e043      	b.n	81a52 <ctrl_usart+0x3b2>
				}
			}
			break;		
		case USART_WVREQ_NUMWAIT_TX:		
			if (directionIn){
   819ca:	78fb      	ldrb	r3, [r7, #3]
   819cc:	2b00      	cmp	r3, #0
   819ce:	d03e      	beq.n	81a4e <ctrl_usart+0x3ae>
				if (udd_g_ctrlreq.req.wLength == 4){
   819d0:	4b28      	ldr	r3, [pc, #160]	; (81a74 <ctrl_usart+0x3d4>)
   819d2:	88db      	ldrh	r3, [r3, #6]
   819d4:	2b04      	cmp	r3, #4
   819d6:	d13a      	bne.n	81a4e <ctrl_usart+0x3ae>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   819d8:	4b26      	ldr	r3, [pc, #152]	; (81a74 <ctrl_usart+0x3d4>)
   819da:	4a25      	ldr	r2, [pc, #148]	; (81a70 <ctrl_usart+0x3d0>)
   819dc:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   819de:	4b25      	ldr	r3, [pc, #148]	; (81a74 <ctrl_usart+0x3d4>)
   819e0:	2204      	movs	r2, #4
   819e2:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   819e4:	687b      	ldr	r3, [r7, #4]
   819e6:	4a24      	ldr	r2, [pc, #144]	; (81a78 <ctrl_usart+0x3d8>)
   819e8:	4293      	cmp	r3, r2
   819ea:	d105      	bne.n	819f8 <ctrl_usart+0x358>
						cnt = circ_buf_count(&tx0buf);
   819ec:	4823      	ldr	r0, [pc, #140]	; (81a7c <ctrl_usart+0x3dc>)
   819ee:	4b1d      	ldr	r3, [pc, #116]	; (81a64 <ctrl_usart+0x3c4>)
   819f0:	4798      	blx	r3
   819f2:	4603      	mov	r3, r0
   819f4:	60bb      	str	r3, [r7, #8]
   819f6:	e012      	b.n	81a1e <ctrl_usart+0x37e>
					} else if (usart == USART1){
   819f8:	687b      	ldr	r3, [r7, #4]
   819fa:	4a18      	ldr	r2, [pc, #96]	; (81a5c <ctrl_usart+0x3bc>)
   819fc:	4293      	cmp	r3, r2
   819fe:	d105      	bne.n	81a0c <ctrl_usart+0x36c>
						cnt = circ_buf_count(&tx1buf);
   81a00:	481f      	ldr	r0, [pc, #124]	; (81a80 <ctrl_usart+0x3e0>)
   81a02:	4b18      	ldr	r3, [pc, #96]	; (81a64 <ctrl_usart+0x3c4>)
   81a04:	4798      	blx	r3
   81a06:	4603      	mov	r3, r0
   81a08:	60bb      	str	r3, [r7, #8]
   81a0a:	e008      	b.n	81a1e <ctrl_usart+0x37e>
					} else if (usart == USART2){
   81a0c:	687b      	ldr	r3, [r7, #4]
   81a0e:	4a16      	ldr	r2, [pc, #88]	; (81a68 <ctrl_usart+0x3c8>)
   81a10:	4293      	cmp	r3, r2
   81a12:	d104      	bne.n	81a1e <ctrl_usart+0x37e>
						cnt = circ_buf_count(&tx2buf);
   81a14:	481b      	ldr	r0, [pc, #108]	; (81a84 <ctrl_usart+0x3e4>)
   81a16:	4b13      	ldr	r3, [pc, #76]	; (81a64 <ctrl_usart+0x3c4>)
   81a18:	4798      	blx	r3
   81a1a:	4603      	mov	r3, r0
   81a1c:	60bb      	str	r3, [r7, #8]
					else if (usart == USART3){
						cnt = circ_buf_count(&tx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
   81a1e:	f107 0308 	add.w	r3, r7, #8
   81a22:	781a      	ldrb	r2, [r3, #0]
   81a24:	4b12      	ldr	r3, [pc, #72]	; (81a70 <ctrl_usart+0x3d0>)
   81a26:	701a      	strb	r2, [r3, #0]
   81a28:	7a7a      	ldrb	r2, [r7, #9]
   81a2a:	4b11      	ldr	r3, [pc, #68]	; (81a70 <ctrl_usart+0x3d0>)
   81a2c:	705a      	strb	r2, [r3, #1]
   81a2e:	7aba      	ldrb	r2, [r7, #10]
   81a30:	4b0f      	ldr	r3, [pc, #60]	; (81a70 <ctrl_usart+0x3d0>)
   81a32:	709a      	strb	r2, [r3, #2]
   81a34:	7afa      	ldrb	r2, [r7, #11]
   81a36:	4b0e      	ldr	r3, [pc, #56]	; (81a70 <ctrl_usart+0x3d0>)
   81a38:	70da      	strb	r2, [r3, #3]
			
					return true;
   81a3a:	2301      	movs	r3, #1
   81a3c:	e009      	b.n	81a52 <ctrl_usart+0x3b2>
			break;
   81a3e:	bf00      	nop
   81a40:	e006      	b.n	81a50 <ctrl_usart+0x3b0>
			break;
   81a42:	bf00      	nop
   81a44:	e004      	b.n	81a50 <ctrl_usart+0x3b0>
			break;
   81a46:	bf00      	nop
   81a48:	e002      	b.n	81a50 <ctrl_usart+0x3b0>
			break;		
   81a4a:	bf00      	nop
   81a4c:	e000      	b.n	81a50 <ctrl_usart+0x3b0>
				}
			}
			break;		
   81a4e:	bf00      	nop
	}
	
	return false;
   81a50:	2300      	movs	r3, #0
}
   81a52:	4618      	mov	r0, r3
   81a54:	3728      	adds	r7, #40	; 0x28
   81a56:	46bd      	mov	sp, r7
   81a58:	bd80      	pop	{r7, pc}
   81a5a:	bf00      	nop
   81a5c:	40094000 	.word	0x40094000
   81a60:	20001704 	.word	0x20001704
   81a64:	0008207d 	.word	0x0008207d
   81a68:	40098000 	.word	0x40098000
   81a6c:	20001678 	.word	0x20001678
   81a70:	200012a0 	.word	0x200012a0
   81a74:	20001828 	.word	0x20001828
   81a78:	40090000 	.word	0x40090000
   81a7c:	20001790 	.word	0x20001790
   81a80:	20001560 	.word	0x20001560
   81a84:	200013bc 	.word	0x200013bc

00081a88 <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   81a88:	b580      	push	{r7, lr}
   81a8a:	b084      	sub	sp, #16
   81a8c:	af00      	add	r7, sp, #0
   81a8e:	60f8      	str	r0, [r7, #12]
   81a90:	60b9      	str	r1, [r7, #8]
   81a92:	4613      	mov	r3, r2
   81a94:	71fb      	strb	r3, [r7, #7]
	if (txbuf == NULL){
   81a96:	68bb      	ldr	r3, [r7, #8]
   81a98:	2b00      	cmp	r3, #0
   81a9a:	d113      	bne.n	81ac4 <usart_driver_putchar+0x3c>
		if (usart == USART0) txbuf = &tx0buf;
   81a9c:	68fb      	ldr	r3, [r7, #12]
   81a9e:	4a19      	ldr	r2, [pc, #100]	; (81b04 <usart_driver_putchar+0x7c>)
   81aa0:	4293      	cmp	r3, r2
   81aa2:	d102      	bne.n	81aaa <usart_driver_putchar+0x22>
   81aa4:	4b18      	ldr	r3, [pc, #96]	; (81b08 <usart_driver_putchar+0x80>)
   81aa6:	60bb      	str	r3, [r7, #8]
   81aa8:	e00c      	b.n	81ac4 <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   81aaa:	68fb      	ldr	r3, [r7, #12]
   81aac:	4a17      	ldr	r2, [pc, #92]	; (81b0c <usart_driver_putchar+0x84>)
   81aae:	4293      	cmp	r3, r2
   81ab0:	d102      	bne.n	81ab8 <usart_driver_putchar+0x30>
   81ab2:	4b17      	ldr	r3, [pc, #92]	; (81b10 <usart_driver_putchar+0x88>)
   81ab4:	60bb      	str	r3, [r7, #8]
   81ab6:	e005      	b.n	81ac4 <usart_driver_putchar+0x3c>
		else if (usart == USART2) txbuf = &tx2buf;
   81ab8:	68fb      	ldr	r3, [r7, #12]
   81aba:	4a16      	ldr	r2, [pc, #88]	; (81b14 <usart_driver_putchar+0x8c>)
   81abc:	4293      	cmp	r3, r2
   81abe:	d11c      	bne.n	81afa <usart_driver_putchar+0x72>
   81ac0:	4b15      	ldr	r3, [pc, #84]	; (81b18 <usart_driver_putchar+0x90>)
   81ac2:	60bb      	str	r3, [r7, #8]
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
   81ac4:	79fb      	ldrb	r3, [r7, #7]
   81ac6:	2200      	movs	r2, #0
   81ac8:	4619      	mov	r1, r3
   81aca:	68b8      	ldr	r0, [r7, #8]
   81acc:	4b13      	ldr	r3, [pc, #76]	; (81b1c <usart_driver_putchar+0x94>)
   81ace:	4798      	blx	r3

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
   81ad0:	68f8      	ldr	r0, [r7, #12]
   81ad2:	4b13      	ldr	r3, [pc, #76]	; (81b20 <usart_driver_putchar+0x98>)
   81ad4:	4798      	blx	r3
   81ad6:	4603      	mov	r3, r0
   81ad8:	f003 0302 	and.w	r3, r3, #2
   81adc:	2b00      	cmp	r3, #0
   81ade:	d10d      	bne.n	81afc <usart_driver_putchar+0x74>
		usart_putchar(usart, get_from_circ_buf(txbuf));
   81ae0:	68b8      	ldr	r0, [r7, #8]
   81ae2:	4b10      	ldr	r3, [pc, #64]	; (81b24 <usart_driver_putchar+0x9c>)
   81ae4:	4798      	blx	r3
   81ae6:	4603      	mov	r3, r0
   81ae8:	4619      	mov	r1, r3
   81aea:	68f8      	ldr	r0, [r7, #12]
   81aec:	4b0e      	ldr	r3, [pc, #56]	; (81b28 <usart_driver_putchar+0xa0>)
   81aee:	4798      	blx	r3
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   81af0:	2102      	movs	r1, #2
   81af2:	68f8      	ldr	r0, [r7, #12]
   81af4:	4b0d      	ldr	r3, [pc, #52]	; (81b2c <usart_driver_putchar+0xa4>)
   81af6:	4798      	blx	r3
   81af8:	e000      	b.n	81afc <usart_driver_putchar+0x74>
		else return;
   81afa:	bf00      	nop
	}
}
   81afc:	3710      	adds	r7, #16
   81afe:	46bd      	mov	sp, r7
   81b00:	bd80      	pop	{r7, pc}
   81b02:	bf00      	nop
   81b04:	40090000 	.word	0x40090000
   81b08:	20001790 	.word	0x20001790
   81b0c:	40094000 	.word	0x40094000
   81b10:	20001560 	.word	0x20001560
   81b14:	40098000 	.word	0x40098000
   81b18:	200013bc 	.word	0x200013bc
   81b1c:	00081fa7 	.word	0x00081fa7
   81b20:	00086bc5 	.word	0x00086bc5
   81b24:	0008200b 	.word	0x0008200b
   81b28:	00086c3f 	.word	0x00086c3f
   81b2c:	00086b91 	.word	0x00086b91

00081b30 <usart_driver_getchar>:

uint8_t usart_driver_getchar(Usart * usart)
{
   81b30:	b580      	push	{r7, lr}
   81b32:	b084      	sub	sp, #16
   81b34:	af00      	add	r7, sp, #0
   81b36:	6078      	str	r0, [r7, #4]
	tcirc_buf * rxbuf = NULL;	 
   81b38:	2300      	movs	r3, #0
   81b3a:	60fb      	str	r3, [r7, #12]
	if (rxbuf == NULL){
   81b3c:	68fb      	ldr	r3, [r7, #12]
   81b3e:	2b00      	cmp	r3, #0
   81b40:	d116      	bne.n	81b70 <usart_driver_getchar+0x40>
			if (usart == USART0) rxbuf = &rx0buf;
   81b42:	687b      	ldr	r3, [r7, #4]
   81b44:	4a0e      	ldr	r2, [pc, #56]	; (81b80 <usart_driver_getchar+0x50>)
   81b46:	4293      	cmp	r3, r2
   81b48:	d102      	bne.n	81b50 <usart_driver_getchar+0x20>
   81b4a:	4b0e      	ldr	r3, [pc, #56]	; (81b84 <usart_driver_getchar+0x54>)
   81b4c:	60fb      	str	r3, [r7, #12]
   81b4e:	e00f      	b.n	81b70 <usart_driver_getchar+0x40>
			else if (usart == USART1) rxbuf = &rx1buf;
   81b50:	687b      	ldr	r3, [r7, #4]
   81b52:	4a0d      	ldr	r2, [pc, #52]	; (81b88 <usart_driver_getchar+0x58>)
   81b54:	4293      	cmp	r3, r2
   81b56:	d102      	bne.n	81b5e <usart_driver_getchar+0x2e>
   81b58:	4b0c      	ldr	r3, [pc, #48]	; (81b8c <usart_driver_getchar+0x5c>)
   81b5a:	60fb      	str	r3, [r7, #12]
   81b5c:	e008      	b.n	81b70 <usart_driver_getchar+0x40>
			else if (usart == USART2) rxbuf = &rx2buf;
   81b5e:	687b      	ldr	r3, [r7, #4]
   81b60:	4a0b      	ldr	r2, [pc, #44]	; (81b90 <usart_driver_getchar+0x60>)
   81b62:	4293      	cmp	r3, r2
   81b64:	d102      	bne.n	81b6c <usart_driver_getchar+0x3c>
   81b66:	4b0b      	ldr	r3, [pc, #44]	; (81b94 <usart_driver_getchar+0x64>)
   81b68:	60fb      	str	r3, [r7, #12]
   81b6a:	e001      	b.n	81b70 <usart_driver_getchar+0x40>
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
   81b6c:	23ff      	movs	r3, #255	; 0xff
   81b6e:	e003      	b.n	81b78 <usart_driver_getchar+0x48>
	}
	return get_from_circ_buf(rxbuf);
   81b70:	68f8      	ldr	r0, [r7, #12]
   81b72:	4b09      	ldr	r3, [pc, #36]	; (81b98 <usart_driver_getchar+0x68>)
   81b74:	4798      	blx	r3
   81b76:	4603      	mov	r3, r0
}
   81b78:	4618      	mov	r0, r3
   81b7a:	3710      	adds	r7, #16
   81b7c:	46bd      	mov	sp, r7
   81b7e:	bd80      	pop	{r7, pc}
   81b80:	40090000 	.word	0x40090000
   81b84:	20001448 	.word	0x20001448
   81b88:	40094000 	.word	0x40094000
   81b8c:	20001704 	.word	0x20001704
   81b90:	40098000 	.word	0x40098000
   81b94:	20001678 	.word	0x20001678
   81b98:	0008200b 	.word	0x0008200b

00081b9c <generic_isr>:

void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   81b9c:	b580      	push	{r7, lr}
   81b9e:	b086      	sub	sp, #24
   81ba0:	af00      	add	r7, sp, #0
   81ba2:	60f8      	str	r0, [r7, #12]
   81ba4:	60b9      	str	r1, [r7, #8]
   81ba6:	607a      	str	r2, [r7, #4]
	uint32_t status;
	status = usart_get_status(usart);
   81ba8:	68f8      	ldr	r0, [r7, #12]
   81baa:	4b18      	ldr	r3, [pc, #96]	; (81c0c <generic_isr+0x70>)
   81bac:	4798      	blx	r3
   81bae:	6178      	str	r0, [r7, #20]
	if (status & US_CSR_RXRDY){
   81bb0:	697b      	ldr	r3, [r7, #20]
   81bb2:	f003 0301 	and.w	r3, r3, #1
   81bb6:	2b00      	cmp	r3, #0
   81bb8:	d00b      	beq.n	81bd2 <generic_isr+0x36>
		uint32_t temp;
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   81bba:	68fb      	ldr	r3, [r7, #12]
   81bbc:	699b      	ldr	r3, [r3, #24]
   81bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81bc2:	613b      	str	r3, [r7, #16]
		add_to_circ_buf(rxbuf, temp, false);
   81bc4:	693b      	ldr	r3, [r7, #16]
   81bc6:	b2db      	uxtb	r3, r3
   81bc8:	2200      	movs	r2, #0
   81bca:	4619      	mov	r1, r3
   81bcc:	68b8      	ldr	r0, [r7, #8]
   81bce:	4b10      	ldr	r3, [pc, #64]	; (81c10 <generic_isr+0x74>)
   81bd0:	4798      	blx	r3
	}
	
	if (status & US_CSR_TXRDY){
   81bd2:	697b      	ldr	r3, [r7, #20]
   81bd4:	f003 0302 	and.w	r3, r3, #2
   81bd8:	2b00      	cmp	r3, #0
   81bda:	d012      	beq.n	81c02 <generic_isr+0x66>
		if (circ_buf_has_char(txbuf)){
   81bdc:	6878      	ldr	r0, [r7, #4]
   81bde:	4b0d      	ldr	r3, [pc, #52]	; (81c14 <generic_isr+0x78>)
   81be0:	4798      	blx	r3
   81be2:	4603      	mov	r3, r0
   81be4:	2b00      	cmp	r3, #0
   81be6:	d008      	beq.n	81bfa <generic_isr+0x5e>
			//Still data to send
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   81be8:	6878      	ldr	r0, [r7, #4]
   81bea:	4b0b      	ldr	r3, [pc, #44]	; (81c18 <generic_isr+0x7c>)
   81bec:	4798      	blx	r3
   81bee:	4603      	mov	r3, r0
   81bf0:	4619      	mov	r1, r3
   81bf2:	68f8      	ldr	r0, [r7, #12]
   81bf4:	4b09      	ldr	r3, [pc, #36]	; (81c1c <generic_isr+0x80>)
   81bf6:	4798      	blx	r3
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
		}
	}
}
   81bf8:	e003      	b.n	81c02 <generic_isr+0x66>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   81bfa:	2102      	movs	r1, #2
   81bfc:	68f8      	ldr	r0, [r7, #12]
   81bfe:	4b08      	ldr	r3, [pc, #32]	; (81c20 <generic_isr+0x84>)
   81c00:	4798      	blx	r3
}
   81c02:	bf00      	nop
   81c04:	3718      	adds	r7, #24
   81c06:	46bd      	mov	sp, r7
   81c08:	bd80      	pop	{r7, pc}
   81c0a:	bf00      	nop
   81c0c:	00086bdb 	.word	0x00086bdb
   81c10:	00081fa7 	.word	0x00081fa7
   81c14:	00082055 	.word	0x00082055
   81c18:	0008200b 	.word	0x0008200b
   81c1c:	00086c3f 	.word	0x00086c3f
   81c20:	00086bab 	.word	0x00086bab

00081c24 <USART0_Handler>:

ISR(USART0_Handler)
{
   81c24:	b580      	push	{r7, lr}
   81c26:	af00      	add	r7, sp, #0
	generic_isr(USART0, &rx0buf, &tx0buf);
   81c28:	4a03      	ldr	r2, [pc, #12]	; (81c38 <USART0_Handler+0x14>)
   81c2a:	4904      	ldr	r1, [pc, #16]	; (81c3c <USART0_Handler+0x18>)
   81c2c:	4804      	ldr	r0, [pc, #16]	; (81c40 <USART0_Handler+0x1c>)
   81c2e:	4b05      	ldr	r3, [pc, #20]	; (81c44 <USART0_Handler+0x20>)
   81c30:	4798      	blx	r3
}
   81c32:	bf00      	nop
   81c34:	bd80      	pop	{r7, pc}
   81c36:	bf00      	nop
   81c38:	20001790 	.word	0x20001790
   81c3c:	20001448 	.word	0x20001448
   81c40:	40090000 	.word	0x40090000
   81c44:	00081b9d 	.word	0x00081b9d

00081c48 <USART1_Handler>:

ISR(USART1_Handler)
{
   81c48:	b580      	push	{r7, lr}
   81c4a:	af00      	add	r7, sp, #0
	generic_isr(USART1, &rx1buf, &tx1buf);
   81c4c:	4a03      	ldr	r2, [pc, #12]	; (81c5c <USART1_Handler+0x14>)
   81c4e:	4904      	ldr	r1, [pc, #16]	; (81c60 <USART1_Handler+0x18>)
   81c50:	4804      	ldr	r0, [pc, #16]	; (81c64 <USART1_Handler+0x1c>)
   81c52:	4b05      	ldr	r3, [pc, #20]	; (81c68 <USART1_Handler+0x20>)
   81c54:	4798      	blx	r3
}
   81c56:	bf00      	nop
   81c58:	bd80      	pop	{r7, pc}
   81c5a:	bf00      	nop
   81c5c:	20001560 	.word	0x20001560
   81c60:	20001704 	.word	0x20001704
   81c64:	40094000 	.word	0x40094000
   81c68:	00081b9d 	.word	0x00081b9d

00081c6c <USART2_Handler>:

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
   81c6c:	b580      	push	{r7, lr}
   81c6e:	af00      	add	r7, sp, #0
	generic_isr(USART2, &rx2buf, &tx2buf);
   81c70:	4a03      	ldr	r2, [pc, #12]	; (81c80 <USART2_Handler+0x14>)
   81c72:	4904      	ldr	r1, [pc, #16]	; (81c84 <USART2_Handler+0x18>)
   81c74:	4804      	ldr	r0, [pc, #16]	; (81c88 <USART2_Handler+0x1c>)
   81c76:	4b05      	ldr	r3, [pc, #20]	; (81c8c <USART2_Handler+0x20>)
   81c78:	4798      	blx	r3
}
   81c7a:	bf00      	nop
   81c7c:	bd80      	pop	{r7, pc}
   81c7e:	bf00      	nop
   81c80:	200013bc 	.word	0x200013bc
   81c84:	20001678 	.word	0x20001678
   81c88:	40098000 	.word	0x40098000
   81c8c:	00081b9d 	.word	0x00081b9d

00081c90 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   81c90:	b480      	push	{r7}
   81c92:	b083      	sub	sp, #12
   81c94:	af00      	add	r7, sp, #0
   81c96:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   81c98:	687b      	ldr	r3, [r7, #4]
   81c9a:	2201      	movs	r2, #1
   81c9c:	601a      	str	r2, [r3, #0]
}
   81c9e:	bf00      	nop
   81ca0:	370c      	adds	r7, #12
   81ca2:	46bd      	mov	sp, r7
   81ca4:	bc80      	pop	{r7}
   81ca6:	4770      	bx	lr

00081ca8 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
   81ca8:	b480      	push	{r7}
   81caa:	b083      	sub	sp, #12
   81cac:	af00      	add	r7, sp, #0
   81cae:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   81cb0:	687b      	ldr	r3, [r7, #4]
   81cb2:	685b      	ldr	r3, [r3, #4]
   81cb4:	f043 0201 	orr.w	r2, r3, #1
   81cb8:	687b      	ldr	r3, [r7, #4]
   81cba:	605a      	str	r2, [r3, #4]
}
   81cbc:	bf00      	nop
   81cbe:	370c      	adds	r7, #12
   81cc0:	46bd      	mov	sp, r7
   81cc2:	bc80      	pop	{r7}
   81cc4:	4770      	bx	lr

00081cc6 <spi_put>:
 * \param p_spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
   81cc6:	b480      	push	{r7}
   81cc8:	b083      	sub	sp, #12
   81cca:	af00      	add	r7, sp, #0
   81ccc:	6078      	str	r0, [r7, #4]
   81cce:	460b      	mov	r3, r1
   81cd0:	807b      	strh	r3, [r7, #2]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   81cd2:	887a      	ldrh	r2, [r7, #2]
   81cd4:	687b      	ldr	r3, [r7, #4]
   81cd6:	60da      	str	r2, [r3, #12]
}
   81cd8:	bf00      	nop
   81cda:	370c      	adds	r7, #12
   81cdc:	46bd      	mov	sp, r7
   81cde:	bc80      	pop	{r7}
   81ce0:	4770      	bx	lr

00081ce2 <spi_get>:
 * \param p_spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
   81ce2:	b480      	push	{r7}
   81ce4:	b083      	sub	sp, #12
   81ce6:	af00      	add	r7, sp, #0
   81ce8:	6078      	str	r0, [r7, #4]
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
   81cea:	687b      	ldr	r3, [r7, #4]
   81cec:	689b      	ldr	r3, [r3, #8]
   81cee:	b29b      	uxth	r3, r3
}
   81cf0:	4618      	mov	r0, r3
   81cf2:	370c      	adds	r7, #12
   81cf4:	46bd      	mov	sp, r7
   81cf6:	bc80      	pop	{r7}
   81cf8:	4770      	bx	lr

00081cfa <spi_is_tx_empty>:
 *
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
   81cfa:	b480      	push	{r7}
   81cfc:	b083      	sub	sp, #12
   81cfe:	af00      	add	r7, sp, #0
   81d00:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   81d02:	687b      	ldr	r3, [r7, #4]
   81d04:	691b      	ldr	r3, [r3, #16]
   81d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
   81d0a:	2b00      	cmp	r3, #0
   81d0c:	d001      	beq.n	81d12 <spi_is_tx_empty+0x18>
		return 1;
   81d0e:	2301      	movs	r3, #1
   81d10:	e000      	b.n	81d14 <spi_is_tx_empty+0x1a>
	} else {
		return 0;
   81d12:	2300      	movs	r3, #0
	}
}
   81d14:	4618      	mov	r0, r3
   81d16:	370c      	adds	r7, #12
   81d18:	46bd      	mov	sp, r7
   81d1a:	bc80      	pop	{r7}
   81d1c:	4770      	bx	lr
   81d1e:	0000      	movs	r0, r0

00081d20 <spi_driver_enable>:

#define ADC_SPI_CS PIO_PA3_IDX
#define ADC_RESET PIO_PA4_IDX

static inline void spi_driver_enable(void)
{
   81d20:	b580      	push	{r7, lr}
   81d22:	b082      	sub	sp, #8
   81d24:	af00      	add	r7, sp, #0
    pmc_enable_periph_clk(ID_SPI);
   81d26:	2014      	movs	r0, #20
   81d28:	4b18      	ldr	r3, [pc, #96]	; (81d8c <spi_driver_enable+0x6c>)
   81d2a:	4798      	blx	r3
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   81d2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81d30:	200d      	movs	r0, #13
   81d32:	4b17      	ldr	r3, [pc, #92]	; (81d90 <spi_driver_enable+0x70>)
   81d34:	4798      	blx	r3
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   81d36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81d3a:	200e      	movs	r0, #14
   81d3c:	4b14      	ldr	r3, [pc, #80]	; (81d90 <spi_driver_enable+0x70>)
   81d3e:	4798      	blx	r3
    gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   81d40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81d44:	200f      	movs	r0, #15
   81d46:	4b12      	ldr	r3, [pc, #72]	; (81d90 <spi_driver_enable+0x70>)
   81d48:	4798      	blx	r3
    gpio_configure_pin(ADC_SPI_CS, SPI_CS_FLAGS);
   81d4a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81d4e:	2003      	movs	r0, #3
   81d50:	4b0f      	ldr	r3, [pc, #60]	; (81d90 <spi_driver_enable+0x70>)
   81d52:	4798      	blx	r3
    gpio_set_pin_high(ADC_SPI_CS);
   81d54:	2003      	movs	r0, #3
   81d56:	4b0f      	ldr	r3, [pc, #60]	; (81d94 <spi_driver_enable+0x74>)
   81d58:	4798      	blx	r3
    gpio_configure_pin(ADC_RESET, SPI_CS_FLAGS);
   81d5a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81d5e:	2004      	movs	r0, #4
   81d60:	4b0b      	ldr	r3, [pc, #44]	; (81d90 <spi_driver_enable+0x70>)
   81d62:	4798      	blx	r3
    gpio_set_pin_high(ADC_RESET);
   81d64:	2004      	movs	r0, #4
   81d66:	4b0b      	ldr	r3, [pc, #44]	; (81d94 <spi_driver_enable+0x74>)
   81d68:	4798      	blx	r3
    for (volatile uint32_t i = 0; i < 500; i++);
   81d6a:	2300      	movs	r3, #0
   81d6c:	607b      	str	r3, [r7, #4]
   81d6e:	e002      	b.n	81d76 <spi_driver_enable+0x56>
   81d70:	687b      	ldr	r3, [r7, #4]
   81d72:	3301      	adds	r3, #1
   81d74:	607b      	str	r3, [r7, #4]
   81d76:	687b      	ldr	r3, [r7, #4]
   81d78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   81d7c:	d3f8      	bcc.n	81d70 <spi_driver_enable+0x50>
    gpio_set_pin_low(ADC_RESET);
   81d7e:	2004      	movs	r0, #4
   81d80:	4b05      	ldr	r3, [pc, #20]	; (81d98 <spi_driver_enable+0x78>)
   81d82:	4798      	blx	r3
}
   81d84:	bf00      	nop
   81d86:	3708      	adds	r7, #8
   81d88:	46bd      	mov	sp, r7
   81d8a:	bd80      	pop	{r7, pc}
   81d8c:	00082d15 	.word	0x00082d15
   81d90:	000826b1 	.word	0x000826b1
   81d94:	00082651 	.word	0x00082651
   81d98:	00082681 	.word	0x00082681

00081d9c <ctrl_spi>:

bool ctrl_spi(Spi * spi, bool directionIn)
{
   81d9c:	b580      	push	{r7, lr}
   81d9e:	b084      	sub	sp, #16
   81da0:	af00      	add	r7, sp, #0
   81da2:	6078      	str	r0, [r7, #4]
   81da4:	460b      	mov	r3, r1
   81da6:	70fb      	strb	r3, [r7, #3]
    uint32_t baud;
    spi_driver_enable();
   81da8:	4b24      	ldr	r3, [pc, #144]	; (81e3c <ctrl_spi+0xa0>)
   81daa:	4798      	blx	r3

    switch(udd_g_ctrlreq.req.wValue & 0xFF) {
   81dac:	4b24      	ldr	r3, [pc, #144]	; (81e40 <ctrl_spi+0xa4>)
   81dae:	885b      	ldrh	r3, [r3, #2]
   81db0:	b2db      	uxtb	r3, r3
   81db2:	2b10      	cmp	r3, #16
   81db4:	d124      	bne.n	81e00 <ctrl_spi+0x64>
        case SPI_WVREQ_INIT:
            if (directionIn) {
   81db6:	78fb      	ldrb	r3, [r7, #3]
   81db8:	2b00      	cmp	r3, #0
   81dba:	d005      	beq.n	81dc8 <ctrl_spi+0x2c>
                if (udd_g_ctrlreq.req.wLength == 4) {
   81dbc:	4b20      	ldr	r3, [pc, #128]	; (81e40 <ctrl_spi+0xa4>)
   81dbe:	88db      	ldrh	r3, [r3, #6]
   81dc0:	2b04      	cmp	r3, #4
   81dc2:	d11d      	bne.n	81e00 <ctrl_spi+0x64>
                    return true;
   81dc4:	2301      	movs	r3, #1
   81dc6:	e035      	b.n	81e34 <ctrl_spi+0x98>
                }
            } else {
                if (udd_g_ctrlreq.req.wLength == 4) {
   81dc8:	4b1d      	ldr	r3, [pc, #116]	; (81e40 <ctrl_spi+0xa4>)
   81dca:	88db      	ldrh	r3, [r3, #6]
   81dcc:	2b04      	cmp	r3, #4
   81dce:	d117      	bne.n	81e00 <ctrl_spi+0x64>
                    buf2word(baud, udd_g_ctrlreq.payload);
   81dd0:	4b1b      	ldr	r3, [pc, #108]	; (81e40 <ctrl_spi+0xa4>)
   81dd2:	689b      	ldr	r3, [r3, #8]
   81dd4:	681b      	ldr	r3, [r3, #0]
   81dd6:	60fb      	str	r3, [r7, #12]
                    int16_t div = spi_calc_baudrate_div(960E3, 96E6);
   81dd8:	491a      	ldr	r1, [pc, #104]	; (81e44 <ctrl_spi+0xa8>)
   81dda:	481b      	ldr	r0, [pc, #108]	; (81e48 <ctrl_spi+0xac>)
   81ddc:	4b1b      	ldr	r3, [pc, #108]	; (81e4c <ctrl_spi+0xb0>)
   81dde:	4798      	blx	r3
   81de0:	4603      	mov	r3, r0
   81de2:	817b      	strh	r3, [r7, #10]
                    if (div == -1) {
   81de4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   81de8:	f1b3 3fff 	cmp.w	r3, #4294967295
   81dec:	d101      	bne.n	81df2 <ctrl_spi+0x56>
                        return false;
   81dee:	2300      	movs	r3, #0
   81df0:	e020      	b.n	81e34 <ctrl_spi+0x98>
                    }
                    spi_set_baudrate_div(spi, 0, div);
   81df2:	897b      	ldrh	r3, [r7, #10]
   81df4:	b2db      	uxtb	r3, r3
   81df6:	461a      	mov	r2, r3
   81df8:	2100      	movs	r1, #0
   81dfa:	6878      	ldr	r0, [r7, #4]
   81dfc:	4b14      	ldr	r3, [pc, #80]	; (81e50 <ctrl_spi+0xb4>)
   81dfe:	4798      	blx	r3
                }
            }
    }

    spi_set_master_mode(spi);
   81e00:	6878      	ldr	r0, [r7, #4]
   81e02:	4b14      	ldr	r3, [pc, #80]	; (81e54 <ctrl_spi+0xb8>)
   81e04:	4798      	blx	r3
    spi_set_clock_polarity(spi, 0, 1);
   81e06:	2201      	movs	r2, #1
   81e08:	2100      	movs	r1, #0
   81e0a:	6878      	ldr	r0, [r7, #4]
   81e0c:	4b12      	ldr	r3, [pc, #72]	; (81e58 <ctrl_spi+0xbc>)
   81e0e:	4798      	blx	r3
    spi_set_bits_per_transfer(spi, 0, 8);
   81e10:	2208      	movs	r2, #8
   81e12:	2100      	movs	r1, #0
   81e14:	6878      	ldr	r0, [r7, #4]
   81e16:	4b11      	ldr	r3, [pc, #68]	; (81e5c <ctrl_spi+0xc0>)
   81e18:	4798      	blx	r3
    spi_set_clock_phase(spi, 0, 0);
   81e1a:	2200      	movs	r2, #0
   81e1c:	2100      	movs	r1, #0
   81e1e:	6878      	ldr	r0, [r7, #4]
   81e20:	4b0f      	ldr	r3, [pc, #60]	; (81e60 <ctrl_spi+0xc4>)
   81e22:	4798      	blx	r3

    spi_enable(spi);
   81e24:	6878      	ldr	r0, [r7, #4]
   81e26:	4b0f      	ldr	r3, [pc, #60]	; (81e64 <ctrl_spi+0xc8>)
   81e28:	4798      	blx	r3
    spi_driver_putword(spi, NULL, NULL);
   81e2a:	2200      	movs	r2, #0
   81e2c:	2100      	movs	r1, #0
   81e2e:	6878      	ldr	r0, [r7, #4]
   81e30:	4b0d      	ldr	r3, [pc, #52]	; (81e68 <ctrl_spi+0xcc>)
   81e32:	4798      	blx	r3
}
   81e34:	4618      	mov	r0, r3
   81e36:	3710      	adds	r7, #16
   81e38:	46bd      	mov	sp, r7
   81e3a:	bd80      	pop	{r7, pc}
   81e3c:	00081d21 	.word	0x00081d21
   81e40:	20001828 	.word	0x20001828
   81e44:	05b8d800 	.word	0x05b8d800
   81e48:	000ea600 	.word	0x000ea600
   81e4c:	00083491 	.word	0x00083491
   81e50:	000834cb 	.word	0x000834cb
   81e54:	00081ca9 	.word	0x00081ca9
   81e58:	000833ad 	.word	0x000833ad
   81e5c:	00083449 	.word	0x00083449
   81e60:	000833fb 	.word	0x000833fb
   81e64:	00081c91 	.word	0x00081c91
   81e68:	00081e6d 	.word	0x00081e6d

00081e6c <spi_driver_putword>:

void spi_driver_putword(Spi *spi, tcirc_buf *txbuf, uint16_t data)
{
   81e6c:	b580      	push	{r7, lr}
   81e6e:	b086      	sub	sp, #24
   81e70:	af00      	add	r7, sp, #0
   81e72:	60f8      	str	r0, [r7, #12]
   81e74:	60b9      	str	r1, [r7, #8]
   81e76:	4613      	mov	r3, r2
   81e78:	80fb      	strh	r3, [r7, #6]

    // if (spi_is_tx_ready(spi)) {

    // }

    gpio_set_pin_low(ADC_SPI_CS);
   81e7a:	2003      	movs	r0, #3
   81e7c:	4b3c      	ldr	r3, [pc, #240]	; (81f70 <spi_driver_putword+0x104>)
   81e7e:	4798      	blx	r3
    spi_put(spi, 0b1);
   81e80:	2101      	movs	r1, #1
   81e82:	68f8      	ldr	r0, [r7, #12]
   81e84:	4b3b      	ldr	r3, [pc, #236]	; (81f74 <spi_driver_putword+0x108>)
   81e86:	4798      	blx	r3
    while(!spi_is_tx_empty(spi));
   81e88:	bf00      	nop
   81e8a:	68f8      	ldr	r0, [r7, #12]
   81e8c:	4b3a      	ldr	r3, [pc, #232]	; (81f78 <spi_driver_putword+0x10c>)
   81e8e:	4798      	blx	r3
   81e90:	4603      	mov	r3, r0
   81e92:	2b00      	cmp	r3, #0
   81e94:	d0f9      	beq.n	81e8a <spi_driver_putword+0x1e>
    spi_put(spi, (0b11011 << 2));
   81e96:	216c      	movs	r1, #108	; 0x6c
   81e98:	68f8      	ldr	r0, [r7, #12]
   81e9a:	4b36      	ldr	r3, [pc, #216]	; (81f74 <spi_driver_putword+0x108>)
   81e9c:	4798      	blx	r3
    while(!spi_is_tx_empty(spi));
   81e9e:	bf00      	nop
   81ea0:	68f8      	ldr	r0, [r7, #12]
   81ea2:	4b35      	ldr	r3, [pc, #212]	; (81f78 <spi_driver_putword+0x10c>)
   81ea4:	4798      	blx	r3
   81ea6:	4603      	mov	r3, r0
   81ea8:	2b00      	cmp	r3, #0
   81eaa:	d0f9      	beq.n	81ea0 <spi_driver_putword+0x34>
    gpio_set_pin_high(ADC_SPI_CS);
   81eac:	2003      	movs	r0, #3
   81eae:	4b33      	ldr	r3, [pc, #204]	; (81f7c <spi_driver_putword+0x110>)
   81eb0:	4798      	blx	r3

    volatile uint16_t i = 0;
   81eb2:	2300      	movs	r3, #0
   81eb4:	82fb      	strh	r3, [r7, #22]
    gpio_set_pin_low(ADC_SPI_CS);
   81eb6:	2003      	movs	r0, #3
   81eb8:	4b2d      	ldr	r3, [pc, #180]	; (81f70 <spi_driver_putword+0x104>)
   81eba:	4798      	blx	r3
    spi_put(spi, 0x00); // enable rdout
   81ebc:	2100      	movs	r1, #0
   81ebe:	68f8      	ldr	r0, [r7, #12]
   81ec0:	4b2c      	ldr	r3, [pc, #176]	; (81f74 <spi_driver_putword+0x108>)
   81ec2:	4798      	blx	r3
    while(!spi_is_tx_empty(spi));
   81ec4:	bf00      	nop
   81ec6:	68f8      	ldr	r0, [r7, #12]
   81ec8:	4b2b      	ldr	r3, [pc, #172]	; (81f78 <spi_driver_putword+0x10c>)
   81eca:	4798      	blx	r3
   81ecc:	4603      	mov	r3, r0
   81ece:	2b00      	cmp	r3, #0
   81ed0:	d0f9      	beq.n	81ec6 <spi_driver_putword+0x5a>
    spi_put(spi, 0x01); // enable rdout
   81ed2:	2101      	movs	r1, #1
   81ed4:	68f8      	ldr	r0, [r7, #12]
   81ed6:	4b27      	ldr	r3, [pc, #156]	; (81f74 <spi_driver_putword+0x108>)
   81ed8:	4798      	blx	r3
    while(!spi_is_tx_empty(spi));
   81eda:	bf00      	nop
   81edc:	68f8      	ldr	r0, [r7, #12]
   81ede:	4b26      	ldr	r3, [pc, #152]	; (81f78 <spi_driver_putword+0x10c>)
   81ee0:	4798      	blx	r3
   81ee2:	4603      	mov	r3, r0
   81ee4:	2b00      	cmp	r3, #0
   81ee6:	d0f9      	beq.n	81edc <spi_driver_putword+0x70>
    gpio_set_pin_high(ADC_SPI_CS);
   81ee8:	2003      	movs	r0, #3
   81eea:	4b24      	ldr	r3, [pc, #144]	; (81f7c <spi_driver_putword+0x110>)
   81eec:	4798      	blx	r3

    gpio_set_pin_low(ADC_SPI_CS);
   81eee:	2003      	movs	r0, #3
   81ef0:	4b1f      	ldr	r3, [pc, #124]	; (81f70 <spi_driver_putword+0x104>)
   81ef2:	4798      	blx	r3
    spi_put(spi, (0b1)); // enable rdout
   81ef4:	2101      	movs	r1, #1
   81ef6:	68f8      	ldr	r0, [r7, #12]
   81ef8:	4b1e      	ldr	r3, [pc, #120]	; (81f74 <spi_driver_putword+0x108>)
   81efa:	4798      	blx	r3
    while(!spi_is_tx_empty(spi));
   81efc:	bf00      	nop
   81efe:	68f8      	ldr	r0, [r7, #12]
   81f00:	4b1d      	ldr	r3, [pc, #116]	; (81f78 <spi_driver_putword+0x10c>)
   81f02:	4798      	blx	r3
   81f04:	4603      	mov	r3, r0
   81f06:	2b00      	cmp	r3, #0
   81f08:	d0f9      	beq.n	81efe <spi_driver_putword+0x92>
    spi_put(spi, (0b0)); // enable rdout
   81f0a:	2100      	movs	r1, #0
   81f0c:	68f8      	ldr	r0, [r7, #12]
   81f0e:	4b19      	ldr	r3, [pc, #100]	; (81f74 <spi_driver_putword+0x108>)
   81f10:	4798      	blx	r3
    while(!spi_is_tx_empty(spi));
   81f12:	bf00      	nop
   81f14:	68f8      	ldr	r0, [r7, #12]
   81f16:	4b18      	ldr	r3, [pc, #96]	; (81f78 <spi_driver_putword+0x10c>)
   81f18:	4798      	blx	r3
   81f1a:	4603      	mov	r3, r0
   81f1c:	2b00      	cmp	r3, #0
   81f1e:	d0f9      	beq.n	81f14 <spi_driver_putword+0xa8>
    i = spi_get(spi);
   81f20:	68f8      	ldr	r0, [r7, #12]
   81f22:	4b17      	ldr	r3, [pc, #92]	; (81f80 <spi_driver_putword+0x114>)
   81f24:	4798      	blx	r3
   81f26:	4603      	mov	r3, r0
   81f28:	82fb      	strh	r3, [r7, #22]
    gpio_set_pin_high(ADC_SPI_CS);
   81f2a:	2003      	movs	r0, #3
   81f2c:	4b13      	ldr	r3, [pc, #76]	; (81f7c <spi_driver_putword+0x110>)
   81f2e:	4798      	blx	r3

    gpio_set_pin_low(ADC_SPI_CS);
   81f30:	2003      	movs	r0, #3
   81f32:	4b0f      	ldr	r3, [pc, #60]	; (81f70 <spi_driver_putword+0x104>)
   81f34:	4798      	blx	r3
    spi_put(spi, 0x00); // enable rdout
   81f36:	2100      	movs	r1, #0
   81f38:	68f8      	ldr	r0, [r7, #12]
   81f3a:	4b0e      	ldr	r3, [pc, #56]	; (81f74 <spi_driver_putword+0x108>)
   81f3c:	4798      	blx	r3
    while(!spi_is_tx_empty(spi));
   81f3e:	bf00      	nop
   81f40:	68f8      	ldr	r0, [r7, #12]
   81f42:	4b0d      	ldr	r3, [pc, #52]	; (81f78 <spi_driver_putword+0x10c>)
   81f44:	4798      	blx	r3
   81f46:	4603      	mov	r3, r0
   81f48:	2b00      	cmp	r3, #0
   81f4a:	d0f9      	beq.n	81f40 <spi_driver_putword+0xd4>
    spi_put(spi, 0x00); // enable rdout
   81f4c:	2100      	movs	r1, #0
   81f4e:	68f8      	ldr	r0, [r7, #12]
   81f50:	4b08      	ldr	r3, [pc, #32]	; (81f74 <spi_driver_putword+0x108>)
   81f52:	4798      	blx	r3
    while(!spi_is_tx_empty(spi));
   81f54:	bf00      	nop
   81f56:	68f8      	ldr	r0, [r7, #12]
   81f58:	4b07      	ldr	r3, [pc, #28]	; (81f78 <spi_driver_putword+0x10c>)
   81f5a:	4798      	blx	r3
   81f5c:	4603      	mov	r3, r0
   81f5e:	2b00      	cmp	r3, #0
   81f60:	d0f9      	beq.n	81f56 <spi_driver_putword+0xea>
    gpio_set_pin_high(ADC_SPI_CS);
   81f62:	2003      	movs	r0, #3
   81f64:	4b05      	ldr	r3, [pc, #20]	; (81f7c <spi_driver_putword+0x110>)
   81f66:	4798      	blx	r3
   81f68:	bf00      	nop
   81f6a:	3718      	adds	r7, #24
   81f6c:	46bd      	mov	sp, r7
   81f6e:	bd80      	pop	{r7, pc}
   81f70:	00082681 	.word	0x00082681
   81f74:	00081cc7 	.word	0x00081cc7
   81f78:	00081cfb 	.word	0x00081cfb
   81f7c:	00082651 	.word	0x00082651
   81f80:	00081ce3 	.word	0x00081ce3

00081f84 <init_circ_buf>:
    @brief Initializes the circular buffer.

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
   81f84:	b480      	push	{r7}
   81f86:	b083      	sub	sp, #12
   81f88:	af00      	add	r7, sp, #0
   81f8a:	6078      	str	r0, [r7, #4]
    cbuf->head = cbuf->tail = 0;
   81f8c:	2300      	movs	r3, #0
   81f8e:	687a      	ldr	r2, [r7, #4]
   81f90:	6053      	str	r3, [r2, #4]
   81f92:	687a      	ldr	r2, [r7, #4]
   81f94:	6013      	str	r3, [r2, #0]
    cbuf->dropped = 0;
   81f96:	687b      	ldr	r3, [r7, #4]
   81f98:	2200      	movs	r2, #0
   81f9a:	609a      	str	r2, [r3, #8]
}
   81f9c:	bf00      	nop
   81f9e:	370c      	adds	r7, #12
   81fa0:	46bd      	mov	sp, r7
   81fa2:	bc80      	pop	{r7}
   81fa4:	4770      	bx	lr

00081fa6 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   81fa6:	b480      	push	{r7}
   81fa8:	b085      	sub	sp, #20
   81faa:	af00      	add	r7, sp, #0
   81fac:	6078      	str	r0, [r7, #4]
   81fae:	460b      	mov	r3, r1
   81fb0:	70fb      	strb	r3, [r7, #3]
   81fb2:	4613      	mov	r3, r2
   81fb4:	70bb      	strb	r3, [r7, #2]
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   81fb6:	687b      	ldr	r3, [r7, #4]
   81fb8:	681b      	ldr	r3, [r3, #0]
   81fba:	60fb      	str	r3, [r7, #12]
    newhead++;
   81fbc:	68fb      	ldr	r3, [r7, #12]
   81fbe:	3301      	adds	r3, #1
   81fc0:	60fb      	str	r3, [r7, #12]
    if (newhead >= CIRCBUFSIZE)
   81fc2:	68fb      	ldr	r3, [r7, #12]
   81fc4:	2b7f      	cmp	r3, #127	; 0x7f
   81fc6:	d90e      	bls.n	81fe6 <add_to_circ_buf+0x40>
        newhead = 0;
   81fc8:	2300      	movs	r3, #0
   81fca:	60fb      	str	r3, [r7, #12]
    while (newhead == cbuf->tail)
   81fcc:	e00b      	b.n	81fe6 <add_to_circ_buf+0x40>
    {
        if (!block)
   81fce:	78bb      	ldrb	r3, [r7, #2]
   81fd0:	f083 0301 	eor.w	r3, r3, #1
   81fd4:	b2db      	uxtb	r3, r3
   81fd6:	2b00      	cmp	r3, #0
   81fd8:	d005      	beq.n	81fe6 <add_to_circ_buf+0x40>
        {
            cbuf->dropped++;
   81fda:	687b      	ldr	r3, [r7, #4]
   81fdc:	689b      	ldr	r3, [r3, #8]
   81fde:	1c5a      	adds	r2, r3, #1
   81fe0:	687b      	ldr	r3, [r7, #4]
   81fe2:	609a      	str	r2, [r3, #8]
            return;
   81fe4:	e00d      	b.n	82002 <add_to_circ_buf+0x5c>
    while (newhead == cbuf->tail)
   81fe6:	687b      	ldr	r3, [r7, #4]
   81fe8:	685b      	ldr	r3, [r3, #4]
   81fea:	68fa      	ldr	r2, [r7, #12]
   81fec:	429a      	cmp	r2, r3
   81fee:	d0ee      	beq.n	81fce <add_to_circ_buf+0x28>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   81ff0:	687b      	ldr	r3, [r7, #4]
   81ff2:	681b      	ldr	r3, [r3, #0]
   81ff4:	687a      	ldr	r2, [r7, #4]
   81ff6:	4413      	add	r3, r2
   81ff8:	78fa      	ldrb	r2, [r7, #3]
   81ffa:	731a      	strb	r2, [r3, #12]
    cbuf->head = newhead;
   81ffc:	687b      	ldr	r3, [r7, #4]
   81ffe:	68fa      	ldr	r2, [r7, #12]
   82000:	601a      	str	r2, [r3, #0]
}
   82002:	3714      	adds	r7, #20
   82004:	46bd      	mov	sp, r7
   82006:	bc80      	pop	{r7}
   82008:	4770      	bx	lr

0008200a <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   8200a:	b480      	push	{r7}
   8200c:	b085      	sub	sp, #20
   8200e:	af00      	add	r7, sp, #0
   82010:	6078      	str	r0, [r7, #4]
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   82012:	687b      	ldr	r3, [r7, #4]
   82014:	685b      	ldr	r3, [r3, #4]
   82016:	60fb      	str	r3, [r7, #12]
    uint8_t retval = cbuf->buf[newtail];
   82018:	687a      	ldr	r2, [r7, #4]
   8201a:	68fb      	ldr	r3, [r7, #12]
   8201c:	4413      	add	r3, r2
   8201e:	330c      	adds	r3, #12
   82020:	781b      	ldrb	r3, [r3, #0]
   82022:	72fb      	strb	r3, [r7, #11]

    if (newtail == cbuf->head)
   82024:	687b      	ldr	r3, [r7, #4]
   82026:	681b      	ldr	r3, [r3, #0]
   82028:	68fa      	ldr	r2, [r7, #12]
   8202a:	429a      	cmp	r2, r3
   8202c:	d101      	bne.n	82032 <get_from_circ_buf+0x28>
        return SERIAL_ERR;
   8202e:	23ff      	movs	r3, #255	; 0xff
   82030:	e00b      	b.n	8204a <get_from_circ_buf+0x40>

    newtail++;
   82032:	68fb      	ldr	r3, [r7, #12]
   82034:	3301      	adds	r3, #1
   82036:	60fb      	str	r3, [r7, #12]
    if (newtail >= CIRCBUFSIZE)
   82038:	68fb      	ldr	r3, [r7, #12]
   8203a:	2b7f      	cmp	r3, #127	; 0x7f
   8203c:	d901      	bls.n	82042 <get_from_circ_buf+0x38>
        // Rollover
        newtail = 0;
   8203e:	2300      	movs	r3, #0
   82040:	60fb      	str	r3, [r7, #12]
    cbuf->tail = newtail;
   82042:	687b      	ldr	r3, [r7, #4]
   82044:	68fa      	ldr	r2, [r7, #12]
   82046:	605a      	str	r2, [r3, #4]

    return retval;
   82048:	7afb      	ldrb	r3, [r7, #11]
}
   8204a:	4618      	mov	r0, r3
   8204c:	3714      	adds	r7, #20
   8204e:	46bd      	mov	sp, r7
   82050:	bc80      	pop	{r7}
   82052:	4770      	bx	lr

00082054 <circ_buf_has_char>:

    @retval true if buffer contains data.
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
   82054:	b480      	push	{r7}
   82056:	b085      	sub	sp, #20
   82058:	af00      	add	r7, sp, #0
   8205a:	6078      	str	r0, [r7, #4]
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   8205c:	687b      	ldr	r3, [r7, #4]
   8205e:	681b      	ldr	r3, [r3, #0]
   82060:	60fb      	str	r3, [r7, #12]
    return (head != cbuf->tail);
   82062:	687b      	ldr	r3, [r7, #4]
   82064:	685b      	ldr	r3, [r3, #4]
   82066:	68fa      	ldr	r2, [r7, #12]
   82068:	429a      	cmp	r2, r3
   8206a:	bf14      	ite	ne
   8206c:	2301      	movne	r3, #1
   8206e:	2300      	moveq	r3, #0
   82070:	b2db      	uxtb	r3, r3
}
   82072:	4618      	mov	r0, r3
   82074:	3714      	adds	r7, #20
   82076:	46bd      	mov	sp, r7
   82078:	bc80      	pop	{r7}
   8207a:	4770      	bx	lr

0008207c <circ_buf_count>:
   @param cbuf is the circular buffer to query

   @return count Number of chars in buffer.
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
   8207c:	b480      	push	{r7}
   8207e:	b085      	sub	sp, #20
   82080:	af00      	add	r7, sp, #0
   82082:	6078      	str	r0, [r7, #4]
    int count;

    count = cbuf->head;
   82084:	687b      	ldr	r3, [r7, #4]
   82086:	681b      	ldr	r3, [r3, #0]
   82088:	60fb      	str	r3, [r7, #12]
    count -= cbuf->tail;
   8208a:	687b      	ldr	r3, [r7, #4]
   8208c:	685b      	ldr	r3, [r3, #4]
   8208e:	68fa      	ldr	r2, [r7, #12]
   82090:	1ad3      	subs	r3, r2, r3
   82092:	60fb      	str	r3, [r7, #12]
    if (count < 0)
   82094:	68fb      	ldr	r3, [r7, #12]
   82096:	2b00      	cmp	r3, #0
   82098:	da02      	bge.n	820a0 <circ_buf_count+0x24>
        count += CIRCBUFSIZE;
   8209a:	68fb      	ldr	r3, [r7, #12]
   8209c:	3380      	adds	r3, #128	; 0x80
   8209e:	60fb      	str	r3, [r7, #12]
    return (unsigned int)count;
   820a0:	68fb      	ldr	r3, [r7, #12]
}
   820a2:	4618      	mov	r0, r3
   820a4:	3714      	adds	r7, #20
   820a6:	46bd      	mov	sp, r7
   820a8:	bc80      	pop	{r7}
   820aa:	4770      	bx	lr

000820ac <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   820ac:	b480      	push	{r7}
   820ae:	b083      	sub	sp, #12
   820b0:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   820b2:	f3ef 8310 	mrs	r3, PRIMASK
   820b6:	603b      	str	r3, [r7, #0]
  return(result);
   820b8:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   820ba:	2b00      	cmp	r3, #0
   820bc:	bf0c      	ite	eq
   820be:	2301      	moveq	r3, #1
   820c0:	2300      	movne	r3, #0
   820c2:	b2db      	uxtb	r3, r3
   820c4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   820c6:	b672      	cpsid	i
}
   820c8:	bf00      	nop
  __ASM volatile ("dmb");
   820ca:	f3bf 8f5f 	dmb	sy
}
   820ce:	bf00      	nop
	cpu_irq_disable();
   820d0:	4b04      	ldr	r3, [pc, #16]	; (820e4 <cpu_irq_save+0x38>)
   820d2:	2200      	movs	r2, #0
   820d4:	701a      	strb	r2, [r3, #0]
	return flags;
   820d6:	687b      	ldr	r3, [r7, #4]
}
   820d8:	4618      	mov	r0, r3
   820da:	370c      	adds	r7, #12
   820dc:	46bd      	mov	sp, r7
   820de:	bc80      	pop	{r7}
   820e0:	4770      	bx	lr
   820e2:	bf00      	nop
   820e4:	20000284 	.word	0x20000284

000820e8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   820e8:	b480      	push	{r7}
   820ea:	b083      	sub	sp, #12
   820ec:	af00      	add	r7, sp, #0
   820ee:	6078      	str	r0, [r7, #4]
	return (flags);
   820f0:	687b      	ldr	r3, [r7, #4]
   820f2:	2b00      	cmp	r3, #0
   820f4:	bf14      	ite	ne
   820f6:	2301      	movne	r3, #1
   820f8:	2300      	moveq	r3, #0
   820fa:	b2db      	uxtb	r3, r3
}
   820fc:	4618      	mov	r0, r3
   820fe:	370c      	adds	r7, #12
   82100:	46bd      	mov	sp, r7
   82102:	bc80      	pop	{r7}
   82104:	4770      	bx	lr
   82106:	0000      	movs	r0, r0

00082108 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   82108:	b580      	push	{r7, lr}
   8210a:	b082      	sub	sp, #8
   8210c:	af00      	add	r7, sp, #0
   8210e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   82110:	6878      	ldr	r0, [r7, #4]
   82112:	4b08      	ldr	r3, [pc, #32]	; (82134 <cpu_irq_restore+0x2c>)
   82114:	4798      	blx	r3
   82116:	4603      	mov	r3, r0
   82118:	2b00      	cmp	r3, #0
   8211a:	d007      	beq.n	8212c <cpu_irq_restore+0x24>
		cpu_irq_enable();
   8211c:	4b06      	ldr	r3, [pc, #24]	; (82138 <cpu_irq_restore+0x30>)
   8211e:	2201      	movs	r2, #1
   82120:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82122:	f3bf 8f5f 	dmb	sy
}
   82126:	bf00      	nop
  __ASM volatile ("cpsie i");
   82128:	b662      	cpsie	i
}
   8212a:	bf00      	nop
}
   8212c:	bf00      	nop
   8212e:	3708      	adds	r7, #8
   82130:	46bd      	mov	sp, r7
   82132:	bd80      	pop	{r7, pc}
   82134:	000820e9 	.word	0x000820e9
   82138:	20000284 	.word	0x20000284

0008213c <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   8213c:	b580      	push	{r7, lr}
   8213e:	b086      	sub	sp, #24
   82140:	af00      	add	r7, sp, #0
   82142:	60f8      	str	r0, [r7, #12]
   82144:	60b9      	str	r1, [r7, #8]
   82146:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   82148:	68bb      	ldr	r3, [r7, #8]
   8214a:	2b0e      	cmp	r3, #14
   8214c:	d002      	beq.n	82154 <efc_perform_command+0x18>
   8214e:	68bb      	ldr	r3, [r7, #8]
   82150:	2b0f      	cmp	r3, #15
   82152:	d102      	bne.n	8215a <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   82154:	f04f 33ff 	mov.w	r3, #4294967295
   82158:	e016      	b.n	82188 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   8215a:	4b0d      	ldr	r3, [pc, #52]	; (82190 <efc_perform_command+0x54>)
   8215c:	4798      	blx	r3
   8215e:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82160:	687b      	ldr	r3, [r7, #4]
   82162:	021b      	lsls	r3, r3, #8
   82164:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   82168:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   8216c:	68ba      	ldr	r2, [r7, #8]
   8216e:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   82170:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   82172:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   82176:	4619      	mov	r1, r3
   82178:	68f8      	ldr	r0, [r7, #12]
   8217a:	4b06      	ldr	r3, [pc, #24]	; (82194 <efc_perform_command+0x58>)
   8217c:	4798      	blx	r3
   8217e:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   82180:	6978      	ldr	r0, [r7, #20]
   82182:	4b05      	ldr	r3, [pc, #20]	; (82198 <efc_perform_command+0x5c>)
   82184:	4798      	blx	r3
	return result;
   82186:	693b      	ldr	r3, [r7, #16]
}
   82188:	4618      	mov	r0, r3
   8218a:	3718      	adds	r7, #24
   8218c:	46bd      	mov	sp, r7
   8218e:	bd80      	pop	{r7, pc}
   82190:	000820ad 	.word	0x000820ad
   82194:	200000bd 	.word	0x200000bd
   82198:	00082109 	.word	0x00082109

0008219c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8219c:	b480      	push	{r7}
   8219e:	af00      	add	r7, sp, #0
	while (1) {
   821a0:	e7fe      	b.n	821a0 <Dummy_Handler+0x4>
   821a2:	0000      	movs	r0, r0

000821a4 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   821a4:	b590      	push	{r4, r7, lr}
   821a6:	b08b      	sub	sp, #44	; 0x2c
   821a8:	af02      	add	r7, sp, #8
   821aa:	6078      	str	r0, [r7, #4]
   821ac:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   821ae:	f107 030c 	add.w	r3, r7, #12
   821b2:	2204      	movs	r2, #4
   821b4:	9200      	str	r2, [sp, #0]
   821b6:	220f      	movs	r2, #15
   821b8:	210e      	movs	r1, #14
   821ba:	4814      	ldr	r0, [pc, #80]	; (8220c <flash_read_unique_id+0x68>)
   821bc:	4c14      	ldr	r4, [pc, #80]	; (82210 <flash_read_unique_id+0x6c>)
   821be:	47a0      	blx	r4
   821c0:	4603      	mov	r3, r0
   821c2:	2b00      	cmp	r3, #0
   821c4:	d001      	beq.n	821ca <flash_read_unique_id+0x26>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   821c6:	2310      	movs	r3, #16
   821c8:	e01b      	b.n	82202 <flash_read_unique_id+0x5e>
	}

	if (ul_size > 4) {
   821ca:	683b      	ldr	r3, [r7, #0]
   821cc:	2b04      	cmp	r3, #4
   821ce:	d901      	bls.n	821d4 <flash_read_unique_id+0x30>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   821d0:	2304      	movs	r3, #4
   821d2:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   821d4:	2300      	movs	r3, #0
   821d6:	61fb      	str	r3, [r7, #28]
   821d8:	e00e      	b.n	821f8 <flash_read_unique_id+0x54>
		pul_data[ul_idx] = uid_buf[ul_idx];
   821da:	69fb      	ldr	r3, [r7, #28]
   821dc:	009b      	lsls	r3, r3, #2
   821de:	687a      	ldr	r2, [r7, #4]
   821e0:	441a      	add	r2, r3
   821e2:	69fb      	ldr	r3, [r7, #28]
   821e4:	009b      	lsls	r3, r3, #2
   821e6:	f107 0120 	add.w	r1, r7, #32
   821ea:	440b      	add	r3, r1
   821ec:	f853 3c14 	ldr.w	r3, [r3, #-20]
   821f0:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   821f2:	69fb      	ldr	r3, [r7, #28]
   821f4:	3301      	adds	r3, #1
   821f6:	61fb      	str	r3, [r7, #28]
   821f8:	69fa      	ldr	r2, [r7, #28]
   821fa:	683b      	ldr	r3, [r7, #0]
   821fc:	429a      	cmp	r2, r3
   821fe:	d3ec      	bcc.n	821da <flash_read_unique_id+0x36>
	}

	return FLASH_RC_OK;
   82200:	2300      	movs	r3, #0
}
   82202:	4618      	mov	r0, r3
   82204:	3724      	adds	r7, #36	; 0x24
   82206:	46bd      	mov	sp, r7
   82208:	bd90      	pop	{r4, r7, pc}
   8220a:	bf00      	nop
   8220c:	400e0800 	.word	0x400e0800
   82210:	20000001 	.word	0x20000001

00082214 <sysclk_enable_peripheral_clock>:
{
   82214:	b580      	push	{r7, lr}
   82216:	b082      	sub	sp, #8
   82218:	af00      	add	r7, sp, #0
   8221a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8221c:	6878      	ldr	r0, [r7, #4]
   8221e:	4b03      	ldr	r3, [pc, #12]	; (8222c <sysclk_enable_peripheral_clock+0x18>)
   82220:	4798      	blx	r3
}
   82222:	bf00      	nop
   82224:	3708      	adds	r7, #8
   82226:	46bd      	mov	sp, r7
   82228:	bd80      	pop	{r7, pc}
   8222a:	bf00      	nop
   8222c:	00082d15 	.word	0x00082d15

00082230 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   82230:	b580      	push	{r7, lr}
   82232:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   82234:	200a      	movs	r0, #10
   82236:	4b04      	ldr	r3, [pc, #16]	; (82248 <ioport_init+0x18>)
   82238:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   8223a:	200b      	movs	r0, #11
   8223c:	4b02      	ldr	r3, [pc, #8]	; (82248 <ioport_init+0x18>)
   8223e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
#endif
#ifdef ID_PIOF
	sysclk_enable_peripheral_clock(ID_PIOF);
#endif
}
   82240:	bf00      	nop
	arch_ioport_init();
}
   82242:	bf00      	nop
   82244:	bd80      	pop	{r7, pc}
   82246:	bf00      	nop
   82248:	00082215 	.word	0x00082215

0008224c <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   8224c:	b580      	push	{r7, lr}
   8224e:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82250:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82254:	201d      	movs	r0, #29
   82256:	4b0d      	ldr	r3, [pc, #52]	; (8228c <iopins_normal+0x40>)
   82258:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8225a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8225e:	201f      	movs	r0, #31
   82260:	4b0a      	ldr	r3, [pc, #40]	; (8228c <iopins_normal+0x40>)
   82262:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   82264:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82268:	2032      	movs	r0, #50	; 0x32
   8226a:	4b08      	ldr	r3, [pc, #32]	; (8228c <iopins_normal+0x40>)
   8226c:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8226e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   82272:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   82276:	4806      	ldr	r0, [pc, #24]	; (82290 <iopins_normal+0x44>)
   82278:	4b06      	ldr	r3, [pc, #24]	; (82294 <iopins_normal+0x48>)
   8227a:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   8227c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82280:	2038      	movs	r0, #56	; 0x38
   82282:	4b02      	ldr	r3, [pc, #8]	; (8228c <iopins_normal+0x40>)
   82284:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   82286:	bf00      	nop
   82288:	bd80      	pop	{r7, pc}
   8228a:	bf00      	nop
   8228c:	000826b1 	.word	0x000826b1
   82290:	400e0c00 	.word	0x400e0c00
   82294:	000827e1 	.word	0x000827e1

00082298 <board_init>:

void board_init(void)
{
   82298:	b580      	push	{r7, lr}
   8229a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8229c:	4b04      	ldr	r3, [pc, #16]	; (822b0 <board_init+0x18>)
   8229e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   822a2:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   822a4:	4b03      	ldr	r3, [pc, #12]	; (822b4 <board_init+0x1c>)
   822a6:	4798      	blx	r3

	iopins_normal();
   822a8:	4b03      	ldr	r3, [pc, #12]	; (822b8 <board_init+0x20>)
   822aa:	4798      	blx	r3

}
   822ac:	bf00      	nop
   822ae:	bd80      	pop	{r7, pc}
   822b0:	400e1250 	.word	0x400e1250
   822b4:	00082231 	.word	0x00082231
   822b8:	0008224d 	.word	0x0008224d

000822bc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   822bc:	b480      	push	{r7}
   822be:	b083      	sub	sp, #12
   822c0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   822c2:	4b11      	ldr	r3, [pc, #68]	; (82308 <cpu_irq_enter_critical+0x4c>)
   822c4:	681b      	ldr	r3, [r3, #0]
   822c6:	2b00      	cmp	r3, #0
   822c8:	d114      	bne.n	822f4 <cpu_irq_enter_critical+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   822ca:	f3ef 8310 	mrs	r3, PRIMASK
   822ce:	607b      	str	r3, [r7, #4]
  return(result);
   822d0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   822d2:	2b00      	cmp	r3, #0
   822d4:	d10b      	bne.n	822ee <cpu_irq_enter_critical+0x32>
  __ASM volatile ("cpsid i");
   822d6:	b672      	cpsid	i
}
   822d8:	bf00      	nop
  __ASM volatile ("dmb");
   822da:	f3bf 8f5f 	dmb	sy
}
   822de:	bf00      	nop
			cpu_irq_disable();
   822e0:	4b0a      	ldr	r3, [pc, #40]	; (8230c <cpu_irq_enter_critical+0x50>)
   822e2:	2200      	movs	r2, #0
   822e4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   822e6:	4b0a      	ldr	r3, [pc, #40]	; (82310 <cpu_irq_enter_critical+0x54>)
   822e8:	2201      	movs	r2, #1
   822ea:	701a      	strb	r2, [r3, #0]
   822ec:	e002      	b.n	822f4 <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   822ee:	4b08      	ldr	r3, [pc, #32]	; (82310 <cpu_irq_enter_critical+0x54>)
   822f0:	2200      	movs	r2, #0
   822f2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   822f4:	4b04      	ldr	r3, [pc, #16]	; (82308 <cpu_irq_enter_critical+0x4c>)
   822f6:	681b      	ldr	r3, [r3, #0]
   822f8:	3301      	adds	r3, #1
   822fa:	4a03      	ldr	r2, [pc, #12]	; (82308 <cpu_irq_enter_critical+0x4c>)
   822fc:	6013      	str	r3, [r2, #0]
}
   822fe:	bf00      	nop
   82300:	370c      	adds	r7, #12
   82302:	46bd      	mov	sp, r7
   82304:	bc80      	pop	{r7}
   82306:	4770      	bx	lr
   82308:	200012b0 	.word	0x200012b0
   8230c:	20000284 	.word	0x20000284
   82310:	200012b4 	.word	0x200012b4

00082314 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   82314:	b480      	push	{r7}
   82316:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   82318:	4b0c      	ldr	r3, [pc, #48]	; (8234c <cpu_irq_leave_critical+0x38>)
   8231a:	681b      	ldr	r3, [r3, #0]
   8231c:	3b01      	subs	r3, #1
   8231e:	4a0b      	ldr	r2, [pc, #44]	; (8234c <cpu_irq_leave_critical+0x38>)
   82320:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   82322:	4b0a      	ldr	r3, [pc, #40]	; (8234c <cpu_irq_leave_critical+0x38>)
   82324:	681b      	ldr	r3, [r3, #0]
   82326:	2b00      	cmp	r3, #0
   82328:	d10c      	bne.n	82344 <cpu_irq_leave_critical+0x30>
   8232a:	4b09      	ldr	r3, [pc, #36]	; (82350 <cpu_irq_leave_critical+0x3c>)
   8232c:	781b      	ldrb	r3, [r3, #0]
   8232e:	b2db      	uxtb	r3, r3
   82330:	2b00      	cmp	r3, #0
   82332:	d007      	beq.n	82344 <cpu_irq_leave_critical+0x30>
		cpu_irq_enable();
   82334:	4b07      	ldr	r3, [pc, #28]	; (82354 <cpu_irq_leave_critical+0x40>)
   82336:	2201      	movs	r2, #1
   82338:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8233a:	f3bf 8f5f 	dmb	sy
}
   8233e:	bf00      	nop
  __ASM volatile ("cpsie i");
   82340:	b662      	cpsie	i
}
   82342:	bf00      	nop
	}
}
   82344:	bf00      	nop
   82346:	46bd      	mov	sp, r7
   82348:	bc80      	pop	{r7}
   8234a:	4770      	bx	lr
   8234c:	200012b0 	.word	0x200012b0
   82350:	200012b4 	.word	0x200012b4
   82354:	20000284 	.word	0x20000284

00082358 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   82358:	b580      	push	{r7, lr}
   8235a:	b084      	sub	sp, #16
   8235c:	af00      	add	r7, sp, #0
   8235e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   82360:	2300      	movs	r3, #0
   82362:	60fb      	str	r3, [r7, #12]
   82364:	e017      	b.n	82396 <LED_Off+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82366:	4a10      	ldr	r2, [pc, #64]	; (823a8 <LED_Off+0x50>)
   82368:	68fb      	ldr	r3, [r7, #12]
   8236a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   8236e:	687a      	ldr	r2, [r7, #4]
   82370:	429a      	cmp	r2, r3
   82372:	d10d      	bne.n	82390 <LED_Off+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   82374:	4a0c      	ldr	r2, [pc, #48]	; (823a8 <LED_Off+0x50>)
   82376:	68fb      	ldr	r3, [r7, #12]
   82378:	00db      	lsls	r3, r3, #3
   8237a:	4413      	add	r3, r2
   8237c:	685b      	ldr	r3, [r3, #4]
   8237e:	2b01      	cmp	r3, #1
   82380:	d103      	bne.n	8238a <LED_Off+0x32>
				gpio_set_pin_low(led_gpio);
   82382:	6878      	ldr	r0, [r7, #4]
   82384:	4b09      	ldr	r3, [pc, #36]	; (823ac <LED_Off+0x54>)
   82386:	4798      	blx	r3
   82388:	e002      	b.n	82390 <LED_Off+0x38>
			} else {
				gpio_set_pin_high(led_gpio);
   8238a:	6878      	ldr	r0, [r7, #4]
   8238c:	4b08      	ldr	r3, [pc, #32]	; (823b0 <LED_Off+0x58>)
   8238e:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   82390:	68fb      	ldr	r3, [r7, #12]
   82392:	3301      	adds	r3, #1
   82394:	60fb      	str	r3, [r7, #12]
   82396:	68fb      	ldr	r3, [r7, #12]
   82398:	2b01      	cmp	r3, #1
   8239a:	d9e4      	bls.n	82366 <LED_Off+0xe>
			}
		}
	}
}
   8239c:	bf00      	nop
   8239e:	bf00      	nop
   823a0:	3710      	adds	r7, #16
   823a2:	46bd      	mov	sp, r7
   823a4:	bd80      	pop	{r7, pc}
   823a6:	bf00      	nop
   823a8:	0008d9e8 	.word	0x0008d9e8
   823ac:	00082681 	.word	0x00082681
   823b0:	00082651 	.word	0x00082651

000823b4 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   823b4:	b580      	push	{r7, lr}
   823b6:	b084      	sub	sp, #16
   823b8:	af00      	add	r7, sp, #0
   823ba:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   823bc:	2300      	movs	r3, #0
   823be:	60fb      	str	r3, [r7, #12]
   823c0:	e017      	b.n	823f2 <LED_On+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   823c2:	4a10      	ldr	r2, [pc, #64]	; (82404 <LED_On+0x50>)
   823c4:	68fb      	ldr	r3, [r7, #12]
   823c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   823ca:	687a      	ldr	r2, [r7, #4]
   823cc:	429a      	cmp	r2, r3
   823ce:	d10d      	bne.n	823ec <LED_On+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   823d0:	4a0c      	ldr	r2, [pc, #48]	; (82404 <LED_On+0x50>)
   823d2:	68fb      	ldr	r3, [r7, #12]
   823d4:	00db      	lsls	r3, r3, #3
   823d6:	4413      	add	r3, r2
   823d8:	685b      	ldr	r3, [r3, #4]
   823da:	2b01      	cmp	r3, #1
   823dc:	d103      	bne.n	823e6 <LED_On+0x32>
				gpio_set_pin_high(led_gpio);
   823de:	6878      	ldr	r0, [r7, #4]
   823e0:	4b09      	ldr	r3, [pc, #36]	; (82408 <LED_On+0x54>)
   823e2:	4798      	blx	r3
   823e4:	e002      	b.n	823ec <LED_On+0x38>
			} else {
				gpio_set_pin_low(led_gpio);
   823e6:	6878      	ldr	r0, [r7, #4]
   823e8:	4b08      	ldr	r3, [pc, #32]	; (8240c <LED_On+0x58>)
   823ea:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   823ec:	68fb      	ldr	r3, [r7, #12]
   823ee:	3301      	adds	r3, #1
   823f0:	60fb      	str	r3, [r7, #12]
   823f2:	68fb      	ldr	r3, [r7, #12]
   823f4:	2b01      	cmp	r3, #1
   823f6:	d9e4      	bls.n	823c2 <LED_On+0xe>
			}
		}
	}
}
   823f8:	bf00      	nop
   823fa:	bf00      	nop
   823fc:	3710      	adds	r7, #16
   823fe:	46bd      	mov	sp, r7
   82400:	bd80      	pop	{r7, pc}
   82402:	bf00      	nop
   82404:	0008d9e8 	.word	0x0008d9e8
   82408:	00082651 	.word	0x00082651
   8240c:	00082681 	.word	0x00082681

00082410 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   82410:	b480      	push	{r7}
   82412:	b085      	sub	sp, #20
   82414:	af00      	add	r7, sp, #0
   82416:	60f8      	str	r0, [r7, #12]
   82418:	60b9      	str	r1, [r7, #8]
   8241a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8241c:	687b      	ldr	r3, [r7, #4]
   8241e:	2b00      	cmp	r3, #0
   82420:	d003      	beq.n	8242a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82422:	68fb      	ldr	r3, [r7, #12]
   82424:	68ba      	ldr	r2, [r7, #8]
   82426:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   82428:	e002      	b.n	82430 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   8242a:	68fb      	ldr	r3, [r7, #12]
   8242c:	68ba      	ldr	r2, [r7, #8]
   8242e:	661a      	str	r2, [r3, #96]	; 0x60
}
   82430:	bf00      	nop
   82432:	3714      	adds	r7, #20
   82434:	46bd      	mov	sp, r7
   82436:	bc80      	pop	{r7}
   82438:	4770      	bx	lr

0008243a <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   8243a:	b480      	push	{r7}
   8243c:	b087      	sub	sp, #28
   8243e:	af00      	add	r7, sp, #0
   82440:	60f8      	str	r0, [r7, #12]
   82442:	60b9      	str	r1, [r7, #8]
   82444:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82446:	68fb      	ldr	r3, [r7, #12]
   82448:	687a      	ldr	r2, [r7, #4]
   8244a:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8244c:	68bb      	ldr	r3, [r7, #8]
   8244e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82452:	d03c      	beq.n	824ce <pio_set_peripheral+0x94>
   82454:	68bb      	ldr	r3, [r7, #8]
   82456:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8245a:	d834      	bhi.n	824c6 <pio_set_peripheral+0x8c>
   8245c:	68bb      	ldr	r3, [r7, #8]
   8245e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82462:	d034      	beq.n	824ce <pio_set_peripheral+0x94>
   82464:	68bb      	ldr	r3, [r7, #8]
   82466:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8246a:	d82c      	bhi.n	824c6 <pio_set_peripheral+0x8c>
   8246c:	68bb      	ldr	r3, [r7, #8]
   8246e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82472:	d02c      	beq.n	824ce <pio_set_peripheral+0x94>
   82474:	68bb      	ldr	r3, [r7, #8]
   82476:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8247a:	d824      	bhi.n	824c6 <pio_set_peripheral+0x8c>
   8247c:	68bb      	ldr	r3, [r7, #8]
   8247e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82482:	d017      	beq.n	824b4 <pio_set_peripheral+0x7a>
   82484:	68bb      	ldr	r3, [r7, #8]
   82486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8248a:	d81c      	bhi.n	824c6 <pio_set_peripheral+0x8c>
   8248c:	68bb      	ldr	r3, [r7, #8]
   8248e:	2b00      	cmp	r3, #0
   82490:	d01d      	beq.n	824ce <pio_set_peripheral+0x94>
   82492:	68bb      	ldr	r3, [r7, #8]
   82494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82498:	d115      	bne.n	824c6 <pio_set_peripheral+0x8c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8249a:	68fb      	ldr	r3, [r7, #12]
   8249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8249e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   824a0:	68fb      	ldr	r3, [r7, #12]
   824a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   824a4:	687b      	ldr	r3, [r7, #4]
   824a6:	43d9      	mvns	r1, r3
   824a8:	697b      	ldr	r3, [r7, #20]
   824aa:	400b      	ands	r3, r1
   824ac:	401a      	ands	r2, r3
   824ae:	68fb      	ldr	r3, [r7, #12]
   824b0:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   824b2:	e008      	b.n	824c6 <pio_set_peripheral+0x8c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   824b4:	68fb      	ldr	r3, [r7, #12]
   824b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   824b8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   824ba:	687a      	ldr	r2, [r7, #4]
   824bc:	697b      	ldr	r3, [r7, #20]
   824be:	431a      	orrs	r2, r3
   824c0:	68fb      	ldr	r3, [r7, #12]
   824c2:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   824c4:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   824c6:	68fb      	ldr	r3, [r7, #12]
   824c8:	687a      	ldr	r2, [r7, #4]
   824ca:	605a      	str	r2, [r3, #4]
   824cc:	e000      	b.n	824d0 <pio_set_peripheral+0x96>
		return;
   824ce:	bf00      	nop
}
   824d0:	371c      	adds	r7, #28
   824d2:	46bd      	mov	sp, r7
   824d4:	bc80      	pop	{r7}
   824d6:	4770      	bx	lr

000824d8 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   824d8:	b580      	push	{r7, lr}
   824da:	b084      	sub	sp, #16
   824dc:	af00      	add	r7, sp, #0
   824de:	60f8      	str	r0, [r7, #12]
   824e0:	60b9      	str	r1, [r7, #8]
   824e2:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   824e4:	68b9      	ldr	r1, [r7, #8]
   824e6:	68f8      	ldr	r0, [r7, #12]
   824e8:	4b19      	ldr	r3, [pc, #100]	; (82550 <pio_set_input+0x78>)
   824ea:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   824ec:	687b      	ldr	r3, [r7, #4]
   824ee:	f003 0301 	and.w	r3, r3, #1
   824f2:	461a      	mov	r2, r3
   824f4:	68b9      	ldr	r1, [r7, #8]
   824f6:	68f8      	ldr	r0, [r7, #12]
   824f8:	4b16      	ldr	r3, [pc, #88]	; (82554 <pio_set_input+0x7c>)
   824fa:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   824fc:	687b      	ldr	r3, [r7, #4]
   824fe:	f003 030a 	and.w	r3, r3, #10
   82502:	2b00      	cmp	r3, #0
   82504:	d003      	beq.n	8250e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   82506:	68fb      	ldr	r3, [r7, #12]
   82508:	68ba      	ldr	r2, [r7, #8]
   8250a:	621a      	str	r2, [r3, #32]
   8250c:	e002      	b.n	82514 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8250e:	68fb      	ldr	r3, [r7, #12]
   82510:	68ba      	ldr	r2, [r7, #8]
   82512:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82514:	687b      	ldr	r3, [r7, #4]
   82516:	f003 0302 	and.w	r3, r3, #2
   8251a:	2b00      	cmp	r3, #0
   8251c:	d004      	beq.n	82528 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   8251e:	68fb      	ldr	r3, [r7, #12]
   82520:	68ba      	ldr	r2, [r7, #8]
   82522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82526:	e008      	b.n	8253a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82528:	687b      	ldr	r3, [r7, #4]
   8252a:	f003 0308 	and.w	r3, r3, #8
   8252e:	2b00      	cmp	r3, #0
   82530:	d003      	beq.n	8253a <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   82532:	68fb      	ldr	r3, [r7, #12]
   82534:	68ba      	ldr	r2, [r7, #8]
   82536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8253a:	68fb      	ldr	r3, [r7, #12]
   8253c:	68ba      	ldr	r2, [r7, #8]
   8253e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82540:	68fb      	ldr	r3, [r7, #12]
   82542:	68ba      	ldr	r2, [r7, #8]
   82544:	601a      	str	r2, [r3, #0]
}
   82546:	bf00      	nop
   82548:	3710      	adds	r7, #16
   8254a:	46bd      	mov	sp, r7
   8254c:	bd80      	pop	{r7, pc}
   8254e:	bf00      	nop
   82550:	000825d9 	.word	0x000825d9
   82554:	00082411 	.word	0x00082411

00082558 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82558:	b580      	push	{r7, lr}
   8255a:	b084      	sub	sp, #16
   8255c:	af00      	add	r7, sp, #0
   8255e:	60f8      	str	r0, [r7, #12]
   82560:	60b9      	str	r1, [r7, #8]
   82562:	607a      	str	r2, [r7, #4]
   82564:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   82566:	68b9      	ldr	r1, [r7, #8]
   82568:	68f8      	ldr	r0, [r7, #12]
   8256a:	4b12      	ldr	r3, [pc, #72]	; (825b4 <pio_set_output+0x5c>)
   8256c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   8256e:	69ba      	ldr	r2, [r7, #24]
   82570:	68b9      	ldr	r1, [r7, #8]
   82572:	68f8      	ldr	r0, [r7, #12]
   82574:	4b10      	ldr	r3, [pc, #64]	; (825b8 <pio_set_output+0x60>)
   82576:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82578:	683b      	ldr	r3, [r7, #0]
   8257a:	2b00      	cmp	r3, #0
   8257c:	d003      	beq.n	82586 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   8257e:	68fb      	ldr	r3, [r7, #12]
   82580:	68ba      	ldr	r2, [r7, #8]
   82582:	651a      	str	r2, [r3, #80]	; 0x50
   82584:	e002      	b.n	8258c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82586:	68fb      	ldr	r3, [r7, #12]
   82588:	68ba      	ldr	r2, [r7, #8]
   8258a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8258c:	687b      	ldr	r3, [r7, #4]
   8258e:	2b00      	cmp	r3, #0
   82590:	d003      	beq.n	8259a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   82592:	68fb      	ldr	r3, [r7, #12]
   82594:	68ba      	ldr	r2, [r7, #8]
   82596:	631a      	str	r2, [r3, #48]	; 0x30
   82598:	e002      	b.n	825a0 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8259a:	68fb      	ldr	r3, [r7, #12]
   8259c:	68ba      	ldr	r2, [r7, #8]
   8259e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   825a0:	68fb      	ldr	r3, [r7, #12]
   825a2:	68ba      	ldr	r2, [r7, #8]
   825a4:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   825a6:	68fb      	ldr	r3, [r7, #12]
   825a8:	68ba      	ldr	r2, [r7, #8]
   825aa:	601a      	str	r2, [r3, #0]
}
   825ac:	bf00      	nop
   825ae:	3710      	adds	r7, #16
   825b0:	46bd      	mov	sp, r7
   825b2:	bd80      	pop	{r7, pc}
   825b4:	000825d9 	.word	0x000825d9
   825b8:	00082411 	.word	0x00082411

000825bc <pio_enable_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   825bc:	b480      	push	{r7}
   825be:	b083      	sub	sp, #12
   825c0:	af00      	add	r7, sp, #0
   825c2:	6078      	str	r0, [r7, #4]
   825c4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   825c6:	687b      	ldr	r3, [r7, #4]
   825c8:	683a      	ldr	r2, [r7, #0]
   825ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   825ce:	bf00      	nop
   825d0:	370c      	adds	r7, #12
   825d2:	46bd      	mov	sp, r7
   825d4:	bc80      	pop	{r7}
   825d6:	4770      	bx	lr

000825d8 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   825d8:	b480      	push	{r7}
   825da:	b083      	sub	sp, #12
   825dc:	af00      	add	r7, sp, #0
   825de:	6078      	str	r0, [r7, #4]
   825e0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   825e2:	687b      	ldr	r3, [r7, #4]
   825e4:	683a      	ldr	r2, [r7, #0]
   825e6:	645a      	str	r2, [r3, #68]	; 0x44
}
   825e8:	bf00      	nop
   825ea:	370c      	adds	r7, #12
   825ec:	46bd      	mov	sp, r7
   825ee:	bc80      	pop	{r7}
   825f0:	4770      	bx	lr

000825f2 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   825f2:	b480      	push	{r7}
   825f4:	b083      	sub	sp, #12
   825f6:	af00      	add	r7, sp, #0
   825f8:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   825fa:	687b      	ldr	r3, [r7, #4]
   825fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   825fe:	4618      	mov	r0, r3
   82600:	370c      	adds	r7, #12
   82602:	46bd      	mov	sp, r7
   82604:	bc80      	pop	{r7}
   82606:	4770      	bx	lr

00082608 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   82608:	b480      	push	{r7}
   8260a:	b083      	sub	sp, #12
   8260c:	af00      	add	r7, sp, #0
   8260e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   82610:	687b      	ldr	r3, [r7, #4]
   82612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   82614:	4618      	mov	r0, r3
   82616:	370c      	adds	r7, #12
   82618:	46bd      	mov	sp, r7
   8261a:	bc80      	pop	{r7}
   8261c:	4770      	bx	lr
   8261e:	0000      	movs	r0, r0

00082620 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   82620:	b580      	push	{r7, lr}
   82622:	b084      	sub	sp, #16
   82624:	af00      	add	r7, sp, #0
   82626:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82628:	6878      	ldr	r0, [r7, #4]
   8262a:	4b08      	ldr	r3, [pc, #32]	; (8264c <pio_get_pin_value+0x2c>)
   8262c:	4798      	blx	r3
   8262e:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   82630:	68fb      	ldr	r3, [r7, #12]
   82632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   82634:	687b      	ldr	r3, [r7, #4]
   82636:	f003 031f 	and.w	r3, r3, #31
   8263a:	fa22 f303 	lsr.w	r3, r2, r3
   8263e:	f003 0301 	and.w	r3, r3, #1
}
   82642:	4618      	mov	r0, r3
   82644:	3710      	adds	r7, #16
   82646:	46bd      	mov	sp, r7
   82648:	bd80      	pop	{r7, pc}
   8264a:	bf00      	nop
   8264c:	000828bd 	.word	0x000828bd

00082650 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   82650:	b580      	push	{r7, lr}
   82652:	b084      	sub	sp, #16
   82654:	af00      	add	r7, sp, #0
   82656:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82658:	6878      	ldr	r0, [r7, #4]
   8265a:	4b08      	ldr	r3, [pc, #32]	; (8267c <pio_set_pin_high+0x2c>)
   8265c:	4798      	blx	r3
   8265e:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   82660:	687b      	ldr	r3, [r7, #4]
   82662:	f003 031f 	and.w	r3, r3, #31
   82666:	2201      	movs	r2, #1
   82668:	fa02 f303 	lsl.w	r3, r2, r3
   8266c:	461a      	mov	r2, r3
   8266e:	68fb      	ldr	r3, [r7, #12]
   82670:	631a      	str	r2, [r3, #48]	; 0x30
}
   82672:	bf00      	nop
   82674:	3710      	adds	r7, #16
   82676:	46bd      	mov	sp, r7
   82678:	bd80      	pop	{r7, pc}
   8267a:	bf00      	nop
   8267c:	000828bd 	.word	0x000828bd

00082680 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   82680:	b580      	push	{r7, lr}
   82682:	b084      	sub	sp, #16
   82684:	af00      	add	r7, sp, #0
   82686:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82688:	6878      	ldr	r0, [r7, #4]
   8268a:	4b08      	ldr	r3, [pc, #32]	; (826ac <pio_set_pin_low+0x2c>)
   8268c:	4798      	blx	r3
   8268e:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   82690:	687b      	ldr	r3, [r7, #4]
   82692:	f003 031f 	and.w	r3, r3, #31
   82696:	2201      	movs	r2, #1
   82698:	fa02 f303 	lsl.w	r3, r2, r3
   8269c:	461a      	mov	r2, r3
   8269e:	68fb      	ldr	r3, [r7, #12]
   826a0:	635a      	str	r2, [r3, #52]	; 0x34
}
   826a2:	bf00      	nop
   826a4:	3710      	adds	r7, #16
   826a6:	46bd      	mov	sp, r7
   826a8:	bd80      	pop	{r7, pc}
   826aa:	bf00      	nop
   826ac:	000828bd 	.word	0x000828bd

000826b0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   826b0:	b590      	push	{r4, r7, lr}
   826b2:	b087      	sub	sp, #28
   826b4:	af02      	add	r7, sp, #8
   826b6:	6078      	str	r0, [r7, #4]
   826b8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   826ba:	6878      	ldr	r0, [r7, #4]
   826bc:	4b43      	ldr	r3, [pc, #268]	; (827cc <pio_configure_pin+0x11c>)
   826be:	4798      	blx	r3
   826c0:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   826c2:	683b      	ldr	r3, [r7, #0]
   826c4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   826c8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   826cc:	d057      	beq.n	8277e <pio_configure_pin+0xce>
   826ce:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   826d2:	d873      	bhi.n	827bc <pio_configure_pin+0x10c>
   826d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   826d8:	d051      	beq.n	8277e <pio_configure_pin+0xce>
   826da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   826de:	d86d      	bhi.n	827bc <pio_configure_pin+0x10c>
   826e0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   826e4:	d03f      	beq.n	82766 <pio_configure_pin+0xb6>
   826e6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   826ea:	d867      	bhi.n	827bc <pio_configure_pin+0x10c>
   826ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   826f0:	d003      	beq.n	826fa <pio_configure_pin+0x4a>
   826f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   826f6:	d01b      	beq.n	82730 <pio_configure_pin+0x80>
   826f8:	e060      	b.n	827bc <pio_configure_pin+0x10c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   826fa:	687b      	ldr	r3, [r7, #4]
   826fc:	f003 031f 	and.w	r3, r3, #31
   82700:	2201      	movs	r2, #1
   82702:	fa02 f303 	lsl.w	r3, r2, r3
   82706:	461a      	mov	r2, r3
   82708:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8270c:	68f8      	ldr	r0, [r7, #12]
   8270e:	4b30      	ldr	r3, [pc, #192]	; (827d0 <pio_configure_pin+0x120>)
   82710:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82712:	687b      	ldr	r3, [r7, #4]
   82714:	f003 031f 	and.w	r3, r3, #31
   82718:	2201      	movs	r2, #1
   8271a:	fa02 f303 	lsl.w	r3, r2, r3
   8271e:	4619      	mov	r1, r3
   82720:	683b      	ldr	r3, [r7, #0]
   82722:	f003 0301 	and.w	r3, r3, #1
   82726:	461a      	mov	r2, r3
   82728:	68f8      	ldr	r0, [r7, #12]
   8272a:	4b2a      	ldr	r3, [pc, #168]	; (827d4 <pio_configure_pin+0x124>)
   8272c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8272e:	e047      	b.n	827c0 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82730:	687b      	ldr	r3, [r7, #4]
   82732:	f003 031f 	and.w	r3, r3, #31
   82736:	2201      	movs	r2, #1
   82738:	fa02 f303 	lsl.w	r3, r2, r3
   8273c:	461a      	mov	r2, r3
   8273e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82742:	68f8      	ldr	r0, [r7, #12]
   82744:	4b22      	ldr	r3, [pc, #136]	; (827d0 <pio_configure_pin+0x120>)
   82746:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82748:	687b      	ldr	r3, [r7, #4]
   8274a:	f003 031f 	and.w	r3, r3, #31
   8274e:	2201      	movs	r2, #1
   82750:	fa02 f303 	lsl.w	r3, r2, r3
   82754:	4619      	mov	r1, r3
   82756:	683b      	ldr	r3, [r7, #0]
   82758:	f003 0301 	and.w	r3, r3, #1
   8275c:	461a      	mov	r2, r3
   8275e:	68f8      	ldr	r0, [r7, #12]
   82760:	4b1c      	ldr	r3, [pc, #112]	; (827d4 <pio_configure_pin+0x124>)
   82762:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82764:	e02c      	b.n	827c0 <pio_configure_pin+0x110>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82766:	687b      	ldr	r3, [r7, #4]
   82768:	f003 031f 	and.w	r3, r3, #31
   8276c:	2201      	movs	r2, #1
   8276e:	fa02 f303 	lsl.w	r3, r2, r3
   82772:	683a      	ldr	r2, [r7, #0]
   82774:	4619      	mov	r1, r3
   82776:	68f8      	ldr	r0, [r7, #12]
   82778:	4b17      	ldr	r3, [pc, #92]	; (827d8 <pio_configure_pin+0x128>)
   8277a:	4798      	blx	r3
		break;
   8277c:	e020      	b.n	827c0 <pio_configure_pin+0x110>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8277e:	687b      	ldr	r3, [r7, #4]
   82780:	f003 031f 	and.w	r3, r3, #31
   82784:	2201      	movs	r2, #1
   82786:	fa02 f303 	lsl.w	r3, r2, r3
   8278a:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8278c:	683b      	ldr	r3, [r7, #0]
   8278e:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82792:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82796:	bf0c      	ite	eq
   82798:	2301      	moveq	r3, #1
   8279a:	2300      	movne	r3, #0
   8279c:	b2db      	uxtb	r3, r3
   8279e:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   827a0:	683b      	ldr	r3, [r7, #0]
   827a2:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   827a4:	f003 0201 	and.w	r2, r3, #1
   827a8:	683b      	ldr	r3, [r7, #0]
   827aa:	f003 0301 	and.w	r3, r3, #1
   827ae:	9300      	str	r3, [sp, #0]
   827b0:	4613      	mov	r3, r2
   827b2:	4602      	mov	r2, r0
   827b4:	68f8      	ldr	r0, [r7, #12]
   827b6:	4c09      	ldr	r4, [pc, #36]	; (827dc <pio_configure_pin+0x12c>)
   827b8:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   827ba:	e001      	b.n	827c0 <pio_configure_pin+0x110>

	default:
		return 0;
   827bc:	2300      	movs	r3, #0
   827be:	e000      	b.n	827c2 <pio_configure_pin+0x112>
	}

	return 1;
   827c0:	2301      	movs	r3, #1
}
   827c2:	4618      	mov	r0, r3
   827c4:	3714      	adds	r7, #20
   827c6:	46bd      	mov	sp, r7
   827c8:	bd90      	pop	{r4, r7, pc}
   827ca:	bf00      	nop
   827cc:	000828bd 	.word	0x000828bd
   827d0:	0008243b 	.word	0x0008243b
   827d4:	00082411 	.word	0x00082411
   827d8:	000824d9 	.word	0x000824d9
   827dc:	00082559 	.word	0x00082559

000827e0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   827e0:	b590      	push	{r4, r7, lr}
   827e2:	b087      	sub	sp, #28
   827e4:	af02      	add	r7, sp, #8
   827e6:	60f8      	str	r0, [r7, #12]
   827e8:	60b9      	str	r1, [r7, #8]
   827ea:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   827ec:	687b      	ldr	r3, [r7, #4]
   827ee:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   827f2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   827f6:	d039      	beq.n	8286c <pio_configure_pin_group+0x8c>
   827f8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   827fc:	d84f      	bhi.n	8289e <pio_configure_pin_group+0xbe>
   827fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82802:	d033      	beq.n	8286c <pio_configure_pin_group+0x8c>
   82804:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82808:	d849      	bhi.n	8289e <pio_configure_pin_group+0xbe>
   8280a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8280e:	d027      	beq.n	82860 <pio_configure_pin_group+0x80>
   82810:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82814:	d843      	bhi.n	8289e <pio_configure_pin_group+0xbe>
   82816:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8281a:	d003      	beq.n	82824 <pio_configure_pin_group+0x44>
   8281c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82820:	d00f      	beq.n	82842 <pio_configure_pin_group+0x62>
   82822:	e03c      	b.n	8289e <pio_configure_pin_group+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82824:	68ba      	ldr	r2, [r7, #8]
   82826:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8282a:	68f8      	ldr	r0, [r7, #12]
   8282c:	4b1f      	ldr	r3, [pc, #124]	; (828ac <pio_configure_pin_group+0xcc>)
   8282e:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82830:	687b      	ldr	r3, [r7, #4]
   82832:	f003 0301 	and.w	r3, r3, #1
   82836:	461a      	mov	r2, r3
   82838:	68b9      	ldr	r1, [r7, #8]
   8283a:	68f8      	ldr	r0, [r7, #12]
   8283c:	4b1c      	ldr	r3, [pc, #112]	; (828b0 <pio_configure_pin_group+0xd0>)
   8283e:	4798      	blx	r3
		break;
   82840:	e02f      	b.n	828a2 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82842:	68ba      	ldr	r2, [r7, #8]
   82844:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82848:	68f8      	ldr	r0, [r7, #12]
   8284a:	4b18      	ldr	r3, [pc, #96]	; (828ac <pio_configure_pin_group+0xcc>)
   8284c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8284e:	687b      	ldr	r3, [r7, #4]
   82850:	f003 0301 	and.w	r3, r3, #1
   82854:	461a      	mov	r2, r3
   82856:	68b9      	ldr	r1, [r7, #8]
   82858:	68f8      	ldr	r0, [r7, #12]
   8285a:	4b15      	ldr	r3, [pc, #84]	; (828b0 <pio_configure_pin_group+0xd0>)
   8285c:	4798      	blx	r3
		break;
   8285e:	e020      	b.n	828a2 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82860:	687a      	ldr	r2, [r7, #4]
   82862:	68b9      	ldr	r1, [r7, #8]
   82864:	68f8      	ldr	r0, [r7, #12]
   82866:	4b13      	ldr	r3, [pc, #76]	; (828b4 <pio_configure_pin_group+0xd4>)
   82868:	4798      	blx	r3
		break;
   8286a:	e01a      	b.n	828a2 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8286c:	687b      	ldr	r3, [r7, #4]
   8286e:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82872:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82876:	bf0c      	ite	eq
   82878:	2301      	moveq	r3, #1
   8287a:	2300      	movne	r3, #0
   8287c:	b2db      	uxtb	r3, r3
   8287e:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82880:	687b      	ldr	r3, [r7, #4]
   82882:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   82884:	f003 0201 	and.w	r2, r3, #1
   82888:	687b      	ldr	r3, [r7, #4]
   8288a:	f003 0301 	and.w	r3, r3, #1
   8288e:	9300      	str	r3, [sp, #0]
   82890:	4613      	mov	r3, r2
   82892:	460a      	mov	r2, r1
   82894:	68b9      	ldr	r1, [r7, #8]
   82896:	68f8      	ldr	r0, [r7, #12]
   82898:	4c07      	ldr	r4, [pc, #28]	; (828b8 <pio_configure_pin_group+0xd8>)
   8289a:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8289c:	e001      	b.n	828a2 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   8289e:	2300      	movs	r3, #0
   828a0:	e000      	b.n	828a4 <pio_configure_pin_group+0xc4>
	}

	return 1;
   828a2:	2301      	movs	r3, #1
}
   828a4:	4618      	mov	r0, r3
   828a6:	3714      	adds	r7, #20
   828a8:	46bd      	mov	sp, r7
   828aa:	bd90      	pop	{r4, r7, pc}
   828ac:	0008243b 	.word	0x0008243b
   828b0:	00082411 	.word	0x00082411
   828b4:	000824d9 	.word	0x000824d9
   828b8:	00082559 	.word	0x00082559

000828bc <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   828bc:	b480      	push	{r7}
   828be:	b085      	sub	sp, #20
   828c0:	af00      	add	r7, sp, #0
   828c2:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   828c4:	687b      	ldr	r3, [r7, #4]
   828c6:	095b      	lsrs	r3, r3, #5
   828c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   828cc:	f203 7306 	addw	r3, r3, #1798	; 0x706
   828d0:	025b      	lsls	r3, r3, #9
   828d2:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   828d4:	68fb      	ldr	r3, [r7, #12]
}
   828d6:	4618      	mov	r0, r3
   828d8:	3714      	adds	r7, #20
   828da:	46bd      	mov	sp, r7
   828dc:	bc80      	pop	{r7}
   828de:	4770      	bx	lr

000828e0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   828e0:	b580      	push	{r7, lr}
   828e2:	b084      	sub	sp, #16
   828e4:	af00      	add	r7, sp, #0
   828e6:	6078      	str	r0, [r7, #4]
   828e8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   828ea:	6878      	ldr	r0, [r7, #4]
   828ec:	4b26      	ldr	r3, [pc, #152]	; (82988 <pio_handler_process+0xa8>)
   828ee:	4798      	blx	r3
   828f0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   828f2:	6878      	ldr	r0, [r7, #4]
   828f4:	4b25      	ldr	r3, [pc, #148]	; (8298c <pio_handler_process+0xac>)
   828f6:	4798      	blx	r3
   828f8:	4602      	mov	r2, r0
   828fa:	68fb      	ldr	r3, [r7, #12]
   828fc:	4013      	ands	r3, r2
   828fe:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82900:	68fb      	ldr	r3, [r7, #12]
   82902:	2b00      	cmp	r3, #0
   82904:	d03c      	beq.n	82980 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   82906:	2300      	movs	r3, #0
   82908:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   8290a:	e034      	b.n	82976 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8290c:	4a20      	ldr	r2, [pc, #128]	; (82990 <pio_handler_process+0xb0>)
   8290e:	68bb      	ldr	r3, [r7, #8]
   82910:	011b      	lsls	r3, r3, #4
   82912:	4413      	add	r3, r2
   82914:	681b      	ldr	r3, [r3, #0]
   82916:	683a      	ldr	r2, [r7, #0]
   82918:	429a      	cmp	r2, r3
   8291a:	d126      	bne.n	8296a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8291c:	4a1c      	ldr	r2, [pc, #112]	; (82990 <pio_handler_process+0xb0>)
   8291e:	68bb      	ldr	r3, [r7, #8]
   82920:	011b      	lsls	r3, r3, #4
   82922:	4413      	add	r3, r2
   82924:	3304      	adds	r3, #4
   82926:	681a      	ldr	r2, [r3, #0]
   82928:	68fb      	ldr	r3, [r7, #12]
   8292a:	4013      	ands	r3, r2
   8292c:	2b00      	cmp	r3, #0
   8292e:	d01c      	beq.n	8296a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82930:	4a17      	ldr	r2, [pc, #92]	; (82990 <pio_handler_process+0xb0>)
   82932:	68bb      	ldr	r3, [r7, #8]
   82934:	011b      	lsls	r3, r3, #4
   82936:	4413      	add	r3, r2
   82938:	330c      	adds	r3, #12
   8293a:	681b      	ldr	r3, [r3, #0]
   8293c:	4914      	ldr	r1, [pc, #80]	; (82990 <pio_handler_process+0xb0>)
   8293e:	68ba      	ldr	r2, [r7, #8]
   82940:	0112      	lsls	r2, r2, #4
   82942:	440a      	add	r2, r1
   82944:	6810      	ldr	r0, [r2, #0]
   82946:	4912      	ldr	r1, [pc, #72]	; (82990 <pio_handler_process+0xb0>)
   82948:	68ba      	ldr	r2, [r7, #8]
   8294a:	0112      	lsls	r2, r2, #4
   8294c:	440a      	add	r2, r1
   8294e:	3204      	adds	r2, #4
   82950:	6812      	ldr	r2, [r2, #0]
   82952:	4611      	mov	r1, r2
   82954:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82956:	4a0e      	ldr	r2, [pc, #56]	; (82990 <pio_handler_process+0xb0>)
   82958:	68bb      	ldr	r3, [r7, #8]
   8295a:	011b      	lsls	r3, r3, #4
   8295c:	4413      	add	r3, r2
   8295e:	3304      	adds	r3, #4
   82960:	681b      	ldr	r3, [r3, #0]
   82962:	43db      	mvns	r3, r3
   82964:	68fa      	ldr	r2, [r7, #12]
   82966:	4013      	ands	r3, r2
   82968:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   8296a:	68bb      	ldr	r3, [r7, #8]
   8296c:	3301      	adds	r3, #1
   8296e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   82970:	68bb      	ldr	r3, [r7, #8]
   82972:	2b06      	cmp	r3, #6
   82974:	d803      	bhi.n	8297e <pio_handler_process+0x9e>
		while (status != 0) {
   82976:	68fb      	ldr	r3, [r7, #12]
   82978:	2b00      	cmp	r3, #0
   8297a:	d1c7      	bne.n	8290c <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   8297c:	e000      	b.n	82980 <pio_handler_process+0xa0>
				break;
   8297e:	bf00      	nop
}
   82980:	bf00      	nop
   82982:	3710      	adds	r7, #16
   82984:	46bd      	mov	sp, r7
   82986:	bd80      	pop	{r7, pc}
   82988:	000825f3 	.word	0x000825f3
   8298c:	00082609 	.word	0x00082609
   82990:	200012b8 	.word	0x200012b8

00082994 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82994:	b580      	push	{r7, lr}
   82996:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82998:	210a      	movs	r1, #10
   8299a:	4802      	ldr	r0, [pc, #8]	; (829a4 <PIOA_Handler+0x10>)
   8299c:	4b02      	ldr	r3, [pc, #8]	; (829a8 <PIOA_Handler+0x14>)
   8299e:	4798      	blx	r3
}
   829a0:	bf00      	nop
   829a2:	bd80      	pop	{r7, pc}
   829a4:	400e0c00 	.word	0x400e0c00
   829a8:	000828e1 	.word	0x000828e1

000829ac <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   829ac:	b580      	push	{r7, lr}
   829ae:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   829b0:	210b      	movs	r1, #11
   829b2:	4802      	ldr	r0, [pc, #8]	; (829bc <PIOB_Handler+0x10>)
   829b4:	4b02      	ldr	r3, [pc, #8]	; (829c0 <PIOB_Handler+0x14>)
   829b6:	4798      	blx	r3
}
   829b8:	bf00      	nop
   829ba:	bd80      	pop	{r7, pc}
   829bc:	400e0e00 	.word	0x400e0e00
   829c0:	000828e1 	.word	0x000828e1

000829c4 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   829c4:	b480      	push	{r7}
   829c6:	b085      	sub	sp, #20
   829c8:	af00      	add	r7, sp, #0
   829ca:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   829cc:	4b1c      	ldr	r3, [pc, #112]	; (82a40 <pmc_switch_mck_to_mainck+0x7c>)
   829ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829d0:	f023 0303 	bic.w	r3, r3, #3
   829d4:	4a1a      	ldr	r2, [pc, #104]	; (82a40 <pmc_switch_mck_to_mainck+0x7c>)
   829d6:	f043 0301 	orr.w	r3, r3, #1
   829da:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   829dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   829e0:	60fb      	str	r3, [r7, #12]
   829e2:	e007      	b.n	829f4 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   829e4:	68fb      	ldr	r3, [r7, #12]
   829e6:	2b00      	cmp	r3, #0
   829e8:	d101      	bne.n	829ee <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   829ea:	2301      	movs	r3, #1
   829ec:	e023      	b.n	82a36 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   829ee:	68fb      	ldr	r3, [r7, #12]
   829f0:	3b01      	subs	r3, #1
   829f2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   829f4:	4b12      	ldr	r3, [pc, #72]	; (82a40 <pmc_switch_mck_to_mainck+0x7c>)
   829f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   829f8:	f003 0308 	and.w	r3, r3, #8
   829fc:	2b00      	cmp	r3, #0
   829fe:	d0f1      	beq.n	829e4 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82a00:	4b0f      	ldr	r3, [pc, #60]	; (82a40 <pmc_switch_mck_to_mainck+0x7c>)
   82a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82a08:	490d      	ldr	r1, [pc, #52]	; (82a40 <pmc_switch_mck_to_mainck+0x7c>)
   82a0a:	687b      	ldr	r3, [r7, #4]
   82a0c:	4313      	orrs	r3, r2
   82a0e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82a10:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82a14:	60fb      	str	r3, [r7, #12]
   82a16:	e007      	b.n	82a28 <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82a18:	68fb      	ldr	r3, [r7, #12]
   82a1a:	2b00      	cmp	r3, #0
   82a1c:	d101      	bne.n	82a22 <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   82a1e:	2301      	movs	r3, #1
   82a20:	e009      	b.n	82a36 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   82a22:	68fb      	ldr	r3, [r7, #12]
   82a24:	3b01      	subs	r3, #1
   82a26:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82a28:	4b05      	ldr	r3, [pc, #20]	; (82a40 <pmc_switch_mck_to_mainck+0x7c>)
   82a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82a2c:	f003 0308 	and.w	r3, r3, #8
   82a30:	2b00      	cmp	r3, #0
   82a32:	d0f1      	beq.n	82a18 <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   82a34:	2300      	movs	r3, #0
}
   82a36:	4618      	mov	r0, r3
   82a38:	3714      	adds	r7, #20
   82a3a:	46bd      	mov	sp, r7
   82a3c:	bc80      	pop	{r7}
   82a3e:	4770      	bx	lr
   82a40:	400e0400 	.word	0x400e0400

00082a44 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82a44:	b480      	push	{r7}
   82a46:	b085      	sub	sp, #20
   82a48:	af00      	add	r7, sp, #0
   82a4a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82a4c:	4b1c      	ldr	r3, [pc, #112]	; (82ac0 <pmc_switch_mck_to_pllack+0x7c>)
   82a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82a54:	491a      	ldr	r1, [pc, #104]	; (82ac0 <pmc_switch_mck_to_pllack+0x7c>)
   82a56:	687b      	ldr	r3, [r7, #4]
   82a58:	4313      	orrs	r3, r2
   82a5a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82a60:	60fb      	str	r3, [r7, #12]
   82a62:	e007      	b.n	82a74 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82a64:	68fb      	ldr	r3, [r7, #12]
   82a66:	2b00      	cmp	r3, #0
   82a68:	d101      	bne.n	82a6e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   82a6a:	2301      	movs	r3, #1
   82a6c:	e023      	b.n	82ab6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   82a6e:	68fb      	ldr	r3, [r7, #12]
   82a70:	3b01      	subs	r3, #1
   82a72:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82a74:	4b12      	ldr	r3, [pc, #72]	; (82ac0 <pmc_switch_mck_to_pllack+0x7c>)
   82a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82a78:	f003 0308 	and.w	r3, r3, #8
   82a7c:	2b00      	cmp	r3, #0
   82a7e:	d0f1      	beq.n	82a64 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82a80:	4b0f      	ldr	r3, [pc, #60]	; (82ac0 <pmc_switch_mck_to_pllack+0x7c>)
   82a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a84:	f023 0303 	bic.w	r3, r3, #3
   82a88:	4a0d      	ldr	r2, [pc, #52]	; (82ac0 <pmc_switch_mck_to_pllack+0x7c>)
   82a8a:	f043 0302 	orr.w	r3, r3, #2
   82a8e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82a94:	60fb      	str	r3, [r7, #12]
   82a96:	e007      	b.n	82aa8 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82a98:	68fb      	ldr	r3, [r7, #12]
   82a9a:	2b00      	cmp	r3, #0
   82a9c:	d101      	bne.n	82aa2 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   82a9e:	2301      	movs	r3, #1
   82aa0:	e009      	b.n	82ab6 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   82aa2:	68fb      	ldr	r3, [r7, #12]
   82aa4:	3b01      	subs	r3, #1
   82aa6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82aa8:	4b05      	ldr	r3, [pc, #20]	; (82ac0 <pmc_switch_mck_to_pllack+0x7c>)
   82aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82aac:	f003 0308 	and.w	r3, r3, #8
   82ab0:	2b00      	cmp	r3, #0
   82ab2:	d0f1      	beq.n	82a98 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   82ab4:	2300      	movs	r3, #0
}
   82ab6:	4618      	mov	r0, r3
   82ab8:	3714      	adds	r7, #20
   82aba:	46bd      	mov	sp, r7
   82abc:	bc80      	pop	{r7}
   82abe:	4770      	bx	lr
   82ac0:	400e0400 	.word	0x400e0400

00082ac4 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   82ac4:	b480      	push	{r7}
   82ac6:	b083      	sub	sp, #12
   82ac8:	af00      	add	r7, sp, #0
   82aca:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82acc:	687b      	ldr	r3, [r7, #4]
   82ace:	2b01      	cmp	r3, #1
   82ad0:	d107      	bne.n	82ae2 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   82ad2:	4b08      	ldr	r3, [pc, #32]	; (82af4 <pmc_switch_sclk_to_32kxtal+0x30>)
   82ad4:	689b      	ldr	r3, [r3, #8]
   82ad6:	4a07      	ldr	r2, [pc, #28]	; (82af4 <pmc_switch_sclk_to_32kxtal+0x30>)
   82ad8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82adc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82ae0:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   82ae2:	4b04      	ldr	r3, [pc, #16]	; (82af4 <pmc_switch_sclk_to_32kxtal+0x30>)
   82ae4:	4a04      	ldr	r2, [pc, #16]	; (82af8 <pmc_switch_sclk_to_32kxtal+0x34>)
   82ae6:	601a      	str	r2, [r3, #0]
}
   82ae8:	bf00      	nop
   82aea:	370c      	adds	r7, #12
   82aec:	46bd      	mov	sp, r7
   82aee:	bc80      	pop	{r7}
   82af0:	4770      	bx	lr
   82af2:	bf00      	nop
   82af4:	400e1210 	.word	0x400e1210
   82af8:	a5000008 	.word	0xa5000008

00082afc <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   82afc:	b480      	push	{r7}
   82afe:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82b00:	4b09      	ldr	r3, [pc, #36]	; (82b28 <pmc_osc_is_ready_32kxtal+0x2c>)
   82b02:	695b      	ldr	r3, [r3, #20]
   82b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   82b08:	2b00      	cmp	r3, #0
   82b0a:	d007      	beq.n	82b1c <pmc_osc_is_ready_32kxtal+0x20>
   82b0c:	4b07      	ldr	r3, [pc, #28]	; (82b2c <pmc_osc_is_ready_32kxtal+0x30>)
   82b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82b14:	2b00      	cmp	r3, #0
   82b16:	d001      	beq.n	82b1c <pmc_osc_is_ready_32kxtal+0x20>
   82b18:	2301      	movs	r3, #1
   82b1a:	e000      	b.n	82b1e <pmc_osc_is_ready_32kxtal+0x22>
   82b1c:	2300      	movs	r3, #0
}
   82b1e:	4618      	mov	r0, r3
   82b20:	46bd      	mov	sp, r7
   82b22:	bc80      	pop	{r7}
   82b24:	4770      	bx	lr
   82b26:	bf00      	nop
   82b28:	400e1210 	.word	0x400e1210
   82b2c:	400e0400 	.word	0x400e0400

00082b30 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   82b30:	b480      	push	{r7}
   82b32:	b083      	sub	sp, #12
   82b34:	af00      	add	r7, sp, #0
   82b36:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   82b38:	4b13      	ldr	r3, [pc, #76]	; (82b88 <pmc_osc_enable_fastrc+0x58>)
   82b3a:	6a1b      	ldr	r3, [r3, #32]
   82b3c:	4a12      	ldr	r2, [pc, #72]	; (82b88 <pmc_osc_enable_fastrc+0x58>)
   82b3e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82b42:	f043 0308 	orr.w	r3, r3, #8
   82b46:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82b48:	bf00      	nop
   82b4a:	4b0f      	ldr	r3, [pc, #60]	; (82b88 <pmc_osc_enable_fastrc+0x58>)
   82b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82b52:	2b00      	cmp	r3, #0
   82b54:	d0f9      	beq.n	82b4a <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82b56:	4b0c      	ldr	r3, [pc, #48]	; (82b88 <pmc_osc_enable_fastrc+0x58>)
   82b58:	6a1b      	ldr	r3, [r3, #32]
   82b5a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   82b62:	687a      	ldr	r2, [r7, #4]
   82b64:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82b66:	4a08      	ldr	r2, [pc, #32]	; (82b88 <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   82b68:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82b6c:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82b6e:	bf00      	nop
   82b70:	4b05      	ldr	r3, [pc, #20]	; (82b88 <pmc_osc_enable_fastrc+0x58>)
   82b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82b78:	2b00      	cmp	r3, #0
   82b7a:	d0f9      	beq.n	82b70 <pmc_osc_enable_fastrc+0x40>
}
   82b7c:	bf00      	nop
   82b7e:	bf00      	nop
   82b80:	370c      	adds	r7, #12
   82b82:	46bd      	mov	sp, r7
   82b84:	bc80      	pop	{r7}
   82b86:	4770      	bx	lr
   82b88:	400e0400 	.word	0x400e0400

00082b8c <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   82b8c:	b480      	push	{r7}
   82b8e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   82b90:	4b03      	ldr	r3, [pc, #12]	; (82ba0 <pmc_osc_is_ready_fastrc+0x14>)
   82b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   82b98:	4618      	mov	r0, r3
   82b9a:	46bd      	mov	sp, r7
   82b9c:	bc80      	pop	{r7}
   82b9e:	4770      	bx	lr
   82ba0:	400e0400 	.word	0x400e0400

00082ba4 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   82ba4:	b480      	push	{r7}
   82ba6:	b085      	sub	sp, #20
   82ba8:	af00      	add	r7, sp, #0
   82baa:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   82bac:	4b10      	ldr	r3, [pc, #64]	; (82bf0 <pmc_osc_enable_main_xtal+0x4c>)
   82bae:	6a1b      	ldr	r3, [r3, #32]
   82bb0:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   82bb2:	68fb      	ldr	r3, [r7, #12]
   82bb4:	f023 0303 	bic.w	r3, r3, #3
   82bb8:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82bba:	687b      	ldr	r3, [r7, #4]
   82bbc:	021b      	lsls	r3, r3, #8
   82bbe:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82bc0:	68fb      	ldr	r3, [r7, #12]
   82bc2:	4313      	orrs	r3, r2
   82bc4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82bc8:	f043 0301 	orr.w	r3, r3, #1
   82bcc:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   82bce:	4a08      	ldr	r2, [pc, #32]	; (82bf0 <pmc_osc_enable_main_xtal+0x4c>)
   82bd0:	68fb      	ldr	r3, [r7, #12]
   82bd2:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82bd4:	bf00      	nop
   82bd6:	4b06      	ldr	r3, [pc, #24]	; (82bf0 <pmc_osc_enable_main_xtal+0x4c>)
   82bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82bda:	f003 0301 	and.w	r3, r3, #1
   82bde:	2b00      	cmp	r3, #0
   82be0:	d0f9      	beq.n	82bd6 <pmc_osc_enable_main_xtal+0x32>
}
   82be2:	bf00      	nop
   82be4:	bf00      	nop
   82be6:	3714      	adds	r7, #20
   82be8:	46bd      	mov	sp, r7
   82bea:	bc80      	pop	{r7}
   82bec:	4770      	bx	lr
   82bee:	bf00      	nop
   82bf0:	400e0400 	.word	0x400e0400

00082bf4 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   82bf4:	b480      	push	{r7}
   82bf6:	b083      	sub	sp, #12
   82bf8:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   82bfa:	4b0a      	ldr	r3, [pc, #40]	; (82c24 <pmc_osc_bypass_main_xtal+0x30>)
   82bfc:	6a1b      	ldr	r3, [r3, #32]
   82bfe:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   82c00:	687b      	ldr	r3, [r7, #4]
   82c02:	f023 0303 	bic.w	r3, r3, #3
   82c06:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   82c08:	687b      	ldr	r3, [r7, #4]
   82c0a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82c0e:	f043 0302 	orr.w	r3, r3, #2
   82c12:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   82c14:	4a03      	ldr	r2, [pc, #12]	; (82c24 <pmc_osc_bypass_main_xtal+0x30>)
   82c16:	687b      	ldr	r3, [r7, #4]
   82c18:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   82c1a:	bf00      	nop
   82c1c:	370c      	adds	r7, #12
   82c1e:	46bd      	mov	sp, r7
   82c20:	bc80      	pop	{r7}
   82c22:	4770      	bx	lr
   82c24:	400e0400 	.word	0x400e0400

00082c28 <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   82c28:	b480      	push	{r7}
   82c2a:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   82c2c:	4b03      	ldr	r3, [pc, #12]	; (82c3c <pmc_osc_is_bypassed_main_xtal+0x14>)
   82c2e:	6a1b      	ldr	r3, [r3, #32]
   82c30:	f003 0302 	and.w	r3, r3, #2
}
   82c34:	4618      	mov	r0, r3
   82c36:	46bd      	mov	sp, r7
   82c38:	bc80      	pop	{r7}
   82c3a:	4770      	bx	lr
   82c3c:	400e0400 	.word	0x400e0400

00082c40 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   82c40:	b480      	push	{r7}
   82c42:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   82c44:	4b03      	ldr	r3, [pc, #12]	; (82c54 <pmc_osc_is_ready_main_xtal+0x14>)
   82c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82c48:	f003 0301 	and.w	r3, r3, #1
}
   82c4c:	4618      	mov	r0, r3
   82c4e:	46bd      	mov	sp, r7
   82c50:	bc80      	pop	{r7}
   82c52:	4770      	bx	lr
   82c54:	400e0400 	.word	0x400e0400

00082c58 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82c58:	b480      	push	{r7}
   82c5a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82c5c:	4b03      	ldr	r3, [pc, #12]	; (82c6c <pmc_osc_is_ready_mainck+0x14>)
   82c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82c64:	4618      	mov	r0, r3
   82c66:	46bd      	mov	sp, r7
   82c68:	bc80      	pop	{r7}
   82c6a:	4770      	bx	lr
   82c6c:	400e0400 	.word	0x400e0400

00082c70 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   82c70:	b480      	push	{r7}
   82c72:	b085      	sub	sp, #20
   82c74:	af00      	add	r7, sp, #0
   82c76:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   82c78:	4b0c      	ldr	r3, [pc, #48]	; (82cac <pmc_mainck_osc_select+0x3c>)
   82c7a:	6a1b      	ldr	r3, [r3, #32]
   82c7c:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   82c7e:	687b      	ldr	r3, [r7, #4]
   82c80:	2b00      	cmp	r3, #0
   82c82:	d004      	beq.n	82c8e <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   82c84:	68fb      	ldr	r3, [r7, #12]
   82c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   82c8a:	60fb      	str	r3, [r7, #12]
   82c8c:	e003      	b.n	82c96 <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   82c8e:	68fb      	ldr	r3, [r7, #12]
   82c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   82c94:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   82c96:	4a05      	ldr	r2, [pc, #20]	; (82cac <pmc_mainck_osc_select+0x3c>)
   82c98:	68fb      	ldr	r3, [r7, #12]
   82c9a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82c9e:	6213      	str	r3, [r2, #32]
}
   82ca0:	bf00      	nop
   82ca2:	3714      	adds	r7, #20
   82ca4:	46bd      	mov	sp, r7
   82ca6:	bc80      	pop	{r7}
   82ca8:	4770      	bx	lr
   82caa:	bf00      	nop
   82cac:	400e0400 	.word	0x400e0400

00082cb0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82cb0:	b480      	push	{r7}
   82cb2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82cb4:	4b03      	ldr	r3, [pc, #12]	; (82cc4 <pmc_disable_pllack+0x14>)
   82cb6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82cba:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   82cbc:	bf00      	nop
   82cbe:	46bd      	mov	sp, r7
   82cc0:	bc80      	pop	{r7}
   82cc2:	4770      	bx	lr
   82cc4:	400e0400 	.word	0x400e0400

00082cc8 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82cc8:	b480      	push	{r7}
   82cca:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82ccc:	4b03      	ldr	r3, [pc, #12]	; (82cdc <pmc_is_locked_pllack+0x14>)
   82cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82cd0:	f003 0302 	and.w	r3, r3, #2
}
   82cd4:	4618      	mov	r0, r3
   82cd6:	46bd      	mov	sp, r7
   82cd8:	bc80      	pop	{r7}
   82cda:	4770      	bx	lr
   82cdc:	400e0400 	.word	0x400e0400

00082ce0 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   82ce0:	b480      	push	{r7}
   82ce2:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   82ce4:	4b04      	ldr	r3, [pc, #16]	; (82cf8 <pmc_disable_upll_clock+0x18>)
   82ce6:	69db      	ldr	r3, [r3, #28]
   82ce8:	4a03      	ldr	r2, [pc, #12]	; (82cf8 <pmc_disable_upll_clock+0x18>)
   82cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82cee:	61d3      	str	r3, [r2, #28]
}
   82cf0:	bf00      	nop
   82cf2:	46bd      	mov	sp, r7
   82cf4:	bc80      	pop	{r7}
   82cf6:	4770      	bx	lr
   82cf8:	400e0400 	.word	0x400e0400

00082cfc <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   82cfc:	b480      	push	{r7}
   82cfe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82d00:	4b03      	ldr	r3, [pc, #12]	; (82d10 <pmc_is_locked_upll+0x14>)
   82d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82d08:	4618      	mov	r0, r3
   82d0a:	46bd      	mov	sp, r7
   82d0c:	bc80      	pop	{r7}
   82d0e:	4770      	bx	lr
   82d10:	400e0400 	.word	0x400e0400

00082d14 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82d14:	b480      	push	{r7}
   82d16:	b083      	sub	sp, #12
   82d18:	af00      	add	r7, sp, #0
   82d1a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82d1c:	687b      	ldr	r3, [r7, #4]
   82d1e:	2b1d      	cmp	r3, #29
   82d20:	d901      	bls.n	82d26 <pmc_enable_periph_clk+0x12>
		return 1;
   82d22:	2301      	movs	r3, #1
   82d24:	e015      	b.n	82d52 <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   82d26:	687b      	ldr	r3, [r7, #4]
   82d28:	2b1f      	cmp	r3, #31
   82d2a:	d811      	bhi.n	82d50 <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82d2c:	4b0b      	ldr	r3, [pc, #44]	; (82d5c <pmc_enable_periph_clk+0x48>)
   82d2e:	699a      	ldr	r2, [r3, #24]
   82d30:	2101      	movs	r1, #1
   82d32:	687b      	ldr	r3, [r7, #4]
   82d34:	fa01 f303 	lsl.w	r3, r1, r3
   82d38:	401a      	ands	r2, r3
   82d3a:	2101      	movs	r1, #1
   82d3c:	687b      	ldr	r3, [r7, #4]
   82d3e:	fa01 f303 	lsl.w	r3, r1, r3
   82d42:	429a      	cmp	r2, r3
   82d44:	d004      	beq.n	82d50 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   82d46:	2201      	movs	r2, #1
   82d48:	687b      	ldr	r3, [r7, #4]
   82d4a:	409a      	lsls	r2, r3
   82d4c:	4b03      	ldr	r3, [pc, #12]	; (82d5c <pmc_enable_periph_clk+0x48>)
   82d4e:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82d50:	2300      	movs	r3, #0
}
   82d52:	4618      	mov	r0, r3
   82d54:	370c      	adds	r7, #12
   82d56:	46bd      	mov	sp, r7
   82d58:	bc80      	pop	{r7}
   82d5a:	4770      	bx	lr
   82d5c:	400e0400 	.word	0x400e0400

00082d60 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   82d60:	b480      	push	{r7}
   82d62:	b083      	sub	sp, #12
   82d64:	af00      	add	r7, sp, #0
   82d66:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82d68:	687b      	ldr	r3, [r7, #4]
   82d6a:	2b1d      	cmp	r3, #29
   82d6c:	d901      	bls.n	82d72 <pmc_disable_periph_clk+0x12>
		return 1;
   82d6e:	2301      	movs	r3, #1
   82d70:	e015      	b.n	82d9e <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   82d72:	687b      	ldr	r3, [r7, #4]
   82d74:	2b1f      	cmp	r3, #31
   82d76:	d811      	bhi.n	82d9c <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   82d78:	4b0b      	ldr	r3, [pc, #44]	; (82da8 <pmc_disable_periph_clk+0x48>)
   82d7a:	699a      	ldr	r2, [r3, #24]
   82d7c:	2101      	movs	r1, #1
   82d7e:	687b      	ldr	r3, [r7, #4]
   82d80:	fa01 f303 	lsl.w	r3, r1, r3
   82d84:	401a      	ands	r2, r3
   82d86:	2101      	movs	r1, #1
   82d88:	687b      	ldr	r3, [r7, #4]
   82d8a:	fa01 f303 	lsl.w	r3, r1, r3
   82d8e:	429a      	cmp	r2, r3
   82d90:	d104      	bne.n	82d9c <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   82d92:	2201      	movs	r2, #1
   82d94:	687b      	ldr	r3, [r7, #4]
   82d96:	409a      	lsls	r2, r3
   82d98:	4b03      	ldr	r3, [pc, #12]	; (82da8 <pmc_disable_periph_clk+0x48>)
   82d9a:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   82d9c:	2300      	movs	r3, #0
}
   82d9e:	4618      	mov	r0, r3
   82da0:	370c      	adds	r7, #12
   82da2:	46bd      	mov	sp, r7
   82da4:	bc80      	pop	{r7}
   82da6:	4770      	bx	lr
   82da8:	400e0400 	.word	0x400e0400

00082dac <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   82dac:	b480      	push	{r7}
   82dae:	b083      	sub	sp, #12
   82db0:	af00      	add	r7, sp, #0
   82db2:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   82db4:	4a05      	ldr	r2, [pc, #20]	; (82dcc <pmc_enable_pck+0x20>)
   82db6:	f44f 7180 	mov.w	r1, #256	; 0x100
   82dba:	687b      	ldr	r3, [r7, #4]
   82dbc:	fa01 f303 	lsl.w	r3, r1, r3
   82dc0:	6013      	str	r3, [r2, #0]
}
   82dc2:	bf00      	nop
   82dc4:	370c      	adds	r7, #12
   82dc6:	46bd      	mov	sp, r7
   82dc8:	bc80      	pop	{r7}
   82dca:	4770      	bx	lr
   82dcc:	400e0400 	.word	0x400e0400

00082dd0 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   82dd0:	b480      	push	{r7}
   82dd2:	b083      	sub	sp, #12
   82dd4:	af00      	add	r7, sp, #0
   82dd6:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   82dd8:	687b      	ldr	r3, [r7, #4]
   82dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
   82dde:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   82de0:	4b05      	ldr	r3, [pc, #20]	; (82df8 <pmc_set_fast_startup_input+0x28>)
   82de2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82de4:	4904      	ldr	r1, [pc, #16]	; (82df8 <pmc_set_fast_startup_input+0x28>)
   82de6:	687b      	ldr	r3, [r7, #4]
   82de8:	4313      	orrs	r3, r2
   82dea:	670b      	str	r3, [r1, #112]	; 0x70
}
   82dec:	bf00      	nop
   82dee:	370c      	adds	r7, #12
   82df0:	46bd      	mov	sp, r7
   82df2:	bc80      	pop	{r7}
   82df4:	4770      	bx	lr
   82df6:	bf00      	nop
   82df8:	400e0400 	.word	0x400e0400

00082dfc <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   82dfc:	b480      	push	{r7}
   82dfe:	b083      	sub	sp, #12
   82e00:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   82e02:	4b13      	ldr	r3, [pc, #76]	; (82e50 <pmc_enable_waitmode+0x54>)
   82e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82e06:	4a12      	ldr	r2, [pc, #72]	; (82e50 <pmc_enable_waitmode+0x54>)
   82e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82e0c:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   82e0e:	4b11      	ldr	r3, [pc, #68]	; (82e54 <pmc_enable_waitmode+0x58>)
   82e10:	691b      	ldr	r3, [r3, #16]
   82e12:	4a10      	ldr	r2, [pc, #64]	; (82e54 <pmc_enable_waitmode+0x58>)
   82e14:	f023 0304 	bic.w	r3, r3, #4
   82e18:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   82e1a:	bf20      	wfe
}
   82e1c:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   82e1e:	2300      	movs	r3, #0
   82e20:	607b      	str	r3, [r7, #4]
   82e22:	e004      	b.n	82e2e <pmc_enable_waitmode+0x32>
  __ASM volatile ("nop");
   82e24:	bf00      	nop
}
   82e26:	bf00      	nop
   82e28:	687b      	ldr	r3, [r7, #4]
   82e2a:	3301      	adds	r3, #1
   82e2c:	607b      	str	r3, [r7, #4]
   82e2e:	687b      	ldr	r3, [r7, #4]
   82e30:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82e34:	d3f6      	bcc.n	82e24 <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   82e36:	bf00      	nop
   82e38:	4b05      	ldr	r3, [pc, #20]	; (82e50 <pmc_enable_waitmode+0x54>)
   82e3a:	6a1b      	ldr	r3, [r3, #32]
   82e3c:	f003 0308 	and.w	r3, r3, #8
   82e40:	2b00      	cmp	r3, #0
   82e42:	d0f9      	beq.n	82e38 <pmc_enable_waitmode+0x3c>

}
   82e44:	bf00      	nop
   82e46:	bf00      	nop
   82e48:	370c      	adds	r7, #12
   82e4a:	46bd      	mov	sp, r7
   82e4c:	bc80      	pop	{r7}
   82e4e:	4770      	bx	lr
   82e50:	400e0400 	.word	0x400e0400
   82e54:	e000ed00 	.word	0xe000ed00

00082e58 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   82e58:	b580      	push	{r7, lr}
   82e5a:	b086      	sub	sp, #24
   82e5c:	af00      	add	r7, sp, #0
   82e5e:	60f8      	str	r0, [r7, #12]
   82e60:	60b9      	str	r1, [r7, #8]
   82e62:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   82e64:	2300      	movs	r3, #0
   82e66:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   82e68:	68fb      	ldr	r3, [r7, #12]
   82e6a:	2b00      	cmp	r3, #0
   82e6c:	d012      	beq.n	82e94 <_read+0x3c>
		return -1;
   82e6e:	f04f 33ff 	mov.w	r3, #4294967295
   82e72:	e013      	b.n	82e9c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   82e74:	4b0b      	ldr	r3, [pc, #44]	; (82ea4 <_read+0x4c>)
   82e76:	681b      	ldr	r3, [r3, #0]
   82e78:	4a0b      	ldr	r2, [pc, #44]	; (82ea8 <_read+0x50>)
   82e7a:	6812      	ldr	r2, [r2, #0]
   82e7c:	68b9      	ldr	r1, [r7, #8]
   82e7e:	4610      	mov	r0, r2
   82e80:	4798      	blx	r3
		ptr++;
   82e82:	68bb      	ldr	r3, [r7, #8]
   82e84:	3301      	adds	r3, #1
   82e86:	60bb      	str	r3, [r7, #8]
		nChars++;
   82e88:	697b      	ldr	r3, [r7, #20]
   82e8a:	3301      	adds	r3, #1
   82e8c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   82e8e:	687b      	ldr	r3, [r7, #4]
   82e90:	3b01      	subs	r3, #1
   82e92:	607b      	str	r3, [r7, #4]
   82e94:	687b      	ldr	r3, [r7, #4]
   82e96:	2b00      	cmp	r3, #0
   82e98:	dcec      	bgt.n	82e74 <_read+0x1c>
	}
	return nChars;
   82e9a:	697b      	ldr	r3, [r7, #20]
}
   82e9c:	4618      	mov	r0, r3
   82e9e:	3718      	adds	r7, #24
   82ea0:	46bd      	mov	sp, r7
   82ea2:	bd80      	pop	{r7, pc}
   82ea4:	2000181c 	.word	0x2000181c
   82ea8:	20001844 	.word	0x20001844

00082eac <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   82eac:	b5b0      	push	{r4, r5, r7, lr}
   82eae:	b09c      	sub	sp, #112	; 0x70
   82eb0:	af00      	add	r7, sp, #0
   82eb2:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   82eb4:	687b      	ldr	r3, [r7, #4]
   82eb6:	2b05      	cmp	r3, #5
   82eb8:	f000 81e8 	beq.w	8328c <pmc_sleep+0x3e0>
   82ebc:	687b      	ldr	r3, [r7, #4]
   82ebe:	2b05      	cmp	r3, #5
   82ec0:	f300 81f5 	bgt.w	832ae <pmc_sleep+0x402>
   82ec4:	687b      	ldr	r3, [r7, #4]
   82ec6:	2b02      	cmp	r3, #2
   82ec8:	dc03      	bgt.n	82ed2 <pmc_sleep+0x26>
   82eca:	687b      	ldr	r3, [r7, #4]
   82ecc:	2b00      	cmp	r3, #0
   82ece:	dc06      	bgt.n	82ede <pmc_sleep+0x32>
		__WFE() ;
#endif
		break;
#endif
	}
}
   82ed0:	e1ed      	b.n	832ae <pmc_sleep+0x402>
   82ed2:	687b      	ldr	r3, [r7, #4]
   82ed4:	3b03      	subs	r3, #3
	switch (sleep_mode) {
   82ed6:	2b01      	cmp	r3, #1
   82ed8:	f200 81e9 	bhi.w	832ae <pmc_sleep+0x402>
   82edc:	e01b      	b.n	82f16 <pmc_sleep+0x6a>
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   82ede:	4b88      	ldr	r3, [pc, #544]	; (83100 <pmc_sleep+0x254>)
   82ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82ee2:	4a87      	ldr	r2, [pc, #540]	; (83100 <pmc_sleep+0x254>)
   82ee4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   82ee8:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   82eea:	4b86      	ldr	r3, [pc, #536]	; (83104 <pmc_sleep+0x258>)
   82eec:	691b      	ldr	r3, [r3, #16]
   82eee:	4a85      	ldr	r2, [pc, #532]	; (83104 <pmc_sleep+0x258>)
   82ef0:	f023 0304 	bic.w	r3, r3, #4
   82ef4:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   82ef6:	4b84      	ldr	r3, [pc, #528]	; (83108 <pmc_sleep+0x25c>)
   82ef8:	2201      	movs	r2, #1
   82efa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82efc:	f3bf 8f5f 	dmb	sy
}
   82f00:	bf00      	nop
  __ASM volatile ("cpsie i");
   82f02:	b662      	cpsie	i
}
   82f04:	bf00      	nop
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   82f06:	687b      	ldr	r3, [r7, #4]
   82f08:	2b02      	cmp	r3, #2
   82f0a:	d101      	bne.n	82f10 <pmc_sleep+0x64>
  __ASM volatile ("wfi");
   82f0c:	bf30      	wfi
}
   82f0e:	e001      	b.n	82f14 <pmc_sleep+0x68>
  __ASM volatile ("wfe");
   82f10:	bf20      	wfe
}
   82f12:	bf00      	nop
		break;
   82f14:	e1cb      	b.n	832ae <pmc_sleep+0x402>
  __ASM volatile ("cpsid i");
   82f16:	b672      	cpsid	i
}
   82f18:	bf00      	nop
  __ASM volatile ("dmb");
   82f1a:	f3bf 8f5f 	dmb	sy
}
   82f1e:	bf00      	nop
		cpu_irq_disable();
   82f20:	4b79      	ldr	r3, [pc, #484]	; (83108 <pmc_sleep+0x25c>)
   82f22:	2200      	movs	r2, #0
   82f24:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   82f26:	4b79      	ldr	r3, [pc, #484]	; (8310c <pmc_sleep+0x260>)
   82f28:	2201      	movs	r2, #1
   82f2a:	701a      	strb	r2, [r3, #0]
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   82f2c:	687b      	ldr	r3, [r7, #4]
   82f2e:	2b04      	cmp	r3, #4
   82f30:	bf0c      	ite	eq
   82f32:	2301      	moveq	r3, #1
   82f34:	2300      	movne	r3, #0
   82f36:	b2da      	uxtb	r2, r3
   82f38:	f107 0320 	add.w	r3, r7, #32
   82f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   82f3e:	f107 031c 	add.w	r3, r7, #28
   82f42:	64bb      	str	r3, [r7, #72]	; 0x48
   82f44:	f107 0318 	add.w	r3, r7, #24
   82f48:	647b      	str	r3, [r7, #68]	; 0x44
   82f4a:	f107 0314 	add.w	r3, r7, #20
   82f4e:	643b      	str	r3, [r7, #64]	; 0x40
   82f50:	f107 0310 	add.w	r3, r7, #16
   82f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   82f56:	f107 030c 	add.w	r3, r7, #12
   82f5a:	63bb      	str	r3, [r7, #56]	; 0x38
   82f5c:	4613      	mov	r3, r2
   82f5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   82f62:	4b67      	ldr	r3, [pc, #412]	; (83100 <pmc_sleep+0x254>)
   82f64:	6a1b      	ldr	r3, [r3, #32]
   82f66:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   82f68:	4b65      	ldr	r3, [pc, #404]	; (83100 <pmc_sleep+0x254>)
   82f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   82f6e:	4b68      	ldr	r3, [pc, #416]	; (83110 <pmc_sleep+0x264>)
   82f70:	681b      	ldr	r3, [r3, #0]
   82f72:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   82f74:	4b67      	ldr	r3, [pc, #412]	; (83114 <pmc_sleep+0x268>)
   82f76:	681b      	ldr	r3, [r3, #0]
   82f78:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   82f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   82f7c:	2b00      	cmp	r3, #0
   82f7e:	d002      	beq.n	82f86 <pmc_sleep+0xda>
		*p_osc_setting = mor;
   82f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   82f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   82f84:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   82f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   82f88:	2b00      	cmp	r3, #0
   82f8a:	d003      	beq.n	82f94 <pmc_sleep+0xe8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   82f8c:	4b5c      	ldr	r3, [pc, #368]	; (83100 <pmc_sleep+0x254>)
   82f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   82f92:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   82f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   82f96:	2b00      	cmp	r3, #0
   82f98:	d003      	beq.n	82fa2 <pmc_sleep+0xf6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   82f9a:	4b59      	ldr	r3, [pc, #356]	; (83100 <pmc_sleep+0x254>)
   82f9c:	69da      	ldr	r2, [r3, #28]
   82f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   82fa0:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   82fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82fa4:	2b00      	cmp	r3, #0
   82fa6:	d002      	beq.n	82fae <pmc_sleep+0x102>
		*p_mck_setting  = mckr;
   82fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   82fac:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   82fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82fb0:	2b00      	cmp	r3, #0
   82fb2:	d002      	beq.n	82fba <pmc_sleep+0x10e>
		*p_fmr_setting  = fmr;
   82fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   82fb8:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   82fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82fbc:	2b00      	cmp	r3, #0
   82fbe:	d002      	beq.n	82fc6 <pmc_sleep+0x11a>
		*p_fmr_setting1 = fmr1;
   82fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   82fc4:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   82fc6:	4a4e      	ldr	r2, [pc, #312]	; (83100 <pmc_sleep+0x254>)
   82fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82fca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82fce:	f043 0308 	orr.w	r3, r3, #8
   82fd2:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   82fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82fd6:	f003 0302 	and.w	r3, r3, #2
   82fda:	2b00      	cmp	r3, #0
   82fdc:	d00f      	beq.n	82ffe <pmc_sleep+0x152>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   82fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82fe0:	f023 0303 	bic.w	r3, r3, #3
   82fe4:	f043 0301 	orr.w	r3, r3, #1
   82fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   82fea:	4a45      	ldr	r2, [pc, #276]	; (83100 <pmc_sleep+0x254>)
   82fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82fee:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82ff0:	bf00      	nop
   82ff2:	4b43      	ldr	r3, [pc, #268]	; (83100 <pmc_sleep+0x254>)
   82ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82ff6:	f003 0308 	and.w	r3, r3, #8
   82ffa:	2b00      	cmp	r3, #0
   82ffc:	d0f9      	beq.n	82ff2 <pmc_sleep+0x146>
	if (mckr & PMC_MCKR_PRES_Msk) {
   82ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83000:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83004:	2b00      	cmp	r3, #0
   83006:	d00d      	beq.n	83024 <pmc_sleep+0x178>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   83008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8300e:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   83010:	4a3b      	ldr	r2, [pc, #236]	; (83100 <pmc_sleep+0x254>)
   83012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83014:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   83016:	bf00      	nop
   83018:	4b39      	ldr	r3, [pc, #228]	; (83100 <pmc_sleep+0x254>)
   8301a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8301c:	f003 0308 	and.w	r3, r3, #8
   83020:	2b00      	cmp	r3, #0
   83022:	d0f9      	beq.n	83018 <pmc_sleep+0x16c>
	pmc_disable_pllack();
   83024:	4b3c      	ldr	r3, [pc, #240]	; (83118 <pmc_sleep+0x26c>)
   83026:	4798      	blx	r3
	pmc_disable_upll_clock();
   83028:	4b3c      	ldr	r3, [pc, #240]	; (8311c <pmc_sleep+0x270>)
   8302a:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8302c:	bf00      	nop
   8302e:	4b34      	ldr	r3, [pc, #208]	; (83100 <pmc_sleep+0x254>)
   83030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83036:	2b00      	cmp	r3, #0
   83038:	d0f9      	beq.n	8302e <pmc_sleep+0x182>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   8303a:	4b31      	ldr	r3, [pc, #196]	; (83100 <pmc_sleep+0x254>)
   8303c:	6a1b      	ldr	r3, [r3, #32]
   8303e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   83042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83046:	4a2e      	ldr	r2, [pc, #184]	; (83100 <pmc_sleep+0x254>)
   83048:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8304c:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   8304e:	bf00      	nop
   83050:	4b2b      	ldr	r3, [pc, #172]	; (83100 <pmc_sleep+0x254>)
   83052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   83058:	2b00      	cmp	r3, #0
   8305a:	d0f9      	beq.n	83050 <pmc_sleep+0x1a4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   8305c:	4a2c      	ldr	r2, [pc, #176]	; (83110 <pmc_sleep+0x264>)
   8305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   83060:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   83064:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   83066:	4a2b      	ldr	r2, [pc, #172]	; (83114 <pmc_sleep+0x268>)
   83068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8306a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   8306e:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   83070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   83074:	2b00      	cmp	r3, #0
   83076:	d009      	beq.n	8308c <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83078:	4b21      	ldr	r3, [pc, #132]	; (83100 <pmc_sleep+0x254>)
   8307a:	6a1b      	ldr	r3, [r3, #32]
   8307c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83080:	f023 0301 	bic.w	r3, r3, #1
   83084:	4a1e      	ldr	r2, [pc, #120]	; (83100 <pmc_sleep+0x254>)
   83086:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8308a:	6213      	str	r3, [r2, #32]
}
   8308c:	bf00      	nop
		cpu_irq_enable();
   8308e:	4b1e      	ldr	r3, [pc, #120]	; (83108 <pmc_sleep+0x25c>)
   83090:	2201      	movs	r2, #1
   83092:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   83094:	f3bf 8f5f 	dmb	sy
}
   83098:	bf00      	nop
  __ASM volatile ("cpsie i");
   8309a:	b662      	cpsie	i
}
   8309c:	bf00      	nop
		pmc_enable_waitmode();
   8309e:	4b20      	ldr	r3, [pc, #128]	; (83120 <pmc_sleep+0x274>)
   830a0:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   830a2:	b672      	cpsid	i
}
   830a4:	bf00      	nop
  __ASM volatile ("dmb");
   830a6:	f3bf 8f5f 	dmb	sy
}
   830aa:	bf00      	nop
		cpu_irq_disable();
   830ac:	4b16      	ldr	r3, [pc, #88]	; (83108 <pmc_sleep+0x25c>)
   830ae:	2200      	movs	r2, #0
   830b0:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   830b2:	6a3d      	ldr	r5, [r7, #32]
   830b4:	69fc      	ldr	r4, [r7, #28]
   830b6:	69b8      	ldr	r0, [r7, #24]
   830b8:	6979      	ldr	r1, [r7, #20]
   830ba:	693a      	ldr	r2, [r7, #16]
   830bc:	68fb      	ldr	r3, [r7, #12]
   830be:	66fd      	str	r5, [r7, #108]	; 0x6c
   830c0:	66bc      	str	r4, [r7, #104]	; 0x68
   830c2:	6678      	str	r0, [r7, #100]	; 0x64
   830c4:	6639      	str	r1, [r7, #96]	; 0x60
   830c6:	65fa      	str	r2, [r7, #92]	; 0x5c
   830c8:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   830ca:	2300      	movs	r3, #0
   830cc:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   830ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   830d0:	f003 0302 	and.w	r3, r3, #2
   830d4:	2b00      	cmp	r3, #0
   830d6:	d029      	beq.n	8312c <pmc_sleep+0x280>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   830d8:	4b09      	ldr	r3, [pc, #36]	; (83100 <pmc_sleep+0x254>)
   830da:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   830dc:	4a11      	ldr	r2, [pc, #68]	; (83124 <pmc_sleep+0x278>)
   830de:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   830e0:	4907      	ldr	r1, [pc, #28]	; (83100 <pmc_sleep+0x254>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   830e2:	4b11      	ldr	r3, [pc, #68]	; (83128 <pmc_sleep+0x27c>)
   830e4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   830e6:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   830e8:	4b05      	ldr	r3, [pc, #20]	; (83100 <pmc_sleep+0x254>)
   830ea:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   830ec:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   830f0:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   830f4:	4a02      	ldr	r2, [pc, #8]	; (83100 <pmc_sleep+0x254>)
				| CKGR_MOR_KEY_PASSWD;
   830f6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   830fa:	6213      	str	r3, [r2, #32]
   830fc:	e053      	b.n	831a6 <pmc_sleep+0x2fa>
   830fe:	bf00      	nop
   83100:	400e0400 	.word	0x400e0400
   83104:	e000ed00 	.word	0xe000ed00
   83108:	20000284 	.word	0x20000284
   8310c:	20001328 	.word	0x20001328
   83110:	400e0800 	.word	0x400e0800
   83114:	400e0a00 	.word	0x400e0a00
   83118:	00082cb1 	.word	0x00082cb1
   8311c:	00082ce1 	.word	0x00082ce1
   83120:	00082dfd 	.word	0x00082dfd
   83124:	fec8fffc 	.word	0xfec8fffc
   83128:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   8312c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   8312e:	f003 0301 	and.w	r3, r3, #1
   83132:	2b00      	cmp	r3, #0
   83134:	d037      	beq.n	831a6 <pmc_sleep+0x2fa>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   83136:	4b60      	ldr	r3, [pc, #384]	; (832b8 <pmc_sleep+0x40c>)
   83138:	6a1b      	ldr	r3, [r3, #32]
   8313a:	f003 0301 	and.w	r3, r3, #1
   8313e:	2b00      	cmp	r3, #0
   83140:	d112      	bne.n	83168 <pmc_sleep+0x2bc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83142:	4b5d      	ldr	r3, [pc, #372]	; (832b8 <pmc_sleep+0x40c>)
   83144:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   83146:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8314a:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8314e:	4a5a      	ldr	r2, [pc, #360]	; (832b8 <pmc_sleep+0x40c>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   83150:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83154:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83158:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8315a:	bf00      	nop
   8315c:	4b56      	ldr	r3, [pc, #344]	; (832b8 <pmc_sleep+0x40c>)
   8315e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83160:	f003 0301 	and.w	r3, r3, #1
   83164:	2b00      	cmp	r3, #0
   83166:	d0f9      	beq.n	8315c <pmc_sleep+0x2b0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   83168:	4b53      	ldr	r3, [pc, #332]	; (832b8 <pmc_sleep+0x40c>)
   8316a:	6a1b      	ldr	r3, [r3, #32]
   8316c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83170:	2b00      	cmp	r3, #0
   83172:	d10e      	bne.n	83192 <pmc_sleep+0x2e6>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83174:	4b50      	ldr	r3, [pc, #320]	; (832b8 <pmc_sleep+0x40c>)
   83176:	6a1b      	ldr	r3, [r3, #32]
   83178:	4a4f      	ldr	r2, [pc, #316]	; (832b8 <pmc_sleep+0x40c>)
   8317a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8317e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83182:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   83184:	bf00      	nop
   83186:	4b4c      	ldr	r3, [pc, #304]	; (832b8 <pmc_sleep+0x40c>)
   83188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8318a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   8318e:	2b00      	cmp	r3, #0
   83190:	d0f9      	beq.n	83186 <pmc_sleep+0x2da>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   83192:	4b49      	ldr	r3, [pc, #292]	; (832b8 <pmc_sleep+0x40c>)
   83194:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   83196:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8319a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8319e:	4a46      	ldr	r2, [pc, #280]	; (832b8 <pmc_sleep+0x40c>)
					| CKGR_MOR_KEY_PASSWD;
   831a0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   831a4:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   831a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   831a8:	4b44      	ldr	r3, [pc, #272]	; (832bc <pmc_sleep+0x410>)
   831aa:	4013      	ands	r3, r2
   831ac:	2b00      	cmp	r3, #0
   831ae:	d008      	beq.n	831c2 <pmc_sleep+0x316>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   831b0:	4a41      	ldr	r2, [pc, #260]	; (832b8 <pmc_sleep+0x40c>)
   831b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   831b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   831b8:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   831ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   831bc:	f043 0302 	orr.w	r3, r3, #2
   831c0:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   831c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   831c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   831c8:	2b00      	cmp	r3, #0
   831ca:	d006      	beq.n	831da <pmc_sleep+0x32e>
		PMC->CKGR_UCKR = pll1_setting;
   831cc:	4a3a      	ldr	r2, [pc, #232]	; (832b8 <pmc_sleep+0x40c>)
   831ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   831d0:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   831d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   831d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   831d8:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   831da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   831dc:	f003 0303 	and.w	r3, r3, #3
   831e0:	2b02      	cmp	r3, #2
   831e2:	d002      	beq.n	831ea <pmc_sleep+0x33e>
   831e4:	2b03      	cmp	r3, #3
   831e6:	d008      	beq.n	831fa <pmc_sleep+0x34e>
   831e8:	e00f      	b.n	8320a <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   831ea:	bf00      	nop
   831ec:	4b32      	ldr	r3, [pc, #200]	; (832b8 <pmc_sleep+0x40c>)
   831ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   831f0:	f003 0302 	and.w	r3, r3, #2
   831f4:	2b00      	cmp	r3, #0
   831f6:	d0f9      	beq.n	831ec <pmc_sleep+0x340>
		break;
   831f8:	e007      	b.n	8320a <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   831fa:	bf00      	nop
   831fc:	4b2e      	ldr	r3, [pc, #184]	; (832b8 <pmc_sleep+0x40c>)
   831fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83200:	f003 0340 	and.w	r3, r3, #64	; 0x40
   83204:	2b00      	cmp	r3, #0
   83206:	d0f9      	beq.n	831fc <pmc_sleep+0x350>
		break;
   83208:	bf00      	nop
	mckr = PMC->PMC_MCKR;
   8320a:	4b2b      	ldr	r3, [pc, #172]	; (832b8 <pmc_sleep+0x40c>)
   8320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8320e:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   83210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   83212:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   83216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   83218:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   8321c:	4926      	ldr	r1, [pc, #152]	; (832b8 <pmc_sleep+0x40c>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   8321e:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   83220:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   83222:	bf00      	nop
   83224:	4b24      	ldr	r3, [pc, #144]	; (832b8 <pmc_sleep+0x40c>)
   83226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83228:	f003 0308 	and.w	r3, r3, #8
   8322c:	2b00      	cmp	r3, #0
   8322e:	d0f9      	beq.n	83224 <pmc_sleep+0x378>
	EFC0->EEFC_FMR = fmr_setting;
   83230:	4a23      	ldr	r2, [pc, #140]	; (832c0 <pmc_sleep+0x414>)
   83232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   83234:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   83236:	4a23      	ldr	r2, [pc, #140]	; (832c4 <pmc_sleep+0x418>)
   83238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   8323a:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   8323c:	4a1e      	ldr	r2, [pc, #120]	; (832b8 <pmc_sleep+0x40c>)
   8323e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   83240:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   83242:	bf00      	nop
   83244:	4b1c      	ldr	r3, [pc, #112]	; (832b8 <pmc_sleep+0x40c>)
   83246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83248:	f003 0308 	and.w	r3, r3, #8
   8324c:	2b00      	cmp	r3, #0
   8324e:	d0f9      	beq.n	83244 <pmc_sleep+0x398>
	while (!(PMC->PMC_SR & pll_sr));
   83250:	bf00      	nop
   83252:	4b19      	ldr	r3, [pc, #100]	; (832b8 <pmc_sleep+0x40c>)
   83254:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   83256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   83258:	4013      	ands	r3, r2
   8325a:	2b00      	cmp	r3, #0
   8325c:	d0f9      	beq.n	83252 <pmc_sleep+0x3a6>
}
   8325e:	bf00      	nop
		b_is_sleep_clock_used = false;
   83260:	4b19      	ldr	r3, [pc, #100]	; (832c8 <pmc_sleep+0x41c>)
   83262:	2200      	movs	r2, #0
   83264:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   83266:	4b19      	ldr	r3, [pc, #100]	; (832cc <pmc_sleep+0x420>)
   83268:	681b      	ldr	r3, [r3, #0]
   8326a:	2b00      	cmp	r3, #0
   8326c:	d005      	beq.n	8327a <pmc_sleep+0x3ce>
			callback_clocks_restored();
   8326e:	4b17      	ldr	r3, [pc, #92]	; (832cc <pmc_sleep+0x420>)
   83270:	681b      	ldr	r3, [r3, #0]
   83272:	4798      	blx	r3
			callback_clocks_restored = NULL;
   83274:	4b15      	ldr	r3, [pc, #84]	; (832cc <pmc_sleep+0x420>)
   83276:	2200      	movs	r2, #0
   83278:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
   8327a:	4b15      	ldr	r3, [pc, #84]	; (832d0 <pmc_sleep+0x424>)
   8327c:	2201      	movs	r2, #1
   8327e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   83280:	f3bf 8f5f 	dmb	sy
}
   83284:	bf00      	nop
  __ASM volatile ("cpsie i");
   83286:	b662      	cpsie	i
}
   83288:	bf00      	nop
		break;
   8328a:	e010      	b.n	832ae <pmc_sleep+0x402>
		SCB->SCR |= SCR_SLEEPDEEP;
   8328c:	4b11      	ldr	r3, [pc, #68]	; (832d4 <pmc_sleep+0x428>)
   8328e:	691b      	ldr	r3, [r3, #16]
   83290:	4a10      	ldr	r2, [pc, #64]	; (832d4 <pmc_sleep+0x428>)
   83292:	f043 0304 	orr.w	r3, r3, #4
   83296:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   83298:	4b0d      	ldr	r3, [pc, #52]	; (832d0 <pmc_sleep+0x424>)
   8329a:	2201      	movs	r2, #1
   8329c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8329e:	f3bf 8f5f 	dmb	sy
}
   832a2:	bf00      	nop
  __ASM volatile ("cpsie i");
   832a4:	b662      	cpsie	i
}
   832a6:	bf00      	nop
  __ASM volatile ("wfe");
   832a8:	bf20      	wfe
}
   832aa:	bf00      	nop
		break;
   832ac:	bf00      	nop
}
   832ae:	bf00      	nop
   832b0:	3770      	adds	r7, #112	; 0x70
   832b2:	46bd      	mov	sp, r7
   832b4:	bdb0      	pop	{r4, r5, r7, pc}
   832b6:	bf00      	nop
   832b8:	400e0400 	.word	0x400e0400
   832bc:	07ff0000 	.word	0x07ff0000
   832c0:	400e0800 	.word	0x400e0800
   832c4:	400e0a00 	.word	0x400e0a00
   832c8:	20001328 	.word	0x20001328
   832cc:	2000132c 	.word	0x2000132c
   832d0:	20000284 	.word	0x20000284
   832d4:	e000ed00 	.word	0xe000ed00

000832d8 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   832d8:	b480      	push	{r7}
   832da:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   832dc:	4b08      	ldr	r3, [pc, #32]	; (83300 <pmc_is_wakeup_clocks_restored+0x28>)
   832de:	781b      	ldrb	r3, [r3, #0]
   832e0:	b2db      	uxtb	r3, r3
   832e2:	2b00      	cmp	r3, #0
   832e4:	bf14      	ite	ne
   832e6:	2301      	movne	r3, #1
   832e8:	2300      	moveq	r3, #0
   832ea:	b2db      	uxtb	r3, r3
   832ec:	f083 0301 	eor.w	r3, r3, #1
   832f0:	b2db      	uxtb	r3, r3
   832f2:	f003 0301 	and.w	r3, r3, #1
   832f6:	b2db      	uxtb	r3, r3
}
   832f8:	4618      	mov	r0, r3
   832fa:	46bd      	mov	sp, r7
   832fc:	bc80      	pop	{r7}
   832fe:	4770      	bx	lr
   83300:	20001328 	.word	0x20001328

00083304 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   83304:	b480      	push	{r7}
   83306:	b085      	sub	sp, #20
   83308:	af00      	add	r7, sp, #0
   8330a:	60f8      	str	r0, [r7, #12]
   8330c:	60b9      	str	r1, [r7, #8]
   8330e:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   83310:	68f9      	ldr	r1, [r7, #12]
   83312:	68ba      	ldr	r2, [r7, #8]
   83314:	4613      	mov	r3, r2
   83316:	009b      	lsls	r3, r3, #2
   83318:	4413      	add	r3, r2
   8331a:	009b      	lsls	r3, r3, #2
   8331c:	440b      	add	r3, r1
   8331e:	3370      	adds	r3, #112	; 0x70
   83320:	687a      	ldr	r2, [r7, #4]
   83322:	601a      	str	r2, [r3, #0]
}
   83324:	bf00      	nop
   83326:	3714      	adds	r7, #20
   83328:	46bd      	mov	sp, r7
   8332a:	bc80      	pop	{r7}
   8332c:	4770      	bx	lr

0008332e <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   8332e:	b480      	push	{r7}
   83330:	b085      	sub	sp, #20
   83332:	af00      	add	r7, sp, #0
   83334:	60f8      	str	r0, [r7, #12]
   83336:	60b9      	str	r1, [r7, #8]
   83338:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   8333a:	68f9      	ldr	r1, [r7, #12]
   8333c:	68ba      	ldr	r2, [r7, #8]
   8333e:	4613      	mov	r3, r2
   83340:	009b      	lsls	r3, r3, #2
   83342:	4413      	add	r3, r2
   83344:	009b      	lsls	r3, r3, #2
   83346:	440b      	add	r3, r1
   83348:	3374      	adds	r3, #116	; 0x74
   8334a:	687a      	ldr	r2, [r7, #4]
   8334c:	601a      	str	r2, [r3, #0]
}
   8334e:	bf00      	nop
   83350:	3714      	adds	r7, #20
   83352:	46bd      	mov	sp, r7
   83354:	bc80      	pop	{r7}
   83356:	4770      	bx	lr

00083358 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   83358:	b480      	push	{r7}
   8335a:	b085      	sub	sp, #20
   8335c:	af00      	add	r7, sp, #0
   8335e:	60f8      	str	r0, [r7, #12]
   83360:	60b9      	str	r1, [r7, #8]
   83362:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   83364:	68f9      	ldr	r1, [r7, #12]
   83366:	68ba      	ldr	r2, [r7, #8]
   83368:	4613      	mov	r3, r2
   8336a:	009b      	lsls	r3, r3, #2
   8336c:	4413      	add	r3, r2
   8336e:	009b      	lsls	r3, r3, #2
   83370:	440b      	add	r3, r1
   83372:	3378      	adds	r3, #120	; 0x78
   83374:	687a      	ldr	r2, [r7, #4]
   83376:	601a      	str	r2, [r3, #0]
}
   83378:	bf00      	nop
   8337a:	3714      	adds	r7, #20
   8337c:	46bd      	mov	sp, r7
   8337e:	bc80      	pop	{r7}
   83380:	4770      	bx	lr

00083382 <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   83382:	b480      	push	{r7}
   83384:	b085      	sub	sp, #20
   83386:	af00      	add	r7, sp, #0
   83388:	60f8      	str	r0, [r7, #12]
   8338a:	60b9      	str	r1, [r7, #8]
   8338c:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   8338e:	68f9      	ldr	r1, [r7, #12]
   83390:	68ba      	ldr	r2, [r7, #8]
   83392:	4613      	mov	r3, r2
   83394:	009b      	lsls	r3, r3, #2
   83396:	4413      	add	r3, r2
   83398:	009b      	lsls	r3, r3, #2
   8339a:	440b      	add	r3, r1
   8339c:	3380      	adds	r3, #128	; 0x80
   8339e:	687a      	ldr	r2, [r7, #4]
   833a0:	601a      	str	r2, [r3, #0]
}
   833a2:	bf00      	nop
   833a4:	3714      	adds	r7, #20
   833a6:	46bd      	mov	sp, r7
   833a8:	bc80      	pop	{r7}
   833aa:	4770      	bx	lr

000833ac <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   833ac:	b480      	push	{r7}
   833ae:	b085      	sub	sp, #20
   833b0:	af00      	add	r7, sp, #0
   833b2:	60f8      	str	r0, [r7, #12]
   833b4:	60b9      	str	r1, [r7, #8]
   833b6:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   833b8:	687b      	ldr	r3, [r7, #4]
   833ba:	2b00      	cmp	r3, #0
   833bc:	d00c      	beq.n	833d8 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   833be:	68fb      	ldr	r3, [r7, #12]
   833c0:	68ba      	ldr	r2, [r7, #8]
   833c2:	320c      	adds	r2, #12
   833c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   833c8:	f043 0101 	orr.w	r1, r3, #1
   833cc:	68fb      	ldr	r3, [r7, #12]
   833ce:	68ba      	ldr	r2, [r7, #8]
   833d0:	320c      	adds	r2, #12
   833d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
   833d6:	e00b      	b.n	833f0 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   833d8:	68fb      	ldr	r3, [r7, #12]
   833da:	68ba      	ldr	r2, [r7, #8]
   833dc:	320c      	adds	r2, #12
   833de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   833e2:	f023 0101 	bic.w	r1, r3, #1
   833e6:	68fb      	ldr	r3, [r7, #12]
   833e8:	68ba      	ldr	r2, [r7, #8]
   833ea:	320c      	adds	r2, #12
   833ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   833f0:	bf00      	nop
   833f2:	3714      	adds	r7, #20
   833f4:	46bd      	mov	sp, r7
   833f6:	bc80      	pop	{r7}
   833f8:	4770      	bx	lr

000833fa <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   833fa:	b480      	push	{r7}
   833fc:	b085      	sub	sp, #20
   833fe:	af00      	add	r7, sp, #0
   83400:	60f8      	str	r0, [r7, #12]
   83402:	60b9      	str	r1, [r7, #8]
   83404:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   83406:	687b      	ldr	r3, [r7, #4]
   83408:	2b00      	cmp	r3, #0
   8340a:	d00c      	beq.n	83426 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   8340c:	68fb      	ldr	r3, [r7, #12]
   8340e:	68ba      	ldr	r2, [r7, #8]
   83410:	320c      	adds	r2, #12
   83412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83416:	f043 0102 	orr.w	r1, r3, #2
   8341a:	68fb      	ldr	r3, [r7, #12]
   8341c:	68ba      	ldr	r2, [r7, #8]
   8341e:	320c      	adds	r2, #12
   83420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
   83424:	e00b      	b.n	8343e <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   83426:	68fb      	ldr	r3, [r7, #12]
   83428:	68ba      	ldr	r2, [r7, #8]
   8342a:	320c      	adds	r2, #12
   8342c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83430:	f023 0102 	bic.w	r1, r3, #2
   83434:	68fb      	ldr	r3, [r7, #12]
   83436:	68ba      	ldr	r2, [r7, #8]
   83438:	320c      	adds	r2, #12
   8343a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8343e:	bf00      	nop
   83440:	3714      	adds	r7, #20
   83442:	46bd      	mov	sp, r7
   83444:	bc80      	pop	{r7}
   83446:	4770      	bx	lr

00083448 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   83448:	b480      	push	{r7}
   8344a:	b085      	sub	sp, #20
   8344c:	af00      	add	r7, sp, #0
   8344e:	60f8      	str	r0, [r7, #12]
   83450:	60b9      	str	r1, [r7, #8]
   83452:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   83454:	68fb      	ldr	r3, [r7, #12]
   83456:	68ba      	ldr	r2, [r7, #8]
   83458:	320c      	adds	r2, #12
   8345a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8345e:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   83462:	68fb      	ldr	r3, [r7, #12]
   83464:	68ba      	ldr	r2, [r7, #8]
   83466:	320c      	adds	r2, #12
   83468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   8346c:	68fb      	ldr	r3, [r7, #12]
   8346e:	68ba      	ldr	r2, [r7, #8]
   83470:	320c      	adds	r2, #12
   83472:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   83476:	687b      	ldr	r3, [r7, #4]
   83478:	ea42 0103 	orr.w	r1, r2, r3
   8347c:	68fb      	ldr	r3, [r7, #12]
   8347e:	68ba      	ldr	r2, [r7, #8]
   83480:	320c      	adds	r2, #12
   83482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   83486:	bf00      	nop
   83488:	3714      	adds	r7, #20
   8348a:	46bd      	mov	sp, r7
   8348c:	bc80      	pop	{r7}
   8348e:	4770      	bx	lr

00083490 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   83490:	b480      	push	{r7}
   83492:	b085      	sub	sp, #20
   83494:	af00      	add	r7, sp, #0
   83496:	6078      	str	r0, [r7, #4]
   83498:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
   8349a:	683a      	ldr	r2, [r7, #0]
   8349c:	687b      	ldr	r3, [r7, #4]
   8349e:	4413      	add	r3, r2
   834a0:	1e5a      	subs	r2, r3, #1
   834a2:	687b      	ldr	r3, [r7, #4]
   834a4:	fbb2 f3f3 	udiv	r3, r2, r3
   834a8:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   834aa:	68fb      	ldr	r3, [r7, #12]
   834ac:	2b00      	cmp	r3, #0
   834ae:	dd02      	ble.n	834b6 <spi_calc_baudrate_div+0x26>
   834b0:	68fb      	ldr	r3, [r7, #12]
   834b2:	2bff      	cmp	r3, #255	; 0xff
   834b4:	dd02      	ble.n	834bc <spi_calc_baudrate_div+0x2c>
		return -1;
   834b6:	f04f 33ff 	mov.w	r3, #4294967295
   834ba:	e001      	b.n	834c0 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
   834bc:	68fb      	ldr	r3, [r7, #12]
   834be:	b21b      	sxth	r3, r3
}
   834c0:	4618      	mov	r0, r3
   834c2:	3714      	adds	r7, #20
   834c4:	46bd      	mov	sp, r7
   834c6:	bc80      	pop	{r7}
   834c8:	4770      	bx	lr

000834ca <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   834ca:	b480      	push	{r7}
   834cc:	b085      	sub	sp, #20
   834ce:	af00      	add	r7, sp, #0
   834d0:	60f8      	str	r0, [r7, #12]
   834d2:	60b9      	str	r1, [r7, #8]
   834d4:	4613      	mov	r3, r2
   834d6:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   834d8:	68fb      	ldr	r3, [r7, #12]
   834da:	68ba      	ldr	r2, [r7, #8]
   834dc:	320c      	adds	r2, #12
   834de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   834e2:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   834e6:	68fb      	ldr	r3, [r7, #12]
   834e8:	68ba      	ldr	r2, [r7, #8]
   834ea:	320c      	adds	r2, #12
   834ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   834f0:	68fb      	ldr	r3, [r7, #12]
   834f2:	68ba      	ldr	r2, [r7, #8]
   834f4:	320c      	adds	r2, #12
   834f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   834fa:	79fb      	ldrb	r3, [r7, #7]
   834fc:	021b      	lsls	r3, r3, #8
   834fe:	b29b      	uxth	r3, r3
   83500:	ea42 0103 	orr.w	r1, r2, r3
   83504:	68fb      	ldr	r3, [r7, #12]
   83506:	68ba      	ldr	r2, [r7, #8]
   83508:	320c      	adds	r2, #12
   8350a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8350e:	bf00      	nop
   83510:	3714      	adds	r7, #20
   83512:	46bd      	mov	sp, r7
   83514:	bc80      	pop	{r7}
   83516:	4770      	bx	lr

00083518 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83518:	b580      	push	{r7, lr}
   8351a:	b082      	sub	sp, #8
   8351c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   8351e:	4b1e      	ldr	r3, [pc, #120]	; (83598 <Reset_Handler+0x80>)
   83520:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83522:	4b1e      	ldr	r3, [pc, #120]	; (8359c <Reset_Handler+0x84>)
   83524:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83526:	687a      	ldr	r2, [r7, #4]
   83528:	683b      	ldr	r3, [r7, #0]
   8352a:	429a      	cmp	r2, r3
   8352c:	d00c      	beq.n	83548 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   8352e:	e007      	b.n	83540 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83530:	687a      	ldr	r2, [r7, #4]
   83532:	1d13      	adds	r3, r2, #4
   83534:	607b      	str	r3, [r7, #4]
   83536:	683b      	ldr	r3, [r7, #0]
   83538:	1d19      	adds	r1, r3, #4
   8353a:	6039      	str	r1, [r7, #0]
   8353c:	6812      	ldr	r2, [r2, #0]
   8353e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   83540:	683b      	ldr	r3, [r7, #0]
   83542:	4a17      	ldr	r2, [pc, #92]	; (835a0 <Reset_Handler+0x88>)
   83544:	4293      	cmp	r3, r2
   83546:	d3f3      	bcc.n	83530 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83548:	4b16      	ldr	r3, [pc, #88]	; (835a4 <Reset_Handler+0x8c>)
   8354a:	603b      	str	r3, [r7, #0]
   8354c:	e004      	b.n	83558 <Reset_Handler+0x40>
		*pDest++ = 0;
   8354e:	683b      	ldr	r3, [r7, #0]
   83550:	1d1a      	adds	r2, r3, #4
   83552:	603a      	str	r2, [r7, #0]
   83554:	2200      	movs	r2, #0
   83556:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   83558:	683b      	ldr	r3, [r7, #0]
   8355a:	4a13      	ldr	r2, [pc, #76]	; (835a8 <Reset_Handler+0x90>)
   8355c:	4293      	cmp	r3, r2
   8355e:	d3f6      	bcc.n	8354e <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83560:	4b12      	ldr	r3, [pc, #72]	; (835ac <Reset_Handler+0x94>)
   83562:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83564:	687b      	ldr	r3, [r7, #4]
   83566:	4a12      	ldr	r2, [pc, #72]	; (835b0 <Reset_Handler+0x98>)
   83568:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8356c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83570:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   83572:	687b      	ldr	r3, [r7, #4]
   83574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83578:	d309      	bcc.n	8358e <Reset_Handler+0x76>
   8357a:	687b      	ldr	r3, [r7, #4]
   8357c:	4a0d      	ldr	r2, [pc, #52]	; (835b4 <Reset_Handler+0x9c>)
   8357e:	4293      	cmp	r3, r2
   83580:	d205      	bcs.n	8358e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83582:	4b0b      	ldr	r3, [pc, #44]	; (835b0 <Reset_Handler+0x98>)
   83584:	689b      	ldr	r3, [r3, #8]
   83586:	4a0a      	ldr	r2, [pc, #40]	; (835b0 <Reset_Handler+0x98>)
   83588:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8358c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8358e:	4b0a      	ldr	r3, [pc, #40]	; (835b8 <Reset_Handler+0xa0>)
   83590:	4798      	blx	r3

	/* Branch to main function */
	main();
   83592:	4b0a      	ldr	r3, [pc, #40]	; (835bc <Reset_Handler+0xa4>)
   83594:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83596:	e7fe      	b.n	83596 <Reset_Handler+0x7e>
   83598:	0008de94 	.word	0x0008de94
   8359c:	20000000 	.word	0x20000000
   835a0:	20000df0 	.word	0x20000df0
   835a4:	20000df0 	.word	0x20000df0
   835a8:	20001870 	.word	0x20001870
   835ac:	00080000 	.word	0x00080000
   835b0:	e000ed00 	.word	0xe000ed00
   835b4:	20004000 	.word	0x20004000
   835b8:	00086ff1 	.word	0x00086ff1
   835bc:	00080981 	.word	0x00080981

000835c0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   835c0:	b480      	push	{r7}
   835c2:	b085      	sub	sp, #20
   835c4:	af00      	add	r7, sp, #0
   835c6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   835c8:	4b10      	ldr	r3, [pc, #64]	; (8360c <_sbrk+0x4c>)
   835ca:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   835cc:	4b10      	ldr	r3, [pc, #64]	; (83610 <_sbrk+0x50>)
   835ce:	681b      	ldr	r3, [r3, #0]
   835d0:	2b00      	cmp	r3, #0
   835d2:	d102      	bne.n	835da <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   835d4:	4b0e      	ldr	r3, [pc, #56]	; (83610 <_sbrk+0x50>)
   835d6:	4a0f      	ldr	r2, [pc, #60]	; (83614 <_sbrk+0x54>)
   835d8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   835da:	4b0d      	ldr	r3, [pc, #52]	; (83610 <_sbrk+0x50>)
   835dc:	681b      	ldr	r3, [r3, #0]
   835de:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   835e0:	68ba      	ldr	r2, [r7, #8]
   835e2:	687b      	ldr	r3, [r7, #4]
   835e4:	4413      	add	r3, r2
   835e6:	68fa      	ldr	r2, [r7, #12]
   835e8:	429a      	cmp	r2, r3
   835ea:	da02      	bge.n	835f2 <_sbrk+0x32>
		return (caddr_t) -1;	
   835ec:	f04f 33ff 	mov.w	r3, #4294967295
   835f0:	e006      	b.n	83600 <_sbrk+0x40>
	}

	heap += incr;
   835f2:	4b07      	ldr	r3, [pc, #28]	; (83610 <_sbrk+0x50>)
   835f4:	681a      	ldr	r2, [r3, #0]
   835f6:	687b      	ldr	r3, [r7, #4]
   835f8:	4413      	add	r3, r2
   835fa:	4a05      	ldr	r2, [pc, #20]	; (83610 <_sbrk+0x50>)
   835fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   835fe:	68bb      	ldr	r3, [r7, #8]
}
   83600:	4618      	mov	r0, r3
   83602:	3714      	adds	r7, #20
   83604:	46bd      	mov	sp, r7
   83606:	bc80      	pop	{r7}
   83608:	4770      	bx	lr
   8360a:	bf00      	nop
   8360c:	20083ffc 	.word	0x20083ffc
   83610:	20001330 	.word	0x20001330
   83614:	20084000 	.word	0x20084000

00083618 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   83618:	b480      	push	{r7}
   8361a:	b083      	sub	sp, #12
   8361c:	af00      	add	r7, sp, #0
   8361e:	6078      	str	r0, [r7, #4]
	return -1;
   83620:	f04f 33ff 	mov.w	r3, #4294967295
}
   83624:	4618      	mov	r0, r3
   83626:	370c      	adds	r7, #12
   83628:	46bd      	mov	sp, r7
   8362a:	bc80      	pop	{r7}
   8362c:	4770      	bx	lr

0008362e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   8362e:	b480      	push	{r7}
   83630:	b083      	sub	sp, #12
   83632:	af00      	add	r7, sp, #0
   83634:	6078      	str	r0, [r7, #4]
   83636:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   83638:	683b      	ldr	r3, [r7, #0]
   8363a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8363e:	605a      	str	r2, [r3, #4]

	return 0;
   83640:	2300      	movs	r3, #0
}
   83642:	4618      	mov	r0, r3
   83644:	370c      	adds	r7, #12
   83646:	46bd      	mov	sp, r7
   83648:	bc80      	pop	{r7}
   8364a:	4770      	bx	lr

0008364c <_isatty>:

extern int _isatty(int file)
{
   8364c:	b480      	push	{r7}
   8364e:	b083      	sub	sp, #12
   83650:	af00      	add	r7, sp, #0
   83652:	6078      	str	r0, [r7, #4]
	return 1;
   83654:	2301      	movs	r3, #1
}
   83656:	4618      	mov	r0, r3
   83658:	370c      	adds	r7, #12
   8365a:	46bd      	mov	sp, r7
   8365c:	bc80      	pop	{r7}
   8365e:	4770      	bx	lr

00083660 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   83660:	b480      	push	{r7}
   83662:	b085      	sub	sp, #20
   83664:	af00      	add	r7, sp, #0
   83666:	60f8      	str	r0, [r7, #12]
   83668:	60b9      	str	r1, [r7, #8]
   8366a:	607a      	str	r2, [r7, #4]
	return 0;
   8366c:	2300      	movs	r3, #0
}
   8366e:	4618      	mov	r0, r3
   83670:	3714      	adds	r7, #20
   83672:	46bd      	mov	sp, r7
   83674:	bc80      	pop	{r7}
   83676:	4770      	bx	lr

00083678 <_exit>:

extern void _exit(int status)
{
   83678:	b580      	push	{r7, lr}
   8367a:	b082      	sub	sp, #8
   8367c:	af00      	add	r7, sp, #0
   8367e:	6078      	str	r0, [r7, #4]
	printf("Exiting with status %d.\n", status);
   83680:	6879      	ldr	r1, [r7, #4]
   83682:	4802      	ldr	r0, [pc, #8]	; (8368c <_exit+0x14>)
   83684:	4b02      	ldr	r3, [pc, #8]	; (83690 <_exit+0x18>)
   83686:	4798      	blx	r3

	for (;;);
   83688:	e7fe      	b.n	83688 <_exit+0x10>
   8368a:	bf00      	nop
   8368c:	0008d9f8 	.word	0x0008d9f8
   83690:	00087039 	.word	0x00087039

00083694 <_kill>:
}

extern void _kill(int pid, int sig)
{
   83694:	b480      	push	{r7}
   83696:	b083      	sub	sp, #12
   83698:	af00      	add	r7, sp, #0
   8369a:	6078      	str	r0, [r7, #4]
   8369c:	6039      	str	r1, [r7, #0]
	return;
   8369e:	bf00      	nop
}
   836a0:	370c      	adds	r7, #12
   836a2:	46bd      	mov	sp, r7
   836a4:	bc80      	pop	{r7}
   836a6:	4770      	bx	lr

000836a8 <_getpid>:

extern int _getpid(void)
{
   836a8:	b480      	push	{r7}
   836aa:	af00      	add	r7, sp, #0
	return -1;
   836ac:	f04f 33ff 	mov.w	r3, #4294967295
}
   836b0:	4618      	mov	r0, r3
   836b2:	46bd      	mov	sp, r7
   836b4:	bc80      	pop	{r7}
   836b6:	4770      	bx	lr

000836b8 <osc_enable>:
{
   836b8:	b580      	push	{r7, lr}
   836ba:	b082      	sub	sp, #8
   836bc:	af00      	add	r7, sp, #0
   836be:	6078      	str	r0, [r7, #4]
   836c0:	687b      	ldr	r3, [r7, #4]
   836c2:	2b07      	cmp	r3, #7
   836c4:	d82e      	bhi.n	83724 <osc_enable+0x6c>
   836c6:	a201      	add	r2, pc, #4	; (adr r2, 836cc <osc_enable+0x14>)
   836c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   836cc:	00083723 	.word	0x00083723
   836d0:	000836ed 	.word	0x000836ed
   836d4:	000836f5 	.word	0x000836f5
   836d8:	000836fd 	.word	0x000836fd
   836dc:	00083705 	.word	0x00083705
   836e0:	0008370d 	.word	0x0008370d
   836e4:	00083715 	.word	0x00083715
   836e8:	0008371d 	.word	0x0008371d
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   836ec:	2000      	movs	r0, #0
   836ee:	4b0f      	ldr	r3, [pc, #60]	; (8372c <osc_enable+0x74>)
   836f0:	4798      	blx	r3
		break;
   836f2:	e017      	b.n	83724 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   836f4:	2001      	movs	r0, #1
   836f6:	4b0d      	ldr	r3, [pc, #52]	; (8372c <osc_enable+0x74>)
   836f8:	4798      	blx	r3
		break;
   836fa:	e013      	b.n	83724 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   836fc:	2000      	movs	r0, #0
   836fe:	4b0c      	ldr	r3, [pc, #48]	; (83730 <osc_enable+0x78>)
   83700:	4798      	blx	r3
		break;
   83702:	e00f      	b.n	83724 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83704:	2010      	movs	r0, #16
   83706:	4b0a      	ldr	r3, [pc, #40]	; (83730 <osc_enable+0x78>)
   83708:	4798      	blx	r3
		break;
   8370a:	e00b      	b.n	83724 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8370c:	2020      	movs	r0, #32
   8370e:	4b08      	ldr	r3, [pc, #32]	; (83730 <osc_enable+0x78>)
   83710:	4798      	blx	r3
		break;
   83712:	e007      	b.n	83724 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83714:	203e      	movs	r0, #62	; 0x3e
   83716:	4b07      	ldr	r3, [pc, #28]	; (83734 <osc_enable+0x7c>)
   83718:	4798      	blx	r3
		break;
   8371a:	e003      	b.n	83724 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   8371c:	4b06      	ldr	r3, [pc, #24]	; (83738 <osc_enable+0x80>)
   8371e:	4798      	blx	r3
		break;
   83720:	e000      	b.n	83724 <osc_enable+0x6c>
		break;
   83722:	bf00      	nop
}
   83724:	bf00      	nop
   83726:	3708      	adds	r7, #8
   83728:	46bd      	mov	sp, r7
   8372a:	bd80      	pop	{r7, pc}
   8372c:	00082ac5 	.word	0x00082ac5
   83730:	00082b31 	.word	0x00082b31
   83734:	00082ba5 	.word	0x00082ba5
   83738:	00082bf5 	.word	0x00082bf5

0008373c <osc_is_ready>:
{
   8373c:	b580      	push	{r7, lr}
   8373e:	b082      	sub	sp, #8
   83740:	af00      	add	r7, sp, #0
   83742:	6078      	str	r0, [r7, #4]
   83744:	687b      	ldr	r3, [r7, #4]
   83746:	2b07      	cmp	r3, #7
   83748:	d82f      	bhi.n	837aa <osc_is_ready+0x6e>
   8374a:	a201      	add	r2, pc, #4	; (adr r2, 83750 <osc_is_ready+0x14>)
   8374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83750:	00083771 	.word	0x00083771
   83754:	00083775 	.word	0x00083775
   83758:	00083775 	.word	0x00083775
   8375c:	00083787 	.word	0x00083787
   83760:	00083787 	.word	0x00083787
   83764:	00083787 	.word	0x00083787
   83768:	00083799 	.word	0x00083799
   8376c:	00083799 	.word	0x00083799
		return 1;
   83770:	2301      	movs	r3, #1
   83772:	e01b      	b.n	837ac <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   83774:	4b0f      	ldr	r3, [pc, #60]	; (837b4 <osc_is_ready+0x78>)
   83776:	4798      	blx	r3
   83778:	4603      	mov	r3, r0
   8377a:	2b00      	cmp	r3, #0
   8377c:	bf14      	ite	ne
   8377e:	2301      	movne	r3, #1
   83780:	2300      	moveq	r3, #0
   83782:	b2db      	uxtb	r3, r3
   83784:	e012      	b.n	837ac <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   83786:	4b0c      	ldr	r3, [pc, #48]	; (837b8 <osc_is_ready+0x7c>)
   83788:	4798      	blx	r3
   8378a:	4603      	mov	r3, r0
   8378c:	2b00      	cmp	r3, #0
   8378e:	bf14      	ite	ne
   83790:	2301      	movne	r3, #1
   83792:	2300      	moveq	r3, #0
   83794:	b2db      	uxtb	r3, r3
   83796:	e009      	b.n	837ac <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   83798:	4b08      	ldr	r3, [pc, #32]	; (837bc <osc_is_ready+0x80>)
   8379a:	4798      	blx	r3
   8379c:	4603      	mov	r3, r0
   8379e:	2b00      	cmp	r3, #0
   837a0:	bf14      	ite	ne
   837a2:	2301      	movne	r3, #1
   837a4:	2300      	moveq	r3, #0
   837a6:	b2db      	uxtb	r3, r3
   837a8:	e000      	b.n	837ac <osc_is_ready+0x70>
	return 0;
   837aa:	2300      	movs	r3, #0
}
   837ac:	4618      	mov	r0, r3
   837ae:	3708      	adds	r7, #8
   837b0:	46bd      	mov	sp, r7
   837b2:	bd80      	pop	{r7, pc}
   837b4:	00082afd 	.word	0x00082afd
   837b8:	00082b8d 	.word	0x00082b8d
   837bc:	00082c41 	.word	0x00082c41

000837c0 <osc_get_rate>:
{
   837c0:	b480      	push	{r7}
   837c2:	b083      	sub	sp, #12
   837c4:	af00      	add	r7, sp, #0
   837c6:	6078      	str	r0, [r7, #4]
   837c8:	687b      	ldr	r3, [r7, #4]
   837ca:	2b07      	cmp	r3, #7
   837cc:	d823      	bhi.n	83816 <osc_get_rate+0x56>
   837ce:	a201      	add	r2, pc, #4	; (adr r2, 837d4 <osc_get_rate+0x14>)
   837d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   837d4:	000837f5 	.word	0x000837f5
   837d8:	000837fb 	.word	0x000837fb
   837dc:	000837ff 	.word	0x000837ff
   837e0:	00083803 	.word	0x00083803
   837e4:	00083807 	.word	0x00083807
   837e8:	0008380b 	.word	0x0008380b
   837ec:	0008380f 	.word	0x0008380f
   837f0:	00083813 	.word	0x00083813
		return OSC_SLCK_32K_RC_HZ;
   837f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   837f8:	e00e      	b.n	83818 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   837fa:	2300      	movs	r3, #0
   837fc:	e00c      	b.n	83818 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   837fe:	2300      	movs	r3, #0
   83800:	e00a      	b.n	83818 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   83802:	4b08      	ldr	r3, [pc, #32]	; (83824 <osc_get_rate+0x64>)
   83804:	e008      	b.n	83818 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   83806:	4b08      	ldr	r3, [pc, #32]	; (83828 <osc_get_rate+0x68>)
   83808:	e006      	b.n	83818 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   8380a:	4b08      	ldr	r3, [pc, #32]	; (8382c <osc_get_rate+0x6c>)
   8380c:	e004      	b.n	83818 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   8380e:	4b07      	ldr	r3, [pc, #28]	; (8382c <osc_get_rate+0x6c>)
   83810:	e002      	b.n	83818 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   83812:	4b06      	ldr	r3, [pc, #24]	; (8382c <osc_get_rate+0x6c>)
   83814:	e000      	b.n	83818 <osc_get_rate+0x58>
	return 0;
   83816:	2300      	movs	r3, #0
}
   83818:	4618      	mov	r0, r3
   8381a:	370c      	adds	r7, #12
   8381c:	46bd      	mov	sp, r7
   8381e:	bc80      	pop	{r7}
   83820:	4770      	bx	lr
   83822:	bf00      	nop
   83824:	003d0900 	.word	0x003d0900
   83828:	007a1200 	.word	0x007a1200
   8382c:	00b71b00 	.word	0x00b71b00

00083830 <osc_wait_ready>:
{
   83830:	b580      	push	{r7, lr}
   83832:	b082      	sub	sp, #8
   83834:	af00      	add	r7, sp, #0
   83836:	4603      	mov	r3, r0
   83838:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8383a:	bf00      	nop
   8383c:	79fb      	ldrb	r3, [r7, #7]
   8383e:	4618      	mov	r0, r3
   83840:	4b06      	ldr	r3, [pc, #24]	; (8385c <osc_wait_ready+0x2c>)
   83842:	4798      	blx	r3
   83844:	4603      	mov	r3, r0
   83846:	f083 0301 	eor.w	r3, r3, #1
   8384a:	b2db      	uxtb	r3, r3
   8384c:	2b00      	cmp	r3, #0
   8384e:	d1f5      	bne.n	8383c <osc_wait_ready+0xc>
}
   83850:	bf00      	nop
   83852:	bf00      	nop
   83854:	3708      	adds	r7, #8
   83856:	46bd      	mov	sp, r7
   83858:	bd80      	pop	{r7, pc}
   8385a:	bf00      	nop
   8385c:	0008373d 	.word	0x0008373d

00083860 <pll_config_init>:
{
   83860:	b580      	push	{r7, lr}
   83862:	b086      	sub	sp, #24
   83864:	af00      	add	r7, sp, #0
   83866:	60f8      	str	r0, [r7, #12]
   83868:	607a      	str	r2, [r7, #4]
   8386a:	603b      	str	r3, [r7, #0]
   8386c:	460b      	mov	r3, r1
   8386e:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   83870:	687b      	ldr	r3, [r7, #4]
   83872:	2b00      	cmp	r3, #0
   83874:	d107      	bne.n	83886 <pll_config_init+0x26>
   83876:	683b      	ldr	r3, [r7, #0]
   83878:	2b00      	cmp	r3, #0
   8387a:	d104      	bne.n	83886 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   8387c:	68fb      	ldr	r3, [r7, #12]
   8387e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   83882:	601a      	str	r2, [r3, #0]
   83884:	e01a      	b.n	838bc <pll_config_init+0x5c>
		vco_hz = osc_get_rate(e_src) / ul_div;
   83886:	7afb      	ldrb	r3, [r7, #11]
   83888:	4618      	mov	r0, r3
   8388a:	4b0e      	ldr	r3, [pc, #56]	; (838c4 <pll_config_init+0x64>)
   8388c:	4798      	blx	r3
   8388e:	4602      	mov	r2, r0
   83890:	687b      	ldr	r3, [r7, #4]
   83892:	fbb2 f3f3 	udiv	r3, r2, r3
   83896:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   83898:	697b      	ldr	r3, [r7, #20]
   8389a:	683a      	ldr	r2, [r7, #0]
   8389c:	fb02 f303 	mul.w	r3, r2, r3
   838a0:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   838a2:	683b      	ldr	r3, [r7, #0]
   838a4:	3b01      	subs	r3, #1
   838a6:	041a      	lsls	r2, r3, #16
   838a8:	4b07      	ldr	r3, [pc, #28]	; (838c8 <pll_config_init+0x68>)
   838aa:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   838ac:	687a      	ldr	r2, [r7, #4]
   838ae:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   838b0:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   838b2:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   838b6:	68fb      	ldr	r3, [r7, #12]
   838b8:	601a      	str	r2, [r3, #0]
}
   838ba:	bf00      	nop
   838bc:	bf00      	nop
   838be:	3718      	adds	r7, #24
   838c0:	46bd      	mov	sp, r7
   838c2:	bd80      	pop	{r7, pc}
   838c4:	000837c1 	.word	0x000837c1
   838c8:	07ff0000 	.word	0x07ff0000

000838cc <pll_enable>:
{
   838cc:	b580      	push	{r7, lr}
   838ce:	b082      	sub	sp, #8
   838d0:	af00      	add	r7, sp, #0
   838d2:	6078      	str	r0, [r7, #4]
   838d4:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   838d6:	683b      	ldr	r3, [r7, #0]
   838d8:	2b00      	cmp	r3, #0
   838da:	d108      	bne.n	838ee <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   838dc:	4b09      	ldr	r3, [pc, #36]	; (83904 <pll_enable+0x38>)
   838de:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   838e0:	687b      	ldr	r3, [r7, #4]
   838e2:	681b      	ldr	r3, [r3, #0]
   838e4:	4a08      	ldr	r2, [pc, #32]	; (83908 <pll_enable+0x3c>)
   838e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   838ea:	6293      	str	r3, [r2, #40]	; 0x28
}
   838ec:	e005      	b.n	838fa <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   838ee:	687b      	ldr	r3, [r7, #4]
   838f0:	681b      	ldr	r3, [r3, #0]
   838f2:	4a05      	ldr	r2, [pc, #20]	; (83908 <pll_enable+0x3c>)
   838f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   838f8:	61d3      	str	r3, [r2, #28]
}
   838fa:	bf00      	nop
   838fc:	3708      	adds	r7, #8
   838fe:	46bd      	mov	sp, r7
   83900:	bd80      	pop	{r7, pc}
   83902:	bf00      	nop
   83904:	00082cb1 	.word	0x00082cb1
   83908:	400e0400 	.word	0x400e0400

0008390c <pll_is_locked>:
{
   8390c:	b580      	push	{r7, lr}
   8390e:	b082      	sub	sp, #8
   83910:	af00      	add	r7, sp, #0
   83912:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   83914:	687b      	ldr	r3, [r7, #4]
   83916:	2b00      	cmp	r3, #0
   83918:	d103      	bne.n	83922 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8391a:	4b05      	ldr	r3, [pc, #20]	; (83930 <pll_is_locked+0x24>)
   8391c:	4798      	blx	r3
   8391e:	4603      	mov	r3, r0
   83920:	e002      	b.n	83928 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   83922:	4b04      	ldr	r3, [pc, #16]	; (83934 <pll_is_locked+0x28>)
   83924:	4798      	blx	r3
   83926:	4603      	mov	r3, r0
}
   83928:	4618      	mov	r0, r3
   8392a:	3708      	adds	r7, #8
   8392c:	46bd      	mov	sp, r7
   8392e:	bd80      	pop	{r7, pc}
   83930:	00082cc9 	.word	0x00082cc9
   83934:	00082cfd 	.word	0x00082cfd

00083938 <pll_enable_source>:
{
   83938:	b580      	push	{r7, lr}
   8393a:	b082      	sub	sp, #8
   8393c:	af00      	add	r7, sp, #0
   8393e:	4603      	mov	r3, r0
   83940:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   83942:	79fb      	ldrb	r3, [r7, #7]
   83944:	3b03      	subs	r3, #3
   83946:	2b04      	cmp	r3, #4
   83948:	d808      	bhi.n	8395c <pll_enable_source+0x24>
		osc_enable(e_src);
   8394a:	79fb      	ldrb	r3, [r7, #7]
   8394c:	4618      	mov	r0, r3
   8394e:	4b06      	ldr	r3, [pc, #24]	; (83968 <pll_enable_source+0x30>)
   83950:	4798      	blx	r3
		osc_wait_ready(e_src);
   83952:	79fb      	ldrb	r3, [r7, #7]
   83954:	4618      	mov	r0, r3
   83956:	4b05      	ldr	r3, [pc, #20]	; (8396c <pll_enable_source+0x34>)
   83958:	4798      	blx	r3
		break;
   8395a:	e000      	b.n	8395e <pll_enable_source+0x26>
		break;
   8395c:	bf00      	nop
}
   8395e:	bf00      	nop
   83960:	3708      	adds	r7, #8
   83962:	46bd      	mov	sp, r7
   83964:	bd80      	pop	{r7, pc}
   83966:	bf00      	nop
   83968:	000836b9 	.word	0x000836b9
   8396c:	00083831 	.word	0x00083831

00083970 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   83970:	b580      	push	{r7, lr}
   83972:	b082      	sub	sp, #8
   83974:	af00      	add	r7, sp, #0
   83976:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83978:	bf00      	nop
   8397a:	6878      	ldr	r0, [r7, #4]
   8397c:	4b04      	ldr	r3, [pc, #16]	; (83990 <pll_wait_for_lock+0x20>)
   8397e:	4798      	blx	r3
   83980:	4603      	mov	r3, r0
   83982:	2b00      	cmp	r3, #0
   83984:	d0f9      	beq.n	8397a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   83986:	2300      	movs	r3, #0
}
   83988:	4618      	mov	r0, r3
   8398a:	3708      	adds	r7, #8
   8398c:	46bd      	mov	sp, r7
   8398e:	bd80      	pop	{r7, pc}
   83990:	0008390d 	.word	0x0008390d

00083994 <sysclk_get_main_hz>:
{
   83994:	b580      	push	{r7, lr}
   83996:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83998:	2006      	movs	r0, #6
   8399a:	4b03      	ldr	r3, [pc, #12]	; (839a8 <sysclk_get_main_hz+0x14>)
   8399c:	4798      	blx	r3
   8399e:	4603      	mov	r3, r0
   839a0:	011b      	lsls	r3, r3, #4
}
   839a2:	4618      	mov	r0, r3
   839a4:	bd80      	pop	{r7, pc}
   839a6:	bf00      	nop
   839a8:	000837c1 	.word	0x000837c1

000839ac <sysclk_get_cpu_hz>:
{
   839ac:	b580      	push	{r7, lr}
   839ae:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   839b0:	4b02      	ldr	r3, [pc, #8]	; (839bc <sysclk_get_cpu_hz+0x10>)
   839b2:	4798      	blx	r3
   839b4:	4603      	mov	r3, r0
   839b6:	085b      	lsrs	r3, r3, #1
}
   839b8:	4618      	mov	r0, r3
   839ba:	bd80      	pop	{r7, pc}
   839bc:	00083995 	.word	0x00083995

000839c0 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   839c0:	b590      	push	{r4, r7, lr}
   839c2:	b083      	sub	sp, #12
   839c4:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   839c6:	2006      	movs	r0, #6
   839c8:	4b09      	ldr	r3, [pc, #36]	; (839f0 <sysclk_enable_usb+0x30>)
   839ca:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   839cc:	1d38      	adds	r0, r7, #4
   839ce:	2300      	movs	r3, #0
   839d0:	2200      	movs	r2, #0
   839d2:	2106      	movs	r1, #6
   839d4:	4c07      	ldr	r4, [pc, #28]	; (839f4 <sysclk_enable_usb+0x34>)
   839d6:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   839d8:	1d3b      	adds	r3, r7, #4
   839da:	2101      	movs	r1, #1
   839dc:	4618      	mov	r0, r3
   839de:	4b06      	ldr	r3, [pc, #24]	; (839f8 <sysclk_enable_usb+0x38>)
   839e0:	4798      	blx	r3
	pll_wait_for_lock(1);
   839e2:	2001      	movs	r0, #1
   839e4:	4b05      	ldr	r3, [pc, #20]	; (839fc <sysclk_enable_usb+0x3c>)
   839e6:	4798      	blx	r3
}
   839e8:	bf00      	nop
   839ea:	370c      	adds	r7, #12
   839ec:	46bd      	mov	sp, r7
   839ee:	bd90      	pop	{r4, r7, pc}
   839f0:	00083939 	.word	0x00083939
   839f4:	00083861 	.word	0x00083861
   839f8:	000838cd 	.word	0x000838cd
   839fc:	00083971 	.word	0x00083971

00083a00 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   83a00:	b590      	push	{r4, r7, lr}
   83a02:	b083      	sub	sp, #12
   83a04:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83a06:	4816      	ldr	r0, [pc, #88]	; (83a60 <sysclk_init+0x60>)
   83a08:	4b16      	ldr	r3, [pc, #88]	; (83a64 <sysclk_init+0x64>)
   83a0a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83a0c:	2006      	movs	r0, #6
   83a0e:	4b16      	ldr	r3, [pc, #88]	; (83a68 <sysclk_init+0x68>)
   83a10:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   83a12:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   83a16:	4b15      	ldr	r3, [pc, #84]	; (83a6c <sysclk_init+0x6c>)
   83a18:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   83a1a:	bf00      	nop
   83a1c:	4b14      	ldr	r3, [pc, #80]	; (83a70 <sysclk_init+0x70>)
   83a1e:	4798      	blx	r3
   83a20:	4603      	mov	r3, r0
   83a22:	2b00      	cmp	r3, #0
   83a24:	d0fa      	beq.n	83a1c <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   83a26:	1d38      	adds	r0, r7, #4
   83a28:	2310      	movs	r3, #16
   83a2a:	2201      	movs	r2, #1
   83a2c:	2106      	movs	r1, #6
   83a2e:	4c11      	ldr	r4, [pc, #68]	; (83a74 <sysclk_init+0x74>)
   83a30:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83a32:	1d3b      	adds	r3, r7, #4
   83a34:	2100      	movs	r1, #0
   83a36:	4618      	mov	r0, r3
   83a38:	4b0f      	ldr	r3, [pc, #60]	; (83a78 <sysclk_init+0x78>)
   83a3a:	4798      	blx	r3
		pll_wait_for_lock(0);
   83a3c:	2000      	movs	r0, #0
   83a3e:	4b0f      	ldr	r3, [pc, #60]	; (83a7c <sysclk_init+0x7c>)
   83a40:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83a42:	2010      	movs	r0, #16
   83a44:	4b0e      	ldr	r3, [pc, #56]	; (83a80 <sysclk_init+0x80>)
   83a46:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83a48:	4b0e      	ldr	r3, [pc, #56]	; (83a84 <sysclk_init+0x84>)
   83a4a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83a4c:	4b0e      	ldr	r3, [pc, #56]	; (83a88 <sysclk_init+0x88>)
   83a4e:	4798      	blx	r3
   83a50:	4603      	mov	r3, r0
   83a52:	4618      	mov	r0, r3
   83a54:	4b03      	ldr	r3, [pc, #12]	; (83a64 <sysclk_init+0x64>)
   83a56:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83a58:	bf00      	nop
   83a5a:	370c      	adds	r7, #12
   83a5c:	46bd      	mov	sp, r7
   83a5e:	bd90      	pop	{r4, r7, pc}
   83a60:	05b8d800 	.word	0x05b8d800
   83a64:	200001bd 	.word	0x200001bd
   83a68:	00083939 	.word	0x00083939
   83a6c:	00082c71 	.word	0x00082c71
   83a70:	00082c59 	.word	0x00082c59
   83a74:	00083861 	.word	0x00083861
   83a78:	000838cd 	.word	0x000838cd
   83a7c:	00083971 	.word	0x00083971
   83a80:	00082a45 	.word	0x00082a45
   83a84:	00083a8d 	.word	0x00083a8d
   83a88:	000839ad 	.word	0x000839ad

00083a8c <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83a8c:	b480      	push	{r7}
   83a8e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83a90:	4b58      	ldr	r3, [pc, #352]	; (83bf4 <SystemCoreClockUpdate+0x168>)
   83a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83a94:	f003 0303 	and.w	r3, r3, #3
   83a98:	2b03      	cmp	r3, #3
   83a9a:	f200 808c 	bhi.w	83bb6 <SystemCoreClockUpdate+0x12a>
   83a9e:	2b02      	cmp	r3, #2
   83aa0:	d23f      	bcs.n	83b22 <SystemCoreClockUpdate+0x96>
   83aa2:	2b00      	cmp	r3, #0
   83aa4:	d002      	beq.n	83aac <SystemCoreClockUpdate+0x20>
   83aa6:	2b01      	cmp	r3, #1
   83aa8:	d010      	beq.n	83acc <SystemCoreClockUpdate+0x40>
   83aaa:	e084      	b.n	83bb6 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83aac:	4b52      	ldr	r3, [pc, #328]	; (83bf8 <SystemCoreClockUpdate+0x16c>)
   83aae:	695b      	ldr	r3, [r3, #20]
   83ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83ab4:	2b00      	cmp	r3, #0
   83ab6:	d004      	beq.n	83ac2 <SystemCoreClockUpdate+0x36>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83ab8:	4b50      	ldr	r3, [pc, #320]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83aba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83abe:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83ac0:	e079      	b.n	83bb6 <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83ac2:	4b4e      	ldr	r3, [pc, #312]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83ac4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83ac8:	601a      	str	r2, [r3, #0]
		break;
   83aca:	e074      	b.n	83bb6 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83acc:	4b49      	ldr	r3, [pc, #292]	; (83bf4 <SystemCoreClockUpdate+0x168>)
   83ace:	6a1b      	ldr	r3, [r3, #32]
   83ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83ad4:	2b00      	cmp	r3, #0
   83ad6:	d003      	beq.n	83ae0 <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83ad8:	4b48      	ldr	r3, [pc, #288]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83ada:	4a49      	ldr	r2, [pc, #292]	; (83c00 <SystemCoreClockUpdate+0x174>)
   83adc:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   83ade:	e06a      	b.n	83bb6 <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83ae0:	4b46      	ldr	r3, [pc, #280]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83ae2:	4a48      	ldr	r2, [pc, #288]	; (83c04 <SystemCoreClockUpdate+0x178>)
   83ae4:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83ae6:	4b43      	ldr	r3, [pc, #268]	; (83bf4 <SystemCoreClockUpdate+0x168>)
   83ae8:	6a1b      	ldr	r3, [r3, #32]
   83aea:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83aee:	2b20      	cmp	r3, #32
   83af0:	d00b      	beq.n	83b0a <SystemCoreClockUpdate+0x7e>
   83af2:	2b20      	cmp	r3, #32
   83af4:	d811      	bhi.n	83b1a <SystemCoreClockUpdate+0x8e>
   83af6:	2b00      	cmp	r3, #0
   83af8:	d011      	beq.n	83b1e <SystemCoreClockUpdate+0x92>
   83afa:	2b10      	cmp	r3, #16
   83afc:	d10d      	bne.n	83b1a <SystemCoreClockUpdate+0x8e>
				SystemCoreClock *= 2U;
   83afe:	4b3f      	ldr	r3, [pc, #252]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83b00:	681b      	ldr	r3, [r3, #0]
   83b02:	005b      	lsls	r3, r3, #1
   83b04:	4a3d      	ldr	r2, [pc, #244]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83b06:	6013      	str	r3, [r2, #0]
				break;
   83b08:	e00a      	b.n	83b20 <SystemCoreClockUpdate+0x94>
				SystemCoreClock *= 3U;
   83b0a:	4b3c      	ldr	r3, [pc, #240]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83b0c:	681a      	ldr	r2, [r3, #0]
   83b0e:	4613      	mov	r3, r2
   83b10:	005b      	lsls	r3, r3, #1
   83b12:	4413      	add	r3, r2
   83b14:	4a39      	ldr	r2, [pc, #228]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83b16:	6013      	str	r3, [r2, #0]
				break;
   83b18:	e002      	b.n	83b20 <SystemCoreClockUpdate+0x94>
				break;
   83b1a:	bf00      	nop
   83b1c:	e04b      	b.n	83bb6 <SystemCoreClockUpdate+0x12a>
				break;
   83b1e:	bf00      	nop
		break;
   83b20:	e049      	b.n	83bb6 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83b22:	4b34      	ldr	r3, [pc, #208]	; (83bf4 <SystemCoreClockUpdate+0x168>)
   83b24:	6a1b      	ldr	r3, [r3, #32]
   83b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83b2a:	2b00      	cmp	r3, #0
   83b2c:	d003      	beq.n	83b36 <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83b2e:	4b33      	ldr	r3, [pc, #204]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83b30:	4a33      	ldr	r2, [pc, #204]	; (83c00 <SystemCoreClockUpdate+0x174>)
   83b32:	601a      	str	r2, [r3, #0]
   83b34:	e01f      	b.n	83b76 <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83b36:	4b31      	ldr	r3, [pc, #196]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83b38:	4a32      	ldr	r2, [pc, #200]	; (83c04 <SystemCoreClockUpdate+0x178>)
   83b3a:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83b3c:	4b2d      	ldr	r3, [pc, #180]	; (83bf4 <SystemCoreClockUpdate+0x168>)
   83b3e:	6a1b      	ldr	r3, [r3, #32]
   83b40:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83b44:	2b20      	cmp	r3, #32
   83b46:	d00b      	beq.n	83b60 <SystemCoreClockUpdate+0xd4>
   83b48:	2b20      	cmp	r3, #32
   83b4a:	d811      	bhi.n	83b70 <SystemCoreClockUpdate+0xe4>
   83b4c:	2b00      	cmp	r3, #0
   83b4e:	d011      	beq.n	83b74 <SystemCoreClockUpdate+0xe8>
   83b50:	2b10      	cmp	r3, #16
   83b52:	d10d      	bne.n	83b70 <SystemCoreClockUpdate+0xe4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83b54:	4b29      	ldr	r3, [pc, #164]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83b56:	681b      	ldr	r3, [r3, #0]
   83b58:	005b      	lsls	r3, r3, #1
   83b5a:	4a28      	ldr	r2, [pc, #160]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83b5c:	6013      	str	r3, [r2, #0]
				break;
   83b5e:	e00a      	b.n	83b76 <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83b60:	4b26      	ldr	r3, [pc, #152]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83b62:	681a      	ldr	r2, [r3, #0]
   83b64:	4613      	mov	r3, r2
   83b66:	005b      	lsls	r3, r3, #1
   83b68:	4413      	add	r3, r2
   83b6a:	4a24      	ldr	r2, [pc, #144]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83b6c:	6013      	str	r3, [r2, #0]
				break;
   83b6e:	e002      	b.n	83b76 <SystemCoreClockUpdate+0xea>
			default:
				break;
   83b70:	bf00      	nop
   83b72:	e000      	b.n	83b76 <SystemCoreClockUpdate+0xea>
				break;
   83b74:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83b76:	4b1f      	ldr	r3, [pc, #124]	; (83bf4 <SystemCoreClockUpdate+0x168>)
   83b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b7a:	f003 0303 	and.w	r3, r3, #3
   83b7e:	2b02      	cmp	r3, #2
   83b80:	d115      	bne.n	83bae <SystemCoreClockUpdate+0x122>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83b82:	4b1c      	ldr	r3, [pc, #112]	; (83bf4 <SystemCoreClockUpdate+0x168>)
   83b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83b86:	0c1b      	lsrs	r3, r3, #16
   83b88:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   83b8c:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83b8e:	4a1b      	ldr	r2, [pc, #108]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83b90:	6812      	ldr	r2, [r2, #0]
   83b92:	fb02 f303 	mul.w	r3, r2, r3
   83b96:	4a19      	ldr	r2, [pc, #100]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83b98:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   83b9a:	4b16      	ldr	r3, [pc, #88]	; (83bf4 <SystemCoreClockUpdate+0x168>)
   83b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83b9e:	b2db      	uxtb	r3, r3
   83ba0:	4a16      	ldr	r2, [pc, #88]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83ba2:	6812      	ldr	r2, [r2, #0]
   83ba4:	fbb2 f3f3 	udiv	r3, r2, r3
   83ba8:	4a14      	ldr	r2, [pc, #80]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83baa:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   83bac:	e002      	b.n	83bb4 <SystemCoreClockUpdate+0x128>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83bae:	4b13      	ldr	r3, [pc, #76]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83bb0:	4a15      	ldr	r2, [pc, #84]	; (83c08 <SystemCoreClockUpdate+0x17c>)
   83bb2:	601a      	str	r2, [r3, #0]
		break;
   83bb4:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83bb6:	4b0f      	ldr	r3, [pc, #60]	; (83bf4 <SystemCoreClockUpdate+0x168>)
   83bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83bbe:	2b70      	cmp	r3, #112	; 0x70
   83bc0:	d108      	bne.n	83bd4 <SystemCoreClockUpdate+0x148>
		SystemCoreClock /= 3U;
   83bc2:	4b0e      	ldr	r3, [pc, #56]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83bc4:	681b      	ldr	r3, [r3, #0]
   83bc6:	4a11      	ldr	r2, [pc, #68]	; (83c0c <SystemCoreClockUpdate+0x180>)
   83bc8:	fba2 2303 	umull	r2, r3, r2, r3
   83bcc:	085b      	lsrs	r3, r3, #1
   83bce:	4a0b      	ldr	r2, [pc, #44]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83bd0:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   83bd2:	e00a      	b.n	83bea <SystemCoreClockUpdate+0x15e>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83bd4:	4b07      	ldr	r3, [pc, #28]	; (83bf4 <SystemCoreClockUpdate+0x168>)
   83bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83bd8:	091b      	lsrs	r3, r3, #4
   83bda:	f003 0307 	and.w	r3, r3, #7
   83bde:	4a07      	ldr	r2, [pc, #28]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83be0:	6812      	ldr	r2, [r2, #0]
   83be2:	fa22 f303 	lsr.w	r3, r2, r3
   83be6:	4a05      	ldr	r2, [pc, #20]	; (83bfc <SystemCoreClockUpdate+0x170>)
   83be8:	6013      	str	r3, [r2, #0]
}
   83bea:	bf00      	nop
   83bec:	46bd      	mov	sp, r7
   83bee:	bc80      	pop	{r7}
   83bf0:	4770      	bx	lr
   83bf2:	bf00      	nop
   83bf4:	400e0400 	.word	0x400e0400
   83bf8:	400e1210 	.word	0x400e1210
   83bfc:	20000288 	.word	0x20000288
   83c00:	00b71b00 	.word	0x00b71b00
   83c04:	003d0900 	.word	0x003d0900
   83c08:	0e4e1c00 	.word	0x0e4e1c00
   83c0c:	aaaaaaab 	.word	0xaaaaaaab

00083c10 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   83c10:	b480      	push	{r7}
   83c12:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   83c14:	4b02      	ldr	r3, [pc, #8]	; (83c20 <udc_get_string_serial_name+0x10>)
	}
   83c16:	4618      	mov	r0, r3
   83c18:	46bd      	mov	sp, r7
   83c1a:	bc80      	pop	{r7}
   83c1c:	4770      	bx	lr
   83c1e:	bf00      	nop
   83c20:	2000025c 	.word	0x2000025c

00083c24 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   83c24:	b480      	push	{r7}
   83c26:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   83c28:	4b02      	ldr	r3, [pc, #8]	; (83c34 <udc_get_interface_desc+0x10>)
   83c2a:	681b      	ldr	r3, [r3, #0]
}
   83c2c:	4618      	mov	r0, r3
   83c2e:	46bd      	mov	sp, r7
   83c30:	bc80      	pop	{r7}
   83c32:	4770      	bx	lr
   83c34:	2000133c 	.word	0x2000133c

00083c38 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   83c38:	b480      	push	{r7}
   83c3a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   83c3c:	4b06      	ldr	r3, [pc, #24]	; (83c58 <udc_get_eof_conf+0x20>)
   83c3e:	681b      	ldr	r3, [r3, #0]
   83c40:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   83c42:	4a05      	ldr	r2, [pc, #20]	; (83c58 <udc_get_eof_conf+0x20>)
   83c44:	6812      	ldr	r2, [r2, #0]
   83c46:	6812      	ldr	r2, [r2, #0]
   83c48:	8852      	ldrh	r2, [r2, #2]
   83c4a:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   83c4c:	4413      	add	r3, r2
}
   83c4e:	4618      	mov	r0, r3
   83c50:	46bd      	mov	sp, r7
   83c52:	bc80      	pop	{r7}
   83c54:	4770      	bx	lr
   83c56:	bf00      	nop
   83c58:	20001338 	.word	0x20001338

00083c5c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   83c5c:	b580      	push	{r7, lr}
   83c5e:	b084      	sub	sp, #16
   83c60:	af00      	add	r7, sp, #0
   83c62:	6078      	str	r0, [r7, #4]
   83c64:	460b      	mov	r3, r1
   83c66:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   83c68:	4b12      	ldr	r3, [pc, #72]	; (83cb4 <udc_next_desc_in_iface+0x58>)
   83c6a:	4798      	blx	r3
   83c6c:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   83c6e:	687b      	ldr	r3, [r7, #4]
   83c70:	781b      	ldrb	r3, [r3, #0]
   83c72:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   83c74:	687b      	ldr	r3, [r7, #4]
   83c76:	4413      	add	r3, r2
   83c78:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   83c7a:	e010      	b.n	83c9e <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   83c7c:	687b      	ldr	r3, [r7, #4]
   83c7e:	785b      	ldrb	r3, [r3, #1]
   83c80:	2b04      	cmp	r3, #4
   83c82:	d011      	beq.n	83ca8 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   83c84:	687b      	ldr	r3, [r7, #4]
   83c86:	785b      	ldrb	r3, [r3, #1]
   83c88:	78fa      	ldrb	r2, [r7, #3]
   83c8a:	429a      	cmp	r2, r3
   83c8c:	d101      	bne.n	83c92 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   83c8e:	687b      	ldr	r3, [r7, #4]
   83c90:	e00c      	b.n	83cac <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   83c92:	687b      	ldr	r3, [r7, #4]
   83c94:	781b      	ldrb	r3, [r3, #0]
   83c96:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   83c98:	687b      	ldr	r3, [r7, #4]
   83c9a:	4413      	add	r3, r2
   83c9c:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   83c9e:	68fa      	ldr	r2, [r7, #12]
   83ca0:	687b      	ldr	r3, [r7, #4]
   83ca2:	429a      	cmp	r2, r3
   83ca4:	d8ea      	bhi.n	83c7c <udc_next_desc_in_iface+0x20>
   83ca6:	e000      	b.n	83caa <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   83ca8:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   83caa:	2300      	movs	r3, #0
}
   83cac:	4618      	mov	r0, r3
   83cae:	3710      	adds	r7, #16
   83cb0:	46bd      	mov	sp, r7
   83cb2:	bd80      	pop	{r7, pc}
   83cb4:	00083c39 	.word	0x00083c39

00083cb8 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   83cb8:	b580      	push	{r7, lr}
   83cba:	b084      	sub	sp, #16
   83cbc:	af00      	add	r7, sp, #0
   83cbe:	4603      	mov	r3, r0
   83cc0:	460a      	mov	r2, r1
   83cc2:	71fb      	strb	r3, [r7, #7]
   83cc4:	4613      	mov	r3, r2
   83cc6:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   83cc8:	4b1e      	ldr	r3, [pc, #120]	; (83d44 <udc_update_iface_desc+0x8c>)
   83cca:	781b      	ldrb	r3, [r3, #0]
   83ccc:	2b00      	cmp	r3, #0
   83cce:	d101      	bne.n	83cd4 <udc_update_iface_desc+0x1c>
		return false;
   83cd0:	2300      	movs	r3, #0
   83cd2:	e032      	b.n	83d3a <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83cd4:	4b1c      	ldr	r3, [pc, #112]	; (83d48 <udc_update_iface_desc+0x90>)
   83cd6:	681b      	ldr	r3, [r3, #0]
   83cd8:	681b      	ldr	r3, [r3, #0]
   83cda:	791b      	ldrb	r3, [r3, #4]
   83cdc:	79fa      	ldrb	r2, [r7, #7]
   83cde:	429a      	cmp	r2, r3
   83ce0:	d301      	bcc.n	83ce6 <udc_update_iface_desc+0x2e>
		return false;
   83ce2:	2300      	movs	r3, #0
   83ce4:	e029      	b.n	83d3a <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   83ce6:	4b18      	ldr	r3, [pc, #96]	; (83d48 <udc_update_iface_desc+0x90>)
   83ce8:	681b      	ldr	r3, [r3, #0]
   83cea:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   83cec:	4a17      	ldr	r2, [pc, #92]	; (83d4c <udc_update_iface_desc+0x94>)
   83cee:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   83cf0:	4b17      	ldr	r3, [pc, #92]	; (83d50 <udc_update_iface_desc+0x98>)
   83cf2:	4798      	blx	r3
   83cf4:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   83cf6:	e01a      	b.n	83d2e <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   83cf8:	4b14      	ldr	r3, [pc, #80]	; (83d4c <udc_update_iface_desc+0x94>)
   83cfa:	681b      	ldr	r3, [r3, #0]
   83cfc:	785b      	ldrb	r3, [r3, #1]
   83cfe:	2b04      	cmp	r3, #4
   83d00:	d10d      	bne.n	83d1e <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   83d02:	4b12      	ldr	r3, [pc, #72]	; (83d4c <udc_update_iface_desc+0x94>)
   83d04:	681b      	ldr	r3, [r3, #0]
   83d06:	789b      	ldrb	r3, [r3, #2]
   83d08:	79fa      	ldrb	r2, [r7, #7]
   83d0a:	429a      	cmp	r2, r3
   83d0c:	d107      	bne.n	83d1e <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   83d0e:	4b0f      	ldr	r3, [pc, #60]	; (83d4c <udc_update_iface_desc+0x94>)
   83d10:	681b      	ldr	r3, [r3, #0]
   83d12:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   83d14:	79ba      	ldrb	r2, [r7, #6]
   83d16:	429a      	cmp	r2, r3
   83d18:	d101      	bne.n	83d1e <udc_update_iface_desc+0x66>
				return true; // Interface found
   83d1a:	2301      	movs	r3, #1
   83d1c:	e00d      	b.n	83d3a <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   83d1e:	4b0b      	ldr	r3, [pc, #44]	; (83d4c <udc_update_iface_desc+0x94>)
   83d20:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   83d22:	4a0a      	ldr	r2, [pc, #40]	; (83d4c <udc_update_iface_desc+0x94>)
   83d24:	6812      	ldr	r2, [r2, #0]
   83d26:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   83d28:	4413      	add	r3, r2
   83d2a:	4a08      	ldr	r2, [pc, #32]	; (83d4c <udc_update_iface_desc+0x94>)
   83d2c:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   83d2e:	4b07      	ldr	r3, [pc, #28]	; (83d4c <udc_update_iface_desc+0x94>)
   83d30:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   83d32:	68fa      	ldr	r2, [r7, #12]
   83d34:	429a      	cmp	r2, r3
   83d36:	d8df      	bhi.n	83cf8 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   83d38:	2300      	movs	r3, #0
}
   83d3a:	4618      	mov	r0, r3
   83d3c:	3710      	adds	r7, #16
   83d3e:	46bd      	mov	sp, r7
   83d40:	bd80      	pop	{r7, pc}
   83d42:	bf00      	nop
   83d44:	20001336 	.word	0x20001336
   83d48:	20001338 	.word	0x20001338
   83d4c:	2000133c 	.word	0x2000133c
   83d50:	00083c39 	.word	0x00083c39

00083d54 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   83d54:	b580      	push	{r7, lr}
   83d56:	b084      	sub	sp, #16
   83d58:	af00      	add	r7, sp, #0
   83d5a:	4603      	mov	r3, r0
   83d5c:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   83d5e:	79fb      	ldrb	r3, [r7, #7]
   83d60:	2100      	movs	r1, #0
   83d62:	4618      	mov	r0, r3
   83d64:	4b1e      	ldr	r3, [pc, #120]	; (83de0 <udc_iface_disable+0x8c>)
   83d66:	4798      	blx	r3
   83d68:	4603      	mov	r3, r0
   83d6a:	f083 0301 	eor.w	r3, r3, #1
   83d6e:	b2db      	uxtb	r3, r3
   83d70:	2b00      	cmp	r3, #0
   83d72:	d001      	beq.n	83d78 <udc_iface_disable+0x24>
		return false;
   83d74:	2300      	movs	r3, #0
   83d76:	e02f      	b.n	83dd8 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83d78:	4b1a      	ldr	r3, [pc, #104]	; (83de4 <udc_iface_disable+0x90>)
   83d7a:	681b      	ldr	r3, [r3, #0]
   83d7c:	685a      	ldr	r2, [r3, #4]
   83d7e:	79fb      	ldrb	r3, [r7, #7]
   83d80:	009b      	lsls	r3, r3, #2
   83d82:	4413      	add	r3, r2
   83d84:	681b      	ldr	r3, [r3, #0]
   83d86:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83d88:	68bb      	ldr	r3, [r7, #8]
   83d8a:	68db      	ldr	r3, [r3, #12]
   83d8c:	4798      	blx	r3
   83d8e:	4603      	mov	r3, r0
   83d90:	461a      	mov	r2, r3
   83d92:	79fb      	ldrb	r3, [r7, #7]
   83d94:	4611      	mov	r1, r2
   83d96:	4618      	mov	r0, r3
   83d98:	4b11      	ldr	r3, [pc, #68]	; (83de0 <udc_iface_disable+0x8c>)
   83d9a:	4798      	blx	r3
   83d9c:	4603      	mov	r3, r0
   83d9e:	f083 0301 	eor.w	r3, r3, #1
   83da2:	b2db      	uxtb	r3, r3
   83da4:	2b00      	cmp	r3, #0
   83da6:	d001      	beq.n	83dac <udc_iface_disable+0x58>
		return false;
   83da8:	2300      	movs	r3, #0
   83daa:	e015      	b.n	83dd8 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   83dac:	4b0e      	ldr	r3, [pc, #56]	; (83de8 <udc_iface_disable+0x94>)
   83dae:	681b      	ldr	r3, [r3, #0]
   83db0:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   83db2:	2105      	movs	r1, #5
   83db4:	68f8      	ldr	r0, [r7, #12]
   83db6:	4b0d      	ldr	r3, [pc, #52]	; (83dec <udc_iface_disable+0x98>)
   83db8:	4798      	blx	r3
   83dba:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   83dbc:	68fb      	ldr	r3, [r7, #12]
   83dbe:	2b00      	cmp	r3, #0
   83dc0:	d005      	beq.n	83dce <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   83dc2:	68fb      	ldr	r3, [r7, #12]
   83dc4:	789b      	ldrb	r3, [r3, #2]
   83dc6:	4618      	mov	r0, r3
   83dc8:	4b09      	ldr	r3, [pc, #36]	; (83df0 <udc_iface_disable+0x9c>)
   83dca:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   83dcc:	e7f1      	b.n	83db2 <udc_iface_disable+0x5e>
				break;
   83dce:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   83dd0:	68bb      	ldr	r3, [r7, #8]
   83dd2:	685b      	ldr	r3, [r3, #4]
   83dd4:	4798      	blx	r3
	return true;
   83dd6:	2301      	movs	r3, #1
}
   83dd8:	4618      	mov	r0, r3
   83dda:	3710      	adds	r7, #16
   83ddc:	46bd      	mov	sp, r7
   83dde:	bd80      	pop	{r7, pc}
   83de0:	00083cb9 	.word	0x00083cb9
   83de4:	20001338 	.word	0x20001338
   83de8:	2000133c 	.word	0x2000133c
   83dec:	00083c5d 	.word	0x00083c5d
   83df0:	000854e1 	.word	0x000854e1

00083df4 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   83df4:	b580      	push	{r7, lr}
   83df6:	b084      	sub	sp, #16
   83df8:	af00      	add	r7, sp, #0
   83dfa:	4603      	mov	r3, r0
   83dfc:	460a      	mov	r2, r1
   83dfe:	71fb      	strb	r3, [r7, #7]
   83e00:	4613      	mov	r3, r2
   83e02:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   83e04:	79ba      	ldrb	r2, [r7, #6]
   83e06:	79fb      	ldrb	r3, [r7, #7]
   83e08:	4611      	mov	r1, r2
   83e0a:	4618      	mov	r0, r3
   83e0c:	4b1a      	ldr	r3, [pc, #104]	; (83e78 <udc_iface_enable+0x84>)
   83e0e:	4798      	blx	r3
   83e10:	4603      	mov	r3, r0
   83e12:	f083 0301 	eor.w	r3, r3, #1
   83e16:	b2db      	uxtb	r3, r3
   83e18:	2b00      	cmp	r3, #0
   83e1a:	d001      	beq.n	83e20 <udc_iface_enable+0x2c>
		return false;
   83e1c:	2300      	movs	r3, #0
   83e1e:	e027      	b.n	83e70 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   83e20:	4b16      	ldr	r3, [pc, #88]	; (83e7c <udc_iface_enable+0x88>)
   83e22:	681b      	ldr	r3, [r3, #0]
   83e24:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   83e26:	2105      	movs	r1, #5
   83e28:	68f8      	ldr	r0, [r7, #12]
   83e2a:	4b15      	ldr	r3, [pc, #84]	; (83e80 <udc_iface_enable+0x8c>)
   83e2c:	4798      	blx	r3
   83e2e:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   83e30:	68fb      	ldr	r3, [r7, #12]
   83e32:	2b00      	cmp	r3, #0
   83e34:	d011      	beq.n	83e5a <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   83e36:	68fb      	ldr	r3, [r7, #12]
   83e38:	7898      	ldrb	r0, [r3, #2]
   83e3a:	68fb      	ldr	r3, [r7, #12]
   83e3c:	78d9      	ldrb	r1, [r3, #3]
   83e3e:	68fb      	ldr	r3, [r7, #12]
   83e40:	889b      	ldrh	r3, [r3, #4]
   83e42:	b29b      	uxth	r3, r3
   83e44:	461a      	mov	r2, r3
   83e46:	4b0f      	ldr	r3, [pc, #60]	; (83e84 <udc_iface_enable+0x90>)
   83e48:	4798      	blx	r3
   83e4a:	4603      	mov	r3, r0
   83e4c:	f083 0301 	eor.w	r3, r3, #1
   83e50:	b2db      	uxtb	r3, r3
   83e52:	2b00      	cmp	r3, #0
   83e54:	d0e7      	beq.n	83e26 <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   83e56:	2300      	movs	r3, #0
   83e58:	e00a      	b.n	83e70 <udc_iface_enable+0x7c>
			break;
   83e5a:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   83e5c:	4b0a      	ldr	r3, [pc, #40]	; (83e88 <udc_iface_enable+0x94>)
   83e5e:	681b      	ldr	r3, [r3, #0]
   83e60:	685a      	ldr	r2, [r3, #4]
   83e62:	79fb      	ldrb	r3, [r7, #7]
   83e64:	009b      	lsls	r3, r3, #2
   83e66:	4413      	add	r3, r2
   83e68:	681b      	ldr	r3, [r3, #0]
   83e6a:	681b      	ldr	r3, [r3, #0]
   83e6c:	4798      	blx	r3
   83e6e:	4603      	mov	r3, r0
}
   83e70:	4618      	mov	r0, r3
   83e72:	3710      	adds	r7, #16
   83e74:	46bd      	mov	sp, r7
   83e76:	bd80      	pop	{r7, pc}
   83e78:	00083cb9 	.word	0x00083cb9
   83e7c:	2000133c 	.word	0x2000133c
   83e80:	00083c5d 	.word	0x00083c5d
   83e84:	00085129 	.word	0x00085129
   83e88:	20001338 	.word	0x20001338

00083e8c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   83e8c:	b580      	push	{r7, lr}
   83e8e:	af00      	add	r7, sp, #0
	udd_enable();
   83e90:	4b01      	ldr	r3, [pc, #4]	; (83e98 <udc_start+0xc>)
   83e92:	4798      	blx	r3
}
   83e94:	bf00      	nop
   83e96:	bd80      	pop	{r7, pc}
   83e98:	00084ec5 	.word	0x00084ec5

00083e9c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   83e9c:	b580      	push	{r7, lr}
   83e9e:	b082      	sub	sp, #8
   83ea0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   83ea2:	4b0f      	ldr	r3, [pc, #60]	; (83ee0 <udc_reset+0x44>)
   83ea4:	781b      	ldrb	r3, [r3, #0]
   83ea6:	2b00      	cmp	r3, #0
   83ea8:	d010      	beq.n	83ecc <udc_reset+0x30>
		for (iface_num = 0;
   83eaa:	2300      	movs	r3, #0
   83eac:	71fb      	strb	r3, [r7, #7]
   83eae:	e006      	b.n	83ebe <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   83eb0:	79fb      	ldrb	r3, [r7, #7]
   83eb2:	4618      	mov	r0, r3
   83eb4:	4b0b      	ldr	r3, [pc, #44]	; (83ee4 <udc_reset+0x48>)
   83eb6:	4798      	blx	r3
				iface_num++) {
   83eb8:	79fb      	ldrb	r3, [r7, #7]
   83eba:	3301      	adds	r3, #1
   83ebc:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83ebe:	4b0a      	ldr	r3, [pc, #40]	; (83ee8 <udc_reset+0x4c>)
   83ec0:	681b      	ldr	r3, [r3, #0]
   83ec2:	681b      	ldr	r3, [r3, #0]
   83ec4:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   83ec6:	79fa      	ldrb	r2, [r7, #7]
   83ec8:	429a      	cmp	r2, r3
   83eca:	d3f1      	bcc.n	83eb0 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   83ecc:	4b04      	ldr	r3, [pc, #16]	; (83ee0 <udc_reset+0x44>)
   83ece:	2200      	movs	r2, #0
   83ed0:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   83ed2:	4b06      	ldr	r3, [pc, #24]	; (83eec <udc_reset+0x50>)
   83ed4:	2200      	movs	r2, #0
   83ed6:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   83ed8:	bf00      	nop
   83eda:	3708      	adds	r7, #8
   83edc:	46bd      	mov	sp, r7
   83ede:	bd80      	pop	{r7, pc}
   83ee0:	20001336 	.word	0x20001336
   83ee4:	00083d55 	.word	0x00083d55
   83ee8:	20001338 	.word	0x20001338
   83eec:	20001334 	.word	0x20001334

00083ef0 <udc_sof_notify>:

void udc_sof_notify(void)
{
   83ef0:	b580      	push	{r7, lr}
   83ef2:	b082      	sub	sp, #8
   83ef4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   83ef6:	4b14      	ldr	r3, [pc, #80]	; (83f48 <udc_sof_notify+0x58>)
   83ef8:	781b      	ldrb	r3, [r3, #0]
   83efa:	2b00      	cmp	r3, #0
   83efc:	d01f      	beq.n	83f3e <udc_sof_notify+0x4e>
		for (iface_num = 0;
   83efe:	2300      	movs	r3, #0
   83f00:	71fb      	strb	r3, [r7, #7]
   83f02:	e015      	b.n	83f30 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   83f04:	4b11      	ldr	r3, [pc, #68]	; (83f4c <udc_sof_notify+0x5c>)
   83f06:	681b      	ldr	r3, [r3, #0]
   83f08:	685a      	ldr	r2, [r3, #4]
   83f0a:	79fb      	ldrb	r3, [r7, #7]
   83f0c:	009b      	lsls	r3, r3, #2
   83f0e:	4413      	add	r3, r2
   83f10:	681b      	ldr	r3, [r3, #0]
   83f12:	691b      	ldr	r3, [r3, #16]
   83f14:	2b00      	cmp	r3, #0
   83f16:	d008      	beq.n	83f2a <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   83f18:	4b0c      	ldr	r3, [pc, #48]	; (83f4c <udc_sof_notify+0x5c>)
   83f1a:	681b      	ldr	r3, [r3, #0]
   83f1c:	685a      	ldr	r2, [r3, #4]
   83f1e:	79fb      	ldrb	r3, [r7, #7]
   83f20:	009b      	lsls	r3, r3, #2
   83f22:	4413      	add	r3, r2
   83f24:	681b      	ldr	r3, [r3, #0]
   83f26:	691b      	ldr	r3, [r3, #16]
   83f28:	4798      	blx	r3
				iface_num++) {
   83f2a:	79fb      	ldrb	r3, [r7, #7]
   83f2c:	3301      	adds	r3, #1
   83f2e:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83f30:	4b06      	ldr	r3, [pc, #24]	; (83f4c <udc_sof_notify+0x5c>)
   83f32:	681b      	ldr	r3, [r3, #0]
   83f34:	681b      	ldr	r3, [r3, #0]
   83f36:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   83f38:	79fa      	ldrb	r2, [r7, #7]
   83f3a:	429a      	cmp	r2, r3
   83f3c:	d3e2      	bcc.n	83f04 <udc_sof_notify+0x14>
			}
		}
	}
}
   83f3e:	bf00      	nop
   83f40:	3708      	adds	r7, #8
   83f42:	46bd      	mov	sp, r7
   83f44:	bd80      	pop	{r7, pc}
   83f46:	bf00      	nop
   83f48:	20001336 	.word	0x20001336
   83f4c:	20001338 	.word	0x20001338

00083f50 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   83f50:	b580      	push	{r7, lr}
   83f52:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   83f54:	4b06      	ldr	r3, [pc, #24]	; (83f70 <udc_req_std_dev_get_status+0x20>)
   83f56:	88db      	ldrh	r3, [r3, #6]
   83f58:	2b02      	cmp	r3, #2
   83f5a:	d001      	beq.n	83f60 <udc_req_std_dev_get_status+0x10>
		return false;
   83f5c:	2300      	movs	r3, #0
   83f5e:	e004      	b.n	83f6a <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   83f60:	2102      	movs	r1, #2
   83f62:	4804      	ldr	r0, [pc, #16]	; (83f74 <udc_req_std_dev_get_status+0x24>)
   83f64:	4b04      	ldr	r3, [pc, #16]	; (83f78 <udc_req_std_dev_get_status+0x28>)
   83f66:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   83f68:	2301      	movs	r3, #1
}
   83f6a:	4618      	mov	r0, r3
   83f6c:	bd80      	pop	{r7, pc}
   83f6e:	bf00      	nop
   83f70:	20001828 	.word	0x20001828
   83f74:	20001334 	.word	0x20001334
   83f78:	00085101 	.word	0x00085101

00083f7c <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   83f7c:	b580      	push	{r7, lr}
   83f7e:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   83f80:	4b0b      	ldr	r3, [pc, #44]	; (83fb0 <udc_req_std_ep_get_status+0x34>)
   83f82:	88db      	ldrh	r3, [r3, #6]
   83f84:	2b02      	cmp	r3, #2
   83f86:	d001      	beq.n	83f8c <udc_req_std_ep_get_status+0x10>
		return false;
   83f88:	2300      	movs	r3, #0
   83f8a:	e00e      	b.n	83faa <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83f8c:	4b08      	ldr	r3, [pc, #32]	; (83fb0 <udc_req_std_ep_get_status+0x34>)
   83f8e:	889b      	ldrh	r3, [r3, #4]
   83f90:	b2db      	uxtb	r3, r3
   83f92:	4618      	mov	r0, r3
   83f94:	4b07      	ldr	r3, [pc, #28]	; (83fb4 <udc_req_std_ep_get_status+0x38>)
   83f96:	4798      	blx	r3
   83f98:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   83f9a:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83f9c:	4b06      	ldr	r3, [pc, #24]	; (83fb8 <udc_req_std_ep_get_status+0x3c>)
   83f9e:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   83fa0:	2102      	movs	r1, #2
   83fa2:	4805      	ldr	r0, [pc, #20]	; (83fb8 <udc_req_std_ep_get_status+0x3c>)
   83fa4:	4b05      	ldr	r3, [pc, #20]	; (83fbc <udc_req_std_ep_get_status+0x40>)
   83fa6:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   83fa8:	2301      	movs	r3, #1
}
   83faa:	4618      	mov	r0, r3
   83fac:	bd80      	pop	{r7, pc}
   83fae:	bf00      	nop
   83fb0:	20001828 	.word	0x20001828
   83fb4:	00085561 	.word	0x00085561
   83fb8:	20001340 	.word	0x20001340
   83fbc:	00085101 	.word	0x00085101

00083fc0 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   83fc0:	b480      	push	{r7}
   83fc2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83fc4:	4b0b      	ldr	r3, [pc, #44]	; (83ff4 <udc_req_std_dev_clear_feature+0x34>)
   83fc6:	88db      	ldrh	r3, [r3, #6]
   83fc8:	2b00      	cmp	r3, #0
   83fca:	d001      	beq.n	83fd0 <udc_req_std_dev_clear_feature+0x10>
		return false;
   83fcc:	2300      	movs	r3, #0
   83fce:	e00d      	b.n	83fec <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   83fd0:	4b08      	ldr	r3, [pc, #32]	; (83ff4 <udc_req_std_dev_clear_feature+0x34>)
   83fd2:	885b      	ldrh	r3, [r3, #2]
   83fd4:	2b01      	cmp	r3, #1
   83fd6:	d108      	bne.n	83fea <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   83fd8:	4b07      	ldr	r3, [pc, #28]	; (83ff8 <udc_req_std_dev_clear_feature+0x38>)
   83fda:	881b      	ldrh	r3, [r3, #0]
   83fdc:	f023 0302 	bic.w	r3, r3, #2
   83fe0:	b29a      	uxth	r2, r3
   83fe2:	4b05      	ldr	r3, [pc, #20]	; (83ff8 <udc_req_std_dev_clear_feature+0x38>)
   83fe4:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   83fe6:	2301      	movs	r3, #1
   83fe8:	e000      	b.n	83fec <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   83fea:	2300      	movs	r3, #0
}
   83fec:	4618      	mov	r0, r3
   83fee:	46bd      	mov	sp, r7
   83ff0:	bc80      	pop	{r7}
   83ff2:	4770      	bx	lr
   83ff4:	20001828 	.word	0x20001828
   83ff8:	20001334 	.word	0x20001334

00083ffc <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   83ffc:	b580      	push	{r7, lr}
   83ffe:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84000:	4b0a      	ldr	r3, [pc, #40]	; (8402c <udc_req_std_ep_clear_feature+0x30>)
   84002:	88db      	ldrh	r3, [r3, #6]
   84004:	2b00      	cmp	r3, #0
   84006:	d001      	beq.n	8400c <udc_req_std_ep_clear_feature+0x10>
		return false;
   84008:	2300      	movs	r3, #0
   8400a:	e00c      	b.n	84026 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8400c:	4b07      	ldr	r3, [pc, #28]	; (8402c <udc_req_std_ep_clear_feature+0x30>)
   8400e:	885b      	ldrh	r3, [r3, #2]
   84010:	2b00      	cmp	r3, #0
   84012:	d107      	bne.n	84024 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84014:	4b05      	ldr	r3, [pc, #20]	; (8402c <udc_req_std_ep_clear_feature+0x30>)
   84016:	889b      	ldrh	r3, [r3, #4]
   84018:	b2db      	uxtb	r3, r3
   8401a:	4618      	mov	r0, r3
   8401c:	4b04      	ldr	r3, [pc, #16]	; (84030 <udc_req_std_ep_clear_feature+0x34>)
   8401e:	4798      	blx	r3
   84020:	4603      	mov	r3, r0
   84022:	e000      	b.n	84026 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   84024:	2300      	movs	r3, #0
}
   84026:	4618      	mov	r0, r3
   84028:	bd80      	pop	{r7, pc}
   8402a:	bf00      	nop
   8402c:	20001828 	.word	0x20001828
   84030:	000856dd 	.word	0x000856dd

00084034 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   84034:	b580      	push	{r7, lr}
   84036:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84038:	4b26      	ldr	r3, [pc, #152]	; (840d4 <udc_req_std_dev_set_feature+0xa0>)
   8403a:	88db      	ldrh	r3, [r3, #6]
   8403c:	2b00      	cmp	r3, #0
   8403e:	d001      	beq.n	84044 <udc_req_std_dev_set_feature+0x10>
		return false;
   84040:	2300      	movs	r3, #0
   84042:	e045      	b.n	840d0 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   84044:	4b23      	ldr	r3, [pc, #140]	; (840d4 <udc_req_std_dev_set_feature+0xa0>)
   84046:	885b      	ldrh	r3, [r3, #2]
   84048:	2b01      	cmp	r3, #1
   8404a:	d002      	beq.n	84052 <udc_req_std_dev_set_feature+0x1e>
   8404c:	2b02      	cmp	r3, #2
   8404e:	d002      	beq.n	84056 <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   84050:	e03d      	b.n	840ce <udc_req_std_dev_set_feature+0x9a>
		return false;
   84052:	2300      	movs	r3, #0
   84054:	e03c      	b.n	840d0 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   84056:	4b20      	ldr	r3, [pc, #128]	; (840d8 <udc_req_std_dev_set_feature+0xa4>)
   84058:	4798      	blx	r3
   8405a:	4603      	mov	r3, r0
   8405c:	f083 0301 	eor.w	r3, r3, #1
   84060:	b2db      	uxtb	r3, r3
   84062:	2b00      	cmp	r3, #0
   84064:	d130      	bne.n	840c8 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   84066:	4b1b      	ldr	r3, [pc, #108]	; (840d4 <udc_req_std_dev_set_feature+0xa0>)
   84068:	889b      	ldrh	r3, [r3, #4]
   8406a:	b2db      	uxtb	r3, r3
   8406c:	2b00      	cmp	r3, #0
   8406e:	d12d      	bne.n	840cc <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   84070:	4b1a      	ldr	r3, [pc, #104]	; (840dc <udc_req_std_dev_set_feature+0xa8>)
   84072:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84074:	4b17      	ldr	r3, [pc, #92]	; (840d4 <udc_req_std_dev_set_feature+0xa0>)
   84076:	889b      	ldrh	r3, [r3, #4]
   84078:	0a1b      	lsrs	r3, r3, #8
   8407a:	b29b      	uxth	r3, r3
   8407c:	b2db      	uxtb	r3, r3
   8407e:	3b01      	subs	r3, #1
   84080:	2b03      	cmp	r3, #3
   84082:	d81f      	bhi.n	840c4 <udc_req_std_dev_set_feature+0x90>
   84084:	a201      	add	r2, pc, #4	; (adr r2, 8408c <udc_req_std_dev_set_feature+0x58>)
   84086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8408a:	bf00      	nop
   8408c:	0008409d 	.word	0x0008409d
   84090:	000840a7 	.word	0x000840a7
   84094:	000840b1 	.word	0x000840b1
   84098:	000840bb 	.word	0x000840bb
			udd_g_ctrlreq.callback = udd_test_mode_j;
   8409c:	4b0d      	ldr	r3, [pc, #52]	; (840d4 <udc_req_std_dev_set_feature+0xa0>)
   8409e:	4a10      	ldr	r2, [pc, #64]	; (840e0 <udc_req_std_dev_set_feature+0xac>)
   840a0:	611a      	str	r2, [r3, #16]
			return true;
   840a2:	2301      	movs	r3, #1
   840a4:	e014      	b.n	840d0 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   840a6:	4b0b      	ldr	r3, [pc, #44]	; (840d4 <udc_req_std_dev_set_feature+0xa0>)
   840a8:	4a0e      	ldr	r2, [pc, #56]	; (840e4 <udc_req_std_dev_set_feature+0xb0>)
   840aa:	611a      	str	r2, [r3, #16]
			return true;
   840ac:	2301      	movs	r3, #1
   840ae:	e00f      	b.n	840d0 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   840b0:	4b08      	ldr	r3, [pc, #32]	; (840d4 <udc_req_std_dev_set_feature+0xa0>)
   840b2:	4a0d      	ldr	r2, [pc, #52]	; (840e8 <udc_req_std_dev_set_feature+0xb4>)
   840b4:	611a      	str	r2, [r3, #16]
			return true;
   840b6:	2301      	movs	r3, #1
   840b8:	e00a      	b.n	840d0 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   840ba:	4b06      	ldr	r3, [pc, #24]	; (840d4 <udc_req_std_dev_set_feature+0xa0>)
   840bc:	4a0b      	ldr	r2, [pc, #44]	; (840ec <udc_req_std_dev_set_feature+0xb8>)
   840be:	611a      	str	r2, [r3, #16]
			return true;
   840c0:	2301      	movs	r3, #1
   840c2:	e005      	b.n	840d0 <udc_req_std_dev_set_feature+0x9c>
			break;
   840c4:	bf00      	nop
		break;
   840c6:	e002      	b.n	840ce <udc_req_std_dev_set_feature+0x9a>
			break;
   840c8:	bf00      	nop
   840ca:	e000      	b.n	840ce <udc_req_std_dev_set_feature+0x9a>
			break;
   840cc:	bf00      	nop
	}
	return false;
   840ce:	2300      	movs	r3, #0
}
   840d0:	4618      	mov	r0, r3
   840d2:	bd80      	pop	{r7, pc}
   840d4:	20001828 	.word	0x20001828
   840d8:	0008505d 	.word	0x0008505d
   840dc:	00083e9d 	.word	0x00083e9d
   840e0:	0008599d 	.word	0x0008599d
   840e4:	000859d1 	.word	0x000859d1
   840e8:	00085a05 	.word	0x00085a05
   840ec:	00085a29 	.word	0x00085a29

000840f0 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   840f0:	b580      	push	{r7, lr}
   840f2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   840f4:	4b0d      	ldr	r3, [pc, #52]	; (8412c <udc_req_std_ep_set_feature+0x3c>)
   840f6:	88db      	ldrh	r3, [r3, #6]
   840f8:	2b00      	cmp	r3, #0
   840fa:	d001      	beq.n	84100 <udc_req_std_ep_set_feature+0x10>
		return false;
   840fc:	2300      	movs	r3, #0
   840fe:	e012      	b.n	84126 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84100:	4b0a      	ldr	r3, [pc, #40]	; (8412c <udc_req_std_ep_set_feature+0x3c>)
   84102:	885b      	ldrh	r3, [r3, #2]
   84104:	2b00      	cmp	r3, #0
   84106:	d10d      	bne.n	84124 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   84108:	4b08      	ldr	r3, [pc, #32]	; (8412c <udc_req_std_ep_set_feature+0x3c>)
   8410a:	889b      	ldrh	r3, [r3, #4]
   8410c:	b2db      	uxtb	r3, r3
   8410e:	4618      	mov	r0, r3
   84110:	4b07      	ldr	r3, [pc, #28]	; (84130 <udc_req_std_ep_set_feature+0x40>)
   84112:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84114:	4b05      	ldr	r3, [pc, #20]	; (8412c <udc_req_std_ep_set_feature+0x3c>)
   84116:	889b      	ldrh	r3, [r3, #4]
   84118:	b2db      	uxtb	r3, r3
   8411a:	4618      	mov	r0, r3
   8411c:	4b05      	ldr	r3, [pc, #20]	; (84134 <udc_req_std_ep_set_feature+0x44>)
   8411e:	4798      	blx	r3
   84120:	4603      	mov	r3, r0
   84122:	e000      	b.n	84126 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   84124:	2300      	movs	r3, #0
}
   84126:	4618      	mov	r0, r3
   84128:	bd80      	pop	{r7, pc}
   8412a:	bf00      	nop
   8412c:	20001828 	.word	0x20001828
   84130:	00085915 	.word	0x00085915
   84134:	000855c9 	.word	0x000855c9

00084138 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   84138:	b580      	push	{r7, lr}
   8413a:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   8413c:	4b05      	ldr	r3, [pc, #20]	; (84154 <udc_valid_address+0x1c>)
   8413e:	885b      	ldrh	r3, [r3, #2]
   84140:	b2db      	uxtb	r3, r3
   84142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   84146:	b2db      	uxtb	r3, r3
   84148:	4618      	mov	r0, r3
   8414a:	4b03      	ldr	r3, [pc, #12]	; (84158 <udc_valid_address+0x20>)
   8414c:	4798      	blx	r3
}
   8414e:	bf00      	nop
   84150:	bd80      	pop	{r7, pc}
   84152:	bf00      	nop
   84154:	20001828 	.word	0x20001828
   84158:	00085081 	.word	0x00085081

0008415c <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   8415c:	b480      	push	{r7}
   8415e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84160:	4b06      	ldr	r3, [pc, #24]	; (8417c <udc_req_std_dev_set_address+0x20>)
   84162:	88db      	ldrh	r3, [r3, #6]
   84164:	2b00      	cmp	r3, #0
   84166:	d001      	beq.n	8416c <udc_req_std_dev_set_address+0x10>
		return false;
   84168:	2300      	movs	r3, #0
   8416a:	e003      	b.n	84174 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   8416c:	4b03      	ldr	r3, [pc, #12]	; (8417c <udc_req_std_dev_set_address+0x20>)
   8416e:	4a04      	ldr	r2, [pc, #16]	; (84180 <udc_req_std_dev_set_address+0x24>)
   84170:	611a      	str	r2, [r3, #16]
	return true;
   84172:	2301      	movs	r3, #1
}
   84174:	4618      	mov	r0, r3
   84176:	46bd      	mov	sp, r7
   84178:	bc80      	pop	{r7}
   8417a:	4770      	bx	lr
   8417c:	20001828 	.word	0x20001828
   84180:	00084139 	.word	0x00084139

00084184 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   84184:	b580      	push	{r7, lr}
   84186:	b084      	sub	sp, #16
   84188:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   8418a:	2300      	movs	r3, #0
   8418c:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8418e:	4b29      	ldr	r3, [pc, #164]	; (84234 <udc_req_std_dev_get_str_desc+0xb0>)
   84190:	885b      	ldrh	r3, [r3, #2]
   84192:	b2db      	uxtb	r3, r3
   84194:	2b03      	cmp	r3, #3
   84196:	d820      	bhi.n	841da <udc_req_std_dev_get_str_desc+0x56>
   84198:	a201      	add	r2, pc, #4	; (adr r2, 841a0 <udc_req_std_dev_get_str_desc+0x1c>)
   8419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8419e:	bf00      	nop
   841a0:	000841b1 	.word	0x000841b1
   841a4:	000841bb 	.word	0x000841bb
   841a8:	000841c5 	.word	0x000841c5
   841ac:	000841cf 	.word	0x000841cf
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   841b0:	2104      	movs	r1, #4
   841b2:	4821      	ldr	r0, [pc, #132]	; (84238 <udc_req_std_dev_get_str_desc+0xb4>)
   841b4:	4b21      	ldr	r3, [pc, #132]	; (8423c <udc_req_std_dev_get_str_desc+0xb8>)
   841b6:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   841b8:	e011      	b.n	841de <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   841ba:	2315      	movs	r3, #21
   841bc:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   841be:	4b20      	ldr	r3, [pc, #128]	; (84240 <udc_req_std_dev_get_str_desc+0xbc>)
   841c0:	60bb      	str	r3, [r7, #8]
		break;
   841c2:	e00c      	b.n	841de <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   841c4:	2313      	movs	r3, #19
   841c6:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   841c8:	4b1e      	ldr	r3, [pc, #120]	; (84244 <udc_req_std_dev_get_str_desc+0xc0>)
   841ca:	60bb      	str	r3, [r7, #8]
		break;
   841cc:	e007      	b.n	841de <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   841ce:	2320      	movs	r3, #32
   841d0:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   841d2:	4b1d      	ldr	r3, [pc, #116]	; (84248 <udc_req_std_dev_get_str_desc+0xc4>)
   841d4:	4798      	blx	r3
   841d6:	60b8      	str	r0, [r7, #8]
		break;
   841d8:	e001      	b.n	841de <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   841da:	2300      	movs	r3, #0
   841dc:	e026      	b.n	8422c <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   841de:	79fb      	ldrb	r3, [r7, #7]
   841e0:	2b00      	cmp	r3, #0
   841e2:	d022      	beq.n	8422a <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   841e4:	2300      	movs	r3, #0
   841e6:	73fb      	strb	r3, [r7, #15]
   841e8:	e00d      	b.n	84206 <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   841ea:	7bfb      	ldrb	r3, [r7, #15]
   841ec:	68ba      	ldr	r2, [r7, #8]
   841ee:	4413      	add	r3, r2
   841f0:	781a      	ldrb	r2, [r3, #0]
   841f2:	7bfb      	ldrb	r3, [r7, #15]
   841f4:	b291      	uxth	r1, r2
   841f6:	4a15      	ldr	r2, [pc, #84]	; (8424c <udc_req_std_dev_get_str_desc+0xc8>)
   841f8:	005b      	lsls	r3, r3, #1
   841fa:	4413      	add	r3, r2
   841fc:	460a      	mov	r2, r1
   841fe:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   84200:	7bfb      	ldrb	r3, [r7, #15]
   84202:	3301      	adds	r3, #1
   84204:	73fb      	strb	r3, [r7, #15]
   84206:	7bfa      	ldrb	r2, [r7, #15]
   84208:	79fb      	ldrb	r3, [r7, #7]
   8420a:	429a      	cmp	r2, r3
   8420c:	d3ed      	bcc.n	841ea <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   8420e:	79fb      	ldrb	r3, [r7, #7]
   84210:	3301      	adds	r3, #1
   84212:	b2db      	uxtb	r3, r3
   84214:	005b      	lsls	r3, r3, #1
   84216:	b2da      	uxtb	r2, r3
   84218:	4b0c      	ldr	r3, [pc, #48]	; (8424c <udc_req_std_dev_get_str_desc+0xc8>)
   8421a:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   8421c:	4b0b      	ldr	r3, [pc, #44]	; (8424c <udc_req_std_dev_get_str_desc+0xc8>)
   8421e:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   84220:	b29b      	uxth	r3, r3
   84222:	4619      	mov	r1, r3
   84224:	4809      	ldr	r0, [pc, #36]	; (8424c <udc_req_std_dev_get_str_desc+0xc8>)
   84226:	4b05      	ldr	r3, [pc, #20]	; (8423c <udc_req_std_dev_get_str_desc+0xb8>)
   84228:	4798      	blx	r3
	}

	return true;
   8422a:	2301      	movs	r3, #1
}
   8422c:	4618      	mov	r0, r3
   8422e:	3710      	adds	r7, #16
   84230:	46bd      	mov	sp, r7
   84232:	bd80      	pop	{r7, pc}
   84234:	20001828 	.word	0x20001828
   84238:	2000028c 	.word	0x2000028c
   8423c:	00085101 	.word	0x00085101
   84240:	20000290 	.word	0x20000290
   84244:	200002a8 	.word	0x200002a8
   84248:	00083c11 	.word	0x00083c11
   8424c:	200002bc 	.word	0x200002bc

00084250 <udc_req_std_dev_get_descriptor>:
		WINUSB_PLATFORM_DESCRIPTOR_LENGTH, 0x00, //length of other descriptor
		0x01, // when asking for MS 2.0 descriptor, will do bmRequestType = 0xC0, bRequest = this (0x01)
		0x00  // if non 0, Windows will send this before asking for the next descriptor
		};
static bool udc_req_std_dev_get_descriptor(void)
{
   84250:	b580      	push	{r7, lr}
   84252:	b082      	sub	sp, #8
   84254:	af00      	add	r7, sp, #0
	uint8_t conf_num;


	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   84256:	4b7f      	ldr	r3, [pc, #508]	; (84454 <udc_req_std_dev_get_descriptor+0x204>)
   84258:	885b      	ldrh	r3, [r3, #2]
   8425a:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   8425c:	4b7d      	ldr	r3, [pc, #500]	; (84454 <udc_req_std_dev_get_descriptor+0x204>)
   8425e:	885b      	ldrh	r3, [r3, #2]
   84260:	0a1b      	lsrs	r3, r3, #8
   84262:	b29b      	uxth	r3, r3
   84264:	b2db      	uxtb	r3, r3
   84266:	3b01      	subs	r3, #1
   84268:	2b0e      	cmp	r3, #14
   8426a:	f200 80e0 	bhi.w	8442e <udc_req_std_dev_get_descriptor+0x1de>
   8426e:	a201      	add	r2, pc, #4	; (adr r2, 84274 <udc_req_std_dev_get_descriptor+0x24>)
   84270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84274:	000842b1 	.word	0x000842b1
   84278:	00084301 	.word	0x00084301
   8427c:	0008441b 	.word	0x0008441b
   84280:	0008442f 	.word	0x0008442f
   84284:	0008442f 	.word	0x0008442f
   84288:	0008437b 	.word	0x0008437b
   8428c:	00084391 	.word	0x00084391
   84290:	0008442f 	.word	0x0008442f
   84294:	0008442f 	.word	0x0008442f
   84298:	0008442f 	.word	0x0008442f
   8429c:	0008442f 	.word	0x0008442f
   842a0:	0008442f 	.word	0x0008442f
   842a4:	0008442f 	.word	0x0008442f
   842a8:	0008442f 	.word	0x0008442f
   842ac:	00084411 	.word	0x00084411
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   842b0:	4b69      	ldr	r3, [pc, #420]	; (84458 <udc_req_std_dev_get_descriptor+0x208>)
   842b2:	4798      	blx	r3
   842b4:	4603      	mov	r3, r0
   842b6:	f083 0301 	eor.w	r3, r3, #1
   842ba:	b2db      	uxtb	r3, r3
   842bc:	2b00      	cmp	r3, #0
   842be:	d00a      	beq.n	842d6 <udc_req_std_dev_get_descriptor+0x86>
			//(udc_config.confdev_hs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   842c0:	4b66      	ldr	r3, [pc, #408]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   842c2:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   842c4:	4b65      	ldr	r3, [pc, #404]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   842c6:	689b      	ldr	r3, [r3, #8]
   842c8:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   842ca:	b29b      	uxth	r3, r3
   842cc:	4619      	mov	r1, r3
   842ce:	4610      	mov	r0, r2
   842d0:	4b63      	ldr	r3, [pc, #396]	; (84460 <udc_req_std_dev_get_descriptor+0x210>)
   842d2:	4798      	blx	r3
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   842d4:	e0ae      	b.n	84434 <udc_req_std_dev_get_descriptor+0x1e4>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   842d6:	4b61      	ldr	r3, [pc, #388]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   842d8:	681b      	ldr	r3, [r3, #0]
   842da:	2200      	movs	r2, #0
   842dc:	f042 0210 	orr.w	r2, r2, #16
   842e0:	709a      	strb	r2, [r3, #2]
   842e2:	2200      	movs	r2, #0
   842e4:	f042 0202 	orr.w	r2, r2, #2
   842e8:	70da      	strb	r2, [r3, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   842ea:	4b5c      	ldr	r3, [pc, #368]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   842ec:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   842ee:	4b5b      	ldr	r3, [pc, #364]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   842f0:	681b      	ldr	r3, [r3, #0]
   842f2:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   842f4:	b29b      	uxth	r3, r3
   842f6:	4619      	mov	r1, r3
   842f8:	4610      	mov	r0, r2
   842fa:	4b59      	ldr	r3, [pc, #356]	; (84460 <udc_req_std_dev_get_descriptor+0x210>)
   842fc:	4798      	blx	r3
		break;
   842fe:	e099      	b.n	84434 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   84300:	4b55      	ldr	r3, [pc, #340]	; (84458 <udc_req_std_dev_get_descriptor+0x208>)
   84302:	4798      	blx	r3
   84304:	4603      	mov	r3, r0
   84306:	2b00      	cmp	r3, #0
   84308:	d019      	beq.n	8433e <udc_req_std_dev_get_descriptor+0xee>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   8430a:	4b54      	ldr	r3, [pc, #336]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   8430c:	689b      	ldr	r3, [r3, #8]
   8430e:	7c5b      	ldrb	r3, [r3, #17]
   84310:	79fa      	ldrb	r2, [r7, #7]
   84312:	429a      	cmp	r2, r3
   84314:	d301      	bcc.n	8431a <udc_req_std_dev_get_descriptor+0xca>
					bNumConfigurations) {
				return false;
   84316:	2300      	movs	r3, #0
   84318:	e097      	b.n	8444a <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8431a:	4b50      	ldr	r3, [pc, #320]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   8431c:	691a      	ldr	r2, [r3, #16]
   8431e:	79fb      	ldrb	r3, [r7, #7]
   84320:	00db      	lsls	r3, r3, #3
   84322:	4413      	add	r3, r2
   84324:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   84326:	4b4d      	ldr	r3, [pc, #308]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   84328:	691a      	ldr	r2, [r3, #16]
   8432a:	79fb      	ldrb	r3, [r7, #7]
   8432c:	00db      	lsls	r3, r3, #3
   8432e:	4413      	add	r3, r2
   84330:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84332:	885b      	ldrh	r3, [r3, #2]
   84334:	b29b      	uxth	r3, r3
   84336:	4619      	mov	r1, r3
   84338:	4b49      	ldr	r3, [pc, #292]	; (84460 <udc_req_std_dev_get_descriptor+0x210>)
   8433a:	4798      	blx	r3
   8433c:	e018      	b.n	84370 <udc_req_std_dev_get_descriptor+0x120>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   8433e:	4b47      	ldr	r3, [pc, #284]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   84340:	681b      	ldr	r3, [r3, #0]
   84342:	7c5b      	ldrb	r3, [r3, #17]
   84344:	79fa      	ldrb	r2, [r7, #7]
   84346:	429a      	cmp	r2, r3
   84348:	d301      	bcc.n	8434e <udc_req_std_dev_get_descriptor+0xfe>
					bNumConfigurations) {
				return false;
   8434a:	2300      	movs	r3, #0
   8434c:	e07d      	b.n	8444a <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8434e:	4b43      	ldr	r3, [pc, #268]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   84350:	685a      	ldr	r2, [r3, #4]
   84352:	79fb      	ldrb	r3, [r7, #7]
   84354:	00db      	lsls	r3, r3, #3
   84356:	4413      	add	r3, r2
   84358:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   8435a:	4b40      	ldr	r3, [pc, #256]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   8435c:	685a      	ldr	r2, [r3, #4]
   8435e:	79fb      	ldrb	r3, [r7, #7]
   84360:	00db      	lsls	r3, r3, #3
   84362:	4413      	add	r3, r2
   84364:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84366:	885b      	ldrh	r3, [r3, #2]
   84368:	b29b      	uxth	r3, r3
   8436a:	4619      	mov	r1, r3
   8436c:	4b3c      	ldr	r3, [pc, #240]	; (84460 <udc_req_std_dev_get_descriptor+0x210>)
   8436e:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84370:	4b38      	ldr	r3, [pc, #224]	; (84454 <udc_req_std_dev_get_descriptor+0x204>)
   84372:	689b      	ldr	r3, [r3, #8]
   84374:	2202      	movs	r2, #2
   84376:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   84378:	e05c      	b.n	84434 <udc_req_std_dev_get_descriptor+0x1e4>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   8437a:	4b38      	ldr	r3, [pc, #224]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   8437c:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   8437e:	4b37      	ldr	r3, [pc, #220]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   84380:	68db      	ldr	r3, [r3, #12]
   84382:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   84384:	b29b      	uxth	r3, r3
   84386:	4619      	mov	r1, r3
   84388:	4610      	mov	r0, r2
   8438a:	4b35      	ldr	r3, [pc, #212]	; (84460 <udc_req_std_dev_get_descriptor+0x210>)
   8438c:	4798      	blx	r3
		break;
   8438e:	e051      	b.n	84434 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   84390:	4b31      	ldr	r3, [pc, #196]	; (84458 <udc_req_std_dev_get_descriptor+0x208>)
   84392:	4798      	blx	r3
   84394:	4603      	mov	r3, r0
   84396:	f083 0301 	eor.w	r3, r3, #1
   8439a:	b2db      	uxtb	r3, r3
   8439c:	2b00      	cmp	r3, #0
   8439e:	d019      	beq.n	843d4 <udc_req_std_dev_get_descriptor+0x184>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   843a0:	4b2e      	ldr	r3, [pc, #184]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   843a2:	689b      	ldr	r3, [r3, #8]
   843a4:	7c5b      	ldrb	r3, [r3, #17]
   843a6:	79fa      	ldrb	r2, [r7, #7]
   843a8:	429a      	cmp	r2, r3
   843aa:	d301      	bcc.n	843b0 <udc_req_std_dev_get_descriptor+0x160>
					bNumConfigurations) {
				return false;
   843ac:	2300      	movs	r3, #0
   843ae:	e04c      	b.n	8444a <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   843b0:	4b2a      	ldr	r3, [pc, #168]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   843b2:	691a      	ldr	r2, [r3, #16]
   843b4:	79fb      	ldrb	r3, [r7, #7]
   843b6:	00db      	lsls	r3, r3, #3
   843b8:	4413      	add	r3, r2
   843ba:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   843bc:	4b27      	ldr	r3, [pc, #156]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   843be:	691a      	ldr	r2, [r3, #16]
   843c0:	79fb      	ldrb	r3, [r7, #7]
   843c2:	00db      	lsls	r3, r3, #3
   843c4:	4413      	add	r3, r2
   843c6:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   843c8:	885b      	ldrh	r3, [r3, #2]
   843ca:	b29b      	uxth	r3, r3
   843cc:	4619      	mov	r1, r3
   843ce:	4b24      	ldr	r3, [pc, #144]	; (84460 <udc_req_std_dev_get_descriptor+0x210>)
   843d0:	4798      	blx	r3
   843d2:	e018      	b.n	84406 <udc_req_std_dev_get_descriptor+0x1b6>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   843d4:	4b21      	ldr	r3, [pc, #132]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   843d6:	681b      	ldr	r3, [r3, #0]
   843d8:	7c5b      	ldrb	r3, [r3, #17]
   843da:	79fa      	ldrb	r2, [r7, #7]
   843dc:	429a      	cmp	r2, r3
   843de:	d301      	bcc.n	843e4 <udc_req_std_dev_get_descriptor+0x194>
					bNumConfigurations) {
				return false;
   843e0:	2300      	movs	r3, #0
   843e2:	e032      	b.n	8444a <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   843e4:	4b1d      	ldr	r3, [pc, #116]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   843e6:	685a      	ldr	r2, [r3, #4]
   843e8:	79fb      	ldrb	r3, [r7, #7]
   843ea:	00db      	lsls	r3, r3, #3
   843ec:	4413      	add	r3, r2
   843ee:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   843f0:	4b1a      	ldr	r3, [pc, #104]	; (8445c <udc_req_std_dev_get_descriptor+0x20c>)
   843f2:	685a      	ldr	r2, [r3, #4]
   843f4:	79fb      	ldrb	r3, [r7, #7]
   843f6:	00db      	lsls	r3, r3, #3
   843f8:	4413      	add	r3, r2
   843fa:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   843fc:	885b      	ldrh	r3, [r3, #2]
   843fe:	b29b      	uxth	r3, r3
   84400:	4619      	mov	r1, r3
   84402:	4b17      	ldr	r3, [pc, #92]	; (84460 <udc_req_std_dev_get_descriptor+0x210>)
   84404:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84406:	4b13      	ldr	r3, [pc, #76]	; (84454 <udc_req_std_dev_get_descriptor+0x204>)
   84408:	689b      	ldr	r3, [r3, #8]
   8440a:	2207      	movs	r2, #7
   8440c:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   8440e:	e011      	b.n	84434 <udc_req_std_dev_get_descriptor+0x1e4>
#endif
	case USB_DT_BOS: //bos descriptor
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   84410:	2121      	movs	r1, #33	; 0x21
   84412:	4814      	ldr	r0, [pc, #80]	; (84464 <udc_req_std_dev_get_descriptor+0x214>)
   84414:	4b12      	ldr	r3, [pc, #72]	; (84460 <udc_req_std_dev_get_descriptor+0x210>)
   84416:	4798      	blx	r3
			0x21);
		break;
   84418:	e00c      	b.n	84434 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   8441a:	4b13      	ldr	r3, [pc, #76]	; (84468 <udc_req_std_dev_get_descriptor+0x218>)
   8441c:	4798      	blx	r3
   8441e:	4603      	mov	r3, r0
   84420:	f083 0301 	eor.w	r3, r3, #1
   84424:	b2db      	uxtb	r3, r3
   84426:	2b00      	cmp	r3, #0
   84428:	d003      	beq.n	84432 <udc_req_std_dev_get_descriptor+0x1e2>
			return false;
   8442a:	2300      	movs	r3, #0
   8442c:	e00d      	b.n	8444a <udc_req_std_dev_get_descriptor+0x1fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   8442e:	2300      	movs	r3, #0
   84430:	e00b      	b.n	8444a <udc_req_std_dev_get_descriptor+0x1fa>
		break;
   84432:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   84434:	4b07      	ldr	r3, [pc, #28]	; (84454 <udc_req_std_dev_get_descriptor+0x204>)
   84436:	88da      	ldrh	r2, [r3, #6]
   84438:	4b06      	ldr	r3, [pc, #24]	; (84454 <udc_req_std_dev_get_descriptor+0x204>)
   8443a:	899b      	ldrh	r3, [r3, #12]
   8443c:	429a      	cmp	r2, r3
   8443e:	d203      	bcs.n	84448 <udc_req_std_dev_get_descriptor+0x1f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   84440:	4b04      	ldr	r3, [pc, #16]	; (84454 <udc_req_std_dev_get_descriptor+0x204>)
   84442:	88da      	ldrh	r2, [r3, #6]
   84444:	4b03      	ldr	r3, [pc, #12]	; (84454 <udc_req_std_dev_get_descriptor+0x204>)
   84446:	819a      	strh	r2, [r3, #12]
	}
	return true;
   84448:	2301      	movs	r3, #1
}
   8444a:	4618      	mov	r0, r3
   8444c:	3708      	adds	r7, #8
   8444e:	46bd      	mov	sp, r7
   84450:	bd80      	pop	{r7, pc}
   84452:	bf00      	nop
   84454:	20001828 	.word	0x20001828
   84458:	0008505d 	.word	0x0008505d
   8445c:	20000428 	.word	0x20000428
   84460:	00085101 	.word	0x00085101
   84464:	0008da14 	.word	0x0008da14
   84468:	00084185 	.word	0x00084185

0008446c <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   8446c:	b580      	push	{r7, lr}
   8446e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   84470:	4b06      	ldr	r3, [pc, #24]	; (8448c <udc_req_std_dev_get_configuration+0x20>)
   84472:	88db      	ldrh	r3, [r3, #6]
   84474:	2b01      	cmp	r3, #1
   84476:	d001      	beq.n	8447c <udc_req_std_dev_get_configuration+0x10>
		return false;
   84478:	2300      	movs	r3, #0
   8447a:	e004      	b.n	84486 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   8447c:	2101      	movs	r1, #1
   8447e:	4804      	ldr	r0, [pc, #16]	; (84490 <udc_req_std_dev_get_configuration+0x24>)
   84480:	4b04      	ldr	r3, [pc, #16]	; (84494 <udc_req_std_dev_get_configuration+0x28>)
   84482:	4798      	blx	r3
	return true;
   84484:	2301      	movs	r3, #1
}
   84486:	4618      	mov	r0, r3
   84488:	bd80      	pop	{r7, pc}
   8448a:	bf00      	nop
   8448c:	20001828 	.word	0x20001828
   84490:	20001336 	.word	0x20001336
   84494:	00085101 	.word	0x00085101

00084498 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   84498:	b580      	push	{r7, lr}
   8449a:	b082      	sub	sp, #8
   8449c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   8449e:	4b37      	ldr	r3, [pc, #220]	; (8457c <udc_req_std_dev_set_configuration+0xe4>)
   844a0:	88db      	ldrh	r3, [r3, #6]
   844a2:	2b00      	cmp	r3, #0
   844a4:	d001      	beq.n	844aa <udc_req_std_dev_set_configuration+0x12>
		return false;
   844a6:	2300      	movs	r3, #0
   844a8:	e063      	b.n	84572 <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   844aa:	4b35      	ldr	r3, [pc, #212]	; (84580 <udc_req_std_dev_set_configuration+0xe8>)
   844ac:	4798      	blx	r3
   844ae:	4603      	mov	r3, r0
   844b0:	2b00      	cmp	r3, #0
   844b2:	d101      	bne.n	844b8 <udc_req_std_dev_set_configuration+0x20>
		return false;
   844b4:	2300      	movs	r3, #0
   844b6:	e05c      	b.n	84572 <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   844b8:	4b32      	ldr	r3, [pc, #200]	; (84584 <udc_req_std_dev_set_configuration+0xec>)
   844ba:	4798      	blx	r3
   844bc:	4603      	mov	r3, r0
   844be:	2b00      	cmp	r3, #0
   844c0:	d009      	beq.n	844d6 <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   844c2:	4b2e      	ldr	r3, [pc, #184]	; (8457c <udc_req_std_dev_set_configuration+0xe4>)
   844c4:	885b      	ldrh	r3, [r3, #2]
   844c6:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   844c8:	4a2f      	ldr	r2, [pc, #188]	; (84588 <udc_req_std_dev_set_configuration+0xf0>)
   844ca:	6892      	ldr	r2, [r2, #8]
   844cc:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   844ce:	4293      	cmp	r3, r2
   844d0:	dd0b      	ble.n	844ea <udc_req_std_dev_set_configuration+0x52>
			return false;
   844d2:	2300      	movs	r3, #0
   844d4:	e04d      	b.n	84572 <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   844d6:	4b29      	ldr	r3, [pc, #164]	; (8457c <udc_req_std_dev_set_configuration+0xe4>)
   844d8:	885b      	ldrh	r3, [r3, #2]
   844da:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   844dc:	4a2a      	ldr	r2, [pc, #168]	; (84588 <udc_req_std_dev_set_configuration+0xf0>)
   844de:	6812      	ldr	r2, [r2, #0]
   844e0:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   844e2:	4293      	cmp	r3, r2
   844e4:	dd01      	ble.n	844ea <udc_req_std_dev_set_configuration+0x52>
			return false;
   844e6:	2300      	movs	r3, #0
   844e8:	e043      	b.n	84572 <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   844ea:	4b28      	ldr	r3, [pc, #160]	; (8458c <udc_req_std_dev_set_configuration+0xf4>)
   844ec:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   844ee:	4b23      	ldr	r3, [pc, #140]	; (8457c <udc_req_std_dev_set_configuration+0xe4>)
   844f0:	885b      	ldrh	r3, [r3, #2]
   844f2:	b2da      	uxtb	r2, r3
   844f4:	4b26      	ldr	r3, [pc, #152]	; (84590 <udc_req_std_dev_set_configuration+0xf8>)
   844f6:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   844f8:	4b25      	ldr	r3, [pc, #148]	; (84590 <udc_req_std_dev_set_configuration+0xf8>)
   844fa:	781b      	ldrb	r3, [r3, #0]
   844fc:	2b00      	cmp	r3, #0
   844fe:	d101      	bne.n	84504 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   84500:	2301      	movs	r3, #1
   84502:	e036      	b.n	84572 <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84504:	4b1f      	ldr	r3, [pc, #124]	; (84584 <udc_req_std_dev_set_configuration+0xec>)
   84506:	4798      	blx	r3
   84508:	4603      	mov	r3, r0
   8450a:	2b00      	cmp	r3, #0
   8450c:	d00b      	beq.n	84526 <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   8450e:	4b1e      	ldr	r3, [pc, #120]	; (84588 <udc_req_std_dev_set_configuration+0xf0>)
   84510:	691a      	ldr	r2, [r3, #16]
   84512:	4b1f      	ldr	r3, [pc, #124]	; (84590 <udc_req_std_dev_set_configuration+0xf8>)
   84514:	781b      	ldrb	r3, [r3, #0]
   84516:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   8451a:	3b01      	subs	r3, #1
   8451c:	00db      	lsls	r3, r3, #3
   8451e:	4413      	add	r3, r2
   84520:	4a1c      	ldr	r2, [pc, #112]	; (84594 <udc_req_std_dev_set_configuration+0xfc>)
   84522:	6013      	str	r3, [r2, #0]
   84524:	e00a      	b.n	8453c <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   84526:	4b18      	ldr	r3, [pc, #96]	; (84588 <udc_req_std_dev_set_configuration+0xf0>)
   84528:	685a      	ldr	r2, [r3, #4]
   8452a:	4b19      	ldr	r3, [pc, #100]	; (84590 <udc_req_std_dev_set_configuration+0xf8>)
   8452c:	781b      	ldrb	r3, [r3, #0]
   8452e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84532:	3b01      	subs	r3, #1
   84534:	00db      	lsls	r3, r3, #3
   84536:	4413      	add	r3, r2
   84538:	4a16      	ldr	r2, [pc, #88]	; (84594 <udc_req_std_dev_set_configuration+0xfc>)
   8453a:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8453c:	2300      	movs	r3, #0
   8453e:	71fb      	strb	r3, [r7, #7]
   84540:	e00f      	b.n	84562 <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   84542:	79fb      	ldrb	r3, [r7, #7]
   84544:	2100      	movs	r1, #0
   84546:	4618      	mov	r0, r3
   84548:	4b13      	ldr	r3, [pc, #76]	; (84598 <udc_req_std_dev_set_configuration+0x100>)
   8454a:	4798      	blx	r3
   8454c:	4603      	mov	r3, r0
   8454e:	f083 0301 	eor.w	r3, r3, #1
   84552:	b2db      	uxtb	r3, r3
   84554:	2b00      	cmp	r3, #0
   84556:	d001      	beq.n	8455c <udc_req_std_dev_set_configuration+0xc4>
			return false;
   84558:	2300      	movs	r3, #0
   8455a:	e00a      	b.n	84572 <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   8455c:	79fb      	ldrb	r3, [r7, #7]
   8455e:	3301      	adds	r3, #1
   84560:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84562:	4b0c      	ldr	r3, [pc, #48]	; (84594 <udc_req_std_dev_set_configuration+0xfc>)
   84564:	681b      	ldr	r3, [r3, #0]
   84566:	681b      	ldr	r3, [r3, #0]
   84568:	791b      	ldrb	r3, [r3, #4]
   8456a:	79fa      	ldrb	r2, [r7, #7]
   8456c:	429a      	cmp	r2, r3
   8456e:	d3e8      	bcc.n	84542 <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   84570:	2301      	movs	r3, #1
}
   84572:	4618      	mov	r0, r3
   84574:	3708      	adds	r7, #8
   84576:	46bd      	mov	sp, r7
   84578:	bd80      	pop	{r7, pc}
   8457a:	bf00      	nop
   8457c:	20001828 	.word	0x20001828
   84580:	000850c5 	.word	0x000850c5
   84584:	0008505d 	.word	0x0008505d
   84588:	20000428 	.word	0x20000428
   8458c:	00083e9d 	.word	0x00083e9d
   84590:	20001336 	.word	0x20001336
   84594:	20001338 	.word	0x20001338
   84598:	00083df5 	.word	0x00083df5

0008459c <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   8459c:	b580      	push	{r7, lr}
   8459e:	b082      	sub	sp, #8
   845a0:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   845a2:	4b1e      	ldr	r3, [pc, #120]	; (8461c <udc_req_std_iface_get_setting+0x80>)
   845a4:	88db      	ldrh	r3, [r3, #6]
   845a6:	2b01      	cmp	r3, #1
   845a8:	d001      	beq.n	845ae <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   845aa:	2300      	movs	r3, #0
   845ac:	e032      	b.n	84614 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   845ae:	4b1c      	ldr	r3, [pc, #112]	; (84620 <udc_req_std_iface_get_setting+0x84>)
   845b0:	781b      	ldrb	r3, [r3, #0]
   845b2:	2b00      	cmp	r3, #0
   845b4:	d101      	bne.n	845ba <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   845b6:	2300      	movs	r3, #0
   845b8:	e02c      	b.n	84614 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   845ba:	4b18      	ldr	r3, [pc, #96]	; (8461c <udc_req_std_iface_get_setting+0x80>)
   845bc:	889b      	ldrh	r3, [r3, #4]
   845be:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   845c0:	4b18      	ldr	r3, [pc, #96]	; (84624 <udc_req_std_iface_get_setting+0x88>)
   845c2:	681b      	ldr	r3, [r3, #0]
   845c4:	681b      	ldr	r3, [r3, #0]
   845c6:	791b      	ldrb	r3, [r3, #4]
   845c8:	79fa      	ldrb	r2, [r7, #7]
   845ca:	429a      	cmp	r2, r3
   845cc:	d301      	bcc.n	845d2 <udc_req_std_iface_get_setting+0x36>
		return false;
   845ce:	2300      	movs	r3, #0
   845d0:	e020      	b.n	84614 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   845d2:	79fb      	ldrb	r3, [r7, #7]
   845d4:	2100      	movs	r1, #0
   845d6:	4618      	mov	r0, r3
   845d8:	4b13      	ldr	r3, [pc, #76]	; (84628 <udc_req_std_iface_get_setting+0x8c>)
   845da:	4798      	blx	r3
   845dc:	4603      	mov	r3, r0
   845de:	f083 0301 	eor.w	r3, r3, #1
   845e2:	b2db      	uxtb	r3, r3
   845e4:	2b00      	cmp	r3, #0
   845e6:	d001      	beq.n	845ec <udc_req_std_iface_get_setting+0x50>
		return false;
   845e8:	2300      	movs	r3, #0
   845ea:	e013      	b.n	84614 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   845ec:	4b0d      	ldr	r3, [pc, #52]	; (84624 <udc_req_std_iface_get_setting+0x88>)
   845ee:	681b      	ldr	r3, [r3, #0]
   845f0:	685a      	ldr	r2, [r3, #4]
   845f2:	79fb      	ldrb	r3, [r7, #7]
   845f4:	009b      	lsls	r3, r3, #2
   845f6:	4413      	add	r3, r2
   845f8:	681b      	ldr	r3, [r3, #0]
   845fa:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   845fc:	683b      	ldr	r3, [r7, #0]
   845fe:	68db      	ldr	r3, [r3, #12]
   84600:	4798      	blx	r3
   84602:	4603      	mov	r3, r0
   84604:	461a      	mov	r2, r3
   84606:	4b09      	ldr	r3, [pc, #36]	; (8462c <udc_req_std_iface_get_setting+0x90>)
   84608:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   8460a:	2101      	movs	r1, #1
   8460c:	4807      	ldr	r0, [pc, #28]	; (8462c <udc_req_std_iface_get_setting+0x90>)
   8460e:	4b08      	ldr	r3, [pc, #32]	; (84630 <udc_req_std_iface_get_setting+0x94>)
   84610:	4798      	blx	r3
	return true;
   84612:	2301      	movs	r3, #1
}
   84614:	4618      	mov	r0, r3
   84616:	3708      	adds	r7, #8
   84618:	46bd      	mov	sp, r7
   8461a:	bd80      	pop	{r7, pc}
   8461c:	20001828 	.word	0x20001828
   84620:	20001336 	.word	0x20001336
   84624:	20001338 	.word	0x20001338
   84628:	00083cb9 	.word	0x00083cb9
   8462c:	20001342 	.word	0x20001342
   84630:	00085101 	.word	0x00085101

00084634 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   84634:	b580      	push	{r7, lr}
   84636:	b082      	sub	sp, #8
   84638:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   8463a:	4b14      	ldr	r3, [pc, #80]	; (8468c <udc_req_std_iface_set_setting+0x58>)
   8463c:	88db      	ldrh	r3, [r3, #6]
   8463e:	2b00      	cmp	r3, #0
   84640:	d001      	beq.n	84646 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   84642:	2300      	movs	r3, #0
   84644:	e01e      	b.n	84684 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   84646:	4b12      	ldr	r3, [pc, #72]	; (84690 <udc_req_std_iface_set_setting+0x5c>)
   84648:	781b      	ldrb	r3, [r3, #0]
   8464a:	2b00      	cmp	r3, #0
   8464c:	d101      	bne.n	84652 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   8464e:	2300      	movs	r3, #0
   84650:	e018      	b.n	84684 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84652:	4b0e      	ldr	r3, [pc, #56]	; (8468c <udc_req_std_iface_set_setting+0x58>)
   84654:	889b      	ldrh	r3, [r3, #4]
   84656:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   84658:	4b0c      	ldr	r3, [pc, #48]	; (8468c <udc_req_std_iface_set_setting+0x58>)
   8465a:	885b      	ldrh	r3, [r3, #2]
   8465c:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   8465e:	79fb      	ldrb	r3, [r7, #7]
   84660:	4618      	mov	r0, r3
   84662:	4b0c      	ldr	r3, [pc, #48]	; (84694 <udc_req_std_iface_set_setting+0x60>)
   84664:	4798      	blx	r3
   84666:	4603      	mov	r3, r0
   84668:	f083 0301 	eor.w	r3, r3, #1
   8466c:	b2db      	uxtb	r3, r3
   8466e:	2b00      	cmp	r3, #0
   84670:	d001      	beq.n	84676 <udc_req_std_iface_set_setting+0x42>
		return false;
   84672:	2300      	movs	r3, #0
   84674:	e006      	b.n	84684 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   84676:	79ba      	ldrb	r2, [r7, #6]
   84678:	79fb      	ldrb	r3, [r7, #7]
   8467a:	4611      	mov	r1, r2
   8467c:	4618      	mov	r0, r3
   8467e:	4b06      	ldr	r3, [pc, #24]	; (84698 <udc_req_std_iface_set_setting+0x64>)
   84680:	4798      	blx	r3
   84682:	4603      	mov	r3, r0
}
   84684:	4618      	mov	r0, r3
   84686:	3708      	adds	r7, #8
   84688:	46bd      	mov	sp, r7
   8468a:	bd80      	pop	{r7, pc}
   8468c:	20001828 	.word	0x20001828
   84690:	20001336 	.word	0x20001336
   84694:	00083d55 	.word	0x00083d55
   84698:	00083df5 	.word	0x00083df5

0008469c <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   8469c:	b580      	push	{r7, lr}
   8469e:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   846a0:	4b55      	ldr	r3, [pc, #340]	; (847f8 <udc_reqstd+0x15c>)
   846a2:	781b      	ldrb	r3, [r3, #0]
   846a4:	b25b      	sxtb	r3, r3
   846a6:	2b00      	cmp	r3, #0
   846a8:	da44      	bge.n	84734 <udc_reqstd+0x98>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   846aa:	4b53      	ldr	r3, [pc, #332]	; (847f8 <udc_reqstd+0x15c>)
   846ac:	88db      	ldrh	r3, [r3, #6]
   846ae:	2b00      	cmp	r3, #0
   846b0:	d101      	bne.n	846b6 <udc_reqstd+0x1a>
			return false; // Error for USB host
   846b2:	2300      	movs	r3, #0
   846b4:	e09d      	b.n	847f2 <udc_reqstd+0x156>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   846b6:	4b50      	ldr	r3, [pc, #320]	; (847f8 <udc_reqstd+0x15c>)
   846b8:	781b      	ldrb	r3, [r3, #0]
   846ba:	f003 031f 	and.w	r3, r3, #31
   846be:	2b00      	cmp	r3, #0
   846c0:	d116      	bne.n	846f0 <udc_reqstd+0x54>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   846c2:	4b4d      	ldr	r3, [pc, #308]	; (847f8 <udc_reqstd+0x15c>)
   846c4:	785b      	ldrb	r3, [r3, #1]
   846c6:	2b08      	cmp	r3, #8
   846c8:	d00e      	beq.n	846e8 <udc_reqstd+0x4c>
   846ca:	2b08      	cmp	r3, #8
   846cc:	dc12      	bgt.n	846f4 <udc_reqstd+0x58>
   846ce:	2b00      	cmp	r3, #0
   846d0:	d002      	beq.n	846d8 <udc_reqstd+0x3c>
   846d2:	2b06      	cmp	r3, #6
   846d4:	d004      	beq.n	846e0 <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   846d6:	e00d      	b.n	846f4 <udc_reqstd+0x58>
				return udc_req_std_dev_get_status();
   846d8:	4b48      	ldr	r3, [pc, #288]	; (847fc <udc_reqstd+0x160>)
   846da:	4798      	blx	r3
   846dc:	4603      	mov	r3, r0
   846de:	e088      	b.n	847f2 <udc_reqstd+0x156>
				return udc_req_std_dev_get_descriptor();
   846e0:	4b47      	ldr	r3, [pc, #284]	; (84800 <udc_reqstd+0x164>)
   846e2:	4798      	blx	r3
   846e4:	4603      	mov	r3, r0
   846e6:	e084      	b.n	847f2 <udc_reqstd+0x156>
				return udc_req_std_dev_get_configuration();
   846e8:	4b46      	ldr	r3, [pc, #280]	; (84804 <udc_reqstd+0x168>)
   846ea:	4798      	blx	r3
   846ec:	4603      	mov	r3, r0
   846ee:	e080      	b.n	847f2 <udc_reqstd+0x156>
			}
		}
   846f0:	bf00      	nop
   846f2:	e000      	b.n	846f6 <udc_reqstd+0x5a>
				break;
   846f4:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   846f6:	4b40      	ldr	r3, [pc, #256]	; (847f8 <udc_reqstd+0x15c>)
   846f8:	781b      	ldrb	r3, [r3, #0]
   846fa:	f003 031f 	and.w	r3, r3, #31
   846fe:	2b01      	cmp	r3, #1
   84700:	d107      	bne.n	84712 <udc_reqstd+0x76>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   84702:	4b3d      	ldr	r3, [pc, #244]	; (847f8 <udc_reqstd+0x15c>)
   84704:	785b      	ldrb	r3, [r3, #1]
   84706:	2b0a      	cmp	r3, #10
   84708:	d105      	bne.n	84716 <udc_reqstd+0x7a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   8470a:	4b3f      	ldr	r3, [pc, #252]	; (84808 <udc_reqstd+0x16c>)
   8470c:	4798      	blx	r3
   8470e:	4603      	mov	r3, r0
   84710:	e06f      	b.n	847f2 <udc_reqstd+0x156>
			default:
				break;
			}
		}
   84712:	bf00      	nop
   84714:	e000      	b.n	84718 <udc_reqstd+0x7c>
				break;
   84716:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84718:	4b37      	ldr	r3, [pc, #220]	; (847f8 <udc_reqstd+0x15c>)
   8471a:	781b      	ldrb	r3, [r3, #0]
   8471c:	f003 031f 	and.w	r3, r3, #31
   84720:	2b02      	cmp	r3, #2
   84722:	d160      	bne.n	847e6 <udc_reqstd+0x14a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   84724:	4b34      	ldr	r3, [pc, #208]	; (847f8 <udc_reqstd+0x15c>)
   84726:	785b      	ldrb	r3, [r3, #1]
   84728:	2b00      	cmp	r3, #0
   8472a:	d15e      	bne.n	847ea <udc_reqstd+0x14e>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   8472c:	4b37      	ldr	r3, [pc, #220]	; (8480c <udc_reqstd+0x170>)
   8472e:	4798      	blx	r3
   84730:	4603      	mov	r3, r0
   84732:	e05e      	b.n	847f2 <udc_reqstd+0x156>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84734:	4b30      	ldr	r3, [pc, #192]	; (847f8 <udc_reqstd+0x15c>)
   84736:	781b      	ldrb	r3, [r3, #0]
   84738:	f003 031f 	and.w	r3, r3, #31
   8473c:	2b00      	cmp	r3, #0
   8473e:	d129      	bne.n	84794 <udc_reqstd+0xf8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   84740:	4b2d      	ldr	r3, [pc, #180]	; (847f8 <udc_reqstd+0x15c>)
   84742:	785b      	ldrb	r3, [r3, #1]
   84744:	3b01      	subs	r3, #1
   84746:	2b08      	cmp	r3, #8
   84748:	d826      	bhi.n	84798 <udc_reqstd+0xfc>
   8474a:	a201      	add	r2, pc, #4	; (adr r2, 84750 <udc_reqstd+0xb4>)
   8474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84750:	0008477d 	.word	0x0008477d
   84754:	00084799 	.word	0x00084799
   84758:	00084785 	.word	0x00084785
   8475c:	00084799 	.word	0x00084799
   84760:	00084775 	.word	0x00084775
   84764:	00084799 	.word	0x00084799
   84768:	00084799 	.word	0x00084799
   8476c:	00084799 	.word	0x00084799
   84770:	0008478d 	.word	0x0008478d
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   84774:	4b26      	ldr	r3, [pc, #152]	; (84810 <udc_reqstd+0x174>)
   84776:	4798      	blx	r3
   84778:	4603      	mov	r3, r0
   8477a:	e03a      	b.n	847f2 <udc_reqstd+0x156>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   8477c:	4b25      	ldr	r3, [pc, #148]	; (84814 <udc_reqstd+0x178>)
   8477e:	4798      	blx	r3
   84780:	4603      	mov	r3, r0
   84782:	e036      	b.n	847f2 <udc_reqstd+0x156>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   84784:	4b24      	ldr	r3, [pc, #144]	; (84818 <udc_reqstd+0x17c>)
   84786:	4798      	blx	r3
   84788:	4603      	mov	r3, r0
   8478a:	e032      	b.n	847f2 <udc_reqstd+0x156>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   8478c:	4b23      	ldr	r3, [pc, #140]	; (8481c <udc_reqstd+0x180>)
   8478e:	4798      	blx	r3
   84790:	4603      	mov	r3, r0
   84792:	e02e      	b.n	847f2 <udc_reqstd+0x156>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   84794:	bf00      	nop
   84796:	e000      	b.n	8479a <udc_reqstd+0xfe>
				break;
   84798:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8479a:	4b17      	ldr	r3, [pc, #92]	; (847f8 <udc_reqstd+0x15c>)
   8479c:	781b      	ldrb	r3, [r3, #0]
   8479e:	f003 031f 	and.w	r3, r3, #31
   847a2:	2b01      	cmp	r3, #1
   847a4:	d107      	bne.n	847b6 <udc_reqstd+0x11a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   847a6:	4b14      	ldr	r3, [pc, #80]	; (847f8 <udc_reqstd+0x15c>)
   847a8:	785b      	ldrb	r3, [r3, #1]
   847aa:	2b0b      	cmp	r3, #11
   847ac:	d105      	bne.n	847ba <udc_reqstd+0x11e>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   847ae:	4b1c      	ldr	r3, [pc, #112]	; (84820 <udc_reqstd+0x184>)
   847b0:	4798      	blx	r3
   847b2:	4603      	mov	r3, r0
   847b4:	e01d      	b.n	847f2 <udc_reqstd+0x156>
			default:
				break;
			}
		}
   847b6:	bf00      	nop
   847b8:	e000      	b.n	847bc <udc_reqstd+0x120>
				break;
   847ba:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   847bc:	4b0e      	ldr	r3, [pc, #56]	; (847f8 <udc_reqstd+0x15c>)
   847be:	781b      	ldrb	r3, [r3, #0]
   847c0:	f003 031f 	and.w	r3, r3, #31
   847c4:	2b02      	cmp	r3, #2
   847c6:	d112      	bne.n	847ee <udc_reqstd+0x152>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   847c8:	4b0b      	ldr	r3, [pc, #44]	; (847f8 <udc_reqstd+0x15c>)
   847ca:	785b      	ldrb	r3, [r3, #1]
   847cc:	2b01      	cmp	r3, #1
   847ce:	d002      	beq.n	847d6 <udc_reqstd+0x13a>
   847d0:	2b03      	cmp	r3, #3
   847d2:	d004      	beq.n	847de <udc_reqstd+0x142>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   847d4:	e00c      	b.n	847f0 <udc_reqstd+0x154>
				return udc_req_std_ep_clear_feature();
   847d6:	4b13      	ldr	r3, [pc, #76]	; (84824 <udc_reqstd+0x188>)
   847d8:	4798      	blx	r3
   847da:	4603      	mov	r3, r0
   847dc:	e009      	b.n	847f2 <udc_reqstd+0x156>
				return udc_req_std_ep_set_feature();
   847de:	4b12      	ldr	r3, [pc, #72]	; (84828 <udc_reqstd+0x18c>)
   847e0:	4798      	blx	r3
   847e2:	4603      	mov	r3, r0
   847e4:	e005      	b.n	847f2 <udc_reqstd+0x156>
		}
   847e6:	bf00      	nop
   847e8:	e002      	b.n	847f0 <udc_reqstd+0x154>
				break;
   847ea:	bf00      	nop
   847ec:	e000      	b.n	847f0 <udc_reqstd+0x154>
			}
		}
   847ee:	bf00      	nop
#endif
	}
	return false;
   847f0:	2300      	movs	r3, #0
}
   847f2:	4618      	mov	r0, r3
   847f4:	bd80      	pop	{r7, pc}
   847f6:	bf00      	nop
   847f8:	20001828 	.word	0x20001828
   847fc:	00083f51 	.word	0x00083f51
   84800:	00084251 	.word	0x00084251
   84804:	0008446d 	.word	0x0008446d
   84808:	0008459d 	.word	0x0008459d
   8480c:	00083f7d 	.word	0x00083f7d
   84810:	0008415d 	.word	0x0008415d
   84814:	00083fc1 	.word	0x00083fc1
   84818:	00084035 	.word	0x00084035
   8481c:	00084499 	.word	0x00084499
   84820:	00084635 	.word	0x00084635
   84824:	00083ffd 	.word	0x00083ffd
   84828:	000840f1 	.word	0x000840f1

0008482c <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   8482c:	b580      	push	{r7, lr}
   8482e:	b082      	sub	sp, #8
   84830:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   84832:	4b20      	ldr	r3, [pc, #128]	; (848b4 <udc_req_iface+0x88>)
   84834:	781b      	ldrb	r3, [r3, #0]
   84836:	2b00      	cmp	r3, #0
   84838:	d101      	bne.n	8483e <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   8483a:	2300      	movs	r3, #0
   8483c:	e036      	b.n	848ac <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8483e:	4b1e      	ldr	r3, [pc, #120]	; (848b8 <udc_req_iface+0x8c>)
   84840:	889b      	ldrh	r3, [r3, #4]
   84842:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84844:	4b1d      	ldr	r3, [pc, #116]	; (848bc <udc_req_iface+0x90>)
   84846:	681b      	ldr	r3, [r3, #0]
   84848:	681b      	ldr	r3, [r3, #0]
   8484a:	791b      	ldrb	r3, [r3, #4]
   8484c:	79fa      	ldrb	r2, [r7, #7]
   8484e:	429a      	cmp	r2, r3
   84850:	d301      	bcc.n	84856 <udc_req_iface+0x2a>
		return false;
   84852:	2300      	movs	r3, #0
   84854:	e02a      	b.n	848ac <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   84856:	79fb      	ldrb	r3, [r7, #7]
   84858:	2100      	movs	r1, #0
   8485a:	4618      	mov	r0, r3
   8485c:	4b18      	ldr	r3, [pc, #96]	; (848c0 <udc_req_iface+0x94>)
   8485e:	4798      	blx	r3
   84860:	4603      	mov	r3, r0
   84862:	f083 0301 	eor.w	r3, r3, #1
   84866:	b2db      	uxtb	r3, r3
   84868:	2b00      	cmp	r3, #0
   8486a:	d001      	beq.n	84870 <udc_req_iface+0x44>
		return false;
   8486c:	2300      	movs	r3, #0
   8486e:	e01d      	b.n	848ac <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84870:	4b12      	ldr	r3, [pc, #72]	; (848bc <udc_req_iface+0x90>)
   84872:	681b      	ldr	r3, [r3, #0]
   84874:	685a      	ldr	r2, [r3, #4]
   84876:	79fb      	ldrb	r3, [r7, #7]
   84878:	009b      	lsls	r3, r3, #2
   8487a:	4413      	add	r3, r2
   8487c:	681b      	ldr	r3, [r3, #0]
   8487e:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84880:	683b      	ldr	r3, [r7, #0]
   84882:	68db      	ldr	r3, [r3, #12]
   84884:	4798      	blx	r3
   84886:	4603      	mov	r3, r0
   84888:	461a      	mov	r2, r3
   8488a:	79fb      	ldrb	r3, [r7, #7]
   8488c:	4611      	mov	r1, r2
   8488e:	4618      	mov	r0, r3
   84890:	4b0b      	ldr	r3, [pc, #44]	; (848c0 <udc_req_iface+0x94>)
   84892:	4798      	blx	r3
   84894:	4603      	mov	r3, r0
   84896:	f083 0301 	eor.w	r3, r3, #1
   8489a:	b2db      	uxtb	r3, r3
   8489c:	2b00      	cmp	r3, #0
   8489e:	d001      	beq.n	848a4 <udc_req_iface+0x78>
		return false;
   848a0:	2300      	movs	r3, #0
   848a2:	e003      	b.n	848ac <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   848a4:	683b      	ldr	r3, [r7, #0]
   848a6:	689b      	ldr	r3, [r3, #8]
   848a8:	4798      	blx	r3
   848aa:	4603      	mov	r3, r0
}
   848ac:	4618      	mov	r0, r3
   848ae:	3708      	adds	r7, #8
   848b0:	46bd      	mov	sp, r7
   848b2:	bd80      	pop	{r7, pc}
   848b4:	20001336 	.word	0x20001336
   848b8:	20001828 	.word	0x20001828
   848bc:	20001338 	.word	0x20001338
   848c0:	00083cb9 	.word	0x00083cb9

000848c4 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   848c4:	b580      	push	{r7, lr}
   848c6:	b082      	sub	sp, #8
   848c8:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   848ca:	4b1e      	ldr	r3, [pc, #120]	; (84944 <udc_req_ep+0x80>)
   848cc:	781b      	ldrb	r3, [r3, #0]
   848ce:	2b00      	cmp	r3, #0
   848d0:	d101      	bne.n	848d6 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   848d2:	2300      	movs	r3, #0
   848d4:	e032      	b.n	8493c <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   848d6:	4b1c      	ldr	r3, [pc, #112]	; (84948 <udc_req_ep+0x84>)
   848d8:	889b      	ldrh	r3, [r3, #4]
   848da:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   848dc:	2300      	movs	r3, #0
   848de:	71fb      	strb	r3, [r7, #7]
   848e0:	e024      	b.n	8492c <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   848e2:	4b1a      	ldr	r3, [pc, #104]	; (8494c <udc_req_ep+0x88>)
   848e4:	681b      	ldr	r3, [r3, #0]
   848e6:	685a      	ldr	r2, [r3, #4]
   848e8:	79fb      	ldrb	r3, [r7, #7]
   848ea:	009b      	lsls	r3, r3, #2
   848ec:	4413      	add	r3, r2
   848ee:	681b      	ldr	r3, [r3, #0]
   848f0:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   848f2:	683b      	ldr	r3, [r7, #0]
   848f4:	68db      	ldr	r3, [r3, #12]
   848f6:	4798      	blx	r3
   848f8:	4603      	mov	r3, r0
   848fa:	461a      	mov	r2, r3
   848fc:	79fb      	ldrb	r3, [r7, #7]
   848fe:	4611      	mov	r1, r2
   84900:	4618      	mov	r0, r3
   84902:	4b13      	ldr	r3, [pc, #76]	; (84950 <udc_req_ep+0x8c>)
   84904:	4798      	blx	r3
   84906:	4603      	mov	r3, r0
   84908:	f083 0301 	eor.w	r3, r3, #1
   8490c:	b2db      	uxtb	r3, r3
   8490e:	2b00      	cmp	r3, #0
   84910:	d001      	beq.n	84916 <udc_req_ep+0x52>
			return false;
   84912:	2300      	movs	r3, #0
   84914:	e012      	b.n	8493c <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   84916:	683b      	ldr	r3, [r7, #0]
   84918:	689b      	ldr	r3, [r3, #8]
   8491a:	4798      	blx	r3
   8491c:	4603      	mov	r3, r0
   8491e:	2b00      	cmp	r3, #0
   84920:	d001      	beq.n	84926 <udc_req_ep+0x62>
			return true;
   84922:	2301      	movs	r3, #1
   84924:	e00a      	b.n	8493c <udc_req_ep+0x78>
			iface_num++) {
   84926:	79fb      	ldrb	r3, [r7, #7]
   84928:	3301      	adds	r3, #1
   8492a:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8492c:	4b07      	ldr	r3, [pc, #28]	; (8494c <udc_req_ep+0x88>)
   8492e:	681b      	ldr	r3, [r3, #0]
   84930:	681b      	ldr	r3, [r3, #0]
   84932:	791b      	ldrb	r3, [r3, #4]
   84934:	79fa      	ldrb	r2, [r7, #7]
   84936:	429a      	cmp	r2, r3
   84938:	d3d3      	bcc.n	848e2 <udc_req_ep+0x1e>
		}
	}
	return false;
   8493a:	2300      	movs	r3, #0
}
   8493c:	4618      	mov	r0, r3
   8493e:	3708      	adds	r7, #8
   84940:	46bd      	mov	sp, r7
   84942:	bd80      	pop	{r7, pc}
   84944:	20001336 	.word	0x20001336
   84948:	20001828 	.word	0x20001828
   8494c:	20001338 	.word	0x20001338
   84950:	00083cb9 	.word	0x00083cb9

00084954 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   84954:	b580      	push	{r7, lr}
   84956:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   84958:	4b25      	ldr	r3, [pc, #148]	; (849f0 <udc_process_setup+0x9c>)
   8495a:	2200      	movs	r2, #0
   8495c:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   8495e:	4b24      	ldr	r3, [pc, #144]	; (849f0 <udc_process_setup+0x9c>)
   84960:	2200      	movs	r2, #0
   84962:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84964:	4b22      	ldr	r3, [pc, #136]	; (849f0 <udc_process_setup+0x9c>)
   84966:	2200      	movs	r2, #0
   84968:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   8496a:	4b21      	ldr	r3, [pc, #132]	; (849f0 <udc_process_setup+0x9c>)
   8496c:	781b      	ldrb	r3, [r3, #0]
   8496e:	2bc0      	cmp	r3, #192	; 0xc0
   84970:	d109      	bne.n	84986 <udc_process_setup+0x32>
   84972:	4b1f      	ldr	r3, [pc, #124]	; (849f0 <udc_process_setup+0x9c>)
   84974:	785b      	ldrb	r3, [r3, #1]
   84976:	2b01      	cmp	r3, #1
   84978:	d105      	bne.n	84986 <udc_process_setup+0x32>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   8497a:	219e      	movs	r1, #158	; 0x9e
   8497c:	481d      	ldr	r0, [pc, #116]	; (849f4 <udc_process_setup+0xa0>)
   8497e:	4b1e      	ldr	r3, [pc, #120]	; (849f8 <udc_process_setup+0xa4>)
   84980:	4798      	blx	r3
		return true;
   84982:	2301      	movs	r3, #1
   84984:	e032      	b.n	849ec <udc_process_setup+0x98>
	}

	if (Udd_setup_is_in()) {
   84986:	4b1a      	ldr	r3, [pc, #104]	; (849f0 <udc_process_setup+0x9c>)
   84988:	781b      	ldrb	r3, [r3, #0]
   8498a:	b25b      	sxtb	r3, r3
   8498c:	2b00      	cmp	r3, #0
   8498e:	da05      	bge.n	8499c <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   84990:	4b17      	ldr	r3, [pc, #92]	; (849f0 <udc_process_setup+0x9c>)
   84992:	88db      	ldrh	r3, [r3, #6]
   84994:	2b00      	cmp	r3, #0
   84996:	d101      	bne.n	8499c <udc_process_setup+0x48>
			return false; // Error from USB host
   84998:	2300      	movs	r3, #0
   8499a:	e027      	b.n	849ec <udc_process_setup+0x98>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8499c:	4b14      	ldr	r3, [pc, #80]	; (849f0 <udc_process_setup+0x9c>)
   8499e:	781b      	ldrb	r3, [r3, #0]
   849a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
   849a4:	2b00      	cmp	r3, #0
   849a6:	d106      	bne.n	849b6 <udc_process_setup+0x62>
		if (udc_reqstd()) {
   849a8:	4b14      	ldr	r3, [pc, #80]	; (849fc <udc_process_setup+0xa8>)
   849aa:	4798      	blx	r3
   849ac:	4603      	mov	r3, r0
   849ae:	2b00      	cmp	r3, #0
   849b0:	d001      	beq.n	849b6 <udc_process_setup+0x62>
			return true;
   849b2:	2301      	movs	r3, #1
   849b4:	e01a      	b.n	849ec <udc_process_setup+0x98>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   849b6:	4b0e      	ldr	r3, [pc, #56]	; (849f0 <udc_process_setup+0x9c>)
   849b8:	781b      	ldrb	r3, [r3, #0]
   849ba:	f003 031f 	and.w	r3, r3, #31
   849be:	2b01      	cmp	r3, #1
   849c0:	d106      	bne.n	849d0 <udc_process_setup+0x7c>
		if (udc_req_iface()) {
   849c2:	4b0f      	ldr	r3, [pc, #60]	; (84a00 <udc_process_setup+0xac>)
   849c4:	4798      	blx	r3
   849c6:	4603      	mov	r3, r0
   849c8:	2b00      	cmp	r3, #0
   849ca:	d001      	beq.n	849d0 <udc_process_setup+0x7c>
			return true;
   849cc:	2301      	movs	r3, #1
   849ce:	e00d      	b.n	849ec <udc_process_setup+0x98>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   849d0:	4b07      	ldr	r3, [pc, #28]	; (849f0 <udc_process_setup+0x9c>)
   849d2:	781b      	ldrb	r3, [r3, #0]
   849d4:	f003 031f 	and.w	r3, r3, #31
   849d8:	2b02      	cmp	r3, #2
   849da:	d106      	bne.n	849ea <udc_process_setup+0x96>
		if (udc_req_ep()) {
   849dc:	4b09      	ldr	r3, [pc, #36]	; (84a04 <udc_process_setup+0xb0>)
   849de:	4798      	blx	r3
   849e0:	4603      	mov	r3, r0
   849e2:	2b00      	cmp	r3, #0
   849e4:	d001      	beq.n	849ea <udc_process_setup+0x96>
			return true;
   849e6:	2301      	movs	r3, #1
   849e8:	e000      	b.n	849ec <udc_process_setup+0x98>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   849ea:	2300      	movs	r3, #0
#endif
}
   849ec:	4618      	mov	r0, r3
   849ee:	bd80      	pop	{r7, pc}
   849f0:	20001828 	.word	0x20001828
   849f4:	20000300 	.word	0x20000300
   849f8:	00085101 	.word	0x00085101
   849fc:	0008469d 	.word	0x0008469d
   84a00:	0008482d 	.word	0x0008482d
   84a04:	000848c5 	.word	0x000848c5

00084a08 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   84a08:	b580      	push	{r7, lr}
   84a0a:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   84a0c:	4b0b      	ldr	r3, [pc, #44]	; (84a3c <udi_vendor_enable+0x34>)
   84a0e:	4798      	blx	r3
   84a10:	4603      	mov	r3, r0
   84a12:	78da      	ldrb	r2, [r3, #3]
   84a14:	4b0a      	ldr	r3, [pc, #40]	; (84a40 <udi_vendor_enable+0x38>)
   84a16:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   84a18:	4b09      	ldr	r3, [pc, #36]	; (84a40 <udi_vendor_enable+0x38>)
   84a1a:	781b      	ldrb	r3, [r3, #0]
   84a1c:	2b00      	cmp	r3, #0
   84a1e:	d109      	bne.n	84a34 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   84a20:	4b08      	ldr	r3, [pc, #32]	; (84a44 <udi_vendor_enable+0x3c>)
   84a22:	4798      	blx	r3
   84a24:	4603      	mov	r3, r0
   84a26:	f083 0301 	eor.w	r3, r3, #1
   84a2a:	b2db      	uxtb	r3, r3
   84a2c:	2b00      	cmp	r3, #0
   84a2e:	d001      	beq.n	84a34 <udi_vendor_enable+0x2c>
			return false;
   84a30:	2300      	movs	r3, #0
   84a32:	e000      	b.n	84a36 <udi_vendor_enable+0x2e>
		}
	}
	return true;
   84a34:	2301      	movs	r3, #1
}
   84a36:	4618      	mov	r0, r3
   84a38:	bd80      	pop	{r7, pc}
   84a3a:	bf00      	nop
   84a3c:	00083c25 	.word	0x00083c25
   84a40:	20001343 	.word	0x20001343
   84a44:	00080bd5 	.word	0x00080bd5

00084a48 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   84a48:	b580      	push	{r7, lr}
   84a4a:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   84a4c:	4b03      	ldr	r3, [pc, #12]	; (84a5c <udi_vendor_disable+0x14>)
   84a4e:	781b      	ldrb	r3, [r3, #0]
   84a50:	2b00      	cmp	r3, #0
   84a52:	d101      	bne.n	84a58 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   84a54:	4b02      	ldr	r3, [pc, #8]	; (84a60 <udi_vendor_disable+0x18>)
   84a56:	4798      	blx	r3
	}
}
   84a58:	bf00      	nop
   84a5a:	bd80      	pop	{r7, pc}
   84a5c:	20001343 	.word	0x20001343
   84a60:	00080c0d 	.word	0x00080c0d

00084a64 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   84a64:	b580      	push	{r7, lr}
   84a66:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   84a68:	4b10      	ldr	r3, [pc, #64]	; (84aac <udi_vendor_setup+0x48>)
   84a6a:	781b      	ldrb	r3, [r3, #0]
   84a6c:	b25b      	sxtb	r3, r3
   84a6e:	2b00      	cmp	r3, #0
   84a70:	da09      	bge.n	84a86 <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84a72:	4b0e      	ldr	r3, [pc, #56]	; (84aac <udi_vendor_setup+0x48>)
   84a74:	781b      	ldrb	r3, [r3, #0]
   84a76:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84a7a:	2b40      	cmp	r3, #64	; 0x40
   84a7c:	d103      	bne.n	84a86 <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   84a7e:	4b0c      	ldr	r3, [pc, #48]	; (84ab0 <udi_vendor_setup+0x4c>)
   84a80:	4798      	blx	r3
   84a82:	4603      	mov	r3, r0
   84a84:	e00f      	b.n	84aa6 <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   84a86:	4b09      	ldr	r3, [pc, #36]	; (84aac <udi_vendor_setup+0x48>)
   84a88:	781b      	ldrb	r3, [r3, #0]
   84a8a:	b25b      	sxtb	r3, r3
   84a8c:	2b00      	cmp	r3, #0
   84a8e:	db09      	blt.n	84aa4 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84a90:	4b06      	ldr	r3, [pc, #24]	; (84aac <udi_vendor_setup+0x48>)
   84a92:	781b      	ldrb	r3, [r3, #0]
   84a94:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84a98:	2b40      	cmp	r3, #64	; 0x40
   84a9a:	d103      	bne.n	84aa4 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   84a9c:	4b05      	ldr	r3, [pc, #20]	; (84ab4 <udi_vendor_setup+0x50>)
   84a9e:	4798      	blx	r3
   84aa0:	4603      	mov	r3, r0
   84aa2:	e000      	b.n	84aa6 <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   84aa4:	2300      	movs	r3, #0
}
   84aa6:	4618      	mov	r0, r3
   84aa8:	bd80      	pop	{r7, pc}
   84aaa:	bf00      	nop
   84aac:	20001828 	.word	0x20001828
   84ab0:	00081081 	.word	0x00081081
   84ab4:	00080f11 	.word	0x00080f11

00084ab8 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   84ab8:	b480      	push	{r7}
   84aba:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   84abc:	4b02      	ldr	r3, [pc, #8]	; (84ac8 <udi_vendor_getsetting+0x10>)
   84abe:	781b      	ldrb	r3, [r3, #0]
}
   84ac0:	4618      	mov	r0, r3
   84ac2:	46bd      	mov	sp, r7
   84ac4:	bc80      	pop	{r7}
   84ac6:	4770      	bx	lr
   84ac8:	20001343 	.word	0x20001343

00084acc <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84acc:	b590      	push	{r4, r7, lr}
   84ace:	b087      	sub	sp, #28
   84ad0:	af02      	add	r7, sp, #8
   84ad2:	60f8      	str	r0, [r7, #12]
   84ad4:	60b9      	str	r1, [r7, #8]
   84ad6:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   84ad8:	687b      	ldr	r3, [r7, #4]
   84ada:	9300      	str	r3, [sp, #0]
   84adc:	68bb      	ldr	r3, [r7, #8]
   84ade:	68fa      	ldr	r2, [r7, #12]
   84ae0:	2100      	movs	r1, #0
   84ae2:	2081      	movs	r0, #129	; 0x81
   84ae4:	4c03      	ldr	r4, [pc, #12]	; (84af4 <udi_vendor_bulk_in_run+0x28>)
   84ae6:	47a0      	blx	r4
   84ae8:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84aea:	4618      	mov	r0, r3
   84aec:	3714      	adds	r7, #20
   84aee:	46bd      	mov	sp, r7
   84af0:	bd90      	pop	{r4, r7, pc}
   84af2:	bf00      	nop
   84af4:	0008580d 	.word	0x0008580d

00084af8 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84af8:	b590      	push	{r4, r7, lr}
   84afa:	b087      	sub	sp, #28
   84afc:	af02      	add	r7, sp, #8
   84afe:	60f8      	str	r0, [r7, #12]
   84b00:	60b9      	str	r1, [r7, #8]
   84b02:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   84b04:	687b      	ldr	r3, [r7, #4]
   84b06:	9300      	str	r3, [sp, #0]
   84b08:	68bb      	ldr	r3, [r7, #8]
   84b0a:	68fa      	ldr	r2, [r7, #12]
   84b0c:	2100      	movs	r1, #0
   84b0e:	2002      	movs	r0, #2
   84b10:	4c03      	ldr	r4, [pc, #12]	; (84b20 <udi_vendor_bulk_out_run+0x28>)
   84b12:	47a0      	blx	r4
   84b14:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84b16:	4618      	mov	r0, r3
   84b18:	3714      	adds	r7, #20
   84b1a:	46bd      	mov	sp, r7
   84b1c:	bd90      	pop	{r4, r7, pc}
   84b1e:	bf00      	nop
   84b20:	0008580d 	.word	0x0008580d

00084b24 <NVIC_EnableIRQ>:
{
   84b24:	b480      	push	{r7}
   84b26:	b083      	sub	sp, #12
   84b28:	af00      	add	r7, sp, #0
   84b2a:	4603      	mov	r3, r0
   84b2c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84b2e:	79fb      	ldrb	r3, [r7, #7]
   84b30:	f003 031f 	and.w	r3, r3, #31
   84b34:	2201      	movs	r2, #1
   84b36:	fa02 f103 	lsl.w	r1, r2, r3
   84b3a:	4a05      	ldr	r2, [pc, #20]	; (84b50 <NVIC_EnableIRQ+0x2c>)
   84b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84b40:	095b      	lsrs	r3, r3, #5
   84b42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   84b46:	bf00      	nop
   84b48:	370c      	adds	r7, #12
   84b4a:	46bd      	mov	sp, r7
   84b4c:	bc80      	pop	{r7}
   84b4e:	4770      	bx	lr
   84b50:	e000e100 	.word	0xe000e100

00084b54 <NVIC_SetPriority>:
{
   84b54:	b480      	push	{r7}
   84b56:	b083      	sub	sp, #12
   84b58:	af00      	add	r7, sp, #0
   84b5a:	4603      	mov	r3, r0
   84b5c:	6039      	str	r1, [r7, #0]
   84b5e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   84b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84b64:	2b00      	cmp	r3, #0
   84b66:	da0b      	bge.n	84b80 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   84b68:	683b      	ldr	r3, [r7, #0]
   84b6a:	b2da      	uxtb	r2, r3
   84b6c:	490c      	ldr	r1, [pc, #48]	; (84ba0 <NVIC_SetPriority+0x4c>)
   84b6e:	79fb      	ldrb	r3, [r7, #7]
   84b70:	f003 030f 	and.w	r3, r3, #15
   84b74:	3b04      	subs	r3, #4
   84b76:	0112      	lsls	r2, r2, #4
   84b78:	b2d2      	uxtb	r2, r2
   84b7a:	440b      	add	r3, r1
   84b7c:	761a      	strb	r2, [r3, #24]
}
   84b7e:	e009      	b.n	84b94 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84b80:	683b      	ldr	r3, [r7, #0]
   84b82:	b2da      	uxtb	r2, r3
   84b84:	4907      	ldr	r1, [pc, #28]	; (84ba4 <NVIC_SetPriority+0x50>)
   84b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84b8a:	0112      	lsls	r2, r2, #4
   84b8c:	b2d2      	uxtb	r2, r2
   84b8e:	440b      	add	r3, r1
   84b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   84b94:	bf00      	nop
   84b96:	370c      	adds	r7, #12
   84b98:	46bd      	mov	sp, r7
   84b9a:	bc80      	pop	{r7}
   84b9c:	4770      	bx	lr
   84b9e:	bf00      	nop
   84ba0:	e000ed00 	.word	0xe000ed00
   84ba4:	e000e100 	.word	0xe000e100

00084ba8 <cpu_irq_save>:
{
   84ba8:	b480      	push	{r7}
   84baa:	b083      	sub	sp, #12
   84bac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84bae:	f3ef 8310 	mrs	r3, PRIMASK
   84bb2:	603b      	str	r3, [r7, #0]
  return(result);
   84bb4:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   84bb6:	2b00      	cmp	r3, #0
   84bb8:	bf0c      	ite	eq
   84bba:	2301      	moveq	r3, #1
   84bbc:	2300      	movne	r3, #0
   84bbe:	b2db      	uxtb	r3, r3
   84bc0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   84bc2:	b672      	cpsid	i
}
   84bc4:	bf00      	nop
  __ASM volatile ("dmb");
   84bc6:	f3bf 8f5f 	dmb	sy
}
   84bca:	bf00      	nop
	cpu_irq_disable();
   84bcc:	4b04      	ldr	r3, [pc, #16]	; (84be0 <cpu_irq_save+0x38>)
   84bce:	2200      	movs	r2, #0
   84bd0:	701a      	strb	r2, [r3, #0]
	return flags;
   84bd2:	687b      	ldr	r3, [r7, #4]
}
   84bd4:	4618      	mov	r0, r3
   84bd6:	370c      	adds	r7, #12
   84bd8:	46bd      	mov	sp, r7
   84bda:	bc80      	pop	{r7}
   84bdc:	4770      	bx	lr
   84bde:	bf00      	nop
   84be0:	20000284 	.word	0x20000284

00084be4 <cpu_irq_is_enabled_flags>:
{
   84be4:	b480      	push	{r7}
   84be6:	b083      	sub	sp, #12
   84be8:	af00      	add	r7, sp, #0
   84bea:	6078      	str	r0, [r7, #4]
	return (flags);
   84bec:	687b      	ldr	r3, [r7, #4]
   84bee:	2b00      	cmp	r3, #0
   84bf0:	bf14      	ite	ne
   84bf2:	2301      	movne	r3, #1
   84bf4:	2300      	moveq	r3, #0
   84bf6:	b2db      	uxtb	r3, r3
}
   84bf8:	4618      	mov	r0, r3
   84bfa:	370c      	adds	r7, #12
   84bfc:	46bd      	mov	sp, r7
   84bfe:	bc80      	pop	{r7}
   84c00:	4770      	bx	lr
   84c02:	0000      	movs	r0, r0

00084c04 <cpu_irq_restore>:
{
   84c04:	b580      	push	{r7, lr}
   84c06:	b082      	sub	sp, #8
   84c08:	af00      	add	r7, sp, #0
   84c0a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   84c0c:	6878      	ldr	r0, [r7, #4]
   84c0e:	4b08      	ldr	r3, [pc, #32]	; (84c30 <cpu_irq_restore+0x2c>)
   84c10:	4798      	blx	r3
   84c12:	4603      	mov	r3, r0
   84c14:	2b00      	cmp	r3, #0
   84c16:	d007      	beq.n	84c28 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   84c18:	4b06      	ldr	r3, [pc, #24]	; (84c34 <cpu_irq_restore+0x30>)
   84c1a:	2201      	movs	r2, #1
   84c1c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   84c1e:	f3bf 8f5f 	dmb	sy
}
   84c22:	bf00      	nop
  __ASM volatile ("cpsie i");
   84c24:	b662      	cpsie	i
}
   84c26:	bf00      	nop
}
   84c28:	bf00      	nop
   84c2a:	3708      	adds	r7, #8
   84c2c:	46bd      	mov	sp, r7
   84c2e:	bd80      	pop	{r7, pc}
   84c30:	00084be5 	.word	0x00084be5
   84c34:	20000284 	.word	0x20000284

00084c38 <sleepmgr_lock_mode>:
{
   84c38:	b580      	push	{r7, lr}
   84c3a:	b084      	sub	sp, #16
   84c3c:	af00      	add	r7, sp, #0
   84c3e:	4603      	mov	r3, r0
   84c40:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   84c42:	4b08      	ldr	r3, [pc, #32]	; (84c64 <sleepmgr_lock_mode+0x2c>)
   84c44:	4798      	blx	r3
   84c46:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   84c48:	79fb      	ldrb	r3, [r7, #7]
   84c4a:	4a07      	ldr	r2, [pc, #28]	; (84c68 <sleepmgr_lock_mode+0x30>)
   84c4c:	5cd2      	ldrb	r2, [r2, r3]
   84c4e:	3201      	adds	r2, #1
   84c50:	b2d1      	uxtb	r1, r2
   84c52:	4a05      	ldr	r2, [pc, #20]	; (84c68 <sleepmgr_lock_mode+0x30>)
   84c54:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   84c56:	68f8      	ldr	r0, [r7, #12]
   84c58:	4b04      	ldr	r3, [pc, #16]	; (84c6c <sleepmgr_lock_mode+0x34>)
   84c5a:	4798      	blx	r3
}
   84c5c:	bf00      	nop
   84c5e:	3710      	adds	r7, #16
   84c60:	46bd      	mov	sp, r7
   84c62:	bd80      	pop	{r7, pc}
   84c64:	00084ba9 	.word	0x00084ba9
   84c68:	20001820 	.word	0x20001820
   84c6c:	00084c05 	.word	0x00084c05

00084c70 <sleepmgr_unlock_mode>:
{
   84c70:	b580      	push	{r7, lr}
   84c72:	b084      	sub	sp, #16
   84c74:	af00      	add	r7, sp, #0
   84c76:	4603      	mov	r3, r0
   84c78:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   84c7a:	4b08      	ldr	r3, [pc, #32]	; (84c9c <sleepmgr_unlock_mode+0x2c>)
   84c7c:	4798      	blx	r3
   84c7e:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   84c80:	79fb      	ldrb	r3, [r7, #7]
   84c82:	4a07      	ldr	r2, [pc, #28]	; (84ca0 <sleepmgr_unlock_mode+0x30>)
   84c84:	5cd2      	ldrb	r2, [r2, r3]
   84c86:	3a01      	subs	r2, #1
   84c88:	b2d1      	uxtb	r1, r2
   84c8a:	4a05      	ldr	r2, [pc, #20]	; (84ca0 <sleepmgr_unlock_mode+0x30>)
   84c8c:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   84c8e:	68f8      	ldr	r0, [r7, #12]
   84c90:	4b04      	ldr	r3, [pc, #16]	; (84ca4 <sleepmgr_unlock_mode+0x34>)
   84c92:	4798      	blx	r3
}
   84c94:	bf00      	nop
   84c96:	3710      	adds	r7, #16
   84c98:	46bd      	mov	sp, r7
   84c9a:	bd80      	pop	{r7, pc}
   84c9c:	00084ba9 	.word	0x00084ba9
   84ca0:	20001820 	.word	0x20001820
   84ca4:	00084c05 	.word	0x00084c05

00084ca8 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   84ca8:	b580      	push	{r7, lr}
   84caa:	b082      	sub	sp, #8
   84cac:	af00      	add	r7, sp, #0
   84cae:	4603      	mov	r3, r0
   84cb0:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   84cb2:	79fb      	ldrb	r3, [r7, #7]
   84cb4:	f083 0301 	eor.w	r3, r3, #1
   84cb8:	b2db      	uxtb	r3, r3
   84cba:	2b00      	cmp	r3, #0
   84cbc:	d006      	beq.n	84ccc <udd_sleep_mode+0x24>
   84cbe:	4b0d      	ldr	r3, [pc, #52]	; (84cf4 <udd_sleep_mode+0x4c>)
   84cc0:	781b      	ldrb	r3, [r3, #0]
   84cc2:	2b00      	cmp	r3, #0
   84cc4:	d002      	beq.n	84ccc <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   84cc6:	2002      	movs	r0, #2
   84cc8:	4b0b      	ldr	r3, [pc, #44]	; (84cf8 <udd_sleep_mode+0x50>)
   84cca:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   84ccc:	79fb      	ldrb	r3, [r7, #7]
   84cce:	2b00      	cmp	r3, #0
   84cd0:	d009      	beq.n	84ce6 <udd_sleep_mode+0x3e>
   84cd2:	4b08      	ldr	r3, [pc, #32]	; (84cf4 <udd_sleep_mode+0x4c>)
   84cd4:	781b      	ldrb	r3, [r3, #0]
   84cd6:	f083 0301 	eor.w	r3, r3, #1
   84cda:	b2db      	uxtb	r3, r3
   84cdc:	2b00      	cmp	r3, #0
   84cde:	d002      	beq.n	84ce6 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   84ce0:	2002      	movs	r0, #2
   84ce2:	4b06      	ldr	r3, [pc, #24]	; (84cfc <udd_sleep_mode+0x54>)
   84ce4:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   84ce6:	4a03      	ldr	r2, [pc, #12]	; (84cf4 <udd_sleep_mode+0x4c>)
   84ce8:	79fb      	ldrb	r3, [r7, #7]
   84cea:	7013      	strb	r3, [r2, #0]
}
   84cec:	bf00      	nop
   84cee:	3708      	adds	r7, #8
   84cf0:	46bd      	mov	sp, r7
   84cf2:	bd80      	pop	{r7, pc}
   84cf4:	20001344 	.word	0x20001344
   84cf8:	00084c71 	.word	0x00084c71
   84cfc:	00084c39 	.word	0x00084c39

00084d00 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   84d00:	b580      	push	{r7, lr}
   84d02:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   84d04:	201d      	movs	r0, #29
   84d06:	4b5f      	ldr	r3, [pc, #380]	; (84e84 <UDPHS_Handler+0x184>)
   84d08:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   84d0a:	4b5f      	ldr	r3, [pc, #380]	; (84e88 <UDPHS_Handler+0x188>)
   84d0c:	4798      	blx	r3
   84d0e:	4603      	mov	r3, r0
   84d10:	f083 0301 	eor.w	r3, r3, #1
   84d14:	b2db      	uxtb	r3, r3
   84d16:	2b00      	cmp	r3, #0
   84d18:	d00e      	beq.n	84d38 <UDPHS_Handler+0x38>
   84d1a:	4b5c      	ldr	r3, [pc, #368]	; (84e8c <UDPHS_Handler+0x18c>)
   84d1c:	695b      	ldr	r3, [r3, #20]
   84d1e:	f003 0302 	and.w	r3, r3, #2
   84d22:	2b00      	cmp	r3, #0
   84d24:	d108      	bne.n	84d38 <UDPHS_Handler+0x38>
  __ASM volatile ("cpsid i");
   84d26:	b672      	cpsid	i
}
   84d28:	bf00      	nop
  __ASM volatile ("dmb");
   84d2a:	f3bf 8f5f 	dmb	sy
}
   84d2e:	bf00      	nop
		cpu_irq_disable();
   84d30:	4b57      	ldr	r3, [pc, #348]	; (84e90 <UDPHS_Handler+0x190>)
   84d32:	2200      	movs	r2, #0
   84d34:	701a      	strb	r2, [r3, #0]
		return;
   84d36:	e0a4      	b.n	84e82 <UDPHS_Handler+0x182>
	}

	if (Is_udd_sof()) {
   84d38:	4b54      	ldr	r3, [pc, #336]	; (84e8c <UDPHS_Handler+0x18c>)
   84d3a:	695b      	ldr	r3, [r3, #20]
   84d3c:	f003 0308 	and.w	r3, r3, #8
   84d40:	2b00      	cmp	r3, #0
   84d42:	d00d      	beq.n	84d60 <UDPHS_Handler+0x60>
		udd_ack_sof();
   84d44:	4b51      	ldr	r3, [pc, #324]	; (84e8c <UDPHS_Handler+0x18c>)
   84d46:	2208      	movs	r2, #8
   84d48:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   84d4a:	4b50      	ldr	r3, [pc, #320]	; (84e8c <UDPHS_Handler+0x18c>)
   84d4c:	695b      	ldr	r3, [r3, #20]
   84d4e:	f003 0301 	and.w	r3, r3, #1
   84d52:	2b00      	cmp	r3, #0
   84d54:	d101      	bne.n	84d5a <UDPHS_Handler+0x5a>
			udc_sof_notify();
   84d56:	4b4f      	ldr	r3, [pc, #316]	; (84e94 <UDPHS_Handler+0x194>)
   84d58:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   84d5a:	4b4f      	ldr	r3, [pc, #316]	; (84e98 <UDPHS_Handler+0x198>)
   84d5c:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   84d5e:	e08f      	b.n	84e80 <UDPHS_Handler+0x180>
	}

	if (Is_udd_msof()) {
   84d60:	4b4a      	ldr	r3, [pc, #296]	; (84e8c <UDPHS_Handler+0x18c>)
   84d62:	695b      	ldr	r3, [r3, #20]
   84d64:	f003 0304 	and.w	r3, r3, #4
   84d68:	2b00      	cmp	r3, #0
   84d6a:	d005      	beq.n	84d78 <UDPHS_Handler+0x78>
		udd_ack_msof();
   84d6c:	4b47      	ldr	r3, [pc, #284]	; (84e8c <UDPHS_Handler+0x18c>)
   84d6e:	2204      	movs	r2, #4
   84d70:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   84d72:	4b48      	ldr	r3, [pc, #288]	; (84e94 <UDPHS_Handler+0x194>)
   84d74:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   84d76:	e083      	b.n	84e80 <UDPHS_Handler+0x180>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   84d78:	4b48      	ldr	r3, [pc, #288]	; (84e9c <UDPHS_Handler+0x19c>)
   84d7a:	4798      	blx	r3
   84d7c:	4603      	mov	r3, r0
   84d7e:	2b00      	cmp	r3, #0
   84d80:	d179      	bne.n	84e76 <UDPHS_Handler+0x176>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   84d82:	4b47      	ldr	r3, [pc, #284]	; (84ea0 <UDPHS_Handler+0x1a0>)
   84d84:	4798      	blx	r3
   84d86:	4603      	mov	r3, r0
   84d88:	2b00      	cmp	r3, #0
   84d8a:	d176      	bne.n	84e7a <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   84d8c:	4b3f      	ldr	r3, [pc, #252]	; (84e8c <UDPHS_Handler+0x18c>)
   84d8e:	695b      	ldr	r3, [r3, #20]
   84d90:	f003 0310 	and.w	r3, r3, #16
   84d94:	2b00      	cmp	r3, #0
   84d96:	d01d      	beq.n	84dd4 <UDPHS_Handler+0xd4>
		dbg_print("EoR ");
		udd_ack_reset();
   84d98:	4b3c      	ldr	r3, [pc, #240]	; (84e8c <UDPHS_Handler+0x18c>)
   84d9a:	2210      	movs	r2, #16
   84d9c:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   84d9e:	4b41      	ldr	r3, [pc, #260]	; (84ea4 <UDPHS_Handler+0x1a4>)
   84da0:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   84da2:	4b41      	ldr	r3, [pc, #260]	; (84ea8 <UDPHS_Handler+0x1a8>)
   84da4:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   84da6:	4b41      	ldr	r3, [pc, #260]	; (84eac <UDPHS_Handler+0x1ac>)
   84da8:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   84daa:	4b41      	ldr	r3, [pc, #260]	; (84eb0 <UDPHS_Handler+0x1b0>)
   84dac:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   84dae:	4b37      	ldr	r3, [pc, #220]	; (84e8c <UDPHS_Handler+0x18c>)
   84db0:	691b      	ldr	r3, [r3, #16]
   84db2:	4a36      	ldr	r2, [pc, #216]	; (84e8c <UDPHS_Handler+0x18c>)
   84db4:	f043 0308 	orr.w	r3, r3, #8
   84db8:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   84dba:	4b34      	ldr	r3, [pc, #208]	; (84e8c <UDPHS_Handler+0x18c>)
   84dbc:	691b      	ldr	r3, [r3, #16]
   84dbe:	4a33      	ldr	r2, [pc, #204]	; (84e8c <UDPHS_Handler+0x18c>)
   84dc0:	f043 0304 	orr.w	r3, r3, #4
   84dc4:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   84dc6:	4b31      	ldr	r3, [pc, #196]	; (84e8c <UDPHS_Handler+0x18c>)
   84dc8:	691b      	ldr	r3, [r3, #16]
   84dca:	4a30      	ldr	r2, [pc, #192]	; (84e8c <UDPHS_Handler+0x18c>)
   84dcc:	f043 0302 	orr.w	r3, r3, #2
   84dd0:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   84dd2:	e055      	b.n	84e80 <UDPHS_Handler+0x180>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84dd4:	4b2d      	ldr	r3, [pc, #180]	; (84e8c <UDPHS_Handler+0x18c>)
   84dd6:	691b      	ldr	r3, [r3, #16]
   84dd8:	f003 0302 	and.w	r3, r3, #2
   84ddc:	2b00      	cmp	r3, #0
   84dde:	d020      	beq.n	84e22 <UDPHS_Handler+0x122>
   84de0:	4b2a      	ldr	r3, [pc, #168]	; (84e8c <UDPHS_Handler+0x18c>)
   84de2:	695b      	ldr	r3, [r3, #20]
   84de4:	f003 0302 	and.w	r3, r3, #2
   84de8:	2b00      	cmp	r3, #0
   84dea:	d01a      	beq.n	84e22 <UDPHS_Handler+0x122>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   84dec:	4b27      	ldr	r3, [pc, #156]	; (84e8c <UDPHS_Handler+0x18c>)
   84dee:	2220      	movs	r2, #32
   84df0:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   84df2:	4b26      	ldr	r3, [pc, #152]	; (84e8c <UDPHS_Handler+0x18c>)
   84df4:	691b      	ldr	r3, [r3, #16]
   84df6:	4a25      	ldr	r2, [pc, #148]	; (84e8c <UDPHS_Handler+0x18c>)
   84df8:	f023 0302 	bic.w	r3, r3, #2
   84dfc:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   84dfe:	4b23      	ldr	r3, [pc, #140]	; (84e8c <UDPHS_Handler+0x18c>)
   84e00:	691b      	ldr	r3, [r3, #16]
   84e02:	4a22      	ldr	r2, [pc, #136]	; (84e8c <UDPHS_Handler+0x18c>)
   84e04:	f043 0320 	orr.w	r3, r3, #32
   84e08:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   84e0a:	4b20      	ldr	r3, [pc, #128]	; (84e8c <UDPHS_Handler+0x18c>)
   84e0c:	2202      	movs	r2, #2
   84e0e:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   84e10:	201d      	movs	r0, #29
   84e12:	4b28      	ldr	r3, [pc, #160]	; (84eb4 <UDPHS_Handler+0x1b4>)
   84e14:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   84e16:	4b28      	ldr	r3, [pc, #160]	; (84eb8 <UDPHS_Handler+0x1b8>)
   84e18:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   84e1a:	2000      	movs	r0, #0
   84e1c:	4b27      	ldr	r3, [pc, #156]	; (84ebc <UDPHS_Handler+0x1bc>)
   84e1e:	4798      	blx	r3
		goto udd_interrupt_end;
   84e20:	e02e      	b.n	84e80 <UDPHS_Handler+0x180>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   84e22:	4b1a      	ldr	r3, [pc, #104]	; (84e8c <UDPHS_Handler+0x18c>)
   84e24:	695b      	ldr	r3, [r3, #20]
   84e26:	f003 0320 	and.w	r3, r3, #32
   84e2a:	2b00      	cmp	r3, #0
   84e2c:	d027      	beq.n	84e7e <UDPHS_Handler+0x17e>
		udd_sleep_mode(true); // Enter in IDLE mode
   84e2e:	2001      	movs	r0, #1
   84e30:	4b22      	ldr	r3, [pc, #136]	; (84ebc <UDPHS_Handler+0x1bc>)
   84e32:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   84e34:	4b15      	ldr	r3, [pc, #84]	; (84e8c <UDPHS_Handler+0x18c>)
   84e36:	2202      	movs	r2, #2
   84e38:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   84e3a:	4b14      	ldr	r3, [pc, #80]	; (84e8c <UDPHS_Handler+0x18c>)
   84e3c:	2220      	movs	r2, #32
   84e3e:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   84e40:	4b12      	ldr	r3, [pc, #72]	; (84e8c <UDPHS_Handler+0x18c>)
   84e42:	691b      	ldr	r3, [r3, #16]
   84e44:	4a11      	ldr	r2, [pc, #68]	; (84e8c <UDPHS_Handler+0x18c>)
   84e46:	f023 0320 	bic.w	r3, r3, #32
   84e4a:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   84e4c:	4b0f      	ldr	r3, [pc, #60]	; (84e8c <UDPHS_Handler+0x18c>)
   84e4e:	691b      	ldr	r3, [r3, #16]
   84e50:	4a0e      	ldr	r2, [pc, #56]	; (84e8c <UDPHS_Handler+0x18c>)
   84e52:	f043 0302 	orr.w	r3, r3, #2
   84e56:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   84e58:	4b0c      	ldr	r3, [pc, #48]	; (84e8c <UDPHS_Handler+0x18c>)
   84e5a:	691b      	ldr	r3, [r3, #16]
   84e5c:	4a0b      	ldr	r2, [pc, #44]	; (84e8c <UDPHS_Handler+0x18c>)
   84e5e:	f043 0308 	orr.w	r3, r3, #8
   84e62:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   84e64:	4b09      	ldr	r3, [pc, #36]	; (84e8c <UDPHS_Handler+0x18c>)
   84e66:	691b      	ldr	r3, [r3, #16]
   84e68:	4a08      	ldr	r2, [pc, #32]	; (84e8c <UDPHS_Handler+0x18c>)
   84e6a:	f043 0304 	orr.w	r3, r3, #4
   84e6e:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   84e70:	4b13      	ldr	r3, [pc, #76]	; (84ec0 <UDPHS_Handler+0x1c0>)
   84e72:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   84e74:	e004      	b.n	84e80 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   84e76:	bf00      	nop
   84e78:	e002      	b.n	84e80 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   84e7a:	bf00      	nop
   84e7c:	e000      	b.n	84e80 <UDPHS_Handler+0x180>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   84e7e:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   84e80:	bf00      	nop
}
   84e82:	bd80      	pop	{r7, pc}
   84e84:	00082d15 	.word	0x00082d15
   84e88:	000832d9 	.word	0x000832d9
   84e8c:	400a4000 	.word	0x400a4000
   84e90:	20000284 	.word	0x20000284
   84e94:	00083ef1 	.word	0x00083ef1
   84e98:	00080ba1 	.word	0x00080ba1
   84e9c:	00086195 	.word	0x00086195
   84ea0:	000865b1 	.word	0x000865b1
   84ea4:	000862d5 	.word	0x000862d5
   84ea8:	00083e9d 	.word	0x00083e9d
   84eac:	00085af5 	.word	0x00085af5
   84eb0:	00085b75 	.word	0x00085b75
   84eb4:	00082d61 	.word	0x00082d61
   84eb8:	00080b75 	.word	0x00080b75
   84ebc:	00084ca9 	.word	0x00084ca9
   84ec0:	00080b91 	.word	0x00080b91

00084ec4 <udd_enable>:
#endif
}


void udd_enable(void)
{
   84ec4:	b580      	push	{r7, lr}
   84ec6:	b082      	sub	sp, #8
   84ec8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   84eca:	4b19      	ldr	r3, [pc, #100]	; (84f30 <udd_enable+0x6c>)
   84ecc:	4798      	blx	r3

	udd_enable_periph_ck();
   84ece:	201d      	movs	r0, #29
   84ed0:	4b18      	ldr	r3, [pc, #96]	; (84f34 <udd_enable+0x70>)
   84ed2:	4798      	blx	r3

	flags = cpu_irq_save();
   84ed4:	4b18      	ldr	r3, [pc, #96]	; (84f38 <udd_enable+0x74>)
   84ed6:	4798      	blx	r3
   84ed8:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   84eda:	4b18      	ldr	r3, [pc, #96]	; (84f3c <udd_enable+0x78>)
   84edc:	681b      	ldr	r3, [r3, #0]
   84ede:	4a17      	ldr	r2, [pc, #92]	; (84f3c <udd_enable+0x78>)
   84ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   84ee4:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   84ee6:	2105      	movs	r1, #5
   84ee8:	201d      	movs	r0, #29
   84eea:	4b15      	ldr	r3, [pc, #84]	; (84f40 <udd_enable+0x7c>)
   84eec:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   84eee:	201d      	movs	r0, #29
   84ef0:	4b14      	ldr	r3, [pc, #80]	; (84f44 <udd_enable+0x80>)
   84ef2:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   84ef4:	4b14      	ldr	r3, [pc, #80]	; (84f48 <udd_enable+0x84>)
   84ef6:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   84ef8:	4b10      	ldr	r3, [pc, #64]	; (84f3c <udd_enable+0x78>)
   84efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84efe:	4a0f      	ldr	r2, [pc, #60]	; (84f3c <udd_enable+0x78>)
   84f00:	f023 0303 	bic.w	r3, r3, #3
   84f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84f08:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84f0c:	4b0f      	ldr	r3, [pc, #60]	; (84f4c <udd_enable+0x88>)
   84f0e:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   84f10:	4b0f      	ldr	r3, [pc, #60]	; (84f50 <udd_enable+0x8c>)
   84f12:	2200      	movs	r2, #0
   84f14:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   84f16:	2003      	movs	r0, #3
   84f18:	4b0e      	ldr	r3, [pc, #56]	; (84f54 <udd_enable+0x90>)
   84f1a:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   84f1c:	4b0e      	ldr	r3, [pc, #56]	; (84f58 <udd_enable+0x94>)
   84f1e:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   84f20:	6878      	ldr	r0, [r7, #4]
   84f22:	4b0e      	ldr	r3, [pc, #56]	; (84f5c <udd_enable+0x98>)
   84f24:	4798      	blx	r3
}
   84f26:	bf00      	nop
   84f28:	3708      	adds	r7, #8
   84f2a:	46bd      	mov	sp, r7
   84f2c:	bd80      	pop	{r7, pc}
   84f2e:	bf00      	nop
   84f30:	000839c1 	.word	0x000839c1
   84f34:	00082d15 	.word	0x00082d15
   84f38:	00084ba9 	.word	0x00084ba9
   84f3c:	400a4000 	.word	0x400a4000
   84f40:	00084b55 	.word	0x00084b55
   84f44:	00084b25 	.word	0x00084b25
   84f48:	00086279 	.word	0x00086279
   84f4c:	00082dd1 	.word	0x00082dd1
   84f50:	20001344 	.word	0x20001344
   84f54:	00084c39 	.word	0x00084c39
   84f58:	00084f61 	.word	0x00084f61
   84f5c:	00084c05 	.word	0x00084c05

00084f60 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   84f60:	b580      	push	{r7, lr}
   84f62:	b082      	sub	sp, #8
   84f64:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   84f66:	4b26      	ldr	r3, [pc, #152]	; (85000 <udd_attach+0xa0>)
   84f68:	4798      	blx	r3
   84f6a:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   84f6c:	2001      	movs	r0, #1
   84f6e:	4b25      	ldr	r3, [pc, #148]	; (85004 <udd_attach+0xa4>)
   84f70:	4798      	blx	r3
	udd_enable_periph_ck();
   84f72:	201d      	movs	r0, #29
   84f74:	4b24      	ldr	r3, [pc, #144]	; (85008 <udd_attach+0xa8>)
   84f76:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   84f78:	4b24      	ldr	r3, [pc, #144]	; (8500c <udd_attach+0xac>)
   84f7a:	681b      	ldr	r3, [r3, #0]
   84f7c:	4a23      	ldr	r2, [pc, #140]	; (8500c <udd_attach+0xac>)
   84f7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84f82:	6013      	str	r3, [r2, #0]
   84f84:	4b21      	ldr	r3, [pc, #132]	; (8500c <udd_attach+0xac>)
   84f86:	681b      	ldr	r3, [r3, #0]
   84f88:	4a20      	ldr	r2, [pc, #128]	; (8500c <udd_attach+0xac>)
   84f8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   84f8e:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   84f90:	4b1e      	ldr	r3, [pc, #120]	; (8500c <udd_attach+0xac>)
   84f92:	691b      	ldr	r3, [r3, #16]
   84f94:	4a1d      	ldr	r2, [pc, #116]	; (8500c <udd_attach+0xac>)
   84f96:	f043 0310 	orr.w	r3, r3, #16
   84f9a:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   84f9c:	4b1b      	ldr	r3, [pc, #108]	; (8500c <udd_attach+0xac>)
   84f9e:	691b      	ldr	r3, [r3, #16]
   84fa0:	4a1a      	ldr	r2, [pc, #104]	; (8500c <udd_attach+0xac>)
   84fa2:	f043 0302 	orr.w	r3, r3, #2
   84fa6:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   84fa8:	4b18      	ldr	r3, [pc, #96]	; (8500c <udd_attach+0xac>)
   84faa:	691b      	ldr	r3, [r3, #16]
   84fac:	4a17      	ldr	r2, [pc, #92]	; (8500c <udd_attach+0xac>)
   84fae:	f043 0320 	orr.w	r3, r3, #32
   84fb2:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   84fb4:	4b15      	ldr	r3, [pc, #84]	; (8500c <udd_attach+0xac>)
   84fb6:	691b      	ldr	r3, [r3, #16]
   84fb8:	4a14      	ldr	r2, [pc, #80]	; (8500c <udd_attach+0xac>)
   84fba:	f043 0308 	orr.w	r3, r3, #8
   84fbe:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   84fc0:	4b12      	ldr	r3, [pc, #72]	; (8500c <udd_attach+0xac>)
   84fc2:	691b      	ldr	r3, [r3, #16]
   84fc4:	4a11      	ldr	r2, [pc, #68]	; (8500c <udd_attach+0xac>)
   84fc6:	f043 0304 	orr.w	r3, r3, #4
   84fca:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   84fcc:	4b0f      	ldr	r3, [pc, #60]	; (8500c <udd_attach+0xac>)
   84fce:	2208      	movs	r2, #8
   84fd0:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   84fd2:	4b0e      	ldr	r3, [pc, #56]	; (8500c <udd_attach+0xac>)
   84fd4:	2204      	movs	r2, #4
   84fd6:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84fd8:	4b0c      	ldr	r3, [pc, #48]	; (8500c <udd_attach+0xac>)
   84fda:	2210      	movs	r2, #16
   84fdc:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   84fde:	4b0b      	ldr	r3, [pc, #44]	; (8500c <udd_attach+0xac>)
   84fe0:	2202      	movs	r2, #2
   84fe2:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   84fe4:	4b09      	ldr	r3, [pc, #36]	; (8500c <udd_attach+0xac>)
   84fe6:	2220      	movs	r2, #32
   84fe8:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   84fea:	201d      	movs	r0, #29
   84fec:	4b08      	ldr	r3, [pc, #32]	; (85010 <udd_attach+0xb0>)
   84fee:	4798      	blx	r3
	cpu_irq_restore(flags);
   84ff0:	6878      	ldr	r0, [r7, #4]
   84ff2:	4b08      	ldr	r3, [pc, #32]	; (85014 <udd_attach+0xb4>)
   84ff4:	4798      	blx	r3
}
   84ff6:	bf00      	nop
   84ff8:	3708      	adds	r7, #8
   84ffa:	46bd      	mov	sp, r7
   84ffc:	bd80      	pop	{r7, pc}
   84ffe:	bf00      	nop
   85000:	00084ba9 	.word	0x00084ba9
   85004:	00084ca9 	.word	0x00084ca9
   85008:	00082d15 	.word	0x00082d15
   8500c:	400a4000 	.word	0x400a4000
   85010:	00082d61 	.word	0x00082d61
   85014:	00084c05 	.word	0x00084c05

00085018 <udd_detach>:


void udd_detach(void)
{
   85018:	b580      	push	{r7, lr}
   8501a:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   8501c:	201d      	movs	r0, #29
   8501e:	4b0b      	ldr	r3, [pc, #44]	; (8504c <udd_detach+0x34>)
   85020:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   85022:	4b0b      	ldr	r3, [pc, #44]	; (85050 <udd_detach+0x38>)
   85024:	681b      	ldr	r3, [r3, #0]
   85026:	4a0a      	ldr	r2, [pc, #40]	; (85050 <udd_detach+0x38>)
   85028:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8502c:	6013      	str	r3, [r2, #0]
   8502e:	4b08      	ldr	r3, [pc, #32]	; (85050 <udd_detach+0x38>)
   85030:	681b      	ldr	r3, [r3, #0]
   85032:	4a07      	ldr	r2, [pc, #28]	; (85050 <udd_detach+0x38>)
   85034:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   85038:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   8503a:	201d      	movs	r0, #29
   8503c:	4b05      	ldr	r3, [pc, #20]	; (85054 <udd_detach+0x3c>)
   8503e:	4798      	blx	r3
	udd_sleep_mode(false);
   85040:	2000      	movs	r0, #0
   85042:	4b05      	ldr	r3, [pc, #20]	; (85058 <udd_detach+0x40>)
   85044:	4798      	blx	r3
}
   85046:	bf00      	nop
   85048:	bd80      	pop	{r7, pc}
   8504a:	bf00      	nop
   8504c:	00082d15 	.word	0x00082d15
   85050:	400a4000 	.word	0x400a4000
   85054:	00082d61 	.word	0x00082d61
   85058:	00084ca9 	.word	0x00084ca9

0008505c <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   8505c:	b480      	push	{r7}
   8505e:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   85060:	4b06      	ldr	r3, [pc, #24]	; (8507c <udd_is_high_speed+0x20>)
   85062:	695b      	ldr	r3, [r3, #20]
   85064:	f003 0301 	and.w	r3, r3, #1
   85068:	2b00      	cmp	r3, #0
   8506a:	bf14      	ite	ne
   8506c:	2301      	movne	r3, #1
   8506e:	2300      	moveq	r3, #0
   85070:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   85072:	4618      	mov	r0, r3
   85074:	46bd      	mov	sp, r7
   85076:	bc80      	pop	{r7}
   85078:	4770      	bx	lr
   8507a:	bf00      	nop
   8507c:	400a4000 	.word	0x400a4000

00085080 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   85080:	b480      	push	{r7}
   85082:	b083      	sub	sp, #12
   85084:	af00      	add	r7, sp, #0
   85086:	4603      	mov	r3, r0
   85088:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   8508a:	4b0d      	ldr	r3, [pc, #52]	; (850c0 <udd_set_address+0x40>)
   8508c:	681b      	ldr	r3, [r3, #0]
   8508e:	4a0c      	ldr	r2, [pc, #48]	; (850c0 <udd_set_address+0x40>)
   85090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85094:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   85096:	4b0a      	ldr	r3, [pc, #40]	; (850c0 <udd_set_address+0x40>)
   85098:	681b      	ldr	r3, [r3, #0]
   8509a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   8509e:	79fb      	ldrb	r3, [r7, #7]
   850a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   850a4:	4906      	ldr	r1, [pc, #24]	; (850c0 <udd_set_address+0x40>)
   850a6:	4313      	orrs	r3, r2
   850a8:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   850aa:	4b05      	ldr	r3, [pc, #20]	; (850c0 <udd_set_address+0x40>)
   850ac:	681b      	ldr	r3, [r3, #0]
   850ae:	4a04      	ldr	r2, [pc, #16]	; (850c0 <udd_set_address+0x40>)
   850b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   850b4:	6013      	str	r3, [r2, #0]
}
   850b6:	bf00      	nop
   850b8:	370c      	adds	r7, #12
   850ba:	46bd      	mov	sp, r7
   850bc:	bc80      	pop	{r7}
   850be:	4770      	bx	lr
   850c0:	400a4000 	.word	0x400a4000

000850c4 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   850c4:	b480      	push	{r7}
   850c6:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   850c8:	4b04      	ldr	r3, [pc, #16]	; (850dc <udd_getaddress+0x18>)
   850ca:	681b      	ldr	r3, [r3, #0]
   850cc:	b2db      	uxtb	r3, r3
   850ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   850d2:	b2db      	uxtb	r3, r3
}
   850d4:	4618      	mov	r0, r3
   850d6:	46bd      	mov	sp, r7
   850d8:	bc80      	pop	{r7}
   850da:	4770      	bx	lr
   850dc:	400a4000 	.word	0x400a4000

000850e0 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
   850e0:	b480      	push	{r7}
   850e2:	af00      	add	r7, sp, #0
	return udd_frame_number();
   850e4:	4b05      	ldr	r3, [pc, #20]	; (850fc <udd_get_frame_number+0x1c>)
   850e6:	685b      	ldr	r3, [r3, #4]
   850e8:	08db      	lsrs	r3, r3, #3
   850ea:	b29b      	uxth	r3, r3
   850ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
   850f0:	b29b      	uxth	r3, r3
}
   850f2:	4618      	mov	r0, r3
   850f4:	46bd      	mov	sp, r7
   850f6:	bc80      	pop	{r7}
   850f8:	4770      	bx	lr
   850fa:	bf00      	nop
   850fc:	400a4000 	.word	0x400a4000

00085100 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   85100:	b480      	push	{r7}
   85102:	b083      	sub	sp, #12
   85104:	af00      	add	r7, sp, #0
   85106:	6078      	str	r0, [r7, #4]
   85108:	460b      	mov	r3, r1
   8510a:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   8510c:	4a05      	ldr	r2, [pc, #20]	; (85124 <udd_set_setup_payload+0x24>)
   8510e:	687b      	ldr	r3, [r7, #4]
   85110:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   85112:	4a04      	ldr	r2, [pc, #16]	; (85124 <udd_set_setup_payload+0x24>)
   85114:	887b      	ldrh	r3, [r7, #2]
   85116:	8193      	strh	r3, [r2, #12]
}
   85118:	bf00      	nop
   8511a:	370c      	adds	r7, #12
   8511c:	46bd      	mov	sp, r7
   8511e:	bc80      	pop	{r7}
   85120:	4770      	bx	lr
   85122:	bf00      	nop
   85124:	20001828 	.word	0x20001828

00085128 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   85128:	b590      	push	{r4, r7, lr}
   8512a:	b089      	sub	sp, #36	; 0x24
   8512c:	af02      	add	r7, sp, #8
   8512e:	4603      	mov	r3, r0
   85130:	71fb      	strb	r3, [r7, #7]
   85132:	460b      	mov	r3, r1
   85134:	71bb      	strb	r3, [r7, #6]
   85136:	4613      	mov	r3, r2
   85138:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   8513a:	2300      	movs	r3, #0
   8513c:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   8513e:	2300      	movs	r3, #0
   85140:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   85142:	79fb      	ldrb	r3, [r7, #7]
   85144:	f003 0380 	and.w	r3, r3, #128	; 0x80
   85148:	2b00      	cmp	r3, #0
   8514a:	bf14      	ite	ne
   8514c:	2301      	movne	r3, #1
   8514e:	2300      	moveq	r3, #0
   85150:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   85152:	79fb      	ldrb	r3, [r7, #7]
   85154:	f003 030f 	and.w	r3, r3, #15
   85158:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   8515a:	79fb      	ldrb	r3, [r7, #7]
   8515c:	2b02      	cmp	r3, #2
   8515e:	d901      	bls.n	85164 <udd_ep_alloc+0x3c>
		return false;
   85160:	2300      	movs	r3, #0
   85162:	e1b4      	b.n	854ce <udd_ep_alloc+0x3a6>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   85164:	4ab3      	ldr	r2, [pc, #716]	; (85434 <udd_ep_alloc+0x30c>)
   85166:	79fb      	ldrb	r3, [r7, #7]
   85168:	015b      	lsls	r3, r3, #5
   8516a:	4413      	add	r3, r2
   8516c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   85170:	681b      	ldr	r3, [r3, #0]
   85172:	f003 0301 	and.w	r3, r3, #1
   85176:	2b00      	cmp	r3, #0
   85178:	d001      	beq.n	8517e <udd_ep_alloc+0x56>
		return false;
   8517a:	2300      	movs	r3, #0
   8517c:	e1a7      	b.n	854ce <udd_ep_alloc+0x3a6>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   8517e:	79bb      	ldrb	r3, [r7, #6]
   85180:	f003 0303 	and.w	r3, r3, #3
   85184:	2b03      	cmp	r3, #3
   85186:	d01a      	beq.n	851be <udd_ep_alloc+0x96>
   85188:	2b03      	cmp	r3, #3
   8518a:	dc1e      	bgt.n	851ca <udd_ep_alloc+0xa2>
   8518c:	2b01      	cmp	r3, #1
   8518e:	d002      	beq.n	85196 <udd_ep_alloc+0x6e>
   85190:	2b02      	cmp	r3, #2
   85192:	d017      	beq.n	851c4 <udd_ep_alloc+0x9c>
   85194:	e019      	b.n	851ca <udd_ep_alloc+0xa2>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   85196:	79fb      	ldrb	r3, [r7, #7]
   85198:	2b00      	cmp	r3, #0
   8519a:	d007      	beq.n	851ac <udd_ep_alloc+0x84>
   8519c:	79fb      	ldrb	r3, [r7, #7]
   8519e:	2b03      	cmp	r3, #3
   851a0:	d004      	beq.n	851ac <udd_ep_alloc+0x84>
   851a2:	79fb      	ldrb	r3, [r7, #7]
   851a4:	2b04      	cmp	r3, #4
   851a6:	d001      	beq.n	851ac <udd_ep_alloc+0x84>
   851a8:	2301      	movs	r3, #1
   851aa:	e000      	b.n	851ae <udd_ep_alloc+0x86>
   851ac:	2300      	movs	r3, #0
   851ae:	747b      	strb	r3, [r7, #17]
   851b0:	7c7b      	ldrb	r3, [r7, #17]
   851b2:	f003 0301 	and.w	r3, r3, #1
   851b6:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   851b8:	2301      	movs	r3, #1
   851ba:	757b      	strb	r3, [r7, #21]
		break;
   851bc:	e007      	b.n	851ce <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   851be:	2301      	movs	r3, #1
   851c0:	757b      	strb	r3, [r7, #21]
		break;
   851c2:	e004      	b.n	851ce <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   851c4:	2302      	movs	r3, #2
   851c6:	757b      	strb	r3, [r7, #21]
		break;
   851c8:	e001      	b.n	851ce <udd_ep_alloc+0xa6>
	default:
		Assert(false);
		return false;
   851ca:	2300      	movs	r3, #0
   851cc:	e17f      	b.n	854ce <udd_ep_alloc+0x3a6>
	}
	switch (nb_bank) {
   851ce:	7d7b      	ldrb	r3, [r7, #21]
   851d0:	2b03      	cmp	r3, #3
   851d2:	d00c      	beq.n	851ee <udd_ep_alloc+0xc6>
   851d4:	2b03      	cmp	r3, #3
   851d6:	dc0d      	bgt.n	851f4 <udd_ep_alloc+0xcc>
   851d8:	2b01      	cmp	r3, #1
   851da:	d002      	beq.n	851e2 <udd_ep_alloc+0xba>
   851dc:	2b02      	cmp	r3, #2
   851de:	d003      	beq.n	851e8 <udd_ep_alloc+0xc0>
   851e0:	e008      	b.n	851f4 <udd_ep_alloc+0xcc>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   851e2:	2301      	movs	r3, #1
   851e4:	753b      	strb	r3, [r7, #20]
		break;
   851e6:	e007      	b.n	851f8 <udd_ep_alloc+0xd0>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   851e8:	2302      	movs	r3, #2
   851ea:	753b      	strb	r3, [r7, #20]
		break;
   851ec:	e004      	b.n	851f8 <udd_ep_alloc+0xd0>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   851ee:	2303      	movs	r3, #3
   851f0:	753b      	strb	r3, [r7, #20]
		break;
   851f2:	e001      	b.n	851f8 <udd_ep_alloc+0xd0>
	default:
		Assert(false);
		return false;
   851f4:	2300      	movs	r3, #0
   851f6:	e16a      	b.n	854ce <udd_ep_alloc+0x3a6>
	}
	if (b_iso_hbw) {
   851f8:	7c7b      	ldrb	r3, [r7, #17]
   851fa:	2b00      	cmp	r3, #0
   851fc:	d017      	beq.n	8522e <udd_ep_alloc+0x106>
		switch(MaxEndpointSize & (0x3u << 11)) {
   851fe:	88bb      	ldrh	r3, [r7, #4]
   85200:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   85204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   85208:	d003      	beq.n	85212 <udd_ep_alloc+0xea>
   8520a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   8520e:	d003      	beq.n	85218 <udd_ep_alloc+0xf0>
   85210:	e005      	b.n	8521e <udd_ep_alloc+0xf6>
		case (0x1u << 11):
			nb_tran = 2;
   85212:	2302      	movs	r3, #2
   85214:	74fb      	strb	r3, [r7, #19]
			break;
   85216:	e005      	b.n	85224 <udd_ep_alloc+0xfc>
		case (0x2u << 11):
			nb_tran = 3;
   85218:	2303      	movs	r3, #3
   8521a:	74fb      	strb	r3, [r7, #19]
			break;
   8521c:	e002      	b.n	85224 <udd_ep_alloc+0xfc>
		default:
			nb_tran = 1;
   8521e:	2301      	movs	r3, #1
   85220:	74fb      	strb	r3, [r7, #19]
			break;
   85222:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   85224:	88bb      	ldrh	r3, [r7, #4]
   85226:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   8522a:	80bb      	strh	r3, [r7, #4]
   8522c:	e006      	b.n	8523c <udd_ep_alloc+0x114>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   8522e:	88bb      	ldrh	r3, [r7, #4]
   85230:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   85234:	2b00      	cmp	r3, #0
   85236:	d001      	beq.n	8523c <udd_ep_alloc+0x114>
		// High BW not supported
		return false;
   85238:	2300      	movs	r3, #0
   8523a:	e148      	b.n	854ce <udd_ep_alloc+0x3a6>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8523c:	4a7d      	ldr	r2, [pc, #500]	; (85434 <udd_ep_alloc+0x30c>)
   8523e:	79fb      	ldrb	r3, [r7, #7]
   85240:	3308      	adds	r3, #8
   85242:	015b      	lsls	r3, r3, #5
   85244:	4413      	add	r3, r2
   85246:	681b      	ldr	r3, [r3, #0]
   85248:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   8524c:	f023 0303 	bic.w	r3, r3, #3
   85250:	79ba      	ldrb	r2, [r7, #6]
   85252:	0112      	lsls	r2, r2, #4
   85254:	f002 0230 	and.w	r2, r2, #48	; 0x30
   85258:	7c39      	ldrb	r1, [r7, #16]
   8525a:	2900      	cmp	r1, #0
   8525c:	d001      	beq.n	85262 <udd_ep_alloc+0x13a>
   8525e:	2108      	movs	r1, #8
   85260:	e000      	b.n	85264 <udd_ep_alloc+0x13c>
   85262:	2100      	movs	r1, #0
   85264:	4311      	orrs	r1, r2
   85266:	88ba      	ldrh	r2, [r7, #4]
   85268:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   8526c:	d207      	bcs.n	8527e <udd_ep_alloc+0x156>
   8526e:	88ba      	ldrh	r2, [r7, #4]
   85270:	2a08      	cmp	r2, #8
   85272:	bf38      	it	cc
   85274:	2208      	movcc	r2, #8
   85276:	b292      	uxth	r2, r2
   85278:	0052      	lsls	r2, r2, #1
   8527a:	3a01      	subs	r2, #1
   8527c:	e001      	b.n	85282 <udd_ep_alloc+0x15a>
   8527e:	f240 72ff 	movw	r2, #2047	; 0x7ff
   85282:	fab2 f282 	clz	r2, r2
   85286:	f1c2 021c 	rsb	r2, r2, #28
   8528a:	4311      	orrs	r1, r2
   8528c:	7d3a      	ldrb	r2, [r7, #20]
   8528e:	0192      	lsls	r2, r2, #6
   85290:	b2d2      	uxtb	r2, r2
   85292:	4311      	orrs	r1, r2
   85294:	7c7a      	ldrb	r2, [r7, #17]
   85296:	2a00      	cmp	r2, #0
   85298:	d004      	beq.n	852a4 <udd_ep_alloc+0x17c>
   8529a:	7cfa      	ldrb	r2, [r7, #19]
   8529c:	0212      	lsls	r2, r2, #8
   8529e:	f402 7240 	and.w	r2, r2, #768	; 0x300
   852a2:	e000      	b.n	852a6 <udd_ep_alloc+0x17e>
   852a4:	2200      	movs	r2, #0
   852a6:	430a      	orrs	r2, r1
   852a8:	f3c2 0209 	ubfx	r2, r2, #0, #10
   852ac:	4861      	ldr	r0, [pc, #388]	; (85434 <udd_ep_alloc+0x30c>)
   852ae:	79f9      	ldrb	r1, [r7, #7]
   852b0:	431a      	orrs	r2, r3
   852b2:	f101 0308 	add.w	r3, r1, #8
   852b6:	015b      	lsls	r3, r3, #5
   852b8:	4403      	add	r3, r0
   852ba:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   852bc:	4a5d      	ldr	r2, [pc, #372]	; (85434 <udd_ep_alloc+0x30c>)
   852be:	79fb      	ldrb	r3, [r7, #7]
   852c0:	3308      	adds	r3, #8
   852c2:	015b      	lsls	r3, r3, #5
   852c4:	4413      	add	r3, r2
   852c6:	681b      	ldr	r3, [r3, #0]
   852c8:	2b00      	cmp	r3, #0
   852ca:	db01      	blt.n	852d0 <udd_ep_alloc+0x1a8>
		return false;
   852cc:	2300      	movs	r3, #0
   852ce:	e0fe      	b.n	854ce <udd_ep_alloc+0x3a6>
	}
	udd_enable_endpoint(ep);
   852d0:	4a58      	ldr	r2, [pc, #352]	; (85434 <udd_ep_alloc+0x30c>)
   852d2:	79fb      	ldrb	r3, [r7, #7]
   852d4:	3308      	adds	r3, #8
   852d6:	015b      	lsls	r3, r3, #5
   852d8:	4413      	add	r3, r2
   852da:	3304      	adds	r3, #4
   852dc:	2201      	movs	r2, #1
   852de:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   852e0:	2300      	movs	r3, #0
   852e2:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   852e4:	2302      	movs	r3, #2
   852e6:	74bb      	strb	r3, [r7, #18]
   852e8:	e039      	b.n	8535e <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
   852ea:	4a52      	ldr	r2, [pc, #328]	; (85434 <udd_ep_alloc+0x30c>)
   852ec:	7cbb      	ldrb	r3, [r7, #18]
   852ee:	015b      	lsls	r3, r3, #5
   852f0:	4413      	add	r3, r2
   852f2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   852f6:	681b      	ldr	r3, [r3, #0]
   852f8:	f003 0301 	and.w	r3, r3, #1
   852fc:	2b00      	cmp	r3, #0
   852fe:	d02b      	beq.n	85358 <udd_ep_alloc+0x230>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   85300:	4a4c      	ldr	r2, [pc, #304]	; (85434 <udd_ep_alloc+0x30c>)
   85302:	7cbb      	ldrb	r3, [r7, #18]
   85304:	3308      	adds	r3, #8
   85306:	015b      	lsls	r3, r3, #5
   85308:	4413      	add	r3, r2
   8530a:	681b      	ldr	r3, [r3, #0]
   8530c:	099b      	lsrs	r3, r3, #6
   8530e:	b2db      	uxtb	r3, r3
   85310:	f003 0303 	and.w	r3, r3, #3
   85314:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   85316:	7d3a      	ldrb	r2, [r7, #20]
   85318:	7cbb      	ldrb	r3, [r7, #18]
   8531a:	005b      	lsls	r3, r3, #1
   8531c:	fa02 f303 	lsl.w	r3, r2, r3
   85320:	b21a      	sxth	r2, r3
   85322:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   85326:	4313      	orrs	r3, r2
   85328:	b21b      	sxth	r3, r3
   8532a:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   8532c:	4a41      	ldr	r2, [pc, #260]	; (85434 <udd_ep_alloc+0x30c>)
   8532e:	7cbb      	ldrb	r3, [r7, #18]
   85330:	015b      	lsls	r3, r3, #5
   85332:	4413      	add	r3, r2
   85334:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85338:	2201      	movs	r2, #1
   8533a:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   8533c:	4a3d      	ldr	r2, [pc, #244]	; (85434 <udd_ep_alloc+0x30c>)
   8533e:	7cbb      	ldrb	r3, [r7, #18]
   85340:	3308      	adds	r3, #8
   85342:	015b      	lsls	r3, r3, #5
   85344:	4413      	add	r3, r2
   85346:	681a      	ldr	r2, [r3, #0]
   85348:	493a      	ldr	r1, [pc, #232]	; (85434 <udd_ep_alloc+0x30c>)
   8534a:	7cbb      	ldrb	r3, [r7, #18]
   8534c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   85350:	3308      	adds	r3, #8
   85352:	015b      	lsls	r3, r3, #5
   85354:	440b      	add	r3, r1
   85356:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   85358:	7cbb      	ldrb	r3, [r7, #18]
   8535a:	3b01      	subs	r3, #1
   8535c:	74bb      	strb	r3, [r7, #18]
   8535e:	7cba      	ldrb	r2, [r7, #18]
   85360:	79fb      	ldrb	r3, [r7, #7]
   85362:	429a      	cmp	r2, r3
   85364:	d2c1      	bcs.n	852ea <udd_ep_alloc+0x1c2>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   85366:	79fb      	ldrb	r3, [r7, #7]
   85368:	74bb      	strb	r3, [r7, #18]
   8536a:	e0ab      	b.n	854c4 <udd_ep_alloc+0x39c>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8536c:	7cbb      	ldrb	r3, [r7, #18]
   8536e:	1e5a      	subs	r2, r3, #1
   85370:	4613      	mov	r3, r2
   85372:	005b      	lsls	r3, r3, #1
   85374:	4413      	add	r3, r2
   85376:	00db      	lsls	r3, r3, #3
   85378:	4a2f      	ldr	r2, [pc, #188]	; (85438 <udd_ep_alloc+0x310>)
   8537a:	4413      	add	r3, r2
   8537c:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   8537e:	68fb      	ldr	r3, [r7, #12]
   85380:	7d1b      	ldrb	r3, [r3, #20]
   85382:	f3c3 0300 	ubfx	r3, r3, #0, #1
   85386:	b2db      	uxtb	r3, r3
   85388:	2b00      	cmp	r3, #0
   8538a:	bf14      	ite	ne
   8538c:	2301      	movne	r3, #1
   8538e:	2300      	moveq	r3, #0
   85390:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   85392:	8afa      	ldrh	r2, [r7, #22]
   85394:	7cbb      	ldrb	r3, [r7, #18]
   85396:	005b      	lsls	r3, r3, #1
   85398:	fa42 f303 	asr.w	r3, r2, r3
   8539c:	b2db      	uxtb	r3, r3
   8539e:	f003 0303 	and.w	r3, r3, #3
   853a2:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   853a4:	7d3b      	ldrb	r3, [r7, #20]
   853a6:	2b00      	cmp	r3, #0
   853a8:	f000 8088 	beq.w	854bc <udd_ep_alloc+0x394>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   853ac:	68fa      	ldr	r2, [r7, #12]
   853ae:	7d13      	ldrb	r3, [r2, #20]
   853b0:	f36f 0300 	bfc	r3, #0, #1
   853b4:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   853b6:	4a1f      	ldr	r2, [pc, #124]	; (85434 <udd_ep_alloc+0x30c>)
   853b8:	7cbb      	ldrb	r3, [r7, #18]
   853ba:	3308      	adds	r3, #8
   853bc:	015b      	lsls	r3, r3, #5
   853be:	4413      	add	r3, r2
   853c0:	681b      	ldr	r3, [r3, #0]
   853c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   853c6:	7d3b      	ldrb	r3, [r7, #20]
   853c8:	019b      	lsls	r3, r3, #6
   853ca:	b2da      	uxtb	r2, r3
   853cc:	4819      	ldr	r0, [pc, #100]	; (85434 <udd_ep_alloc+0x30c>)
   853ce:	7cbb      	ldrb	r3, [r7, #18]
   853d0:	430a      	orrs	r2, r1
   853d2:	3308      	adds	r3, #8
   853d4:	015b      	lsls	r3, r3, #5
   853d6:	4403      	add	r3, r0
   853d8:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   853da:	4a16      	ldr	r2, [pc, #88]	; (85434 <udd_ep_alloc+0x30c>)
   853dc:	7cbb      	ldrb	r3, [r7, #18]
   853de:	3308      	adds	r3, #8
   853e0:	015b      	lsls	r3, r3, #5
   853e2:	4413      	add	r3, r2
   853e4:	3304      	adds	r3, #4
   853e6:	2201      	movs	r2, #1
   853e8:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   853ea:	4a12      	ldr	r2, [pc, #72]	; (85434 <udd_ep_alloc+0x30c>)
   853ec:	7cbb      	ldrb	r3, [r7, #18]
   853ee:	3308      	adds	r3, #8
   853f0:	015b      	lsls	r3, r3, #5
   853f2:	4413      	add	r3, r2
   853f4:	681b      	ldr	r3, [r3, #0]
   853f6:	2b00      	cmp	r3, #0
   853f8:	db20      	blt.n	8543c <udd_ep_alloc+0x314>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   853fa:	68fb      	ldr	r3, [r7, #12]
   853fc:	681b      	ldr	r3, [r3, #0]
   853fe:	2b00      	cmp	r3, #0
   85400:	d101      	bne.n	85406 <udd_ep_alloc+0x2de>
				return false;
   85402:	2300      	movs	r3, #0
   85404:	e063      	b.n	854ce <udd_ep_alloc+0x3a6>
			}
			if (Is_udd_endpoint_in(i)) {
   85406:	4a0b      	ldr	r2, [pc, #44]	; (85434 <udd_ep_alloc+0x30c>)
   85408:	7cbb      	ldrb	r3, [r7, #18]
   8540a:	3308      	adds	r3, #8
   8540c:	015b      	lsls	r3, r3, #5
   8540e:	4413      	add	r3, r2
   85410:	681b      	ldr	r3, [r3, #0]
   85412:	f003 0308 	and.w	r3, r3, #8
   85416:	2b00      	cmp	r3, #0
   85418:	d003      	beq.n	85422 <udd_ep_alloc+0x2fa>
				i |= USB_EP_DIR_IN;
   8541a:	7cbb      	ldrb	r3, [r7, #18]
   8541c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   85420:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   85422:	68fb      	ldr	r3, [r7, #12]
   85424:	681b      	ldr	r3, [r3, #0]
   85426:	68fa      	ldr	r2, [r7, #12]
   85428:	68d1      	ldr	r1, [r2, #12]
   8542a:	7cba      	ldrb	r2, [r7, #18]
   8542c:	2001      	movs	r0, #1
   8542e:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   85430:	2300      	movs	r3, #0
   85432:	e04c      	b.n	854ce <udd_ep_alloc+0x3a6>
   85434:	400a4000 	.word	0x400a4000
   85438:	2000134c 	.word	0x2000134c
		}
		udd_enable_endpoint_bank_autoswitch(i);
   8543c:	4a26      	ldr	r2, [pc, #152]	; (854d8 <udd_ep_alloc+0x3b0>)
   8543e:	7cbb      	ldrb	r3, [r7, #18]
   85440:	3308      	adds	r3, #8
   85442:	015b      	lsls	r3, r3, #5
   85444:	4413      	add	r3, r2
   85446:	3304      	adds	r3, #4
   85448:	681a      	ldr	r2, [r3, #0]
   8544a:	4923      	ldr	r1, [pc, #140]	; (854d8 <udd_ep_alloc+0x3b0>)
   8544c:	7cbb      	ldrb	r3, [r7, #18]
   8544e:	f042 0202 	orr.w	r2, r2, #2
   85452:	3308      	adds	r3, #8
   85454:	015b      	lsls	r3, r3, #5
   85456:	440b      	add	r3, r1
   85458:	3304      	adds	r3, #4
   8545a:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   8545c:	7afb      	ldrb	r3, [r7, #11]
   8545e:	2b00      	cmp	r3, #0
   85460:	d02d      	beq.n	854be <udd_ep_alloc+0x396>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   85462:	68fb      	ldr	r3, [r7, #12]
   85464:	68da      	ldr	r2, [r3, #12]
   85466:	68fb      	ldr	r3, [r7, #12]
   85468:	691b      	ldr	r3, [r3, #16]
   8546a:	1ad2      	subs	r2, r2, r3
   8546c:	68fb      	ldr	r3, [r7, #12]
   8546e:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   85470:	68fb      	ldr	r3, [r7, #12]
   85472:	7d1b      	ldrb	r3, [r3, #20]
   85474:	f3c3 0340 	ubfx	r3, r3, #1, #1
   85478:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   8547a:	2b00      	cmp	r3, #0
   8547c:	bf14      	ite	ne
   8547e:	2301      	movne	r3, #1
   85480:	2300      	moveq	r3, #0
   85482:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   85484:	68fb      	ldr	r3, [r7, #12]
   85486:	685a      	ldr	r2, [r3, #4]
   85488:	68fb      	ldr	r3, [r7, #12]
   8548a:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   8548c:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   8548e:	68fb      	ldr	r3, [r7, #12]
   85490:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   85492:	68fb      	ldr	r3, [r7, #12]
   85494:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   85496:	1ad2      	subs	r2, r2, r3
   85498:	68fb      	ldr	r3, [r7, #12]
   8549a:	681b      	ldr	r3, [r3, #0]
   8549c:	7cb8      	ldrb	r0, [r7, #18]
   8549e:	9300      	str	r3, [sp, #0]
   854a0:	4613      	mov	r3, r2
   854a2:	4622      	mov	r2, r4
   854a4:	4c0d      	ldr	r4, [pc, #52]	; (854dc <udd_ep_alloc+0x3b4>)
   854a6:	47a0      	blx	r4
   854a8:	4603      	mov	r3, r0
   854aa:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   854ac:	7afb      	ldrb	r3, [r7, #11]
   854ae:	f083 0301 	eor.w	r3, r3, #1
   854b2:	b2db      	uxtb	r3, r3
   854b4:	2b00      	cmp	r3, #0
   854b6:	d002      	beq.n	854be <udd_ep_alloc+0x396>
				dbg_print("ErrReRun%d ", i);
				return false;
   854b8:	2300      	movs	r3, #0
   854ba:	e008      	b.n	854ce <udd_ep_alloc+0x3a6>
			continue;
   854bc:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   854be:	7cbb      	ldrb	r3, [r7, #18]
   854c0:	3301      	adds	r3, #1
   854c2:	74bb      	strb	r3, [r7, #18]
   854c4:	7cbb      	ldrb	r3, [r7, #18]
   854c6:	2b02      	cmp	r3, #2
   854c8:	f67f af50 	bls.w	8536c <udd_ep_alloc+0x244>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   854cc:	2301      	movs	r3, #1
}
   854ce:	4618      	mov	r0, r3
   854d0:	371c      	adds	r7, #28
   854d2:	46bd      	mov	sp, r7
   854d4:	bd90      	pop	{r4, r7, pc}
   854d6:	bf00      	nop
   854d8:	400a4000 	.word	0x400a4000
   854dc:	0008580d 	.word	0x0008580d

000854e0 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   854e0:	b580      	push	{r7, lr}
   854e2:	b084      	sub	sp, #16
   854e4:	af00      	add	r7, sp, #0
   854e6:	4603      	mov	r3, r0
   854e8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   854ea:	79fb      	ldrb	r3, [r7, #7]
   854ec:	f003 030f 	and.w	r3, r3, #15
   854f0:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   854f2:	7bfb      	ldrb	r3, [r7, #15]
   854f4:	2b02      	cmp	r3, #2
   854f6:	d828      	bhi.n	8554a <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   854f8:	4a16      	ldr	r2, [pc, #88]	; (85554 <udd_ep_free+0x74>)
   854fa:	7bfb      	ldrb	r3, [r7, #15]
   854fc:	015b      	lsls	r3, r3, #5
   854fe:	4413      	add	r3, r2
   85500:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85504:	2201      	movs	r2, #1
   85506:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   85508:	4a12      	ldr	r2, [pc, #72]	; (85554 <udd_ep_free+0x74>)
   8550a:	7bfb      	ldrb	r3, [r7, #15]
   8550c:	3308      	adds	r3, #8
   8550e:	015b      	lsls	r3, r3, #5
   85510:	4413      	add	r3, r2
   85512:	681a      	ldr	r2, [r3, #0]
   85514:	490f      	ldr	r1, [pc, #60]	; (85554 <udd_ep_free+0x74>)
   85516:	7bfb      	ldrb	r3, [r7, #15]
   85518:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   8551c:	3308      	adds	r3, #8
   8551e:	015b      	lsls	r3, r3, #5
   85520:	440b      	add	r3, r1
   85522:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   85524:	79fb      	ldrb	r3, [r7, #7]
   85526:	4618      	mov	r0, r3
   85528:	4b0b      	ldr	r3, [pc, #44]	; (85558 <udd_ep_free+0x78>)
   8552a:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   8552c:	7bfb      	ldrb	r3, [r7, #15]
   8552e:	1e5a      	subs	r2, r3, #1
   85530:	490a      	ldr	r1, [pc, #40]	; (8555c <udd_ep_free+0x7c>)
   85532:	4613      	mov	r3, r2
   85534:	005b      	lsls	r3, r3, #1
   85536:	4413      	add	r3, r2
   85538:	00db      	lsls	r3, r3, #3
   8553a:	440b      	add	r3, r1
   8553c:	f103 0210 	add.w	r2, r3, #16
   85540:	7913      	ldrb	r3, [r2, #4]
   85542:	f36f 0382 	bfc	r3, #2, #1
   85546:	7113      	strb	r3, [r2, #4]
   85548:	e000      	b.n	8554c <udd_ep_free+0x6c>
		return;
   8554a:	bf00      	nop
}
   8554c:	3710      	adds	r7, #16
   8554e:	46bd      	mov	sp, r7
   85550:	bd80      	pop	{r7, pc}
   85552:	bf00      	nop
   85554:	400a4000 	.word	0x400a4000
   85558:	0008631d 	.word	0x0008631d
   8555c:	2000134c 	.word	0x2000134c

00085560 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   85560:	b480      	push	{r7}
   85562:	b085      	sub	sp, #20
   85564:	af00      	add	r7, sp, #0
   85566:	4603      	mov	r3, r0
   85568:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8556a:	79fb      	ldrb	r3, [r7, #7]
   8556c:	f003 030f 	and.w	r3, r3, #15
   85570:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   85572:	7bfb      	ldrb	r3, [r7, #15]
   85574:	1e5a      	subs	r2, r3, #1
   85576:	4613      	mov	r3, r2
   85578:	005b      	lsls	r3, r3, #1
   8557a:	4413      	add	r3, r2
   8557c:	00db      	lsls	r3, r3, #3
   8557e:	4a10      	ldr	r2, [pc, #64]	; (855c0 <udd_ep_is_halted+0x60>)
   85580:	4413      	add	r3, r2
   85582:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   85584:	4a0f      	ldr	r2, [pc, #60]	; (855c4 <udd_ep_is_halted+0x64>)
   85586:	7bfb      	ldrb	r3, [r7, #15]
   85588:	015b      	lsls	r3, r3, #5
   8558a:	4413      	add	r3, r2
   8558c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85590:	681b      	ldr	r3, [r3, #0]
   85592:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   85596:	2b00      	cmp	r3, #0
   85598:	d106      	bne.n	855a8 <udd_ep_is_halted+0x48>
   8559a:	68bb      	ldr	r3, [r7, #8]
   8559c:	7d1b      	ldrb	r3, [r3, #20]
   8559e:	f003 0304 	and.w	r3, r3, #4
   855a2:	b2db      	uxtb	r3, r3
   855a4:	2b00      	cmp	r3, #0
   855a6:	d001      	beq.n	855ac <udd_ep_is_halted+0x4c>
   855a8:	2301      	movs	r3, #1
   855aa:	e000      	b.n	855ae <udd_ep_is_halted+0x4e>
   855ac:	2300      	movs	r3, #0
   855ae:	f003 0301 	and.w	r3, r3, #1
   855b2:	b2db      	uxtb	r3, r3
}
   855b4:	4618      	mov	r0, r3
   855b6:	3714      	adds	r7, #20
   855b8:	46bd      	mov	sp, r7
   855ba:	bc80      	pop	{r7}
   855bc:	4770      	bx	lr
   855be:	bf00      	nop
   855c0:	2000134c 	.word	0x2000134c
   855c4:	400a4000 	.word	0x400a4000

000855c8 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   855c8:	b480      	push	{r7}
   855ca:	b085      	sub	sp, #20
   855cc:	af00      	add	r7, sp, #0
   855ce:	4603      	mov	r3, r0
   855d0:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   855d2:	79fb      	ldrb	r3, [r7, #7]
   855d4:	f003 030f 	and.w	r3, r3, #15
   855d8:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   855da:	7bfb      	ldrb	r3, [r7, #15]
   855dc:	2b02      	cmp	r3, #2
   855de:	d901      	bls.n	855e4 <udd_ep_set_halt+0x1c>
		return false;
   855e0:	2300      	movs	r3, #0
   855e2:	e071      	b.n	856c8 <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   855e4:	7bfb      	ldrb	r3, [r7, #15]
   855e6:	1e5a      	subs	r2, r3, #1
   855e8:	4613      	mov	r3, r2
   855ea:	005b      	lsls	r3, r3, #1
   855ec:	4413      	add	r3, r2
   855ee:	00db      	lsls	r3, r3, #3
   855f0:	4a38      	ldr	r2, [pc, #224]	; (856d4 <udd_ep_set_halt+0x10c>)
   855f2:	4413      	add	r3, r2
   855f4:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   855f6:	4a38      	ldr	r2, [pc, #224]	; (856d8 <udd_ep_set_halt+0x110>)
   855f8:	7bfb      	ldrb	r3, [r7, #15]
   855fa:	015b      	lsls	r3, r3, #5
   855fc:	4413      	add	r3, r2
   855fe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85602:	681b      	ldr	r3, [r3, #0]
   85604:	f003 0320 	and.w	r3, r3, #32
   85608:	2b00      	cmp	r3, #0
   8560a:	d106      	bne.n	8561a <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   8560c:	68bb      	ldr	r3, [r7, #8]
   8560e:	7d1b      	ldrb	r3, [r3, #20]
   85610:	f003 0304 	and.w	r3, r3, #4
   85614:	b2db      	uxtb	r3, r3
   85616:	2b00      	cmp	r3, #0
   85618:	d001      	beq.n	8561e <udd_ep_set_halt+0x56>
		return true; // Already STALL
   8561a:	2301      	movs	r3, #1
   8561c:	e054      	b.n	856c8 <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   8561e:	68bb      	ldr	r3, [r7, #8]
   85620:	7d1b      	ldrb	r3, [r3, #20]
   85622:	f003 0301 	and.w	r3, r3, #1
   85626:	b2db      	uxtb	r3, r3
   85628:	2b00      	cmp	r3, #0
   8562a:	d001      	beq.n	85630 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   8562c:	2300      	movs	r3, #0
   8562e:	e04b      	b.n	856c8 <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   85630:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85634:	2b00      	cmp	r3, #0
   85636:	da25      	bge.n	85684 <udd_ep_set_halt+0xbc>
   85638:	4a27      	ldr	r2, [pc, #156]	; (856d8 <udd_ep_set_halt+0x110>)
   8563a:	7bfb      	ldrb	r3, [r7, #15]
   8563c:	015b      	lsls	r3, r3, #5
   8563e:	4413      	add	r3, r2
   85640:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85644:	681b      	ldr	r3, [r3, #0]
   85646:	0c9b      	lsrs	r3, r3, #18
   85648:	f003 0303 	and.w	r3, r3, #3
   8564c:	2b00      	cmp	r3, #0
   8564e:	d019      	beq.n	85684 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   85650:	68ba      	ldr	r2, [r7, #8]
   85652:	7d13      	ldrb	r3, [r2, #20]
   85654:	f043 0304 	orr.w	r3, r3, #4
   85658:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   8565a:	4a1f      	ldr	r2, [pc, #124]	; (856d8 <udd_ep_set_halt+0x110>)
   8565c:	7bfb      	ldrb	r3, [r7, #15]
   8565e:	3308      	adds	r3, #8
   85660:	015b      	lsls	r3, r3, #5
   85662:	4413      	add	r3, r2
   85664:	3304      	adds	r3, #4
   85666:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8566a:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   8566c:	4b1a      	ldr	r3, [pc, #104]	; (856d8 <udd_ep_set_halt+0x110>)
   8566e:	691a      	ldr	r2, [r3, #16]
   85670:	7bfb      	ldrb	r3, [r7, #15]
   85672:	f44f 7180 	mov.w	r1, #256	; 0x100
   85676:	fa01 f303 	lsl.w	r3, r1, r3
   8567a:	4917      	ldr	r1, [pc, #92]	; (856d8 <udd_ep_set_halt+0x110>)
   8567c:	4313      	orrs	r3, r2
   8567e:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   85680:	2301      	movs	r3, #1
   85682:	e021      	b.n	856c8 <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   85684:	4a14      	ldr	r2, [pc, #80]	; (856d8 <udd_ep_set_halt+0x110>)
   85686:	7bfb      	ldrb	r3, [r7, #15]
   85688:	015b      	lsls	r3, r3, #5
   8568a:	4413      	add	r3, r2
   8568c:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85690:	681a      	ldr	r2, [r3, #0]
   85692:	4911      	ldr	r1, [pc, #68]	; (856d8 <udd_ep_set_halt+0x110>)
   85694:	7bfb      	ldrb	r3, [r7, #15]
   85696:	f022 0202 	bic.w	r2, r2, #2
   8569a:	015b      	lsls	r3, r3, #5
   8569c:	440b      	add	r3, r1
   8569e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   856a2:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   856a4:	4a0c      	ldr	r2, [pc, #48]	; (856d8 <udd_ep_set_halt+0x110>)
   856a6:	7bfb      	ldrb	r3, [r7, #15]
   856a8:	015b      	lsls	r3, r3, #5
   856aa:	4413      	add	r3, r2
   856ac:	f503 738c 	add.w	r3, r3, #280	; 0x118
   856b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   856b4:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   856b6:	4a08      	ldr	r2, [pc, #32]	; (856d8 <udd_ep_set_halt+0x110>)
   856b8:	7bfb      	ldrb	r3, [r7, #15]
   856ba:	015b      	lsls	r3, r3, #5
   856bc:	4413      	add	r3, r2
   856be:	f503 738a 	add.w	r3, r3, #276	; 0x114
   856c2:	2220      	movs	r2, #32
   856c4:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   856c6:	2301      	movs	r3, #1
}
   856c8:	4618      	mov	r0, r3
   856ca:	3714      	adds	r7, #20
   856cc:	46bd      	mov	sp, r7
   856ce:	bc80      	pop	{r7}
   856d0:	4770      	bx	lr
   856d2:	bf00      	nop
   856d4:	2000134c 	.word	0x2000134c
   856d8:	400a4000 	.word	0x400a4000

000856dc <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   856dc:	b580      	push	{r7, lr}
   856de:	b084      	sub	sp, #16
   856e0:	af00      	add	r7, sp, #0
   856e2:	4603      	mov	r3, r0
   856e4:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   856e6:	2300      	movs	r3, #0
   856e8:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   856ea:	79fb      	ldrb	r3, [r7, #7]
   856ec:	f003 030f 	and.w	r3, r3, #15
   856f0:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   856f2:	79fb      	ldrb	r3, [r7, #7]
   856f4:	2b02      	cmp	r3, #2
   856f6:	d901      	bls.n	856fc <udd_ep_clear_halt+0x20>
		return false;
   856f8:	2300      	movs	r3, #0
   856fa:	e07e      	b.n	857fa <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   856fc:	79fb      	ldrb	r3, [r7, #7]
   856fe:	1e5a      	subs	r2, r3, #1
   85700:	4613      	mov	r3, r2
   85702:	005b      	lsls	r3, r3, #1
   85704:	4413      	add	r3, r2
   85706:	00db      	lsls	r3, r3, #3
   85708:	4a3e      	ldr	r2, [pc, #248]	; (85804 <udd_ep_clear_halt+0x128>)
   8570a:	4413      	add	r3, r2
   8570c:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   8570e:	68bb      	ldr	r3, [r7, #8]
   85710:	7d1b      	ldrb	r3, [r3, #20]
   85712:	f003 0304 	and.w	r3, r3, #4
   85716:	b2db      	uxtb	r3, r3
   85718:	2b00      	cmp	r3, #0
   8571a:	d01a      	beq.n	85752 <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   8571c:	68ba      	ldr	r2, [r7, #8]
   8571e:	7d13      	ldrb	r3, [r2, #20]
   85720:	f36f 0382 	bfc	r3, #2, #1
   85724:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   85726:	4a38      	ldr	r2, [pc, #224]	; (85808 <udd_ep_clear_halt+0x12c>)
   85728:	79fb      	ldrb	r3, [r7, #7]
   8572a:	015b      	lsls	r3, r3, #5
   8572c:	4413      	add	r3, r2
   8572e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85732:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   85736:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   85738:	4b33      	ldr	r3, [pc, #204]	; (85808 <udd_ep_clear_halt+0x12c>)
   8573a:	691a      	ldr	r2, [r3, #16]
   8573c:	79fb      	ldrb	r3, [r7, #7]
   8573e:	f44f 7180 	mov.w	r1, #256	; 0x100
   85742:	fa01 f303 	lsl.w	r3, r1, r3
   85746:	43db      	mvns	r3, r3
   85748:	492f      	ldr	r1, [pc, #188]	; (85808 <udd_ep_clear_halt+0x12c>)
   8574a:	4013      	ands	r3, r2
   8574c:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   8574e:	2301      	movs	r3, #1
   85750:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   85752:	4a2d      	ldr	r2, [pc, #180]	; (85808 <udd_ep_clear_halt+0x12c>)
   85754:	79fb      	ldrb	r3, [r7, #7]
   85756:	015b      	lsls	r3, r3, #5
   85758:	4413      	add	r3, r2
   8575a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8575e:	681b      	ldr	r3, [r3, #0]
   85760:	f003 0320 	and.w	r3, r3, #32
   85764:	2b00      	cmp	r3, #0
   85766:	d035      	beq.n	857d4 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   85768:	4a27      	ldr	r2, [pc, #156]	; (85808 <udd_ep_clear_halt+0x12c>)
   8576a:	79fb      	ldrb	r3, [r7, #7]
   8576c:	015b      	lsls	r3, r3, #5
   8576e:	4413      	add	r3, r2
   85770:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85774:	681b      	ldr	r3, [r3, #0]
   85776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   8577a:	2b00      	cmp	r3, #0
   8577c:	d010      	beq.n	857a0 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   8577e:	4a22      	ldr	r2, [pc, #136]	; (85808 <udd_ep_clear_halt+0x12c>)
   85780:	79fb      	ldrb	r3, [r7, #7]
   85782:	015b      	lsls	r3, r3, #5
   85784:	4413      	add	r3, r2
   85786:	f503 738c 	add.w	r3, r3, #280	; 0x118
   8578a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8578e:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   85790:	4a1d      	ldr	r2, [pc, #116]	; (85808 <udd_ep_clear_halt+0x12c>)
   85792:	79fb      	ldrb	r3, [r7, #7]
   85794:	015b      	lsls	r3, r3, #5
   85796:	4413      	add	r3, r2
   85798:	f503 738c 	add.w	r3, r3, #280	; 0x118
   8579c:	2240      	movs	r2, #64	; 0x40
   8579e:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   857a0:	4a19      	ldr	r2, [pc, #100]	; (85808 <udd_ep_clear_halt+0x12c>)
   857a2:	79fb      	ldrb	r3, [r7, #7]
   857a4:	015b      	lsls	r3, r3, #5
   857a6:	4413      	add	r3, r2
   857a8:	f503 738c 	add.w	r3, r3, #280	; 0x118
   857ac:	2220      	movs	r2, #32
   857ae:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   857b0:	4a15      	ldr	r2, [pc, #84]	; (85808 <udd_ep_clear_halt+0x12c>)
   857b2:	79fb      	ldrb	r3, [r7, #7]
   857b4:	3308      	adds	r3, #8
   857b6:	015b      	lsls	r3, r3, #5
   857b8:	4413      	add	r3, r2
   857ba:	3304      	adds	r3, #4
   857bc:	681a      	ldr	r2, [r3, #0]
   857be:	4912      	ldr	r1, [pc, #72]	; (85808 <udd_ep_clear_halt+0x12c>)
   857c0:	79fb      	ldrb	r3, [r7, #7]
   857c2:	f042 0202 	orr.w	r2, r2, #2
   857c6:	3308      	adds	r3, #8
   857c8:	015b      	lsls	r3, r3, #5
   857ca:	440b      	add	r3, r1
   857cc:	3304      	adds	r3, #4
   857ce:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   857d0:	2301      	movs	r3, #1
   857d2:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   857d4:	7bfb      	ldrb	r3, [r7, #15]
   857d6:	2b00      	cmp	r3, #0
   857d8:	d00e      	beq.n	857f8 <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   857da:	68bb      	ldr	r3, [r7, #8]
   857dc:	7d1b      	ldrb	r3, [r3, #20]
   857de:	f003 0301 	and.w	r3, r3, #1
   857e2:	b2db      	uxtb	r3, r3
   857e4:	2b00      	cmp	r3, #0
   857e6:	d007      	beq.n	857f8 <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   857e8:	68ba      	ldr	r2, [r7, #8]
   857ea:	7d13      	ldrb	r3, [r2, #20]
   857ec:	f36f 0300 	bfc	r3, #0, #1
   857f0:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   857f2:	68bb      	ldr	r3, [r7, #8]
   857f4:	681b      	ldr	r3, [r3, #0]
   857f6:	4798      	blx	r3
		}
	}
	return true;
   857f8:	2301      	movs	r3, #1
}
   857fa:	4618      	mov	r0, r3
   857fc:	3710      	adds	r7, #16
   857fe:	46bd      	mov	sp, r7
   85800:	bd80      	pop	{r7, pc}
   85802:	bf00      	nop
   85804:	2000134c 	.word	0x2000134c
   85808:	400a4000 	.word	0x400a4000

0008580c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8580c:	b580      	push	{r7, lr}
   8580e:	b086      	sub	sp, #24
   85810:	af00      	add	r7, sp, #0
   85812:	60ba      	str	r2, [r7, #8]
   85814:	607b      	str	r3, [r7, #4]
   85816:	4603      	mov	r3, r0
   85818:	73fb      	strb	r3, [r7, #15]
   8581a:	460b      	mov	r3, r1
   8581c:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   8581e:	7bfb      	ldrb	r3, [r7, #15]
   85820:	f003 030f 	and.w	r3, r3, #15
   85824:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   85826:	7bfb      	ldrb	r3, [r7, #15]
   85828:	2b02      	cmp	r3, #2
   8582a:	d901      	bls.n	85830 <udd_ep_run+0x24>
		return false;
   8582c:	2300      	movs	r3, #0
   8582e:	e063      	b.n	858f8 <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   85830:	7bfb      	ldrb	r3, [r7, #15]
   85832:	1e5a      	subs	r2, r3, #1
   85834:	4613      	mov	r3, r2
   85836:	005b      	lsls	r3, r3, #1
   85838:	4413      	add	r3, r2
   8583a:	00db      	lsls	r3, r3, #3
   8583c:	4a30      	ldr	r2, [pc, #192]	; (85900 <udd_ep_run+0xf4>)
   8583e:	4413      	add	r3, r2
   85840:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   85842:	4a30      	ldr	r2, [pc, #192]	; (85904 <udd_ep_run+0xf8>)
   85844:	7bfb      	ldrb	r3, [r7, #15]
   85846:	015b      	lsls	r3, r3, #5
   85848:	4413      	add	r3, r2
   8584a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   8584e:	681b      	ldr	r3, [r3, #0]
   85850:	f003 0301 	and.w	r3, r3, #1
   85854:	2b00      	cmp	r3, #0
   85856:	d011      	beq.n	8587c <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   85858:	4a2a      	ldr	r2, [pc, #168]	; (85904 <udd_ep_run+0xf8>)
   8585a:	7bfb      	ldrb	r3, [r7, #15]
   8585c:	015b      	lsls	r3, r3, #5
   8585e:	4413      	add	r3, r2
   85860:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85864:	681b      	ldr	r3, [r3, #0]
   85866:	f003 0320 	and.w	r3, r3, #32
   8586a:	2b00      	cmp	r3, #0
   8586c:	d106      	bne.n	8587c <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   8586e:	697b      	ldr	r3, [r7, #20]
   85870:	7d1b      	ldrb	r3, [r3, #20]
   85872:	f003 0304 	and.w	r3, r3, #4
   85876:	b2db      	uxtb	r3, r3
   85878:	2b00      	cmp	r3, #0
   8587a:	d001      	beq.n	85880 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   8587c:	2300      	movs	r3, #0
   8587e:	e03b      	b.n	858f8 <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   85880:	4b21      	ldr	r3, [pc, #132]	; (85908 <udd_ep_run+0xfc>)
   85882:	4798      	blx	r3
   85884:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   85886:	697b      	ldr	r3, [r7, #20]
   85888:	7d1b      	ldrb	r3, [r3, #20]
   8588a:	f003 0301 	and.w	r3, r3, #1
   8588e:	b2db      	uxtb	r3, r3
   85890:	2b00      	cmp	r3, #0
   85892:	d004      	beq.n	8589e <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   85894:	6938      	ldr	r0, [r7, #16]
   85896:	4b1d      	ldr	r3, [pc, #116]	; (8590c <udd_ep_run+0x100>)
   85898:	4798      	blx	r3
		return false; // Job already on going
   8589a:	2300      	movs	r3, #0
   8589c:	e02c      	b.n	858f8 <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   8589e:	697a      	ldr	r2, [r7, #20]
   858a0:	7d13      	ldrb	r3, [r2, #20]
   858a2:	f043 0301 	orr.w	r3, r3, #1
   858a6:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   858a8:	6938      	ldr	r0, [r7, #16]
   858aa:	4b18      	ldr	r3, [pc, #96]	; (8590c <udd_ep_run+0x100>)
   858ac:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   858ae:	697b      	ldr	r3, [r7, #20]
   858b0:	68ba      	ldr	r2, [r7, #8]
   858b2:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   858b4:	697b      	ldr	r3, [r7, #20]
   858b6:	687a      	ldr	r2, [r7, #4]
   858b8:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   858ba:	697b      	ldr	r3, [r7, #20]
   858bc:	2200      	movs	r2, #0
   858be:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   858c0:	697b      	ldr	r3, [r7, #20]
   858c2:	2200      	movs	r2, #0
   858c4:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   858c6:	697b      	ldr	r3, [r7, #20]
   858c8:	6a3a      	ldr	r2, [r7, #32]
   858ca:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   858cc:	7bbb      	ldrb	r3, [r7, #14]
   858ce:	2b00      	cmp	r3, #0
   858d0:	d102      	bne.n	858d8 <udd_ep_run+0xcc>
   858d2:	687b      	ldr	r3, [r7, #4]
   858d4:	2b00      	cmp	r3, #0
   858d6:	d101      	bne.n	858dc <udd_ep_run+0xd0>
   858d8:	2301      	movs	r3, #1
   858da:	e000      	b.n	858de <udd_ep_run+0xd2>
   858dc:	2300      	movs	r3, #0
   858de:	f003 0301 	and.w	r3, r3, #1
   858e2:	b2d9      	uxtb	r1, r3
   858e4:	697a      	ldr	r2, [r7, #20]
   858e6:	7d13      	ldrb	r3, [r2, #20]
   858e8:	f361 0341 	bfi	r3, r1, #1, #1
   858ec:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   858ee:	7bfb      	ldrb	r3, [r7, #15]
   858f0:	4618      	mov	r0, r3
   858f2:	4b07      	ldr	r3, [pc, #28]	; (85910 <udd_ep_run+0x104>)
   858f4:	4798      	blx	r3
	return true;
   858f6:	2301      	movs	r3, #1
}
   858f8:	4618      	mov	r0, r3
   858fa:	3718      	adds	r7, #24
   858fc:	46bd      	mov	sp, r7
   858fe:	bd80      	pop	{r7, pc}
   85900:	2000134c 	.word	0x2000134c
   85904:	400a4000 	.word	0x400a4000
   85908:	00084ba9 	.word	0x00084ba9
   8590c:	00084c05 	.word	0x00084c05
   85910:	000863c9 	.word	0x000863c9

00085914 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   85914:	b580      	push	{r7, lr}
   85916:	b084      	sub	sp, #16
   85918:	af00      	add	r7, sp, #0
   8591a:	4603      	mov	r3, r0
   8591c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8591e:	79fb      	ldrb	r3, [r7, #7]
   85920:	f003 030f 	and.w	r3, r3, #15
   85924:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   85926:	7bfb      	ldrb	r3, [r7, #15]
   85928:	011a      	lsls	r2, r3, #4
   8592a:	4b19      	ldr	r3, [pc, #100]	; (85990 <udd_ep_abort+0x7c>)
   8592c:	4413      	add	r3, r2
   8592e:	2200      	movs	r2, #0
   85930:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   85932:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85936:	2b00      	cmp	r3, #0
   85938:	da21      	bge.n	8597e <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   8593a:	e014      	b.n	85966 <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   8593c:	4a15      	ldr	r2, [pc, #84]	; (85994 <udd_ep_abort+0x80>)
   8593e:	7bfb      	ldrb	r3, [r7, #15]
   85940:	015b      	lsls	r3, r3, #5
   85942:	4413      	add	r3, r2
   85944:	f503 738a 	add.w	r3, r3, #276	; 0x114
   85948:	f44f 7200 	mov.w	r2, #512	; 0x200
   8594c:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   8594e:	bf00      	nop
   85950:	4a10      	ldr	r2, [pc, #64]	; (85994 <udd_ep_abort+0x80>)
   85952:	7bfb      	ldrb	r3, [r7, #15]
   85954:	015b      	lsls	r3, r3, #5
   85956:	4413      	add	r3, r2
   85958:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8595c:	681b      	ldr	r3, [r3, #0]
   8595e:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85962:	2b00      	cmp	r3, #0
   85964:	d1f4      	bne.n	85950 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   85966:	4a0b      	ldr	r2, [pc, #44]	; (85994 <udd_ep_abort+0x80>)
   85968:	7bfb      	ldrb	r3, [r7, #15]
   8596a:	015b      	lsls	r3, r3, #5
   8596c:	4413      	add	r3, r2
   8596e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85972:	681b      	ldr	r3, [r3, #0]
   85974:	0c9b      	lsrs	r3, r3, #18
   85976:	f003 0303 	and.w	r3, r3, #3
   8597a:	2b00      	cmp	r3, #0
   8597c:	d1de      	bne.n	8593c <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   8597e:	79fb      	ldrb	r3, [r7, #7]
   85980:	4618      	mov	r0, r3
   85982:	4b05      	ldr	r3, [pc, #20]	; (85998 <udd_ep_abort+0x84>)
   85984:	4798      	blx	r3
}
   85986:	bf00      	nop
   85988:	3710      	adds	r7, #16
   8598a:	46bd      	mov	sp, r7
   8598c:	bd80      	pop	{r7, pc}
   8598e:	bf00      	nop
   85990:	400a4300 	.word	0x400a4300
   85994:	400a4000 	.word	0x400a4000
   85998:	0008631d 	.word	0x0008631d

0008599c <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   8599c:	b480      	push	{r7}
   8599e:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   859a0:	4b0a      	ldr	r3, [pc, #40]	; (859cc <udd_test_mode_j+0x30>)
   859a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   859a6:	f023 0303 	bic.w	r3, r3, #3
   859aa:	4a08      	ldr	r2, [pc, #32]	; (859cc <udd_test_mode_j+0x30>)
   859ac:	f043 0302 	orr.w	r3, r3, #2
   859b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   859b4:	4b05      	ldr	r3, [pc, #20]	; (859cc <udd_test_mode_j+0x30>)
   859b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   859ba:	4a04      	ldr	r2, [pc, #16]	; (859cc <udd_test_mode_j+0x30>)
   859bc:	f043 0304 	orr.w	r3, r3, #4
   859c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   859c4:	bf00      	nop
   859c6:	46bd      	mov	sp, r7
   859c8:	bc80      	pop	{r7}
   859ca:	4770      	bx	lr
   859cc:	400a4000 	.word	0x400a4000

000859d0 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   859d0:	b480      	push	{r7}
   859d2:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   859d4:	4b0a      	ldr	r3, [pc, #40]	; (85a00 <udd_test_mode_k+0x30>)
   859d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   859da:	f023 0303 	bic.w	r3, r3, #3
   859de:	4a08      	ldr	r2, [pc, #32]	; (85a00 <udd_test_mode_k+0x30>)
   859e0:	f043 0302 	orr.w	r3, r3, #2
   859e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   859e8:	4b05      	ldr	r3, [pc, #20]	; (85a00 <udd_test_mode_k+0x30>)
   859ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   859ee:	4a04      	ldr	r2, [pc, #16]	; (85a00 <udd_test_mode_k+0x30>)
   859f0:	f043 0308 	orr.w	r3, r3, #8
   859f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   859f8:	bf00      	nop
   859fa:	46bd      	mov	sp, r7
   859fc:	bc80      	pop	{r7}
   859fe:	4770      	bx	lr
   85a00:	400a4000 	.word	0x400a4000

00085a04 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   85a04:	b480      	push	{r7}
   85a06:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   85a08:	4b06      	ldr	r3, [pc, #24]	; (85a24 <udd_test_mode_se0_nak+0x20>)
   85a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   85a0e:	f023 0303 	bic.w	r3, r3, #3
   85a12:	4a04      	ldr	r2, [pc, #16]	; (85a24 <udd_test_mode_se0_nak+0x20>)
   85a14:	f043 0302 	orr.w	r3, r3, #2
   85a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85a1c:	bf00      	nop
   85a1e:	46bd      	mov	sp, r7
   85a20:	bc80      	pop	{r7}
   85a22:	4770      	bx	lr
   85a24:	400a4000 	.word	0x400a4000

00085a28 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   85a28:	b4b0      	push	{r4, r5, r7}
   85a2a:	b093      	sub	sp, #76	; 0x4c
   85a2c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   85a2e:	4b2e      	ldr	r3, [pc, #184]	; (85ae8 <udd_test_mode_packet+0xc0>)
   85a30:	1d3c      	adds	r4, r7, #4
   85a32:	461d      	mov	r5, r3
   85a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85a40:	e895 0003 	ldmia.w	r5, {r0, r1}
   85a44:	6020      	str	r0, [r4, #0]
   85a46:	3404      	adds	r4, #4
   85a48:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   85a4a:	4b28      	ldr	r3, [pc, #160]	; (85aec <udd_test_mode_packet+0xc4>)
   85a4c:	2201      	movs	r2, #1
   85a4e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   85a52:	4b26      	ldr	r3, [pc, #152]	; (85aec <udd_test_mode_packet+0xc4>)
   85a54:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   85a58:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   85a5c:	f023 0303 	bic.w	r3, r3, #3
   85a60:	4a22      	ldr	r2, [pc, #136]	; (85aec <udd_test_mode_packet+0xc4>)
   85a62:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   85a66:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   85a6a:	4b20      	ldr	r3, [pc, #128]	; (85aec <udd_test_mode_packet+0xc4>)
   85a6c:	2201      	movs	r2, #1
   85a6e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   85a72:	4b1e      	ldr	r3, [pc, #120]	; (85aec <udd_test_mode_packet+0xc4>)
   85a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   85a78:	f023 0303 	bic.w	r3, r3, #3
   85a7c:	4a1b      	ldr	r2, [pc, #108]	; (85aec <udd_test_mode_packet+0xc4>)
   85a7e:	f043 0302 	orr.w	r3, r3, #2
   85a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   85a86:	4b19      	ldr	r3, [pc, #100]	; (85aec <udd_test_mode_packet+0xc4>)
   85a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   85a8c:	4a17      	ldr	r2, [pc, #92]	; (85aec <udd_test_mode_packet+0xc4>)
   85a8e:	f043 0310 	orr.w	r3, r3, #16
   85a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85a96:	4b16      	ldr	r3, [pc, #88]	; (85af0 <udd_test_mode_packet+0xc8>)
   85a98:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   85a9a:	1d3b      	adds	r3, r7, #4
   85a9c:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   85a9e:	2300      	movs	r3, #0
   85aa0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   85aa4:	e00c      	b.n	85ac0 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   85aa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   85aa8:	1c53      	adds	r3, r2, #1
   85aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   85aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85aae:	1c59      	adds	r1, r3, #1
   85ab0:	6439      	str	r1, [r7, #64]	; 0x40
   85ab2:	7812      	ldrb	r2, [r2, #0]
   85ab4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   85ab6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   85aba:	3301      	adds	r3, #1
   85abc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   85ac0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   85ac4:	2b34      	cmp	r3, #52	; 0x34
   85ac6:	d9ee      	bls.n	85aa6 <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   85ac8:	4b08      	ldr	r3, [pc, #32]	; (85aec <udd_test_mode_packet+0xc4>)
   85aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85ace:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85ad2:	4b06      	ldr	r3, [pc, #24]	; (85aec <udd_test_mode_packet+0xc4>)
   85ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85ad8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   85adc:	bf00      	nop
   85ade:	374c      	adds	r7, #76	; 0x4c
   85ae0:	46bd      	mov	sp, r7
   85ae2:	bcb0      	pop	{r4, r5, r7}
   85ae4:	4770      	bx	lr
   85ae6:	bf00      	nop
   85ae8:	0008da38 	.word	0x0008da38
   85aec:	400a4000 	.word	0x400a4000
   85af0:	20180000 	.word	0x20180000

00085af4 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   85af4:	b580      	push	{r7, lr}
   85af6:	b082      	sub	sp, #8
   85af8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   85afa:	4b1b      	ldr	r3, [pc, #108]	; (85b68 <udd_reset_ep_ctrl+0x74>)
   85afc:	681b      	ldr	r3, [r3, #0]
   85afe:	4a1a      	ldr	r2, [pc, #104]	; (85b68 <udd_reset_ep_ctrl+0x74>)
   85b00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   85b04:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   85b06:	4b18      	ldr	r3, [pc, #96]	; (85b68 <udd_reset_ep_ctrl+0x74>)
   85b08:	681b      	ldr	r3, [r3, #0]
   85b0a:	4a17      	ldr	r2, [pc, #92]	; (85b68 <udd_reset_ep_ctrl+0x74>)
   85b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85b10:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   85b12:	4b15      	ldr	r3, [pc, #84]	; (85b68 <udd_reset_ep_ctrl+0x74>)
   85b14:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   85b18:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   85b1c:	f023 0303 	bic.w	r3, r3, #3
   85b20:	4a11      	ldr	r2, [pc, #68]	; (85b68 <udd_reset_ep_ctrl+0x74>)
   85b22:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   85b26:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   85b2a:	4b0f      	ldr	r3, [pc, #60]	; (85b68 <udd_reset_ep_ctrl+0x74>)
   85b2c:	2201      	movs	r2, #1
   85b2e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   85b32:	4b0e      	ldr	r3, [pc, #56]	; (85b6c <udd_reset_ep_ctrl+0x78>)
   85b34:	4798      	blx	r3
   85b36:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   85b38:	4b0b      	ldr	r3, [pc, #44]	; (85b68 <udd_reset_ep_ctrl+0x74>)
   85b3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85b3e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   85b42:	4b09      	ldr	r3, [pc, #36]	; (85b68 <udd_reset_ep_ctrl+0x74>)
   85b44:	f44f 7200 	mov.w	r2, #512	; 0x200
   85b48:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   85b4c:	4b06      	ldr	r3, [pc, #24]	; (85b68 <udd_reset_ep_ctrl+0x74>)
   85b4e:	691b      	ldr	r3, [r3, #16]
   85b50:	4a05      	ldr	r2, [pc, #20]	; (85b68 <udd_reset_ep_ctrl+0x74>)
   85b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   85b56:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   85b58:	6878      	ldr	r0, [r7, #4]
   85b5a:	4b05      	ldr	r3, [pc, #20]	; (85b70 <udd_reset_ep_ctrl+0x7c>)
   85b5c:	4798      	blx	r3
}
   85b5e:	bf00      	nop
   85b60:	3708      	adds	r7, #8
   85b62:	46bd      	mov	sp, r7
   85b64:	bd80      	pop	{r7, pc}
   85b66:	bf00      	nop
   85b68:	400a4000 	.word	0x400a4000
   85b6c:	00084ba9 	.word	0x00084ba9
   85b70:	00084c05 	.word	0x00084c05

00085b74 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   85b74:	b580      	push	{r7, lr}
   85b76:	b082      	sub	sp, #8
   85b78:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   85b7a:	4b10      	ldr	r3, [pc, #64]	; (85bbc <udd_ctrl_init+0x48>)
   85b7c:	4798      	blx	r3
   85b7e:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   85b80:	4b0f      	ldr	r3, [pc, #60]	; (85bc0 <udd_ctrl_init+0x4c>)
   85b82:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85b86:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   85b8a:	6878      	ldr	r0, [r7, #4]
   85b8c:	4b0d      	ldr	r3, [pc, #52]	; (85bc4 <udd_ctrl_init+0x50>)
   85b8e:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   85b90:	4b0b      	ldr	r3, [pc, #44]	; (85bc0 <udd_ctrl_init+0x4c>)
   85b92:	f44f 7200 	mov.w	r2, #512	; 0x200
   85b96:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   85b9a:	4b0b      	ldr	r3, [pc, #44]	; (85bc8 <udd_ctrl_init+0x54>)
   85b9c:	2200      	movs	r2, #0
   85b9e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   85ba0:	4b09      	ldr	r3, [pc, #36]	; (85bc8 <udd_ctrl_init+0x54>)
   85ba2:	2200      	movs	r2, #0
   85ba4:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   85ba6:	4b08      	ldr	r3, [pc, #32]	; (85bc8 <udd_ctrl_init+0x54>)
   85ba8:	2200      	movs	r2, #0
   85baa:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   85bac:	4b07      	ldr	r3, [pc, #28]	; (85bcc <udd_ctrl_init+0x58>)
   85bae:	2200      	movs	r2, #0
   85bb0:	701a      	strb	r2, [r3, #0]
}
   85bb2:	bf00      	nop
   85bb4:	3708      	adds	r7, #8
   85bb6:	46bd      	mov	sp, r7
   85bb8:	bd80      	pop	{r7, pc}
   85bba:	bf00      	nop
   85bbc:	00084ba9 	.word	0x00084ba9
   85bc0:	400a4000 	.word	0x400a4000
   85bc4:	00084c05 	.word	0x00084c05
   85bc8:	20001828 	.word	0x20001828
   85bcc:	20001345 	.word	0x20001345

00085bd0 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   85bd0:	b580      	push	{r7, lr}
   85bd2:	b084      	sub	sp, #16
   85bd4:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   85bd6:	4b40      	ldr	r3, [pc, #256]	; (85cd8 <udd_ctrl_setup_received+0x108>)
   85bd8:	781b      	ldrb	r3, [r3, #0]
   85bda:	2b00      	cmp	r3, #0
   85bdc:	d003      	beq.n	85be6 <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   85bde:	4b3f      	ldr	r3, [pc, #252]	; (85cdc <udd_ctrl_setup_received+0x10c>)
   85be0:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   85be2:	4b3f      	ldr	r3, [pc, #252]	; (85ce0 <udd_ctrl_setup_received+0x110>)
   85be4:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   85be6:	4b3f      	ldr	r3, [pc, #252]	; (85ce4 <udd_ctrl_setup_received+0x114>)
   85be8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85bec:	0d1b      	lsrs	r3, r3, #20
   85bee:	f3c3 030a 	ubfx	r3, r3, #0, #11
   85bf2:	2b08      	cmp	r3, #8
   85bf4:	d007      	beq.n	85c06 <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   85bf6:	4b3c      	ldr	r3, [pc, #240]	; (85ce8 <udd_ctrl_setup_received+0x118>)
   85bf8:	4798      	blx	r3
		udd_ack_setup_received(0);
   85bfa:	4b3a      	ldr	r3, [pc, #232]	; (85ce4 <udd_ctrl_setup_received+0x114>)
   85bfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85c00:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   85c04:	e064      	b.n	85cd0 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85c06:	4b39      	ldr	r3, [pc, #228]	; (85cec <udd_ctrl_setup_received+0x11c>)
   85c08:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   85c0a:	2300      	movs	r3, #0
   85c0c:	73fb      	strb	r3, [r7, #15]
   85c0e:	e00a      	b.n	85c26 <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   85c10:	68bb      	ldr	r3, [r7, #8]
   85c12:	1c5a      	adds	r2, r3, #1
   85c14:	60ba      	str	r2, [r7, #8]
   85c16:	7bfa      	ldrb	r2, [r7, #15]
   85c18:	4935      	ldr	r1, [pc, #212]	; (85cf0 <udd_ctrl_setup_received+0x120>)
   85c1a:	440a      	add	r2, r1
   85c1c:	781b      	ldrb	r3, [r3, #0]
   85c1e:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   85c20:	7bfb      	ldrb	r3, [r7, #15]
   85c22:	3301      	adds	r3, #1
   85c24:	73fb      	strb	r3, [r7, #15]
   85c26:	7bfb      	ldrb	r3, [r7, #15]
   85c28:	2b07      	cmp	r3, #7
   85c2a:	d9f1      	bls.n	85c10 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   85c2c:	4b30      	ldr	r3, [pc, #192]	; (85cf0 <udd_ctrl_setup_received+0x120>)
   85c2e:	885a      	ldrh	r2, [r3, #2]
   85c30:	4b2f      	ldr	r3, [pc, #188]	; (85cf0 <udd_ctrl_setup_received+0x120>)
   85c32:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   85c34:	4b2e      	ldr	r3, [pc, #184]	; (85cf0 <udd_ctrl_setup_received+0x120>)
   85c36:	889a      	ldrh	r2, [r3, #4]
   85c38:	4b2d      	ldr	r3, [pc, #180]	; (85cf0 <udd_ctrl_setup_received+0x120>)
   85c3a:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   85c3c:	4b2c      	ldr	r3, [pc, #176]	; (85cf0 <udd_ctrl_setup_received+0x120>)
   85c3e:	88da      	ldrh	r2, [r3, #6]
   85c40:	4b2b      	ldr	r3, [pc, #172]	; (85cf0 <udd_ctrl_setup_received+0x120>)
   85c42:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   85c44:	4b2b      	ldr	r3, [pc, #172]	; (85cf4 <udd_ctrl_setup_received+0x124>)
   85c46:	4798      	blx	r3
   85c48:	4603      	mov	r3, r0
   85c4a:	f083 0301 	eor.w	r3, r3, #1
   85c4e:	b2db      	uxtb	r3, r3
   85c50:	2b00      	cmp	r3, #0
   85c52:	d007      	beq.n	85c64 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   85c54:	4b24      	ldr	r3, [pc, #144]	; (85ce8 <udd_ctrl_setup_received+0x118>)
   85c56:	4798      	blx	r3
		udd_ack_setup_received(0);
   85c58:	4b22      	ldr	r3, [pc, #136]	; (85ce4 <udd_ctrl_setup_received+0x114>)
   85c5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85c5e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   85c62:	e035      	b.n	85cd0 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   85c64:	4b1f      	ldr	r3, [pc, #124]	; (85ce4 <udd_ctrl_setup_received+0x114>)
   85c66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85c6a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   85c6e:	4b20      	ldr	r3, [pc, #128]	; (85cf0 <udd_ctrl_setup_received+0x120>)
   85c70:	781b      	ldrb	r3, [r3, #0]
   85c72:	b25b      	sxtb	r3, r3
   85c74:	2b00      	cmp	r3, #0
   85c76:	da0b      	bge.n	85c90 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   85c78:	4b1f      	ldr	r3, [pc, #124]	; (85cf8 <udd_ctrl_setup_received+0x128>)
   85c7a:	2200      	movs	r2, #0
   85c7c:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85c7e:	4b1f      	ldr	r3, [pc, #124]	; (85cfc <udd_ctrl_setup_received+0x12c>)
   85c80:	2200      	movs	r2, #0
   85c82:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   85c84:	4b14      	ldr	r3, [pc, #80]	; (85cd8 <udd_ctrl_setup_received+0x108>)
   85c86:	2202      	movs	r2, #2
   85c88:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   85c8a:	4b1d      	ldr	r3, [pc, #116]	; (85d00 <udd_ctrl_setup_received+0x130>)
   85c8c:	4798      	blx	r3
   85c8e:	e01f      	b.n	85cd0 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   85c90:	4b17      	ldr	r3, [pc, #92]	; (85cf0 <udd_ctrl_setup_received+0x120>)
   85c92:	88db      	ldrh	r3, [r3, #6]
   85c94:	2b00      	cmp	r3, #0
   85c96:	d102      	bne.n	85c9e <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   85c98:	4b1a      	ldr	r3, [pc, #104]	; (85d04 <udd_ctrl_setup_received+0x134>)
   85c9a:	4798      	blx	r3
			return;
   85c9c:	e018      	b.n	85cd0 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   85c9e:	4b16      	ldr	r3, [pc, #88]	; (85cf8 <udd_ctrl_setup_received+0x128>)
   85ca0:	2200      	movs	r2, #0
   85ca2:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85ca4:	4b15      	ldr	r3, [pc, #84]	; (85cfc <udd_ctrl_setup_received+0x12c>)
   85ca6:	2200      	movs	r2, #0
   85ca8:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   85caa:	4b0b      	ldr	r3, [pc, #44]	; (85cd8 <udd_ctrl_setup_received+0x108>)
   85cac:	2201      	movs	r2, #1
   85cae:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   85cb0:	4b0c      	ldr	r3, [pc, #48]	; (85ce4 <udd_ctrl_setup_received+0x114>)
   85cb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85cb6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   85cba:	4b13      	ldr	r3, [pc, #76]	; (85d08 <udd_ctrl_setup_received+0x138>)
   85cbc:	4798      	blx	r3
   85cbe:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   85cc0:	4b08      	ldr	r3, [pc, #32]	; (85ce4 <udd_ctrl_setup_received+0x114>)
   85cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85cc6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   85cca:	6878      	ldr	r0, [r7, #4]
   85ccc:	4b0f      	ldr	r3, [pc, #60]	; (85d0c <udd_ctrl_setup_received+0x13c>)
   85cce:	4798      	blx	r3
	}
}
   85cd0:	3710      	adds	r7, #16
   85cd2:	46bd      	mov	sp, r7
   85cd4:	bd80      	pop	{r7, pc}
   85cd6:	bf00      	nop
   85cd8:	20001345 	.word	0x20001345
   85cdc:	00086179 	.word	0x00086179
   85ce0:	00085b75 	.word	0x00085b75
   85ce4:	400a4000 	.word	0x400a4000
   85ce8:	000860ad 	.word	0x000860ad
   85cec:	20180000 	.word	0x20180000
   85cf0:	20001828 	.word	0x20001828
   85cf4:	00084955 	.word	0x00084955
   85cf8:	20001346 	.word	0x20001346
   85cfc:	20001348 	.word	0x20001348
   85d00:	00085d11 	.word	0x00085d11
   85d04:	000860d1 	.word	0x000860d1
   85d08:	00084ba9 	.word	0x00084ba9
   85d0c:	00084c05 	.word	0x00084c05

00085d10 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   85d10:	b580      	push	{r7, lr}
   85d12:	b084      	sub	sp, #16
   85d14:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   85d16:	4b4c      	ldr	r3, [pc, #304]	; (85e48 <udd_ctrl_in_sent+0x138>)
   85d18:	4798      	blx	r3
   85d1a:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   85d1c:	4b4b      	ldr	r3, [pc, #300]	; (85e4c <udd_ctrl_in_sent+0x13c>)
   85d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85d22:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   85d26:	6838      	ldr	r0, [r7, #0]
   85d28:	4b49      	ldr	r3, [pc, #292]	; (85e50 <udd_ctrl_in_sent+0x140>)
   85d2a:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85d2c:	4b49      	ldr	r3, [pc, #292]	; (85e54 <udd_ctrl_in_sent+0x144>)
   85d2e:	781b      	ldrb	r3, [r3, #0]
   85d30:	2b03      	cmp	r3, #3
   85d32:	d104      	bne.n	85d3e <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   85d34:	4b48      	ldr	r3, [pc, #288]	; (85e58 <udd_ctrl_in_sent+0x148>)
   85d36:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   85d38:	4b48      	ldr	r3, [pc, #288]	; (85e5c <udd_ctrl_in_sent+0x14c>)
   85d3a:	4798      	blx	r3
		return;
   85d3c:	e081      	b.n	85e42 <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85d3e:	4b48      	ldr	r3, [pc, #288]	; (85e60 <udd_ctrl_in_sent+0x150>)
   85d40:	899a      	ldrh	r2, [r3, #12]
   85d42:	4b48      	ldr	r3, [pc, #288]	; (85e64 <udd_ctrl_in_sent+0x154>)
   85d44:	881b      	ldrh	r3, [r3, #0]
   85d46:	1ad3      	subs	r3, r2, r3
   85d48:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   85d4a:	89fb      	ldrh	r3, [r7, #14]
   85d4c:	2b00      	cmp	r3, #0
   85d4e:	d127      	bne.n	85da0 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85d50:	4b45      	ldr	r3, [pc, #276]	; (85e68 <udd_ctrl_in_sent+0x158>)
   85d52:	881a      	ldrh	r2, [r3, #0]
   85d54:	4b43      	ldr	r3, [pc, #268]	; (85e64 <udd_ctrl_in_sent+0x154>)
   85d56:	881b      	ldrh	r3, [r3, #0]
   85d58:	4413      	add	r3, r2
   85d5a:	b29a      	uxth	r2, r3
   85d5c:	4b42      	ldr	r3, [pc, #264]	; (85e68 <udd_ctrl_in_sent+0x158>)
   85d5e:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   85d60:	4b3f      	ldr	r3, [pc, #252]	; (85e60 <udd_ctrl_in_sent+0x150>)
   85d62:	88da      	ldrh	r2, [r3, #6]
   85d64:	4b40      	ldr	r3, [pc, #256]	; (85e68 <udd_ctrl_in_sent+0x158>)
   85d66:	881b      	ldrh	r3, [r3, #0]
   85d68:	429a      	cmp	r2, r3
   85d6a:	d003      	beq.n	85d74 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   85d6c:	4b3f      	ldr	r3, [pc, #252]	; (85e6c <udd_ctrl_in_sent+0x15c>)
   85d6e:	781b      	ldrb	r3, [r3, #0]
   85d70:	2b00      	cmp	r3, #0
   85d72:	d002      	beq.n	85d7a <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   85d74:	4b3e      	ldr	r3, [pc, #248]	; (85e70 <udd_ctrl_in_sent+0x160>)
   85d76:	4798      	blx	r3
			return;
   85d78:	e063      	b.n	85e42 <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   85d7a:	4b39      	ldr	r3, [pc, #228]	; (85e60 <udd_ctrl_in_sent+0x150>)
   85d7c:	695b      	ldr	r3, [r3, #20]
   85d7e:	2b00      	cmp	r3, #0
   85d80:	d00e      	beq.n	85da0 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   85d82:	4b37      	ldr	r3, [pc, #220]	; (85e60 <udd_ctrl_in_sent+0x150>)
   85d84:	695b      	ldr	r3, [r3, #20]
   85d86:	4798      	blx	r3
   85d88:	4603      	mov	r3, r0
   85d8a:	f083 0301 	eor.w	r3, r3, #1
   85d8e:	b2db      	uxtb	r3, r3
   85d90:	2b00      	cmp	r3, #0
   85d92:	d105      	bne.n	85da0 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   85d94:	4b33      	ldr	r3, [pc, #204]	; (85e64 <udd_ctrl_in_sent+0x154>)
   85d96:	2200      	movs	r2, #0
   85d98:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   85d9a:	4b31      	ldr	r3, [pc, #196]	; (85e60 <udd_ctrl_in_sent+0x150>)
   85d9c:	899b      	ldrh	r3, [r3, #12]
   85d9e:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   85da0:	89fb      	ldrh	r3, [r7, #14]
   85da2:	2b3f      	cmp	r3, #63	; 0x3f
   85da4:	d905      	bls.n	85db2 <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   85da6:	2340      	movs	r3, #64	; 0x40
   85da8:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   85daa:	4b30      	ldr	r3, [pc, #192]	; (85e6c <udd_ctrl_in_sent+0x15c>)
   85dac:	2200      	movs	r2, #0
   85dae:	701a      	strb	r2, [r3, #0]
   85db0:	e002      	b.n	85db8 <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   85db2:	4b2e      	ldr	r3, [pc, #184]	; (85e6c <udd_ctrl_in_sent+0x15c>)
   85db4:	2201      	movs	r2, #1
   85db6:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85db8:	4b2e      	ldr	r3, [pc, #184]	; (85e74 <udd_ctrl_in_sent+0x164>)
   85dba:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85dbc:	4b28      	ldr	r3, [pc, #160]	; (85e60 <udd_ctrl_in_sent+0x150>)
   85dbe:	689b      	ldr	r3, [r3, #8]
   85dc0:	4a28      	ldr	r2, [pc, #160]	; (85e64 <udd_ctrl_in_sent+0x154>)
   85dc2:	8812      	ldrh	r2, [r2, #0]
   85dc4:	4413      	add	r3, r2
   85dc6:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   85dc8:	4b1f      	ldr	r3, [pc, #124]	; (85e48 <udd_ctrl_in_sent+0x138>)
   85dca:	4798      	blx	r3
   85dcc:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   85dce:	4b1f      	ldr	r3, [pc, #124]	; (85e4c <udd_ctrl_in_sent+0x13c>)
   85dd0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85dd8:	2b00      	cmp	r3, #0
   85dda:	d006      	beq.n	85dea <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   85ddc:	6838      	ldr	r0, [r7, #0]
   85dde:	4b1c      	ldr	r3, [pc, #112]	; (85e50 <udd_ctrl_in_sent+0x140>)
   85de0:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85de2:	4b1c      	ldr	r3, [pc, #112]	; (85e54 <udd_ctrl_in_sent+0x144>)
   85de4:	2204      	movs	r2, #4
   85de6:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   85de8:	e02b      	b.n	85e42 <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   85dea:	2300      	movs	r3, #0
   85dec:	737b      	strb	r3, [r7, #13]
   85dee:	e00a      	b.n	85e06 <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   85df0:	687a      	ldr	r2, [r7, #4]
   85df2:	1c53      	adds	r3, r2, #1
   85df4:	607b      	str	r3, [r7, #4]
   85df6:	68bb      	ldr	r3, [r7, #8]
   85df8:	1c59      	adds	r1, r3, #1
   85dfa:	60b9      	str	r1, [r7, #8]
   85dfc:	7812      	ldrb	r2, [r2, #0]
   85dfe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   85e00:	7b7b      	ldrb	r3, [r7, #13]
   85e02:	3301      	adds	r3, #1
   85e04:	737b      	strb	r3, [r7, #13]
   85e06:	7b7b      	ldrb	r3, [r7, #13]
   85e08:	b29b      	uxth	r3, r3
   85e0a:	89fa      	ldrh	r2, [r7, #14]
   85e0c:	429a      	cmp	r2, r3
   85e0e:	d8ef      	bhi.n	85df0 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   85e10:	4b14      	ldr	r3, [pc, #80]	; (85e64 <udd_ctrl_in_sent+0x154>)
   85e12:	881a      	ldrh	r2, [r3, #0]
   85e14:	89fb      	ldrh	r3, [r7, #14]
   85e16:	4413      	add	r3, r2
   85e18:	b29a      	uxth	r2, r3
   85e1a:	4b12      	ldr	r3, [pc, #72]	; (85e64 <udd_ctrl_in_sent+0x154>)
   85e1c:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   85e1e:	4b0b      	ldr	r3, [pc, #44]	; (85e4c <udd_ctrl_in_sent+0x13c>)
   85e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85e24:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85e28:	4b08      	ldr	r3, [pc, #32]	; (85e4c <udd_ctrl_in_sent+0x13c>)
   85e2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85e2e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85e32:	4b06      	ldr	r3, [pc, #24]	; (85e4c <udd_ctrl_in_sent+0x13c>)
   85e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85e38:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   85e3c:	6838      	ldr	r0, [r7, #0]
   85e3e:	4b04      	ldr	r3, [pc, #16]	; (85e50 <udd_ctrl_in_sent+0x140>)
   85e40:	4798      	blx	r3
}
   85e42:	3710      	adds	r7, #16
   85e44:	46bd      	mov	sp, r7
   85e46:	bd80      	pop	{r7, pc}
   85e48:	00084ba9 	.word	0x00084ba9
   85e4c:	400a4000 	.word	0x400a4000
   85e50:	00084c05 	.word	0x00084c05
   85e54:	20001345 	.word	0x20001345
   85e58:	00086179 	.word	0x00086179
   85e5c:	00085b75 	.word	0x00085b75
   85e60:	20001828 	.word	0x20001828
   85e64:	20001348 	.word	0x20001348
   85e68:	20001346 	.word	0x20001346
   85e6c:	2000137c 	.word	0x2000137c
   85e70:	00086135 	.word	0x00086135
   85e74:	20180000 	.word	0x20180000

00085e78 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   85e78:	b580      	push	{r7, lr}
   85e7a:	b084      	sub	sp, #16
   85e7c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   85e7e:	4b61      	ldr	r3, [pc, #388]	; (86004 <udd_ctrl_out_received+0x18c>)
   85e80:	781b      	ldrb	r3, [r3, #0]
   85e82:	2b01      	cmp	r3, #1
   85e84:	d00f      	beq.n	85ea6 <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   85e86:	4b5f      	ldr	r3, [pc, #380]	; (86004 <udd_ctrl_out_received+0x18c>)
   85e88:	781b      	ldrb	r3, [r3, #0]
   85e8a:	2b02      	cmp	r3, #2
   85e8c:	d003      	beq.n	85e96 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   85e8e:	4b5d      	ldr	r3, [pc, #372]	; (86004 <udd_ctrl_out_received+0x18c>)
   85e90:	781b      	ldrb	r3, [r3, #0]
   85e92:	2b04      	cmp	r3, #4
   85e94:	d102      	bne.n	85e9c <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   85e96:	4b5c      	ldr	r3, [pc, #368]	; (86008 <udd_ctrl_out_received+0x190>)
   85e98:	4798      	blx	r3
   85e9a:	e001      	b.n	85ea0 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   85e9c:	4b5b      	ldr	r3, [pc, #364]	; (8600c <udd_ctrl_out_received+0x194>)
   85e9e:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   85ea0:	4b5b      	ldr	r3, [pc, #364]	; (86010 <udd_ctrl_out_received+0x198>)
   85ea2:	4798      	blx	r3
		return;
   85ea4:	e0ab      	b.n	85ffe <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   85ea6:	4b5b      	ldr	r3, [pc, #364]	; (86014 <udd_ctrl_out_received+0x19c>)
   85ea8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85eac:	0d1b      	lsrs	r3, r3, #20
   85eae:	b29b      	uxth	r3, r3
   85eb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
   85eb4:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85eb6:	4b58      	ldr	r3, [pc, #352]	; (86018 <udd_ctrl_out_received+0x1a0>)
   85eb8:	899b      	ldrh	r3, [r3, #12]
   85eba:	461a      	mov	r2, r3
   85ebc:	4b57      	ldr	r3, [pc, #348]	; (8601c <udd_ctrl_out_received+0x1a4>)
   85ebe:	881b      	ldrh	r3, [r3, #0]
   85ec0:	4619      	mov	r1, r3
   85ec2:	89bb      	ldrh	r3, [r7, #12]
   85ec4:	440b      	add	r3, r1
   85ec6:	429a      	cmp	r2, r3
   85ec8:	da05      	bge.n	85ed6 <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85eca:	4b53      	ldr	r3, [pc, #332]	; (86018 <udd_ctrl_out_received+0x1a0>)
   85ecc:	899a      	ldrh	r2, [r3, #12]
   85ece:	4b53      	ldr	r3, [pc, #332]	; (8601c <udd_ctrl_out_received+0x1a4>)
   85ed0:	881b      	ldrh	r3, [r3, #0]
   85ed2:	1ad3      	subs	r3, r2, r3
   85ed4:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85ed6:	4b52      	ldr	r3, [pc, #328]	; (86020 <udd_ctrl_out_received+0x1a8>)
   85ed8:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85eda:	4b4f      	ldr	r3, [pc, #316]	; (86018 <udd_ctrl_out_received+0x1a0>)
   85edc:	689b      	ldr	r3, [r3, #8]
   85ede:	4a4f      	ldr	r2, [pc, #316]	; (8601c <udd_ctrl_out_received+0x1a4>)
   85ee0:	8812      	ldrh	r2, [r2, #0]
   85ee2:	4413      	add	r3, r2
   85ee4:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   85ee6:	2300      	movs	r3, #0
   85ee8:	73fb      	strb	r3, [r7, #15]
   85eea:	e00a      	b.n	85f02 <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   85eec:	68ba      	ldr	r2, [r7, #8]
   85eee:	1c53      	adds	r3, r2, #1
   85ef0:	60bb      	str	r3, [r7, #8]
   85ef2:	687b      	ldr	r3, [r7, #4]
   85ef4:	1c59      	adds	r1, r3, #1
   85ef6:	6079      	str	r1, [r7, #4]
   85ef8:	7812      	ldrb	r2, [r2, #0]
   85efa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   85efc:	7bfb      	ldrb	r3, [r7, #15]
   85efe:	3301      	adds	r3, #1
   85f00:	73fb      	strb	r3, [r7, #15]
   85f02:	7bfb      	ldrb	r3, [r7, #15]
   85f04:	b29b      	uxth	r3, r3
   85f06:	89ba      	ldrh	r2, [r7, #12]
   85f08:	429a      	cmp	r2, r3
   85f0a:	d8ef      	bhi.n	85eec <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   85f0c:	4b43      	ldr	r3, [pc, #268]	; (8601c <udd_ctrl_out_received+0x1a4>)
   85f0e:	881a      	ldrh	r2, [r3, #0]
   85f10:	89bb      	ldrh	r3, [r7, #12]
   85f12:	4413      	add	r3, r2
   85f14:	b29a      	uxth	r2, r3
   85f16:	4b41      	ldr	r3, [pc, #260]	; (8601c <udd_ctrl_out_received+0x1a4>)
   85f18:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85f1a:	89bb      	ldrh	r3, [r7, #12]
   85f1c:	2b40      	cmp	r3, #64	; 0x40
   85f1e:	d10a      	bne.n	85f36 <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   85f20:	4b3d      	ldr	r3, [pc, #244]	; (86018 <udd_ctrl_out_received+0x1a0>)
   85f22:	88db      	ldrh	r3, [r3, #6]
   85f24:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   85f26:	4b3f      	ldr	r3, [pc, #252]	; (86024 <udd_ctrl_out_received+0x1ac>)
   85f28:	881b      	ldrh	r3, [r3, #0]
   85f2a:	4619      	mov	r1, r3
   85f2c:	4b3b      	ldr	r3, [pc, #236]	; (8601c <udd_ctrl_out_received+0x1a4>)
   85f2e:	881b      	ldrh	r3, [r3, #0]
   85f30:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   85f32:	429a      	cmp	r2, r3
   85f34:	dc20      	bgt.n	85f78 <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   85f36:	4b39      	ldr	r3, [pc, #228]	; (8601c <udd_ctrl_out_received+0x1a4>)
   85f38:	881a      	ldrh	r2, [r3, #0]
   85f3a:	4b37      	ldr	r3, [pc, #220]	; (86018 <udd_ctrl_out_received+0x1a0>)
   85f3c:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85f3e:	4b36      	ldr	r3, [pc, #216]	; (86018 <udd_ctrl_out_received+0x1a0>)
   85f40:	695b      	ldr	r3, [r3, #20]
   85f42:	2b00      	cmp	r3, #0
   85f44:	d010      	beq.n	85f68 <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   85f46:	4b34      	ldr	r3, [pc, #208]	; (86018 <udd_ctrl_out_received+0x1a0>)
   85f48:	695b      	ldr	r3, [r3, #20]
   85f4a:	4798      	blx	r3
   85f4c:	4603      	mov	r3, r0
   85f4e:	f083 0301 	eor.w	r3, r3, #1
   85f52:	b2db      	uxtb	r3, r3
   85f54:	2b00      	cmp	r3, #0
   85f56:	d007      	beq.n	85f68 <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   85f58:	4b2c      	ldr	r3, [pc, #176]	; (8600c <udd_ctrl_out_received+0x194>)
   85f5a:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   85f5c:	4b2d      	ldr	r3, [pc, #180]	; (86014 <udd_ctrl_out_received+0x19c>)
   85f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
   85f62:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   85f66:	e04a      	b.n	85ffe <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   85f68:	4b2a      	ldr	r3, [pc, #168]	; (86014 <udd_ctrl_out_received+0x19c>)
   85f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
   85f6e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   85f72:	4b2d      	ldr	r3, [pc, #180]	; (86028 <udd_ctrl_out_received+0x1b0>)
   85f74:	4798      	blx	r3
		return;
   85f76:	e042      	b.n	85ffe <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   85f78:	4b27      	ldr	r3, [pc, #156]	; (86018 <udd_ctrl_out_received+0x1a0>)
   85f7a:	899a      	ldrh	r2, [r3, #12]
   85f7c:	4b27      	ldr	r3, [pc, #156]	; (8601c <udd_ctrl_out_received+0x1a4>)
   85f7e:	881b      	ldrh	r3, [r3, #0]
   85f80:	429a      	cmp	r2, r3
   85f82:	d127      	bne.n	85fd4 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   85f84:	4b24      	ldr	r3, [pc, #144]	; (86018 <udd_ctrl_out_received+0x1a0>)
   85f86:	695b      	ldr	r3, [r3, #20]
   85f88:	2b00      	cmp	r3, #0
   85f8a:	d107      	bne.n	85f9c <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   85f8c:	4b1f      	ldr	r3, [pc, #124]	; (8600c <udd_ctrl_out_received+0x194>)
   85f8e:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   85f90:	4b20      	ldr	r3, [pc, #128]	; (86014 <udd_ctrl_out_received+0x19c>)
   85f92:	f44f 7200 	mov.w	r2, #512	; 0x200
   85f96:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85f9a:	e030      	b.n	85ffe <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   85f9c:	4b1e      	ldr	r3, [pc, #120]	; (86018 <udd_ctrl_out_received+0x1a0>)
   85f9e:	695b      	ldr	r3, [r3, #20]
   85fa0:	4798      	blx	r3
   85fa2:	4603      	mov	r3, r0
   85fa4:	f083 0301 	eor.w	r3, r3, #1
   85fa8:	b2db      	uxtb	r3, r3
   85faa:	2b00      	cmp	r3, #0
   85fac:	d007      	beq.n	85fbe <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   85fae:	4b17      	ldr	r3, [pc, #92]	; (8600c <udd_ctrl_out_received+0x194>)
   85fb0:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   85fb2:	4b18      	ldr	r3, [pc, #96]	; (86014 <udd_ctrl_out_received+0x19c>)
   85fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
   85fb8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85fbc:	e01f      	b.n	85ffe <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85fbe:	4b19      	ldr	r3, [pc, #100]	; (86024 <udd_ctrl_out_received+0x1ac>)
   85fc0:	881a      	ldrh	r2, [r3, #0]
   85fc2:	4b16      	ldr	r3, [pc, #88]	; (8601c <udd_ctrl_out_received+0x1a4>)
   85fc4:	881b      	ldrh	r3, [r3, #0]
   85fc6:	4413      	add	r3, r2
   85fc8:	b29a      	uxth	r2, r3
   85fca:	4b16      	ldr	r3, [pc, #88]	; (86024 <udd_ctrl_out_received+0x1ac>)
   85fcc:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   85fce:	4b13      	ldr	r3, [pc, #76]	; (8601c <udd_ctrl_out_received+0x1a4>)
   85fd0:	2200      	movs	r2, #0
   85fd2:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   85fd4:	4b0f      	ldr	r3, [pc, #60]	; (86014 <udd_ctrl_out_received+0x19c>)
   85fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
   85fda:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   85fde:	4b0d      	ldr	r3, [pc, #52]	; (86014 <udd_ctrl_out_received+0x19c>)
   85fe0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85fe4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   85fe8:	4b10      	ldr	r3, [pc, #64]	; (8602c <udd_ctrl_out_received+0x1b4>)
   85fea:	4798      	blx	r3
   85fec:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   85fee:	4b09      	ldr	r3, [pc, #36]	; (86014 <udd_ctrl_out_received+0x19c>)
   85ff0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85ff4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85ff8:	6838      	ldr	r0, [r7, #0]
   85ffa:	4b0d      	ldr	r3, [pc, #52]	; (86030 <udd_ctrl_out_received+0x1b8>)
   85ffc:	4798      	blx	r3
}
   85ffe:	3710      	adds	r7, #16
   86000:	46bd      	mov	sp, r7
   86002:	bd80      	pop	{r7, pc}
   86004:	20001345 	.word	0x20001345
   86008:	00086179 	.word	0x00086179
   8600c:	000860ad 	.word	0x000860ad
   86010:	00085b75 	.word	0x00085b75
   86014:	400a4000 	.word	0x400a4000
   86018:	20001828 	.word	0x20001828
   8601c:	20001348 	.word	0x20001348
   86020:	20180000 	.word	0x20180000
   86024:	20001346 	.word	0x20001346
   86028:	000860d1 	.word	0x000860d1
   8602c:	00084ba9 	.word	0x00084ba9
   86030:	00084c05 	.word	0x00084c05

00086034 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   86034:	b580      	push	{r7, lr}
   86036:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   86038:	4b0c      	ldr	r3, [pc, #48]	; (8606c <udd_ctrl_underflow+0x38>)
   8603a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8603e:	f403 7300 	and.w	r3, r3, #512	; 0x200
   86042:	2b00      	cmp	r3, #0
   86044:	d10f      	bne.n	86066 <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   86046:	4b0a      	ldr	r3, [pc, #40]	; (86070 <udd_ctrl_underflow+0x3c>)
   86048:	781b      	ldrb	r3, [r3, #0]
   8604a:	2b01      	cmp	r3, #1
   8604c:	d102      	bne.n	86054 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   8604e:	4b09      	ldr	r3, [pc, #36]	; (86074 <udd_ctrl_underflow+0x40>)
   86050:	4798      	blx	r3
   86052:	e009      	b.n	86068 <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   86054:	4b06      	ldr	r3, [pc, #24]	; (86070 <udd_ctrl_underflow+0x3c>)
   86056:	781b      	ldrb	r3, [r3, #0]
   86058:	2b04      	cmp	r3, #4
   8605a:	d105      	bne.n	86068 <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   8605c:	4b03      	ldr	r3, [pc, #12]	; (8606c <udd_ctrl_underflow+0x38>)
   8605e:	2220      	movs	r2, #32
   86060:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   86064:	e000      	b.n	86068 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   86066:	bf00      	nop
	}
}
   86068:	bd80      	pop	{r7, pc}
   8606a:	bf00      	nop
   8606c:	400a4000 	.word	0x400a4000
   86070:	20001345 	.word	0x20001345
   86074:	000860d1 	.word	0x000860d1

00086078 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   86078:	b480      	push	{r7}
   8607a:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   8607c:	4b09      	ldr	r3, [pc, #36]	; (860a4 <udd_ctrl_overflow+0x2c>)
   8607e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   86082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   86086:	2b00      	cmp	r3, #0
   86088:	d108      	bne.n	8609c <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8608a:	4b07      	ldr	r3, [pc, #28]	; (860a8 <udd_ctrl_overflow+0x30>)
   8608c:	781b      	ldrb	r3, [r3, #0]
   8608e:	2b03      	cmp	r3, #3
   86090:	d105      	bne.n	8609e <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   86092:	4b04      	ldr	r3, [pc, #16]	; (860a4 <udd_ctrl_overflow+0x2c>)
   86094:	2220      	movs	r2, #32
   86096:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   8609a:	e000      	b.n	8609e <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   8609c:	bf00      	nop
	}
}
   8609e:	46bd      	mov	sp, r7
   860a0:	bc80      	pop	{r7}
   860a2:	4770      	bx	lr
   860a4:	400a4000 	.word	0x400a4000
   860a8:	20001345 	.word	0x20001345

000860ac <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   860ac:	b480      	push	{r7}
   860ae:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   860b0:	4b05      	ldr	r3, [pc, #20]	; (860c8 <udd_ctrl_stall_data+0x1c>)
   860b2:	2205      	movs	r2, #5
   860b4:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   860b6:	4b05      	ldr	r3, [pc, #20]	; (860cc <udd_ctrl_stall_data+0x20>)
   860b8:	2220      	movs	r2, #32
   860ba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   860be:	bf00      	nop
   860c0:	46bd      	mov	sp, r7
   860c2:	bc80      	pop	{r7}
   860c4:	4770      	bx	lr
   860c6:	bf00      	nop
   860c8:	20001345 	.word	0x20001345
   860cc:	400a4000 	.word	0x400a4000

000860d0 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   860d0:	b580      	push	{r7, lr}
   860d2:	b082      	sub	sp, #8
   860d4:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   860d6:	4b13      	ldr	r3, [pc, #76]	; (86124 <udd_ctrl_send_zlp_in+0x54>)
   860d8:	2203      	movs	r2, #3
   860da:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   860dc:	4b12      	ldr	r3, [pc, #72]	; (86128 <udd_ctrl_send_zlp_in+0x58>)
   860de:	4798      	blx	r3
   860e0:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   860e2:	4b12      	ldr	r3, [pc, #72]	; (8612c <udd_ctrl_send_zlp_in+0x5c>)
   860e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   860e8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   860ec:	4b0f      	ldr	r3, [pc, #60]	; (8612c <udd_ctrl_send_zlp_in+0x5c>)
   860ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   860f2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   860f6:	4b0d      	ldr	r3, [pc, #52]	; (8612c <udd_ctrl_send_zlp_in+0x5c>)
   860f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   860fc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   86100:	4b0a      	ldr	r3, [pc, #40]	; (8612c <udd_ctrl_send_zlp_in+0x5c>)
   86102:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   86106:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   8610a:	4b08      	ldr	r3, [pc, #32]	; (8612c <udd_ctrl_send_zlp_in+0x5c>)
   8610c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   86110:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   86114:	6878      	ldr	r0, [r7, #4]
   86116:	4b06      	ldr	r3, [pc, #24]	; (86130 <udd_ctrl_send_zlp_in+0x60>)
   86118:	4798      	blx	r3
}
   8611a:	bf00      	nop
   8611c:	3708      	adds	r7, #8
   8611e:	46bd      	mov	sp, r7
   86120:	bd80      	pop	{r7, pc}
   86122:	bf00      	nop
   86124:	20001345 	.word	0x20001345
   86128:	00084ba9 	.word	0x00084ba9
   8612c:	400a4000 	.word	0x400a4000
   86130:	00084c05 	.word	0x00084c05

00086134 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   86134:	b580      	push	{r7, lr}
   86136:	b082      	sub	sp, #8
   86138:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8613a:	4b0b      	ldr	r3, [pc, #44]	; (86168 <udd_ctrl_send_zlp_out+0x34>)
   8613c:	2204      	movs	r2, #4
   8613e:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   86140:	4b0a      	ldr	r3, [pc, #40]	; (8616c <udd_ctrl_send_zlp_out+0x38>)
   86142:	4798      	blx	r3
   86144:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   86146:	4b0a      	ldr	r3, [pc, #40]	; (86170 <udd_ctrl_send_zlp_out+0x3c>)
   86148:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8614c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   86150:	4b07      	ldr	r3, [pc, #28]	; (86170 <udd_ctrl_send_zlp_out+0x3c>)
   86152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   86156:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   8615a:	6878      	ldr	r0, [r7, #4]
   8615c:	4b05      	ldr	r3, [pc, #20]	; (86174 <udd_ctrl_send_zlp_out+0x40>)
   8615e:	4798      	blx	r3
}
   86160:	bf00      	nop
   86162:	3708      	adds	r7, #8
   86164:	46bd      	mov	sp, r7
   86166:	bd80      	pop	{r7, pc}
   86168:	20001345 	.word	0x20001345
   8616c:	00084ba9 	.word	0x00084ba9
   86170:	400a4000 	.word	0x400a4000
   86174:	00084c05 	.word	0x00084c05

00086178 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   86178:	b580      	push	{r7, lr}
   8617a:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   8617c:	4b04      	ldr	r3, [pc, #16]	; (86190 <udd_ctrl_endofrequest+0x18>)
   8617e:	691b      	ldr	r3, [r3, #16]
   86180:	2b00      	cmp	r3, #0
   86182:	d002      	beq.n	8618a <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   86184:	4b02      	ldr	r3, [pc, #8]	; (86190 <udd_ctrl_endofrequest+0x18>)
   86186:	691b      	ldr	r3, [r3, #16]
   86188:	4798      	blx	r3
	}
}
   8618a:	bf00      	nop
   8618c:	bd80      	pop	{r7, pc}
   8618e:	bf00      	nop
   86190:	20001828 	.word	0x20001828

00086194 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   86194:	b580      	push	{r7, lr}
   86196:	b082      	sub	sp, #8
   86198:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   8619a:	4b31      	ldr	r3, [pc, #196]	; (86260 <udd_ctrl_interrupt+0xcc>)
   8619c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   861a0:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   861a2:	4b2f      	ldr	r3, [pc, #188]	; (86260 <udd_ctrl_interrupt+0xcc>)
   861a4:	695b      	ldr	r3, [r3, #20]
   861a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
   861aa:	2b00      	cmp	r3, #0
   861ac:	d101      	bne.n	861b2 <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   861ae:	2300      	movs	r3, #0
   861b0:	e052      	b.n	86258 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   861b2:	4b2b      	ldr	r3, [pc, #172]	; (86260 <udd_ctrl_interrupt+0xcc>)
   861b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   861b8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   861bc:	4b28      	ldr	r3, [pc, #160]	; (86260 <udd_ctrl_interrupt+0xcc>)
   861be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   861c2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   861c6:	687b      	ldr	r3, [r7, #4]
   861c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   861cc:	2b00      	cmp	r3, #0
   861ce:	d003      	beq.n	861d8 <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   861d0:	4b24      	ldr	r3, [pc, #144]	; (86264 <udd_ctrl_interrupt+0xd0>)
   861d2:	4798      	blx	r3
		return true;
   861d4:	2301      	movs	r3, #1
   861d6:	e03f      	b.n	86258 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   861d8:	687b      	ldr	r3, [r7, #4]
   861da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   861de:	2b00      	cmp	r3, #0
   861e0:	d00a      	beq.n	861f8 <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   861e2:	4b1f      	ldr	r3, [pc, #124]	; (86260 <udd_ctrl_interrupt+0xcc>)
   861e4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   861e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   861ec:	2b00      	cmp	r3, #0
   861ee:	d003      	beq.n	861f8 <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   861f0:	4b1d      	ldr	r3, [pc, #116]	; (86268 <udd_ctrl_interrupt+0xd4>)
   861f2:	4798      	blx	r3
		return true;
   861f4:	2301      	movs	r3, #1
   861f6:	e02f      	b.n	86258 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   861f8:	687b      	ldr	r3, [r7, #4]
   861fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
   861fe:	2b00      	cmp	r3, #0
   86200:	d003      	beq.n	8620a <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   86202:	4b1a      	ldr	r3, [pc, #104]	; (8626c <udd_ctrl_interrupt+0xd8>)
   86204:	4798      	blx	r3
		return true;
   86206:	2301      	movs	r3, #1
   86208:	e026      	b.n	86258 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   8620a:	687b      	ldr	r3, [r7, #4]
   8620c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   86210:	2b00      	cmp	r3, #0
   86212:	d004      	beq.n	8621e <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   86214:	4b12      	ldr	r3, [pc, #72]	; (86260 <udd_ctrl_interrupt+0xcc>)
   86216:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8621a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   8621e:	687b      	ldr	r3, [r7, #4]
   86220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   86224:	2b00      	cmp	r3, #0
   86226:	d008      	beq.n	8623a <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   86228:	4b0d      	ldr	r3, [pc, #52]	; (86260 <udd_ctrl_interrupt+0xcc>)
   8622a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8622e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   86232:	4b0f      	ldr	r3, [pc, #60]	; (86270 <udd_ctrl_interrupt+0xdc>)
   86234:	4798      	blx	r3
		return true;
   86236:	2301      	movs	r3, #1
   86238:	e00e      	b.n	86258 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   8623a:	687b      	ldr	r3, [r7, #4]
   8623c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   86240:	2b00      	cmp	r3, #0
   86242:	d008      	beq.n	86256 <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   86244:	4b06      	ldr	r3, [pc, #24]	; (86260 <udd_ctrl_interrupt+0xcc>)
   86246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8624a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   8624e:	4b09      	ldr	r3, [pc, #36]	; (86274 <udd_ctrl_interrupt+0xe0>)
   86250:	4798      	blx	r3
		return true;
   86252:	2301      	movs	r3, #1
   86254:	e000      	b.n	86258 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   86256:	2300      	movs	r3, #0
}
   86258:	4618      	mov	r0, r3
   8625a:	3708      	adds	r7, #8
   8625c:	46bd      	mov	sp, r7
   8625e:	bd80      	pop	{r7, pc}
   86260:	400a4000 	.word	0x400a4000
   86264:	00085bd1 	.word	0x00085bd1
   86268:	00085d11 	.word	0x00085d11
   8626c:	00085e79 	.word	0x00085e79
   86270:	00086079 	.word	0x00086079
   86274:	00086035 	.word	0x00086035

00086278 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   86278:	b480      	push	{r7}
   8627a:	b083      	sub	sp, #12
   8627c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8627e:	2300      	movs	r3, #0
   86280:	71fb      	strb	r3, [r7, #7]
   86282:	e01c      	b.n	862be <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   86284:	79fa      	ldrb	r2, [r7, #7]
   86286:	4912      	ldr	r1, [pc, #72]	; (862d0 <udd_ep_job_table_reset+0x58>)
   86288:	4613      	mov	r3, r2
   8628a:	005b      	lsls	r3, r3, #1
   8628c:	4413      	add	r3, r2
   8628e:	00db      	lsls	r3, r3, #3
   86290:	440b      	add	r3, r1
   86292:	f103 0210 	add.w	r2, r3, #16
   86296:	7913      	ldrb	r3, [r2, #4]
   86298:	f36f 0300 	bfc	r3, #0, #1
   8629c:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   8629e:	79fa      	ldrb	r2, [r7, #7]
   862a0:	490b      	ldr	r1, [pc, #44]	; (862d0 <udd_ep_job_table_reset+0x58>)
   862a2:	4613      	mov	r3, r2
   862a4:	005b      	lsls	r3, r3, #1
   862a6:	4413      	add	r3, r2
   862a8:	00db      	lsls	r3, r3, #3
   862aa:	440b      	add	r3, r1
   862ac:	f103 0210 	add.w	r2, r3, #16
   862b0:	7913      	ldrb	r3, [r2, #4]
   862b2:	f36f 0382 	bfc	r3, #2, #1
   862b6:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   862b8:	79fb      	ldrb	r3, [r7, #7]
   862ba:	3301      	adds	r3, #1
   862bc:	71fb      	strb	r3, [r7, #7]
   862be:	79fb      	ldrb	r3, [r7, #7]
   862c0:	2b01      	cmp	r3, #1
   862c2:	d9df      	bls.n	86284 <udd_ep_job_table_reset+0xc>
	}
}
   862c4:	bf00      	nop
   862c6:	bf00      	nop
   862c8:	370c      	adds	r7, #12
   862ca:	46bd      	mov	sp, r7
   862cc:	bc80      	pop	{r7}
   862ce:	4770      	bx	lr
   862d0:	2000134c 	.word	0x2000134c

000862d4 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   862d4:	b580      	push	{r7, lr}
   862d6:	b082      	sub	sp, #8
   862d8:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   862da:	2300      	movs	r3, #0
   862dc:	71fb      	strb	r3, [r7, #7]
   862de:	e010      	b.n	86302 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   862e0:	79fa      	ldrb	r2, [r7, #7]
   862e2:	4613      	mov	r3, r2
   862e4:	005b      	lsls	r3, r3, #1
   862e6:	4413      	add	r3, r2
   862e8:	00db      	lsls	r3, r3, #3
   862ea:	4a0a      	ldr	r2, [pc, #40]	; (86314 <udd_ep_job_table_kill+0x40>)
   862ec:	1898      	adds	r0, r3, r2
   862ee:	79fb      	ldrb	r3, [r7, #7]
   862f0:	3301      	adds	r3, #1
   862f2:	b2db      	uxtb	r3, r3
   862f4:	461a      	mov	r2, r3
   862f6:	2101      	movs	r1, #1
   862f8:	4b07      	ldr	r3, [pc, #28]	; (86318 <udd_ep_job_table_kill+0x44>)
   862fa:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   862fc:	79fb      	ldrb	r3, [r7, #7]
   862fe:	3301      	adds	r3, #1
   86300:	71fb      	strb	r3, [r7, #7]
   86302:	79fb      	ldrb	r3, [r7, #7]
   86304:	2b01      	cmp	r3, #1
   86306:	d9eb      	bls.n	862e0 <udd_ep_job_table_kill+0xc>
	}
}
   86308:	bf00      	nop
   8630a:	bf00      	nop
   8630c:	3708      	adds	r7, #8
   8630e:	46bd      	mov	sp, r7
   86310:	bd80      	pop	{r7, pc}
   86312:	bf00      	nop
   86314:	2000134c 	.word	0x2000134c
   86318:	00086359 	.word	0x00086359

0008631c <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   8631c:	b580      	push	{r7, lr}
   8631e:	b082      	sub	sp, #8
   86320:	af00      	add	r7, sp, #0
   86322:	4603      	mov	r3, r0
   86324:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   86326:	79fb      	ldrb	r3, [r7, #7]
   86328:	f003 030f 	and.w	r3, r3, #15
   8632c:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8632e:	79fb      	ldrb	r3, [r7, #7]
   86330:	1e5a      	subs	r2, r3, #1
   86332:	4613      	mov	r3, r2
   86334:	005b      	lsls	r3, r3, #1
   86336:	4413      	add	r3, r2
   86338:	00db      	lsls	r3, r3, #3
   8633a:	4a05      	ldr	r2, [pc, #20]	; (86350 <udd_ep_abort_job+0x34>)
   8633c:	4413      	add	r3, r2
   8633e:	79fa      	ldrb	r2, [r7, #7]
   86340:	2101      	movs	r1, #1
   86342:	4618      	mov	r0, r3
   86344:	4b03      	ldr	r3, [pc, #12]	; (86354 <udd_ep_abort_job+0x38>)
   86346:	4798      	blx	r3
}
   86348:	bf00      	nop
   8634a:	3708      	adds	r7, #8
   8634c:	46bd      	mov	sp, r7
   8634e:	bd80      	pop	{r7, pc}
   86350:	2000134c 	.word	0x2000134c
   86354:	00086359 	.word	0x00086359

00086358 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   86358:	b580      	push	{r7, lr}
   8635a:	b082      	sub	sp, #8
   8635c:	af00      	add	r7, sp, #0
   8635e:	6078      	str	r0, [r7, #4]
   86360:	460b      	mov	r3, r1
   86362:	70fb      	strb	r3, [r7, #3]
   86364:	4613      	mov	r3, r2
   86366:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   86368:	687b      	ldr	r3, [r7, #4]
   8636a:	7d1b      	ldrb	r3, [r3, #20]
   8636c:	f003 0301 	and.w	r3, r3, #1
   86370:	b2db      	uxtb	r3, r3
   86372:	2b00      	cmp	r3, #0
   86374:	d01f      	beq.n	863b6 <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   86376:	687a      	ldr	r2, [r7, #4]
   86378:	7d13      	ldrb	r3, [r2, #20]
   8637a:	f36f 0300 	bfc	r3, #0, #1
   8637e:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   86380:	687b      	ldr	r3, [r7, #4]
   86382:	681b      	ldr	r3, [r3, #0]
   86384:	2b00      	cmp	r3, #0
   86386:	d018      	beq.n	863ba <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   86388:	4a0e      	ldr	r2, [pc, #56]	; (863c4 <udd_ep_finish_job+0x6c>)
   8638a:	78bb      	ldrb	r3, [r7, #2]
   8638c:	3308      	adds	r3, #8
   8638e:	015b      	lsls	r3, r3, #5
   86390:	4413      	add	r3, r2
   86392:	681b      	ldr	r3, [r3, #0]
   86394:	f003 0308 	and.w	r3, r3, #8
   86398:	2b00      	cmp	r3, #0
   8639a:	d003      	beq.n	863a4 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   8639c:	78bb      	ldrb	r3, [r7, #2]
   8639e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   863a2:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   863a4:	687b      	ldr	r3, [r7, #4]
   863a6:	681b      	ldr	r3, [r3, #0]
   863a8:	78fa      	ldrb	r2, [r7, #3]
   863aa:	4610      	mov	r0, r2
   863ac:	687a      	ldr	r2, [r7, #4]
   863ae:	6891      	ldr	r1, [r2, #8]
   863b0:	78ba      	ldrb	r2, [r7, #2]
   863b2:	4798      	blx	r3
   863b4:	e002      	b.n	863bc <udd_ep_finish_job+0x64>
		return; // No on-going job
   863b6:	bf00      	nop
   863b8:	e000      	b.n	863bc <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   863ba:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   863bc:	3708      	adds	r7, #8
   863be:	46bd      	mov	sp, r7
   863c0:	bd80      	pop	{r7, pc}
   863c2:	bf00      	nop
   863c4:	400a4000 	.word	0x400a4000

000863c8 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   863c8:	b580      	push	{r7, lr}
   863ca:	b086      	sub	sp, #24
   863cc:	af00      	add	r7, sp, #0
   863ce:	4603      	mov	r3, r0
   863d0:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   863d2:	2300      	movs	r3, #0
   863d4:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   863d6:	79fb      	ldrb	r3, [r7, #7]
   863d8:	1e5a      	subs	r2, r3, #1
   863da:	4613      	mov	r3, r2
   863dc:	005b      	lsls	r3, r3, #1
   863de:	4413      	add	r3, r2
   863e0:	00db      	lsls	r3, r3, #3
   863e2:	4a6d      	ldr	r2, [pc, #436]	; (86598 <udd_ep_trans_done+0x1d0>)
   863e4:	4413      	add	r3, r2
   863e6:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   863e8:	68fb      	ldr	r3, [r7, #12]
   863ea:	7d1b      	ldrb	r3, [r3, #20]
   863ec:	f003 0301 	and.w	r3, r3, #1
   863f0:	b2db      	uxtb	r3, r3
   863f2:	2b00      	cmp	r3, #0
   863f4:	f000 80cc 	beq.w	86590 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   863f8:	68fb      	ldr	r3, [r7, #12]
   863fa:	68da      	ldr	r2, [r3, #12]
   863fc:	68fb      	ldr	r3, [r7, #12]
   863fe:	689b      	ldr	r3, [r3, #8]
   86400:	429a      	cmp	r2, r3
   86402:	f000 8099 	beq.w	86538 <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   86406:	68fb      	ldr	r3, [r7, #12]
   86408:	689a      	ldr	r2, [r3, #8]
   8640a:	68fb      	ldr	r3, [r7, #12]
   8640c:	68db      	ldr	r3, [r3, #12]
   8640e:	1ad3      	subs	r3, r2, r3
   86410:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   86412:	693b      	ldr	r3, [r7, #16]
   86414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   86418:	d905      	bls.n	86426 <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   8641a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   8641e:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   86420:	2300      	movs	r3, #0
   86422:	617b      	str	r3, [r7, #20]
   86424:	e002      	b.n	8642c <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   86426:	693b      	ldr	r3, [r7, #16]
   86428:	041b      	lsls	r3, r3, #16
   8642a:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   8642c:	4a5b      	ldr	r2, [pc, #364]	; (8659c <udd_ep_trans_done+0x1d4>)
   8642e:	79fb      	ldrb	r3, [r7, #7]
   86430:	3308      	adds	r3, #8
   86432:	015b      	lsls	r3, r3, #5
   86434:	4413      	add	r3, r2
   86436:	681b      	ldr	r3, [r3, #0]
   86438:	f003 0308 	and.w	r3, r3, #8
   8643c:	2b00      	cmp	r3, #0
   8643e:	d01d      	beq.n	8647c <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   86440:	4a56      	ldr	r2, [pc, #344]	; (8659c <udd_ep_trans_done+0x1d4>)
   86442:	79fb      	ldrb	r3, [r7, #7]
   86444:	3308      	adds	r3, #8
   86446:	015b      	lsls	r3, r3, #5
   86448:	4413      	add	r3, r2
   8644a:	681b      	ldr	r3, [r3, #0]
   8644c:	f003 0307 	and.w	r3, r3, #7
   86450:	2208      	movs	r2, #8
   86452:	fa02 f303 	lsl.w	r3, r2, r3
   86456:	461a      	mov	r2, r3
   86458:	693b      	ldr	r3, [r7, #16]
   8645a:	fbb3 f1f2 	udiv	r1, r3, r2
   8645e:	fb02 f201 	mul.w	r2, r2, r1
   86462:	1a9b      	subs	r3, r3, r2
   86464:	2b00      	cmp	r3, #0
   86466:	d027      	beq.n	864b8 <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   86468:	697b      	ldr	r3, [r7, #20]
   8646a:	f043 0308 	orr.w	r3, r3, #8
   8646e:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   86470:	68fa      	ldr	r2, [r7, #12]
   86472:	7d13      	ldrb	r3, [r2, #20]
   86474:	f36f 0341 	bfc	r3, #1, #1
   86478:	7513      	strb	r3, [r2, #20]
   8647a:	e01d      	b.n	864b8 <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   8647c:	4a47      	ldr	r2, [pc, #284]	; (8659c <udd_ep_trans_done+0x1d4>)
   8647e:	79fb      	ldrb	r3, [r7, #7]
   86480:	3308      	adds	r3, #8
   86482:	015b      	lsls	r3, r3, #5
   86484:	4413      	add	r3, r2
   86486:	681b      	ldr	r3, [r3, #0]
   86488:	091b      	lsrs	r3, r3, #4
   8648a:	f003 0303 	and.w	r3, r3, #3
   8648e:	2b01      	cmp	r3, #1
   86490:	d10e      	bne.n	864b0 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   86492:	4a42      	ldr	r2, [pc, #264]	; (8659c <udd_ep_trans_done+0x1d4>)
   86494:	79fb      	ldrb	r3, [r7, #7]
   86496:	3308      	adds	r3, #8
   86498:	015b      	lsls	r3, r3, #5
   8649a:	4413      	add	r3, r2
   8649c:	681b      	ldr	r3, [r3, #0]
   8649e:	f003 0307 	and.w	r3, r3, #7
   864a2:	2208      	movs	r2, #8
   864a4:	fa02 f303 	lsl.w	r3, r2, r3
   864a8:	461a      	mov	r2, r3
   864aa:	693b      	ldr	r3, [r7, #16]
   864ac:	4293      	cmp	r3, r2
   864ae:	d803      	bhi.n	864b8 <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   864b0:	697b      	ldr	r3, [r7, #20]
   864b2:	f043 0314 	orr.w	r3, r3, #20
   864b6:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   864b8:	68fb      	ldr	r3, [r7, #12]
   864ba:	685a      	ldr	r2, [r3, #4]
   864bc:	68fb      	ldr	r3, [r7, #12]
   864be:	68db      	ldr	r3, [r3, #12]
   864c0:	18d1      	adds	r1, r2, r3
   864c2:	79fb      	ldrb	r3, [r7, #7]
   864c4:	011a      	lsls	r2, r3, #4
   864c6:	4b36      	ldr	r3, [pc, #216]	; (865a0 <udd_ep_trans_done+0x1d8>)
   864c8:	4413      	add	r3, r2
   864ca:	460a      	mov	r2, r1
   864cc:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   864ce:	697b      	ldr	r3, [r7, #20]
   864d0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   864d4:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   864d6:	4b33      	ldr	r3, [pc, #204]	; (865a4 <udd_ep_trans_done+0x1dc>)
   864d8:	4798      	blx	r3
   864da:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   864dc:	79fb      	ldrb	r3, [r7, #7]
   864de:	011a      	lsls	r2, r3, #4
   864e0:	4b2f      	ldr	r3, [pc, #188]	; (865a0 <udd_ep_trans_done+0x1d8>)
   864e2:	4413      	add	r3, r2
   864e4:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   864e6:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   864ea:	2b00      	cmp	r3, #0
   864ec:	d11d      	bne.n	8652a <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   864ee:	79fb      	ldrb	r3, [r7, #7]
   864f0:	011a      	lsls	r2, r3, #4
   864f2:	4b2b      	ldr	r3, [pc, #172]	; (865a0 <udd_ep_trans_done+0x1d8>)
   864f4:	4413      	add	r3, r2
   864f6:	697a      	ldr	r2, [r7, #20]
   864f8:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   864fa:	68fb      	ldr	r3, [r7, #12]
   864fc:	68da      	ldr	r2, [r3, #12]
   864fe:	693b      	ldr	r3, [r7, #16]
   86500:	441a      	add	r2, r3
   86502:	68fb      	ldr	r3, [r7, #12]
   86504:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   86506:	68fb      	ldr	r3, [r7, #12]
   86508:	693a      	ldr	r2, [r7, #16]
   8650a:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   8650c:	4b23      	ldr	r3, [pc, #140]	; (8659c <udd_ep_trans_done+0x1d4>)
   8650e:	691a      	ldr	r2, [r3, #16]
   86510:	79fb      	ldrb	r3, [r7, #7]
   86512:	3b01      	subs	r3, #1
   86514:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   86518:	fa01 f303 	lsl.w	r3, r1, r3
   8651c:	491f      	ldr	r1, [pc, #124]	; (8659c <udd_ep_trans_done+0x1d4>)
   8651e:	4313      	orrs	r3, r2
   86520:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   86522:	68b8      	ldr	r0, [r7, #8]
   86524:	4b20      	ldr	r3, [pc, #128]	; (865a8 <udd_ep_trans_done+0x1e0>)
   86526:	4798      	blx	r3
			return;
   86528:	e033      	b.n	86592 <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   8652a:	68b8      	ldr	r0, [r7, #8]
   8652c:	4b1e      	ldr	r3, [pc, #120]	; (865a8 <udd_ep_trans_done+0x1e0>)
   8652e:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   86530:	68fb      	ldr	r3, [r7, #12]
   86532:	68da      	ldr	r2, [r3, #12]
   86534:	68fb      	ldr	r3, [r7, #12]
   86536:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   86538:	4a18      	ldr	r2, [pc, #96]	; (8659c <udd_ep_trans_done+0x1d4>)
   8653a:	79fb      	ldrb	r3, [r7, #7]
   8653c:	3308      	adds	r3, #8
   8653e:	015b      	lsls	r3, r3, #5
   86540:	4413      	add	r3, r2
   86542:	681b      	ldr	r3, [r3, #0]
   86544:	f003 0308 	and.w	r3, r3, #8
   86548:	2b00      	cmp	r3, #0
   8654a:	d01a      	beq.n	86582 <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   8654c:	68fb      	ldr	r3, [r7, #12]
   8654e:	7d1b      	ldrb	r3, [r3, #20]
   86550:	f003 0302 	and.w	r3, r3, #2
   86554:	b2db      	uxtb	r3, r3
   86556:	2b00      	cmp	r3, #0
   86558:	d013      	beq.n	86582 <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   8655a:	4a10      	ldr	r2, [pc, #64]	; (8659c <udd_ep_trans_done+0x1d4>)
   8655c:	79fb      	ldrb	r3, [r7, #7]
   8655e:	3308      	adds	r3, #8
   86560:	015b      	lsls	r3, r3, #5
   86562:	4413      	add	r3, r2
   86564:	3304      	adds	r3, #4
   86566:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8656a:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   8656c:	4b0b      	ldr	r3, [pc, #44]	; (8659c <udd_ep_trans_done+0x1d4>)
   8656e:	691a      	ldr	r2, [r3, #16]
   86570:	79fb      	ldrb	r3, [r7, #7]
   86572:	f44f 7180 	mov.w	r1, #256	; 0x100
   86576:	fa01 f303 	lsl.w	r3, r1, r3
   8657a:	4908      	ldr	r1, [pc, #32]	; (8659c <udd_ep_trans_done+0x1d4>)
   8657c:	4313      	orrs	r3, r2
   8657e:	610b      	str	r3, [r1, #16]
			return;
   86580:	e007      	b.n	86592 <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   86582:	79fb      	ldrb	r3, [r7, #7]
   86584:	461a      	mov	r2, r3
   86586:	2100      	movs	r1, #0
   86588:	68f8      	ldr	r0, [r7, #12]
   8658a:	4b08      	ldr	r3, [pc, #32]	; (865ac <udd_ep_trans_done+0x1e4>)
   8658c:	4798      	blx	r3
   8658e:	e000      	b.n	86592 <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   86590:	bf00      	nop
}
   86592:	3718      	adds	r7, #24
   86594:	46bd      	mov	sp, r7
   86596:	bd80      	pop	{r7, pc}
   86598:	2000134c 	.word	0x2000134c
   8659c:	400a4000 	.word	0x400a4000
   865a0:	400a4300 	.word	0x400a4300
   865a4:	00084ba9 	.word	0x00084ba9
   865a8:	00084c05 	.word	0x00084c05
   865ac:	00086359 	.word	0x00086359

000865b0 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   865b0:	b580      	push	{r7, lr}
   865b2:	b084      	sub	sp, #16
   865b4:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   865b6:	2301      	movs	r3, #1
   865b8:	73fb      	strb	r3, [r7, #15]
   865ba:	e0e0      	b.n	8677e <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   865bc:	7bfb      	ldrb	r3, [r7, #15]
   865be:	1e5a      	subs	r2, r3, #1
   865c0:	4613      	mov	r3, r2
   865c2:	005b      	lsls	r3, r3, #1
   865c4:	4413      	add	r3, r2
   865c6:	00db      	lsls	r3, r3, #3
   865c8:	4a71      	ldr	r2, [pc, #452]	; (86790 <udd_ep_interrupt+0x1e0>)
   865ca:	4413      	add	r3, r2
   865cc:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   865ce:	4b71      	ldr	r3, [pc, #452]	; (86794 <udd_ep_interrupt+0x1e4>)
   865d0:	691a      	ldr	r2, [r3, #16]
   865d2:	7bfb      	ldrb	r3, [r7, #15]
   865d4:	3b01      	subs	r3, #1
   865d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   865da:	fa01 f303 	lsl.w	r3, r1, r3
   865de:	4013      	ands	r3, r2
   865e0:	2b00      	cmp	r3, #0
   865e2:	d03c      	beq.n	8665e <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   865e4:	4b6b      	ldr	r3, [pc, #428]	; (86794 <udd_ep_interrupt+0x1e4>)
   865e6:	695a      	ldr	r2, [r3, #20]
   865e8:	7bfb      	ldrb	r3, [r7, #15]
   865ea:	3b01      	subs	r3, #1
   865ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   865f0:	fa01 f303 	lsl.w	r3, r1, r3
   865f4:	4013      	ands	r3, r2
   865f6:	2b00      	cmp	r3, #0
   865f8:	d031      	beq.n	8665e <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   865fa:	7bfb      	ldrb	r3, [r7, #15]
   865fc:	011a      	lsls	r2, r3, #4
   865fe:	4b66      	ldr	r3, [pc, #408]	; (86798 <udd_ep_interrupt+0x1e8>)
   86600:	4413      	add	r3, r2
   86602:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   86604:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   86608:	2b00      	cmp	r3, #0
   8660a:	d001      	beq.n	86610 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   8660c:	2301      	movs	r3, #1
   8660e:	e0bb      	b.n	86788 <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   86610:	4b60      	ldr	r3, [pc, #384]	; (86794 <udd_ep_interrupt+0x1e4>)
   86612:	691a      	ldr	r2, [r3, #16]
   86614:	7bfb      	ldrb	r3, [r7, #15]
   86616:	3b01      	subs	r3, #1
   86618:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8661c:	fa01 f303 	lsl.w	r3, r1, r3
   86620:	43db      	mvns	r3, r3
   86622:	495c      	ldr	r1, [pc, #368]	; (86794 <udd_ep_interrupt+0x1e4>)
   86624:	4013      	ands	r3, r2
   86626:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   86628:	7bfb      	ldrb	r3, [r7, #15]
   8662a:	011a      	lsls	r2, r3, #4
   8662c:	4b5a      	ldr	r3, [pc, #360]	; (86798 <udd_ep_interrupt+0x1e8>)
   8662e:	4413      	add	r3, r2
   86630:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   86632:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   86634:	b29b      	uxth	r3, r3
   86636:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   86638:	687b      	ldr	r3, [r7, #4]
   8663a:	2b00      	cmp	r3, #0
   8663c:	d009      	beq.n	86652 <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   8663e:	68bb      	ldr	r3, [r7, #8]
   86640:	68da      	ldr	r2, [r3, #12]
   86642:	687b      	ldr	r3, [r7, #4]
   86644:	1ad2      	subs	r2, r2, r3
   86646:	68bb      	ldr	r3, [r7, #8]
   86648:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   8664a:	68bb      	ldr	r3, [r7, #8]
   8664c:	68da      	ldr	r2, [r3, #12]
   8664e:	68bb      	ldr	r3, [r7, #8]
   86650:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   86652:	7bfb      	ldrb	r3, [r7, #15]
   86654:	4618      	mov	r0, r3
   86656:	4b51      	ldr	r3, [pc, #324]	; (8679c <udd_ep_interrupt+0x1ec>)
   86658:	4798      	blx	r3
			return true;
   8665a:	2301      	movs	r3, #1
   8665c:	e094      	b.n	86788 <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8665e:	4b4d      	ldr	r3, [pc, #308]	; (86794 <udd_ep_interrupt+0x1e4>)
   86660:	691a      	ldr	r2, [r3, #16]
   86662:	7bfb      	ldrb	r3, [r7, #15]
   86664:	f44f 7180 	mov.w	r1, #256	; 0x100
   86668:	fa01 f303 	lsl.w	r3, r1, r3
   8666c:	4013      	ands	r3, r2
   8666e:	2b00      	cmp	r3, #0
   86670:	f000 8082 	beq.w	86778 <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   86674:	4a47      	ldr	r2, [pc, #284]	; (86794 <udd_ep_interrupt+0x1e4>)
   86676:	7bfb      	ldrb	r3, [r7, #15]
   86678:	015b      	lsls	r3, r3, #5
   8667a:	4413      	add	r3, r2
   8667c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   86680:	681b      	ldr	r3, [r3, #0]
   86682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   86686:	2b00      	cmp	r3, #0
   86688:	d024      	beq.n	866d4 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   8668a:	4a42      	ldr	r2, [pc, #264]	; (86794 <udd_ep_interrupt+0x1e4>)
   8668c:	7bfb      	ldrb	r3, [r7, #15]
   8668e:	015b      	lsls	r3, r3, #5
   86690:	4413      	add	r3, r2
   86692:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   86696:	681b      	ldr	r3, [r3, #0]
   86698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   8669c:	2b00      	cmp	r3, #0
   8669e:	d119      	bne.n	866d4 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   866a0:	4a3c      	ldr	r2, [pc, #240]	; (86794 <udd_ep_interrupt+0x1e4>)
   866a2:	7bfb      	ldrb	r3, [r7, #15]
   866a4:	015b      	lsls	r3, r3, #5
   866a6:	4413      	add	r3, r2
   866a8:	f503 7384 	add.w	r3, r3, #264	; 0x108
   866ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   866b0:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   866b2:	4a38      	ldr	r2, [pc, #224]	; (86794 <udd_ep_interrupt+0x1e4>)
   866b4:	7bfb      	ldrb	r3, [r7, #15]
   866b6:	015b      	lsls	r3, r3, #5
   866b8:	4413      	add	r3, r2
   866ba:	f503 738a 	add.w	r3, r3, #276	; 0x114
   866be:	f44f 6200 	mov.w	r2, #2048	; 0x800
   866c2:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   866c4:	7bfb      	ldrb	r3, [r7, #15]
   866c6:	461a      	mov	r2, r3
   866c8:	2100      	movs	r1, #0
   866ca:	68b8      	ldr	r0, [r7, #8]
   866cc:	4b34      	ldr	r3, [pc, #208]	; (867a0 <udd_ep_interrupt+0x1f0>)
   866ce:	4798      	blx	r3
				return true;
   866d0:	2301      	movs	r3, #1
   866d2:	e059      	b.n	86788 <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   866d4:	4a2f      	ldr	r2, [pc, #188]	; (86794 <udd_ep_interrupt+0x1e4>)
   866d6:	7bfb      	ldrb	r3, [r7, #15]
   866d8:	015b      	lsls	r3, r3, #5
   866da:	4413      	add	r3, r2
   866dc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   866e0:	681b      	ldr	r3, [r3, #0]
   866e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   866e6:	2b00      	cmp	r3, #0
   866e8:	d046      	beq.n	86778 <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   866ea:	4a2a      	ldr	r2, [pc, #168]	; (86794 <udd_ep_interrupt+0x1e4>)
   866ec:	7bfb      	ldrb	r3, [r7, #15]
   866ee:	015b      	lsls	r3, r3, #5
   866f0:	4413      	add	r3, r2
   866f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   866f6:	681b      	ldr	r3, [r3, #0]
   866f8:	0c9b      	lsrs	r3, r3, #18
   866fa:	f003 0303 	and.w	r3, r3, #3
   866fe:	2b00      	cmp	r3, #0
   86700:	d13a      	bne.n	86778 <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   86702:	4a24      	ldr	r2, [pc, #144]	; (86794 <udd_ep_interrupt+0x1e4>)
   86704:	7bfb      	ldrb	r3, [r7, #15]
   86706:	015b      	lsls	r3, r3, #5
   86708:	4413      	add	r3, r2
   8670a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8670e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   86712:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   86714:	4b1f      	ldr	r3, [pc, #124]	; (86794 <udd_ep_interrupt+0x1e4>)
   86716:	691a      	ldr	r2, [r3, #16]
   86718:	7bfb      	ldrb	r3, [r7, #15]
   8671a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8671e:	fa01 f303 	lsl.w	r3, r1, r3
   86722:	43db      	mvns	r3, r3
   86724:	491b      	ldr	r1, [pc, #108]	; (86794 <udd_ep_interrupt+0x1e4>)
   86726:	4013      	ands	r3, r2
   86728:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   8672a:	68ba      	ldr	r2, [r7, #8]
   8672c:	7d13      	ldrb	r3, [r2, #20]
   8672e:	f36f 0382 	bfc	r3, #2, #1
   86732:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   86734:	4a17      	ldr	r2, [pc, #92]	; (86794 <udd_ep_interrupt+0x1e4>)
   86736:	7bfb      	ldrb	r3, [r7, #15]
   86738:	015b      	lsls	r3, r3, #5
   8673a:	4413      	add	r3, r2
   8673c:	f503 7384 	add.w	r3, r3, #264	; 0x108
   86740:	681a      	ldr	r2, [r3, #0]
   86742:	4914      	ldr	r1, [pc, #80]	; (86794 <udd_ep_interrupt+0x1e4>)
   86744:	7bfb      	ldrb	r3, [r7, #15]
   86746:	f022 0202 	bic.w	r2, r2, #2
   8674a:	015b      	lsls	r3, r3, #5
   8674c:	440b      	add	r3, r1
   8674e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   86752:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   86754:	4a0f      	ldr	r2, [pc, #60]	; (86794 <udd_ep_interrupt+0x1e4>)
   86756:	7bfb      	ldrb	r3, [r7, #15]
   86758:	015b      	lsls	r3, r3, #5
   8675a:	4413      	add	r3, r2
   8675c:	f503 738a 	add.w	r3, r3, #276	; 0x114
   86760:	2220      	movs	r2, #32
   86762:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   86764:	4a0b      	ldr	r2, [pc, #44]	; (86794 <udd_ep_interrupt+0x1e4>)
   86766:	7bfb      	ldrb	r3, [r7, #15]
   86768:	015b      	lsls	r3, r3, #5
   8676a:	4413      	add	r3, r2
   8676c:	f503 738c 	add.w	r3, r3, #280	; 0x118
   86770:	2240      	movs	r2, #64	; 0x40
   86772:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   86774:	2301      	movs	r3, #1
   86776:	e007      	b.n	86788 <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   86778:	7bfb      	ldrb	r3, [r7, #15]
   8677a:	3301      	adds	r3, #1
   8677c:	73fb      	strb	r3, [r7, #15]
   8677e:	7bfb      	ldrb	r3, [r7, #15]
   86780:	2b02      	cmp	r3, #2
   86782:	f67f af1b 	bls.w	865bc <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   86786:	2300      	movs	r3, #0
}
   86788:	4618      	mov	r0, r3
   8678a:	3710      	adds	r7, #16
   8678c:	46bd      	mov	sp, r7
   8678e:	bd80      	pop	{r7, pc}
   86790:	2000134c 	.word	0x2000134c
   86794:	400a4000 	.word	0x400a4000
   86798:	400a4300 	.word	0x400a4300
   8679c:	000863c9 	.word	0x000863c9
   867a0:	00086359 	.word	0x00086359

000867a4 <ui_init>:
#include <asf.h>
#include "ui.h"
#include "tasks.h"

void ui_init(void)
{
   867a4:	b580      	push	{r7, lr}
   867a6:	af00      	add	r7, sp, #0
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   867a8:	201d      	movs	r0, #29
   867aa:	4b03      	ldr	r3, [pc, #12]	; (867b8 <ui_init+0x14>)
   867ac:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   867ae:	201f      	movs	r0, #31
   867b0:	4b01      	ldr	r3, [pc, #4]	; (867b8 <ui_init+0x14>)
   867b2:	4798      	blx	r3
	//LED_Off(LED2_GPIO);
}
   867b4:	bf00      	nop
   867b6:	bd80      	pop	{r7, pc}
   867b8:	00082359 	.word	0x00082359

000867bc <ui_powerdown>:


void ui_powerdown(void)
{
   867bc:	b580      	push	{r7, lr}
   867be:	af00      	add	r7, sp, #0
	LED_Off(LED0_GPIO);
   867c0:	201d      	movs	r0, #29
   867c2:	4b03      	ldr	r3, [pc, #12]	; (867d0 <ui_powerdown+0x14>)
   867c4:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   867c6:	201f      	movs	r0, #31
   867c8:	4b01      	ldr	r3, [pc, #4]	; (867d0 <ui_powerdown+0x14>)
   867ca:	4798      	blx	r3
	
	// Power off FPGA
	//board_sram_pwroff();
}
   867cc:	bf00      	nop
   867ce:	bd80      	pop	{r7, pc}
   867d0:	00082359 	.word	0x00082359

000867d4 <ui_wakeup>:

void ui_wakeup(void)
{
   867d4:	b580      	push	{r7, lr}
   867d6:	af00      	add	r7, sp, #0
	LED_On(LED0_GPIO);
   867d8:	201d      	movs	r0, #29
   867da:	4b02      	ldr	r3, [pc, #8]	; (867e4 <ui_wakeup+0x10>)
   867dc:	4798      	blx	r3
	//board_sram_pwron();
}
   867de:	bf00      	nop
   867e0:	bd80      	pop	{r7, pc}
   867e2:	bf00      	nop
   867e4:	000823b5 	.word	0x000823b5

000867e8 <ui_process>:

void ui_process(uint16_t framenumber)
{
   867e8:	b580      	push	{r7, lr}
   867ea:	b082      	sub	sp, #8
   867ec:	af00      	add	r7, sp, #0
   867ee:	4603      	mov	r3, r0
   867f0:	80fb      	strh	r3, [r7, #6]
	if ((framenumber % 1000) == 0) {
   867f2:	88fb      	ldrh	r3, [r7, #6]
   867f4:	4a16      	ldr	r2, [pc, #88]	; (86850 <ui_process+0x68>)
   867f6:	fba2 1203 	umull	r1, r2, r2, r3
   867fa:	0992      	lsrs	r2, r2, #6
   867fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   86800:	fb01 f202 	mul.w	r2, r1, r2
   86804:	1a9b      	subs	r3, r3, r2
   86806:	b29b      	uxth	r3, r3
   86808:	2b00      	cmp	r3, #0
   8680a:	d102      	bne.n	86812 <ui_process+0x2a>
		LED_On(LED0_GPIO);
   8680c:	201d      	movs	r0, #29
   8680e:	4b11      	ldr	r3, [pc, #68]	; (86854 <ui_process+0x6c>)
   86810:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
   86812:	88fb      	ldrh	r3, [r7, #6]
   86814:	4a0e      	ldr	r2, [pc, #56]	; (86850 <ui_process+0x68>)
   86816:	fba2 1203 	umull	r1, r2, r2, r3
   8681a:	0992      	lsrs	r2, r2, #6
   8681c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   86820:	fb01 f202 	mul.w	r2, r1, r2
   86824:	1a9b      	subs	r3, r3, r2
   86826:	b29b      	uxth	r3, r3
   86828:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8682c:	d102      	bne.n	86834 <ui_process+0x4c>
		LED_Off(LED0_GPIO);
   8682e:	201d      	movs	r0, #29
   86830:	4b09      	ldr	r3, [pc, #36]	; (86858 <ui_process+0x70>)
   86832:	4798      	blx	r3
	}
	
	if ((framenumber % 512) == 0) {
   86834:	88fb      	ldrh	r3, [r7, #6]
   86836:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8683a:	b29b      	uxth	r3, r3
   8683c:	2b00      	cmp	r3, #0
   8683e:	d102      	bne.n	86846 <ui_process+0x5e>
		LED_Off(LED1_GPIO);
   86840:	201f      	movs	r0, #31
   86842:	4b05      	ldr	r3, [pc, #20]	; (86858 <ui_process+0x70>)
   86844:	4798      	blx	r3
		//LED_Off(LED2_GPIO);
	}
}
   86846:	bf00      	nop
   86848:	3708      	adds	r7, #8
   8684a:	46bd      	mov	sp, r7
   8684c:	bd80      	pop	{r7, pc}
   8684e:	bf00      	nop
   86850:	10624dd3 	.word	0x10624dd3
   86854:	000823b5 	.word	0x000823b5
   86858:	00082359 	.word	0x00082359

0008685c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8685c:	b480      	push	{r7}
   8685e:	b089      	sub	sp, #36	; 0x24
   86860:	af00      	add	r7, sp, #0
   86862:	60f8      	str	r0, [r7, #12]
   86864:	60b9      	str	r1, [r7, #8]
   86866:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   86868:	68bb      	ldr	r3, [r7, #8]
   8686a:	011b      	lsls	r3, r3, #4
   8686c:	687a      	ldr	r2, [r7, #4]
   8686e:	429a      	cmp	r2, r3
   86870:	d302      	bcc.n	86878 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   86872:	2310      	movs	r3, #16
   86874:	61fb      	str	r3, [r7, #28]
   86876:	e001      	b.n	8687c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   86878:	2308      	movs	r3, #8
   8687a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8687c:	687b      	ldr	r3, [r7, #4]
   8687e:	00da      	lsls	r2, r3, #3
   86880:	69fb      	ldr	r3, [r7, #28]
   86882:	68b9      	ldr	r1, [r7, #8]
   86884:	fb01 f303 	mul.w	r3, r1, r3
   86888:	085b      	lsrs	r3, r3, #1
   8688a:	441a      	add	r2, r3
   8688c:	69fb      	ldr	r3, [r7, #28]
   8688e:	68b9      	ldr	r1, [r7, #8]
   86890:	fb01 f303 	mul.w	r3, r1, r3
   86894:	fbb2 f3f3 	udiv	r3, r2, r3
   86898:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   8689a:	69bb      	ldr	r3, [r7, #24]
   8689c:	08db      	lsrs	r3, r3, #3
   8689e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   868a0:	69bb      	ldr	r3, [r7, #24]
   868a2:	f003 0307 	and.w	r3, r3, #7
   868a6:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   868a8:	697b      	ldr	r3, [r7, #20]
   868aa:	2b00      	cmp	r3, #0
   868ac:	d003      	beq.n	868b6 <usart_set_async_baudrate+0x5a>
   868ae:	697b      	ldr	r3, [r7, #20]
   868b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   868b4:	d301      	bcc.n	868ba <usart_set_async_baudrate+0x5e>
		return 1;
   868b6:	2301      	movs	r3, #1
   868b8:	e00f      	b.n	868da <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   868ba:	69fb      	ldr	r3, [r7, #28]
   868bc:	2b08      	cmp	r3, #8
   868be:	d105      	bne.n	868cc <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   868c0:	68fb      	ldr	r3, [r7, #12]
   868c2:	685b      	ldr	r3, [r3, #4]
   868c4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   868c8:	68fb      	ldr	r3, [r7, #12]
   868ca:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   868cc:	693b      	ldr	r3, [r7, #16]
   868ce:	041a      	lsls	r2, r3, #16
   868d0:	697b      	ldr	r3, [r7, #20]
   868d2:	431a      	orrs	r2, r3
   868d4:	68fb      	ldr	r3, [r7, #12]
   868d6:	621a      	str	r2, [r3, #32]

	return 0;
   868d8:	2300      	movs	r3, #0
}
   868da:	4618      	mov	r0, r3
   868dc:	3724      	adds	r7, #36	; 0x24
   868de:	46bd      	mov	sp, r7
   868e0:	bc80      	pop	{r7}
   868e2:	4770      	bx	lr

000868e4 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   868e4:	b480      	push	{r7}
   868e6:	b087      	sub	sp, #28
   868e8:	af00      	add	r7, sp, #0
   868ea:	60f8      	str	r0, [r7, #12]
   868ec:	60b9      	str	r1, [r7, #8]
   868ee:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   868f0:	68bb      	ldr	r3, [r7, #8]
   868f2:	085a      	lsrs	r2, r3, #1
   868f4:	687b      	ldr	r3, [r7, #4]
   868f6:	441a      	add	r2, r3
   868f8:	68bb      	ldr	r3, [r7, #8]
   868fa:	fbb2 f3f3 	udiv	r3, r2, r3
   868fe:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   86900:	697b      	ldr	r3, [r7, #20]
   86902:	2b03      	cmp	r3, #3
   86904:	d903      	bls.n	8690e <usart_set_spi_master_baudrate+0x2a>
   86906:	697b      	ldr	r3, [r7, #20]
   86908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8690c:	d301      	bcc.n	86912 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   8690e:	2301      	movs	r3, #1
   86910:	e003      	b.n	8691a <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86912:	68fb      	ldr	r3, [r7, #12]
   86914:	697a      	ldr	r2, [r7, #20]
   86916:	621a      	str	r2, [r3, #32]

	return 0;
   86918:	2300      	movs	r3, #0
}
   8691a:	4618      	mov	r0, r3
   8691c:	371c      	adds	r7, #28
   8691e:	46bd      	mov	sp, r7
   86920:	bc80      	pop	{r7}
   86922:	4770      	bx	lr

00086924 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   86924:	b580      	push	{r7, lr}
   86926:	b082      	sub	sp, #8
   86928:	af00      	add	r7, sp, #0
   8692a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   8692c:	6878      	ldr	r0, [r7, #4]
   8692e:	4b0f      	ldr	r3, [pc, #60]	; (8696c <usart_reset+0x48>)
   86930:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   86932:	687b      	ldr	r3, [r7, #4]
   86934:	2200      	movs	r2, #0
   86936:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   86938:	687b      	ldr	r3, [r7, #4]
   8693a:	2200      	movs	r2, #0
   8693c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8693e:	687b      	ldr	r3, [r7, #4]
   86940:	2200      	movs	r2, #0
   86942:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   86944:	6878      	ldr	r0, [r7, #4]
   86946:	4b0a      	ldr	r3, [pc, #40]	; (86970 <usart_reset+0x4c>)
   86948:	4798      	blx	r3
	usart_reset_rx(p_usart);
   8694a:	6878      	ldr	r0, [r7, #4]
   8694c:	4b09      	ldr	r3, [pc, #36]	; (86974 <usart_reset+0x50>)
   8694e:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   86950:	6878      	ldr	r0, [r7, #4]
   86952:	4b09      	ldr	r3, [pc, #36]	; (86978 <usart_reset+0x54>)
   86954:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   86956:	6878      	ldr	r0, [r7, #4]
   86958:	4b08      	ldr	r3, [pc, #32]	; (8697c <usart_reset+0x58>)
   8695a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   8695c:	6878      	ldr	r0, [r7, #4]
   8695e:	4b08      	ldr	r3, [pc, #32]	; (86980 <usart_reset+0x5c>)
   86960:	4798      	blx	r3
#endif
}
   86962:	bf00      	nop
   86964:	3708      	adds	r7, #8
   86966:	46bd      	mov	sp, r7
   86968:	bd80      	pop	{r7, pc}
   8696a:	bf00      	nop
   8696c:	00086c6d 	.word	0x00086c6d
   86970:	00086b31 	.word	0x00086b31
   86974:	00086b79 	.word	0x00086b79
   86978:	00086bf1 	.word	0x00086bf1
   8697c:	00086c25 	.word	0x00086c25
   86980:	00086c0b 	.word	0x00086c0b

00086984 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   86984:	b580      	push	{r7, lr}
   86986:	b084      	sub	sp, #16
   86988:	af00      	add	r7, sp, #0
   8698a:	60f8      	str	r0, [r7, #12]
   8698c:	60b9      	str	r1, [r7, #8]
   8698e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   86990:	68f8      	ldr	r0, [r7, #12]
   86992:	4b1a      	ldr	r3, [pc, #104]	; (869fc <usart_init_rs232+0x78>)
   86994:	4798      	blx	r3

	ul_reg_val = 0;
   86996:	4b1a      	ldr	r3, [pc, #104]	; (86a00 <usart_init_rs232+0x7c>)
   86998:	2200      	movs	r2, #0
   8699a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8699c:	68bb      	ldr	r3, [r7, #8]
   8699e:	2b00      	cmp	r3, #0
   869a0:	d009      	beq.n	869b6 <usart_init_rs232+0x32>
   869a2:	68bb      	ldr	r3, [r7, #8]
   869a4:	681b      	ldr	r3, [r3, #0]
   869a6:	687a      	ldr	r2, [r7, #4]
   869a8:	4619      	mov	r1, r3
   869aa:	68f8      	ldr	r0, [r7, #12]
   869ac:	4b15      	ldr	r3, [pc, #84]	; (86a04 <usart_init_rs232+0x80>)
   869ae:	4798      	blx	r3
   869b0:	4603      	mov	r3, r0
   869b2:	2b00      	cmp	r3, #0
   869b4:	d001      	beq.n	869ba <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   869b6:	2301      	movs	r3, #1
   869b8:	e01b      	b.n	869f2 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   869ba:	68bb      	ldr	r3, [r7, #8]
   869bc:	685a      	ldr	r2, [r3, #4]
   869be:	68bb      	ldr	r3, [r7, #8]
   869c0:	689b      	ldr	r3, [r3, #8]
   869c2:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   869c4:	68bb      	ldr	r3, [r7, #8]
   869c6:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   869c8:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   869ca:	68bb      	ldr	r3, [r7, #8]
   869cc:	68db      	ldr	r3, [r3, #12]
   869ce:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   869d0:	4b0b      	ldr	r3, [pc, #44]	; (86a00 <usart_init_rs232+0x7c>)
   869d2:	681b      	ldr	r3, [r3, #0]
   869d4:	4313      	orrs	r3, r2
   869d6:	4a0a      	ldr	r2, [pc, #40]	; (86a00 <usart_init_rs232+0x7c>)
   869d8:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   869da:	4b09      	ldr	r3, [pc, #36]	; (86a00 <usart_init_rs232+0x7c>)
   869dc:	681b      	ldr	r3, [r3, #0]
   869de:	4a08      	ldr	r2, [pc, #32]	; (86a00 <usart_init_rs232+0x7c>)
   869e0:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   869e2:	68fb      	ldr	r3, [r7, #12]
   869e4:	685a      	ldr	r2, [r3, #4]
   869e6:	4b06      	ldr	r3, [pc, #24]	; (86a00 <usart_init_rs232+0x7c>)
   869e8:	681b      	ldr	r3, [r3, #0]
   869ea:	431a      	orrs	r2, r3
   869ec:	68fb      	ldr	r3, [r7, #12]
   869ee:	605a      	str	r2, [r3, #4]

	return 0;
   869f0:	2300      	movs	r3, #0
}
   869f2:	4618      	mov	r0, r3
   869f4:	3710      	adds	r7, #16
   869f6:	46bd      	mov	sp, r7
   869f8:	bd80      	pop	{r7, pc}
   869fa:	bf00      	nop
   869fc:	00086925 	.word	0x00086925
   86a00:	20001380 	.word	0x20001380
   86a04:	0008685d 	.word	0x0008685d

00086a08 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   86a08:	b580      	push	{r7, lr}
   86a0a:	b084      	sub	sp, #16
   86a0c:	af00      	add	r7, sp, #0
   86a0e:	60f8      	str	r0, [r7, #12]
   86a10:	60b9      	str	r1, [r7, #8]
   86a12:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   86a14:	68f8      	ldr	r0, [r7, #12]
   86a16:	4b3d      	ldr	r3, [pc, #244]	; (86b0c <usart_init_spi_master+0x104>)
   86a18:	4798      	blx	r3

	ul_reg_val = 0;
   86a1a:	4b3d      	ldr	r3, [pc, #244]	; (86b10 <usart_init_spi_master+0x108>)
   86a1c:	2200      	movs	r2, #0
   86a1e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   86a20:	68bb      	ldr	r3, [r7, #8]
   86a22:	2b00      	cmp	r3, #0
   86a24:	d00d      	beq.n	86a42 <usart_init_spi_master+0x3a>
   86a26:	68bb      	ldr	r3, [r7, #8]
   86a28:	689b      	ldr	r3, [r3, #8]
   86a2a:	2b03      	cmp	r3, #3
   86a2c:	d809      	bhi.n	86a42 <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   86a2e:	68bb      	ldr	r3, [r7, #8]
   86a30:	681b      	ldr	r3, [r3, #0]
   86a32:	687a      	ldr	r2, [r7, #4]
   86a34:	4619      	mov	r1, r3
   86a36:	68f8      	ldr	r0, [r7, #12]
   86a38:	4b36      	ldr	r3, [pc, #216]	; (86b14 <usart_init_spi_master+0x10c>)
   86a3a:	4798      	blx	r3
   86a3c:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   86a3e:	2b00      	cmp	r3, #0
   86a40:	d001      	beq.n	86a46 <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   86a42:	2301      	movs	r3, #1
   86a44:	e05d      	b.n	86b02 <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   86a46:	68bb      	ldr	r3, [r7, #8]
   86a48:	685a      	ldr	r2, [r3, #4]
   86a4a:	4b31      	ldr	r3, [pc, #196]	; (86b10 <usart_init_spi_master+0x108>)
   86a4c:	681b      	ldr	r3, [r3, #0]
   86a4e:	4313      	orrs	r3, r2
   86a50:	4a2f      	ldr	r2, [pc, #188]	; (86b10 <usart_init_spi_master+0x108>)
   86a52:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   86a54:	68bb      	ldr	r3, [r7, #8]
   86a56:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   86a58:	4b2d      	ldr	r3, [pc, #180]	; (86b10 <usart_init_spi_master+0x108>)
   86a5a:	681b      	ldr	r3, [r3, #0]
   86a5c:	4313      	orrs	r3, r2
   86a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86a62:	f043 030e 	orr.w	r3, r3, #14
   86a66:	4a2a      	ldr	r2, [pc, #168]	; (86b10 <usart_init_spi_master+0x108>)
   86a68:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   86a6a:	68bb      	ldr	r3, [r7, #8]
   86a6c:	689b      	ldr	r3, [r3, #8]
   86a6e:	2b03      	cmp	r3, #3
   86a70:	d83e      	bhi.n	86af0 <usart_init_spi_master+0xe8>
   86a72:	a201      	add	r2, pc, #4	; (adr r2, 86a78 <usart_init_spi_master+0x70>)
   86a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86a78:	00086a89 	.word	0x00086a89
   86a7c:	00086aa3 	.word	0x00086aa3
   86a80:	00086abd 	.word	0x00086abd
   86a84:	00086ad7 	.word	0x00086ad7
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   86a88:	4b21      	ldr	r3, [pc, #132]	; (86b10 <usart_init_spi_master+0x108>)
   86a8a:	681b      	ldr	r3, [r3, #0]
   86a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86a90:	4a1f      	ldr	r2, [pc, #124]	; (86b10 <usart_init_spi_master+0x108>)
   86a92:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   86a94:	4b1e      	ldr	r3, [pc, #120]	; (86b10 <usart_init_spi_master+0x108>)
   86a96:	681b      	ldr	r3, [r3, #0]
   86a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86a9c:	4a1c      	ldr	r2, [pc, #112]	; (86b10 <usart_init_spi_master+0x108>)
   86a9e:	6013      	str	r3, [r2, #0]
		break;
   86aa0:	e027      	b.n	86af2 <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   86aa2:	4b1b      	ldr	r3, [pc, #108]	; (86b10 <usart_init_spi_master+0x108>)
   86aa4:	681b      	ldr	r3, [r3, #0]
   86aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86aaa:	4a19      	ldr	r2, [pc, #100]	; (86b10 <usart_init_spi_master+0x108>)
   86aac:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   86aae:	4b18      	ldr	r3, [pc, #96]	; (86b10 <usart_init_spi_master+0x108>)
   86ab0:	681b      	ldr	r3, [r3, #0]
   86ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86ab6:	4a16      	ldr	r2, [pc, #88]	; (86b10 <usart_init_spi_master+0x108>)
   86ab8:	6013      	str	r3, [r2, #0]
		break;
   86aba:	e01a      	b.n	86af2 <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   86abc:	4b14      	ldr	r3, [pc, #80]	; (86b10 <usart_init_spi_master+0x108>)
   86abe:	681b      	ldr	r3, [r3, #0]
   86ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86ac4:	4a12      	ldr	r2, [pc, #72]	; (86b10 <usart_init_spi_master+0x108>)
   86ac6:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   86ac8:	4b11      	ldr	r3, [pc, #68]	; (86b10 <usart_init_spi_master+0x108>)
   86aca:	681b      	ldr	r3, [r3, #0]
   86acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86ad0:	4a0f      	ldr	r2, [pc, #60]	; (86b10 <usart_init_spi_master+0x108>)
   86ad2:	6013      	str	r3, [r2, #0]
		break;
   86ad4:	e00d      	b.n	86af2 <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   86ad6:	4b0e      	ldr	r3, [pc, #56]	; (86b10 <usart_init_spi_master+0x108>)
   86ad8:	681b      	ldr	r3, [r3, #0]
   86ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86ade:	4a0c      	ldr	r2, [pc, #48]	; (86b10 <usart_init_spi_master+0x108>)
   86ae0:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   86ae2:	4b0b      	ldr	r3, [pc, #44]	; (86b10 <usart_init_spi_master+0x108>)
   86ae4:	681b      	ldr	r3, [r3, #0]
   86ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86aea:	4a09      	ldr	r2, [pc, #36]	; (86b10 <usart_init_spi_master+0x108>)
   86aec:	6013      	str	r3, [r2, #0]
		break;
   86aee:	e000      	b.n	86af2 <usart_init_spi_master+0xea>

	default:
		break;
   86af0:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   86af2:	68fb      	ldr	r3, [r7, #12]
   86af4:	685a      	ldr	r2, [r3, #4]
   86af6:	4b06      	ldr	r3, [pc, #24]	; (86b10 <usart_init_spi_master+0x108>)
   86af8:	681b      	ldr	r3, [r3, #0]
   86afa:	431a      	orrs	r2, r3
   86afc:	68fb      	ldr	r3, [r7, #12]
   86afe:	605a      	str	r2, [r3, #4]

	return 0;
   86b00:	2300      	movs	r3, #0
}
   86b02:	4618      	mov	r0, r3
   86b04:	3710      	adds	r7, #16
   86b06:	46bd      	mov	sp, r7
   86b08:	bd80      	pop	{r7, pc}
   86b0a:	bf00      	nop
   86b0c:	00086925 	.word	0x00086925
   86b10:	20001384 	.word	0x20001384
   86b14:	000868e5 	.word	0x000868e5

00086b18 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   86b18:	b480      	push	{r7}
   86b1a:	b083      	sub	sp, #12
   86b1c:	af00      	add	r7, sp, #0
   86b1e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   86b20:	687b      	ldr	r3, [r7, #4]
   86b22:	2240      	movs	r2, #64	; 0x40
   86b24:	601a      	str	r2, [r3, #0]
}
   86b26:	bf00      	nop
   86b28:	370c      	adds	r7, #12
   86b2a:	46bd      	mov	sp, r7
   86b2c:	bc80      	pop	{r7}
   86b2e:	4770      	bx	lr

00086b30 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   86b30:	b480      	push	{r7}
   86b32:	b083      	sub	sp, #12
   86b34:	af00      	add	r7, sp, #0
   86b36:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   86b38:	687b      	ldr	r3, [r7, #4]
   86b3a:	2288      	movs	r2, #136	; 0x88
   86b3c:	601a      	str	r2, [r3, #0]
}
   86b3e:	bf00      	nop
   86b40:	370c      	adds	r7, #12
   86b42:	46bd      	mov	sp, r7
   86b44:	bc80      	pop	{r7}
   86b46:	4770      	bx	lr

00086b48 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   86b48:	b480      	push	{r7}
   86b4a:	b083      	sub	sp, #12
   86b4c:	af00      	add	r7, sp, #0
   86b4e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   86b50:	687b      	ldr	r3, [r7, #4]
   86b52:	2210      	movs	r2, #16
   86b54:	601a      	str	r2, [r3, #0]
}
   86b56:	bf00      	nop
   86b58:	370c      	adds	r7, #12
   86b5a:	46bd      	mov	sp, r7
   86b5c:	bc80      	pop	{r7}
   86b5e:	4770      	bx	lr

00086b60 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   86b60:	b480      	push	{r7}
   86b62:	b083      	sub	sp, #12
   86b64:	af00      	add	r7, sp, #0
   86b66:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   86b68:	687b      	ldr	r3, [r7, #4]
   86b6a:	2220      	movs	r2, #32
   86b6c:	601a      	str	r2, [r3, #0]
}
   86b6e:	bf00      	nop
   86b70:	370c      	adds	r7, #12
   86b72:	46bd      	mov	sp, r7
   86b74:	bc80      	pop	{r7}
   86b76:	4770      	bx	lr

00086b78 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   86b78:	b480      	push	{r7}
   86b7a:	b083      	sub	sp, #12
   86b7c:	af00      	add	r7, sp, #0
   86b7e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   86b80:	687b      	ldr	r3, [r7, #4]
   86b82:	2224      	movs	r2, #36	; 0x24
   86b84:	601a      	str	r2, [r3, #0]
}
   86b86:	bf00      	nop
   86b88:	370c      	adds	r7, #12
   86b8a:	46bd      	mov	sp, r7
   86b8c:	bc80      	pop	{r7}
   86b8e:	4770      	bx	lr

00086b90 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   86b90:	b480      	push	{r7}
   86b92:	b083      	sub	sp, #12
   86b94:	af00      	add	r7, sp, #0
   86b96:	6078      	str	r0, [r7, #4]
   86b98:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   86b9a:	687b      	ldr	r3, [r7, #4]
   86b9c:	683a      	ldr	r2, [r7, #0]
   86b9e:	609a      	str	r2, [r3, #8]
}
   86ba0:	bf00      	nop
   86ba2:	370c      	adds	r7, #12
   86ba4:	46bd      	mov	sp, r7
   86ba6:	bc80      	pop	{r7}
   86ba8:	4770      	bx	lr

00086baa <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   86baa:	b480      	push	{r7}
   86bac:	b083      	sub	sp, #12
   86bae:	af00      	add	r7, sp, #0
   86bb0:	6078      	str	r0, [r7, #4]
   86bb2:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   86bb4:	687b      	ldr	r3, [r7, #4]
   86bb6:	683a      	ldr	r2, [r7, #0]
   86bb8:	60da      	str	r2, [r3, #12]
}
   86bba:	bf00      	nop
   86bbc:	370c      	adds	r7, #12
   86bbe:	46bd      	mov	sp, r7
   86bc0:	bc80      	pop	{r7}
   86bc2:	4770      	bx	lr

00086bc4 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   86bc4:	b480      	push	{r7}
   86bc6:	b083      	sub	sp, #12
   86bc8:	af00      	add	r7, sp, #0
   86bca:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   86bcc:	687b      	ldr	r3, [r7, #4]
   86bce:	691b      	ldr	r3, [r3, #16]
}
   86bd0:	4618      	mov	r0, r3
   86bd2:	370c      	adds	r7, #12
   86bd4:	46bd      	mov	sp, r7
   86bd6:	bc80      	pop	{r7}
   86bd8:	4770      	bx	lr

00086bda <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   86bda:	b480      	push	{r7}
   86bdc:	b083      	sub	sp, #12
   86bde:	af00      	add	r7, sp, #0
   86be0:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   86be2:	687b      	ldr	r3, [r7, #4]
   86be4:	695b      	ldr	r3, [r3, #20]
}
   86be6:	4618      	mov	r0, r3
   86be8:	370c      	adds	r7, #12
   86bea:	46bd      	mov	sp, r7
   86bec:	bc80      	pop	{r7}
   86bee:	4770      	bx	lr

00086bf0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   86bf0:	b480      	push	{r7}
   86bf2:	b083      	sub	sp, #12
   86bf4:	af00      	add	r7, sp, #0
   86bf6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   86bf8:	687b      	ldr	r3, [r7, #4]
   86bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
   86bfe:	601a      	str	r2, [r3, #0]
}
   86c00:	bf00      	nop
   86c02:	370c      	adds	r7, #12
   86c04:	46bd      	mov	sp, r7
   86c06:	bc80      	pop	{r7}
   86c08:	4770      	bx	lr

00086c0a <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   86c0a:	b480      	push	{r7}
   86c0c:	b083      	sub	sp, #12
   86c0e:	af00      	add	r7, sp, #0
   86c10:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   86c12:	687b      	ldr	r3, [r7, #4]
   86c14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   86c18:	601a      	str	r2, [r3, #0]
}
   86c1a:	bf00      	nop
   86c1c:	370c      	adds	r7, #12
   86c1e:	46bd      	mov	sp, r7
   86c20:	bc80      	pop	{r7}
   86c22:	4770      	bx	lr

00086c24 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   86c24:	b480      	push	{r7}
   86c26:	b083      	sub	sp, #12
   86c28:	af00      	add	r7, sp, #0
   86c2a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   86c2c:	687b      	ldr	r3, [r7, #4]
   86c2e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   86c32:	601a      	str	r2, [r3, #0]
}
   86c34:	bf00      	nop
   86c36:	370c      	adds	r7, #12
   86c38:	46bd      	mov	sp, r7
   86c3a:	bc80      	pop	{r7}
   86c3c:	4770      	bx	lr

00086c3e <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   86c3e:	b480      	push	{r7}
   86c40:	b083      	sub	sp, #12
   86c42:	af00      	add	r7, sp, #0
   86c44:	6078      	str	r0, [r7, #4]
   86c46:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86c48:	bf00      	nop
   86c4a:	687b      	ldr	r3, [r7, #4]
   86c4c:	695b      	ldr	r3, [r3, #20]
   86c4e:	f003 0302 	and.w	r3, r3, #2
   86c52:	2b00      	cmp	r3, #0
   86c54:	d0f9      	beq.n	86c4a <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   86c56:	683b      	ldr	r3, [r7, #0]
   86c58:	f3c3 0208 	ubfx	r2, r3, #0, #9
   86c5c:	687b      	ldr	r3, [r7, #4]
   86c5e:	61da      	str	r2, [r3, #28]

	return 0;
   86c60:	2300      	movs	r3, #0
}
   86c62:	4618      	mov	r0, r3
   86c64:	370c      	adds	r7, #12
   86c66:	46bd      	mov	sp, r7
   86c68:	bc80      	pop	{r7}
   86c6a:	4770      	bx	lr

00086c6c <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   86c6c:	b480      	push	{r7}
   86c6e:	b083      	sub	sp, #12
   86c70:	af00      	add	r7, sp, #0
   86c72:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   86c74:	687b      	ldr	r3, [r7, #4]
   86c76:	4a04      	ldr	r2, [pc, #16]	; (86c88 <usart_disable_writeprotect+0x1c>)
   86c78:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   86c7c:	bf00      	nop
   86c7e:	370c      	adds	r7, #12
   86c80:	46bd      	mov	sp, r7
   86c82:	bc80      	pop	{r7}
   86c84:	4770      	bx	lr
   86c86:	bf00      	nop
   86c88:	55534100 	.word	0x55534100

00086c8c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   86c8c:	b580      	push	{r7, lr}
   86c8e:	b086      	sub	sp, #24
   86c90:	af00      	add	r7, sp, #0
   86c92:	60f8      	str	r0, [r7, #12]
   86c94:	60b9      	str	r1, [r7, #8]
   86c96:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   86c98:	2300      	movs	r3, #0
   86c9a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   86c9c:	68fb      	ldr	r3, [r7, #12]
   86c9e:	2b01      	cmp	r3, #1
   86ca0:	d01e      	beq.n	86ce0 <_write+0x54>
   86ca2:	68fb      	ldr	r3, [r7, #12]
   86ca4:	2b02      	cmp	r3, #2
   86ca6:	d01b      	beq.n	86ce0 <_write+0x54>
   86ca8:	68fb      	ldr	r3, [r7, #12]
   86caa:	2b03      	cmp	r3, #3
   86cac:	d018      	beq.n	86ce0 <_write+0x54>
		return -1;
   86cae:	f04f 33ff 	mov.w	r3, #4294967295
   86cb2:	e019      	b.n	86ce8 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   86cb4:	4b0e      	ldr	r3, [pc, #56]	; (86cf0 <_write+0x64>)
   86cb6:	681a      	ldr	r2, [r3, #0]
   86cb8:	4b0e      	ldr	r3, [pc, #56]	; (86cf4 <_write+0x68>)
   86cba:	6818      	ldr	r0, [r3, #0]
   86cbc:	68bb      	ldr	r3, [r7, #8]
   86cbe:	1c59      	adds	r1, r3, #1
   86cc0:	60b9      	str	r1, [r7, #8]
   86cc2:	781b      	ldrb	r3, [r3, #0]
   86cc4:	4619      	mov	r1, r3
   86cc6:	4790      	blx	r2
   86cc8:	4603      	mov	r3, r0
   86cca:	2b00      	cmp	r3, #0
   86ccc:	da02      	bge.n	86cd4 <_write+0x48>
			return -1;
   86cce:	f04f 33ff 	mov.w	r3, #4294967295
   86cd2:	e009      	b.n	86ce8 <_write+0x5c>
		}
		++nChars;
   86cd4:	697b      	ldr	r3, [r7, #20]
   86cd6:	3301      	adds	r3, #1
   86cd8:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   86cda:	687b      	ldr	r3, [r7, #4]
   86cdc:	3b01      	subs	r3, #1
   86cde:	607b      	str	r3, [r7, #4]
   86ce0:	687b      	ldr	r3, [r7, #4]
   86ce2:	2b00      	cmp	r3, #0
   86ce4:	d1e6      	bne.n	86cb4 <_write+0x28>
	}
	return nChars;
   86ce6:	697b      	ldr	r3, [r7, #20]
}
   86ce8:	4618      	mov	r0, r3
   86cea:	3718      	adds	r7, #24
   86cec:	46bd      	mov	sp, r7
   86cee:	bd80      	pop	{r7, pc}
   86cf0:	20001840 	.word	0x20001840
   86cf4:	20001844 	.word	0x20001844

00086cf8 <__aeabi_uldivmod>:
   86cf8:	b953      	cbnz	r3, 86d10 <__aeabi_uldivmod+0x18>
   86cfa:	b94a      	cbnz	r2, 86d10 <__aeabi_uldivmod+0x18>
   86cfc:	2900      	cmp	r1, #0
   86cfe:	bf08      	it	eq
   86d00:	2800      	cmpeq	r0, #0
   86d02:	bf1c      	itt	ne
   86d04:	f04f 31ff 	movne.w	r1, #4294967295
   86d08:	f04f 30ff 	movne.w	r0, #4294967295
   86d0c:	f000 b96e 	b.w	86fec <__aeabi_idiv0>
   86d10:	f1ad 0c08 	sub.w	ip, sp, #8
   86d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   86d18:	f000 f806 	bl	86d28 <__udivmoddi4>
   86d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
   86d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   86d24:	b004      	add	sp, #16
   86d26:	4770      	bx	lr

00086d28 <__udivmoddi4>:
   86d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86d2c:	9e08      	ldr	r6, [sp, #32]
   86d2e:	460d      	mov	r5, r1
   86d30:	4604      	mov	r4, r0
   86d32:	468e      	mov	lr, r1
   86d34:	2b00      	cmp	r3, #0
   86d36:	f040 8083 	bne.w	86e40 <__udivmoddi4+0x118>
   86d3a:	428a      	cmp	r2, r1
   86d3c:	4617      	mov	r7, r2
   86d3e:	d947      	bls.n	86dd0 <__udivmoddi4+0xa8>
   86d40:	fab2 f382 	clz	r3, r2
   86d44:	b14b      	cbz	r3, 86d5a <__udivmoddi4+0x32>
   86d46:	f1c3 0120 	rsb	r1, r3, #32
   86d4a:	fa05 fe03 	lsl.w	lr, r5, r3
   86d4e:	fa20 f101 	lsr.w	r1, r0, r1
   86d52:	409f      	lsls	r7, r3
   86d54:	ea41 0e0e 	orr.w	lr, r1, lr
   86d58:	409c      	lsls	r4, r3
   86d5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   86d5e:	fbbe fcf8 	udiv	ip, lr, r8
   86d62:	fa1f f987 	uxth.w	r9, r7
   86d66:	fb08 e21c 	mls	r2, r8, ip, lr
   86d6a:	fb0c f009 	mul.w	r0, ip, r9
   86d6e:	0c21      	lsrs	r1, r4, #16
   86d70:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   86d74:	4290      	cmp	r0, r2
   86d76:	d90a      	bls.n	86d8e <__udivmoddi4+0x66>
   86d78:	18ba      	adds	r2, r7, r2
   86d7a:	f10c 31ff 	add.w	r1, ip, #4294967295
   86d7e:	f080 8118 	bcs.w	86fb2 <__udivmoddi4+0x28a>
   86d82:	4290      	cmp	r0, r2
   86d84:	f240 8115 	bls.w	86fb2 <__udivmoddi4+0x28a>
   86d88:	f1ac 0c02 	sub.w	ip, ip, #2
   86d8c:	443a      	add	r2, r7
   86d8e:	1a12      	subs	r2, r2, r0
   86d90:	fbb2 f0f8 	udiv	r0, r2, r8
   86d94:	fb08 2210 	mls	r2, r8, r0, r2
   86d98:	fb00 f109 	mul.w	r1, r0, r9
   86d9c:	b2a4      	uxth	r4, r4
   86d9e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   86da2:	42a1      	cmp	r1, r4
   86da4:	d909      	bls.n	86dba <__udivmoddi4+0x92>
   86da6:	193c      	adds	r4, r7, r4
   86da8:	f100 32ff 	add.w	r2, r0, #4294967295
   86dac:	f080 8103 	bcs.w	86fb6 <__udivmoddi4+0x28e>
   86db0:	42a1      	cmp	r1, r4
   86db2:	f240 8100 	bls.w	86fb6 <__udivmoddi4+0x28e>
   86db6:	3802      	subs	r0, #2
   86db8:	443c      	add	r4, r7
   86dba:	1a64      	subs	r4, r4, r1
   86dbc:	2100      	movs	r1, #0
   86dbe:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   86dc2:	b11e      	cbz	r6, 86dcc <__udivmoddi4+0xa4>
   86dc4:	2200      	movs	r2, #0
   86dc6:	40dc      	lsrs	r4, r3
   86dc8:	e9c6 4200 	strd	r4, r2, [r6]
   86dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86dd0:	b902      	cbnz	r2, 86dd4 <__udivmoddi4+0xac>
   86dd2:	deff      	udf	#255	; 0xff
   86dd4:	fab2 f382 	clz	r3, r2
   86dd8:	2b00      	cmp	r3, #0
   86dda:	d14f      	bne.n	86e7c <__udivmoddi4+0x154>
   86ddc:	1a8d      	subs	r5, r1, r2
   86dde:	2101      	movs	r1, #1
   86de0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   86de4:	fa1f f882 	uxth.w	r8, r2
   86de8:	fbb5 fcfe 	udiv	ip, r5, lr
   86dec:	fb0e 551c 	mls	r5, lr, ip, r5
   86df0:	fb08 f00c 	mul.w	r0, r8, ip
   86df4:	0c22      	lsrs	r2, r4, #16
   86df6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   86dfa:	42a8      	cmp	r0, r5
   86dfc:	d907      	bls.n	86e0e <__udivmoddi4+0xe6>
   86dfe:	197d      	adds	r5, r7, r5
   86e00:	f10c 32ff 	add.w	r2, ip, #4294967295
   86e04:	d202      	bcs.n	86e0c <__udivmoddi4+0xe4>
   86e06:	42a8      	cmp	r0, r5
   86e08:	f200 80e9 	bhi.w	86fde <__udivmoddi4+0x2b6>
   86e0c:	4694      	mov	ip, r2
   86e0e:	1a2d      	subs	r5, r5, r0
   86e10:	fbb5 f0fe 	udiv	r0, r5, lr
   86e14:	fb0e 5510 	mls	r5, lr, r0, r5
   86e18:	fb08 f800 	mul.w	r8, r8, r0
   86e1c:	b2a4      	uxth	r4, r4
   86e1e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   86e22:	45a0      	cmp	r8, r4
   86e24:	d907      	bls.n	86e36 <__udivmoddi4+0x10e>
   86e26:	193c      	adds	r4, r7, r4
   86e28:	f100 32ff 	add.w	r2, r0, #4294967295
   86e2c:	d202      	bcs.n	86e34 <__udivmoddi4+0x10c>
   86e2e:	45a0      	cmp	r8, r4
   86e30:	f200 80d9 	bhi.w	86fe6 <__udivmoddi4+0x2be>
   86e34:	4610      	mov	r0, r2
   86e36:	eba4 0408 	sub.w	r4, r4, r8
   86e3a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   86e3e:	e7c0      	b.n	86dc2 <__udivmoddi4+0x9a>
   86e40:	428b      	cmp	r3, r1
   86e42:	d908      	bls.n	86e56 <__udivmoddi4+0x12e>
   86e44:	2e00      	cmp	r6, #0
   86e46:	f000 80b1 	beq.w	86fac <__udivmoddi4+0x284>
   86e4a:	2100      	movs	r1, #0
   86e4c:	e9c6 0500 	strd	r0, r5, [r6]
   86e50:	4608      	mov	r0, r1
   86e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86e56:	fab3 f183 	clz	r1, r3
   86e5a:	2900      	cmp	r1, #0
   86e5c:	d14b      	bne.n	86ef6 <__udivmoddi4+0x1ce>
   86e5e:	42ab      	cmp	r3, r5
   86e60:	d302      	bcc.n	86e68 <__udivmoddi4+0x140>
   86e62:	4282      	cmp	r2, r0
   86e64:	f200 80b9 	bhi.w	86fda <__udivmoddi4+0x2b2>
   86e68:	1a84      	subs	r4, r0, r2
   86e6a:	eb65 0303 	sbc.w	r3, r5, r3
   86e6e:	2001      	movs	r0, #1
   86e70:	469e      	mov	lr, r3
   86e72:	2e00      	cmp	r6, #0
   86e74:	d0aa      	beq.n	86dcc <__udivmoddi4+0xa4>
   86e76:	e9c6 4e00 	strd	r4, lr, [r6]
   86e7a:	e7a7      	b.n	86dcc <__udivmoddi4+0xa4>
   86e7c:	409f      	lsls	r7, r3
   86e7e:	f1c3 0220 	rsb	r2, r3, #32
   86e82:	40d1      	lsrs	r1, r2
   86e84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   86e88:	fbb1 f0fe 	udiv	r0, r1, lr
   86e8c:	fa1f f887 	uxth.w	r8, r7
   86e90:	fb0e 1110 	mls	r1, lr, r0, r1
   86e94:	fa24 f202 	lsr.w	r2, r4, r2
   86e98:	409d      	lsls	r5, r3
   86e9a:	fb00 fc08 	mul.w	ip, r0, r8
   86e9e:	432a      	orrs	r2, r5
   86ea0:	0c15      	lsrs	r5, r2, #16
   86ea2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   86ea6:	45ac      	cmp	ip, r5
   86ea8:	fa04 f403 	lsl.w	r4, r4, r3
   86eac:	d909      	bls.n	86ec2 <__udivmoddi4+0x19a>
   86eae:	197d      	adds	r5, r7, r5
   86eb0:	f100 31ff 	add.w	r1, r0, #4294967295
   86eb4:	f080 808f 	bcs.w	86fd6 <__udivmoddi4+0x2ae>
   86eb8:	45ac      	cmp	ip, r5
   86eba:	f240 808c 	bls.w	86fd6 <__udivmoddi4+0x2ae>
   86ebe:	3802      	subs	r0, #2
   86ec0:	443d      	add	r5, r7
   86ec2:	eba5 050c 	sub.w	r5, r5, ip
   86ec6:	fbb5 f1fe 	udiv	r1, r5, lr
   86eca:	fb0e 5c11 	mls	ip, lr, r1, r5
   86ece:	fb01 f908 	mul.w	r9, r1, r8
   86ed2:	b295      	uxth	r5, r2
   86ed4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   86ed8:	45a9      	cmp	r9, r5
   86eda:	d907      	bls.n	86eec <__udivmoddi4+0x1c4>
   86edc:	197d      	adds	r5, r7, r5
   86ede:	f101 32ff 	add.w	r2, r1, #4294967295
   86ee2:	d274      	bcs.n	86fce <__udivmoddi4+0x2a6>
   86ee4:	45a9      	cmp	r9, r5
   86ee6:	d972      	bls.n	86fce <__udivmoddi4+0x2a6>
   86ee8:	3902      	subs	r1, #2
   86eea:	443d      	add	r5, r7
   86eec:	eba5 0509 	sub.w	r5, r5, r9
   86ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   86ef4:	e778      	b.n	86de8 <__udivmoddi4+0xc0>
   86ef6:	f1c1 0720 	rsb	r7, r1, #32
   86efa:	408b      	lsls	r3, r1
   86efc:	fa22 fc07 	lsr.w	ip, r2, r7
   86f00:	ea4c 0c03 	orr.w	ip, ip, r3
   86f04:	fa25 f407 	lsr.w	r4, r5, r7
   86f08:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   86f0c:	fbb4 f9fe 	udiv	r9, r4, lr
   86f10:	fa1f f88c 	uxth.w	r8, ip
   86f14:	fb0e 4419 	mls	r4, lr, r9, r4
   86f18:	fa20 f307 	lsr.w	r3, r0, r7
   86f1c:	fb09 fa08 	mul.w	sl, r9, r8
   86f20:	408d      	lsls	r5, r1
   86f22:	431d      	orrs	r5, r3
   86f24:	0c2b      	lsrs	r3, r5, #16
   86f26:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   86f2a:	45a2      	cmp	sl, r4
   86f2c:	fa02 f201 	lsl.w	r2, r2, r1
   86f30:	fa00 f301 	lsl.w	r3, r0, r1
   86f34:	d909      	bls.n	86f4a <__udivmoddi4+0x222>
   86f36:	eb1c 0404 	adds.w	r4, ip, r4
   86f3a:	f109 30ff 	add.w	r0, r9, #4294967295
   86f3e:	d248      	bcs.n	86fd2 <__udivmoddi4+0x2aa>
   86f40:	45a2      	cmp	sl, r4
   86f42:	d946      	bls.n	86fd2 <__udivmoddi4+0x2aa>
   86f44:	f1a9 0902 	sub.w	r9, r9, #2
   86f48:	4464      	add	r4, ip
   86f4a:	eba4 040a 	sub.w	r4, r4, sl
   86f4e:	fbb4 f0fe 	udiv	r0, r4, lr
   86f52:	fb0e 4410 	mls	r4, lr, r0, r4
   86f56:	fb00 fa08 	mul.w	sl, r0, r8
   86f5a:	b2ad      	uxth	r5, r5
   86f5c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   86f60:	45a2      	cmp	sl, r4
   86f62:	d908      	bls.n	86f76 <__udivmoddi4+0x24e>
   86f64:	eb1c 0404 	adds.w	r4, ip, r4
   86f68:	f100 35ff 	add.w	r5, r0, #4294967295
   86f6c:	d22d      	bcs.n	86fca <__udivmoddi4+0x2a2>
   86f6e:	45a2      	cmp	sl, r4
   86f70:	d92b      	bls.n	86fca <__udivmoddi4+0x2a2>
   86f72:	3802      	subs	r0, #2
   86f74:	4464      	add	r4, ip
   86f76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86f7a:	fba0 8902 	umull	r8, r9, r0, r2
   86f7e:	eba4 040a 	sub.w	r4, r4, sl
   86f82:	454c      	cmp	r4, r9
   86f84:	46c6      	mov	lr, r8
   86f86:	464d      	mov	r5, r9
   86f88:	d319      	bcc.n	86fbe <__udivmoddi4+0x296>
   86f8a:	d016      	beq.n	86fba <__udivmoddi4+0x292>
   86f8c:	b15e      	cbz	r6, 86fa6 <__udivmoddi4+0x27e>
   86f8e:	ebb3 020e 	subs.w	r2, r3, lr
   86f92:	eb64 0405 	sbc.w	r4, r4, r5
   86f96:	fa04 f707 	lsl.w	r7, r4, r7
   86f9a:	fa22 f301 	lsr.w	r3, r2, r1
   86f9e:	431f      	orrs	r7, r3
   86fa0:	40cc      	lsrs	r4, r1
   86fa2:	e9c6 7400 	strd	r7, r4, [r6]
   86fa6:	2100      	movs	r1, #0
   86fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86fac:	4631      	mov	r1, r6
   86fae:	4630      	mov	r0, r6
   86fb0:	e70c      	b.n	86dcc <__udivmoddi4+0xa4>
   86fb2:	468c      	mov	ip, r1
   86fb4:	e6eb      	b.n	86d8e <__udivmoddi4+0x66>
   86fb6:	4610      	mov	r0, r2
   86fb8:	e6ff      	b.n	86dba <__udivmoddi4+0x92>
   86fba:	4543      	cmp	r3, r8
   86fbc:	d2e6      	bcs.n	86f8c <__udivmoddi4+0x264>
   86fbe:	ebb8 0e02 	subs.w	lr, r8, r2
   86fc2:	eb69 050c 	sbc.w	r5, r9, ip
   86fc6:	3801      	subs	r0, #1
   86fc8:	e7e0      	b.n	86f8c <__udivmoddi4+0x264>
   86fca:	4628      	mov	r0, r5
   86fcc:	e7d3      	b.n	86f76 <__udivmoddi4+0x24e>
   86fce:	4611      	mov	r1, r2
   86fd0:	e78c      	b.n	86eec <__udivmoddi4+0x1c4>
   86fd2:	4681      	mov	r9, r0
   86fd4:	e7b9      	b.n	86f4a <__udivmoddi4+0x222>
   86fd6:	4608      	mov	r0, r1
   86fd8:	e773      	b.n	86ec2 <__udivmoddi4+0x19a>
   86fda:	4608      	mov	r0, r1
   86fdc:	e749      	b.n	86e72 <__udivmoddi4+0x14a>
   86fde:	f1ac 0c02 	sub.w	ip, ip, #2
   86fe2:	443d      	add	r5, r7
   86fe4:	e713      	b.n	86e0e <__udivmoddi4+0xe6>
   86fe6:	3802      	subs	r0, #2
   86fe8:	443c      	add	r4, r7
   86fea:	e724      	b.n	86e36 <__udivmoddi4+0x10e>

00086fec <__aeabi_idiv0>:
   86fec:	4770      	bx	lr
   86fee:	bf00      	nop

00086ff0 <__libc_init_array>:
   86ff0:	b570      	push	{r4, r5, r6, lr}
   86ff2:	4e0d      	ldr	r6, [pc, #52]	; (87028 <__libc_init_array+0x38>)
   86ff4:	4d0d      	ldr	r5, [pc, #52]	; (8702c <__libc_init_array+0x3c>)
   86ff6:	1b76      	subs	r6, r6, r5
   86ff8:	10b6      	asrs	r6, r6, #2
   86ffa:	d006      	beq.n	8700a <__libc_init_array+0x1a>
   86ffc:	2400      	movs	r4, #0
   86ffe:	f855 3b04 	ldr.w	r3, [r5], #4
   87002:	3401      	adds	r4, #1
   87004:	4798      	blx	r3
   87006:	42a6      	cmp	r6, r4
   87008:	d1f9      	bne.n	86ffe <__libc_init_array+0xe>
   8700a:	4e09      	ldr	r6, [pc, #36]	; (87030 <__libc_init_array+0x40>)
   8700c:	4d09      	ldr	r5, [pc, #36]	; (87034 <__libc_init_array+0x44>)
   8700e:	f006 ff2b 	bl	8de68 <_init>
   87012:	1b76      	subs	r6, r6, r5
   87014:	10b6      	asrs	r6, r6, #2
   87016:	d006      	beq.n	87026 <__libc_init_array+0x36>
   87018:	2400      	movs	r4, #0
   8701a:	f855 3b04 	ldr.w	r3, [r5], #4
   8701e:	3401      	adds	r4, #1
   87020:	4798      	blx	r3
   87022:	42a6      	cmp	r6, r4
   87024:	d1f9      	bne.n	8701a <__libc_init_array+0x2a>
   87026:	bd70      	pop	{r4, r5, r6, pc}
   87028:	0008de74 	.word	0x0008de74
   8702c:	0008de74 	.word	0x0008de74
   87030:	0008de7c 	.word	0x0008de7c
   87034:	0008de74 	.word	0x0008de74

00087038 <iprintf>:
   87038:	b40f      	push	{r0, r1, r2, r3}
   8703a:	b500      	push	{lr}
   8703c:	4907      	ldr	r1, [pc, #28]	; (8705c <iprintf+0x24>)
   8703e:	b083      	sub	sp, #12
   87040:	ab04      	add	r3, sp, #16
   87042:	6808      	ldr	r0, [r1, #0]
   87044:	f853 2b04 	ldr.w	r2, [r3], #4
   87048:	6881      	ldr	r1, [r0, #8]
   8704a:	9301      	str	r3, [sp, #4]
   8704c:	f001 fed4 	bl	88df8 <_vfiprintf_r>
   87050:	b003      	add	sp, #12
   87052:	f85d eb04 	ldr.w	lr, [sp], #4
   87056:	b004      	add	sp, #16
   87058:	4770      	bx	lr
   8705a:	bf00      	nop
   8705c:	20000440 	.word	0x20000440

00087060 <memcpy>:
   87060:	4684      	mov	ip, r0
   87062:	ea41 0300 	orr.w	r3, r1, r0
   87066:	f013 0303 	ands.w	r3, r3, #3
   8706a:	d149      	bne.n	87100 <memcpy+0xa0>
   8706c:	3a40      	subs	r2, #64	; 0x40
   8706e:	d323      	bcc.n	870b8 <memcpy+0x58>
   87070:	680b      	ldr	r3, [r1, #0]
   87072:	6003      	str	r3, [r0, #0]
   87074:	684b      	ldr	r3, [r1, #4]
   87076:	6043      	str	r3, [r0, #4]
   87078:	688b      	ldr	r3, [r1, #8]
   8707a:	6083      	str	r3, [r0, #8]
   8707c:	68cb      	ldr	r3, [r1, #12]
   8707e:	60c3      	str	r3, [r0, #12]
   87080:	690b      	ldr	r3, [r1, #16]
   87082:	6103      	str	r3, [r0, #16]
   87084:	694b      	ldr	r3, [r1, #20]
   87086:	6143      	str	r3, [r0, #20]
   87088:	698b      	ldr	r3, [r1, #24]
   8708a:	6183      	str	r3, [r0, #24]
   8708c:	69cb      	ldr	r3, [r1, #28]
   8708e:	61c3      	str	r3, [r0, #28]
   87090:	6a0b      	ldr	r3, [r1, #32]
   87092:	6203      	str	r3, [r0, #32]
   87094:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   87096:	6243      	str	r3, [r0, #36]	; 0x24
   87098:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8709a:	6283      	str	r3, [r0, #40]	; 0x28
   8709c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8709e:	62c3      	str	r3, [r0, #44]	; 0x2c
   870a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   870a2:	6303      	str	r3, [r0, #48]	; 0x30
   870a4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   870a6:	6343      	str	r3, [r0, #52]	; 0x34
   870a8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   870aa:	6383      	str	r3, [r0, #56]	; 0x38
   870ac:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   870ae:	63c3      	str	r3, [r0, #60]	; 0x3c
   870b0:	3040      	adds	r0, #64	; 0x40
   870b2:	3140      	adds	r1, #64	; 0x40
   870b4:	3a40      	subs	r2, #64	; 0x40
   870b6:	d2db      	bcs.n	87070 <memcpy+0x10>
   870b8:	3230      	adds	r2, #48	; 0x30
   870ba:	d30b      	bcc.n	870d4 <memcpy+0x74>
   870bc:	680b      	ldr	r3, [r1, #0]
   870be:	6003      	str	r3, [r0, #0]
   870c0:	684b      	ldr	r3, [r1, #4]
   870c2:	6043      	str	r3, [r0, #4]
   870c4:	688b      	ldr	r3, [r1, #8]
   870c6:	6083      	str	r3, [r0, #8]
   870c8:	68cb      	ldr	r3, [r1, #12]
   870ca:	60c3      	str	r3, [r0, #12]
   870cc:	3010      	adds	r0, #16
   870ce:	3110      	adds	r1, #16
   870d0:	3a10      	subs	r2, #16
   870d2:	d2f3      	bcs.n	870bc <memcpy+0x5c>
   870d4:	320c      	adds	r2, #12
   870d6:	d305      	bcc.n	870e4 <memcpy+0x84>
   870d8:	f851 3b04 	ldr.w	r3, [r1], #4
   870dc:	f840 3b04 	str.w	r3, [r0], #4
   870e0:	3a04      	subs	r2, #4
   870e2:	d2f9      	bcs.n	870d8 <memcpy+0x78>
   870e4:	3204      	adds	r2, #4
   870e6:	d008      	beq.n	870fa <memcpy+0x9a>
   870e8:	07d2      	lsls	r2, r2, #31
   870ea:	bf1c      	itt	ne
   870ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
   870f0:	f800 3b01 	strbne.w	r3, [r0], #1
   870f4:	d301      	bcc.n	870fa <memcpy+0x9a>
   870f6:	880b      	ldrh	r3, [r1, #0]
   870f8:	8003      	strh	r3, [r0, #0]
   870fa:	4660      	mov	r0, ip
   870fc:	4770      	bx	lr
   870fe:	bf00      	nop
   87100:	2a08      	cmp	r2, #8
   87102:	d313      	bcc.n	8712c <memcpy+0xcc>
   87104:	078b      	lsls	r3, r1, #30
   87106:	d0b1      	beq.n	8706c <memcpy+0xc>
   87108:	f010 0303 	ands.w	r3, r0, #3
   8710c:	d0ae      	beq.n	8706c <memcpy+0xc>
   8710e:	f1c3 0304 	rsb	r3, r3, #4
   87112:	1ad2      	subs	r2, r2, r3
   87114:	07db      	lsls	r3, r3, #31
   87116:	bf1c      	itt	ne
   87118:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8711c:	f800 3b01 	strbne.w	r3, [r0], #1
   87120:	d3a4      	bcc.n	8706c <memcpy+0xc>
   87122:	f831 3b02 	ldrh.w	r3, [r1], #2
   87126:	f820 3b02 	strh.w	r3, [r0], #2
   8712a:	e79f      	b.n	8706c <memcpy+0xc>
   8712c:	3a04      	subs	r2, #4
   8712e:	d3d9      	bcc.n	870e4 <memcpy+0x84>
   87130:	3a01      	subs	r2, #1
   87132:	f811 3b01 	ldrb.w	r3, [r1], #1
   87136:	f800 3b01 	strb.w	r3, [r0], #1
   8713a:	d2f9      	bcs.n	87130 <memcpy+0xd0>
   8713c:	780b      	ldrb	r3, [r1, #0]
   8713e:	7003      	strb	r3, [r0, #0]
   87140:	784b      	ldrb	r3, [r1, #1]
   87142:	7043      	strb	r3, [r0, #1]
   87144:	788b      	ldrb	r3, [r1, #2]
   87146:	7083      	strb	r3, [r0, #2]
   87148:	4660      	mov	r0, ip
   8714a:	4770      	bx	lr

0008714c <memset>:
   8714c:	b4f0      	push	{r4, r5, r6, r7}
   8714e:	0786      	lsls	r6, r0, #30
   87150:	d046      	beq.n	871e0 <memset+0x94>
   87152:	1e54      	subs	r4, r2, #1
   87154:	2a00      	cmp	r2, #0
   87156:	d03c      	beq.n	871d2 <memset+0x86>
   87158:	4603      	mov	r3, r0
   8715a:	b2ca      	uxtb	r2, r1
   8715c:	e001      	b.n	87162 <memset+0x16>
   8715e:	3c01      	subs	r4, #1
   87160:	d337      	bcc.n	871d2 <memset+0x86>
   87162:	f803 2b01 	strb.w	r2, [r3], #1
   87166:	079d      	lsls	r5, r3, #30
   87168:	d1f9      	bne.n	8715e <memset+0x12>
   8716a:	2c03      	cmp	r4, #3
   8716c:	d92a      	bls.n	871c4 <memset+0x78>
   8716e:	b2cd      	uxtb	r5, r1
   87170:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   87174:	2c0f      	cmp	r4, #15
   87176:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8717a:	d934      	bls.n	871e6 <memset+0x9a>
   8717c:	f1a4 0210 	sub.w	r2, r4, #16
   87180:	f022 0c0f 	bic.w	ip, r2, #15
   87184:	f103 0720 	add.w	r7, r3, #32
   87188:	0916      	lsrs	r6, r2, #4
   8718a:	4467      	add	r7, ip
   8718c:	f103 0210 	add.w	r2, r3, #16
   87190:	e942 5504 	strd	r5, r5, [r2, #-16]
   87194:	e942 5502 	strd	r5, r5, [r2, #-8]
   87198:	3210      	adds	r2, #16
   8719a:	42ba      	cmp	r2, r7
   8719c:	d1f8      	bne.n	87190 <memset+0x44>
   8719e:	1c72      	adds	r2, r6, #1
   871a0:	f014 0f0c 	tst.w	r4, #12
   871a4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   871a8:	f004 060f 	and.w	r6, r4, #15
   871ac:	d013      	beq.n	871d6 <memset+0x8a>
   871ae:	1f33      	subs	r3, r6, #4
   871b0:	f023 0303 	bic.w	r3, r3, #3
   871b4:	3304      	adds	r3, #4
   871b6:	4413      	add	r3, r2
   871b8:	f842 5b04 	str.w	r5, [r2], #4
   871bc:	4293      	cmp	r3, r2
   871be:	d1fb      	bne.n	871b8 <memset+0x6c>
   871c0:	f006 0403 	and.w	r4, r6, #3
   871c4:	b12c      	cbz	r4, 871d2 <memset+0x86>
   871c6:	b2ca      	uxtb	r2, r1
   871c8:	441c      	add	r4, r3
   871ca:	f803 2b01 	strb.w	r2, [r3], #1
   871ce:	429c      	cmp	r4, r3
   871d0:	d1fb      	bne.n	871ca <memset+0x7e>
   871d2:	bcf0      	pop	{r4, r5, r6, r7}
   871d4:	4770      	bx	lr
   871d6:	4634      	mov	r4, r6
   871d8:	4613      	mov	r3, r2
   871da:	2c00      	cmp	r4, #0
   871dc:	d1f3      	bne.n	871c6 <memset+0x7a>
   871de:	e7f8      	b.n	871d2 <memset+0x86>
   871e0:	4614      	mov	r4, r2
   871e2:	4603      	mov	r3, r0
   871e4:	e7c1      	b.n	8716a <memset+0x1e>
   871e6:	461a      	mov	r2, r3
   871e8:	4626      	mov	r6, r4
   871ea:	e7e0      	b.n	871ae <memset+0x62>

000871ec <sprintf>:
   871ec:	b40e      	push	{r1, r2, r3}
   871ee:	4601      	mov	r1, r0
   871f0:	b530      	push	{r4, r5, lr}
   871f2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   871f6:	b09c      	sub	sp, #112	; 0x70
   871f8:	ab1f      	add	r3, sp, #124	; 0x7c
   871fa:	480b      	ldr	r0, [pc, #44]	; (87228 <sprintf+0x3c>)
   871fc:	f853 2b04 	ldr.w	r2, [r3], #4
   87200:	4d0a      	ldr	r5, [pc, #40]	; (8722c <sprintf+0x40>)
   87202:	9102      	str	r1, [sp, #8]
   87204:	9106      	str	r1, [sp, #24]
   87206:	6800      	ldr	r0, [r0, #0]
   87208:	a902      	add	r1, sp, #8
   8720a:	9301      	str	r3, [sp, #4]
   8720c:	e9cd 4504 	strd	r4, r5, [sp, #16]
   87210:	9407      	str	r4, [sp, #28]
   87212:	f000 f80d 	bl	87230 <_svfprintf_r>
   87216:	2200      	movs	r2, #0
   87218:	9b02      	ldr	r3, [sp, #8]
   8721a:	701a      	strb	r2, [r3, #0]
   8721c:	b01c      	add	sp, #112	; 0x70
   8721e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   87222:	b003      	add	sp, #12
   87224:	4770      	bx	lr
   87226:	bf00      	nop
   87228:	20000440 	.word	0x20000440
   8722c:	ffff0208 	.word	0xffff0208

00087230 <_svfprintf_r>:
   87230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87234:	b0d7      	sub	sp, #348	; 0x15c
   87236:	468b      	mov	fp, r1
   87238:	4617      	mov	r7, r2
   8723a:	930e      	str	r3, [sp, #56]	; 0x38
   8723c:	4681      	mov	r9, r0
   8723e:	f004 f9e1 	bl	8b604 <_localeconv_r>
   87242:	6803      	ldr	r3, [r0, #0]
   87244:	4618      	mov	r0, r3
   87246:	9318      	str	r3, [sp, #96]	; 0x60
   87248:	f005 fbd6 	bl	8c9f8 <strlen>
   8724c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   87250:	9017      	str	r0, [sp, #92]	; 0x5c
   87252:	061d      	lsls	r5, r3, #24
   87254:	d504      	bpl.n	87260 <_svfprintf_r+0x30>
   87256:	f8db 3010 	ldr.w	r3, [fp, #16]
   8725a:	2b00      	cmp	r3, #0
   8725c:	f000 87df 	beq.w	8821e <_svfprintf_r+0xfee>
   87260:	2300      	movs	r3, #0
   87262:	2100      	movs	r1, #0
   87264:	2200      	movs	r2, #0
   87266:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   8726a:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   8726e:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   87272:	9313      	str	r3, [sp, #76]	; 0x4c
   87274:	9319      	str	r3, [sp, #100]	; 0x64
   87276:	930a      	str	r3, [sp, #40]	; 0x28
   87278:	ab2d      	add	r3, sp, #180	; 0xb4
   8727a:	4698      	mov	r8, r3
   8727c:	932a      	str	r3, [sp, #168]	; 0xa8
   8727e:	783b      	ldrb	r3, [r7, #0]
   87280:	46da      	mov	sl, fp
   87282:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   87286:	2b00      	cmp	r3, #0
   87288:	f000 81a4 	beq.w	875d4 <_svfprintf_r+0x3a4>
   8728c:	463c      	mov	r4, r7
   8728e:	e004      	b.n	8729a <_svfprintf_r+0x6a>
   87290:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   87294:	2b00      	cmp	r3, #0
   87296:	f000 80fd 	beq.w	87494 <_svfprintf_r+0x264>
   8729a:	2b25      	cmp	r3, #37	; 0x25
   8729c:	d1f8      	bne.n	87290 <_svfprintf_r+0x60>
   8729e:	1be5      	subs	r5, r4, r7
   872a0:	f040 80fb 	bne.w	8749a <_svfprintf_r+0x26a>
   872a4:	7823      	ldrb	r3, [r4, #0]
   872a6:	2b00      	cmp	r3, #0
   872a8:	f000 8194 	beq.w	875d4 <_svfprintf_r+0x3a4>
   872ac:	2300      	movs	r3, #0
   872ae:	930b      	str	r3, [sp, #44]	; 0x2c
   872b0:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   872b4:	9307      	str	r3, [sp, #28]
   872b6:	f04f 33ff 	mov.w	r3, #4294967295
   872ba:	7866      	ldrb	r6, [r4, #1]
   872bc:	f104 0b01 	add.w	fp, r4, #1
   872c0:	2120      	movs	r1, #32
   872c2:	242b      	movs	r4, #43	; 0x2b
   872c4:	9309      	str	r3, [sp, #36]	; 0x24
   872c6:	f10b 0b01 	add.w	fp, fp, #1
   872ca:	f1a6 0320 	sub.w	r3, r6, #32
   872ce:	2b5a      	cmp	r3, #90	; 0x5a
   872d0:	f200 80ff 	bhi.w	874d2 <_svfprintf_r+0x2a2>
   872d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   872d8:	00fd02bc 	.word	0x00fd02bc
   872dc:	02b500fd 	.word	0x02b500fd
   872e0:	00fd00fd 	.word	0x00fd00fd
   872e4:	029100fd 	.word	0x029100fd
   872e8:	00fd00fd 	.word	0x00fd00fd
   872ec:	02e7006a 	.word	0x02e7006a
   872f0:	023400fd 	.word	0x023400fd
   872f4:	00fd02cd 	.word	0x00fd02cd
   872f8:	005b02c6 	.word	0x005b02c6
   872fc:	005b005b 	.word	0x005b005b
   87300:	005b005b 	.word	0x005b005b
   87304:	005b005b 	.word	0x005b005b
   87308:	005b005b 	.word	0x005b005b
   8730c:	00fd00fd 	.word	0x00fd00fd
   87310:	00fd00fd 	.word	0x00fd00fd
   87314:	00fd00fd 	.word	0x00fd00fd
   87318:	019000fd 	.word	0x019000fd
   8731c:	01f700fd 	.word	0x01f700fd
   87320:	0190007c 	.word	0x0190007c
   87324:	01900190 	.word	0x01900190
   87328:	00fd00fd 	.word	0x00fd00fd
   8732c:	00fd00fd 	.word	0x00fd00fd
   87330:	00fd028a 	.word	0x00fd028a
   87334:	00a900fd 	.word	0x00a900fd
   87338:	00fd00fd 	.word	0x00fd00fd
   8733c:	020b00fd 	.word	0x020b00fd
   87340:	023b00fd 	.word	0x023b00fd
   87344:	00fd00fd 	.word	0x00fd00fd
   87348:	00fd0781 	.word	0x00fd0781
   8734c:	00fd00fd 	.word	0x00fd00fd
   87350:	00fd00fd 	.word	0x00fd00fd
   87354:	00fd00fd 	.word	0x00fd00fd
   87358:	019000fd 	.word	0x019000fd
   8735c:	01f700fd 	.word	0x01f700fd
   87360:	01900080 	.word	0x01900080
   87364:	01900190 	.word	0x01900190
   87368:	00800280 	.word	0x00800280
   8736c:	00fd0075 	.word	0x00fd0075
   87370:	00fd0276 	.word	0x00fd0276
   87374:	00ad025e 	.word	0x00ad025e
   87378:	0075024c 	.word	0x0075024c
   8737c:	020b00fd 	.word	0x020b00fd
   87380:	075b0072 	.word	0x075b0072
   87384:	00fd00fd 	.word	0x00fd00fd
   87388:	00fd075f 	.word	0x00fd075f
   8738c:	0072      	.short	0x0072
   8738e:	2200      	movs	r2, #0
   87390:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87394:	f81b 6b01 	ldrb.w	r6, [fp], #1
   87398:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8739c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   873a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   873a4:	2b09      	cmp	r3, #9
   873a6:	d9f5      	bls.n	87394 <_svfprintf_r+0x164>
   873a8:	920b      	str	r2, [sp, #44]	; 0x2c
   873aa:	e78e      	b.n	872ca <_svfprintf_r+0x9a>
   873ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   873ae:	f853 2b04 	ldr.w	r2, [r3], #4
   873b2:	2a00      	cmp	r2, #0
   873b4:	920b      	str	r2, [sp, #44]	; 0x2c
   873b6:	930e      	str	r3, [sp, #56]	; 0x38
   873b8:	f2c0 81bf 	blt.w	8773a <_svfprintf_r+0x50a>
   873bc:	f89b 6000 	ldrb.w	r6, [fp]
   873c0:	e781      	b.n	872c6 <_svfprintf_r+0x96>
   873c2:	9b07      	ldr	r3, [sp, #28]
   873c4:	f89b 6000 	ldrb.w	r6, [fp]
   873c8:	f043 0320 	orr.w	r3, r3, #32
   873cc:	9307      	str	r3, [sp, #28]
   873ce:	e77a      	b.n	872c6 <_svfprintf_r+0x96>
   873d0:	9b07      	ldr	r3, [sp, #28]
   873d2:	f043 0310 	orr.w	r3, r3, #16
   873d6:	9307      	str	r3, [sp, #28]
   873d8:	9b07      	ldr	r3, [sp, #28]
   873da:	069c      	lsls	r4, r3, #26
   873dc:	f140 8162 	bpl.w	876a4 <_svfprintf_r+0x474>
   873e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   873e2:	3307      	adds	r3, #7
   873e4:	f023 0307 	bic.w	r3, r3, #7
   873e8:	4619      	mov	r1, r3
   873ea:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   873ee:	4614      	mov	r4, r2
   873f0:	461d      	mov	r5, r3
   873f2:	910e      	str	r1, [sp, #56]	; 0x38
   873f4:	2a00      	cmp	r2, #0
   873f6:	f173 0300 	sbcs.w	r3, r3, #0
   873fa:	f2c0 85ab 	blt.w	87f54 <_svfprintf_r+0xd24>
   873fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87400:	3301      	adds	r3, #1
   87402:	9b07      	ldr	r3, [sp, #28]
   87404:	f000 8414 	beq.w	87c30 <_svfprintf_r+0xa00>
   87408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8740c:	ea54 0205 	orrs.w	r2, r4, r5
   87410:	9308      	str	r3, [sp, #32]
   87412:	f040 840e 	bne.w	87c32 <_svfprintf_r+0xa02>
   87416:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87418:	2a00      	cmp	r2, #0
   8741a:	f040 840f 	bne.w	87c3c <_svfprintf_r+0xa0c>
   8741e:	9307      	str	r3, [sp, #28]
   87420:	2300      	movs	r3, #0
   87422:	af56      	add	r7, sp, #344	; 0x158
   87424:	9309      	str	r3, [sp, #36]	; 0x24
   87426:	930c      	str	r3, [sp, #48]	; 0x30
   87428:	e26b      	b.n	87902 <_svfprintf_r+0x6d2>
   8742a:	9b07      	ldr	r3, [sp, #28]
   8742c:	f043 0310 	orr.w	r3, r3, #16
   87430:	9307      	str	r3, [sp, #28]
   87432:	9b07      	ldr	r3, [sp, #28]
   87434:	069a      	lsls	r2, r3, #26
   87436:	f140 8126 	bpl.w	87686 <_svfprintf_r+0x456>
   8743a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8743c:	3307      	adds	r3, #7
   8743e:	f023 0307 	bic.w	r3, r3, #7
   87442:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87446:	930e      	str	r3, [sp, #56]	; 0x38
   87448:	9b07      	ldr	r3, [sp, #28]
   8744a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   8744e:	9308      	str	r3, [sp, #32]
   87450:	2300      	movs	r3, #0
   87452:	2200      	movs	r2, #0
   87454:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   87458:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8745a:	4611      	mov	r1, r2
   8745c:	3101      	adds	r1, #1
   8745e:	f000 8231 	beq.w	878c4 <_svfprintf_r+0x694>
   87462:	9908      	ldr	r1, [sp, #32]
   87464:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   87468:	9107      	str	r1, [sp, #28]
   8746a:	ea54 0105 	orrs.w	r1, r4, r5
   8746e:	f040 8227 	bne.w	878c0 <_svfprintf_r+0x690>
   87472:	2a00      	cmp	r2, #0
   87474:	f040 837d 	bne.w	87b72 <_svfprintf_r+0x942>
   87478:	2b00      	cmp	r3, #0
   8747a:	d1d1      	bne.n	87420 <_svfprintf_r+0x1f0>
   8747c:	9b08      	ldr	r3, [sp, #32]
   8747e:	f013 0301 	ands.w	r3, r3, #1
   87482:	930c      	str	r3, [sp, #48]	; 0x30
   87484:	f000 8590 	beq.w	87fa8 <_svfprintf_r+0xd78>
   87488:	2330      	movs	r3, #48	; 0x30
   8748a:	f20d 1757 	addw	r7, sp, #343	; 0x157
   8748e:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   87492:	e236      	b.n	87902 <_svfprintf_r+0x6d2>
   87494:	1be5      	subs	r5, r4, r7
   87496:	f000 809d 	beq.w	875d4 <_svfprintf_r+0x3a4>
   8749a:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   8749e:	3301      	adds	r3, #1
   874a0:	442a      	add	r2, r5
   874a2:	2b07      	cmp	r3, #7
   874a4:	e9c8 7500 	strd	r7, r5, [r8]
   874a8:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   874ac:	dc06      	bgt.n	874bc <_svfprintf_r+0x28c>
   874ae:	f108 0808 	add.w	r8, r8, #8
   874b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   874b4:	7823      	ldrb	r3, [r4, #0]
   874b6:	442a      	add	r2, r5
   874b8:	920a      	str	r2, [sp, #40]	; 0x28
   874ba:	e6f4      	b.n	872a6 <_svfprintf_r+0x76>
   874bc:	4651      	mov	r1, sl
   874be:	4648      	mov	r0, r9
   874c0:	aa2a      	add	r2, sp, #168	; 0xa8
   874c2:	f005 fafb 	bl	8cabc <__ssprint_r>
   874c6:	2800      	cmp	r0, #0
   874c8:	f041 83ce 	bne.w	88c68 <_svfprintf_r+0x1a38>
   874cc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   874d0:	e7ef      	b.n	874b2 <_svfprintf_r+0x282>
   874d2:	2e00      	cmp	r6, #0
   874d4:	d07e      	beq.n	875d4 <_svfprintf_r+0x3a4>
   874d6:	2300      	movs	r3, #0
   874d8:	2101      	movs	r1, #1
   874da:	461a      	mov	r2, r3
   874dc:	9108      	str	r1, [sp, #32]
   874de:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   874e2:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   874e6:	930d      	str	r3, [sp, #52]	; 0x34
   874e8:	9309      	str	r3, [sp, #36]	; 0x24
   874ea:	9312      	str	r3, [sp, #72]	; 0x48
   874ec:	9316      	str	r3, [sp, #88]	; 0x58
   874ee:	9310      	str	r3, [sp, #64]	; 0x40
   874f0:	910c      	str	r1, [sp, #48]	; 0x30
   874f2:	af3d      	add	r7, sp, #244	; 0xf4
   874f4:	9b07      	ldr	r3, [sp, #28]
   874f6:	f013 0302 	ands.w	r3, r3, #2
   874fa:	d002      	beq.n	87502 <_svfprintf_r+0x2d2>
   874fc:	9908      	ldr	r1, [sp, #32]
   874fe:	3102      	adds	r1, #2
   87500:	9108      	str	r1, [sp, #32]
   87502:	9907      	ldr	r1, [sp, #28]
   87504:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   87508:	910f      	str	r1, [sp, #60]	; 0x3c
   8750a:	d105      	bne.n	87518 <_svfprintf_r+0x2e8>
   8750c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8750e:	9808      	ldr	r0, [sp, #32]
   87510:	1a0d      	subs	r5, r1, r0
   87512:	2d00      	cmp	r5, #0
   87514:	f300 834b 	bgt.w	87bae <_svfprintf_r+0x97e>
   87518:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8751a:	b172      	cbz	r2, 8753a <_svfprintf_r+0x30a>
   8751c:	2001      	movs	r0, #1
   8751e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87520:	4404      	add	r4, r0
   87522:	4402      	add	r2, r0
   87524:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   87528:	2a07      	cmp	r2, #7
   8752a:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   8752e:	e9c8 1000 	strd	r1, r0, [r8]
   87532:	f300 83cd 	bgt.w	87cd0 <_svfprintf_r+0xaa0>
   87536:	f108 0808 	add.w	r8, r8, #8
   8753a:	b16b      	cbz	r3, 87558 <_svfprintf_r+0x328>
   8753c:	2102      	movs	r1, #2
   8753e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87540:	440c      	add	r4, r1
   87542:	3301      	adds	r3, #1
   87544:	aa23      	add	r2, sp, #140	; 0x8c
   87546:	2b07      	cmp	r3, #7
   87548:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8754c:	e9c8 2100 	strd	r2, r1, [r8]
   87550:	f300 83cc 	bgt.w	87cec <_svfprintf_r+0xabc>
   87554:	f108 0808 	add.w	r8, r8, #8
   87558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8755a:	2b80      	cmp	r3, #128	; 0x80
   8755c:	f000 8234 	beq.w	879c8 <_svfprintf_r+0x798>
   87560:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87564:	1a9d      	subs	r5, r3, r2
   87566:	2d00      	cmp	r5, #0
   87568:	f300 826e 	bgt.w	87a48 <_svfprintf_r+0x818>
   8756c:	9b07      	ldr	r3, [sp, #28]
   8756e:	05d9      	lsls	r1, r3, #23
   87570:	f100 81d5 	bmi.w	8791e <_svfprintf_r+0x6ee>
   87574:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87578:	3301      	adds	r3, #1
   8757a:	4414      	add	r4, r2
   8757c:	2b07      	cmp	r3, #7
   8757e:	e9c8 7200 	strd	r7, r2, [r8]
   87582:	942c      	str	r4, [sp, #176]	; 0xb0
   87584:	932b      	str	r3, [sp, #172]	; 0xac
   87586:	f300 8397 	bgt.w	87cb8 <_svfprintf_r+0xa88>
   8758a:	f108 0808 	add.w	r8, r8, #8
   8758e:	9b07      	ldr	r3, [sp, #28]
   87590:	0759      	lsls	r1, r3, #29
   87592:	d505      	bpl.n	875a0 <_svfprintf_r+0x370>
   87594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87596:	9a08      	ldr	r2, [sp, #32]
   87598:	1a9d      	subs	r5, r3, r2
   8759a:	2d00      	cmp	r5, #0
   8759c:	f300 83b2 	bgt.w	87d04 <_svfprintf_r+0xad4>
   875a0:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   875a4:	9908      	ldr	r1, [sp, #32]
   875a6:	428a      	cmp	r2, r1
   875a8:	bfac      	ite	ge
   875aa:	189b      	addge	r3, r3, r2
   875ac:	185b      	addlt	r3, r3, r1
   875ae:	930a      	str	r3, [sp, #40]	; 0x28
   875b0:	2c00      	cmp	r4, #0
   875b2:	f040 827d 	bne.w	87ab0 <_svfprintf_r+0x880>
   875b6:	2300      	movs	r3, #0
   875b8:	932b      	str	r3, [sp, #172]	; 0xac
   875ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   875bc:	b11b      	cbz	r3, 875c6 <_svfprintf_r+0x396>
   875be:	4648      	mov	r0, r9
   875c0:	990d      	ldr	r1, [sp, #52]	; 0x34
   875c2:	f003 fd79 	bl	8b0b8 <_free_r>
   875c6:	465f      	mov	r7, fp
   875c8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   875cc:	783b      	ldrb	r3, [r7, #0]
   875ce:	2b00      	cmp	r3, #0
   875d0:	f47f ae5c 	bne.w	8728c <_svfprintf_r+0x5c>
   875d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   875d6:	46d3      	mov	fp, sl
   875d8:	2b00      	cmp	r3, #0
   875da:	f041 824b 	bne.w	88a74 <_svfprintf_r+0x1844>
   875de:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   875e2:	f013 0f40 	tst.w	r3, #64	; 0x40
   875e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   875e8:	bf18      	it	ne
   875ea:	f04f 33ff 	movne.w	r3, #4294967295
   875ee:	930a      	str	r3, [sp, #40]	; 0x28
   875f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   875f2:	b057      	add	sp, #348	; 0x15c
   875f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   875f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   875fa:	3307      	adds	r3, #7
   875fc:	f023 0307 	bic.w	r3, r3, #7
   87600:	4619      	mov	r1, r3
   87602:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   87606:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8760a:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   8760e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   87612:	461d      	mov	r5, r3
   87614:	4618      	mov	r0, r3
   87616:	910e      	str	r1, [sp, #56]	; 0x38
   87618:	f04f 32ff 	mov.w	r2, #4294967295
   8761c:	4621      	mov	r1, r4
   8761e:	4ba4      	ldr	r3, [pc, #656]	; (878b0 <_svfprintf_r+0x680>)
   87620:	f006 f980 	bl	8d924 <__aeabi_dcmpun>
   87624:	2800      	cmp	r0, #0
   87626:	f040 84d9 	bne.w	87fdc <_svfprintf_r+0xdac>
   8762a:	4628      	mov	r0, r5
   8762c:	4621      	mov	r1, r4
   8762e:	f04f 32ff 	mov.w	r2, #4294967295
   87632:	4b9f      	ldr	r3, [pc, #636]	; (878b0 <_svfprintf_r+0x680>)
   87634:	f006 f958 	bl	8d8e8 <__aeabi_dcmple>
   87638:	2800      	cmp	r0, #0
   8763a:	f040 84cf 	bne.w	87fdc <_svfprintf_r+0xdac>
   8763e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87642:	2200      	movs	r2, #0
   87644:	2300      	movs	r3, #0
   87646:	f006 f945 	bl	8d8d4 <__aeabi_dcmplt>
   8764a:	2800      	cmp	r0, #0
   8764c:	f041 800e 	bne.w	8866c <_svfprintf_r+0x143c>
   87650:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87654:	2003      	movs	r0, #3
   87656:	2100      	movs	r1, #0
   87658:	4f96      	ldr	r7, [pc, #600]	; (878b4 <_svfprintf_r+0x684>)
   8765a:	4b97      	ldr	r3, [pc, #604]	; (878b8 <_svfprintf_r+0x688>)
   8765c:	9008      	str	r0, [sp, #32]
   8765e:	910d      	str	r1, [sp, #52]	; 0x34
   87660:	2e47      	cmp	r6, #71	; 0x47
   87662:	bfc8      	it	gt
   87664:	461f      	movgt	r7, r3
   87666:	9c07      	ldr	r4, [sp, #28]
   87668:	900c      	str	r0, [sp, #48]	; 0x30
   8766a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   8766e:	9407      	str	r4, [sp, #28]
   87670:	9109      	str	r1, [sp, #36]	; 0x24
   87672:	9112      	str	r1, [sp, #72]	; 0x48
   87674:	9116      	str	r1, [sp, #88]	; 0x58
   87676:	9110      	str	r1, [sp, #64]	; 0x40
   87678:	2a00      	cmp	r2, #0
   8767a:	f43f af3b 	beq.w	874f4 <_svfprintf_r+0x2c4>
   8767e:	9b08      	ldr	r3, [sp, #32]
   87680:	3301      	adds	r3, #1
   87682:	9308      	str	r3, [sp, #32]
   87684:	e736      	b.n	874f4 <_svfprintf_r+0x2c4>
   87686:	9b07      	ldr	r3, [sp, #28]
   87688:	06db      	lsls	r3, r3, #27
   8768a:	f100 849c 	bmi.w	87fc6 <_svfprintf_r+0xd96>
   8768e:	9b07      	ldr	r3, [sp, #28]
   87690:	065f      	lsls	r7, r3, #25
   87692:	f140 87b2 	bpl.w	885fa <_svfprintf_r+0x13ca>
   87696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87698:	2500      	movs	r5, #0
   8769a:	f853 4b04 	ldr.w	r4, [r3], #4
   8769e:	930e      	str	r3, [sp, #56]	; 0x38
   876a0:	b2a4      	uxth	r4, r4
   876a2:	e6d1      	b.n	87448 <_svfprintf_r+0x218>
   876a4:	9b07      	ldr	r3, [sp, #28]
   876a6:	06d8      	lsls	r0, r3, #27
   876a8:	f100 8568 	bmi.w	8817c <_svfprintf_r+0xf4c>
   876ac:	9b07      	ldr	r3, [sp, #28]
   876ae:	0659      	lsls	r1, r3, #25
   876b0:	f140 87be 	bpl.w	88630 <_svfprintf_r+0x1400>
   876b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   876b6:	f853 4b04 	ldr.w	r4, [r3], #4
   876ba:	b224      	sxth	r4, r4
   876bc:	17e5      	asrs	r5, r4, #31
   876be:	930e      	str	r3, [sp, #56]	; 0x38
   876c0:	4622      	mov	r2, r4
   876c2:	462b      	mov	r3, r5
   876c4:	e696      	b.n	873f4 <_svfprintf_r+0x1c4>
   876c6:	2100      	movs	r1, #0
   876c8:	2401      	movs	r4, #1
   876ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   876cc:	460a      	mov	r2, r1
   876ce:	f853 0b04 	ldr.w	r0, [r3], #4
   876d2:	9408      	str	r4, [sp, #32]
   876d4:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   876d8:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   876dc:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   876e0:	9109      	str	r1, [sp, #36]	; 0x24
   876e2:	9112      	str	r1, [sp, #72]	; 0x48
   876e4:	9116      	str	r1, [sp, #88]	; 0x58
   876e6:	9110      	str	r1, [sp, #64]	; 0x40
   876e8:	940c      	str	r4, [sp, #48]	; 0x30
   876ea:	af3d      	add	r7, sp, #244	; 0xf4
   876ec:	e702      	b.n	874f4 <_svfprintf_r+0x2c4>
   876ee:	2500      	movs	r5, #0
   876f0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   876f2:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   876f6:	f854 7b04 	ldr.w	r7, [r4], #4
   876fa:	2f00      	cmp	r7, #0
   876fc:	f000 859f 	beq.w	8823e <_svfprintf_r+0x100e>
   87700:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87702:	4613      	mov	r3, r2
   87704:	3301      	adds	r3, #1
   87706:	f000 8770 	beq.w	885ea <_svfprintf_r+0x13ba>
   8770a:	4629      	mov	r1, r5
   8770c:	4638      	mov	r0, r7
   8770e:	f004 fac1 	bl	8bc94 <memchr>
   87712:	900d      	str	r0, [sp, #52]	; 0x34
   87714:	2800      	cmp	r0, #0
   87716:	f001 80b9 	beq.w	8888c <_svfprintf_r+0x165c>
   8771a:	462b      	mov	r3, r5
   8771c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8771e:	9509      	str	r5, [sp, #36]	; 0x24
   87720:	1bd2      	subs	r2, r2, r7
   87722:	920c      	str	r2, [sp, #48]	; 0x30
   87724:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   87728:	9208      	str	r2, [sp, #32]
   8772a:	940e      	str	r4, [sp, #56]	; 0x38
   8772c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87730:	930d      	str	r3, [sp, #52]	; 0x34
   87732:	9312      	str	r3, [sp, #72]	; 0x48
   87734:	9316      	str	r3, [sp, #88]	; 0x58
   87736:	9310      	str	r3, [sp, #64]	; 0x40
   87738:	e79e      	b.n	87678 <_svfprintf_r+0x448>
   8773a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8773c:	425b      	negs	r3, r3
   8773e:	930b      	str	r3, [sp, #44]	; 0x2c
   87740:	9b07      	ldr	r3, [sp, #28]
   87742:	f89b 6000 	ldrb.w	r6, [fp]
   87746:	f043 0304 	orr.w	r3, r3, #4
   8774a:	9307      	str	r3, [sp, #28]
   8774c:	e5bb      	b.n	872c6 <_svfprintf_r+0x96>
   8774e:	9b07      	ldr	r3, [sp, #28]
   87750:	f043 0310 	orr.w	r3, r3, #16
   87754:	9308      	str	r3, [sp, #32]
   87756:	9b08      	ldr	r3, [sp, #32]
   87758:	069d      	lsls	r5, r3, #26
   8775a:	f140 83ea 	bpl.w	87f32 <_svfprintf_r+0xd02>
   8775e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87760:	3307      	adds	r3, #7
   87762:	f023 0307 	bic.w	r3, r3, #7
   87766:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8776a:	930e      	str	r3, [sp, #56]	; 0x38
   8776c:	2301      	movs	r3, #1
   8776e:	e670      	b.n	87452 <_svfprintf_r+0x222>
   87770:	f647 0230 	movw	r2, #30768	; 0x7830
   87774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87776:	9907      	ldr	r1, [sp, #28]
   87778:	f853 4b04 	ldr.w	r4, [r3], #4
   8777c:	f041 0102 	orr.w	r1, r1, #2
   87780:	930e      	str	r3, [sp, #56]	; 0x38
   87782:	4b4e      	ldr	r3, [pc, #312]	; (878bc <_svfprintf_r+0x68c>)
   87784:	2500      	movs	r5, #0
   87786:	9319      	str	r3, [sp, #100]	; 0x64
   87788:	2678      	movs	r6, #120	; 0x78
   8778a:	2302      	movs	r3, #2
   8778c:	9108      	str	r1, [sp, #32]
   8778e:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   87792:	e65e      	b.n	87452 <_svfprintf_r+0x222>
   87794:	9b07      	ldr	r3, [sp, #28]
   87796:	069d      	lsls	r5, r3, #26
   87798:	f100 8408 	bmi.w	87fac <_svfprintf_r+0xd7c>
   8779c:	9b07      	ldr	r3, [sp, #28]
   8779e:	06dc      	lsls	r4, r3, #27
   877a0:	f100 86e1 	bmi.w	88566 <_svfprintf_r+0x1336>
   877a4:	9b07      	ldr	r3, [sp, #28]
   877a6:	0658      	lsls	r0, r3, #25
   877a8:	f100 8795 	bmi.w	886d6 <_svfprintf_r+0x14a6>
   877ac:	9b07      	ldr	r3, [sp, #28]
   877ae:	0599      	lsls	r1, r3, #22
   877b0:	f140 86d9 	bpl.w	88566 <_svfprintf_r+0x1336>
   877b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   877b6:	990a      	ldr	r1, [sp, #40]	; 0x28
   877b8:	f853 2b04 	ldr.w	r2, [r3], #4
   877bc:	465f      	mov	r7, fp
   877be:	7011      	strb	r1, [r2, #0]
   877c0:	930e      	str	r3, [sp, #56]	; 0x38
   877c2:	e703      	b.n	875cc <_svfprintf_r+0x39c>
   877c4:	f89b 6000 	ldrb.w	r6, [fp]
   877c8:	9b07      	ldr	r3, [sp, #28]
   877ca:	2e6c      	cmp	r6, #108	; 0x6c
   877cc:	f000 8508 	beq.w	881e0 <_svfprintf_r+0xfb0>
   877d0:	f043 0310 	orr.w	r3, r3, #16
   877d4:	9307      	str	r3, [sp, #28]
   877d6:	e576      	b.n	872c6 <_svfprintf_r+0x96>
   877d8:	f89b 6000 	ldrb.w	r6, [fp]
   877dc:	9b07      	ldr	r3, [sp, #28]
   877de:	2e68      	cmp	r6, #104	; 0x68
   877e0:	f000 8507 	beq.w	881f2 <_svfprintf_r+0xfc2>
   877e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   877e8:	9307      	str	r3, [sp, #28]
   877ea:	e56c      	b.n	872c6 <_svfprintf_r+0x96>
   877ec:	9b07      	ldr	r3, [sp, #28]
   877ee:	f89b 6000 	ldrb.w	r6, [fp]
   877f2:	f043 0308 	orr.w	r3, r3, #8
   877f6:	9307      	str	r3, [sp, #28]
   877f8:	e565      	b.n	872c6 <_svfprintf_r+0x96>
   877fa:	4648      	mov	r0, r9
   877fc:	f003 ff02 	bl	8b604 <_localeconv_r>
   87800:	6843      	ldr	r3, [r0, #4]
   87802:	4618      	mov	r0, r3
   87804:	931c      	str	r3, [sp, #112]	; 0x70
   87806:	f005 f8f7 	bl	8c9f8 <strlen>
   8780a:	4603      	mov	r3, r0
   8780c:	4648      	mov	r0, r9
   8780e:	461d      	mov	r5, r3
   87810:	931d      	str	r3, [sp, #116]	; 0x74
   87812:	f003 fef7 	bl	8b604 <_localeconv_r>
   87816:	6882      	ldr	r2, [r0, #8]
   87818:	2120      	movs	r1, #32
   8781a:	921a      	str	r2, [sp, #104]	; 0x68
   8781c:	2d00      	cmp	r5, #0
   8781e:	f43f adcd 	beq.w	873bc <_svfprintf_r+0x18c>
   87822:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   87824:	2b00      	cmp	r3, #0
   87826:	f43f adc9 	beq.w	873bc <_svfprintf_r+0x18c>
   8782a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8782c:	781b      	ldrb	r3, [r3, #0]
   8782e:	2b00      	cmp	r3, #0
   87830:	f43f adc4 	beq.w	873bc <_svfprintf_r+0x18c>
   87834:	9b07      	ldr	r3, [sp, #28]
   87836:	f89b 6000 	ldrb.w	r6, [fp]
   8783a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   8783e:	9307      	str	r3, [sp, #28]
   87840:	e541      	b.n	872c6 <_svfprintf_r+0x96>
   87842:	9b07      	ldr	r3, [sp, #28]
   87844:	f89b 6000 	ldrb.w	r6, [fp]
   87848:	f043 0301 	orr.w	r3, r3, #1
   8784c:	9307      	str	r3, [sp, #28]
   8784e:	e53a      	b.n	872c6 <_svfprintf_r+0x96>
   87850:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   87854:	2b00      	cmp	r3, #0
   87856:	f47f adb1 	bne.w	873bc <_svfprintf_r+0x18c>
   8785a:	f89b 6000 	ldrb.w	r6, [fp]
   8785e:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   87862:	e530      	b.n	872c6 <_svfprintf_r+0x96>
   87864:	9b07      	ldr	r3, [sp, #28]
   87866:	f89b 6000 	ldrb.w	r6, [fp]
   8786a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8786e:	9307      	str	r3, [sp, #28]
   87870:	e529      	b.n	872c6 <_svfprintf_r+0x96>
   87872:	465a      	mov	r2, fp
   87874:	f812 6b01 	ldrb.w	r6, [r2], #1
   87878:	2e2a      	cmp	r6, #42	; 0x2a
   8787a:	f001 8251 	beq.w	88d20 <_svfprintf_r+0x1af0>
   8787e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87882:	2b09      	cmp	r3, #9
   87884:	4693      	mov	fp, r2
   87886:	bf98      	it	ls
   87888:	2200      	movls	r2, #0
   8788a:	f201 80ef 	bhi.w	88a6c <_svfprintf_r+0x183c>
   8788e:	f81b 6b01 	ldrb.w	r6, [fp], #1
   87892:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   87896:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8789a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8789e:	2b09      	cmp	r3, #9
   878a0:	d9f5      	bls.n	8788e <_svfprintf_r+0x65e>
   878a2:	9209      	str	r2, [sp, #36]	; 0x24
   878a4:	e511      	b.n	872ca <_svfprintf_r+0x9a>
   878a6:	f89b 6000 	ldrb.w	r6, [fp]
   878aa:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   878ae:	e50a      	b.n	872c6 <_svfprintf_r+0x96>
   878b0:	7fefffff 	.word	0x7fefffff
   878b4:	0008da74 	.word	0x0008da74
   878b8:	0008da78 	.word	0x0008da78
   878bc:	0008da84 	.word	0x0008da84
   878c0:	9a07      	ldr	r2, [sp, #28]
   878c2:	9208      	str	r2, [sp, #32]
   878c4:	2b01      	cmp	r3, #1
   878c6:	f000 81b4 	beq.w	87c32 <_svfprintf_r+0xa02>
   878ca:	2b02      	cmp	r3, #2
   878cc:	f000 8159 	beq.w	87b82 <_svfprintf_r+0x952>
   878d0:	af56      	add	r7, sp, #344	; 0x158
   878d2:	08e2      	lsrs	r2, r4, #3
   878d4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   878d8:	08e9      	lsrs	r1, r5, #3
   878da:	f004 0307 	and.w	r3, r4, #7
   878de:	460d      	mov	r5, r1
   878e0:	4614      	mov	r4, r2
   878e2:	3330      	adds	r3, #48	; 0x30
   878e4:	ea54 0105 	orrs.w	r1, r4, r5
   878e8:	463a      	mov	r2, r7
   878ea:	f807 3d01 	strb.w	r3, [r7, #-1]!
   878ee:	d1f0      	bne.n	878d2 <_svfprintf_r+0x6a2>
   878f0:	9908      	ldr	r1, [sp, #32]
   878f2:	4608      	mov	r0, r1
   878f4:	07c0      	lsls	r0, r0, #31
   878f6:	f100 82b8 	bmi.w	87e6a <_svfprintf_r+0xc3a>
   878fa:	ab56      	add	r3, sp, #344	; 0x158
   878fc:	1bdb      	subs	r3, r3, r7
   878fe:	9107      	str	r1, [sp, #28]
   87900:	930c      	str	r3, [sp, #48]	; 0x30
   87902:	2300      	movs	r3, #0
   87904:	9909      	ldr	r1, [sp, #36]	; 0x24
   87906:	930d      	str	r3, [sp, #52]	; 0x34
   87908:	9312      	str	r3, [sp, #72]	; 0x48
   8790a:	9316      	str	r3, [sp, #88]	; 0x58
   8790c:	9310      	str	r3, [sp, #64]	; 0x40
   8790e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87910:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87914:	428b      	cmp	r3, r1
   87916:	bfb8      	it	lt
   87918:	460b      	movlt	r3, r1
   8791a:	9308      	str	r3, [sp, #32]
   8791c:	e6ac      	b.n	87678 <_svfprintf_r+0x448>
   8791e:	2e65      	cmp	r6, #101	; 0x65
   87920:	f340 80d8 	ble.w	87ad4 <_svfprintf_r+0x8a4>
   87924:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87928:	2200      	movs	r2, #0
   8792a:	2300      	movs	r3, #0
   8792c:	f005 ffc8 	bl	8d8c0 <__aeabi_dcmpeq>
   87930:	2800      	cmp	r0, #0
   87932:	f000 821e 	beq.w	87d72 <_svfprintf_r+0xb42>
   87936:	2101      	movs	r1, #1
   87938:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8793a:	4ac5      	ldr	r2, [pc, #788]	; (87c50 <_svfprintf_r+0xa20>)
   8793c:	440b      	add	r3, r1
   8793e:	440c      	add	r4, r1
   87940:	2b07      	cmp	r3, #7
   87942:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87946:	e9c8 2100 	strd	r2, r1, [r8]
   8794a:	f300 85bb 	bgt.w	884c4 <_svfprintf_r+0x1294>
   8794e:	f108 0808 	add.w	r8, r8, #8
   87952:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87954:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87956:	4293      	cmp	r3, r2
   87958:	f280 8321 	bge.w	87f9e <_svfprintf_r+0xd6e>
   8795c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8795e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87960:	3301      	adds	r3, #1
   87962:	9918      	ldr	r1, [sp, #96]	; 0x60
   87964:	4414      	add	r4, r2
   87966:	2b07      	cmp	r3, #7
   87968:	e9c8 1200 	strd	r1, r2, [r8]
   8796c:	942c      	str	r4, [sp, #176]	; 0xb0
   8796e:	932b      	str	r3, [sp, #172]	; 0xac
   87970:	f300 8448 	bgt.w	88204 <_svfprintf_r+0xfd4>
   87974:	f108 0808 	add.w	r8, r8, #8
   87978:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8797a:	1e5d      	subs	r5, r3, #1
   8797c:	2d00      	cmp	r5, #0
   8797e:	f77f ae06 	ble.w	8758e <_svfprintf_r+0x35e>
   87982:	2d10      	cmp	r5, #16
   87984:	f340 85c7 	ble.w	88516 <_svfprintf_r+0x12e6>
   87988:	4fb2      	ldr	r7, [pc, #712]	; (87c54 <_svfprintf_r+0xa24>)
   8798a:	2610      	movs	r6, #16
   8798c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8798e:	970f      	str	r7, [sp, #60]	; 0x3c
   87990:	e005      	b.n	8799e <_svfprintf_r+0x76e>
   87992:	f108 0808 	add.w	r8, r8, #8
   87996:	3d10      	subs	r5, #16
   87998:	2d10      	cmp	r5, #16
   8799a:	f340 85bf 	ble.w	8851c <_svfprintf_r+0x12ec>
   8799e:	3301      	adds	r3, #1
   879a0:	3410      	adds	r4, #16
   879a2:	2b07      	cmp	r3, #7
   879a4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   879a8:	e9c8 7600 	strd	r7, r6, [r8]
   879ac:	ddf1      	ble.n	87992 <_svfprintf_r+0x762>
   879ae:	4651      	mov	r1, sl
   879b0:	4648      	mov	r0, r9
   879b2:	aa2a      	add	r2, sp, #168	; 0xa8
   879b4:	f005 f882 	bl	8cabc <__ssprint_r>
   879b8:	2800      	cmp	r0, #0
   879ba:	f040 8081 	bne.w	87ac0 <_svfprintf_r+0x890>
   879be:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   879c2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   879c6:	e7e6      	b.n	87996 <_svfprintf_r+0x766>
   879c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   879ca:	9a08      	ldr	r2, [sp, #32]
   879cc:	1a9d      	subs	r5, r3, r2
   879ce:	2d00      	cmp	r5, #0
   879d0:	f77f adc6 	ble.w	87560 <_svfprintf_r+0x330>
   879d4:	2d10      	cmp	r5, #16
   879d6:	f341 8069 	ble.w	88aac <_svfprintf_r+0x187c>
   879da:	489e      	ldr	r0, [pc, #632]	; (87c54 <_svfprintf_r+0xa24>)
   879dc:	4621      	mov	r1, r4
   879de:	2310      	movs	r3, #16
   879e0:	4604      	mov	r4, r0
   879e2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   879e4:	900f      	str	r0, [sp, #60]	; 0x3c
   879e6:	e004      	b.n	879f2 <_svfprintf_r+0x7c2>
   879e8:	3d10      	subs	r5, #16
   879ea:	2d10      	cmp	r5, #16
   879ec:	f108 0808 	add.w	r8, r8, #8
   879f0:	dd17      	ble.n	87a22 <_svfprintf_r+0x7f2>
   879f2:	3201      	adds	r2, #1
   879f4:	3110      	adds	r1, #16
   879f6:	2a07      	cmp	r2, #7
   879f8:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   879fc:	e9c8 4300 	strd	r4, r3, [r8]
   87a00:	ddf2      	ble.n	879e8 <_svfprintf_r+0x7b8>
   87a02:	4651      	mov	r1, sl
   87a04:	4648      	mov	r0, r9
   87a06:	aa2a      	add	r2, sp, #168	; 0xa8
   87a08:	f005 f858 	bl	8cabc <__ssprint_r>
   87a0c:	2800      	cmp	r0, #0
   87a0e:	d157      	bne.n	87ac0 <_svfprintf_r+0x890>
   87a10:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87a14:	3d10      	subs	r5, #16
   87a16:	2d10      	cmp	r5, #16
   87a18:	f04f 0310 	mov.w	r3, #16
   87a1c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a20:	dce7      	bgt.n	879f2 <_svfprintf_r+0x7c2>
   87a22:	460c      	mov	r4, r1
   87a24:	3201      	adds	r2, #1
   87a26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87a28:	442c      	add	r4, r5
   87a2a:	2a07      	cmp	r2, #7
   87a2c:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87a30:	e9c8 3500 	strd	r3, r5, [r8]
   87a34:	f300 858a 	bgt.w	8854c <_svfprintf_r+0x131c>
   87a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87a3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87a3c:	f108 0808 	add.w	r8, r8, #8
   87a40:	1a9d      	subs	r5, r3, r2
   87a42:	2d00      	cmp	r5, #0
   87a44:	f77f ad92 	ble.w	8756c <_svfprintf_r+0x33c>
   87a48:	2d10      	cmp	r5, #16
   87a4a:	f340 860a 	ble.w	88662 <_svfprintf_r+0x1432>
   87a4e:	4881      	ldr	r0, [pc, #516]	; (87c54 <_svfprintf_r+0xa24>)
   87a50:	4621      	mov	r1, r4
   87a52:	2310      	movs	r3, #16
   87a54:	4604      	mov	r4, r0
   87a56:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87a58:	900f      	str	r0, [sp, #60]	; 0x3c
   87a5a:	e004      	b.n	87a66 <_svfprintf_r+0x836>
   87a5c:	3d10      	subs	r5, #16
   87a5e:	2d10      	cmp	r5, #16
   87a60:	f108 0808 	add.w	r8, r8, #8
   87a64:	dd16      	ble.n	87a94 <_svfprintf_r+0x864>
   87a66:	3201      	adds	r2, #1
   87a68:	3110      	adds	r1, #16
   87a6a:	2a07      	cmp	r2, #7
   87a6c:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   87a70:	e9c8 4300 	strd	r4, r3, [r8]
   87a74:	ddf2      	ble.n	87a5c <_svfprintf_r+0x82c>
   87a76:	4651      	mov	r1, sl
   87a78:	4648      	mov	r0, r9
   87a7a:	aa2a      	add	r2, sp, #168	; 0xa8
   87a7c:	f005 f81e 	bl	8cabc <__ssprint_r>
   87a80:	b9f0      	cbnz	r0, 87ac0 <_svfprintf_r+0x890>
   87a82:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87a86:	3d10      	subs	r5, #16
   87a88:	2d10      	cmp	r5, #16
   87a8a:	f04f 0310 	mov.w	r3, #16
   87a8e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a92:	dce8      	bgt.n	87a66 <_svfprintf_r+0x836>
   87a94:	460c      	mov	r4, r1
   87a96:	3201      	adds	r2, #1
   87a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87a9a:	442c      	add	r4, r5
   87a9c:	2a07      	cmp	r2, #7
   87a9e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87aa2:	e9c8 3500 	strd	r3, r5, [r8]
   87aa6:	f300 8237 	bgt.w	87f18 <_svfprintf_r+0xce8>
   87aaa:	f108 0808 	add.w	r8, r8, #8
   87aae:	e55d      	b.n	8756c <_svfprintf_r+0x33c>
   87ab0:	4651      	mov	r1, sl
   87ab2:	4648      	mov	r0, r9
   87ab4:	aa2a      	add	r2, sp, #168	; 0xa8
   87ab6:	f005 f801 	bl	8cabc <__ssprint_r>
   87aba:	2800      	cmp	r0, #0
   87abc:	f43f ad7b 	beq.w	875b6 <_svfprintf_r+0x386>
   87ac0:	46d3      	mov	fp, sl
   87ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87ac4:	2b00      	cmp	r3, #0
   87ac6:	f43f ad8a 	beq.w	875de <_svfprintf_r+0x3ae>
   87aca:	4648      	mov	r0, r9
   87acc:	990d      	ldr	r1, [sp, #52]	; 0x34
   87ace:	f003 faf3 	bl	8b0b8 <_free_r>
   87ad2:	e584      	b.n	875de <_svfprintf_r+0x3ae>
   87ad4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87ad6:	2b01      	cmp	r3, #1
   87ad8:	f340 81d5 	ble.w	87e86 <_svfprintf_r+0xc56>
   87adc:	2301      	movs	r3, #1
   87ade:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87ae0:	441c      	add	r4, r3
   87ae2:	441d      	add	r5, r3
   87ae4:	2d07      	cmp	r5, #7
   87ae6:	942c      	str	r4, [sp, #176]	; 0xb0
   87ae8:	f8c8 7000 	str.w	r7, [r8]
   87aec:	952b      	str	r5, [sp, #172]	; 0xac
   87aee:	f8c8 3004 	str.w	r3, [r8, #4]
   87af2:	f300 823a 	bgt.w	87f6a <_svfprintf_r+0xd3a>
   87af6:	f108 0808 	add.w	r8, r8, #8
   87afa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87afc:	3501      	adds	r5, #1
   87afe:	9a18      	ldr	r2, [sp, #96]	; 0x60
   87b00:	441c      	add	r4, r3
   87b02:	2d07      	cmp	r5, #7
   87b04:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87b08:	e9c8 2300 	strd	r2, r3, [r8]
   87b0c:	f300 823a 	bgt.w	87f84 <_svfprintf_r+0xd54>
   87b10:	f108 0808 	add.w	r8, r8, #8
   87b14:	2300      	movs	r3, #0
   87b16:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87b1a:	2200      	movs	r2, #0
   87b1c:	f005 fed0 	bl	8d8c0 <__aeabi_dcmpeq>
   87b20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87b22:	2800      	cmp	r0, #0
   87b24:	f040 81cd 	bne.w	87ec2 <_svfprintf_r+0xc92>
   87b28:	3b01      	subs	r3, #1
   87b2a:	3501      	adds	r5, #1
   87b2c:	3701      	adds	r7, #1
   87b2e:	441c      	add	r4, r3
   87b30:	2d07      	cmp	r5, #7
   87b32:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87b36:	f8c8 7000 	str.w	r7, [r8]
   87b3a:	f8c8 3004 	str.w	r3, [r8, #4]
   87b3e:	f300 84dc 	bgt.w	884fa <_svfprintf_r+0x12ca>
   87b42:	f108 0808 	add.w	r8, r8, #8
   87b46:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   87b48:	3501      	adds	r5, #1
   87b4a:	4414      	add	r4, r2
   87b4c:	ab26      	add	r3, sp, #152	; 0x98
   87b4e:	2d07      	cmp	r5, #7
   87b50:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87b54:	e9c8 3200 	strd	r3, r2, [r8]
   87b58:	f77f ad17 	ble.w	8758a <_svfprintf_r+0x35a>
   87b5c:	4651      	mov	r1, sl
   87b5e:	4648      	mov	r0, r9
   87b60:	aa2a      	add	r2, sp, #168	; 0xa8
   87b62:	f004 ffab 	bl	8cabc <__ssprint_r>
   87b66:	2800      	cmp	r0, #0
   87b68:	d1aa      	bne.n	87ac0 <_svfprintf_r+0x890>
   87b6a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87b6c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87b70:	e50d      	b.n	8758e <_svfprintf_r+0x35e>
   87b72:	2b01      	cmp	r3, #1
   87b74:	f000 87ca 	beq.w	88b0c <_svfprintf_r+0x18dc>
   87b78:	2b02      	cmp	r3, #2
   87b7a:	9b07      	ldr	r3, [sp, #28]
   87b7c:	9308      	str	r3, [sp, #32]
   87b7e:	f47f aea7 	bne.w	878d0 <_svfprintf_r+0x6a0>
   87b82:	9819      	ldr	r0, [sp, #100]	; 0x64
   87b84:	af56      	add	r7, sp, #344	; 0x158
   87b86:	0923      	lsrs	r3, r4, #4
   87b88:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   87b8c:	0929      	lsrs	r1, r5, #4
   87b8e:	f004 020f 	and.w	r2, r4, #15
   87b92:	460d      	mov	r5, r1
   87b94:	461c      	mov	r4, r3
   87b96:	5c83      	ldrb	r3, [r0, r2]
   87b98:	f807 3d01 	strb.w	r3, [r7, #-1]!
   87b9c:	ea54 0305 	orrs.w	r3, r4, r5
   87ba0:	d1f1      	bne.n	87b86 <_svfprintf_r+0x956>
   87ba2:	9b08      	ldr	r3, [sp, #32]
   87ba4:	9307      	str	r3, [sp, #28]
   87ba6:	ab56      	add	r3, sp, #344	; 0x158
   87ba8:	1bdb      	subs	r3, r3, r7
   87baa:	930c      	str	r3, [sp, #48]	; 0x30
   87bac:	e6a9      	b.n	87902 <_svfprintf_r+0x6d2>
   87bae:	2d10      	cmp	r5, #16
   87bb0:	f340 8668 	ble.w	88884 <_svfprintf_r+0x1654>
   87bb4:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87bb8:	931e      	str	r3, [sp, #120]	; 0x78
   87bba:	460b      	mov	r3, r1
   87bbc:	4639      	mov	r1, r7
   87bbe:	2410      	movs	r4, #16
   87bc0:	4637      	mov	r7, r6
   87bc2:	4656      	mov	r6, sl
   87bc4:	46ca      	mov	sl, r9
   87bc6:	4689      	mov	r9, r1
   87bc8:	e004      	b.n	87bd4 <_svfprintf_r+0x9a4>
   87bca:	3d10      	subs	r5, #16
   87bcc:	2d10      	cmp	r5, #16
   87bce:	f108 0808 	add.w	r8, r8, #8
   87bd2:	dd17      	ble.n	87c04 <_svfprintf_r+0x9d4>
   87bd4:	3201      	adds	r2, #1
   87bd6:	4920      	ldr	r1, [pc, #128]	; (87c58 <_svfprintf_r+0xa28>)
   87bd8:	3310      	adds	r3, #16
   87bda:	2a07      	cmp	r2, #7
   87bdc:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   87be0:	e9c8 1400 	strd	r1, r4, [r8]
   87be4:	ddf1      	ble.n	87bca <_svfprintf_r+0x99a>
   87be6:	4631      	mov	r1, r6
   87be8:	4650      	mov	r0, sl
   87bea:	aa2a      	add	r2, sp, #168	; 0xa8
   87bec:	f004 ff66 	bl	8cabc <__ssprint_r>
   87bf0:	2800      	cmp	r0, #0
   87bf2:	f040 8458 	bne.w	884a6 <_svfprintf_r+0x1276>
   87bf6:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   87bfa:	3d10      	subs	r5, #16
   87bfc:	2d10      	cmp	r5, #16
   87bfe:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c02:	dce7      	bgt.n	87bd4 <_svfprintf_r+0x9a4>
   87c04:	4648      	mov	r0, r9
   87c06:	46d1      	mov	r9, sl
   87c08:	46b2      	mov	sl, r6
   87c0a:	463e      	mov	r6, r7
   87c0c:	4607      	mov	r7, r0
   87c0e:	4619      	mov	r1, r3
   87c10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87c12:	194c      	adds	r4, r1, r5
   87c14:	3201      	adds	r2, #1
   87c16:	4910      	ldr	r1, [pc, #64]	; (87c58 <_svfprintf_r+0xa28>)
   87c18:	2a07      	cmp	r2, #7
   87c1a:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87c1e:	e9c8 1500 	strd	r1, r5, [r8]
   87c22:	f300 841f 	bgt.w	88464 <_svfprintf_r+0x1234>
   87c26:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87c2a:	f108 0808 	add.w	r8, r8, #8
   87c2e:	e474      	b.n	8751a <_svfprintf_r+0x2ea>
   87c30:	9308      	str	r3, [sp, #32]
   87c32:	2d00      	cmp	r5, #0
   87c34:	bf08      	it	eq
   87c36:	2c0a      	cmpeq	r4, #10
   87c38:	f080 83d0 	bcs.w	883dc <_svfprintf_r+0x11ac>
   87c3c:	9b08      	ldr	r3, [sp, #32]
   87c3e:	3430      	adds	r4, #48	; 0x30
   87c40:	9307      	str	r3, [sp, #28]
   87c42:	2301      	movs	r3, #1
   87c44:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   87c48:	930c      	str	r3, [sp, #48]	; 0x30
   87c4a:	f20d 1757 	addw	r7, sp, #343	; 0x157
   87c4e:	e658      	b.n	87902 <_svfprintf_r+0x6d2>
   87c50:	0008dab4 	.word	0x0008dab4
   87c54:	0008dac8 	.word	0x0008dac8
   87c58:	0008dab8 	.word	0x0008dab8
   87c5c:	4651      	mov	r1, sl
   87c5e:	4648      	mov	r0, r9
   87c60:	aa2a      	add	r2, sp, #168	; 0xa8
   87c62:	f004 ff2b 	bl	8cabc <__ssprint_r>
   87c66:	2800      	cmp	r0, #0
   87c68:	f47f af2a 	bne.w	87ac0 <_svfprintf_r+0x890>
   87c6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87c6e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87c70:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c74:	2a00      	cmp	r2, #0
   87c76:	f040 847f 	bne.w	88578 <_svfprintf_r+0x1348>
   87c7a:	9b07      	ldr	r3, [sp, #28]
   87c7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87c7e:	f003 0301 	and.w	r3, r3, #1
   87c82:	4313      	orrs	r3, r2
   87c84:	f43f ac83 	beq.w	8758e <_svfprintf_r+0x35e>
   87c88:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87c8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87c8c:	3301      	adds	r3, #1
   87c8e:	9918      	ldr	r1, [sp, #96]	; 0x60
   87c90:	4414      	add	r4, r2
   87c92:	2b07      	cmp	r3, #7
   87c94:	e9c8 1200 	strd	r1, r2, [r8]
   87c98:	942c      	str	r4, [sp, #176]	; 0xb0
   87c9a:	932b      	str	r3, [sp, #172]	; 0xac
   87c9c:	f300 8524 	bgt.w	886e8 <_svfprintf_r+0x14b8>
   87ca0:	f108 0808 	add.w	r8, r8, #8
   87ca4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87ca6:	3301      	adds	r3, #1
   87ca8:	4414      	add	r4, r2
   87caa:	2b07      	cmp	r3, #7
   87cac:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87cb0:	e9c8 7200 	strd	r7, r2, [r8]
   87cb4:	f77f ac69 	ble.w	8758a <_svfprintf_r+0x35a>
   87cb8:	4651      	mov	r1, sl
   87cba:	4648      	mov	r0, r9
   87cbc:	aa2a      	add	r2, sp, #168	; 0xa8
   87cbe:	f004 fefd 	bl	8cabc <__ssprint_r>
   87cc2:	2800      	cmp	r0, #0
   87cc4:	f47f aefc 	bne.w	87ac0 <_svfprintf_r+0x890>
   87cc8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87cca:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87cce:	e45e      	b.n	8758e <_svfprintf_r+0x35e>
   87cd0:	4651      	mov	r1, sl
   87cd2:	4648      	mov	r0, r9
   87cd4:	aa2a      	add	r2, sp, #168	; 0xa8
   87cd6:	931e      	str	r3, [sp, #120]	; 0x78
   87cd8:	f004 fef0 	bl	8cabc <__ssprint_r>
   87cdc:	2800      	cmp	r0, #0
   87cde:	f47f aeef 	bne.w	87ac0 <_svfprintf_r+0x890>
   87ce2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87ce4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87ce6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87cea:	e426      	b.n	8753a <_svfprintf_r+0x30a>
   87cec:	4651      	mov	r1, sl
   87cee:	4648      	mov	r0, r9
   87cf0:	aa2a      	add	r2, sp, #168	; 0xa8
   87cf2:	f004 fee3 	bl	8cabc <__ssprint_r>
   87cf6:	2800      	cmp	r0, #0
   87cf8:	f47f aee2 	bne.w	87ac0 <_svfprintf_r+0x890>
   87cfc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87cfe:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87d02:	e429      	b.n	87558 <_svfprintf_r+0x328>
   87d04:	2d10      	cmp	r5, #16
   87d06:	f340 86be 	ble.w	88a86 <_svfprintf_r+0x1856>
   87d0a:	2610      	movs	r6, #16
   87d0c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87d0e:	e004      	b.n	87d1a <_svfprintf_r+0xaea>
   87d10:	3d10      	subs	r5, #16
   87d12:	2d10      	cmp	r5, #16
   87d14:	f108 0808 	add.w	r8, r8, #8
   87d18:	dd17      	ble.n	87d4a <_svfprintf_r+0xb1a>
   87d1a:	3301      	adds	r3, #1
   87d1c:	4aad      	ldr	r2, [pc, #692]	; (87fd4 <_svfprintf_r+0xda4>)
   87d1e:	3410      	adds	r4, #16
   87d20:	2b07      	cmp	r3, #7
   87d22:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87d26:	e9c8 2600 	strd	r2, r6, [r8]
   87d2a:	ddf1      	ble.n	87d10 <_svfprintf_r+0xae0>
   87d2c:	4651      	mov	r1, sl
   87d2e:	4648      	mov	r0, r9
   87d30:	aa2a      	add	r2, sp, #168	; 0xa8
   87d32:	f004 fec3 	bl	8cabc <__ssprint_r>
   87d36:	2800      	cmp	r0, #0
   87d38:	f47f aec2 	bne.w	87ac0 <_svfprintf_r+0x890>
   87d3c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87d40:	3d10      	subs	r5, #16
   87d42:	2d10      	cmp	r5, #16
   87d44:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87d48:	dce7      	bgt.n	87d1a <_svfprintf_r+0xaea>
   87d4a:	3301      	adds	r3, #1
   87d4c:	4aa1      	ldr	r2, [pc, #644]	; (87fd4 <_svfprintf_r+0xda4>)
   87d4e:	442c      	add	r4, r5
   87d50:	2b07      	cmp	r3, #7
   87d52:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87d56:	e9c8 2500 	strd	r2, r5, [r8]
   87d5a:	f77f ac21 	ble.w	875a0 <_svfprintf_r+0x370>
   87d5e:	4651      	mov	r1, sl
   87d60:	4648      	mov	r0, r9
   87d62:	aa2a      	add	r2, sp, #168	; 0xa8
   87d64:	f004 feaa 	bl	8cabc <__ssprint_r>
   87d68:	2800      	cmp	r0, #0
   87d6a:	f47f aea9 	bne.w	87ac0 <_svfprintf_r+0x890>
   87d6e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87d70:	e416      	b.n	875a0 <_svfprintf_r+0x370>
   87d72:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87d74:	2a00      	cmp	r2, #0
   87d76:	f340 8386 	ble.w	88486 <_svfprintf_r+0x1256>
   87d7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87d7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87d7e:	4293      	cmp	r3, r2
   87d80:	bfa8      	it	ge
   87d82:	4613      	movge	r3, r2
   87d84:	2b00      	cmp	r3, #0
   87d86:	461d      	mov	r5, r3
   87d88:	dd0b      	ble.n	87da2 <_svfprintf_r+0xb72>
   87d8a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87d8c:	442c      	add	r4, r5
   87d8e:	3301      	adds	r3, #1
   87d90:	2b07      	cmp	r3, #7
   87d92:	e9c8 7500 	strd	r7, r5, [r8]
   87d96:	942c      	str	r4, [sp, #176]	; 0xb0
   87d98:	932b      	str	r3, [sp, #172]	; 0xac
   87d9a:	f300 851e 	bgt.w	887da <_svfprintf_r+0x15aa>
   87d9e:	f108 0808 	add.w	r8, r8, #8
   87da2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87da4:	2d00      	cmp	r5, #0
   87da6:	bfa8      	it	ge
   87da8:	1b5b      	subge	r3, r3, r5
   87daa:	2b00      	cmp	r3, #0
   87dac:	461d      	mov	r5, r3
   87dae:	f300 8256 	bgt.w	8825e <_svfprintf_r+0x102e>
   87db2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87db4:	443b      	add	r3, r7
   87db6:	461e      	mov	r6, r3
   87db8:	9b07      	ldr	r3, [sp, #28]
   87dba:	055b      	lsls	r3, r3, #21
   87dbc:	f100 8277 	bmi.w	882ae <_svfprintf_r+0x107e>
   87dc0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87dc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87dc4:	4293      	cmp	r3, r2
   87dc6:	db03      	blt.n	87dd0 <_svfprintf_r+0xba0>
   87dc8:	9a07      	ldr	r2, [sp, #28]
   87dca:	07d5      	lsls	r5, r2, #31
   87dcc:	f140 847a 	bpl.w	886c4 <_svfprintf_r+0x1494>
   87dd0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87dd2:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87dd4:	3201      	adds	r2, #1
   87dd6:	9818      	ldr	r0, [sp, #96]	; 0x60
   87dd8:	440c      	add	r4, r1
   87dda:	2a07      	cmp	r2, #7
   87ddc:	e9c8 0100 	strd	r0, r1, [r8]
   87de0:	942c      	str	r4, [sp, #176]	; 0xb0
   87de2:	922b      	str	r2, [sp, #172]	; 0xac
   87de4:	f300 8506 	bgt.w	887f4 <_svfprintf_r+0x15c4>
   87de8:	f108 0808 	add.w	r8, r8, #8
   87dec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87dee:	18bd      	adds	r5, r7, r2
   87df0:	1bad      	subs	r5, r5, r6
   87df2:	1ad3      	subs	r3, r2, r3
   87df4:	429d      	cmp	r5, r3
   87df6:	bfa8      	it	ge
   87df8:	461d      	movge	r5, r3
   87dfa:	2d00      	cmp	r5, #0
   87dfc:	dd0b      	ble.n	87e16 <_svfprintf_r+0xbe6>
   87dfe:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87e00:	442c      	add	r4, r5
   87e02:	3201      	adds	r2, #1
   87e04:	2a07      	cmp	r2, #7
   87e06:	e9c8 6500 	strd	r6, r5, [r8]
   87e0a:	942c      	str	r4, [sp, #176]	; 0xb0
   87e0c:	922b      	str	r2, [sp, #172]	; 0xac
   87e0e:	f300 855f 	bgt.w	888d0 <_svfprintf_r+0x16a0>
   87e12:	f108 0808 	add.w	r8, r8, #8
   87e16:	2d00      	cmp	r5, #0
   87e18:	bfb4      	ite	lt
   87e1a:	461d      	movlt	r5, r3
   87e1c:	1b5d      	subge	r5, r3, r5
   87e1e:	2d00      	cmp	r5, #0
   87e20:	f77f abb5 	ble.w	8758e <_svfprintf_r+0x35e>
   87e24:	2d10      	cmp	r5, #16
   87e26:	f340 8376 	ble.w	88516 <_svfprintf_r+0x12e6>
   87e2a:	4f6b      	ldr	r7, [pc, #428]	; (87fd8 <_svfprintf_r+0xda8>)
   87e2c:	2610      	movs	r6, #16
   87e2e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87e30:	970f      	str	r7, [sp, #60]	; 0x3c
   87e32:	e005      	b.n	87e40 <_svfprintf_r+0xc10>
   87e34:	f108 0808 	add.w	r8, r8, #8
   87e38:	3d10      	subs	r5, #16
   87e3a:	2d10      	cmp	r5, #16
   87e3c:	f340 836e 	ble.w	8851c <_svfprintf_r+0x12ec>
   87e40:	3301      	adds	r3, #1
   87e42:	3410      	adds	r4, #16
   87e44:	2b07      	cmp	r3, #7
   87e46:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87e4a:	e9c8 7600 	strd	r7, r6, [r8]
   87e4e:	ddf1      	ble.n	87e34 <_svfprintf_r+0xc04>
   87e50:	4651      	mov	r1, sl
   87e52:	4648      	mov	r0, r9
   87e54:	aa2a      	add	r2, sp, #168	; 0xa8
   87e56:	f004 fe31 	bl	8cabc <__ssprint_r>
   87e5a:	2800      	cmp	r0, #0
   87e5c:	f47f ae30 	bne.w	87ac0 <_svfprintf_r+0x890>
   87e60:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87e64:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87e68:	e7e6      	b.n	87e38 <_svfprintf_r+0xc08>
   87e6a:	2b30      	cmp	r3, #48	; 0x30
   87e6c:	f43f ae99 	beq.w	87ba2 <_svfprintf_r+0x972>
   87e70:	2330      	movs	r3, #48	; 0x30
   87e72:	3a02      	subs	r2, #2
   87e74:	f807 3c01 	strb.w	r3, [r7, #-1]
   87e78:	9908      	ldr	r1, [sp, #32]
   87e7a:	ab56      	add	r3, sp, #344	; 0x158
   87e7c:	1a9b      	subs	r3, r3, r2
   87e7e:	4617      	mov	r7, r2
   87e80:	9107      	str	r1, [sp, #28]
   87e82:	930c      	str	r3, [sp, #48]	; 0x30
   87e84:	e53d      	b.n	87902 <_svfprintf_r+0x6d2>
   87e86:	9b07      	ldr	r3, [sp, #28]
   87e88:	07d8      	lsls	r0, r3, #31
   87e8a:	f53f ae27 	bmi.w	87adc <_svfprintf_r+0x8ac>
   87e8e:	2301      	movs	r3, #1
   87e90:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87e92:	441c      	add	r4, r3
   87e94:	441d      	add	r5, r3
   87e96:	2d07      	cmp	r5, #7
   87e98:	942c      	str	r4, [sp, #176]	; 0xb0
   87e9a:	f8c8 7000 	str.w	r7, [r8]
   87e9e:	952b      	str	r5, [sp, #172]	; 0xac
   87ea0:	f8c8 3004 	str.w	r3, [r8, #4]
   87ea4:	f77f ae4d 	ble.w	87b42 <_svfprintf_r+0x912>
   87ea8:	4651      	mov	r1, sl
   87eaa:	4648      	mov	r0, r9
   87eac:	aa2a      	add	r2, sp, #168	; 0xa8
   87eae:	f004 fe05 	bl	8cabc <__ssprint_r>
   87eb2:	2800      	cmp	r0, #0
   87eb4:	f47f ae04 	bne.w	87ac0 <_svfprintf_r+0x890>
   87eb8:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87ebc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87ec0:	e641      	b.n	87b46 <_svfprintf_r+0x916>
   87ec2:	1e5e      	subs	r6, r3, #1
   87ec4:	2e00      	cmp	r6, #0
   87ec6:	f77f ae3e 	ble.w	87b46 <_svfprintf_r+0x916>
   87eca:	2e10      	cmp	r6, #16
   87ecc:	f340 871e 	ble.w	88d0c <_svfprintf_r+0x1adc>
   87ed0:	4b41      	ldr	r3, [pc, #260]	; (87fd8 <_svfprintf_r+0xda8>)
   87ed2:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   87ed6:	2710      	movs	r7, #16
   87ed8:	46d3      	mov	fp, sl
   87eda:	930f      	str	r3, [sp, #60]	; 0x3c
   87edc:	46ca      	mov	sl, r9
   87ede:	4699      	mov	r9, r3
   87ee0:	e005      	b.n	87eee <_svfprintf_r+0xcbe>
   87ee2:	f108 0808 	add.w	r8, r8, #8
   87ee6:	3e10      	subs	r6, #16
   87ee8:	2e10      	cmp	r6, #16
   87eea:	f340 82f8 	ble.w	884de <_svfprintf_r+0x12ae>
   87eee:	3501      	adds	r5, #1
   87ef0:	3410      	adds	r4, #16
   87ef2:	2d07      	cmp	r5, #7
   87ef4:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87ef8:	e9c8 9700 	strd	r9, r7, [r8]
   87efc:	ddf1      	ble.n	87ee2 <_svfprintf_r+0xcb2>
   87efe:	4659      	mov	r1, fp
   87f00:	4650      	mov	r0, sl
   87f02:	aa2a      	add	r2, sp, #168	; 0xa8
   87f04:	f004 fdda 	bl	8cabc <__ssprint_r>
   87f08:	2800      	cmp	r0, #0
   87f0a:	f040 85cc 	bne.w	88aa6 <_svfprintf_r+0x1876>
   87f0e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87f12:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f16:	e7e6      	b.n	87ee6 <_svfprintf_r+0xcb6>
   87f18:	4651      	mov	r1, sl
   87f1a:	4648      	mov	r0, r9
   87f1c:	aa2a      	add	r2, sp, #168	; 0xa8
   87f1e:	f004 fdcd 	bl	8cabc <__ssprint_r>
   87f22:	2800      	cmp	r0, #0
   87f24:	f47f adcc 	bne.w	87ac0 <_svfprintf_r+0x890>
   87f28:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87f2a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f2e:	f7ff bb1d 	b.w	8756c <_svfprintf_r+0x33c>
   87f32:	9b08      	ldr	r3, [sp, #32]
   87f34:	06dc      	lsls	r4, r3, #27
   87f36:	f100 8119 	bmi.w	8816c <_svfprintf_r+0xf3c>
   87f3a:	9b08      	ldr	r3, [sp, #32]
   87f3c:	0658      	lsls	r0, r3, #25
   87f3e:	f140 8368 	bpl.w	88612 <_svfprintf_r+0x13e2>
   87f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87f44:	2301      	movs	r3, #1
   87f46:	f852 4b04 	ldr.w	r4, [r2], #4
   87f4a:	2500      	movs	r5, #0
   87f4c:	920e      	str	r2, [sp, #56]	; 0x38
   87f4e:	b2a4      	uxth	r4, r4
   87f50:	f7ff ba7f 	b.w	87452 <_svfprintf_r+0x222>
   87f54:	232d      	movs	r3, #45	; 0x2d
   87f56:	9a07      	ldr	r2, [sp, #28]
   87f58:	4264      	negs	r4, r4
   87f5a:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87f5e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   87f62:	2301      	movs	r3, #1
   87f64:	9208      	str	r2, [sp, #32]
   87f66:	f7ff ba77 	b.w	87458 <_svfprintf_r+0x228>
   87f6a:	4651      	mov	r1, sl
   87f6c:	4648      	mov	r0, r9
   87f6e:	aa2a      	add	r2, sp, #168	; 0xa8
   87f70:	f004 fda4 	bl	8cabc <__ssprint_r>
   87f74:	2800      	cmp	r0, #0
   87f76:	f47f ada3 	bne.w	87ac0 <_svfprintf_r+0x890>
   87f7a:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87f7e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f82:	e5ba      	b.n	87afa <_svfprintf_r+0x8ca>
   87f84:	4651      	mov	r1, sl
   87f86:	4648      	mov	r0, r9
   87f88:	aa2a      	add	r2, sp, #168	; 0xa8
   87f8a:	f004 fd97 	bl	8cabc <__ssprint_r>
   87f8e:	2800      	cmp	r0, #0
   87f90:	f47f ad96 	bne.w	87ac0 <_svfprintf_r+0x890>
   87f94:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87f98:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f9c:	e5ba      	b.n	87b14 <_svfprintf_r+0x8e4>
   87f9e:	9b07      	ldr	r3, [sp, #28]
   87fa0:	07da      	lsls	r2, r3, #31
   87fa2:	f57f aaf4 	bpl.w	8758e <_svfprintf_r+0x35e>
   87fa6:	e4d9      	b.n	8795c <_svfprintf_r+0x72c>
   87fa8:	af56      	add	r7, sp, #344	; 0x158
   87faa:	e4aa      	b.n	87902 <_svfprintf_r+0x6d2>
   87fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87fae:	465f      	mov	r7, fp
   87fb0:	f853 1b04 	ldr.w	r1, [r3], #4
   87fb4:	930e      	str	r3, [sp, #56]	; 0x38
   87fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87fb8:	17dd      	asrs	r5, r3, #31
   87fba:	461a      	mov	r2, r3
   87fbc:	462b      	mov	r3, r5
   87fbe:	e9c1 2300 	strd	r2, r3, [r1]
   87fc2:	f7ff bb03 	b.w	875cc <_svfprintf_r+0x39c>
   87fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87fc8:	2500      	movs	r5, #0
   87fca:	f853 4b04 	ldr.w	r4, [r3], #4
   87fce:	930e      	str	r3, [sp, #56]	; 0x38
   87fd0:	f7ff ba3a 	b.w	87448 <_svfprintf_r+0x218>
   87fd4:	0008dab8 	.word	0x0008dab8
   87fd8:	0008dac8 	.word	0x0008dac8
   87fdc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87fe0:	460b      	mov	r3, r1
   87fe2:	4602      	mov	r2, r0
   87fe4:	f005 fc9e 	bl	8d924 <__aeabi_dcmpun>
   87fe8:	4601      	mov	r1, r0
   87fea:	2800      	cmp	r0, #0
   87fec:	f040 8643 	bne.w	88c76 <_svfprintf_r+0x1a46>
   87ff0:	2e61      	cmp	r6, #97	; 0x61
   87ff2:	f000 8586 	beq.w	88b02 <_svfprintf_r+0x18d2>
   87ff6:	2e41      	cmp	r6, #65	; 0x41
   87ff8:	f000 847a 	beq.w	888f0 <_svfprintf_r+0x16c0>
   87ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87ffe:	f026 0520 	bic.w	r5, r6, #32
   88002:	1c5a      	adds	r2, r3, #1
   88004:	9508      	str	r5, [sp, #32]
   88006:	f000 837d 	beq.w	88704 <_svfprintf_r+0x14d4>
   8800a:	2d47      	cmp	r5, #71	; 0x47
   8800c:	f000 859e 	beq.w	88b4c <_svfprintf_r+0x191c>
   88010:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88014:	9b07      	ldr	r3, [sp, #28]
   88016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8801a:	9312      	str	r3, [sp, #72]	; 0x48
   8801c:	460b      	mov	r3, r1
   8801e:	2b00      	cmp	r3, #0
   88020:	f2c0 85ba 	blt.w	88b98 <_svfprintf_r+0x1968>
   88024:	2200      	movs	r2, #0
   88026:	930f      	str	r3, [sp, #60]	; 0x3c
   88028:	921e      	str	r2, [sp, #120]	; 0x78
   8802a:	920d      	str	r2, [sp, #52]	; 0x34
   8802c:	900c      	str	r0, [sp, #48]	; 0x30
   8802e:	2d46      	cmp	r5, #70	; 0x46
   88030:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88032:	f000 8407 	beq.w	88844 <_svfprintf_r+0x1614>
   88036:	2d45      	cmp	r5, #69	; 0x45
   88038:	f04f 0002 	mov.w	r0, #2
   8803c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8803e:	f040 83e7 	bne.w	88810 <_svfprintf_r+0x15e0>
   88042:	9909      	ldr	r1, [sp, #36]	; 0x24
   88044:	9000      	str	r0, [sp, #0]
   88046:	1c4c      	adds	r4, r1, #1
   88048:	a928      	add	r1, sp, #160	; 0xa0
   8804a:	a825      	add	r0, sp, #148	; 0x94
   8804c:	9104      	str	r1, [sp, #16]
   8804e:	a924      	add	r1, sp, #144	; 0x90
   88050:	e9cd 1002 	strd	r1, r0, [sp, #8]
   88054:	9401      	str	r4, [sp, #4]
   88056:	4648      	mov	r0, r9
   88058:	f001 feb2 	bl	89dc0 <_dtoa_r>
   8805c:	4607      	mov	r7, r0
   8805e:	4404      	add	r4, r0
   88060:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88062:	9d07      	ldr	r5, [sp, #28]
   88064:	9307      	str	r3, [sp, #28]
   88066:	2200      	movs	r2, #0
   88068:	2300      	movs	r3, #0
   8806a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8806c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8806e:	f005 fc27 	bl	8d8c0 <__aeabi_dcmpeq>
   88072:	2800      	cmp	r0, #0
   88074:	f000 8398 	beq.w	887a8 <_svfprintf_r+0x1578>
   88078:	4623      	mov	r3, r4
   8807a:	1bdb      	subs	r3, r3, r7
   8807c:	9313      	str	r3, [sp, #76]	; 0x4c
   8807e:	9b08      	ldr	r3, [sp, #32]
   88080:	2b47      	cmp	r3, #71	; 0x47
   88082:	f000 835e 	beq.w	88742 <_svfprintf_r+0x1512>
   88086:	9b08      	ldr	r3, [sp, #32]
   88088:	2b46      	cmp	r3, #70	; 0x46
   8808a:	f000 840b 	beq.w	888a4 <_svfprintf_r+0x1674>
   8808e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88090:	9310      	str	r3, [sp, #64]	; 0x40
   88092:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88094:	9a08      	ldr	r2, [sp, #32]
   88096:	3b01      	subs	r3, #1
   88098:	2a41      	cmp	r2, #65	; 0x41
   8809a:	9324      	str	r3, [sp, #144]	; 0x90
   8809c:	f000 85ad 	beq.w	88bfa <_svfprintf_r+0x19ca>
   880a0:	2100      	movs	r1, #0
   880a2:	b2f2      	uxtb	r2, r6
   880a4:	2b00      	cmp	r3, #0
   880a6:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   880aa:	bfb6      	itet	lt
   880ac:	222d      	movlt	r2, #45	; 0x2d
   880ae:	222b      	movge	r2, #43	; 0x2b
   880b0:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   880b2:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   880b6:	bfb8      	it	lt
   880b8:	f1c3 0301 	rsblt	r3, r3, #1
   880bc:	2b09      	cmp	r3, #9
   880be:	f340 85a2 	ble.w	88c06 <_svfprintf_r+0x19d6>
   880c2:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   880c6:	4672      	mov	r2, lr
   880c8:	469c      	mov	ip, r3
   880ca:	4cbf      	ldr	r4, [pc, #764]	; (883c8 <_svfprintf_r+0x1198>)
   880cc:	4660      	mov	r0, ip
   880ce:	4611      	mov	r1, r2
   880d0:	fb84 230c 	smull	r2, r3, r4, ip
   880d4:	ea4f 72ec 	mov.w	r2, ip, asr #31
   880d8:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   880dc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   880e0:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   880e4:	3330      	adds	r3, #48	; 0x30
   880e6:	2863      	cmp	r0, #99	; 0x63
   880e8:	4694      	mov	ip, r2
   880ea:	f801 3c01 	strb.w	r3, [r1, #-1]
   880ee:	f101 32ff 	add.w	r2, r1, #4294967295
   880f2:	dceb      	bgt.n	880cc <_svfprintf_r+0xe9c>
   880f4:	4663      	mov	r3, ip
   880f6:	3330      	adds	r3, #48	; 0x30
   880f8:	b2d8      	uxtb	r0, r3
   880fa:	1e8b      	subs	r3, r1, #2
   880fc:	459e      	cmp	lr, r3
   880fe:	f802 0c01 	strb.w	r0, [r2, #-1]
   88102:	f240 862c 	bls.w	88d5e <_svfprintf_r+0x1b2e>
   88106:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   8810a:	e001      	b.n	88110 <_svfprintf_r+0xee0>
   8810c:	f812 0b01 	ldrb.w	r0, [r2], #1
   88110:	4596      	cmp	lr, r2
   88112:	f803 0b01 	strb.w	r0, [r3], #1
   88116:	d1f9      	bne.n	8810c <_svfprintf_r+0xedc>
   88118:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   8811c:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88120:	1a5b      	subs	r3, r3, r1
   88122:	4413      	add	r3, r2
   88124:	aa26      	add	r2, sp, #152	; 0x98
   88126:	1a9b      	subs	r3, r3, r2
   88128:	931b      	str	r3, [sp, #108]	; 0x6c
   8812a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8812c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   8812e:	2b01      	cmp	r3, #1
   88130:	441a      	add	r2, r3
   88132:	920c      	str	r2, [sp, #48]	; 0x30
   88134:	f340 85cc 	ble.w	88cd0 <_svfprintf_r+0x1aa0>
   88138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8813a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   8813c:	4413      	add	r3, r2
   8813e:	930c      	str	r3, [sp, #48]	; 0x30
   88140:	2300      	movs	r3, #0
   88142:	9312      	str	r3, [sp, #72]	; 0x48
   88144:	9316      	str	r3, [sp, #88]	; 0x58
   88146:	9310      	str	r3, [sp, #64]	; 0x40
   88148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8814a:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   8814e:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   88152:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88156:	9207      	str	r2, [sp, #28]
   88158:	9308      	str	r3, [sp, #32]
   8815a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8815c:	2b00      	cmp	r3, #0
   8815e:	f040 8317 	bne.w	88790 <_svfprintf_r+0x1560>
   88162:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88166:	9309      	str	r3, [sp, #36]	; 0x24
   88168:	f7ff ba86 	b.w	87678 <_svfprintf_r+0x448>
   8816c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8816e:	2301      	movs	r3, #1
   88170:	f852 4b04 	ldr.w	r4, [r2], #4
   88174:	2500      	movs	r5, #0
   88176:	920e      	str	r2, [sp, #56]	; 0x38
   88178:	f7ff b96b 	b.w	87452 <_svfprintf_r+0x222>
   8817c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8817e:	f853 4b04 	ldr.w	r4, [r3], #4
   88182:	17e5      	asrs	r5, r4, #31
   88184:	930e      	str	r3, [sp, #56]	; 0x38
   88186:	4622      	mov	r2, r4
   88188:	462b      	mov	r3, r5
   8818a:	f7ff b933 	b.w	873f4 <_svfprintf_r+0x1c4>
   8818e:	9b07      	ldr	r3, [sp, #28]
   88190:	9308      	str	r3, [sp, #32]
   88192:	f7ff bae0 	b.w	87756 <_svfprintf_r+0x526>
   88196:	4b8d      	ldr	r3, [pc, #564]	; (883cc <_svfprintf_r+0x119c>)
   88198:	9319      	str	r3, [sp, #100]	; 0x64
   8819a:	9b07      	ldr	r3, [sp, #28]
   8819c:	0699      	lsls	r1, r3, #26
   8819e:	f140 80fe 	bpl.w	8839e <_svfprintf_r+0x116e>
   881a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   881a4:	3307      	adds	r3, #7
   881a6:	f023 0307 	bic.w	r3, r3, #7
   881aa:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   881ae:	930e      	str	r3, [sp, #56]	; 0x38
   881b0:	9a07      	ldr	r2, [sp, #28]
   881b2:	07d7      	lsls	r7, r2, #31
   881b4:	d50a      	bpl.n	881cc <_svfprintf_r+0xf9c>
   881b6:	ea54 0305 	orrs.w	r3, r4, r5
   881ba:	d007      	beq.n	881cc <_svfprintf_r+0xf9c>
   881bc:	2330      	movs	r3, #48	; 0x30
   881be:	f042 0202 	orr.w	r2, r2, #2
   881c2:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   881c6:	9207      	str	r2, [sp, #28]
   881c8:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   881cc:	9a07      	ldr	r2, [sp, #28]
   881ce:	2302      	movs	r3, #2
   881d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   881d4:	9208      	str	r2, [sp, #32]
   881d6:	f7ff b93c 	b.w	87452 <_svfprintf_r+0x222>
   881da:	4b7d      	ldr	r3, [pc, #500]	; (883d0 <_svfprintf_r+0x11a0>)
   881dc:	9319      	str	r3, [sp, #100]	; 0x64
   881de:	e7dc      	b.n	8819a <_svfprintf_r+0xf6a>
   881e0:	f043 0320 	orr.w	r3, r3, #32
   881e4:	f89b 6001 	ldrb.w	r6, [fp, #1]
   881e8:	9307      	str	r3, [sp, #28]
   881ea:	f10b 0b01 	add.w	fp, fp, #1
   881ee:	f7ff b86a 	b.w	872c6 <_svfprintf_r+0x96>
   881f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   881f6:	f89b 6001 	ldrb.w	r6, [fp, #1]
   881fa:	9307      	str	r3, [sp, #28]
   881fc:	f10b 0b01 	add.w	fp, fp, #1
   88200:	f7ff b861 	b.w	872c6 <_svfprintf_r+0x96>
   88204:	4651      	mov	r1, sl
   88206:	4648      	mov	r0, r9
   88208:	aa2a      	add	r2, sp, #168	; 0xa8
   8820a:	f004 fc57 	bl	8cabc <__ssprint_r>
   8820e:	2800      	cmp	r0, #0
   88210:	f47f ac56 	bne.w	87ac0 <_svfprintf_r+0x890>
   88214:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88216:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8821a:	f7ff bbad 	b.w	87978 <_svfprintf_r+0x748>
   8821e:	2140      	movs	r1, #64	; 0x40
   88220:	4648      	mov	r0, r9
   88222:	f003 fa73 	bl	8b70c <_malloc_r>
   88226:	f8cb 0000 	str.w	r0, [fp]
   8822a:	f8cb 0010 	str.w	r0, [fp, #16]
   8822e:	2800      	cmp	r0, #0
   88230:	f000 858d 	beq.w	88d4e <_svfprintf_r+0x1b1e>
   88234:	2340      	movs	r3, #64	; 0x40
   88236:	f8cb 3014 	str.w	r3, [fp, #20]
   8823a:	f7ff b811 	b.w	87260 <_svfprintf_r+0x30>
   8823e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88240:	463a      	mov	r2, r7
   88242:	2b06      	cmp	r3, #6
   88244:	bf28      	it	cs
   88246:	2306      	movcs	r3, #6
   88248:	9709      	str	r7, [sp, #36]	; 0x24
   8824a:	9712      	str	r7, [sp, #72]	; 0x48
   8824c:	9716      	str	r7, [sp, #88]	; 0x58
   8824e:	9710      	str	r7, [sp, #64]	; 0x40
   88250:	970d      	str	r7, [sp, #52]	; 0x34
   88252:	9308      	str	r3, [sp, #32]
   88254:	4f5f      	ldr	r7, [pc, #380]	; (883d4 <_svfprintf_r+0x11a4>)
   88256:	940e      	str	r4, [sp, #56]	; 0x38
   88258:	930c      	str	r3, [sp, #48]	; 0x30
   8825a:	f7ff ba0d 	b.w	87678 <_svfprintf_r+0x448>
   8825e:	2b10      	cmp	r3, #16
   88260:	f340 8558 	ble.w	88d14 <_svfprintf_r+0x1ae4>
   88264:	4651      	mov	r1, sl
   88266:	4a5c      	ldr	r2, [pc, #368]	; (883d8 <_svfprintf_r+0x11a8>)
   88268:	46ca      	mov	sl, r9
   8826a:	9709      	str	r7, [sp, #36]	; 0x24
   8826c:	2610      	movs	r6, #16
   8826e:	4617      	mov	r7, r2
   88270:	4689      	mov	r9, r1
   88272:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88274:	920f      	str	r2, [sp, #60]	; 0x3c
   88276:	e005      	b.n	88284 <_svfprintf_r+0x1054>
   88278:	f108 0808 	add.w	r8, r8, #8
   8827c:	3d10      	subs	r5, #16
   8827e:	2d10      	cmp	r5, #16
   88280:	f340 81fa 	ble.w	88678 <_svfprintf_r+0x1448>
   88284:	3301      	adds	r3, #1
   88286:	3410      	adds	r4, #16
   88288:	2b07      	cmp	r3, #7
   8828a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8828e:	e9c8 7600 	strd	r7, r6, [r8]
   88292:	ddf1      	ble.n	88278 <_svfprintf_r+0x1048>
   88294:	4649      	mov	r1, r9
   88296:	4650      	mov	r0, sl
   88298:	aa2a      	add	r2, sp, #168	; 0xa8
   8829a:	f004 fc0f 	bl	8cabc <__ssprint_r>
   8829e:	2800      	cmp	r0, #0
   882a0:	f040 83fd 	bne.w	88a9e <_svfprintf_r+0x186e>
   882a4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   882a8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   882ac:	e7e6      	b.n	8827c <_svfprintf_r+0x104c>
   882ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   882b0:	4642      	mov	r2, r8
   882b2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   882b6:	18fb      	adds	r3, r7, r3
   882b8:	9309      	str	r3, [sp, #36]	; 0x24
   882ba:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   882be:	970f      	str	r7, [sp, #60]	; 0x3c
   882c0:	4620      	mov	r0, r4
   882c2:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   882c6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   882c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   882ca:	f1b8 0f00 	cmp.w	r8, #0
   882ce:	d02d      	beq.n	8832c <_svfprintf_r+0x10fc>
   882d0:	bb7b      	cbnz	r3, 88332 <_svfprintf_r+0x1102>
   882d2:	3f01      	subs	r7, #1
   882d4:	f108 38ff 	add.w	r8, r8, #4294967295
   882d8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   882da:	991c      	ldr	r1, [sp, #112]	; 0x70
   882dc:	3301      	adds	r3, #1
   882de:	4458      	add	r0, fp
   882e0:	2b07      	cmp	r3, #7
   882e2:	e9c2 1b00 	strd	r1, fp, [r2]
   882e6:	902c      	str	r0, [sp, #176]	; 0xb0
   882e8:	932b      	str	r3, [sp, #172]	; 0xac
   882ea:	dc62      	bgt.n	883b2 <_svfprintf_r+0x1182>
   882ec:	3208      	adds	r2, #8
   882ee:	9909      	ldr	r1, [sp, #36]	; 0x24
   882f0:	783b      	ldrb	r3, [r7, #0]
   882f2:	1b8d      	subs	r5, r1, r6
   882f4:	429d      	cmp	r5, r3
   882f6:	bfa8      	it	ge
   882f8:	461d      	movge	r5, r3
   882fa:	2d00      	cmp	r5, #0
   882fc:	dd0b      	ble.n	88316 <_svfprintf_r+0x10e6>
   882fe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88300:	4428      	add	r0, r5
   88302:	3301      	adds	r3, #1
   88304:	2b07      	cmp	r3, #7
   88306:	e9c2 6500 	strd	r6, r5, [r2]
   8830a:	902c      	str	r0, [sp, #176]	; 0xb0
   8830c:	932b      	str	r3, [sp, #172]	; 0xac
   8830e:	f300 8111 	bgt.w	88534 <_svfprintf_r+0x1304>
   88312:	783b      	ldrb	r3, [r7, #0]
   88314:	3208      	adds	r2, #8
   88316:	2d00      	cmp	r5, #0
   88318:	bfb4      	ite	lt
   8831a:	461d      	movlt	r5, r3
   8831c:	1b5d      	subge	r5, r3, r5
   8831e:	2d00      	cmp	r5, #0
   88320:	dc0b      	bgt.n	8833a <_svfprintf_r+0x110a>
   88322:	441e      	add	r6, r3
   88324:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88326:	f1b8 0f00 	cmp.w	r8, #0
   8832a:	d1d1      	bne.n	882d0 <_svfprintf_r+0x10a0>
   8832c:	2b00      	cmp	r3, #0
   8832e:	f000 81f9 	beq.w	88724 <_svfprintf_r+0x14f4>
   88332:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88334:	3b01      	subs	r3, #1
   88336:	9312      	str	r3, [sp, #72]	; 0x48
   88338:	e7ce      	b.n	882d8 <_svfprintf_r+0x10a8>
   8833a:	2d10      	cmp	r5, #16
   8833c:	f340 84c5 	ble.w	88cca <_svfprintf_r+0x1a9a>
   88340:	992b      	ldr	r1, [sp, #172]	; 0xac
   88342:	2410      	movs	r4, #16
   88344:	460b      	mov	r3, r1
   88346:	e004      	b.n	88352 <_svfprintf_r+0x1122>
   88348:	3d10      	subs	r5, #16
   8834a:	2d10      	cmp	r5, #16
   8834c:	f102 0208 	add.w	r2, r2, #8
   88350:	dd16      	ble.n	88380 <_svfprintf_r+0x1150>
   88352:	3301      	adds	r3, #1
   88354:	4920      	ldr	r1, [pc, #128]	; (883d8 <_svfprintf_r+0x11a8>)
   88356:	3010      	adds	r0, #16
   88358:	2b07      	cmp	r3, #7
   8835a:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   8835e:	e9c2 1400 	strd	r1, r4, [r2]
   88362:	ddf1      	ble.n	88348 <_svfprintf_r+0x1118>
   88364:	4651      	mov	r1, sl
   88366:	4648      	mov	r0, r9
   88368:	aa2a      	add	r2, sp, #168	; 0xa8
   8836a:	f004 fba7 	bl	8cabc <__ssprint_r>
   8836e:	2800      	cmp	r0, #0
   88370:	f47f aba6 	bne.w	87ac0 <_svfprintf_r+0x890>
   88374:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   88378:	3d10      	subs	r5, #16
   8837a:	2d10      	cmp	r5, #16
   8837c:	aa2d      	add	r2, sp, #180	; 0xb4
   8837e:	dce8      	bgt.n	88352 <_svfprintf_r+0x1122>
   88380:	4619      	mov	r1, r3
   88382:	1c4b      	adds	r3, r1, #1
   88384:	4914      	ldr	r1, [pc, #80]	; (883d8 <_svfprintf_r+0x11a8>)
   88386:	4428      	add	r0, r5
   88388:	2b07      	cmp	r3, #7
   8838a:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   8838e:	e9c2 1500 	strd	r1, r5, [r2]
   88392:	f300 8215 	bgt.w	887c0 <_svfprintf_r+0x1590>
   88396:	783b      	ldrb	r3, [r7, #0]
   88398:	3208      	adds	r2, #8
   8839a:	441e      	add	r6, r3
   8839c:	e7c2      	b.n	88324 <_svfprintf_r+0x10f4>
   8839e:	9b07      	ldr	r3, [sp, #28]
   883a0:	06da      	lsls	r2, r3, #27
   883a2:	f140 8084 	bpl.w	884ae <_svfprintf_r+0x127e>
   883a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   883a8:	2500      	movs	r5, #0
   883aa:	f853 4b04 	ldr.w	r4, [r3], #4
   883ae:	930e      	str	r3, [sp, #56]	; 0x38
   883b0:	e6fe      	b.n	881b0 <_svfprintf_r+0xf80>
   883b2:	4651      	mov	r1, sl
   883b4:	4648      	mov	r0, r9
   883b6:	aa2a      	add	r2, sp, #168	; 0xa8
   883b8:	f004 fb80 	bl	8cabc <__ssprint_r>
   883bc:	2800      	cmp	r0, #0
   883be:	f47f ab7f 	bne.w	87ac0 <_svfprintf_r+0x890>
   883c2:	982c      	ldr	r0, [sp, #176]	; 0xb0
   883c4:	aa2d      	add	r2, sp, #180	; 0xb4
   883c6:	e792      	b.n	882ee <_svfprintf_r+0x10be>
   883c8:	66666667 	.word	0x66666667
   883cc:	0008da84 	.word	0x0008da84
   883d0:	0008da98 	.word	0x0008da98
   883d4:	0008daac 	.word	0x0008daac
   883d8:	0008dac8 	.word	0x0008dac8
   883dc:	2200      	movs	r2, #0
   883de:	9b08      	ldr	r3, [sp, #32]
   883e0:	f8cd b01c 	str.w	fp, [sp, #28]
   883e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   883e8:	960c      	str	r6, [sp, #48]	; 0x30
   883ea:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   883ee:	4693      	mov	fp, r2
   883f0:	46ca      	mov	sl, r9
   883f2:	461e      	mov	r6, r3
   883f4:	46c1      	mov	r9, r8
   883f6:	af56      	add	r7, sp, #344	; 0x158
   883f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   883fc:	e00b      	b.n	88416 <_svfprintf_r+0x11e6>
   883fe:	220a      	movs	r2, #10
   88400:	2300      	movs	r3, #0
   88402:	4620      	mov	r0, r4
   88404:	4629      	mov	r1, r5
   88406:	f7fe fc77 	bl	86cf8 <__aeabi_uldivmod>
   8840a:	2d00      	cmp	r5, #0
   8840c:	bf08      	it	eq
   8840e:	2c0a      	cmpeq	r4, #10
   88410:	d31b      	bcc.n	8844a <_svfprintf_r+0x121a>
   88412:	4604      	mov	r4, r0
   88414:	460d      	mov	r5, r1
   88416:	220a      	movs	r2, #10
   88418:	2300      	movs	r3, #0
   8841a:	4620      	mov	r0, r4
   8841c:	4629      	mov	r1, r5
   8841e:	f7fe fc6b 	bl	86cf8 <__aeabi_uldivmod>
   88422:	3230      	adds	r2, #48	; 0x30
   88424:	f807 2c01 	strb.w	r2, [r7, #-1]
   88428:	f10b 0b01 	add.w	fp, fp, #1
   8842c:	3f01      	subs	r7, #1
   8842e:	2e00      	cmp	r6, #0
   88430:	d0e5      	beq.n	883fe <_svfprintf_r+0x11ce>
   88432:	f898 3000 	ldrb.w	r3, [r8]
   88436:	459b      	cmp	fp, r3
   88438:	d1e1      	bne.n	883fe <_svfprintf_r+0x11ce>
   8843a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   8843e:	d0de      	beq.n	883fe <_svfprintf_r+0x11ce>
   88440:	2d00      	cmp	r5, #0
   88442:	bf08      	it	eq
   88444:	2c0a      	cmpeq	r4, #10
   88446:	f080 8128 	bcs.w	8869a <_svfprintf_r+0x146a>
   8844a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   8844e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   88452:	46c8      	mov	r8, r9
   88454:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   88456:	46d1      	mov	r9, sl
   88458:	f8dd b01c 	ldr.w	fp, [sp, #28]
   8845c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   88460:	f7ff bb9f 	b.w	87ba2 <_svfprintf_r+0x972>
   88464:	4651      	mov	r1, sl
   88466:	4648      	mov	r0, r9
   88468:	aa2a      	add	r2, sp, #168	; 0xa8
   8846a:	931e      	str	r3, [sp, #120]	; 0x78
   8846c:	f004 fb26 	bl	8cabc <__ssprint_r>
   88470:	2800      	cmp	r0, #0
   88472:	f47f ab25 	bne.w	87ac0 <_svfprintf_r+0x890>
   88476:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8847a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8847c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8847e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88482:	f7ff b84a 	b.w	8751a <_svfprintf_r+0x2ea>
   88486:	2001      	movs	r0, #1
   88488:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8848a:	49c5      	ldr	r1, [pc, #788]	; (887a0 <_svfprintf_r+0x1570>)
   8848c:	4403      	add	r3, r0
   8848e:	4404      	add	r4, r0
   88490:	2b07      	cmp	r3, #7
   88492:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88496:	e9c8 1000 	strd	r1, r0, [r8]
   8849a:	f73f abdf 	bgt.w	87c5c <_svfprintf_r+0xa2c>
   8849e:	f108 0808 	add.w	r8, r8, #8
   884a2:	f7ff bbe7 	b.w	87c74 <_svfprintf_r+0xa44>
   884a6:	46d1      	mov	r9, sl
   884a8:	46b3      	mov	fp, r6
   884aa:	f7ff bb0a 	b.w	87ac2 <_svfprintf_r+0x892>
   884ae:	9b07      	ldr	r3, [sp, #28]
   884b0:	065b      	lsls	r3, r3, #25
   884b2:	f140 80cb 	bpl.w	8864c <_svfprintf_r+0x141c>
   884b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   884b8:	2500      	movs	r5, #0
   884ba:	f853 4b04 	ldr.w	r4, [r3], #4
   884be:	930e      	str	r3, [sp, #56]	; 0x38
   884c0:	b2a4      	uxth	r4, r4
   884c2:	e675      	b.n	881b0 <_svfprintf_r+0xf80>
   884c4:	4651      	mov	r1, sl
   884c6:	4648      	mov	r0, r9
   884c8:	aa2a      	add	r2, sp, #168	; 0xa8
   884ca:	f004 faf7 	bl	8cabc <__ssprint_r>
   884ce:	2800      	cmp	r0, #0
   884d0:	f47f aaf6 	bne.w	87ac0 <_svfprintf_r+0x890>
   884d4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   884d6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   884da:	f7ff ba3a 	b.w	87952 <_svfprintf_r+0x722>
   884de:	46d1      	mov	r9, sl
   884e0:	46da      	mov	sl, fp
   884e2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   884e6:	3501      	adds	r5, #1
   884e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   884ea:	4434      	add	r4, r6
   884ec:	2d07      	cmp	r5, #7
   884ee:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   884f2:	e9c8 3600 	strd	r3, r6, [r8]
   884f6:	f77f ab24 	ble.w	87b42 <_svfprintf_r+0x912>
   884fa:	4651      	mov	r1, sl
   884fc:	4648      	mov	r0, r9
   884fe:	aa2a      	add	r2, sp, #168	; 0xa8
   88500:	f004 fadc 	bl	8cabc <__ssprint_r>
   88504:	2800      	cmp	r0, #0
   88506:	f47f aadb 	bne.w	87ac0 <_svfprintf_r+0x890>
   8850a:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8850e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88512:	f7ff bb18 	b.w	87b46 <_svfprintf_r+0x916>
   88516:	4aa3      	ldr	r2, [pc, #652]	; (887a4 <_svfprintf_r+0x1574>)
   88518:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8851a:	920f      	str	r2, [sp, #60]	; 0x3c
   8851c:	3301      	adds	r3, #1
   8851e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88520:	442c      	add	r4, r5
   88522:	2b07      	cmp	r3, #7
   88524:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88528:	e9c8 2500 	strd	r2, r5, [r8]
   8852c:	f77f a82d 	ble.w	8758a <_svfprintf_r+0x35a>
   88530:	f7ff bbc2 	b.w	87cb8 <_svfprintf_r+0xa88>
   88534:	4651      	mov	r1, sl
   88536:	4648      	mov	r0, r9
   88538:	aa2a      	add	r2, sp, #168	; 0xa8
   8853a:	f004 fabf 	bl	8cabc <__ssprint_r>
   8853e:	2800      	cmp	r0, #0
   88540:	f47f aabe 	bne.w	87ac0 <_svfprintf_r+0x890>
   88544:	783b      	ldrb	r3, [r7, #0]
   88546:	982c      	ldr	r0, [sp, #176]	; 0xb0
   88548:	aa2d      	add	r2, sp, #180	; 0xb4
   8854a:	e6e4      	b.n	88316 <_svfprintf_r+0x10e6>
   8854c:	4651      	mov	r1, sl
   8854e:	4648      	mov	r0, r9
   88550:	aa2a      	add	r2, sp, #168	; 0xa8
   88552:	f004 fab3 	bl	8cabc <__ssprint_r>
   88556:	2800      	cmp	r0, #0
   88558:	f47f aab2 	bne.w	87ac0 <_svfprintf_r+0x890>
   8855c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8855e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88562:	f7fe bffd 	b.w	87560 <_svfprintf_r+0x330>
   88566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88568:	990a      	ldr	r1, [sp, #40]	; 0x28
   8856a:	f853 2b04 	ldr.w	r2, [r3], #4
   8856e:	465f      	mov	r7, fp
   88570:	6011      	str	r1, [r2, #0]
   88572:	930e      	str	r3, [sp, #56]	; 0x38
   88574:	f7ff b82a 	b.w	875cc <_svfprintf_r+0x39c>
   88578:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8857a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   8857c:	3301      	adds	r3, #1
   8857e:	9818      	ldr	r0, [sp, #96]	; 0x60
   88580:	440c      	add	r4, r1
   88582:	2b07      	cmp	r3, #7
   88584:	e9c8 0100 	strd	r0, r1, [r8]
   88588:	942c      	str	r4, [sp, #176]	; 0xb0
   8858a:	932b      	str	r3, [sp, #172]	; 0xac
   8858c:	f300 80ac 	bgt.w	886e8 <_svfprintf_r+0x14b8>
   88590:	f108 0808 	add.w	r8, r8, #8
   88594:	2a00      	cmp	r2, #0
   88596:	f6bf ab85 	bge.w	87ca4 <_svfprintf_r+0xa74>
   8859a:	4255      	negs	r5, r2
   8859c:	3210      	adds	r2, #16
   8859e:	f280 83d3 	bge.w	88d48 <_svfprintf_r+0x1b18>
   885a2:	4651      	mov	r1, sl
   885a4:	4a7f      	ldr	r2, [pc, #508]	; (887a4 <_svfprintf_r+0x1574>)
   885a6:	46ca      	mov	sl, r9
   885a8:	9709      	str	r7, [sp, #36]	; 0x24
   885aa:	2610      	movs	r6, #16
   885ac:	4617      	mov	r7, r2
   885ae:	4689      	mov	r9, r1
   885b0:	920f      	str	r2, [sp, #60]	; 0x3c
   885b2:	e005      	b.n	885c0 <_svfprintf_r+0x1390>
   885b4:	f108 0808 	add.w	r8, r8, #8
   885b8:	3d10      	subs	r5, #16
   885ba:	2d10      	cmp	r5, #16
   885bc:	f340 82aa 	ble.w	88b14 <_svfprintf_r+0x18e4>
   885c0:	3301      	adds	r3, #1
   885c2:	3410      	adds	r4, #16
   885c4:	2b07      	cmp	r3, #7
   885c6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   885ca:	e9c8 7600 	strd	r7, r6, [r8]
   885ce:	ddf1      	ble.n	885b4 <_svfprintf_r+0x1384>
   885d0:	4649      	mov	r1, r9
   885d2:	4650      	mov	r0, sl
   885d4:	aa2a      	add	r2, sp, #168	; 0xa8
   885d6:	f004 fa71 	bl	8cabc <__ssprint_r>
   885da:	2800      	cmp	r0, #0
   885dc:	f040 825f 	bne.w	88a9e <_svfprintf_r+0x186e>
   885e0:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   885e4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   885e8:	e7e6      	b.n	885b8 <_svfprintf_r+0x1388>
   885ea:	4638      	mov	r0, r7
   885ec:	f004 fa04 	bl	8c9f8 <strlen>
   885f0:	462b      	mov	r3, r5
   885f2:	4602      	mov	r2, r0
   885f4:	9509      	str	r5, [sp, #36]	; 0x24
   885f6:	f7ff b894 	b.w	87722 <_svfprintf_r+0x4f2>
   885fa:	9b07      	ldr	r3, [sp, #28]
   885fc:	2500      	movs	r5, #0
   885fe:	f413 7f00 	tst.w	r3, #512	; 0x200
   88602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88604:	f853 4b04 	ldr.w	r4, [r3], #4
   88608:	930e      	str	r3, [sp, #56]	; 0x38
   8860a:	bf18      	it	ne
   8860c:	b2e4      	uxtbne	r4, r4
   8860e:	f7fe bf1b 	b.w	87448 <_svfprintf_r+0x218>
   88612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88614:	9b08      	ldr	r3, [sp, #32]
   88616:	f852 4b04 	ldr.w	r4, [r2], #4
   8861a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8861e:	f04f 0500 	mov.w	r5, #0
   88622:	f04f 0301 	mov.w	r3, #1
   88626:	920e      	str	r2, [sp, #56]	; 0x38
   88628:	bf18      	it	ne
   8862a:	b2e4      	uxtbne	r4, r4
   8862c:	f7fe bf11 	b.w	87452 <_svfprintf_r+0x222>
   88630:	9b07      	ldr	r3, [sp, #28]
   88632:	f413 7f00 	tst.w	r3, #512	; 0x200
   88636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88638:	f853 4b04 	ldr.w	r4, [r3], #4
   8863c:	bf18      	it	ne
   8863e:	b264      	sxtbne	r4, r4
   88640:	17e5      	asrs	r5, r4, #31
   88642:	930e      	str	r3, [sp, #56]	; 0x38
   88644:	4622      	mov	r2, r4
   88646:	462b      	mov	r3, r5
   88648:	f7fe bed4 	b.w	873f4 <_svfprintf_r+0x1c4>
   8864c:	9b07      	ldr	r3, [sp, #28]
   8864e:	2500      	movs	r5, #0
   88650:	f413 7f00 	tst.w	r3, #512	; 0x200
   88654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88656:	f853 4b04 	ldr.w	r4, [r3], #4
   8865a:	930e      	str	r3, [sp, #56]	; 0x38
   8865c:	bf18      	it	ne
   8865e:	b2e4      	uxtbne	r4, r4
   88660:	e5a6      	b.n	881b0 <_svfprintf_r+0xf80>
   88662:	4b50      	ldr	r3, [pc, #320]	; (887a4 <_svfprintf_r+0x1574>)
   88664:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88666:	930f      	str	r3, [sp, #60]	; 0x3c
   88668:	f7ff ba15 	b.w	87a96 <_svfprintf_r+0x866>
   8866c:	232d      	movs	r3, #45	; 0x2d
   8866e:	461a      	mov	r2, r3
   88670:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   88674:	f7fe bfee 	b.w	87654 <_svfprintf_r+0x424>
   88678:	464a      	mov	r2, r9
   8867a:	46d1      	mov	r9, sl
   8867c:	4692      	mov	sl, r2
   8867e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   88680:	3301      	adds	r3, #1
   88682:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88684:	442c      	add	r4, r5
   88686:	2b07      	cmp	r3, #7
   88688:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8868c:	e9c8 2500 	strd	r2, r5, [r8]
   88690:	dc3b      	bgt.n	8870a <_svfprintf_r+0x14da>
   88692:	f108 0808 	add.w	r8, r8, #8
   88696:	f7ff bb8c 	b.w	87db2 <_svfprintf_r+0xb82>
   8869a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   8869c:	991c      	ldr	r1, [sp, #112]	; 0x70
   8869e:	1aff      	subs	r7, r7, r3
   886a0:	461a      	mov	r2, r3
   886a2:	4638      	mov	r0, r7
   886a4:	f004 f9d6 	bl	8ca54 <strncpy>
   886a8:	f898 3001 	ldrb.w	r3, [r8, #1]
   886ac:	b10b      	cbz	r3, 886b2 <_svfprintf_r+0x1482>
   886ae:	f108 0801 	add.w	r8, r8, #1
   886b2:	220a      	movs	r2, #10
   886b4:	2300      	movs	r3, #0
   886b6:	4620      	mov	r0, r4
   886b8:	4629      	mov	r1, r5
   886ba:	f7fe fb1d 	bl	86cf8 <__aeabi_uldivmod>
   886be:	f04f 0b00 	mov.w	fp, #0
   886c2:	e6a6      	b.n	88412 <_svfprintf_r+0x11e2>
   886c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   886c6:	18bd      	adds	r5, r7, r2
   886c8:	1bad      	subs	r5, r5, r6
   886ca:	1ad3      	subs	r3, r2, r3
   886cc:	429d      	cmp	r5, r3
   886ce:	bfa8      	it	ge
   886d0:	461d      	movge	r5, r3
   886d2:	f7ff bba0 	b.w	87e16 <_svfprintf_r+0xbe6>
   886d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   886d8:	990a      	ldr	r1, [sp, #40]	; 0x28
   886da:	f853 2b04 	ldr.w	r2, [r3], #4
   886de:	465f      	mov	r7, fp
   886e0:	8011      	strh	r1, [r2, #0]
   886e2:	930e      	str	r3, [sp, #56]	; 0x38
   886e4:	f7fe bf72 	b.w	875cc <_svfprintf_r+0x39c>
   886e8:	4651      	mov	r1, sl
   886ea:	4648      	mov	r0, r9
   886ec:	aa2a      	add	r2, sp, #168	; 0xa8
   886ee:	f004 f9e5 	bl	8cabc <__ssprint_r>
   886f2:	2800      	cmp	r0, #0
   886f4:	f47f a9e4 	bne.w	87ac0 <_svfprintf_r+0x890>
   886f8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   886fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   886fe:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88702:	e747      	b.n	88594 <_svfprintf_r+0x1364>
   88704:	2306      	movs	r3, #6
   88706:	9309      	str	r3, [sp, #36]	; 0x24
   88708:	e482      	b.n	88010 <_svfprintf_r+0xde0>
   8870a:	4651      	mov	r1, sl
   8870c:	4648      	mov	r0, r9
   8870e:	aa2a      	add	r2, sp, #168	; 0xa8
   88710:	f004 f9d4 	bl	8cabc <__ssprint_r>
   88714:	2800      	cmp	r0, #0
   88716:	f47f a9d3 	bne.w	87ac0 <_svfprintf_r+0x890>
   8871a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8871c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88720:	f7ff bb47 	b.w	87db2 <_svfprintf_r+0xb82>
   88724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88726:	971a      	str	r7, [sp, #104]	; 0x68
   88728:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   8872a:	4690      	mov	r8, r2
   8872c:	18fb      	adds	r3, r7, r3
   8872e:	429e      	cmp	r6, r3
   88730:	4632      	mov	r2, r6
   88732:	bf28      	it	cs
   88734:	461a      	movcs	r2, r3
   88736:	4604      	mov	r4, r0
   88738:	4616      	mov	r6, r2
   8873a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8873e:	f7ff bb3f 	b.w	87dc0 <_svfprintf_r+0xb90>
   88742:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88744:	1cd8      	adds	r0, r3, #3
   88746:	9310      	str	r3, [sp, #64]	; 0x40
   88748:	db02      	blt.n	88750 <_svfprintf_r+0x1520>
   8874a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8874c:	4293      	cmp	r3, r2
   8874e:	dd04      	ble.n	8875a <_svfprintf_r+0x152a>
   88750:	3e02      	subs	r6, #2
   88752:	f026 0320 	bic.w	r3, r6, #32
   88756:	9308      	str	r3, [sp, #32]
   88758:	e49b      	b.n	88092 <_svfprintf_r+0xe62>
   8875a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8875c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   8875e:	428b      	cmp	r3, r1
   88760:	f2c0 817a 	blt.w	88a58 <_svfprintf_r+0x1828>
   88764:	07ea      	lsls	r2, r5, #31
   88766:	f140 8283 	bpl.w	88c70 <_svfprintf_r+0x1a40>
   8876a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   8876c:	4413      	add	r3, r2
   8876e:	930c      	str	r3, [sp, #48]	; 0x30
   88770:	056e      	lsls	r6, r5, #21
   88772:	f140 8277 	bpl.w	88c64 <_svfprintf_r+0x1a34>
   88776:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88778:	2b00      	cmp	r3, #0
   8877a:	f300 8210 	bgt.w	88b9e <_svfprintf_r+0x196e>
   8877e:	2667      	movs	r6, #103	; 0x67
   88780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88782:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88786:	9308      	str	r3, [sp, #32]
   88788:	2300      	movs	r3, #0
   8878a:	9312      	str	r3, [sp, #72]	; 0x48
   8878c:	9316      	str	r3, [sp, #88]	; 0x58
   8878e:	e4e4      	b.n	8815a <_svfprintf_r+0xf2a>
   88790:	222d      	movs	r2, #45	; 0x2d
   88792:	2300      	movs	r3, #0
   88794:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   88798:	9309      	str	r3, [sp, #36]	; 0x24
   8879a:	f7fe bf70 	b.w	8767e <_svfprintf_r+0x44e>
   8879e:	bf00      	nop
   887a0:	0008dab4 	.word	0x0008dab4
   887a4:	0008dac8 	.word	0x0008dac8
   887a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   887aa:	42a3      	cmp	r3, r4
   887ac:	f4bf ac65 	bcs.w	8807a <_svfprintf_r+0xe4a>
   887b0:	2130      	movs	r1, #48	; 0x30
   887b2:	1c5a      	adds	r2, r3, #1
   887b4:	9228      	str	r2, [sp, #160]	; 0xa0
   887b6:	7019      	strb	r1, [r3, #0]
   887b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   887ba:	429c      	cmp	r4, r3
   887bc:	d8f9      	bhi.n	887b2 <_svfprintf_r+0x1582>
   887be:	e45c      	b.n	8807a <_svfprintf_r+0xe4a>
   887c0:	4651      	mov	r1, sl
   887c2:	4648      	mov	r0, r9
   887c4:	aa2a      	add	r2, sp, #168	; 0xa8
   887c6:	f004 f979 	bl	8cabc <__ssprint_r>
   887ca:	2800      	cmp	r0, #0
   887cc:	f47f a978 	bne.w	87ac0 <_svfprintf_r+0x890>
   887d0:	783b      	ldrb	r3, [r7, #0]
   887d2:	982c      	ldr	r0, [sp, #176]	; 0xb0
   887d4:	aa2d      	add	r2, sp, #180	; 0xb4
   887d6:	441e      	add	r6, r3
   887d8:	e5a4      	b.n	88324 <_svfprintf_r+0x10f4>
   887da:	4651      	mov	r1, sl
   887dc:	4648      	mov	r0, r9
   887de:	aa2a      	add	r2, sp, #168	; 0xa8
   887e0:	f004 f96c 	bl	8cabc <__ssprint_r>
   887e4:	2800      	cmp	r0, #0
   887e6:	f47f a96b 	bne.w	87ac0 <_svfprintf_r+0x890>
   887ea:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   887ec:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   887f0:	f7ff bad7 	b.w	87da2 <_svfprintf_r+0xb72>
   887f4:	4651      	mov	r1, sl
   887f6:	4648      	mov	r0, r9
   887f8:	aa2a      	add	r2, sp, #168	; 0xa8
   887fa:	f004 f95f 	bl	8cabc <__ssprint_r>
   887fe:	2800      	cmp	r0, #0
   88800:	f47f a95e 	bne.w	87ac0 <_svfprintf_r+0x890>
   88804:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88806:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88808:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8880c:	f7ff baee 	b.w	87dec <_svfprintf_r+0xbbc>
   88810:	9c09      	ldr	r4, [sp, #36]	; 0x24
   88812:	a928      	add	r1, sp, #160	; 0xa0
   88814:	e9cd 0400 	strd	r0, r4, [sp]
   88818:	9104      	str	r1, [sp, #16]
   8881a:	a825      	add	r0, sp, #148	; 0x94
   8881c:	a924      	add	r1, sp, #144	; 0x90
   8881e:	e9cd 1002 	strd	r1, r0, [sp, #8]
   88822:	4648      	mov	r0, r9
   88824:	f001 facc 	bl	89dc0 <_dtoa_r>
   88828:	2d47      	cmp	r5, #71	; 0x47
   8882a:	4607      	mov	r7, r0
   8882c:	d119      	bne.n	88862 <_svfprintf_r+0x1632>
   8882e:	9d07      	ldr	r5, [sp, #28]
   88830:	462b      	mov	r3, r5
   88832:	07db      	lsls	r3, r3, #31
   88834:	f100 812a 	bmi.w	88a8c <_svfprintf_r+0x185c>
   88838:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8883a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8883c:	9207      	str	r2, [sp, #28]
   8883e:	2247      	movs	r2, #71	; 0x47
   88840:	9208      	str	r2, [sp, #32]
   88842:	e41a      	b.n	8807a <_svfprintf_r+0xe4a>
   88844:	2003      	movs	r0, #3
   88846:	9c09      	ldr	r4, [sp, #36]	; 0x24
   88848:	a928      	add	r1, sp, #160	; 0xa0
   8884a:	e9cd 0400 	strd	r0, r4, [sp]
   8884e:	9104      	str	r1, [sp, #16]
   88850:	a825      	add	r0, sp, #148	; 0x94
   88852:	a924      	add	r1, sp, #144	; 0x90
   88854:	e9cd 1002 	strd	r1, r0, [sp, #8]
   88858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8885a:	4648      	mov	r0, r9
   8885c:	f001 fab0 	bl	89dc0 <_dtoa_r>
   88860:	4607      	mov	r7, r0
   88862:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88864:	2d46      	cmp	r5, #70	; 0x46
   88866:	eb07 0403 	add.w	r4, r7, r3
   8886a:	f47f abf9 	bne.w	88060 <_svfprintf_r+0xe30>
   8886e:	783b      	ldrb	r3, [r7, #0]
   88870:	2b30      	cmp	r3, #48	; 0x30
   88872:	f000 821c 	beq.w	88cae <_svfprintf_r+0x1a7e>
   88876:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88878:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8887a:	9d07      	ldr	r5, [sp, #28]
   8887c:	441c      	add	r4, r3
   8887e:	9207      	str	r2, [sp, #28]
   88880:	f7ff bbf1 	b.w	88066 <_svfprintf_r+0xe36>
   88884:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   88888:	f7ff b9c3 	b.w	87c12 <_svfprintf_r+0x9e2>
   8888c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8888e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88892:	9308      	str	r3, [sp, #32]
   88894:	930c      	str	r3, [sp, #48]	; 0x30
   88896:	9009      	str	r0, [sp, #36]	; 0x24
   88898:	940e      	str	r4, [sp, #56]	; 0x38
   8889a:	9012      	str	r0, [sp, #72]	; 0x48
   8889c:	9016      	str	r0, [sp, #88]	; 0x58
   8889e:	9010      	str	r0, [sp, #64]	; 0x40
   888a0:	f7fe beea 	b.w	87678 <_svfprintf_r+0x448>
   888a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   888a6:	2a00      	cmp	r2, #0
   888a8:	9210      	str	r2, [sp, #64]	; 0x40
   888aa:	f340 821b 	ble.w	88ce4 <_svfprintf_r+0x1ab4>
   888ae:	9909      	ldr	r1, [sp, #36]	; 0x24
   888b0:	f005 0301 	and.w	r3, r5, #1
   888b4:	430b      	orrs	r3, r1
   888b6:	f040 819a 	bne.w	88bee <_svfprintf_r+0x19be>
   888ba:	2666      	movs	r6, #102	; 0x66
   888bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   888be:	930c      	str	r3, [sp, #48]	; 0x30
   888c0:	056a      	lsls	r2, r5, #21
   888c2:	f100 816d 	bmi.w	88ba0 <_svfprintf_r+0x1970>
   888c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   888c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   888cc:	9308      	str	r3, [sp, #32]
   888ce:	e75b      	b.n	88788 <_svfprintf_r+0x1558>
   888d0:	4651      	mov	r1, sl
   888d2:	4648      	mov	r0, r9
   888d4:	aa2a      	add	r2, sp, #168	; 0xa8
   888d6:	f004 f8f1 	bl	8cabc <__ssprint_r>
   888da:	2800      	cmp	r0, #0
   888dc:	f47f a8f0 	bne.w	87ac0 <_svfprintf_r+0x890>
   888e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   888e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   888e4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   888e6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   888ea:	1ad3      	subs	r3, r2, r3
   888ec:	f7ff ba93 	b.w	87e16 <_svfprintf_r+0xbe6>
   888f0:	2330      	movs	r3, #48	; 0x30
   888f2:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   888f6:	2358      	movs	r3, #88	; 0x58
   888f8:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   888fc:	9b07      	ldr	r3, [sp, #28]
   888fe:	f043 0402 	orr.w	r4, r3, #2
   88902:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88904:	2b63      	cmp	r3, #99	; 0x63
   88906:	f300 80f2 	bgt.w	88aee <_svfprintf_r+0x18be>
   8890a:	2300      	movs	r3, #0
   8890c:	af3d      	add	r7, sp, #244	; 0xf4
   8890e:	930d      	str	r3, [sp, #52]	; 0x34
   88910:	9b07      	ldr	r3, [sp, #28]
   88912:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   88916:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   8891a:	9312      	str	r3, [sp, #72]	; 0x48
   8891c:	4613      	mov	r3, r2
   8891e:	2b00      	cmp	r3, #0
   88920:	f026 0520 	bic.w	r5, r6, #32
   88924:	9407      	str	r4, [sp, #28]
   88926:	f2c0 808d 	blt.w	88a44 <_svfprintf_r+0x1814>
   8892a:	930f      	str	r3, [sp, #60]	; 0x3c
   8892c:	2300      	movs	r3, #0
   8892e:	9508      	str	r5, [sp, #32]
   88930:	910c      	str	r1, [sp, #48]	; 0x30
   88932:	931e      	str	r3, [sp, #120]	; 0x78
   88934:	2e61      	cmp	r6, #97	; 0x61
   88936:	f000 817d 	beq.w	88c34 <_svfprintf_r+0x1a04>
   8893a:	2e41      	cmp	r6, #65	; 0x41
   8893c:	f47f ab77 	bne.w	8802e <_svfprintf_r+0xdfe>
   88940:	aa24      	add	r2, sp, #144	; 0x90
   88942:	980c      	ldr	r0, [sp, #48]	; 0x30
   88944:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88946:	f003 ffc7 	bl	8c8d8 <frexp>
   8894a:	2200      	movs	r2, #0
   8894c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   88950:	f004 fd4e 	bl	8d3f0 <__aeabi_dmul>
   88954:	4604      	mov	r4, r0
   88956:	460d      	mov	r5, r1
   88958:	2200      	movs	r2, #0
   8895a:	2300      	movs	r3, #0
   8895c:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   88960:	f004 ffae 	bl	8d8c0 <__aeabi_dcmpeq>
   88964:	b108      	cbz	r0, 8896a <_svfprintf_r+0x173a>
   88966:	2301      	movs	r3, #1
   88968:	9324      	str	r3, [sp, #144]	; 0x90
   8896a:	4bae      	ldr	r3, [pc, #696]	; (88c24 <_svfprintf_r+0x19f4>)
   8896c:	930c      	str	r3, [sp, #48]	; 0x30
   8896e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88970:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   88974:	3b01      	subs	r3, #1
   88976:	9613      	str	r6, [sp, #76]	; 0x4c
   88978:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   8897c:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   88980:	9721      	str	r7, [sp, #132]	; 0x84
   88982:	46ba      	mov	sl, r7
   88984:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   88988:	4699      	mov	r9, r3
   8898a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8898e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   88992:	e006      	b.n	889a2 <_svfprintf_r+0x1772>
   88994:	2200      	movs	r2, #0
   88996:	2300      	movs	r3, #0
   88998:	f004 ff92 	bl	8d8c0 <__aeabi_dcmpeq>
   8899c:	f109 39ff 	add.w	r9, r9, #4294967295
   889a0:	b9e8      	cbnz	r0, 889de <_svfprintf_r+0x17ae>
   889a2:	2200      	movs	r2, #0
   889a4:	4ba0      	ldr	r3, [pc, #640]	; (88c28 <_svfprintf_r+0x19f8>)
   889a6:	4630      	mov	r0, r6
   889a8:	4639      	mov	r1, r7
   889aa:	f004 fd21 	bl	8d3f0 <__aeabi_dmul>
   889ae:	460d      	mov	r5, r1
   889b0:	4604      	mov	r4, r0
   889b2:	f004 ffcd 	bl	8d950 <__aeabi_d2iz>
   889b6:	4680      	mov	r8, r0
   889b8:	f004 fcb0 	bl	8d31c <__aeabi_i2d>
   889bc:	460b      	mov	r3, r1
   889be:	4602      	mov	r2, r0
   889c0:	4629      	mov	r1, r5
   889c2:	4620      	mov	r0, r4
   889c4:	f004 fb5c 	bl	8d080 <__aeabi_dsub>
   889c8:	f81b 3008 	ldrb.w	r3, [fp, r8]
   889cc:	f1b9 3fff 	cmp.w	r9, #4294967295
   889d0:	4655      	mov	r5, sl
   889d2:	4606      	mov	r6, r0
   889d4:	460f      	mov	r7, r1
   889d6:	464c      	mov	r4, r9
   889d8:	f80a 3b01 	strb.w	r3, [sl], #1
   889dc:	d1da      	bne.n	88994 <_svfprintf_r+0x1764>
   889de:	4630      	mov	r0, r6
   889e0:	4639      	mov	r1, r7
   889e2:	2200      	movs	r2, #0
   889e4:	4b91      	ldr	r3, [pc, #580]	; (88c2c <_svfprintf_r+0x19fc>)
   889e6:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   889ea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   889ec:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   889f0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   889f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   889f8:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   889fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   88a00:	9f21      	ldr	r7, [sp, #132]	; 0x84
   88a02:	f004 ff85 	bl	8d910 <__aeabi_dcmpgt>
   88a06:	2800      	cmp	r0, #0
   88a08:	d155      	bne.n	88ab6 <_svfprintf_r+0x1886>
   88a0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88a0e:	2200      	movs	r2, #0
   88a10:	4b86      	ldr	r3, [pc, #536]	; (88c2c <_svfprintf_r+0x19fc>)
   88a12:	f004 ff55 	bl	8d8c0 <__aeabi_dcmpeq>
   88a16:	b110      	cbz	r0, 88a1e <_svfprintf_r+0x17ee>
   88a18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88a1a:	07db      	lsls	r3, r3, #31
   88a1c:	d44b      	bmi.n	88ab6 <_svfprintf_r+0x1886>
   88a1e:	2c00      	cmp	r4, #0
   88a20:	db08      	blt.n	88a34 <_svfprintf_r+0x1804>
   88a22:	2230      	movs	r2, #48	; 0x30
   88a24:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88a26:	1c63      	adds	r3, r4, #1
   88a28:	440b      	add	r3, r1
   88a2a:	f801 2b01 	strb.w	r2, [r1], #1
   88a2e:	428b      	cmp	r3, r1
   88a30:	d1fb      	bne.n	88a2a <_svfprintf_r+0x17fa>
   88a32:	910f      	str	r1, [sp, #60]	; 0x3c
   88a34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88a36:	9d07      	ldr	r5, [sp, #28]
   88a38:	1bdb      	subs	r3, r3, r7
   88a3a:	9313      	str	r3, [sp, #76]	; 0x4c
   88a3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88a3e:	9307      	str	r3, [sp, #28]
   88a40:	f7ff bb1d 	b.w	8807e <_svfprintf_r+0xe4e>
   88a44:	9508      	str	r5, [sp, #32]
   88a46:	232d      	movs	r3, #45	; 0x2d
   88a48:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   88a4c:	931e      	str	r3, [sp, #120]	; 0x78
   88a4e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   88a52:	910c      	str	r1, [sp, #48]	; 0x30
   88a54:	930f      	str	r3, [sp, #60]	; 0x3c
   88a56:	e76d      	b.n	88934 <_svfprintf_r+0x1704>
   88a58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88a5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88a5c:	189a      	adds	r2, r3, r2
   88a5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88a60:	920c      	str	r2, [sp, #48]	; 0x30
   88a62:	2b00      	cmp	r3, #0
   88a64:	f340 811a 	ble.w	88c9c <_svfprintf_r+0x1a6c>
   88a68:	2667      	movs	r6, #103	; 0x67
   88a6a:	e729      	b.n	888c0 <_svfprintf_r+0x1690>
   88a6c:	2300      	movs	r3, #0
   88a6e:	9309      	str	r3, [sp, #36]	; 0x24
   88a70:	f7fe bc2b 	b.w	872ca <_svfprintf_r+0x9a>
   88a74:	4648      	mov	r0, r9
   88a76:	4651      	mov	r1, sl
   88a78:	aa2a      	add	r2, sp, #168	; 0xa8
   88a7a:	f004 f81f 	bl	8cabc <__ssprint_r>
   88a7e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88a82:	f7fe bdae 	b.w	875e2 <_svfprintf_r+0x3b2>
   88a86:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88a88:	f7ff b95f 	b.w	87d4a <_svfprintf_r+0xb1a>
   88a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88a8e:	9d07      	ldr	r5, [sp, #28]
   88a90:	18fc      	adds	r4, r7, r3
   88a92:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88a94:	9307      	str	r3, [sp, #28]
   88a96:	2347      	movs	r3, #71	; 0x47
   88a98:	9308      	str	r3, [sp, #32]
   88a9a:	f7ff bae4 	b.w	88066 <_svfprintf_r+0xe36>
   88a9e:	46cb      	mov	fp, r9
   88aa0:	46d1      	mov	r9, sl
   88aa2:	f7ff b80e 	b.w	87ac2 <_svfprintf_r+0x892>
   88aa6:	46d1      	mov	r9, sl
   88aa8:	f7ff b80b 	b.w	87ac2 <_svfprintf_r+0x892>
   88aac:	4b60      	ldr	r3, [pc, #384]	; (88c30 <_svfprintf_r+0x1a00>)
   88aae:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88ab0:	930f      	str	r3, [sp, #60]	; 0x3c
   88ab2:	f7fe bfb7 	b.w	87a24 <_svfprintf_r+0x7f4>
   88ab6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88ab8:	990c      	ldr	r1, [sp, #48]	; 0x30
   88aba:	9528      	str	r5, [sp, #160]	; 0xa0
   88abc:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88ac0:	7bc9      	ldrb	r1, [r1, #15]
   88ac2:	428a      	cmp	r2, r1
   88ac4:	f040 812a 	bne.w	88d1c <_svfprintf_r+0x1aec>
   88ac8:	2030      	movs	r0, #48	; 0x30
   88aca:	f803 0c01 	strb.w	r0, [r3, #-1]
   88ace:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88ad0:	1e5a      	subs	r2, r3, #1
   88ad2:	9228      	str	r2, [sp, #160]	; 0xa0
   88ad4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88ad8:	4291      	cmp	r1, r2
   88ada:	d0f6      	beq.n	88aca <_svfprintf_r+0x189a>
   88adc:	2a39      	cmp	r2, #57	; 0x39
   88ade:	bf0b      	itete	eq
   88ae0:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   88ae2:	3201      	addne	r2, #1
   88ae4:	7a92      	ldrbeq	r2, [r2, #10]
   88ae6:	b2d2      	uxtbne	r2, r2
   88ae8:	f803 2c01 	strb.w	r2, [r3, #-1]
   88aec:	e7a2      	b.n	88a34 <_svfprintf_r+0x1804>
   88aee:	4648      	mov	r0, r9
   88af0:	1c59      	adds	r1, r3, #1
   88af2:	f002 fe0b 	bl	8b70c <_malloc_r>
   88af6:	4607      	mov	r7, r0
   88af8:	2800      	cmp	r0, #0
   88afa:	f000 811d 	beq.w	88d38 <_svfprintf_r+0x1b08>
   88afe:	900d      	str	r0, [sp, #52]	; 0x34
   88b00:	e706      	b.n	88910 <_svfprintf_r+0x16e0>
   88b02:	2330      	movs	r3, #48	; 0x30
   88b04:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   88b08:	2378      	movs	r3, #120	; 0x78
   88b0a:	e6f5      	b.n	888f8 <_svfprintf_r+0x16c8>
   88b0c:	9b07      	ldr	r3, [sp, #28]
   88b0e:	9308      	str	r3, [sp, #32]
   88b10:	f7ff b894 	b.w	87c3c <_svfprintf_r+0xa0c>
   88b14:	464a      	mov	r2, r9
   88b16:	46d1      	mov	r9, sl
   88b18:	4692      	mov	sl, r2
   88b1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   88b1c:	3301      	adds	r3, #1
   88b1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88b20:	442c      	add	r4, r5
   88b22:	2b07      	cmp	r3, #7
   88b24:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88b28:	e9c8 2500 	strd	r2, r5, [r8]
   88b2c:	f77f a8b8 	ble.w	87ca0 <_svfprintf_r+0xa70>
   88b30:	4651      	mov	r1, sl
   88b32:	4648      	mov	r0, r9
   88b34:	aa2a      	add	r2, sp, #168	; 0xa8
   88b36:	f003 ffc1 	bl	8cabc <__ssprint_r>
   88b3a:	2800      	cmp	r0, #0
   88b3c:	f47e afc0 	bne.w	87ac0 <_svfprintf_r+0x890>
   88b40:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88b44:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88b48:	f7ff b8ac 	b.w	87ca4 <_svfprintf_r+0xa74>
   88b4c:	2b00      	cmp	r3, #0
   88b4e:	bf08      	it	eq
   88b50:	2301      	moveq	r3, #1
   88b52:	9309      	str	r3, [sp, #36]	; 0x24
   88b54:	9b07      	ldr	r3, [sp, #28]
   88b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   88b5a:	9312      	str	r3, [sp, #72]	; 0x48
   88b5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88b5e:	2b00      	cmp	r3, #0
   88b60:	930c      	str	r3, [sp, #48]	; 0x30
   88b62:	f2c0 80bd 	blt.w	88ce0 <_svfprintf_r+0x1ab0>
   88b66:	2402      	movs	r4, #2
   88b68:	9d09      	ldr	r5, [sp, #36]	; 0x24
   88b6a:	a828      	add	r0, sp, #160	; 0xa0
   88b6c:	aa25      	add	r2, sp, #148	; 0x94
   88b6e:	ab24      	add	r3, sp, #144	; 0x90
   88b70:	e9cd 2003 	strd	r2, r0, [sp, #12]
   88b74:	e9cd 4500 	strd	r4, r5, [sp]
   88b78:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   88b7c:	9302      	str	r3, [sp, #8]
   88b7e:	4622      	mov	r2, r4
   88b80:	462b      	mov	r3, r5
   88b82:	4648      	mov	r0, r9
   88b84:	911e      	str	r1, [sp, #120]	; 0x78
   88b86:	f001 f91b 	bl	89dc0 <_dtoa_r>
   88b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88b8c:	4607      	mov	r7, r0
   88b8e:	930f      	str	r3, [sp, #60]	; 0x3c
   88b90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88b92:	940c      	str	r4, [sp, #48]	; 0x30
   88b94:	930d      	str	r3, [sp, #52]	; 0x34
   88b96:	e64a      	b.n	8882e <_svfprintf_r+0x15fe>
   88b98:	2300      	movs	r3, #0
   88b9a:	930d      	str	r3, [sp, #52]	; 0x34
   88b9c:	e753      	b.n	88a46 <_svfprintf_r+0x1816>
   88b9e:	2667      	movs	r6, #103	; 0x67
   88ba0:	991a      	ldr	r1, [sp, #104]	; 0x68
   88ba2:	780b      	ldrb	r3, [r1, #0]
   88ba4:	2bff      	cmp	r3, #255	; 0xff
   88ba6:	f000 80de 	beq.w	88d66 <_svfprintf_r+0x1b36>
   88baa:	2400      	movs	r4, #0
   88bac:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88bae:	4620      	mov	r0, r4
   88bb0:	e003      	b.n	88bba <_svfprintf_r+0x198a>
   88bb2:	3001      	adds	r0, #1
   88bb4:	3101      	adds	r1, #1
   88bb6:	2bff      	cmp	r3, #255	; 0xff
   88bb8:	d008      	beq.n	88bcc <_svfprintf_r+0x199c>
   88bba:	4293      	cmp	r3, r2
   88bbc:	da06      	bge.n	88bcc <_svfprintf_r+0x199c>
   88bbe:	1ad2      	subs	r2, r2, r3
   88bc0:	784b      	ldrb	r3, [r1, #1]
   88bc2:	2b00      	cmp	r3, #0
   88bc4:	d1f5      	bne.n	88bb2 <_svfprintf_r+0x1982>
   88bc6:	780b      	ldrb	r3, [r1, #0]
   88bc8:	3401      	adds	r4, #1
   88bca:	e7f4      	b.n	88bb6 <_svfprintf_r+0x1986>
   88bcc:	911a      	str	r1, [sp, #104]	; 0x68
   88bce:	9210      	str	r2, [sp, #64]	; 0x40
   88bd0:	9016      	str	r0, [sp, #88]	; 0x58
   88bd2:	9412      	str	r4, [sp, #72]	; 0x48
   88bd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88bd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   88bd8:	990c      	ldr	r1, [sp, #48]	; 0x30
   88bda:	4413      	add	r3, r2
   88bdc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   88bde:	fb02 1303 	mla	r3, r2, r3, r1
   88be2:	930c      	str	r3, [sp, #48]	; 0x30
   88be4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88be8:	9308      	str	r3, [sp, #32]
   88bea:	f7ff bab6 	b.w	8815a <_svfprintf_r+0xf2a>
   88bee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88bf0:	2666      	movs	r6, #102	; 0x66
   88bf2:	18d3      	adds	r3, r2, r3
   88bf4:	4419      	add	r1, r3
   88bf6:	910c      	str	r1, [sp, #48]	; 0x30
   88bf8:	e662      	b.n	888c0 <_svfprintf_r+0x1690>
   88bfa:	f106 020f 	add.w	r2, r6, #15
   88bfe:	2101      	movs	r1, #1
   88c00:	b2d2      	uxtb	r2, r2
   88c02:	f7ff ba4f 	b.w	880a4 <_svfprintf_r+0xe74>
   88c06:	2900      	cmp	r1, #0
   88c08:	d167      	bne.n	88cda <_svfprintf_r+0x1aaa>
   88c0a:	2230      	movs	r2, #48	; 0x30
   88c0c:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   88c10:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   88c14:	3330      	adds	r3, #48	; 0x30
   88c16:	f802 3b01 	strb.w	r3, [r2], #1
   88c1a:	ab26      	add	r3, sp, #152	; 0x98
   88c1c:	1ad3      	subs	r3, r2, r3
   88c1e:	931b      	str	r3, [sp, #108]	; 0x6c
   88c20:	f7ff ba83 	b.w	8812a <_svfprintf_r+0xefa>
   88c24:	0008da98 	.word	0x0008da98
   88c28:	40300000 	.word	0x40300000
   88c2c:	3fe00000 	.word	0x3fe00000
   88c30:	0008dac8 	.word	0x0008dac8
   88c34:	aa24      	add	r2, sp, #144	; 0x90
   88c36:	980c      	ldr	r0, [sp, #48]	; 0x30
   88c38:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88c3a:	f003 fe4d 	bl	8c8d8 <frexp>
   88c3e:	2200      	movs	r2, #0
   88c40:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   88c44:	f004 fbd4 	bl	8d3f0 <__aeabi_dmul>
   88c48:	4604      	mov	r4, r0
   88c4a:	460d      	mov	r5, r1
   88c4c:	2200      	movs	r2, #0
   88c4e:	2300      	movs	r3, #0
   88c50:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   88c54:	f004 fe34 	bl	8d8c0 <__aeabi_dcmpeq>
   88c58:	b108      	cbz	r0, 88c5e <_svfprintf_r+0x1a2e>
   88c5a:	2301      	movs	r3, #1
   88c5c:	9324      	str	r3, [sp, #144]	; 0x90
   88c5e:	4b44      	ldr	r3, [pc, #272]	; (88d70 <_svfprintf_r+0x1b40>)
   88c60:	930c      	str	r3, [sp, #48]	; 0x30
   88c62:	e684      	b.n	8896e <_svfprintf_r+0x173e>
   88c64:	2667      	movs	r6, #103	; 0x67
   88c66:	e62e      	b.n	888c6 <_svfprintf_r+0x1696>
   88c68:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88c6c:	f7fe bcb9 	b.w	875e2 <_svfprintf_r+0x3b2>
   88c70:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88c72:	930c      	str	r3, [sp, #48]	; 0x30
   88c74:	e57c      	b.n	88770 <_svfprintf_r+0x1540>
   88c76:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88c78:	2003      	movs	r0, #3
   88c7a:	2b00      	cmp	r3, #0
   88c7c:	bfb8      	it	lt
   88c7e:	232d      	movlt	r3, #45	; 0x2d
   88c80:	f04f 0100 	mov.w	r1, #0
   88c84:	bfba      	itte	lt
   88c86:	461a      	movlt	r2, r3
   88c88:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   88c8c:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   88c90:	4f38      	ldr	r7, [pc, #224]	; (88d74 <_svfprintf_r+0x1b44>)
   88c92:	4b39      	ldr	r3, [pc, #228]	; (88d78 <_svfprintf_r+0x1b48>)
   88c94:	9008      	str	r0, [sp, #32]
   88c96:	910d      	str	r1, [sp, #52]	; 0x34
   88c98:	f7fe bce2 	b.w	87660 <_svfprintf_r+0x430>
   88c9c:	f1c3 0301 	rsb	r3, r3, #1
   88ca0:	441a      	add	r2, r3
   88ca2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88ca6:	2667      	movs	r6, #103	; 0x67
   88ca8:	920c      	str	r2, [sp, #48]	; 0x30
   88caa:	9308      	str	r3, [sp, #32]
   88cac:	e56c      	b.n	88788 <_svfprintf_r+0x1558>
   88cae:	2200      	movs	r2, #0
   88cb0:	2300      	movs	r3, #0
   88cb2:	980c      	ldr	r0, [sp, #48]	; 0x30
   88cb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88cb6:	f004 fe03 	bl	8d8c0 <__aeabi_dcmpeq>
   88cba:	2800      	cmp	r0, #0
   88cbc:	f47f addb 	bne.w	88876 <_svfprintf_r+0x1646>
   88cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88cc2:	f1c3 0301 	rsb	r3, r3, #1
   88cc6:	9324      	str	r3, [sp, #144]	; 0x90
   88cc8:	e5d6      	b.n	88878 <_svfprintf_r+0x1648>
   88cca:	992b      	ldr	r1, [sp, #172]	; 0xac
   88ccc:	f7ff bb59 	b.w	88382 <_svfprintf_r+0x1152>
   88cd0:	07e9      	lsls	r1, r5, #31
   88cd2:	f57f aa35 	bpl.w	88140 <_svfprintf_r+0xf10>
   88cd6:	f7ff ba2f 	b.w	88138 <_svfprintf_r+0xf08>
   88cda:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88cde:	e799      	b.n	88c14 <_svfprintf_r+0x19e4>
   88ce0:	900d      	str	r0, [sp, #52]	; 0x34
   88ce2:	e6b0      	b.n	88a46 <_svfprintf_r+0x1816>
   88ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88ce6:	f005 0501 	and.w	r5, r5, #1
   88cea:	4613      	mov	r3, r2
   88cec:	432b      	orrs	r3, r5
   88cee:	d104      	bne.n	88cfa <_svfprintf_r+0x1aca>
   88cf0:	2301      	movs	r3, #1
   88cf2:	2666      	movs	r6, #102	; 0x66
   88cf4:	9308      	str	r3, [sp, #32]
   88cf6:	930c      	str	r3, [sp, #48]	; 0x30
   88cf8:	e546      	b.n	88788 <_svfprintf_r+0x1558>
   88cfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88cfc:	2666      	movs	r6, #102	; 0x66
   88cfe:	3301      	adds	r3, #1
   88d00:	441a      	add	r2, r3
   88d02:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88d06:	920c      	str	r2, [sp, #48]	; 0x30
   88d08:	9308      	str	r3, [sp, #32]
   88d0a:	e53d      	b.n	88788 <_svfprintf_r+0x1558>
   88d0c:	4b1b      	ldr	r3, [pc, #108]	; (88d7c <_svfprintf_r+0x1b4c>)
   88d0e:	930f      	str	r3, [sp, #60]	; 0x3c
   88d10:	f7ff bbe9 	b.w	884e6 <_svfprintf_r+0x12b6>
   88d14:	4a19      	ldr	r2, [pc, #100]	; (88d7c <_svfprintf_r+0x1b4c>)
   88d16:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88d18:	920f      	str	r2, [sp, #60]	; 0x3c
   88d1a:	e4b1      	b.n	88680 <_svfprintf_r+0x1450>
   88d1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88d1e:	e6dd      	b.n	88adc <_svfprintf_r+0x18ac>
   88d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88d22:	f89b 6001 	ldrb.w	r6, [fp, #1]
   88d26:	f853 0b04 	ldr.w	r0, [r3], #4
   88d2a:	4693      	mov	fp, r2
   88d2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   88d30:	9009      	str	r0, [sp, #36]	; 0x24
   88d32:	930e      	str	r3, [sp, #56]	; 0x38
   88d34:	f7fe bac7 	b.w	872c6 <_svfprintf_r+0x96>
   88d38:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88d40:	f8aa 300c 	strh.w	r3, [sl, #12]
   88d44:	f7fe bc4d 	b.w	875e2 <_svfprintf_r+0x3b2>
   88d48:	4a0c      	ldr	r2, [pc, #48]	; (88d7c <_svfprintf_r+0x1b4c>)
   88d4a:	920f      	str	r2, [sp, #60]	; 0x3c
   88d4c:	e6e6      	b.n	88b1c <_svfprintf_r+0x18ec>
   88d4e:	230c      	movs	r3, #12
   88d50:	f04f 32ff 	mov.w	r2, #4294967295
   88d54:	f8c9 3000 	str.w	r3, [r9]
   88d58:	920a      	str	r2, [sp, #40]	; 0x28
   88d5a:	f7fe bc49 	b.w	875f0 <_svfprintf_r+0x3c0>
   88d5e:	2302      	movs	r3, #2
   88d60:	931b      	str	r3, [sp, #108]	; 0x6c
   88d62:	f7ff b9e2 	b.w	8812a <_svfprintf_r+0xefa>
   88d66:	2300      	movs	r3, #0
   88d68:	9312      	str	r3, [sp, #72]	; 0x48
   88d6a:	9316      	str	r3, [sp, #88]	; 0x58
   88d6c:	e732      	b.n	88bd4 <_svfprintf_r+0x19a4>
   88d6e:	bf00      	nop
   88d70:	0008da84 	.word	0x0008da84
   88d74:	0008da7c 	.word	0x0008da7c
   88d78:	0008da80 	.word	0x0008da80
   88d7c:	0008dac8 	.word	0x0008dac8

00088d80 <__sprint_r.part.0>:
   88d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88d84:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   88d86:	4690      	mov	r8, r2
   88d88:	049c      	lsls	r4, r3, #18
   88d8a:	d52d      	bpl.n	88de8 <__sprint_r.part.0+0x68>
   88d8c:	6893      	ldr	r3, [r2, #8]
   88d8e:	6812      	ldr	r2, [r2, #0]
   88d90:	b343      	cbz	r3, 88de4 <__sprint_r.part.0+0x64>
   88d92:	468b      	mov	fp, r1
   88d94:	4606      	mov	r6, r0
   88d96:	f102 0908 	add.w	r9, r2, #8
   88d9a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   88d9e:	ea5f 079a 	movs.w	r7, sl, lsr #2
   88da2:	d015      	beq.n	88dd0 <__sprint_r.part.0+0x50>
   88da4:	2400      	movs	r4, #0
   88da6:	3d04      	subs	r5, #4
   88da8:	e001      	b.n	88dae <__sprint_r.part.0+0x2e>
   88daa:	42a7      	cmp	r7, r4
   88dac:	d00e      	beq.n	88dcc <__sprint_r.part.0+0x4c>
   88dae:	465a      	mov	r2, fp
   88db0:	4630      	mov	r0, r6
   88db2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   88db6:	f002 f8fb 	bl	8afb0 <_fputwc_r>
   88dba:	1c43      	adds	r3, r0, #1
   88dbc:	f104 0401 	add.w	r4, r4, #1
   88dc0:	d1f3      	bne.n	88daa <__sprint_r.part.0+0x2a>
   88dc2:	2300      	movs	r3, #0
   88dc4:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88dc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88dcc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88dd0:	f02a 0a03 	bic.w	sl, sl, #3
   88dd4:	eba3 030a 	sub.w	r3, r3, sl
   88dd8:	f8c8 3008 	str.w	r3, [r8, #8]
   88ddc:	f109 0908 	add.w	r9, r9, #8
   88de0:	2b00      	cmp	r3, #0
   88de2:	d1da      	bne.n	88d9a <__sprint_r.part.0+0x1a>
   88de4:	2000      	movs	r0, #0
   88de6:	e7ec      	b.n	88dc2 <__sprint_r.part.0+0x42>
   88de8:	f002 fa6c 	bl	8b2c4 <__sfvwrite_r>
   88dec:	2300      	movs	r3, #0
   88dee:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88df6:	bf00      	nop

00088df8 <_vfiprintf_r>:
   88df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88dfc:	b0bb      	sub	sp, #236	; 0xec
   88dfe:	461c      	mov	r4, r3
   88e00:	4689      	mov	r9, r1
   88e02:	4690      	mov	r8, r2
   88e04:	e9cd 3004 	strd	r3, r0, [sp, #16]
   88e08:	b118      	cbz	r0, 88e12 <_vfiprintf_r+0x1a>
   88e0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88e0c:	2b00      	cmp	r3, #0
   88e0e:	f000 827a 	beq.w	89306 <_vfiprintf_r+0x50e>
   88e12:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88e16:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   88e1a:	07de      	lsls	r6, r3, #31
   88e1c:	b28a      	uxth	r2, r1
   88e1e:	d402      	bmi.n	88e26 <_vfiprintf_r+0x2e>
   88e20:	058d      	lsls	r5, r1, #22
   88e22:	f140 851a 	bpl.w	8985a <_vfiprintf_r+0xa62>
   88e26:	0490      	lsls	r0, r2, #18
   88e28:	d40a      	bmi.n	88e40 <_vfiprintf_r+0x48>
   88e2a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88e2e:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   88e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   88e36:	f8a9 200c 	strh.w	r2, [r9, #12]
   88e3a:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   88e3e:	b292      	uxth	r2, r2
   88e40:	0711      	lsls	r1, r2, #28
   88e42:	f140 80f6 	bpl.w	89032 <_vfiprintf_r+0x23a>
   88e46:	f8d9 3010 	ldr.w	r3, [r9, #16]
   88e4a:	2b00      	cmp	r3, #0
   88e4c:	f000 80f1 	beq.w	89032 <_vfiprintf_r+0x23a>
   88e50:	f002 031a 	and.w	r3, r2, #26
   88e54:	2b0a      	cmp	r3, #10
   88e56:	f000 80fa 	beq.w	8904e <_vfiprintf_r+0x256>
   88e5a:	2300      	movs	r3, #0
   88e5c:	46cb      	mov	fp, r9
   88e5e:	e9cd 3308 	strd	r3, r3, [sp, #32]
   88e62:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   88e66:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   88e6a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88e6e:	9303      	str	r3, [sp, #12]
   88e70:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   88e74:	f898 3000 	ldrb.w	r3, [r8]
   88e78:	2b00      	cmp	r3, #0
   88e7a:	f000 81ed 	beq.w	89258 <_vfiprintf_r+0x460>
   88e7e:	4644      	mov	r4, r8
   88e80:	e004      	b.n	88e8c <_vfiprintf_r+0x94>
   88e82:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   88e86:	2b00      	cmp	r3, #0
   88e88:	f000 8127 	beq.w	890da <_vfiprintf_r+0x2e2>
   88e8c:	2b25      	cmp	r3, #37	; 0x25
   88e8e:	d1f8      	bne.n	88e82 <_vfiprintf_r+0x8a>
   88e90:	ebb4 0508 	subs.w	r5, r4, r8
   88e94:	f040 8125 	bne.w	890e2 <_vfiprintf_r+0x2ea>
   88e98:	7823      	ldrb	r3, [r4, #0]
   88e9a:	2b00      	cmp	r3, #0
   88e9c:	f000 81dc 	beq.w	89258 <_vfiprintf_r+0x460>
   88ea0:	f04f 0200 	mov.w	r2, #0
   88ea4:	2300      	movs	r3, #0
   88ea6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88eaa:	f04f 32ff 	mov.w	r2, #4294967295
   88eae:	252b      	movs	r5, #43	; 0x2b
   88eb0:	461f      	mov	r7, r3
   88eb2:	9302      	str	r3, [sp, #8]
   88eb4:	7863      	ldrb	r3, [r4, #1]
   88eb6:	f104 0801 	add.w	r8, r4, #1
   88eba:	9200      	str	r2, [sp, #0]
   88ebc:	f108 0801 	add.w	r8, r8, #1
   88ec0:	f1a3 0220 	sub.w	r2, r3, #32
   88ec4:	2a5a      	cmp	r2, #90	; 0x5a
   88ec6:	f200 8141 	bhi.w	8914c <_vfiprintf_r+0x354>
   88eca:	e8df f012 	tbh	[pc, r2, lsl #1]
   88ece:	0272      	.short	0x0272
   88ed0:	013f013f 	.word	0x013f013f
   88ed4:	013f026d 	.word	0x013f026d
   88ed8:	013f013f 	.word	0x013f013f
   88edc:	013f024b 	.word	0x013f024b
   88ee0:	006a013f 	.word	0x006a013f
   88ee4:	013f0227 	.word	0x013f0227
   88ee8:	02310222 	.word	0x02310222
   88eec:	022c013f 	.word	0x022c013f
   88ef0:	005b005b 	.word	0x005b005b
   88ef4:	005b005b 	.word	0x005b005b
   88ef8:	005b005b 	.word	0x005b005b
   88efc:	005b005b 	.word	0x005b005b
   88f00:	013f005b 	.word	0x013f005b
   88f04:	013f013f 	.word	0x013f013f
   88f08:	013f013f 	.word	0x013f013f
   88f0c:	013f013f 	.word	0x013f013f
   88f10:	013f013f 	.word	0x013f013f
   88f14:	007a020e 	.word	0x007a020e
   88f18:	013f013f 	.word	0x013f013f
   88f1c:	013f013f 	.word	0x013f013f
   88f20:	013f013f 	.word	0x013f013f
   88f24:	013f013f 	.word	0x013f013f
   88f28:	013f013f 	.word	0x013f013f
   88f2c:	013f00d7 	.word	0x013f00d7
   88f30:	013f013f 	.word	0x013f013f
   88f34:	013f01f2 	.word	0x013f01f2
   88f38:	013f0297 	.word	0x013f0297
   88f3c:	0500013f 	.word	0x0500013f
   88f40:	013f013f 	.word	0x013f013f
   88f44:	013f013f 	.word	0x013f013f
   88f48:	013f013f 	.word	0x013f013f
   88f4c:	013f013f 	.word	0x013f013f
   88f50:	013f013f 	.word	0x013f013f
   88f54:	007c020e 	.word	0x007c020e
   88f58:	013f013f 	.word	0x013f013f
   88f5c:	028a013f 	.word	0x028a013f
   88f60:	0075007c 	.word	0x0075007c
   88f64:	027d013f 	.word	0x027d013f
   88f68:	02b6013f 	.word	0x02b6013f
   88f6c:	02a600d9 	.word	0x02a600d9
   88f70:	013f0075 	.word	0x013f0075
   88f74:	007201f2 	.word	0x007201f2
   88f78:	013f04fe 	.word	0x013f04fe
   88f7c:	051c013f 	.word	0x051c013f
   88f80:	0072013f 	.word	0x0072013f
   88f84:	2100      	movs	r1, #0
   88f86:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88f8a:	f818 3b01 	ldrb.w	r3, [r8], #1
   88f8e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88f92:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   88f96:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88f9a:	2a09      	cmp	r2, #9
   88f9c:	d9f5      	bls.n	88f8a <_vfiprintf_r+0x192>
   88f9e:	9102      	str	r1, [sp, #8]
   88fa0:	e78e      	b.n	88ec0 <_vfiprintf_r+0xc8>
   88fa2:	9b04      	ldr	r3, [sp, #16]
   88fa4:	f853 2b04 	ldr.w	r2, [r3], #4
   88fa8:	2a00      	cmp	r2, #0
   88faa:	9202      	str	r2, [sp, #8]
   88fac:	9304      	str	r3, [sp, #16]
   88fae:	f2c0 81ad 	blt.w	8930c <_vfiprintf_r+0x514>
   88fb2:	f898 3000 	ldrb.w	r3, [r8]
   88fb6:	e781      	b.n	88ebc <_vfiprintf_r+0xc4>
   88fb8:	f898 3000 	ldrb.w	r3, [r8]
   88fbc:	f047 0720 	orr.w	r7, r7, #32
   88fc0:	e77c      	b.n	88ebc <_vfiprintf_r+0xc4>
   88fc2:	f047 0710 	orr.w	r7, r7, #16
   88fc6:	06bc      	lsls	r4, r7, #26
   88fc8:	f140 8158 	bpl.w	8927c <_vfiprintf_r+0x484>
   88fcc:	9c04      	ldr	r4, [sp, #16]
   88fce:	3407      	adds	r4, #7
   88fd0:	f024 0307 	bic.w	r3, r4, #7
   88fd4:	4619      	mov	r1, r3
   88fd6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   88fda:	4614      	mov	r4, r2
   88fdc:	461d      	mov	r5, r3
   88fde:	9104      	str	r1, [sp, #16]
   88fe0:	2a00      	cmp	r2, #0
   88fe2:	f173 0300 	sbcs.w	r3, r3, #0
   88fe6:	f2c0 841e 	blt.w	89826 <_vfiprintf_r+0xa2e>
   88fea:	9b00      	ldr	r3, [sp, #0]
   88fec:	3301      	adds	r3, #1
   88fee:	f000 84f0 	beq.w	899d2 <_vfiprintf_r+0xbda>
   88ff2:	ea54 0305 	orrs.w	r3, r4, r5
   88ff6:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   88ffa:	f000 83fc 	beq.w	897f6 <_vfiprintf_r+0x9fe>
   88ffe:	2d00      	cmp	r5, #0
   89000:	bf08      	it	eq
   89002:	2c0a      	cmpeq	r4, #10
   89004:	f080 84a9 	bcs.w	8995a <_vfiprintf_r+0xb62>
   89008:	2301      	movs	r3, #1
   8900a:	464f      	mov	r7, r9
   8900c:	3430      	adds	r4, #48	; 0x30
   8900e:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   89012:	9301      	str	r3, [sp, #4]
   89014:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   89018:	e9dd 2100 	ldrd	r2, r1, [sp]
   8901c:	428a      	cmp	r2, r1
   8901e:	bfb8      	it	lt
   89020:	460a      	movlt	r2, r1
   89022:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   89026:	4615      	mov	r5, r2
   89028:	2b00      	cmp	r3, #0
   8902a:	f000 809d 	beq.w	89168 <_vfiprintf_r+0x370>
   8902e:	3501      	adds	r5, #1
   89030:	e09a      	b.n	89168 <_vfiprintf_r+0x370>
   89032:	4649      	mov	r1, r9
   89034:	9805      	ldr	r0, [sp, #20]
   89036:	f000 fdb9 	bl	89bac <__swsetup_r>
   8903a:	2800      	cmp	r0, #0
   8903c:	f040 854a 	bne.w	89ad4 <_vfiprintf_r+0xcdc>
   89040:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   89044:	f002 031a 	and.w	r3, r2, #26
   89048:	2b0a      	cmp	r3, #10
   8904a:	f47f af06 	bne.w	88e5a <_vfiprintf_r+0x62>
   8904e:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   89052:	2b00      	cmp	r3, #0
   89054:	f6ff af01 	blt.w	88e5a <_vfiprintf_r+0x62>
   89058:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8905c:	07de      	lsls	r6, r3, #31
   8905e:	d402      	bmi.n	89066 <_vfiprintf_r+0x26e>
   89060:	0595      	lsls	r5, r2, #22
   89062:	f140 850e 	bpl.w	89a82 <_vfiprintf_r+0xc8a>
   89066:	4623      	mov	r3, r4
   89068:	4642      	mov	r2, r8
   8906a:	4649      	mov	r1, r9
   8906c:	9805      	ldr	r0, [sp, #20]
   8906e:	f000 fd59 	bl	89b24 <__sbprintf>
   89072:	9003      	str	r0, [sp, #12]
   89074:	9803      	ldr	r0, [sp, #12]
   89076:	b03b      	add	sp, #236	; 0xec
   89078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8907c:	f047 0710 	orr.w	r7, r7, #16
   89080:	06b8      	lsls	r0, r7, #26
   89082:	9c04      	ldr	r4, [sp, #16]
   89084:	f140 8109 	bpl.w	8929a <_vfiprintf_r+0x4a2>
   89088:	3407      	adds	r4, #7
   8908a:	f024 0307 	bic.w	r3, r4, #7
   8908e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   89092:	9304      	str	r3, [sp, #16]
   89094:	2300      	movs	r3, #0
   89096:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   8909a:	f04f 0200 	mov.w	r2, #0
   8909e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   890a2:	9a00      	ldr	r2, [sp, #0]
   890a4:	4611      	mov	r1, r2
   890a6:	3101      	adds	r1, #1
   890a8:	f000 81db 	beq.w	89462 <_vfiprintf_r+0x66a>
   890ac:	ea54 0105 	orrs.w	r1, r4, r5
   890b0:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   890b4:	f040 81d4 	bne.w	89460 <_vfiprintf_r+0x668>
   890b8:	2a00      	cmp	r2, #0
   890ba:	f040 848d 	bne.w	899d8 <_vfiprintf_r+0xbe0>
   890be:	2b00      	cmp	r3, #0
   890c0:	f040 839e 	bne.w	89800 <_vfiprintf_r+0xa08>
   890c4:	f019 0301 	ands.w	r3, r9, #1
   890c8:	9301      	str	r3, [sp, #4]
   890ca:	f000 83c3 	beq.w	89854 <_vfiprintf_r+0xa5c>
   890ce:	2330      	movs	r3, #48	; 0x30
   890d0:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   890d4:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   890d8:	e79e      	b.n	89018 <_vfiprintf_r+0x220>
   890da:	ebb4 0508 	subs.w	r5, r4, r8
   890de:	f000 80bb 	beq.w	89258 <_vfiprintf_r+0x460>
   890e2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   890e6:	3301      	adds	r3, #1
   890e8:	442a      	add	r2, r5
   890ea:	2b07      	cmp	r3, #7
   890ec:	e9ca 8500 	strd	r8, r5, [sl]
   890f0:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   890f4:	dc06      	bgt.n	89104 <_vfiprintf_r+0x30c>
   890f6:	f10a 0a08 	add.w	sl, sl, #8
   890fa:	9a03      	ldr	r2, [sp, #12]
   890fc:	7823      	ldrb	r3, [r4, #0]
   890fe:	442a      	add	r2, r5
   89100:	9203      	str	r2, [sp, #12]
   89102:	e6ca      	b.n	88e9a <_vfiprintf_r+0xa2>
   89104:	2a00      	cmp	r2, #0
   89106:	f000 8372 	beq.w	897ee <_vfiprintf_r+0x9f6>
   8910a:	4659      	mov	r1, fp
   8910c:	9805      	ldr	r0, [sp, #20]
   8910e:	aa0e      	add	r2, sp, #56	; 0x38
   89110:	f7ff fe36 	bl	88d80 <__sprint_r.part.0>
   89114:	b950      	cbnz	r0, 8912c <_vfiprintf_r+0x334>
   89116:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8911a:	e7ee      	b.n	890fa <_vfiprintf_r+0x302>
   8911c:	4659      	mov	r1, fp
   8911e:	9805      	ldr	r0, [sp, #20]
   89120:	aa0e      	add	r2, sp, #56	; 0x38
   89122:	f7ff fe2d 	bl	88d80 <__sprint_r.part.0>
   89126:	2800      	cmp	r0, #0
   89128:	f000 808d 	beq.w	89246 <_vfiprintf_r+0x44e>
   8912c:	46d9      	mov	r9, fp
   8912e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89132:	f013 0f01 	tst.w	r3, #1
   89136:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8913a:	f000 8095 	beq.w	89268 <_vfiprintf_r+0x470>
   8913e:	065b      	lsls	r3, r3, #25
   89140:	f100 84d4 	bmi.w	89aec <_vfiprintf_r+0xcf4>
   89144:	9803      	ldr	r0, [sp, #12]
   89146:	b03b      	add	sp, #236	; 0xec
   89148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8914c:	2b00      	cmp	r3, #0
   8914e:	f000 8083 	beq.w	89258 <_vfiprintf_r+0x460>
   89152:	2501      	movs	r5, #1
   89154:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   89158:	f04f 0300 	mov.w	r3, #0
   8915c:	9501      	str	r5, [sp, #4]
   8915e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   89162:	ae21      	add	r6, sp, #132	; 0x84
   89164:	2300      	movs	r3, #0
   89166:	9300      	str	r3, [sp, #0]
   89168:	f017 0302 	ands.w	r3, r7, #2
   8916c:	9307      	str	r3, [sp, #28]
   8916e:	bf18      	it	ne
   89170:	3502      	addne	r5, #2
   89172:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   89176:	9306      	str	r3, [sp, #24]
   89178:	d104      	bne.n	89184 <_vfiprintf_r+0x38c>
   8917a:	9b02      	ldr	r3, [sp, #8]
   8917c:	1b5c      	subs	r4, r3, r5
   8917e:	2c00      	cmp	r4, #0
   89180:	f300 8274 	bgt.w	8966c <_vfiprintf_r+0x874>
   89184:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89188:	1c48      	adds	r0, r1, #1
   8918a:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   8918e:	b174      	cbz	r4, 891ae <_vfiprintf_r+0x3b6>
   89190:	2101      	movs	r1, #1
   89192:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   89196:	440a      	add	r2, r1
   89198:	2807      	cmp	r0, #7
   8919a:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   8919e:	e9ca 4100 	strd	r4, r1, [sl]
   891a2:	f300 8246 	bgt.w	89632 <_vfiprintf_r+0x83a>
   891a6:	4601      	mov	r1, r0
   891a8:	f10a 0a08 	add.w	sl, sl, #8
   891ac:	3001      	adds	r0, #1
   891ae:	9b07      	ldr	r3, [sp, #28]
   891b0:	b1c3      	cbz	r3, 891e4 <_vfiprintf_r+0x3ec>
   891b2:	2102      	movs	r1, #2
   891b4:	ab0d      	add	r3, sp, #52	; 0x34
   891b6:	440a      	add	r2, r1
   891b8:	2807      	cmp	r0, #7
   891ba:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   891be:	e9ca 3100 	strd	r3, r1, [sl]
   891c2:	f340 824e 	ble.w	89662 <_vfiprintf_r+0x86a>
   891c6:	2a00      	cmp	r2, #0
   891c8:	f000 830c 	beq.w	897e4 <_vfiprintf_r+0x9ec>
   891cc:	4659      	mov	r1, fp
   891ce:	9805      	ldr	r0, [sp, #20]
   891d0:	aa0e      	add	r2, sp, #56	; 0x38
   891d2:	f7ff fdd5 	bl	88d80 <__sprint_r.part.0>
   891d6:	2800      	cmp	r0, #0
   891d8:	d1a8      	bne.n	8912c <_vfiprintf_r+0x334>
   891da:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   891de:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   891e2:	1c48      	adds	r0, r1, #1
   891e4:	9b06      	ldr	r3, [sp, #24]
   891e6:	2b80      	cmp	r3, #128	; 0x80
   891e8:	f000 817e 	beq.w	894e8 <_vfiprintf_r+0x6f0>
   891ec:	e9dd 3400 	ldrd	r3, r4, [sp]
   891f0:	1b1c      	subs	r4, r3, r4
   891f2:	2c00      	cmp	r4, #0
   891f4:	f300 81d3 	bgt.w	8959e <_vfiprintf_r+0x7a6>
   891f8:	9b01      	ldr	r3, [sp, #4]
   891fa:	2807      	cmp	r0, #7
   891fc:	441a      	add	r2, r3
   891fe:	e9ca 6300 	strd	r6, r3, [sl]
   89202:	9210      	str	r2, [sp, #64]	; 0x40
   89204:	900f      	str	r0, [sp, #60]	; 0x3c
   89206:	f340 816c 	ble.w	894e2 <_vfiprintf_r+0x6ea>
   8920a:	2a00      	cmp	r2, #0
   8920c:	f000 8276 	beq.w	896fc <_vfiprintf_r+0x904>
   89210:	4659      	mov	r1, fp
   89212:	9805      	ldr	r0, [sp, #20]
   89214:	aa0e      	add	r2, sp, #56	; 0x38
   89216:	f7ff fdb3 	bl	88d80 <__sprint_r.part.0>
   8921a:	2800      	cmp	r0, #0
   8921c:	d186      	bne.n	8912c <_vfiprintf_r+0x334>
   8921e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89220:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89224:	0779      	lsls	r1, r7, #29
   89226:	d504      	bpl.n	89232 <_vfiprintf_r+0x43a>
   89228:	9b02      	ldr	r3, [sp, #8]
   8922a:	1b5c      	subs	r4, r3, r5
   8922c:	2c00      	cmp	r4, #0
   8922e:	f300 826e 	bgt.w	8970e <_vfiprintf_r+0x916>
   89232:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   89236:	42a9      	cmp	r1, r5
   89238:	bfac      	ite	ge
   8923a:	185b      	addge	r3, r3, r1
   8923c:	195b      	addlt	r3, r3, r5
   8923e:	9303      	str	r3, [sp, #12]
   89240:	2a00      	cmp	r2, #0
   89242:	f47f af6b 	bne.w	8911c <_vfiprintf_r+0x324>
   89246:	2300      	movs	r3, #0
   89248:	930f      	str	r3, [sp, #60]	; 0x3c
   8924a:	f898 3000 	ldrb.w	r3, [r8]
   8924e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89252:	2b00      	cmp	r3, #0
   89254:	f47f ae13 	bne.w	88e7e <_vfiprintf_r+0x86>
   89258:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8925a:	46d9      	mov	r9, fp
   8925c:	2b00      	cmp	r3, #0
   8925e:	f040 8426 	bne.w	89aae <_vfiprintf_r+0xcb6>
   89262:	2300      	movs	r3, #0
   89264:	930f      	str	r3, [sp, #60]	; 0x3c
   89266:	e762      	b.n	8912e <_vfiprintf_r+0x336>
   89268:	059a      	lsls	r2, r3, #22
   8926a:	f53f af68 	bmi.w	8913e <_vfiprintf_r+0x346>
   8926e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89272:	f002 f9d1 	bl	8b618 <__retarget_lock_release_recursive>
   89276:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8927a:	e760      	b.n	8913e <_vfiprintf_r+0x346>
   8927c:	9b04      	ldr	r3, [sp, #16]
   8927e:	06f8      	lsls	r0, r7, #27
   89280:	f853 4b04 	ldr.w	r4, [r3], #4
   89284:	f100 8308 	bmi.w	89898 <_vfiprintf_r+0xaa0>
   89288:	0679      	lsls	r1, r7, #25
   8928a:	f140 8302 	bpl.w	89892 <_vfiprintf_r+0xa9a>
   8928e:	b224      	sxth	r4, r4
   89290:	17e5      	asrs	r5, r4, #31
   89292:	9304      	str	r3, [sp, #16]
   89294:	4622      	mov	r2, r4
   89296:	462b      	mov	r3, r5
   89298:	e6a2      	b.n	88fe0 <_vfiprintf_r+0x1e8>
   8929a:	f854 3b04 	ldr.w	r3, [r4], #4
   8929e:	06f9      	lsls	r1, r7, #27
   892a0:	9404      	str	r4, [sp, #16]
   892a2:	f100 82f3 	bmi.w	8988c <_vfiprintf_r+0xa94>
   892a6:	067a      	lsls	r2, r7, #25
   892a8:	f140 82ed 	bpl.w	89886 <_vfiprintf_r+0xa8e>
   892ac:	2500      	movs	r5, #0
   892ae:	b29c      	uxth	r4, r3
   892b0:	e6f0      	b.n	89094 <_vfiprintf_r+0x29c>
   892b2:	f04f 0300 	mov.w	r3, #0
   892b6:	9c04      	ldr	r4, [sp, #16]
   892b8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   892bc:	f854 6b04 	ldr.w	r6, [r4], #4
   892c0:	2e00      	cmp	r6, #0
   892c2:	f000 8397 	beq.w	899f4 <_vfiprintf_r+0xbfc>
   892c6:	9a00      	ldr	r2, [sp, #0]
   892c8:	4613      	mov	r3, r2
   892ca:	3301      	adds	r3, #1
   892cc:	f000 831e 	beq.w	8990c <_vfiprintf_r+0xb14>
   892d0:	2100      	movs	r1, #0
   892d2:	4630      	mov	r0, r6
   892d4:	f002 fcde 	bl	8bc94 <memchr>
   892d8:	2800      	cmp	r0, #0
   892da:	f000 83d8 	beq.w	89a8e <_vfiprintf_r+0xc96>
   892de:	1b83      	subs	r3, r0, r6
   892e0:	9301      	str	r3, [sp, #4]
   892e2:	2300      	movs	r3, #0
   892e4:	9404      	str	r4, [sp, #16]
   892e6:	9300      	str	r3, [sp, #0]
   892e8:	e696      	b.n	89018 <_vfiprintf_r+0x220>
   892ea:	2501      	movs	r5, #1
   892ec:	f04f 0200 	mov.w	r2, #0
   892f0:	9c04      	ldr	r4, [sp, #16]
   892f2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   892f6:	f854 3b04 	ldr.w	r3, [r4], #4
   892fa:	9501      	str	r5, [sp, #4]
   892fc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   89300:	9404      	str	r4, [sp, #16]
   89302:	ae21      	add	r6, sp, #132	; 0x84
   89304:	e72e      	b.n	89164 <_vfiprintf_r+0x36c>
   89306:	f001 fdb3 	bl	8ae70 <__sinit>
   8930a:	e582      	b.n	88e12 <_vfiprintf_r+0x1a>
   8930c:	9b02      	ldr	r3, [sp, #8]
   8930e:	425b      	negs	r3, r3
   89310:	9302      	str	r3, [sp, #8]
   89312:	f898 3000 	ldrb.w	r3, [r8]
   89316:	f047 0704 	orr.w	r7, r7, #4
   8931a:	e5cf      	b.n	88ebc <_vfiprintf_r+0xc4>
   8931c:	f898 3000 	ldrb.w	r3, [r8]
   89320:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   89324:	e5ca      	b.n	88ebc <_vfiprintf_r+0xc4>
   89326:	f898 3000 	ldrb.w	r3, [r8]
   8932a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   8932e:	e5c5      	b.n	88ebc <_vfiprintf_r+0xc4>
   89330:	4641      	mov	r1, r8
   89332:	f811 3b01 	ldrb.w	r3, [r1], #1
   89336:	2b2a      	cmp	r3, #42	; 0x2a
   89338:	f000 83dd 	beq.w	89af6 <_vfiprintf_r+0xcfe>
   8933c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   89340:	2a09      	cmp	r2, #9
   89342:	4688      	mov	r8, r1
   89344:	bf98      	it	ls
   89346:	2100      	movls	r1, #0
   89348:	f200 83ad 	bhi.w	89aa6 <_vfiprintf_r+0xcae>
   8934c:	f818 3b01 	ldrb.w	r3, [r8], #1
   89350:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   89354:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   89358:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8935c:	2a09      	cmp	r2, #9
   8935e:	d9f5      	bls.n	8934c <_vfiprintf_r+0x554>
   89360:	9100      	str	r1, [sp, #0]
   89362:	e5ad      	b.n	88ec0 <_vfiprintf_r+0xc8>
   89364:	9c05      	ldr	r4, [sp, #20]
   89366:	4620      	mov	r0, r4
   89368:	f002 f94c 	bl	8b604 <_localeconv_r>
   8936c:	6843      	ldr	r3, [r0, #4]
   8936e:	4618      	mov	r0, r3
   89370:	930a      	str	r3, [sp, #40]	; 0x28
   89372:	f003 fb41 	bl	8c9f8 <strlen>
   89376:	4603      	mov	r3, r0
   89378:	4620      	mov	r0, r4
   8937a:	930b      	str	r3, [sp, #44]	; 0x2c
   8937c:	461c      	mov	r4, r3
   8937e:	f002 f941 	bl	8b604 <_localeconv_r>
   89382:	6882      	ldr	r2, [r0, #8]
   89384:	9209      	str	r2, [sp, #36]	; 0x24
   89386:	2c00      	cmp	r4, #0
   89388:	f43f ae13 	beq.w	88fb2 <_vfiprintf_r+0x1ba>
   8938c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8938e:	2b00      	cmp	r3, #0
   89390:	f43f ae0f 	beq.w	88fb2 <_vfiprintf_r+0x1ba>
   89394:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89396:	781b      	ldrb	r3, [r3, #0]
   89398:	2b00      	cmp	r3, #0
   8939a:	f43f ae0a 	beq.w	88fb2 <_vfiprintf_r+0x1ba>
   8939e:	f898 3000 	ldrb.w	r3, [r8]
   893a2:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   893a6:	e589      	b.n	88ebc <_vfiprintf_r+0xc4>
   893a8:	f898 3000 	ldrb.w	r3, [r8]
   893ac:	f047 0701 	orr.w	r7, r7, #1
   893b0:	e584      	b.n	88ebc <_vfiprintf_r+0xc4>
   893b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   893b6:	2b00      	cmp	r3, #0
   893b8:	f47f adfb 	bne.w	88fb2 <_vfiprintf_r+0x1ba>
   893bc:	2320      	movs	r3, #32
   893be:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   893c2:	f898 3000 	ldrb.w	r3, [r8]
   893c6:	e579      	b.n	88ebc <_vfiprintf_r+0xc4>
   893c8:	f898 3000 	ldrb.w	r3, [r8]
   893cc:	2b6c      	cmp	r3, #108	; 0x6c
   893ce:	bf03      	ittte	eq
   893d0:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   893d4:	f047 0720 	orreq.w	r7, r7, #32
   893d8:	f108 0801 	addeq.w	r8, r8, #1
   893dc:	f047 0710 	orrne.w	r7, r7, #16
   893e0:	e56c      	b.n	88ebc <_vfiprintf_r+0xc4>
   893e2:	f898 3000 	ldrb.w	r3, [r8]
   893e6:	2b68      	cmp	r3, #104	; 0x68
   893e8:	bf03      	ittte	eq
   893ea:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   893ee:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   893f2:	f108 0801 	addeq.w	r8, r8, #1
   893f6:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   893fa:	e55f      	b.n	88ebc <_vfiprintf_r+0xc4>
   893fc:	f047 0910 	orr.w	r9, r7, #16
   89400:	f019 0f20 	tst.w	r9, #32
   89404:	9c04      	ldr	r4, [sp, #16]
   89406:	f000 8200 	beq.w	8980a <_vfiprintf_r+0xa12>
   8940a:	3407      	adds	r4, #7
   8940c:	f024 0307 	bic.w	r3, r4, #7
   89410:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   89414:	9304      	str	r3, [sp, #16]
   89416:	2301      	movs	r3, #1
   89418:	e63f      	b.n	8909a <_vfiprintf_r+0x2a2>
   8941a:	f647 0330 	movw	r3, #30768	; 0x7830
   8941e:	9c04      	ldr	r4, [sp, #16]
   89420:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   89424:	f854 2b04 	ldr.w	r2, [r4], #4
   89428:	4bbf      	ldr	r3, [pc, #764]	; (89728 <_vfiprintf_r+0x930>)
   8942a:	9404      	str	r4, [sp, #16]
   8942c:	9308      	str	r3, [sp, #32]
   8942e:	4614      	mov	r4, r2
   89430:	2500      	movs	r5, #0
   89432:	2302      	movs	r3, #2
   89434:	f047 0902 	orr.w	r9, r7, #2
   89438:	e62f      	b.n	8909a <_vfiprintf_r+0x2a2>
   8943a:	06bb      	lsls	r3, r7, #26
   8943c:	f100 8232 	bmi.w	898a4 <_vfiprintf_r+0xaac>
   89440:	06fe      	lsls	r6, r7, #27
   89442:	f100 82cf 	bmi.w	899e4 <_vfiprintf_r+0xbec>
   89446:	067d      	lsls	r5, r7, #25
   89448:	f100 8301 	bmi.w	89a4e <_vfiprintf_r+0xc56>
   8944c:	05bc      	lsls	r4, r7, #22
   8944e:	f140 82c9 	bpl.w	899e4 <_vfiprintf_r+0xbec>
   89452:	9c04      	ldr	r4, [sp, #16]
   89454:	9a03      	ldr	r2, [sp, #12]
   89456:	f854 3b04 	ldr.w	r3, [r4], #4
   8945a:	701a      	strb	r2, [r3, #0]
   8945c:	9404      	str	r4, [sp, #16]
   8945e:	e509      	b.n	88e74 <_vfiprintf_r+0x7c>
   89460:	46b9      	mov	r9, r7
   89462:	2b01      	cmp	r3, #1
   89464:	f43f adcb 	beq.w	88ffe <_vfiprintf_r+0x206>
   89468:	2b02      	cmp	r3, #2
   8946a:	ae3a      	add	r6, sp, #232	; 0xe8
   8946c:	d113      	bne.n	89496 <_vfiprintf_r+0x69e>
   8946e:	9808      	ldr	r0, [sp, #32]
   89470:	0923      	lsrs	r3, r4, #4
   89472:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   89476:	0929      	lsrs	r1, r5, #4
   89478:	f004 020f 	and.w	r2, r4, #15
   8947c:	460d      	mov	r5, r1
   8947e:	461c      	mov	r4, r3
   89480:	5c83      	ldrb	r3, [r0, r2]
   89482:	f806 3d01 	strb.w	r3, [r6, #-1]!
   89486:	ea54 0305 	orrs.w	r3, r4, r5
   8948a:	d1f1      	bne.n	89470 <_vfiprintf_r+0x678>
   8948c:	ab3a      	add	r3, sp, #232	; 0xe8
   8948e:	1b9b      	subs	r3, r3, r6
   89490:	464f      	mov	r7, r9
   89492:	9301      	str	r3, [sp, #4]
   89494:	e5c0      	b.n	89018 <_vfiprintf_r+0x220>
   89496:	08e2      	lsrs	r2, r4, #3
   89498:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   8949c:	08e9      	lsrs	r1, r5, #3
   8949e:	f004 0307 	and.w	r3, r4, #7
   894a2:	460d      	mov	r5, r1
   894a4:	4614      	mov	r4, r2
   894a6:	3330      	adds	r3, #48	; 0x30
   894a8:	ea54 0105 	orrs.w	r1, r4, r5
   894ac:	4632      	mov	r2, r6
   894ae:	f806 3d01 	strb.w	r3, [r6, #-1]!
   894b2:	d1f0      	bne.n	89496 <_vfiprintf_r+0x69e>
   894b4:	f019 0f01 	tst.w	r9, #1
   894b8:	d0e8      	beq.n	8948c <_vfiprintf_r+0x694>
   894ba:	2b30      	cmp	r3, #48	; 0x30
   894bc:	d0e6      	beq.n	8948c <_vfiprintf_r+0x694>
   894be:	2330      	movs	r3, #48	; 0x30
   894c0:	3a02      	subs	r2, #2
   894c2:	f806 3c01 	strb.w	r3, [r6, #-1]
   894c6:	ab3a      	add	r3, sp, #232	; 0xe8
   894c8:	1a9b      	subs	r3, r3, r2
   894ca:	464f      	mov	r7, r9
   894cc:	4616      	mov	r6, r2
   894ce:	9301      	str	r3, [sp, #4]
   894d0:	e5a2      	b.n	89018 <_vfiprintf_r+0x220>
   894d2:	2301      	movs	r3, #1
   894d4:	9a01      	ldr	r2, [sp, #4]
   894d6:	930f      	str	r3, [sp, #60]	; 0x3c
   894d8:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   894dc:	9212      	str	r2, [sp, #72]	; 0x48
   894de:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   894e2:	f10a 0a08 	add.w	sl, sl, #8
   894e6:	e69d      	b.n	89224 <_vfiprintf_r+0x42c>
   894e8:	9b02      	ldr	r3, [sp, #8]
   894ea:	1b5c      	subs	r4, r3, r5
   894ec:	2c00      	cmp	r4, #0
   894ee:	f77f ae7d 	ble.w	891ec <_vfiprintf_r+0x3f4>
   894f2:	2c10      	cmp	r4, #16
   894f4:	f340 82ea 	ble.w	89acc <_vfiprintf_r+0xcd4>
   894f8:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8972c <_vfiprintf_r+0x934>
   894fc:	4650      	mov	r0, sl
   894fe:	9706      	str	r7, [sp, #24]
   89500:	46b2      	mov	sl, r6
   89502:	464e      	mov	r6, r9
   89504:	46c1      	mov	r9, r8
   89506:	46a8      	mov	r8, r5
   89508:	9d05      	ldr	r5, [sp, #20]
   8950a:	e006      	b.n	8951a <_vfiprintf_r+0x722>
   8950c:	f101 0c02 	add.w	ip, r1, #2
   89510:	4619      	mov	r1, r3
   89512:	3008      	adds	r0, #8
   89514:	3c10      	subs	r4, #16
   89516:	2c10      	cmp	r4, #16
   89518:	dd1a      	ble.n	89550 <_vfiprintf_r+0x758>
   8951a:	2710      	movs	r7, #16
   8951c:	1c4b      	adds	r3, r1, #1
   8951e:	3210      	adds	r2, #16
   89520:	2b07      	cmp	r3, #7
   89522:	9210      	str	r2, [sp, #64]	; 0x40
   89524:	6006      	str	r6, [r0, #0]
   89526:	6047      	str	r7, [r0, #4]
   89528:	930f      	str	r3, [sp, #60]	; 0x3c
   8952a:	ddef      	ble.n	8950c <_vfiprintf_r+0x714>
   8952c:	2a00      	cmp	r2, #0
   8952e:	d07b      	beq.n	89628 <_vfiprintf_r+0x830>
   89530:	4659      	mov	r1, fp
   89532:	4628      	mov	r0, r5
   89534:	aa0e      	add	r2, sp, #56	; 0x38
   89536:	f7ff fc23 	bl	88d80 <__sprint_r.part.0>
   8953a:	2800      	cmp	r0, #0
   8953c:	f47f adf6 	bne.w	8912c <_vfiprintf_r+0x334>
   89540:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89544:	3c10      	subs	r4, #16
   89546:	2c10      	cmp	r4, #16
   89548:	a811      	add	r0, sp, #68	; 0x44
   8954a:	f101 0c01 	add.w	ip, r1, #1
   8954e:	dce4      	bgt.n	8951a <_vfiprintf_r+0x722>
   89550:	4645      	mov	r5, r8
   89552:	46c8      	mov	r8, r9
   89554:	46b1      	mov	r9, r6
   89556:	4656      	mov	r6, sl
   89558:	4682      	mov	sl, r0
   8955a:	9f06      	ldr	r7, [sp, #24]
   8955c:	4422      	add	r2, r4
   8955e:	f1bc 0f07 	cmp.w	ip, #7
   89562:	e9ca 9400 	strd	r9, r4, [sl]
   89566:	9210      	str	r2, [sp, #64]	; 0x40
   89568:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   8956c:	f340 817e 	ble.w	8986c <_vfiprintf_r+0xa74>
   89570:	2a00      	cmp	r2, #0
   89572:	f000 825c 	beq.w	89a2e <_vfiprintf_r+0xc36>
   89576:	4659      	mov	r1, fp
   89578:	9805      	ldr	r0, [sp, #20]
   8957a:	aa0e      	add	r2, sp, #56	; 0x38
   8957c:	f7ff fc00 	bl	88d80 <__sprint_r.part.0>
   89580:	2800      	cmp	r0, #0
   89582:	f47f add3 	bne.w	8912c <_vfiprintf_r+0x334>
   89586:	e9dd 3400 	ldrd	r3, r4, [sp]
   8958a:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8958e:	1b1c      	subs	r4, r3, r4
   89590:	2c00      	cmp	r4, #0
   89592:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89596:	f101 0001 	add.w	r0, r1, #1
   8959a:	f77f ae2d 	ble.w	891f8 <_vfiprintf_r+0x400>
   8959e:	2c10      	cmp	r4, #16
   895a0:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8972c <_vfiprintf_r+0x934>
   895a4:	dd2f      	ble.n	89606 <_vfiprintf_r+0x80e>
   895a6:	46d4      	mov	ip, sl
   895a8:	46b2      	mov	sl, r6
   895aa:	464e      	mov	r6, r9
   895ac:	46c1      	mov	r9, r8
   895ae:	46a8      	mov	r8, r5
   895b0:	9d05      	ldr	r5, [sp, #20]
   895b2:	e006      	b.n	895c2 <_vfiprintf_r+0x7ca>
   895b4:	1c88      	adds	r0, r1, #2
   895b6:	4619      	mov	r1, r3
   895b8:	f10c 0c08 	add.w	ip, ip, #8
   895bc:	3c10      	subs	r4, #16
   895be:	2c10      	cmp	r4, #16
   895c0:	dd1c      	ble.n	895fc <_vfiprintf_r+0x804>
   895c2:	2010      	movs	r0, #16
   895c4:	1c4b      	adds	r3, r1, #1
   895c6:	3210      	adds	r2, #16
   895c8:	2b07      	cmp	r3, #7
   895ca:	9210      	str	r2, [sp, #64]	; 0x40
   895cc:	f8cc 6000 	str.w	r6, [ip]
   895d0:	f8cc 0004 	str.w	r0, [ip, #4]
   895d4:	930f      	str	r3, [sp, #60]	; 0x3c
   895d6:	dded      	ble.n	895b4 <_vfiprintf_r+0x7bc>
   895d8:	b30a      	cbz	r2, 8961e <_vfiprintf_r+0x826>
   895da:	4659      	mov	r1, fp
   895dc:	4628      	mov	r0, r5
   895de:	aa0e      	add	r2, sp, #56	; 0x38
   895e0:	f7ff fbce 	bl	88d80 <__sprint_r.part.0>
   895e4:	2800      	cmp	r0, #0
   895e6:	f47f ada1 	bne.w	8912c <_vfiprintf_r+0x334>
   895ea:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   895ee:	3c10      	subs	r4, #16
   895f0:	2c10      	cmp	r4, #16
   895f2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   895f6:	f101 0001 	add.w	r0, r1, #1
   895fa:	dce2      	bgt.n	895c2 <_vfiprintf_r+0x7ca>
   895fc:	4645      	mov	r5, r8
   895fe:	46c8      	mov	r8, r9
   89600:	46b1      	mov	r9, r6
   89602:	4656      	mov	r6, sl
   89604:	46e2      	mov	sl, ip
   89606:	4422      	add	r2, r4
   89608:	2807      	cmp	r0, #7
   8960a:	e9ca 9400 	strd	r9, r4, [sl]
   8960e:	9210      	str	r2, [sp, #64]	; 0x40
   89610:	900f      	str	r0, [sp, #60]	; 0x3c
   89612:	f300 80d3 	bgt.w	897bc <_vfiprintf_r+0x9c4>
   89616:	f10a 0a08 	add.w	sl, sl, #8
   8961a:	3001      	adds	r0, #1
   8961c:	e5ec      	b.n	891f8 <_vfiprintf_r+0x400>
   8961e:	2001      	movs	r0, #1
   89620:	4611      	mov	r1, r2
   89622:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   89626:	e7c9      	b.n	895bc <_vfiprintf_r+0x7c4>
   89628:	f04f 0c01 	mov.w	ip, #1
   8962c:	4611      	mov	r1, r2
   8962e:	a811      	add	r0, sp, #68	; 0x44
   89630:	e770      	b.n	89514 <_vfiprintf_r+0x71c>
   89632:	2a00      	cmp	r2, #0
   89634:	f000 80d3 	beq.w	897de <_vfiprintf_r+0x9e6>
   89638:	4659      	mov	r1, fp
   8963a:	9805      	ldr	r0, [sp, #20]
   8963c:	aa0e      	add	r2, sp, #56	; 0x38
   8963e:	f7ff fb9f 	bl	88d80 <__sprint_r.part.0>
   89642:	2800      	cmp	r0, #0
   89644:	f47f ad72 	bne.w	8912c <_vfiprintf_r+0x334>
   89648:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8964c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89650:	1c48      	adds	r0, r1, #1
   89652:	e5ac      	b.n	891ae <_vfiprintf_r+0x3b6>
   89654:	2202      	movs	r2, #2
   89656:	2001      	movs	r0, #1
   89658:	ab0d      	add	r3, sp, #52	; 0x34
   8965a:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8965e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89662:	4601      	mov	r1, r0
   89664:	f10a 0a08 	add.w	sl, sl, #8
   89668:	1c48      	adds	r0, r1, #1
   8966a:	e5bb      	b.n	891e4 <_vfiprintf_r+0x3ec>
   8966c:	2c10      	cmp	r4, #16
   8966e:	f340 8214 	ble.w	89a9a <_vfiprintf_r+0xca2>
   89672:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   89676:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 89730 <_vfiprintf_r+0x938>
   8967a:	46d4      	mov	ip, sl
   8967c:	46b2      	mov	sl, r6
   8967e:	464e      	mov	r6, r9
   89680:	46c1      	mov	r9, r8
   89682:	46a8      	mov	r8, r5
   89684:	9d05      	ldr	r5, [sp, #20]
   89686:	e006      	b.n	89696 <_vfiprintf_r+0x89e>
   89688:	1c99      	adds	r1, r3, #2
   8968a:	4603      	mov	r3, r0
   8968c:	f10c 0c08 	add.w	ip, ip, #8
   89690:	3c10      	subs	r4, #16
   89692:	2c10      	cmp	r4, #16
   89694:	dd1c      	ble.n	896d0 <_vfiprintf_r+0x8d8>
   89696:	2110      	movs	r1, #16
   89698:	1c58      	adds	r0, r3, #1
   8969a:	3210      	adds	r2, #16
   8969c:	2807      	cmp	r0, #7
   8969e:	9210      	str	r2, [sp, #64]	; 0x40
   896a0:	f8cc 6000 	str.w	r6, [ip]
   896a4:	f8cc 1004 	str.w	r1, [ip, #4]
   896a8:	900f      	str	r0, [sp, #60]	; 0x3c
   896aa:	dded      	ble.n	89688 <_vfiprintf_r+0x890>
   896ac:	b30a      	cbz	r2, 896f2 <_vfiprintf_r+0x8fa>
   896ae:	4659      	mov	r1, fp
   896b0:	4628      	mov	r0, r5
   896b2:	aa0e      	add	r2, sp, #56	; 0x38
   896b4:	f7ff fb64 	bl	88d80 <__sprint_r.part.0>
   896b8:	2800      	cmp	r0, #0
   896ba:	f47f ad37 	bne.w	8912c <_vfiprintf_r+0x334>
   896be:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   896c2:	3c10      	subs	r4, #16
   896c4:	2c10      	cmp	r4, #16
   896c6:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   896ca:	f103 0101 	add.w	r1, r3, #1
   896ce:	dce2      	bgt.n	89696 <_vfiprintf_r+0x89e>
   896d0:	4645      	mov	r5, r8
   896d2:	46c8      	mov	r8, r9
   896d4:	46b1      	mov	r9, r6
   896d6:	4656      	mov	r6, sl
   896d8:	46e2      	mov	sl, ip
   896da:	4422      	add	r2, r4
   896dc:	2907      	cmp	r1, #7
   896de:	e9ca 9400 	strd	r9, r4, [sl]
   896e2:	9210      	str	r2, [sp, #64]	; 0x40
   896e4:	910f      	str	r1, [sp, #60]	; 0x3c
   896e6:	f300 80a8 	bgt.w	8983a <_vfiprintf_r+0xa42>
   896ea:	f10a 0a08 	add.w	sl, sl, #8
   896ee:	1c48      	adds	r0, r1, #1
   896f0:	e54b      	b.n	8918a <_vfiprintf_r+0x392>
   896f2:	4613      	mov	r3, r2
   896f4:	2101      	movs	r1, #1
   896f6:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   896fa:	e7c9      	b.n	89690 <_vfiprintf_r+0x898>
   896fc:	0778      	lsls	r0, r7, #29
   896fe:	920f      	str	r2, [sp, #60]	; 0x3c
   89700:	d554      	bpl.n	897ac <_vfiprintf_r+0x9b4>
   89702:	9b02      	ldr	r3, [sp, #8]
   89704:	1b5c      	subs	r4, r3, r5
   89706:	2c00      	cmp	r4, #0
   89708:	dd50      	ble.n	897ac <_vfiprintf_r+0x9b4>
   8970a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8970e:	2c10      	cmp	r4, #16
   89710:	f340 81d7 	ble.w	89ac2 <_vfiprintf_r+0xcca>
   89714:	f8df 9018 	ldr.w	r9, [pc, #24]	; 89730 <_vfiprintf_r+0x938>
   89718:	2610      	movs	r6, #16
   8971a:	464b      	mov	r3, r9
   8971c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8971e:	46a9      	mov	r9, r5
   89720:	9f05      	ldr	r7, [sp, #20]
   89722:	461d      	mov	r5, r3
   89724:	e00d      	b.n	89742 <_vfiprintf_r+0x94a>
   89726:	bf00      	nop
   89728:	0008da84 	.word	0x0008da84
   8972c:	0008dae8 	.word	0x0008dae8
   89730:	0008dad8 	.word	0x0008dad8
   89734:	1c88      	adds	r0, r1, #2
   89736:	4619      	mov	r1, r3
   89738:	f10a 0a08 	add.w	sl, sl, #8
   8973c:	3c10      	subs	r4, #16
   8973e:	2c10      	cmp	r4, #16
   89740:	dd19      	ble.n	89776 <_vfiprintf_r+0x97e>
   89742:	1c4b      	adds	r3, r1, #1
   89744:	3210      	adds	r2, #16
   89746:	2b07      	cmp	r3, #7
   89748:	e9ca 5600 	strd	r5, r6, [sl]
   8974c:	9210      	str	r2, [sp, #64]	; 0x40
   8974e:	930f      	str	r3, [sp, #60]	; 0x3c
   89750:	ddf0      	ble.n	89734 <_vfiprintf_r+0x93c>
   89752:	b332      	cbz	r2, 897a2 <_vfiprintf_r+0x9aa>
   89754:	4659      	mov	r1, fp
   89756:	4638      	mov	r0, r7
   89758:	aa0e      	add	r2, sp, #56	; 0x38
   8975a:	f7ff fb11 	bl	88d80 <__sprint_r.part.0>
   8975e:	2800      	cmp	r0, #0
   89760:	f47f ace4 	bne.w	8912c <_vfiprintf_r+0x334>
   89764:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89768:	3c10      	subs	r4, #16
   8976a:	2c10      	cmp	r4, #16
   8976c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89770:	f101 0001 	add.w	r0, r1, #1
   89774:	dce5      	bgt.n	89742 <_vfiprintf_r+0x94a>
   89776:	462b      	mov	r3, r5
   89778:	464d      	mov	r5, r9
   8977a:	4699      	mov	r9, r3
   8977c:	4422      	add	r2, r4
   8977e:	2807      	cmp	r0, #7
   89780:	e9ca 9400 	strd	r9, r4, [sl]
   89784:	9210      	str	r2, [sp, #64]	; 0x40
   89786:	900f      	str	r0, [sp, #60]	; 0x3c
   89788:	f77f ad53 	ble.w	89232 <_vfiprintf_r+0x43a>
   8978c:	b172      	cbz	r2, 897ac <_vfiprintf_r+0x9b4>
   8978e:	4659      	mov	r1, fp
   89790:	9805      	ldr	r0, [sp, #20]
   89792:	aa0e      	add	r2, sp, #56	; 0x38
   89794:	f7ff faf4 	bl	88d80 <__sprint_r.part.0>
   89798:	2800      	cmp	r0, #0
   8979a:	f47f acc7 	bne.w	8912c <_vfiprintf_r+0x334>
   8979e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   897a0:	e547      	b.n	89232 <_vfiprintf_r+0x43a>
   897a2:	2001      	movs	r0, #1
   897a4:	4611      	mov	r1, r2
   897a6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   897aa:	e7c7      	b.n	8973c <_vfiprintf_r+0x944>
   897ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   897b0:	42aa      	cmp	r2, r5
   897b2:	bfac      	ite	ge
   897b4:	189b      	addge	r3, r3, r2
   897b6:	195b      	addlt	r3, r3, r5
   897b8:	9303      	str	r3, [sp, #12]
   897ba:	e544      	b.n	89246 <_vfiprintf_r+0x44e>
   897bc:	2a00      	cmp	r2, #0
   897be:	f43f ae88 	beq.w	894d2 <_vfiprintf_r+0x6da>
   897c2:	4659      	mov	r1, fp
   897c4:	9805      	ldr	r0, [sp, #20]
   897c6:	aa0e      	add	r2, sp, #56	; 0x38
   897c8:	f7ff fada 	bl	88d80 <__sprint_r.part.0>
   897cc:	2800      	cmp	r0, #0
   897ce:	f47f acad 	bne.w	8912c <_vfiprintf_r+0x334>
   897d2:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   897d6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   897da:	3001      	adds	r0, #1
   897dc:	e50c      	b.n	891f8 <_vfiprintf_r+0x400>
   897de:	9b07      	ldr	r3, [sp, #28]
   897e0:	2b00      	cmp	r3, #0
   897e2:	d16b      	bne.n	898bc <_vfiprintf_r+0xac4>
   897e4:	2001      	movs	r0, #1
   897e6:	4611      	mov	r1, r2
   897e8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   897ec:	e4fa      	b.n	891e4 <_vfiprintf_r+0x3ec>
   897ee:	920f      	str	r2, [sp, #60]	; 0x3c
   897f0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   897f4:	e481      	b.n	890fa <_vfiprintf_r+0x302>
   897f6:	9b00      	ldr	r3, [sp, #0]
   897f8:	2b00      	cmp	r3, #0
   897fa:	f47f ac05 	bne.w	89008 <_vfiprintf_r+0x210>
   897fe:	464f      	mov	r7, r9
   89800:	2300      	movs	r3, #0
   89802:	ae3a      	add	r6, sp, #232	; 0xe8
   89804:	9300      	str	r3, [sp, #0]
   89806:	9301      	str	r3, [sp, #4]
   89808:	e406      	b.n	89018 <_vfiprintf_r+0x220>
   8980a:	f854 2b04 	ldr.w	r2, [r4], #4
   8980e:	f019 0f10 	tst.w	r9, #16
   89812:	f04f 0301 	mov.w	r3, #1
   89816:	9404      	str	r4, [sp, #16]
   89818:	d132      	bne.n	89880 <_vfiprintf_r+0xa88>
   8981a:	f019 0f40 	tst.w	r9, #64	; 0x40
   8981e:	d02b      	beq.n	89878 <_vfiprintf_r+0xa80>
   89820:	2500      	movs	r5, #0
   89822:	b294      	uxth	r4, r2
   89824:	e439      	b.n	8909a <_vfiprintf_r+0x2a2>
   89826:	232d      	movs	r3, #45	; 0x2d
   89828:	4264      	negs	r4, r4
   8982a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   8982e:	46b9      	mov	r9, r7
   89830:	f04f 0301 	mov.w	r3, #1
   89834:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   89838:	e433      	b.n	890a2 <_vfiprintf_r+0x2aa>
   8983a:	2a00      	cmp	r2, #0
   8983c:	d06f      	beq.n	8991e <_vfiprintf_r+0xb26>
   8983e:	4659      	mov	r1, fp
   89840:	9805      	ldr	r0, [sp, #20]
   89842:	aa0e      	add	r2, sp, #56	; 0x38
   89844:	f7ff fa9c 	bl	88d80 <__sprint_r.part.0>
   89848:	2800      	cmp	r0, #0
   8984a:	f47f ac6f 	bne.w	8912c <_vfiprintf_r+0x334>
   8984e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89852:	e497      	b.n	89184 <_vfiprintf_r+0x38c>
   89854:	ae3a      	add	r6, sp, #232	; 0xe8
   89856:	f7ff bbdf 	b.w	89018 <_vfiprintf_r+0x220>
   8985a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8985e:	f001 fed9 	bl	8b614 <__retarget_lock_acquire_recursive>
   89862:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   89866:	b28a      	uxth	r2, r1
   89868:	f7ff badd 	b.w	88e26 <_vfiprintf_r+0x2e>
   8986c:	4661      	mov	r1, ip
   8986e:	f10a 0a08 	add.w	sl, sl, #8
   89872:	f10c 0001 	add.w	r0, ip, #1
   89876:	e4b9      	b.n	891ec <_vfiprintf_r+0x3f4>
   89878:	f419 7f00 	tst.w	r9, #512	; 0x200
   8987c:	f040 80ef 	bne.w	89a5e <_vfiprintf_r+0xc66>
   89880:	4614      	mov	r4, r2
   89882:	2500      	movs	r5, #0
   89884:	e409      	b.n	8909a <_vfiprintf_r+0x2a2>
   89886:	05be      	lsls	r6, r7, #22
   89888:	f100 80f7 	bmi.w	89a7a <_vfiprintf_r+0xc82>
   8988c:	461c      	mov	r4, r3
   8988e:	2500      	movs	r5, #0
   89890:	e400      	b.n	89094 <_vfiprintf_r+0x29c>
   89892:	05ba      	lsls	r2, r7, #22
   89894:	f100 80ea 	bmi.w	89a6c <_vfiprintf_r+0xc74>
   89898:	17e5      	asrs	r5, r4, #31
   8989a:	9304      	str	r3, [sp, #16]
   8989c:	4622      	mov	r2, r4
   8989e:	462b      	mov	r3, r5
   898a0:	f7ff bb9e 	b.w	88fe0 <_vfiprintf_r+0x1e8>
   898a4:	9b03      	ldr	r3, [sp, #12]
   898a6:	9c04      	ldr	r4, [sp, #16]
   898a8:	17dd      	asrs	r5, r3, #31
   898aa:	461a      	mov	r2, r3
   898ac:	462b      	mov	r3, r5
   898ae:	f854 1b04 	ldr.w	r1, [r4], #4
   898b2:	e9c1 2300 	strd	r2, r3, [r1]
   898b6:	9404      	str	r4, [sp, #16]
   898b8:	f7ff badc 	b.w	88e74 <_vfiprintf_r+0x7c>
   898bc:	2202      	movs	r2, #2
   898be:	ab0d      	add	r3, sp, #52	; 0x34
   898c0:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   898c4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   898c8:	e6cc      	b.n	89664 <_vfiprintf_r+0x86c>
   898ca:	46b9      	mov	r9, r7
   898cc:	e598      	b.n	89400 <_vfiprintf_r+0x608>
   898ce:	4a90      	ldr	r2, [pc, #576]	; (89b10 <_vfiprintf_r+0xd18>)
   898d0:	9208      	str	r2, [sp, #32]
   898d2:	06bd      	lsls	r5, r7, #26
   898d4:	9c04      	ldr	r4, [sp, #16]
   898d6:	d530      	bpl.n	8993a <_vfiprintf_r+0xb42>
   898d8:	3407      	adds	r4, #7
   898da:	f024 0207 	bic.w	r2, r4, #7
   898de:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   898e2:	9204      	str	r2, [sp, #16]
   898e4:	07fe      	lsls	r6, r7, #31
   898e6:	d509      	bpl.n	898fc <_vfiprintf_r+0xb04>
   898e8:	ea54 0205 	orrs.w	r2, r4, r5
   898ec:	d006      	beq.n	898fc <_vfiprintf_r+0xb04>
   898ee:	2230      	movs	r2, #48	; 0x30
   898f0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   898f4:	f047 0702 	orr.w	r7, r7, #2
   898f8:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   898fc:	2302      	movs	r3, #2
   898fe:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   89902:	f7ff bbca 	b.w	8909a <_vfiprintf_r+0x2a2>
   89906:	4a83      	ldr	r2, [pc, #524]	; (89b14 <_vfiprintf_r+0xd1c>)
   89908:	9208      	str	r2, [sp, #32]
   8990a:	e7e2      	b.n	898d2 <_vfiprintf_r+0xada>
   8990c:	4630      	mov	r0, r6
   8990e:	f003 f873 	bl	8c9f8 <strlen>
   89912:	2300      	movs	r3, #0
   89914:	9404      	str	r4, [sp, #16]
   89916:	9001      	str	r0, [sp, #4]
   89918:	9300      	str	r3, [sp, #0]
   8991a:	f7ff bb7d 	b.w	89018 <_vfiprintf_r+0x220>
   8991e:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   89922:	2900      	cmp	r1, #0
   89924:	f040 8089 	bne.w	89a3a <_vfiprintf_r+0xc42>
   89928:	9b07      	ldr	r3, [sp, #28]
   8992a:	2b00      	cmp	r3, #0
   8992c:	f47f ae92 	bne.w	89654 <_vfiprintf_r+0x85c>
   89930:	4611      	mov	r1, r2
   89932:	2001      	movs	r0, #1
   89934:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89938:	e458      	b.n	891ec <_vfiprintf_r+0x3f4>
   8993a:	f854 2b04 	ldr.w	r2, [r4], #4
   8993e:	9404      	str	r4, [sp, #16]
   89940:	06fc      	lsls	r4, r7, #27
   89942:	d407      	bmi.n	89954 <_vfiprintf_r+0xb5c>
   89944:	0678      	lsls	r0, r7, #25
   89946:	d502      	bpl.n	8994e <_vfiprintf_r+0xb56>
   89948:	2500      	movs	r5, #0
   8994a:	b294      	uxth	r4, r2
   8994c:	e7ca      	b.n	898e4 <_vfiprintf_r+0xaec>
   8994e:	05b9      	lsls	r1, r7, #22
   89950:	f100 8089 	bmi.w	89a66 <_vfiprintf_r+0xc6e>
   89954:	4614      	mov	r4, r2
   89956:	2500      	movs	r5, #0
   89958:	e7c4      	b.n	898e4 <_vfiprintf_r+0xaec>
   8995a:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   8995e:	f8cd 9004 	str.w	r9, [sp, #4]
   89962:	f8cd 8018 	str.w	r8, [sp, #24]
   89966:	2700      	movs	r7, #0
   89968:	4698      	mov	r8, r3
   8996a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   8996e:	ae3a      	add	r6, sp, #232	; 0xe8
   89970:	e00b      	b.n	8998a <_vfiprintf_r+0xb92>
   89972:	220a      	movs	r2, #10
   89974:	2300      	movs	r3, #0
   89976:	4620      	mov	r0, r4
   89978:	4629      	mov	r1, r5
   8997a:	f7fd f9bd 	bl	86cf8 <__aeabi_uldivmod>
   8997e:	2d00      	cmp	r5, #0
   89980:	bf08      	it	eq
   89982:	2c0a      	cmpeq	r4, #10
   89984:	d319      	bcc.n	899ba <_vfiprintf_r+0xbc2>
   89986:	4604      	mov	r4, r0
   89988:	460d      	mov	r5, r1
   8998a:	220a      	movs	r2, #10
   8998c:	2300      	movs	r3, #0
   8998e:	4620      	mov	r0, r4
   89990:	4629      	mov	r1, r5
   89992:	f7fd f9b1 	bl	86cf8 <__aeabi_uldivmod>
   89996:	3230      	adds	r2, #48	; 0x30
   89998:	f806 2c01 	strb.w	r2, [r6, #-1]
   8999c:	3701      	adds	r7, #1
   8999e:	3e01      	subs	r6, #1
   899a0:	f1b8 0f00 	cmp.w	r8, #0
   899a4:	d0e5      	beq.n	89972 <_vfiprintf_r+0xb7a>
   899a6:	f899 3000 	ldrb.w	r3, [r9]
   899aa:	42bb      	cmp	r3, r7
   899ac:	d1e1      	bne.n	89972 <_vfiprintf_r+0xb7a>
   899ae:	2fff      	cmp	r7, #255	; 0xff
   899b0:	d0df      	beq.n	89972 <_vfiprintf_r+0xb7a>
   899b2:	2d00      	cmp	r5, #0
   899b4:	bf08      	it	eq
   899b6:	2c0a      	cmpeq	r4, #10
   899b8:	d225      	bcs.n	89a06 <_vfiprintf_r+0xc0e>
   899ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   899be:	ab3a      	add	r3, sp, #232	; 0xe8
   899c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
   899c4:	1b9b      	subs	r3, r3, r6
   899c6:	464f      	mov	r7, r9
   899c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   899cc:	9301      	str	r3, [sp, #4]
   899ce:	f7ff bb23 	b.w	89018 <_vfiprintf_r+0x220>
   899d2:	46b9      	mov	r9, r7
   899d4:	f7ff bb13 	b.w	88ffe <_vfiprintf_r+0x206>
   899d8:	2b01      	cmp	r3, #1
   899da:	46b9      	mov	r9, r7
   899dc:	f47f ad44 	bne.w	89468 <_vfiprintf_r+0x670>
   899e0:	f7ff bb12 	b.w	89008 <_vfiprintf_r+0x210>
   899e4:	9c04      	ldr	r4, [sp, #16]
   899e6:	9a03      	ldr	r2, [sp, #12]
   899e8:	f854 3b04 	ldr.w	r3, [r4], #4
   899ec:	601a      	str	r2, [r3, #0]
   899ee:	9404      	str	r4, [sp, #16]
   899f0:	f7ff ba40 	b.w	88e74 <_vfiprintf_r+0x7c>
   899f4:	9d00      	ldr	r5, [sp, #0]
   899f6:	4e48      	ldr	r6, [pc, #288]	; (89b18 <_vfiprintf_r+0xd20>)
   899f8:	2d06      	cmp	r5, #6
   899fa:	bf28      	it	cs
   899fc:	2506      	movcs	r5, #6
   899fe:	9404      	str	r4, [sp, #16]
   89a00:	9501      	str	r5, [sp, #4]
   89a02:	f7ff bbaf 	b.w	89164 <_vfiprintf_r+0x36c>
   89a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89a08:	990a      	ldr	r1, [sp, #40]	; 0x28
   89a0a:	1af6      	subs	r6, r6, r3
   89a0c:	461a      	mov	r2, r3
   89a0e:	4630      	mov	r0, r6
   89a10:	f003 f820 	bl	8ca54 <strncpy>
   89a14:	f899 3001 	ldrb.w	r3, [r9, #1]
   89a18:	b10b      	cbz	r3, 89a1e <_vfiprintf_r+0xc26>
   89a1a:	f109 0901 	add.w	r9, r9, #1
   89a1e:	220a      	movs	r2, #10
   89a20:	2300      	movs	r3, #0
   89a22:	4620      	mov	r0, r4
   89a24:	4629      	mov	r1, r5
   89a26:	f7fd f967 	bl	86cf8 <__aeabi_uldivmod>
   89a2a:	2700      	movs	r7, #0
   89a2c:	e7ab      	b.n	89986 <_vfiprintf_r+0xb8e>
   89a2e:	2001      	movs	r0, #1
   89a30:	4611      	mov	r1, r2
   89a32:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89a36:	f7ff bbd9 	b.w	891ec <_vfiprintf_r+0x3f4>
   89a3a:	2201      	movs	r2, #1
   89a3c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   89a40:	4610      	mov	r0, r2
   89a42:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   89a46:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89a4a:	f7ff bbac 	b.w	891a6 <_vfiprintf_r+0x3ae>
   89a4e:	9c04      	ldr	r4, [sp, #16]
   89a50:	9a03      	ldr	r2, [sp, #12]
   89a52:	f854 3b04 	ldr.w	r3, [r4], #4
   89a56:	801a      	strh	r2, [r3, #0]
   89a58:	9404      	str	r4, [sp, #16]
   89a5a:	f7ff ba0b 	b.w	88e74 <_vfiprintf_r+0x7c>
   89a5e:	2500      	movs	r5, #0
   89a60:	b2d4      	uxtb	r4, r2
   89a62:	f7ff bb1a 	b.w	8909a <_vfiprintf_r+0x2a2>
   89a66:	2500      	movs	r5, #0
   89a68:	b2d4      	uxtb	r4, r2
   89a6a:	e73b      	b.n	898e4 <_vfiprintf_r+0xaec>
   89a6c:	b264      	sxtb	r4, r4
   89a6e:	17e5      	asrs	r5, r4, #31
   89a70:	9304      	str	r3, [sp, #16]
   89a72:	4622      	mov	r2, r4
   89a74:	462b      	mov	r3, r5
   89a76:	f7ff bab3 	b.w	88fe0 <_vfiprintf_r+0x1e8>
   89a7a:	2500      	movs	r5, #0
   89a7c:	b2dc      	uxtb	r4, r3
   89a7e:	f7ff bb09 	b.w	89094 <_vfiprintf_r+0x29c>
   89a82:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89a86:	f001 fdc7 	bl	8b618 <__retarget_lock_release_recursive>
   89a8a:	f7ff baec 	b.w	89066 <_vfiprintf_r+0x26e>
   89a8e:	9b00      	ldr	r3, [sp, #0]
   89a90:	9404      	str	r4, [sp, #16]
   89a92:	9301      	str	r3, [sp, #4]
   89a94:	9000      	str	r0, [sp, #0]
   89a96:	f7ff babf 	b.w	89018 <_vfiprintf_r+0x220>
   89a9a:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89a9e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 89b1c <_vfiprintf_r+0xd24>
   89aa2:	3101      	adds	r1, #1
   89aa4:	e619      	b.n	896da <_vfiprintf_r+0x8e2>
   89aa6:	2200      	movs	r2, #0
   89aa8:	9200      	str	r2, [sp, #0]
   89aaa:	f7ff ba09 	b.w	88ec0 <_vfiprintf_r+0xc8>
   89aae:	4659      	mov	r1, fp
   89ab0:	9805      	ldr	r0, [sp, #20]
   89ab2:	aa0e      	add	r2, sp, #56	; 0x38
   89ab4:	f7ff f964 	bl	88d80 <__sprint_r.part.0>
   89ab8:	2800      	cmp	r0, #0
   89aba:	f43f abd2 	beq.w	89262 <_vfiprintf_r+0x46a>
   89abe:	f7ff bb36 	b.w	8912e <_vfiprintf_r+0x336>
   89ac2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   89ac4:	f8df 9054 	ldr.w	r9, [pc, #84]	; 89b1c <_vfiprintf_r+0xd24>
   89ac8:	3001      	adds	r0, #1
   89aca:	e657      	b.n	8977c <_vfiprintf_r+0x984>
   89acc:	4684      	mov	ip, r0
   89ace:	f8df 9050 	ldr.w	r9, [pc, #80]	; 89b20 <_vfiprintf_r+0xd28>
   89ad2:	e543      	b.n	8955c <_vfiprintf_r+0x764>
   89ad4:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89ad8:	07db      	lsls	r3, r3, #31
   89ada:	d407      	bmi.n	89aec <_vfiprintf_r+0xcf4>
   89adc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89ae0:	059f      	lsls	r7, r3, #22
   89ae2:	d403      	bmi.n	89aec <_vfiprintf_r+0xcf4>
   89ae4:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89ae8:	f001 fd96 	bl	8b618 <__retarget_lock_release_recursive>
   89aec:	f04f 33ff 	mov.w	r3, #4294967295
   89af0:	9303      	str	r3, [sp, #12]
   89af2:	f7ff bb27 	b.w	89144 <_vfiprintf_r+0x34c>
   89af6:	9a04      	ldr	r2, [sp, #16]
   89af8:	f898 3001 	ldrb.w	r3, [r8, #1]
   89afc:	f852 0b04 	ldr.w	r0, [r2], #4
   89b00:	4688      	mov	r8, r1
   89b02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   89b06:	9000      	str	r0, [sp, #0]
   89b08:	9204      	str	r2, [sp, #16]
   89b0a:	f7ff b9d7 	b.w	88ebc <_vfiprintf_r+0xc4>
   89b0e:	bf00      	nop
   89b10:	0008da98 	.word	0x0008da98
   89b14:	0008da84 	.word	0x0008da84
   89b18:	0008daac 	.word	0x0008daac
   89b1c:	0008dad8 	.word	0x0008dad8
   89b20:	0008dae8 	.word	0x0008dae8

00089b24 <__sbprintf>:
   89b24:	b5f0      	push	{r4, r5, r6, r7, lr}
   89b26:	460c      	mov	r4, r1
   89b28:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   89b2c:	f04f 0e00 	mov.w	lr, #0
   89b30:	4615      	mov	r5, r2
   89b32:	4606      	mov	r6, r0
   89b34:	461f      	mov	r7, r3
   89b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89b38:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   89b3c:	89e2      	ldrh	r2, [r4, #14]
   89b3e:	8989      	ldrh	r1, [r1, #12]
   89b40:	9319      	str	r3, [sp, #100]	; 0x64
   89b42:	69e3      	ldr	r3, [r4, #28]
   89b44:	f8ad 200e 	strh.w	r2, [sp, #14]
   89b48:	6a62      	ldr	r2, [r4, #36]	; 0x24
   89b4a:	f021 0102 	bic.w	r1, r1, #2
   89b4e:	9307      	str	r3, [sp, #28]
   89b50:	a816      	add	r0, sp, #88	; 0x58
   89b52:	ab1a      	add	r3, sp, #104	; 0x68
   89b54:	f8ad 100c 	strh.w	r1, [sp, #12]
   89b58:	f8cd e018 	str.w	lr, [sp, #24]
   89b5c:	9209      	str	r2, [sp, #36]	; 0x24
   89b5e:	9300      	str	r3, [sp, #0]
   89b60:	9304      	str	r3, [sp, #16]
   89b62:	f8cd c008 	str.w	ip, [sp, #8]
   89b66:	f8cd c014 	str.w	ip, [sp, #20]
   89b6a:	f001 fd4f 	bl	8b60c <__retarget_lock_init_recursive>
   89b6e:	462a      	mov	r2, r5
   89b70:	463b      	mov	r3, r7
   89b72:	4669      	mov	r1, sp
   89b74:	4630      	mov	r0, r6
   89b76:	f7ff f93f 	bl	88df8 <_vfiprintf_r>
   89b7a:	1e05      	subs	r5, r0, #0
   89b7c:	db07      	blt.n	89b8e <__sbprintf+0x6a>
   89b7e:	4630      	mov	r0, r6
   89b80:	4669      	mov	r1, sp
   89b82:	f001 f919 	bl	8adb8 <_fflush_r>
   89b86:	2800      	cmp	r0, #0
   89b88:	bf18      	it	ne
   89b8a:	f04f 35ff 	movne.w	r5, #4294967295
   89b8e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   89b92:	065b      	lsls	r3, r3, #25
   89b94:	d503      	bpl.n	89b9e <__sbprintf+0x7a>
   89b96:	89a3      	ldrh	r3, [r4, #12]
   89b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89b9c:	81a3      	strh	r3, [r4, #12]
   89b9e:	9816      	ldr	r0, [sp, #88]	; 0x58
   89ba0:	f001 fd36 	bl	8b610 <__retarget_lock_close_recursive>
   89ba4:	4628      	mov	r0, r5
   89ba6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   89baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00089bac <__swsetup_r>:
   89bac:	b538      	push	{r3, r4, r5, lr}
   89bae:	4b32      	ldr	r3, [pc, #200]	; (89c78 <__swsetup_r+0xcc>)
   89bb0:	4605      	mov	r5, r0
   89bb2:	6818      	ldr	r0, [r3, #0]
   89bb4:	460c      	mov	r4, r1
   89bb6:	b110      	cbz	r0, 89bbe <__swsetup_r+0x12>
   89bb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89bba:	2b00      	cmp	r3, #0
   89bbc:	d03c      	beq.n	89c38 <__swsetup_r+0x8c>
   89bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89bc2:	0718      	lsls	r0, r3, #28
   89bc4:	b29a      	uxth	r2, r3
   89bc6:	d50c      	bpl.n	89be2 <__swsetup_r+0x36>
   89bc8:	6921      	ldr	r1, [r4, #16]
   89bca:	b1a9      	cbz	r1, 89bf8 <__swsetup_r+0x4c>
   89bcc:	f012 0001 	ands.w	r0, r2, #1
   89bd0:	d022      	beq.n	89c18 <__swsetup_r+0x6c>
   89bd2:	2500      	movs	r5, #0
   89bd4:	6960      	ldr	r0, [r4, #20]
   89bd6:	60a5      	str	r5, [r4, #8]
   89bd8:	4240      	negs	r0, r0
   89bda:	61a0      	str	r0, [r4, #24]
   89bdc:	b311      	cbz	r1, 89c24 <__swsetup_r+0x78>
   89bde:	2000      	movs	r0, #0
   89be0:	bd38      	pop	{r3, r4, r5, pc}
   89be2:	06d1      	lsls	r1, r2, #27
   89be4:	d53f      	bpl.n	89c66 <__swsetup_r+0xba>
   89be6:	0752      	lsls	r2, r2, #29
   89be8:	d429      	bmi.n	89c3e <__swsetup_r+0x92>
   89bea:	6921      	ldr	r1, [r4, #16]
   89bec:	f043 0308 	orr.w	r3, r3, #8
   89bf0:	81a3      	strh	r3, [r4, #12]
   89bf2:	b29a      	uxth	r2, r3
   89bf4:	2900      	cmp	r1, #0
   89bf6:	d1e9      	bne.n	89bcc <__swsetup_r+0x20>
   89bf8:	f402 7020 	and.w	r0, r2, #640	; 0x280
   89bfc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   89c00:	d0e4      	beq.n	89bcc <__swsetup_r+0x20>
   89c02:	4628      	mov	r0, r5
   89c04:	4621      	mov	r1, r4
   89c06:	f001 fd37 	bl	8b678 <__smakebuf_r>
   89c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89c0e:	6921      	ldr	r1, [r4, #16]
   89c10:	b29a      	uxth	r2, r3
   89c12:	f012 0001 	ands.w	r0, r2, #1
   89c16:	d1dc      	bne.n	89bd2 <__swsetup_r+0x26>
   89c18:	0795      	lsls	r5, r2, #30
   89c1a:	bf58      	it	pl
   89c1c:	6960      	ldrpl	r0, [r4, #20]
   89c1e:	60a0      	str	r0, [r4, #8]
   89c20:	2900      	cmp	r1, #0
   89c22:	d1dc      	bne.n	89bde <__swsetup_r+0x32>
   89c24:	0612      	lsls	r2, r2, #24
   89c26:	bf58      	it	pl
   89c28:	4608      	movpl	r0, r1
   89c2a:	d5d9      	bpl.n	89be0 <__swsetup_r+0x34>
   89c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89c30:	f04f 30ff 	mov.w	r0, #4294967295
   89c34:	81a3      	strh	r3, [r4, #12]
   89c36:	bd38      	pop	{r3, r4, r5, pc}
   89c38:	f001 f91a 	bl	8ae70 <__sinit>
   89c3c:	e7bf      	b.n	89bbe <__swsetup_r+0x12>
   89c3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   89c40:	b151      	cbz	r1, 89c58 <__swsetup_r+0xac>
   89c42:	f104 0240 	add.w	r2, r4, #64	; 0x40
   89c46:	4291      	cmp	r1, r2
   89c48:	d004      	beq.n	89c54 <__swsetup_r+0xa8>
   89c4a:	4628      	mov	r0, r5
   89c4c:	f001 fa34 	bl	8b0b8 <_free_r>
   89c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89c54:	2200      	movs	r2, #0
   89c56:	6322      	str	r2, [r4, #48]	; 0x30
   89c58:	2200      	movs	r2, #0
   89c5a:	6921      	ldr	r1, [r4, #16]
   89c5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   89c60:	e9c4 1200 	strd	r1, r2, [r4]
   89c64:	e7c2      	b.n	89bec <__swsetup_r+0x40>
   89c66:	2209      	movs	r2, #9
   89c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89c6c:	602a      	str	r2, [r5, #0]
   89c6e:	f04f 30ff 	mov.w	r0, #4294967295
   89c72:	81a3      	strh	r3, [r4, #12]
   89c74:	bd38      	pop	{r3, r4, r5, pc}
   89c76:	bf00      	nop
   89c78:	20000440 	.word	0x20000440

00089c7c <register_fini>:
   89c7c:	4b02      	ldr	r3, [pc, #8]	; (89c88 <register_fini+0xc>)
   89c7e:	b113      	cbz	r3, 89c86 <register_fini+0xa>
   89c80:	4802      	ldr	r0, [pc, #8]	; (89c8c <register_fini+0x10>)
   89c82:	f000 b805 	b.w	89c90 <atexit>
   89c86:	4770      	bx	lr
   89c88:	00000000 	.word	0x00000000
   89c8c:	0008aee5 	.word	0x0008aee5

00089c90 <atexit>:
   89c90:	2300      	movs	r3, #0
   89c92:	4601      	mov	r1, r0
   89c94:	461a      	mov	r2, r3
   89c96:	4618      	mov	r0, r3
   89c98:	f003 b826 	b.w	8cce8 <__register_exitproc>

00089c9c <quorem>:
   89c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89ca0:	6903      	ldr	r3, [r0, #16]
   89ca2:	690d      	ldr	r5, [r1, #16]
   89ca4:	b083      	sub	sp, #12
   89ca6:	42ab      	cmp	r3, r5
   89ca8:	f2c0 8084 	blt.w	89db4 <quorem+0x118>
   89cac:	3d01      	subs	r5, #1
   89cae:	f101 0614 	add.w	r6, r1, #20
   89cb2:	f100 0914 	add.w	r9, r0, #20
   89cb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   89cba:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89cbe:	3301      	adds	r3, #1
   89cc0:	468e      	mov	lr, r1
   89cc2:	00a9      	lsls	r1, r5, #2
   89cc4:	9100      	str	r1, [sp, #0]
   89cc6:	429a      	cmp	r2, r3
   89cc8:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   89ccc:	4682      	mov	sl, r0
   89cce:	fbb2 f7f3 	udiv	r7, r2, r3
   89cd2:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   89cd6:	9101      	str	r1, [sp, #4]
   89cd8:	d337      	bcc.n	89d4a <quorem+0xae>
   89cda:	2200      	movs	r2, #0
   89cdc:	46b4      	mov	ip, r6
   89cde:	4614      	mov	r4, r2
   89ce0:	4648      	mov	r0, r9
   89ce2:	f85c 3b04 	ldr.w	r3, [ip], #4
   89ce6:	6801      	ldr	r1, [r0, #0]
   89ce8:	fa1f fb83 	uxth.w	fp, r3
   89cec:	fb07 220b 	mla	r2, r7, fp, r2
   89cf0:	0c1b      	lsrs	r3, r3, #16
   89cf2:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   89cf6:	fb07 bb03 	mla	fp, r7, r3, fp
   89cfa:	b293      	uxth	r3, r2
   89cfc:	1ae3      	subs	r3, r4, r3
   89cfe:	b28a      	uxth	r2, r1
   89d00:	fa1f f48b 	uxth.w	r4, fp
   89d04:	4413      	add	r3, r2
   89d06:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   89d0a:	eb04 4423 	add.w	r4, r4, r3, asr #16
   89d0e:	b29b      	uxth	r3, r3
   89d10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   89d14:	45e0      	cmp	r8, ip
   89d16:	f840 3b04 	str.w	r3, [r0], #4
   89d1a:	ea4f 4424 	mov.w	r4, r4, asr #16
   89d1e:	ea4f 421b 	mov.w	r2, fp, lsr #16
   89d22:	d2de      	bcs.n	89ce2 <quorem+0x46>
   89d24:	9b00      	ldr	r3, [sp, #0]
   89d26:	f859 3003 	ldr.w	r3, [r9, r3]
   89d2a:	b973      	cbnz	r3, 89d4a <quorem+0xae>
   89d2c:	9b01      	ldr	r3, [sp, #4]
   89d2e:	3b04      	subs	r3, #4
   89d30:	4599      	cmp	r9, r3
   89d32:	d304      	bcc.n	89d3e <quorem+0xa2>
   89d34:	e007      	b.n	89d46 <quorem+0xaa>
   89d36:	4599      	cmp	r9, r3
   89d38:	f105 35ff 	add.w	r5, r5, #4294967295
   89d3c:	d203      	bcs.n	89d46 <quorem+0xaa>
   89d3e:	f853 2904 	ldr.w	r2, [r3], #-4
   89d42:	2a00      	cmp	r2, #0
   89d44:	d0f7      	beq.n	89d36 <quorem+0x9a>
   89d46:	f8ca 5010 	str.w	r5, [sl, #16]
   89d4a:	4671      	mov	r1, lr
   89d4c:	4650      	mov	r0, sl
   89d4e:	f002 faab 	bl	8c2a8 <__mcmp>
   89d52:	2800      	cmp	r0, #0
   89d54:	db2a      	blt.n	89dac <quorem+0x110>
   89d56:	4648      	mov	r0, r9
   89d58:	2300      	movs	r3, #0
   89d5a:	3701      	adds	r7, #1
   89d5c:	f856 1b04 	ldr.w	r1, [r6], #4
   89d60:	6804      	ldr	r4, [r0, #0]
   89d62:	b28a      	uxth	r2, r1
   89d64:	1a9a      	subs	r2, r3, r2
   89d66:	0c0b      	lsrs	r3, r1, #16
   89d68:	b2a1      	uxth	r1, r4
   89d6a:	440a      	add	r2, r1
   89d6c:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   89d70:	eb03 4322 	add.w	r3, r3, r2, asr #16
   89d74:	b292      	uxth	r2, r2
   89d76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   89d7a:	45b0      	cmp	r8, r6
   89d7c:	f840 2b04 	str.w	r2, [r0], #4
   89d80:	ea4f 4323 	mov.w	r3, r3, asr #16
   89d84:	d2ea      	bcs.n	89d5c <quorem+0xc0>
   89d86:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89d8a:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   89d8e:	b96a      	cbnz	r2, 89dac <quorem+0x110>
   89d90:	3b04      	subs	r3, #4
   89d92:	4599      	cmp	r9, r3
   89d94:	d304      	bcc.n	89da0 <quorem+0x104>
   89d96:	e007      	b.n	89da8 <quorem+0x10c>
   89d98:	4599      	cmp	r9, r3
   89d9a:	f105 35ff 	add.w	r5, r5, #4294967295
   89d9e:	d203      	bcs.n	89da8 <quorem+0x10c>
   89da0:	f853 2904 	ldr.w	r2, [r3], #-4
   89da4:	2a00      	cmp	r2, #0
   89da6:	d0f7      	beq.n	89d98 <quorem+0xfc>
   89da8:	f8ca 5010 	str.w	r5, [sl, #16]
   89dac:	4638      	mov	r0, r7
   89dae:	b003      	add	sp, #12
   89db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89db4:	2000      	movs	r0, #0
   89db6:	b003      	add	sp, #12
   89db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89dbc:	0000      	movs	r0, r0
   89dbe:	0000      	movs	r0, r0

00089dc0 <_dtoa_r>:
   89dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89dc4:	4616      	mov	r6, r2
   89dc6:	461f      	mov	r7, r3
   89dc8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   89dca:	b09b      	sub	sp, #108	; 0x6c
   89dcc:	4604      	mov	r4, r0
   89dce:	e9cd 6704 	strd	r6, r7, [sp, #16]
   89dd2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   89dd4:	b141      	cbz	r1, 89de8 <_dtoa_r+0x28>
   89dd6:	2301      	movs	r3, #1
   89dd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   89dda:	4093      	lsls	r3, r2
   89ddc:	e9c1 2301 	strd	r2, r3, [r1, #4]
   89de0:	f002 f834 	bl	8be4c <_Bfree>
   89de4:	2300      	movs	r3, #0
   89de6:	6423      	str	r3, [r4, #64]	; 0x40
   89de8:	f1b7 0900 	subs.w	r9, r7, #0
   89dec:	bfb4      	ite	lt
   89dee:	2301      	movlt	r3, #1
   89df0:	2300      	movge	r3, #0
   89df2:	602b      	str	r3, [r5, #0]
   89df4:	4b76      	ldr	r3, [pc, #472]	; (89fd0 <_dtoa_r+0x210>)
   89df6:	bfbc      	itt	lt
   89df8:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   89dfc:	f8cd 9014 	strlt.w	r9, [sp, #20]
   89e00:	ea33 0309 	bics.w	r3, r3, r9
   89e04:	f000 80ab 	beq.w	89f5e <_dtoa_r+0x19e>
   89e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89e0c:	4610      	mov	r0, r2
   89e0e:	4619      	mov	r1, r3
   89e10:	2200      	movs	r2, #0
   89e12:	2300      	movs	r3, #0
   89e14:	e9cd 0108 	strd	r0, r1, [sp, #32]
   89e18:	f003 fd52 	bl	8d8c0 <__aeabi_dcmpeq>
   89e1c:	4680      	mov	r8, r0
   89e1e:	b170      	cbz	r0, 89e3e <_dtoa_r+0x7e>
   89e20:	2301      	movs	r3, #1
   89e22:	9a26      	ldr	r2, [sp, #152]	; 0x98
   89e24:	6013      	str	r3, [r2, #0]
   89e26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89e28:	2b00      	cmp	r3, #0
   89e2a:	f000 82c2 	beq.w	8a3b2 <_dtoa_r+0x5f2>
   89e2e:	4869      	ldr	r0, [pc, #420]	; (89fd4 <_dtoa_r+0x214>)
   89e30:	6018      	str	r0, [r3, #0]
   89e32:	1e43      	subs	r3, r0, #1
   89e34:	9303      	str	r3, [sp, #12]
   89e36:	9803      	ldr	r0, [sp, #12]
   89e38:	b01b      	add	sp, #108	; 0x6c
   89e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89e3e:	aa18      	add	r2, sp, #96	; 0x60
   89e40:	ab19      	add	r3, sp, #100	; 0x64
   89e42:	e9cd 3200 	strd	r3, r2, [sp]
   89e46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   89e4a:	4620      	mov	r0, r4
   89e4c:	f002 faf2 	bl	8c434 <__d2b>
   89e50:	ea5f 5519 	movs.w	r5, r9, lsr #20
   89e54:	4682      	mov	sl, r0
   89e56:	f040 8098 	bne.w	89f8a <_dtoa_r+0x1ca>
   89e5a:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   89e5e:	4445      	add	r5, r8
   89e60:	f205 4032 	addw	r0, r5, #1074	; 0x432
   89e64:	2820      	cmp	r0, #32
   89e66:	f340 8390 	ble.w	8a58a <_dtoa_r+0x7ca>
   89e6a:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   89e6e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   89e72:	fa09 f903 	lsl.w	r9, r9, r3
   89e76:	fa26 f000 	lsr.w	r0, r6, r0
   89e7a:	ea49 0000 	orr.w	r0, r9, r0
   89e7e:	f003 fa3d 	bl	8d2fc <__aeabi_ui2d>
   89e82:	2201      	movs	r2, #1
   89e84:	3d01      	subs	r5, #1
   89e86:	920f      	str	r2, [sp, #60]	; 0x3c
   89e88:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   89e8c:	2200      	movs	r2, #0
   89e8e:	4b52      	ldr	r3, [pc, #328]	; (89fd8 <_dtoa_r+0x218>)
   89e90:	f003 f8f6 	bl	8d080 <__aeabi_dsub>
   89e94:	a348      	add	r3, pc, #288	; (adr r3, 89fb8 <_dtoa_r+0x1f8>)
   89e96:	e9d3 2300 	ldrd	r2, r3, [r3]
   89e9a:	f003 faa9 	bl	8d3f0 <__aeabi_dmul>
   89e9e:	a348      	add	r3, pc, #288	; (adr r3, 89fc0 <_dtoa_r+0x200>)
   89ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
   89ea4:	f003 f8ee 	bl	8d084 <__adddf3>
   89ea8:	4606      	mov	r6, r0
   89eaa:	4628      	mov	r0, r5
   89eac:	460f      	mov	r7, r1
   89eae:	f003 fa35 	bl	8d31c <__aeabi_i2d>
   89eb2:	a345      	add	r3, pc, #276	; (adr r3, 89fc8 <_dtoa_r+0x208>)
   89eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   89eb8:	f003 fa9a 	bl	8d3f0 <__aeabi_dmul>
   89ebc:	4602      	mov	r2, r0
   89ebe:	460b      	mov	r3, r1
   89ec0:	4630      	mov	r0, r6
   89ec2:	4639      	mov	r1, r7
   89ec4:	f003 f8de 	bl	8d084 <__adddf3>
   89ec8:	4606      	mov	r6, r0
   89eca:	460f      	mov	r7, r1
   89ecc:	f003 fd40 	bl	8d950 <__aeabi_d2iz>
   89ed0:	2200      	movs	r2, #0
   89ed2:	4683      	mov	fp, r0
   89ed4:	2300      	movs	r3, #0
   89ed6:	4630      	mov	r0, r6
   89ed8:	4639      	mov	r1, r7
   89eda:	f003 fcfb 	bl	8d8d4 <__aeabi_dcmplt>
   89ede:	2800      	cmp	r0, #0
   89ee0:	f040 825a 	bne.w	8a398 <_dtoa_r+0x5d8>
   89ee4:	f1bb 0f16 	cmp.w	fp, #22
   89ee8:	f200 8248 	bhi.w	8a37c <_dtoa_r+0x5bc>
   89eec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89ef0:	4b3a      	ldr	r3, [pc, #232]	; (89fdc <_dtoa_r+0x21c>)
   89ef2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   89ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
   89efa:	f003 fceb 	bl	8d8d4 <__aeabi_dcmplt>
   89efe:	2800      	cmp	r0, #0
   89f00:	d072      	beq.n	89fe8 <_dtoa_r+0x228>
   89f02:	2300      	movs	r3, #0
   89f04:	eba8 0505 	sub.w	r5, r8, r5
   89f08:	930e      	str	r3, [sp, #56]	; 0x38
   89f0a:	1e6b      	subs	r3, r5, #1
   89f0c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89f10:	9306      	str	r3, [sp, #24]
   89f12:	f100 823b 	bmi.w	8a38c <_dtoa_r+0x5cc>
   89f16:	2300      	movs	r3, #0
   89f18:	930b      	str	r3, [sp, #44]	; 0x2c
   89f1a:	f1bb 0f00 	cmp.w	fp, #0
   89f1e:	da6b      	bge.n	89ff8 <_dtoa_r+0x238>
   89f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89f22:	f8cd b01c 	str.w	fp, [sp, #28]
   89f26:	eba3 030b 	sub.w	r3, r3, fp
   89f2a:	930b      	str	r3, [sp, #44]	; 0x2c
   89f2c:	f1cb 0300 	rsb	r3, fp, #0
   89f30:	930d      	str	r3, [sp, #52]	; 0x34
   89f32:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89f34:	f04f 0b00 	mov.w	fp, #0
   89f38:	2b09      	cmp	r3, #9
   89f3a:	d866      	bhi.n	8a00a <_dtoa_r+0x24a>
   89f3c:	2b05      	cmp	r3, #5
   89f3e:	f340 8322 	ble.w	8a586 <_dtoa_r+0x7c6>
   89f42:	2500      	movs	r5, #0
   89f44:	3b04      	subs	r3, #4
   89f46:	9324      	str	r3, [sp, #144]	; 0x90
   89f48:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89f4a:	3b02      	subs	r3, #2
   89f4c:	2b03      	cmp	r3, #3
   89f4e:	f200 866e 	bhi.w	8ac2e <_dtoa_r+0xe6e>
   89f52:	e8df f013 	tbh	[pc, r3, lsl #1]
   89f56:	043b      	.short	0x043b
   89f58:	042f0438 	.word	0x042f0438
   89f5c:	0412      	.short	0x0412
   89f5e:	f242 730f 	movw	r3, #9999	; 0x270f
   89f62:	9a26      	ldr	r2, [sp, #152]	; 0x98
   89f64:	f3c9 0913 	ubfx	r9, r9, #0, #20
   89f68:	6013      	str	r3, [r2, #0]
   89f6a:	ea59 0306 	orrs.w	r3, r9, r6
   89f6e:	d11c      	bne.n	89faa <_dtoa_r+0x1ea>
   89f70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89f72:	2b00      	cmp	r3, #0
   89f74:	f000 8657 	beq.w	8ac26 <_dtoa_r+0xe66>
   89f78:	4b19      	ldr	r3, [pc, #100]	; (89fe0 <_dtoa_r+0x220>)
   89f7a:	9303      	str	r3, [sp, #12]
   89f7c:	3308      	adds	r3, #8
   89f7e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   89f80:	9803      	ldr	r0, [sp, #12]
   89f82:	6013      	str	r3, [r2, #0]
   89f84:	b01b      	add	sp, #108	; 0x6c
   89f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89f8a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   89f8e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89f92:	4608      	mov	r0, r1
   89f94:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   89f98:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   89f9c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   89fa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   89fa4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   89fa8:	e770      	b.n	89e8c <_dtoa_r+0xcc>
   89faa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89fac:	2b00      	cmp	r3, #0
   89fae:	f040 83c8 	bne.w	8a742 <_dtoa_r+0x982>
   89fb2:	4b0c      	ldr	r3, [pc, #48]	; (89fe4 <_dtoa_r+0x224>)
   89fb4:	9303      	str	r3, [sp, #12]
   89fb6:	e73e      	b.n	89e36 <_dtoa_r+0x76>
   89fb8:	636f4361 	.word	0x636f4361
   89fbc:	3fd287a7 	.word	0x3fd287a7
   89fc0:	8b60c8b3 	.word	0x8b60c8b3
   89fc4:	3fc68a28 	.word	0x3fc68a28
   89fc8:	509f79fb 	.word	0x509f79fb
   89fcc:	3fd34413 	.word	0x3fd34413
   89fd0:	7ff00000 	.word	0x7ff00000
   89fd4:	0008dab5 	.word	0x0008dab5
   89fd8:	3ff80000 	.word	0x3ff80000
   89fdc:	0008dc50 	.word	0x0008dc50
   89fe0:	0008dafc 	.word	0x0008dafc
   89fe4:	0008daf8 	.word	0x0008daf8
   89fe8:	eba8 0505 	sub.w	r5, r8, r5
   89fec:	1e6b      	subs	r3, r5, #1
   89fee:	9306      	str	r3, [sp, #24]
   89ff0:	f100 84a9 	bmi.w	8a946 <_dtoa_r+0xb86>
   89ff4:	900e      	str	r0, [sp, #56]	; 0x38
   89ff6:	900b      	str	r0, [sp, #44]	; 0x2c
   89ff8:	9b06      	ldr	r3, [sp, #24]
   89ffa:	445b      	add	r3, fp
   89ffc:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   8a000:	2300      	movs	r3, #0
   8a002:	930d      	str	r3, [sp, #52]	; 0x34
   8a004:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a006:	2b09      	cmp	r3, #9
   8a008:	d998      	bls.n	89f3c <_dtoa_r+0x17c>
   8a00a:	2300      	movs	r3, #0
   8a00c:	2501      	movs	r5, #1
   8a00e:	9324      	str	r3, [sp, #144]	; 0x90
   8a010:	9325      	str	r3, [sp, #148]	; 0x94
   8a012:	f04f 33ff 	mov.w	r3, #4294967295
   8a016:	950c      	str	r5, [sp, #48]	; 0x30
   8a018:	930a      	str	r3, [sp, #40]	; 0x28
   8a01a:	2100      	movs	r1, #0
   8a01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a01e:	6461      	str	r1, [r4, #68]	; 0x44
   8a020:	9312      	str	r3, [sp, #72]	; 0x48
   8a022:	4620      	mov	r0, r4
   8a024:	f001 feec 	bl	8be00 <_Balloc>
   8a028:	9003      	str	r0, [sp, #12]
   8a02a:	2800      	cmp	r0, #0
   8a02c:	f000 8607 	beq.w	8ac3e <_dtoa_r+0xe7e>
   8a030:	9b03      	ldr	r3, [sp, #12]
   8a032:	6423      	str	r3, [r4, #64]	; 0x40
   8a034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a036:	2b0e      	cmp	r3, #14
   8a038:	f200 80e9 	bhi.w	8a20e <_dtoa_r+0x44e>
   8a03c:	2d00      	cmp	r5, #0
   8a03e:	f000 80e6 	beq.w	8a20e <_dtoa_r+0x44e>
   8a042:	9907      	ldr	r1, [sp, #28]
   8a044:	2900      	cmp	r1, #0
   8a046:	f340 8452 	ble.w	8a8ee <_dtoa_r+0xb2e>
   8a04a:	4bb5      	ldr	r3, [pc, #724]	; (8a320 <_dtoa_r+0x560>)
   8a04c:	f001 020f 	and.w	r2, r1, #15
   8a050:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a054:	05c8      	lsls	r0, r1, #23
   8a056:	ea4f 1521 	mov.w	r5, r1, asr #4
   8a05a:	e9d3 6700 	ldrd	r6, r7, [r3]
   8a05e:	f140 83ee 	bpl.w	8a83e <_dtoa_r+0xa7e>
   8a062:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a066:	4baf      	ldr	r3, [pc, #700]	; (8a324 <_dtoa_r+0x564>)
   8a068:	f04f 0903 	mov.w	r9, #3
   8a06c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   8a070:	f003 fae8 	bl	8d644 <__aeabi_ddiv>
   8a074:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8a078:	f005 050f 	and.w	r5, r5, #15
   8a07c:	b18d      	cbz	r5, 8a0a2 <_dtoa_r+0x2e2>
   8a07e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8a324 <_dtoa_r+0x564>
   8a082:	07e9      	lsls	r1, r5, #31
   8a084:	d509      	bpl.n	8a09a <_dtoa_r+0x2da>
   8a086:	e9d8 2300 	ldrd	r2, r3, [r8]
   8a08a:	4630      	mov	r0, r6
   8a08c:	4639      	mov	r1, r7
   8a08e:	f003 f9af 	bl	8d3f0 <__aeabi_dmul>
   8a092:	4606      	mov	r6, r0
   8a094:	460f      	mov	r7, r1
   8a096:	f109 0901 	add.w	r9, r9, #1
   8a09a:	106d      	asrs	r5, r5, #1
   8a09c:	f108 0808 	add.w	r8, r8, #8
   8a0a0:	d1ef      	bne.n	8a082 <_dtoa_r+0x2c2>
   8a0a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8a0a6:	4632      	mov	r2, r6
   8a0a8:	463b      	mov	r3, r7
   8a0aa:	f003 facb 	bl	8d644 <__aeabi_ddiv>
   8a0ae:	4606      	mov	r6, r0
   8a0b0:	460f      	mov	r7, r1
   8a0b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8a0b4:	b143      	cbz	r3, 8a0c8 <_dtoa_r+0x308>
   8a0b6:	2200      	movs	r2, #0
   8a0b8:	4630      	mov	r0, r6
   8a0ba:	4639      	mov	r1, r7
   8a0bc:	4b9a      	ldr	r3, [pc, #616]	; (8a328 <_dtoa_r+0x568>)
   8a0be:	f003 fc09 	bl	8d8d4 <__aeabi_dcmplt>
   8a0c2:	2800      	cmp	r0, #0
   8a0c4:	f040 853b 	bne.w	8ab3e <_dtoa_r+0xd7e>
   8a0c8:	4648      	mov	r0, r9
   8a0ca:	f003 f927 	bl	8d31c <__aeabi_i2d>
   8a0ce:	4632      	mov	r2, r6
   8a0d0:	463b      	mov	r3, r7
   8a0d2:	f003 f98d 	bl	8d3f0 <__aeabi_dmul>
   8a0d6:	4b95      	ldr	r3, [pc, #596]	; (8a32c <_dtoa_r+0x56c>)
   8a0d8:	2200      	movs	r2, #0
   8a0da:	f002 ffd3 	bl	8d084 <__adddf3>
   8a0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a0e0:	4680      	mov	r8, r0
   8a0e2:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a0e6:	2b00      	cmp	r3, #0
   8a0e8:	f000 83ce 	beq.w	8a888 <_dtoa_r+0xac8>
   8a0ec:	9b07      	ldr	r3, [sp, #28]
   8a0ee:	9313      	str	r3, [sp, #76]	; 0x4c
   8a0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a0f2:	9310      	str	r3, [sp, #64]	; 0x40
   8a0f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a0f6:	2b00      	cmp	r3, #0
   8a0f8:	f000 84b7 	beq.w	8aa6a <_dtoa_r+0xcaa>
   8a0fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8a0fe:	4b88      	ldr	r3, [pc, #544]	; (8a320 <_dtoa_r+0x560>)
   8a100:	2000      	movs	r0, #0
   8a102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a106:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   8a10a:	4989      	ldr	r1, [pc, #548]	; (8a330 <_dtoa_r+0x570>)
   8a10c:	f003 fa9a 	bl	8d644 <__aeabi_ddiv>
   8a110:	4642      	mov	r2, r8
   8a112:	464b      	mov	r3, r9
   8a114:	f002 ffb4 	bl	8d080 <__aeabi_dsub>
   8a118:	4602      	mov	r2, r0
   8a11a:	460b      	mov	r3, r1
   8a11c:	4630      	mov	r0, r6
   8a11e:	4639      	mov	r1, r7
   8a120:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8a124:	f003 fc14 	bl	8d950 <__aeabi_d2iz>
   8a128:	4680      	mov	r8, r0
   8a12a:	f003 f8f7 	bl	8d31c <__aeabi_i2d>
   8a12e:	4602      	mov	r2, r0
   8a130:	460b      	mov	r3, r1
   8a132:	4630      	mov	r0, r6
   8a134:	4639      	mov	r1, r7
   8a136:	f002 ffa3 	bl	8d080 <__aeabi_dsub>
   8a13a:	9d03      	ldr	r5, [sp, #12]
   8a13c:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a140:	4606      	mov	r6, r0
   8a142:	460f      	mov	r7, r1
   8a144:	4602      	mov	r2, r0
   8a146:	f805 3b01 	strb.w	r3, [r5], #1
   8a14a:	460b      	mov	r3, r1
   8a14c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8a150:	f003 fbde 	bl	8d910 <__aeabi_dcmpgt>
   8a154:	2800      	cmp	r0, #0
   8a156:	f040 853b 	bne.w	8abd0 <_dtoa_r+0xe10>
   8a15a:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   8a15e:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   8a162:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   8a166:	f04f 0900 	mov.w	r9, #0
   8a16a:	9410      	str	r4, [sp, #64]	; 0x40
   8a16c:	e02a      	b.n	8a1c4 <_dtoa_r+0x404>
   8a16e:	f109 0901 	add.w	r9, r9, #1
   8a172:	45c1      	cmp	r9, r8
   8a174:	da48      	bge.n	8a208 <_dtoa_r+0x448>
   8a176:	4650      	mov	r0, sl
   8a178:	4659      	mov	r1, fp
   8a17a:	2200      	movs	r2, #0
   8a17c:	4b6d      	ldr	r3, [pc, #436]	; (8a334 <_dtoa_r+0x574>)
   8a17e:	f003 f937 	bl	8d3f0 <__aeabi_dmul>
   8a182:	2200      	movs	r2, #0
   8a184:	4b6b      	ldr	r3, [pc, #428]	; (8a334 <_dtoa_r+0x574>)
   8a186:	4682      	mov	sl, r0
   8a188:	468b      	mov	fp, r1
   8a18a:	4630      	mov	r0, r6
   8a18c:	4639      	mov	r1, r7
   8a18e:	f003 f92f 	bl	8d3f0 <__aeabi_dmul>
   8a192:	460f      	mov	r7, r1
   8a194:	4606      	mov	r6, r0
   8a196:	f003 fbdb 	bl	8d950 <__aeabi_d2iz>
   8a19a:	4604      	mov	r4, r0
   8a19c:	f003 f8be 	bl	8d31c <__aeabi_i2d>
   8a1a0:	4602      	mov	r2, r0
   8a1a2:	460b      	mov	r3, r1
   8a1a4:	4630      	mov	r0, r6
   8a1a6:	4639      	mov	r1, r7
   8a1a8:	f002 ff6a 	bl	8d080 <__aeabi_dsub>
   8a1ac:	3430      	adds	r4, #48	; 0x30
   8a1ae:	4652      	mov	r2, sl
   8a1b0:	465b      	mov	r3, fp
   8a1b2:	f805 4b01 	strb.w	r4, [r5], #1
   8a1b6:	4606      	mov	r6, r0
   8a1b8:	460f      	mov	r7, r1
   8a1ba:	f003 fb8b 	bl	8d8d4 <__aeabi_dcmplt>
   8a1be:	2800      	cmp	r0, #0
   8a1c0:	f040 8503 	bne.w	8abca <_dtoa_r+0xe0a>
   8a1c4:	4632      	mov	r2, r6
   8a1c6:	463b      	mov	r3, r7
   8a1c8:	2000      	movs	r0, #0
   8a1ca:	4957      	ldr	r1, [pc, #348]	; (8a328 <_dtoa_r+0x568>)
   8a1cc:	f002 ff58 	bl	8d080 <__aeabi_dsub>
   8a1d0:	4652      	mov	r2, sl
   8a1d2:	465b      	mov	r3, fp
   8a1d4:	f003 fb7e 	bl	8d8d4 <__aeabi_dcmplt>
   8a1d8:	2800      	cmp	r0, #0
   8a1da:	d0c8      	beq.n	8a16e <_dtoa_r+0x3ae>
   8a1dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a1de:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8a1e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8a1e4:	9a03      	ldr	r2, [sp, #12]
   8a1e6:	9307      	str	r3, [sp, #28]
   8a1e8:	e002      	b.n	8a1f0 <_dtoa_r+0x430>
   8a1ea:	4295      	cmp	r5, r2
   8a1ec:	f000 84d2 	beq.w	8ab94 <_dtoa_r+0xdd4>
   8a1f0:	46a9      	mov	r9, r5
   8a1f2:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   8a1f6:	2b39      	cmp	r3, #57	; 0x39
   8a1f8:	d0f7      	beq.n	8a1ea <_dtoa_r+0x42a>
   8a1fa:	3301      	adds	r3, #1
   8a1fc:	b2db      	uxtb	r3, r3
   8a1fe:	702b      	strb	r3, [r5, #0]
   8a200:	9b07      	ldr	r3, [sp, #28]
   8a202:	3301      	adds	r3, #1
   8a204:	9307      	str	r3, [sp, #28]
   8a206:	e1a0      	b.n	8a54a <_dtoa_r+0x78a>
   8a208:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8a20a:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   8a20e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8a210:	2b00      	cmp	r3, #0
   8a212:	f2c0 8093 	blt.w	8a33c <_dtoa_r+0x57c>
   8a216:	9a07      	ldr	r2, [sp, #28]
   8a218:	2a0e      	cmp	r2, #14
   8a21a:	f300 808f 	bgt.w	8a33c <_dtoa_r+0x57c>
   8a21e:	4b40      	ldr	r3, [pc, #256]	; (8a320 <_dtoa_r+0x560>)
   8a220:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a224:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a228:	e9cd 2304 	strd	r2, r3, [sp, #16]
   8a22c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a22e:	2b00      	cmp	r3, #0
   8a230:	da1a      	bge.n	8a268 <_dtoa_r+0x4a8>
   8a232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a234:	2b00      	cmp	r3, #0
   8a236:	dc17      	bgt.n	8a268 <_dtoa_r+0x4a8>
   8a238:	f040 833f 	bne.w	8a8ba <_dtoa_r+0xafa>
   8a23c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8a240:	2200      	movs	r2, #0
   8a242:	4b3d      	ldr	r3, [pc, #244]	; (8a338 <_dtoa_r+0x578>)
   8a244:	f003 f8d4 	bl	8d3f0 <__aeabi_dmul>
   8a248:	4602      	mov	r2, r0
   8a24a:	460b      	mov	r3, r1
   8a24c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a250:	f003 fb4a 	bl	8d8e8 <__aeabi_dcmple>
   8a254:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   8a258:	4645      	mov	r5, r8
   8a25a:	2800      	cmp	r0, #0
   8a25c:	f000 82cd 	beq.w	8a7fa <_dtoa_r+0xa3a>
   8a260:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a262:	9f03      	ldr	r7, [sp, #12]
   8a264:	43de      	mvns	r6, r3
   8a266:	e2d0      	b.n	8a80a <_dtoa_r+0xa4a>
   8a268:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   8a26c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a270:	4632      	mov	r2, r6
   8a272:	463b      	mov	r3, r7
   8a274:	f003 f9e6 	bl	8d644 <__aeabi_ddiv>
   8a278:	f003 fb6a 	bl	8d950 <__aeabi_d2iz>
   8a27c:	4680      	mov	r8, r0
   8a27e:	f003 f84d 	bl	8d31c <__aeabi_i2d>
   8a282:	4632      	mov	r2, r6
   8a284:	463b      	mov	r3, r7
   8a286:	f003 f8b3 	bl	8d3f0 <__aeabi_dmul>
   8a28a:	460b      	mov	r3, r1
   8a28c:	4602      	mov	r2, r0
   8a28e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a292:	f002 fef5 	bl	8d080 <__aeabi_dsub>
   8a296:	9d03      	ldr	r5, [sp, #12]
   8a298:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a29c:	f805 3b01 	strb.w	r3, [r5], #1
   8a2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a2a2:	2b01      	cmp	r3, #1
   8a2a4:	f000 837f 	beq.w	8a9a6 <_dtoa_r+0xbe6>
   8a2a8:	f8cd a018 	str.w	sl, [sp, #24]
   8a2ac:	f04f 0901 	mov.w	r9, #1
   8a2b0:	469b      	mov	fp, r3
   8a2b2:	46aa      	mov	sl, r5
   8a2b4:	9408      	str	r4, [sp, #32]
   8a2b6:	e01d      	b.n	8a2f4 <_dtoa_r+0x534>
   8a2b8:	4632      	mov	r2, r6
   8a2ba:	463b      	mov	r3, r7
   8a2bc:	4620      	mov	r0, r4
   8a2be:	4629      	mov	r1, r5
   8a2c0:	f003 f9c0 	bl	8d644 <__aeabi_ddiv>
   8a2c4:	f003 fb44 	bl	8d950 <__aeabi_d2iz>
   8a2c8:	4680      	mov	r8, r0
   8a2ca:	f003 f827 	bl	8d31c <__aeabi_i2d>
   8a2ce:	4632      	mov	r2, r6
   8a2d0:	463b      	mov	r3, r7
   8a2d2:	f003 f88d 	bl	8d3f0 <__aeabi_dmul>
   8a2d6:	f109 0901 	add.w	r9, r9, #1
   8a2da:	460b      	mov	r3, r1
   8a2dc:	4602      	mov	r2, r0
   8a2de:	4629      	mov	r1, r5
   8a2e0:	4620      	mov	r0, r4
   8a2e2:	f002 fecd 	bl	8d080 <__aeabi_dsub>
   8a2e6:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a2ea:	45cb      	cmp	fp, r9
   8a2ec:	f80a 3b01 	strb.w	r3, [sl], #1
   8a2f0:	f000 8355 	beq.w	8a99e <_dtoa_r+0xbde>
   8a2f4:	2200      	movs	r2, #0
   8a2f6:	4b0f      	ldr	r3, [pc, #60]	; (8a334 <_dtoa_r+0x574>)
   8a2f8:	f003 f87a 	bl	8d3f0 <__aeabi_dmul>
   8a2fc:	2200      	movs	r2, #0
   8a2fe:	2300      	movs	r3, #0
   8a300:	4604      	mov	r4, r0
   8a302:	460d      	mov	r5, r1
   8a304:	f003 fadc 	bl	8d8c0 <__aeabi_dcmpeq>
   8a308:	2800      	cmp	r0, #0
   8a30a:	d0d5      	beq.n	8a2b8 <_dtoa_r+0x4f8>
   8a30c:	4655      	mov	r5, sl
   8a30e:	9c08      	ldr	r4, [sp, #32]
   8a310:	f8dd a018 	ldr.w	sl, [sp, #24]
   8a314:	9b07      	ldr	r3, [sp, #28]
   8a316:	46a9      	mov	r9, r5
   8a318:	3301      	adds	r3, #1
   8a31a:	9307      	str	r3, [sp, #28]
   8a31c:	e115      	b.n	8a54a <_dtoa_r+0x78a>
   8a31e:	bf00      	nop
   8a320:	0008dc50 	.word	0x0008dc50
   8a324:	0008dc28 	.word	0x0008dc28
   8a328:	3ff00000 	.word	0x3ff00000
   8a32c:	401c0000 	.word	0x401c0000
   8a330:	3fe00000 	.word	0x3fe00000
   8a334:	40240000 	.word	0x40240000
   8a338:	40140000 	.word	0x40140000
   8a33c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a33e:	2a00      	cmp	r2, #0
   8a340:	d03d      	beq.n	8a3be <_dtoa_r+0x5fe>
   8a342:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8a344:	2a01      	cmp	r2, #1
   8a346:	f340 82bc 	ble.w	8a8c2 <_dtoa_r+0xb02>
   8a34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a34c:	1e5f      	subs	r7, r3, #1
   8a34e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a350:	42bb      	cmp	r3, r7
   8a352:	f2c0 826e 	blt.w	8a832 <_dtoa_r+0xa72>
   8a356:	1bdf      	subs	r7, r3, r7
   8a358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a35a:	2b00      	cmp	r3, #0
   8a35c:	f2c0 8354 	blt.w	8aa08 <_dtoa_r+0xc48>
   8a360:	9a06      	ldr	r2, [sp, #24]
   8a362:	4611      	mov	r1, r2
   8a364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a366:	4419      	add	r1, r3
   8a368:	4616      	mov	r6, r2
   8a36a:	441a      	add	r2, r3
   8a36c:	9106      	str	r1, [sp, #24]
   8a36e:	920b      	str	r2, [sp, #44]	; 0x2c
   8a370:	2101      	movs	r1, #1
   8a372:	4620      	mov	r0, r4
   8a374:	f001 fe12 	bl	8bf9c <__i2b>
   8a378:	4605      	mov	r5, r0
   8a37a:	e023      	b.n	8a3c4 <_dtoa_r+0x604>
   8a37c:	2301      	movs	r3, #1
   8a37e:	eba8 0505 	sub.w	r5, r8, r5
   8a382:	930e      	str	r3, [sp, #56]	; 0x38
   8a384:	1e6b      	subs	r3, r5, #1
   8a386:	9306      	str	r3, [sp, #24]
   8a388:	f57f adc5 	bpl.w	89f16 <_dtoa_r+0x156>
   8a38c:	f1c5 0301 	rsb	r3, r5, #1
   8a390:	930b      	str	r3, [sp, #44]	; 0x2c
   8a392:	2300      	movs	r3, #0
   8a394:	9306      	str	r3, [sp, #24]
   8a396:	e5c0      	b.n	89f1a <_dtoa_r+0x15a>
   8a398:	4658      	mov	r0, fp
   8a39a:	f002 ffbf 	bl	8d31c <__aeabi_i2d>
   8a39e:	4632      	mov	r2, r6
   8a3a0:	463b      	mov	r3, r7
   8a3a2:	f003 fa8d 	bl	8d8c0 <__aeabi_dcmpeq>
   8a3a6:	2800      	cmp	r0, #0
   8a3a8:	f47f ad9c 	bne.w	89ee4 <_dtoa_r+0x124>
   8a3ac:	f10b 3bff 	add.w	fp, fp, #4294967295
   8a3b0:	e598      	b.n	89ee4 <_dtoa_r+0x124>
   8a3b2:	4bc7      	ldr	r3, [pc, #796]	; (8a6d0 <_dtoa_r+0x910>)
   8a3b4:	9303      	str	r3, [sp, #12]
   8a3b6:	9803      	ldr	r0, [sp, #12]
   8a3b8:	b01b      	add	sp, #108	; 0x6c
   8a3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a3be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a3c0:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   8a3c4:	2e00      	cmp	r6, #0
   8a3c6:	dd0c      	ble.n	8a3e2 <_dtoa_r+0x622>
   8a3c8:	9a06      	ldr	r2, [sp, #24]
   8a3ca:	2a00      	cmp	r2, #0
   8a3cc:	dd09      	ble.n	8a3e2 <_dtoa_r+0x622>
   8a3ce:	42b2      	cmp	r2, r6
   8a3d0:	4613      	mov	r3, r2
   8a3d2:	bfa8      	it	ge
   8a3d4:	4633      	movge	r3, r6
   8a3d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8a3d8:	1af6      	subs	r6, r6, r3
   8a3da:	1ac9      	subs	r1, r1, r3
   8a3dc:	1ad3      	subs	r3, r2, r3
   8a3de:	910b      	str	r1, [sp, #44]	; 0x2c
   8a3e0:	9306      	str	r3, [sp, #24]
   8a3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a3e4:	b1d3      	cbz	r3, 8a41c <_dtoa_r+0x65c>
   8a3e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a3e8:	2b00      	cmp	r3, #0
   8a3ea:	f000 81a3 	beq.w	8a734 <_dtoa_r+0x974>
   8a3ee:	2f00      	cmp	r7, #0
   8a3f0:	dd10      	ble.n	8a414 <_dtoa_r+0x654>
   8a3f2:	4629      	mov	r1, r5
   8a3f4:	463a      	mov	r2, r7
   8a3f6:	4620      	mov	r0, r4
   8a3f8:	f001 fe96 	bl	8c128 <__pow5mult>
   8a3fc:	4652      	mov	r2, sl
   8a3fe:	4601      	mov	r1, r0
   8a400:	4605      	mov	r5, r0
   8a402:	4620      	mov	r0, r4
   8a404:	f001 fde0 	bl	8bfc8 <__multiply>
   8a408:	4603      	mov	r3, r0
   8a40a:	4651      	mov	r1, sl
   8a40c:	4620      	mov	r0, r4
   8a40e:	469a      	mov	sl, r3
   8a410:	f001 fd1c 	bl	8be4c <_Bfree>
   8a414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a416:	1bda      	subs	r2, r3, r7
   8a418:	f040 818d 	bne.w	8a736 <_dtoa_r+0x976>
   8a41c:	2101      	movs	r1, #1
   8a41e:	4620      	mov	r0, r4
   8a420:	f001 fdbc 	bl	8bf9c <__i2b>
   8a424:	f1bb 0f00 	cmp.w	fp, #0
   8a428:	4680      	mov	r8, r0
   8a42a:	f300 80b3 	bgt.w	8a594 <_dtoa_r+0x7d4>
   8a42e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a430:	2b01      	cmp	r3, #1
   8a432:	f340 818a 	ble.w	8a74a <_dtoa_r+0x98a>
   8a436:	f04f 0900 	mov.w	r9, #0
   8a43a:	2001      	movs	r0, #1
   8a43c:	f1bb 0f00 	cmp.w	fp, #0
   8a440:	f040 80b4 	bne.w	8a5ac <_dtoa_r+0x7ec>
   8a444:	9a06      	ldr	r2, [sp, #24]
   8a446:	4410      	add	r0, r2
   8a448:	f010 001f 	ands.w	r0, r0, #31
   8a44c:	f000 8092 	beq.w	8a574 <_dtoa_r+0x7b4>
   8a450:	f1c0 0320 	rsb	r3, r0, #32
   8a454:	2b04      	cmp	r3, #4
   8a456:	f340 83f9 	ble.w	8ac4c <_dtoa_r+0xe8c>
   8a45a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a45c:	f1c0 001c 	rsb	r0, r0, #28
   8a460:	4403      	add	r3, r0
   8a462:	4402      	add	r2, r0
   8a464:	930b      	str	r3, [sp, #44]	; 0x2c
   8a466:	4406      	add	r6, r0
   8a468:	9206      	str	r2, [sp, #24]
   8a46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a46c:	2b00      	cmp	r3, #0
   8a46e:	dd05      	ble.n	8a47c <_dtoa_r+0x6bc>
   8a470:	4651      	mov	r1, sl
   8a472:	461a      	mov	r2, r3
   8a474:	4620      	mov	r0, r4
   8a476:	f001 fea3 	bl	8c1c0 <__lshift>
   8a47a:	4682      	mov	sl, r0
   8a47c:	9b06      	ldr	r3, [sp, #24]
   8a47e:	2b00      	cmp	r3, #0
   8a480:	dd05      	ble.n	8a48e <_dtoa_r+0x6ce>
   8a482:	4641      	mov	r1, r8
   8a484:	461a      	mov	r2, r3
   8a486:	4620      	mov	r0, r4
   8a488:	f001 fe9a 	bl	8c1c0 <__lshift>
   8a48c:	4680      	mov	r8, r0
   8a48e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8a490:	2b00      	cmp	r3, #0
   8a492:	f040 8135 	bne.w	8a700 <_dtoa_r+0x940>
   8a496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a498:	2b00      	cmp	r3, #0
   8a49a:	f340 811b 	ble.w	8a6d4 <_dtoa_r+0x914>
   8a49e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a4a0:	2b00      	cmp	r3, #0
   8a4a2:	f040 809a 	bne.w	8a5da <_dtoa_r+0x81a>
   8a4a6:	9b07      	ldr	r3, [sp, #28]
   8a4a8:	3301      	adds	r3, #1
   8a4aa:	9307      	str	r3, [sp, #28]
   8a4ac:	2601      	movs	r6, #1
   8a4ae:	9f03      	ldr	r7, [sp, #12]
   8a4b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8a4b4:	e007      	b.n	8a4c6 <_dtoa_r+0x706>
   8a4b6:	4651      	mov	r1, sl
   8a4b8:	2300      	movs	r3, #0
   8a4ba:	220a      	movs	r2, #10
   8a4bc:	4620      	mov	r0, r4
   8a4be:	f001 fccf 	bl	8be60 <__multadd>
   8a4c2:	4682      	mov	sl, r0
   8a4c4:	3601      	adds	r6, #1
   8a4c6:	4641      	mov	r1, r8
   8a4c8:	4650      	mov	r0, sl
   8a4ca:	f7ff fbe7 	bl	89c9c <quorem>
   8a4ce:	454e      	cmp	r6, r9
   8a4d0:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8a4d4:	f807 3b01 	strb.w	r3, [r7], #1
   8a4d8:	dbed      	blt.n	8a4b6 <_dtoa_r+0x6f6>
   8a4da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a4dc:	2600      	movs	r6, #0
   8a4de:	2a00      	cmp	r2, #0
   8a4e0:	bfcc      	ite	gt
   8a4e2:	4693      	movgt	fp, r2
   8a4e4:	f04f 0b01 	movle.w	fp, #1
   8a4e8:	9a03      	ldr	r2, [sp, #12]
   8a4ea:	4493      	add	fp, r2
   8a4ec:	4651      	mov	r1, sl
   8a4ee:	2201      	movs	r2, #1
   8a4f0:	4620      	mov	r0, r4
   8a4f2:	9304      	str	r3, [sp, #16]
   8a4f4:	f001 fe64 	bl	8c1c0 <__lshift>
   8a4f8:	4641      	mov	r1, r8
   8a4fa:	4682      	mov	sl, r0
   8a4fc:	f001 fed4 	bl	8c2a8 <__mcmp>
   8a500:	2800      	cmp	r0, #0
   8a502:	f340 81a8 	ble.w	8a856 <_dtoa_r+0xa96>
   8a506:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8a50a:	9a03      	ldr	r2, [sp, #12]
   8a50c:	f10b 3bff 	add.w	fp, fp, #4294967295
   8a510:	e004      	b.n	8a51c <_dtoa_r+0x75c>
   8a512:	455a      	cmp	r2, fp
   8a514:	f000 81e4 	beq.w	8a8e0 <_dtoa_r+0xb20>
   8a518:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8a51c:	2b39      	cmp	r3, #57	; 0x39
   8a51e:	f10b 0901 	add.w	r9, fp, #1
   8a522:	d0f6      	beq.n	8a512 <_dtoa_r+0x752>
   8a524:	3301      	adds	r3, #1
   8a526:	f88b 3000 	strb.w	r3, [fp]
   8a52a:	4641      	mov	r1, r8
   8a52c:	4620      	mov	r0, r4
   8a52e:	f001 fc8d 	bl	8be4c <_Bfree>
   8a532:	b155      	cbz	r5, 8a54a <_dtoa_r+0x78a>
   8a534:	b12e      	cbz	r6, 8a542 <_dtoa_r+0x782>
   8a536:	42ae      	cmp	r6, r5
   8a538:	d003      	beq.n	8a542 <_dtoa_r+0x782>
   8a53a:	4631      	mov	r1, r6
   8a53c:	4620      	mov	r0, r4
   8a53e:	f001 fc85 	bl	8be4c <_Bfree>
   8a542:	4629      	mov	r1, r5
   8a544:	4620      	mov	r0, r4
   8a546:	f001 fc81 	bl	8be4c <_Bfree>
   8a54a:	4651      	mov	r1, sl
   8a54c:	4620      	mov	r0, r4
   8a54e:	f001 fc7d 	bl	8be4c <_Bfree>
   8a552:	2300      	movs	r3, #0
   8a554:	f889 3000 	strb.w	r3, [r9]
   8a558:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8a55a:	461a      	mov	r2, r3
   8a55c:	9b07      	ldr	r3, [sp, #28]
   8a55e:	6013      	str	r3, [r2, #0]
   8a560:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a562:	2b00      	cmp	r3, #0
   8a564:	f43f ac67 	beq.w	89e36 <_dtoa_r+0x76>
   8a568:	9803      	ldr	r0, [sp, #12]
   8a56a:	f8c3 9000 	str.w	r9, [r3]
   8a56e:	b01b      	add	sp, #108	; 0x6c
   8a570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a574:	201c      	movs	r0, #28
   8a576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a578:	4406      	add	r6, r0
   8a57a:	4403      	add	r3, r0
   8a57c:	930b      	str	r3, [sp, #44]	; 0x2c
   8a57e:	9b06      	ldr	r3, [sp, #24]
   8a580:	4403      	add	r3, r0
   8a582:	9306      	str	r3, [sp, #24]
   8a584:	e771      	b.n	8a46a <_dtoa_r+0x6aa>
   8a586:	2501      	movs	r5, #1
   8a588:	e4de      	b.n	89f48 <_dtoa_r+0x188>
   8a58a:	f1c0 0020 	rsb	r0, r0, #32
   8a58e:	fa06 f000 	lsl.w	r0, r6, r0
   8a592:	e474      	b.n	89e7e <_dtoa_r+0xbe>
   8a594:	4601      	mov	r1, r0
   8a596:	465a      	mov	r2, fp
   8a598:	4620      	mov	r0, r4
   8a59a:	f001 fdc5 	bl	8c128 <__pow5mult>
   8a59e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a5a0:	4680      	mov	r8, r0
   8a5a2:	2b01      	cmp	r3, #1
   8a5a4:	f340 81d1 	ble.w	8a94a <_dtoa_r+0xb8a>
   8a5a8:	f04f 0900 	mov.w	r9, #0
   8a5ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8a5b0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8a5b4:	6918      	ldr	r0, [r3, #16]
   8a5b6:	f001 fca1 	bl	8befc <__hi0bits>
   8a5ba:	f1c0 0020 	rsb	r0, r0, #32
   8a5be:	e741      	b.n	8a444 <_dtoa_r+0x684>
   8a5c0:	4629      	mov	r1, r5
   8a5c2:	2300      	movs	r3, #0
   8a5c4:	220a      	movs	r2, #10
   8a5c6:	4620      	mov	r0, r4
   8a5c8:	f001 fc4a 	bl	8be60 <__multadd>
   8a5cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a5ce:	4605      	mov	r5, r0
   8a5d0:	2b00      	cmp	r3, #0
   8a5d2:	f340 8315 	ble.w	8ac00 <_dtoa_r+0xe40>
   8a5d6:	9707      	str	r7, [sp, #28]
   8a5d8:	930a      	str	r3, [sp, #40]	; 0x28
   8a5da:	2e00      	cmp	r6, #0
   8a5dc:	f300 8122 	bgt.w	8a824 <_dtoa_r+0xa64>
   8a5e0:	f1b9 0f00 	cmp.w	r9, #0
   8a5e4:	f040 81f9 	bne.w	8a9da <_dtoa_r+0xc1a>
   8a5e8:	462f      	mov	r7, r5
   8a5ea:	9903      	ldr	r1, [sp, #12]
   8a5ec:	9b04      	ldr	r3, [sp, #16]
   8a5ee:	460e      	mov	r6, r1
   8a5f0:	f003 0201 	and.w	r2, r3, #1
   8a5f4:	1e4b      	subs	r3, r1, #1
   8a5f6:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a5f8:	920c      	str	r2, [sp, #48]	; 0x30
   8a5fa:	430a      	orrs	r2, r1
   8a5fc:	920b      	str	r2, [sp, #44]	; 0x2c
   8a5fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a600:	441a      	add	r2, r3
   8a602:	920a      	str	r2, [sp, #40]	; 0x28
   8a604:	4641      	mov	r1, r8
   8a606:	4650      	mov	r0, sl
   8a608:	f7ff fb48 	bl	89c9c <quorem>
   8a60c:	4629      	mov	r1, r5
   8a60e:	4683      	mov	fp, r0
   8a610:	4650      	mov	r0, sl
   8a612:	f001 fe49 	bl	8c2a8 <__mcmp>
   8a616:	463a      	mov	r2, r7
   8a618:	4641      	mov	r1, r8
   8a61a:	4681      	mov	r9, r0
   8a61c:	4620      	mov	r0, r4
   8a61e:	f001 fe61 	bl	8c2e4 <__mdiff>
   8a622:	68c2      	ldr	r2, [r0, #12]
   8a624:	4601      	mov	r1, r0
   8a626:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8a62a:	2a00      	cmp	r2, #0
   8a62c:	d142      	bne.n	8a6b4 <_dtoa_r+0x8f4>
   8a62e:	9006      	str	r0, [sp, #24]
   8a630:	4650      	mov	r0, sl
   8a632:	9308      	str	r3, [sp, #32]
   8a634:	f001 fe38 	bl	8c2a8 <__mcmp>
   8a638:	9906      	ldr	r1, [sp, #24]
   8a63a:	9004      	str	r0, [sp, #16]
   8a63c:	4620      	mov	r0, r4
   8a63e:	f001 fc05 	bl	8be4c <_Bfree>
   8a642:	9a04      	ldr	r2, [sp, #16]
   8a644:	9b08      	ldr	r3, [sp, #32]
   8a646:	b91a      	cbnz	r2, 8a650 <_dtoa_r+0x890>
   8a648:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8a64a:	2900      	cmp	r1, #0
   8a64c:	f000 82cb 	beq.w	8abe6 <_dtoa_r+0xe26>
   8a650:	f1b9 0f00 	cmp.w	r9, #0
   8a654:	f2c0 8185 	blt.w	8a962 <_dtoa_r+0xba2>
   8a658:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a65a:	ea41 0909 	orr.w	r9, r1, r9
   8a65e:	990c      	ldr	r1, [sp, #48]	; 0x30
   8a660:	ea51 0109 	orrs.w	r1, r1, r9
   8a664:	f000 817d 	beq.w	8a962 <_dtoa_r+0xba2>
   8a668:	2a00      	cmp	r2, #0
   8a66a:	f300 81d1 	bgt.w	8aa10 <_dtoa_r+0xc50>
   8a66e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a670:	f106 0901 	add.w	r9, r6, #1
   8a674:	4296      	cmp	r6, r2
   8a676:	46cb      	mov	fp, r9
   8a678:	7033      	strb	r3, [r6, #0]
   8a67a:	f000 81e3 	beq.w	8aa44 <_dtoa_r+0xc84>
   8a67e:	4651      	mov	r1, sl
   8a680:	2300      	movs	r3, #0
   8a682:	220a      	movs	r2, #10
   8a684:	4620      	mov	r0, r4
   8a686:	f001 fbeb 	bl	8be60 <__multadd>
   8a68a:	42bd      	cmp	r5, r7
   8a68c:	4682      	mov	sl, r0
   8a68e:	4629      	mov	r1, r5
   8a690:	f04f 0300 	mov.w	r3, #0
   8a694:	f04f 020a 	mov.w	r2, #10
   8a698:	4620      	mov	r0, r4
   8a69a:	d012      	beq.n	8a6c2 <_dtoa_r+0x902>
   8a69c:	f001 fbe0 	bl	8be60 <__multadd>
   8a6a0:	4639      	mov	r1, r7
   8a6a2:	4605      	mov	r5, r0
   8a6a4:	2300      	movs	r3, #0
   8a6a6:	220a      	movs	r2, #10
   8a6a8:	4620      	mov	r0, r4
   8a6aa:	f001 fbd9 	bl	8be60 <__multadd>
   8a6ae:	464e      	mov	r6, r9
   8a6b0:	4607      	mov	r7, r0
   8a6b2:	e7a7      	b.n	8a604 <_dtoa_r+0x844>
   8a6b4:	4620      	mov	r0, r4
   8a6b6:	9304      	str	r3, [sp, #16]
   8a6b8:	f001 fbc8 	bl	8be4c <_Bfree>
   8a6bc:	2201      	movs	r2, #1
   8a6be:	9b04      	ldr	r3, [sp, #16]
   8a6c0:	e7c6      	b.n	8a650 <_dtoa_r+0x890>
   8a6c2:	f001 fbcd 	bl	8be60 <__multadd>
   8a6c6:	464e      	mov	r6, r9
   8a6c8:	4605      	mov	r5, r0
   8a6ca:	4607      	mov	r7, r0
   8a6cc:	e79a      	b.n	8a604 <_dtoa_r+0x844>
   8a6ce:	bf00      	nop
   8a6d0:	0008dab4 	.word	0x0008dab4
   8a6d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a6d6:	2b02      	cmp	r3, #2
   8a6d8:	dc7e      	bgt.n	8a7d8 <_dtoa_r+0xa18>
   8a6da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a6dc:	2b00      	cmp	r3, #0
   8a6de:	f47f af7c 	bne.w	8a5da <_dtoa_r+0x81a>
   8a6e2:	4641      	mov	r1, r8
   8a6e4:	4650      	mov	r0, sl
   8a6e6:	f7ff fad9 	bl	89c9c <quorem>
   8a6ea:	9a07      	ldr	r2, [sp, #28]
   8a6ec:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8a6f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8a6f4:	3201      	adds	r2, #1
   8a6f6:	2600      	movs	r6, #0
   8a6f8:	9207      	str	r2, [sp, #28]
   8a6fa:	f80b 3b01 	strb.w	r3, [fp], #1
   8a6fe:	e6f5      	b.n	8a4ec <_dtoa_r+0x72c>
   8a700:	4641      	mov	r1, r8
   8a702:	4650      	mov	r0, sl
   8a704:	f001 fdd0 	bl	8c2a8 <__mcmp>
   8a708:	2800      	cmp	r0, #0
   8a70a:	f6bf aec4 	bge.w	8a496 <_dtoa_r+0x6d6>
   8a70e:	4651      	mov	r1, sl
   8a710:	2300      	movs	r3, #0
   8a712:	220a      	movs	r2, #10
   8a714:	4620      	mov	r0, r4
   8a716:	f001 fba3 	bl	8be60 <__multadd>
   8a71a:	9b07      	ldr	r3, [sp, #28]
   8a71c:	4682      	mov	sl, r0
   8a71e:	1e5f      	subs	r7, r3, #1
   8a720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a722:	2b00      	cmp	r3, #0
   8a724:	f47f af4c 	bne.w	8a5c0 <_dtoa_r+0x800>
   8a728:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a72a:	2b00      	cmp	r3, #0
   8a72c:	f340 8262 	ble.w	8abf4 <_dtoa_r+0xe34>
   8a730:	930a      	str	r3, [sp, #40]	; 0x28
   8a732:	e6bb      	b.n	8a4ac <_dtoa_r+0x6ec>
   8a734:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8a736:	4651      	mov	r1, sl
   8a738:	4620      	mov	r0, r4
   8a73a:	f001 fcf5 	bl	8c128 <__pow5mult>
   8a73e:	4682      	mov	sl, r0
   8a740:	e66c      	b.n	8a41c <_dtoa_r+0x65c>
   8a742:	4bba      	ldr	r3, [pc, #744]	; (8aa2c <_dtoa_r+0xc6c>)
   8a744:	9303      	str	r3, [sp, #12]
   8a746:	3303      	adds	r3, #3
   8a748:	e419      	b.n	89f7e <_dtoa_r+0x1be>
   8a74a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a74e:	2900      	cmp	r1, #0
   8a750:	f47f ae71 	bne.w	8a436 <_dtoa_r+0x676>
   8a754:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a758:	2b00      	cmp	r3, #0
   8a75a:	f47f ae6c 	bne.w	8a436 <_dtoa_r+0x676>
   8a75e:	4bb4      	ldr	r3, [pc, #720]	; (8aa30 <_dtoa_r+0xc70>)
   8a760:	4013      	ands	r3, r2
   8a762:	2b00      	cmp	r3, #0
   8a764:	f000 822a 	beq.w	8abbc <_dtoa_r+0xdfc>
   8a768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a76a:	f04f 0901 	mov.w	r9, #1
   8a76e:	3301      	adds	r3, #1
   8a770:	930b      	str	r3, [sp, #44]	; 0x2c
   8a772:	9b06      	ldr	r3, [sp, #24]
   8a774:	3301      	adds	r3, #1
   8a776:	9306      	str	r3, [sp, #24]
   8a778:	e65f      	b.n	8a43a <_dtoa_r+0x67a>
   8a77a:	2301      	movs	r3, #1
   8a77c:	930c      	str	r3, [sp, #48]	; 0x30
   8a77e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a780:	9a07      	ldr	r2, [sp, #28]
   8a782:	4413      	add	r3, r2
   8a784:	9312      	str	r3, [sp, #72]	; 0x48
   8a786:	3301      	adds	r3, #1
   8a788:	2b01      	cmp	r3, #1
   8a78a:	461e      	mov	r6, r3
   8a78c:	bfb8      	it	lt
   8a78e:	2601      	movlt	r6, #1
   8a790:	930a      	str	r3, [sp, #40]	; 0x28
   8a792:	2100      	movs	r1, #0
   8a794:	2e17      	cmp	r6, #23
   8a796:	6461      	str	r1, [r4, #68]	; 0x44
   8a798:	f77f ac43 	ble.w	8a022 <_dtoa_r+0x262>
   8a79c:	2201      	movs	r2, #1
   8a79e:	2304      	movs	r3, #4
   8a7a0:	005b      	lsls	r3, r3, #1
   8a7a2:	f103 0014 	add.w	r0, r3, #20
   8a7a6:	42b0      	cmp	r0, r6
   8a7a8:	4611      	mov	r1, r2
   8a7aa:	f102 0201 	add.w	r2, r2, #1
   8a7ae:	d9f7      	bls.n	8a7a0 <_dtoa_r+0x9e0>
   8a7b0:	6461      	str	r1, [r4, #68]	; 0x44
   8a7b2:	e436      	b.n	8a022 <_dtoa_r+0x262>
   8a7b4:	2301      	movs	r3, #1
   8a7b6:	930c      	str	r3, [sp, #48]	; 0x30
   8a7b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a7ba:	2b00      	cmp	r3, #0
   8a7bc:	dd46      	ble.n	8a84c <_dtoa_r+0xa8c>
   8a7be:	461e      	mov	r6, r3
   8a7c0:	9312      	str	r3, [sp, #72]	; 0x48
   8a7c2:	930a      	str	r3, [sp, #40]	; 0x28
   8a7c4:	e7e5      	b.n	8a792 <_dtoa_r+0x9d2>
   8a7c6:	2300      	movs	r3, #0
   8a7c8:	930c      	str	r3, [sp, #48]	; 0x30
   8a7ca:	e7d8      	b.n	8a77e <_dtoa_r+0x9be>
   8a7cc:	2300      	movs	r3, #0
   8a7ce:	930c      	str	r3, [sp, #48]	; 0x30
   8a7d0:	e7f2      	b.n	8a7b8 <_dtoa_r+0x9f8>
   8a7d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a7d4:	9707      	str	r7, [sp, #28]
   8a7d6:	930a      	str	r3, [sp, #40]	; 0x28
   8a7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a7da:	2b00      	cmp	r3, #0
   8a7dc:	f47f ad40 	bne.w	8a260 <_dtoa_r+0x4a0>
   8a7e0:	4641      	mov	r1, r8
   8a7e2:	2205      	movs	r2, #5
   8a7e4:	4620      	mov	r0, r4
   8a7e6:	f001 fb3b 	bl	8be60 <__multadd>
   8a7ea:	4680      	mov	r8, r0
   8a7ec:	4650      	mov	r0, sl
   8a7ee:	4641      	mov	r1, r8
   8a7f0:	f001 fd5a 	bl	8c2a8 <__mcmp>
   8a7f4:	2800      	cmp	r0, #0
   8a7f6:	f77f ad33 	ble.w	8a260 <_dtoa_r+0x4a0>
   8a7fa:	9f03      	ldr	r7, [sp, #12]
   8a7fc:	2231      	movs	r2, #49	; 0x31
   8a7fe:	463b      	mov	r3, r7
   8a800:	9e07      	ldr	r6, [sp, #28]
   8a802:	f803 2b01 	strb.w	r2, [r3], #1
   8a806:	3601      	adds	r6, #1
   8a808:	9303      	str	r3, [sp, #12]
   8a80a:	4641      	mov	r1, r8
   8a80c:	4620      	mov	r0, r4
   8a80e:	f001 fb1d 	bl	8be4c <_Bfree>
   8a812:	1c73      	adds	r3, r6, #1
   8a814:	f8dd 900c 	ldr.w	r9, [sp, #12]
   8a818:	9307      	str	r3, [sp, #28]
   8a81a:	9703      	str	r7, [sp, #12]
   8a81c:	2d00      	cmp	r5, #0
   8a81e:	f47f ae90 	bne.w	8a542 <_dtoa_r+0x782>
   8a822:	e692      	b.n	8a54a <_dtoa_r+0x78a>
   8a824:	4629      	mov	r1, r5
   8a826:	4632      	mov	r2, r6
   8a828:	4620      	mov	r0, r4
   8a82a:	f001 fcc9 	bl	8c1c0 <__lshift>
   8a82e:	4605      	mov	r5, r0
   8a830:	e6d6      	b.n	8a5e0 <_dtoa_r+0x820>
   8a832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a834:	970d      	str	r7, [sp, #52]	; 0x34
   8a836:	1afb      	subs	r3, r7, r3
   8a838:	449b      	add	fp, r3
   8a83a:	2700      	movs	r7, #0
   8a83c:	e58c      	b.n	8a358 <_dtoa_r+0x598>
   8a83e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8a842:	f04f 0902 	mov.w	r9, #2
   8a846:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8a84a:	e417      	b.n	8a07c <_dtoa_r+0x2bc>
   8a84c:	2301      	movs	r3, #1
   8a84e:	9325      	str	r3, [sp, #148]	; 0x94
   8a850:	930a      	str	r3, [sp, #40]	; 0x28
   8a852:	f7ff bbe2 	b.w	8a01a <_dtoa_r+0x25a>
   8a856:	d103      	bne.n	8a860 <_dtoa_r+0xaa0>
   8a858:	9b04      	ldr	r3, [sp, #16]
   8a85a:	07db      	lsls	r3, r3, #31
   8a85c:	f53f ae53 	bmi.w	8a506 <_dtoa_r+0x746>
   8a860:	46d9      	mov	r9, fp
   8a862:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8a866:	2b30      	cmp	r3, #48	; 0x30
   8a868:	d0fa      	beq.n	8a860 <_dtoa_r+0xaa0>
   8a86a:	e65e      	b.n	8a52a <_dtoa_r+0x76a>
   8a86c:	4648      	mov	r0, r9
   8a86e:	f002 fd55 	bl	8d31c <__aeabi_i2d>
   8a872:	4632      	mov	r2, r6
   8a874:	463b      	mov	r3, r7
   8a876:	f002 fdbb 	bl	8d3f0 <__aeabi_dmul>
   8a87a:	2200      	movs	r2, #0
   8a87c:	4b6d      	ldr	r3, [pc, #436]	; (8aa34 <_dtoa_r+0xc74>)
   8a87e:	f002 fc01 	bl	8d084 <__adddf3>
   8a882:	4680      	mov	r8, r0
   8a884:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a888:	4630      	mov	r0, r6
   8a88a:	4639      	mov	r1, r7
   8a88c:	2200      	movs	r2, #0
   8a88e:	4b6a      	ldr	r3, [pc, #424]	; (8aa38 <_dtoa_r+0xc78>)
   8a890:	f002 fbf6 	bl	8d080 <__aeabi_dsub>
   8a894:	4642      	mov	r2, r8
   8a896:	464b      	mov	r3, r9
   8a898:	4606      	mov	r6, r0
   8a89a:	460f      	mov	r7, r1
   8a89c:	f003 f838 	bl	8d910 <__aeabi_dcmpgt>
   8a8a0:	2800      	cmp	r0, #0
   8a8a2:	f040 8187 	bne.w	8abb4 <_dtoa_r+0xdf4>
   8a8a6:	4642      	mov	r2, r8
   8a8a8:	4630      	mov	r0, r6
   8a8aa:	4639      	mov	r1, r7
   8a8ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   8a8b0:	f003 f810 	bl	8d8d4 <__aeabi_dcmplt>
   8a8b4:	2800      	cmp	r0, #0
   8a8b6:	f43f acaa 	beq.w	8a20e <_dtoa_r+0x44e>
   8a8ba:	f04f 0800 	mov.w	r8, #0
   8a8be:	4645      	mov	r5, r8
   8a8c0:	e4ce      	b.n	8a260 <_dtoa_r+0x4a0>
   8a8c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8a8c4:	2a00      	cmp	r2, #0
   8a8c6:	f000 80c3 	beq.w	8aa50 <_dtoa_r+0xc90>
   8a8ca:	9a06      	ldr	r2, [sp, #24]
   8a8cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8a8d0:	441a      	add	r2, r3
   8a8d2:	9206      	str	r2, [sp, #24]
   8a8d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a8d6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a8d8:	4616      	mov	r6, r2
   8a8da:	441a      	add	r2, r3
   8a8dc:	920b      	str	r2, [sp, #44]	; 0x2c
   8a8de:	e547      	b.n	8a370 <_dtoa_r+0x5b0>
   8a8e0:	2331      	movs	r3, #49	; 0x31
   8a8e2:	9a07      	ldr	r2, [sp, #28]
   8a8e4:	3201      	adds	r2, #1
   8a8e6:	9207      	str	r2, [sp, #28]
   8a8e8:	9a03      	ldr	r2, [sp, #12]
   8a8ea:	7013      	strb	r3, [r2, #0]
   8a8ec:	e61d      	b.n	8a52a <_dtoa_r+0x76a>
   8a8ee:	f000 814b 	beq.w	8ab88 <_dtoa_r+0xdc8>
   8a8f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a8f6:	9b07      	ldr	r3, [sp, #28]
   8a8f8:	425d      	negs	r5, r3
   8a8fa:	4b50      	ldr	r3, [pc, #320]	; (8aa3c <_dtoa_r+0xc7c>)
   8a8fc:	f005 020f 	and.w	r2, r5, #15
   8a900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a904:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a908:	f002 fd72 	bl	8d3f0 <__aeabi_dmul>
   8a90c:	112d      	asrs	r5, r5, #4
   8a90e:	4606      	mov	r6, r0
   8a910:	460f      	mov	r7, r1
   8a912:	f000 817d 	beq.w	8ac10 <_dtoa_r+0xe50>
   8a916:	2300      	movs	r3, #0
   8a918:	f04f 0902 	mov.w	r9, #2
   8a91c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8aa40 <_dtoa_r+0xc80>
   8a920:	07ea      	lsls	r2, r5, #31
   8a922:	d505      	bpl.n	8a930 <_dtoa_r+0xb70>
   8a924:	e9d8 2300 	ldrd	r2, r3, [r8]
   8a928:	f002 fd62 	bl	8d3f0 <__aeabi_dmul>
   8a92c:	2301      	movs	r3, #1
   8a92e:	4499      	add	r9, r3
   8a930:	106d      	asrs	r5, r5, #1
   8a932:	f108 0808 	add.w	r8, r8, #8
   8a936:	d1f3      	bne.n	8a920 <_dtoa_r+0xb60>
   8a938:	2b00      	cmp	r3, #0
   8a93a:	f43f abba 	beq.w	8a0b2 <_dtoa_r+0x2f2>
   8a93e:	4606      	mov	r6, r0
   8a940:	460f      	mov	r7, r1
   8a942:	f7ff bbb6 	b.w	8a0b2 <_dtoa_r+0x2f2>
   8a946:	900e      	str	r0, [sp, #56]	; 0x38
   8a948:	e520      	b.n	8a38c <_dtoa_r+0x5cc>
   8a94a:	9b04      	ldr	r3, [sp, #16]
   8a94c:	2b00      	cmp	r3, #0
   8a94e:	f47f ae2b 	bne.w	8a5a8 <_dtoa_r+0x7e8>
   8a952:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a956:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a95a:	2b00      	cmp	r3, #0
   8a95c:	f43f aeff 	beq.w	8a75e <_dtoa_r+0x99e>
   8a960:	e622      	b.n	8a5a8 <_dtoa_r+0x7e8>
   8a962:	2a00      	cmp	r2, #0
   8a964:	dd12      	ble.n	8a98c <_dtoa_r+0xbcc>
   8a966:	4651      	mov	r1, sl
   8a968:	2201      	movs	r2, #1
   8a96a:	4620      	mov	r0, r4
   8a96c:	9304      	str	r3, [sp, #16]
   8a96e:	f001 fc27 	bl	8c1c0 <__lshift>
   8a972:	4641      	mov	r1, r8
   8a974:	4682      	mov	sl, r0
   8a976:	f001 fc97 	bl	8c2a8 <__mcmp>
   8a97a:	2800      	cmp	r0, #0
   8a97c:	9b04      	ldr	r3, [sp, #16]
   8a97e:	f340 812c 	ble.w	8abda <_dtoa_r+0xe1a>
   8a982:	2b39      	cmp	r3, #57	; 0x39
   8a984:	f000 810c 	beq.w	8aba0 <_dtoa_r+0xde0>
   8a988:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8a98c:	46b1      	mov	r9, r6
   8a98e:	f809 3b01 	strb.w	r3, [r9], #1
   8a992:	9b07      	ldr	r3, [sp, #28]
   8a994:	462e      	mov	r6, r5
   8a996:	3301      	adds	r3, #1
   8a998:	463d      	mov	r5, r7
   8a99a:	9307      	str	r3, [sp, #28]
   8a99c:	e5c5      	b.n	8a52a <_dtoa_r+0x76a>
   8a99e:	4655      	mov	r5, sl
   8a9a0:	9c08      	ldr	r4, [sp, #32]
   8a9a2:	f8dd a018 	ldr.w	sl, [sp, #24]
   8a9a6:	4602      	mov	r2, r0
   8a9a8:	460b      	mov	r3, r1
   8a9aa:	f002 fb6b 	bl	8d084 <__adddf3>
   8a9ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a9b2:	4606      	mov	r6, r0
   8a9b4:	460f      	mov	r7, r1
   8a9b6:	f002 ffab 	bl	8d910 <__aeabi_dcmpgt>
   8a9ba:	b960      	cbnz	r0, 8a9d6 <_dtoa_r+0xc16>
   8a9bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a9c0:	4630      	mov	r0, r6
   8a9c2:	4639      	mov	r1, r7
   8a9c4:	f002 ff7c 	bl	8d8c0 <__aeabi_dcmpeq>
   8a9c8:	2800      	cmp	r0, #0
   8a9ca:	f43f aca3 	beq.w	8a314 <_dtoa_r+0x554>
   8a9ce:	f018 0f01 	tst.w	r8, #1
   8a9d2:	f43f ac9f 	beq.w	8a314 <_dtoa_r+0x554>
   8a9d6:	9a03      	ldr	r2, [sp, #12]
   8a9d8:	e40a      	b.n	8a1f0 <_dtoa_r+0x430>
   8a9da:	4620      	mov	r0, r4
   8a9dc:	6869      	ldr	r1, [r5, #4]
   8a9de:	f001 fa0f 	bl	8be00 <_Balloc>
   8a9e2:	4606      	mov	r6, r0
   8a9e4:	2800      	cmp	r0, #0
   8a9e6:	f000 8117 	beq.w	8ac18 <_dtoa_r+0xe58>
   8a9ea:	692b      	ldr	r3, [r5, #16]
   8a9ec:	f105 010c 	add.w	r1, r5, #12
   8a9f0:	3302      	adds	r3, #2
   8a9f2:	009a      	lsls	r2, r3, #2
   8a9f4:	300c      	adds	r0, #12
   8a9f6:	f7fc fb33 	bl	87060 <memcpy>
   8a9fa:	4631      	mov	r1, r6
   8a9fc:	2201      	movs	r2, #1
   8a9fe:	4620      	mov	r0, r4
   8aa00:	f001 fbde 	bl	8c1c0 <__lshift>
   8aa04:	4607      	mov	r7, r0
   8aa06:	e5f0      	b.n	8a5ea <_dtoa_r+0x82a>
   8aa08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8aa0c:	1a9e      	subs	r6, r3, r2
   8aa0e:	e4af      	b.n	8a370 <_dtoa_r+0x5b0>
   8aa10:	2b39      	cmp	r3, #57	; 0x39
   8aa12:	f000 80c5 	beq.w	8aba0 <_dtoa_r+0xde0>
   8aa16:	46b1      	mov	r9, r6
   8aa18:	3301      	adds	r3, #1
   8aa1a:	f809 3b01 	strb.w	r3, [r9], #1
   8aa1e:	9b07      	ldr	r3, [sp, #28]
   8aa20:	462e      	mov	r6, r5
   8aa22:	3301      	adds	r3, #1
   8aa24:	463d      	mov	r5, r7
   8aa26:	9307      	str	r3, [sp, #28]
   8aa28:	e57f      	b.n	8a52a <_dtoa_r+0x76a>
   8aa2a:	bf00      	nop
   8aa2c:	0008daf8 	.word	0x0008daf8
   8aa30:	7ff00000 	.word	0x7ff00000
   8aa34:	401c0000 	.word	0x401c0000
   8aa38:	40140000 	.word	0x40140000
   8aa3c:	0008dc50 	.word	0x0008dc50
   8aa40:	0008dc28 	.word	0x0008dc28
   8aa44:	9a07      	ldr	r2, [sp, #28]
   8aa46:	462e      	mov	r6, r5
   8aa48:	3201      	adds	r2, #1
   8aa4a:	463d      	mov	r5, r7
   8aa4c:	9207      	str	r2, [sp, #28]
   8aa4e:	e54d      	b.n	8a4ec <_dtoa_r+0x72c>
   8aa50:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8aa52:	9a06      	ldr	r2, [sp, #24]
   8aa54:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8aa56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8aa5a:	441a      	add	r2, r3
   8aa5c:	9206      	str	r2, [sp, #24]
   8aa5e:	460a      	mov	r2, r1
   8aa60:	441a      	add	r2, r3
   8aa62:	460e      	mov	r6, r1
   8aa64:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8aa66:	920b      	str	r2, [sp, #44]	; 0x2c
   8aa68:	e482      	b.n	8a370 <_dtoa_r+0x5b0>
   8aa6a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8aa6c:	497f      	ldr	r1, [pc, #508]	; (8ac6c <_dtoa_r+0xeac>)
   8aa6e:	4642      	mov	r2, r8
   8aa70:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8aa74:	464b      	mov	r3, r9
   8aa76:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8aa7a:	f002 fcb9 	bl	8d3f0 <__aeabi_dmul>
   8aa7e:	4602      	mov	r2, r0
   8aa80:	460b      	mov	r3, r1
   8aa82:	4630      	mov	r0, r6
   8aa84:	4639      	mov	r1, r7
   8aa86:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8aa8a:	f002 ff61 	bl	8d950 <__aeabi_d2iz>
   8aa8e:	4680      	mov	r8, r0
   8aa90:	f002 fc44 	bl	8d31c <__aeabi_i2d>
   8aa94:	460b      	mov	r3, r1
   8aa96:	4602      	mov	r2, r0
   8aa98:	4639      	mov	r1, r7
   8aa9a:	4630      	mov	r0, r6
   8aa9c:	f002 faf0 	bl	8d080 <__aeabi_dsub>
   8aaa0:	4606      	mov	r6, r0
   8aaa2:	9810      	ldr	r0, [sp, #64]	; 0x40
   8aaa4:	9d03      	ldr	r5, [sp, #12]
   8aaa6:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8aaaa:	2801      	cmp	r0, #1
   8aaac:	460f      	mov	r7, r1
   8aaae:	f805 3b01 	strb.w	r3, [r5], #1
   8aab2:	d01e      	beq.n	8aaf2 <_dtoa_r+0xd32>
   8aab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8aab6:	9a03      	ldr	r2, [sp, #12]
   8aab8:	4413      	add	r3, r2
   8aaba:	4698      	mov	r8, r3
   8aabc:	2200      	movs	r2, #0
   8aabe:	4b6c      	ldr	r3, [pc, #432]	; (8ac70 <_dtoa_r+0xeb0>)
   8aac0:	4630      	mov	r0, r6
   8aac2:	4639      	mov	r1, r7
   8aac4:	f002 fc94 	bl	8d3f0 <__aeabi_dmul>
   8aac8:	460f      	mov	r7, r1
   8aaca:	4606      	mov	r6, r0
   8aacc:	f002 ff40 	bl	8d950 <__aeabi_d2iz>
   8aad0:	4681      	mov	r9, r0
   8aad2:	f002 fc23 	bl	8d31c <__aeabi_i2d>
   8aad6:	4602      	mov	r2, r0
   8aad8:	460b      	mov	r3, r1
   8aada:	4630      	mov	r0, r6
   8aadc:	4639      	mov	r1, r7
   8aade:	f002 facf 	bl	8d080 <__aeabi_dsub>
   8aae2:	f109 0930 	add.w	r9, r9, #48	; 0x30
   8aae6:	f805 9b01 	strb.w	r9, [r5], #1
   8aaea:	4545      	cmp	r5, r8
   8aaec:	4606      	mov	r6, r0
   8aaee:	460f      	mov	r7, r1
   8aaf0:	d1e4      	bne.n	8aabc <_dtoa_r+0xcfc>
   8aaf2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   8aaf6:	2200      	movs	r2, #0
   8aaf8:	4b5e      	ldr	r3, [pc, #376]	; (8ac74 <_dtoa_r+0xeb4>)
   8aafa:	4640      	mov	r0, r8
   8aafc:	4649      	mov	r1, r9
   8aafe:	f002 fac1 	bl	8d084 <__adddf3>
   8ab02:	4632      	mov	r2, r6
   8ab04:	463b      	mov	r3, r7
   8ab06:	f002 fee5 	bl	8d8d4 <__aeabi_dcmplt>
   8ab0a:	2800      	cmp	r0, #0
   8ab0c:	d158      	bne.n	8abc0 <_dtoa_r+0xe00>
   8ab0e:	4642      	mov	r2, r8
   8ab10:	464b      	mov	r3, r9
   8ab12:	2000      	movs	r0, #0
   8ab14:	4957      	ldr	r1, [pc, #348]	; (8ac74 <_dtoa_r+0xeb4>)
   8ab16:	f002 fab3 	bl	8d080 <__aeabi_dsub>
   8ab1a:	4632      	mov	r2, r6
   8ab1c:	463b      	mov	r3, r7
   8ab1e:	f002 fef7 	bl	8d910 <__aeabi_dcmpgt>
   8ab22:	2800      	cmp	r0, #0
   8ab24:	f43f ab73 	beq.w	8a20e <_dtoa_r+0x44e>
   8ab28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8ab2c:	46a9      	mov	r9, r5
   8ab2e:	2b30      	cmp	r3, #48	; 0x30
   8ab30:	f105 35ff 	add.w	r5, r5, #4294967295
   8ab34:	d0f8      	beq.n	8ab28 <_dtoa_r+0xd68>
   8ab36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8ab38:	3301      	adds	r3, #1
   8ab3a:	9307      	str	r3, [sp, #28]
   8ab3c:	e505      	b.n	8a54a <_dtoa_r+0x78a>
   8ab3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ab40:	2b00      	cmp	r3, #0
   8ab42:	f43f ae93 	beq.w	8a86c <_dtoa_r+0xaac>
   8ab46:	9d12      	ldr	r5, [sp, #72]	; 0x48
   8ab48:	2d00      	cmp	r5, #0
   8ab4a:	f77f ab60 	ble.w	8a20e <_dtoa_r+0x44e>
   8ab4e:	2200      	movs	r2, #0
   8ab50:	4b47      	ldr	r3, [pc, #284]	; (8ac70 <_dtoa_r+0xeb0>)
   8ab52:	4630      	mov	r0, r6
   8ab54:	4639      	mov	r1, r7
   8ab56:	f002 fc4b 	bl	8d3f0 <__aeabi_dmul>
   8ab5a:	4606      	mov	r6, r0
   8ab5c:	460f      	mov	r7, r1
   8ab5e:	f109 0001 	add.w	r0, r9, #1
   8ab62:	f002 fbdb 	bl	8d31c <__aeabi_i2d>
   8ab66:	4632      	mov	r2, r6
   8ab68:	463b      	mov	r3, r7
   8ab6a:	f002 fc41 	bl	8d3f0 <__aeabi_dmul>
   8ab6e:	2200      	movs	r2, #0
   8ab70:	4b41      	ldr	r3, [pc, #260]	; (8ac78 <_dtoa_r+0xeb8>)
   8ab72:	f002 fa87 	bl	8d084 <__adddf3>
   8ab76:	9a07      	ldr	r2, [sp, #28]
   8ab78:	4680      	mov	r8, r0
   8ab7a:	3a01      	subs	r2, #1
   8ab7c:	9213      	str	r2, [sp, #76]	; 0x4c
   8ab7e:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8ab82:	9510      	str	r5, [sp, #64]	; 0x40
   8ab84:	f7ff bab6 	b.w	8a0f4 <_dtoa_r+0x334>
   8ab88:	f04f 0902 	mov.w	r9, #2
   8ab8c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   8ab90:	f7ff ba8f 	b.w	8a0b2 <_dtoa_r+0x2f2>
   8ab94:	9b07      	ldr	r3, [sp, #28]
   8ab96:	3301      	adds	r3, #1
   8ab98:	9307      	str	r3, [sp, #28]
   8ab9a:	2331      	movs	r3, #49	; 0x31
   8ab9c:	f7ff bb2f 	b.w	8a1fe <_dtoa_r+0x43e>
   8aba0:	46b3      	mov	fp, r6
   8aba2:	2339      	movs	r3, #57	; 0x39
   8aba4:	9a07      	ldr	r2, [sp, #28]
   8aba6:	462e      	mov	r6, r5
   8aba8:	3201      	adds	r2, #1
   8abaa:	463d      	mov	r5, r7
   8abac:	9207      	str	r2, [sp, #28]
   8abae:	f80b 3b01 	strb.w	r3, [fp], #1
   8abb2:	e4aa      	b.n	8a50a <_dtoa_r+0x74a>
   8abb4:	f04f 0800 	mov.w	r8, #0
   8abb8:	4645      	mov	r5, r8
   8abba:	e61e      	b.n	8a7fa <_dtoa_r+0xa3a>
   8abbc:	4699      	mov	r9, r3
   8abbe:	e43c      	b.n	8a43a <_dtoa_r+0x67a>
   8abc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8abc2:	9a03      	ldr	r2, [sp, #12]
   8abc4:	9307      	str	r3, [sp, #28]
   8abc6:	f7ff bb13 	b.w	8a1f0 <_dtoa_r+0x430>
   8abca:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8abce:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8abd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8abd2:	46a9      	mov	r9, r5
   8abd4:	3301      	adds	r3, #1
   8abd6:	9307      	str	r3, [sp, #28]
   8abd8:	e4b7      	b.n	8a54a <_dtoa_r+0x78a>
   8abda:	f47f aed7 	bne.w	8a98c <_dtoa_r+0xbcc>
   8abde:	07da      	lsls	r2, r3, #31
   8abe0:	f57f aed4 	bpl.w	8a98c <_dtoa_r+0xbcc>
   8abe4:	e6cd      	b.n	8a982 <_dtoa_r+0xbc2>
   8abe6:	2b39      	cmp	r3, #57	; 0x39
   8abe8:	d0da      	beq.n	8aba0 <_dtoa_r+0xde0>
   8abea:	f1b9 0f00 	cmp.w	r9, #0
   8abee:	f73f aecb 	bgt.w	8a988 <_dtoa_r+0xbc8>
   8abf2:	e6cb      	b.n	8a98c <_dtoa_r+0xbcc>
   8abf4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8abf6:	2b02      	cmp	r3, #2
   8abf8:	f73f adeb 	bgt.w	8a7d2 <_dtoa_r+0xa12>
   8abfc:	9707      	str	r7, [sp, #28]
   8abfe:	e570      	b.n	8a6e2 <_dtoa_r+0x922>
   8ac00:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8ac02:	2b02      	cmp	r3, #2
   8ac04:	f73f ade5 	bgt.w	8a7d2 <_dtoa_r+0xa12>
   8ac08:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8ac0a:	9707      	str	r7, [sp, #28]
   8ac0c:	930a      	str	r3, [sp, #40]	; 0x28
   8ac0e:	e4e4      	b.n	8a5da <_dtoa_r+0x81a>
   8ac10:	f04f 0902 	mov.w	r9, #2
   8ac14:	f7ff ba4d 	b.w	8a0b2 <_dtoa_r+0x2f2>
   8ac18:	4602      	mov	r2, r0
   8ac1a:	f240 21ea 	movw	r1, #746	; 0x2ea
   8ac1e:	4b17      	ldr	r3, [pc, #92]	; (8ac7c <_dtoa_r+0xebc>)
   8ac20:	4817      	ldr	r0, [pc, #92]	; (8ac80 <_dtoa_r+0xec0>)
   8ac22:	f002 f8a7 	bl	8cd74 <__assert_func>
   8ac26:	4b17      	ldr	r3, [pc, #92]	; (8ac84 <_dtoa_r+0xec4>)
   8ac28:	9303      	str	r3, [sp, #12]
   8ac2a:	f7ff b904 	b.w	89e36 <_dtoa_r+0x76>
   8ac2e:	2500      	movs	r5, #0
   8ac30:	4620      	mov	r0, r4
   8ac32:	4629      	mov	r1, r5
   8ac34:	6465      	str	r5, [r4, #68]	; 0x44
   8ac36:	f001 f8e3 	bl	8be00 <_Balloc>
   8ac3a:	9003      	str	r0, [sp, #12]
   8ac3c:	b958      	cbnz	r0, 8ac56 <_dtoa_r+0xe96>
   8ac3e:	2200      	movs	r2, #0
   8ac40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8ac44:	4b0d      	ldr	r3, [pc, #52]	; (8ac7c <_dtoa_r+0xebc>)
   8ac46:	480e      	ldr	r0, [pc, #56]	; (8ac80 <_dtoa_r+0xec0>)
   8ac48:	f002 f894 	bl	8cd74 <__assert_func>
   8ac4c:	f43f ac0d 	beq.w	8a46a <_dtoa_r+0x6aa>
   8ac50:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8ac54:	e48f      	b.n	8a576 <_dtoa_r+0x7b6>
   8ac56:	f04f 33ff 	mov.w	r3, #4294967295
   8ac5a:	9312      	str	r3, [sp, #72]	; 0x48
   8ac5c:	930a      	str	r3, [sp, #40]	; 0x28
   8ac5e:	2301      	movs	r3, #1
   8ac60:	9a03      	ldr	r2, [sp, #12]
   8ac62:	9525      	str	r5, [sp, #148]	; 0x94
   8ac64:	6422      	str	r2, [r4, #64]	; 0x40
   8ac66:	930c      	str	r3, [sp, #48]	; 0x30
   8ac68:	f7ff bad1 	b.w	8a20e <_dtoa_r+0x44e>
   8ac6c:	0008dc50 	.word	0x0008dc50
   8ac70:	40240000 	.word	0x40240000
   8ac74:	3fe00000 	.word	0x3fe00000
   8ac78:	401c0000 	.word	0x401c0000
   8ac7c:	0008db08 	.word	0x0008db08
   8ac80:	0008db1c 	.word	0x0008db1c
   8ac84:	0008dafc 	.word	0x0008dafc

0008ac88 <__sflush_r>:
   8ac88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8ac8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8ac90:	460d      	mov	r5, r1
   8ac92:	0711      	lsls	r1, r2, #28
   8ac94:	4680      	mov	r8, r0
   8ac96:	d447      	bmi.n	8ad28 <__sflush_r+0xa0>
   8ac98:	686b      	ldr	r3, [r5, #4]
   8ac9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8ac9e:	2b00      	cmp	r3, #0
   8aca0:	81aa      	strh	r2, [r5, #12]
   8aca2:	dd5e      	ble.n	8ad62 <__sflush_r+0xda>
   8aca4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8aca6:	2c00      	cmp	r4, #0
   8aca8:	d058      	beq.n	8ad5c <__sflush_r+0xd4>
   8acaa:	2300      	movs	r3, #0
   8acac:	f8d8 6000 	ldr.w	r6, [r8]
   8acb0:	f8c8 3000 	str.w	r3, [r8]
   8acb4:	b293      	uxth	r3, r2
   8acb6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8acba:	d156      	bne.n	8ad6a <__sflush_r+0xe2>
   8acbc:	2301      	movs	r3, #1
   8acbe:	4640      	mov	r0, r8
   8acc0:	69e9      	ldr	r1, [r5, #28]
   8acc2:	47a0      	blx	r4
   8acc4:	1c43      	adds	r3, r0, #1
   8acc6:	d067      	beq.n	8ad98 <__sflush_r+0x110>
   8acc8:	89ab      	ldrh	r3, [r5, #12]
   8acca:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8accc:	075f      	lsls	r7, r3, #29
   8acce:	d505      	bpl.n	8acdc <__sflush_r+0x54>
   8acd0:	686a      	ldr	r2, [r5, #4]
   8acd2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8acd4:	1a80      	subs	r0, r0, r2
   8acd6:	b10b      	cbz	r3, 8acdc <__sflush_r+0x54>
   8acd8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8acda:	1ac0      	subs	r0, r0, r3
   8acdc:	4602      	mov	r2, r0
   8acde:	69e9      	ldr	r1, [r5, #28]
   8ace0:	2300      	movs	r3, #0
   8ace2:	4640      	mov	r0, r8
   8ace4:	47a0      	blx	r4
   8ace6:	1c41      	adds	r1, r0, #1
   8ace8:	d141      	bne.n	8ad6e <__sflush_r+0xe6>
   8acea:	f8d8 3000 	ldr.w	r3, [r8]
   8acee:	2b00      	cmp	r3, #0
   8acf0:	d03d      	beq.n	8ad6e <__sflush_r+0xe6>
   8acf2:	2b1d      	cmp	r3, #29
   8acf4:	d001      	beq.n	8acfa <__sflush_r+0x72>
   8acf6:	2b16      	cmp	r3, #22
   8acf8:	d156      	bne.n	8ada8 <__sflush_r+0x120>
   8acfa:	2100      	movs	r1, #0
   8acfc:	692a      	ldr	r2, [r5, #16]
   8acfe:	89ab      	ldrh	r3, [r5, #12]
   8ad00:	e9c5 2100 	strd	r2, r1, [r5]
   8ad04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8ad08:	81ab      	strh	r3, [r5, #12]
   8ad0a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8ad0c:	f8c8 6000 	str.w	r6, [r8]
   8ad10:	b321      	cbz	r1, 8ad5c <__sflush_r+0xd4>
   8ad12:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8ad16:	4299      	cmp	r1, r3
   8ad18:	d002      	beq.n	8ad20 <__sflush_r+0x98>
   8ad1a:	4640      	mov	r0, r8
   8ad1c:	f000 f9cc 	bl	8b0b8 <_free_r>
   8ad20:	2000      	movs	r0, #0
   8ad22:	6328      	str	r0, [r5, #48]	; 0x30
   8ad24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ad28:	692f      	ldr	r7, [r5, #16]
   8ad2a:	b1bf      	cbz	r7, 8ad5c <__sflush_r+0xd4>
   8ad2c:	b293      	uxth	r3, r2
   8ad2e:	079a      	lsls	r2, r3, #30
   8ad30:	bf18      	it	ne
   8ad32:	2300      	movne	r3, #0
   8ad34:	682e      	ldr	r6, [r5, #0]
   8ad36:	bf08      	it	eq
   8ad38:	696b      	ldreq	r3, [r5, #20]
   8ad3a:	602f      	str	r7, [r5, #0]
   8ad3c:	1bf6      	subs	r6, r6, r7
   8ad3e:	60ab      	str	r3, [r5, #8]
   8ad40:	e00a      	b.n	8ad58 <__sflush_r+0xd0>
   8ad42:	4633      	mov	r3, r6
   8ad44:	463a      	mov	r2, r7
   8ad46:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8ad48:	4640      	mov	r0, r8
   8ad4a:	69e9      	ldr	r1, [r5, #28]
   8ad4c:	47a0      	blx	r4
   8ad4e:	1e04      	subs	r4, r0, #0
   8ad50:	eba6 0604 	sub.w	r6, r6, r4
   8ad54:	4427      	add	r7, r4
   8ad56:	dd17      	ble.n	8ad88 <__sflush_r+0x100>
   8ad58:	2e00      	cmp	r6, #0
   8ad5a:	dcf2      	bgt.n	8ad42 <__sflush_r+0xba>
   8ad5c:	2000      	movs	r0, #0
   8ad5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ad62:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8ad64:	2b00      	cmp	r3, #0
   8ad66:	dc9d      	bgt.n	8aca4 <__sflush_r+0x1c>
   8ad68:	e7f8      	b.n	8ad5c <__sflush_r+0xd4>
   8ad6a:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8ad6c:	e7ae      	b.n	8accc <__sflush_r+0x44>
   8ad6e:	2100      	movs	r1, #0
   8ad70:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8ad74:	692a      	ldr	r2, [r5, #16]
   8ad76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8ad7a:	81ab      	strh	r3, [r5, #12]
   8ad7c:	04db      	lsls	r3, r3, #19
   8ad7e:	e9c5 2100 	strd	r2, r1, [r5]
   8ad82:	d5c2      	bpl.n	8ad0a <__sflush_r+0x82>
   8ad84:	6528      	str	r0, [r5, #80]	; 0x50
   8ad86:	e7c0      	b.n	8ad0a <__sflush_r+0x82>
   8ad88:	89ab      	ldrh	r3, [r5, #12]
   8ad8a:	f04f 30ff 	mov.w	r0, #4294967295
   8ad8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8ad92:	81ab      	strh	r3, [r5, #12]
   8ad94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ad98:	f8d8 3000 	ldr.w	r3, [r8]
   8ad9c:	2b00      	cmp	r3, #0
   8ad9e:	d093      	beq.n	8acc8 <__sflush_r+0x40>
   8ada0:	2b1d      	cmp	r3, #29
   8ada2:	d006      	beq.n	8adb2 <__sflush_r+0x12a>
   8ada4:	2b16      	cmp	r3, #22
   8ada6:	d004      	beq.n	8adb2 <__sflush_r+0x12a>
   8ada8:	89ab      	ldrh	r3, [r5, #12]
   8adaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8adae:	81ab      	strh	r3, [r5, #12]
   8adb0:	e7d5      	b.n	8ad5e <__sflush_r+0xd6>
   8adb2:	f8c8 6000 	str.w	r6, [r8]
   8adb6:	e7d1      	b.n	8ad5c <__sflush_r+0xd4>

0008adb8 <_fflush_r>:
   8adb8:	b538      	push	{r3, r4, r5, lr}
   8adba:	460c      	mov	r4, r1
   8adbc:	4605      	mov	r5, r0
   8adbe:	b108      	cbz	r0, 8adc4 <_fflush_r+0xc>
   8adc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8adc2:	b1a3      	cbz	r3, 8adee <_fflush_r+0x36>
   8adc4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8adc8:	b1b8      	cbz	r0, 8adfa <_fflush_r+0x42>
   8adca:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8adcc:	07db      	lsls	r3, r3, #31
   8adce:	d401      	bmi.n	8add4 <_fflush_r+0x1c>
   8add0:	0581      	lsls	r1, r0, #22
   8add2:	d515      	bpl.n	8ae00 <_fflush_r+0x48>
   8add4:	4628      	mov	r0, r5
   8add6:	4621      	mov	r1, r4
   8add8:	f7ff ff56 	bl	8ac88 <__sflush_r>
   8addc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8adde:	4605      	mov	r5, r0
   8ade0:	07da      	lsls	r2, r3, #31
   8ade2:	d402      	bmi.n	8adea <_fflush_r+0x32>
   8ade4:	89a3      	ldrh	r3, [r4, #12]
   8ade6:	059b      	lsls	r3, r3, #22
   8ade8:	d50e      	bpl.n	8ae08 <_fflush_r+0x50>
   8adea:	4628      	mov	r0, r5
   8adec:	bd38      	pop	{r3, r4, r5, pc}
   8adee:	f000 f83f 	bl	8ae70 <__sinit>
   8adf2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8adf6:	2800      	cmp	r0, #0
   8adf8:	d1e7      	bne.n	8adca <_fflush_r+0x12>
   8adfa:	4605      	mov	r5, r0
   8adfc:	4628      	mov	r0, r5
   8adfe:	bd38      	pop	{r3, r4, r5, pc}
   8ae00:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ae02:	f000 fc07 	bl	8b614 <__retarget_lock_acquire_recursive>
   8ae06:	e7e5      	b.n	8add4 <_fflush_r+0x1c>
   8ae08:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ae0a:	f000 fc05 	bl	8b618 <__retarget_lock_release_recursive>
   8ae0e:	4628      	mov	r0, r5
   8ae10:	bd38      	pop	{r3, r4, r5, pc}
   8ae12:	bf00      	nop

0008ae14 <std>:
   8ae14:	2300      	movs	r3, #0
   8ae16:	b510      	push	{r4, lr}
   8ae18:	4604      	mov	r4, r0
   8ae1a:	e9c0 3300 	strd	r3, r3, [r0]
   8ae1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8ae22:	8181      	strh	r1, [r0, #12]
   8ae24:	81c2      	strh	r2, [r0, #14]
   8ae26:	4619      	mov	r1, r3
   8ae28:	6083      	str	r3, [r0, #8]
   8ae2a:	6643      	str	r3, [r0, #100]	; 0x64
   8ae2c:	6183      	str	r3, [r0, #24]
   8ae2e:	2208      	movs	r2, #8
   8ae30:	305c      	adds	r0, #92	; 0x5c
   8ae32:	f7fc f98b 	bl	8714c <memset>
   8ae36:	4807      	ldr	r0, [pc, #28]	; (8ae54 <std+0x40>)
   8ae38:	4907      	ldr	r1, [pc, #28]	; (8ae58 <std+0x44>)
   8ae3a:	4a08      	ldr	r2, [pc, #32]	; (8ae5c <std+0x48>)
   8ae3c:	4b08      	ldr	r3, [pc, #32]	; (8ae60 <std+0x4c>)
   8ae3e:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8ae42:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8ae46:	62e3      	str	r3, [r4, #44]	; 0x2c
   8ae48:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8ae4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8ae50:	f000 bbdc 	b.w	8b60c <__retarget_lock_init_recursive>
   8ae54:	0008c96d 	.word	0x0008c96d
   8ae58:	0008c991 	.word	0x0008c991
   8ae5c:	0008c9d1 	.word	0x0008c9d1
   8ae60:	0008c9f1 	.word	0x0008c9f1

0008ae64 <_cleanup_r>:
   8ae64:	4901      	ldr	r1, [pc, #4]	; (8ae6c <_cleanup_r+0x8>)
   8ae66:	f000 bba3 	b.w	8b5b0 <_fwalk_reent>
   8ae6a:	bf00      	nop
   8ae6c:	0008ce35 	.word	0x0008ce35

0008ae70 <__sinit>:
   8ae70:	b510      	push	{r4, lr}
   8ae72:	4604      	mov	r4, r0
   8ae74:	4813      	ldr	r0, [pc, #76]	; (8aec4 <__sinit+0x54>)
   8ae76:	f000 fbcd 	bl	8b614 <__retarget_lock_acquire_recursive>
   8ae7a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8ae7c:	b9ea      	cbnz	r2, 8aeba <__sinit+0x4a>
   8ae7e:	2003      	movs	r0, #3
   8ae80:	4911      	ldr	r1, [pc, #68]	; (8aec8 <__sinit+0x58>)
   8ae82:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8ae86:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8ae8a:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8ae8e:	63e1      	str	r1, [r4, #60]	; 0x3c
   8ae90:	6860      	ldr	r0, [r4, #4]
   8ae92:	2104      	movs	r1, #4
   8ae94:	f7ff ffbe 	bl	8ae14 <std>
   8ae98:	68a0      	ldr	r0, [r4, #8]
   8ae9a:	2201      	movs	r2, #1
   8ae9c:	2109      	movs	r1, #9
   8ae9e:	f7ff ffb9 	bl	8ae14 <std>
   8aea2:	68e0      	ldr	r0, [r4, #12]
   8aea4:	2202      	movs	r2, #2
   8aea6:	2112      	movs	r1, #18
   8aea8:	f7ff ffb4 	bl	8ae14 <std>
   8aeac:	2301      	movs	r3, #1
   8aeae:	4805      	ldr	r0, [pc, #20]	; (8aec4 <__sinit+0x54>)
   8aeb0:	63a3      	str	r3, [r4, #56]	; 0x38
   8aeb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8aeb6:	f000 bbaf 	b.w	8b618 <__retarget_lock_release_recursive>
   8aeba:	4802      	ldr	r0, [pc, #8]	; (8aec4 <__sinit+0x54>)
   8aebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8aec0:	f000 bbaa 	b.w	8b618 <__retarget_lock_release_recursive>
   8aec4:	20001854 	.word	0x20001854
   8aec8:	0008ae65 	.word	0x0008ae65

0008aecc <__sfp_lock_acquire>:
   8aecc:	4801      	ldr	r0, [pc, #4]	; (8aed4 <__sfp_lock_acquire+0x8>)
   8aece:	f000 bba1 	b.w	8b614 <__retarget_lock_acquire_recursive>
   8aed2:	bf00      	nop
   8aed4:	20001868 	.word	0x20001868

0008aed8 <__sfp_lock_release>:
   8aed8:	4801      	ldr	r0, [pc, #4]	; (8aee0 <__sfp_lock_release+0x8>)
   8aeda:	f000 bb9d 	b.w	8b618 <__retarget_lock_release_recursive>
   8aede:	bf00      	nop
   8aee0:	20001868 	.word	0x20001868

0008aee4 <__libc_fini_array>:
   8aee4:	b538      	push	{r3, r4, r5, lr}
   8aee6:	4b08      	ldr	r3, [pc, #32]	; (8af08 <__libc_fini_array+0x24>)
   8aee8:	4d08      	ldr	r5, [pc, #32]	; (8af0c <__libc_fini_array+0x28>)
   8aeea:	1b5b      	subs	r3, r3, r5
   8aeec:	109c      	asrs	r4, r3, #2
   8aeee:	d007      	beq.n	8af00 <__libc_fini_array+0x1c>
   8aef0:	3b04      	subs	r3, #4
   8aef2:	441d      	add	r5, r3
   8aef4:	3c01      	subs	r4, #1
   8aef6:	f855 3904 	ldr.w	r3, [r5], #-4
   8aefa:	4798      	blx	r3
   8aefc:	2c00      	cmp	r4, #0
   8aefe:	d1f9      	bne.n	8aef4 <__libc_fini_array+0x10>
   8af00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8af04:	f002 bfba 	b.w	8de7c <_fini>
   8af08:	0008de8c 	.word	0x0008de8c
   8af0c:	0008de88 	.word	0x0008de88

0008af10 <__fputwc>:
   8af10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8af14:	b083      	sub	sp, #12
   8af16:	4607      	mov	r7, r0
   8af18:	4688      	mov	r8, r1
   8af1a:	4614      	mov	r4, r2
   8af1c:	f000 fb6c 	bl	8b5f8 <__locale_mb_cur_max>
   8af20:	2801      	cmp	r0, #1
   8af22:	d103      	bne.n	8af2c <__fputwc+0x1c>
   8af24:	f108 33ff 	add.w	r3, r8, #4294967295
   8af28:	2bfe      	cmp	r3, #254	; 0xfe
   8af2a:	d933      	bls.n	8af94 <__fputwc+0x84>
   8af2c:	4642      	mov	r2, r8
   8af2e:	4638      	mov	r0, r7
   8af30:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8af34:	a901      	add	r1, sp, #4
   8af36:	f001 fe95 	bl	8cc64 <_wcrtomb_r>
   8af3a:	1c42      	adds	r2, r0, #1
   8af3c:	4606      	mov	r6, r0
   8af3e:	d02f      	beq.n	8afa0 <__fputwc+0x90>
   8af40:	b318      	cbz	r0, 8af8a <__fputwc+0x7a>
   8af42:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8af46:	2500      	movs	r5, #0
   8af48:	f10d 0904 	add.w	r9, sp, #4
   8af4c:	e008      	b.n	8af60 <__fputwc+0x50>
   8af4e:	6823      	ldr	r3, [r4, #0]
   8af50:	1c5a      	adds	r2, r3, #1
   8af52:	6022      	str	r2, [r4, #0]
   8af54:	7019      	strb	r1, [r3, #0]
   8af56:	3501      	adds	r5, #1
   8af58:	42b5      	cmp	r5, r6
   8af5a:	d216      	bcs.n	8af8a <__fputwc+0x7a>
   8af5c:	f815 1009 	ldrb.w	r1, [r5, r9]
   8af60:	68a3      	ldr	r3, [r4, #8]
   8af62:	3b01      	subs	r3, #1
   8af64:	2b00      	cmp	r3, #0
   8af66:	60a3      	str	r3, [r4, #8]
   8af68:	daf1      	bge.n	8af4e <__fputwc+0x3e>
   8af6a:	69a2      	ldr	r2, [r4, #24]
   8af6c:	4293      	cmp	r3, r2
   8af6e:	db01      	blt.n	8af74 <__fputwc+0x64>
   8af70:	290a      	cmp	r1, #10
   8af72:	d1ec      	bne.n	8af4e <__fputwc+0x3e>
   8af74:	4622      	mov	r2, r4
   8af76:	4638      	mov	r0, r7
   8af78:	f001 fe1c 	bl	8cbb4 <__swbuf_r>
   8af7c:	1c43      	adds	r3, r0, #1
   8af7e:	d1ea      	bne.n	8af56 <__fputwc+0x46>
   8af80:	4606      	mov	r6, r0
   8af82:	4630      	mov	r0, r6
   8af84:	b003      	add	sp, #12
   8af86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8af8a:	4646      	mov	r6, r8
   8af8c:	4630      	mov	r0, r6
   8af8e:	b003      	add	sp, #12
   8af90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8af94:	fa5f f188 	uxtb.w	r1, r8
   8af98:	4606      	mov	r6, r0
   8af9a:	f88d 1004 	strb.w	r1, [sp, #4]
   8af9e:	e7d2      	b.n	8af46 <__fputwc+0x36>
   8afa0:	4630      	mov	r0, r6
   8afa2:	89a3      	ldrh	r3, [r4, #12]
   8afa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8afa8:	81a3      	strh	r3, [r4, #12]
   8afaa:	b003      	add	sp, #12
   8afac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008afb0 <_fputwc_r>:
   8afb0:	b530      	push	{r4, r5, lr}
   8afb2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8afb4:	4614      	mov	r4, r2
   8afb6:	f013 0f01 	tst.w	r3, #1
   8afba:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8afbe:	4605      	mov	r5, r0
   8afc0:	b083      	sub	sp, #12
   8afc2:	b29a      	uxth	r2, r3
   8afc4:	d101      	bne.n	8afca <_fputwc_r+0x1a>
   8afc6:	0598      	lsls	r0, r3, #22
   8afc8:	d51c      	bpl.n	8b004 <_fputwc_r+0x54>
   8afca:	0490      	lsls	r0, r2, #18
   8afcc:	d406      	bmi.n	8afdc <_fputwc_r+0x2c>
   8afce:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8afd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8afd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8afd8:	81a3      	strh	r3, [r4, #12]
   8afda:	6662      	str	r2, [r4, #100]	; 0x64
   8afdc:	4628      	mov	r0, r5
   8afde:	4622      	mov	r2, r4
   8afe0:	f7ff ff96 	bl	8af10 <__fputwc>
   8afe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8afe6:	4605      	mov	r5, r0
   8afe8:	07da      	lsls	r2, r3, #31
   8afea:	d402      	bmi.n	8aff2 <_fputwc_r+0x42>
   8afec:	89a3      	ldrh	r3, [r4, #12]
   8afee:	059b      	lsls	r3, r3, #22
   8aff0:	d502      	bpl.n	8aff8 <_fputwc_r+0x48>
   8aff2:	4628      	mov	r0, r5
   8aff4:	b003      	add	sp, #12
   8aff6:	bd30      	pop	{r4, r5, pc}
   8aff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8affa:	f000 fb0d 	bl	8b618 <__retarget_lock_release_recursive>
   8affe:	4628      	mov	r0, r5
   8b000:	b003      	add	sp, #12
   8b002:	bd30      	pop	{r4, r5, pc}
   8b004:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b006:	9101      	str	r1, [sp, #4]
   8b008:	f000 fb04 	bl	8b614 <__retarget_lock_acquire_recursive>
   8b00c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b010:	9901      	ldr	r1, [sp, #4]
   8b012:	b29a      	uxth	r2, r3
   8b014:	e7d9      	b.n	8afca <_fputwc_r+0x1a>
   8b016:	bf00      	nop

0008b018 <_malloc_trim_r>:
   8b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b01a:	460c      	mov	r4, r1
   8b01c:	4f23      	ldr	r7, [pc, #140]	; (8b0ac <_malloc_trim_r+0x94>)
   8b01e:	4606      	mov	r6, r0
   8b020:	f000 fee2 	bl	8bde8 <__malloc_lock>
   8b024:	68bb      	ldr	r3, [r7, #8]
   8b026:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8b02a:	685d      	ldr	r5, [r3, #4]
   8b02c:	310f      	adds	r1, #15
   8b02e:	f025 0503 	bic.w	r5, r5, #3
   8b032:	194b      	adds	r3, r1, r5
   8b034:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8b038:	f023 030f 	bic.w	r3, r3, #15
   8b03c:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8b040:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8b044:	db07      	blt.n	8b056 <_malloc_trim_r+0x3e>
   8b046:	2100      	movs	r1, #0
   8b048:	4630      	mov	r0, r6
   8b04a:	f001 fc7d 	bl	8c948 <_sbrk_r>
   8b04e:	68bb      	ldr	r3, [r7, #8]
   8b050:	442b      	add	r3, r5
   8b052:	4298      	cmp	r0, r3
   8b054:	d004      	beq.n	8b060 <_malloc_trim_r+0x48>
   8b056:	4630      	mov	r0, r6
   8b058:	f000 fecc 	bl	8bdf4 <__malloc_unlock>
   8b05c:	2000      	movs	r0, #0
   8b05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b060:	4630      	mov	r0, r6
   8b062:	4261      	negs	r1, r4
   8b064:	f001 fc70 	bl	8c948 <_sbrk_r>
   8b068:	3001      	adds	r0, #1
   8b06a:	d00d      	beq.n	8b088 <_malloc_trim_r+0x70>
   8b06c:	4a10      	ldr	r2, [pc, #64]	; (8b0b0 <_malloc_trim_r+0x98>)
   8b06e:	68b9      	ldr	r1, [r7, #8]
   8b070:	6813      	ldr	r3, [r2, #0]
   8b072:	1b2d      	subs	r5, r5, r4
   8b074:	f045 0501 	orr.w	r5, r5, #1
   8b078:	4630      	mov	r0, r6
   8b07a:	1b1b      	subs	r3, r3, r4
   8b07c:	604d      	str	r5, [r1, #4]
   8b07e:	6013      	str	r3, [r2, #0]
   8b080:	f000 feb8 	bl	8bdf4 <__malloc_unlock>
   8b084:	2001      	movs	r0, #1
   8b086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b088:	2100      	movs	r1, #0
   8b08a:	4630      	mov	r0, r6
   8b08c:	f001 fc5c 	bl	8c948 <_sbrk_r>
   8b090:	68ba      	ldr	r2, [r7, #8]
   8b092:	1a83      	subs	r3, r0, r2
   8b094:	2b0f      	cmp	r3, #15
   8b096:	ddde      	ble.n	8b056 <_malloc_trim_r+0x3e>
   8b098:	4906      	ldr	r1, [pc, #24]	; (8b0b4 <_malloc_trim_r+0x9c>)
   8b09a:	f043 0301 	orr.w	r3, r3, #1
   8b09e:	680c      	ldr	r4, [r1, #0]
   8b0a0:	4903      	ldr	r1, [pc, #12]	; (8b0b0 <_malloc_trim_r+0x98>)
   8b0a2:	1b00      	subs	r0, r0, r4
   8b0a4:	6053      	str	r3, [r2, #4]
   8b0a6:	6008      	str	r0, [r1, #0]
   8b0a8:	e7d5      	b.n	8b056 <_malloc_trim_r+0x3e>
   8b0aa:	bf00      	nop
   8b0ac:	200009e0 	.word	0x200009e0
   8b0b0:	20001388 	.word	0x20001388
   8b0b4:	20000de8 	.word	0x20000de8

0008b0b8 <_free_r>:
   8b0b8:	2900      	cmp	r1, #0
   8b0ba:	d05f      	beq.n	8b17c <_free_r+0xc4>
   8b0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b0be:	460c      	mov	r4, r1
   8b0c0:	4606      	mov	r6, r0
   8b0c2:	f000 fe91 	bl	8bde8 <__malloc_lock>
   8b0c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b0ca:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8b2c0 <_free_r+0x208>
   8b0ce:	f1a4 0008 	sub.w	r0, r4, #8
   8b0d2:	f023 0101 	bic.w	r1, r3, #1
   8b0d6:	1842      	adds	r2, r0, r1
   8b0d8:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8b0dc:	6855      	ldr	r5, [r2, #4]
   8b0de:	4297      	cmp	r7, r2
   8b0e0:	f025 0503 	bic.w	r5, r5, #3
   8b0e4:	f000 8089 	beq.w	8b1fa <_free_r+0x142>
   8b0e8:	07df      	lsls	r7, r3, #31
   8b0ea:	6055      	str	r5, [r2, #4]
   8b0ec:	d434      	bmi.n	8b158 <_free_r+0xa0>
   8b0ee:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8b0f2:	f10c 0408 	add.w	r4, ip, #8
   8b0f6:	1bc0      	subs	r0, r0, r7
   8b0f8:	6883      	ldr	r3, [r0, #8]
   8b0fa:	4439      	add	r1, r7
   8b0fc:	42a3      	cmp	r3, r4
   8b0fe:	d06a      	beq.n	8b1d6 <_free_r+0x11e>
   8b100:	1957      	adds	r7, r2, r5
   8b102:	687f      	ldr	r7, [r7, #4]
   8b104:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8b108:	f8c3 e00c 	str.w	lr, [r3, #12]
   8b10c:	f8ce 3008 	str.w	r3, [lr, #8]
   8b110:	07fb      	lsls	r3, r7, #31
   8b112:	f140 8097 	bpl.w	8b244 <_free_r+0x18c>
   8b116:	f041 0301 	orr.w	r3, r1, #1
   8b11a:	6043      	str	r3, [r0, #4]
   8b11c:	6011      	str	r1, [r2, #0]
   8b11e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8b122:	d234      	bcs.n	8b18e <_free_r+0xd6>
   8b124:	2201      	movs	r2, #1
   8b126:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8b12a:	08cb      	lsrs	r3, r1, #3
   8b12c:	0949      	lsrs	r1, r1, #5
   8b12e:	4413      	add	r3, r2
   8b130:	fa02 f101 	lsl.w	r1, r2, r1
   8b134:	4321      	orrs	r1, r4
   8b136:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8b13a:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8b13e:	3a08      	subs	r2, #8
   8b140:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8b144:	f8cc 1004 	str.w	r1, [ip, #4]
   8b148:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8b14c:	60e0      	str	r0, [r4, #12]
   8b14e:	4630      	mov	r0, r6
   8b150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8b154:	f000 be4e 	b.w	8bdf4 <__malloc_unlock>
   8b158:	1953      	adds	r3, r2, r5
   8b15a:	685b      	ldr	r3, [r3, #4]
   8b15c:	07df      	lsls	r7, r3, #31
   8b15e:	d40e      	bmi.n	8b17e <_free_r+0xc6>
   8b160:	4429      	add	r1, r5
   8b162:	f10c 0408 	add.w	r4, ip, #8
   8b166:	6893      	ldr	r3, [r2, #8]
   8b168:	42a3      	cmp	r3, r4
   8b16a:	d073      	beq.n	8b254 <_free_r+0x19c>
   8b16c:	68d4      	ldr	r4, [r2, #12]
   8b16e:	f041 0201 	orr.w	r2, r1, #1
   8b172:	60dc      	str	r4, [r3, #12]
   8b174:	60a3      	str	r3, [r4, #8]
   8b176:	6042      	str	r2, [r0, #4]
   8b178:	5041      	str	r1, [r0, r1]
   8b17a:	e7d0      	b.n	8b11e <_free_r+0x66>
   8b17c:	4770      	bx	lr
   8b17e:	f041 0301 	orr.w	r3, r1, #1
   8b182:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8b186:	f844 3c04 	str.w	r3, [r4, #-4]
   8b18a:	6011      	str	r1, [r2, #0]
   8b18c:	d3ca      	bcc.n	8b124 <_free_r+0x6c>
   8b18e:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8b192:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8b196:	d24a      	bcs.n	8b22e <_free_r+0x176>
   8b198:	098b      	lsrs	r3, r1, #6
   8b19a:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8b19e:	00ed      	lsls	r5, r5, #3
   8b1a0:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8b1a4:	f85c 3005 	ldr.w	r3, [ip, r5]
   8b1a8:	eb0c 0405 	add.w	r4, ip, r5
   8b1ac:	3c08      	subs	r4, #8
   8b1ae:	429c      	cmp	r4, r3
   8b1b0:	d059      	beq.n	8b266 <_free_r+0x1ae>
   8b1b2:	685a      	ldr	r2, [r3, #4]
   8b1b4:	f022 0203 	bic.w	r2, r2, #3
   8b1b8:	428a      	cmp	r2, r1
   8b1ba:	d902      	bls.n	8b1c2 <_free_r+0x10a>
   8b1bc:	689b      	ldr	r3, [r3, #8]
   8b1be:	429c      	cmp	r4, r3
   8b1c0:	d1f7      	bne.n	8b1b2 <_free_r+0xfa>
   8b1c2:	68dc      	ldr	r4, [r3, #12]
   8b1c4:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8b1c8:	60a0      	str	r0, [r4, #8]
   8b1ca:	60d8      	str	r0, [r3, #12]
   8b1cc:	4630      	mov	r0, r6
   8b1ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8b1d2:	f000 be0f 	b.w	8bdf4 <__malloc_unlock>
   8b1d6:	1953      	adds	r3, r2, r5
   8b1d8:	685b      	ldr	r3, [r3, #4]
   8b1da:	07db      	lsls	r3, r3, #31
   8b1dc:	d466      	bmi.n	8b2ac <_free_r+0x1f4>
   8b1de:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8b1e2:	4429      	add	r1, r5
   8b1e4:	f041 0401 	orr.w	r4, r1, #1
   8b1e8:	60d3      	str	r3, [r2, #12]
   8b1ea:	609a      	str	r2, [r3, #8]
   8b1ec:	6044      	str	r4, [r0, #4]
   8b1ee:	5041      	str	r1, [r0, r1]
   8b1f0:	4630      	mov	r0, r6
   8b1f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8b1f6:	f000 bdfd 	b.w	8bdf4 <__malloc_unlock>
   8b1fa:	07db      	lsls	r3, r3, #31
   8b1fc:	4429      	add	r1, r5
   8b1fe:	d407      	bmi.n	8b210 <_free_r+0x158>
   8b200:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8b204:	1b00      	subs	r0, r0, r4
   8b206:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8b20a:	4421      	add	r1, r4
   8b20c:	60d3      	str	r3, [r2, #12]
   8b20e:	609a      	str	r2, [r3, #8]
   8b210:	4b29      	ldr	r3, [pc, #164]	; (8b2b8 <_free_r+0x200>)
   8b212:	f041 0201 	orr.w	r2, r1, #1
   8b216:	681b      	ldr	r3, [r3, #0]
   8b218:	6042      	str	r2, [r0, #4]
   8b21a:	428b      	cmp	r3, r1
   8b21c:	f8cc 0008 	str.w	r0, [ip, #8]
   8b220:	d895      	bhi.n	8b14e <_free_r+0x96>
   8b222:	4b26      	ldr	r3, [pc, #152]	; (8b2bc <_free_r+0x204>)
   8b224:	4630      	mov	r0, r6
   8b226:	6819      	ldr	r1, [r3, #0]
   8b228:	f7ff fef6 	bl	8b018 <_malloc_trim_r>
   8b22c:	e78f      	b.n	8b14e <_free_r+0x96>
   8b22e:	2b14      	cmp	r3, #20
   8b230:	d90a      	bls.n	8b248 <_free_r+0x190>
   8b232:	2b54      	cmp	r3, #84	; 0x54
   8b234:	d821      	bhi.n	8b27a <_free_r+0x1c2>
   8b236:	0b0b      	lsrs	r3, r1, #12
   8b238:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8b23c:	00ed      	lsls	r5, r5, #3
   8b23e:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8b242:	e7af      	b.n	8b1a4 <_free_r+0xec>
   8b244:	4429      	add	r1, r5
   8b246:	e78e      	b.n	8b166 <_free_r+0xae>
   8b248:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8b24c:	00ed      	lsls	r5, r5, #3
   8b24e:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8b252:	e7a7      	b.n	8b1a4 <_free_r+0xec>
   8b254:	f041 0301 	orr.w	r3, r1, #1
   8b258:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8b25c:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8b260:	6043      	str	r3, [r0, #4]
   8b262:	5041      	str	r1, [r0, r1]
   8b264:	e773      	b.n	8b14e <_free_r+0x96>
   8b266:	2501      	movs	r5, #1
   8b268:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8b26c:	1092      	asrs	r2, r2, #2
   8b26e:	fa05 f202 	lsl.w	r2, r5, r2
   8b272:	430a      	orrs	r2, r1
   8b274:	f8cc 2004 	str.w	r2, [ip, #4]
   8b278:	e7a4      	b.n	8b1c4 <_free_r+0x10c>
   8b27a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b27e:	d806      	bhi.n	8b28e <_free_r+0x1d6>
   8b280:	0bcb      	lsrs	r3, r1, #15
   8b282:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8b286:	00ed      	lsls	r5, r5, #3
   8b288:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8b28c:	e78a      	b.n	8b1a4 <_free_r+0xec>
   8b28e:	f240 5254 	movw	r2, #1364	; 0x554
   8b292:	4293      	cmp	r3, r2
   8b294:	d806      	bhi.n	8b2a4 <_free_r+0x1ec>
   8b296:	0c8b      	lsrs	r3, r1, #18
   8b298:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8b29c:	00ed      	lsls	r5, r5, #3
   8b29e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8b2a2:	e77f      	b.n	8b1a4 <_free_r+0xec>
   8b2a4:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8b2a8:	227e      	movs	r2, #126	; 0x7e
   8b2aa:	e77b      	b.n	8b1a4 <_free_r+0xec>
   8b2ac:	f041 0301 	orr.w	r3, r1, #1
   8b2b0:	6043      	str	r3, [r0, #4]
   8b2b2:	6011      	str	r1, [r2, #0]
   8b2b4:	e74b      	b.n	8b14e <_free_r+0x96>
   8b2b6:	bf00      	nop
   8b2b8:	20000dec 	.word	0x20000dec
   8b2bc:	200013b8 	.word	0x200013b8
   8b2c0:	200009e0 	.word	0x200009e0

0008b2c4 <__sfvwrite_r>:
   8b2c4:	6893      	ldr	r3, [r2, #8]
   8b2c6:	2b00      	cmp	r3, #0
   8b2c8:	f000 80bd 	beq.w	8b446 <__sfvwrite_r+0x182>
   8b2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b2d0:	4690      	mov	r8, r2
   8b2d2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8b2d6:	460c      	mov	r4, r1
   8b2d8:	0711      	lsls	r1, r2, #28
   8b2da:	4681      	mov	r9, r0
   8b2dc:	b083      	sub	sp, #12
   8b2de:	b293      	uxth	r3, r2
   8b2e0:	d527      	bpl.n	8b332 <__sfvwrite_r+0x6e>
   8b2e2:	6922      	ldr	r2, [r4, #16]
   8b2e4:	b32a      	cbz	r2, 8b332 <__sfvwrite_r+0x6e>
   8b2e6:	f013 0702 	ands.w	r7, r3, #2
   8b2ea:	f8d8 5000 	ldr.w	r5, [r8]
   8b2ee:	d02f      	beq.n	8b350 <__sfvwrite_r+0x8c>
   8b2f0:	f04f 0b00 	mov.w	fp, #0
   8b2f4:	465f      	mov	r7, fp
   8b2f6:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8b5ac <__sfvwrite_r+0x2e8>
   8b2fa:	2f00      	cmp	r7, #0
   8b2fc:	f000 8089 	beq.w	8b412 <__sfvwrite_r+0x14e>
   8b300:	4557      	cmp	r7, sl
   8b302:	463b      	mov	r3, r7
   8b304:	465a      	mov	r2, fp
   8b306:	bf28      	it	cs
   8b308:	4653      	movcs	r3, sl
   8b30a:	4648      	mov	r0, r9
   8b30c:	69e1      	ldr	r1, [r4, #28]
   8b30e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8b310:	47b0      	blx	r6
   8b312:	2800      	cmp	r0, #0
   8b314:	f340 808d 	ble.w	8b432 <__sfvwrite_r+0x16e>
   8b318:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8b31c:	4483      	add	fp, r0
   8b31e:	1a1b      	subs	r3, r3, r0
   8b320:	1a3f      	subs	r7, r7, r0
   8b322:	f8c8 3008 	str.w	r3, [r8, #8]
   8b326:	2b00      	cmp	r3, #0
   8b328:	d1e7      	bne.n	8b2fa <__sfvwrite_r+0x36>
   8b32a:	2000      	movs	r0, #0
   8b32c:	b003      	add	sp, #12
   8b32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b332:	4621      	mov	r1, r4
   8b334:	4648      	mov	r0, r9
   8b336:	f7fe fc39 	bl	89bac <__swsetup_r>
   8b33a:	2800      	cmp	r0, #0
   8b33c:	f040 8132 	bne.w	8b5a4 <__sfvwrite_r+0x2e0>
   8b340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8b344:	f8d8 5000 	ldr.w	r5, [r8]
   8b348:	b293      	uxth	r3, r2
   8b34a:	f013 0702 	ands.w	r7, r3, #2
   8b34e:	d1cf      	bne.n	8b2f0 <__sfvwrite_r+0x2c>
   8b350:	f013 0a01 	ands.w	sl, r3, #1
   8b354:	d179      	bne.n	8b44a <__sfvwrite_r+0x186>
   8b356:	4656      	mov	r6, sl
   8b358:	2e00      	cmp	r6, #0
   8b35a:	d056      	beq.n	8b40a <__sfvwrite_r+0x146>
   8b35c:	059a      	lsls	r2, r3, #22
   8b35e:	68a7      	ldr	r7, [r4, #8]
   8b360:	f140 80bd 	bpl.w	8b4de <__sfvwrite_r+0x21a>
   8b364:	42b7      	cmp	r7, r6
   8b366:	46bb      	mov	fp, r7
   8b368:	f200 80d2 	bhi.w	8b510 <__sfvwrite_r+0x24c>
   8b36c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8b370:	f000 80d0 	beq.w	8b514 <__sfvwrite_r+0x250>
   8b374:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8b378:	6822      	ldr	r2, [r4, #0]
   8b37a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8b37e:	eba2 0b01 	sub.w	fp, r2, r1
   8b382:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8b386:	f10b 0001 	add.w	r0, fp, #1
   8b38a:	107f      	asrs	r7, r7, #1
   8b38c:	4430      	add	r0, r6
   8b38e:	42b8      	cmp	r0, r7
   8b390:	463a      	mov	r2, r7
   8b392:	bf84      	itt	hi
   8b394:	4607      	movhi	r7, r0
   8b396:	463a      	movhi	r2, r7
   8b398:	055b      	lsls	r3, r3, #21
   8b39a:	f140 80e7 	bpl.w	8b56c <__sfvwrite_r+0x2a8>
   8b39e:	4611      	mov	r1, r2
   8b3a0:	4648      	mov	r0, r9
   8b3a2:	f000 f9b3 	bl	8b70c <_malloc_r>
   8b3a6:	2800      	cmp	r0, #0
   8b3a8:	f000 80f6 	beq.w	8b598 <__sfvwrite_r+0x2d4>
   8b3ac:	465a      	mov	r2, fp
   8b3ae:	6921      	ldr	r1, [r4, #16]
   8b3b0:	9000      	str	r0, [sp, #0]
   8b3b2:	f7fb fe55 	bl	87060 <memcpy>
   8b3b6:	89a2      	ldrh	r2, [r4, #12]
   8b3b8:	9b00      	ldr	r3, [sp, #0]
   8b3ba:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8b3be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8b3c2:	81a2      	strh	r2, [r4, #12]
   8b3c4:	eba7 020b 	sub.w	r2, r7, fp
   8b3c8:	eb03 000b 	add.w	r0, r3, fp
   8b3cc:	6167      	str	r7, [r4, #20]
   8b3ce:	46b3      	mov	fp, r6
   8b3d0:	4637      	mov	r7, r6
   8b3d2:	6123      	str	r3, [r4, #16]
   8b3d4:	6020      	str	r0, [r4, #0]
   8b3d6:	60a2      	str	r2, [r4, #8]
   8b3d8:	465a      	mov	r2, fp
   8b3da:	4651      	mov	r1, sl
   8b3dc:	f000 fc9a 	bl	8bd14 <memmove>
   8b3e0:	68a2      	ldr	r2, [r4, #8]
   8b3e2:	6823      	ldr	r3, [r4, #0]
   8b3e4:	1bd2      	subs	r2, r2, r7
   8b3e6:	4637      	mov	r7, r6
   8b3e8:	2600      	movs	r6, #0
   8b3ea:	445b      	add	r3, fp
   8b3ec:	60a2      	str	r2, [r4, #8]
   8b3ee:	6023      	str	r3, [r4, #0]
   8b3f0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8b3f4:	44ba      	add	sl, r7
   8b3f6:	1bd7      	subs	r7, r2, r7
   8b3f8:	f8c8 7008 	str.w	r7, [r8, #8]
   8b3fc:	2f00      	cmp	r7, #0
   8b3fe:	d094      	beq.n	8b32a <__sfvwrite_r+0x66>
   8b400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b404:	b29b      	uxth	r3, r3
   8b406:	2e00      	cmp	r6, #0
   8b408:	d1a8      	bne.n	8b35c <__sfvwrite_r+0x98>
   8b40a:	e9d5 a600 	ldrd	sl, r6, [r5]
   8b40e:	3508      	adds	r5, #8
   8b410:	e7a2      	b.n	8b358 <__sfvwrite_r+0x94>
   8b412:	e9d5 b700 	ldrd	fp, r7, [r5]
   8b416:	3508      	adds	r5, #8
   8b418:	e76f      	b.n	8b2fa <__sfvwrite_r+0x36>
   8b41a:	4629      	mov	r1, r5
   8b41c:	465a      	mov	r2, fp
   8b41e:	f000 fc79 	bl	8bd14 <memmove>
   8b422:	6823      	ldr	r3, [r4, #0]
   8b424:	4621      	mov	r1, r4
   8b426:	445b      	add	r3, fp
   8b428:	4648      	mov	r0, r9
   8b42a:	6023      	str	r3, [r4, #0]
   8b42c:	f7ff fcc4 	bl	8adb8 <_fflush_r>
   8b430:	b358      	cbz	r0, 8b48a <__sfvwrite_r+0x1c6>
   8b432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b436:	f04f 30ff 	mov.w	r0, #4294967295
   8b43a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b43e:	81a3      	strh	r3, [r4, #12]
   8b440:	b003      	add	sp, #12
   8b442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b446:	2000      	movs	r0, #0
   8b448:	4770      	bx	lr
   8b44a:	463e      	mov	r6, r7
   8b44c:	46aa      	mov	sl, r5
   8b44e:	4638      	mov	r0, r7
   8b450:	463d      	mov	r5, r7
   8b452:	9700      	str	r7, [sp, #0]
   8b454:	b36e      	cbz	r6, 8b4b2 <__sfvwrite_r+0x1ee>
   8b456:	2800      	cmp	r0, #0
   8b458:	d035      	beq.n	8b4c6 <__sfvwrite_r+0x202>
   8b45a:	9a00      	ldr	r2, [sp, #0]
   8b45c:	6820      	ldr	r0, [r4, #0]
   8b45e:	6921      	ldr	r1, [r4, #16]
   8b460:	42b2      	cmp	r2, r6
   8b462:	bf28      	it	cs
   8b464:	4632      	movcs	r2, r6
   8b466:	4288      	cmp	r0, r1
   8b468:	6963      	ldr	r3, [r4, #20]
   8b46a:	d904      	bls.n	8b476 <__sfvwrite_r+0x1b2>
   8b46c:	68a1      	ldr	r1, [r4, #8]
   8b46e:	eb03 0b01 	add.w	fp, r3, r1
   8b472:	455a      	cmp	r2, fp
   8b474:	dcd1      	bgt.n	8b41a <__sfvwrite_r+0x156>
   8b476:	4293      	cmp	r3, r2
   8b478:	dc6b      	bgt.n	8b552 <__sfvwrite_r+0x28e>
   8b47a:	462a      	mov	r2, r5
   8b47c:	4648      	mov	r0, r9
   8b47e:	69e1      	ldr	r1, [r4, #28]
   8b480:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8b482:	47b8      	blx	r7
   8b484:	f1b0 0b00 	subs.w	fp, r0, #0
   8b488:	ddd3      	ble.n	8b432 <__sfvwrite_r+0x16e>
   8b48a:	9b00      	ldr	r3, [sp, #0]
   8b48c:	ebb3 030b 	subs.w	r3, r3, fp
   8b490:	9300      	str	r3, [sp, #0]
   8b492:	d057      	beq.n	8b544 <__sfvwrite_r+0x280>
   8b494:	2001      	movs	r0, #1
   8b496:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8b49a:	445d      	add	r5, fp
   8b49c:	eba3 030b 	sub.w	r3, r3, fp
   8b4a0:	eba6 060b 	sub.w	r6, r6, fp
   8b4a4:	f8c8 3008 	str.w	r3, [r8, #8]
   8b4a8:	2b00      	cmp	r3, #0
   8b4aa:	f43f af3e 	beq.w	8b32a <__sfvwrite_r+0x66>
   8b4ae:	2e00      	cmp	r6, #0
   8b4b0:	d1d1      	bne.n	8b456 <__sfvwrite_r+0x192>
   8b4b2:	f10a 0308 	add.w	r3, sl, #8
   8b4b6:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8b4ba:	469a      	mov	sl, r3
   8b4bc:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8b4c0:	3308      	adds	r3, #8
   8b4c2:	2e00      	cmp	r6, #0
   8b4c4:	d0f7      	beq.n	8b4b6 <__sfvwrite_r+0x1f2>
   8b4c6:	4632      	mov	r2, r6
   8b4c8:	210a      	movs	r1, #10
   8b4ca:	4628      	mov	r0, r5
   8b4cc:	f000 fbe2 	bl	8bc94 <memchr>
   8b4d0:	2800      	cmp	r0, #0
   8b4d2:	d05e      	beq.n	8b592 <__sfvwrite_r+0x2ce>
   8b4d4:	3001      	adds	r0, #1
   8b4d6:	1b43      	subs	r3, r0, r5
   8b4d8:	461a      	mov	r2, r3
   8b4da:	9300      	str	r3, [sp, #0]
   8b4dc:	e7be      	b.n	8b45c <__sfvwrite_r+0x198>
   8b4de:	6820      	ldr	r0, [r4, #0]
   8b4e0:	6923      	ldr	r3, [r4, #16]
   8b4e2:	4298      	cmp	r0, r3
   8b4e4:	d818      	bhi.n	8b518 <__sfvwrite_r+0x254>
   8b4e6:	6962      	ldr	r2, [r4, #20]
   8b4e8:	42b2      	cmp	r2, r6
   8b4ea:	d815      	bhi.n	8b518 <__sfvwrite_r+0x254>
   8b4ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8b4f0:	42b3      	cmp	r3, r6
   8b4f2:	bf28      	it	cs
   8b4f4:	4633      	movcs	r3, r6
   8b4f6:	fb93 f3f2 	sdiv	r3, r3, r2
   8b4fa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8b4fc:	fb02 f303 	mul.w	r3, r2, r3
   8b500:	4648      	mov	r0, r9
   8b502:	4652      	mov	r2, sl
   8b504:	69e1      	ldr	r1, [r4, #28]
   8b506:	47b8      	blx	r7
   8b508:	1e07      	subs	r7, r0, #0
   8b50a:	dd92      	ble.n	8b432 <__sfvwrite_r+0x16e>
   8b50c:	1bf6      	subs	r6, r6, r7
   8b50e:	e76f      	b.n	8b3f0 <__sfvwrite_r+0x12c>
   8b510:	4637      	mov	r7, r6
   8b512:	46b3      	mov	fp, r6
   8b514:	6820      	ldr	r0, [r4, #0]
   8b516:	e75f      	b.n	8b3d8 <__sfvwrite_r+0x114>
   8b518:	42b7      	cmp	r7, r6
   8b51a:	bf28      	it	cs
   8b51c:	4637      	movcs	r7, r6
   8b51e:	4651      	mov	r1, sl
   8b520:	463a      	mov	r2, r7
   8b522:	f000 fbf7 	bl	8bd14 <memmove>
   8b526:	68a3      	ldr	r3, [r4, #8]
   8b528:	6822      	ldr	r2, [r4, #0]
   8b52a:	1bdb      	subs	r3, r3, r7
   8b52c:	443a      	add	r2, r7
   8b52e:	60a3      	str	r3, [r4, #8]
   8b530:	6022      	str	r2, [r4, #0]
   8b532:	2b00      	cmp	r3, #0
   8b534:	d1ea      	bne.n	8b50c <__sfvwrite_r+0x248>
   8b536:	4621      	mov	r1, r4
   8b538:	4648      	mov	r0, r9
   8b53a:	f7ff fc3d 	bl	8adb8 <_fflush_r>
   8b53e:	2800      	cmp	r0, #0
   8b540:	d0e4      	beq.n	8b50c <__sfvwrite_r+0x248>
   8b542:	e776      	b.n	8b432 <__sfvwrite_r+0x16e>
   8b544:	4621      	mov	r1, r4
   8b546:	4648      	mov	r0, r9
   8b548:	f7ff fc36 	bl	8adb8 <_fflush_r>
   8b54c:	2800      	cmp	r0, #0
   8b54e:	d0a2      	beq.n	8b496 <__sfvwrite_r+0x1d2>
   8b550:	e76f      	b.n	8b432 <__sfvwrite_r+0x16e>
   8b552:	4629      	mov	r1, r5
   8b554:	4693      	mov	fp, r2
   8b556:	9201      	str	r2, [sp, #4]
   8b558:	f000 fbdc 	bl	8bd14 <memmove>
   8b55c:	68a1      	ldr	r1, [r4, #8]
   8b55e:	6823      	ldr	r3, [r4, #0]
   8b560:	9a01      	ldr	r2, [sp, #4]
   8b562:	1a89      	subs	r1, r1, r2
   8b564:	441a      	add	r2, r3
   8b566:	60a1      	str	r1, [r4, #8]
   8b568:	6022      	str	r2, [r4, #0]
   8b56a:	e78e      	b.n	8b48a <__sfvwrite_r+0x1c6>
   8b56c:	4648      	mov	r0, r9
   8b56e:	f000 ffc3 	bl	8c4f8 <_realloc_r>
   8b572:	4603      	mov	r3, r0
   8b574:	2800      	cmp	r0, #0
   8b576:	f47f af25 	bne.w	8b3c4 <__sfvwrite_r+0x100>
   8b57a:	4648      	mov	r0, r9
   8b57c:	6921      	ldr	r1, [r4, #16]
   8b57e:	f7ff fd9b 	bl	8b0b8 <_free_r>
   8b582:	220c      	movs	r2, #12
   8b584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b588:	f8c9 2000 	str.w	r2, [r9]
   8b58c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8b590:	e751      	b.n	8b436 <__sfvwrite_r+0x172>
   8b592:	1c72      	adds	r2, r6, #1
   8b594:	9200      	str	r2, [sp, #0]
   8b596:	e761      	b.n	8b45c <__sfvwrite_r+0x198>
   8b598:	220c      	movs	r2, #12
   8b59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b59e:	f8c9 2000 	str.w	r2, [r9]
   8b5a2:	e748      	b.n	8b436 <__sfvwrite_r+0x172>
   8b5a4:	f04f 30ff 	mov.w	r0, #4294967295
   8b5a8:	e6c0      	b.n	8b32c <__sfvwrite_r+0x68>
   8b5aa:	bf00      	nop
   8b5ac:	7ffffc00 	.word	0x7ffffc00

0008b5b0 <_fwalk_reent>:
   8b5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b5b4:	4607      	mov	r7, r0
   8b5b6:	4688      	mov	r8, r1
   8b5b8:	f04f 0900 	mov.w	r9, #0
   8b5bc:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8b5c0:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8b5c4:	3d01      	subs	r5, #1
   8b5c6:	d410      	bmi.n	8b5ea <_fwalk_reent+0x3a>
   8b5c8:	89a3      	ldrh	r3, [r4, #12]
   8b5ca:	3d01      	subs	r5, #1
   8b5cc:	2b01      	cmp	r3, #1
   8b5ce:	d908      	bls.n	8b5e2 <_fwalk_reent+0x32>
   8b5d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8b5d4:	3301      	adds	r3, #1
   8b5d6:	d004      	beq.n	8b5e2 <_fwalk_reent+0x32>
   8b5d8:	4621      	mov	r1, r4
   8b5da:	4638      	mov	r0, r7
   8b5dc:	47c0      	blx	r8
   8b5de:	ea49 0900 	orr.w	r9, r9, r0
   8b5e2:	1c6b      	adds	r3, r5, #1
   8b5e4:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8b5e8:	d1ee      	bne.n	8b5c8 <_fwalk_reent+0x18>
   8b5ea:	6836      	ldr	r6, [r6, #0]
   8b5ec:	2e00      	cmp	r6, #0
   8b5ee:	d1e7      	bne.n	8b5c0 <_fwalk_reent+0x10>
   8b5f0:	4648      	mov	r0, r9
   8b5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b5f6:	bf00      	nop

0008b5f8 <__locale_mb_cur_max>:
   8b5f8:	4b01      	ldr	r3, [pc, #4]	; (8b600 <__locale_mb_cur_max+0x8>)
   8b5fa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8b5fe:	4770      	bx	lr
   8b600:	20000874 	.word	0x20000874

0008b604 <_localeconv_r>:
   8b604:	4800      	ldr	r0, [pc, #0]	; (8b608 <_localeconv_r+0x4>)
   8b606:	4770      	bx	lr
   8b608:	20000964 	.word	0x20000964

0008b60c <__retarget_lock_init_recursive>:
   8b60c:	4770      	bx	lr
   8b60e:	bf00      	nop

0008b610 <__retarget_lock_close_recursive>:
   8b610:	4770      	bx	lr
   8b612:	bf00      	nop

0008b614 <__retarget_lock_acquire_recursive>:
   8b614:	4770      	bx	lr
   8b616:	bf00      	nop

0008b618 <__retarget_lock_release_recursive>:
   8b618:	4770      	bx	lr
   8b61a:	bf00      	nop

0008b61c <__swhatbuf_r>:
   8b61c:	b570      	push	{r4, r5, r6, lr}
   8b61e:	460c      	mov	r4, r1
   8b620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b624:	4615      	mov	r5, r2
   8b626:	2900      	cmp	r1, #0
   8b628:	461e      	mov	r6, r3
   8b62a:	b096      	sub	sp, #88	; 0x58
   8b62c:	db14      	blt.n	8b658 <__swhatbuf_r+0x3c>
   8b62e:	466a      	mov	r2, sp
   8b630:	f001 fc7a 	bl	8cf28 <_fstat_r>
   8b634:	2800      	cmp	r0, #0
   8b636:	db0f      	blt.n	8b658 <__swhatbuf_r+0x3c>
   8b638:	9a01      	ldr	r2, [sp, #4]
   8b63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8b63e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8b642:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8b646:	fab2 f282 	clz	r2, r2
   8b64a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8b64e:	0952      	lsrs	r2, r2, #5
   8b650:	6032      	str	r2, [r6, #0]
   8b652:	602b      	str	r3, [r5, #0]
   8b654:	b016      	add	sp, #88	; 0x58
   8b656:	bd70      	pop	{r4, r5, r6, pc}
   8b658:	2300      	movs	r3, #0
   8b65a:	89a1      	ldrh	r1, [r4, #12]
   8b65c:	6033      	str	r3, [r6, #0]
   8b65e:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8b662:	d004      	beq.n	8b66e <__swhatbuf_r+0x52>
   8b664:	2240      	movs	r2, #64	; 0x40
   8b666:	4618      	mov	r0, r3
   8b668:	602a      	str	r2, [r5, #0]
   8b66a:	b016      	add	sp, #88	; 0x58
   8b66c:	bd70      	pop	{r4, r5, r6, pc}
   8b66e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8b672:	602b      	str	r3, [r5, #0]
   8b674:	b016      	add	sp, #88	; 0x58
   8b676:	bd70      	pop	{r4, r5, r6, pc}

0008b678 <__smakebuf_r>:
   8b678:	b570      	push	{r4, r5, r6, lr}
   8b67a:	898b      	ldrh	r3, [r1, #12]
   8b67c:	460c      	mov	r4, r1
   8b67e:	079d      	lsls	r5, r3, #30
   8b680:	b082      	sub	sp, #8
   8b682:	d507      	bpl.n	8b694 <__smakebuf_r+0x1c>
   8b684:	2201      	movs	r2, #1
   8b686:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8b68a:	614a      	str	r2, [r1, #20]
   8b68c:	600b      	str	r3, [r1, #0]
   8b68e:	610b      	str	r3, [r1, #16]
   8b690:	b002      	add	sp, #8
   8b692:	bd70      	pop	{r4, r5, r6, pc}
   8b694:	ab01      	add	r3, sp, #4
   8b696:	466a      	mov	r2, sp
   8b698:	4606      	mov	r6, r0
   8b69a:	f7ff ffbf 	bl	8b61c <__swhatbuf_r>
   8b69e:	9900      	ldr	r1, [sp, #0]
   8b6a0:	4605      	mov	r5, r0
   8b6a2:	4630      	mov	r0, r6
   8b6a4:	f000 f832 	bl	8b70c <_malloc_r>
   8b6a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b6ac:	b170      	cbz	r0, 8b6cc <__smakebuf_r+0x54>
   8b6ae:	4916      	ldr	r1, [pc, #88]	; (8b708 <__smakebuf_r+0x90>)
   8b6b0:	9a00      	ldr	r2, [sp, #0]
   8b6b2:	63f1      	str	r1, [r6, #60]	; 0x3c
   8b6b4:	9901      	ldr	r1, [sp, #4]
   8b6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8b6ba:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8b6be:	81a3      	strh	r3, [r4, #12]
   8b6c0:	6020      	str	r0, [r4, #0]
   8b6c2:	b989      	cbnz	r1, 8b6e8 <__smakebuf_r+0x70>
   8b6c4:	432b      	orrs	r3, r5
   8b6c6:	81a3      	strh	r3, [r4, #12]
   8b6c8:	b002      	add	sp, #8
   8b6ca:	bd70      	pop	{r4, r5, r6, pc}
   8b6cc:	059a      	lsls	r2, r3, #22
   8b6ce:	d4df      	bmi.n	8b690 <__smakebuf_r+0x18>
   8b6d0:	2101      	movs	r1, #1
   8b6d2:	f023 0303 	bic.w	r3, r3, #3
   8b6d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8b6da:	f043 0302 	orr.w	r3, r3, #2
   8b6de:	81a3      	strh	r3, [r4, #12]
   8b6e0:	6161      	str	r1, [r4, #20]
   8b6e2:	6022      	str	r2, [r4, #0]
   8b6e4:	6122      	str	r2, [r4, #16]
   8b6e6:	e7d3      	b.n	8b690 <__smakebuf_r+0x18>
   8b6e8:	4630      	mov	r0, r6
   8b6ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b6ee:	f001 fc31 	bl	8cf54 <_isatty_r>
   8b6f2:	b910      	cbnz	r0, 8b6fa <__smakebuf_r+0x82>
   8b6f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b6f8:	e7e4      	b.n	8b6c4 <__smakebuf_r+0x4c>
   8b6fa:	89a2      	ldrh	r2, [r4, #12]
   8b6fc:	f022 0203 	bic.w	r2, r2, #3
   8b700:	f042 0201 	orr.w	r2, r2, #1
   8b704:	b213      	sxth	r3, r2
   8b706:	e7dd      	b.n	8b6c4 <__smakebuf_r+0x4c>
   8b708:	0008ae65 	.word	0x0008ae65

0008b70c <_malloc_r>:
   8b70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b710:	f101 050b 	add.w	r5, r1, #11
   8b714:	2d16      	cmp	r5, #22
   8b716:	4606      	mov	r6, r0
   8b718:	b083      	sub	sp, #12
   8b71a:	d824      	bhi.n	8b766 <_malloc_r+0x5a>
   8b71c:	2910      	cmp	r1, #16
   8b71e:	f200 80b6 	bhi.w	8b88e <_malloc_r+0x182>
   8b722:	f000 fb61 	bl	8bde8 <__malloc_lock>
   8b726:	2510      	movs	r5, #16
   8b728:	2002      	movs	r0, #2
   8b72a:	2318      	movs	r3, #24
   8b72c:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8bc18 <_malloc_r+0x50c>
   8b730:	4443      	add	r3, r8
   8b732:	685c      	ldr	r4, [r3, #4]
   8b734:	f1a3 0208 	sub.w	r2, r3, #8
   8b738:	4294      	cmp	r4, r2
   8b73a:	f000 80b4 	beq.w	8b8a6 <_malloc_r+0x19a>
   8b73e:	6863      	ldr	r3, [r4, #4]
   8b740:	68e1      	ldr	r1, [r4, #12]
   8b742:	f023 0303 	bic.w	r3, r3, #3
   8b746:	4423      	add	r3, r4
   8b748:	685a      	ldr	r2, [r3, #4]
   8b74a:	68a5      	ldr	r5, [r4, #8]
   8b74c:	f042 0201 	orr.w	r2, r2, #1
   8b750:	60e9      	str	r1, [r5, #12]
   8b752:	4630      	mov	r0, r6
   8b754:	608d      	str	r5, [r1, #8]
   8b756:	3408      	adds	r4, #8
   8b758:	605a      	str	r2, [r3, #4]
   8b75a:	f000 fb4b 	bl	8bdf4 <__malloc_unlock>
   8b75e:	4620      	mov	r0, r4
   8b760:	b003      	add	sp, #12
   8b762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b766:	f035 0507 	bics.w	r5, r5, #7
   8b76a:	f100 8090 	bmi.w	8b88e <_malloc_r+0x182>
   8b76e:	42a9      	cmp	r1, r5
   8b770:	f200 808d 	bhi.w	8b88e <_malloc_r+0x182>
   8b774:	f000 fb38 	bl	8bde8 <__malloc_lock>
   8b778:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8b77c:	f0c0 8185 	bcc.w	8ba8a <_malloc_r+0x37e>
   8b780:	0a6b      	lsrs	r3, r5, #9
   8b782:	f000 808b 	beq.w	8b89c <_malloc_r+0x190>
   8b786:	2b04      	cmp	r3, #4
   8b788:	f200 815b 	bhi.w	8ba42 <_malloc_r+0x336>
   8b78c:	09ab      	lsrs	r3, r5, #6
   8b78e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8b792:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8b796:	00c1      	lsls	r1, r0, #3
   8b798:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8bc18 <_malloc_r+0x50c>
   8b79c:	4441      	add	r1, r8
   8b79e:	684c      	ldr	r4, [r1, #4]
   8b7a0:	3908      	subs	r1, #8
   8b7a2:	42a1      	cmp	r1, r4
   8b7a4:	d106      	bne.n	8b7b4 <_malloc_r+0xa8>
   8b7a6:	e00c      	b.n	8b7c2 <_malloc_r+0xb6>
   8b7a8:	2a00      	cmp	r2, #0
   8b7aa:	f280 8122 	bge.w	8b9f2 <_malloc_r+0x2e6>
   8b7ae:	68e4      	ldr	r4, [r4, #12]
   8b7b0:	42a1      	cmp	r1, r4
   8b7b2:	d006      	beq.n	8b7c2 <_malloc_r+0xb6>
   8b7b4:	6863      	ldr	r3, [r4, #4]
   8b7b6:	f023 0303 	bic.w	r3, r3, #3
   8b7ba:	1b5a      	subs	r2, r3, r5
   8b7bc:	2a0f      	cmp	r2, #15
   8b7be:	ddf3      	ble.n	8b7a8 <_malloc_r+0x9c>
   8b7c0:	4638      	mov	r0, r7
   8b7c2:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8b7c6:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8bc1c <_malloc_r+0x510>
   8b7ca:	4564      	cmp	r4, ip
   8b7cc:	d077      	beq.n	8b8be <_malloc_r+0x1b2>
   8b7ce:	6862      	ldr	r2, [r4, #4]
   8b7d0:	f022 0203 	bic.w	r2, r2, #3
   8b7d4:	1b53      	subs	r3, r2, r5
   8b7d6:	2b0f      	cmp	r3, #15
   8b7d8:	f300 8165 	bgt.w	8baa6 <_malloc_r+0x39a>
   8b7dc:	2b00      	cmp	r3, #0
   8b7de:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8b7e2:	f280 8156 	bge.w	8ba92 <_malloc_r+0x386>
   8b7e6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8b7ea:	f080 8106 	bcs.w	8b9fa <_malloc_r+0x2ee>
   8b7ee:	2101      	movs	r1, #1
   8b7f0:	08d3      	lsrs	r3, r2, #3
   8b7f2:	0952      	lsrs	r2, r2, #5
   8b7f4:	440b      	add	r3, r1
   8b7f6:	fa01 f202 	lsl.w	r2, r1, r2
   8b7fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8b7fe:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8b802:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8b806:	430a      	orrs	r2, r1
   8b808:	f1ae 0108 	sub.w	r1, lr, #8
   8b80c:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8b810:	f8c8 2004 	str.w	r2, [r8, #4]
   8b814:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8b818:	60fc      	str	r4, [r7, #12]
   8b81a:	2101      	movs	r1, #1
   8b81c:	1083      	asrs	r3, r0, #2
   8b81e:	4099      	lsls	r1, r3
   8b820:	4291      	cmp	r1, r2
   8b822:	d853      	bhi.n	8b8cc <_malloc_r+0x1c0>
   8b824:	4211      	tst	r1, r2
   8b826:	d106      	bne.n	8b836 <_malloc_r+0x12a>
   8b828:	f020 0003 	bic.w	r0, r0, #3
   8b82c:	0049      	lsls	r1, r1, #1
   8b82e:	4211      	tst	r1, r2
   8b830:	f100 0004 	add.w	r0, r0, #4
   8b834:	d0fa      	beq.n	8b82c <_malloc_r+0x120>
   8b836:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8b83a:	464c      	mov	r4, r9
   8b83c:	4686      	mov	lr, r0
   8b83e:	68e7      	ldr	r7, [r4, #12]
   8b840:	42bc      	cmp	r4, r7
   8b842:	d107      	bne.n	8b854 <_malloc_r+0x148>
   8b844:	e109      	b.n	8ba5a <_malloc_r+0x34e>
   8b846:	2b00      	cmp	r3, #0
   8b848:	f280 8110 	bge.w	8ba6c <_malloc_r+0x360>
   8b84c:	68ff      	ldr	r7, [r7, #12]
   8b84e:	42bc      	cmp	r4, r7
   8b850:	f000 8103 	beq.w	8ba5a <_malloc_r+0x34e>
   8b854:	687a      	ldr	r2, [r7, #4]
   8b856:	f022 0203 	bic.w	r2, r2, #3
   8b85a:	1b53      	subs	r3, r2, r5
   8b85c:	2b0f      	cmp	r3, #15
   8b85e:	ddf2      	ble.n	8b846 <_malloc_r+0x13a>
   8b860:	f045 0e01 	orr.w	lr, r5, #1
   8b864:	4630      	mov	r0, r6
   8b866:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8b86a:	443d      	add	r5, r7
   8b86c:	f043 0601 	orr.w	r6, r3, #1
   8b870:	f8c7 e004 	str.w	lr, [r7, #4]
   8b874:	60e1      	str	r1, [r4, #12]
   8b876:	608c      	str	r4, [r1, #8]
   8b878:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8b87c:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8b880:	606e      	str	r6, [r5, #4]
   8b882:	50bb      	str	r3, [r7, r2]
   8b884:	f000 fab6 	bl	8bdf4 <__malloc_unlock>
   8b888:	f107 0408 	add.w	r4, r7, #8
   8b88c:	e002      	b.n	8b894 <_malloc_r+0x188>
   8b88e:	230c      	movs	r3, #12
   8b890:	2400      	movs	r4, #0
   8b892:	6033      	str	r3, [r6, #0]
   8b894:	4620      	mov	r0, r4
   8b896:	b003      	add	sp, #12
   8b898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b89c:	f44f 7100 	mov.w	r1, #512	; 0x200
   8b8a0:	2040      	movs	r0, #64	; 0x40
   8b8a2:	273f      	movs	r7, #63	; 0x3f
   8b8a4:	e778      	b.n	8b798 <_malloc_r+0x8c>
   8b8a6:	68dc      	ldr	r4, [r3, #12]
   8b8a8:	42a3      	cmp	r3, r4
   8b8aa:	bf08      	it	eq
   8b8ac:	3002      	addeq	r0, #2
   8b8ae:	f47f af46 	bne.w	8b73e <_malloc_r+0x32>
   8b8b2:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8b8b6:	f8df c364 	ldr.w	ip, [pc, #868]	; 8bc1c <_malloc_r+0x510>
   8b8ba:	4564      	cmp	r4, ip
   8b8bc:	d187      	bne.n	8b7ce <_malloc_r+0xc2>
   8b8be:	2101      	movs	r1, #1
   8b8c0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8b8c4:	1083      	asrs	r3, r0, #2
   8b8c6:	4099      	lsls	r1, r3
   8b8c8:	4291      	cmp	r1, r2
   8b8ca:	d9ab      	bls.n	8b824 <_malloc_r+0x118>
   8b8cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b8d0:	6867      	ldr	r7, [r4, #4]
   8b8d2:	f027 0703 	bic.w	r7, r7, #3
   8b8d6:	42bd      	cmp	r5, r7
   8b8d8:	d802      	bhi.n	8b8e0 <_malloc_r+0x1d4>
   8b8da:	1b7b      	subs	r3, r7, r5
   8b8dc:	2b0f      	cmp	r3, #15
   8b8de:	dc77      	bgt.n	8b9d0 <_malloc_r+0x2c4>
   8b8e0:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8bc20 <_malloc_r+0x514>
   8b8e4:	4bc8      	ldr	r3, [pc, #800]	; (8bc08 <_malloc_r+0x4fc>)
   8b8e6:	f8d9 2000 	ldr.w	r2, [r9]
   8b8ea:	681b      	ldr	r3, [r3, #0]
   8b8ec:	3201      	adds	r2, #1
   8b8ee:	442b      	add	r3, r5
   8b8f0:	eb04 0a07 	add.w	sl, r4, r7
   8b8f4:	f000 8124 	beq.w	8bb40 <_malloc_r+0x434>
   8b8f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8b8fc:	330f      	adds	r3, #15
   8b8fe:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8b902:	f02b 0b0f 	bic.w	fp, fp, #15
   8b906:	4659      	mov	r1, fp
   8b908:	4630      	mov	r0, r6
   8b90a:	f001 f81d 	bl	8c948 <_sbrk_r>
   8b90e:	1c41      	adds	r1, r0, #1
   8b910:	4602      	mov	r2, r0
   8b912:	f000 80e1 	beq.w	8bad8 <_malloc_r+0x3cc>
   8b916:	4582      	cmp	sl, r0
   8b918:	f200 80dc 	bhi.w	8bad4 <_malloc_r+0x3c8>
   8b91c:	4bbb      	ldr	r3, [pc, #748]	; (8bc0c <_malloc_r+0x500>)
   8b91e:	6819      	ldr	r1, [r3, #0]
   8b920:	4459      	add	r1, fp
   8b922:	4608      	mov	r0, r1
   8b924:	6019      	str	r1, [r3, #0]
   8b926:	f000 8141 	beq.w	8bbac <_malloc_r+0x4a0>
   8b92a:	f8d9 1000 	ldr.w	r1, [r9]
   8b92e:	9301      	str	r3, [sp, #4]
   8b930:	3101      	adds	r1, #1
   8b932:	bf1b      	ittet	ne
   8b934:	eba2 0a0a 	subne.w	sl, r2, sl
   8b938:	4450      	addne	r0, sl
   8b93a:	f8c9 2000 	streq.w	r2, [r9]
   8b93e:	6018      	strne	r0, [r3, #0]
   8b940:	f012 0a07 	ands.w	sl, r2, #7
   8b944:	f000 810a 	beq.w	8bb5c <_malloc_r+0x450>
   8b948:	f1ca 0108 	rsb	r1, sl, #8
   8b94c:	440a      	add	r2, r1
   8b94e:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8b952:	4493      	add	fp, r2
   8b954:	3108      	adds	r1, #8
   8b956:	eba1 010b 	sub.w	r1, r1, fp
   8b95a:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8b95e:	4649      	mov	r1, r9
   8b960:	4630      	mov	r0, r6
   8b962:	9200      	str	r2, [sp, #0]
   8b964:	f000 fff0 	bl	8c948 <_sbrk_r>
   8b968:	1c42      	adds	r2, r0, #1
   8b96a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b96e:	f000 8143 	beq.w	8bbf8 <_malloc_r+0x4ec>
   8b972:	1a80      	subs	r0, r0, r2
   8b974:	eb00 0b09 	add.w	fp, r0, r9
   8b978:	6819      	ldr	r1, [r3, #0]
   8b97a:	f04b 0001 	orr.w	r0, fp, #1
   8b97e:	4449      	add	r1, r9
   8b980:	4544      	cmp	r4, r8
   8b982:	f8c8 2008 	str.w	r2, [r8, #8]
   8b986:	6019      	str	r1, [r3, #0]
   8b988:	6050      	str	r0, [r2, #4]
   8b98a:	f000 811c 	beq.w	8bbc6 <_malloc_r+0x4ba>
   8b98e:	2f0f      	cmp	r7, #15
   8b990:	f240 811b 	bls.w	8bbca <_malloc_r+0x4be>
   8b994:	f04f 0c05 	mov.w	ip, #5
   8b998:	6860      	ldr	r0, [r4, #4]
   8b99a:	3f0c      	subs	r7, #12
   8b99c:	f027 0707 	bic.w	r7, r7, #7
   8b9a0:	f000 0001 	and.w	r0, r0, #1
   8b9a4:	4338      	orrs	r0, r7
   8b9a6:	eb04 0e07 	add.w	lr, r4, r7
   8b9aa:	2f0f      	cmp	r7, #15
   8b9ac:	6060      	str	r0, [r4, #4]
   8b9ae:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8b9b2:	f200 8137 	bhi.w	8bc24 <_malloc_r+0x518>
   8b9b6:	4614      	mov	r4, r2
   8b9b8:	6850      	ldr	r0, [r2, #4]
   8b9ba:	4b95      	ldr	r3, [pc, #596]	; (8bc10 <_malloc_r+0x504>)
   8b9bc:	681a      	ldr	r2, [r3, #0]
   8b9be:	428a      	cmp	r2, r1
   8b9c0:	bf38      	it	cc
   8b9c2:	6019      	strcc	r1, [r3, #0]
   8b9c4:	4b93      	ldr	r3, [pc, #588]	; (8bc14 <_malloc_r+0x508>)
   8b9c6:	681a      	ldr	r2, [r3, #0]
   8b9c8:	428a      	cmp	r2, r1
   8b9ca:	bf38      	it	cc
   8b9cc:	6019      	strcc	r1, [r3, #0]
   8b9ce:	e086      	b.n	8bade <_malloc_r+0x3d2>
   8b9d0:	f045 0201 	orr.w	r2, r5, #1
   8b9d4:	f043 0301 	orr.w	r3, r3, #1
   8b9d8:	4425      	add	r5, r4
   8b9da:	6062      	str	r2, [r4, #4]
   8b9dc:	4630      	mov	r0, r6
   8b9de:	f8c8 5008 	str.w	r5, [r8, #8]
   8b9e2:	3408      	adds	r4, #8
   8b9e4:	606b      	str	r3, [r5, #4]
   8b9e6:	f000 fa05 	bl	8bdf4 <__malloc_unlock>
   8b9ea:	4620      	mov	r0, r4
   8b9ec:	b003      	add	sp, #12
   8b9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b9f2:	4423      	add	r3, r4
   8b9f4:	685a      	ldr	r2, [r3, #4]
   8b9f6:	68e1      	ldr	r1, [r4, #12]
   8b9f8:	e6a7      	b.n	8b74a <_malloc_r+0x3e>
   8b9fa:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8b9fe:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8ba02:	d361      	bcc.n	8bac8 <_malloc_r+0x3bc>
   8ba04:	2b14      	cmp	r3, #20
   8ba06:	f200 80ba 	bhi.w	8bb7e <_malloc_r+0x472>
   8ba0a:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8ba0e:	00c9      	lsls	r1, r1, #3
   8ba10:	335b      	adds	r3, #91	; 0x5b
   8ba12:	eb08 0701 	add.w	r7, r8, r1
   8ba16:	f858 1001 	ldr.w	r1, [r8, r1]
   8ba1a:	3f08      	subs	r7, #8
   8ba1c:	428f      	cmp	r7, r1
   8ba1e:	f000 8092 	beq.w	8bb46 <_malloc_r+0x43a>
   8ba22:	684b      	ldr	r3, [r1, #4]
   8ba24:	f023 0303 	bic.w	r3, r3, #3
   8ba28:	4293      	cmp	r3, r2
   8ba2a:	d902      	bls.n	8ba32 <_malloc_r+0x326>
   8ba2c:	6889      	ldr	r1, [r1, #8]
   8ba2e:	428f      	cmp	r7, r1
   8ba30:	d1f7      	bne.n	8ba22 <_malloc_r+0x316>
   8ba32:	68cf      	ldr	r7, [r1, #12]
   8ba34:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8ba38:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8ba3c:	60bc      	str	r4, [r7, #8]
   8ba3e:	60cc      	str	r4, [r1, #12]
   8ba40:	e6eb      	b.n	8b81a <_malloc_r+0x10e>
   8ba42:	2b14      	cmp	r3, #20
   8ba44:	d959      	bls.n	8bafa <_malloc_r+0x3ee>
   8ba46:	2b54      	cmp	r3, #84	; 0x54
   8ba48:	f200 80a1 	bhi.w	8bb8e <_malloc_r+0x482>
   8ba4c:	0b2b      	lsrs	r3, r5, #12
   8ba4e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8ba52:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8ba56:	00c1      	lsls	r1, r0, #3
   8ba58:	e69e      	b.n	8b798 <_malloc_r+0x8c>
   8ba5a:	f10e 0e01 	add.w	lr, lr, #1
   8ba5e:	f01e 0f03 	tst.w	lr, #3
   8ba62:	f104 0408 	add.w	r4, r4, #8
   8ba66:	f47f aeea 	bne.w	8b83e <_malloc_r+0x132>
   8ba6a:	e051      	b.n	8bb10 <_malloc_r+0x404>
   8ba6c:	463c      	mov	r4, r7
   8ba6e:	443a      	add	r2, r7
   8ba70:	6853      	ldr	r3, [r2, #4]
   8ba72:	68f9      	ldr	r1, [r7, #12]
   8ba74:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8ba78:	f043 0301 	orr.w	r3, r3, #1
   8ba7c:	6053      	str	r3, [r2, #4]
   8ba7e:	4630      	mov	r0, r6
   8ba80:	60e9      	str	r1, [r5, #12]
   8ba82:	608d      	str	r5, [r1, #8]
   8ba84:	f000 f9b6 	bl	8bdf4 <__malloc_unlock>
   8ba88:	e704      	b.n	8b894 <_malloc_r+0x188>
   8ba8a:	08e8      	lsrs	r0, r5, #3
   8ba8c:	f105 0308 	add.w	r3, r5, #8
   8ba90:	e64c      	b.n	8b72c <_malloc_r+0x20>
   8ba92:	4422      	add	r2, r4
   8ba94:	6853      	ldr	r3, [r2, #4]
   8ba96:	4630      	mov	r0, r6
   8ba98:	f043 0301 	orr.w	r3, r3, #1
   8ba9c:	6053      	str	r3, [r2, #4]
   8ba9e:	3408      	adds	r4, #8
   8baa0:	f000 f9a8 	bl	8bdf4 <__malloc_unlock>
   8baa4:	e6f6      	b.n	8b894 <_malloc_r+0x188>
   8baa6:	f045 0701 	orr.w	r7, r5, #1
   8baaa:	f043 0101 	orr.w	r1, r3, #1
   8baae:	4425      	add	r5, r4
   8bab0:	6067      	str	r7, [r4, #4]
   8bab2:	4630      	mov	r0, r6
   8bab4:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8bab8:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8babc:	6069      	str	r1, [r5, #4]
   8babe:	50a3      	str	r3, [r4, r2]
   8bac0:	f000 f998 	bl	8bdf4 <__malloc_unlock>
   8bac4:	3408      	adds	r4, #8
   8bac6:	e6e5      	b.n	8b894 <_malloc_r+0x188>
   8bac8:	0993      	lsrs	r3, r2, #6
   8baca:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8bace:	00c9      	lsls	r1, r1, #3
   8bad0:	3338      	adds	r3, #56	; 0x38
   8bad2:	e79e      	b.n	8ba12 <_malloc_r+0x306>
   8bad4:	4544      	cmp	r4, r8
   8bad6:	d064      	beq.n	8bba2 <_malloc_r+0x496>
   8bad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8badc:	6860      	ldr	r0, [r4, #4]
   8bade:	f020 0b03 	bic.w	fp, r0, #3
   8bae2:	455d      	cmp	r5, fp
   8bae4:	ebab 0305 	sub.w	r3, fp, r5
   8bae8:	d802      	bhi.n	8baf0 <_malloc_r+0x3e4>
   8baea:	2b0f      	cmp	r3, #15
   8baec:	f73f af70 	bgt.w	8b9d0 <_malloc_r+0x2c4>
   8baf0:	4630      	mov	r0, r6
   8baf2:	f000 f97f 	bl	8bdf4 <__malloc_unlock>
   8baf6:	2400      	movs	r4, #0
   8baf8:	e6cc      	b.n	8b894 <_malloc_r+0x188>
   8bafa:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8bafe:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8bb02:	00c1      	lsls	r1, r0, #3
   8bb04:	e648      	b.n	8b798 <_malloc_r+0x8c>
   8bb06:	f859 3908 	ldr.w	r3, [r9], #-8
   8bb0a:	454b      	cmp	r3, r9
   8bb0c:	f040 80a9 	bne.w	8bc62 <_malloc_r+0x556>
   8bb10:	f010 0f03 	tst.w	r0, #3
   8bb14:	f100 30ff 	add.w	r0, r0, #4294967295
   8bb18:	d1f5      	bne.n	8bb06 <_malloc_r+0x3fa>
   8bb1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8bb1e:	ea23 0301 	bic.w	r3, r3, r1
   8bb22:	f8c8 3004 	str.w	r3, [r8, #4]
   8bb26:	0049      	lsls	r1, r1, #1
   8bb28:	4299      	cmp	r1, r3
   8bb2a:	f63f aecf 	bhi.w	8b8cc <_malloc_r+0x1c0>
   8bb2e:	b919      	cbnz	r1, 8bb38 <_malloc_r+0x42c>
   8bb30:	e6cc      	b.n	8b8cc <_malloc_r+0x1c0>
   8bb32:	0049      	lsls	r1, r1, #1
   8bb34:	f10e 0e04 	add.w	lr, lr, #4
   8bb38:	4219      	tst	r1, r3
   8bb3a:	d0fa      	beq.n	8bb32 <_malloc_r+0x426>
   8bb3c:	4670      	mov	r0, lr
   8bb3e:	e67a      	b.n	8b836 <_malloc_r+0x12a>
   8bb40:	f103 0b10 	add.w	fp, r3, #16
   8bb44:	e6df      	b.n	8b906 <_malloc_r+0x1fa>
   8bb46:	f04f 0e01 	mov.w	lr, #1
   8bb4a:	109a      	asrs	r2, r3, #2
   8bb4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8bb50:	fa0e f202 	lsl.w	r2, lr, r2
   8bb54:	431a      	orrs	r2, r3
   8bb56:	f8c8 2004 	str.w	r2, [r8, #4]
   8bb5a:	e76d      	b.n	8ba38 <_malloc_r+0x32c>
   8bb5c:	eb02 010b 	add.w	r1, r2, fp
   8bb60:	4249      	negs	r1, r1
   8bb62:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8bb66:	4649      	mov	r1, r9
   8bb68:	4630      	mov	r0, r6
   8bb6a:	9200      	str	r2, [sp, #0]
   8bb6c:	f000 feec 	bl	8c948 <_sbrk_r>
   8bb70:	1c43      	adds	r3, r0, #1
   8bb72:	e9dd 2300 	ldrd	r2, r3, [sp]
   8bb76:	f47f aefc 	bne.w	8b972 <_malloc_r+0x266>
   8bb7a:	46d1      	mov	r9, sl
   8bb7c:	e6fc      	b.n	8b978 <_malloc_r+0x26c>
   8bb7e:	2b54      	cmp	r3, #84	; 0x54
   8bb80:	d826      	bhi.n	8bbd0 <_malloc_r+0x4c4>
   8bb82:	0b13      	lsrs	r3, r2, #12
   8bb84:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8bb88:	00c9      	lsls	r1, r1, #3
   8bb8a:	336e      	adds	r3, #110	; 0x6e
   8bb8c:	e741      	b.n	8ba12 <_malloc_r+0x306>
   8bb8e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8bb92:	d826      	bhi.n	8bbe2 <_malloc_r+0x4d6>
   8bb94:	0beb      	lsrs	r3, r5, #15
   8bb96:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8bb9a:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8bb9e:	00c1      	lsls	r1, r0, #3
   8bba0:	e5fa      	b.n	8b798 <_malloc_r+0x8c>
   8bba2:	4b1a      	ldr	r3, [pc, #104]	; (8bc0c <_malloc_r+0x500>)
   8bba4:	6818      	ldr	r0, [r3, #0]
   8bba6:	4458      	add	r0, fp
   8bba8:	6018      	str	r0, [r3, #0]
   8bbaa:	e6be      	b.n	8b92a <_malloc_r+0x21e>
   8bbac:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8bbb0:	f1bc 0f00 	cmp.w	ip, #0
   8bbb4:	f47f aeb9 	bne.w	8b92a <_malloc_r+0x21e>
   8bbb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8bbbc:	44bb      	add	fp, r7
   8bbbe:	f04b 0001 	orr.w	r0, fp, #1
   8bbc2:	6060      	str	r0, [r4, #4]
   8bbc4:	e6f9      	b.n	8b9ba <_malloc_r+0x2ae>
   8bbc6:	4614      	mov	r4, r2
   8bbc8:	e6f7      	b.n	8b9ba <_malloc_r+0x2ae>
   8bbca:	2301      	movs	r3, #1
   8bbcc:	6053      	str	r3, [r2, #4]
   8bbce:	e78f      	b.n	8baf0 <_malloc_r+0x3e4>
   8bbd0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8bbd4:	d832      	bhi.n	8bc3c <_malloc_r+0x530>
   8bbd6:	0bd3      	lsrs	r3, r2, #15
   8bbd8:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8bbdc:	00c9      	lsls	r1, r1, #3
   8bbde:	3377      	adds	r3, #119	; 0x77
   8bbe0:	e717      	b.n	8ba12 <_malloc_r+0x306>
   8bbe2:	f240 5254 	movw	r2, #1364	; 0x554
   8bbe6:	4293      	cmp	r3, r2
   8bbe8:	d832      	bhi.n	8bc50 <_malloc_r+0x544>
   8bbea:	0cab      	lsrs	r3, r5, #18
   8bbec:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8bbf0:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8bbf4:	00c1      	lsls	r1, r0, #3
   8bbf6:	e5cf      	b.n	8b798 <_malloc_r+0x8c>
   8bbf8:	f1aa 0a08 	sub.w	sl, sl, #8
   8bbfc:	44d3      	add	fp, sl
   8bbfe:	f04f 0900 	mov.w	r9, #0
   8bc02:	ebab 0b02 	sub.w	fp, fp, r2
   8bc06:	e6b7      	b.n	8b978 <_malloc_r+0x26c>
   8bc08:	200013b8 	.word	0x200013b8
   8bc0c:	20001388 	.word	0x20001388
   8bc10:	200013b0 	.word	0x200013b0
   8bc14:	200013b4 	.word	0x200013b4
   8bc18:	200009e0 	.word	0x200009e0
   8bc1c:	200009e8 	.word	0x200009e8
   8bc20:	20000de8 	.word	0x20000de8
   8bc24:	f104 0108 	add.w	r1, r4, #8
   8bc28:	4630      	mov	r0, r6
   8bc2a:	9300      	str	r3, [sp, #0]
   8bc2c:	f7ff fa44 	bl	8b0b8 <_free_r>
   8bc30:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8bc34:	9b00      	ldr	r3, [sp, #0]
   8bc36:	6860      	ldr	r0, [r4, #4]
   8bc38:	6819      	ldr	r1, [r3, #0]
   8bc3a:	e6be      	b.n	8b9ba <_malloc_r+0x2ae>
   8bc3c:	f240 5154 	movw	r1, #1364	; 0x554
   8bc40:	428b      	cmp	r3, r1
   8bc42:	d80a      	bhi.n	8bc5a <_malloc_r+0x54e>
   8bc44:	0c93      	lsrs	r3, r2, #18
   8bc46:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8bc4a:	00c9      	lsls	r1, r1, #3
   8bc4c:	337c      	adds	r3, #124	; 0x7c
   8bc4e:	e6e0      	b.n	8ba12 <_malloc_r+0x306>
   8bc50:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8bc54:	207f      	movs	r0, #127	; 0x7f
   8bc56:	277e      	movs	r7, #126	; 0x7e
   8bc58:	e59e      	b.n	8b798 <_malloc_r+0x8c>
   8bc5a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8bc5e:	237e      	movs	r3, #126	; 0x7e
   8bc60:	e6d7      	b.n	8ba12 <_malloc_r+0x306>
   8bc62:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8bc66:	e75e      	b.n	8bb26 <_malloc_r+0x41a>

0008bc68 <__ascii_mbtowc>:
   8bc68:	b082      	sub	sp, #8
   8bc6a:	b149      	cbz	r1, 8bc80 <__ascii_mbtowc+0x18>
   8bc6c:	b15a      	cbz	r2, 8bc86 <__ascii_mbtowc+0x1e>
   8bc6e:	b16b      	cbz	r3, 8bc8c <__ascii_mbtowc+0x24>
   8bc70:	7813      	ldrb	r3, [r2, #0]
   8bc72:	600b      	str	r3, [r1, #0]
   8bc74:	7812      	ldrb	r2, [r2, #0]
   8bc76:	1e10      	subs	r0, r2, #0
   8bc78:	bf18      	it	ne
   8bc7a:	2001      	movne	r0, #1
   8bc7c:	b002      	add	sp, #8
   8bc7e:	4770      	bx	lr
   8bc80:	a901      	add	r1, sp, #4
   8bc82:	2a00      	cmp	r2, #0
   8bc84:	d1f3      	bne.n	8bc6e <__ascii_mbtowc+0x6>
   8bc86:	4610      	mov	r0, r2
   8bc88:	b002      	add	sp, #8
   8bc8a:	4770      	bx	lr
   8bc8c:	f06f 0001 	mvn.w	r0, #1
   8bc90:	e7f4      	b.n	8bc7c <__ascii_mbtowc+0x14>
   8bc92:	bf00      	nop

0008bc94 <memchr>:
   8bc94:	b470      	push	{r4, r5, r6}
   8bc96:	0784      	lsls	r4, r0, #30
   8bc98:	b2cd      	uxtb	r5, r1
   8bc9a:	d012      	beq.n	8bcc2 <memchr+0x2e>
   8bc9c:	4603      	mov	r3, r0
   8bc9e:	1e54      	subs	r4, r2, #1
   8bca0:	b92a      	cbnz	r2, 8bcae <memchr+0x1a>
   8bca2:	e00b      	b.n	8bcbc <memchr+0x28>
   8bca4:	079a      	lsls	r2, r3, #30
   8bca6:	4618      	mov	r0, r3
   8bca8:	d00c      	beq.n	8bcc4 <memchr+0x30>
   8bcaa:	3c01      	subs	r4, #1
   8bcac:	d306      	bcc.n	8bcbc <memchr+0x28>
   8bcae:	4618      	mov	r0, r3
   8bcb0:	f813 2b01 	ldrb.w	r2, [r3], #1
   8bcb4:	42aa      	cmp	r2, r5
   8bcb6:	d1f5      	bne.n	8bca4 <memchr+0x10>
   8bcb8:	bc70      	pop	{r4, r5, r6}
   8bcba:	4770      	bx	lr
   8bcbc:	2000      	movs	r0, #0
   8bcbe:	bc70      	pop	{r4, r5, r6}
   8bcc0:	4770      	bx	lr
   8bcc2:	4614      	mov	r4, r2
   8bcc4:	2c03      	cmp	r4, #3
   8bcc6:	d80d      	bhi.n	8bce4 <memchr+0x50>
   8bcc8:	2c00      	cmp	r4, #0
   8bcca:	d0f7      	beq.n	8bcbc <memchr+0x28>
   8bccc:	4602      	mov	r2, r0
   8bcce:	1903      	adds	r3, r0, r4
   8bcd0:	e001      	b.n	8bcd6 <memchr+0x42>
   8bcd2:	429a      	cmp	r2, r3
   8bcd4:	d0f2      	beq.n	8bcbc <memchr+0x28>
   8bcd6:	4610      	mov	r0, r2
   8bcd8:	f812 1b01 	ldrb.w	r1, [r2], #1
   8bcdc:	42a9      	cmp	r1, r5
   8bcde:	d1f8      	bne.n	8bcd2 <memchr+0x3e>
   8bce0:	bc70      	pop	{r4, r5, r6}
   8bce2:	4770      	bx	lr
   8bce4:	4606      	mov	r6, r0
   8bce6:	020a      	lsls	r2, r1, #8
   8bce8:	b292      	uxth	r2, r2
   8bcea:	432a      	orrs	r2, r5
   8bcec:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8bcf0:	6833      	ldr	r3, [r6, #0]
   8bcf2:	4630      	mov	r0, r6
   8bcf4:	4053      	eors	r3, r2
   8bcf6:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8bcfa:	ea21 0303 	bic.w	r3, r1, r3
   8bcfe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8bd02:	f106 0604 	add.w	r6, r6, #4
   8bd06:	d1e1      	bne.n	8bccc <memchr+0x38>
   8bd08:	3c04      	subs	r4, #4
   8bd0a:	2c03      	cmp	r4, #3
   8bd0c:	4630      	mov	r0, r6
   8bd0e:	d8ef      	bhi.n	8bcf0 <memchr+0x5c>
   8bd10:	e7da      	b.n	8bcc8 <memchr+0x34>
   8bd12:	bf00      	nop

0008bd14 <memmove>:
   8bd14:	4288      	cmp	r0, r1
   8bd16:	b4f0      	push	{r4, r5, r6, r7}
   8bd18:	d90d      	bls.n	8bd36 <memmove+0x22>
   8bd1a:	188b      	adds	r3, r1, r2
   8bd1c:	4283      	cmp	r3, r0
   8bd1e:	d90a      	bls.n	8bd36 <memmove+0x22>
   8bd20:	1884      	adds	r4, r0, r2
   8bd22:	b132      	cbz	r2, 8bd32 <memmove+0x1e>
   8bd24:	4622      	mov	r2, r4
   8bd26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8bd2a:	4299      	cmp	r1, r3
   8bd2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8bd30:	d1f9      	bne.n	8bd26 <memmove+0x12>
   8bd32:	bcf0      	pop	{r4, r5, r6, r7}
   8bd34:	4770      	bx	lr
   8bd36:	2a0f      	cmp	r2, #15
   8bd38:	d80e      	bhi.n	8bd58 <memmove+0x44>
   8bd3a:	4603      	mov	r3, r0
   8bd3c:	1e54      	subs	r4, r2, #1
   8bd3e:	2a00      	cmp	r2, #0
   8bd40:	d0f7      	beq.n	8bd32 <memmove+0x1e>
   8bd42:	3401      	adds	r4, #1
   8bd44:	440c      	add	r4, r1
   8bd46:	3b01      	subs	r3, #1
   8bd48:	f811 2b01 	ldrb.w	r2, [r1], #1
   8bd4c:	42a1      	cmp	r1, r4
   8bd4e:	f803 2f01 	strb.w	r2, [r3, #1]!
   8bd52:	d1f9      	bne.n	8bd48 <memmove+0x34>
   8bd54:	bcf0      	pop	{r4, r5, r6, r7}
   8bd56:	4770      	bx	lr
   8bd58:	ea40 0301 	orr.w	r3, r0, r1
   8bd5c:	079b      	lsls	r3, r3, #30
   8bd5e:	d13e      	bne.n	8bdde <memmove+0xca>
   8bd60:	f1a2 0310 	sub.w	r3, r2, #16
   8bd64:	f023 040f 	bic.w	r4, r3, #15
   8bd68:	f101 0720 	add.w	r7, r1, #32
   8bd6c:	4427      	add	r7, r4
   8bd6e:	091b      	lsrs	r3, r3, #4
   8bd70:	f101 0410 	add.w	r4, r1, #16
   8bd74:	f100 0510 	add.w	r5, r0, #16
   8bd78:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8bd7c:	3410      	adds	r4, #16
   8bd7e:	f845 6c10 	str.w	r6, [r5, #-16]
   8bd82:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8bd86:	3510      	adds	r5, #16
   8bd88:	f845 6c1c 	str.w	r6, [r5, #-28]
   8bd8c:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8bd90:	f845 6c18 	str.w	r6, [r5, #-24]
   8bd94:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8bd98:	42bc      	cmp	r4, r7
   8bd9a:	f845 6c14 	str.w	r6, [r5, #-20]
   8bd9e:	d1eb      	bne.n	8bd78 <memmove+0x64>
   8bda0:	3301      	adds	r3, #1
   8bda2:	f012 0f0c 	tst.w	r2, #12
   8bda6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8bdaa:	f002 040f 	and.w	r4, r2, #15
   8bdae:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8bdb2:	d017      	beq.n	8bde4 <memmove+0xd0>
   8bdb4:	460e      	mov	r6, r1
   8bdb6:	3c04      	subs	r4, #4
   8bdb8:	f024 0c03 	bic.w	ip, r4, #3
   8bdbc:	08a5      	lsrs	r5, r4, #2
   8bdbe:	449c      	add	ip, r3
   8bdc0:	1f1c      	subs	r4, r3, #4
   8bdc2:	f856 7b04 	ldr.w	r7, [r6], #4
   8bdc6:	f844 7f04 	str.w	r7, [r4, #4]!
   8bdca:	4564      	cmp	r4, ip
   8bdcc:	d1f9      	bne.n	8bdc2 <memmove+0xae>
   8bdce:	1c6c      	adds	r4, r5, #1
   8bdd0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8bdd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8bdd8:	f002 0203 	and.w	r2, r2, #3
   8bddc:	e7ae      	b.n	8bd3c <memmove+0x28>
   8bdde:	4603      	mov	r3, r0
   8bde0:	1e54      	subs	r4, r2, #1
   8bde2:	e7ae      	b.n	8bd42 <memmove+0x2e>
   8bde4:	4622      	mov	r2, r4
   8bde6:	e7a9      	b.n	8bd3c <memmove+0x28>

0008bde8 <__malloc_lock>:
   8bde8:	4801      	ldr	r0, [pc, #4]	; (8bdf0 <__malloc_lock+0x8>)
   8bdea:	f7ff bc13 	b.w	8b614 <__retarget_lock_acquire_recursive>
   8bdee:	bf00      	nop
   8bdf0:	20001858 	.word	0x20001858

0008bdf4 <__malloc_unlock>:
   8bdf4:	4801      	ldr	r0, [pc, #4]	; (8bdfc <__malloc_unlock+0x8>)
   8bdf6:	f7ff bc0f 	b.w	8b618 <__retarget_lock_release_recursive>
   8bdfa:	bf00      	nop
   8bdfc:	20001858 	.word	0x20001858

0008be00 <_Balloc>:
   8be00:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8be02:	b570      	push	{r4, r5, r6, lr}
   8be04:	4605      	mov	r5, r0
   8be06:	460c      	mov	r4, r1
   8be08:	b14b      	cbz	r3, 8be1e <_Balloc+0x1e>
   8be0a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8be0e:	b180      	cbz	r0, 8be32 <_Balloc+0x32>
   8be10:	6802      	ldr	r2, [r0, #0]
   8be12:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8be16:	2300      	movs	r3, #0
   8be18:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8be1c:	bd70      	pop	{r4, r5, r6, pc}
   8be1e:	2221      	movs	r2, #33	; 0x21
   8be20:	2104      	movs	r1, #4
   8be22:	f000 ffc5 	bl	8cdb0 <_calloc_r>
   8be26:	4603      	mov	r3, r0
   8be28:	64e8      	str	r0, [r5, #76]	; 0x4c
   8be2a:	2800      	cmp	r0, #0
   8be2c:	d1ed      	bne.n	8be0a <_Balloc+0xa>
   8be2e:	2000      	movs	r0, #0
   8be30:	bd70      	pop	{r4, r5, r6, pc}
   8be32:	2101      	movs	r1, #1
   8be34:	fa01 f604 	lsl.w	r6, r1, r4
   8be38:	1d72      	adds	r2, r6, #5
   8be3a:	4628      	mov	r0, r5
   8be3c:	0092      	lsls	r2, r2, #2
   8be3e:	f000 ffb7 	bl	8cdb0 <_calloc_r>
   8be42:	2800      	cmp	r0, #0
   8be44:	d0f3      	beq.n	8be2e <_Balloc+0x2e>
   8be46:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8be4a:	e7e4      	b.n	8be16 <_Balloc+0x16>

0008be4c <_Bfree>:
   8be4c:	b131      	cbz	r1, 8be5c <_Bfree+0x10>
   8be4e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8be50:	684a      	ldr	r2, [r1, #4]
   8be52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8be56:	6008      	str	r0, [r1, #0]
   8be58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8be5c:	4770      	bx	lr
   8be5e:	bf00      	nop

0008be60 <__multadd>:
   8be60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8be64:	4680      	mov	r8, r0
   8be66:	461c      	mov	r4, r3
   8be68:	2000      	movs	r0, #0
   8be6a:	460f      	mov	r7, r1
   8be6c:	690e      	ldr	r6, [r1, #16]
   8be6e:	3114      	adds	r1, #20
   8be70:	680d      	ldr	r5, [r1, #0]
   8be72:	3001      	adds	r0, #1
   8be74:	b2ab      	uxth	r3, r5
   8be76:	fb02 4303 	mla	r3, r2, r3, r4
   8be7a:	0c2c      	lsrs	r4, r5, #16
   8be7c:	0c1d      	lsrs	r5, r3, #16
   8be7e:	fb02 5404 	mla	r4, r2, r4, r5
   8be82:	b29b      	uxth	r3, r3
   8be84:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8be88:	4286      	cmp	r6, r0
   8be8a:	f841 3b04 	str.w	r3, [r1], #4
   8be8e:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8be92:	dced      	bgt.n	8be70 <__multadd+0x10>
   8be94:	b13c      	cbz	r4, 8bea6 <__multadd+0x46>
   8be96:	68bb      	ldr	r3, [r7, #8]
   8be98:	42b3      	cmp	r3, r6
   8be9a:	dd07      	ble.n	8beac <__multadd+0x4c>
   8be9c:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8bea0:	3601      	adds	r6, #1
   8bea2:	615c      	str	r4, [r3, #20]
   8bea4:	613e      	str	r6, [r7, #16]
   8bea6:	4638      	mov	r0, r7
   8bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8beac:	6879      	ldr	r1, [r7, #4]
   8beae:	4640      	mov	r0, r8
   8beb0:	3101      	adds	r1, #1
   8beb2:	f7ff ffa5 	bl	8be00 <_Balloc>
   8beb6:	4605      	mov	r5, r0
   8beb8:	b1b0      	cbz	r0, 8bee8 <__multadd+0x88>
   8beba:	693a      	ldr	r2, [r7, #16]
   8bebc:	f107 010c 	add.w	r1, r7, #12
   8bec0:	3202      	adds	r2, #2
   8bec2:	0092      	lsls	r2, r2, #2
   8bec4:	300c      	adds	r0, #12
   8bec6:	f7fb f8cb 	bl	87060 <memcpy>
   8beca:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8bece:	687a      	ldr	r2, [r7, #4]
   8bed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8bed4:	6039      	str	r1, [r7, #0]
   8bed6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8beda:	462f      	mov	r7, r5
   8bedc:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8bee0:	3601      	adds	r6, #1
   8bee2:	615c      	str	r4, [r3, #20]
   8bee4:	613e      	str	r6, [r7, #16]
   8bee6:	e7de      	b.n	8bea6 <__multadd+0x46>
   8bee8:	4602      	mov	r2, r0
   8beea:	21b5      	movs	r1, #181	; 0xb5
   8beec:	4b01      	ldr	r3, [pc, #4]	; (8bef4 <__multadd+0x94>)
   8beee:	4802      	ldr	r0, [pc, #8]	; (8bef8 <__multadd+0x98>)
   8bef0:	f000 ff40 	bl	8cd74 <__assert_func>
   8bef4:	0008db08 	.word	0x0008db08
   8bef8:	0008dba8 	.word	0x0008dba8

0008befc <__hi0bits>:
   8befc:	0c02      	lsrs	r2, r0, #16
   8befe:	0412      	lsls	r2, r2, #16
   8bf00:	4603      	mov	r3, r0
   8bf02:	b9ca      	cbnz	r2, 8bf38 <__hi0bits+0x3c>
   8bf04:	0403      	lsls	r3, r0, #16
   8bf06:	2010      	movs	r0, #16
   8bf08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8bf0c:	bf04      	itt	eq
   8bf0e:	021b      	lsleq	r3, r3, #8
   8bf10:	3008      	addeq	r0, #8
   8bf12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8bf16:	bf04      	itt	eq
   8bf18:	011b      	lsleq	r3, r3, #4
   8bf1a:	3004      	addeq	r0, #4
   8bf1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8bf20:	bf04      	itt	eq
   8bf22:	009b      	lsleq	r3, r3, #2
   8bf24:	3002      	addeq	r0, #2
   8bf26:	2b00      	cmp	r3, #0
   8bf28:	db05      	blt.n	8bf36 <__hi0bits+0x3a>
   8bf2a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8bf2e:	f100 0001 	add.w	r0, r0, #1
   8bf32:	bf08      	it	eq
   8bf34:	2020      	moveq	r0, #32
   8bf36:	4770      	bx	lr
   8bf38:	2000      	movs	r0, #0
   8bf3a:	e7e5      	b.n	8bf08 <__hi0bits+0xc>

0008bf3c <__lo0bits>:
   8bf3c:	6803      	ldr	r3, [r0, #0]
   8bf3e:	4601      	mov	r1, r0
   8bf40:	f013 0207 	ands.w	r2, r3, #7
   8bf44:	d007      	beq.n	8bf56 <__lo0bits+0x1a>
   8bf46:	07da      	lsls	r2, r3, #31
   8bf48:	d420      	bmi.n	8bf8c <__lo0bits+0x50>
   8bf4a:	0798      	lsls	r0, r3, #30
   8bf4c:	d522      	bpl.n	8bf94 <__lo0bits+0x58>
   8bf4e:	085b      	lsrs	r3, r3, #1
   8bf50:	2001      	movs	r0, #1
   8bf52:	600b      	str	r3, [r1, #0]
   8bf54:	4770      	bx	lr
   8bf56:	b298      	uxth	r0, r3
   8bf58:	b1a8      	cbz	r0, 8bf86 <__lo0bits+0x4a>
   8bf5a:	4610      	mov	r0, r2
   8bf5c:	f013 0fff 	tst.w	r3, #255	; 0xff
   8bf60:	bf04      	itt	eq
   8bf62:	0a1b      	lsreq	r3, r3, #8
   8bf64:	3008      	addeq	r0, #8
   8bf66:	071a      	lsls	r2, r3, #28
   8bf68:	bf04      	itt	eq
   8bf6a:	091b      	lsreq	r3, r3, #4
   8bf6c:	3004      	addeq	r0, #4
   8bf6e:	079a      	lsls	r2, r3, #30
   8bf70:	bf04      	itt	eq
   8bf72:	089b      	lsreq	r3, r3, #2
   8bf74:	3002      	addeq	r0, #2
   8bf76:	07da      	lsls	r2, r3, #31
   8bf78:	d403      	bmi.n	8bf82 <__lo0bits+0x46>
   8bf7a:	085b      	lsrs	r3, r3, #1
   8bf7c:	f100 0001 	add.w	r0, r0, #1
   8bf80:	d006      	beq.n	8bf90 <__lo0bits+0x54>
   8bf82:	600b      	str	r3, [r1, #0]
   8bf84:	4770      	bx	lr
   8bf86:	2010      	movs	r0, #16
   8bf88:	0c1b      	lsrs	r3, r3, #16
   8bf8a:	e7e7      	b.n	8bf5c <__lo0bits+0x20>
   8bf8c:	2000      	movs	r0, #0
   8bf8e:	4770      	bx	lr
   8bf90:	2020      	movs	r0, #32
   8bf92:	4770      	bx	lr
   8bf94:	089b      	lsrs	r3, r3, #2
   8bf96:	2002      	movs	r0, #2
   8bf98:	600b      	str	r3, [r1, #0]
   8bf9a:	4770      	bx	lr

0008bf9c <__i2b>:
   8bf9c:	b510      	push	{r4, lr}
   8bf9e:	460c      	mov	r4, r1
   8bfa0:	2101      	movs	r1, #1
   8bfa2:	f7ff ff2d 	bl	8be00 <_Balloc>
   8bfa6:	4602      	mov	r2, r0
   8bfa8:	b118      	cbz	r0, 8bfb2 <__i2b+0x16>
   8bfaa:	2301      	movs	r3, #1
   8bfac:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8bfb0:	bd10      	pop	{r4, pc}
   8bfb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8bfb6:	4b02      	ldr	r3, [pc, #8]	; (8bfc0 <__i2b+0x24>)
   8bfb8:	4802      	ldr	r0, [pc, #8]	; (8bfc4 <__i2b+0x28>)
   8bfba:	f000 fedb 	bl	8cd74 <__assert_func>
   8bfbe:	bf00      	nop
   8bfc0:	0008db08 	.word	0x0008db08
   8bfc4:	0008dba8 	.word	0x0008dba8

0008bfc8 <__multiply>:
   8bfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bfcc:	690d      	ldr	r5, [r1, #16]
   8bfce:	6917      	ldr	r7, [r2, #16]
   8bfd0:	460e      	mov	r6, r1
   8bfd2:	42bd      	cmp	r5, r7
   8bfd4:	4614      	mov	r4, r2
   8bfd6:	b085      	sub	sp, #20
   8bfd8:	db05      	blt.n	8bfe6 <__multiply+0x1e>
   8bfda:	463a      	mov	r2, r7
   8bfdc:	4623      	mov	r3, r4
   8bfde:	462f      	mov	r7, r5
   8bfe0:	460c      	mov	r4, r1
   8bfe2:	4615      	mov	r5, r2
   8bfe4:	461e      	mov	r6, r3
   8bfe6:	68a3      	ldr	r3, [r4, #8]
   8bfe8:	6861      	ldr	r1, [r4, #4]
   8bfea:	eb07 0805 	add.w	r8, r7, r5
   8bfee:	4543      	cmp	r3, r8
   8bff0:	bfb8      	it	lt
   8bff2:	3101      	addlt	r1, #1
   8bff4:	f7ff ff04 	bl	8be00 <_Balloc>
   8bff8:	9001      	str	r0, [sp, #4]
   8bffa:	2800      	cmp	r0, #0
   8bffc:	f000 8088 	beq.w	8c110 <__multiply+0x148>
   8c000:	9b01      	ldr	r3, [sp, #4]
   8c002:	f103 0914 	add.w	r9, r3, #20
   8c006:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8c00a:	45d1      	cmp	r9, sl
   8c00c:	d205      	bcs.n	8c01a <__multiply+0x52>
   8c00e:	464b      	mov	r3, r9
   8c010:	2200      	movs	r2, #0
   8c012:	f843 2b04 	str.w	r2, [r3], #4
   8c016:	459a      	cmp	sl, r3
   8c018:	d8fb      	bhi.n	8c012 <__multiply+0x4a>
   8c01a:	f106 0e14 	add.w	lr, r6, #20
   8c01e:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8c022:	f104 0314 	add.w	r3, r4, #20
   8c026:	45de      	cmp	lr, fp
   8c028:	461a      	mov	r2, r3
   8c02a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8c02e:	d23e      	bcs.n	8c0ae <__multiply+0xe6>
   8c030:	1b3b      	subs	r3, r7, r4
   8c032:	3b15      	subs	r3, #21
   8c034:	f023 0303 	bic.w	r3, r3, #3
   8c038:	3304      	adds	r3, #4
   8c03a:	3415      	adds	r4, #21
   8c03c:	42a7      	cmp	r7, r4
   8c03e:	bf38      	it	cc
   8c040:	2304      	movcc	r3, #4
   8c042:	e9cd a802 	strd	sl, r8, [sp, #8]
   8c046:	4698      	mov	r8, r3
   8c048:	4692      	mov	sl, r2
   8c04a:	e003      	b.n	8c054 <__multiply+0x8c>
   8c04c:	45f3      	cmp	fp, lr
   8c04e:	f109 0904 	add.w	r9, r9, #4
   8c052:	d92a      	bls.n	8c0aa <__multiply+0xe2>
   8c054:	f85e 0b04 	ldr.w	r0, [lr], #4
   8c058:	b286      	uxth	r6, r0
   8c05a:	2e00      	cmp	r6, #0
   8c05c:	d138      	bne.n	8c0d0 <__multiply+0x108>
   8c05e:	0c00      	lsrs	r0, r0, #16
   8c060:	d0f4      	beq.n	8c04c <__multiply+0x84>
   8c062:	f8d9 3000 	ldr.w	r3, [r9]
   8c066:	4654      	mov	r4, sl
   8c068:	461e      	mov	r6, r3
   8c06a:	464d      	mov	r5, r9
   8c06c:	f04f 0c00 	mov.w	ip, #0
   8c070:	8822      	ldrh	r2, [r4, #0]
   8c072:	0c36      	lsrs	r6, r6, #16
   8c074:	fb00 6602 	mla	r6, r0, r2, r6
   8c078:	b29b      	uxth	r3, r3
   8c07a:	44b4      	add	ip, r6
   8c07c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8c080:	f845 3b04 	str.w	r3, [r5], #4
   8c084:	f854 3b04 	ldr.w	r3, [r4], #4
   8c088:	682e      	ldr	r6, [r5, #0]
   8c08a:	0c1b      	lsrs	r3, r3, #16
   8c08c:	b2b2      	uxth	r2, r6
   8c08e:	fb00 2303 	mla	r3, r0, r3, r2
   8c092:	42a7      	cmp	r7, r4
   8c094:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8c098:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8c09c:	d8e8      	bhi.n	8c070 <__multiply+0xa8>
   8c09e:	45f3      	cmp	fp, lr
   8c0a0:	f849 3008 	str.w	r3, [r9, r8]
   8c0a4:	f109 0904 	add.w	r9, r9, #4
   8c0a8:	d8d4      	bhi.n	8c054 <__multiply+0x8c>
   8c0aa:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8c0ae:	f1b8 0f00 	cmp.w	r8, #0
   8c0b2:	dc03      	bgt.n	8c0bc <__multiply+0xf4>
   8c0b4:	e006      	b.n	8c0c4 <__multiply+0xfc>
   8c0b6:	f1b8 0801 	subs.w	r8, r8, #1
   8c0ba:	d003      	beq.n	8c0c4 <__multiply+0xfc>
   8c0bc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8c0c0:	2b00      	cmp	r3, #0
   8c0c2:	d0f8      	beq.n	8c0b6 <__multiply+0xee>
   8c0c4:	9801      	ldr	r0, [sp, #4]
   8c0c6:	f8c0 8010 	str.w	r8, [r0, #16]
   8c0ca:	b005      	add	sp, #20
   8c0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c0d0:	4655      	mov	r5, sl
   8c0d2:	464c      	mov	r4, r9
   8c0d4:	2300      	movs	r3, #0
   8c0d6:	f855 1b04 	ldr.w	r1, [r5], #4
   8c0da:	6820      	ldr	r0, [r4, #0]
   8c0dc:	b28a      	uxth	r2, r1
   8c0de:	fa1f fc80 	uxth.w	ip, r0
   8c0e2:	fb06 c202 	mla	r2, r6, r2, ip
   8c0e6:	0c09      	lsrs	r1, r1, #16
   8c0e8:	0c00      	lsrs	r0, r0, #16
   8c0ea:	fb06 0101 	mla	r1, r6, r1, r0
   8c0ee:	4413      	add	r3, r2
   8c0f0:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8c0f4:	b29b      	uxth	r3, r3
   8c0f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8c0fa:	42af      	cmp	r7, r5
   8c0fc:	f844 3b04 	str.w	r3, [r4], #4
   8c100:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8c104:	d8e7      	bhi.n	8c0d6 <__multiply+0x10e>
   8c106:	f849 3008 	str.w	r3, [r9, r8]
   8c10a:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8c10e:	e7a6      	b.n	8c05e <__multiply+0x96>
   8c110:	4602      	mov	r2, r0
   8c112:	f240 115d 	movw	r1, #349	; 0x15d
   8c116:	4b02      	ldr	r3, [pc, #8]	; (8c120 <__multiply+0x158>)
   8c118:	4802      	ldr	r0, [pc, #8]	; (8c124 <__multiply+0x15c>)
   8c11a:	f000 fe2b 	bl	8cd74 <__assert_func>
   8c11e:	bf00      	nop
   8c120:	0008db08 	.word	0x0008db08
   8c124:	0008dba8 	.word	0x0008dba8

0008c128 <__pow5mult>:
   8c128:	f012 0303 	ands.w	r3, r2, #3
   8c12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c130:	4614      	mov	r4, r2
   8c132:	4607      	mov	r7, r0
   8c134:	d12e      	bne.n	8c194 <__pow5mult+0x6c>
   8c136:	460e      	mov	r6, r1
   8c138:	10a4      	asrs	r4, r4, #2
   8c13a:	d01c      	beq.n	8c176 <__pow5mult+0x4e>
   8c13c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8c13e:	b395      	cbz	r5, 8c1a6 <__pow5mult+0x7e>
   8c140:	07e3      	lsls	r3, r4, #31
   8c142:	f04f 0800 	mov.w	r8, #0
   8c146:	d406      	bmi.n	8c156 <__pow5mult+0x2e>
   8c148:	1064      	asrs	r4, r4, #1
   8c14a:	d014      	beq.n	8c176 <__pow5mult+0x4e>
   8c14c:	6828      	ldr	r0, [r5, #0]
   8c14e:	b1a8      	cbz	r0, 8c17c <__pow5mult+0x54>
   8c150:	4605      	mov	r5, r0
   8c152:	07e3      	lsls	r3, r4, #31
   8c154:	d5f8      	bpl.n	8c148 <__pow5mult+0x20>
   8c156:	462a      	mov	r2, r5
   8c158:	4631      	mov	r1, r6
   8c15a:	4638      	mov	r0, r7
   8c15c:	f7ff ff34 	bl	8bfc8 <__multiply>
   8c160:	b1b6      	cbz	r6, 8c190 <__pow5mult+0x68>
   8c162:	6871      	ldr	r1, [r6, #4]
   8c164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8c166:	1064      	asrs	r4, r4, #1
   8c168:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8c16c:	6032      	str	r2, [r6, #0]
   8c16e:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8c172:	4606      	mov	r6, r0
   8c174:	d1ea      	bne.n	8c14c <__pow5mult+0x24>
   8c176:	4630      	mov	r0, r6
   8c178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c17c:	462a      	mov	r2, r5
   8c17e:	4629      	mov	r1, r5
   8c180:	4638      	mov	r0, r7
   8c182:	f7ff ff21 	bl	8bfc8 <__multiply>
   8c186:	6028      	str	r0, [r5, #0]
   8c188:	4605      	mov	r5, r0
   8c18a:	f8c0 8000 	str.w	r8, [r0]
   8c18e:	e7e0      	b.n	8c152 <__pow5mult+0x2a>
   8c190:	4606      	mov	r6, r0
   8c192:	e7d9      	b.n	8c148 <__pow5mult+0x20>
   8c194:	4a09      	ldr	r2, [pc, #36]	; (8c1bc <__pow5mult+0x94>)
   8c196:	3b01      	subs	r3, #1
   8c198:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8c19c:	2300      	movs	r3, #0
   8c19e:	f7ff fe5f 	bl	8be60 <__multadd>
   8c1a2:	4606      	mov	r6, r0
   8c1a4:	e7c8      	b.n	8c138 <__pow5mult+0x10>
   8c1a6:	f240 2171 	movw	r1, #625	; 0x271
   8c1aa:	4638      	mov	r0, r7
   8c1ac:	f7ff fef6 	bl	8bf9c <__i2b>
   8c1b0:	2300      	movs	r3, #0
   8c1b2:	64b8      	str	r0, [r7, #72]	; 0x48
   8c1b4:	4605      	mov	r5, r0
   8c1b6:	6003      	str	r3, [r0, #0]
   8c1b8:	e7c2      	b.n	8c140 <__pow5mult+0x18>
   8c1ba:	bf00      	nop
   8c1bc:	0008dd18 	.word	0x0008dd18

0008c1c0 <__lshift>:
   8c1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c1c4:	690f      	ldr	r7, [r1, #16]
   8c1c6:	688b      	ldr	r3, [r1, #8]
   8c1c8:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8c1cc:	1c7e      	adds	r6, r7, #1
   8c1ce:	429e      	cmp	r6, r3
   8c1d0:	460d      	mov	r5, r1
   8c1d2:	4691      	mov	r9, r2
   8c1d4:	4680      	mov	r8, r0
   8c1d6:	6849      	ldr	r1, [r1, #4]
   8c1d8:	ea4f 1462 	mov.w	r4, r2, asr #5
   8c1dc:	dd04      	ble.n	8c1e8 <__lshift+0x28>
   8c1de:	005b      	lsls	r3, r3, #1
   8c1e0:	429e      	cmp	r6, r3
   8c1e2:	f101 0101 	add.w	r1, r1, #1
   8c1e6:	dcfa      	bgt.n	8c1de <__lshift+0x1e>
   8c1e8:	4640      	mov	r0, r8
   8c1ea:	f7ff fe09 	bl	8be00 <_Balloc>
   8c1ee:	2800      	cmp	r0, #0
   8c1f0:	d04f      	beq.n	8c292 <__lshift+0xd2>
   8c1f2:	2c00      	cmp	r4, #0
   8c1f4:	f100 0114 	add.w	r1, r0, #20
   8c1f8:	dd0d      	ble.n	8c216 <__lshift+0x56>
   8c1fa:	460b      	mov	r3, r1
   8c1fc:	2200      	movs	r2, #0
   8c1fe:	3405      	adds	r4, #5
   8c200:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8c204:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8c208:	f843 2b04 	str.w	r2, [r3], #4
   8c20c:	42a3      	cmp	r3, r4
   8c20e:	d1fb      	bne.n	8c208 <__lshift+0x48>
   8c210:	f1ac 0314 	sub.w	r3, ip, #20
   8c214:	4419      	add	r1, r3
   8c216:	692c      	ldr	r4, [r5, #16]
   8c218:	f105 0314 	add.w	r3, r5, #20
   8c21c:	f019 091f 	ands.w	r9, r9, #31
   8c220:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8c224:	d02d      	beq.n	8c282 <__lshift+0xc2>
   8c226:	468e      	mov	lr, r1
   8c228:	f04f 0a00 	mov.w	sl, #0
   8c22c:	f1c9 0220 	rsb	r2, r9, #32
   8c230:	681c      	ldr	r4, [r3, #0]
   8c232:	fa04 f409 	lsl.w	r4, r4, r9
   8c236:	ea44 040a 	orr.w	r4, r4, sl
   8c23a:	f84e 4b04 	str.w	r4, [lr], #4
   8c23e:	f853 4b04 	ldr.w	r4, [r3], #4
   8c242:	459c      	cmp	ip, r3
   8c244:	fa24 fa02 	lsr.w	sl, r4, r2
   8c248:	d8f2      	bhi.n	8c230 <__lshift+0x70>
   8c24a:	ebac 0305 	sub.w	r3, ip, r5
   8c24e:	3b15      	subs	r3, #21
   8c250:	f023 0303 	bic.w	r3, r3, #3
   8c254:	3304      	adds	r3, #4
   8c256:	f105 0215 	add.w	r2, r5, #21
   8c25a:	4594      	cmp	ip, r2
   8c25c:	bf38      	it	cc
   8c25e:	2304      	movcc	r3, #4
   8c260:	f1ba 0f00 	cmp.w	sl, #0
   8c264:	bf18      	it	ne
   8c266:	4637      	movne	r7, r6
   8c268:	f841 a003 	str.w	sl, [r1, r3]
   8c26c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8c270:	686a      	ldr	r2, [r5, #4]
   8c272:	6107      	str	r7, [r0, #16]
   8c274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8c278:	6029      	str	r1, [r5, #0]
   8c27a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8c27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c282:	3904      	subs	r1, #4
   8c284:	f853 2b04 	ldr.w	r2, [r3], #4
   8c288:	459c      	cmp	ip, r3
   8c28a:	f841 2f04 	str.w	r2, [r1, #4]!
   8c28e:	d8f9      	bhi.n	8c284 <__lshift+0xc4>
   8c290:	e7ec      	b.n	8c26c <__lshift+0xac>
   8c292:	4602      	mov	r2, r0
   8c294:	f240 11d9 	movw	r1, #473	; 0x1d9
   8c298:	4b01      	ldr	r3, [pc, #4]	; (8c2a0 <__lshift+0xe0>)
   8c29a:	4802      	ldr	r0, [pc, #8]	; (8c2a4 <__lshift+0xe4>)
   8c29c:	f000 fd6a 	bl	8cd74 <__assert_func>
   8c2a0:	0008db08 	.word	0x0008db08
   8c2a4:	0008dba8 	.word	0x0008dba8

0008c2a8 <__mcmp>:
   8c2a8:	b430      	push	{r4, r5}
   8c2aa:	690b      	ldr	r3, [r1, #16]
   8c2ac:	4605      	mov	r5, r0
   8c2ae:	6900      	ldr	r0, [r0, #16]
   8c2b0:	1ac0      	subs	r0, r0, r3
   8c2b2:	d111      	bne.n	8c2d8 <__mcmp+0x30>
   8c2b4:	3514      	adds	r5, #20
   8c2b6:	3114      	adds	r1, #20
   8c2b8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8c2bc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8c2c0:	e001      	b.n	8c2c6 <__mcmp+0x1e>
   8c2c2:	429d      	cmp	r5, r3
   8c2c4:	d208      	bcs.n	8c2d8 <__mcmp+0x30>
   8c2c6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8c2ca:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8c2ce:	428c      	cmp	r4, r1
   8c2d0:	d0f7      	beq.n	8c2c2 <__mcmp+0x1a>
   8c2d2:	d203      	bcs.n	8c2dc <__mcmp+0x34>
   8c2d4:	f04f 30ff 	mov.w	r0, #4294967295
   8c2d8:	bc30      	pop	{r4, r5}
   8c2da:	4770      	bx	lr
   8c2dc:	2001      	movs	r0, #1
   8c2de:	bc30      	pop	{r4, r5}
   8c2e0:	4770      	bx	lr
   8c2e2:	bf00      	nop

0008c2e4 <__mdiff>:
   8c2e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c2e8:	690b      	ldr	r3, [r1, #16]
   8c2ea:	460c      	mov	r4, r1
   8c2ec:	6911      	ldr	r1, [r2, #16]
   8c2ee:	4690      	mov	r8, r2
   8c2f0:	eba3 0b01 	sub.w	fp, r3, r1
   8c2f4:	f1bb 0f00 	cmp.w	fp, #0
   8c2f8:	d17c      	bne.n	8c3f4 <__mdiff+0x110>
   8c2fa:	f104 0614 	add.w	r6, r4, #20
   8c2fe:	3214      	adds	r2, #20
   8c300:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8c304:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8c308:	e001      	b.n	8c30e <__mdiff+0x2a>
   8c30a:	429e      	cmp	r6, r3
   8c30c:	d276      	bcs.n	8c3fc <__mdiff+0x118>
   8c30e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8c312:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8c316:	428d      	cmp	r5, r1
   8c318:	d0f7      	beq.n	8c30a <__mdiff+0x26>
   8c31a:	d365      	bcc.n	8c3e8 <__mdiff+0x104>
   8c31c:	6861      	ldr	r1, [r4, #4]
   8c31e:	f7ff fd6f 	bl	8be00 <_Balloc>
   8c322:	2800      	cmp	r0, #0
   8c324:	d074      	beq.n	8c410 <__mdiff+0x12c>
   8c326:	f100 0614 	add.w	r6, r0, #20
   8c32a:	46b4      	mov	ip, r6
   8c32c:	2300      	movs	r3, #0
   8c32e:	6927      	ldr	r7, [r4, #16]
   8c330:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8c334:	f104 0a14 	add.w	sl, r4, #20
   8c338:	f108 0514 	add.w	r5, r8, #20
   8c33c:	f8c0 b00c 	str.w	fp, [r0, #12]
   8c340:	3410      	adds	r4, #16
   8c342:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8c346:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8c34a:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8c34e:	f855 bb04 	ldr.w	fp, [r5], #4
   8c352:	b291      	uxth	r1, r2
   8c354:	440b      	add	r3, r1
   8c356:	fa1f f18b 	uxth.w	r1, fp
   8c35a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8c35e:	1a59      	subs	r1, r3, r1
   8c360:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8c364:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8c368:	b289      	uxth	r1, r1
   8c36a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8c36e:	45a9      	cmp	r9, r5
   8c370:	f84c 1b04 	str.w	r1, [ip], #4
   8c374:	ea4f 4323 	mov.w	r3, r3, asr #16
   8c378:	d8e7      	bhi.n	8c34a <__mdiff+0x66>
   8c37a:	eba9 0208 	sub.w	r2, r9, r8
   8c37e:	3a15      	subs	r2, #21
   8c380:	f108 0815 	add.w	r8, r8, #21
   8c384:	45c1      	cmp	r9, r8
   8c386:	f022 0403 	bic.w	r4, r2, #3
   8c38a:	f104 0404 	add.w	r4, r4, #4
   8c38e:	bf38      	it	cc
   8c390:	2404      	movcc	r4, #4
   8c392:	f022 0203 	bic.w	r2, r2, #3
   8c396:	bf38      	it	cc
   8c398:	2200      	movcc	r2, #0
   8c39a:	44a2      	add	sl, r4
   8c39c:	45d6      	cmp	lr, sl
   8c39e:	4434      	add	r4, r6
   8c3a0:	4416      	add	r6, r2
   8c3a2:	d918      	bls.n	8c3d6 <__mdiff+0xf2>
   8c3a4:	4625      	mov	r5, r4
   8c3a6:	4652      	mov	r2, sl
   8c3a8:	f852 6b04 	ldr.w	r6, [r2], #4
   8c3ac:	b2b1      	uxth	r1, r6
   8c3ae:	4419      	add	r1, r3
   8c3b0:	140b      	asrs	r3, r1, #16
   8c3b2:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8c3b6:	b289      	uxth	r1, r1
   8c3b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8c3bc:	4596      	cmp	lr, r2
   8c3be:	f845 1b04 	str.w	r1, [r5], #4
   8c3c2:	ea4f 4323 	mov.w	r3, r3, asr #16
   8c3c6:	d8ef      	bhi.n	8c3a8 <__mdiff+0xc4>
   8c3c8:	f10e 36ff 	add.w	r6, lr, #4294967295
   8c3cc:	eba6 060a 	sub.w	r6, r6, sl
   8c3d0:	f026 0603 	bic.w	r6, r6, #3
   8c3d4:	4426      	add	r6, r4
   8c3d6:	b921      	cbnz	r1, 8c3e2 <__mdiff+0xfe>
   8c3d8:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8c3dc:	3f01      	subs	r7, #1
   8c3de:	2b00      	cmp	r3, #0
   8c3e0:	d0fa      	beq.n	8c3d8 <__mdiff+0xf4>
   8c3e2:	6107      	str	r7, [r0, #16]
   8c3e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c3e8:	4623      	mov	r3, r4
   8c3ea:	f04f 0b01 	mov.w	fp, #1
   8c3ee:	4644      	mov	r4, r8
   8c3f0:	4698      	mov	r8, r3
   8c3f2:	e793      	b.n	8c31c <__mdiff+0x38>
   8c3f4:	dbf8      	blt.n	8c3e8 <__mdiff+0x104>
   8c3f6:	f04f 0b00 	mov.w	fp, #0
   8c3fa:	e78f      	b.n	8c31c <__mdiff+0x38>
   8c3fc:	2100      	movs	r1, #0
   8c3fe:	f7ff fcff 	bl	8be00 <_Balloc>
   8c402:	b160      	cbz	r0, 8c41e <__mdiff+0x13a>
   8c404:	2201      	movs	r2, #1
   8c406:	2300      	movs	r3, #0
   8c408:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8c40c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c410:	4602      	mov	r2, r0
   8c412:	f44f 7110 	mov.w	r1, #576	; 0x240
   8c416:	4b05      	ldr	r3, [pc, #20]	; (8c42c <__mdiff+0x148>)
   8c418:	4805      	ldr	r0, [pc, #20]	; (8c430 <__mdiff+0x14c>)
   8c41a:	f000 fcab 	bl	8cd74 <__assert_func>
   8c41e:	4602      	mov	r2, r0
   8c420:	f240 2132 	movw	r1, #562	; 0x232
   8c424:	4b01      	ldr	r3, [pc, #4]	; (8c42c <__mdiff+0x148>)
   8c426:	4802      	ldr	r0, [pc, #8]	; (8c430 <__mdiff+0x14c>)
   8c428:	f000 fca4 	bl	8cd74 <__assert_func>
   8c42c:	0008db08 	.word	0x0008db08
   8c430:	0008dba8 	.word	0x0008dba8

0008c434 <__d2b>:
   8c434:	b570      	push	{r4, r5, r6, lr}
   8c436:	2101      	movs	r1, #1
   8c438:	b082      	sub	sp, #8
   8c43a:	4616      	mov	r6, r2
   8c43c:	461d      	mov	r5, r3
   8c43e:	f7ff fcdf 	bl	8be00 <_Balloc>
   8c442:	4604      	mov	r4, r0
   8c444:	2800      	cmp	r0, #0
   8c446:	d04c      	beq.n	8c4e2 <__d2b+0xae>
   8c448:	462b      	mov	r3, r5
   8c44a:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8c44e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8c452:	b10d      	cbz	r5, 8c458 <__d2b+0x24>
   8c454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c458:	2e00      	cmp	r6, #0
   8c45a:	9301      	str	r3, [sp, #4]
   8c45c:	d022      	beq.n	8c4a4 <__d2b+0x70>
   8c45e:	4668      	mov	r0, sp
   8c460:	9600      	str	r6, [sp, #0]
   8c462:	f7ff fd6b 	bl	8bf3c <__lo0bits>
   8c466:	2800      	cmp	r0, #0
   8c468:	d037      	beq.n	8c4da <__d2b+0xa6>
   8c46a:	9b01      	ldr	r3, [sp, #4]
   8c46c:	9900      	ldr	r1, [sp, #0]
   8c46e:	f1c0 0220 	rsb	r2, r0, #32
   8c472:	fa03 f202 	lsl.w	r2, r3, r2
   8c476:	430a      	orrs	r2, r1
   8c478:	40c3      	lsrs	r3, r0
   8c47a:	9301      	str	r3, [sp, #4]
   8c47c:	6162      	str	r2, [r4, #20]
   8c47e:	2b00      	cmp	r3, #0
   8c480:	bf14      	ite	ne
   8c482:	2102      	movne	r1, #2
   8c484:	2101      	moveq	r1, #1
   8c486:	61a3      	str	r3, [r4, #24]
   8c488:	6121      	str	r1, [r4, #16]
   8c48a:	b1b5      	cbz	r5, 8c4ba <__d2b+0x86>
   8c48c:	9a06      	ldr	r2, [sp, #24]
   8c48e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8c492:	4403      	add	r3, r0
   8c494:	6013      	str	r3, [r2, #0]
   8c496:	9b07      	ldr	r3, [sp, #28]
   8c498:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8c49c:	6018      	str	r0, [r3, #0]
   8c49e:	4620      	mov	r0, r4
   8c4a0:	b002      	add	sp, #8
   8c4a2:	bd70      	pop	{r4, r5, r6, pc}
   8c4a4:	a801      	add	r0, sp, #4
   8c4a6:	f7ff fd49 	bl	8bf3c <__lo0bits>
   8c4aa:	2301      	movs	r3, #1
   8c4ac:	9a01      	ldr	r2, [sp, #4]
   8c4ae:	4619      	mov	r1, r3
   8c4b0:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8c4b4:	3020      	adds	r0, #32
   8c4b6:	2d00      	cmp	r5, #0
   8c4b8:	d1e8      	bne.n	8c48c <__d2b+0x58>
   8c4ba:	9a06      	ldr	r2, [sp, #24]
   8c4bc:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8c4c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8c4c4:	6010      	str	r0, [r2, #0]
   8c4c6:	6918      	ldr	r0, [r3, #16]
   8c4c8:	f7ff fd18 	bl	8befc <__hi0bits>
   8c4cc:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8c4d0:	4620      	mov	r0, r4
   8c4d2:	9b07      	ldr	r3, [sp, #28]
   8c4d4:	6019      	str	r1, [r3, #0]
   8c4d6:	b002      	add	sp, #8
   8c4d8:	bd70      	pop	{r4, r5, r6, pc}
   8c4da:	e9dd 2300 	ldrd	r2, r3, [sp]
   8c4de:	6162      	str	r2, [r4, #20]
   8c4e0:	e7cd      	b.n	8c47e <__d2b+0x4a>
   8c4e2:	4602      	mov	r2, r0
   8c4e4:	f240 310a 	movw	r1, #778	; 0x30a
   8c4e8:	4b01      	ldr	r3, [pc, #4]	; (8c4f0 <__d2b+0xbc>)
   8c4ea:	4802      	ldr	r0, [pc, #8]	; (8c4f4 <__d2b+0xc0>)
   8c4ec:	f000 fc42 	bl	8cd74 <__assert_func>
   8c4f0:	0008db08 	.word	0x0008db08
   8c4f4:	0008dba8 	.word	0x0008dba8

0008c4f8 <_realloc_r>:
   8c4f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c4fc:	4616      	mov	r6, r2
   8c4fe:	2900      	cmp	r1, #0
   8c500:	f000 80bd 	beq.w	8c67e <_realloc_r+0x186>
   8c504:	f106 050b 	add.w	r5, r6, #11
   8c508:	460c      	mov	r4, r1
   8c50a:	4680      	mov	r8, r0
   8c50c:	f7ff fc6c 	bl	8bde8 <__malloc_lock>
   8c510:	2d16      	cmp	r5, #22
   8c512:	d85f      	bhi.n	8c5d4 <_realloc_r+0xdc>
   8c514:	2510      	movs	r5, #16
   8c516:	462a      	mov	r2, r5
   8c518:	42ae      	cmp	r6, r5
   8c51a:	d860      	bhi.n	8c5de <_realloc_r+0xe6>
   8c51c:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8c520:	f1a4 0908 	sub.w	r9, r4, #8
   8c524:	f021 0703 	bic.w	r7, r1, #3
   8c528:	4297      	cmp	r7, r2
   8c52a:	f280 8086 	bge.w	8c63a <_realloc_r+0x142>
   8c52e:	4bc9      	ldr	r3, [pc, #804]	; (8c854 <_realloc_r+0x35c>)
   8c530:	eb09 0007 	add.w	r0, r9, r7
   8c534:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8c538:	4584      	cmp	ip, r0
   8c53a:	f000 80b9 	beq.w	8c6b0 <_realloc_r+0x1b8>
   8c53e:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8c542:	f02c 0301 	bic.w	r3, ip, #1
   8c546:	4403      	add	r3, r0
   8c548:	685b      	ldr	r3, [r3, #4]
   8c54a:	07db      	lsls	r3, r3, #31
   8c54c:	f100 808c 	bmi.w	8c668 <_realloc_r+0x170>
   8c550:	f02c 0c03 	bic.w	ip, ip, #3
   8c554:	eb07 030c 	add.w	r3, r7, ip
   8c558:	4293      	cmp	r3, r2
   8c55a:	f280 8115 	bge.w	8c788 <_realloc_r+0x290>
   8c55e:	07cb      	lsls	r3, r1, #31
   8c560:	d40f      	bmi.n	8c582 <_realloc_r+0x8a>
   8c562:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8c566:	eba9 0a03 	sub.w	sl, r9, r3
   8c56a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8c56e:	f023 0103 	bic.w	r1, r3, #3
   8c572:	448c      	add	ip, r1
   8c574:	44bc      	add	ip, r7
   8c576:	4594      	cmp	ip, r2
   8c578:	da38      	bge.n	8c5ec <_realloc_r+0xf4>
   8c57a:	187b      	adds	r3, r7, r1
   8c57c:	4293      	cmp	r3, r2
   8c57e:	f280 810f 	bge.w	8c7a0 <_realloc_r+0x2a8>
   8c582:	4631      	mov	r1, r6
   8c584:	4640      	mov	r0, r8
   8c586:	f7ff f8c1 	bl	8b70c <_malloc_r>
   8c58a:	4606      	mov	r6, r0
   8c58c:	b1e0      	cbz	r0, 8c5c8 <_realloc_r+0xd0>
   8c58e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c592:	f1a0 0208 	sub.w	r2, r0, #8
   8c596:	f023 0301 	bic.w	r3, r3, #1
   8c59a:	444b      	add	r3, r9
   8c59c:	4293      	cmp	r3, r2
   8c59e:	f000 80f9 	beq.w	8c794 <_realloc_r+0x29c>
   8c5a2:	1f3a      	subs	r2, r7, #4
   8c5a4:	2a24      	cmp	r2, #36	; 0x24
   8c5a6:	f200 811c 	bhi.w	8c7e2 <_realloc_r+0x2ea>
   8c5aa:	2a13      	cmp	r2, #19
   8c5ac:	f200 80cd 	bhi.w	8c74a <_realloc_r+0x252>
   8c5b0:	4603      	mov	r3, r0
   8c5b2:	4622      	mov	r2, r4
   8c5b4:	6811      	ldr	r1, [r2, #0]
   8c5b6:	6019      	str	r1, [r3, #0]
   8c5b8:	6851      	ldr	r1, [r2, #4]
   8c5ba:	6059      	str	r1, [r3, #4]
   8c5bc:	6892      	ldr	r2, [r2, #8]
   8c5be:	609a      	str	r2, [r3, #8]
   8c5c0:	4621      	mov	r1, r4
   8c5c2:	4640      	mov	r0, r8
   8c5c4:	f7fe fd78 	bl	8b0b8 <_free_r>
   8c5c8:	4640      	mov	r0, r8
   8c5ca:	f7ff fc13 	bl	8bdf4 <__malloc_unlock>
   8c5ce:	4630      	mov	r0, r6
   8c5d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c5d4:	f025 0507 	bic.w	r5, r5, #7
   8c5d8:	2d00      	cmp	r5, #0
   8c5da:	462a      	mov	r2, r5
   8c5dc:	da9c      	bge.n	8c518 <_realloc_r+0x20>
   8c5de:	230c      	movs	r3, #12
   8c5e0:	2600      	movs	r6, #0
   8c5e2:	f8c8 3000 	str.w	r3, [r8]
   8c5e6:	4630      	mov	r0, r6
   8c5e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c5ec:	4656      	mov	r6, sl
   8c5ee:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8c5f2:	60cb      	str	r3, [r1, #12]
   8c5f4:	6099      	str	r1, [r3, #8]
   8c5f6:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8c5fa:	f8da 300c 	ldr.w	r3, [sl, #12]
   8c5fe:	1f3a      	subs	r2, r7, #4
   8c600:	2a24      	cmp	r2, #36	; 0x24
   8c602:	60cb      	str	r3, [r1, #12]
   8c604:	6099      	str	r1, [r3, #8]
   8c606:	f200 8107 	bhi.w	8c818 <_realloc_r+0x320>
   8c60a:	2a13      	cmp	r2, #19
   8c60c:	f240 8102 	bls.w	8c814 <_realloc_r+0x31c>
   8c610:	6823      	ldr	r3, [r4, #0]
   8c612:	2a1b      	cmp	r2, #27
   8c614:	f8ca 3008 	str.w	r3, [sl, #8]
   8c618:	6863      	ldr	r3, [r4, #4]
   8c61a:	f8ca 300c 	str.w	r3, [sl, #12]
   8c61e:	f200 811b 	bhi.w	8c858 <_realloc_r+0x360>
   8c622:	3408      	adds	r4, #8
   8c624:	f10a 0310 	add.w	r3, sl, #16
   8c628:	6822      	ldr	r2, [r4, #0]
   8c62a:	4667      	mov	r7, ip
   8c62c:	601a      	str	r2, [r3, #0]
   8c62e:	6862      	ldr	r2, [r4, #4]
   8c630:	46d1      	mov	r9, sl
   8c632:	605a      	str	r2, [r3, #4]
   8c634:	68a2      	ldr	r2, [r4, #8]
   8c636:	4634      	mov	r4, r6
   8c638:	609a      	str	r2, [r3, #8]
   8c63a:	1b7b      	subs	r3, r7, r5
   8c63c:	2b0f      	cmp	r3, #15
   8c63e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8c642:	d821      	bhi.n	8c688 <_realloc_r+0x190>
   8c644:	f002 0201 	and.w	r2, r2, #1
   8c648:	433a      	orrs	r2, r7
   8c64a:	eb09 0107 	add.w	r1, r9, r7
   8c64e:	f8c9 2004 	str.w	r2, [r9, #4]
   8c652:	684b      	ldr	r3, [r1, #4]
   8c654:	f043 0301 	orr.w	r3, r3, #1
   8c658:	604b      	str	r3, [r1, #4]
   8c65a:	4626      	mov	r6, r4
   8c65c:	4640      	mov	r0, r8
   8c65e:	f7ff fbc9 	bl	8bdf4 <__malloc_unlock>
   8c662:	4630      	mov	r0, r6
   8c664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c668:	07c9      	lsls	r1, r1, #31
   8c66a:	d48a      	bmi.n	8c582 <_realloc_r+0x8a>
   8c66c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8c670:	eba9 0a03 	sub.w	sl, r9, r3
   8c674:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c678:	f021 0103 	bic.w	r1, r1, #3
   8c67c:	e77d      	b.n	8c57a <_realloc_r+0x82>
   8c67e:	4611      	mov	r1, r2
   8c680:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c684:	f7ff b842 	b.w	8b70c <_malloc_r>
   8c688:	f002 0201 	and.w	r2, r2, #1
   8c68c:	eb09 0105 	add.w	r1, r9, r5
   8c690:	f043 0301 	orr.w	r3, r3, #1
   8c694:	432a      	orrs	r2, r5
   8c696:	f8c9 2004 	str.w	r2, [r9, #4]
   8c69a:	444f      	add	r7, r9
   8c69c:	604b      	str	r3, [r1, #4]
   8c69e:	687b      	ldr	r3, [r7, #4]
   8c6a0:	4640      	mov	r0, r8
   8c6a2:	f043 0301 	orr.w	r3, r3, #1
   8c6a6:	3108      	adds	r1, #8
   8c6a8:	607b      	str	r3, [r7, #4]
   8c6aa:	f7fe fd05 	bl	8b0b8 <_free_r>
   8c6ae:	e7d4      	b.n	8c65a <_realloc_r+0x162>
   8c6b0:	f8dc b004 	ldr.w	fp, [ip, #4]
   8c6b4:	f105 0010 	add.w	r0, r5, #16
   8c6b8:	f02b 0b03 	bic.w	fp, fp, #3
   8c6bc:	eb07 0c0b 	add.w	ip, r7, fp
   8c6c0:	4584      	cmp	ip, r0
   8c6c2:	da4d      	bge.n	8c760 <_realloc_r+0x268>
   8c6c4:	07c9      	lsls	r1, r1, #31
   8c6c6:	f53f af5c 	bmi.w	8c582 <_realloc_r+0x8a>
   8c6ca:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8c6ce:	eba9 0a01 	sub.w	sl, r9, r1
   8c6d2:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c6d6:	f021 0103 	bic.w	r1, r1, #3
   8c6da:	448b      	add	fp, r1
   8c6dc:	44bb      	add	fp, r7
   8c6de:	4558      	cmp	r0, fp
   8c6e0:	f73f af4b 	bgt.w	8c57a <_realloc_r+0x82>
   8c6e4:	4656      	mov	r6, sl
   8c6e6:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c6ea:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8c6ee:	1f3a      	subs	r2, r7, #4
   8c6f0:	2a24      	cmp	r2, #36	; 0x24
   8c6f2:	60c1      	str	r1, [r0, #12]
   8c6f4:	6088      	str	r0, [r1, #8]
   8c6f6:	f200 80bd 	bhi.w	8c874 <_realloc_r+0x37c>
   8c6fa:	2a13      	cmp	r2, #19
   8c6fc:	f240 80b8 	bls.w	8c870 <_realloc_r+0x378>
   8c700:	6821      	ldr	r1, [r4, #0]
   8c702:	2a1b      	cmp	r2, #27
   8c704:	f8ca 1008 	str.w	r1, [sl, #8]
   8c708:	6861      	ldr	r1, [r4, #4]
   8c70a:	f8ca 100c 	str.w	r1, [sl, #12]
   8c70e:	f200 80c1 	bhi.w	8c894 <_realloc_r+0x39c>
   8c712:	3408      	adds	r4, #8
   8c714:	f10a 0210 	add.w	r2, sl, #16
   8c718:	6821      	ldr	r1, [r4, #0]
   8c71a:	6011      	str	r1, [r2, #0]
   8c71c:	6861      	ldr	r1, [r4, #4]
   8c71e:	6051      	str	r1, [r2, #4]
   8c720:	68a1      	ldr	r1, [r4, #8]
   8c722:	6091      	str	r1, [r2, #8]
   8c724:	ebab 0205 	sub.w	r2, fp, r5
   8c728:	eb0a 0105 	add.w	r1, sl, r5
   8c72c:	f042 0201 	orr.w	r2, r2, #1
   8c730:	6099      	str	r1, [r3, #8]
   8c732:	604a      	str	r2, [r1, #4]
   8c734:	f8da 3004 	ldr.w	r3, [sl, #4]
   8c738:	4640      	mov	r0, r8
   8c73a:	f003 0301 	and.w	r3, r3, #1
   8c73e:	431d      	orrs	r5, r3
   8c740:	f8ca 5004 	str.w	r5, [sl, #4]
   8c744:	f7ff fb56 	bl	8bdf4 <__malloc_unlock>
   8c748:	e74d      	b.n	8c5e6 <_realloc_r+0xee>
   8c74a:	6823      	ldr	r3, [r4, #0]
   8c74c:	2a1b      	cmp	r2, #27
   8c74e:	6003      	str	r3, [r0, #0]
   8c750:	6863      	ldr	r3, [r4, #4]
   8c752:	6043      	str	r3, [r0, #4]
   8c754:	d849      	bhi.n	8c7ea <_realloc_r+0x2f2>
   8c756:	f104 0208 	add.w	r2, r4, #8
   8c75a:	f100 0308 	add.w	r3, r0, #8
   8c75e:	e729      	b.n	8c5b4 <_realloc_r+0xbc>
   8c760:	ebac 0205 	sub.w	r2, ip, r5
   8c764:	eb09 0105 	add.w	r1, r9, r5
   8c768:	f042 0201 	orr.w	r2, r2, #1
   8c76c:	6099      	str	r1, [r3, #8]
   8c76e:	604a      	str	r2, [r1, #4]
   8c770:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c774:	4640      	mov	r0, r8
   8c776:	f003 0301 	and.w	r3, r3, #1
   8c77a:	431d      	orrs	r5, r3
   8c77c:	f844 5c04 	str.w	r5, [r4, #-4]
   8c780:	f7ff fb38 	bl	8bdf4 <__malloc_unlock>
   8c784:	4626      	mov	r6, r4
   8c786:	e72e      	b.n	8c5e6 <_realloc_r+0xee>
   8c788:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8c78c:	461f      	mov	r7, r3
   8c78e:	60ca      	str	r2, [r1, #12]
   8c790:	6091      	str	r1, [r2, #8]
   8c792:	e752      	b.n	8c63a <_realloc_r+0x142>
   8c794:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8c798:	f023 0303 	bic.w	r3, r3, #3
   8c79c:	441f      	add	r7, r3
   8c79e:	e74c      	b.n	8c63a <_realloc_r+0x142>
   8c7a0:	4656      	mov	r6, sl
   8c7a2:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c7a6:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8c7aa:	1f3a      	subs	r2, r7, #4
   8c7ac:	2a24      	cmp	r2, #36	; 0x24
   8c7ae:	60c1      	str	r1, [r0, #12]
   8c7b0:	6088      	str	r0, [r1, #8]
   8c7b2:	d827      	bhi.n	8c804 <_realloc_r+0x30c>
   8c7b4:	2a13      	cmp	r2, #19
   8c7b6:	d923      	bls.n	8c800 <_realloc_r+0x308>
   8c7b8:	6821      	ldr	r1, [r4, #0]
   8c7ba:	2a1b      	cmp	r2, #27
   8c7bc:	f8ca 1008 	str.w	r1, [sl, #8]
   8c7c0:	6861      	ldr	r1, [r4, #4]
   8c7c2:	f8ca 100c 	str.w	r1, [sl, #12]
   8c7c6:	d82f      	bhi.n	8c828 <_realloc_r+0x330>
   8c7c8:	3408      	adds	r4, #8
   8c7ca:	f10a 0210 	add.w	r2, sl, #16
   8c7ce:	6821      	ldr	r1, [r4, #0]
   8c7d0:	461f      	mov	r7, r3
   8c7d2:	6011      	str	r1, [r2, #0]
   8c7d4:	6863      	ldr	r3, [r4, #4]
   8c7d6:	46d1      	mov	r9, sl
   8c7d8:	6053      	str	r3, [r2, #4]
   8c7da:	68a3      	ldr	r3, [r4, #8]
   8c7dc:	4634      	mov	r4, r6
   8c7de:	6093      	str	r3, [r2, #8]
   8c7e0:	e72b      	b.n	8c63a <_realloc_r+0x142>
   8c7e2:	4621      	mov	r1, r4
   8c7e4:	f7ff fa96 	bl	8bd14 <memmove>
   8c7e8:	e6ea      	b.n	8c5c0 <_realloc_r+0xc8>
   8c7ea:	68a3      	ldr	r3, [r4, #8]
   8c7ec:	2a24      	cmp	r2, #36	; 0x24
   8c7ee:	6083      	str	r3, [r0, #8]
   8c7f0:	68e3      	ldr	r3, [r4, #12]
   8c7f2:	60c3      	str	r3, [r0, #12]
   8c7f4:	d024      	beq.n	8c840 <_realloc_r+0x348>
   8c7f6:	f104 0210 	add.w	r2, r4, #16
   8c7fa:	f100 0310 	add.w	r3, r0, #16
   8c7fe:	e6d9      	b.n	8c5b4 <_realloc_r+0xbc>
   8c800:	4632      	mov	r2, r6
   8c802:	e7e4      	b.n	8c7ce <_realloc_r+0x2d6>
   8c804:	4621      	mov	r1, r4
   8c806:	4630      	mov	r0, r6
   8c808:	461f      	mov	r7, r3
   8c80a:	46d1      	mov	r9, sl
   8c80c:	f7ff fa82 	bl	8bd14 <memmove>
   8c810:	4634      	mov	r4, r6
   8c812:	e712      	b.n	8c63a <_realloc_r+0x142>
   8c814:	4633      	mov	r3, r6
   8c816:	e707      	b.n	8c628 <_realloc_r+0x130>
   8c818:	4621      	mov	r1, r4
   8c81a:	4630      	mov	r0, r6
   8c81c:	4667      	mov	r7, ip
   8c81e:	46d1      	mov	r9, sl
   8c820:	f7ff fa78 	bl	8bd14 <memmove>
   8c824:	4634      	mov	r4, r6
   8c826:	e708      	b.n	8c63a <_realloc_r+0x142>
   8c828:	68a1      	ldr	r1, [r4, #8]
   8c82a:	2a24      	cmp	r2, #36	; 0x24
   8c82c:	f8ca 1010 	str.w	r1, [sl, #16]
   8c830:	68e1      	ldr	r1, [r4, #12]
   8c832:	f8ca 1014 	str.w	r1, [sl, #20]
   8c836:	d023      	beq.n	8c880 <_realloc_r+0x388>
   8c838:	3410      	adds	r4, #16
   8c83a:	f10a 0218 	add.w	r2, sl, #24
   8c83e:	e7c6      	b.n	8c7ce <_realloc_r+0x2d6>
   8c840:	6923      	ldr	r3, [r4, #16]
   8c842:	f104 0218 	add.w	r2, r4, #24
   8c846:	6103      	str	r3, [r0, #16]
   8c848:	6961      	ldr	r1, [r4, #20]
   8c84a:	f100 0318 	add.w	r3, r0, #24
   8c84e:	6141      	str	r1, [r0, #20]
   8c850:	e6b0      	b.n	8c5b4 <_realloc_r+0xbc>
   8c852:	bf00      	nop
   8c854:	200009e0 	.word	0x200009e0
   8c858:	68a3      	ldr	r3, [r4, #8]
   8c85a:	2a24      	cmp	r2, #36	; 0x24
   8c85c:	f8ca 3010 	str.w	r3, [sl, #16]
   8c860:	68e3      	ldr	r3, [r4, #12]
   8c862:	f8ca 3014 	str.w	r3, [sl, #20]
   8c866:	d021      	beq.n	8c8ac <_realloc_r+0x3b4>
   8c868:	3410      	adds	r4, #16
   8c86a:	f10a 0318 	add.w	r3, sl, #24
   8c86e:	e6db      	b.n	8c628 <_realloc_r+0x130>
   8c870:	4632      	mov	r2, r6
   8c872:	e751      	b.n	8c718 <_realloc_r+0x220>
   8c874:	4621      	mov	r1, r4
   8c876:	4630      	mov	r0, r6
   8c878:	f7ff fa4c 	bl	8bd14 <memmove>
   8c87c:	4b15      	ldr	r3, [pc, #84]	; (8c8d4 <_realloc_r+0x3dc>)
   8c87e:	e751      	b.n	8c724 <_realloc_r+0x22c>
   8c880:	6921      	ldr	r1, [r4, #16]
   8c882:	f10a 0220 	add.w	r2, sl, #32
   8c886:	f8ca 1018 	str.w	r1, [sl, #24]
   8c88a:	6961      	ldr	r1, [r4, #20]
   8c88c:	3418      	adds	r4, #24
   8c88e:	f8ca 101c 	str.w	r1, [sl, #28]
   8c892:	e79c      	b.n	8c7ce <_realloc_r+0x2d6>
   8c894:	68a1      	ldr	r1, [r4, #8]
   8c896:	2a24      	cmp	r2, #36	; 0x24
   8c898:	f8ca 1010 	str.w	r1, [sl, #16]
   8c89c:	68e1      	ldr	r1, [r4, #12]
   8c89e:	f8ca 1014 	str.w	r1, [sl, #20]
   8c8a2:	d00d      	beq.n	8c8c0 <_realloc_r+0x3c8>
   8c8a4:	3410      	adds	r4, #16
   8c8a6:	f10a 0218 	add.w	r2, sl, #24
   8c8aa:	e735      	b.n	8c718 <_realloc_r+0x220>
   8c8ac:	6922      	ldr	r2, [r4, #16]
   8c8ae:	f10a 0320 	add.w	r3, sl, #32
   8c8b2:	f8ca 2018 	str.w	r2, [sl, #24]
   8c8b6:	6962      	ldr	r2, [r4, #20]
   8c8b8:	3418      	adds	r4, #24
   8c8ba:	f8ca 201c 	str.w	r2, [sl, #28]
   8c8be:	e6b3      	b.n	8c628 <_realloc_r+0x130>
   8c8c0:	6921      	ldr	r1, [r4, #16]
   8c8c2:	f10a 0220 	add.w	r2, sl, #32
   8c8c6:	f8ca 1018 	str.w	r1, [sl, #24]
   8c8ca:	6961      	ldr	r1, [r4, #20]
   8c8cc:	3418      	adds	r4, #24
   8c8ce:	f8ca 101c 	str.w	r1, [sl, #28]
   8c8d2:	e721      	b.n	8c718 <_realloc_r+0x220>
   8c8d4:	200009e0 	.word	0x200009e0

0008c8d8 <frexp>:
   8c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c8da:	4617      	mov	r7, r2
   8c8dc:	2200      	movs	r2, #0
   8c8de:	f8df c060 	ldr.w	ip, [pc, #96]	; 8c940 <frexp+0x68>
   8c8e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c8e6:	4563      	cmp	r3, ip
   8c8e8:	4604      	mov	r4, r0
   8c8ea:	460d      	mov	r5, r1
   8c8ec:	603a      	str	r2, [r7, #0]
   8c8ee:	dc22      	bgt.n	8c936 <frexp+0x5e>
   8c8f0:	4684      	mov	ip, r0
   8c8f2:	ea53 0c0c 	orrs.w	ip, r3, ip
   8c8f6:	d01e      	beq.n	8c936 <frexp+0x5e>
   8c8f8:	f8df c048 	ldr.w	ip, [pc, #72]	; 8c944 <frexp+0x6c>
   8c8fc:	460e      	mov	r6, r1
   8c8fe:	ea01 0c0c 	and.w	ip, r1, ip
   8c902:	f1bc 0f00 	cmp.w	ip, #0
   8c906:	d109      	bne.n	8c91c <frexp+0x44>
   8c908:	2200      	movs	r2, #0
   8c90a:	4b0c      	ldr	r3, [pc, #48]	; (8c93c <frexp+0x64>)
   8c90c:	f000 fd70 	bl	8d3f0 <__aeabi_dmul>
   8c910:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8c914:	4604      	mov	r4, r0
   8c916:	460e      	mov	r6, r1
   8c918:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c91c:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8c920:	151b      	asrs	r3, r3, #20
   8c922:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8c926:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8c92a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8c92e:	4413      	add	r3, r2
   8c930:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8c934:	603b      	str	r3, [r7, #0]
   8c936:	4620      	mov	r0, r4
   8c938:	4629      	mov	r1, r5
   8c93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c93c:	43500000 	.word	0x43500000
   8c940:	7fefffff 	.word	0x7fefffff
   8c944:	7ff00000 	.word	0x7ff00000

0008c948 <_sbrk_r>:
   8c948:	2200      	movs	r2, #0
   8c94a:	b538      	push	{r3, r4, r5, lr}
   8c94c:	4d06      	ldr	r5, [pc, #24]	; (8c968 <_sbrk_r+0x20>)
   8c94e:	4604      	mov	r4, r0
   8c950:	4608      	mov	r0, r1
   8c952:	602a      	str	r2, [r5, #0]
   8c954:	f7f6 fe34 	bl	835c0 <_sbrk>
   8c958:	1c43      	adds	r3, r0, #1
   8c95a:	d000      	beq.n	8c95e <_sbrk_r+0x16>
   8c95c:	bd38      	pop	{r3, r4, r5, pc}
   8c95e:	682b      	ldr	r3, [r5, #0]
   8c960:	2b00      	cmp	r3, #0
   8c962:	d0fb      	beq.n	8c95c <_sbrk_r+0x14>
   8c964:	6023      	str	r3, [r4, #0]
   8c966:	bd38      	pop	{r3, r4, r5, pc}
   8c968:	2000186c 	.word	0x2000186c

0008c96c <__sread>:
   8c96c:	b510      	push	{r4, lr}
   8c96e:	460c      	mov	r4, r1
   8c970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c974:	f000 fb16 	bl	8cfa4 <_read_r>
   8c978:	2800      	cmp	r0, #0
   8c97a:	db03      	blt.n	8c984 <__sread+0x18>
   8c97c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8c97e:	4403      	add	r3, r0
   8c980:	6523      	str	r3, [r4, #80]	; 0x50
   8c982:	bd10      	pop	{r4, pc}
   8c984:	89a3      	ldrh	r3, [r4, #12]
   8c986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8c98a:	81a3      	strh	r3, [r4, #12]
   8c98c:	bd10      	pop	{r4, pc}
   8c98e:	bf00      	nop

0008c990 <__swrite>:
   8c990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c994:	460c      	mov	r4, r1
   8c996:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8c99a:	461f      	mov	r7, r3
   8c99c:	05cb      	lsls	r3, r1, #23
   8c99e:	4616      	mov	r6, r2
   8c9a0:	4605      	mov	r5, r0
   8c9a2:	d40b      	bmi.n	8c9bc <__swrite+0x2c>
   8c9a4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8c9a8:	81a1      	strh	r1, [r4, #12]
   8c9aa:	463b      	mov	r3, r7
   8c9ac:	4632      	mov	r2, r6
   8c9ae:	4628      	mov	r0, r5
   8c9b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c9b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8c9b8:	f000 b980 	b.w	8ccbc <_write_r>
   8c9bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c9c0:	2302      	movs	r3, #2
   8c9c2:	2200      	movs	r2, #0
   8c9c4:	f000 fad8 	bl	8cf78 <_lseek_r>
   8c9c8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8c9cc:	e7ea      	b.n	8c9a4 <__swrite+0x14>
   8c9ce:	bf00      	nop

0008c9d0 <__sseek>:
   8c9d0:	b510      	push	{r4, lr}
   8c9d2:	460c      	mov	r4, r1
   8c9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c9d8:	f000 face 	bl	8cf78 <_lseek_r>
   8c9dc:	89a3      	ldrh	r3, [r4, #12]
   8c9de:	1c42      	adds	r2, r0, #1
   8c9e0:	bf0e      	itee	eq
   8c9e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8c9e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8c9ea:	6520      	strne	r0, [r4, #80]	; 0x50
   8c9ec:	81a3      	strh	r3, [r4, #12]
   8c9ee:	bd10      	pop	{r4, pc}

0008c9f0 <__sclose>:
   8c9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c9f4:	f000 ba0c 	b.w	8ce10 <_close_r>

0008c9f8 <strlen>:
   8c9f8:	f020 0103 	bic.w	r1, r0, #3
   8c9fc:	f010 0003 	ands.w	r0, r0, #3
   8ca00:	f1c0 0000 	rsb	r0, r0, #0
   8ca04:	f851 3b04 	ldr.w	r3, [r1], #4
   8ca08:	f100 0c04 	add.w	ip, r0, #4
   8ca0c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8ca10:	f06f 0200 	mvn.w	r2, #0
   8ca14:	bf1c      	itt	ne
   8ca16:	fa22 f20c 	lsrne.w	r2, r2, ip
   8ca1a:	4313      	orrne	r3, r2
   8ca1c:	f04f 0c01 	mov.w	ip, #1
   8ca20:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8ca24:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8ca28:	eba3 020c 	sub.w	r2, r3, ip
   8ca2c:	ea22 0203 	bic.w	r2, r2, r3
   8ca30:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8ca34:	bf04      	itt	eq
   8ca36:	f851 3b04 	ldreq.w	r3, [r1], #4
   8ca3a:	3004      	addeq	r0, #4
   8ca3c:	d0f4      	beq.n	8ca28 <strlen+0x30>
   8ca3e:	f1c2 0100 	rsb	r1, r2, #0
   8ca42:	ea02 0201 	and.w	r2, r2, r1
   8ca46:	fab2 f282 	clz	r2, r2
   8ca4a:	f1c2 021f 	rsb	r2, r2, #31
   8ca4e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8ca52:	4770      	bx	lr

0008ca54 <strncpy>:
   8ca54:	b470      	push	{r4, r5, r6}
   8ca56:	ea40 0401 	orr.w	r4, r0, r1
   8ca5a:	07a3      	lsls	r3, r4, #30
   8ca5c:	d122      	bne.n	8caa4 <strncpy+0x50>
   8ca5e:	2a03      	cmp	r2, #3
   8ca60:	d920      	bls.n	8caa4 <strncpy+0x50>
   8ca62:	460b      	mov	r3, r1
   8ca64:	4604      	mov	r4, r0
   8ca66:	4619      	mov	r1, r3
   8ca68:	f853 6b04 	ldr.w	r6, [r3], #4
   8ca6c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8ca70:	ea25 0506 	bic.w	r5, r5, r6
   8ca74:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8ca78:	d115      	bne.n	8caa6 <strncpy+0x52>
   8ca7a:	3a04      	subs	r2, #4
   8ca7c:	2a03      	cmp	r2, #3
   8ca7e:	4619      	mov	r1, r3
   8ca80:	f844 6b04 	str.w	r6, [r4], #4
   8ca84:	d8ef      	bhi.n	8ca66 <strncpy+0x12>
   8ca86:	1e4d      	subs	r5, r1, #1
   8ca88:	b152      	cbz	r2, 8caa0 <strncpy+0x4c>
   8ca8a:	4623      	mov	r3, r4
   8ca8c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8ca90:	1e56      	subs	r6, r2, #1
   8ca92:	f803 1b01 	strb.w	r1, [r3], #1
   8ca96:	b141      	cbz	r1, 8caaa <strncpy+0x56>
   8ca98:	4632      	mov	r2, r6
   8ca9a:	461c      	mov	r4, r3
   8ca9c:	2a00      	cmp	r2, #0
   8ca9e:	d1f4      	bne.n	8ca8a <strncpy+0x36>
   8caa0:	bc70      	pop	{r4, r5, r6}
   8caa2:	4770      	bx	lr
   8caa4:	4604      	mov	r4, r0
   8caa6:	1e4d      	subs	r5, r1, #1
   8caa8:	e7ee      	b.n	8ca88 <strncpy+0x34>
   8caaa:	4422      	add	r2, r4
   8caac:	2e00      	cmp	r6, #0
   8caae:	d0f7      	beq.n	8caa0 <strncpy+0x4c>
   8cab0:	f803 1b01 	strb.w	r1, [r3], #1
   8cab4:	4293      	cmp	r3, r2
   8cab6:	d1fb      	bne.n	8cab0 <strncpy+0x5c>
   8cab8:	bc70      	pop	{r4, r5, r6}
   8caba:	4770      	bx	lr

0008cabc <__ssprint_r>:
   8cabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8cac0:	6893      	ldr	r3, [r2, #8]
   8cac2:	4691      	mov	r9, r2
   8cac4:	b083      	sub	sp, #12
   8cac6:	2b00      	cmp	r3, #0
   8cac8:	d06d      	beq.n	8cba6 <__ssprint_r+0xea>
   8caca:	6817      	ldr	r7, [r2, #0]
   8cacc:	4680      	mov	r8, r0
   8cace:	460c      	mov	r4, r1
   8cad0:	6808      	ldr	r0, [r1, #0]
   8cad2:	688d      	ldr	r5, [r1, #8]
   8cad4:	3708      	adds	r7, #8
   8cad6:	e043      	b.n	8cb60 <__ssprint_r+0xa4>
   8cad8:	89a3      	ldrh	r3, [r4, #12]
   8cada:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8cade:	d02e      	beq.n	8cb3e <__ssprint_r+0x82>
   8cae0:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8cae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8cae8:	eba0 0a01 	sub.w	sl, r0, r1
   8caec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8caf0:	eb0a 0006 	add.w	r0, sl, r6
   8caf4:	106d      	asrs	r5, r5, #1
   8caf6:	3001      	adds	r0, #1
   8caf8:	42a8      	cmp	r0, r5
   8cafa:	462a      	mov	r2, r5
   8cafc:	bf84      	itt	hi
   8cafe:	4605      	movhi	r5, r0
   8cb00:	462a      	movhi	r2, r5
   8cb02:	055b      	lsls	r3, r3, #21
   8cb04:	d536      	bpl.n	8cb74 <__ssprint_r+0xb8>
   8cb06:	4611      	mov	r1, r2
   8cb08:	4640      	mov	r0, r8
   8cb0a:	f7fe fdff 	bl	8b70c <_malloc_r>
   8cb0e:	2800      	cmp	r0, #0
   8cb10:	d03a      	beq.n	8cb88 <__ssprint_r+0xcc>
   8cb12:	4652      	mov	r2, sl
   8cb14:	6921      	ldr	r1, [r4, #16]
   8cb16:	9001      	str	r0, [sp, #4]
   8cb18:	f7fa faa2 	bl	87060 <memcpy>
   8cb1c:	89a2      	ldrh	r2, [r4, #12]
   8cb1e:	9b01      	ldr	r3, [sp, #4]
   8cb20:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8cb24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8cb28:	81a2      	strh	r2, [r4, #12]
   8cb2a:	eba5 020a 	sub.w	r2, r5, sl
   8cb2e:	eb03 000a 	add.w	r0, r3, sl
   8cb32:	6165      	str	r5, [r4, #20]
   8cb34:	46b2      	mov	sl, r6
   8cb36:	4635      	mov	r5, r6
   8cb38:	6123      	str	r3, [r4, #16]
   8cb3a:	6020      	str	r0, [r4, #0]
   8cb3c:	60a2      	str	r2, [r4, #8]
   8cb3e:	4659      	mov	r1, fp
   8cb40:	4652      	mov	r2, sl
   8cb42:	f7ff f8e7 	bl	8bd14 <memmove>
   8cb46:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8cb4a:	68a1      	ldr	r1, [r4, #8]
   8cb4c:	6820      	ldr	r0, [r4, #0]
   8cb4e:	1b4d      	subs	r5, r1, r5
   8cb50:	4450      	add	r0, sl
   8cb52:	1b9e      	subs	r6, r3, r6
   8cb54:	60a5      	str	r5, [r4, #8]
   8cb56:	6020      	str	r0, [r4, #0]
   8cb58:	f8c9 6008 	str.w	r6, [r9, #8]
   8cb5c:	b31e      	cbz	r6, 8cba6 <__ssprint_r+0xea>
   8cb5e:	3708      	adds	r7, #8
   8cb60:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8cb64:	2e00      	cmp	r6, #0
   8cb66:	d0fa      	beq.n	8cb5e <__ssprint_r+0xa2>
   8cb68:	42b5      	cmp	r5, r6
   8cb6a:	46aa      	mov	sl, r5
   8cb6c:	d9b4      	bls.n	8cad8 <__ssprint_r+0x1c>
   8cb6e:	4635      	mov	r5, r6
   8cb70:	46b2      	mov	sl, r6
   8cb72:	e7e4      	b.n	8cb3e <__ssprint_r+0x82>
   8cb74:	4640      	mov	r0, r8
   8cb76:	f7ff fcbf 	bl	8c4f8 <_realloc_r>
   8cb7a:	4603      	mov	r3, r0
   8cb7c:	2800      	cmp	r0, #0
   8cb7e:	d1d4      	bne.n	8cb2a <__ssprint_r+0x6e>
   8cb80:	4640      	mov	r0, r8
   8cb82:	6921      	ldr	r1, [r4, #16]
   8cb84:	f7fe fa98 	bl	8b0b8 <_free_r>
   8cb88:	230c      	movs	r3, #12
   8cb8a:	2200      	movs	r2, #0
   8cb8c:	f04f 30ff 	mov.w	r0, #4294967295
   8cb90:	f8c8 3000 	str.w	r3, [r8]
   8cb94:	89a3      	ldrh	r3, [r4, #12]
   8cb96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8cb9a:	81a3      	strh	r3, [r4, #12]
   8cb9c:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8cba0:	b003      	add	sp, #12
   8cba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cba6:	2000      	movs	r0, #0
   8cba8:	f8c9 0004 	str.w	r0, [r9, #4]
   8cbac:	b003      	add	sp, #12
   8cbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cbb2:	bf00      	nop

0008cbb4 <__swbuf_r>:
   8cbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cbb6:	460d      	mov	r5, r1
   8cbb8:	4614      	mov	r4, r2
   8cbba:	4606      	mov	r6, r0
   8cbbc:	b110      	cbz	r0, 8cbc4 <__swbuf_r+0x10>
   8cbbe:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8cbc0:	2b00      	cmp	r3, #0
   8cbc2:	d043      	beq.n	8cc4c <__swbuf_r+0x98>
   8cbc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8cbc8:	69a3      	ldr	r3, [r4, #24]
   8cbca:	0717      	lsls	r7, r2, #28
   8cbcc:	60a3      	str	r3, [r4, #8]
   8cbce:	b290      	uxth	r0, r2
   8cbd0:	d51b      	bpl.n	8cc0a <__swbuf_r+0x56>
   8cbd2:	6923      	ldr	r3, [r4, #16]
   8cbd4:	b1cb      	cbz	r3, 8cc0a <__swbuf_r+0x56>
   8cbd6:	b2ed      	uxtb	r5, r5
   8cbd8:	0481      	lsls	r1, r0, #18
   8cbda:	462f      	mov	r7, r5
   8cbdc:	d522      	bpl.n	8cc24 <__swbuf_r+0x70>
   8cbde:	6822      	ldr	r2, [r4, #0]
   8cbe0:	6961      	ldr	r1, [r4, #20]
   8cbe2:	1ad3      	subs	r3, r2, r3
   8cbe4:	4299      	cmp	r1, r3
   8cbe6:	dd29      	ble.n	8cc3c <__swbuf_r+0x88>
   8cbe8:	3301      	adds	r3, #1
   8cbea:	68a1      	ldr	r1, [r4, #8]
   8cbec:	1c50      	adds	r0, r2, #1
   8cbee:	3901      	subs	r1, #1
   8cbf0:	60a1      	str	r1, [r4, #8]
   8cbf2:	6020      	str	r0, [r4, #0]
   8cbf4:	7015      	strb	r5, [r2, #0]
   8cbf6:	6962      	ldr	r2, [r4, #20]
   8cbf8:	429a      	cmp	r2, r3
   8cbfa:	d02a      	beq.n	8cc52 <__swbuf_r+0x9e>
   8cbfc:	89a3      	ldrh	r3, [r4, #12]
   8cbfe:	07db      	lsls	r3, r3, #31
   8cc00:	d501      	bpl.n	8cc06 <__swbuf_r+0x52>
   8cc02:	2d0a      	cmp	r5, #10
   8cc04:	d025      	beq.n	8cc52 <__swbuf_r+0x9e>
   8cc06:	4638      	mov	r0, r7
   8cc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cc0a:	4621      	mov	r1, r4
   8cc0c:	4630      	mov	r0, r6
   8cc0e:	f7fc ffcd 	bl	89bac <__swsetup_r>
   8cc12:	bb20      	cbnz	r0, 8cc5e <__swbuf_r+0xaa>
   8cc14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8cc18:	b2ed      	uxtb	r5, r5
   8cc1a:	b290      	uxth	r0, r2
   8cc1c:	0481      	lsls	r1, r0, #18
   8cc1e:	462f      	mov	r7, r5
   8cc20:	6923      	ldr	r3, [r4, #16]
   8cc22:	d4dc      	bmi.n	8cbde <__swbuf_r+0x2a>
   8cc24:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8cc26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8cc2a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8cc2e:	81a2      	strh	r2, [r4, #12]
   8cc30:	6822      	ldr	r2, [r4, #0]
   8cc32:	6661      	str	r1, [r4, #100]	; 0x64
   8cc34:	6961      	ldr	r1, [r4, #20]
   8cc36:	1ad3      	subs	r3, r2, r3
   8cc38:	4299      	cmp	r1, r3
   8cc3a:	dcd5      	bgt.n	8cbe8 <__swbuf_r+0x34>
   8cc3c:	4621      	mov	r1, r4
   8cc3e:	4630      	mov	r0, r6
   8cc40:	f7fe f8ba 	bl	8adb8 <_fflush_r>
   8cc44:	b958      	cbnz	r0, 8cc5e <__swbuf_r+0xaa>
   8cc46:	2301      	movs	r3, #1
   8cc48:	6822      	ldr	r2, [r4, #0]
   8cc4a:	e7ce      	b.n	8cbea <__swbuf_r+0x36>
   8cc4c:	f7fe f910 	bl	8ae70 <__sinit>
   8cc50:	e7b8      	b.n	8cbc4 <__swbuf_r+0x10>
   8cc52:	4621      	mov	r1, r4
   8cc54:	4630      	mov	r0, r6
   8cc56:	f7fe f8af 	bl	8adb8 <_fflush_r>
   8cc5a:	2800      	cmp	r0, #0
   8cc5c:	d0d3      	beq.n	8cc06 <__swbuf_r+0x52>
   8cc5e:	f04f 37ff 	mov.w	r7, #4294967295
   8cc62:	e7d0      	b.n	8cc06 <__swbuf_r+0x52>

0008cc64 <_wcrtomb_r>:
   8cc64:	b570      	push	{r4, r5, r6, lr}
   8cc66:	4606      	mov	r6, r0
   8cc68:	461d      	mov	r5, r3
   8cc6a:	b084      	sub	sp, #16
   8cc6c:	b139      	cbz	r1, 8cc7e <_wcrtomb_r+0x1a>
   8cc6e:	4c0b      	ldr	r4, [pc, #44]	; (8cc9c <_wcrtomb_r+0x38>)
   8cc70:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8cc74:	47a0      	blx	r4
   8cc76:	1c43      	adds	r3, r0, #1
   8cc78:	d00a      	beq.n	8cc90 <_wcrtomb_r+0x2c>
   8cc7a:	b004      	add	sp, #16
   8cc7c:	bd70      	pop	{r4, r5, r6, pc}
   8cc7e:	460c      	mov	r4, r1
   8cc80:	4906      	ldr	r1, [pc, #24]	; (8cc9c <_wcrtomb_r+0x38>)
   8cc82:	4622      	mov	r2, r4
   8cc84:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8cc88:	a901      	add	r1, sp, #4
   8cc8a:	47a0      	blx	r4
   8cc8c:	1c43      	adds	r3, r0, #1
   8cc8e:	d1f4      	bne.n	8cc7a <_wcrtomb_r+0x16>
   8cc90:	2200      	movs	r2, #0
   8cc92:	238a      	movs	r3, #138	; 0x8a
   8cc94:	602a      	str	r2, [r5, #0]
   8cc96:	6033      	str	r3, [r6, #0]
   8cc98:	b004      	add	sp, #16
   8cc9a:	bd70      	pop	{r4, r5, r6, pc}
   8cc9c:	20000874 	.word	0x20000874

0008cca0 <__ascii_wctomb>:
   8cca0:	4603      	mov	r3, r0
   8cca2:	b149      	cbz	r1, 8ccb8 <__ascii_wctomb+0x18>
   8cca4:	2aff      	cmp	r2, #255	; 0xff
   8cca6:	d802      	bhi.n	8ccae <__ascii_wctomb+0xe>
   8cca8:	2001      	movs	r0, #1
   8ccaa:	700a      	strb	r2, [r1, #0]
   8ccac:	4770      	bx	lr
   8ccae:	228a      	movs	r2, #138	; 0x8a
   8ccb0:	f04f 30ff 	mov.w	r0, #4294967295
   8ccb4:	601a      	str	r2, [r3, #0]
   8ccb6:	4770      	bx	lr
   8ccb8:	4608      	mov	r0, r1
   8ccba:	4770      	bx	lr

0008ccbc <_write_r>:
   8ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ccbe:	460f      	mov	r7, r1
   8ccc0:	2600      	movs	r6, #0
   8ccc2:	4d08      	ldr	r5, [pc, #32]	; (8cce4 <_write_r+0x28>)
   8ccc4:	4611      	mov	r1, r2
   8ccc6:	4604      	mov	r4, r0
   8ccc8:	461a      	mov	r2, r3
   8ccca:	4638      	mov	r0, r7
   8cccc:	602e      	str	r6, [r5, #0]
   8ccce:	f7f9 ffdd 	bl	86c8c <_write>
   8ccd2:	1c43      	adds	r3, r0, #1
   8ccd4:	d000      	beq.n	8ccd8 <_write_r+0x1c>
   8ccd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ccd8:	682b      	ldr	r3, [r5, #0]
   8ccda:	2b00      	cmp	r3, #0
   8ccdc:	d0fb      	beq.n	8ccd6 <_write_r+0x1a>
   8ccde:	6023      	str	r3, [r4, #0]
   8cce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cce2:	bf00      	nop
   8cce4:	2000186c 	.word	0x2000186c

0008cce8 <__register_exitproc>:
   8cce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ccec:	f8df a080 	ldr.w	sl, [pc, #128]	; 8cd70 <__register_exitproc+0x88>
   8ccf0:	4606      	mov	r6, r0
   8ccf2:	f8da 0000 	ldr.w	r0, [sl]
   8ccf6:	4698      	mov	r8, r3
   8ccf8:	460f      	mov	r7, r1
   8ccfa:	4691      	mov	r9, r2
   8ccfc:	f7fe fc8a 	bl	8b614 <__retarget_lock_acquire_recursive>
   8cd00:	4b1a      	ldr	r3, [pc, #104]	; (8cd6c <__register_exitproc+0x84>)
   8cd02:	681b      	ldr	r3, [r3, #0]
   8cd04:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8cd08:	b324      	cbz	r4, 8cd54 <__register_exitproc+0x6c>
   8cd0a:	6865      	ldr	r5, [r4, #4]
   8cd0c:	2d1f      	cmp	r5, #31
   8cd0e:	dc26      	bgt.n	8cd5e <__register_exitproc+0x76>
   8cd10:	b95e      	cbnz	r6, 8cd2a <__register_exitproc+0x42>
   8cd12:	1c6b      	adds	r3, r5, #1
   8cd14:	3502      	adds	r5, #2
   8cd16:	f8da 0000 	ldr.w	r0, [sl]
   8cd1a:	6063      	str	r3, [r4, #4]
   8cd1c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8cd20:	f7fe fc7a 	bl	8b618 <__retarget_lock_release_recursive>
   8cd24:	2000      	movs	r0, #0
   8cd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8cd2a:	2301      	movs	r3, #1
   8cd2c:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8cd30:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8cd34:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8cd38:	40ab      	lsls	r3, r5
   8cd3a:	431a      	orrs	r2, r3
   8cd3c:	2e02      	cmp	r6, #2
   8cd3e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8cd42:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8cd46:	d1e4      	bne.n	8cd12 <__register_exitproc+0x2a>
   8cd48:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8cd4c:	4313      	orrs	r3, r2
   8cd4e:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8cd52:	e7de      	b.n	8cd12 <__register_exitproc+0x2a>
   8cd54:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8cd58:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8cd5c:	e7d5      	b.n	8cd0a <__register_exitproc+0x22>
   8cd5e:	f8da 0000 	ldr.w	r0, [sl]
   8cd62:	f7fe fc59 	bl	8b618 <__retarget_lock_release_recursive>
   8cd66:	f04f 30ff 	mov.w	r0, #4294967295
   8cd6a:	e7dc      	b.n	8cd26 <__register_exitproc+0x3e>
   8cd6c:	0008da70 	.word	0x0008da70
   8cd70:	20000870 	.word	0x20000870

0008cd74 <__assert_func>:
   8cd74:	4614      	mov	r4, r2
   8cd76:	b500      	push	{lr}
   8cd78:	4d09      	ldr	r5, [pc, #36]	; (8cda0 <__assert_func+0x2c>)
   8cd7a:	461a      	mov	r2, r3
   8cd7c:	4603      	mov	r3, r0
   8cd7e:	6828      	ldr	r0, [r5, #0]
   8cd80:	b085      	sub	sp, #20
   8cd82:	68c0      	ldr	r0, [r0, #12]
   8cd84:	b144      	cbz	r4, 8cd98 <__assert_func+0x24>
   8cd86:	4d07      	ldr	r5, [pc, #28]	; (8cda4 <__assert_func+0x30>)
   8cd88:	9100      	str	r1, [sp, #0]
   8cd8a:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8cd8e:	4906      	ldr	r1, [pc, #24]	; (8cda8 <__assert_func+0x34>)
   8cd90:	f000 f8b6 	bl	8cf00 <fiprintf>
   8cd94:	f000 f91c 	bl	8cfd0 <abort>
   8cd98:	4d04      	ldr	r5, [pc, #16]	; (8cdac <__assert_func+0x38>)
   8cd9a:	462c      	mov	r4, r5
   8cd9c:	e7f4      	b.n	8cd88 <__assert_func+0x14>
   8cd9e:	bf00      	nop
   8cda0:	20000440 	.word	0x20000440
   8cda4:	0008dd24 	.word	0x0008dd24
   8cda8:	0008dd34 	.word	0x0008dd34
   8cdac:	0008dd30 	.word	0x0008dd30

0008cdb0 <_calloc_r>:
   8cdb0:	b510      	push	{r4, lr}
   8cdb2:	fb02 f101 	mul.w	r1, r2, r1
   8cdb6:	f7fe fca9 	bl	8b70c <_malloc_r>
   8cdba:	4604      	mov	r4, r0
   8cdbc:	b168      	cbz	r0, 8cdda <_calloc_r+0x2a>
   8cdbe:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8cdc2:	f022 0203 	bic.w	r2, r2, #3
   8cdc6:	3a04      	subs	r2, #4
   8cdc8:	2a24      	cmp	r2, #36	; 0x24
   8cdca:	d818      	bhi.n	8cdfe <_calloc_r+0x4e>
   8cdcc:	2a13      	cmp	r2, #19
   8cdce:	d806      	bhi.n	8cdde <_calloc_r+0x2e>
   8cdd0:	4602      	mov	r2, r0
   8cdd2:	2300      	movs	r3, #0
   8cdd4:	e9c2 3300 	strd	r3, r3, [r2]
   8cdd8:	6093      	str	r3, [r2, #8]
   8cdda:	4620      	mov	r0, r4
   8cddc:	bd10      	pop	{r4, pc}
   8cdde:	2300      	movs	r3, #0
   8cde0:	2a1b      	cmp	r2, #27
   8cde2:	e9c0 3300 	strd	r3, r3, [r0]
   8cde6:	d90f      	bls.n	8ce08 <_calloc_r+0x58>
   8cde8:	2a24      	cmp	r2, #36	; 0x24
   8cdea:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8cdee:	bf0a      	itet	eq
   8cdf0:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8cdf4:	f100 0210 	addne.w	r2, r0, #16
   8cdf8:	f100 0218 	addeq.w	r2, r0, #24
   8cdfc:	e7e9      	b.n	8cdd2 <_calloc_r+0x22>
   8cdfe:	2100      	movs	r1, #0
   8ce00:	f7fa f9a4 	bl	8714c <memset>
   8ce04:	4620      	mov	r0, r4
   8ce06:	bd10      	pop	{r4, pc}
   8ce08:	f100 0208 	add.w	r2, r0, #8
   8ce0c:	e7e1      	b.n	8cdd2 <_calloc_r+0x22>
   8ce0e:	bf00      	nop

0008ce10 <_close_r>:
   8ce10:	2200      	movs	r2, #0
   8ce12:	b538      	push	{r3, r4, r5, lr}
   8ce14:	4d06      	ldr	r5, [pc, #24]	; (8ce30 <_close_r+0x20>)
   8ce16:	4604      	mov	r4, r0
   8ce18:	4608      	mov	r0, r1
   8ce1a:	602a      	str	r2, [r5, #0]
   8ce1c:	f7f6 fbfc 	bl	83618 <_close>
   8ce20:	1c43      	adds	r3, r0, #1
   8ce22:	d000      	beq.n	8ce26 <_close_r+0x16>
   8ce24:	bd38      	pop	{r3, r4, r5, pc}
   8ce26:	682b      	ldr	r3, [r5, #0]
   8ce28:	2b00      	cmp	r3, #0
   8ce2a:	d0fb      	beq.n	8ce24 <_close_r+0x14>
   8ce2c:	6023      	str	r3, [r4, #0]
   8ce2e:	bd38      	pop	{r3, r4, r5, pc}
   8ce30:	2000186c 	.word	0x2000186c

0008ce34 <_fclose_r>:
   8ce34:	b570      	push	{r4, r5, r6, lr}
   8ce36:	2900      	cmp	r1, #0
   8ce38:	d04b      	beq.n	8ced2 <_fclose_r+0x9e>
   8ce3a:	460c      	mov	r4, r1
   8ce3c:	4605      	mov	r5, r0
   8ce3e:	b110      	cbz	r0, 8ce46 <_fclose_r+0x12>
   8ce40:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8ce42:	2b00      	cmp	r3, #0
   8ce44:	d048      	beq.n	8ced8 <_fclose_r+0xa4>
   8ce46:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8ce48:	07d8      	lsls	r0, r3, #31
   8ce4a:	d534      	bpl.n	8ceb6 <_fclose_r+0x82>
   8ce4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ce50:	2b00      	cmp	r3, #0
   8ce52:	d03e      	beq.n	8ced2 <_fclose_r+0x9e>
   8ce54:	4621      	mov	r1, r4
   8ce56:	4628      	mov	r0, r5
   8ce58:	f7fd ff16 	bl	8ac88 <__sflush_r>
   8ce5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8ce5e:	4606      	mov	r6, r0
   8ce60:	b133      	cbz	r3, 8ce70 <_fclose_r+0x3c>
   8ce62:	4628      	mov	r0, r5
   8ce64:	69e1      	ldr	r1, [r4, #28]
   8ce66:	4798      	blx	r3
   8ce68:	2800      	cmp	r0, #0
   8ce6a:	bfb8      	it	lt
   8ce6c:	f04f 36ff 	movlt.w	r6, #4294967295
   8ce70:	89a3      	ldrh	r3, [r4, #12]
   8ce72:	061a      	lsls	r2, r3, #24
   8ce74:	d43b      	bmi.n	8ceee <_fclose_r+0xba>
   8ce76:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8ce78:	b141      	cbz	r1, 8ce8c <_fclose_r+0x58>
   8ce7a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8ce7e:	4299      	cmp	r1, r3
   8ce80:	d002      	beq.n	8ce88 <_fclose_r+0x54>
   8ce82:	4628      	mov	r0, r5
   8ce84:	f7fe f918 	bl	8b0b8 <_free_r>
   8ce88:	2300      	movs	r3, #0
   8ce8a:	6323      	str	r3, [r4, #48]	; 0x30
   8ce8c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8ce8e:	b121      	cbz	r1, 8ce9a <_fclose_r+0x66>
   8ce90:	4628      	mov	r0, r5
   8ce92:	f7fe f911 	bl	8b0b8 <_free_r>
   8ce96:	2300      	movs	r3, #0
   8ce98:	6463      	str	r3, [r4, #68]	; 0x44
   8ce9a:	f7fe f817 	bl	8aecc <__sfp_lock_acquire>
   8ce9e:	2200      	movs	r2, #0
   8cea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8cea2:	81a2      	strh	r2, [r4, #12]
   8cea4:	07db      	lsls	r3, r3, #31
   8cea6:	d527      	bpl.n	8cef8 <_fclose_r+0xc4>
   8cea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ceaa:	f7fe fbb1 	bl	8b610 <__retarget_lock_close_recursive>
   8ceae:	f7fe f813 	bl	8aed8 <__sfp_lock_release>
   8ceb2:	4630      	mov	r0, r6
   8ceb4:	bd70      	pop	{r4, r5, r6, pc}
   8ceb6:	89a3      	ldrh	r3, [r4, #12]
   8ceb8:	0599      	lsls	r1, r3, #22
   8ceba:	d4cb      	bmi.n	8ce54 <_fclose_r+0x20>
   8cebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cebe:	f7fe fba9 	bl	8b614 <__retarget_lock_acquire_recursive>
   8cec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8cec6:	2b00      	cmp	r3, #0
   8cec8:	d1c4      	bne.n	8ce54 <_fclose_r+0x20>
   8ceca:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8cecc:	f016 0601 	ands.w	r6, r6, #1
   8ced0:	d008      	beq.n	8cee4 <_fclose_r+0xb0>
   8ced2:	2600      	movs	r6, #0
   8ced4:	4630      	mov	r0, r6
   8ced6:	bd70      	pop	{r4, r5, r6, pc}
   8ced8:	f7fd ffca 	bl	8ae70 <__sinit>
   8cedc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8cede:	07d8      	lsls	r0, r3, #31
   8cee0:	d4b4      	bmi.n	8ce4c <_fclose_r+0x18>
   8cee2:	e7e8      	b.n	8ceb6 <_fclose_r+0x82>
   8cee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cee6:	f7fe fb97 	bl	8b618 <__retarget_lock_release_recursive>
   8ceea:	4630      	mov	r0, r6
   8ceec:	bd70      	pop	{r4, r5, r6, pc}
   8ceee:	4628      	mov	r0, r5
   8cef0:	6921      	ldr	r1, [r4, #16]
   8cef2:	f7fe f8e1 	bl	8b0b8 <_free_r>
   8cef6:	e7be      	b.n	8ce76 <_fclose_r+0x42>
   8cef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cefa:	f7fe fb8d 	bl	8b618 <__retarget_lock_release_recursive>
   8cefe:	e7d3      	b.n	8cea8 <_fclose_r+0x74>

0008cf00 <fiprintf>:
   8cf00:	b40e      	push	{r1, r2, r3}
   8cf02:	b510      	push	{r4, lr}
   8cf04:	b083      	sub	sp, #12
   8cf06:	ab05      	add	r3, sp, #20
   8cf08:	4c06      	ldr	r4, [pc, #24]	; (8cf24 <fiprintf+0x24>)
   8cf0a:	f853 2b04 	ldr.w	r2, [r3], #4
   8cf0e:	4601      	mov	r1, r0
   8cf10:	6820      	ldr	r0, [r4, #0]
   8cf12:	9301      	str	r3, [sp, #4]
   8cf14:	f7fb ff70 	bl	88df8 <_vfiprintf_r>
   8cf18:	b003      	add	sp, #12
   8cf1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8cf1e:	b003      	add	sp, #12
   8cf20:	4770      	bx	lr
   8cf22:	bf00      	nop
   8cf24:	20000440 	.word	0x20000440

0008cf28 <_fstat_r>:
   8cf28:	b570      	push	{r4, r5, r6, lr}
   8cf2a:	460c      	mov	r4, r1
   8cf2c:	4603      	mov	r3, r0
   8cf2e:	2600      	movs	r6, #0
   8cf30:	4d07      	ldr	r5, [pc, #28]	; (8cf50 <_fstat_r+0x28>)
   8cf32:	4620      	mov	r0, r4
   8cf34:	4611      	mov	r1, r2
   8cf36:	461c      	mov	r4, r3
   8cf38:	602e      	str	r6, [r5, #0]
   8cf3a:	f7f6 fb78 	bl	8362e <_fstat>
   8cf3e:	1c43      	adds	r3, r0, #1
   8cf40:	d000      	beq.n	8cf44 <_fstat_r+0x1c>
   8cf42:	bd70      	pop	{r4, r5, r6, pc}
   8cf44:	682b      	ldr	r3, [r5, #0]
   8cf46:	2b00      	cmp	r3, #0
   8cf48:	d0fb      	beq.n	8cf42 <_fstat_r+0x1a>
   8cf4a:	6023      	str	r3, [r4, #0]
   8cf4c:	bd70      	pop	{r4, r5, r6, pc}
   8cf4e:	bf00      	nop
   8cf50:	2000186c 	.word	0x2000186c

0008cf54 <_isatty_r>:
   8cf54:	2200      	movs	r2, #0
   8cf56:	b538      	push	{r3, r4, r5, lr}
   8cf58:	4d06      	ldr	r5, [pc, #24]	; (8cf74 <_isatty_r+0x20>)
   8cf5a:	4604      	mov	r4, r0
   8cf5c:	4608      	mov	r0, r1
   8cf5e:	602a      	str	r2, [r5, #0]
   8cf60:	f7f6 fb74 	bl	8364c <_isatty>
   8cf64:	1c43      	adds	r3, r0, #1
   8cf66:	d000      	beq.n	8cf6a <_isatty_r+0x16>
   8cf68:	bd38      	pop	{r3, r4, r5, pc}
   8cf6a:	682b      	ldr	r3, [r5, #0]
   8cf6c:	2b00      	cmp	r3, #0
   8cf6e:	d0fb      	beq.n	8cf68 <_isatty_r+0x14>
   8cf70:	6023      	str	r3, [r4, #0]
   8cf72:	bd38      	pop	{r3, r4, r5, pc}
   8cf74:	2000186c 	.word	0x2000186c

0008cf78 <_lseek_r>:
   8cf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cf7a:	460f      	mov	r7, r1
   8cf7c:	2600      	movs	r6, #0
   8cf7e:	4d08      	ldr	r5, [pc, #32]	; (8cfa0 <_lseek_r+0x28>)
   8cf80:	4611      	mov	r1, r2
   8cf82:	4604      	mov	r4, r0
   8cf84:	461a      	mov	r2, r3
   8cf86:	4638      	mov	r0, r7
   8cf88:	602e      	str	r6, [r5, #0]
   8cf8a:	f7f6 fb69 	bl	83660 <_lseek>
   8cf8e:	1c43      	adds	r3, r0, #1
   8cf90:	d000      	beq.n	8cf94 <_lseek_r+0x1c>
   8cf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cf94:	682b      	ldr	r3, [r5, #0]
   8cf96:	2b00      	cmp	r3, #0
   8cf98:	d0fb      	beq.n	8cf92 <_lseek_r+0x1a>
   8cf9a:	6023      	str	r3, [r4, #0]
   8cf9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cf9e:	bf00      	nop
   8cfa0:	2000186c 	.word	0x2000186c

0008cfa4 <_read_r>:
   8cfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cfa6:	460f      	mov	r7, r1
   8cfa8:	2600      	movs	r6, #0
   8cfaa:	4d08      	ldr	r5, [pc, #32]	; (8cfcc <_read_r+0x28>)
   8cfac:	4611      	mov	r1, r2
   8cfae:	4604      	mov	r4, r0
   8cfb0:	461a      	mov	r2, r3
   8cfb2:	4638      	mov	r0, r7
   8cfb4:	602e      	str	r6, [r5, #0]
   8cfb6:	f7f5 ff4f 	bl	82e58 <_read>
   8cfba:	1c43      	adds	r3, r0, #1
   8cfbc:	d000      	beq.n	8cfc0 <_read_r+0x1c>
   8cfbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cfc0:	682b      	ldr	r3, [r5, #0]
   8cfc2:	2b00      	cmp	r3, #0
   8cfc4:	d0fb      	beq.n	8cfbe <_read_r+0x1a>
   8cfc6:	6023      	str	r3, [r4, #0]
   8cfc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cfca:	bf00      	nop
   8cfcc:	2000186c 	.word	0x2000186c

0008cfd0 <abort>:
   8cfd0:	2006      	movs	r0, #6
   8cfd2:	b508      	push	{r3, lr}
   8cfd4:	f000 f830 	bl	8d038 <raise>
   8cfd8:	2001      	movs	r0, #1
   8cfda:	f7f6 fb4d 	bl	83678 <_exit>
   8cfde:	bf00      	nop

0008cfe0 <_raise_r>:
   8cfe0:	291f      	cmp	r1, #31
   8cfe2:	b538      	push	{r3, r4, r5, lr}
   8cfe4:	4605      	mov	r5, r0
   8cfe6:	d821      	bhi.n	8d02c <_raise_r+0x4c>
   8cfe8:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8cfec:	460c      	mov	r4, r1
   8cfee:	b16a      	cbz	r2, 8d00c <_raise_r+0x2c>
   8cff0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8cff4:	b153      	cbz	r3, 8d00c <_raise_r+0x2c>
   8cff6:	2b01      	cmp	r3, #1
   8cff8:	d016      	beq.n	8d028 <_raise_r+0x48>
   8cffa:	1c59      	adds	r1, r3, #1
   8cffc:	d010      	beq.n	8d020 <_raise_r+0x40>
   8cffe:	2500      	movs	r5, #0
   8d000:	4620      	mov	r0, r4
   8d002:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8d006:	4798      	blx	r3
   8d008:	4628      	mov	r0, r5
   8d00a:	bd38      	pop	{r3, r4, r5, pc}
   8d00c:	4628      	mov	r0, r5
   8d00e:	f000 f831 	bl	8d074 <_getpid_r>
   8d012:	4622      	mov	r2, r4
   8d014:	4601      	mov	r1, r0
   8d016:	4628      	mov	r0, r5
   8d018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8d01c:	f000 b814 	b.w	8d048 <_kill_r>
   8d020:	2316      	movs	r3, #22
   8d022:	2001      	movs	r0, #1
   8d024:	602b      	str	r3, [r5, #0]
   8d026:	bd38      	pop	{r3, r4, r5, pc}
   8d028:	2000      	movs	r0, #0
   8d02a:	bd38      	pop	{r3, r4, r5, pc}
   8d02c:	2316      	movs	r3, #22
   8d02e:	f04f 30ff 	mov.w	r0, #4294967295
   8d032:	602b      	str	r3, [r5, #0]
   8d034:	bd38      	pop	{r3, r4, r5, pc}
   8d036:	bf00      	nop

0008d038 <raise>:
   8d038:	4b02      	ldr	r3, [pc, #8]	; (8d044 <raise+0xc>)
   8d03a:	4601      	mov	r1, r0
   8d03c:	6818      	ldr	r0, [r3, #0]
   8d03e:	f7ff bfcf 	b.w	8cfe0 <_raise_r>
   8d042:	bf00      	nop
   8d044:	20000440 	.word	0x20000440

0008d048 <_kill_r>:
   8d048:	b570      	push	{r4, r5, r6, lr}
   8d04a:	460c      	mov	r4, r1
   8d04c:	4603      	mov	r3, r0
   8d04e:	2600      	movs	r6, #0
   8d050:	4d07      	ldr	r5, [pc, #28]	; (8d070 <_kill_r+0x28>)
   8d052:	4620      	mov	r0, r4
   8d054:	4611      	mov	r1, r2
   8d056:	461c      	mov	r4, r3
   8d058:	602e      	str	r6, [r5, #0]
   8d05a:	f7f6 fb1b 	bl	83694 <_kill>
   8d05e:	1c43      	adds	r3, r0, #1
   8d060:	d000      	beq.n	8d064 <_kill_r+0x1c>
   8d062:	bd70      	pop	{r4, r5, r6, pc}
   8d064:	682b      	ldr	r3, [r5, #0]
   8d066:	2b00      	cmp	r3, #0
   8d068:	d0fb      	beq.n	8d062 <_kill_r+0x1a>
   8d06a:	6023      	str	r3, [r4, #0]
   8d06c:	bd70      	pop	{r4, r5, r6, pc}
   8d06e:	bf00      	nop
   8d070:	2000186c 	.word	0x2000186c

0008d074 <_getpid_r>:
   8d074:	f7f6 bb18 	b.w	836a8 <_getpid>

0008d078 <__aeabi_drsub>:
   8d078:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8d07c:	e002      	b.n	8d084 <__adddf3>
   8d07e:	bf00      	nop

0008d080 <__aeabi_dsub>:
   8d080:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008d084 <__adddf3>:
   8d084:	b530      	push	{r4, r5, lr}
   8d086:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8d08a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8d08e:	ea94 0f05 	teq	r4, r5
   8d092:	bf08      	it	eq
   8d094:	ea90 0f02 	teqeq	r0, r2
   8d098:	bf1f      	itttt	ne
   8d09a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8d09e:	ea55 0c02 	orrsne.w	ip, r5, r2
   8d0a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8d0a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8d0aa:	f000 80e2 	beq.w	8d272 <__adddf3+0x1ee>
   8d0ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8d0b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8d0b6:	bfb8      	it	lt
   8d0b8:	426d      	neglt	r5, r5
   8d0ba:	dd0c      	ble.n	8d0d6 <__adddf3+0x52>
   8d0bc:	442c      	add	r4, r5
   8d0be:	ea80 0202 	eor.w	r2, r0, r2
   8d0c2:	ea81 0303 	eor.w	r3, r1, r3
   8d0c6:	ea82 0000 	eor.w	r0, r2, r0
   8d0ca:	ea83 0101 	eor.w	r1, r3, r1
   8d0ce:	ea80 0202 	eor.w	r2, r0, r2
   8d0d2:	ea81 0303 	eor.w	r3, r1, r3
   8d0d6:	2d36      	cmp	r5, #54	; 0x36
   8d0d8:	bf88      	it	hi
   8d0da:	bd30      	pophi	{r4, r5, pc}
   8d0dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d0e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d0e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8d0e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8d0ec:	d002      	beq.n	8d0f4 <__adddf3+0x70>
   8d0ee:	4240      	negs	r0, r0
   8d0f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8d0f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8d0f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d0fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8d100:	d002      	beq.n	8d108 <__adddf3+0x84>
   8d102:	4252      	negs	r2, r2
   8d104:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8d108:	ea94 0f05 	teq	r4, r5
   8d10c:	f000 80a7 	beq.w	8d25e <__adddf3+0x1da>
   8d110:	f1a4 0401 	sub.w	r4, r4, #1
   8d114:	f1d5 0e20 	rsbs	lr, r5, #32
   8d118:	db0d      	blt.n	8d136 <__adddf3+0xb2>
   8d11a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8d11e:	fa22 f205 	lsr.w	r2, r2, r5
   8d122:	1880      	adds	r0, r0, r2
   8d124:	f141 0100 	adc.w	r1, r1, #0
   8d128:	fa03 f20e 	lsl.w	r2, r3, lr
   8d12c:	1880      	adds	r0, r0, r2
   8d12e:	fa43 f305 	asr.w	r3, r3, r5
   8d132:	4159      	adcs	r1, r3
   8d134:	e00e      	b.n	8d154 <__adddf3+0xd0>
   8d136:	f1a5 0520 	sub.w	r5, r5, #32
   8d13a:	f10e 0e20 	add.w	lr, lr, #32
   8d13e:	2a01      	cmp	r2, #1
   8d140:	fa03 fc0e 	lsl.w	ip, r3, lr
   8d144:	bf28      	it	cs
   8d146:	f04c 0c02 	orrcs.w	ip, ip, #2
   8d14a:	fa43 f305 	asr.w	r3, r3, r5
   8d14e:	18c0      	adds	r0, r0, r3
   8d150:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8d154:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d158:	d507      	bpl.n	8d16a <__adddf3+0xe6>
   8d15a:	f04f 0e00 	mov.w	lr, #0
   8d15e:	f1dc 0c00 	rsbs	ip, ip, #0
   8d162:	eb7e 0000 	sbcs.w	r0, lr, r0
   8d166:	eb6e 0101 	sbc.w	r1, lr, r1
   8d16a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8d16e:	d31b      	bcc.n	8d1a8 <__adddf3+0x124>
   8d170:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8d174:	d30c      	bcc.n	8d190 <__adddf3+0x10c>
   8d176:	0849      	lsrs	r1, r1, #1
   8d178:	ea5f 0030 	movs.w	r0, r0, rrx
   8d17c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8d180:	f104 0401 	add.w	r4, r4, #1
   8d184:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8d188:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8d18c:	f080 809a 	bcs.w	8d2c4 <__adddf3+0x240>
   8d190:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8d194:	bf08      	it	eq
   8d196:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d19a:	f150 0000 	adcs.w	r0, r0, #0
   8d19e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d1a2:	ea41 0105 	orr.w	r1, r1, r5
   8d1a6:	bd30      	pop	{r4, r5, pc}
   8d1a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8d1ac:	4140      	adcs	r0, r0
   8d1ae:	eb41 0101 	adc.w	r1, r1, r1
   8d1b2:	3c01      	subs	r4, #1
   8d1b4:	bf28      	it	cs
   8d1b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8d1ba:	d2e9      	bcs.n	8d190 <__adddf3+0x10c>
   8d1bc:	f091 0f00 	teq	r1, #0
   8d1c0:	bf04      	itt	eq
   8d1c2:	4601      	moveq	r1, r0
   8d1c4:	2000      	moveq	r0, #0
   8d1c6:	fab1 f381 	clz	r3, r1
   8d1ca:	bf08      	it	eq
   8d1cc:	3320      	addeq	r3, #32
   8d1ce:	f1a3 030b 	sub.w	r3, r3, #11
   8d1d2:	f1b3 0220 	subs.w	r2, r3, #32
   8d1d6:	da0c      	bge.n	8d1f2 <__adddf3+0x16e>
   8d1d8:	320c      	adds	r2, #12
   8d1da:	dd08      	ble.n	8d1ee <__adddf3+0x16a>
   8d1dc:	f102 0c14 	add.w	ip, r2, #20
   8d1e0:	f1c2 020c 	rsb	r2, r2, #12
   8d1e4:	fa01 f00c 	lsl.w	r0, r1, ip
   8d1e8:	fa21 f102 	lsr.w	r1, r1, r2
   8d1ec:	e00c      	b.n	8d208 <__adddf3+0x184>
   8d1ee:	f102 0214 	add.w	r2, r2, #20
   8d1f2:	bfd8      	it	le
   8d1f4:	f1c2 0c20 	rsble	ip, r2, #32
   8d1f8:	fa01 f102 	lsl.w	r1, r1, r2
   8d1fc:	fa20 fc0c 	lsr.w	ip, r0, ip
   8d200:	bfdc      	itt	le
   8d202:	ea41 010c 	orrle.w	r1, r1, ip
   8d206:	4090      	lslle	r0, r2
   8d208:	1ae4      	subs	r4, r4, r3
   8d20a:	bfa2      	ittt	ge
   8d20c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8d210:	4329      	orrge	r1, r5
   8d212:	bd30      	popge	{r4, r5, pc}
   8d214:	ea6f 0404 	mvn.w	r4, r4
   8d218:	3c1f      	subs	r4, #31
   8d21a:	da1c      	bge.n	8d256 <__adddf3+0x1d2>
   8d21c:	340c      	adds	r4, #12
   8d21e:	dc0e      	bgt.n	8d23e <__adddf3+0x1ba>
   8d220:	f104 0414 	add.w	r4, r4, #20
   8d224:	f1c4 0220 	rsb	r2, r4, #32
   8d228:	fa20 f004 	lsr.w	r0, r0, r4
   8d22c:	fa01 f302 	lsl.w	r3, r1, r2
   8d230:	ea40 0003 	orr.w	r0, r0, r3
   8d234:	fa21 f304 	lsr.w	r3, r1, r4
   8d238:	ea45 0103 	orr.w	r1, r5, r3
   8d23c:	bd30      	pop	{r4, r5, pc}
   8d23e:	f1c4 040c 	rsb	r4, r4, #12
   8d242:	f1c4 0220 	rsb	r2, r4, #32
   8d246:	fa20 f002 	lsr.w	r0, r0, r2
   8d24a:	fa01 f304 	lsl.w	r3, r1, r4
   8d24e:	ea40 0003 	orr.w	r0, r0, r3
   8d252:	4629      	mov	r1, r5
   8d254:	bd30      	pop	{r4, r5, pc}
   8d256:	fa21 f004 	lsr.w	r0, r1, r4
   8d25a:	4629      	mov	r1, r5
   8d25c:	bd30      	pop	{r4, r5, pc}
   8d25e:	f094 0f00 	teq	r4, #0
   8d262:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8d266:	bf06      	itte	eq
   8d268:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8d26c:	3401      	addeq	r4, #1
   8d26e:	3d01      	subne	r5, #1
   8d270:	e74e      	b.n	8d110 <__adddf3+0x8c>
   8d272:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d276:	bf18      	it	ne
   8d278:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8d27c:	d029      	beq.n	8d2d2 <__adddf3+0x24e>
   8d27e:	ea94 0f05 	teq	r4, r5
   8d282:	bf08      	it	eq
   8d284:	ea90 0f02 	teqeq	r0, r2
   8d288:	d005      	beq.n	8d296 <__adddf3+0x212>
   8d28a:	ea54 0c00 	orrs.w	ip, r4, r0
   8d28e:	bf04      	itt	eq
   8d290:	4619      	moveq	r1, r3
   8d292:	4610      	moveq	r0, r2
   8d294:	bd30      	pop	{r4, r5, pc}
   8d296:	ea91 0f03 	teq	r1, r3
   8d29a:	bf1e      	ittt	ne
   8d29c:	2100      	movne	r1, #0
   8d29e:	2000      	movne	r0, #0
   8d2a0:	bd30      	popne	{r4, r5, pc}
   8d2a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8d2a6:	d105      	bne.n	8d2b4 <__adddf3+0x230>
   8d2a8:	0040      	lsls	r0, r0, #1
   8d2aa:	4149      	adcs	r1, r1
   8d2ac:	bf28      	it	cs
   8d2ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8d2b2:	bd30      	pop	{r4, r5, pc}
   8d2b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8d2b8:	bf3c      	itt	cc
   8d2ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8d2be:	bd30      	popcc	{r4, r5, pc}
   8d2c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d2c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8d2c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d2cc:	f04f 0000 	mov.w	r0, #0
   8d2d0:	bd30      	pop	{r4, r5, pc}
   8d2d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d2d6:	bf1a      	itte	ne
   8d2d8:	4619      	movne	r1, r3
   8d2da:	4610      	movne	r0, r2
   8d2dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8d2e0:	bf1c      	itt	ne
   8d2e2:	460b      	movne	r3, r1
   8d2e4:	4602      	movne	r2, r0
   8d2e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d2ea:	bf06      	itte	eq
   8d2ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8d2f0:	ea91 0f03 	teqeq	r1, r3
   8d2f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8d2f8:	bd30      	pop	{r4, r5, pc}
   8d2fa:	bf00      	nop

0008d2fc <__aeabi_ui2d>:
   8d2fc:	f090 0f00 	teq	r0, #0
   8d300:	bf04      	itt	eq
   8d302:	2100      	moveq	r1, #0
   8d304:	4770      	bxeq	lr
   8d306:	b530      	push	{r4, r5, lr}
   8d308:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d30c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d310:	f04f 0500 	mov.w	r5, #0
   8d314:	f04f 0100 	mov.w	r1, #0
   8d318:	e750      	b.n	8d1bc <__adddf3+0x138>
   8d31a:	bf00      	nop

0008d31c <__aeabi_i2d>:
   8d31c:	f090 0f00 	teq	r0, #0
   8d320:	bf04      	itt	eq
   8d322:	2100      	moveq	r1, #0
   8d324:	4770      	bxeq	lr
   8d326:	b530      	push	{r4, r5, lr}
   8d328:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d32c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d330:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8d334:	bf48      	it	mi
   8d336:	4240      	negmi	r0, r0
   8d338:	f04f 0100 	mov.w	r1, #0
   8d33c:	e73e      	b.n	8d1bc <__adddf3+0x138>
   8d33e:	bf00      	nop

0008d340 <__aeabi_f2d>:
   8d340:	0042      	lsls	r2, r0, #1
   8d342:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8d346:	ea4f 0131 	mov.w	r1, r1, rrx
   8d34a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8d34e:	bf1f      	itttt	ne
   8d350:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8d354:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8d358:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8d35c:	4770      	bxne	lr
   8d35e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8d362:	bf08      	it	eq
   8d364:	4770      	bxeq	lr
   8d366:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8d36a:	bf04      	itt	eq
   8d36c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8d370:	4770      	bxeq	lr
   8d372:	b530      	push	{r4, r5, lr}
   8d374:	f44f 7460 	mov.w	r4, #896	; 0x380
   8d378:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d37c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d380:	e71c      	b.n	8d1bc <__adddf3+0x138>
   8d382:	bf00      	nop

0008d384 <__aeabi_ul2d>:
   8d384:	ea50 0201 	orrs.w	r2, r0, r1
   8d388:	bf08      	it	eq
   8d38a:	4770      	bxeq	lr
   8d38c:	b530      	push	{r4, r5, lr}
   8d38e:	f04f 0500 	mov.w	r5, #0
   8d392:	e00a      	b.n	8d3aa <__aeabi_l2d+0x16>

0008d394 <__aeabi_l2d>:
   8d394:	ea50 0201 	orrs.w	r2, r0, r1
   8d398:	bf08      	it	eq
   8d39a:	4770      	bxeq	lr
   8d39c:	b530      	push	{r4, r5, lr}
   8d39e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8d3a2:	d502      	bpl.n	8d3aa <__aeabi_l2d+0x16>
   8d3a4:	4240      	negs	r0, r0
   8d3a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8d3aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d3ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d3b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8d3b6:	f43f aed8 	beq.w	8d16a <__adddf3+0xe6>
   8d3ba:	f04f 0203 	mov.w	r2, #3
   8d3be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d3c2:	bf18      	it	ne
   8d3c4:	3203      	addne	r2, #3
   8d3c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d3ca:	bf18      	it	ne
   8d3cc:	3203      	addne	r2, #3
   8d3ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8d3d2:	f1c2 0320 	rsb	r3, r2, #32
   8d3d6:	fa00 fc03 	lsl.w	ip, r0, r3
   8d3da:	fa20 f002 	lsr.w	r0, r0, r2
   8d3de:	fa01 fe03 	lsl.w	lr, r1, r3
   8d3e2:	ea40 000e 	orr.w	r0, r0, lr
   8d3e6:	fa21 f102 	lsr.w	r1, r1, r2
   8d3ea:	4414      	add	r4, r2
   8d3ec:	e6bd      	b.n	8d16a <__adddf3+0xe6>
   8d3ee:	bf00      	nop

0008d3f0 <__aeabi_dmul>:
   8d3f0:	b570      	push	{r4, r5, r6, lr}
   8d3f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d3f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d3fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d3fe:	bf1d      	ittte	ne
   8d400:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d404:	ea94 0f0c 	teqne	r4, ip
   8d408:	ea95 0f0c 	teqne	r5, ip
   8d40c:	f000 f8de 	bleq	8d5cc <__aeabi_dmul+0x1dc>
   8d410:	442c      	add	r4, r5
   8d412:	ea81 0603 	eor.w	r6, r1, r3
   8d416:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8d41a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8d41e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8d422:	bf18      	it	ne
   8d424:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8d428:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d42c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8d430:	d038      	beq.n	8d4a4 <__aeabi_dmul+0xb4>
   8d432:	fba0 ce02 	umull	ip, lr, r0, r2
   8d436:	f04f 0500 	mov.w	r5, #0
   8d43a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8d43e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8d442:	fbe0 e503 	umlal	lr, r5, r0, r3
   8d446:	f04f 0600 	mov.w	r6, #0
   8d44a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8d44e:	f09c 0f00 	teq	ip, #0
   8d452:	bf18      	it	ne
   8d454:	f04e 0e01 	orrne.w	lr, lr, #1
   8d458:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8d45c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8d460:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8d464:	d204      	bcs.n	8d470 <__aeabi_dmul+0x80>
   8d466:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8d46a:	416d      	adcs	r5, r5
   8d46c:	eb46 0606 	adc.w	r6, r6, r6
   8d470:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8d474:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8d478:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8d47c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8d480:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8d484:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d488:	bf88      	it	hi
   8d48a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d48e:	d81e      	bhi.n	8d4ce <__aeabi_dmul+0xde>
   8d490:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8d494:	bf08      	it	eq
   8d496:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8d49a:	f150 0000 	adcs.w	r0, r0, #0
   8d49e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d4a2:	bd70      	pop	{r4, r5, r6, pc}
   8d4a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8d4a8:	ea46 0101 	orr.w	r1, r6, r1
   8d4ac:	ea40 0002 	orr.w	r0, r0, r2
   8d4b0:	ea81 0103 	eor.w	r1, r1, r3
   8d4b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8d4b8:	bfc2      	ittt	gt
   8d4ba:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d4be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d4c2:	bd70      	popgt	{r4, r5, r6, pc}
   8d4c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d4c8:	f04f 0e00 	mov.w	lr, #0
   8d4cc:	3c01      	subs	r4, #1
   8d4ce:	f300 80ab 	bgt.w	8d628 <__aeabi_dmul+0x238>
   8d4d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8d4d6:	bfde      	ittt	le
   8d4d8:	2000      	movle	r0, #0
   8d4da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8d4de:	bd70      	pople	{r4, r5, r6, pc}
   8d4e0:	f1c4 0400 	rsb	r4, r4, #0
   8d4e4:	3c20      	subs	r4, #32
   8d4e6:	da35      	bge.n	8d554 <__aeabi_dmul+0x164>
   8d4e8:	340c      	adds	r4, #12
   8d4ea:	dc1b      	bgt.n	8d524 <__aeabi_dmul+0x134>
   8d4ec:	f104 0414 	add.w	r4, r4, #20
   8d4f0:	f1c4 0520 	rsb	r5, r4, #32
   8d4f4:	fa00 f305 	lsl.w	r3, r0, r5
   8d4f8:	fa20 f004 	lsr.w	r0, r0, r4
   8d4fc:	fa01 f205 	lsl.w	r2, r1, r5
   8d500:	ea40 0002 	orr.w	r0, r0, r2
   8d504:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8d508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d50c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d510:	fa21 f604 	lsr.w	r6, r1, r4
   8d514:	eb42 0106 	adc.w	r1, r2, r6
   8d518:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d51c:	bf08      	it	eq
   8d51e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d522:	bd70      	pop	{r4, r5, r6, pc}
   8d524:	f1c4 040c 	rsb	r4, r4, #12
   8d528:	f1c4 0520 	rsb	r5, r4, #32
   8d52c:	fa00 f304 	lsl.w	r3, r0, r4
   8d530:	fa20 f005 	lsr.w	r0, r0, r5
   8d534:	fa01 f204 	lsl.w	r2, r1, r4
   8d538:	ea40 0002 	orr.w	r0, r0, r2
   8d53c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d540:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d544:	f141 0100 	adc.w	r1, r1, #0
   8d548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d54c:	bf08      	it	eq
   8d54e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d552:	bd70      	pop	{r4, r5, r6, pc}
   8d554:	f1c4 0520 	rsb	r5, r4, #32
   8d558:	fa00 f205 	lsl.w	r2, r0, r5
   8d55c:	ea4e 0e02 	orr.w	lr, lr, r2
   8d560:	fa20 f304 	lsr.w	r3, r0, r4
   8d564:	fa01 f205 	lsl.w	r2, r1, r5
   8d568:	ea43 0302 	orr.w	r3, r3, r2
   8d56c:	fa21 f004 	lsr.w	r0, r1, r4
   8d570:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d574:	fa21 f204 	lsr.w	r2, r1, r4
   8d578:	ea20 0002 	bic.w	r0, r0, r2
   8d57c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8d580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d584:	bf08      	it	eq
   8d586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d58a:	bd70      	pop	{r4, r5, r6, pc}
   8d58c:	f094 0f00 	teq	r4, #0
   8d590:	d10f      	bne.n	8d5b2 <__aeabi_dmul+0x1c2>
   8d592:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8d596:	0040      	lsls	r0, r0, #1
   8d598:	eb41 0101 	adc.w	r1, r1, r1
   8d59c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d5a0:	bf08      	it	eq
   8d5a2:	3c01      	subeq	r4, #1
   8d5a4:	d0f7      	beq.n	8d596 <__aeabi_dmul+0x1a6>
   8d5a6:	ea41 0106 	orr.w	r1, r1, r6
   8d5aa:	f095 0f00 	teq	r5, #0
   8d5ae:	bf18      	it	ne
   8d5b0:	4770      	bxne	lr
   8d5b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8d5b6:	0052      	lsls	r2, r2, #1
   8d5b8:	eb43 0303 	adc.w	r3, r3, r3
   8d5bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8d5c0:	bf08      	it	eq
   8d5c2:	3d01      	subeq	r5, #1
   8d5c4:	d0f7      	beq.n	8d5b6 <__aeabi_dmul+0x1c6>
   8d5c6:	ea43 0306 	orr.w	r3, r3, r6
   8d5ca:	4770      	bx	lr
   8d5cc:	ea94 0f0c 	teq	r4, ip
   8d5d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d5d4:	bf18      	it	ne
   8d5d6:	ea95 0f0c 	teqne	r5, ip
   8d5da:	d00c      	beq.n	8d5f6 <__aeabi_dmul+0x206>
   8d5dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d5e0:	bf18      	it	ne
   8d5e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d5e6:	d1d1      	bne.n	8d58c <__aeabi_dmul+0x19c>
   8d5e8:	ea81 0103 	eor.w	r1, r1, r3
   8d5ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d5f0:	f04f 0000 	mov.w	r0, #0
   8d5f4:	bd70      	pop	{r4, r5, r6, pc}
   8d5f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d5fa:	bf06      	itte	eq
   8d5fc:	4610      	moveq	r0, r2
   8d5fe:	4619      	moveq	r1, r3
   8d600:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d604:	d019      	beq.n	8d63a <__aeabi_dmul+0x24a>
   8d606:	ea94 0f0c 	teq	r4, ip
   8d60a:	d102      	bne.n	8d612 <__aeabi_dmul+0x222>
   8d60c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8d610:	d113      	bne.n	8d63a <__aeabi_dmul+0x24a>
   8d612:	ea95 0f0c 	teq	r5, ip
   8d616:	d105      	bne.n	8d624 <__aeabi_dmul+0x234>
   8d618:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8d61c:	bf1c      	itt	ne
   8d61e:	4610      	movne	r0, r2
   8d620:	4619      	movne	r1, r3
   8d622:	d10a      	bne.n	8d63a <__aeabi_dmul+0x24a>
   8d624:	ea81 0103 	eor.w	r1, r1, r3
   8d628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d62c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d634:	f04f 0000 	mov.w	r0, #0
   8d638:	bd70      	pop	{r4, r5, r6, pc}
   8d63a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d63e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8d642:	bd70      	pop	{r4, r5, r6, pc}

0008d644 <__aeabi_ddiv>:
   8d644:	b570      	push	{r4, r5, r6, lr}
   8d646:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d64a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d64e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d652:	bf1d      	ittte	ne
   8d654:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d658:	ea94 0f0c 	teqne	r4, ip
   8d65c:	ea95 0f0c 	teqne	r5, ip
   8d660:	f000 f8a7 	bleq	8d7b2 <__aeabi_ddiv+0x16e>
   8d664:	eba4 0405 	sub.w	r4, r4, r5
   8d668:	ea81 0e03 	eor.w	lr, r1, r3
   8d66c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d670:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d674:	f000 8088 	beq.w	8d788 <__aeabi_ddiv+0x144>
   8d678:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d67c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8d680:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8d684:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8d688:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8d68c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8d690:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8d694:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8d698:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8d69c:	429d      	cmp	r5, r3
   8d69e:	bf08      	it	eq
   8d6a0:	4296      	cmpeq	r6, r2
   8d6a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8d6a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8d6aa:	d202      	bcs.n	8d6b2 <__aeabi_ddiv+0x6e>
   8d6ac:	085b      	lsrs	r3, r3, #1
   8d6ae:	ea4f 0232 	mov.w	r2, r2, rrx
   8d6b2:	1ab6      	subs	r6, r6, r2
   8d6b4:	eb65 0503 	sbc.w	r5, r5, r3
   8d6b8:	085b      	lsrs	r3, r3, #1
   8d6ba:	ea4f 0232 	mov.w	r2, r2, rrx
   8d6be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8d6c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8d6c6:	ebb6 0e02 	subs.w	lr, r6, r2
   8d6ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d6ce:	bf22      	ittt	cs
   8d6d0:	1ab6      	subcs	r6, r6, r2
   8d6d2:	4675      	movcs	r5, lr
   8d6d4:	ea40 000c 	orrcs.w	r0, r0, ip
   8d6d8:	085b      	lsrs	r3, r3, #1
   8d6da:	ea4f 0232 	mov.w	r2, r2, rrx
   8d6de:	ebb6 0e02 	subs.w	lr, r6, r2
   8d6e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d6e6:	bf22      	ittt	cs
   8d6e8:	1ab6      	subcs	r6, r6, r2
   8d6ea:	4675      	movcs	r5, lr
   8d6ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8d6f0:	085b      	lsrs	r3, r3, #1
   8d6f2:	ea4f 0232 	mov.w	r2, r2, rrx
   8d6f6:	ebb6 0e02 	subs.w	lr, r6, r2
   8d6fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d6fe:	bf22      	ittt	cs
   8d700:	1ab6      	subcs	r6, r6, r2
   8d702:	4675      	movcs	r5, lr
   8d704:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8d708:	085b      	lsrs	r3, r3, #1
   8d70a:	ea4f 0232 	mov.w	r2, r2, rrx
   8d70e:	ebb6 0e02 	subs.w	lr, r6, r2
   8d712:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d716:	bf22      	ittt	cs
   8d718:	1ab6      	subcs	r6, r6, r2
   8d71a:	4675      	movcs	r5, lr
   8d71c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8d720:	ea55 0e06 	orrs.w	lr, r5, r6
   8d724:	d018      	beq.n	8d758 <__aeabi_ddiv+0x114>
   8d726:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8d72a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8d72e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8d732:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8d736:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8d73a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8d73e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8d742:	d1c0      	bne.n	8d6c6 <__aeabi_ddiv+0x82>
   8d744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d748:	d10b      	bne.n	8d762 <__aeabi_ddiv+0x11e>
   8d74a:	ea41 0100 	orr.w	r1, r1, r0
   8d74e:	f04f 0000 	mov.w	r0, #0
   8d752:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8d756:	e7b6      	b.n	8d6c6 <__aeabi_ddiv+0x82>
   8d758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d75c:	bf04      	itt	eq
   8d75e:	4301      	orreq	r1, r0
   8d760:	2000      	moveq	r0, #0
   8d762:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d766:	bf88      	it	hi
   8d768:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d76c:	f63f aeaf 	bhi.w	8d4ce <__aeabi_dmul+0xde>
   8d770:	ebb5 0c03 	subs.w	ip, r5, r3
   8d774:	bf04      	itt	eq
   8d776:	ebb6 0c02 	subseq.w	ip, r6, r2
   8d77a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d77e:	f150 0000 	adcs.w	r0, r0, #0
   8d782:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d786:	bd70      	pop	{r4, r5, r6, pc}
   8d788:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8d78c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8d790:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8d794:	bfc2      	ittt	gt
   8d796:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d79a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d79e:	bd70      	popgt	{r4, r5, r6, pc}
   8d7a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d7a4:	f04f 0e00 	mov.w	lr, #0
   8d7a8:	3c01      	subs	r4, #1
   8d7aa:	e690      	b.n	8d4ce <__aeabi_dmul+0xde>
   8d7ac:	ea45 0e06 	orr.w	lr, r5, r6
   8d7b0:	e68d      	b.n	8d4ce <__aeabi_dmul+0xde>
   8d7b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d7b6:	ea94 0f0c 	teq	r4, ip
   8d7ba:	bf08      	it	eq
   8d7bc:	ea95 0f0c 	teqeq	r5, ip
   8d7c0:	f43f af3b 	beq.w	8d63a <__aeabi_dmul+0x24a>
   8d7c4:	ea94 0f0c 	teq	r4, ip
   8d7c8:	d10a      	bne.n	8d7e0 <__aeabi_ddiv+0x19c>
   8d7ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d7ce:	f47f af34 	bne.w	8d63a <__aeabi_dmul+0x24a>
   8d7d2:	ea95 0f0c 	teq	r5, ip
   8d7d6:	f47f af25 	bne.w	8d624 <__aeabi_dmul+0x234>
   8d7da:	4610      	mov	r0, r2
   8d7dc:	4619      	mov	r1, r3
   8d7de:	e72c      	b.n	8d63a <__aeabi_dmul+0x24a>
   8d7e0:	ea95 0f0c 	teq	r5, ip
   8d7e4:	d106      	bne.n	8d7f4 <__aeabi_ddiv+0x1b0>
   8d7e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d7ea:	f43f aefd 	beq.w	8d5e8 <__aeabi_dmul+0x1f8>
   8d7ee:	4610      	mov	r0, r2
   8d7f0:	4619      	mov	r1, r3
   8d7f2:	e722      	b.n	8d63a <__aeabi_dmul+0x24a>
   8d7f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d7f8:	bf18      	it	ne
   8d7fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d7fe:	f47f aec5 	bne.w	8d58c <__aeabi_dmul+0x19c>
   8d802:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8d806:	f47f af0d 	bne.w	8d624 <__aeabi_dmul+0x234>
   8d80a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8d80e:	f47f aeeb 	bne.w	8d5e8 <__aeabi_dmul+0x1f8>
   8d812:	e712      	b.n	8d63a <__aeabi_dmul+0x24a>

0008d814 <__gedf2>:
   8d814:	f04f 3cff 	mov.w	ip, #4294967295
   8d818:	e006      	b.n	8d828 <__cmpdf2+0x4>
   8d81a:	bf00      	nop

0008d81c <__ledf2>:
   8d81c:	f04f 0c01 	mov.w	ip, #1
   8d820:	e002      	b.n	8d828 <__cmpdf2+0x4>
   8d822:	bf00      	nop

0008d824 <__cmpdf2>:
   8d824:	f04f 0c01 	mov.w	ip, #1
   8d828:	f84d cd04 	str.w	ip, [sp, #-4]!
   8d82c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d830:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d834:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d838:	bf18      	it	ne
   8d83a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8d83e:	d01b      	beq.n	8d878 <__cmpdf2+0x54>
   8d840:	b001      	add	sp, #4
   8d842:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8d846:	bf0c      	ite	eq
   8d848:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8d84c:	ea91 0f03 	teqne	r1, r3
   8d850:	bf02      	ittt	eq
   8d852:	ea90 0f02 	teqeq	r0, r2
   8d856:	2000      	moveq	r0, #0
   8d858:	4770      	bxeq	lr
   8d85a:	f110 0f00 	cmn.w	r0, #0
   8d85e:	ea91 0f03 	teq	r1, r3
   8d862:	bf58      	it	pl
   8d864:	4299      	cmppl	r1, r3
   8d866:	bf08      	it	eq
   8d868:	4290      	cmpeq	r0, r2
   8d86a:	bf2c      	ite	cs
   8d86c:	17d8      	asrcs	r0, r3, #31
   8d86e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8d872:	f040 0001 	orr.w	r0, r0, #1
   8d876:	4770      	bx	lr
   8d878:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d87c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d880:	d102      	bne.n	8d888 <__cmpdf2+0x64>
   8d882:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d886:	d107      	bne.n	8d898 <__cmpdf2+0x74>
   8d888:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d88c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d890:	d1d6      	bne.n	8d840 <__cmpdf2+0x1c>
   8d892:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d896:	d0d3      	beq.n	8d840 <__cmpdf2+0x1c>
   8d898:	f85d 0b04 	ldr.w	r0, [sp], #4
   8d89c:	4770      	bx	lr
   8d89e:	bf00      	nop

0008d8a0 <__aeabi_cdrcmple>:
   8d8a0:	4684      	mov	ip, r0
   8d8a2:	4610      	mov	r0, r2
   8d8a4:	4662      	mov	r2, ip
   8d8a6:	468c      	mov	ip, r1
   8d8a8:	4619      	mov	r1, r3
   8d8aa:	4663      	mov	r3, ip
   8d8ac:	e000      	b.n	8d8b0 <__aeabi_cdcmpeq>
   8d8ae:	bf00      	nop

0008d8b0 <__aeabi_cdcmpeq>:
   8d8b0:	b501      	push	{r0, lr}
   8d8b2:	f7ff ffb7 	bl	8d824 <__cmpdf2>
   8d8b6:	2800      	cmp	r0, #0
   8d8b8:	bf48      	it	mi
   8d8ba:	f110 0f00 	cmnmi.w	r0, #0
   8d8be:	bd01      	pop	{r0, pc}

0008d8c0 <__aeabi_dcmpeq>:
   8d8c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d8c4:	f7ff fff4 	bl	8d8b0 <__aeabi_cdcmpeq>
   8d8c8:	bf0c      	ite	eq
   8d8ca:	2001      	moveq	r0, #1
   8d8cc:	2000      	movne	r0, #0
   8d8ce:	f85d fb08 	ldr.w	pc, [sp], #8
   8d8d2:	bf00      	nop

0008d8d4 <__aeabi_dcmplt>:
   8d8d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d8d8:	f7ff ffea 	bl	8d8b0 <__aeabi_cdcmpeq>
   8d8dc:	bf34      	ite	cc
   8d8de:	2001      	movcc	r0, #1
   8d8e0:	2000      	movcs	r0, #0
   8d8e2:	f85d fb08 	ldr.w	pc, [sp], #8
   8d8e6:	bf00      	nop

0008d8e8 <__aeabi_dcmple>:
   8d8e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d8ec:	f7ff ffe0 	bl	8d8b0 <__aeabi_cdcmpeq>
   8d8f0:	bf94      	ite	ls
   8d8f2:	2001      	movls	r0, #1
   8d8f4:	2000      	movhi	r0, #0
   8d8f6:	f85d fb08 	ldr.w	pc, [sp], #8
   8d8fa:	bf00      	nop

0008d8fc <__aeabi_dcmpge>:
   8d8fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d900:	f7ff ffce 	bl	8d8a0 <__aeabi_cdrcmple>
   8d904:	bf94      	ite	ls
   8d906:	2001      	movls	r0, #1
   8d908:	2000      	movhi	r0, #0
   8d90a:	f85d fb08 	ldr.w	pc, [sp], #8
   8d90e:	bf00      	nop

0008d910 <__aeabi_dcmpgt>:
   8d910:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d914:	f7ff ffc4 	bl	8d8a0 <__aeabi_cdrcmple>
   8d918:	bf34      	ite	cc
   8d91a:	2001      	movcc	r0, #1
   8d91c:	2000      	movcs	r0, #0
   8d91e:	f85d fb08 	ldr.w	pc, [sp], #8
   8d922:	bf00      	nop

0008d924 <__aeabi_dcmpun>:
   8d924:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d928:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d92c:	d102      	bne.n	8d934 <__aeabi_dcmpun+0x10>
   8d92e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d932:	d10a      	bne.n	8d94a <__aeabi_dcmpun+0x26>
   8d934:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d93c:	d102      	bne.n	8d944 <__aeabi_dcmpun+0x20>
   8d93e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d942:	d102      	bne.n	8d94a <__aeabi_dcmpun+0x26>
   8d944:	f04f 0000 	mov.w	r0, #0
   8d948:	4770      	bx	lr
   8d94a:	f04f 0001 	mov.w	r0, #1
   8d94e:	4770      	bx	lr

0008d950 <__aeabi_d2iz>:
   8d950:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8d954:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8d958:	d215      	bcs.n	8d986 <__aeabi_d2iz+0x36>
   8d95a:	d511      	bpl.n	8d980 <__aeabi_d2iz+0x30>
   8d95c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8d960:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8d964:	d912      	bls.n	8d98c <__aeabi_d2iz+0x3c>
   8d966:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8d96a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8d96e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8d972:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d976:	fa23 f002 	lsr.w	r0, r3, r2
   8d97a:	bf18      	it	ne
   8d97c:	4240      	negne	r0, r0
   8d97e:	4770      	bx	lr
   8d980:	f04f 0000 	mov.w	r0, #0
   8d984:	4770      	bx	lr
   8d986:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8d98a:	d105      	bne.n	8d998 <__aeabi_d2iz+0x48>
   8d98c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8d990:	bf08      	it	eq
   8d992:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8d996:	4770      	bx	lr
   8d998:	f04f 0000 	mov.w	r0, #0
   8d99c:	4770      	bx	lr
   8d99e:	bf00      	nop
   8d9a0:	78383025 	.word	0x78383025
   8d9a4:	00000000 	.word	0x00000000
   8d9a8:	62616e45 	.word	0x62616e45
   8d9ac:	676e696c 	.word	0x676e696c
   8d9b0:	41535520 	.word	0x41535520
   8d9b4:	0a305452 	.word	0x0a305452
   8d9b8:	00000000 	.word	0x00000000
   8d9bc:	3a525245 	.word	0x3a525245
   8d9c0:	766e4920 	.word	0x766e4920
   8d9c4:	64696c61 	.word	0x64696c61
   8d9c8:	41535520 	.word	0x41535520
   8d9cc:	43205452 	.word	0x43205452
   8d9d0:	69666e6f 	.word	0x69666e6f
   8d9d4:	61727567 	.word	0x61727567
   8d9d8:	6e6f6974 	.word	0x6e6f6974
   8d9dc:	63617020 	.word	0x63617020
   8d9e0:	3f74656b 	.word	0x3f74656b
   8d9e4:	0000000a 	.word	0x0000000a

0008d9e8 <LED_DESCRIPTOR>:
   8d9e8:	0000001d 00000001 0000001f 00000001     ................
   8d9f8:	74697845 20676e69 68746977 61747320     Exiting with sta
   8da08:	20737574 0a2e6425 00000000              tus %d......

0008da14 <BOS_DESC>:
   8da14:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8da24:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
   8da34:	00000000 00000000 00000000 aaaaaa00     ................
   8da44:	aaaaaaaa eeeeeeaa eeeeeeee fffffeee     ................
   8da54:	ffffffff ffffffff dfbf7fff fdfbf7ef     ................
   8da64:	dfbf7efc fdfbf7ef 0000007e              .~......~...

0008da70 <_global_impure_ptr>:
   8da70:	20000448 00464e49 00666e69 004e414e     H.. INF.inf.NAN.
   8da80:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8da90:	66656463 00000000 33323130 37363534     cdef....01234567
   8daa0:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8dab0:	0000296c 00000030                       l)..0...

0008dab8 <blanks.7335>:
   8dab8:	20202020 20202020 20202020 20202020                     

0008dac8 <zeroes.7336>:
   8dac8:	30303030 30303030 30303030 30303030     0000000000000000

0008dad8 <blanks.7328>:
   8dad8:	20202020 20202020 20202020 20202020                     

0008dae8 <zeroes.7329>:
   8dae8:	30303030 30303030 30303030 30303030     0000000000000000
   8daf8:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8db08:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8db18:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8db28:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8db38:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8db48:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8db58:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8db68:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8db78:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8db88:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8db98:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8dba8:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8dbb8:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8dbc8:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8dbd8:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8dbe8:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8dbf8:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8dc08:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8dc18:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....

0008dc28 <__mprec_bigtens>:
   8dc28:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8dc38:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8dc48:	7f73bf3c 75154fdd                       <.s..O.u

0008dc50 <__mprec_tens>:
   8dc50:	00000000 3ff00000 00000000 40240000     .......?......$@
   8dc60:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8dc70:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8dc80:	00000000 412e8480 00000000 416312d0     .......A......cA
   8dc90:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8dca0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8dcb0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8dcc0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8dcd0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8dce0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8dcf0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8dd00:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8dd10:	79d99db4 44ea7843                       ...yCx.D

0008dd18 <p05.6122>:
   8dd18:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8dd28:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8dd38:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8dd48:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8dd58:	2520656e 25732564 00000a73              ne %d%s%s...

0008dd64 <_ctype_>:
   8dd64:	20202000 20202020 28282020 20282828     .         ((((( 
   8dd74:	20202020 20202020 20202020 20202020                     
   8dd84:	10108820 10101010 10101010 10101010      ...............
   8dd94:	04040410 04040404 10040404 10101010     ................
   8dda4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8ddb4:	01010101 01010101 01010101 10101010     ................
   8ddc4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8ddd4:	02020202 02020202 02020202 10101010     ................
   8dde4:	00000020 00000000 00000000 00000000      ...............
   8ddf4:	00000000 00000000 00000000 00000000     ................
   8de04:	00000000 00000000 00000000 00000000     ................
   8de14:	00000000 00000000 00000000 00000000     ................
   8de24:	00000000 00000000 00000000 00000000     ................
   8de34:	00000000 00000000 00000000 00000000     ................
   8de44:	00000000 00000000 00000000 00000000     ................
   8de54:	00000000 00000000 00000000 00000000     ................
   8de64:	00000000                                ....

0008de68 <_init>:
   8de68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8de6a:	bf00      	nop
   8de6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8de6e:	bc08      	pop	{r3}
   8de70:	469e      	mov	lr, r3
   8de72:	4770      	bx	lr

0008de74 <__init_array_start>:
   8de74:	00089c7d 	.word	0x00089c7d

0008de78 <__frame_dummy_init_array_entry>:
   8de78:	000800e1                                ....

0008de7c <_fini>:
   8de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8de7e:	bf00      	nop
   8de80:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8de82:	bc08      	pop	{r3}
   8de84:	469e      	mov	lr, r3
   8de86:	4770      	bx	lr

0008de88 <__do_global_dtors_aux_fini_array_entry>:
   8de88:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	20000288 	.word	0x20000288
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d206      	bcs.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d208      	bcs.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e3600 	.word	0x016e3600
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	02625a00 	.word	0x02625a00
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	                                         .

2000027d <main_b_vendor_enable>:
2000027d:	                                         ...

20000280 <xram>:
20000280:	60000000                                ...`

20000284 <g_interrupt_enabled>:
20000284:	00000001                                ....

20000288 <SystemCoreClock>:
20000288:	003d0900                                ..=.

2000028c <udc_string_desc_languageid>:
2000028c:	04090304                                ....

20000290 <udc_string_manufacturer_name>:
20000290:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002a0:	636e4920 0000002e                        Inc....

200002a8 <udc_string_product_name>:
200002a8:	70696843 73696857 65726570 75482d72     ChipWhisperer-Hu
200002b8:	00796b73                                sky.

200002bc <udc_string_desc>:
200002bc:	00000300 00000000 00000000 00000000     ................
200002cc:	00000000 00000000 00000000 00000000     ................
200002dc:	00000000 00000000 00000000 00000000     ................
200002ec:	00000000 00000000 00000000 00000000     ................
200002fc:	00000000                                ....

20000300 <winusb_20_desc>:
20000300:	0000000a 06030000 0014009e 49570003     ..............WI
20000310:	4253554e 00000000 00000000 00800000     NUSB............
20000320:	00010004 00500028 00790068 00680057     ....(.P.h.y.W.h.
20000330:	00730069 00650070 00650072 00550072     i.s.p.e.r.e.r.U.
20000340:	00420053 00000000 00000000 004e0000     S.B...........N.
20000350:	0063007b 00650063 00320035 00310039     {.c.c.e.5.2.9.1.
20000360:	002d0063 00360061 00660039 0034002d     c.-.a.6.9.f.-.4.
20000370:	00390039 002d0035 00340061 00320063     9.9.5.-.a.4.c.2.
20000380:	0032002d 00650061 00370035 00350061     -.2.a.e.5.7.a.5.
20000390:	00610031 00650064 007d0039 00000000     1.a.d.e.9.}.....

200003a0 <udi_api_vendor>:
200003a0:	00084a09 00084a49 00084a65 00084ab9     .J..IJ..eJ...J..
200003b0:	00000000                                ....

200003b4 <udc_device_desc>:
200003b4:	02000112 40000000 ace52b3e 02010100     .......@>+......
200003c4:	00000103                                ....

200003c8 <udc_device_qual>:
200003c8:	0200060a 40000000 00000001              .......@....

200003d4 <udc_desc_fs>:
200003d4:	00200209 80000101 000409fa ffff0200     .. .............
200003e4:	050700ff 00400281 02050700 00004002     ......@......@..

200003f4 <udc_desc_hs>:
200003f4:	00200209 80000101 000409fa ffff0200     .. .............
20000404:	050700ff 02000281 02050700 00020002     ................

20000414 <udi_apis>:
20000414:	200003a0                                ... 

20000418 <udc_config_lsfs>:
20000418:	200003d4 20000414                       ... ... 

20000420 <udc_config_hs>:
20000420:	200003f4 20000414                       ... ... 

20000428 <udc_config>:
20000428:	200003b4 20000418 200003b4 200003c8     ... ... ... ... 
20000438:	20000420 00000000                        .. ....

20000440 <_impure_ptr>:
20000440:	20000448 00000000                       H.. ....

20000448 <impure_data>:
20000448:	00000000 20000734 2000079c 20000804     ....4.. ... ... 
20000458:	00000000 00000000 00000000 00000000     ................
20000468:	00000000 00000000 00000000 00000000     ................
20000478:	00000000 00000000 00000000 00000000     ................
20000488:	00000000 00000000 00000000 00000000     ................
20000498:	00000000 00000000 00000000 00000000     ................
200004a8:	00000000 00000000 00000000 00000000     ................
200004b8:	00000000 00000000 00000000 00000000     ................
200004c8:	00000000 00000000 00000000 00000000     ................
200004d8:	00000000 00000000 00000000 00000000     ................
200004e8:	00000000 00000000 00000001 00000000     ................
200004f8:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000508:	00000000 00000000 00000000 00000000     ................
20000518:	00000000 00000000 00000000 00000000     ................
20000528:	00000000 00000000 00000000 00000000     ................
20000538:	00000000 00000000 00000000 00000000     ................
20000548:	00000000 00000000 00000000 00000000     ................
20000558:	00000000 00000000 00000000 00000000     ................
20000568:	00000000 00000000 00000000 00000000     ................
20000578:	00000000 00000000 00000000 00000000     ................
20000588:	00000000 00000000 00000000 00000000     ................
20000598:	00000000 00000000 00000000 00000000     ................
200005a8:	00000000 00000000 00000000 00000000     ................
200005b8:	00000000 00000000 00000000 00000000     ................
200005c8:	00000000 00000000 00000000 00000000     ................
200005d8:	00000000 00000000 00000000 00000000     ................
200005e8:	00000000 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000 00000000 00000000 00000000     ................
20000638:	00000000 00000000 00000000 00000000     ................
20000648:	00000000 00000000 00000000 00000000     ................
20000658:	00000000 00000000 00000000 00000000     ................
20000668:	00000000 00000000 00000000 00000000     ................
20000678:	00000000 00000000 00000000 00000000     ................
20000688:	00000000 00000000 00000000 00000000     ................
20000698:	00000000 00000000 00000000 00000000     ................
200006a8:	00000000 00000000 00000000 00000000     ................
200006b8:	00000000 00000000 00000000 00000000     ................
200006c8:	00000000 00000000 00000000 00000000     ................
200006d8:	00000000 00000000 00000000 00000000     ................
200006e8:	00000000 00000000 00000000 00000000     ................
200006f8:	00000000 00000000 00000000 00000000     ................
20000708:	00000000 00000000 00000000 00000000     ................
20000718:	00000000 00000000 00000000 00000000     ................
20000728:	00000000 00000000 00000000 00000000     ................
20000738:	00000000 00000000 00000000 00000000     ................
20000748:	00000000 00000000 00000000 00000000     ................
20000758:	00000000 00000000 00000000 00000000     ................
20000768:	00000000 00000000 00000000 00000000     ................
20000778:	00000000 00000000 00000000 00000000     ................
20000788:	00000000 00000000 00000000 00000000     ................
20000798:	00000000 00000000 00000000 00000000     ................
200007a8:	00000000 00000000 00000000 00000000     ................
200007b8:	00000000 00000000 00000000 00000000     ................
200007c8:	00000000 00000000 00000000 00000000     ................
200007d8:	00000000 00000000 00000000 00000000     ................
200007e8:	00000000 00000000 00000000 00000000     ................
200007f8:	00000000 00000000 00000000 00000000     ................
20000808:	00000000 00000000 00000000 00000000     ................
20000818:	00000000 00000000 00000000 00000000     ................
20000828:	00000000 00000000 00000000 00000000     ................
20000838:	00000000 00000000 00000000 00000000     ................
20000848:	00000000 00000000 00000000 00000000     ................
20000858:	00000000 00000000 00000000 00000000     ................
20000868:	00000000 00000000                       ........

20000870 <__atexit_recursive_mutex>:
20000870:	20001848                                H.. 

20000874 <__global_locale>:
20000874:	00000043 00000000 00000000 00000000     C...............
20000884:	00000000 00000000 00000000 00000000     ................
20000894:	00000043 00000000 00000000 00000000     C...............
200008a4:	00000000 00000000 00000000 00000000     ................
200008b4:	00000043 00000000 00000000 00000000     C...............
200008c4:	00000000 00000000 00000000 00000000     ................
200008d4:	00000043 00000000 00000000 00000000     C...............
200008e4:	00000000 00000000 00000000 00000000     ................
200008f4:	00000043 00000000 00000000 00000000     C...............
20000904:	00000000 00000000 00000000 00000000     ................
20000914:	00000043 00000000 00000000 00000000     C...............
20000924:	00000000 00000000 00000000 00000000     ................
20000934:	00000043 00000000 00000000 00000000     C...............
20000944:	00000000 00000000 00000000 00000000     ................
20000954:	0008cca1 0008bc69 00000000 0008dd64     ....i.......d...
20000964:	0008dba4 0008dd30 0008dd30 0008dd30     ....0...0...0...
20000974:	0008dd30 0008dd30 0008dd30 0008dd30     0...0...0...0...
20000984:	0008dd30 0008dd30 ffffffff ffffffff     0...0...........
20000994:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
200009a4:	00000000 00000000 00000000 00000000     ................
200009b4:	00000000 00000000 53410000 00494943     ..........ASCII.
200009c4:	00000000 00000000 00000000 00000000     ................
200009d4:	00000000 00000000 00000000              ............

200009e0 <__malloc_av_>:
200009e0:	00000000 00000000 200009e0 200009e0     ........... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68 20000d70 20000d70     h.. h.. p.. p.. 
20000d80:	20000d78 20000d78 20000d80 20000d80     x.. x.. ... ... 
20000d90:	20000d88 20000d88 20000d90 20000d90     ... ... ... ... 
20000da0:	20000d98 20000d98 20000da0 20000da0     ... ... ... ... 
20000db0:	20000da8 20000da8 20000db0 20000db0     ... ... ... ... 
20000dc0:	20000db8 20000db8 20000dc0 20000dc0     ... ... ... ... 
20000dd0:	20000dc8 20000dc8 20000dd0 20000dd0     ... ... ... ... 
20000de0:	20000dd8 20000dd8                       ... ... 

20000de8 <__malloc_sbrk_base>:
20000de8:	ffffffff                                ....

20000dec <__malloc_trim_threshold>:
20000dec:	00020000                                ....
