
phywhisperer-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000de6c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008de6c  0008de6c  0001de6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000df0  20000000  0008de74  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000a80  20000df0  0008ec64  00020df0  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020df0  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00020e19  2**0
                  CONTENTS, READONLY
  7 .debug_info   00028d7d  00000000  00000000  00020e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 0000552a  00000000  00000000  00049be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0000989e  00000000  00000000  0004f10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001258  00000000  00000000  000589aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00001048  00000000  00000000  00059c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001b1ac  00000000  00000000  0005ac4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00019a50  00000000  00000000  00075df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005a276  00000000  00000000  0008f846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00005e00  00000000  00000000  000e9abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 3d 35 08 00 89 21 08 00 89 21 08 00     .@. =5...!...!..
   80010:	89 21 08 00 89 21 08 00 89 21 08 00 00 00 00 00     .!...!...!......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 89 21 08 00     .............!..
   80030:	89 21 08 00 00 00 00 00 89 21 08 00 89 21 08 00     .!.......!...!..
   80040:	89 21 08 00 89 21 08 00 89 21 08 00 89 21 08 00     .!...!...!...!..
   80050:	89 21 08 00 89 21 08 00 89 21 08 00 89 21 08 00     .!...!...!...!..
   80060:	89 21 08 00 89 21 08 00 81 29 08 00 99 29 08 00     .!...!...)...)..
   80070:	89 21 08 00 b5 1d 08 00 d9 1d 08 00 fd 1d 08 00     .!..............
   80080:	89 21 08 00 89 21 08 00 89 21 08 00 89 21 08 00     .!...!...!...!..
   80090:	89 21 08 00 89 21 08 00 89 21 08 00 89 21 08 00     .!...!...!...!..
   800a0:	89 21 08 00 89 21 08 00 89 21 08 00 89 21 08 00     .!...!...!...!..
   800b0:	89 21 08 00 25 4d 08 00 89 21 08 00                 .!..%M...!..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000df0 	.word	0x20000df0
   800d8:	00000000 	.word	0x00000000
   800dc:	0008de74 	.word	0x0008de74

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000df4 	.word	0x20000df4
   800f8:	0008de74 	.word	0x0008de74

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
   80170:	00082ab1 	.word	0x00082ab1
   80174:	00082b1d 	.word	0x00082b1d
   80178:	00082b91 	.word	0x00082b91
   8017c:	00082be1 	.word	0x00082be1

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
   801f8:	00082ae9 	.word	0x00082ae9
   801fc:	00082b79 	.word	0x00082b79
   80200:	00082c2d 	.word	0x00082c2d

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b06      	ldr	r3, [pc, #24]	; (802a0 <osc_wait_ready+0x2c>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	bf00      	nop
   80298:	3708      	adds	r7, #8
   8029a:	46bd      	mov	sp, r7
   8029c:	bd80      	pop	{r7, pc}
   8029e:	bf00      	nop
   802a0:	00080181 	.word	0x00080181

000802a4 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a4:	b580      	push	{r7, lr}
   802a6:	b086      	sub	sp, #24
   802a8:	af00      	add	r7, sp, #0
   802aa:	60f8      	str	r0, [r7, #12]
   802ac:	607a      	str	r2, [r7, #4]
   802ae:	603b      	str	r3, [r7, #0]
   802b0:	460b      	mov	r3, r1
   802b2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b4:	687b      	ldr	r3, [r7, #4]
   802b6:	2b00      	cmp	r3, #0
   802b8:	d107      	bne.n	802ca <pll_config_init+0x26>
   802ba:	683b      	ldr	r3, [r7, #0]
   802bc:	2b00      	cmp	r3, #0
   802be:	d104      	bne.n	802ca <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802c0:	68fb      	ldr	r3, [r7, #12]
   802c2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c6:	601a      	str	r2, [r3, #0]
   802c8:	e01a      	b.n	80300 <pll_config_init+0x5c>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802ca:	7afb      	ldrb	r3, [r7, #11]
   802cc:	4618      	mov	r0, r3
   802ce:	4b0e      	ldr	r3, [pc, #56]	; (80308 <pll_config_init+0x64>)
   802d0:	4798      	blx	r3
   802d2:	4602      	mov	r2, r0
   802d4:	687b      	ldr	r3, [r7, #4]
   802d6:	fbb2 f3f3 	udiv	r3, r2, r3
   802da:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802dc:	697b      	ldr	r3, [r7, #20]
   802de:	683a      	ldr	r2, [r7, #0]
   802e0:	fb02 f303 	mul.w	r3, r2, r3
   802e4:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e6:	683b      	ldr	r3, [r7, #0]
   802e8:	3b01      	subs	r3, #1
   802ea:	041a      	lsls	r2, r3, #16
   802ec:	4b07      	ldr	r3, [pc, #28]	; (8030c <pll_config_init+0x68>)
   802ee:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f0:	687a      	ldr	r2, [r7, #4]
   802f2:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f4:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802fa:	68fb      	ldr	r3, [r7, #12]
   802fc:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fe:	bf00      	nop
   80300:	bf00      	nop
   80302:	3718      	adds	r7, #24
   80304:	46bd      	mov	sp, r7
   80306:	bd80      	pop	{r7, pc}
   80308:	00080205 	.word	0x00080205
   8030c:	07ff0000 	.word	0x07ff0000

00080310 <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   80310:	b580      	push	{r7, lr}
   80312:	b082      	sub	sp, #8
   80314:	af00      	add	r7, sp, #0
   80316:	6078      	str	r0, [r7, #4]
   80318:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	2b00      	cmp	r3, #0
   8031e:	d108      	bne.n	80332 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <pll_enable+0x38>)
   80322:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80324:	687b      	ldr	r3, [r7, #4]
   80326:	681b      	ldr	r3, [r3, #0]
   80328:	4a08      	ldr	r2, [pc, #32]	; (8034c <pll_enable+0x3c>)
   8032a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80330:	e005      	b.n	8033e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80332:	687b      	ldr	r3, [r7, #4]
   80334:	681b      	ldr	r3, [r3, #0]
   80336:	4a05      	ldr	r2, [pc, #20]	; (8034c <pll_enable+0x3c>)
   80338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8033c:	61d3      	str	r3, [r2, #28]
}
   8033e:	bf00      	nop
   80340:	3708      	adds	r7, #8
   80342:	46bd      	mov	sp, r7
   80344:	bd80      	pop	{r7, pc}
   80346:	bf00      	nop
   80348:	00082c9d 	.word	0x00082c9d
   8034c:	400e0400 	.word	0x400e0400

00080350 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80350:	b580      	push	{r7, lr}
   80352:	b082      	sub	sp, #8
   80354:	af00      	add	r7, sp, #0
   80356:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80358:	687b      	ldr	r3, [r7, #4]
   8035a:	2b00      	cmp	r3, #0
   8035c:	d103      	bne.n	80366 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <pll_is_locked+0x24>)
   80360:	4798      	blx	r3
   80362:	4603      	mov	r3, r0
   80364:	e002      	b.n	8036c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80366:	4b04      	ldr	r3, [pc, #16]	; (80378 <pll_is_locked+0x28>)
   80368:	4798      	blx	r3
   8036a:	4603      	mov	r3, r0
	}
}
   8036c:	4618      	mov	r0, r3
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
   80374:	00082cb5 	.word	0x00082cb5
   80378:	00082ce9 	.word	0x00082ce9

0008037c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	4603      	mov	r3, r0
   80384:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80386:	79fb      	ldrb	r3, [r7, #7]
   80388:	3b03      	subs	r3, #3
   8038a:	2b04      	cmp	r3, #4
   8038c:	d808      	bhi.n	803a0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038e:	79fb      	ldrb	r3, [r7, #7]
   80390:	4618      	mov	r0, r3
   80392:	4b06      	ldr	r3, [pc, #24]	; (803ac <pll_enable_source+0x30>)
   80394:	4798      	blx	r3
		osc_wait_ready(e_src);
   80396:	79fb      	ldrb	r3, [r7, #7]
   80398:	4618      	mov	r0, r3
   8039a:	4b05      	ldr	r3, [pc, #20]	; (803b0 <pll_enable_source+0x34>)
   8039c:	4798      	blx	r3
		break;
   8039e:	e000      	b.n	803a2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803a0:	bf00      	nop
	}
}
   803a2:	bf00      	nop
   803a4:	3708      	adds	r7, #8
   803a6:	46bd      	mov	sp, r7
   803a8:	bd80      	pop	{r7, pc}
   803aa:	bf00      	nop
   803ac:	000800fd 	.word	0x000800fd
   803b0:	00080275 	.word	0x00080275

000803b4 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b4:	b590      	push	{r4, r7, lr}
   803b6:	b085      	sub	sp, #20
   803b8:	af00      	add	r7, sp, #0
   803ba:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803bc:	6878      	ldr	r0, [r7, #4]
   803be:	4b21      	ldr	r3, [pc, #132]	; (80444 <pll_enable_config_defaults+0x90>)
   803c0:	4798      	blx	r3
   803c2:	4603      	mov	r3, r0
   803c4:	2b00      	cmp	r3, #0
   803c6:	d139      	bne.n	8043c <pll_enable_config_defaults+0x88>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c8:	687b      	ldr	r3, [r7, #4]
   803ca:	2b00      	cmp	r3, #0
   803cc:	d003      	beq.n	803d6 <pll_enable_config_defaults+0x22>
   803ce:	687b      	ldr	r3, [r7, #4]
   803d0:	2b01      	cmp	r3, #1
   803d2:	d015      	beq.n	80400 <pll_enable_config_defaults+0x4c>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803d4:	e024      	b.n	80420 <pll_enable_config_defaults+0x6c>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d6:	2006      	movs	r0, #6
   803d8:	4b1b      	ldr	r3, [pc, #108]	; (80448 <pll_enable_config_defaults+0x94>)
   803da:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803dc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803e0:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x98>)
   803e2:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803e4:	bf00      	nop
   803e6:	4b1a      	ldr	r3, [pc, #104]	; (80450 <pll_enable_config_defaults+0x9c>)
   803e8:	4798      	blx	r3
   803ea:	4603      	mov	r3, r0
   803ec:	2b00      	cmp	r3, #0
   803ee:	d0fa      	beq.n	803e6 <pll_enable_config_defaults+0x32>
		pll_config_init(&pllcfg,
   803f0:	f107 000c 	add.w	r0, r7, #12
   803f4:	2310      	movs	r3, #16
   803f6:	2201      	movs	r2, #1
   803f8:	2106      	movs	r1, #6
   803fa:	4c16      	ldr	r4, [pc, #88]	; (80454 <pll_enable_config_defaults+0xa0>)
   803fc:	47a0      	blx	r4
		break;
   803fe:	e00f      	b.n	80420 <pll_enable_config_defaults+0x6c>
		if (pmc_osc_is_bypassed_main_xtal()) {
   80400:	4b15      	ldr	r3, [pc, #84]	; (80458 <pll_enable_config_defaults+0xa4>)
   80402:	4798      	blx	r3
   80404:	4603      	mov	r3, r0
   80406:	2b00      	cmp	r3, #0
   80408:	d102      	bne.n	80410 <pll_enable_config_defaults+0x5c>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   8040a:	2006      	movs	r0, #6
   8040c:	4b0e      	ldr	r3, [pc, #56]	; (80448 <pll_enable_config_defaults+0x94>)
   8040e:	4798      	blx	r3
		pll_config_init(&pllcfg,
   80410:	f107 000c 	add.w	r0, r7, #12
   80414:	2300      	movs	r3, #0
   80416:	2200      	movs	r2, #0
   80418:	2106      	movs	r1, #6
   8041a:	4c0e      	ldr	r4, [pc, #56]	; (80454 <pll_enable_config_defaults+0xa0>)
   8041c:	47a0      	blx	r4
		break;
   8041e:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   80420:	f107 030c 	add.w	r3, r7, #12
   80424:	6879      	ldr	r1, [r7, #4]
   80426:	4618      	mov	r0, r3
   80428:	4b0c      	ldr	r3, [pc, #48]	; (8045c <pll_enable_config_defaults+0xa8>)
   8042a:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   8042c:	bf00      	nop
   8042e:	6878      	ldr	r0, [r7, #4]
   80430:	4b04      	ldr	r3, [pc, #16]	; (80444 <pll_enable_config_defaults+0x90>)
   80432:	4798      	blx	r3
   80434:	4603      	mov	r3, r0
   80436:	2b00      	cmp	r3, #0
   80438:	d0f9      	beq.n	8042e <pll_enable_config_defaults+0x7a>
   8043a:	e000      	b.n	8043e <pll_enable_config_defaults+0x8a>
		return; // Pll already running
   8043c:	bf00      	nop
}
   8043e:	3714      	adds	r7, #20
   80440:	46bd      	mov	sp, r7
   80442:	bd90      	pop	{r4, r7, pc}
   80444:	00080351 	.word	0x00080351
   80448:	0008037d 	.word	0x0008037d
   8044c:	00082c5d 	.word	0x00082c5d
   80450:	00082c45 	.word	0x00082c45
   80454:	000802a5 	.word	0x000802a5
   80458:	00082c15 	.word	0x00082c15
   8045c:	00080311 	.word	0x00080311

00080460 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   80460:	b480      	push	{r7}
   80462:	b083      	sub	sp, #12
   80464:	af00      	add	r7, sp, #0
   80466:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80468:	687b      	ldr	r3, [r7, #4]
   8046a:	2201      	movs	r2, #1
   8046c:	601a      	str	r2, [r3, #0]
}
   8046e:	bf00      	nop
   80470:	370c      	adds	r7, #12
   80472:	46bd      	mov	sp, r7
   80474:	bc80      	pop	{r7}
   80476:	4770      	bx	lr

00080478 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
   80478:	b480      	push	{r7}
   8047a:	b083      	sub	sp, #12
   8047c:	af00      	add	r7, sp, #0
   8047e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80480:	687b      	ldr	r3, [r7, #4]
   80482:	685b      	ldr	r3, [r3, #4]
   80484:	f043 0201 	orr.w	r2, r3, #1
   80488:	687b      	ldr	r3, [r7, #4]
   8048a:	605a      	str	r2, [r3, #4]
}
   8048c:	bf00      	nop
   8048e:	370c      	adds	r7, #12
   80490:	46bd      	mov	sp, r7
   80492:	bc80      	pop	{r7}
   80494:	4770      	bx	lr
   80496:	0000      	movs	r0, r0

00080498 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   80498:	b580      	push	{r7, lr}
   8049a:	b082      	sub	sp, #8
   8049c:	af00      	add	r7, sp, #0
   8049e:	4603      	mov	r3, r0
   804a0:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   804a2:	b672      	cpsid	i
}
   804a4:	bf00      	nop
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   804a6:	f3bf 8f5f 	dmb	sy
}
   804aa:	bf00      	nop
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   804ac:	4b05      	ldr	r3, [pc, #20]	; (804c4 <sleepmgr_sleep+0x2c>)
   804ae:	2200      	movs	r2, #0
   804b0:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   804b2:	79fb      	ldrb	r3, [r7, #7]
   804b4:	4618      	mov	r0, r3
   804b6:	4b04      	ldr	r3, [pc, #16]	; (804c8 <sleepmgr_sleep+0x30>)
   804b8:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   804ba:	bf00      	nop
   804bc:	3708      	adds	r7, #8
   804be:	46bd      	mov	sp, r7
   804c0:	bd80      	pop	{r7, pc}
   804c2:	bf00      	nop
   804c4:	20000284 	.word	0x20000284
   804c8:	00082e99 	.word	0x00082e99

000804cc <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   804cc:	b480      	push	{r7}
   804ce:	b083      	sub	sp, #12
   804d0:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   804d2:	2300      	movs	r3, #0
   804d4:	71fb      	strb	r3, [r7, #7]
   804d6:	e006      	b.n	804e6 <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   804d8:	79fb      	ldrb	r3, [r7, #7]
   804da:	4a08      	ldr	r2, [pc, #32]	; (804fc <sleepmgr_init+0x30>)
   804dc:	2100      	movs	r1, #0
   804de:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   804e0:	79fb      	ldrb	r3, [r7, #7]
   804e2:	3301      	adds	r3, #1
   804e4:	71fb      	strb	r3, [r7, #7]
   804e6:	79fb      	ldrb	r3, [r7, #7]
   804e8:	2b04      	cmp	r3, #4
   804ea:	d9f5      	bls.n	804d8 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   804ec:	4b03      	ldr	r3, [pc, #12]	; (804fc <sleepmgr_init+0x30>)
   804ee:	2201      	movs	r2, #1
   804f0:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   804f2:	bf00      	nop
   804f4:	370c      	adds	r7, #12
   804f6:	46bd      	mov	sp, r7
   804f8:	bc80      	pop	{r7}
   804fa:	4770      	bx	lr
   804fc:	20001820 	.word	0x20001820

00080500 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   80500:	b480      	push	{r7}
   80502:	b083      	sub	sp, #12
   80504:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   80506:	2300      	movs	r3, #0
   80508:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   8050a:	4b09      	ldr	r3, [pc, #36]	; (80530 <sleepmgr_get_sleep_mode+0x30>)
   8050c:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   8050e:	e005      	b.n	8051c <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   80510:	683b      	ldr	r3, [r7, #0]
   80512:	3301      	adds	r3, #1
   80514:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   80516:	79fb      	ldrb	r3, [r7, #7]
   80518:	3301      	adds	r3, #1
   8051a:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   8051c:	683b      	ldr	r3, [r7, #0]
   8051e:	781b      	ldrb	r3, [r3, #0]
   80520:	2b00      	cmp	r3, #0
   80522:	d0f5      	beq.n	80510 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   80524:	79fb      	ldrb	r3, [r7, #7]
}
   80526:	4618      	mov	r0, r3
   80528:	370c      	adds	r7, #12
   8052a:	46bd      	mov	sp, r7
   8052c:	bc80      	pop	{r7}
   8052e:	4770      	bx	lr
   80530:	20001820 	.word	0x20001820

00080534 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   80534:	b580      	push	{r7, lr}
   80536:	b082      	sub	sp, #8
   80538:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;

	//cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   8053a:	4b0b      	ldr	r3, [pc, #44]	; (80568 <sleepmgr_enter_sleep+0x34>)
   8053c:	4798      	blx	r3
   8053e:	4603      	mov	r3, r0
   80540:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   80542:	79fb      	ldrb	r3, [r7, #7]
   80544:	2b00      	cmp	r3, #0
   80546:	d108      	bne.n	8055a <sleepmgr_enter_sleep+0x26>
		cpu_irq_enable();
   80548:	4b08      	ldr	r3, [pc, #32]	; (8056c <sleepmgr_enter_sleep+0x38>)
   8054a:	2201      	movs	r2, #1
   8054c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8054e:	f3bf 8f5f 	dmb	sy
}
   80552:	bf00      	nop
  __ASM volatile ("cpsie i");
   80554:	b662      	cpsie	i
}
   80556:	bf00      	nop
		return;
   80558:	e003      	b.n	80562 <sleepmgr_enter_sleep+0x2e>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   8055a:	79fb      	ldrb	r3, [r7, #7]
   8055c:	4618      	mov	r0, r3
   8055e:	4b04      	ldr	r3, [pc, #16]	; (80570 <sleepmgr_enter_sleep+0x3c>)
   80560:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   80562:	3708      	adds	r7, #8
   80564:	46bd      	mov	sp, r7
   80566:	bd80      	pop	{r7, pc}
   80568:	00080501 	.word	0x00080501
   8056c:	20000284 	.word	0x20000284
   80570:	00080499 	.word	0x00080499

00080574 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80574:	b480      	push	{r7}
   80576:	b083      	sub	sp, #12
   80578:	af00      	add	r7, sp, #0
   8057a:	6078      	str	r0, [r7, #4]
   8057c:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   8057e:	687b      	ldr	r3, [r7, #4]
   80580:	2200      	movs	r2, #0
   80582:	601a      	str	r2, [r3, #0]
}
   80584:	bf00      	nop
   80586:	370c      	adds	r7, #12
   80588:	46bd      	mov	sp, r7
   8058a:	bc80      	pop	{r7}
   8058c:	4770      	bx	lr
   8058e:	0000      	movs	r0, r0

00080590 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80590:	b480      	push	{r7}
   80592:	b083      	sub	sp, #12
   80594:	af00      	add	r7, sp, #0
   80596:	6078      	str	r0, [r7, #4]
   80598:	460b      	mov	r3, r1
   8059a:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	681b      	ldr	r3, [r3, #0]
   805a0:	f023 0207 	bic.w	r2, r3, #7
   805a4:	687b      	ldr	r3, [r7, #4]
   805a6:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   805a8:	78fb      	ldrb	r3, [r7, #3]
   805aa:	2b0a      	cmp	r3, #10
   805ac:	d839      	bhi.n	80622 <genclk_config_set_source+0x92>
   805ae:	a201      	add	r2, pc, #4	; (adr r2, 805b4 <genclk_config_set_source+0x24>)
   805b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   805b4:	000805e1 	.word	0x000805e1
   805b8:	000805e1 	.word	0x000805e1
   805bc:	000805e1 	.word	0x000805e1
   805c0:	000805eb 	.word	0x000805eb
   805c4:	000805eb 	.word	0x000805eb
   805c8:	000805eb 	.word	0x000805eb
   805cc:	000805eb 	.word	0x000805eb
   805d0:	000805eb 	.word	0x000805eb
   805d4:	000805f9 	.word	0x000805f9
   805d8:	00080607 	.word	0x00080607
   805dc:	00080615 	.word	0x00080615
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   805e0:	687b      	ldr	r3, [r7, #4]
   805e2:	681a      	ldr	r2, [r3, #0]
   805e4:	687b      	ldr	r3, [r7, #4]
   805e6:	601a      	str	r2, [r3, #0]
		break;
   805e8:	e01b      	b.n	80622 <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   805ea:	687b      	ldr	r3, [r7, #4]
   805ec:	681b      	ldr	r3, [r3, #0]
   805ee:	f043 0201 	orr.w	r2, r3, #1
   805f2:	687b      	ldr	r3, [r7, #4]
   805f4:	601a      	str	r2, [r3, #0]
		break;
   805f6:	e014      	b.n	80622 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   805f8:	687b      	ldr	r3, [r7, #4]
   805fa:	681b      	ldr	r3, [r3, #0]
   805fc:	f043 0202 	orr.w	r2, r3, #2
   80600:	687b      	ldr	r3, [r7, #4]
   80602:	601a      	str	r2, [r3, #0]
		break;
   80604:	e00d      	b.n	80622 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   80606:	687b      	ldr	r3, [r7, #4]
   80608:	681b      	ldr	r3, [r3, #0]
   8060a:	f043 0203 	orr.w	r2, r3, #3
   8060e:	687b      	ldr	r3, [r7, #4]
   80610:	601a      	str	r2, [r3, #0]
		break;
   80612:	e006      	b.n	80622 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   80614:	687b      	ldr	r3, [r7, #4]
   80616:	681b      	ldr	r3, [r3, #0]
   80618:	f043 0204 	orr.w	r2, r3, #4
   8061c:	687b      	ldr	r3, [r7, #4]
   8061e:	601a      	str	r2, [r3, #0]
		break;
   80620:	bf00      	nop
	}
}
   80622:	bf00      	nop
   80624:	370c      	adds	r7, #12
   80626:	46bd      	mov	sp, r7
   80628:	bc80      	pop	{r7}
   8062a:	4770      	bx	lr

0008062c <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   8062c:	b480      	push	{r7}
   8062e:	b083      	sub	sp, #12
   80630:	af00      	add	r7, sp, #0
   80632:	6078      	str	r0, [r7, #4]
   80634:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   80636:	687b      	ldr	r3, [r7, #4]
   80638:	681b      	ldr	r3, [r3, #0]
   8063a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8063e:	687b      	ldr	r3, [r7, #4]
   80640:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   80642:	687b      	ldr	r3, [r7, #4]
   80644:	681a      	ldr	r2, [r3, #0]
   80646:	683b      	ldr	r3, [r7, #0]
   80648:	431a      	orrs	r2, r3
   8064a:	687b      	ldr	r3, [r7, #4]
   8064c:	601a      	str	r2, [r3, #0]
}
   8064e:	bf00      	nop
   80650:	370c      	adds	r7, #12
   80652:	46bd      	mov	sp, r7
   80654:	bc80      	pop	{r7}
   80656:	4770      	bx	lr

00080658 <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80658:	b580      	push	{r7, lr}
   8065a:	b082      	sub	sp, #8
   8065c:	af00      	add	r7, sp, #0
   8065e:	6078      	str	r0, [r7, #4]
   80660:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   80662:	4907      	ldr	r1, [pc, #28]	; (80680 <genclk_enable+0x28>)
   80664:	687b      	ldr	r3, [r7, #4]
   80666:	681a      	ldr	r2, [r3, #0]
   80668:	683b      	ldr	r3, [r7, #0]
   8066a:	3310      	adds	r3, #16
   8066c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80670:	6838      	ldr	r0, [r7, #0]
   80672:	4b04      	ldr	r3, [pc, #16]	; (80684 <genclk_enable+0x2c>)
   80674:	4798      	blx	r3
}
   80676:	bf00      	nop
   80678:	3708      	adds	r7, #8
   8067a:	46bd      	mov	sp, r7
   8067c:	bd80      	pop	{r7, pc}
   8067e:	bf00      	nop
   80680:	400e0400 	.word	0x400e0400
   80684:	00082d99 	.word	0x00082d99

00080688 <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   80688:	b580      	push	{r7, lr}
   8068a:	b082      	sub	sp, #8
   8068c:	af00      	add	r7, sp, #0
   8068e:	4603      	mov	r3, r0
   80690:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80692:	79fb      	ldrb	r3, [r7, #7]
   80694:	2b0a      	cmp	r3, #10
   80696:	f200 80a2 	bhi.w	807de <genclk_enable_source+0x156>
   8069a:	a201      	add	r2, pc, #4	; (adr r2, 806a0 <genclk_enable_source+0x18>)
   8069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   806a0:	000806cd 	.word	0x000806cd
   806a4:	000806ef 	.word	0x000806ef
   806a8:	0008070f 	.word	0x0008070f
   806ac:	0008072f 	.word	0x0008072f
   806b0:	0008074f 	.word	0x0008074f
   806b4:	0008076f 	.word	0x0008076f
   806b8:	0008078f 	.word	0x0008078f
   806bc:	000807af 	.word	0x000807af
   806c0:	000807cf 	.word	0x000807cf
   806c4:	000807d7 	.word	0x000807d7
   806c8:	000807df 	.word	0x000807df
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   806cc:	2000      	movs	r0, #0
   806ce:	4b4e      	ldr	r3, [pc, #312]	; (80808 <genclk_enable_source+0x180>)
   806d0:	4798      	blx	r3
   806d2:	4603      	mov	r3, r0
   806d4:	f083 0301 	eor.w	r3, r3, #1
   806d8:	b2db      	uxtb	r3, r3
   806da:	2b00      	cmp	r3, #0
   806dc:	f000 8081 	beq.w	807e2 <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   806e0:	2000      	movs	r0, #0
   806e2:	4b4a      	ldr	r3, [pc, #296]	; (8080c <genclk_enable_source+0x184>)
   806e4:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   806e6:	2000      	movs	r0, #0
   806e8:	4b49      	ldr	r3, [pc, #292]	; (80810 <genclk_enable_source+0x188>)
   806ea:	4798      	blx	r3
		}
		break;
   806ec:	e079      	b.n	807e2 <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   806ee:	2001      	movs	r0, #1
   806f0:	4b45      	ldr	r3, [pc, #276]	; (80808 <genclk_enable_source+0x180>)
   806f2:	4798      	blx	r3
   806f4:	4603      	mov	r3, r0
   806f6:	f083 0301 	eor.w	r3, r3, #1
   806fa:	b2db      	uxtb	r3, r3
   806fc:	2b00      	cmp	r3, #0
   806fe:	d072      	beq.n	807e6 <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   80700:	2001      	movs	r0, #1
   80702:	4b42      	ldr	r3, [pc, #264]	; (8080c <genclk_enable_source+0x184>)
   80704:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   80706:	2001      	movs	r0, #1
   80708:	4b41      	ldr	r3, [pc, #260]	; (80810 <genclk_enable_source+0x188>)
   8070a:	4798      	blx	r3
		}
		break;
   8070c:	e06b      	b.n	807e6 <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   8070e:	2002      	movs	r0, #2
   80710:	4b3d      	ldr	r3, [pc, #244]	; (80808 <genclk_enable_source+0x180>)
   80712:	4798      	blx	r3
   80714:	4603      	mov	r3, r0
   80716:	f083 0301 	eor.w	r3, r3, #1
   8071a:	b2db      	uxtb	r3, r3
   8071c:	2b00      	cmp	r3, #0
   8071e:	d064      	beq.n	807ea <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   80720:	2002      	movs	r0, #2
   80722:	4b3a      	ldr	r3, [pc, #232]	; (8080c <genclk_enable_source+0x184>)
   80724:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   80726:	2002      	movs	r0, #2
   80728:	4b39      	ldr	r3, [pc, #228]	; (80810 <genclk_enable_source+0x188>)
   8072a:	4798      	blx	r3
		}
		break;
   8072c:	e05d      	b.n	807ea <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   8072e:	2003      	movs	r0, #3
   80730:	4b35      	ldr	r3, [pc, #212]	; (80808 <genclk_enable_source+0x180>)
   80732:	4798      	blx	r3
   80734:	4603      	mov	r3, r0
   80736:	f083 0301 	eor.w	r3, r3, #1
   8073a:	b2db      	uxtb	r3, r3
   8073c:	2b00      	cmp	r3, #0
   8073e:	d056      	beq.n	807ee <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   80740:	2003      	movs	r0, #3
   80742:	4b32      	ldr	r3, [pc, #200]	; (8080c <genclk_enable_source+0x184>)
   80744:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   80746:	2003      	movs	r0, #3
   80748:	4b31      	ldr	r3, [pc, #196]	; (80810 <genclk_enable_source+0x188>)
   8074a:	4798      	blx	r3
		}
		break;
   8074c:	e04f      	b.n	807ee <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   8074e:	2004      	movs	r0, #4
   80750:	4b2d      	ldr	r3, [pc, #180]	; (80808 <genclk_enable_source+0x180>)
   80752:	4798      	blx	r3
   80754:	4603      	mov	r3, r0
   80756:	f083 0301 	eor.w	r3, r3, #1
   8075a:	b2db      	uxtb	r3, r3
   8075c:	2b00      	cmp	r3, #0
   8075e:	d048      	beq.n	807f2 <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   80760:	2004      	movs	r0, #4
   80762:	4b2a      	ldr	r3, [pc, #168]	; (8080c <genclk_enable_source+0x184>)
   80764:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   80766:	2004      	movs	r0, #4
   80768:	4b29      	ldr	r3, [pc, #164]	; (80810 <genclk_enable_source+0x188>)
   8076a:	4798      	blx	r3
		}
		break;
   8076c:	e041      	b.n	807f2 <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   8076e:	2005      	movs	r0, #5
   80770:	4b25      	ldr	r3, [pc, #148]	; (80808 <genclk_enable_source+0x180>)
   80772:	4798      	blx	r3
   80774:	4603      	mov	r3, r0
   80776:	f083 0301 	eor.w	r3, r3, #1
   8077a:	b2db      	uxtb	r3, r3
   8077c:	2b00      	cmp	r3, #0
   8077e:	d03a      	beq.n	807f6 <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80780:	2005      	movs	r0, #5
   80782:	4b22      	ldr	r3, [pc, #136]	; (8080c <genclk_enable_source+0x184>)
   80784:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   80786:	2005      	movs	r0, #5
   80788:	4b21      	ldr	r3, [pc, #132]	; (80810 <genclk_enable_source+0x188>)
   8078a:	4798      	blx	r3
		}
		break;
   8078c:	e033      	b.n	807f6 <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   8078e:	2006      	movs	r0, #6
   80790:	4b1d      	ldr	r3, [pc, #116]	; (80808 <genclk_enable_source+0x180>)
   80792:	4798      	blx	r3
   80794:	4603      	mov	r3, r0
   80796:	f083 0301 	eor.w	r3, r3, #1
   8079a:	b2db      	uxtb	r3, r3
   8079c:	2b00      	cmp	r3, #0
   8079e:	d02c      	beq.n	807fa <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   807a0:	2006      	movs	r0, #6
   807a2:	4b1a      	ldr	r3, [pc, #104]	; (8080c <genclk_enable_source+0x184>)
   807a4:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   807a6:	2006      	movs	r0, #6
   807a8:	4b19      	ldr	r3, [pc, #100]	; (80810 <genclk_enable_source+0x188>)
   807aa:	4798      	blx	r3
		}
		break;
   807ac:	e025      	b.n	807fa <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   807ae:	2007      	movs	r0, #7
   807b0:	4b15      	ldr	r3, [pc, #84]	; (80808 <genclk_enable_source+0x180>)
   807b2:	4798      	blx	r3
   807b4:	4603      	mov	r3, r0
   807b6:	f083 0301 	eor.w	r3, r3, #1
   807ba:	b2db      	uxtb	r3, r3
   807bc:	2b00      	cmp	r3, #0
   807be:	d01e      	beq.n	807fe <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   807c0:	2007      	movs	r0, #7
   807c2:	4b12      	ldr	r3, [pc, #72]	; (8080c <genclk_enable_source+0x184>)
   807c4:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   807c6:	2007      	movs	r0, #7
   807c8:	4b11      	ldr	r3, [pc, #68]	; (80810 <genclk_enable_source+0x188>)
   807ca:	4798      	blx	r3
		}
		break;
   807cc:	e017      	b.n	807fe <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   807ce:	2000      	movs	r0, #0
   807d0:	4b10      	ldr	r3, [pc, #64]	; (80814 <genclk_enable_source+0x18c>)
   807d2:	4798      	blx	r3
		break;
   807d4:	e014      	b.n	80800 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   807d6:	2001      	movs	r0, #1
   807d8:	4b0e      	ldr	r3, [pc, #56]	; (80814 <genclk_enable_source+0x18c>)
   807da:	4798      	blx	r3
		break;
   807dc:	e010      	b.n	80800 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   807de:	bf00      	nop
   807e0:	e00e      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807e2:	bf00      	nop
   807e4:	e00c      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807e6:	bf00      	nop
   807e8:	e00a      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807ea:	bf00      	nop
   807ec:	e008      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807ee:	bf00      	nop
   807f0:	e006      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807f2:	bf00      	nop
   807f4:	e004      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807f6:	bf00      	nop
   807f8:	e002      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807fa:	bf00      	nop
   807fc:	e000      	b.n	80800 <genclk_enable_source+0x178>
		break;
   807fe:	bf00      	nop
	}
}
   80800:	bf00      	nop
   80802:	3708      	adds	r7, #8
   80804:	46bd      	mov	sp, r7
   80806:	bd80      	pop	{r7, pc}
   80808:	00080181 	.word	0x00080181
   8080c:	000800fd 	.word	0x000800fd
   80810:	00080275 	.word	0x00080275
   80814:	000803b5 	.word	0x000803b5

00080818 <phywhisperer_setup_pins>:
//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";


void phywhisperer_setup_pins(void)
{
   80818:	b580      	push	{r7, lr}
   8081a:	af00      	add	r7, sp, #0
    board_init();
   8081c:	4b3f      	ldr	r3, [pc, #252]	; (8091c <phywhisperer_setup_pins+0x104>)
   8081e:	4798      	blx	r3

    
    //Configure FPGA to allow programming via USB
    fpga_program_init();
   80820:	4b3f      	ldr	r3, [pc, #252]	; (80920 <phywhisperer_setup_pins+0x108>)
   80822:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   80824:	2009      	movs	r0, #9
   80826:	4b3f      	ldr	r3, [pc, #252]	; (80924 <phywhisperer_setup_pins+0x10c>)
   80828:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   8082a:	493f      	ldr	r1, [pc, #252]	; (80928 <phywhisperer_setup_pins+0x110>)
   8082c:	2029      	movs	r0, #41	; 0x29
   8082e:	4b3f      	ldr	r3, [pc, #252]	; (8092c <phywhisperer_setup_pins+0x114>)
   80830:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   80832:	493d      	ldr	r1, [pc, #244]	; (80928 <phywhisperer_setup_pins+0x110>)
   80834:	202a      	movs	r0, #42	; 0x2a
   80836:	4b3d      	ldr	r3, [pc, #244]	; (8092c <phywhisperer_setup_pins+0x114>)
   80838:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   8083a:	493b      	ldr	r1, [pc, #236]	; (80928 <phywhisperer_setup_pins+0x110>)
   8083c:	202b      	movs	r0, #43	; 0x2b
   8083e:	4b3b      	ldr	r3, [pc, #236]	; (8092c <phywhisperer_setup_pins+0x114>)
   80840:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   80842:	4939      	ldr	r1, [pc, #228]	; (80928 <phywhisperer_setup_pins+0x110>)
   80844:	202c      	movs	r0, #44	; 0x2c
   80846:	4b39      	ldr	r3, [pc, #228]	; (8092c <phywhisperer_setup_pins+0x114>)
   80848:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   8084a:	4937      	ldr	r1, [pc, #220]	; (80928 <phywhisperer_setup_pins+0x110>)
   8084c:	202d      	movs	r0, #45	; 0x2d
   8084e:	4b37      	ldr	r3, [pc, #220]	; (8092c <phywhisperer_setup_pins+0x114>)
   80850:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   80852:	4935      	ldr	r1, [pc, #212]	; (80928 <phywhisperer_setup_pins+0x110>)
   80854:	202e      	movs	r0, #46	; 0x2e
   80856:	4b35      	ldr	r3, [pc, #212]	; (8092c <phywhisperer_setup_pins+0x114>)
   80858:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   8085a:	4933      	ldr	r1, [pc, #204]	; (80928 <phywhisperer_setup_pins+0x110>)
   8085c:	202f      	movs	r0, #47	; 0x2f
   8085e:	4b33      	ldr	r3, [pc, #204]	; (8092c <phywhisperer_setup_pins+0x114>)
   80860:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   80862:	4931      	ldr	r1, [pc, #196]	; (80928 <phywhisperer_setup_pins+0x110>)
   80864:	2030      	movs	r0, #48	; 0x30
   80866:	4b31      	ldr	r3, [pc, #196]	; (8092c <phywhisperer_setup_pins+0x114>)
   80868:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   8086a:	492f      	ldr	r1, [pc, #188]	; (80928 <phywhisperer_setup_pins+0x110>)
   8086c:	2033      	movs	r0, #51	; 0x33
   8086e:	4b2f      	ldr	r3, [pc, #188]	; (8092c <phywhisperer_setup_pins+0x114>)
   80870:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80872:	492d      	ldr	r1, [pc, #180]	; (80928 <phywhisperer_setup_pins+0x110>)
   80874:	2037      	movs	r0, #55	; 0x37
   80876:	4b2d      	ldr	r3, [pc, #180]	; (8092c <phywhisperer_setup_pins+0x114>)
   80878:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   8087a:	492b      	ldr	r1, [pc, #172]	; (80928 <phywhisperer_setup_pins+0x110>)
   8087c:	2034      	movs	r0, #52	; 0x34
   8087e:	4b2b      	ldr	r3, [pc, #172]	; (8092c <phywhisperer_setup_pins+0x114>)
   80880:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80882:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   80886:	f240 11bf 	movw	r1, #447	; 0x1bf
   8088a:	4829      	ldr	r0, [pc, #164]	; (80930 <phywhisperer_setup_pins+0x118>)
   8088c:	4b29      	ldr	r3, [pc, #164]	; (80934 <phywhisperer_setup_pins+0x11c>)
   8088e:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   80890:	f240 11bf 	movw	r1, #447	; 0x1bf
   80894:	4826      	ldr	r0, [pc, #152]	; (80930 <phywhisperer_setup_pins+0x118>)
   80896:	4b28      	ldr	r3, [pc, #160]	; (80938 <phywhisperer_setup_pins+0x120>)
   80898:	4798      	blx	r3

    gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
   8089a:	4928      	ldr	r1, [pc, #160]	; (8093c <phywhisperer_setup_pins+0x124>)
   8089c:	2027      	movs	r0, #39	; 0x27
   8089e:	4b23      	ldr	r3, [pc, #140]	; (8092c <phywhisperer_setup_pins+0x114>)
   808a0:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
   808a2:	4926      	ldr	r1, [pc, #152]	; (8093c <phywhisperer_setup_pins+0x124>)
   808a4:	2028      	movs	r0, #40	; 0x28
   808a6:	4b21      	ldr	r3, [pc, #132]	; (8092c <phywhisperer_setup_pins+0x114>)
   808a8:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
   808aa:	4924      	ldr	r1, [pc, #144]	; (8093c <phywhisperer_setup_pins+0x124>)
   808ac:	2020      	movs	r0, #32
   808ae:	4b1f      	ldr	r3, [pc, #124]	; (8092c <phywhisperer_setup_pins+0x114>)
   808b0:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
   808b2:	4922      	ldr	r1, [pc, #136]	; (8093c <phywhisperer_setup_pins+0x124>)
   808b4:	2021      	movs	r0, #33	; 0x21
   808b6:	4b1d      	ldr	r3, [pc, #116]	; (8092c <phywhisperer_setup_pins+0x114>)
   808b8:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
   808ba:	4920      	ldr	r1, [pc, #128]	; (8093c <phywhisperer_setup_pins+0x124>)
   808bc:	2022      	movs	r0, #34	; 0x22
   808be:	4b1b      	ldr	r3, [pc, #108]	; (8092c <phywhisperer_setup_pins+0x114>)
   808c0:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
   808c2:	491e      	ldr	r1, [pc, #120]	; (8093c <phywhisperer_setup_pins+0x124>)
   808c4:	2023      	movs	r0, #35	; 0x23
   808c6:	4b19      	ldr	r3, [pc, #100]	; (8092c <phywhisperer_setup_pins+0x114>)
   808c8:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
   808ca:	491c      	ldr	r1, [pc, #112]	; (8093c <phywhisperer_setup_pins+0x124>)
   808cc:	2024      	movs	r0, #36	; 0x24
   808ce:	4b17      	ldr	r3, [pc, #92]	; (8092c <phywhisperer_setup_pins+0x114>)
   808d0:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
   808d2:	491a      	ldr	r1, [pc, #104]	; (8093c <phywhisperer_setup_pins+0x124>)
   808d4:	2025      	movs	r0, #37	; 0x25
   808d6:	4b15      	ldr	r3, [pc, #84]	; (8092c <phywhisperer_setup_pins+0x114>)
   808d8:	4798      	blx	r3

    gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
   808da:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   808de:	2026      	movs	r0, #38	; 0x26
   808e0:	4b12      	ldr	r3, [pc, #72]	; (8092c <phywhisperer_setup_pins+0x114>)
   808e2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   808e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808e8:	2031      	movs	r0, #49	; 0x31
   808ea:	4b10      	ldr	r3, [pc, #64]	; (8092c <phywhisperer_setup_pins+0x114>)
   808ec:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   808ee:	2200      	movs	r2, #0
   808f0:	2100      	movs	r1, #0
   808f2:	4813      	ldr	r0, [pc, #76]	; (80940 <phywhisperer_setup_pins+0x128>)
   808f4:	4b13      	ldr	r3, [pc, #76]	; (80944 <phywhisperer_setup_pins+0x12c>)
   808f6:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(0)
                         | SMC_SETUP_NRD_SETUP(0)
                         | SMC_SETUP_NCS_RD_SETUP(0));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(0)
   808f8:	2200      	movs	r2, #0
   808fa:	2100      	movs	r1, #0
   808fc:	4810      	ldr	r0, [pc, #64]	; (80940 <phywhisperer_setup_pins+0x128>)
   808fe:	4b12      	ldr	r3, [pc, #72]	; (80948 <phywhisperer_setup_pins+0x130>)
   80900:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(0)
                         | SMC_PULSE_NRD_PULSE(0)
                         | SMC_PULSE_NCS_RD_PULSE(0));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(1)
   80902:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80906:	2100      	movs	r1, #0
   80908:	480d      	ldr	r0, [pc, #52]	; (80940 <phywhisperer_setup_pins+0x128>)
   8090a:	4b10      	ldr	r3, [pc, #64]	; (8094c <phywhisperer_setup_pins+0x134>)
   8090c:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(1));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   8090e:	2203      	movs	r2, #3
   80910:	2100      	movs	r1, #0
   80912:	480b      	ldr	r0, [pc, #44]	; (80940 <phywhisperer_setup_pins+0x128>)
   80914:	4b0e      	ldr	r3, [pc, #56]	; (80950 <phywhisperer_setup_pins+0x138>)
   80916:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   80918:	bf00      	nop
   8091a:	bd80      	pop	{r7, pc}
   8091c:	00082285 	.word	0x00082285
   80920:	000815e5 	.word	0x000815e5
   80924:	00082d01 	.word	0x00082d01
   80928:	08000001 	.word	0x08000001
   8092c:	0008269d 	.word	0x0008269d
   80930:	400e0e00 	.word	0x400e0e00
   80934:	000827cd 	.word	0x000827cd
   80938:	000825a9 	.word	0x000825a9
   8093c:	10000001 	.word	0x10000001
   80940:	400e0000 	.word	0x400e0000
   80944:	000832f1 	.word	0x000832f1
   80948:	0008331b 	.word	0x0008331b
   8094c:	00083345 	.word	0x00083345
   80950:	0008336f 	.word	0x0008336f

00080954 <genclk_enable_config>:
{
    for (volatile uint32_t i = 0; i < 250000; i++);
}

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   80954:	b580      	push	{r7, lr}
   80956:	b086      	sub	sp, #24
   80958:	af00      	add	r7, sp, #0
   8095a:	60f8      	str	r0, [r7, #12]
   8095c:	460b      	mov	r3, r1
   8095e:	607a      	str	r2, [r7, #4]
   80960:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   80962:	f107 0314 	add.w	r3, r7, #20
   80966:	68f9      	ldr	r1, [r7, #12]
   80968:	4618      	mov	r0, r3
   8096a:	4b0e      	ldr	r3, [pc, #56]	; (809a4 <genclk_enable_config+0x50>)
   8096c:	4798      	blx	r3
    genclk_enable_source(src);
   8096e:	7afb      	ldrb	r3, [r7, #11]
   80970:	4618      	mov	r0, r3
   80972:	4b0d      	ldr	r3, [pc, #52]	; (809a8 <genclk_enable_config+0x54>)
   80974:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   80976:	7afa      	ldrb	r2, [r7, #11]
   80978:	f107 0314 	add.w	r3, r7, #20
   8097c:	4611      	mov	r1, r2
   8097e:	4618      	mov	r0, r3
   80980:	4b0a      	ldr	r3, [pc, #40]	; (809ac <genclk_enable_config+0x58>)
   80982:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   80984:	f107 0314 	add.w	r3, r7, #20
   80988:	6879      	ldr	r1, [r7, #4]
   8098a:	4618      	mov	r0, r3
   8098c:	4b08      	ldr	r3, [pc, #32]	; (809b0 <genclk_enable_config+0x5c>)
   8098e:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80990:	f107 0314 	add.w	r3, r7, #20
   80994:	68f9      	ldr	r1, [r7, #12]
   80996:	4618      	mov	r0, r3
   80998:	4b06      	ldr	r3, [pc, #24]	; (809b4 <genclk_enable_config+0x60>)
   8099a:	4798      	blx	r3
}
   8099c:	bf00      	nop
   8099e:	3718      	adds	r7, #24
   809a0:	46bd      	mov	sp, r7
   809a2:	bd80      	pop	{r7, pc}
   809a4:	00080575 	.word	0x00080575
   809a8:	00080689 	.word	0x00080689
   809ac:	00080591 	.word	0x00080591
   809b0:	0008062d 	.word	0x0008062d
   809b4:	00080659 	.word	0x00080659

000809b8 <enable_spi>:

#define ADC_SPI_CS PIO_PA3_IDX
#define ADC_RESET PIO_PA4_IDX

void enable_spi(void)
{
   809b8:	b580      	push	{r7, lr}
   809ba:	b084      	sub	sp, #16
   809bc:	af00      	add	r7, sp, #0
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
   809be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809c2:	200d      	movs	r0, #13
   809c4:	4b2d      	ldr	r3, [pc, #180]	; (80a7c <enable_spi+0xc4>)
   809c6:	4798      	blx	r3
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   809c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809cc:	200e      	movs	r0, #14
   809ce:	4b2b      	ldr	r3, [pc, #172]	; (80a7c <enable_spi+0xc4>)
   809d0:	4798      	blx	r3
    gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   809d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809d6:	200f      	movs	r0, #15
   809d8:	4b28      	ldr	r3, [pc, #160]	; (80a7c <enable_spi+0xc4>)
   809da:	4798      	blx	r3
    gpio_configure_pin(ADC_SPI_CS, SPI_CS_FLAGS);
   809dc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   809e0:	2003      	movs	r0, #3
   809e2:	4b26      	ldr	r3, [pc, #152]	; (80a7c <enable_spi+0xc4>)
   809e4:	4798      	blx	r3
    gpio_set_pin_high(ADC_SPI_CS);
   809e6:	2003      	movs	r0, #3
   809e8:	4b25      	ldr	r3, [pc, #148]	; (80a80 <enable_spi+0xc8>)
   809ea:	4798      	blx	r3
    gpio_configure_pin(ADC_RESET, SPI_CS_FLAGS);
   809ec:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   809f0:	2004      	movs	r0, #4
   809f2:	4b22      	ldr	r3, [pc, #136]	; (80a7c <enable_spi+0xc4>)
   809f4:	4798      	blx	r3
    // gpio_set_pin_low(ADC_RESET);
    gpio_set_pin_high(ADC_RESET);
   809f6:	2004      	movs	r0, #4
   809f8:	4b21      	ldr	r3, [pc, #132]	; (80a80 <enable_spi+0xc8>)
   809fa:	4798      	blx	r3
    for (volatile uint32_t i = 0; i < 500; i++);
   809fc:	2300      	movs	r3, #0
   809fe:	60bb      	str	r3, [r7, #8]
   80a00:	e002      	b.n	80a08 <enable_spi+0x50>
   80a02:	68bb      	ldr	r3, [r7, #8]
   80a04:	3301      	adds	r3, #1
   80a06:	60bb      	str	r3, [r7, #8]
   80a08:	68bb      	ldr	r3, [r7, #8]
   80a0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   80a0e:	d3f8      	bcc.n	80a02 <enable_spi+0x4a>
    gpio_set_pin_low(ADC_RESET);
   80a10:	2004      	movs	r0, #4
   80a12:	4b1c      	ldr	r3, [pc, #112]	; (80a84 <enable_spi+0xcc>)
   80a14:	4798      	blx	r3
    for (volatile uint32_t i = 0; i < 500; i++);
   80a16:	2300      	movs	r3, #0
   80a18:	607b      	str	r3, [r7, #4]
   80a1a:	e002      	b.n	80a22 <enable_spi+0x6a>
   80a1c:	687b      	ldr	r3, [r7, #4]
   80a1e:	3301      	adds	r3, #1
   80a20:	607b      	str	r3, [r7, #4]
   80a22:	687b      	ldr	r3, [r7, #4]
   80a24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   80a28:	d3f8      	bcc.n	80a1c <enable_spi+0x64>

    uint32_t baud;
    spi_enable_clock(SPI);
   80a2a:	4817      	ldr	r0, [pc, #92]	; (80a88 <enable_spi+0xd0>)
   80a2c:	4b17      	ldr	r3, [pc, #92]	; (80a8c <enable_spi+0xd4>)
   80a2e:	4798      	blx	r3
    int16_t div = spi_calc_baudrate_div(960E3, 96E6); //960kHz
   80a30:	4917      	ldr	r1, [pc, #92]	; (80a90 <enable_spi+0xd8>)
   80a32:	4818      	ldr	r0, [pc, #96]	; (80a94 <enable_spi+0xdc>)
   80a34:	4b18      	ldr	r3, [pc, #96]	; (80a98 <enable_spi+0xe0>)
   80a36:	4798      	blx	r3
   80a38:	4603      	mov	r3, r0
   80a3a:	81fb      	strh	r3, [r7, #14]
    spi_set_baudrate_div(SPI, 0, div);
   80a3c:	89fb      	ldrh	r3, [r7, #14]
   80a3e:	b2db      	uxtb	r3, r3
   80a40:	461a      	mov	r2, r3
   80a42:	2100      	movs	r1, #0
   80a44:	4810      	ldr	r0, [pc, #64]	; (80a88 <enable_spi+0xd0>)
   80a46:	4b15      	ldr	r3, [pc, #84]	; (80a9c <enable_spi+0xe4>)
   80a48:	4798      	blx	r3

    spi_set_master_mode(SPI);
   80a4a:	480f      	ldr	r0, [pc, #60]	; (80a88 <enable_spi+0xd0>)
   80a4c:	4b14      	ldr	r3, [pc, #80]	; (80aa0 <enable_spi+0xe8>)
   80a4e:	4798      	blx	r3
    spi_set_clock_polarity(SPI, 0, 0);
   80a50:	2200      	movs	r2, #0
   80a52:	2100      	movs	r1, #0
   80a54:	480c      	ldr	r0, [pc, #48]	; (80a88 <enable_spi+0xd0>)
   80a56:	4b13      	ldr	r3, [pc, #76]	; (80aa4 <enable_spi+0xec>)
   80a58:	4798      	blx	r3
    spi_set_bits_per_transfer(SPI, 0, 8);
   80a5a:	2208      	movs	r2, #8
   80a5c:	2100      	movs	r1, #0
   80a5e:	480a      	ldr	r0, [pc, #40]	; (80a88 <enable_spi+0xd0>)
   80a60:	4b11      	ldr	r3, [pc, #68]	; (80aa8 <enable_spi+0xf0>)
   80a62:	4798      	blx	r3
    spi_set_clock_phase(SPI, 0, 1);
   80a64:	2201      	movs	r2, #1
   80a66:	2100      	movs	r1, #0
   80a68:	4807      	ldr	r0, [pc, #28]	; (80a88 <enable_spi+0xd0>)
   80a6a:	4b10      	ldr	r3, [pc, #64]	; (80aac <enable_spi+0xf4>)
   80a6c:	4798      	blx	r3

    spi_enable(SPI);
   80a6e:	4806      	ldr	r0, [pc, #24]	; (80a88 <enable_spi+0xd0>)
   80a70:	4b0f      	ldr	r3, [pc, #60]	; (80ab0 <enable_spi+0xf8>)
   80a72:	4798      	blx	r3
}
   80a74:	bf00      	nop
   80a76:	3710      	adds	r7, #16
   80a78:	46bd      	mov	sp, r7
   80a7a:	bd80      	pop	{r7, pc}
   80a7c:	0008269d 	.word	0x0008269d
   80a80:	0008263d 	.word	0x0008263d
   80a84:	0008266d 	.word	0x0008266d
   80a88:	40008000 	.word	0x40008000
   80a8c:	000833b5 	.word	0x000833b5
   80a90:	05b8d800 	.word	0x05b8d800
   80a94:	000ea600 	.word	0x000ea600
   80a98:	000834b5 	.word	0x000834b5
   80a9c:	000834ef 	.word	0x000834ef
   80aa0:	00080479 	.word	0x00080479
   80aa4:	000833d1 	.word	0x000833d1
   80aa8:	0008346d 	.word	0x0008346d
   80aac:	0008341f 	.word	0x0008341f
   80ab0:	00080461 	.word	0x00080461

00080ab4 <main>:


int main(void)
{
   80ab4:	b580      	push	{r7, lr}
   80ab6:	b086      	sub	sp, #24
   80ab8:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80aba:	1d3b      	adds	r3, r7, #4
   80abc:	2110      	movs	r1, #16
   80abe:	4618      	mov	r0, r3
   80ac0:	4b1c      	ldr	r3, [pc, #112]	; (80b34 <main+0x80>)
   80ac2:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80ac4:	4b1c      	ldr	r3, [pc, #112]	; (80b38 <main+0x84>)
   80ac6:	2201      	movs	r2, #1
   80ac8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   80aca:	f3bf 8f5f 	dmb	sy
}
   80ace:	bf00      	nop
  __ASM volatile ("cpsie i");
   80ad0:	b662      	cpsie	i
}
   80ad2:	bf00      	nop

    // Initialize the sleep manager
    sleepmgr_init();
   80ad4:	4b19      	ldr	r3, [pc, #100]	; (80b3c <main+0x88>)
   80ad6:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   80ad8:	4b19      	ldr	r3, [pc, #100]	; (80b40 <main+0x8c>)
   80ada:	4798      	blx	r3
    phywhisperer_setup_pins();
   80adc:	4b19      	ldr	r3, [pc, #100]	; (80b44 <main+0x90>)
   80ade:	4798      	blx	r3
#else
    system_init();
#endif

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   80ae0:	2300      	movs	r3, #0
   80ae2:	617b      	str	r3, [r7, #20]
   80ae4:	e011      	b.n	80b0a <main+0x56>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80ae6:	697b      	ldr	r3, [r7, #20]
   80ae8:	00db      	lsls	r3, r3, #3
   80aea:	4a17      	ldr	r2, [pc, #92]	; (80b48 <main+0x94>)
   80aec:	1898      	adds	r0, r3, r2
   80aee:	697b      	ldr	r3, [r7, #20]
   80af0:	009b      	lsls	r3, r3, #2
   80af2:	f107 0218 	add.w	r2, r7, #24
   80af6:	4413      	add	r3, r2
   80af8:	f853 3c14 	ldr.w	r3, [r3, #-20]
   80afc:	461a      	mov	r2, r3
   80afe:	4913      	ldr	r1, [pc, #76]	; (80b4c <main+0x98>)
   80b00:	4b13      	ldr	r3, [pc, #76]	; (80b50 <main+0x9c>)
   80b02:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80b04:	697b      	ldr	r3, [r7, #20]
   80b06:	3301      	adds	r3, #1
   80b08:	617b      	str	r3, [r7, #20]
   80b0a:	697b      	ldr	r3, [r7, #20]
   80b0c:	2b03      	cmp	r3, #3
   80b0e:	d9ea      	bls.n	80ae6 <main+0x32>
	}
	usb_serial_number[32] = 0;
   80b10:	4b0d      	ldr	r3, [pc, #52]	; (80b48 <main+0x94>)
   80b12:	2200      	movs	r2, #0
   80b14:	f883 2020 	strb.w	r2, [r3, #32]

    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80b18:	2200      	movs	r2, #0
   80b1a:	210a      	movs	r1, #10
   80b1c:	2001      	movs	r0, #1
   80b1e:	4b0d      	ldr	r3, [pc, #52]	; (80b54 <main+0xa0>)
   80b20:	4798      	blx	r3
    enable_spi();
   80b22:	4b0d      	ldr	r3, [pc, #52]	; (80b58 <main+0xa4>)
   80b24:	4798      	blx	r3
    udc_start();
   80b26:	4b0d      	ldr	r3, [pc, #52]	; (80b5c <main+0xa8>)
   80b28:	4798      	blx	r3

    ui_init();
   80b2a:	4b0d      	ldr	r3, [pc, #52]	; (80b60 <main+0xac>)
   80b2c:	4798      	blx	r3
    while(1) {
        sleepmgr_enter_sleep();
   80b2e:	4b0d      	ldr	r3, [pc, #52]	; (80b64 <main+0xb0>)
   80b30:	4798      	blx	r3
   80b32:	e7fc      	b.n	80b2e <main+0x7a>
   80b34:	00082191 	.word	0x00082191
   80b38:	20000284 	.word	0x20000284
   80b3c:	000804cd 	.word	0x000804cd
   80b40:	00083a25 	.word	0x00083a25
   80b44:	00080819 	.word	0x00080819
   80b48:	2000025c 	.word	0x2000025c
   80b4c:	0008d9c0 	.word	0x0008d9c0
   80b50:	00087211 	.word	0x00087211
   80b54:	00080955 	.word	0x00080955
   80b58:	000809b9 	.word	0x000809b9
   80b5c:	00083eb1 	.word	0x00083eb1
   80b60:	000867c9 	.word	0x000867c9
   80b64:	00080535 	.word	0x00080535

00080b68 <osc_enable>:
{
   80b68:	b580      	push	{r7, lr}
   80b6a:	b082      	sub	sp, #8
   80b6c:	af00      	add	r7, sp, #0
   80b6e:	6078      	str	r0, [r7, #4]
   80b70:	687b      	ldr	r3, [r7, #4]
   80b72:	2b07      	cmp	r3, #7
   80b74:	d82e      	bhi.n	80bd4 <osc_enable+0x6c>
   80b76:	a201      	add	r2, pc, #4	; (adr r2, 80b7c <osc_enable+0x14>)
   80b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b7c:	00080bd3 	.word	0x00080bd3
   80b80:	00080b9d 	.word	0x00080b9d
   80b84:	00080ba5 	.word	0x00080ba5
   80b88:	00080bad 	.word	0x00080bad
   80b8c:	00080bb5 	.word	0x00080bb5
   80b90:	00080bbd 	.word	0x00080bbd
   80b94:	00080bc5 	.word	0x00080bc5
   80b98:	00080bcd 	.word	0x00080bcd
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80b9c:	2000      	movs	r0, #0
   80b9e:	4b0f      	ldr	r3, [pc, #60]	; (80bdc <osc_enable+0x74>)
   80ba0:	4798      	blx	r3
		break;
   80ba2:	e017      	b.n	80bd4 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80ba4:	2001      	movs	r0, #1
   80ba6:	4b0d      	ldr	r3, [pc, #52]	; (80bdc <osc_enable+0x74>)
   80ba8:	4798      	blx	r3
		break;
   80baa:	e013      	b.n	80bd4 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80bac:	2000      	movs	r0, #0
   80bae:	4b0c      	ldr	r3, [pc, #48]	; (80be0 <osc_enable+0x78>)
   80bb0:	4798      	blx	r3
		break;
   80bb2:	e00f      	b.n	80bd4 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80bb4:	2010      	movs	r0, #16
   80bb6:	4b0a      	ldr	r3, [pc, #40]	; (80be0 <osc_enable+0x78>)
   80bb8:	4798      	blx	r3
		break;
   80bba:	e00b      	b.n	80bd4 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80bbc:	2020      	movs	r0, #32
   80bbe:	4b08      	ldr	r3, [pc, #32]	; (80be0 <osc_enable+0x78>)
   80bc0:	4798      	blx	r3
		break;
   80bc2:	e007      	b.n	80bd4 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80bc4:	203e      	movs	r0, #62	; 0x3e
   80bc6:	4b07      	ldr	r3, [pc, #28]	; (80be4 <osc_enable+0x7c>)
   80bc8:	4798      	blx	r3
		break;
   80bca:	e003      	b.n	80bd4 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80bcc:	4b06      	ldr	r3, [pc, #24]	; (80be8 <osc_enable+0x80>)
   80bce:	4798      	blx	r3
		break;
   80bd0:	e000      	b.n	80bd4 <osc_enable+0x6c>
		break;
   80bd2:	bf00      	nop
}
   80bd4:	bf00      	nop
   80bd6:	3708      	adds	r7, #8
   80bd8:	46bd      	mov	sp, r7
   80bda:	bd80      	pop	{r7, pc}
   80bdc:	00082ab1 	.word	0x00082ab1
   80be0:	00082b1d 	.word	0x00082b1d
   80be4:	00082b91 	.word	0x00082b91
   80be8:	00082be1 	.word	0x00082be1

00080bec <osc_is_ready>:
{
   80bec:	b580      	push	{r7, lr}
   80bee:	b082      	sub	sp, #8
   80bf0:	af00      	add	r7, sp, #0
   80bf2:	6078      	str	r0, [r7, #4]
   80bf4:	687b      	ldr	r3, [r7, #4]
   80bf6:	2b07      	cmp	r3, #7
   80bf8:	d82f      	bhi.n	80c5a <osc_is_ready+0x6e>
   80bfa:	a201      	add	r2, pc, #4	; (adr r2, 80c00 <osc_is_ready+0x14>)
   80bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80c00:	00080c21 	.word	0x00080c21
   80c04:	00080c25 	.word	0x00080c25
   80c08:	00080c25 	.word	0x00080c25
   80c0c:	00080c37 	.word	0x00080c37
   80c10:	00080c37 	.word	0x00080c37
   80c14:	00080c37 	.word	0x00080c37
   80c18:	00080c49 	.word	0x00080c49
   80c1c:	00080c49 	.word	0x00080c49
		return 1;
   80c20:	2301      	movs	r3, #1
   80c22:	e01b      	b.n	80c5c <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80c24:	4b0f      	ldr	r3, [pc, #60]	; (80c64 <osc_is_ready+0x78>)
   80c26:	4798      	blx	r3
   80c28:	4603      	mov	r3, r0
   80c2a:	2b00      	cmp	r3, #0
   80c2c:	bf14      	ite	ne
   80c2e:	2301      	movne	r3, #1
   80c30:	2300      	moveq	r3, #0
   80c32:	b2db      	uxtb	r3, r3
   80c34:	e012      	b.n	80c5c <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80c36:	4b0c      	ldr	r3, [pc, #48]	; (80c68 <osc_is_ready+0x7c>)
   80c38:	4798      	blx	r3
   80c3a:	4603      	mov	r3, r0
   80c3c:	2b00      	cmp	r3, #0
   80c3e:	bf14      	ite	ne
   80c40:	2301      	movne	r3, #1
   80c42:	2300      	moveq	r3, #0
   80c44:	b2db      	uxtb	r3, r3
   80c46:	e009      	b.n	80c5c <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80c48:	4b08      	ldr	r3, [pc, #32]	; (80c6c <osc_is_ready+0x80>)
   80c4a:	4798      	blx	r3
   80c4c:	4603      	mov	r3, r0
   80c4e:	2b00      	cmp	r3, #0
   80c50:	bf14      	ite	ne
   80c52:	2301      	movne	r3, #1
   80c54:	2300      	moveq	r3, #0
   80c56:	b2db      	uxtb	r3, r3
   80c58:	e000      	b.n	80c5c <osc_is_ready+0x70>
	return 0;
   80c5a:	2300      	movs	r3, #0
}
   80c5c:	4618      	mov	r0, r3
   80c5e:	3708      	adds	r7, #8
   80c60:	46bd      	mov	sp, r7
   80c62:	bd80      	pop	{r7, pc}
   80c64:	00082ae9 	.word	0x00082ae9
   80c68:	00082b79 	.word	0x00082b79
   80c6c:	00082c2d 	.word	0x00082c2d

00080c70 <osc_wait_ready>:
{
   80c70:	b580      	push	{r7, lr}
   80c72:	b082      	sub	sp, #8
   80c74:	af00      	add	r7, sp, #0
   80c76:	4603      	mov	r3, r0
   80c78:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80c7a:	bf00      	nop
   80c7c:	79fb      	ldrb	r3, [r7, #7]
   80c7e:	4618      	mov	r0, r3
   80c80:	4b06      	ldr	r3, [pc, #24]	; (80c9c <osc_wait_ready+0x2c>)
   80c82:	4798      	blx	r3
   80c84:	4603      	mov	r3, r0
   80c86:	f083 0301 	eor.w	r3, r3, #1
   80c8a:	b2db      	uxtb	r3, r3
   80c8c:	2b00      	cmp	r3, #0
   80c8e:	d1f5      	bne.n	80c7c <osc_wait_ready+0xc>
}
   80c90:	bf00      	nop
   80c92:	bf00      	nop
   80c94:	3708      	adds	r7, #8
   80c96:	46bd      	mov	sp, r7
   80c98:	bd80      	pop	{r7, pc}
   80c9a:	bf00      	nop
   80c9c:	00080bed 	.word	0x00080bed

00080ca0 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   80ca0:	b580      	push	{r7, lr}
   80ca2:	af00      	add	r7, sp, #0
	udd_detach();
   80ca4:	4b01      	ldr	r3, [pc, #4]	; (80cac <udc_detach+0xc>)
   80ca6:	4798      	blx	r3
}
   80ca8:	bf00      	nop
   80caa:	bd80      	pop	{r7, pc}
   80cac:	0008503d 	.word	0x0008503d

00080cb0 <main_suspend_action>:
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80cb0:	b580      	push	{r7, lr}
   80cb2:	af00      	add	r7, sp, #0
	active = false;
   80cb4:	4b03      	ldr	r3, [pc, #12]	; (80cc4 <main_suspend_action+0x14>)
   80cb6:	2200      	movs	r2, #0
   80cb8:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   80cba:	4b03      	ldr	r3, [pc, #12]	; (80cc8 <main_suspend_action+0x18>)
   80cbc:	4798      	blx	r3
}
   80cbe:	bf00      	nop
   80cc0:	bd80      	pop	{r7, pc}
   80cc2:	bf00      	nop
   80cc4:	20000e0c 	.word	0x20000e0c
   80cc8:	000867e1 	.word	0x000867e1

00080ccc <main_resume_action>:

void main_resume_action(void)
{
   80ccc:	b580      	push	{r7, lr}
   80cce:	af00      	add	r7, sp, #0
    ui_wakeup();
   80cd0:	4b01      	ldr	r3, [pc, #4]	; (80cd8 <main_resume_action+0xc>)
   80cd2:	4798      	blx	r3
}
   80cd4:	bf00      	nop
   80cd6:	bd80      	pop	{r7, pc}
   80cd8:	000867f9 	.word	0x000867f9

00080cdc <main_sof_action>:

void main_sof_action(void)
{
   80cdc:	b580      	push	{r7, lr}
   80cde:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80ce0:	4b08      	ldr	r3, [pc, #32]	; (80d04 <main_sof_action+0x28>)
   80ce2:	781b      	ldrb	r3, [r3, #0]
   80ce4:	b2db      	uxtb	r3, r3
   80ce6:	f083 0301 	eor.w	r3, r3, #1
   80cea:	b2db      	uxtb	r3, r3
   80cec:	2b00      	cmp	r3, #0
   80cee:	d106      	bne.n	80cfe <main_sof_action+0x22>
        return;
    ui_process(udd_get_frame_number());
   80cf0:	4b05      	ldr	r3, [pc, #20]	; (80d08 <main_sof_action+0x2c>)
   80cf2:	4798      	blx	r3
   80cf4:	4603      	mov	r3, r0
   80cf6:	4618      	mov	r0, r3
   80cf8:	4b04      	ldr	r3, [pc, #16]	; (80d0c <main_sof_action+0x30>)
   80cfa:	4798      	blx	r3
   80cfc:	e000      	b.n	80d00 <main_sof_action+0x24>
        return;
   80cfe:	bf00      	nop
}
   80d00:	bd80      	pop	{r7, pc}
   80d02:	bf00      	nop
   80d04:	2000027d 	.word	0x2000027d
   80d08:	00085105 	.word	0x00085105
   80d0c:	0008680d 	.word	0x0008680d

00080d10 <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80d10:	b580      	push	{r7, lr}
   80d12:	af00      	add	r7, sp, #0
    active = true;
   80d14:	4b07      	ldr	r3, [pc, #28]	; (80d34 <main_vendor_enable+0x24>)
   80d16:	2201      	movs	r2, #1
   80d18:	701a      	strb	r2, [r3, #0]
    main_b_vendor_enable = true;
   80d1a:	4b07      	ldr	r3, [pc, #28]	; (80d38 <main_vendor_enable+0x28>)
   80d1c:	2201      	movs	r2, #1
   80d1e:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
    //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80d20:	4a06      	ldr	r2, [pc, #24]	; (80d3c <main_vendor_enable+0x2c>)
   80d22:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80d26:	4806      	ldr	r0, [pc, #24]	; (80d40 <main_vendor_enable+0x30>)
   80d28:	4b06      	ldr	r3, [pc, #24]	; (80d44 <main_vendor_enable+0x34>)
   80d2a:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
#endif
    return true;
   80d2c:	2301      	movs	r3, #1
}
   80d2e:	4618      	mov	r0, r3
   80d30:	bd80      	pop	{r7, pc}
   80d32:	bf00      	nop
   80d34:	20000e0c 	.word	0x20000e0c
   80d38:	2000027d 	.word	0x2000027d
   80d3c:	000813b5 	.word	0x000813b5
   80d40:	20000e10 	.word	0x20000e10
   80d44:	00084b1d 	.word	0x00084b1d

00080d48 <main_vendor_disable>:

void main_vendor_disable(void)
{
   80d48:	b480      	push	{r7}
   80d4a:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80d4c:	4b03      	ldr	r3, [pc, #12]	; (80d5c <main_vendor_disable+0x14>)
   80d4e:	2200      	movs	r2, #0
   80d50:	701a      	strb	r2, [r3, #0]
}
   80d52:	bf00      	nop
   80d54:	46bd      	mov	sp, r7
   80d56:	bc80      	pop	{r7}
   80d58:	4770      	bx	lr
   80d5a:	bf00      	nop
   80d5c:	2000027d 	.word	0x2000027d

00080d60 <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   80d60:	b580      	push	{r7, lr}
   80d62:	b082      	sub	sp, #8
   80d64:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80d66:	4b0f      	ldr	r3, [pc, #60]	; (80da4 <ctrl_readmem_bulk+0x44>)
   80d68:	681b      	ldr	r3, [r3, #0]
   80d6a:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80d6c:	4b0d      	ldr	r3, [pc, #52]	; (80da4 <ctrl_readmem_bulk+0x44>)
   80d6e:	685b      	ldr	r3, [r3, #4]
   80d70:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80d72:	4b0d      	ldr	r3, [pc, #52]	; (80da8 <ctrl_readmem_bulk+0x48>)
   80d74:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80d76:	bf00      	nop
   80d78:	2002      	movs	r0, #2
   80d7a:	4b0c      	ldr	r3, [pc, #48]	; (80dac <ctrl_readmem_bulk+0x4c>)
   80d7c:	4798      	blx	r3
   80d7e:	4603      	mov	r3, r0
   80d80:	2b00      	cmp	r3, #0
   80d82:	d0f9      	beq.n	80d78 <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80d84:	6838      	ldr	r0, [r7, #0]
   80d86:	4b0a      	ldr	r3, [pc, #40]	; (80db0 <ctrl_readmem_bulk+0x50>)
   80d88:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80d8a:	4a0a      	ldr	r2, [pc, #40]	; (80db4 <ctrl_readmem_bulk+0x54>)
   80d8c:	6879      	ldr	r1, [r7, #4]
   80d8e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80d92:	4b09      	ldr	r3, [pc, #36]	; (80db8 <ctrl_readmem_bulk+0x58>)
   80d94:	4798      	blx	r3
        (uint8_t *) PSRAM_BASE_ADDRESS,
        buflen,
        main_vendor_bulk_in_received
        );
    FPGA_releaselock();
   80d96:	4b04      	ldr	r3, [pc, #16]	; (80da8 <ctrl_readmem_bulk+0x48>)
   80d98:	4798      	blx	r3
}
   80d9a:	bf00      	nop
   80d9c:	3708      	adds	r7, #8
   80d9e:	46bd      	mov	sp, r7
   80da0:	bd80      	pop	{r7, pc}
   80da2:	bf00      	nop
   80da4:	20001210 	.word	0x20001210
   80da8:	000814b5 	.word	0x000814b5
   80dac:	00081475 	.word	0x00081475
   80db0:	000814e5 	.word	0x000814e5
   80db4:	0008137d 	.word	0x0008137d
   80db8:	00084af1 	.word	0x00084af1

00080dbc <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80dbc:	b580      	push	{r7, lr}
   80dbe:	b082      	sub	sp, #8
   80dc0:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80dc2:	4b0f      	ldr	r3, [pc, #60]	; (80e00 <ctrl_readmem_ctrl+0x44>)
   80dc4:	681b      	ldr	r3, [r3, #0]
   80dc6:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80dc8:	4b0d      	ldr	r3, [pc, #52]	; (80e00 <ctrl_readmem_ctrl+0x44>)
   80dca:	685b      	ldr	r3, [r3, #4]
   80dcc:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80dce:	4b0d      	ldr	r3, [pc, #52]	; (80e04 <ctrl_readmem_ctrl+0x48>)
   80dd0:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80dd2:	bf00      	nop
   80dd4:	2005      	movs	r0, #5
   80dd6:	4b0c      	ldr	r3, [pc, #48]	; (80e08 <ctrl_readmem_ctrl+0x4c>)
   80dd8:	4798      	blx	r3
   80dda:	4603      	mov	r3, r0
   80ddc:	2b00      	cmp	r3, #0
   80dde:	d0f9      	beq.n	80dd4 <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80de0:	6838      	ldr	r0, [r7, #0]
   80de2:	4b0a      	ldr	r3, [pc, #40]	; (80e0c <ctrl_readmem_ctrl+0x50>)
   80de4:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80de6:	4b0a      	ldr	r3, [pc, #40]	; (80e10 <ctrl_readmem_ctrl+0x54>)
   80de8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80dec:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80dee:	4a09      	ldr	r2, [pc, #36]	; (80e14 <ctrl_readmem_ctrl+0x58>)
   80df0:	687b      	ldr	r3, [r7, #4]
   80df2:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    FPGA_releaselock();
   80df4:	4b03      	ldr	r3, [pc, #12]	; (80e04 <ctrl_readmem_ctrl+0x48>)
   80df6:	4798      	blx	r3
}
   80df8:	bf00      	nop
   80dfa:	3708      	adds	r7, #8
   80dfc:	46bd      	mov	sp, r7
   80dfe:	bd80      	pop	{r7, pc}
   80e00:	20001210 	.word	0x20001210
   80e04:	000814b5 	.word	0x000814b5
   80e08:	00081475 	.word	0x00081475
   80e0c:	000814e5 	.word	0x000814e5
   80e10:	20001254 	.word	0x20001254
   80e14:	20001258 	.word	0x20001258

00080e18 <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80e18:	b580      	push	{r7, lr}
   80e1a:	b084      	sub	sp, #16
   80e1c:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80e1e:	4b16      	ldr	r3, [pc, #88]	; (80e78 <ctrl_writemem_ctrl+0x60>)
   80e20:	681b      	ldr	r3, [r3, #0]
   80e22:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80e24:	4b14      	ldr	r3, [pc, #80]	; (80e78 <ctrl_writemem_ctrl+0x60>)
   80e26:	685b      	ldr	r3, [r3, #4]
   80e28:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80e2a:	4b14      	ldr	r3, [pc, #80]	; (80e7c <ctrl_writemem_ctrl+0x64>)
   80e2c:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   80e2e:	4b14      	ldr	r3, [pc, #80]	; (80e80 <ctrl_writemem_ctrl+0x68>)
   80e30:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80e32:	bf00      	nop
   80e34:	2001      	movs	r0, #1
   80e36:	4b13      	ldr	r3, [pc, #76]	; (80e84 <ctrl_writemem_ctrl+0x6c>)
   80e38:	4798      	blx	r3
   80e3a:	4603      	mov	r3, r0
   80e3c:	2b00      	cmp	r3, #0
   80e3e:	d0f9      	beq.n	80e34 <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   80e40:	6878      	ldr	r0, [r7, #4]
   80e42:	4b11      	ldr	r3, [pc, #68]	; (80e88 <ctrl_writemem_ctrl+0x70>)
   80e44:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   80e46:	2300      	movs	r3, #0
   80e48:	60fb      	str	r3, [r7, #12]
   80e4a:	e00b      	b.n	80e64 <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   80e4c:	683a      	ldr	r2, [r7, #0]
   80e4e:	68fb      	ldr	r3, [r7, #12]
   80e50:	441a      	add	r2, r3
   80e52:	4b0e      	ldr	r3, [pc, #56]	; (80e8c <ctrl_writemem_ctrl+0x74>)
   80e54:	6819      	ldr	r1, [r3, #0]
   80e56:	68fb      	ldr	r3, [r7, #12]
   80e58:	440b      	add	r3, r1
   80e5a:	7812      	ldrb	r2, [r2, #0]
   80e5c:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   80e5e:	68fb      	ldr	r3, [r7, #12]
   80e60:	3301      	adds	r3, #1
   80e62:	60fb      	str	r3, [r7, #12]
   80e64:	68fa      	ldr	r2, [r7, #12]
   80e66:	68bb      	ldr	r3, [r7, #8]
   80e68:	429a      	cmp	r2, r3
   80e6a:	d3ef      	bcc.n	80e4c <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   80e6c:	4b04      	ldr	r3, [pc, #16]	; (80e80 <ctrl_writemem_ctrl+0x68>)
   80e6e:	4798      	blx	r3
}
   80e70:	bf00      	nop
   80e72:	3710      	adds	r7, #16
   80e74:	46bd      	mov	sp, r7
   80e76:	bd80      	pop	{r7, pc}
   80e78:	20001210 	.word	0x20001210
   80e7c:	20001218 	.word	0x20001218
   80e80:	000814b5 	.word	0x000814b5
   80e84:	00081475 	.word	0x00081475
   80e88:	000814e5 	.word	0x000814e5
   80e8c:	20000280 	.word	0x20000280

00080e90 <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   80e90:	b580      	push	{r7, lr}
   80e92:	b082      	sub	sp, #8
   80e94:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80e96:	4b0a      	ldr	r3, [pc, #40]	; (80ec0 <ctrl_writemem_bulk+0x30>)
   80e98:	685b      	ldr	r3, [r3, #4]
   80e9a:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   80e9c:	4b09      	ldr	r3, [pc, #36]	; (80ec4 <ctrl_writemem_bulk+0x34>)
   80e9e:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   80ea0:	bf00      	nop
   80ea2:	2004      	movs	r0, #4
   80ea4:	4b08      	ldr	r3, [pc, #32]	; (80ec8 <ctrl_writemem_bulk+0x38>)
   80ea6:	4798      	blx	r3
   80ea8:	4603      	mov	r3, r0
   80eaa:	2b00      	cmp	r3, #0
   80eac:	d0f9      	beq.n	80ea2 <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   80eae:	6878      	ldr	r0, [r7, #4]
   80eb0:	4b06      	ldr	r3, [pc, #24]	; (80ecc <ctrl_writemem_bulk+0x3c>)
   80eb2:	4798      	blx	r3

    /* Transaction done in generic callback */
    FPGA_releaselock();
   80eb4:	4b03      	ldr	r3, [pc, #12]	; (80ec4 <ctrl_writemem_bulk+0x34>)
   80eb6:	4798      	blx	r3
}
   80eb8:	bf00      	nop
   80eba:	3708      	adds	r7, #8
   80ebc:	46bd      	mov	sp, r7
   80ebe:	bd80      	pop	{r7, pc}
   80ec0:	20001210 	.word	0x20001210
   80ec4:	000814b5 	.word	0x000814b5
   80ec8:	00081475 	.word	0x00081475
   80ecc:	000814e5 	.word	0x000814e5

00080ed0 <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80ed0:	b580      	push	{r7, lr}
   80ed2:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80ed4:	4b19      	ldr	r3, [pc, #100]	; (80f3c <ctrl_sam3ucfg_cb+0x6c>)
   80ed6:	885b      	ldrh	r3, [r3, #2]
   80ed8:	b2db      	uxtb	r3, r3
   80eda:	2b03      	cmp	r3, #3
   80edc:	d014      	beq.n	80f08 <ctrl_sam3ucfg_cb+0x38>
   80ede:	2b03      	cmp	r3, #3
   80ee0:	dc29      	bgt.n	80f36 <ctrl_sam3ucfg_cb+0x66>
   80ee2:	2b01      	cmp	r3, #1
   80ee4:	d002      	beq.n	80eec <ctrl_sam3ucfg_cb+0x1c>
   80ee6:	2b02      	cmp	r3, #2
   80ee8:	d00a      	beq.n	80f00 <ctrl_sam3ucfg_cb+0x30>
        /* Make the jump */
        break;

        /* Oh well, sucks to be you */
    default:
        break;
   80eea:	e024      	b.n	80f36 <ctrl_sam3ucfg_cb+0x66>
        osc_enable(OSC_MAINCK_XTAL);
   80eec:	2006      	movs	r0, #6
   80eee:	4b14      	ldr	r3, [pc, #80]	; (80f40 <ctrl_sam3ucfg_cb+0x70>)
   80ef0:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   80ef2:	2006      	movs	r0, #6
   80ef4:	4b13      	ldr	r3, [pc, #76]	; (80f44 <ctrl_sam3ucfg_cb+0x74>)
   80ef6:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80ef8:	2010      	movs	r0, #16
   80efa:	4b13      	ldr	r3, [pc, #76]	; (80f48 <ctrl_sam3ucfg_cb+0x78>)
   80efc:	4798      	blx	r3
        break;
   80efe:	e01b      	b.n	80f38 <ctrl_sam3ucfg_cb+0x68>
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80f00:	2010      	movs	r0, #16
   80f02:	4b12      	ldr	r3, [pc, #72]	; (80f4c <ctrl_sam3ucfg_cb+0x7c>)
   80f04:	4798      	blx	r3
        break;
   80f06:	e017      	b.n	80f38 <ctrl_sam3ucfg_cb+0x68>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80f08:	2201      	movs	r2, #1
   80f0a:	210c      	movs	r1, #12
   80f0c:	4810      	ldr	r0, [pc, #64]	; (80f50 <ctrl_sam3ucfg_cb+0x80>)
   80f0e:	4b11      	ldr	r3, [pc, #68]	; (80f54 <ctrl_sam3ucfg_cb+0x84>)
   80f10:	4798      	blx	r3
        udc_detach();
   80f12:	4b11      	ldr	r3, [pc, #68]	; (80f58 <ctrl_sam3ucfg_cb+0x88>)
   80f14:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80f16:	bf00      	nop
   80f18:	4b10      	ldr	r3, [pc, #64]	; (80f5c <ctrl_sam3ucfg_cb+0x8c>)
   80f1a:	685b      	ldr	r3, [r3, #4]
   80f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80f20:	2b00      	cmp	r3, #0
   80f22:	d1f9      	bne.n	80f18 <ctrl_sam3ucfg_cb+0x48>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80f24:	4b0d      	ldr	r3, [pc, #52]	; (80f5c <ctrl_sam3ucfg_cb+0x8c>)
   80f26:	681b      	ldr	r3, [r3, #0]
   80f28:	4a0c      	ldr	r2, [pc, #48]	; (80f5c <ctrl_sam3ucfg_cb+0x8c>)
   80f2a:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80f2e:	f043 0305 	orr.w	r3, r3, #5
   80f32:	6013      	str	r3, [r2, #0]
        while(1);
   80f34:	e7fe      	b.n	80f34 <ctrl_sam3ucfg_cb+0x64>
        break;
   80f36:	bf00      	nop
    }
}
   80f38:	bf00      	nop
   80f3a:	bd80      	pop	{r7, pc}
   80f3c:	20001828 	.word	0x20001828
   80f40:	00080b69 	.word	0x00080b69
   80f44:	00080c71 	.word	0x00080c71
   80f48:	000829b1 	.word	0x000829b1
   80f4c:	00082a31 	.word	0x00082a31
   80f50:	400e0800 	.word	0x400e0800
   80f54:	00082129 	.word	0x00082129
   80f58:	00080ca1 	.word	0x00080ca1
   80f5c:	400e1200 	.word	0x400e1200

00080f60 <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   80f60:	b580      	push	{r7, lr}
   80f62:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   80f64:	4b0d      	ldr	r3, [pc, #52]	; (80f9c <ctrl_progfpga_bulk+0x3c>)
   80f66:	885b      	ldrh	r3, [r3, #2]
   80f68:	2ba2      	cmp	r3, #162	; 0xa2
   80f6a:	d00f      	beq.n	80f8c <ctrl_progfpga_bulk+0x2c>
   80f6c:	2ba2      	cmp	r3, #162	; 0xa2
   80f6e:	dc11      	bgt.n	80f94 <ctrl_progfpga_bulk+0x34>
   80f70:	2ba0      	cmp	r3, #160	; 0xa0
   80f72:	d002      	beq.n	80f7a <ctrl_progfpga_bulk+0x1a>
   80f74:	2ba1      	cmp	r3, #161	; 0xa1
   80f76:	d003      	beq.n	80f80 <ctrl_progfpga_bulk+0x20>
        /* Done */
        blockendpoint_usage = bep_emem;
        break;

    default:
        break;
   80f78:	e00c      	b.n	80f94 <ctrl_progfpga_bulk+0x34>
        fpga_program_setup1();
   80f7a:	4b09      	ldr	r3, [pc, #36]	; (80fa0 <ctrl_progfpga_bulk+0x40>)
   80f7c:	4798      	blx	r3
        break;
   80f7e:	e00a      	b.n	80f96 <ctrl_progfpga_bulk+0x36>
        fpga_program_setup2();
   80f80:	4b08      	ldr	r3, [pc, #32]	; (80fa4 <ctrl_progfpga_bulk+0x44>)
   80f82:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   80f84:	4b08      	ldr	r3, [pc, #32]	; (80fa8 <ctrl_progfpga_bulk+0x48>)
   80f86:	220a      	movs	r2, #10
   80f88:	701a      	strb	r2, [r3, #0]
        break;
   80f8a:	e004      	b.n	80f96 <ctrl_progfpga_bulk+0x36>
        blockendpoint_usage = bep_emem;
   80f8c:	4b06      	ldr	r3, [pc, #24]	; (80fa8 <ctrl_progfpga_bulk+0x48>)
   80f8e:	2200      	movs	r2, #0
   80f90:	701a      	strb	r2, [r3, #0]
        break;
   80f92:	e000      	b.n	80f96 <ctrl_progfpga_bulk+0x36>
        break;
   80f94:	bf00      	nop
    }
}
   80f96:	bf00      	nop
   80f98:	bd80      	pop	{r7, pc}
   80f9a:	bf00      	nop
   80f9c:	20001828 	.word	0x20001828
   80fa0:	00081605 	.word	0x00081605
   80fa4:	00081685 	.word	0x00081685
   80fa8:	20001250 	.word	0x20001250

00080fac <ctrl_fpga_reset>:

void ctrl_fpga_reset(void) {
   80fac:	b580      	push	{r7, lr}
   80fae:	af00      	add	r7, sp, #0
  gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   80fb0:	2026      	movs	r0, #38	; 0x26
   80fb2:	4b03      	ldr	r3, [pc, #12]	; (80fc0 <ctrl_fpga_reset+0x14>)
   80fb4:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   80fb6:	2026      	movs	r0, #38	; 0x26
   80fb8:	4b02      	ldr	r3, [pc, #8]	; (80fc4 <ctrl_fpga_reset+0x18>)
   80fba:	4798      	blx	r3
}
   80fbc:	bf00      	nop
   80fbe:	bd80      	pop	{r7, pc}
   80fc0:	0008263d 	.word	0x0008263d
   80fc4:	0008266d 	.word	0x0008266d

00080fc8 <ctrl_usart_cb>:

static void ctrl_usart_cb(void)
{
   80fc8:	b580      	push	{r7, lr}
   80fca:	af00      	add	r7, sp, #0
	ctrl_usart(USART_TARGET, false);
   80fcc:	2100      	movs	r1, #0
   80fce:	4802      	ldr	r0, [pc, #8]	; (80fd8 <ctrl_usart_cb+0x10>)
   80fd0:	4b02      	ldr	r3, [pc, #8]	; (80fdc <ctrl_usart_cb+0x14>)
   80fd2:	4798      	blx	r3
}
   80fd4:	bf00      	nop
   80fd6:	bd80      	pop	{r7, pc}
   80fd8:	40090000 	.word	0x40090000
   80fdc:	0008184d 	.word	0x0008184d

00080fe0 <ctrl_usart_cb_data>:

static void ctrl_usart_cb_data(void)
{		
   80fe0:	b580      	push	{r7, lr}
   80fe2:	b082      	sub	sp, #8
   80fe4:	af00      	add	r7, sp, #0
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   80fe6:	4b10      	ldr	r3, [pc, #64]	; (81028 <ctrl_usart_cb_data+0x48>)
   80fe8:	88da      	ldrh	r2, [r3, #6]
   80fea:	4b0f      	ldr	r3, [pc, #60]	; (81028 <ctrl_usart_cb_data+0x48>)
   80fec:	899b      	ldrh	r3, [r3, #12]
   80fee:	429a      	cmp	r2, r3
   80ff0:	d816      	bhi.n	81020 <ctrl_usart_cb_data+0x40>
		return;
	}
	
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   80ff2:	2300      	movs	r3, #0
   80ff4:	607b      	str	r3, [r7, #4]
   80ff6:	e00c      	b.n	81012 <ctrl_usart_cb_data+0x32>
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   80ff8:	4b0b      	ldr	r3, [pc, #44]	; (81028 <ctrl_usart_cb_data+0x48>)
   80ffa:	689a      	ldr	r2, [r3, #8]
   80ffc:	687b      	ldr	r3, [r7, #4]
   80ffe:	4413      	add	r3, r2
   81000:	781b      	ldrb	r3, [r3, #0]
   81002:	461a      	mov	r2, r3
   81004:	2100      	movs	r1, #0
   81006:	4809      	ldr	r0, [pc, #36]	; (8102c <ctrl_usart_cb_data+0x4c>)
   81008:	4b09      	ldr	r3, [pc, #36]	; (81030 <ctrl_usart_cb_data+0x50>)
   8100a:	4798      	blx	r3
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   8100c:	687b      	ldr	r3, [r7, #4]
   8100e:	3301      	adds	r3, #1
   81010:	607b      	str	r3, [r7, #4]
   81012:	4b05      	ldr	r3, [pc, #20]	; (81028 <ctrl_usart_cb_data+0x48>)
   81014:	88db      	ldrh	r3, [r3, #6]
   81016:	461a      	mov	r2, r3
   81018:	687b      	ldr	r3, [r7, #4]
   8101a:	4293      	cmp	r3, r2
   8101c:	dbec      	blt.n	80ff8 <ctrl_usart_cb_data+0x18>
   8101e:	e000      	b.n	81022 <ctrl_usart_cb_data+0x42>
		return;
   81020:	bf00      	nop
	}
}
   81022:	3708      	adds	r7, #8
   81024:	46bd      	mov	sp, r7
   81026:	bd80      	pop	{r7, pc}
   81028:	20001828 	.word	0x20001828
   8102c:	40090000 	.word	0x40090000
   81030:	00081c19 	.word	0x00081c19

00081034 <spi_adc_cb>:

static void spi_adc_cb(void)
{
   81034:	b580      	push	{r7, lr}
   81036:	af00      	add	r7, sp, #0
	//Just do single byte writes for now
	if (udd_g_ctrlreq.req.wLength > 2){
   81038:	4b09      	ldr	r3, [pc, #36]	; (81060 <spi_adc_cb+0x2c>)
   8103a:	88db      	ldrh	r3, [r3, #6]
   8103c:	2b02      	cmp	r3, #2
   8103e:	d80c      	bhi.n	8105a <spi_adc_cb+0x26>
		return;
	}
    write_spi_adc(udd_g_ctrlreq.payload[0], udd_g_ctrlreq.payload[1]);
   81040:	4b07      	ldr	r3, [pc, #28]	; (81060 <spi_adc_cb+0x2c>)
   81042:	689b      	ldr	r3, [r3, #8]
   81044:	781b      	ldrb	r3, [r3, #0]
   81046:	461a      	mov	r2, r3
   81048:	4b05      	ldr	r3, [pc, #20]	; (81060 <spi_adc_cb+0x2c>)
   8104a:	689b      	ldr	r3, [r3, #8]
   8104c:	3301      	adds	r3, #1
   8104e:	781b      	ldrb	r3, [r3, #0]
   81050:	4619      	mov	r1, r3
   81052:	4610      	mov	r0, r2
   81054:	4b03      	ldr	r3, [pc, #12]	; (81064 <spi_adc_cb+0x30>)
   81056:	4798      	blx	r3
   81058:	e000      	b.n	8105c <spi_adc_cb+0x28>
		return;
   8105a:	bf00      	nop
}
   8105c:	bd80      	pop	{r7, pc}
   8105e:	bf00      	nop
   81060:	20001828 	.word	0x20001828
   81064:	00081e79 	.word	0x00081e79

00081068 <main_setup_out_received>:
{
	V2Protocol_ProcessCommand();
}

bool main_setup_out_received(void)
{
   81068:	b580      	push	{r7, lr}
   8106a:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   8106c:	4b4c      	ldr	r3, [pc, #304]	; (811a0 <main_setup_out_received+0x138>)
   8106e:	4a4d      	ldr	r2, [pc, #308]	; (811a4 <main_setup_out_received+0x13c>)
   81070:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81072:	4b4b      	ldr	r3, [pc, #300]	; (811a0 <main_setup_out_received+0x138>)
   81074:	88db      	ldrh	r3, [r3, #6]
   81076:	2b40      	cmp	r3, #64	; 0x40
   81078:	bf28      	it	cs
   8107a:	2340      	movcs	r3, #64	; 0x40
   8107c:	b29a      	uxth	r2, r3
   8107e:	4b48      	ldr	r3, [pc, #288]	; (811a0 <main_setup_out_received+0x138>)
   81080:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   81082:	4b49      	ldr	r3, [pc, #292]	; (811a8 <main_setup_out_received+0x140>)
   81084:	2200      	movs	r2, #0
   81086:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   81088:	4b45      	ldr	r3, [pc, #276]	; (811a0 <main_setup_out_received+0x138>)
   8108a:	785b      	ldrb	r3, [r3, #1]
   8108c:	3b10      	subs	r3, #16
   8108e:	2b16      	cmp	r3, #22
   81090:	d87a      	bhi.n	81188 <main_setup_out_received+0x120>
   81092:	a201      	add	r2, pc, #4	; (adr r2, 81098 <main_setup_out_received+0x30>)
   81094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81098:	000810f5 	.word	0x000810f5
   8109c:	00081121 	.word	0x00081121
   810a0:	0008110b 	.word	0x0008110b
   810a4:	00081137 	.word	0x00081137
   810a8:	00081189 	.word	0x00081189
   810ac:	00081189 	.word	0x00081189
   810b0:	00081161 	.word	0x00081161
   810b4:	00081189 	.word	0x00081189
   810b8:	00081189 	.word	0x00081189
   810bc:	00081189 	.word	0x00081189
   810c0:	00081157 	.word	0x00081157
   810c4:	0008114d 	.word	0x0008114d
   810c8:	00081189 	.word	0x00081189
   810cc:	00081189 	.word	0x00081189
   810d0:	00081189 	.word	0x00081189
   810d4:	00081189 	.word	0x00081189
   810d8:	00081189 	.word	0x00081189
   810dc:	00081189 	.word	0x00081189
   810e0:	0008116b 	.word	0x0008116b
   810e4:	00081189 	.word	0x00081189
   810e8:	00081189 	.word	0x00081189
   810ec:	00081175 	.word	0x00081175
   810f0:	0008117f 	.word	0x0008117f
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   810f4:	2006      	movs	r0, #6
   810f6:	4b2d      	ldr	r3, [pc, #180]	; (811ac <main_setup_out_received+0x144>)
   810f8:	4798      	blx	r3
   810fa:	4603      	mov	r3, r0
   810fc:	2b00      	cmp	r3, #0
   810fe:	d045      	beq.n	8118c <main_setup_out_received+0x124>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   81100:	4b27      	ldr	r3, [pc, #156]	; (811a0 <main_setup_out_received+0x138>)
   81102:	4a2b      	ldr	r2, [pc, #172]	; (811b0 <main_setup_out_received+0x148>)
   81104:	611a      	str	r2, [r3, #16]
            return true;
   81106:	2301      	movs	r3, #1
   81108:	e048      	b.n	8119c <main_setup_out_received+0x134>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   8110a:	2006      	movs	r0, #6
   8110c:	4b27      	ldr	r3, [pc, #156]	; (811ac <main_setup_out_received+0x144>)
   8110e:	4798      	blx	r3
   81110:	4603      	mov	r3, r0
   81112:	2b00      	cmp	r3, #0
   81114:	d03c      	beq.n	81190 <main_setup_out_received+0x128>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   81116:	4b22      	ldr	r3, [pc, #136]	; (811a0 <main_setup_out_received+0x138>)
   81118:	4a26      	ldr	r2, [pc, #152]	; (811b4 <main_setup_out_received+0x14c>)
   8111a:	611a      	str	r2, [r3, #16]
            return true;
   8111c:	2301      	movs	r3, #1
   8111e:	e03d      	b.n	8119c <main_setup_out_received+0x134>
        break;


        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   81120:	2006      	movs	r0, #6
   81122:	4b22      	ldr	r3, [pc, #136]	; (811ac <main_setup_out_received+0x144>)
   81124:	4798      	blx	r3
   81126:	4603      	mov	r3, r0
   81128:	2b00      	cmp	r3, #0
   8112a:	d033      	beq.n	81194 <main_setup_out_received+0x12c>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   8112c:	4b1c      	ldr	r3, [pc, #112]	; (811a0 <main_setup_out_received+0x138>)
   8112e:	4a22      	ldr	r2, [pc, #136]	; (811b8 <main_setup_out_received+0x150>)
   81130:	611a      	str	r2, [r3, #16]
            return true;
   81132:	2301      	movs	r3, #1
   81134:	e032      	b.n	8119c <main_setup_out_received+0x134>
    //     udd_g_ctrlreq.callback = ctrl_avr_program_void;
    //     return true;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   81136:	2006      	movs	r0, #6
   81138:	4b1c      	ldr	r3, [pc, #112]	; (811ac <main_setup_out_received+0x144>)
   8113a:	4798      	blx	r3
   8113c:	4603      	mov	r3, r0
   8113e:	2b00      	cmp	r3, #0
   81140:	d02a      	beq.n	81198 <main_setup_out_received+0x130>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   81142:	4b17      	ldr	r3, [pc, #92]	; (811a0 <main_setup_out_received+0x138>)
   81144:	4a1d      	ldr	r2, [pc, #116]	; (811bc <main_setup_out_received+0x154>)
   81146:	611a      	str	r2, [r3, #16]
            return true;
   81148:	2301      	movs	r3, #1
   8114a:	e027      	b.n	8119c <main_setup_out_received+0x134>
        }
        break;

		/* Target serial */
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   8114c:	4b14      	ldr	r3, [pc, #80]	; (811a0 <main_setup_out_received+0x138>)
   8114e:	4a1c      	ldr	r2, [pc, #112]	; (811c0 <main_setup_out_received+0x158>)
   81150:	611a      	str	r2, [r3, #16]
        return true;
   81152:	2301      	movs	r3, #1
   81154:	e022      	b.n	8119c <main_setup_out_received+0x134>
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   81156:	4b12      	ldr	r3, [pc, #72]	; (811a0 <main_setup_out_received+0x138>)
   81158:	4a1a      	ldr	r2, [pc, #104]	; (811c4 <main_setup_out_received+0x15c>)
   8115a:	611a      	str	r2, [r3, #16]
        return true;
   8115c:	2301      	movs	r3, #1
   8115e:	e01d      	b.n	8119c <main_setup_out_received+0x134>

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81160:	4b0f      	ldr	r3, [pc, #60]	; (811a0 <main_setup_out_received+0x138>)
   81162:	4a19      	ldr	r2, [pc, #100]	; (811c8 <main_setup_out_received+0x160>)
   81164:	611a      	str	r2, [r3, #16]
        return true;
   81166:	2301      	movs	r3, #1
   81168:	e018      	b.n	8119c <main_setup_out_received+0x134>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   8116a:	4b0d      	ldr	r3, [pc, #52]	; (811a0 <main_setup_out_received+0x138>)
   8116c:	4a17      	ldr	r2, [pc, #92]	; (811cc <main_setup_out_received+0x164>)
   8116e:	611a      	str	r2, [r3, #16]
        return true;
   81170:	2301      	movs	r3, #1
   81172:	e013      	b.n	8119c <main_setup_out_received+0x134>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   81174:	4b0a      	ldr	r3, [pc, #40]	; (811a0 <main_setup_out_received+0x138>)
   81176:	4a16      	ldr	r2, [pc, #88]	; (811d0 <main_setup_out_received+0x168>)
   81178:	611a      	str	r2, [r3, #16]
        return true;
   8117a:	2301      	movs	r3, #1
   8117c:	e00e      	b.n	8119c <main_setup_out_received+0x134>
    case REQ_SPI_ADC:
        udd_g_ctrlreq.callback = spi_adc_cb;
   8117e:	4b08      	ldr	r3, [pc, #32]	; (811a0 <main_setup_out_received+0x138>)
   81180:	4a14      	ldr	r2, [pc, #80]	; (811d4 <main_setup_out_received+0x16c>)
   81182:	611a      	str	r2, [r3, #16]
        return true;
   81184:	2301      	movs	r3, #1
   81186:	e009      	b.n	8119c <main_setup_out_received+0x134>
    default:
        return false;
   81188:	2300      	movs	r3, #0
   8118a:	e007      	b.n	8119c <main_setup_out_received+0x134>
        break;
   8118c:	bf00      	nop
   8118e:	e004      	b.n	8119a <main_setup_out_received+0x132>
        break;
   81190:	bf00      	nop
   81192:	e002      	b.n	8119a <main_setup_out_received+0x132>
        break;
   81194:	bf00      	nop
   81196:	e000      	b.n	8119a <main_setup_out_received+0x132>
        break;
   81198:	bf00      	nop
    }

    return false;
   8119a:	2300      	movs	r3, #0
}
   8119c:	4618      	mov	r0, r3
   8119e:	bd80      	pop	{r7, pc}
   811a0:	20001828 	.word	0x20001828
   811a4:	20001210 	.word	0x20001210
   811a8:	20001250 	.word	0x20001250
   811ac:	00081475 	.word	0x00081475
   811b0:	00080d61 	.word	0x00080d61
   811b4:	00080dbd 	.word	0x00080dbd
   811b8:	00080e91 	.word	0x00080e91
   811bc:	00080e19 	.word	0x00080e19
   811c0:	00080fc9 	.word	0x00080fc9
   811c4:	00080fe1 	.word	0x00080fe1
   811c8:	00080f61 	.word	0x00080f61
   811cc:	00080ed1 	.word	0x00080ed1
   811d0:	00080fad 	.word	0x00080fad
   811d4:	00081035 	.word	0x00081035

000811d8 <main_setup_in_received>:
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   811d8:	b580      	push	{r7, lr}
   811da:	b082      	sub	sp, #8
   811dc:	af00      	add	r7, sp, #0
    */

    static uint8_t  respbuf[64];
    unsigned int cnt;

    switch(udd_g_ctrlreq.req.bRequest){
   811de:	4b5c      	ldr	r3, [pc, #368]	; (81350 <main_setup_in_received+0x178>)
   811e0:	785b      	ldrb	r3, [r3, #1]
   811e2:	3b12      	subs	r3, #18
   811e4:	2b14      	cmp	r3, #20
   811e6:	f200 80ad 	bhi.w	81344 <main_setup_in_received+0x16c>
   811ea:	a201      	add	r2, pc, #4	; (adr r2, 811f0 <main_setup_in_received+0x18>)
   811ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   811f0:	00081245 	.word	0x00081245
   811f4:	00081345 	.word	0x00081345
   811f8:	00081345 	.word	0x00081345
   811fc:	000812e7 	.word	0x000812e7
   81200:	00081345 	.word	0x00081345
   81204:	000812c5 	.word	0x000812c5
   81208:	00081345 	.word	0x00081345
   8120c:	00081345 	.word	0x00081345
   81210:	00081287 	.word	0x00081287
   81214:	00081271 	.word	0x00081271
   81218:	00081345 	.word	0x00081345
   8121c:	00081345 	.word	0x00081345
   81220:	00081345 	.word	0x00081345
   81224:	00081345 	.word	0x00081345
   81228:	00081345 	.word	0x00081345
   8122c:	00081345 	.word	0x00081345
   81230:	00081345 	.word	0x00081345
   81234:	00081345 	.word	0x00081345
   81238:	00081345 	.word	0x00081345
   8123c:	00081345 	.word	0x00081345
   81240:	00081321 	.word	0x00081321
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   81244:	4b43      	ldr	r3, [pc, #268]	; (81354 <main_setup_in_received+0x17c>)
   81246:	681b      	ldr	r3, [r3, #0]
   81248:	4a41      	ldr	r2, [pc, #260]	; (81350 <main_setup_in_received+0x178>)
   8124a:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   8124c:	4b42      	ldr	r3, [pc, #264]	; (81358 <main_setup_in_received+0x180>)
   8124e:	681b      	ldr	r3, [r3, #0]
   81250:	b29a      	uxth	r2, r3
   81252:	4b3f      	ldr	r3, [pc, #252]	; (81350 <main_setup_in_received+0x178>)
   81254:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   81256:	4b40      	ldr	r3, [pc, #256]	; (81358 <main_setup_in_received+0x180>)
   81258:	2200      	movs	r2, #0
   8125a:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   8125c:	4b3f      	ldr	r3, [pc, #252]	; (8135c <main_setup_in_received+0x184>)
   8125e:	4798      	blx	r3
   81260:	4603      	mov	r3, r0
   81262:	2b05      	cmp	r3, #5
   81264:	d102      	bne.n	8126c <main_setup_in_received+0x94>
            FPGA_setlock(fpga_unlocked);
   81266:	2000      	movs	r0, #0
   81268:	4b3d      	ldr	r3, [pc, #244]	; (81360 <main_setup_in_received+0x188>)
   8126a:	4798      	blx	r3
        }

        return true;
   8126c:	2301      	movs	r3, #1
   8126e:	e06a      	b.n	81346 <main_setup_in_received+0x16e>
    //     return V2Protocol_ProcessCommand();
    //     break;
        
        
    case REQ_USART0_CONFIG:
        return ctrl_usart(USART_TARGET, true);
   81270:	2101      	movs	r1, #1
   81272:	483c      	ldr	r0, [pc, #240]	; (81364 <main_setup_in_received+0x18c>)
   81274:	4b3c      	ldr	r3, [pc, #240]	; (81368 <main_setup_in_received+0x190>)
   81276:	4798      	blx	r3
   81278:	4603      	mov	r3, r0
   8127a:	2b00      	cmp	r3, #0
   8127c:	bf14      	ite	ne
   8127e:	2301      	movne	r3, #1
   81280:	2300      	moveq	r3, #0
   81282:	b2db      	uxtb	r3, r3
   81284:	e05f      	b.n	81346 <main_setup_in_received+0x16e>
        break;
        
    case REQ_USART0_DATA:						
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81286:	2300      	movs	r3, #0
   81288:	607b      	str	r3, [r7, #4]
   8128a:	e00c      	b.n	812a6 <main_setup_in_received+0xce>
            respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   8128c:	4835      	ldr	r0, [pc, #212]	; (81364 <main_setup_in_received+0x18c>)
   8128e:	4b37      	ldr	r3, [pc, #220]	; (8136c <main_setup_in_received+0x194>)
   81290:	4798      	blx	r3
   81292:	4603      	mov	r3, r0
   81294:	b2d9      	uxtb	r1, r3
   81296:	4a36      	ldr	r2, [pc, #216]	; (81370 <main_setup_in_received+0x198>)
   81298:	687b      	ldr	r3, [r7, #4]
   8129a:	4413      	add	r3, r2
   8129c:	460a      	mov	r2, r1
   8129e:	701a      	strb	r2, [r3, #0]
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   812a0:	687b      	ldr	r3, [r7, #4]
   812a2:	3301      	adds	r3, #1
   812a4:	607b      	str	r3, [r7, #4]
   812a6:	4b2a      	ldr	r3, [pc, #168]	; (81350 <main_setup_in_received+0x178>)
   812a8:	88db      	ldrh	r3, [r3, #6]
   812aa:	461a      	mov	r2, r3
   812ac:	687b      	ldr	r3, [r7, #4]
   812ae:	4293      	cmp	r3, r2
   812b0:	d3ec      	bcc.n	8128c <main_setup_in_received+0xb4>
        }
        udd_g_ctrlreq.payload = respbuf;
   812b2:	4b27      	ldr	r3, [pc, #156]	; (81350 <main_setup_in_received+0x178>)
   812b4:	4a2e      	ldr	r2, [pc, #184]	; (81370 <main_setup_in_received+0x198>)
   812b6:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   812b8:	687b      	ldr	r3, [r7, #4]
   812ba:	b29a      	uxth	r2, r3
   812bc:	4b24      	ldr	r3, [pc, #144]	; (81350 <main_setup_in_received+0x178>)
   812be:	819a      	strh	r2, [r3, #12]
        return true;
   812c0:	2301      	movs	r3, #1
   812c2:	e040      	b.n	81346 <main_setup_in_received+0x16e>
        break;
    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   812c4:	4b2a      	ldr	r3, [pc, #168]	; (81370 <main_setup_in_received+0x198>)
   812c6:	2201      	movs	r2, #1
   812c8:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   812ca:	4b29      	ldr	r3, [pc, #164]	; (81370 <main_setup_in_received+0x198>)
   812cc:	2201      	movs	r2, #1
   812ce:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   812d0:	4b27      	ldr	r3, [pc, #156]	; (81370 <main_setup_in_received+0x198>)
   812d2:	2200      	movs	r2, #0
   812d4:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   812d6:	4b1e      	ldr	r3, [pc, #120]	; (81350 <main_setup_in_received+0x178>)
   812d8:	4a25      	ldr	r2, [pc, #148]	; (81370 <main_setup_in_received+0x198>)
   812da:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   812dc:	4b1c      	ldr	r3, [pc, #112]	; (81350 <main_setup_in_received+0x178>)
   812de:	2203      	movs	r2, #3
   812e0:	819a      	strh	r2, [r3, #12]
        return true;
   812e2:	2301      	movs	r3, #1
   812e4:	e02f      	b.n	81346 <main_setup_in_received+0x16e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   812e6:	2007      	movs	r0, #7
   812e8:	4b22      	ldr	r3, [pc, #136]	; (81374 <main_setup_in_received+0x19c>)
   812ea:	4798      	blx	r3
   812ec:	4603      	mov	r3, r0
   812ee:	2b00      	cmp	r3, #0
   812f0:	bf14      	ite	ne
   812f2:	2301      	movne	r3, #1
   812f4:	2300      	moveq	r3, #0
   812f6:	b2db      	uxtb	r3, r3
   812f8:	461a      	mov	r2, r3
   812fa:	4b1d      	ldr	r3, [pc, #116]	; (81370 <main_setup_in_received+0x198>)
   812fc:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   812fe:	4b1c      	ldr	r3, [pc, #112]	; (81370 <main_setup_in_received+0x198>)
   81300:	2200      	movs	r2, #0
   81302:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   81304:	4b1a      	ldr	r3, [pc, #104]	; (81370 <main_setup_in_received+0x198>)
   81306:	2200      	movs	r2, #0
   81308:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   8130a:	4b19      	ldr	r3, [pc, #100]	; (81370 <main_setup_in_received+0x198>)
   8130c:	2200      	movs	r2, #0
   8130e:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81310:	4b0f      	ldr	r3, [pc, #60]	; (81350 <main_setup_in_received+0x178>)
   81312:	4a17      	ldr	r2, [pc, #92]	; (81370 <main_setup_in_received+0x198>)
   81314:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   81316:	4b0e      	ldr	r3, [pc, #56]	; (81350 <main_setup_in_received+0x178>)
   81318:	2204      	movs	r2, #4
   8131a:	819a      	strh	r2, [r3, #12]
        return true;
   8131c:	2301      	movs	r3, #1
   8131e:	e012      	b.n	81346 <main_setup_in_received+0x16e>
        break;
    case REQ_SPI_ADC:
        respbuf[0] = read_spi_adc(udd_g_ctrlreq.req.wValue & 0xFF);
   81320:	4b0b      	ldr	r3, [pc, #44]	; (81350 <main_setup_in_received+0x178>)
   81322:	885b      	ldrh	r3, [r3, #2]
   81324:	b2db      	uxtb	r3, r3
   81326:	4618      	mov	r0, r3
   81328:	4b13      	ldr	r3, [pc, #76]	; (81378 <main_setup_in_received+0x1a0>)
   8132a:	4798      	blx	r3
   8132c:	4603      	mov	r3, r0
   8132e:	b2da      	uxtb	r2, r3
   81330:	4b0f      	ldr	r3, [pc, #60]	; (81370 <main_setup_in_received+0x198>)
   81332:	701a      	strb	r2, [r3, #0]
        udd_g_ctrlreq.payload = respbuf;
   81334:	4b06      	ldr	r3, [pc, #24]	; (81350 <main_setup_in_received+0x178>)
   81336:	4a0e      	ldr	r2, [pc, #56]	; (81370 <main_setup_in_received+0x198>)
   81338:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 1;
   8133a:	4b05      	ldr	r3, [pc, #20]	; (81350 <main_setup_in_received+0x178>)
   8133c:	2201      	movs	r2, #1
   8133e:	819a      	strh	r2, [r3, #12]
        return true;
   81340:	2301      	movs	r3, #1
   81342:	e000      	b.n	81346 <main_setup_in_received+0x16e>
        break;
    default:
        return false;
   81344:	2300      	movs	r3, #0
    }
    return false;
}
   81346:	4618      	mov	r0, r3
   81348:	3708      	adds	r7, #8
   8134a:	46bd      	mov	sp, r7
   8134c:	bd80      	pop	{r7, pc}
   8134e:	bf00      	nop
   81350:	20001828 	.word	0x20001828
   81354:	20001254 	.word	0x20001254
   81358:	20001258 	.word	0x20001258
   8135c:	000814cd 	.word	0x000814cd
   81360:	00081475 	.word	0x00081475
   81364:	40090000 	.word	0x40090000
   81368:	0008184d 	.word	0x0008184d
   8136c:	00081cc1 	.word	0x00081cc1
   81370:	2000125c 	.word	0x2000125c
   81374:	0008260d 	.word	0x0008260d
   81378:	00081ee9 	.word	0x00081ee9

0008137c <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   8137c:	b580      	push	{r7, lr}
   8137e:	b082      	sub	sp, #8
   81380:	af00      	add	r7, sp, #0
   81382:	4603      	mov	r3, r0
   81384:	6039      	str	r1, [r7, #0]
   81386:	71fb      	strb	r3, [r7, #7]
   81388:	4613      	mov	r3, r2
   8138a:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   8138c:	79fb      	ldrb	r3, [r7, #7]
   8138e:	2b00      	cmp	r3, #0
   81390:	d108      	bne.n	813a4 <main_vendor_bulk_in_received+0x28>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   81392:	4b06      	ldr	r3, [pc, #24]	; (813ac <main_vendor_bulk_in_received+0x30>)
   81394:	4798      	blx	r3
   81396:	4603      	mov	r3, r0
   81398:	2b02      	cmp	r3, #2
   8139a:	d104      	bne.n	813a6 <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   8139c:	2000      	movs	r0, #0
   8139e:	4b04      	ldr	r3, [pc, #16]	; (813b0 <main_vendor_bulk_in_received+0x34>)
   813a0:	4798      	blx	r3
   813a2:	e000      	b.n	813a6 <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   813a4:	bf00      	nop
    }
}
   813a6:	3708      	adds	r7, #8
   813a8:	46bd      	mov	sp, r7
   813aa:	bd80      	pop	{r7, pc}
   813ac:	000814cd 	.word	0x000814cd
   813b0:	00081475 	.word	0x00081475

000813b4 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   813b4:	b580      	push	{r7, lr}
   813b6:	b084      	sub	sp, #16
   813b8:	af00      	add	r7, sp, #0
   813ba:	4603      	mov	r3, r0
   813bc:	6039      	str	r1, [r7, #0]
   813be:	71fb      	strb	r3, [r7, #7]
   813c0:	4613      	mov	r3, r2
   813c2:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   813c4:	79fb      	ldrb	r3, [r7, #7]
   813c6:	2b00      	cmp	r3, #0
   813c8:	d006      	beq.n	813d8 <main_vendor_bulk_out_received+0x24>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   813ca:	4a22      	ldr	r2, [pc, #136]	; (81454 <main_vendor_bulk_out_received+0xa0>)
   813cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   813d0:	4821      	ldr	r0, [pc, #132]	; (81458 <main_vendor_bulk_out_received+0xa4>)
   813d2:	4b22      	ldr	r3, [pc, #136]	; (8145c <main_vendor_bulk_out_received+0xa8>)
   813d4:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   813d6:	e039      	b.n	8144c <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   813d8:	4b21      	ldr	r3, [pc, #132]	; (81460 <main_vendor_bulk_out_received+0xac>)
   813da:	781b      	ldrb	r3, [r3, #0]
   813dc:	2b00      	cmp	r3, #0
   813de:	d11a      	bne.n	81416 <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   813e0:	2300      	movs	r3, #0
   813e2:	60fb      	str	r3, [r7, #12]
   813e4:	e00b      	b.n	813fe <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   813e6:	4b1f      	ldr	r3, [pc, #124]	; (81464 <main_vendor_bulk_out_received+0xb0>)
   813e8:	681a      	ldr	r2, [r3, #0]
   813ea:	68fb      	ldr	r3, [r7, #12]
   813ec:	4413      	add	r3, r2
   813ee:	491a      	ldr	r1, [pc, #104]	; (81458 <main_vendor_bulk_out_received+0xa4>)
   813f0:	68fa      	ldr	r2, [r7, #12]
   813f2:	440a      	add	r2, r1
   813f4:	7812      	ldrb	r2, [r2, #0]
   813f6:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   813f8:	68fb      	ldr	r3, [r7, #12]
   813fa:	3301      	adds	r3, #1
   813fc:	60fb      	str	r3, [r7, #12]
   813fe:	68fa      	ldr	r2, [r7, #12]
   81400:	683b      	ldr	r3, [r7, #0]
   81402:	429a      	cmp	r2, r3
   81404:	d3ef      	bcc.n	813e6 <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   81406:	4b18      	ldr	r3, [pc, #96]	; (81468 <main_vendor_bulk_out_received+0xb4>)
   81408:	4798      	blx	r3
   8140a:	4603      	mov	r3, r0
   8140c:	2b04      	cmp	r3, #4
   8140e:	d117      	bne.n	81440 <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   81410:	4b16      	ldr	r3, [pc, #88]	; (8146c <main_vendor_bulk_out_received+0xb8>)
   81412:	4798      	blx	r3
   81414:	e014      	b.n	81440 <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   81416:	4b12      	ldr	r3, [pc, #72]	; (81460 <main_vendor_bulk_out_received+0xac>)
   81418:	781b      	ldrb	r3, [r3, #0]
   8141a:	2b0a      	cmp	r3, #10
   8141c:	d110      	bne.n	81440 <main_vendor_bulk_out_received+0x8c>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   8141e:	2300      	movs	r3, #0
   81420:	60bb      	str	r3, [r7, #8]
   81422:	e009      	b.n	81438 <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   81424:	4a0c      	ldr	r2, [pc, #48]	; (81458 <main_vendor_bulk_out_received+0xa4>)
   81426:	68bb      	ldr	r3, [r7, #8]
   81428:	4413      	add	r3, r2
   8142a:	781b      	ldrb	r3, [r3, #0]
   8142c:	4618      	mov	r0, r3
   8142e:	4b10      	ldr	r3, [pc, #64]	; (81470 <main_vendor_bulk_out_received+0xbc>)
   81430:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   81432:	68bb      	ldr	r3, [r7, #8]
   81434:	3301      	adds	r3, #1
   81436:	60bb      	str	r3, [r7, #8]
   81438:	68ba      	ldr	r2, [r7, #8]
   8143a:	683b      	ldr	r3, [r7, #0]
   8143c:	429a      	cmp	r2, r3
   8143e:	d3f1      	bcc.n	81424 <main_vendor_bulk_out_received+0x70>
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   81440:	4a04      	ldr	r2, [pc, #16]	; (81454 <main_vendor_bulk_out_received+0xa0>)
   81442:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81446:	4804      	ldr	r0, [pc, #16]	; (81458 <main_vendor_bulk_out_received+0xa4>)
   81448:	4b04      	ldr	r3, [pc, #16]	; (8145c <main_vendor_bulk_out_received+0xa8>)
   8144a:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   8144c:	3710      	adds	r7, #16
   8144e:	46bd      	mov	sp, r7
   81450:	bd80      	pop	{r7, pc}
   81452:	bf00      	nop
   81454:	000813b5 	.word	0x000813b5
   81458:	20000e10 	.word	0x20000e10
   8145c:	00084b1d 	.word	0x00084b1d
   81460:	20001250 	.word	0x20001250
   81464:	20000280 	.word	0x20000280
   81468:	000814cd 	.word	0x000814cd
   8146c:	000814b5 	.word	0x000814b5
   81470:	00081699 	.word	0x00081699

00081474 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81474:	b580      	push	{r7, lr}
   81476:	b084      	sub	sp, #16
   81478:	af00      	add	r7, sp, #0
   8147a:	4603      	mov	r3, r0
   8147c:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   8147e:	2300      	movs	r3, #0
   81480:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   81482:	4b09      	ldr	r3, [pc, #36]	; (814a8 <FPGA_setlock+0x34>)
   81484:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   81486:	4b09      	ldr	r3, [pc, #36]	; (814ac <FPGA_setlock+0x38>)
   81488:	781b      	ldrb	r3, [r3, #0]
   8148a:	b2db      	uxtb	r3, r3
   8148c:	2b00      	cmp	r3, #0
   8148e:	d104      	bne.n	8149a <FPGA_setlock+0x26>
  {
    ret = 1;
   81490:	2301      	movs	r3, #1
   81492:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   81494:	4a05      	ldr	r2, [pc, #20]	; (814ac <FPGA_setlock+0x38>)
   81496:	79fb      	ldrb	r3, [r7, #7]
   81498:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   8149a:	4b05      	ldr	r3, [pc, #20]	; (814b0 <FPGA_setlock+0x3c>)
   8149c:	4798      	blx	r3
  return ret;
   8149e:	68fb      	ldr	r3, [r7, #12]
}
   814a0:	4618      	mov	r0, r3
   814a2:	3710      	adds	r7, #16
   814a4:	46bd      	mov	sp, r7
   814a6:	bd80      	pop	{r7, pc}
   814a8:	000822a9 	.word	0x000822a9
   814ac:	2000129c 	.word	0x2000129c
   814b0:	00082301 	.word	0x00082301

000814b4 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   814b4:	b480      	push	{r7}
   814b6:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   814b8:	4b03      	ldr	r3, [pc, #12]	; (814c8 <FPGA_releaselock+0x14>)
   814ba:	2200      	movs	r2, #0
   814bc:	701a      	strb	r2, [r3, #0]
}
   814be:	bf00      	nop
   814c0:	46bd      	mov	sp, r7
   814c2:	bc80      	pop	{r7}
   814c4:	4770      	bx	lr
   814c6:	bf00      	nop
   814c8:	2000129c 	.word	0x2000129c

000814cc <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   814cc:	b480      	push	{r7}
   814ce:	af00      	add	r7, sp, #0
  return _fpga_locked;
   814d0:	4b03      	ldr	r3, [pc, #12]	; (814e0 <FPGA_lockstatus+0x14>)
   814d2:	781b      	ldrb	r3, [r3, #0]
   814d4:	b2db      	uxtb	r3, r3
}
   814d6:	4618      	mov	r0, r3
   814d8:	46bd      	mov	sp, r7
   814da:	bc80      	pop	{r7}
   814dc:	4770      	bx	lr
   814de:	bf00      	nop
   814e0:	2000129c 	.word	0x2000129c

000814e4 <FPGA_setaddr>:
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   814e4:	b580      	push	{r7, lr}
   814e6:	b082      	sub	sp, #8
   814e8:	af00      	add	r7, sp, #0
   814ea:	6078      	str	r0, [r7, #4]
  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
   814ec:	4b0c      	ldr	r3, [pc, #48]	; (81520 <FPGA_setaddr+0x3c>)
   814ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   814f0:	f003 0240 	and.w	r2, r3, #64	; 0x40
   814f4:	687b      	ldr	r3, [r7, #4]
   814f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   814fa:	431a      	orrs	r2, r3
   814fc:	687b      	ldr	r3, [r7, #4]
   814fe:	005b      	lsls	r3, r3, #1
   81500:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   81504:	4906      	ldr	r1, [pc, #24]	; (81520 <FPGA_setaddr+0x3c>)
   81506:	4313      	orrs	r3, r2
   81508:	638b      	str	r3, [r1, #56]	; 0x38
  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   8150a:	2031      	movs	r0, #49	; 0x31
   8150c:	4b05      	ldr	r3, [pc, #20]	; (81524 <FPGA_setaddr+0x40>)
   8150e:	4798      	blx	r3
  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   81510:	2031      	movs	r0, #49	; 0x31
   81512:	4b05      	ldr	r3, [pc, #20]	; (81528 <FPGA_setaddr+0x44>)
   81514:	4798      	blx	r3
}
   81516:	bf00      	nop
   81518:	3708      	adds	r7, #8
   8151a:	46bd      	mov	sp, r7
   8151c:	bd80      	pop	{r7, pc}
   8151e:	bf00      	nop
   81520:	400e0e00 	.word	0x400e0e00
   81524:	0008266d 	.word	0x0008266d
   81528:	0008263d 	.word	0x0008263d

0008152c <osc_get_rate>:
{
   8152c:	b480      	push	{r7}
   8152e:	b083      	sub	sp, #12
   81530:	af00      	add	r7, sp, #0
   81532:	6078      	str	r0, [r7, #4]
   81534:	687b      	ldr	r3, [r7, #4]
   81536:	2b07      	cmp	r3, #7
   81538:	d823      	bhi.n	81582 <osc_get_rate+0x56>
   8153a:	a201      	add	r2, pc, #4	; (adr r2, 81540 <osc_get_rate+0x14>)
   8153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81540:	00081561 	.word	0x00081561
   81544:	00081567 	.word	0x00081567
   81548:	0008156b 	.word	0x0008156b
   8154c:	0008156f 	.word	0x0008156f
   81550:	00081573 	.word	0x00081573
   81554:	00081577 	.word	0x00081577
   81558:	0008157b 	.word	0x0008157b
   8155c:	0008157f 	.word	0x0008157f
		return OSC_SLCK_32K_RC_HZ;
   81560:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81564:	e00e      	b.n	81584 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   81566:	2300      	movs	r3, #0
   81568:	e00c      	b.n	81584 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   8156a:	2300      	movs	r3, #0
   8156c:	e00a      	b.n	81584 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8156e:	4b08      	ldr	r3, [pc, #32]	; (81590 <osc_get_rate+0x64>)
   81570:	e008      	b.n	81584 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   81572:	4b08      	ldr	r3, [pc, #32]	; (81594 <osc_get_rate+0x68>)
   81574:	e006      	b.n	81584 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   81576:	4b08      	ldr	r3, [pc, #32]	; (81598 <osc_get_rate+0x6c>)
   81578:	e004      	b.n	81584 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   8157a:	4b07      	ldr	r3, [pc, #28]	; (81598 <osc_get_rate+0x6c>)
   8157c:	e002      	b.n	81584 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   8157e:	4b06      	ldr	r3, [pc, #24]	; (81598 <osc_get_rate+0x6c>)
   81580:	e000      	b.n	81584 <osc_get_rate+0x58>
	return 0;
   81582:	2300      	movs	r3, #0
}
   81584:	4618      	mov	r0, r3
   81586:	370c      	adds	r7, #12
   81588:	46bd      	mov	sp, r7
   8158a:	bc80      	pop	{r7}
   8158c:	4770      	bx	lr
   8158e:	bf00      	nop
   81590:	003d0900 	.word	0x003d0900
   81594:	007a1200 	.word	0x007a1200
   81598:	00b71b00 	.word	0x00b71b00

0008159c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8159c:	b580      	push	{r7, lr}
   8159e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   815a0:	2006      	movs	r0, #6
   815a2:	4b03      	ldr	r3, [pc, #12]	; (815b0 <sysclk_get_main_hz+0x14>)
   815a4:	4798      	blx	r3
   815a6:	4603      	mov	r3, r0
   815a8:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   815aa:	4618      	mov	r0, r3
   815ac:	bd80      	pop	{r7, pc}
   815ae:	bf00      	nop
   815b0:	0008152d 	.word	0x0008152d

000815b4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   815b4:	b580      	push	{r7, lr}
   815b6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   815b8:	4b02      	ldr	r3, [pc, #8]	; (815c4 <sysclk_get_cpu_hz+0x10>)
   815ba:	4798      	blx	r3
   815bc:	4603      	mov	r3, r0
   815be:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   815c0:	4618      	mov	r0, r3
   815c2:	bd80      	pop	{r7, pc}
   815c4:	0008159d 	.word	0x0008159d

000815c8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   815c8:	b580      	push	{r7, lr}
   815ca:	b082      	sub	sp, #8
   815cc:	af00      	add	r7, sp, #0
   815ce:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   815d0:	6878      	ldr	r0, [r7, #4]
   815d2:	4b03      	ldr	r3, [pc, #12]	; (815e0 <sysclk_enable_peripheral_clock+0x18>)
   815d4:	4798      	blx	r3
}
   815d6:	bf00      	nop
   815d8:	3708      	adds	r7, #8
   815da:	46bd      	mov	sp, r7
   815dc:	bd80      	pop	{r7, pc}
   815de:	bf00      	nop
   815e0:	00082d01 	.word	0x00082d01

000815e4 <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   815e4:	b580      	push	{r7, lr}
   815e6:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   815e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815ec:	2019      	movs	r0, #25
   815ee:	4b03      	ldr	r3, [pc, #12]	; (815fc <fpga_program_init+0x18>)
   815f0:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   815f2:	2019      	movs	r0, #25
   815f4:	4b02      	ldr	r3, [pc, #8]	; (81600 <fpga_program_init+0x1c>)
   815f6:	4798      	blx	r3
}
   815f8:	bf00      	nop
   815fa:	bd80      	pop	{r7, pc}
   815fc:	0008269d 	.word	0x0008269d
   81600:	0008263d 	.word	0x0008263d

00081604 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   81604:	b580      	push	{r7, lr}
   81606:	b084      	sub	sp, #16
   81608:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   8160a:	2019      	movs	r0, #25
   8160c:	4b14      	ldr	r3, [pc, #80]	; (81660 <fpga_program_setup1+0x5c>)
   8160e:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   81610:	4b14      	ldr	r3, [pc, #80]	; (81664 <fpga_program_setup1+0x60>)
   81612:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   81614:	23c0      	movs	r3, #192	; 0xc0
   81616:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   81618:	2300      	movs	r3, #0
   8161a:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   8161c:	2300      	movs	r3, #0
   8161e:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   81620:	200d      	movs	r0, #13
   81622:	4b11      	ldr	r3, [pc, #68]	; (81668 <fpga_program_setup1+0x64>)
   81624:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   81626:	4b11      	ldr	r3, [pc, #68]	; (8166c <fpga_program_setup1+0x68>)
   81628:	4798      	blx	r3
   8162a:	4602      	mov	r2, r0
   8162c:	463b      	mov	r3, r7
   8162e:	4619      	mov	r1, r3
   81630:	480f      	ldr	r0, [pc, #60]	; (81670 <fpga_program_setup1+0x6c>)
   81632:	4b10      	ldr	r3, [pc, #64]	; (81674 <fpga_program_setup1+0x70>)
   81634:	4798      	blx	r3
    FPGA_DO_SETUP();
   81636:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8163a:	2012      	movs	r0, #18
   8163c:	4b0e      	ldr	r3, [pc, #56]	; (81678 <fpga_program_setup1+0x74>)
   8163e:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   81640:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81644:	2011      	movs	r0, #17
   81646:	4b0c      	ldr	r3, [pc, #48]	; (81678 <fpga_program_setup1+0x74>)
   81648:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   8164a:	4b0c      	ldr	r3, [pc, #48]	; (8167c <fpga_program_setup1+0x78>)
   8164c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   81650:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   81652:	4807      	ldr	r0, [pc, #28]	; (81670 <fpga_program_setup1+0x6c>)
   81654:	4b0a      	ldr	r3, [pc, #40]	; (81680 <fpga_program_setup1+0x7c>)
   81656:	4798      	blx	r3
}
   81658:	bf00      	nop
   8165a:	3710      	adds	r7, #16
   8165c:	46bd      	mov	sp, r7
   8165e:	bd80      	pop	{r7, pc}
   81660:	0008266d 	.word	0x0008266d
   81664:	00989680 	.word	0x00989680
   81668:	000815c9 	.word	0x000815c9
   8166c:	000815b5 	.word	0x000815b5
   81670:	40090000 	.word	0x40090000
   81674:	00086a2d 	.word	0x00086a2d
   81678:	0008269d 	.word	0x0008269d
   8167c:	400e0c00 	.word	0x400e0c00
   81680:	00086b3d 	.word	0x00086b3d

00081684 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   81684:	b580      	push	{r7, lr}
   81686:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   81688:	2019      	movs	r0, #25
   8168a:	4b02      	ldr	r3, [pc, #8]	; (81694 <fpga_program_setup2+0x10>)
   8168c:	4798      	blx	r3
}
   8168e:	bf00      	nop
   81690:	bd80      	pop	{r7, pc}
   81692:	bf00      	nop
   81694:	0008263d 	.word	0x0008263d

00081698 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   81698:	b580      	push	{r7, lr}
   8169a:	b082      	sub	sp, #8
   8169c:	af00      	add	r7, sp, #0
   8169e:	4603      	mov	r3, r0
   816a0:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   816a2:	79fb      	ldrb	r3, [r7, #7]
   816a4:	4619      	mov	r1, r3
   816a6:	4803      	ldr	r0, [pc, #12]	; (816b4 <fpga_program_sendbyte+0x1c>)
   816a8:	4b03      	ldr	r3, [pc, #12]	; (816b8 <fpga_program_sendbyte+0x20>)
   816aa:	4798      	blx	r3
}
   816ac:	bf00      	nop
   816ae:	3708      	adds	r7, #8
   816b0:	46bd      	mov	sp, r7
   816b2:	bd80      	pop	{r7, pc}
   816b4:	40090000 	.word	0x40090000
   816b8:	00086c63 	.word	0x00086c63

000816bc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   816bc:	b480      	push	{r7}
   816be:	b083      	sub	sp, #12
   816c0:	af00      	add	r7, sp, #0
   816c2:	4603      	mov	r3, r0
   816c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   816c6:	79fb      	ldrb	r3, [r7, #7]
   816c8:	f003 031f 	and.w	r3, r3, #31
   816cc:	2201      	movs	r2, #1
   816ce:	fa02 f103 	lsl.w	r1, r2, r3
   816d2:	4a05      	ldr	r2, [pc, #20]	; (816e8 <NVIC_EnableIRQ+0x2c>)
   816d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   816d8:	095b      	lsrs	r3, r3, #5
   816da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   816de:	bf00      	nop
   816e0:	370c      	adds	r7, #12
   816e2:	46bd      	mov	sp, r7
   816e4:	bc80      	pop	{r7}
   816e6:	4770      	bx	lr
   816e8:	e000e100 	.word	0xe000e100

000816ec <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   816ec:	b480      	push	{r7}
   816ee:	b083      	sub	sp, #12
   816f0:	af00      	add	r7, sp, #0
   816f2:	4603      	mov	r3, r0
   816f4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   816f6:	79fb      	ldrb	r3, [r7, #7]
   816f8:	f003 031f 	and.w	r3, r3, #31
   816fc:	2201      	movs	r2, #1
   816fe:	fa02 f103 	lsl.w	r1, r2, r3
   81702:	4a06      	ldr	r2, [pc, #24]	; (8171c <NVIC_ClearPendingIRQ+0x30>)
   81704:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81708:	095b      	lsrs	r3, r3, #5
   8170a:	3360      	adds	r3, #96	; 0x60
   8170c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   81710:	bf00      	nop
   81712:	370c      	adds	r7, #12
   81714:	46bd      	mov	sp, r7
   81716:	bc80      	pop	{r7}
   81718:	4770      	bx	lr
   8171a:	bf00      	nop
   8171c:	e000e100 	.word	0xe000e100

00081720 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81720:	b480      	push	{r7}
   81722:	b083      	sub	sp, #12
   81724:	af00      	add	r7, sp, #0
   81726:	4603      	mov	r3, r0
   81728:	6039      	str	r1, [r7, #0]
   8172a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   8172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81730:	2b00      	cmp	r3, #0
   81732:	da0b      	bge.n	8174c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81734:	683b      	ldr	r3, [r7, #0]
   81736:	b2da      	uxtb	r2, r3
   81738:	490c      	ldr	r1, [pc, #48]	; (8176c <NVIC_SetPriority+0x4c>)
   8173a:	79fb      	ldrb	r3, [r7, #7]
   8173c:	f003 030f 	and.w	r3, r3, #15
   81740:	3b04      	subs	r3, #4
   81742:	0112      	lsls	r2, r2, #4
   81744:	b2d2      	uxtb	r2, r2
   81746:	440b      	add	r3, r1
   81748:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   8174a:	e009      	b.n	81760 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8174c:	683b      	ldr	r3, [r7, #0]
   8174e:	b2da      	uxtb	r2, r3
   81750:	4907      	ldr	r1, [pc, #28]	; (81770 <NVIC_SetPriority+0x50>)
   81752:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81756:	0112      	lsls	r2, r2, #4
   81758:	b2d2      	uxtb	r2, r2
   8175a:	440b      	add	r3, r1
   8175c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81760:	bf00      	nop
   81762:	370c      	adds	r7, #12
   81764:	46bd      	mov	sp, r7
   81766:	bc80      	pop	{r7}
   81768:	4770      	bx	lr
   8176a:	bf00      	nop
   8176c:	e000ed00 	.word	0xe000ed00
   81770:	e000e100 	.word	0xe000e100

00081774 <osc_get_rate>:
{
   81774:	b480      	push	{r7}
   81776:	b083      	sub	sp, #12
   81778:	af00      	add	r7, sp, #0
   8177a:	6078      	str	r0, [r7, #4]
   8177c:	687b      	ldr	r3, [r7, #4]
   8177e:	2b07      	cmp	r3, #7
   81780:	d823      	bhi.n	817ca <osc_get_rate+0x56>
   81782:	a201      	add	r2, pc, #4	; (adr r2, 81788 <osc_get_rate+0x14>)
   81784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81788:	000817a9 	.word	0x000817a9
   8178c:	000817af 	.word	0x000817af
   81790:	000817b3 	.word	0x000817b3
   81794:	000817b7 	.word	0x000817b7
   81798:	000817bb 	.word	0x000817bb
   8179c:	000817bf 	.word	0x000817bf
   817a0:	000817c3 	.word	0x000817c3
   817a4:	000817c7 	.word	0x000817c7
		return OSC_SLCK_32K_RC_HZ;
   817a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   817ac:	e00e      	b.n	817cc <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   817ae:	2300      	movs	r3, #0
   817b0:	e00c      	b.n	817cc <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   817b2:	2300      	movs	r3, #0
   817b4:	e00a      	b.n	817cc <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   817b6:	4b08      	ldr	r3, [pc, #32]	; (817d8 <osc_get_rate+0x64>)
   817b8:	e008      	b.n	817cc <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   817ba:	4b08      	ldr	r3, [pc, #32]	; (817dc <osc_get_rate+0x68>)
   817bc:	e006      	b.n	817cc <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   817be:	4b08      	ldr	r3, [pc, #32]	; (817e0 <osc_get_rate+0x6c>)
   817c0:	e004      	b.n	817cc <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   817c2:	4b07      	ldr	r3, [pc, #28]	; (817e0 <osc_get_rate+0x6c>)
   817c4:	e002      	b.n	817cc <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   817c6:	4b06      	ldr	r3, [pc, #24]	; (817e0 <osc_get_rate+0x6c>)
   817c8:	e000      	b.n	817cc <osc_get_rate+0x58>
	return 0;
   817ca:	2300      	movs	r3, #0
}
   817cc:	4618      	mov	r0, r3
   817ce:	370c      	adds	r7, #12
   817d0:	46bd      	mov	sp, r7
   817d2:	bc80      	pop	{r7}
   817d4:	4770      	bx	lr
   817d6:	bf00      	nop
   817d8:	003d0900 	.word	0x003d0900
   817dc:	007a1200 	.word	0x007a1200
   817e0:	00b71b00 	.word	0x00b71b00

000817e4 <sysclk_get_main_hz>:
{
   817e4:	b580      	push	{r7, lr}
   817e6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   817e8:	2006      	movs	r0, #6
   817ea:	4b03      	ldr	r3, [pc, #12]	; (817f8 <sysclk_get_main_hz+0x14>)
   817ec:	4798      	blx	r3
   817ee:	4603      	mov	r3, r0
   817f0:	011b      	lsls	r3, r3, #4
}
   817f2:	4618      	mov	r0, r3
   817f4:	bd80      	pop	{r7, pc}
   817f6:	bf00      	nop
   817f8:	00081775 	.word	0x00081775

000817fc <sysclk_get_cpu_hz>:
{
   817fc:	b580      	push	{r7, lr}
   817fe:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   81800:	4b02      	ldr	r3, [pc, #8]	; (8180c <sysclk_get_cpu_hz+0x10>)
   81802:	4798      	blx	r3
   81804:	4603      	mov	r3, r0
   81806:	085b      	lsrs	r3, r3, #1
}
   81808:	4618      	mov	r0, r3
   8180a:	bd80      	pop	{r7, pc}
   8180c:	000817e5 	.word	0x000817e5

00081810 <sysclk_enable_peripheral_clock>:
{
   81810:	b580      	push	{r7, lr}
   81812:	b082      	sub	sp, #8
   81814:	af00      	add	r7, sp, #0
   81816:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81818:	6878      	ldr	r0, [r7, #4]
   8181a:	4b03      	ldr	r3, [pc, #12]	; (81828 <sysclk_enable_peripheral_clock+0x18>)
   8181c:	4798      	blx	r3
}
   8181e:	bf00      	nop
   81820:	3708      	adds	r7, #8
   81822:	46bd      	mov	sp, r7
   81824:	bd80      	pop	{r7, pc}
   81826:	bf00      	nop
   81828:	00082d01 	.word	0x00082d01

0008182c <usart0_enableIO>:
tcirc_buf rx1buf, tx1buf;
tcirc_buf rx2buf, tx2buf;
tcirc_buf rx3buf, tx3buf;

static inline void usart0_enableIO(void)
{
   8182c:	b580      	push	{r7, lr}
   8182e:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81830:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81834:	2013      	movs	r0, #19
   81836:	4b04      	ldr	r3, [pc, #16]	; (81848 <usart0_enableIO+0x1c>)
   81838:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   8183a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8183e:	2012      	movs	r0, #18
   81840:	4b01      	ldr	r3, [pc, #4]	; (81848 <usart0_enableIO+0x1c>)
   81842:	4798      	blx	r3
}
   81844:	bf00      	nop
   81846:	bd80      	pop	{r7, pc}
   81848:	0008269d 	.word	0x0008269d

0008184c <ctrl_usart>:
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
   8184c:	b580      	push	{r7, lr}
   8184e:	b08a      	sub	sp, #40	; 0x28
   81850:	af00      	add	r7, sp, #0
   81852:	6078      	str	r0, [r7, #4]
   81854:	460b      	mov	r3, r1
   81856:	70fb      	strb	r3, [r7, #3]
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81858:	4b9b      	ldr	r3, [pc, #620]	; (81ac8 <ctrl_usart+0x27c>)
   8185a:	885b      	ldrh	r3, [r3, #2]
   8185c:	b2db      	uxtb	r3, r3
   8185e:	3b10      	subs	r3, #16
   81860:	2b08      	cmp	r3, #8
   81862:	f200 81bf 	bhi.w	81be4 <ctrl_usart+0x398>
   81866:	a201      	add	r2, pc, #4	; (adr r2, 8186c <ctrl_usart+0x20>)
   81868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8186c:	00081891 	.word	0x00081891
   81870:	000819db 	.word	0x000819db
   81874:	00081a5d 	.word	0x00081a5d
   81878:	00081be5 	.word	0x00081be5
   8187c:	00081a81 	.word	0x00081a81
   81880:	00081be5 	.word	0x00081be5
   81884:	00081be5 	.word	0x00081be5
   81888:	00081be5 	.word	0x00081be5
   8188c:	00081b5f 	.word	0x00081b5f
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   81890:	78fb      	ldrb	r3, [r7, #3]
   81892:	2b00      	cmp	r3, #0
   81894:	d006      	beq.n	818a4 <ctrl_usart+0x58>
				if (udd_g_ctrlreq.req.wLength == 4){
   81896:	4b8c      	ldr	r3, [pc, #560]	; (81ac8 <ctrl_usart+0x27c>)
   81898:	88db      	ldrh	r3, [r3, #6]
   8189a:	2b04      	cmp	r3, #4
   8189c:	f040 8199 	bne.w	81bd2 <ctrl_usart+0x386>
					/*
					udd_g_ctrlreq.payload_size = 4;
					udd_g_ctrlreq.payload = ctrlbuffer;
					word2buf(ctrlbuffer, baud);
					*/
					return true;
   818a0:	2301      	movs	r3, #1
   818a2:	e1a0      	b.n	81be6 <ctrl_usart+0x39a>
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   818a4:	4b88      	ldr	r3, [pc, #544]	; (81ac8 <ctrl_usart+0x27c>)
   818a6:	88db      	ldrh	r3, [r3, #6]
   818a8:	2b07      	cmp	r3, #7
   818aa:	f040 8192 	bne.w	81bd2 <ctrl_usart+0x386>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   818ae:	4b86      	ldr	r3, [pc, #536]	; (81ac8 <ctrl_usart+0x27c>)
   818b0:	689b      	ldr	r3, [r3, #8]
   818b2:	681b      	ldr	r3, [r3, #0]
   818b4:	627b      	str	r3, [r7, #36]	; 0x24
					
						usartopts.baudrate = baud;
   818b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   818b8:	60fb      	str	r3, [r7, #12]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   818ba:	4b83      	ldr	r3, [pc, #524]	; (81ac8 <ctrl_usart+0x27c>)
   818bc:	689b      	ldr	r3, [r3, #8]
   818be:	3304      	adds	r3, #4
   818c0:	781b      	ldrb	r3, [r3, #0]
   818c2:	2b02      	cmp	r3, #2
   818c4:	d00d      	beq.n	818e2 <ctrl_usart+0x96>
   818c6:	2b02      	cmp	r3, #2
   818c8:	dc0f      	bgt.n	818ea <ctrl_usart+0x9e>
   818ca:	2b00      	cmp	r3, #0
   818cc:	d002      	beq.n	818d4 <ctrl_usart+0x88>
   818ce:	2b01      	cmp	r3, #1
   818d0:	d003      	beq.n	818da <ctrl_usart+0x8e>
   818d2:	e00a      	b.n	818ea <ctrl_usart+0x9e>
							{
							case 0:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   818d4:	2300      	movs	r3, #0
   818d6:	61bb      	str	r3, [r7, #24]
								break;
   818d8:	e009      	b.n	818ee <ctrl_usart+0xa2>
							case 1:
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   818da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   818de:	61bb      	str	r3, [r7, #24]
								break;
   818e0:	e005      	b.n	818ee <ctrl_usart+0xa2>
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   818e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   818e6:	61bb      	str	r3, [r7, #24]
								break;
   818e8:	e001      	b.n	818ee <ctrl_usart+0xa2>
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   818ea:	2300      	movs	r3, #0
   818ec:	61bb      	str	r3, [r7, #24]
							}
					
						/* Parity */
						switch(udd_g_ctrlreq.payload[5])
   818ee:	4b76      	ldr	r3, [pc, #472]	; (81ac8 <ctrl_usart+0x27c>)
   818f0:	689b      	ldr	r3, [r3, #8]
   818f2:	3305      	adds	r3, #5
   818f4:	781b      	ldrb	r3, [r3, #0]
   818f6:	2b04      	cmp	r3, #4
   818f8:	d81f      	bhi.n	8193a <ctrl_usart+0xee>
   818fa:	a201      	add	r2, pc, #4	; (adr r2, 81900 <ctrl_usart+0xb4>)
   818fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81900:	00081915 	.word	0x00081915
   81904:	0008191d 	.word	0x0008191d
   81908:	00081925 	.word	0x00081925
   8190c:	0008192b 	.word	0x0008192b
   81910:	00081933 	.word	0x00081933
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   81914:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81918:	617b      	str	r3, [r7, #20]
								break;
   8191a:	e011      	b.n	81940 <ctrl_usart+0xf4>
							case 1:
								usartopts.parity_type = US_MR_PAR_ODD;
   8191c:	f44f 7300 	mov.w	r3, #512	; 0x200
   81920:	617b      	str	r3, [r7, #20]
								break;
   81922:	e00d      	b.n	81940 <ctrl_usart+0xf4>
							case 2:
								usartopts.parity_type = US_MR_PAR_EVEN;
   81924:	2300      	movs	r3, #0
   81926:	617b      	str	r3, [r7, #20]
								break;
   81928:	e00a      	b.n	81940 <ctrl_usart+0xf4>
							case 3:
								usartopts.parity_type = US_MR_PAR_MARK;
   8192a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8192e:	617b      	str	r3, [r7, #20]
								break;
   81930:	e006      	b.n	81940 <ctrl_usart+0xf4>
							case 4:
								usartopts.parity_type = US_MR_PAR_SPACE;
   81932:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81936:	617b      	str	r3, [r7, #20]
								break;							
   81938:	e002      	b.n	81940 <ctrl_usart+0xf4>
							default:
								usartopts.parity_type = US_MR_PAR_NO;
   8193a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8193e:	617b      	str	r3, [r7, #20]
							}
					
						/* Data Bits */
						switch(udd_g_ctrlreq.payload[6])
   81940:	4b61      	ldr	r3, [pc, #388]	; (81ac8 <ctrl_usart+0x27c>)
   81942:	689b      	ldr	r3, [r3, #8]
   81944:	3306      	adds	r3, #6
   81946:	781b      	ldrb	r3, [r3, #0]
   81948:	2b07      	cmp	r3, #7
   8194a:	d00c      	beq.n	81966 <ctrl_usart+0x11a>
   8194c:	2b07      	cmp	r3, #7
   8194e:	dc0d      	bgt.n	8196c <ctrl_usart+0x120>
   81950:	2b05      	cmp	r3, #5
   81952:	d002      	beq.n	8195a <ctrl_usart+0x10e>
   81954:	2b06      	cmp	r3, #6
   81956:	d003      	beq.n	81960 <ctrl_usart+0x114>
   81958:	e008      	b.n	8196c <ctrl_usart+0x120>
							{
							case 5:
								usartopts.char_length = US_MR_CHRL_5_BIT;
   8195a:	2300      	movs	r3, #0
   8195c:	613b      	str	r3, [r7, #16]
								break;
   8195e:	e007      	b.n	81970 <ctrl_usart+0x124>
							case 6:
								usartopts.char_length = US_MR_CHRL_6_BIT;
   81960:	2340      	movs	r3, #64	; 0x40
   81962:	613b      	str	r3, [r7, #16]
								break;
   81964:	e004      	b.n	81970 <ctrl_usart+0x124>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
   81966:	2380      	movs	r3, #128	; 0x80
   81968:	613b      	str	r3, [r7, #16]
								break;					
   8196a:	e001      	b.n	81970 <ctrl_usart+0x124>
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   8196c:	23c0      	movs	r3, #192	; 0xc0
   8196e:	613b      	str	r3, [r7, #16]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81970:	2300      	movs	r3, #0
   81972:	61fb      	str	r3, [r7, #28]

						if (usart == USART0)
   81974:	687b      	ldr	r3, [r7, #4]
   81976:	4a55      	ldr	r2, [pc, #340]	; (81acc <ctrl_usart+0x280>)
   81978:	4293      	cmp	r3, r2
   8197a:	d109      	bne.n	81990 <ctrl_usart+0x144>
						{
							sysclk_enable_peripheral_clock(ID_USART0);
   8197c:	200d      	movs	r0, #13
   8197e:	4b54      	ldr	r3, [pc, #336]	; (81ad0 <ctrl_usart+0x284>)
   81980:	4798      	blx	r3
							init_circ_buf(&tx0buf);
   81982:	4854      	ldr	r0, [pc, #336]	; (81ad4 <ctrl_usart+0x288>)
   81984:	4b54      	ldr	r3, [pc, #336]	; (81ad8 <ctrl_usart+0x28c>)
   81986:	4798      	blx	r3
							init_circ_buf(&rx0buf);
   81988:	4854      	ldr	r0, [pc, #336]	; (81adc <ctrl_usart+0x290>)
   8198a:	4b53      	ldr	r3, [pc, #332]	; (81ad8 <ctrl_usart+0x28c>)
   8198c:	4798      	blx	r3
   8198e:	e01a      	b.n	819c6 <ctrl_usart+0x17a>
						} else if (usart == USART1)
   81990:	687b      	ldr	r3, [r7, #4]
   81992:	4a53      	ldr	r2, [pc, #332]	; (81ae0 <ctrl_usart+0x294>)
   81994:	4293      	cmp	r3, r2
   81996:	d109      	bne.n	819ac <ctrl_usart+0x160>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
   81998:	200e      	movs	r0, #14
   8199a:	4b4d      	ldr	r3, [pc, #308]	; (81ad0 <ctrl_usart+0x284>)
   8199c:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   8199e:	4851      	ldr	r0, [pc, #324]	; (81ae4 <ctrl_usart+0x298>)
   819a0:	4b4d      	ldr	r3, [pc, #308]	; (81ad8 <ctrl_usart+0x28c>)
   819a2:	4798      	blx	r3
							init_circ_buf(&rx1buf);
   819a4:	4850      	ldr	r0, [pc, #320]	; (81ae8 <ctrl_usart+0x29c>)
   819a6:	4b4c      	ldr	r3, [pc, #304]	; (81ad8 <ctrl_usart+0x28c>)
   819a8:	4798      	blx	r3
   819aa:	e00c      	b.n	819c6 <ctrl_usart+0x17a>
						} else if (usart == USART2)
   819ac:	687b      	ldr	r3, [r7, #4]
   819ae:	4a4f      	ldr	r2, [pc, #316]	; (81aec <ctrl_usart+0x2a0>)
   819b0:	4293      	cmp	r3, r2
   819b2:	d108      	bne.n	819c6 <ctrl_usart+0x17a>
						{
							sysclk_enable_peripheral_clock(ID_USART2);
   819b4:	200f      	movs	r0, #15
   819b6:	4b46      	ldr	r3, [pc, #280]	; (81ad0 <ctrl_usart+0x284>)
   819b8:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   819ba:	484d      	ldr	r0, [pc, #308]	; (81af0 <ctrl_usart+0x2a4>)
   819bc:	4b46      	ldr	r3, [pc, #280]	; (81ad8 <ctrl_usart+0x28c>)
   819be:	4798      	blx	r3
							init_circ_buf(&rx2buf);
   819c0:	484c      	ldr	r0, [pc, #304]	; (81af4 <ctrl_usart+0x2a8>)
   819c2:	4b45      	ldr	r3, [pc, #276]	; (81ad8 <ctrl_usart+0x28c>)
   819c4:	4798      	blx	r3
							sysclk_enable_peripheral_clock(ID_USART3);
							init_circ_buf(&tx3buf);
							init_circ_buf(&rx3buf);
						}
#endif
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
   819c6:	4b4c      	ldr	r3, [pc, #304]	; (81af8 <ctrl_usart+0x2ac>)
   819c8:	4798      	blx	r3
   819ca:	4602      	mov	r2, r0
   819cc:	f107 030c 	add.w	r3, r7, #12
   819d0:	4619      	mov	r1, r3
   819d2:	6878      	ldr	r0, [r7, #4]
   819d4:	4b49      	ldr	r3, [pc, #292]	; (81afc <ctrl_usart+0x2b0>)
   819d6:	4798      	blx	r3
					} else {
					}
			}
			break;
   819d8:	e0fb      	b.n	81bd2 <ctrl_usart+0x386>
			
		case USART_WVREQ_ENABLE:
			if (directionIn == false){
   819da:	78fb      	ldrb	r3, [r7, #3]
   819dc:	f083 0301 	eor.w	r3, r3, #1
   819e0:	b2db      	uxtb	r3, r3
   819e2:	2b00      	cmp	r3, #0
   819e4:	f000 80f7 	beq.w	81bd6 <ctrl_usart+0x38a>
				usart_enable_rx(usart);
   819e8:	6878      	ldr	r0, [r7, #4]
   819ea:	4b45      	ldr	r3, [pc, #276]	; (81b00 <ctrl_usart+0x2b4>)
   819ec:	4798      	blx	r3
				usart_enable_tx(usart);
   819ee:	6878      	ldr	r0, [r7, #4]
   819f0:	4b44      	ldr	r3, [pc, #272]	; (81b04 <ctrl_usart+0x2b8>)
   819f2:	4798      	blx	r3
				
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   819f4:	2101      	movs	r1, #1
   819f6:	6878      	ldr	r0, [r7, #4]
   819f8:	4b43      	ldr	r3, [pc, #268]	; (81b08 <ctrl_usart+0x2bc>)
   819fa:	4798      	blx	r3
				
				/* Enable IO Pins */
				if (usart == USART0){
   819fc:	687b      	ldr	r3, [r7, #4]
   819fe:	4a33      	ldr	r2, [pc, #204]	; (81acc <ctrl_usart+0x280>)
   81a00:	4293      	cmp	r3, r2
   81a02:	d10c      	bne.n	81a1e <ctrl_usart+0x1d2>
					usart0_enableIO();
   81a04:	4b41      	ldr	r3, [pc, #260]	; (81b0c <ctrl_usart+0x2c0>)
   81a06:	4798      	blx	r3
					irq_register_handler(USART0_IRQn, 5);
   81a08:	200d      	movs	r0, #13
   81a0a:	4b41      	ldr	r3, [pc, #260]	; (81b10 <ctrl_usart+0x2c4>)
   81a0c:	4798      	blx	r3
   81a0e:	2105      	movs	r1, #5
   81a10:	200d      	movs	r0, #13
   81a12:	4b40      	ldr	r3, [pc, #256]	; (81b14 <ctrl_usart+0x2c8>)
   81a14:	4798      	blx	r3
   81a16:	200d      	movs	r0, #13
   81a18:	4b3f      	ldr	r3, [pc, #252]	; (81b18 <ctrl_usart+0x2cc>)
   81a1a:	4798      	blx	r3
					usart3_enableIO();
					irq_register_handler(USART3_IRQn, 5);
				}
#endif
			}
			break;
   81a1c:	e0db      	b.n	81bd6 <ctrl_usart+0x38a>
				} else if (usart == USART1) {
   81a1e:	687b      	ldr	r3, [r7, #4]
   81a20:	4a2f      	ldr	r2, [pc, #188]	; (81ae0 <ctrl_usart+0x294>)
   81a22:	4293      	cmp	r3, r2
   81a24:	d10a      	bne.n	81a3c <ctrl_usart+0x1f0>
					irq_register_handler(USART1_IRQn, 5);
   81a26:	200e      	movs	r0, #14
   81a28:	4b39      	ldr	r3, [pc, #228]	; (81b10 <ctrl_usart+0x2c4>)
   81a2a:	4798      	blx	r3
   81a2c:	2105      	movs	r1, #5
   81a2e:	200e      	movs	r0, #14
   81a30:	4b38      	ldr	r3, [pc, #224]	; (81b14 <ctrl_usart+0x2c8>)
   81a32:	4798      	blx	r3
   81a34:	200e      	movs	r0, #14
   81a36:	4b38      	ldr	r3, [pc, #224]	; (81b18 <ctrl_usart+0x2cc>)
   81a38:	4798      	blx	r3
			break;
   81a3a:	e0cc      	b.n	81bd6 <ctrl_usart+0x38a>
				} else if (usart == USART2) {
   81a3c:	687b      	ldr	r3, [r7, #4]
   81a3e:	4a2b      	ldr	r2, [pc, #172]	; (81aec <ctrl_usart+0x2a0>)
   81a40:	4293      	cmp	r3, r2
   81a42:	f040 80c8 	bne.w	81bd6 <ctrl_usart+0x38a>
					irq_register_handler(USART2_IRQn, 5);
   81a46:	200f      	movs	r0, #15
   81a48:	4b31      	ldr	r3, [pc, #196]	; (81b10 <ctrl_usart+0x2c4>)
   81a4a:	4798      	blx	r3
   81a4c:	2105      	movs	r1, #5
   81a4e:	200f      	movs	r0, #15
   81a50:	4b30      	ldr	r3, [pc, #192]	; (81b14 <ctrl_usart+0x2c8>)
   81a52:	4798      	blx	r3
   81a54:	200f      	movs	r0, #15
   81a56:	4b30      	ldr	r3, [pc, #192]	; (81b18 <ctrl_usart+0x2cc>)
   81a58:	4798      	blx	r3
			break;
   81a5a:	e0bc      	b.n	81bd6 <ctrl_usart+0x38a>
						
		case USART_WVREQ_DISABLE:
			if (directionIn == false){
   81a5c:	78fb      	ldrb	r3, [r7, #3]
   81a5e:	f083 0301 	eor.w	r3, r3, #1
   81a62:	b2db      	uxtb	r3, r3
   81a64:	2b00      	cmp	r3, #0
   81a66:	f000 80b8 	beq.w	81bda <ctrl_usart+0x38e>
				usart_disable_rx(usart);
   81a6a:	6878      	ldr	r0, [r7, #4]
   81a6c:	4b2b      	ldr	r3, [pc, #172]	; (81b1c <ctrl_usart+0x2d0>)
   81a6e:	4798      	blx	r3
				usart_disable_rx(usart);
   81a70:	6878      	ldr	r0, [r7, #4]
   81a72:	4b2a      	ldr	r3, [pc, #168]	; (81b1c <ctrl_usart+0x2d0>)
   81a74:	4798      	blx	r3
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   81a76:	2103      	movs	r1, #3
   81a78:	6878      	ldr	r0, [r7, #4]
   81a7a:	4b29      	ldr	r3, [pc, #164]	; (81b20 <ctrl_usart+0x2d4>)
   81a7c:	4798      	blx	r3
			}
		
			break;
   81a7e:	e0ac      	b.n	81bda <ctrl_usart+0x38e>
			
		case USART_WVREQ_NUMWAIT:		
			if (directionIn){
   81a80:	78fb      	ldrb	r3, [r7, #3]
   81a82:	2b00      	cmp	r3, #0
   81a84:	f000 80ab 	beq.w	81bde <ctrl_usart+0x392>
				if (udd_g_ctrlreq.req.wLength == 4){
   81a88:	4b0f      	ldr	r3, [pc, #60]	; (81ac8 <ctrl_usart+0x27c>)
   81a8a:	88db      	ldrh	r3, [r3, #6]
   81a8c:	2b04      	cmp	r3, #4
   81a8e:	f040 80a6 	bne.w	81bde <ctrl_usart+0x392>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81a92:	4b0d      	ldr	r3, [pc, #52]	; (81ac8 <ctrl_usart+0x27c>)
   81a94:	4a23      	ldr	r2, [pc, #140]	; (81b24 <ctrl_usart+0x2d8>)
   81a96:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   81a98:	4b0b      	ldr	r3, [pc, #44]	; (81ac8 <ctrl_usart+0x27c>)
   81a9a:	2204      	movs	r2, #4
   81a9c:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   81a9e:	687b      	ldr	r3, [r7, #4]
   81aa0:	4a0a      	ldr	r2, [pc, #40]	; (81acc <ctrl_usart+0x280>)
   81aa2:	4293      	cmp	r3, r2
   81aa4:	d105      	bne.n	81ab2 <ctrl_usart+0x266>
						cnt = circ_buf_count(&rx0buf);
   81aa6:	480d      	ldr	r0, [pc, #52]	; (81adc <ctrl_usart+0x290>)
   81aa8:	4b1f      	ldr	r3, [pc, #124]	; (81b28 <ctrl_usart+0x2dc>)
   81aaa:	4798      	blx	r3
   81aac:	4603      	mov	r3, r0
   81aae:	60bb      	str	r3, [r7, #8]
   81ab0:	e045      	b.n	81b3e <ctrl_usart+0x2f2>
					} else if (usart == USART1){
   81ab2:	687b      	ldr	r3, [r7, #4]
   81ab4:	4a0a      	ldr	r2, [pc, #40]	; (81ae0 <ctrl_usart+0x294>)
   81ab6:	4293      	cmp	r3, r2
   81ab8:	d138      	bne.n	81b2c <ctrl_usart+0x2e0>
						cnt = circ_buf_count(&rx1buf);
   81aba:	480b      	ldr	r0, [pc, #44]	; (81ae8 <ctrl_usart+0x29c>)
   81abc:	4b1a      	ldr	r3, [pc, #104]	; (81b28 <ctrl_usart+0x2dc>)
   81abe:	4798      	blx	r3
   81ac0:	4603      	mov	r3, r0
   81ac2:	60bb      	str	r3, [r7, #8]
   81ac4:	e03b      	b.n	81b3e <ctrl_usart+0x2f2>
   81ac6:	bf00      	nop
   81ac8:	20001828 	.word	0x20001828
   81acc:	40090000 	.word	0x40090000
   81ad0:	00081811 	.word	0x00081811
   81ad4:	20001790 	.word	0x20001790
   81ad8:	00081f71 	.word	0x00081f71
   81adc:	20001448 	.word	0x20001448
   81ae0:	40094000 	.word	0x40094000
   81ae4:	20001560 	.word	0x20001560
   81ae8:	20001704 	.word	0x20001704
   81aec:	40098000 	.word	0x40098000
   81af0:	200013bc 	.word	0x200013bc
   81af4:	20001678 	.word	0x20001678
   81af8:	000817fd 	.word	0x000817fd
   81afc:	000869a9 	.word	0x000869a9
   81b00:	00086b6d 	.word	0x00086b6d
   81b04:	00086b3d 	.word	0x00086b3d
   81b08:	00086bb5 	.word	0x00086bb5
   81b0c:	0008182d 	.word	0x0008182d
   81b10:	000816ed 	.word	0x000816ed
   81b14:	00081721 	.word	0x00081721
   81b18:	000816bd 	.word	0x000816bd
   81b1c:	00086b85 	.word	0x00086b85
   81b20:	00086bcf 	.word	0x00086bcf
   81b24:	200012a0 	.word	0x200012a0
   81b28:	00082069 	.word	0x00082069
					} else if (usart == USART2){
   81b2c:	687b      	ldr	r3, [r7, #4]
   81b2e:	4a30      	ldr	r2, [pc, #192]	; (81bf0 <ctrl_usart+0x3a4>)
   81b30:	4293      	cmp	r3, r2
   81b32:	d104      	bne.n	81b3e <ctrl_usart+0x2f2>
						cnt = circ_buf_count(&rx2buf);
   81b34:	482f      	ldr	r0, [pc, #188]	; (81bf4 <ctrl_usart+0x3a8>)
   81b36:	4b30      	ldr	r3, [pc, #192]	; (81bf8 <ctrl_usart+0x3ac>)
   81b38:	4798      	blx	r3
   81b3a:	4603      	mov	r3, r0
   81b3c:	60bb      	str	r3, [r7, #8]
					else if (usart == USART3){
						cnt = circ_buf_count(&rx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
   81b3e:	f107 0308 	add.w	r3, r7, #8
   81b42:	781a      	ldrb	r2, [r3, #0]
   81b44:	4b2d      	ldr	r3, [pc, #180]	; (81bfc <ctrl_usart+0x3b0>)
   81b46:	701a      	strb	r2, [r3, #0]
   81b48:	7a7a      	ldrb	r2, [r7, #9]
   81b4a:	4b2c      	ldr	r3, [pc, #176]	; (81bfc <ctrl_usart+0x3b0>)
   81b4c:	705a      	strb	r2, [r3, #1]
   81b4e:	7aba      	ldrb	r2, [r7, #10]
   81b50:	4b2a      	ldr	r3, [pc, #168]	; (81bfc <ctrl_usart+0x3b0>)
   81b52:	709a      	strb	r2, [r3, #2]
   81b54:	7afa      	ldrb	r2, [r7, #11]
   81b56:	4b29      	ldr	r3, [pc, #164]	; (81bfc <ctrl_usart+0x3b0>)
   81b58:	70da      	strb	r2, [r3, #3]
			
					return true;
   81b5a:	2301      	movs	r3, #1
   81b5c:	e043      	b.n	81be6 <ctrl_usart+0x39a>
				}
			}
			break;		
		case USART_WVREQ_NUMWAIT_TX:		
			if (directionIn){
   81b5e:	78fb      	ldrb	r3, [r7, #3]
   81b60:	2b00      	cmp	r3, #0
   81b62:	d03e      	beq.n	81be2 <ctrl_usart+0x396>
				if (udd_g_ctrlreq.req.wLength == 4){
   81b64:	4b26      	ldr	r3, [pc, #152]	; (81c00 <ctrl_usart+0x3b4>)
   81b66:	88db      	ldrh	r3, [r3, #6]
   81b68:	2b04      	cmp	r3, #4
   81b6a:	d13a      	bne.n	81be2 <ctrl_usart+0x396>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81b6c:	4b24      	ldr	r3, [pc, #144]	; (81c00 <ctrl_usart+0x3b4>)
   81b6e:	4a23      	ldr	r2, [pc, #140]	; (81bfc <ctrl_usart+0x3b0>)
   81b70:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   81b72:	4b23      	ldr	r3, [pc, #140]	; (81c00 <ctrl_usart+0x3b4>)
   81b74:	2204      	movs	r2, #4
   81b76:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   81b78:	687b      	ldr	r3, [r7, #4]
   81b7a:	4a22      	ldr	r2, [pc, #136]	; (81c04 <ctrl_usart+0x3b8>)
   81b7c:	4293      	cmp	r3, r2
   81b7e:	d105      	bne.n	81b8c <ctrl_usart+0x340>
						cnt = circ_buf_count(&tx0buf);
   81b80:	4821      	ldr	r0, [pc, #132]	; (81c08 <ctrl_usart+0x3bc>)
   81b82:	4b1d      	ldr	r3, [pc, #116]	; (81bf8 <ctrl_usart+0x3ac>)
   81b84:	4798      	blx	r3
   81b86:	4603      	mov	r3, r0
   81b88:	60bb      	str	r3, [r7, #8]
   81b8a:	e012      	b.n	81bb2 <ctrl_usart+0x366>
					} else if (usart == USART1){
   81b8c:	687b      	ldr	r3, [r7, #4]
   81b8e:	4a1f      	ldr	r2, [pc, #124]	; (81c0c <ctrl_usart+0x3c0>)
   81b90:	4293      	cmp	r3, r2
   81b92:	d105      	bne.n	81ba0 <ctrl_usart+0x354>
						cnt = circ_buf_count(&tx1buf);
   81b94:	481e      	ldr	r0, [pc, #120]	; (81c10 <ctrl_usart+0x3c4>)
   81b96:	4b18      	ldr	r3, [pc, #96]	; (81bf8 <ctrl_usart+0x3ac>)
   81b98:	4798      	blx	r3
   81b9a:	4603      	mov	r3, r0
   81b9c:	60bb      	str	r3, [r7, #8]
   81b9e:	e008      	b.n	81bb2 <ctrl_usart+0x366>
					} else if (usart == USART2){
   81ba0:	687b      	ldr	r3, [r7, #4]
   81ba2:	4a13      	ldr	r2, [pc, #76]	; (81bf0 <ctrl_usart+0x3a4>)
   81ba4:	4293      	cmp	r3, r2
   81ba6:	d104      	bne.n	81bb2 <ctrl_usart+0x366>
						cnt = circ_buf_count(&tx2buf);
   81ba8:	481a      	ldr	r0, [pc, #104]	; (81c14 <ctrl_usart+0x3c8>)
   81baa:	4b13      	ldr	r3, [pc, #76]	; (81bf8 <ctrl_usart+0x3ac>)
   81bac:	4798      	blx	r3
   81bae:	4603      	mov	r3, r0
   81bb0:	60bb      	str	r3, [r7, #8]
					else if (usart == USART3){
						cnt = circ_buf_count(&tx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
   81bb2:	f107 0308 	add.w	r3, r7, #8
   81bb6:	781a      	ldrb	r2, [r3, #0]
   81bb8:	4b10      	ldr	r3, [pc, #64]	; (81bfc <ctrl_usart+0x3b0>)
   81bba:	701a      	strb	r2, [r3, #0]
   81bbc:	7a7a      	ldrb	r2, [r7, #9]
   81bbe:	4b0f      	ldr	r3, [pc, #60]	; (81bfc <ctrl_usart+0x3b0>)
   81bc0:	705a      	strb	r2, [r3, #1]
   81bc2:	7aba      	ldrb	r2, [r7, #10]
   81bc4:	4b0d      	ldr	r3, [pc, #52]	; (81bfc <ctrl_usart+0x3b0>)
   81bc6:	709a      	strb	r2, [r3, #2]
   81bc8:	7afa      	ldrb	r2, [r7, #11]
   81bca:	4b0c      	ldr	r3, [pc, #48]	; (81bfc <ctrl_usart+0x3b0>)
   81bcc:	70da      	strb	r2, [r3, #3]
			
					return true;
   81bce:	2301      	movs	r3, #1
   81bd0:	e009      	b.n	81be6 <ctrl_usart+0x39a>
			break;
   81bd2:	bf00      	nop
   81bd4:	e006      	b.n	81be4 <ctrl_usart+0x398>
			break;
   81bd6:	bf00      	nop
   81bd8:	e004      	b.n	81be4 <ctrl_usart+0x398>
			break;
   81bda:	bf00      	nop
   81bdc:	e002      	b.n	81be4 <ctrl_usart+0x398>
			break;		
   81bde:	bf00      	nop
   81be0:	e000      	b.n	81be4 <ctrl_usart+0x398>
				}
			}
			break;		
   81be2:	bf00      	nop
	}
	
	return false;
   81be4:	2300      	movs	r3, #0
}
   81be6:	4618      	mov	r0, r3
   81be8:	3728      	adds	r7, #40	; 0x28
   81bea:	46bd      	mov	sp, r7
   81bec:	bd80      	pop	{r7, pc}
   81bee:	bf00      	nop
   81bf0:	40098000 	.word	0x40098000
   81bf4:	20001678 	.word	0x20001678
   81bf8:	00082069 	.word	0x00082069
   81bfc:	200012a0 	.word	0x200012a0
   81c00:	20001828 	.word	0x20001828
   81c04:	40090000 	.word	0x40090000
   81c08:	20001790 	.word	0x20001790
   81c0c:	40094000 	.word	0x40094000
   81c10:	20001560 	.word	0x20001560
   81c14:	200013bc 	.word	0x200013bc

00081c18 <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   81c18:	b580      	push	{r7, lr}
   81c1a:	b084      	sub	sp, #16
   81c1c:	af00      	add	r7, sp, #0
   81c1e:	60f8      	str	r0, [r7, #12]
   81c20:	60b9      	str	r1, [r7, #8]
   81c22:	4613      	mov	r3, r2
   81c24:	71fb      	strb	r3, [r7, #7]
	if (txbuf == NULL){
   81c26:	68bb      	ldr	r3, [r7, #8]
   81c28:	2b00      	cmp	r3, #0
   81c2a:	d113      	bne.n	81c54 <usart_driver_putchar+0x3c>
		if (usart == USART0) txbuf = &tx0buf;
   81c2c:	68fb      	ldr	r3, [r7, #12]
   81c2e:	4a19      	ldr	r2, [pc, #100]	; (81c94 <usart_driver_putchar+0x7c>)
   81c30:	4293      	cmp	r3, r2
   81c32:	d102      	bne.n	81c3a <usart_driver_putchar+0x22>
   81c34:	4b18      	ldr	r3, [pc, #96]	; (81c98 <usart_driver_putchar+0x80>)
   81c36:	60bb      	str	r3, [r7, #8]
   81c38:	e00c      	b.n	81c54 <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   81c3a:	68fb      	ldr	r3, [r7, #12]
   81c3c:	4a17      	ldr	r2, [pc, #92]	; (81c9c <usart_driver_putchar+0x84>)
   81c3e:	4293      	cmp	r3, r2
   81c40:	d102      	bne.n	81c48 <usart_driver_putchar+0x30>
   81c42:	4b17      	ldr	r3, [pc, #92]	; (81ca0 <usart_driver_putchar+0x88>)
   81c44:	60bb      	str	r3, [r7, #8]
   81c46:	e005      	b.n	81c54 <usart_driver_putchar+0x3c>
		else if (usart == USART2) txbuf = &tx2buf;
   81c48:	68fb      	ldr	r3, [r7, #12]
   81c4a:	4a16      	ldr	r2, [pc, #88]	; (81ca4 <usart_driver_putchar+0x8c>)
   81c4c:	4293      	cmp	r3, r2
   81c4e:	d11c      	bne.n	81c8a <usart_driver_putchar+0x72>
   81c50:	4b15      	ldr	r3, [pc, #84]	; (81ca8 <usart_driver_putchar+0x90>)
   81c52:	60bb      	str	r3, [r7, #8]
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
   81c54:	79fb      	ldrb	r3, [r7, #7]
   81c56:	2200      	movs	r2, #0
   81c58:	4619      	mov	r1, r3
   81c5a:	68b8      	ldr	r0, [r7, #8]
   81c5c:	4b13      	ldr	r3, [pc, #76]	; (81cac <usart_driver_putchar+0x94>)
   81c5e:	4798      	blx	r3

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
   81c60:	68f8      	ldr	r0, [r7, #12]
   81c62:	4b13      	ldr	r3, [pc, #76]	; (81cb0 <usart_driver_putchar+0x98>)
   81c64:	4798      	blx	r3
   81c66:	4603      	mov	r3, r0
   81c68:	f003 0302 	and.w	r3, r3, #2
   81c6c:	2b00      	cmp	r3, #0
   81c6e:	d10d      	bne.n	81c8c <usart_driver_putchar+0x74>
		usart_putchar(usart, get_from_circ_buf(txbuf));
   81c70:	68b8      	ldr	r0, [r7, #8]
   81c72:	4b10      	ldr	r3, [pc, #64]	; (81cb4 <usart_driver_putchar+0x9c>)
   81c74:	4798      	blx	r3
   81c76:	4603      	mov	r3, r0
   81c78:	4619      	mov	r1, r3
   81c7a:	68f8      	ldr	r0, [r7, #12]
   81c7c:	4b0e      	ldr	r3, [pc, #56]	; (81cb8 <usart_driver_putchar+0xa0>)
   81c7e:	4798      	blx	r3
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   81c80:	2102      	movs	r1, #2
   81c82:	68f8      	ldr	r0, [r7, #12]
   81c84:	4b0d      	ldr	r3, [pc, #52]	; (81cbc <usart_driver_putchar+0xa4>)
   81c86:	4798      	blx	r3
   81c88:	e000      	b.n	81c8c <usart_driver_putchar+0x74>
		else return;
   81c8a:	bf00      	nop
	}
}
   81c8c:	3710      	adds	r7, #16
   81c8e:	46bd      	mov	sp, r7
   81c90:	bd80      	pop	{r7, pc}
   81c92:	bf00      	nop
   81c94:	40090000 	.word	0x40090000
   81c98:	20001790 	.word	0x20001790
   81c9c:	40094000 	.word	0x40094000
   81ca0:	20001560 	.word	0x20001560
   81ca4:	40098000 	.word	0x40098000
   81ca8:	200013bc 	.word	0x200013bc
   81cac:	00081f93 	.word	0x00081f93
   81cb0:	00086be9 	.word	0x00086be9
   81cb4:	00081ff7 	.word	0x00081ff7
   81cb8:	00086c63 	.word	0x00086c63
   81cbc:	00086bb5 	.word	0x00086bb5

00081cc0 <usart_driver_getchar>:

uint8_t usart_driver_getchar(Usart * usart)
{
   81cc0:	b580      	push	{r7, lr}
   81cc2:	b084      	sub	sp, #16
   81cc4:	af00      	add	r7, sp, #0
   81cc6:	6078      	str	r0, [r7, #4]
	tcirc_buf * rxbuf = NULL;	 
   81cc8:	2300      	movs	r3, #0
   81cca:	60fb      	str	r3, [r7, #12]
	if (rxbuf == NULL){
   81ccc:	68fb      	ldr	r3, [r7, #12]
   81cce:	2b00      	cmp	r3, #0
   81cd0:	d116      	bne.n	81d00 <usart_driver_getchar+0x40>
			if (usart == USART0) rxbuf = &rx0buf;
   81cd2:	687b      	ldr	r3, [r7, #4]
   81cd4:	4a0e      	ldr	r2, [pc, #56]	; (81d10 <usart_driver_getchar+0x50>)
   81cd6:	4293      	cmp	r3, r2
   81cd8:	d102      	bne.n	81ce0 <usart_driver_getchar+0x20>
   81cda:	4b0e      	ldr	r3, [pc, #56]	; (81d14 <usart_driver_getchar+0x54>)
   81cdc:	60fb      	str	r3, [r7, #12]
   81cde:	e00f      	b.n	81d00 <usart_driver_getchar+0x40>
			else if (usart == USART1) rxbuf = &rx1buf;
   81ce0:	687b      	ldr	r3, [r7, #4]
   81ce2:	4a0d      	ldr	r2, [pc, #52]	; (81d18 <usart_driver_getchar+0x58>)
   81ce4:	4293      	cmp	r3, r2
   81ce6:	d102      	bne.n	81cee <usart_driver_getchar+0x2e>
   81ce8:	4b0c      	ldr	r3, [pc, #48]	; (81d1c <usart_driver_getchar+0x5c>)
   81cea:	60fb      	str	r3, [r7, #12]
   81cec:	e008      	b.n	81d00 <usart_driver_getchar+0x40>
			else if (usart == USART2) rxbuf = &rx2buf;
   81cee:	687b      	ldr	r3, [r7, #4]
   81cf0:	4a0b      	ldr	r2, [pc, #44]	; (81d20 <usart_driver_getchar+0x60>)
   81cf2:	4293      	cmp	r3, r2
   81cf4:	d102      	bne.n	81cfc <usart_driver_getchar+0x3c>
   81cf6:	4b0b      	ldr	r3, [pc, #44]	; (81d24 <usart_driver_getchar+0x64>)
   81cf8:	60fb      	str	r3, [r7, #12]
   81cfa:	e001      	b.n	81d00 <usart_driver_getchar+0x40>
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
   81cfc:	23ff      	movs	r3, #255	; 0xff
   81cfe:	e003      	b.n	81d08 <usart_driver_getchar+0x48>
	}
	return get_from_circ_buf(rxbuf);
   81d00:	68f8      	ldr	r0, [r7, #12]
   81d02:	4b09      	ldr	r3, [pc, #36]	; (81d28 <usart_driver_getchar+0x68>)
   81d04:	4798      	blx	r3
   81d06:	4603      	mov	r3, r0
}
   81d08:	4618      	mov	r0, r3
   81d0a:	3710      	adds	r7, #16
   81d0c:	46bd      	mov	sp, r7
   81d0e:	bd80      	pop	{r7, pc}
   81d10:	40090000 	.word	0x40090000
   81d14:	20001448 	.word	0x20001448
   81d18:	40094000 	.word	0x40094000
   81d1c:	20001704 	.word	0x20001704
   81d20:	40098000 	.word	0x40098000
   81d24:	20001678 	.word	0x20001678
   81d28:	00081ff7 	.word	0x00081ff7

00081d2c <generic_isr>:

void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   81d2c:	b580      	push	{r7, lr}
   81d2e:	b086      	sub	sp, #24
   81d30:	af00      	add	r7, sp, #0
   81d32:	60f8      	str	r0, [r7, #12]
   81d34:	60b9      	str	r1, [r7, #8]
   81d36:	607a      	str	r2, [r7, #4]
	uint32_t status;
	status = usart_get_status(usart);
   81d38:	68f8      	ldr	r0, [r7, #12]
   81d3a:	4b18      	ldr	r3, [pc, #96]	; (81d9c <generic_isr+0x70>)
   81d3c:	4798      	blx	r3
   81d3e:	6178      	str	r0, [r7, #20]
	if (status & US_CSR_RXRDY){
   81d40:	697b      	ldr	r3, [r7, #20]
   81d42:	f003 0301 	and.w	r3, r3, #1
   81d46:	2b00      	cmp	r3, #0
   81d48:	d00b      	beq.n	81d62 <generic_isr+0x36>
		uint32_t temp;
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   81d4a:	68fb      	ldr	r3, [r7, #12]
   81d4c:	699b      	ldr	r3, [r3, #24]
   81d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81d52:	613b      	str	r3, [r7, #16]
		add_to_circ_buf(rxbuf, temp, false);
   81d54:	693b      	ldr	r3, [r7, #16]
   81d56:	b2db      	uxtb	r3, r3
   81d58:	2200      	movs	r2, #0
   81d5a:	4619      	mov	r1, r3
   81d5c:	68b8      	ldr	r0, [r7, #8]
   81d5e:	4b10      	ldr	r3, [pc, #64]	; (81da0 <generic_isr+0x74>)
   81d60:	4798      	blx	r3
	}
	
	if (status & US_CSR_TXRDY){
   81d62:	697b      	ldr	r3, [r7, #20]
   81d64:	f003 0302 	and.w	r3, r3, #2
   81d68:	2b00      	cmp	r3, #0
   81d6a:	d012      	beq.n	81d92 <generic_isr+0x66>
		if (circ_buf_has_char(txbuf)){
   81d6c:	6878      	ldr	r0, [r7, #4]
   81d6e:	4b0d      	ldr	r3, [pc, #52]	; (81da4 <generic_isr+0x78>)
   81d70:	4798      	blx	r3
   81d72:	4603      	mov	r3, r0
   81d74:	2b00      	cmp	r3, #0
   81d76:	d008      	beq.n	81d8a <generic_isr+0x5e>
			//Still data to send
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   81d78:	6878      	ldr	r0, [r7, #4]
   81d7a:	4b0b      	ldr	r3, [pc, #44]	; (81da8 <generic_isr+0x7c>)
   81d7c:	4798      	blx	r3
   81d7e:	4603      	mov	r3, r0
   81d80:	4619      	mov	r1, r3
   81d82:	68f8      	ldr	r0, [r7, #12]
   81d84:	4b09      	ldr	r3, [pc, #36]	; (81dac <generic_isr+0x80>)
   81d86:	4798      	blx	r3
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
		}
	}
}
   81d88:	e003      	b.n	81d92 <generic_isr+0x66>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   81d8a:	2102      	movs	r1, #2
   81d8c:	68f8      	ldr	r0, [r7, #12]
   81d8e:	4b08      	ldr	r3, [pc, #32]	; (81db0 <generic_isr+0x84>)
   81d90:	4798      	blx	r3
}
   81d92:	bf00      	nop
   81d94:	3718      	adds	r7, #24
   81d96:	46bd      	mov	sp, r7
   81d98:	bd80      	pop	{r7, pc}
   81d9a:	bf00      	nop
   81d9c:	00086bff 	.word	0x00086bff
   81da0:	00081f93 	.word	0x00081f93
   81da4:	00082041 	.word	0x00082041
   81da8:	00081ff7 	.word	0x00081ff7
   81dac:	00086c63 	.word	0x00086c63
   81db0:	00086bcf 	.word	0x00086bcf

00081db4 <USART0_Handler>:

ISR(USART0_Handler)
{
   81db4:	b580      	push	{r7, lr}
   81db6:	af00      	add	r7, sp, #0
	generic_isr(USART0, &rx0buf, &tx0buf);
   81db8:	4a03      	ldr	r2, [pc, #12]	; (81dc8 <USART0_Handler+0x14>)
   81dba:	4904      	ldr	r1, [pc, #16]	; (81dcc <USART0_Handler+0x18>)
   81dbc:	4804      	ldr	r0, [pc, #16]	; (81dd0 <USART0_Handler+0x1c>)
   81dbe:	4b05      	ldr	r3, [pc, #20]	; (81dd4 <USART0_Handler+0x20>)
   81dc0:	4798      	blx	r3
}
   81dc2:	bf00      	nop
   81dc4:	bd80      	pop	{r7, pc}
   81dc6:	bf00      	nop
   81dc8:	20001790 	.word	0x20001790
   81dcc:	20001448 	.word	0x20001448
   81dd0:	40090000 	.word	0x40090000
   81dd4:	00081d2d 	.word	0x00081d2d

00081dd8 <USART1_Handler>:

ISR(USART1_Handler)
{
   81dd8:	b580      	push	{r7, lr}
   81dda:	af00      	add	r7, sp, #0
	generic_isr(USART1, &rx1buf, &tx1buf);
   81ddc:	4a03      	ldr	r2, [pc, #12]	; (81dec <USART1_Handler+0x14>)
   81dde:	4904      	ldr	r1, [pc, #16]	; (81df0 <USART1_Handler+0x18>)
   81de0:	4804      	ldr	r0, [pc, #16]	; (81df4 <USART1_Handler+0x1c>)
   81de2:	4b05      	ldr	r3, [pc, #20]	; (81df8 <USART1_Handler+0x20>)
   81de4:	4798      	blx	r3
}
   81de6:	bf00      	nop
   81de8:	bd80      	pop	{r7, pc}
   81dea:	bf00      	nop
   81dec:	20001560 	.word	0x20001560
   81df0:	20001704 	.word	0x20001704
   81df4:	40094000 	.word	0x40094000
   81df8:	00081d2d 	.word	0x00081d2d

00081dfc <USART2_Handler>:

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
   81dfc:	b580      	push	{r7, lr}
   81dfe:	af00      	add	r7, sp, #0
	generic_isr(USART2, &rx2buf, &tx2buf);
   81e00:	4a03      	ldr	r2, [pc, #12]	; (81e10 <USART2_Handler+0x14>)
   81e02:	4904      	ldr	r1, [pc, #16]	; (81e14 <USART2_Handler+0x18>)
   81e04:	4804      	ldr	r0, [pc, #16]	; (81e18 <USART2_Handler+0x1c>)
   81e06:	4b05      	ldr	r3, [pc, #20]	; (81e1c <USART2_Handler+0x20>)
   81e08:	4798      	blx	r3
}
   81e0a:	bf00      	nop
   81e0c:	bd80      	pop	{r7, pc}
   81e0e:	bf00      	nop
   81e10:	200013bc 	.word	0x200013bc
   81e14:	20001678 	.word	0x20001678
   81e18:	40098000 	.word	0x40098000
   81e1c:	00081d2d 	.word	0x00081d2d

00081e20 <spi_put>:
 * \param p_spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
   81e20:	b480      	push	{r7}
   81e22:	b083      	sub	sp, #12
   81e24:	af00      	add	r7, sp, #0
   81e26:	6078      	str	r0, [r7, #4]
   81e28:	460b      	mov	r3, r1
   81e2a:	807b      	strh	r3, [r7, #2]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
   81e2c:	887a      	ldrh	r2, [r7, #2]
   81e2e:	687b      	ldr	r3, [r7, #4]
   81e30:	60da      	str	r2, [r3, #12]
}
   81e32:	bf00      	nop
   81e34:	370c      	adds	r7, #12
   81e36:	46bd      	mov	sp, r7
   81e38:	bc80      	pop	{r7}
   81e3a:	4770      	bx	lr

00081e3c <spi_get>:
 * \param p_spi Base address of the SPI instance.
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
   81e3c:	b480      	push	{r7}
   81e3e:	b083      	sub	sp, #12
   81e40:	af00      	add	r7, sp, #0
   81e42:	6078      	str	r0, [r7, #4]
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
   81e44:	687b      	ldr	r3, [r7, #4]
   81e46:	689b      	ldr	r3, [r3, #8]
   81e48:	b29b      	uxth	r3, r3
}
   81e4a:	4618      	mov	r0, r3
   81e4c:	370c      	adds	r7, #12
   81e4e:	46bd      	mov	sp, r7
   81e50:	bc80      	pop	{r7}
   81e52:	4770      	bx	lr

00081e54 <spi_is_tx_empty>:
 *
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
   81e54:	b480      	push	{r7}
   81e56:	b083      	sub	sp, #12
   81e58:	af00      	add	r7, sp, #0
   81e5a:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
   81e5c:	687b      	ldr	r3, [r7, #4]
   81e5e:	691b      	ldr	r3, [r3, #16]
   81e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
   81e64:	2b00      	cmp	r3, #0
   81e66:	d001      	beq.n	81e6c <spi_is_tx_empty+0x18>
		return 1;
   81e68:	2301      	movs	r3, #1
   81e6a:	e000      	b.n	81e6e <spi_is_tx_empty+0x1a>
	} else {
		return 0;
   81e6c:	2300      	movs	r3, #0
	}
}
   81e6e:	4618      	mov	r0, r3
   81e70:	370c      	adds	r7, #12
   81e72:	46bd      	mov	sp, r7
   81e74:	bc80      	pop	{r7}
   81e76:	4770      	bx	lr

00081e78 <write_spi_adc>:
    gpio_set_pin_low(ADC_RESET);
    for (volatile uint32_t i = 0; i < 500; i++);
}

bool write_spi_adc(uint8_t addr, uint8_t data)
{
   81e78:	b580      	push	{r7, lr}
   81e7a:	b082      	sub	sp, #8
   81e7c:	af00      	add	r7, sp, #0
   81e7e:	4603      	mov	r3, r0
   81e80:	460a      	mov	r2, r1
   81e82:	71fb      	strb	r3, [r7, #7]
   81e84:	4613      	mov	r3, r2
   81e86:	71bb      	strb	r3, [r7, #6]
    gpio_set_pin_low(ADC_SPI_CS);
   81e88:	2003      	movs	r0, #3
   81e8a:	4b12      	ldr	r3, [pc, #72]	; (81ed4 <write_spi_adc+0x5c>)
   81e8c:	4798      	blx	r3

    spi_put(SPI, addr);
   81e8e:	79fb      	ldrb	r3, [r7, #7]
   81e90:	b29b      	uxth	r3, r3
   81e92:	4619      	mov	r1, r3
   81e94:	4810      	ldr	r0, [pc, #64]	; (81ed8 <write_spi_adc+0x60>)
   81e96:	4b11      	ldr	r3, [pc, #68]	; (81edc <write_spi_adc+0x64>)
   81e98:	4798      	blx	r3
    while(!spi_is_tx_empty(SPI));
   81e9a:	bf00      	nop
   81e9c:	480e      	ldr	r0, [pc, #56]	; (81ed8 <write_spi_adc+0x60>)
   81e9e:	4b10      	ldr	r3, [pc, #64]	; (81ee0 <write_spi_adc+0x68>)
   81ea0:	4798      	blx	r3
   81ea2:	4603      	mov	r3, r0
   81ea4:	2b00      	cmp	r3, #0
   81ea6:	d0f9      	beq.n	81e9c <write_spi_adc+0x24>
    spi_put(SPI, data);
   81ea8:	79bb      	ldrb	r3, [r7, #6]
   81eaa:	b29b      	uxth	r3, r3
   81eac:	4619      	mov	r1, r3
   81eae:	480a      	ldr	r0, [pc, #40]	; (81ed8 <write_spi_adc+0x60>)
   81eb0:	4b0a      	ldr	r3, [pc, #40]	; (81edc <write_spi_adc+0x64>)
   81eb2:	4798      	blx	r3
    while(!spi_is_tx_empty(SPI));
   81eb4:	bf00      	nop
   81eb6:	4808      	ldr	r0, [pc, #32]	; (81ed8 <write_spi_adc+0x60>)
   81eb8:	4b09      	ldr	r3, [pc, #36]	; (81ee0 <write_spi_adc+0x68>)
   81eba:	4798      	blx	r3
   81ebc:	4603      	mov	r3, r0
   81ebe:	2b00      	cmp	r3, #0
   81ec0:	d0f9      	beq.n	81eb6 <write_spi_adc+0x3e>

    gpio_set_pin_high(ADC_SPI_CS);
   81ec2:	2003      	movs	r0, #3
   81ec4:	4b07      	ldr	r3, [pc, #28]	; (81ee4 <write_spi_adc+0x6c>)
   81ec6:	4798      	blx	r3

    return true;
   81ec8:	2301      	movs	r3, #1
}
   81eca:	4618      	mov	r0, r3
   81ecc:	3708      	adds	r7, #8
   81ece:	46bd      	mov	sp, r7
   81ed0:	bd80      	pop	{r7, pc}
   81ed2:	bf00      	nop
   81ed4:	0008266d 	.word	0x0008266d
   81ed8:	40008000 	.word	0x40008000
   81edc:	00081e21 	.word	0x00081e21
   81ee0:	00081e55 	.word	0x00081e55
   81ee4:	0008263d 	.word	0x0008263d

00081ee8 <read_spi_adc>:

uint8_t read_spi_adc(uint8_t addr)
{
   81ee8:	b580      	push	{r7, lr}
   81eea:	b084      	sub	sp, #16
   81eec:	af00      	add	r7, sp, #0
   81eee:	4603      	mov	r3, r0
   81ef0:	71fb      	strb	r3, [r7, #7]
    write_spi_adc(0x00, 0x01); //enable read, disable write
   81ef2:	2101      	movs	r1, #1
   81ef4:	2000      	movs	r0, #0
   81ef6:	4b17      	ldr	r3, [pc, #92]	; (81f54 <read_spi_adc+0x6c>)
   81ef8:	4798      	blx	r3
    gpio_set_pin_low(ADC_SPI_CS);
   81efa:	2003      	movs	r0, #3
   81efc:	4b16      	ldr	r3, [pc, #88]	; (81f58 <read_spi_adc+0x70>)
   81efe:	4798      	blx	r3
    spi_put(SPI, addr);
   81f00:	79fb      	ldrb	r3, [r7, #7]
   81f02:	b29b      	uxth	r3, r3
   81f04:	4619      	mov	r1, r3
   81f06:	4815      	ldr	r0, [pc, #84]	; (81f5c <read_spi_adc+0x74>)
   81f08:	4b15      	ldr	r3, [pc, #84]	; (81f60 <read_spi_adc+0x78>)
   81f0a:	4798      	blx	r3
    while(!spi_is_tx_empty(SPI));
   81f0c:	bf00      	nop
   81f0e:	4813      	ldr	r0, [pc, #76]	; (81f5c <read_spi_adc+0x74>)
   81f10:	4b14      	ldr	r3, [pc, #80]	; (81f64 <read_spi_adc+0x7c>)
   81f12:	4798      	blx	r3
   81f14:	4603      	mov	r3, r0
   81f16:	2b00      	cmp	r3, #0
   81f18:	d0f9      	beq.n	81f0e <read_spi_adc+0x26>
    spi_put(SPI, 0x00); //shift data in
   81f1a:	2100      	movs	r1, #0
   81f1c:	480f      	ldr	r0, [pc, #60]	; (81f5c <read_spi_adc+0x74>)
   81f1e:	4b10      	ldr	r3, [pc, #64]	; (81f60 <read_spi_adc+0x78>)
   81f20:	4798      	blx	r3
    while(!spi_is_tx_empty(SPI));
   81f22:	bf00      	nop
   81f24:	480d      	ldr	r0, [pc, #52]	; (81f5c <read_spi_adc+0x74>)
   81f26:	4b0f      	ldr	r3, [pc, #60]	; (81f64 <read_spi_adc+0x7c>)
   81f28:	4798      	blx	r3
   81f2a:	4603      	mov	r3, r0
   81f2c:	2b00      	cmp	r3, #0
   81f2e:	d0f9      	beq.n	81f24 <read_spi_adc+0x3c>

    uint8_t rtn = spi_get(SPI);
   81f30:	480a      	ldr	r0, [pc, #40]	; (81f5c <read_spi_adc+0x74>)
   81f32:	4b0d      	ldr	r3, [pc, #52]	; (81f68 <read_spi_adc+0x80>)
   81f34:	4798      	blx	r3
   81f36:	4603      	mov	r3, r0
   81f38:	73fb      	strb	r3, [r7, #15]
    gpio_set_pin_high(ADC_SPI_CS);
   81f3a:	2003      	movs	r0, #3
   81f3c:	4b0b      	ldr	r3, [pc, #44]	; (81f6c <read_spi_adc+0x84>)
   81f3e:	4798      	blx	r3

    write_spi_adc(0x00, 0x00); //disable read, enable write
   81f40:	2100      	movs	r1, #0
   81f42:	2000      	movs	r0, #0
   81f44:	4b03      	ldr	r3, [pc, #12]	; (81f54 <read_spi_adc+0x6c>)
   81f46:	4798      	blx	r3
    return rtn;
   81f48:	7bfb      	ldrb	r3, [r7, #15]
}
   81f4a:	4618      	mov	r0, r3
   81f4c:	3710      	adds	r7, #16
   81f4e:	46bd      	mov	sp, r7
   81f50:	bd80      	pop	{r7, pc}
   81f52:	bf00      	nop
   81f54:	00081e79 	.word	0x00081e79
   81f58:	0008266d 	.word	0x0008266d
   81f5c:	40008000 	.word	0x40008000
   81f60:	00081e21 	.word	0x00081e21
   81f64:	00081e55 	.word	0x00081e55
   81f68:	00081e3d 	.word	0x00081e3d
   81f6c:	0008263d 	.word	0x0008263d

00081f70 <init_circ_buf>:
    @brief Initializes the circular buffer.

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
   81f70:	b480      	push	{r7}
   81f72:	b083      	sub	sp, #12
   81f74:	af00      	add	r7, sp, #0
   81f76:	6078      	str	r0, [r7, #4]
    cbuf->head = cbuf->tail = 0;
   81f78:	2300      	movs	r3, #0
   81f7a:	687a      	ldr	r2, [r7, #4]
   81f7c:	6053      	str	r3, [r2, #4]
   81f7e:	687a      	ldr	r2, [r7, #4]
   81f80:	6013      	str	r3, [r2, #0]
    cbuf->dropped = 0;
   81f82:	687b      	ldr	r3, [r7, #4]
   81f84:	2200      	movs	r2, #0
   81f86:	609a      	str	r2, [r3, #8]
}
   81f88:	bf00      	nop
   81f8a:	370c      	adds	r7, #12
   81f8c:	46bd      	mov	sp, r7
   81f8e:	bc80      	pop	{r7}
   81f90:	4770      	bx	lr

00081f92 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   81f92:	b480      	push	{r7}
   81f94:	b085      	sub	sp, #20
   81f96:	af00      	add	r7, sp, #0
   81f98:	6078      	str	r0, [r7, #4]
   81f9a:	460b      	mov	r3, r1
   81f9c:	70fb      	strb	r3, [r7, #3]
   81f9e:	4613      	mov	r3, r2
   81fa0:	70bb      	strb	r3, [r7, #2]
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   81fa2:	687b      	ldr	r3, [r7, #4]
   81fa4:	681b      	ldr	r3, [r3, #0]
   81fa6:	60fb      	str	r3, [r7, #12]
    newhead++;
   81fa8:	68fb      	ldr	r3, [r7, #12]
   81faa:	3301      	adds	r3, #1
   81fac:	60fb      	str	r3, [r7, #12]
    if (newhead >= CIRCBUFSIZE)
   81fae:	68fb      	ldr	r3, [r7, #12]
   81fb0:	2b7f      	cmp	r3, #127	; 0x7f
   81fb2:	d90e      	bls.n	81fd2 <add_to_circ_buf+0x40>
        newhead = 0;
   81fb4:	2300      	movs	r3, #0
   81fb6:	60fb      	str	r3, [r7, #12]
    while (newhead == cbuf->tail)
   81fb8:	e00b      	b.n	81fd2 <add_to_circ_buf+0x40>
    {
        if (!block)
   81fba:	78bb      	ldrb	r3, [r7, #2]
   81fbc:	f083 0301 	eor.w	r3, r3, #1
   81fc0:	b2db      	uxtb	r3, r3
   81fc2:	2b00      	cmp	r3, #0
   81fc4:	d005      	beq.n	81fd2 <add_to_circ_buf+0x40>
        {
            cbuf->dropped++;
   81fc6:	687b      	ldr	r3, [r7, #4]
   81fc8:	689b      	ldr	r3, [r3, #8]
   81fca:	1c5a      	adds	r2, r3, #1
   81fcc:	687b      	ldr	r3, [r7, #4]
   81fce:	609a      	str	r2, [r3, #8]
            return;
   81fd0:	e00d      	b.n	81fee <add_to_circ_buf+0x5c>
    while (newhead == cbuf->tail)
   81fd2:	687b      	ldr	r3, [r7, #4]
   81fd4:	685b      	ldr	r3, [r3, #4]
   81fd6:	68fa      	ldr	r2, [r7, #12]
   81fd8:	429a      	cmp	r2, r3
   81fda:	d0ee      	beq.n	81fba <add_to_circ_buf+0x28>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   81fdc:	687b      	ldr	r3, [r7, #4]
   81fde:	681b      	ldr	r3, [r3, #0]
   81fe0:	687a      	ldr	r2, [r7, #4]
   81fe2:	4413      	add	r3, r2
   81fe4:	78fa      	ldrb	r2, [r7, #3]
   81fe6:	731a      	strb	r2, [r3, #12]
    cbuf->head = newhead;
   81fe8:	687b      	ldr	r3, [r7, #4]
   81fea:	68fa      	ldr	r2, [r7, #12]
   81fec:	601a      	str	r2, [r3, #0]
}
   81fee:	3714      	adds	r7, #20
   81ff0:	46bd      	mov	sp, r7
   81ff2:	bc80      	pop	{r7}
   81ff4:	4770      	bx	lr

00081ff6 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   81ff6:	b480      	push	{r7}
   81ff8:	b085      	sub	sp, #20
   81ffa:	af00      	add	r7, sp, #0
   81ffc:	6078      	str	r0, [r7, #4]
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   81ffe:	687b      	ldr	r3, [r7, #4]
   82000:	685b      	ldr	r3, [r3, #4]
   82002:	60fb      	str	r3, [r7, #12]
    uint8_t retval = cbuf->buf[newtail];
   82004:	687a      	ldr	r2, [r7, #4]
   82006:	68fb      	ldr	r3, [r7, #12]
   82008:	4413      	add	r3, r2
   8200a:	330c      	adds	r3, #12
   8200c:	781b      	ldrb	r3, [r3, #0]
   8200e:	72fb      	strb	r3, [r7, #11]

    if (newtail == cbuf->head)
   82010:	687b      	ldr	r3, [r7, #4]
   82012:	681b      	ldr	r3, [r3, #0]
   82014:	68fa      	ldr	r2, [r7, #12]
   82016:	429a      	cmp	r2, r3
   82018:	d101      	bne.n	8201e <get_from_circ_buf+0x28>
        return SERIAL_ERR;
   8201a:	23ff      	movs	r3, #255	; 0xff
   8201c:	e00b      	b.n	82036 <get_from_circ_buf+0x40>

    newtail++;
   8201e:	68fb      	ldr	r3, [r7, #12]
   82020:	3301      	adds	r3, #1
   82022:	60fb      	str	r3, [r7, #12]
    if (newtail >= CIRCBUFSIZE)
   82024:	68fb      	ldr	r3, [r7, #12]
   82026:	2b7f      	cmp	r3, #127	; 0x7f
   82028:	d901      	bls.n	8202e <get_from_circ_buf+0x38>
        // Rollover
        newtail = 0;
   8202a:	2300      	movs	r3, #0
   8202c:	60fb      	str	r3, [r7, #12]
    cbuf->tail = newtail;
   8202e:	687b      	ldr	r3, [r7, #4]
   82030:	68fa      	ldr	r2, [r7, #12]
   82032:	605a      	str	r2, [r3, #4]

    return retval;
   82034:	7afb      	ldrb	r3, [r7, #11]
}
   82036:	4618      	mov	r0, r3
   82038:	3714      	adds	r7, #20
   8203a:	46bd      	mov	sp, r7
   8203c:	bc80      	pop	{r7}
   8203e:	4770      	bx	lr

00082040 <circ_buf_has_char>:

    @retval true if buffer contains data.
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
   82040:	b480      	push	{r7}
   82042:	b085      	sub	sp, #20
   82044:	af00      	add	r7, sp, #0
   82046:	6078      	str	r0, [r7, #4]
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   82048:	687b      	ldr	r3, [r7, #4]
   8204a:	681b      	ldr	r3, [r3, #0]
   8204c:	60fb      	str	r3, [r7, #12]
    return (head != cbuf->tail);
   8204e:	687b      	ldr	r3, [r7, #4]
   82050:	685b      	ldr	r3, [r3, #4]
   82052:	68fa      	ldr	r2, [r7, #12]
   82054:	429a      	cmp	r2, r3
   82056:	bf14      	ite	ne
   82058:	2301      	movne	r3, #1
   8205a:	2300      	moveq	r3, #0
   8205c:	b2db      	uxtb	r3, r3
}
   8205e:	4618      	mov	r0, r3
   82060:	3714      	adds	r7, #20
   82062:	46bd      	mov	sp, r7
   82064:	bc80      	pop	{r7}
   82066:	4770      	bx	lr

00082068 <circ_buf_count>:
   @param cbuf is the circular buffer to query

   @return count Number of chars in buffer.
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
   82068:	b480      	push	{r7}
   8206a:	b085      	sub	sp, #20
   8206c:	af00      	add	r7, sp, #0
   8206e:	6078      	str	r0, [r7, #4]
    int count;

    count = cbuf->head;
   82070:	687b      	ldr	r3, [r7, #4]
   82072:	681b      	ldr	r3, [r3, #0]
   82074:	60fb      	str	r3, [r7, #12]
    count -= cbuf->tail;
   82076:	687b      	ldr	r3, [r7, #4]
   82078:	685b      	ldr	r3, [r3, #4]
   8207a:	68fa      	ldr	r2, [r7, #12]
   8207c:	1ad3      	subs	r3, r2, r3
   8207e:	60fb      	str	r3, [r7, #12]
    if (count < 0)
   82080:	68fb      	ldr	r3, [r7, #12]
   82082:	2b00      	cmp	r3, #0
   82084:	da02      	bge.n	8208c <circ_buf_count+0x24>
        count += CIRCBUFSIZE;
   82086:	68fb      	ldr	r3, [r7, #12]
   82088:	3380      	adds	r3, #128	; 0x80
   8208a:	60fb      	str	r3, [r7, #12]
    return (unsigned int)count;
   8208c:	68fb      	ldr	r3, [r7, #12]
}
   8208e:	4618      	mov	r0, r3
   82090:	3714      	adds	r7, #20
   82092:	46bd      	mov	sp, r7
   82094:	bc80      	pop	{r7}
   82096:	4770      	bx	lr

00082098 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   82098:	b480      	push	{r7}
   8209a:	b083      	sub	sp, #12
   8209c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8209e:	f3ef 8310 	mrs	r3, PRIMASK
   820a2:	603b      	str	r3, [r7, #0]
  return(result);
   820a4:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   820a6:	2b00      	cmp	r3, #0
   820a8:	bf0c      	ite	eq
   820aa:	2301      	moveq	r3, #1
   820ac:	2300      	movne	r3, #0
   820ae:	b2db      	uxtb	r3, r3
   820b0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   820b2:	b672      	cpsid	i
}
   820b4:	bf00      	nop
  __ASM volatile ("dmb");
   820b6:	f3bf 8f5f 	dmb	sy
}
   820ba:	bf00      	nop
	cpu_irq_disable();
   820bc:	4b04      	ldr	r3, [pc, #16]	; (820d0 <cpu_irq_save+0x38>)
   820be:	2200      	movs	r2, #0
   820c0:	701a      	strb	r2, [r3, #0]
	return flags;
   820c2:	687b      	ldr	r3, [r7, #4]
}
   820c4:	4618      	mov	r0, r3
   820c6:	370c      	adds	r7, #12
   820c8:	46bd      	mov	sp, r7
   820ca:	bc80      	pop	{r7}
   820cc:	4770      	bx	lr
   820ce:	bf00      	nop
   820d0:	20000284 	.word	0x20000284

000820d4 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   820d4:	b480      	push	{r7}
   820d6:	b083      	sub	sp, #12
   820d8:	af00      	add	r7, sp, #0
   820da:	6078      	str	r0, [r7, #4]
	return (flags);
   820dc:	687b      	ldr	r3, [r7, #4]
   820de:	2b00      	cmp	r3, #0
   820e0:	bf14      	ite	ne
   820e2:	2301      	movne	r3, #1
   820e4:	2300      	moveq	r3, #0
   820e6:	b2db      	uxtb	r3, r3
}
   820e8:	4618      	mov	r0, r3
   820ea:	370c      	adds	r7, #12
   820ec:	46bd      	mov	sp, r7
   820ee:	bc80      	pop	{r7}
   820f0:	4770      	bx	lr
   820f2:	0000      	movs	r0, r0

000820f4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   820f4:	b580      	push	{r7, lr}
   820f6:	b082      	sub	sp, #8
   820f8:	af00      	add	r7, sp, #0
   820fa:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   820fc:	6878      	ldr	r0, [r7, #4]
   820fe:	4b08      	ldr	r3, [pc, #32]	; (82120 <cpu_irq_restore+0x2c>)
   82100:	4798      	blx	r3
   82102:	4603      	mov	r3, r0
   82104:	2b00      	cmp	r3, #0
   82106:	d007      	beq.n	82118 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   82108:	4b06      	ldr	r3, [pc, #24]	; (82124 <cpu_irq_restore+0x30>)
   8210a:	2201      	movs	r2, #1
   8210c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8210e:	f3bf 8f5f 	dmb	sy
}
   82112:	bf00      	nop
  __ASM volatile ("cpsie i");
   82114:	b662      	cpsie	i
}
   82116:	bf00      	nop
}
   82118:	bf00      	nop
   8211a:	3708      	adds	r7, #8
   8211c:	46bd      	mov	sp, r7
   8211e:	bd80      	pop	{r7, pc}
   82120:	000820d5 	.word	0x000820d5
   82124:	20000284 	.word	0x20000284

00082128 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   82128:	b580      	push	{r7, lr}
   8212a:	b086      	sub	sp, #24
   8212c:	af00      	add	r7, sp, #0
   8212e:	60f8      	str	r0, [r7, #12]
   82130:	60b9      	str	r1, [r7, #8]
   82132:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   82134:	68bb      	ldr	r3, [r7, #8]
   82136:	2b0e      	cmp	r3, #14
   82138:	d002      	beq.n	82140 <efc_perform_command+0x18>
   8213a:	68bb      	ldr	r3, [r7, #8]
   8213c:	2b0f      	cmp	r3, #15
   8213e:	d102      	bne.n	82146 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   82140:	f04f 33ff 	mov.w	r3, #4294967295
   82144:	e016      	b.n	82174 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   82146:	4b0d      	ldr	r3, [pc, #52]	; (8217c <efc_perform_command+0x54>)
   82148:	4798      	blx	r3
   8214a:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   8214c:	687b      	ldr	r3, [r7, #4]
   8214e:	021b      	lsls	r3, r3, #8
   82150:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   82154:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   82158:	68ba      	ldr	r2, [r7, #8]
   8215a:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   8215c:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   8215e:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   82162:	4619      	mov	r1, r3
   82164:	68f8      	ldr	r0, [r7, #12]
   82166:	4b06      	ldr	r3, [pc, #24]	; (82180 <efc_perform_command+0x58>)
   82168:	4798      	blx	r3
   8216a:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   8216c:	6978      	ldr	r0, [r7, #20]
   8216e:	4b05      	ldr	r3, [pc, #20]	; (82184 <efc_perform_command+0x5c>)
   82170:	4798      	blx	r3
	return result;
   82172:	693b      	ldr	r3, [r7, #16]
}
   82174:	4618      	mov	r0, r3
   82176:	3718      	adds	r7, #24
   82178:	46bd      	mov	sp, r7
   8217a:	bd80      	pop	{r7, pc}
   8217c:	00082099 	.word	0x00082099
   82180:	200000bd 	.word	0x200000bd
   82184:	000820f5 	.word	0x000820f5

00082188 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82188:	b480      	push	{r7}
   8218a:	af00      	add	r7, sp, #0
	while (1) {
   8218c:	e7fe      	b.n	8218c <Dummy_Handler+0x4>
   8218e:	0000      	movs	r0, r0

00082190 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82190:	b590      	push	{r4, r7, lr}
   82192:	b08b      	sub	sp, #44	; 0x2c
   82194:	af02      	add	r7, sp, #8
   82196:	6078      	str	r0, [r7, #4]
   82198:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   8219a:	f107 030c 	add.w	r3, r7, #12
   8219e:	2204      	movs	r2, #4
   821a0:	9200      	str	r2, [sp, #0]
   821a2:	220f      	movs	r2, #15
   821a4:	210e      	movs	r1, #14
   821a6:	4814      	ldr	r0, [pc, #80]	; (821f8 <flash_read_unique_id+0x68>)
   821a8:	4c14      	ldr	r4, [pc, #80]	; (821fc <flash_read_unique_id+0x6c>)
   821aa:	47a0      	blx	r4
   821ac:	4603      	mov	r3, r0
   821ae:	2b00      	cmp	r3, #0
   821b0:	d001      	beq.n	821b6 <flash_read_unique_id+0x26>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   821b2:	2310      	movs	r3, #16
   821b4:	e01b      	b.n	821ee <flash_read_unique_id+0x5e>
	}

	if (ul_size > 4) {
   821b6:	683b      	ldr	r3, [r7, #0]
   821b8:	2b04      	cmp	r3, #4
   821ba:	d901      	bls.n	821c0 <flash_read_unique_id+0x30>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   821bc:	2304      	movs	r3, #4
   821be:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   821c0:	2300      	movs	r3, #0
   821c2:	61fb      	str	r3, [r7, #28]
   821c4:	e00e      	b.n	821e4 <flash_read_unique_id+0x54>
		pul_data[ul_idx] = uid_buf[ul_idx];
   821c6:	69fb      	ldr	r3, [r7, #28]
   821c8:	009b      	lsls	r3, r3, #2
   821ca:	687a      	ldr	r2, [r7, #4]
   821cc:	441a      	add	r2, r3
   821ce:	69fb      	ldr	r3, [r7, #28]
   821d0:	009b      	lsls	r3, r3, #2
   821d2:	f107 0120 	add.w	r1, r7, #32
   821d6:	440b      	add	r3, r1
   821d8:	f853 3c14 	ldr.w	r3, [r3, #-20]
   821dc:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   821de:	69fb      	ldr	r3, [r7, #28]
   821e0:	3301      	adds	r3, #1
   821e2:	61fb      	str	r3, [r7, #28]
   821e4:	69fa      	ldr	r2, [r7, #28]
   821e6:	683b      	ldr	r3, [r7, #0]
   821e8:	429a      	cmp	r2, r3
   821ea:	d3ec      	bcc.n	821c6 <flash_read_unique_id+0x36>
	}

	return FLASH_RC_OK;
   821ec:	2300      	movs	r3, #0
}
   821ee:	4618      	mov	r0, r3
   821f0:	3724      	adds	r7, #36	; 0x24
   821f2:	46bd      	mov	sp, r7
   821f4:	bd90      	pop	{r4, r7, pc}
   821f6:	bf00      	nop
   821f8:	400e0800 	.word	0x400e0800
   821fc:	20000001 	.word	0x20000001

00082200 <sysclk_enable_peripheral_clock>:
{
   82200:	b580      	push	{r7, lr}
   82202:	b082      	sub	sp, #8
   82204:	af00      	add	r7, sp, #0
   82206:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82208:	6878      	ldr	r0, [r7, #4]
   8220a:	4b03      	ldr	r3, [pc, #12]	; (82218 <sysclk_enable_peripheral_clock+0x18>)
   8220c:	4798      	blx	r3
}
   8220e:	bf00      	nop
   82210:	3708      	adds	r7, #8
   82212:	46bd      	mov	sp, r7
   82214:	bd80      	pop	{r7, pc}
   82216:	bf00      	nop
   82218:	00082d01 	.word	0x00082d01

0008221c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   8221c:	b580      	push	{r7, lr}
   8221e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   82220:	200a      	movs	r0, #10
   82222:	4b04      	ldr	r3, [pc, #16]	; (82234 <ioport_init+0x18>)
   82224:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   82226:	200b      	movs	r0, #11
   82228:	4b02      	ldr	r3, [pc, #8]	; (82234 <ioport_init+0x18>)
   8222a:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
#endif
#ifdef ID_PIOF
	sysclk_enable_peripheral_clock(ID_PIOF);
#endif
}
   8222c:	bf00      	nop
	arch_ioport_init();
}
   8222e:	bf00      	nop
   82230:	bd80      	pop	{r7, pc}
   82232:	bf00      	nop
   82234:	00082201 	.word	0x00082201

00082238 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   82238:	b580      	push	{r7, lr}
   8223a:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8223c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82240:	201d      	movs	r0, #29
   82242:	4b0d      	ldr	r3, [pc, #52]	; (82278 <iopins_normal+0x40>)
   82244:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82246:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8224a:	201f      	movs	r0, #31
   8224c:	4b0a      	ldr	r3, [pc, #40]	; (82278 <iopins_normal+0x40>)
   8224e:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   82250:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82254:	201d      	movs	r0, #29
   82256:	4b08      	ldr	r3, [pc, #32]	; (82278 <iopins_normal+0x40>)
   82258:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8225a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8225e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   82262:	4806      	ldr	r0, [pc, #24]	; (8227c <iopins_normal+0x44>)
   82264:	4b06      	ldr	r3, [pc, #24]	; (82280 <iopins_normal+0x48>)
   82266:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   82268:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8226c:	2038      	movs	r0, #56	; 0x38
   8226e:	4b02      	ldr	r3, [pc, #8]	; (82278 <iopins_normal+0x40>)
   82270:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   82272:	bf00      	nop
   82274:	bd80      	pop	{r7, pc}
   82276:	bf00      	nop
   82278:	0008269d 	.word	0x0008269d
   8227c:	400e0c00 	.word	0x400e0c00
   82280:	000827cd 	.word	0x000827cd

00082284 <board_init>:

void board_init(void)
{
   82284:	b580      	push	{r7, lr}
   82286:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82288:	4b04      	ldr	r3, [pc, #16]	; (8229c <board_init+0x18>)
   8228a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8228e:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   82290:	4b03      	ldr	r3, [pc, #12]	; (822a0 <board_init+0x1c>)
   82292:	4798      	blx	r3

	iopins_normal();
   82294:	4b03      	ldr	r3, [pc, #12]	; (822a4 <board_init+0x20>)
   82296:	4798      	blx	r3

}
   82298:	bf00      	nop
   8229a:	bd80      	pop	{r7, pc}
   8229c:	400e1250 	.word	0x400e1250
   822a0:	0008221d 	.word	0x0008221d
   822a4:	00082239 	.word	0x00082239

000822a8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   822a8:	b480      	push	{r7}
   822aa:	b083      	sub	sp, #12
   822ac:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   822ae:	4b11      	ldr	r3, [pc, #68]	; (822f4 <cpu_irq_enter_critical+0x4c>)
   822b0:	681b      	ldr	r3, [r3, #0]
   822b2:	2b00      	cmp	r3, #0
   822b4:	d114      	bne.n	822e0 <cpu_irq_enter_critical+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   822b6:	f3ef 8310 	mrs	r3, PRIMASK
   822ba:	607b      	str	r3, [r7, #4]
  return(result);
   822bc:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   822be:	2b00      	cmp	r3, #0
   822c0:	d10b      	bne.n	822da <cpu_irq_enter_critical+0x32>
  __ASM volatile ("cpsid i");
   822c2:	b672      	cpsid	i
}
   822c4:	bf00      	nop
  __ASM volatile ("dmb");
   822c6:	f3bf 8f5f 	dmb	sy
}
   822ca:	bf00      	nop
			cpu_irq_disable();
   822cc:	4b0a      	ldr	r3, [pc, #40]	; (822f8 <cpu_irq_enter_critical+0x50>)
   822ce:	2200      	movs	r2, #0
   822d0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   822d2:	4b0a      	ldr	r3, [pc, #40]	; (822fc <cpu_irq_enter_critical+0x54>)
   822d4:	2201      	movs	r2, #1
   822d6:	701a      	strb	r2, [r3, #0]
   822d8:	e002      	b.n	822e0 <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   822da:	4b08      	ldr	r3, [pc, #32]	; (822fc <cpu_irq_enter_critical+0x54>)
   822dc:	2200      	movs	r2, #0
   822de:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   822e0:	4b04      	ldr	r3, [pc, #16]	; (822f4 <cpu_irq_enter_critical+0x4c>)
   822e2:	681b      	ldr	r3, [r3, #0]
   822e4:	3301      	adds	r3, #1
   822e6:	4a03      	ldr	r2, [pc, #12]	; (822f4 <cpu_irq_enter_critical+0x4c>)
   822e8:	6013      	str	r3, [r2, #0]
}
   822ea:	bf00      	nop
   822ec:	370c      	adds	r7, #12
   822ee:	46bd      	mov	sp, r7
   822f0:	bc80      	pop	{r7}
   822f2:	4770      	bx	lr
   822f4:	200012b0 	.word	0x200012b0
   822f8:	20000284 	.word	0x20000284
   822fc:	200012b4 	.word	0x200012b4

00082300 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   82300:	b480      	push	{r7}
   82302:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   82304:	4b0c      	ldr	r3, [pc, #48]	; (82338 <cpu_irq_leave_critical+0x38>)
   82306:	681b      	ldr	r3, [r3, #0]
   82308:	3b01      	subs	r3, #1
   8230a:	4a0b      	ldr	r2, [pc, #44]	; (82338 <cpu_irq_leave_critical+0x38>)
   8230c:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   8230e:	4b0a      	ldr	r3, [pc, #40]	; (82338 <cpu_irq_leave_critical+0x38>)
   82310:	681b      	ldr	r3, [r3, #0]
   82312:	2b00      	cmp	r3, #0
   82314:	d10c      	bne.n	82330 <cpu_irq_leave_critical+0x30>
   82316:	4b09      	ldr	r3, [pc, #36]	; (8233c <cpu_irq_leave_critical+0x3c>)
   82318:	781b      	ldrb	r3, [r3, #0]
   8231a:	b2db      	uxtb	r3, r3
   8231c:	2b00      	cmp	r3, #0
   8231e:	d007      	beq.n	82330 <cpu_irq_leave_critical+0x30>
		cpu_irq_enable();
   82320:	4b07      	ldr	r3, [pc, #28]	; (82340 <cpu_irq_leave_critical+0x40>)
   82322:	2201      	movs	r2, #1
   82324:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82326:	f3bf 8f5f 	dmb	sy
}
   8232a:	bf00      	nop
  __ASM volatile ("cpsie i");
   8232c:	b662      	cpsie	i
}
   8232e:	bf00      	nop
	}
}
   82330:	bf00      	nop
   82332:	46bd      	mov	sp, r7
   82334:	bc80      	pop	{r7}
   82336:	4770      	bx	lr
   82338:	200012b0 	.word	0x200012b0
   8233c:	200012b4 	.word	0x200012b4
   82340:	20000284 	.word	0x20000284

00082344 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   82344:	b580      	push	{r7, lr}
   82346:	b084      	sub	sp, #16
   82348:	af00      	add	r7, sp, #0
   8234a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8234c:	2300      	movs	r3, #0
   8234e:	60fb      	str	r3, [r7, #12]
   82350:	e017      	b.n	82382 <LED_Off+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   82352:	4a10      	ldr	r2, [pc, #64]	; (82394 <LED_Off+0x50>)
   82354:	68fb      	ldr	r3, [r7, #12]
   82356:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   8235a:	687a      	ldr	r2, [r7, #4]
   8235c:	429a      	cmp	r2, r3
   8235e:	d10d      	bne.n	8237c <LED_Off+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   82360:	4a0c      	ldr	r2, [pc, #48]	; (82394 <LED_Off+0x50>)
   82362:	68fb      	ldr	r3, [r7, #12]
   82364:	00db      	lsls	r3, r3, #3
   82366:	4413      	add	r3, r2
   82368:	685b      	ldr	r3, [r3, #4]
   8236a:	2b01      	cmp	r3, #1
   8236c:	d103      	bne.n	82376 <LED_Off+0x32>
				gpio_set_pin_low(led_gpio);
   8236e:	6878      	ldr	r0, [r7, #4]
   82370:	4b09      	ldr	r3, [pc, #36]	; (82398 <LED_Off+0x54>)
   82372:	4798      	blx	r3
   82374:	e002      	b.n	8237c <LED_Off+0x38>
			} else {
				gpio_set_pin_high(led_gpio);
   82376:	6878      	ldr	r0, [r7, #4]
   82378:	4b08      	ldr	r3, [pc, #32]	; (8239c <LED_Off+0x58>)
   8237a:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   8237c:	68fb      	ldr	r3, [r7, #12]
   8237e:	3301      	adds	r3, #1
   82380:	60fb      	str	r3, [r7, #12]
   82382:	68fb      	ldr	r3, [r7, #12]
   82384:	2b01      	cmp	r3, #1
   82386:	d9e4      	bls.n	82352 <LED_Off+0xe>
			}
		}
	}
}
   82388:	bf00      	nop
   8238a:	bf00      	nop
   8238c:	3710      	adds	r7, #16
   8238e:	46bd      	mov	sp, r7
   82390:	bd80      	pop	{r7, pc}
   82392:	bf00      	nop
   82394:	0008d9c8 	.word	0x0008d9c8
   82398:	0008266d 	.word	0x0008266d
   8239c:	0008263d 	.word	0x0008263d

000823a0 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   823a0:	b580      	push	{r7, lr}
   823a2:	b084      	sub	sp, #16
   823a4:	af00      	add	r7, sp, #0
   823a6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   823a8:	2300      	movs	r3, #0
   823aa:	60fb      	str	r3, [r7, #12]
   823ac:	e017      	b.n	823de <LED_On+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   823ae:	4a10      	ldr	r2, [pc, #64]	; (823f0 <LED_On+0x50>)
   823b0:	68fb      	ldr	r3, [r7, #12]
   823b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   823b6:	687a      	ldr	r2, [r7, #4]
   823b8:	429a      	cmp	r2, r3
   823ba:	d10d      	bne.n	823d8 <LED_On+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   823bc:	4a0c      	ldr	r2, [pc, #48]	; (823f0 <LED_On+0x50>)
   823be:	68fb      	ldr	r3, [r7, #12]
   823c0:	00db      	lsls	r3, r3, #3
   823c2:	4413      	add	r3, r2
   823c4:	685b      	ldr	r3, [r3, #4]
   823c6:	2b01      	cmp	r3, #1
   823c8:	d103      	bne.n	823d2 <LED_On+0x32>
				gpio_set_pin_high(led_gpio);
   823ca:	6878      	ldr	r0, [r7, #4]
   823cc:	4b09      	ldr	r3, [pc, #36]	; (823f4 <LED_On+0x54>)
   823ce:	4798      	blx	r3
   823d0:	e002      	b.n	823d8 <LED_On+0x38>
			} else {
				gpio_set_pin_low(led_gpio);
   823d2:	6878      	ldr	r0, [r7, #4]
   823d4:	4b08      	ldr	r3, [pc, #32]	; (823f8 <LED_On+0x58>)
   823d6:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   823d8:	68fb      	ldr	r3, [r7, #12]
   823da:	3301      	adds	r3, #1
   823dc:	60fb      	str	r3, [r7, #12]
   823de:	68fb      	ldr	r3, [r7, #12]
   823e0:	2b01      	cmp	r3, #1
   823e2:	d9e4      	bls.n	823ae <LED_On+0xe>
			}
		}
	}
}
   823e4:	bf00      	nop
   823e6:	bf00      	nop
   823e8:	3710      	adds	r7, #16
   823ea:	46bd      	mov	sp, r7
   823ec:	bd80      	pop	{r7, pc}
   823ee:	bf00      	nop
   823f0:	0008d9c8 	.word	0x0008d9c8
   823f4:	0008263d 	.word	0x0008263d
   823f8:	0008266d 	.word	0x0008266d

000823fc <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   823fc:	b480      	push	{r7}
   823fe:	b085      	sub	sp, #20
   82400:	af00      	add	r7, sp, #0
   82402:	60f8      	str	r0, [r7, #12]
   82404:	60b9      	str	r1, [r7, #8]
   82406:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82408:	687b      	ldr	r3, [r7, #4]
   8240a:	2b00      	cmp	r3, #0
   8240c:	d003      	beq.n	82416 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   8240e:	68fb      	ldr	r3, [r7, #12]
   82410:	68ba      	ldr	r2, [r7, #8]
   82412:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   82414:	e002      	b.n	8241c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   82416:	68fb      	ldr	r3, [r7, #12]
   82418:	68ba      	ldr	r2, [r7, #8]
   8241a:	661a      	str	r2, [r3, #96]	; 0x60
}
   8241c:	bf00      	nop
   8241e:	3714      	adds	r7, #20
   82420:	46bd      	mov	sp, r7
   82422:	bc80      	pop	{r7}
   82424:	4770      	bx	lr

00082426 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   82426:	b480      	push	{r7}
   82428:	b087      	sub	sp, #28
   8242a:	af00      	add	r7, sp, #0
   8242c:	60f8      	str	r0, [r7, #12]
   8242e:	60b9      	str	r1, [r7, #8]
   82430:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82432:	68fb      	ldr	r3, [r7, #12]
   82434:	687a      	ldr	r2, [r7, #4]
   82436:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82438:	68bb      	ldr	r3, [r7, #8]
   8243a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8243e:	d03c      	beq.n	824ba <pio_set_peripheral+0x94>
   82440:	68bb      	ldr	r3, [r7, #8]
   82442:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82446:	d834      	bhi.n	824b2 <pio_set_peripheral+0x8c>
   82448:	68bb      	ldr	r3, [r7, #8]
   8244a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8244e:	d034      	beq.n	824ba <pio_set_peripheral+0x94>
   82450:	68bb      	ldr	r3, [r7, #8]
   82452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82456:	d82c      	bhi.n	824b2 <pio_set_peripheral+0x8c>
   82458:	68bb      	ldr	r3, [r7, #8]
   8245a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8245e:	d02c      	beq.n	824ba <pio_set_peripheral+0x94>
   82460:	68bb      	ldr	r3, [r7, #8]
   82462:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82466:	d824      	bhi.n	824b2 <pio_set_peripheral+0x8c>
   82468:	68bb      	ldr	r3, [r7, #8]
   8246a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8246e:	d017      	beq.n	824a0 <pio_set_peripheral+0x7a>
   82470:	68bb      	ldr	r3, [r7, #8]
   82472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82476:	d81c      	bhi.n	824b2 <pio_set_peripheral+0x8c>
   82478:	68bb      	ldr	r3, [r7, #8]
   8247a:	2b00      	cmp	r3, #0
   8247c:	d01d      	beq.n	824ba <pio_set_peripheral+0x94>
   8247e:	68bb      	ldr	r3, [r7, #8]
   82480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82484:	d115      	bne.n	824b2 <pio_set_peripheral+0x8c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82486:	68fb      	ldr	r3, [r7, #12]
   82488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8248a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8248c:	68fb      	ldr	r3, [r7, #12]
   8248e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82490:	687b      	ldr	r3, [r7, #4]
   82492:	43d9      	mvns	r1, r3
   82494:	697b      	ldr	r3, [r7, #20]
   82496:	400b      	ands	r3, r1
   82498:	401a      	ands	r2, r3
   8249a:	68fb      	ldr	r3, [r7, #12]
   8249c:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   8249e:	e008      	b.n	824b2 <pio_set_peripheral+0x8c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   824a0:	68fb      	ldr	r3, [r7, #12]
   824a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   824a4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   824a6:	687a      	ldr	r2, [r7, #4]
   824a8:	697b      	ldr	r3, [r7, #20]
   824aa:	431a      	orrs	r2, r3
   824ac:	68fb      	ldr	r3, [r7, #12]
   824ae:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   824b0:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   824b2:	68fb      	ldr	r3, [r7, #12]
   824b4:	687a      	ldr	r2, [r7, #4]
   824b6:	605a      	str	r2, [r3, #4]
   824b8:	e000      	b.n	824bc <pio_set_peripheral+0x96>
		return;
   824ba:	bf00      	nop
}
   824bc:	371c      	adds	r7, #28
   824be:	46bd      	mov	sp, r7
   824c0:	bc80      	pop	{r7}
   824c2:	4770      	bx	lr

000824c4 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   824c4:	b580      	push	{r7, lr}
   824c6:	b084      	sub	sp, #16
   824c8:	af00      	add	r7, sp, #0
   824ca:	60f8      	str	r0, [r7, #12]
   824cc:	60b9      	str	r1, [r7, #8]
   824ce:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   824d0:	68b9      	ldr	r1, [r7, #8]
   824d2:	68f8      	ldr	r0, [r7, #12]
   824d4:	4b19      	ldr	r3, [pc, #100]	; (8253c <pio_set_input+0x78>)
   824d6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   824d8:	687b      	ldr	r3, [r7, #4]
   824da:	f003 0301 	and.w	r3, r3, #1
   824de:	461a      	mov	r2, r3
   824e0:	68b9      	ldr	r1, [r7, #8]
   824e2:	68f8      	ldr	r0, [r7, #12]
   824e4:	4b16      	ldr	r3, [pc, #88]	; (82540 <pio_set_input+0x7c>)
   824e6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   824e8:	687b      	ldr	r3, [r7, #4]
   824ea:	f003 030a 	and.w	r3, r3, #10
   824ee:	2b00      	cmp	r3, #0
   824f0:	d003      	beq.n	824fa <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   824f2:	68fb      	ldr	r3, [r7, #12]
   824f4:	68ba      	ldr	r2, [r7, #8]
   824f6:	621a      	str	r2, [r3, #32]
   824f8:	e002      	b.n	82500 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   824fa:	68fb      	ldr	r3, [r7, #12]
   824fc:	68ba      	ldr	r2, [r7, #8]
   824fe:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82500:	687b      	ldr	r3, [r7, #4]
   82502:	f003 0302 	and.w	r3, r3, #2
   82506:	2b00      	cmp	r3, #0
   82508:	d004      	beq.n	82514 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   8250a:	68fb      	ldr	r3, [r7, #12]
   8250c:	68ba      	ldr	r2, [r7, #8]
   8250e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82512:	e008      	b.n	82526 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82514:	687b      	ldr	r3, [r7, #4]
   82516:	f003 0308 	and.w	r3, r3, #8
   8251a:	2b00      	cmp	r3, #0
   8251c:	d003      	beq.n	82526 <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   8251e:	68fb      	ldr	r3, [r7, #12]
   82520:	68ba      	ldr	r2, [r7, #8]
   82522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82526:	68fb      	ldr	r3, [r7, #12]
   82528:	68ba      	ldr	r2, [r7, #8]
   8252a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   8252c:	68fb      	ldr	r3, [r7, #12]
   8252e:	68ba      	ldr	r2, [r7, #8]
   82530:	601a      	str	r2, [r3, #0]
}
   82532:	bf00      	nop
   82534:	3710      	adds	r7, #16
   82536:	46bd      	mov	sp, r7
   82538:	bd80      	pop	{r7, pc}
   8253a:	bf00      	nop
   8253c:	000825c5 	.word	0x000825c5
   82540:	000823fd 	.word	0x000823fd

00082544 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82544:	b580      	push	{r7, lr}
   82546:	b084      	sub	sp, #16
   82548:	af00      	add	r7, sp, #0
   8254a:	60f8      	str	r0, [r7, #12]
   8254c:	60b9      	str	r1, [r7, #8]
   8254e:	607a      	str	r2, [r7, #4]
   82550:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   82552:	68b9      	ldr	r1, [r7, #8]
   82554:	68f8      	ldr	r0, [r7, #12]
   82556:	4b12      	ldr	r3, [pc, #72]	; (825a0 <pio_set_output+0x5c>)
   82558:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   8255a:	69ba      	ldr	r2, [r7, #24]
   8255c:	68b9      	ldr	r1, [r7, #8]
   8255e:	68f8      	ldr	r0, [r7, #12]
   82560:	4b10      	ldr	r3, [pc, #64]	; (825a4 <pio_set_output+0x60>)
   82562:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82564:	683b      	ldr	r3, [r7, #0]
   82566:	2b00      	cmp	r3, #0
   82568:	d003      	beq.n	82572 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   8256a:	68fb      	ldr	r3, [r7, #12]
   8256c:	68ba      	ldr	r2, [r7, #8]
   8256e:	651a      	str	r2, [r3, #80]	; 0x50
   82570:	e002      	b.n	82578 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82572:	68fb      	ldr	r3, [r7, #12]
   82574:	68ba      	ldr	r2, [r7, #8]
   82576:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82578:	687b      	ldr	r3, [r7, #4]
   8257a:	2b00      	cmp	r3, #0
   8257c:	d003      	beq.n	82586 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   8257e:	68fb      	ldr	r3, [r7, #12]
   82580:	68ba      	ldr	r2, [r7, #8]
   82582:	631a      	str	r2, [r3, #48]	; 0x30
   82584:	e002      	b.n	8258c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82586:	68fb      	ldr	r3, [r7, #12]
   82588:	68ba      	ldr	r2, [r7, #8]
   8258a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8258c:	68fb      	ldr	r3, [r7, #12]
   8258e:	68ba      	ldr	r2, [r7, #8]
   82590:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   82592:	68fb      	ldr	r3, [r7, #12]
   82594:	68ba      	ldr	r2, [r7, #8]
   82596:	601a      	str	r2, [r3, #0]
}
   82598:	bf00      	nop
   8259a:	3710      	adds	r7, #16
   8259c:	46bd      	mov	sp, r7
   8259e:	bd80      	pop	{r7, pc}
   825a0:	000825c5 	.word	0x000825c5
   825a4:	000823fd 	.word	0x000823fd

000825a8 <pio_enable_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   825a8:	b480      	push	{r7}
   825aa:	b083      	sub	sp, #12
   825ac:	af00      	add	r7, sp, #0
   825ae:	6078      	str	r0, [r7, #4]
   825b0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   825b2:	687b      	ldr	r3, [r7, #4]
   825b4:	683a      	ldr	r2, [r7, #0]
   825b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   825ba:	bf00      	nop
   825bc:	370c      	adds	r7, #12
   825be:	46bd      	mov	sp, r7
   825c0:	bc80      	pop	{r7}
   825c2:	4770      	bx	lr

000825c4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   825c4:	b480      	push	{r7}
   825c6:	b083      	sub	sp, #12
   825c8:	af00      	add	r7, sp, #0
   825ca:	6078      	str	r0, [r7, #4]
   825cc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   825ce:	687b      	ldr	r3, [r7, #4]
   825d0:	683a      	ldr	r2, [r7, #0]
   825d2:	645a      	str	r2, [r3, #68]	; 0x44
}
   825d4:	bf00      	nop
   825d6:	370c      	adds	r7, #12
   825d8:	46bd      	mov	sp, r7
   825da:	bc80      	pop	{r7}
   825dc:	4770      	bx	lr

000825de <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   825de:	b480      	push	{r7}
   825e0:	b083      	sub	sp, #12
   825e2:	af00      	add	r7, sp, #0
   825e4:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   825e6:	687b      	ldr	r3, [r7, #4]
   825e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   825ea:	4618      	mov	r0, r3
   825ec:	370c      	adds	r7, #12
   825ee:	46bd      	mov	sp, r7
   825f0:	bc80      	pop	{r7}
   825f2:	4770      	bx	lr

000825f4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   825f4:	b480      	push	{r7}
   825f6:	b083      	sub	sp, #12
   825f8:	af00      	add	r7, sp, #0
   825fa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   825fc:	687b      	ldr	r3, [r7, #4]
   825fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   82600:	4618      	mov	r0, r3
   82602:	370c      	adds	r7, #12
   82604:	46bd      	mov	sp, r7
   82606:	bc80      	pop	{r7}
   82608:	4770      	bx	lr
   8260a:	0000      	movs	r0, r0

0008260c <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   8260c:	b580      	push	{r7, lr}
   8260e:	b084      	sub	sp, #16
   82610:	af00      	add	r7, sp, #0
   82612:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82614:	6878      	ldr	r0, [r7, #4]
   82616:	4b08      	ldr	r3, [pc, #32]	; (82638 <pio_get_pin_value+0x2c>)
   82618:	4798      	blx	r3
   8261a:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   8261c:	68fb      	ldr	r3, [r7, #12]
   8261e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   82620:	687b      	ldr	r3, [r7, #4]
   82622:	f003 031f 	and.w	r3, r3, #31
   82626:	fa22 f303 	lsr.w	r3, r2, r3
   8262a:	f003 0301 	and.w	r3, r3, #1
}
   8262e:	4618      	mov	r0, r3
   82630:	3710      	adds	r7, #16
   82632:	46bd      	mov	sp, r7
   82634:	bd80      	pop	{r7, pc}
   82636:	bf00      	nop
   82638:	000828a9 	.word	0x000828a9

0008263c <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   8263c:	b580      	push	{r7, lr}
   8263e:	b084      	sub	sp, #16
   82640:	af00      	add	r7, sp, #0
   82642:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82644:	6878      	ldr	r0, [r7, #4]
   82646:	4b08      	ldr	r3, [pc, #32]	; (82668 <pio_set_pin_high+0x2c>)
   82648:	4798      	blx	r3
   8264a:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8264c:	687b      	ldr	r3, [r7, #4]
   8264e:	f003 031f 	and.w	r3, r3, #31
   82652:	2201      	movs	r2, #1
   82654:	fa02 f303 	lsl.w	r3, r2, r3
   82658:	461a      	mov	r2, r3
   8265a:	68fb      	ldr	r3, [r7, #12]
   8265c:	631a      	str	r2, [r3, #48]	; 0x30
}
   8265e:	bf00      	nop
   82660:	3710      	adds	r7, #16
   82662:	46bd      	mov	sp, r7
   82664:	bd80      	pop	{r7, pc}
   82666:	bf00      	nop
   82668:	000828a9 	.word	0x000828a9

0008266c <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   8266c:	b580      	push	{r7, lr}
   8266e:	b084      	sub	sp, #16
   82670:	af00      	add	r7, sp, #0
   82672:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82674:	6878      	ldr	r0, [r7, #4]
   82676:	4b08      	ldr	r3, [pc, #32]	; (82698 <pio_set_pin_low+0x2c>)
   82678:	4798      	blx	r3
   8267a:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8267c:	687b      	ldr	r3, [r7, #4]
   8267e:	f003 031f 	and.w	r3, r3, #31
   82682:	2201      	movs	r2, #1
   82684:	fa02 f303 	lsl.w	r3, r2, r3
   82688:	461a      	mov	r2, r3
   8268a:	68fb      	ldr	r3, [r7, #12]
   8268c:	635a      	str	r2, [r3, #52]	; 0x34
}
   8268e:	bf00      	nop
   82690:	3710      	adds	r7, #16
   82692:	46bd      	mov	sp, r7
   82694:	bd80      	pop	{r7, pc}
   82696:	bf00      	nop
   82698:	000828a9 	.word	0x000828a9

0008269c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8269c:	b590      	push	{r4, r7, lr}
   8269e:	b087      	sub	sp, #28
   826a0:	af02      	add	r7, sp, #8
   826a2:	6078      	str	r0, [r7, #4]
   826a4:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   826a6:	6878      	ldr	r0, [r7, #4]
   826a8:	4b43      	ldr	r3, [pc, #268]	; (827b8 <pio_configure_pin+0x11c>)
   826aa:	4798      	blx	r3
   826ac:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   826ae:	683b      	ldr	r3, [r7, #0]
   826b0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   826b4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   826b8:	d057      	beq.n	8276a <pio_configure_pin+0xce>
   826ba:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   826be:	d873      	bhi.n	827a8 <pio_configure_pin+0x10c>
   826c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   826c4:	d051      	beq.n	8276a <pio_configure_pin+0xce>
   826c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   826ca:	d86d      	bhi.n	827a8 <pio_configure_pin+0x10c>
   826cc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   826d0:	d03f      	beq.n	82752 <pio_configure_pin+0xb6>
   826d2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   826d6:	d867      	bhi.n	827a8 <pio_configure_pin+0x10c>
   826d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   826dc:	d003      	beq.n	826e6 <pio_configure_pin+0x4a>
   826de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   826e2:	d01b      	beq.n	8271c <pio_configure_pin+0x80>
   826e4:	e060      	b.n	827a8 <pio_configure_pin+0x10c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   826e6:	687b      	ldr	r3, [r7, #4]
   826e8:	f003 031f 	and.w	r3, r3, #31
   826ec:	2201      	movs	r2, #1
   826ee:	fa02 f303 	lsl.w	r3, r2, r3
   826f2:	461a      	mov	r2, r3
   826f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   826f8:	68f8      	ldr	r0, [r7, #12]
   826fa:	4b30      	ldr	r3, [pc, #192]	; (827bc <pio_configure_pin+0x120>)
   826fc:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   826fe:	687b      	ldr	r3, [r7, #4]
   82700:	f003 031f 	and.w	r3, r3, #31
   82704:	2201      	movs	r2, #1
   82706:	fa02 f303 	lsl.w	r3, r2, r3
   8270a:	4619      	mov	r1, r3
   8270c:	683b      	ldr	r3, [r7, #0]
   8270e:	f003 0301 	and.w	r3, r3, #1
   82712:	461a      	mov	r2, r3
   82714:	68f8      	ldr	r0, [r7, #12]
   82716:	4b2a      	ldr	r3, [pc, #168]	; (827c0 <pio_configure_pin+0x124>)
   82718:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8271a:	e047      	b.n	827ac <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8271c:	687b      	ldr	r3, [r7, #4]
   8271e:	f003 031f 	and.w	r3, r3, #31
   82722:	2201      	movs	r2, #1
   82724:	fa02 f303 	lsl.w	r3, r2, r3
   82728:	461a      	mov	r2, r3
   8272a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8272e:	68f8      	ldr	r0, [r7, #12]
   82730:	4b22      	ldr	r3, [pc, #136]	; (827bc <pio_configure_pin+0x120>)
   82732:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82734:	687b      	ldr	r3, [r7, #4]
   82736:	f003 031f 	and.w	r3, r3, #31
   8273a:	2201      	movs	r2, #1
   8273c:	fa02 f303 	lsl.w	r3, r2, r3
   82740:	4619      	mov	r1, r3
   82742:	683b      	ldr	r3, [r7, #0]
   82744:	f003 0301 	and.w	r3, r3, #1
   82748:	461a      	mov	r2, r3
   8274a:	68f8      	ldr	r0, [r7, #12]
   8274c:	4b1c      	ldr	r3, [pc, #112]	; (827c0 <pio_configure_pin+0x124>)
   8274e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82750:	e02c      	b.n	827ac <pio_configure_pin+0x110>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82752:	687b      	ldr	r3, [r7, #4]
   82754:	f003 031f 	and.w	r3, r3, #31
   82758:	2201      	movs	r2, #1
   8275a:	fa02 f303 	lsl.w	r3, r2, r3
   8275e:	683a      	ldr	r2, [r7, #0]
   82760:	4619      	mov	r1, r3
   82762:	68f8      	ldr	r0, [r7, #12]
   82764:	4b17      	ldr	r3, [pc, #92]	; (827c4 <pio_configure_pin+0x128>)
   82766:	4798      	blx	r3
		break;
   82768:	e020      	b.n	827ac <pio_configure_pin+0x110>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8276a:	687b      	ldr	r3, [r7, #4]
   8276c:	f003 031f 	and.w	r3, r3, #31
   82770:	2201      	movs	r2, #1
   82772:	fa02 f303 	lsl.w	r3, r2, r3
   82776:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82778:	683b      	ldr	r3, [r7, #0]
   8277a:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8277e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82782:	bf0c      	ite	eq
   82784:	2301      	moveq	r3, #1
   82786:	2300      	movne	r3, #0
   82788:	b2db      	uxtb	r3, r3
   8278a:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8278c:	683b      	ldr	r3, [r7, #0]
   8278e:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82790:	f003 0201 	and.w	r2, r3, #1
   82794:	683b      	ldr	r3, [r7, #0]
   82796:	f003 0301 	and.w	r3, r3, #1
   8279a:	9300      	str	r3, [sp, #0]
   8279c:	4613      	mov	r3, r2
   8279e:	4602      	mov	r2, r0
   827a0:	68f8      	ldr	r0, [r7, #12]
   827a2:	4c09      	ldr	r4, [pc, #36]	; (827c8 <pio_configure_pin+0x12c>)
   827a4:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   827a6:	e001      	b.n	827ac <pio_configure_pin+0x110>

	default:
		return 0;
   827a8:	2300      	movs	r3, #0
   827aa:	e000      	b.n	827ae <pio_configure_pin+0x112>
	}

	return 1;
   827ac:	2301      	movs	r3, #1
}
   827ae:	4618      	mov	r0, r3
   827b0:	3714      	adds	r7, #20
   827b2:	46bd      	mov	sp, r7
   827b4:	bd90      	pop	{r4, r7, pc}
   827b6:	bf00      	nop
   827b8:	000828a9 	.word	0x000828a9
   827bc:	00082427 	.word	0x00082427
   827c0:	000823fd 	.word	0x000823fd
   827c4:	000824c5 	.word	0x000824c5
   827c8:	00082545 	.word	0x00082545

000827cc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   827cc:	b590      	push	{r4, r7, lr}
   827ce:	b087      	sub	sp, #28
   827d0:	af02      	add	r7, sp, #8
   827d2:	60f8      	str	r0, [r7, #12]
   827d4:	60b9      	str	r1, [r7, #8]
   827d6:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   827d8:	687b      	ldr	r3, [r7, #4]
   827da:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   827de:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   827e2:	d039      	beq.n	82858 <pio_configure_pin_group+0x8c>
   827e4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   827e8:	d84f      	bhi.n	8288a <pio_configure_pin_group+0xbe>
   827ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   827ee:	d033      	beq.n	82858 <pio_configure_pin_group+0x8c>
   827f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   827f4:	d849      	bhi.n	8288a <pio_configure_pin_group+0xbe>
   827f6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   827fa:	d027      	beq.n	8284c <pio_configure_pin_group+0x80>
   827fc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82800:	d843      	bhi.n	8288a <pio_configure_pin_group+0xbe>
   82802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82806:	d003      	beq.n	82810 <pio_configure_pin_group+0x44>
   82808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8280c:	d00f      	beq.n	8282e <pio_configure_pin_group+0x62>
   8280e:	e03c      	b.n	8288a <pio_configure_pin_group+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82810:	68ba      	ldr	r2, [r7, #8]
   82812:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82816:	68f8      	ldr	r0, [r7, #12]
   82818:	4b1f      	ldr	r3, [pc, #124]	; (82898 <pio_configure_pin_group+0xcc>)
   8281a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8281c:	687b      	ldr	r3, [r7, #4]
   8281e:	f003 0301 	and.w	r3, r3, #1
   82822:	461a      	mov	r2, r3
   82824:	68b9      	ldr	r1, [r7, #8]
   82826:	68f8      	ldr	r0, [r7, #12]
   82828:	4b1c      	ldr	r3, [pc, #112]	; (8289c <pio_configure_pin_group+0xd0>)
   8282a:	4798      	blx	r3
		break;
   8282c:	e02f      	b.n	8288e <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8282e:	68ba      	ldr	r2, [r7, #8]
   82830:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82834:	68f8      	ldr	r0, [r7, #12]
   82836:	4b18      	ldr	r3, [pc, #96]	; (82898 <pio_configure_pin_group+0xcc>)
   82838:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8283a:	687b      	ldr	r3, [r7, #4]
   8283c:	f003 0301 	and.w	r3, r3, #1
   82840:	461a      	mov	r2, r3
   82842:	68b9      	ldr	r1, [r7, #8]
   82844:	68f8      	ldr	r0, [r7, #12]
   82846:	4b15      	ldr	r3, [pc, #84]	; (8289c <pio_configure_pin_group+0xd0>)
   82848:	4798      	blx	r3
		break;
   8284a:	e020      	b.n	8288e <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8284c:	687a      	ldr	r2, [r7, #4]
   8284e:	68b9      	ldr	r1, [r7, #8]
   82850:	68f8      	ldr	r0, [r7, #12]
   82852:	4b13      	ldr	r3, [pc, #76]	; (828a0 <pio_configure_pin_group+0xd4>)
   82854:	4798      	blx	r3
		break;
   82856:	e01a      	b.n	8288e <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82858:	687b      	ldr	r3, [r7, #4]
   8285a:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8285e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82862:	bf0c      	ite	eq
   82864:	2301      	moveq	r3, #1
   82866:	2300      	movne	r3, #0
   82868:	b2db      	uxtb	r3, r3
   8286a:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8286c:	687b      	ldr	r3, [r7, #4]
   8286e:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   82870:	f003 0201 	and.w	r2, r3, #1
   82874:	687b      	ldr	r3, [r7, #4]
   82876:	f003 0301 	and.w	r3, r3, #1
   8287a:	9300      	str	r3, [sp, #0]
   8287c:	4613      	mov	r3, r2
   8287e:	460a      	mov	r2, r1
   82880:	68b9      	ldr	r1, [r7, #8]
   82882:	68f8      	ldr	r0, [r7, #12]
   82884:	4c07      	ldr	r4, [pc, #28]	; (828a4 <pio_configure_pin_group+0xd8>)
   82886:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82888:	e001      	b.n	8288e <pio_configure_pin_group+0xc2>

	default:
		return 0;
   8288a:	2300      	movs	r3, #0
   8288c:	e000      	b.n	82890 <pio_configure_pin_group+0xc4>
	}

	return 1;
   8288e:	2301      	movs	r3, #1
}
   82890:	4618      	mov	r0, r3
   82892:	3714      	adds	r7, #20
   82894:	46bd      	mov	sp, r7
   82896:	bd90      	pop	{r4, r7, pc}
   82898:	00082427 	.word	0x00082427
   8289c:	000823fd 	.word	0x000823fd
   828a0:	000824c5 	.word	0x000824c5
   828a4:	00082545 	.word	0x00082545

000828a8 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   828a8:	b480      	push	{r7}
   828aa:	b085      	sub	sp, #20
   828ac:	af00      	add	r7, sp, #0
   828ae:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   828b0:	687b      	ldr	r3, [r7, #4]
   828b2:	095b      	lsrs	r3, r3, #5
   828b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   828b8:	f203 7306 	addw	r3, r3, #1798	; 0x706
   828bc:	025b      	lsls	r3, r3, #9
   828be:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   828c0:	68fb      	ldr	r3, [r7, #12]
}
   828c2:	4618      	mov	r0, r3
   828c4:	3714      	adds	r7, #20
   828c6:	46bd      	mov	sp, r7
   828c8:	bc80      	pop	{r7}
   828ca:	4770      	bx	lr

000828cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   828cc:	b580      	push	{r7, lr}
   828ce:	b084      	sub	sp, #16
   828d0:	af00      	add	r7, sp, #0
   828d2:	6078      	str	r0, [r7, #4]
   828d4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   828d6:	6878      	ldr	r0, [r7, #4]
   828d8:	4b26      	ldr	r3, [pc, #152]	; (82974 <pio_handler_process+0xa8>)
   828da:	4798      	blx	r3
   828dc:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   828de:	6878      	ldr	r0, [r7, #4]
   828e0:	4b25      	ldr	r3, [pc, #148]	; (82978 <pio_handler_process+0xac>)
   828e2:	4798      	blx	r3
   828e4:	4602      	mov	r2, r0
   828e6:	68fb      	ldr	r3, [r7, #12]
   828e8:	4013      	ands	r3, r2
   828ea:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   828ec:	68fb      	ldr	r3, [r7, #12]
   828ee:	2b00      	cmp	r3, #0
   828f0:	d03c      	beq.n	8296c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   828f2:	2300      	movs	r3, #0
   828f4:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   828f6:	e034      	b.n	82962 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   828f8:	4a20      	ldr	r2, [pc, #128]	; (8297c <pio_handler_process+0xb0>)
   828fa:	68bb      	ldr	r3, [r7, #8]
   828fc:	011b      	lsls	r3, r3, #4
   828fe:	4413      	add	r3, r2
   82900:	681b      	ldr	r3, [r3, #0]
   82902:	683a      	ldr	r2, [r7, #0]
   82904:	429a      	cmp	r2, r3
   82906:	d126      	bne.n	82956 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82908:	4a1c      	ldr	r2, [pc, #112]	; (8297c <pio_handler_process+0xb0>)
   8290a:	68bb      	ldr	r3, [r7, #8]
   8290c:	011b      	lsls	r3, r3, #4
   8290e:	4413      	add	r3, r2
   82910:	3304      	adds	r3, #4
   82912:	681a      	ldr	r2, [r3, #0]
   82914:	68fb      	ldr	r3, [r7, #12]
   82916:	4013      	ands	r3, r2
   82918:	2b00      	cmp	r3, #0
   8291a:	d01c      	beq.n	82956 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8291c:	4a17      	ldr	r2, [pc, #92]	; (8297c <pio_handler_process+0xb0>)
   8291e:	68bb      	ldr	r3, [r7, #8]
   82920:	011b      	lsls	r3, r3, #4
   82922:	4413      	add	r3, r2
   82924:	330c      	adds	r3, #12
   82926:	681b      	ldr	r3, [r3, #0]
   82928:	4914      	ldr	r1, [pc, #80]	; (8297c <pio_handler_process+0xb0>)
   8292a:	68ba      	ldr	r2, [r7, #8]
   8292c:	0112      	lsls	r2, r2, #4
   8292e:	440a      	add	r2, r1
   82930:	6810      	ldr	r0, [r2, #0]
   82932:	4912      	ldr	r1, [pc, #72]	; (8297c <pio_handler_process+0xb0>)
   82934:	68ba      	ldr	r2, [r7, #8]
   82936:	0112      	lsls	r2, r2, #4
   82938:	440a      	add	r2, r1
   8293a:	3204      	adds	r2, #4
   8293c:	6812      	ldr	r2, [r2, #0]
   8293e:	4611      	mov	r1, r2
   82940:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82942:	4a0e      	ldr	r2, [pc, #56]	; (8297c <pio_handler_process+0xb0>)
   82944:	68bb      	ldr	r3, [r7, #8]
   82946:	011b      	lsls	r3, r3, #4
   82948:	4413      	add	r3, r2
   8294a:	3304      	adds	r3, #4
   8294c:	681b      	ldr	r3, [r3, #0]
   8294e:	43db      	mvns	r3, r3
   82950:	68fa      	ldr	r2, [r7, #12]
   82952:	4013      	ands	r3, r2
   82954:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   82956:	68bb      	ldr	r3, [r7, #8]
   82958:	3301      	adds	r3, #1
   8295a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   8295c:	68bb      	ldr	r3, [r7, #8]
   8295e:	2b06      	cmp	r3, #6
   82960:	d803      	bhi.n	8296a <pio_handler_process+0x9e>
		while (status != 0) {
   82962:	68fb      	ldr	r3, [r7, #12]
   82964:	2b00      	cmp	r3, #0
   82966:	d1c7      	bne.n	828f8 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   82968:	e000      	b.n	8296c <pio_handler_process+0xa0>
				break;
   8296a:	bf00      	nop
}
   8296c:	bf00      	nop
   8296e:	3710      	adds	r7, #16
   82970:	46bd      	mov	sp, r7
   82972:	bd80      	pop	{r7, pc}
   82974:	000825df 	.word	0x000825df
   82978:	000825f5 	.word	0x000825f5
   8297c:	200012b8 	.word	0x200012b8

00082980 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82980:	b580      	push	{r7, lr}
   82982:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82984:	210a      	movs	r1, #10
   82986:	4802      	ldr	r0, [pc, #8]	; (82990 <PIOA_Handler+0x10>)
   82988:	4b02      	ldr	r3, [pc, #8]	; (82994 <PIOA_Handler+0x14>)
   8298a:	4798      	blx	r3
}
   8298c:	bf00      	nop
   8298e:	bd80      	pop	{r7, pc}
   82990:	400e0c00 	.word	0x400e0c00
   82994:	000828cd 	.word	0x000828cd

00082998 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82998:	b580      	push	{r7, lr}
   8299a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   8299c:	210b      	movs	r1, #11
   8299e:	4802      	ldr	r0, [pc, #8]	; (829a8 <PIOB_Handler+0x10>)
   829a0:	4b02      	ldr	r3, [pc, #8]	; (829ac <PIOB_Handler+0x14>)
   829a2:	4798      	blx	r3
}
   829a4:	bf00      	nop
   829a6:	bd80      	pop	{r7, pc}
   829a8:	400e0e00 	.word	0x400e0e00
   829ac:	000828cd 	.word	0x000828cd

000829b0 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   829b0:	b480      	push	{r7}
   829b2:	b085      	sub	sp, #20
   829b4:	af00      	add	r7, sp, #0
   829b6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   829b8:	4b1c      	ldr	r3, [pc, #112]	; (82a2c <pmc_switch_mck_to_mainck+0x7c>)
   829ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829bc:	f023 0303 	bic.w	r3, r3, #3
   829c0:	4a1a      	ldr	r2, [pc, #104]	; (82a2c <pmc_switch_mck_to_mainck+0x7c>)
   829c2:	f043 0301 	orr.w	r3, r3, #1
   829c6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   829c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   829cc:	60fb      	str	r3, [r7, #12]
   829ce:	e007      	b.n	829e0 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   829d0:	68fb      	ldr	r3, [r7, #12]
   829d2:	2b00      	cmp	r3, #0
   829d4:	d101      	bne.n	829da <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   829d6:	2301      	movs	r3, #1
   829d8:	e023      	b.n	82a22 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   829da:	68fb      	ldr	r3, [r7, #12]
   829dc:	3b01      	subs	r3, #1
   829de:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   829e0:	4b12      	ldr	r3, [pc, #72]	; (82a2c <pmc_switch_mck_to_mainck+0x7c>)
   829e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   829e4:	f003 0308 	and.w	r3, r3, #8
   829e8:	2b00      	cmp	r3, #0
   829ea:	d0f1      	beq.n	829d0 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   829ec:	4b0f      	ldr	r3, [pc, #60]	; (82a2c <pmc_switch_mck_to_mainck+0x7c>)
   829ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   829f4:	490d      	ldr	r1, [pc, #52]	; (82a2c <pmc_switch_mck_to_mainck+0x7c>)
   829f6:	687b      	ldr	r3, [r7, #4]
   829f8:	4313      	orrs	r3, r2
   829fa:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   829fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82a00:	60fb      	str	r3, [r7, #12]
   82a02:	e007      	b.n	82a14 <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82a04:	68fb      	ldr	r3, [r7, #12]
   82a06:	2b00      	cmp	r3, #0
   82a08:	d101      	bne.n	82a0e <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   82a0a:	2301      	movs	r3, #1
   82a0c:	e009      	b.n	82a22 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   82a0e:	68fb      	ldr	r3, [r7, #12]
   82a10:	3b01      	subs	r3, #1
   82a12:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82a14:	4b05      	ldr	r3, [pc, #20]	; (82a2c <pmc_switch_mck_to_mainck+0x7c>)
   82a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82a18:	f003 0308 	and.w	r3, r3, #8
   82a1c:	2b00      	cmp	r3, #0
   82a1e:	d0f1      	beq.n	82a04 <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   82a20:	2300      	movs	r3, #0
}
   82a22:	4618      	mov	r0, r3
   82a24:	3714      	adds	r7, #20
   82a26:	46bd      	mov	sp, r7
   82a28:	bc80      	pop	{r7}
   82a2a:	4770      	bx	lr
   82a2c:	400e0400 	.word	0x400e0400

00082a30 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82a30:	b480      	push	{r7}
   82a32:	b085      	sub	sp, #20
   82a34:	af00      	add	r7, sp, #0
   82a36:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82a38:	4b1c      	ldr	r3, [pc, #112]	; (82aac <pmc_switch_mck_to_pllack+0x7c>)
   82a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82a40:	491a      	ldr	r1, [pc, #104]	; (82aac <pmc_switch_mck_to_pllack+0x7c>)
   82a42:	687b      	ldr	r3, [r7, #4]
   82a44:	4313      	orrs	r3, r2
   82a46:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82a4c:	60fb      	str	r3, [r7, #12]
   82a4e:	e007      	b.n	82a60 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82a50:	68fb      	ldr	r3, [r7, #12]
   82a52:	2b00      	cmp	r3, #0
   82a54:	d101      	bne.n	82a5a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   82a56:	2301      	movs	r3, #1
   82a58:	e023      	b.n	82aa2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   82a5a:	68fb      	ldr	r3, [r7, #12]
   82a5c:	3b01      	subs	r3, #1
   82a5e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82a60:	4b12      	ldr	r3, [pc, #72]	; (82aac <pmc_switch_mck_to_pllack+0x7c>)
   82a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82a64:	f003 0308 	and.w	r3, r3, #8
   82a68:	2b00      	cmp	r3, #0
   82a6a:	d0f1      	beq.n	82a50 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82a6c:	4b0f      	ldr	r3, [pc, #60]	; (82aac <pmc_switch_mck_to_pllack+0x7c>)
   82a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a70:	f023 0303 	bic.w	r3, r3, #3
   82a74:	4a0d      	ldr	r2, [pc, #52]	; (82aac <pmc_switch_mck_to_pllack+0x7c>)
   82a76:	f043 0302 	orr.w	r3, r3, #2
   82a7a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82a80:	60fb      	str	r3, [r7, #12]
   82a82:	e007      	b.n	82a94 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82a84:	68fb      	ldr	r3, [r7, #12]
   82a86:	2b00      	cmp	r3, #0
   82a88:	d101      	bne.n	82a8e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   82a8a:	2301      	movs	r3, #1
   82a8c:	e009      	b.n	82aa2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   82a8e:	68fb      	ldr	r3, [r7, #12]
   82a90:	3b01      	subs	r3, #1
   82a92:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82a94:	4b05      	ldr	r3, [pc, #20]	; (82aac <pmc_switch_mck_to_pllack+0x7c>)
   82a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82a98:	f003 0308 	and.w	r3, r3, #8
   82a9c:	2b00      	cmp	r3, #0
   82a9e:	d0f1      	beq.n	82a84 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   82aa0:	2300      	movs	r3, #0
}
   82aa2:	4618      	mov	r0, r3
   82aa4:	3714      	adds	r7, #20
   82aa6:	46bd      	mov	sp, r7
   82aa8:	bc80      	pop	{r7}
   82aaa:	4770      	bx	lr
   82aac:	400e0400 	.word	0x400e0400

00082ab0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   82ab0:	b480      	push	{r7}
   82ab2:	b083      	sub	sp, #12
   82ab4:	af00      	add	r7, sp, #0
   82ab6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82ab8:	687b      	ldr	r3, [r7, #4]
   82aba:	2b01      	cmp	r3, #1
   82abc:	d107      	bne.n	82ace <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   82abe:	4b08      	ldr	r3, [pc, #32]	; (82ae0 <pmc_switch_sclk_to_32kxtal+0x30>)
   82ac0:	689b      	ldr	r3, [r3, #8]
   82ac2:	4a07      	ldr	r2, [pc, #28]	; (82ae0 <pmc_switch_sclk_to_32kxtal+0x30>)
   82ac4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82acc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   82ace:	4b04      	ldr	r3, [pc, #16]	; (82ae0 <pmc_switch_sclk_to_32kxtal+0x30>)
   82ad0:	4a04      	ldr	r2, [pc, #16]	; (82ae4 <pmc_switch_sclk_to_32kxtal+0x34>)
   82ad2:	601a      	str	r2, [r3, #0]
}
   82ad4:	bf00      	nop
   82ad6:	370c      	adds	r7, #12
   82ad8:	46bd      	mov	sp, r7
   82ada:	bc80      	pop	{r7}
   82adc:	4770      	bx	lr
   82ade:	bf00      	nop
   82ae0:	400e1210 	.word	0x400e1210
   82ae4:	a5000008 	.word	0xa5000008

00082ae8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   82ae8:	b480      	push	{r7}
   82aea:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82aec:	4b09      	ldr	r3, [pc, #36]	; (82b14 <pmc_osc_is_ready_32kxtal+0x2c>)
   82aee:	695b      	ldr	r3, [r3, #20]
   82af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   82af4:	2b00      	cmp	r3, #0
   82af6:	d007      	beq.n	82b08 <pmc_osc_is_ready_32kxtal+0x20>
   82af8:	4b07      	ldr	r3, [pc, #28]	; (82b18 <pmc_osc_is_ready_32kxtal+0x30>)
   82afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82b00:	2b00      	cmp	r3, #0
   82b02:	d001      	beq.n	82b08 <pmc_osc_is_ready_32kxtal+0x20>
   82b04:	2301      	movs	r3, #1
   82b06:	e000      	b.n	82b0a <pmc_osc_is_ready_32kxtal+0x22>
   82b08:	2300      	movs	r3, #0
}
   82b0a:	4618      	mov	r0, r3
   82b0c:	46bd      	mov	sp, r7
   82b0e:	bc80      	pop	{r7}
   82b10:	4770      	bx	lr
   82b12:	bf00      	nop
   82b14:	400e1210 	.word	0x400e1210
   82b18:	400e0400 	.word	0x400e0400

00082b1c <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   82b1c:	b480      	push	{r7}
   82b1e:	b083      	sub	sp, #12
   82b20:	af00      	add	r7, sp, #0
   82b22:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   82b24:	4b13      	ldr	r3, [pc, #76]	; (82b74 <pmc_osc_enable_fastrc+0x58>)
   82b26:	6a1b      	ldr	r3, [r3, #32]
   82b28:	4a12      	ldr	r2, [pc, #72]	; (82b74 <pmc_osc_enable_fastrc+0x58>)
   82b2a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82b2e:	f043 0308 	orr.w	r3, r3, #8
   82b32:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82b34:	bf00      	nop
   82b36:	4b0f      	ldr	r3, [pc, #60]	; (82b74 <pmc_osc_enable_fastrc+0x58>)
   82b38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82b3e:	2b00      	cmp	r3, #0
   82b40:	d0f9      	beq.n	82b36 <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82b42:	4b0c      	ldr	r3, [pc, #48]	; (82b74 <pmc_osc_enable_fastrc+0x58>)
   82b44:	6a1b      	ldr	r3, [r3, #32]
   82b46:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   82b4e:	687a      	ldr	r2, [r7, #4]
   82b50:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82b52:	4a08      	ldr	r2, [pc, #32]	; (82b74 <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   82b54:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82b58:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82b5a:	bf00      	nop
   82b5c:	4b05      	ldr	r3, [pc, #20]	; (82b74 <pmc_osc_enable_fastrc+0x58>)
   82b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82b64:	2b00      	cmp	r3, #0
   82b66:	d0f9      	beq.n	82b5c <pmc_osc_enable_fastrc+0x40>
}
   82b68:	bf00      	nop
   82b6a:	bf00      	nop
   82b6c:	370c      	adds	r7, #12
   82b6e:	46bd      	mov	sp, r7
   82b70:	bc80      	pop	{r7}
   82b72:	4770      	bx	lr
   82b74:	400e0400 	.word	0x400e0400

00082b78 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   82b78:	b480      	push	{r7}
   82b7a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   82b7c:	4b03      	ldr	r3, [pc, #12]	; (82b8c <pmc_osc_is_ready_fastrc+0x14>)
   82b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   82b84:	4618      	mov	r0, r3
   82b86:	46bd      	mov	sp, r7
   82b88:	bc80      	pop	{r7}
   82b8a:	4770      	bx	lr
   82b8c:	400e0400 	.word	0x400e0400

00082b90 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   82b90:	b480      	push	{r7}
   82b92:	b085      	sub	sp, #20
   82b94:	af00      	add	r7, sp, #0
   82b96:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   82b98:	4b10      	ldr	r3, [pc, #64]	; (82bdc <pmc_osc_enable_main_xtal+0x4c>)
   82b9a:	6a1b      	ldr	r3, [r3, #32]
   82b9c:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   82b9e:	68fb      	ldr	r3, [r7, #12]
   82ba0:	f023 0303 	bic.w	r3, r3, #3
   82ba4:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82ba6:	687b      	ldr	r3, [r7, #4]
   82ba8:	021b      	lsls	r3, r3, #8
   82baa:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82bac:	68fb      	ldr	r3, [r7, #12]
   82bae:	4313      	orrs	r3, r2
   82bb0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82bb4:	f043 0301 	orr.w	r3, r3, #1
   82bb8:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   82bba:	4a08      	ldr	r2, [pc, #32]	; (82bdc <pmc_osc_enable_main_xtal+0x4c>)
   82bbc:	68fb      	ldr	r3, [r7, #12]
   82bbe:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82bc0:	bf00      	nop
   82bc2:	4b06      	ldr	r3, [pc, #24]	; (82bdc <pmc_osc_enable_main_xtal+0x4c>)
   82bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82bc6:	f003 0301 	and.w	r3, r3, #1
   82bca:	2b00      	cmp	r3, #0
   82bcc:	d0f9      	beq.n	82bc2 <pmc_osc_enable_main_xtal+0x32>
}
   82bce:	bf00      	nop
   82bd0:	bf00      	nop
   82bd2:	3714      	adds	r7, #20
   82bd4:	46bd      	mov	sp, r7
   82bd6:	bc80      	pop	{r7}
   82bd8:	4770      	bx	lr
   82bda:	bf00      	nop
   82bdc:	400e0400 	.word	0x400e0400

00082be0 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   82be0:	b480      	push	{r7}
   82be2:	b083      	sub	sp, #12
   82be4:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   82be6:	4b0a      	ldr	r3, [pc, #40]	; (82c10 <pmc_osc_bypass_main_xtal+0x30>)
   82be8:	6a1b      	ldr	r3, [r3, #32]
   82bea:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   82bec:	687b      	ldr	r3, [r7, #4]
   82bee:	f023 0303 	bic.w	r3, r3, #3
   82bf2:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   82bf4:	687b      	ldr	r3, [r7, #4]
   82bf6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82bfa:	f043 0302 	orr.w	r3, r3, #2
   82bfe:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   82c00:	4a03      	ldr	r2, [pc, #12]	; (82c10 <pmc_osc_bypass_main_xtal+0x30>)
   82c02:	687b      	ldr	r3, [r7, #4]
   82c04:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   82c06:	bf00      	nop
   82c08:	370c      	adds	r7, #12
   82c0a:	46bd      	mov	sp, r7
   82c0c:	bc80      	pop	{r7}
   82c0e:	4770      	bx	lr
   82c10:	400e0400 	.word	0x400e0400

00082c14 <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   82c14:	b480      	push	{r7}
   82c16:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   82c18:	4b03      	ldr	r3, [pc, #12]	; (82c28 <pmc_osc_is_bypassed_main_xtal+0x14>)
   82c1a:	6a1b      	ldr	r3, [r3, #32]
   82c1c:	f003 0302 	and.w	r3, r3, #2
}
   82c20:	4618      	mov	r0, r3
   82c22:	46bd      	mov	sp, r7
   82c24:	bc80      	pop	{r7}
   82c26:	4770      	bx	lr
   82c28:	400e0400 	.word	0x400e0400

00082c2c <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   82c2c:	b480      	push	{r7}
   82c2e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   82c30:	4b03      	ldr	r3, [pc, #12]	; (82c40 <pmc_osc_is_ready_main_xtal+0x14>)
   82c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82c34:	f003 0301 	and.w	r3, r3, #1
}
   82c38:	4618      	mov	r0, r3
   82c3a:	46bd      	mov	sp, r7
   82c3c:	bc80      	pop	{r7}
   82c3e:	4770      	bx	lr
   82c40:	400e0400 	.word	0x400e0400

00082c44 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82c44:	b480      	push	{r7}
   82c46:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82c48:	4b03      	ldr	r3, [pc, #12]	; (82c58 <pmc_osc_is_ready_mainck+0x14>)
   82c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82c50:	4618      	mov	r0, r3
   82c52:	46bd      	mov	sp, r7
   82c54:	bc80      	pop	{r7}
   82c56:	4770      	bx	lr
   82c58:	400e0400 	.word	0x400e0400

00082c5c <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   82c5c:	b480      	push	{r7}
   82c5e:	b085      	sub	sp, #20
   82c60:	af00      	add	r7, sp, #0
   82c62:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   82c64:	4b0c      	ldr	r3, [pc, #48]	; (82c98 <pmc_mainck_osc_select+0x3c>)
   82c66:	6a1b      	ldr	r3, [r3, #32]
   82c68:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   82c6a:	687b      	ldr	r3, [r7, #4]
   82c6c:	2b00      	cmp	r3, #0
   82c6e:	d004      	beq.n	82c7a <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   82c70:	68fb      	ldr	r3, [r7, #12]
   82c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   82c76:	60fb      	str	r3, [r7, #12]
   82c78:	e003      	b.n	82c82 <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   82c7a:	68fb      	ldr	r3, [r7, #12]
   82c7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   82c80:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   82c82:	4a05      	ldr	r2, [pc, #20]	; (82c98 <pmc_mainck_osc_select+0x3c>)
   82c84:	68fb      	ldr	r3, [r7, #12]
   82c86:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82c8a:	6213      	str	r3, [r2, #32]
}
   82c8c:	bf00      	nop
   82c8e:	3714      	adds	r7, #20
   82c90:	46bd      	mov	sp, r7
   82c92:	bc80      	pop	{r7}
   82c94:	4770      	bx	lr
   82c96:	bf00      	nop
   82c98:	400e0400 	.word	0x400e0400

00082c9c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82c9c:	b480      	push	{r7}
   82c9e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82ca0:	4b03      	ldr	r3, [pc, #12]	; (82cb0 <pmc_disable_pllack+0x14>)
   82ca2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82ca6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   82ca8:	bf00      	nop
   82caa:	46bd      	mov	sp, r7
   82cac:	bc80      	pop	{r7}
   82cae:	4770      	bx	lr
   82cb0:	400e0400 	.word	0x400e0400

00082cb4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82cb4:	b480      	push	{r7}
   82cb6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82cb8:	4b03      	ldr	r3, [pc, #12]	; (82cc8 <pmc_is_locked_pllack+0x14>)
   82cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82cbc:	f003 0302 	and.w	r3, r3, #2
}
   82cc0:	4618      	mov	r0, r3
   82cc2:	46bd      	mov	sp, r7
   82cc4:	bc80      	pop	{r7}
   82cc6:	4770      	bx	lr
   82cc8:	400e0400 	.word	0x400e0400

00082ccc <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   82ccc:	b480      	push	{r7}
   82cce:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   82cd0:	4b04      	ldr	r3, [pc, #16]	; (82ce4 <pmc_disable_upll_clock+0x18>)
   82cd2:	69db      	ldr	r3, [r3, #28]
   82cd4:	4a03      	ldr	r2, [pc, #12]	; (82ce4 <pmc_disable_upll_clock+0x18>)
   82cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82cda:	61d3      	str	r3, [r2, #28]
}
   82cdc:	bf00      	nop
   82cde:	46bd      	mov	sp, r7
   82ce0:	bc80      	pop	{r7}
   82ce2:	4770      	bx	lr
   82ce4:	400e0400 	.word	0x400e0400

00082ce8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   82ce8:	b480      	push	{r7}
   82cea:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82cec:	4b03      	ldr	r3, [pc, #12]	; (82cfc <pmc_is_locked_upll+0x14>)
   82cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82cf4:	4618      	mov	r0, r3
   82cf6:	46bd      	mov	sp, r7
   82cf8:	bc80      	pop	{r7}
   82cfa:	4770      	bx	lr
   82cfc:	400e0400 	.word	0x400e0400

00082d00 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82d00:	b480      	push	{r7}
   82d02:	b083      	sub	sp, #12
   82d04:	af00      	add	r7, sp, #0
   82d06:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82d08:	687b      	ldr	r3, [r7, #4]
   82d0a:	2b1d      	cmp	r3, #29
   82d0c:	d901      	bls.n	82d12 <pmc_enable_periph_clk+0x12>
		return 1;
   82d0e:	2301      	movs	r3, #1
   82d10:	e015      	b.n	82d3e <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   82d12:	687b      	ldr	r3, [r7, #4]
   82d14:	2b1f      	cmp	r3, #31
   82d16:	d811      	bhi.n	82d3c <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82d18:	4b0b      	ldr	r3, [pc, #44]	; (82d48 <pmc_enable_periph_clk+0x48>)
   82d1a:	699a      	ldr	r2, [r3, #24]
   82d1c:	2101      	movs	r1, #1
   82d1e:	687b      	ldr	r3, [r7, #4]
   82d20:	fa01 f303 	lsl.w	r3, r1, r3
   82d24:	401a      	ands	r2, r3
   82d26:	2101      	movs	r1, #1
   82d28:	687b      	ldr	r3, [r7, #4]
   82d2a:	fa01 f303 	lsl.w	r3, r1, r3
   82d2e:	429a      	cmp	r2, r3
   82d30:	d004      	beq.n	82d3c <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   82d32:	2201      	movs	r2, #1
   82d34:	687b      	ldr	r3, [r7, #4]
   82d36:	409a      	lsls	r2, r3
   82d38:	4b03      	ldr	r3, [pc, #12]	; (82d48 <pmc_enable_periph_clk+0x48>)
   82d3a:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82d3c:	2300      	movs	r3, #0
}
   82d3e:	4618      	mov	r0, r3
   82d40:	370c      	adds	r7, #12
   82d42:	46bd      	mov	sp, r7
   82d44:	bc80      	pop	{r7}
   82d46:	4770      	bx	lr
   82d48:	400e0400 	.word	0x400e0400

00082d4c <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   82d4c:	b480      	push	{r7}
   82d4e:	b083      	sub	sp, #12
   82d50:	af00      	add	r7, sp, #0
   82d52:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82d54:	687b      	ldr	r3, [r7, #4]
   82d56:	2b1d      	cmp	r3, #29
   82d58:	d901      	bls.n	82d5e <pmc_disable_periph_clk+0x12>
		return 1;
   82d5a:	2301      	movs	r3, #1
   82d5c:	e015      	b.n	82d8a <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   82d5e:	687b      	ldr	r3, [r7, #4]
   82d60:	2b1f      	cmp	r3, #31
   82d62:	d811      	bhi.n	82d88 <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   82d64:	4b0b      	ldr	r3, [pc, #44]	; (82d94 <pmc_disable_periph_clk+0x48>)
   82d66:	699a      	ldr	r2, [r3, #24]
   82d68:	2101      	movs	r1, #1
   82d6a:	687b      	ldr	r3, [r7, #4]
   82d6c:	fa01 f303 	lsl.w	r3, r1, r3
   82d70:	401a      	ands	r2, r3
   82d72:	2101      	movs	r1, #1
   82d74:	687b      	ldr	r3, [r7, #4]
   82d76:	fa01 f303 	lsl.w	r3, r1, r3
   82d7a:	429a      	cmp	r2, r3
   82d7c:	d104      	bne.n	82d88 <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   82d7e:	2201      	movs	r2, #1
   82d80:	687b      	ldr	r3, [r7, #4]
   82d82:	409a      	lsls	r2, r3
   82d84:	4b03      	ldr	r3, [pc, #12]	; (82d94 <pmc_disable_periph_clk+0x48>)
   82d86:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   82d88:	2300      	movs	r3, #0
}
   82d8a:	4618      	mov	r0, r3
   82d8c:	370c      	adds	r7, #12
   82d8e:	46bd      	mov	sp, r7
   82d90:	bc80      	pop	{r7}
   82d92:	4770      	bx	lr
   82d94:	400e0400 	.word	0x400e0400

00082d98 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   82d98:	b480      	push	{r7}
   82d9a:	b083      	sub	sp, #12
   82d9c:	af00      	add	r7, sp, #0
   82d9e:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   82da0:	4a05      	ldr	r2, [pc, #20]	; (82db8 <pmc_enable_pck+0x20>)
   82da2:	f44f 7180 	mov.w	r1, #256	; 0x100
   82da6:	687b      	ldr	r3, [r7, #4]
   82da8:	fa01 f303 	lsl.w	r3, r1, r3
   82dac:	6013      	str	r3, [r2, #0]
}
   82dae:	bf00      	nop
   82db0:	370c      	adds	r7, #12
   82db2:	46bd      	mov	sp, r7
   82db4:	bc80      	pop	{r7}
   82db6:	4770      	bx	lr
   82db8:	400e0400 	.word	0x400e0400

00082dbc <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   82dbc:	b480      	push	{r7}
   82dbe:	b083      	sub	sp, #12
   82dc0:	af00      	add	r7, sp, #0
   82dc2:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   82dc4:	687b      	ldr	r3, [r7, #4]
   82dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
   82dca:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   82dcc:	4b05      	ldr	r3, [pc, #20]	; (82de4 <pmc_set_fast_startup_input+0x28>)
   82dce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82dd0:	4904      	ldr	r1, [pc, #16]	; (82de4 <pmc_set_fast_startup_input+0x28>)
   82dd2:	687b      	ldr	r3, [r7, #4]
   82dd4:	4313      	orrs	r3, r2
   82dd6:	670b      	str	r3, [r1, #112]	; 0x70
}
   82dd8:	bf00      	nop
   82dda:	370c      	adds	r7, #12
   82ddc:	46bd      	mov	sp, r7
   82dde:	bc80      	pop	{r7}
   82de0:	4770      	bx	lr
   82de2:	bf00      	nop
   82de4:	400e0400 	.word	0x400e0400

00082de8 <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   82de8:	b480      	push	{r7}
   82dea:	b083      	sub	sp, #12
   82dec:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   82dee:	4b13      	ldr	r3, [pc, #76]	; (82e3c <pmc_enable_waitmode+0x54>)
   82df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82df2:	4a12      	ldr	r2, [pc, #72]	; (82e3c <pmc_enable_waitmode+0x54>)
   82df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82df8:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   82dfa:	4b11      	ldr	r3, [pc, #68]	; (82e40 <pmc_enable_waitmode+0x58>)
   82dfc:	691b      	ldr	r3, [r3, #16]
   82dfe:	4a10      	ldr	r2, [pc, #64]	; (82e40 <pmc_enable_waitmode+0x58>)
   82e00:	f023 0304 	bic.w	r3, r3, #4
   82e04:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   82e06:	bf20      	wfe
}
   82e08:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   82e0a:	2300      	movs	r3, #0
   82e0c:	607b      	str	r3, [r7, #4]
   82e0e:	e004      	b.n	82e1a <pmc_enable_waitmode+0x32>
  __ASM volatile ("nop");
   82e10:	bf00      	nop
}
   82e12:	bf00      	nop
   82e14:	687b      	ldr	r3, [r7, #4]
   82e16:	3301      	adds	r3, #1
   82e18:	607b      	str	r3, [r7, #4]
   82e1a:	687b      	ldr	r3, [r7, #4]
   82e1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82e20:	d3f6      	bcc.n	82e10 <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   82e22:	bf00      	nop
   82e24:	4b05      	ldr	r3, [pc, #20]	; (82e3c <pmc_enable_waitmode+0x54>)
   82e26:	6a1b      	ldr	r3, [r3, #32]
   82e28:	f003 0308 	and.w	r3, r3, #8
   82e2c:	2b00      	cmp	r3, #0
   82e2e:	d0f9      	beq.n	82e24 <pmc_enable_waitmode+0x3c>

}
   82e30:	bf00      	nop
   82e32:	bf00      	nop
   82e34:	370c      	adds	r7, #12
   82e36:	46bd      	mov	sp, r7
   82e38:	bc80      	pop	{r7}
   82e3a:	4770      	bx	lr
   82e3c:	400e0400 	.word	0x400e0400
   82e40:	e000ed00 	.word	0xe000ed00

00082e44 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   82e44:	b580      	push	{r7, lr}
   82e46:	b086      	sub	sp, #24
   82e48:	af00      	add	r7, sp, #0
   82e4a:	60f8      	str	r0, [r7, #12]
   82e4c:	60b9      	str	r1, [r7, #8]
   82e4e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   82e50:	2300      	movs	r3, #0
   82e52:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   82e54:	68fb      	ldr	r3, [r7, #12]
   82e56:	2b00      	cmp	r3, #0
   82e58:	d012      	beq.n	82e80 <_read+0x3c>
		return -1;
   82e5a:	f04f 33ff 	mov.w	r3, #4294967295
   82e5e:	e013      	b.n	82e88 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   82e60:	4b0b      	ldr	r3, [pc, #44]	; (82e90 <_read+0x4c>)
   82e62:	681b      	ldr	r3, [r3, #0]
   82e64:	4a0b      	ldr	r2, [pc, #44]	; (82e94 <_read+0x50>)
   82e66:	6812      	ldr	r2, [r2, #0]
   82e68:	68b9      	ldr	r1, [r7, #8]
   82e6a:	4610      	mov	r0, r2
   82e6c:	4798      	blx	r3
		ptr++;
   82e6e:	68bb      	ldr	r3, [r7, #8]
   82e70:	3301      	adds	r3, #1
   82e72:	60bb      	str	r3, [r7, #8]
		nChars++;
   82e74:	697b      	ldr	r3, [r7, #20]
   82e76:	3301      	adds	r3, #1
   82e78:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   82e7a:	687b      	ldr	r3, [r7, #4]
   82e7c:	3b01      	subs	r3, #1
   82e7e:	607b      	str	r3, [r7, #4]
   82e80:	687b      	ldr	r3, [r7, #4]
   82e82:	2b00      	cmp	r3, #0
   82e84:	dcec      	bgt.n	82e60 <_read+0x1c>
	}
	return nChars;
   82e86:	697b      	ldr	r3, [r7, #20]
}
   82e88:	4618      	mov	r0, r3
   82e8a:	3718      	adds	r7, #24
   82e8c:	46bd      	mov	sp, r7
   82e8e:	bd80      	pop	{r7, pc}
   82e90:	2000181c 	.word	0x2000181c
   82e94:	20001844 	.word	0x20001844

00082e98 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   82e98:	b5b0      	push	{r4, r5, r7, lr}
   82e9a:	b09c      	sub	sp, #112	; 0x70
   82e9c:	af00      	add	r7, sp, #0
   82e9e:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   82ea0:	687b      	ldr	r3, [r7, #4]
   82ea2:	2b05      	cmp	r3, #5
   82ea4:	f000 81e8 	beq.w	83278 <pmc_sleep+0x3e0>
   82ea8:	687b      	ldr	r3, [r7, #4]
   82eaa:	2b05      	cmp	r3, #5
   82eac:	f300 81f5 	bgt.w	8329a <pmc_sleep+0x402>
   82eb0:	687b      	ldr	r3, [r7, #4]
   82eb2:	2b02      	cmp	r3, #2
   82eb4:	dc03      	bgt.n	82ebe <pmc_sleep+0x26>
   82eb6:	687b      	ldr	r3, [r7, #4]
   82eb8:	2b00      	cmp	r3, #0
   82eba:	dc06      	bgt.n	82eca <pmc_sleep+0x32>
		__WFE() ;
#endif
		break;
#endif
	}
}
   82ebc:	e1ed      	b.n	8329a <pmc_sleep+0x402>
   82ebe:	687b      	ldr	r3, [r7, #4]
   82ec0:	3b03      	subs	r3, #3
	switch (sleep_mode) {
   82ec2:	2b01      	cmp	r3, #1
   82ec4:	f200 81e9 	bhi.w	8329a <pmc_sleep+0x402>
   82ec8:	e01b      	b.n	82f02 <pmc_sleep+0x6a>
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   82eca:	4b88      	ldr	r3, [pc, #544]	; (830ec <pmc_sleep+0x254>)
   82ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82ece:	4a87      	ldr	r2, [pc, #540]	; (830ec <pmc_sleep+0x254>)
   82ed0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   82ed4:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   82ed6:	4b86      	ldr	r3, [pc, #536]	; (830f0 <pmc_sleep+0x258>)
   82ed8:	691b      	ldr	r3, [r3, #16]
   82eda:	4a85      	ldr	r2, [pc, #532]	; (830f0 <pmc_sleep+0x258>)
   82edc:	f023 0304 	bic.w	r3, r3, #4
   82ee0:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   82ee2:	4b84      	ldr	r3, [pc, #528]	; (830f4 <pmc_sleep+0x25c>)
   82ee4:	2201      	movs	r2, #1
   82ee6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82ee8:	f3bf 8f5f 	dmb	sy
}
   82eec:	bf00      	nop
  __ASM volatile ("cpsie i");
   82eee:	b662      	cpsie	i
}
   82ef0:	bf00      	nop
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   82ef2:	687b      	ldr	r3, [r7, #4]
   82ef4:	2b02      	cmp	r3, #2
   82ef6:	d101      	bne.n	82efc <pmc_sleep+0x64>
  __ASM volatile ("wfi");
   82ef8:	bf30      	wfi
}
   82efa:	e001      	b.n	82f00 <pmc_sleep+0x68>
  __ASM volatile ("wfe");
   82efc:	bf20      	wfe
}
   82efe:	bf00      	nop
		break;
   82f00:	e1cb      	b.n	8329a <pmc_sleep+0x402>
  __ASM volatile ("cpsid i");
   82f02:	b672      	cpsid	i
}
   82f04:	bf00      	nop
  __ASM volatile ("dmb");
   82f06:	f3bf 8f5f 	dmb	sy
}
   82f0a:	bf00      	nop
		cpu_irq_disable();
   82f0c:	4b79      	ldr	r3, [pc, #484]	; (830f4 <pmc_sleep+0x25c>)
   82f0e:	2200      	movs	r2, #0
   82f10:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   82f12:	4b79      	ldr	r3, [pc, #484]	; (830f8 <pmc_sleep+0x260>)
   82f14:	2201      	movs	r2, #1
   82f16:	701a      	strb	r2, [r3, #0]
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   82f18:	687b      	ldr	r3, [r7, #4]
   82f1a:	2b04      	cmp	r3, #4
   82f1c:	bf0c      	ite	eq
   82f1e:	2301      	moveq	r3, #1
   82f20:	2300      	movne	r3, #0
   82f22:	b2da      	uxtb	r2, r3
   82f24:	f107 0320 	add.w	r3, r7, #32
   82f28:	64fb      	str	r3, [r7, #76]	; 0x4c
   82f2a:	f107 031c 	add.w	r3, r7, #28
   82f2e:	64bb      	str	r3, [r7, #72]	; 0x48
   82f30:	f107 0318 	add.w	r3, r7, #24
   82f34:	647b      	str	r3, [r7, #68]	; 0x44
   82f36:	f107 0314 	add.w	r3, r7, #20
   82f3a:	643b      	str	r3, [r7, #64]	; 0x40
   82f3c:	f107 0310 	add.w	r3, r7, #16
   82f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   82f42:	f107 030c 	add.w	r3, r7, #12
   82f46:	63bb      	str	r3, [r7, #56]	; 0x38
   82f48:	4613      	mov	r3, r2
   82f4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   82f4e:	4b67      	ldr	r3, [pc, #412]	; (830ec <pmc_sleep+0x254>)
   82f50:	6a1b      	ldr	r3, [r3, #32]
   82f52:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   82f54:	4b65      	ldr	r3, [pc, #404]	; (830ec <pmc_sleep+0x254>)
   82f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82f58:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   82f5a:	4b68      	ldr	r3, [pc, #416]	; (830fc <pmc_sleep+0x264>)
   82f5c:	681b      	ldr	r3, [r3, #0]
   82f5e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   82f60:	4b67      	ldr	r3, [pc, #412]	; (83100 <pmc_sleep+0x268>)
   82f62:	681b      	ldr	r3, [r3, #0]
   82f64:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   82f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   82f68:	2b00      	cmp	r3, #0
   82f6a:	d002      	beq.n	82f72 <pmc_sleep+0xda>
		*p_osc_setting = mor;
   82f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   82f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   82f70:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   82f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   82f74:	2b00      	cmp	r3, #0
   82f76:	d003      	beq.n	82f80 <pmc_sleep+0xe8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   82f78:	4b5c      	ldr	r3, [pc, #368]	; (830ec <pmc_sleep+0x254>)
   82f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   82f7e:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   82f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   82f82:	2b00      	cmp	r3, #0
   82f84:	d003      	beq.n	82f8e <pmc_sleep+0xf6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   82f86:	4b59      	ldr	r3, [pc, #356]	; (830ec <pmc_sleep+0x254>)
   82f88:	69da      	ldr	r2, [r3, #28]
   82f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   82f8c:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   82f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82f90:	2b00      	cmp	r3, #0
   82f92:	d002      	beq.n	82f9a <pmc_sleep+0x102>
		*p_mck_setting  = mckr;
   82f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   82f98:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   82f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82f9c:	2b00      	cmp	r3, #0
   82f9e:	d002      	beq.n	82fa6 <pmc_sleep+0x10e>
		*p_fmr_setting  = fmr;
   82fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   82fa4:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   82fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82fa8:	2b00      	cmp	r3, #0
   82faa:	d002      	beq.n	82fb2 <pmc_sleep+0x11a>
		*p_fmr_setting1 = fmr1;
   82fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   82fb0:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   82fb2:	4a4e      	ldr	r2, [pc, #312]	; (830ec <pmc_sleep+0x254>)
   82fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82fb6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82fba:	f043 0308 	orr.w	r3, r3, #8
   82fbe:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   82fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82fc2:	f003 0302 	and.w	r3, r3, #2
   82fc6:	2b00      	cmp	r3, #0
   82fc8:	d00f      	beq.n	82fea <pmc_sleep+0x152>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   82fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82fcc:	f023 0303 	bic.w	r3, r3, #3
   82fd0:	f043 0301 	orr.w	r3, r3, #1
   82fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   82fd6:	4a45      	ldr	r2, [pc, #276]	; (830ec <pmc_sleep+0x254>)
   82fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82fda:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82fdc:	bf00      	nop
   82fde:	4b43      	ldr	r3, [pc, #268]	; (830ec <pmc_sleep+0x254>)
   82fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82fe2:	f003 0308 	and.w	r3, r3, #8
   82fe6:	2b00      	cmp	r3, #0
   82fe8:	d0f9      	beq.n	82fde <pmc_sleep+0x146>
	if (mckr & PMC_MCKR_PRES_Msk) {
   82fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82ff0:	2b00      	cmp	r3, #0
   82ff2:	d00d      	beq.n	83010 <pmc_sleep+0x178>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   82ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   82ffc:	4a3b      	ldr	r2, [pc, #236]	; (830ec <pmc_sleep+0x254>)
   82ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   83000:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   83002:	bf00      	nop
   83004:	4b39      	ldr	r3, [pc, #228]	; (830ec <pmc_sleep+0x254>)
   83006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83008:	f003 0308 	and.w	r3, r3, #8
   8300c:	2b00      	cmp	r3, #0
   8300e:	d0f9      	beq.n	83004 <pmc_sleep+0x16c>
	pmc_disable_pllack();
   83010:	4b3c      	ldr	r3, [pc, #240]	; (83104 <pmc_sleep+0x26c>)
   83012:	4798      	blx	r3
	pmc_disable_upll_clock();
   83014:	4b3c      	ldr	r3, [pc, #240]	; (83108 <pmc_sleep+0x270>)
   83016:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83018:	bf00      	nop
   8301a:	4b34      	ldr	r3, [pc, #208]	; (830ec <pmc_sleep+0x254>)
   8301c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83022:	2b00      	cmp	r3, #0
   83024:	d0f9      	beq.n	8301a <pmc_sleep+0x182>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   83026:	4b31      	ldr	r3, [pc, #196]	; (830ec <pmc_sleep+0x254>)
   83028:	6a1b      	ldr	r3, [r3, #32]
   8302a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8302e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83032:	4a2e      	ldr	r2, [pc, #184]	; (830ec <pmc_sleep+0x254>)
   83034:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83038:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   8303a:	bf00      	nop
   8303c:	4b2b      	ldr	r3, [pc, #172]	; (830ec <pmc_sleep+0x254>)
   8303e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   83044:	2b00      	cmp	r3, #0
   83046:	d0f9      	beq.n	8303c <pmc_sleep+0x1a4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   83048:	4a2c      	ldr	r2, [pc, #176]	; (830fc <pmc_sleep+0x264>)
   8304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8304c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   83050:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   83052:	4a2b      	ldr	r2, [pc, #172]	; (83100 <pmc_sleep+0x268>)
   83054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83056:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   8305a:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   8305c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   83060:	2b00      	cmp	r3, #0
   83062:	d009      	beq.n	83078 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83064:	4b21      	ldr	r3, [pc, #132]	; (830ec <pmc_sleep+0x254>)
   83066:	6a1b      	ldr	r3, [r3, #32]
   83068:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8306c:	f023 0301 	bic.w	r3, r3, #1
   83070:	4a1e      	ldr	r2, [pc, #120]	; (830ec <pmc_sleep+0x254>)
   83072:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83076:	6213      	str	r3, [r2, #32]
}
   83078:	bf00      	nop
		cpu_irq_enable();
   8307a:	4b1e      	ldr	r3, [pc, #120]	; (830f4 <pmc_sleep+0x25c>)
   8307c:	2201      	movs	r2, #1
   8307e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   83080:	f3bf 8f5f 	dmb	sy
}
   83084:	bf00      	nop
  __ASM volatile ("cpsie i");
   83086:	b662      	cpsie	i
}
   83088:	bf00      	nop
		pmc_enable_waitmode();
   8308a:	4b20      	ldr	r3, [pc, #128]	; (8310c <pmc_sleep+0x274>)
   8308c:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   8308e:	b672      	cpsid	i
}
   83090:	bf00      	nop
  __ASM volatile ("dmb");
   83092:	f3bf 8f5f 	dmb	sy
}
   83096:	bf00      	nop
		cpu_irq_disable();
   83098:	4b16      	ldr	r3, [pc, #88]	; (830f4 <pmc_sleep+0x25c>)
   8309a:	2200      	movs	r2, #0
   8309c:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   8309e:	6a3d      	ldr	r5, [r7, #32]
   830a0:	69fc      	ldr	r4, [r7, #28]
   830a2:	69b8      	ldr	r0, [r7, #24]
   830a4:	6979      	ldr	r1, [r7, #20]
   830a6:	693a      	ldr	r2, [r7, #16]
   830a8:	68fb      	ldr	r3, [r7, #12]
   830aa:	66fd      	str	r5, [r7, #108]	; 0x6c
   830ac:	66bc      	str	r4, [r7, #104]	; 0x68
   830ae:	6678      	str	r0, [r7, #100]	; 0x64
   830b0:	6639      	str	r1, [r7, #96]	; 0x60
   830b2:	65fa      	str	r2, [r7, #92]	; 0x5c
   830b4:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   830b6:	2300      	movs	r3, #0
   830b8:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   830ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   830bc:	f003 0302 	and.w	r3, r3, #2
   830c0:	2b00      	cmp	r3, #0
   830c2:	d029      	beq.n	83118 <pmc_sleep+0x280>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   830c4:	4b09      	ldr	r3, [pc, #36]	; (830ec <pmc_sleep+0x254>)
   830c6:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   830c8:	4a11      	ldr	r2, [pc, #68]	; (83110 <pmc_sleep+0x278>)
   830ca:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   830cc:	4907      	ldr	r1, [pc, #28]	; (830ec <pmc_sleep+0x254>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   830ce:	4b11      	ldr	r3, [pc, #68]	; (83114 <pmc_sleep+0x27c>)
   830d0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   830d2:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   830d4:	4b05      	ldr	r3, [pc, #20]	; (830ec <pmc_sleep+0x254>)
   830d6:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   830d8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   830dc:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   830e0:	4a02      	ldr	r2, [pc, #8]	; (830ec <pmc_sleep+0x254>)
				| CKGR_MOR_KEY_PASSWD;
   830e2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   830e6:	6213      	str	r3, [r2, #32]
   830e8:	e053      	b.n	83192 <pmc_sleep+0x2fa>
   830ea:	bf00      	nop
   830ec:	400e0400 	.word	0x400e0400
   830f0:	e000ed00 	.word	0xe000ed00
   830f4:	20000284 	.word	0x20000284
   830f8:	20001328 	.word	0x20001328
   830fc:	400e0800 	.word	0x400e0800
   83100:	400e0a00 	.word	0x400e0a00
   83104:	00082c9d 	.word	0x00082c9d
   83108:	00082ccd 	.word	0x00082ccd
   8310c:	00082de9 	.word	0x00082de9
   83110:	fec8fffc 	.word	0xfec8fffc
   83114:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   83118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   8311a:	f003 0301 	and.w	r3, r3, #1
   8311e:	2b00      	cmp	r3, #0
   83120:	d037      	beq.n	83192 <pmc_sleep+0x2fa>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   83122:	4b60      	ldr	r3, [pc, #384]	; (832a4 <pmc_sleep+0x40c>)
   83124:	6a1b      	ldr	r3, [r3, #32]
   83126:	f003 0301 	and.w	r3, r3, #1
   8312a:	2b00      	cmp	r3, #0
   8312c:	d112      	bne.n	83154 <pmc_sleep+0x2bc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8312e:	4b5d      	ldr	r3, [pc, #372]	; (832a4 <pmc_sleep+0x40c>)
   83130:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   83132:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83136:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8313a:	4a5a      	ldr	r2, [pc, #360]	; (832a4 <pmc_sleep+0x40c>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   8313c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83140:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83144:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83146:	bf00      	nop
   83148:	4b56      	ldr	r3, [pc, #344]	; (832a4 <pmc_sleep+0x40c>)
   8314a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8314c:	f003 0301 	and.w	r3, r3, #1
   83150:	2b00      	cmp	r3, #0
   83152:	d0f9      	beq.n	83148 <pmc_sleep+0x2b0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   83154:	4b53      	ldr	r3, [pc, #332]	; (832a4 <pmc_sleep+0x40c>)
   83156:	6a1b      	ldr	r3, [r3, #32]
   83158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8315c:	2b00      	cmp	r3, #0
   8315e:	d10e      	bne.n	8317e <pmc_sleep+0x2e6>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83160:	4b50      	ldr	r3, [pc, #320]	; (832a4 <pmc_sleep+0x40c>)
   83162:	6a1b      	ldr	r3, [r3, #32]
   83164:	4a4f      	ldr	r2, [pc, #316]	; (832a4 <pmc_sleep+0x40c>)
   83166:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8316a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8316e:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   83170:	bf00      	nop
   83172:	4b4c      	ldr	r3, [pc, #304]	; (832a4 <pmc_sleep+0x40c>)
   83174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   8317a:	2b00      	cmp	r3, #0
   8317c:	d0f9      	beq.n	83172 <pmc_sleep+0x2da>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8317e:	4b49      	ldr	r3, [pc, #292]	; (832a4 <pmc_sleep+0x40c>)
   83180:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   83182:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83186:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8318a:	4a46      	ldr	r2, [pc, #280]	; (832a4 <pmc_sleep+0x40c>)
					| CKGR_MOR_KEY_PASSWD;
   8318c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   83190:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   83192:	6eba      	ldr	r2, [r7, #104]	; 0x68
   83194:	4b44      	ldr	r3, [pc, #272]	; (832a8 <pmc_sleep+0x410>)
   83196:	4013      	ands	r3, r2
   83198:	2b00      	cmp	r3, #0
   8319a:	d008      	beq.n	831ae <pmc_sleep+0x316>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   8319c:	4a41      	ldr	r2, [pc, #260]	; (832a4 <pmc_sleep+0x40c>)
   8319e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   831a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   831a4:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   831a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   831a8:	f043 0302 	orr.w	r3, r3, #2
   831ac:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   831ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   831b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   831b4:	2b00      	cmp	r3, #0
   831b6:	d006      	beq.n	831c6 <pmc_sleep+0x32e>
		PMC->CKGR_UCKR = pll1_setting;
   831b8:	4a3a      	ldr	r2, [pc, #232]	; (832a4 <pmc_sleep+0x40c>)
   831ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   831bc:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   831be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   831c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   831c4:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   831c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   831c8:	f003 0303 	and.w	r3, r3, #3
   831cc:	2b02      	cmp	r3, #2
   831ce:	d002      	beq.n	831d6 <pmc_sleep+0x33e>
   831d0:	2b03      	cmp	r3, #3
   831d2:	d008      	beq.n	831e6 <pmc_sleep+0x34e>
   831d4:	e00f      	b.n	831f6 <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   831d6:	bf00      	nop
   831d8:	4b32      	ldr	r3, [pc, #200]	; (832a4 <pmc_sleep+0x40c>)
   831da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   831dc:	f003 0302 	and.w	r3, r3, #2
   831e0:	2b00      	cmp	r3, #0
   831e2:	d0f9      	beq.n	831d8 <pmc_sleep+0x340>
		break;
   831e4:	e007      	b.n	831f6 <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   831e6:	bf00      	nop
   831e8:	4b2e      	ldr	r3, [pc, #184]	; (832a4 <pmc_sleep+0x40c>)
   831ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   831ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
   831f0:	2b00      	cmp	r3, #0
   831f2:	d0f9      	beq.n	831e8 <pmc_sleep+0x350>
		break;
   831f4:	bf00      	nop
	mckr = PMC->PMC_MCKR;
   831f6:	4b2b      	ldr	r3, [pc, #172]	; (832a4 <pmc_sleep+0x40c>)
   831f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   831fa:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   831fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   831fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   83202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   83204:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   83208:	4926      	ldr	r1, [pc, #152]	; (832a4 <pmc_sleep+0x40c>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   8320a:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   8320c:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8320e:	bf00      	nop
   83210:	4b24      	ldr	r3, [pc, #144]	; (832a4 <pmc_sleep+0x40c>)
   83212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83214:	f003 0308 	and.w	r3, r3, #8
   83218:	2b00      	cmp	r3, #0
   8321a:	d0f9      	beq.n	83210 <pmc_sleep+0x378>
	EFC0->EEFC_FMR = fmr_setting;
   8321c:	4a23      	ldr	r2, [pc, #140]	; (832ac <pmc_sleep+0x414>)
   8321e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   83220:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   83222:	4a23      	ldr	r2, [pc, #140]	; (832b0 <pmc_sleep+0x418>)
   83224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   83226:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   83228:	4a1e      	ldr	r2, [pc, #120]	; (832a4 <pmc_sleep+0x40c>)
   8322a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   8322c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8322e:	bf00      	nop
   83230:	4b1c      	ldr	r3, [pc, #112]	; (832a4 <pmc_sleep+0x40c>)
   83232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83234:	f003 0308 	and.w	r3, r3, #8
   83238:	2b00      	cmp	r3, #0
   8323a:	d0f9      	beq.n	83230 <pmc_sleep+0x398>
	while (!(PMC->PMC_SR & pll_sr));
   8323c:	bf00      	nop
   8323e:	4b19      	ldr	r3, [pc, #100]	; (832a4 <pmc_sleep+0x40c>)
   83240:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   83242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   83244:	4013      	ands	r3, r2
   83246:	2b00      	cmp	r3, #0
   83248:	d0f9      	beq.n	8323e <pmc_sleep+0x3a6>
}
   8324a:	bf00      	nop
		b_is_sleep_clock_used = false;
   8324c:	4b19      	ldr	r3, [pc, #100]	; (832b4 <pmc_sleep+0x41c>)
   8324e:	2200      	movs	r2, #0
   83250:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   83252:	4b19      	ldr	r3, [pc, #100]	; (832b8 <pmc_sleep+0x420>)
   83254:	681b      	ldr	r3, [r3, #0]
   83256:	2b00      	cmp	r3, #0
   83258:	d005      	beq.n	83266 <pmc_sleep+0x3ce>
			callback_clocks_restored();
   8325a:	4b17      	ldr	r3, [pc, #92]	; (832b8 <pmc_sleep+0x420>)
   8325c:	681b      	ldr	r3, [r3, #0]
   8325e:	4798      	blx	r3
			callback_clocks_restored = NULL;
   83260:	4b15      	ldr	r3, [pc, #84]	; (832b8 <pmc_sleep+0x420>)
   83262:	2200      	movs	r2, #0
   83264:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
   83266:	4b15      	ldr	r3, [pc, #84]	; (832bc <pmc_sleep+0x424>)
   83268:	2201      	movs	r2, #1
   8326a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8326c:	f3bf 8f5f 	dmb	sy
}
   83270:	bf00      	nop
  __ASM volatile ("cpsie i");
   83272:	b662      	cpsie	i
}
   83274:	bf00      	nop
		break;
   83276:	e010      	b.n	8329a <pmc_sleep+0x402>
		SCB->SCR |= SCR_SLEEPDEEP;
   83278:	4b11      	ldr	r3, [pc, #68]	; (832c0 <pmc_sleep+0x428>)
   8327a:	691b      	ldr	r3, [r3, #16]
   8327c:	4a10      	ldr	r2, [pc, #64]	; (832c0 <pmc_sleep+0x428>)
   8327e:	f043 0304 	orr.w	r3, r3, #4
   83282:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   83284:	4b0d      	ldr	r3, [pc, #52]	; (832bc <pmc_sleep+0x424>)
   83286:	2201      	movs	r2, #1
   83288:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8328a:	f3bf 8f5f 	dmb	sy
}
   8328e:	bf00      	nop
  __ASM volatile ("cpsie i");
   83290:	b662      	cpsie	i
}
   83292:	bf00      	nop
  __ASM volatile ("wfe");
   83294:	bf20      	wfe
}
   83296:	bf00      	nop
		break;
   83298:	bf00      	nop
}
   8329a:	bf00      	nop
   8329c:	3770      	adds	r7, #112	; 0x70
   8329e:	46bd      	mov	sp, r7
   832a0:	bdb0      	pop	{r4, r5, r7, pc}
   832a2:	bf00      	nop
   832a4:	400e0400 	.word	0x400e0400
   832a8:	07ff0000 	.word	0x07ff0000
   832ac:	400e0800 	.word	0x400e0800
   832b0:	400e0a00 	.word	0x400e0a00
   832b4:	20001328 	.word	0x20001328
   832b8:	2000132c 	.word	0x2000132c
   832bc:	20000284 	.word	0x20000284
   832c0:	e000ed00 	.word	0xe000ed00

000832c4 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   832c4:	b480      	push	{r7}
   832c6:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   832c8:	4b08      	ldr	r3, [pc, #32]	; (832ec <pmc_is_wakeup_clocks_restored+0x28>)
   832ca:	781b      	ldrb	r3, [r3, #0]
   832cc:	b2db      	uxtb	r3, r3
   832ce:	2b00      	cmp	r3, #0
   832d0:	bf14      	ite	ne
   832d2:	2301      	movne	r3, #1
   832d4:	2300      	moveq	r3, #0
   832d6:	b2db      	uxtb	r3, r3
   832d8:	f083 0301 	eor.w	r3, r3, #1
   832dc:	b2db      	uxtb	r3, r3
   832de:	f003 0301 	and.w	r3, r3, #1
   832e2:	b2db      	uxtb	r3, r3
}
   832e4:	4618      	mov	r0, r3
   832e6:	46bd      	mov	sp, r7
   832e8:	bc80      	pop	{r7}
   832ea:	4770      	bx	lr
   832ec:	20001328 	.word	0x20001328

000832f0 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   832f0:	b480      	push	{r7}
   832f2:	b085      	sub	sp, #20
   832f4:	af00      	add	r7, sp, #0
   832f6:	60f8      	str	r0, [r7, #12]
   832f8:	60b9      	str	r1, [r7, #8]
   832fa:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   832fc:	68f9      	ldr	r1, [r7, #12]
   832fe:	68ba      	ldr	r2, [r7, #8]
   83300:	4613      	mov	r3, r2
   83302:	009b      	lsls	r3, r3, #2
   83304:	4413      	add	r3, r2
   83306:	009b      	lsls	r3, r3, #2
   83308:	440b      	add	r3, r1
   8330a:	3370      	adds	r3, #112	; 0x70
   8330c:	687a      	ldr	r2, [r7, #4]
   8330e:	601a      	str	r2, [r3, #0]
}
   83310:	bf00      	nop
   83312:	3714      	adds	r7, #20
   83314:	46bd      	mov	sp, r7
   83316:	bc80      	pop	{r7}
   83318:	4770      	bx	lr

0008331a <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   8331a:	b480      	push	{r7}
   8331c:	b085      	sub	sp, #20
   8331e:	af00      	add	r7, sp, #0
   83320:	60f8      	str	r0, [r7, #12]
   83322:	60b9      	str	r1, [r7, #8]
   83324:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   83326:	68f9      	ldr	r1, [r7, #12]
   83328:	68ba      	ldr	r2, [r7, #8]
   8332a:	4613      	mov	r3, r2
   8332c:	009b      	lsls	r3, r3, #2
   8332e:	4413      	add	r3, r2
   83330:	009b      	lsls	r3, r3, #2
   83332:	440b      	add	r3, r1
   83334:	3374      	adds	r3, #116	; 0x74
   83336:	687a      	ldr	r2, [r7, #4]
   83338:	601a      	str	r2, [r3, #0]
}
   8333a:	bf00      	nop
   8333c:	3714      	adds	r7, #20
   8333e:	46bd      	mov	sp, r7
   83340:	bc80      	pop	{r7}
   83342:	4770      	bx	lr

00083344 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   83344:	b480      	push	{r7}
   83346:	b085      	sub	sp, #20
   83348:	af00      	add	r7, sp, #0
   8334a:	60f8      	str	r0, [r7, #12]
   8334c:	60b9      	str	r1, [r7, #8]
   8334e:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   83350:	68f9      	ldr	r1, [r7, #12]
   83352:	68ba      	ldr	r2, [r7, #8]
   83354:	4613      	mov	r3, r2
   83356:	009b      	lsls	r3, r3, #2
   83358:	4413      	add	r3, r2
   8335a:	009b      	lsls	r3, r3, #2
   8335c:	440b      	add	r3, r1
   8335e:	3378      	adds	r3, #120	; 0x78
   83360:	687a      	ldr	r2, [r7, #4]
   83362:	601a      	str	r2, [r3, #0]
}
   83364:	bf00      	nop
   83366:	3714      	adds	r7, #20
   83368:	46bd      	mov	sp, r7
   8336a:	bc80      	pop	{r7}
   8336c:	4770      	bx	lr

0008336e <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   8336e:	b480      	push	{r7}
   83370:	b085      	sub	sp, #20
   83372:	af00      	add	r7, sp, #0
   83374:	60f8      	str	r0, [r7, #12]
   83376:	60b9      	str	r1, [r7, #8]
   83378:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   8337a:	68f9      	ldr	r1, [r7, #12]
   8337c:	68ba      	ldr	r2, [r7, #8]
   8337e:	4613      	mov	r3, r2
   83380:	009b      	lsls	r3, r3, #2
   83382:	4413      	add	r3, r2
   83384:	009b      	lsls	r3, r3, #2
   83386:	440b      	add	r3, r1
   83388:	3380      	adds	r3, #128	; 0x80
   8338a:	687a      	ldr	r2, [r7, #4]
   8338c:	601a      	str	r2, [r3, #0]
}
   8338e:	bf00      	nop
   83390:	3714      	adds	r7, #20
   83392:	46bd      	mov	sp, r7
   83394:	bc80      	pop	{r7}
   83396:	4770      	bx	lr

00083398 <sysclk_enable_peripheral_clock>:
{
   83398:	b580      	push	{r7, lr}
   8339a:	b082      	sub	sp, #8
   8339c:	af00      	add	r7, sp, #0
   8339e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   833a0:	6878      	ldr	r0, [r7, #4]
   833a2:	4b03      	ldr	r3, [pc, #12]	; (833b0 <sysclk_enable_peripheral_clock+0x18>)
   833a4:	4798      	blx	r3
}
   833a6:	bf00      	nop
   833a8:	3708      	adds	r7, #8
   833aa:	46bd      	mov	sp, r7
   833ac:	bd80      	pop	{r7, pc}
   833ae:	bf00      	nop
   833b0:	00082d01 	.word	0x00082d01

000833b4 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   833b4:	b580      	push	{r7, lr}
   833b6:	b082      	sub	sp, #8
   833b8:	af00      	add	r7, sp, #0
   833ba:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
   833bc:	2014      	movs	r0, #20
   833be:	4b03      	ldr	r3, [pc, #12]	; (833cc <spi_enable_clock+0x18>)
   833c0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   833c2:	bf00      	nop
   833c4:	3708      	adds	r7, #8
   833c6:	46bd      	mov	sp, r7
   833c8:	bd80      	pop	{r7, pc}
   833ca:	bf00      	nop
   833cc:	00083399 	.word	0x00083399

000833d0 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   833d0:	b480      	push	{r7}
   833d2:	b085      	sub	sp, #20
   833d4:	af00      	add	r7, sp, #0
   833d6:	60f8      	str	r0, [r7, #12]
   833d8:	60b9      	str	r1, [r7, #8]
   833da:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   833dc:	687b      	ldr	r3, [r7, #4]
   833de:	2b00      	cmp	r3, #0
   833e0:	d00c      	beq.n	833fc <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   833e2:	68fb      	ldr	r3, [r7, #12]
   833e4:	68ba      	ldr	r2, [r7, #8]
   833e6:	320c      	adds	r2, #12
   833e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   833ec:	f043 0101 	orr.w	r1, r3, #1
   833f0:	68fb      	ldr	r3, [r7, #12]
   833f2:	68ba      	ldr	r2, [r7, #8]
   833f4:	320c      	adds	r2, #12
   833f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
   833fa:	e00b      	b.n	83414 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   833fc:	68fb      	ldr	r3, [r7, #12]
   833fe:	68ba      	ldr	r2, [r7, #8]
   83400:	320c      	adds	r2, #12
   83402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83406:	f023 0101 	bic.w	r1, r3, #1
   8340a:	68fb      	ldr	r3, [r7, #12]
   8340c:	68ba      	ldr	r2, [r7, #8]
   8340e:	320c      	adds	r2, #12
   83410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   83414:	bf00      	nop
   83416:	3714      	adds	r7, #20
   83418:	46bd      	mov	sp, r7
   8341a:	bc80      	pop	{r7}
   8341c:	4770      	bx	lr

0008341e <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   8341e:	b480      	push	{r7}
   83420:	b085      	sub	sp, #20
   83422:	af00      	add	r7, sp, #0
   83424:	60f8      	str	r0, [r7, #12]
   83426:	60b9      	str	r1, [r7, #8]
   83428:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   8342a:	687b      	ldr	r3, [r7, #4]
   8342c:	2b00      	cmp	r3, #0
   8342e:	d00c      	beq.n	8344a <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   83430:	68fb      	ldr	r3, [r7, #12]
   83432:	68ba      	ldr	r2, [r7, #8]
   83434:	320c      	adds	r2, #12
   83436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8343a:	f043 0102 	orr.w	r1, r3, #2
   8343e:	68fb      	ldr	r3, [r7, #12]
   83440:	68ba      	ldr	r2, [r7, #8]
   83442:	320c      	adds	r2, #12
   83444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
   83448:	e00b      	b.n	83462 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8344a:	68fb      	ldr	r3, [r7, #12]
   8344c:	68ba      	ldr	r2, [r7, #8]
   8344e:	320c      	adds	r2, #12
   83450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83454:	f023 0102 	bic.w	r1, r3, #2
   83458:	68fb      	ldr	r3, [r7, #12]
   8345a:	68ba      	ldr	r2, [r7, #8]
   8345c:	320c      	adds	r2, #12
   8345e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   83462:	bf00      	nop
   83464:	3714      	adds	r7, #20
   83466:	46bd      	mov	sp, r7
   83468:	bc80      	pop	{r7}
   8346a:	4770      	bx	lr

0008346c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   8346c:	b480      	push	{r7}
   8346e:	b085      	sub	sp, #20
   83470:	af00      	add	r7, sp, #0
   83472:	60f8      	str	r0, [r7, #12]
   83474:	60b9      	str	r1, [r7, #8]
   83476:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   83478:	68fb      	ldr	r3, [r7, #12]
   8347a:	68ba      	ldr	r2, [r7, #8]
   8347c:	320c      	adds	r2, #12
   8347e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83482:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   83486:	68fb      	ldr	r3, [r7, #12]
   83488:	68ba      	ldr	r2, [r7, #8]
   8348a:	320c      	adds	r2, #12
   8348c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   83490:	68fb      	ldr	r3, [r7, #12]
   83492:	68ba      	ldr	r2, [r7, #8]
   83494:	320c      	adds	r2, #12
   83496:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8349a:	687b      	ldr	r3, [r7, #4]
   8349c:	ea42 0103 	orr.w	r1, r2, r3
   834a0:	68fb      	ldr	r3, [r7, #12]
   834a2:	68ba      	ldr	r2, [r7, #8]
   834a4:	320c      	adds	r2, #12
   834a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   834aa:	bf00      	nop
   834ac:	3714      	adds	r7, #20
   834ae:	46bd      	mov	sp, r7
   834b0:	bc80      	pop	{r7}
   834b2:	4770      	bx	lr

000834b4 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   834b4:	b480      	push	{r7}
   834b6:	b085      	sub	sp, #20
   834b8:	af00      	add	r7, sp, #0
   834ba:	6078      	str	r0, [r7, #4]
   834bc:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
   834be:	683a      	ldr	r2, [r7, #0]
   834c0:	687b      	ldr	r3, [r7, #4]
   834c2:	4413      	add	r3, r2
   834c4:	1e5a      	subs	r2, r3, #1
   834c6:	687b      	ldr	r3, [r7, #4]
   834c8:	fbb2 f3f3 	udiv	r3, r2, r3
   834cc:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   834ce:	68fb      	ldr	r3, [r7, #12]
   834d0:	2b00      	cmp	r3, #0
   834d2:	dd02      	ble.n	834da <spi_calc_baudrate_div+0x26>
   834d4:	68fb      	ldr	r3, [r7, #12]
   834d6:	2bff      	cmp	r3, #255	; 0xff
   834d8:	dd02      	ble.n	834e0 <spi_calc_baudrate_div+0x2c>
		return -1;
   834da:	f04f 33ff 	mov.w	r3, #4294967295
   834de:	e001      	b.n	834e4 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
   834e0:	68fb      	ldr	r3, [r7, #12]
   834e2:	b21b      	sxth	r3, r3
}
   834e4:	4618      	mov	r0, r3
   834e6:	3714      	adds	r7, #20
   834e8:	46bd      	mov	sp, r7
   834ea:	bc80      	pop	{r7}
   834ec:	4770      	bx	lr

000834ee <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   834ee:	b480      	push	{r7}
   834f0:	b085      	sub	sp, #20
   834f2:	af00      	add	r7, sp, #0
   834f4:	60f8      	str	r0, [r7, #12]
   834f6:	60b9      	str	r1, [r7, #8]
   834f8:	4613      	mov	r3, r2
   834fa:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   834fc:	68fb      	ldr	r3, [r7, #12]
   834fe:	68ba      	ldr	r2, [r7, #8]
   83500:	320c      	adds	r2, #12
   83502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83506:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   8350a:	68fb      	ldr	r3, [r7, #12]
   8350c:	68ba      	ldr	r2, [r7, #8]
   8350e:	320c      	adds	r2, #12
   83510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   83514:	68fb      	ldr	r3, [r7, #12]
   83516:	68ba      	ldr	r2, [r7, #8]
   83518:	320c      	adds	r2, #12
   8351a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8351e:	79fb      	ldrb	r3, [r7, #7]
   83520:	021b      	lsls	r3, r3, #8
   83522:	b29b      	uxth	r3, r3
   83524:	ea42 0103 	orr.w	r1, r2, r3
   83528:	68fb      	ldr	r3, [r7, #12]
   8352a:	68ba      	ldr	r2, [r7, #8]
   8352c:	320c      	adds	r2, #12
   8352e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   83532:	bf00      	nop
   83534:	3714      	adds	r7, #20
   83536:	46bd      	mov	sp, r7
   83538:	bc80      	pop	{r7}
   8353a:	4770      	bx	lr

0008353c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8353c:	b580      	push	{r7, lr}
   8353e:	b082      	sub	sp, #8
   83540:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83542:	4b1e      	ldr	r3, [pc, #120]	; (835bc <Reset_Handler+0x80>)
   83544:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83546:	4b1e      	ldr	r3, [pc, #120]	; (835c0 <Reset_Handler+0x84>)
   83548:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8354a:	687a      	ldr	r2, [r7, #4]
   8354c:	683b      	ldr	r3, [r7, #0]
   8354e:	429a      	cmp	r2, r3
   83550:	d00c      	beq.n	8356c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83552:	e007      	b.n	83564 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83554:	687a      	ldr	r2, [r7, #4]
   83556:	1d13      	adds	r3, r2, #4
   83558:	607b      	str	r3, [r7, #4]
   8355a:	683b      	ldr	r3, [r7, #0]
   8355c:	1d19      	adds	r1, r3, #4
   8355e:	6039      	str	r1, [r7, #0]
   83560:	6812      	ldr	r2, [r2, #0]
   83562:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   83564:	683b      	ldr	r3, [r7, #0]
   83566:	4a17      	ldr	r2, [pc, #92]	; (835c4 <Reset_Handler+0x88>)
   83568:	4293      	cmp	r3, r2
   8356a:	d3f3      	bcc.n	83554 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8356c:	4b16      	ldr	r3, [pc, #88]	; (835c8 <Reset_Handler+0x8c>)
   8356e:	603b      	str	r3, [r7, #0]
   83570:	e004      	b.n	8357c <Reset_Handler+0x40>
		*pDest++ = 0;
   83572:	683b      	ldr	r3, [r7, #0]
   83574:	1d1a      	adds	r2, r3, #4
   83576:	603a      	str	r2, [r7, #0]
   83578:	2200      	movs	r2, #0
   8357a:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   8357c:	683b      	ldr	r3, [r7, #0]
   8357e:	4a13      	ldr	r2, [pc, #76]	; (835cc <Reset_Handler+0x90>)
   83580:	4293      	cmp	r3, r2
   83582:	d3f6      	bcc.n	83572 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83584:	4b12      	ldr	r3, [pc, #72]	; (835d0 <Reset_Handler+0x94>)
   83586:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83588:	687b      	ldr	r3, [r7, #4]
   8358a:	4a12      	ldr	r2, [pc, #72]	; (835d4 <Reset_Handler+0x98>)
   8358c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83590:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83594:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   83596:	687b      	ldr	r3, [r7, #4]
   83598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8359c:	d309      	bcc.n	835b2 <Reset_Handler+0x76>
   8359e:	687b      	ldr	r3, [r7, #4]
   835a0:	4a0d      	ldr	r2, [pc, #52]	; (835d8 <Reset_Handler+0x9c>)
   835a2:	4293      	cmp	r3, r2
   835a4:	d205      	bcs.n	835b2 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   835a6:	4b0b      	ldr	r3, [pc, #44]	; (835d4 <Reset_Handler+0x98>)
   835a8:	689b      	ldr	r3, [r3, #8]
   835aa:	4a0a      	ldr	r2, [pc, #40]	; (835d4 <Reset_Handler+0x98>)
   835ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   835b0:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   835b2:	4b0a      	ldr	r3, [pc, #40]	; (835dc <Reset_Handler+0xa0>)
   835b4:	4798      	blx	r3

	/* Branch to main function */
	main();
   835b6:	4b0a      	ldr	r3, [pc, #40]	; (835e0 <Reset_Handler+0xa4>)
   835b8:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   835ba:	e7fe      	b.n	835ba <Reset_Handler+0x7e>
   835bc:	0008de74 	.word	0x0008de74
   835c0:	20000000 	.word	0x20000000
   835c4:	20000df0 	.word	0x20000df0
   835c8:	20000df0 	.word	0x20000df0
   835cc:	20001870 	.word	0x20001870
   835d0:	00080000 	.word	0x00080000
   835d4:	e000ed00 	.word	0xe000ed00
   835d8:	20004000 	.word	0x20004000
   835dc:	00087015 	.word	0x00087015
   835e0:	00080ab5 	.word	0x00080ab5

000835e4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   835e4:	b480      	push	{r7}
   835e6:	b085      	sub	sp, #20
   835e8:	af00      	add	r7, sp, #0
   835ea:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   835ec:	4b10      	ldr	r3, [pc, #64]	; (83630 <_sbrk+0x4c>)
   835ee:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   835f0:	4b10      	ldr	r3, [pc, #64]	; (83634 <_sbrk+0x50>)
   835f2:	681b      	ldr	r3, [r3, #0]
   835f4:	2b00      	cmp	r3, #0
   835f6:	d102      	bne.n	835fe <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   835f8:	4b0e      	ldr	r3, [pc, #56]	; (83634 <_sbrk+0x50>)
   835fa:	4a0f      	ldr	r2, [pc, #60]	; (83638 <_sbrk+0x54>)
   835fc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   835fe:	4b0d      	ldr	r3, [pc, #52]	; (83634 <_sbrk+0x50>)
   83600:	681b      	ldr	r3, [r3, #0]
   83602:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   83604:	68ba      	ldr	r2, [r7, #8]
   83606:	687b      	ldr	r3, [r7, #4]
   83608:	4413      	add	r3, r2
   8360a:	68fa      	ldr	r2, [r7, #12]
   8360c:	429a      	cmp	r2, r3
   8360e:	da02      	bge.n	83616 <_sbrk+0x32>
		return (caddr_t) -1;	
   83610:	f04f 33ff 	mov.w	r3, #4294967295
   83614:	e006      	b.n	83624 <_sbrk+0x40>
	}

	heap += incr;
   83616:	4b07      	ldr	r3, [pc, #28]	; (83634 <_sbrk+0x50>)
   83618:	681a      	ldr	r2, [r3, #0]
   8361a:	687b      	ldr	r3, [r7, #4]
   8361c:	4413      	add	r3, r2
   8361e:	4a05      	ldr	r2, [pc, #20]	; (83634 <_sbrk+0x50>)
   83620:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   83622:	68bb      	ldr	r3, [r7, #8]
}
   83624:	4618      	mov	r0, r3
   83626:	3714      	adds	r7, #20
   83628:	46bd      	mov	sp, r7
   8362a:	bc80      	pop	{r7}
   8362c:	4770      	bx	lr
   8362e:	bf00      	nop
   83630:	20083ffc 	.word	0x20083ffc
   83634:	20001330 	.word	0x20001330
   83638:	20084000 	.word	0x20084000

0008363c <_close>:
{
	return -1;
}

extern int _close(int file)
{
   8363c:	b480      	push	{r7}
   8363e:	b083      	sub	sp, #12
   83640:	af00      	add	r7, sp, #0
   83642:	6078      	str	r0, [r7, #4]
	return -1;
   83644:	f04f 33ff 	mov.w	r3, #4294967295
}
   83648:	4618      	mov	r0, r3
   8364a:	370c      	adds	r7, #12
   8364c:	46bd      	mov	sp, r7
   8364e:	bc80      	pop	{r7}
   83650:	4770      	bx	lr

00083652 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   83652:	b480      	push	{r7}
   83654:	b083      	sub	sp, #12
   83656:	af00      	add	r7, sp, #0
   83658:	6078      	str	r0, [r7, #4]
   8365a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   8365c:	683b      	ldr	r3, [r7, #0]
   8365e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83662:	605a      	str	r2, [r3, #4]

	return 0;
   83664:	2300      	movs	r3, #0
}
   83666:	4618      	mov	r0, r3
   83668:	370c      	adds	r7, #12
   8366a:	46bd      	mov	sp, r7
   8366c:	bc80      	pop	{r7}
   8366e:	4770      	bx	lr

00083670 <_isatty>:

extern int _isatty(int file)
{
   83670:	b480      	push	{r7}
   83672:	b083      	sub	sp, #12
   83674:	af00      	add	r7, sp, #0
   83676:	6078      	str	r0, [r7, #4]
	return 1;
   83678:	2301      	movs	r3, #1
}
   8367a:	4618      	mov	r0, r3
   8367c:	370c      	adds	r7, #12
   8367e:	46bd      	mov	sp, r7
   83680:	bc80      	pop	{r7}
   83682:	4770      	bx	lr

00083684 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   83684:	b480      	push	{r7}
   83686:	b085      	sub	sp, #20
   83688:	af00      	add	r7, sp, #0
   8368a:	60f8      	str	r0, [r7, #12]
   8368c:	60b9      	str	r1, [r7, #8]
   8368e:	607a      	str	r2, [r7, #4]
	return 0;
   83690:	2300      	movs	r3, #0
}
   83692:	4618      	mov	r0, r3
   83694:	3714      	adds	r7, #20
   83696:	46bd      	mov	sp, r7
   83698:	bc80      	pop	{r7}
   8369a:	4770      	bx	lr

0008369c <_exit>:

extern void _exit(int status)
{
   8369c:	b580      	push	{r7, lr}
   8369e:	b082      	sub	sp, #8
   836a0:	af00      	add	r7, sp, #0
   836a2:	6078      	str	r0, [r7, #4]
	printf("Exiting with status %d.\n", status);
   836a4:	6879      	ldr	r1, [r7, #4]
   836a6:	4802      	ldr	r0, [pc, #8]	; (836b0 <_exit+0x14>)
   836a8:	4b02      	ldr	r3, [pc, #8]	; (836b4 <_exit+0x18>)
   836aa:	4798      	blx	r3

	for (;;);
   836ac:	e7fe      	b.n	836ac <_exit+0x10>
   836ae:	bf00      	nop
   836b0:	0008d9d8 	.word	0x0008d9d8
   836b4:	0008705d 	.word	0x0008705d

000836b8 <_kill>:
}

extern void _kill(int pid, int sig)
{
   836b8:	b480      	push	{r7}
   836ba:	b083      	sub	sp, #12
   836bc:	af00      	add	r7, sp, #0
   836be:	6078      	str	r0, [r7, #4]
   836c0:	6039      	str	r1, [r7, #0]
	return;
   836c2:	bf00      	nop
}
   836c4:	370c      	adds	r7, #12
   836c6:	46bd      	mov	sp, r7
   836c8:	bc80      	pop	{r7}
   836ca:	4770      	bx	lr

000836cc <_getpid>:

extern int _getpid(void)
{
   836cc:	b480      	push	{r7}
   836ce:	af00      	add	r7, sp, #0
	return -1;
   836d0:	f04f 33ff 	mov.w	r3, #4294967295
}
   836d4:	4618      	mov	r0, r3
   836d6:	46bd      	mov	sp, r7
   836d8:	bc80      	pop	{r7}
   836da:	4770      	bx	lr

000836dc <osc_enable>:
{
   836dc:	b580      	push	{r7, lr}
   836de:	b082      	sub	sp, #8
   836e0:	af00      	add	r7, sp, #0
   836e2:	6078      	str	r0, [r7, #4]
   836e4:	687b      	ldr	r3, [r7, #4]
   836e6:	2b07      	cmp	r3, #7
   836e8:	d82e      	bhi.n	83748 <osc_enable+0x6c>
   836ea:	a201      	add	r2, pc, #4	; (adr r2, 836f0 <osc_enable+0x14>)
   836ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   836f0:	00083747 	.word	0x00083747
   836f4:	00083711 	.word	0x00083711
   836f8:	00083719 	.word	0x00083719
   836fc:	00083721 	.word	0x00083721
   83700:	00083729 	.word	0x00083729
   83704:	00083731 	.word	0x00083731
   83708:	00083739 	.word	0x00083739
   8370c:	00083741 	.word	0x00083741
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83710:	2000      	movs	r0, #0
   83712:	4b0f      	ldr	r3, [pc, #60]	; (83750 <osc_enable+0x74>)
   83714:	4798      	blx	r3
		break;
   83716:	e017      	b.n	83748 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   83718:	2001      	movs	r0, #1
   8371a:	4b0d      	ldr	r3, [pc, #52]	; (83750 <osc_enable+0x74>)
   8371c:	4798      	blx	r3
		break;
   8371e:	e013      	b.n	83748 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83720:	2000      	movs	r0, #0
   83722:	4b0c      	ldr	r3, [pc, #48]	; (83754 <osc_enable+0x78>)
   83724:	4798      	blx	r3
		break;
   83726:	e00f      	b.n	83748 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83728:	2010      	movs	r0, #16
   8372a:	4b0a      	ldr	r3, [pc, #40]	; (83754 <osc_enable+0x78>)
   8372c:	4798      	blx	r3
		break;
   8372e:	e00b      	b.n	83748 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83730:	2020      	movs	r0, #32
   83732:	4b08      	ldr	r3, [pc, #32]	; (83754 <osc_enable+0x78>)
   83734:	4798      	blx	r3
		break;
   83736:	e007      	b.n	83748 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83738:	203e      	movs	r0, #62	; 0x3e
   8373a:	4b07      	ldr	r3, [pc, #28]	; (83758 <osc_enable+0x7c>)
   8373c:	4798      	blx	r3
		break;
   8373e:	e003      	b.n	83748 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   83740:	4b06      	ldr	r3, [pc, #24]	; (8375c <osc_enable+0x80>)
   83742:	4798      	blx	r3
		break;
   83744:	e000      	b.n	83748 <osc_enable+0x6c>
		break;
   83746:	bf00      	nop
}
   83748:	bf00      	nop
   8374a:	3708      	adds	r7, #8
   8374c:	46bd      	mov	sp, r7
   8374e:	bd80      	pop	{r7, pc}
   83750:	00082ab1 	.word	0x00082ab1
   83754:	00082b1d 	.word	0x00082b1d
   83758:	00082b91 	.word	0x00082b91
   8375c:	00082be1 	.word	0x00082be1

00083760 <osc_is_ready>:
{
   83760:	b580      	push	{r7, lr}
   83762:	b082      	sub	sp, #8
   83764:	af00      	add	r7, sp, #0
   83766:	6078      	str	r0, [r7, #4]
   83768:	687b      	ldr	r3, [r7, #4]
   8376a:	2b07      	cmp	r3, #7
   8376c:	d82f      	bhi.n	837ce <osc_is_ready+0x6e>
   8376e:	a201      	add	r2, pc, #4	; (adr r2, 83774 <osc_is_ready+0x14>)
   83770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83774:	00083795 	.word	0x00083795
   83778:	00083799 	.word	0x00083799
   8377c:	00083799 	.word	0x00083799
   83780:	000837ab 	.word	0x000837ab
   83784:	000837ab 	.word	0x000837ab
   83788:	000837ab 	.word	0x000837ab
   8378c:	000837bd 	.word	0x000837bd
   83790:	000837bd 	.word	0x000837bd
		return 1;
   83794:	2301      	movs	r3, #1
   83796:	e01b      	b.n	837d0 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   83798:	4b0f      	ldr	r3, [pc, #60]	; (837d8 <osc_is_ready+0x78>)
   8379a:	4798      	blx	r3
   8379c:	4603      	mov	r3, r0
   8379e:	2b00      	cmp	r3, #0
   837a0:	bf14      	ite	ne
   837a2:	2301      	movne	r3, #1
   837a4:	2300      	moveq	r3, #0
   837a6:	b2db      	uxtb	r3, r3
   837a8:	e012      	b.n	837d0 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   837aa:	4b0c      	ldr	r3, [pc, #48]	; (837dc <osc_is_ready+0x7c>)
   837ac:	4798      	blx	r3
   837ae:	4603      	mov	r3, r0
   837b0:	2b00      	cmp	r3, #0
   837b2:	bf14      	ite	ne
   837b4:	2301      	movne	r3, #1
   837b6:	2300      	moveq	r3, #0
   837b8:	b2db      	uxtb	r3, r3
   837ba:	e009      	b.n	837d0 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   837bc:	4b08      	ldr	r3, [pc, #32]	; (837e0 <osc_is_ready+0x80>)
   837be:	4798      	blx	r3
   837c0:	4603      	mov	r3, r0
   837c2:	2b00      	cmp	r3, #0
   837c4:	bf14      	ite	ne
   837c6:	2301      	movne	r3, #1
   837c8:	2300      	moveq	r3, #0
   837ca:	b2db      	uxtb	r3, r3
   837cc:	e000      	b.n	837d0 <osc_is_ready+0x70>
	return 0;
   837ce:	2300      	movs	r3, #0
}
   837d0:	4618      	mov	r0, r3
   837d2:	3708      	adds	r7, #8
   837d4:	46bd      	mov	sp, r7
   837d6:	bd80      	pop	{r7, pc}
   837d8:	00082ae9 	.word	0x00082ae9
   837dc:	00082b79 	.word	0x00082b79
   837e0:	00082c2d 	.word	0x00082c2d

000837e4 <osc_get_rate>:
{
   837e4:	b480      	push	{r7}
   837e6:	b083      	sub	sp, #12
   837e8:	af00      	add	r7, sp, #0
   837ea:	6078      	str	r0, [r7, #4]
   837ec:	687b      	ldr	r3, [r7, #4]
   837ee:	2b07      	cmp	r3, #7
   837f0:	d823      	bhi.n	8383a <osc_get_rate+0x56>
   837f2:	a201      	add	r2, pc, #4	; (adr r2, 837f8 <osc_get_rate+0x14>)
   837f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   837f8:	00083819 	.word	0x00083819
   837fc:	0008381f 	.word	0x0008381f
   83800:	00083823 	.word	0x00083823
   83804:	00083827 	.word	0x00083827
   83808:	0008382b 	.word	0x0008382b
   8380c:	0008382f 	.word	0x0008382f
   83810:	00083833 	.word	0x00083833
   83814:	00083837 	.word	0x00083837
		return OSC_SLCK_32K_RC_HZ;
   83818:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8381c:	e00e      	b.n	8383c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   8381e:	2300      	movs	r3, #0
   83820:	e00c      	b.n	8383c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   83822:	2300      	movs	r3, #0
   83824:	e00a      	b.n	8383c <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   83826:	4b08      	ldr	r3, [pc, #32]	; (83848 <osc_get_rate+0x64>)
   83828:	e008      	b.n	8383c <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   8382a:	4b08      	ldr	r3, [pc, #32]	; (8384c <osc_get_rate+0x68>)
   8382c:	e006      	b.n	8383c <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   8382e:	4b08      	ldr	r3, [pc, #32]	; (83850 <osc_get_rate+0x6c>)
   83830:	e004      	b.n	8383c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   83832:	4b07      	ldr	r3, [pc, #28]	; (83850 <osc_get_rate+0x6c>)
   83834:	e002      	b.n	8383c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   83836:	4b06      	ldr	r3, [pc, #24]	; (83850 <osc_get_rate+0x6c>)
   83838:	e000      	b.n	8383c <osc_get_rate+0x58>
	return 0;
   8383a:	2300      	movs	r3, #0
}
   8383c:	4618      	mov	r0, r3
   8383e:	370c      	adds	r7, #12
   83840:	46bd      	mov	sp, r7
   83842:	bc80      	pop	{r7}
   83844:	4770      	bx	lr
   83846:	bf00      	nop
   83848:	003d0900 	.word	0x003d0900
   8384c:	007a1200 	.word	0x007a1200
   83850:	00b71b00 	.word	0x00b71b00

00083854 <osc_wait_ready>:
{
   83854:	b580      	push	{r7, lr}
   83856:	b082      	sub	sp, #8
   83858:	af00      	add	r7, sp, #0
   8385a:	4603      	mov	r3, r0
   8385c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8385e:	bf00      	nop
   83860:	79fb      	ldrb	r3, [r7, #7]
   83862:	4618      	mov	r0, r3
   83864:	4b06      	ldr	r3, [pc, #24]	; (83880 <osc_wait_ready+0x2c>)
   83866:	4798      	blx	r3
   83868:	4603      	mov	r3, r0
   8386a:	f083 0301 	eor.w	r3, r3, #1
   8386e:	b2db      	uxtb	r3, r3
   83870:	2b00      	cmp	r3, #0
   83872:	d1f5      	bne.n	83860 <osc_wait_ready+0xc>
}
   83874:	bf00      	nop
   83876:	bf00      	nop
   83878:	3708      	adds	r7, #8
   8387a:	46bd      	mov	sp, r7
   8387c:	bd80      	pop	{r7, pc}
   8387e:	bf00      	nop
   83880:	00083761 	.word	0x00083761

00083884 <pll_config_init>:
{
   83884:	b580      	push	{r7, lr}
   83886:	b086      	sub	sp, #24
   83888:	af00      	add	r7, sp, #0
   8388a:	60f8      	str	r0, [r7, #12]
   8388c:	607a      	str	r2, [r7, #4]
   8388e:	603b      	str	r3, [r7, #0]
   83890:	460b      	mov	r3, r1
   83892:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   83894:	687b      	ldr	r3, [r7, #4]
   83896:	2b00      	cmp	r3, #0
   83898:	d107      	bne.n	838aa <pll_config_init+0x26>
   8389a:	683b      	ldr	r3, [r7, #0]
   8389c:	2b00      	cmp	r3, #0
   8389e:	d104      	bne.n	838aa <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   838a0:	68fb      	ldr	r3, [r7, #12]
   838a2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   838a6:	601a      	str	r2, [r3, #0]
   838a8:	e01a      	b.n	838e0 <pll_config_init+0x5c>
		vco_hz = osc_get_rate(e_src) / ul_div;
   838aa:	7afb      	ldrb	r3, [r7, #11]
   838ac:	4618      	mov	r0, r3
   838ae:	4b0e      	ldr	r3, [pc, #56]	; (838e8 <pll_config_init+0x64>)
   838b0:	4798      	blx	r3
   838b2:	4602      	mov	r2, r0
   838b4:	687b      	ldr	r3, [r7, #4]
   838b6:	fbb2 f3f3 	udiv	r3, r2, r3
   838ba:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   838bc:	697b      	ldr	r3, [r7, #20]
   838be:	683a      	ldr	r2, [r7, #0]
   838c0:	fb02 f303 	mul.w	r3, r2, r3
   838c4:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   838c6:	683b      	ldr	r3, [r7, #0]
   838c8:	3b01      	subs	r3, #1
   838ca:	041a      	lsls	r2, r3, #16
   838cc:	4b07      	ldr	r3, [pc, #28]	; (838ec <pll_config_init+0x68>)
   838ce:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   838d0:	687a      	ldr	r2, [r7, #4]
   838d2:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   838d4:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   838d6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   838da:	68fb      	ldr	r3, [r7, #12]
   838dc:	601a      	str	r2, [r3, #0]
}
   838de:	bf00      	nop
   838e0:	bf00      	nop
   838e2:	3718      	adds	r7, #24
   838e4:	46bd      	mov	sp, r7
   838e6:	bd80      	pop	{r7, pc}
   838e8:	000837e5 	.word	0x000837e5
   838ec:	07ff0000 	.word	0x07ff0000

000838f0 <pll_enable>:
{
   838f0:	b580      	push	{r7, lr}
   838f2:	b082      	sub	sp, #8
   838f4:	af00      	add	r7, sp, #0
   838f6:	6078      	str	r0, [r7, #4]
   838f8:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   838fa:	683b      	ldr	r3, [r7, #0]
   838fc:	2b00      	cmp	r3, #0
   838fe:	d108      	bne.n	83912 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83900:	4b09      	ldr	r3, [pc, #36]	; (83928 <pll_enable+0x38>)
   83902:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83904:	687b      	ldr	r3, [r7, #4]
   83906:	681b      	ldr	r3, [r3, #0]
   83908:	4a08      	ldr	r2, [pc, #32]	; (8392c <pll_enable+0x3c>)
   8390a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8390e:	6293      	str	r3, [r2, #40]	; 0x28
}
   83910:	e005      	b.n	8391e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   83912:	687b      	ldr	r3, [r7, #4]
   83914:	681b      	ldr	r3, [r3, #0]
   83916:	4a05      	ldr	r2, [pc, #20]	; (8392c <pll_enable+0x3c>)
   83918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8391c:	61d3      	str	r3, [r2, #28]
}
   8391e:	bf00      	nop
   83920:	3708      	adds	r7, #8
   83922:	46bd      	mov	sp, r7
   83924:	bd80      	pop	{r7, pc}
   83926:	bf00      	nop
   83928:	00082c9d 	.word	0x00082c9d
   8392c:	400e0400 	.word	0x400e0400

00083930 <pll_is_locked>:
{
   83930:	b580      	push	{r7, lr}
   83932:	b082      	sub	sp, #8
   83934:	af00      	add	r7, sp, #0
   83936:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   83938:	687b      	ldr	r3, [r7, #4]
   8393a:	2b00      	cmp	r3, #0
   8393c:	d103      	bne.n	83946 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8393e:	4b05      	ldr	r3, [pc, #20]	; (83954 <pll_is_locked+0x24>)
   83940:	4798      	blx	r3
   83942:	4603      	mov	r3, r0
   83944:	e002      	b.n	8394c <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   83946:	4b04      	ldr	r3, [pc, #16]	; (83958 <pll_is_locked+0x28>)
   83948:	4798      	blx	r3
   8394a:	4603      	mov	r3, r0
}
   8394c:	4618      	mov	r0, r3
   8394e:	3708      	adds	r7, #8
   83950:	46bd      	mov	sp, r7
   83952:	bd80      	pop	{r7, pc}
   83954:	00082cb5 	.word	0x00082cb5
   83958:	00082ce9 	.word	0x00082ce9

0008395c <pll_enable_source>:
{
   8395c:	b580      	push	{r7, lr}
   8395e:	b082      	sub	sp, #8
   83960:	af00      	add	r7, sp, #0
   83962:	4603      	mov	r3, r0
   83964:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   83966:	79fb      	ldrb	r3, [r7, #7]
   83968:	3b03      	subs	r3, #3
   8396a:	2b04      	cmp	r3, #4
   8396c:	d808      	bhi.n	83980 <pll_enable_source+0x24>
		osc_enable(e_src);
   8396e:	79fb      	ldrb	r3, [r7, #7]
   83970:	4618      	mov	r0, r3
   83972:	4b06      	ldr	r3, [pc, #24]	; (8398c <pll_enable_source+0x30>)
   83974:	4798      	blx	r3
		osc_wait_ready(e_src);
   83976:	79fb      	ldrb	r3, [r7, #7]
   83978:	4618      	mov	r0, r3
   8397a:	4b05      	ldr	r3, [pc, #20]	; (83990 <pll_enable_source+0x34>)
   8397c:	4798      	blx	r3
		break;
   8397e:	e000      	b.n	83982 <pll_enable_source+0x26>
		break;
   83980:	bf00      	nop
}
   83982:	bf00      	nop
   83984:	3708      	adds	r7, #8
   83986:	46bd      	mov	sp, r7
   83988:	bd80      	pop	{r7, pc}
   8398a:	bf00      	nop
   8398c:	000836dd 	.word	0x000836dd
   83990:	00083855 	.word	0x00083855

00083994 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   83994:	b580      	push	{r7, lr}
   83996:	b082      	sub	sp, #8
   83998:	af00      	add	r7, sp, #0
   8399a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8399c:	bf00      	nop
   8399e:	6878      	ldr	r0, [r7, #4]
   839a0:	4b04      	ldr	r3, [pc, #16]	; (839b4 <pll_wait_for_lock+0x20>)
   839a2:	4798      	blx	r3
   839a4:	4603      	mov	r3, r0
   839a6:	2b00      	cmp	r3, #0
   839a8:	d0f9      	beq.n	8399e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   839aa:	2300      	movs	r3, #0
}
   839ac:	4618      	mov	r0, r3
   839ae:	3708      	adds	r7, #8
   839b0:	46bd      	mov	sp, r7
   839b2:	bd80      	pop	{r7, pc}
   839b4:	00083931 	.word	0x00083931

000839b8 <sysclk_get_main_hz>:
{
   839b8:	b580      	push	{r7, lr}
   839ba:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   839bc:	2006      	movs	r0, #6
   839be:	4b03      	ldr	r3, [pc, #12]	; (839cc <sysclk_get_main_hz+0x14>)
   839c0:	4798      	blx	r3
   839c2:	4603      	mov	r3, r0
   839c4:	011b      	lsls	r3, r3, #4
}
   839c6:	4618      	mov	r0, r3
   839c8:	bd80      	pop	{r7, pc}
   839ca:	bf00      	nop
   839cc:	000837e5 	.word	0x000837e5

000839d0 <sysclk_get_cpu_hz>:
{
   839d0:	b580      	push	{r7, lr}
   839d2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   839d4:	4b02      	ldr	r3, [pc, #8]	; (839e0 <sysclk_get_cpu_hz+0x10>)
   839d6:	4798      	blx	r3
   839d8:	4603      	mov	r3, r0
   839da:	085b      	lsrs	r3, r3, #1
}
   839dc:	4618      	mov	r0, r3
   839de:	bd80      	pop	{r7, pc}
   839e0:	000839b9 	.word	0x000839b9

000839e4 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   839e4:	b590      	push	{r4, r7, lr}
   839e6:	b083      	sub	sp, #12
   839e8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   839ea:	2006      	movs	r0, #6
   839ec:	4b09      	ldr	r3, [pc, #36]	; (83a14 <sysclk_enable_usb+0x30>)
   839ee:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   839f0:	1d38      	adds	r0, r7, #4
   839f2:	2300      	movs	r3, #0
   839f4:	2200      	movs	r2, #0
   839f6:	2106      	movs	r1, #6
   839f8:	4c07      	ldr	r4, [pc, #28]	; (83a18 <sysclk_enable_usb+0x34>)
   839fa:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   839fc:	1d3b      	adds	r3, r7, #4
   839fe:	2101      	movs	r1, #1
   83a00:	4618      	mov	r0, r3
   83a02:	4b06      	ldr	r3, [pc, #24]	; (83a1c <sysclk_enable_usb+0x38>)
   83a04:	4798      	blx	r3
	pll_wait_for_lock(1);
   83a06:	2001      	movs	r0, #1
   83a08:	4b05      	ldr	r3, [pc, #20]	; (83a20 <sysclk_enable_usb+0x3c>)
   83a0a:	4798      	blx	r3
}
   83a0c:	bf00      	nop
   83a0e:	370c      	adds	r7, #12
   83a10:	46bd      	mov	sp, r7
   83a12:	bd90      	pop	{r4, r7, pc}
   83a14:	0008395d 	.word	0x0008395d
   83a18:	00083885 	.word	0x00083885
   83a1c:	000838f1 	.word	0x000838f1
   83a20:	00083995 	.word	0x00083995

00083a24 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   83a24:	b590      	push	{r4, r7, lr}
   83a26:	b083      	sub	sp, #12
   83a28:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83a2a:	4816      	ldr	r0, [pc, #88]	; (83a84 <sysclk_init+0x60>)
   83a2c:	4b16      	ldr	r3, [pc, #88]	; (83a88 <sysclk_init+0x64>)
   83a2e:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83a30:	2006      	movs	r0, #6
   83a32:	4b16      	ldr	r3, [pc, #88]	; (83a8c <sysclk_init+0x68>)
   83a34:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   83a36:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   83a3a:	4b15      	ldr	r3, [pc, #84]	; (83a90 <sysclk_init+0x6c>)
   83a3c:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   83a3e:	bf00      	nop
   83a40:	4b14      	ldr	r3, [pc, #80]	; (83a94 <sysclk_init+0x70>)
   83a42:	4798      	blx	r3
   83a44:	4603      	mov	r3, r0
   83a46:	2b00      	cmp	r3, #0
   83a48:	d0fa      	beq.n	83a40 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   83a4a:	1d38      	adds	r0, r7, #4
   83a4c:	2310      	movs	r3, #16
   83a4e:	2201      	movs	r2, #1
   83a50:	2106      	movs	r1, #6
   83a52:	4c11      	ldr	r4, [pc, #68]	; (83a98 <sysclk_init+0x74>)
   83a54:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83a56:	1d3b      	adds	r3, r7, #4
   83a58:	2100      	movs	r1, #0
   83a5a:	4618      	mov	r0, r3
   83a5c:	4b0f      	ldr	r3, [pc, #60]	; (83a9c <sysclk_init+0x78>)
   83a5e:	4798      	blx	r3
		pll_wait_for_lock(0);
   83a60:	2000      	movs	r0, #0
   83a62:	4b0f      	ldr	r3, [pc, #60]	; (83aa0 <sysclk_init+0x7c>)
   83a64:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83a66:	2010      	movs	r0, #16
   83a68:	4b0e      	ldr	r3, [pc, #56]	; (83aa4 <sysclk_init+0x80>)
   83a6a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83a6c:	4b0e      	ldr	r3, [pc, #56]	; (83aa8 <sysclk_init+0x84>)
   83a6e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83a70:	4b0e      	ldr	r3, [pc, #56]	; (83aac <sysclk_init+0x88>)
   83a72:	4798      	blx	r3
   83a74:	4603      	mov	r3, r0
   83a76:	4618      	mov	r0, r3
   83a78:	4b03      	ldr	r3, [pc, #12]	; (83a88 <sysclk_init+0x64>)
   83a7a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83a7c:	bf00      	nop
   83a7e:	370c      	adds	r7, #12
   83a80:	46bd      	mov	sp, r7
   83a82:	bd90      	pop	{r4, r7, pc}
   83a84:	05b8d800 	.word	0x05b8d800
   83a88:	200001bd 	.word	0x200001bd
   83a8c:	0008395d 	.word	0x0008395d
   83a90:	00082c5d 	.word	0x00082c5d
   83a94:	00082c45 	.word	0x00082c45
   83a98:	00083885 	.word	0x00083885
   83a9c:	000838f1 	.word	0x000838f1
   83aa0:	00083995 	.word	0x00083995
   83aa4:	00082a31 	.word	0x00082a31
   83aa8:	00083ab1 	.word	0x00083ab1
   83aac:	000839d1 	.word	0x000839d1

00083ab0 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83ab0:	b480      	push	{r7}
   83ab2:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83ab4:	4b58      	ldr	r3, [pc, #352]	; (83c18 <SystemCoreClockUpdate+0x168>)
   83ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83ab8:	f003 0303 	and.w	r3, r3, #3
   83abc:	2b03      	cmp	r3, #3
   83abe:	f200 808c 	bhi.w	83bda <SystemCoreClockUpdate+0x12a>
   83ac2:	2b02      	cmp	r3, #2
   83ac4:	d23f      	bcs.n	83b46 <SystemCoreClockUpdate+0x96>
   83ac6:	2b00      	cmp	r3, #0
   83ac8:	d002      	beq.n	83ad0 <SystemCoreClockUpdate+0x20>
   83aca:	2b01      	cmp	r3, #1
   83acc:	d010      	beq.n	83af0 <SystemCoreClockUpdate+0x40>
   83ace:	e084      	b.n	83bda <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83ad0:	4b52      	ldr	r3, [pc, #328]	; (83c1c <SystemCoreClockUpdate+0x16c>)
   83ad2:	695b      	ldr	r3, [r3, #20]
   83ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83ad8:	2b00      	cmp	r3, #0
   83ada:	d004      	beq.n	83ae6 <SystemCoreClockUpdate+0x36>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83adc:	4b50      	ldr	r3, [pc, #320]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83ade:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83ae2:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83ae4:	e079      	b.n	83bda <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83ae6:	4b4e      	ldr	r3, [pc, #312]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83ae8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83aec:	601a      	str	r2, [r3, #0]
		break;
   83aee:	e074      	b.n	83bda <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83af0:	4b49      	ldr	r3, [pc, #292]	; (83c18 <SystemCoreClockUpdate+0x168>)
   83af2:	6a1b      	ldr	r3, [r3, #32]
   83af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83af8:	2b00      	cmp	r3, #0
   83afa:	d003      	beq.n	83b04 <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83afc:	4b48      	ldr	r3, [pc, #288]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83afe:	4a49      	ldr	r2, [pc, #292]	; (83c24 <SystemCoreClockUpdate+0x174>)
   83b00:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   83b02:	e06a      	b.n	83bda <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83b04:	4b46      	ldr	r3, [pc, #280]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83b06:	4a48      	ldr	r2, [pc, #288]	; (83c28 <SystemCoreClockUpdate+0x178>)
   83b08:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83b0a:	4b43      	ldr	r3, [pc, #268]	; (83c18 <SystemCoreClockUpdate+0x168>)
   83b0c:	6a1b      	ldr	r3, [r3, #32]
   83b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83b12:	2b20      	cmp	r3, #32
   83b14:	d00b      	beq.n	83b2e <SystemCoreClockUpdate+0x7e>
   83b16:	2b20      	cmp	r3, #32
   83b18:	d811      	bhi.n	83b3e <SystemCoreClockUpdate+0x8e>
   83b1a:	2b00      	cmp	r3, #0
   83b1c:	d011      	beq.n	83b42 <SystemCoreClockUpdate+0x92>
   83b1e:	2b10      	cmp	r3, #16
   83b20:	d10d      	bne.n	83b3e <SystemCoreClockUpdate+0x8e>
				SystemCoreClock *= 2U;
   83b22:	4b3f      	ldr	r3, [pc, #252]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83b24:	681b      	ldr	r3, [r3, #0]
   83b26:	005b      	lsls	r3, r3, #1
   83b28:	4a3d      	ldr	r2, [pc, #244]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83b2a:	6013      	str	r3, [r2, #0]
				break;
   83b2c:	e00a      	b.n	83b44 <SystemCoreClockUpdate+0x94>
				SystemCoreClock *= 3U;
   83b2e:	4b3c      	ldr	r3, [pc, #240]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83b30:	681a      	ldr	r2, [r3, #0]
   83b32:	4613      	mov	r3, r2
   83b34:	005b      	lsls	r3, r3, #1
   83b36:	4413      	add	r3, r2
   83b38:	4a39      	ldr	r2, [pc, #228]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83b3a:	6013      	str	r3, [r2, #0]
				break;
   83b3c:	e002      	b.n	83b44 <SystemCoreClockUpdate+0x94>
				break;
   83b3e:	bf00      	nop
   83b40:	e04b      	b.n	83bda <SystemCoreClockUpdate+0x12a>
				break;
   83b42:	bf00      	nop
		break;
   83b44:	e049      	b.n	83bda <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83b46:	4b34      	ldr	r3, [pc, #208]	; (83c18 <SystemCoreClockUpdate+0x168>)
   83b48:	6a1b      	ldr	r3, [r3, #32]
   83b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83b4e:	2b00      	cmp	r3, #0
   83b50:	d003      	beq.n	83b5a <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83b52:	4b33      	ldr	r3, [pc, #204]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83b54:	4a33      	ldr	r2, [pc, #204]	; (83c24 <SystemCoreClockUpdate+0x174>)
   83b56:	601a      	str	r2, [r3, #0]
   83b58:	e01f      	b.n	83b9a <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83b5a:	4b31      	ldr	r3, [pc, #196]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83b5c:	4a32      	ldr	r2, [pc, #200]	; (83c28 <SystemCoreClockUpdate+0x178>)
   83b5e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83b60:	4b2d      	ldr	r3, [pc, #180]	; (83c18 <SystemCoreClockUpdate+0x168>)
   83b62:	6a1b      	ldr	r3, [r3, #32]
   83b64:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83b68:	2b20      	cmp	r3, #32
   83b6a:	d00b      	beq.n	83b84 <SystemCoreClockUpdate+0xd4>
   83b6c:	2b20      	cmp	r3, #32
   83b6e:	d811      	bhi.n	83b94 <SystemCoreClockUpdate+0xe4>
   83b70:	2b00      	cmp	r3, #0
   83b72:	d011      	beq.n	83b98 <SystemCoreClockUpdate+0xe8>
   83b74:	2b10      	cmp	r3, #16
   83b76:	d10d      	bne.n	83b94 <SystemCoreClockUpdate+0xe4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83b78:	4b29      	ldr	r3, [pc, #164]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83b7a:	681b      	ldr	r3, [r3, #0]
   83b7c:	005b      	lsls	r3, r3, #1
   83b7e:	4a28      	ldr	r2, [pc, #160]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83b80:	6013      	str	r3, [r2, #0]
				break;
   83b82:	e00a      	b.n	83b9a <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83b84:	4b26      	ldr	r3, [pc, #152]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83b86:	681a      	ldr	r2, [r3, #0]
   83b88:	4613      	mov	r3, r2
   83b8a:	005b      	lsls	r3, r3, #1
   83b8c:	4413      	add	r3, r2
   83b8e:	4a24      	ldr	r2, [pc, #144]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83b90:	6013      	str	r3, [r2, #0]
				break;
   83b92:	e002      	b.n	83b9a <SystemCoreClockUpdate+0xea>
			default:
				break;
   83b94:	bf00      	nop
   83b96:	e000      	b.n	83b9a <SystemCoreClockUpdate+0xea>
				break;
   83b98:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83b9a:	4b1f      	ldr	r3, [pc, #124]	; (83c18 <SystemCoreClockUpdate+0x168>)
   83b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83b9e:	f003 0303 	and.w	r3, r3, #3
   83ba2:	2b02      	cmp	r3, #2
   83ba4:	d115      	bne.n	83bd2 <SystemCoreClockUpdate+0x122>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83ba6:	4b1c      	ldr	r3, [pc, #112]	; (83c18 <SystemCoreClockUpdate+0x168>)
   83ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83baa:	0c1b      	lsrs	r3, r3, #16
   83bac:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   83bb0:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83bb2:	4a1b      	ldr	r2, [pc, #108]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83bb4:	6812      	ldr	r2, [r2, #0]
   83bb6:	fb02 f303 	mul.w	r3, r2, r3
   83bba:	4a19      	ldr	r2, [pc, #100]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83bbc:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   83bbe:	4b16      	ldr	r3, [pc, #88]	; (83c18 <SystemCoreClockUpdate+0x168>)
   83bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83bc2:	b2db      	uxtb	r3, r3
   83bc4:	4a16      	ldr	r2, [pc, #88]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83bc6:	6812      	ldr	r2, [r2, #0]
   83bc8:	fbb2 f3f3 	udiv	r3, r2, r3
   83bcc:	4a14      	ldr	r2, [pc, #80]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83bce:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   83bd0:	e002      	b.n	83bd8 <SystemCoreClockUpdate+0x128>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83bd2:	4b13      	ldr	r3, [pc, #76]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83bd4:	4a15      	ldr	r2, [pc, #84]	; (83c2c <SystemCoreClockUpdate+0x17c>)
   83bd6:	601a      	str	r2, [r3, #0]
		break;
   83bd8:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83bda:	4b0f      	ldr	r3, [pc, #60]	; (83c18 <SystemCoreClockUpdate+0x168>)
   83bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83be2:	2b70      	cmp	r3, #112	; 0x70
   83be4:	d108      	bne.n	83bf8 <SystemCoreClockUpdate+0x148>
		SystemCoreClock /= 3U;
   83be6:	4b0e      	ldr	r3, [pc, #56]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83be8:	681b      	ldr	r3, [r3, #0]
   83bea:	4a11      	ldr	r2, [pc, #68]	; (83c30 <SystemCoreClockUpdate+0x180>)
   83bec:	fba2 2303 	umull	r2, r3, r2, r3
   83bf0:	085b      	lsrs	r3, r3, #1
   83bf2:	4a0b      	ldr	r2, [pc, #44]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83bf4:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   83bf6:	e00a      	b.n	83c0e <SystemCoreClockUpdate+0x15e>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83bf8:	4b07      	ldr	r3, [pc, #28]	; (83c18 <SystemCoreClockUpdate+0x168>)
   83bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83bfc:	091b      	lsrs	r3, r3, #4
   83bfe:	f003 0307 	and.w	r3, r3, #7
   83c02:	4a07      	ldr	r2, [pc, #28]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83c04:	6812      	ldr	r2, [r2, #0]
   83c06:	fa22 f303 	lsr.w	r3, r2, r3
   83c0a:	4a05      	ldr	r2, [pc, #20]	; (83c20 <SystemCoreClockUpdate+0x170>)
   83c0c:	6013      	str	r3, [r2, #0]
}
   83c0e:	bf00      	nop
   83c10:	46bd      	mov	sp, r7
   83c12:	bc80      	pop	{r7}
   83c14:	4770      	bx	lr
   83c16:	bf00      	nop
   83c18:	400e0400 	.word	0x400e0400
   83c1c:	400e1210 	.word	0x400e1210
   83c20:	20000288 	.word	0x20000288
   83c24:	00b71b00 	.word	0x00b71b00
   83c28:	003d0900 	.word	0x003d0900
   83c2c:	0e4e1c00 	.word	0x0e4e1c00
   83c30:	aaaaaaab 	.word	0xaaaaaaab

00083c34 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   83c34:	b480      	push	{r7}
   83c36:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   83c38:	4b02      	ldr	r3, [pc, #8]	; (83c44 <udc_get_string_serial_name+0x10>)
	}
   83c3a:	4618      	mov	r0, r3
   83c3c:	46bd      	mov	sp, r7
   83c3e:	bc80      	pop	{r7}
   83c40:	4770      	bx	lr
   83c42:	bf00      	nop
   83c44:	2000025c 	.word	0x2000025c

00083c48 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   83c48:	b480      	push	{r7}
   83c4a:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   83c4c:	4b02      	ldr	r3, [pc, #8]	; (83c58 <udc_get_interface_desc+0x10>)
   83c4e:	681b      	ldr	r3, [r3, #0]
}
   83c50:	4618      	mov	r0, r3
   83c52:	46bd      	mov	sp, r7
   83c54:	bc80      	pop	{r7}
   83c56:	4770      	bx	lr
   83c58:	2000133c 	.word	0x2000133c

00083c5c <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   83c5c:	b480      	push	{r7}
   83c5e:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   83c60:	4b06      	ldr	r3, [pc, #24]	; (83c7c <udc_get_eof_conf+0x20>)
   83c62:	681b      	ldr	r3, [r3, #0]
   83c64:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   83c66:	4a05      	ldr	r2, [pc, #20]	; (83c7c <udc_get_eof_conf+0x20>)
   83c68:	6812      	ldr	r2, [r2, #0]
   83c6a:	6812      	ldr	r2, [r2, #0]
   83c6c:	8852      	ldrh	r2, [r2, #2]
   83c6e:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   83c70:	4413      	add	r3, r2
}
   83c72:	4618      	mov	r0, r3
   83c74:	46bd      	mov	sp, r7
   83c76:	bc80      	pop	{r7}
   83c78:	4770      	bx	lr
   83c7a:	bf00      	nop
   83c7c:	20001338 	.word	0x20001338

00083c80 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   83c80:	b580      	push	{r7, lr}
   83c82:	b084      	sub	sp, #16
   83c84:	af00      	add	r7, sp, #0
   83c86:	6078      	str	r0, [r7, #4]
   83c88:	460b      	mov	r3, r1
   83c8a:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   83c8c:	4b12      	ldr	r3, [pc, #72]	; (83cd8 <udc_next_desc_in_iface+0x58>)
   83c8e:	4798      	blx	r3
   83c90:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   83c92:	687b      	ldr	r3, [r7, #4]
   83c94:	781b      	ldrb	r3, [r3, #0]
   83c96:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   83c98:	687b      	ldr	r3, [r7, #4]
   83c9a:	4413      	add	r3, r2
   83c9c:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   83c9e:	e010      	b.n	83cc2 <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   83ca0:	687b      	ldr	r3, [r7, #4]
   83ca2:	785b      	ldrb	r3, [r3, #1]
   83ca4:	2b04      	cmp	r3, #4
   83ca6:	d011      	beq.n	83ccc <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   83ca8:	687b      	ldr	r3, [r7, #4]
   83caa:	785b      	ldrb	r3, [r3, #1]
   83cac:	78fa      	ldrb	r2, [r7, #3]
   83cae:	429a      	cmp	r2, r3
   83cb0:	d101      	bne.n	83cb6 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   83cb2:	687b      	ldr	r3, [r7, #4]
   83cb4:	e00c      	b.n	83cd0 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   83cb6:	687b      	ldr	r3, [r7, #4]
   83cb8:	781b      	ldrb	r3, [r3, #0]
   83cba:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   83cbc:	687b      	ldr	r3, [r7, #4]
   83cbe:	4413      	add	r3, r2
   83cc0:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   83cc2:	68fa      	ldr	r2, [r7, #12]
   83cc4:	687b      	ldr	r3, [r7, #4]
   83cc6:	429a      	cmp	r2, r3
   83cc8:	d8ea      	bhi.n	83ca0 <udc_next_desc_in_iface+0x20>
   83cca:	e000      	b.n	83cce <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   83ccc:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   83cce:	2300      	movs	r3, #0
}
   83cd0:	4618      	mov	r0, r3
   83cd2:	3710      	adds	r7, #16
   83cd4:	46bd      	mov	sp, r7
   83cd6:	bd80      	pop	{r7, pc}
   83cd8:	00083c5d 	.word	0x00083c5d

00083cdc <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   83cdc:	b580      	push	{r7, lr}
   83cde:	b084      	sub	sp, #16
   83ce0:	af00      	add	r7, sp, #0
   83ce2:	4603      	mov	r3, r0
   83ce4:	460a      	mov	r2, r1
   83ce6:	71fb      	strb	r3, [r7, #7]
   83ce8:	4613      	mov	r3, r2
   83cea:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   83cec:	4b1e      	ldr	r3, [pc, #120]	; (83d68 <udc_update_iface_desc+0x8c>)
   83cee:	781b      	ldrb	r3, [r3, #0]
   83cf0:	2b00      	cmp	r3, #0
   83cf2:	d101      	bne.n	83cf8 <udc_update_iface_desc+0x1c>
		return false;
   83cf4:	2300      	movs	r3, #0
   83cf6:	e032      	b.n	83d5e <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83cf8:	4b1c      	ldr	r3, [pc, #112]	; (83d6c <udc_update_iface_desc+0x90>)
   83cfa:	681b      	ldr	r3, [r3, #0]
   83cfc:	681b      	ldr	r3, [r3, #0]
   83cfe:	791b      	ldrb	r3, [r3, #4]
   83d00:	79fa      	ldrb	r2, [r7, #7]
   83d02:	429a      	cmp	r2, r3
   83d04:	d301      	bcc.n	83d0a <udc_update_iface_desc+0x2e>
		return false;
   83d06:	2300      	movs	r3, #0
   83d08:	e029      	b.n	83d5e <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   83d0a:	4b18      	ldr	r3, [pc, #96]	; (83d6c <udc_update_iface_desc+0x90>)
   83d0c:	681b      	ldr	r3, [r3, #0]
   83d0e:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   83d10:	4a17      	ldr	r2, [pc, #92]	; (83d70 <udc_update_iface_desc+0x94>)
   83d12:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   83d14:	4b17      	ldr	r3, [pc, #92]	; (83d74 <udc_update_iface_desc+0x98>)
   83d16:	4798      	blx	r3
   83d18:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   83d1a:	e01a      	b.n	83d52 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   83d1c:	4b14      	ldr	r3, [pc, #80]	; (83d70 <udc_update_iface_desc+0x94>)
   83d1e:	681b      	ldr	r3, [r3, #0]
   83d20:	785b      	ldrb	r3, [r3, #1]
   83d22:	2b04      	cmp	r3, #4
   83d24:	d10d      	bne.n	83d42 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   83d26:	4b12      	ldr	r3, [pc, #72]	; (83d70 <udc_update_iface_desc+0x94>)
   83d28:	681b      	ldr	r3, [r3, #0]
   83d2a:	789b      	ldrb	r3, [r3, #2]
   83d2c:	79fa      	ldrb	r2, [r7, #7]
   83d2e:	429a      	cmp	r2, r3
   83d30:	d107      	bne.n	83d42 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   83d32:	4b0f      	ldr	r3, [pc, #60]	; (83d70 <udc_update_iface_desc+0x94>)
   83d34:	681b      	ldr	r3, [r3, #0]
   83d36:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   83d38:	79ba      	ldrb	r2, [r7, #6]
   83d3a:	429a      	cmp	r2, r3
   83d3c:	d101      	bne.n	83d42 <udc_update_iface_desc+0x66>
				return true; // Interface found
   83d3e:	2301      	movs	r3, #1
   83d40:	e00d      	b.n	83d5e <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   83d42:	4b0b      	ldr	r3, [pc, #44]	; (83d70 <udc_update_iface_desc+0x94>)
   83d44:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   83d46:	4a0a      	ldr	r2, [pc, #40]	; (83d70 <udc_update_iface_desc+0x94>)
   83d48:	6812      	ldr	r2, [r2, #0]
   83d4a:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   83d4c:	4413      	add	r3, r2
   83d4e:	4a08      	ldr	r2, [pc, #32]	; (83d70 <udc_update_iface_desc+0x94>)
   83d50:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   83d52:	4b07      	ldr	r3, [pc, #28]	; (83d70 <udc_update_iface_desc+0x94>)
   83d54:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   83d56:	68fa      	ldr	r2, [r7, #12]
   83d58:	429a      	cmp	r2, r3
   83d5a:	d8df      	bhi.n	83d1c <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   83d5c:	2300      	movs	r3, #0
}
   83d5e:	4618      	mov	r0, r3
   83d60:	3710      	adds	r7, #16
   83d62:	46bd      	mov	sp, r7
   83d64:	bd80      	pop	{r7, pc}
   83d66:	bf00      	nop
   83d68:	20001336 	.word	0x20001336
   83d6c:	20001338 	.word	0x20001338
   83d70:	2000133c 	.word	0x2000133c
   83d74:	00083c5d 	.word	0x00083c5d

00083d78 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   83d78:	b580      	push	{r7, lr}
   83d7a:	b084      	sub	sp, #16
   83d7c:	af00      	add	r7, sp, #0
   83d7e:	4603      	mov	r3, r0
   83d80:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   83d82:	79fb      	ldrb	r3, [r7, #7]
   83d84:	2100      	movs	r1, #0
   83d86:	4618      	mov	r0, r3
   83d88:	4b1e      	ldr	r3, [pc, #120]	; (83e04 <udc_iface_disable+0x8c>)
   83d8a:	4798      	blx	r3
   83d8c:	4603      	mov	r3, r0
   83d8e:	f083 0301 	eor.w	r3, r3, #1
   83d92:	b2db      	uxtb	r3, r3
   83d94:	2b00      	cmp	r3, #0
   83d96:	d001      	beq.n	83d9c <udc_iface_disable+0x24>
		return false;
   83d98:	2300      	movs	r3, #0
   83d9a:	e02f      	b.n	83dfc <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83d9c:	4b1a      	ldr	r3, [pc, #104]	; (83e08 <udc_iface_disable+0x90>)
   83d9e:	681b      	ldr	r3, [r3, #0]
   83da0:	685a      	ldr	r2, [r3, #4]
   83da2:	79fb      	ldrb	r3, [r7, #7]
   83da4:	009b      	lsls	r3, r3, #2
   83da6:	4413      	add	r3, r2
   83da8:	681b      	ldr	r3, [r3, #0]
   83daa:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83dac:	68bb      	ldr	r3, [r7, #8]
   83dae:	68db      	ldr	r3, [r3, #12]
   83db0:	4798      	blx	r3
   83db2:	4603      	mov	r3, r0
   83db4:	461a      	mov	r2, r3
   83db6:	79fb      	ldrb	r3, [r7, #7]
   83db8:	4611      	mov	r1, r2
   83dba:	4618      	mov	r0, r3
   83dbc:	4b11      	ldr	r3, [pc, #68]	; (83e04 <udc_iface_disable+0x8c>)
   83dbe:	4798      	blx	r3
   83dc0:	4603      	mov	r3, r0
   83dc2:	f083 0301 	eor.w	r3, r3, #1
   83dc6:	b2db      	uxtb	r3, r3
   83dc8:	2b00      	cmp	r3, #0
   83dca:	d001      	beq.n	83dd0 <udc_iface_disable+0x58>
		return false;
   83dcc:	2300      	movs	r3, #0
   83dce:	e015      	b.n	83dfc <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   83dd0:	4b0e      	ldr	r3, [pc, #56]	; (83e0c <udc_iface_disable+0x94>)
   83dd2:	681b      	ldr	r3, [r3, #0]
   83dd4:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   83dd6:	2105      	movs	r1, #5
   83dd8:	68f8      	ldr	r0, [r7, #12]
   83dda:	4b0d      	ldr	r3, [pc, #52]	; (83e10 <udc_iface_disable+0x98>)
   83ddc:	4798      	blx	r3
   83dde:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   83de0:	68fb      	ldr	r3, [r7, #12]
   83de2:	2b00      	cmp	r3, #0
   83de4:	d005      	beq.n	83df2 <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   83de6:	68fb      	ldr	r3, [r7, #12]
   83de8:	789b      	ldrb	r3, [r3, #2]
   83dea:	4618      	mov	r0, r3
   83dec:	4b09      	ldr	r3, [pc, #36]	; (83e14 <udc_iface_disable+0x9c>)
   83dee:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   83df0:	e7f1      	b.n	83dd6 <udc_iface_disable+0x5e>
				break;
   83df2:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   83df4:	68bb      	ldr	r3, [r7, #8]
   83df6:	685b      	ldr	r3, [r3, #4]
   83df8:	4798      	blx	r3
	return true;
   83dfa:	2301      	movs	r3, #1
}
   83dfc:	4618      	mov	r0, r3
   83dfe:	3710      	adds	r7, #16
   83e00:	46bd      	mov	sp, r7
   83e02:	bd80      	pop	{r7, pc}
   83e04:	00083cdd 	.word	0x00083cdd
   83e08:	20001338 	.word	0x20001338
   83e0c:	2000133c 	.word	0x2000133c
   83e10:	00083c81 	.word	0x00083c81
   83e14:	00085505 	.word	0x00085505

00083e18 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   83e18:	b580      	push	{r7, lr}
   83e1a:	b084      	sub	sp, #16
   83e1c:	af00      	add	r7, sp, #0
   83e1e:	4603      	mov	r3, r0
   83e20:	460a      	mov	r2, r1
   83e22:	71fb      	strb	r3, [r7, #7]
   83e24:	4613      	mov	r3, r2
   83e26:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   83e28:	79ba      	ldrb	r2, [r7, #6]
   83e2a:	79fb      	ldrb	r3, [r7, #7]
   83e2c:	4611      	mov	r1, r2
   83e2e:	4618      	mov	r0, r3
   83e30:	4b1a      	ldr	r3, [pc, #104]	; (83e9c <udc_iface_enable+0x84>)
   83e32:	4798      	blx	r3
   83e34:	4603      	mov	r3, r0
   83e36:	f083 0301 	eor.w	r3, r3, #1
   83e3a:	b2db      	uxtb	r3, r3
   83e3c:	2b00      	cmp	r3, #0
   83e3e:	d001      	beq.n	83e44 <udc_iface_enable+0x2c>
		return false;
   83e40:	2300      	movs	r3, #0
   83e42:	e027      	b.n	83e94 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   83e44:	4b16      	ldr	r3, [pc, #88]	; (83ea0 <udc_iface_enable+0x88>)
   83e46:	681b      	ldr	r3, [r3, #0]
   83e48:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   83e4a:	2105      	movs	r1, #5
   83e4c:	68f8      	ldr	r0, [r7, #12]
   83e4e:	4b15      	ldr	r3, [pc, #84]	; (83ea4 <udc_iface_enable+0x8c>)
   83e50:	4798      	blx	r3
   83e52:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   83e54:	68fb      	ldr	r3, [r7, #12]
   83e56:	2b00      	cmp	r3, #0
   83e58:	d011      	beq.n	83e7e <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   83e5a:	68fb      	ldr	r3, [r7, #12]
   83e5c:	7898      	ldrb	r0, [r3, #2]
   83e5e:	68fb      	ldr	r3, [r7, #12]
   83e60:	78d9      	ldrb	r1, [r3, #3]
   83e62:	68fb      	ldr	r3, [r7, #12]
   83e64:	889b      	ldrh	r3, [r3, #4]
   83e66:	b29b      	uxth	r3, r3
   83e68:	461a      	mov	r2, r3
   83e6a:	4b0f      	ldr	r3, [pc, #60]	; (83ea8 <udc_iface_enable+0x90>)
   83e6c:	4798      	blx	r3
   83e6e:	4603      	mov	r3, r0
   83e70:	f083 0301 	eor.w	r3, r3, #1
   83e74:	b2db      	uxtb	r3, r3
   83e76:	2b00      	cmp	r3, #0
   83e78:	d0e7      	beq.n	83e4a <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   83e7a:	2300      	movs	r3, #0
   83e7c:	e00a      	b.n	83e94 <udc_iface_enable+0x7c>
			break;
   83e7e:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   83e80:	4b0a      	ldr	r3, [pc, #40]	; (83eac <udc_iface_enable+0x94>)
   83e82:	681b      	ldr	r3, [r3, #0]
   83e84:	685a      	ldr	r2, [r3, #4]
   83e86:	79fb      	ldrb	r3, [r7, #7]
   83e88:	009b      	lsls	r3, r3, #2
   83e8a:	4413      	add	r3, r2
   83e8c:	681b      	ldr	r3, [r3, #0]
   83e8e:	681b      	ldr	r3, [r3, #0]
   83e90:	4798      	blx	r3
   83e92:	4603      	mov	r3, r0
}
   83e94:	4618      	mov	r0, r3
   83e96:	3710      	adds	r7, #16
   83e98:	46bd      	mov	sp, r7
   83e9a:	bd80      	pop	{r7, pc}
   83e9c:	00083cdd 	.word	0x00083cdd
   83ea0:	2000133c 	.word	0x2000133c
   83ea4:	00083c81 	.word	0x00083c81
   83ea8:	0008514d 	.word	0x0008514d
   83eac:	20001338 	.word	0x20001338

00083eb0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   83eb0:	b580      	push	{r7, lr}
   83eb2:	af00      	add	r7, sp, #0
	udd_enable();
   83eb4:	4b01      	ldr	r3, [pc, #4]	; (83ebc <udc_start+0xc>)
   83eb6:	4798      	blx	r3
}
   83eb8:	bf00      	nop
   83eba:	bd80      	pop	{r7, pc}
   83ebc:	00084ee9 	.word	0x00084ee9

00083ec0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   83ec0:	b580      	push	{r7, lr}
   83ec2:	b082      	sub	sp, #8
   83ec4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   83ec6:	4b0f      	ldr	r3, [pc, #60]	; (83f04 <udc_reset+0x44>)
   83ec8:	781b      	ldrb	r3, [r3, #0]
   83eca:	2b00      	cmp	r3, #0
   83ecc:	d010      	beq.n	83ef0 <udc_reset+0x30>
		for (iface_num = 0;
   83ece:	2300      	movs	r3, #0
   83ed0:	71fb      	strb	r3, [r7, #7]
   83ed2:	e006      	b.n	83ee2 <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   83ed4:	79fb      	ldrb	r3, [r7, #7]
   83ed6:	4618      	mov	r0, r3
   83ed8:	4b0b      	ldr	r3, [pc, #44]	; (83f08 <udc_reset+0x48>)
   83eda:	4798      	blx	r3
				iface_num++) {
   83edc:	79fb      	ldrb	r3, [r7, #7]
   83ede:	3301      	adds	r3, #1
   83ee0:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83ee2:	4b0a      	ldr	r3, [pc, #40]	; (83f0c <udc_reset+0x4c>)
   83ee4:	681b      	ldr	r3, [r3, #0]
   83ee6:	681b      	ldr	r3, [r3, #0]
   83ee8:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   83eea:	79fa      	ldrb	r2, [r7, #7]
   83eec:	429a      	cmp	r2, r3
   83eee:	d3f1      	bcc.n	83ed4 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   83ef0:	4b04      	ldr	r3, [pc, #16]	; (83f04 <udc_reset+0x44>)
   83ef2:	2200      	movs	r2, #0
   83ef4:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   83ef6:	4b06      	ldr	r3, [pc, #24]	; (83f10 <udc_reset+0x50>)
   83ef8:	2200      	movs	r2, #0
   83efa:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   83efc:	bf00      	nop
   83efe:	3708      	adds	r7, #8
   83f00:	46bd      	mov	sp, r7
   83f02:	bd80      	pop	{r7, pc}
   83f04:	20001336 	.word	0x20001336
   83f08:	00083d79 	.word	0x00083d79
   83f0c:	20001338 	.word	0x20001338
   83f10:	20001334 	.word	0x20001334

00083f14 <udc_sof_notify>:

void udc_sof_notify(void)
{
   83f14:	b580      	push	{r7, lr}
   83f16:	b082      	sub	sp, #8
   83f18:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   83f1a:	4b14      	ldr	r3, [pc, #80]	; (83f6c <udc_sof_notify+0x58>)
   83f1c:	781b      	ldrb	r3, [r3, #0]
   83f1e:	2b00      	cmp	r3, #0
   83f20:	d01f      	beq.n	83f62 <udc_sof_notify+0x4e>
		for (iface_num = 0;
   83f22:	2300      	movs	r3, #0
   83f24:	71fb      	strb	r3, [r7, #7]
   83f26:	e015      	b.n	83f54 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   83f28:	4b11      	ldr	r3, [pc, #68]	; (83f70 <udc_sof_notify+0x5c>)
   83f2a:	681b      	ldr	r3, [r3, #0]
   83f2c:	685a      	ldr	r2, [r3, #4]
   83f2e:	79fb      	ldrb	r3, [r7, #7]
   83f30:	009b      	lsls	r3, r3, #2
   83f32:	4413      	add	r3, r2
   83f34:	681b      	ldr	r3, [r3, #0]
   83f36:	691b      	ldr	r3, [r3, #16]
   83f38:	2b00      	cmp	r3, #0
   83f3a:	d008      	beq.n	83f4e <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   83f3c:	4b0c      	ldr	r3, [pc, #48]	; (83f70 <udc_sof_notify+0x5c>)
   83f3e:	681b      	ldr	r3, [r3, #0]
   83f40:	685a      	ldr	r2, [r3, #4]
   83f42:	79fb      	ldrb	r3, [r7, #7]
   83f44:	009b      	lsls	r3, r3, #2
   83f46:	4413      	add	r3, r2
   83f48:	681b      	ldr	r3, [r3, #0]
   83f4a:	691b      	ldr	r3, [r3, #16]
   83f4c:	4798      	blx	r3
				iface_num++) {
   83f4e:	79fb      	ldrb	r3, [r7, #7]
   83f50:	3301      	adds	r3, #1
   83f52:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83f54:	4b06      	ldr	r3, [pc, #24]	; (83f70 <udc_sof_notify+0x5c>)
   83f56:	681b      	ldr	r3, [r3, #0]
   83f58:	681b      	ldr	r3, [r3, #0]
   83f5a:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   83f5c:	79fa      	ldrb	r2, [r7, #7]
   83f5e:	429a      	cmp	r2, r3
   83f60:	d3e2      	bcc.n	83f28 <udc_sof_notify+0x14>
			}
		}
	}
}
   83f62:	bf00      	nop
   83f64:	3708      	adds	r7, #8
   83f66:	46bd      	mov	sp, r7
   83f68:	bd80      	pop	{r7, pc}
   83f6a:	bf00      	nop
   83f6c:	20001336 	.word	0x20001336
   83f70:	20001338 	.word	0x20001338

00083f74 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   83f74:	b580      	push	{r7, lr}
   83f76:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   83f78:	4b06      	ldr	r3, [pc, #24]	; (83f94 <udc_req_std_dev_get_status+0x20>)
   83f7a:	88db      	ldrh	r3, [r3, #6]
   83f7c:	2b02      	cmp	r3, #2
   83f7e:	d001      	beq.n	83f84 <udc_req_std_dev_get_status+0x10>
		return false;
   83f80:	2300      	movs	r3, #0
   83f82:	e004      	b.n	83f8e <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   83f84:	2102      	movs	r1, #2
   83f86:	4804      	ldr	r0, [pc, #16]	; (83f98 <udc_req_std_dev_get_status+0x24>)
   83f88:	4b04      	ldr	r3, [pc, #16]	; (83f9c <udc_req_std_dev_get_status+0x28>)
   83f8a:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   83f8c:	2301      	movs	r3, #1
}
   83f8e:	4618      	mov	r0, r3
   83f90:	bd80      	pop	{r7, pc}
   83f92:	bf00      	nop
   83f94:	20001828 	.word	0x20001828
   83f98:	20001334 	.word	0x20001334
   83f9c:	00085125 	.word	0x00085125

00083fa0 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   83fa0:	b580      	push	{r7, lr}
   83fa2:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   83fa4:	4b0b      	ldr	r3, [pc, #44]	; (83fd4 <udc_req_std_ep_get_status+0x34>)
   83fa6:	88db      	ldrh	r3, [r3, #6]
   83fa8:	2b02      	cmp	r3, #2
   83faa:	d001      	beq.n	83fb0 <udc_req_std_ep_get_status+0x10>
		return false;
   83fac:	2300      	movs	r3, #0
   83fae:	e00e      	b.n	83fce <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83fb0:	4b08      	ldr	r3, [pc, #32]	; (83fd4 <udc_req_std_ep_get_status+0x34>)
   83fb2:	889b      	ldrh	r3, [r3, #4]
   83fb4:	b2db      	uxtb	r3, r3
   83fb6:	4618      	mov	r0, r3
   83fb8:	4b07      	ldr	r3, [pc, #28]	; (83fd8 <udc_req_std_ep_get_status+0x38>)
   83fba:	4798      	blx	r3
   83fbc:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   83fbe:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83fc0:	4b06      	ldr	r3, [pc, #24]	; (83fdc <udc_req_std_ep_get_status+0x3c>)
   83fc2:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   83fc4:	2102      	movs	r1, #2
   83fc6:	4805      	ldr	r0, [pc, #20]	; (83fdc <udc_req_std_ep_get_status+0x3c>)
   83fc8:	4b05      	ldr	r3, [pc, #20]	; (83fe0 <udc_req_std_ep_get_status+0x40>)
   83fca:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   83fcc:	2301      	movs	r3, #1
}
   83fce:	4618      	mov	r0, r3
   83fd0:	bd80      	pop	{r7, pc}
   83fd2:	bf00      	nop
   83fd4:	20001828 	.word	0x20001828
   83fd8:	00085585 	.word	0x00085585
   83fdc:	20001340 	.word	0x20001340
   83fe0:	00085125 	.word	0x00085125

00083fe4 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   83fe4:	b480      	push	{r7}
   83fe6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83fe8:	4b0b      	ldr	r3, [pc, #44]	; (84018 <udc_req_std_dev_clear_feature+0x34>)
   83fea:	88db      	ldrh	r3, [r3, #6]
   83fec:	2b00      	cmp	r3, #0
   83fee:	d001      	beq.n	83ff4 <udc_req_std_dev_clear_feature+0x10>
		return false;
   83ff0:	2300      	movs	r3, #0
   83ff2:	e00d      	b.n	84010 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   83ff4:	4b08      	ldr	r3, [pc, #32]	; (84018 <udc_req_std_dev_clear_feature+0x34>)
   83ff6:	885b      	ldrh	r3, [r3, #2]
   83ff8:	2b01      	cmp	r3, #1
   83ffa:	d108      	bne.n	8400e <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   83ffc:	4b07      	ldr	r3, [pc, #28]	; (8401c <udc_req_std_dev_clear_feature+0x38>)
   83ffe:	881b      	ldrh	r3, [r3, #0]
   84000:	f023 0302 	bic.w	r3, r3, #2
   84004:	b29a      	uxth	r2, r3
   84006:	4b05      	ldr	r3, [pc, #20]	; (8401c <udc_req_std_dev_clear_feature+0x38>)
   84008:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   8400a:	2301      	movs	r3, #1
   8400c:	e000      	b.n	84010 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   8400e:	2300      	movs	r3, #0
}
   84010:	4618      	mov	r0, r3
   84012:	46bd      	mov	sp, r7
   84014:	bc80      	pop	{r7}
   84016:	4770      	bx	lr
   84018:	20001828 	.word	0x20001828
   8401c:	20001334 	.word	0x20001334

00084020 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   84020:	b580      	push	{r7, lr}
   84022:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84024:	4b0a      	ldr	r3, [pc, #40]	; (84050 <udc_req_std_ep_clear_feature+0x30>)
   84026:	88db      	ldrh	r3, [r3, #6]
   84028:	2b00      	cmp	r3, #0
   8402a:	d001      	beq.n	84030 <udc_req_std_ep_clear_feature+0x10>
		return false;
   8402c:	2300      	movs	r3, #0
   8402e:	e00c      	b.n	8404a <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84030:	4b07      	ldr	r3, [pc, #28]	; (84050 <udc_req_std_ep_clear_feature+0x30>)
   84032:	885b      	ldrh	r3, [r3, #2]
   84034:	2b00      	cmp	r3, #0
   84036:	d107      	bne.n	84048 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84038:	4b05      	ldr	r3, [pc, #20]	; (84050 <udc_req_std_ep_clear_feature+0x30>)
   8403a:	889b      	ldrh	r3, [r3, #4]
   8403c:	b2db      	uxtb	r3, r3
   8403e:	4618      	mov	r0, r3
   84040:	4b04      	ldr	r3, [pc, #16]	; (84054 <udc_req_std_ep_clear_feature+0x34>)
   84042:	4798      	blx	r3
   84044:	4603      	mov	r3, r0
   84046:	e000      	b.n	8404a <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   84048:	2300      	movs	r3, #0
}
   8404a:	4618      	mov	r0, r3
   8404c:	bd80      	pop	{r7, pc}
   8404e:	bf00      	nop
   84050:	20001828 	.word	0x20001828
   84054:	00085701 	.word	0x00085701

00084058 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   84058:	b580      	push	{r7, lr}
   8405a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   8405c:	4b26      	ldr	r3, [pc, #152]	; (840f8 <udc_req_std_dev_set_feature+0xa0>)
   8405e:	88db      	ldrh	r3, [r3, #6]
   84060:	2b00      	cmp	r3, #0
   84062:	d001      	beq.n	84068 <udc_req_std_dev_set_feature+0x10>
		return false;
   84064:	2300      	movs	r3, #0
   84066:	e045      	b.n	840f4 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   84068:	4b23      	ldr	r3, [pc, #140]	; (840f8 <udc_req_std_dev_set_feature+0xa0>)
   8406a:	885b      	ldrh	r3, [r3, #2]
   8406c:	2b01      	cmp	r3, #1
   8406e:	d002      	beq.n	84076 <udc_req_std_dev_set_feature+0x1e>
   84070:	2b02      	cmp	r3, #2
   84072:	d002      	beq.n	8407a <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   84074:	e03d      	b.n	840f2 <udc_req_std_dev_set_feature+0x9a>
		return false;
   84076:	2300      	movs	r3, #0
   84078:	e03c      	b.n	840f4 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   8407a:	4b20      	ldr	r3, [pc, #128]	; (840fc <udc_req_std_dev_set_feature+0xa4>)
   8407c:	4798      	blx	r3
   8407e:	4603      	mov	r3, r0
   84080:	f083 0301 	eor.w	r3, r3, #1
   84084:	b2db      	uxtb	r3, r3
   84086:	2b00      	cmp	r3, #0
   84088:	d130      	bne.n	840ec <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   8408a:	4b1b      	ldr	r3, [pc, #108]	; (840f8 <udc_req_std_dev_set_feature+0xa0>)
   8408c:	889b      	ldrh	r3, [r3, #4]
   8408e:	b2db      	uxtb	r3, r3
   84090:	2b00      	cmp	r3, #0
   84092:	d12d      	bne.n	840f0 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   84094:	4b1a      	ldr	r3, [pc, #104]	; (84100 <udc_req_std_dev_set_feature+0xa8>)
   84096:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   84098:	4b17      	ldr	r3, [pc, #92]	; (840f8 <udc_req_std_dev_set_feature+0xa0>)
   8409a:	889b      	ldrh	r3, [r3, #4]
   8409c:	0a1b      	lsrs	r3, r3, #8
   8409e:	b29b      	uxth	r3, r3
   840a0:	b2db      	uxtb	r3, r3
   840a2:	3b01      	subs	r3, #1
   840a4:	2b03      	cmp	r3, #3
   840a6:	d81f      	bhi.n	840e8 <udc_req_std_dev_set_feature+0x90>
   840a8:	a201      	add	r2, pc, #4	; (adr r2, 840b0 <udc_req_std_dev_set_feature+0x58>)
   840aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   840ae:	bf00      	nop
   840b0:	000840c1 	.word	0x000840c1
   840b4:	000840cb 	.word	0x000840cb
   840b8:	000840d5 	.word	0x000840d5
   840bc:	000840df 	.word	0x000840df
			udd_g_ctrlreq.callback = udd_test_mode_j;
   840c0:	4b0d      	ldr	r3, [pc, #52]	; (840f8 <udc_req_std_dev_set_feature+0xa0>)
   840c2:	4a10      	ldr	r2, [pc, #64]	; (84104 <udc_req_std_dev_set_feature+0xac>)
   840c4:	611a      	str	r2, [r3, #16]
			return true;
   840c6:	2301      	movs	r3, #1
   840c8:	e014      	b.n	840f4 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   840ca:	4b0b      	ldr	r3, [pc, #44]	; (840f8 <udc_req_std_dev_set_feature+0xa0>)
   840cc:	4a0e      	ldr	r2, [pc, #56]	; (84108 <udc_req_std_dev_set_feature+0xb0>)
   840ce:	611a      	str	r2, [r3, #16]
			return true;
   840d0:	2301      	movs	r3, #1
   840d2:	e00f      	b.n	840f4 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   840d4:	4b08      	ldr	r3, [pc, #32]	; (840f8 <udc_req_std_dev_set_feature+0xa0>)
   840d6:	4a0d      	ldr	r2, [pc, #52]	; (8410c <udc_req_std_dev_set_feature+0xb4>)
   840d8:	611a      	str	r2, [r3, #16]
			return true;
   840da:	2301      	movs	r3, #1
   840dc:	e00a      	b.n	840f4 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   840de:	4b06      	ldr	r3, [pc, #24]	; (840f8 <udc_req_std_dev_set_feature+0xa0>)
   840e0:	4a0b      	ldr	r2, [pc, #44]	; (84110 <udc_req_std_dev_set_feature+0xb8>)
   840e2:	611a      	str	r2, [r3, #16]
			return true;
   840e4:	2301      	movs	r3, #1
   840e6:	e005      	b.n	840f4 <udc_req_std_dev_set_feature+0x9c>
			break;
   840e8:	bf00      	nop
		break;
   840ea:	e002      	b.n	840f2 <udc_req_std_dev_set_feature+0x9a>
			break;
   840ec:	bf00      	nop
   840ee:	e000      	b.n	840f2 <udc_req_std_dev_set_feature+0x9a>
			break;
   840f0:	bf00      	nop
	}
	return false;
   840f2:	2300      	movs	r3, #0
}
   840f4:	4618      	mov	r0, r3
   840f6:	bd80      	pop	{r7, pc}
   840f8:	20001828 	.word	0x20001828
   840fc:	00085081 	.word	0x00085081
   84100:	00083ec1 	.word	0x00083ec1
   84104:	000859c1 	.word	0x000859c1
   84108:	000859f5 	.word	0x000859f5
   8410c:	00085a29 	.word	0x00085a29
   84110:	00085a4d 	.word	0x00085a4d

00084114 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   84114:	b580      	push	{r7, lr}
   84116:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84118:	4b0d      	ldr	r3, [pc, #52]	; (84150 <udc_req_std_ep_set_feature+0x3c>)
   8411a:	88db      	ldrh	r3, [r3, #6]
   8411c:	2b00      	cmp	r3, #0
   8411e:	d001      	beq.n	84124 <udc_req_std_ep_set_feature+0x10>
		return false;
   84120:	2300      	movs	r3, #0
   84122:	e012      	b.n	8414a <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   84124:	4b0a      	ldr	r3, [pc, #40]	; (84150 <udc_req_std_ep_set_feature+0x3c>)
   84126:	885b      	ldrh	r3, [r3, #2]
   84128:	2b00      	cmp	r3, #0
   8412a:	d10d      	bne.n	84148 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   8412c:	4b08      	ldr	r3, [pc, #32]	; (84150 <udc_req_std_ep_set_feature+0x3c>)
   8412e:	889b      	ldrh	r3, [r3, #4]
   84130:	b2db      	uxtb	r3, r3
   84132:	4618      	mov	r0, r3
   84134:	4b07      	ldr	r3, [pc, #28]	; (84154 <udc_req_std_ep_set_feature+0x40>)
   84136:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   84138:	4b05      	ldr	r3, [pc, #20]	; (84150 <udc_req_std_ep_set_feature+0x3c>)
   8413a:	889b      	ldrh	r3, [r3, #4]
   8413c:	b2db      	uxtb	r3, r3
   8413e:	4618      	mov	r0, r3
   84140:	4b05      	ldr	r3, [pc, #20]	; (84158 <udc_req_std_ep_set_feature+0x44>)
   84142:	4798      	blx	r3
   84144:	4603      	mov	r3, r0
   84146:	e000      	b.n	8414a <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   84148:	2300      	movs	r3, #0
}
   8414a:	4618      	mov	r0, r3
   8414c:	bd80      	pop	{r7, pc}
   8414e:	bf00      	nop
   84150:	20001828 	.word	0x20001828
   84154:	00085939 	.word	0x00085939
   84158:	000855ed 	.word	0x000855ed

0008415c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   8415c:	b580      	push	{r7, lr}
   8415e:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   84160:	4b05      	ldr	r3, [pc, #20]	; (84178 <udc_valid_address+0x1c>)
   84162:	885b      	ldrh	r3, [r3, #2]
   84164:	b2db      	uxtb	r3, r3
   84166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   8416a:	b2db      	uxtb	r3, r3
   8416c:	4618      	mov	r0, r3
   8416e:	4b03      	ldr	r3, [pc, #12]	; (8417c <udc_valid_address+0x20>)
   84170:	4798      	blx	r3
}
   84172:	bf00      	nop
   84174:	bd80      	pop	{r7, pc}
   84176:	bf00      	nop
   84178:	20001828 	.word	0x20001828
   8417c:	000850a5 	.word	0x000850a5

00084180 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   84180:	b480      	push	{r7}
   84182:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   84184:	4b06      	ldr	r3, [pc, #24]	; (841a0 <udc_req_std_dev_set_address+0x20>)
   84186:	88db      	ldrh	r3, [r3, #6]
   84188:	2b00      	cmp	r3, #0
   8418a:	d001      	beq.n	84190 <udc_req_std_dev_set_address+0x10>
		return false;
   8418c:	2300      	movs	r3, #0
   8418e:	e003      	b.n	84198 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   84190:	4b03      	ldr	r3, [pc, #12]	; (841a0 <udc_req_std_dev_set_address+0x20>)
   84192:	4a04      	ldr	r2, [pc, #16]	; (841a4 <udc_req_std_dev_set_address+0x24>)
   84194:	611a      	str	r2, [r3, #16]
	return true;
   84196:	2301      	movs	r3, #1
}
   84198:	4618      	mov	r0, r3
   8419a:	46bd      	mov	sp, r7
   8419c:	bc80      	pop	{r7}
   8419e:	4770      	bx	lr
   841a0:	20001828 	.word	0x20001828
   841a4:	0008415d 	.word	0x0008415d

000841a8 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   841a8:	b580      	push	{r7, lr}
   841aa:	b084      	sub	sp, #16
   841ac:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   841ae:	2300      	movs	r3, #0
   841b0:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   841b2:	4b29      	ldr	r3, [pc, #164]	; (84258 <udc_req_std_dev_get_str_desc+0xb0>)
   841b4:	885b      	ldrh	r3, [r3, #2]
   841b6:	b2db      	uxtb	r3, r3
   841b8:	2b03      	cmp	r3, #3
   841ba:	d820      	bhi.n	841fe <udc_req_std_dev_get_str_desc+0x56>
   841bc:	a201      	add	r2, pc, #4	; (adr r2, 841c4 <udc_req_std_dev_get_str_desc+0x1c>)
   841be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   841c2:	bf00      	nop
   841c4:	000841d5 	.word	0x000841d5
   841c8:	000841df 	.word	0x000841df
   841cc:	000841e9 	.word	0x000841e9
   841d0:	000841f3 	.word	0x000841f3
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   841d4:	2104      	movs	r1, #4
   841d6:	4821      	ldr	r0, [pc, #132]	; (8425c <udc_req_std_dev_get_str_desc+0xb4>)
   841d8:	4b21      	ldr	r3, [pc, #132]	; (84260 <udc_req_std_dev_get_str_desc+0xb8>)
   841da:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   841dc:	e011      	b.n	84202 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   841de:	2315      	movs	r3, #21
   841e0:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   841e2:	4b20      	ldr	r3, [pc, #128]	; (84264 <udc_req_std_dev_get_str_desc+0xbc>)
   841e4:	60bb      	str	r3, [r7, #8]
		break;
   841e6:	e00c      	b.n	84202 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   841e8:	2313      	movs	r3, #19
   841ea:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   841ec:	4b1e      	ldr	r3, [pc, #120]	; (84268 <udc_req_std_dev_get_str_desc+0xc0>)
   841ee:	60bb      	str	r3, [r7, #8]
		break;
   841f0:	e007      	b.n	84202 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   841f2:	2320      	movs	r3, #32
   841f4:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   841f6:	4b1d      	ldr	r3, [pc, #116]	; (8426c <udc_req_std_dev_get_str_desc+0xc4>)
   841f8:	4798      	blx	r3
   841fa:	60b8      	str	r0, [r7, #8]
		break;
   841fc:	e001      	b.n	84202 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   841fe:	2300      	movs	r3, #0
   84200:	e026      	b.n	84250 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   84202:	79fb      	ldrb	r3, [r7, #7]
   84204:	2b00      	cmp	r3, #0
   84206:	d022      	beq.n	8424e <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   84208:	2300      	movs	r3, #0
   8420a:	73fb      	strb	r3, [r7, #15]
   8420c:	e00d      	b.n	8422a <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   8420e:	7bfb      	ldrb	r3, [r7, #15]
   84210:	68ba      	ldr	r2, [r7, #8]
   84212:	4413      	add	r3, r2
   84214:	781a      	ldrb	r2, [r3, #0]
   84216:	7bfb      	ldrb	r3, [r7, #15]
   84218:	b291      	uxth	r1, r2
   8421a:	4a15      	ldr	r2, [pc, #84]	; (84270 <udc_req_std_dev_get_str_desc+0xc8>)
   8421c:	005b      	lsls	r3, r3, #1
   8421e:	4413      	add	r3, r2
   84220:	460a      	mov	r2, r1
   84222:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   84224:	7bfb      	ldrb	r3, [r7, #15]
   84226:	3301      	adds	r3, #1
   84228:	73fb      	strb	r3, [r7, #15]
   8422a:	7bfa      	ldrb	r2, [r7, #15]
   8422c:	79fb      	ldrb	r3, [r7, #7]
   8422e:	429a      	cmp	r2, r3
   84230:	d3ed      	bcc.n	8420e <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   84232:	79fb      	ldrb	r3, [r7, #7]
   84234:	3301      	adds	r3, #1
   84236:	b2db      	uxtb	r3, r3
   84238:	005b      	lsls	r3, r3, #1
   8423a:	b2da      	uxtb	r2, r3
   8423c:	4b0c      	ldr	r3, [pc, #48]	; (84270 <udc_req_std_dev_get_str_desc+0xc8>)
   8423e:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   84240:	4b0b      	ldr	r3, [pc, #44]	; (84270 <udc_req_std_dev_get_str_desc+0xc8>)
   84242:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   84244:	b29b      	uxth	r3, r3
   84246:	4619      	mov	r1, r3
   84248:	4809      	ldr	r0, [pc, #36]	; (84270 <udc_req_std_dev_get_str_desc+0xc8>)
   8424a:	4b05      	ldr	r3, [pc, #20]	; (84260 <udc_req_std_dev_get_str_desc+0xb8>)
   8424c:	4798      	blx	r3
	}

	return true;
   8424e:	2301      	movs	r3, #1
}
   84250:	4618      	mov	r0, r3
   84252:	3710      	adds	r7, #16
   84254:	46bd      	mov	sp, r7
   84256:	bd80      	pop	{r7, pc}
   84258:	20001828 	.word	0x20001828
   8425c:	2000028c 	.word	0x2000028c
   84260:	00085125 	.word	0x00085125
   84264:	20000290 	.word	0x20000290
   84268:	200002a8 	.word	0x200002a8
   8426c:	00083c35 	.word	0x00083c35
   84270:	200002bc 	.word	0x200002bc

00084274 <udc_req_std_dev_get_descriptor>:
		WINUSB_PLATFORM_DESCRIPTOR_LENGTH, 0x00, //length of other descriptor
		0x01, // when asking for MS 2.0 descriptor, will do bmRequestType = 0xC0, bRequest = this (0x01)
		0x00  // if non 0, Windows will send this before asking for the next descriptor
		};
static bool udc_req_std_dev_get_descriptor(void)
{
   84274:	b580      	push	{r7, lr}
   84276:	b082      	sub	sp, #8
   84278:	af00      	add	r7, sp, #0
	uint8_t conf_num;


	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   8427a:	4b7f      	ldr	r3, [pc, #508]	; (84478 <udc_req_std_dev_get_descriptor+0x204>)
   8427c:	885b      	ldrh	r3, [r3, #2]
   8427e:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   84280:	4b7d      	ldr	r3, [pc, #500]	; (84478 <udc_req_std_dev_get_descriptor+0x204>)
   84282:	885b      	ldrh	r3, [r3, #2]
   84284:	0a1b      	lsrs	r3, r3, #8
   84286:	b29b      	uxth	r3, r3
   84288:	b2db      	uxtb	r3, r3
   8428a:	3b01      	subs	r3, #1
   8428c:	2b0e      	cmp	r3, #14
   8428e:	f200 80e0 	bhi.w	84452 <udc_req_std_dev_get_descriptor+0x1de>
   84292:	a201      	add	r2, pc, #4	; (adr r2, 84298 <udc_req_std_dev_get_descriptor+0x24>)
   84294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84298:	000842d5 	.word	0x000842d5
   8429c:	00084325 	.word	0x00084325
   842a0:	0008443f 	.word	0x0008443f
   842a4:	00084453 	.word	0x00084453
   842a8:	00084453 	.word	0x00084453
   842ac:	0008439f 	.word	0x0008439f
   842b0:	000843b5 	.word	0x000843b5
   842b4:	00084453 	.word	0x00084453
   842b8:	00084453 	.word	0x00084453
   842bc:	00084453 	.word	0x00084453
   842c0:	00084453 	.word	0x00084453
   842c4:	00084453 	.word	0x00084453
   842c8:	00084453 	.word	0x00084453
   842cc:	00084453 	.word	0x00084453
   842d0:	00084435 	.word	0x00084435
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   842d4:	4b69      	ldr	r3, [pc, #420]	; (8447c <udc_req_std_dev_get_descriptor+0x208>)
   842d6:	4798      	blx	r3
   842d8:	4603      	mov	r3, r0
   842da:	f083 0301 	eor.w	r3, r3, #1
   842de:	b2db      	uxtb	r3, r3
   842e0:	2b00      	cmp	r3, #0
   842e2:	d00a      	beq.n	842fa <udc_req_std_dev_get_descriptor+0x86>
			//(udc_config.confdev_hs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   842e4:	4b66      	ldr	r3, [pc, #408]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   842e6:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   842e8:	4b65      	ldr	r3, [pc, #404]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   842ea:	689b      	ldr	r3, [r3, #8]
   842ec:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   842ee:	b29b      	uxth	r3, r3
   842f0:	4619      	mov	r1, r3
   842f2:	4610      	mov	r0, r2
   842f4:	4b63      	ldr	r3, [pc, #396]	; (84484 <udc_req_std_dev_get_descriptor+0x210>)
   842f6:	4798      	blx	r3
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   842f8:	e0ae      	b.n	84458 <udc_req_std_dev_get_descriptor+0x1e4>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   842fa:	4b61      	ldr	r3, [pc, #388]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   842fc:	681b      	ldr	r3, [r3, #0]
   842fe:	2200      	movs	r2, #0
   84300:	f042 0210 	orr.w	r2, r2, #16
   84304:	709a      	strb	r2, [r3, #2]
   84306:	2200      	movs	r2, #0
   84308:	f042 0202 	orr.w	r2, r2, #2
   8430c:	70da      	strb	r2, [r3, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   8430e:	4b5c      	ldr	r3, [pc, #368]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   84310:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   84312:	4b5b      	ldr	r3, [pc, #364]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   84314:	681b      	ldr	r3, [r3, #0]
   84316:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   84318:	b29b      	uxth	r3, r3
   8431a:	4619      	mov	r1, r3
   8431c:	4610      	mov	r0, r2
   8431e:	4b59      	ldr	r3, [pc, #356]	; (84484 <udc_req_std_dev_get_descriptor+0x210>)
   84320:	4798      	blx	r3
		break;
   84322:	e099      	b.n	84458 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   84324:	4b55      	ldr	r3, [pc, #340]	; (8447c <udc_req_std_dev_get_descriptor+0x208>)
   84326:	4798      	blx	r3
   84328:	4603      	mov	r3, r0
   8432a:	2b00      	cmp	r3, #0
   8432c:	d019      	beq.n	84362 <udc_req_std_dev_get_descriptor+0xee>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   8432e:	4b54      	ldr	r3, [pc, #336]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   84330:	689b      	ldr	r3, [r3, #8]
   84332:	7c5b      	ldrb	r3, [r3, #17]
   84334:	79fa      	ldrb	r2, [r7, #7]
   84336:	429a      	cmp	r2, r3
   84338:	d301      	bcc.n	8433e <udc_req_std_dev_get_descriptor+0xca>
					bNumConfigurations) {
				return false;
   8433a:	2300      	movs	r3, #0
   8433c:	e097      	b.n	8446e <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8433e:	4b50      	ldr	r3, [pc, #320]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   84340:	691a      	ldr	r2, [r3, #16]
   84342:	79fb      	ldrb	r3, [r7, #7]
   84344:	00db      	lsls	r3, r3, #3
   84346:	4413      	add	r3, r2
   84348:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   8434a:	4b4d      	ldr	r3, [pc, #308]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   8434c:	691a      	ldr	r2, [r3, #16]
   8434e:	79fb      	ldrb	r3, [r7, #7]
   84350:	00db      	lsls	r3, r3, #3
   84352:	4413      	add	r3, r2
   84354:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84356:	885b      	ldrh	r3, [r3, #2]
   84358:	b29b      	uxth	r3, r3
   8435a:	4619      	mov	r1, r3
   8435c:	4b49      	ldr	r3, [pc, #292]	; (84484 <udc_req_std_dev_get_descriptor+0x210>)
   8435e:	4798      	blx	r3
   84360:	e018      	b.n	84394 <udc_req_std_dev_get_descriptor+0x120>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   84362:	4b47      	ldr	r3, [pc, #284]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   84364:	681b      	ldr	r3, [r3, #0]
   84366:	7c5b      	ldrb	r3, [r3, #17]
   84368:	79fa      	ldrb	r2, [r7, #7]
   8436a:	429a      	cmp	r2, r3
   8436c:	d301      	bcc.n	84372 <udc_req_std_dev_get_descriptor+0xfe>
					bNumConfigurations) {
				return false;
   8436e:	2300      	movs	r3, #0
   84370:	e07d      	b.n	8446e <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84372:	4b43      	ldr	r3, [pc, #268]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   84374:	685a      	ldr	r2, [r3, #4]
   84376:	79fb      	ldrb	r3, [r7, #7]
   84378:	00db      	lsls	r3, r3, #3
   8437a:	4413      	add	r3, r2
   8437c:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   8437e:	4b40      	ldr	r3, [pc, #256]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   84380:	685a      	ldr	r2, [r3, #4]
   84382:	79fb      	ldrb	r3, [r7, #7]
   84384:	00db      	lsls	r3, r3, #3
   84386:	4413      	add	r3, r2
   84388:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   8438a:	885b      	ldrh	r3, [r3, #2]
   8438c:	b29b      	uxth	r3, r3
   8438e:	4619      	mov	r1, r3
   84390:	4b3c      	ldr	r3, [pc, #240]	; (84484 <udc_req_std_dev_get_descriptor+0x210>)
   84392:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   84394:	4b38      	ldr	r3, [pc, #224]	; (84478 <udc_req_std_dev_get_descriptor+0x204>)
   84396:	689b      	ldr	r3, [r3, #8]
   84398:	2202      	movs	r2, #2
   8439a:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   8439c:	e05c      	b.n	84458 <udc_req_std_dev_get_descriptor+0x1e4>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   8439e:	4b38      	ldr	r3, [pc, #224]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   843a0:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   843a2:	4b37      	ldr	r3, [pc, #220]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   843a4:	68db      	ldr	r3, [r3, #12]
   843a6:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   843a8:	b29b      	uxth	r3, r3
   843aa:	4619      	mov	r1, r3
   843ac:	4610      	mov	r0, r2
   843ae:	4b35      	ldr	r3, [pc, #212]	; (84484 <udc_req_std_dev_get_descriptor+0x210>)
   843b0:	4798      	blx	r3
		break;
   843b2:	e051      	b.n	84458 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   843b4:	4b31      	ldr	r3, [pc, #196]	; (8447c <udc_req_std_dev_get_descriptor+0x208>)
   843b6:	4798      	blx	r3
   843b8:	4603      	mov	r3, r0
   843ba:	f083 0301 	eor.w	r3, r3, #1
   843be:	b2db      	uxtb	r3, r3
   843c0:	2b00      	cmp	r3, #0
   843c2:	d019      	beq.n	843f8 <udc_req_std_dev_get_descriptor+0x184>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   843c4:	4b2e      	ldr	r3, [pc, #184]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   843c6:	689b      	ldr	r3, [r3, #8]
   843c8:	7c5b      	ldrb	r3, [r3, #17]
   843ca:	79fa      	ldrb	r2, [r7, #7]
   843cc:	429a      	cmp	r2, r3
   843ce:	d301      	bcc.n	843d4 <udc_req_std_dev_get_descriptor+0x160>
					bNumConfigurations) {
				return false;
   843d0:	2300      	movs	r3, #0
   843d2:	e04c      	b.n	8446e <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   843d4:	4b2a      	ldr	r3, [pc, #168]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   843d6:	691a      	ldr	r2, [r3, #16]
   843d8:	79fb      	ldrb	r3, [r7, #7]
   843da:	00db      	lsls	r3, r3, #3
   843dc:	4413      	add	r3, r2
   843de:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   843e0:	4b27      	ldr	r3, [pc, #156]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   843e2:	691a      	ldr	r2, [r3, #16]
   843e4:	79fb      	ldrb	r3, [r7, #7]
   843e6:	00db      	lsls	r3, r3, #3
   843e8:	4413      	add	r3, r2
   843ea:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   843ec:	885b      	ldrh	r3, [r3, #2]
   843ee:	b29b      	uxth	r3, r3
   843f0:	4619      	mov	r1, r3
   843f2:	4b24      	ldr	r3, [pc, #144]	; (84484 <udc_req_std_dev_get_descriptor+0x210>)
   843f4:	4798      	blx	r3
   843f6:	e018      	b.n	8442a <udc_req_std_dev_get_descriptor+0x1b6>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   843f8:	4b21      	ldr	r3, [pc, #132]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   843fa:	681b      	ldr	r3, [r3, #0]
   843fc:	7c5b      	ldrb	r3, [r3, #17]
   843fe:	79fa      	ldrb	r2, [r7, #7]
   84400:	429a      	cmp	r2, r3
   84402:	d301      	bcc.n	84408 <udc_req_std_dev_get_descriptor+0x194>
					bNumConfigurations) {
				return false;
   84404:	2300      	movs	r3, #0
   84406:	e032      	b.n	8446e <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   84408:	4b1d      	ldr	r3, [pc, #116]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   8440a:	685a      	ldr	r2, [r3, #4]
   8440c:	79fb      	ldrb	r3, [r7, #7]
   8440e:	00db      	lsls	r3, r3, #3
   84410:	4413      	add	r3, r2
   84412:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   84414:	4b1a      	ldr	r3, [pc, #104]	; (84480 <udc_req_std_dev_get_descriptor+0x20c>)
   84416:	685a      	ldr	r2, [r3, #4]
   84418:	79fb      	ldrb	r3, [r7, #7]
   8441a:	00db      	lsls	r3, r3, #3
   8441c:	4413      	add	r3, r2
   8441e:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   84420:	885b      	ldrh	r3, [r3, #2]
   84422:	b29b      	uxth	r3, r3
   84424:	4619      	mov	r1, r3
   84426:	4b17      	ldr	r3, [pc, #92]	; (84484 <udc_req_std_dev_get_descriptor+0x210>)
   84428:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8442a:	4b13      	ldr	r3, [pc, #76]	; (84478 <udc_req_std_dev_get_descriptor+0x204>)
   8442c:	689b      	ldr	r3, [r3, #8]
   8442e:	2207      	movs	r2, #7
   84430:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   84432:	e011      	b.n	84458 <udc_req_std_dev_get_descriptor+0x1e4>
#endif
	case USB_DT_BOS: //bos descriptor
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   84434:	2121      	movs	r1, #33	; 0x21
   84436:	4814      	ldr	r0, [pc, #80]	; (84488 <udc_req_std_dev_get_descriptor+0x214>)
   84438:	4b12      	ldr	r3, [pc, #72]	; (84484 <udc_req_std_dev_get_descriptor+0x210>)
   8443a:	4798      	blx	r3
			0x21);
		break;
   8443c:	e00c      	b.n	84458 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   8443e:	4b13      	ldr	r3, [pc, #76]	; (8448c <udc_req_std_dev_get_descriptor+0x218>)
   84440:	4798      	blx	r3
   84442:	4603      	mov	r3, r0
   84444:	f083 0301 	eor.w	r3, r3, #1
   84448:	b2db      	uxtb	r3, r3
   8444a:	2b00      	cmp	r3, #0
   8444c:	d003      	beq.n	84456 <udc_req_std_dev_get_descriptor+0x1e2>
			return false;
   8444e:	2300      	movs	r3, #0
   84450:	e00d      	b.n	8446e <udc_req_std_dev_get_descriptor+0x1fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   84452:	2300      	movs	r3, #0
   84454:	e00b      	b.n	8446e <udc_req_std_dev_get_descriptor+0x1fa>
		break;
   84456:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   84458:	4b07      	ldr	r3, [pc, #28]	; (84478 <udc_req_std_dev_get_descriptor+0x204>)
   8445a:	88da      	ldrh	r2, [r3, #6]
   8445c:	4b06      	ldr	r3, [pc, #24]	; (84478 <udc_req_std_dev_get_descriptor+0x204>)
   8445e:	899b      	ldrh	r3, [r3, #12]
   84460:	429a      	cmp	r2, r3
   84462:	d203      	bcs.n	8446c <udc_req_std_dev_get_descriptor+0x1f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   84464:	4b04      	ldr	r3, [pc, #16]	; (84478 <udc_req_std_dev_get_descriptor+0x204>)
   84466:	88da      	ldrh	r2, [r3, #6]
   84468:	4b03      	ldr	r3, [pc, #12]	; (84478 <udc_req_std_dev_get_descriptor+0x204>)
   8446a:	819a      	strh	r2, [r3, #12]
	}
	return true;
   8446c:	2301      	movs	r3, #1
}
   8446e:	4618      	mov	r0, r3
   84470:	3708      	adds	r7, #8
   84472:	46bd      	mov	sp, r7
   84474:	bd80      	pop	{r7, pc}
   84476:	bf00      	nop
   84478:	20001828 	.word	0x20001828
   8447c:	00085081 	.word	0x00085081
   84480:	20000428 	.word	0x20000428
   84484:	00085125 	.word	0x00085125
   84488:	0008d9f4 	.word	0x0008d9f4
   8448c:	000841a9 	.word	0x000841a9

00084490 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   84490:	b580      	push	{r7, lr}
   84492:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   84494:	4b06      	ldr	r3, [pc, #24]	; (844b0 <udc_req_std_dev_get_configuration+0x20>)
   84496:	88db      	ldrh	r3, [r3, #6]
   84498:	2b01      	cmp	r3, #1
   8449a:	d001      	beq.n	844a0 <udc_req_std_dev_get_configuration+0x10>
		return false;
   8449c:	2300      	movs	r3, #0
   8449e:	e004      	b.n	844aa <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   844a0:	2101      	movs	r1, #1
   844a2:	4804      	ldr	r0, [pc, #16]	; (844b4 <udc_req_std_dev_get_configuration+0x24>)
   844a4:	4b04      	ldr	r3, [pc, #16]	; (844b8 <udc_req_std_dev_get_configuration+0x28>)
   844a6:	4798      	blx	r3
	return true;
   844a8:	2301      	movs	r3, #1
}
   844aa:	4618      	mov	r0, r3
   844ac:	bd80      	pop	{r7, pc}
   844ae:	bf00      	nop
   844b0:	20001828 	.word	0x20001828
   844b4:	20001336 	.word	0x20001336
   844b8:	00085125 	.word	0x00085125

000844bc <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   844bc:	b580      	push	{r7, lr}
   844be:	b082      	sub	sp, #8
   844c0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   844c2:	4b37      	ldr	r3, [pc, #220]	; (845a0 <udc_req_std_dev_set_configuration+0xe4>)
   844c4:	88db      	ldrh	r3, [r3, #6]
   844c6:	2b00      	cmp	r3, #0
   844c8:	d001      	beq.n	844ce <udc_req_std_dev_set_configuration+0x12>
		return false;
   844ca:	2300      	movs	r3, #0
   844cc:	e063      	b.n	84596 <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   844ce:	4b35      	ldr	r3, [pc, #212]	; (845a4 <udc_req_std_dev_set_configuration+0xe8>)
   844d0:	4798      	blx	r3
   844d2:	4603      	mov	r3, r0
   844d4:	2b00      	cmp	r3, #0
   844d6:	d101      	bne.n	844dc <udc_req_std_dev_set_configuration+0x20>
		return false;
   844d8:	2300      	movs	r3, #0
   844da:	e05c      	b.n	84596 <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   844dc:	4b32      	ldr	r3, [pc, #200]	; (845a8 <udc_req_std_dev_set_configuration+0xec>)
   844de:	4798      	blx	r3
   844e0:	4603      	mov	r3, r0
   844e2:	2b00      	cmp	r3, #0
   844e4:	d009      	beq.n	844fa <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   844e6:	4b2e      	ldr	r3, [pc, #184]	; (845a0 <udc_req_std_dev_set_configuration+0xe4>)
   844e8:	885b      	ldrh	r3, [r3, #2]
   844ea:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   844ec:	4a2f      	ldr	r2, [pc, #188]	; (845ac <udc_req_std_dev_set_configuration+0xf0>)
   844ee:	6892      	ldr	r2, [r2, #8]
   844f0:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   844f2:	4293      	cmp	r3, r2
   844f4:	dd0b      	ble.n	8450e <udc_req_std_dev_set_configuration+0x52>
			return false;
   844f6:	2300      	movs	r3, #0
   844f8:	e04d      	b.n	84596 <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   844fa:	4b29      	ldr	r3, [pc, #164]	; (845a0 <udc_req_std_dev_set_configuration+0xe4>)
   844fc:	885b      	ldrh	r3, [r3, #2]
   844fe:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   84500:	4a2a      	ldr	r2, [pc, #168]	; (845ac <udc_req_std_dev_set_configuration+0xf0>)
   84502:	6812      	ldr	r2, [r2, #0]
   84504:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84506:	4293      	cmp	r3, r2
   84508:	dd01      	ble.n	8450e <udc_req_std_dev_set_configuration+0x52>
			return false;
   8450a:	2300      	movs	r3, #0
   8450c:	e043      	b.n	84596 <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   8450e:	4b28      	ldr	r3, [pc, #160]	; (845b0 <udc_req_std_dev_set_configuration+0xf4>)
   84510:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   84512:	4b23      	ldr	r3, [pc, #140]	; (845a0 <udc_req_std_dev_set_configuration+0xe4>)
   84514:	885b      	ldrh	r3, [r3, #2]
   84516:	b2da      	uxtb	r2, r3
   84518:	4b26      	ldr	r3, [pc, #152]	; (845b4 <udc_req_std_dev_set_configuration+0xf8>)
   8451a:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   8451c:	4b25      	ldr	r3, [pc, #148]	; (845b4 <udc_req_std_dev_set_configuration+0xf8>)
   8451e:	781b      	ldrb	r3, [r3, #0]
   84520:	2b00      	cmp	r3, #0
   84522:	d101      	bne.n	84528 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   84524:	2301      	movs	r3, #1
   84526:	e036      	b.n	84596 <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84528:	4b1f      	ldr	r3, [pc, #124]	; (845a8 <udc_req_std_dev_set_configuration+0xec>)
   8452a:	4798      	blx	r3
   8452c:	4603      	mov	r3, r0
   8452e:	2b00      	cmp	r3, #0
   84530:	d00b      	beq.n	8454a <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   84532:	4b1e      	ldr	r3, [pc, #120]	; (845ac <udc_req_std_dev_set_configuration+0xf0>)
   84534:	691a      	ldr	r2, [r3, #16]
   84536:	4b1f      	ldr	r3, [pc, #124]	; (845b4 <udc_req_std_dev_set_configuration+0xf8>)
   84538:	781b      	ldrb	r3, [r3, #0]
   8453a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   8453e:	3b01      	subs	r3, #1
   84540:	00db      	lsls	r3, r3, #3
   84542:	4413      	add	r3, r2
   84544:	4a1c      	ldr	r2, [pc, #112]	; (845b8 <udc_req_std_dev_set_configuration+0xfc>)
   84546:	6013      	str	r3, [r2, #0]
   84548:	e00a      	b.n	84560 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   8454a:	4b18      	ldr	r3, [pc, #96]	; (845ac <udc_req_std_dev_set_configuration+0xf0>)
   8454c:	685a      	ldr	r2, [r3, #4]
   8454e:	4b19      	ldr	r3, [pc, #100]	; (845b4 <udc_req_std_dev_set_configuration+0xf8>)
   84550:	781b      	ldrb	r3, [r3, #0]
   84552:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84556:	3b01      	subs	r3, #1
   84558:	00db      	lsls	r3, r3, #3
   8455a:	4413      	add	r3, r2
   8455c:	4a16      	ldr	r2, [pc, #88]	; (845b8 <udc_req_std_dev_set_configuration+0xfc>)
   8455e:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84560:	2300      	movs	r3, #0
   84562:	71fb      	strb	r3, [r7, #7]
   84564:	e00f      	b.n	84586 <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   84566:	79fb      	ldrb	r3, [r7, #7]
   84568:	2100      	movs	r1, #0
   8456a:	4618      	mov	r0, r3
   8456c:	4b13      	ldr	r3, [pc, #76]	; (845bc <udc_req_std_dev_set_configuration+0x100>)
   8456e:	4798      	blx	r3
   84570:	4603      	mov	r3, r0
   84572:	f083 0301 	eor.w	r3, r3, #1
   84576:	b2db      	uxtb	r3, r3
   84578:	2b00      	cmp	r3, #0
   8457a:	d001      	beq.n	84580 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   8457c:	2300      	movs	r3, #0
   8457e:	e00a      	b.n	84596 <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   84580:	79fb      	ldrb	r3, [r7, #7]
   84582:	3301      	adds	r3, #1
   84584:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84586:	4b0c      	ldr	r3, [pc, #48]	; (845b8 <udc_req_std_dev_set_configuration+0xfc>)
   84588:	681b      	ldr	r3, [r3, #0]
   8458a:	681b      	ldr	r3, [r3, #0]
   8458c:	791b      	ldrb	r3, [r3, #4]
   8458e:	79fa      	ldrb	r2, [r7, #7]
   84590:	429a      	cmp	r2, r3
   84592:	d3e8      	bcc.n	84566 <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   84594:	2301      	movs	r3, #1
}
   84596:	4618      	mov	r0, r3
   84598:	3708      	adds	r7, #8
   8459a:	46bd      	mov	sp, r7
   8459c:	bd80      	pop	{r7, pc}
   8459e:	bf00      	nop
   845a0:	20001828 	.word	0x20001828
   845a4:	000850e9 	.word	0x000850e9
   845a8:	00085081 	.word	0x00085081
   845ac:	20000428 	.word	0x20000428
   845b0:	00083ec1 	.word	0x00083ec1
   845b4:	20001336 	.word	0x20001336
   845b8:	20001338 	.word	0x20001338
   845bc:	00083e19 	.word	0x00083e19

000845c0 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   845c0:	b580      	push	{r7, lr}
   845c2:	b082      	sub	sp, #8
   845c4:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   845c6:	4b1e      	ldr	r3, [pc, #120]	; (84640 <udc_req_std_iface_get_setting+0x80>)
   845c8:	88db      	ldrh	r3, [r3, #6]
   845ca:	2b01      	cmp	r3, #1
   845cc:	d001      	beq.n	845d2 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   845ce:	2300      	movs	r3, #0
   845d0:	e032      	b.n	84638 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   845d2:	4b1c      	ldr	r3, [pc, #112]	; (84644 <udc_req_std_iface_get_setting+0x84>)
   845d4:	781b      	ldrb	r3, [r3, #0]
   845d6:	2b00      	cmp	r3, #0
   845d8:	d101      	bne.n	845de <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   845da:	2300      	movs	r3, #0
   845dc:	e02c      	b.n	84638 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   845de:	4b18      	ldr	r3, [pc, #96]	; (84640 <udc_req_std_iface_get_setting+0x80>)
   845e0:	889b      	ldrh	r3, [r3, #4]
   845e2:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   845e4:	4b18      	ldr	r3, [pc, #96]	; (84648 <udc_req_std_iface_get_setting+0x88>)
   845e6:	681b      	ldr	r3, [r3, #0]
   845e8:	681b      	ldr	r3, [r3, #0]
   845ea:	791b      	ldrb	r3, [r3, #4]
   845ec:	79fa      	ldrb	r2, [r7, #7]
   845ee:	429a      	cmp	r2, r3
   845f0:	d301      	bcc.n	845f6 <udc_req_std_iface_get_setting+0x36>
		return false;
   845f2:	2300      	movs	r3, #0
   845f4:	e020      	b.n	84638 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   845f6:	79fb      	ldrb	r3, [r7, #7]
   845f8:	2100      	movs	r1, #0
   845fa:	4618      	mov	r0, r3
   845fc:	4b13      	ldr	r3, [pc, #76]	; (8464c <udc_req_std_iface_get_setting+0x8c>)
   845fe:	4798      	blx	r3
   84600:	4603      	mov	r3, r0
   84602:	f083 0301 	eor.w	r3, r3, #1
   84606:	b2db      	uxtb	r3, r3
   84608:	2b00      	cmp	r3, #0
   8460a:	d001      	beq.n	84610 <udc_req_std_iface_get_setting+0x50>
		return false;
   8460c:	2300      	movs	r3, #0
   8460e:	e013      	b.n	84638 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84610:	4b0d      	ldr	r3, [pc, #52]	; (84648 <udc_req_std_iface_get_setting+0x88>)
   84612:	681b      	ldr	r3, [r3, #0]
   84614:	685a      	ldr	r2, [r3, #4]
   84616:	79fb      	ldrb	r3, [r7, #7]
   84618:	009b      	lsls	r3, r3, #2
   8461a:	4413      	add	r3, r2
   8461c:	681b      	ldr	r3, [r3, #0]
   8461e:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   84620:	683b      	ldr	r3, [r7, #0]
   84622:	68db      	ldr	r3, [r3, #12]
   84624:	4798      	blx	r3
   84626:	4603      	mov	r3, r0
   84628:	461a      	mov	r2, r3
   8462a:	4b09      	ldr	r3, [pc, #36]	; (84650 <udc_req_std_iface_get_setting+0x90>)
   8462c:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   8462e:	2101      	movs	r1, #1
   84630:	4807      	ldr	r0, [pc, #28]	; (84650 <udc_req_std_iface_get_setting+0x90>)
   84632:	4b08      	ldr	r3, [pc, #32]	; (84654 <udc_req_std_iface_get_setting+0x94>)
   84634:	4798      	blx	r3
	return true;
   84636:	2301      	movs	r3, #1
}
   84638:	4618      	mov	r0, r3
   8463a:	3708      	adds	r7, #8
   8463c:	46bd      	mov	sp, r7
   8463e:	bd80      	pop	{r7, pc}
   84640:	20001828 	.word	0x20001828
   84644:	20001336 	.word	0x20001336
   84648:	20001338 	.word	0x20001338
   8464c:	00083cdd 	.word	0x00083cdd
   84650:	20001342 	.word	0x20001342
   84654:	00085125 	.word	0x00085125

00084658 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   84658:	b580      	push	{r7, lr}
   8465a:	b082      	sub	sp, #8
   8465c:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   8465e:	4b14      	ldr	r3, [pc, #80]	; (846b0 <udc_req_std_iface_set_setting+0x58>)
   84660:	88db      	ldrh	r3, [r3, #6]
   84662:	2b00      	cmp	r3, #0
   84664:	d001      	beq.n	8466a <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   84666:	2300      	movs	r3, #0
   84668:	e01e      	b.n	846a8 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   8466a:	4b12      	ldr	r3, [pc, #72]	; (846b4 <udc_req_std_iface_set_setting+0x5c>)
   8466c:	781b      	ldrb	r3, [r3, #0]
   8466e:	2b00      	cmp	r3, #0
   84670:	d101      	bne.n	84676 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   84672:	2300      	movs	r3, #0
   84674:	e018      	b.n	846a8 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84676:	4b0e      	ldr	r3, [pc, #56]	; (846b0 <udc_req_std_iface_set_setting+0x58>)
   84678:	889b      	ldrh	r3, [r3, #4]
   8467a:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   8467c:	4b0c      	ldr	r3, [pc, #48]	; (846b0 <udc_req_std_iface_set_setting+0x58>)
   8467e:	885b      	ldrh	r3, [r3, #2]
   84680:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   84682:	79fb      	ldrb	r3, [r7, #7]
   84684:	4618      	mov	r0, r3
   84686:	4b0c      	ldr	r3, [pc, #48]	; (846b8 <udc_req_std_iface_set_setting+0x60>)
   84688:	4798      	blx	r3
   8468a:	4603      	mov	r3, r0
   8468c:	f083 0301 	eor.w	r3, r3, #1
   84690:	b2db      	uxtb	r3, r3
   84692:	2b00      	cmp	r3, #0
   84694:	d001      	beq.n	8469a <udc_req_std_iface_set_setting+0x42>
		return false;
   84696:	2300      	movs	r3, #0
   84698:	e006      	b.n	846a8 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   8469a:	79ba      	ldrb	r2, [r7, #6]
   8469c:	79fb      	ldrb	r3, [r7, #7]
   8469e:	4611      	mov	r1, r2
   846a0:	4618      	mov	r0, r3
   846a2:	4b06      	ldr	r3, [pc, #24]	; (846bc <udc_req_std_iface_set_setting+0x64>)
   846a4:	4798      	blx	r3
   846a6:	4603      	mov	r3, r0
}
   846a8:	4618      	mov	r0, r3
   846aa:	3708      	adds	r7, #8
   846ac:	46bd      	mov	sp, r7
   846ae:	bd80      	pop	{r7, pc}
   846b0:	20001828 	.word	0x20001828
   846b4:	20001336 	.word	0x20001336
   846b8:	00083d79 	.word	0x00083d79
   846bc:	00083e19 	.word	0x00083e19

000846c0 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   846c0:	b580      	push	{r7, lr}
   846c2:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   846c4:	4b55      	ldr	r3, [pc, #340]	; (8481c <udc_reqstd+0x15c>)
   846c6:	781b      	ldrb	r3, [r3, #0]
   846c8:	b25b      	sxtb	r3, r3
   846ca:	2b00      	cmp	r3, #0
   846cc:	da44      	bge.n	84758 <udc_reqstd+0x98>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   846ce:	4b53      	ldr	r3, [pc, #332]	; (8481c <udc_reqstd+0x15c>)
   846d0:	88db      	ldrh	r3, [r3, #6]
   846d2:	2b00      	cmp	r3, #0
   846d4:	d101      	bne.n	846da <udc_reqstd+0x1a>
			return false; // Error for USB host
   846d6:	2300      	movs	r3, #0
   846d8:	e09d      	b.n	84816 <udc_reqstd+0x156>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   846da:	4b50      	ldr	r3, [pc, #320]	; (8481c <udc_reqstd+0x15c>)
   846dc:	781b      	ldrb	r3, [r3, #0]
   846de:	f003 031f 	and.w	r3, r3, #31
   846e2:	2b00      	cmp	r3, #0
   846e4:	d116      	bne.n	84714 <udc_reqstd+0x54>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   846e6:	4b4d      	ldr	r3, [pc, #308]	; (8481c <udc_reqstd+0x15c>)
   846e8:	785b      	ldrb	r3, [r3, #1]
   846ea:	2b08      	cmp	r3, #8
   846ec:	d00e      	beq.n	8470c <udc_reqstd+0x4c>
   846ee:	2b08      	cmp	r3, #8
   846f0:	dc12      	bgt.n	84718 <udc_reqstd+0x58>
   846f2:	2b00      	cmp	r3, #0
   846f4:	d002      	beq.n	846fc <udc_reqstd+0x3c>
   846f6:	2b06      	cmp	r3, #6
   846f8:	d004      	beq.n	84704 <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   846fa:	e00d      	b.n	84718 <udc_reqstd+0x58>
				return udc_req_std_dev_get_status();
   846fc:	4b48      	ldr	r3, [pc, #288]	; (84820 <udc_reqstd+0x160>)
   846fe:	4798      	blx	r3
   84700:	4603      	mov	r3, r0
   84702:	e088      	b.n	84816 <udc_reqstd+0x156>
				return udc_req_std_dev_get_descriptor();
   84704:	4b47      	ldr	r3, [pc, #284]	; (84824 <udc_reqstd+0x164>)
   84706:	4798      	blx	r3
   84708:	4603      	mov	r3, r0
   8470a:	e084      	b.n	84816 <udc_reqstd+0x156>
				return udc_req_std_dev_get_configuration();
   8470c:	4b46      	ldr	r3, [pc, #280]	; (84828 <udc_reqstd+0x168>)
   8470e:	4798      	blx	r3
   84710:	4603      	mov	r3, r0
   84712:	e080      	b.n	84816 <udc_reqstd+0x156>
			}
		}
   84714:	bf00      	nop
   84716:	e000      	b.n	8471a <udc_reqstd+0x5a>
				break;
   84718:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8471a:	4b40      	ldr	r3, [pc, #256]	; (8481c <udc_reqstd+0x15c>)
   8471c:	781b      	ldrb	r3, [r3, #0]
   8471e:	f003 031f 	and.w	r3, r3, #31
   84722:	2b01      	cmp	r3, #1
   84724:	d107      	bne.n	84736 <udc_reqstd+0x76>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   84726:	4b3d      	ldr	r3, [pc, #244]	; (8481c <udc_reqstd+0x15c>)
   84728:	785b      	ldrb	r3, [r3, #1]
   8472a:	2b0a      	cmp	r3, #10
   8472c:	d105      	bne.n	8473a <udc_reqstd+0x7a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   8472e:	4b3f      	ldr	r3, [pc, #252]	; (8482c <udc_reqstd+0x16c>)
   84730:	4798      	blx	r3
   84732:	4603      	mov	r3, r0
   84734:	e06f      	b.n	84816 <udc_reqstd+0x156>
			default:
				break;
			}
		}
   84736:	bf00      	nop
   84738:	e000      	b.n	8473c <udc_reqstd+0x7c>
				break;
   8473a:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   8473c:	4b37      	ldr	r3, [pc, #220]	; (8481c <udc_reqstd+0x15c>)
   8473e:	781b      	ldrb	r3, [r3, #0]
   84740:	f003 031f 	and.w	r3, r3, #31
   84744:	2b02      	cmp	r3, #2
   84746:	d160      	bne.n	8480a <udc_reqstd+0x14a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   84748:	4b34      	ldr	r3, [pc, #208]	; (8481c <udc_reqstd+0x15c>)
   8474a:	785b      	ldrb	r3, [r3, #1]
   8474c:	2b00      	cmp	r3, #0
   8474e:	d15e      	bne.n	8480e <udc_reqstd+0x14e>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   84750:	4b37      	ldr	r3, [pc, #220]	; (84830 <udc_reqstd+0x170>)
   84752:	4798      	blx	r3
   84754:	4603      	mov	r3, r0
   84756:	e05e      	b.n	84816 <udc_reqstd+0x156>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84758:	4b30      	ldr	r3, [pc, #192]	; (8481c <udc_reqstd+0x15c>)
   8475a:	781b      	ldrb	r3, [r3, #0]
   8475c:	f003 031f 	and.w	r3, r3, #31
   84760:	2b00      	cmp	r3, #0
   84762:	d129      	bne.n	847b8 <udc_reqstd+0xf8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   84764:	4b2d      	ldr	r3, [pc, #180]	; (8481c <udc_reqstd+0x15c>)
   84766:	785b      	ldrb	r3, [r3, #1]
   84768:	3b01      	subs	r3, #1
   8476a:	2b08      	cmp	r3, #8
   8476c:	d826      	bhi.n	847bc <udc_reqstd+0xfc>
   8476e:	a201      	add	r2, pc, #4	; (adr r2, 84774 <udc_reqstd+0xb4>)
   84770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84774:	000847a1 	.word	0x000847a1
   84778:	000847bd 	.word	0x000847bd
   8477c:	000847a9 	.word	0x000847a9
   84780:	000847bd 	.word	0x000847bd
   84784:	00084799 	.word	0x00084799
   84788:	000847bd 	.word	0x000847bd
   8478c:	000847bd 	.word	0x000847bd
   84790:	000847bd 	.word	0x000847bd
   84794:	000847b1 	.word	0x000847b1
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   84798:	4b26      	ldr	r3, [pc, #152]	; (84834 <udc_reqstd+0x174>)
   8479a:	4798      	blx	r3
   8479c:	4603      	mov	r3, r0
   8479e:	e03a      	b.n	84816 <udc_reqstd+0x156>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   847a0:	4b25      	ldr	r3, [pc, #148]	; (84838 <udc_reqstd+0x178>)
   847a2:	4798      	blx	r3
   847a4:	4603      	mov	r3, r0
   847a6:	e036      	b.n	84816 <udc_reqstd+0x156>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   847a8:	4b24      	ldr	r3, [pc, #144]	; (8483c <udc_reqstd+0x17c>)
   847aa:	4798      	blx	r3
   847ac:	4603      	mov	r3, r0
   847ae:	e032      	b.n	84816 <udc_reqstd+0x156>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   847b0:	4b23      	ldr	r3, [pc, #140]	; (84840 <udc_reqstd+0x180>)
   847b2:	4798      	blx	r3
   847b4:	4603      	mov	r3, r0
   847b6:	e02e      	b.n	84816 <udc_reqstd+0x156>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   847b8:	bf00      	nop
   847ba:	e000      	b.n	847be <udc_reqstd+0xfe>
				break;
   847bc:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   847be:	4b17      	ldr	r3, [pc, #92]	; (8481c <udc_reqstd+0x15c>)
   847c0:	781b      	ldrb	r3, [r3, #0]
   847c2:	f003 031f 	and.w	r3, r3, #31
   847c6:	2b01      	cmp	r3, #1
   847c8:	d107      	bne.n	847da <udc_reqstd+0x11a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   847ca:	4b14      	ldr	r3, [pc, #80]	; (8481c <udc_reqstd+0x15c>)
   847cc:	785b      	ldrb	r3, [r3, #1]
   847ce:	2b0b      	cmp	r3, #11
   847d0:	d105      	bne.n	847de <udc_reqstd+0x11e>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   847d2:	4b1c      	ldr	r3, [pc, #112]	; (84844 <udc_reqstd+0x184>)
   847d4:	4798      	blx	r3
   847d6:	4603      	mov	r3, r0
   847d8:	e01d      	b.n	84816 <udc_reqstd+0x156>
			default:
				break;
			}
		}
   847da:	bf00      	nop
   847dc:	e000      	b.n	847e0 <udc_reqstd+0x120>
				break;
   847de:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   847e0:	4b0e      	ldr	r3, [pc, #56]	; (8481c <udc_reqstd+0x15c>)
   847e2:	781b      	ldrb	r3, [r3, #0]
   847e4:	f003 031f 	and.w	r3, r3, #31
   847e8:	2b02      	cmp	r3, #2
   847ea:	d112      	bne.n	84812 <udc_reqstd+0x152>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   847ec:	4b0b      	ldr	r3, [pc, #44]	; (8481c <udc_reqstd+0x15c>)
   847ee:	785b      	ldrb	r3, [r3, #1]
   847f0:	2b01      	cmp	r3, #1
   847f2:	d002      	beq.n	847fa <udc_reqstd+0x13a>
   847f4:	2b03      	cmp	r3, #3
   847f6:	d004      	beq.n	84802 <udc_reqstd+0x142>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   847f8:	e00c      	b.n	84814 <udc_reqstd+0x154>
				return udc_req_std_ep_clear_feature();
   847fa:	4b13      	ldr	r3, [pc, #76]	; (84848 <udc_reqstd+0x188>)
   847fc:	4798      	blx	r3
   847fe:	4603      	mov	r3, r0
   84800:	e009      	b.n	84816 <udc_reqstd+0x156>
				return udc_req_std_ep_set_feature();
   84802:	4b12      	ldr	r3, [pc, #72]	; (8484c <udc_reqstd+0x18c>)
   84804:	4798      	blx	r3
   84806:	4603      	mov	r3, r0
   84808:	e005      	b.n	84816 <udc_reqstd+0x156>
		}
   8480a:	bf00      	nop
   8480c:	e002      	b.n	84814 <udc_reqstd+0x154>
				break;
   8480e:	bf00      	nop
   84810:	e000      	b.n	84814 <udc_reqstd+0x154>
			}
		}
   84812:	bf00      	nop
#endif
	}
	return false;
   84814:	2300      	movs	r3, #0
}
   84816:	4618      	mov	r0, r3
   84818:	bd80      	pop	{r7, pc}
   8481a:	bf00      	nop
   8481c:	20001828 	.word	0x20001828
   84820:	00083f75 	.word	0x00083f75
   84824:	00084275 	.word	0x00084275
   84828:	00084491 	.word	0x00084491
   8482c:	000845c1 	.word	0x000845c1
   84830:	00083fa1 	.word	0x00083fa1
   84834:	00084181 	.word	0x00084181
   84838:	00083fe5 	.word	0x00083fe5
   8483c:	00084059 	.word	0x00084059
   84840:	000844bd 	.word	0x000844bd
   84844:	00084659 	.word	0x00084659
   84848:	00084021 	.word	0x00084021
   8484c:	00084115 	.word	0x00084115

00084850 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   84850:	b580      	push	{r7, lr}
   84852:	b082      	sub	sp, #8
   84854:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   84856:	4b20      	ldr	r3, [pc, #128]	; (848d8 <udc_req_iface+0x88>)
   84858:	781b      	ldrb	r3, [r3, #0]
   8485a:	2b00      	cmp	r3, #0
   8485c:	d101      	bne.n	84862 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   8485e:	2300      	movs	r3, #0
   84860:	e036      	b.n	848d0 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84862:	4b1e      	ldr	r3, [pc, #120]	; (848dc <udc_req_iface+0x8c>)
   84864:	889b      	ldrh	r3, [r3, #4]
   84866:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84868:	4b1d      	ldr	r3, [pc, #116]	; (848e0 <udc_req_iface+0x90>)
   8486a:	681b      	ldr	r3, [r3, #0]
   8486c:	681b      	ldr	r3, [r3, #0]
   8486e:	791b      	ldrb	r3, [r3, #4]
   84870:	79fa      	ldrb	r2, [r7, #7]
   84872:	429a      	cmp	r2, r3
   84874:	d301      	bcc.n	8487a <udc_req_iface+0x2a>
		return false;
   84876:	2300      	movs	r3, #0
   84878:	e02a      	b.n	848d0 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   8487a:	79fb      	ldrb	r3, [r7, #7]
   8487c:	2100      	movs	r1, #0
   8487e:	4618      	mov	r0, r3
   84880:	4b18      	ldr	r3, [pc, #96]	; (848e4 <udc_req_iface+0x94>)
   84882:	4798      	blx	r3
   84884:	4603      	mov	r3, r0
   84886:	f083 0301 	eor.w	r3, r3, #1
   8488a:	b2db      	uxtb	r3, r3
   8488c:	2b00      	cmp	r3, #0
   8488e:	d001      	beq.n	84894 <udc_req_iface+0x44>
		return false;
   84890:	2300      	movs	r3, #0
   84892:	e01d      	b.n	848d0 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84894:	4b12      	ldr	r3, [pc, #72]	; (848e0 <udc_req_iface+0x90>)
   84896:	681b      	ldr	r3, [r3, #0]
   84898:	685a      	ldr	r2, [r3, #4]
   8489a:	79fb      	ldrb	r3, [r7, #7]
   8489c:	009b      	lsls	r3, r3, #2
   8489e:	4413      	add	r3, r2
   848a0:	681b      	ldr	r3, [r3, #0]
   848a2:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   848a4:	683b      	ldr	r3, [r7, #0]
   848a6:	68db      	ldr	r3, [r3, #12]
   848a8:	4798      	blx	r3
   848aa:	4603      	mov	r3, r0
   848ac:	461a      	mov	r2, r3
   848ae:	79fb      	ldrb	r3, [r7, #7]
   848b0:	4611      	mov	r1, r2
   848b2:	4618      	mov	r0, r3
   848b4:	4b0b      	ldr	r3, [pc, #44]	; (848e4 <udc_req_iface+0x94>)
   848b6:	4798      	blx	r3
   848b8:	4603      	mov	r3, r0
   848ba:	f083 0301 	eor.w	r3, r3, #1
   848be:	b2db      	uxtb	r3, r3
   848c0:	2b00      	cmp	r3, #0
   848c2:	d001      	beq.n	848c8 <udc_req_iface+0x78>
		return false;
   848c4:	2300      	movs	r3, #0
   848c6:	e003      	b.n	848d0 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   848c8:	683b      	ldr	r3, [r7, #0]
   848ca:	689b      	ldr	r3, [r3, #8]
   848cc:	4798      	blx	r3
   848ce:	4603      	mov	r3, r0
}
   848d0:	4618      	mov	r0, r3
   848d2:	3708      	adds	r7, #8
   848d4:	46bd      	mov	sp, r7
   848d6:	bd80      	pop	{r7, pc}
   848d8:	20001336 	.word	0x20001336
   848dc:	20001828 	.word	0x20001828
   848e0:	20001338 	.word	0x20001338
   848e4:	00083cdd 	.word	0x00083cdd

000848e8 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   848e8:	b580      	push	{r7, lr}
   848ea:	b082      	sub	sp, #8
   848ec:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   848ee:	4b1e      	ldr	r3, [pc, #120]	; (84968 <udc_req_ep+0x80>)
   848f0:	781b      	ldrb	r3, [r3, #0]
   848f2:	2b00      	cmp	r3, #0
   848f4:	d101      	bne.n	848fa <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   848f6:	2300      	movs	r3, #0
   848f8:	e032      	b.n	84960 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   848fa:	4b1c      	ldr	r3, [pc, #112]	; (8496c <udc_req_ep+0x84>)
   848fc:	889b      	ldrh	r3, [r3, #4]
   848fe:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84900:	2300      	movs	r3, #0
   84902:	71fb      	strb	r3, [r7, #7]
   84904:	e024      	b.n	84950 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   84906:	4b1a      	ldr	r3, [pc, #104]	; (84970 <udc_req_ep+0x88>)
   84908:	681b      	ldr	r3, [r3, #0]
   8490a:	685a      	ldr	r2, [r3, #4]
   8490c:	79fb      	ldrb	r3, [r7, #7]
   8490e:	009b      	lsls	r3, r3, #2
   84910:	4413      	add	r3, r2
   84912:	681b      	ldr	r3, [r3, #0]
   84914:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84916:	683b      	ldr	r3, [r7, #0]
   84918:	68db      	ldr	r3, [r3, #12]
   8491a:	4798      	blx	r3
   8491c:	4603      	mov	r3, r0
   8491e:	461a      	mov	r2, r3
   84920:	79fb      	ldrb	r3, [r7, #7]
   84922:	4611      	mov	r1, r2
   84924:	4618      	mov	r0, r3
   84926:	4b13      	ldr	r3, [pc, #76]	; (84974 <udc_req_ep+0x8c>)
   84928:	4798      	blx	r3
   8492a:	4603      	mov	r3, r0
   8492c:	f083 0301 	eor.w	r3, r3, #1
   84930:	b2db      	uxtb	r3, r3
   84932:	2b00      	cmp	r3, #0
   84934:	d001      	beq.n	8493a <udc_req_ep+0x52>
			return false;
   84936:	2300      	movs	r3, #0
   84938:	e012      	b.n	84960 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   8493a:	683b      	ldr	r3, [r7, #0]
   8493c:	689b      	ldr	r3, [r3, #8]
   8493e:	4798      	blx	r3
   84940:	4603      	mov	r3, r0
   84942:	2b00      	cmp	r3, #0
   84944:	d001      	beq.n	8494a <udc_req_ep+0x62>
			return true;
   84946:	2301      	movs	r3, #1
   84948:	e00a      	b.n	84960 <udc_req_ep+0x78>
			iface_num++) {
   8494a:	79fb      	ldrb	r3, [r7, #7]
   8494c:	3301      	adds	r3, #1
   8494e:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84950:	4b07      	ldr	r3, [pc, #28]	; (84970 <udc_req_ep+0x88>)
   84952:	681b      	ldr	r3, [r3, #0]
   84954:	681b      	ldr	r3, [r3, #0]
   84956:	791b      	ldrb	r3, [r3, #4]
   84958:	79fa      	ldrb	r2, [r7, #7]
   8495a:	429a      	cmp	r2, r3
   8495c:	d3d3      	bcc.n	84906 <udc_req_ep+0x1e>
		}
	}
	return false;
   8495e:	2300      	movs	r3, #0
}
   84960:	4618      	mov	r0, r3
   84962:	3708      	adds	r7, #8
   84964:	46bd      	mov	sp, r7
   84966:	bd80      	pop	{r7, pc}
   84968:	20001336 	.word	0x20001336
   8496c:	20001828 	.word	0x20001828
   84970:	20001338 	.word	0x20001338
   84974:	00083cdd 	.word	0x00083cdd

00084978 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   84978:	b580      	push	{r7, lr}
   8497a:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   8497c:	4b25      	ldr	r3, [pc, #148]	; (84a14 <udc_process_setup+0x9c>)
   8497e:	2200      	movs	r2, #0
   84980:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   84982:	4b24      	ldr	r3, [pc, #144]	; (84a14 <udc_process_setup+0x9c>)
   84984:	2200      	movs	r2, #0
   84986:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   84988:	4b22      	ldr	r3, [pc, #136]	; (84a14 <udc_process_setup+0x9c>)
   8498a:	2200      	movs	r2, #0
   8498c:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   8498e:	4b21      	ldr	r3, [pc, #132]	; (84a14 <udc_process_setup+0x9c>)
   84990:	781b      	ldrb	r3, [r3, #0]
   84992:	2bc0      	cmp	r3, #192	; 0xc0
   84994:	d109      	bne.n	849aa <udc_process_setup+0x32>
   84996:	4b1f      	ldr	r3, [pc, #124]	; (84a14 <udc_process_setup+0x9c>)
   84998:	785b      	ldrb	r3, [r3, #1]
   8499a:	2b01      	cmp	r3, #1
   8499c:	d105      	bne.n	849aa <udc_process_setup+0x32>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   8499e:	219e      	movs	r1, #158	; 0x9e
   849a0:	481d      	ldr	r0, [pc, #116]	; (84a18 <udc_process_setup+0xa0>)
   849a2:	4b1e      	ldr	r3, [pc, #120]	; (84a1c <udc_process_setup+0xa4>)
   849a4:	4798      	blx	r3
		return true;
   849a6:	2301      	movs	r3, #1
   849a8:	e032      	b.n	84a10 <udc_process_setup+0x98>
	}

	if (Udd_setup_is_in()) {
   849aa:	4b1a      	ldr	r3, [pc, #104]	; (84a14 <udc_process_setup+0x9c>)
   849ac:	781b      	ldrb	r3, [r3, #0]
   849ae:	b25b      	sxtb	r3, r3
   849b0:	2b00      	cmp	r3, #0
   849b2:	da05      	bge.n	849c0 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   849b4:	4b17      	ldr	r3, [pc, #92]	; (84a14 <udc_process_setup+0x9c>)
   849b6:	88db      	ldrh	r3, [r3, #6]
   849b8:	2b00      	cmp	r3, #0
   849ba:	d101      	bne.n	849c0 <udc_process_setup+0x48>
			return false; // Error from USB host
   849bc:	2300      	movs	r3, #0
   849be:	e027      	b.n	84a10 <udc_process_setup+0x98>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   849c0:	4b14      	ldr	r3, [pc, #80]	; (84a14 <udc_process_setup+0x9c>)
   849c2:	781b      	ldrb	r3, [r3, #0]
   849c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
   849c8:	2b00      	cmp	r3, #0
   849ca:	d106      	bne.n	849da <udc_process_setup+0x62>
		if (udc_reqstd()) {
   849cc:	4b14      	ldr	r3, [pc, #80]	; (84a20 <udc_process_setup+0xa8>)
   849ce:	4798      	blx	r3
   849d0:	4603      	mov	r3, r0
   849d2:	2b00      	cmp	r3, #0
   849d4:	d001      	beq.n	849da <udc_process_setup+0x62>
			return true;
   849d6:	2301      	movs	r3, #1
   849d8:	e01a      	b.n	84a10 <udc_process_setup+0x98>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   849da:	4b0e      	ldr	r3, [pc, #56]	; (84a14 <udc_process_setup+0x9c>)
   849dc:	781b      	ldrb	r3, [r3, #0]
   849de:	f003 031f 	and.w	r3, r3, #31
   849e2:	2b01      	cmp	r3, #1
   849e4:	d106      	bne.n	849f4 <udc_process_setup+0x7c>
		if (udc_req_iface()) {
   849e6:	4b0f      	ldr	r3, [pc, #60]	; (84a24 <udc_process_setup+0xac>)
   849e8:	4798      	blx	r3
   849ea:	4603      	mov	r3, r0
   849ec:	2b00      	cmp	r3, #0
   849ee:	d001      	beq.n	849f4 <udc_process_setup+0x7c>
			return true;
   849f0:	2301      	movs	r3, #1
   849f2:	e00d      	b.n	84a10 <udc_process_setup+0x98>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   849f4:	4b07      	ldr	r3, [pc, #28]	; (84a14 <udc_process_setup+0x9c>)
   849f6:	781b      	ldrb	r3, [r3, #0]
   849f8:	f003 031f 	and.w	r3, r3, #31
   849fc:	2b02      	cmp	r3, #2
   849fe:	d106      	bne.n	84a0e <udc_process_setup+0x96>
		if (udc_req_ep()) {
   84a00:	4b09      	ldr	r3, [pc, #36]	; (84a28 <udc_process_setup+0xb0>)
   84a02:	4798      	blx	r3
   84a04:	4603      	mov	r3, r0
   84a06:	2b00      	cmp	r3, #0
   84a08:	d001      	beq.n	84a0e <udc_process_setup+0x96>
			return true;
   84a0a:	2301      	movs	r3, #1
   84a0c:	e000      	b.n	84a10 <udc_process_setup+0x98>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   84a0e:	2300      	movs	r3, #0
#endif
}
   84a10:	4618      	mov	r0, r3
   84a12:	bd80      	pop	{r7, pc}
   84a14:	20001828 	.word	0x20001828
   84a18:	20000300 	.word	0x20000300
   84a1c:	00085125 	.word	0x00085125
   84a20:	000846c1 	.word	0x000846c1
   84a24:	00084851 	.word	0x00084851
   84a28:	000848e9 	.word	0x000848e9

00084a2c <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   84a2c:	b580      	push	{r7, lr}
   84a2e:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   84a30:	4b0b      	ldr	r3, [pc, #44]	; (84a60 <udi_vendor_enable+0x34>)
   84a32:	4798      	blx	r3
   84a34:	4603      	mov	r3, r0
   84a36:	78da      	ldrb	r2, [r3, #3]
   84a38:	4b0a      	ldr	r3, [pc, #40]	; (84a64 <udi_vendor_enable+0x38>)
   84a3a:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   84a3c:	4b09      	ldr	r3, [pc, #36]	; (84a64 <udi_vendor_enable+0x38>)
   84a3e:	781b      	ldrb	r3, [r3, #0]
   84a40:	2b00      	cmp	r3, #0
   84a42:	d109      	bne.n	84a58 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   84a44:	4b08      	ldr	r3, [pc, #32]	; (84a68 <udi_vendor_enable+0x3c>)
   84a46:	4798      	blx	r3
   84a48:	4603      	mov	r3, r0
   84a4a:	f083 0301 	eor.w	r3, r3, #1
   84a4e:	b2db      	uxtb	r3, r3
   84a50:	2b00      	cmp	r3, #0
   84a52:	d001      	beq.n	84a58 <udi_vendor_enable+0x2c>
			return false;
   84a54:	2300      	movs	r3, #0
   84a56:	e000      	b.n	84a5a <udi_vendor_enable+0x2e>
		}
	}
	return true;
   84a58:	2301      	movs	r3, #1
}
   84a5a:	4618      	mov	r0, r3
   84a5c:	bd80      	pop	{r7, pc}
   84a5e:	bf00      	nop
   84a60:	00083c49 	.word	0x00083c49
   84a64:	20001343 	.word	0x20001343
   84a68:	00080d11 	.word	0x00080d11

00084a6c <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   84a6c:	b580      	push	{r7, lr}
   84a6e:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   84a70:	4b03      	ldr	r3, [pc, #12]	; (84a80 <udi_vendor_disable+0x14>)
   84a72:	781b      	ldrb	r3, [r3, #0]
   84a74:	2b00      	cmp	r3, #0
   84a76:	d101      	bne.n	84a7c <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   84a78:	4b02      	ldr	r3, [pc, #8]	; (84a84 <udi_vendor_disable+0x18>)
   84a7a:	4798      	blx	r3
	}
}
   84a7c:	bf00      	nop
   84a7e:	bd80      	pop	{r7, pc}
   84a80:	20001343 	.word	0x20001343
   84a84:	00080d49 	.word	0x00080d49

00084a88 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   84a88:	b580      	push	{r7, lr}
   84a8a:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   84a8c:	4b10      	ldr	r3, [pc, #64]	; (84ad0 <udi_vendor_setup+0x48>)
   84a8e:	781b      	ldrb	r3, [r3, #0]
   84a90:	b25b      	sxtb	r3, r3
   84a92:	2b00      	cmp	r3, #0
   84a94:	da09      	bge.n	84aaa <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84a96:	4b0e      	ldr	r3, [pc, #56]	; (84ad0 <udi_vendor_setup+0x48>)
   84a98:	781b      	ldrb	r3, [r3, #0]
   84a9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84a9e:	2b40      	cmp	r3, #64	; 0x40
   84aa0:	d103      	bne.n	84aaa <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   84aa2:	4b0c      	ldr	r3, [pc, #48]	; (84ad4 <udi_vendor_setup+0x4c>)
   84aa4:	4798      	blx	r3
   84aa6:	4603      	mov	r3, r0
   84aa8:	e00f      	b.n	84aca <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   84aaa:	4b09      	ldr	r3, [pc, #36]	; (84ad0 <udi_vendor_setup+0x48>)
   84aac:	781b      	ldrb	r3, [r3, #0]
   84aae:	b25b      	sxtb	r3, r3
   84ab0:	2b00      	cmp	r3, #0
   84ab2:	db09      	blt.n	84ac8 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84ab4:	4b06      	ldr	r3, [pc, #24]	; (84ad0 <udi_vendor_setup+0x48>)
   84ab6:	781b      	ldrb	r3, [r3, #0]
   84ab8:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84abc:	2b40      	cmp	r3, #64	; 0x40
   84abe:	d103      	bne.n	84ac8 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   84ac0:	4b05      	ldr	r3, [pc, #20]	; (84ad8 <udi_vendor_setup+0x50>)
   84ac2:	4798      	blx	r3
   84ac4:	4603      	mov	r3, r0
   84ac6:	e000      	b.n	84aca <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   84ac8:	2300      	movs	r3, #0
}
   84aca:	4618      	mov	r0, r3
   84acc:	bd80      	pop	{r7, pc}
   84ace:	bf00      	nop
   84ad0:	20001828 	.word	0x20001828
   84ad4:	000811d9 	.word	0x000811d9
   84ad8:	00081069 	.word	0x00081069

00084adc <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   84adc:	b480      	push	{r7}
   84ade:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   84ae0:	4b02      	ldr	r3, [pc, #8]	; (84aec <udi_vendor_getsetting+0x10>)
   84ae2:	781b      	ldrb	r3, [r3, #0]
}
   84ae4:	4618      	mov	r0, r3
   84ae6:	46bd      	mov	sp, r7
   84ae8:	bc80      	pop	{r7}
   84aea:	4770      	bx	lr
   84aec:	20001343 	.word	0x20001343

00084af0 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84af0:	b590      	push	{r4, r7, lr}
   84af2:	b087      	sub	sp, #28
   84af4:	af02      	add	r7, sp, #8
   84af6:	60f8      	str	r0, [r7, #12]
   84af8:	60b9      	str	r1, [r7, #8]
   84afa:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   84afc:	687b      	ldr	r3, [r7, #4]
   84afe:	9300      	str	r3, [sp, #0]
   84b00:	68bb      	ldr	r3, [r7, #8]
   84b02:	68fa      	ldr	r2, [r7, #12]
   84b04:	2100      	movs	r1, #0
   84b06:	2081      	movs	r0, #129	; 0x81
   84b08:	4c03      	ldr	r4, [pc, #12]	; (84b18 <udi_vendor_bulk_in_run+0x28>)
   84b0a:	47a0      	blx	r4
   84b0c:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84b0e:	4618      	mov	r0, r3
   84b10:	3714      	adds	r7, #20
   84b12:	46bd      	mov	sp, r7
   84b14:	bd90      	pop	{r4, r7, pc}
   84b16:	bf00      	nop
   84b18:	00085831 	.word	0x00085831

00084b1c <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84b1c:	b590      	push	{r4, r7, lr}
   84b1e:	b087      	sub	sp, #28
   84b20:	af02      	add	r7, sp, #8
   84b22:	60f8      	str	r0, [r7, #12]
   84b24:	60b9      	str	r1, [r7, #8]
   84b26:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   84b28:	687b      	ldr	r3, [r7, #4]
   84b2a:	9300      	str	r3, [sp, #0]
   84b2c:	68bb      	ldr	r3, [r7, #8]
   84b2e:	68fa      	ldr	r2, [r7, #12]
   84b30:	2100      	movs	r1, #0
   84b32:	2002      	movs	r0, #2
   84b34:	4c03      	ldr	r4, [pc, #12]	; (84b44 <udi_vendor_bulk_out_run+0x28>)
   84b36:	47a0      	blx	r4
   84b38:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84b3a:	4618      	mov	r0, r3
   84b3c:	3714      	adds	r7, #20
   84b3e:	46bd      	mov	sp, r7
   84b40:	bd90      	pop	{r4, r7, pc}
   84b42:	bf00      	nop
   84b44:	00085831 	.word	0x00085831

00084b48 <NVIC_EnableIRQ>:
{
   84b48:	b480      	push	{r7}
   84b4a:	b083      	sub	sp, #12
   84b4c:	af00      	add	r7, sp, #0
   84b4e:	4603      	mov	r3, r0
   84b50:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84b52:	79fb      	ldrb	r3, [r7, #7]
   84b54:	f003 031f 	and.w	r3, r3, #31
   84b58:	2201      	movs	r2, #1
   84b5a:	fa02 f103 	lsl.w	r1, r2, r3
   84b5e:	4a05      	ldr	r2, [pc, #20]	; (84b74 <NVIC_EnableIRQ+0x2c>)
   84b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84b64:	095b      	lsrs	r3, r3, #5
   84b66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   84b6a:	bf00      	nop
   84b6c:	370c      	adds	r7, #12
   84b6e:	46bd      	mov	sp, r7
   84b70:	bc80      	pop	{r7}
   84b72:	4770      	bx	lr
   84b74:	e000e100 	.word	0xe000e100

00084b78 <NVIC_SetPriority>:
{
   84b78:	b480      	push	{r7}
   84b7a:	b083      	sub	sp, #12
   84b7c:	af00      	add	r7, sp, #0
   84b7e:	4603      	mov	r3, r0
   84b80:	6039      	str	r1, [r7, #0]
   84b82:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   84b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84b88:	2b00      	cmp	r3, #0
   84b8a:	da0b      	bge.n	84ba4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   84b8c:	683b      	ldr	r3, [r7, #0]
   84b8e:	b2da      	uxtb	r2, r3
   84b90:	490c      	ldr	r1, [pc, #48]	; (84bc4 <NVIC_SetPriority+0x4c>)
   84b92:	79fb      	ldrb	r3, [r7, #7]
   84b94:	f003 030f 	and.w	r3, r3, #15
   84b98:	3b04      	subs	r3, #4
   84b9a:	0112      	lsls	r2, r2, #4
   84b9c:	b2d2      	uxtb	r2, r2
   84b9e:	440b      	add	r3, r1
   84ba0:	761a      	strb	r2, [r3, #24]
}
   84ba2:	e009      	b.n	84bb8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84ba4:	683b      	ldr	r3, [r7, #0]
   84ba6:	b2da      	uxtb	r2, r3
   84ba8:	4907      	ldr	r1, [pc, #28]	; (84bc8 <NVIC_SetPriority+0x50>)
   84baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84bae:	0112      	lsls	r2, r2, #4
   84bb0:	b2d2      	uxtb	r2, r2
   84bb2:	440b      	add	r3, r1
   84bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   84bb8:	bf00      	nop
   84bba:	370c      	adds	r7, #12
   84bbc:	46bd      	mov	sp, r7
   84bbe:	bc80      	pop	{r7}
   84bc0:	4770      	bx	lr
   84bc2:	bf00      	nop
   84bc4:	e000ed00 	.word	0xe000ed00
   84bc8:	e000e100 	.word	0xe000e100

00084bcc <cpu_irq_save>:
{
   84bcc:	b480      	push	{r7}
   84bce:	b083      	sub	sp, #12
   84bd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84bd2:	f3ef 8310 	mrs	r3, PRIMASK
   84bd6:	603b      	str	r3, [r7, #0]
  return(result);
   84bd8:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   84bda:	2b00      	cmp	r3, #0
   84bdc:	bf0c      	ite	eq
   84bde:	2301      	moveq	r3, #1
   84be0:	2300      	movne	r3, #0
   84be2:	b2db      	uxtb	r3, r3
   84be4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   84be6:	b672      	cpsid	i
}
   84be8:	bf00      	nop
  __ASM volatile ("dmb");
   84bea:	f3bf 8f5f 	dmb	sy
}
   84bee:	bf00      	nop
	cpu_irq_disable();
   84bf0:	4b04      	ldr	r3, [pc, #16]	; (84c04 <cpu_irq_save+0x38>)
   84bf2:	2200      	movs	r2, #0
   84bf4:	701a      	strb	r2, [r3, #0]
	return flags;
   84bf6:	687b      	ldr	r3, [r7, #4]
}
   84bf8:	4618      	mov	r0, r3
   84bfa:	370c      	adds	r7, #12
   84bfc:	46bd      	mov	sp, r7
   84bfe:	bc80      	pop	{r7}
   84c00:	4770      	bx	lr
   84c02:	bf00      	nop
   84c04:	20000284 	.word	0x20000284

00084c08 <cpu_irq_is_enabled_flags>:
{
   84c08:	b480      	push	{r7}
   84c0a:	b083      	sub	sp, #12
   84c0c:	af00      	add	r7, sp, #0
   84c0e:	6078      	str	r0, [r7, #4]
	return (flags);
   84c10:	687b      	ldr	r3, [r7, #4]
   84c12:	2b00      	cmp	r3, #0
   84c14:	bf14      	ite	ne
   84c16:	2301      	movne	r3, #1
   84c18:	2300      	moveq	r3, #0
   84c1a:	b2db      	uxtb	r3, r3
}
   84c1c:	4618      	mov	r0, r3
   84c1e:	370c      	adds	r7, #12
   84c20:	46bd      	mov	sp, r7
   84c22:	bc80      	pop	{r7}
   84c24:	4770      	bx	lr
   84c26:	0000      	movs	r0, r0

00084c28 <cpu_irq_restore>:
{
   84c28:	b580      	push	{r7, lr}
   84c2a:	b082      	sub	sp, #8
   84c2c:	af00      	add	r7, sp, #0
   84c2e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   84c30:	6878      	ldr	r0, [r7, #4]
   84c32:	4b08      	ldr	r3, [pc, #32]	; (84c54 <cpu_irq_restore+0x2c>)
   84c34:	4798      	blx	r3
   84c36:	4603      	mov	r3, r0
   84c38:	2b00      	cmp	r3, #0
   84c3a:	d007      	beq.n	84c4c <cpu_irq_restore+0x24>
		cpu_irq_enable();
   84c3c:	4b06      	ldr	r3, [pc, #24]	; (84c58 <cpu_irq_restore+0x30>)
   84c3e:	2201      	movs	r2, #1
   84c40:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   84c42:	f3bf 8f5f 	dmb	sy
}
   84c46:	bf00      	nop
  __ASM volatile ("cpsie i");
   84c48:	b662      	cpsie	i
}
   84c4a:	bf00      	nop
}
   84c4c:	bf00      	nop
   84c4e:	3708      	adds	r7, #8
   84c50:	46bd      	mov	sp, r7
   84c52:	bd80      	pop	{r7, pc}
   84c54:	00084c09 	.word	0x00084c09
   84c58:	20000284 	.word	0x20000284

00084c5c <sleepmgr_lock_mode>:
{
   84c5c:	b580      	push	{r7, lr}
   84c5e:	b084      	sub	sp, #16
   84c60:	af00      	add	r7, sp, #0
   84c62:	4603      	mov	r3, r0
   84c64:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   84c66:	4b08      	ldr	r3, [pc, #32]	; (84c88 <sleepmgr_lock_mode+0x2c>)
   84c68:	4798      	blx	r3
   84c6a:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   84c6c:	79fb      	ldrb	r3, [r7, #7]
   84c6e:	4a07      	ldr	r2, [pc, #28]	; (84c8c <sleepmgr_lock_mode+0x30>)
   84c70:	5cd2      	ldrb	r2, [r2, r3]
   84c72:	3201      	adds	r2, #1
   84c74:	b2d1      	uxtb	r1, r2
   84c76:	4a05      	ldr	r2, [pc, #20]	; (84c8c <sleepmgr_lock_mode+0x30>)
   84c78:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   84c7a:	68f8      	ldr	r0, [r7, #12]
   84c7c:	4b04      	ldr	r3, [pc, #16]	; (84c90 <sleepmgr_lock_mode+0x34>)
   84c7e:	4798      	blx	r3
}
   84c80:	bf00      	nop
   84c82:	3710      	adds	r7, #16
   84c84:	46bd      	mov	sp, r7
   84c86:	bd80      	pop	{r7, pc}
   84c88:	00084bcd 	.word	0x00084bcd
   84c8c:	20001820 	.word	0x20001820
   84c90:	00084c29 	.word	0x00084c29

00084c94 <sleepmgr_unlock_mode>:
{
   84c94:	b580      	push	{r7, lr}
   84c96:	b084      	sub	sp, #16
   84c98:	af00      	add	r7, sp, #0
   84c9a:	4603      	mov	r3, r0
   84c9c:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   84c9e:	4b08      	ldr	r3, [pc, #32]	; (84cc0 <sleepmgr_unlock_mode+0x2c>)
   84ca0:	4798      	blx	r3
   84ca2:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   84ca4:	79fb      	ldrb	r3, [r7, #7]
   84ca6:	4a07      	ldr	r2, [pc, #28]	; (84cc4 <sleepmgr_unlock_mode+0x30>)
   84ca8:	5cd2      	ldrb	r2, [r2, r3]
   84caa:	3a01      	subs	r2, #1
   84cac:	b2d1      	uxtb	r1, r2
   84cae:	4a05      	ldr	r2, [pc, #20]	; (84cc4 <sleepmgr_unlock_mode+0x30>)
   84cb0:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   84cb2:	68f8      	ldr	r0, [r7, #12]
   84cb4:	4b04      	ldr	r3, [pc, #16]	; (84cc8 <sleepmgr_unlock_mode+0x34>)
   84cb6:	4798      	blx	r3
}
   84cb8:	bf00      	nop
   84cba:	3710      	adds	r7, #16
   84cbc:	46bd      	mov	sp, r7
   84cbe:	bd80      	pop	{r7, pc}
   84cc0:	00084bcd 	.word	0x00084bcd
   84cc4:	20001820 	.word	0x20001820
   84cc8:	00084c29 	.word	0x00084c29

00084ccc <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   84ccc:	b580      	push	{r7, lr}
   84cce:	b082      	sub	sp, #8
   84cd0:	af00      	add	r7, sp, #0
   84cd2:	4603      	mov	r3, r0
   84cd4:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   84cd6:	79fb      	ldrb	r3, [r7, #7]
   84cd8:	f083 0301 	eor.w	r3, r3, #1
   84cdc:	b2db      	uxtb	r3, r3
   84cde:	2b00      	cmp	r3, #0
   84ce0:	d006      	beq.n	84cf0 <udd_sleep_mode+0x24>
   84ce2:	4b0d      	ldr	r3, [pc, #52]	; (84d18 <udd_sleep_mode+0x4c>)
   84ce4:	781b      	ldrb	r3, [r3, #0]
   84ce6:	2b00      	cmp	r3, #0
   84ce8:	d002      	beq.n	84cf0 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   84cea:	2002      	movs	r0, #2
   84cec:	4b0b      	ldr	r3, [pc, #44]	; (84d1c <udd_sleep_mode+0x50>)
   84cee:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   84cf0:	79fb      	ldrb	r3, [r7, #7]
   84cf2:	2b00      	cmp	r3, #0
   84cf4:	d009      	beq.n	84d0a <udd_sleep_mode+0x3e>
   84cf6:	4b08      	ldr	r3, [pc, #32]	; (84d18 <udd_sleep_mode+0x4c>)
   84cf8:	781b      	ldrb	r3, [r3, #0]
   84cfa:	f083 0301 	eor.w	r3, r3, #1
   84cfe:	b2db      	uxtb	r3, r3
   84d00:	2b00      	cmp	r3, #0
   84d02:	d002      	beq.n	84d0a <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   84d04:	2002      	movs	r0, #2
   84d06:	4b06      	ldr	r3, [pc, #24]	; (84d20 <udd_sleep_mode+0x54>)
   84d08:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   84d0a:	4a03      	ldr	r2, [pc, #12]	; (84d18 <udd_sleep_mode+0x4c>)
   84d0c:	79fb      	ldrb	r3, [r7, #7]
   84d0e:	7013      	strb	r3, [r2, #0]
}
   84d10:	bf00      	nop
   84d12:	3708      	adds	r7, #8
   84d14:	46bd      	mov	sp, r7
   84d16:	bd80      	pop	{r7, pc}
   84d18:	20001344 	.word	0x20001344
   84d1c:	00084c95 	.word	0x00084c95
   84d20:	00084c5d 	.word	0x00084c5d

00084d24 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   84d24:	b580      	push	{r7, lr}
   84d26:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   84d28:	201d      	movs	r0, #29
   84d2a:	4b5f      	ldr	r3, [pc, #380]	; (84ea8 <UDPHS_Handler+0x184>)
   84d2c:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   84d2e:	4b5f      	ldr	r3, [pc, #380]	; (84eac <UDPHS_Handler+0x188>)
   84d30:	4798      	blx	r3
   84d32:	4603      	mov	r3, r0
   84d34:	f083 0301 	eor.w	r3, r3, #1
   84d38:	b2db      	uxtb	r3, r3
   84d3a:	2b00      	cmp	r3, #0
   84d3c:	d00e      	beq.n	84d5c <UDPHS_Handler+0x38>
   84d3e:	4b5c      	ldr	r3, [pc, #368]	; (84eb0 <UDPHS_Handler+0x18c>)
   84d40:	695b      	ldr	r3, [r3, #20]
   84d42:	f003 0302 	and.w	r3, r3, #2
   84d46:	2b00      	cmp	r3, #0
   84d48:	d108      	bne.n	84d5c <UDPHS_Handler+0x38>
  __ASM volatile ("cpsid i");
   84d4a:	b672      	cpsid	i
}
   84d4c:	bf00      	nop
  __ASM volatile ("dmb");
   84d4e:	f3bf 8f5f 	dmb	sy
}
   84d52:	bf00      	nop
		cpu_irq_disable();
   84d54:	4b57      	ldr	r3, [pc, #348]	; (84eb4 <UDPHS_Handler+0x190>)
   84d56:	2200      	movs	r2, #0
   84d58:	701a      	strb	r2, [r3, #0]
		return;
   84d5a:	e0a4      	b.n	84ea6 <UDPHS_Handler+0x182>
	}

	if (Is_udd_sof()) {
   84d5c:	4b54      	ldr	r3, [pc, #336]	; (84eb0 <UDPHS_Handler+0x18c>)
   84d5e:	695b      	ldr	r3, [r3, #20]
   84d60:	f003 0308 	and.w	r3, r3, #8
   84d64:	2b00      	cmp	r3, #0
   84d66:	d00d      	beq.n	84d84 <UDPHS_Handler+0x60>
		udd_ack_sof();
   84d68:	4b51      	ldr	r3, [pc, #324]	; (84eb0 <UDPHS_Handler+0x18c>)
   84d6a:	2208      	movs	r2, #8
   84d6c:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   84d6e:	4b50      	ldr	r3, [pc, #320]	; (84eb0 <UDPHS_Handler+0x18c>)
   84d70:	695b      	ldr	r3, [r3, #20]
   84d72:	f003 0301 	and.w	r3, r3, #1
   84d76:	2b00      	cmp	r3, #0
   84d78:	d101      	bne.n	84d7e <UDPHS_Handler+0x5a>
			udc_sof_notify();
   84d7a:	4b4f      	ldr	r3, [pc, #316]	; (84eb8 <UDPHS_Handler+0x194>)
   84d7c:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   84d7e:	4b4f      	ldr	r3, [pc, #316]	; (84ebc <UDPHS_Handler+0x198>)
   84d80:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   84d82:	e08f      	b.n	84ea4 <UDPHS_Handler+0x180>
	}

	if (Is_udd_msof()) {
   84d84:	4b4a      	ldr	r3, [pc, #296]	; (84eb0 <UDPHS_Handler+0x18c>)
   84d86:	695b      	ldr	r3, [r3, #20]
   84d88:	f003 0304 	and.w	r3, r3, #4
   84d8c:	2b00      	cmp	r3, #0
   84d8e:	d005      	beq.n	84d9c <UDPHS_Handler+0x78>
		udd_ack_msof();
   84d90:	4b47      	ldr	r3, [pc, #284]	; (84eb0 <UDPHS_Handler+0x18c>)
   84d92:	2204      	movs	r2, #4
   84d94:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   84d96:	4b48      	ldr	r3, [pc, #288]	; (84eb8 <UDPHS_Handler+0x194>)
   84d98:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   84d9a:	e083      	b.n	84ea4 <UDPHS_Handler+0x180>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   84d9c:	4b48      	ldr	r3, [pc, #288]	; (84ec0 <UDPHS_Handler+0x19c>)
   84d9e:	4798      	blx	r3
   84da0:	4603      	mov	r3, r0
   84da2:	2b00      	cmp	r3, #0
   84da4:	d179      	bne.n	84e9a <UDPHS_Handler+0x176>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   84da6:	4b47      	ldr	r3, [pc, #284]	; (84ec4 <UDPHS_Handler+0x1a0>)
   84da8:	4798      	blx	r3
   84daa:	4603      	mov	r3, r0
   84dac:	2b00      	cmp	r3, #0
   84dae:	d176      	bne.n	84e9e <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   84db0:	4b3f      	ldr	r3, [pc, #252]	; (84eb0 <UDPHS_Handler+0x18c>)
   84db2:	695b      	ldr	r3, [r3, #20]
   84db4:	f003 0310 	and.w	r3, r3, #16
   84db8:	2b00      	cmp	r3, #0
   84dba:	d01d      	beq.n	84df8 <UDPHS_Handler+0xd4>
		dbg_print("EoR ");
		udd_ack_reset();
   84dbc:	4b3c      	ldr	r3, [pc, #240]	; (84eb0 <UDPHS_Handler+0x18c>)
   84dbe:	2210      	movs	r2, #16
   84dc0:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   84dc2:	4b41      	ldr	r3, [pc, #260]	; (84ec8 <UDPHS_Handler+0x1a4>)
   84dc4:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   84dc6:	4b41      	ldr	r3, [pc, #260]	; (84ecc <UDPHS_Handler+0x1a8>)
   84dc8:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   84dca:	4b41      	ldr	r3, [pc, #260]	; (84ed0 <UDPHS_Handler+0x1ac>)
   84dcc:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   84dce:	4b41      	ldr	r3, [pc, #260]	; (84ed4 <UDPHS_Handler+0x1b0>)
   84dd0:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   84dd2:	4b37      	ldr	r3, [pc, #220]	; (84eb0 <UDPHS_Handler+0x18c>)
   84dd4:	691b      	ldr	r3, [r3, #16]
   84dd6:	4a36      	ldr	r2, [pc, #216]	; (84eb0 <UDPHS_Handler+0x18c>)
   84dd8:	f043 0308 	orr.w	r3, r3, #8
   84ddc:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   84dde:	4b34      	ldr	r3, [pc, #208]	; (84eb0 <UDPHS_Handler+0x18c>)
   84de0:	691b      	ldr	r3, [r3, #16]
   84de2:	4a33      	ldr	r2, [pc, #204]	; (84eb0 <UDPHS_Handler+0x18c>)
   84de4:	f043 0304 	orr.w	r3, r3, #4
   84de8:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   84dea:	4b31      	ldr	r3, [pc, #196]	; (84eb0 <UDPHS_Handler+0x18c>)
   84dec:	691b      	ldr	r3, [r3, #16]
   84dee:	4a30      	ldr	r2, [pc, #192]	; (84eb0 <UDPHS_Handler+0x18c>)
   84df0:	f043 0302 	orr.w	r3, r3, #2
   84df4:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   84df6:	e055      	b.n	84ea4 <UDPHS_Handler+0x180>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84df8:	4b2d      	ldr	r3, [pc, #180]	; (84eb0 <UDPHS_Handler+0x18c>)
   84dfa:	691b      	ldr	r3, [r3, #16]
   84dfc:	f003 0302 	and.w	r3, r3, #2
   84e00:	2b00      	cmp	r3, #0
   84e02:	d020      	beq.n	84e46 <UDPHS_Handler+0x122>
   84e04:	4b2a      	ldr	r3, [pc, #168]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e06:	695b      	ldr	r3, [r3, #20]
   84e08:	f003 0302 	and.w	r3, r3, #2
   84e0c:	2b00      	cmp	r3, #0
   84e0e:	d01a      	beq.n	84e46 <UDPHS_Handler+0x122>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   84e10:	4b27      	ldr	r3, [pc, #156]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e12:	2220      	movs	r2, #32
   84e14:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   84e16:	4b26      	ldr	r3, [pc, #152]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e18:	691b      	ldr	r3, [r3, #16]
   84e1a:	4a25      	ldr	r2, [pc, #148]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e1c:	f023 0302 	bic.w	r3, r3, #2
   84e20:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   84e22:	4b23      	ldr	r3, [pc, #140]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e24:	691b      	ldr	r3, [r3, #16]
   84e26:	4a22      	ldr	r2, [pc, #136]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e28:	f043 0320 	orr.w	r3, r3, #32
   84e2c:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   84e2e:	4b20      	ldr	r3, [pc, #128]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e30:	2202      	movs	r2, #2
   84e32:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   84e34:	201d      	movs	r0, #29
   84e36:	4b28      	ldr	r3, [pc, #160]	; (84ed8 <UDPHS_Handler+0x1b4>)
   84e38:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   84e3a:	4b28      	ldr	r3, [pc, #160]	; (84edc <UDPHS_Handler+0x1b8>)
   84e3c:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   84e3e:	2000      	movs	r0, #0
   84e40:	4b27      	ldr	r3, [pc, #156]	; (84ee0 <UDPHS_Handler+0x1bc>)
   84e42:	4798      	blx	r3
		goto udd_interrupt_end;
   84e44:	e02e      	b.n	84ea4 <UDPHS_Handler+0x180>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   84e46:	4b1a      	ldr	r3, [pc, #104]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e48:	695b      	ldr	r3, [r3, #20]
   84e4a:	f003 0320 	and.w	r3, r3, #32
   84e4e:	2b00      	cmp	r3, #0
   84e50:	d027      	beq.n	84ea2 <UDPHS_Handler+0x17e>
		udd_sleep_mode(true); // Enter in IDLE mode
   84e52:	2001      	movs	r0, #1
   84e54:	4b22      	ldr	r3, [pc, #136]	; (84ee0 <UDPHS_Handler+0x1bc>)
   84e56:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   84e58:	4b15      	ldr	r3, [pc, #84]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e5a:	2202      	movs	r2, #2
   84e5c:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   84e5e:	4b14      	ldr	r3, [pc, #80]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e60:	2220      	movs	r2, #32
   84e62:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   84e64:	4b12      	ldr	r3, [pc, #72]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e66:	691b      	ldr	r3, [r3, #16]
   84e68:	4a11      	ldr	r2, [pc, #68]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e6a:	f023 0320 	bic.w	r3, r3, #32
   84e6e:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   84e70:	4b0f      	ldr	r3, [pc, #60]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e72:	691b      	ldr	r3, [r3, #16]
   84e74:	4a0e      	ldr	r2, [pc, #56]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e76:	f043 0302 	orr.w	r3, r3, #2
   84e7a:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   84e7c:	4b0c      	ldr	r3, [pc, #48]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e7e:	691b      	ldr	r3, [r3, #16]
   84e80:	4a0b      	ldr	r2, [pc, #44]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e82:	f043 0308 	orr.w	r3, r3, #8
   84e86:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   84e88:	4b09      	ldr	r3, [pc, #36]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e8a:	691b      	ldr	r3, [r3, #16]
   84e8c:	4a08      	ldr	r2, [pc, #32]	; (84eb0 <UDPHS_Handler+0x18c>)
   84e8e:	f043 0304 	orr.w	r3, r3, #4
   84e92:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   84e94:	4b13      	ldr	r3, [pc, #76]	; (84ee4 <UDPHS_Handler+0x1c0>)
   84e96:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   84e98:	e004      	b.n	84ea4 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   84e9a:	bf00      	nop
   84e9c:	e002      	b.n	84ea4 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   84e9e:	bf00      	nop
   84ea0:	e000      	b.n	84ea4 <UDPHS_Handler+0x180>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   84ea2:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   84ea4:	bf00      	nop
}
   84ea6:	bd80      	pop	{r7, pc}
   84ea8:	00082d01 	.word	0x00082d01
   84eac:	000832c5 	.word	0x000832c5
   84eb0:	400a4000 	.word	0x400a4000
   84eb4:	20000284 	.word	0x20000284
   84eb8:	00083f15 	.word	0x00083f15
   84ebc:	00080cdd 	.word	0x00080cdd
   84ec0:	000861b9 	.word	0x000861b9
   84ec4:	000865d5 	.word	0x000865d5
   84ec8:	000862f9 	.word	0x000862f9
   84ecc:	00083ec1 	.word	0x00083ec1
   84ed0:	00085b19 	.word	0x00085b19
   84ed4:	00085b99 	.word	0x00085b99
   84ed8:	00082d4d 	.word	0x00082d4d
   84edc:	00080cb1 	.word	0x00080cb1
   84ee0:	00084ccd 	.word	0x00084ccd
   84ee4:	00080ccd 	.word	0x00080ccd

00084ee8 <udd_enable>:
#endif
}


void udd_enable(void)
{
   84ee8:	b580      	push	{r7, lr}
   84eea:	b082      	sub	sp, #8
   84eec:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   84eee:	4b19      	ldr	r3, [pc, #100]	; (84f54 <udd_enable+0x6c>)
   84ef0:	4798      	blx	r3

	udd_enable_periph_ck();
   84ef2:	201d      	movs	r0, #29
   84ef4:	4b18      	ldr	r3, [pc, #96]	; (84f58 <udd_enable+0x70>)
   84ef6:	4798      	blx	r3

	flags = cpu_irq_save();
   84ef8:	4b18      	ldr	r3, [pc, #96]	; (84f5c <udd_enable+0x74>)
   84efa:	4798      	blx	r3
   84efc:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   84efe:	4b18      	ldr	r3, [pc, #96]	; (84f60 <udd_enable+0x78>)
   84f00:	681b      	ldr	r3, [r3, #0]
   84f02:	4a17      	ldr	r2, [pc, #92]	; (84f60 <udd_enable+0x78>)
   84f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   84f08:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   84f0a:	2105      	movs	r1, #5
   84f0c:	201d      	movs	r0, #29
   84f0e:	4b15      	ldr	r3, [pc, #84]	; (84f64 <udd_enable+0x7c>)
   84f10:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   84f12:	201d      	movs	r0, #29
   84f14:	4b14      	ldr	r3, [pc, #80]	; (84f68 <udd_enable+0x80>)
   84f16:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   84f18:	4b14      	ldr	r3, [pc, #80]	; (84f6c <udd_enable+0x84>)
   84f1a:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   84f1c:	4b10      	ldr	r3, [pc, #64]	; (84f60 <udd_enable+0x78>)
   84f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84f22:	4a0f      	ldr	r2, [pc, #60]	; (84f60 <udd_enable+0x78>)
   84f24:	f023 0303 	bic.w	r3, r3, #3
   84f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84f2c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84f30:	4b0f      	ldr	r3, [pc, #60]	; (84f70 <udd_enable+0x88>)
   84f32:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   84f34:	4b0f      	ldr	r3, [pc, #60]	; (84f74 <udd_enable+0x8c>)
   84f36:	2200      	movs	r2, #0
   84f38:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   84f3a:	2003      	movs	r0, #3
   84f3c:	4b0e      	ldr	r3, [pc, #56]	; (84f78 <udd_enable+0x90>)
   84f3e:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   84f40:	4b0e      	ldr	r3, [pc, #56]	; (84f7c <udd_enable+0x94>)
   84f42:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   84f44:	6878      	ldr	r0, [r7, #4]
   84f46:	4b0e      	ldr	r3, [pc, #56]	; (84f80 <udd_enable+0x98>)
   84f48:	4798      	blx	r3
}
   84f4a:	bf00      	nop
   84f4c:	3708      	adds	r7, #8
   84f4e:	46bd      	mov	sp, r7
   84f50:	bd80      	pop	{r7, pc}
   84f52:	bf00      	nop
   84f54:	000839e5 	.word	0x000839e5
   84f58:	00082d01 	.word	0x00082d01
   84f5c:	00084bcd 	.word	0x00084bcd
   84f60:	400a4000 	.word	0x400a4000
   84f64:	00084b79 	.word	0x00084b79
   84f68:	00084b49 	.word	0x00084b49
   84f6c:	0008629d 	.word	0x0008629d
   84f70:	00082dbd 	.word	0x00082dbd
   84f74:	20001344 	.word	0x20001344
   84f78:	00084c5d 	.word	0x00084c5d
   84f7c:	00084f85 	.word	0x00084f85
   84f80:	00084c29 	.word	0x00084c29

00084f84 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   84f84:	b580      	push	{r7, lr}
   84f86:	b082      	sub	sp, #8
   84f88:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   84f8a:	4b26      	ldr	r3, [pc, #152]	; (85024 <udd_attach+0xa0>)
   84f8c:	4798      	blx	r3
   84f8e:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   84f90:	2001      	movs	r0, #1
   84f92:	4b25      	ldr	r3, [pc, #148]	; (85028 <udd_attach+0xa4>)
   84f94:	4798      	blx	r3
	udd_enable_periph_ck();
   84f96:	201d      	movs	r0, #29
   84f98:	4b24      	ldr	r3, [pc, #144]	; (8502c <udd_attach+0xa8>)
   84f9a:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   84f9c:	4b24      	ldr	r3, [pc, #144]	; (85030 <udd_attach+0xac>)
   84f9e:	681b      	ldr	r3, [r3, #0]
   84fa0:	4a23      	ldr	r2, [pc, #140]	; (85030 <udd_attach+0xac>)
   84fa2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84fa6:	6013      	str	r3, [r2, #0]
   84fa8:	4b21      	ldr	r3, [pc, #132]	; (85030 <udd_attach+0xac>)
   84faa:	681b      	ldr	r3, [r3, #0]
   84fac:	4a20      	ldr	r2, [pc, #128]	; (85030 <udd_attach+0xac>)
   84fae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   84fb2:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   84fb4:	4b1e      	ldr	r3, [pc, #120]	; (85030 <udd_attach+0xac>)
   84fb6:	691b      	ldr	r3, [r3, #16]
   84fb8:	4a1d      	ldr	r2, [pc, #116]	; (85030 <udd_attach+0xac>)
   84fba:	f043 0310 	orr.w	r3, r3, #16
   84fbe:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   84fc0:	4b1b      	ldr	r3, [pc, #108]	; (85030 <udd_attach+0xac>)
   84fc2:	691b      	ldr	r3, [r3, #16]
   84fc4:	4a1a      	ldr	r2, [pc, #104]	; (85030 <udd_attach+0xac>)
   84fc6:	f043 0302 	orr.w	r3, r3, #2
   84fca:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   84fcc:	4b18      	ldr	r3, [pc, #96]	; (85030 <udd_attach+0xac>)
   84fce:	691b      	ldr	r3, [r3, #16]
   84fd0:	4a17      	ldr	r2, [pc, #92]	; (85030 <udd_attach+0xac>)
   84fd2:	f043 0320 	orr.w	r3, r3, #32
   84fd6:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   84fd8:	4b15      	ldr	r3, [pc, #84]	; (85030 <udd_attach+0xac>)
   84fda:	691b      	ldr	r3, [r3, #16]
   84fdc:	4a14      	ldr	r2, [pc, #80]	; (85030 <udd_attach+0xac>)
   84fde:	f043 0308 	orr.w	r3, r3, #8
   84fe2:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   84fe4:	4b12      	ldr	r3, [pc, #72]	; (85030 <udd_attach+0xac>)
   84fe6:	691b      	ldr	r3, [r3, #16]
   84fe8:	4a11      	ldr	r2, [pc, #68]	; (85030 <udd_attach+0xac>)
   84fea:	f043 0304 	orr.w	r3, r3, #4
   84fee:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   84ff0:	4b0f      	ldr	r3, [pc, #60]	; (85030 <udd_attach+0xac>)
   84ff2:	2208      	movs	r2, #8
   84ff4:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   84ff6:	4b0e      	ldr	r3, [pc, #56]	; (85030 <udd_attach+0xac>)
   84ff8:	2204      	movs	r2, #4
   84ffa:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84ffc:	4b0c      	ldr	r3, [pc, #48]	; (85030 <udd_attach+0xac>)
   84ffe:	2210      	movs	r2, #16
   85000:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   85002:	4b0b      	ldr	r3, [pc, #44]	; (85030 <udd_attach+0xac>)
   85004:	2202      	movs	r2, #2
   85006:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   85008:	4b09      	ldr	r3, [pc, #36]	; (85030 <udd_attach+0xac>)
   8500a:	2220      	movs	r2, #32
   8500c:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   8500e:	201d      	movs	r0, #29
   85010:	4b08      	ldr	r3, [pc, #32]	; (85034 <udd_attach+0xb0>)
   85012:	4798      	blx	r3
	cpu_irq_restore(flags);
   85014:	6878      	ldr	r0, [r7, #4]
   85016:	4b08      	ldr	r3, [pc, #32]	; (85038 <udd_attach+0xb4>)
   85018:	4798      	blx	r3
}
   8501a:	bf00      	nop
   8501c:	3708      	adds	r7, #8
   8501e:	46bd      	mov	sp, r7
   85020:	bd80      	pop	{r7, pc}
   85022:	bf00      	nop
   85024:	00084bcd 	.word	0x00084bcd
   85028:	00084ccd 	.word	0x00084ccd
   8502c:	00082d01 	.word	0x00082d01
   85030:	400a4000 	.word	0x400a4000
   85034:	00082d4d 	.word	0x00082d4d
   85038:	00084c29 	.word	0x00084c29

0008503c <udd_detach>:


void udd_detach(void)
{
   8503c:	b580      	push	{r7, lr}
   8503e:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   85040:	201d      	movs	r0, #29
   85042:	4b0b      	ldr	r3, [pc, #44]	; (85070 <udd_detach+0x34>)
   85044:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   85046:	4b0b      	ldr	r3, [pc, #44]	; (85074 <udd_detach+0x38>)
   85048:	681b      	ldr	r3, [r3, #0]
   8504a:	4a0a      	ldr	r2, [pc, #40]	; (85074 <udd_detach+0x38>)
   8504c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   85050:	6013      	str	r3, [r2, #0]
   85052:	4b08      	ldr	r3, [pc, #32]	; (85074 <udd_detach+0x38>)
   85054:	681b      	ldr	r3, [r3, #0]
   85056:	4a07      	ldr	r2, [pc, #28]	; (85074 <udd_detach+0x38>)
   85058:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8505c:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   8505e:	201d      	movs	r0, #29
   85060:	4b05      	ldr	r3, [pc, #20]	; (85078 <udd_detach+0x3c>)
   85062:	4798      	blx	r3
	udd_sleep_mode(false);
   85064:	2000      	movs	r0, #0
   85066:	4b05      	ldr	r3, [pc, #20]	; (8507c <udd_detach+0x40>)
   85068:	4798      	blx	r3
}
   8506a:	bf00      	nop
   8506c:	bd80      	pop	{r7, pc}
   8506e:	bf00      	nop
   85070:	00082d01 	.word	0x00082d01
   85074:	400a4000 	.word	0x400a4000
   85078:	00082d4d 	.word	0x00082d4d
   8507c:	00084ccd 	.word	0x00084ccd

00085080 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   85080:	b480      	push	{r7}
   85082:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   85084:	4b06      	ldr	r3, [pc, #24]	; (850a0 <udd_is_high_speed+0x20>)
   85086:	695b      	ldr	r3, [r3, #20]
   85088:	f003 0301 	and.w	r3, r3, #1
   8508c:	2b00      	cmp	r3, #0
   8508e:	bf14      	ite	ne
   85090:	2301      	movne	r3, #1
   85092:	2300      	moveq	r3, #0
   85094:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   85096:	4618      	mov	r0, r3
   85098:	46bd      	mov	sp, r7
   8509a:	bc80      	pop	{r7}
   8509c:	4770      	bx	lr
   8509e:	bf00      	nop
   850a0:	400a4000 	.word	0x400a4000

000850a4 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   850a4:	b480      	push	{r7}
   850a6:	b083      	sub	sp, #12
   850a8:	af00      	add	r7, sp, #0
   850aa:	4603      	mov	r3, r0
   850ac:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   850ae:	4b0d      	ldr	r3, [pc, #52]	; (850e4 <udd_set_address+0x40>)
   850b0:	681b      	ldr	r3, [r3, #0]
   850b2:	4a0c      	ldr	r2, [pc, #48]	; (850e4 <udd_set_address+0x40>)
   850b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   850b8:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   850ba:	4b0a      	ldr	r3, [pc, #40]	; (850e4 <udd_set_address+0x40>)
   850bc:	681b      	ldr	r3, [r3, #0]
   850be:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   850c2:	79fb      	ldrb	r3, [r7, #7]
   850c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   850c8:	4906      	ldr	r1, [pc, #24]	; (850e4 <udd_set_address+0x40>)
   850ca:	4313      	orrs	r3, r2
   850cc:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   850ce:	4b05      	ldr	r3, [pc, #20]	; (850e4 <udd_set_address+0x40>)
   850d0:	681b      	ldr	r3, [r3, #0]
   850d2:	4a04      	ldr	r2, [pc, #16]	; (850e4 <udd_set_address+0x40>)
   850d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   850d8:	6013      	str	r3, [r2, #0]
}
   850da:	bf00      	nop
   850dc:	370c      	adds	r7, #12
   850de:	46bd      	mov	sp, r7
   850e0:	bc80      	pop	{r7}
   850e2:	4770      	bx	lr
   850e4:	400a4000 	.word	0x400a4000

000850e8 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   850e8:	b480      	push	{r7}
   850ea:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   850ec:	4b04      	ldr	r3, [pc, #16]	; (85100 <udd_getaddress+0x18>)
   850ee:	681b      	ldr	r3, [r3, #0]
   850f0:	b2db      	uxtb	r3, r3
   850f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   850f6:	b2db      	uxtb	r3, r3
}
   850f8:	4618      	mov	r0, r3
   850fa:	46bd      	mov	sp, r7
   850fc:	bc80      	pop	{r7}
   850fe:	4770      	bx	lr
   85100:	400a4000 	.word	0x400a4000

00085104 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
   85104:	b480      	push	{r7}
   85106:	af00      	add	r7, sp, #0
	return udd_frame_number();
   85108:	4b05      	ldr	r3, [pc, #20]	; (85120 <udd_get_frame_number+0x1c>)
   8510a:	685b      	ldr	r3, [r3, #4]
   8510c:	08db      	lsrs	r3, r3, #3
   8510e:	b29b      	uxth	r3, r3
   85110:	f3c3 030a 	ubfx	r3, r3, #0, #11
   85114:	b29b      	uxth	r3, r3
}
   85116:	4618      	mov	r0, r3
   85118:	46bd      	mov	sp, r7
   8511a:	bc80      	pop	{r7}
   8511c:	4770      	bx	lr
   8511e:	bf00      	nop
   85120:	400a4000 	.word	0x400a4000

00085124 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   85124:	b480      	push	{r7}
   85126:	b083      	sub	sp, #12
   85128:	af00      	add	r7, sp, #0
   8512a:	6078      	str	r0, [r7, #4]
   8512c:	460b      	mov	r3, r1
   8512e:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   85130:	4a05      	ldr	r2, [pc, #20]	; (85148 <udd_set_setup_payload+0x24>)
   85132:	687b      	ldr	r3, [r7, #4]
   85134:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   85136:	4a04      	ldr	r2, [pc, #16]	; (85148 <udd_set_setup_payload+0x24>)
   85138:	887b      	ldrh	r3, [r7, #2]
   8513a:	8193      	strh	r3, [r2, #12]
}
   8513c:	bf00      	nop
   8513e:	370c      	adds	r7, #12
   85140:	46bd      	mov	sp, r7
   85142:	bc80      	pop	{r7}
   85144:	4770      	bx	lr
   85146:	bf00      	nop
   85148:	20001828 	.word	0x20001828

0008514c <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   8514c:	b590      	push	{r4, r7, lr}
   8514e:	b089      	sub	sp, #36	; 0x24
   85150:	af02      	add	r7, sp, #8
   85152:	4603      	mov	r3, r0
   85154:	71fb      	strb	r3, [r7, #7]
   85156:	460b      	mov	r3, r1
   85158:	71bb      	strb	r3, [r7, #6]
   8515a:	4613      	mov	r3, r2
   8515c:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   8515e:	2300      	movs	r3, #0
   85160:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   85162:	2300      	movs	r3, #0
   85164:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   85166:	79fb      	ldrb	r3, [r7, #7]
   85168:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8516c:	2b00      	cmp	r3, #0
   8516e:	bf14      	ite	ne
   85170:	2301      	movne	r3, #1
   85172:	2300      	moveq	r3, #0
   85174:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   85176:	79fb      	ldrb	r3, [r7, #7]
   85178:	f003 030f 	and.w	r3, r3, #15
   8517c:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   8517e:	79fb      	ldrb	r3, [r7, #7]
   85180:	2b02      	cmp	r3, #2
   85182:	d901      	bls.n	85188 <udd_ep_alloc+0x3c>
		return false;
   85184:	2300      	movs	r3, #0
   85186:	e1b4      	b.n	854f2 <udd_ep_alloc+0x3a6>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   85188:	4ab3      	ldr	r2, [pc, #716]	; (85458 <udd_ep_alloc+0x30c>)
   8518a:	79fb      	ldrb	r3, [r7, #7]
   8518c:	015b      	lsls	r3, r3, #5
   8518e:	4413      	add	r3, r2
   85190:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   85194:	681b      	ldr	r3, [r3, #0]
   85196:	f003 0301 	and.w	r3, r3, #1
   8519a:	2b00      	cmp	r3, #0
   8519c:	d001      	beq.n	851a2 <udd_ep_alloc+0x56>
		return false;
   8519e:	2300      	movs	r3, #0
   851a0:	e1a7      	b.n	854f2 <udd_ep_alloc+0x3a6>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   851a2:	79bb      	ldrb	r3, [r7, #6]
   851a4:	f003 0303 	and.w	r3, r3, #3
   851a8:	2b03      	cmp	r3, #3
   851aa:	d01a      	beq.n	851e2 <udd_ep_alloc+0x96>
   851ac:	2b03      	cmp	r3, #3
   851ae:	dc1e      	bgt.n	851ee <udd_ep_alloc+0xa2>
   851b0:	2b01      	cmp	r3, #1
   851b2:	d002      	beq.n	851ba <udd_ep_alloc+0x6e>
   851b4:	2b02      	cmp	r3, #2
   851b6:	d017      	beq.n	851e8 <udd_ep_alloc+0x9c>
   851b8:	e019      	b.n	851ee <udd_ep_alloc+0xa2>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   851ba:	79fb      	ldrb	r3, [r7, #7]
   851bc:	2b00      	cmp	r3, #0
   851be:	d007      	beq.n	851d0 <udd_ep_alloc+0x84>
   851c0:	79fb      	ldrb	r3, [r7, #7]
   851c2:	2b03      	cmp	r3, #3
   851c4:	d004      	beq.n	851d0 <udd_ep_alloc+0x84>
   851c6:	79fb      	ldrb	r3, [r7, #7]
   851c8:	2b04      	cmp	r3, #4
   851ca:	d001      	beq.n	851d0 <udd_ep_alloc+0x84>
   851cc:	2301      	movs	r3, #1
   851ce:	e000      	b.n	851d2 <udd_ep_alloc+0x86>
   851d0:	2300      	movs	r3, #0
   851d2:	747b      	strb	r3, [r7, #17]
   851d4:	7c7b      	ldrb	r3, [r7, #17]
   851d6:	f003 0301 	and.w	r3, r3, #1
   851da:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   851dc:	2301      	movs	r3, #1
   851de:	757b      	strb	r3, [r7, #21]
		break;
   851e0:	e007      	b.n	851f2 <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   851e2:	2301      	movs	r3, #1
   851e4:	757b      	strb	r3, [r7, #21]
		break;
   851e6:	e004      	b.n	851f2 <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   851e8:	2302      	movs	r3, #2
   851ea:	757b      	strb	r3, [r7, #21]
		break;
   851ec:	e001      	b.n	851f2 <udd_ep_alloc+0xa6>
	default:
		Assert(false);
		return false;
   851ee:	2300      	movs	r3, #0
   851f0:	e17f      	b.n	854f2 <udd_ep_alloc+0x3a6>
	}
	switch (nb_bank) {
   851f2:	7d7b      	ldrb	r3, [r7, #21]
   851f4:	2b03      	cmp	r3, #3
   851f6:	d00c      	beq.n	85212 <udd_ep_alloc+0xc6>
   851f8:	2b03      	cmp	r3, #3
   851fa:	dc0d      	bgt.n	85218 <udd_ep_alloc+0xcc>
   851fc:	2b01      	cmp	r3, #1
   851fe:	d002      	beq.n	85206 <udd_ep_alloc+0xba>
   85200:	2b02      	cmp	r3, #2
   85202:	d003      	beq.n	8520c <udd_ep_alloc+0xc0>
   85204:	e008      	b.n	85218 <udd_ep_alloc+0xcc>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   85206:	2301      	movs	r3, #1
   85208:	753b      	strb	r3, [r7, #20]
		break;
   8520a:	e007      	b.n	8521c <udd_ep_alloc+0xd0>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8520c:	2302      	movs	r3, #2
   8520e:	753b      	strb	r3, [r7, #20]
		break;
   85210:	e004      	b.n	8521c <udd_ep_alloc+0xd0>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   85212:	2303      	movs	r3, #3
   85214:	753b      	strb	r3, [r7, #20]
		break;
   85216:	e001      	b.n	8521c <udd_ep_alloc+0xd0>
	default:
		Assert(false);
		return false;
   85218:	2300      	movs	r3, #0
   8521a:	e16a      	b.n	854f2 <udd_ep_alloc+0x3a6>
	}
	if (b_iso_hbw) {
   8521c:	7c7b      	ldrb	r3, [r7, #17]
   8521e:	2b00      	cmp	r3, #0
   85220:	d017      	beq.n	85252 <udd_ep_alloc+0x106>
		switch(MaxEndpointSize & (0x3u << 11)) {
   85222:	88bb      	ldrh	r3, [r7, #4]
   85224:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   85228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   8522c:	d003      	beq.n	85236 <udd_ep_alloc+0xea>
   8522e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   85232:	d003      	beq.n	8523c <udd_ep_alloc+0xf0>
   85234:	e005      	b.n	85242 <udd_ep_alloc+0xf6>
		case (0x1u << 11):
			nb_tran = 2;
   85236:	2302      	movs	r3, #2
   85238:	74fb      	strb	r3, [r7, #19]
			break;
   8523a:	e005      	b.n	85248 <udd_ep_alloc+0xfc>
		case (0x2u << 11):
			nb_tran = 3;
   8523c:	2303      	movs	r3, #3
   8523e:	74fb      	strb	r3, [r7, #19]
			break;
   85240:	e002      	b.n	85248 <udd_ep_alloc+0xfc>
		default:
			nb_tran = 1;
   85242:	2301      	movs	r3, #1
   85244:	74fb      	strb	r3, [r7, #19]
			break;
   85246:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   85248:	88bb      	ldrh	r3, [r7, #4]
   8524a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   8524e:	80bb      	strh	r3, [r7, #4]
   85250:	e006      	b.n	85260 <udd_ep_alloc+0x114>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   85252:	88bb      	ldrh	r3, [r7, #4]
   85254:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   85258:	2b00      	cmp	r3, #0
   8525a:	d001      	beq.n	85260 <udd_ep_alloc+0x114>
		// High BW not supported
		return false;
   8525c:	2300      	movs	r3, #0
   8525e:	e148      	b.n	854f2 <udd_ep_alloc+0x3a6>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85260:	4a7d      	ldr	r2, [pc, #500]	; (85458 <udd_ep_alloc+0x30c>)
   85262:	79fb      	ldrb	r3, [r7, #7]
   85264:	3308      	adds	r3, #8
   85266:	015b      	lsls	r3, r3, #5
   85268:	4413      	add	r3, r2
   8526a:	681b      	ldr	r3, [r3, #0]
   8526c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   85270:	f023 0303 	bic.w	r3, r3, #3
   85274:	79ba      	ldrb	r2, [r7, #6]
   85276:	0112      	lsls	r2, r2, #4
   85278:	f002 0230 	and.w	r2, r2, #48	; 0x30
   8527c:	7c39      	ldrb	r1, [r7, #16]
   8527e:	2900      	cmp	r1, #0
   85280:	d001      	beq.n	85286 <udd_ep_alloc+0x13a>
   85282:	2108      	movs	r1, #8
   85284:	e000      	b.n	85288 <udd_ep_alloc+0x13c>
   85286:	2100      	movs	r1, #0
   85288:	4311      	orrs	r1, r2
   8528a:	88ba      	ldrh	r2, [r7, #4]
   8528c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   85290:	d207      	bcs.n	852a2 <udd_ep_alloc+0x156>
   85292:	88ba      	ldrh	r2, [r7, #4]
   85294:	2a08      	cmp	r2, #8
   85296:	bf38      	it	cc
   85298:	2208      	movcc	r2, #8
   8529a:	b292      	uxth	r2, r2
   8529c:	0052      	lsls	r2, r2, #1
   8529e:	3a01      	subs	r2, #1
   852a0:	e001      	b.n	852a6 <udd_ep_alloc+0x15a>
   852a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
   852a6:	fab2 f282 	clz	r2, r2
   852aa:	f1c2 021c 	rsb	r2, r2, #28
   852ae:	4311      	orrs	r1, r2
   852b0:	7d3a      	ldrb	r2, [r7, #20]
   852b2:	0192      	lsls	r2, r2, #6
   852b4:	b2d2      	uxtb	r2, r2
   852b6:	4311      	orrs	r1, r2
   852b8:	7c7a      	ldrb	r2, [r7, #17]
   852ba:	2a00      	cmp	r2, #0
   852bc:	d004      	beq.n	852c8 <udd_ep_alloc+0x17c>
   852be:	7cfa      	ldrb	r2, [r7, #19]
   852c0:	0212      	lsls	r2, r2, #8
   852c2:	f402 7240 	and.w	r2, r2, #768	; 0x300
   852c6:	e000      	b.n	852ca <udd_ep_alloc+0x17e>
   852c8:	2200      	movs	r2, #0
   852ca:	430a      	orrs	r2, r1
   852cc:	f3c2 0209 	ubfx	r2, r2, #0, #10
   852d0:	4861      	ldr	r0, [pc, #388]	; (85458 <udd_ep_alloc+0x30c>)
   852d2:	79f9      	ldrb	r1, [r7, #7]
   852d4:	431a      	orrs	r2, r3
   852d6:	f101 0308 	add.w	r3, r1, #8
   852da:	015b      	lsls	r3, r3, #5
   852dc:	4403      	add	r3, r0
   852de:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   852e0:	4a5d      	ldr	r2, [pc, #372]	; (85458 <udd_ep_alloc+0x30c>)
   852e2:	79fb      	ldrb	r3, [r7, #7]
   852e4:	3308      	adds	r3, #8
   852e6:	015b      	lsls	r3, r3, #5
   852e8:	4413      	add	r3, r2
   852ea:	681b      	ldr	r3, [r3, #0]
   852ec:	2b00      	cmp	r3, #0
   852ee:	db01      	blt.n	852f4 <udd_ep_alloc+0x1a8>
		return false;
   852f0:	2300      	movs	r3, #0
   852f2:	e0fe      	b.n	854f2 <udd_ep_alloc+0x3a6>
	}
	udd_enable_endpoint(ep);
   852f4:	4a58      	ldr	r2, [pc, #352]	; (85458 <udd_ep_alloc+0x30c>)
   852f6:	79fb      	ldrb	r3, [r7, #7]
   852f8:	3308      	adds	r3, #8
   852fa:	015b      	lsls	r3, r3, #5
   852fc:	4413      	add	r3, r2
   852fe:	3304      	adds	r3, #4
   85300:	2201      	movs	r2, #1
   85302:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   85304:	2300      	movs	r3, #0
   85306:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   85308:	2302      	movs	r3, #2
   8530a:	74bb      	strb	r3, [r7, #18]
   8530c:	e039      	b.n	85382 <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
   8530e:	4a52      	ldr	r2, [pc, #328]	; (85458 <udd_ep_alloc+0x30c>)
   85310:	7cbb      	ldrb	r3, [r7, #18]
   85312:	015b      	lsls	r3, r3, #5
   85314:	4413      	add	r3, r2
   85316:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   8531a:	681b      	ldr	r3, [r3, #0]
   8531c:	f003 0301 	and.w	r3, r3, #1
   85320:	2b00      	cmp	r3, #0
   85322:	d02b      	beq.n	8537c <udd_ep_alloc+0x230>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   85324:	4a4c      	ldr	r2, [pc, #304]	; (85458 <udd_ep_alloc+0x30c>)
   85326:	7cbb      	ldrb	r3, [r7, #18]
   85328:	3308      	adds	r3, #8
   8532a:	015b      	lsls	r3, r3, #5
   8532c:	4413      	add	r3, r2
   8532e:	681b      	ldr	r3, [r3, #0]
   85330:	099b      	lsrs	r3, r3, #6
   85332:	b2db      	uxtb	r3, r3
   85334:	f003 0303 	and.w	r3, r3, #3
   85338:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   8533a:	7d3a      	ldrb	r2, [r7, #20]
   8533c:	7cbb      	ldrb	r3, [r7, #18]
   8533e:	005b      	lsls	r3, r3, #1
   85340:	fa02 f303 	lsl.w	r3, r2, r3
   85344:	b21a      	sxth	r2, r3
   85346:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   8534a:	4313      	orrs	r3, r2
   8534c:	b21b      	sxth	r3, r3
   8534e:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   85350:	4a41      	ldr	r2, [pc, #260]	; (85458 <udd_ep_alloc+0x30c>)
   85352:	7cbb      	ldrb	r3, [r7, #18]
   85354:	015b      	lsls	r3, r3, #5
   85356:	4413      	add	r3, r2
   85358:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8535c:	2201      	movs	r2, #1
   8535e:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   85360:	4a3d      	ldr	r2, [pc, #244]	; (85458 <udd_ep_alloc+0x30c>)
   85362:	7cbb      	ldrb	r3, [r7, #18]
   85364:	3308      	adds	r3, #8
   85366:	015b      	lsls	r3, r3, #5
   85368:	4413      	add	r3, r2
   8536a:	681a      	ldr	r2, [r3, #0]
   8536c:	493a      	ldr	r1, [pc, #232]	; (85458 <udd_ep_alloc+0x30c>)
   8536e:	7cbb      	ldrb	r3, [r7, #18]
   85370:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   85374:	3308      	adds	r3, #8
   85376:	015b      	lsls	r3, r3, #5
   85378:	440b      	add	r3, r1
   8537a:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   8537c:	7cbb      	ldrb	r3, [r7, #18]
   8537e:	3b01      	subs	r3, #1
   85380:	74bb      	strb	r3, [r7, #18]
   85382:	7cba      	ldrb	r2, [r7, #18]
   85384:	79fb      	ldrb	r3, [r7, #7]
   85386:	429a      	cmp	r2, r3
   85388:	d2c1      	bcs.n	8530e <udd_ep_alloc+0x1c2>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8538a:	79fb      	ldrb	r3, [r7, #7]
   8538c:	74bb      	strb	r3, [r7, #18]
   8538e:	e0ab      	b.n	854e8 <udd_ep_alloc+0x39c>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   85390:	7cbb      	ldrb	r3, [r7, #18]
   85392:	1e5a      	subs	r2, r3, #1
   85394:	4613      	mov	r3, r2
   85396:	005b      	lsls	r3, r3, #1
   85398:	4413      	add	r3, r2
   8539a:	00db      	lsls	r3, r3, #3
   8539c:	4a2f      	ldr	r2, [pc, #188]	; (8545c <udd_ep_alloc+0x310>)
   8539e:	4413      	add	r3, r2
   853a0:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   853a2:	68fb      	ldr	r3, [r7, #12]
   853a4:	7d1b      	ldrb	r3, [r3, #20]
   853a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
   853aa:	b2db      	uxtb	r3, r3
   853ac:	2b00      	cmp	r3, #0
   853ae:	bf14      	ite	ne
   853b0:	2301      	movne	r3, #1
   853b2:	2300      	moveq	r3, #0
   853b4:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   853b6:	8afa      	ldrh	r2, [r7, #22]
   853b8:	7cbb      	ldrb	r3, [r7, #18]
   853ba:	005b      	lsls	r3, r3, #1
   853bc:	fa42 f303 	asr.w	r3, r2, r3
   853c0:	b2db      	uxtb	r3, r3
   853c2:	f003 0303 	and.w	r3, r3, #3
   853c6:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   853c8:	7d3b      	ldrb	r3, [r7, #20]
   853ca:	2b00      	cmp	r3, #0
   853cc:	f000 8088 	beq.w	854e0 <udd_ep_alloc+0x394>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   853d0:	68fa      	ldr	r2, [r7, #12]
   853d2:	7d13      	ldrb	r3, [r2, #20]
   853d4:	f36f 0300 	bfc	r3, #0, #1
   853d8:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   853da:	4a1f      	ldr	r2, [pc, #124]	; (85458 <udd_ep_alloc+0x30c>)
   853dc:	7cbb      	ldrb	r3, [r7, #18]
   853de:	3308      	adds	r3, #8
   853e0:	015b      	lsls	r3, r3, #5
   853e2:	4413      	add	r3, r2
   853e4:	681b      	ldr	r3, [r3, #0]
   853e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   853ea:	7d3b      	ldrb	r3, [r7, #20]
   853ec:	019b      	lsls	r3, r3, #6
   853ee:	b2da      	uxtb	r2, r3
   853f0:	4819      	ldr	r0, [pc, #100]	; (85458 <udd_ep_alloc+0x30c>)
   853f2:	7cbb      	ldrb	r3, [r7, #18]
   853f4:	430a      	orrs	r2, r1
   853f6:	3308      	adds	r3, #8
   853f8:	015b      	lsls	r3, r3, #5
   853fa:	4403      	add	r3, r0
   853fc:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   853fe:	4a16      	ldr	r2, [pc, #88]	; (85458 <udd_ep_alloc+0x30c>)
   85400:	7cbb      	ldrb	r3, [r7, #18]
   85402:	3308      	adds	r3, #8
   85404:	015b      	lsls	r3, r3, #5
   85406:	4413      	add	r3, r2
   85408:	3304      	adds	r3, #4
   8540a:	2201      	movs	r2, #1
   8540c:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   8540e:	4a12      	ldr	r2, [pc, #72]	; (85458 <udd_ep_alloc+0x30c>)
   85410:	7cbb      	ldrb	r3, [r7, #18]
   85412:	3308      	adds	r3, #8
   85414:	015b      	lsls	r3, r3, #5
   85416:	4413      	add	r3, r2
   85418:	681b      	ldr	r3, [r3, #0]
   8541a:	2b00      	cmp	r3, #0
   8541c:	db20      	blt.n	85460 <udd_ep_alloc+0x314>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   8541e:	68fb      	ldr	r3, [r7, #12]
   85420:	681b      	ldr	r3, [r3, #0]
   85422:	2b00      	cmp	r3, #0
   85424:	d101      	bne.n	8542a <udd_ep_alloc+0x2de>
				return false;
   85426:	2300      	movs	r3, #0
   85428:	e063      	b.n	854f2 <udd_ep_alloc+0x3a6>
			}
			if (Is_udd_endpoint_in(i)) {
   8542a:	4a0b      	ldr	r2, [pc, #44]	; (85458 <udd_ep_alloc+0x30c>)
   8542c:	7cbb      	ldrb	r3, [r7, #18]
   8542e:	3308      	adds	r3, #8
   85430:	015b      	lsls	r3, r3, #5
   85432:	4413      	add	r3, r2
   85434:	681b      	ldr	r3, [r3, #0]
   85436:	f003 0308 	and.w	r3, r3, #8
   8543a:	2b00      	cmp	r3, #0
   8543c:	d003      	beq.n	85446 <udd_ep_alloc+0x2fa>
				i |= USB_EP_DIR_IN;
   8543e:	7cbb      	ldrb	r3, [r7, #18]
   85440:	f063 037f 	orn	r3, r3, #127	; 0x7f
   85444:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   85446:	68fb      	ldr	r3, [r7, #12]
   85448:	681b      	ldr	r3, [r3, #0]
   8544a:	68fa      	ldr	r2, [r7, #12]
   8544c:	68d1      	ldr	r1, [r2, #12]
   8544e:	7cba      	ldrb	r2, [r7, #18]
   85450:	2001      	movs	r0, #1
   85452:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   85454:	2300      	movs	r3, #0
   85456:	e04c      	b.n	854f2 <udd_ep_alloc+0x3a6>
   85458:	400a4000 	.word	0x400a4000
   8545c:	2000134c 	.word	0x2000134c
		}
		udd_enable_endpoint_bank_autoswitch(i);
   85460:	4a26      	ldr	r2, [pc, #152]	; (854fc <udd_ep_alloc+0x3b0>)
   85462:	7cbb      	ldrb	r3, [r7, #18]
   85464:	3308      	adds	r3, #8
   85466:	015b      	lsls	r3, r3, #5
   85468:	4413      	add	r3, r2
   8546a:	3304      	adds	r3, #4
   8546c:	681a      	ldr	r2, [r3, #0]
   8546e:	4923      	ldr	r1, [pc, #140]	; (854fc <udd_ep_alloc+0x3b0>)
   85470:	7cbb      	ldrb	r3, [r7, #18]
   85472:	f042 0202 	orr.w	r2, r2, #2
   85476:	3308      	adds	r3, #8
   85478:	015b      	lsls	r3, r3, #5
   8547a:	440b      	add	r3, r1
   8547c:	3304      	adds	r3, #4
   8547e:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   85480:	7afb      	ldrb	r3, [r7, #11]
   85482:	2b00      	cmp	r3, #0
   85484:	d02d      	beq.n	854e2 <udd_ep_alloc+0x396>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   85486:	68fb      	ldr	r3, [r7, #12]
   85488:	68da      	ldr	r2, [r3, #12]
   8548a:	68fb      	ldr	r3, [r7, #12]
   8548c:	691b      	ldr	r3, [r3, #16]
   8548e:	1ad2      	subs	r2, r2, r3
   85490:	68fb      	ldr	r3, [r7, #12]
   85492:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   85494:	68fb      	ldr	r3, [r7, #12]
   85496:	7d1b      	ldrb	r3, [r3, #20]
   85498:	f3c3 0340 	ubfx	r3, r3, #1, #1
   8549c:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   8549e:	2b00      	cmp	r3, #0
   854a0:	bf14      	ite	ne
   854a2:	2301      	movne	r3, #1
   854a4:	2300      	moveq	r3, #0
   854a6:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   854a8:	68fb      	ldr	r3, [r7, #12]
   854aa:	685a      	ldr	r2, [r3, #4]
   854ac:	68fb      	ldr	r3, [r7, #12]
   854ae:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   854b0:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   854b2:	68fb      	ldr	r3, [r7, #12]
   854b4:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   854b6:	68fb      	ldr	r3, [r7, #12]
   854b8:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   854ba:	1ad2      	subs	r2, r2, r3
   854bc:	68fb      	ldr	r3, [r7, #12]
   854be:	681b      	ldr	r3, [r3, #0]
   854c0:	7cb8      	ldrb	r0, [r7, #18]
   854c2:	9300      	str	r3, [sp, #0]
   854c4:	4613      	mov	r3, r2
   854c6:	4622      	mov	r2, r4
   854c8:	4c0d      	ldr	r4, [pc, #52]	; (85500 <udd_ep_alloc+0x3b4>)
   854ca:	47a0      	blx	r4
   854cc:	4603      	mov	r3, r0
   854ce:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   854d0:	7afb      	ldrb	r3, [r7, #11]
   854d2:	f083 0301 	eor.w	r3, r3, #1
   854d6:	b2db      	uxtb	r3, r3
   854d8:	2b00      	cmp	r3, #0
   854da:	d002      	beq.n	854e2 <udd_ep_alloc+0x396>
				dbg_print("ErrReRun%d ", i);
				return false;
   854dc:	2300      	movs	r3, #0
   854de:	e008      	b.n	854f2 <udd_ep_alloc+0x3a6>
			continue;
   854e0:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   854e2:	7cbb      	ldrb	r3, [r7, #18]
   854e4:	3301      	adds	r3, #1
   854e6:	74bb      	strb	r3, [r7, #18]
   854e8:	7cbb      	ldrb	r3, [r7, #18]
   854ea:	2b02      	cmp	r3, #2
   854ec:	f67f af50 	bls.w	85390 <udd_ep_alloc+0x244>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   854f0:	2301      	movs	r3, #1
}
   854f2:	4618      	mov	r0, r3
   854f4:	371c      	adds	r7, #28
   854f6:	46bd      	mov	sp, r7
   854f8:	bd90      	pop	{r4, r7, pc}
   854fa:	bf00      	nop
   854fc:	400a4000 	.word	0x400a4000
   85500:	00085831 	.word	0x00085831

00085504 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   85504:	b580      	push	{r7, lr}
   85506:	b084      	sub	sp, #16
   85508:	af00      	add	r7, sp, #0
   8550a:	4603      	mov	r3, r0
   8550c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8550e:	79fb      	ldrb	r3, [r7, #7]
   85510:	f003 030f 	and.w	r3, r3, #15
   85514:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   85516:	7bfb      	ldrb	r3, [r7, #15]
   85518:	2b02      	cmp	r3, #2
   8551a:	d828      	bhi.n	8556e <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   8551c:	4a16      	ldr	r2, [pc, #88]	; (85578 <udd_ep_free+0x74>)
   8551e:	7bfb      	ldrb	r3, [r7, #15]
   85520:	015b      	lsls	r3, r3, #5
   85522:	4413      	add	r3, r2
   85524:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85528:	2201      	movs	r2, #1
   8552a:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   8552c:	4a12      	ldr	r2, [pc, #72]	; (85578 <udd_ep_free+0x74>)
   8552e:	7bfb      	ldrb	r3, [r7, #15]
   85530:	3308      	adds	r3, #8
   85532:	015b      	lsls	r3, r3, #5
   85534:	4413      	add	r3, r2
   85536:	681a      	ldr	r2, [r3, #0]
   85538:	490f      	ldr	r1, [pc, #60]	; (85578 <udd_ep_free+0x74>)
   8553a:	7bfb      	ldrb	r3, [r7, #15]
   8553c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   85540:	3308      	adds	r3, #8
   85542:	015b      	lsls	r3, r3, #5
   85544:	440b      	add	r3, r1
   85546:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   85548:	79fb      	ldrb	r3, [r7, #7]
   8554a:	4618      	mov	r0, r3
   8554c:	4b0b      	ldr	r3, [pc, #44]	; (8557c <udd_ep_free+0x78>)
   8554e:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   85550:	7bfb      	ldrb	r3, [r7, #15]
   85552:	1e5a      	subs	r2, r3, #1
   85554:	490a      	ldr	r1, [pc, #40]	; (85580 <udd_ep_free+0x7c>)
   85556:	4613      	mov	r3, r2
   85558:	005b      	lsls	r3, r3, #1
   8555a:	4413      	add	r3, r2
   8555c:	00db      	lsls	r3, r3, #3
   8555e:	440b      	add	r3, r1
   85560:	f103 0210 	add.w	r2, r3, #16
   85564:	7913      	ldrb	r3, [r2, #4]
   85566:	f36f 0382 	bfc	r3, #2, #1
   8556a:	7113      	strb	r3, [r2, #4]
   8556c:	e000      	b.n	85570 <udd_ep_free+0x6c>
		return;
   8556e:	bf00      	nop
}
   85570:	3710      	adds	r7, #16
   85572:	46bd      	mov	sp, r7
   85574:	bd80      	pop	{r7, pc}
   85576:	bf00      	nop
   85578:	400a4000 	.word	0x400a4000
   8557c:	00086341 	.word	0x00086341
   85580:	2000134c 	.word	0x2000134c

00085584 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   85584:	b480      	push	{r7}
   85586:	b085      	sub	sp, #20
   85588:	af00      	add	r7, sp, #0
   8558a:	4603      	mov	r3, r0
   8558c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8558e:	79fb      	ldrb	r3, [r7, #7]
   85590:	f003 030f 	and.w	r3, r3, #15
   85594:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   85596:	7bfb      	ldrb	r3, [r7, #15]
   85598:	1e5a      	subs	r2, r3, #1
   8559a:	4613      	mov	r3, r2
   8559c:	005b      	lsls	r3, r3, #1
   8559e:	4413      	add	r3, r2
   855a0:	00db      	lsls	r3, r3, #3
   855a2:	4a10      	ldr	r2, [pc, #64]	; (855e4 <udd_ep_is_halted+0x60>)
   855a4:	4413      	add	r3, r2
   855a6:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   855a8:	4a0f      	ldr	r2, [pc, #60]	; (855e8 <udd_ep_is_halted+0x64>)
   855aa:	7bfb      	ldrb	r3, [r7, #15]
   855ac:	015b      	lsls	r3, r3, #5
   855ae:	4413      	add	r3, r2
   855b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   855b4:	681b      	ldr	r3, [r3, #0]
   855b6:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   855ba:	2b00      	cmp	r3, #0
   855bc:	d106      	bne.n	855cc <udd_ep_is_halted+0x48>
   855be:	68bb      	ldr	r3, [r7, #8]
   855c0:	7d1b      	ldrb	r3, [r3, #20]
   855c2:	f003 0304 	and.w	r3, r3, #4
   855c6:	b2db      	uxtb	r3, r3
   855c8:	2b00      	cmp	r3, #0
   855ca:	d001      	beq.n	855d0 <udd_ep_is_halted+0x4c>
   855cc:	2301      	movs	r3, #1
   855ce:	e000      	b.n	855d2 <udd_ep_is_halted+0x4e>
   855d0:	2300      	movs	r3, #0
   855d2:	f003 0301 	and.w	r3, r3, #1
   855d6:	b2db      	uxtb	r3, r3
}
   855d8:	4618      	mov	r0, r3
   855da:	3714      	adds	r7, #20
   855dc:	46bd      	mov	sp, r7
   855de:	bc80      	pop	{r7}
   855e0:	4770      	bx	lr
   855e2:	bf00      	nop
   855e4:	2000134c 	.word	0x2000134c
   855e8:	400a4000 	.word	0x400a4000

000855ec <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   855ec:	b480      	push	{r7}
   855ee:	b085      	sub	sp, #20
   855f0:	af00      	add	r7, sp, #0
   855f2:	4603      	mov	r3, r0
   855f4:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   855f6:	79fb      	ldrb	r3, [r7, #7]
   855f8:	f003 030f 	and.w	r3, r3, #15
   855fc:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   855fe:	7bfb      	ldrb	r3, [r7, #15]
   85600:	2b02      	cmp	r3, #2
   85602:	d901      	bls.n	85608 <udd_ep_set_halt+0x1c>
		return false;
   85604:	2300      	movs	r3, #0
   85606:	e071      	b.n	856ec <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   85608:	7bfb      	ldrb	r3, [r7, #15]
   8560a:	1e5a      	subs	r2, r3, #1
   8560c:	4613      	mov	r3, r2
   8560e:	005b      	lsls	r3, r3, #1
   85610:	4413      	add	r3, r2
   85612:	00db      	lsls	r3, r3, #3
   85614:	4a38      	ldr	r2, [pc, #224]	; (856f8 <udd_ep_set_halt+0x10c>)
   85616:	4413      	add	r3, r2
   85618:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   8561a:	4a38      	ldr	r2, [pc, #224]	; (856fc <udd_ep_set_halt+0x110>)
   8561c:	7bfb      	ldrb	r3, [r7, #15]
   8561e:	015b      	lsls	r3, r3, #5
   85620:	4413      	add	r3, r2
   85622:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85626:	681b      	ldr	r3, [r3, #0]
   85628:	f003 0320 	and.w	r3, r3, #32
   8562c:	2b00      	cmp	r3, #0
   8562e:	d106      	bne.n	8563e <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   85630:	68bb      	ldr	r3, [r7, #8]
   85632:	7d1b      	ldrb	r3, [r3, #20]
   85634:	f003 0304 	and.w	r3, r3, #4
   85638:	b2db      	uxtb	r3, r3
   8563a:	2b00      	cmp	r3, #0
   8563c:	d001      	beq.n	85642 <udd_ep_set_halt+0x56>
		return true; // Already STALL
   8563e:	2301      	movs	r3, #1
   85640:	e054      	b.n	856ec <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   85642:	68bb      	ldr	r3, [r7, #8]
   85644:	7d1b      	ldrb	r3, [r3, #20]
   85646:	f003 0301 	and.w	r3, r3, #1
   8564a:	b2db      	uxtb	r3, r3
   8564c:	2b00      	cmp	r3, #0
   8564e:	d001      	beq.n	85654 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   85650:	2300      	movs	r3, #0
   85652:	e04b      	b.n	856ec <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   85654:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85658:	2b00      	cmp	r3, #0
   8565a:	da25      	bge.n	856a8 <udd_ep_set_halt+0xbc>
   8565c:	4a27      	ldr	r2, [pc, #156]	; (856fc <udd_ep_set_halt+0x110>)
   8565e:	7bfb      	ldrb	r3, [r7, #15]
   85660:	015b      	lsls	r3, r3, #5
   85662:	4413      	add	r3, r2
   85664:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85668:	681b      	ldr	r3, [r3, #0]
   8566a:	0c9b      	lsrs	r3, r3, #18
   8566c:	f003 0303 	and.w	r3, r3, #3
   85670:	2b00      	cmp	r3, #0
   85672:	d019      	beq.n	856a8 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   85674:	68ba      	ldr	r2, [r7, #8]
   85676:	7d13      	ldrb	r3, [r2, #20]
   85678:	f043 0304 	orr.w	r3, r3, #4
   8567c:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   8567e:	4a1f      	ldr	r2, [pc, #124]	; (856fc <udd_ep_set_halt+0x110>)
   85680:	7bfb      	ldrb	r3, [r7, #15]
   85682:	3308      	adds	r3, #8
   85684:	015b      	lsls	r3, r3, #5
   85686:	4413      	add	r3, r2
   85688:	3304      	adds	r3, #4
   8568a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8568e:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   85690:	4b1a      	ldr	r3, [pc, #104]	; (856fc <udd_ep_set_halt+0x110>)
   85692:	691a      	ldr	r2, [r3, #16]
   85694:	7bfb      	ldrb	r3, [r7, #15]
   85696:	f44f 7180 	mov.w	r1, #256	; 0x100
   8569a:	fa01 f303 	lsl.w	r3, r1, r3
   8569e:	4917      	ldr	r1, [pc, #92]	; (856fc <udd_ep_set_halt+0x110>)
   856a0:	4313      	orrs	r3, r2
   856a2:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   856a4:	2301      	movs	r3, #1
   856a6:	e021      	b.n	856ec <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   856a8:	4a14      	ldr	r2, [pc, #80]	; (856fc <udd_ep_set_halt+0x110>)
   856aa:	7bfb      	ldrb	r3, [r7, #15]
   856ac:	015b      	lsls	r3, r3, #5
   856ae:	4413      	add	r3, r2
   856b0:	f503 7384 	add.w	r3, r3, #264	; 0x108
   856b4:	681a      	ldr	r2, [r3, #0]
   856b6:	4911      	ldr	r1, [pc, #68]	; (856fc <udd_ep_set_halt+0x110>)
   856b8:	7bfb      	ldrb	r3, [r7, #15]
   856ba:	f022 0202 	bic.w	r2, r2, #2
   856be:	015b      	lsls	r3, r3, #5
   856c0:	440b      	add	r3, r1
   856c2:	f503 7384 	add.w	r3, r3, #264	; 0x108
   856c6:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   856c8:	4a0c      	ldr	r2, [pc, #48]	; (856fc <udd_ep_set_halt+0x110>)
   856ca:	7bfb      	ldrb	r3, [r7, #15]
   856cc:	015b      	lsls	r3, r3, #5
   856ce:	4413      	add	r3, r2
   856d0:	f503 738c 	add.w	r3, r3, #280	; 0x118
   856d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   856d8:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   856da:	4a08      	ldr	r2, [pc, #32]	; (856fc <udd_ep_set_halt+0x110>)
   856dc:	7bfb      	ldrb	r3, [r7, #15]
   856de:	015b      	lsls	r3, r3, #5
   856e0:	4413      	add	r3, r2
   856e2:	f503 738a 	add.w	r3, r3, #276	; 0x114
   856e6:	2220      	movs	r2, #32
   856e8:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   856ea:	2301      	movs	r3, #1
}
   856ec:	4618      	mov	r0, r3
   856ee:	3714      	adds	r7, #20
   856f0:	46bd      	mov	sp, r7
   856f2:	bc80      	pop	{r7}
   856f4:	4770      	bx	lr
   856f6:	bf00      	nop
   856f8:	2000134c 	.word	0x2000134c
   856fc:	400a4000 	.word	0x400a4000

00085700 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   85700:	b580      	push	{r7, lr}
   85702:	b084      	sub	sp, #16
   85704:	af00      	add	r7, sp, #0
   85706:	4603      	mov	r3, r0
   85708:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   8570a:	2300      	movs	r3, #0
   8570c:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   8570e:	79fb      	ldrb	r3, [r7, #7]
   85710:	f003 030f 	and.w	r3, r3, #15
   85714:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   85716:	79fb      	ldrb	r3, [r7, #7]
   85718:	2b02      	cmp	r3, #2
   8571a:	d901      	bls.n	85720 <udd_ep_clear_halt+0x20>
		return false;
   8571c:	2300      	movs	r3, #0
   8571e:	e07e      	b.n	8581e <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   85720:	79fb      	ldrb	r3, [r7, #7]
   85722:	1e5a      	subs	r2, r3, #1
   85724:	4613      	mov	r3, r2
   85726:	005b      	lsls	r3, r3, #1
   85728:	4413      	add	r3, r2
   8572a:	00db      	lsls	r3, r3, #3
   8572c:	4a3e      	ldr	r2, [pc, #248]	; (85828 <udd_ep_clear_halt+0x128>)
   8572e:	4413      	add	r3, r2
   85730:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   85732:	68bb      	ldr	r3, [r7, #8]
   85734:	7d1b      	ldrb	r3, [r3, #20]
   85736:	f003 0304 	and.w	r3, r3, #4
   8573a:	b2db      	uxtb	r3, r3
   8573c:	2b00      	cmp	r3, #0
   8573e:	d01a      	beq.n	85776 <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   85740:	68ba      	ldr	r2, [r7, #8]
   85742:	7d13      	ldrb	r3, [r2, #20]
   85744:	f36f 0382 	bfc	r3, #2, #1
   85748:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   8574a:	4a38      	ldr	r2, [pc, #224]	; (8582c <udd_ep_clear_halt+0x12c>)
   8574c:	79fb      	ldrb	r3, [r7, #7]
   8574e:	015b      	lsls	r3, r3, #5
   85750:	4413      	add	r3, r2
   85752:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85756:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8575a:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   8575c:	4b33      	ldr	r3, [pc, #204]	; (8582c <udd_ep_clear_halt+0x12c>)
   8575e:	691a      	ldr	r2, [r3, #16]
   85760:	79fb      	ldrb	r3, [r7, #7]
   85762:	f44f 7180 	mov.w	r1, #256	; 0x100
   85766:	fa01 f303 	lsl.w	r3, r1, r3
   8576a:	43db      	mvns	r3, r3
   8576c:	492f      	ldr	r1, [pc, #188]	; (8582c <udd_ep_clear_halt+0x12c>)
   8576e:	4013      	ands	r3, r2
   85770:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   85772:	2301      	movs	r3, #1
   85774:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   85776:	4a2d      	ldr	r2, [pc, #180]	; (8582c <udd_ep_clear_halt+0x12c>)
   85778:	79fb      	ldrb	r3, [r7, #7]
   8577a:	015b      	lsls	r3, r3, #5
   8577c:	4413      	add	r3, r2
   8577e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85782:	681b      	ldr	r3, [r3, #0]
   85784:	f003 0320 	and.w	r3, r3, #32
   85788:	2b00      	cmp	r3, #0
   8578a:	d035      	beq.n	857f8 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   8578c:	4a27      	ldr	r2, [pc, #156]	; (8582c <udd_ep_clear_halt+0x12c>)
   8578e:	79fb      	ldrb	r3, [r7, #7]
   85790:	015b      	lsls	r3, r3, #5
   85792:	4413      	add	r3, r2
   85794:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85798:	681b      	ldr	r3, [r3, #0]
   8579a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   8579e:	2b00      	cmp	r3, #0
   857a0:	d010      	beq.n	857c4 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   857a2:	4a22      	ldr	r2, [pc, #136]	; (8582c <udd_ep_clear_halt+0x12c>)
   857a4:	79fb      	ldrb	r3, [r7, #7]
   857a6:	015b      	lsls	r3, r3, #5
   857a8:	4413      	add	r3, r2
   857aa:	f503 738c 	add.w	r3, r3, #280	; 0x118
   857ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   857b2:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   857b4:	4a1d      	ldr	r2, [pc, #116]	; (8582c <udd_ep_clear_halt+0x12c>)
   857b6:	79fb      	ldrb	r3, [r7, #7]
   857b8:	015b      	lsls	r3, r3, #5
   857ba:	4413      	add	r3, r2
   857bc:	f503 738c 	add.w	r3, r3, #280	; 0x118
   857c0:	2240      	movs	r2, #64	; 0x40
   857c2:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   857c4:	4a19      	ldr	r2, [pc, #100]	; (8582c <udd_ep_clear_halt+0x12c>)
   857c6:	79fb      	ldrb	r3, [r7, #7]
   857c8:	015b      	lsls	r3, r3, #5
   857ca:	4413      	add	r3, r2
   857cc:	f503 738c 	add.w	r3, r3, #280	; 0x118
   857d0:	2220      	movs	r2, #32
   857d2:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   857d4:	4a15      	ldr	r2, [pc, #84]	; (8582c <udd_ep_clear_halt+0x12c>)
   857d6:	79fb      	ldrb	r3, [r7, #7]
   857d8:	3308      	adds	r3, #8
   857da:	015b      	lsls	r3, r3, #5
   857dc:	4413      	add	r3, r2
   857de:	3304      	adds	r3, #4
   857e0:	681a      	ldr	r2, [r3, #0]
   857e2:	4912      	ldr	r1, [pc, #72]	; (8582c <udd_ep_clear_halt+0x12c>)
   857e4:	79fb      	ldrb	r3, [r7, #7]
   857e6:	f042 0202 	orr.w	r2, r2, #2
   857ea:	3308      	adds	r3, #8
   857ec:	015b      	lsls	r3, r3, #5
   857ee:	440b      	add	r3, r1
   857f0:	3304      	adds	r3, #4
   857f2:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   857f4:	2301      	movs	r3, #1
   857f6:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   857f8:	7bfb      	ldrb	r3, [r7, #15]
   857fa:	2b00      	cmp	r3, #0
   857fc:	d00e      	beq.n	8581c <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   857fe:	68bb      	ldr	r3, [r7, #8]
   85800:	7d1b      	ldrb	r3, [r3, #20]
   85802:	f003 0301 	and.w	r3, r3, #1
   85806:	b2db      	uxtb	r3, r3
   85808:	2b00      	cmp	r3, #0
   8580a:	d007      	beq.n	8581c <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   8580c:	68ba      	ldr	r2, [r7, #8]
   8580e:	7d13      	ldrb	r3, [r2, #20]
   85810:	f36f 0300 	bfc	r3, #0, #1
   85814:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   85816:	68bb      	ldr	r3, [r7, #8]
   85818:	681b      	ldr	r3, [r3, #0]
   8581a:	4798      	blx	r3
		}
	}
	return true;
   8581c:	2301      	movs	r3, #1
}
   8581e:	4618      	mov	r0, r3
   85820:	3710      	adds	r7, #16
   85822:	46bd      	mov	sp, r7
   85824:	bd80      	pop	{r7, pc}
   85826:	bf00      	nop
   85828:	2000134c 	.word	0x2000134c
   8582c:	400a4000 	.word	0x400a4000

00085830 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   85830:	b580      	push	{r7, lr}
   85832:	b086      	sub	sp, #24
   85834:	af00      	add	r7, sp, #0
   85836:	60ba      	str	r2, [r7, #8]
   85838:	607b      	str	r3, [r7, #4]
   8583a:	4603      	mov	r3, r0
   8583c:	73fb      	strb	r3, [r7, #15]
   8583e:	460b      	mov	r3, r1
   85840:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   85842:	7bfb      	ldrb	r3, [r7, #15]
   85844:	f003 030f 	and.w	r3, r3, #15
   85848:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   8584a:	7bfb      	ldrb	r3, [r7, #15]
   8584c:	2b02      	cmp	r3, #2
   8584e:	d901      	bls.n	85854 <udd_ep_run+0x24>
		return false;
   85850:	2300      	movs	r3, #0
   85852:	e063      	b.n	8591c <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   85854:	7bfb      	ldrb	r3, [r7, #15]
   85856:	1e5a      	subs	r2, r3, #1
   85858:	4613      	mov	r3, r2
   8585a:	005b      	lsls	r3, r3, #1
   8585c:	4413      	add	r3, r2
   8585e:	00db      	lsls	r3, r3, #3
   85860:	4a30      	ldr	r2, [pc, #192]	; (85924 <udd_ep_run+0xf4>)
   85862:	4413      	add	r3, r2
   85864:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   85866:	4a30      	ldr	r2, [pc, #192]	; (85928 <udd_ep_run+0xf8>)
   85868:	7bfb      	ldrb	r3, [r7, #15]
   8586a:	015b      	lsls	r3, r3, #5
   8586c:	4413      	add	r3, r2
   8586e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   85872:	681b      	ldr	r3, [r3, #0]
   85874:	f003 0301 	and.w	r3, r3, #1
   85878:	2b00      	cmp	r3, #0
   8587a:	d011      	beq.n	858a0 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   8587c:	4a2a      	ldr	r2, [pc, #168]	; (85928 <udd_ep_run+0xf8>)
   8587e:	7bfb      	ldrb	r3, [r7, #15]
   85880:	015b      	lsls	r3, r3, #5
   85882:	4413      	add	r3, r2
   85884:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85888:	681b      	ldr	r3, [r3, #0]
   8588a:	f003 0320 	and.w	r3, r3, #32
   8588e:	2b00      	cmp	r3, #0
   85890:	d106      	bne.n	858a0 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   85892:	697b      	ldr	r3, [r7, #20]
   85894:	7d1b      	ldrb	r3, [r3, #20]
   85896:	f003 0304 	and.w	r3, r3, #4
   8589a:	b2db      	uxtb	r3, r3
   8589c:	2b00      	cmp	r3, #0
   8589e:	d001      	beq.n	858a4 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   858a0:	2300      	movs	r3, #0
   858a2:	e03b      	b.n	8591c <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   858a4:	4b21      	ldr	r3, [pc, #132]	; (8592c <udd_ep_run+0xfc>)
   858a6:	4798      	blx	r3
   858a8:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   858aa:	697b      	ldr	r3, [r7, #20]
   858ac:	7d1b      	ldrb	r3, [r3, #20]
   858ae:	f003 0301 	and.w	r3, r3, #1
   858b2:	b2db      	uxtb	r3, r3
   858b4:	2b00      	cmp	r3, #0
   858b6:	d004      	beq.n	858c2 <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   858b8:	6938      	ldr	r0, [r7, #16]
   858ba:	4b1d      	ldr	r3, [pc, #116]	; (85930 <udd_ep_run+0x100>)
   858bc:	4798      	blx	r3
		return false; // Job already on going
   858be:	2300      	movs	r3, #0
   858c0:	e02c      	b.n	8591c <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   858c2:	697a      	ldr	r2, [r7, #20]
   858c4:	7d13      	ldrb	r3, [r2, #20]
   858c6:	f043 0301 	orr.w	r3, r3, #1
   858ca:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   858cc:	6938      	ldr	r0, [r7, #16]
   858ce:	4b18      	ldr	r3, [pc, #96]	; (85930 <udd_ep_run+0x100>)
   858d0:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   858d2:	697b      	ldr	r3, [r7, #20]
   858d4:	68ba      	ldr	r2, [r7, #8]
   858d6:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   858d8:	697b      	ldr	r3, [r7, #20]
   858da:	687a      	ldr	r2, [r7, #4]
   858dc:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   858de:	697b      	ldr	r3, [r7, #20]
   858e0:	2200      	movs	r2, #0
   858e2:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   858e4:	697b      	ldr	r3, [r7, #20]
   858e6:	2200      	movs	r2, #0
   858e8:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   858ea:	697b      	ldr	r3, [r7, #20]
   858ec:	6a3a      	ldr	r2, [r7, #32]
   858ee:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   858f0:	7bbb      	ldrb	r3, [r7, #14]
   858f2:	2b00      	cmp	r3, #0
   858f4:	d102      	bne.n	858fc <udd_ep_run+0xcc>
   858f6:	687b      	ldr	r3, [r7, #4]
   858f8:	2b00      	cmp	r3, #0
   858fa:	d101      	bne.n	85900 <udd_ep_run+0xd0>
   858fc:	2301      	movs	r3, #1
   858fe:	e000      	b.n	85902 <udd_ep_run+0xd2>
   85900:	2300      	movs	r3, #0
   85902:	f003 0301 	and.w	r3, r3, #1
   85906:	b2d9      	uxtb	r1, r3
   85908:	697a      	ldr	r2, [r7, #20]
   8590a:	7d13      	ldrb	r3, [r2, #20]
   8590c:	f361 0341 	bfi	r3, r1, #1, #1
   85910:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   85912:	7bfb      	ldrb	r3, [r7, #15]
   85914:	4618      	mov	r0, r3
   85916:	4b07      	ldr	r3, [pc, #28]	; (85934 <udd_ep_run+0x104>)
   85918:	4798      	blx	r3
	return true;
   8591a:	2301      	movs	r3, #1
}
   8591c:	4618      	mov	r0, r3
   8591e:	3718      	adds	r7, #24
   85920:	46bd      	mov	sp, r7
   85922:	bd80      	pop	{r7, pc}
   85924:	2000134c 	.word	0x2000134c
   85928:	400a4000 	.word	0x400a4000
   8592c:	00084bcd 	.word	0x00084bcd
   85930:	00084c29 	.word	0x00084c29
   85934:	000863ed 	.word	0x000863ed

00085938 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   85938:	b580      	push	{r7, lr}
   8593a:	b084      	sub	sp, #16
   8593c:	af00      	add	r7, sp, #0
   8593e:	4603      	mov	r3, r0
   85940:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85942:	79fb      	ldrb	r3, [r7, #7]
   85944:	f003 030f 	and.w	r3, r3, #15
   85948:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   8594a:	7bfb      	ldrb	r3, [r7, #15]
   8594c:	011a      	lsls	r2, r3, #4
   8594e:	4b19      	ldr	r3, [pc, #100]	; (859b4 <udd_ep_abort+0x7c>)
   85950:	4413      	add	r3, r2
   85952:	2200      	movs	r2, #0
   85954:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   85956:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8595a:	2b00      	cmp	r3, #0
   8595c:	da21      	bge.n	859a2 <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   8595e:	e014      	b.n	8598a <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   85960:	4a15      	ldr	r2, [pc, #84]	; (859b8 <udd_ep_abort+0x80>)
   85962:	7bfb      	ldrb	r3, [r7, #15]
   85964:	015b      	lsls	r3, r3, #5
   85966:	4413      	add	r3, r2
   85968:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8596c:	f44f 7200 	mov.w	r2, #512	; 0x200
   85970:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   85972:	bf00      	nop
   85974:	4a10      	ldr	r2, [pc, #64]	; (859b8 <udd_ep_abort+0x80>)
   85976:	7bfb      	ldrb	r3, [r7, #15]
   85978:	015b      	lsls	r3, r3, #5
   8597a:	4413      	add	r3, r2
   8597c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85980:	681b      	ldr	r3, [r3, #0]
   85982:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85986:	2b00      	cmp	r3, #0
   85988:	d1f4      	bne.n	85974 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   8598a:	4a0b      	ldr	r2, [pc, #44]	; (859b8 <udd_ep_abort+0x80>)
   8598c:	7bfb      	ldrb	r3, [r7, #15]
   8598e:	015b      	lsls	r3, r3, #5
   85990:	4413      	add	r3, r2
   85992:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85996:	681b      	ldr	r3, [r3, #0]
   85998:	0c9b      	lsrs	r3, r3, #18
   8599a:	f003 0303 	and.w	r3, r3, #3
   8599e:	2b00      	cmp	r3, #0
   859a0:	d1de      	bne.n	85960 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   859a2:	79fb      	ldrb	r3, [r7, #7]
   859a4:	4618      	mov	r0, r3
   859a6:	4b05      	ldr	r3, [pc, #20]	; (859bc <udd_ep_abort+0x84>)
   859a8:	4798      	blx	r3
}
   859aa:	bf00      	nop
   859ac:	3710      	adds	r7, #16
   859ae:	46bd      	mov	sp, r7
   859b0:	bd80      	pop	{r7, pc}
   859b2:	bf00      	nop
   859b4:	400a4300 	.word	0x400a4300
   859b8:	400a4000 	.word	0x400a4000
   859bc:	00086341 	.word	0x00086341

000859c0 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   859c0:	b480      	push	{r7}
   859c2:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   859c4:	4b0a      	ldr	r3, [pc, #40]	; (859f0 <udd_test_mode_j+0x30>)
   859c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   859ca:	f023 0303 	bic.w	r3, r3, #3
   859ce:	4a08      	ldr	r2, [pc, #32]	; (859f0 <udd_test_mode_j+0x30>)
   859d0:	f043 0302 	orr.w	r3, r3, #2
   859d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   859d8:	4b05      	ldr	r3, [pc, #20]	; (859f0 <udd_test_mode_j+0x30>)
   859da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   859de:	4a04      	ldr	r2, [pc, #16]	; (859f0 <udd_test_mode_j+0x30>)
   859e0:	f043 0304 	orr.w	r3, r3, #4
   859e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   859e8:	bf00      	nop
   859ea:	46bd      	mov	sp, r7
   859ec:	bc80      	pop	{r7}
   859ee:	4770      	bx	lr
   859f0:	400a4000 	.word	0x400a4000

000859f4 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   859f4:	b480      	push	{r7}
   859f6:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   859f8:	4b0a      	ldr	r3, [pc, #40]	; (85a24 <udd_test_mode_k+0x30>)
   859fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   859fe:	f023 0303 	bic.w	r3, r3, #3
   85a02:	4a08      	ldr	r2, [pc, #32]	; (85a24 <udd_test_mode_k+0x30>)
   85a04:	f043 0302 	orr.w	r3, r3, #2
   85a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   85a0c:	4b05      	ldr	r3, [pc, #20]	; (85a24 <udd_test_mode_k+0x30>)
   85a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   85a12:	4a04      	ldr	r2, [pc, #16]	; (85a24 <udd_test_mode_k+0x30>)
   85a14:	f043 0308 	orr.w	r3, r3, #8
   85a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85a1c:	bf00      	nop
   85a1e:	46bd      	mov	sp, r7
   85a20:	bc80      	pop	{r7}
   85a22:	4770      	bx	lr
   85a24:	400a4000 	.word	0x400a4000

00085a28 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   85a28:	b480      	push	{r7}
   85a2a:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   85a2c:	4b06      	ldr	r3, [pc, #24]	; (85a48 <udd_test_mode_se0_nak+0x20>)
   85a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   85a32:	f023 0303 	bic.w	r3, r3, #3
   85a36:	4a04      	ldr	r2, [pc, #16]	; (85a48 <udd_test_mode_se0_nak+0x20>)
   85a38:	f043 0302 	orr.w	r3, r3, #2
   85a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85a40:	bf00      	nop
   85a42:	46bd      	mov	sp, r7
   85a44:	bc80      	pop	{r7}
   85a46:	4770      	bx	lr
   85a48:	400a4000 	.word	0x400a4000

00085a4c <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   85a4c:	b4b0      	push	{r4, r5, r7}
   85a4e:	b093      	sub	sp, #76	; 0x4c
   85a50:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   85a52:	4b2e      	ldr	r3, [pc, #184]	; (85b0c <udd_test_mode_packet+0xc0>)
   85a54:	1d3c      	adds	r4, r7, #4
   85a56:	461d      	mov	r5, r3
   85a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85a64:	e895 0003 	ldmia.w	r5, {r0, r1}
   85a68:	6020      	str	r0, [r4, #0]
   85a6a:	3404      	adds	r4, #4
   85a6c:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   85a6e:	4b28      	ldr	r3, [pc, #160]	; (85b10 <udd_test_mode_packet+0xc4>)
   85a70:	2201      	movs	r2, #1
   85a72:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   85a76:	4b26      	ldr	r3, [pc, #152]	; (85b10 <udd_test_mode_packet+0xc4>)
   85a78:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   85a7c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   85a80:	f023 0303 	bic.w	r3, r3, #3
   85a84:	4a22      	ldr	r2, [pc, #136]	; (85b10 <udd_test_mode_packet+0xc4>)
   85a86:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   85a8a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   85a8e:	4b20      	ldr	r3, [pc, #128]	; (85b10 <udd_test_mode_packet+0xc4>)
   85a90:	2201      	movs	r2, #1
   85a92:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   85a96:	4b1e      	ldr	r3, [pc, #120]	; (85b10 <udd_test_mode_packet+0xc4>)
   85a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   85a9c:	f023 0303 	bic.w	r3, r3, #3
   85aa0:	4a1b      	ldr	r2, [pc, #108]	; (85b10 <udd_test_mode_packet+0xc4>)
   85aa2:	f043 0302 	orr.w	r3, r3, #2
   85aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   85aaa:	4b19      	ldr	r3, [pc, #100]	; (85b10 <udd_test_mode_packet+0xc4>)
   85aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   85ab0:	4a17      	ldr	r2, [pc, #92]	; (85b10 <udd_test_mode_packet+0xc4>)
   85ab2:	f043 0310 	orr.w	r3, r3, #16
   85ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85aba:	4b16      	ldr	r3, [pc, #88]	; (85b14 <udd_test_mode_packet+0xc8>)
   85abc:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   85abe:	1d3b      	adds	r3, r7, #4
   85ac0:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   85ac2:	2300      	movs	r3, #0
   85ac4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   85ac8:	e00c      	b.n	85ae4 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   85aca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   85acc:	1c53      	adds	r3, r2, #1
   85ace:	63fb      	str	r3, [r7, #60]	; 0x3c
   85ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85ad2:	1c59      	adds	r1, r3, #1
   85ad4:	6439      	str	r1, [r7, #64]	; 0x40
   85ad6:	7812      	ldrb	r2, [r2, #0]
   85ad8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   85ada:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   85ade:	3301      	adds	r3, #1
   85ae0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   85ae4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   85ae8:	2b34      	cmp	r3, #52	; 0x34
   85aea:	d9ee      	bls.n	85aca <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   85aec:	4b08      	ldr	r3, [pc, #32]	; (85b10 <udd_test_mode_packet+0xc4>)
   85aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85af2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85af6:	4b06      	ldr	r3, [pc, #24]	; (85b10 <udd_test_mode_packet+0xc4>)
   85af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85afc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   85b00:	bf00      	nop
   85b02:	374c      	adds	r7, #76	; 0x4c
   85b04:	46bd      	mov	sp, r7
   85b06:	bcb0      	pop	{r4, r5, r7}
   85b08:	4770      	bx	lr
   85b0a:	bf00      	nop
   85b0c:	0008da18 	.word	0x0008da18
   85b10:	400a4000 	.word	0x400a4000
   85b14:	20180000 	.word	0x20180000

00085b18 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   85b18:	b580      	push	{r7, lr}
   85b1a:	b082      	sub	sp, #8
   85b1c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   85b1e:	4b1b      	ldr	r3, [pc, #108]	; (85b8c <udd_reset_ep_ctrl+0x74>)
   85b20:	681b      	ldr	r3, [r3, #0]
   85b22:	4a1a      	ldr	r2, [pc, #104]	; (85b8c <udd_reset_ep_ctrl+0x74>)
   85b24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   85b28:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   85b2a:	4b18      	ldr	r3, [pc, #96]	; (85b8c <udd_reset_ep_ctrl+0x74>)
   85b2c:	681b      	ldr	r3, [r3, #0]
   85b2e:	4a17      	ldr	r2, [pc, #92]	; (85b8c <udd_reset_ep_ctrl+0x74>)
   85b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85b34:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   85b36:	4b15      	ldr	r3, [pc, #84]	; (85b8c <udd_reset_ep_ctrl+0x74>)
   85b38:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   85b3c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   85b40:	f023 0303 	bic.w	r3, r3, #3
   85b44:	4a11      	ldr	r2, [pc, #68]	; (85b8c <udd_reset_ep_ctrl+0x74>)
   85b46:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   85b4a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   85b4e:	4b0f      	ldr	r3, [pc, #60]	; (85b8c <udd_reset_ep_ctrl+0x74>)
   85b50:	2201      	movs	r2, #1
   85b52:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   85b56:	4b0e      	ldr	r3, [pc, #56]	; (85b90 <udd_reset_ep_ctrl+0x78>)
   85b58:	4798      	blx	r3
   85b5a:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   85b5c:	4b0b      	ldr	r3, [pc, #44]	; (85b8c <udd_reset_ep_ctrl+0x74>)
   85b5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85b62:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   85b66:	4b09      	ldr	r3, [pc, #36]	; (85b8c <udd_reset_ep_ctrl+0x74>)
   85b68:	f44f 7200 	mov.w	r2, #512	; 0x200
   85b6c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   85b70:	4b06      	ldr	r3, [pc, #24]	; (85b8c <udd_reset_ep_ctrl+0x74>)
   85b72:	691b      	ldr	r3, [r3, #16]
   85b74:	4a05      	ldr	r2, [pc, #20]	; (85b8c <udd_reset_ep_ctrl+0x74>)
   85b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   85b7a:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   85b7c:	6878      	ldr	r0, [r7, #4]
   85b7e:	4b05      	ldr	r3, [pc, #20]	; (85b94 <udd_reset_ep_ctrl+0x7c>)
   85b80:	4798      	blx	r3
}
   85b82:	bf00      	nop
   85b84:	3708      	adds	r7, #8
   85b86:	46bd      	mov	sp, r7
   85b88:	bd80      	pop	{r7, pc}
   85b8a:	bf00      	nop
   85b8c:	400a4000 	.word	0x400a4000
   85b90:	00084bcd 	.word	0x00084bcd
   85b94:	00084c29 	.word	0x00084c29

00085b98 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   85b98:	b580      	push	{r7, lr}
   85b9a:	b082      	sub	sp, #8
   85b9c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   85b9e:	4b10      	ldr	r3, [pc, #64]	; (85be0 <udd_ctrl_init+0x48>)
   85ba0:	4798      	blx	r3
   85ba2:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   85ba4:	4b0f      	ldr	r3, [pc, #60]	; (85be4 <udd_ctrl_init+0x4c>)
   85ba6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85baa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   85bae:	6878      	ldr	r0, [r7, #4]
   85bb0:	4b0d      	ldr	r3, [pc, #52]	; (85be8 <udd_ctrl_init+0x50>)
   85bb2:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   85bb4:	4b0b      	ldr	r3, [pc, #44]	; (85be4 <udd_ctrl_init+0x4c>)
   85bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
   85bba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   85bbe:	4b0b      	ldr	r3, [pc, #44]	; (85bec <udd_ctrl_init+0x54>)
   85bc0:	2200      	movs	r2, #0
   85bc2:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   85bc4:	4b09      	ldr	r3, [pc, #36]	; (85bec <udd_ctrl_init+0x54>)
   85bc6:	2200      	movs	r2, #0
   85bc8:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   85bca:	4b08      	ldr	r3, [pc, #32]	; (85bec <udd_ctrl_init+0x54>)
   85bcc:	2200      	movs	r2, #0
   85bce:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   85bd0:	4b07      	ldr	r3, [pc, #28]	; (85bf0 <udd_ctrl_init+0x58>)
   85bd2:	2200      	movs	r2, #0
   85bd4:	701a      	strb	r2, [r3, #0]
}
   85bd6:	bf00      	nop
   85bd8:	3708      	adds	r7, #8
   85bda:	46bd      	mov	sp, r7
   85bdc:	bd80      	pop	{r7, pc}
   85bde:	bf00      	nop
   85be0:	00084bcd 	.word	0x00084bcd
   85be4:	400a4000 	.word	0x400a4000
   85be8:	00084c29 	.word	0x00084c29
   85bec:	20001828 	.word	0x20001828
   85bf0:	20001345 	.word	0x20001345

00085bf4 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   85bf4:	b580      	push	{r7, lr}
   85bf6:	b084      	sub	sp, #16
   85bf8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   85bfa:	4b40      	ldr	r3, [pc, #256]	; (85cfc <udd_ctrl_setup_received+0x108>)
   85bfc:	781b      	ldrb	r3, [r3, #0]
   85bfe:	2b00      	cmp	r3, #0
   85c00:	d003      	beq.n	85c0a <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   85c02:	4b3f      	ldr	r3, [pc, #252]	; (85d00 <udd_ctrl_setup_received+0x10c>)
   85c04:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   85c06:	4b3f      	ldr	r3, [pc, #252]	; (85d04 <udd_ctrl_setup_received+0x110>)
   85c08:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   85c0a:	4b3f      	ldr	r3, [pc, #252]	; (85d08 <udd_ctrl_setup_received+0x114>)
   85c0c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85c10:	0d1b      	lsrs	r3, r3, #20
   85c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
   85c16:	2b08      	cmp	r3, #8
   85c18:	d007      	beq.n	85c2a <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   85c1a:	4b3c      	ldr	r3, [pc, #240]	; (85d0c <udd_ctrl_setup_received+0x118>)
   85c1c:	4798      	blx	r3
		udd_ack_setup_received(0);
   85c1e:	4b3a      	ldr	r3, [pc, #232]	; (85d08 <udd_ctrl_setup_received+0x114>)
   85c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85c24:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   85c28:	e064      	b.n	85cf4 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85c2a:	4b39      	ldr	r3, [pc, #228]	; (85d10 <udd_ctrl_setup_received+0x11c>)
   85c2c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   85c2e:	2300      	movs	r3, #0
   85c30:	73fb      	strb	r3, [r7, #15]
   85c32:	e00a      	b.n	85c4a <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   85c34:	68bb      	ldr	r3, [r7, #8]
   85c36:	1c5a      	adds	r2, r3, #1
   85c38:	60ba      	str	r2, [r7, #8]
   85c3a:	7bfa      	ldrb	r2, [r7, #15]
   85c3c:	4935      	ldr	r1, [pc, #212]	; (85d14 <udd_ctrl_setup_received+0x120>)
   85c3e:	440a      	add	r2, r1
   85c40:	781b      	ldrb	r3, [r3, #0]
   85c42:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   85c44:	7bfb      	ldrb	r3, [r7, #15]
   85c46:	3301      	adds	r3, #1
   85c48:	73fb      	strb	r3, [r7, #15]
   85c4a:	7bfb      	ldrb	r3, [r7, #15]
   85c4c:	2b07      	cmp	r3, #7
   85c4e:	d9f1      	bls.n	85c34 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   85c50:	4b30      	ldr	r3, [pc, #192]	; (85d14 <udd_ctrl_setup_received+0x120>)
   85c52:	885a      	ldrh	r2, [r3, #2]
   85c54:	4b2f      	ldr	r3, [pc, #188]	; (85d14 <udd_ctrl_setup_received+0x120>)
   85c56:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   85c58:	4b2e      	ldr	r3, [pc, #184]	; (85d14 <udd_ctrl_setup_received+0x120>)
   85c5a:	889a      	ldrh	r2, [r3, #4]
   85c5c:	4b2d      	ldr	r3, [pc, #180]	; (85d14 <udd_ctrl_setup_received+0x120>)
   85c5e:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   85c60:	4b2c      	ldr	r3, [pc, #176]	; (85d14 <udd_ctrl_setup_received+0x120>)
   85c62:	88da      	ldrh	r2, [r3, #6]
   85c64:	4b2b      	ldr	r3, [pc, #172]	; (85d14 <udd_ctrl_setup_received+0x120>)
   85c66:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   85c68:	4b2b      	ldr	r3, [pc, #172]	; (85d18 <udd_ctrl_setup_received+0x124>)
   85c6a:	4798      	blx	r3
   85c6c:	4603      	mov	r3, r0
   85c6e:	f083 0301 	eor.w	r3, r3, #1
   85c72:	b2db      	uxtb	r3, r3
   85c74:	2b00      	cmp	r3, #0
   85c76:	d007      	beq.n	85c88 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   85c78:	4b24      	ldr	r3, [pc, #144]	; (85d0c <udd_ctrl_setup_received+0x118>)
   85c7a:	4798      	blx	r3
		udd_ack_setup_received(0);
   85c7c:	4b22      	ldr	r3, [pc, #136]	; (85d08 <udd_ctrl_setup_received+0x114>)
   85c7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85c82:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   85c86:	e035      	b.n	85cf4 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   85c88:	4b1f      	ldr	r3, [pc, #124]	; (85d08 <udd_ctrl_setup_received+0x114>)
   85c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85c8e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   85c92:	4b20      	ldr	r3, [pc, #128]	; (85d14 <udd_ctrl_setup_received+0x120>)
   85c94:	781b      	ldrb	r3, [r3, #0]
   85c96:	b25b      	sxtb	r3, r3
   85c98:	2b00      	cmp	r3, #0
   85c9a:	da0b      	bge.n	85cb4 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   85c9c:	4b1f      	ldr	r3, [pc, #124]	; (85d1c <udd_ctrl_setup_received+0x128>)
   85c9e:	2200      	movs	r2, #0
   85ca0:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85ca2:	4b1f      	ldr	r3, [pc, #124]	; (85d20 <udd_ctrl_setup_received+0x12c>)
   85ca4:	2200      	movs	r2, #0
   85ca6:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   85ca8:	4b14      	ldr	r3, [pc, #80]	; (85cfc <udd_ctrl_setup_received+0x108>)
   85caa:	2202      	movs	r2, #2
   85cac:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   85cae:	4b1d      	ldr	r3, [pc, #116]	; (85d24 <udd_ctrl_setup_received+0x130>)
   85cb0:	4798      	blx	r3
   85cb2:	e01f      	b.n	85cf4 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   85cb4:	4b17      	ldr	r3, [pc, #92]	; (85d14 <udd_ctrl_setup_received+0x120>)
   85cb6:	88db      	ldrh	r3, [r3, #6]
   85cb8:	2b00      	cmp	r3, #0
   85cba:	d102      	bne.n	85cc2 <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   85cbc:	4b1a      	ldr	r3, [pc, #104]	; (85d28 <udd_ctrl_setup_received+0x134>)
   85cbe:	4798      	blx	r3
			return;
   85cc0:	e018      	b.n	85cf4 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   85cc2:	4b16      	ldr	r3, [pc, #88]	; (85d1c <udd_ctrl_setup_received+0x128>)
   85cc4:	2200      	movs	r2, #0
   85cc6:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85cc8:	4b15      	ldr	r3, [pc, #84]	; (85d20 <udd_ctrl_setup_received+0x12c>)
   85cca:	2200      	movs	r2, #0
   85ccc:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   85cce:	4b0b      	ldr	r3, [pc, #44]	; (85cfc <udd_ctrl_setup_received+0x108>)
   85cd0:	2201      	movs	r2, #1
   85cd2:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   85cd4:	4b0c      	ldr	r3, [pc, #48]	; (85d08 <udd_ctrl_setup_received+0x114>)
   85cd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85cda:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   85cde:	4b13      	ldr	r3, [pc, #76]	; (85d2c <udd_ctrl_setup_received+0x138>)
   85ce0:	4798      	blx	r3
   85ce2:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   85ce4:	4b08      	ldr	r3, [pc, #32]	; (85d08 <udd_ctrl_setup_received+0x114>)
   85ce6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85cea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   85cee:	6878      	ldr	r0, [r7, #4]
   85cf0:	4b0f      	ldr	r3, [pc, #60]	; (85d30 <udd_ctrl_setup_received+0x13c>)
   85cf2:	4798      	blx	r3
	}
}
   85cf4:	3710      	adds	r7, #16
   85cf6:	46bd      	mov	sp, r7
   85cf8:	bd80      	pop	{r7, pc}
   85cfa:	bf00      	nop
   85cfc:	20001345 	.word	0x20001345
   85d00:	0008619d 	.word	0x0008619d
   85d04:	00085b99 	.word	0x00085b99
   85d08:	400a4000 	.word	0x400a4000
   85d0c:	000860d1 	.word	0x000860d1
   85d10:	20180000 	.word	0x20180000
   85d14:	20001828 	.word	0x20001828
   85d18:	00084979 	.word	0x00084979
   85d1c:	20001346 	.word	0x20001346
   85d20:	20001348 	.word	0x20001348
   85d24:	00085d35 	.word	0x00085d35
   85d28:	000860f5 	.word	0x000860f5
   85d2c:	00084bcd 	.word	0x00084bcd
   85d30:	00084c29 	.word	0x00084c29

00085d34 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   85d34:	b580      	push	{r7, lr}
   85d36:	b084      	sub	sp, #16
   85d38:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   85d3a:	4b4c      	ldr	r3, [pc, #304]	; (85e6c <udd_ctrl_in_sent+0x138>)
   85d3c:	4798      	blx	r3
   85d3e:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   85d40:	4b4b      	ldr	r3, [pc, #300]	; (85e70 <udd_ctrl_in_sent+0x13c>)
   85d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85d46:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   85d4a:	6838      	ldr	r0, [r7, #0]
   85d4c:	4b49      	ldr	r3, [pc, #292]	; (85e74 <udd_ctrl_in_sent+0x140>)
   85d4e:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85d50:	4b49      	ldr	r3, [pc, #292]	; (85e78 <udd_ctrl_in_sent+0x144>)
   85d52:	781b      	ldrb	r3, [r3, #0]
   85d54:	2b03      	cmp	r3, #3
   85d56:	d104      	bne.n	85d62 <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   85d58:	4b48      	ldr	r3, [pc, #288]	; (85e7c <udd_ctrl_in_sent+0x148>)
   85d5a:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   85d5c:	4b48      	ldr	r3, [pc, #288]	; (85e80 <udd_ctrl_in_sent+0x14c>)
   85d5e:	4798      	blx	r3
		return;
   85d60:	e081      	b.n	85e66 <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85d62:	4b48      	ldr	r3, [pc, #288]	; (85e84 <udd_ctrl_in_sent+0x150>)
   85d64:	899a      	ldrh	r2, [r3, #12]
   85d66:	4b48      	ldr	r3, [pc, #288]	; (85e88 <udd_ctrl_in_sent+0x154>)
   85d68:	881b      	ldrh	r3, [r3, #0]
   85d6a:	1ad3      	subs	r3, r2, r3
   85d6c:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   85d6e:	89fb      	ldrh	r3, [r7, #14]
   85d70:	2b00      	cmp	r3, #0
   85d72:	d127      	bne.n	85dc4 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85d74:	4b45      	ldr	r3, [pc, #276]	; (85e8c <udd_ctrl_in_sent+0x158>)
   85d76:	881a      	ldrh	r2, [r3, #0]
   85d78:	4b43      	ldr	r3, [pc, #268]	; (85e88 <udd_ctrl_in_sent+0x154>)
   85d7a:	881b      	ldrh	r3, [r3, #0]
   85d7c:	4413      	add	r3, r2
   85d7e:	b29a      	uxth	r2, r3
   85d80:	4b42      	ldr	r3, [pc, #264]	; (85e8c <udd_ctrl_in_sent+0x158>)
   85d82:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   85d84:	4b3f      	ldr	r3, [pc, #252]	; (85e84 <udd_ctrl_in_sent+0x150>)
   85d86:	88da      	ldrh	r2, [r3, #6]
   85d88:	4b40      	ldr	r3, [pc, #256]	; (85e8c <udd_ctrl_in_sent+0x158>)
   85d8a:	881b      	ldrh	r3, [r3, #0]
   85d8c:	429a      	cmp	r2, r3
   85d8e:	d003      	beq.n	85d98 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   85d90:	4b3f      	ldr	r3, [pc, #252]	; (85e90 <udd_ctrl_in_sent+0x15c>)
   85d92:	781b      	ldrb	r3, [r3, #0]
   85d94:	2b00      	cmp	r3, #0
   85d96:	d002      	beq.n	85d9e <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   85d98:	4b3e      	ldr	r3, [pc, #248]	; (85e94 <udd_ctrl_in_sent+0x160>)
   85d9a:	4798      	blx	r3
			return;
   85d9c:	e063      	b.n	85e66 <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   85d9e:	4b39      	ldr	r3, [pc, #228]	; (85e84 <udd_ctrl_in_sent+0x150>)
   85da0:	695b      	ldr	r3, [r3, #20]
   85da2:	2b00      	cmp	r3, #0
   85da4:	d00e      	beq.n	85dc4 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   85da6:	4b37      	ldr	r3, [pc, #220]	; (85e84 <udd_ctrl_in_sent+0x150>)
   85da8:	695b      	ldr	r3, [r3, #20]
   85daa:	4798      	blx	r3
   85dac:	4603      	mov	r3, r0
   85dae:	f083 0301 	eor.w	r3, r3, #1
   85db2:	b2db      	uxtb	r3, r3
   85db4:	2b00      	cmp	r3, #0
   85db6:	d105      	bne.n	85dc4 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   85db8:	4b33      	ldr	r3, [pc, #204]	; (85e88 <udd_ctrl_in_sent+0x154>)
   85dba:	2200      	movs	r2, #0
   85dbc:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   85dbe:	4b31      	ldr	r3, [pc, #196]	; (85e84 <udd_ctrl_in_sent+0x150>)
   85dc0:	899b      	ldrh	r3, [r3, #12]
   85dc2:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   85dc4:	89fb      	ldrh	r3, [r7, #14]
   85dc6:	2b3f      	cmp	r3, #63	; 0x3f
   85dc8:	d905      	bls.n	85dd6 <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   85dca:	2340      	movs	r3, #64	; 0x40
   85dcc:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   85dce:	4b30      	ldr	r3, [pc, #192]	; (85e90 <udd_ctrl_in_sent+0x15c>)
   85dd0:	2200      	movs	r2, #0
   85dd2:	701a      	strb	r2, [r3, #0]
   85dd4:	e002      	b.n	85ddc <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   85dd6:	4b2e      	ldr	r3, [pc, #184]	; (85e90 <udd_ctrl_in_sent+0x15c>)
   85dd8:	2201      	movs	r2, #1
   85dda:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85ddc:	4b2e      	ldr	r3, [pc, #184]	; (85e98 <udd_ctrl_in_sent+0x164>)
   85dde:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85de0:	4b28      	ldr	r3, [pc, #160]	; (85e84 <udd_ctrl_in_sent+0x150>)
   85de2:	689b      	ldr	r3, [r3, #8]
   85de4:	4a28      	ldr	r2, [pc, #160]	; (85e88 <udd_ctrl_in_sent+0x154>)
   85de6:	8812      	ldrh	r2, [r2, #0]
   85de8:	4413      	add	r3, r2
   85dea:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   85dec:	4b1f      	ldr	r3, [pc, #124]	; (85e6c <udd_ctrl_in_sent+0x138>)
   85dee:	4798      	blx	r3
   85df0:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   85df2:	4b1f      	ldr	r3, [pc, #124]	; (85e70 <udd_ctrl_in_sent+0x13c>)
   85df4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85dfc:	2b00      	cmp	r3, #0
   85dfe:	d006      	beq.n	85e0e <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   85e00:	6838      	ldr	r0, [r7, #0]
   85e02:	4b1c      	ldr	r3, [pc, #112]	; (85e74 <udd_ctrl_in_sent+0x140>)
   85e04:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85e06:	4b1c      	ldr	r3, [pc, #112]	; (85e78 <udd_ctrl_in_sent+0x144>)
   85e08:	2204      	movs	r2, #4
   85e0a:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   85e0c:	e02b      	b.n	85e66 <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   85e0e:	2300      	movs	r3, #0
   85e10:	737b      	strb	r3, [r7, #13]
   85e12:	e00a      	b.n	85e2a <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   85e14:	687a      	ldr	r2, [r7, #4]
   85e16:	1c53      	adds	r3, r2, #1
   85e18:	607b      	str	r3, [r7, #4]
   85e1a:	68bb      	ldr	r3, [r7, #8]
   85e1c:	1c59      	adds	r1, r3, #1
   85e1e:	60b9      	str	r1, [r7, #8]
   85e20:	7812      	ldrb	r2, [r2, #0]
   85e22:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   85e24:	7b7b      	ldrb	r3, [r7, #13]
   85e26:	3301      	adds	r3, #1
   85e28:	737b      	strb	r3, [r7, #13]
   85e2a:	7b7b      	ldrb	r3, [r7, #13]
   85e2c:	b29b      	uxth	r3, r3
   85e2e:	89fa      	ldrh	r2, [r7, #14]
   85e30:	429a      	cmp	r2, r3
   85e32:	d8ef      	bhi.n	85e14 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   85e34:	4b14      	ldr	r3, [pc, #80]	; (85e88 <udd_ctrl_in_sent+0x154>)
   85e36:	881a      	ldrh	r2, [r3, #0]
   85e38:	89fb      	ldrh	r3, [r7, #14]
   85e3a:	4413      	add	r3, r2
   85e3c:	b29a      	uxth	r2, r3
   85e3e:	4b12      	ldr	r3, [pc, #72]	; (85e88 <udd_ctrl_in_sent+0x154>)
   85e40:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   85e42:	4b0b      	ldr	r3, [pc, #44]	; (85e70 <udd_ctrl_in_sent+0x13c>)
   85e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85e48:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85e4c:	4b08      	ldr	r3, [pc, #32]	; (85e70 <udd_ctrl_in_sent+0x13c>)
   85e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85e52:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85e56:	4b06      	ldr	r3, [pc, #24]	; (85e70 <udd_ctrl_in_sent+0x13c>)
   85e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85e5c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   85e60:	6838      	ldr	r0, [r7, #0]
   85e62:	4b04      	ldr	r3, [pc, #16]	; (85e74 <udd_ctrl_in_sent+0x140>)
   85e64:	4798      	blx	r3
}
   85e66:	3710      	adds	r7, #16
   85e68:	46bd      	mov	sp, r7
   85e6a:	bd80      	pop	{r7, pc}
   85e6c:	00084bcd 	.word	0x00084bcd
   85e70:	400a4000 	.word	0x400a4000
   85e74:	00084c29 	.word	0x00084c29
   85e78:	20001345 	.word	0x20001345
   85e7c:	0008619d 	.word	0x0008619d
   85e80:	00085b99 	.word	0x00085b99
   85e84:	20001828 	.word	0x20001828
   85e88:	20001348 	.word	0x20001348
   85e8c:	20001346 	.word	0x20001346
   85e90:	2000137c 	.word	0x2000137c
   85e94:	00086159 	.word	0x00086159
   85e98:	20180000 	.word	0x20180000

00085e9c <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   85e9c:	b580      	push	{r7, lr}
   85e9e:	b084      	sub	sp, #16
   85ea0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   85ea2:	4b61      	ldr	r3, [pc, #388]	; (86028 <udd_ctrl_out_received+0x18c>)
   85ea4:	781b      	ldrb	r3, [r3, #0]
   85ea6:	2b01      	cmp	r3, #1
   85ea8:	d00f      	beq.n	85eca <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   85eaa:	4b5f      	ldr	r3, [pc, #380]	; (86028 <udd_ctrl_out_received+0x18c>)
   85eac:	781b      	ldrb	r3, [r3, #0]
   85eae:	2b02      	cmp	r3, #2
   85eb0:	d003      	beq.n	85eba <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   85eb2:	4b5d      	ldr	r3, [pc, #372]	; (86028 <udd_ctrl_out_received+0x18c>)
   85eb4:	781b      	ldrb	r3, [r3, #0]
   85eb6:	2b04      	cmp	r3, #4
   85eb8:	d102      	bne.n	85ec0 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   85eba:	4b5c      	ldr	r3, [pc, #368]	; (8602c <udd_ctrl_out_received+0x190>)
   85ebc:	4798      	blx	r3
   85ebe:	e001      	b.n	85ec4 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   85ec0:	4b5b      	ldr	r3, [pc, #364]	; (86030 <udd_ctrl_out_received+0x194>)
   85ec2:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   85ec4:	4b5b      	ldr	r3, [pc, #364]	; (86034 <udd_ctrl_out_received+0x198>)
   85ec6:	4798      	blx	r3
		return;
   85ec8:	e0ab      	b.n	86022 <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   85eca:	4b5b      	ldr	r3, [pc, #364]	; (86038 <udd_ctrl_out_received+0x19c>)
   85ecc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85ed0:	0d1b      	lsrs	r3, r3, #20
   85ed2:	b29b      	uxth	r3, r3
   85ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
   85ed8:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85eda:	4b58      	ldr	r3, [pc, #352]	; (8603c <udd_ctrl_out_received+0x1a0>)
   85edc:	899b      	ldrh	r3, [r3, #12]
   85ede:	461a      	mov	r2, r3
   85ee0:	4b57      	ldr	r3, [pc, #348]	; (86040 <udd_ctrl_out_received+0x1a4>)
   85ee2:	881b      	ldrh	r3, [r3, #0]
   85ee4:	4619      	mov	r1, r3
   85ee6:	89bb      	ldrh	r3, [r7, #12]
   85ee8:	440b      	add	r3, r1
   85eea:	429a      	cmp	r2, r3
   85eec:	da05      	bge.n	85efa <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85eee:	4b53      	ldr	r3, [pc, #332]	; (8603c <udd_ctrl_out_received+0x1a0>)
   85ef0:	899a      	ldrh	r2, [r3, #12]
   85ef2:	4b53      	ldr	r3, [pc, #332]	; (86040 <udd_ctrl_out_received+0x1a4>)
   85ef4:	881b      	ldrh	r3, [r3, #0]
   85ef6:	1ad3      	subs	r3, r2, r3
   85ef8:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85efa:	4b52      	ldr	r3, [pc, #328]	; (86044 <udd_ctrl_out_received+0x1a8>)
   85efc:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85efe:	4b4f      	ldr	r3, [pc, #316]	; (8603c <udd_ctrl_out_received+0x1a0>)
   85f00:	689b      	ldr	r3, [r3, #8]
   85f02:	4a4f      	ldr	r2, [pc, #316]	; (86040 <udd_ctrl_out_received+0x1a4>)
   85f04:	8812      	ldrh	r2, [r2, #0]
   85f06:	4413      	add	r3, r2
   85f08:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   85f0a:	2300      	movs	r3, #0
   85f0c:	73fb      	strb	r3, [r7, #15]
   85f0e:	e00a      	b.n	85f26 <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   85f10:	68ba      	ldr	r2, [r7, #8]
   85f12:	1c53      	adds	r3, r2, #1
   85f14:	60bb      	str	r3, [r7, #8]
   85f16:	687b      	ldr	r3, [r7, #4]
   85f18:	1c59      	adds	r1, r3, #1
   85f1a:	6079      	str	r1, [r7, #4]
   85f1c:	7812      	ldrb	r2, [r2, #0]
   85f1e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   85f20:	7bfb      	ldrb	r3, [r7, #15]
   85f22:	3301      	adds	r3, #1
   85f24:	73fb      	strb	r3, [r7, #15]
   85f26:	7bfb      	ldrb	r3, [r7, #15]
   85f28:	b29b      	uxth	r3, r3
   85f2a:	89ba      	ldrh	r2, [r7, #12]
   85f2c:	429a      	cmp	r2, r3
   85f2e:	d8ef      	bhi.n	85f10 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   85f30:	4b43      	ldr	r3, [pc, #268]	; (86040 <udd_ctrl_out_received+0x1a4>)
   85f32:	881a      	ldrh	r2, [r3, #0]
   85f34:	89bb      	ldrh	r3, [r7, #12]
   85f36:	4413      	add	r3, r2
   85f38:	b29a      	uxth	r2, r3
   85f3a:	4b41      	ldr	r3, [pc, #260]	; (86040 <udd_ctrl_out_received+0x1a4>)
   85f3c:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85f3e:	89bb      	ldrh	r3, [r7, #12]
   85f40:	2b40      	cmp	r3, #64	; 0x40
   85f42:	d10a      	bne.n	85f5a <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   85f44:	4b3d      	ldr	r3, [pc, #244]	; (8603c <udd_ctrl_out_received+0x1a0>)
   85f46:	88db      	ldrh	r3, [r3, #6]
   85f48:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   85f4a:	4b3f      	ldr	r3, [pc, #252]	; (86048 <udd_ctrl_out_received+0x1ac>)
   85f4c:	881b      	ldrh	r3, [r3, #0]
   85f4e:	4619      	mov	r1, r3
   85f50:	4b3b      	ldr	r3, [pc, #236]	; (86040 <udd_ctrl_out_received+0x1a4>)
   85f52:	881b      	ldrh	r3, [r3, #0]
   85f54:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   85f56:	429a      	cmp	r2, r3
   85f58:	dc20      	bgt.n	85f9c <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   85f5a:	4b39      	ldr	r3, [pc, #228]	; (86040 <udd_ctrl_out_received+0x1a4>)
   85f5c:	881a      	ldrh	r2, [r3, #0]
   85f5e:	4b37      	ldr	r3, [pc, #220]	; (8603c <udd_ctrl_out_received+0x1a0>)
   85f60:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85f62:	4b36      	ldr	r3, [pc, #216]	; (8603c <udd_ctrl_out_received+0x1a0>)
   85f64:	695b      	ldr	r3, [r3, #20]
   85f66:	2b00      	cmp	r3, #0
   85f68:	d010      	beq.n	85f8c <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   85f6a:	4b34      	ldr	r3, [pc, #208]	; (8603c <udd_ctrl_out_received+0x1a0>)
   85f6c:	695b      	ldr	r3, [r3, #20]
   85f6e:	4798      	blx	r3
   85f70:	4603      	mov	r3, r0
   85f72:	f083 0301 	eor.w	r3, r3, #1
   85f76:	b2db      	uxtb	r3, r3
   85f78:	2b00      	cmp	r3, #0
   85f7a:	d007      	beq.n	85f8c <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   85f7c:	4b2c      	ldr	r3, [pc, #176]	; (86030 <udd_ctrl_out_received+0x194>)
   85f7e:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   85f80:	4b2d      	ldr	r3, [pc, #180]	; (86038 <udd_ctrl_out_received+0x19c>)
   85f82:	f44f 7200 	mov.w	r2, #512	; 0x200
   85f86:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   85f8a:	e04a      	b.n	86022 <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   85f8c:	4b2a      	ldr	r3, [pc, #168]	; (86038 <udd_ctrl_out_received+0x19c>)
   85f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
   85f92:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   85f96:	4b2d      	ldr	r3, [pc, #180]	; (8604c <udd_ctrl_out_received+0x1b0>)
   85f98:	4798      	blx	r3
		return;
   85f9a:	e042      	b.n	86022 <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   85f9c:	4b27      	ldr	r3, [pc, #156]	; (8603c <udd_ctrl_out_received+0x1a0>)
   85f9e:	899a      	ldrh	r2, [r3, #12]
   85fa0:	4b27      	ldr	r3, [pc, #156]	; (86040 <udd_ctrl_out_received+0x1a4>)
   85fa2:	881b      	ldrh	r3, [r3, #0]
   85fa4:	429a      	cmp	r2, r3
   85fa6:	d127      	bne.n	85ff8 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   85fa8:	4b24      	ldr	r3, [pc, #144]	; (8603c <udd_ctrl_out_received+0x1a0>)
   85faa:	695b      	ldr	r3, [r3, #20]
   85fac:	2b00      	cmp	r3, #0
   85fae:	d107      	bne.n	85fc0 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   85fb0:	4b1f      	ldr	r3, [pc, #124]	; (86030 <udd_ctrl_out_received+0x194>)
   85fb2:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   85fb4:	4b20      	ldr	r3, [pc, #128]	; (86038 <udd_ctrl_out_received+0x19c>)
   85fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
   85fba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85fbe:	e030      	b.n	86022 <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   85fc0:	4b1e      	ldr	r3, [pc, #120]	; (8603c <udd_ctrl_out_received+0x1a0>)
   85fc2:	695b      	ldr	r3, [r3, #20]
   85fc4:	4798      	blx	r3
   85fc6:	4603      	mov	r3, r0
   85fc8:	f083 0301 	eor.w	r3, r3, #1
   85fcc:	b2db      	uxtb	r3, r3
   85fce:	2b00      	cmp	r3, #0
   85fd0:	d007      	beq.n	85fe2 <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   85fd2:	4b17      	ldr	r3, [pc, #92]	; (86030 <udd_ctrl_out_received+0x194>)
   85fd4:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   85fd6:	4b18      	ldr	r3, [pc, #96]	; (86038 <udd_ctrl_out_received+0x19c>)
   85fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
   85fdc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85fe0:	e01f      	b.n	86022 <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85fe2:	4b19      	ldr	r3, [pc, #100]	; (86048 <udd_ctrl_out_received+0x1ac>)
   85fe4:	881a      	ldrh	r2, [r3, #0]
   85fe6:	4b16      	ldr	r3, [pc, #88]	; (86040 <udd_ctrl_out_received+0x1a4>)
   85fe8:	881b      	ldrh	r3, [r3, #0]
   85fea:	4413      	add	r3, r2
   85fec:	b29a      	uxth	r2, r3
   85fee:	4b16      	ldr	r3, [pc, #88]	; (86048 <udd_ctrl_out_received+0x1ac>)
   85ff0:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   85ff2:	4b13      	ldr	r3, [pc, #76]	; (86040 <udd_ctrl_out_received+0x1a4>)
   85ff4:	2200      	movs	r2, #0
   85ff6:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   85ff8:	4b0f      	ldr	r3, [pc, #60]	; (86038 <udd_ctrl_out_received+0x19c>)
   85ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
   85ffe:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   86002:	4b0d      	ldr	r3, [pc, #52]	; (86038 <udd_ctrl_out_received+0x19c>)
   86004:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   86008:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   8600c:	4b10      	ldr	r3, [pc, #64]	; (86050 <udd_ctrl_out_received+0x1b4>)
   8600e:	4798      	blx	r3
   86010:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   86012:	4b09      	ldr	r3, [pc, #36]	; (86038 <udd_ctrl_out_received+0x19c>)
   86014:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   86018:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   8601c:	6838      	ldr	r0, [r7, #0]
   8601e:	4b0d      	ldr	r3, [pc, #52]	; (86054 <udd_ctrl_out_received+0x1b8>)
   86020:	4798      	blx	r3
}
   86022:	3710      	adds	r7, #16
   86024:	46bd      	mov	sp, r7
   86026:	bd80      	pop	{r7, pc}
   86028:	20001345 	.word	0x20001345
   8602c:	0008619d 	.word	0x0008619d
   86030:	000860d1 	.word	0x000860d1
   86034:	00085b99 	.word	0x00085b99
   86038:	400a4000 	.word	0x400a4000
   8603c:	20001828 	.word	0x20001828
   86040:	20001348 	.word	0x20001348
   86044:	20180000 	.word	0x20180000
   86048:	20001346 	.word	0x20001346
   8604c:	000860f5 	.word	0x000860f5
   86050:	00084bcd 	.word	0x00084bcd
   86054:	00084c29 	.word	0x00084c29

00086058 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   86058:	b580      	push	{r7, lr}
   8605a:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   8605c:	4b0c      	ldr	r3, [pc, #48]	; (86090 <udd_ctrl_underflow+0x38>)
   8605e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   86062:	f403 7300 	and.w	r3, r3, #512	; 0x200
   86066:	2b00      	cmp	r3, #0
   86068:	d10f      	bne.n	8608a <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   8606a:	4b0a      	ldr	r3, [pc, #40]	; (86094 <udd_ctrl_underflow+0x3c>)
   8606c:	781b      	ldrb	r3, [r3, #0]
   8606e:	2b01      	cmp	r3, #1
   86070:	d102      	bne.n	86078 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   86072:	4b09      	ldr	r3, [pc, #36]	; (86098 <udd_ctrl_underflow+0x40>)
   86074:	4798      	blx	r3
   86076:	e009      	b.n	8608c <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   86078:	4b06      	ldr	r3, [pc, #24]	; (86094 <udd_ctrl_underflow+0x3c>)
   8607a:	781b      	ldrb	r3, [r3, #0]
   8607c:	2b04      	cmp	r3, #4
   8607e:	d105      	bne.n	8608c <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   86080:	4b03      	ldr	r3, [pc, #12]	; (86090 <udd_ctrl_underflow+0x38>)
   86082:	2220      	movs	r2, #32
   86084:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   86088:	e000      	b.n	8608c <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   8608a:	bf00      	nop
	}
}
   8608c:	bd80      	pop	{r7, pc}
   8608e:	bf00      	nop
   86090:	400a4000 	.word	0x400a4000
   86094:	20001345 	.word	0x20001345
   86098:	000860f5 	.word	0x000860f5

0008609c <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   8609c:	b480      	push	{r7}
   8609e:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   860a0:	4b09      	ldr	r3, [pc, #36]	; (860c8 <udd_ctrl_overflow+0x2c>)
   860a2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   860a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   860aa:	2b00      	cmp	r3, #0
   860ac:	d108      	bne.n	860c0 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   860ae:	4b07      	ldr	r3, [pc, #28]	; (860cc <udd_ctrl_overflow+0x30>)
   860b0:	781b      	ldrb	r3, [r3, #0]
   860b2:	2b03      	cmp	r3, #3
   860b4:	d105      	bne.n	860c2 <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   860b6:	4b04      	ldr	r3, [pc, #16]	; (860c8 <udd_ctrl_overflow+0x2c>)
   860b8:	2220      	movs	r2, #32
   860ba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   860be:	e000      	b.n	860c2 <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   860c0:	bf00      	nop
	}
}
   860c2:	46bd      	mov	sp, r7
   860c4:	bc80      	pop	{r7}
   860c6:	4770      	bx	lr
   860c8:	400a4000 	.word	0x400a4000
   860cc:	20001345 	.word	0x20001345

000860d0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   860d0:	b480      	push	{r7}
   860d2:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   860d4:	4b05      	ldr	r3, [pc, #20]	; (860ec <udd_ctrl_stall_data+0x1c>)
   860d6:	2205      	movs	r2, #5
   860d8:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   860da:	4b05      	ldr	r3, [pc, #20]	; (860f0 <udd_ctrl_stall_data+0x20>)
   860dc:	2220      	movs	r2, #32
   860de:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   860e2:	bf00      	nop
   860e4:	46bd      	mov	sp, r7
   860e6:	bc80      	pop	{r7}
   860e8:	4770      	bx	lr
   860ea:	bf00      	nop
   860ec:	20001345 	.word	0x20001345
   860f0:	400a4000 	.word	0x400a4000

000860f4 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   860f4:	b580      	push	{r7, lr}
   860f6:	b082      	sub	sp, #8
   860f8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   860fa:	4b13      	ldr	r3, [pc, #76]	; (86148 <udd_ctrl_send_zlp_in+0x54>)
   860fc:	2203      	movs	r2, #3
   860fe:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   86100:	4b12      	ldr	r3, [pc, #72]	; (8614c <udd_ctrl_send_zlp_in+0x58>)
   86102:	4798      	blx	r3
   86104:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   86106:	4b12      	ldr	r3, [pc, #72]	; (86150 <udd_ctrl_send_zlp_in+0x5c>)
   86108:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8610c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   86110:	4b0f      	ldr	r3, [pc, #60]	; (86150 <udd_ctrl_send_zlp_in+0x5c>)
   86112:	f44f 6200 	mov.w	r2, #2048	; 0x800
   86116:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   8611a:	4b0d      	ldr	r3, [pc, #52]	; (86150 <udd_ctrl_send_zlp_in+0x5c>)
   8611c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   86120:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   86124:	4b0a      	ldr	r3, [pc, #40]	; (86150 <udd_ctrl_send_zlp_in+0x5c>)
   86126:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8612a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   8612e:	4b08      	ldr	r3, [pc, #32]	; (86150 <udd_ctrl_send_zlp_in+0x5c>)
   86130:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   86134:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   86138:	6878      	ldr	r0, [r7, #4]
   8613a:	4b06      	ldr	r3, [pc, #24]	; (86154 <udd_ctrl_send_zlp_in+0x60>)
   8613c:	4798      	blx	r3
}
   8613e:	bf00      	nop
   86140:	3708      	adds	r7, #8
   86142:	46bd      	mov	sp, r7
   86144:	bd80      	pop	{r7, pc}
   86146:	bf00      	nop
   86148:	20001345 	.word	0x20001345
   8614c:	00084bcd 	.word	0x00084bcd
   86150:	400a4000 	.word	0x400a4000
   86154:	00084c29 	.word	0x00084c29

00086158 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   86158:	b580      	push	{r7, lr}
   8615a:	b082      	sub	sp, #8
   8615c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8615e:	4b0b      	ldr	r3, [pc, #44]	; (8618c <udd_ctrl_send_zlp_out+0x34>)
   86160:	2204      	movs	r2, #4
   86162:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   86164:	4b0a      	ldr	r3, [pc, #40]	; (86190 <udd_ctrl_send_zlp_out+0x38>)
   86166:	4798      	blx	r3
   86168:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   8616a:	4b0a      	ldr	r3, [pc, #40]	; (86194 <udd_ctrl_send_zlp_out+0x3c>)
   8616c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   86170:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   86174:	4b07      	ldr	r3, [pc, #28]	; (86194 <udd_ctrl_send_zlp_out+0x3c>)
   86176:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8617a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   8617e:	6878      	ldr	r0, [r7, #4]
   86180:	4b05      	ldr	r3, [pc, #20]	; (86198 <udd_ctrl_send_zlp_out+0x40>)
   86182:	4798      	blx	r3
}
   86184:	bf00      	nop
   86186:	3708      	adds	r7, #8
   86188:	46bd      	mov	sp, r7
   8618a:	bd80      	pop	{r7, pc}
   8618c:	20001345 	.word	0x20001345
   86190:	00084bcd 	.word	0x00084bcd
   86194:	400a4000 	.word	0x400a4000
   86198:	00084c29 	.word	0x00084c29

0008619c <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   8619c:	b580      	push	{r7, lr}
   8619e:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   861a0:	4b04      	ldr	r3, [pc, #16]	; (861b4 <udd_ctrl_endofrequest+0x18>)
   861a2:	691b      	ldr	r3, [r3, #16]
   861a4:	2b00      	cmp	r3, #0
   861a6:	d002      	beq.n	861ae <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   861a8:	4b02      	ldr	r3, [pc, #8]	; (861b4 <udd_ctrl_endofrequest+0x18>)
   861aa:	691b      	ldr	r3, [r3, #16]
   861ac:	4798      	blx	r3
	}
}
   861ae:	bf00      	nop
   861b0:	bd80      	pop	{r7, pc}
   861b2:	bf00      	nop
   861b4:	20001828 	.word	0x20001828

000861b8 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   861b8:	b580      	push	{r7, lr}
   861ba:	b082      	sub	sp, #8
   861bc:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   861be:	4b31      	ldr	r3, [pc, #196]	; (86284 <udd_ctrl_interrupt+0xcc>)
   861c0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   861c4:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   861c6:	4b2f      	ldr	r3, [pc, #188]	; (86284 <udd_ctrl_interrupt+0xcc>)
   861c8:	695b      	ldr	r3, [r3, #20]
   861ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
   861ce:	2b00      	cmp	r3, #0
   861d0:	d101      	bne.n	861d6 <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   861d2:	2300      	movs	r3, #0
   861d4:	e052      	b.n	8627c <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   861d6:	4b2b      	ldr	r3, [pc, #172]	; (86284 <udd_ctrl_interrupt+0xcc>)
   861d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   861dc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   861e0:	4b28      	ldr	r3, [pc, #160]	; (86284 <udd_ctrl_interrupt+0xcc>)
   861e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   861e6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   861ea:	687b      	ldr	r3, [r7, #4]
   861ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   861f0:	2b00      	cmp	r3, #0
   861f2:	d003      	beq.n	861fc <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   861f4:	4b24      	ldr	r3, [pc, #144]	; (86288 <udd_ctrl_interrupt+0xd0>)
   861f6:	4798      	blx	r3
		return true;
   861f8:	2301      	movs	r3, #1
   861fa:	e03f      	b.n	8627c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   861fc:	687b      	ldr	r3, [r7, #4]
   861fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   86202:	2b00      	cmp	r3, #0
   86204:	d00a      	beq.n	8621c <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   86206:	4b1f      	ldr	r3, [pc, #124]	; (86284 <udd_ctrl_interrupt+0xcc>)
   86208:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   8620c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   86210:	2b00      	cmp	r3, #0
   86212:	d003      	beq.n	8621c <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   86214:	4b1d      	ldr	r3, [pc, #116]	; (8628c <udd_ctrl_interrupt+0xd4>)
   86216:	4798      	blx	r3
		return true;
   86218:	2301      	movs	r3, #1
   8621a:	e02f      	b.n	8627c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   8621c:	687b      	ldr	r3, [r7, #4]
   8621e:	f403 7300 	and.w	r3, r3, #512	; 0x200
   86222:	2b00      	cmp	r3, #0
   86224:	d003      	beq.n	8622e <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   86226:	4b1a      	ldr	r3, [pc, #104]	; (86290 <udd_ctrl_interrupt+0xd8>)
   86228:	4798      	blx	r3
		return true;
   8622a:	2301      	movs	r3, #1
   8622c:	e026      	b.n	8627c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   8622e:	687b      	ldr	r3, [r7, #4]
   86230:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   86234:	2b00      	cmp	r3, #0
   86236:	d004      	beq.n	86242 <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   86238:	4b12      	ldr	r3, [pc, #72]	; (86284 <udd_ctrl_interrupt+0xcc>)
   8623a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8623e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   86242:	687b      	ldr	r3, [r7, #4]
   86244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   86248:	2b00      	cmp	r3, #0
   8624a:	d008      	beq.n	8625e <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   8624c:	4b0d      	ldr	r3, [pc, #52]	; (86284 <udd_ctrl_interrupt+0xcc>)
   8624e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   86252:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   86256:	4b0f      	ldr	r3, [pc, #60]	; (86294 <udd_ctrl_interrupt+0xdc>)
   86258:	4798      	blx	r3
		return true;
   8625a:	2301      	movs	r3, #1
   8625c:	e00e      	b.n	8627c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   8625e:	687b      	ldr	r3, [r7, #4]
   86260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   86264:	2b00      	cmp	r3, #0
   86266:	d008      	beq.n	8627a <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   86268:	4b06      	ldr	r3, [pc, #24]	; (86284 <udd_ctrl_interrupt+0xcc>)
   8626a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8626e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   86272:	4b09      	ldr	r3, [pc, #36]	; (86298 <udd_ctrl_interrupt+0xe0>)
   86274:	4798      	blx	r3
		return true;
   86276:	2301      	movs	r3, #1
   86278:	e000      	b.n	8627c <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   8627a:	2300      	movs	r3, #0
}
   8627c:	4618      	mov	r0, r3
   8627e:	3708      	adds	r7, #8
   86280:	46bd      	mov	sp, r7
   86282:	bd80      	pop	{r7, pc}
   86284:	400a4000 	.word	0x400a4000
   86288:	00085bf5 	.word	0x00085bf5
   8628c:	00085d35 	.word	0x00085d35
   86290:	00085e9d 	.word	0x00085e9d
   86294:	0008609d 	.word	0x0008609d
   86298:	00086059 	.word	0x00086059

0008629c <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   8629c:	b480      	push	{r7}
   8629e:	b083      	sub	sp, #12
   862a0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   862a2:	2300      	movs	r3, #0
   862a4:	71fb      	strb	r3, [r7, #7]
   862a6:	e01c      	b.n	862e2 <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   862a8:	79fa      	ldrb	r2, [r7, #7]
   862aa:	4912      	ldr	r1, [pc, #72]	; (862f4 <udd_ep_job_table_reset+0x58>)
   862ac:	4613      	mov	r3, r2
   862ae:	005b      	lsls	r3, r3, #1
   862b0:	4413      	add	r3, r2
   862b2:	00db      	lsls	r3, r3, #3
   862b4:	440b      	add	r3, r1
   862b6:	f103 0210 	add.w	r2, r3, #16
   862ba:	7913      	ldrb	r3, [r2, #4]
   862bc:	f36f 0300 	bfc	r3, #0, #1
   862c0:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   862c2:	79fa      	ldrb	r2, [r7, #7]
   862c4:	490b      	ldr	r1, [pc, #44]	; (862f4 <udd_ep_job_table_reset+0x58>)
   862c6:	4613      	mov	r3, r2
   862c8:	005b      	lsls	r3, r3, #1
   862ca:	4413      	add	r3, r2
   862cc:	00db      	lsls	r3, r3, #3
   862ce:	440b      	add	r3, r1
   862d0:	f103 0210 	add.w	r2, r3, #16
   862d4:	7913      	ldrb	r3, [r2, #4]
   862d6:	f36f 0382 	bfc	r3, #2, #1
   862da:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   862dc:	79fb      	ldrb	r3, [r7, #7]
   862de:	3301      	adds	r3, #1
   862e0:	71fb      	strb	r3, [r7, #7]
   862e2:	79fb      	ldrb	r3, [r7, #7]
   862e4:	2b01      	cmp	r3, #1
   862e6:	d9df      	bls.n	862a8 <udd_ep_job_table_reset+0xc>
	}
}
   862e8:	bf00      	nop
   862ea:	bf00      	nop
   862ec:	370c      	adds	r7, #12
   862ee:	46bd      	mov	sp, r7
   862f0:	bc80      	pop	{r7}
   862f2:	4770      	bx	lr
   862f4:	2000134c 	.word	0x2000134c

000862f8 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   862f8:	b580      	push	{r7, lr}
   862fa:	b082      	sub	sp, #8
   862fc:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   862fe:	2300      	movs	r3, #0
   86300:	71fb      	strb	r3, [r7, #7]
   86302:	e010      	b.n	86326 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   86304:	79fa      	ldrb	r2, [r7, #7]
   86306:	4613      	mov	r3, r2
   86308:	005b      	lsls	r3, r3, #1
   8630a:	4413      	add	r3, r2
   8630c:	00db      	lsls	r3, r3, #3
   8630e:	4a0a      	ldr	r2, [pc, #40]	; (86338 <udd_ep_job_table_kill+0x40>)
   86310:	1898      	adds	r0, r3, r2
   86312:	79fb      	ldrb	r3, [r7, #7]
   86314:	3301      	adds	r3, #1
   86316:	b2db      	uxtb	r3, r3
   86318:	461a      	mov	r2, r3
   8631a:	2101      	movs	r1, #1
   8631c:	4b07      	ldr	r3, [pc, #28]	; (8633c <udd_ep_job_table_kill+0x44>)
   8631e:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   86320:	79fb      	ldrb	r3, [r7, #7]
   86322:	3301      	adds	r3, #1
   86324:	71fb      	strb	r3, [r7, #7]
   86326:	79fb      	ldrb	r3, [r7, #7]
   86328:	2b01      	cmp	r3, #1
   8632a:	d9eb      	bls.n	86304 <udd_ep_job_table_kill+0xc>
	}
}
   8632c:	bf00      	nop
   8632e:	bf00      	nop
   86330:	3708      	adds	r7, #8
   86332:	46bd      	mov	sp, r7
   86334:	bd80      	pop	{r7, pc}
   86336:	bf00      	nop
   86338:	2000134c 	.word	0x2000134c
   8633c:	0008637d 	.word	0x0008637d

00086340 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   86340:	b580      	push	{r7, lr}
   86342:	b082      	sub	sp, #8
   86344:	af00      	add	r7, sp, #0
   86346:	4603      	mov	r3, r0
   86348:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   8634a:	79fb      	ldrb	r3, [r7, #7]
   8634c:	f003 030f 	and.w	r3, r3, #15
   86350:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   86352:	79fb      	ldrb	r3, [r7, #7]
   86354:	1e5a      	subs	r2, r3, #1
   86356:	4613      	mov	r3, r2
   86358:	005b      	lsls	r3, r3, #1
   8635a:	4413      	add	r3, r2
   8635c:	00db      	lsls	r3, r3, #3
   8635e:	4a05      	ldr	r2, [pc, #20]	; (86374 <udd_ep_abort_job+0x34>)
   86360:	4413      	add	r3, r2
   86362:	79fa      	ldrb	r2, [r7, #7]
   86364:	2101      	movs	r1, #1
   86366:	4618      	mov	r0, r3
   86368:	4b03      	ldr	r3, [pc, #12]	; (86378 <udd_ep_abort_job+0x38>)
   8636a:	4798      	blx	r3
}
   8636c:	bf00      	nop
   8636e:	3708      	adds	r7, #8
   86370:	46bd      	mov	sp, r7
   86372:	bd80      	pop	{r7, pc}
   86374:	2000134c 	.word	0x2000134c
   86378:	0008637d 	.word	0x0008637d

0008637c <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   8637c:	b580      	push	{r7, lr}
   8637e:	b082      	sub	sp, #8
   86380:	af00      	add	r7, sp, #0
   86382:	6078      	str	r0, [r7, #4]
   86384:	460b      	mov	r3, r1
   86386:	70fb      	strb	r3, [r7, #3]
   86388:	4613      	mov	r3, r2
   8638a:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   8638c:	687b      	ldr	r3, [r7, #4]
   8638e:	7d1b      	ldrb	r3, [r3, #20]
   86390:	f003 0301 	and.w	r3, r3, #1
   86394:	b2db      	uxtb	r3, r3
   86396:	2b00      	cmp	r3, #0
   86398:	d01f      	beq.n	863da <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   8639a:	687a      	ldr	r2, [r7, #4]
   8639c:	7d13      	ldrb	r3, [r2, #20]
   8639e:	f36f 0300 	bfc	r3, #0, #1
   863a2:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   863a4:	687b      	ldr	r3, [r7, #4]
   863a6:	681b      	ldr	r3, [r3, #0]
   863a8:	2b00      	cmp	r3, #0
   863aa:	d018      	beq.n	863de <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   863ac:	4a0e      	ldr	r2, [pc, #56]	; (863e8 <udd_ep_finish_job+0x6c>)
   863ae:	78bb      	ldrb	r3, [r7, #2]
   863b0:	3308      	adds	r3, #8
   863b2:	015b      	lsls	r3, r3, #5
   863b4:	4413      	add	r3, r2
   863b6:	681b      	ldr	r3, [r3, #0]
   863b8:	f003 0308 	and.w	r3, r3, #8
   863bc:	2b00      	cmp	r3, #0
   863be:	d003      	beq.n	863c8 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   863c0:	78bb      	ldrb	r3, [r7, #2]
   863c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   863c6:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   863c8:	687b      	ldr	r3, [r7, #4]
   863ca:	681b      	ldr	r3, [r3, #0]
   863cc:	78fa      	ldrb	r2, [r7, #3]
   863ce:	4610      	mov	r0, r2
   863d0:	687a      	ldr	r2, [r7, #4]
   863d2:	6891      	ldr	r1, [r2, #8]
   863d4:	78ba      	ldrb	r2, [r7, #2]
   863d6:	4798      	blx	r3
   863d8:	e002      	b.n	863e0 <udd_ep_finish_job+0x64>
		return; // No on-going job
   863da:	bf00      	nop
   863dc:	e000      	b.n	863e0 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   863de:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   863e0:	3708      	adds	r7, #8
   863e2:	46bd      	mov	sp, r7
   863e4:	bd80      	pop	{r7, pc}
   863e6:	bf00      	nop
   863e8:	400a4000 	.word	0x400a4000

000863ec <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   863ec:	b580      	push	{r7, lr}
   863ee:	b086      	sub	sp, #24
   863f0:	af00      	add	r7, sp, #0
   863f2:	4603      	mov	r3, r0
   863f4:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   863f6:	2300      	movs	r3, #0
   863f8:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   863fa:	79fb      	ldrb	r3, [r7, #7]
   863fc:	1e5a      	subs	r2, r3, #1
   863fe:	4613      	mov	r3, r2
   86400:	005b      	lsls	r3, r3, #1
   86402:	4413      	add	r3, r2
   86404:	00db      	lsls	r3, r3, #3
   86406:	4a6d      	ldr	r2, [pc, #436]	; (865bc <udd_ep_trans_done+0x1d0>)
   86408:	4413      	add	r3, r2
   8640a:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   8640c:	68fb      	ldr	r3, [r7, #12]
   8640e:	7d1b      	ldrb	r3, [r3, #20]
   86410:	f003 0301 	and.w	r3, r3, #1
   86414:	b2db      	uxtb	r3, r3
   86416:	2b00      	cmp	r3, #0
   86418:	f000 80cc 	beq.w	865b4 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   8641c:	68fb      	ldr	r3, [r7, #12]
   8641e:	68da      	ldr	r2, [r3, #12]
   86420:	68fb      	ldr	r3, [r7, #12]
   86422:	689b      	ldr	r3, [r3, #8]
   86424:	429a      	cmp	r2, r3
   86426:	f000 8099 	beq.w	8655c <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8642a:	68fb      	ldr	r3, [r7, #12]
   8642c:	689a      	ldr	r2, [r3, #8]
   8642e:	68fb      	ldr	r3, [r7, #12]
   86430:	68db      	ldr	r3, [r3, #12]
   86432:	1ad3      	subs	r3, r2, r3
   86434:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   86436:	693b      	ldr	r3, [r7, #16]
   86438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8643c:	d905      	bls.n	8644a <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   8643e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   86442:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   86444:	2300      	movs	r3, #0
   86446:	617b      	str	r3, [r7, #20]
   86448:	e002      	b.n	86450 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   8644a:	693b      	ldr	r3, [r7, #16]
   8644c:	041b      	lsls	r3, r3, #16
   8644e:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   86450:	4a5b      	ldr	r2, [pc, #364]	; (865c0 <udd_ep_trans_done+0x1d4>)
   86452:	79fb      	ldrb	r3, [r7, #7]
   86454:	3308      	adds	r3, #8
   86456:	015b      	lsls	r3, r3, #5
   86458:	4413      	add	r3, r2
   8645a:	681b      	ldr	r3, [r3, #0]
   8645c:	f003 0308 	and.w	r3, r3, #8
   86460:	2b00      	cmp	r3, #0
   86462:	d01d      	beq.n	864a0 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   86464:	4a56      	ldr	r2, [pc, #344]	; (865c0 <udd_ep_trans_done+0x1d4>)
   86466:	79fb      	ldrb	r3, [r7, #7]
   86468:	3308      	adds	r3, #8
   8646a:	015b      	lsls	r3, r3, #5
   8646c:	4413      	add	r3, r2
   8646e:	681b      	ldr	r3, [r3, #0]
   86470:	f003 0307 	and.w	r3, r3, #7
   86474:	2208      	movs	r2, #8
   86476:	fa02 f303 	lsl.w	r3, r2, r3
   8647a:	461a      	mov	r2, r3
   8647c:	693b      	ldr	r3, [r7, #16]
   8647e:	fbb3 f1f2 	udiv	r1, r3, r2
   86482:	fb02 f201 	mul.w	r2, r2, r1
   86486:	1a9b      	subs	r3, r3, r2
   86488:	2b00      	cmp	r3, #0
   8648a:	d027      	beq.n	864dc <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   8648c:	697b      	ldr	r3, [r7, #20]
   8648e:	f043 0308 	orr.w	r3, r3, #8
   86492:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   86494:	68fa      	ldr	r2, [r7, #12]
   86496:	7d13      	ldrb	r3, [r2, #20]
   86498:	f36f 0341 	bfc	r3, #1, #1
   8649c:	7513      	strb	r3, [r2, #20]
   8649e:	e01d      	b.n	864dc <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   864a0:	4a47      	ldr	r2, [pc, #284]	; (865c0 <udd_ep_trans_done+0x1d4>)
   864a2:	79fb      	ldrb	r3, [r7, #7]
   864a4:	3308      	adds	r3, #8
   864a6:	015b      	lsls	r3, r3, #5
   864a8:	4413      	add	r3, r2
   864aa:	681b      	ldr	r3, [r3, #0]
   864ac:	091b      	lsrs	r3, r3, #4
   864ae:	f003 0303 	and.w	r3, r3, #3
   864b2:	2b01      	cmp	r3, #1
   864b4:	d10e      	bne.n	864d4 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   864b6:	4a42      	ldr	r2, [pc, #264]	; (865c0 <udd_ep_trans_done+0x1d4>)
   864b8:	79fb      	ldrb	r3, [r7, #7]
   864ba:	3308      	adds	r3, #8
   864bc:	015b      	lsls	r3, r3, #5
   864be:	4413      	add	r3, r2
   864c0:	681b      	ldr	r3, [r3, #0]
   864c2:	f003 0307 	and.w	r3, r3, #7
   864c6:	2208      	movs	r2, #8
   864c8:	fa02 f303 	lsl.w	r3, r2, r3
   864cc:	461a      	mov	r2, r3
   864ce:	693b      	ldr	r3, [r7, #16]
   864d0:	4293      	cmp	r3, r2
   864d2:	d803      	bhi.n	864dc <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   864d4:	697b      	ldr	r3, [r7, #20]
   864d6:	f043 0314 	orr.w	r3, r3, #20
   864da:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   864dc:	68fb      	ldr	r3, [r7, #12]
   864de:	685a      	ldr	r2, [r3, #4]
   864e0:	68fb      	ldr	r3, [r7, #12]
   864e2:	68db      	ldr	r3, [r3, #12]
   864e4:	18d1      	adds	r1, r2, r3
   864e6:	79fb      	ldrb	r3, [r7, #7]
   864e8:	011a      	lsls	r2, r3, #4
   864ea:	4b36      	ldr	r3, [pc, #216]	; (865c4 <udd_ep_trans_done+0x1d8>)
   864ec:	4413      	add	r3, r2
   864ee:	460a      	mov	r2, r1
   864f0:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   864f2:	697b      	ldr	r3, [r7, #20]
   864f4:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   864f8:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   864fa:	4b33      	ldr	r3, [pc, #204]	; (865c8 <udd_ep_trans_done+0x1dc>)
   864fc:	4798      	blx	r3
   864fe:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   86500:	79fb      	ldrb	r3, [r7, #7]
   86502:	011a      	lsls	r2, r3, #4
   86504:	4b2f      	ldr	r3, [pc, #188]	; (865c4 <udd_ep_trans_done+0x1d8>)
   86506:	4413      	add	r3, r2
   86508:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   8650a:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   8650e:	2b00      	cmp	r3, #0
   86510:	d11d      	bne.n	8654e <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   86512:	79fb      	ldrb	r3, [r7, #7]
   86514:	011a      	lsls	r2, r3, #4
   86516:	4b2b      	ldr	r3, [pc, #172]	; (865c4 <udd_ep_trans_done+0x1d8>)
   86518:	4413      	add	r3, r2
   8651a:	697a      	ldr	r2, [r7, #20]
   8651c:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   8651e:	68fb      	ldr	r3, [r7, #12]
   86520:	68da      	ldr	r2, [r3, #12]
   86522:	693b      	ldr	r3, [r7, #16]
   86524:	441a      	add	r2, r3
   86526:	68fb      	ldr	r3, [r7, #12]
   86528:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   8652a:	68fb      	ldr	r3, [r7, #12]
   8652c:	693a      	ldr	r2, [r7, #16]
   8652e:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   86530:	4b23      	ldr	r3, [pc, #140]	; (865c0 <udd_ep_trans_done+0x1d4>)
   86532:	691a      	ldr	r2, [r3, #16]
   86534:	79fb      	ldrb	r3, [r7, #7]
   86536:	3b01      	subs	r3, #1
   86538:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8653c:	fa01 f303 	lsl.w	r3, r1, r3
   86540:	491f      	ldr	r1, [pc, #124]	; (865c0 <udd_ep_trans_done+0x1d4>)
   86542:	4313      	orrs	r3, r2
   86544:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   86546:	68b8      	ldr	r0, [r7, #8]
   86548:	4b20      	ldr	r3, [pc, #128]	; (865cc <udd_ep_trans_done+0x1e0>)
   8654a:	4798      	blx	r3
			return;
   8654c:	e033      	b.n	865b6 <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   8654e:	68b8      	ldr	r0, [r7, #8]
   86550:	4b1e      	ldr	r3, [pc, #120]	; (865cc <udd_ep_trans_done+0x1e0>)
   86552:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   86554:	68fb      	ldr	r3, [r7, #12]
   86556:	68da      	ldr	r2, [r3, #12]
   86558:	68fb      	ldr	r3, [r7, #12]
   8655a:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   8655c:	4a18      	ldr	r2, [pc, #96]	; (865c0 <udd_ep_trans_done+0x1d4>)
   8655e:	79fb      	ldrb	r3, [r7, #7]
   86560:	3308      	adds	r3, #8
   86562:	015b      	lsls	r3, r3, #5
   86564:	4413      	add	r3, r2
   86566:	681b      	ldr	r3, [r3, #0]
   86568:	f003 0308 	and.w	r3, r3, #8
   8656c:	2b00      	cmp	r3, #0
   8656e:	d01a      	beq.n	865a6 <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   86570:	68fb      	ldr	r3, [r7, #12]
   86572:	7d1b      	ldrb	r3, [r3, #20]
   86574:	f003 0302 	and.w	r3, r3, #2
   86578:	b2db      	uxtb	r3, r3
   8657a:	2b00      	cmp	r3, #0
   8657c:	d013      	beq.n	865a6 <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   8657e:	4a10      	ldr	r2, [pc, #64]	; (865c0 <udd_ep_trans_done+0x1d4>)
   86580:	79fb      	ldrb	r3, [r7, #7]
   86582:	3308      	adds	r3, #8
   86584:	015b      	lsls	r3, r3, #5
   86586:	4413      	add	r3, r2
   86588:	3304      	adds	r3, #4
   8658a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8658e:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   86590:	4b0b      	ldr	r3, [pc, #44]	; (865c0 <udd_ep_trans_done+0x1d4>)
   86592:	691a      	ldr	r2, [r3, #16]
   86594:	79fb      	ldrb	r3, [r7, #7]
   86596:	f44f 7180 	mov.w	r1, #256	; 0x100
   8659a:	fa01 f303 	lsl.w	r3, r1, r3
   8659e:	4908      	ldr	r1, [pc, #32]	; (865c0 <udd_ep_trans_done+0x1d4>)
   865a0:	4313      	orrs	r3, r2
   865a2:	610b      	str	r3, [r1, #16]
			return;
   865a4:	e007      	b.n	865b6 <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   865a6:	79fb      	ldrb	r3, [r7, #7]
   865a8:	461a      	mov	r2, r3
   865aa:	2100      	movs	r1, #0
   865ac:	68f8      	ldr	r0, [r7, #12]
   865ae:	4b08      	ldr	r3, [pc, #32]	; (865d0 <udd_ep_trans_done+0x1e4>)
   865b0:	4798      	blx	r3
   865b2:	e000      	b.n	865b6 <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   865b4:	bf00      	nop
}
   865b6:	3718      	adds	r7, #24
   865b8:	46bd      	mov	sp, r7
   865ba:	bd80      	pop	{r7, pc}
   865bc:	2000134c 	.word	0x2000134c
   865c0:	400a4000 	.word	0x400a4000
   865c4:	400a4300 	.word	0x400a4300
   865c8:	00084bcd 	.word	0x00084bcd
   865cc:	00084c29 	.word	0x00084c29
   865d0:	0008637d 	.word	0x0008637d

000865d4 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   865d4:	b580      	push	{r7, lr}
   865d6:	b084      	sub	sp, #16
   865d8:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   865da:	2301      	movs	r3, #1
   865dc:	73fb      	strb	r3, [r7, #15]
   865de:	e0e0      	b.n	867a2 <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   865e0:	7bfb      	ldrb	r3, [r7, #15]
   865e2:	1e5a      	subs	r2, r3, #1
   865e4:	4613      	mov	r3, r2
   865e6:	005b      	lsls	r3, r3, #1
   865e8:	4413      	add	r3, r2
   865ea:	00db      	lsls	r3, r3, #3
   865ec:	4a71      	ldr	r2, [pc, #452]	; (867b4 <udd_ep_interrupt+0x1e0>)
   865ee:	4413      	add	r3, r2
   865f0:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   865f2:	4b71      	ldr	r3, [pc, #452]	; (867b8 <udd_ep_interrupt+0x1e4>)
   865f4:	691a      	ldr	r2, [r3, #16]
   865f6:	7bfb      	ldrb	r3, [r7, #15]
   865f8:	3b01      	subs	r3, #1
   865fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   865fe:	fa01 f303 	lsl.w	r3, r1, r3
   86602:	4013      	ands	r3, r2
   86604:	2b00      	cmp	r3, #0
   86606:	d03c      	beq.n	86682 <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   86608:	4b6b      	ldr	r3, [pc, #428]	; (867b8 <udd_ep_interrupt+0x1e4>)
   8660a:	695a      	ldr	r2, [r3, #20]
   8660c:	7bfb      	ldrb	r3, [r7, #15]
   8660e:	3b01      	subs	r3, #1
   86610:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   86614:	fa01 f303 	lsl.w	r3, r1, r3
   86618:	4013      	ands	r3, r2
   8661a:	2b00      	cmp	r3, #0
   8661c:	d031      	beq.n	86682 <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   8661e:	7bfb      	ldrb	r3, [r7, #15]
   86620:	011a      	lsls	r2, r3, #4
   86622:	4b66      	ldr	r3, [pc, #408]	; (867bc <udd_ep_interrupt+0x1e8>)
   86624:	4413      	add	r3, r2
   86626:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   86628:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   8662c:	2b00      	cmp	r3, #0
   8662e:	d001      	beq.n	86634 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   86630:	2301      	movs	r3, #1
   86632:	e0bb      	b.n	867ac <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   86634:	4b60      	ldr	r3, [pc, #384]	; (867b8 <udd_ep_interrupt+0x1e4>)
   86636:	691a      	ldr	r2, [r3, #16]
   86638:	7bfb      	ldrb	r3, [r7, #15]
   8663a:	3b01      	subs	r3, #1
   8663c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   86640:	fa01 f303 	lsl.w	r3, r1, r3
   86644:	43db      	mvns	r3, r3
   86646:	495c      	ldr	r1, [pc, #368]	; (867b8 <udd_ep_interrupt+0x1e4>)
   86648:	4013      	ands	r3, r2
   8664a:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8664c:	7bfb      	ldrb	r3, [r7, #15]
   8664e:	011a      	lsls	r2, r3, #4
   86650:	4b5a      	ldr	r3, [pc, #360]	; (867bc <udd_ep_interrupt+0x1e8>)
   86652:	4413      	add	r3, r2
   86654:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   86656:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   86658:	b29b      	uxth	r3, r3
   8665a:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   8665c:	687b      	ldr	r3, [r7, #4]
   8665e:	2b00      	cmp	r3, #0
   86660:	d009      	beq.n	86676 <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   86662:	68bb      	ldr	r3, [r7, #8]
   86664:	68da      	ldr	r2, [r3, #12]
   86666:	687b      	ldr	r3, [r7, #4]
   86668:	1ad2      	subs	r2, r2, r3
   8666a:	68bb      	ldr	r3, [r7, #8]
   8666c:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   8666e:	68bb      	ldr	r3, [r7, #8]
   86670:	68da      	ldr	r2, [r3, #12]
   86672:	68bb      	ldr	r3, [r7, #8]
   86674:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   86676:	7bfb      	ldrb	r3, [r7, #15]
   86678:	4618      	mov	r0, r3
   8667a:	4b51      	ldr	r3, [pc, #324]	; (867c0 <udd_ep_interrupt+0x1ec>)
   8667c:	4798      	blx	r3
			return true;
   8667e:	2301      	movs	r3, #1
   86680:	e094      	b.n	867ac <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   86682:	4b4d      	ldr	r3, [pc, #308]	; (867b8 <udd_ep_interrupt+0x1e4>)
   86684:	691a      	ldr	r2, [r3, #16]
   86686:	7bfb      	ldrb	r3, [r7, #15]
   86688:	f44f 7180 	mov.w	r1, #256	; 0x100
   8668c:	fa01 f303 	lsl.w	r3, r1, r3
   86690:	4013      	ands	r3, r2
   86692:	2b00      	cmp	r3, #0
   86694:	f000 8082 	beq.w	8679c <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   86698:	4a47      	ldr	r2, [pc, #284]	; (867b8 <udd_ep_interrupt+0x1e4>)
   8669a:	7bfb      	ldrb	r3, [r7, #15]
   8669c:	015b      	lsls	r3, r3, #5
   8669e:	4413      	add	r3, r2
   866a0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   866a4:	681b      	ldr	r3, [r3, #0]
   866a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   866aa:	2b00      	cmp	r3, #0
   866ac:	d024      	beq.n	866f8 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   866ae:	4a42      	ldr	r2, [pc, #264]	; (867b8 <udd_ep_interrupt+0x1e4>)
   866b0:	7bfb      	ldrb	r3, [r7, #15]
   866b2:	015b      	lsls	r3, r3, #5
   866b4:	4413      	add	r3, r2
   866b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   866ba:	681b      	ldr	r3, [r3, #0]
   866bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   866c0:	2b00      	cmp	r3, #0
   866c2:	d119      	bne.n	866f8 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   866c4:	4a3c      	ldr	r2, [pc, #240]	; (867b8 <udd_ep_interrupt+0x1e4>)
   866c6:	7bfb      	ldrb	r3, [r7, #15]
   866c8:	015b      	lsls	r3, r3, #5
   866ca:	4413      	add	r3, r2
   866cc:	f503 7384 	add.w	r3, r3, #264	; 0x108
   866d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   866d4:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   866d6:	4a38      	ldr	r2, [pc, #224]	; (867b8 <udd_ep_interrupt+0x1e4>)
   866d8:	7bfb      	ldrb	r3, [r7, #15]
   866da:	015b      	lsls	r3, r3, #5
   866dc:	4413      	add	r3, r2
   866de:	f503 738a 	add.w	r3, r3, #276	; 0x114
   866e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   866e6:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   866e8:	7bfb      	ldrb	r3, [r7, #15]
   866ea:	461a      	mov	r2, r3
   866ec:	2100      	movs	r1, #0
   866ee:	68b8      	ldr	r0, [r7, #8]
   866f0:	4b34      	ldr	r3, [pc, #208]	; (867c4 <udd_ep_interrupt+0x1f0>)
   866f2:	4798      	blx	r3
				return true;
   866f4:	2301      	movs	r3, #1
   866f6:	e059      	b.n	867ac <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   866f8:	4a2f      	ldr	r2, [pc, #188]	; (867b8 <udd_ep_interrupt+0x1e4>)
   866fa:	7bfb      	ldrb	r3, [r7, #15]
   866fc:	015b      	lsls	r3, r3, #5
   866fe:	4413      	add	r3, r2
   86700:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   86704:	681b      	ldr	r3, [r3, #0]
   86706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   8670a:	2b00      	cmp	r3, #0
   8670c:	d046      	beq.n	8679c <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   8670e:	4a2a      	ldr	r2, [pc, #168]	; (867b8 <udd_ep_interrupt+0x1e4>)
   86710:	7bfb      	ldrb	r3, [r7, #15]
   86712:	015b      	lsls	r3, r3, #5
   86714:	4413      	add	r3, r2
   86716:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8671a:	681b      	ldr	r3, [r3, #0]
   8671c:	0c9b      	lsrs	r3, r3, #18
   8671e:	f003 0303 	and.w	r3, r3, #3
   86722:	2b00      	cmp	r3, #0
   86724:	d13a      	bne.n	8679c <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   86726:	4a24      	ldr	r2, [pc, #144]	; (867b8 <udd_ep_interrupt+0x1e4>)
   86728:	7bfb      	ldrb	r3, [r7, #15]
   8672a:	015b      	lsls	r3, r3, #5
   8672c:	4413      	add	r3, r2
   8672e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   86732:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   86736:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   86738:	4b1f      	ldr	r3, [pc, #124]	; (867b8 <udd_ep_interrupt+0x1e4>)
   8673a:	691a      	ldr	r2, [r3, #16]
   8673c:	7bfb      	ldrb	r3, [r7, #15]
   8673e:	f44f 7180 	mov.w	r1, #256	; 0x100
   86742:	fa01 f303 	lsl.w	r3, r1, r3
   86746:	43db      	mvns	r3, r3
   86748:	491b      	ldr	r1, [pc, #108]	; (867b8 <udd_ep_interrupt+0x1e4>)
   8674a:	4013      	ands	r3, r2
   8674c:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   8674e:	68ba      	ldr	r2, [r7, #8]
   86750:	7d13      	ldrb	r3, [r2, #20]
   86752:	f36f 0382 	bfc	r3, #2, #1
   86756:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   86758:	4a17      	ldr	r2, [pc, #92]	; (867b8 <udd_ep_interrupt+0x1e4>)
   8675a:	7bfb      	ldrb	r3, [r7, #15]
   8675c:	015b      	lsls	r3, r3, #5
   8675e:	4413      	add	r3, r2
   86760:	f503 7384 	add.w	r3, r3, #264	; 0x108
   86764:	681a      	ldr	r2, [r3, #0]
   86766:	4914      	ldr	r1, [pc, #80]	; (867b8 <udd_ep_interrupt+0x1e4>)
   86768:	7bfb      	ldrb	r3, [r7, #15]
   8676a:	f022 0202 	bic.w	r2, r2, #2
   8676e:	015b      	lsls	r3, r3, #5
   86770:	440b      	add	r3, r1
   86772:	f503 7384 	add.w	r3, r3, #264	; 0x108
   86776:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   86778:	4a0f      	ldr	r2, [pc, #60]	; (867b8 <udd_ep_interrupt+0x1e4>)
   8677a:	7bfb      	ldrb	r3, [r7, #15]
   8677c:	015b      	lsls	r3, r3, #5
   8677e:	4413      	add	r3, r2
   86780:	f503 738a 	add.w	r3, r3, #276	; 0x114
   86784:	2220      	movs	r2, #32
   86786:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   86788:	4a0b      	ldr	r2, [pc, #44]	; (867b8 <udd_ep_interrupt+0x1e4>)
   8678a:	7bfb      	ldrb	r3, [r7, #15]
   8678c:	015b      	lsls	r3, r3, #5
   8678e:	4413      	add	r3, r2
   86790:	f503 738c 	add.w	r3, r3, #280	; 0x118
   86794:	2240      	movs	r2, #64	; 0x40
   86796:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   86798:	2301      	movs	r3, #1
   8679a:	e007      	b.n	867ac <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8679c:	7bfb      	ldrb	r3, [r7, #15]
   8679e:	3301      	adds	r3, #1
   867a0:	73fb      	strb	r3, [r7, #15]
   867a2:	7bfb      	ldrb	r3, [r7, #15]
   867a4:	2b02      	cmp	r3, #2
   867a6:	f67f af1b 	bls.w	865e0 <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   867aa:	2300      	movs	r3, #0
}
   867ac:	4618      	mov	r0, r3
   867ae:	3710      	adds	r7, #16
   867b0:	46bd      	mov	sp, r7
   867b2:	bd80      	pop	{r7, pc}
   867b4:	2000134c 	.word	0x2000134c
   867b8:	400a4000 	.word	0x400a4000
   867bc:	400a4300 	.word	0x400a4300
   867c0:	000863ed 	.word	0x000863ed
   867c4:	0008637d 	.word	0x0008637d

000867c8 <ui_init>:
#include <asf.h>
#include "ui.h"
#include "tasks.h"

void ui_init(void)
{
   867c8:	b580      	push	{r7, lr}
   867ca:	af00      	add	r7, sp, #0
	// Initialize LEDs
	LED_Off(LED0_GPIO);
   867cc:	201d      	movs	r0, #29
   867ce:	4b03      	ldr	r3, [pc, #12]	; (867dc <ui_init+0x14>)
   867d0:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   867d2:	201f      	movs	r0, #31
   867d4:	4b01      	ldr	r3, [pc, #4]	; (867dc <ui_init+0x14>)
   867d6:	4798      	blx	r3
	//LED_Off(LED2_GPIO);
}
   867d8:	bf00      	nop
   867da:	bd80      	pop	{r7, pc}
   867dc:	00082345 	.word	0x00082345

000867e0 <ui_powerdown>:


void ui_powerdown(void)
{
   867e0:	b580      	push	{r7, lr}
   867e2:	af00      	add	r7, sp, #0
	LED_Off(LED0_GPIO);
   867e4:	201d      	movs	r0, #29
   867e6:	4b03      	ldr	r3, [pc, #12]	; (867f4 <ui_powerdown+0x14>)
   867e8:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   867ea:	201f      	movs	r0, #31
   867ec:	4b01      	ldr	r3, [pc, #4]	; (867f4 <ui_powerdown+0x14>)
   867ee:	4798      	blx	r3
	
	// Power off FPGA
	//board_sram_pwroff();
}
   867f0:	bf00      	nop
   867f2:	bd80      	pop	{r7, pc}
   867f4:	00082345 	.word	0x00082345

000867f8 <ui_wakeup>:

void ui_wakeup(void)
{
   867f8:	b580      	push	{r7, lr}
   867fa:	af00      	add	r7, sp, #0
	LED_On(LED0_GPIO);
   867fc:	201d      	movs	r0, #29
   867fe:	4b02      	ldr	r3, [pc, #8]	; (86808 <ui_wakeup+0x10>)
   86800:	4798      	blx	r3
	//board_sram_pwron();
}
   86802:	bf00      	nop
   86804:	bd80      	pop	{r7, pc}
   86806:	bf00      	nop
   86808:	000823a1 	.word	0x000823a1

0008680c <ui_process>:

void ui_process(uint16_t framenumber)
{
   8680c:	b580      	push	{r7, lr}
   8680e:	b082      	sub	sp, #8
   86810:	af00      	add	r7, sp, #0
   86812:	4603      	mov	r3, r0
   86814:	80fb      	strh	r3, [r7, #6]
	if ((framenumber % 1000) == 0) {
   86816:	88fb      	ldrh	r3, [r7, #6]
   86818:	4a16      	ldr	r2, [pc, #88]	; (86874 <ui_process+0x68>)
   8681a:	fba2 1203 	umull	r1, r2, r2, r3
   8681e:	0992      	lsrs	r2, r2, #6
   86820:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   86824:	fb01 f202 	mul.w	r2, r1, r2
   86828:	1a9b      	subs	r3, r3, r2
   8682a:	b29b      	uxth	r3, r3
   8682c:	2b00      	cmp	r3, #0
   8682e:	d102      	bne.n	86836 <ui_process+0x2a>
		LED_On(LED0_GPIO);
   86830:	201d      	movs	r0, #29
   86832:	4b11      	ldr	r3, [pc, #68]	; (86878 <ui_process+0x6c>)
   86834:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
   86836:	88fb      	ldrh	r3, [r7, #6]
   86838:	4a0e      	ldr	r2, [pc, #56]	; (86874 <ui_process+0x68>)
   8683a:	fba2 1203 	umull	r1, r2, r2, r3
   8683e:	0992      	lsrs	r2, r2, #6
   86840:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   86844:	fb01 f202 	mul.w	r2, r1, r2
   86848:	1a9b      	subs	r3, r3, r2
   8684a:	b29b      	uxth	r3, r3
   8684c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   86850:	d102      	bne.n	86858 <ui_process+0x4c>
		LED_Off(LED0_GPIO);
   86852:	201d      	movs	r0, #29
   86854:	4b09      	ldr	r3, [pc, #36]	; (8687c <ui_process+0x70>)
   86856:	4798      	blx	r3
	}
	
	if ((framenumber % 512) == 0) {
   86858:	88fb      	ldrh	r3, [r7, #6]
   8685a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8685e:	b29b      	uxth	r3, r3
   86860:	2b00      	cmp	r3, #0
   86862:	d102      	bne.n	8686a <ui_process+0x5e>
		LED_Off(LED1_GPIO);
   86864:	201f      	movs	r0, #31
   86866:	4b05      	ldr	r3, [pc, #20]	; (8687c <ui_process+0x70>)
   86868:	4798      	blx	r3
		//LED_Off(LED2_GPIO);
	}
}
   8686a:	bf00      	nop
   8686c:	3708      	adds	r7, #8
   8686e:	46bd      	mov	sp, r7
   86870:	bd80      	pop	{r7, pc}
   86872:	bf00      	nop
   86874:	10624dd3 	.word	0x10624dd3
   86878:	000823a1 	.word	0x000823a1
   8687c:	00082345 	.word	0x00082345

00086880 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   86880:	b480      	push	{r7}
   86882:	b089      	sub	sp, #36	; 0x24
   86884:	af00      	add	r7, sp, #0
   86886:	60f8      	str	r0, [r7, #12]
   86888:	60b9      	str	r1, [r7, #8]
   8688a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   8688c:	68bb      	ldr	r3, [r7, #8]
   8688e:	011b      	lsls	r3, r3, #4
   86890:	687a      	ldr	r2, [r7, #4]
   86892:	429a      	cmp	r2, r3
   86894:	d302      	bcc.n	8689c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   86896:	2310      	movs	r3, #16
   86898:	61fb      	str	r3, [r7, #28]
   8689a:	e001      	b.n	868a0 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   8689c:	2308      	movs	r3, #8
   8689e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   868a0:	687b      	ldr	r3, [r7, #4]
   868a2:	00da      	lsls	r2, r3, #3
   868a4:	69fb      	ldr	r3, [r7, #28]
   868a6:	68b9      	ldr	r1, [r7, #8]
   868a8:	fb01 f303 	mul.w	r3, r1, r3
   868ac:	085b      	lsrs	r3, r3, #1
   868ae:	441a      	add	r2, r3
   868b0:	69fb      	ldr	r3, [r7, #28]
   868b2:	68b9      	ldr	r1, [r7, #8]
   868b4:	fb01 f303 	mul.w	r3, r1, r3
   868b8:	fbb2 f3f3 	udiv	r3, r2, r3
   868bc:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   868be:	69bb      	ldr	r3, [r7, #24]
   868c0:	08db      	lsrs	r3, r3, #3
   868c2:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   868c4:	69bb      	ldr	r3, [r7, #24]
   868c6:	f003 0307 	and.w	r3, r3, #7
   868ca:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   868cc:	697b      	ldr	r3, [r7, #20]
   868ce:	2b00      	cmp	r3, #0
   868d0:	d003      	beq.n	868da <usart_set_async_baudrate+0x5a>
   868d2:	697b      	ldr	r3, [r7, #20]
   868d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   868d8:	d301      	bcc.n	868de <usart_set_async_baudrate+0x5e>
		return 1;
   868da:	2301      	movs	r3, #1
   868dc:	e00f      	b.n	868fe <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   868de:	69fb      	ldr	r3, [r7, #28]
   868e0:	2b08      	cmp	r3, #8
   868e2:	d105      	bne.n	868f0 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   868e4:	68fb      	ldr	r3, [r7, #12]
   868e6:	685b      	ldr	r3, [r3, #4]
   868e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   868ec:	68fb      	ldr	r3, [r7, #12]
   868ee:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   868f0:	693b      	ldr	r3, [r7, #16]
   868f2:	041a      	lsls	r2, r3, #16
   868f4:	697b      	ldr	r3, [r7, #20]
   868f6:	431a      	orrs	r2, r3
   868f8:	68fb      	ldr	r3, [r7, #12]
   868fa:	621a      	str	r2, [r3, #32]

	return 0;
   868fc:	2300      	movs	r3, #0
}
   868fe:	4618      	mov	r0, r3
   86900:	3724      	adds	r7, #36	; 0x24
   86902:	46bd      	mov	sp, r7
   86904:	bc80      	pop	{r7}
   86906:	4770      	bx	lr

00086908 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   86908:	b480      	push	{r7}
   8690a:	b087      	sub	sp, #28
   8690c:	af00      	add	r7, sp, #0
   8690e:	60f8      	str	r0, [r7, #12]
   86910:	60b9      	str	r1, [r7, #8]
   86912:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   86914:	68bb      	ldr	r3, [r7, #8]
   86916:	085a      	lsrs	r2, r3, #1
   86918:	687b      	ldr	r3, [r7, #4]
   8691a:	441a      	add	r2, r3
   8691c:	68bb      	ldr	r3, [r7, #8]
   8691e:	fbb2 f3f3 	udiv	r3, r2, r3
   86922:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   86924:	697b      	ldr	r3, [r7, #20]
   86926:	2b03      	cmp	r3, #3
   86928:	d903      	bls.n	86932 <usart_set_spi_master_baudrate+0x2a>
   8692a:	697b      	ldr	r3, [r7, #20]
   8692c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   86930:	d301      	bcc.n	86936 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   86932:	2301      	movs	r3, #1
   86934:	e003      	b.n	8693e <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86936:	68fb      	ldr	r3, [r7, #12]
   86938:	697a      	ldr	r2, [r7, #20]
   8693a:	621a      	str	r2, [r3, #32]

	return 0;
   8693c:	2300      	movs	r3, #0
}
   8693e:	4618      	mov	r0, r3
   86940:	371c      	adds	r7, #28
   86942:	46bd      	mov	sp, r7
   86944:	bc80      	pop	{r7}
   86946:	4770      	bx	lr

00086948 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   86948:	b580      	push	{r7, lr}
   8694a:	b082      	sub	sp, #8
   8694c:	af00      	add	r7, sp, #0
   8694e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   86950:	6878      	ldr	r0, [r7, #4]
   86952:	4b0f      	ldr	r3, [pc, #60]	; (86990 <usart_reset+0x48>)
   86954:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   86956:	687b      	ldr	r3, [r7, #4]
   86958:	2200      	movs	r2, #0
   8695a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   8695c:	687b      	ldr	r3, [r7, #4]
   8695e:	2200      	movs	r2, #0
   86960:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   86962:	687b      	ldr	r3, [r7, #4]
   86964:	2200      	movs	r2, #0
   86966:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   86968:	6878      	ldr	r0, [r7, #4]
   8696a:	4b0a      	ldr	r3, [pc, #40]	; (86994 <usart_reset+0x4c>)
   8696c:	4798      	blx	r3
	usart_reset_rx(p_usart);
   8696e:	6878      	ldr	r0, [r7, #4]
   86970:	4b09      	ldr	r3, [pc, #36]	; (86998 <usart_reset+0x50>)
   86972:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   86974:	6878      	ldr	r0, [r7, #4]
   86976:	4b09      	ldr	r3, [pc, #36]	; (8699c <usart_reset+0x54>)
   86978:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8697a:	6878      	ldr	r0, [r7, #4]
   8697c:	4b08      	ldr	r3, [pc, #32]	; (869a0 <usart_reset+0x58>)
   8697e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   86980:	6878      	ldr	r0, [r7, #4]
   86982:	4b08      	ldr	r3, [pc, #32]	; (869a4 <usart_reset+0x5c>)
   86984:	4798      	blx	r3
#endif
}
   86986:	bf00      	nop
   86988:	3708      	adds	r7, #8
   8698a:	46bd      	mov	sp, r7
   8698c:	bd80      	pop	{r7, pc}
   8698e:	bf00      	nop
   86990:	00086c91 	.word	0x00086c91
   86994:	00086b55 	.word	0x00086b55
   86998:	00086b9d 	.word	0x00086b9d
   8699c:	00086c15 	.word	0x00086c15
   869a0:	00086c49 	.word	0x00086c49
   869a4:	00086c2f 	.word	0x00086c2f

000869a8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   869a8:	b580      	push	{r7, lr}
   869aa:	b084      	sub	sp, #16
   869ac:	af00      	add	r7, sp, #0
   869ae:	60f8      	str	r0, [r7, #12]
   869b0:	60b9      	str	r1, [r7, #8]
   869b2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   869b4:	68f8      	ldr	r0, [r7, #12]
   869b6:	4b1a      	ldr	r3, [pc, #104]	; (86a20 <usart_init_rs232+0x78>)
   869b8:	4798      	blx	r3

	ul_reg_val = 0;
   869ba:	4b1a      	ldr	r3, [pc, #104]	; (86a24 <usart_init_rs232+0x7c>)
   869bc:	2200      	movs	r2, #0
   869be:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   869c0:	68bb      	ldr	r3, [r7, #8]
   869c2:	2b00      	cmp	r3, #0
   869c4:	d009      	beq.n	869da <usart_init_rs232+0x32>
   869c6:	68bb      	ldr	r3, [r7, #8]
   869c8:	681b      	ldr	r3, [r3, #0]
   869ca:	687a      	ldr	r2, [r7, #4]
   869cc:	4619      	mov	r1, r3
   869ce:	68f8      	ldr	r0, [r7, #12]
   869d0:	4b15      	ldr	r3, [pc, #84]	; (86a28 <usart_init_rs232+0x80>)
   869d2:	4798      	blx	r3
   869d4:	4603      	mov	r3, r0
   869d6:	2b00      	cmp	r3, #0
   869d8:	d001      	beq.n	869de <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   869da:	2301      	movs	r3, #1
   869dc:	e01b      	b.n	86a16 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   869de:	68bb      	ldr	r3, [r7, #8]
   869e0:	685a      	ldr	r2, [r3, #4]
   869e2:	68bb      	ldr	r3, [r7, #8]
   869e4:	689b      	ldr	r3, [r3, #8]
   869e6:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   869e8:	68bb      	ldr	r3, [r7, #8]
   869ea:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   869ec:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   869ee:	68bb      	ldr	r3, [r7, #8]
   869f0:	68db      	ldr	r3, [r3, #12]
   869f2:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   869f4:	4b0b      	ldr	r3, [pc, #44]	; (86a24 <usart_init_rs232+0x7c>)
   869f6:	681b      	ldr	r3, [r3, #0]
   869f8:	4313      	orrs	r3, r2
   869fa:	4a0a      	ldr	r2, [pc, #40]	; (86a24 <usart_init_rs232+0x7c>)
   869fc:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   869fe:	4b09      	ldr	r3, [pc, #36]	; (86a24 <usart_init_rs232+0x7c>)
   86a00:	681b      	ldr	r3, [r3, #0]
   86a02:	4a08      	ldr	r2, [pc, #32]	; (86a24 <usart_init_rs232+0x7c>)
   86a04:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   86a06:	68fb      	ldr	r3, [r7, #12]
   86a08:	685a      	ldr	r2, [r3, #4]
   86a0a:	4b06      	ldr	r3, [pc, #24]	; (86a24 <usart_init_rs232+0x7c>)
   86a0c:	681b      	ldr	r3, [r3, #0]
   86a0e:	431a      	orrs	r2, r3
   86a10:	68fb      	ldr	r3, [r7, #12]
   86a12:	605a      	str	r2, [r3, #4]

	return 0;
   86a14:	2300      	movs	r3, #0
}
   86a16:	4618      	mov	r0, r3
   86a18:	3710      	adds	r7, #16
   86a1a:	46bd      	mov	sp, r7
   86a1c:	bd80      	pop	{r7, pc}
   86a1e:	bf00      	nop
   86a20:	00086949 	.word	0x00086949
   86a24:	20001380 	.word	0x20001380
   86a28:	00086881 	.word	0x00086881

00086a2c <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   86a2c:	b580      	push	{r7, lr}
   86a2e:	b084      	sub	sp, #16
   86a30:	af00      	add	r7, sp, #0
   86a32:	60f8      	str	r0, [r7, #12]
   86a34:	60b9      	str	r1, [r7, #8]
   86a36:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   86a38:	68f8      	ldr	r0, [r7, #12]
   86a3a:	4b3d      	ldr	r3, [pc, #244]	; (86b30 <usart_init_spi_master+0x104>)
   86a3c:	4798      	blx	r3

	ul_reg_val = 0;
   86a3e:	4b3d      	ldr	r3, [pc, #244]	; (86b34 <usart_init_spi_master+0x108>)
   86a40:	2200      	movs	r2, #0
   86a42:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   86a44:	68bb      	ldr	r3, [r7, #8]
   86a46:	2b00      	cmp	r3, #0
   86a48:	d00d      	beq.n	86a66 <usart_init_spi_master+0x3a>
   86a4a:	68bb      	ldr	r3, [r7, #8]
   86a4c:	689b      	ldr	r3, [r3, #8]
   86a4e:	2b03      	cmp	r3, #3
   86a50:	d809      	bhi.n	86a66 <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   86a52:	68bb      	ldr	r3, [r7, #8]
   86a54:	681b      	ldr	r3, [r3, #0]
   86a56:	687a      	ldr	r2, [r7, #4]
   86a58:	4619      	mov	r1, r3
   86a5a:	68f8      	ldr	r0, [r7, #12]
   86a5c:	4b36      	ldr	r3, [pc, #216]	; (86b38 <usart_init_spi_master+0x10c>)
   86a5e:	4798      	blx	r3
   86a60:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   86a62:	2b00      	cmp	r3, #0
   86a64:	d001      	beq.n	86a6a <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   86a66:	2301      	movs	r3, #1
   86a68:	e05d      	b.n	86b26 <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   86a6a:	68bb      	ldr	r3, [r7, #8]
   86a6c:	685a      	ldr	r2, [r3, #4]
   86a6e:	4b31      	ldr	r3, [pc, #196]	; (86b34 <usart_init_spi_master+0x108>)
   86a70:	681b      	ldr	r3, [r3, #0]
   86a72:	4313      	orrs	r3, r2
   86a74:	4a2f      	ldr	r2, [pc, #188]	; (86b34 <usart_init_spi_master+0x108>)
   86a76:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   86a78:	68bb      	ldr	r3, [r7, #8]
   86a7a:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   86a7c:	4b2d      	ldr	r3, [pc, #180]	; (86b34 <usart_init_spi_master+0x108>)
   86a7e:	681b      	ldr	r3, [r3, #0]
   86a80:	4313      	orrs	r3, r2
   86a82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   86a86:	f043 030e 	orr.w	r3, r3, #14
   86a8a:	4a2a      	ldr	r2, [pc, #168]	; (86b34 <usart_init_spi_master+0x108>)
   86a8c:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   86a8e:	68bb      	ldr	r3, [r7, #8]
   86a90:	689b      	ldr	r3, [r3, #8]
   86a92:	2b03      	cmp	r3, #3
   86a94:	d83e      	bhi.n	86b14 <usart_init_spi_master+0xe8>
   86a96:	a201      	add	r2, pc, #4	; (adr r2, 86a9c <usart_init_spi_master+0x70>)
   86a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86a9c:	00086aad 	.word	0x00086aad
   86aa0:	00086ac7 	.word	0x00086ac7
   86aa4:	00086ae1 	.word	0x00086ae1
   86aa8:	00086afb 	.word	0x00086afb
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   86aac:	4b21      	ldr	r3, [pc, #132]	; (86b34 <usart_init_spi_master+0x108>)
   86aae:	681b      	ldr	r3, [r3, #0]
   86ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86ab4:	4a1f      	ldr	r2, [pc, #124]	; (86b34 <usart_init_spi_master+0x108>)
   86ab6:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   86ab8:	4b1e      	ldr	r3, [pc, #120]	; (86b34 <usart_init_spi_master+0x108>)
   86aba:	681b      	ldr	r3, [r3, #0]
   86abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86ac0:	4a1c      	ldr	r2, [pc, #112]	; (86b34 <usart_init_spi_master+0x108>)
   86ac2:	6013      	str	r3, [r2, #0]
		break;
   86ac4:	e027      	b.n	86b16 <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   86ac6:	4b1b      	ldr	r3, [pc, #108]	; (86b34 <usart_init_spi_master+0x108>)
   86ac8:	681b      	ldr	r3, [r3, #0]
   86aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86ace:	4a19      	ldr	r2, [pc, #100]	; (86b34 <usart_init_spi_master+0x108>)
   86ad0:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   86ad2:	4b18      	ldr	r3, [pc, #96]	; (86b34 <usart_init_spi_master+0x108>)
   86ad4:	681b      	ldr	r3, [r3, #0]
   86ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86ada:	4a16      	ldr	r2, [pc, #88]	; (86b34 <usart_init_spi_master+0x108>)
   86adc:	6013      	str	r3, [r2, #0]
		break;
   86ade:	e01a      	b.n	86b16 <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   86ae0:	4b14      	ldr	r3, [pc, #80]	; (86b34 <usart_init_spi_master+0x108>)
   86ae2:	681b      	ldr	r3, [r3, #0]
   86ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86ae8:	4a12      	ldr	r2, [pc, #72]	; (86b34 <usart_init_spi_master+0x108>)
   86aea:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   86aec:	4b11      	ldr	r3, [pc, #68]	; (86b34 <usart_init_spi_master+0x108>)
   86aee:	681b      	ldr	r3, [r3, #0]
   86af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86af4:	4a0f      	ldr	r2, [pc, #60]	; (86b34 <usart_init_spi_master+0x108>)
   86af6:	6013      	str	r3, [r2, #0]
		break;
   86af8:	e00d      	b.n	86b16 <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   86afa:	4b0e      	ldr	r3, [pc, #56]	; (86b34 <usart_init_spi_master+0x108>)
   86afc:	681b      	ldr	r3, [r3, #0]
   86afe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86b02:	4a0c      	ldr	r2, [pc, #48]	; (86b34 <usart_init_spi_master+0x108>)
   86b04:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   86b06:	4b0b      	ldr	r3, [pc, #44]	; (86b34 <usart_init_spi_master+0x108>)
   86b08:	681b      	ldr	r3, [r3, #0]
   86b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86b0e:	4a09      	ldr	r2, [pc, #36]	; (86b34 <usart_init_spi_master+0x108>)
   86b10:	6013      	str	r3, [r2, #0]
		break;
   86b12:	e000      	b.n	86b16 <usart_init_spi_master+0xea>

	default:
		break;
   86b14:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   86b16:	68fb      	ldr	r3, [r7, #12]
   86b18:	685a      	ldr	r2, [r3, #4]
   86b1a:	4b06      	ldr	r3, [pc, #24]	; (86b34 <usart_init_spi_master+0x108>)
   86b1c:	681b      	ldr	r3, [r3, #0]
   86b1e:	431a      	orrs	r2, r3
   86b20:	68fb      	ldr	r3, [r7, #12]
   86b22:	605a      	str	r2, [r3, #4]

	return 0;
   86b24:	2300      	movs	r3, #0
}
   86b26:	4618      	mov	r0, r3
   86b28:	3710      	adds	r7, #16
   86b2a:	46bd      	mov	sp, r7
   86b2c:	bd80      	pop	{r7, pc}
   86b2e:	bf00      	nop
   86b30:	00086949 	.word	0x00086949
   86b34:	20001384 	.word	0x20001384
   86b38:	00086909 	.word	0x00086909

00086b3c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   86b3c:	b480      	push	{r7}
   86b3e:	b083      	sub	sp, #12
   86b40:	af00      	add	r7, sp, #0
   86b42:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   86b44:	687b      	ldr	r3, [r7, #4]
   86b46:	2240      	movs	r2, #64	; 0x40
   86b48:	601a      	str	r2, [r3, #0]
}
   86b4a:	bf00      	nop
   86b4c:	370c      	adds	r7, #12
   86b4e:	46bd      	mov	sp, r7
   86b50:	bc80      	pop	{r7}
   86b52:	4770      	bx	lr

00086b54 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   86b54:	b480      	push	{r7}
   86b56:	b083      	sub	sp, #12
   86b58:	af00      	add	r7, sp, #0
   86b5a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   86b5c:	687b      	ldr	r3, [r7, #4]
   86b5e:	2288      	movs	r2, #136	; 0x88
   86b60:	601a      	str	r2, [r3, #0]
}
   86b62:	bf00      	nop
   86b64:	370c      	adds	r7, #12
   86b66:	46bd      	mov	sp, r7
   86b68:	bc80      	pop	{r7}
   86b6a:	4770      	bx	lr

00086b6c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   86b6c:	b480      	push	{r7}
   86b6e:	b083      	sub	sp, #12
   86b70:	af00      	add	r7, sp, #0
   86b72:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   86b74:	687b      	ldr	r3, [r7, #4]
   86b76:	2210      	movs	r2, #16
   86b78:	601a      	str	r2, [r3, #0]
}
   86b7a:	bf00      	nop
   86b7c:	370c      	adds	r7, #12
   86b7e:	46bd      	mov	sp, r7
   86b80:	bc80      	pop	{r7}
   86b82:	4770      	bx	lr

00086b84 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   86b84:	b480      	push	{r7}
   86b86:	b083      	sub	sp, #12
   86b88:	af00      	add	r7, sp, #0
   86b8a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   86b8c:	687b      	ldr	r3, [r7, #4]
   86b8e:	2220      	movs	r2, #32
   86b90:	601a      	str	r2, [r3, #0]
}
   86b92:	bf00      	nop
   86b94:	370c      	adds	r7, #12
   86b96:	46bd      	mov	sp, r7
   86b98:	bc80      	pop	{r7}
   86b9a:	4770      	bx	lr

00086b9c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   86b9c:	b480      	push	{r7}
   86b9e:	b083      	sub	sp, #12
   86ba0:	af00      	add	r7, sp, #0
   86ba2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   86ba4:	687b      	ldr	r3, [r7, #4]
   86ba6:	2224      	movs	r2, #36	; 0x24
   86ba8:	601a      	str	r2, [r3, #0]
}
   86baa:	bf00      	nop
   86bac:	370c      	adds	r7, #12
   86bae:	46bd      	mov	sp, r7
   86bb0:	bc80      	pop	{r7}
   86bb2:	4770      	bx	lr

00086bb4 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   86bb4:	b480      	push	{r7}
   86bb6:	b083      	sub	sp, #12
   86bb8:	af00      	add	r7, sp, #0
   86bba:	6078      	str	r0, [r7, #4]
   86bbc:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   86bbe:	687b      	ldr	r3, [r7, #4]
   86bc0:	683a      	ldr	r2, [r7, #0]
   86bc2:	609a      	str	r2, [r3, #8]
}
   86bc4:	bf00      	nop
   86bc6:	370c      	adds	r7, #12
   86bc8:	46bd      	mov	sp, r7
   86bca:	bc80      	pop	{r7}
   86bcc:	4770      	bx	lr

00086bce <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   86bce:	b480      	push	{r7}
   86bd0:	b083      	sub	sp, #12
   86bd2:	af00      	add	r7, sp, #0
   86bd4:	6078      	str	r0, [r7, #4]
   86bd6:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   86bd8:	687b      	ldr	r3, [r7, #4]
   86bda:	683a      	ldr	r2, [r7, #0]
   86bdc:	60da      	str	r2, [r3, #12]
}
   86bde:	bf00      	nop
   86be0:	370c      	adds	r7, #12
   86be2:	46bd      	mov	sp, r7
   86be4:	bc80      	pop	{r7}
   86be6:	4770      	bx	lr

00086be8 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   86be8:	b480      	push	{r7}
   86bea:	b083      	sub	sp, #12
   86bec:	af00      	add	r7, sp, #0
   86bee:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   86bf0:	687b      	ldr	r3, [r7, #4]
   86bf2:	691b      	ldr	r3, [r3, #16]
}
   86bf4:	4618      	mov	r0, r3
   86bf6:	370c      	adds	r7, #12
   86bf8:	46bd      	mov	sp, r7
   86bfa:	bc80      	pop	{r7}
   86bfc:	4770      	bx	lr

00086bfe <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   86bfe:	b480      	push	{r7}
   86c00:	b083      	sub	sp, #12
   86c02:	af00      	add	r7, sp, #0
   86c04:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   86c06:	687b      	ldr	r3, [r7, #4]
   86c08:	695b      	ldr	r3, [r3, #20]
}
   86c0a:	4618      	mov	r0, r3
   86c0c:	370c      	adds	r7, #12
   86c0e:	46bd      	mov	sp, r7
   86c10:	bc80      	pop	{r7}
   86c12:	4770      	bx	lr

00086c14 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   86c14:	b480      	push	{r7}
   86c16:	b083      	sub	sp, #12
   86c18:	af00      	add	r7, sp, #0
   86c1a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   86c1c:	687b      	ldr	r3, [r7, #4]
   86c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
   86c22:	601a      	str	r2, [r3, #0]
}
   86c24:	bf00      	nop
   86c26:	370c      	adds	r7, #12
   86c28:	46bd      	mov	sp, r7
   86c2a:	bc80      	pop	{r7}
   86c2c:	4770      	bx	lr

00086c2e <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   86c2e:	b480      	push	{r7}
   86c30:	b083      	sub	sp, #12
   86c32:	af00      	add	r7, sp, #0
   86c34:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   86c36:	687b      	ldr	r3, [r7, #4]
   86c38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   86c3c:	601a      	str	r2, [r3, #0]
}
   86c3e:	bf00      	nop
   86c40:	370c      	adds	r7, #12
   86c42:	46bd      	mov	sp, r7
   86c44:	bc80      	pop	{r7}
   86c46:	4770      	bx	lr

00086c48 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   86c48:	b480      	push	{r7}
   86c4a:	b083      	sub	sp, #12
   86c4c:	af00      	add	r7, sp, #0
   86c4e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   86c50:	687b      	ldr	r3, [r7, #4]
   86c52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   86c56:	601a      	str	r2, [r3, #0]
}
   86c58:	bf00      	nop
   86c5a:	370c      	adds	r7, #12
   86c5c:	46bd      	mov	sp, r7
   86c5e:	bc80      	pop	{r7}
   86c60:	4770      	bx	lr

00086c62 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   86c62:	b480      	push	{r7}
   86c64:	b083      	sub	sp, #12
   86c66:	af00      	add	r7, sp, #0
   86c68:	6078      	str	r0, [r7, #4]
   86c6a:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86c6c:	bf00      	nop
   86c6e:	687b      	ldr	r3, [r7, #4]
   86c70:	695b      	ldr	r3, [r3, #20]
   86c72:	f003 0302 	and.w	r3, r3, #2
   86c76:	2b00      	cmp	r3, #0
   86c78:	d0f9      	beq.n	86c6e <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   86c7a:	683b      	ldr	r3, [r7, #0]
   86c7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   86c80:	687b      	ldr	r3, [r7, #4]
   86c82:	61da      	str	r2, [r3, #28]

	return 0;
   86c84:	2300      	movs	r3, #0
}
   86c86:	4618      	mov	r0, r3
   86c88:	370c      	adds	r7, #12
   86c8a:	46bd      	mov	sp, r7
   86c8c:	bc80      	pop	{r7}
   86c8e:	4770      	bx	lr

00086c90 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   86c90:	b480      	push	{r7}
   86c92:	b083      	sub	sp, #12
   86c94:	af00      	add	r7, sp, #0
   86c96:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   86c98:	687b      	ldr	r3, [r7, #4]
   86c9a:	4a04      	ldr	r2, [pc, #16]	; (86cac <usart_disable_writeprotect+0x1c>)
   86c9c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   86ca0:	bf00      	nop
   86ca2:	370c      	adds	r7, #12
   86ca4:	46bd      	mov	sp, r7
   86ca6:	bc80      	pop	{r7}
   86ca8:	4770      	bx	lr
   86caa:	bf00      	nop
   86cac:	55534100 	.word	0x55534100

00086cb0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   86cb0:	b580      	push	{r7, lr}
   86cb2:	b086      	sub	sp, #24
   86cb4:	af00      	add	r7, sp, #0
   86cb6:	60f8      	str	r0, [r7, #12]
   86cb8:	60b9      	str	r1, [r7, #8]
   86cba:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   86cbc:	2300      	movs	r3, #0
   86cbe:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   86cc0:	68fb      	ldr	r3, [r7, #12]
   86cc2:	2b01      	cmp	r3, #1
   86cc4:	d01e      	beq.n	86d04 <_write+0x54>
   86cc6:	68fb      	ldr	r3, [r7, #12]
   86cc8:	2b02      	cmp	r3, #2
   86cca:	d01b      	beq.n	86d04 <_write+0x54>
   86ccc:	68fb      	ldr	r3, [r7, #12]
   86cce:	2b03      	cmp	r3, #3
   86cd0:	d018      	beq.n	86d04 <_write+0x54>
		return -1;
   86cd2:	f04f 33ff 	mov.w	r3, #4294967295
   86cd6:	e019      	b.n	86d0c <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   86cd8:	4b0e      	ldr	r3, [pc, #56]	; (86d14 <_write+0x64>)
   86cda:	681a      	ldr	r2, [r3, #0]
   86cdc:	4b0e      	ldr	r3, [pc, #56]	; (86d18 <_write+0x68>)
   86cde:	6818      	ldr	r0, [r3, #0]
   86ce0:	68bb      	ldr	r3, [r7, #8]
   86ce2:	1c59      	adds	r1, r3, #1
   86ce4:	60b9      	str	r1, [r7, #8]
   86ce6:	781b      	ldrb	r3, [r3, #0]
   86ce8:	4619      	mov	r1, r3
   86cea:	4790      	blx	r2
   86cec:	4603      	mov	r3, r0
   86cee:	2b00      	cmp	r3, #0
   86cf0:	da02      	bge.n	86cf8 <_write+0x48>
			return -1;
   86cf2:	f04f 33ff 	mov.w	r3, #4294967295
   86cf6:	e009      	b.n	86d0c <_write+0x5c>
		}
		++nChars;
   86cf8:	697b      	ldr	r3, [r7, #20]
   86cfa:	3301      	adds	r3, #1
   86cfc:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   86cfe:	687b      	ldr	r3, [r7, #4]
   86d00:	3b01      	subs	r3, #1
   86d02:	607b      	str	r3, [r7, #4]
   86d04:	687b      	ldr	r3, [r7, #4]
   86d06:	2b00      	cmp	r3, #0
   86d08:	d1e6      	bne.n	86cd8 <_write+0x28>
	}
	return nChars;
   86d0a:	697b      	ldr	r3, [r7, #20]
}
   86d0c:	4618      	mov	r0, r3
   86d0e:	3718      	adds	r7, #24
   86d10:	46bd      	mov	sp, r7
   86d12:	bd80      	pop	{r7, pc}
   86d14:	20001840 	.word	0x20001840
   86d18:	20001844 	.word	0x20001844

00086d1c <__aeabi_uldivmod>:
   86d1c:	b953      	cbnz	r3, 86d34 <__aeabi_uldivmod+0x18>
   86d1e:	b94a      	cbnz	r2, 86d34 <__aeabi_uldivmod+0x18>
   86d20:	2900      	cmp	r1, #0
   86d22:	bf08      	it	eq
   86d24:	2800      	cmpeq	r0, #0
   86d26:	bf1c      	itt	ne
   86d28:	f04f 31ff 	movne.w	r1, #4294967295
   86d2c:	f04f 30ff 	movne.w	r0, #4294967295
   86d30:	f000 b96e 	b.w	87010 <__aeabi_idiv0>
   86d34:	f1ad 0c08 	sub.w	ip, sp, #8
   86d38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   86d3c:	f000 f806 	bl	86d4c <__udivmoddi4>
   86d40:	f8dd e004 	ldr.w	lr, [sp, #4]
   86d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   86d48:	b004      	add	sp, #16
   86d4a:	4770      	bx	lr

00086d4c <__udivmoddi4>:
   86d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86d50:	9e08      	ldr	r6, [sp, #32]
   86d52:	460d      	mov	r5, r1
   86d54:	4604      	mov	r4, r0
   86d56:	468e      	mov	lr, r1
   86d58:	2b00      	cmp	r3, #0
   86d5a:	f040 8083 	bne.w	86e64 <__udivmoddi4+0x118>
   86d5e:	428a      	cmp	r2, r1
   86d60:	4617      	mov	r7, r2
   86d62:	d947      	bls.n	86df4 <__udivmoddi4+0xa8>
   86d64:	fab2 f382 	clz	r3, r2
   86d68:	b14b      	cbz	r3, 86d7e <__udivmoddi4+0x32>
   86d6a:	f1c3 0120 	rsb	r1, r3, #32
   86d6e:	fa05 fe03 	lsl.w	lr, r5, r3
   86d72:	fa20 f101 	lsr.w	r1, r0, r1
   86d76:	409f      	lsls	r7, r3
   86d78:	ea41 0e0e 	orr.w	lr, r1, lr
   86d7c:	409c      	lsls	r4, r3
   86d7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   86d82:	fbbe fcf8 	udiv	ip, lr, r8
   86d86:	fa1f f987 	uxth.w	r9, r7
   86d8a:	fb08 e21c 	mls	r2, r8, ip, lr
   86d8e:	fb0c f009 	mul.w	r0, ip, r9
   86d92:	0c21      	lsrs	r1, r4, #16
   86d94:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   86d98:	4290      	cmp	r0, r2
   86d9a:	d90a      	bls.n	86db2 <__udivmoddi4+0x66>
   86d9c:	18ba      	adds	r2, r7, r2
   86d9e:	f10c 31ff 	add.w	r1, ip, #4294967295
   86da2:	f080 8118 	bcs.w	86fd6 <__udivmoddi4+0x28a>
   86da6:	4290      	cmp	r0, r2
   86da8:	f240 8115 	bls.w	86fd6 <__udivmoddi4+0x28a>
   86dac:	f1ac 0c02 	sub.w	ip, ip, #2
   86db0:	443a      	add	r2, r7
   86db2:	1a12      	subs	r2, r2, r0
   86db4:	fbb2 f0f8 	udiv	r0, r2, r8
   86db8:	fb08 2210 	mls	r2, r8, r0, r2
   86dbc:	fb00 f109 	mul.w	r1, r0, r9
   86dc0:	b2a4      	uxth	r4, r4
   86dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   86dc6:	42a1      	cmp	r1, r4
   86dc8:	d909      	bls.n	86dde <__udivmoddi4+0x92>
   86dca:	193c      	adds	r4, r7, r4
   86dcc:	f100 32ff 	add.w	r2, r0, #4294967295
   86dd0:	f080 8103 	bcs.w	86fda <__udivmoddi4+0x28e>
   86dd4:	42a1      	cmp	r1, r4
   86dd6:	f240 8100 	bls.w	86fda <__udivmoddi4+0x28e>
   86dda:	3802      	subs	r0, #2
   86ddc:	443c      	add	r4, r7
   86dde:	1a64      	subs	r4, r4, r1
   86de0:	2100      	movs	r1, #0
   86de2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   86de6:	b11e      	cbz	r6, 86df0 <__udivmoddi4+0xa4>
   86de8:	2200      	movs	r2, #0
   86dea:	40dc      	lsrs	r4, r3
   86dec:	e9c6 4200 	strd	r4, r2, [r6]
   86df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86df4:	b902      	cbnz	r2, 86df8 <__udivmoddi4+0xac>
   86df6:	deff      	udf	#255	; 0xff
   86df8:	fab2 f382 	clz	r3, r2
   86dfc:	2b00      	cmp	r3, #0
   86dfe:	d14f      	bne.n	86ea0 <__udivmoddi4+0x154>
   86e00:	1a8d      	subs	r5, r1, r2
   86e02:	2101      	movs	r1, #1
   86e04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   86e08:	fa1f f882 	uxth.w	r8, r2
   86e0c:	fbb5 fcfe 	udiv	ip, r5, lr
   86e10:	fb0e 551c 	mls	r5, lr, ip, r5
   86e14:	fb08 f00c 	mul.w	r0, r8, ip
   86e18:	0c22      	lsrs	r2, r4, #16
   86e1a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   86e1e:	42a8      	cmp	r0, r5
   86e20:	d907      	bls.n	86e32 <__udivmoddi4+0xe6>
   86e22:	197d      	adds	r5, r7, r5
   86e24:	f10c 32ff 	add.w	r2, ip, #4294967295
   86e28:	d202      	bcs.n	86e30 <__udivmoddi4+0xe4>
   86e2a:	42a8      	cmp	r0, r5
   86e2c:	f200 80e9 	bhi.w	87002 <__udivmoddi4+0x2b6>
   86e30:	4694      	mov	ip, r2
   86e32:	1a2d      	subs	r5, r5, r0
   86e34:	fbb5 f0fe 	udiv	r0, r5, lr
   86e38:	fb0e 5510 	mls	r5, lr, r0, r5
   86e3c:	fb08 f800 	mul.w	r8, r8, r0
   86e40:	b2a4      	uxth	r4, r4
   86e42:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   86e46:	45a0      	cmp	r8, r4
   86e48:	d907      	bls.n	86e5a <__udivmoddi4+0x10e>
   86e4a:	193c      	adds	r4, r7, r4
   86e4c:	f100 32ff 	add.w	r2, r0, #4294967295
   86e50:	d202      	bcs.n	86e58 <__udivmoddi4+0x10c>
   86e52:	45a0      	cmp	r8, r4
   86e54:	f200 80d9 	bhi.w	8700a <__udivmoddi4+0x2be>
   86e58:	4610      	mov	r0, r2
   86e5a:	eba4 0408 	sub.w	r4, r4, r8
   86e5e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   86e62:	e7c0      	b.n	86de6 <__udivmoddi4+0x9a>
   86e64:	428b      	cmp	r3, r1
   86e66:	d908      	bls.n	86e7a <__udivmoddi4+0x12e>
   86e68:	2e00      	cmp	r6, #0
   86e6a:	f000 80b1 	beq.w	86fd0 <__udivmoddi4+0x284>
   86e6e:	2100      	movs	r1, #0
   86e70:	e9c6 0500 	strd	r0, r5, [r6]
   86e74:	4608      	mov	r0, r1
   86e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86e7a:	fab3 f183 	clz	r1, r3
   86e7e:	2900      	cmp	r1, #0
   86e80:	d14b      	bne.n	86f1a <__udivmoddi4+0x1ce>
   86e82:	42ab      	cmp	r3, r5
   86e84:	d302      	bcc.n	86e8c <__udivmoddi4+0x140>
   86e86:	4282      	cmp	r2, r0
   86e88:	f200 80b9 	bhi.w	86ffe <__udivmoddi4+0x2b2>
   86e8c:	1a84      	subs	r4, r0, r2
   86e8e:	eb65 0303 	sbc.w	r3, r5, r3
   86e92:	2001      	movs	r0, #1
   86e94:	469e      	mov	lr, r3
   86e96:	2e00      	cmp	r6, #0
   86e98:	d0aa      	beq.n	86df0 <__udivmoddi4+0xa4>
   86e9a:	e9c6 4e00 	strd	r4, lr, [r6]
   86e9e:	e7a7      	b.n	86df0 <__udivmoddi4+0xa4>
   86ea0:	409f      	lsls	r7, r3
   86ea2:	f1c3 0220 	rsb	r2, r3, #32
   86ea6:	40d1      	lsrs	r1, r2
   86ea8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   86eac:	fbb1 f0fe 	udiv	r0, r1, lr
   86eb0:	fa1f f887 	uxth.w	r8, r7
   86eb4:	fb0e 1110 	mls	r1, lr, r0, r1
   86eb8:	fa24 f202 	lsr.w	r2, r4, r2
   86ebc:	409d      	lsls	r5, r3
   86ebe:	fb00 fc08 	mul.w	ip, r0, r8
   86ec2:	432a      	orrs	r2, r5
   86ec4:	0c15      	lsrs	r5, r2, #16
   86ec6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   86eca:	45ac      	cmp	ip, r5
   86ecc:	fa04 f403 	lsl.w	r4, r4, r3
   86ed0:	d909      	bls.n	86ee6 <__udivmoddi4+0x19a>
   86ed2:	197d      	adds	r5, r7, r5
   86ed4:	f100 31ff 	add.w	r1, r0, #4294967295
   86ed8:	f080 808f 	bcs.w	86ffa <__udivmoddi4+0x2ae>
   86edc:	45ac      	cmp	ip, r5
   86ede:	f240 808c 	bls.w	86ffa <__udivmoddi4+0x2ae>
   86ee2:	3802      	subs	r0, #2
   86ee4:	443d      	add	r5, r7
   86ee6:	eba5 050c 	sub.w	r5, r5, ip
   86eea:	fbb5 f1fe 	udiv	r1, r5, lr
   86eee:	fb0e 5c11 	mls	ip, lr, r1, r5
   86ef2:	fb01 f908 	mul.w	r9, r1, r8
   86ef6:	b295      	uxth	r5, r2
   86ef8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   86efc:	45a9      	cmp	r9, r5
   86efe:	d907      	bls.n	86f10 <__udivmoddi4+0x1c4>
   86f00:	197d      	adds	r5, r7, r5
   86f02:	f101 32ff 	add.w	r2, r1, #4294967295
   86f06:	d274      	bcs.n	86ff2 <__udivmoddi4+0x2a6>
   86f08:	45a9      	cmp	r9, r5
   86f0a:	d972      	bls.n	86ff2 <__udivmoddi4+0x2a6>
   86f0c:	3902      	subs	r1, #2
   86f0e:	443d      	add	r5, r7
   86f10:	eba5 0509 	sub.w	r5, r5, r9
   86f14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   86f18:	e778      	b.n	86e0c <__udivmoddi4+0xc0>
   86f1a:	f1c1 0720 	rsb	r7, r1, #32
   86f1e:	408b      	lsls	r3, r1
   86f20:	fa22 fc07 	lsr.w	ip, r2, r7
   86f24:	ea4c 0c03 	orr.w	ip, ip, r3
   86f28:	fa25 f407 	lsr.w	r4, r5, r7
   86f2c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   86f30:	fbb4 f9fe 	udiv	r9, r4, lr
   86f34:	fa1f f88c 	uxth.w	r8, ip
   86f38:	fb0e 4419 	mls	r4, lr, r9, r4
   86f3c:	fa20 f307 	lsr.w	r3, r0, r7
   86f40:	fb09 fa08 	mul.w	sl, r9, r8
   86f44:	408d      	lsls	r5, r1
   86f46:	431d      	orrs	r5, r3
   86f48:	0c2b      	lsrs	r3, r5, #16
   86f4a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   86f4e:	45a2      	cmp	sl, r4
   86f50:	fa02 f201 	lsl.w	r2, r2, r1
   86f54:	fa00 f301 	lsl.w	r3, r0, r1
   86f58:	d909      	bls.n	86f6e <__udivmoddi4+0x222>
   86f5a:	eb1c 0404 	adds.w	r4, ip, r4
   86f5e:	f109 30ff 	add.w	r0, r9, #4294967295
   86f62:	d248      	bcs.n	86ff6 <__udivmoddi4+0x2aa>
   86f64:	45a2      	cmp	sl, r4
   86f66:	d946      	bls.n	86ff6 <__udivmoddi4+0x2aa>
   86f68:	f1a9 0902 	sub.w	r9, r9, #2
   86f6c:	4464      	add	r4, ip
   86f6e:	eba4 040a 	sub.w	r4, r4, sl
   86f72:	fbb4 f0fe 	udiv	r0, r4, lr
   86f76:	fb0e 4410 	mls	r4, lr, r0, r4
   86f7a:	fb00 fa08 	mul.w	sl, r0, r8
   86f7e:	b2ad      	uxth	r5, r5
   86f80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   86f84:	45a2      	cmp	sl, r4
   86f86:	d908      	bls.n	86f9a <__udivmoddi4+0x24e>
   86f88:	eb1c 0404 	adds.w	r4, ip, r4
   86f8c:	f100 35ff 	add.w	r5, r0, #4294967295
   86f90:	d22d      	bcs.n	86fee <__udivmoddi4+0x2a2>
   86f92:	45a2      	cmp	sl, r4
   86f94:	d92b      	bls.n	86fee <__udivmoddi4+0x2a2>
   86f96:	3802      	subs	r0, #2
   86f98:	4464      	add	r4, ip
   86f9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86f9e:	fba0 8902 	umull	r8, r9, r0, r2
   86fa2:	eba4 040a 	sub.w	r4, r4, sl
   86fa6:	454c      	cmp	r4, r9
   86fa8:	46c6      	mov	lr, r8
   86faa:	464d      	mov	r5, r9
   86fac:	d319      	bcc.n	86fe2 <__udivmoddi4+0x296>
   86fae:	d016      	beq.n	86fde <__udivmoddi4+0x292>
   86fb0:	b15e      	cbz	r6, 86fca <__udivmoddi4+0x27e>
   86fb2:	ebb3 020e 	subs.w	r2, r3, lr
   86fb6:	eb64 0405 	sbc.w	r4, r4, r5
   86fba:	fa04 f707 	lsl.w	r7, r4, r7
   86fbe:	fa22 f301 	lsr.w	r3, r2, r1
   86fc2:	431f      	orrs	r7, r3
   86fc4:	40cc      	lsrs	r4, r1
   86fc6:	e9c6 7400 	strd	r7, r4, [r6]
   86fca:	2100      	movs	r1, #0
   86fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86fd0:	4631      	mov	r1, r6
   86fd2:	4630      	mov	r0, r6
   86fd4:	e70c      	b.n	86df0 <__udivmoddi4+0xa4>
   86fd6:	468c      	mov	ip, r1
   86fd8:	e6eb      	b.n	86db2 <__udivmoddi4+0x66>
   86fda:	4610      	mov	r0, r2
   86fdc:	e6ff      	b.n	86dde <__udivmoddi4+0x92>
   86fde:	4543      	cmp	r3, r8
   86fe0:	d2e6      	bcs.n	86fb0 <__udivmoddi4+0x264>
   86fe2:	ebb8 0e02 	subs.w	lr, r8, r2
   86fe6:	eb69 050c 	sbc.w	r5, r9, ip
   86fea:	3801      	subs	r0, #1
   86fec:	e7e0      	b.n	86fb0 <__udivmoddi4+0x264>
   86fee:	4628      	mov	r0, r5
   86ff0:	e7d3      	b.n	86f9a <__udivmoddi4+0x24e>
   86ff2:	4611      	mov	r1, r2
   86ff4:	e78c      	b.n	86f10 <__udivmoddi4+0x1c4>
   86ff6:	4681      	mov	r9, r0
   86ff8:	e7b9      	b.n	86f6e <__udivmoddi4+0x222>
   86ffa:	4608      	mov	r0, r1
   86ffc:	e773      	b.n	86ee6 <__udivmoddi4+0x19a>
   86ffe:	4608      	mov	r0, r1
   87000:	e749      	b.n	86e96 <__udivmoddi4+0x14a>
   87002:	f1ac 0c02 	sub.w	ip, ip, #2
   87006:	443d      	add	r5, r7
   87008:	e713      	b.n	86e32 <__udivmoddi4+0xe6>
   8700a:	3802      	subs	r0, #2
   8700c:	443c      	add	r4, r7
   8700e:	e724      	b.n	86e5a <__udivmoddi4+0x10e>

00087010 <__aeabi_idiv0>:
   87010:	4770      	bx	lr
   87012:	bf00      	nop

00087014 <__libc_init_array>:
   87014:	b570      	push	{r4, r5, r6, lr}
   87016:	4e0d      	ldr	r6, [pc, #52]	; (8704c <__libc_init_array+0x38>)
   87018:	4d0d      	ldr	r5, [pc, #52]	; (87050 <__libc_init_array+0x3c>)
   8701a:	1b76      	subs	r6, r6, r5
   8701c:	10b6      	asrs	r6, r6, #2
   8701e:	d006      	beq.n	8702e <__libc_init_array+0x1a>
   87020:	2400      	movs	r4, #0
   87022:	f855 3b04 	ldr.w	r3, [r5], #4
   87026:	3401      	adds	r4, #1
   87028:	4798      	blx	r3
   8702a:	42a6      	cmp	r6, r4
   8702c:	d1f9      	bne.n	87022 <__libc_init_array+0xe>
   8702e:	4e09      	ldr	r6, [pc, #36]	; (87054 <__libc_init_array+0x40>)
   87030:	4d09      	ldr	r5, [pc, #36]	; (87058 <__libc_init_array+0x44>)
   87032:	f006 ff09 	bl	8de48 <_init>
   87036:	1b76      	subs	r6, r6, r5
   87038:	10b6      	asrs	r6, r6, #2
   8703a:	d006      	beq.n	8704a <__libc_init_array+0x36>
   8703c:	2400      	movs	r4, #0
   8703e:	f855 3b04 	ldr.w	r3, [r5], #4
   87042:	3401      	adds	r4, #1
   87044:	4798      	blx	r3
   87046:	42a6      	cmp	r6, r4
   87048:	d1f9      	bne.n	8703e <__libc_init_array+0x2a>
   8704a:	bd70      	pop	{r4, r5, r6, pc}
   8704c:	0008de54 	.word	0x0008de54
   87050:	0008de54 	.word	0x0008de54
   87054:	0008de5c 	.word	0x0008de5c
   87058:	0008de54 	.word	0x0008de54

0008705c <iprintf>:
   8705c:	b40f      	push	{r0, r1, r2, r3}
   8705e:	b500      	push	{lr}
   87060:	4907      	ldr	r1, [pc, #28]	; (87080 <iprintf+0x24>)
   87062:	b083      	sub	sp, #12
   87064:	ab04      	add	r3, sp, #16
   87066:	6808      	ldr	r0, [r1, #0]
   87068:	f853 2b04 	ldr.w	r2, [r3], #4
   8706c:	6881      	ldr	r1, [r0, #8]
   8706e:	9301      	str	r3, [sp, #4]
   87070:	f001 fed4 	bl	88e1c <_vfiprintf_r>
   87074:	b003      	add	sp, #12
   87076:	f85d eb04 	ldr.w	lr, [sp], #4
   8707a:	b004      	add	sp, #16
   8707c:	4770      	bx	lr
   8707e:	bf00      	nop
   87080:	20000440 	.word	0x20000440

00087084 <memcpy>:
   87084:	4684      	mov	ip, r0
   87086:	ea41 0300 	orr.w	r3, r1, r0
   8708a:	f013 0303 	ands.w	r3, r3, #3
   8708e:	d149      	bne.n	87124 <memcpy+0xa0>
   87090:	3a40      	subs	r2, #64	; 0x40
   87092:	d323      	bcc.n	870dc <memcpy+0x58>
   87094:	680b      	ldr	r3, [r1, #0]
   87096:	6003      	str	r3, [r0, #0]
   87098:	684b      	ldr	r3, [r1, #4]
   8709a:	6043      	str	r3, [r0, #4]
   8709c:	688b      	ldr	r3, [r1, #8]
   8709e:	6083      	str	r3, [r0, #8]
   870a0:	68cb      	ldr	r3, [r1, #12]
   870a2:	60c3      	str	r3, [r0, #12]
   870a4:	690b      	ldr	r3, [r1, #16]
   870a6:	6103      	str	r3, [r0, #16]
   870a8:	694b      	ldr	r3, [r1, #20]
   870aa:	6143      	str	r3, [r0, #20]
   870ac:	698b      	ldr	r3, [r1, #24]
   870ae:	6183      	str	r3, [r0, #24]
   870b0:	69cb      	ldr	r3, [r1, #28]
   870b2:	61c3      	str	r3, [r0, #28]
   870b4:	6a0b      	ldr	r3, [r1, #32]
   870b6:	6203      	str	r3, [r0, #32]
   870b8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   870ba:	6243      	str	r3, [r0, #36]	; 0x24
   870bc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   870be:	6283      	str	r3, [r0, #40]	; 0x28
   870c0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   870c2:	62c3      	str	r3, [r0, #44]	; 0x2c
   870c4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   870c6:	6303      	str	r3, [r0, #48]	; 0x30
   870c8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   870ca:	6343      	str	r3, [r0, #52]	; 0x34
   870cc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   870ce:	6383      	str	r3, [r0, #56]	; 0x38
   870d0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   870d2:	63c3      	str	r3, [r0, #60]	; 0x3c
   870d4:	3040      	adds	r0, #64	; 0x40
   870d6:	3140      	adds	r1, #64	; 0x40
   870d8:	3a40      	subs	r2, #64	; 0x40
   870da:	d2db      	bcs.n	87094 <memcpy+0x10>
   870dc:	3230      	adds	r2, #48	; 0x30
   870de:	d30b      	bcc.n	870f8 <memcpy+0x74>
   870e0:	680b      	ldr	r3, [r1, #0]
   870e2:	6003      	str	r3, [r0, #0]
   870e4:	684b      	ldr	r3, [r1, #4]
   870e6:	6043      	str	r3, [r0, #4]
   870e8:	688b      	ldr	r3, [r1, #8]
   870ea:	6083      	str	r3, [r0, #8]
   870ec:	68cb      	ldr	r3, [r1, #12]
   870ee:	60c3      	str	r3, [r0, #12]
   870f0:	3010      	adds	r0, #16
   870f2:	3110      	adds	r1, #16
   870f4:	3a10      	subs	r2, #16
   870f6:	d2f3      	bcs.n	870e0 <memcpy+0x5c>
   870f8:	320c      	adds	r2, #12
   870fa:	d305      	bcc.n	87108 <memcpy+0x84>
   870fc:	f851 3b04 	ldr.w	r3, [r1], #4
   87100:	f840 3b04 	str.w	r3, [r0], #4
   87104:	3a04      	subs	r2, #4
   87106:	d2f9      	bcs.n	870fc <memcpy+0x78>
   87108:	3204      	adds	r2, #4
   8710a:	d008      	beq.n	8711e <memcpy+0x9a>
   8710c:	07d2      	lsls	r2, r2, #31
   8710e:	bf1c      	itt	ne
   87110:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87114:	f800 3b01 	strbne.w	r3, [r0], #1
   87118:	d301      	bcc.n	8711e <memcpy+0x9a>
   8711a:	880b      	ldrh	r3, [r1, #0]
   8711c:	8003      	strh	r3, [r0, #0]
   8711e:	4660      	mov	r0, ip
   87120:	4770      	bx	lr
   87122:	bf00      	nop
   87124:	2a08      	cmp	r2, #8
   87126:	d313      	bcc.n	87150 <memcpy+0xcc>
   87128:	078b      	lsls	r3, r1, #30
   8712a:	d0b1      	beq.n	87090 <memcpy+0xc>
   8712c:	f010 0303 	ands.w	r3, r0, #3
   87130:	d0ae      	beq.n	87090 <memcpy+0xc>
   87132:	f1c3 0304 	rsb	r3, r3, #4
   87136:	1ad2      	subs	r2, r2, r3
   87138:	07db      	lsls	r3, r3, #31
   8713a:	bf1c      	itt	ne
   8713c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87140:	f800 3b01 	strbne.w	r3, [r0], #1
   87144:	d3a4      	bcc.n	87090 <memcpy+0xc>
   87146:	f831 3b02 	ldrh.w	r3, [r1], #2
   8714a:	f820 3b02 	strh.w	r3, [r0], #2
   8714e:	e79f      	b.n	87090 <memcpy+0xc>
   87150:	3a04      	subs	r2, #4
   87152:	d3d9      	bcc.n	87108 <memcpy+0x84>
   87154:	3a01      	subs	r2, #1
   87156:	f811 3b01 	ldrb.w	r3, [r1], #1
   8715a:	f800 3b01 	strb.w	r3, [r0], #1
   8715e:	d2f9      	bcs.n	87154 <memcpy+0xd0>
   87160:	780b      	ldrb	r3, [r1, #0]
   87162:	7003      	strb	r3, [r0, #0]
   87164:	784b      	ldrb	r3, [r1, #1]
   87166:	7043      	strb	r3, [r0, #1]
   87168:	788b      	ldrb	r3, [r1, #2]
   8716a:	7083      	strb	r3, [r0, #2]
   8716c:	4660      	mov	r0, ip
   8716e:	4770      	bx	lr

00087170 <memset>:
   87170:	b4f0      	push	{r4, r5, r6, r7}
   87172:	0786      	lsls	r6, r0, #30
   87174:	d046      	beq.n	87204 <memset+0x94>
   87176:	1e54      	subs	r4, r2, #1
   87178:	2a00      	cmp	r2, #0
   8717a:	d03c      	beq.n	871f6 <memset+0x86>
   8717c:	4603      	mov	r3, r0
   8717e:	b2ca      	uxtb	r2, r1
   87180:	e001      	b.n	87186 <memset+0x16>
   87182:	3c01      	subs	r4, #1
   87184:	d337      	bcc.n	871f6 <memset+0x86>
   87186:	f803 2b01 	strb.w	r2, [r3], #1
   8718a:	079d      	lsls	r5, r3, #30
   8718c:	d1f9      	bne.n	87182 <memset+0x12>
   8718e:	2c03      	cmp	r4, #3
   87190:	d92a      	bls.n	871e8 <memset+0x78>
   87192:	b2cd      	uxtb	r5, r1
   87194:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   87198:	2c0f      	cmp	r4, #15
   8719a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8719e:	d934      	bls.n	8720a <memset+0x9a>
   871a0:	f1a4 0210 	sub.w	r2, r4, #16
   871a4:	f022 0c0f 	bic.w	ip, r2, #15
   871a8:	f103 0720 	add.w	r7, r3, #32
   871ac:	0916      	lsrs	r6, r2, #4
   871ae:	4467      	add	r7, ip
   871b0:	f103 0210 	add.w	r2, r3, #16
   871b4:	e942 5504 	strd	r5, r5, [r2, #-16]
   871b8:	e942 5502 	strd	r5, r5, [r2, #-8]
   871bc:	3210      	adds	r2, #16
   871be:	42ba      	cmp	r2, r7
   871c0:	d1f8      	bne.n	871b4 <memset+0x44>
   871c2:	1c72      	adds	r2, r6, #1
   871c4:	f014 0f0c 	tst.w	r4, #12
   871c8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   871cc:	f004 060f 	and.w	r6, r4, #15
   871d0:	d013      	beq.n	871fa <memset+0x8a>
   871d2:	1f33      	subs	r3, r6, #4
   871d4:	f023 0303 	bic.w	r3, r3, #3
   871d8:	3304      	adds	r3, #4
   871da:	4413      	add	r3, r2
   871dc:	f842 5b04 	str.w	r5, [r2], #4
   871e0:	4293      	cmp	r3, r2
   871e2:	d1fb      	bne.n	871dc <memset+0x6c>
   871e4:	f006 0403 	and.w	r4, r6, #3
   871e8:	b12c      	cbz	r4, 871f6 <memset+0x86>
   871ea:	b2ca      	uxtb	r2, r1
   871ec:	441c      	add	r4, r3
   871ee:	f803 2b01 	strb.w	r2, [r3], #1
   871f2:	429c      	cmp	r4, r3
   871f4:	d1fb      	bne.n	871ee <memset+0x7e>
   871f6:	bcf0      	pop	{r4, r5, r6, r7}
   871f8:	4770      	bx	lr
   871fa:	4634      	mov	r4, r6
   871fc:	4613      	mov	r3, r2
   871fe:	2c00      	cmp	r4, #0
   87200:	d1f3      	bne.n	871ea <memset+0x7a>
   87202:	e7f8      	b.n	871f6 <memset+0x86>
   87204:	4614      	mov	r4, r2
   87206:	4603      	mov	r3, r0
   87208:	e7c1      	b.n	8718e <memset+0x1e>
   8720a:	461a      	mov	r2, r3
   8720c:	4626      	mov	r6, r4
   8720e:	e7e0      	b.n	871d2 <memset+0x62>

00087210 <sprintf>:
   87210:	b40e      	push	{r1, r2, r3}
   87212:	4601      	mov	r1, r0
   87214:	b530      	push	{r4, r5, lr}
   87216:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   8721a:	b09c      	sub	sp, #112	; 0x70
   8721c:	ab1f      	add	r3, sp, #124	; 0x7c
   8721e:	480b      	ldr	r0, [pc, #44]	; (8724c <sprintf+0x3c>)
   87220:	f853 2b04 	ldr.w	r2, [r3], #4
   87224:	4d0a      	ldr	r5, [pc, #40]	; (87250 <sprintf+0x40>)
   87226:	9102      	str	r1, [sp, #8]
   87228:	9106      	str	r1, [sp, #24]
   8722a:	6800      	ldr	r0, [r0, #0]
   8722c:	a902      	add	r1, sp, #8
   8722e:	9301      	str	r3, [sp, #4]
   87230:	e9cd 4504 	strd	r4, r5, [sp, #16]
   87234:	9407      	str	r4, [sp, #28]
   87236:	f000 f80d 	bl	87254 <_svfprintf_r>
   8723a:	2200      	movs	r2, #0
   8723c:	9b02      	ldr	r3, [sp, #8]
   8723e:	701a      	strb	r2, [r3, #0]
   87240:	b01c      	add	sp, #112	; 0x70
   87242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   87246:	b003      	add	sp, #12
   87248:	4770      	bx	lr
   8724a:	bf00      	nop
   8724c:	20000440 	.word	0x20000440
   87250:	ffff0208 	.word	0xffff0208

00087254 <_svfprintf_r>:
   87254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87258:	b0d7      	sub	sp, #348	; 0x15c
   8725a:	468b      	mov	fp, r1
   8725c:	4617      	mov	r7, r2
   8725e:	930e      	str	r3, [sp, #56]	; 0x38
   87260:	4681      	mov	r9, r0
   87262:	f004 f9df 	bl	8b624 <_localeconv_r>
   87266:	6803      	ldr	r3, [r0, #0]
   87268:	4618      	mov	r0, r3
   8726a:	9318      	str	r3, [sp, #96]	; 0x60
   8726c:	f005 fbd4 	bl	8ca18 <strlen>
   87270:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   87274:	9017      	str	r0, [sp, #92]	; 0x5c
   87276:	061d      	lsls	r5, r3, #24
   87278:	d504      	bpl.n	87284 <_svfprintf_r+0x30>
   8727a:	f8db 3010 	ldr.w	r3, [fp, #16]
   8727e:	2b00      	cmp	r3, #0
   87280:	f000 87df 	beq.w	88242 <_svfprintf_r+0xfee>
   87284:	2300      	movs	r3, #0
   87286:	2100      	movs	r1, #0
   87288:	2200      	movs	r2, #0
   8728a:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   8728e:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   87292:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   87296:	9313      	str	r3, [sp, #76]	; 0x4c
   87298:	9319      	str	r3, [sp, #100]	; 0x64
   8729a:	930a      	str	r3, [sp, #40]	; 0x28
   8729c:	ab2d      	add	r3, sp, #180	; 0xb4
   8729e:	4698      	mov	r8, r3
   872a0:	932a      	str	r3, [sp, #168]	; 0xa8
   872a2:	783b      	ldrb	r3, [r7, #0]
   872a4:	46da      	mov	sl, fp
   872a6:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   872aa:	2b00      	cmp	r3, #0
   872ac:	f000 81a4 	beq.w	875f8 <_svfprintf_r+0x3a4>
   872b0:	463c      	mov	r4, r7
   872b2:	e004      	b.n	872be <_svfprintf_r+0x6a>
   872b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   872b8:	2b00      	cmp	r3, #0
   872ba:	f000 80fd 	beq.w	874b8 <_svfprintf_r+0x264>
   872be:	2b25      	cmp	r3, #37	; 0x25
   872c0:	d1f8      	bne.n	872b4 <_svfprintf_r+0x60>
   872c2:	1be5      	subs	r5, r4, r7
   872c4:	f040 80fb 	bne.w	874be <_svfprintf_r+0x26a>
   872c8:	7823      	ldrb	r3, [r4, #0]
   872ca:	2b00      	cmp	r3, #0
   872cc:	f000 8194 	beq.w	875f8 <_svfprintf_r+0x3a4>
   872d0:	2300      	movs	r3, #0
   872d2:	930b      	str	r3, [sp, #44]	; 0x2c
   872d4:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   872d8:	9307      	str	r3, [sp, #28]
   872da:	f04f 33ff 	mov.w	r3, #4294967295
   872de:	7866      	ldrb	r6, [r4, #1]
   872e0:	f104 0b01 	add.w	fp, r4, #1
   872e4:	2120      	movs	r1, #32
   872e6:	242b      	movs	r4, #43	; 0x2b
   872e8:	9309      	str	r3, [sp, #36]	; 0x24
   872ea:	f10b 0b01 	add.w	fp, fp, #1
   872ee:	f1a6 0320 	sub.w	r3, r6, #32
   872f2:	2b5a      	cmp	r3, #90	; 0x5a
   872f4:	f200 80ff 	bhi.w	874f6 <_svfprintf_r+0x2a2>
   872f8:	e8df f013 	tbh	[pc, r3, lsl #1]
   872fc:	00fd02bc 	.word	0x00fd02bc
   87300:	02b500fd 	.word	0x02b500fd
   87304:	00fd00fd 	.word	0x00fd00fd
   87308:	029100fd 	.word	0x029100fd
   8730c:	00fd00fd 	.word	0x00fd00fd
   87310:	02e7006a 	.word	0x02e7006a
   87314:	023400fd 	.word	0x023400fd
   87318:	00fd02cd 	.word	0x00fd02cd
   8731c:	005b02c6 	.word	0x005b02c6
   87320:	005b005b 	.word	0x005b005b
   87324:	005b005b 	.word	0x005b005b
   87328:	005b005b 	.word	0x005b005b
   8732c:	005b005b 	.word	0x005b005b
   87330:	00fd00fd 	.word	0x00fd00fd
   87334:	00fd00fd 	.word	0x00fd00fd
   87338:	00fd00fd 	.word	0x00fd00fd
   8733c:	019000fd 	.word	0x019000fd
   87340:	01f700fd 	.word	0x01f700fd
   87344:	0190007c 	.word	0x0190007c
   87348:	01900190 	.word	0x01900190
   8734c:	00fd00fd 	.word	0x00fd00fd
   87350:	00fd00fd 	.word	0x00fd00fd
   87354:	00fd028a 	.word	0x00fd028a
   87358:	00a900fd 	.word	0x00a900fd
   8735c:	00fd00fd 	.word	0x00fd00fd
   87360:	020b00fd 	.word	0x020b00fd
   87364:	023b00fd 	.word	0x023b00fd
   87368:	00fd00fd 	.word	0x00fd00fd
   8736c:	00fd0781 	.word	0x00fd0781
   87370:	00fd00fd 	.word	0x00fd00fd
   87374:	00fd00fd 	.word	0x00fd00fd
   87378:	00fd00fd 	.word	0x00fd00fd
   8737c:	019000fd 	.word	0x019000fd
   87380:	01f700fd 	.word	0x01f700fd
   87384:	01900080 	.word	0x01900080
   87388:	01900190 	.word	0x01900190
   8738c:	00800280 	.word	0x00800280
   87390:	00fd0075 	.word	0x00fd0075
   87394:	00fd0276 	.word	0x00fd0276
   87398:	00ad025e 	.word	0x00ad025e
   8739c:	0075024c 	.word	0x0075024c
   873a0:	020b00fd 	.word	0x020b00fd
   873a4:	075b0072 	.word	0x075b0072
   873a8:	00fd00fd 	.word	0x00fd00fd
   873ac:	00fd075f 	.word	0x00fd075f
   873b0:	0072      	.short	0x0072
   873b2:	2200      	movs	r2, #0
   873b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   873b8:	f81b 6b01 	ldrb.w	r6, [fp], #1
   873bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   873c0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   873c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   873c8:	2b09      	cmp	r3, #9
   873ca:	d9f5      	bls.n	873b8 <_svfprintf_r+0x164>
   873cc:	920b      	str	r2, [sp, #44]	; 0x2c
   873ce:	e78e      	b.n	872ee <_svfprintf_r+0x9a>
   873d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   873d2:	f853 2b04 	ldr.w	r2, [r3], #4
   873d6:	2a00      	cmp	r2, #0
   873d8:	920b      	str	r2, [sp, #44]	; 0x2c
   873da:	930e      	str	r3, [sp, #56]	; 0x38
   873dc:	f2c0 81bf 	blt.w	8775e <_svfprintf_r+0x50a>
   873e0:	f89b 6000 	ldrb.w	r6, [fp]
   873e4:	e781      	b.n	872ea <_svfprintf_r+0x96>
   873e6:	9b07      	ldr	r3, [sp, #28]
   873e8:	f89b 6000 	ldrb.w	r6, [fp]
   873ec:	f043 0320 	orr.w	r3, r3, #32
   873f0:	9307      	str	r3, [sp, #28]
   873f2:	e77a      	b.n	872ea <_svfprintf_r+0x96>
   873f4:	9b07      	ldr	r3, [sp, #28]
   873f6:	f043 0310 	orr.w	r3, r3, #16
   873fa:	9307      	str	r3, [sp, #28]
   873fc:	9b07      	ldr	r3, [sp, #28]
   873fe:	069c      	lsls	r4, r3, #26
   87400:	f140 8162 	bpl.w	876c8 <_svfprintf_r+0x474>
   87404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87406:	3307      	adds	r3, #7
   87408:	f023 0307 	bic.w	r3, r3, #7
   8740c:	4619      	mov	r1, r3
   8740e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   87412:	4614      	mov	r4, r2
   87414:	461d      	mov	r5, r3
   87416:	910e      	str	r1, [sp, #56]	; 0x38
   87418:	2a00      	cmp	r2, #0
   8741a:	f173 0300 	sbcs.w	r3, r3, #0
   8741e:	f2c0 85ab 	blt.w	87f78 <_svfprintf_r+0xd24>
   87422:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87424:	3301      	adds	r3, #1
   87426:	9b07      	ldr	r3, [sp, #28]
   87428:	f000 8414 	beq.w	87c54 <_svfprintf_r+0xa00>
   8742c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   87430:	ea54 0205 	orrs.w	r2, r4, r5
   87434:	9308      	str	r3, [sp, #32]
   87436:	f040 840e 	bne.w	87c56 <_svfprintf_r+0xa02>
   8743a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8743c:	2a00      	cmp	r2, #0
   8743e:	f040 840f 	bne.w	87c60 <_svfprintf_r+0xa0c>
   87442:	9307      	str	r3, [sp, #28]
   87444:	2300      	movs	r3, #0
   87446:	af56      	add	r7, sp, #344	; 0x158
   87448:	9309      	str	r3, [sp, #36]	; 0x24
   8744a:	930c      	str	r3, [sp, #48]	; 0x30
   8744c:	e26b      	b.n	87926 <_svfprintf_r+0x6d2>
   8744e:	9b07      	ldr	r3, [sp, #28]
   87450:	f043 0310 	orr.w	r3, r3, #16
   87454:	9307      	str	r3, [sp, #28]
   87456:	9b07      	ldr	r3, [sp, #28]
   87458:	069a      	lsls	r2, r3, #26
   8745a:	f140 8126 	bpl.w	876aa <_svfprintf_r+0x456>
   8745e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87460:	3307      	adds	r3, #7
   87462:	f023 0307 	bic.w	r3, r3, #7
   87466:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8746a:	930e      	str	r3, [sp, #56]	; 0x38
   8746c:	9b07      	ldr	r3, [sp, #28]
   8746e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   87472:	9308      	str	r3, [sp, #32]
   87474:	2300      	movs	r3, #0
   87476:	2200      	movs	r2, #0
   87478:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   8747c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8747e:	4611      	mov	r1, r2
   87480:	3101      	adds	r1, #1
   87482:	f000 8231 	beq.w	878e8 <_svfprintf_r+0x694>
   87486:	9908      	ldr	r1, [sp, #32]
   87488:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   8748c:	9107      	str	r1, [sp, #28]
   8748e:	ea54 0105 	orrs.w	r1, r4, r5
   87492:	f040 8227 	bne.w	878e4 <_svfprintf_r+0x690>
   87496:	2a00      	cmp	r2, #0
   87498:	f040 837d 	bne.w	87b96 <_svfprintf_r+0x942>
   8749c:	2b00      	cmp	r3, #0
   8749e:	d1d1      	bne.n	87444 <_svfprintf_r+0x1f0>
   874a0:	9b08      	ldr	r3, [sp, #32]
   874a2:	f013 0301 	ands.w	r3, r3, #1
   874a6:	930c      	str	r3, [sp, #48]	; 0x30
   874a8:	f000 8590 	beq.w	87fcc <_svfprintf_r+0xd78>
   874ac:	2330      	movs	r3, #48	; 0x30
   874ae:	f20d 1757 	addw	r7, sp, #343	; 0x157
   874b2:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   874b6:	e236      	b.n	87926 <_svfprintf_r+0x6d2>
   874b8:	1be5      	subs	r5, r4, r7
   874ba:	f000 809d 	beq.w	875f8 <_svfprintf_r+0x3a4>
   874be:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   874c2:	3301      	adds	r3, #1
   874c4:	442a      	add	r2, r5
   874c6:	2b07      	cmp	r3, #7
   874c8:	e9c8 7500 	strd	r7, r5, [r8]
   874cc:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   874d0:	dc06      	bgt.n	874e0 <_svfprintf_r+0x28c>
   874d2:	f108 0808 	add.w	r8, r8, #8
   874d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   874d8:	7823      	ldrb	r3, [r4, #0]
   874da:	442a      	add	r2, r5
   874dc:	920a      	str	r2, [sp, #40]	; 0x28
   874de:	e6f4      	b.n	872ca <_svfprintf_r+0x76>
   874e0:	4651      	mov	r1, sl
   874e2:	4648      	mov	r0, r9
   874e4:	aa2a      	add	r2, sp, #168	; 0xa8
   874e6:	f005 faf9 	bl	8cadc <__ssprint_r>
   874ea:	2800      	cmp	r0, #0
   874ec:	f041 83ce 	bne.w	88c8c <_svfprintf_r+0x1a38>
   874f0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   874f4:	e7ef      	b.n	874d6 <_svfprintf_r+0x282>
   874f6:	2e00      	cmp	r6, #0
   874f8:	d07e      	beq.n	875f8 <_svfprintf_r+0x3a4>
   874fa:	2300      	movs	r3, #0
   874fc:	2101      	movs	r1, #1
   874fe:	461a      	mov	r2, r3
   87500:	9108      	str	r1, [sp, #32]
   87502:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   87506:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8750a:	930d      	str	r3, [sp, #52]	; 0x34
   8750c:	9309      	str	r3, [sp, #36]	; 0x24
   8750e:	9312      	str	r3, [sp, #72]	; 0x48
   87510:	9316      	str	r3, [sp, #88]	; 0x58
   87512:	9310      	str	r3, [sp, #64]	; 0x40
   87514:	910c      	str	r1, [sp, #48]	; 0x30
   87516:	af3d      	add	r7, sp, #244	; 0xf4
   87518:	9b07      	ldr	r3, [sp, #28]
   8751a:	f013 0302 	ands.w	r3, r3, #2
   8751e:	d002      	beq.n	87526 <_svfprintf_r+0x2d2>
   87520:	9908      	ldr	r1, [sp, #32]
   87522:	3102      	adds	r1, #2
   87524:	9108      	str	r1, [sp, #32]
   87526:	9907      	ldr	r1, [sp, #28]
   87528:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   8752c:	910f      	str	r1, [sp, #60]	; 0x3c
   8752e:	d105      	bne.n	8753c <_svfprintf_r+0x2e8>
   87530:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87532:	9808      	ldr	r0, [sp, #32]
   87534:	1a0d      	subs	r5, r1, r0
   87536:	2d00      	cmp	r5, #0
   87538:	f300 834b 	bgt.w	87bd2 <_svfprintf_r+0x97e>
   8753c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8753e:	b172      	cbz	r2, 8755e <_svfprintf_r+0x30a>
   87540:	2001      	movs	r0, #1
   87542:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87544:	4404      	add	r4, r0
   87546:	4402      	add	r2, r0
   87548:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   8754c:	2a07      	cmp	r2, #7
   8754e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87552:	e9c8 1000 	strd	r1, r0, [r8]
   87556:	f300 83cd 	bgt.w	87cf4 <_svfprintf_r+0xaa0>
   8755a:	f108 0808 	add.w	r8, r8, #8
   8755e:	b16b      	cbz	r3, 8757c <_svfprintf_r+0x328>
   87560:	2102      	movs	r1, #2
   87562:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87564:	440c      	add	r4, r1
   87566:	3301      	adds	r3, #1
   87568:	aa23      	add	r2, sp, #140	; 0x8c
   8756a:	2b07      	cmp	r3, #7
   8756c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87570:	e9c8 2100 	strd	r2, r1, [r8]
   87574:	f300 83cc 	bgt.w	87d10 <_svfprintf_r+0xabc>
   87578:	f108 0808 	add.w	r8, r8, #8
   8757c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8757e:	2b80      	cmp	r3, #128	; 0x80
   87580:	f000 8234 	beq.w	879ec <_svfprintf_r+0x798>
   87584:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87588:	1a9d      	subs	r5, r3, r2
   8758a:	2d00      	cmp	r5, #0
   8758c:	f300 826e 	bgt.w	87a6c <_svfprintf_r+0x818>
   87590:	9b07      	ldr	r3, [sp, #28]
   87592:	05d9      	lsls	r1, r3, #23
   87594:	f100 81d5 	bmi.w	87942 <_svfprintf_r+0x6ee>
   87598:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8759a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8759c:	3301      	adds	r3, #1
   8759e:	4414      	add	r4, r2
   875a0:	2b07      	cmp	r3, #7
   875a2:	e9c8 7200 	strd	r7, r2, [r8]
   875a6:	942c      	str	r4, [sp, #176]	; 0xb0
   875a8:	932b      	str	r3, [sp, #172]	; 0xac
   875aa:	f300 8397 	bgt.w	87cdc <_svfprintf_r+0xa88>
   875ae:	f108 0808 	add.w	r8, r8, #8
   875b2:	9b07      	ldr	r3, [sp, #28]
   875b4:	0759      	lsls	r1, r3, #29
   875b6:	d505      	bpl.n	875c4 <_svfprintf_r+0x370>
   875b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   875ba:	9a08      	ldr	r2, [sp, #32]
   875bc:	1a9d      	subs	r5, r3, r2
   875be:	2d00      	cmp	r5, #0
   875c0:	f300 83b2 	bgt.w	87d28 <_svfprintf_r+0xad4>
   875c4:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   875c8:	9908      	ldr	r1, [sp, #32]
   875ca:	428a      	cmp	r2, r1
   875cc:	bfac      	ite	ge
   875ce:	189b      	addge	r3, r3, r2
   875d0:	185b      	addlt	r3, r3, r1
   875d2:	930a      	str	r3, [sp, #40]	; 0x28
   875d4:	2c00      	cmp	r4, #0
   875d6:	f040 827d 	bne.w	87ad4 <_svfprintf_r+0x880>
   875da:	2300      	movs	r3, #0
   875dc:	932b      	str	r3, [sp, #172]	; 0xac
   875de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   875e0:	b11b      	cbz	r3, 875ea <_svfprintf_r+0x396>
   875e2:	4648      	mov	r0, r9
   875e4:	990d      	ldr	r1, [sp, #52]	; 0x34
   875e6:	f003 fd77 	bl	8b0d8 <_free_r>
   875ea:	465f      	mov	r7, fp
   875ec:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   875f0:	783b      	ldrb	r3, [r7, #0]
   875f2:	2b00      	cmp	r3, #0
   875f4:	f47f ae5c 	bne.w	872b0 <_svfprintf_r+0x5c>
   875f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   875fa:	46d3      	mov	fp, sl
   875fc:	2b00      	cmp	r3, #0
   875fe:	f041 824b 	bne.w	88a98 <_svfprintf_r+0x1844>
   87602:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   87606:	f013 0f40 	tst.w	r3, #64	; 0x40
   8760a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8760c:	bf18      	it	ne
   8760e:	f04f 33ff 	movne.w	r3, #4294967295
   87612:	930a      	str	r3, [sp, #40]	; 0x28
   87614:	980a      	ldr	r0, [sp, #40]	; 0x28
   87616:	b057      	add	sp, #348	; 0x15c
   87618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8761c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8761e:	3307      	adds	r3, #7
   87620:	f023 0307 	bic.w	r3, r3, #7
   87624:	4619      	mov	r1, r3
   87626:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8762a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8762e:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   87632:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   87636:	461d      	mov	r5, r3
   87638:	4618      	mov	r0, r3
   8763a:	910e      	str	r1, [sp, #56]	; 0x38
   8763c:	f04f 32ff 	mov.w	r2, #4294967295
   87640:	4621      	mov	r1, r4
   87642:	4ba4      	ldr	r3, [pc, #656]	; (878d4 <_svfprintf_r+0x680>)
   87644:	f006 f97e 	bl	8d944 <__aeabi_dcmpun>
   87648:	2800      	cmp	r0, #0
   8764a:	f040 84d9 	bne.w	88000 <_svfprintf_r+0xdac>
   8764e:	4628      	mov	r0, r5
   87650:	4621      	mov	r1, r4
   87652:	f04f 32ff 	mov.w	r2, #4294967295
   87656:	4b9f      	ldr	r3, [pc, #636]	; (878d4 <_svfprintf_r+0x680>)
   87658:	f006 f956 	bl	8d908 <__aeabi_dcmple>
   8765c:	2800      	cmp	r0, #0
   8765e:	f040 84cf 	bne.w	88000 <_svfprintf_r+0xdac>
   87662:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87666:	2200      	movs	r2, #0
   87668:	2300      	movs	r3, #0
   8766a:	f006 f943 	bl	8d8f4 <__aeabi_dcmplt>
   8766e:	2800      	cmp	r0, #0
   87670:	f041 800e 	bne.w	88690 <_svfprintf_r+0x143c>
   87674:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87678:	2003      	movs	r0, #3
   8767a:	2100      	movs	r1, #0
   8767c:	4f96      	ldr	r7, [pc, #600]	; (878d8 <_svfprintf_r+0x684>)
   8767e:	4b97      	ldr	r3, [pc, #604]	; (878dc <_svfprintf_r+0x688>)
   87680:	9008      	str	r0, [sp, #32]
   87682:	910d      	str	r1, [sp, #52]	; 0x34
   87684:	2e47      	cmp	r6, #71	; 0x47
   87686:	bfc8      	it	gt
   87688:	461f      	movgt	r7, r3
   8768a:	9c07      	ldr	r4, [sp, #28]
   8768c:	900c      	str	r0, [sp, #48]	; 0x30
   8768e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   87692:	9407      	str	r4, [sp, #28]
   87694:	9109      	str	r1, [sp, #36]	; 0x24
   87696:	9112      	str	r1, [sp, #72]	; 0x48
   87698:	9116      	str	r1, [sp, #88]	; 0x58
   8769a:	9110      	str	r1, [sp, #64]	; 0x40
   8769c:	2a00      	cmp	r2, #0
   8769e:	f43f af3b 	beq.w	87518 <_svfprintf_r+0x2c4>
   876a2:	9b08      	ldr	r3, [sp, #32]
   876a4:	3301      	adds	r3, #1
   876a6:	9308      	str	r3, [sp, #32]
   876a8:	e736      	b.n	87518 <_svfprintf_r+0x2c4>
   876aa:	9b07      	ldr	r3, [sp, #28]
   876ac:	06db      	lsls	r3, r3, #27
   876ae:	f100 849c 	bmi.w	87fea <_svfprintf_r+0xd96>
   876b2:	9b07      	ldr	r3, [sp, #28]
   876b4:	065f      	lsls	r7, r3, #25
   876b6:	f140 87b2 	bpl.w	8861e <_svfprintf_r+0x13ca>
   876ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   876bc:	2500      	movs	r5, #0
   876be:	f853 4b04 	ldr.w	r4, [r3], #4
   876c2:	930e      	str	r3, [sp, #56]	; 0x38
   876c4:	b2a4      	uxth	r4, r4
   876c6:	e6d1      	b.n	8746c <_svfprintf_r+0x218>
   876c8:	9b07      	ldr	r3, [sp, #28]
   876ca:	06d8      	lsls	r0, r3, #27
   876cc:	f100 8568 	bmi.w	881a0 <_svfprintf_r+0xf4c>
   876d0:	9b07      	ldr	r3, [sp, #28]
   876d2:	0659      	lsls	r1, r3, #25
   876d4:	f140 87be 	bpl.w	88654 <_svfprintf_r+0x1400>
   876d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   876da:	f853 4b04 	ldr.w	r4, [r3], #4
   876de:	b224      	sxth	r4, r4
   876e0:	17e5      	asrs	r5, r4, #31
   876e2:	930e      	str	r3, [sp, #56]	; 0x38
   876e4:	4622      	mov	r2, r4
   876e6:	462b      	mov	r3, r5
   876e8:	e696      	b.n	87418 <_svfprintf_r+0x1c4>
   876ea:	2100      	movs	r1, #0
   876ec:	2401      	movs	r4, #1
   876ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   876f0:	460a      	mov	r2, r1
   876f2:	f853 0b04 	ldr.w	r0, [r3], #4
   876f6:	9408      	str	r4, [sp, #32]
   876f8:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   876fc:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   87700:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   87704:	9109      	str	r1, [sp, #36]	; 0x24
   87706:	9112      	str	r1, [sp, #72]	; 0x48
   87708:	9116      	str	r1, [sp, #88]	; 0x58
   8770a:	9110      	str	r1, [sp, #64]	; 0x40
   8770c:	940c      	str	r4, [sp, #48]	; 0x30
   8770e:	af3d      	add	r7, sp, #244	; 0xf4
   87710:	e702      	b.n	87518 <_svfprintf_r+0x2c4>
   87712:	2500      	movs	r5, #0
   87714:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   87716:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   8771a:	f854 7b04 	ldr.w	r7, [r4], #4
   8771e:	2f00      	cmp	r7, #0
   87720:	f000 859f 	beq.w	88262 <_svfprintf_r+0x100e>
   87724:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87726:	4613      	mov	r3, r2
   87728:	3301      	adds	r3, #1
   8772a:	f000 8770 	beq.w	8860e <_svfprintf_r+0x13ba>
   8772e:	4629      	mov	r1, r5
   87730:	4638      	mov	r0, r7
   87732:	f004 fabf 	bl	8bcb4 <memchr>
   87736:	900d      	str	r0, [sp, #52]	; 0x34
   87738:	2800      	cmp	r0, #0
   8773a:	f001 80b9 	beq.w	888b0 <_svfprintf_r+0x165c>
   8773e:	462b      	mov	r3, r5
   87740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   87742:	9509      	str	r5, [sp, #36]	; 0x24
   87744:	1bd2      	subs	r2, r2, r7
   87746:	920c      	str	r2, [sp, #48]	; 0x30
   87748:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   8774c:	9208      	str	r2, [sp, #32]
   8774e:	940e      	str	r4, [sp, #56]	; 0x38
   87750:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87754:	930d      	str	r3, [sp, #52]	; 0x34
   87756:	9312      	str	r3, [sp, #72]	; 0x48
   87758:	9316      	str	r3, [sp, #88]	; 0x58
   8775a:	9310      	str	r3, [sp, #64]	; 0x40
   8775c:	e79e      	b.n	8769c <_svfprintf_r+0x448>
   8775e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87760:	425b      	negs	r3, r3
   87762:	930b      	str	r3, [sp, #44]	; 0x2c
   87764:	9b07      	ldr	r3, [sp, #28]
   87766:	f89b 6000 	ldrb.w	r6, [fp]
   8776a:	f043 0304 	orr.w	r3, r3, #4
   8776e:	9307      	str	r3, [sp, #28]
   87770:	e5bb      	b.n	872ea <_svfprintf_r+0x96>
   87772:	9b07      	ldr	r3, [sp, #28]
   87774:	f043 0310 	orr.w	r3, r3, #16
   87778:	9308      	str	r3, [sp, #32]
   8777a:	9b08      	ldr	r3, [sp, #32]
   8777c:	069d      	lsls	r5, r3, #26
   8777e:	f140 83ea 	bpl.w	87f56 <_svfprintf_r+0xd02>
   87782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87784:	3307      	adds	r3, #7
   87786:	f023 0307 	bic.w	r3, r3, #7
   8778a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8778e:	930e      	str	r3, [sp, #56]	; 0x38
   87790:	2301      	movs	r3, #1
   87792:	e670      	b.n	87476 <_svfprintf_r+0x222>
   87794:	f647 0230 	movw	r2, #30768	; 0x7830
   87798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8779a:	9907      	ldr	r1, [sp, #28]
   8779c:	f853 4b04 	ldr.w	r4, [r3], #4
   877a0:	f041 0102 	orr.w	r1, r1, #2
   877a4:	930e      	str	r3, [sp, #56]	; 0x38
   877a6:	4b4e      	ldr	r3, [pc, #312]	; (878e0 <_svfprintf_r+0x68c>)
   877a8:	2500      	movs	r5, #0
   877aa:	9319      	str	r3, [sp, #100]	; 0x64
   877ac:	2678      	movs	r6, #120	; 0x78
   877ae:	2302      	movs	r3, #2
   877b0:	9108      	str	r1, [sp, #32]
   877b2:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   877b6:	e65e      	b.n	87476 <_svfprintf_r+0x222>
   877b8:	9b07      	ldr	r3, [sp, #28]
   877ba:	069d      	lsls	r5, r3, #26
   877bc:	f100 8408 	bmi.w	87fd0 <_svfprintf_r+0xd7c>
   877c0:	9b07      	ldr	r3, [sp, #28]
   877c2:	06dc      	lsls	r4, r3, #27
   877c4:	f100 86e1 	bmi.w	8858a <_svfprintf_r+0x1336>
   877c8:	9b07      	ldr	r3, [sp, #28]
   877ca:	0658      	lsls	r0, r3, #25
   877cc:	f100 8795 	bmi.w	886fa <_svfprintf_r+0x14a6>
   877d0:	9b07      	ldr	r3, [sp, #28]
   877d2:	0599      	lsls	r1, r3, #22
   877d4:	f140 86d9 	bpl.w	8858a <_svfprintf_r+0x1336>
   877d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   877da:	990a      	ldr	r1, [sp, #40]	; 0x28
   877dc:	f853 2b04 	ldr.w	r2, [r3], #4
   877e0:	465f      	mov	r7, fp
   877e2:	7011      	strb	r1, [r2, #0]
   877e4:	930e      	str	r3, [sp, #56]	; 0x38
   877e6:	e703      	b.n	875f0 <_svfprintf_r+0x39c>
   877e8:	f89b 6000 	ldrb.w	r6, [fp]
   877ec:	9b07      	ldr	r3, [sp, #28]
   877ee:	2e6c      	cmp	r6, #108	; 0x6c
   877f0:	f000 8508 	beq.w	88204 <_svfprintf_r+0xfb0>
   877f4:	f043 0310 	orr.w	r3, r3, #16
   877f8:	9307      	str	r3, [sp, #28]
   877fa:	e576      	b.n	872ea <_svfprintf_r+0x96>
   877fc:	f89b 6000 	ldrb.w	r6, [fp]
   87800:	9b07      	ldr	r3, [sp, #28]
   87802:	2e68      	cmp	r6, #104	; 0x68
   87804:	f000 8507 	beq.w	88216 <_svfprintf_r+0xfc2>
   87808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8780c:	9307      	str	r3, [sp, #28]
   8780e:	e56c      	b.n	872ea <_svfprintf_r+0x96>
   87810:	9b07      	ldr	r3, [sp, #28]
   87812:	f89b 6000 	ldrb.w	r6, [fp]
   87816:	f043 0308 	orr.w	r3, r3, #8
   8781a:	9307      	str	r3, [sp, #28]
   8781c:	e565      	b.n	872ea <_svfprintf_r+0x96>
   8781e:	4648      	mov	r0, r9
   87820:	f003 ff00 	bl	8b624 <_localeconv_r>
   87824:	6843      	ldr	r3, [r0, #4]
   87826:	4618      	mov	r0, r3
   87828:	931c      	str	r3, [sp, #112]	; 0x70
   8782a:	f005 f8f5 	bl	8ca18 <strlen>
   8782e:	4603      	mov	r3, r0
   87830:	4648      	mov	r0, r9
   87832:	461d      	mov	r5, r3
   87834:	931d      	str	r3, [sp, #116]	; 0x74
   87836:	f003 fef5 	bl	8b624 <_localeconv_r>
   8783a:	6882      	ldr	r2, [r0, #8]
   8783c:	2120      	movs	r1, #32
   8783e:	921a      	str	r2, [sp, #104]	; 0x68
   87840:	2d00      	cmp	r5, #0
   87842:	f43f adcd 	beq.w	873e0 <_svfprintf_r+0x18c>
   87846:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   87848:	2b00      	cmp	r3, #0
   8784a:	f43f adc9 	beq.w	873e0 <_svfprintf_r+0x18c>
   8784e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   87850:	781b      	ldrb	r3, [r3, #0]
   87852:	2b00      	cmp	r3, #0
   87854:	f43f adc4 	beq.w	873e0 <_svfprintf_r+0x18c>
   87858:	9b07      	ldr	r3, [sp, #28]
   8785a:	f89b 6000 	ldrb.w	r6, [fp]
   8785e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   87862:	9307      	str	r3, [sp, #28]
   87864:	e541      	b.n	872ea <_svfprintf_r+0x96>
   87866:	9b07      	ldr	r3, [sp, #28]
   87868:	f89b 6000 	ldrb.w	r6, [fp]
   8786c:	f043 0301 	orr.w	r3, r3, #1
   87870:	9307      	str	r3, [sp, #28]
   87872:	e53a      	b.n	872ea <_svfprintf_r+0x96>
   87874:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   87878:	2b00      	cmp	r3, #0
   8787a:	f47f adb1 	bne.w	873e0 <_svfprintf_r+0x18c>
   8787e:	f89b 6000 	ldrb.w	r6, [fp]
   87882:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   87886:	e530      	b.n	872ea <_svfprintf_r+0x96>
   87888:	9b07      	ldr	r3, [sp, #28]
   8788a:	f89b 6000 	ldrb.w	r6, [fp]
   8788e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   87892:	9307      	str	r3, [sp, #28]
   87894:	e529      	b.n	872ea <_svfprintf_r+0x96>
   87896:	465a      	mov	r2, fp
   87898:	f812 6b01 	ldrb.w	r6, [r2], #1
   8789c:	2e2a      	cmp	r6, #42	; 0x2a
   8789e:	f001 8251 	beq.w	88d44 <_svfprintf_r+0x1af0>
   878a2:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   878a6:	2b09      	cmp	r3, #9
   878a8:	4693      	mov	fp, r2
   878aa:	bf98      	it	ls
   878ac:	2200      	movls	r2, #0
   878ae:	f201 80ef 	bhi.w	88a90 <_svfprintf_r+0x183c>
   878b2:	f81b 6b01 	ldrb.w	r6, [fp], #1
   878b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   878ba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   878be:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   878c2:	2b09      	cmp	r3, #9
   878c4:	d9f5      	bls.n	878b2 <_svfprintf_r+0x65e>
   878c6:	9209      	str	r2, [sp, #36]	; 0x24
   878c8:	e511      	b.n	872ee <_svfprintf_r+0x9a>
   878ca:	f89b 6000 	ldrb.w	r6, [fp]
   878ce:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   878d2:	e50a      	b.n	872ea <_svfprintf_r+0x96>
   878d4:	7fefffff 	.word	0x7fefffff
   878d8:	0008da54 	.word	0x0008da54
   878dc:	0008da58 	.word	0x0008da58
   878e0:	0008da64 	.word	0x0008da64
   878e4:	9a07      	ldr	r2, [sp, #28]
   878e6:	9208      	str	r2, [sp, #32]
   878e8:	2b01      	cmp	r3, #1
   878ea:	f000 81b4 	beq.w	87c56 <_svfprintf_r+0xa02>
   878ee:	2b02      	cmp	r3, #2
   878f0:	f000 8159 	beq.w	87ba6 <_svfprintf_r+0x952>
   878f4:	af56      	add	r7, sp, #344	; 0x158
   878f6:	08e2      	lsrs	r2, r4, #3
   878f8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   878fc:	08e9      	lsrs	r1, r5, #3
   878fe:	f004 0307 	and.w	r3, r4, #7
   87902:	460d      	mov	r5, r1
   87904:	4614      	mov	r4, r2
   87906:	3330      	adds	r3, #48	; 0x30
   87908:	ea54 0105 	orrs.w	r1, r4, r5
   8790c:	463a      	mov	r2, r7
   8790e:	f807 3d01 	strb.w	r3, [r7, #-1]!
   87912:	d1f0      	bne.n	878f6 <_svfprintf_r+0x6a2>
   87914:	9908      	ldr	r1, [sp, #32]
   87916:	4608      	mov	r0, r1
   87918:	07c0      	lsls	r0, r0, #31
   8791a:	f100 82b8 	bmi.w	87e8e <_svfprintf_r+0xc3a>
   8791e:	ab56      	add	r3, sp, #344	; 0x158
   87920:	1bdb      	subs	r3, r3, r7
   87922:	9107      	str	r1, [sp, #28]
   87924:	930c      	str	r3, [sp, #48]	; 0x30
   87926:	2300      	movs	r3, #0
   87928:	9909      	ldr	r1, [sp, #36]	; 0x24
   8792a:	930d      	str	r3, [sp, #52]	; 0x34
   8792c:	9312      	str	r3, [sp, #72]	; 0x48
   8792e:	9316      	str	r3, [sp, #88]	; 0x58
   87930:	9310      	str	r3, [sp, #64]	; 0x40
   87932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87934:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87938:	428b      	cmp	r3, r1
   8793a:	bfb8      	it	lt
   8793c:	460b      	movlt	r3, r1
   8793e:	9308      	str	r3, [sp, #32]
   87940:	e6ac      	b.n	8769c <_svfprintf_r+0x448>
   87942:	2e65      	cmp	r6, #101	; 0x65
   87944:	f340 80d8 	ble.w	87af8 <_svfprintf_r+0x8a4>
   87948:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8794c:	2200      	movs	r2, #0
   8794e:	2300      	movs	r3, #0
   87950:	f005 ffc6 	bl	8d8e0 <__aeabi_dcmpeq>
   87954:	2800      	cmp	r0, #0
   87956:	f000 821e 	beq.w	87d96 <_svfprintf_r+0xb42>
   8795a:	2101      	movs	r1, #1
   8795c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8795e:	4ac5      	ldr	r2, [pc, #788]	; (87c74 <_svfprintf_r+0xa20>)
   87960:	440b      	add	r3, r1
   87962:	440c      	add	r4, r1
   87964:	2b07      	cmp	r3, #7
   87966:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8796a:	e9c8 2100 	strd	r2, r1, [r8]
   8796e:	f300 85bb 	bgt.w	884e8 <_svfprintf_r+0x1294>
   87972:	f108 0808 	add.w	r8, r8, #8
   87976:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87978:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8797a:	4293      	cmp	r3, r2
   8797c:	f280 8321 	bge.w	87fc2 <_svfprintf_r+0xd6e>
   87980:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87982:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87984:	3301      	adds	r3, #1
   87986:	9918      	ldr	r1, [sp, #96]	; 0x60
   87988:	4414      	add	r4, r2
   8798a:	2b07      	cmp	r3, #7
   8798c:	e9c8 1200 	strd	r1, r2, [r8]
   87990:	942c      	str	r4, [sp, #176]	; 0xb0
   87992:	932b      	str	r3, [sp, #172]	; 0xac
   87994:	f300 8448 	bgt.w	88228 <_svfprintf_r+0xfd4>
   87998:	f108 0808 	add.w	r8, r8, #8
   8799c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8799e:	1e5d      	subs	r5, r3, #1
   879a0:	2d00      	cmp	r5, #0
   879a2:	f77f ae06 	ble.w	875b2 <_svfprintf_r+0x35e>
   879a6:	2d10      	cmp	r5, #16
   879a8:	f340 85c7 	ble.w	8853a <_svfprintf_r+0x12e6>
   879ac:	4fb2      	ldr	r7, [pc, #712]	; (87c78 <_svfprintf_r+0xa24>)
   879ae:	2610      	movs	r6, #16
   879b0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   879b2:	970f      	str	r7, [sp, #60]	; 0x3c
   879b4:	e005      	b.n	879c2 <_svfprintf_r+0x76e>
   879b6:	f108 0808 	add.w	r8, r8, #8
   879ba:	3d10      	subs	r5, #16
   879bc:	2d10      	cmp	r5, #16
   879be:	f340 85bf 	ble.w	88540 <_svfprintf_r+0x12ec>
   879c2:	3301      	adds	r3, #1
   879c4:	3410      	adds	r4, #16
   879c6:	2b07      	cmp	r3, #7
   879c8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   879cc:	e9c8 7600 	strd	r7, r6, [r8]
   879d0:	ddf1      	ble.n	879b6 <_svfprintf_r+0x762>
   879d2:	4651      	mov	r1, sl
   879d4:	4648      	mov	r0, r9
   879d6:	aa2a      	add	r2, sp, #168	; 0xa8
   879d8:	f005 f880 	bl	8cadc <__ssprint_r>
   879dc:	2800      	cmp	r0, #0
   879de:	f040 8081 	bne.w	87ae4 <_svfprintf_r+0x890>
   879e2:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   879e6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   879ea:	e7e6      	b.n	879ba <_svfprintf_r+0x766>
   879ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   879ee:	9a08      	ldr	r2, [sp, #32]
   879f0:	1a9d      	subs	r5, r3, r2
   879f2:	2d00      	cmp	r5, #0
   879f4:	f77f adc6 	ble.w	87584 <_svfprintf_r+0x330>
   879f8:	2d10      	cmp	r5, #16
   879fa:	f341 8069 	ble.w	88ad0 <_svfprintf_r+0x187c>
   879fe:	489e      	ldr	r0, [pc, #632]	; (87c78 <_svfprintf_r+0xa24>)
   87a00:	4621      	mov	r1, r4
   87a02:	2310      	movs	r3, #16
   87a04:	4604      	mov	r4, r0
   87a06:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87a08:	900f      	str	r0, [sp, #60]	; 0x3c
   87a0a:	e004      	b.n	87a16 <_svfprintf_r+0x7c2>
   87a0c:	3d10      	subs	r5, #16
   87a0e:	2d10      	cmp	r5, #16
   87a10:	f108 0808 	add.w	r8, r8, #8
   87a14:	dd17      	ble.n	87a46 <_svfprintf_r+0x7f2>
   87a16:	3201      	adds	r2, #1
   87a18:	3110      	adds	r1, #16
   87a1a:	2a07      	cmp	r2, #7
   87a1c:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   87a20:	e9c8 4300 	strd	r4, r3, [r8]
   87a24:	ddf2      	ble.n	87a0c <_svfprintf_r+0x7b8>
   87a26:	4651      	mov	r1, sl
   87a28:	4648      	mov	r0, r9
   87a2a:	aa2a      	add	r2, sp, #168	; 0xa8
   87a2c:	f005 f856 	bl	8cadc <__ssprint_r>
   87a30:	2800      	cmp	r0, #0
   87a32:	d157      	bne.n	87ae4 <_svfprintf_r+0x890>
   87a34:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87a38:	3d10      	subs	r5, #16
   87a3a:	2d10      	cmp	r5, #16
   87a3c:	f04f 0310 	mov.w	r3, #16
   87a40:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a44:	dce7      	bgt.n	87a16 <_svfprintf_r+0x7c2>
   87a46:	460c      	mov	r4, r1
   87a48:	3201      	adds	r2, #1
   87a4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87a4c:	442c      	add	r4, r5
   87a4e:	2a07      	cmp	r2, #7
   87a50:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87a54:	e9c8 3500 	strd	r3, r5, [r8]
   87a58:	f300 858a 	bgt.w	88570 <_svfprintf_r+0x131c>
   87a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87a5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87a60:	f108 0808 	add.w	r8, r8, #8
   87a64:	1a9d      	subs	r5, r3, r2
   87a66:	2d00      	cmp	r5, #0
   87a68:	f77f ad92 	ble.w	87590 <_svfprintf_r+0x33c>
   87a6c:	2d10      	cmp	r5, #16
   87a6e:	f340 860a 	ble.w	88686 <_svfprintf_r+0x1432>
   87a72:	4881      	ldr	r0, [pc, #516]	; (87c78 <_svfprintf_r+0xa24>)
   87a74:	4621      	mov	r1, r4
   87a76:	2310      	movs	r3, #16
   87a78:	4604      	mov	r4, r0
   87a7a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87a7c:	900f      	str	r0, [sp, #60]	; 0x3c
   87a7e:	e004      	b.n	87a8a <_svfprintf_r+0x836>
   87a80:	3d10      	subs	r5, #16
   87a82:	2d10      	cmp	r5, #16
   87a84:	f108 0808 	add.w	r8, r8, #8
   87a88:	dd16      	ble.n	87ab8 <_svfprintf_r+0x864>
   87a8a:	3201      	adds	r2, #1
   87a8c:	3110      	adds	r1, #16
   87a8e:	2a07      	cmp	r2, #7
   87a90:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   87a94:	e9c8 4300 	strd	r4, r3, [r8]
   87a98:	ddf2      	ble.n	87a80 <_svfprintf_r+0x82c>
   87a9a:	4651      	mov	r1, sl
   87a9c:	4648      	mov	r0, r9
   87a9e:	aa2a      	add	r2, sp, #168	; 0xa8
   87aa0:	f005 f81c 	bl	8cadc <__ssprint_r>
   87aa4:	b9f0      	cbnz	r0, 87ae4 <_svfprintf_r+0x890>
   87aa6:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87aaa:	3d10      	subs	r5, #16
   87aac:	2d10      	cmp	r5, #16
   87aae:	f04f 0310 	mov.w	r3, #16
   87ab2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87ab6:	dce8      	bgt.n	87a8a <_svfprintf_r+0x836>
   87ab8:	460c      	mov	r4, r1
   87aba:	3201      	adds	r2, #1
   87abc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87abe:	442c      	add	r4, r5
   87ac0:	2a07      	cmp	r2, #7
   87ac2:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87ac6:	e9c8 3500 	strd	r3, r5, [r8]
   87aca:	f300 8237 	bgt.w	87f3c <_svfprintf_r+0xce8>
   87ace:	f108 0808 	add.w	r8, r8, #8
   87ad2:	e55d      	b.n	87590 <_svfprintf_r+0x33c>
   87ad4:	4651      	mov	r1, sl
   87ad6:	4648      	mov	r0, r9
   87ad8:	aa2a      	add	r2, sp, #168	; 0xa8
   87ada:	f004 ffff 	bl	8cadc <__ssprint_r>
   87ade:	2800      	cmp	r0, #0
   87ae0:	f43f ad7b 	beq.w	875da <_svfprintf_r+0x386>
   87ae4:	46d3      	mov	fp, sl
   87ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87ae8:	2b00      	cmp	r3, #0
   87aea:	f43f ad8a 	beq.w	87602 <_svfprintf_r+0x3ae>
   87aee:	4648      	mov	r0, r9
   87af0:	990d      	ldr	r1, [sp, #52]	; 0x34
   87af2:	f003 faf1 	bl	8b0d8 <_free_r>
   87af6:	e584      	b.n	87602 <_svfprintf_r+0x3ae>
   87af8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87afa:	2b01      	cmp	r3, #1
   87afc:	f340 81d5 	ble.w	87eaa <_svfprintf_r+0xc56>
   87b00:	2301      	movs	r3, #1
   87b02:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87b04:	441c      	add	r4, r3
   87b06:	441d      	add	r5, r3
   87b08:	2d07      	cmp	r5, #7
   87b0a:	942c      	str	r4, [sp, #176]	; 0xb0
   87b0c:	f8c8 7000 	str.w	r7, [r8]
   87b10:	952b      	str	r5, [sp, #172]	; 0xac
   87b12:	f8c8 3004 	str.w	r3, [r8, #4]
   87b16:	f300 823a 	bgt.w	87f8e <_svfprintf_r+0xd3a>
   87b1a:	f108 0808 	add.w	r8, r8, #8
   87b1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87b20:	3501      	adds	r5, #1
   87b22:	9a18      	ldr	r2, [sp, #96]	; 0x60
   87b24:	441c      	add	r4, r3
   87b26:	2d07      	cmp	r5, #7
   87b28:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87b2c:	e9c8 2300 	strd	r2, r3, [r8]
   87b30:	f300 823a 	bgt.w	87fa8 <_svfprintf_r+0xd54>
   87b34:	f108 0808 	add.w	r8, r8, #8
   87b38:	2300      	movs	r3, #0
   87b3a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87b3e:	2200      	movs	r2, #0
   87b40:	f005 fece 	bl	8d8e0 <__aeabi_dcmpeq>
   87b44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87b46:	2800      	cmp	r0, #0
   87b48:	f040 81cd 	bne.w	87ee6 <_svfprintf_r+0xc92>
   87b4c:	3b01      	subs	r3, #1
   87b4e:	3501      	adds	r5, #1
   87b50:	3701      	adds	r7, #1
   87b52:	441c      	add	r4, r3
   87b54:	2d07      	cmp	r5, #7
   87b56:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87b5a:	f8c8 7000 	str.w	r7, [r8]
   87b5e:	f8c8 3004 	str.w	r3, [r8, #4]
   87b62:	f300 84dc 	bgt.w	8851e <_svfprintf_r+0x12ca>
   87b66:	f108 0808 	add.w	r8, r8, #8
   87b6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   87b6c:	3501      	adds	r5, #1
   87b6e:	4414      	add	r4, r2
   87b70:	ab26      	add	r3, sp, #152	; 0x98
   87b72:	2d07      	cmp	r5, #7
   87b74:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87b78:	e9c8 3200 	strd	r3, r2, [r8]
   87b7c:	f77f ad17 	ble.w	875ae <_svfprintf_r+0x35a>
   87b80:	4651      	mov	r1, sl
   87b82:	4648      	mov	r0, r9
   87b84:	aa2a      	add	r2, sp, #168	; 0xa8
   87b86:	f004 ffa9 	bl	8cadc <__ssprint_r>
   87b8a:	2800      	cmp	r0, #0
   87b8c:	d1aa      	bne.n	87ae4 <_svfprintf_r+0x890>
   87b8e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87b90:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87b94:	e50d      	b.n	875b2 <_svfprintf_r+0x35e>
   87b96:	2b01      	cmp	r3, #1
   87b98:	f000 87ca 	beq.w	88b30 <_svfprintf_r+0x18dc>
   87b9c:	2b02      	cmp	r3, #2
   87b9e:	9b07      	ldr	r3, [sp, #28]
   87ba0:	9308      	str	r3, [sp, #32]
   87ba2:	f47f aea7 	bne.w	878f4 <_svfprintf_r+0x6a0>
   87ba6:	9819      	ldr	r0, [sp, #100]	; 0x64
   87ba8:	af56      	add	r7, sp, #344	; 0x158
   87baa:	0923      	lsrs	r3, r4, #4
   87bac:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   87bb0:	0929      	lsrs	r1, r5, #4
   87bb2:	f004 020f 	and.w	r2, r4, #15
   87bb6:	460d      	mov	r5, r1
   87bb8:	461c      	mov	r4, r3
   87bba:	5c83      	ldrb	r3, [r0, r2]
   87bbc:	f807 3d01 	strb.w	r3, [r7, #-1]!
   87bc0:	ea54 0305 	orrs.w	r3, r4, r5
   87bc4:	d1f1      	bne.n	87baa <_svfprintf_r+0x956>
   87bc6:	9b08      	ldr	r3, [sp, #32]
   87bc8:	9307      	str	r3, [sp, #28]
   87bca:	ab56      	add	r3, sp, #344	; 0x158
   87bcc:	1bdb      	subs	r3, r3, r7
   87bce:	930c      	str	r3, [sp, #48]	; 0x30
   87bd0:	e6a9      	b.n	87926 <_svfprintf_r+0x6d2>
   87bd2:	2d10      	cmp	r5, #16
   87bd4:	f340 8668 	ble.w	888a8 <_svfprintf_r+0x1654>
   87bd8:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87bdc:	931e      	str	r3, [sp, #120]	; 0x78
   87bde:	460b      	mov	r3, r1
   87be0:	4639      	mov	r1, r7
   87be2:	2410      	movs	r4, #16
   87be4:	4637      	mov	r7, r6
   87be6:	4656      	mov	r6, sl
   87be8:	46ca      	mov	sl, r9
   87bea:	4689      	mov	r9, r1
   87bec:	e004      	b.n	87bf8 <_svfprintf_r+0x9a4>
   87bee:	3d10      	subs	r5, #16
   87bf0:	2d10      	cmp	r5, #16
   87bf2:	f108 0808 	add.w	r8, r8, #8
   87bf6:	dd17      	ble.n	87c28 <_svfprintf_r+0x9d4>
   87bf8:	3201      	adds	r2, #1
   87bfa:	4920      	ldr	r1, [pc, #128]	; (87c7c <_svfprintf_r+0xa28>)
   87bfc:	3310      	adds	r3, #16
   87bfe:	2a07      	cmp	r2, #7
   87c00:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   87c04:	e9c8 1400 	strd	r1, r4, [r8]
   87c08:	ddf1      	ble.n	87bee <_svfprintf_r+0x99a>
   87c0a:	4631      	mov	r1, r6
   87c0c:	4650      	mov	r0, sl
   87c0e:	aa2a      	add	r2, sp, #168	; 0xa8
   87c10:	f004 ff64 	bl	8cadc <__ssprint_r>
   87c14:	2800      	cmp	r0, #0
   87c16:	f040 8458 	bne.w	884ca <_svfprintf_r+0x1276>
   87c1a:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   87c1e:	3d10      	subs	r5, #16
   87c20:	2d10      	cmp	r5, #16
   87c22:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c26:	dce7      	bgt.n	87bf8 <_svfprintf_r+0x9a4>
   87c28:	4648      	mov	r0, r9
   87c2a:	46d1      	mov	r9, sl
   87c2c:	46b2      	mov	sl, r6
   87c2e:	463e      	mov	r6, r7
   87c30:	4607      	mov	r7, r0
   87c32:	4619      	mov	r1, r3
   87c34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87c36:	194c      	adds	r4, r1, r5
   87c38:	3201      	adds	r2, #1
   87c3a:	4910      	ldr	r1, [pc, #64]	; (87c7c <_svfprintf_r+0xa28>)
   87c3c:	2a07      	cmp	r2, #7
   87c3e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87c42:	e9c8 1500 	strd	r1, r5, [r8]
   87c46:	f300 841f 	bgt.w	88488 <_svfprintf_r+0x1234>
   87c4a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87c4e:	f108 0808 	add.w	r8, r8, #8
   87c52:	e474      	b.n	8753e <_svfprintf_r+0x2ea>
   87c54:	9308      	str	r3, [sp, #32]
   87c56:	2d00      	cmp	r5, #0
   87c58:	bf08      	it	eq
   87c5a:	2c0a      	cmpeq	r4, #10
   87c5c:	f080 83d0 	bcs.w	88400 <_svfprintf_r+0x11ac>
   87c60:	9b08      	ldr	r3, [sp, #32]
   87c62:	3430      	adds	r4, #48	; 0x30
   87c64:	9307      	str	r3, [sp, #28]
   87c66:	2301      	movs	r3, #1
   87c68:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   87c6c:	930c      	str	r3, [sp, #48]	; 0x30
   87c6e:	f20d 1757 	addw	r7, sp, #343	; 0x157
   87c72:	e658      	b.n	87926 <_svfprintf_r+0x6d2>
   87c74:	0008da94 	.word	0x0008da94
   87c78:	0008daa8 	.word	0x0008daa8
   87c7c:	0008da98 	.word	0x0008da98
   87c80:	4651      	mov	r1, sl
   87c82:	4648      	mov	r0, r9
   87c84:	aa2a      	add	r2, sp, #168	; 0xa8
   87c86:	f004 ff29 	bl	8cadc <__ssprint_r>
   87c8a:	2800      	cmp	r0, #0
   87c8c:	f47f af2a 	bne.w	87ae4 <_svfprintf_r+0x890>
   87c90:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87c92:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87c94:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c98:	2a00      	cmp	r2, #0
   87c9a:	f040 847f 	bne.w	8859c <_svfprintf_r+0x1348>
   87c9e:	9b07      	ldr	r3, [sp, #28]
   87ca0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87ca2:	f003 0301 	and.w	r3, r3, #1
   87ca6:	4313      	orrs	r3, r2
   87ca8:	f43f ac83 	beq.w	875b2 <_svfprintf_r+0x35e>
   87cac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87cae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87cb0:	3301      	adds	r3, #1
   87cb2:	9918      	ldr	r1, [sp, #96]	; 0x60
   87cb4:	4414      	add	r4, r2
   87cb6:	2b07      	cmp	r3, #7
   87cb8:	e9c8 1200 	strd	r1, r2, [r8]
   87cbc:	942c      	str	r4, [sp, #176]	; 0xb0
   87cbe:	932b      	str	r3, [sp, #172]	; 0xac
   87cc0:	f300 8524 	bgt.w	8870c <_svfprintf_r+0x14b8>
   87cc4:	f108 0808 	add.w	r8, r8, #8
   87cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87cca:	3301      	adds	r3, #1
   87ccc:	4414      	add	r4, r2
   87cce:	2b07      	cmp	r3, #7
   87cd0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87cd4:	e9c8 7200 	strd	r7, r2, [r8]
   87cd8:	f77f ac69 	ble.w	875ae <_svfprintf_r+0x35a>
   87cdc:	4651      	mov	r1, sl
   87cde:	4648      	mov	r0, r9
   87ce0:	aa2a      	add	r2, sp, #168	; 0xa8
   87ce2:	f004 fefb 	bl	8cadc <__ssprint_r>
   87ce6:	2800      	cmp	r0, #0
   87ce8:	f47f aefc 	bne.w	87ae4 <_svfprintf_r+0x890>
   87cec:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87cee:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87cf2:	e45e      	b.n	875b2 <_svfprintf_r+0x35e>
   87cf4:	4651      	mov	r1, sl
   87cf6:	4648      	mov	r0, r9
   87cf8:	aa2a      	add	r2, sp, #168	; 0xa8
   87cfa:	931e      	str	r3, [sp, #120]	; 0x78
   87cfc:	f004 feee 	bl	8cadc <__ssprint_r>
   87d00:	2800      	cmp	r0, #0
   87d02:	f47f aeef 	bne.w	87ae4 <_svfprintf_r+0x890>
   87d06:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87d08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87d0a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87d0e:	e426      	b.n	8755e <_svfprintf_r+0x30a>
   87d10:	4651      	mov	r1, sl
   87d12:	4648      	mov	r0, r9
   87d14:	aa2a      	add	r2, sp, #168	; 0xa8
   87d16:	f004 fee1 	bl	8cadc <__ssprint_r>
   87d1a:	2800      	cmp	r0, #0
   87d1c:	f47f aee2 	bne.w	87ae4 <_svfprintf_r+0x890>
   87d20:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87d22:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87d26:	e429      	b.n	8757c <_svfprintf_r+0x328>
   87d28:	2d10      	cmp	r5, #16
   87d2a:	f340 86be 	ble.w	88aaa <_svfprintf_r+0x1856>
   87d2e:	2610      	movs	r6, #16
   87d30:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87d32:	e004      	b.n	87d3e <_svfprintf_r+0xaea>
   87d34:	3d10      	subs	r5, #16
   87d36:	2d10      	cmp	r5, #16
   87d38:	f108 0808 	add.w	r8, r8, #8
   87d3c:	dd17      	ble.n	87d6e <_svfprintf_r+0xb1a>
   87d3e:	3301      	adds	r3, #1
   87d40:	4aad      	ldr	r2, [pc, #692]	; (87ff8 <_svfprintf_r+0xda4>)
   87d42:	3410      	adds	r4, #16
   87d44:	2b07      	cmp	r3, #7
   87d46:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87d4a:	e9c8 2600 	strd	r2, r6, [r8]
   87d4e:	ddf1      	ble.n	87d34 <_svfprintf_r+0xae0>
   87d50:	4651      	mov	r1, sl
   87d52:	4648      	mov	r0, r9
   87d54:	aa2a      	add	r2, sp, #168	; 0xa8
   87d56:	f004 fec1 	bl	8cadc <__ssprint_r>
   87d5a:	2800      	cmp	r0, #0
   87d5c:	f47f aec2 	bne.w	87ae4 <_svfprintf_r+0x890>
   87d60:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87d64:	3d10      	subs	r5, #16
   87d66:	2d10      	cmp	r5, #16
   87d68:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87d6c:	dce7      	bgt.n	87d3e <_svfprintf_r+0xaea>
   87d6e:	3301      	adds	r3, #1
   87d70:	4aa1      	ldr	r2, [pc, #644]	; (87ff8 <_svfprintf_r+0xda4>)
   87d72:	442c      	add	r4, r5
   87d74:	2b07      	cmp	r3, #7
   87d76:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87d7a:	e9c8 2500 	strd	r2, r5, [r8]
   87d7e:	f77f ac21 	ble.w	875c4 <_svfprintf_r+0x370>
   87d82:	4651      	mov	r1, sl
   87d84:	4648      	mov	r0, r9
   87d86:	aa2a      	add	r2, sp, #168	; 0xa8
   87d88:	f004 fea8 	bl	8cadc <__ssprint_r>
   87d8c:	2800      	cmp	r0, #0
   87d8e:	f47f aea9 	bne.w	87ae4 <_svfprintf_r+0x890>
   87d92:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87d94:	e416      	b.n	875c4 <_svfprintf_r+0x370>
   87d96:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87d98:	2a00      	cmp	r2, #0
   87d9a:	f340 8386 	ble.w	884aa <_svfprintf_r+0x1256>
   87d9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87da0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87da2:	4293      	cmp	r3, r2
   87da4:	bfa8      	it	ge
   87da6:	4613      	movge	r3, r2
   87da8:	2b00      	cmp	r3, #0
   87daa:	461d      	mov	r5, r3
   87dac:	dd0b      	ble.n	87dc6 <_svfprintf_r+0xb72>
   87dae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87db0:	442c      	add	r4, r5
   87db2:	3301      	adds	r3, #1
   87db4:	2b07      	cmp	r3, #7
   87db6:	e9c8 7500 	strd	r7, r5, [r8]
   87dba:	942c      	str	r4, [sp, #176]	; 0xb0
   87dbc:	932b      	str	r3, [sp, #172]	; 0xac
   87dbe:	f300 851e 	bgt.w	887fe <_svfprintf_r+0x15aa>
   87dc2:	f108 0808 	add.w	r8, r8, #8
   87dc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87dc8:	2d00      	cmp	r5, #0
   87dca:	bfa8      	it	ge
   87dcc:	1b5b      	subge	r3, r3, r5
   87dce:	2b00      	cmp	r3, #0
   87dd0:	461d      	mov	r5, r3
   87dd2:	f300 8256 	bgt.w	88282 <_svfprintf_r+0x102e>
   87dd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87dd8:	443b      	add	r3, r7
   87dda:	461e      	mov	r6, r3
   87ddc:	9b07      	ldr	r3, [sp, #28]
   87dde:	055b      	lsls	r3, r3, #21
   87de0:	f100 8277 	bmi.w	882d2 <_svfprintf_r+0x107e>
   87de4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87de6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87de8:	4293      	cmp	r3, r2
   87dea:	db03      	blt.n	87df4 <_svfprintf_r+0xba0>
   87dec:	9a07      	ldr	r2, [sp, #28]
   87dee:	07d5      	lsls	r5, r2, #31
   87df0:	f140 847a 	bpl.w	886e8 <_svfprintf_r+0x1494>
   87df4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87df6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87df8:	3201      	adds	r2, #1
   87dfa:	9818      	ldr	r0, [sp, #96]	; 0x60
   87dfc:	440c      	add	r4, r1
   87dfe:	2a07      	cmp	r2, #7
   87e00:	e9c8 0100 	strd	r0, r1, [r8]
   87e04:	942c      	str	r4, [sp, #176]	; 0xb0
   87e06:	922b      	str	r2, [sp, #172]	; 0xac
   87e08:	f300 8506 	bgt.w	88818 <_svfprintf_r+0x15c4>
   87e0c:	f108 0808 	add.w	r8, r8, #8
   87e10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87e12:	18bd      	adds	r5, r7, r2
   87e14:	1bad      	subs	r5, r5, r6
   87e16:	1ad3      	subs	r3, r2, r3
   87e18:	429d      	cmp	r5, r3
   87e1a:	bfa8      	it	ge
   87e1c:	461d      	movge	r5, r3
   87e1e:	2d00      	cmp	r5, #0
   87e20:	dd0b      	ble.n	87e3a <_svfprintf_r+0xbe6>
   87e22:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87e24:	442c      	add	r4, r5
   87e26:	3201      	adds	r2, #1
   87e28:	2a07      	cmp	r2, #7
   87e2a:	e9c8 6500 	strd	r6, r5, [r8]
   87e2e:	942c      	str	r4, [sp, #176]	; 0xb0
   87e30:	922b      	str	r2, [sp, #172]	; 0xac
   87e32:	f300 855f 	bgt.w	888f4 <_svfprintf_r+0x16a0>
   87e36:	f108 0808 	add.w	r8, r8, #8
   87e3a:	2d00      	cmp	r5, #0
   87e3c:	bfb4      	ite	lt
   87e3e:	461d      	movlt	r5, r3
   87e40:	1b5d      	subge	r5, r3, r5
   87e42:	2d00      	cmp	r5, #0
   87e44:	f77f abb5 	ble.w	875b2 <_svfprintf_r+0x35e>
   87e48:	2d10      	cmp	r5, #16
   87e4a:	f340 8376 	ble.w	8853a <_svfprintf_r+0x12e6>
   87e4e:	4f6b      	ldr	r7, [pc, #428]	; (87ffc <_svfprintf_r+0xda8>)
   87e50:	2610      	movs	r6, #16
   87e52:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87e54:	970f      	str	r7, [sp, #60]	; 0x3c
   87e56:	e005      	b.n	87e64 <_svfprintf_r+0xc10>
   87e58:	f108 0808 	add.w	r8, r8, #8
   87e5c:	3d10      	subs	r5, #16
   87e5e:	2d10      	cmp	r5, #16
   87e60:	f340 836e 	ble.w	88540 <_svfprintf_r+0x12ec>
   87e64:	3301      	adds	r3, #1
   87e66:	3410      	adds	r4, #16
   87e68:	2b07      	cmp	r3, #7
   87e6a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87e6e:	e9c8 7600 	strd	r7, r6, [r8]
   87e72:	ddf1      	ble.n	87e58 <_svfprintf_r+0xc04>
   87e74:	4651      	mov	r1, sl
   87e76:	4648      	mov	r0, r9
   87e78:	aa2a      	add	r2, sp, #168	; 0xa8
   87e7a:	f004 fe2f 	bl	8cadc <__ssprint_r>
   87e7e:	2800      	cmp	r0, #0
   87e80:	f47f ae30 	bne.w	87ae4 <_svfprintf_r+0x890>
   87e84:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87e88:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87e8c:	e7e6      	b.n	87e5c <_svfprintf_r+0xc08>
   87e8e:	2b30      	cmp	r3, #48	; 0x30
   87e90:	f43f ae99 	beq.w	87bc6 <_svfprintf_r+0x972>
   87e94:	2330      	movs	r3, #48	; 0x30
   87e96:	3a02      	subs	r2, #2
   87e98:	f807 3c01 	strb.w	r3, [r7, #-1]
   87e9c:	9908      	ldr	r1, [sp, #32]
   87e9e:	ab56      	add	r3, sp, #344	; 0x158
   87ea0:	1a9b      	subs	r3, r3, r2
   87ea2:	4617      	mov	r7, r2
   87ea4:	9107      	str	r1, [sp, #28]
   87ea6:	930c      	str	r3, [sp, #48]	; 0x30
   87ea8:	e53d      	b.n	87926 <_svfprintf_r+0x6d2>
   87eaa:	9b07      	ldr	r3, [sp, #28]
   87eac:	07d8      	lsls	r0, r3, #31
   87eae:	f53f ae27 	bmi.w	87b00 <_svfprintf_r+0x8ac>
   87eb2:	2301      	movs	r3, #1
   87eb4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87eb6:	441c      	add	r4, r3
   87eb8:	441d      	add	r5, r3
   87eba:	2d07      	cmp	r5, #7
   87ebc:	942c      	str	r4, [sp, #176]	; 0xb0
   87ebe:	f8c8 7000 	str.w	r7, [r8]
   87ec2:	952b      	str	r5, [sp, #172]	; 0xac
   87ec4:	f8c8 3004 	str.w	r3, [r8, #4]
   87ec8:	f77f ae4d 	ble.w	87b66 <_svfprintf_r+0x912>
   87ecc:	4651      	mov	r1, sl
   87ece:	4648      	mov	r0, r9
   87ed0:	aa2a      	add	r2, sp, #168	; 0xa8
   87ed2:	f004 fe03 	bl	8cadc <__ssprint_r>
   87ed6:	2800      	cmp	r0, #0
   87ed8:	f47f ae04 	bne.w	87ae4 <_svfprintf_r+0x890>
   87edc:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87ee0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87ee4:	e641      	b.n	87b6a <_svfprintf_r+0x916>
   87ee6:	1e5e      	subs	r6, r3, #1
   87ee8:	2e00      	cmp	r6, #0
   87eea:	f77f ae3e 	ble.w	87b6a <_svfprintf_r+0x916>
   87eee:	2e10      	cmp	r6, #16
   87ef0:	f340 871e 	ble.w	88d30 <_svfprintf_r+0x1adc>
   87ef4:	4b41      	ldr	r3, [pc, #260]	; (87ffc <_svfprintf_r+0xda8>)
   87ef6:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   87efa:	2710      	movs	r7, #16
   87efc:	46d3      	mov	fp, sl
   87efe:	930f      	str	r3, [sp, #60]	; 0x3c
   87f00:	46ca      	mov	sl, r9
   87f02:	4699      	mov	r9, r3
   87f04:	e005      	b.n	87f12 <_svfprintf_r+0xcbe>
   87f06:	f108 0808 	add.w	r8, r8, #8
   87f0a:	3e10      	subs	r6, #16
   87f0c:	2e10      	cmp	r6, #16
   87f0e:	f340 82f8 	ble.w	88502 <_svfprintf_r+0x12ae>
   87f12:	3501      	adds	r5, #1
   87f14:	3410      	adds	r4, #16
   87f16:	2d07      	cmp	r5, #7
   87f18:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87f1c:	e9c8 9700 	strd	r9, r7, [r8]
   87f20:	ddf1      	ble.n	87f06 <_svfprintf_r+0xcb2>
   87f22:	4659      	mov	r1, fp
   87f24:	4650      	mov	r0, sl
   87f26:	aa2a      	add	r2, sp, #168	; 0xa8
   87f28:	f004 fdd8 	bl	8cadc <__ssprint_r>
   87f2c:	2800      	cmp	r0, #0
   87f2e:	f040 85cc 	bne.w	88aca <_svfprintf_r+0x1876>
   87f32:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87f36:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f3a:	e7e6      	b.n	87f0a <_svfprintf_r+0xcb6>
   87f3c:	4651      	mov	r1, sl
   87f3e:	4648      	mov	r0, r9
   87f40:	aa2a      	add	r2, sp, #168	; 0xa8
   87f42:	f004 fdcb 	bl	8cadc <__ssprint_r>
   87f46:	2800      	cmp	r0, #0
   87f48:	f47f adcc 	bne.w	87ae4 <_svfprintf_r+0x890>
   87f4c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87f4e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f52:	f7ff bb1d 	b.w	87590 <_svfprintf_r+0x33c>
   87f56:	9b08      	ldr	r3, [sp, #32]
   87f58:	06dc      	lsls	r4, r3, #27
   87f5a:	f100 8119 	bmi.w	88190 <_svfprintf_r+0xf3c>
   87f5e:	9b08      	ldr	r3, [sp, #32]
   87f60:	0658      	lsls	r0, r3, #25
   87f62:	f140 8368 	bpl.w	88636 <_svfprintf_r+0x13e2>
   87f66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87f68:	2301      	movs	r3, #1
   87f6a:	f852 4b04 	ldr.w	r4, [r2], #4
   87f6e:	2500      	movs	r5, #0
   87f70:	920e      	str	r2, [sp, #56]	; 0x38
   87f72:	b2a4      	uxth	r4, r4
   87f74:	f7ff ba7f 	b.w	87476 <_svfprintf_r+0x222>
   87f78:	232d      	movs	r3, #45	; 0x2d
   87f7a:	9a07      	ldr	r2, [sp, #28]
   87f7c:	4264      	negs	r4, r4
   87f7e:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87f82:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   87f86:	2301      	movs	r3, #1
   87f88:	9208      	str	r2, [sp, #32]
   87f8a:	f7ff ba77 	b.w	8747c <_svfprintf_r+0x228>
   87f8e:	4651      	mov	r1, sl
   87f90:	4648      	mov	r0, r9
   87f92:	aa2a      	add	r2, sp, #168	; 0xa8
   87f94:	f004 fda2 	bl	8cadc <__ssprint_r>
   87f98:	2800      	cmp	r0, #0
   87f9a:	f47f ada3 	bne.w	87ae4 <_svfprintf_r+0x890>
   87f9e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87fa2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87fa6:	e5ba      	b.n	87b1e <_svfprintf_r+0x8ca>
   87fa8:	4651      	mov	r1, sl
   87faa:	4648      	mov	r0, r9
   87fac:	aa2a      	add	r2, sp, #168	; 0xa8
   87fae:	f004 fd95 	bl	8cadc <__ssprint_r>
   87fb2:	2800      	cmp	r0, #0
   87fb4:	f47f ad96 	bne.w	87ae4 <_svfprintf_r+0x890>
   87fb8:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87fbc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87fc0:	e5ba      	b.n	87b38 <_svfprintf_r+0x8e4>
   87fc2:	9b07      	ldr	r3, [sp, #28]
   87fc4:	07da      	lsls	r2, r3, #31
   87fc6:	f57f aaf4 	bpl.w	875b2 <_svfprintf_r+0x35e>
   87fca:	e4d9      	b.n	87980 <_svfprintf_r+0x72c>
   87fcc:	af56      	add	r7, sp, #344	; 0x158
   87fce:	e4aa      	b.n	87926 <_svfprintf_r+0x6d2>
   87fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87fd2:	465f      	mov	r7, fp
   87fd4:	f853 1b04 	ldr.w	r1, [r3], #4
   87fd8:	930e      	str	r3, [sp, #56]	; 0x38
   87fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87fdc:	17dd      	asrs	r5, r3, #31
   87fde:	461a      	mov	r2, r3
   87fe0:	462b      	mov	r3, r5
   87fe2:	e9c1 2300 	strd	r2, r3, [r1]
   87fe6:	f7ff bb03 	b.w	875f0 <_svfprintf_r+0x39c>
   87fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87fec:	2500      	movs	r5, #0
   87fee:	f853 4b04 	ldr.w	r4, [r3], #4
   87ff2:	930e      	str	r3, [sp, #56]	; 0x38
   87ff4:	f7ff ba3a 	b.w	8746c <_svfprintf_r+0x218>
   87ff8:	0008da98 	.word	0x0008da98
   87ffc:	0008daa8 	.word	0x0008daa8
   88000:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88004:	460b      	mov	r3, r1
   88006:	4602      	mov	r2, r0
   88008:	f005 fc9c 	bl	8d944 <__aeabi_dcmpun>
   8800c:	4601      	mov	r1, r0
   8800e:	2800      	cmp	r0, #0
   88010:	f040 8643 	bne.w	88c9a <_svfprintf_r+0x1a46>
   88014:	2e61      	cmp	r6, #97	; 0x61
   88016:	f000 8586 	beq.w	88b26 <_svfprintf_r+0x18d2>
   8801a:	2e41      	cmp	r6, #65	; 0x41
   8801c:	f000 847a 	beq.w	88914 <_svfprintf_r+0x16c0>
   88020:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88022:	f026 0520 	bic.w	r5, r6, #32
   88026:	1c5a      	adds	r2, r3, #1
   88028:	9508      	str	r5, [sp, #32]
   8802a:	f000 837d 	beq.w	88728 <_svfprintf_r+0x14d4>
   8802e:	2d47      	cmp	r5, #71	; 0x47
   88030:	f000 859e 	beq.w	88b70 <_svfprintf_r+0x191c>
   88034:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   88038:	9b07      	ldr	r3, [sp, #28]
   8803a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8803e:	9312      	str	r3, [sp, #72]	; 0x48
   88040:	460b      	mov	r3, r1
   88042:	2b00      	cmp	r3, #0
   88044:	f2c0 85ba 	blt.w	88bbc <_svfprintf_r+0x1968>
   88048:	2200      	movs	r2, #0
   8804a:	930f      	str	r3, [sp, #60]	; 0x3c
   8804c:	921e      	str	r2, [sp, #120]	; 0x78
   8804e:	920d      	str	r2, [sp, #52]	; 0x34
   88050:	900c      	str	r0, [sp, #48]	; 0x30
   88052:	2d46      	cmp	r5, #70	; 0x46
   88054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88056:	f000 8407 	beq.w	88868 <_svfprintf_r+0x1614>
   8805a:	2d45      	cmp	r5, #69	; 0x45
   8805c:	f04f 0002 	mov.w	r0, #2
   88060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88062:	f040 83e7 	bne.w	88834 <_svfprintf_r+0x15e0>
   88066:	9909      	ldr	r1, [sp, #36]	; 0x24
   88068:	9000      	str	r0, [sp, #0]
   8806a:	1c4c      	adds	r4, r1, #1
   8806c:	a928      	add	r1, sp, #160	; 0xa0
   8806e:	a825      	add	r0, sp, #148	; 0x94
   88070:	9104      	str	r1, [sp, #16]
   88072:	a924      	add	r1, sp, #144	; 0x90
   88074:	e9cd 1002 	strd	r1, r0, [sp, #8]
   88078:	9401      	str	r4, [sp, #4]
   8807a:	4648      	mov	r0, r9
   8807c:	f001 feb0 	bl	89de0 <_dtoa_r>
   88080:	4607      	mov	r7, r0
   88082:	4404      	add	r4, r0
   88084:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88086:	9d07      	ldr	r5, [sp, #28]
   88088:	9307      	str	r3, [sp, #28]
   8808a:	2200      	movs	r2, #0
   8808c:	2300      	movs	r3, #0
   8808e:	980c      	ldr	r0, [sp, #48]	; 0x30
   88090:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88092:	f005 fc25 	bl	8d8e0 <__aeabi_dcmpeq>
   88096:	2800      	cmp	r0, #0
   88098:	f000 8398 	beq.w	887cc <_svfprintf_r+0x1578>
   8809c:	4623      	mov	r3, r4
   8809e:	1bdb      	subs	r3, r3, r7
   880a0:	9313      	str	r3, [sp, #76]	; 0x4c
   880a2:	9b08      	ldr	r3, [sp, #32]
   880a4:	2b47      	cmp	r3, #71	; 0x47
   880a6:	f000 835e 	beq.w	88766 <_svfprintf_r+0x1512>
   880aa:	9b08      	ldr	r3, [sp, #32]
   880ac:	2b46      	cmp	r3, #70	; 0x46
   880ae:	f000 840b 	beq.w	888c8 <_svfprintf_r+0x1674>
   880b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   880b4:	9310      	str	r3, [sp, #64]	; 0x40
   880b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   880b8:	9a08      	ldr	r2, [sp, #32]
   880ba:	3b01      	subs	r3, #1
   880bc:	2a41      	cmp	r2, #65	; 0x41
   880be:	9324      	str	r3, [sp, #144]	; 0x90
   880c0:	f000 85ad 	beq.w	88c1e <_svfprintf_r+0x19ca>
   880c4:	2100      	movs	r1, #0
   880c6:	b2f2      	uxtb	r2, r6
   880c8:	2b00      	cmp	r3, #0
   880ca:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   880ce:	bfb6      	itet	lt
   880d0:	222d      	movlt	r2, #45	; 0x2d
   880d2:	222b      	movge	r2, #43	; 0x2b
   880d4:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   880d6:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   880da:	bfb8      	it	lt
   880dc:	f1c3 0301 	rsblt	r3, r3, #1
   880e0:	2b09      	cmp	r3, #9
   880e2:	f340 85a2 	ble.w	88c2a <_svfprintf_r+0x19d6>
   880e6:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   880ea:	4672      	mov	r2, lr
   880ec:	469c      	mov	ip, r3
   880ee:	4cbf      	ldr	r4, [pc, #764]	; (883ec <_svfprintf_r+0x1198>)
   880f0:	4660      	mov	r0, ip
   880f2:	4611      	mov	r1, r2
   880f4:	fb84 230c 	smull	r2, r3, r4, ip
   880f8:	ea4f 72ec 	mov.w	r2, ip, asr #31
   880fc:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   88100:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   88104:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   88108:	3330      	adds	r3, #48	; 0x30
   8810a:	2863      	cmp	r0, #99	; 0x63
   8810c:	4694      	mov	ip, r2
   8810e:	f801 3c01 	strb.w	r3, [r1, #-1]
   88112:	f101 32ff 	add.w	r2, r1, #4294967295
   88116:	dceb      	bgt.n	880f0 <_svfprintf_r+0xe9c>
   88118:	4663      	mov	r3, ip
   8811a:	3330      	adds	r3, #48	; 0x30
   8811c:	b2d8      	uxtb	r0, r3
   8811e:	1e8b      	subs	r3, r1, #2
   88120:	459e      	cmp	lr, r3
   88122:	f802 0c01 	strb.w	r0, [r2, #-1]
   88126:	f240 862c 	bls.w	88d82 <_svfprintf_r+0x1b2e>
   8812a:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   8812e:	e001      	b.n	88134 <_svfprintf_r+0xee0>
   88130:	f812 0b01 	ldrb.w	r0, [r2], #1
   88134:	4596      	cmp	lr, r2
   88136:	f803 0b01 	strb.w	r0, [r3], #1
   8813a:	d1f9      	bne.n	88130 <_svfprintf_r+0xedc>
   8813c:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   88140:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88144:	1a5b      	subs	r3, r3, r1
   88146:	4413      	add	r3, r2
   88148:	aa26      	add	r2, sp, #152	; 0x98
   8814a:	1a9b      	subs	r3, r3, r2
   8814c:	931b      	str	r3, [sp, #108]	; 0x6c
   8814e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88150:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   88152:	2b01      	cmp	r3, #1
   88154:	441a      	add	r2, r3
   88156:	920c      	str	r2, [sp, #48]	; 0x30
   88158:	f340 85cc 	ble.w	88cf4 <_svfprintf_r+0x1aa0>
   8815c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8815e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88160:	4413      	add	r3, r2
   88162:	930c      	str	r3, [sp, #48]	; 0x30
   88164:	2300      	movs	r3, #0
   88166:	9312      	str	r3, [sp, #72]	; 0x48
   88168:	9316      	str	r3, [sp, #88]	; 0x58
   8816a:	9310      	str	r3, [sp, #64]	; 0x40
   8816c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8816e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   88172:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   88176:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8817a:	9207      	str	r2, [sp, #28]
   8817c:	9308      	str	r3, [sp, #32]
   8817e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88180:	2b00      	cmp	r3, #0
   88182:	f040 8317 	bne.w	887b4 <_svfprintf_r+0x1560>
   88186:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8818a:	9309      	str	r3, [sp, #36]	; 0x24
   8818c:	f7ff ba86 	b.w	8769c <_svfprintf_r+0x448>
   88190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88192:	2301      	movs	r3, #1
   88194:	f852 4b04 	ldr.w	r4, [r2], #4
   88198:	2500      	movs	r5, #0
   8819a:	920e      	str	r2, [sp, #56]	; 0x38
   8819c:	f7ff b96b 	b.w	87476 <_svfprintf_r+0x222>
   881a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   881a2:	f853 4b04 	ldr.w	r4, [r3], #4
   881a6:	17e5      	asrs	r5, r4, #31
   881a8:	930e      	str	r3, [sp, #56]	; 0x38
   881aa:	4622      	mov	r2, r4
   881ac:	462b      	mov	r3, r5
   881ae:	f7ff b933 	b.w	87418 <_svfprintf_r+0x1c4>
   881b2:	9b07      	ldr	r3, [sp, #28]
   881b4:	9308      	str	r3, [sp, #32]
   881b6:	f7ff bae0 	b.w	8777a <_svfprintf_r+0x526>
   881ba:	4b8d      	ldr	r3, [pc, #564]	; (883f0 <_svfprintf_r+0x119c>)
   881bc:	9319      	str	r3, [sp, #100]	; 0x64
   881be:	9b07      	ldr	r3, [sp, #28]
   881c0:	0699      	lsls	r1, r3, #26
   881c2:	f140 80fe 	bpl.w	883c2 <_svfprintf_r+0x116e>
   881c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   881c8:	3307      	adds	r3, #7
   881ca:	f023 0307 	bic.w	r3, r3, #7
   881ce:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   881d2:	930e      	str	r3, [sp, #56]	; 0x38
   881d4:	9a07      	ldr	r2, [sp, #28]
   881d6:	07d7      	lsls	r7, r2, #31
   881d8:	d50a      	bpl.n	881f0 <_svfprintf_r+0xf9c>
   881da:	ea54 0305 	orrs.w	r3, r4, r5
   881de:	d007      	beq.n	881f0 <_svfprintf_r+0xf9c>
   881e0:	2330      	movs	r3, #48	; 0x30
   881e2:	f042 0202 	orr.w	r2, r2, #2
   881e6:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   881ea:	9207      	str	r2, [sp, #28]
   881ec:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   881f0:	9a07      	ldr	r2, [sp, #28]
   881f2:	2302      	movs	r3, #2
   881f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   881f8:	9208      	str	r2, [sp, #32]
   881fa:	f7ff b93c 	b.w	87476 <_svfprintf_r+0x222>
   881fe:	4b7d      	ldr	r3, [pc, #500]	; (883f4 <_svfprintf_r+0x11a0>)
   88200:	9319      	str	r3, [sp, #100]	; 0x64
   88202:	e7dc      	b.n	881be <_svfprintf_r+0xf6a>
   88204:	f043 0320 	orr.w	r3, r3, #32
   88208:	f89b 6001 	ldrb.w	r6, [fp, #1]
   8820c:	9307      	str	r3, [sp, #28]
   8820e:	f10b 0b01 	add.w	fp, fp, #1
   88212:	f7ff b86a 	b.w	872ea <_svfprintf_r+0x96>
   88216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8821a:	f89b 6001 	ldrb.w	r6, [fp, #1]
   8821e:	9307      	str	r3, [sp, #28]
   88220:	f10b 0b01 	add.w	fp, fp, #1
   88224:	f7ff b861 	b.w	872ea <_svfprintf_r+0x96>
   88228:	4651      	mov	r1, sl
   8822a:	4648      	mov	r0, r9
   8822c:	aa2a      	add	r2, sp, #168	; 0xa8
   8822e:	f004 fc55 	bl	8cadc <__ssprint_r>
   88232:	2800      	cmp	r0, #0
   88234:	f47f ac56 	bne.w	87ae4 <_svfprintf_r+0x890>
   88238:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8823a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8823e:	f7ff bbad 	b.w	8799c <_svfprintf_r+0x748>
   88242:	2140      	movs	r1, #64	; 0x40
   88244:	4648      	mov	r0, r9
   88246:	f003 fa71 	bl	8b72c <_malloc_r>
   8824a:	f8cb 0000 	str.w	r0, [fp]
   8824e:	f8cb 0010 	str.w	r0, [fp, #16]
   88252:	2800      	cmp	r0, #0
   88254:	f000 858d 	beq.w	88d72 <_svfprintf_r+0x1b1e>
   88258:	2340      	movs	r3, #64	; 0x40
   8825a:	f8cb 3014 	str.w	r3, [fp, #20]
   8825e:	f7ff b811 	b.w	87284 <_svfprintf_r+0x30>
   88262:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88264:	463a      	mov	r2, r7
   88266:	2b06      	cmp	r3, #6
   88268:	bf28      	it	cs
   8826a:	2306      	movcs	r3, #6
   8826c:	9709      	str	r7, [sp, #36]	; 0x24
   8826e:	9712      	str	r7, [sp, #72]	; 0x48
   88270:	9716      	str	r7, [sp, #88]	; 0x58
   88272:	9710      	str	r7, [sp, #64]	; 0x40
   88274:	970d      	str	r7, [sp, #52]	; 0x34
   88276:	9308      	str	r3, [sp, #32]
   88278:	4f5f      	ldr	r7, [pc, #380]	; (883f8 <_svfprintf_r+0x11a4>)
   8827a:	940e      	str	r4, [sp, #56]	; 0x38
   8827c:	930c      	str	r3, [sp, #48]	; 0x30
   8827e:	f7ff ba0d 	b.w	8769c <_svfprintf_r+0x448>
   88282:	2b10      	cmp	r3, #16
   88284:	f340 8558 	ble.w	88d38 <_svfprintf_r+0x1ae4>
   88288:	4651      	mov	r1, sl
   8828a:	4a5c      	ldr	r2, [pc, #368]	; (883fc <_svfprintf_r+0x11a8>)
   8828c:	46ca      	mov	sl, r9
   8828e:	9709      	str	r7, [sp, #36]	; 0x24
   88290:	2610      	movs	r6, #16
   88292:	4617      	mov	r7, r2
   88294:	4689      	mov	r9, r1
   88296:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88298:	920f      	str	r2, [sp, #60]	; 0x3c
   8829a:	e005      	b.n	882a8 <_svfprintf_r+0x1054>
   8829c:	f108 0808 	add.w	r8, r8, #8
   882a0:	3d10      	subs	r5, #16
   882a2:	2d10      	cmp	r5, #16
   882a4:	f340 81fa 	ble.w	8869c <_svfprintf_r+0x1448>
   882a8:	3301      	adds	r3, #1
   882aa:	3410      	adds	r4, #16
   882ac:	2b07      	cmp	r3, #7
   882ae:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   882b2:	e9c8 7600 	strd	r7, r6, [r8]
   882b6:	ddf1      	ble.n	8829c <_svfprintf_r+0x1048>
   882b8:	4649      	mov	r1, r9
   882ba:	4650      	mov	r0, sl
   882bc:	aa2a      	add	r2, sp, #168	; 0xa8
   882be:	f004 fc0d 	bl	8cadc <__ssprint_r>
   882c2:	2800      	cmp	r0, #0
   882c4:	f040 83fd 	bne.w	88ac2 <_svfprintf_r+0x186e>
   882c8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   882cc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   882d0:	e7e6      	b.n	882a0 <_svfprintf_r+0x104c>
   882d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   882d4:	4642      	mov	r2, r8
   882d6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   882da:	18fb      	adds	r3, r7, r3
   882dc:	9309      	str	r3, [sp, #36]	; 0x24
   882de:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   882e2:	970f      	str	r7, [sp, #60]	; 0x3c
   882e4:	4620      	mov	r0, r4
   882e6:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   882ea:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   882ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   882ee:	f1b8 0f00 	cmp.w	r8, #0
   882f2:	d02d      	beq.n	88350 <_svfprintf_r+0x10fc>
   882f4:	bb7b      	cbnz	r3, 88356 <_svfprintf_r+0x1102>
   882f6:	3f01      	subs	r7, #1
   882f8:	f108 38ff 	add.w	r8, r8, #4294967295
   882fc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   882fe:	991c      	ldr	r1, [sp, #112]	; 0x70
   88300:	3301      	adds	r3, #1
   88302:	4458      	add	r0, fp
   88304:	2b07      	cmp	r3, #7
   88306:	e9c2 1b00 	strd	r1, fp, [r2]
   8830a:	902c      	str	r0, [sp, #176]	; 0xb0
   8830c:	932b      	str	r3, [sp, #172]	; 0xac
   8830e:	dc62      	bgt.n	883d6 <_svfprintf_r+0x1182>
   88310:	3208      	adds	r2, #8
   88312:	9909      	ldr	r1, [sp, #36]	; 0x24
   88314:	783b      	ldrb	r3, [r7, #0]
   88316:	1b8d      	subs	r5, r1, r6
   88318:	429d      	cmp	r5, r3
   8831a:	bfa8      	it	ge
   8831c:	461d      	movge	r5, r3
   8831e:	2d00      	cmp	r5, #0
   88320:	dd0b      	ble.n	8833a <_svfprintf_r+0x10e6>
   88322:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88324:	4428      	add	r0, r5
   88326:	3301      	adds	r3, #1
   88328:	2b07      	cmp	r3, #7
   8832a:	e9c2 6500 	strd	r6, r5, [r2]
   8832e:	902c      	str	r0, [sp, #176]	; 0xb0
   88330:	932b      	str	r3, [sp, #172]	; 0xac
   88332:	f300 8111 	bgt.w	88558 <_svfprintf_r+0x1304>
   88336:	783b      	ldrb	r3, [r7, #0]
   88338:	3208      	adds	r2, #8
   8833a:	2d00      	cmp	r5, #0
   8833c:	bfb4      	ite	lt
   8833e:	461d      	movlt	r5, r3
   88340:	1b5d      	subge	r5, r3, r5
   88342:	2d00      	cmp	r5, #0
   88344:	dc0b      	bgt.n	8835e <_svfprintf_r+0x110a>
   88346:	441e      	add	r6, r3
   88348:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8834a:	f1b8 0f00 	cmp.w	r8, #0
   8834e:	d1d1      	bne.n	882f4 <_svfprintf_r+0x10a0>
   88350:	2b00      	cmp	r3, #0
   88352:	f000 81f9 	beq.w	88748 <_svfprintf_r+0x14f4>
   88356:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88358:	3b01      	subs	r3, #1
   8835a:	9312      	str	r3, [sp, #72]	; 0x48
   8835c:	e7ce      	b.n	882fc <_svfprintf_r+0x10a8>
   8835e:	2d10      	cmp	r5, #16
   88360:	f340 84c5 	ble.w	88cee <_svfprintf_r+0x1a9a>
   88364:	992b      	ldr	r1, [sp, #172]	; 0xac
   88366:	2410      	movs	r4, #16
   88368:	460b      	mov	r3, r1
   8836a:	e004      	b.n	88376 <_svfprintf_r+0x1122>
   8836c:	3d10      	subs	r5, #16
   8836e:	2d10      	cmp	r5, #16
   88370:	f102 0208 	add.w	r2, r2, #8
   88374:	dd16      	ble.n	883a4 <_svfprintf_r+0x1150>
   88376:	3301      	adds	r3, #1
   88378:	4920      	ldr	r1, [pc, #128]	; (883fc <_svfprintf_r+0x11a8>)
   8837a:	3010      	adds	r0, #16
   8837c:	2b07      	cmp	r3, #7
   8837e:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   88382:	e9c2 1400 	strd	r1, r4, [r2]
   88386:	ddf1      	ble.n	8836c <_svfprintf_r+0x1118>
   88388:	4651      	mov	r1, sl
   8838a:	4648      	mov	r0, r9
   8838c:	aa2a      	add	r2, sp, #168	; 0xa8
   8838e:	f004 fba5 	bl	8cadc <__ssprint_r>
   88392:	2800      	cmp	r0, #0
   88394:	f47f aba6 	bne.w	87ae4 <_svfprintf_r+0x890>
   88398:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   8839c:	3d10      	subs	r5, #16
   8839e:	2d10      	cmp	r5, #16
   883a0:	aa2d      	add	r2, sp, #180	; 0xb4
   883a2:	dce8      	bgt.n	88376 <_svfprintf_r+0x1122>
   883a4:	4619      	mov	r1, r3
   883a6:	1c4b      	adds	r3, r1, #1
   883a8:	4914      	ldr	r1, [pc, #80]	; (883fc <_svfprintf_r+0x11a8>)
   883aa:	4428      	add	r0, r5
   883ac:	2b07      	cmp	r3, #7
   883ae:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   883b2:	e9c2 1500 	strd	r1, r5, [r2]
   883b6:	f300 8215 	bgt.w	887e4 <_svfprintf_r+0x1590>
   883ba:	783b      	ldrb	r3, [r7, #0]
   883bc:	3208      	adds	r2, #8
   883be:	441e      	add	r6, r3
   883c0:	e7c2      	b.n	88348 <_svfprintf_r+0x10f4>
   883c2:	9b07      	ldr	r3, [sp, #28]
   883c4:	06da      	lsls	r2, r3, #27
   883c6:	f140 8084 	bpl.w	884d2 <_svfprintf_r+0x127e>
   883ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   883cc:	2500      	movs	r5, #0
   883ce:	f853 4b04 	ldr.w	r4, [r3], #4
   883d2:	930e      	str	r3, [sp, #56]	; 0x38
   883d4:	e6fe      	b.n	881d4 <_svfprintf_r+0xf80>
   883d6:	4651      	mov	r1, sl
   883d8:	4648      	mov	r0, r9
   883da:	aa2a      	add	r2, sp, #168	; 0xa8
   883dc:	f004 fb7e 	bl	8cadc <__ssprint_r>
   883e0:	2800      	cmp	r0, #0
   883e2:	f47f ab7f 	bne.w	87ae4 <_svfprintf_r+0x890>
   883e6:	982c      	ldr	r0, [sp, #176]	; 0xb0
   883e8:	aa2d      	add	r2, sp, #180	; 0xb4
   883ea:	e792      	b.n	88312 <_svfprintf_r+0x10be>
   883ec:	66666667 	.word	0x66666667
   883f0:	0008da64 	.word	0x0008da64
   883f4:	0008da78 	.word	0x0008da78
   883f8:	0008da8c 	.word	0x0008da8c
   883fc:	0008daa8 	.word	0x0008daa8
   88400:	2200      	movs	r2, #0
   88402:	9b08      	ldr	r3, [sp, #32]
   88404:	f8cd b01c 	str.w	fp, [sp, #28]
   88408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   8840c:	960c      	str	r6, [sp, #48]	; 0x30
   8840e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   88412:	4693      	mov	fp, r2
   88414:	46ca      	mov	sl, r9
   88416:	461e      	mov	r6, r3
   88418:	46c1      	mov	r9, r8
   8841a:	af56      	add	r7, sp, #344	; 0x158
   8841c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   88420:	e00b      	b.n	8843a <_svfprintf_r+0x11e6>
   88422:	220a      	movs	r2, #10
   88424:	2300      	movs	r3, #0
   88426:	4620      	mov	r0, r4
   88428:	4629      	mov	r1, r5
   8842a:	f7fe fc77 	bl	86d1c <__aeabi_uldivmod>
   8842e:	2d00      	cmp	r5, #0
   88430:	bf08      	it	eq
   88432:	2c0a      	cmpeq	r4, #10
   88434:	d31b      	bcc.n	8846e <_svfprintf_r+0x121a>
   88436:	4604      	mov	r4, r0
   88438:	460d      	mov	r5, r1
   8843a:	220a      	movs	r2, #10
   8843c:	2300      	movs	r3, #0
   8843e:	4620      	mov	r0, r4
   88440:	4629      	mov	r1, r5
   88442:	f7fe fc6b 	bl	86d1c <__aeabi_uldivmod>
   88446:	3230      	adds	r2, #48	; 0x30
   88448:	f807 2c01 	strb.w	r2, [r7, #-1]
   8844c:	f10b 0b01 	add.w	fp, fp, #1
   88450:	3f01      	subs	r7, #1
   88452:	2e00      	cmp	r6, #0
   88454:	d0e5      	beq.n	88422 <_svfprintf_r+0x11ce>
   88456:	f898 3000 	ldrb.w	r3, [r8]
   8845a:	459b      	cmp	fp, r3
   8845c:	d1e1      	bne.n	88422 <_svfprintf_r+0x11ce>
   8845e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   88462:	d0de      	beq.n	88422 <_svfprintf_r+0x11ce>
   88464:	2d00      	cmp	r5, #0
   88466:	bf08      	it	eq
   88468:	2c0a      	cmpeq	r4, #10
   8846a:	f080 8128 	bcs.w	886be <_svfprintf_r+0x146a>
   8846e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   88472:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   88476:	46c8      	mov	r8, r9
   88478:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   8847a:	46d1      	mov	r9, sl
   8847c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   88480:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   88484:	f7ff bb9f 	b.w	87bc6 <_svfprintf_r+0x972>
   88488:	4651      	mov	r1, sl
   8848a:	4648      	mov	r0, r9
   8848c:	aa2a      	add	r2, sp, #168	; 0xa8
   8848e:	931e      	str	r3, [sp, #120]	; 0x78
   88490:	f004 fb24 	bl	8cadc <__ssprint_r>
   88494:	2800      	cmp	r0, #0
   88496:	f47f ab25 	bne.w	87ae4 <_svfprintf_r+0x890>
   8849a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8849e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   884a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   884a2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   884a6:	f7ff b84a 	b.w	8753e <_svfprintf_r+0x2ea>
   884aa:	2001      	movs	r0, #1
   884ac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   884ae:	49c5      	ldr	r1, [pc, #788]	; (887c4 <_svfprintf_r+0x1570>)
   884b0:	4403      	add	r3, r0
   884b2:	4404      	add	r4, r0
   884b4:	2b07      	cmp	r3, #7
   884b6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   884ba:	e9c8 1000 	strd	r1, r0, [r8]
   884be:	f73f abdf 	bgt.w	87c80 <_svfprintf_r+0xa2c>
   884c2:	f108 0808 	add.w	r8, r8, #8
   884c6:	f7ff bbe7 	b.w	87c98 <_svfprintf_r+0xa44>
   884ca:	46d1      	mov	r9, sl
   884cc:	46b3      	mov	fp, r6
   884ce:	f7ff bb0a 	b.w	87ae6 <_svfprintf_r+0x892>
   884d2:	9b07      	ldr	r3, [sp, #28]
   884d4:	065b      	lsls	r3, r3, #25
   884d6:	f140 80cb 	bpl.w	88670 <_svfprintf_r+0x141c>
   884da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   884dc:	2500      	movs	r5, #0
   884de:	f853 4b04 	ldr.w	r4, [r3], #4
   884e2:	930e      	str	r3, [sp, #56]	; 0x38
   884e4:	b2a4      	uxth	r4, r4
   884e6:	e675      	b.n	881d4 <_svfprintf_r+0xf80>
   884e8:	4651      	mov	r1, sl
   884ea:	4648      	mov	r0, r9
   884ec:	aa2a      	add	r2, sp, #168	; 0xa8
   884ee:	f004 faf5 	bl	8cadc <__ssprint_r>
   884f2:	2800      	cmp	r0, #0
   884f4:	f47f aaf6 	bne.w	87ae4 <_svfprintf_r+0x890>
   884f8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   884fa:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   884fe:	f7ff ba3a 	b.w	87976 <_svfprintf_r+0x722>
   88502:	46d1      	mov	r9, sl
   88504:	46da      	mov	sl, fp
   88506:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   8850a:	3501      	adds	r5, #1
   8850c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8850e:	4434      	add	r4, r6
   88510:	2d07      	cmp	r5, #7
   88512:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   88516:	e9c8 3600 	strd	r3, r6, [r8]
   8851a:	f77f ab24 	ble.w	87b66 <_svfprintf_r+0x912>
   8851e:	4651      	mov	r1, sl
   88520:	4648      	mov	r0, r9
   88522:	aa2a      	add	r2, sp, #168	; 0xa8
   88524:	f004 fada 	bl	8cadc <__ssprint_r>
   88528:	2800      	cmp	r0, #0
   8852a:	f47f aadb 	bne.w	87ae4 <_svfprintf_r+0x890>
   8852e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   88532:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88536:	f7ff bb18 	b.w	87b6a <_svfprintf_r+0x916>
   8853a:	4aa3      	ldr	r2, [pc, #652]	; (887c8 <_svfprintf_r+0x1574>)
   8853c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8853e:	920f      	str	r2, [sp, #60]	; 0x3c
   88540:	3301      	adds	r3, #1
   88542:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88544:	442c      	add	r4, r5
   88546:	2b07      	cmp	r3, #7
   88548:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8854c:	e9c8 2500 	strd	r2, r5, [r8]
   88550:	f77f a82d 	ble.w	875ae <_svfprintf_r+0x35a>
   88554:	f7ff bbc2 	b.w	87cdc <_svfprintf_r+0xa88>
   88558:	4651      	mov	r1, sl
   8855a:	4648      	mov	r0, r9
   8855c:	aa2a      	add	r2, sp, #168	; 0xa8
   8855e:	f004 fabd 	bl	8cadc <__ssprint_r>
   88562:	2800      	cmp	r0, #0
   88564:	f47f aabe 	bne.w	87ae4 <_svfprintf_r+0x890>
   88568:	783b      	ldrb	r3, [r7, #0]
   8856a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   8856c:	aa2d      	add	r2, sp, #180	; 0xb4
   8856e:	e6e4      	b.n	8833a <_svfprintf_r+0x10e6>
   88570:	4651      	mov	r1, sl
   88572:	4648      	mov	r0, r9
   88574:	aa2a      	add	r2, sp, #168	; 0xa8
   88576:	f004 fab1 	bl	8cadc <__ssprint_r>
   8857a:	2800      	cmp	r0, #0
   8857c:	f47f aab2 	bne.w	87ae4 <_svfprintf_r+0x890>
   88580:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88582:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88586:	f7fe bffd 	b.w	87584 <_svfprintf_r+0x330>
   8858a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8858c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8858e:	f853 2b04 	ldr.w	r2, [r3], #4
   88592:	465f      	mov	r7, fp
   88594:	6011      	str	r1, [r2, #0]
   88596:	930e      	str	r3, [sp, #56]	; 0x38
   88598:	f7ff b82a 	b.w	875f0 <_svfprintf_r+0x39c>
   8859c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8859e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   885a0:	3301      	adds	r3, #1
   885a2:	9818      	ldr	r0, [sp, #96]	; 0x60
   885a4:	440c      	add	r4, r1
   885a6:	2b07      	cmp	r3, #7
   885a8:	e9c8 0100 	strd	r0, r1, [r8]
   885ac:	942c      	str	r4, [sp, #176]	; 0xb0
   885ae:	932b      	str	r3, [sp, #172]	; 0xac
   885b0:	f300 80ac 	bgt.w	8870c <_svfprintf_r+0x14b8>
   885b4:	f108 0808 	add.w	r8, r8, #8
   885b8:	2a00      	cmp	r2, #0
   885ba:	f6bf ab85 	bge.w	87cc8 <_svfprintf_r+0xa74>
   885be:	4255      	negs	r5, r2
   885c0:	3210      	adds	r2, #16
   885c2:	f280 83d3 	bge.w	88d6c <_svfprintf_r+0x1b18>
   885c6:	4651      	mov	r1, sl
   885c8:	4a7f      	ldr	r2, [pc, #508]	; (887c8 <_svfprintf_r+0x1574>)
   885ca:	46ca      	mov	sl, r9
   885cc:	9709      	str	r7, [sp, #36]	; 0x24
   885ce:	2610      	movs	r6, #16
   885d0:	4617      	mov	r7, r2
   885d2:	4689      	mov	r9, r1
   885d4:	920f      	str	r2, [sp, #60]	; 0x3c
   885d6:	e005      	b.n	885e4 <_svfprintf_r+0x1390>
   885d8:	f108 0808 	add.w	r8, r8, #8
   885dc:	3d10      	subs	r5, #16
   885de:	2d10      	cmp	r5, #16
   885e0:	f340 82aa 	ble.w	88b38 <_svfprintf_r+0x18e4>
   885e4:	3301      	adds	r3, #1
   885e6:	3410      	adds	r4, #16
   885e8:	2b07      	cmp	r3, #7
   885ea:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   885ee:	e9c8 7600 	strd	r7, r6, [r8]
   885f2:	ddf1      	ble.n	885d8 <_svfprintf_r+0x1384>
   885f4:	4649      	mov	r1, r9
   885f6:	4650      	mov	r0, sl
   885f8:	aa2a      	add	r2, sp, #168	; 0xa8
   885fa:	f004 fa6f 	bl	8cadc <__ssprint_r>
   885fe:	2800      	cmp	r0, #0
   88600:	f040 825f 	bne.w	88ac2 <_svfprintf_r+0x186e>
   88604:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88608:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8860c:	e7e6      	b.n	885dc <_svfprintf_r+0x1388>
   8860e:	4638      	mov	r0, r7
   88610:	f004 fa02 	bl	8ca18 <strlen>
   88614:	462b      	mov	r3, r5
   88616:	4602      	mov	r2, r0
   88618:	9509      	str	r5, [sp, #36]	; 0x24
   8861a:	f7ff b894 	b.w	87746 <_svfprintf_r+0x4f2>
   8861e:	9b07      	ldr	r3, [sp, #28]
   88620:	2500      	movs	r5, #0
   88622:	f413 7f00 	tst.w	r3, #512	; 0x200
   88626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88628:	f853 4b04 	ldr.w	r4, [r3], #4
   8862c:	930e      	str	r3, [sp, #56]	; 0x38
   8862e:	bf18      	it	ne
   88630:	b2e4      	uxtbne	r4, r4
   88632:	f7fe bf1b 	b.w	8746c <_svfprintf_r+0x218>
   88636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88638:	9b08      	ldr	r3, [sp, #32]
   8863a:	f852 4b04 	ldr.w	r4, [r2], #4
   8863e:	f413 7f00 	tst.w	r3, #512	; 0x200
   88642:	f04f 0500 	mov.w	r5, #0
   88646:	f04f 0301 	mov.w	r3, #1
   8864a:	920e      	str	r2, [sp, #56]	; 0x38
   8864c:	bf18      	it	ne
   8864e:	b2e4      	uxtbne	r4, r4
   88650:	f7fe bf11 	b.w	87476 <_svfprintf_r+0x222>
   88654:	9b07      	ldr	r3, [sp, #28]
   88656:	f413 7f00 	tst.w	r3, #512	; 0x200
   8865a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8865c:	f853 4b04 	ldr.w	r4, [r3], #4
   88660:	bf18      	it	ne
   88662:	b264      	sxtbne	r4, r4
   88664:	17e5      	asrs	r5, r4, #31
   88666:	930e      	str	r3, [sp, #56]	; 0x38
   88668:	4622      	mov	r2, r4
   8866a:	462b      	mov	r3, r5
   8866c:	f7fe bed4 	b.w	87418 <_svfprintf_r+0x1c4>
   88670:	9b07      	ldr	r3, [sp, #28]
   88672:	2500      	movs	r5, #0
   88674:	f413 7f00 	tst.w	r3, #512	; 0x200
   88678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8867a:	f853 4b04 	ldr.w	r4, [r3], #4
   8867e:	930e      	str	r3, [sp, #56]	; 0x38
   88680:	bf18      	it	ne
   88682:	b2e4      	uxtbne	r4, r4
   88684:	e5a6      	b.n	881d4 <_svfprintf_r+0xf80>
   88686:	4b50      	ldr	r3, [pc, #320]	; (887c8 <_svfprintf_r+0x1574>)
   88688:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8868a:	930f      	str	r3, [sp, #60]	; 0x3c
   8868c:	f7ff ba15 	b.w	87aba <_svfprintf_r+0x866>
   88690:	232d      	movs	r3, #45	; 0x2d
   88692:	461a      	mov	r2, r3
   88694:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   88698:	f7fe bfee 	b.w	87678 <_svfprintf_r+0x424>
   8869c:	464a      	mov	r2, r9
   8869e:	46d1      	mov	r9, sl
   886a0:	4692      	mov	sl, r2
   886a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   886a4:	3301      	adds	r3, #1
   886a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   886a8:	442c      	add	r4, r5
   886aa:	2b07      	cmp	r3, #7
   886ac:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   886b0:	e9c8 2500 	strd	r2, r5, [r8]
   886b4:	dc3b      	bgt.n	8872e <_svfprintf_r+0x14da>
   886b6:	f108 0808 	add.w	r8, r8, #8
   886ba:	f7ff bb8c 	b.w	87dd6 <_svfprintf_r+0xb82>
   886be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   886c0:	991c      	ldr	r1, [sp, #112]	; 0x70
   886c2:	1aff      	subs	r7, r7, r3
   886c4:	461a      	mov	r2, r3
   886c6:	4638      	mov	r0, r7
   886c8:	f004 f9d4 	bl	8ca74 <strncpy>
   886cc:	f898 3001 	ldrb.w	r3, [r8, #1]
   886d0:	b10b      	cbz	r3, 886d6 <_svfprintf_r+0x1482>
   886d2:	f108 0801 	add.w	r8, r8, #1
   886d6:	220a      	movs	r2, #10
   886d8:	2300      	movs	r3, #0
   886da:	4620      	mov	r0, r4
   886dc:	4629      	mov	r1, r5
   886de:	f7fe fb1d 	bl	86d1c <__aeabi_uldivmod>
   886e2:	f04f 0b00 	mov.w	fp, #0
   886e6:	e6a6      	b.n	88436 <_svfprintf_r+0x11e2>
   886e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   886ea:	18bd      	adds	r5, r7, r2
   886ec:	1bad      	subs	r5, r5, r6
   886ee:	1ad3      	subs	r3, r2, r3
   886f0:	429d      	cmp	r5, r3
   886f2:	bfa8      	it	ge
   886f4:	461d      	movge	r5, r3
   886f6:	f7ff bba0 	b.w	87e3a <_svfprintf_r+0xbe6>
   886fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   886fc:	990a      	ldr	r1, [sp, #40]	; 0x28
   886fe:	f853 2b04 	ldr.w	r2, [r3], #4
   88702:	465f      	mov	r7, fp
   88704:	8011      	strh	r1, [r2, #0]
   88706:	930e      	str	r3, [sp, #56]	; 0x38
   88708:	f7fe bf72 	b.w	875f0 <_svfprintf_r+0x39c>
   8870c:	4651      	mov	r1, sl
   8870e:	4648      	mov	r0, r9
   88710:	aa2a      	add	r2, sp, #168	; 0xa8
   88712:	f004 f9e3 	bl	8cadc <__ssprint_r>
   88716:	2800      	cmp	r0, #0
   88718:	f47f a9e4 	bne.w	87ae4 <_svfprintf_r+0x890>
   8871c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88720:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88722:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88726:	e747      	b.n	885b8 <_svfprintf_r+0x1364>
   88728:	2306      	movs	r3, #6
   8872a:	9309      	str	r3, [sp, #36]	; 0x24
   8872c:	e482      	b.n	88034 <_svfprintf_r+0xde0>
   8872e:	4651      	mov	r1, sl
   88730:	4648      	mov	r0, r9
   88732:	aa2a      	add	r2, sp, #168	; 0xa8
   88734:	f004 f9d2 	bl	8cadc <__ssprint_r>
   88738:	2800      	cmp	r0, #0
   8873a:	f47f a9d3 	bne.w	87ae4 <_svfprintf_r+0x890>
   8873e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88740:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88744:	f7ff bb47 	b.w	87dd6 <_svfprintf_r+0xb82>
   88748:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8874a:	971a      	str	r7, [sp, #104]	; 0x68
   8874c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   8874e:	4690      	mov	r8, r2
   88750:	18fb      	adds	r3, r7, r3
   88752:	429e      	cmp	r6, r3
   88754:	4632      	mov	r2, r6
   88756:	bf28      	it	cs
   88758:	461a      	movcs	r2, r3
   8875a:	4604      	mov	r4, r0
   8875c:	4616      	mov	r6, r2
   8875e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   88762:	f7ff bb3f 	b.w	87de4 <_svfprintf_r+0xb90>
   88766:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88768:	1cd8      	adds	r0, r3, #3
   8876a:	9310      	str	r3, [sp, #64]	; 0x40
   8876c:	db02      	blt.n	88774 <_svfprintf_r+0x1520>
   8876e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88770:	4293      	cmp	r3, r2
   88772:	dd04      	ble.n	8877e <_svfprintf_r+0x152a>
   88774:	3e02      	subs	r6, #2
   88776:	f026 0320 	bic.w	r3, r6, #32
   8877a:	9308      	str	r3, [sp, #32]
   8877c:	e49b      	b.n	880b6 <_svfprintf_r+0xe62>
   8877e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88780:	9913      	ldr	r1, [sp, #76]	; 0x4c
   88782:	428b      	cmp	r3, r1
   88784:	f2c0 817a 	blt.w	88a7c <_svfprintf_r+0x1828>
   88788:	07ea      	lsls	r2, r5, #31
   8878a:	f140 8283 	bpl.w	88c94 <_svfprintf_r+0x1a40>
   8878e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88790:	4413      	add	r3, r2
   88792:	930c      	str	r3, [sp, #48]	; 0x30
   88794:	056e      	lsls	r6, r5, #21
   88796:	f140 8277 	bpl.w	88c88 <_svfprintf_r+0x1a34>
   8879a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8879c:	2b00      	cmp	r3, #0
   8879e:	f300 8210 	bgt.w	88bc2 <_svfprintf_r+0x196e>
   887a2:	2667      	movs	r6, #103	; 0x67
   887a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   887a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   887aa:	9308      	str	r3, [sp, #32]
   887ac:	2300      	movs	r3, #0
   887ae:	9312      	str	r3, [sp, #72]	; 0x48
   887b0:	9316      	str	r3, [sp, #88]	; 0x58
   887b2:	e4e4      	b.n	8817e <_svfprintf_r+0xf2a>
   887b4:	222d      	movs	r2, #45	; 0x2d
   887b6:	2300      	movs	r3, #0
   887b8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   887bc:	9309      	str	r3, [sp, #36]	; 0x24
   887be:	f7fe bf70 	b.w	876a2 <_svfprintf_r+0x44e>
   887c2:	bf00      	nop
   887c4:	0008da94 	.word	0x0008da94
   887c8:	0008daa8 	.word	0x0008daa8
   887cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   887ce:	42a3      	cmp	r3, r4
   887d0:	f4bf ac65 	bcs.w	8809e <_svfprintf_r+0xe4a>
   887d4:	2130      	movs	r1, #48	; 0x30
   887d6:	1c5a      	adds	r2, r3, #1
   887d8:	9228      	str	r2, [sp, #160]	; 0xa0
   887da:	7019      	strb	r1, [r3, #0]
   887dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   887de:	429c      	cmp	r4, r3
   887e0:	d8f9      	bhi.n	887d6 <_svfprintf_r+0x1582>
   887e2:	e45c      	b.n	8809e <_svfprintf_r+0xe4a>
   887e4:	4651      	mov	r1, sl
   887e6:	4648      	mov	r0, r9
   887e8:	aa2a      	add	r2, sp, #168	; 0xa8
   887ea:	f004 f977 	bl	8cadc <__ssprint_r>
   887ee:	2800      	cmp	r0, #0
   887f0:	f47f a978 	bne.w	87ae4 <_svfprintf_r+0x890>
   887f4:	783b      	ldrb	r3, [r7, #0]
   887f6:	982c      	ldr	r0, [sp, #176]	; 0xb0
   887f8:	aa2d      	add	r2, sp, #180	; 0xb4
   887fa:	441e      	add	r6, r3
   887fc:	e5a4      	b.n	88348 <_svfprintf_r+0x10f4>
   887fe:	4651      	mov	r1, sl
   88800:	4648      	mov	r0, r9
   88802:	aa2a      	add	r2, sp, #168	; 0xa8
   88804:	f004 f96a 	bl	8cadc <__ssprint_r>
   88808:	2800      	cmp	r0, #0
   8880a:	f47f a96b 	bne.w	87ae4 <_svfprintf_r+0x890>
   8880e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88810:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88814:	f7ff bad7 	b.w	87dc6 <_svfprintf_r+0xb72>
   88818:	4651      	mov	r1, sl
   8881a:	4648      	mov	r0, r9
   8881c:	aa2a      	add	r2, sp, #168	; 0xa8
   8881e:	f004 f95d 	bl	8cadc <__ssprint_r>
   88822:	2800      	cmp	r0, #0
   88824:	f47f a95e 	bne.w	87ae4 <_svfprintf_r+0x890>
   88828:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8882a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8882c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88830:	f7ff baee 	b.w	87e10 <_svfprintf_r+0xbbc>
   88834:	9c09      	ldr	r4, [sp, #36]	; 0x24
   88836:	a928      	add	r1, sp, #160	; 0xa0
   88838:	e9cd 0400 	strd	r0, r4, [sp]
   8883c:	9104      	str	r1, [sp, #16]
   8883e:	a825      	add	r0, sp, #148	; 0x94
   88840:	a924      	add	r1, sp, #144	; 0x90
   88842:	e9cd 1002 	strd	r1, r0, [sp, #8]
   88846:	4648      	mov	r0, r9
   88848:	f001 faca 	bl	89de0 <_dtoa_r>
   8884c:	2d47      	cmp	r5, #71	; 0x47
   8884e:	4607      	mov	r7, r0
   88850:	d119      	bne.n	88886 <_svfprintf_r+0x1632>
   88852:	9d07      	ldr	r5, [sp, #28]
   88854:	462b      	mov	r3, r5
   88856:	07db      	lsls	r3, r3, #31
   88858:	f100 812a 	bmi.w	88ab0 <_svfprintf_r+0x185c>
   8885c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8885e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88860:	9207      	str	r2, [sp, #28]
   88862:	2247      	movs	r2, #71	; 0x47
   88864:	9208      	str	r2, [sp, #32]
   88866:	e41a      	b.n	8809e <_svfprintf_r+0xe4a>
   88868:	2003      	movs	r0, #3
   8886a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8886c:	a928      	add	r1, sp, #160	; 0xa0
   8886e:	e9cd 0400 	strd	r0, r4, [sp]
   88872:	9104      	str	r1, [sp, #16]
   88874:	a825      	add	r0, sp, #148	; 0x94
   88876:	a924      	add	r1, sp, #144	; 0x90
   88878:	e9cd 1002 	strd	r1, r0, [sp, #8]
   8887c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8887e:	4648      	mov	r0, r9
   88880:	f001 faae 	bl	89de0 <_dtoa_r>
   88884:	4607      	mov	r7, r0
   88886:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88888:	2d46      	cmp	r5, #70	; 0x46
   8888a:	eb07 0403 	add.w	r4, r7, r3
   8888e:	f47f abf9 	bne.w	88084 <_svfprintf_r+0xe30>
   88892:	783b      	ldrb	r3, [r7, #0]
   88894:	2b30      	cmp	r3, #48	; 0x30
   88896:	f000 821c 	beq.w	88cd2 <_svfprintf_r+0x1a7e>
   8889a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8889c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8889e:	9d07      	ldr	r5, [sp, #28]
   888a0:	441c      	add	r4, r3
   888a2:	9207      	str	r2, [sp, #28]
   888a4:	f7ff bbf1 	b.w	8808a <_svfprintf_r+0xe36>
   888a8:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   888ac:	f7ff b9c3 	b.w	87c36 <_svfprintf_r+0x9e2>
   888b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   888b2:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   888b6:	9308      	str	r3, [sp, #32]
   888b8:	930c      	str	r3, [sp, #48]	; 0x30
   888ba:	9009      	str	r0, [sp, #36]	; 0x24
   888bc:	940e      	str	r4, [sp, #56]	; 0x38
   888be:	9012      	str	r0, [sp, #72]	; 0x48
   888c0:	9016      	str	r0, [sp, #88]	; 0x58
   888c2:	9010      	str	r0, [sp, #64]	; 0x40
   888c4:	f7fe beea 	b.w	8769c <_svfprintf_r+0x448>
   888c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   888ca:	2a00      	cmp	r2, #0
   888cc:	9210      	str	r2, [sp, #64]	; 0x40
   888ce:	f340 821b 	ble.w	88d08 <_svfprintf_r+0x1ab4>
   888d2:	9909      	ldr	r1, [sp, #36]	; 0x24
   888d4:	f005 0301 	and.w	r3, r5, #1
   888d8:	430b      	orrs	r3, r1
   888da:	f040 819a 	bne.w	88c12 <_svfprintf_r+0x19be>
   888de:	2666      	movs	r6, #102	; 0x66
   888e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   888e2:	930c      	str	r3, [sp, #48]	; 0x30
   888e4:	056a      	lsls	r2, r5, #21
   888e6:	f100 816d 	bmi.w	88bc4 <_svfprintf_r+0x1970>
   888ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   888ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   888f0:	9308      	str	r3, [sp, #32]
   888f2:	e75b      	b.n	887ac <_svfprintf_r+0x1558>
   888f4:	4651      	mov	r1, sl
   888f6:	4648      	mov	r0, r9
   888f8:	aa2a      	add	r2, sp, #168	; 0xa8
   888fa:	f004 f8ef 	bl	8cadc <__ssprint_r>
   888fe:	2800      	cmp	r0, #0
   88900:	f47f a8f0 	bne.w	87ae4 <_svfprintf_r+0x890>
   88904:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88906:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88908:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8890a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8890e:	1ad3      	subs	r3, r2, r3
   88910:	f7ff ba93 	b.w	87e3a <_svfprintf_r+0xbe6>
   88914:	2330      	movs	r3, #48	; 0x30
   88916:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8891a:	2358      	movs	r3, #88	; 0x58
   8891c:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   88920:	9b07      	ldr	r3, [sp, #28]
   88922:	f043 0402 	orr.w	r4, r3, #2
   88926:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88928:	2b63      	cmp	r3, #99	; 0x63
   8892a:	f300 80f2 	bgt.w	88b12 <_svfprintf_r+0x18be>
   8892e:	2300      	movs	r3, #0
   88930:	af3d      	add	r7, sp, #244	; 0xf4
   88932:	930d      	str	r3, [sp, #52]	; 0x34
   88934:	9b07      	ldr	r3, [sp, #28]
   88936:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   8893a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   8893e:	9312      	str	r3, [sp, #72]	; 0x48
   88940:	4613      	mov	r3, r2
   88942:	2b00      	cmp	r3, #0
   88944:	f026 0520 	bic.w	r5, r6, #32
   88948:	9407      	str	r4, [sp, #28]
   8894a:	f2c0 808d 	blt.w	88a68 <_svfprintf_r+0x1814>
   8894e:	930f      	str	r3, [sp, #60]	; 0x3c
   88950:	2300      	movs	r3, #0
   88952:	9508      	str	r5, [sp, #32]
   88954:	910c      	str	r1, [sp, #48]	; 0x30
   88956:	931e      	str	r3, [sp, #120]	; 0x78
   88958:	2e61      	cmp	r6, #97	; 0x61
   8895a:	f000 817d 	beq.w	88c58 <_svfprintf_r+0x1a04>
   8895e:	2e41      	cmp	r6, #65	; 0x41
   88960:	f47f ab77 	bne.w	88052 <_svfprintf_r+0xdfe>
   88964:	aa24      	add	r2, sp, #144	; 0x90
   88966:	980c      	ldr	r0, [sp, #48]	; 0x30
   88968:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8896a:	f003 ffc5 	bl	8c8f8 <frexp>
   8896e:	2200      	movs	r2, #0
   88970:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   88974:	f004 fd4c 	bl	8d410 <__aeabi_dmul>
   88978:	4604      	mov	r4, r0
   8897a:	460d      	mov	r5, r1
   8897c:	2200      	movs	r2, #0
   8897e:	2300      	movs	r3, #0
   88980:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   88984:	f004 ffac 	bl	8d8e0 <__aeabi_dcmpeq>
   88988:	b108      	cbz	r0, 8898e <_svfprintf_r+0x173a>
   8898a:	2301      	movs	r3, #1
   8898c:	9324      	str	r3, [sp, #144]	; 0x90
   8898e:	4bae      	ldr	r3, [pc, #696]	; (88c48 <_svfprintf_r+0x19f4>)
   88990:	930c      	str	r3, [sp, #48]	; 0x30
   88992:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88994:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   88998:	3b01      	subs	r3, #1
   8899a:	9613      	str	r6, [sp, #76]	; 0x4c
   8899c:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   889a0:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   889a4:	9721      	str	r7, [sp, #132]	; 0x84
   889a6:	46ba      	mov	sl, r7
   889a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   889ac:	4699      	mov	r9, r3
   889ae:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   889b2:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   889b6:	e006      	b.n	889c6 <_svfprintf_r+0x1772>
   889b8:	2200      	movs	r2, #0
   889ba:	2300      	movs	r3, #0
   889bc:	f004 ff90 	bl	8d8e0 <__aeabi_dcmpeq>
   889c0:	f109 39ff 	add.w	r9, r9, #4294967295
   889c4:	b9e8      	cbnz	r0, 88a02 <_svfprintf_r+0x17ae>
   889c6:	2200      	movs	r2, #0
   889c8:	4ba0      	ldr	r3, [pc, #640]	; (88c4c <_svfprintf_r+0x19f8>)
   889ca:	4630      	mov	r0, r6
   889cc:	4639      	mov	r1, r7
   889ce:	f004 fd1f 	bl	8d410 <__aeabi_dmul>
   889d2:	460d      	mov	r5, r1
   889d4:	4604      	mov	r4, r0
   889d6:	f004 ffcb 	bl	8d970 <__aeabi_d2iz>
   889da:	4680      	mov	r8, r0
   889dc:	f004 fcae 	bl	8d33c <__aeabi_i2d>
   889e0:	460b      	mov	r3, r1
   889e2:	4602      	mov	r2, r0
   889e4:	4629      	mov	r1, r5
   889e6:	4620      	mov	r0, r4
   889e8:	f004 fb5a 	bl	8d0a0 <__aeabi_dsub>
   889ec:	f81b 3008 	ldrb.w	r3, [fp, r8]
   889f0:	f1b9 3fff 	cmp.w	r9, #4294967295
   889f4:	4655      	mov	r5, sl
   889f6:	4606      	mov	r6, r0
   889f8:	460f      	mov	r7, r1
   889fa:	464c      	mov	r4, r9
   889fc:	f80a 3b01 	strb.w	r3, [sl], #1
   88a00:	d1da      	bne.n	889b8 <_svfprintf_r+0x1764>
   88a02:	4630      	mov	r0, r6
   88a04:	4639      	mov	r1, r7
   88a06:	2200      	movs	r2, #0
   88a08:	4b91      	ldr	r3, [pc, #580]	; (88c50 <_svfprintf_r+0x19fc>)
   88a0a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   88a0e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   88a10:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   88a14:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   88a18:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88a1c:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   88a20:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   88a24:	9f21      	ldr	r7, [sp, #132]	; 0x84
   88a26:	f004 ff83 	bl	8d930 <__aeabi_dcmpgt>
   88a2a:	2800      	cmp	r0, #0
   88a2c:	d155      	bne.n	88ada <_svfprintf_r+0x1886>
   88a2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88a32:	2200      	movs	r2, #0
   88a34:	4b86      	ldr	r3, [pc, #536]	; (88c50 <_svfprintf_r+0x19fc>)
   88a36:	f004 ff53 	bl	8d8e0 <__aeabi_dcmpeq>
   88a3a:	b110      	cbz	r0, 88a42 <_svfprintf_r+0x17ee>
   88a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88a3e:	07db      	lsls	r3, r3, #31
   88a40:	d44b      	bmi.n	88ada <_svfprintf_r+0x1886>
   88a42:	2c00      	cmp	r4, #0
   88a44:	db08      	blt.n	88a58 <_svfprintf_r+0x1804>
   88a46:	2230      	movs	r2, #48	; 0x30
   88a48:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88a4a:	1c63      	adds	r3, r4, #1
   88a4c:	440b      	add	r3, r1
   88a4e:	f801 2b01 	strb.w	r2, [r1], #1
   88a52:	428b      	cmp	r3, r1
   88a54:	d1fb      	bne.n	88a4e <_svfprintf_r+0x17fa>
   88a56:	910f      	str	r1, [sp, #60]	; 0x3c
   88a58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88a5a:	9d07      	ldr	r5, [sp, #28]
   88a5c:	1bdb      	subs	r3, r3, r7
   88a5e:	9313      	str	r3, [sp, #76]	; 0x4c
   88a60:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88a62:	9307      	str	r3, [sp, #28]
   88a64:	f7ff bb1d 	b.w	880a2 <_svfprintf_r+0xe4e>
   88a68:	9508      	str	r5, [sp, #32]
   88a6a:	232d      	movs	r3, #45	; 0x2d
   88a6c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   88a70:	931e      	str	r3, [sp, #120]	; 0x78
   88a72:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   88a76:	910c      	str	r1, [sp, #48]	; 0x30
   88a78:	930f      	str	r3, [sp, #60]	; 0x3c
   88a7a:	e76d      	b.n	88958 <_svfprintf_r+0x1704>
   88a7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88a7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88a80:	189a      	adds	r2, r3, r2
   88a82:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88a84:	920c      	str	r2, [sp, #48]	; 0x30
   88a86:	2b00      	cmp	r3, #0
   88a88:	f340 811a 	ble.w	88cc0 <_svfprintf_r+0x1a6c>
   88a8c:	2667      	movs	r6, #103	; 0x67
   88a8e:	e729      	b.n	888e4 <_svfprintf_r+0x1690>
   88a90:	2300      	movs	r3, #0
   88a92:	9309      	str	r3, [sp, #36]	; 0x24
   88a94:	f7fe bc2b 	b.w	872ee <_svfprintf_r+0x9a>
   88a98:	4648      	mov	r0, r9
   88a9a:	4651      	mov	r1, sl
   88a9c:	aa2a      	add	r2, sp, #168	; 0xa8
   88a9e:	f004 f81d 	bl	8cadc <__ssprint_r>
   88aa2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88aa6:	f7fe bdae 	b.w	87606 <_svfprintf_r+0x3b2>
   88aaa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88aac:	f7ff b95f 	b.w	87d6e <_svfprintf_r+0xb1a>
   88ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88ab2:	9d07      	ldr	r5, [sp, #28]
   88ab4:	18fc      	adds	r4, r7, r3
   88ab6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88ab8:	9307      	str	r3, [sp, #28]
   88aba:	2347      	movs	r3, #71	; 0x47
   88abc:	9308      	str	r3, [sp, #32]
   88abe:	f7ff bae4 	b.w	8808a <_svfprintf_r+0xe36>
   88ac2:	46cb      	mov	fp, r9
   88ac4:	46d1      	mov	r9, sl
   88ac6:	f7ff b80e 	b.w	87ae6 <_svfprintf_r+0x892>
   88aca:	46d1      	mov	r9, sl
   88acc:	f7ff b80b 	b.w	87ae6 <_svfprintf_r+0x892>
   88ad0:	4b60      	ldr	r3, [pc, #384]	; (88c54 <_svfprintf_r+0x1a00>)
   88ad2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88ad4:	930f      	str	r3, [sp, #60]	; 0x3c
   88ad6:	f7fe bfb7 	b.w	87a48 <_svfprintf_r+0x7f4>
   88ada:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88adc:	990c      	ldr	r1, [sp, #48]	; 0x30
   88ade:	9528      	str	r5, [sp, #160]	; 0xa0
   88ae0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88ae4:	7bc9      	ldrb	r1, [r1, #15]
   88ae6:	428a      	cmp	r2, r1
   88ae8:	f040 812a 	bne.w	88d40 <_svfprintf_r+0x1aec>
   88aec:	2030      	movs	r0, #48	; 0x30
   88aee:	f803 0c01 	strb.w	r0, [r3, #-1]
   88af2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88af4:	1e5a      	subs	r2, r3, #1
   88af6:	9228      	str	r2, [sp, #160]	; 0xa0
   88af8:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88afc:	4291      	cmp	r1, r2
   88afe:	d0f6      	beq.n	88aee <_svfprintf_r+0x189a>
   88b00:	2a39      	cmp	r2, #57	; 0x39
   88b02:	bf0b      	itete	eq
   88b04:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   88b06:	3201      	addne	r2, #1
   88b08:	7a92      	ldrbeq	r2, [r2, #10]
   88b0a:	b2d2      	uxtbne	r2, r2
   88b0c:	f803 2c01 	strb.w	r2, [r3, #-1]
   88b10:	e7a2      	b.n	88a58 <_svfprintf_r+0x1804>
   88b12:	4648      	mov	r0, r9
   88b14:	1c59      	adds	r1, r3, #1
   88b16:	f002 fe09 	bl	8b72c <_malloc_r>
   88b1a:	4607      	mov	r7, r0
   88b1c:	2800      	cmp	r0, #0
   88b1e:	f000 811d 	beq.w	88d5c <_svfprintf_r+0x1b08>
   88b22:	900d      	str	r0, [sp, #52]	; 0x34
   88b24:	e706      	b.n	88934 <_svfprintf_r+0x16e0>
   88b26:	2330      	movs	r3, #48	; 0x30
   88b28:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   88b2c:	2378      	movs	r3, #120	; 0x78
   88b2e:	e6f5      	b.n	8891c <_svfprintf_r+0x16c8>
   88b30:	9b07      	ldr	r3, [sp, #28]
   88b32:	9308      	str	r3, [sp, #32]
   88b34:	f7ff b894 	b.w	87c60 <_svfprintf_r+0xa0c>
   88b38:	464a      	mov	r2, r9
   88b3a:	46d1      	mov	r9, sl
   88b3c:	4692      	mov	sl, r2
   88b3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   88b40:	3301      	adds	r3, #1
   88b42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88b44:	442c      	add	r4, r5
   88b46:	2b07      	cmp	r3, #7
   88b48:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88b4c:	e9c8 2500 	strd	r2, r5, [r8]
   88b50:	f77f a8b8 	ble.w	87cc4 <_svfprintf_r+0xa70>
   88b54:	4651      	mov	r1, sl
   88b56:	4648      	mov	r0, r9
   88b58:	aa2a      	add	r2, sp, #168	; 0xa8
   88b5a:	f003 ffbf 	bl	8cadc <__ssprint_r>
   88b5e:	2800      	cmp	r0, #0
   88b60:	f47e afc0 	bne.w	87ae4 <_svfprintf_r+0x890>
   88b64:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88b68:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88b6c:	f7ff b8ac 	b.w	87cc8 <_svfprintf_r+0xa74>
   88b70:	2b00      	cmp	r3, #0
   88b72:	bf08      	it	eq
   88b74:	2301      	moveq	r3, #1
   88b76:	9309      	str	r3, [sp, #36]	; 0x24
   88b78:	9b07      	ldr	r3, [sp, #28]
   88b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   88b7e:	9312      	str	r3, [sp, #72]	; 0x48
   88b80:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88b82:	2b00      	cmp	r3, #0
   88b84:	930c      	str	r3, [sp, #48]	; 0x30
   88b86:	f2c0 80bd 	blt.w	88d04 <_svfprintf_r+0x1ab0>
   88b8a:	2402      	movs	r4, #2
   88b8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   88b8e:	a828      	add	r0, sp, #160	; 0xa0
   88b90:	aa25      	add	r2, sp, #148	; 0x94
   88b92:	ab24      	add	r3, sp, #144	; 0x90
   88b94:	e9cd 2003 	strd	r2, r0, [sp, #12]
   88b98:	e9cd 4500 	strd	r4, r5, [sp]
   88b9c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   88ba0:	9302      	str	r3, [sp, #8]
   88ba2:	4622      	mov	r2, r4
   88ba4:	462b      	mov	r3, r5
   88ba6:	4648      	mov	r0, r9
   88ba8:	911e      	str	r1, [sp, #120]	; 0x78
   88baa:	f001 f919 	bl	89de0 <_dtoa_r>
   88bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88bb0:	4607      	mov	r7, r0
   88bb2:	930f      	str	r3, [sp, #60]	; 0x3c
   88bb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88bb6:	940c      	str	r4, [sp, #48]	; 0x30
   88bb8:	930d      	str	r3, [sp, #52]	; 0x34
   88bba:	e64a      	b.n	88852 <_svfprintf_r+0x15fe>
   88bbc:	2300      	movs	r3, #0
   88bbe:	930d      	str	r3, [sp, #52]	; 0x34
   88bc0:	e753      	b.n	88a6a <_svfprintf_r+0x1816>
   88bc2:	2667      	movs	r6, #103	; 0x67
   88bc4:	991a      	ldr	r1, [sp, #104]	; 0x68
   88bc6:	780b      	ldrb	r3, [r1, #0]
   88bc8:	2bff      	cmp	r3, #255	; 0xff
   88bca:	f000 80de 	beq.w	88d8a <_svfprintf_r+0x1b36>
   88bce:	2400      	movs	r4, #0
   88bd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88bd2:	4620      	mov	r0, r4
   88bd4:	e003      	b.n	88bde <_svfprintf_r+0x198a>
   88bd6:	3001      	adds	r0, #1
   88bd8:	3101      	adds	r1, #1
   88bda:	2bff      	cmp	r3, #255	; 0xff
   88bdc:	d008      	beq.n	88bf0 <_svfprintf_r+0x199c>
   88bde:	4293      	cmp	r3, r2
   88be0:	da06      	bge.n	88bf0 <_svfprintf_r+0x199c>
   88be2:	1ad2      	subs	r2, r2, r3
   88be4:	784b      	ldrb	r3, [r1, #1]
   88be6:	2b00      	cmp	r3, #0
   88be8:	d1f5      	bne.n	88bd6 <_svfprintf_r+0x1982>
   88bea:	780b      	ldrb	r3, [r1, #0]
   88bec:	3401      	adds	r4, #1
   88bee:	e7f4      	b.n	88bda <_svfprintf_r+0x1986>
   88bf0:	911a      	str	r1, [sp, #104]	; 0x68
   88bf2:	9210      	str	r2, [sp, #64]	; 0x40
   88bf4:	9016      	str	r0, [sp, #88]	; 0x58
   88bf6:	9412      	str	r4, [sp, #72]	; 0x48
   88bf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88bfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
   88bfc:	990c      	ldr	r1, [sp, #48]	; 0x30
   88bfe:	4413      	add	r3, r2
   88c00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   88c02:	fb02 1303 	mla	r3, r2, r3, r1
   88c06:	930c      	str	r3, [sp, #48]	; 0x30
   88c08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88c0c:	9308      	str	r3, [sp, #32]
   88c0e:	f7ff bab6 	b.w	8817e <_svfprintf_r+0xf2a>
   88c12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88c14:	2666      	movs	r6, #102	; 0x66
   88c16:	18d3      	adds	r3, r2, r3
   88c18:	4419      	add	r1, r3
   88c1a:	910c      	str	r1, [sp, #48]	; 0x30
   88c1c:	e662      	b.n	888e4 <_svfprintf_r+0x1690>
   88c1e:	f106 020f 	add.w	r2, r6, #15
   88c22:	2101      	movs	r1, #1
   88c24:	b2d2      	uxtb	r2, r2
   88c26:	f7ff ba4f 	b.w	880c8 <_svfprintf_r+0xe74>
   88c2a:	2900      	cmp	r1, #0
   88c2c:	d167      	bne.n	88cfe <_svfprintf_r+0x1aaa>
   88c2e:	2230      	movs	r2, #48	; 0x30
   88c30:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   88c34:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   88c38:	3330      	adds	r3, #48	; 0x30
   88c3a:	f802 3b01 	strb.w	r3, [r2], #1
   88c3e:	ab26      	add	r3, sp, #152	; 0x98
   88c40:	1ad3      	subs	r3, r2, r3
   88c42:	931b      	str	r3, [sp, #108]	; 0x6c
   88c44:	f7ff ba83 	b.w	8814e <_svfprintf_r+0xefa>
   88c48:	0008da78 	.word	0x0008da78
   88c4c:	40300000 	.word	0x40300000
   88c50:	3fe00000 	.word	0x3fe00000
   88c54:	0008daa8 	.word	0x0008daa8
   88c58:	aa24      	add	r2, sp, #144	; 0x90
   88c5a:	980c      	ldr	r0, [sp, #48]	; 0x30
   88c5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88c5e:	f003 fe4b 	bl	8c8f8 <frexp>
   88c62:	2200      	movs	r2, #0
   88c64:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   88c68:	f004 fbd2 	bl	8d410 <__aeabi_dmul>
   88c6c:	4604      	mov	r4, r0
   88c6e:	460d      	mov	r5, r1
   88c70:	2200      	movs	r2, #0
   88c72:	2300      	movs	r3, #0
   88c74:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   88c78:	f004 fe32 	bl	8d8e0 <__aeabi_dcmpeq>
   88c7c:	b108      	cbz	r0, 88c82 <_svfprintf_r+0x1a2e>
   88c7e:	2301      	movs	r3, #1
   88c80:	9324      	str	r3, [sp, #144]	; 0x90
   88c82:	4b44      	ldr	r3, [pc, #272]	; (88d94 <_svfprintf_r+0x1b40>)
   88c84:	930c      	str	r3, [sp, #48]	; 0x30
   88c86:	e684      	b.n	88992 <_svfprintf_r+0x173e>
   88c88:	2667      	movs	r6, #103	; 0x67
   88c8a:	e62e      	b.n	888ea <_svfprintf_r+0x1696>
   88c8c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88c90:	f7fe bcb9 	b.w	87606 <_svfprintf_r+0x3b2>
   88c94:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88c96:	930c      	str	r3, [sp, #48]	; 0x30
   88c98:	e57c      	b.n	88794 <_svfprintf_r+0x1540>
   88c9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88c9c:	2003      	movs	r0, #3
   88c9e:	2b00      	cmp	r3, #0
   88ca0:	bfb8      	it	lt
   88ca2:	232d      	movlt	r3, #45	; 0x2d
   88ca4:	f04f 0100 	mov.w	r1, #0
   88ca8:	bfba      	itte	lt
   88caa:	461a      	movlt	r2, r3
   88cac:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   88cb0:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   88cb4:	4f38      	ldr	r7, [pc, #224]	; (88d98 <_svfprintf_r+0x1b44>)
   88cb6:	4b39      	ldr	r3, [pc, #228]	; (88d9c <_svfprintf_r+0x1b48>)
   88cb8:	9008      	str	r0, [sp, #32]
   88cba:	910d      	str	r1, [sp, #52]	; 0x34
   88cbc:	f7fe bce2 	b.w	87684 <_svfprintf_r+0x430>
   88cc0:	f1c3 0301 	rsb	r3, r3, #1
   88cc4:	441a      	add	r2, r3
   88cc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88cca:	2667      	movs	r6, #103	; 0x67
   88ccc:	920c      	str	r2, [sp, #48]	; 0x30
   88cce:	9308      	str	r3, [sp, #32]
   88cd0:	e56c      	b.n	887ac <_svfprintf_r+0x1558>
   88cd2:	2200      	movs	r2, #0
   88cd4:	2300      	movs	r3, #0
   88cd6:	980c      	ldr	r0, [sp, #48]	; 0x30
   88cd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88cda:	f004 fe01 	bl	8d8e0 <__aeabi_dcmpeq>
   88cde:	2800      	cmp	r0, #0
   88ce0:	f47f addb 	bne.w	8889a <_svfprintf_r+0x1646>
   88ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88ce6:	f1c3 0301 	rsb	r3, r3, #1
   88cea:	9324      	str	r3, [sp, #144]	; 0x90
   88cec:	e5d6      	b.n	8889c <_svfprintf_r+0x1648>
   88cee:	992b      	ldr	r1, [sp, #172]	; 0xac
   88cf0:	f7ff bb59 	b.w	883a6 <_svfprintf_r+0x1152>
   88cf4:	07e9      	lsls	r1, r5, #31
   88cf6:	f57f aa35 	bpl.w	88164 <_svfprintf_r+0xf10>
   88cfa:	f7ff ba2f 	b.w	8815c <_svfprintf_r+0xf08>
   88cfe:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88d02:	e799      	b.n	88c38 <_svfprintf_r+0x19e4>
   88d04:	900d      	str	r0, [sp, #52]	; 0x34
   88d06:	e6b0      	b.n	88a6a <_svfprintf_r+0x1816>
   88d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88d0a:	f005 0501 	and.w	r5, r5, #1
   88d0e:	4613      	mov	r3, r2
   88d10:	432b      	orrs	r3, r5
   88d12:	d104      	bne.n	88d1e <_svfprintf_r+0x1aca>
   88d14:	2301      	movs	r3, #1
   88d16:	2666      	movs	r6, #102	; 0x66
   88d18:	9308      	str	r3, [sp, #32]
   88d1a:	930c      	str	r3, [sp, #48]	; 0x30
   88d1c:	e546      	b.n	887ac <_svfprintf_r+0x1558>
   88d1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88d20:	2666      	movs	r6, #102	; 0x66
   88d22:	3301      	adds	r3, #1
   88d24:	441a      	add	r2, r3
   88d26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88d2a:	920c      	str	r2, [sp, #48]	; 0x30
   88d2c:	9308      	str	r3, [sp, #32]
   88d2e:	e53d      	b.n	887ac <_svfprintf_r+0x1558>
   88d30:	4b1b      	ldr	r3, [pc, #108]	; (88da0 <_svfprintf_r+0x1b4c>)
   88d32:	930f      	str	r3, [sp, #60]	; 0x3c
   88d34:	f7ff bbe9 	b.w	8850a <_svfprintf_r+0x12b6>
   88d38:	4a19      	ldr	r2, [pc, #100]	; (88da0 <_svfprintf_r+0x1b4c>)
   88d3a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88d3c:	920f      	str	r2, [sp, #60]	; 0x3c
   88d3e:	e4b1      	b.n	886a4 <_svfprintf_r+0x1450>
   88d40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88d42:	e6dd      	b.n	88b00 <_svfprintf_r+0x18ac>
   88d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88d46:	f89b 6001 	ldrb.w	r6, [fp, #1]
   88d4a:	f853 0b04 	ldr.w	r0, [r3], #4
   88d4e:	4693      	mov	fp, r2
   88d50:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   88d54:	9009      	str	r0, [sp, #36]	; 0x24
   88d56:	930e      	str	r3, [sp, #56]	; 0x38
   88d58:	f7fe bac7 	b.w	872ea <_svfprintf_r+0x96>
   88d5c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   88d64:	f8aa 300c 	strh.w	r3, [sl, #12]
   88d68:	f7fe bc4d 	b.w	87606 <_svfprintf_r+0x3b2>
   88d6c:	4a0c      	ldr	r2, [pc, #48]	; (88da0 <_svfprintf_r+0x1b4c>)
   88d6e:	920f      	str	r2, [sp, #60]	; 0x3c
   88d70:	e6e6      	b.n	88b40 <_svfprintf_r+0x18ec>
   88d72:	230c      	movs	r3, #12
   88d74:	f04f 32ff 	mov.w	r2, #4294967295
   88d78:	f8c9 3000 	str.w	r3, [r9]
   88d7c:	920a      	str	r2, [sp, #40]	; 0x28
   88d7e:	f7fe bc49 	b.w	87614 <_svfprintf_r+0x3c0>
   88d82:	2302      	movs	r3, #2
   88d84:	931b      	str	r3, [sp, #108]	; 0x6c
   88d86:	f7ff b9e2 	b.w	8814e <_svfprintf_r+0xefa>
   88d8a:	2300      	movs	r3, #0
   88d8c:	9312      	str	r3, [sp, #72]	; 0x48
   88d8e:	9316      	str	r3, [sp, #88]	; 0x58
   88d90:	e732      	b.n	88bf8 <_svfprintf_r+0x19a4>
   88d92:	bf00      	nop
   88d94:	0008da64 	.word	0x0008da64
   88d98:	0008da5c 	.word	0x0008da5c
   88d9c:	0008da60 	.word	0x0008da60
   88da0:	0008daa8 	.word	0x0008daa8

00088da4 <__sprint_r.part.0>:
   88da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88da8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   88daa:	4690      	mov	r8, r2
   88dac:	049c      	lsls	r4, r3, #18
   88dae:	d52d      	bpl.n	88e0c <__sprint_r.part.0+0x68>
   88db0:	6893      	ldr	r3, [r2, #8]
   88db2:	6812      	ldr	r2, [r2, #0]
   88db4:	b343      	cbz	r3, 88e08 <__sprint_r.part.0+0x64>
   88db6:	468b      	mov	fp, r1
   88db8:	4606      	mov	r6, r0
   88dba:	f102 0908 	add.w	r9, r2, #8
   88dbe:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   88dc2:	ea5f 079a 	movs.w	r7, sl, lsr #2
   88dc6:	d015      	beq.n	88df4 <__sprint_r.part.0+0x50>
   88dc8:	2400      	movs	r4, #0
   88dca:	3d04      	subs	r5, #4
   88dcc:	e001      	b.n	88dd2 <__sprint_r.part.0+0x2e>
   88dce:	42a7      	cmp	r7, r4
   88dd0:	d00e      	beq.n	88df0 <__sprint_r.part.0+0x4c>
   88dd2:	465a      	mov	r2, fp
   88dd4:	4630      	mov	r0, r6
   88dd6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   88dda:	f002 f8f9 	bl	8afd0 <_fputwc_r>
   88dde:	1c43      	adds	r3, r0, #1
   88de0:	f104 0401 	add.w	r4, r4, #1
   88de4:	d1f3      	bne.n	88dce <__sprint_r.part.0+0x2a>
   88de6:	2300      	movs	r3, #0
   88de8:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88df0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88df4:	f02a 0a03 	bic.w	sl, sl, #3
   88df8:	eba3 030a 	sub.w	r3, r3, sl
   88dfc:	f8c8 3008 	str.w	r3, [r8, #8]
   88e00:	f109 0908 	add.w	r9, r9, #8
   88e04:	2b00      	cmp	r3, #0
   88e06:	d1da      	bne.n	88dbe <__sprint_r.part.0+0x1a>
   88e08:	2000      	movs	r0, #0
   88e0a:	e7ec      	b.n	88de6 <__sprint_r.part.0+0x42>
   88e0c:	f002 fa6a 	bl	8b2e4 <__sfvwrite_r>
   88e10:	2300      	movs	r3, #0
   88e12:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88e16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88e1a:	bf00      	nop

00088e1c <_vfiprintf_r>:
   88e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88e20:	b0bb      	sub	sp, #236	; 0xec
   88e22:	461c      	mov	r4, r3
   88e24:	4689      	mov	r9, r1
   88e26:	4690      	mov	r8, r2
   88e28:	e9cd 3004 	strd	r3, r0, [sp, #16]
   88e2c:	b118      	cbz	r0, 88e36 <_vfiprintf_r+0x1a>
   88e2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88e30:	2b00      	cmp	r3, #0
   88e32:	f000 827a 	beq.w	8932a <_vfiprintf_r+0x50e>
   88e36:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88e3a:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   88e3e:	07de      	lsls	r6, r3, #31
   88e40:	b28a      	uxth	r2, r1
   88e42:	d402      	bmi.n	88e4a <_vfiprintf_r+0x2e>
   88e44:	058d      	lsls	r5, r1, #22
   88e46:	f140 851a 	bpl.w	8987e <_vfiprintf_r+0xa62>
   88e4a:	0490      	lsls	r0, r2, #18
   88e4c:	d40a      	bmi.n	88e64 <_vfiprintf_r+0x48>
   88e4e:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88e52:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   88e56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   88e5a:	f8a9 200c 	strh.w	r2, [r9, #12]
   88e5e:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   88e62:	b292      	uxth	r2, r2
   88e64:	0711      	lsls	r1, r2, #28
   88e66:	f140 80f6 	bpl.w	89056 <_vfiprintf_r+0x23a>
   88e6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   88e6e:	2b00      	cmp	r3, #0
   88e70:	f000 80f1 	beq.w	89056 <_vfiprintf_r+0x23a>
   88e74:	f002 031a 	and.w	r3, r2, #26
   88e78:	2b0a      	cmp	r3, #10
   88e7a:	f000 80fa 	beq.w	89072 <_vfiprintf_r+0x256>
   88e7e:	2300      	movs	r3, #0
   88e80:	46cb      	mov	fp, r9
   88e82:	e9cd 3308 	strd	r3, r3, [sp, #32]
   88e86:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   88e8a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   88e8e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88e92:	9303      	str	r3, [sp, #12]
   88e94:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   88e98:	f898 3000 	ldrb.w	r3, [r8]
   88e9c:	2b00      	cmp	r3, #0
   88e9e:	f000 81ed 	beq.w	8927c <_vfiprintf_r+0x460>
   88ea2:	4644      	mov	r4, r8
   88ea4:	e004      	b.n	88eb0 <_vfiprintf_r+0x94>
   88ea6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   88eaa:	2b00      	cmp	r3, #0
   88eac:	f000 8127 	beq.w	890fe <_vfiprintf_r+0x2e2>
   88eb0:	2b25      	cmp	r3, #37	; 0x25
   88eb2:	d1f8      	bne.n	88ea6 <_vfiprintf_r+0x8a>
   88eb4:	ebb4 0508 	subs.w	r5, r4, r8
   88eb8:	f040 8125 	bne.w	89106 <_vfiprintf_r+0x2ea>
   88ebc:	7823      	ldrb	r3, [r4, #0]
   88ebe:	2b00      	cmp	r3, #0
   88ec0:	f000 81dc 	beq.w	8927c <_vfiprintf_r+0x460>
   88ec4:	f04f 0200 	mov.w	r2, #0
   88ec8:	2300      	movs	r3, #0
   88eca:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88ece:	f04f 32ff 	mov.w	r2, #4294967295
   88ed2:	252b      	movs	r5, #43	; 0x2b
   88ed4:	461f      	mov	r7, r3
   88ed6:	9302      	str	r3, [sp, #8]
   88ed8:	7863      	ldrb	r3, [r4, #1]
   88eda:	f104 0801 	add.w	r8, r4, #1
   88ede:	9200      	str	r2, [sp, #0]
   88ee0:	f108 0801 	add.w	r8, r8, #1
   88ee4:	f1a3 0220 	sub.w	r2, r3, #32
   88ee8:	2a5a      	cmp	r2, #90	; 0x5a
   88eea:	f200 8141 	bhi.w	89170 <_vfiprintf_r+0x354>
   88eee:	e8df f012 	tbh	[pc, r2, lsl #1]
   88ef2:	0272      	.short	0x0272
   88ef4:	013f013f 	.word	0x013f013f
   88ef8:	013f026d 	.word	0x013f026d
   88efc:	013f013f 	.word	0x013f013f
   88f00:	013f024b 	.word	0x013f024b
   88f04:	006a013f 	.word	0x006a013f
   88f08:	013f0227 	.word	0x013f0227
   88f0c:	02310222 	.word	0x02310222
   88f10:	022c013f 	.word	0x022c013f
   88f14:	005b005b 	.word	0x005b005b
   88f18:	005b005b 	.word	0x005b005b
   88f1c:	005b005b 	.word	0x005b005b
   88f20:	005b005b 	.word	0x005b005b
   88f24:	013f005b 	.word	0x013f005b
   88f28:	013f013f 	.word	0x013f013f
   88f2c:	013f013f 	.word	0x013f013f
   88f30:	013f013f 	.word	0x013f013f
   88f34:	013f013f 	.word	0x013f013f
   88f38:	007a020e 	.word	0x007a020e
   88f3c:	013f013f 	.word	0x013f013f
   88f40:	013f013f 	.word	0x013f013f
   88f44:	013f013f 	.word	0x013f013f
   88f48:	013f013f 	.word	0x013f013f
   88f4c:	013f013f 	.word	0x013f013f
   88f50:	013f00d7 	.word	0x013f00d7
   88f54:	013f013f 	.word	0x013f013f
   88f58:	013f01f2 	.word	0x013f01f2
   88f5c:	013f0297 	.word	0x013f0297
   88f60:	0500013f 	.word	0x0500013f
   88f64:	013f013f 	.word	0x013f013f
   88f68:	013f013f 	.word	0x013f013f
   88f6c:	013f013f 	.word	0x013f013f
   88f70:	013f013f 	.word	0x013f013f
   88f74:	013f013f 	.word	0x013f013f
   88f78:	007c020e 	.word	0x007c020e
   88f7c:	013f013f 	.word	0x013f013f
   88f80:	028a013f 	.word	0x028a013f
   88f84:	0075007c 	.word	0x0075007c
   88f88:	027d013f 	.word	0x027d013f
   88f8c:	02b6013f 	.word	0x02b6013f
   88f90:	02a600d9 	.word	0x02a600d9
   88f94:	013f0075 	.word	0x013f0075
   88f98:	007201f2 	.word	0x007201f2
   88f9c:	013f04fe 	.word	0x013f04fe
   88fa0:	051c013f 	.word	0x051c013f
   88fa4:	0072013f 	.word	0x0072013f
   88fa8:	2100      	movs	r1, #0
   88faa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88fae:	f818 3b01 	ldrb.w	r3, [r8], #1
   88fb2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88fb6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   88fba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88fbe:	2a09      	cmp	r2, #9
   88fc0:	d9f5      	bls.n	88fae <_vfiprintf_r+0x192>
   88fc2:	9102      	str	r1, [sp, #8]
   88fc4:	e78e      	b.n	88ee4 <_vfiprintf_r+0xc8>
   88fc6:	9b04      	ldr	r3, [sp, #16]
   88fc8:	f853 2b04 	ldr.w	r2, [r3], #4
   88fcc:	2a00      	cmp	r2, #0
   88fce:	9202      	str	r2, [sp, #8]
   88fd0:	9304      	str	r3, [sp, #16]
   88fd2:	f2c0 81ad 	blt.w	89330 <_vfiprintf_r+0x514>
   88fd6:	f898 3000 	ldrb.w	r3, [r8]
   88fda:	e781      	b.n	88ee0 <_vfiprintf_r+0xc4>
   88fdc:	f898 3000 	ldrb.w	r3, [r8]
   88fe0:	f047 0720 	orr.w	r7, r7, #32
   88fe4:	e77c      	b.n	88ee0 <_vfiprintf_r+0xc4>
   88fe6:	f047 0710 	orr.w	r7, r7, #16
   88fea:	06bc      	lsls	r4, r7, #26
   88fec:	f140 8158 	bpl.w	892a0 <_vfiprintf_r+0x484>
   88ff0:	9c04      	ldr	r4, [sp, #16]
   88ff2:	3407      	adds	r4, #7
   88ff4:	f024 0307 	bic.w	r3, r4, #7
   88ff8:	4619      	mov	r1, r3
   88ffa:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   88ffe:	4614      	mov	r4, r2
   89000:	461d      	mov	r5, r3
   89002:	9104      	str	r1, [sp, #16]
   89004:	2a00      	cmp	r2, #0
   89006:	f173 0300 	sbcs.w	r3, r3, #0
   8900a:	f2c0 841e 	blt.w	8984a <_vfiprintf_r+0xa2e>
   8900e:	9b00      	ldr	r3, [sp, #0]
   89010:	3301      	adds	r3, #1
   89012:	f000 84f0 	beq.w	899f6 <_vfiprintf_r+0xbda>
   89016:	ea54 0305 	orrs.w	r3, r4, r5
   8901a:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   8901e:	f000 83fc 	beq.w	8981a <_vfiprintf_r+0x9fe>
   89022:	2d00      	cmp	r5, #0
   89024:	bf08      	it	eq
   89026:	2c0a      	cmpeq	r4, #10
   89028:	f080 84a9 	bcs.w	8997e <_vfiprintf_r+0xb62>
   8902c:	2301      	movs	r3, #1
   8902e:	464f      	mov	r7, r9
   89030:	3430      	adds	r4, #48	; 0x30
   89032:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   89036:	9301      	str	r3, [sp, #4]
   89038:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   8903c:	e9dd 2100 	ldrd	r2, r1, [sp]
   89040:	428a      	cmp	r2, r1
   89042:	bfb8      	it	lt
   89044:	460a      	movlt	r2, r1
   89046:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   8904a:	4615      	mov	r5, r2
   8904c:	2b00      	cmp	r3, #0
   8904e:	f000 809d 	beq.w	8918c <_vfiprintf_r+0x370>
   89052:	3501      	adds	r5, #1
   89054:	e09a      	b.n	8918c <_vfiprintf_r+0x370>
   89056:	4649      	mov	r1, r9
   89058:	9805      	ldr	r0, [sp, #20]
   8905a:	f000 fdb9 	bl	89bd0 <__swsetup_r>
   8905e:	2800      	cmp	r0, #0
   89060:	f040 854a 	bne.w	89af8 <_vfiprintf_r+0xcdc>
   89064:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   89068:	f002 031a 	and.w	r3, r2, #26
   8906c:	2b0a      	cmp	r3, #10
   8906e:	f47f af06 	bne.w	88e7e <_vfiprintf_r+0x62>
   89072:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   89076:	2b00      	cmp	r3, #0
   89078:	f6ff af01 	blt.w	88e7e <_vfiprintf_r+0x62>
   8907c:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89080:	07de      	lsls	r6, r3, #31
   89082:	d402      	bmi.n	8908a <_vfiprintf_r+0x26e>
   89084:	0595      	lsls	r5, r2, #22
   89086:	f140 850e 	bpl.w	89aa6 <_vfiprintf_r+0xc8a>
   8908a:	4623      	mov	r3, r4
   8908c:	4642      	mov	r2, r8
   8908e:	4649      	mov	r1, r9
   89090:	9805      	ldr	r0, [sp, #20]
   89092:	f000 fd59 	bl	89b48 <__sbprintf>
   89096:	9003      	str	r0, [sp, #12]
   89098:	9803      	ldr	r0, [sp, #12]
   8909a:	b03b      	add	sp, #236	; 0xec
   8909c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   890a0:	f047 0710 	orr.w	r7, r7, #16
   890a4:	06b8      	lsls	r0, r7, #26
   890a6:	9c04      	ldr	r4, [sp, #16]
   890a8:	f140 8109 	bpl.w	892be <_vfiprintf_r+0x4a2>
   890ac:	3407      	adds	r4, #7
   890ae:	f024 0307 	bic.w	r3, r4, #7
   890b2:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   890b6:	9304      	str	r3, [sp, #16]
   890b8:	2300      	movs	r3, #0
   890ba:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   890be:	f04f 0200 	mov.w	r2, #0
   890c2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   890c6:	9a00      	ldr	r2, [sp, #0]
   890c8:	4611      	mov	r1, r2
   890ca:	3101      	adds	r1, #1
   890cc:	f000 81db 	beq.w	89486 <_vfiprintf_r+0x66a>
   890d0:	ea54 0105 	orrs.w	r1, r4, r5
   890d4:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   890d8:	f040 81d4 	bne.w	89484 <_vfiprintf_r+0x668>
   890dc:	2a00      	cmp	r2, #0
   890de:	f040 848d 	bne.w	899fc <_vfiprintf_r+0xbe0>
   890e2:	2b00      	cmp	r3, #0
   890e4:	f040 839e 	bne.w	89824 <_vfiprintf_r+0xa08>
   890e8:	f019 0301 	ands.w	r3, r9, #1
   890ec:	9301      	str	r3, [sp, #4]
   890ee:	f000 83c3 	beq.w	89878 <_vfiprintf_r+0xa5c>
   890f2:	2330      	movs	r3, #48	; 0x30
   890f4:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   890f8:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   890fc:	e79e      	b.n	8903c <_vfiprintf_r+0x220>
   890fe:	ebb4 0508 	subs.w	r5, r4, r8
   89102:	f000 80bb 	beq.w	8927c <_vfiprintf_r+0x460>
   89106:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8910a:	3301      	adds	r3, #1
   8910c:	442a      	add	r2, r5
   8910e:	2b07      	cmp	r3, #7
   89110:	e9ca 8500 	strd	r8, r5, [sl]
   89114:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   89118:	dc06      	bgt.n	89128 <_vfiprintf_r+0x30c>
   8911a:	f10a 0a08 	add.w	sl, sl, #8
   8911e:	9a03      	ldr	r2, [sp, #12]
   89120:	7823      	ldrb	r3, [r4, #0]
   89122:	442a      	add	r2, r5
   89124:	9203      	str	r2, [sp, #12]
   89126:	e6ca      	b.n	88ebe <_vfiprintf_r+0xa2>
   89128:	2a00      	cmp	r2, #0
   8912a:	f000 8372 	beq.w	89812 <_vfiprintf_r+0x9f6>
   8912e:	4659      	mov	r1, fp
   89130:	9805      	ldr	r0, [sp, #20]
   89132:	aa0e      	add	r2, sp, #56	; 0x38
   89134:	f7ff fe36 	bl	88da4 <__sprint_r.part.0>
   89138:	b950      	cbnz	r0, 89150 <_vfiprintf_r+0x334>
   8913a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8913e:	e7ee      	b.n	8911e <_vfiprintf_r+0x302>
   89140:	4659      	mov	r1, fp
   89142:	9805      	ldr	r0, [sp, #20]
   89144:	aa0e      	add	r2, sp, #56	; 0x38
   89146:	f7ff fe2d 	bl	88da4 <__sprint_r.part.0>
   8914a:	2800      	cmp	r0, #0
   8914c:	f000 808d 	beq.w	8926a <_vfiprintf_r+0x44e>
   89150:	46d9      	mov	r9, fp
   89152:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89156:	f013 0f01 	tst.w	r3, #1
   8915a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8915e:	f000 8095 	beq.w	8928c <_vfiprintf_r+0x470>
   89162:	065b      	lsls	r3, r3, #25
   89164:	f100 84d4 	bmi.w	89b10 <_vfiprintf_r+0xcf4>
   89168:	9803      	ldr	r0, [sp, #12]
   8916a:	b03b      	add	sp, #236	; 0xec
   8916c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89170:	2b00      	cmp	r3, #0
   89172:	f000 8083 	beq.w	8927c <_vfiprintf_r+0x460>
   89176:	2501      	movs	r5, #1
   89178:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8917c:	f04f 0300 	mov.w	r3, #0
   89180:	9501      	str	r5, [sp, #4]
   89182:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   89186:	ae21      	add	r6, sp, #132	; 0x84
   89188:	2300      	movs	r3, #0
   8918a:	9300      	str	r3, [sp, #0]
   8918c:	f017 0302 	ands.w	r3, r7, #2
   89190:	9307      	str	r3, [sp, #28]
   89192:	bf18      	it	ne
   89194:	3502      	addne	r5, #2
   89196:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   8919a:	9306      	str	r3, [sp, #24]
   8919c:	d104      	bne.n	891a8 <_vfiprintf_r+0x38c>
   8919e:	9b02      	ldr	r3, [sp, #8]
   891a0:	1b5c      	subs	r4, r3, r5
   891a2:	2c00      	cmp	r4, #0
   891a4:	f300 8274 	bgt.w	89690 <_vfiprintf_r+0x874>
   891a8:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   891ac:	1c48      	adds	r0, r1, #1
   891ae:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   891b2:	b174      	cbz	r4, 891d2 <_vfiprintf_r+0x3b6>
   891b4:	2101      	movs	r1, #1
   891b6:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   891ba:	440a      	add	r2, r1
   891bc:	2807      	cmp	r0, #7
   891be:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   891c2:	e9ca 4100 	strd	r4, r1, [sl]
   891c6:	f300 8246 	bgt.w	89656 <_vfiprintf_r+0x83a>
   891ca:	4601      	mov	r1, r0
   891cc:	f10a 0a08 	add.w	sl, sl, #8
   891d0:	3001      	adds	r0, #1
   891d2:	9b07      	ldr	r3, [sp, #28]
   891d4:	b1c3      	cbz	r3, 89208 <_vfiprintf_r+0x3ec>
   891d6:	2102      	movs	r1, #2
   891d8:	ab0d      	add	r3, sp, #52	; 0x34
   891da:	440a      	add	r2, r1
   891dc:	2807      	cmp	r0, #7
   891de:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   891e2:	e9ca 3100 	strd	r3, r1, [sl]
   891e6:	f340 824e 	ble.w	89686 <_vfiprintf_r+0x86a>
   891ea:	2a00      	cmp	r2, #0
   891ec:	f000 830c 	beq.w	89808 <_vfiprintf_r+0x9ec>
   891f0:	4659      	mov	r1, fp
   891f2:	9805      	ldr	r0, [sp, #20]
   891f4:	aa0e      	add	r2, sp, #56	; 0x38
   891f6:	f7ff fdd5 	bl	88da4 <__sprint_r.part.0>
   891fa:	2800      	cmp	r0, #0
   891fc:	d1a8      	bne.n	89150 <_vfiprintf_r+0x334>
   891fe:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89202:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89206:	1c48      	adds	r0, r1, #1
   89208:	9b06      	ldr	r3, [sp, #24]
   8920a:	2b80      	cmp	r3, #128	; 0x80
   8920c:	f000 817e 	beq.w	8950c <_vfiprintf_r+0x6f0>
   89210:	e9dd 3400 	ldrd	r3, r4, [sp]
   89214:	1b1c      	subs	r4, r3, r4
   89216:	2c00      	cmp	r4, #0
   89218:	f300 81d3 	bgt.w	895c2 <_vfiprintf_r+0x7a6>
   8921c:	9b01      	ldr	r3, [sp, #4]
   8921e:	2807      	cmp	r0, #7
   89220:	441a      	add	r2, r3
   89222:	e9ca 6300 	strd	r6, r3, [sl]
   89226:	9210      	str	r2, [sp, #64]	; 0x40
   89228:	900f      	str	r0, [sp, #60]	; 0x3c
   8922a:	f340 816c 	ble.w	89506 <_vfiprintf_r+0x6ea>
   8922e:	2a00      	cmp	r2, #0
   89230:	f000 8276 	beq.w	89720 <_vfiprintf_r+0x904>
   89234:	4659      	mov	r1, fp
   89236:	9805      	ldr	r0, [sp, #20]
   89238:	aa0e      	add	r2, sp, #56	; 0x38
   8923a:	f7ff fdb3 	bl	88da4 <__sprint_r.part.0>
   8923e:	2800      	cmp	r0, #0
   89240:	d186      	bne.n	89150 <_vfiprintf_r+0x334>
   89242:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89244:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89248:	0779      	lsls	r1, r7, #29
   8924a:	d504      	bpl.n	89256 <_vfiprintf_r+0x43a>
   8924c:	9b02      	ldr	r3, [sp, #8]
   8924e:	1b5c      	subs	r4, r3, r5
   89250:	2c00      	cmp	r4, #0
   89252:	f300 826e 	bgt.w	89732 <_vfiprintf_r+0x916>
   89256:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   8925a:	42a9      	cmp	r1, r5
   8925c:	bfac      	ite	ge
   8925e:	185b      	addge	r3, r3, r1
   89260:	195b      	addlt	r3, r3, r5
   89262:	9303      	str	r3, [sp, #12]
   89264:	2a00      	cmp	r2, #0
   89266:	f47f af6b 	bne.w	89140 <_vfiprintf_r+0x324>
   8926a:	2300      	movs	r3, #0
   8926c:	930f      	str	r3, [sp, #60]	; 0x3c
   8926e:	f898 3000 	ldrb.w	r3, [r8]
   89272:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89276:	2b00      	cmp	r3, #0
   89278:	f47f ae13 	bne.w	88ea2 <_vfiprintf_r+0x86>
   8927c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8927e:	46d9      	mov	r9, fp
   89280:	2b00      	cmp	r3, #0
   89282:	f040 8426 	bne.w	89ad2 <_vfiprintf_r+0xcb6>
   89286:	2300      	movs	r3, #0
   89288:	930f      	str	r3, [sp, #60]	; 0x3c
   8928a:	e762      	b.n	89152 <_vfiprintf_r+0x336>
   8928c:	059a      	lsls	r2, r3, #22
   8928e:	f53f af68 	bmi.w	89162 <_vfiprintf_r+0x346>
   89292:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89296:	f002 f9cf 	bl	8b638 <__retarget_lock_release_recursive>
   8929a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   8929e:	e760      	b.n	89162 <_vfiprintf_r+0x346>
   892a0:	9b04      	ldr	r3, [sp, #16]
   892a2:	06f8      	lsls	r0, r7, #27
   892a4:	f853 4b04 	ldr.w	r4, [r3], #4
   892a8:	f100 8308 	bmi.w	898bc <_vfiprintf_r+0xaa0>
   892ac:	0679      	lsls	r1, r7, #25
   892ae:	f140 8302 	bpl.w	898b6 <_vfiprintf_r+0xa9a>
   892b2:	b224      	sxth	r4, r4
   892b4:	17e5      	asrs	r5, r4, #31
   892b6:	9304      	str	r3, [sp, #16]
   892b8:	4622      	mov	r2, r4
   892ba:	462b      	mov	r3, r5
   892bc:	e6a2      	b.n	89004 <_vfiprintf_r+0x1e8>
   892be:	f854 3b04 	ldr.w	r3, [r4], #4
   892c2:	06f9      	lsls	r1, r7, #27
   892c4:	9404      	str	r4, [sp, #16]
   892c6:	f100 82f3 	bmi.w	898b0 <_vfiprintf_r+0xa94>
   892ca:	067a      	lsls	r2, r7, #25
   892cc:	f140 82ed 	bpl.w	898aa <_vfiprintf_r+0xa8e>
   892d0:	2500      	movs	r5, #0
   892d2:	b29c      	uxth	r4, r3
   892d4:	e6f0      	b.n	890b8 <_vfiprintf_r+0x29c>
   892d6:	f04f 0300 	mov.w	r3, #0
   892da:	9c04      	ldr	r4, [sp, #16]
   892dc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   892e0:	f854 6b04 	ldr.w	r6, [r4], #4
   892e4:	2e00      	cmp	r6, #0
   892e6:	f000 8397 	beq.w	89a18 <_vfiprintf_r+0xbfc>
   892ea:	9a00      	ldr	r2, [sp, #0]
   892ec:	4613      	mov	r3, r2
   892ee:	3301      	adds	r3, #1
   892f0:	f000 831e 	beq.w	89930 <_vfiprintf_r+0xb14>
   892f4:	2100      	movs	r1, #0
   892f6:	4630      	mov	r0, r6
   892f8:	f002 fcdc 	bl	8bcb4 <memchr>
   892fc:	2800      	cmp	r0, #0
   892fe:	f000 83d8 	beq.w	89ab2 <_vfiprintf_r+0xc96>
   89302:	1b83      	subs	r3, r0, r6
   89304:	9301      	str	r3, [sp, #4]
   89306:	2300      	movs	r3, #0
   89308:	9404      	str	r4, [sp, #16]
   8930a:	9300      	str	r3, [sp, #0]
   8930c:	e696      	b.n	8903c <_vfiprintf_r+0x220>
   8930e:	2501      	movs	r5, #1
   89310:	f04f 0200 	mov.w	r2, #0
   89314:	9c04      	ldr	r4, [sp, #16]
   89316:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8931a:	f854 3b04 	ldr.w	r3, [r4], #4
   8931e:	9501      	str	r5, [sp, #4]
   89320:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   89324:	9404      	str	r4, [sp, #16]
   89326:	ae21      	add	r6, sp, #132	; 0x84
   89328:	e72e      	b.n	89188 <_vfiprintf_r+0x36c>
   8932a:	f001 fdb1 	bl	8ae90 <__sinit>
   8932e:	e582      	b.n	88e36 <_vfiprintf_r+0x1a>
   89330:	9b02      	ldr	r3, [sp, #8]
   89332:	425b      	negs	r3, r3
   89334:	9302      	str	r3, [sp, #8]
   89336:	f898 3000 	ldrb.w	r3, [r8]
   8933a:	f047 0704 	orr.w	r7, r7, #4
   8933e:	e5cf      	b.n	88ee0 <_vfiprintf_r+0xc4>
   89340:	f898 3000 	ldrb.w	r3, [r8]
   89344:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   89348:	e5ca      	b.n	88ee0 <_vfiprintf_r+0xc4>
   8934a:	f898 3000 	ldrb.w	r3, [r8]
   8934e:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   89352:	e5c5      	b.n	88ee0 <_vfiprintf_r+0xc4>
   89354:	4641      	mov	r1, r8
   89356:	f811 3b01 	ldrb.w	r3, [r1], #1
   8935a:	2b2a      	cmp	r3, #42	; 0x2a
   8935c:	f000 83dd 	beq.w	89b1a <_vfiprintf_r+0xcfe>
   89360:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   89364:	2a09      	cmp	r2, #9
   89366:	4688      	mov	r8, r1
   89368:	bf98      	it	ls
   8936a:	2100      	movls	r1, #0
   8936c:	f200 83ad 	bhi.w	89aca <_vfiprintf_r+0xcae>
   89370:	f818 3b01 	ldrb.w	r3, [r8], #1
   89374:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   89378:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8937c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   89380:	2a09      	cmp	r2, #9
   89382:	d9f5      	bls.n	89370 <_vfiprintf_r+0x554>
   89384:	9100      	str	r1, [sp, #0]
   89386:	e5ad      	b.n	88ee4 <_vfiprintf_r+0xc8>
   89388:	9c05      	ldr	r4, [sp, #20]
   8938a:	4620      	mov	r0, r4
   8938c:	f002 f94a 	bl	8b624 <_localeconv_r>
   89390:	6843      	ldr	r3, [r0, #4]
   89392:	4618      	mov	r0, r3
   89394:	930a      	str	r3, [sp, #40]	; 0x28
   89396:	f003 fb3f 	bl	8ca18 <strlen>
   8939a:	4603      	mov	r3, r0
   8939c:	4620      	mov	r0, r4
   8939e:	930b      	str	r3, [sp, #44]	; 0x2c
   893a0:	461c      	mov	r4, r3
   893a2:	f002 f93f 	bl	8b624 <_localeconv_r>
   893a6:	6882      	ldr	r2, [r0, #8]
   893a8:	9209      	str	r2, [sp, #36]	; 0x24
   893aa:	2c00      	cmp	r4, #0
   893ac:	f43f ae13 	beq.w	88fd6 <_vfiprintf_r+0x1ba>
   893b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   893b2:	2b00      	cmp	r3, #0
   893b4:	f43f ae0f 	beq.w	88fd6 <_vfiprintf_r+0x1ba>
   893b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   893ba:	781b      	ldrb	r3, [r3, #0]
   893bc:	2b00      	cmp	r3, #0
   893be:	f43f ae0a 	beq.w	88fd6 <_vfiprintf_r+0x1ba>
   893c2:	f898 3000 	ldrb.w	r3, [r8]
   893c6:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   893ca:	e589      	b.n	88ee0 <_vfiprintf_r+0xc4>
   893cc:	f898 3000 	ldrb.w	r3, [r8]
   893d0:	f047 0701 	orr.w	r7, r7, #1
   893d4:	e584      	b.n	88ee0 <_vfiprintf_r+0xc4>
   893d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   893da:	2b00      	cmp	r3, #0
   893dc:	f47f adfb 	bne.w	88fd6 <_vfiprintf_r+0x1ba>
   893e0:	2320      	movs	r3, #32
   893e2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   893e6:	f898 3000 	ldrb.w	r3, [r8]
   893ea:	e579      	b.n	88ee0 <_vfiprintf_r+0xc4>
   893ec:	f898 3000 	ldrb.w	r3, [r8]
   893f0:	2b6c      	cmp	r3, #108	; 0x6c
   893f2:	bf03      	ittte	eq
   893f4:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   893f8:	f047 0720 	orreq.w	r7, r7, #32
   893fc:	f108 0801 	addeq.w	r8, r8, #1
   89400:	f047 0710 	orrne.w	r7, r7, #16
   89404:	e56c      	b.n	88ee0 <_vfiprintf_r+0xc4>
   89406:	f898 3000 	ldrb.w	r3, [r8]
   8940a:	2b68      	cmp	r3, #104	; 0x68
   8940c:	bf03      	ittte	eq
   8940e:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   89412:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   89416:	f108 0801 	addeq.w	r8, r8, #1
   8941a:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   8941e:	e55f      	b.n	88ee0 <_vfiprintf_r+0xc4>
   89420:	f047 0910 	orr.w	r9, r7, #16
   89424:	f019 0f20 	tst.w	r9, #32
   89428:	9c04      	ldr	r4, [sp, #16]
   8942a:	f000 8200 	beq.w	8982e <_vfiprintf_r+0xa12>
   8942e:	3407      	adds	r4, #7
   89430:	f024 0307 	bic.w	r3, r4, #7
   89434:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   89438:	9304      	str	r3, [sp, #16]
   8943a:	2301      	movs	r3, #1
   8943c:	e63f      	b.n	890be <_vfiprintf_r+0x2a2>
   8943e:	f647 0330 	movw	r3, #30768	; 0x7830
   89442:	9c04      	ldr	r4, [sp, #16]
   89444:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   89448:	f854 2b04 	ldr.w	r2, [r4], #4
   8944c:	4bbf      	ldr	r3, [pc, #764]	; (8974c <_vfiprintf_r+0x930>)
   8944e:	9404      	str	r4, [sp, #16]
   89450:	9308      	str	r3, [sp, #32]
   89452:	4614      	mov	r4, r2
   89454:	2500      	movs	r5, #0
   89456:	2302      	movs	r3, #2
   89458:	f047 0902 	orr.w	r9, r7, #2
   8945c:	e62f      	b.n	890be <_vfiprintf_r+0x2a2>
   8945e:	06bb      	lsls	r3, r7, #26
   89460:	f100 8232 	bmi.w	898c8 <_vfiprintf_r+0xaac>
   89464:	06fe      	lsls	r6, r7, #27
   89466:	f100 82cf 	bmi.w	89a08 <_vfiprintf_r+0xbec>
   8946a:	067d      	lsls	r5, r7, #25
   8946c:	f100 8301 	bmi.w	89a72 <_vfiprintf_r+0xc56>
   89470:	05bc      	lsls	r4, r7, #22
   89472:	f140 82c9 	bpl.w	89a08 <_vfiprintf_r+0xbec>
   89476:	9c04      	ldr	r4, [sp, #16]
   89478:	9a03      	ldr	r2, [sp, #12]
   8947a:	f854 3b04 	ldr.w	r3, [r4], #4
   8947e:	701a      	strb	r2, [r3, #0]
   89480:	9404      	str	r4, [sp, #16]
   89482:	e509      	b.n	88e98 <_vfiprintf_r+0x7c>
   89484:	46b9      	mov	r9, r7
   89486:	2b01      	cmp	r3, #1
   89488:	f43f adcb 	beq.w	89022 <_vfiprintf_r+0x206>
   8948c:	2b02      	cmp	r3, #2
   8948e:	ae3a      	add	r6, sp, #232	; 0xe8
   89490:	d113      	bne.n	894ba <_vfiprintf_r+0x69e>
   89492:	9808      	ldr	r0, [sp, #32]
   89494:	0923      	lsrs	r3, r4, #4
   89496:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8949a:	0929      	lsrs	r1, r5, #4
   8949c:	f004 020f 	and.w	r2, r4, #15
   894a0:	460d      	mov	r5, r1
   894a2:	461c      	mov	r4, r3
   894a4:	5c83      	ldrb	r3, [r0, r2]
   894a6:	f806 3d01 	strb.w	r3, [r6, #-1]!
   894aa:	ea54 0305 	orrs.w	r3, r4, r5
   894ae:	d1f1      	bne.n	89494 <_vfiprintf_r+0x678>
   894b0:	ab3a      	add	r3, sp, #232	; 0xe8
   894b2:	1b9b      	subs	r3, r3, r6
   894b4:	464f      	mov	r7, r9
   894b6:	9301      	str	r3, [sp, #4]
   894b8:	e5c0      	b.n	8903c <_vfiprintf_r+0x220>
   894ba:	08e2      	lsrs	r2, r4, #3
   894bc:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   894c0:	08e9      	lsrs	r1, r5, #3
   894c2:	f004 0307 	and.w	r3, r4, #7
   894c6:	460d      	mov	r5, r1
   894c8:	4614      	mov	r4, r2
   894ca:	3330      	adds	r3, #48	; 0x30
   894cc:	ea54 0105 	orrs.w	r1, r4, r5
   894d0:	4632      	mov	r2, r6
   894d2:	f806 3d01 	strb.w	r3, [r6, #-1]!
   894d6:	d1f0      	bne.n	894ba <_vfiprintf_r+0x69e>
   894d8:	f019 0f01 	tst.w	r9, #1
   894dc:	d0e8      	beq.n	894b0 <_vfiprintf_r+0x694>
   894de:	2b30      	cmp	r3, #48	; 0x30
   894e0:	d0e6      	beq.n	894b0 <_vfiprintf_r+0x694>
   894e2:	2330      	movs	r3, #48	; 0x30
   894e4:	3a02      	subs	r2, #2
   894e6:	f806 3c01 	strb.w	r3, [r6, #-1]
   894ea:	ab3a      	add	r3, sp, #232	; 0xe8
   894ec:	1a9b      	subs	r3, r3, r2
   894ee:	464f      	mov	r7, r9
   894f0:	4616      	mov	r6, r2
   894f2:	9301      	str	r3, [sp, #4]
   894f4:	e5a2      	b.n	8903c <_vfiprintf_r+0x220>
   894f6:	2301      	movs	r3, #1
   894f8:	9a01      	ldr	r2, [sp, #4]
   894fa:	930f      	str	r3, [sp, #60]	; 0x3c
   894fc:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   89500:	9212      	str	r2, [sp, #72]	; 0x48
   89502:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89506:	f10a 0a08 	add.w	sl, sl, #8
   8950a:	e69d      	b.n	89248 <_vfiprintf_r+0x42c>
   8950c:	9b02      	ldr	r3, [sp, #8]
   8950e:	1b5c      	subs	r4, r3, r5
   89510:	2c00      	cmp	r4, #0
   89512:	f77f ae7d 	ble.w	89210 <_vfiprintf_r+0x3f4>
   89516:	2c10      	cmp	r4, #16
   89518:	f340 82ea 	ble.w	89af0 <_vfiprintf_r+0xcd4>
   8951c:	f8df 9230 	ldr.w	r9, [pc, #560]	; 89750 <_vfiprintf_r+0x934>
   89520:	4650      	mov	r0, sl
   89522:	9706      	str	r7, [sp, #24]
   89524:	46b2      	mov	sl, r6
   89526:	464e      	mov	r6, r9
   89528:	46c1      	mov	r9, r8
   8952a:	46a8      	mov	r8, r5
   8952c:	9d05      	ldr	r5, [sp, #20]
   8952e:	e006      	b.n	8953e <_vfiprintf_r+0x722>
   89530:	f101 0c02 	add.w	ip, r1, #2
   89534:	4619      	mov	r1, r3
   89536:	3008      	adds	r0, #8
   89538:	3c10      	subs	r4, #16
   8953a:	2c10      	cmp	r4, #16
   8953c:	dd1a      	ble.n	89574 <_vfiprintf_r+0x758>
   8953e:	2710      	movs	r7, #16
   89540:	1c4b      	adds	r3, r1, #1
   89542:	3210      	adds	r2, #16
   89544:	2b07      	cmp	r3, #7
   89546:	9210      	str	r2, [sp, #64]	; 0x40
   89548:	6006      	str	r6, [r0, #0]
   8954a:	6047      	str	r7, [r0, #4]
   8954c:	930f      	str	r3, [sp, #60]	; 0x3c
   8954e:	ddef      	ble.n	89530 <_vfiprintf_r+0x714>
   89550:	2a00      	cmp	r2, #0
   89552:	d07b      	beq.n	8964c <_vfiprintf_r+0x830>
   89554:	4659      	mov	r1, fp
   89556:	4628      	mov	r0, r5
   89558:	aa0e      	add	r2, sp, #56	; 0x38
   8955a:	f7ff fc23 	bl	88da4 <__sprint_r.part.0>
   8955e:	2800      	cmp	r0, #0
   89560:	f47f adf6 	bne.w	89150 <_vfiprintf_r+0x334>
   89564:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89568:	3c10      	subs	r4, #16
   8956a:	2c10      	cmp	r4, #16
   8956c:	a811      	add	r0, sp, #68	; 0x44
   8956e:	f101 0c01 	add.w	ip, r1, #1
   89572:	dce4      	bgt.n	8953e <_vfiprintf_r+0x722>
   89574:	4645      	mov	r5, r8
   89576:	46c8      	mov	r8, r9
   89578:	46b1      	mov	r9, r6
   8957a:	4656      	mov	r6, sl
   8957c:	4682      	mov	sl, r0
   8957e:	9f06      	ldr	r7, [sp, #24]
   89580:	4422      	add	r2, r4
   89582:	f1bc 0f07 	cmp.w	ip, #7
   89586:	e9ca 9400 	strd	r9, r4, [sl]
   8958a:	9210      	str	r2, [sp, #64]	; 0x40
   8958c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   89590:	f340 817e 	ble.w	89890 <_vfiprintf_r+0xa74>
   89594:	2a00      	cmp	r2, #0
   89596:	f000 825c 	beq.w	89a52 <_vfiprintf_r+0xc36>
   8959a:	4659      	mov	r1, fp
   8959c:	9805      	ldr	r0, [sp, #20]
   8959e:	aa0e      	add	r2, sp, #56	; 0x38
   895a0:	f7ff fc00 	bl	88da4 <__sprint_r.part.0>
   895a4:	2800      	cmp	r0, #0
   895a6:	f47f add3 	bne.w	89150 <_vfiprintf_r+0x334>
   895aa:	e9dd 3400 	ldrd	r3, r4, [sp]
   895ae:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   895b2:	1b1c      	subs	r4, r3, r4
   895b4:	2c00      	cmp	r4, #0
   895b6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   895ba:	f101 0001 	add.w	r0, r1, #1
   895be:	f77f ae2d 	ble.w	8921c <_vfiprintf_r+0x400>
   895c2:	2c10      	cmp	r4, #16
   895c4:	f8df 9188 	ldr.w	r9, [pc, #392]	; 89750 <_vfiprintf_r+0x934>
   895c8:	dd2f      	ble.n	8962a <_vfiprintf_r+0x80e>
   895ca:	46d4      	mov	ip, sl
   895cc:	46b2      	mov	sl, r6
   895ce:	464e      	mov	r6, r9
   895d0:	46c1      	mov	r9, r8
   895d2:	46a8      	mov	r8, r5
   895d4:	9d05      	ldr	r5, [sp, #20]
   895d6:	e006      	b.n	895e6 <_vfiprintf_r+0x7ca>
   895d8:	1c88      	adds	r0, r1, #2
   895da:	4619      	mov	r1, r3
   895dc:	f10c 0c08 	add.w	ip, ip, #8
   895e0:	3c10      	subs	r4, #16
   895e2:	2c10      	cmp	r4, #16
   895e4:	dd1c      	ble.n	89620 <_vfiprintf_r+0x804>
   895e6:	2010      	movs	r0, #16
   895e8:	1c4b      	adds	r3, r1, #1
   895ea:	3210      	adds	r2, #16
   895ec:	2b07      	cmp	r3, #7
   895ee:	9210      	str	r2, [sp, #64]	; 0x40
   895f0:	f8cc 6000 	str.w	r6, [ip]
   895f4:	f8cc 0004 	str.w	r0, [ip, #4]
   895f8:	930f      	str	r3, [sp, #60]	; 0x3c
   895fa:	dded      	ble.n	895d8 <_vfiprintf_r+0x7bc>
   895fc:	b30a      	cbz	r2, 89642 <_vfiprintf_r+0x826>
   895fe:	4659      	mov	r1, fp
   89600:	4628      	mov	r0, r5
   89602:	aa0e      	add	r2, sp, #56	; 0x38
   89604:	f7ff fbce 	bl	88da4 <__sprint_r.part.0>
   89608:	2800      	cmp	r0, #0
   8960a:	f47f ada1 	bne.w	89150 <_vfiprintf_r+0x334>
   8960e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89612:	3c10      	subs	r4, #16
   89614:	2c10      	cmp	r4, #16
   89616:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8961a:	f101 0001 	add.w	r0, r1, #1
   8961e:	dce2      	bgt.n	895e6 <_vfiprintf_r+0x7ca>
   89620:	4645      	mov	r5, r8
   89622:	46c8      	mov	r8, r9
   89624:	46b1      	mov	r9, r6
   89626:	4656      	mov	r6, sl
   89628:	46e2      	mov	sl, ip
   8962a:	4422      	add	r2, r4
   8962c:	2807      	cmp	r0, #7
   8962e:	e9ca 9400 	strd	r9, r4, [sl]
   89632:	9210      	str	r2, [sp, #64]	; 0x40
   89634:	900f      	str	r0, [sp, #60]	; 0x3c
   89636:	f300 80d3 	bgt.w	897e0 <_vfiprintf_r+0x9c4>
   8963a:	f10a 0a08 	add.w	sl, sl, #8
   8963e:	3001      	adds	r0, #1
   89640:	e5ec      	b.n	8921c <_vfiprintf_r+0x400>
   89642:	2001      	movs	r0, #1
   89644:	4611      	mov	r1, r2
   89646:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8964a:	e7c9      	b.n	895e0 <_vfiprintf_r+0x7c4>
   8964c:	f04f 0c01 	mov.w	ip, #1
   89650:	4611      	mov	r1, r2
   89652:	a811      	add	r0, sp, #68	; 0x44
   89654:	e770      	b.n	89538 <_vfiprintf_r+0x71c>
   89656:	2a00      	cmp	r2, #0
   89658:	f000 80d3 	beq.w	89802 <_vfiprintf_r+0x9e6>
   8965c:	4659      	mov	r1, fp
   8965e:	9805      	ldr	r0, [sp, #20]
   89660:	aa0e      	add	r2, sp, #56	; 0x38
   89662:	f7ff fb9f 	bl	88da4 <__sprint_r.part.0>
   89666:	2800      	cmp	r0, #0
   89668:	f47f ad72 	bne.w	89150 <_vfiprintf_r+0x334>
   8966c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89670:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89674:	1c48      	adds	r0, r1, #1
   89676:	e5ac      	b.n	891d2 <_vfiprintf_r+0x3b6>
   89678:	2202      	movs	r2, #2
   8967a:	2001      	movs	r0, #1
   8967c:	ab0d      	add	r3, sp, #52	; 0x34
   8967e:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   89682:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89686:	4601      	mov	r1, r0
   89688:	f10a 0a08 	add.w	sl, sl, #8
   8968c:	1c48      	adds	r0, r1, #1
   8968e:	e5bb      	b.n	89208 <_vfiprintf_r+0x3ec>
   89690:	2c10      	cmp	r4, #16
   89692:	f340 8214 	ble.w	89abe <_vfiprintf_r+0xca2>
   89696:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8969a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 89754 <_vfiprintf_r+0x938>
   8969e:	46d4      	mov	ip, sl
   896a0:	46b2      	mov	sl, r6
   896a2:	464e      	mov	r6, r9
   896a4:	46c1      	mov	r9, r8
   896a6:	46a8      	mov	r8, r5
   896a8:	9d05      	ldr	r5, [sp, #20]
   896aa:	e006      	b.n	896ba <_vfiprintf_r+0x89e>
   896ac:	1c99      	adds	r1, r3, #2
   896ae:	4603      	mov	r3, r0
   896b0:	f10c 0c08 	add.w	ip, ip, #8
   896b4:	3c10      	subs	r4, #16
   896b6:	2c10      	cmp	r4, #16
   896b8:	dd1c      	ble.n	896f4 <_vfiprintf_r+0x8d8>
   896ba:	2110      	movs	r1, #16
   896bc:	1c58      	adds	r0, r3, #1
   896be:	3210      	adds	r2, #16
   896c0:	2807      	cmp	r0, #7
   896c2:	9210      	str	r2, [sp, #64]	; 0x40
   896c4:	f8cc 6000 	str.w	r6, [ip]
   896c8:	f8cc 1004 	str.w	r1, [ip, #4]
   896cc:	900f      	str	r0, [sp, #60]	; 0x3c
   896ce:	dded      	ble.n	896ac <_vfiprintf_r+0x890>
   896d0:	b30a      	cbz	r2, 89716 <_vfiprintf_r+0x8fa>
   896d2:	4659      	mov	r1, fp
   896d4:	4628      	mov	r0, r5
   896d6:	aa0e      	add	r2, sp, #56	; 0x38
   896d8:	f7ff fb64 	bl	88da4 <__sprint_r.part.0>
   896dc:	2800      	cmp	r0, #0
   896de:	f47f ad37 	bne.w	89150 <_vfiprintf_r+0x334>
   896e2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   896e6:	3c10      	subs	r4, #16
   896e8:	2c10      	cmp	r4, #16
   896ea:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   896ee:	f103 0101 	add.w	r1, r3, #1
   896f2:	dce2      	bgt.n	896ba <_vfiprintf_r+0x89e>
   896f4:	4645      	mov	r5, r8
   896f6:	46c8      	mov	r8, r9
   896f8:	46b1      	mov	r9, r6
   896fa:	4656      	mov	r6, sl
   896fc:	46e2      	mov	sl, ip
   896fe:	4422      	add	r2, r4
   89700:	2907      	cmp	r1, #7
   89702:	e9ca 9400 	strd	r9, r4, [sl]
   89706:	9210      	str	r2, [sp, #64]	; 0x40
   89708:	910f      	str	r1, [sp, #60]	; 0x3c
   8970a:	f300 80a8 	bgt.w	8985e <_vfiprintf_r+0xa42>
   8970e:	f10a 0a08 	add.w	sl, sl, #8
   89712:	1c48      	adds	r0, r1, #1
   89714:	e54b      	b.n	891ae <_vfiprintf_r+0x392>
   89716:	4613      	mov	r3, r2
   89718:	2101      	movs	r1, #1
   8971a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8971e:	e7c9      	b.n	896b4 <_vfiprintf_r+0x898>
   89720:	0778      	lsls	r0, r7, #29
   89722:	920f      	str	r2, [sp, #60]	; 0x3c
   89724:	d554      	bpl.n	897d0 <_vfiprintf_r+0x9b4>
   89726:	9b02      	ldr	r3, [sp, #8]
   89728:	1b5c      	subs	r4, r3, r5
   8972a:	2c00      	cmp	r4, #0
   8972c:	dd50      	ble.n	897d0 <_vfiprintf_r+0x9b4>
   8972e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89732:	2c10      	cmp	r4, #16
   89734:	f340 81d7 	ble.w	89ae6 <_vfiprintf_r+0xcca>
   89738:	f8df 9018 	ldr.w	r9, [pc, #24]	; 89754 <_vfiprintf_r+0x938>
   8973c:	2610      	movs	r6, #16
   8973e:	464b      	mov	r3, r9
   89740:	990f      	ldr	r1, [sp, #60]	; 0x3c
   89742:	46a9      	mov	r9, r5
   89744:	9f05      	ldr	r7, [sp, #20]
   89746:	461d      	mov	r5, r3
   89748:	e00d      	b.n	89766 <_vfiprintf_r+0x94a>
   8974a:	bf00      	nop
   8974c:	0008da64 	.word	0x0008da64
   89750:	0008dac8 	.word	0x0008dac8
   89754:	0008dab8 	.word	0x0008dab8
   89758:	1c88      	adds	r0, r1, #2
   8975a:	4619      	mov	r1, r3
   8975c:	f10a 0a08 	add.w	sl, sl, #8
   89760:	3c10      	subs	r4, #16
   89762:	2c10      	cmp	r4, #16
   89764:	dd19      	ble.n	8979a <_vfiprintf_r+0x97e>
   89766:	1c4b      	adds	r3, r1, #1
   89768:	3210      	adds	r2, #16
   8976a:	2b07      	cmp	r3, #7
   8976c:	e9ca 5600 	strd	r5, r6, [sl]
   89770:	9210      	str	r2, [sp, #64]	; 0x40
   89772:	930f      	str	r3, [sp, #60]	; 0x3c
   89774:	ddf0      	ble.n	89758 <_vfiprintf_r+0x93c>
   89776:	b332      	cbz	r2, 897c6 <_vfiprintf_r+0x9aa>
   89778:	4659      	mov	r1, fp
   8977a:	4638      	mov	r0, r7
   8977c:	aa0e      	add	r2, sp, #56	; 0x38
   8977e:	f7ff fb11 	bl	88da4 <__sprint_r.part.0>
   89782:	2800      	cmp	r0, #0
   89784:	f47f ace4 	bne.w	89150 <_vfiprintf_r+0x334>
   89788:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8978c:	3c10      	subs	r4, #16
   8978e:	2c10      	cmp	r4, #16
   89790:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89794:	f101 0001 	add.w	r0, r1, #1
   89798:	dce5      	bgt.n	89766 <_vfiprintf_r+0x94a>
   8979a:	462b      	mov	r3, r5
   8979c:	464d      	mov	r5, r9
   8979e:	4699      	mov	r9, r3
   897a0:	4422      	add	r2, r4
   897a2:	2807      	cmp	r0, #7
   897a4:	e9ca 9400 	strd	r9, r4, [sl]
   897a8:	9210      	str	r2, [sp, #64]	; 0x40
   897aa:	900f      	str	r0, [sp, #60]	; 0x3c
   897ac:	f77f ad53 	ble.w	89256 <_vfiprintf_r+0x43a>
   897b0:	b172      	cbz	r2, 897d0 <_vfiprintf_r+0x9b4>
   897b2:	4659      	mov	r1, fp
   897b4:	9805      	ldr	r0, [sp, #20]
   897b6:	aa0e      	add	r2, sp, #56	; 0x38
   897b8:	f7ff faf4 	bl	88da4 <__sprint_r.part.0>
   897bc:	2800      	cmp	r0, #0
   897be:	f47f acc7 	bne.w	89150 <_vfiprintf_r+0x334>
   897c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   897c4:	e547      	b.n	89256 <_vfiprintf_r+0x43a>
   897c6:	2001      	movs	r0, #1
   897c8:	4611      	mov	r1, r2
   897ca:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   897ce:	e7c7      	b.n	89760 <_vfiprintf_r+0x944>
   897d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   897d4:	42aa      	cmp	r2, r5
   897d6:	bfac      	ite	ge
   897d8:	189b      	addge	r3, r3, r2
   897da:	195b      	addlt	r3, r3, r5
   897dc:	9303      	str	r3, [sp, #12]
   897de:	e544      	b.n	8926a <_vfiprintf_r+0x44e>
   897e0:	2a00      	cmp	r2, #0
   897e2:	f43f ae88 	beq.w	894f6 <_vfiprintf_r+0x6da>
   897e6:	4659      	mov	r1, fp
   897e8:	9805      	ldr	r0, [sp, #20]
   897ea:	aa0e      	add	r2, sp, #56	; 0x38
   897ec:	f7ff fada 	bl	88da4 <__sprint_r.part.0>
   897f0:	2800      	cmp	r0, #0
   897f2:	f47f acad 	bne.w	89150 <_vfiprintf_r+0x334>
   897f6:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   897fa:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   897fe:	3001      	adds	r0, #1
   89800:	e50c      	b.n	8921c <_vfiprintf_r+0x400>
   89802:	9b07      	ldr	r3, [sp, #28]
   89804:	2b00      	cmp	r3, #0
   89806:	d16b      	bne.n	898e0 <_vfiprintf_r+0xac4>
   89808:	2001      	movs	r0, #1
   8980a:	4611      	mov	r1, r2
   8980c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89810:	e4fa      	b.n	89208 <_vfiprintf_r+0x3ec>
   89812:	920f      	str	r2, [sp, #60]	; 0x3c
   89814:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89818:	e481      	b.n	8911e <_vfiprintf_r+0x302>
   8981a:	9b00      	ldr	r3, [sp, #0]
   8981c:	2b00      	cmp	r3, #0
   8981e:	f47f ac05 	bne.w	8902c <_vfiprintf_r+0x210>
   89822:	464f      	mov	r7, r9
   89824:	2300      	movs	r3, #0
   89826:	ae3a      	add	r6, sp, #232	; 0xe8
   89828:	9300      	str	r3, [sp, #0]
   8982a:	9301      	str	r3, [sp, #4]
   8982c:	e406      	b.n	8903c <_vfiprintf_r+0x220>
   8982e:	f854 2b04 	ldr.w	r2, [r4], #4
   89832:	f019 0f10 	tst.w	r9, #16
   89836:	f04f 0301 	mov.w	r3, #1
   8983a:	9404      	str	r4, [sp, #16]
   8983c:	d132      	bne.n	898a4 <_vfiprintf_r+0xa88>
   8983e:	f019 0f40 	tst.w	r9, #64	; 0x40
   89842:	d02b      	beq.n	8989c <_vfiprintf_r+0xa80>
   89844:	2500      	movs	r5, #0
   89846:	b294      	uxth	r4, r2
   89848:	e439      	b.n	890be <_vfiprintf_r+0x2a2>
   8984a:	232d      	movs	r3, #45	; 0x2d
   8984c:	4264      	negs	r4, r4
   8984e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   89852:	46b9      	mov	r9, r7
   89854:	f04f 0301 	mov.w	r3, #1
   89858:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8985c:	e433      	b.n	890c6 <_vfiprintf_r+0x2aa>
   8985e:	2a00      	cmp	r2, #0
   89860:	d06f      	beq.n	89942 <_vfiprintf_r+0xb26>
   89862:	4659      	mov	r1, fp
   89864:	9805      	ldr	r0, [sp, #20]
   89866:	aa0e      	add	r2, sp, #56	; 0x38
   89868:	f7ff fa9c 	bl	88da4 <__sprint_r.part.0>
   8986c:	2800      	cmp	r0, #0
   8986e:	f47f ac6f 	bne.w	89150 <_vfiprintf_r+0x334>
   89872:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89876:	e497      	b.n	891a8 <_vfiprintf_r+0x38c>
   89878:	ae3a      	add	r6, sp, #232	; 0xe8
   8987a:	f7ff bbdf 	b.w	8903c <_vfiprintf_r+0x220>
   8987e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89882:	f001 fed7 	bl	8b634 <__retarget_lock_acquire_recursive>
   89886:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   8988a:	b28a      	uxth	r2, r1
   8988c:	f7ff badd 	b.w	88e4a <_vfiprintf_r+0x2e>
   89890:	4661      	mov	r1, ip
   89892:	f10a 0a08 	add.w	sl, sl, #8
   89896:	f10c 0001 	add.w	r0, ip, #1
   8989a:	e4b9      	b.n	89210 <_vfiprintf_r+0x3f4>
   8989c:	f419 7f00 	tst.w	r9, #512	; 0x200
   898a0:	f040 80ef 	bne.w	89a82 <_vfiprintf_r+0xc66>
   898a4:	4614      	mov	r4, r2
   898a6:	2500      	movs	r5, #0
   898a8:	e409      	b.n	890be <_vfiprintf_r+0x2a2>
   898aa:	05be      	lsls	r6, r7, #22
   898ac:	f100 80f7 	bmi.w	89a9e <_vfiprintf_r+0xc82>
   898b0:	461c      	mov	r4, r3
   898b2:	2500      	movs	r5, #0
   898b4:	e400      	b.n	890b8 <_vfiprintf_r+0x29c>
   898b6:	05ba      	lsls	r2, r7, #22
   898b8:	f100 80ea 	bmi.w	89a90 <_vfiprintf_r+0xc74>
   898bc:	17e5      	asrs	r5, r4, #31
   898be:	9304      	str	r3, [sp, #16]
   898c0:	4622      	mov	r2, r4
   898c2:	462b      	mov	r3, r5
   898c4:	f7ff bb9e 	b.w	89004 <_vfiprintf_r+0x1e8>
   898c8:	9b03      	ldr	r3, [sp, #12]
   898ca:	9c04      	ldr	r4, [sp, #16]
   898cc:	17dd      	asrs	r5, r3, #31
   898ce:	461a      	mov	r2, r3
   898d0:	462b      	mov	r3, r5
   898d2:	f854 1b04 	ldr.w	r1, [r4], #4
   898d6:	e9c1 2300 	strd	r2, r3, [r1]
   898da:	9404      	str	r4, [sp, #16]
   898dc:	f7ff badc 	b.w	88e98 <_vfiprintf_r+0x7c>
   898e0:	2202      	movs	r2, #2
   898e2:	ab0d      	add	r3, sp, #52	; 0x34
   898e4:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   898e8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   898ec:	e6cc      	b.n	89688 <_vfiprintf_r+0x86c>
   898ee:	46b9      	mov	r9, r7
   898f0:	e598      	b.n	89424 <_vfiprintf_r+0x608>
   898f2:	4a90      	ldr	r2, [pc, #576]	; (89b34 <_vfiprintf_r+0xd18>)
   898f4:	9208      	str	r2, [sp, #32]
   898f6:	06bd      	lsls	r5, r7, #26
   898f8:	9c04      	ldr	r4, [sp, #16]
   898fa:	d530      	bpl.n	8995e <_vfiprintf_r+0xb42>
   898fc:	3407      	adds	r4, #7
   898fe:	f024 0207 	bic.w	r2, r4, #7
   89902:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   89906:	9204      	str	r2, [sp, #16]
   89908:	07fe      	lsls	r6, r7, #31
   8990a:	d509      	bpl.n	89920 <_vfiprintf_r+0xb04>
   8990c:	ea54 0205 	orrs.w	r2, r4, r5
   89910:	d006      	beq.n	89920 <_vfiprintf_r+0xb04>
   89912:	2230      	movs	r2, #48	; 0x30
   89914:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   89918:	f047 0702 	orr.w	r7, r7, #2
   8991c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   89920:	2302      	movs	r3, #2
   89922:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   89926:	f7ff bbca 	b.w	890be <_vfiprintf_r+0x2a2>
   8992a:	4a83      	ldr	r2, [pc, #524]	; (89b38 <_vfiprintf_r+0xd1c>)
   8992c:	9208      	str	r2, [sp, #32]
   8992e:	e7e2      	b.n	898f6 <_vfiprintf_r+0xada>
   89930:	4630      	mov	r0, r6
   89932:	f003 f871 	bl	8ca18 <strlen>
   89936:	2300      	movs	r3, #0
   89938:	9404      	str	r4, [sp, #16]
   8993a:	9001      	str	r0, [sp, #4]
   8993c:	9300      	str	r3, [sp, #0]
   8993e:	f7ff bb7d 	b.w	8903c <_vfiprintf_r+0x220>
   89942:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   89946:	2900      	cmp	r1, #0
   89948:	f040 8089 	bne.w	89a5e <_vfiprintf_r+0xc42>
   8994c:	9b07      	ldr	r3, [sp, #28]
   8994e:	2b00      	cmp	r3, #0
   89950:	f47f ae92 	bne.w	89678 <_vfiprintf_r+0x85c>
   89954:	4611      	mov	r1, r2
   89956:	2001      	movs	r0, #1
   89958:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8995c:	e458      	b.n	89210 <_vfiprintf_r+0x3f4>
   8995e:	f854 2b04 	ldr.w	r2, [r4], #4
   89962:	9404      	str	r4, [sp, #16]
   89964:	06fc      	lsls	r4, r7, #27
   89966:	d407      	bmi.n	89978 <_vfiprintf_r+0xb5c>
   89968:	0678      	lsls	r0, r7, #25
   8996a:	d502      	bpl.n	89972 <_vfiprintf_r+0xb56>
   8996c:	2500      	movs	r5, #0
   8996e:	b294      	uxth	r4, r2
   89970:	e7ca      	b.n	89908 <_vfiprintf_r+0xaec>
   89972:	05b9      	lsls	r1, r7, #22
   89974:	f100 8089 	bmi.w	89a8a <_vfiprintf_r+0xc6e>
   89978:	4614      	mov	r4, r2
   8997a:	2500      	movs	r5, #0
   8997c:	e7c4      	b.n	89908 <_vfiprintf_r+0xaec>
   8997e:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   89982:	f8cd 9004 	str.w	r9, [sp, #4]
   89986:	f8cd 8018 	str.w	r8, [sp, #24]
   8998a:	2700      	movs	r7, #0
   8998c:	4698      	mov	r8, r3
   8998e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   89992:	ae3a      	add	r6, sp, #232	; 0xe8
   89994:	e00b      	b.n	899ae <_vfiprintf_r+0xb92>
   89996:	220a      	movs	r2, #10
   89998:	2300      	movs	r3, #0
   8999a:	4620      	mov	r0, r4
   8999c:	4629      	mov	r1, r5
   8999e:	f7fd f9bd 	bl	86d1c <__aeabi_uldivmod>
   899a2:	2d00      	cmp	r5, #0
   899a4:	bf08      	it	eq
   899a6:	2c0a      	cmpeq	r4, #10
   899a8:	d319      	bcc.n	899de <_vfiprintf_r+0xbc2>
   899aa:	4604      	mov	r4, r0
   899ac:	460d      	mov	r5, r1
   899ae:	220a      	movs	r2, #10
   899b0:	2300      	movs	r3, #0
   899b2:	4620      	mov	r0, r4
   899b4:	4629      	mov	r1, r5
   899b6:	f7fd f9b1 	bl	86d1c <__aeabi_uldivmod>
   899ba:	3230      	adds	r2, #48	; 0x30
   899bc:	f806 2c01 	strb.w	r2, [r6, #-1]
   899c0:	3701      	adds	r7, #1
   899c2:	3e01      	subs	r6, #1
   899c4:	f1b8 0f00 	cmp.w	r8, #0
   899c8:	d0e5      	beq.n	89996 <_vfiprintf_r+0xb7a>
   899ca:	f899 3000 	ldrb.w	r3, [r9]
   899ce:	42bb      	cmp	r3, r7
   899d0:	d1e1      	bne.n	89996 <_vfiprintf_r+0xb7a>
   899d2:	2fff      	cmp	r7, #255	; 0xff
   899d4:	d0df      	beq.n	89996 <_vfiprintf_r+0xb7a>
   899d6:	2d00      	cmp	r5, #0
   899d8:	bf08      	it	eq
   899da:	2c0a      	cmpeq	r4, #10
   899dc:	d225      	bcs.n	89a2a <_vfiprintf_r+0xc0e>
   899de:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   899e2:	ab3a      	add	r3, sp, #232	; 0xe8
   899e4:	f8dd 9004 	ldr.w	r9, [sp, #4]
   899e8:	1b9b      	subs	r3, r3, r6
   899ea:	464f      	mov	r7, r9
   899ec:	f8dd 8018 	ldr.w	r8, [sp, #24]
   899f0:	9301      	str	r3, [sp, #4]
   899f2:	f7ff bb23 	b.w	8903c <_vfiprintf_r+0x220>
   899f6:	46b9      	mov	r9, r7
   899f8:	f7ff bb13 	b.w	89022 <_vfiprintf_r+0x206>
   899fc:	2b01      	cmp	r3, #1
   899fe:	46b9      	mov	r9, r7
   89a00:	f47f ad44 	bne.w	8948c <_vfiprintf_r+0x670>
   89a04:	f7ff bb12 	b.w	8902c <_vfiprintf_r+0x210>
   89a08:	9c04      	ldr	r4, [sp, #16]
   89a0a:	9a03      	ldr	r2, [sp, #12]
   89a0c:	f854 3b04 	ldr.w	r3, [r4], #4
   89a10:	601a      	str	r2, [r3, #0]
   89a12:	9404      	str	r4, [sp, #16]
   89a14:	f7ff ba40 	b.w	88e98 <_vfiprintf_r+0x7c>
   89a18:	9d00      	ldr	r5, [sp, #0]
   89a1a:	4e48      	ldr	r6, [pc, #288]	; (89b3c <_vfiprintf_r+0xd20>)
   89a1c:	2d06      	cmp	r5, #6
   89a1e:	bf28      	it	cs
   89a20:	2506      	movcs	r5, #6
   89a22:	9404      	str	r4, [sp, #16]
   89a24:	9501      	str	r5, [sp, #4]
   89a26:	f7ff bbaf 	b.w	89188 <_vfiprintf_r+0x36c>
   89a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89a2c:	990a      	ldr	r1, [sp, #40]	; 0x28
   89a2e:	1af6      	subs	r6, r6, r3
   89a30:	461a      	mov	r2, r3
   89a32:	4630      	mov	r0, r6
   89a34:	f003 f81e 	bl	8ca74 <strncpy>
   89a38:	f899 3001 	ldrb.w	r3, [r9, #1]
   89a3c:	b10b      	cbz	r3, 89a42 <_vfiprintf_r+0xc26>
   89a3e:	f109 0901 	add.w	r9, r9, #1
   89a42:	220a      	movs	r2, #10
   89a44:	2300      	movs	r3, #0
   89a46:	4620      	mov	r0, r4
   89a48:	4629      	mov	r1, r5
   89a4a:	f7fd f967 	bl	86d1c <__aeabi_uldivmod>
   89a4e:	2700      	movs	r7, #0
   89a50:	e7ab      	b.n	899aa <_vfiprintf_r+0xb8e>
   89a52:	2001      	movs	r0, #1
   89a54:	4611      	mov	r1, r2
   89a56:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89a5a:	f7ff bbd9 	b.w	89210 <_vfiprintf_r+0x3f4>
   89a5e:	2201      	movs	r2, #1
   89a60:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   89a64:	4610      	mov	r0, r2
   89a66:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   89a6a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89a6e:	f7ff bbac 	b.w	891ca <_vfiprintf_r+0x3ae>
   89a72:	9c04      	ldr	r4, [sp, #16]
   89a74:	9a03      	ldr	r2, [sp, #12]
   89a76:	f854 3b04 	ldr.w	r3, [r4], #4
   89a7a:	801a      	strh	r2, [r3, #0]
   89a7c:	9404      	str	r4, [sp, #16]
   89a7e:	f7ff ba0b 	b.w	88e98 <_vfiprintf_r+0x7c>
   89a82:	2500      	movs	r5, #0
   89a84:	b2d4      	uxtb	r4, r2
   89a86:	f7ff bb1a 	b.w	890be <_vfiprintf_r+0x2a2>
   89a8a:	2500      	movs	r5, #0
   89a8c:	b2d4      	uxtb	r4, r2
   89a8e:	e73b      	b.n	89908 <_vfiprintf_r+0xaec>
   89a90:	b264      	sxtb	r4, r4
   89a92:	17e5      	asrs	r5, r4, #31
   89a94:	9304      	str	r3, [sp, #16]
   89a96:	4622      	mov	r2, r4
   89a98:	462b      	mov	r3, r5
   89a9a:	f7ff bab3 	b.w	89004 <_vfiprintf_r+0x1e8>
   89a9e:	2500      	movs	r5, #0
   89aa0:	b2dc      	uxtb	r4, r3
   89aa2:	f7ff bb09 	b.w	890b8 <_vfiprintf_r+0x29c>
   89aa6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89aaa:	f001 fdc5 	bl	8b638 <__retarget_lock_release_recursive>
   89aae:	f7ff baec 	b.w	8908a <_vfiprintf_r+0x26e>
   89ab2:	9b00      	ldr	r3, [sp, #0]
   89ab4:	9404      	str	r4, [sp, #16]
   89ab6:	9301      	str	r3, [sp, #4]
   89ab8:	9000      	str	r0, [sp, #0]
   89aba:	f7ff babf 	b.w	8903c <_vfiprintf_r+0x220>
   89abe:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89ac2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 89b40 <_vfiprintf_r+0xd24>
   89ac6:	3101      	adds	r1, #1
   89ac8:	e619      	b.n	896fe <_vfiprintf_r+0x8e2>
   89aca:	2200      	movs	r2, #0
   89acc:	9200      	str	r2, [sp, #0]
   89ace:	f7ff ba09 	b.w	88ee4 <_vfiprintf_r+0xc8>
   89ad2:	4659      	mov	r1, fp
   89ad4:	9805      	ldr	r0, [sp, #20]
   89ad6:	aa0e      	add	r2, sp, #56	; 0x38
   89ad8:	f7ff f964 	bl	88da4 <__sprint_r.part.0>
   89adc:	2800      	cmp	r0, #0
   89ade:	f43f abd2 	beq.w	89286 <_vfiprintf_r+0x46a>
   89ae2:	f7ff bb36 	b.w	89152 <_vfiprintf_r+0x336>
   89ae6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   89ae8:	f8df 9054 	ldr.w	r9, [pc, #84]	; 89b40 <_vfiprintf_r+0xd24>
   89aec:	3001      	adds	r0, #1
   89aee:	e657      	b.n	897a0 <_vfiprintf_r+0x984>
   89af0:	4684      	mov	ip, r0
   89af2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 89b44 <_vfiprintf_r+0xd28>
   89af6:	e543      	b.n	89580 <_vfiprintf_r+0x764>
   89af8:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89afc:	07db      	lsls	r3, r3, #31
   89afe:	d407      	bmi.n	89b10 <_vfiprintf_r+0xcf4>
   89b00:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89b04:	059f      	lsls	r7, r3, #22
   89b06:	d403      	bmi.n	89b10 <_vfiprintf_r+0xcf4>
   89b08:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89b0c:	f001 fd94 	bl	8b638 <__retarget_lock_release_recursive>
   89b10:	f04f 33ff 	mov.w	r3, #4294967295
   89b14:	9303      	str	r3, [sp, #12]
   89b16:	f7ff bb27 	b.w	89168 <_vfiprintf_r+0x34c>
   89b1a:	9a04      	ldr	r2, [sp, #16]
   89b1c:	f898 3001 	ldrb.w	r3, [r8, #1]
   89b20:	f852 0b04 	ldr.w	r0, [r2], #4
   89b24:	4688      	mov	r8, r1
   89b26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   89b2a:	9000      	str	r0, [sp, #0]
   89b2c:	9204      	str	r2, [sp, #16]
   89b2e:	f7ff b9d7 	b.w	88ee0 <_vfiprintf_r+0xc4>
   89b32:	bf00      	nop
   89b34:	0008da78 	.word	0x0008da78
   89b38:	0008da64 	.word	0x0008da64
   89b3c:	0008da8c 	.word	0x0008da8c
   89b40:	0008dab8 	.word	0x0008dab8
   89b44:	0008dac8 	.word	0x0008dac8

00089b48 <__sbprintf>:
   89b48:	b5f0      	push	{r4, r5, r6, r7, lr}
   89b4a:	460c      	mov	r4, r1
   89b4c:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   89b50:	f04f 0e00 	mov.w	lr, #0
   89b54:	4615      	mov	r5, r2
   89b56:	4606      	mov	r6, r0
   89b58:	461f      	mov	r7, r3
   89b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   89b5c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   89b60:	89e2      	ldrh	r2, [r4, #14]
   89b62:	8989      	ldrh	r1, [r1, #12]
   89b64:	9319      	str	r3, [sp, #100]	; 0x64
   89b66:	69e3      	ldr	r3, [r4, #28]
   89b68:	f8ad 200e 	strh.w	r2, [sp, #14]
   89b6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   89b6e:	f021 0102 	bic.w	r1, r1, #2
   89b72:	9307      	str	r3, [sp, #28]
   89b74:	a816      	add	r0, sp, #88	; 0x58
   89b76:	ab1a      	add	r3, sp, #104	; 0x68
   89b78:	f8ad 100c 	strh.w	r1, [sp, #12]
   89b7c:	f8cd e018 	str.w	lr, [sp, #24]
   89b80:	9209      	str	r2, [sp, #36]	; 0x24
   89b82:	9300      	str	r3, [sp, #0]
   89b84:	9304      	str	r3, [sp, #16]
   89b86:	f8cd c008 	str.w	ip, [sp, #8]
   89b8a:	f8cd c014 	str.w	ip, [sp, #20]
   89b8e:	f001 fd4d 	bl	8b62c <__retarget_lock_init_recursive>
   89b92:	462a      	mov	r2, r5
   89b94:	463b      	mov	r3, r7
   89b96:	4669      	mov	r1, sp
   89b98:	4630      	mov	r0, r6
   89b9a:	f7ff f93f 	bl	88e1c <_vfiprintf_r>
   89b9e:	1e05      	subs	r5, r0, #0
   89ba0:	db07      	blt.n	89bb2 <__sbprintf+0x6a>
   89ba2:	4630      	mov	r0, r6
   89ba4:	4669      	mov	r1, sp
   89ba6:	f001 f917 	bl	8add8 <_fflush_r>
   89baa:	2800      	cmp	r0, #0
   89bac:	bf18      	it	ne
   89bae:	f04f 35ff 	movne.w	r5, #4294967295
   89bb2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   89bb6:	065b      	lsls	r3, r3, #25
   89bb8:	d503      	bpl.n	89bc2 <__sbprintf+0x7a>
   89bba:	89a3      	ldrh	r3, [r4, #12]
   89bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89bc0:	81a3      	strh	r3, [r4, #12]
   89bc2:	9816      	ldr	r0, [sp, #88]	; 0x58
   89bc4:	f001 fd34 	bl	8b630 <__retarget_lock_close_recursive>
   89bc8:	4628      	mov	r0, r5
   89bca:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   89bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

00089bd0 <__swsetup_r>:
   89bd0:	b538      	push	{r3, r4, r5, lr}
   89bd2:	4b32      	ldr	r3, [pc, #200]	; (89c9c <__swsetup_r+0xcc>)
   89bd4:	4605      	mov	r5, r0
   89bd6:	6818      	ldr	r0, [r3, #0]
   89bd8:	460c      	mov	r4, r1
   89bda:	b110      	cbz	r0, 89be2 <__swsetup_r+0x12>
   89bdc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89bde:	2b00      	cmp	r3, #0
   89be0:	d03c      	beq.n	89c5c <__swsetup_r+0x8c>
   89be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89be6:	0718      	lsls	r0, r3, #28
   89be8:	b29a      	uxth	r2, r3
   89bea:	d50c      	bpl.n	89c06 <__swsetup_r+0x36>
   89bec:	6921      	ldr	r1, [r4, #16]
   89bee:	b1a9      	cbz	r1, 89c1c <__swsetup_r+0x4c>
   89bf0:	f012 0001 	ands.w	r0, r2, #1
   89bf4:	d022      	beq.n	89c3c <__swsetup_r+0x6c>
   89bf6:	2500      	movs	r5, #0
   89bf8:	6960      	ldr	r0, [r4, #20]
   89bfa:	60a5      	str	r5, [r4, #8]
   89bfc:	4240      	negs	r0, r0
   89bfe:	61a0      	str	r0, [r4, #24]
   89c00:	b311      	cbz	r1, 89c48 <__swsetup_r+0x78>
   89c02:	2000      	movs	r0, #0
   89c04:	bd38      	pop	{r3, r4, r5, pc}
   89c06:	06d1      	lsls	r1, r2, #27
   89c08:	d53f      	bpl.n	89c8a <__swsetup_r+0xba>
   89c0a:	0752      	lsls	r2, r2, #29
   89c0c:	d429      	bmi.n	89c62 <__swsetup_r+0x92>
   89c0e:	6921      	ldr	r1, [r4, #16]
   89c10:	f043 0308 	orr.w	r3, r3, #8
   89c14:	81a3      	strh	r3, [r4, #12]
   89c16:	b29a      	uxth	r2, r3
   89c18:	2900      	cmp	r1, #0
   89c1a:	d1e9      	bne.n	89bf0 <__swsetup_r+0x20>
   89c1c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   89c20:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   89c24:	d0e4      	beq.n	89bf0 <__swsetup_r+0x20>
   89c26:	4628      	mov	r0, r5
   89c28:	4621      	mov	r1, r4
   89c2a:	f001 fd35 	bl	8b698 <__smakebuf_r>
   89c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89c32:	6921      	ldr	r1, [r4, #16]
   89c34:	b29a      	uxth	r2, r3
   89c36:	f012 0001 	ands.w	r0, r2, #1
   89c3a:	d1dc      	bne.n	89bf6 <__swsetup_r+0x26>
   89c3c:	0795      	lsls	r5, r2, #30
   89c3e:	bf58      	it	pl
   89c40:	6960      	ldrpl	r0, [r4, #20]
   89c42:	60a0      	str	r0, [r4, #8]
   89c44:	2900      	cmp	r1, #0
   89c46:	d1dc      	bne.n	89c02 <__swsetup_r+0x32>
   89c48:	0612      	lsls	r2, r2, #24
   89c4a:	bf58      	it	pl
   89c4c:	4608      	movpl	r0, r1
   89c4e:	d5d9      	bpl.n	89c04 <__swsetup_r+0x34>
   89c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89c54:	f04f 30ff 	mov.w	r0, #4294967295
   89c58:	81a3      	strh	r3, [r4, #12]
   89c5a:	bd38      	pop	{r3, r4, r5, pc}
   89c5c:	f001 f918 	bl	8ae90 <__sinit>
   89c60:	e7bf      	b.n	89be2 <__swsetup_r+0x12>
   89c62:	6b21      	ldr	r1, [r4, #48]	; 0x30
   89c64:	b151      	cbz	r1, 89c7c <__swsetup_r+0xac>
   89c66:	f104 0240 	add.w	r2, r4, #64	; 0x40
   89c6a:	4291      	cmp	r1, r2
   89c6c:	d004      	beq.n	89c78 <__swsetup_r+0xa8>
   89c6e:	4628      	mov	r0, r5
   89c70:	f001 fa32 	bl	8b0d8 <_free_r>
   89c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89c78:	2200      	movs	r2, #0
   89c7a:	6322      	str	r2, [r4, #48]	; 0x30
   89c7c:	2200      	movs	r2, #0
   89c7e:	6921      	ldr	r1, [r4, #16]
   89c80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   89c84:	e9c4 1200 	strd	r1, r2, [r4]
   89c88:	e7c2      	b.n	89c10 <__swsetup_r+0x40>
   89c8a:	2209      	movs	r2, #9
   89c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89c90:	602a      	str	r2, [r5, #0]
   89c92:	f04f 30ff 	mov.w	r0, #4294967295
   89c96:	81a3      	strh	r3, [r4, #12]
   89c98:	bd38      	pop	{r3, r4, r5, pc}
   89c9a:	bf00      	nop
   89c9c:	20000440 	.word	0x20000440

00089ca0 <register_fini>:
   89ca0:	4b02      	ldr	r3, [pc, #8]	; (89cac <register_fini+0xc>)
   89ca2:	b113      	cbz	r3, 89caa <register_fini+0xa>
   89ca4:	4802      	ldr	r0, [pc, #8]	; (89cb0 <register_fini+0x10>)
   89ca6:	f000 b805 	b.w	89cb4 <atexit>
   89caa:	4770      	bx	lr
   89cac:	00000000 	.word	0x00000000
   89cb0:	0008af05 	.word	0x0008af05

00089cb4 <atexit>:
   89cb4:	2300      	movs	r3, #0
   89cb6:	4601      	mov	r1, r0
   89cb8:	461a      	mov	r2, r3
   89cba:	4618      	mov	r0, r3
   89cbc:	f003 b824 	b.w	8cd08 <__register_exitproc>

00089cc0 <quorem>:
   89cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89cc4:	6903      	ldr	r3, [r0, #16]
   89cc6:	690d      	ldr	r5, [r1, #16]
   89cc8:	b083      	sub	sp, #12
   89cca:	42ab      	cmp	r3, r5
   89ccc:	f2c0 8084 	blt.w	89dd8 <quorem+0x118>
   89cd0:	3d01      	subs	r5, #1
   89cd2:	f101 0614 	add.w	r6, r1, #20
   89cd6:	f100 0914 	add.w	r9, r0, #20
   89cda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   89cde:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89ce2:	3301      	adds	r3, #1
   89ce4:	468e      	mov	lr, r1
   89ce6:	00a9      	lsls	r1, r5, #2
   89ce8:	9100      	str	r1, [sp, #0]
   89cea:	429a      	cmp	r2, r3
   89cec:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   89cf0:	4682      	mov	sl, r0
   89cf2:	fbb2 f7f3 	udiv	r7, r2, r3
   89cf6:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   89cfa:	9101      	str	r1, [sp, #4]
   89cfc:	d337      	bcc.n	89d6e <quorem+0xae>
   89cfe:	2200      	movs	r2, #0
   89d00:	46b4      	mov	ip, r6
   89d02:	4614      	mov	r4, r2
   89d04:	4648      	mov	r0, r9
   89d06:	f85c 3b04 	ldr.w	r3, [ip], #4
   89d0a:	6801      	ldr	r1, [r0, #0]
   89d0c:	fa1f fb83 	uxth.w	fp, r3
   89d10:	fb07 220b 	mla	r2, r7, fp, r2
   89d14:	0c1b      	lsrs	r3, r3, #16
   89d16:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   89d1a:	fb07 bb03 	mla	fp, r7, r3, fp
   89d1e:	b293      	uxth	r3, r2
   89d20:	1ae3      	subs	r3, r4, r3
   89d22:	b28a      	uxth	r2, r1
   89d24:	fa1f f48b 	uxth.w	r4, fp
   89d28:	4413      	add	r3, r2
   89d2a:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   89d2e:	eb04 4423 	add.w	r4, r4, r3, asr #16
   89d32:	b29b      	uxth	r3, r3
   89d34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   89d38:	45e0      	cmp	r8, ip
   89d3a:	f840 3b04 	str.w	r3, [r0], #4
   89d3e:	ea4f 4424 	mov.w	r4, r4, asr #16
   89d42:	ea4f 421b 	mov.w	r2, fp, lsr #16
   89d46:	d2de      	bcs.n	89d06 <quorem+0x46>
   89d48:	9b00      	ldr	r3, [sp, #0]
   89d4a:	f859 3003 	ldr.w	r3, [r9, r3]
   89d4e:	b973      	cbnz	r3, 89d6e <quorem+0xae>
   89d50:	9b01      	ldr	r3, [sp, #4]
   89d52:	3b04      	subs	r3, #4
   89d54:	4599      	cmp	r9, r3
   89d56:	d304      	bcc.n	89d62 <quorem+0xa2>
   89d58:	e007      	b.n	89d6a <quorem+0xaa>
   89d5a:	4599      	cmp	r9, r3
   89d5c:	f105 35ff 	add.w	r5, r5, #4294967295
   89d60:	d203      	bcs.n	89d6a <quorem+0xaa>
   89d62:	f853 2904 	ldr.w	r2, [r3], #-4
   89d66:	2a00      	cmp	r2, #0
   89d68:	d0f7      	beq.n	89d5a <quorem+0x9a>
   89d6a:	f8ca 5010 	str.w	r5, [sl, #16]
   89d6e:	4671      	mov	r1, lr
   89d70:	4650      	mov	r0, sl
   89d72:	f002 faa9 	bl	8c2c8 <__mcmp>
   89d76:	2800      	cmp	r0, #0
   89d78:	db2a      	blt.n	89dd0 <quorem+0x110>
   89d7a:	4648      	mov	r0, r9
   89d7c:	2300      	movs	r3, #0
   89d7e:	3701      	adds	r7, #1
   89d80:	f856 1b04 	ldr.w	r1, [r6], #4
   89d84:	6804      	ldr	r4, [r0, #0]
   89d86:	b28a      	uxth	r2, r1
   89d88:	1a9a      	subs	r2, r3, r2
   89d8a:	0c0b      	lsrs	r3, r1, #16
   89d8c:	b2a1      	uxth	r1, r4
   89d8e:	440a      	add	r2, r1
   89d90:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   89d94:	eb03 4322 	add.w	r3, r3, r2, asr #16
   89d98:	b292      	uxth	r2, r2
   89d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   89d9e:	45b0      	cmp	r8, r6
   89da0:	f840 2b04 	str.w	r2, [r0], #4
   89da4:	ea4f 4323 	mov.w	r3, r3, asr #16
   89da8:	d2ea      	bcs.n	89d80 <quorem+0xc0>
   89daa:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89dae:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   89db2:	b96a      	cbnz	r2, 89dd0 <quorem+0x110>
   89db4:	3b04      	subs	r3, #4
   89db6:	4599      	cmp	r9, r3
   89db8:	d304      	bcc.n	89dc4 <quorem+0x104>
   89dba:	e007      	b.n	89dcc <quorem+0x10c>
   89dbc:	4599      	cmp	r9, r3
   89dbe:	f105 35ff 	add.w	r5, r5, #4294967295
   89dc2:	d203      	bcs.n	89dcc <quorem+0x10c>
   89dc4:	f853 2904 	ldr.w	r2, [r3], #-4
   89dc8:	2a00      	cmp	r2, #0
   89dca:	d0f7      	beq.n	89dbc <quorem+0xfc>
   89dcc:	f8ca 5010 	str.w	r5, [sl, #16]
   89dd0:	4638      	mov	r0, r7
   89dd2:	b003      	add	sp, #12
   89dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89dd8:	2000      	movs	r0, #0
   89dda:	b003      	add	sp, #12
   89ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00089de0 <_dtoa_r>:
   89de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89de4:	4616      	mov	r6, r2
   89de6:	461f      	mov	r7, r3
   89de8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   89dea:	b09b      	sub	sp, #108	; 0x6c
   89dec:	4604      	mov	r4, r0
   89dee:	e9cd 6704 	strd	r6, r7, [sp, #16]
   89df2:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   89df4:	b141      	cbz	r1, 89e08 <_dtoa_r+0x28>
   89df6:	2301      	movs	r3, #1
   89df8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   89dfa:	4093      	lsls	r3, r2
   89dfc:	e9c1 2301 	strd	r2, r3, [r1, #4]
   89e00:	f002 f834 	bl	8be6c <_Bfree>
   89e04:	2300      	movs	r3, #0
   89e06:	6423      	str	r3, [r4, #64]	; 0x40
   89e08:	f1b7 0900 	subs.w	r9, r7, #0
   89e0c:	bfb4      	ite	lt
   89e0e:	2301      	movlt	r3, #1
   89e10:	2300      	movge	r3, #0
   89e12:	602b      	str	r3, [r5, #0]
   89e14:	4b76      	ldr	r3, [pc, #472]	; (89ff0 <_dtoa_r+0x210>)
   89e16:	bfbc      	itt	lt
   89e18:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   89e1c:	f8cd 9014 	strlt.w	r9, [sp, #20]
   89e20:	ea33 0309 	bics.w	r3, r3, r9
   89e24:	f000 80ab 	beq.w	89f7e <_dtoa_r+0x19e>
   89e28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89e2c:	4610      	mov	r0, r2
   89e2e:	4619      	mov	r1, r3
   89e30:	2200      	movs	r2, #0
   89e32:	2300      	movs	r3, #0
   89e34:	e9cd 0108 	strd	r0, r1, [sp, #32]
   89e38:	f003 fd52 	bl	8d8e0 <__aeabi_dcmpeq>
   89e3c:	4680      	mov	r8, r0
   89e3e:	b170      	cbz	r0, 89e5e <_dtoa_r+0x7e>
   89e40:	2301      	movs	r3, #1
   89e42:	9a26      	ldr	r2, [sp, #152]	; 0x98
   89e44:	6013      	str	r3, [r2, #0]
   89e46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89e48:	2b00      	cmp	r3, #0
   89e4a:	f000 82c2 	beq.w	8a3d2 <_dtoa_r+0x5f2>
   89e4e:	4869      	ldr	r0, [pc, #420]	; (89ff4 <_dtoa_r+0x214>)
   89e50:	6018      	str	r0, [r3, #0]
   89e52:	1e43      	subs	r3, r0, #1
   89e54:	9303      	str	r3, [sp, #12]
   89e56:	9803      	ldr	r0, [sp, #12]
   89e58:	b01b      	add	sp, #108	; 0x6c
   89e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89e5e:	aa18      	add	r2, sp, #96	; 0x60
   89e60:	ab19      	add	r3, sp, #100	; 0x64
   89e62:	e9cd 3200 	strd	r3, r2, [sp]
   89e66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   89e6a:	4620      	mov	r0, r4
   89e6c:	f002 faf2 	bl	8c454 <__d2b>
   89e70:	ea5f 5519 	movs.w	r5, r9, lsr #20
   89e74:	4682      	mov	sl, r0
   89e76:	f040 8098 	bne.w	89faa <_dtoa_r+0x1ca>
   89e7a:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   89e7e:	4445      	add	r5, r8
   89e80:	f205 4032 	addw	r0, r5, #1074	; 0x432
   89e84:	2820      	cmp	r0, #32
   89e86:	f340 8390 	ble.w	8a5aa <_dtoa_r+0x7ca>
   89e8a:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   89e8e:	f205 4012 	addw	r0, r5, #1042	; 0x412
   89e92:	fa09 f903 	lsl.w	r9, r9, r3
   89e96:	fa26 f000 	lsr.w	r0, r6, r0
   89e9a:	ea49 0000 	orr.w	r0, r9, r0
   89e9e:	f003 fa3d 	bl	8d31c <__aeabi_ui2d>
   89ea2:	2201      	movs	r2, #1
   89ea4:	3d01      	subs	r5, #1
   89ea6:	920f      	str	r2, [sp, #60]	; 0x3c
   89ea8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   89eac:	2200      	movs	r2, #0
   89eae:	4b52      	ldr	r3, [pc, #328]	; (89ff8 <_dtoa_r+0x218>)
   89eb0:	f003 f8f6 	bl	8d0a0 <__aeabi_dsub>
   89eb4:	a348      	add	r3, pc, #288	; (adr r3, 89fd8 <_dtoa_r+0x1f8>)
   89eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   89eba:	f003 faa9 	bl	8d410 <__aeabi_dmul>
   89ebe:	a348      	add	r3, pc, #288	; (adr r3, 89fe0 <_dtoa_r+0x200>)
   89ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
   89ec4:	f003 f8ee 	bl	8d0a4 <__adddf3>
   89ec8:	4606      	mov	r6, r0
   89eca:	4628      	mov	r0, r5
   89ecc:	460f      	mov	r7, r1
   89ece:	f003 fa35 	bl	8d33c <__aeabi_i2d>
   89ed2:	a345      	add	r3, pc, #276	; (adr r3, 89fe8 <_dtoa_r+0x208>)
   89ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
   89ed8:	f003 fa9a 	bl	8d410 <__aeabi_dmul>
   89edc:	4602      	mov	r2, r0
   89ede:	460b      	mov	r3, r1
   89ee0:	4630      	mov	r0, r6
   89ee2:	4639      	mov	r1, r7
   89ee4:	f003 f8de 	bl	8d0a4 <__adddf3>
   89ee8:	4606      	mov	r6, r0
   89eea:	460f      	mov	r7, r1
   89eec:	f003 fd40 	bl	8d970 <__aeabi_d2iz>
   89ef0:	2200      	movs	r2, #0
   89ef2:	4683      	mov	fp, r0
   89ef4:	2300      	movs	r3, #0
   89ef6:	4630      	mov	r0, r6
   89ef8:	4639      	mov	r1, r7
   89efa:	f003 fcfb 	bl	8d8f4 <__aeabi_dcmplt>
   89efe:	2800      	cmp	r0, #0
   89f00:	f040 825a 	bne.w	8a3b8 <_dtoa_r+0x5d8>
   89f04:	f1bb 0f16 	cmp.w	fp, #22
   89f08:	f200 8248 	bhi.w	8a39c <_dtoa_r+0x5bc>
   89f0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89f10:	4b3a      	ldr	r3, [pc, #232]	; (89ffc <_dtoa_r+0x21c>)
   89f12:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   89f16:	e9d3 2300 	ldrd	r2, r3, [r3]
   89f1a:	f003 fceb 	bl	8d8f4 <__aeabi_dcmplt>
   89f1e:	2800      	cmp	r0, #0
   89f20:	d072      	beq.n	8a008 <_dtoa_r+0x228>
   89f22:	2300      	movs	r3, #0
   89f24:	eba8 0505 	sub.w	r5, r8, r5
   89f28:	930e      	str	r3, [sp, #56]	; 0x38
   89f2a:	1e6b      	subs	r3, r5, #1
   89f2c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89f30:	9306      	str	r3, [sp, #24]
   89f32:	f100 823b 	bmi.w	8a3ac <_dtoa_r+0x5cc>
   89f36:	2300      	movs	r3, #0
   89f38:	930b      	str	r3, [sp, #44]	; 0x2c
   89f3a:	f1bb 0f00 	cmp.w	fp, #0
   89f3e:	da6b      	bge.n	8a018 <_dtoa_r+0x238>
   89f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89f42:	f8cd b01c 	str.w	fp, [sp, #28]
   89f46:	eba3 030b 	sub.w	r3, r3, fp
   89f4a:	930b      	str	r3, [sp, #44]	; 0x2c
   89f4c:	f1cb 0300 	rsb	r3, fp, #0
   89f50:	930d      	str	r3, [sp, #52]	; 0x34
   89f52:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89f54:	f04f 0b00 	mov.w	fp, #0
   89f58:	2b09      	cmp	r3, #9
   89f5a:	d866      	bhi.n	8a02a <_dtoa_r+0x24a>
   89f5c:	2b05      	cmp	r3, #5
   89f5e:	f340 8322 	ble.w	8a5a6 <_dtoa_r+0x7c6>
   89f62:	2500      	movs	r5, #0
   89f64:	3b04      	subs	r3, #4
   89f66:	9324      	str	r3, [sp, #144]	; 0x90
   89f68:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89f6a:	3b02      	subs	r3, #2
   89f6c:	2b03      	cmp	r3, #3
   89f6e:	f200 866e 	bhi.w	8ac4e <_dtoa_r+0xe6e>
   89f72:	e8df f013 	tbh	[pc, r3, lsl #1]
   89f76:	043b      	.short	0x043b
   89f78:	042f0438 	.word	0x042f0438
   89f7c:	0412      	.short	0x0412
   89f7e:	f242 730f 	movw	r3, #9999	; 0x270f
   89f82:	9a26      	ldr	r2, [sp, #152]	; 0x98
   89f84:	f3c9 0913 	ubfx	r9, r9, #0, #20
   89f88:	6013      	str	r3, [r2, #0]
   89f8a:	ea59 0306 	orrs.w	r3, r9, r6
   89f8e:	d11c      	bne.n	89fca <_dtoa_r+0x1ea>
   89f90:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89f92:	2b00      	cmp	r3, #0
   89f94:	f000 8657 	beq.w	8ac46 <_dtoa_r+0xe66>
   89f98:	4b19      	ldr	r3, [pc, #100]	; (8a000 <_dtoa_r+0x220>)
   89f9a:	9303      	str	r3, [sp, #12]
   89f9c:	3308      	adds	r3, #8
   89f9e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   89fa0:	9803      	ldr	r0, [sp, #12]
   89fa2:	6013      	str	r3, [r2, #0]
   89fa4:	b01b      	add	sp, #108	; 0x6c
   89fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89faa:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   89fae:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89fb2:	4608      	mov	r0, r1
   89fb4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   89fb8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   89fbc:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   89fc0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   89fc4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   89fc8:	e770      	b.n	89eac <_dtoa_r+0xcc>
   89fca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89fcc:	2b00      	cmp	r3, #0
   89fce:	f040 83c8 	bne.w	8a762 <_dtoa_r+0x982>
   89fd2:	4b0c      	ldr	r3, [pc, #48]	; (8a004 <_dtoa_r+0x224>)
   89fd4:	9303      	str	r3, [sp, #12]
   89fd6:	e73e      	b.n	89e56 <_dtoa_r+0x76>
   89fd8:	636f4361 	.word	0x636f4361
   89fdc:	3fd287a7 	.word	0x3fd287a7
   89fe0:	8b60c8b3 	.word	0x8b60c8b3
   89fe4:	3fc68a28 	.word	0x3fc68a28
   89fe8:	509f79fb 	.word	0x509f79fb
   89fec:	3fd34413 	.word	0x3fd34413
   89ff0:	7ff00000 	.word	0x7ff00000
   89ff4:	0008da95 	.word	0x0008da95
   89ff8:	3ff80000 	.word	0x3ff80000
   89ffc:	0008dc30 	.word	0x0008dc30
   8a000:	0008dadc 	.word	0x0008dadc
   8a004:	0008dad8 	.word	0x0008dad8
   8a008:	eba8 0505 	sub.w	r5, r8, r5
   8a00c:	1e6b      	subs	r3, r5, #1
   8a00e:	9306      	str	r3, [sp, #24]
   8a010:	f100 84a9 	bmi.w	8a966 <_dtoa_r+0xb86>
   8a014:	900e      	str	r0, [sp, #56]	; 0x38
   8a016:	900b      	str	r0, [sp, #44]	; 0x2c
   8a018:	9b06      	ldr	r3, [sp, #24]
   8a01a:	445b      	add	r3, fp
   8a01c:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   8a020:	2300      	movs	r3, #0
   8a022:	930d      	str	r3, [sp, #52]	; 0x34
   8a024:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a026:	2b09      	cmp	r3, #9
   8a028:	d998      	bls.n	89f5c <_dtoa_r+0x17c>
   8a02a:	2300      	movs	r3, #0
   8a02c:	2501      	movs	r5, #1
   8a02e:	9324      	str	r3, [sp, #144]	; 0x90
   8a030:	9325      	str	r3, [sp, #148]	; 0x94
   8a032:	f04f 33ff 	mov.w	r3, #4294967295
   8a036:	950c      	str	r5, [sp, #48]	; 0x30
   8a038:	930a      	str	r3, [sp, #40]	; 0x28
   8a03a:	2100      	movs	r1, #0
   8a03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a03e:	6461      	str	r1, [r4, #68]	; 0x44
   8a040:	9312      	str	r3, [sp, #72]	; 0x48
   8a042:	4620      	mov	r0, r4
   8a044:	f001 feec 	bl	8be20 <_Balloc>
   8a048:	9003      	str	r0, [sp, #12]
   8a04a:	2800      	cmp	r0, #0
   8a04c:	f000 8607 	beq.w	8ac5e <_dtoa_r+0xe7e>
   8a050:	9b03      	ldr	r3, [sp, #12]
   8a052:	6423      	str	r3, [r4, #64]	; 0x40
   8a054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a056:	2b0e      	cmp	r3, #14
   8a058:	f200 80e9 	bhi.w	8a22e <_dtoa_r+0x44e>
   8a05c:	2d00      	cmp	r5, #0
   8a05e:	f000 80e6 	beq.w	8a22e <_dtoa_r+0x44e>
   8a062:	9907      	ldr	r1, [sp, #28]
   8a064:	2900      	cmp	r1, #0
   8a066:	f340 8452 	ble.w	8a90e <_dtoa_r+0xb2e>
   8a06a:	4bb5      	ldr	r3, [pc, #724]	; (8a340 <_dtoa_r+0x560>)
   8a06c:	f001 020f 	and.w	r2, r1, #15
   8a070:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a074:	05c8      	lsls	r0, r1, #23
   8a076:	ea4f 1521 	mov.w	r5, r1, asr #4
   8a07a:	e9d3 6700 	ldrd	r6, r7, [r3]
   8a07e:	f140 83ee 	bpl.w	8a85e <_dtoa_r+0xa7e>
   8a082:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a086:	4baf      	ldr	r3, [pc, #700]	; (8a344 <_dtoa_r+0x564>)
   8a088:	f04f 0903 	mov.w	r9, #3
   8a08c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   8a090:	f003 fae8 	bl	8d664 <__aeabi_ddiv>
   8a094:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8a098:	f005 050f 	and.w	r5, r5, #15
   8a09c:	b18d      	cbz	r5, 8a0c2 <_dtoa_r+0x2e2>
   8a09e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8a344 <_dtoa_r+0x564>
   8a0a2:	07e9      	lsls	r1, r5, #31
   8a0a4:	d509      	bpl.n	8a0ba <_dtoa_r+0x2da>
   8a0a6:	e9d8 2300 	ldrd	r2, r3, [r8]
   8a0aa:	4630      	mov	r0, r6
   8a0ac:	4639      	mov	r1, r7
   8a0ae:	f003 f9af 	bl	8d410 <__aeabi_dmul>
   8a0b2:	4606      	mov	r6, r0
   8a0b4:	460f      	mov	r7, r1
   8a0b6:	f109 0901 	add.w	r9, r9, #1
   8a0ba:	106d      	asrs	r5, r5, #1
   8a0bc:	f108 0808 	add.w	r8, r8, #8
   8a0c0:	d1ef      	bne.n	8a0a2 <_dtoa_r+0x2c2>
   8a0c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8a0c6:	4632      	mov	r2, r6
   8a0c8:	463b      	mov	r3, r7
   8a0ca:	f003 facb 	bl	8d664 <__aeabi_ddiv>
   8a0ce:	4606      	mov	r6, r0
   8a0d0:	460f      	mov	r7, r1
   8a0d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8a0d4:	b143      	cbz	r3, 8a0e8 <_dtoa_r+0x308>
   8a0d6:	2200      	movs	r2, #0
   8a0d8:	4630      	mov	r0, r6
   8a0da:	4639      	mov	r1, r7
   8a0dc:	4b9a      	ldr	r3, [pc, #616]	; (8a348 <_dtoa_r+0x568>)
   8a0de:	f003 fc09 	bl	8d8f4 <__aeabi_dcmplt>
   8a0e2:	2800      	cmp	r0, #0
   8a0e4:	f040 853b 	bne.w	8ab5e <_dtoa_r+0xd7e>
   8a0e8:	4648      	mov	r0, r9
   8a0ea:	f003 f927 	bl	8d33c <__aeabi_i2d>
   8a0ee:	4632      	mov	r2, r6
   8a0f0:	463b      	mov	r3, r7
   8a0f2:	f003 f98d 	bl	8d410 <__aeabi_dmul>
   8a0f6:	4b95      	ldr	r3, [pc, #596]	; (8a34c <_dtoa_r+0x56c>)
   8a0f8:	2200      	movs	r2, #0
   8a0fa:	f002 ffd3 	bl	8d0a4 <__adddf3>
   8a0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a100:	4680      	mov	r8, r0
   8a102:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a106:	2b00      	cmp	r3, #0
   8a108:	f000 83ce 	beq.w	8a8a8 <_dtoa_r+0xac8>
   8a10c:	9b07      	ldr	r3, [sp, #28]
   8a10e:	9313      	str	r3, [sp, #76]	; 0x4c
   8a110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a112:	9310      	str	r3, [sp, #64]	; 0x40
   8a114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a116:	2b00      	cmp	r3, #0
   8a118:	f000 84b7 	beq.w	8aa8a <_dtoa_r+0xcaa>
   8a11c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8a11e:	4b88      	ldr	r3, [pc, #544]	; (8a340 <_dtoa_r+0x560>)
   8a120:	2000      	movs	r0, #0
   8a122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a126:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   8a12a:	4989      	ldr	r1, [pc, #548]	; (8a350 <_dtoa_r+0x570>)
   8a12c:	f003 fa9a 	bl	8d664 <__aeabi_ddiv>
   8a130:	4642      	mov	r2, r8
   8a132:	464b      	mov	r3, r9
   8a134:	f002 ffb4 	bl	8d0a0 <__aeabi_dsub>
   8a138:	4602      	mov	r2, r0
   8a13a:	460b      	mov	r3, r1
   8a13c:	4630      	mov	r0, r6
   8a13e:	4639      	mov	r1, r7
   8a140:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8a144:	f003 fc14 	bl	8d970 <__aeabi_d2iz>
   8a148:	4680      	mov	r8, r0
   8a14a:	f003 f8f7 	bl	8d33c <__aeabi_i2d>
   8a14e:	4602      	mov	r2, r0
   8a150:	460b      	mov	r3, r1
   8a152:	4630      	mov	r0, r6
   8a154:	4639      	mov	r1, r7
   8a156:	f002 ffa3 	bl	8d0a0 <__aeabi_dsub>
   8a15a:	9d03      	ldr	r5, [sp, #12]
   8a15c:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a160:	4606      	mov	r6, r0
   8a162:	460f      	mov	r7, r1
   8a164:	4602      	mov	r2, r0
   8a166:	f805 3b01 	strb.w	r3, [r5], #1
   8a16a:	460b      	mov	r3, r1
   8a16c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8a170:	f003 fbde 	bl	8d930 <__aeabi_dcmpgt>
   8a174:	2800      	cmp	r0, #0
   8a176:	f040 853b 	bne.w	8abf0 <_dtoa_r+0xe10>
   8a17a:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   8a17e:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   8a182:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   8a186:	f04f 0900 	mov.w	r9, #0
   8a18a:	9410      	str	r4, [sp, #64]	; 0x40
   8a18c:	e02a      	b.n	8a1e4 <_dtoa_r+0x404>
   8a18e:	f109 0901 	add.w	r9, r9, #1
   8a192:	45c1      	cmp	r9, r8
   8a194:	da48      	bge.n	8a228 <_dtoa_r+0x448>
   8a196:	4650      	mov	r0, sl
   8a198:	4659      	mov	r1, fp
   8a19a:	2200      	movs	r2, #0
   8a19c:	4b6d      	ldr	r3, [pc, #436]	; (8a354 <_dtoa_r+0x574>)
   8a19e:	f003 f937 	bl	8d410 <__aeabi_dmul>
   8a1a2:	2200      	movs	r2, #0
   8a1a4:	4b6b      	ldr	r3, [pc, #428]	; (8a354 <_dtoa_r+0x574>)
   8a1a6:	4682      	mov	sl, r0
   8a1a8:	468b      	mov	fp, r1
   8a1aa:	4630      	mov	r0, r6
   8a1ac:	4639      	mov	r1, r7
   8a1ae:	f003 f92f 	bl	8d410 <__aeabi_dmul>
   8a1b2:	460f      	mov	r7, r1
   8a1b4:	4606      	mov	r6, r0
   8a1b6:	f003 fbdb 	bl	8d970 <__aeabi_d2iz>
   8a1ba:	4604      	mov	r4, r0
   8a1bc:	f003 f8be 	bl	8d33c <__aeabi_i2d>
   8a1c0:	4602      	mov	r2, r0
   8a1c2:	460b      	mov	r3, r1
   8a1c4:	4630      	mov	r0, r6
   8a1c6:	4639      	mov	r1, r7
   8a1c8:	f002 ff6a 	bl	8d0a0 <__aeabi_dsub>
   8a1cc:	3430      	adds	r4, #48	; 0x30
   8a1ce:	4652      	mov	r2, sl
   8a1d0:	465b      	mov	r3, fp
   8a1d2:	f805 4b01 	strb.w	r4, [r5], #1
   8a1d6:	4606      	mov	r6, r0
   8a1d8:	460f      	mov	r7, r1
   8a1da:	f003 fb8b 	bl	8d8f4 <__aeabi_dcmplt>
   8a1de:	2800      	cmp	r0, #0
   8a1e0:	f040 8503 	bne.w	8abea <_dtoa_r+0xe0a>
   8a1e4:	4632      	mov	r2, r6
   8a1e6:	463b      	mov	r3, r7
   8a1e8:	2000      	movs	r0, #0
   8a1ea:	4957      	ldr	r1, [pc, #348]	; (8a348 <_dtoa_r+0x568>)
   8a1ec:	f002 ff58 	bl	8d0a0 <__aeabi_dsub>
   8a1f0:	4652      	mov	r2, sl
   8a1f2:	465b      	mov	r3, fp
   8a1f4:	f003 fb7e 	bl	8d8f4 <__aeabi_dcmplt>
   8a1f8:	2800      	cmp	r0, #0
   8a1fa:	d0c8      	beq.n	8a18e <_dtoa_r+0x3ae>
   8a1fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a1fe:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8a202:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8a204:	9a03      	ldr	r2, [sp, #12]
   8a206:	9307      	str	r3, [sp, #28]
   8a208:	e002      	b.n	8a210 <_dtoa_r+0x430>
   8a20a:	4295      	cmp	r5, r2
   8a20c:	f000 84d2 	beq.w	8abb4 <_dtoa_r+0xdd4>
   8a210:	46a9      	mov	r9, r5
   8a212:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   8a216:	2b39      	cmp	r3, #57	; 0x39
   8a218:	d0f7      	beq.n	8a20a <_dtoa_r+0x42a>
   8a21a:	3301      	adds	r3, #1
   8a21c:	b2db      	uxtb	r3, r3
   8a21e:	702b      	strb	r3, [r5, #0]
   8a220:	9b07      	ldr	r3, [sp, #28]
   8a222:	3301      	adds	r3, #1
   8a224:	9307      	str	r3, [sp, #28]
   8a226:	e1a0      	b.n	8a56a <_dtoa_r+0x78a>
   8a228:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8a22a:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   8a22e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8a230:	2b00      	cmp	r3, #0
   8a232:	f2c0 8093 	blt.w	8a35c <_dtoa_r+0x57c>
   8a236:	9a07      	ldr	r2, [sp, #28]
   8a238:	2a0e      	cmp	r2, #14
   8a23a:	f300 808f 	bgt.w	8a35c <_dtoa_r+0x57c>
   8a23e:	4b40      	ldr	r3, [pc, #256]	; (8a340 <_dtoa_r+0x560>)
   8a240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a244:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a248:	e9cd 2304 	strd	r2, r3, [sp, #16]
   8a24c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a24e:	2b00      	cmp	r3, #0
   8a250:	da1a      	bge.n	8a288 <_dtoa_r+0x4a8>
   8a252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a254:	2b00      	cmp	r3, #0
   8a256:	dc17      	bgt.n	8a288 <_dtoa_r+0x4a8>
   8a258:	f040 833f 	bne.w	8a8da <_dtoa_r+0xafa>
   8a25c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8a260:	2200      	movs	r2, #0
   8a262:	4b3d      	ldr	r3, [pc, #244]	; (8a358 <_dtoa_r+0x578>)
   8a264:	f003 f8d4 	bl	8d410 <__aeabi_dmul>
   8a268:	4602      	mov	r2, r0
   8a26a:	460b      	mov	r3, r1
   8a26c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a270:	f003 fb4a 	bl	8d908 <__aeabi_dcmple>
   8a274:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   8a278:	4645      	mov	r5, r8
   8a27a:	2800      	cmp	r0, #0
   8a27c:	f000 82cd 	beq.w	8a81a <_dtoa_r+0xa3a>
   8a280:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a282:	9f03      	ldr	r7, [sp, #12]
   8a284:	43de      	mvns	r6, r3
   8a286:	e2d0      	b.n	8a82a <_dtoa_r+0xa4a>
   8a288:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   8a28c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a290:	4632      	mov	r2, r6
   8a292:	463b      	mov	r3, r7
   8a294:	f003 f9e6 	bl	8d664 <__aeabi_ddiv>
   8a298:	f003 fb6a 	bl	8d970 <__aeabi_d2iz>
   8a29c:	4680      	mov	r8, r0
   8a29e:	f003 f84d 	bl	8d33c <__aeabi_i2d>
   8a2a2:	4632      	mov	r2, r6
   8a2a4:	463b      	mov	r3, r7
   8a2a6:	f003 f8b3 	bl	8d410 <__aeabi_dmul>
   8a2aa:	460b      	mov	r3, r1
   8a2ac:	4602      	mov	r2, r0
   8a2ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a2b2:	f002 fef5 	bl	8d0a0 <__aeabi_dsub>
   8a2b6:	9d03      	ldr	r5, [sp, #12]
   8a2b8:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a2bc:	f805 3b01 	strb.w	r3, [r5], #1
   8a2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a2c2:	2b01      	cmp	r3, #1
   8a2c4:	f000 837f 	beq.w	8a9c6 <_dtoa_r+0xbe6>
   8a2c8:	f8cd a018 	str.w	sl, [sp, #24]
   8a2cc:	f04f 0901 	mov.w	r9, #1
   8a2d0:	469b      	mov	fp, r3
   8a2d2:	46aa      	mov	sl, r5
   8a2d4:	9408      	str	r4, [sp, #32]
   8a2d6:	e01d      	b.n	8a314 <_dtoa_r+0x534>
   8a2d8:	4632      	mov	r2, r6
   8a2da:	463b      	mov	r3, r7
   8a2dc:	4620      	mov	r0, r4
   8a2de:	4629      	mov	r1, r5
   8a2e0:	f003 f9c0 	bl	8d664 <__aeabi_ddiv>
   8a2e4:	f003 fb44 	bl	8d970 <__aeabi_d2iz>
   8a2e8:	4680      	mov	r8, r0
   8a2ea:	f003 f827 	bl	8d33c <__aeabi_i2d>
   8a2ee:	4632      	mov	r2, r6
   8a2f0:	463b      	mov	r3, r7
   8a2f2:	f003 f88d 	bl	8d410 <__aeabi_dmul>
   8a2f6:	f109 0901 	add.w	r9, r9, #1
   8a2fa:	460b      	mov	r3, r1
   8a2fc:	4602      	mov	r2, r0
   8a2fe:	4629      	mov	r1, r5
   8a300:	4620      	mov	r0, r4
   8a302:	f002 fecd 	bl	8d0a0 <__aeabi_dsub>
   8a306:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a30a:	45cb      	cmp	fp, r9
   8a30c:	f80a 3b01 	strb.w	r3, [sl], #1
   8a310:	f000 8355 	beq.w	8a9be <_dtoa_r+0xbde>
   8a314:	2200      	movs	r2, #0
   8a316:	4b0f      	ldr	r3, [pc, #60]	; (8a354 <_dtoa_r+0x574>)
   8a318:	f003 f87a 	bl	8d410 <__aeabi_dmul>
   8a31c:	2200      	movs	r2, #0
   8a31e:	2300      	movs	r3, #0
   8a320:	4604      	mov	r4, r0
   8a322:	460d      	mov	r5, r1
   8a324:	f003 fadc 	bl	8d8e0 <__aeabi_dcmpeq>
   8a328:	2800      	cmp	r0, #0
   8a32a:	d0d5      	beq.n	8a2d8 <_dtoa_r+0x4f8>
   8a32c:	4655      	mov	r5, sl
   8a32e:	9c08      	ldr	r4, [sp, #32]
   8a330:	f8dd a018 	ldr.w	sl, [sp, #24]
   8a334:	9b07      	ldr	r3, [sp, #28]
   8a336:	46a9      	mov	r9, r5
   8a338:	3301      	adds	r3, #1
   8a33a:	9307      	str	r3, [sp, #28]
   8a33c:	e115      	b.n	8a56a <_dtoa_r+0x78a>
   8a33e:	bf00      	nop
   8a340:	0008dc30 	.word	0x0008dc30
   8a344:	0008dc08 	.word	0x0008dc08
   8a348:	3ff00000 	.word	0x3ff00000
   8a34c:	401c0000 	.word	0x401c0000
   8a350:	3fe00000 	.word	0x3fe00000
   8a354:	40240000 	.word	0x40240000
   8a358:	40140000 	.word	0x40140000
   8a35c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8a35e:	2a00      	cmp	r2, #0
   8a360:	d03d      	beq.n	8a3de <_dtoa_r+0x5fe>
   8a362:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8a364:	2a01      	cmp	r2, #1
   8a366:	f340 82bc 	ble.w	8a8e2 <_dtoa_r+0xb02>
   8a36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a36c:	1e5f      	subs	r7, r3, #1
   8a36e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a370:	42bb      	cmp	r3, r7
   8a372:	f2c0 826e 	blt.w	8a852 <_dtoa_r+0xa72>
   8a376:	1bdf      	subs	r7, r3, r7
   8a378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a37a:	2b00      	cmp	r3, #0
   8a37c:	f2c0 8354 	blt.w	8aa28 <_dtoa_r+0xc48>
   8a380:	9a06      	ldr	r2, [sp, #24]
   8a382:	4611      	mov	r1, r2
   8a384:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a386:	4419      	add	r1, r3
   8a388:	4616      	mov	r6, r2
   8a38a:	441a      	add	r2, r3
   8a38c:	9106      	str	r1, [sp, #24]
   8a38e:	920b      	str	r2, [sp, #44]	; 0x2c
   8a390:	2101      	movs	r1, #1
   8a392:	4620      	mov	r0, r4
   8a394:	f001 fe12 	bl	8bfbc <__i2b>
   8a398:	4605      	mov	r5, r0
   8a39a:	e023      	b.n	8a3e4 <_dtoa_r+0x604>
   8a39c:	2301      	movs	r3, #1
   8a39e:	eba8 0505 	sub.w	r5, r8, r5
   8a3a2:	930e      	str	r3, [sp, #56]	; 0x38
   8a3a4:	1e6b      	subs	r3, r5, #1
   8a3a6:	9306      	str	r3, [sp, #24]
   8a3a8:	f57f adc5 	bpl.w	89f36 <_dtoa_r+0x156>
   8a3ac:	f1c5 0301 	rsb	r3, r5, #1
   8a3b0:	930b      	str	r3, [sp, #44]	; 0x2c
   8a3b2:	2300      	movs	r3, #0
   8a3b4:	9306      	str	r3, [sp, #24]
   8a3b6:	e5c0      	b.n	89f3a <_dtoa_r+0x15a>
   8a3b8:	4658      	mov	r0, fp
   8a3ba:	f002 ffbf 	bl	8d33c <__aeabi_i2d>
   8a3be:	4632      	mov	r2, r6
   8a3c0:	463b      	mov	r3, r7
   8a3c2:	f003 fa8d 	bl	8d8e0 <__aeabi_dcmpeq>
   8a3c6:	2800      	cmp	r0, #0
   8a3c8:	f47f ad9c 	bne.w	89f04 <_dtoa_r+0x124>
   8a3cc:	f10b 3bff 	add.w	fp, fp, #4294967295
   8a3d0:	e598      	b.n	89f04 <_dtoa_r+0x124>
   8a3d2:	4bc7      	ldr	r3, [pc, #796]	; (8a6f0 <_dtoa_r+0x910>)
   8a3d4:	9303      	str	r3, [sp, #12]
   8a3d6:	9803      	ldr	r0, [sp, #12]
   8a3d8:	b01b      	add	sp, #108	; 0x6c
   8a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a3de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a3e0:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   8a3e4:	2e00      	cmp	r6, #0
   8a3e6:	dd0c      	ble.n	8a402 <_dtoa_r+0x622>
   8a3e8:	9a06      	ldr	r2, [sp, #24]
   8a3ea:	2a00      	cmp	r2, #0
   8a3ec:	dd09      	ble.n	8a402 <_dtoa_r+0x622>
   8a3ee:	42b2      	cmp	r2, r6
   8a3f0:	4613      	mov	r3, r2
   8a3f2:	bfa8      	it	ge
   8a3f4:	4633      	movge	r3, r6
   8a3f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8a3f8:	1af6      	subs	r6, r6, r3
   8a3fa:	1ac9      	subs	r1, r1, r3
   8a3fc:	1ad3      	subs	r3, r2, r3
   8a3fe:	910b      	str	r1, [sp, #44]	; 0x2c
   8a400:	9306      	str	r3, [sp, #24]
   8a402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a404:	b1d3      	cbz	r3, 8a43c <_dtoa_r+0x65c>
   8a406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a408:	2b00      	cmp	r3, #0
   8a40a:	f000 81a3 	beq.w	8a754 <_dtoa_r+0x974>
   8a40e:	2f00      	cmp	r7, #0
   8a410:	dd10      	ble.n	8a434 <_dtoa_r+0x654>
   8a412:	4629      	mov	r1, r5
   8a414:	463a      	mov	r2, r7
   8a416:	4620      	mov	r0, r4
   8a418:	f001 fe96 	bl	8c148 <__pow5mult>
   8a41c:	4652      	mov	r2, sl
   8a41e:	4601      	mov	r1, r0
   8a420:	4605      	mov	r5, r0
   8a422:	4620      	mov	r0, r4
   8a424:	f001 fde0 	bl	8bfe8 <__multiply>
   8a428:	4603      	mov	r3, r0
   8a42a:	4651      	mov	r1, sl
   8a42c:	4620      	mov	r0, r4
   8a42e:	469a      	mov	sl, r3
   8a430:	f001 fd1c 	bl	8be6c <_Bfree>
   8a434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a436:	1bda      	subs	r2, r3, r7
   8a438:	f040 818d 	bne.w	8a756 <_dtoa_r+0x976>
   8a43c:	2101      	movs	r1, #1
   8a43e:	4620      	mov	r0, r4
   8a440:	f001 fdbc 	bl	8bfbc <__i2b>
   8a444:	f1bb 0f00 	cmp.w	fp, #0
   8a448:	4680      	mov	r8, r0
   8a44a:	f300 80b3 	bgt.w	8a5b4 <_dtoa_r+0x7d4>
   8a44e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a450:	2b01      	cmp	r3, #1
   8a452:	f340 818a 	ble.w	8a76a <_dtoa_r+0x98a>
   8a456:	f04f 0900 	mov.w	r9, #0
   8a45a:	2001      	movs	r0, #1
   8a45c:	f1bb 0f00 	cmp.w	fp, #0
   8a460:	f040 80b4 	bne.w	8a5cc <_dtoa_r+0x7ec>
   8a464:	9a06      	ldr	r2, [sp, #24]
   8a466:	4410      	add	r0, r2
   8a468:	f010 001f 	ands.w	r0, r0, #31
   8a46c:	f000 8092 	beq.w	8a594 <_dtoa_r+0x7b4>
   8a470:	f1c0 0320 	rsb	r3, r0, #32
   8a474:	2b04      	cmp	r3, #4
   8a476:	f340 83f9 	ble.w	8ac6c <_dtoa_r+0xe8c>
   8a47a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a47c:	f1c0 001c 	rsb	r0, r0, #28
   8a480:	4403      	add	r3, r0
   8a482:	4402      	add	r2, r0
   8a484:	930b      	str	r3, [sp, #44]	; 0x2c
   8a486:	4406      	add	r6, r0
   8a488:	9206      	str	r2, [sp, #24]
   8a48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a48c:	2b00      	cmp	r3, #0
   8a48e:	dd05      	ble.n	8a49c <_dtoa_r+0x6bc>
   8a490:	4651      	mov	r1, sl
   8a492:	461a      	mov	r2, r3
   8a494:	4620      	mov	r0, r4
   8a496:	f001 fea3 	bl	8c1e0 <__lshift>
   8a49a:	4682      	mov	sl, r0
   8a49c:	9b06      	ldr	r3, [sp, #24]
   8a49e:	2b00      	cmp	r3, #0
   8a4a0:	dd05      	ble.n	8a4ae <_dtoa_r+0x6ce>
   8a4a2:	4641      	mov	r1, r8
   8a4a4:	461a      	mov	r2, r3
   8a4a6:	4620      	mov	r0, r4
   8a4a8:	f001 fe9a 	bl	8c1e0 <__lshift>
   8a4ac:	4680      	mov	r8, r0
   8a4ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8a4b0:	2b00      	cmp	r3, #0
   8a4b2:	f040 8135 	bne.w	8a720 <_dtoa_r+0x940>
   8a4b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a4b8:	2b00      	cmp	r3, #0
   8a4ba:	f340 811b 	ble.w	8a6f4 <_dtoa_r+0x914>
   8a4be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a4c0:	2b00      	cmp	r3, #0
   8a4c2:	f040 809a 	bne.w	8a5fa <_dtoa_r+0x81a>
   8a4c6:	9b07      	ldr	r3, [sp, #28]
   8a4c8:	3301      	adds	r3, #1
   8a4ca:	9307      	str	r3, [sp, #28]
   8a4cc:	2601      	movs	r6, #1
   8a4ce:	9f03      	ldr	r7, [sp, #12]
   8a4d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8a4d4:	e007      	b.n	8a4e6 <_dtoa_r+0x706>
   8a4d6:	4651      	mov	r1, sl
   8a4d8:	2300      	movs	r3, #0
   8a4da:	220a      	movs	r2, #10
   8a4dc:	4620      	mov	r0, r4
   8a4de:	f001 fccf 	bl	8be80 <__multadd>
   8a4e2:	4682      	mov	sl, r0
   8a4e4:	3601      	adds	r6, #1
   8a4e6:	4641      	mov	r1, r8
   8a4e8:	4650      	mov	r0, sl
   8a4ea:	f7ff fbe9 	bl	89cc0 <quorem>
   8a4ee:	454e      	cmp	r6, r9
   8a4f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8a4f4:	f807 3b01 	strb.w	r3, [r7], #1
   8a4f8:	dbed      	blt.n	8a4d6 <_dtoa_r+0x6f6>
   8a4fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a4fc:	2600      	movs	r6, #0
   8a4fe:	2a00      	cmp	r2, #0
   8a500:	bfcc      	ite	gt
   8a502:	4693      	movgt	fp, r2
   8a504:	f04f 0b01 	movle.w	fp, #1
   8a508:	9a03      	ldr	r2, [sp, #12]
   8a50a:	4493      	add	fp, r2
   8a50c:	4651      	mov	r1, sl
   8a50e:	2201      	movs	r2, #1
   8a510:	4620      	mov	r0, r4
   8a512:	9304      	str	r3, [sp, #16]
   8a514:	f001 fe64 	bl	8c1e0 <__lshift>
   8a518:	4641      	mov	r1, r8
   8a51a:	4682      	mov	sl, r0
   8a51c:	f001 fed4 	bl	8c2c8 <__mcmp>
   8a520:	2800      	cmp	r0, #0
   8a522:	f340 81a8 	ble.w	8a876 <_dtoa_r+0xa96>
   8a526:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8a52a:	9a03      	ldr	r2, [sp, #12]
   8a52c:	f10b 3bff 	add.w	fp, fp, #4294967295
   8a530:	e004      	b.n	8a53c <_dtoa_r+0x75c>
   8a532:	455a      	cmp	r2, fp
   8a534:	f000 81e4 	beq.w	8a900 <_dtoa_r+0xb20>
   8a538:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8a53c:	2b39      	cmp	r3, #57	; 0x39
   8a53e:	f10b 0901 	add.w	r9, fp, #1
   8a542:	d0f6      	beq.n	8a532 <_dtoa_r+0x752>
   8a544:	3301      	adds	r3, #1
   8a546:	f88b 3000 	strb.w	r3, [fp]
   8a54a:	4641      	mov	r1, r8
   8a54c:	4620      	mov	r0, r4
   8a54e:	f001 fc8d 	bl	8be6c <_Bfree>
   8a552:	b155      	cbz	r5, 8a56a <_dtoa_r+0x78a>
   8a554:	b12e      	cbz	r6, 8a562 <_dtoa_r+0x782>
   8a556:	42ae      	cmp	r6, r5
   8a558:	d003      	beq.n	8a562 <_dtoa_r+0x782>
   8a55a:	4631      	mov	r1, r6
   8a55c:	4620      	mov	r0, r4
   8a55e:	f001 fc85 	bl	8be6c <_Bfree>
   8a562:	4629      	mov	r1, r5
   8a564:	4620      	mov	r0, r4
   8a566:	f001 fc81 	bl	8be6c <_Bfree>
   8a56a:	4651      	mov	r1, sl
   8a56c:	4620      	mov	r0, r4
   8a56e:	f001 fc7d 	bl	8be6c <_Bfree>
   8a572:	2300      	movs	r3, #0
   8a574:	f889 3000 	strb.w	r3, [r9]
   8a578:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8a57a:	461a      	mov	r2, r3
   8a57c:	9b07      	ldr	r3, [sp, #28]
   8a57e:	6013      	str	r3, [r2, #0]
   8a580:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8a582:	2b00      	cmp	r3, #0
   8a584:	f43f ac67 	beq.w	89e56 <_dtoa_r+0x76>
   8a588:	9803      	ldr	r0, [sp, #12]
   8a58a:	f8c3 9000 	str.w	r9, [r3]
   8a58e:	b01b      	add	sp, #108	; 0x6c
   8a590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a594:	201c      	movs	r0, #28
   8a596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a598:	4406      	add	r6, r0
   8a59a:	4403      	add	r3, r0
   8a59c:	930b      	str	r3, [sp, #44]	; 0x2c
   8a59e:	9b06      	ldr	r3, [sp, #24]
   8a5a0:	4403      	add	r3, r0
   8a5a2:	9306      	str	r3, [sp, #24]
   8a5a4:	e771      	b.n	8a48a <_dtoa_r+0x6aa>
   8a5a6:	2501      	movs	r5, #1
   8a5a8:	e4de      	b.n	89f68 <_dtoa_r+0x188>
   8a5aa:	f1c0 0020 	rsb	r0, r0, #32
   8a5ae:	fa06 f000 	lsl.w	r0, r6, r0
   8a5b2:	e474      	b.n	89e9e <_dtoa_r+0xbe>
   8a5b4:	4601      	mov	r1, r0
   8a5b6:	465a      	mov	r2, fp
   8a5b8:	4620      	mov	r0, r4
   8a5ba:	f001 fdc5 	bl	8c148 <__pow5mult>
   8a5be:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a5c0:	4680      	mov	r8, r0
   8a5c2:	2b01      	cmp	r3, #1
   8a5c4:	f340 81d1 	ble.w	8a96a <_dtoa_r+0xb8a>
   8a5c8:	f04f 0900 	mov.w	r9, #0
   8a5cc:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8a5d0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8a5d4:	6918      	ldr	r0, [r3, #16]
   8a5d6:	f001 fca1 	bl	8bf1c <__hi0bits>
   8a5da:	f1c0 0020 	rsb	r0, r0, #32
   8a5de:	e741      	b.n	8a464 <_dtoa_r+0x684>
   8a5e0:	4629      	mov	r1, r5
   8a5e2:	2300      	movs	r3, #0
   8a5e4:	220a      	movs	r2, #10
   8a5e6:	4620      	mov	r0, r4
   8a5e8:	f001 fc4a 	bl	8be80 <__multadd>
   8a5ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a5ee:	4605      	mov	r5, r0
   8a5f0:	2b00      	cmp	r3, #0
   8a5f2:	f340 8315 	ble.w	8ac20 <_dtoa_r+0xe40>
   8a5f6:	9707      	str	r7, [sp, #28]
   8a5f8:	930a      	str	r3, [sp, #40]	; 0x28
   8a5fa:	2e00      	cmp	r6, #0
   8a5fc:	f300 8122 	bgt.w	8a844 <_dtoa_r+0xa64>
   8a600:	f1b9 0f00 	cmp.w	r9, #0
   8a604:	f040 81f9 	bne.w	8a9fa <_dtoa_r+0xc1a>
   8a608:	462f      	mov	r7, r5
   8a60a:	9903      	ldr	r1, [sp, #12]
   8a60c:	9b04      	ldr	r3, [sp, #16]
   8a60e:	460e      	mov	r6, r1
   8a610:	f003 0201 	and.w	r2, r3, #1
   8a614:	1e4b      	subs	r3, r1, #1
   8a616:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a618:	920c      	str	r2, [sp, #48]	; 0x30
   8a61a:	430a      	orrs	r2, r1
   8a61c:	920b      	str	r2, [sp, #44]	; 0x2c
   8a61e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a620:	441a      	add	r2, r3
   8a622:	920a      	str	r2, [sp, #40]	; 0x28
   8a624:	4641      	mov	r1, r8
   8a626:	4650      	mov	r0, sl
   8a628:	f7ff fb4a 	bl	89cc0 <quorem>
   8a62c:	4629      	mov	r1, r5
   8a62e:	4683      	mov	fp, r0
   8a630:	4650      	mov	r0, sl
   8a632:	f001 fe49 	bl	8c2c8 <__mcmp>
   8a636:	463a      	mov	r2, r7
   8a638:	4641      	mov	r1, r8
   8a63a:	4681      	mov	r9, r0
   8a63c:	4620      	mov	r0, r4
   8a63e:	f001 fe61 	bl	8c304 <__mdiff>
   8a642:	68c2      	ldr	r2, [r0, #12]
   8a644:	4601      	mov	r1, r0
   8a646:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8a64a:	2a00      	cmp	r2, #0
   8a64c:	d142      	bne.n	8a6d4 <_dtoa_r+0x8f4>
   8a64e:	9006      	str	r0, [sp, #24]
   8a650:	4650      	mov	r0, sl
   8a652:	9308      	str	r3, [sp, #32]
   8a654:	f001 fe38 	bl	8c2c8 <__mcmp>
   8a658:	9906      	ldr	r1, [sp, #24]
   8a65a:	9004      	str	r0, [sp, #16]
   8a65c:	4620      	mov	r0, r4
   8a65e:	f001 fc05 	bl	8be6c <_Bfree>
   8a662:	9a04      	ldr	r2, [sp, #16]
   8a664:	9b08      	ldr	r3, [sp, #32]
   8a666:	b91a      	cbnz	r2, 8a670 <_dtoa_r+0x890>
   8a668:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8a66a:	2900      	cmp	r1, #0
   8a66c:	f000 82cb 	beq.w	8ac06 <_dtoa_r+0xe26>
   8a670:	f1b9 0f00 	cmp.w	r9, #0
   8a674:	f2c0 8185 	blt.w	8a982 <_dtoa_r+0xba2>
   8a678:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a67a:	ea41 0909 	orr.w	r9, r1, r9
   8a67e:	990c      	ldr	r1, [sp, #48]	; 0x30
   8a680:	ea51 0109 	orrs.w	r1, r1, r9
   8a684:	f000 817d 	beq.w	8a982 <_dtoa_r+0xba2>
   8a688:	2a00      	cmp	r2, #0
   8a68a:	f300 81d1 	bgt.w	8aa30 <_dtoa_r+0xc50>
   8a68e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a690:	f106 0901 	add.w	r9, r6, #1
   8a694:	4296      	cmp	r6, r2
   8a696:	46cb      	mov	fp, r9
   8a698:	7033      	strb	r3, [r6, #0]
   8a69a:	f000 81e3 	beq.w	8aa64 <_dtoa_r+0xc84>
   8a69e:	4651      	mov	r1, sl
   8a6a0:	2300      	movs	r3, #0
   8a6a2:	220a      	movs	r2, #10
   8a6a4:	4620      	mov	r0, r4
   8a6a6:	f001 fbeb 	bl	8be80 <__multadd>
   8a6aa:	42bd      	cmp	r5, r7
   8a6ac:	4682      	mov	sl, r0
   8a6ae:	4629      	mov	r1, r5
   8a6b0:	f04f 0300 	mov.w	r3, #0
   8a6b4:	f04f 020a 	mov.w	r2, #10
   8a6b8:	4620      	mov	r0, r4
   8a6ba:	d012      	beq.n	8a6e2 <_dtoa_r+0x902>
   8a6bc:	f001 fbe0 	bl	8be80 <__multadd>
   8a6c0:	4639      	mov	r1, r7
   8a6c2:	4605      	mov	r5, r0
   8a6c4:	2300      	movs	r3, #0
   8a6c6:	220a      	movs	r2, #10
   8a6c8:	4620      	mov	r0, r4
   8a6ca:	f001 fbd9 	bl	8be80 <__multadd>
   8a6ce:	464e      	mov	r6, r9
   8a6d0:	4607      	mov	r7, r0
   8a6d2:	e7a7      	b.n	8a624 <_dtoa_r+0x844>
   8a6d4:	4620      	mov	r0, r4
   8a6d6:	9304      	str	r3, [sp, #16]
   8a6d8:	f001 fbc8 	bl	8be6c <_Bfree>
   8a6dc:	2201      	movs	r2, #1
   8a6de:	9b04      	ldr	r3, [sp, #16]
   8a6e0:	e7c6      	b.n	8a670 <_dtoa_r+0x890>
   8a6e2:	f001 fbcd 	bl	8be80 <__multadd>
   8a6e6:	464e      	mov	r6, r9
   8a6e8:	4605      	mov	r5, r0
   8a6ea:	4607      	mov	r7, r0
   8a6ec:	e79a      	b.n	8a624 <_dtoa_r+0x844>
   8a6ee:	bf00      	nop
   8a6f0:	0008da94 	.word	0x0008da94
   8a6f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a6f6:	2b02      	cmp	r3, #2
   8a6f8:	dc7e      	bgt.n	8a7f8 <_dtoa_r+0xa18>
   8a6fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a6fc:	2b00      	cmp	r3, #0
   8a6fe:	f47f af7c 	bne.w	8a5fa <_dtoa_r+0x81a>
   8a702:	4641      	mov	r1, r8
   8a704:	4650      	mov	r0, sl
   8a706:	f7ff fadb 	bl	89cc0 <quorem>
   8a70a:	9a07      	ldr	r2, [sp, #28]
   8a70c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8a710:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8a714:	3201      	adds	r2, #1
   8a716:	2600      	movs	r6, #0
   8a718:	9207      	str	r2, [sp, #28]
   8a71a:	f80b 3b01 	strb.w	r3, [fp], #1
   8a71e:	e6f5      	b.n	8a50c <_dtoa_r+0x72c>
   8a720:	4641      	mov	r1, r8
   8a722:	4650      	mov	r0, sl
   8a724:	f001 fdd0 	bl	8c2c8 <__mcmp>
   8a728:	2800      	cmp	r0, #0
   8a72a:	f6bf aec4 	bge.w	8a4b6 <_dtoa_r+0x6d6>
   8a72e:	4651      	mov	r1, sl
   8a730:	2300      	movs	r3, #0
   8a732:	220a      	movs	r2, #10
   8a734:	4620      	mov	r0, r4
   8a736:	f001 fba3 	bl	8be80 <__multadd>
   8a73a:	9b07      	ldr	r3, [sp, #28]
   8a73c:	4682      	mov	sl, r0
   8a73e:	1e5f      	subs	r7, r3, #1
   8a740:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a742:	2b00      	cmp	r3, #0
   8a744:	f47f af4c 	bne.w	8a5e0 <_dtoa_r+0x800>
   8a748:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a74a:	2b00      	cmp	r3, #0
   8a74c:	f340 8262 	ble.w	8ac14 <_dtoa_r+0xe34>
   8a750:	930a      	str	r3, [sp, #40]	; 0x28
   8a752:	e6bb      	b.n	8a4cc <_dtoa_r+0x6ec>
   8a754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8a756:	4651      	mov	r1, sl
   8a758:	4620      	mov	r0, r4
   8a75a:	f001 fcf5 	bl	8c148 <__pow5mult>
   8a75e:	4682      	mov	sl, r0
   8a760:	e66c      	b.n	8a43c <_dtoa_r+0x65c>
   8a762:	4bba      	ldr	r3, [pc, #744]	; (8aa4c <_dtoa_r+0xc6c>)
   8a764:	9303      	str	r3, [sp, #12]
   8a766:	3303      	adds	r3, #3
   8a768:	e419      	b.n	89f9e <_dtoa_r+0x1be>
   8a76a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a76e:	2900      	cmp	r1, #0
   8a770:	f47f ae71 	bne.w	8a456 <_dtoa_r+0x676>
   8a774:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a778:	2b00      	cmp	r3, #0
   8a77a:	f47f ae6c 	bne.w	8a456 <_dtoa_r+0x676>
   8a77e:	4bb4      	ldr	r3, [pc, #720]	; (8aa50 <_dtoa_r+0xc70>)
   8a780:	4013      	ands	r3, r2
   8a782:	2b00      	cmp	r3, #0
   8a784:	f000 822a 	beq.w	8abdc <_dtoa_r+0xdfc>
   8a788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a78a:	f04f 0901 	mov.w	r9, #1
   8a78e:	3301      	adds	r3, #1
   8a790:	930b      	str	r3, [sp, #44]	; 0x2c
   8a792:	9b06      	ldr	r3, [sp, #24]
   8a794:	3301      	adds	r3, #1
   8a796:	9306      	str	r3, [sp, #24]
   8a798:	e65f      	b.n	8a45a <_dtoa_r+0x67a>
   8a79a:	2301      	movs	r3, #1
   8a79c:	930c      	str	r3, [sp, #48]	; 0x30
   8a79e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a7a0:	9a07      	ldr	r2, [sp, #28]
   8a7a2:	4413      	add	r3, r2
   8a7a4:	9312      	str	r3, [sp, #72]	; 0x48
   8a7a6:	3301      	adds	r3, #1
   8a7a8:	2b01      	cmp	r3, #1
   8a7aa:	461e      	mov	r6, r3
   8a7ac:	bfb8      	it	lt
   8a7ae:	2601      	movlt	r6, #1
   8a7b0:	930a      	str	r3, [sp, #40]	; 0x28
   8a7b2:	2100      	movs	r1, #0
   8a7b4:	2e17      	cmp	r6, #23
   8a7b6:	6461      	str	r1, [r4, #68]	; 0x44
   8a7b8:	f77f ac43 	ble.w	8a042 <_dtoa_r+0x262>
   8a7bc:	2201      	movs	r2, #1
   8a7be:	2304      	movs	r3, #4
   8a7c0:	005b      	lsls	r3, r3, #1
   8a7c2:	f103 0014 	add.w	r0, r3, #20
   8a7c6:	42b0      	cmp	r0, r6
   8a7c8:	4611      	mov	r1, r2
   8a7ca:	f102 0201 	add.w	r2, r2, #1
   8a7ce:	d9f7      	bls.n	8a7c0 <_dtoa_r+0x9e0>
   8a7d0:	6461      	str	r1, [r4, #68]	; 0x44
   8a7d2:	e436      	b.n	8a042 <_dtoa_r+0x262>
   8a7d4:	2301      	movs	r3, #1
   8a7d6:	930c      	str	r3, [sp, #48]	; 0x30
   8a7d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a7da:	2b00      	cmp	r3, #0
   8a7dc:	dd46      	ble.n	8a86c <_dtoa_r+0xa8c>
   8a7de:	461e      	mov	r6, r3
   8a7e0:	9312      	str	r3, [sp, #72]	; 0x48
   8a7e2:	930a      	str	r3, [sp, #40]	; 0x28
   8a7e4:	e7e5      	b.n	8a7b2 <_dtoa_r+0x9d2>
   8a7e6:	2300      	movs	r3, #0
   8a7e8:	930c      	str	r3, [sp, #48]	; 0x30
   8a7ea:	e7d8      	b.n	8a79e <_dtoa_r+0x9be>
   8a7ec:	2300      	movs	r3, #0
   8a7ee:	930c      	str	r3, [sp, #48]	; 0x30
   8a7f0:	e7f2      	b.n	8a7d8 <_dtoa_r+0x9f8>
   8a7f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a7f4:	9707      	str	r7, [sp, #28]
   8a7f6:	930a      	str	r3, [sp, #40]	; 0x28
   8a7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a7fa:	2b00      	cmp	r3, #0
   8a7fc:	f47f ad40 	bne.w	8a280 <_dtoa_r+0x4a0>
   8a800:	4641      	mov	r1, r8
   8a802:	2205      	movs	r2, #5
   8a804:	4620      	mov	r0, r4
   8a806:	f001 fb3b 	bl	8be80 <__multadd>
   8a80a:	4680      	mov	r8, r0
   8a80c:	4650      	mov	r0, sl
   8a80e:	4641      	mov	r1, r8
   8a810:	f001 fd5a 	bl	8c2c8 <__mcmp>
   8a814:	2800      	cmp	r0, #0
   8a816:	f77f ad33 	ble.w	8a280 <_dtoa_r+0x4a0>
   8a81a:	9f03      	ldr	r7, [sp, #12]
   8a81c:	2231      	movs	r2, #49	; 0x31
   8a81e:	463b      	mov	r3, r7
   8a820:	9e07      	ldr	r6, [sp, #28]
   8a822:	f803 2b01 	strb.w	r2, [r3], #1
   8a826:	3601      	adds	r6, #1
   8a828:	9303      	str	r3, [sp, #12]
   8a82a:	4641      	mov	r1, r8
   8a82c:	4620      	mov	r0, r4
   8a82e:	f001 fb1d 	bl	8be6c <_Bfree>
   8a832:	1c73      	adds	r3, r6, #1
   8a834:	f8dd 900c 	ldr.w	r9, [sp, #12]
   8a838:	9307      	str	r3, [sp, #28]
   8a83a:	9703      	str	r7, [sp, #12]
   8a83c:	2d00      	cmp	r5, #0
   8a83e:	f47f ae90 	bne.w	8a562 <_dtoa_r+0x782>
   8a842:	e692      	b.n	8a56a <_dtoa_r+0x78a>
   8a844:	4629      	mov	r1, r5
   8a846:	4632      	mov	r2, r6
   8a848:	4620      	mov	r0, r4
   8a84a:	f001 fcc9 	bl	8c1e0 <__lshift>
   8a84e:	4605      	mov	r5, r0
   8a850:	e6d6      	b.n	8a600 <_dtoa_r+0x820>
   8a852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a854:	970d      	str	r7, [sp, #52]	; 0x34
   8a856:	1afb      	subs	r3, r7, r3
   8a858:	449b      	add	fp, r3
   8a85a:	2700      	movs	r7, #0
   8a85c:	e58c      	b.n	8a378 <_dtoa_r+0x598>
   8a85e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8a862:	f04f 0902 	mov.w	r9, #2
   8a866:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8a86a:	e417      	b.n	8a09c <_dtoa_r+0x2bc>
   8a86c:	2301      	movs	r3, #1
   8a86e:	9325      	str	r3, [sp, #148]	; 0x94
   8a870:	930a      	str	r3, [sp, #40]	; 0x28
   8a872:	f7ff bbe2 	b.w	8a03a <_dtoa_r+0x25a>
   8a876:	d103      	bne.n	8a880 <_dtoa_r+0xaa0>
   8a878:	9b04      	ldr	r3, [sp, #16]
   8a87a:	07db      	lsls	r3, r3, #31
   8a87c:	f53f ae53 	bmi.w	8a526 <_dtoa_r+0x746>
   8a880:	46d9      	mov	r9, fp
   8a882:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8a886:	2b30      	cmp	r3, #48	; 0x30
   8a888:	d0fa      	beq.n	8a880 <_dtoa_r+0xaa0>
   8a88a:	e65e      	b.n	8a54a <_dtoa_r+0x76a>
   8a88c:	4648      	mov	r0, r9
   8a88e:	f002 fd55 	bl	8d33c <__aeabi_i2d>
   8a892:	4632      	mov	r2, r6
   8a894:	463b      	mov	r3, r7
   8a896:	f002 fdbb 	bl	8d410 <__aeabi_dmul>
   8a89a:	2200      	movs	r2, #0
   8a89c:	4b6d      	ldr	r3, [pc, #436]	; (8aa54 <_dtoa_r+0xc74>)
   8a89e:	f002 fc01 	bl	8d0a4 <__adddf3>
   8a8a2:	4680      	mov	r8, r0
   8a8a4:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a8a8:	4630      	mov	r0, r6
   8a8aa:	4639      	mov	r1, r7
   8a8ac:	2200      	movs	r2, #0
   8a8ae:	4b6a      	ldr	r3, [pc, #424]	; (8aa58 <_dtoa_r+0xc78>)
   8a8b0:	f002 fbf6 	bl	8d0a0 <__aeabi_dsub>
   8a8b4:	4642      	mov	r2, r8
   8a8b6:	464b      	mov	r3, r9
   8a8b8:	4606      	mov	r6, r0
   8a8ba:	460f      	mov	r7, r1
   8a8bc:	f003 f838 	bl	8d930 <__aeabi_dcmpgt>
   8a8c0:	2800      	cmp	r0, #0
   8a8c2:	f040 8187 	bne.w	8abd4 <_dtoa_r+0xdf4>
   8a8c6:	4642      	mov	r2, r8
   8a8c8:	4630      	mov	r0, r6
   8a8ca:	4639      	mov	r1, r7
   8a8cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   8a8d0:	f003 f810 	bl	8d8f4 <__aeabi_dcmplt>
   8a8d4:	2800      	cmp	r0, #0
   8a8d6:	f43f acaa 	beq.w	8a22e <_dtoa_r+0x44e>
   8a8da:	f04f 0800 	mov.w	r8, #0
   8a8de:	4645      	mov	r5, r8
   8a8e0:	e4ce      	b.n	8a280 <_dtoa_r+0x4a0>
   8a8e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8a8e4:	2a00      	cmp	r2, #0
   8a8e6:	f000 80c3 	beq.w	8aa70 <_dtoa_r+0xc90>
   8a8ea:	9a06      	ldr	r2, [sp, #24]
   8a8ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8a8f0:	441a      	add	r2, r3
   8a8f2:	9206      	str	r2, [sp, #24]
   8a8f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a8f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a8f8:	4616      	mov	r6, r2
   8a8fa:	441a      	add	r2, r3
   8a8fc:	920b      	str	r2, [sp, #44]	; 0x2c
   8a8fe:	e547      	b.n	8a390 <_dtoa_r+0x5b0>
   8a900:	2331      	movs	r3, #49	; 0x31
   8a902:	9a07      	ldr	r2, [sp, #28]
   8a904:	3201      	adds	r2, #1
   8a906:	9207      	str	r2, [sp, #28]
   8a908:	9a03      	ldr	r2, [sp, #12]
   8a90a:	7013      	strb	r3, [r2, #0]
   8a90c:	e61d      	b.n	8a54a <_dtoa_r+0x76a>
   8a90e:	f000 814b 	beq.w	8aba8 <_dtoa_r+0xdc8>
   8a912:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a916:	9b07      	ldr	r3, [sp, #28]
   8a918:	425d      	negs	r5, r3
   8a91a:	4b50      	ldr	r3, [pc, #320]	; (8aa5c <_dtoa_r+0xc7c>)
   8a91c:	f005 020f 	and.w	r2, r5, #15
   8a920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a924:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a928:	f002 fd72 	bl	8d410 <__aeabi_dmul>
   8a92c:	112d      	asrs	r5, r5, #4
   8a92e:	4606      	mov	r6, r0
   8a930:	460f      	mov	r7, r1
   8a932:	f000 817d 	beq.w	8ac30 <_dtoa_r+0xe50>
   8a936:	2300      	movs	r3, #0
   8a938:	f04f 0902 	mov.w	r9, #2
   8a93c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8aa60 <_dtoa_r+0xc80>
   8a940:	07ea      	lsls	r2, r5, #31
   8a942:	d505      	bpl.n	8a950 <_dtoa_r+0xb70>
   8a944:	e9d8 2300 	ldrd	r2, r3, [r8]
   8a948:	f002 fd62 	bl	8d410 <__aeabi_dmul>
   8a94c:	2301      	movs	r3, #1
   8a94e:	4499      	add	r9, r3
   8a950:	106d      	asrs	r5, r5, #1
   8a952:	f108 0808 	add.w	r8, r8, #8
   8a956:	d1f3      	bne.n	8a940 <_dtoa_r+0xb60>
   8a958:	2b00      	cmp	r3, #0
   8a95a:	f43f abba 	beq.w	8a0d2 <_dtoa_r+0x2f2>
   8a95e:	4606      	mov	r6, r0
   8a960:	460f      	mov	r7, r1
   8a962:	f7ff bbb6 	b.w	8a0d2 <_dtoa_r+0x2f2>
   8a966:	900e      	str	r0, [sp, #56]	; 0x38
   8a968:	e520      	b.n	8a3ac <_dtoa_r+0x5cc>
   8a96a:	9b04      	ldr	r3, [sp, #16]
   8a96c:	2b00      	cmp	r3, #0
   8a96e:	f47f ae2b 	bne.w	8a5c8 <_dtoa_r+0x7e8>
   8a972:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a976:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a97a:	2b00      	cmp	r3, #0
   8a97c:	f43f aeff 	beq.w	8a77e <_dtoa_r+0x99e>
   8a980:	e622      	b.n	8a5c8 <_dtoa_r+0x7e8>
   8a982:	2a00      	cmp	r2, #0
   8a984:	dd12      	ble.n	8a9ac <_dtoa_r+0xbcc>
   8a986:	4651      	mov	r1, sl
   8a988:	2201      	movs	r2, #1
   8a98a:	4620      	mov	r0, r4
   8a98c:	9304      	str	r3, [sp, #16]
   8a98e:	f001 fc27 	bl	8c1e0 <__lshift>
   8a992:	4641      	mov	r1, r8
   8a994:	4682      	mov	sl, r0
   8a996:	f001 fc97 	bl	8c2c8 <__mcmp>
   8a99a:	2800      	cmp	r0, #0
   8a99c:	9b04      	ldr	r3, [sp, #16]
   8a99e:	f340 812c 	ble.w	8abfa <_dtoa_r+0xe1a>
   8a9a2:	2b39      	cmp	r3, #57	; 0x39
   8a9a4:	f000 810c 	beq.w	8abc0 <_dtoa_r+0xde0>
   8a9a8:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8a9ac:	46b1      	mov	r9, r6
   8a9ae:	f809 3b01 	strb.w	r3, [r9], #1
   8a9b2:	9b07      	ldr	r3, [sp, #28]
   8a9b4:	462e      	mov	r6, r5
   8a9b6:	3301      	adds	r3, #1
   8a9b8:	463d      	mov	r5, r7
   8a9ba:	9307      	str	r3, [sp, #28]
   8a9bc:	e5c5      	b.n	8a54a <_dtoa_r+0x76a>
   8a9be:	4655      	mov	r5, sl
   8a9c0:	9c08      	ldr	r4, [sp, #32]
   8a9c2:	f8dd a018 	ldr.w	sl, [sp, #24]
   8a9c6:	4602      	mov	r2, r0
   8a9c8:	460b      	mov	r3, r1
   8a9ca:	f002 fb6b 	bl	8d0a4 <__adddf3>
   8a9ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a9d2:	4606      	mov	r6, r0
   8a9d4:	460f      	mov	r7, r1
   8a9d6:	f002 ffab 	bl	8d930 <__aeabi_dcmpgt>
   8a9da:	b960      	cbnz	r0, 8a9f6 <_dtoa_r+0xc16>
   8a9dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a9e0:	4630      	mov	r0, r6
   8a9e2:	4639      	mov	r1, r7
   8a9e4:	f002 ff7c 	bl	8d8e0 <__aeabi_dcmpeq>
   8a9e8:	2800      	cmp	r0, #0
   8a9ea:	f43f aca3 	beq.w	8a334 <_dtoa_r+0x554>
   8a9ee:	f018 0f01 	tst.w	r8, #1
   8a9f2:	f43f ac9f 	beq.w	8a334 <_dtoa_r+0x554>
   8a9f6:	9a03      	ldr	r2, [sp, #12]
   8a9f8:	e40a      	b.n	8a210 <_dtoa_r+0x430>
   8a9fa:	4620      	mov	r0, r4
   8a9fc:	6869      	ldr	r1, [r5, #4]
   8a9fe:	f001 fa0f 	bl	8be20 <_Balloc>
   8aa02:	4606      	mov	r6, r0
   8aa04:	2800      	cmp	r0, #0
   8aa06:	f000 8117 	beq.w	8ac38 <_dtoa_r+0xe58>
   8aa0a:	692b      	ldr	r3, [r5, #16]
   8aa0c:	f105 010c 	add.w	r1, r5, #12
   8aa10:	3302      	adds	r3, #2
   8aa12:	009a      	lsls	r2, r3, #2
   8aa14:	300c      	adds	r0, #12
   8aa16:	f7fc fb35 	bl	87084 <memcpy>
   8aa1a:	4631      	mov	r1, r6
   8aa1c:	2201      	movs	r2, #1
   8aa1e:	4620      	mov	r0, r4
   8aa20:	f001 fbde 	bl	8c1e0 <__lshift>
   8aa24:	4607      	mov	r7, r0
   8aa26:	e5f0      	b.n	8a60a <_dtoa_r+0x82a>
   8aa28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8aa2c:	1a9e      	subs	r6, r3, r2
   8aa2e:	e4af      	b.n	8a390 <_dtoa_r+0x5b0>
   8aa30:	2b39      	cmp	r3, #57	; 0x39
   8aa32:	f000 80c5 	beq.w	8abc0 <_dtoa_r+0xde0>
   8aa36:	46b1      	mov	r9, r6
   8aa38:	3301      	adds	r3, #1
   8aa3a:	f809 3b01 	strb.w	r3, [r9], #1
   8aa3e:	9b07      	ldr	r3, [sp, #28]
   8aa40:	462e      	mov	r6, r5
   8aa42:	3301      	adds	r3, #1
   8aa44:	463d      	mov	r5, r7
   8aa46:	9307      	str	r3, [sp, #28]
   8aa48:	e57f      	b.n	8a54a <_dtoa_r+0x76a>
   8aa4a:	bf00      	nop
   8aa4c:	0008dad8 	.word	0x0008dad8
   8aa50:	7ff00000 	.word	0x7ff00000
   8aa54:	401c0000 	.word	0x401c0000
   8aa58:	40140000 	.word	0x40140000
   8aa5c:	0008dc30 	.word	0x0008dc30
   8aa60:	0008dc08 	.word	0x0008dc08
   8aa64:	9a07      	ldr	r2, [sp, #28]
   8aa66:	462e      	mov	r6, r5
   8aa68:	3201      	adds	r2, #1
   8aa6a:	463d      	mov	r5, r7
   8aa6c:	9207      	str	r2, [sp, #28]
   8aa6e:	e54d      	b.n	8a50c <_dtoa_r+0x72c>
   8aa70:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8aa72:	9a06      	ldr	r2, [sp, #24]
   8aa74:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8aa76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8aa7a:	441a      	add	r2, r3
   8aa7c:	9206      	str	r2, [sp, #24]
   8aa7e:	460a      	mov	r2, r1
   8aa80:	441a      	add	r2, r3
   8aa82:	460e      	mov	r6, r1
   8aa84:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8aa86:	920b      	str	r2, [sp, #44]	; 0x2c
   8aa88:	e482      	b.n	8a390 <_dtoa_r+0x5b0>
   8aa8a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8aa8c:	497f      	ldr	r1, [pc, #508]	; (8ac8c <_dtoa_r+0xeac>)
   8aa8e:	4642      	mov	r2, r8
   8aa90:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8aa94:	464b      	mov	r3, r9
   8aa96:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8aa9a:	f002 fcb9 	bl	8d410 <__aeabi_dmul>
   8aa9e:	4602      	mov	r2, r0
   8aaa0:	460b      	mov	r3, r1
   8aaa2:	4630      	mov	r0, r6
   8aaa4:	4639      	mov	r1, r7
   8aaa6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8aaaa:	f002 ff61 	bl	8d970 <__aeabi_d2iz>
   8aaae:	4680      	mov	r8, r0
   8aab0:	f002 fc44 	bl	8d33c <__aeabi_i2d>
   8aab4:	460b      	mov	r3, r1
   8aab6:	4602      	mov	r2, r0
   8aab8:	4639      	mov	r1, r7
   8aaba:	4630      	mov	r0, r6
   8aabc:	f002 faf0 	bl	8d0a0 <__aeabi_dsub>
   8aac0:	4606      	mov	r6, r0
   8aac2:	9810      	ldr	r0, [sp, #64]	; 0x40
   8aac4:	9d03      	ldr	r5, [sp, #12]
   8aac6:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8aaca:	2801      	cmp	r0, #1
   8aacc:	460f      	mov	r7, r1
   8aace:	f805 3b01 	strb.w	r3, [r5], #1
   8aad2:	d01e      	beq.n	8ab12 <_dtoa_r+0xd32>
   8aad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8aad6:	9a03      	ldr	r2, [sp, #12]
   8aad8:	4413      	add	r3, r2
   8aada:	4698      	mov	r8, r3
   8aadc:	2200      	movs	r2, #0
   8aade:	4b6c      	ldr	r3, [pc, #432]	; (8ac90 <_dtoa_r+0xeb0>)
   8aae0:	4630      	mov	r0, r6
   8aae2:	4639      	mov	r1, r7
   8aae4:	f002 fc94 	bl	8d410 <__aeabi_dmul>
   8aae8:	460f      	mov	r7, r1
   8aaea:	4606      	mov	r6, r0
   8aaec:	f002 ff40 	bl	8d970 <__aeabi_d2iz>
   8aaf0:	4681      	mov	r9, r0
   8aaf2:	f002 fc23 	bl	8d33c <__aeabi_i2d>
   8aaf6:	4602      	mov	r2, r0
   8aaf8:	460b      	mov	r3, r1
   8aafa:	4630      	mov	r0, r6
   8aafc:	4639      	mov	r1, r7
   8aafe:	f002 facf 	bl	8d0a0 <__aeabi_dsub>
   8ab02:	f109 0930 	add.w	r9, r9, #48	; 0x30
   8ab06:	f805 9b01 	strb.w	r9, [r5], #1
   8ab0a:	4545      	cmp	r5, r8
   8ab0c:	4606      	mov	r6, r0
   8ab0e:	460f      	mov	r7, r1
   8ab10:	d1e4      	bne.n	8aadc <_dtoa_r+0xcfc>
   8ab12:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   8ab16:	2200      	movs	r2, #0
   8ab18:	4b5e      	ldr	r3, [pc, #376]	; (8ac94 <_dtoa_r+0xeb4>)
   8ab1a:	4640      	mov	r0, r8
   8ab1c:	4649      	mov	r1, r9
   8ab1e:	f002 fac1 	bl	8d0a4 <__adddf3>
   8ab22:	4632      	mov	r2, r6
   8ab24:	463b      	mov	r3, r7
   8ab26:	f002 fee5 	bl	8d8f4 <__aeabi_dcmplt>
   8ab2a:	2800      	cmp	r0, #0
   8ab2c:	d158      	bne.n	8abe0 <_dtoa_r+0xe00>
   8ab2e:	4642      	mov	r2, r8
   8ab30:	464b      	mov	r3, r9
   8ab32:	2000      	movs	r0, #0
   8ab34:	4957      	ldr	r1, [pc, #348]	; (8ac94 <_dtoa_r+0xeb4>)
   8ab36:	f002 fab3 	bl	8d0a0 <__aeabi_dsub>
   8ab3a:	4632      	mov	r2, r6
   8ab3c:	463b      	mov	r3, r7
   8ab3e:	f002 fef7 	bl	8d930 <__aeabi_dcmpgt>
   8ab42:	2800      	cmp	r0, #0
   8ab44:	f43f ab73 	beq.w	8a22e <_dtoa_r+0x44e>
   8ab48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8ab4c:	46a9      	mov	r9, r5
   8ab4e:	2b30      	cmp	r3, #48	; 0x30
   8ab50:	f105 35ff 	add.w	r5, r5, #4294967295
   8ab54:	d0f8      	beq.n	8ab48 <_dtoa_r+0xd68>
   8ab56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8ab58:	3301      	adds	r3, #1
   8ab5a:	9307      	str	r3, [sp, #28]
   8ab5c:	e505      	b.n	8a56a <_dtoa_r+0x78a>
   8ab5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8ab60:	2b00      	cmp	r3, #0
   8ab62:	f43f ae93 	beq.w	8a88c <_dtoa_r+0xaac>
   8ab66:	9d12      	ldr	r5, [sp, #72]	; 0x48
   8ab68:	2d00      	cmp	r5, #0
   8ab6a:	f77f ab60 	ble.w	8a22e <_dtoa_r+0x44e>
   8ab6e:	2200      	movs	r2, #0
   8ab70:	4b47      	ldr	r3, [pc, #284]	; (8ac90 <_dtoa_r+0xeb0>)
   8ab72:	4630      	mov	r0, r6
   8ab74:	4639      	mov	r1, r7
   8ab76:	f002 fc4b 	bl	8d410 <__aeabi_dmul>
   8ab7a:	4606      	mov	r6, r0
   8ab7c:	460f      	mov	r7, r1
   8ab7e:	f109 0001 	add.w	r0, r9, #1
   8ab82:	f002 fbdb 	bl	8d33c <__aeabi_i2d>
   8ab86:	4632      	mov	r2, r6
   8ab88:	463b      	mov	r3, r7
   8ab8a:	f002 fc41 	bl	8d410 <__aeabi_dmul>
   8ab8e:	2200      	movs	r2, #0
   8ab90:	4b41      	ldr	r3, [pc, #260]	; (8ac98 <_dtoa_r+0xeb8>)
   8ab92:	f002 fa87 	bl	8d0a4 <__adddf3>
   8ab96:	9a07      	ldr	r2, [sp, #28]
   8ab98:	4680      	mov	r8, r0
   8ab9a:	3a01      	subs	r2, #1
   8ab9c:	9213      	str	r2, [sp, #76]	; 0x4c
   8ab9e:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8aba2:	9510      	str	r5, [sp, #64]	; 0x40
   8aba4:	f7ff bab6 	b.w	8a114 <_dtoa_r+0x334>
   8aba8:	f04f 0902 	mov.w	r9, #2
   8abac:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   8abb0:	f7ff ba8f 	b.w	8a0d2 <_dtoa_r+0x2f2>
   8abb4:	9b07      	ldr	r3, [sp, #28]
   8abb6:	3301      	adds	r3, #1
   8abb8:	9307      	str	r3, [sp, #28]
   8abba:	2331      	movs	r3, #49	; 0x31
   8abbc:	f7ff bb2f 	b.w	8a21e <_dtoa_r+0x43e>
   8abc0:	46b3      	mov	fp, r6
   8abc2:	2339      	movs	r3, #57	; 0x39
   8abc4:	9a07      	ldr	r2, [sp, #28]
   8abc6:	462e      	mov	r6, r5
   8abc8:	3201      	adds	r2, #1
   8abca:	463d      	mov	r5, r7
   8abcc:	9207      	str	r2, [sp, #28]
   8abce:	f80b 3b01 	strb.w	r3, [fp], #1
   8abd2:	e4aa      	b.n	8a52a <_dtoa_r+0x74a>
   8abd4:	f04f 0800 	mov.w	r8, #0
   8abd8:	4645      	mov	r5, r8
   8abda:	e61e      	b.n	8a81a <_dtoa_r+0xa3a>
   8abdc:	4699      	mov	r9, r3
   8abde:	e43c      	b.n	8a45a <_dtoa_r+0x67a>
   8abe0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8abe2:	9a03      	ldr	r2, [sp, #12]
   8abe4:	9307      	str	r3, [sp, #28]
   8abe6:	f7ff bb13 	b.w	8a210 <_dtoa_r+0x430>
   8abea:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8abee:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8abf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8abf2:	46a9      	mov	r9, r5
   8abf4:	3301      	adds	r3, #1
   8abf6:	9307      	str	r3, [sp, #28]
   8abf8:	e4b7      	b.n	8a56a <_dtoa_r+0x78a>
   8abfa:	f47f aed7 	bne.w	8a9ac <_dtoa_r+0xbcc>
   8abfe:	07da      	lsls	r2, r3, #31
   8ac00:	f57f aed4 	bpl.w	8a9ac <_dtoa_r+0xbcc>
   8ac04:	e6cd      	b.n	8a9a2 <_dtoa_r+0xbc2>
   8ac06:	2b39      	cmp	r3, #57	; 0x39
   8ac08:	d0da      	beq.n	8abc0 <_dtoa_r+0xde0>
   8ac0a:	f1b9 0f00 	cmp.w	r9, #0
   8ac0e:	f73f aecb 	bgt.w	8a9a8 <_dtoa_r+0xbc8>
   8ac12:	e6cb      	b.n	8a9ac <_dtoa_r+0xbcc>
   8ac14:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8ac16:	2b02      	cmp	r3, #2
   8ac18:	f73f adeb 	bgt.w	8a7f2 <_dtoa_r+0xa12>
   8ac1c:	9707      	str	r7, [sp, #28]
   8ac1e:	e570      	b.n	8a702 <_dtoa_r+0x922>
   8ac20:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8ac22:	2b02      	cmp	r3, #2
   8ac24:	f73f ade5 	bgt.w	8a7f2 <_dtoa_r+0xa12>
   8ac28:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8ac2a:	9707      	str	r7, [sp, #28]
   8ac2c:	930a      	str	r3, [sp, #40]	; 0x28
   8ac2e:	e4e4      	b.n	8a5fa <_dtoa_r+0x81a>
   8ac30:	f04f 0902 	mov.w	r9, #2
   8ac34:	f7ff ba4d 	b.w	8a0d2 <_dtoa_r+0x2f2>
   8ac38:	4602      	mov	r2, r0
   8ac3a:	f240 21ea 	movw	r1, #746	; 0x2ea
   8ac3e:	4b17      	ldr	r3, [pc, #92]	; (8ac9c <_dtoa_r+0xebc>)
   8ac40:	4817      	ldr	r0, [pc, #92]	; (8aca0 <_dtoa_r+0xec0>)
   8ac42:	f002 f8a7 	bl	8cd94 <__assert_func>
   8ac46:	4b17      	ldr	r3, [pc, #92]	; (8aca4 <_dtoa_r+0xec4>)
   8ac48:	9303      	str	r3, [sp, #12]
   8ac4a:	f7ff b904 	b.w	89e56 <_dtoa_r+0x76>
   8ac4e:	2500      	movs	r5, #0
   8ac50:	4620      	mov	r0, r4
   8ac52:	4629      	mov	r1, r5
   8ac54:	6465      	str	r5, [r4, #68]	; 0x44
   8ac56:	f001 f8e3 	bl	8be20 <_Balloc>
   8ac5a:	9003      	str	r0, [sp, #12]
   8ac5c:	b958      	cbnz	r0, 8ac76 <_dtoa_r+0xe96>
   8ac5e:	2200      	movs	r2, #0
   8ac60:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8ac64:	4b0d      	ldr	r3, [pc, #52]	; (8ac9c <_dtoa_r+0xebc>)
   8ac66:	480e      	ldr	r0, [pc, #56]	; (8aca0 <_dtoa_r+0xec0>)
   8ac68:	f002 f894 	bl	8cd94 <__assert_func>
   8ac6c:	f43f ac0d 	beq.w	8a48a <_dtoa_r+0x6aa>
   8ac70:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8ac74:	e48f      	b.n	8a596 <_dtoa_r+0x7b6>
   8ac76:	f04f 33ff 	mov.w	r3, #4294967295
   8ac7a:	9312      	str	r3, [sp, #72]	; 0x48
   8ac7c:	930a      	str	r3, [sp, #40]	; 0x28
   8ac7e:	2301      	movs	r3, #1
   8ac80:	9a03      	ldr	r2, [sp, #12]
   8ac82:	9525      	str	r5, [sp, #148]	; 0x94
   8ac84:	6422      	str	r2, [r4, #64]	; 0x40
   8ac86:	930c      	str	r3, [sp, #48]	; 0x30
   8ac88:	f7ff bad1 	b.w	8a22e <_dtoa_r+0x44e>
   8ac8c:	0008dc30 	.word	0x0008dc30
   8ac90:	40240000 	.word	0x40240000
   8ac94:	3fe00000 	.word	0x3fe00000
   8ac98:	401c0000 	.word	0x401c0000
   8ac9c:	0008dae8 	.word	0x0008dae8
   8aca0:	0008dafc 	.word	0x0008dafc
   8aca4:	0008dadc 	.word	0x0008dadc

0008aca8 <__sflush_r>:
   8aca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8acac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8acb0:	460d      	mov	r5, r1
   8acb2:	0711      	lsls	r1, r2, #28
   8acb4:	4680      	mov	r8, r0
   8acb6:	d447      	bmi.n	8ad48 <__sflush_r+0xa0>
   8acb8:	686b      	ldr	r3, [r5, #4]
   8acba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8acbe:	2b00      	cmp	r3, #0
   8acc0:	81aa      	strh	r2, [r5, #12]
   8acc2:	dd5e      	ble.n	8ad82 <__sflush_r+0xda>
   8acc4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8acc6:	2c00      	cmp	r4, #0
   8acc8:	d058      	beq.n	8ad7c <__sflush_r+0xd4>
   8acca:	2300      	movs	r3, #0
   8accc:	f8d8 6000 	ldr.w	r6, [r8]
   8acd0:	f8c8 3000 	str.w	r3, [r8]
   8acd4:	b293      	uxth	r3, r2
   8acd6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8acda:	d156      	bne.n	8ad8a <__sflush_r+0xe2>
   8acdc:	2301      	movs	r3, #1
   8acde:	4640      	mov	r0, r8
   8ace0:	69e9      	ldr	r1, [r5, #28]
   8ace2:	47a0      	blx	r4
   8ace4:	1c43      	adds	r3, r0, #1
   8ace6:	d067      	beq.n	8adb8 <__sflush_r+0x110>
   8ace8:	89ab      	ldrh	r3, [r5, #12]
   8acea:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8acec:	075f      	lsls	r7, r3, #29
   8acee:	d505      	bpl.n	8acfc <__sflush_r+0x54>
   8acf0:	686a      	ldr	r2, [r5, #4]
   8acf2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8acf4:	1a80      	subs	r0, r0, r2
   8acf6:	b10b      	cbz	r3, 8acfc <__sflush_r+0x54>
   8acf8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8acfa:	1ac0      	subs	r0, r0, r3
   8acfc:	4602      	mov	r2, r0
   8acfe:	69e9      	ldr	r1, [r5, #28]
   8ad00:	2300      	movs	r3, #0
   8ad02:	4640      	mov	r0, r8
   8ad04:	47a0      	blx	r4
   8ad06:	1c41      	adds	r1, r0, #1
   8ad08:	d141      	bne.n	8ad8e <__sflush_r+0xe6>
   8ad0a:	f8d8 3000 	ldr.w	r3, [r8]
   8ad0e:	2b00      	cmp	r3, #0
   8ad10:	d03d      	beq.n	8ad8e <__sflush_r+0xe6>
   8ad12:	2b1d      	cmp	r3, #29
   8ad14:	d001      	beq.n	8ad1a <__sflush_r+0x72>
   8ad16:	2b16      	cmp	r3, #22
   8ad18:	d156      	bne.n	8adc8 <__sflush_r+0x120>
   8ad1a:	2100      	movs	r1, #0
   8ad1c:	692a      	ldr	r2, [r5, #16]
   8ad1e:	89ab      	ldrh	r3, [r5, #12]
   8ad20:	e9c5 2100 	strd	r2, r1, [r5]
   8ad24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8ad28:	81ab      	strh	r3, [r5, #12]
   8ad2a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8ad2c:	f8c8 6000 	str.w	r6, [r8]
   8ad30:	b321      	cbz	r1, 8ad7c <__sflush_r+0xd4>
   8ad32:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8ad36:	4299      	cmp	r1, r3
   8ad38:	d002      	beq.n	8ad40 <__sflush_r+0x98>
   8ad3a:	4640      	mov	r0, r8
   8ad3c:	f000 f9cc 	bl	8b0d8 <_free_r>
   8ad40:	2000      	movs	r0, #0
   8ad42:	6328      	str	r0, [r5, #48]	; 0x30
   8ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ad48:	692f      	ldr	r7, [r5, #16]
   8ad4a:	b1bf      	cbz	r7, 8ad7c <__sflush_r+0xd4>
   8ad4c:	b293      	uxth	r3, r2
   8ad4e:	079a      	lsls	r2, r3, #30
   8ad50:	bf18      	it	ne
   8ad52:	2300      	movne	r3, #0
   8ad54:	682e      	ldr	r6, [r5, #0]
   8ad56:	bf08      	it	eq
   8ad58:	696b      	ldreq	r3, [r5, #20]
   8ad5a:	602f      	str	r7, [r5, #0]
   8ad5c:	1bf6      	subs	r6, r6, r7
   8ad5e:	60ab      	str	r3, [r5, #8]
   8ad60:	e00a      	b.n	8ad78 <__sflush_r+0xd0>
   8ad62:	4633      	mov	r3, r6
   8ad64:	463a      	mov	r2, r7
   8ad66:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8ad68:	4640      	mov	r0, r8
   8ad6a:	69e9      	ldr	r1, [r5, #28]
   8ad6c:	47a0      	blx	r4
   8ad6e:	1e04      	subs	r4, r0, #0
   8ad70:	eba6 0604 	sub.w	r6, r6, r4
   8ad74:	4427      	add	r7, r4
   8ad76:	dd17      	ble.n	8ada8 <__sflush_r+0x100>
   8ad78:	2e00      	cmp	r6, #0
   8ad7a:	dcf2      	bgt.n	8ad62 <__sflush_r+0xba>
   8ad7c:	2000      	movs	r0, #0
   8ad7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ad82:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8ad84:	2b00      	cmp	r3, #0
   8ad86:	dc9d      	bgt.n	8acc4 <__sflush_r+0x1c>
   8ad88:	e7f8      	b.n	8ad7c <__sflush_r+0xd4>
   8ad8a:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8ad8c:	e7ae      	b.n	8acec <__sflush_r+0x44>
   8ad8e:	2100      	movs	r1, #0
   8ad90:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8ad94:	692a      	ldr	r2, [r5, #16]
   8ad96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8ad9a:	81ab      	strh	r3, [r5, #12]
   8ad9c:	04db      	lsls	r3, r3, #19
   8ad9e:	e9c5 2100 	strd	r2, r1, [r5]
   8ada2:	d5c2      	bpl.n	8ad2a <__sflush_r+0x82>
   8ada4:	6528      	str	r0, [r5, #80]	; 0x50
   8ada6:	e7c0      	b.n	8ad2a <__sflush_r+0x82>
   8ada8:	89ab      	ldrh	r3, [r5, #12]
   8adaa:	f04f 30ff 	mov.w	r0, #4294967295
   8adae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8adb2:	81ab      	strh	r3, [r5, #12]
   8adb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8adb8:	f8d8 3000 	ldr.w	r3, [r8]
   8adbc:	2b00      	cmp	r3, #0
   8adbe:	d093      	beq.n	8ace8 <__sflush_r+0x40>
   8adc0:	2b1d      	cmp	r3, #29
   8adc2:	d006      	beq.n	8add2 <__sflush_r+0x12a>
   8adc4:	2b16      	cmp	r3, #22
   8adc6:	d004      	beq.n	8add2 <__sflush_r+0x12a>
   8adc8:	89ab      	ldrh	r3, [r5, #12]
   8adca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8adce:	81ab      	strh	r3, [r5, #12]
   8add0:	e7d5      	b.n	8ad7e <__sflush_r+0xd6>
   8add2:	f8c8 6000 	str.w	r6, [r8]
   8add6:	e7d1      	b.n	8ad7c <__sflush_r+0xd4>

0008add8 <_fflush_r>:
   8add8:	b538      	push	{r3, r4, r5, lr}
   8adda:	460c      	mov	r4, r1
   8addc:	4605      	mov	r5, r0
   8adde:	b108      	cbz	r0, 8ade4 <_fflush_r+0xc>
   8ade0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8ade2:	b1a3      	cbz	r3, 8ae0e <_fflush_r+0x36>
   8ade4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8ade8:	b1b8      	cbz	r0, 8ae1a <_fflush_r+0x42>
   8adea:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8adec:	07db      	lsls	r3, r3, #31
   8adee:	d401      	bmi.n	8adf4 <_fflush_r+0x1c>
   8adf0:	0581      	lsls	r1, r0, #22
   8adf2:	d515      	bpl.n	8ae20 <_fflush_r+0x48>
   8adf4:	4628      	mov	r0, r5
   8adf6:	4621      	mov	r1, r4
   8adf8:	f7ff ff56 	bl	8aca8 <__sflush_r>
   8adfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8adfe:	4605      	mov	r5, r0
   8ae00:	07da      	lsls	r2, r3, #31
   8ae02:	d402      	bmi.n	8ae0a <_fflush_r+0x32>
   8ae04:	89a3      	ldrh	r3, [r4, #12]
   8ae06:	059b      	lsls	r3, r3, #22
   8ae08:	d50e      	bpl.n	8ae28 <_fflush_r+0x50>
   8ae0a:	4628      	mov	r0, r5
   8ae0c:	bd38      	pop	{r3, r4, r5, pc}
   8ae0e:	f000 f83f 	bl	8ae90 <__sinit>
   8ae12:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8ae16:	2800      	cmp	r0, #0
   8ae18:	d1e7      	bne.n	8adea <_fflush_r+0x12>
   8ae1a:	4605      	mov	r5, r0
   8ae1c:	4628      	mov	r0, r5
   8ae1e:	bd38      	pop	{r3, r4, r5, pc}
   8ae20:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ae22:	f000 fc07 	bl	8b634 <__retarget_lock_acquire_recursive>
   8ae26:	e7e5      	b.n	8adf4 <_fflush_r+0x1c>
   8ae28:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ae2a:	f000 fc05 	bl	8b638 <__retarget_lock_release_recursive>
   8ae2e:	4628      	mov	r0, r5
   8ae30:	bd38      	pop	{r3, r4, r5, pc}
   8ae32:	bf00      	nop

0008ae34 <std>:
   8ae34:	2300      	movs	r3, #0
   8ae36:	b510      	push	{r4, lr}
   8ae38:	4604      	mov	r4, r0
   8ae3a:	e9c0 3300 	strd	r3, r3, [r0]
   8ae3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8ae42:	8181      	strh	r1, [r0, #12]
   8ae44:	81c2      	strh	r2, [r0, #14]
   8ae46:	4619      	mov	r1, r3
   8ae48:	6083      	str	r3, [r0, #8]
   8ae4a:	6643      	str	r3, [r0, #100]	; 0x64
   8ae4c:	6183      	str	r3, [r0, #24]
   8ae4e:	2208      	movs	r2, #8
   8ae50:	305c      	adds	r0, #92	; 0x5c
   8ae52:	f7fc f98d 	bl	87170 <memset>
   8ae56:	4807      	ldr	r0, [pc, #28]	; (8ae74 <std+0x40>)
   8ae58:	4907      	ldr	r1, [pc, #28]	; (8ae78 <std+0x44>)
   8ae5a:	4a08      	ldr	r2, [pc, #32]	; (8ae7c <std+0x48>)
   8ae5c:	4b08      	ldr	r3, [pc, #32]	; (8ae80 <std+0x4c>)
   8ae5e:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8ae62:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8ae66:	62e3      	str	r3, [r4, #44]	; 0x2c
   8ae68:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8ae6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8ae70:	f000 bbdc 	b.w	8b62c <__retarget_lock_init_recursive>
   8ae74:	0008c98d 	.word	0x0008c98d
   8ae78:	0008c9b1 	.word	0x0008c9b1
   8ae7c:	0008c9f1 	.word	0x0008c9f1
   8ae80:	0008ca11 	.word	0x0008ca11

0008ae84 <_cleanup_r>:
   8ae84:	4901      	ldr	r1, [pc, #4]	; (8ae8c <_cleanup_r+0x8>)
   8ae86:	f000 bba3 	b.w	8b5d0 <_fwalk_reent>
   8ae8a:	bf00      	nop
   8ae8c:	0008ce55 	.word	0x0008ce55

0008ae90 <__sinit>:
   8ae90:	b510      	push	{r4, lr}
   8ae92:	4604      	mov	r4, r0
   8ae94:	4813      	ldr	r0, [pc, #76]	; (8aee4 <__sinit+0x54>)
   8ae96:	f000 fbcd 	bl	8b634 <__retarget_lock_acquire_recursive>
   8ae9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8ae9c:	b9ea      	cbnz	r2, 8aeda <__sinit+0x4a>
   8ae9e:	2003      	movs	r0, #3
   8aea0:	4911      	ldr	r1, [pc, #68]	; (8aee8 <__sinit+0x58>)
   8aea2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8aea6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8aeaa:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8aeae:	63e1      	str	r1, [r4, #60]	; 0x3c
   8aeb0:	6860      	ldr	r0, [r4, #4]
   8aeb2:	2104      	movs	r1, #4
   8aeb4:	f7ff ffbe 	bl	8ae34 <std>
   8aeb8:	68a0      	ldr	r0, [r4, #8]
   8aeba:	2201      	movs	r2, #1
   8aebc:	2109      	movs	r1, #9
   8aebe:	f7ff ffb9 	bl	8ae34 <std>
   8aec2:	68e0      	ldr	r0, [r4, #12]
   8aec4:	2202      	movs	r2, #2
   8aec6:	2112      	movs	r1, #18
   8aec8:	f7ff ffb4 	bl	8ae34 <std>
   8aecc:	2301      	movs	r3, #1
   8aece:	4805      	ldr	r0, [pc, #20]	; (8aee4 <__sinit+0x54>)
   8aed0:	63a3      	str	r3, [r4, #56]	; 0x38
   8aed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8aed6:	f000 bbaf 	b.w	8b638 <__retarget_lock_release_recursive>
   8aeda:	4802      	ldr	r0, [pc, #8]	; (8aee4 <__sinit+0x54>)
   8aedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8aee0:	f000 bbaa 	b.w	8b638 <__retarget_lock_release_recursive>
   8aee4:	20001854 	.word	0x20001854
   8aee8:	0008ae85 	.word	0x0008ae85

0008aeec <__sfp_lock_acquire>:
   8aeec:	4801      	ldr	r0, [pc, #4]	; (8aef4 <__sfp_lock_acquire+0x8>)
   8aeee:	f000 bba1 	b.w	8b634 <__retarget_lock_acquire_recursive>
   8aef2:	bf00      	nop
   8aef4:	20001868 	.word	0x20001868

0008aef8 <__sfp_lock_release>:
   8aef8:	4801      	ldr	r0, [pc, #4]	; (8af00 <__sfp_lock_release+0x8>)
   8aefa:	f000 bb9d 	b.w	8b638 <__retarget_lock_release_recursive>
   8aefe:	bf00      	nop
   8af00:	20001868 	.word	0x20001868

0008af04 <__libc_fini_array>:
   8af04:	b538      	push	{r3, r4, r5, lr}
   8af06:	4b08      	ldr	r3, [pc, #32]	; (8af28 <__libc_fini_array+0x24>)
   8af08:	4d08      	ldr	r5, [pc, #32]	; (8af2c <__libc_fini_array+0x28>)
   8af0a:	1b5b      	subs	r3, r3, r5
   8af0c:	109c      	asrs	r4, r3, #2
   8af0e:	d007      	beq.n	8af20 <__libc_fini_array+0x1c>
   8af10:	3b04      	subs	r3, #4
   8af12:	441d      	add	r5, r3
   8af14:	3c01      	subs	r4, #1
   8af16:	f855 3904 	ldr.w	r3, [r5], #-4
   8af1a:	4798      	blx	r3
   8af1c:	2c00      	cmp	r4, #0
   8af1e:	d1f9      	bne.n	8af14 <__libc_fini_array+0x10>
   8af20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8af24:	f002 bf9a 	b.w	8de5c <_fini>
   8af28:	0008de6c 	.word	0x0008de6c
   8af2c:	0008de68 	.word	0x0008de68

0008af30 <__fputwc>:
   8af30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8af34:	b083      	sub	sp, #12
   8af36:	4607      	mov	r7, r0
   8af38:	4688      	mov	r8, r1
   8af3a:	4614      	mov	r4, r2
   8af3c:	f000 fb6c 	bl	8b618 <__locale_mb_cur_max>
   8af40:	2801      	cmp	r0, #1
   8af42:	d103      	bne.n	8af4c <__fputwc+0x1c>
   8af44:	f108 33ff 	add.w	r3, r8, #4294967295
   8af48:	2bfe      	cmp	r3, #254	; 0xfe
   8af4a:	d933      	bls.n	8afb4 <__fputwc+0x84>
   8af4c:	4642      	mov	r2, r8
   8af4e:	4638      	mov	r0, r7
   8af50:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8af54:	a901      	add	r1, sp, #4
   8af56:	f001 fe95 	bl	8cc84 <_wcrtomb_r>
   8af5a:	1c42      	adds	r2, r0, #1
   8af5c:	4606      	mov	r6, r0
   8af5e:	d02f      	beq.n	8afc0 <__fputwc+0x90>
   8af60:	b318      	cbz	r0, 8afaa <__fputwc+0x7a>
   8af62:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8af66:	2500      	movs	r5, #0
   8af68:	f10d 0904 	add.w	r9, sp, #4
   8af6c:	e008      	b.n	8af80 <__fputwc+0x50>
   8af6e:	6823      	ldr	r3, [r4, #0]
   8af70:	1c5a      	adds	r2, r3, #1
   8af72:	6022      	str	r2, [r4, #0]
   8af74:	7019      	strb	r1, [r3, #0]
   8af76:	3501      	adds	r5, #1
   8af78:	42b5      	cmp	r5, r6
   8af7a:	d216      	bcs.n	8afaa <__fputwc+0x7a>
   8af7c:	f815 1009 	ldrb.w	r1, [r5, r9]
   8af80:	68a3      	ldr	r3, [r4, #8]
   8af82:	3b01      	subs	r3, #1
   8af84:	2b00      	cmp	r3, #0
   8af86:	60a3      	str	r3, [r4, #8]
   8af88:	daf1      	bge.n	8af6e <__fputwc+0x3e>
   8af8a:	69a2      	ldr	r2, [r4, #24]
   8af8c:	4293      	cmp	r3, r2
   8af8e:	db01      	blt.n	8af94 <__fputwc+0x64>
   8af90:	290a      	cmp	r1, #10
   8af92:	d1ec      	bne.n	8af6e <__fputwc+0x3e>
   8af94:	4622      	mov	r2, r4
   8af96:	4638      	mov	r0, r7
   8af98:	f001 fe1c 	bl	8cbd4 <__swbuf_r>
   8af9c:	1c43      	adds	r3, r0, #1
   8af9e:	d1ea      	bne.n	8af76 <__fputwc+0x46>
   8afa0:	4606      	mov	r6, r0
   8afa2:	4630      	mov	r0, r6
   8afa4:	b003      	add	sp, #12
   8afa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8afaa:	4646      	mov	r6, r8
   8afac:	4630      	mov	r0, r6
   8afae:	b003      	add	sp, #12
   8afb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8afb4:	fa5f f188 	uxtb.w	r1, r8
   8afb8:	4606      	mov	r6, r0
   8afba:	f88d 1004 	strb.w	r1, [sp, #4]
   8afbe:	e7d2      	b.n	8af66 <__fputwc+0x36>
   8afc0:	4630      	mov	r0, r6
   8afc2:	89a3      	ldrh	r3, [r4, #12]
   8afc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8afc8:	81a3      	strh	r3, [r4, #12]
   8afca:	b003      	add	sp, #12
   8afcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008afd0 <_fputwc_r>:
   8afd0:	b530      	push	{r4, r5, lr}
   8afd2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8afd4:	4614      	mov	r4, r2
   8afd6:	f013 0f01 	tst.w	r3, #1
   8afda:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8afde:	4605      	mov	r5, r0
   8afe0:	b083      	sub	sp, #12
   8afe2:	b29a      	uxth	r2, r3
   8afe4:	d101      	bne.n	8afea <_fputwc_r+0x1a>
   8afe6:	0598      	lsls	r0, r3, #22
   8afe8:	d51c      	bpl.n	8b024 <_fputwc_r+0x54>
   8afea:	0490      	lsls	r0, r2, #18
   8afec:	d406      	bmi.n	8affc <_fputwc_r+0x2c>
   8afee:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8aff0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8aff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8aff8:	81a3      	strh	r3, [r4, #12]
   8affa:	6662      	str	r2, [r4, #100]	; 0x64
   8affc:	4628      	mov	r0, r5
   8affe:	4622      	mov	r2, r4
   8b000:	f7ff ff96 	bl	8af30 <__fputwc>
   8b004:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b006:	4605      	mov	r5, r0
   8b008:	07da      	lsls	r2, r3, #31
   8b00a:	d402      	bmi.n	8b012 <_fputwc_r+0x42>
   8b00c:	89a3      	ldrh	r3, [r4, #12]
   8b00e:	059b      	lsls	r3, r3, #22
   8b010:	d502      	bpl.n	8b018 <_fputwc_r+0x48>
   8b012:	4628      	mov	r0, r5
   8b014:	b003      	add	sp, #12
   8b016:	bd30      	pop	{r4, r5, pc}
   8b018:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b01a:	f000 fb0d 	bl	8b638 <__retarget_lock_release_recursive>
   8b01e:	4628      	mov	r0, r5
   8b020:	b003      	add	sp, #12
   8b022:	bd30      	pop	{r4, r5, pc}
   8b024:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b026:	9101      	str	r1, [sp, #4]
   8b028:	f000 fb04 	bl	8b634 <__retarget_lock_acquire_recursive>
   8b02c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b030:	9901      	ldr	r1, [sp, #4]
   8b032:	b29a      	uxth	r2, r3
   8b034:	e7d9      	b.n	8afea <_fputwc_r+0x1a>
   8b036:	bf00      	nop

0008b038 <_malloc_trim_r>:
   8b038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b03a:	460c      	mov	r4, r1
   8b03c:	4f23      	ldr	r7, [pc, #140]	; (8b0cc <_malloc_trim_r+0x94>)
   8b03e:	4606      	mov	r6, r0
   8b040:	f000 fee2 	bl	8be08 <__malloc_lock>
   8b044:	68bb      	ldr	r3, [r7, #8]
   8b046:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8b04a:	685d      	ldr	r5, [r3, #4]
   8b04c:	310f      	adds	r1, #15
   8b04e:	f025 0503 	bic.w	r5, r5, #3
   8b052:	194b      	adds	r3, r1, r5
   8b054:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8b058:	f023 030f 	bic.w	r3, r3, #15
   8b05c:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8b060:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8b064:	db07      	blt.n	8b076 <_malloc_trim_r+0x3e>
   8b066:	2100      	movs	r1, #0
   8b068:	4630      	mov	r0, r6
   8b06a:	f001 fc7d 	bl	8c968 <_sbrk_r>
   8b06e:	68bb      	ldr	r3, [r7, #8]
   8b070:	442b      	add	r3, r5
   8b072:	4298      	cmp	r0, r3
   8b074:	d004      	beq.n	8b080 <_malloc_trim_r+0x48>
   8b076:	4630      	mov	r0, r6
   8b078:	f000 fecc 	bl	8be14 <__malloc_unlock>
   8b07c:	2000      	movs	r0, #0
   8b07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b080:	4630      	mov	r0, r6
   8b082:	4261      	negs	r1, r4
   8b084:	f001 fc70 	bl	8c968 <_sbrk_r>
   8b088:	3001      	adds	r0, #1
   8b08a:	d00d      	beq.n	8b0a8 <_malloc_trim_r+0x70>
   8b08c:	4a10      	ldr	r2, [pc, #64]	; (8b0d0 <_malloc_trim_r+0x98>)
   8b08e:	68b9      	ldr	r1, [r7, #8]
   8b090:	6813      	ldr	r3, [r2, #0]
   8b092:	1b2d      	subs	r5, r5, r4
   8b094:	f045 0501 	orr.w	r5, r5, #1
   8b098:	4630      	mov	r0, r6
   8b09a:	1b1b      	subs	r3, r3, r4
   8b09c:	604d      	str	r5, [r1, #4]
   8b09e:	6013      	str	r3, [r2, #0]
   8b0a0:	f000 feb8 	bl	8be14 <__malloc_unlock>
   8b0a4:	2001      	movs	r0, #1
   8b0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b0a8:	2100      	movs	r1, #0
   8b0aa:	4630      	mov	r0, r6
   8b0ac:	f001 fc5c 	bl	8c968 <_sbrk_r>
   8b0b0:	68ba      	ldr	r2, [r7, #8]
   8b0b2:	1a83      	subs	r3, r0, r2
   8b0b4:	2b0f      	cmp	r3, #15
   8b0b6:	ddde      	ble.n	8b076 <_malloc_trim_r+0x3e>
   8b0b8:	4906      	ldr	r1, [pc, #24]	; (8b0d4 <_malloc_trim_r+0x9c>)
   8b0ba:	f043 0301 	orr.w	r3, r3, #1
   8b0be:	680c      	ldr	r4, [r1, #0]
   8b0c0:	4903      	ldr	r1, [pc, #12]	; (8b0d0 <_malloc_trim_r+0x98>)
   8b0c2:	1b00      	subs	r0, r0, r4
   8b0c4:	6053      	str	r3, [r2, #4]
   8b0c6:	6008      	str	r0, [r1, #0]
   8b0c8:	e7d5      	b.n	8b076 <_malloc_trim_r+0x3e>
   8b0ca:	bf00      	nop
   8b0cc:	200009e0 	.word	0x200009e0
   8b0d0:	20001388 	.word	0x20001388
   8b0d4:	20000de8 	.word	0x20000de8

0008b0d8 <_free_r>:
   8b0d8:	2900      	cmp	r1, #0
   8b0da:	d05f      	beq.n	8b19c <_free_r+0xc4>
   8b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b0de:	460c      	mov	r4, r1
   8b0e0:	4606      	mov	r6, r0
   8b0e2:	f000 fe91 	bl	8be08 <__malloc_lock>
   8b0e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b0ea:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8b2e0 <_free_r+0x208>
   8b0ee:	f1a4 0008 	sub.w	r0, r4, #8
   8b0f2:	f023 0101 	bic.w	r1, r3, #1
   8b0f6:	1842      	adds	r2, r0, r1
   8b0f8:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8b0fc:	6855      	ldr	r5, [r2, #4]
   8b0fe:	4297      	cmp	r7, r2
   8b100:	f025 0503 	bic.w	r5, r5, #3
   8b104:	f000 8089 	beq.w	8b21a <_free_r+0x142>
   8b108:	07df      	lsls	r7, r3, #31
   8b10a:	6055      	str	r5, [r2, #4]
   8b10c:	d434      	bmi.n	8b178 <_free_r+0xa0>
   8b10e:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8b112:	f10c 0408 	add.w	r4, ip, #8
   8b116:	1bc0      	subs	r0, r0, r7
   8b118:	6883      	ldr	r3, [r0, #8]
   8b11a:	4439      	add	r1, r7
   8b11c:	42a3      	cmp	r3, r4
   8b11e:	d06a      	beq.n	8b1f6 <_free_r+0x11e>
   8b120:	1957      	adds	r7, r2, r5
   8b122:	687f      	ldr	r7, [r7, #4]
   8b124:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8b128:	f8c3 e00c 	str.w	lr, [r3, #12]
   8b12c:	f8ce 3008 	str.w	r3, [lr, #8]
   8b130:	07fb      	lsls	r3, r7, #31
   8b132:	f140 8097 	bpl.w	8b264 <_free_r+0x18c>
   8b136:	f041 0301 	orr.w	r3, r1, #1
   8b13a:	6043      	str	r3, [r0, #4]
   8b13c:	6011      	str	r1, [r2, #0]
   8b13e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8b142:	d234      	bcs.n	8b1ae <_free_r+0xd6>
   8b144:	2201      	movs	r2, #1
   8b146:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8b14a:	08cb      	lsrs	r3, r1, #3
   8b14c:	0949      	lsrs	r1, r1, #5
   8b14e:	4413      	add	r3, r2
   8b150:	fa02 f101 	lsl.w	r1, r2, r1
   8b154:	4321      	orrs	r1, r4
   8b156:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8b15a:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8b15e:	3a08      	subs	r2, #8
   8b160:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8b164:	f8cc 1004 	str.w	r1, [ip, #4]
   8b168:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8b16c:	60e0      	str	r0, [r4, #12]
   8b16e:	4630      	mov	r0, r6
   8b170:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8b174:	f000 be4e 	b.w	8be14 <__malloc_unlock>
   8b178:	1953      	adds	r3, r2, r5
   8b17a:	685b      	ldr	r3, [r3, #4]
   8b17c:	07df      	lsls	r7, r3, #31
   8b17e:	d40e      	bmi.n	8b19e <_free_r+0xc6>
   8b180:	4429      	add	r1, r5
   8b182:	f10c 0408 	add.w	r4, ip, #8
   8b186:	6893      	ldr	r3, [r2, #8]
   8b188:	42a3      	cmp	r3, r4
   8b18a:	d073      	beq.n	8b274 <_free_r+0x19c>
   8b18c:	68d4      	ldr	r4, [r2, #12]
   8b18e:	f041 0201 	orr.w	r2, r1, #1
   8b192:	60dc      	str	r4, [r3, #12]
   8b194:	60a3      	str	r3, [r4, #8]
   8b196:	6042      	str	r2, [r0, #4]
   8b198:	5041      	str	r1, [r0, r1]
   8b19a:	e7d0      	b.n	8b13e <_free_r+0x66>
   8b19c:	4770      	bx	lr
   8b19e:	f041 0301 	orr.w	r3, r1, #1
   8b1a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8b1a6:	f844 3c04 	str.w	r3, [r4, #-4]
   8b1aa:	6011      	str	r1, [r2, #0]
   8b1ac:	d3ca      	bcc.n	8b144 <_free_r+0x6c>
   8b1ae:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8b1b2:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8b1b6:	d24a      	bcs.n	8b24e <_free_r+0x176>
   8b1b8:	098b      	lsrs	r3, r1, #6
   8b1ba:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8b1be:	00ed      	lsls	r5, r5, #3
   8b1c0:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8b1c4:	f85c 3005 	ldr.w	r3, [ip, r5]
   8b1c8:	eb0c 0405 	add.w	r4, ip, r5
   8b1cc:	3c08      	subs	r4, #8
   8b1ce:	429c      	cmp	r4, r3
   8b1d0:	d059      	beq.n	8b286 <_free_r+0x1ae>
   8b1d2:	685a      	ldr	r2, [r3, #4]
   8b1d4:	f022 0203 	bic.w	r2, r2, #3
   8b1d8:	428a      	cmp	r2, r1
   8b1da:	d902      	bls.n	8b1e2 <_free_r+0x10a>
   8b1dc:	689b      	ldr	r3, [r3, #8]
   8b1de:	429c      	cmp	r4, r3
   8b1e0:	d1f7      	bne.n	8b1d2 <_free_r+0xfa>
   8b1e2:	68dc      	ldr	r4, [r3, #12]
   8b1e4:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8b1e8:	60a0      	str	r0, [r4, #8]
   8b1ea:	60d8      	str	r0, [r3, #12]
   8b1ec:	4630      	mov	r0, r6
   8b1ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8b1f2:	f000 be0f 	b.w	8be14 <__malloc_unlock>
   8b1f6:	1953      	adds	r3, r2, r5
   8b1f8:	685b      	ldr	r3, [r3, #4]
   8b1fa:	07db      	lsls	r3, r3, #31
   8b1fc:	d466      	bmi.n	8b2cc <_free_r+0x1f4>
   8b1fe:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8b202:	4429      	add	r1, r5
   8b204:	f041 0401 	orr.w	r4, r1, #1
   8b208:	60d3      	str	r3, [r2, #12]
   8b20a:	609a      	str	r2, [r3, #8]
   8b20c:	6044      	str	r4, [r0, #4]
   8b20e:	5041      	str	r1, [r0, r1]
   8b210:	4630      	mov	r0, r6
   8b212:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8b216:	f000 bdfd 	b.w	8be14 <__malloc_unlock>
   8b21a:	07db      	lsls	r3, r3, #31
   8b21c:	4429      	add	r1, r5
   8b21e:	d407      	bmi.n	8b230 <_free_r+0x158>
   8b220:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8b224:	1b00      	subs	r0, r0, r4
   8b226:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8b22a:	4421      	add	r1, r4
   8b22c:	60d3      	str	r3, [r2, #12]
   8b22e:	609a      	str	r2, [r3, #8]
   8b230:	4b29      	ldr	r3, [pc, #164]	; (8b2d8 <_free_r+0x200>)
   8b232:	f041 0201 	orr.w	r2, r1, #1
   8b236:	681b      	ldr	r3, [r3, #0]
   8b238:	6042      	str	r2, [r0, #4]
   8b23a:	428b      	cmp	r3, r1
   8b23c:	f8cc 0008 	str.w	r0, [ip, #8]
   8b240:	d895      	bhi.n	8b16e <_free_r+0x96>
   8b242:	4b26      	ldr	r3, [pc, #152]	; (8b2dc <_free_r+0x204>)
   8b244:	4630      	mov	r0, r6
   8b246:	6819      	ldr	r1, [r3, #0]
   8b248:	f7ff fef6 	bl	8b038 <_malloc_trim_r>
   8b24c:	e78f      	b.n	8b16e <_free_r+0x96>
   8b24e:	2b14      	cmp	r3, #20
   8b250:	d90a      	bls.n	8b268 <_free_r+0x190>
   8b252:	2b54      	cmp	r3, #84	; 0x54
   8b254:	d821      	bhi.n	8b29a <_free_r+0x1c2>
   8b256:	0b0b      	lsrs	r3, r1, #12
   8b258:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8b25c:	00ed      	lsls	r5, r5, #3
   8b25e:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8b262:	e7af      	b.n	8b1c4 <_free_r+0xec>
   8b264:	4429      	add	r1, r5
   8b266:	e78e      	b.n	8b186 <_free_r+0xae>
   8b268:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8b26c:	00ed      	lsls	r5, r5, #3
   8b26e:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8b272:	e7a7      	b.n	8b1c4 <_free_r+0xec>
   8b274:	f041 0301 	orr.w	r3, r1, #1
   8b278:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8b27c:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8b280:	6043      	str	r3, [r0, #4]
   8b282:	5041      	str	r1, [r0, r1]
   8b284:	e773      	b.n	8b16e <_free_r+0x96>
   8b286:	2501      	movs	r5, #1
   8b288:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8b28c:	1092      	asrs	r2, r2, #2
   8b28e:	fa05 f202 	lsl.w	r2, r5, r2
   8b292:	430a      	orrs	r2, r1
   8b294:	f8cc 2004 	str.w	r2, [ip, #4]
   8b298:	e7a4      	b.n	8b1e4 <_free_r+0x10c>
   8b29a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b29e:	d806      	bhi.n	8b2ae <_free_r+0x1d6>
   8b2a0:	0bcb      	lsrs	r3, r1, #15
   8b2a2:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8b2a6:	00ed      	lsls	r5, r5, #3
   8b2a8:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8b2ac:	e78a      	b.n	8b1c4 <_free_r+0xec>
   8b2ae:	f240 5254 	movw	r2, #1364	; 0x554
   8b2b2:	4293      	cmp	r3, r2
   8b2b4:	d806      	bhi.n	8b2c4 <_free_r+0x1ec>
   8b2b6:	0c8b      	lsrs	r3, r1, #18
   8b2b8:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8b2bc:	00ed      	lsls	r5, r5, #3
   8b2be:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8b2c2:	e77f      	b.n	8b1c4 <_free_r+0xec>
   8b2c4:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8b2c8:	227e      	movs	r2, #126	; 0x7e
   8b2ca:	e77b      	b.n	8b1c4 <_free_r+0xec>
   8b2cc:	f041 0301 	orr.w	r3, r1, #1
   8b2d0:	6043      	str	r3, [r0, #4]
   8b2d2:	6011      	str	r1, [r2, #0]
   8b2d4:	e74b      	b.n	8b16e <_free_r+0x96>
   8b2d6:	bf00      	nop
   8b2d8:	20000dec 	.word	0x20000dec
   8b2dc:	200013b8 	.word	0x200013b8
   8b2e0:	200009e0 	.word	0x200009e0

0008b2e4 <__sfvwrite_r>:
   8b2e4:	6893      	ldr	r3, [r2, #8]
   8b2e6:	2b00      	cmp	r3, #0
   8b2e8:	f000 80bd 	beq.w	8b466 <__sfvwrite_r+0x182>
   8b2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b2f0:	4690      	mov	r8, r2
   8b2f2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8b2f6:	460c      	mov	r4, r1
   8b2f8:	0711      	lsls	r1, r2, #28
   8b2fa:	4681      	mov	r9, r0
   8b2fc:	b083      	sub	sp, #12
   8b2fe:	b293      	uxth	r3, r2
   8b300:	d527      	bpl.n	8b352 <__sfvwrite_r+0x6e>
   8b302:	6922      	ldr	r2, [r4, #16]
   8b304:	b32a      	cbz	r2, 8b352 <__sfvwrite_r+0x6e>
   8b306:	f013 0702 	ands.w	r7, r3, #2
   8b30a:	f8d8 5000 	ldr.w	r5, [r8]
   8b30e:	d02f      	beq.n	8b370 <__sfvwrite_r+0x8c>
   8b310:	f04f 0b00 	mov.w	fp, #0
   8b314:	465f      	mov	r7, fp
   8b316:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8b5cc <__sfvwrite_r+0x2e8>
   8b31a:	2f00      	cmp	r7, #0
   8b31c:	f000 8089 	beq.w	8b432 <__sfvwrite_r+0x14e>
   8b320:	4557      	cmp	r7, sl
   8b322:	463b      	mov	r3, r7
   8b324:	465a      	mov	r2, fp
   8b326:	bf28      	it	cs
   8b328:	4653      	movcs	r3, sl
   8b32a:	4648      	mov	r0, r9
   8b32c:	69e1      	ldr	r1, [r4, #28]
   8b32e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8b330:	47b0      	blx	r6
   8b332:	2800      	cmp	r0, #0
   8b334:	f340 808d 	ble.w	8b452 <__sfvwrite_r+0x16e>
   8b338:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8b33c:	4483      	add	fp, r0
   8b33e:	1a1b      	subs	r3, r3, r0
   8b340:	1a3f      	subs	r7, r7, r0
   8b342:	f8c8 3008 	str.w	r3, [r8, #8]
   8b346:	2b00      	cmp	r3, #0
   8b348:	d1e7      	bne.n	8b31a <__sfvwrite_r+0x36>
   8b34a:	2000      	movs	r0, #0
   8b34c:	b003      	add	sp, #12
   8b34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b352:	4621      	mov	r1, r4
   8b354:	4648      	mov	r0, r9
   8b356:	f7fe fc3b 	bl	89bd0 <__swsetup_r>
   8b35a:	2800      	cmp	r0, #0
   8b35c:	f040 8132 	bne.w	8b5c4 <__sfvwrite_r+0x2e0>
   8b360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8b364:	f8d8 5000 	ldr.w	r5, [r8]
   8b368:	b293      	uxth	r3, r2
   8b36a:	f013 0702 	ands.w	r7, r3, #2
   8b36e:	d1cf      	bne.n	8b310 <__sfvwrite_r+0x2c>
   8b370:	f013 0a01 	ands.w	sl, r3, #1
   8b374:	d179      	bne.n	8b46a <__sfvwrite_r+0x186>
   8b376:	4656      	mov	r6, sl
   8b378:	2e00      	cmp	r6, #0
   8b37a:	d056      	beq.n	8b42a <__sfvwrite_r+0x146>
   8b37c:	059a      	lsls	r2, r3, #22
   8b37e:	68a7      	ldr	r7, [r4, #8]
   8b380:	f140 80bd 	bpl.w	8b4fe <__sfvwrite_r+0x21a>
   8b384:	42b7      	cmp	r7, r6
   8b386:	46bb      	mov	fp, r7
   8b388:	f200 80d2 	bhi.w	8b530 <__sfvwrite_r+0x24c>
   8b38c:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8b390:	f000 80d0 	beq.w	8b534 <__sfvwrite_r+0x250>
   8b394:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8b398:	6822      	ldr	r2, [r4, #0]
   8b39a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8b39e:	eba2 0b01 	sub.w	fp, r2, r1
   8b3a2:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8b3a6:	f10b 0001 	add.w	r0, fp, #1
   8b3aa:	107f      	asrs	r7, r7, #1
   8b3ac:	4430      	add	r0, r6
   8b3ae:	42b8      	cmp	r0, r7
   8b3b0:	463a      	mov	r2, r7
   8b3b2:	bf84      	itt	hi
   8b3b4:	4607      	movhi	r7, r0
   8b3b6:	463a      	movhi	r2, r7
   8b3b8:	055b      	lsls	r3, r3, #21
   8b3ba:	f140 80e7 	bpl.w	8b58c <__sfvwrite_r+0x2a8>
   8b3be:	4611      	mov	r1, r2
   8b3c0:	4648      	mov	r0, r9
   8b3c2:	f000 f9b3 	bl	8b72c <_malloc_r>
   8b3c6:	2800      	cmp	r0, #0
   8b3c8:	f000 80f6 	beq.w	8b5b8 <__sfvwrite_r+0x2d4>
   8b3cc:	465a      	mov	r2, fp
   8b3ce:	6921      	ldr	r1, [r4, #16]
   8b3d0:	9000      	str	r0, [sp, #0]
   8b3d2:	f7fb fe57 	bl	87084 <memcpy>
   8b3d6:	89a2      	ldrh	r2, [r4, #12]
   8b3d8:	9b00      	ldr	r3, [sp, #0]
   8b3da:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8b3de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8b3e2:	81a2      	strh	r2, [r4, #12]
   8b3e4:	eba7 020b 	sub.w	r2, r7, fp
   8b3e8:	eb03 000b 	add.w	r0, r3, fp
   8b3ec:	6167      	str	r7, [r4, #20]
   8b3ee:	46b3      	mov	fp, r6
   8b3f0:	4637      	mov	r7, r6
   8b3f2:	6123      	str	r3, [r4, #16]
   8b3f4:	6020      	str	r0, [r4, #0]
   8b3f6:	60a2      	str	r2, [r4, #8]
   8b3f8:	465a      	mov	r2, fp
   8b3fa:	4651      	mov	r1, sl
   8b3fc:	f000 fc9a 	bl	8bd34 <memmove>
   8b400:	68a2      	ldr	r2, [r4, #8]
   8b402:	6823      	ldr	r3, [r4, #0]
   8b404:	1bd2      	subs	r2, r2, r7
   8b406:	4637      	mov	r7, r6
   8b408:	2600      	movs	r6, #0
   8b40a:	445b      	add	r3, fp
   8b40c:	60a2      	str	r2, [r4, #8]
   8b40e:	6023      	str	r3, [r4, #0]
   8b410:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8b414:	44ba      	add	sl, r7
   8b416:	1bd7      	subs	r7, r2, r7
   8b418:	f8c8 7008 	str.w	r7, [r8, #8]
   8b41c:	2f00      	cmp	r7, #0
   8b41e:	d094      	beq.n	8b34a <__sfvwrite_r+0x66>
   8b420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b424:	b29b      	uxth	r3, r3
   8b426:	2e00      	cmp	r6, #0
   8b428:	d1a8      	bne.n	8b37c <__sfvwrite_r+0x98>
   8b42a:	e9d5 a600 	ldrd	sl, r6, [r5]
   8b42e:	3508      	adds	r5, #8
   8b430:	e7a2      	b.n	8b378 <__sfvwrite_r+0x94>
   8b432:	e9d5 b700 	ldrd	fp, r7, [r5]
   8b436:	3508      	adds	r5, #8
   8b438:	e76f      	b.n	8b31a <__sfvwrite_r+0x36>
   8b43a:	4629      	mov	r1, r5
   8b43c:	465a      	mov	r2, fp
   8b43e:	f000 fc79 	bl	8bd34 <memmove>
   8b442:	6823      	ldr	r3, [r4, #0]
   8b444:	4621      	mov	r1, r4
   8b446:	445b      	add	r3, fp
   8b448:	4648      	mov	r0, r9
   8b44a:	6023      	str	r3, [r4, #0]
   8b44c:	f7ff fcc4 	bl	8add8 <_fflush_r>
   8b450:	b358      	cbz	r0, 8b4aa <__sfvwrite_r+0x1c6>
   8b452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b456:	f04f 30ff 	mov.w	r0, #4294967295
   8b45a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b45e:	81a3      	strh	r3, [r4, #12]
   8b460:	b003      	add	sp, #12
   8b462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b466:	2000      	movs	r0, #0
   8b468:	4770      	bx	lr
   8b46a:	463e      	mov	r6, r7
   8b46c:	46aa      	mov	sl, r5
   8b46e:	4638      	mov	r0, r7
   8b470:	463d      	mov	r5, r7
   8b472:	9700      	str	r7, [sp, #0]
   8b474:	b36e      	cbz	r6, 8b4d2 <__sfvwrite_r+0x1ee>
   8b476:	2800      	cmp	r0, #0
   8b478:	d035      	beq.n	8b4e6 <__sfvwrite_r+0x202>
   8b47a:	9a00      	ldr	r2, [sp, #0]
   8b47c:	6820      	ldr	r0, [r4, #0]
   8b47e:	6921      	ldr	r1, [r4, #16]
   8b480:	42b2      	cmp	r2, r6
   8b482:	bf28      	it	cs
   8b484:	4632      	movcs	r2, r6
   8b486:	4288      	cmp	r0, r1
   8b488:	6963      	ldr	r3, [r4, #20]
   8b48a:	d904      	bls.n	8b496 <__sfvwrite_r+0x1b2>
   8b48c:	68a1      	ldr	r1, [r4, #8]
   8b48e:	eb03 0b01 	add.w	fp, r3, r1
   8b492:	455a      	cmp	r2, fp
   8b494:	dcd1      	bgt.n	8b43a <__sfvwrite_r+0x156>
   8b496:	4293      	cmp	r3, r2
   8b498:	dc6b      	bgt.n	8b572 <__sfvwrite_r+0x28e>
   8b49a:	462a      	mov	r2, r5
   8b49c:	4648      	mov	r0, r9
   8b49e:	69e1      	ldr	r1, [r4, #28]
   8b4a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8b4a2:	47b8      	blx	r7
   8b4a4:	f1b0 0b00 	subs.w	fp, r0, #0
   8b4a8:	ddd3      	ble.n	8b452 <__sfvwrite_r+0x16e>
   8b4aa:	9b00      	ldr	r3, [sp, #0]
   8b4ac:	ebb3 030b 	subs.w	r3, r3, fp
   8b4b0:	9300      	str	r3, [sp, #0]
   8b4b2:	d057      	beq.n	8b564 <__sfvwrite_r+0x280>
   8b4b4:	2001      	movs	r0, #1
   8b4b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8b4ba:	445d      	add	r5, fp
   8b4bc:	eba3 030b 	sub.w	r3, r3, fp
   8b4c0:	eba6 060b 	sub.w	r6, r6, fp
   8b4c4:	f8c8 3008 	str.w	r3, [r8, #8]
   8b4c8:	2b00      	cmp	r3, #0
   8b4ca:	f43f af3e 	beq.w	8b34a <__sfvwrite_r+0x66>
   8b4ce:	2e00      	cmp	r6, #0
   8b4d0:	d1d1      	bne.n	8b476 <__sfvwrite_r+0x192>
   8b4d2:	f10a 0308 	add.w	r3, sl, #8
   8b4d6:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8b4da:	469a      	mov	sl, r3
   8b4dc:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8b4e0:	3308      	adds	r3, #8
   8b4e2:	2e00      	cmp	r6, #0
   8b4e4:	d0f7      	beq.n	8b4d6 <__sfvwrite_r+0x1f2>
   8b4e6:	4632      	mov	r2, r6
   8b4e8:	210a      	movs	r1, #10
   8b4ea:	4628      	mov	r0, r5
   8b4ec:	f000 fbe2 	bl	8bcb4 <memchr>
   8b4f0:	2800      	cmp	r0, #0
   8b4f2:	d05e      	beq.n	8b5b2 <__sfvwrite_r+0x2ce>
   8b4f4:	3001      	adds	r0, #1
   8b4f6:	1b43      	subs	r3, r0, r5
   8b4f8:	461a      	mov	r2, r3
   8b4fa:	9300      	str	r3, [sp, #0]
   8b4fc:	e7be      	b.n	8b47c <__sfvwrite_r+0x198>
   8b4fe:	6820      	ldr	r0, [r4, #0]
   8b500:	6923      	ldr	r3, [r4, #16]
   8b502:	4298      	cmp	r0, r3
   8b504:	d818      	bhi.n	8b538 <__sfvwrite_r+0x254>
   8b506:	6962      	ldr	r2, [r4, #20]
   8b508:	42b2      	cmp	r2, r6
   8b50a:	d815      	bhi.n	8b538 <__sfvwrite_r+0x254>
   8b50c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8b510:	42b3      	cmp	r3, r6
   8b512:	bf28      	it	cs
   8b514:	4633      	movcs	r3, r6
   8b516:	fb93 f3f2 	sdiv	r3, r3, r2
   8b51a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8b51c:	fb02 f303 	mul.w	r3, r2, r3
   8b520:	4648      	mov	r0, r9
   8b522:	4652      	mov	r2, sl
   8b524:	69e1      	ldr	r1, [r4, #28]
   8b526:	47b8      	blx	r7
   8b528:	1e07      	subs	r7, r0, #0
   8b52a:	dd92      	ble.n	8b452 <__sfvwrite_r+0x16e>
   8b52c:	1bf6      	subs	r6, r6, r7
   8b52e:	e76f      	b.n	8b410 <__sfvwrite_r+0x12c>
   8b530:	4637      	mov	r7, r6
   8b532:	46b3      	mov	fp, r6
   8b534:	6820      	ldr	r0, [r4, #0]
   8b536:	e75f      	b.n	8b3f8 <__sfvwrite_r+0x114>
   8b538:	42b7      	cmp	r7, r6
   8b53a:	bf28      	it	cs
   8b53c:	4637      	movcs	r7, r6
   8b53e:	4651      	mov	r1, sl
   8b540:	463a      	mov	r2, r7
   8b542:	f000 fbf7 	bl	8bd34 <memmove>
   8b546:	68a3      	ldr	r3, [r4, #8]
   8b548:	6822      	ldr	r2, [r4, #0]
   8b54a:	1bdb      	subs	r3, r3, r7
   8b54c:	443a      	add	r2, r7
   8b54e:	60a3      	str	r3, [r4, #8]
   8b550:	6022      	str	r2, [r4, #0]
   8b552:	2b00      	cmp	r3, #0
   8b554:	d1ea      	bne.n	8b52c <__sfvwrite_r+0x248>
   8b556:	4621      	mov	r1, r4
   8b558:	4648      	mov	r0, r9
   8b55a:	f7ff fc3d 	bl	8add8 <_fflush_r>
   8b55e:	2800      	cmp	r0, #0
   8b560:	d0e4      	beq.n	8b52c <__sfvwrite_r+0x248>
   8b562:	e776      	b.n	8b452 <__sfvwrite_r+0x16e>
   8b564:	4621      	mov	r1, r4
   8b566:	4648      	mov	r0, r9
   8b568:	f7ff fc36 	bl	8add8 <_fflush_r>
   8b56c:	2800      	cmp	r0, #0
   8b56e:	d0a2      	beq.n	8b4b6 <__sfvwrite_r+0x1d2>
   8b570:	e76f      	b.n	8b452 <__sfvwrite_r+0x16e>
   8b572:	4629      	mov	r1, r5
   8b574:	4693      	mov	fp, r2
   8b576:	9201      	str	r2, [sp, #4]
   8b578:	f000 fbdc 	bl	8bd34 <memmove>
   8b57c:	68a1      	ldr	r1, [r4, #8]
   8b57e:	6823      	ldr	r3, [r4, #0]
   8b580:	9a01      	ldr	r2, [sp, #4]
   8b582:	1a89      	subs	r1, r1, r2
   8b584:	441a      	add	r2, r3
   8b586:	60a1      	str	r1, [r4, #8]
   8b588:	6022      	str	r2, [r4, #0]
   8b58a:	e78e      	b.n	8b4aa <__sfvwrite_r+0x1c6>
   8b58c:	4648      	mov	r0, r9
   8b58e:	f000 ffc3 	bl	8c518 <_realloc_r>
   8b592:	4603      	mov	r3, r0
   8b594:	2800      	cmp	r0, #0
   8b596:	f47f af25 	bne.w	8b3e4 <__sfvwrite_r+0x100>
   8b59a:	4648      	mov	r0, r9
   8b59c:	6921      	ldr	r1, [r4, #16]
   8b59e:	f7ff fd9b 	bl	8b0d8 <_free_r>
   8b5a2:	220c      	movs	r2, #12
   8b5a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b5a8:	f8c9 2000 	str.w	r2, [r9]
   8b5ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8b5b0:	e751      	b.n	8b456 <__sfvwrite_r+0x172>
   8b5b2:	1c72      	adds	r2, r6, #1
   8b5b4:	9200      	str	r2, [sp, #0]
   8b5b6:	e761      	b.n	8b47c <__sfvwrite_r+0x198>
   8b5b8:	220c      	movs	r2, #12
   8b5ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b5be:	f8c9 2000 	str.w	r2, [r9]
   8b5c2:	e748      	b.n	8b456 <__sfvwrite_r+0x172>
   8b5c4:	f04f 30ff 	mov.w	r0, #4294967295
   8b5c8:	e6c0      	b.n	8b34c <__sfvwrite_r+0x68>
   8b5ca:	bf00      	nop
   8b5cc:	7ffffc00 	.word	0x7ffffc00

0008b5d0 <_fwalk_reent>:
   8b5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b5d4:	4607      	mov	r7, r0
   8b5d6:	4688      	mov	r8, r1
   8b5d8:	f04f 0900 	mov.w	r9, #0
   8b5dc:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8b5e0:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8b5e4:	3d01      	subs	r5, #1
   8b5e6:	d410      	bmi.n	8b60a <_fwalk_reent+0x3a>
   8b5e8:	89a3      	ldrh	r3, [r4, #12]
   8b5ea:	3d01      	subs	r5, #1
   8b5ec:	2b01      	cmp	r3, #1
   8b5ee:	d908      	bls.n	8b602 <_fwalk_reent+0x32>
   8b5f0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8b5f4:	3301      	adds	r3, #1
   8b5f6:	d004      	beq.n	8b602 <_fwalk_reent+0x32>
   8b5f8:	4621      	mov	r1, r4
   8b5fa:	4638      	mov	r0, r7
   8b5fc:	47c0      	blx	r8
   8b5fe:	ea49 0900 	orr.w	r9, r9, r0
   8b602:	1c6b      	adds	r3, r5, #1
   8b604:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8b608:	d1ee      	bne.n	8b5e8 <_fwalk_reent+0x18>
   8b60a:	6836      	ldr	r6, [r6, #0]
   8b60c:	2e00      	cmp	r6, #0
   8b60e:	d1e7      	bne.n	8b5e0 <_fwalk_reent+0x10>
   8b610:	4648      	mov	r0, r9
   8b612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b616:	bf00      	nop

0008b618 <__locale_mb_cur_max>:
   8b618:	4b01      	ldr	r3, [pc, #4]	; (8b620 <__locale_mb_cur_max+0x8>)
   8b61a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8b61e:	4770      	bx	lr
   8b620:	20000874 	.word	0x20000874

0008b624 <_localeconv_r>:
   8b624:	4800      	ldr	r0, [pc, #0]	; (8b628 <_localeconv_r+0x4>)
   8b626:	4770      	bx	lr
   8b628:	20000964 	.word	0x20000964

0008b62c <__retarget_lock_init_recursive>:
   8b62c:	4770      	bx	lr
   8b62e:	bf00      	nop

0008b630 <__retarget_lock_close_recursive>:
   8b630:	4770      	bx	lr
   8b632:	bf00      	nop

0008b634 <__retarget_lock_acquire_recursive>:
   8b634:	4770      	bx	lr
   8b636:	bf00      	nop

0008b638 <__retarget_lock_release_recursive>:
   8b638:	4770      	bx	lr
   8b63a:	bf00      	nop

0008b63c <__swhatbuf_r>:
   8b63c:	b570      	push	{r4, r5, r6, lr}
   8b63e:	460c      	mov	r4, r1
   8b640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b644:	4615      	mov	r5, r2
   8b646:	2900      	cmp	r1, #0
   8b648:	461e      	mov	r6, r3
   8b64a:	b096      	sub	sp, #88	; 0x58
   8b64c:	db14      	blt.n	8b678 <__swhatbuf_r+0x3c>
   8b64e:	466a      	mov	r2, sp
   8b650:	f001 fc7a 	bl	8cf48 <_fstat_r>
   8b654:	2800      	cmp	r0, #0
   8b656:	db0f      	blt.n	8b678 <__swhatbuf_r+0x3c>
   8b658:	9a01      	ldr	r2, [sp, #4]
   8b65a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8b65e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8b662:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8b666:	fab2 f282 	clz	r2, r2
   8b66a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8b66e:	0952      	lsrs	r2, r2, #5
   8b670:	6032      	str	r2, [r6, #0]
   8b672:	602b      	str	r3, [r5, #0]
   8b674:	b016      	add	sp, #88	; 0x58
   8b676:	bd70      	pop	{r4, r5, r6, pc}
   8b678:	2300      	movs	r3, #0
   8b67a:	89a1      	ldrh	r1, [r4, #12]
   8b67c:	6033      	str	r3, [r6, #0]
   8b67e:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8b682:	d004      	beq.n	8b68e <__swhatbuf_r+0x52>
   8b684:	2240      	movs	r2, #64	; 0x40
   8b686:	4618      	mov	r0, r3
   8b688:	602a      	str	r2, [r5, #0]
   8b68a:	b016      	add	sp, #88	; 0x58
   8b68c:	bd70      	pop	{r4, r5, r6, pc}
   8b68e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8b692:	602b      	str	r3, [r5, #0]
   8b694:	b016      	add	sp, #88	; 0x58
   8b696:	bd70      	pop	{r4, r5, r6, pc}

0008b698 <__smakebuf_r>:
   8b698:	b570      	push	{r4, r5, r6, lr}
   8b69a:	898b      	ldrh	r3, [r1, #12]
   8b69c:	460c      	mov	r4, r1
   8b69e:	079d      	lsls	r5, r3, #30
   8b6a0:	b082      	sub	sp, #8
   8b6a2:	d507      	bpl.n	8b6b4 <__smakebuf_r+0x1c>
   8b6a4:	2201      	movs	r2, #1
   8b6a6:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8b6aa:	614a      	str	r2, [r1, #20]
   8b6ac:	600b      	str	r3, [r1, #0]
   8b6ae:	610b      	str	r3, [r1, #16]
   8b6b0:	b002      	add	sp, #8
   8b6b2:	bd70      	pop	{r4, r5, r6, pc}
   8b6b4:	ab01      	add	r3, sp, #4
   8b6b6:	466a      	mov	r2, sp
   8b6b8:	4606      	mov	r6, r0
   8b6ba:	f7ff ffbf 	bl	8b63c <__swhatbuf_r>
   8b6be:	9900      	ldr	r1, [sp, #0]
   8b6c0:	4605      	mov	r5, r0
   8b6c2:	4630      	mov	r0, r6
   8b6c4:	f000 f832 	bl	8b72c <_malloc_r>
   8b6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b6cc:	b170      	cbz	r0, 8b6ec <__smakebuf_r+0x54>
   8b6ce:	4916      	ldr	r1, [pc, #88]	; (8b728 <__smakebuf_r+0x90>)
   8b6d0:	9a00      	ldr	r2, [sp, #0]
   8b6d2:	63f1      	str	r1, [r6, #60]	; 0x3c
   8b6d4:	9901      	ldr	r1, [sp, #4]
   8b6d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8b6da:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8b6de:	81a3      	strh	r3, [r4, #12]
   8b6e0:	6020      	str	r0, [r4, #0]
   8b6e2:	b989      	cbnz	r1, 8b708 <__smakebuf_r+0x70>
   8b6e4:	432b      	orrs	r3, r5
   8b6e6:	81a3      	strh	r3, [r4, #12]
   8b6e8:	b002      	add	sp, #8
   8b6ea:	bd70      	pop	{r4, r5, r6, pc}
   8b6ec:	059a      	lsls	r2, r3, #22
   8b6ee:	d4df      	bmi.n	8b6b0 <__smakebuf_r+0x18>
   8b6f0:	2101      	movs	r1, #1
   8b6f2:	f023 0303 	bic.w	r3, r3, #3
   8b6f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8b6fa:	f043 0302 	orr.w	r3, r3, #2
   8b6fe:	81a3      	strh	r3, [r4, #12]
   8b700:	6161      	str	r1, [r4, #20]
   8b702:	6022      	str	r2, [r4, #0]
   8b704:	6122      	str	r2, [r4, #16]
   8b706:	e7d3      	b.n	8b6b0 <__smakebuf_r+0x18>
   8b708:	4630      	mov	r0, r6
   8b70a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b70e:	f001 fc31 	bl	8cf74 <_isatty_r>
   8b712:	b910      	cbnz	r0, 8b71a <__smakebuf_r+0x82>
   8b714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b718:	e7e4      	b.n	8b6e4 <__smakebuf_r+0x4c>
   8b71a:	89a2      	ldrh	r2, [r4, #12]
   8b71c:	f022 0203 	bic.w	r2, r2, #3
   8b720:	f042 0201 	orr.w	r2, r2, #1
   8b724:	b213      	sxth	r3, r2
   8b726:	e7dd      	b.n	8b6e4 <__smakebuf_r+0x4c>
   8b728:	0008ae85 	.word	0x0008ae85

0008b72c <_malloc_r>:
   8b72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b730:	f101 050b 	add.w	r5, r1, #11
   8b734:	2d16      	cmp	r5, #22
   8b736:	4606      	mov	r6, r0
   8b738:	b083      	sub	sp, #12
   8b73a:	d824      	bhi.n	8b786 <_malloc_r+0x5a>
   8b73c:	2910      	cmp	r1, #16
   8b73e:	f200 80b6 	bhi.w	8b8ae <_malloc_r+0x182>
   8b742:	f000 fb61 	bl	8be08 <__malloc_lock>
   8b746:	2510      	movs	r5, #16
   8b748:	2002      	movs	r0, #2
   8b74a:	2318      	movs	r3, #24
   8b74c:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8bc38 <_malloc_r+0x50c>
   8b750:	4443      	add	r3, r8
   8b752:	685c      	ldr	r4, [r3, #4]
   8b754:	f1a3 0208 	sub.w	r2, r3, #8
   8b758:	4294      	cmp	r4, r2
   8b75a:	f000 80b4 	beq.w	8b8c6 <_malloc_r+0x19a>
   8b75e:	6863      	ldr	r3, [r4, #4]
   8b760:	68e1      	ldr	r1, [r4, #12]
   8b762:	f023 0303 	bic.w	r3, r3, #3
   8b766:	4423      	add	r3, r4
   8b768:	685a      	ldr	r2, [r3, #4]
   8b76a:	68a5      	ldr	r5, [r4, #8]
   8b76c:	f042 0201 	orr.w	r2, r2, #1
   8b770:	60e9      	str	r1, [r5, #12]
   8b772:	4630      	mov	r0, r6
   8b774:	608d      	str	r5, [r1, #8]
   8b776:	3408      	adds	r4, #8
   8b778:	605a      	str	r2, [r3, #4]
   8b77a:	f000 fb4b 	bl	8be14 <__malloc_unlock>
   8b77e:	4620      	mov	r0, r4
   8b780:	b003      	add	sp, #12
   8b782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b786:	f035 0507 	bics.w	r5, r5, #7
   8b78a:	f100 8090 	bmi.w	8b8ae <_malloc_r+0x182>
   8b78e:	42a9      	cmp	r1, r5
   8b790:	f200 808d 	bhi.w	8b8ae <_malloc_r+0x182>
   8b794:	f000 fb38 	bl	8be08 <__malloc_lock>
   8b798:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8b79c:	f0c0 8185 	bcc.w	8baaa <_malloc_r+0x37e>
   8b7a0:	0a6b      	lsrs	r3, r5, #9
   8b7a2:	f000 808b 	beq.w	8b8bc <_malloc_r+0x190>
   8b7a6:	2b04      	cmp	r3, #4
   8b7a8:	f200 815b 	bhi.w	8ba62 <_malloc_r+0x336>
   8b7ac:	09ab      	lsrs	r3, r5, #6
   8b7ae:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8b7b2:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8b7b6:	00c1      	lsls	r1, r0, #3
   8b7b8:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8bc38 <_malloc_r+0x50c>
   8b7bc:	4441      	add	r1, r8
   8b7be:	684c      	ldr	r4, [r1, #4]
   8b7c0:	3908      	subs	r1, #8
   8b7c2:	42a1      	cmp	r1, r4
   8b7c4:	d106      	bne.n	8b7d4 <_malloc_r+0xa8>
   8b7c6:	e00c      	b.n	8b7e2 <_malloc_r+0xb6>
   8b7c8:	2a00      	cmp	r2, #0
   8b7ca:	f280 8122 	bge.w	8ba12 <_malloc_r+0x2e6>
   8b7ce:	68e4      	ldr	r4, [r4, #12]
   8b7d0:	42a1      	cmp	r1, r4
   8b7d2:	d006      	beq.n	8b7e2 <_malloc_r+0xb6>
   8b7d4:	6863      	ldr	r3, [r4, #4]
   8b7d6:	f023 0303 	bic.w	r3, r3, #3
   8b7da:	1b5a      	subs	r2, r3, r5
   8b7dc:	2a0f      	cmp	r2, #15
   8b7de:	ddf3      	ble.n	8b7c8 <_malloc_r+0x9c>
   8b7e0:	4638      	mov	r0, r7
   8b7e2:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8b7e6:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8bc3c <_malloc_r+0x510>
   8b7ea:	4564      	cmp	r4, ip
   8b7ec:	d077      	beq.n	8b8de <_malloc_r+0x1b2>
   8b7ee:	6862      	ldr	r2, [r4, #4]
   8b7f0:	f022 0203 	bic.w	r2, r2, #3
   8b7f4:	1b53      	subs	r3, r2, r5
   8b7f6:	2b0f      	cmp	r3, #15
   8b7f8:	f300 8165 	bgt.w	8bac6 <_malloc_r+0x39a>
   8b7fc:	2b00      	cmp	r3, #0
   8b7fe:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8b802:	f280 8156 	bge.w	8bab2 <_malloc_r+0x386>
   8b806:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8b80a:	f080 8106 	bcs.w	8ba1a <_malloc_r+0x2ee>
   8b80e:	2101      	movs	r1, #1
   8b810:	08d3      	lsrs	r3, r2, #3
   8b812:	0952      	lsrs	r2, r2, #5
   8b814:	440b      	add	r3, r1
   8b816:	fa01 f202 	lsl.w	r2, r1, r2
   8b81a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8b81e:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8b822:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8b826:	430a      	orrs	r2, r1
   8b828:	f1ae 0108 	sub.w	r1, lr, #8
   8b82c:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8b830:	f8c8 2004 	str.w	r2, [r8, #4]
   8b834:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8b838:	60fc      	str	r4, [r7, #12]
   8b83a:	2101      	movs	r1, #1
   8b83c:	1083      	asrs	r3, r0, #2
   8b83e:	4099      	lsls	r1, r3
   8b840:	4291      	cmp	r1, r2
   8b842:	d853      	bhi.n	8b8ec <_malloc_r+0x1c0>
   8b844:	4211      	tst	r1, r2
   8b846:	d106      	bne.n	8b856 <_malloc_r+0x12a>
   8b848:	f020 0003 	bic.w	r0, r0, #3
   8b84c:	0049      	lsls	r1, r1, #1
   8b84e:	4211      	tst	r1, r2
   8b850:	f100 0004 	add.w	r0, r0, #4
   8b854:	d0fa      	beq.n	8b84c <_malloc_r+0x120>
   8b856:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8b85a:	464c      	mov	r4, r9
   8b85c:	4686      	mov	lr, r0
   8b85e:	68e7      	ldr	r7, [r4, #12]
   8b860:	42bc      	cmp	r4, r7
   8b862:	d107      	bne.n	8b874 <_malloc_r+0x148>
   8b864:	e109      	b.n	8ba7a <_malloc_r+0x34e>
   8b866:	2b00      	cmp	r3, #0
   8b868:	f280 8110 	bge.w	8ba8c <_malloc_r+0x360>
   8b86c:	68ff      	ldr	r7, [r7, #12]
   8b86e:	42bc      	cmp	r4, r7
   8b870:	f000 8103 	beq.w	8ba7a <_malloc_r+0x34e>
   8b874:	687a      	ldr	r2, [r7, #4]
   8b876:	f022 0203 	bic.w	r2, r2, #3
   8b87a:	1b53      	subs	r3, r2, r5
   8b87c:	2b0f      	cmp	r3, #15
   8b87e:	ddf2      	ble.n	8b866 <_malloc_r+0x13a>
   8b880:	f045 0e01 	orr.w	lr, r5, #1
   8b884:	4630      	mov	r0, r6
   8b886:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8b88a:	443d      	add	r5, r7
   8b88c:	f043 0601 	orr.w	r6, r3, #1
   8b890:	f8c7 e004 	str.w	lr, [r7, #4]
   8b894:	60e1      	str	r1, [r4, #12]
   8b896:	608c      	str	r4, [r1, #8]
   8b898:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8b89c:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8b8a0:	606e      	str	r6, [r5, #4]
   8b8a2:	50bb      	str	r3, [r7, r2]
   8b8a4:	f000 fab6 	bl	8be14 <__malloc_unlock>
   8b8a8:	f107 0408 	add.w	r4, r7, #8
   8b8ac:	e002      	b.n	8b8b4 <_malloc_r+0x188>
   8b8ae:	230c      	movs	r3, #12
   8b8b0:	2400      	movs	r4, #0
   8b8b2:	6033      	str	r3, [r6, #0]
   8b8b4:	4620      	mov	r0, r4
   8b8b6:	b003      	add	sp, #12
   8b8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b8bc:	f44f 7100 	mov.w	r1, #512	; 0x200
   8b8c0:	2040      	movs	r0, #64	; 0x40
   8b8c2:	273f      	movs	r7, #63	; 0x3f
   8b8c4:	e778      	b.n	8b7b8 <_malloc_r+0x8c>
   8b8c6:	68dc      	ldr	r4, [r3, #12]
   8b8c8:	42a3      	cmp	r3, r4
   8b8ca:	bf08      	it	eq
   8b8cc:	3002      	addeq	r0, #2
   8b8ce:	f47f af46 	bne.w	8b75e <_malloc_r+0x32>
   8b8d2:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8b8d6:	f8df c364 	ldr.w	ip, [pc, #868]	; 8bc3c <_malloc_r+0x510>
   8b8da:	4564      	cmp	r4, ip
   8b8dc:	d187      	bne.n	8b7ee <_malloc_r+0xc2>
   8b8de:	2101      	movs	r1, #1
   8b8e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8b8e4:	1083      	asrs	r3, r0, #2
   8b8e6:	4099      	lsls	r1, r3
   8b8e8:	4291      	cmp	r1, r2
   8b8ea:	d9ab      	bls.n	8b844 <_malloc_r+0x118>
   8b8ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b8f0:	6867      	ldr	r7, [r4, #4]
   8b8f2:	f027 0703 	bic.w	r7, r7, #3
   8b8f6:	42bd      	cmp	r5, r7
   8b8f8:	d802      	bhi.n	8b900 <_malloc_r+0x1d4>
   8b8fa:	1b7b      	subs	r3, r7, r5
   8b8fc:	2b0f      	cmp	r3, #15
   8b8fe:	dc77      	bgt.n	8b9f0 <_malloc_r+0x2c4>
   8b900:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8bc40 <_malloc_r+0x514>
   8b904:	4bc8      	ldr	r3, [pc, #800]	; (8bc28 <_malloc_r+0x4fc>)
   8b906:	f8d9 2000 	ldr.w	r2, [r9]
   8b90a:	681b      	ldr	r3, [r3, #0]
   8b90c:	3201      	adds	r2, #1
   8b90e:	442b      	add	r3, r5
   8b910:	eb04 0a07 	add.w	sl, r4, r7
   8b914:	f000 8124 	beq.w	8bb60 <_malloc_r+0x434>
   8b918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8b91c:	330f      	adds	r3, #15
   8b91e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8b922:	f02b 0b0f 	bic.w	fp, fp, #15
   8b926:	4659      	mov	r1, fp
   8b928:	4630      	mov	r0, r6
   8b92a:	f001 f81d 	bl	8c968 <_sbrk_r>
   8b92e:	1c41      	adds	r1, r0, #1
   8b930:	4602      	mov	r2, r0
   8b932:	f000 80e1 	beq.w	8baf8 <_malloc_r+0x3cc>
   8b936:	4582      	cmp	sl, r0
   8b938:	f200 80dc 	bhi.w	8baf4 <_malloc_r+0x3c8>
   8b93c:	4bbb      	ldr	r3, [pc, #748]	; (8bc2c <_malloc_r+0x500>)
   8b93e:	6819      	ldr	r1, [r3, #0]
   8b940:	4459      	add	r1, fp
   8b942:	4608      	mov	r0, r1
   8b944:	6019      	str	r1, [r3, #0]
   8b946:	f000 8141 	beq.w	8bbcc <_malloc_r+0x4a0>
   8b94a:	f8d9 1000 	ldr.w	r1, [r9]
   8b94e:	9301      	str	r3, [sp, #4]
   8b950:	3101      	adds	r1, #1
   8b952:	bf1b      	ittet	ne
   8b954:	eba2 0a0a 	subne.w	sl, r2, sl
   8b958:	4450      	addne	r0, sl
   8b95a:	f8c9 2000 	streq.w	r2, [r9]
   8b95e:	6018      	strne	r0, [r3, #0]
   8b960:	f012 0a07 	ands.w	sl, r2, #7
   8b964:	f000 810a 	beq.w	8bb7c <_malloc_r+0x450>
   8b968:	f1ca 0108 	rsb	r1, sl, #8
   8b96c:	440a      	add	r2, r1
   8b96e:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8b972:	4493      	add	fp, r2
   8b974:	3108      	adds	r1, #8
   8b976:	eba1 010b 	sub.w	r1, r1, fp
   8b97a:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8b97e:	4649      	mov	r1, r9
   8b980:	4630      	mov	r0, r6
   8b982:	9200      	str	r2, [sp, #0]
   8b984:	f000 fff0 	bl	8c968 <_sbrk_r>
   8b988:	1c42      	adds	r2, r0, #1
   8b98a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b98e:	f000 8143 	beq.w	8bc18 <_malloc_r+0x4ec>
   8b992:	1a80      	subs	r0, r0, r2
   8b994:	eb00 0b09 	add.w	fp, r0, r9
   8b998:	6819      	ldr	r1, [r3, #0]
   8b99a:	f04b 0001 	orr.w	r0, fp, #1
   8b99e:	4449      	add	r1, r9
   8b9a0:	4544      	cmp	r4, r8
   8b9a2:	f8c8 2008 	str.w	r2, [r8, #8]
   8b9a6:	6019      	str	r1, [r3, #0]
   8b9a8:	6050      	str	r0, [r2, #4]
   8b9aa:	f000 811c 	beq.w	8bbe6 <_malloc_r+0x4ba>
   8b9ae:	2f0f      	cmp	r7, #15
   8b9b0:	f240 811b 	bls.w	8bbea <_malloc_r+0x4be>
   8b9b4:	f04f 0c05 	mov.w	ip, #5
   8b9b8:	6860      	ldr	r0, [r4, #4]
   8b9ba:	3f0c      	subs	r7, #12
   8b9bc:	f027 0707 	bic.w	r7, r7, #7
   8b9c0:	f000 0001 	and.w	r0, r0, #1
   8b9c4:	4338      	orrs	r0, r7
   8b9c6:	eb04 0e07 	add.w	lr, r4, r7
   8b9ca:	2f0f      	cmp	r7, #15
   8b9cc:	6060      	str	r0, [r4, #4]
   8b9ce:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8b9d2:	f200 8137 	bhi.w	8bc44 <_malloc_r+0x518>
   8b9d6:	4614      	mov	r4, r2
   8b9d8:	6850      	ldr	r0, [r2, #4]
   8b9da:	4b95      	ldr	r3, [pc, #596]	; (8bc30 <_malloc_r+0x504>)
   8b9dc:	681a      	ldr	r2, [r3, #0]
   8b9de:	428a      	cmp	r2, r1
   8b9e0:	bf38      	it	cc
   8b9e2:	6019      	strcc	r1, [r3, #0]
   8b9e4:	4b93      	ldr	r3, [pc, #588]	; (8bc34 <_malloc_r+0x508>)
   8b9e6:	681a      	ldr	r2, [r3, #0]
   8b9e8:	428a      	cmp	r2, r1
   8b9ea:	bf38      	it	cc
   8b9ec:	6019      	strcc	r1, [r3, #0]
   8b9ee:	e086      	b.n	8bafe <_malloc_r+0x3d2>
   8b9f0:	f045 0201 	orr.w	r2, r5, #1
   8b9f4:	f043 0301 	orr.w	r3, r3, #1
   8b9f8:	4425      	add	r5, r4
   8b9fa:	6062      	str	r2, [r4, #4]
   8b9fc:	4630      	mov	r0, r6
   8b9fe:	f8c8 5008 	str.w	r5, [r8, #8]
   8ba02:	3408      	adds	r4, #8
   8ba04:	606b      	str	r3, [r5, #4]
   8ba06:	f000 fa05 	bl	8be14 <__malloc_unlock>
   8ba0a:	4620      	mov	r0, r4
   8ba0c:	b003      	add	sp, #12
   8ba0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ba12:	4423      	add	r3, r4
   8ba14:	685a      	ldr	r2, [r3, #4]
   8ba16:	68e1      	ldr	r1, [r4, #12]
   8ba18:	e6a7      	b.n	8b76a <_malloc_r+0x3e>
   8ba1a:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8ba1e:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8ba22:	d361      	bcc.n	8bae8 <_malloc_r+0x3bc>
   8ba24:	2b14      	cmp	r3, #20
   8ba26:	f200 80ba 	bhi.w	8bb9e <_malloc_r+0x472>
   8ba2a:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8ba2e:	00c9      	lsls	r1, r1, #3
   8ba30:	335b      	adds	r3, #91	; 0x5b
   8ba32:	eb08 0701 	add.w	r7, r8, r1
   8ba36:	f858 1001 	ldr.w	r1, [r8, r1]
   8ba3a:	3f08      	subs	r7, #8
   8ba3c:	428f      	cmp	r7, r1
   8ba3e:	f000 8092 	beq.w	8bb66 <_malloc_r+0x43a>
   8ba42:	684b      	ldr	r3, [r1, #4]
   8ba44:	f023 0303 	bic.w	r3, r3, #3
   8ba48:	4293      	cmp	r3, r2
   8ba4a:	d902      	bls.n	8ba52 <_malloc_r+0x326>
   8ba4c:	6889      	ldr	r1, [r1, #8]
   8ba4e:	428f      	cmp	r7, r1
   8ba50:	d1f7      	bne.n	8ba42 <_malloc_r+0x316>
   8ba52:	68cf      	ldr	r7, [r1, #12]
   8ba54:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8ba58:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8ba5c:	60bc      	str	r4, [r7, #8]
   8ba5e:	60cc      	str	r4, [r1, #12]
   8ba60:	e6eb      	b.n	8b83a <_malloc_r+0x10e>
   8ba62:	2b14      	cmp	r3, #20
   8ba64:	d959      	bls.n	8bb1a <_malloc_r+0x3ee>
   8ba66:	2b54      	cmp	r3, #84	; 0x54
   8ba68:	f200 80a1 	bhi.w	8bbae <_malloc_r+0x482>
   8ba6c:	0b2b      	lsrs	r3, r5, #12
   8ba6e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8ba72:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8ba76:	00c1      	lsls	r1, r0, #3
   8ba78:	e69e      	b.n	8b7b8 <_malloc_r+0x8c>
   8ba7a:	f10e 0e01 	add.w	lr, lr, #1
   8ba7e:	f01e 0f03 	tst.w	lr, #3
   8ba82:	f104 0408 	add.w	r4, r4, #8
   8ba86:	f47f aeea 	bne.w	8b85e <_malloc_r+0x132>
   8ba8a:	e051      	b.n	8bb30 <_malloc_r+0x404>
   8ba8c:	463c      	mov	r4, r7
   8ba8e:	443a      	add	r2, r7
   8ba90:	6853      	ldr	r3, [r2, #4]
   8ba92:	68f9      	ldr	r1, [r7, #12]
   8ba94:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8ba98:	f043 0301 	orr.w	r3, r3, #1
   8ba9c:	6053      	str	r3, [r2, #4]
   8ba9e:	4630      	mov	r0, r6
   8baa0:	60e9      	str	r1, [r5, #12]
   8baa2:	608d      	str	r5, [r1, #8]
   8baa4:	f000 f9b6 	bl	8be14 <__malloc_unlock>
   8baa8:	e704      	b.n	8b8b4 <_malloc_r+0x188>
   8baaa:	08e8      	lsrs	r0, r5, #3
   8baac:	f105 0308 	add.w	r3, r5, #8
   8bab0:	e64c      	b.n	8b74c <_malloc_r+0x20>
   8bab2:	4422      	add	r2, r4
   8bab4:	6853      	ldr	r3, [r2, #4]
   8bab6:	4630      	mov	r0, r6
   8bab8:	f043 0301 	orr.w	r3, r3, #1
   8babc:	6053      	str	r3, [r2, #4]
   8babe:	3408      	adds	r4, #8
   8bac0:	f000 f9a8 	bl	8be14 <__malloc_unlock>
   8bac4:	e6f6      	b.n	8b8b4 <_malloc_r+0x188>
   8bac6:	f045 0701 	orr.w	r7, r5, #1
   8baca:	f043 0101 	orr.w	r1, r3, #1
   8bace:	4425      	add	r5, r4
   8bad0:	6067      	str	r7, [r4, #4]
   8bad2:	4630      	mov	r0, r6
   8bad4:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8bad8:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8badc:	6069      	str	r1, [r5, #4]
   8bade:	50a3      	str	r3, [r4, r2]
   8bae0:	f000 f998 	bl	8be14 <__malloc_unlock>
   8bae4:	3408      	adds	r4, #8
   8bae6:	e6e5      	b.n	8b8b4 <_malloc_r+0x188>
   8bae8:	0993      	lsrs	r3, r2, #6
   8baea:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8baee:	00c9      	lsls	r1, r1, #3
   8baf0:	3338      	adds	r3, #56	; 0x38
   8baf2:	e79e      	b.n	8ba32 <_malloc_r+0x306>
   8baf4:	4544      	cmp	r4, r8
   8baf6:	d064      	beq.n	8bbc2 <_malloc_r+0x496>
   8baf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8bafc:	6860      	ldr	r0, [r4, #4]
   8bafe:	f020 0b03 	bic.w	fp, r0, #3
   8bb02:	455d      	cmp	r5, fp
   8bb04:	ebab 0305 	sub.w	r3, fp, r5
   8bb08:	d802      	bhi.n	8bb10 <_malloc_r+0x3e4>
   8bb0a:	2b0f      	cmp	r3, #15
   8bb0c:	f73f af70 	bgt.w	8b9f0 <_malloc_r+0x2c4>
   8bb10:	4630      	mov	r0, r6
   8bb12:	f000 f97f 	bl	8be14 <__malloc_unlock>
   8bb16:	2400      	movs	r4, #0
   8bb18:	e6cc      	b.n	8b8b4 <_malloc_r+0x188>
   8bb1a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8bb1e:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8bb22:	00c1      	lsls	r1, r0, #3
   8bb24:	e648      	b.n	8b7b8 <_malloc_r+0x8c>
   8bb26:	f859 3908 	ldr.w	r3, [r9], #-8
   8bb2a:	454b      	cmp	r3, r9
   8bb2c:	f040 80a9 	bne.w	8bc82 <_malloc_r+0x556>
   8bb30:	f010 0f03 	tst.w	r0, #3
   8bb34:	f100 30ff 	add.w	r0, r0, #4294967295
   8bb38:	d1f5      	bne.n	8bb26 <_malloc_r+0x3fa>
   8bb3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8bb3e:	ea23 0301 	bic.w	r3, r3, r1
   8bb42:	f8c8 3004 	str.w	r3, [r8, #4]
   8bb46:	0049      	lsls	r1, r1, #1
   8bb48:	4299      	cmp	r1, r3
   8bb4a:	f63f aecf 	bhi.w	8b8ec <_malloc_r+0x1c0>
   8bb4e:	b919      	cbnz	r1, 8bb58 <_malloc_r+0x42c>
   8bb50:	e6cc      	b.n	8b8ec <_malloc_r+0x1c0>
   8bb52:	0049      	lsls	r1, r1, #1
   8bb54:	f10e 0e04 	add.w	lr, lr, #4
   8bb58:	4219      	tst	r1, r3
   8bb5a:	d0fa      	beq.n	8bb52 <_malloc_r+0x426>
   8bb5c:	4670      	mov	r0, lr
   8bb5e:	e67a      	b.n	8b856 <_malloc_r+0x12a>
   8bb60:	f103 0b10 	add.w	fp, r3, #16
   8bb64:	e6df      	b.n	8b926 <_malloc_r+0x1fa>
   8bb66:	f04f 0e01 	mov.w	lr, #1
   8bb6a:	109a      	asrs	r2, r3, #2
   8bb6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8bb70:	fa0e f202 	lsl.w	r2, lr, r2
   8bb74:	431a      	orrs	r2, r3
   8bb76:	f8c8 2004 	str.w	r2, [r8, #4]
   8bb7a:	e76d      	b.n	8ba58 <_malloc_r+0x32c>
   8bb7c:	eb02 010b 	add.w	r1, r2, fp
   8bb80:	4249      	negs	r1, r1
   8bb82:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8bb86:	4649      	mov	r1, r9
   8bb88:	4630      	mov	r0, r6
   8bb8a:	9200      	str	r2, [sp, #0]
   8bb8c:	f000 feec 	bl	8c968 <_sbrk_r>
   8bb90:	1c43      	adds	r3, r0, #1
   8bb92:	e9dd 2300 	ldrd	r2, r3, [sp]
   8bb96:	f47f aefc 	bne.w	8b992 <_malloc_r+0x266>
   8bb9a:	46d1      	mov	r9, sl
   8bb9c:	e6fc      	b.n	8b998 <_malloc_r+0x26c>
   8bb9e:	2b54      	cmp	r3, #84	; 0x54
   8bba0:	d826      	bhi.n	8bbf0 <_malloc_r+0x4c4>
   8bba2:	0b13      	lsrs	r3, r2, #12
   8bba4:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8bba8:	00c9      	lsls	r1, r1, #3
   8bbaa:	336e      	adds	r3, #110	; 0x6e
   8bbac:	e741      	b.n	8ba32 <_malloc_r+0x306>
   8bbae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8bbb2:	d826      	bhi.n	8bc02 <_malloc_r+0x4d6>
   8bbb4:	0beb      	lsrs	r3, r5, #15
   8bbb6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8bbba:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8bbbe:	00c1      	lsls	r1, r0, #3
   8bbc0:	e5fa      	b.n	8b7b8 <_malloc_r+0x8c>
   8bbc2:	4b1a      	ldr	r3, [pc, #104]	; (8bc2c <_malloc_r+0x500>)
   8bbc4:	6818      	ldr	r0, [r3, #0]
   8bbc6:	4458      	add	r0, fp
   8bbc8:	6018      	str	r0, [r3, #0]
   8bbca:	e6be      	b.n	8b94a <_malloc_r+0x21e>
   8bbcc:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8bbd0:	f1bc 0f00 	cmp.w	ip, #0
   8bbd4:	f47f aeb9 	bne.w	8b94a <_malloc_r+0x21e>
   8bbd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8bbdc:	44bb      	add	fp, r7
   8bbde:	f04b 0001 	orr.w	r0, fp, #1
   8bbe2:	6060      	str	r0, [r4, #4]
   8bbe4:	e6f9      	b.n	8b9da <_malloc_r+0x2ae>
   8bbe6:	4614      	mov	r4, r2
   8bbe8:	e6f7      	b.n	8b9da <_malloc_r+0x2ae>
   8bbea:	2301      	movs	r3, #1
   8bbec:	6053      	str	r3, [r2, #4]
   8bbee:	e78f      	b.n	8bb10 <_malloc_r+0x3e4>
   8bbf0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8bbf4:	d832      	bhi.n	8bc5c <_malloc_r+0x530>
   8bbf6:	0bd3      	lsrs	r3, r2, #15
   8bbf8:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8bbfc:	00c9      	lsls	r1, r1, #3
   8bbfe:	3377      	adds	r3, #119	; 0x77
   8bc00:	e717      	b.n	8ba32 <_malloc_r+0x306>
   8bc02:	f240 5254 	movw	r2, #1364	; 0x554
   8bc06:	4293      	cmp	r3, r2
   8bc08:	d832      	bhi.n	8bc70 <_malloc_r+0x544>
   8bc0a:	0cab      	lsrs	r3, r5, #18
   8bc0c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8bc10:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8bc14:	00c1      	lsls	r1, r0, #3
   8bc16:	e5cf      	b.n	8b7b8 <_malloc_r+0x8c>
   8bc18:	f1aa 0a08 	sub.w	sl, sl, #8
   8bc1c:	44d3      	add	fp, sl
   8bc1e:	f04f 0900 	mov.w	r9, #0
   8bc22:	ebab 0b02 	sub.w	fp, fp, r2
   8bc26:	e6b7      	b.n	8b998 <_malloc_r+0x26c>
   8bc28:	200013b8 	.word	0x200013b8
   8bc2c:	20001388 	.word	0x20001388
   8bc30:	200013b0 	.word	0x200013b0
   8bc34:	200013b4 	.word	0x200013b4
   8bc38:	200009e0 	.word	0x200009e0
   8bc3c:	200009e8 	.word	0x200009e8
   8bc40:	20000de8 	.word	0x20000de8
   8bc44:	f104 0108 	add.w	r1, r4, #8
   8bc48:	4630      	mov	r0, r6
   8bc4a:	9300      	str	r3, [sp, #0]
   8bc4c:	f7ff fa44 	bl	8b0d8 <_free_r>
   8bc50:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8bc54:	9b00      	ldr	r3, [sp, #0]
   8bc56:	6860      	ldr	r0, [r4, #4]
   8bc58:	6819      	ldr	r1, [r3, #0]
   8bc5a:	e6be      	b.n	8b9da <_malloc_r+0x2ae>
   8bc5c:	f240 5154 	movw	r1, #1364	; 0x554
   8bc60:	428b      	cmp	r3, r1
   8bc62:	d80a      	bhi.n	8bc7a <_malloc_r+0x54e>
   8bc64:	0c93      	lsrs	r3, r2, #18
   8bc66:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8bc6a:	00c9      	lsls	r1, r1, #3
   8bc6c:	337c      	adds	r3, #124	; 0x7c
   8bc6e:	e6e0      	b.n	8ba32 <_malloc_r+0x306>
   8bc70:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8bc74:	207f      	movs	r0, #127	; 0x7f
   8bc76:	277e      	movs	r7, #126	; 0x7e
   8bc78:	e59e      	b.n	8b7b8 <_malloc_r+0x8c>
   8bc7a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8bc7e:	237e      	movs	r3, #126	; 0x7e
   8bc80:	e6d7      	b.n	8ba32 <_malloc_r+0x306>
   8bc82:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8bc86:	e75e      	b.n	8bb46 <_malloc_r+0x41a>

0008bc88 <__ascii_mbtowc>:
   8bc88:	b082      	sub	sp, #8
   8bc8a:	b149      	cbz	r1, 8bca0 <__ascii_mbtowc+0x18>
   8bc8c:	b15a      	cbz	r2, 8bca6 <__ascii_mbtowc+0x1e>
   8bc8e:	b16b      	cbz	r3, 8bcac <__ascii_mbtowc+0x24>
   8bc90:	7813      	ldrb	r3, [r2, #0]
   8bc92:	600b      	str	r3, [r1, #0]
   8bc94:	7812      	ldrb	r2, [r2, #0]
   8bc96:	1e10      	subs	r0, r2, #0
   8bc98:	bf18      	it	ne
   8bc9a:	2001      	movne	r0, #1
   8bc9c:	b002      	add	sp, #8
   8bc9e:	4770      	bx	lr
   8bca0:	a901      	add	r1, sp, #4
   8bca2:	2a00      	cmp	r2, #0
   8bca4:	d1f3      	bne.n	8bc8e <__ascii_mbtowc+0x6>
   8bca6:	4610      	mov	r0, r2
   8bca8:	b002      	add	sp, #8
   8bcaa:	4770      	bx	lr
   8bcac:	f06f 0001 	mvn.w	r0, #1
   8bcb0:	e7f4      	b.n	8bc9c <__ascii_mbtowc+0x14>
   8bcb2:	bf00      	nop

0008bcb4 <memchr>:
   8bcb4:	b470      	push	{r4, r5, r6}
   8bcb6:	0784      	lsls	r4, r0, #30
   8bcb8:	b2cd      	uxtb	r5, r1
   8bcba:	d012      	beq.n	8bce2 <memchr+0x2e>
   8bcbc:	4603      	mov	r3, r0
   8bcbe:	1e54      	subs	r4, r2, #1
   8bcc0:	b92a      	cbnz	r2, 8bcce <memchr+0x1a>
   8bcc2:	e00b      	b.n	8bcdc <memchr+0x28>
   8bcc4:	079a      	lsls	r2, r3, #30
   8bcc6:	4618      	mov	r0, r3
   8bcc8:	d00c      	beq.n	8bce4 <memchr+0x30>
   8bcca:	3c01      	subs	r4, #1
   8bccc:	d306      	bcc.n	8bcdc <memchr+0x28>
   8bcce:	4618      	mov	r0, r3
   8bcd0:	f813 2b01 	ldrb.w	r2, [r3], #1
   8bcd4:	42aa      	cmp	r2, r5
   8bcd6:	d1f5      	bne.n	8bcc4 <memchr+0x10>
   8bcd8:	bc70      	pop	{r4, r5, r6}
   8bcda:	4770      	bx	lr
   8bcdc:	2000      	movs	r0, #0
   8bcde:	bc70      	pop	{r4, r5, r6}
   8bce0:	4770      	bx	lr
   8bce2:	4614      	mov	r4, r2
   8bce4:	2c03      	cmp	r4, #3
   8bce6:	d80d      	bhi.n	8bd04 <memchr+0x50>
   8bce8:	2c00      	cmp	r4, #0
   8bcea:	d0f7      	beq.n	8bcdc <memchr+0x28>
   8bcec:	4602      	mov	r2, r0
   8bcee:	1903      	adds	r3, r0, r4
   8bcf0:	e001      	b.n	8bcf6 <memchr+0x42>
   8bcf2:	429a      	cmp	r2, r3
   8bcf4:	d0f2      	beq.n	8bcdc <memchr+0x28>
   8bcf6:	4610      	mov	r0, r2
   8bcf8:	f812 1b01 	ldrb.w	r1, [r2], #1
   8bcfc:	42a9      	cmp	r1, r5
   8bcfe:	d1f8      	bne.n	8bcf2 <memchr+0x3e>
   8bd00:	bc70      	pop	{r4, r5, r6}
   8bd02:	4770      	bx	lr
   8bd04:	4606      	mov	r6, r0
   8bd06:	020a      	lsls	r2, r1, #8
   8bd08:	b292      	uxth	r2, r2
   8bd0a:	432a      	orrs	r2, r5
   8bd0c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8bd10:	6833      	ldr	r3, [r6, #0]
   8bd12:	4630      	mov	r0, r6
   8bd14:	4053      	eors	r3, r2
   8bd16:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8bd1a:	ea21 0303 	bic.w	r3, r1, r3
   8bd1e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8bd22:	f106 0604 	add.w	r6, r6, #4
   8bd26:	d1e1      	bne.n	8bcec <memchr+0x38>
   8bd28:	3c04      	subs	r4, #4
   8bd2a:	2c03      	cmp	r4, #3
   8bd2c:	4630      	mov	r0, r6
   8bd2e:	d8ef      	bhi.n	8bd10 <memchr+0x5c>
   8bd30:	e7da      	b.n	8bce8 <memchr+0x34>
   8bd32:	bf00      	nop

0008bd34 <memmove>:
   8bd34:	4288      	cmp	r0, r1
   8bd36:	b4f0      	push	{r4, r5, r6, r7}
   8bd38:	d90d      	bls.n	8bd56 <memmove+0x22>
   8bd3a:	188b      	adds	r3, r1, r2
   8bd3c:	4283      	cmp	r3, r0
   8bd3e:	d90a      	bls.n	8bd56 <memmove+0x22>
   8bd40:	1884      	adds	r4, r0, r2
   8bd42:	b132      	cbz	r2, 8bd52 <memmove+0x1e>
   8bd44:	4622      	mov	r2, r4
   8bd46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8bd4a:	4299      	cmp	r1, r3
   8bd4c:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8bd50:	d1f9      	bne.n	8bd46 <memmove+0x12>
   8bd52:	bcf0      	pop	{r4, r5, r6, r7}
   8bd54:	4770      	bx	lr
   8bd56:	2a0f      	cmp	r2, #15
   8bd58:	d80e      	bhi.n	8bd78 <memmove+0x44>
   8bd5a:	4603      	mov	r3, r0
   8bd5c:	1e54      	subs	r4, r2, #1
   8bd5e:	2a00      	cmp	r2, #0
   8bd60:	d0f7      	beq.n	8bd52 <memmove+0x1e>
   8bd62:	3401      	adds	r4, #1
   8bd64:	440c      	add	r4, r1
   8bd66:	3b01      	subs	r3, #1
   8bd68:	f811 2b01 	ldrb.w	r2, [r1], #1
   8bd6c:	42a1      	cmp	r1, r4
   8bd6e:	f803 2f01 	strb.w	r2, [r3, #1]!
   8bd72:	d1f9      	bne.n	8bd68 <memmove+0x34>
   8bd74:	bcf0      	pop	{r4, r5, r6, r7}
   8bd76:	4770      	bx	lr
   8bd78:	ea40 0301 	orr.w	r3, r0, r1
   8bd7c:	079b      	lsls	r3, r3, #30
   8bd7e:	d13e      	bne.n	8bdfe <memmove+0xca>
   8bd80:	f1a2 0310 	sub.w	r3, r2, #16
   8bd84:	f023 040f 	bic.w	r4, r3, #15
   8bd88:	f101 0720 	add.w	r7, r1, #32
   8bd8c:	4427      	add	r7, r4
   8bd8e:	091b      	lsrs	r3, r3, #4
   8bd90:	f101 0410 	add.w	r4, r1, #16
   8bd94:	f100 0510 	add.w	r5, r0, #16
   8bd98:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8bd9c:	3410      	adds	r4, #16
   8bd9e:	f845 6c10 	str.w	r6, [r5, #-16]
   8bda2:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8bda6:	3510      	adds	r5, #16
   8bda8:	f845 6c1c 	str.w	r6, [r5, #-28]
   8bdac:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8bdb0:	f845 6c18 	str.w	r6, [r5, #-24]
   8bdb4:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8bdb8:	42bc      	cmp	r4, r7
   8bdba:	f845 6c14 	str.w	r6, [r5, #-20]
   8bdbe:	d1eb      	bne.n	8bd98 <memmove+0x64>
   8bdc0:	3301      	adds	r3, #1
   8bdc2:	f012 0f0c 	tst.w	r2, #12
   8bdc6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8bdca:	f002 040f 	and.w	r4, r2, #15
   8bdce:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8bdd2:	d017      	beq.n	8be04 <memmove+0xd0>
   8bdd4:	460e      	mov	r6, r1
   8bdd6:	3c04      	subs	r4, #4
   8bdd8:	f024 0c03 	bic.w	ip, r4, #3
   8bddc:	08a5      	lsrs	r5, r4, #2
   8bdde:	449c      	add	ip, r3
   8bde0:	1f1c      	subs	r4, r3, #4
   8bde2:	f856 7b04 	ldr.w	r7, [r6], #4
   8bde6:	f844 7f04 	str.w	r7, [r4, #4]!
   8bdea:	4564      	cmp	r4, ip
   8bdec:	d1f9      	bne.n	8bde2 <memmove+0xae>
   8bdee:	1c6c      	adds	r4, r5, #1
   8bdf0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8bdf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8bdf8:	f002 0203 	and.w	r2, r2, #3
   8bdfc:	e7ae      	b.n	8bd5c <memmove+0x28>
   8bdfe:	4603      	mov	r3, r0
   8be00:	1e54      	subs	r4, r2, #1
   8be02:	e7ae      	b.n	8bd62 <memmove+0x2e>
   8be04:	4622      	mov	r2, r4
   8be06:	e7a9      	b.n	8bd5c <memmove+0x28>

0008be08 <__malloc_lock>:
   8be08:	4801      	ldr	r0, [pc, #4]	; (8be10 <__malloc_lock+0x8>)
   8be0a:	f7ff bc13 	b.w	8b634 <__retarget_lock_acquire_recursive>
   8be0e:	bf00      	nop
   8be10:	20001858 	.word	0x20001858

0008be14 <__malloc_unlock>:
   8be14:	4801      	ldr	r0, [pc, #4]	; (8be1c <__malloc_unlock+0x8>)
   8be16:	f7ff bc0f 	b.w	8b638 <__retarget_lock_release_recursive>
   8be1a:	bf00      	nop
   8be1c:	20001858 	.word	0x20001858

0008be20 <_Balloc>:
   8be20:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8be22:	b570      	push	{r4, r5, r6, lr}
   8be24:	4605      	mov	r5, r0
   8be26:	460c      	mov	r4, r1
   8be28:	b14b      	cbz	r3, 8be3e <_Balloc+0x1e>
   8be2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8be2e:	b180      	cbz	r0, 8be52 <_Balloc+0x32>
   8be30:	6802      	ldr	r2, [r0, #0]
   8be32:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8be36:	2300      	movs	r3, #0
   8be38:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8be3c:	bd70      	pop	{r4, r5, r6, pc}
   8be3e:	2221      	movs	r2, #33	; 0x21
   8be40:	2104      	movs	r1, #4
   8be42:	f000 ffc5 	bl	8cdd0 <_calloc_r>
   8be46:	4603      	mov	r3, r0
   8be48:	64e8      	str	r0, [r5, #76]	; 0x4c
   8be4a:	2800      	cmp	r0, #0
   8be4c:	d1ed      	bne.n	8be2a <_Balloc+0xa>
   8be4e:	2000      	movs	r0, #0
   8be50:	bd70      	pop	{r4, r5, r6, pc}
   8be52:	2101      	movs	r1, #1
   8be54:	fa01 f604 	lsl.w	r6, r1, r4
   8be58:	1d72      	adds	r2, r6, #5
   8be5a:	4628      	mov	r0, r5
   8be5c:	0092      	lsls	r2, r2, #2
   8be5e:	f000 ffb7 	bl	8cdd0 <_calloc_r>
   8be62:	2800      	cmp	r0, #0
   8be64:	d0f3      	beq.n	8be4e <_Balloc+0x2e>
   8be66:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8be6a:	e7e4      	b.n	8be36 <_Balloc+0x16>

0008be6c <_Bfree>:
   8be6c:	b131      	cbz	r1, 8be7c <_Bfree+0x10>
   8be6e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8be70:	684a      	ldr	r2, [r1, #4]
   8be72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8be76:	6008      	str	r0, [r1, #0]
   8be78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8be7c:	4770      	bx	lr
   8be7e:	bf00      	nop

0008be80 <__multadd>:
   8be80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8be84:	4680      	mov	r8, r0
   8be86:	461c      	mov	r4, r3
   8be88:	2000      	movs	r0, #0
   8be8a:	460f      	mov	r7, r1
   8be8c:	690e      	ldr	r6, [r1, #16]
   8be8e:	3114      	adds	r1, #20
   8be90:	680d      	ldr	r5, [r1, #0]
   8be92:	3001      	adds	r0, #1
   8be94:	b2ab      	uxth	r3, r5
   8be96:	fb02 4303 	mla	r3, r2, r3, r4
   8be9a:	0c2c      	lsrs	r4, r5, #16
   8be9c:	0c1d      	lsrs	r5, r3, #16
   8be9e:	fb02 5404 	mla	r4, r2, r4, r5
   8bea2:	b29b      	uxth	r3, r3
   8bea4:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8bea8:	4286      	cmp	r6, r0
   8beaa:	f841 3b04 	str.w	r3, [r1], #4
   8beae:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8beb2:	dced      	bgt.n	8be90 <__multadd+0x10>
   8beb4:	b13c      	cbz	r4, 8bec6 <__multadd+0x46>
   8beb6:	68bb      	ldr	r3, [r7, #8]
   8beb8:	42b3      	cmp	r3, r6
   8beba:	dd07      	ble.n	8becc <__multadd+0x4c>
   8bebc:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8bec0:	3601      	adds	r6, #1
   8bec2:	615c      	str	r4, [r3, #20]
   8bec4:	613e      	str	r6, [r7, #16]
   8bec6:	4638      	mov	r0, r7
   8bec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8becc:	6879      	ldr	r1, [r7, #4]
   8bece:	4640      	mov	r0, r8
   8bed0:	3101      	adds	r1, #1
   8bed2:	f7ff ffa5 	bl	8be20 <_Balloc>
   8bed6:	4605      	mov	r5, r0
   8bed8:	b1b0      	cbz	r0, 8bf08 <__multadd+0x88>
   8beda:	693a      	ldr	r2, [r7, #16]
   8bedc:	f107 010c 	add.w	r1, r7, #12
   8bee0:	3202      	adds	r2, #2
   8bee2:	0092      	lsls	r2, r2, #2
   8bee4:	300c      	adds	r0, #12
   8bee6:	f7fb f8cd 	bl	87084 <memcpy>
   8beea:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8beee:	687a      	ldr	r2, [r7, #4]
   8bef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8bef4:	6039      	str	r1, [r7, #0]
   8bef6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8befa:	462f      	mov	r7, r5
   8befc:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8bf00:	3601      	adds	r6, #1
   8bf02:	615c      	str	r4, [r3, #20]
   8bf04:	613e      	str	r6, [r7, #16]
   8bf06:	e7de      	b.n	8bec6 <__multadd+0x46>
   8bf08:	4602      	mov	r2, r0
   8bf0a:	21b5      	movs	r1, #181	; 0xb5
   8bf0c:	4b01      	ldr	r3, [pc, #4]	; (8bf14 <__multadd+0x94>)
   8bf0e:	4802      	ldr	r0, [pc, #8]	; (8bf18 <__multadd+0x98>)
   8bf10:	f000 ff40 	bl	8cd94 <__assert_func>
   8bf14:	0008dae8 	.word	0x0008dae8
   8bf18:	0008db88 	.word	0x0008db88

0008bf1c <__hi0bits>:
   8bf1c:	0c02      	lsrs	r2, r0, #16
   8bf1e:	0412      	lsls	r2, r2, #16
   8bf20:	4603      	mov	r3, r0
   8bf22:	b9ca      	cbnz	r2, 8bf58 <__hi0bits+0x3c>
   8bf24:	0403      	lsls	r3, r0, #16
   8bf26:	2010      	movs	r0, #16
   8bf28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8bf2c:	bf04      	itt	eq
   8bf2e:	021b      	lsleq	r3, r3, #8
   8bf30:	3008      	addeq	r0, #8
   8bf32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8bf36:	bf04      	itt	eq
   8bf38:	011b      	lsleq	r3, r3, #4
   8bf3a:	3004      	addeq	r0, #4
   8bf3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8bf40:	bf04      	itt	eq
   8bf42:	009b      	lsleq	r3, r3, #2
   8bf44:	3002      	addeq	r0, #2
   8bf46:	2b00      	cmp	r3, #0
   8bf48:	db05      	blt.n	8bf56 <__hi0bits+0x3a>
   8bf4a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8bf4e:	f100 0001 	add.w	r0, r0, #1
   8bf52:	bf08      	it	eq
   8bf54:	2020      	moveq	r0, #32
   8bf56:	4770      	bx	lr
   8bf58:	2000      	movs	r0, #0
   8bf5a:	e7e5      	b.n	8bf28 <__hi0bits+0xc>

0008bf5c <__lo0bits>:
   8bf5c:	6803      	ldr	r3, [r0, #0]
   8bf5e:	4601      	mov	r1, r0
   8bf60:	f013 0207 	ands.w	r2, r3, #7
   8bf64:	d007      	beq.n	8bf76 <__lo0bits+0x1a>
   8bf66:	07da      	lsls	r2, r3, #31
   8bf68:	d420      	bmi.n	8bfac <__lo0bits+0x50>
   8bf6a:	0798      	lsls	r0, r3, #30
   8bf6c:	d522      	bpl.n	8bfb4 <__lo0bits+0x58>
   8bf6e:	085b      	lsrs	r3, r3, #1
   8bf70:	2001      	movs	r0, #1
   8bf72:	600b      	str	r3, [r1, #0]
   8bf74:	4770      	bx	lr
   8bf76:	b298      	uxth	r0, r3
   8bf78:	b1a8      	cbz	r0, 8bfa6 <__lo0bits+0x4a>
   8bf7a:	4610      	mov	r0, r2
   8bf7c:	f013 0fff 	tst.w	r3, #255	; 0xff
   8bf80:	bf04      	itt	eq
   8bf82:	0a1b      	lsreq	r3, r3, #8
   8bf84:	3008      	addeq	r0, #8
   8bf86:	071a      	lsls	r2, r3, #28
   8bf88:	bf04      	itt	eq
   8bf8a:	091b      	lsreq	r3, r3, #4
   8bf8c:	3004      	addeq	r0, #4
   8bf8e:	079a      	lsls	r2, r3, #30
   8bf90:	bf04      	itt	eq
   8bf92:	089b      	lsreq	r3, r3, #2
   8bf94:	3002      	addeq	r0, #2
   8bf96:	07da      	lsls	r2, r3, #31
   8bf98:	d403      	bmi.n	8bfa2 <__lo0bits+0x46>
   8bf9a:	085b      	lsrs	r3, r3, #1
   8bf9c:	f100 0001 	add.w	r0, r0, #1
   8bfa0:	d006      	beq.n	8bfb0 <__lo0bits+0x54>
   8bfa2:	600b      	str	r3, [r1, #0]
   8bfa4:	4770      	bx	lr
   8bfa6:	2010      	movs	r0, #16
   8bfa8:	0c1b      	lsrs	r3, r3, #16
   8bfaa:	e7e7      	b.n	8bf7c <__lo0bits+0x20>
   8bfac:	2000      	movs	r0, #0
   8bfae:	4770      	bx	lr
   8bfb0:	2020      	movs	r0, #32
   8bfb2:	4770      	bx	lr
   8bfb4:	089b      	lsrs	r3, r3, #2
   8bfb6:	2002      	movs	r0, #2
   8bfb8:	600b      	str	r3, [r1, #0]
   8bfba:	4770      	bx	lr

0008bfbc <__i2b>:
   8bfbc:	b510      	push	{r4, lr}
   8bfbe:	460c      	mov	r4, r1
   8bfc0:	2101      	movs	r1, #1
   8bfc2:	f7ff ff2d 	bl	8be20 <_Balloc>
   8bfc6:	4602      	mov	r2, r0
   8bfc8:	b118      	cbz	r0, 8bfd2 <__i2b+0x16>
   8bfca:	2301      	movs	r3, #1
   8bfcc:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8bfd0:	bd10      	pop	{r4, pc}
   8bfd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8bfd6:	4b02      	ldr	r3, [pc, #8]	; (8bfe0 <__i2b+0x24>)
   8bfd8:	4802      	ldr	r0, [pc, #8]	; (8bfe4 <__i2b+0x28>)
   8bfda:	f000 fedb 	bl	8cd94 <__assert_func>
   8bfde:	bf00      	nop
   8bfe0:	0008dae8 	.word	0x0008dae8
   8bfe4:	0008db88 	.word	0x0008db88

0008bfe8 <__multiply>:
   8bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bfec:	690d      	ldr	r5, [r1, #16]
   8bfee:	6917      	ldr	r7, [r2, #16]
   8bff0:	460e      	mov	r6, r1
   8bff2:	42bd      	cmp	r5, r7
   8bff4:	4614      	mov	r4, r2
   8bff6:	b085      	sub	sp, #20
   8bff8:	db05      	blt.n	8c006 <__multiply+0x1e>
   8bffa:	463a      	mov	r2, r7
   8bffc:	4623      	mov	r3, r4
   8bffe:	462f      	mov	r7, r5
   8c000:	460c      	mov	r4, r1
   8c002:	4615      	mov	r5, r2
   8c004:	461e      	mov	r6, r3
   8c006:	68a3      	ldr	r3, [r4, #8]
   8c008:	6861      	ldr	r1, [r4, #4]
   8c00a:	eb07 0805 	add.w	r8, r7, r5
   8c00e:	4543      	cmp	r3, r8
   8c010:	bfb8      	it	lt
   8c012:	3101      	addlt	r1, #1
   8c014:	f7ff ff04 	bl	8be20 <_Balloc>
   8c018:	9001      	str	r0, [sp, #4]
   8c01a:	2800      	cmp	r0, #0
   8c01c:	f000 8088 	beq.w	8c130 <__multiply+0x148>
   8c020:	9b01      	ldr	r3, [sp, #4]
   8c022:	f103 0914 	add.w	r9, r3, #20
   8c026:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8c02a:	45d1      	cmp	r9, sl
   8c02c:	d205      	bcs.n	8c03a <__multiply+0x52>
   8c02e:	464b      	mov	r3, r9
   8c030:	2200      	movs	r2, #0
   8c032:	f843 2b04 	str.w	r2, [r3], #4
   8c036:	459a      	cmp	sl, r3
   8c038:	d8fb      	bhi.n	8c032 <__multiply+0x4a>
   8c03a:	f106 0e14 	add.w	lr, r6, #20
   8c03e:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8c042:	f104 0314 	add.w	r3, r4, #20
   8c046:	45de      	cmp	lr, fp
   8c048:	461a      	mov	r2, r3
   8c04a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8c04e:	d23e      	bcs.n	8c0ce <__multiply+0xe6>
   8c050:	1b3b      	subs	r3, r7, r4
   8c052:	3b15      	subs	r3, #21
   8c054:	f023 0303 	bic.w	r3, r3, #3
   8c058:	3304      	adds	r3, #4
   8c05a:	3415      	adds	r4, #21
   8c05c:	42a7      	cmp	r7, r4
   8c05e:	bf38      	it	cc
   8c060:	2304      	movcc	r3, #4
   8c062:	e9cd a802 	strd	sl, r8, [sp, #8]
   8c066:	4698      	mov	r8, r3
   8c068:	4692      	mov	sl, r2
   8c06a:	e003      	b.n	8c074 <__multiply+0x8c>
   8c06c:	45f3      	cmp	fp, lr
   8c06e:	f109 0904 	add.w	r9, r9, #4
   8c072:	d92a      	bls.n	8c0ca <__multiply+0xe2>
   8c074:	f85e 0b04 	ldr.w	r0, [lr], #4
   8c078:	b286      	uxth	r6, r0
   8c07a:	2e00      	cmp	r6, #0
   8c07c:	d138      	bne.n	8c0f0 <__multiply+0x108>
   8c07e:	0c00      	lsrs	r0, r0, #16
   8c080:	d0f4      	beq.n	8c06c <__multiply+0x84>
   8c082:	f8d9 3000 	ldr.w	r3, [r9]
   8c086:	4654      	mov	r4, sl
   8c088:	461e      	mov	r6, r3
   8c08a:	464d      	mov	r5, r9
   8c08c:	f04f 0c00 	mov.w	ip, #0
   8c090:	8822      	ldrh	r2, [r4, #0]
   8c092:	0c36      	lsrs	r6, r6, #16
   8c094:	fb00 6602 	mla	r6, r0, r2, r6
   8c098:	b29b      	uxth	r3, r3
   8c09a:	44b4      	add	ip, r6
   8c09c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8c0a0:	f845 3b04 	str.w	r3, [r5], #4
   8c0a4:	f854 3b04 	ldr.w	r3, [r4], #4
   8c0a8:	682e      	ldr	r6, [r5, #0]
   8c0aa:	0c1b      	lsrs	r3, r3, #16
   8c0ac:	b2b2      	uxth	r2, r6
   8c0ae:	fb00 2303 	mla	r3, r0, r3, r2
   8c0b2:	42a7      	cmp	r7, r4
   8c0b4:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8c0b8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8c0bc:	d8e8      	bhi.n	8c090 <__multiply+0xa8>
   8c0be:	45f3      	cmp	fp, lr
   8c0c0:	f849 3008 	str.w	r3, [r9, r8]
   8c0c4:	f109 0904 	add.w	r9, r9, #4
   8c0c8:	d8d4      	bhi.n	8c074 <__multiply+0x8c>
   8c0ca:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8c0ce:	f1b8 0f00 	cmp.w	r8, #0
   8c0d2:	dc03      	bgt.n	8c0dc <__multiply+0xf4>
   8c0d4:	e006      	b.n	8c0e4 <__multiply+0xfc>
   8c0d6:	f1b8 0801 	subs.w	r8, r8, #1
   8c0da:	d003      	beq.n	8c0e4 <__multiply+0xfc>
   8c0dc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8c0e0:	2b00      	cmp	r3, #0
   8c0e2:	d0f8      	beq.n	8c0d6 <__multiply+0xee>
   8c0e4:	9801      	ldr	r0, [sp, #4]
   8c0e6:	f8c0 8010 	str.w	r8, [r0, #16]
   8c0ea:	b005      	add	sp, #20
   8c0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c0f0:	4655      	mov	r5, sl
   8c0f2:	464c      	mov	r4, r9
   8c0f4:	2300      	movs	r3, #0
   8c0f6:	f855 1b04 	ldr.w	r1, [r5], #4
   8c0fa:	6820      	ldr	r0, [r4, #0]
   8c0fc:	b28a      	uxth	r2, r1
   8c0fe:	fa1f fc80 	uxth.w	ip, r0
   8c102:	fb06 c202 	mla	r2, r6, r2, ip
   8c106:	0c09      	lsrs	r1, r1, #16
   8c108:	0c00      	lsrs	r0, r0, #16
   8c10a:	fb06 0101 	mla	r1, r6, r1, r0
   8c10e:	4413      	add	r3, r2
   8c110:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8c114:	b29b      	uxth	r3, r3
   8c116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8c11a:	42af      	cmp	r7, r5
   8c11c:	f844 3b04 	str.w	r3, [r4], #4
   8c120:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8c124:	d8e7      	bhi.n	8c0f6 <__multiply+0x10e>
   8c126:	f849 3008 	str.w	r3, [r9, r8]
   8c12a:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8c12e:	e7a6      	b.n	8c07e <__multiply+0x96>
   8c130:	4602      	mov	r2, r0
   8c132:	f240 115d 	movw	r1, #349	; 0x15d
   8c136:	4b02      	ldr	r3, [pc, #8]	; (8c140 <__multiply+0x158>)
   8c138:	4802      	ldr	r0, [pc, #8]	; (8c144 <__multiply+0x15c>)
   8c13a:	f000 fe2b 	bl	8cd94 <__assert_func>
   8c13e:	bf00      	nop
   8c140:	0008dae8 	.word	0x0008dae8
   8c144:	0008db88 	.word	0x0008db88

0008c148 <__pow5mult>:
   8c148:	f012 0303 	ands.w	r3, r2, #3
   8c14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c150:	4614      	mov	r4, r2
   8c152:	4607      	mov	r7, r0
   8c154:	d12e      	bne.n	8c1b4 <__pow5mult+0x6c>
   8c156:	460e      	mov	r6, r1
   8c158:	10a4      	asrs	r4, r4, #2
   8c15a:	d01c      	beq.n	8c196 <__pow5mult+0x4e>
   8c15c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8c15e:	b395      	cbz	r5, 8c1c6 <__pow5mult+0x7e>
   8c160:	07e3      	lsls	r3, r4, #31
   8c162:	f04f 0800 	mov.w	r8, #0
   8c166:	d406      	bmi.n	8c176 <__pow5mult+0x2e>
   8c168:	1064      	asrs	r4, r4, #1
   8c16a:	d014      	beq.n	8c196 <__pow5mult+0x4e>
   8c16c:	6828      	ldr	r0, [r5, #0]
   8c16e:	b1a8      	cbz	r0, 8c19c <__pow5mult+0x54>
   8c170:	4605      	mov	r5, r0
   8c172:	07e3      	lsls	r3, r4, #31
   8c174:	d5f8      	bpl.n	8c168 <__pow5mult+0x20>
   8c176:	462a      	mov	r2, r5
   8c178:	4631      	mov	r1, r6
   8c17a:	4638      	mov	r0, r7
   8c17c:	f7ff ff34 	bl	8bfe8 <__multiply>
   8c180:	b1b6      	cbz	r6, 8c1b0 <__pow5mult+0x68>
   8c182:	6871      	ldr	r1, [r6, #4]
   8c184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8c186:	1064      	asrs	r4, r4, #1
   8c188:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8c18c:	6032      	str	r2, [r6, #0]
   8c18e:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8c192:	4606      	mov	r6, r0
   8c194:	d1ea      	bne.n	8c16c <__pow5mult+0x24>
   8c196:	4630      	mov	r0, r6
   8c198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c19c:	462a      	mov	r2, r5
   8c19e:	4629      	mov	r1, r5
   8c1a0:	4638      	mov	r0, r7
   8c1a2:	f7ff ff21 	bl	8bfe8 <__multiply>
   8c1a6:	6028      	str	r0, [r5, #0]
   8c1a8:	4605      	mov	r5, r0
   8c1aa:	f8c0 8000 	str.w	r8, [r0]
   8c1ae:	e7e0      	b.n	8c172 <__pow5mult+0x2a>
   8c1b0:	4606      	mov	r6, r0
   8c1b2:	e7d9      	b.n	8c168 <__pow5mult+0x20>
   8c1b4:	4a09      	ldr	r2, [pc, #36]	; (8c1dc <__pow5mult+0x94>)
   8c1b6:	3b01      	subs	r3, #1
   8c1b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8c1bc:	2300      	movs	r3, #0
   8c1be:	f7ff fe5f 	bl	8be80 <__multadd>
   8c1c2:	4606      	mov	r6, r0
   8c1c4:	e7c8      	b.n	8c158 <__pow5mult+0x10>
   8c1c6:	f240 2171 	movw	r1, #625	; 0x271
   8c1ca:	4638      	mov	r0, r7
   8c1cc:	f7ff fef6 	bl	8bfbc <__i2b>
   8c1d0:	2300      	movs	r3, #0
   8c1d2:	64b8      	str	r0, [r7, #72]	; 0x48
   8c1d4:	4605      	mov	r5, r0
   8c1d6:	6003      	str	r3, [r0, #0]
   8c1d8:	e7c2      	b.n	8c160 <__pow5mult+0x18>
   8c1da:	bf00      	nop
   8c1dc:	0008dcf8 	.word	0x0008dcf8

0008c1e0 <__lshift>:
   8c1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c1e4:	690f      	ldr	r7, [r1, #16]
   8c1e6:	688b      	ldr	r3, [r1, #8]
   8c1e8:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8c1ec:	1c7e      	adds	r6, r7, #1
   8c1ee:	429e      	cmp	r6, r3
   8c1f0:	460d      	mov	r5, r1
   8c1f2:	4691      	mov	r9, r2
   8c1f4:	4680      	mov	r8, r0
   8c1f6:	6849      	ldr	r1, [r1, #4]
   8c1f8:	ea4f 1462 	mov.w	r4, r2, asr #5
   8c1fc:	dd04      	ble.n	8c208 <__lshift+0x28>
   8c1fe:	005b      	lsls	r3, r3, #1
   8c200:	429e      	cmp	r6, r3
   8c202:	f101 0101 	add.w	r1, r1, #1
   8c206:	dcfa      	bgt.n	8c1fe <__lshift+0x1e>
   8c208:	4640      	mov	r0, r8
   8c20a:	f7ff fe09 	bl	8be20 <_Balloc>
   8c20e:	2800      	cmp	r0, #0
   8c210:	d04f      	beq.n	8c2b2 <__lshift+0xd2>
   8c212:	2c00      	cmp	r4, #0
   8c214:	f100 0114 	add.w	r1, r0, #20
   8c218:	dd0d      	ble.n	8c236 <__lshift+0x56>
   8c21a:	460b      	mov	r3, r1
   8c21c:	2200      	movs	r2, #0
   8c21e:	3405      	adds	r4, #5
   8c220:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8c224:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8c228:	f843 2b04 	str.w	r2, [r3], #4
   8c22c:	42a3      	cmp	r3, r4
   8c22e:	d1fb      	bne.n	8c228 <__lshift+0x48>
   8c230:	f1ac 0314 	sub.w	r3, ip, #20
   8c234:	4419      	add	r1, r3
   8c236:	692c      	ldr	r4, [r5, #16]
   8c238:	f105 0314 	add.w	r3, r5, #20
   8c23c:	f019 091f 	ands.w	r9, r9, #31
   8c240:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8c244:	d02d      	beq.n	8c2a2 <__lshift+0xc2>
   8c246:	468e      	mov	lr, r1
   8c248:	f04f 0a00 	mov.w	sl, #0
   8c24c:	f1c9 0220 	rsb	r2, r9, #32
   8c250:	681c      	ldr	r4, [r3, #0]
   8c252:	fa04 f409 	lsl.w	r4, r4, r9
   8c256:	ea44 040a 	orr.w	r4, r4, sl
   8c25a:	f84e 4b04 	str.w	r4, [lr], #4
   8c25e:	f853 4b04 	ldr.w	r4, [r3], #4
   8c262:	459c      	cmp	ip, r3
   8c264:	fa24 fa02 	lsr.w	sl, r4, r2
   8c268:	d8f2      	bhi.n	8c250 <__lshift+0x70>
   8c26a:	ebac 0305 	sub.w	r3, ip, r5
   8c26e:	3b15      	subs	r3, #21
   8c270:	f023 0303 	bic.w	r3, r3, #3
   8c274:	3304      	adds	r3, #4
   8c276:	f105 0215 	add.w	r2, r5, #21
   8c27a:	4594      	cmp	ip, r2
   8c27c:	bf38      	it	cc
   8c27e:	2304      	movcc	r3, #4
   8c280:	f1ba 0f00 	cmp.w	sl, #0
   8c284:	bf18      	it	ne
   8c286:	4637      	movne	r7, r6
   8c288:	f841 a003 	str.w	sl, [r1, r3]
   8c28c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8c290:	686a      	ldr	r2, [r5, #4]
   8c292:	6107      	str	r7, [r0, #16]
   8c294:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8c298:	6029      	str	r1, [r5, #0]
   8c29a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8c29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c2a2:	3904      	subs	r1, #4
   8c2a4:	f853 2b04 	ldr.w	r2, [r3], #4
   8c2a8:	459c      	cmp	ip, r3
   8c2aa:	f841 2f04 	str.w	r2, [r1, #4]!
   8c2ae:	d8f9      	bhi.n	8c2a4 <__lshift+0xc4>
   8c2b0:	e7ec      	b.n	8c28c <__lshift+0xac>
   8c2b2:	4602      	mov	r2, r0
   8c2b4:	f240 11d9 	movw	r1, #473	; 0x1d9
   8c2b8:	4b01      	ldr	r3, [pc, #4]	; (8c2c0 <__lshift+0xe0>)
   8c2ba:	4802      	ldr	r0, [pc, #8]	; (8c2c4 <__lshift+0xe4>)
   8c2bc:	f000 fd6a 	bl	8cd94 <__assert_func>
   8c2c0:	0008dae8 	.word	0x0008dae8
   8c2c4:	0008db88 	.word	0x0008db88

0008c2c8 <__mcmp>:
   8c2c8:	b430      	push	{r4, r5}
   8c2ca:	690b      	ldr	r3, [r1, #16]
   8c2cc:	4605      	mov	r5, r0
   8c2ce:	6900      	ldr	r0, [r0, #16]
   8c2d0:	1ac0      	subs	r0, r0, r3
   8c2d2:	d111      	bne.n	8c2f8 <__mcmp+0x30>
   8c2d4:	3514      	adds	r5, #20
   8c2d6:	3114      	adds	r1, #20
   8c2d8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8c2dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8c2e0:	e001      	b.n	8c2e6 <__mcmp+0x1e>
   8c2e2:	429d      	cmp	r5, r3
   8c2e4:	d208      	bcs.n	8c2f8 <__mcmp+0x30>
   8c2e6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8c2ea:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8c2ee:	428c      	cmp	r4, r1
   8c2f0:	d0f7      	beq.n	8c2e2 <__mcmp+0x1a>
   8c2f2:	d203      	bcs.n	8c2fc <__mcmp+0x34>
   8c2f4:	f04f 30ff 	mov.w	r0, #4294967295
   8c2f8:	bc30      	pop	{r4, r5}
   8c2fa:	4770      	bx	lr
   8c2fc:	2001      	movs	r0, #1
   8c2fe:	bc30      	pop	{r4, r5}
   8c300:	4770      	bx	lr
   8c302:	bf00      	nop

0008c304 <__mdiff>:
   8c304:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c308:	690b      	ldr	r3, [r1, #16]
   8c30a:	460c      	mov	r4, r1
   8c30c:	6911      	ldr	r1, [r2, #16]
   8c30e:	4690      	mov	r8, r2
   8c310:	eba3 0b01 	sub.w	fp, r3, r1
   8c314:	f1bb 0f00 	cmp.w	fp, #0
   8c318:	d17c      	bne.n	8c414 <__mdiff+0x110>
   8c31a:	f104 0614 	add.w	r6, r4, #20
   8c31e:	3214      	adds	r2, #20
   8c320:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8c324:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8c328:	e001      	b.n	8c32e <__mdiff+0x2a>
   8c32a:	429e      	cmp	r6, r3
   8c32c:	d276      	bcs.n	8c41c <__mdiff+0x118>
   8c32e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8c332:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8c336:	428d      	cmp	r5, r1
   8c338:	d0f7      	beq.n	8c32a <__mdiff+0x26>
   8c33a:	d365      	bcc.n	8c408 <__mdiff+0x104>
   8c33c:	6861      	ldr	r1, [r4, #4]
   8c33e:	f7ff fd6f 	bl	8be20 <_Balloc>
   8c342:	2800      	cmp	r0, #0
   8c344:	d074      	beq.n	8c430 <__mdiff+0x12c>
   8c346:	f100 0614 	add.w	r6, r0, #20
   8c34a:	46b4      	mov	ip, r6
   8c34c:	2300      	movs	r3, #0
   8c34e:	6927      	ldr	r7, [r4, #16]
   8c350:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8c354:	f104 0a14 	add.w	sl, r4, #20
   8c358:	f108 0514 	add.w	r5, r8, #20
   8c35c:	f8c0 b00c 	str.w	fp, [r0, #12]
   8c360:	3410      	adds	r4, #16
   8c362:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8c366:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8c36a:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8c36e:	f855 bb04 	ldr.w	fp, [r5], #4
   8c372:	b291      	uxth	r1, r2
   8c374:	440b      	add	r3, r1
   8c376:	fa1f f18b 	uxth.w	r1, fp
   8c37a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8c37e:	1a59      	subs	r1, r3, r1
   8c380:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8c384:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8c388:	b289      	uxth	r1, r1
   8c38a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8c38e:	45a9      	cmp	r9, r5
   8c390:	f84c 1b04 	str.w	r1, [ip], #4
   8c394:	ea4f 4323 	mov.w	r3, r3, asr #16
   8c398:	d8e7      	bhi.n	8c36a <__mdiff+0x66>
   8c39a:	eba9 0208 	sub.w	r2, r9, r8
   8c39e:	3a15      	subs	r2, #21
   8c3a0:	f108 0815 	add.w	r8, r8, #21
   8c3a4:	45c1      	cmp	r9, r8
   8c3a6:	f022 0403 	bic.w	r4, r2, #3
   8c3aa:	f104 0404 	add.w	r4, r4, #4
   8c3ae:	bf38      	it	cc
   8c3b0:	2404      	movcc	r4, #4
   8c3b2:	f022 0203 	bic.w	r2, r2, #3
   8c3b6:	bf38      	it	cc
   8c3b8:	2200      	movcc	r2, #0
   8c3ba:	44a2      	add	sl, r4
   8c3bc:	45d6      	cmp	lr, sl
   8c3be:	4434      	add	r4, r6
   8c3c0:	4416      	add	r6, r2
   8c3c2:	d918      	bls.n	8c3f6 <__mdiff+0xf2>
   8c3c4:	4625      	mov	r5, r4
   8c3c6:	4652      	mov	r2, sl
   8c3c8:	f852 6b04 	ldr.w	r6, [r2], #4
   8c3cc:	b2b1      	uxth	r1, r6
   8c3ce:	4419      	add	r1, r3
   8c3d0:	140b      	asrs	r3, r1, #16
   8c3d2:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8c3d6:	b289      	uxth	r1, r1
   8c3d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8c3dc:	4596      	cmp	lr, r2
   8c3de:	f845 1b04 	str.w	r1, [r5], #4
   8c3e2:	ea4f 4323 	mov.w	r3, r3, asr #16
   8c3e6:	d8ef      	bhi.n	8c3c8 <__mdiff+0xc4>
   8c3e8:	f10e 36ff 	add.w	r6, lr, #4294967295
   8c3ec:	eba6 060a 	sub.w	r6, r6, sl
   8c3f0:	f026 0603 	bic.w	r6, r6, #3
   8c3f4:	4426      	add	r6, r4
   8c3f6:	b921      	cbnz	r1, 8c402 <__mdiff+0xfe>
   8c3f8:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8c3fc:	3f01      	subs	r7, #1
   8c3fe:	2b00      	cmp	r3, #0
   8c400:	d0fa      	beq.n	8c3f8 <__mdiff+0xf4>
   8c402:	6107      	str	r7, [r0, #16]
   8c404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c408:	4623      	mov	r3, r4
   8c40a:	f04f 0b01 	mov.w	fp, #1
   8c40e:	4644      	mov	r4, r8
   8c410:	4698      	mov	r8, r3
   8c412:	e793      	b.n	8c33c <__mdiff+0x38>
   8c414:	dbf8      	blt.n	8c408 <__mdiff+0x104>
   8c416:	f04f 0b00 	mov.w	fp, #0
   8c41a:	e78f      	b.n	8c33c <__mdiff+0x38>
   8c41c:	2100      	movs	r1, #0
   8c41e:	f7ff fcff 	bl	8be20 <_Balloc>
   8c422:	b160      	cbz	r0, 8c43e <__mdiff+0x13a>
   8c424:	2201      	movs	r2, #1
   8c426:	2300      	movs	r3, #0
   8c428:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8c42c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c430:	4602      	mov	r2, r0
   8c432:	f44f 7110 	mov.w	r1, #576	; 0x240
   8c436:	4b05      	ldr	r3, [pc, #20]	; (8c44c <__mdiff+0x148>)
   8c438:	4805      	ldr	r0, [pc, #20]	; (8c450 <__mdiff+0x14c>)
   8c43a:	f000 fcab 	bl	8cd94 <__assert_func>
   8c43e:	4602      	mov	r2, r0
   8c440:	f240 2132 	movw	r1, #562	; 0x232
   8c444:	4b01      	ldr	r3, [pc, #4]	; (8c44c <__mdiff+0x148>)
   8c446:	4802      	ldr	r0, [pc, #8]	; (8c450 <__mdiff+0x14c>)
   8c448:	f000 fca4 	bl	8cd94 <__assert_func>
   8c44c:	0008dae8 	.word	0x0008dae8
   8c450:	0008db88 	.word	0x0008db88

0008c454 <__d2b>:
   8c454:	b570      	push	{r4, r5, r6, lr}
   8c456:	2101      	movs	r1, #1
   8c458:	b082      	sub	sp, #8
   8c45a:	4616      	mov	r6, r2
   8c45c:	461d      	mov	r5, r3
   8c45e:	f7ff fcdf 	bl	8be20 <_Balloc>
   8c462:	4604      	mov	r4, r0
   8c464:	2800      	cmp	r0, #0
   8c466:	d04c      	beq.n	8c502 <__d2b+0xae>
   8c468:	462b      	mov	r3, r5
   8c46a:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8c46e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8c472:	b10d      	cbz	r5, 8c478 <__d2b+0x24>
   8c474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c478:	2e00      	cmp	r6, #0
   8c47a:	9301      	str	r3, [sp, #4]
   8c47c:	d022      	beq.n	8c4c4 <__d2b+0x70>
   8c47e:	4668      	mov	r0, sp
   8c480:	9600      	str	r6, [sp, #0]
   8c482:	f7ff fd6b 	bl	8bf5c <__lo0bits>
   8c486:	2800      	cmp	r0, #0
   8c488:	d037      	beq.n	8c4fa <__d2b+0xa6>
   8c48a:	9b01      	ldr	r3, [sp, #4]
   8c48c:	9900      	ldr	r1, [sp, #0]
   8c48e:	f1c0 0220 	rsb	r2, r0, #32
   8c492:	fa03 f202 	lsl.w	r2, r3, r2
   8c496:	430a      	orrs	r2, r1
   8c498:	40c3      	lsrs	r3, r0
   8c49a:	9301      	str	r3, [sp, #4]
   8c49c:	6162      	str	r2, [r4, #20]
   8c49e:	2b00      	cmp	r3, #0
   8c4a0:	bf14      	ite	ne
   8c4a2:	2102      	movne	r1, #2
   8c4a4:	2101      	moveq	r1, #1
   8c4a6:	61a3      	str	r3, [r4, #24]
   8c4a8:	6121      	str	r1, [r4, #16]
   8c4aa:	b1b5      	cbz	r5, 8c4da <__d2b+0x86>
   8c4ac:	9a06      	ldr	r2, [sp, #24]
   8c4ae:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8c4b2:	4403      	add	r3, r0
   8c4b4:	6013      	str	r3, [r2, #0]
   8c4b6:	9b07      	ldr	r3, [sp, #28]
   8c4b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8c4bc:	6018      	str	r0, [r3, #0]
   8c4be:	4620      	mov	r0, r4
   8c4c0:	b002      	add	sp, #8
   8c4c2:	bd70      	pop	{r4, r5, r6, pc}
   8c4c4:	a801      	add	r0, sp, #4
   8c4c6:	f7ff fd49 	bl	8bf5c <__lo0bits>
   8c4ca:	2301      	movs	r3, #1
   8c4cc:	9a01      	ldr	r2, [sp, #4]
   8c4ce:	4619      	mov	r1, r3
   8c4d0:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8c4d4:	3020      	adds	r0, #32
   8c4d6:	2d00      	cmp	r5, #0
   8c4d8:	d1e8      	bne.n	8c4ac <__d2b+0x58>
   8c4da:	9a06      	ldr	r2, [sp, #24]
   8c4dc:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8c4e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8c4e4:	6010      	str	r0, [r2, #0]
   8c4e6:	6918      	ldr	r0, [r3, #16]
   8c4e8:	f7ff fd18 	bl	8bf1c <__hi0bits>
   8c4ec:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8c4f0:	4620      	mov	r0, r4
   8c4f2:	9b07      	ldr	r3, [sp, #28]
   8c4f4:	6019      	str	r1, [r3, #0]
   8c4f6:	b002      	add	sp, #8
   8c4f8:	bd70      	pop	{r4, r5, r6, pc}
   8c4fa:	e9dd 2300 	ldrd	r2, r3, [sp]
   8c4fe:	6162      	str	r2, [r4, #20]
   8c500:	e7cd      	b.n	8c49e <__d2b+0x4a>
   8c502:	4602      	mov	r2, r0
   8c504:	f240 310a 	movw	r1, #778	; 0x30a
   8c508:	4b01      	ldr	r3, [pc, #4]	; (8c510 <__d2b+0xbc>)
   8c50a:	4802      	ldr	r0, [pc, #8]	; (8c514 <__d2b+0xc0>)
   8c50c:	f000 fc42 	bl	8cd94 <__assert_func>
   8c510:	0008dae8 	.word	0x0008dae8
   8c514:	0008db88 	.word	0x0008db88

0008c518 <_realloc_r>:
   8c518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c51c:	4616      	mov	r6, r2
   8c51e:	2900      	cmp	r1, #0
   8c520:	f000 80bd 	beq.w	8c69e <_realloc_r+0x186>
   8c524:	f106 050b 	add.w	r5, r6, #11
   8c528:	460c      	mov	r4, r1
   8c52a:	4680      	mov	r8, r0
   8c52c:	f7ff fc6c 	bl	8be08 <__malloc_lock>
   8c530:	2d16      	cmp	r5, #22
   8c532:	d85f      	bhi.n	8c5f4 <_realloc_r+0xdc>
   8c534:	2510      	movs	r5, #16
   8c536:	462a      	mov	r2, r5
   8c538:	42ae      	cmp	r6, r5
   8c53a:	d860      	bhi.n	8c5fe <_realloc_r+0xe6>
   8c53c:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8c540:	f1a4 0908 	sub.w	r9, r4, #8
   8c544:	f021 0703 	bic.w	r7, r1, #3
   8c548:	4297      	cmp	r7, r2
   8c54a:	f280 8086 	bge.w	8c65a <_realloc_r+0x142>
   8c54e:	4bc9      	ldr	r3, [pc, #804]	; (8c874 <_realloc_r+0x35c>)
   8c550:	eb09 0007 	add.w	r0, r9, r7
   8c554:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8c558:	4584      	cmp	ip, r0
   8c55a:	f000 80b9 	beq.w	8c6d0 <_realloc_r+0x1b8>
   8c55e:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8c562:	f02c 0301 	bic.w	r3, ip, #1
   8c566:	4403      	add	r3, r0
   8c568:	685b      	ldr	r3, [r3, #4]
   8c56a:	07db      	lsls	r3, r3, #31
   8c56c:	f100 808c 	bmi.w	8c688 <_realloc_r+0x170>
   8c570:	f02c 0c03 	bic.w	ip, ip, #3
   8c574:	eb07 030c 	add.w	r3, r7, ip
   8c578:	4293      	cmp	r3, r2
   8c57a:	f280 8115 	bge.w	8c7a8 <_realloc_r+0x290>
   8c57e:	07cb      	lsls	r3, r1, #31
   8c580:	d40f      	bmi.n	8c5a2 <_realloc_r+0x8a>
   8c582:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8c586:	eba9 0a03 	sub.w	sl, r9, r3
   8c58a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8c58e:	f023 0103 	bic.w	r1, r3, #3
   8c592:	448c      	add	ip, r1
   8c594:	44bc      	add	ip, r7
   8c596:	4594      	cmp	ip, r2
   8c598:	da38      	bge.n	8c60c <_realloc_r+0xf4>
   8c59a:	187b      	adds	r3, r7, r1
   8c59c:	4293      	cmp	r3, r2
   8c59e:	f280 810f 	bge.w	8c7c0 <_realloc_r+0x2a8>
   8c5a2:	4631      	mov	r1, r6
   8c5a4:	4640      	mov	r0, r8
   8c5a6:	f7ff f8c1 	bl	8b72c <_malloc_r>
   8c5aa:	4606      	mov	r6, r0
   8c5ac:	b1e0      	cbz	r0, 8c5e8 <_realloc_r+0xd0>
   8c5ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c5b2:	f1a0 0208 	sub.w	r2, r0, #8
   8c5b6:	f023 0301 	bic.w	r3, r3, #1
   8c5ba:	444b      	add	r3, r9
   8c5bc:	4293      	cmp	r3, r2
   8c5be:	f000 80f9 	beq.w	8c7b4 <_realloc_r+0x29c>
   8c5c2:	1f3a      	subs	r2, r7, #4
   8c5c4:	2a24      	cmp	r2, #36	; 0x24
   8c5c6:	f200 811c 	bhi.w	8c802 <_realloc_r+0x2ea>
   8c5ca:	2a13      	cmp	r2, #19
   8c5cc:	f200 80cd 	bhi.w	8c76a <_realloc_r+0x252>
   8c5d0:	4603      	mov	r3, r0
   8c5d2:	4622      	mov	r2, r4
   8c5d4:	6811      	ldr	r1, [r2, #0]
   8c5d6:	6019      	str	r1, [r3, #0]
   8c5d8:	6851      	ldr	r1, [r2, #4]
   8c5da:	6059      	str	r1, [r3, #4]
   8c5dc:	6892      	ldr	r2, [r2, #8]
   8c5de:	609a      	str	r2, [r3, #8]
   8c5e0:	4621      	mov	r1, r4
   8c5e2:	4640      	mov	r0, r8
   8c5e4:	f7fe fd78 	bl	8b0d8 <_free_r>
   8c5e8:	4640      	mov	r0, r8
   8c5ea:	f7ff fc13 	bl	8be14 <__malloc_unlock>
   8c5ee:	4630      	mov	r0, r6
   8c5f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c5f4:	f025 0507 	bic.w	r5, r5, #7
   8c5f8:	2d00      	cmp	r5, #0
   8c5fa:	462a      	mov	r2, r5
   8c5fc:	da9c      	bge.n	8c538 <_realloc_r+0x20>
   8c5fe:	230c      	movs	r3, #12
   8c600:	2600      	movs	r6, #0
   8c602:	f8c8 3000 	str.w	r3, [r8]
   8c606:	4630      	mov	r0, r6
   8c608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c60c:	4656      	mov	r6, sl
   8c60e:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8c612:	60cb      	str	r3, [r1, #12]
   8c614:	6099      	str	r1, [r3, #8]
   8c616:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8c61a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8c61e:	1f3a      	subs	r2, r7, #4
   8c620:	2a24      	cmp	r2, #36	; 0x24
   8c622:	60cb      	str	r3, [r1, #12]
   8c624:	6099      	str	r1, [r3, #8]
   8c626:	f200 8107 	bhi.w	8c838 <_realloc_r+0x320>
   8c62a:	2a13      	cmp	r2, #19
   8c62c:	f240 8102 	bls.w	8c834 <_realloc_r+0x31c>
   8c630:	6823      	ldr	r3, [r4, #0]
   8c632:	2a1b      	cmp	r2, #27
   8c634:	f8ca 3008 	str.w	r3, [sl, #8]
   8c638:	6863      	ldr	r3, [r4, #4]
   8c63a:	f8ca 300c 	str.w	r3, [sl, #12]
   8c63e:	f200 811b 	bhi.w	8c878 <_realloc_r+0x360>
   8c642:	3408      	adds	r4, #8
   8c644:	f10a 0310 	add.w	r3, sl, #16
   8c648:	6822      	ldr	r2, [r4, #0]
   8c64a:	4667      	mov	r7, ip
   8c64c:	601a      	str	r2, [r3, #0]
   8c64e:	6862      	ldr	r2, [r4, #4]
   8c650:	46d1      	mov	r9, sl
   8c652:	605a      	str	r2, [r3, #4]
   8c654:	68a2      	ldr	r2, [r4, #8]
   8c656:	4634      	mov	r4, r6
   8c658:	609a      	str	r2, [r3, #8]
   8c65a:	1b7b      	subs	r3, r7, r5
   8c65c:	2b0f      	cmp	r3, #15
   8c65e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8c662:	d821      	bhi.n	8c6a8 <_realloc_r+0x190>
   8c664:	f002 0201 	and.w	r2, r2, #1
   8c668:	433a      	orrs	r2, r7
   8c66a:	eb09 0107 	add.w	r1, r9, r7
   8c66e:	f8c9 2004 	str.w	r2, [r9, #4]
   8c672:	684b      	ldr	r3, [r1, #4]
   8c674:	f043 0301 	orr.w	r3, r3, #1
   8c678:	604b      	str	r3, [r1, #4]
   8c67a:	4626      	mov	r6, r4
   8c67c:	4640      	mov	r0, r8
   8c67e:	f7ff fbc9 	bl	8be14 <__malloc_unlock>
   8c682:	4630      	mov	r0, r6
   8c684:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c688:	07c9      	lsls	r1, r1, #31
   8c68a:	d48a      	bmi.n	8c5a2 <_realloc_r+0x8a>
   8c68c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8c690:	eba9 0a03 	sub.w	sl, r9, r3
   8c694:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c698:	f021 0103 	bic.w	r1, r1, #3
   8c69c:	e77d      	b.n	8c59a <_realloc_r+0x82>
   8c69e:	4611      	mov	r1, r2
   8c6a0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c6a4:	f7ff b842 	b.w	8b72c <_malloc_r>
   8c6a8:	f002 0201 	and.w	r2, r2, #1
   8c6ac:	eb09 0105 	add.w	r1, r9, r5
   8c6b0:	f043 0301 	orr.w	r3, r3, #1
   8c6b4:	432a      	orrs	r2, r5
   8c6b6:	f8c9 2004 	str.w	r2, [r9, #4]
   8c6ba:	444f      	add	r7, r9
   8c6bc:	604b      	str	r3, [r1, #4]
   8c6be:	687b      	ldr	r3, [r7, #4]
   8c6c0:	4640      	mov	r0, r8
   8c6c2:	f043 0301 	orr.w	r3, r3, #1
   8c6c6:	3108      	adds	r1, #8
   8c6c8:	607b      	str	r3, [r7, #4]
   8c6ca:	f7fe fd05 	bl	8b0d8 <_free_r>
   8c6ce:	e7d4      	b.n	8c67a <_realloc_r+0x162>
   8c6d0:	f8dc b004 	ldr.w	fp, [ip, #4]
   8c6d4:	f105 0010 	add.w	r0, r5, #16
   8c6d8:	f02b 0b03 	bic.w	fp, fp, #3
   8c6dc:	eb07 0c0b 	add.w	ip, r7, fp
   8c6e0:	4584      	cmp	ip, r0
   8c6e2:	da4d      	bge.n	8c780 <_realloc_r+0x268>
   8c6e4:	07c9      	lsls	r1, r1, #31
   8c6e6:	f53f af5c 	bmi.w	8c5a2 <_realloc_r+0x8a>
   8c6ea:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8c6ee:	eba9 0a01 	sub.w	sl, r9, r1
   8c6f2:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c6f6:	f021 0103 	bic.w	r1, r1, #3
   8c6fa:	448b      	add	fp, r1
   8c6fc:	44bb      	add	fp, r7
   8c6fe:	4558      	cmp	r0, fp
   8c700:	f73f af4b 	bgt.w	8c59a <_realloc_r+0x82>
   8c704:	4656      	mov	r6, sl
   8c706:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c70a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8c70e:	1f3a      	subs	r2, r7, #4
   8c710:	2a24      	cmp	r2, #36	; 0x24
   8c712:	60c1      	str	r1, [r0, #12]
   8c714:	6088      	str	r0, [r1, #8]
   8c716:	f200 80bd 	bhi.w	8c894 <_realloc_r+0x37c>
   8c71a:	2a13      	cmp	r2, #19
   8c71c:	f240 80b8 	bls.w	8c890 <_realloc_r+0x378>
   8c720:	6821      	ldr	r1, [r4, #0]
   8c722:	2a1b      	cmp	r2, #27
   8c724:	f8ca 1008 	str.w	r1, [sl, #8]
   8c728:	6861      	ldr	r1, [r4, #4]
   8c72a:	f8ca 100c 	str.w	r1, [sl, #12]
   8c72e:	f200 80c1 	bhi.w	8c8b4 <_realloc_r+0x39c>
   8c732:	3408      	adds	r4, #8
   8c734:	f10a 0210 	add.w	r2, sl, #16
   8c738:	6821      	ldr	r1, [r4, #0]
   8c73a:	6011      	str	r1, [r2, #0]
   8c73c:	6861      	ldr	r1, [r4, #4]
   8c73e:	6051      	str	r1, [r2, #4]
   8c740:	68a1      	ldr	r1, [r4, #8]
   8c742:	6091      	str	r1, [r2, #8]
   8c744:	ebab 0205 	sub.w	r2, fp, r5
   8c748:	eb0a 0105 	add.w	r1, sl, r5
   8c74c:	f042 0201 	orr.w	r2, r2, #1
   8c750:	6099      	str	r1, [r3, #8]
   8c752:	604a      	str	r2, [r1, #4]
   8c754:	f8da 3004 	ldr.w	r3, [sl, #4]
   8c758:	4640      	mov	r0, r8
   8c75a:	f003 0301 	and.w	r3, r3, #1
   8c75e:	431d      	orrs	r5, r3
   8c760:	f8ca 5004 	str.w	r5, [sl, #4]
   8c764:	f7ff fb56 	bl	8be14 <__malloc_unlock>
   8c768:	e74d      	b.n	8c606 <_realloc_r+0xee>
   8c76a:	6823      	ldr	r3, [r4, #0]
   8c76c:	2a1b      	cmp	r2, #27
   8c76e:	6003      	str	r3, [r0, #0]
   8c770:	6863      	ldr	r3, [r4, #4]
   8c772:	6043      	str	r3, [r0, #4]
   8c774:	d849      	bhi.n	8c80a <_realloc_r+0x2f2>
   8c776:	f104 0208 	add.w	r2, r4, #8
   8c77a:	f100 0308 	add.w	r3, r0, #8
   8c77e:	e729      	b.n	8c5d4 <_realloc_r+0xbc>
   8c780:	ebac 0205 	sub.w	r2, ip, r5
   8c784:	eb09 0105 	add.w	r1, r9, r5
   8c788:	f042 0201 	orr.w	r2, r2, #1
   8c78c:	6099      	str	r1, [r3, #8]
   8c78e:	604a      	str	r2, [r1, #4]
   8c790:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c794:	4640      	mov	r0, r8
   8c796:	f003 0301 	and.w	r3, r3, #1
   8c79a:	431d      	orrs	r5, r3
   8c79c:	f844 5c04 	str.w	r5, [r4, #-4]
   8c7a0:	f7ff fb38 	bl	8be14 <__malloc_unlock>
   8c7a4:	4626      	mov	r6, r4
   8c7a6:	e72e      	b.n	8c606 <_realloc_r+0xee>
   8c7a8:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8c7ac:	461f      	mov	r7, r3
   8c7ae:	60ca      	str	r2, [r1, #12]
   8c7b0:	6091      	str	r1, [r2, #8]
   8c7b2:	e752      	b.n	8c65a <_realloc_r+0x142>
   8c7b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8c7b8:	f023 0303 	bic.w	r3, r3, #3
   8c7bc:	441f      	add	r7, r3
   8c7be:	e74c      	b.n	8c65a <_realloc_r+0x142>
   8c7c0:	4656      	mov	r6, sl
   8c7c2:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c7c6:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8c7ca:	1f3a      	subs	r2, r7, #4
   8c7cc:	2a24      	cmp	r2, #36	; 0x24
   8c7ce:	60c1      	str	r1, [r0, #12]
   8c7d0:	6088      	str	r0, [r1, #8]
   8c7d2:	d827      	bhi.n	8c824 <_realloc_r+0x30c>
   8c7d4:	2a13      	cmp	r2, #19
   8c7d6:	d923      	bls.n	8c820 <_realloc_r+0x308>
   8c7d8:	6821      	ldr	r1, [r4, #0]
   8c7da:	2a1b      	cmp	r2, #27
   8c7dc:	f8ca 1008 	str.w	r1, [sl, #8]
   8c7e0:	6861      	ldr	r1, [r4, #4]
   8c7e2:	f8ca 100c 	str.w	r1, [sl, #12]
   8c7e6:	d82f      	bhi.n	8c848 <_realloc_r+0x330>
   8c7e8:	3408      	adds	r4, #8
   8c7ea:	f10a 0210 	add.w	r2, sl, #16
   8c7ee:	6821      	ldr	r1, [r4, #0]
   8c7f0:	461f      	mov	r7, r3
   8c7f2:	6011      	str	r1, [r2, #0]
   8c7f4:	6863      	ldr	r3, [r4, #4]
   8c7f6:	46d1      	mov	r9, sl
   8c7f8:	6053      	str	r3, [r2, #4]
   8c7fa:	68a3      	ldr	r3, [r4, #8]
   8c7fc:	4634      	mov	r4, r6
   8c7fe:	6093      	str	r3, [r2, #8]
   8c800:	e72b      	b.n	8c65a <_realloc_r+0x142>
   8c802:	4621      	mov	r1, r4
   8c804:	f7ff fa96 	bl	8bd34 <memmove>
   8c808:	e6ea      	b.n	8c5e0 <_realloc_r+0xc8>
   8c80a:	68a3      	ldr	r3, [r4, #8]
   8c80c:	2a24      	cmp	r2, #36	; 0x24
   8c80e:	6083      	str	r3, [r0, #8]
   8c810:	68e3      	ldr	r3, [r4, #12]
   8c812:	60c3      	str	r3, [r0, #12]
   8c814:	d024      	beq.n	8c860 <_realloc_r+0x348>
   8c816:	f104 0210 	add.w	r2, r4, #16
   8c81a:	f100 0310 	add.w	r3, r0, #16
   8c81e:	e6d9      	b.n	8c5d4 <_realloc_r+0xbc>
   8c820:	4632      	mov	r2, r6
   8c822:	e7e4      	b.n	8c7ee <_realloc_r+0x2d6>
   8c824:	4621      	mov	r1, r4
   8c826:	4630      	mov	r0, r6
   8c828:	461f      	mov	r7, r3
   8c82a:	46d1      	mov	r9, sl
   8c82c:	f7ff fa82 	bl	8bd34 <memmove>
   8c830:	4634      	mov	r4, r6
   8c832:	e712      	b.n	8c65a <_realloc_r+0x142>
   8c834:	4633      	mov	r3, r6
   8c836:	e707      	b.n	8c648 <_realloc_r+0x130>
   8c838:	4621      	mov	r1, r4
   8c83a:	4630      	mov	r0, r6
   8c83c:	4667      	mov	r7, ip
   8c83e:	46d1      	mov	r9, sl
   8c840:	f7ff fa78 	bl	8bd34 <memmove>
   8c844:	4634      	mov	r4, r6
   8c846:	e708      	b.n	8c65a <_realloc_r+0x142>
   8c848:	68a1      	ldr	r1, [r4, #8]
   8c84a:	2a24      	cmp	r2, #36	; 0x24
   8c84c:	f8ca 1010 	str.w	r1, [sl, #16]
   8c850:	68e1      	ldr	r1, [r4, #12]
   8c852:	f8ca 1014 	str.w	r1, [sl, #20]
   8c856:	d023      	beq.n	8c8a0 <_realloc_r+0x388>
   8c858:	3410      	adds	r4, #16
   8c85a:	f10a 0218 	add.w	r2, sl, #24
   8c85e:	e7c6      	b.n	8c7ee <_realloc_r+0x2d6>
   8c860:	6923      	ldr	r3, [r4, #16]
   8c862:	f104 0218 	add.w	r2, r4, #24
   8c866:	6103      	str	r3, [r0, #16]
   8c868:	6961      	ldr	r1, [r4, #20]
   8c86a:	f100 0318 	add.w	r3, r0, #24
   8c86e:	6141      	str	r1, [r0, #20]
   8c870:	e6b0      	b.n	8c5d4 <_realloc_r+0xbc>
   8c872:	bf00      	nop
   8c874:	200009e0 	.word	0x200009e0
   8c878:	68a3      	ldr	r3, [r4, #8]
   8c87a:	2a24      	cmp	r2, #36	; 0x24
   8c87c:	f8ca 3010 	str.w	r3, [sl, #16]
   8c880:	68e3      	ldr	r3, [r4, #12]
   8c882:	f8ca 3014 	str.w	r3, [sl, #20]
   8c886:	d021      	beq.n	8c8cc <_realloc_r+0x3b4>
   8c888:	3410      	adds	r4, #16
   8c88a:	f10a 0318 	add.w	r3, sl, #24
   8c88e:	e6db      	b.n	8c648 <_realloc_r+0x130>
   8c890:	4632      	mov	r2, r6
   8c892:	e751      	b.n	8c738 <_realloc_r+0x220>
   8c894:	4621      	mov	r1, r4
   8c896:	4630      	mov	r0, r6
   8c898:	f7ff fa4c 	bl	8bd34 <memmove>
   8c89c:	4b15      	ldr	r3, [pc, #84]	; (8c8f4 <_realloc_r+0x3dc>)
   8c89e:	e751      	b.n	8c744 <_realloc_r+0x22c>
   8c8a0:	6921      	ldr	r1, [r4, #16]
   8c8a2:	f10a 0220 	add.w	r2, sl, #32
   8c8a6:	f8ca 1018 	str.w	r1, [sl, #24]
   8c8aa:	6961      	ldr	r1, [r4, #20]
   8c8ac:	3418      	adds	r4, #24
   8c8ae:	f8ca 101c 	str.w	r1, [sl, #28]
   8c8b2:	e79c      	b.n	8c7ee <_realloc_r+0x2d6>
   8c8b4:	68a1      	ldr	r1, [r4, #8]
   8c8b6:	2a24      	cmp	r2, #36	; 0x24
   8c8b8:	f8ca 1010 	str.w	r1, [sl, #16]
   8c8bc:	68e1      	ldr	r1, [r4, #12]
   8c8be:	f8ca 1014 	str.w	r1, [sl, #20]
   8c8c2:	d00d      	beq.n	8c8e0 <_realloc_r+0x3c8>
   8c8c4:	3410      	adds	r4, #16
   8c8c6:	f10a 0218 	add.w	r2, sl, #24
   8c8ca:	e735      	b.n	8c738 <_realloc_r+0x220>
   8c8cc:	6922      	ldr	r2, [r4, #16]
   8c8ce:	f10a 0320 	add.w	r3, sl, #32
   8c8d2:	f8ca 2018 	str.w	r2, [sl, #24]
   8c8d6:	6962      	ldr	r2, [r4, #20]
   8c8d8:	3418      	adds	r4, #24
   8c8da:	f8ca 201c 	str.w	r2, [sl, #28]
   8c8de:	e6b3      	b.n	8c648 <_realloc_r+0x130>
   8c8e0:	6921      	ldr	r1, [r4, #16]
   8c8e2:	f10a 0220 	add.w	r2, sl, #32
   8c8e6:	f8ca 1018 	str.w	r1, [sl, #24]
   8c8ea:	6961      	ldr	r1, [r4, #20]
   8c8ec:	3418      	adds	r4, #24
   8c8ee:	f8ca 101c 	str.w	r1, [sl, #28]
   8c8f2:	e721      	b.n	8c738 <_realloc_r+0x220>
   8c8f4:	200009e0 	.word	0x200009e0

0008c8f8 <frexp>:
   8c8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c8fa:	4617      	mov	r7, r2
   8c8fc:	2200      	movs	r2, #0
   8c8fe:	f8df c060 	ldr.w	ip, [pc, #96]	; 8c960 <frexp+0x68>
   8c902:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c906:	4563      	cmp	r3, ip
   8c908:	4604      	mov	r4, r0
   8c90a:	460d      	mov	r5, r1
   8c90c:	603a      	str	r2, [r7, #0]
   8c90e:	dc22      	bgt.n	8c956 <frexp+0x5e>
   8c910:	4684      	mov	ip, r0
   8c912:	ea53 0c0c 	orrs.w	ip, r3, ip
   8c916:	d01e      	beq.n	8c956 <frexp+0x5e>
   8c918:	f8df c048 	ldr.w	ip, [pc, #72]	; 8c964 <frexp+0x6c>
   8c91c:	460e      	mov	r6, r1
   8c91e:	ea01 0c0c 	and.w	ip, r1, ip
   8c922:	f1bc 0f00 	cmp.w	ip, #0
   8c926:	d109      	bne.n	8c93c <frexp+0x44>
   8c928:	2200      	movs	r2, #0
   8c92a:	4b0c      	ldr	r3, [pc, #48]	; (8c95c <frexp+0x64>)
   8c92c:	f000 fd70 	bl	8d410 <__aeabi_dmul>
   8c930:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8c934:	4604      	mov	r4, r0
   8c936:	460e      	mov	r6, r1
   8c938:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c93c:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8c940:	151b      	asrs	r3, r3, #20
   8c942:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8c946:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8c94a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8c94e:	4413      	add	r3, r2
   8c950:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8c954:	603b      	str	r3, [r7, #0]
   8c956:	4620      	mov	r0, r4
   8c958:	4629      	mov	r1, r5
   8c95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c95c:	43500000 	.word	0x43500000
   8c960:	7fefffff 	.word	0x7fefffff
   8c964:	7ff00000 	.word	0x7ff00000

0008c968 <_sbrk_r>:
   8c968:	2200      	movs	r2, #0
   8c96a:	b538      	push	{r3, r4, r5, lr}
   8c96c:	4d06      	ldr	r5, [pc, #24]	; (8c988 <_sbrk_r+0x20>)
   8c96e:	4604      	mov	r4, r0
   8c970:	4608      	mov	r0, r1
   8c972:	602a      	str	r2, [r5, #0]
   8c974:	f7f6 fe36 	bl	835e4 <_sbrk>
   8c978:	1c43      	adds	r3, r0, #1
   8c97a:	d000      	beq.n	8c97e <_sbrk_r+0x16>
   8c97c:	bd38      	pop	{r3, r4, r5, pc}
   8c97e:	682b      	ldr	r3, [r5, #0]
   8c980:	2b00      	cmp	r3, #0
   8c982:	d0fb      	beq.n	8c97c <_sbrk_r+0x14>
   8c984:	6023      	str	r3, [r4, #0]
   8c986:	bd38      	pop	{r3, r4, r5, pc}
   8c988:	2000186c 	.word	0x2000186c

0008c98c <__sread>:
   8c98c:	b510      	push	{r4, lr}
   8c98e:	460c      	mov	r4, r1
   8c990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c994:	f000 fb16 	bl	8cfc4 <_read_r>
   8c998:	2800      	cmp	r0, #0
   8c99a:	db03      	blt.n	8c9a4 <__sread+0x18>
   8c99c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8c99e:	4403      	add	r3, r0
   8c9a0:	6523      	str	r3, [r4, #80]	; 0x50
   8c9a2:	bd10      	pop	{r4, pc}
   8c9a4:	89a3      	ldrh	r3, [r4, #12]
   8c9a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8c9aa:	81a3      	strh	r3, [r4, #12]
   8c9ac:	bd10      	pop	{r4, pc}
   8c9ae:	bf00      	nop

0008c9b0 <__swrite>:
   8c9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c9b4:	460c      	mov	r4, r1
   8c9b6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8c9ba:	461f      	mov	r7, r3
   8c9bc:	05cb      	lsls	r3, r1, #23
   8c9be:	4616      	mov	r6, r2
   8c9c0:	4605      	mov	r5, r0
   8c9c2:	d40b      	bmi.n	8c9dc <__swrite+0x2c>
   8c9c4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8c9c8:	81a1      	strh	r1, [r4, #12]
   8c9ca:	463b      	mov	r3, r7
   8c9cc:	4632      	mov	r2, r6
   8c9ce:	4628      	mov	r0, r5
   8c9d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c9d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8c9d8:	f000 b980 	b.w	8ccdc <_write_r>
   8c9dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c9e0:	2302      	movs	r3, #2
   8c9e2:	2200      	movs	r2, #0
   8c9e4:	f000 fad8 	bl	8cf98 <_lseek_r>
   8c9e8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8c9ec:	e7ea      	b.n	8c9c4 <__swrite+0x14>
   8c9ee:	bf00      	nop

0008c9f0 <__sseek>:
   8c9f0:	b510      	push	{r4, lr}
   8c9f2:	460c      	mov	r4, r1
   8c9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c9f8:	f000 face 	bl	8cf98 <_lseek_r>
   8c9fc:	89a3      	ldrh	r3, [r4, #12]
   8c9fe:	1c42      	adds	r2, r0, #1
   8ca00:	bf0e      	itee	eq
   8ca02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8ca06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8ca0a:	6520      	strne	r0, [r4, #80]	; 0x50
   8ca0c:	81a3      	strh	r3, [r4, #12]
   8ca0e:	bd10      	pop	{r4, pc}

0008ca10 <__sclose>:
   8ca10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ca14:	f000 ba0c 	b.w	8ce30 <_close_r>

0008ca18 <strlen>:
   8ca18:	f020 0103 	bic.w	r1, r0, #3
   8ca1c:	f010 0003 	ands.w	r0, r0, #3
   8ca20:	f1c0 0000 	rsb	r0, r0, #0
   8ca24:	f851 3b04 	ldr.w	r3, [r1], #4
   8ca28:	f100 0c04 	add.w	ip, r0, #4
   8ca2c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8ca30:	f06f 0200 	mvn.w	r2, #0
   8ca34:	bf1c      	itt	ne
   8ca36:	fa22 f20c 	lsrne.w	r2, r2, ip
   8ca3a:	4313      	orrne	r3, r2
   8ca3c:	f04f 0c01 	mov.w	ip, #1
   8ca40:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8ca44:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8ca48:	eba3 020c 	sub.w	r2, r3, ip
   8ca4c:	ea22 0203 	bic.w	r2, r2, r3
   8ca50:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8ca54:	bf04      	itt	eq
   8ca56:	f851 3b04 	ldreq.w	r3, [r1], #4
   8ca5a:	3004      	addeq	r0, #4
   8ca5c:	d0f4      	beq.n	8ca48 <strlen+0x30>
   8ca5e:	f1c2 0100 	rsb	r1, r2, #0
   8ca62:	ea02 0201 	and.w	r2, r2, r1
   8ca66:	fab2 f282 	clz	r2, r2
   8ca6a:	f1c2 021f 	rsb	r2, r2, #31
   8ca6e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8ca72:	4770      	bx	lr

0008ca74 <strncpy>:
   8ca74:	b470      	push	{r4, r5, r6}
   8ca76:	ea40 0401 	orr.w	r4, r0, r1
   8ca7a:	07a3      	lsls	r3, r4, #30
   8ca7c:	d122      	bne.n	8cac4 <strncpy+0x50>
   8ca7e:	2a03      	cmp	r2, #3
   8ca80:	d920      	bls.n	8cac4 <strncpy+0x50>
   8ca82:	460b      	mov	r3, r1
   8ca84:	4604      	mov	r4, r0
   8ca86:	4619      	mov	r1, r3
   8ca88:	f853 6b04 	ldr.w	r6, [r3], #4
   8ca8c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8ca90:	ea25 0506 	bic.w	r5, r5, r6
   8ca94:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8ca98:	d115      	bne.n	8cac6 <strncpy+0x52>
   8ca9a:	3a04      	subs	r2, #4
   8ca9c:	2a03      	cmp	r2, #3
   8ca9e:	4619      	mov	r1, r3
   8caa0:	f844 6b04 	str.w	r6, [r4], #4
   8caa4:	d8ef      	bhi.n	8ca86 <strncpy+0x12>
   8caa6:	1e4d      	subs	r5, r1, #1
   8caa8:	b152      	cbz	r2, 8cac0 <strncpy+0x4c>
   8caaa:	4623      	mov	r3, r4
   8caac:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8cab0:	1e56      	subs	r6, r2, #1
   8cab2:	f803 1b01 	strb.w	r1, [r3], #1
   8cab6:	b141      	cbz	r1, 8caca <strncpy+0x56>
   8cab8:	4632      	mov	r2, r6
   8caba:	461c      	mov	r4, r3
   8cabc:	2a00      	cmp	r2, #0
   8cabe:	d1f4      	bne.n	8caaa <strncpy+0x36>
   8cac0:	bc70      	pop	{r4, r5, r6}
   8cac2:	4770      	bx	lr
   8cac4:	4604      	mov	r4, r0
   8cac6:	1e4d      	subs	r5, r1, #1
   8cac8:	e7ee      	b.n	8caa8 <strncpy+0x34>
   8caca:	4422      	add	r2, r4
   8cacc:	2e00      	cmp	r6, #0
   8cace:	d0f7      	beq.n	8cac0 <strncpy+0x4c>
   8cad0:	f803 1b01 	strb.w	r1, [r3], #1
   8cad4:	4293      	cmp	r3, r2
   8cad6:	d1fb      	bne.n	8cad0 <strncpy+0x5c>
   8cad8:	bc70      	pop	{r4, r5, r6}
   8cada:	4770      	bx	lr

0008cadc <__ssprint_r>:
   8cadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8cae0:	6893      	ldr	r3, [r2, #8]
   8cae2:	4691      	mov	r9, r2
   8cae4:	b083      	sub	sp, #12
   8cae6:	2b00      	cmp	r3, #0
   8cae8:	d06d      	beq.n	8cbc6 <__ssprint_r+0xea>
   8caea:	6817      	ldr	r7, [r2, #0]
   8caec:	4680      	mov	r8, r0
   8caee:	460c      	mov	r4, r1
   8caf0:	6808      	ldr	r0, [r1, #0]
   8caf2:	688d      	ldr	r5, [r1, #8]
   8caf4:	3708      	adds	r7, #8
   8caf6:	e043      	b.n	8cb80 <__ssprint_r+0xa4>
   8caf8:	89a3      	ldrh	r3, [r4, #12]
   8cafa:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8cafe:	d02e      	beq.n	8cb5e <__ssprint_r+0x82>
   8cb00:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8cb04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8cb08:	eba0 0a01 	sub.w	sl, r0, r1
   8cb0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8cb10:	eb0a 0006 	add.w	r0, sl, r6
   8cb14:	106d      	asrs	r5, r5, #1
   8cb16:	3001      	adds	r0, #1
   8cb18:	42a8      	cmp	r0, r5
   8cb1a:	462a      	mov	r2, r5
   8cb1c:	bf84      	itt	hi
   8cb1e:	4605      	movhi	r5, r0
   8cb20:	462a      	movhi	r2, r5
   8cb22:	055b      	lsls	r3, r3, #21
   8cb24:	d536      	bpl.n	8cb94 <__ssprint_r+0xb8>
   8cb26:	4611      	mov	r1, r2
   8cb28:	4640      	mov	r0, r8
   8cb2a:	f7fe fdff 	bl	8b72c <_malloc_r>
   8cb2e:	2800      	cmp	r0, #0
   8cb30:	d03a      	beq.n	8cba8 <__ssprint_r+0xcc>
   8cb32:	4652      	mov	r2, sl
   8cb34:	6921      	ldr	r1, [r4, #16]
   8cb36:	9001      	str	r0, [sp, #4]
   8cb38:	f7fa faa4 	bl	87084 <memcpy>
   8cb3c:	89a2      	ldrh	r2, [r4, #12]
   8cb3e:	9b01      	ldr	r3, [sp, #4]
   8cb40:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8cb44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8cb48:	81a2      	strh	r2, [r4, #12]
   8cb4a:	eba5 020a 	sub.w	r2, r5, sl
   8cb4e:	eb03 000a 	add.w	r0, r3, sl
   8cb52:	6165      	str	r5, [r4, #20]
   8cb54:	46b2      	mov	sl, r6
   8cb56:	4635      	mov	r5, r6
   8cb58:	6123      	str	r3, [r4, #16]
   8cb5a:	6020      	str	r0, [r4, #0]
   8cb5c:	60a2      	str	r2, [r4, #8]
   8cb5e:	4659      	mov	r1, fp
   8cb60:	4652      	mov	r2, sl
   8cb62:	f7ff f8e7 	bl	8bd34 <memmove>
   8cb66:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8cb6a:	68a1      	ldr	r1, [r4, #8]
   8cb6c:	6820      	ldr	r0, [r4, #0]
   8cb6e:	1b4d      	subs	r5, r1, r5
   8cb70:	4450      	add	r0, sl
   8cb72:	1b9e      	subs	r6, r3, r6
   8cb74:	60a5      	str	r5, [r4, #8]
   8cb76:	6020      	str	r0, [r4, #0]
   8cb78:	f8c9 6008 	str.w	r6, [r9, #8]
   8cb7c:	b31e      	cbz	r6, 8cbc6 <__ssprint_r+0xea>
   8cb7e:	3708      	adds	r7, #8
   8cb80:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8cb84:	2e00      	cmp	r6, #0
   8cb86:	d0fa      	beq.n	8cb7e <__ssprint_r+0xa2>
   8cb88:	42b5      	cmp	r5, r6
   8cb8a:	46aa      	mov	sl, r5
   8cb8c:	d9b4      	bls.n	8caf8 <__ssprint_r+0x1c>
   8cb8e:	4635      	mov	r5, r6
   8cb90:	46b2      	mov	sl, r6
   8cb92:	e7e4      	b.n	8cb5e <__ssprint_r+0x82>
   8cb94:	4640      	mov	r0, r8
   8cb96:	f7ff fcbf 	bl	8c518 <_realloc_r>
   8cb9a:	4603      	mov	r3, r0
   8cb9c:	2800      	cmp	r0, #0
   8cb9e:	d1d4      	bne.n	8cb4a <__ssprint_r+0x6e>
   8cba0:	4640      	mov	r0, r8
   8cba2:	6921      	ldr	r1, [r4, #16]
   8cba4:	f7fe fa98 	bl	8b0d8 <_free_r>
   8cba8:	230c      	movs	r3, #12
   8cbaa:	2200      	movs	r2, #0
   8cbac:	f04f 30ff 	mov.w	r0, #4294967295
   8cbb0:	f8c8 3000 	str.w	r3, [r8]
   8cbb4:	89a3      	ldrh	r3, [r4, #12]
   8cbb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8cbba:	81a3      	strh	r3, [r4, #12]
   8cbbc:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8cbc0:	b003      	add	sp, #12
   8cbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cbc6:	2000      	movs	r0, #0
   8cbc8:	f8c9 0004 	str.w	r0, [r9, #4]
   8cbcc:	b003      	add	sp, #12
   8cbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8cbd2:	bf00      	nop

0008cbd4 <__swbuf_r>:
   8cbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cbd6:	460d      	mov	r5, r1
   8cbd8:	4614      	mov	r4, r2
   8cbda:	4606      	mov	r6, r0
   8cbdc:	b110      	cbz	r0, 8cbe4 <__swbuf_r+0x10>
   8cbde:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8cbe0:	2b00      	cmp	r3, #0
   8cbe2:	d043      	beq.n	8cc6c <__swbuf_r+0x98>
   8cbe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8cbe8:	69a3      	ldr	r3, [r4, #24]
   8cbea:	0717      	lsls	r7, r2, #28
   8cbec:	60a3      	str	r3, [r4, #8]
   8cbee:	b290      	uxth	r0, r2
   8cbf0:	d51b      	bpl.n	8cc2a <__swbuf_r+0x56>
   8cbf2:	6923      	ldr	r3, [r4, #16]
   8cbf4:	b1cb      	cbz	r3, 8cc2a <__swbuf_r+0x56>
   8cbf6:	b2ed      	uxtb	r5, r5
   8cbf8:	0481      	lsls	r1, r0, #18
   8cbfa:	462f      	mov	r7, r5
   8cbfc:	d522      	bpl.n	8cc44 <__swbuf_r+0x70>
   8cbfe:	6822      	ldr	r2, [r4, #0]
   8cc00:	6961      	ldr	r1, [r4, #20]
   8cc02:	1ad3      	subs	r3, r2, r3
   8cc04:	4299      	cmp	r1, r3
   8cc06:	dd29      	ble.n	8cc5c <__swbuf_r+0x88>
   8cc08:	3301      	adds	r3, #1
   8cc0a:	68a1      	ldr	r1, [r4, #8]
   8cc0c:	1c50      	adds	r0, r2, #1
   8cc0e:	3901      	subs	r1, #1
   8cc10:	60a1      	str	r1, [r4, #8]
   8cc12:	6020      	str	r0, [r4, #0]
   8cc14:	7015      	strb	r5, [r2, #0]
   8cc16:	6962      	ldr	r2, [r4, #20]
   8cc18:	429a      	cmp	r2, r3
   8cc1a:	d02a      	beq.n	8cc72 <__swbuf_r+0x9e>
   8cc1c:	89a3      	ldrh	r3, [r4, #12]
   8cc1e:	07db      	lsls	r3, r3, #31
   8cc20:	d501      	bpl.n	8cc26 <__swbuf_r+0x52>
   8cc22:	2d0a      	cmp	r5, #10
   8cc24:	d025      	beq.n	8cc72 <__swbuf_r+0x9e>
   8cc26:	4638      	mov	r0, r7
   8cc28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cc2a:	4621      	mov	r1, r4
   8cc2c:	4630      	mov	r0, r6
   8cc2e:	f7fc ffcf 	bl	89bd0 <__swsetup_r>
   8cc32:	bb20      	cbnz	r0, 8cc7e <__swbuf_r+0xaa>
   8cc34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8cc38:	b2ed      	uxtb	r5, r5
   8cc3a:	b290      	uxth	r0, r2
   8cc3c:	0481      	lsls	r1, r0, #18
   8cc3e:	462f      	mov	r7, r5
   8cc40:	6923      	ldr	r3, [r4, #16]
   8cc42:	d4dc      	bmi.n	8cbfe <__swbuf_r+0x2a>
   8cc44:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8cc46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8cc4a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8cc4e:	81a2      	strh	r2, [r4, #12]
   8cc50:	6822      	ldr	r2, [r4, #0]
   8cc52:	6661      	str	r1, [r4, #100]	; 0x64
   8cc54:	6961      	ldr	r1, [r4, #20]
   8cc56:	1ad3      	subs	r3, r2, r3
   8cc58:	4299      	cmp	r1, r3
   8cc5a:	dcd5      	bgt.n	8cc08 <__swbuf_r+0x34>
   8cc5c:	4621      	mov	r1, r4
   8cc5e:	4630      	mov	r0, r6
   8cc60:	f7fe f8ba 	bl	8add8 <_fflush_r>
   8cc64:	b958      	cbnz	r0, 8cc7e <__swbuf_r+0xaa>
   8cc66:	2301      	movs	r3, #1
   8cc68:	6822      	ldr	r2, [r4, #0]
   8cc6a:	e7ce      	b.n	8cc0a <__swbuf_r+0x36>
   8cc6c:	f7fe f910 	bl	8ae90 <__sinit>
   8cc70:	e7b8      	b.n	8cbe4 <__swbuf_r+0x10>
   8cc72:	4621      	mov	r1, r4
   8cc74:	4630      	mov	r0, r6
   8cc76:	f7fe f8af 	bl	8add8 <_fflush_r>
   8cc7a:	2800      	cmp	r0, #0
   8cc7c:	d0d3      	beq.n	8cc26 <__swbuf_r+0x52>
   8cc7e:	f04f 37ff 	mov.w	r7, #4294967295
   8cc82:	e7d0      	b.n	8cc26 <__swbuf_r+0x52>

0008cc84 <_wcrtomb_r>:
   8cc84:	b570      	push	{r4, r5, r6, lr}
   8cc86:	4606      	mov	r6, r0
   8cc88:	461d      	mov	r5, r3
   8cc8a:	b084      	sub	sp, #16
   8cc8c:	b139      	cbz	r1, 8cc9e <_wcrtomb_r+0x1a>
   8cc8e:	4c0b      	ldr	r4, [pc, #44]	; (8ccbc <_wcrtomb_r+0x38>)
   8cc90:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8cc94:	47a0      	blx	r4
   8cc96:	1c43      	adds	r3, r0, #1
   8cc98:	d00a      	beq.n	8ccb0 <_wcrtomb_r+0x2c>
   8cc9a:	b004      	add	sp, #16
   8cc9c:	bd70      	pop	{r4, r5, r6, pc}
   8cc9e:	460c      	mov	r4, r1
   8cca0:	4906      	ldr	r1, [pc, #24]	; (8ccbc <_wcrtomb_r+0x38>)
   8cca2:	4622      	mov	r2, r4
   8cca4:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8cca8:	a901      	add	r1, sp, #4
   8ccaa:	47a0      	blx	r4
   8ccac:	1c43      	adds	r3, r0, #1
   8ccae:	d1f4      	bne.n	8cc9a <_wcrtomb_r+0x16>
   8ccb0:	2200      	movs	r2, #0
   8ccb2:	238a      	movs	r3, #138	; 0x8a
   8ccb4:	602a      	str	r2, [r5, #0]
   8ccb6:	6033      	str	r3, [r6, #0]
   8ccb8:	b004      	add	sp, #16
   8ccba:	bd70      	pop	{r4, r5, r6, pc}
   8ccbc:	20000874 	.word	0x20000874

0008ccc0 <__ascii_wctomb>:
   8ccc0:	4603      	mov	r3, r0
   8ccc2:	b149      	cbz	r1, 8ccd8 <__ascii_wctomb+0x18>
   8ccc4:	2aff      	cmp	r2, #255	; 0xff
   8ccc6:	d802      	bhi.n	8ccce <__ascii_wctomb+0xe>
   8ccc8:	2001      	movs	r0, #1
   8ccca:	700a      	strb	r2, [r1, #0]
   8cccc:	4770      	bx	lr
   8ccce:	228a      	movs	r2, #138	; 0x8a
   8ccd0:	f04f 30ff 	mov.w	r0, #4294967295
   8ccd4:	601a      	str	r2, [r3, #0]
   8ccd6:	4770      	bx	lr
   8ccd8:	4608      	mov	r0, r1
   8ccda:	4770      	bx	lr

0008ccdc <_write_r>:
   8ccdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ccde:	460f      	mov	r7, r1
   8cce0:	2600      	movs	r6, #0
   8cce2:	4d08      	ldr	r5, [pc, #32]	; (8cd04 <_write_r+0x28>)
   8cce4:	4611      	mov	r1, r2
   8cce6:	4604      	mov	r4, r0
   8cce8:	461a      	mov	r2, r3
   8ccea:	4638      	mov	r0, r7
   8ccec:	602e      	str	r6, [r5, #0]
   8ccee:	f7f9 ffdf 	bl	86cb0 <_write>
   8ccf2:	1c43      	adds	r3, r0, #1
   8ccf4:	d000      	beq.n	8ccf8 <_write_r+0x1c>
   8ccf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ccf8:	682b      	ldr	r3, [r5, #0]
   8ccfa:	2b00      	cmp	r3, #0
   8ccfc:	d0fb      	beq.n	8ccf6 <_write_r+0x1a>
   8ccfe:	6023      	str	r3, [r4, #0]
   8cd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cd02:	bf00      	nop
   8cd04:	2000186c 	.word	0x2000186c

0008cd08 <__register_exitproc>:
   8cd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8cd0c:	f8df a080 	ldr.w	sl, [pc, #128]	; 8cd90 <__register_exitproc+0x88>
   8cd10:	4606      	mov	r6, r0
   8cd12:	f8da 0000 	ldr.w	r0, [sl]
   8cd16:	4698      	mov	r8, r3
   8cd18:	460f      	mov	r7, r1
   8cd1a:	4691      	mov	r9, r2
   8cd1c:	f7fe fc8a 	bl	8b634 <__retarget_lock_acquire_recursive>
   8cd20:	4b1a      	ldr	r3, [pc, #104]	; (8cd8c <__register_exitproc+0x84>)
   8cd22:	681b      	ldr	r3, [r3, #0]
   8cd24:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8cd28:	b324      	cbz	r4, 8cd74 <__register_exitproc+0x6c>
   8cd2a:	6865      	ldr	r5, [r4, #4]
   8cd2c:	2d1f      	cmp	r5, #31
   8cd2e:	dc26      	bgt.n	8cd7e <__register_exitproc+0x76>
   8cd30:	b95e      	cbnz	r6, 8cd4a <__register_exitproc+0x42>
   8cd32:	1c6b      	adds	r3, r5, #1
   8cd34:	3502      	adds	r5, #2
   8cd36:	f8da 0000 	ldr.w	r0, [sl]
   8cd3a:	6063      	str	r3, [r4, #4]
   8cd3c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8cd40:	f7fe fc7a 	bl	8b638 <__retarget_lock_release_recursive>
   8cd44:	2000      	movs	r0, #0
   8cd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8cd4a:	2301      	movs	r3, #1
   8cd4c:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8cd50:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8cd54:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8cd58:	40ab      	lsls	r3, r5
   8cd5a:	431a      	orrs	r2, r3
   8cd5c:	2e02      	cmp	r6, #2
   8cd5e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8cd62:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8cd66:	d1e4      	bne.n	8cd32 <__register_exitproc+0x2a>
   8cd68:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8cd6c:	4313      	orrs	r3, r2
   8cd6e:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8cd72:	e7de      	b.n	8cd32 <__register_exitproc+0x2a>
   8cd74:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8cd78:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8cd7c:	e7d5      	b.n	8cd2a <__register_exitproc+0x22>
   8cd7e:	f8da 0000 	ldr.w	r0, [sl]
   8cd82:	f7fe fc59 	bl	8b638 <__retarget_lock_release_recursive>
   8cd86:	f04f 30ff 	mov.w	r0, #4294967295
   8cd8a:	e7dc      	b.n	8cd46 <__register_exitproc+0x3e>
   8cd8c:	0008da50 	.word	0x0008da50
   8cd90:	20000870 	.word	0x20000870

0008cd94 <__assert_func>:
   8cd94:	4614      	mov	r4, r2
   8cd96:	b500      	push	{lr}
   8cd98:	4d09      	ldr	r5, [pc, #36]	; (8cdc0 <__assert_func+0x2c>)
   8cd9a:	461a      	mov	r2, r3
   8cd9c:	4603      	mov	r3, r0
   8cd9e:	6828      	ldr	r0, [r5, #0]
   8cda0:	b085      	sub	sp, #20
   8cda2:	68c0      	ldr	r0, [r0, #12]
   8cda4:	b144      	cbz	r4, 8cdb8 <__assert_func+0x24>
   8cda6:	4d07      	ldr	r5, [pc, #28]	; (8cdc4 <__assert_func+0x30>)
   8cda8:	9100      	str	r1, [sp, #0]
   8cdaa:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8cdae:	4906      	ldr	r1, [pc, #24]	; (8cdc8 <__assert_func+0x34>)
   8cdb0:	f000 f8b6 	bl	8cf20 <fiprintf>
   8cdb4:	f000 f91c 	bl	8cff0 <abort>
   8cdb8:	4d04      	ldr	r5, [pc, #16]	; (8cdcc <__assert_func+0x38>)
   8cdba:	462c      	mov	r4, r5
   8cdbc:	e7f4      	b.n	8cda8 <__assert_func+0x14>
   8cdbe:	bf00      	nop
   8cdc0:	20000440 	.word	0x20000440
   8cdc4:	0008dd04 	.word	0x0008dd04
   8cdc8:	0008dd14 	.word	0x0008dd14
   8cdcc:	0008dd10 	.word	0x0008dd10

0008cdd0 <_calloc_r>:
   8cdd0:	b510      	push	{r4, lr}
   8cdd2:	fb02 f101 	mul.w	r1, r2, r1
   8cdd6:	f7fe fca9 	bl	8b72c <_malloc_r>
   8cdda:	4604      	mov	r4, r0
   8cddc:	b168      	cbz	r0, 8cdfa <_calloc_r+0x2a>
   8cdde:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8cde2:	f022 0203 	bic.w	r2, r2, #3
   8cde6:	3a04      	subs	r2, #4
   8cde8:	2a24      	cmp	r2, #36	; 0x24
   8cdea:	d818      	bhi.n	8ce1e <_calloc_r+0x4e>
   8cdec:	2a13      	cmp	r2, #19
   8cdee:	d806      	bhi.n	8cdfe <_calloc_r+0x2e>
   8cdf0:	4602      	mov	r2, r0
   8cdf2:	2300      	movs	r3, #0
   8cdf4:	e9c2 3300 	strd	r3, r3, [r2]
   8cdf8:	6093      	str	r3, [r2, #8]
   8cdfa:	4620      	mov	r0, r4
   8cdfc:	bd10      	pop	{r4, pc}
   8cdfe:	2300      	movs	r3, #0
   8ce00:	2a1b      	cmp	r2, #27
   8ce02:	e9c0 3300 	strd	r3, r3, [r0]
   8ce06:	d90f      	bls.n	8ce28 <_calloc_r+0x58>
   8ce08:	2a24      	cmp	r2, #36	; 0x24
   8ce0a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8ce0e:	bf0a      	itet	eq
   8ce10:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8ce14:	f100 0210 	addne.w	r2, r0, #16
   8ce18:	f100 0218 	addeq.w	r2, r0, #24
   8ce1c:	e7e9      	b.n	8cdf2 <_calloc_r+0x22>
   8ce1e:	2100      	movs	r1, #0
   8ce20:	f7fa f9a6 	bl	87170 <memset>
   8ce24:	4620      	mov	r0, r4
   8ce26:	bd10      	pop	{r4, pc}
   8ce28:	f100 0208 	add.w	r2, r0, #8
   8ce2c:	e7e1      	b.n	8cdf2 <_calloc_r+0x22>
   8ce2e:	bf00      	nop

0008ce30 <_close_r>:
   8ce30:	2200      	movs	r2, #0
   8ce32:	b538      	push	{r3, r4, r5, lr}
   8ce34:	4d06      	ldr	r5, [pc, #24]	; (8ce50 <_close_r+0x20>)
   8ce36:	4604      	mov	r4, r0
   8ce38:	4608      	mov	r0, r1
   8ce3a:	602a      	str	r2, [r5, #0]
   8ce3c:	f7f6 fbfe 	bl	8363c <_close>
   8ce40:	1c43      	adds	r3, r0, #1
   8ce42:	d000      	beq.n	8ce46 <_close_r+0x16>
   8ce44:	bd38      	pop	{r3, r4, r5, pc}
   8ce46:	682b      	ldr	r3, [r5, #0]
   8ce48:	2b00      	cmp	r3, #0
   8ce4a:	d0fb      	beq.n	8ce44 <_close_r+0x14>
   8ce4c:	6023      	str	r3, [r4, #0]
   8ce4e:	bd38      	pop	{r3, r4, r5, pc}
   8ce50:	2000186c 	.word	0x2000186c

0008ce54 <_fclose_r>:
   8ce54:	b570      	push	{r4, r5, r6, lr}
   8ce56:	2900      	cmp	r1, #0
   8ce58:	d04b      	beq.n	8cef2 <_fclose_r+0x9e>
   8ce5a:	460c      	mov	r4, r1
   8ce5c:	4605      	mov	r5, r0
   8ce5e:	b110      	cbz	r0, 8ce66 <_fclose_r+0x12>
   8ce60:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8ce62:	2b00      	cmp	r3, #0
   8ce64:	d048      	beq.n	8cef8 <_fclose_r+0xa4>
   8ce66:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8ce68:	07d8      	lsls	r0, r3, #31
   8ce6a:	d534      	bpl.n	8ced6 <_fclose_r+0x82>
   8ce6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ce70:	2b00      	cmp	r3, #0
   8ce72:	d03e      	beq.n	8cef2 <_fclose_r+0x9e>
   8ce74:	4621      	mov	r1, r4
   8ce76:	4628      	mov	r0, r5
   8ce78:	f7fd ff16 	bl	8aca8 <__sflush_r>
   8ce7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8ce7e:	4606      	mov	r6, r0
   8ce80:	b133      	cbz	r3, 8ce90 <_fclose_r+0x3c>
   8ce82:	4628      	mov	r0, r5
   8ce84:	69e1      	ldr	r1, [r4, #28]
   8ce86:	4798      	blx	r3
   8ce88:	2800      	cmp	r0, #0
   8ce8a:	bfb8      	it	lt
   8ce8c:	f04f 36ff 	movlt.w	r6, #4294967295
   8ce90:	89a3      	ldrh	r3, [r4, #12]
   8ce92:	061a      	lsls	r2, r3, #24
   8ce94:	d43b      	bmi.n	8cf0e <_fclose_r+0xba>
   8ce96:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8ce98:	b141      	cbz	r1, 8ceac <_fclose_r+0x58>
   8ce9a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8ce9e:	4299      	cmp	r1, r3
   8cea0:	d002      	beq.n	8cea8 <_fclose_r+0x54>
   8cea2:	4628      	mov	r0, r5
   8cea4:	f7fe f918 	bl	8b0d8 <_free_r>
   8cea8:	2300      	movs	r3, #0
   8ceaa:	6323      	str	r3, [r4, #48]	; 0x30
   8ceac:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8ceae:	b121      	cbz	r1, 8ceba <_fclose_r+0x66>
   8ceb0:	4628      	mov	r0, r5
   8ceb2:	f7fe f911 	bl	8b0d8 <_free_r>
   8ceb6:	2300      	movs	r3, #0
   8ceb8:	6463      	str	r3, [r4, #68]	; 0x44
   8ceba:	f7fe f817 	bl	8aeec <__sfp_lock_acquire>
   8cebe:	2200      	movs	r2, #0
   8cec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8cec2:	81a2      	strh	r2, [r4, #12]
   8cec4:	07db      	lsls	r3, r3, #31
   8cec6:	d527      	bpl.n	8cf18 <_fclose_r+0xc4>
   8cec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8ceca:	f7fe fbb1 	bl	8b630 <__retarget_lock_close_recursive>
   8cece:	f7fe f813 	bl	8aef8 <__sfp_lock_release>
   8ced2:	4630      	mov	r0, r6
   8ced4:	bd70      	pop	{r4, r5, r6, pc}
   8ced6:	89a3      	ldrh	r3, [r4, #12]
   8ced8:	0599      	lsls	r1, r3, #22
   8ceda:	d4cb      	bmi.n	8ce74 <_fclose_r+0x20>
   8cedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cede:	f7fe fba9 	bl	8b634 <__retarget_lock_acquire_recursive>
   8cee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8cee6:	2b00      	cmp	r3, #0
   8cee8:	d1c4      	bne.n	8ce74 <_fclose_r+0x20>
   8ceea:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8ceec:	f016 0601 	ands.w	r6, r6, #1
   8cef0:	d008      	beq.n	8cf04 <_fclose_r+0xb0>
   8cef2:	2600      	movs	r6, #0
   8cef4:	4630      	mov	r0, r6
   8cef6:	bd70      	pop	{r4, r5, r6, pc}
   8cef8:	f7fd ffca 	bl	8ae90 <__sinit>
   8cefc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8cefe:	07d8      	lsls	r0, r3, #31
   8cf00:	d4b4      	bmi.n	8ce6c <_fclose_r+0x18>
   8cf02:	e7e8      	b.n	8ced6 <_fclose_r+0x82>
   8cf04:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cf06:	f7fe fb97 	bl	8b638 <__retarget_lock_release_recursive>
   8cf0a:	4630      	mov	r0, r6
   8cf0c:	bd70      	pop	{r4, r5, r6, pc}
   8cf0e:	4628      	mov	r0, r5
   8cf10:	6921      	ldr	r1, [r4, #16]
   8cf12:	f7fe f8e1 	bl	8b0d8 <_free_r>
   8cf16:	e7be      	b.n	8ce96 <_fclose_r+0x42>
   8cf18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cf1a:	f7fe fb8d 	bl	8b638 <__retarget_lock_release_recursive>
   8cf1e:	e7d3      	b.n	8cec8 <_fclose_r+0x74>

0008cf20 <fiprintf>:
   8cf20:	b40e      	push	{r1, r2, r3}
   8cf22:	b510      	push	{r4, lr}
   8cf24:	b083      	sub	sp, #12
   8cf26:	ab05      	add	r3, sp, #20
   8cf28:	4c06      	ldr	r4, [pc, #24]	; (8cf44 <fiprintf+0x24>)
   8cf2a:	f853 2b04 	ldr.w	r2, [r3], #4
   8cf2e:	4601      	mov	r1, r0
   8cf30:	6820      	ldr	r0, [r4, #0]
   8cf32:	9301      	str	r3, [sp, #4]
   8cf34:	f7fb ff72 	bl	88e1c <_vfiprintf_r>
   8cf38:	b003      	add	sp, #12
   8cf3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8cf3e:	b003      	add	sp, #12
   8cf40:	4770      	bx	lr
   8cf42:	bf00      	nop
   8cf44:	20000440 	.word	0x20000440

0008cf48 <_fstat_r>:
   8cf48:	b570      	push	{r4, r5, r6, lr}
   8cf4a:	460c      	mov	r4, r1
   8cf4c:	4603      	mov	r3, r0
   8cf4e:	2600      	movs	r6, #0
   8cf50:	4d07      	ldr	r5, [pc, #28]	; (8cf70 <_fstat_r+0x28>)
   8cf52:	4620      	mov	r0, r4
   8cf54:	4611      	mov	r1, r2
   8cf56:	461c      	mov	r4, r3
   8cf58:	602e      	str	r6, [r5, #0]
   8cf5a:	f7f6 fb7a 	bl	83652 <_fstat>
   8cf5e:	1c43      	adds	r3, r0, #1
   8cf60:	d000      	beq.n	8cf64 <_fstat_r+0x1c>
   8cf62:	bd70      	pop	{r4, r5, r6, pc}
   8cf64:	682b      	ldr	r3, [r5, #0]
   8cf66:	2b00      	cmp	r3, #0
   8cf68:	d0fb      	beq.n	8cf62 <_fstat_r+0x1a>
   8cf6a:	6023      	str	r3, [r4, #0]
   8cf6c:	bd70      	pop	{r4, r5, r6, pc}
   8cf6e:	bf00      	nop
   8cf70:	2000186c 	.word	0x2000186c

0008cf74 <_isatty_r>:
   8cf74:	2200      	movs	r2, #0
   8cf76:	b538      	push	{r3, r4, r5, lr}
   8cf78:	4d06      	ldr	r5, [pc, #24]	; (8cf94 <_isatty_r+0x20>)
   8cf7a:	4604      	mov	r4, r0
   8cf7c:	4608      	mov	r0, r1
   8cf7e:	602a      	str	r2, [r5, #0]
   8cf80:	f7f6 fb76 	bl	83670 <_isatty>
   8cf84:	1c43      	adds	r3, r0, #1
   8cf86:	d000      	beq.n	8cf8a <_isatty_r+0x16>
   8cf88:	bd38      	pop	{r3, r4, r5, pc}
   8cf8a:	682b      	ldr	r3, [r5, #0]
   8cf8c:	2b00      	cmp	r3, #0
   8cf8e:	d0fb      	beq.n	8cf88 <_isatty_r+0x14>
   8cf90:	6023      	str	r3, [r4, #0]
   8cf92:	bd38      	pop	{r3, r4, r5, pc}
   8cf94:	2000186c 	.word	0x2000186c

0008cf98 <_lseek_r>:
   8cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cf9a:	460f      	mov	r7, r1
   8cf9c:	2600      	movs	r6, #0
   8cf9e:	4d08      	ldr	r5, [pc, #32]	; (8cfc0 <_lseek_r+0x28>)
   8cfa0:	4611      	mov	r1, r2
   8cfa2:	4604      	mov	r4, r0
   8cfa4:	461a      	mov	r2, r3
   8cfa6:	4638      	mov	r0, r7
   8cfa8:	602e      	str	r6, [r5, #0]
   8cfaa:	f7f6 fb6b 	bl	83684 <_lseek>
   8cfae:	1c43      	adds	r3, r0, #1
   8cfb0:	d000      	beq.n	8cfb4 <_lseek_r+0x1c>
   8cfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cfb4:	682b      	ldr	r3, [r5, #0]
   8cfb6:	2b00      	cmp	r3, #0
   8cfb8:	d0fb      	beq.n	8cfb2 <_lseek_r+0x1a>
   8cfba:	6023      	str	r3, [r4, #0]
   8cfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cfbe:	bf00      	nop
   8cfc0:	2000186c 	.word	0x2000186c

0008cfc4 <_read_r>:
   8cfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cfc6:	460f      	mov	r7, r1
   8cfc8:	2600      	movs	r6, #0
   8cfca:	4d08      	ldr	r5, [pc, #32]	; (8cfec <_read_r+0x28>)
   8cfcc:	4611      	mov	r1, r2
   8cfce:	4604      	mov	r4, r0
   8cfd0:	461a      	mov	r2, r3
   8cfd2:	4638      	mov	r0, r7
   8cfd4:	602e      	str	r6, [r5, #0]
   8cfd6:	f7f5 ff35 	bl	82e44 <_read>
   8cfda:	1c43      	adds	r3, r0, #1
   8cfdc:	d000      	beq.n	8cfe0 <_read_r+0x1c>
   8cfde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cfe0:	682b      	ldr	r3, [r5, #0]
   8cfe2:	2b00      	cmp	r3, #0
   8cfe4:	d0fb      	beq.n	8cfde <_read_r+0x1a>
   8cfe6:	6023      	str	r3, [r4, #0]
   8cfe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cfea:	bf00      	nop
   8cfec:	2000186c 	.word	0x2000186c

0008cff0 <abort>:
   8cff0:	2006      	movs	r0, #6
   8cff2:	b508      	push	{r3, lr}
   8cff4:	f000 f830 	bl	8d058 <raise>
   8cff8:	2001      	movs	r0, #1
   8cffa:	f7f6 fb4f 	bl	8369c <_exit>
   8cffe:	bf00      	nop

0008d000 <_raise_r>:
   8d000:	291f      	cmp	r1, #31
   8d002:	b538      	push	{r3, r4, r5, lr}
   8d004:	4605      	mov	r5, r0
   8d006:	d821      	bhi.n	8d04c <_raise_r+0x4c>
   8d008:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8d00c:	460c      	mov	r4, r1
   8d00e:	b16a      	cbz	r2, 8d02c <_raise_r+0x2c>
   8d010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8d014:	b153      	cbz	r3, 8d02c <_raise_r+0x2c>
   8d016:	2b01      	cmp	r3, #1
   8d018:	d016      	beq.n	8d048 <_raise_r+0x48>
   8d01a:	1c59      	adds	r1, r3, #1
   8d01c:	d010      	beq.n	8d040 <_raise_r+0x40>
   8d01e:	2500      	movs	r5, #0
   8d020:	4620      	mov	r0, r4
   8d022:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8d026:	4798      	blx	r3
   8d028:	4628      	mov	r0, r5
   8d02a:	bd38      	pop	{r3, r4, r5, pc}
   8d02c:	4628      	mov	r0, r5
   8d02e:	f000 f831 	bl	8d094 <_getpid_r>
   8d032:	4622      	mov	r2, r4
   8d034:	4601      	mov	r1, r0
   8d036:	4628      	mov	r0, r5
   8d038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8d03c:	f000 b814 	b.w	8d068 <_kill_r>
   8d040:	2316      	movs	r3, #22
   8d042:	2001      	movs	r0, #1
   8d044:	602b      	str	r3, [r5, #0]
   8d046:	bd38      	pop	{r3, r4, r5, pc}
   8d048:	2000      	movs	r0, #0
   8d04a:	bd38      	pop	{r3, r4, r5, pc}
   8d04c:	2316      	movs	r3, #22
   8d04e:	f04f 30ff 	mov.w	r0, #4294967295
   8d052:	602b      	str	r3, [r5, #0]
   8d054:	bd38      	pop	{r3, r4, r5, pc}
   8d056:	bf00      	nop

0008d058 <raise>:
   8d058:	4b02      	ldr	r3, [pc, #8]	; (8d064 <raise+0xc>)
   8d05a:	4601      	mov	r1, r0
   8d05c:	6818      	ldr	r0, [r3, #0]
   8d05e:	f7ff bfcf 	b.w	8d000 <_raise_r>
   8d062:	bf00      	nop
   8d064:	20000440 	.word	0x20000440

0008d068 <_kill_r>:
   8d068:	b570      	push	{r4, r5, r6, lr}
   8d06a:	460c      	mov	r4, r1
   8d06c:	4603      	mov	r3, r0
   8d06e:	2600      	movs	r6, #0
   8d070:	4d07      	ldr	r5, [pc, #28]	; (8d090 <_kill_r+0x28>)
   8d072:	4620      	mov	r0, r4
   8d074:	4611      	mov	r1, r2
   8d076:	461c      	mov	r4, r3
   8d078:	602e      	str	r6, [r5, #0]
   8d07a:	f7f6 fb1d 	bl	836b8 <_kill>
   8d07e:	1c43      	adds	r3, r0, #1
   8d080:	d000      	beq.n	8d084 <_kill_r+0x1c>
   8d082:	bd70      	pop	{r4, r5, r6, pc}
   8d084:	682b      	ldr	r3, [r5, #0]
   8d086:	2b00      	cmp	r3, #0
   8d088:	d0fb      	beq.n	8d082 <_kill_r+0x1a>
   8d08a:	6023      	str	r3, [r4, #0]
   8d08c:	bd70      	pop	{r4, r5, r6, pc}
   8d08e:	bf00      	nop
   8d090:	2000186c 	.word	0x2000186c

0008d094 <_getpid_r>:
   8d094:	f7f6 bb1a 	b.w	836cc <_getpid>

0008d098 <__aeabi_drsub>:
   8d098:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8d09c:	e002      	b.n	8d0a4 <__adddf3>
   8d09e:	bf00      	nop

0008d0a0 <__aeabi_dsub>:
   8d0a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008d0a4 <__adddf3>:
   8d0a4:	b530      	push	{r4, r5, lr}
   8d0a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8d0aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8d0ae:	ea94 0f05 	teq	r4, r5
   8d0b2:	bf08      	it	eq
   8d0b4:	ea90 0f02 	teqeq	r0, r2
   8d0b8:	bf1f      	itttt	ne
   8d0ba:	ea54 0c00 	orrsne.w	ip, r4, r0
   8d0be:	ea55 0c02 	orrsne.w	ip, r5, r2
   8d0c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8d0c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8d0ca:	f000 80e2 	beq.w	8d292 <__adddf3+0x1ee>
   8d0ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8d0d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8d0d6:	bfb8      	it	lt
   8d0d8:	426d      	neglt	r5, r5
   8d0da:	dd0c      	ble.n	8d0f6 <__adddf3+0x52>
   8d0dc:	442c      	add	r4, r5
   8d0de:	ea80 0202 	eor.w	r2, r0, r2
   8d0e2:	ea81 0303 	eor.w	r3, r1, r3
   8d0e6:	ea82 0000 	eor.w	r0, r2, r0
   8d0ea:	ea83 0101 	eor.w	r1, r3, r1
   8d0ee:	ea80 0202 	eor.w	r2, r0, r2
   8d0f2:	ea81 0303 	eor.w	r3, r1, r3
   8d0f6:	2d36      	cmp	r5, #54	; 0x36
   8d0f8:	bf88      	it	hi
   8d0fa:	bd30      	pophi	{r4, r5, pc}
   8d0fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d100:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d104:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8d108:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8d10c:	d002      	beq.n	8d114 <__adddf3+0x70>
   8d10e:	4240      	negs	r0, r0
   8d110:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8d114:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8d118:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d11c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8d120:	d002      	beq.n	8d128 <__adddf3+0x84>
   8d122:	4252      	negs	r2, r2
   8d124:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8d128:	ea94 0f05 	teq	r4, r5
   8d12c:	f000 80a7 	beq.w	8d27e <__adddf3+0x1da>
   8d130:	f1a4 0401 	sub.w	r4, r4, #1
   8d134:	f1d5 0e20 	rsbs	lr, r5, #32
   8d138:	db0d      	blt.n	8d156 <__adddf3+0xb2>
   8d13a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8d13e:	fa22 f205 	lsr.w	r2, r2, r5
   8d142:	1880      	adds	r0, r0, r2
   8d144:	f141 0100 	adc.w	r1, r1, #0
   8d148:	fa03 f20e 	lsl.w	r2, r3, lr
   8d14c:	1880      	adds	r0, r0, r2
   8d14e:	fa43 f305 	asr.w	r3, r3, r5
   8d152:	4159      	adcs	r1, r3
   8d154:	e00e      	b.n	8d174 <__adddf3+0xd0>
   8d156:	f1a5 0520 	sub.w	r5, r5, #32
   8d15a:	f10e 0e20 	add.w	lr, lr, #32
   8d15e:	2a01      	cmp	r2, #1
   8d160:	fa03 fc0e 	lsl.w	ip, r3, lr
   8d164:	bf28      	it	cs
   8d166:	f04c 0c02 	orrcs.w	ip, ip, #2
   8d16a:	fa43 f305 	asr.w	r3, r3, r5
   8d16e:	18c0      	adds	r0, r0, r3
   8d170:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8d174:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d178:	d507      	bpl.n	8d18a <__adddf3+0xe6>
   8d17a:	f04f 0e00 	mov.w	lr, #0
   8d17e:	f1dc 0c00 	rsbs	ip, ip, #0
   8d182:	eb7e 0000 	sbcs.w	r0, lr, r0
   8d186:	eb6e 0101 	sbc.w	r1, lr, r1
   8d18a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8d18e:	d31b      	bcc.n	8d1c8 <__adddf3+0x124>
   8d190:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8d194:	d30c      	bcc.n	8d1b0 <__adddf3+0x10c>
   8d196:	0849      	lsrs	r1, r1, #1
   8d198:	ea5f 0030 	movs.w	r0, r0, rrx
   8d19c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8d1a0:	f104 0401 	add.w	r4, r4, #1
   8d1a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8d1a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8d1ac:	f080 809a 	bcs.w	8d2e4 <__adddf3+0x240>
   8d1b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8d1b4:	bf08      	it	eq
   8d1b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d1ba:	f150 0000 	adcs.w	r0, r0, #0
   8d1be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d1c2:	ea41 0105 	orr.w	r1, r1, r5
   8d1c6:	bd30      	pop	{r4, r5, pc}
   8d1c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8d1cc:	4140      	adcs	r0, r0
   8d1ce:	eb41 0101 	adc.w	r1, r1, r1
   8d1d2:	3c01      	subs	r4, #1
   8d1d4:	bf28      	it	cs
   8d1d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8d1da:	d2e9      	bcs.n	8d1b0 <__adddf3+0x10c>
   8d1dc:	f091 0f00 	teq	r1, #0
   8d1e0:	bf04      	itt	eq
   8d1e2:	4601      	moveq	r1, r0
   8d1e4:	2000      	moveq	r0, #0
   8d1e6:	fab1 f381 	clz	r3, r1
   8d1ea:	bf08      	it	eq
   8d1ec:	3320      	addeq	r3, #32
   8d1ee:	f1a3 030b 	sub.w	r3, r3, #11
   8d1f2:	f1b3 0220 	subs.w	r2, r3, #32
   8d1f6:	da0c      	bge.n	8d212 <__adddf3+0x16e>
   8d1f8:	320c      	adds	r2, #12
   8d1fa:	dd08      	ble.n	8d20e <__adddf3+0x16a>
   8d1fc:	f102 0c14 	add.w	ip, r2, #20
   8d200:	f1c2 020c 	rsb	r2, r2, #12
   8d204:	fa01 f00c 	lsl.w	r0, r1, ip
   8d208:	fa21 f102 	lsr.w	r1, r1, r2
   8d20c:	e00c      	b.n	8d228 <__adddf3+0x184>
   8d20e:	f102 0214 	add.w	r2, r2, #20
   8d212:	bfd8      	it	le
   8d214:	f1c2 0c20 	rsble	ip, r2, #32
   8d218:	fa01 f102 	lsl.w	r1, r1, r2
   8d21c:	fa20 fc0c 	lsr.w	ip, r0, ip
   8d220:	bfdc      	itt	le
   8d222:	ea41 010c 	orrle.w	r1, r1, ip
   8d226:	4090      	lslle	r0, r2
   8d228:	1ae4      	subs	r4, r4, r3
   8d22a:	bfa2      	ittt	ge
   8d22c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8d230:	4329      	orrge	r1, r5
   8d232:	bd30      	popge	{r4, r5, pc}
   8d234:	ea6f 0404 	mvn.w	r4, r4
   8d238:	3c1f      	subs	r4, #31
   8d23a:	da1c      	bge.n	8d276 <__adddf3+0x1d2>
   8d23c:	340c      	adds	r4, #12
   8d23e:	dc0e      	bgt.n	8d25e <__adddf3+0x1ba>
   8d240:	f104 0414 	add.w	r4, r4, #20
   8d244:	f1c4 0220 	rsb	r2, r4, #32
   8d248:	fa20 f004 	lsr.w	r0, r0, r4
   8d24c:	fa01 f302 	lsl.w	r3, r1, r2
   8d250:	ea40 0003 	orr.w	r0, r0, r3
   8d254:	fa21 f304 	lsr.w	r3, r1, r4
   8d258:	ea45 0103 	orr.w	r1, r5, r3
   8d25c:	bd30      	pop	{r4, r5, pc}
   8d25e:	f1c4 040c 	rsb	r4, r4, #12
   8d262:	f1c4 0220 	rsb	r2, r4, #32
   8d266:	fa20 f002 	lsr.w	r0, r0, r2
   8d26a:	fa01 f304 	lsl.w	r3, r1, r4
   8d26e:	ea40 0003 	orr.w	r0, r0, r3
   8d272:	4629      	mov	r1, r5
   8d274:	bd30      	pop	{r4, r5, pc}
   8d276:	fa21 f004 	lsr.w	r0, r1, r4
   8d27a:	4629      	mov	r1, r5
   8d27c:	bd30      	pop	{r4, r5, pc}
   8d27e:	f094 0f00 	teq	r4, #0
   8d282:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8d286:	bf06      	itte	eq
   8d288:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8d28c:	3401      	addeq	r4, #1
   8d28e:	3d01      	subne	r5, #1
   8d290:	e74e      	b.n	8d130 <__adddf3+0x8c>
   8d292:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d296:	bf18      	it	ne
   8d298:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8d29c:	d029      	beq.n	8d2f2 <__adddf3+0x24e>
   8d29e:	ea94 0f05 	teq	r4, r5
   8d2a2:	bf08      	it	eq
   8d2a4:	ea90 0f02 	teqeq	r0, r2
   8d2a8:	d005      	beq.n	8d2b6 <__adddf3+0x212>
   8d2aa:	ea54 0c00 	orrs.w	ip, r4, r0
   8d2ae:	bf04      	itt	eq
   8d2b0:	4619      	moveq	r1, r3
   8d2b2:	4610      	moveq	r0, r2
   8d2b4:	bd30      	pop	{r4, r5, pc}
   8d2b6:	ea91 0f03 	teq	r1, r3
   8d2ba:	bf1e      	ittt	ne
   8d2bc:	2100      	movne	r1, #0
   8d2be:	2000      	movne	r0, #0
   8d2c0:	bd30      	popne	{r4, r5, pc}
   8d2c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8d2c6:	d105      	bne.n	8d2d4 <__adddf3+0x230>
   8d2c8:	0040      	lsls	r0, r0, #1
   8d2ca:	4149      	adcs	r1, r1
   8d2cc:	bf28      	it	cs
   8d2ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8d2d2:	bd30      	pop	{r4, r5, pc}
   8d2d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8d2d8:	bf3c      	itt	cc
   8d2da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8d2de:	bd30      	popcc	{r4, r5, pc}
   8d2e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d2e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8d2e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d2ec:	f04f 0000 	mov.w	r0, #0
   8d2f0:	bd30      	pop	{r4, r5, pc}
   8d2f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d2f6:	bf1a      	itte	ne
   8d2f8:	4619      	movne	r1, r3
   8d2fa:	4610      	movne	r0, r2
   8d2fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8d300:	bf1c      	itt	ne
   8d302:	460b      	movne	r3, r1
   8d304:	4602      	movne	r2, r0
   8d306:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d30a:	bf06      	itte	eq
   8d30c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8d310:	ea91 0f03 	teqeq	r1, r3
   8d314:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8d318:	bd30      	pop	{r4, r5, pc}
   8d31a:	bf00      	nop

0008d31c <__aeabi_ui2d>:
   8d31c:	f090 0f00 	teq	r0, #0
   8d320:	bf04      	itt	eq
   8d322:	2100      	moveq	r1, #0
   8d324:	4770      	bxeq	lr
   8d326:	b530      	push	{r4, r5, lr}
   8d328:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d32c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d330:	f04f 0500 	mov.w	r5, #0
   8d334:	f04f 0100 	mov.w	r1, #0
   8d338:	e750      	b.n	8d1dc <__adddf3+0x138>
   8d33a:	bf00      	nop

0008d33c <__aeabi_i2d>:
   8d33c:	f090 0f00 	teq	r0, #0
   8d340:	bf04      	itt	eq
   8d342:	2100      	moveq	r1, #0
   8d344:	4770      	bxeq	lr
   8d346:	b530      	push	{r4, r5, lr}
   8d348:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d34c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d350:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8d354:	bf48      	it	mi
   8d356:	4240      	negmi	r0, r0
   8d358:	f04f 0100 	mov.w	r1, #0
   8d35c:	e73e      	b.n	8d1dc <__adddf3+0x138>
   8d35e:	bf00      	nop

0008d360 <__aeabi_f2d>:
   8d360:	0042      	lsls	r2, r0, #1
   8d362:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8d366:	ea4f 0131 	mov.w	r1, r1, rrx
   8d36a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8d36e:	bf1f      	itttt	ne
   8d370:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8d374:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8d378:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8d37c:	4770      	bxne	lr
   8d37e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8d382:	bf08      	it	eq
   8d384:	4770      	bxeq	lr
   8d386:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8d38a:	bf04      	itt	eq
   8d38c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8d390:	4770      	bxeq	lr
   8d392:	b530      	push	{r4, r5, lr}
   8d394:	f44f 7460 	mov.w	r4, #896	; 0x380
   8d398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d39c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d3a0:	e71c      	b.n	8d1dc <__adddf3+0x138>
   8d3a2:	bf00      	nop

0008d3a4 <__aeabi_ul2d>:
   8d3a4:	ea50 0201 	orrs.w	r2, r0, r1
   8d3a8:	bf08      	it	eq
   8d3aa:	4770      	bxeq	lr
   8d3ac:	b530      	push	{r4, r5, lr}
   8d3ae:	f04f 0500 	mov.w	r5, #0
   8d3b2:	e00a      	b.n	8d3ca <__aeabi_l2d+0x16>

0008d3b4 <__aeabi_l2d>:
   8d3b4:	ea50 0201 	orrs.w	r2, r0, r1
   8d3b8:	bf08      	it	eq
   8d3ba:	4770      	bxeq	lr
   8d3bc:	b530      	push	{r4, r5, lr}
   8d3be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8d3c2:	d502      	bpl.n	8d3ca <__aeabi_l2d+0x16>
   8d3c4:	4240      	negs	r0, r0
   8d3c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8d3ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d3ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d3d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8d3d6:	f43f aed8 	beq.w	8d18a <__adddf3+0xe6>
   8d3da:	f04f 0203 	mov.w	r2, #3
   8d3de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d3e2:	bf18      	it	ne
   8d3e4:	3203      	addne	r2, #3
   8d3e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d3ea:	bf18      	it	ne
   8d3ec:	3203      	addne	r2, #3
   8d3ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8d3f2:	f1c2 0320 	rsb	r3, r2, #32
   8d3f6:	fa00 fc03 	lsl.w	ip, r0, r3
   8d3fa:	fa20 f002 	lsr.w	r0, r0, r2
   8d3fe:	fa01 fe03 	lsl.w	lr, r1, r3
   8d402:	ea40 000e 	orr.w	r0, r0, lr
   8d406:	fa21 f102 	lsr.w	r1, r1, r2
   8d40a:	4414      	add	r4, r2
   8d40c:	e6bd      	b.n	8d18a <__adddf3+0xe6>
   8d40e:	bf00      	nop

0008d410 <__aeabi_dmul>:
   8d410:	b570      	push	{r4, r5, r6, lr}
   8d412:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d416:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d41a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d41e:	bf1d      	ittte	ne
   8d420:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d424:	ea94 0f0c 	teqne	r4, ip
   8d428:	ea95 0f0c 	teqne	r5, ip
   8d42c:	f000 f8de 	bleq	8d5ec <__aeabi_dmul+0x1dc>
   8d430:	442c      	add	r4, r5
   8d432:	ea81 0603 	eor.w	r6, r1, r3
   8d436:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8d43a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8d43e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8d442:	bf18      	it	ne
   8d444:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8d448:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d44c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8d450:	d038      	beq.n	8d4c4 <__aeabi_dmul+0xb4>
   8d452:	fba0 ce02 	umull	ip, lr, r0, r2
   8d456:	f04f 0500 	mov.w	r5, #0
   8d45a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8d45e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8d462:	fbe0 e503 	umlal	lr, r5, r0, r3
   8d466:	f04f 0600 	mov.w	r6, #0
   8d46a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8d46e:	f09c 0f00 	teq	ip, #0
   8d472:	bf18      	it	ne
   8d474:	f04e 0e01 	orrne.w	lr, lr, #1
   8d478:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8d47c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8d480:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8d484:	d204      	bcs.n	8d490 <__aeabi_dmul+0x80>
   8d486:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8d48a:	416d      	adcs	r5, r5
   8d48c:	eb46 0606 	adc.w	r6, r6, r6
   8d490:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8d494:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8d498:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8d49c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8d4a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8d4a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d4a8:	bf88      	it	hi
   8d4aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d4ae:	d81e      	bhi.n	8d4ee <__aeabi_dmul+0xde>
   8d4b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8d4b4:	bf08      	it	eq
   8d4b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8d4ba:	f150 0000 	adcs.w	r0, r0, #0
   8d4be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d4c2:	bd70      	pop	{r4, r5, r6, pc}
   8d4c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8d4c8:	ea46 0101 	orr.w	r1, r6, r1
   8d4cc:	ea40 0002 	orr.w	r0, r0, r2
   8d4d0:	ea81 0103 	eor.w	r1, r1, r3
   8d4d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8d4d8:	bfc2      	ittt	gt
   8d4da:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d4de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d4e2:	bd70      	popgt	{r4, r5, r6, pc}
   8d4e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d4e8:	f04f 0e00 	mov.w	lr, #0
   8d4ec:	3c01      	subs	r4, #1
   8d4ee:	f300 80ab 	bgt.w	8d648 <__aeabi_dmul+0x238>
   8d4f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8d4f6:	bfde      	ittt	le
   8d4f8:	2000      	movle	r0, #0
   8d4fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8d4fe:	bd70      	pople	{r4, r5, r6, pc}
   8d500:	f1c4 0400 	rsb	r4, r4, #0
   8d504:	3c20      	subs	r4, #32
   8d506:	da35      	bge.n	8d574 <__aeabi_dmul+0x164>
   8d508:	340c      	adds	r4, #12
   8d50a:	dc1b      	bgt.n	8d544 <__aeabi_dmul+0x134>
   8d50c:	f104 0414 	add.w	r4, r4, #20
   8d510:	f1c4 0520 	rsb	r5, r4, #32
   8d514:	fa00 f305 	lsl.w	r3, r0, r5
   8d518:	fa20 f004 	lsr.w	r0, r0, r4
   8d51c:	fa01 f205 	lsl.w	r2, r1, r5
   8d520:	ea40 0002 	orr.w	r0, r0, r2
   8d524:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8d528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d52c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d530:	fa21 f604 	lsr.w	r6, r1, r4
   8d534:	eb42 0106 	adc.w	r1, r2, r6
   8d538:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d53c:	bf08      	it	eq
   8d53e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d542:	bd70      	pop	{r4, r5, r6, pc}
   8d544:	f1c4 040c 	rsb	r4, r4, #12
   8d548:	f1c4 0520 	rsb	r5, r4, #32
   8d54c:	fa00 f304 	lsl.w	r3, r0, r4
   8d550:	fa20 f005 	lsr.w	r0, r0, r5
   8d554:	fa01 f204 	lsl.w	r2, r1, r4
   8d558:	ea40 0002 	orr.w	r0, r0, r2
   8d55c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d560:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d564:	f141 0100 	adc.w	r1, r1, #0
   8d568:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d56c:	bf08      	it	eq
   8d56e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d572:	bd70      	pop	{r4, r5, r6, pc}
   8d574:	f1c4 0520 	rsb	r5, r4, #32
   8d578:	fa00 f205 	lsl.w	r2, r0, r5
   8d57c:	ea4e 0e02 	orr.w	lr, lr, r2
   8d580:	fa20 f304 	lsr.w	r3, r0, r4
   8d584:	fa01 f205 	lsl.w	r2, r1, r5
   8d588:	ea43 0302 	orr.w	r3, r3, r2
   8d58c:	fa21 f004 	lsr.w	r0, r1, r4
   8d590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d594:	fa21 f204 	lsr.w	r2, r1, r4
   8d598:	ea20 0002 	bic.w	r0, r0, r2
   8d59c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8d5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d5a4:	bf08      	it	eq
   8d5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d5aa:	bd70      	pop	{r4, r5, r6, pc}
   8d5ac:	f094 0f00 	teq	r4, #0
   8d5b0:	d10f      	bne.n	8d5d2 <__aeabi_dmul+0x1c2>
   8d5b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8d5b6:	0040      	lsls	r0, r0, #1
   8d5b8:	eb41 0101 	adc.w	r1, r1, r1
   8d5bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d5c0:	bf08      	it	eq
   8d5c2:	3c01      	subeq	r4, #1
   8d5c4:	d0f7      	beq.n	8d5b6 <__aeabi_dmul+0x1a6>
   8d5c6:	ea41 0106 	orr.w	r1, r1, r6
   8d5ca:	f095 0f00 	teq	r5, #0
   8d5ce:	bf18      	it	ne
   8d5d0:	4770      	bxne	lr
   8d5d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8d5d6:	0052      	lsls	r2, r2, #1
   8d5d8:	eb43 0303 	adc.w	r3, r3, r3
   8d5dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8d5e0:	bf08      	it	eq
   8d5e2:	3d01      	subeq	r5, #1
   8d5e4:	d0f7      	beq.n	8d5d6 <__aeabi_dmul+0x1c6>
   8d5e6:	ea43 0306 	orr.w	r3, r3, r6
   8d5ea:	4770      	bx	lr
   8d5ec:	ea94 0f0c 	teq	r4, ip
   8d5f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d5f4:	bf18      	it	ne
   8d5f6:	ea95 0f0c 	teqne	r5, ip
   8d5fa:	d00c      	beq.n	8d616 <__aeabi_dmul+0x206>
   8d5fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d600:	bf18      	it	ne
   8d602:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d606:	d1d1      	bne.n	8d5ac <__aeabi_dmul+0x19c>
   8d608:	ea81 0103 	eor.w	r1, r1, r3
   8d60c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d610:	f04f 0000 	mov.w	r0, #0
   8d614:	bd70      	pop	{r4, r5, r6, pc}
   8d616:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d61a:	bf06      	itte	eq
   8d61c:	4610      	moveq	r0, r2
   8d61e:	4619      	moveq	r1, r3
   8d620:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d624:	d019      	beq.n	8d65a <__aeabi_dmul+0x24a>
   8d626:	ea94 0f0c 	teq	r4, ip
   8d62a:	d102      	bne.n	8d632 <__aeabi_dmul+0x222>
   8d62c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8d630:	d113      	bne.n	8d65a <__aeabi_dmul+0x24a>
   8d632:	ea95 0f0c 	teq	r5, ip
   8d636:	d105      	bne.n	8d644 <__aeabi_dmul+0x234>
   8d638:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8d63c:	bf1c      	itt	ne
   8d63e:	4610      	movne	r0, r2
   8d640:	4619      	movne	r1, r3
   8d642:	d10a      	bne.n	8d65a <__aeabi_dmul+0x24a>
   8d644:	ea81 0103 	eor.w	r1, r1, r3
   8d648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d64c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d650:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d654:	f04f 0000 	mov.w	r0, #0
   8d658:	bd70      	pop	{r4, r5, r6, pc}
   8d65a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d65e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8d662:	bd70      	pop	{r4, r5, r6, pc}

0008d664 <__aeabi_ddiv>:
   8d664:	b570      	push	{r4, r5, r6, lr}
   8d666:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d66a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d66e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d672:	bf1d      	ittte	ne
   8d674:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d678:	ea94 0f0c 	teqne	r4, ip
   8d67c:	ea95 0f0c 	teqne	r5, ip
   8d680:	f000 f8a7 	bleq	8d7d2 <__aeabi_ddiv+0x16e>
   8d684:	eba4 0405 	sub.w	r4, r4, r5
   8d688:	ea81 0e03 	eor.w	lr, r1, r3
   8d68c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d690:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d694:	f000 8088 	beq.w	8d7a8 <__aeabi_ddiv+0x144>
   8d698:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d69c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8d6a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8d6a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8d6a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8d6ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8d6b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8d6b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8d6b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8d6bc:	429d      	cmp	r5, r3
   8d6be:	bf08      	it	eq
   8d6c0:	4296      	cmpeq	r6, r2
   8d6c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8d6c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8d6ca:	d202      	bcs.n	8d6d2 <__aeabi_ddiv+0x6e>
   8d6cc:	085b      	lsrs	r3, r3, #1
   8d6ce:	ea4f 0232 	mov.w	r2, r2, rrx
   8d6d2:	1ab6      	subs	r6, r6, r2
   8d6d4:	eb65 0503 	sbc.w	r5, r5, r3
   8d6d8:	085b      	lsrs	r3, r3, #1
   8d6da:	ea4f 0232 	mov.w	r2, r2, rrx
   8d6de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8d6e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8d6e6:	ebb6 0e02 	subs.w	lr, r6, r2
   8d6ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d6ee:	bf22      	ittt	cs
   8d6f0:	1ab6      	subcs	r6, r6, r2
   8d6f2:	4675      	movcs	r5, lr
   8d6f4:	ea40 000c 	orrcs.w	r0, r0, ip
   8d6f8:	085b      	lsrs	r3, r3, #1
   8d6fa:	ea4f 0232 	mov.w	r2, r2, rrx
   8d6fe:	ebb6 0e02 	subs.w	lr, r6, r2
   8d702:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d706:	bf22      	ittt	cs
   8d708:	1ab6      	subcs	r6, r6, r2
   8d70a:	4675      	movcs	r5, lr
   8d70c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8d710:	085b      	lsrs	r3, r3, #1
   8d712:	ea4f 0232 	mov.w	r2, r2, rrx
   8d716:	ebb6 0e02 	subs.w	lr, r6, r2
   8d71a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d71e:	bf22      	ittt	cs
   8d720:	1ab6      	subcs	r6, r6, r2
   8d722:	4675      	movcs	r5, lr
   8d724:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8d728:	085b      	lsrs	r3, r3, #1
   8d72a:	ea4f 0232 	mov.w	r2, r2, rrx
   8d72e:	ebb6 0e02 	subs.w	lr, r6, r2
   8d732:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d736:	bf22      	ittt	cs
   8d738:	1ab6      	subcs	r6, r6, r2
   8d73a:	4675      	movcs	r5, lr
   8d73c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8d740:	ea55 0e06 	orrs.w	lr, r5, r6
   8d744:	d018      	beq.n	8d778 <__aeabi_ddiv+0x114>
   8d746:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8d74a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8d74e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8d752:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8d756:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8d75a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8d75e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8d762:	d1c0      	bne.n	8d6e6 <__aeabi_ddiv+0x82>
   8d764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d768:	d10b      	bne.n	8d782 <__aeabi_ddiv+0x11e>
   8d76a:	ea41 0100 	orr.w	r1, r1, r0
   8d76e:	f04f 0000 	mov.w	r0, #0
   8d772:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8d776:	e7b6      	b.n	8d6e6 <__aeabi_ddiv+0x82>
   8d778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d77c:	bf04      	itt	eq
   8d77e:	4301      	orreq	r1, r0
   8d780:	2000      	moveq	r0, #0
   8d782:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d786:	bf88      	it	hi
   8d788:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d78c:	f63f aeaf 	bhi.w	8d4ee <__aeabi_dmul+0xde>
   8d790:	ebb5 0c03 	subs.w	ip, r5, r3
   8d794:	bf04      	itt	eq
   8d796:	ebb6 0c02 	subseq.w	ip, r6, r2
   8d79a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d79e:	f150 0000 	adcs.w	r0, r0, #0
   8d7a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d7a6:	bd70      	pop	{r4, r5, r6, pc}
   8d7a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8d7ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8d7b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8d7b4:	bfc2      	ittt	gt
   8d7b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d7ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d7be:	bd70      	popgt	{r4, r5, r6, pc}
   8d7c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d7c4:	f04f 0e00 	mov.w	lr, #0
   8d7c8:	3c01      	subs	r4, #1
   8d7ca:	e690      	b.n	8d4ee <__aeabi_dmul+0xde>
   8d7cc:	ea45 0e06 	orr.w	lr, r5, r6
   8d7d0:	e68d      	b.n	8d4ee <__aeabi_dmul+0xde>
   8d7d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d7d6:	ea94 0f0c 	teq	r4, ip
   8d7da:	bf08      	it	eq
   8d7dc:	ea95 0f0c 	teqeq	r5, ip
   8d7e0:	f43f af3b 	beq.w	8d65a <__aeabi_dmul+0x24a>
   8d7e4:	ea94 0f0c 	teq	r4, ip
   8d7e8:	d10a      	bne.n	8d800 <__aeabi_ddiv+0x19c>
   8d7ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d7ee:	f47f af34 	bne.w	8d65a <__aeabi_dmul+0x24a>
   8d7f2:	ea95 0f0c 	teq	r5, ip
   8d7f6:	f47f af25 	bne.w	8d644 <__aeabi_dmul+0x234>
   8d7fa:	4610      	mov	r0, r2
   8d7fc:	4619      	mov	r1, r3
   8d7fe:	e72c      	b.n	8d65a <__aeabi_dmul+0x24a>
   8d800:	ea95 0f0c 	teq	r5, ip
   8d804:	d106      	bne.n	8d814 <__aeabi_ddiv+0x1b0>
   8d806:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d80a:	f43f aefd 	beq.w	8d608 <__aeabi_dmul+0x1f8>
   8d80e:	4610      	mov	r0, r2
   8d810:	4619      	mov	r1, r3
   8d812:	e722      	b.n	8d65a <__aeabi_dmul+0x24a>
   8d814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d818:	bf18      	it	ne
   8d81a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d81e:	f47f aec5 	bne.w	8d5ac <__aeabi_dmul+0x19c>
   8d822:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8d826:	f47f af0d 	bne.w	8d644 <__aeabi_dmul+0x234>
   8d82a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8d82e:	f47f aeeb 	bne.w	8d608 <__aeabi_dmul+0x1f8>
   8d832:	e712      	b.n	8d65a <__aeabi_dmul+0x24a>

0008d834 <__gedf2>:
   8d834:	f04f 3cff 	mov.w	ip, #4294967295
   8d838:	e006      	b.n	8d848 <__cmpdf2+0x4>
   8d83a:	bf00      	nop

0008d83c <__ledf2>:
   8d83c:	f04f 0c01 	mov.w	ip, #1
   8d840:	e002      	b.n	8d848 <__cmpdf2+0x4>
   8d842:	bf00      	nop

0008d844 <__cmpdf2>:
   8d844:	f04f 0c01 	mov.w	ip, #1
   8d848:	f84d cd04 	str.w	ip, [sp, #-4]!
   8d84c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d850:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d854:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d858:	bf18      	it	ne
   8d85a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8d85e:	d01b      	beq.n	8d898 <__cmpdf2+0x54>
   8d860:	b001      	add	sp, #4
   8d862:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8d866:	bf0c      	ite	eq
   8d868:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8d86c:	ea91 0f03 	teqne	r1, r3
   8d870:	bf02      	ittt	eq
   8d872:	ea90 0f02 	teqeq	r0, r2
   8d876:	2000      	moveq	r0, #0
   8d878:	4770      	bxeq	lr
   8d87a:	f110 0f00 	cmn.w	r0, #0
   8d87e:	ea91 0f03 	teq	r1, r3
   8d882:	bf58      	it	pl
   8d884:	4299      	cmppl	r1, r3
   8d886:	bf08      	it	eq
   8d888:	4290      	cmpeq	r0, r2
   8d88a:	bf2c      	ite	cs
   8d88c:	17d8      	asrcs	r0, r3, #31
   8d88e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8d892:	f040 0001 	orr.w	r0, r0, #1
   8d896:	4770      	bx	lr
   8d898:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d89c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d8a0:	d102      	bne.n	8d8a8 <__cmpdf2+0x64>
   8d8a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d8a6:	d107      	bne.n	8d8b8 <__cmpdf2+0x74>
   8d8a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d8ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d8b0:	d1d6      	bne.n	8d860 <__cmpdf2+0x1c>
   8d8b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d8b6:	d0d3      	beq.n	8d860 <__cmpdf2+0x1c>
   8d8b8:	f85d 0b04 	ldr.w	r0, [sp], #4
   8d8bc:	4770      	bx	lr
   8d8be:	bf00      	nop

0008d8c0 <__aeabi_cdrcmple>:
   8d8c0:	4684      	mov	ip, r0
   8d8c2:	4610      	mov	r0, r2
   8d8c4:	4662      	mov	r2, ip
   8d8c6:	468c      	mov	ip, r1
   8d8c8:	4619      	mov	r1, r3
   8d8ca:	4663      	mov	r3, ip
   8d8cc:	e000      	b.n	8d8d0 <__aeabi_cdcmpeq>
   8d8ce:	bf00      	nop

0008d8d0 <__aeabi_cdcmpeq>:
   8d8d0:	b501      	push	{r0, lr}
   8d8d2:	f7ff ffb7 	bl	8d844 <__cmpdf2>
   8d8d6:	2800      	cmp	r0, #0
   8d8d8:	bf48      	it	mi
   8d8da:	f110 0f00 	cmnmi.w	r0, #0
   8d8de:	bd01      	pop	{r0, pc}

0008d8e0 <__aeabi_dcmpeq>:
   8d8e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d8e4:	f7ff fff4 	bl	8d8d0 <__aeabi_cdcmpeq>
   8d8e8:	bf0c      	ite	eq
   8d8ea:	2001      	moveq	r0, #1
   8d8ec:	2000      	movne	r0, #0
   8d8ee:	f85d fb08 	ldr.w	pc, [sp], #8
   8d8f2:	bf00      	nop

0008d8f4 <__aeabi_dcmplt>:
   8d8f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d8f8:	f7ff ffea 	bl	8d8d0 <__aeabi_cdcmpeq>
   8d8fc:	bf34      	ite	cc
   8d8fe:	2001      	movcc	r0, #1
   8d900:	2000      	movcs	r0, #0
   8d902:	f85d fb08 	ldr.w	pc, [sp], #8
   8d906:	bf00      	nop

0008d908 <__aeabi_dcmple>:
   8d908:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d90c:	f7ff ffe0 	bl	8d8d0 <__aeabi_cdcmpeq>
   8d910:	bf94      	ite	ls
   8d912:	2001      	movls	r0, #1
   8d914:	2000      	movhi	r0, #0
   8d916:	f85d fb08 	ldr.w	pc, [sp], #8
   8d91a:	bf00      	nop

0008d91c <__aeabi_dcmpge>:
   8d91c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d920:	f7ff ffce 	bl	8d8c0 <__aeabi_cdrcmple>
   8d924:	bf94      	ite	ls
   8d926:	2001      	movls	r0, #1
   8d928:	2000      	movhi	r0, #0
   8d92a:	f85d fb08 	ldr.w	pc, [sp], #8
   8d92e:	bf00      	nop

0008d930 <__aeabi_dcmpgt>:
   8d930:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d934:	f7ff ffc4 	bl	8d8c0 <__aeabi_cdrcmple>
   8d938:	bf34      	ite	cc
   8d93a:	2001      	movcc	r0, #1
   8d93c:	2000      	movcs	r0, #0
   8d93e:	f85d fb08 	ldr.w	pc, [sp], #8
   8d942:	bf00      	nop

0008d944 <__aeabi_dcmpun>:
   8d944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d94c:	d102      	bne.n	8d954 <__aeabi_dcmpun+0x10>
   8d94e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d952:	d10a      	bne.n	8d96a <__aeabi_dcmpun+0x26>
   8d954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d95c:	d102      	bne.n	8d964 <__aeabi_dcmpun+0x20>
   8d95e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d962:	d102      	bne.n	8d96a <__aeabi_dcmpun+0x26>
   8d964:	f04f 0000 	mov.w	r0, #0
   8d968:	4770      	bx	lr
   8d96a:	f04f 0001 	mov.w	r0, #1
   8d96e:	4770      	bx	lr

0008d970 <__aeabi_d2iz>:
   8d970:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8d974:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8d978:	d215      	bcs.n	8d9a6 <__aeabi_d2iz+0x36>
   8d97a:	d511      	bpl.n	8d9a0 <__aeabi_d2iz+0x30>
   8d97c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8d980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8d984:	d912      	bls.n	8d9ac <__aeabi_d2iz+0x3c>
   8d986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8d98a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8d98e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8d992:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d996:	fa23 f002 	lsr.w	r0, r3, r2
   8d99a:	bf18      	it	ne
   8d99c:	4240      	negne	r0, r0
   8d99e:	4770      	bx	lr
   8d9a0:	f04f 0000 	mov.w	r0, #0
   8d9a4:	4770      	bx	lr
   8d9a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8d9aa:	d105      	bne.n	8d9b8 <__aeabi_d2iz+0x48>
   8d9ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8d9b0:	bf08      	it	eq
   8d9b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8d9b6:	4770      	bx	lr
   8d9b8:	f04f 0000 	mov.w	r0, #0
   8d9bc:	4770      	bx	lr
   8d9be:	bf00      	nop
   8d9c0:	78383025 	.word	0x78383025
   8d9c4:	00000000 	.word	0x00000000

0008d9c8 <LED_DESCRIPTOR>:
   8d9c8:	0000001d 00000001 0000001f 00000001     ................
   8d9d8:	74697845 20676e69 68746977 61747320     Exiting with sta
   8d9e8:	20737574 0a2e6425 00000000              tus %d......

0008d9f4 <BOS_DESC>:
   8d9f4:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8da04:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
   8da14:	00000000 00000000 00000000 aaaaaa00     ................
   8da24:	aaaaaaaa eeeeeeaa eeeeeeee fffffeee     ................
   8da34:	ffffffff ffffffff dfbf7fff fdfbf7ef     ................
   8da44:	dfbf7efc fdfbf7ef 0000007e              .~......~...

0008da50 <_global_impure_ptr>:
   8da50:	20000448 00464e49 00666e69 004e414e     H.. INF.inf.NAN.
   8da60:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8da70:	66656463 00000000 33323130 37363534     cdef....01234567
   8da80:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8da90:	0000296c 00000030                       l)..0...

0008da98 <blanks.7335>:
   8da98:	20202020 20202020 20202020 20202020                     

0008daa8 <zeroes.7336>:
   8daa8:	30303030 30303030 30303030 30303030     0000000000000000

0008dab8 <blanks.7328>:
   8dab8:	20202020 20202020 20202020 20202020                     

0008dac8 <zeroes.7329>:
   8dac8:	30303030 30303030 30303030 30303030     0000000000000000
   8dad8:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8dae8:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8daf8:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8db08:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8db18:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8db28:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8db38:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8db48:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8db58:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8db68:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8db78:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8db88:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8db98:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8dba8:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8dbb8:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8dbc8:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8dbd8:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8dbe8:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8dbf8:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....

0008dc08 <__mprec_bigtens>:
   8dc08:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8dc18:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8dc28:	7f73bf3c 75154fdd                       <.s..O.u

0008dc30 <__mprec_tens>:
   8dc30:	00000000 3ff00000 00000000 40240000     .......?......$@
   8dc40:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8dc50:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8dc60:	00000000 412e8480 00000000 416312d0     .......A......cA
   8dc70:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8dc80:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8dc90:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8dca0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8dcb0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8dcc0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8dcd0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8dce0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8dcf0:	79d99db4 44ea7843                       ...yCx.D

0008dcf8 <p05.6122>:
   8dcf8:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8dd08:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8dd18:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8dd28:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8dd38:	2520656e 25732564 00000a73              ne %d%s%s...

0008dd44 <_ctype_>:
   8dd44:	20202000 20202020 28282020 20282828     .         ((((( 
   8dd54:	20202020 20202020 20202020 20202020                     
   8dd64:	10108820 10101010 10101010 10101010      ...............
   8dd74:	04040410 04040404 10040404 10101010     ................
   8dd84:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8dd94:	01010101 01010101 01010101 10101010     ................
   8dda4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8ddb4:	02020202 02020202 02020202 10101010     ................
   8ddc4:	00000020 00000000 00000000 00000000      ...............
   8ddd4:	00000000 00000000 00000000 00000000     ................
   8dde4:	00000000 00000000 00000000 00000000     ................
   8ddf4:	00000000 00000000 00000000 00000000     ................
   8de04:	00000000 00000000 00000000 00000000     ................
   8de14:	00000000 00000000 00000000 00000000     ................
   8de24:	00000000 00000000 00000000 00000000     ................
   8de34:	00000000 00000000 00000000 00000000     ................
   8de44:	00000000                                ....

0008de48 <_init>:
   8de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8de4a:	bf00      	nop
   8de4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8de4e:	bc08      	pop	{r3}
   8de50:	469e      	mov	lr, r3
   8de52:	4770      	bx	lr

0008de54 <__init_array_start>:
   8de54:	00089ca1 	.word	0x00089ca1

0008de58 <__frame_dummy_init_array_entry>:
   8de58:	000800e1                                ....

0008de5c <_fini>:
   8de5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8de5e:	bf00      	nop
   8de60:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8de62:	bc08      	pop	{r3}
   8de64:	469e      	mov	lr, r3
   8de66:	4770      	bx	lr

0008de68 <__do_global_dtors_aux_fini_array_entry>:
   8de68:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	20000288 	.word	0x20000288
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d206      	bcs.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d208      	bcs.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e3600 	.word	0x016e3600
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	02625a00 	.word	0x02625a00
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	                                         .

2000027d <main_b_vendor_enable>:
2000027d:	                                         ...

20000280 <xram>:
20000280:	60000000                                ...`

20000284 <g_interrupt_enabled>:
20000284:	00000001                                ....

20000288 <SystemCoreClock>:
20000288:	003d0900                                ..=.

2000028c <udc_string_desc_languageid>:
2000028c:	04090304                                ....

20000290 <udc_string_manufacturer_name>:
20000290:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002a0:	636e4920 0000002e                        Inc....

200002a8 <udc_string_product_name>:
200002a8:	70696843 73696857 65726570 75482d72     ChipWhisperer-Hu
200002b8:	00796b73                                sky.

200002bc <udc_string_desc>:
200002bc:	00000300 00000000 00000000 00000000     ................
200002cc:	00000000 00000000 00000000 00000000     ................
200002dc:	00000000 00000000 00000000 00000000     ................
200002ec:	00000000 00000000 00000000 00000000     ................
200002fc:	00000000                                ....

20000300 <winusb_20_desc>:
20000300:	0000000a 06030000 0014009e 49570003     ..............WI
20000310:	4253554e 00000000 00000000 00800000     NUSB............
20000320:	00010004 00500028 00790068 00680057     ....(.P.h.y.W.h.
20000330:	00730069 00650070 00650072 00550072     i.s.p.e.r.e.r.U.
20000340:	00420053 00000000 00000000 004e0000     S.B...........N.
20000350:	0063007b 00650063 00320035 00310039     {.c.c.e.5.2.9.1.
20000360:	002d0063 00360061 00660039 0034002d     c.-.a.6.9.f.-.4.
20000370:	00390039 002d0035 00340061 00320063     9.9.5.-.a.4.c.2.
20000380:	0032002d 00650061 00370035 00350061     -.2.a.e.5.7.a.5.
20000390:	00610031 00650064 007d0039 00000000     1.a.d.e.9.}.....

200003a0 <udi_api_vendor>:
200003a0:	00084a2d 00084a6d 00084a89 00084add     -J..mJ...J...J..
200003b0:	00000000                                ....

200003b4 <udc_device_desc>:
200003b4:	02000112 40000000 ace52b3e 02010100     .......@>+......
200003c4:	00000103                                ....

200003c8 <udc_device_qual>:
200003c8:	0200060a 40000000 00000001              .......@....

200003d4 <udc_desc_fs>:
200003d4:	00200209 80000101 000409fa ffff0200     .. .............
200003e4:	050700ff 00400281 02050700 00004002     ......@......@..

200003f4 <udc_desc_hs>:
200003f4:	00200209 80000101 000409fa ffff0200     .. .............
20000404:	050700ff 02000281 02050700 00020002     ................

20000414 <udi_apis>:
20000414:	200003a0                                ... 

20000418 <udc_config_lsfs>:
20000418:	200003d4 20000414                       ... ... 

20000420 <udc_config_hs>:
20000420:	200003f4 20000414                       ... ... 

20000428 <udc_config>:
20000428:	200003b4 20000418 200003b4 200003c8     ... ... ... ... 
20000438:	20000420 00000000                        .. ....

20000440 <_impure_ptr>:
20000440:	20000448 00000000                       H.. ....

20000448 <impure_data>:
20000448:	00000000 20000734 2000079c 20000804     ....4.. ... ... 
20000458:	00000000 00000000 00000000 00000000     ................
20000468:	00000000 00000000 00000000 00000000     ................
20000478:	00000000 00000000 00000000 00000000     ................
20000488:	00000000 00000000 00000000 00000000     ................
20000498:	00000000 00000000 00000000 00000000     ................
200004a8:	00000000 00000000 00000000 00000000     ................
200004b8:	00000000 00000000 00000000 00000000     ................
200004c8:	00000000 00000000 00000000 00000000     ................
200004d8:	00000000 00000000 00000000 00000000     ................
200004e8:	00000000 00000000 00000001 00000000     ................
200004f8:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000508:	00000000 00000000 00000000 00000000     ................
20000518:	00000000 00000000 00000000 00000000     ................
20000528:	00000000 00000000 00000000 00000000     ................
20000538:	00000000 00000000 00000000 00000000     ................
20000548:	00000000 00000000 00000000 00000000     ................
20000558:	00000000 00000000 00000000 00000000     ................
20000568:	00000000 00000000 00000000 00000000     ................
20000578:	00000000 00000000 00000000 00000000     ................
20000588:	00000000 00000000 00000000 00000000     ................
20000598:	00000000 00000000 00000000 00000000     ................
200005a8:	00000000 00000000 00000000 00000000     ................
200005b8:	00000000 00000000 00000000 00000000     ................
200005c8:	00000000 00000000 00000000 00000000     ................
200005d8:	00000000 00000000 00000000 00000000     ................
200005e8:	00000000 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000 00000000 00000000 00000000     ................
20000638:	00000000 00000000 00000000 00000000     ................
20000648:	00000000 00000000 00000000 00000000     ................
20000658:	00000000 00000000 00000000 00000000     ................
20000668:	00000000 00000000 00000000 00000000     ................
20000678:	00000000 00000000 00000000 00000000     ................
20000688:	00000000 00000000 00000000 00000000     ................
20000698:	00000000 00000000 00000000 00000000     ................
200006a8:	00000000 00000000 00000000 00000000     ................
200006b8:	00000000 00000000 00000000 00000000     ................
200006c8:	00000000 00000000 00000000 00000000     ................
200006d8:	00000000 00000000 00000000 00000000     ................
200006e8:	00000000 00000000 00000000 00000000     ................
200006f8:	00000000 00000000 00000000 00000000     ................
20000708:	00000000 00000000 00000000 00000000     ................
20000718:	00000000 00000000 00000000 00000000     ................
20000728:	00000000 00000000 00000000 00000000     ................
20000738:	00000000 00000000 00000000 00000000     ................
20000748:	00000000 00000000 00000000 00000000     ................
20000758:	00000000 00000000 00000000 00000000     ................
20000768:	00000000 00000000 00000000 00000000     ................
20000778:	00000000 00000000 00000000 00000000     ................
20000788:	00000000 00000000 00000000 00000000     ................
20000798:	00000000 00000000 00000000 00000000     ................
200007a8:	00000000 00000000 00000000 00000000     ................
200007b8:	00000000 00000000 00000000 00000000     ................
200007c8:	00000000 00000000 00000000 00000000     ................
200007d8:	00000000 00000000 00000000 00000000     ................
200007e8:	00000000 00000000 00000000 00000000     ................
200007f8:	00000000 00000000 00000000 00000000     ................
20000808:	00000000 00000000 00000000 00000000     ................
20000818:	00000000 00000000 00000000 00000000     ................
20000828:	00000000 00000000 00000000 00000000     ................
20000838:	00000000 00000000 00000000 00000000     ................
20000848:	00000000 00000000 00000000 00000000     ................
20000858:	00000000 00000000 00000000 00000000     ................
20000868:	00000000 00000000                       ........

20000870 <__atexit_recursive_mutex>:
20000870:	20001848                                H.. 

20000874 <__global_locale>:
20000874:	00000043 00000000 00000000 00000000     C...............
20000884:	00000000 00000000 00000000 00000000     ................
20000894:	00000043 00000000 00000000 00000000     C...............
200008a4:	00000000 00000000 00000000 00000000     ................
200008b4:	00000043 00000000 00000000 00000000     C...............
200008c4:	00000000 00000000 00000000 00000000     ................
200008d4:	00000043 00000000 00000000 00000000     C...............
200008e4:	00000000 00000000 00000000 00000000     ................
200008f4:	00000043 00000000 00000000 00000000     C...............
20000904:	00000000 00000000 00000000 00000000     ................
20000914:	00000043 00000000 00000000 00000000     C...............
20000924:	00000000 00000000 00000000 00000000     ................
20000934:	00000043 00000000 00000000 00000000     C...............
20000944:	00000000 00000000 00000000 00000000     ................
20000954:	0008ccc1 0008bc89 00000000 0008dd44     ............D...
20000964:	0008db84 0008dd10 0008dd10 0008dd10     ................
20000974:	0008dd10 0008dd10 0008dd10 0008dd10     ................
20000984:	0008dd10 0008dd10 ffffffff ffffffff     ................
20000994:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
200009a4:	00000000 00000000 00000000 00000000     ................
200009b4:	00000000 00000000 53410000 00494943     ..........ASCII.
200009c4:	00000000 00000000 00000000 00000000     ................
200009d4:	00000000 00000000 00000000              ............

200009e0 <__malloc_av_>:
200009e0:	00000000 00000000 200009e0 200009e0     ........... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68 20000d70 20000d70     h.. h.. p.. p.. 
20000d80:	20000d78 20000d78 20000d80 20000d80     x.. x.. ... ... 
20000d90:	20000d88 20000d88 20000d90 20000d90     ... ... ... ... 
20000da0:	20000d98 20000d98 20000da0 20000da0     ... ... ... ... 
20000db0:	20000da8 20000da8 20000db0 20000db0     ... ... ... ... 
20000dc0:	20000db8 20000db8 20000dc0 20000dc0     ... ... ... ... 
20000dd0:	20000dc8 20000dc8 20000dd0 20000dd0     ... ... ... ... 
20000de0:	20000dd8 20000dd8                       ... ... 

20000de8 <__malloc_sbrk_base>:
20000de8:	ffffffff                                ....

20000dec <__malloc_trim_threshold>:
20000dec:	00020000                                ....
