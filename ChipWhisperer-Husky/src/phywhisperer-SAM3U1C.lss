
phywhisperer-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .text         0000d8fc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008d8fc  0008d8fc  0001d8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000df0  20000000  0008d904  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000a80  20000df0  0008e6f4  00020df0  2**2
=======
  0 .text         0000d7fc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008d7fc  0008d7fc  0001d7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000de8  20000000  0008d804  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000a7c  20000de8  0008e5ec  00020de8  2**2
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020de8  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00020e11  2**0
                  CONTENTS, READONLY
  7 .debug_info   00024717  00000000  00000000  00020e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00004b6f  00000000  00000000  00045574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    00008e5a  00000000  00000000  0004a0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000010f0  00000000  00000000  00052f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000f20  00000000  00000000  0005402d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 12 .debug_macro  000197bb  00000000  00000000  00055244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00016989  00000000  00000000  0006e9ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005a01c  00000000  00000000  00085388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  0000592c  00000000  00000000  000df3a4  2**2
=======
 12 .debug_macro  0001961a  00000000  00000000  00054f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00016a44  00000000  00000000  0006e567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000596a0  00000000  00000000  00084fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00005904  00000000  00000000  000de64c  2**2
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
<<<<<<< HEAD
   80000:	00 40 08 20 75 30 08 00 1d 1f 08 00 1d 1f 08 00     .@. u0..........
   80010:	1d 1f 08 00 1d 1f 08 00 1d 1f 08 00 00 00 00 00     ................
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 1d 1f 08 00     ................
   80030:	1d 1f 08 00 00 00 00 00 1d 1f 08 00 1d 1f 08 00     ................
   80040:	1d 1f 08 00 1d 1f 08 00 1d 1f 08 00 1d 1f 08 00     ................
   80050:	1d 1f 08 00 1d 1f 08 00 1d 1f 08 00 1d 1f 08 00     ................
   80060:	1d 1f 08 00 1d 1f 08 00 5d 26 08 00 75 26 08 00     ........]&..u&..
   80070:	1d 1f 08 00 99 1c 08 00 bd 1c 08 00 e1 1c 08 00     ................
   80080:	1d 1f 08 00 1d 1f 08 00 1d 1f 08 00 1d 1f 08 00     ................
   80090:	1d 1f 08 00 1d 1f 08 00 1d 1f 08 00 1d 1f 08 00     ................
   800a0:	1d 1f 08 00 1d 1f 08 00 1d 1f 08 00 1d 1f 08 00     ................
   800b0:	1d 1f 08 00 5d 48 08 00 1d 1f 08 00                 ....]H......
=======
   80000:	00 40 08 20 f9 3e 08 00 e5 4e 08 00 e5 4e 08 00     .@. .>...N...N..
   80010:	e5 4e 08 00 e5 4e 08 00 e5 4e 08 00 00 00 00 00     .N...N...N......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 e5 4e 08 00     .............N..
   80030:	e5 4e 08 00 00 00 00 00 e5 4e 08 00 e5 4e 08 00     .N.......N...N..
   80040:	e5 4e 08 00 e5 4e 08 00 e5 4e 08 00 e5 4e 08 00     .N...N...N...N..
   80050:	e5 4e 08 00 e5 4e 08 00 e5 4e 08 00 e5 4e 08 00     .N...N...N...N..
   80060:	e5 4e 08 00 e5 4e 08 00 fd 21 08 00 15 22 08 00     .N...N...!..."..
   80070:	e5 4e 08 00 95 1b 08 00 b9 1b 08 00 dd 1b 08 00     .N..............
   80080:	e5 4e 08 00 e5 4e 08 00 e5 4e 08 00 e5 4e 08 00     .N...N...N...N..
   80090:	e5 4e 08 00 e5 4e 08 00 e5 4e 08 00 e5 4e 08 00     .N...N...N...N..
   800a0:	e5 4e 08 00 e5 4e 08 00 e5 4e 08 00 e5 4e 08 00     .N...N...N...N..
   800b0:	e5 4e 08 00 09 24 08 00 e5 4e 08 00                 .N...$...N..
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000de8 	.word	0x20000de8
   800d8:	00000000 	.word	0x00000000
<<<<<<< HEAD
   800dc:	0008d904 	.word	0x0008d904
=======
   800dc:	0008d804 	.word	0x0008d804
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
<<<<<<< HEAD
   800f4:	20000df4 	.word	0x20000df4
   800f8:	0008d904 	.word	0x0008d904
=======
   800f4:	20000dec 	.word	0x20000dec
   800f8:	0008d804 	.word	0x0008d804
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
   80170:	0008278d 	.word	0x0008278d
   80174:	000827f9 	.word	0x000827f9
   80178:	0008286d 	.word	0x0008286d
   8017c:	000828bd 	.word	0x000828bd
=======
   80170:	00084475 	.word	0x00084475
   80174:	000844e1 	.word	0x000844e1
   80178:	00084555 	.word	0x00084555
   8017c:	000845a5 	.word	0x000845a5
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
   801f8:	000827c5 	.word	0x000827c5
   801fc:	00082855 	.word	0x00082855
   80200:	00082909 	.word	0x00082909
=======
   801f8:	000844ad 	.word	0x000844ad
   801fc:	0008453d 	.word	0x0008453d
   80200:	000845f1 	.word	0x000845f1
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b06      	ldr	r3, [pc, #24]	; (802a0 <osc_wait_ready+0x2c>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	bf00      	nop
   80298:	3708      	adds	r7, #8
   8029a:	46bd      	mov	sp, r7
   8029c:	bd80      	pop	{r7, pc}
   8029e:	bf00      	nop
   802a0:	00080181 	.word	0x00080181

000802a4 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a4:	b580      	push	{r7, lr}
   802a6:	b086      	sub	sp, #24
   802a8:	af00      	add	r7, sp, #0
   802aa:	60f8      	str	r0, [r7, #12]
   802ac:	607a      	str	r2, [r7, #4]
   802ae:	603b      	str	r3, [r7, #0]
   802b0:	460b      	mov	r3, r1
   802b2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b4:	687b      	ldr	r3, [r7, #4]
   802b6:	2b00      	cmp	r3, #0
   802b8:	d107      	bne.n	802ca <pll_config_init+0x26>
   802ba:	683b      	ldr	r3, [r7, #0]
   802bc:	2b00      	cmp	r3, #0
   802be:	d104      	bne.n	802ca <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802c0:	68fb      	ldr	r3, [r7, #12]
   802c2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c6:	601a      	str	r2, [r3, #0]
   802c8:	e01a      	b.n	80300 <pll_config_init+0x5c>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802ca:	7afb      	ldrb	r3, [r7, #11]
   802cc:	4618      	mov	r0, r3
   802ce:	4b0e      	ldr	r3, [pc, #56]	; (80308 <pll_config_init+0x64>)
   802d0:	4798      	blx	r3
   802d2:	4602      	mov	r2, r0
   802d4:	687b      	ldr	r3, [r7, #4]
   802d6:	fbb2 f3f3 	udiv	r3, r2, r3
   802da:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802dc:	697b      	ldr	r3, [r7, #20]
   802de:	683a      	ldr	r2, [r7, #0]
   802e0:	fb02 f303 	mul.w	r3, r2, r3
   802e4:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e6:	683b      	ldr	r3, [r7, #0]
   802e8:	3b01      	subs	r3, #1
   802ea:	041a      	lsls	r2, r3, #16
   802ec:	4b07      	ldr	r3, [pc, #28]	; (8030c <pll_config_init+0x68>)
   802ee:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f0:	687a      	ldr	r2, [r7, #4]
   802f2:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f4:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802fa:	68fb      	ldr	r3, [r7, #12]
   802fc:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fe:	bf00      	nop
   80300:	bf00      	nop
   80302:	3718      	adds	r7, #24
   80304:	46bd      	mov	sp, r7
   80306:	bd80      	pop	{r7, pc}
   80308:	00080205 	.word	0x00080205
   8030c:	07ff0000 	.word	0x07ff0000

00080310 <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   80310:	b580      	push	{r7, lr}
   80312:	b082      	sub	sp, #8
   80314:	af00      	add	r7, sp, #0
   80316:	6078      	str	r0, [r7, #4]
   80318:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	2b00      	cmp	r3, #0
   8031e:	d108      	bne.n	80332 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <pll_enable+0x38>)
   80322:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80324:	687b      	ldr	r3, [r7, #4]
   80326:	681b      	ldr	r3, [r3, #0]
   80328:	4a08      	ldr	r2, [pc, #32]	; (8034c <pll_enable+0x3c>)
   8032a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80330:	e005      	b.n	8033e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80332:	687b      	ldr	r3, [r7, #4]
   80334:	681b      	ldr	r3, [r3, #0]
   80336:	4a05      	ldr	r2, [pc, #20]	; (8034c <pll_enable+0x3c>)
   80338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8033c:	61d3      	str	r3, [r2, #28]
}
   8033e:	bf00      	nop
   80340:	3708      	adds	r7, #8
   80342:	46bd      	mov	sp, r7
   80344:	bd80      	pop	{r7, pc}
   80346:	bf00      	nop
<<<<<<< HEAD
   80348:	00082979 	.word	0x00082979
=======
   80348:	00084661 	.word	0x00084661
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
   8034c:	400e0400 	.word	0x400e0400

00080350 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80350:	b580      	push	{r7, lr}
   80352:	b082      	sub	sp, #8
   80354:	af00      	add	r7, sp, #0
   80356:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80358:	687b      	ldr	r3, [r7, #4]
   8035a:	2b00      	cmp	r3, #0
   8035c:	d103      	bne.n	80366 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <pll_is_locked+0x24>)
   80360:	4798      	blx	r3
   80362:	4603      	mov	r3, r0
   80364:	e002      	b.n	8036c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80366:	4b04      	ldr	r3, [pc, #16]	; (80378 <pll_is_locked+0x28>)
   80368:	4798      	blx	r3
   8036a:	4603      	mov	r3, r0
	}
}
   8036c:	4618      	mov	r0, r3
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
<<<<<<< HEAD
   80374:	00082991 	.word	0x00082991
   80378:	000829c5 	.word	0x000829c5
=======
   80374:	00084679 	.word	0x00084679
   80378:	000846ad 	.word	0x000846ad
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

0008037c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	4603      	mov	r3, r0
   80384:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80386:	79fb      	ldrb	r3, [r7, #7]
   80388:	3b03      	subs	r3, #3
   8038a:	2b04      	cmp	r3, #4
   8038c:	d808      	bhi.n	803a0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038e:	79fb      	ldrb	r3, [r7, #7]
   80390:	4618      	mov	r0, r3
   80392:	4b06      	ldr	r3, [pc, #24]	; (803ac <pll_enable_source+0x30>)
   80394:	4798      	blx	r3
		osc_wait_ready(e_src);
   80396:	79fb      	ldrb	r3, [r7, #7]
   80398:	4618      	mov	r0, r3
   8039a:	4b05      	ldr	r3, [pc, #20]	; (803b0 <pll_enable_source+0x34>)
   8039c:	4798      	blx	r3
		break;
   8039e:	e000      	b.n	803a2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803a0:	bf00      	nop
	}
}
   803a2:	bf00      	nop
   803a4:	3708      	adds	r7, #8
   803a6:	46bd      	mov	sp, r7
   803a8:	bd80      	pop	{r7, pc}
   803aa:	bf00      	nop
   803ac:	000800fd 	.word	0x000800fd
   803b0:	00080275 	.word	0x00080275

000803b4 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b4:	b590      	push	{r4, r7, lr}
   803b6:	b085      	sub	sp, #20
   803b8:	af00      	add	r7, sp, #0
   803ba:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803bc:	6878      	ldr	r0, [r7, #4]
   803be:	4b21      	ldr	r3, [pc, #132]	; (80444 <pll_enable_config_defaults+0x90>)
   803c0:	4798      	blx	r3
   803c2:	4603      	mov	r3, r0
   803c4:	2b00      	cmp	r3, #0
   803c6:	d139      	bne.n	8043c <pll_enable_config_defaults+0x88>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c8:	687b      	ldr	r3, [r7, #4]
   803ca:	2b00      	cmp	r3, #0
   803cc:	d003      	beq.n	803d6 <pll_enable_config_defaults+0x22>
   803ce:	687b      	ldr	r3, [r7, #4]
   803d0:	2b01      	cmp	r3, #1
   803d2:	d015      	beq.n	80400 <pll_enable_config_defaults+0x4c>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803d4:	e024      	b.n	80420 <pll_enable_config_defaults+0x6c>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d6:	2006      	movs	r0, #6
   803d8:	4b1b      	ldr	r3, [pc, #108]	; (80448 <pll_enable_config_defaults+0x94>)
   803da:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803dc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803e0:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x98>)
   803e2:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803e4:	bf00      	nop
   803e6:	4b1a      	ldr	r3, [pc, #104]	; (80450 <pll_enable_config_defaults+0x9c>)
   803e8:	4798      	blx	r3
   803ea:	4603      	mov	r3, r0
   803ec:	2b00      	cmp	r3, #0
   803ee:	d0fa      	beq.n	803e6 <pll_enable_config_defaults+0x32>
		pll_config_init(&pllcfg,
   803f0:	f107 000c 	add.w	r0, r7, #12
   803f4:	2310      	movs	r3, #16
   803f6:	2201      	movs	r2, #1
   803f8:	2106      	movs	r1, #6
   803fa:	4c16      	ldr	r4, [pc, #88]	; (80454 <pll_enable_config_defaults+0xa0>)
   803fc:	47a0      	blx	r4
		break;
   803fe:	e00f      	b.n	80420 <pll_enable_config_defaults+0x6c>
		if (pmc_osc_is_bypassed_main_xtal()) {
   80400:	4b15      	ldr	r3, [pc, #84]	; (80458 <pll_enable_config_defaults+0xa4>)
   80402:	4798      	blx	r3
   80404:	4603      	mov	r3, r0
   80406:	2b00      	cmp	r3, #0
   80408:	d102      	bne.n	80410 <pll_enable_config_defaults+0x5c>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   8040a:	2006      	movs	r0, #6
   8040c:	4b0e      	ldr	r3, [pc, #56]	; (80448 <pll_enable_config_defaults+0x94>)
   8040e:	4798      	blx	r3
		pll_config_init(&pllcfg,
   80410:	f107 000c 	add.w	r0, r7, #12
   80414:	2300      	movs	r3, #0
   80416:	2200      	movs	r2, #0
   80418:	2106      	movs	r1, #6
   8041a:	4c0e      	ldr	r4, [pc, #56]	; (80454 <pll_enable_config_defaults+0xa0>)
   8041c:	47a0      	blx	r4
		break;
   8041e:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   80420:	f107 030c 	add.w	r3, r7, #12
   80424:	6879      	ldr	r1, [r7, #4]
   80426:	4618      	mov	r0, r3
   80428:	4b0c      	ldr	r3, [pc, #48]	; (8045c <pll_enable_config_defaults+0xa8>)
   8042a:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   8042c:	bf00      	nop
   8042e:	6878      	ldr	r0, [r7, #4]
   80430:	4b04      	ldr	r3, [pc, #16]	; (80444 <pll_enable_config_defaults+0x90>)
   80432:	4798      	blx	r3
   80434:	4603      	mov	r3, r0
   80436:	2b00      	cmp	r3, #0
   80438:	d0f9      	beq.n	8042e <pll_enable_config_defaults+0x7a>
   8043a:	e000      	b.n	8043e <pll_enable_config_defaults+0x8a>
		return; // Pll already running
   8043c:	bf00      	nop
}
   8043e:	3714      	adds	r7, #20
   80440:	46bd      	mov	sp, r7
   80442:	bd90      	pop	{r4, r7, pc}
   80444:	00080351 	.word	0x00080351
   80448:	0008037d 	.word	0x0008037d
<<<<<<< HEAD
   8044c:	00082939 	.word	0x00082939
   80450:	00082921 	.word	0x00082921
   80454:	000802a5 	.word	0x000802a5
   80458:	000828f1 	.word	0x000828f1
=======
   8044c:	00084621 	.word	0x00084621
   80450:	00084609 	.word	0x00084609
   80454:	000802a5 	.word	0x000802a5
   80458:	000845d9 	.word	0x000845d9
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
   8045c:	00080311 	.word	0x00080311

00080460 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   80460:	b580      	push	{r7, lr}
   80462:	b082      	sub	sp, #8
   80464:	af00      	add	r7, sp, #0
   80466:	4603      	mov	r3, r0
   80468:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8046a:	b672      	cpsid	i
}
   8046c:	bf00      	nop
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8046e:	f3bf 8f5f 	dmb	sy
}
   80472:	bf00      	nop
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80474:	4b05      	ldr	r3, [pc, #20]	; (8048c <sleepmgr_sleep+0x2c>)
   80476:	2200      	movs	r2, #0
   80478:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   8047a:	79fb      	ldrb	r3, [r7, #7]
   8047c:	4618      	mov	r0, r3
   8047e:	4b04      	ldr	r3, [pc, #16]	; (80490 <sleepmgr_sleep+0x30>)
   80480:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
<<<<<<< HEAD
   8055e:	bf00      	nop
   80560:	3708      	adds	r7, #8
   80562:	46bd      	mov	sp, r7
   80564:	bd80      	pop	{r7, pc}
   80566:	bf00      	nop
   80568:	20000284 	.word	0x20000284
   8056c:	00082b75 	.word	0x00082b75
=======
   80482:	bf00      	nop
   80484:	3708      	adds	r7, #8
   80486:	46bd      	mov	sp, r7
   80488:	bd80      	pop	{r7, pc}
   8048a:	bf00      	nop
   8048c:	200003aa 	.word	0x200003aa
   80490:	00085ce5 	.word	0x00085ce5
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

00080494 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80494:	b480      	push	{r7}
   80496:	b083      	sub	sp, #12
   80498:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   8049a:	2300      	movs	r3, #0
   8049c:	71fb      	strb	r3, [r7, #7]
   8049e:	e006      	b.n	804ae <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   804a0:	79fb      	ldrb	r3, [r7, #7]
   804a2:	4a08      	ldr	r2, [pc, #32]	; (804c4 <sleepmgr_init+0x30>)
   804a4:	2100      	movs	r1, #0
   804a6:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   804a8:	79fb      	ldrb	r3, [r7, #7]
   804aa:	3301      	adds	r3, #1
   804ac:	71fb      	strb	r3, [r7, #7]
   804ae:	79fb      	ldrb	r3, [r7, #7]
   804b0:	2b04      	cmp	r3, #4
   804b2:	d9f5      	bls.n	804a0 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   804b4:	4b03      	ldr	r3, [pc, #12]	; (804c4 <sleepmgr_init+0x30>)
   804b6:	2201      	movs	r2, #1
   804b8:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   804ba:	bf00      	nop
   804bc:	370c      	adds	r7, #12
   804be:	46bd      	mov	sp, r7
   804c0:	bc80      	pop	{r7}
   804c2:	4770      	bx	lr
   804c4:	20001834 	.word	0x20001834

000804c8 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   804c8:	b480      	push	{r7}
   804ca:	b083      	sub	sp, #12
   804cc:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   804ce:	2300      	movs	r3, #0
   804d0:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   804d2:	4b09      	ldr	r3, [pc, #36]	; (804f8 <sleepmgr_get_sleep_mode+0x30>)
   804d4:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   804d6:	e005      	b.n	804e4 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   804d8:	683b      	ldr	r3, [r7, #0]
   804da:	3301      	adds	r3, #1
   804dc:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   804de:	79fb      	ldrb	r3, [r7, #7]
   804e0:	3301      	adds	r3, #1
   804e2:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   804e4:	683b      	ldr	r3, [r7, #0]
   804e6:	781b      	ldrb	r3, [r3, #0]
   804e8:	2b00      	cmp	r3, #0
   804ea:	d0f5      	beq.n	804d8 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   804ec:	79fb      	ldrb	r3, [r7, #7]
}
   804ee:	4618      	mov	r0, r3
   804f0:	370c      	adds	r7, #12
   804f2:	46bd      	mov	sp, r7
   804f4:	bc80      	pop	{r7}
   804f6:	4770      	bx	lr
   804f8:	20001834 	.word	0x20001834

000804fc <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   804fc:	b580      	push	{r7, lr}
   804fe:	b082      	sub	sp, #8
   80500:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;

	//cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   80502:	4b0b      	ldr	r3, [pc, #44]	; (80530 <sleepmgr_enter_sleep+0x34>)
   80504:	4798      	blx	r3
   80506:	4603      	mov	r3, r0
   80508:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   8050a:	79fb      	ldrb	r3, [r7, #7]
   8050c:	2b00      	cmp	r3, #0
   8050e:	d108      	bne.n	80522 <sleepmgr_enter_sleep+0x26>
		cpu_irq_enable();
   80510:	4b08      	ldr	r3, [pc, #32]	; (80534 <sleepmgr_enter_sleep+0x38>)
   80512:	2201      	movs	r2, #1
   80514:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   80516:	f3bf 8f5f 	dmb	sy
}
   8051a:	bf00      	nop
  __ASM volatile ("cpsie i");
   8051c:	b662      	cpsie	i
}
   8051e:	bf00      	nop
		return;
   80520:	e003      	b.n	8052a <sleepmgr_enter_sleep+0x2e>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   80522:	79fb      	ldrb	r3, [r7, #7]
   80524:	4618      	mov	r0, r3
   80526:	4b04      	ldr	r3, [pc, #16]	; (80538 <sleepmgr_enter_sleep+0x3c>)
   80528:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   8052a:	3708      	adds	r7, #8
   8052c:	46bd      	mov	sp, r7
   8052e:	bd80      	pop	{r7, pc}
   80530:	000804c9 	.word	0x000804c9
   80534:	200003aa 	.word	0x200003aa
   80538:	00080461 	.word	0x00080461

0008053c <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   8053c:	b480      	push	{r7}
   8053e:	b083      	sub	sp, #12
   80540:	af00      	add	r7, sp, #0
   80542:	6078      	str	r0, [r7, #4]
   80544:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   80546:	687b      	ldr	r3, [r7, #4]
   80548:	2200      	movs	r2, #0
   8054a:	601a      	str	r2, [r3, #0]
}
   8054c:	bf00      	nop
   8054e:	370c      	adds	r7, #12
   80550:	46bd      	mov	sp, r7
   80552:	bc80      	pop	{r7}
   80554:	4770      	bx	lr
   80556:	0000      	movs	r0, r0

00080558 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80558:	b480      	push	{r7}
   8055a:	b083      	sub	sp, #12
   8055c:	af00      	add	r7, sp, #0
   8055e:	6078      	str	r0, [r7, #4]
   80560:	460b      	mov	r3, r1
   80562:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   80564:	687b      	ldr	r3, [r7, #4]
   80566:	681b      	ldr	r3, [r3, #0]
   80568:	f023 0207 	bic.w	r2, r3, #7
   8056c:	687b      	ldr	r3, [r7, #4]
   8056e:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   80570:	78fb      	ldrb	r3, [r7, #3]
   80572:	2b0a      	cmp	r3, #10
   80574:	d839      	bhi.n	805ea <genclk_config_set_source+0x92>
   80576:	a201      	add	r2, pc, #4	; (adr r2, 8057c <genclk_config_set_source+0x24>)
   80578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8057c:	000805a9 	.word	0x000805a9
   80580:	000805a9 	.word	0x000805a9
   80584:	000805a9 	.word	0x000805a9
   80588:	000805b3 	.word	0x000805b3
   8058c:	000805b3 	.word	0x000805b3
   80590:	000805b3 	.word	0x000805b3
   80594:	000805b3 	.word	0x000805b3
   80598:	000805b3 	.word	0x000805b3
   8059c:	000805c1 	.word	0x000805c1
   805a0:	000805cf 	.word	0x000805cf
   805a4:	000805dd 	.word	0x000805dd
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   805a8:	687b      	ldr	r3, [r7, #4]
   805aa:	681a      	ldr	r2, [r3, #0]
   805ac:	687b      	ldr	r3, [r7, #4]
   805ae:	601a      	str	r2, [r3, #0]
		break;
   805b0:	e01b      	b.n	805ea <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   805b2:	687b      	ldr	r3, [r7, #4]
   805b4:	681b      	ldr	r3, [r3, #0]
   805b6:	f043 0201 	orr.w	r2, r3, #1
   805ba:	687b      	ldr	r3, [r7, #4]
   805bc:	601a      	str	r2, [r3, #0]
		break;
   805be:	e014      	b.n	805ea <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   805c0:	687b      	ldr	r3, [r7, #4]
   805c2:	681b      	ldr	r3, [r3, #0]
   805c4:	f043 0202 	orr.w	r2, r3, #2
   805c8:	687b      	ldr	r3, [r7, #4]
   805ca:	601a      	str	r2, [r3, #0]
		break;
   805cc:	e00d      	b.n	805ea <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   805ce:	687b      	ldr	r3, [r7, #4]
   805d0:	681b      	ldr	r3, [r3, #0]
   805d2:	f043 0203 	orr.w	r2, r3, #3
   805d6:	687b      	ldr	r3, [r7, #4]
   805d8:	601a      	str	r2, [r3, #0]
		break;
   805da:	e006      	b.n	805ea <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   805dc:	687b      	ldr	r3, [r7, #4]
   805de:	681b      	ldr	r3, [r3, #0]
   805e0:	f043 0204 	orr.w	r2, r3, #4
   805e4:	687b      	ldr	r3, [r7, #4]
   805e6:	601a      	str	r2, [r3, #0]
		break;
   805e8:	bf00      	nop
	}
}
   805ea:	bf00      	nop
   805ec:	370c      	adds	r7, #12
   805ee:	46bd      	mov	sp, r7
   805f0:	bc80      	pop	{r7}
   805f2:	4770      	bx	lr

000805f4 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   805f4:	b480      	push	{r7}
   805f6:	b083      	sub	sp, #12
   805f8:	af00      	add	r7, sp, #0
   805fa:	6078      	str	r0, [r7, #4]
   805fc:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   805fe:	687b      	ldr	r3, [r7, #4]
   80600:	681b      	ldr	r3, [r3, #0]
   80602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   80606:	687b      	ldr	r3, [r7, #4]
   80608:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   8060a:	687b      	ldr	r3, [r7, #4]
   8060c:	681a      	ldr	r2, [r3, #0]
   8060e:	683b      	ldr	r3, [r7, #0]
   80610:	431a      	orrs	r2, r3
   80612:	687b      	ldr	r3, [r7, #4]
   80614:	601a      	str	r2, [r3, #0]
}
   80616:	bf00      	nop
   80618:	370c      	adds	r7, #12
   8061a:	46bd      	mov	sp, r7
   8061c:	bc80      	pop	{r7}
   8061e:	4770      	bx	lr

00080620 <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80620:	b580      	push	{r7, lr}
   80622:	b082      	sub	sp, #8
   80624:	af00      	add	r7, sp, #0
   80626:	6078      	str	r0, [r7, #4]
   80628:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   8062a:	4907      	ldr	r1, [pc, #28]	; (80648 <genclk_enable+0x28>)
   8062c:	687b      	ldr	r3, [r7, #4]
   8062e:	681a      	ldr	r2, [r3, #0]
   80630:	683b      	ldr	r3, [r7, #0]
   80632:	3310      	adds	r3, #16
   80634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80638:	6838      	ldr	r0, [r7, #0]
   8063a:	4b04      	ldr	r3, [pc, #16]	; (8064c <genclk_enable+0x2c>)
   8063c:	4798      	blx	r3
}
<<<<<<< HEAD
   8071a:	bf00      	nop
   8071c:	3708      	adds	r7, #8
   8071e:	46bd      	mov	sp, r7
   80720:	bd80      	pop	{r7, pc}
   80722:	bf00      	nop
   80724:	400e0400 	.word	0x400e0400
   80728:	00082a75 	.word	0x00082a75
=======
   8063e:	bf00      	nop
   80640:	3708      	adds	r7, #8
   80642:	46bd      	mov	sp, r7
   80644:	bd80      	pop	{r7, pc}
   80646:	bf00      	nop
   80648:	400e0400 	.word	0x400e0400
   8064c:	0008475d 	.word	0x0008475d
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

00080650 <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   80650:	b580      	push	{r7, lr}
   80652:	b082      	sub	sp, #8
   80654:	af00      	add	r7, sp, #0
   80656:	4603      	mov	r3, r0
   80658:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8065a:	79fb      	ldrb	r3, [r7, #7]
   8065c:	2b0a      	cmp	r3, #10
   8065e:	f200 80a2 	bhi.w	807a6 <genclk_enable_source+0x156>
   80662:	a201      	add	r2, pc, #4	; (adr r2, 80668 <genclk_enable_source+0x18>)
   80664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80668:	00080695 	.word	0x00080695
   8066c:	000806b7 	.word	0x000806b7
   80670:	000806d7 	.word	0x000806d7
   80674:	000806f7 	.word	0x000806f7
   80678:	00080717 	.word	0x00080717
   8067c:	00080737 	.word	0x00080737
   80680:	00080757 	.word	0x00080757
   80684:	00080777 	.word	0x00080777
   80688:	00080797 	.word	0x00080797
   8068c:	0008079f 	.word	0x0008079f
   80690:	000807a7 	.word	0x000807a7
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   80694:	2000      	movs	r0, #0
   80696:	4b4e      	ldr	r3, [pc, #312]	; (807d0 <genclk_enable_source+0x180>)
   80698:	4798      	blx	r3
   8069a:	4603      	mov	r3, r0
   8069c:	f083 0301 	eor.w	r3, r3, #1
   806a0:	b2db      	uxtb	r3, r3
   806a2:	2b00      	cmp	r3, #0
   806a4:	f000 8081 	beq.w	807aa <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   806a8:	2000      	movs	r0, #0
   806aa:	4b4a      	ldr	r3, [pc, #296]	; (807d4 <genclk_enable_source+0x184>)
   806ac:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   806ae:	2000      	movs	r0, #0
   806b0:	4b49      	ldr	r3, [pc, #292]	; (807d8 <genclk_enable_source+0x188>)
   806b2:	4798      	blx	r3
		}
		break;
   806b4:	e079      	b.n	807aa <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   806b6:	2001      	movs	r0, #1
   806b8:	4b45      	ldr	r3, [pc, #276]	; (807d0 <genclk_enable_source+0x180>)
   806ba:	4798      	blx	r3
   806bc:	4603      	mov	r3, r0
   806be:	f083 0301 	eor.w	r3, r3, #1
   806c2:	b2db      	uxtb	r3, r3
   806c4:	2b00      	cmp	r3, #0
   806c6:	d072      	beq.n	807ae <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   806c8:	2001      	movs	r0, #1
   806ca:	4b42      	ldr	r3, [pc, #264]	; (807d4 <genclk_enable_source+0x184>)
   806cc:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   806ce:	2001      	movs	r0, #1
   806d0:	4b41      	ldr	r3, [pc, #260]	; (807d8 <genclk_enable_source+0x188>)
   806d2:	4798      	blx	r3
		}
		break;
   806d4:	e06b      	b.n	807ae <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   806d6:	2002      	movs	r0, #2
   806d8:	4b3d      	ldr	r3, [pc, #244]	; (807d0 <genclk_enable_source+0x180>)
   806da:	4798      	blx	r3
   806dc:	4603      	mov	r3, r0
   806de:	f083 0301 	eor.w	r3, r3, #1
   806e2:	b2db      	uxtb	r3, r3
   806e4:	2b00      	cmp	r3, #0
   806e6:	d064      	beq.n	807b2 <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   806e8:	2002      	movs	r0, #2
   806ea:	4b3a      	ldr	r3, [pc, #232]	; (807d4 <genclk_enable_source+0x184>)
   806ec:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   806ee:	2002      	movs	r0, #2
   806f0:	4b39      	ldr	r3, [pc, #228]	; (807d8 <genclk_enable_source+0x188>)
   806f2:	4798      	blx	r3
		}
		break;
   806f4:	e05d      	b.n	807b2 <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   806f6:	2003      	movs	r0, #3
   806f8:	4b35      	ldr	r3, [pc, #212]	; (807d0 <genclk_enable_source+0x180>)
   806fa:	4798      	blx	r3
   806fc:	4603      	mov	r3, r0
   806fe:	f083 0301 	eor.w	r3, r3, #1
   80702:	b2db      	uxtb	r3, r3
   80704:	2b00      	cmp	r3, #0
   80706:	d056      	beq.n	807b6 <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   80708:	2003      	movs	r0, #3
   8070a:	4b32      	ldr	r3, [pc, #200]	; (807d4 <genclk_enable_source+0x184>)
   8070c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   8070e:	2003      	movs	r0, #3
   80710:	4b31      	ldr	r3, [pc, #196]	; (807d8 <genclk_enable_source+0x188>)
   80712:	4798      	blx	r3
		}
		break;
   80714:	e04f      	b.n	807b6 <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   80716:	2004      	movs	r0, #4
   80718:	4b2d      	ldr	r3, [pc, #180]	; (807d0 <genclk_enable_source+0x180>)
   8071a:	4798      	blx	r3
   8071c:	4603      	mov	r3, r0
   8071e:	f083 0301 	eor.w	r3, r3, #1
   80722:	b2db      	uxtb	r3, r3
   80724:	2b00      	cmp	r3, #0
   80726:	d048      	beq.n	807ba <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   80728:	2004      	movs	r0, #4
   8072a:	4b2a      	ldr	r3, [pc, #168]	; (807d4 <genclk_enable_source+0x184>)
   8072c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   8072e:	2004      	movs	r0, #4
   80730:	4b29      	ldr	r3, [pc, #164]	; (807d8 <genclk_enable_source+0x188>)
   80732:	4798      	blx	r3
		}
		break;
   80734:	e041      	b.n	807ba <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   80736:	2005      	movs	r0, #5
   80738:	4b25      	ldr	r3, [pc, #148]	; (807d0 <genclk_enable_source+0x180>)
   8073a:	4798      	blx	r3
   8073c:	4603      	mov	r3, r0
   8073e:	f083 0301 	eor.w	r3, r3, #1
   80742:	b2db      	uxtb	r3, r3
   80744:	2b00      	cmp	r3, #0
   80746:	d03a      	beq.n	807be <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80748:	2005      	movs	r0, #5
   8074a:	4b22      	ldr	r3, [pc, #136]	; (807d4 <genclk_enable_source+0x184>)
   8074c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   8074e:	2005      	movs	r0, #5
   80750:	4b21      	ldr	r3, [pc, #132]	; (807d8 <genclk_enable_source+0x188>)
   80752:	4798      	blx	r3
		}
		break;
   80754:	e033      	b.n	807be <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   80756:	2006      	movs	r0, #6
   80758:	4b1d      	ldr	r3, [pc, #116]	; (807d0 <genclk_enable_source+0x180>)
   8075a:	4798      	blx	r3
   8075c:	4603      	mov	r3, r0
   8075e:	f083 0301 	eor.w	r3, r3, #1
   80762:	b2db      	uxtb	r3, r3
   80764:	2b00      	cmp	r3, #0
   80766:	d02c      	beq.n	807c2 <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   80768:	2006      	movs	r0, #6
   8076a:	4b1a      	ldr	r3, [pc, #104]	; (807d4 <genclk_enable_source+0x184>)
   8076c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   8076e:	2006      	movs	r0, #6
   80770:	4b19      	ldr	r3, [pc, #100]	; (807d8 <genclk_enable_source+0x188>)
   80772:	4798      	blx	r3
		}
		break;
   80774:	e025      	b.n	807c2 <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   80776:	2007      	movs	r0, #7
   80778:	4b15      	ldr	r3, [pc, #84]	; (807d0 <genclk_enable_source+0x180>)
   8077a:	4798      	blx	r3
   8077c:	4603      	mov	r3, r0
   8077e:	f083 0301 	eor.w	r3, r3, #1
   80782:	b2db      	uxtb	r3, r3
   80784:	2b00      	cmp	r3, #0
   80786:	d01e      	beq.n	807c6 <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   80788:	2007      	movs	r0, #7
   8078a:	4b12      	ldr	r3, [pc, #72]	; (807d4 <genclk_enable_source+0x184>)
   8078c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   8078e:	2007      	movs	r0, #7
   80790:	4b11      	ldr	r3, [pc, #68]	; (807d8 <genclk_enable_source+0x188>)
   80792:	4798      	blx	r3
		}
		break;
   80794:	e017      	b.n	807c6 <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   80796:	2000      	movs	r0, #0
   80798:	4b10      	ldr	r3, [pc, #64]	; (807dc <genclk_enable_source+0x18c>)
   8079a:	4798      	blx	r3
		break;
   8079c:	e014      	b.n	807c8 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   8079e:	2001      	movs	r0, #1
   807a0:	4b0e      	ldr	r3, [pc, #56]	; (807dc <genclk_enable_source+0x18c>)
   807a2:	4798      	blx	r3
		break;
   807a4:	e010      	b.n	807c8 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   807a6:	bf00      	nop
   807a8:	e00e      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807aa:	bf00      	nop
   807ac:	e00c      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807ae:	bf00      	nop
   807b0:	e00a      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807b2:	bf00      	nop
   807b4:	e008      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807b6:	bf00      	nop
   807b8:	e006      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807ba:	bf00      	nop
   807bc:	e004      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807be:	bf00      	nop
   807c0:	e002      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807c2:	bf00      	nop
   807c4:	e000      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807c6:	bf00      	nop
	}
}
   807c8:	bf00      	nop
   807ca:	3708      	adds	r7, #8
   807cc:	46bd      	mov	sp, r7
   807ce:	bd80      	pop	{r7, pc}
   807d0:	00080181 	.word	0x00080181
   807d4:	000800fd 	.word	0x000800fd
   807d8:	00080275 	.word	0x00080275
   807dc:	000803b5 	.word	0x000803b5

000807e0 <phywhisperer_setup_pins>:
//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";


void phywhisperer_setup_pins(void)
{
   807e0:	b580      	push	{r7, lr}
   807e2:	af00      	add	r7, sp, #0
    board_init();
<<<<<<< HEAD
   808c0:	4b3a      	ldr	r3, [pc, #232]	; (809ac <phywhisperer_setup_pins+0xf0>)
   808c2:	4798      	blx	r3
    ioport_set_pin_mode(BUTTON_IN, IOPORT_MODE_PULLUP); //(1 << 2) = PULL UP
   808c4:	2108      	movs	r1, #8
   808c6:	2018      	movs	r0, #24
   808c8:	4b39      	ldr	r3, [pc, #228]	; (809b0 <phywhisperer_setup_pins+0xf4>)
   808ca:	4798      	blx	r3
    PIOA->PIO_ODR = (1 << BUTTON_IN);
   808cc:	4b39      	ldr	r3, [pc, #228]	; (809b4 <phywhisperer_setup_pins+0xf8>)
   808ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   808d2:	615a      	str	r2, [r3, #20]
    PIOA->PIO_PUER = (1 << BUTTON_IN); // enable pullup
   808d4:	4b37      	ldr	r3, [pc, #220]	; (809b4 <phywhisperer_setup_pins+0xf8>)
   808d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   808da:	665a      	str	r2, [r3, #100]	; 0x64
    PIOA->PIO_DIFSR = (1 << BUTTON_IN); //enable debounce
   808dc:	4b35      	ldr	r3, [pc, #212]	; (809b4 <phywhisperer_setup_pins+0xf8>)
   808de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   808e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    PIOA->PIO_OER = (1 << F_VB5V) | (1 << F_VBHOST); //enable output mode on VBHOST/VBSNIFF pins
   808e6:	4b33      	ldr	r3, [pc, #204]	; (809b4 <phywhisperer_setup_pins+0xf8>)
   808e8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   808ec:	611a      	str	r2, [r3, #16]
=======
   807e4:	4b2f      	ldr	r3, [pc, #188]	; (808a4 <phywhisperer_setup_pins+0xc4>)
   807e6:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

    
    //Configure FPGA to allow programming via USB
    fpga_program_init();
<<<<<<< HEAD
   808ee:	4b32      	ldr	r3, [pc, #200]	; (809b8 <phywhisperer_setup_pins+0xfc>)
   808f0:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   808f2:	2009      	movs	r0, #9
   808f4:	4b31      	ldr	r3, [pc, #196]	; (809bc <phywhisperer_setup_pins+0x100>)
   808f6:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   808f8:	4931      	ldr	r1, [pc, #196]	; (809c0 <phywhisperer_setup_pins+0x104>)
   808fa:	2029      	movs	r0, #41	; 0x29
   808fc:	4b31      	ldr	r3, [pc, #196]	; (809c4 <phywhisperer_setup_pins+0x108>)
   808fe:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   80900:	492f      	ldr	r1, [pc, #188]	; (809c0 <phywhisperer_setup_pins+0x104>)
   80902:	202a      	movs	r0, #42	; 0x2a
   80904:	4b2f      	ldr	r3, [pc, #188]	; (809c4 <phywhisperer_setup_pins+0x108>)
   80906:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   80908:	492d      	ldr	r1, [pc, #180]	; (809c0 <phywhisperer_setup_pins+0x104>)
   8090a:	202b      	movs	r0, #43	; 0x2b
   8090c:	4b2d      	ldr	r3, [pc, #180]	; (809c4 <phywhisperer_setup_pins+0x108>)
   8090e:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   80910:	492b      	ldr	r1, [pc, #172]	; (809c0 <phywhisperer_setup_pins+0x104>)
   80912:	202c      	movs	r0, #44	; 0x2c
   80914:	4b2b      	ldr	r3, [pc, #172]	; (809c4 <phywhisperer_setup_pins+0x108>)
   80916:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   80918:	4929      	ldr	r1, [pc, #164]	; (809c0 <phywhisperer_setup_pins+0x104>)
   8091a:	202d      	movs	r0, #45	; 0x2d
   8091c:	4b29      	ldr	r3, [pc, #164]	; (809c4 <phywhisperer_setup_pins+0x108>)
   8091e:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   80920:	4927      	ldr	r1, [pc, #156]	; (809c0 <phywhisperer_setup_pins+0x104>)
   80922:	202e      	movs	r0, #46	; 0x2e
   80924:	4b27      	ldr	r3, [pc, #156]	; (809c4 <phywhisperer_setup_pins+0x108>)
   80926:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80928:	4925      	ldr	r1, [pc, #148]	; (809c0 <phywhisperer_setup_pins+0x104>)
   8092a:	202f      	movs	r0, #47	; 0x2f
   8092c:	4b25      	ldr	r3, [pc, #148]	; (809c4 <phywhisperer_setup_pins+0x108>)
   8092e:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   80930:	4923      	ldr	r1, [pc, #140]	; (809c0 <phywhisperer_setup_pins+0x104>)
   80932:	2030      	movs	r0, #48	; 0x30
   80934:	4b23      	ldr	r3, [pc, #140]	; (809c4 <phywhisperer_setup_pins+0x108>)
   80936:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   80938:	4921      	ldr	r1, [pc, #132]	; (809c0 <phywhisperer_setup_pins+0x104>)
   8093a:	2033      	movs	r0, #51	; 0x33
   8093c:	4b21      	ldr	r3, [pc, #132]	; (809c4 <phywhisperer_setup_pins+0x108>)
   8093e:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80940:	491f      	ldr	r1, [pc, #124]	; (809c0 <phywhisperer_setup_pins+0x104>)
   80942:	2037      	movs	r0, #55	; 0x37
   80944:	4b1f      	ldr	r3, [pc, #124]	; (809c4 <phywhisperer_setup_pins+0x108>)
   80946:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80948:	491d      	ldr	r1, [pc, #116]	; (809c0 <phywhisperer_setup_pins+0x104>)
   8094a:	2034      	movs	r0, #52	; 0x34
   8094c:	4b1d      	ldr	r3, [pc, #116]	; (809c4 <phywhisperer_setup_pins+0x108>)
   8094e:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80950:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   80954:	f240 11bf 	movw	r1, #447	; 0x1bf
   80958:	481b      	ldr	r0, [pc, #108]	; (809c8 <phywhisperer_setup_pins+0x10c>)
   8095a:	4b1c      	ldr	r3, [pc, #112]	; (809cc <phywhisperer_setup_pins+0x110>)
   8095c:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   8095e:	f240 11bf 	movw	r1, #447	; 0x1bf
   80962:	4819      	ldr	r0, [pc, #100]	; (809c8 <phywhisperer_setup_pins+0x10c>)
   80964:	4b1a      	ldr	r3, [pc, #104]	; (809d0 <phywhisperer_setup_pins+0x114>)
   80966:	4798      	blx	r3
=======
   807e8:	4b2f      	ldr	r3, [pc, #188]	; (808a8 <phywhisperer_setup_pins+0xc8>)
   807ea:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   807ec:	2009      	movs	r0, #9
   807ee:	4b2f      	ldr	r3, [pc, #188]	; (808ac <phywhisperer_setup_pins+0xcc>)
   807f0:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   807f2:	492f      	ldr	r1, [pc, #188]	; (808b0 <phywhisperer_setup_pins+0xd0>)
   807f4:	2029      	movs	r0, #41	; 0x29
   807f6:	4b2f      	ldr	r3, [pc, #188]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   807f8:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   807fa:	492d      	ldr	r1, [pc, #180]	; (808b0 <phywhisperer_setup_pins+0xd0>)
   807fc:	202a      	movs	r0, #42	; 0x2a
   807fe:	4b2d      	ldr	r3, [pc, #180]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   80800:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   80802:	492b      	ldr	r1, [pc, #172]	; (808b0 <phywhisperer_setup_pins+0xd0>)
   80804:	202b      	movs	r0, #43	; 0x2b
   80806:	4b2b      	ldr	r3, [pc, #172]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   80808:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   8080a:	4929      	ldr	r1, [pc, #164]	; (808b0 <phywhisperer_setup_pins+0xd0>)
   8080c:	202c      	movs	r0, #44	; 0x2c
   8080e:	4b29      	ldr	r3, [pc, #164]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   80810:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   80812:	4927      	ldr	r1, [pc, #156]	; (808b0 <phywhisperer_setup_pins+0xd0>)
   80814:	202d      	movs	r0, #45	; 0x2d
   80816:	4b27      	ldr	r3, [pc, #156]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   80818:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   8081a:	4925      	ldr	r1, [pc, #148]	; (808b0 <phywhisperer_setup_pins+0xd0>)
   8081c:	202e      	movs	r0, #46	; 0x2e
   8081e:	4b25      	ldr	r3, [pc, #148]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   80820:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80822:	4923      	ldr	r1, [pc, #140]	; (808b0 <phywhisperer_setup_pins+0xd0>)
   80824:	202f      	movs	r0, #47	; 0x2f
   80826:	4b23      	ldr	r3, [pc, #140]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   80828:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   8082a:	4921      	ldr	r1, [pc, #132]	; (808b0 <phywhisperer_setup_pins+0xd0>)
   8082c:	2030      	movs	r0, #48	; 0x30
   8082e:	4b21      	ldr	r3, [pc, #132]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   80830:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   80832:	491f      	ldr	r1, [pc, #124]	; (808b0 <phywhisperer_setup_pins+0xd0>)
   80834:	2033      	movs	r0, #51	; 0x33
   80836:	4b1f      	ldr	r3, [pc, #124]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   80838:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   8083a:	491d      	ldr	r1, [pc, #116]	; (808b0 <phywhisperer_setup_pins+0xd0>)
   8083c:	2037      	movs	r0, #55	; 0x37
   8083e:	4b1d      	ldr	r3, [pc, #116]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   80840:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80842:	491b      	ldr	r1, [pc, #108]	; (808b0 <phywhisperer_setup_pins+0xd0>)
   80844:	2034      	movs	r0, #52	; 0x34
   80846:	4b1b      	ldr	r3, [pc, #108]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   80848:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   8084a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   8084e:	f240 11bf 	movw	r1, #447	; 0x1bf
   80852:	4819      	ldr	r0, [pc, #100]	; (808b8 <phywhisperer_setup_pins+0xd8>)
   80854:	4b19      	ldr	r3, [pc, #100]	; (808bc <phywhisperer_setup_pins+0xdc>)
   80856:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   80858:	f240 11bf 	movw	r1, #447	; 0x1bf
   8085c:	4816      	ldr	r0, [pc, #88]	; (808b8 <phywhisperer_setup_pins+0xd8>)
   8085e:	4b18      	ldr	r3, [pc, #96]	; (808c0 <phywhisperer_setup_pins+0xe0>)
   80860:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
    */

    gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
<<<<<<< HEAD
   80968:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8096c:	2026      	movs	r0, #38	; 0x26
   8096e:	4b15      	ldr	r3, [pc, #84]	; (809c4 <phywhisperer_setup_pins+0x108>)
   80970:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   80972:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80976:	2031      	movs	r0, #49	; 0x31
   80978:	4b12      	ldr	r3, [pc, #72]	; (809c4 <phywhisperer_setup_pins+0x108>)
   8097a:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   8097c:	2200      	movs	r2, #0
   8097e:	2100      	movs	r1, #0
   80980:	4814      	ldr	r0, [pc, #80]	; (809d4 <phywhisperer_setup_pins+0x118>)
   80982:	4b15      	ldr	r3, [pc, #84]	; (809d8 <phywhisperer_setup_pins+0x11c>)
   80984:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(0)
                         | SMC_SETUP_NRD_SETUP(0)
                         | SMC_SETUP_NCS_RD_SETUP(0));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(0)
   80986:	2200      	movs	r2, #0
   80988:	2100      	movs	r1, #0
   8098a:	4812      	ldr	r0, [pc, #72]	; (809d4 <phywhisperer_setup_pins+0x118>)
   8098c:	4b13      	ldr	r3, [pc, #76]	; (809dc <phywhisperer_setup_pins+0x120>)
   8098e:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(0)
                         | SMC_PULSE_NRD_PULSE(0)
                         | SMC_PULSE_NCS_RD_PULSE(0));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(1)
   80990:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80994:	2100      	movs	r1, #0
   80996:	480f      	ldr	r0, [pc, #60]	; (809d4 <phywhisperer_setup_pins+0x118>)
   80998:	4b11      	ldr	r3, [pc, #68]	; (809e0 <phywhisperer_setup_pins+0x124>)
   8099a:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(1));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   8099c:	2203      	movs	r2, #3
   8099e:	2100      	movs	r1, #0
   809a0:	480c      	ldr	r0, [pc, #48]	; (809d4 <phywhisperer_setup_pins+0x118>)
   809a2:	4b10      	ldr	r3, [pc, #64]	; (809e4 <phywhisperer_setup_pins+0x128>)
   809a4:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   809a6:	bf00      	nop
   809a8:	bd80      	pop	{r7, pc}
   809aa:	bf00      	nop
   809ac:	00082019 	.word	0x00082019
   809b0:	00080461 	.word	0x00080461
   809b4:	400e0c00 	.word	0x400e0c00
   809b8:	000814ad 	.word	0x000814ad
   809bc:	000829dd 	.word	0x000829dd
   809c0:	08000001 	.word	0x08000001
   809c4:	00082379 	.word	0x00082379
   809c8:	400e0e00 	.word	0x400e0e00
   809cc:	000824a9 	.word	0x000824a9
   809d0:	00082285 	.word	0x00082285
   809d4:	400e0000 	.word	0x400e0000
   809d8:	00082fcd 	.word	0x00082fcd
   809dc:	00082ff7 	.word	0x00082ff7
   809e0:	00083021 	.word	0x00083021
   809e4:	0008304b 	.word	0x0008304b

000809e8 <genclk_enable_config>:
=======
   80862:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80866:	2026      	movs	r0, #38	; 0x26
   80868:	4b12      	ldr	r3, [pc, #72]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   8086a:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   8086c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80870:	2031      	movs	r0, #49	; 0x31
   80872:	4b10      	ldr	r3, [pc, #64]	; (808b4 <phywhisperer_setup_pins+0xd4>)
   80874:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   80876:	4a13      	ldr	r2, [pc, #76]	; (808c4 <phywhisperer_setup_pins+0xe4>)
   80878:	2100      	movs	r1, #0
   8087a:	4813      	ldr	r0, [pc, #76]	; (808c8 <phywhisperer_setup_pins+0xe8>)
   8087c:	4b13      	ldr	r3, [pc, #76]	; (808cc <phywhisperer_setup_pins+0xec>)
   8087e:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(1)
                         | SMC_SETUP_NRD_SETUP(1)
                         | SMC_SETUP_NCS_RD_SETUP(1));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   80880:	4a13      	ldr	r2, [pc, #76]	; (808d0 <phywhisperer_setup_pins+0xf0>)
   80882:	2100      	movs	r1, #0
   80884:	4810      	ldr	r0, [pc, #64]	; (808c8 <phywhisperer_setup_pins+0xe8>)
   80886:	4b13      	ldr	r3, [pc, #76]	; (808d4 <phywhisperer_setup_pins+0xf4>)
   80888:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(1)
                         | SMC_PULSE_NRD_PULSE(3)
                         | SMC_PULSE_NCS_RD_PULSE(1));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   8088a:	4a13      	ldr	r2, [pc, #76]	; (808d8 <phywhisperer_setup_pins+0xf8>)
   8088c:	2100      	movs	r1, #0
   8088e:	480e      	ldr	r0, [pc, #56]	; (808c8 <phywhisperer_setup_pins+0xe8>)
   80890:	4b12      	ldr	r3, [pc, #72]	; (808dc <phywhisperer_setup_pins+0xfc>)
   80892:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(4));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   80894:	2203      	movs	r2, #3
   80896:	2100      	movs	r1, #0
   80898:	480b      	ldr	r0, [pc, #44]	; (808c8 <phywhisperer_setup_pins+0xe8>)
   8089a:	4b11      	ldr	r3, [pc, #68]	; (808e0 <phywhisperer_setup_pins+0x100>)
   8089c:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   8089e:	bf00      	nop
   808a0:	bd80      	pop	{r7, pc}
   808a2:	bf00      	nop
   808a4:	000862b9 	.word	0x000862b9
   808a8:	000813a9 	.word	0x000813a9
   808ac:	000846c5 	.word	0x000846c5
   808b0:	08000001 	.word	0x08000001
   808b4:	00084cb5 	.word	0x00084cb5
   808b8:	400e0e00 	.word	0x400e0e00
   808bc:	00084de5 	.word	0x00084de5
   808c0:	00084bc1 	.word	0x00084bc1
   808c4:	01010100 	.word	0x01010100
   808c8:	400e0000 	.word	0x400e0000
   808cc:	000820a1 	.word	0x000820a1
   808d0:	01030101 	.word	0x01030101
   808d4:	000820cb 	.word	0x000820cb
   808d8:	00040002 	.word	0x00040002
   808dc:	000820f5 	.word	0x000820f5
   808e0:	0008211f 	.word	0x0008211f

000808e4 <genclk_enable_config>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
{
    for (volatile uint32_t i = 0; i < 250000; i++);
}

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
<<<<<<< HEAD
   809e8:	b580      	push	{r7, lr}
   809ea:	b086      	sub	sp, #24
   809ec:	af00      	add	r7, sp, #0
   809ee:	60f8      	str	r0, [r7, #12]
   809f0:	460b      	mov	r3, r1
   809f2:	607a      	str	r2, [r7, #4]
   809f4:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   809f6:	f107 0314 	add.w	r3, r7, #20
   809fa:	68f9      	ldr	r1, [r7, #12]
   809fc:	4618      	mov	r0, r3
   809fe:	4b0e      	ldr	r3, [pc, #56]	; (80a38 <genclk_enable_config+0x50>)
   80a00:	4798      	blx	r3
    genclk_enable_source(src);
   80a02:	7afb      	ldrb	r3, [r7, #11]
   80a04:	4618      	mov	r0, r3
   80a06:	4b0d      	ldr	r3, [pc, #52]	; (80a3c <genclk_enable_config+0x54>)
   80a08:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   80a0a:	7afa      	ldrb	r2, [r7, #11]
   80a0c:	f107 0314 	add.w	r3, r7, #20
   80a10:	4611      	mov	r1, r2
   80a12:	4618      	mov	r0, r3
   80a14:	4b0a      	ldr	r3, [pc, #40]	; (80a40 <genclk_enable_config+0x58>)
   80a16:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   80a18:	f107 0314 	add.w	r3, r7, #20
   80a1c:	6879      	ldr	r1, [r7, #4]
   80a1e:	4618      	mov	r0, r3
   80a20:	4b08      	ldr	r3, [pc, #32]	; (80a44 <genclk_enable_config+0x5c>)
   80a22:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80a24:	f107 0314 	add.w	r3, r7, #20
   80a28:	68f9      	ldr	r1, [r7, #12]
   80a2a:	4618      	mov	r0, r3
   80a2c:	4b06      	ldr	r3, [pc, #24]	; (80a48 <genclk_enable_config+0x60>)
   80a2e:	4798      	blx	r3
}
   80a30:	bf00      	nop
   80a32:	3718      	adds	r7, #24
   80a34:	46bd      	mov	sp, r7
   80a36:	bd80      	pop	{r7, pc}
   80a38:	00080619 	.word	0x00080619
   80a3c:	0008072d 	.word	0x0008072d
   80a40:	00080635 	.word	0x00080635
   80a44:	000806d1 	.word	0x000806d1
   80a48:	000806fd 	.word	0x000806fd

00080a4c <main>:
=======
   808e4:	b580      	push	{r7, lr}
   808e6:	b086      	sub	sp, #24
   808e8:	af00      	add	r7, sp, #0
   808ea:	60f8      	str	r0, [r7, #12]
   808ec:	460b      	mov	r3, r1
   808ee:	607a      	str	r2, [r7, #4]
   808f0:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   808f2:	f107 0314 	add.w	r3, r7, #20
   808f6:	68f9      	ldr	r1, [r7, #12]
   808f8:	4618      	mov	r0, r3
   808fa:	4b0e      	ldr	r3, [pc, #56]	; (80934 <genclk_enable_config+0x50>)
   808fc:	4798      	blx	r3
    genclk_enable_source(src);
   808fe:	7afb      	ldrb	r3, [r7, #11]
   80900:	4618      	mov	r0, r3
   80902:	4b0d      	ldr	r3, [pc, #52]	; (80938 <genclk_enable_config+0x54>)
   80904:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   80906:	7afa      	ldrb	r2, [r7, #11]
   80908:	f107 0314 	add.w	r3, r7, #20
   8090c:	4611      	mov	r1, r2
   8090e:	4618      	mov	r0, r3
   80910:	4b0a      	ldr	r3, [pc, #40]	; (8093c <genclk_enable_config+0x58>)
   80912:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   80914:	f107 0314 	add.w	r3, r7, #20
   80918:	6879      	ldr	r1, [r7, #4]
   8091a:	4618      	mov	r0, r3
   8091c:	4b08      	ldr	r3, [pc, #32]	; (80940 <genclk_enable_config+0x5c>)
   8091e:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80920:	f107 0314 	add.w	r3, r7, #20
   80924:	68f9      	ldr	r1, [r7, #12]
   80926:	4618      	mov	r0, r3
   80928:	4b06      	ldr	r3, [pc, #24]	; (80944 <genclk_enable_config+0x60>)
   8092a:	4798      	blx	r3
}
   8092c:	bf00      	nop
   8092e:	3718      	adds	r7, #24
   80930:	46bd      	mov	sp, r7
   80932:	bd80      	pop	{r7, pc}
   80934:	0008053d 	.word	0x0008053d
   80938:	00080651 	.word	0x00080651
   8093c:	00080559 	.word	0x00080559
   80940:	000805f5 	.word	0x000805f5
   80944:	00080621 	.word	0x00080621

00080948 <main>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68


int main(void)
{
<<<<<<< HEAD
   80a4c:	b580      	push	{r7, lr}
   80a4e:	b086      	sub	sp, #24
   80a50:	af00      	add	r7, sp, #0
=======
   80948:	b580      	push	{r7, lr}
   8094a:	b086      	sub	sp, #24
   8094c:	af00      	add	r7, sp, #0
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
<<<<<<< HEAD
   80a52:	463b      	mov	r3, r7
   80a54:	2110      	movs	r1, #16
   80a56:	4618      	mov	r0, r3
   80a58:	4b1d      	ldr	r3, [pc, #116]	; (80ad0 <main+0x84>)
   80a5a:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80a5c:	4b1d      	ldr	r3, [pc, #116]	; (80ad4 <main+0x88>)
   80a5e:	2201      	movs	r2, #1
   80a60:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   80a62:	f3bf 8f5f 	dmb	sy
}
   80a66:	bf00      	nop
  __ASM volatile ("cpsie i");
   80a68:	b662      	cpsie	i
}
   80a6a:	bf00      	nop

    // Initialize the sleep manager
    sleepmgr_init();
   80a6c:	4b1a      	ldr	r3, [pc, #104]	; (80ad8 <main+0x8c>)
   80a6e:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   80a70:	4b1a      	ldr	r3, [pc, #104]	; (80adc <main+0x90>)
   80a72:	4798      	blx	r3
    phywhisperer_setup_pins();
   80a74:	4b1a      	ldr	r3, [pc, #104]	; (80ae0 <main+0x94>)
   80a76:	4798      	blx	r3
=======
   8094e:	463b      	mov	r3, r7
   80950:	2110      	movs	r1, #16
   80952:	4618      	mov	r0, r3
   80954:	4b1d      	ldr	r3, [pc, #116]	; (809cc <main+0x84>)
   80956:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80958:	4b1d      	ldr	r3, [pc, #116]	; (809d0 <main+0x88>)
   8095a:	2201      	movs	r2, #1
   8095c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8095e:	f3bf 8f5f 	dmb	sy
}
   80962:	bf00      	nop
  __ASM volatile ("cpsie i");
   80964:	b662      	cpsie	i
}
   80966:	bf00      	nop

    // Initialize the sleep manager
    sleepmgr_init();
   80968:	4b1a      	ldr	r3, [pc, #104]	; (809d4 <main+0x8c>)
   8096a:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   8096c:	4b1a      	ldr	r3, [pc, #104]	; (809d8 <main+0x90>)
   8096e:	4798      	blx	r3
    phywhisperer_setup_pins();
   80970:	4b1a      	ldr	r3, [pc, #104]	; (809dc <main+0x94>)
   80972:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
#else
    system_init();
#endif

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
<<<<<<< HEAD
   80a78:	2300      	movs	r3, #0
   80a7a:	617b      	str	r3, [r7, #20]
   80a7c:	e011      	b.n	80aa2 <main+0x56>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80a7e:	697b      	ldr	r3, [r7, #20]
   80a80:	00db      	lsls	r3, r3, #3
   80a82:	4a18      	ldr	r2, [pc, #96]	; (80ae4 <main+0x98>)
   80a84:	1898      	adds	r0, r3, r2
   80a86:	697b      	ldr	r3, [r7, #20]
   80a88:	009b      	lsls	r3, r3, #2
   80a8a:	f107 0218 	add.w	r2, r7, #24
   80a8e:	4413      	add	r3, r2
   80a90:	f853 3c18 	ldr.w	r3, [r3, #-24]
   80a94:	461a      	mov	r2, r3
   80a96:	4914      	ldr	r1, [pc, #80]	; (80ae8 <main+0x9c>)
   80a98:	4b14      	ldr	r3, [pc, #80]	; (80aec <main+0xa0>)
   80a9a:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80a9c:	697b      	ldr	r3, [r7, #20]
   80a9e:	3301      	adds	r3, #1
   80aa0:	617b      	str	r3, [r7, #20]
   80aa2:	697b      	ldr	r3, [r7, #20]
   80aa4:	2b03      	cmp	r3, #3
   80aa6:	d9ea      	bls.n	80a7e <main+0x32>
	}
	usb_serial_number[32] = 0;
   80aa8:	4b0e      	ldr	r3, [pc, #56]	; (80ae4 <main+0x98>)
   80aaa:	2200      	movs	r2, #0
   80aac:	f883 2020 	strb.w	r2, [r3, #32]

    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80ab0:	2200      	movs	r2, #0
   80ab2:	210a      	movs	r1, #10
   80ab4:	2001      	movs	r0, #1
   80ab6:	4b0e      	ldr	r3, [pc, #56]	; (80af0 <main+0xa4>)
   80ab8:	4798      	blx	r3
    udc_start();
   80aba:	4b0e      	ldr	r3, [pc, #56]	; (80af4 <main+0xa8>)
   80abc:	4798      	blx	r3

    USB_PWR_STATE = 0;
   80abe:	4b0e      	ldr	r3, [pc, #56]	; (80af8 <main+0xac>)
   80ac0:	2200      	movs	r2, #0
   80ac2:	701a      	strb	r2, [r3, #0]

    uint8_t curr_pwr_setting = 0;
   80ac4:	2300      	movs	r3, #0
   80ac6:	74fb      	strb	r3, [r7, #19]
    while(1) {
        sleepmgr_enter_sleep();
   80ac8:	4b0c      	ldr	r3, [pc, #48]	; (80afc <main+0xb0>)
   80aca:	4798      	blx	r3
   80acc:	e7fc      	b.n	80ac8 <main+0x7c>
   80ace:	bf00      	nop
   80ad0:	00081f25 	.word	0x00081f25
   80ad4:	20000284 	.word	0x20000284
   80ad8:	00080571 	.word	0x00080571
   80adc:	0008355d 	.word	0x0008355d
   80ae0:	000808bd 	.word	0x000808bd
   80ae4:	2000025c 	.word	0x2000025c
   80ae8:	0008d420 	.word	0x0008d420
   80aec:	00086c71 	.word	0x00086c71
   80af0:	000809e9 	.word	0x000809e9
   80af4:	000839e9 	.word	0x000839e9
   80af8:	20000e0c 	.word	0x20000e0c
   80afc:	000805d9 	.word	0x000805d9

00080b00 <osc_enable>:
{
   80b00:	b580      	push	{r7, lr}
   80b02:	b082      	sub	sp, #8
   80b04:	af00      	add	r7, sp, #0
   80b06:	6078      	str	r0, [r7, #4]
   80b08:	687b      	ldr	r3, [r7, #4]
   80b0a:	2b07      	cmp	r3, #7
   80b0c:	d82e      	bhi.n	80b6c <osc_enable+0x6c>
   80b0e:	a201      	add	r2, pc, #4	; (adr r2, 80b14 <osc_enable+0x14>)
   80b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b14:	00080b6b 	.word	0x00080b6b
   80b18:	00080b35 	.word	0x00080b35
   80b1c:	00080b3d 	.word	0x00080b3d
   80b20:	00080b45 	.word	0x00080b45
   80b24:	00080b4d 	.word	0x00080b4d
   80b28:	00080b55 	.word	0x00080b55
   80b2c:	00080b5d 	.word	0x00080b5d
   80b30:	00080b65 	.word	0x00080b65
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80b34:	2000      	movs	r0, #0
   80b36:	4b0f      	ldr	r3, [pc, #60]	; (80b74 <osc_enable+0x74>)
   80b38:	4798      	blx	r3
		break;
   80b3a:	e017      	b.n	80b6c <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80b3c:	2001      	movs	r0, #1
   80b3e:	4b0d      	ldr	r3, [pc, #52]	; (80b74 <osc_enable+0x74>)
   80b40:	4798      	blx	r3
		break;
   80b42:	e013      	b.n	80b6c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80b44:	2000      	movs	r0, #0
   80b46:	4b0c      	ldr	r3, [pc, #48]	; (80b78 <osc_enable+0x78>)
   80b48:	4798      	blx	r3
		break;
   80b4a:	e00f      	b.n	80b6c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80b4c:	2010      	movs	r0, #16
   80b4e:	4b0a      	ldr	r3, [pc, #40]	; (80b78 <osc_enable+0x78>)
   80b50:	4798      	blx	r3
		break;
   80b52:	e00b      	b.n	80b6c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80b54:	2020      	movs	r0, #32
   80b56:	4b08      	ldr	r3, [pc, #32]	; (80b78 <osc_enable+0x78>)
   80b58:	4798      	blx	r3
		break;
   80b5a:	e007      	b.n	80b6c <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80b5c:	203e      	movs	r0, #62	; 0x3e
   80b5e:	4b07      	ldr	r3, [pc, #28]	; (80b7c <osc_enable+0x7c>)
   80b60:	4798      	blx	r3
		break;
   80b62:	e003      	b.n	80b6c <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80b64:	4b06      	ldr	r3, [pc, #24]	; (80b80 <osc_enable+0x80>)
   80b66:	4798      	blx	r3
		break;
   80b68:	e000      	b.n	80b6c <osc_enable+0x6c>
		break;
   80b6a:	bf00      	nop
}
   80b6c:	bf00      	nop
   80b6e:	3708      	adds	r7, #8
   80b70:	46bd      	mov	sp, r7
   80b72:	bd80      	pop	{r7, pc}
   80b74:	0008278d 	.word	0x0008278d
   80b78:	000827f9 	.word	0x000827f9
   80b7c:	0008286d 	.word	0x0008286d
   80b80:	000828bd 	.word	0x000828bd

00080b84 <osc_is_ready>:
{
   80b84:	b580      	push	{r7, lr}
   80b86:	b082      	sub	sp, #8
   80b88:	af00      	add	r7, sp, #0
   80b8a:	6078      	str	r0, [r7, #4]
   80b8c:	687b      	ldr	r3, [r7, #4]
   80b8e:	2b07      	cmp	r3, #7
   80b90:	d82f      	bhi.n	80bf2 <osc_is_ready+0x6e>
   80b92:	a201      	add	r2, pc, #4	; (adr r2, 80b98 <osc_is_ready+0x14>)
   80b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b98:	00080bb9 	.word	0x00080bb9
   80b9c:	00080bbd 	.word	0x00080bbd
   80ba0:	00080bbd 	.word	0x00080bbd
   80ba4:	00080bcf 	.word	0x00080bcf
   80ba8:	00080bcf 	.word	0x00080bcf
   80bac:	00080bcf 	.word	0x00080bcf
   80bb0:	00080be1 	.word	0x00080be1
   80bb4:	00080be1 	.word	0x00080be1
		return 1;
   80bb8:	2301      	movs	r3, #1
   80bba:	e01b      	b.n	80bf4 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80bbc:	4b0f      	ldr	r3, [pc, #60]	; (80bfc <osc_is_ready+0x78>)
   80bbe:	4798      	blx	r3
   80bc0:	4603      	mov	r3, r0
   80bc2:	2b00      	cmp	r3, #0
   80bc4:	bf14      	ite	ne
   80bc6:	2301      	movne	r3, #1
   80bc8:	2300      	moveq	r3, #0
   80bca:	b2db      	uxtb	r3, r3
   80bcc:	e012      	b.n	80bf4 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80bce:	4b0c      	ldr	r3, [pc, #48]	; (80c00 <osc_is_ready+0x7c>)
   80bd0:	4798      	blx	r3
   80bd2:	4603      	mov	r3, r0
   80bd4:	2b00      	cmp	r3, #0
   80bd6:	bf14      	ite	ne
   80bd8:	2301      	movne	r3, #1
   80bda:	2300      	moveq	r3, #0
   80bdc:	b2db      	uxtb	r3, r3
   80bde:	e009      	b.n	80bf4 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80be0:	4b08      	ldr	r3, [pc, #32]	; (80c04 <osc_is_ready+0x80>)
   80be2:	4798      	blx	r3
   80be4:	4603      	mov	r3, r0
   80be6:	2b00      	cmp	r3, #0
   80be8:	bf14      	ite	ne
   80bea:	2301      	movne	r3, #1
   80bec:	2300      	moveq	r3, #0
   80bee:	b2db      	uxtb	r3, r3
   80bf0:	e000      	b.n	80bf4 <osc_is_ready+0x70>
	return 0;
   80bf2:	2300      	movs	r3, #0
}
   80bf4:	4618      	mov	r0, r3
   80bf6:	3708      	adds	r7, #8
   80bf8:	46bd      	mov	sp, r7
   80bfa:	bd80      	pop	{r7, pc}
   80bfc:	000827c5 	.word	0x000827c5
   80c00:	00082855 	.word	0x00082855
   80c04:	00082909 	.word	0x00082909

00080c08 <osc_wait_ready>:
{
   80c08:	b580      	push	{r7, lr}
   80c0a:	b082      	sub	sp, #8
   80c0c:	af00      	add	r7, sp, #0
   80c0e:	4603      	mov	r3, r0
   80c10:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80c12:	bf00      	nop
   80c14:	79fb      	ldrb	r3, [r7, #7]
   80c16:	4618      	mov	r0, r3
   80c18:	4b06      	ldr	r3, [pc, #24]	; (80c34 <osc_wait_ready+0x2c>)
   80c1a:	4798      	blx	r3
   80c1c:	4603      	mov	r3, r0
   80c1e:	f083 0301 	eor.w	r3, r3, #1
   80c22:	b2db      	uxtb	r3, r3
   80c24:	2b00      	cmp	r3, #0
   80c26:	d1f5      	bne.n	80c14 <osc_wait_ready+0xc>
}
   80c28:	bf00      	nop
   80c2a:	bf00      	nop
   80c2c:	3708      	adds	r7, #8
   80c2e:	46bd      	mov	sp, r7
   80c30:	bd80      	pop	{r7, pc}
   80c32:	bf00      	nop
   80c34:	00080b85 	.word	0x00080b85

00080c38 <udc_detach>:
=======
   80974:	2300      	movs	r3, #0
   80976:	617b      	str	r3, [r7, #20]
   80978:	e011      	b.n	8099e <main+0x56>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   8097a:	697b      	ldr	r3, [r7, #20]
   8097c:	00db      	lsls	r3, r3, #3
   8097e:	4a18      	ldr	r2, [pc, #96]	; (809e0 <main+0x98>)
   80980:	1898      	adds	r0, r3, r2
   80982:	697b      	ldr	r3, [r7, #20]
   80984:	009b      	lsls	r3, r3, #2
   80986:	f107 0218 	add.w	r2, r7, #24
   8098a:	4413      	add	r3, r2
   8098c:	f853 3c18 	ldr.w	r3, [r3, #-24]
   80990:	461a      	mov	r2, r3
   80992:	4914      	ldr	r1, [pc, #80]	; (809e4 <main+0x9c>)
   80994:	4b14      	ldr	r3, [pc, #80]	; (809e8 <main+0xa0>)
   80996:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80998:	697b      	ldr	r3, [r7, #20]
   8099a:	3301      	adds	r3, #1
   8099c:	617b      	str	r3, [r7, #20]
   8099e:	697b      	ldr	r3, [r7, #20]
   809a0:	2b03      	cmp	r3, #3
   809a2:	d9ea      	bls.n	8097a <main+0x32>
	}
	usb_serial_number[32] = 0;
   809a4:	4b0e      	ldr	r3, [pc, #56]	; (809e0 <main+0x98>)
   809a6:	2200      	movs	r2, #0
   809a8:	f883 2020 	strb.w	r2, [r3, #32]

    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   809ac:	2200      	movs	r2, #0
   809ae:	210a      	movs	r1, #10
   809b0:	2001      	movs	r0, #1
   809b2:	4b0e      	ldr	r3, [pc, #56]	; (809ec <main+0xa4>)
   809b4:	4798      	blx	r3
    udc_start();
   809b6:	4b0e      	ldr	r3, [pc, #56]	; (809f0 <main+0xa8>)
   809b8:	4798      	blx	r3

    USB_PWR_STATE = 0;
   809ba:	4b0e      	ldr	r3, [pc, #56]	; (809f4 <main+0xac>)
   809bc:	2200      	movs	r2, #0
   809be:	701a      	strb	r2, [r3, #0]

    uint8_t curr_pwr_setting = 0;
   809c0:	2300      	movs	r3, #0
   809c2:	74fb      	strb	r3, [r7, #19]
    while(1) {
        sleepmgr_enter_sleep();
   809c4:	4b0c      	ldr	r3, [pc, #48]	; (809f8 <main+0xb0>)
   809c6:	4798      	blx	r3
   809c8:	e7fc      	b.n	809c4 <main+0x7c>
   809ca:	bf00      	nop
   809cc:	00081c01 	.word	0x00081c01
   809d0:	200003aa 	.word	0x200003aa
   809d4:	00080495 	.word	0x00080495
   809d8:	000842e9 	.word	0x000842e9
   809dc:	000807e1 	.word	0x000807e1
   809e0:	2000025c 	.word	0x2000025c
   809e4:	0008d320 	.word	0x0008d320
   809e8:	00086875 	.word	0x00086875
   809ec:	000808e5 	.word	0x000808e5
   809f0:	00085169 	.word	0x00085169
   809f4:	20000e04 	.word	0x20000e04
   809f8:	000804fd 	.word	0x000804fd

000809fc <osc_enable>:
{
   809fc:	b580      	push	{r7, lr}
   809fe:	b082      	sub	sp, #8
   80a00:	af00      	add	r7, sp, #0
   80a02:	6078      	str	r0, [r7, #4]
   80a04:	687b      	ldr	r3, [r7, #4]
   80a06:	2b07      	cmp	r3, #7
   80a08:	d82e      	bhi.n	80a68 <osc_enable+0x6c>
   80a0a:	a201      	add	r2, pc, #4	; (adr r2, 80a10 <osc_enable+0x14>)
   80a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a10:	00080a67 	.word	0x00080a67
   80a14:	00080a31 	.word	0x00080a31
   80a18:	00080a39 	.word	0x00080a39
   80a1c:	00080a41 	.word	0x00080a41
   80a20:	00080a49 	.word	0x00080a49
   80a24:	00080a51 	.word	0x00080a51
   80a28:	00080a59 	.word	0x00080a59
   80a2c:	00080a61 	.word	0x00080a61
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80a30:	2000      	movs	r0, #0
   80a32:	4b0f      	ldr	r3, [pc, #60]	; (80a70 <osc_enable+0x74>)
   80a34:	4798      	blx	r3
		break;
   80a36:	e017      	b.n	80a68 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80a38:	2001      	movs	r0, #1
   80a3a:	4b0d      	ldr	r3, [pc, #52]	; (80a70 <osc_enable+0x74>)
   80a3c:	4798      	blx	r3
		break;
   80a3e:	e013      	b.n	80a68 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80a40:	2000      	movs	r0, #0
   80a42:	4b0c      	ldr	r3, [pc, #48]	; (80a74 <osc_enable+0x78>)
   80a44:	4798      	blx	r3
		break;
   80a46:	e00f      	b.n	80a68 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80a48:	2010      	movs	r0, #16
   80a4a:	4b0a      	ldr	r3, [pc, #40]	; (80a74 <osc_enable+0x78>)
   80a4c:	4798      	blx	r3
		break;
   80a4e:	e00b      	b.n	80a68 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80a50:	2020      	movs	r0, #32
   80a52:	4b08      	ldr	r3, [pc, #32]	; (80a74 <osc_enable+0x78>)
   80a54:	4798      	blx	r3
		break;
   80a56:	e007      	b.n	80a68 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80a58:	203e      	movs	r0, #62	; 0x3e
   80a5a:	4b07      	ldr	r3, [pc, #28]	; (80a78 <osc_enable+0x7c>)
   80a5c:	4798      	blx	r3
		break;
   80a5e:	e003      	b.n	80a68 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80a60:	4b06      	ldr	r3, [pc, #24]	; (80a7c <osc_enable+0x80>)
   80a62:	4798      	blx	r3
		break;
   80a64:	e000      	b.n	80a68 <osc_enable+0x6c>
		break;
   80a66:	bf00      	nop
}
   80a68:	bf00      	nop
   80a6a:	3708      	adds	r7, #8
   80a6c:	46bd      	mov	sp, r7
   80a6e:	bd80      	pop	{r7, pc}
   80a70:	00084475 	.word	0x00084475
   80a74:	000844e1 	.word	0x000844e1
   80a78:	00084555 	.word	0x00084555
   80a7c:	000845a5 	.word	0x000845a5

00080a80 <osc_is_ready>:
{
   80a80:	b580      	push	{r7, lr}
   80a82:	b082      	sub	sp, #8
   80a84:	af00      	add	r7, sp, #0
   80a86:	6078      	str	r0, [r7, #4]
   80a88:	687b      	ldr	r3, [r7, #4]
   80a8a:	2b07      	cmp	r3, #7
   80a8c:	d82f      	bhi.n	80aee <osc_is_ready+0x6e>
   80a8e:	a201      	add	r2, pc, #4	; (adr r2, 80a94 <osc_is_ready+0x14>)
   80a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a94:	00080ab5 	.word	0x00080ab5
   80a98:	00080ab9 	.word	0x00080ab9
   80a9c:	00080ab9 	.word	0x00080ab9
   80aa0:	00080acb 	.word	0x00080acb
   80aa4:	00080acb 	.word	0x00080acb
   80aa8:	00080acb 	.word	0x00080acb
   80aac:	00080add 	.word	0x00080add
   80ab0:	00080add 	.word	0x00080add
		return 1;
   80ab4:	2301      	movs	r3, #1
   80ab6:	e01b      	b.n	80af0 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80ab8:	4b0f      	ldr	r3, [pc, #60]	; (80af8 <osc_is_ready+0x78>)
   80aba:	4798      	blx	r3
   80abc:	4603      	mov	r3, r0
   80abe:	2b00      	cmp	r3, #0
   80ac0:	bf14      	ite	ne
   80ac2:	2301      	movne	r3, #1
   80ac4:	2300      	moveq	r3, #0
   80ac6:	b2db      	uxtb	r3, r3
   80ac8:	e012      	b.n	80af0 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80aca:	4b0c      	ldr	r3, [pc, #48]	; (80afc <osc_is_ready+0x7c>)
   80acc:	4798      	blx	r3
   80ace:	4603      	mov	r3, r0
   80ad0:	2b00      	cmp	r3, #0
   80ad2:	bf14      	ite	ne
   80ad4:	2301      	movne	r3, #1
   80ad6:	2300      	moveq	r3, #0
   80ad8:	b2db      	uxtb	r3, r3
   80ada:	e009      	b.n	80af0 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80adc:	4b08      	ldr	r3, [pc, #32]	; (80b00 <osc_is_ready+0x80>)
   80ade:	4798      	blx	r3
   80ae0:	4603      	mov	r3, r0
   80ae2:	2b00      	cmp	r3, #0
   80ae4:	bf14      	ite	ne
   80ae6:	2301      	movne	r3, #1
   80ae8:	2300      	moveq	r3, #0
   80aea:	b2db      	uxtb	r3, r3
   80aec:	e000      	b.n	80af0 <osc_is_ready+0x70>
	return 0;
   80aee:	2300      	movs	r3, #0
}
   80af0:	4618      	mov	r0, r3
   80af2:	3708      	adds	r7, #8
   80af4:	46bd      	mov	sp, r7
   80af6:	bd80      	pop	{r7, pc}
   80af8:	000844ad 	.word	0x000844ad
   80afc:	0008453d 	.word	0x0008453d
   80b00:	000845f1 	.word	0x000845f1

00080b04 <osc_wait_ready>:
{
   80b04:	b580      	push	{r7, lr}
   80b06:	b082      	sub	sp, #8
   80b08:	af00      	add	r7, sp, #0
   80b0a:	4603      	mov	r3, r0
   80b0c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80b0e:	bf00      	nop
   80b10:	79fb      	ldrb	r3, [r7, #7]
   80b12:	4618      	mov	r0, r3
   80b14:	4b06      	ldr	r3, [pc, #24]	; (80b30 <osc_wait_ready+0x2c>)
   80b16:	4798      	blx	r3
   80b18:	4603      	mov	r3, r0
   80b1a:	f083 0301 	eor.w	r3, r3, #1
   80b1e:	b2db      	uxtb	r3, r3
   80b20:	2b00      	cmp	r3, #0
   80b22:	d1f5      	bne.n	80b10 <osc_wait_ready+0xc>
}
   80b24:	bf00      	nop
   80b26:	bf00      	nop
   80b28:	3708      	adds	r7, #8
   80b2a:	46bd      	mov	sp, r7
   80b2c:	bd80      	pop	{r7, pc}
   80b2e:	bf00      	nop
   80b30:	00080a81 	.word	0x00080a81

00080b34 <udc_detach>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
<<<<<<< HEAD
   80c38:	b580      	push	{r7, lr}
   80c3a:	af00      	add	r7, sp, #0
	udd_detach();
   80c3c:	4b01      	ldr	r3, [pc, #4]	; (80c44 <udc_detach+0xc>)
   80c3e:	4798      	blx	r3
}
   80c40:	bf00      	nop
   80c42:	bd80      	pop	{r7, pc}
   80c44:	00084b75 	.word	0x00084b75

00080c48 <main_suspend_action>:
=======
   80b34:	b580      	push	{r7, lr}
   80b36:	af00      	add	r7, sp, #0
	udd_detach();
   80b38:	4b01      	ldr	r3, [pc, #4]	; (80b40 <udc_detach+0xc>)
   80b3a:	4798      	blx	r3
}
   80b3c:	bf00      	nop
   80b3e:	bd80      	pop	{r7, pc}
   80b40:	00082721 	.word	0x00082721

00080b44 <main_suspend_action>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
<<<<<<< HEAD
   80c48:	b480      	push	{r7}
   80c4a:	af00      	add	r7, sp, #0
}
   80c4c:	bf00      	nop
   80c4e:	46bd      	mov	sp, r7
   80c50:	bc80      	pop	{r7}
   80c52:	4770      	bx	lr

00080c54 <main_resume_action>:

void main_resume_action(void)
{
   80c54:	b480      	push	{r7}
   80c56:	af00      	add	r7, sp, #0
}
   80c58:	bf00      	nop
   80c5a:	46bd      	mov	sp, r7
   80c5c:	bc80      	pop	{r7}
   80c5e:	4770      	bx	lr

00080c60 <main_sof_action>:

void main_sof_action(void)
{
   80c60:	b480      	push	{r7}
   80c62:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80c64:	4b04      	ldr	r3, [pc, #16]	; (80c78 <main_sof_action+0x18>)
   80c66:	781b      	ldrb	r3, [r3, #0]
   80c68:	b2db      	uxtb	r3, r3
   80c6a:	f083 0301 	eor.w	r3, r3, #1
   80c6e:	b2db      	uxtb	r3, r3
   80c70:	2b00      	cmp	r3, #0
        return;
}
   80c72:	46bd      	mov	sp, r7
   80c74:	bc80      	pop	{r7}
   80c76:	4770      	bx	lr
   80c78:	2000027d 	.word	0x2000027d

00080c7c <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80c7c:	b580      	push	{r7, lr}
   80c7e:	af00      	add	r7, sp, #0
    main_b_vendor_enable = true;
   80c80:	4b05      	ldr	r3, [pc, #20]	; (80c98 <main_vendor_enable+0x1c>)
   80c82:	2201      	movs	r2, #1
   80c84:	701a      	strb	r2, [r3, #0]
=======
   80b44:	b480      	push	{r7}
   80b46:	af00      	add	r7, sp, #0
}
   80b48:	bf00      	nop
   80b4a:	46bd      	mov	sp, r7
   80b4c:	bc80      	pop	{r7}
   80b4e:	4770      	bx	lr

00080b50 <main_resume_action>:

void main_resume_action(void)
{
   80b50:	b480      	push	{r7}
   80b52:	af00      	add	r7, sp, #0
}
   80b54:	bf00      	nop
   80b56:	46bd      	mov	sp, r7
   80b58:	bc80      	pop	{r7}
   80b5a:	4770      	bx	lr

00080b5c <main_sof_action>:

void main_sof_action(void)
{
   80b5c:	b480      	push	{r7}
   80b5e:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80b60:	4b04      	ldr	r3, [pc, #16]	; (80b74 <main_sof_action+0x18>)
   80b62:	781b      	ldrb	r3, [r3, #0]
   80b64:	b2db      	uxtb	r3, r3
   80b66:	f083 0301 	eor.w	r3, r3, #1
   80b6a:	b2db      	uxtb	r3, r3
   80b6c:	2b00      	cmp	r3, #0
        return;
}
   80b6e:	46bd      	mov	sp, r7
   80b70:	bc80      	pop	{r7}
   80b72:	4770      	bx	lr
   80b74:	2000027d 	.word	0x2000027d

00080b78 <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80b78:	b580      	push	{r7, lr}
   80b7a:	af00      	add	r7, sp, #0
    main_b_vendor_enable = true;
   80b7c:	4b05      	ldr	r3, [pc, #20]	; (80b94 <main_vendor_enable+0x1c>)
   80b7e:	2201      	movs	r2, #1
   80b80:	701a      	strb	r2, [r3, #0]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
    // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
    //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
<<<<<<< HEAD
   80c86:	4a05      	ldr	r2, [pc, #20]	; (80c9c <main_vendor_enable+0x20>)
   80c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80c8c:	4804      	ldr	r0, [pc, #16]	; (80ca0 <main_vendor_enable+0x24>)
   80c8e:	4b05      	ldr	r3, [pc, #20]	; (80ca4 <main_vendor_enable+0x28>)
   80c90:	4798      	blx	r3
=======
   80b82:	4a05      	ldr	r2, [pc, #20]	; (80b98 <main_vendor_enable+0x20>)
   80b84:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80b88:	4804      	ldr	r0, [pc, #16]	; (80b9c <main_vendor_enable+0x24>)
   80b8a:	4b05      	ldr	r3, [pc, #20]	; (80ba0 <main_vendor_enable+0x28>)
   80b8c:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
#endif
    return true;
<<<<<<< HEAD
   80c92:	2301      	movs	r3, #1
}
   80c94:	4618      	mov	r0, r3
   80c96:	bd80      	pop	{r7, pc}
   80c98:	2000027d 	.word	0x2000027d
   80c9c:	0008127d 	.word	0x0008127d
   80ca0:	20000e10 	.word	0x20000e10
   80ca4:	00084655 	.word	0x00084655

00080ca8 <main_vendor_disable>:

void main_vendor_disable(void)
{
   80ca8:	b480      	push	{r7}
   80caa:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80cac:	4b03      	ldr	r3, [pc, #12]	; (80cbc <main_vendor_disable+0x14>)
   80cae:	2200      	movs	r2, #0
   80cb0:	701a      	strb	r2, [r3, #0]
}
   80cb2:	bf00      	nop
   80cb4:	46bd      	mov	sp, r7
   80cb6:	bc80      	pop	{r7}
   80cb8:	4770      	bx	lr
   80cba:	bf00      	nop
   80cbc:	2000027d 	.word	0x2000027d

00080cc0 <ctrl_readmem_bulk>:
=======
   80b8e:	2301      	movs	r3, #1
}
   80b90:	4618      	mov	r0, r3
   80b92:	bd80      	pop	{r7, pc}
   80b94:	2000027d 	.word	0x2000027d
   80b98:	00081179 	.word	0x00081179
   80b9c:	20000e08 	.word	0x20000e08
   80ba0:	000848f9 	.word	0x000848f9

00080ba4 <main_vendor_disable>:

void main_vendor_disable(void)
{
   80ba4:	b480      	push	{r7}
   80ba6:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80ba8:	4b03      	ldr	r3, [pc, #12]	; (80bb8 <main_vendor_disable+0x14>)
   80baa:	2200      	movs	r2, #0
   80bac:	701a      	strb	r2, [r3, #0]
}
   80bae:	bf00      	nop
   80bb0:	46bd      	mov	sp, r7
   80bb2:	bc80      	pop	{r7}
   80bb4:	4770      	bx	lr
   80bb6:	bf00      	nop
   80bb8:	2000027d 	.word	0x2000027d

00080bbc <ctrl_readmem_bulk>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
<<<<<<< HEAD
   80cc0:	b580      	push	{r7, lr}
   80cc2:	b082      	sub	sp, #8
   80cc4:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80cc6:	4b0f      	ldr	r3, [pc, #60]	; (80d04 <ctrl_readmem_bulk+0x44>)
   80cc8:	681b      	ldr	r3, [r3, #0]
   80cca:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80ccc:	4b0d      	ldr	r3, [pc, #52]	; (80d04 <ctrl_readmem_bulk+0x44>)
   80cce:	685b      	ldr	r3, [r3, #4]
   80cd0:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80cd2:	4b0d      	ldr	r3, [pc, #52]	; (80d08 <ctrl_readmem_bulk+0x48>)
   80cd4:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80cd6:	bf00      	nop
   80cd8:	2002      	movs	r0, #2
   80cda:	4b0c      	ldr	r3, [pc, #48]	; (80d0c <ctrl_readmem_bulk+0x4c>)
   80cdc:	4798      	blx	r3
   80cde:	4603      	mov	r3, r0
   80ce0:	2b00      	cmp	r3, #0
   80ce2:	d0f9      	beq.n	80cd8 <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80ce4:	6838      	ldr	r0, [r7, #0]
   80ce6:	4b0a      	ldr	r3, [pc, #40]	; (80d10 <ctrl_readmem_bulk+0x50>)
   80ce8:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80cea:	4a0a      	ldr	r2, [pc, #40]	; (80d14 <ctrl_readmem_bulk+0x54>)
   80cec:	6879      	ldr	r1, [r7, #4]
   80cee:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80cf2:	4b09      	ldr	r3, [pc, #36]	; (80d18 <ctrl_readmem_bulk+0x58>)
   80cf4:	4798      	blx	r3
=======
   80bbc:	b580      	push	{r7, lr}
   80bbe:	b082      	sub	sp, #8
   80bc0:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80bc2:	4b0f      	ldr	r3, [pc, #60]	; (80c00 <ctrl_readmem_bulk+0x44>)
   80bc4:	681b      	ldr	r3, [r3, #0]
   80bc6:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80bc8:	4b0d      	ldr	r3, [pc, #52]	; (80c00 <ctrl_readmem_bulk+0x44>)
   80bca:	685b      	ldr	r3, [r3, #4]
   80bcc:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80bce:	4b0d      	ldr	r3, [pc, #52]	; (80c04 <ctrl_readmem_bulk+0x48>)
   80bd0:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80bd2:	bf00      	nop
   80bd4:	2002      	movs	r0, #2
   80bd6:	4b0c      	ldr	r3, [pc, #48]	; (80c08 <ctrl_readmem_bulk+0x4c>)
   80bd8:	4798      	blx	r3
   80bda:	4603      	mov	r3, r0
   80bdc:	2b00      	cmp	r3, #0
   80bde:	d0f9      	beq.n	80bd4 <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80be0:	6838      	ldr	r0, [r7, #0]
   80be2:	4b0a      	ldr	r3, [pc, #40]	; (80c0c <ctrl_readmem_bulk+0x50>)
   80be4:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80be6:	4a0a      	ldr	r2, [pc, #40]	; (80c10 <ctrl_readmem_bulk+0x54>)
   80be8:	6879      	ldr	r1, [r7, #4]
   80bea:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80bee:	4b09      	ldr	r3, [pc, #36]	; (80c14 <ctrl_readmem_bulk+0x58>)
   80bf0:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
        (uint8_t *) PSRAM_BASE_ADDRESS,
        buflen,
        main_vendor_bulk_in_received
        );
    FPGA_releaselock();
<<<<<<< HEAD
   80cf6:	4b04      	ldr	r3, [pc, #16]	; (80d08 <ctrl_readmem_bulk+0x48>)
   80cf8:	4798      	blx	r3
}
   80cfa:	bf00      	nop
   80cfc:	3708      	adds	r7, #8
   80cfe:	46bd      	mov	sp, r7
   80d00:	bd80      	pop	{r7, pc}
   80d02:	bf00      	nop
   80d04:	20001210 	.word	0x20001210
   80d08:	0008137d 	.word	0x0008137d
   80d0c:	0008133d 	.word	0x0008133d
   80d10:	000813ad 	.word	0x000813ad
   80d14:	00081245 	.word	0x00081245
   80d18:	00084629 	.word	0x00084629

00080d1c <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80d1c:	b580      	push	{r7, lr}
   80d1e:	b082      	sub	sp, #8
   80d20:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80d22:	4b0f      	ldr	r3, [pc, #60]	; (80d60 <ctrl_readmem_ctrl+0x44>)
   80d24:	681b      	ldr	r3, [r3, #0]
   80d26:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80d28:	4b0d      	ldr	r3, [pc, #52]	; (80d60 <ctrl_readmem_ctrl+0x44>)
   80d2a:	685b      	ldr	r3, [r3, #4]
   80d2c:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80d2e:	4b0d      	ldr	r3, [pc, #52]	; (80d64 <ctrl_readmem_ctrl+0x48>)
   80d30:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80d32:	bf00      	nop
   80d34:	2005      	movs	r0, #5
   80d36:	4b0c      	ldr	r3, [pc, #48]	; (80d68 <ctrl_readmem_ctrl+0x4c>)
   80d38:	4798      	blx	r3
   80d3a:	4603      	mov	r3, r0
   80d3c:	2b00      	cmp	r3, #0
   80d3e:	d0f9      	beq.n	80d34 <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80d40:	6838      	ldr	r0, [r7, #0]
   80d42:	4b0a      	ldr	r3, [pc, #40]	; (80d6c <ctrl_readmem_ctrl+0x50>)
   80d44:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80d46:	4b0a      	ldr	r3, [pc, #40]	; (80d70 <ctrl_readmem_ctrl+0x54>)
   80d48:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80d4c:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80d4e:	4a09      	ldr	r2, [pc, #36]	; (80d74 <ctrl_readmem_ctrl+0x58>)
   80d50:	687b      	ldr	r3, [r7, #4]
   80d52:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    FPGA_releaselock();
   80d54:	4b03      	ldr	r3, [pc, #12]	; (80d64 <ctrl_readmem_ctrl+0x48>)
   80d56:	4798      	blx	r3
}
   80d58:	bf00      	nop
   80d5a:	3708      	adds	r7, #8
   80d5c:	46bd      	mov	sp, r7
   80d5e:	bd80      	pop	{r7, pc}
   80d60:	20001210 	.word	0x20001210
   80d64:	0008137d 	.word	0x0008137d
   80d68:	0008133d 	.word	0x0008133d
   80d6c:	000813ad 	.word	0x000813ad
   80d70:	20001254 	.word	0x20001254
   80d74:	20001258 	.word	0x20001258

00080d78 <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80d78:	b580      	push	{r7, lr}
   80d7a:	b084      	sub	sp, #16
   80d7c:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80d7e:	4b16      	ldr	r3, [pc, #88]	; (80dd8 <ctrl_writemem_ctrl+0x60>)
   80d80:	681b      	ldr	r3, [r3, #0]
   80d82:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80d84:	4b14      	ldr	r3, [pc, #80]	; (80dd8 <ctrl_writemem_ctrl+0x60>)
   80d86:	685b      	ldr	r3, [r3, #4]
   80d88:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80d8a:	4b14      	ldr	r3, [pc, #80]	; (80ddc <ctrl_writemem_ctrl+0x64>)
   80d8c:	603b      	str	r3, [r7, #0]
=======
   80bf2:	4b04      	ldr	r3, [pc, #16]	; (80c04 <ctrl_readmem_bulk+0x48>)
   80bf4:	4798      	blx	r3
}
   80bf6:	bf00      	nop
   80bf8:	3708      	adds	r7, #8
   80bfa:	46bd      	mov	sp, r7
   80bfc:	bd80      	pop	{r7, pc}
   80bfe:	bf00      	nop
   80c00:	20001208 	.word	0x20001208
   80c04:	00081279 	.word	0x00081279
   80c08:	00081239 	.word	0x00081239
   80c0c:	000812a9 	.word	0x000812a9
   80c10:	00081141 	.word	0x00081141
   80c14:	000848cd 	.word	0x000848cd

00080c18 <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80c18:	b580      	push	{r7, lr}
   80c1a:	b082      	sub	sp, #8
   80c1c:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80c1e:	4b0f      	ldr	r3, [pc, #60]	; (80c5c <ctrl_readmem_ctrl+0x44>)
   80c20:	681b      	ldr	r3, [r3, #0]
   80c22:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80c24:	4b0d      	ldr	r3, [pc, #52]	; (80c5c <ctrl_readmem_ctrl+0x44>)
   80c26:	685b      	ldr	r3, [r3, #4]
   80c28:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80c2a:	4b0d      	ldr	r3, [pc, #52]	; (80c60 <ctrl_readmem_ctrl+0x48>)
   80c2c:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80c2e:	bf00      	nop
   80c30:	2005      	movs	r0, #5
   80c32:	4b0c      	ldr	r3, [pc, #48]	; (80c64 <ctrl_readmem_ctrl+0x4c>)
   80c34:	4798      	blx	r3
   80c36:	4603      	mov	r3, r0
   80c38:	2b00      	cmp	r3, #0
   80c3a:	d0f9      	beq.n	80c30 <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80c3c:	6838      	ldr	r0, [r7, #0]
   80c3e:	4b0a      	ldr	r3, [pc, #40]	; (80c68 <ctrl_readmem_ctrl+0x50>)
   80c40:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80c42:	4b0a      	ldr	r3, [pc, #40]	; (80c6c <ctrl_readmem_ctrl+0x54>)
   80c44:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80c48:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80c4a:	4a09      	ldr	r2, [pc, #36]	; (80c70 <ctrl_readmem_ctrl+0x58>)
   80c4c:	687b      	ldr	r3, [r7, #4]
   80c4e:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    FPGA_releaselock();
   80c50:	4b03      	ldr	r3, [pc, #12]	; (80c60 <ctrl_readmem_ctrl+0x48>)
   80c52:	4798      	blx	r3
}
   80c54:	bf00      	nop
   80c56:	3708      	adds	r7, #8
   80c58:	46bd      	mov	sp, r7
   80c5a:	bd80      	pop	{r7, pc}
   80c5c:	20001208 	.word	0x20001208
   80c60:	00081279 	.word	0x00081279
   80c64:	00081239 	.word	0x00081239
   80c68:	000812a9 	.word	0x000812a9
   80c6c:	2000124c 	.word	0x2000124c
   80c70:	20001250 	.word	0x20001250

00080c74 <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80c74:	b580      	push	{r7, lr}
   80c76:	b084      	sub	sp, #16
   80c78:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80c7a:	4b16      	ldr	r3, [pc, #88]	; (80cd4 <ctrl_writemem_ctrl+0x60>)
   80c7c:	681b      	ldr	r3, [r3, #0]
   80c7e:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80c80:	4b14      	ldr	r3, [pc, #80]	; (80cd4 <ctrl_writemem_ctrl+0x60>)
   80c82:	685b      	ldr	r3, [r3, #4]
   80c84:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80c86:	4b14      	ldr	r3, [pc, #80]	; (80cd8 <ctrl_writemem_ctrl+0x64>)
   80c88:	603b      	str	r3, [r7, #0]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
<<<<<<< HEAD
   80d8e:	4b14      	ldr	r3, [pc, #80]	; (80de0 <ctrl_writemem_ctrl+0x68>)
   80d90:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80d92:	bf00      	nop
   80d94:	2001      	movs	r0, #1
   80d96:	4b13      	ldr	r3, [pc, #76]	; (80de4 <ctrl_writemem_ctrl+0x6c>)
   80d98:	4798      	blx	r3
   80d9a:	4603      	mov	r3, r0
   80d9c:	2b00      	cmp	r3, #0
   80d9e:	d0f9      	beq.n	80d94 <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   80da0:	6878      	ldr	r0, [r7, #4]
   80da2:	4b11      	ldr	r3, [pc, #68]	; (80de8 <ctrl_writemem_ctrl+0x70>)
   80da4:	4798      	blx	r3
=======
   80c8a:	4b14      	ldr	r3, [pc, #80]	; (80cdc <ctrl_writemem_ctrl+0x68>)
   80c8c:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80c8e:	bf00      	nop
   80c90:	2001      	movs	r0, #1
   80c92:	4b13      	ldr	r3, [pc, #76]	; (80ce0 <ctrl_writemem_ctrl+0x6c>)
   80c94:	4798      	blx	r3
   80c96:	4603      	mov	r3, r0
   80c98:	2b00      	cmp	r3, #0
   80c9a:	d0f9      	beq.n	80c90 <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   80c9c:	6878      	ldr	r0, [r7, #4]
   80c9e:	4b11      	ldr	r3, [pc, #68]	; (80ce4 <ctrl_writemem_ctrl+0x70>)
   80ca0:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
<<<<<<< HEAD
   80da6:	2300      	movs	r3, #0
   80da8:	60fb      	str	r3, [r7, #12]
   80daa:	e00b      	b.n	80dc4 <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   80dac:	683a      	ldr	r2, [r7, #0]
   80dae:	68fb      	ldr	r3, [r7, #12]
   80db0:	441a      	add	r2, r3
   80db2:	4b0e      	ldr	r3, [pc, #56]	; (80dec <ctrl_writemem_ctrl+0x74>)
   80db4:	6819      	ldr	r1, [r3, #0]
   80db6:	68fb      	ldr	r3, [r7, #12]
   80db8:	440b      	add	r3, r1
   80dba:	7812      	ldrb	r2, [r2, #0]
   80dbc:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   80dbe:	68fb      	ldr	r3, [r7, #12]
   80dc0:	3301      	adds	r3, #1
   80dc2:	60fb      	str	r3, [r7, #12]
   80dc4:	68fa      	ldr	r2, [r7, #12]
   80dc6:	68bb      	ldr	r3, [r7, #8]
   80dc8:	429a      	cmp	r2, r3
   80dca:	d3ef      	bcc.n	80dac <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   80dcc:	4b04      	ldr	r3, [pc, #16]	; (80de0 <ctrl_writemem_ctrl+0x68>)
   80dce:	4798      	blx	r3
}
   80dd0:	bf00      	nop
   80dd2:	3710      	adds	r7, #16
   80dd4:	46bd      	mov	sp, r7
   80dd6:	bd80      	pop	{r7, pc}
   80dd8:	20001210 	.word	0x20001210
   80ddc:	20001218 	.word	0x20001218
   80de0:	0008137d 	.word	0x0008137d
   80de4:	0008133d 	.word	0x0008133d
   80de8:	000813ad 	.word	0x000813ad
   80dec:	20000280 	.word	0x20000280

00080df0 <ctrl_writemem_bulk>:
=======
   80ca2:	2300      	movs	r3, #0
   80ca4:	60fb      	str	r3, [r7, #12]
   80ca6:	e00b      	b.n	80cc0 <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   80ca8:	683a      	ldr	r2, [r7, #0]
   80caa:	68fb      	ldr	r3, [r7, #12]
   80cac:	441a      	add	r2, r3
   80cae:	4b0e      	ldr	r3, [pc, #56]	; (80ce8 <ctrl_writemem_ctrl+0x74>)
   80cb0:	6819      	ldr	r1, [r3, #0]
   80cb2:	68fb      	ldr	r3, [r7, #12]
   80cb4:	440b      	add	r3, r1
   80cb6:	7812      	ldrb	r2, [r2, #0]
   80cb8:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   80cba:	68fb      	ldr	r3, [r7, #12]
   80cbc:	3301      	adds	r3, #1
   80cbe:	60fb      	str	r3, [r7, #12]
   80cc0:	68fa      	ldr	r2, [r7, #12]
   80cc2:	68bb      	ldr	r3, [r7, #8]
   80cc4:	429a      	cmp	r2, r3
   80cc6:	d3ef      	bcc.n	80ca8 <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   80cc8:	4b04      	ldr	r3, [pc, #16]	; (80cdc <ctrl_writemem_ctrl+0x68>)
   80cca:	4798      	blx	r3
}
   80ccc:	bf00      	nop
   80cce:	3710      	adds	r7, #16
   80cd0:	46bd      	mov	sp, r7
   80cd2:	bd80      	pop	{r7, pc}
   80cd4:	20001208 	.word	0x20001208
   80cd8:	20001210 	.word	0x20001210
   80cdc:	00081279 	.word	0x00081279
   80ce0:	00081239 	.word	0x00081239
   80ce4:	000812a9 	.word	0x000812a9
   80ce8:	20000280 	.word	0x20000280

00080cec <ctrl_writemem_bulk>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
<<<<<<< HEAD
   80df0:	b580      	push	{r7, lr}
   80df2:	b082      	sub	sp, #8
   80df4:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80df6:	4b0a      	ldr	r3, [pc, #40]	; (80e20 <ctrl_writemem_bulk+0x30>)
   80df8:	685b      	ldr	r3, [r3, #4]
   80dfa:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   80dfc:	4b09      	ldr	r3, [pc, #36]	; (80e24 <ctrl_writemem_bulk+0x34>)
   80dfe:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   80e00:	bf00      	nop
   80e02:	2004      	movs	r0, #4
   80e04:	4b08      	ldr	r3, [pc, #32]	; (80e28 <ctrl_writemem_bulk+0x38>)
   80e06:	4798      	blx	r3
   80e08:	4603      	mov	r3, r0
   80e0a:	2b00      	cmp	r3, #0
   80e0c:	d0f9      	beq.n	80e02 <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   80e0e:	6878      	ldr	r0, [r7, #4]
   80e10:	4b06      	ldr	r3, [pc, #24]	; (80e2c <ctrl_writemem_bulk+0x3c>)
   80e12:	4798      	blx	r3

    /* Transaction done in generic callback */
    FPGA_releaselock();
   80e14:	4b03      	ldr	r3, [pc, #12]	; (80e24 <ctrl_writemem_bulk+0x34>)
   80e16:	4798      	blx	r3
}
   80e18:	bf00      	nop
   80e1a:	3708      	adds	r7, #8
   80e1c:	46bd      	mov	sp, r7
   80e1e:	bd80      	pop	{r7, pc}
   80e20:	20001210 	.word	0x20001210
   80e24:	0008137d 	.word	0x0008137d
   80e28:	0008133d 	.word	0x0008133d
   80e2c:	000813ad 	.word	0x000813ad

00080e30 <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80e30:	b580      	push	{r7, lr}
   80e32:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80e34:	4b19      	ldr	r3, [pc, #100]	; (80e9c <ctrl_sam3ucfg_cb+0x6c>)
   80e36:	885b      	ldrh	r3, [r3, #2]
   80e38:	b2db      	uxtb	r3, r3
   80e3a:	2b03      	cmp	r3, #3
   80e3c:	d014      	beq.n	80e68 <ctrl_sam3ucfg_cb+0x38>
   80e3e:	2b03      	cmp	r3, #3
   80e40:	dc29      	bgt.n	80e96 <ctrl_sam3ucfg_cb+0x66>
   80e42:	2b01      	cmp	r3, #1
   80e44:	d002      	beq.n	80e4c <ctrl_sam3ucfg_cb+0x1c>
   80e46:	2b02      	cmp	r3, #2
   80e48:	d00a      	beq.n	80e60 <ctrl_sam3ucfg_cb+0x30>
=======
   80cec:	b580      	push	{r7, lr}
   80cee:	b082      	sub	sp, #8
   80cf0:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80cf2:	4b0a      	ldr	r3, [pc, #40]	; (80d1c <ctrl_writemem_bulk+0x30>)
   80cf4:	685b      	ldr	r3, [r3, #4]
   80cf6:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   80cf8:	4b09      	ldr	r3, [pc, #36]	; (80d20 <ctrl_writemem_bulk+0x34>)
   80cfa:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   80cfc:	bf00      	nop
   80cfe:	2004      	movs	r0, #4
   80d00:	4b08      	ldr	r3, [pc, #32]	; (80d24 <ctrl_writemem_bulk+0x38>)
   80d02:	4798      	blx	r3
   80d04:	4603      	mov	r3, r0
   80d06:	2b00      	cmp	r3, #0
   80d08:	d0f9      	beq.n	80cfe <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   80d0a:	6878      	ldr	r0, [r7, #4]
   80d0c:	4b06      	ldr	r3, [pc, #24]	; (80d28 <ctrl_writemem_bulk+0x3c>)
   80d0e:	4798      	blx	r3

    /* Transaction done in generic callback */
    FPGA_releaselock();
   80d10:	4b03      	ldr	r3, [pc, #12]	; (80d20 <ctrl_writemem_bulk+0x34>)
   80d12:	4798      	blx	r3
}
   80d14:	bf00      	nop
   80d16:	3708      	adds	r7, #8
   80d18:	46bd      	mov	sp, r7
   80d1a:	bd80      	pop	{r7, pc}
   80d1c:	20001208 	.word	0x20001208
   80d20:	00081279 	.word	0x00081279
   80d24:	00081239 	.word	0x00081239
   80d28:	000812a9 	.word	0x000812a9

00080d2c <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80d2c:	b580      	push	{r7, lr}
   80d2e:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80d30:	4b19      	ldr	r3, [pc, #100]	; (80d98 <ctrl_sam3ucfg_cb+0x6c>)
   80d32:	885b      	ldrh	r3, [r3, #2]
   80d34:	b2db      	uxtb	r3, r3
   80d36:	2b03      	cmp	r3, #3
   80d38:	d014      	beq.n	80d64 <ctrl_sam3ucfg_cb+0x38>
   80d3a:	2b03      	cmp	r3, #3
   80d3c:	dc29      	bgt.n	80d92 <ctrl_sam3ucfg_cb+0x66>
   80d3e:	2b01      	cmp	r3, #1
   80d40:	d002      	beq.n	80d48 <ctrl_sam3ucfg_cb+0x1c>
   80d42:	2b02      	cmp	r3, #2
   80d44:	d00a      	beq.n	80d5c <ctrl_sam3ucfg_cb+0x30>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
        /* Make the jump */
        break;

        /* Oh well, sucks to be you */
    default:
        break;
<<<<<<< HEAD
   80e4a:	e024      	b.n	80e96 <ctrl_sam3ucfg_cb+0x66>
        osc_enable(OSC_MAINCK_XTAL);
   80e4c:	2006      	movs	r0, #6
   80e4e:	4b14      	ldr	r3, [pc, #80]	; (80ea0 <ctrl_sam3ucfg_cb+0x70>)
   80e50:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   80e52:	2006      	movs	r0, #6
   80e54:	4b13      	ldr	r3, [pc, #76]	; (80ea4 <ctrl_sam3ucfg_cb+0x74>)
   80e56:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80e58:	2010      	movs	r0, #16
   80e5a:	4b13      	ldr	r3, [pc, #76]	; (80ea8 <ctrl_sam3ucfg_cb+0x78>)
   80e5c:	4798      	blx	r3
        break;
   80e5e:	e01b      	b.n	80e98 <ctrl_sam3ucfg_cb+0x68>
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80e60:	2010      	movs	r0, #16
   80e62:	4b12      	ldr	r3, [pc, #72]	; (80eac <ctrl_sam3ucfg_cb+0x7c>)
   80e64:	4798      	blx	r3
        break;
   80e66:	e017      	b.n	80e98 <ctrl_sam3ucfg_cb+0x68>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80e68:	2201      	movs	r2, #1
   80e6a:	210c      	movs	r1, #12
   80e6c:	4810      	ldr	r0, [pc, #64]	; (80eb0 <ctrl_sam3ucfg_cb+0x80>)
   80e6e:	4b11      	ldr	r3, [pc, #68]	; (80eb4 <ctrl_sam3ucfg_cb+0x84>)
   80e70:	4798      	blx	r3
        udc_detach();
   80e72:	4b11      	ldr	r3, [pc, #68]	; (80eb8 <ctrl_sam3ucfg_cb+0x88>)
   80e74:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80e76:	bf00      	nop
   80e78:	4b10      	ldr	r3, [pc, #64]	; (80ebc <ctrl_sam3ucfg_cb+0x8c>)
   80e7a:	685b      	ldr	r3, [r3, #4]
   80e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80e80:	2b00      	cmp	r3, #0
   80e82:	d1f9      	bne.n	80e78 <ctrl_sam3ucfg_cb+0x48>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80e84:	4b0d      	ldr	r3, [pc, #52]	; (80ebc <ctrl_sam3ucfg_cb+0x8c>)
   80e86:	681b      	ldr	r3, [r3, #0]
   80e88:	4a0c      	ldr	r2, [pc, #48]	; (80ebc <ctrl_sam3ucfg_cb+0x8c>)
   80e8a:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80e8e:	f043 0305 	orr.w	r3, r3, #5
   80e92:	6013      	str	r3, [r2, #0]
        while(1);
   80e94:	e7fe      	b.n	80e94 <ctrl_sam3ucfg_cb+0x64>
        break;
   80e96:	bf00      	nop
    }
}
   80e98:	bf00      	nop
   80e9a:	bd80      	pop	{r7, pc}
   80e9c:	20001828 	.word	0x20001828
   80ea0:	00080b01 	.word	0x00080b01
   80ea4:	00080c09 	.word	0x00080c09
   80ea8:	0008268d 	.word	0x0008268d
   80eac:	0008270d 	.word	0x0008270d
   80eb0:	400e0800 	.word	0x400e0800
   80eb4:	00081ebd 	.word	0x00081ebd
   80eb8:	00080c39 	.word	0x00080c39
   80ebc:	400e1200 	.word	0x400e1200

00080ec0 <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   80ec0:	b580      	push	{r7, lr}
   80ec2:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   80ec4:	4b0d      	ldr	r3, [pc, #52]	; (80efc <ctrl_progfpga_bulk+0x3c>)
   80ec6:	885b      	ldrh	r3, [r3, #2]
   80ec8:	2ba2      	cmp	r3, #162	; 0xa2
   80eca:	d00f      	beq.n	80eec <ctrl_progfpga_bulk+0x2c>
   80ecc:	2ba2      	cmp	r3, #162	; 0xa2
   80ece:	dc11      	bgt.n	80ef4 <ctrl_progfpga_bulk+0x34>
   80ed0:	2ba0      	cmp	r3, #160	; 0xa0
   80ed2:	d002      	beq.n	80eda <ctrl_progfpga_bulk+0x1a>
   80ed4:	2ba1      	cmp	r3, #161	; 0xa1
   80ed6:	d003      	beq.n	80ee0 <ctrl_progfpga_bulk+0x20>
=======
   80d46:	e024      	b.n	80d92 <ctrl_sam3ucfg_cb+0x66>
        osc_enable(OSC_MAINCK_XTAL);
   80d48:	2006      	movs	r0, #6
   80d4a:	4b14      	ldr	r3, [pc, #80]	; (80d9c <ctrl_sam3ucfg_cb+0x70>)
   80d4c:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   80d4e:	2006      	movs	r0, #6
   80d50:	4b13      	ldr	r3, [pc, #76]	; (80da0 <ctrl_sam3ucfg_cb+0x74>)
   80d52:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80d54:	2010      	movs	r0, #16
   80d56:	4b13      	ldr	r3, [pc, #76]	; (80da4 <ctrl_sam3ucfg_cb+0x78>)
   80d58:	4798      	blx	r3
        break;
   80d5a:	e01b      	b.n	80d94 <ctrl_sam3ucfg_cb+0x68>
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80d5c:	2010      	movs	r0, #16
   80d5e:	4b12      	ldr	r3, [pc, #72]	; (80da8 <ctrl_sam3ucfg_cb+0x7c>)
   80d60:	4798      	blx	r3
        break;
   80d62:	e017      	b.n	80d94 <ctrl_sam3ucfg_cb+0x68>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80d64:	2201      	movs	r2, #1
   80d66:	210c      	movs	r1, #12
   80d68:	4810      	ldr	r0, [pc, #64]	; (80dac <ctrl_sam3ucfg_cb+0x80>)
   80d6a:	4b11      	ldr	r3, [pc, #68]	; (80db0 <ctrl_sam3ucfg_cb+0x84>)
   80d6c:	4798      	blx	r3
        udc_detach();
   80d6e:	4b11      	ldr	r3, [pc, #68]	; (80db4 <ctrl_sam3ucfg_cb+0x88>)
   80d70:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80d72:	bf00      	nop
   80d74:	4b10      	ldr	r3, [pc, #64]	; (80db8 <ctrl_sam3ucfg_cb+0x8c>)
   80d76:	685b      	ldr	r3, [r3, #4]
   80d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80d7c:	2b00      	cmp	r3, #0
   80d7e:	d1f9      	bne.n	80d74 <ctrl_sam3ucfg_cb+0x48>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80d80:	4b0d      	ldr	r3, [pc, #52]	; (80db8 <ctrl_sam3ucfg_cb+0x8c>)
   80d82:	681b      	ldr	r3, [r3, #0]
   80d84:	4a0c      	ldr	r2, [pc, #48]	; (80db8 <ctrl_sam3ucfg_cb+0x8c>)
   80d86:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80d8a:	f043 0305 	orr.w	r3, r3, #5
   80d8e:	6013      	str	r3, [r2, #0]
        while(1);
   80d90:	e7fe      	b.n	80d90 <ctrl_sam3ucfg_cb+0x64>
        break;
   80d92:	bf00      	nop
    }
}
   80d94:	bf00      	nop
   80d96:	bd80      	pop	{r7, pc}
   80d98:	20001810 	.word	0x20001810
   80d9c:	000809fd 	.word	0x000809fd
   80da0:	00080b05 	.word	0x00080b05
   80da4:	00084375 	.word	0x00084375
   80da8:	000843f5 	.word	0x000843f5
   80dac:	400e0800 	.word	0x400e0800
   80db0:	000849b5 	.word	0x000849b5
   80db4:	00080b35 	.word	0x00080b35
   80db8:	400e1200 	.word	0x400e1200

00080dbc <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   80dbc:	b580      	push	{r7, lr}
   80dbe:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   80dc0:	4b0d      	ldr	r3, [pc, #52]	; (80df8 <ctrl_progfpga_bulk+0x3c>)
   80dc2:	885b      	ldrh	r3, [r3, #2]
   80dc4:	2ba2      	cmp	r3, #162	; 0xa2
   80dc6:	d00f      	beq.n	80de8 <ctrl_progfpga_bulk+0x2c>
   80dc8:	2ba2      	cmp	r3, #162	; 0xa2
   80dca:	dc11      	bgt.n	80df0 <ctrl_progfpga_bulk+0x34>
   80dcc:	2ba0      	cmp	r3, #160	; 0xa0
   80dce:	d002      	beq.n	80dd6 <ctrl_progfpga_bulk+0x1a>
   80dd0:	2ba1      	cmp	r3, #161	; 0xa1
   80dd2:	d003      	beq.n	80ddc <ctrl_progfpga_bulk+0x20>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
        /* Done */
        blockendpoint_usage = bep_emem;
        break;

    default:
        break;
<<<<<<< HEAD
   80ed8:	e00c      	b.n	80ef4 <ctrl_progfpga_bulk+0x34>
        fpga_program_setup1();
   80eda:	4b09      	ldr	r3, [pc, #36]	; (80f00 <ctrl_progfpga_bulk+0x40>)
   80edc:	4798      	blx	r3
        break;
   80ede:	e00a      	b.n	80ef6 <ctrl_progfpga_bulk+0x36>
        fpga_program_setup2();
   80ee0:	4b08      	ldr	r3, [pc, #32]	; (80f04 <ctrl_progfpga_bulk+0x44>)
   80ee2:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   80ee4:	4b08      	ldr	r3, [pc, #32]	; (80f08 <ctrl_progfpga_bulk+0x48>)
   80ee6:	220a      	movs	r2, #10
   80ee8:	701a      	strb	r2, [r3, #0]
        break;
   80eea:	e004      	b.n	80ef6 <ctrl_progfpga_bulk+0x36>
        blockendpoint_usage = bep_emem;
   80eec:	4b06      	ldr	r3, [pc, #24]	; (80f08 <ctrl_progfpga_bulk+0x48>)
   80eee:	2200      	movs	r2, #0
   80ef0:	701a      	strb	r2, [r3, #0]
        break;
   80ef2:	e000      	b.n	80ef6 <ctrl_progfpga_bulk+0x36>
        break;
   80ef4:	bf00      	nop
    }
}
   80ef6:	bf00      	nop
   80ef8:	bd80      	pop	{r7, pc}
   80efa:	bf00      	nop
   80efc:	20001828 	.word	0x20001828
   80f00:	000814cd 	.word	0x000814cd
   80f04:	0008154d 	.word	0x0008154d
   80f08:	20001250 	.word	0x20001250

00080f0c <ctrl_fpga_reset>:

void ctrl_fpga_reset(void) {
   80f0c:	b580      	push	{r7, lr}
   80f0e:	af00      	add	r7, sp, #0
  gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   80f10:	2026      	movs	r0, #38	; 0x26
   80f12:	4b03      	ldr	r3, [pc, #12]	; (80f20 <ctrl_fpga_reset+0x14>)
   80f14:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   80f16:	2026      	movs	r0, #38	; 0x26
   80f18:	4b02      	ldr	r3, [pc, #8]	; (80f24 <ctrl_fpga_reset+0x18>)
   80f1a:	4798      	blx	r3
}
   80f1c:	bf00      	nop
   80f1e:	bd80      	pop	{r7, pc}
   80f20:	00082319 	.word	0x00082319
   80f24:	00082349 	.word	0x00082349

00080f28 <ctrl_usart_cb>:

static void ctrl_usart_cb(void)
{
   80f28:	b580      	push	{r7, lr}
   80f2a:	af00      	add	r7, sp, #0
	ctrl_usart(USART_TARGET, false);
   80f2c:	2100      	movs	r1, #0
   80f2e:	4802      	ldr	r0, [pc, #8]	; (80f38 <ctrl_usart_cb+0x10>)
   80f30:	4b02      	ldr	r3, [pc, #8]	; (80f3c <ctrl_usart_cb+0x14>)
   80f32:	4798      	blx	r3
}
   80f34:	bf00      	nop
   80f36:	bd80      	pop	{r7, pc}
   80f38:	40090000 	.word	0x40090000
   80f3c:	00081715 	.word	0x00081715

00080f40 <ctrl_usart_cb_data>:

static void ctrl_usart_cb_data(void)
{		
   80f40:	b580      	push	{r7, lr}
   80f42:	b082      	sub	sp, #8
   80f44:	af00      	add	r7, sp, #0
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   80f46:	4b10      	ldr	r3, [pc, #64]	; (80f88 <ctrl_usart_cb_data+0x48>)
   80f48:	88da      	ldrh	r2, [r3, #6]
   80f4a:	4b0f      	ldr	r3, [pc, #60]	; (80f88 <ctrl_usart_cb_data+0x48>)
   80f4c:	899b      	ldrh	r3, [r3, #12]
   80f4e:	429a      	cmp	r2, r3
   80f50:	d816      	bhi.n	80f80 <ctrl_usart_cb_data+0x40>
=======
   80dd4:	e00c      	b.n	80df0 <ctrl_progfpga_bulk+0x34>
        fpga_program_setup1();
   80dd6:	4b09      	ldr	r3, [pc, #36]	; (80dfc <ctrl_progfpga_bulk+0x40>)
   80dd8:	4798      	blx	r3
        break;
   80dda:	e00a      	b.n	80df2 <ctrl_progfpga_bulk+0x36>
        fpga_program_setup2();
   80ddc:	4b08      	ldr	r3, [pc, #32]	; (80e00 <ctrl_progfpga_bulk+0x44>)
   80dde:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   80de0:	4b08      	ldr	r3, [pc, #32]	; (80e04 <ctrl_progfpga_bulk+0x48>)
   80de2:	220a      	movs	r2, #10
   80de4:	701a      	strb	r2, [r3, #0]
        break;
   80de6:	e004      	b.n	80df2 <ctrl_progfpga_bulk+0x36>
        blockendpoint_usage = bep_emem;
   80de8:	4b06      	ldr	r3, [pc, #24]	; (80e04 <ctrl_progfpga_bulk+0x48>)
   80dea:	2200      	movs	r2, #0
   80dec:	701a      	strb	r2, [r3, #0]
        break;
   80dee:	e000      	b.n	80df2 <ctrl_progfpga_bulk+0x36>
        break;
   80df0:	bf00      	nop
    }
}
   80df2:	bf00      	nop
   80df4:	bd80      	pop	{r7, pc}
   80df6:	bf00      	nop
   80df8:	20001810 	.word	0x20001810
   80dfc:	000813c9 	.word	0x000813c9
   80e00:	00081449 	.word	0x00081449
   80e04:	20001248 	.word	0x20001248

00080e08 <ctrl_fpga_reset>:

void ctrl_fpga_reset(void) {
   80e08:	b580      	push	{r7, lr}
   80e0a:	af00      	add	r7, sp, #0
  gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   80e0c:	2026      	movs	r0, #38	; 0x26
   80e0e:	4b03      	ldr	r3, [pc, #12]	; (80e1c <ctrl_fpga_reset+0x14>)
   80e10:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   80e12:	2026      	movs	r0, #38	; 0x26
   80e14:	4b02      	ldr	r3, [pc, #8]	; (80e20 <ctrl_fpga_reset+0x18>)
   80e16:	4798      	blx	r3
}
   80e18:	bf00      	nop
   80e1a:	bd80      	pop	{r7, pc}
   80e1c:	00084c55 	.word	0x00084c55
   80e20:	00084c85 	.word	0x00084c85

00080e24 <ctrl_usart_cb>:

static void ctrl_usart_cb(void)
{
   80e24:	b580      	push	{r7, lr}
   80e26:	af00      	add	r7, sp, #0
	ctrl_usart(USART_TARGET, false);
   80e28:	2100      	movs	r1, #0
   80e2a:	4802      	ldr	r0, [pc, #8]	; (80e34 <ctrl_usart_cb+0x10>)
   80e2c:	4b02      	ldr	r3, [pc, #8]	; (80e38 <ctrl_usart_cb+0x14>)
   80e2e:	4798      	blx	r3
}
   80e30:	bf00      	nop
   80e32:	bd80      	pop	{r7, pc}
   80e34:	40090000 	.word	0x40090000
   80e38:	00081611 	.word	0x00081611

00080e3c <ctrl_usart_cb_data>:

static void ctrl_usart_cb_data(void)
{		
   80e3c:	b580      	push	{r7, lr}
   80e3e:	b082      	sub	sp, #8
   80e40:	af00      	add	r7, sp, #0
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   80e42:	4b10      	ldr	r3, [pc, #64]	; (80e84 <ctrl_usart_cb_data+0x48>)
   80e44:	88da      	ldrh	r2, [r3, #6]
   80e46:	4b0f      	ldr	r3, [pc, #60]	; (80e84 <ctrl_usart_cb_data+0x48>)
   80e48:	899b      	ldrh	r3, [r3, #12]
   80e4a:	429a      	cmp	r2, r3
   80e4c:	d816      	bhi.n	80e7c <ctrl_usart_cb_data+0x40>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
		return;
	}
	
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
<<<<<<< HEAD
   80f52:	2300      	movs	r3, #0
   80f54:	607b      	str	r3, [r7, #4]
   80f56:	e00c      	b.n	80f72 <ctrl_usart_cb_data+0x32>
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   80f58:	4b0b      	ldr	r3, [pc, #44]	; (80f88 <ctrl_usart_cb_data+0x48>)
   80f5a:	689a      	ldr	r2, [r3, #8]
   80f5c:	687b      	ldr	r3, [r7, #4]
   80f5e:	4413      	add	r3, r2
   80f60:	781b      	ldrb	r3, [r3, #0]
   80f62:	461a      	mov	r2, r3
   80f64:	2100      	movs	r1, #0
   80f66:	4809      	ldr	r0, [pc, #36]	; (80f8c <ctrl_usart_cb_data+0x4c>)
   80f68:	4b09      	ldr	r3, [pc, #36]	; (80f90 <ctrl_usart_cb_data+0x50>)
   80f6a:	4798      	blx	r3
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   80f6c:	687b      	ldr	r3, [r7, #4]
   80f6e:	3301      	adds	r3, #1
   80f70:	607b      	str	r3, [r7, #4]
   80f72:	4b05      	ldr	r3, [pc, #20]	; (80f88 <ctrl_usart_cb_data+0x48>)
   80f74:	88db      	ldrh	r3, [r3, #6]
   80f76:	461a      	mov	r2, r3
   80f78:	687b      	ldr	r3, [r7, #4]
   80f7a:	4293      	cmp	r3, r2
   80f7c:	dbec      	blt.n	80f58 <ctrl_usart_cb_data+0x18>
   80f7e:	e000      	b.n	80f82 <ctrl_usart_cb_data+0x42>
		return;
   80f80:	bf00      	nop
	}
}
   80f82:	3708      	adds	r7, #8
   80f84:	46bd      	mov	sp, r7
   80f86:	bd80      	pop	{r7, pc}
   80f88:	20001828 	.word	0x20001828
   80f8c:	40090000 	.word	0x40090000
   80f90:	00081afd 	.word	0x00081afd

00080f94 <main_setup_out_received>:
=======
   80e4e:	2300      	movs	r3, #0
   80e50:	607b      	str	r3, [r7, #4]
   80e52:	e00c      	b.n	80e6e <ctrl_usart_cb_data+0x32>
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   80e54:	4b0b      	ldr	r3, [pc, #44]	; (80e84 <ctrl_usart_cb_data+0x48>)
   80e56:	689a      	ldr	r2, [r3, #8]
   80e58:	687b      	ldr	r3, [r7, #4]
   80e5a:	4413      	add	r3, r2
   80e5c:	781b      	ldrb	r3, [r3, #0]
   80e5e:	461a      	mov	r2, r3
   80e60:	2100      	movs	r1, #0
   80e62:	4809      	ldr	r0, [pc, #36]	; (80e88 <ctrl_usart_cb_data+0x4c>)
   80e64:	4b09      	ldr	r3, [pc, #36]	; (80e8c <ctrl_usart_cb_data+0x50>)
   80e66:	4798      	blx	r3
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   80e68:	687b      	ldr	r3, [r7, #4]
   80e6a:	3301      	adds	r3, #1
   80e6c:	607b      	str	r3, [r7, #4]
   80e6e:	4b05      	ldr	r3, [pc, #20]	; (80e84 <ctrl_usart_cb_data+0x48>)
   80e70:	88db      	ldrh	r3, [r3, #6]
   80e72:	461a      	mov	r2, r3
   80e74:	687b      	ldr	r3, [r7, #4]
   80e76:	4293      	cmp	r3, r2
   80e78:	dbec      	blt.n	80e54 <ctrl_usart_cb_data+0x18>
   80e7a:	e000      	b.n	80e7e <ctrl_usart_cb_data+0x42>
		return;
   80e7c:	bf00      	nop
	}
}
   80e7e:	3708      	adds	r7, #8
   80e80:	46bd      	mov	sp, r7
   80e82:	bd80      	pop	{r7, pc}
   80e84:	20001810 	.word	0x20001810
   80e88:	40090000 	.word	0x40090000
   80e8c:	000819f9 	.word	0x000819f9

00080e90 <main_setup_out_received>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
{
	V2Protocol_ProcessCommand();
}

bool main_setup_out_received(void)
{
<<<<<<< HEAD
   80f94:	b580      	push	{r7, lr}
   80f96:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   80f98:	4b49      	ldr	r3, [pc, #292]	; (810c0 <main_setup_out_received+0x12c>)
   80f9a:	4a4a      	ldr	r2, [pc, #296]	; (810c4 <main_setup_out_received+0x130>)
   80f9c:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   80f9e:	4b48      	ldr	r3, [pc, #288]	; (810c0 <main_setup_out_received+0x12c>)
   80fa0:	88db      	ldrh	r3, [r3, #6]
   80fa2:	2b40      	cmp	r3, #64	; 0x40
   80fa4:	bf28      	it	cs
   80fa6:	2340      	movcs	r3, #64	; 0x40
   80fa8:	b29a      	uxth	r2, r3
   80faa:	4b45      	ldr	r3, [pc, #276]	; (810c0 <main_setup_out_received+0x12c>)
   80fac:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   80fae:	4b46      	ldr	r3, [pc, #280]	; (810c8 <main_setup_out_received+0x134>)
   80fb0:	2200      	movs	r2, #0
   80fb2:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   80fb4:	4b42      	ldr	r3, [pc, #264]	; (810c0 <main_setup_out_received+0x12c>)
   80fb6:	785b      	ldrb	r3, [r3, #1]
   80fb8:	3b10      	subs	r3, #16
   80fba:	2b15      	cmp	r3, #21
   80fbc:	d873      	bhi.n	810a6 <main_setup_out_received+0x112>
   80fbe:	a201      	add	r2, pc, #4	; (adr r2, 80fc4 <main_setup_out_received+0x30>)
   80fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80fc4:	0008101d 	.word	0x0008101d
   80fc8:	00081049 	.word	0x00081049
   80fcc:	00081033 	.word	0x00081033
   80fd0:	0008105f 	.word	0x0008105f
   80fd4:	000810a7 	.word	0x000810a7
   80fd8:	000810a7 	.word	0x000810a7
   80fdc:	00081089 	.word	0x00081089
   80fe0:	000810a7 	.word	0x000810a7
   80fe4:	000810a7 	.word	0x000810a7
   80fe8:	000810a7 	.word	0x000810a7
   80fec:	0008107f 	.word	0x0008107f
   80ff0:	00081075 	.word	0x00081075
   80ff4:	000810a7 	.word	0x000810a7
   80ff8:	000810a7 	.word	0x000810a7
   80ffc:	000810a7 	.word	0x000810a7
   81000:	000810a7 	.word	0x000810a7
   81004:	000810a7 	.word	0x000810a7
   81008:	000810a7 	.word	0x000810a7
   8100c:	00081093 	.word	0x00081093
   81010:	000810a7 	.word	0x000810a7
   81014:	000810a7 	.word	0x000810a7
   81018:	0008109d 	.word	0x0008109d
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   8101c:	2006      	movs	r0, #6
   8101e:	4b2b      	ldr	r3, [pc, #172]	; (810cc <main_setup_out_received+0x138>)
   81020:	4798      	blx	r3
   81022:	4603      	mov	r3, r0
   81024:	2b00      	cmp	r3, #0
   81026:	d040      	beq.n	810aa <main_setup_out_received+0x116>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   81028:	4b25      	ldr	r3, [pc, #148]	; (810c0 <main_setup_out_received+0x12c>)
   8102a:	4a29      	ldr	r2, [pc, #164]	; (810d0 <main_setup_out_received+0x13c>)
   8102c:	611a      	str	r2, [r3, #16]
            return true;
   8102e:	2301      	movs	r3, #1
   81030:	e043      	b.n	810ba <main_setup_out_received+0x126>
=======
   80e90:	b580      	push	{r7, lr}
   80e92:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   80e94:	4b49      	ldr	r3, [pc, #292]	; (80fbc <main_setup_out_received+0x12c>)
   80e96:	4a4a      	ldr	r2, [pc, #296]	; (80fc0 <main_setup_out_received+0x130>)
   80e98:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   80e9a:	4b48      	ldr	r3, [pc, #288]	; (80fbc <main_setup_out_received+0x12c>)
   80e9c:	88db      	ldrh	r3, [r3, #6]
   80e9e:	2b40      	cmp	r3, #64	; 0x40
   80ea0:	bf28      	it	cs
   80ea2:	2340      	movcs	r3, #64	; 0x40
   80ea4:	b29a      	uxth	r2, r3
   80ea6:	4b45      	ldr	r3, [pc, #276]	; (80fbc <main_setup_out_received+0x12c>)
   80ea8:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   80eaa:	4b46      	ldr	r3, [pc, #280]	; (80fc4 <main_setup_out_received+0x134>)
   80eac:	2200      	movs	r2, #0
   80eae:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   80eb0:	4b42      	ldr	r3, [pc, #264]	; (80fbc <main_setup_out_received+0x12c>)
   80eb2:	785b      	ldrb	r3, [r3, #1]
   80eb4:	3b10      	subs	r3, #16
   80eb6:	2b15      	cmp	r3, #21
   80eb8:	d873      	bhi.n	80fa2 <main_setup_out_received+0x112>
   80eba:	a201      	add	r2, pc, #4	; (adr r2, 80ec0 <main_setup_out_received+0x30>)
   80ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80ec0:	00080f19 	.word	0x00080f19
   80ec4:	00080f45 	.word	0x00080f45
   80ec8:	00080f2f 	.word	0x00080f2f
   80ecc:	00080f5b 	.word	0x00080f5b
   80ed0:	00080fa3 	.word	0x00080fa3
   80ed4:	00080fa3 	.word	0x00080fa3
   80ed8:	00080f85 	.word	0x00080f85
   80edc:	00080fa3 	.word	0x00080fa3
   80ee0:	00080fa3 	.word	0x00080fa3
   80ee4:	00080fa3 	.word	0x00080fa3
   80ee8:	00080f7b 	.word	0x00080f7b
   80eec:	00080f71 	.word	0x00080f71
   80ef0:	00080fa3 	.word	0x00080fa3
   80ef4:	00080fa3 	.word	0x00080fa3
   80ef8:	00080fa3 	.word	0x00080fa3
   80efc:	00080fa3 	.word	0x00080fa3
   80f00:	00080fa3 	.word	0x00080fa3
   80f04:	00080fa3 	.word	0x00080fa3
   80f08:	00080f8f 	.word	0x00080f8f
   80f0c:	00080fa3 	.word	0x00080fa3
   80f10:	00080fa3 	.word	0x00080fa3
   80f14:	00080f99 	.word	0x00080f99
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   80f18:	2006      	movs	r0, #6
   80f1a:	4b2b      	ldr	r3, [pc, #172]	; (80fc8 <main_setup_out_received+0x138>)
   80f1c:	4798      	blx	r3
   80f1e:	4603      	mov	r3, r0
   80f20:	2b00      	cmp	r3, #0
   80f22:	d040      	beq.n	80fa6 <main_setup_out_received+0x116>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   80f24:	4b25      	ldr	r3, [pc, #148]	; (80fbc <main_setup_out_received+0x12c>)
   80f26:	4a29      	ldr	r2, [pc, #164]	; (80fcc <main_setup_out_received+0x13c>)
   80f28:	611a      	str	r2, [r3, #16]
            return true;
   80f2a:	2301      	movs	r3, #1
   80f2c:	e043      	b.n	80fb6 <main_setup_out_received+0x126>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
<<<<<<< HEAD
   81032:	2006      	movs	r0, #6
   81034:	4b25      	ldr	r3, [pc, #148]	; (810cc <main_setup_out_received+0x138>)
   81036:	4798      	blx	r3
   81038:	4603      	mov	r3, r0
   8103a:	2b00      	cmp	r3, #0
   8103c:	d037      	beq.n	810ae <main_setup_out_received+0x11a>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   8103e:	4b20      	ldr	r3, [pc, #128]	; (810c0 <main_setup_out_received+0x12c>)
   81040:	4a24      	ldr	r2, [pc, #144]	; (810d4 <main_setup_out_received+0x140>)
   81042:	611a      	str	r2, [r3, #16]
            return true;
   81044:	2301      	movs	r3, #1
   81046:	e038      	b.n	810ba <main_setup_out_received+0x126>
=======
   80f2e:	2006      	movs	r0, #6
   80f30:	4b25      	ldr	r3, [pc, #148]	; (80fc8 <main_setup_out_received+0x138>)
   80f32:	4798      	blx	r3
   80f34:	4603      	mov	r3, r0
   80f36:	2b00      	cmp	r3, #0
   80f38:	d037      	beq.n	80faa <main_setup_out_received+0x11a>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   80f3a:	4b20      	ldr	r3, [pc, #128]	; (80fbc <main_setup_out_received+0x12c>)
   80f3c:	4a24      	ldr	r2, [pc, #144]	; (80fd0 <main_setup_out_received+0x140>)
   80f3e:	611a      	str	r2, [r3, #16]
            return true;
   80f40:	2301      	movs	r3, #1
   80f42:	e038      	b.n	80fb6 <main_setup_out_received+0x126>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
        break;


        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
<<<<<<< HEAD
   81048:	2006      	movs	r0, #6
   8104a:	4b20      	ldr	r3, [pc, #128]	; (810cc <main_setup_out_received+0x138>)
   8104c:	4798      	blx	r3
   8104e:	4603      	mov	r3, r0
   81050:	2b00      	cmp	r3, #0
   81052:	d02e      	beq.n	810b2 <main_setup_out_received+0x11e>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   81054:	4b1a      	ldr	r3, [pc, #104]	; (810c0 <main_setup_out_received+0x12c>)
   81056:	4a20      	ldr	r2, [pc, #128]	; (810d8 <main_setup_out_received+0x144>)
   81058:	611a      	str	r2, [r3, #16]
            return true;
   8105a:	2301      	movs	r3, #1
   8105c:	e02d      	b.n	810ba <main_setup_out_received+0x126>
=======
   80f44:	2006      	movs	r0, #6
   80f46:	4b20      	ldr	r3, [pc, #128]	; (80fc8 <main_setup_out_received+0x138>)
   80f48:	4798      	blx	r3
   80f4a:	4603      	mov	r3, r0
   80f4c:	2b00      	cmp	r3, #0
   80f4e:	d02e      	beq.n	80fae <main_setup_out_received+0x11e>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   80f50:	4b1a      	ldr	r3, [pc, #104]	; (80fbc <main_setup_out_received+0x12c>)
   80f52:	4a20      	ldr	r2, [pc, #128]	; (80fd4 <main_setup_out_received+0x144>)
   80f54:	611a      	str	r2, [r3, #16]
            return true;
   80f56:	2301      	movs	r3, #1
   80f58:	e02d      	b.n	80fb6 <main_setup_out_received+0x126>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
    //     udd_g_ctrlreq.callback = ctrl_avr_program_void;
    //     return true;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
<<<<<<< HEAD
   8105e:	2006      	movs	r0, #6
   81060:	4b1a      	ldr	r3, [pc, #104]	; (810cc <main_setup_out_received+0x138>)
   81062:	4798      	blx	r3
   81064:	4603      	mov	r3, r0
   81066:	2b00      	cmp	r3, #0
   81068:	d025      	beq.n	810b6 <main_setup_out_received+0x122>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   8106a:	4b15      	ldr	r3, [pc, #84]	; (810c0 <main_setup_out_received+0x12c>)
   8106c:	4a1b      	ldr	r2, [pc, #108]	; (810dc <main_setup_out_received+0x148>)
   8106e:	611a      	str	r2, [r3, #16]
            return true;
   81070:	2301      	movs	r3, #1
   81072:	e022      	b.n	810ba <main_setup_out_received+0x126>
=======
   80f5a:	2006      	movs	r0, #6
   80f5c:	4b1a      	ldr	r3, [pc, #104]	; (80fc8 <main_setup_out_received+0x138>)
   80f5e:	4798      	blx	r3
   80f60:	4603      	mov	r3, r0
   80f62:	2b00      	cmp	r3, #0
   80f64:	d025      	beq.n	80fb2 <main_setup_out_received+0x122>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   80f66:	4b15      	ldr	r3, [pc, #84]	; (80fbc <main_setup_out_received+0x12c>)
   80f68:	4a1b      	ldr	r2, [pc, #108]	; (80fd8 <main_setup_out_received+0x148>)
   80f6a:	611a      	str	r2, [r3, #16]
            return true;
   80f6c:	2301      	movs	r3, #1
   80f6e:	e022      	b.n	80fb6 <main_setup_out_received+0x126>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
        }
        break;

		/* Target serial */
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
<<<<<<< HEAD
   81074:	4b12      	ldr	r3, [pc, #72]	; (810c0 <main_setup_out_received+0x12c>)
   81076:	4a1a      	ldr	r2, [pc, #104]	; (810e0 <main_setup_out_received+0x14c>)
   81078:	611a      	str	r2, [r3, #16]
        return true;
   8107a:	2301      	movs	r3, #1
   8107c:	e01d      	b.n	810ba <main_setup_out_received+0x126>
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   8107e:	4b10      	ldr	r3, [pc, #64]	; (810c0 <main_setup_out_received+0x12c>)
   81080:	4a18      	ldr	r2, [pc, #96]	; (810e4 <main_setup_out_received+0x150>)
   81082:	611a      	str	r2, [r3, #16]
        return true;
   81084:	2301      	movs	r3, #1
   81086:	e018      	b.n	810ba <main_setup_out_received+0x126>

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81088:	4b0d      	ldr	r3, [pc, #52]	; (810c0 <main_setup_out_received+0x12c>)
   8108a:	4a17      	ldr	r2, [pc, #92]	; (810e8 <main_setup_out_received+0x154>)
   8108c:	611a      	str	r2, [r3, #16]
        return true;
   8108e:	2301      	movs	r3, #1
   81090:	e013      	b.n	810ba <main_setup_out_received+0x126>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   81092:	4b0b      	ldr	r3, [pc, #44]	; (810c0 <main_setup_out_received+0x12c>)
   81094:	4a15      	ldr	r2, [pc, #84]	; (810ec <main_setup_out_received+0x158>)
   81096:	611a      	str	r2, [r3, #16]
        return true;
   81098:	2301      	movs	r3, #1
   8109a:	e00e      	b.n	810ba <main_setup_out_received+0x126>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   8109c:	4b08      	ldr	r3, [pc, #32]	; (810c0 <main_setup_out_received+0x12c>)
   8109e:	4a14      	ldr	r2, [pc, #80]	; (810f0 <main_setup_out_received+0x15c>)
   810a0:	611a      	str	r2, [r3, #16]
        return true;
   810a2:	2301      	movs	r3, #1
   810a4:	e009      	b.n	810ba <main_setup_out_received+0x126>

    default:
        return false;
   810a6:	2300      	movs	r3, #0
   810a8:	e007      	b.n	810ba <main_setup_out_received+0x126>
        break;
   810aa:	bf00      	nop
   810ac:	e004      	b.n	810b8 <main_setup_out_received+0x124>
        break;
   810ae:	bf00      	nop
   810b0:	e002      	b.n	810b8 <main_setup_out_received+0x124>
        break;
   810b2:	bf00      	nop
   810b4:	e000      	b.n	810b8 <main_setup_out_received+0x124>
        break;
   810b6:	bf00      	nop
    }

    return false;
   810b8:	2300      	movs	r3, #0
}
   810ba:	4618      	mov	r0, r3
   810bc:	bd80      	pop	{r7, pc}
   810be:	bf00      	nop
   810c0:	20001828 	.word	0x20001828
   810c4:	20001210 	.word	0x20001210
   810c8:	20001250 	.word	0x20001250
   810cc:	0008133d 	.word	0x0008133d
   810d0:	00080cc1 	.word	0x00080cc1
   810d4:	00080d1d 	.word	0x00080d1d
   810d8:	00080df1 	.word	0x00080df1
   810dc:	00080d79 	.word	0x00080d79
   810e0:	00080f29 	.word	0x00080f29
   810e4:	00080f41 	.word	0x00080f41
   810e8:	00080ec1 	.word	0x00080ec1
   810ec:	00080e31 	.word	0x00080e31
   810f0:	00080f0d 	.word	0x00080f0d

000810f4 <main_setup_in_received>:
=======
   80f70:	4b12      	ldr	r3, [pc, #72]	; (80fbc <main_setup_out_received+0x12c>)
   80f72:	4a1a      	ldr	r2, [pc, #104]	; (80fdc <main_setup_out_received+0x14c>)
   80f74:	611a      	str	r2, [r3, #16]
        return true;
   80f76:	2301      	movs	r3, #1
   80f78:	e01d      	b.n	80fb6 <main_setup_out_received+0x126>
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   80f7a:	4b10      	ldr	r3, [pc, #64]	; (80fbc <main_setup_out_received+0x12c>)
   80f7c:	4a18      	ldr	r2, [pc, #96]	; (80fe0 <main_setup_out_received+0x150>)
   80f7e:	611a      	str	r2, [r3, #16]
        return true;
   80f80:	2301      	movs	r3, #1
   80f82:	e018      	b.n	80fb6 <main_setup_out_received+0x126>

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   80f84:	4b0d      	ldr	r3, [pc, #52]	; (80fbc <main_setup_out_received+0x12c>)
   80f86:	4a17      	ldr	r2, [pc, #92]	; (80fe4 <main_setup_out_received+0x154>)
   80f88:	611a      	str	r2, [r3, #16]
        return true;
   80f8a:	2301      	movs	r3, #1
   80f8c:	e013      	b.n	80fb6 <main_setup_out_received+0x126>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   80f8e:	4b0b      	ldr	r3, [pc, #44]	; (80fbc <main_setup_out_received+0x12c>)
   80f90:	4a15      	ldr	r2, [pc, #84]	; (80fe8 <main_setup_out_received+0x158>)
   80f92:	611a      	str	r2, [r3, #16]
        return true;
   80f94:	2301      	movs	r3, #1
   80f96:	e00e      	b.n	80fb6 <main_setup_out_received+0x126>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   80f98:	4b08      	ldr	r3, [pc, #32]	; (80fbc <main_setup_out_received+0x12c>)
   80f9a:	4a14      	ldr	r2, [pc, #80]	; (80fec <main_setup_out_received+0x15c>)
   80f9c:	611a      	str	r2, [r3, #16]
        return true;
   80f9e:	2301      	movs	r3, #1
   80fa0:	e009      	b.n	80fb6 <main_setup_out_received+0x126>

    default:
        return false;
   80fa2:	2300      	movs	r3, #0
   80fa4:	e007      	b.n	80fb6 <main_setup_out_received+0x126>
        break;
   80fa6:	bf00      	nop
   80fa8:	e004      	b.n	80fb4 <main_setup_out_received+0x124>
        break;
   80faa:	bf00      	nop
   80fac:	e002      	b.n	80fb4 <main_setup_out_received+0x124>
        break;
   80fae:	bf00      	nop
   80fb0:	e000      	b.n	80fb4 <main_setup_out_received+0x124>
        break;
   80fb2:	bf00      	nop
    }

    return false;
   80fb4:	2300      	movs	r3, #0
}
   80fb6:	4618      	mov	r0, r3
   80fb8:	bd80      	pop	{r7, pc}
   80fba:	bf00      	nop
   80fbc:	20001810 	.word	0x20001810
   80fc0:	20001208 	.word	0x20001208
   80fc4:	20001248 	.word	0x20001248
   80fc8:	00081239 	.word	0x00081239
   80fcc:	00080bbd 	.word	0x00080bbd
   80fd0:	00080c19 	.word	0x00080c19
   80fd4:	00080ced 	.word	0x00080ced
   80fd8:	00080c75 	.word	0x00080c75
   80fdc:	00080e25 	.word	0x00080e25
   80fe0:	00080e3d 	.word	0x00080e3d
   80fe4:	00080dbd 	.word	0x00080dbd
   80fe8:	00080d2d 	.word	0x00080d2d
   80fec:	00080e09 	.word	0x00080e09

00080ff0 <main_setup_in_received>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
<<<<<<< HEAD
   810f4:	b580      	push	{r7, lr}
   810f6:	b082      	sub	sp, #8
   810f8:	af00      	add	r7, sp, #0
=======
   80ff0:	b580      	push	{r7, lr}
   80ff2:	b082      	sub	sp, #8
   80ff4:	af00      	add	r7, sp, #0
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
    */

    static uint8_t  respbuf[64];
    unsigned int cnt;

    switch(udd_g_ctrlreq.req.bRequest){
<<<<<<< HEAD
   810fa:	4b48      	ldr	r3, [pc, #288]	; (8121c <main_setup_in_received+0x128>)
   810fc:	785b      	ldrb	r3, [r3, #1]
   810fe:	3b12      	subs	r3, #18
   81100:	2b09      	cmp	r3, #9
   81102:	f200 8085 	bhi.w	81210 <main_setup_in_received+0x11c>
   81106:	a201      	add	r2, pc, #4	; (adr r2, 8110c <main_setup_in_received+0x18>)
   81108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8110c:	00081135 	.word	0x00081135
   81110:	00081211 	.word	0x00081211
   81114:	00081211 	.word	0x00081211
   81118:	000811d7 	.word	0x000811d7
   8111c:	00081211 	.word	0x00081211
   81120:	000811b5 	.word	0x000811b5
   81124:	00081211 	.word	0x00081211
   81128:	00081211 	.word	0x00081211
   8112c:	00081177 	.word	0x00081177
   81130:	00081161 	.word	0x00081161
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   81134:	4b3a      	ldr	r3, [pc, #232]	; (81220 <main_setup_in_received+0x12c>)
   81136:	681b      	ldr	r3, [r3, #0]
   81138:	4a38      	ldr	r2, [pc, #224]	; (8121c <main_setup_in_received+0x128>)
   8113a:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   8113c:	4b39      	ldr	r3, [pc, #228]	; (81224 <main_setup_in_received+0x130>)
   8113e:	681b      	ldr	r3, [r3, #0]
   81140:	b29a      	uxth	r2, r3
   81142:	4b36      	ldr	r3, [pc, #216]	; (8121c <main_setup_in_received+0x128>)
   81144:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   81146:	4b37      	ldr	r3, [pc, #220]	; (81224 <main_setup_in_received+0x130>)
   81148:	2200      	movs	r2, #0
   8114a:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   8114c:	4b36      	ldr	r3, [pc, #216]	; (81228 <main_setup_in_received+0x134>)
   8114e:	4798      	blx	r3
   81150:	4603      	mov	r3, r0
   81152:	2b05      	cmp	r3, #5
   81154:	d102      	bne.n	8115c <main_setup_in_received+0x68>
            FPGA_setlock(fpga_unlocked);
   81156:	2000      	movs	r0, #0
   81158:	4b34      	ldr	r3, [pc, #208]	; (8122c <main_setup_in_received+0x138>)
   8115a:	4798      	blx	r3
        }

        return true;
   8115c:	2301      	movs	r3, #1
   8115e:	e058      	b.n	81212 <main_setup_in_received+0x11e>
=======
   80ff6:	4b48      	ldr	r3, [pc, #288]	; (81118 <main_setup_in_received+0x128>)
   80ff8:	785b      	ldrb	r3, [r3, #1]
   80ffa:	3b12      	subs	r3, #18
   80ffc:	2b09      	cmp	r3, #9
   80ffe:	f200 8085 	bhi.w	8110c <main_setup_in_received+0x11c>
   81002:	a201      	add	r2, pc, #4	; (adr r2, 81008 <main_setup_in_received+0x18>)
   81004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81008:	00081031 	.word	0x00081031
   8100c:	0008110d 	.word	0x0008110d
   81010:	0008110d 	.word	0x0008110d
   81014:	000810d3 	.word	0x000810d3
   81018:	0008110d 	.word	0x0008110d
   8101c:	000810b1 	.word	0x000810b1
   81020:	0008110d 	.word	0x0008110d
   81024:	0008110d 	.word	0x0008110d
   81028:	00081073 	.word	0x00081073
   8102c:	0008105d 	.word	0x0008105d
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   81030:	4b3a      	ldr	r3, [pc, #232]	; (8111c <main_setup_in_received+0x12c>)
   81032:	681b      	ldr	r3, [r3, #0]
   81034:	4a38      	ldr	r2, [pc, #224]	; (81118 <main_setup_in_received+0x128>)
   81036:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81038:	4b39      	ldr	r3, [pc, #228]	; (81120 <main_setup_in_received+0x130>)
   8103a:	681b      	ldr	r3, [r3, #0]
   8103c:	b29a      	uxth	r2, r3
   8103e:	4b36      	ldr	r3, [pc, #216]	; (81118 <main_setup_in_received+0x128>)
   81040:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   81042:	4b37      	ldr	r3, [pc, #220]	; (81120 <main_setup_in_received+0x130>)
   81044:	2200      	movs	r2, #0
   81046:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   81048:	4b36      	ldr	r3, [pc, #216]	; (81124 <main_setup_in_received+0x134>)
   8104a:	4798      	blx	r3
   8104c:	4603      	mov	r3, r0
   8104e:	2b05      	cmp	r3, #5
   81050:	d102      	bne.n	81058 <main_setup_in_received+0x68>
            FPGA_setlock(fpga_unlocked);
   81052:	2000      	movs	r0, #0
   81054:	4b34      	ldr	r3, [pc, #208]	; (81128 <main_setup_in_received+0x138>)
   81056:	4798      	blx	r3
        }

        return true;
   81058:	2301      	movs	r3, #1
   8105a:	e058      	b.n	8110e <main_setup_in_received+0x11e>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
    //     return V2Protocol_ProcessCommand();
    //     break;
        
        
    case REQ_USART0_CONFIG:
        return ctrl_usart(USART_TARGET, true);
<<<<<<< HEAD
   81160:	2101      	movs	r1, #1
   81162:	4833      	ldr	r0, [pc, #204]	; (81230 <main_setup_in_received+0x13c>)
   81164:	4b33      	ldr	r3, [pc, #204]	; (81234 <main_setup_in_received+0x140>)
   81166:	4798      	blx	r3
   81168:	4603      	mov	r3, r0
   8116a:	2b00      	cmp	r3, #0
   8116c:	bf14      	ite	ne
   8116e:	2301      	movne	r3, #1
   81170:	2300      	moveq	r3, #0
   81172:	b2db      	uxtb	r3, r3
   81174:	e04d      	b.n	81212 <main_setup_in_received+0x11e>
=======
   8105c:	2101      	movs	r1, #1
   8105e:	4833      	ldr	r0, [pc, #204]	; (8112c <main_setup_in_received+0x13c>)
   81060:	4b33      	ldr	r3, [pc, #204]	; (81130 <main_setup_in_received+0x140>)
   81062:	4798      	blx	r3
   81064:	4603      	mov	r3, r0
   81066:	2b00      	cmp	r3, #0
   81068:	bf14      	ite	ne
   8106a:	2301      	movne	r3, #1
   8106c:	2300      	moveq	r3, #0
   8106e:	b2db      	uxtb	r3, r3
   81070:	e04d      	b.n	8110e <main_setup_in_received+0x11e>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
        break;
        
    case REQ_USART0_DATA:						
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
<<<<<<< HEAD
   81176:	2300      	movs	r3, #0
   81178:	607b      	str	r3, [r7, #4]
   8117a:	e00c      	b.n	81196 <main_setup_in_received+0xa2>
            respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   8117c:	482c      	ldr	r0, [pc, #176]	; (81230 <main_setup_in_received+0x13c>)
   8117e:	4b2e      	ldr	r3, [pc, #184]	; (81238 <main_setup_in_received+0x144>)
   81180:	4798      	blx	r3
   81182:	4603      	mov	r3, r0
   81184:	b2d9      	uxtb	r1, r3
   81186:	4a2d      	ldr	r2, [pc, #180]	; (8123c <main_setup_in_received+0x148>)
   81188:	687b      	ldr	r3, [r7, #4]
   8118a:	4413      	add	r3, r2
   8118c:	460a      	mov	r2, r1
   8118e:	701a      	strb	r2, [r3, #0]
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81190:	687b      	ldr	r3, [r7, #4]
   81192:	3301      	adds	r3, #1
   81194:	607b      	str	r3, [r7, #4]
   81196:	4b21      	ldr	r3, [pc, #132]	; (8121c <main_setup_in_received+0x128>)
   81198:	88db      	ldrh	r3, [r3, #6]
   8119a:	461a      	mov	r2, r3
   8119c:	687b      	ldr	r3, [r7, #4]
   8119e:	4293      	cmp	r3, r2
   811a0:	d3ec      	bcc.n	8117c <main_setup_in_received+0x88>
        }
        udd_g_ctrlreq.payload = respbuf;
   811a2:	4b1e      	ldr	r3, [pc, #120]	; (8121c <main_setup_in_received+0x128>)
   811a4:	4a25      	ldr	r2, [pc, #148]	; (8123c <main_setup_in_received+0x148>)
   811a6:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   811a8:	687b      	ldr	r3, [r7, #4]
   811aa:	b29a      	uxth	r2, r3
   811ac:	4b1b      	ldr	r3, [pc, #108]	; (8121c <main_setup_in_received+0x128>)
   811ae:	819a      	strh	r2, [r3, #12]
        return true;
   811b0:	2301      	movs	r3, #1
   811b2:	e02e      	b.n	81212 <main_setup_in_received+0x11e>
        break;
    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   811b4:	4b21      	ldr	r3, [pc, #132]	; (8123c <main_setup_in_received+0x148>)
   811b6:	2201      	movs	r2, #1
   811b8:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   811ba:	4b20      	ldr	r3, [pc, #128]	; (8123c <main_setup_in_received+0x148>)
   811bc:	2201      	movs	r2, #1
   811be:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   811c0:	4b1e      	ldr	r3, [pc, #120]	; (8123c <main_setup_in_received+0x148>)
   811c2:	2200      	movs	r2, #0
   811c4:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   811c6:	4b15      	ldr	r3, [pc, #84]	; (8121c <main_setup_in_received+0x128>)
   811c8:	4a1c      	ldr	r2, [pc, #112]	; (8123c <main_setup_in_received+0x148>)
   811ca:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   811cc:	4b13      	ldr	r3, [pc, #76]	; (8121c <main_setup_in_received+0x128>)
   811ce:	2203      	movs	r2, #3
   811d0:	819a      	strh	r2, [r3, #12]
        return true;
   811d2:	2301      	movs	r3, #1
   811d4:	e01d      	b.n	81212 <main_setup_in_received+0x11e>
=======
   81072:	2300      	movs	r3, #0
   81074:	607b      	str	r3, [r7, #4]
   81076:	e00c      	b.n	81092 <main_setup_in_received+0xa2>
            respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   81078:	482c      	ldr	r0, [pc, #176]	; (8112c <main_setup_in_received+0x13c>)
   8107a:	4b2e      	ldr	r3, [pc, #184]	; (81134 <main_setup_in_received+0x144>)
   8107c:	4798      	blx	r3
   8107e:	4603      	mov	r3, r0
   81080:	b2d9      	uxtb	r1, r3
   81082:	4a2d      	ldr	r2, [pc, #180]	; (81138 <main_setup_in_received+0x148>)
   81084:	687b      	ldr	r3, [r7, #4]
   81086:	4413      	add	r3, r2
   81088:	460a      	mov	r2, r1
   8108a:	701a      	strb	r2, [r3, #0]
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8108c:	687b      	ldr	r3, [r7, #4]
   8108e:	3301      	adds	r3, #1
   81090:	607b      	str	r3, [r7, #4]
   81092:	4b21      	ldr	r3, [pc, #132]	; (81118 <main_setup_in_received+0x128>)
   81094:	88db      	ldrh	r3, [r3, #6]
   81096:	461a      	mov	r2, r3
   81098:	687b      	ldr	r3, [r7, #4]
   8109a:	4293      	cmp	r3, r2
   8109c:	d3ec      	bcc.n	81078 <main_setup_in_received+0x88>
        }
        udd_g_ctrlreq.payload = respbuf;
   8109e:	4b1e      	ldr	r3, [pc, #120]	; (81118 <main_setup_in_received+0x128>)
   810a0:	4a25      	ldr	r2, [pc, #148]	; (81138 <main_setup_in_received+0x148>)
   810a2:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   810a4:	687b      	ldr	r3, [r7, #4]
   810a6:	b29a      	uxth	r2, r3
   810a8:	4b1b      	ldr	r3, [pc, #108]	; (81118 <main_setup_in_received+0x128>)
   810aa:	819a      	strh	r2, [r3, #12]
        return true;
   810ac:	2301      	movs	r3, #1
   810ae:	e02e      	b.n	8110e <main_setup_in_received+0x11e>
        break;
    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   810b0:	4b21      	ldr	r3, [pc, #132]	; (81138 <main_setup_in_received+0x148>)
   810b2:	2201      	movs	r2, #1
   810b4:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   810b6:	4b20      	ldr	r3, [pc, #128]	; (81138 <main_setup_in_received+0x148>)
   810b8:	2201      	movs	r2, #1
   810ba:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   810bc:	4b1e      	ldr	r3, [pc, #120]	; (81138 <main_setup_in_received+0x148>)
   810be:	2200      	movs	r2, #0
   810c0:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   810c2:	4b15      	ldr	r3, [pc, #84]	; (81118 <main_setup_in_received+0x128>)
   810c4:	4a1c      	ldr	r2, [pc, #112]	; (81138 <main_setup_in_received+0x148>)
   810c6:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   810c8:	4b13      	ldr	r3, [pc, #76]	; (81118 <main_setup_in_received+0x128>)
   810ca:	2203      	movs	r2, #3
   810cc:	819a      	strh	r2, [r3, #12]
        return true;
   810ce:	2301      	movs	r3, #1
   810d0:	e01d      	b.n	8110e <main_setup_in_received+0x11e>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
<<<<<<< HEAD
   811d6:	2013      	movs	r0, #19
   811d8:	4b19      	ldr	r3, [pc, #100]	; (81240 <main_setup_in_received+0x14c>)
   811da:	4798      	blx	r3
   811dc:	4603      	mov	r3, r0
   811de:	2b00      	cmp	r3, #0
   811e0:	bf14      	ite	ne
   811e2:	2301      	movne	r3, #1
   811e4:	2300      	moveq	r3, #0
   811e6:	b2db      	uxtb	r3, r3
   811e8:	461a      	mov	r2, r3
   811ea:	4b14      	ldr	r3, [pc, #80]	; (8123c <main_setup_in_received+0x148>)
   811ec:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   811ee:	4b13      	ldr	r3, [pc, #76]	; (8123c <main_setup_in_received+0x148>)
   811f0:	2200      	movs	r2, #0
   811f2:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   811f4:	4b11      	ldr	r3, [pc, #68]	; (8123c <main_setup_in_received+0x148>)
   811f6:	2200      	movs	r2, #0
   811f8:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   811fa:	4b10      	ldr	r3, [pc, #64]	; (8123c <main_setup_in_received+0x148>)
   811fc:	2200      	movs	r2, #0
   811fe:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81200:	4b06      	ldr	r3, [pc, #24]	; (8121c <main_setup_in_received+0x128>)
   81202:	4a0e      	ldr	r2, [pc, #56]	; (8123c <main_setup_in_received+0x148>)
   81204:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   81206:	4b05      	ldr	r3, [pc, #20]	; (8121c <main_setup_in_received+0x128>)
   81208:	2204      	movs	r2, #4
   8120a:	819a      	strh	r2, [r3, #12]
        return true;
   8120c:	2301      	movs	r3, #1
   8120e:	e000      	b.n	81212 <main_setup_in_received+0x11e>
        break;
    default:
        return false;
   81210:	2300      	movs	r3, #0
    }
    return false;
}
   81212:	4618      	mov	r0, r3
   81214:	3708      	adds	r7, #8
   81216:	46bd      	mov	sp, r7
   81218:	bd80      	pop	{r7, pc}
   8121a:	bf00      	nop
   8121c:	20001828 	.word	0x20001828
   81220:	20001254 	.word	0x20001254
   81224:	20001258 	.word	0x20001258
   81228:	00081395 	.word	0x00081395
   8122c:	0008133d 	.word	0x0008133d
   81230:	40090000 	.word	0x40090000
   81234:	00081715 	.word	0x00081715
   81238:	00081ba5 	.word	0x00081ba5
   8123c:	2000125c 	.word	0x2000125c
   81240:	000822e9 	.word	0x000822e9

00081244 <main_vendor_bulk_in_received>:
=======
   810d2:	2007      	movs	r0, #7
   810d4:	4b19      	ldr	r3, [pc, #100]	; (8113c <main_setup_in_received+0x14c>)
   810d6:	4798      	blx	r3
   810d8:	4603      	mov	r3, r0
   810da:	2b00      	cmp	r3, #0
   810dc:	bf14      	ite	ne
   810de:	2301      	movne	r3, #1
   810e0:	2300      	moveq	r3, #0
   810e2:	b2db      	uxtb	r3, r3
   810e4:	461a      	mov	r2, r3
   810e6:	4b14      	ldr	r3, [pc, #80]	; (81138 <main_setup_in_received+0x148>)
   810e8:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   810ea:	4b13      	ldr	r3, [pc, #76]	; (81138 <main_setup_in_received+0x148>)
   810ec:	2200      	movs	r2, #0
   810ee:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   810f0:	4b11      	ldr	r3, [pc, #68]	; (81138 <main_setup_in_received+0x148>)
   810f2:	2200      	movs	r2, #0
   810f4:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   810f6:	4b10      	ldr	r3, [pc, #64]	; (81138 <main_setup_in_received+0x148>)
   810f8:	2200      	movs	r2, #0
   810fa:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   810fc:	4b06      	ldr	r3, [pc, #24]	; (81118 <main_setup_in_received+0x128>)
   810fe:	4a0e      	ldr	r2, [pc, #56]	; (81138 <main_setup_in_received+0x148>)
   81100:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   81102:	4b05      	ldr	r3, [pc, #20]	; (81118 <main_setup_in_received+0x128>)
   81104:	2204      	movs	r2, #4
   81106:	819a      	strh	r2, [r3, #12]
        return true;
   81108:	2301      	movs	r3, #1
   8110a:	e000      	b.n	8110e <main_setup_in_received+0x11e>
        break;
    default:
        return false;
   8110c:	2300      	movs	r3, #0
    }
    return false;
}
   8110e:	4618      	mov	r0, r3
   81110:	3708      	adds	r7, #8
   81112:	46bd      	mov	sp, r7
   81114:	bd80      	pop	{r7, pc}
   81116:	bf00      	nop
   81118:	20001810 	.word	0x20001810
   8111c:	2000124c 	.word	0x2000124c
   81120:	20001250 	.word	0x20001250
   81124:	00081291 	.word	0x00081291
   81128:	00081239 	.word	0x00081239
   8112c:	40090000 	.word	0x40090000
   81130:	00081611 	.word	0x00081611
   81134:	00081aa1 	.word	0x00081aa1
   81138:	20001254 	.word	0x20001254
   8113c:	00084c25 	.word	0x00084c25

00081140 <main_vendor_bulk_in_received>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
<<<<<<< HEAD
   81244:	b580      	push	{r7, lr}
   81246:	b082      	sub	sp, #8
   81248:	af00      	add	r7, sp, #0
   8124a:	4603      	mov	r3, r0
   8124c:	6039      	str	r1, [r7, #0]
   8124e:	71fb      	strb	r3, [r7, #7]
   81250:	4613      	mov	r3, r2
   81252:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81254:	79fb      	ldrb	r3, [r7, #7]
   81256:	2b00      	cmp	r3, #0
   81258:	d108      	bne.n	8126c <main_vendor_bulk_in_received+0x28>
=======
   81140:	b580      	push	{r7, lr}
   81142:	b082      	sub	sp, #8
   81144:	af00      	add	r7, sp, #0
   81146:	4603      	mov	r3, r0
   81148:	6039      	str	r1, [r7, #0]
   8114a:	71fb      	strb	r3, [r7, #7]
   8114c:	4613      	mov	r3, r2
   8114e:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81150:	79fb      	ldrb	r3, [r7, #7]
   81152:	2b00      	cmp	r3, #0
   81154:	d108      	bne.n	81168 <main_vendor_bulk_in_received+0x28>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
<<<<<<< HEAD
   8125a:	4b06      	ldr	r3, [pc, #24]	; (81274 <main_vendor_bulk_in_received+0x30>)
   8125c:	4798      	blx	r3
   8125e:	4603      	mov	r3, r0
   81260:	2b02      	cmp	r3, #2
   81262:	d104      	bne.n	8126e <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   81264:	2000      	movs	r0, #0
   81266:	4b04      	ldr	r3, [pc, #16]	; (81278 <main_vendor_bulk_in_received+0x34>)
   81268:	4798      	blx	r3
   8126a:	e000      	b.n	8126e <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   8126c:	bf00      	nop
    }
}
   8126e:	3708      	adds	r7, #8
   81270:	46bd      	mov	sp, r7
   81272:	bd80      	pop	{r7, pc}
   81274:	00081395 	.word	0x00081395
   81278:	0008133d 	.word	0x0008133d

0008127c <main_vendor_bulk_out_received>:
=======
   81156:	4b06      	ldr	r3, [pc, #24]	; (81170 <main_vendor_bulk_in_received+0x30>)
   81158:	4798      	blx	r3
   8115a:	4603      	mov	r3, r0
   8115c:	2b02      	cmp	r3, #2
   8115e:	d104      	bne.n	8116a <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   81160:	2000      	movs	r0, #0
   81162:	4b04      	ldr	r3, [pc, #16]	; (81174 <main_vendor_bulk_in_received+0x34>)
   81164:	4798      	blx	r3
   81166:	e000      	b.n	8116a <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   81168:	bf00      	nop
    }
}
   8116a:	3708      	adds	r7, #8
   8116c:	46bd      	mov	sp, r7
   8116e:	bd80      	pop	{r7, pc}
   81170:	00081291 	.word	0x00081291
   81174:	00081239 	.word	0x00081239

00081178 <main_vendor_bulk_out_received>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
<<<<<<< HEAD
   8127c:	b580      	push	{r7, lr}
   8127e:	b084      	sub	sp, #16
   81280:	af00      	add	r7, sp, #0
   81282:	4603      	mov	r3, r0
   81284:	6039      	str	r1, [r7, #0]
   81286:	71fb      	strb	r3, [r7, #7]
   81288:	4613      	mov	r3, r2
   8128a:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   8128c:	79fb      	ldrb	r3, [r7, #7]
   8128e:	2b00      	cmp	r3, #0
   81290:	d006      	beq.n	812a0 <main_vendor_bulk_out_received+0x24>
=======
   81178:	b580      	push	{r7, lr}
   8117a:	b084      	sub	sp, #16
   8117c:	af00      	add	r7, sp, #0
   8117e:	4603      	mov	r3, r0
   81180:	6039      	str	r1, [r7, #0]
   81182:	71fb      	strb	r3, [r7, #7]
   81184:	4613      	mov	r3, r2
   81186:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81188:	79fb      	ldrb	r3, [r7, #7]
   8118a:	2b00      	cmp	r3, #0
   8118c:	d006      	beq.n	8119c <main_vendor_bulk_out_received+0x24>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
<<<<<<< HEAD
   81292:	4a22      	ldr	r2, [pc, #136]	; (8131c <main_vendor_bulk_out_received+0xa0>)
   81294:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81298:	4821      	ldr	r0, [pc, #132]	; (81320 <main_vendor_bulk_out_received+0xa4>)
   8129a:	4b22      	ldr	r3, [pc, #136]	; (81324 <main_vendor_bulk_out_received+0xa8>)
   8129c:	4798      	blx	r3
=======
   8118e:	4a22      	ldr	r2, [pc, #136]	; (81218 <main_vendor_bulk_out_received+0xa0>)
   81190:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81194:	4821      	ldr	r0, [pc, #132]	; (8121c <main_vendor_bulk_out_received+0xa4>)
   81196:	4b22      	ldr	r3, [pc, #136]	; (81220 <main_vendor_bulk_out_received+0xa8>)
   81198:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
<<<<<<< HEAD
   8129e:	e039      	b.n	81314 <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   812a0:	4b21      	ldr	r3, [pc, #132]	; (81328 <main_vendor_bulk_out_received+0xac>)
   812a2:	781b      	ldrb	r3, [r3, #0]
   812a4:	2b00      	cmp	r3, #0
   812a6:	d11a      	bne.n	812de <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   812a8:	2300      	movs	r3, #0
   812aa:	60fb      	str	r3, [r7, #12]
   812ac:	e00b      	b.n	812c6 <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   812ae:	4b1f      	ldr	r3, [pc, #124]	; (8132c <main_vendor_bulk_out_received+0xb0>)
   812b0:	681a      	ldr	r2, [r3, #0]
   812b2:	68fb      	ldr	r3, [r7, #12]
   812b4:	4413      	add	r3, r2
   812b6:	491a      	ldr	r1, [pc, #104]	; (81320 <main_vendor_bulk_out_received+0xa4>)
   812b8:	68fa      	ldr	r2, [r7, #12]
   812ba:	440a      	add	r2, r1
   812bc:	7812      	ldrb	r2, [r2, #0]
   812be:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   812c0:	68fb      	ldr	r3, [r7, #12]
   812c2:	3301      	adds	r3, #1
   812c4:	60fb      	str	r3, [r7, #12]
   812c6:	68fa      	ldr	r2, [r7, #12]
   812c8:	683b      	ldr	r3, [r7, #0]
   812ca:	429a      	cmp	r2, r3
   812cc:	d3ef      	bcc.n	812ae <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   812ce:	4b18      	ldr	r3, [pc, #96]	; (81330 <main_vendor_bulk_out_received+0xb4>)
   812d0:	4798      	blx	r3
   812d2:	4603      	mov	r3, r0
   812d4:	2b04      	cmp	r3, #4
   812d6:	d117      	bne.n	81308 <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   812d8:	4b16      	ldr	r3, [pc, #88]	; (81334 <main_vendor_bulk_out_received+0xb8>)
   812da:	4798      	blx	r3
   812dc:	e014      	b.n	81308 <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   812de:	4b12      	ldr	r3, [pc, #72]	; (81328 <main_vendor_bulk_out_received+0xac>)
   812e0:	781b      	ldrb	r3, [r3, #0]
   812e2:	2b0a      	cmp	r3, #10
   812e4:	d110      	bne.n	81308 <main_vendor_bulk_out_received+0x8c>
=======
   8119a:	e039      	b.n	81210 <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   8119c:	4b21      	ldr	r3, [pc, #132]	; (81224 <main_vendor_bulk_out_received+0xac>)
   8119e:	781b      	ldrb	r3, [r3, #0]
   811a0:	2b00      	cmp	r3, #0
   811a2:	d11a      	bne.n	811da <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   811a4:	2300      	movs	r3, #0
   811a6:	60fb      	str	r3, [r7, #12]
   811a8:	e00b      	b.n	811c2 <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   811aa:	4b1f      	ldr	r3, [pc, #124]	; (81228 <main_vendor_bulk_out_received+0xb0>)
   811ac:	681a      	ldr	r2, [r3, #0]
   811ae:	68fb      	ldr	r3, [r7, #12]
   811b0:	4413      	add	r3, r2
   811b2:	491a      	ldr	r1, [pc, #104]	; (8121c <main_vendor_bulk_out_received+0xa4>)
   811b4:	68fa      	ldr	r2, [r7, #12]
   811b6:	440a      	add	r2, r1
   811b8:	7812      	ldrb	r2, [r2, #0]
   811ba:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   811bc:	68fb      	ldr	r3, [r7, #12]
   811be:	3301      	adds	r3, #1
   811c0:	60fb      	str	r3, [r7, #12]
   811c2:	68fa      	ldr	r2, [r7, #12]
   811c4:	683b      	ldr	r3, [r7, #0]
   811c6:	429a      	cmp	r2, r3
   811c8:	d3ef      	bcc.n	811aa <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   811ca:	4b18      	ldr	r3, [pc, #96]	; (8122c <main_vendor_bulk_out_received+0xb4>)
   811cc:	4798      	blx	r3
   811ce:	4603      	mov	r3, r0
   811d0:	2b04      	cmp	r3, #4
   811d2:	d117      	bne.n	81204 <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   811d4:	4b16      	ldr	r3, [pc, #88]	; (81230 <main_vendor_bulk_out_received+0xb8>)
   811d6:	4798      	blx	r3
   811d8:	e014      	b.n	81204 <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   811da:	4b12      	ldr	r3, [pc, #72]	; (81224 <main_vendor_bulk_out_received+0xac>)
   811dc:	781b      	ldrb	r3, [r3, #0]
   811de:	2b0a      	cmp	r3, #10
   811e0:	d110      	bne.n	81204 <main_vendor_bulk_out_received+0x8c>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
<<<<<<< HEAD
   812e6:	2300      	movs	r3, #0
   812e8:	60bb      	str	r3, [r7, #8]
   812ea:	e009      	b.n	81300 <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   812ec:	4a0c      	ldr	r2, [pc, #48]	; (81320 <main_vendor_bulk_out_received+0xa4>)
   812ee:	68bb      	ldr	r3, [r7, #8]
   812f0:	4413      	add	r3, r2
   812f2:	781b      	ldrb	r3, [r3, #0]
   812f4:	4618      	mov	r0, r3
   812f6:	4b10      	ldr	r3, [pc, #64]	; (81338 <main_vendor_bulk_out_received+0xbc>)
   812f8:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   812fa:	68bb      	ldr	r3, [r7, #8]
   812fc:	3301      	adds	r3, #1
   812fe:	60bb      	str	r3, [r7, #8]
   81300:	68ba      	ldr	r2, [r7, #8]
   81302:	683b      	ldr	r3, [r7, #0]
   81304:	429a      	cmp	r2, r3
   81306:	d3f1      	bcc.n	812ec <main_vendor_bulk_out_received+0x70>
=======
   811e2:	2300      	movs	r3, #0
   811e4:	60bb      	str	r3, [r7, #8]
   811e6:	e009      	b.n	811fc <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   811e8:	4a0c      	ldr	r2, [pc, #48]	; (8121c <main_vendor_bulk_out_received+0xa4>)
   811ea:	68bb      	ldr	r3, [r7, #8]
   811ec:	4413      	add	r3, r2
   811ee:	781b      	ldrb	r3, [r3, #0]
   811f0:	4618      	mov	r0, r3
   811f2:	4b10      	ldr	r3, [pc, #64]	; (81234 <main_vendor_bulk_out_received+0xbc>)
   811f4:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   811f6:	68bb      	ldr	r3, [r7, #8]
   811f8:	3301      	adds	r3, #1
   811fa:	60bb      	str	r3, [r7, #8]
   811fc:	68ba      	ldr	r2, [r7, #8]
   811fe:	683b      	ldr	r3, [r7, #0]
   81200:	429a      	cmp	r2, r3
   81202:	d3f1      	bcc.n	811e8 <main_vendor_bulk_out_received+0x70>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
<<<<<<< HEAD
   81308:	4a04      	ldr	r2, [pc, #16]	; (8131c <main_vendor_bulk_out_received+0xa0>)
   8130a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8130e:	4804      	ldr	r0, [pc, #16]	; (81320 <main_vendor_bulk_out_received+0xa4>)
   81310:	4b04      	ldr	r3, [pc, #16]	; (81324 <main_vendor_bulk_out_received+0xa8>)
   81312:	4798      	blx	r3
=======
   81204:	4a04      	ldr	r2, [pc, #16]	; (81218 <main_vendor_bulk_out_received+0xa0>)
   81206:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8120a:	4804      	ldr	r0, [pc, #16]	; (8121c <main_vendor_bulk_out_received+0xa4>)
   8120c:	4b04      	ldr	r3, [pc, #16]	; (81220 <main_vendor_bulk_out_received+0xa8>)
   8120e:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
<<<<<<< HEAD
   81314:	3710      	adds	r7, #16
   81316:	46bd      	mov	sp, r7
   81318:	bd80      	pop	{r7, pc}
   8131a:	bf00      	nop
   8131c:	0008127d 	.word	0x0008127d
   81320:	20000e10 	.word	0x20000e10
   81324:	00084655 	.word	0x00084655
   81328:	20001250 	.word	0x20001250
   8132c:	20000280 	.word	0x20000280
   81330:	00081395 	.word	0x00081395
   81334:	0008137d 	.word	0x0008137d
   81338:	00081561 	.word	0x00081561

0008133c <FPGA_setlock>:
=======
   81210:	3710      	adds	r7, #16
   81212:	46bd      	mov	sp, r7
   81214:	bd80      	pop	{r7, pc}
   81216:	bf00      	nop
   81218:	00081179 	.word	0x00081179
   8121c:	20000e08 	.word	0x20000e08
   81220:	000848f9 	.word	0x000848f9
   81224:	20001248 	.word	0x20001248
   81228:	20000280 	.word	0x20000280
   8122c:	00081291 	.word	0x00081291
   81230:	00081279 	.word	0x00081279
   81234:	0008145d 	.word	0x0008145d

00081238 <FPGA_setlock>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
<<<<<<< HEAD
   8133c:	b580      	push	{r7, lr}
   8133e:	b084      	sub	sp, #16
   81340:	af00      	add	r7, sp, #0
   81342:	4603      	mov	r3, r0
   81344:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   81346:	2300      	movs	r3, #0
   81348:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   8134a:	4b09      	ldr	r3, [pc, #36]	; (81370 <FPGA_setlock+0x34>)
   8134c:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   8134e:	4b09      	ldr	r3, [pc, #36]	; (81374 <FPGA_setlock+0x38>)
   81350:	781b      	ldrb	r3, [r3, #0]
   81352:	b2db      	uxtb	r3, r3
   81354:	2b00      	cmp	r3, #0
   81356:	d104      	bne.n	81362 <FPGA_setlock+0x26>
  {
    ret = 1;
   81358:	2301      	movs	r3, #1
   8135a:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   8135c:	4a05      	ldr	r2, [pc, #20]	; (81374 <FPGA_setlock+0x38>)
   8135e:	79fb      	ldrb	r3, [r7, #7]
   81360:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   81362:	4b05      	ldr	r3, [pc, #20]	; (81378 <FPGA_setlock+0x3c>)
   81364:	4798      	blx	r3
  return ret;
   81366:	68fb      	ldr	r3, [r7, #12]
}
   81368:	4618      	mov	r0, r3
   8136a:	3710      	adds	r7, #16
   8136c:	46bd      	mov	sp, r7
   8136e:	bd80      	pop	{r7, pc}
   81370:	0008203d 	.word	0x0008203d
   81374:	2000129c 	.word	0x2000129c
   81378:	00082095 	.word	0x00082095

0008137c <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   8137c:	b480      	push	{r7}
   8137e:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   81380:	4b03      	ldr	r3, [pc, #12]	; (81390 <FPGA_releaselock+0x14>)
   81382:	2200      	movs	r2, #0
   81384:	701a      	strb	r2, [r3, #0]
}
   81386:	bf00      	nop
   81388:	46bd      	mov	sp, r7
   8138a:	bc80      	pop	{r7}
   8138c:	4770      	bx	lr
   8138e:	bf00      	nop
   81390:	2000129c 	.word	0x2000129c

00081394 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   81394:	b480      	push	{r7}
   81396:	af00      	add	r7, sp, #0
  return _fpga_locked;
   81398:	4b03      	ldr	r3, [pc, #12]	; (813a8 <FPGA_lockstatus+0x14>)
   8139a:	781b      	ldrb	r3, [r3, #0]
   8139c:	b2db      	uxtb	r3, r3
}
   8139e:	4618      	mov	r0, r3
   813a0:	46bd      	mov	sp, r7
   813a2:	bc80      	pop	{r7}
   813a4:	4770      	bx	lr
   813a6:	bf00      	nop
   813a8:	2000129c 	.word	0x2000129c

000813ac <FPGA_setaddr>:
=======
   81238:	b580      	push	{r7, lr}
   8123a:	b084      	sub	sp, #16
   8123c:	af00      	add	r7, sp, #0
   8123e:	4603      	mov	r3, r0
   81240:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   81242:	2300      	movs	r3, #0
   81244:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   81246:	4b09      	ldr	r3, [pc, #36]	; (8126c <FPGA_setlock+0x34>)
   81248:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   8124a:	4b09      	ldr	r3, [pc, #36]	; (81270 <FPGA_setlock+0x38>)
   8124c:	781b      	ldrb	r3, [r3, #0]
   8124e:	b2db      	uxtb	r3, r3
   81250:	2b00      	cmp	r3, #0
   81252:	d104      	bne.n	8125e <FPGA_setlock+0x26>
  {
    ret = 1;
   81254:	2301      	movs	r3, #1
   81256:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   81258:	4a05      	ldr	r2, [pc, #20]	; (81270 <FPGA_setlock+0x38>)
   8125a:	79fb      	ldrb	r3, [r7, #7]
   8125c:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   8125e:	4b05      	ldr	r3, [pc, #20]	; (81274 <FPGA_setlock+0x3c>)
   81260:	4798      	blx	r3
  return ret;
   81262:	68fb      	ldr	r3, [r7, #12]
}
   81264:	4618      	mov	r0, r3
   81266:	3710      	adds	r7, #16
   81268:	46bd      	mov	sp, r7
   8126a:	bd80      	pop	{r7, pc}
   8126c:	00086405 	.word	0x00086405
   81270:	20001294 	.word	0x20001294
   81274:	0008645d 	.word	0x0008645d

00081278 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   81278:	b480      	push	{r7}
   8127a:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   8127c:	4b03      	ldr	r3, [pc, #12]	; (8128c <FPGA_releaselock+0x14>)
   8127e:	2200      	movs	r2, #0
   81280:	701a      	strb	r2, [r3, #0]
}
   81282:	bf00      	nop
   81284:	46bd      	mov	sp, r7
   81286:	bc80      	pop	{r7}
   81288:	4770      	bx	lr
   8128a:	bf00      	nop
   8128c:	20001294 	.word	0x20001294

00081290 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   81290:	b480      	push	{r7}
   81292:	af00      	add	r7, sp, #0
  return _fpga_locked;
   81294:	4b03      	ldr	r3, [pc, #12]	; (812a4 <FPGA_lockstatus+0x14>)
   81296:	781b      	ldrb	r3, [r3, #0]
   81298:	b2db      	uxtb	r3, r3
}
   8129a:	4618      	mov	r0, r3
   8129c:	46bd      	mov	sp, r7
   8129e:	bc80      	pop	{r7}
   812a0:	4770      	bx	lr
   812a2:	bf00      	nop
   812a4:	20001294 	.word	0x20001294

000812a8 <FPGA_setaddr>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
<<<<<<< HEAD
   813ac:	b580      	push	{r7, lr}
   813ae:	b082      	sub	sp, #8
   813b0:	af00      	add	r7, sp, #0
   813b2:	6078      	str	r0, [r7, #4]
  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
   813b4:	4b0c      	ldr	r3, [pc, #48]	; (813e8 <FPGA_setaddr+0x3c>)
   813b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   813b8:	f003 0240 	and.w	r2, r3, #64	; 0x40
   813bc:	687b      	ldr	r3, [r7, #4]
   813be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   813c2:	431a      	orrs	r2, r3
   813c4:	687b      	ldr	r3, [r7, #4]
   813c6:	005b      	lsls	r3, r3, #1
   813c8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   813cc:	4906      	ldr	r1, [pc, #24]	; (813e8 <FPGA_setaddr+0x3c>)
   813ce:	4313      	orrs	r3, r2
   813d0:	638b      	str	r3, [r1, #56]	; 0x38
  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   813d2:	2031      	movs	r0, #49	; 0x31
   813d4:	4b05      	ldr	r3, [pc, #20]	; (813ec <FPGA_setaddr+0x40>)
   813d6:	4798      	blx	r3
  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   813d8:	2031      	movs	r0, #49	; 0x31
   813da:	4b05      	ldr	r3, [pc, #20]	; (813f0 <FPGA_setaddr+0x44>)
   813dc:	4798      	blx	r3
}
   813de:	bf00      	nop
   813e0:	3708      	adds	r7, #8
   813e2:	46bd      	mov	sp, r7
   813e4:	bd80      	pop	{r7, pc}
   813e6:	bf00      	nop
   813e8:	400e0e00 	.word	0x400e0e00
   813ec:	00082349 	.word	0x00082349
   813f0:	00082319 	.word	0x00082319

000813f4 <osc_get_rate>:
{
   813f4:	b480      	push	{r7}
   813f6:	b083      	sub	sp, #12
   813f8:	af00      	add	r7, sp, #0
   813fa:	6078      	str	r0, [r7, #4]
   813fc:	687b      	ldr	r3, [r7, #4]
   813fe:	2b07      	cmp	r3, #7
   81400:	d823      	bhi.n	8144a <osc_get_rate+0x56>
   81402:	a201      	add	r2, pc, #4	; (adr r2, 81408 <osc_get_rate+0x14>)
   81404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81408:	00081429 	.word	0x00081429
   8140c:	0008142f 	.word	0x0008142f
   81410:	00081433 	.word	0x00081433
   81414:	00081437 	.word	0x00081437
   81418:	0008143b 	.word	0x0008143b
   8141c:	0008143f 	.word	0x0008143f
   81420:	00081443 	.word	0x00081443
   81424:	00081447 	.word	0x00081447
		return OSC_SLCK_32K_RC_HZ;
   81428:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8142c:	e00e      	b.n	8144c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   8142e:	2300      	movs	r3, #0
   81430:	e00c      	b.n	8144c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   81432:	2300      	movs	r3, #0
   81434:	e00a      	b.n	8144c <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   81436:	4b08      	ldr	r3, [pc, #32]	; (81458 <osc_get_rate+0x64>)
   81438:	e008      	b.n	8144c <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   8143a:	4b08      	ldr	r3, [pc, #32]	; (8145c <osc_get_rate+0x68>)
   8143c:	e006      	b.n	8144c <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   8143e:	4b08      	ldr	r3, [pc, #32]	; (81460 <osc_get_rate+0x6c>)
   81440:	e004      	b.n	8144c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   81442:	4b07      	ldr	r3, [pc, #28]	; (81460 <osc_get_rate+0x6c>)
   81444:	e002      	b.n	8144c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   81446:	4b06      	ldr	r3, [pc, #24]	; (81460 <osc_get_rate+0x6c>)
   81448:	e000      	b.n	8144c <osc_get_rate+0x58>
	return 0;
   8144a:	2300      	movs	r3, #0
}
   8144c:	4618      	mov	r0, r3
   8144e:	370c      	adds	r7, #12
   81450:	46bd      	mov	sp, r7
   81452:	bc80      	pop	{r7}
   81454:	4770      	bx	lr
   81456:	bf00      	nop
   81458:	003d0900 	.word	0x003d0900
   8145c:	007a1200 	.word	0x007a1200
   81460:	00b71b00 	.word	0x00b71b00

00081464 <sysclk_get_main_hz>:
=======
   812a8:	b580      	push	{r7, lr}
   812aa:	b082      	sub	sp, #8
   812ac:	af00      	add	r7, sp, #0
   812ae:	6078      	str	r0, [r7, #4]
  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
   812b0:	4b0c      	ldr	r3, [pc, #48]	; (812e4 <FPGA_setaddr+0x3c>)
   812b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   812b4:	f003 0240 	and.w	r2, r3, #64	; 0x40
   812b8:	687b      	ldr	r3, [r7, #4]
   812ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   812be:	431a      	orrs	r2, r3
   812c0:	687b      	ldr	r3, [r7, #4]
   812c2:	005b      	lsls	r3, r3, #1
   812c4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   812c8:	4906      	ldr	r1, [pc, #24]	; (812e4 <FPGA_setaddr+0x3c>)
   812ca:	4313      	orrs	r3, r2
   812cc:	638b      	str	r3, [r1, #56]	; 0x38
  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   812ce:	2031      	movs	r0, #49	; 0x31
   812d0:	4b05      	ldr	r3, [pc, #20]	; (812e8 <FPGA_setaddr+0x40>)
   812d2:	4798      	blx	r3
  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   812d4:	2031      	movs	r0, #49	; 0x31
   812d6:	4b05      	ldr	r3, [pc, #20]	; (812ec <FPGA_setaddr+0x44>)
   812d8:	4798      	blx	r3
}
   812da:	bf00      	nop
   812dc:	3708      	adds	r7, #8
   812de:	46bd      	mov	sp, r7
   812e0:	bd80      	pop	{r7, pc}
   812e2:	bf00      	nop
   812e4:	400e0e00 	.word	0x400e0e00
   812e8:	00084c85 	.word	0x00084c85
   812ec:	00084c55 	.word	0x00084c55

000812f0 <osc_get_rate>:
{
   812f0:	b480      	push	{r7}
   812f2:	b083      	sub	sp, #12
   812f4:	af00      	add	r7, sp, #0
   812f6:	6078      	str	r0, [r7, #4]
   812f8:	687b      	ldr	r3, [r7, #4]
   812fa:	2b07      	cmp	r3, #7
   812fc:	d823      	bhi.n	81346 <osc_get_rate+0x56>
   812fe:	a201      	add	r2, pc, #4	; (adr r2, 81304 <osc_get_rate+0x14>)
   81300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81304:	00081325 	.word	0x00081325
   81308:	0008132b 	.word	0x0008132b
   8130c:	0008132f 	.word	0x0008132f
   81310:	00081333 	.word	0x00081333
   81314:	00081337 	.word	0x00081337
   81318:	0008133b 	.word	0x0008133b
   8131c:	0008133f 	.word	0x0008133f
   81320:	00081343 	.word	0x00081343
		return OSC_SLCK_32K_RC_HZ;
   81324:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81328:	e00e      	b.n	81348 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   8132a:	2300      	movs	r3, #0
   8132c:	e00c      	b.n	81348 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   8132e:	2300      	movs	r3, #0
   81330:	e00a      	b.n	81348 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   81332:	4b08      	ldr	r3, [pc, #32]	; (81354 <osc_get_rate+0x64>)
   81334:	e008      	b.n	81348 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   81336:	4b08      	ldr	r3, [pc, #32]	; (81358 <osc_get_rate+0x68>)
   81338:	e006      	b.n	81348 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   8133a:	4b08      	ldr	r3, [pc, #32]	; (8135c <osc_get_rate+0x6c>)
   8133c:	e004      	b.n	81348 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   8133e:	4b07      	ldr	r3, [pc, #28]	; (8135c <osc_get_rate+0x6c>)
   81340:	e002      	b.n	81348 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   81342:	4b06      	ldr	r3, [pc, #24]	; (8135c <osc_get_rate+0x6c>)
   81344:	e000      	b.n	81348 <osc_get_rate+0x58>
	return 0;
   81346:	2300      	movs	r3, #0
}
   81348:	4618      	mov	r0, r3
   8134a:	370c      	adds	r7, #12
   8134c:	46bd      	mov	sp, r7
   8134e:	bc80      	pop	{r7}
   81350:	4770      	bx	lr
   81352:	bf00      	nop
   81354:	003d0900 	.word	0x003d0900
   81358:	007a1200 	.word	0x007a1200
   8135c:	00b71b00 	.word	0x00b71b00

00081360 <sysclk_get_main_hz>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
<<<<<<< HEAD
   81464:	b580      	push	{r7, lr}
   81466:	af00      	add	r7, sp, #0
=======
   81360:	b580      	push	{r7, lr}
   81362:	af00      	add	r7, sp, #0
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
<<<<<<< HEAD
   81468:	2006      	movs	r0, #6
   8146a:	4b03      	ldr	r3, [pc, #12]	; (81478 <sysclk_get_main_hz+0x14>)
   8146c:	4798      	blx	r3
   8146e:	4603      	mov	r3, r0
   81470:	011b      	lsls	r3, r3, #4
=======
   81364:	2006      	movs	r0, #6
   81366:	4b03      	ldr	r3, [pc, #12]	; (81374 <sysclk_get_main_hz+0x14>)
   81368:	4798      	blx	r3
   8136a:	4603      	mov	r3, r0
   8136c:	011b      	lsls	r3, r3, #4
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
<<<<<<< HEAD
   81472:	4618      	mov	r0, r3
   81474:	bd80      	pop	{r7, pc}
   81476:	bf00      	nop
   81478:	000813f5 	.word	0x000813f5

0008147c <sysclk_get_cpu_hz>:
=======
   8136e:	4618      	mov	r0, r3
   81370:	bd80      	pop	{r7, pc}
   81372:	bf00      	nop
   81374:	000812f1 	.word	0x000812f1

00081378 <sysclk_get_cpu_hz>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
<<<<<<< HEAD
   8147c:	b580      	push	{r7, lr}
   8147e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   81480:	4b02      	ldr	r3, [pc, #8]	; (8148c <sysclk_get_cpu_hz+0x10>)
   81482:	4798      	blx	r3
   81484:	4603      	mov	r3, r0
   81486:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81488:	4618      	mov	r0, r3
   8148a:	bd80      	pop	{r7, pc}
   8148c:	00081465 	.word	0x00081465

00081490 <sysclk_enable_peripheral_clock>:
=======
   81378:	b580      	push	{r7, lr}
   8137a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8137c:	4b02      	ldr	r3, [pc, #8]	; (81388 <sysclk_get_cpu_hz+0x10>)
   8137e:	4798      	blx	r3
   81380:	4603      	mov	r3, r0
   81382:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81384:	4618      	mov	r0, r3
   81386:	bd80      	pop	{r7, pc}
   81388:	00081361 	.word	0x00081361

0008138c <sysclk_enable_peripheral_clock>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
<<<<<<< HEAD
   81490:	b580      	push	{r7, lr}
   81492:	b082      	sub	sp, #8
   81494:	af00      	add	r7, sp, #0
   81496:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81498:	6878      	ldr	r0, [r7, #4]
   8149a:	4b03      	ldr	r3, [pc, #12]	; (814a8 <sysclk_enable_peripheral_clock+0x18>)
   8149c:	4798      	blx	r3
}
   8149e:	bf00      	nop
   814a0:	3708      	adds	r7, #8
   814a2:	46bd      	mov	sp, r7
   814a4:	bd80      	pop	{r7, pc}
   814a6:	bf00      	nop
   814a8:	000829dd 	.word	0x000829dd

000814ac <fpga_program_init>:
=======
   8138c:	b580      	push	{r7, lr}
   8138e:	b082      	sub	sp, #8
   81390:	af00      	add	r7, sp, #0
   81392:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81394:	6878      	ldr	r0, [r7, #4]
   81396:	4b03      	ldr	r3, [pc, #12]	; (813a4 <sysclk_enable_peripheral_clock+0x18>)
   81398:	4798      	blx	r3
}
   8139a:	bf00      	nop
   8139c:	3708      	adds	r7, #8
   8139e:	46bd      	mov	sp, r7
   813a0:	bd80      	pop	{r7, pc}
   813a2:	bf00      	nop
   813a4:	000846c5 	.word	0x000846c5

000813a8 <fpga_program_init>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
<<<<<<< HEAD
   814ac:	b580      	push	{r7, lr}
   814ae:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   814b0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   814b4:	2014      	movs	r0, #20
   814b6:	4b03      	ldr	r3, [pc, #12]	; (814c4 <fpga_program_init+0x18>)
   814b8:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   814ba:	2014      	movs	r0, #20
   814bc:	4b02      	ldr	r3, [pc, #8]	; (814c8 <fpga_program_init+0x1c>)
   814be:	4798      	blx	r3
}
   814c0:	bf00      	nop
   814c2:	bd80      	pop	{r7, pc}
   814c4:	00082379 	.word	0x00082379
   814c8:	00082319 	.word	0x00082319

000814cc <fpga_program_setup1>:
=======
   813a8:	b580      	push	{r7, lr}
   813aa:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   813ac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   813b0:	2019      	movs	r0, #25
   813b2:	4b03      	ldr	r3, [pc, #12]	; (813c0 <fpga_program_init+0x18>)
   813b4:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   813b6:	2019      	movs	r0, #25
   813b8:	4b02      	ldr	r3, [pc, #8]	; (813c4 <fpga_program_init+0x1c>)
   813ba:	4798      	blx	r3
}
   813bc:	bf00      	nop
   813be:	bd80      	pop	{r7, pc}
   813c0:	00084cb5 	.word	0x00084cb5
   813c4:	00084c55 	.word	0x00084c55

000813c8 <fpga_program_setup1>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
<<<<<<< HEAD
   814cc:	b580      	push	{r7, lr}
   814ce:	b084      	sub	sp, #16
   814d0:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   814d2:	2014      	movs	r0, #20
   814d4:	4b14      	ldr	r3, [pc, #80]	; (81528 <fpga_program_setup1+0x5c>)
   814d6:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   814d8:	4b14      	ldr	r3, [pc, #80]	; (8152c <fpga_program_setup1+0x60>)
   814da:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   814dc:	23c0      	movs	r3, #192	; 0xc0
   814de:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   814e0:	2300      	movs	r3, #0
   814e2:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   814e4:	2300      	movs	r3, #0
   814e6:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   814e8:	200d      	movs	r0, #13
   814ea:	4b11      	ldr	r3, [pc, #68]	; (81530 <fpga_program_setup1+0x64>)
   814ec:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   814ee:	4b11      	ldr	r3, [pc, #68]	; (81534 <fpga_program_setup1+0x68>)
   814f0:	4798      	blx	r3
   814f2:	4602      	mov	r2, r0
   814f4:	463b      	mov	r3, r7
   814f6:	4619      	mov	r1, r3
   814f8:	480f      	ldr	r0, [pc, #60]	; (81538 <fpga_program_setup1+0x6c>)
   814fa:	4b10      	ldr	r3, [pc, #64]	; (8153c <fpga_program_setup1+0x70>)
   814fc:	4798      	blx	r3
    FPGA_DO_SETUP();
   814fe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81502:	2012      	movs	r0, #18
   81504:	4b0e      	ldr	r3, [pc, #56]	; (81540 <fpga_program_setup1+0x74>)
   81506:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   81508:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8150c:	2011      	movs	r0, #17
   8150e:	4b0c      	ldr	r3, [pc, #48]	; (81540 <fpga_program_setup1+0x74>)
   81510:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   81512:	4b0c      	ldr	r3, [pc, #48]	; (81544 <fpga_program_setup1+0x78>)
   81514:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   81518:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   8151a:	4807      	ldr	r0, [pc, #28]	; (81538 <fpga_program_setup1+0x6c>)
   8151c:	4b0a      	ldr	r3, [pc, #40]	; (81548 <fpga_program_setup1+0x7c>)
   8151e:	4798      	blx	r3
}
   81520:	bf00      	nop
   81522:	3710      	adds	r7, #16
   81524:	46bd      	mov	sp, r7
   81526:	bd80      	pop	{r7, pc}
   81528:	00082349 	.word	0x00082349
   8152c:	00989680 	.word	0x00989680
   81530:	00081491 	.word	0x00081491
   81534:	0008147d 	.word	0x0008147d
   81538:	40090000 	.word	0x40090000
   8153c:	0008648d 	.word	0x0008648d
   81540:	00082379 	.word	0x00082379
   81544:	400e0c00 	.word	0x400e0c00
   81548:	0008659d 	.word	0x0008659d

0008154c <fpga_program_setup2>:
=======
   813c8:	b580      	push	{r7, lr}
   813ca:	b084      	sub	sp, #16
   813cc:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   813ce:	2019      	movs	r0, #25
   813d0:	4b14      	ldr	r3, [pc, #80]	; (81424 <fpga_program_setup1+0x5c>)
   813d2:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   813d4:	4b14      	ldr	r3, [pc, #80]	; (81428 <fpga_program_setup1+0x60>)
   813d6:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   813d8:	23c0      	movs	r3, #192	; 0xc0
   813da:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   813dc:	2300      	movs	r3, #0
   813de:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   813e0:	2300      	movs	r3, #0
   813e2:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   813e4:	200d      	movs	r0, #13
   813e6:	4b11      	ldr	r3, [pc, #68]	; (8142c <fpga_program_setup1+0x64>)
   813e8:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   813ea:	4b11      	ldr	r3, [pc, #68]	; (81430 <fpga_program_setup1+0x68>)
   813ec:	4798      	blx	r3
   813ee:	4602      	mov	r2, r0
   813f0:	463b      	mov	r3, r7
   813f2:	4619      	mov	r1, r3
   813f4:	480f      	ldr	r0, [pc, #60]	; (81434 <fpga_program_setup1+0x6c>)
   813f6:	4b10      	ldr	r3, [pc, #64]	; (81438 <fpga_program_setup1+0x70>)
   813f8:	4798      	blx	r3
    FPGA_DO_SETUP();
   813fa:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   813fe:	2012      	movs	r0, #18
   81400:	4b0e      	ldr	r3, [pc, #56]	; (8143c <fpga_program_setup1+0x74>)
   81402:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   81404:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81408:	2011      	movs	r0, #17
   8140a:	4b0c      	ldr	r3, [pc, #48]	; (8143c <fpga_program_setup1+0x74>)
   8140c:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   8140e:	4b0c      	ldr	r3, [pc, #48]	; (81440 <fpga_program_setup1+0x78>)
   81410:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   81414:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   81416:	4807      	ldr	r0, [pc, #28]	; (81434 <fpga_program_setup1+0x6c>)
   81418:	4b0a      	ldr	r3, [pc, #40]	; (81444 <fpga_program_setup1+0x7c>)
   8141a:	4798      	blx	r3
}
   8141c:	bf00      	nop
   8141e:	3710      	adds	r7, #16
   81420:	46bd      	mov	sp, r7
   81422:	bd80      	pop	{r7, pc}
   81424:	00084c85 	.word	0x00084c85
   81428:	00989680 	.word	0x00989680
   8142c:	0008138d 	.word	0x0008138d
   81430:	00081379 	.word	0x00081379
   81434:	40090000 	.word	0x40090000
   81438:	00081e1d 	.word	0x00081e1d
   8143c:	00084cb5 	.word	0x00084cb5
   81440:	400e0c00 	.word	0x400e0c00
   81444:	00081f2d 	.word	0x00081f2d

00081448 <fpga_program_setup2>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
<<<<<<< HEAD
   8154c:	b580      	push	{r7, lr}
   8154e:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   81550:	2014      	movs	r0, #20
   81552:	4b02      	ldr	r3, [pc, #8]	; (8155c <fpga_program_setup2+0x10>)
   81554:	4798      	blx	r3
}
   81556:	bf00      	nop
   81558:	bd80      	pop	{r7, pc}
   8155a:	bf00      	nop
   8155c:	00082319 	.word	0x00082319

00081560 <fpga_program_sendbyte>:
=======
   81448:	b580      	push	{r7, lr}
   8144a:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   8144c:	2019      	movs	r0, #25
   8144e:	4b02      	ldr	r3, [pc, #8]	; (81458 <fpga_program_setup2+0x10>)
   81450:	4798      	blx	r3
}
   81452:	bf00      	nop
   81454:	bd80      	pop	{r7, pc}
   81456:	bf00      	nop
   81458:	00084c55 	.word	0x00084c55

0008145c <fpga_program_sendbyte>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
<<<<<<< HEAD
   81560:	b580      	push	{r7, lr}
   81562:	b082      	sub	sp, #8
   81564:	af00      	add	r7, sp, #0
   81566:	4603      	mov	r3, r0
   81568:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   8156a:	79fb      	ldrb	r3, [r7, #7]
   8156c:	4619      	mov	r1, r3
   8156e:	4803      	ldr	r0, [pc, #12]	; (8157c <fpga_program_sendbyte+0x1c>)
   81570:	4b03      	ldr	r3, [pc, #12]	; (81580 <fpga_program_sendbyte+0x20>)
   81572:	4798      	blx	r3
}
   81574:	bf00      	nop
   81576:	3708      	adds	r7, #8
   81578:	46bd      	mov	sp, r7
   8157a:	bd80      	pop	{r7, pc}
   8157c:	40090000 	.word	0x40090000
   81580:	000866c3 	.word	0x000866c3

00081584 <NVIC_EnableIRQ>:
=======
   8145c:	b580      	push	{r7, lr}
   8145e:	b082      	sub	sp, #8
   81460:	af00      	add	r7, sp, #0
   81462:	4603      	mov	r3, r0
   81464:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   81466:	79fb      	ldrb	r3, [r7, #7]
   81468:	4619      	mov	r1, r3
   8146a:	4803      	ldr	r0, [pc, #12]	; (81478 <fpga_program_sendbyte+0x1c>)
   8146c:	4b03      	ldr	r3, [pc, #12]	; (8147c <fpga_program_sendbyte+0x20>)
   8146e:	4798      	blx	r3
}
   81470:	bf00      	nop
   81472:	3708      	adds	r7, #8
   81474:	46bd      	mov	sp, r7
   81476:	bd80      	pop	{r7, pc}
   81478:	40090000 	.word	0x40090000
   8147c:	00082053 	.word	0x00082053

00081480 <NVIC_EnableIRQ>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
   81584:	b480      	push	{r7}
   81586:	b083      	sub	sp, #12
   81588:	af00      	add	r7, sp, #0
   8158a:	4603      	mov	r3, r0
   8158c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8158e:	79fb      	ldrb	r3, [r7, #7]
   81590:	f003 031f 	and.w	r3, r3, #31
   81594:	2201      	movs	r2, #1
   81596:	fa02 f103 	lsl.w	r1, r2, r3
   8159a:	4a05      	ldr	r2, [pc, #20]	; (815b0 <NVIC_EnableIRQ+0x2c>)
   8159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   815a0:	095b      	lsrs	r3, r3, #5
   815a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   815a6:	bf00      	nop
   815a8:	370c      	adds	r7, #12
   815aa:	46bd      	mov	sp, r7
   815ac:	bc80      	pop	{r7}
   815ae:	4770      	bx	lr
   815b0:	e000e100 	.word	0xe000e100

000815b4 <NVIC_ClearPendingIRQ>:
=======
   81480:	b480      	push	{r7}
   81482:	b083      	sub	sp, #12
   81484:	af00      	add	r7, sp, #0
   81486:	4603      	mov	r3, r0
   81488:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8148a:	79fb      	ldrb	r3, [r7, #7]
   8148c:	f003 031f 	and.w	r3, r3, #31
   81490:	2201      	movs	r2, #1
   81492:	fa02 f103 	lsl.w	r1, r2, r3
   81496:	4a05      	ldr	r2, [pc, #20]	; (814ac <NVIC_EnableIRQ+0x2c>)
   81498:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8149c:	095b      	lsrs	r3, r3, #5
   8149e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   814a2:	bf00      	nop
   814a4:	370c      	adds	r7, #12
   814a6:	46bd      	mov	sp, r7
   814a8:	bc80      	pop	{r7}
   814aa:	4770      	bx	lr
   814ac:	e000e100 	.word	0xe000e100

000814b0 <NVIC_ClearPendingIRQ>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
   815b4:	b480      	push	{r7}
   815b6:	b083      	sub	sp, #12
   815b8:	af00      	add	r7, sp, #0
   815ba:	4603      	mov	r3, r0
   815bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   815be:	79fb      	ldrb	r3, [r7, #7]
   815c0:	f003 031f 	and.w	r3, r3, #31
   815c4:	2201      	movs	r2, #1
   815c6:	fa02 f103 	lsl.w	r1, r2, r3
   815ca:	4a06      	ldr	r2, [pc, #24]	; (815e4 <NVIC_ClearPendingIRQ+0x30>)
   815cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   815d0:	095b      	lsrs	r3, r3, #5
   815d2:	3360      	adds	r3, #96	; 0x60
   815d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   815d8:	bf00      	nop
   815da:	370c      	adds	r7, #12
   815dc:	46bd      	mov	sp, r7
   815de:	bc80      	pop	{r7}
   815e0:	4770      	bx	lr
   815e2:	bf00      	nop
   815e4:	e000e100 	.word	0xe000e100

000815e8 <NVIC_SetPriority>:
=======
   814b0:	b480      	push	{r7}
   814b2:	b083      	sub	sp, #12
   814b4:	af00      	add	r7, sp, #0
   814b6:	4603      	mov	r3, r0
   814b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   814ba:	79fb      	ldrb	r3, [r7, #7]
   814bc:	f003 031f 	and.w	r3, r3, #31
   814c0:	2201      	movs	r2, #1
   814c2:	fa02 f103 	lsl.w	r1, r2, r3
   814c6:	4a06      	ldr	r2, [pc, #24]	; (814e0 <NVIC_ClearPendingIRQ+0x30>)
   814c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   814cc:	095b      	lsrs	r3, r3, #5
   814ce:	3360      	adds	r3, #96	; 0x60
   814d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   814d4:	bf00      	nop
   814d6:	370c      	adds	r7, #12
   814d8:	46bd      	mov	sp, r7
   814da:	bc80      	pop	{r7}
   814dc:	4770      	bx	lr
   814de:	bf00      	nop
   814e0:	e000e100 	.word	0xe000e100

000814e4 <NVIC_SetPriority>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
   815e8:	b480      	push	{r7}
   815ea:	b083      	sub	sp, #12
   815ec:	af00      	add	r7, sp, #0
   815ee:	4603      	mov	r3, r0
   815f0:	6039      	str	r1, [r7, #0]
   815f2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   815f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   815f8:	2b00      	cmp	r3, #0
   815fa:	da0b      	bge.n	81614 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   815fc:	683b      	ldr	r3, [r7, #0]
   815fe:	b2da      	uxtb	r2, r3
   81600:	490c      	ldr	r1, [pc, #48]	; (81634 <NVIC_SetPriority+0x4c>)
   81602:	79fb      	ldrb	r3, [r7, #7]
   81604:	f003 030f 	and.w	r3, r3, #15
   81608:	3b04      	subs	r3, #4
   8160a:	0112      	lsls	r2, r2, #4
   8160c:	b2d2      	uxtb	r2, r2
   8160e:	440b      	add	r3, r1
   81610:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   81612:	e009      	b.n	81628 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81614:	683b      	ldr	r3, [r7, #0]
   81616:	b2da      	uxtb	r2, r3
   81618:	4907      	ldr	r1, [pc, #28]	; (81638 <NVIC_SetPriority+0x50>)
   8161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8161e:	0112      	lsls	r2, r2, #4
   81620:	b2d2      	uxtb	r2, r2
   81622:	440b      	add	r3, r1
   81624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81628:	bf00      	nop
   8162a:	370c      	adds	r7, #12
   8162c:	46bd      	mov	sp, r7
   8162e:	bc80      	pop	{r7}
   81630:	4770      	bx	lr
   81632:	bf00      	nop
   81634:	e000ed00 	.word	0xe000ed00
   81638:	e000e100 	.word	0xe000e100

0008163c <osc_get_rate>:
{
   8163c:	b480      	push	{r7}
   8163e:	b083      	sub	sp, #12
   81640:	af00      	add	r7, sp, #0
   81642:	6078      	str	r0, [r7, #4]
   81644:	687b      	ldr	r3, [r7, #4]
   81646:	2b07      	cmp	r3, #7
   81648:	d823      	bhi.n	81692 <osc_get_rate+0x56>
   8164a:	a201      	add	r2, pc, #4	; (adr r2, 81650 <osc_get_rate+0x14>)
   8164c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81650:	00081671 	.word	0x00081671
   81654:	00081677 	.word	0x00081677
   81658:	0008167b 	.word	0x0008167b
   8165c:	0008167f 	.word	0x0008167f
   81660:	00081683 	.word	0x00081683
   81664:	00081687 	.word	0x00081687
   81668:	0008168b 	.word	0x0008168b
   8166c:	0008168f 	.word	0x0008168f
		return OSC_SLCK_32K_RC_HZ;
   81670:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81674:	e00e      	b.n	81694 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   81676:	2300      	movs	r3, #0
   81678:	e00c      	b.n	81694 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   8167a:	2300      	movs	r3, #0
   8167c:	e00a      	b.n	81694 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8167e:	4b08      	ldr	r3, [pc, #32]	; (816a0 <osc_get_rate+0x64>)
   81680:	e008      	b.n	81694 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   81682:	4b08      	ldr	r3, [pc, #32]	; (816a4 <osc_get_rate+0x68>)
   81684:	e006      	b.n	81694 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   81686:	4b08      	ldr	r3, [pc, #32]	; (816a8 <osc_get_rate+0x6c>)
   81688:	e004      	b.n	81694 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   8168a:	4b07      	ldr	r3, [pc, #28]	; (816a8 <osc_get_rate+0x6c>)
   8168c:	e002      	b.n	81694 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   8168e:	4b06      	ldr	r3, [pc, #24]	; (816a8 <osc_get_rate+0x6c>)
   81690:	e000      	b.n	81694 <osc_get_rate+0x58>
	return 0;
   81692:	2300      	movs	r3, #0
}
   81694:	4618      	mov	r0, r3
   81696:	370c      	adds	r7, #12
   81698:	46bd      	mov	sp, r7
   8169a:	bc80      	pop	{r7}
   8169c:	4770      	bx	lr
   8169e:	bf00      	nop
   816a0:	003d0900 	.word	0x003d0900
   816a4:	007a1200 	.word	0x007a1200
   816a8:	00b71b00 	.word	0x00b71b00

000816ac <sysclk_get_main_hz>:
{
   816ac:	b580      	push	{r7, lr}
   816ae:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   816b0:	2006      	movs	r0, #6
   816b2:	4b03      	ldr	r3, [pc, #12]	; (816c0 <sysclk_get_main_hz+0x14>)
   816b4:	4798      	blx	r3
   816b6:	4603      	mov	r3, r0
   816b8:	011b      	lsls	r3, r3, #4
}
   816ba:	4618      	mov	r0, r3
   816bc:	bd80      	pop	{r7, pc}
   816be:	bf00      	nop
   816c0:	0008163d 	.word	0x0008163d

000816c4 <sysclk_get_cpu_hz>:
{
   816c4:	b580      	push	{r7, lr}
   816c6:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   816c8:	4b02      	ldr	r3, [pc, #8]	; (816d4 <sysclk_get_cpu_hz+0x10>)
   816ca:	4798      	blx	r3
   816cc:	4603      	mov	r3, r0
   816ce:	085b      	lsrs	r3, r3, #1
}
   816d0:	4618      	mov	r0, r3
   816d2:	bd80      	pop	{r7, pc}
   816d4:	000816ad 	.word	0x000816ad

000816d8 <sysclk_enable_peripheral_clock>:
{
   816d8:	b580      	push	{r7, lr}
   816da:	b082      	sub	sp, #8
   816dc:	af00      	add	r7, sp, #0
   816de:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   816e0:	6878      	ldr	r0, [r7, #4]
   816e2:	4b03      	ldr	r3, [pc, #12]	; (816f0 <sysclk_enable_peripheral_clock+0x18>)
   816e4:	4798      	blx	r3
}
   816e6:	bf00      	nop
   816e8:	3708      	adds	r7, #8
   816ea:	46bd      	mov	sp, r7
   816ec:	bd80      	pop	{r7, pc}
   816ee:	bf00      	nop
   816f0:	000829dd 	.word	0x000829dd

000816f4 <usart0_enableIO>:
=======
   814e4:	b480      	push	{r7}
   814e6:	b083      	sub	sp, #12
   814e8:	af00      	add	r7, sp, #0
   814ea:	4603      	mov	r3, r0
   814ec:	6039      	str	r1, [r7, #0]
   814ee:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   814f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   814f4:	2b00      	cmp	r3, #0
   814f6:	da0b      	bge.n	81510 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   814f8:	683b      	ldr	r3, [r7, #0]
   814fa:	b2da      	uxtb	r2, r3
   814fc:	490c      	ldr	r1, [pc, #48]	; (81530 <NVIC_SetPriority+0x4c>)
   814fe:	79fb      	ldrb	r3, [r7, #7]
   81500:	f003 030f 	and.w	r3, r3, #15
   81504:	3b04      	subs	r3, #4
   81506:	0112      	lsls	r2, r2, #4
   81508:	b2d2      	uxtb	r2, r2
   8150a:	440b      	add	r3, r1
   8150c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   8150e:	e009      	b.n	81524 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81510:	683b      	ldr	r3, [r7, #0]
   81512:	b2da      	uxtb	r2, r3
   81514:	4907      	ldr	r1, [pc, #28]	; (81534 <NVIC_SetPriority+0x50>)
   81516:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8151a:	0112      	lsls	r2, r2, #4
   8151c:	b2d2      	uxtb	r2, r2
   8151e:	440b      	add	r3, r1
   81520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81524:	bf00      	nop
   81526:	370c      	adds	r7, #12
   81528:	46bd      	mov	sp, r7
   8152a:	bc80      	pop	{r7}
   8152c:	4770      	bx	lr
   8152e:	bf00      	nop
   81530:	e000ed00 	.word	0xe000ed00
   81534:	e000e100 	.word	0xe000e100

00081538 <osc_get_rate>:
{
   81538:	b480      	push	{r7}
   8153a:	b083      	sub	sp, #12
   8153c:	af00      	add	r7, sp, #0
   8153e:	6078      	str	r0, [r7, #4]
   81540:	687b      	ldr	r3, [r7, #4]
   81542:	2b07      	cmp	r3, #7
   81544:	d823      	bhi.n	8158e <osc_get_rate+0x56>
   81546:	a201      	add	r2, pc, #4	; (adr r2, 8154c <osc_get_rate+0x14>)
   81548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8154c:	0008156d 	.word	0x0008156d
   81550:	00081573 	.word	0x00081573
   81554:	00081577 	.word	0x00081577
   81558:	0008157b 	.word	0x0008157b
   8155c:	0008157f 	.word	0x0008157f
   81560:	00081583 	.word	0x00081583
   81564:	00081587 	.word	0x00081587
   81568:	0008158b 	.word	0x0008158b
		return OSC_SLCK_32K_RC_HZ;
   8156c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81570:	e00e      	b.n	81590 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   81572:	2300      	movs	r3, #0
   81574:	e00c      	b.n	81590 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   81576:	2300      	movs	r3, #0
   81578:	e00a      	b.n	81590 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8157a:	4b08      	ldr	r3, [pc, #32]	; (8159c <osc_get_rate+0x64>)
   8157c:	e008      	b.n	81590 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   8157e:	4b08      	ldr	r3, [pc, #32]	; (815a0 <osc_get_rate+0x68>)
   81580:	e006      	b.n	81590 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   81582:	4b08      	ldr	r3, [pc, #32]	; (815a4 <osc_get_rate+0x6c>)
   81584:	e004      	b.n	81590 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   81586:	4b07      	ldr	r3, [pc, #28]	; (815a4 <osc_get_rate+0x6c>)
   81588:	e002      	b.n	81590 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   8158a:	4b06      	ldr	r3, [pc, #24]	; (815a4 <osc_get_rate+0x6c>)
   8158c:	e000      	b.n	81590 <osc_get_rate+0x58>
	return 0;
   8158e:	2300      	movs	r3, #0
}
   81590:	4618      	mov	r0, r3
   81592:	370c      	adds	r7, #12
   81594:	46bd      	mov	sp, r7
   81596:	bc80      	pop	{r7}
   81598:	4770      	bx	lr
   8159a:	bf00      	nop
   8159c:	003d0900 	.word	0x003d0900
   815a0:	007a1200 	.word	0x007a1200
   815a4:	00b71b00 	.word	0x00b71b00

000815a8 <sysclk_get_main_hz>:
{
   815a8:	b580      	push	{r7, lr}
   815aa:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   815ac:	2006      	movs	r0, #6
   815ae:	4b03      	ldr	r3, [pc, #12]	; (815bc <sysclk_get_main_hz+0x14>)
   815b0:	4798      	blx	r3
   815b2:	4603      	mov	r3, r0
   815b4:	011b      	lsls	r3, r3, #4
}
   815b6:	4618      	mov	r0, r3
   815b8:	bd80      	pop	{r7, pc}
   815ba:	bf00      	nop
   815bc:	00081539 	.word	0x00081539

000815c0 <sysclk_get_cpu_hz>:
{
   815c0:	b580      	push	{r7, lr}
   815c2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   815c4:	4b02      	ldr	r3, [pc, #8]	; (815d0 <sysclk_get_cpu_hz+0x10>)
   815c6:	4798      	blx	r3
   815c8:	4603      	mov	r3, r0
   815ca:	085b      	lsrs	r3, r3, #1
}
   815cc:	4618      	mov	r0, r3
   815ce:	bd80      	pop	{r7, pc}
   815d0:	000815a9 	.word	0x000815a9

000815d4 <sysclk_enable_peripheral_clock>:
{
   815d4:	b580      	push	{r7, lr}
   815d6:	b082      	sub	sp, #8
   815d8:	af00      	add	r7, sp, #0
   815da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   815dc:	6878      	ldr	r0, [r7, #4]
   815de:	4b03      	ldr	r3, [pc, #12]	; (815ec <sysclk_enable_peripheral_clock+0x18>)
   815e0:	4798      	blx	r3
}
   815e2:	bf00      	nop
   815e4:	3708      	adds	r7, #8
   815e6:	46bd      	mov	sp, r7
   815e8:	bd80      	pop	{r7, pc}
   815ea:	bf00      	nop
   815ec:	000846c5 	.word	0x000846c5

000815f0 <usart0_enableIO>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
tcirc_buf rx1buf, tx1buf;
tcirc_buf rx2buf, tx2buf;
tcirc_buf rx3buf, tx3buf;

static inline void usart0_enableIO(void)
{
<<<<<<< HEAD
   816f4:	b580      	push	{r7, lr}
   816f6:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   816f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816fc:	2013      	movs	r0, #19
   816fe:	4b04      	ldr	r3, [pc, #16]	; (81710 <usart0_enableIO+0x1c>)
   81700:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81702:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81706:	2012      	movs	r0, #18
   81708:	4b01      	ldr	r3, [pc, #4]	; (81710 <usart0_enableIO+0x1c>)
   8170a:	4798      	blx	r3
}
   8170c:	bf00      	nop
   8170e:	bd80      	pop	{r7, pc}
   81710:	00082379 	.word	0x00082379

00081714 <ctrl_usart>:
=======
   815f0:	b580      	push	{r7, lr}
   815f2:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   815f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815f8:	2013      	movs	r0, #19
   815fa:	4b04      	ldr	r3, [pc, #16]	; (8160c <usart0_enableIO+0x1c>)
   815fc:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   815fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81602:	2012      	movs	r0, #18
   81604:	4b01      	ldr	r3, [pc, #4]	; (8160c <usart0_enableIO+0x1c>)
   81606:	4798      	blx	r3
}
   81608:	bf00      	nop
   8160a:	bd80      	pop	{r7, pc}
   8160c:	00084cb5 	.word	0x00084cb5

00081610 <ctrl_usart>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
<<<<<<< HEAD
   81714:	b580      	push	{r7, lr}
   81716:	b08a      	sub	sp, #40	; 0x28
   81718:	af00      	add	r7, sp, #0
   8171a:	6078      	str	r0, [r7, #4]
   8171c:	460b      	mov	r3, r1
   8171e:	70fb      	strb	r3, [r7, #3]
=======
   81610:	b580      	push	{r7, lr}
   81612:	b08a      	sub	sp, #40	; 0x28
   81614:	af00      	add	r7, sp, #0
   81616:	6078      	str	r0, [r7, #4]
   81618:	460b      	mov	r3, r1
   8161a:	70fb      	strb	r3, [r7, #3]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
<<<<<<< HEAD
   81720:	4b99      	ldr	r3, [pc, #612]	; (81988 <ctrl_usart+0x274>)
   81722:	885b      	ldrh	r3, [r3, #2]
   81724:	b2db      	uxtb	r3, r3
   81726:	3b10      	subs	r3, #16
   81728:	2b08      	cmp	r3, #8
   8172a:	f200 81cb 	bhi.w	81ac4 <ctrl_usart+0x3b0>
   8172e:	a201      	add	r2, pc, #4	; (adr r2, 81734 <ctrl_usart+0x20>)
   81730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81734:	00081759 	.word	0x00081759
   81738:	000818b1 	.word	0x000818b1
   8173c:	00081933 	.word	0x00081933
   81740:	00081ac5 	.word	0x00081ac5
   81744:	00081957 	.word	0x00081957
   81748:	00081ac5 	.word	0x00081ac5
   8174c:	00081ac5 	.word	0x00081ac5
   81750:	00081ac5 	.word	0x00081ac5
   81754:	00081a3f 	.word	0x00081a3f
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   81758:	78fb      	ldrb	r3, [r7, #3]
   8175a:	2b00      	cmp	r3, #0
   8175c:	d006      	beq.n	8176c <ctrl_usart+0x58>
				if (udd_g_ctrlreq.req.wLength == 4){
   8175e:	4b8a      	ldr	r3, [pc, #552]	; (81988 <ctrl_usart+0x274>)
   81760:	88db      	ldrh	r3, [r3, #6]
   81762:	2b04      	cmp	r3, #4
   81764:	f040 81a5 	bne.w	81ab2 <ctrl_usart+0x39e>
=======
   8161c:	4b99      	ldr	r3, [pc, #612]	; (81884 <ctrl_usart+0x274>)
   8161e:	885b      	ldrh	r3, [r3, #2]
   81620:	b2db      	uxtb	r3, r3
   81622:	3b10      	subs	r3, #16
   81624:	2b08      	cmp	r3, #8
   81626:	f200 81cb 	bhi.w	819c0 <ctrl_usart+0x3b0>
   8162a:	a201      	add	r2, pc, #4	; (adr r2, 81630 <ctrl_usart+0x20>)
   8162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81630:	00081655 	.word	0x00081655
   81634:	000817ad 	.word	0x000817ad
   81638:	0008182f 	.word	0x0008182f
   8163c:	000819c1 	.word	0x000819c1
   81640:	00081853 	.word	0x00081853
   81644:	000819c1 	.word	0x000819c1
   81648:	000819c1 	.word	0x000819c1
   8164c:	000819c1 	.word	0x000819c1
   81650:	0008193b 	.word	0x0008193b
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   81654:	78fb      	ldrb	r3, [r7, #3]
   81656:	2b00      	cmp	r3, #0
   81658:	d006      	beq.n	81668 <ctrl_usart+0x58>
				if (udd_g_ctrlreq.req.wLength == 4){
   8165a:	4b8a      	ldr	r3, [pc, #552]	; (81884 <ctrl_usart+0x274>)
   8165c:	88db      	ldrh	r3, [r3, #6]
   8165e:	2b04      	cmp	r3, #4
   81660:	f040 81a5 	bne.w	819ae <ctrl_usart+0x39e>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
					/*
					udd_g_ctrlreq.payload_size = 4;
					udd_g_ctrlreq.payload = ctrlbuffer;
					word2buf(ctrlbuffer, baud);
					*/
					return true;
<<<<<<< HEAD
   81768:	2301      	movs	r3, #1
   8176a:	e1ac      	b.n	81ac6 <ctrl_usart+0x3b2>
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   8176c:	4b86      	ldr	r3, [pc, #536]	; (81988 <ctrl_usart+0x274>)
   8176e:	88db      	ldrh	r3, [r3, #6]
   81770:	2b07      	cmp	r3, #7
   81772:	f040 8099 	bne.w	818a8 <ctrl_usart+0x194>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   81776:	4b84      	ldr	r3, [pc, #528]	; (81988 <ctrl_usart+0x274>)
   81778:	689b      	ldr	r3, [r3, #8]
   8177a:	681b      	ldr	r3, [r3, #0]
   8177c:	627b      	str	r3, [r7, #36]	; 0x24
					
						usartopts.baudrate = baud;
   8177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81780:	60fb      	str	r3, [r7, #12]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   81782:	4b81      	ldr	r3, [pc, #516]	; (81988 <ctrl_usart+0x274>)
   81784:	689b      	ldr	r3, [r3, #8]
   81786:	3304      	adds	r3, #4
   81788:	781b      	ldrb	r3, [r3, #0]
   8178a:	2b02      	cmp	r3, #2
   8178c:	d00d      	beq.n	817aa <ctrl_usart+0x96>
   8178e:	2b02      	cmp	r3, #2
   81790:	dc0f      	bgt.n	817b2 <ctrl_usart+0x9e>
   81792:	2b00      	cmp	r3, #0
   81794:	d002      	beq.n	8179c <ctrl_usart+0x88>
   81796:	2b01      	cmp	r3, #1
   81798:	d003      	beq.n	817a2 <ctrl_usart+0x8e>
   8179a:	e00a      	b.n	817b2 <ctrl_usart+0x9e>
							{
							case 0:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   8179c:	2300      	movs	r3, #0
   8179e:	61bb      	str	r3, [r7, #24]
								break;
   817a0:	e009      	b.n	817b6 <ctrl_usart+0xa2>
							case 1:
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   817a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   817a6:	61bb      	str	r3, [r7, #24]
								break;
   817a8:	e005      	b.n	817b6 <ctrl_usart+0xa2>
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   817aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   817ae:	61bb      	str	r3, [r7, #24]
								break;
   817b0:	e001      	b.n	817b6 <ctrl_usart+0xa2>
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   817b2:	2300      	movs	r3, #0
   817b4:	61bb      	str	r3, [r7, #24]
=======
   81664:	2301      	movs	r3, #1
   81666:	e1ac      	b.n	819c2 <ctrl_usart+0x3b2>
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   81668:	4b86      	ldr	r3, [pc, #536]	; (81884 <ctrl_usart+0x274>)
   8166a:	88db      	ldrh	r3, [r3, #6]
   8166c:	2b07      	cmp	r3, #7
   8166e:	f040 8099 	bne.w	817a4 <ctrl_usart+0x194>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   81672:	4b84      	ldr	r3, [pc, #528]	; (81884 <ctrl_usart+0x274>)
   81674:	689b      	ldr	r3, [r3, #8]
   81676:	681b      	ldr	r3, [r3, #0]
   81678:	627b      	str	r3, [r7, #36]	; 0x24
					
						usartopts.baudrate = baud;
   8167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8167c:	60fb      	str	r3, [r7, #12]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   8167e:	4b81      	ldr	r3, [pc, #516]	; (81884 <ctrl_usart+0x274>)
   81680:	689b      	ldr	r3, [r3, #8]
   81682:	3304      	adds	r3, #4
   81684:	781b      	ldrb	r3, [r3, #0]
   81686:	2b02      	cmp	r3, #2
   81688:	d00d      	beq.n	816a6 <ctrl_usart+0x96>
   8168a:	2b02      	cmp	r3, #2
   8168c:	dc0f      	bgt.n	816ae <ctrl_usart+0x9e>
   8168e:	2b00      	cmp	r3, #0
   81690:	d002      	beq.n	81698 <ctrl_usart+0x88>
   81692:	2b01      	cmp	r3, #1
   81694:	d003      	beq.n	8169e <ctrl_usart+0x8e>
   81696:	e00a      	b.n	816ae <ctrl_usart+0x9e>
							{
							case 0:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81698:	2300      	movs	r3, #0
   8169a:	61bb      	str	r3, [r7, #24]
								break;
   8169c:	e009      	b.n	816b2 <ctrl_usart+0xa2>
							case 1:
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   8169e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   816a2:	61bb      	str	r3, [r7, #24]
								break;
   816a4:	e005      	b.n	816b2 <ctrl_usart+0xa2>
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   816a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   816aa:	61bb      	str	r3, [r7, #24]
								break;
   816ac:	e001      	b.n	816b2 <ctrl_usart+0xa2>
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   816ae:	2300      	movs	r3, #0
   816b0:	61bb      	str	r3, [r7, #24]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
							}
					
						/* Parity */
						switch(udd_g_ctrlreq.payload[5])
<<<<<<< HEAD
   817b6:	4b74      	ldr	r3, [pc, #464]	; (81988 <ctrl_usart+0x274>)
   817b8:	689b      	ldr	r3, [r3, #8]
   817ba:	3305      	adds	r3, #5
   817bc:	781b      	ldrb	r3, [r3, #0]
   817be:	2b04      	cmp	r3, #4
   817c0:	d81f      	bhi.n	81802 <ctrl_usart+0xee>
   817c2:	a201      	add	r2, pc, #4	; (adr r2, 817c8 <ctrl_usart+0xb4>)
   817c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   817c8:	000817dd 	.word	0x000817dd
   817cc:	000817e5 	.word	0x000817e5
   817d0:	000817ed 	.word	0x000817ed
   817d4:	000817f3 	.word	0x000817f3
   817d8:	000817fb 	.word	0x000817fb
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   817dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   817e0:	617b      	str	r3, [r7, #20]
								break;
   817e2:	e011      	b.n	81808 <ctrl_usart+0xf4>
							case 1:
								usartopts.parity_type = US_MR_PAR_ODD;
   817e4:	f44f 7300 	mov.w	r3, #512	; 0x200
   817e8:	617b      	str	r3, [r7, #20]
								break;
   817ea:	e00d      	b.n	81808 <ctrl_usart+0xf4>
							case 2:
								usartopts.parity_type = US_MR_PAR_EVEN;
   817ec:	2300      	movs	r3, #0
   817ee:	617b      	str	r3, [r7, #20]
								break;
   817f0:	e00a      	b.n	81808 <ctrl_usart+0xf4>
							case 3:
								usartopts.parity_type = US_MR_PAR_MARK;
   817f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   817f6:	617b      	str	r3, [r7, #20]
								break;
   817f8:	e006      	b.n	81808 <ctrl_usart+0xf4>
							case 4:
								usartopts.parity_type = US_MR_PAR_SPACE;
   817fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
   817fe:	617b      	str	r3, [r7, #20]
								break;							
   81800:	e002      	b.n	81808 <ctrl_usart+0xf4>
							default:
								usartopts.parity_type = US_MR_PAR_NO;
   81802:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81806:	617b      	str	r3, [r7, #20]
=======
   816b2:	4b74      	ldr	r3, [pc, #464]	; (81884 <ctrl_usart+0x274>)
   816b4:	689b      	ldr	r3, [r3, #8]
   816b6:	3305      	adds	r3, #5
   816b8:	781b      	ldrb	r3, [r3, #0]
   816ba:	2b04      	cmp	r3, #4
   816bc:	d81f      	bhi.n	816fe <ctrl_usart+0xee>
   816be:	a201      	add	r2, pc, #4	; (adr r2, 816c4 <ctrl_usart+0xb4>)
   816c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   816c4:	000816d9 	.word	0x000816d9
   816c8:	000816e1 	.word	0x000816e1
   816cc:	000816e9 	.word	0x000816e9
   816d0:	000816ef 	.word	0x000816ef
   816d4:	000816f7 	.word	0x000816f7
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   816d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   816dc:	617b      	str	r3, [r7, #20]
								break;
   816de:	e011      	b.n	81704 <ctrl_usart+0xf4>
							case 1:
								usartopts.parity_type = US_MR_PAR_ODD;
   816e0:	f44f 7300 	mov.w	r3, #512	; 0x200
   816e4:	617b      	str	r3, [r7, #20]
								break;
   816e6:	e00d      	b.n	81704 <ctrl_usart+0xf4>
							case 2:
								usartopts.parity_type = US_MR_PAR_EVEN;
   816e8:	2300      	movs	r3, #0
   816ea:	617b      	str	r3, [r7, #20]
								break;
   816ec:	e00a      	b.n	81704 <ctrl_usart+0xf4>
							case 3:
								usartopts.parity_type = US_MR_PAR_MARK;
   816ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   816f2:	617b      	str	r3, [r7, #20]
								break;
   816f4:	e006      	b.n	81704 <ctrl_usart+0xf4>
							case 4:
								usartopts.parity_type = US_MR_PAR_SPACE;
   816f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   816fa:	617b      	str	r3, [r7, #20]
								break;							
   816fc:	e002      	b.n	81704 <ctrl_usart+0xf4>
							default:
								usartopts.parity_type = US_MR_PAR_NO;
   816fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81702:	617b      	str	r3, [r7, #20]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
							}
					
						/* Data Bits */
						switch(udd_g_ctrlreq.payload[6])
<<<<<<< HEAD
   81808:	4b5f      	ldr	r3, [pc, #380]	; (81988 <ctrl_usart+0x274>)
   8180a:	689b      	ldr	r3, [r3, #8]
   8180c:	3306      	adds	r3, #6
   8180e:	781b      	ldrb	r3, [r3, #0]
   81810:	2b07      	cmp	r3, #7
   81812:	d00c      	beq.n	8182e <ctrl_usart+0x11a>
   81814:	2b07      	cmp	r3, #7
   81816:	dc0d      	bgt.n	81834 <ctrl_usart+0x120>
   81818:	2b05      	cmp	r3, #5
   8181a:	d002      	beq.n	81822 <ctrl_usart+0x10e>
   8181c:	2b06      	cmp	r3, #6
   8181e:	d003      	beq.n	81828 <ctrl_usart+0x114>
   81820:	e008      	b.n	81834 <ctrl_usart+0x120>
							{
							case 5:
								usartopts.char_length = US_MR_CHRL_5_BIT;
   81822:	2300      	movs	r3, #0
   81824:	613b      	str	r3, [r7, #16]
								break;
   81826:	e007      	b.n	81838 <ctrl_usart+0x124>
							case 6:
								usartopts.char_length = US_MR_CHRL_6_BIT;
   81828:	2340      	movs	r3, #64	; 0x40
   8182a:	613b      	str	r3, [r7, #16]
								break;
   8182c:	e004      	b.n	81838 <ctrl_usart+0x124>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
   8182e:	2380      	movs	r3, #128	; 0x80
   81830:	613b      	str	r3, [r7, #16]
								break;					
   81832:	e001      	b.n	81838 <ctrl_usart+0x124>
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   81834:	23c0      	movs	r3, #192	; 0xc0
   81836:	613b      	str	r3, [r7, #16]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81838:	2300      	movs	r3, #0
   8183a:	61fb      	str	r3, [r7, #28]

						if (usart == USART0)
   8183c:	687b      	ldr	r3, [r7, #4]
   8183e:	4a53      	ldr	r2, [pc, #332]	; (8198c <ctrl_usart+0x278>)
   81840:	4293      	cmp	r3, r2
   81842:	d10c      	bne.n	8185e <ctrl_usart+0x14a>
						{
							sysclk_enable_peripheral_clock(ID_USART0);
   81844:	200d      	movs	r0, #13
   81846:	4b52      	ldr	r3, [pc, #328]	; (81990 <ctrl_usart+0x27c>)
   81848:	4798      	blx	r3
							init_circ_buf(&tx0buf);
   8184a:	4852      	ldr	r0, [pc, #328]	; (81994 <ctrl_usart+0x280>)
   8184c:	4b52      	ldr	r3, [pc, #328]	; (81998 <ctrl_usart+0x284>)
   8184e:	4798      	blx	r3
							init_circ_buf(&rx0buf);
   81850:	4852      	ldr	r0, [pc, #328]	; (8199c <ctrl_usart+0x288>)
   81852:	4b51      	ldr	r3, [pc, #324]	; (81998 <ctrl_usart+0x284>)
   81854:	4798      	blx	r3
							printf("Enabling USART0\n");
   81856:	4852      	ldr	r0, [pc, #328]	; (819a0 <ctrl_usart+0x28c>)
   81858:	4b52      	ldr	r3, [pc, #328]	; (819a4 <ctrl_usart+0x290>)
   8185a:	4798      	blx	r3
   8185c:	e01a      	b.n	81894 <ctrl_usart+0x180>
						} else if (usart == USART1)
   8185e:	687b      	ldr	r3, [r7, #4]
   81860:	4a51      	ldr	r2, [pc, #324]	; (819a8 <ctrl_usart+0x294>)
   81862:	4293      	cmp	r3, r2
   81864:	d109      	bne.n	8187a <ctrl_usart+0x166>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
   81866:	200e      	movs	r0, #14
   81868:	4b49      	ldr	r3, [pc, #292]	; (81990 <ctrl_usart+0x27c>)
   8186a:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   8186c:	484f      	ldr	r0, [pc, #316]	; (819ac <ctrl_usart+0x298>)
   8186e:	4b4a      	ldr	r3, [pc, #296]	; (81998 <ctrl_usart+0x284>)
   81870:	4798      	blx	r3
							init_circ_buf(&rx1buf);
   81872:	484f      	ldr	r0, [pc, #316]	; (819b0 <ctrl_usart+0x29c>)
   81874:	4b48      	ldr	r3, [pc, #288]	; (81998 <ctrl_usart+0x284>)
   81876:	4798      	blx	r3
   81878:	e00c      	b.n	81894 <ctrl_usart+0x180>
						} else if (usart == USART2)
   8187a:	687b      	ldr	r3, [r7, #4]
   8187c:	4a4d      	ldr	r2, [pc, #308]	; (819b4 <ctrl_usart+0x2a0>)
   8187e:	4293      	cmp	r3, r2
   81880:	d108      	bne.n	81894 <ctrl_usart+0x180>
						{
							sysclk_enable_peripheral_clock(ID_USART2);
   81882:	200f      	movs	r0, #15
   81884:	4b42      	ldr	r3, [pc, #264]	; (81990 <ctrl_usart+0x27c>)
   81886:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   81888:	484b      	ldr	r0, [pc, #300]	; (819b8 <ctrl_usart+0x2a4>)
   8188a:	4b43      	ldr	r3, [pc, #268]	; (81998 <ctrl_usart+0x284>)
   8188c:	4798      	blx	r3
							init_circ_buf(&rx2buf);
   8188e:	484b      	ldr	r0, [pc, #300]	; (819bc <ctrl_usart+0x2a8>)
   81890:	4b41      	ldr	r3, [pc, #260]	; (81998 <ctrl_usart+0x284>)
   81892:	4798      	blx	r3
=======
   81704:	4b5f      	ldr	r3, [pc, #380]	; (81884 <ctrl_usart+0x274>)
   81706:	689b      	ldr	r3, [r3, #8]
   81708:	3306      	adds	r3, #6
   8170a:	781b      	ldrb	r3, [r3, #0]
   8170c:	2b07      	cmp	r3, #7
   8170e:	d00c      	beq.n	8172a <ctrl_usart+0x11a>
   81710:	2b07      	cmp	r3, #7
   81712:	dc0d      	bgt.n	81730 <ctrl_usart+0x120>
   81714:	2b05      	cmp	r3, #5
   81716:	d002      	beq.n	8171e <ctrl_usart+0x10e>
   81718:	2b06      	cmp	r3, #6
   8171a:	d003      	beq.n	81724 <ctrl_usart+0x114>
   8171c:	e008      	b.n	81730 <ctrl_usart+0x120>
							{
							case 5:
								usartopts.char_length = US_MR_CHRL_5_BIT;
   8171e:	2300      	movs	r3, #0
   81720:	613b      	str	r3, [r7, #16]
								break;
   81722:	e007      	b.n	81734 <ctrl_usart+0x124>
							case 6:
								usartopts.char_length = US_MR_CHRL_6_BIT;
   81724:	2340      	movs	r3, #64	; 0x40
   81726:	613b      	str	r3, [r7, #16]
								break;
   81728:	e004      	b.n	81734 <ctrl_usart+0x124>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
   8172a:	2380      	movs	r3, #128	; 0x80
   8172c:	613b      	str	r3, [r7, #16]
								break;					
   8172e:	e001      	b.n	81734 <ctrl_usart+0x124>
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   81730:	23c0      	movs	r3, #192	; 0xc0
   81732:	613b      	str	r3, [r7, #16]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81734:	2300      	movs	r3, #0
   81736:	61fb      	str	r3, [r7, #28]

						if (usart == USART0)
   81738:	687b      	ldr	r3, [r7, #4]
   8173a:	4a53      	ldr	r2, [pc, #332]	; (81888 <ctrl_usart+0x278>)
   8173c:	4293      	cmp	r3, r2
   8173e:	d10c      	bne.n	8175a <ctrl_usart+0x14a>
						{
							sysclk_enable_peripheral_clock(ID_USART0);
   81740:	200d      	movs	r0, #13
   81742:	4b52      	ldr	r3, [pc, #328]	; (8188c <ctrl_usart+0x27c>)
   81744:	4798      	blx	r3
							init_circ_buf(&tx0buf);
   81746:	4852      	ldr	r0, [pc, #328]	; (81890 <ctrl_usart+0x280>)
   81748:	4b52      	ldr	r3, [pc, #328]	; (81894 <ctrl_usart+0x284>)
   8174a:	4798      	blx	r3
							init_circ_buf(&rx0buf);
   8174c:	4852      	ldr	r0, [pc, #328]	; (81898 <ctrl_usart+0x288>)
   8174e:	4b51      	ldr	r3, [pc, #324]	; (81894 <ctrl_usart+0x284>)
   81750:	4798      	blx	r3
							printf("Enabling USART0\n");
   81752:	4852      	ldr	r0, [pc, #328]	; (8189c <ctrl_usart+0x28c>)
   81754:	4b52      	ldr	r3, [pc, #328]	; (818a0 <ctrl_usart+0x290>)
   81756:	4798      	blx	r3
   81758:	e01a      	b.n	81790 <ctrl_usart+0x180>
						} else if (usart == USART1)
   8175a:	687b      	ldr	r3, [r7, #4]
   8175c:	4a51      	ldr	r2, [pc, #324]	; (818a4 <ctrl_usart+0x294>)
   8175e:	4293      	cmp	r3, r2
   81760:	d109      	bne.n	81776 <ctrl_usart+0x166>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
   81762:	200e      	movs	r0, #14
   81764:	4b49      	ldr	r3, [pc, #292]	; (8188c <ctrl_usart+0x27c>)
   81766:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   81768:	484f      	ldr	r0, [pc, #316]	; (818a8 <ctrl_usart+0x298>)
   8176a:	4b4a      	ldr	r3, [pc, #296]	; (81894 <ctrl_usart+0x284>)
   8176c:	4798      	blx	r3
							init_circ_buf(&rx1buf);
   8176e:	484f      	ldr	r0, [pc, #316]	; (818ac <ctrl_usart+0x29c>)
   81770:	4b48      	ldr	r3, [pc, #288]	; (81894 <ctrl_usart+0x284>)
   81772:	4798      	blx	r3
   81774:	e00c      	b.n	81790 <ctrl_usart+0x180>
						} else if (usart == USART2)
   81776:	687b      	ldr	r3, [r7, #4]
   81778:	4a4d      	ldr	r2, [pc, #308]	; (818b0 <ctrl_usart+0x2a0>)
   8177a:	4293      	cmp	r3, r2
   8177c:	d108      	bne.n	81790 <ctrl_usart+0x180>
						{
							sysclk_enable_peripheral_clock(ID_USART2);
   8177e:	200f      	movs	r0, #15
   81780:	4b42      	ldr	r3, [pc, #264]	; (8188c <ctrl_usart+0x27c>)
   81782:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   81784:	484b      	ldr	r0, [pc, #300]	; (818b4 <ctrl_usart+0x2a4>)
   81786:	4b43      	ldr	r3, [pc, #268]	; (81894 <ctrl_usart+0x284>)
   81788:	4798      	blx	r3
							init_circ_buf(&rx2buf);
   8178a:	484b      	ldr	r0, [pc, #300]	; (818b8 <ctrl_usart+0x2a8>)
   8178c:	4b41      	ldr	r3, [pc, #260]	; (81894 <ctrl_usart+0x284>)
   8178e:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
							sysclk_enable_peripheral_clock(ID_USART3);
							init_circ_buf(&tx3buf);
							init_circ_buf(&rx3buf);
						}
#endif
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
<<<<<<< HEAD
   81894:	4b4a      	ldr	r3, [pc, #296]	; (819c0 <ctrl_usart+0x2ac>)
   81896:	4798      	blx	r3
   81898:	4602      	mov	r2, r0
   8189a:	f107 030c 	add.w	r3, r7, #12
   8189e:	4619      	mov	r1, r3
   818a0:	6878      	ldr	r0, [r7, #4]
   818a2:	4b48      	ldr	r3, [pc, #288]	; (819c4 <ctrl_usart+0x2b0>)
   818a4:	4798      	blx	r3
=======
   81790:	4b4a      	ldr	r3, [pc, #296]	; (818bc <ctrl_usart+0x2ac>)
   81792:	4798      	blx	r3
   81794:	4602      	mov	r2, r0
   81796:	f107 030c 	add.w	r3, r7, #12
   8179a:	4619      	mov	r1, r3
   8179c:	6878      	ldr	r0, [r7, #4]
   8179e:	4b48      	ldr	r3, [pc, #288]	; (818c0 <ctrl_usart+0x2b0>)
   817a0:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
					} else {
						printf("ERR: Invalid USART Configuration packet?\n");
					}
			}
			break;
<<<<<<< HEAD
   818a6:	e104      	b.n	81ab2 <ctrl_usart+0x39e>
						printf("ERR: Invalid USART Configuration packet?\n");
   818a8:	4847      	ldr	r0, [pc, #284]	; (819c8 <ctrl_usart+0x2b4>)
   818aa:	4b3e      	ldr	r3, [pc, #248]	; (819a4 <ctrl_usart+0x290>)
   818ac:	4798      	blx	r3
			break;
   818ae:	e100      	b.n	81ab2 <ctrl_usart+0x39e>
			
		case USART_WVREQ_ENABLE:
			if (directionIn == false){
   818b0:	78fb      	ldrb	r3, [r7, #3]
   818b2:	f083 0301 	eor.w	r3, r3, #1
   818b6:	b2db      	uxtb	r3, r3
   818b8:	2b00      	cmp	r3, #0
   818ba:	f000 80fc 	beq.w	81ab6 <ctrl_usart+0x3a2>
				usart_enable_rx(usart);
   818be:	6878      	ldr	r0, [r7, #4]
   818c0:	4b42      	ldr	r3, [pc, #264]	; (819cc <ctrl_usart+0x2b8>)
   818c2:	4798      	blx	r3
				usart_enable_tx(usart);
   818c4:	6878      	ldr	r0, [r7, #4]
   818c6:	4b42      	ldr	r3, [pc, #264]	; (819d0 <ctrl_usart+0x2bc>)
   818c8:	4798      	blx	r3
				
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   818ca:	2101      	movs	r1, #1
   818cc:	6878      	ldr	r0, [r7, #4]
   818ce:	4b41      	ldr	r3, [pc, #260]	; (819d4 <ctrl_usart+0x2c0>)
   818d0:	4798      	blx	r3
				
				/* Enable IO Pins */
				if (usart == USART0){
   818d2:	687b      	ldr	r3, [r7, #4]
   818d4:	4a2d      	ldr	r2, [pc, #180]	; (8198c <ctrl_usart+0x278>)
   818d6:	4293      	cmp	r3, r2
   818d8:	d10c      	bne.n	818f4 <ctrl_usart+0x1e0>
					usart0_enableIO();
   818da:	4b3f      	ldr	r3, [pc, #252]	; (819d8 <ctrl_usart+0x2c4>)
   818dc:	4798      	blx	r3
					irq_register_handler(USART0_IRQn, 5);
   818de:	200d      	movs	r0, #13
   818e0:	4b3e      	ldr	r3, [pc, #248]	; (819dc <ctrl_usart+0x2c8>)
   818e2:	4798      	blx	r3
   818e4:	2105      	movs	r1, #5
   818e6:	200d      	movs	r0, #13
   818e8:	4b3d      	ldr	r3, [pc, #244]	; (819e0 <ctrl_usart+0x2cc>)
   818ea:	4798      	blx	r3
   818ec:	200d      	movs	r0, #13
   818ee:	4b3d      	ldr	r3, [pc, #244]	; (819e4 <ctrl_usart+0x2d0>)
   818f0:	4798      	blx	r3
=======
   817a2:	e104      	b.n	819ae <ctrl_usart+0x39e>
						printf("ERR: Invalid USART Configuration packet?\n");
   817a4:	4847      	ldr	r0, [pc, #284]	; (818c4 <ctrl_usart+0x2b4>)
   817a6:	4b3e      	ldr	r3, [pc, #248]	; (818a0 <ctrl_usart+0x290>)
   817a8:	4798      	blx	r3
			break;
   817aa:	e100      	b.n	819ae <ctrl_usart+0x39e>
			
		case USART_WVREQ_ENABLE:
			if (directionIn == false){
   817ac:	78fb      	ldrb	r3, [r7, #3]
   817ae:	f083 0301 	eor.w	r3, r3, #1
   817b2:	b2db      	uxtb	r3, r3
   817b4:	2b00      	cmp	r3, #0
   817b6:	f000 80fc 	beq.w	819b2 <ctrl_usart+0x3a2>
				usart_enable_rx(usart);
   817ba:	6878      	ldr	r0, [r7, #4]
   817bc:	4b42      	ldr	r3, [pc, #264]	; (818c8 <ctrl_usart+0x2b8>)
   817be:	4798      	blx	r3
				usart_enable_tx(usart);
   817c0:	6878      	ldr	r0, [r7, #4]
   817c2:	4b42      	ldr	r3, [pc, #264]	; (818cc <ctrl_usart+0x2bc>)
   817c4:	4798      	blx	r3
				
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   817c6:	2101      	movs	r1, #1
   817c8:	6878      	ldr	r0, [r7, #4]
   817ca:	4b41      	ldr	r3, [pc, #260]	; (818d0 <ctrl_usart+0x2c0>)
   817cc:	4798      	blx	r3
				
				/* Enable IO Pins */
				if (usart == USART0){
   817ce:	687b      	ldr	r3, [r7, #4]
   817d0:	4a2d      	ldr	r2, [pc, #180]	; (81888 <ctrl_usart+0x278>)
   817d2:	4293      	cmp	r3, r2
   817d4:	d10c      	bne.n	817f0 <ctrl_usart+0x1e0>
					usart0_enableIO();
   817d6:	4b3f      	ldr	r3, [pc, #252]	; (818d4 <ctrl_usart+0x2c4>)
   817d8:	4798      	blx	r3
					irq_register_handler(USART0_IRQn, 5);
   817da:	200d      	movs	r0, #13
   817dc:	4b3e      	ldr	r3, [pc, #248]	; (818d8 <ctrl_usart+0x2c8>)
   817de:	4798      	blx	r3
   817e0:	2105      	movs	r1, #5
   817e2:	200d      	movs	r0, #13
   817e4:	4b3d      	ldr	r3, [pc, #244]	; (818dc <ctrl_usart+0x2cc>)
   817e6:	4798      	blx	r3
   817e8:	200d      	movs	r0, #13
   817ea:	4b3d      	ldr	r3, [pc, #244]	; (818e0 <ctrl_usart+0x2d0>)
   817ec:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
					usart3_enableIO();
					irq_register_handler(USART3_IRQn, 5);
				}
#endif
			}
			break;
<<<<<<< HEAD
   818f2:	e0e0      	b.n	81ab6 <ctrl_usart+0x3a2>
				} else if (usart == USART1) {
   818f4:	687b      	ldr	r3, [r7, #4]
   818f6:	4a2c      	ldr	r2, [pc, #176]	; (819a8 <ctrl_usart+0x294>)
   818f8:	4293      	cmp	r3, r2
   818fa:	d10a      	bne.n	81912 <ctrl_usart+0x1fe>
					irq_register_handler(USART1_IRQn, 5);
   818fc:	200e      	movs	r0, #14
   818fe:	4b37      	ldr	r3, [pc, #220]	; (819dc <ctrl_usart+0x2c8>)
   81900:	4798      	blx	r3
   81902:	2105      	movs	r1, #5
   81904:	200e      	movs	r0, #14
   81906:	4b36      	ldr	r3, [pc, #216]	; (819e0 <ctrl_usart+0x2cc>)
   81908:	4798      	blx	r3
   8190a:	200e      	movs	r0, #14
   8190c:	4b35      	ldr	r3, [pc, #212]	; (819e4 <ctrl_usart+0x2d0>)
   8190e:	4798      	blx	r3
			break;
   81910:	e0d1      	b.n	81ab6 <ctrl_usart+0x3a2>
				} else if (usart == USART2) {
   81912:	687b      	ldr	r3, [r7, #4]
   81914:	4a27      	ldr	r2, [pc, #156]	; (819b4 <ctrl_usart+0x2a0>)
   81916:	4293      	cmp	r3, r2
   81918:	f040 80cd 	bne.w	81ab6 <ctrl_usart+0x3a2>
					irq_register_handler(USART2_IRQn, 5);
   8191c:	200f      	movs	r0, #15
   8191e:	4b2f      	ldr	r3, [pc, #188]	; (819dc <ctrl_usart+0x2c8>)
   81920:	4798      	blx	r3
   81922:	2105      	movs	r1, #5
   81924:	200f      	movs	r0, #15
   81926:	4b2e      	ldr	r3, [pc, #184]	; (819e0 <ctrl_usart+0x2cc>)
   81928:	4798      	blx	r3
   8192a:	200f      	movs	r0, #15
   8192c:	4b2d      	ldr	r3, [pc, #180]	; (819e4 <ctrl_usart+0x2d0>)
   8192e:	4798      	blx	r3
			break;
   81930:	e0c1      	b.n	81ab6 <ctrl_usart+0x3a2>
						
		case USART_WVREQ_DISABLE:
			if (directionIn == false){
   81932:	78fb      	ldrb	r3, [r7, #3]
   81934:	f083 0301 	eor.w	r3, r3, #1
   81938:	b2db      	uxtb	r3, r3
   8193a:	2b00      	cmp	r3, #0
   8193c:	f000 80bd 	beq.w	81aba <ctrl_usart+0x3a6>
				usart_disable_rx(usart);
   81940:	6878      	ldr	r0, [r7, #4]
   81942:	4b29      	ldr	r3, [pc, #164]	; (819e8 <ctrl_usart+0x2d4>)
   81944:	4798      	blx	r3
				usart_disable_rx(usart);
   81946:	6878      	ldr	r0, [r7, #4]
   81948:	4b27      	ldr	r3, [pc, #156]	; (819e8 <ctrl_usart+0x2d4>)
   8194a:	4798      	blx	r3
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   8194c:	2103      	movs	r1, #3
   8194e:	6878      	ldr	r0, [r7, #4]
   81950:	4b26      	ldr	r3, [pc, #152]	; (819ec <ctrl_usart+0x2d8>)
   81952:	4798      	blx	r3
			}
		
			break;
   81954:	e0b1      	b.n	81aba <ctrl_usart+0x3a6>
			
		case USART_WVREQ_NUMWAIT:		
			if (directionIn){
   81956:	78fb      	ldrb	r3, [r7, #3]
   81958:	2b00      	cmp	r3, #0
   8195a:	f000 80b0 	beq.w	81abe <ctrl_usart+0x3aa>
				if (udd_g_ctrlreq.req.wLength == 4){
   8195e:	4b0a      	ldr	r3, [pc, #40]	; (81988 <ctrl_usart+0x274>)
   81960:	88db      	ldrh	r3, [r3, #6]
   81962:	2b04      	cmp	r3, #4
   81964:	f040 80ab 	bne.w	81abe <ctrl_usart+0x3aa>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81968:	4b07      	ldr	r3, [pc, #28]	; (81988 <ctrl_usart+0x274>)
   8196a:	4a21      	ldr	r2, [pc, #132]	; (819f0 <ctrl_usart+0x2dc>)
   8196c:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   8196e:	4b06      	ldr	r3, [pc, #24]	; (81988 <ctrl_usart+0x274>)
   81970:	2204      	movs	r2, #4
   81972:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   81974:	687b      	ldr	r3, [r7, #4]
   81976:	4a05      	ldr	r2, [pc, #20]	; (8198c <ctrl_usart+0x278>)
   81978:	4293      	cmp	r3, r2
   8197a:	d13d      	bne.n	819f8 <ctrl_usart+0x2e4>
						cnt = circ_buf_count(&rx0buf);
   8197c:	4807      	ldr	r0, [pc, #28]	; (8199c <ctrl_usart+0x288>)
   8197e:	4b1d      	ldr	r3, [pc, #116]	; (819f4 <ctrl_usart+0x2e0>)
   81980:	4798      	blx	r3
   81982:	4603      	mov	r3, r0
   81984:	60bb      	str	r3, [r7, #8]
   81986:	e04a      	b.n	81a1e <ctrl_usart+0x30a>
   81988:	20001828 	.word	0x20001828
   8198c:	40090000 	.word	0x40090000
   81990:	000816d9 	.word	0x000816d9
   81994:	20001790 	.word	0x20001790
   81998:	00081d05 	.word	0x00081d05
   8199c:	20001448 	.word	0x20001448
   819a0:	0008d428 	.word	0x0008d428
   819a4:	00086abd 	.word	0x00086abd
   819a8:	40094000 	.word	0x40094000
   819ac:	20001560 	.word	0x20001560
   819b0:	20001704 	.word	0x20001704
   819b4:	40098000 	.word	0x40098000
   819b8:	200013bc 	.word	0x200013bc
   819bc:	20001678 	.word	0x20001678
   819c0:	000816c5 	.word	0x000816c5
   819c4:	00086409 	.word	0x00086409
   819c8:	0008d43c 	.word	0x0008d43c
   819cc:	000865cd 	.word	0x000865cd
   819d0:	0008659d 	.word	0x0008659d
   819d4:	00086615 	.word	0x00086615
   819d8:	000816f5 	.word	0x000816f5
   819dc:	000815b5 	.word	0x000815b5
   819e0:	000815e9 	.word	0x000815e9
   819e4:	00081585 	.word	0x00081585
   819e8:	000865e5 	.word	0x000865e5
   819ec:	0008662f 	.word	0x0008662f
   819f0:	200012a0 	.word	0x200012a0
   819f4:	00081dfd 	.word	0x00081dfd
					} else if (usart == USART1){
   819f8:	687b      	ldr	r3, [r7, #4]
   819fa:	4a35      	ldr	r2, [pc, #212]	; (81ad0 <ctrl_usart+0x3bc>)
   819fc:	4293      	cmp	r3, r2
   819fe:	d105      	bne.n	81a0c <ctrl_usart+0x2f8>
						cnt = circ_buf_count(&rx1buf);
   81a00:	4834      	ldr	r0, [pc, #208]	; (81ad4 <ctrl_usart+0x3c0>)
   81a02:	4b35      	ldr	r3, [pc, #212]	; (81ad8 <ctrl_usart+0x3c4>)
   81a04:	4798      	blx	r3
   81a06:	4603      	mov	r3, r0
   81a08:	60bb      	str	r3, [r7, #8]
   81a0a:	e008      	b.n	81a1e <ctrl_usart+0x30a>
					} else if (usart == USART2){
   81a0c:	687b      	ldr	r3, [r7, #4]
   81a0e:	4a33      	ldr	r2, [pc, #204]	; (81adc <ctrl_usart+0x3c8>)
   81a10:	4293      	cmp	r3, r2
   81a12:	d104      	bne.n	81a1e <ctrl_usart+0x30a>
						cnt = circ_buf_count(&rx2buf);
   81a14:	4832      	ldr	r0, [pc, #200]	; (81ae0 <ctrl_usart+0x3cc>)
   81a16:	4b30      	ldr	r3, [pc, #192]	; (81ad8 <ctrl_usart+0x3c4>)
   81a18:	4798      	blx	r3
   81a1a:	4603      	mov	r3, r0
   81a1c:	60bb      	str	r3, [r7, #8]
=======
   817ee:	e0e0      	b.n	819b2 <ctrl_usart+0x3a2>
				} else if (usart == USART1) {
   817f0:	687b      	ldr	r3, [r7, #4]
   817f2:	4a2c      	ldr	r2, [pc, #176]	; (818a4 <ctrl_usart+0x294>)
   817f4:	4293      	cmp	r3, r2
   817f6:	d10a      	bne.n	8180e <ctrl_usart+0x1fe>
					irq_register_handler(USART1_IRQn, 5);
   817f8:	200e      	movs	r0, #14
   817fa:	4b37      	ldr	r3, [pc, #220]	; (818d8 <ctrl_usart+0x2c8>)
   817fc:	4798      	blx	r3
   817fe:	2105      	movs	r1, #5
   81800:	200e      	movs	r0, #14
   81802:	4b36      	ldr	r3, [pc, #216]	; (818dc <ctrl_usart+0x2cc>)
   81804:	4798      	blx	r3
   81806:	200e      	movs	r0, #14
   81808:	4b35      	ldr	r3, [pc, #212]	; (818e0 <ctrl_usart+0x2d0>)
   8180a:	4798      	blx	r3
			break;
   8180c:	e0d1      	b.n	819b2 <ctrl_usart+0x3a2>
				} else if (usart == USART2) {
   8180e:	687b      	ldr	r3, [r7, #4]
   81810:	4a27      	ldr	r2, [pc, #156]	; (818b0 <ctrl_usart+0x2a0>)
   81812:	4293      	cmp	r3, r2
   81814:	f040 80cd 	bne.w	819b2 <ctrl_usart+0x3a2>
					irq_register_handler(USART2_IRQn, 5);
   81818:	200f      	movs	r0, #15
   8181a:	4b2f      	ldr	r3, [pc, #188]	; (818d8 <ctrl_usart+0x2c8>)
   8181c:	4798      	blx	r3
   8181e:	2105      	movs	r1, #5
   81820:	200f      	movs	r0, #15
   81822:	4b2e      	ldr	r3, [pc, #184]	; (818dc <ctrl_usart+0x2cc>)
   81824:	4798      	blx	r3
   81826:	200f      	movs	r0, #15
   81828:	4b2d      	ldr	r3, [pc, #180]	; (818e0 <ctrl_usart+0x2d0>)
   8182a:	4798      	blx	r3
			break;
   8182c:	e0c1      	b.n	819b2 <ctrl_usart+0x3a2>
						
		case USART_WVREQ_DISABLE:
			if (directionIn == false){
   8182e:	78fb      	ldrb	r3, [r7, #3]
   81830:	f083 0301 	eor.w	r3, r3, #1
   81834:	b2db      	uxtb	r3, r3
   81836:	2b00      	cmp	r3, #0
   81838:	f000 80bd 	beq.w	819b6 <ctrl_usart+0x3a6>
				usart_disable_rx(usart);
   8183c:	6878      	ldr	r0, [r7, #4]
   8183e:	4b29      	ldr	r3, [pc, #164]	; (818e4 <ctrl_usart+0x2d4>)
   81840:	4798      	blx	r3
				usart_disable_rx(usart);
   81842:	6878      	ldr	r0, [r7, #4]
   81844:	4b27      	ldr	r3, [pc, #156]	; (818e4 <ctrl_usart+0x2d4>)
   81846:	4798      	blx	r3
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   81848:	2103      	movs	r1, #3
   8184a:	6878      	ldr	r0, [r7, #4]
   8184c:	4b26      	ldr	r3, [pc, #152]	; (818e8 <ctrl_usart+0x2d8>)
   8184e:	4798      	blx	r3
			}
		
			break;
   81850:	e0b1      	b.n	819b6 <ctrl_usart+0x3a6>
			
		case USART_WVREQ_NUMWAIT:		
			if (directionIn){
   81852:	78fb      	ldrb	r3, [r7, #3]
   81854:	2b00      	cmp	r3, #0
   81856:	f000 80b0 	beq.w	819ba <ctrl_usart+0x3aa>
				if (udd_g_ctrlreq.req.wLength == 4){
   8185a:	4b0a      	ldr	r3, [pc, #40]	; (81884 <ctrl_usart+0x274>)
   8185c:	88db      	ldrh	r3, [r3, #6]
   8185e:	2b04      	cmp	r3, #4
   81860:	f040 80ab 	bne.w	819ba <ctrl_usart+0x3aa>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81864:	4b07      	ldr	r3, [pc, #28]	; (81884 <ctrl_usart+0x274>)
   81866:	4a21      	ldr	r2, [pc, #132]	; (818ec <ctrl_usart+0x2dc>)
   81868:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   8186a:	4b06      	ldr	r3, [pc, #24]	; (81884 <ctrl_usart+0x274>)
   8186c:	2204      	movs	r2, #4
   8186e:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   81870:	687b      	ldr	r3, [r7, #4]
   81872:	4a05      	ldr	r2, [pc, #20]	; (81888 <ctrl_usart+0x278>)
   81874:	4293      	cmp	r3, r2
   81876:	d13d      	bne.n	818f4 <ctrl_usart+0x2e4>
						cnt = circ_buf_count(&rx0buf);
   81878:	4807      	ldr	r0, [pc, #28]	; (81898 <ctrl_usart+0x288>)
   8187a:	4b1d      	ldr	r3, [pc, #116]	; (818f0 <ctrl_usart+0x2e0>)
   8187c:	4798      	blx	r3
   8187e:	4603      	mov	r3, r0
   81880:	60bb      	str	r3, [r7, #8]
   81882:	e04a      	b.n	8191a <ctrl_usart+0x30a>
   81884:	20001810 	.word	0x20001810
   81888:	40090000 	.word	0x40090000
   8188c:	000815d5 	.word	0x000815d5
   81890:	20001784 	.word	0x20001784
   81894:	000862dd 	.word	0x000862dd
   81898:	2000143c 	.word	0x2000143c
   8189c:	0008d328 	.word	0x0008d328
   818a0:	000866c1 	.word	0x000866c1
   818a4:	40094000 	.word	0x40094000
   818a8:	20001554 	.word	0x20001554
   818ac:	200016f8 	.word	0x200016f8
   818b0:	40098000 	.word	0x40098000
   818b4:	200013b0 	.word	0x200013b0
   818b8:	2000166c 	.word	0x2000166c
   818bc:	000815c1 	.word	0x000815c1
   818c0:	00081d99 	.word	0x00081d99
   818c4:	0008d33c 	.word	0x0008d33c
   818c8:	00081f5d 	.word	0x00081f5d
   818cc:	00081f2d 	.word	0x00081f2d
   818d0:	00081fa5 	.word	0x00081fa5
   818d4:	000815f1 	.word	0x000815f1
   818d8:	000814b1 	.word	0x000814b1
   818dc:	000814e5 	.word	0x000814e5
   818e0:	00081481 	.word	0x00081481
   818e4:	00081f75 	.word	0x00081f75
   818e8:	00081fbf 	.word	0x00081fbf
   818ec:	20001298 	.word	0x20001298
   818f0:	000863d5 	.word	0x000863d5
					} else if (usart == USART1){
   818f4:	687b      	ldr	r3, [r7, #4]
   818f6:	4a35      	ldr	r2, [pc, #212]	; (819cc <ctrl_usart+0x3bc>)
   818f8:	4293      	cmp	r3, r2
   818fa:	d105      	bne.n	81908 <ctrl_usart+0x2f8>
						cnt = circ_buf_count(&rx1buf);
   818fc:	4834      	ldr	r0, [pc, #208]	; (819d0 <ctrl_usart+0x3c0>)
   818fe:	4b35      	ldr	r3, [pc, #212]	; (819d4 <ctrl_usart+0x3c4>)
   81900:	4798      	blx	r3
   81902:	4603      	mov	r3, r0
   81904:	60bb      	str	r3, [r7, #8]
   81906:	e008      	b.n	8191a <ctrl_usart+0x30a>
					} else if (usart == USART2){
   81908:	687b      	ldr	r3, [r7, #4]
   8190a:	4a33      	ldr	r2, [pc, #204]	; (819d8 <ctrl_usart+0x3c8>)
   8190c:	4293      	cmp	r3, r2
   8190e:	d104      	bne.n	8191a <ctrl_usart+0x30a>
						cnt = circ_buf_count(&rx2buf);
   81910:	4832      	ldr	r0, [pc, #200]	; (819dc <ctrl_usart+0x3cc>)
   81912:	4b30      	ldr	r3, [pc, #192]	; (819d4 <ctrl_usart+0x3c4>)
   81914:	4798      	blx	r3
   81916:	4603      	mov	r3, r0
   81918:	60bb      	str	r3, [r7, #8]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
					else if (usart == USART3){
						cnt = circ_buf_count(&rx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
<<<<<<< HEAD
   81a1e:	f107 0308 	add.w	r3, r7, #8
   81a22:	781a      	ldrb	r2, [r3, #0]
   81a24:	4b2f      	ldr	r3, [pc, #188]	; (81ae4 <ctrl_usart+0x3d0>)
   81a26:	701a      	strb	r2, [r3, #0]
   81a28:	7a7a      	ldrb	r2, [r7, #9]
   81a2a:	4b2e      	ldr	r3, [pc, #184]	; (81ae4 <ctrl_usart+0x3d0>)
   81a2c:	705a      	strb	r2, [r3, #1]
   81a2e:	7aba      	ldrb	r2, [r7, #10]
   81a30:	4b2c      	ldr	r3, [pc, #176]	; (81ae4 <ctrl_usart+0x3d0>)
   81a32:	709a      	strb	r2, [r3, #2]
   81a34:	7afa      	ldrb	r2, [r7, #11]
   81a36:	4b2b      	ldr	r3, [pc, #172]	; (81ae4 <ctrl_usart+0x3d0>)
   81a38:	70da      	strb	r2, [r3, #3]
			
					return true;
   81a3a:	2301      	movs	r3, #1
   81a3c:	e043      	b.n	81ac6 <ctrl_usart+0x3b2>
=======
   8191a:	f107 0308 	add.w	r3, r7, #8
   8191e:	781a      	ldrb	r2, [r3, #0]
   81920:	4b2f      	ldr	r3, [pc, #188]	; (819e0 <ctrl_usart+0x3d0>)
   81922:	701a      	strb	r2, [r3, #0]
   81924:	7a7a      	ldrb	r2, [r7, #9]
   81926:	4b2e      	ldr	r3, [pc, #184]	; (819e0 <ctrl_usart+0x3d0>)
   81928:	705a      	strb	r2, [r3, #1]
   8192a:	7aba      	ldrb	r2, [r7, #10]
   8192c:	4b2c      	ldr	r3, [pc, #176]	; (819e0 <ctrl_usart+0x3d0>)
   8192e:	709a      	strb	r2, [r3, #2]
   81930:	7afa      	ldrb	r2, [r7, #11]
   81932:	4b2b      	ldr	r3, [pc, #172]	; (819e0 <ctrl_usart+0x3d0>)
   81934:	70da      	strb	r2, [r3, #3]
			
					return true;
   81936:	2301      	movs	r3, #1
   81938:	e043      	b.n	819c2 <ctrl_usart+0x3b2>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
				}
			}
			break;		
		case USART_WVREQ_NUMWAIT_TX:		
			if (directionIn){
<<<<<<< HEAD
   81a3e:	78fb      	ldrb	r3, [r7, #3]
   81a40:	2b00      	cmp	r3, #0
   81a42:	d03e      	beq.n	81ac2 <ctrl_usart+0x3ae>
				if (udd_g_ctrlreq.req.wLength == 4){
   81a44:	4b28      	ldr	r3, [pc, #160]	; (81ae8 <ctrl_usart+0x3d4>)
   81a46:	88db      	ldrh	r3, [r3, #6]
   81a48:	2b04      	cmp	r3, #4
   81a4a:	d13a      	bne.n	81ac2 <ctrl_usart+0x3ae>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81a4c:	4b26      	ldr	r3, [pc, #152]	; (81ae8 <ctrl_usart+0x3d4>)
   81a4e:	4a25      	ldr	r2, [pc, #148]	; (81ae4 <ctrl_usart+0x3d0>)
   81a50:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   81a52:	4b25      	ldr	r3, [pc, #148]	; (81ae8 <ctrl_usart+0x3d4>)
   81a54:	2204      	movs	r2, #4
   81a56:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   81a58:	687b      	ldr	r3, [r7, #4]
   81a5a:	4a24      	ldr	r2, [pc, #144]	; (81aec <ctrl_usart+0x3d8>)
   81a5c:	4293      	cmp	r3, r2
   81a5e:	d105      	bne.n	81a6c <ctrl_usart+0x358>
						cnt = circ_buf_count(&tx0buf);
   81a60:	4823      	ldr	r0, [pc, #140]	; (81af0 <ctrl_usart+0x3dc>)
   81a62:	4b1d      	ldr	r3, [pc, #116]	; (81ad8 <ctrl_usart+0x3c4>)
   81a64:	4798      	blx	r3
   81a66:	4603      	mov	r3, r0
   81a68:	60bb      	str	r3, [r7, #8]
   81a6a:	e012      	b.n	81a92 <ctrl_usart+0x37e>
					} else if (usart == USART1){
   81a6c:	687b      	ldr	r3, [r7, #4]
   81a6e:	4a18      	ldr	r2, [pc, #96]	; (81ad0 <ctrl_usart+0x3bc>)
   81a70:	4293      	cmp	r3, r2
   81a72:	d105      	bne.n	81a80 <ctrl_usart+0x36c>
						cnt = circ_buf_count(&tx1buf);
   81a74:	481f      	ldr	r0, [pc, #124]	; (81af4 <ctrl_usart+0x3e0>)
   81a76:	4b18      	ldr	r3, [pc, #96]	; (81ad8 <ctrl_usart+0x3c4>)
   81a78:	4798      	blx	r3
   81a7a:	4603      	mov	r3, r0
   81a7c:	60bb      	str	r3, [r7, #8]
   81a7e:	e008      	b.n	81a92 <ctrl_usart+0x37e>
					} else if (usart == USART2){
   81a80:	687b      	ldr	r3, [r7, #4]
   81a82:	4a16      	ldr	r2, [pc, #88]	; (81adc <ctrl_usart+0x3c8>)
   81a84:	4293      	cmp	r3, r2
   81a86:	d104      	bne.n	81a92 <ctrl_usart+0x37e>
						cnt = circ_buf_count(&tx2buf);
   81a88:	481b      	ldr	r0, [pc, #108]	; (81af8 <ctrl_usart+0x3e4>)
   81a8a:	4b13      	ldr	r3, [pc, #76]	; (81ad8 <ctrl_usart+0x3c4>)
   81a8c:	4798      	blx	r3
   81a8e:	4603      	mov	r3, r0
   81a90:	60bb      	str	r3, [r7, #8]
=======
   8193a:	78fb      	ldrb	r3, [r7, #3]
   8193c:	2b00      	cmp	r3, #0
   8193e:	d03e      	beq.n	819be <ctrl_usart+0x3ae>
				if (udd_g_ctrlreq.req.wLength == 4){
   81940:	4b28      	ldr	r3, [pc, #160]	; (819e4 <ctrl_usart+0x3d4>)
   81942:	88db      	ldrh	r3, [r3, #6]
   81944:	2b04      	cmp	r3, #4
   81946:	d13a      	bne.n	819be <ctrl_usart+0x3ae>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81948:	4b26      	ldr	r3, [pc, #152]	; (819e4 <ctrl_usart+0x3d4>)
   8194a:	4a25      	ldr	r2, [pc, #148]	; (819e0 <ctrl_usart+0x3d0>)
   8194c:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   8194e:	4b25      	ldr	r3, [pc, #148]	; (819e4 <ctrl_usart+0x3d4>)
   81950:	2204      	movs	r2, #4
   81952:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   81954:	687b      	ldr	r3, [r7, #4]
   81956:	4a24      	ldr	r2, [pc, #144]	; (819e8 <ctrl_usart+0x3d8>)
   81958:	4293      	cmp	r3, r2
   8195a:	d105      	bne.n	81968 <ctrl_usart+0x358>
						cnt = circ_buf_count(&tx0buf);
   8195c:	4823      	ldr	r0, [pc, #140]	; (819ec <ctrl_usart+0x3dc>)
   8195e:	4b1d      	ldr	r3, [pc, #116]	; (819d4 <ctrl_usart+0x3c4>)
   81960:	4798      	blx	r3
   81962:	4603      	mov	r3, r0
   81964:	60bb      	str	r3, [r7, #8]
   81966:	e012      	b.n	8198e <ctrl_usart+0x37e>
					} else if (usart == USART1){
   81968:	687b      	ldr	r3, [r7, #4]
   8196a:	4a18      	ldr	r2, [pc, #96]	; (819cc <ctrl_usart+0x3bc>)
   8196c:	4293      	cmp	r3, r2
   8196e:	d105      	bne.n	8197c <ctrl_usart+0x36c>
						cnt = circ_buf_count(&tx1buf);
   81970:	481f      	ldr	r0, [pc, #124]	; (819f0 <ctrl_usart+0x3e0>)
   81972:	4b18      	ldr	r3, [pc, #96]	; (819d4 <ctrl_usart+0x3c4>)
   81974:	4798      	blx	r3
   81976:	4603      	mov	r3, r0
   81978:	60bb      	str	r3, [r7, #8]
   8197a:	e008      	b.n	8198e <ctrl_usart+0x37e>
					} else if (usart == USART2){
   8197c:	687b      	ldr	r3, [r7, #4]
   8197e:	4a16      	ldr	r2, [pc, #88]	; (819d8 <ctrl_usart+0x3c8>)
   81980:	4293      	cmp	r3, r2
   81982:	d104      	bne.n	8198e <ctrl_usart+0x37e>
						cnt = circ_buf_count(&tx2buf);
   81984:	481b      	ldr	r0, [pc, #108]	; (819f4 <ctrl_usart+0x3e4>)
   81986:	4b13      	ldr	r3, [pc, #76]	; (819d4 <ctrl_usart+0x3c4>)
   81988:	4798      	blx	r3
   8198a:	4603      	mov	r3, r0
   8198c:	60bb      	str	r3, [r7, #8]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
					else if (usart == USART3){
						cnt = circ_buf_count(&tx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
<<<<<<< HEAD
   81a92:	f107 0308 	add.w	r3, r7, #8
   81a96:	781a      	ldrb	r2, [r3, #0]
   81a98:	4b12      	ldr	r3, [pc, #72]	; (81ae4 <ctrl_usart+0x3d0>)
   81a9a:	701a      	strb	r2, [r3, #0]
   81a9c:	7a7a      	ldrb	r2, [r7, #9]
   81a9e:	4b11      	ldr	r3, [pc, #68]	; (81ae4 <ctrl_usart+0x3d0>)
   81aa0:	705a      	strb	r2, [r3, #1]
   81aa2:	7aba      	ldrb	r2, [r7, #10]
   81aa4:	4b0f      	ldr	r3, [pc, #60]	; (81ae4 <ctrl_usart+0x3d0>)
   81aa6:	709a      	strb	r2, [r3, #2]
   81aa8:	7afa      	ldrb	r2, [r7, #11]
   81aaa:	4b0e      	ldr	r3, [pc, #56]	; (81ae4 <ctrl_usart+0x3d0>)
   81aac:	70da      	strb	r2, [r3, #3]
			
					return true;
   81aae:	2301      	movs	r3, #1
   81ab0:	e009      	b.n	81ac6 <ctrl_usart+0x3b2>
			break;
   81ab2:	bf00      	nop
   81ab4:	e006      	b.n	81ac4 <ctrl_usart+0x3b0>
			break;
   81ab6:	bf00      	nop
   81ab8:	e004      	b.n	81ac4 <ctrl_usart+0x3b0>
			break;
   81aba:	bf00      	nop
   81abc:	e002      	b.n	81ac4 <ctrl_usart+0x3b0>
			break;		
   81abe:	bf00      	nop
   81ac0:	e000      	b.n	81ac4 <ctrl_usart+0x3b0>
				}
			}
			break;		
   81ac2:	bf00      	nop
	}
	
	return false;
   81ac4:	2300      	movs	r3, #0
}
   81ac6:	4618      	mov	r0, r3
   81ac8:	3728      	adds	r7, #40	; 0x28
   81aca:	46bd      	mov	sp, r7
   81acc:	bd80      	pop	{r7, pc}
   81ace:	bf00      	nop
   81ad0:	40094000 	.word	0x40094000
   81ad4:	20001704 	.word	0x20001704
   81ad8:	00081dfd 	.word	0x00081dfd
   81adc:	40098000 	.word	0x40098000
   81ae0:	20001678 	.word	0x20001678
   81ae4:	200012a0 	.word	0x200012a0
   81ae8:	20001828 	.word	0x20001828
   81aec:	40090000 	.word	0x40090000
   81af0:	20001790 	.word	0x20001790
   81af4:	20001560 	.word	0x20001560
   81af8:	200013bc 	.word	0x200013bc

00081afc <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   81afc:	b580      	push	{r7, lr}
   81afe:	b084      	sub	sp, #16
   81b00:	af00      	add	r7, sp, #0
   81b02:	60f8      	str	r0, [r7, #12]
   81b04:	60b9      	str	r1, [r7, #8]
   81b06:	4613      	mov	r3, r2
   81b08:	71fb      	strb	r3, [r7, #7]
	if (txbuf == NULL){
   81b0a:	68bb      	ldr	r3, [r7, #8]
   81b0c:	2b00      	cmp	r3, #0
   81b0e:	d113      	bne.n	81b38 <usart_driver_putchar+0x3c>
		if (usart == USART0) txbuf = &tx0buf;
   81b10:	68fb      	ldr	r3, [r7, #12]
   81b12:	4a19      	ldr	r2, [pc, #100]	; (81b78 <usart_driver_putchar+0x7c>)
   81b14:	4293      	cmp	r3, r2
   81b16:	d102      	bne.n	81b1e <usart_driver_putchar+0x22>
   81b18:	4b18      	ldr	r3, [pc, #96]	; (81b7c <usart_driver_putchar+0x80>)
   81b1a:	60bb      	str	r3, [r7, #8]
   81b1c:	e00c      	b.n	81b38 <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   81b1e:	68fb      	ldr	r3, [r7, #12]
   81b20:	4a17      	ldr	r2, [pc, #92]	; (81b80 <usart_driver_putchar+0x84>)
   81b22:	4293      	cmp	r3, r2
   81b24:	d102      	bne.n	81b2c <usart_driver_putchar+0x30>
   81b26:	4b17      	ldr	r3, [pc, #92]	; (81b84 <usart_driver_putchar+0x88>)
   81b28:	60bb      	str	r3, [r7, #8]
   81b2a:	e005      	b.n	81b38 <usart_driver_putchar+0x3c>
		else if (usart == USART2) txbuf = &tx2buf;
   81b2c:	68fb      	ldr	r3, [r7, #12]
   81b2e:	4a16      	ldr	r2, [pc, #88]	; (81b88 <usart_driver_putchar+0x8c>)
   81b30:	4293      	cmp	r3, r2
   81b32:	d11c      	bne.n	81b6e <usart_driver_putchar+0x72>
   81b34:	4b15      	ldr	r3, [pc, #84]	; (81b8c <usart_driver_putchar+0x90>)
   81b36:	60bb      	str	r3, [r7, #8]
=======
   8198e:	f107 0308 	add.w	r3, r7, #8
   81992:	781a      	ldrb	r2, [r3, #0]
   81994:	4b12      	ldr	r3, [pc, #72]	; (819e0 <ctrl_usart+0x3d0>)
   81996:	701a      	strb	r2, [r3, #0]
   81998:	7a7a      	ldrb	r2, [r7, #9]
   8199a:	4b11      	ldr	r3, [pc, #68]	; (819e0 <ctrl_usart+0x3d0>)
   8199c:	705a      	strb	r2, [r3, #1]
   8199e:	7aba      	ldrb	r2, [r7, #10]
   819a0:	4b0f      	ldr	r3, [pc, #60]	; (819e0 <ctrl_usart+0x3d0>)
   819a2:	709a      	strb	r2, [r3, #2]
   819a4:	7afa      	ldrb	r2, [r7, #11]
   819a6:	4b0e      	ldr	r3, [pc, #56]	; (819e0 <ctrl_usart+0x3d0>)
   819a8:	70da      	strb	r2, [r3, #3]
			
					return true;
   819aa:	2301      	movs	r3, #1
   819ac:	e009      	b.n	819c2 <ctrl_usart+0x3b2>
			break;
   819ae:	bf00      	nop
   819b0:	e006      	b.n	819c0 <ctrl_usart+0x3b0>
			break;
   819b2:	bf00      	nop
   819b4:	e004      	b.n	819c0 <ctrl_usart+0x3b0>
			break;
   819b6:	bf00      	nop
   819b8:	e002      	b.n	819c0 <ctrl_usart+0x3b0>
			break;		
   819ba:	bf00      	nop
   819bc:	e000      	b.n	819c0 <ctrl_usart+0x3b0>
				}
			}
			break;		
   819be:	bf00      	nop
	}
	
	return false;
   819c0:	2300      	movs	r3, #0
}
   819c2:	4618      	mov	r0, r3
   819c4:	3728      	adds	r7, #40	; 0x28
   819c6:	46bd      	mov	sp, r7
   819c8:	bd80      	pop	{r7, pc}
   819ca:	bf00      	nop
   819cc:	40094000 	.word	0x40094000
   819d0:	200016f8 	.word	0x200016f8
   819d4:	000863d5 	.word	0x000863d5
   819d8:	40098000 	.word	0x40098000
   819dc:	2000166c 	.word	0x2000166c
   819e0:	20001298 	.word	0x20001298
   819e4:	20001810 	.word	0x20001810
   819e8:	40090000 	.word	0x40090000
   819ec:	20001784 	.word	0x20001784
   819f0:	20001554 	.word	0x20001554
   819f4:	200013b0 	.word	0x200013b0

000819f8 <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   819f8:	b580      	push	{r7, lr}
   819fa:	b084      	sub	sp, #16
   819fc:	af00      	add	r7, sp, #0
   819fe:	60f8      	str	r0, [r7, #12]
   81a00:	60b9      	str	r1, [r7, #8]
   81a02:	4613      	mov	r3, r2
   81a04:	71fb      	strb	r3, [r7, #7]
	if (txbuf == NULL){
   81a06:	68bb      	ldr	r3, [r7, #8]
   81a08:	2b00      	cmp	r3, #0
   81a0a:	d113      	bne.n	81a34 <usart_driver_putchar+0x3c>
		if (usart == USART0) txbuf = &tx0buf;
   81a0c:	68fb      	ldr	r3, [r7, #12]
   81a0e:	4a19      	ldr	r2, [pc, #100]	; (81a74 <usart_driver_putchar+0x7c>)
   81a10:	4293      	cmp	r3, r2
   81a12:	d102      	bne.n	81a1a <usart_driver_putchar+0x22>
   81a14:	4b18      	ldr	r3, [pc, #96]	; (81a78 <usart_driver_putchar+0x80>)
   81a16:	60bb      	str	r3, [r7, #8]
   81a18:	e00c      	b.n	81a34 <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   81a1a:	68fb      	ldr	r3, [r7, #12]
   81a1c:	4a17      	ldr	r2, [pc, #92]	; (81a7c <usart_driver_putchar+0x84>)
   81a1e:	4293      	cmp	r3, r2
   81a20:	d102      	bne.n	81a28 <usart_driver_putchar+0x30>
   81a22:	4b17      	ldr	r3, [pc, #92]	; (81a80 <usart_driver_putchar+0x88>)
   81a24:	60bb      	str	r3, [r7, #8]
   81a26:	e005      	b.n	81a34 <usart_driver_putchar+0x3c>
		else if (usart == USART2) txbuf = &tx2buf;
   81a28:	68fb      	ldr	r3, [r7, #12]
   81a2a:	4a16      	ldr	r2, [pc, #88]	; (81a84 <usart_driver_putchar+0x8c>)
   81a2c:	4293      	cmp	r3, r2
   81a2e:	d11c      	bne.n	81a6a <usart_driver_putchar+0x72>
   81a30:	4b15      	ldr	r3, [pc, #84]	; (81a88 <usart_driver_putchar+0x90>)
   81a32:	60bb      	str	r3, [r7, #8]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
<<<<<<< HEAD
   81b38:	79fb      	ldrb	r3, [r7, #7]
   81b3a:	2200      	movs	r2, #0
   81b3c:	4619      	mov	r1, r3
   81b3e:	68b8      	ldr	r0, [r7, #8]
   81b40:	4b13      	ldr	r3, [pc, #76]	; (81b90 <usart_driver_putchar+0x94>)
   81b42:	4798      	blx	r3
=======
   81a34:	79fb      	ldrb	r3, [r7, #7]
   81a36:	2200      	movs	r2, #0
   81a38:	4619      	mov	r1, r3
   81a3a:	68b8      	ldr	r0, [r7, #8]
   81a3c:	4b13      	ldr	r3, [pc, #76]	; (81a8c <usart_driver_putchar+0x94>)
   81a3e:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
<<<<<<< HEAD
   81b44:	68f8      	ldr	r0, [r7, #12]
   81b46:	4b13      	ldr	r3, [pc, #76]	; (81b94 <usart_driver_putchar+0x98>)
   81b48:	4798      	blx	r3
   81b4a:	4603      	mov	r3, r0
   81b4c:	f003 0302 	and.w	r3, r3, #2
   81b50:	2b00      	cmp	r3, #0
   81b52:	d10d      	bne.n	81b70 <usart_driver_putchar+0x74>
		usart_putchar(usart, get_from_circ_buf(txbuf));
   81b54:	68b8      	ldr	r0, [r7, #8]
   81b56:	4b10      	ldr	r3, [pc, #64]	; (81b98 <usart_driver_putchar+0x9c>)
   81b58:	4798      	blx	r3
   81b5a:	4603      	mov	r3, r0
   81b5c:	4619      	mov	r1, r3
   81b5e:	68f8      	ldr	r0, [r7, #12]
   81b60:	4b0e      	ldr	r3, [pc, #56]	; (81b9c <usart_driver_putchar+0xa0>)
   81b62:	4798      	blx	r3
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   81b64:	2102      	movs	r1, #2
   81b66:	68f8      	ldr	r0, [r7, #12]
   81b68:	4b0d      	ldr	r3, [pc, #52]	; (81ba0 <usart_driver_putchar+0xa4>)
   81b6a:	4798      	blx	r3
   81b6c:	e000      	b.n	81b70 <usart_driver_putchar+0x74>
		else return;
   81b6e:	bf00      	nop
	}
}
   81b70:	3710      	adds	r7, #16
   81b72:	46bd      	mov	sp, r7
   81b74:	bd80      	pop	{r7, pc}
   81b76:	bf00      	nop
   81b78:	40090000 	.word	0x40090000
   81b7c:	20001790 	.word	0x20001790
   81b80:	40094000 	.word	0x40094000
   81b84:	20001560 	.word	0x20001560
   81b88:	40098000 	.word	0x40098000
   81b8c:	200013bc 	.word	0x200013bc
   81b90:	00081d27 	.word	0x00081d27
   81b94:	00086649 	.word	0x00086649
   81b98:	00081d8b 	.word	0x00081d8b
   81b9c:	000866c3 	.word	0x000866c3
   81ba0:	00086615 	.word	0x00086615

00081ba4 <usart_driver_getchar>:

uint8_t usart_driver_getchar(Usart * usart)
{
   81ba4:	b580      	push	{r7, lr}
   81ba6:	b084      	sub	sp, #16
   81ba8:	af00      	add	r7, sp, #0
   81baa:	6078      	str	r0, [r7, #4]
	tcirc_buf * rxbuf = NULL;	 
   81bac:	2300      	movs	r3, #0
   81bae:	60fb      	str	r3, [r7, #12]
	if (rxbuf == NULL){
   81bb0:	68fb      	ldr	r3, [r7, #12]
   81bb2:	2b00      	cmp	r3, #0
   81bb4:	d116      	bne.n	81be4 <usart_driver_getchar+0x40>
			if (usart == USART0) rxbuf = &rx0buf;
   81bb6:	687b      	ldr	r3, [r7, #4]
   81bb8:	4a0e      	ldr	r2, [pc, #56]	; (81bf4 <usart_driver_getchar+0x50>)
   81bba:	4293      	cmp	r3, r2
   81bbc:	d102      	bne.n	81bc4 <usart_driver_getchar+0x20>
   81bbe:	4b0e      	ldr	r3, [pc, #56]	; (81bf8 <usart_driver_getchar+0x54>)
   81bc0:	60fb      	str	r3, [r7, #12]
   81bc2:	e00f      	b.n	81be4 <usart_driver_getchar+0x40>
			else if (usart == USART1) rxbuf = &rx1buf;
   81bc4:	687b      	ldr	r3, [r7, #4]
   81bc6:	4a0d      	ldr	r2, [pc, #52]	; (81bfc <usart_driver_getchar+0x58>)
   81bc8:	4293      	cmp	r3, r2
   81bca:	d102      	bne.n	81bd2 <usart_driver_getchar+0x2e>
   81bcc:	4b0c      	ldr	r3, [pc, #48]	; (81c00 <usart_driver_getchar+0x5c>)
   81bce:	60fb      	str	r3, [r7, #12]
   81bd0:	e008      	b.n	81be4 <usart_driver_getchar+0x40>
			else if (usart == USART2) rxbuf = &rx2buf;
   81bd2:	687b      	ldr	r3, [r7, #4]
   81bd4:	4a0b      	ldr	r2, [pc, #44]	; (81c04 <usart_driver_getchar+0x60>)
   81bd6:	4293      	cmp	r3, r2
   81bd8:	d102      	bne.n	81be0 <usart_driver_getchar+0x3c>
   81bda:	4b0b      	ldr	r3, [pc, #44]	; (81c08 <usart_driver_getchar+0x64>)
   81bdc:	60fb      	str	r3, [r7, #12]
   81bde:	e001      	b.n	81be4 <usart_driver_getchar+0x40>
=======
   81a40:	68f8      	ldr	r0, [r7, #12]
   81a42:	4b13      	ldr	r3, [pc, #76]	; (81a90 <usart_driver_putchar+0x98>)
   81a44:	4798      	blx	r3
   81a46:	4603      	mov	r3, r0
   81a48:	f003 0302 	and.w	r3, r3, #2
   81a4c:	2b00      	cmp	r3, #0
   81a4e:	d10d      	bne.n	81a6c <usart_driver_putchar+0x74>
		usart_putchar(usart, get_from_circ_buf(txbuf));
   81a50:	68b8      	ldr	r0, [r7, #8]
   81a52:	4b10      	ldr	r3, [pc, #64]	; (81a94 <usart_driver_putchar+0x9c>)
   81a54:	4798      	blx	r3
   81a56:	4603      	mov	r3, r0
   81a58:	4619      	mov	r1, r3
   81a5a:	68f8      	ldr	r0, [r7, #12]
   81a5c:	4b0e      	ldr	r3, [pc, #56]	; (81a98 <usart_driver_putchar+0xa0>)
   81a5e:	4798      	blx	r3
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   81a60:	2102      	movs	r1, #2
   81a62:	68f8      	ldr	r0, [r7, #12]
   81a64:	4b0d      	ldr	r3, [pc, #52]	; (81a9c <usart_driver_putchar+0xa4>)
   81a66:	4798      	blx	r3
   81a68:	e000      	b.n	81a6c <usart_driver_putchar+0x74>
		else return;
   81a6a:	bf00      	nop
	}
}
   81a6c:	3710      	adds	r7, #16
   81a6e:	46bd      	mov	sp, r7
   81a70:	bd80      	pop	{r7, pc}
   81a72:	bf00      	nop
   81a74:	40090000 	.word	0x40090000
   81a78:	20001784 	.word	0x20001784
   81a7c:	40094000 	.word	0x40094000
   81a80:	20001554 	.word	0x20001554
   81a84:	40098000 	.word	0x40098000
   81a88:	200013b0 	.word	0x200013b0
   81a8c:	000862ff 	.word	0x000862ff
   81a90:	00081fd9 	.word	0x00081fd9
   81a94:	00086363 	.word	0x00086363
   81a98:	00082053 	.word	0x00082053
   81a9c:	00081fa5 	.word	0x00081fa5

00081aa0 <usart_driver_getchar>:

uint8_t usart_driver_getchar(Usart * usart)
{
   81aa0:	b580      	push	{r7, lr}
   81aa2:	b084      	sub	sp, #16
   81aa4:	af00      	add	r7, sp, #0
   81aa6:	6078      	str	r0, [r7, #4]
	tcirc_buf * rxbuf = NULL;	 
   81aa8:	2300      	movs	r3, #0
   81aaa:	60fb      	str	r3, [r7, #12]
	if (rxbuf == NULL){
   81aac:	68fb      	ldr	r3, [r7, #12]
   81aae:	2b00      	cmp	r3, #0
   81ab0:	d116      	bne.n	81ae0 <usart_driver_getchar+0x40>
			if (usart == USART0) rxbuf = &rx0buf;
   81ab2:	687b      	ldr	r3, [r7, #4]
   81ab4:	4a0e      	ldr	r2, [pc, #56]	; (81af0 <usart_driver_getchar+0x50>)
   81ab6:	4293      	cmp	r3, r2
   81ab8:	d102      	bne.n	81ac0 <usart_driver_getchar+0x20>
   81aba:	4b0e      	ldr	r3, [pc, #56]	; (81af4 <usart_driver_getchar+0x54>)
   81abc:	60fb      	str	r3, [r7, #12]
   81abe:	e00f      	b.n	81ae0 <usart_driver_getchar+0x40>
			else if (usart == USART1) rxbuf = &rx1buf;
   81ac0:	687b      	ldr	r3, [r7, #4]
   81ac2:	4a0d      	ldr	r2, [pc, #52]	; (81af8 <usart_driver_getchar+0x58>)
   81ac4:	4293      	cmp	r3, r2
   81ac6:	d102      	bne.n	81ace <usart_driver_getchar+0x2e>
   81ac8:	4b0c      	ldr	r3, [pc, #48]	; (81afc <usart_driver_getchar+0x5c>)
   81aca:	60fb      	str	r3, [r7, #12]
   81acc:	e008      	b.n	81ae0 <usart_driver_getchar+0x40>
			else if (usart == USART2) rxbuf = &rx2buf;
   81ace:	687b      	ldr	r3, [r7, #4]
   81ad0:	4a0b      	ldr	r2, [pc, #44]	; (81b00 <usart_driver_getchar+0x60>)
   81ad2:	4293      	cmp	r3, r2
   81ad4:	d102      	bne.n	81adc <usart_driver_getchar+0x3c>
   81ad6:	4b0b      	ldr	r3, [pc, #44]	; (81b04 <usart_driver_getchar+0x64>)
   81ad8:	60fb      	str	r3, [r7, #12]
   81ada:	e001      	b.n	81ae0 <usart_driver_getchar+0x40>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
<<<<<<< HEAD
   81be0:	23ff      	movs	r3, #255	; 0xff
   81be2:	e003      	b.n	81bec <usart_driver_getchar+0x48>
	}
	return get_from_circ_buf(rxbuf);
   81be4:	68f8      	ldr	r0, [r7, #12]
   81be6:	4b09      	ldr	r3, [pc, #36]	; (81c0c <usart_driver_getchar+0x68>)
   81be8:	4798      	blx	r3
   81bea:	4603      	mov	r3, r0
}
   81bec:	4618      	mov	r0, r3
   81bee:	3710      	adds	r7, #16
   81bf0:	46bd      	mov	sp, r7
   81bf2:	bd80      	pop	{r7, pc}
   81bf4:	40090000 	.word	0x40090000
   81bf8:	20001448 	.word	0x20001448
   81bfc:	40094000 	.word	0x40094000
   81c00:	20001704 	.word	0x20001704
   81c04:	40098000 	.word	0x40098000
   81c08:	20001678 	.word	0x20001678
   81c0c:	00081d8b 	.word	0x00081d8b

00081c10 <generic_isr>:
=======
   81adc:	23ff      	movs	r3, #255	; 0xff
   81ade:	e003      	b.n	81ae8 <usart_driver_getchar+0x48>
	}
	return get_from_circ_buf(rxbuf);
   81ae0:	68f8      	ldr	r0, [r7, #12]
   81ae2:	4b09      	ldr	r3, [pc, #36]	; (81b08 <usart_driver_getchar+0x68>)
   81ae4:	4798      	blx	r3
   81ae6:	4603      	mov	r3, r0
}
   81ae8:	4618      	mov	r0, r3
   81aea:	3710      	adds	r7, #16
   81aec:	46bd      	mov	sp, r7
   81aee:	bd80      	pop	{r7, pc}
   81af0:	40090000 	.word	0x40090000
   81af4:	2000143c 	.word	0x2000143c
   81af8:	40094000 	.word	0x40094000
   81afc:	200016f8 	.word	0x200016f8
   81b00:	40098000 	.word	0x40098000
   81b04:	2000166c 	.word	0x2000166c
   81b08:	00086363 	.word	0x00086363

00081b0c <generic_isr>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
<<<<<<< HEAD
   81c10:	b580      	push	{r7, lr}
   81c12:	b086      	sub	sp, #24
   81c14:	af00      	add	r7, sp, #0
   81c16:	60f8      	str	r0, [r7, #12]
   81c18:	60b9      	str	r1, [r7, #8]
   81c1a:	607a      	str	r2, [r7, #4]
	uint32_t status;
	status = usart_get_status(usart);
   81c1c:	68f8      	ldr	r0, [r7, #12]
   81c1e:	4b18      	ldr	r3, [pc, #96]	; (81c80 <generic_isr+0x70>)
   81c20:	4798      	blx	r3
   81c22:	6178      	str	r0, [r7, #20]
	if (status & US_CSR_RXRDY){
   81c24:	697b      	ldr	r3, [r7, #20]
   81c26:	f003 0301 	and.w	r3, r3, #1
   81c2a:	2b00      	cmp	r3, #0
   81c2c:	d00b      	beq.n	81c46 <generic_isr+0x36>
		uint32_t temp;
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   81c2e:	68fb      	ldr	r3, [r7, #12]
   81c30:	699b      	ldr	r3, [r3, #24]
   81c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81c36:	613b      	str	r3, [r7, #16]
		add_to_circ_buf(rxbuf, temp, false);
   81c38:	693b      	ldr	r3, [r7, #16]
   81c3a:	b2db      	uxtb	r3, r3
   81c3c:	2200      	movs	r2, #0
   81c3e:	4619      	mov	r1, r3
   81c40:	68b8      	ldr	r0, [r7, #8]
   81c42:	4b10      	ldr	r3, [pc, #64]	; (81c84 <generic_isr+0x74>)
   81c44:	4798      	blx	r3
	}
	
	if (status & US_CSR_TXRDY){
   81c46:	697b      	ldr	r3, [r7, #20]
   81c48:	f003 0302 	and.w	r3, r3, #2
   81c4c:	2b00      	cmp	r3, #0
   81c4e:	d012      	beq.n	81c76 <generic_isr+0x66>
		if (circ_buf_has_char(txbuf)){
   81c50:	6878      	ldr	r0, [r7, #4]
   81c52:	4b0d      	ldr	r3, [pc, #52]	; (81c88 <generic_isr+0x78>)
   81c54:	4798      	blx	r3
   81c56:	4603      	mov	r3, r0
   81c58:	2b00      	cmp	r3, #0
   81c5a:	d008      	beq.n	81c6e <generic_isr+0x5e>
			//Still data to send
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   81c5c:	6878      	ldr	r0, [r7, #4]
   81c5e:	4b0b      	ldr	r3, [pc, #44]	; (81c8c <generic_isr+0x7c>)
   81c60:	4798      	blx	r3
   81c62:	4603      	mov	r3, r0
   81c64:	4619      	mov	r1, r3
   81c66:	68f8      	ldr	r0, [r7, #12]
   81c68:	4b09      	ldr	r3, [pc, #36]	; (81c90 <generic_isr+0x80>)
   81c6a:	4798      	blx	r3
=======
   81b0c:	b580      	push	{r7, lr}
   81b0e:	b086      	sub	sp, #24
   81b10:	af00      	add	r7, sp, #0
   81b12:	60f8      	str	r0, [r7, #12]
   81b14:	60b9      	str	r1, [r7, #8]
   81b16:	607a      	str	r2, [r7, #4]
	uint32_t status;
	status = usart_get_status(usart);
   81b18:	68f8      	ldr	r0, [r7, #12]
   81b1a:	4b18      	ldr	r3, [pc, #96]	; (81b7c <generic_isr+0x70>)
   81b1c:	4798      	blx	r3
   81b1e:	6178      	str	r0, [r7, #20]
	if (status & US_CSR_RXRDY){
   81b20:	697b      	ldr	r3, [r7, #20]
   81b22:	f003 0301 	and.w	r3, r3, #1
   81b26:	2b00      	cmp	r3, #0
   81b28:	d00b      	beq.n	81b42 <generic_isr+0x36>
		uint32_t temp;
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   81b2a:	68fb      	ldr	r3, [r7, #12]
   81b2c:	699b      	ldr	r3, [r3, #24]
   81b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81b32:	613b      	str	r3, [r7, #16]
		add_to_circ_buf(rxbuf, temp, false);
   81b34:	693b      	ldr	r3, [r7, #16]
   81b36:	b2db      	uxtb	r3, r3
   81b38:	2200      	movs	r2, #0
   81b3a:	4619      	mov	r1, r3
   81b3c:	68b8      	ldr	r0, [r7, #8]
   81b3e:	4b10      	ldr	r3, [pc, #64]	; (81b80 <generic_isr+0x74>)
   81b40:	4798      	blx	r3
	}
	
	if (status & US_CSR_TXRDY){
   81b42:	697b      	ldr	r3, [r7, #20]
   81b44:	f003 0302 	and.w	r3, r3, #2
   81b48:	2b00      	cmp	r3, #0
   81b4a:	d012      	beq.n	81b72 <generic_isr+0x66>
		if (circ_buf_has_char(txbuf)){
   81b4c:	6878      	ldr	r0, [r7, #4]
   81b4e:	4b0d      	ldr	r3, [pc, #52]	; (81b84 <generic_isr+0x78>)
   81b50:	4798      	blx	r3
   81b52:	4603      	mov	r3, r0
   81b54:	2b00      	cmp	r3, #0
   81b56:	d008      	beq.n	81b6a <generic_isr+0x5e>
			//Still data to send
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   81b58:	6878      	ldr	r0, [r7, #4]
   81b5a:	4b0b      	ldr	r3, [pc, #44]	; (81b88 <generic_isr+0x7c>)
   81b5c:	4798      	blx	r3
   81b5e:	4603      	mov	r3, r0
   81b60:	4619      	mov	r1, r3
   81b62:	68f8      	ldr	r0, [r7, #12]
   81b64:	4b09      	ldr	r3, [pc, #36]	; (81b8c <generic_isr+0x80>)
   81b66:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
		}
	}
}
<<<<<<< HEAD
   81c6c:	e003      	b.n	81c76 <generic_isr+0x66>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   81c6e:	2102      	movs	r1, #2
   81c70:	68f8      	ldr	r0, [r7, #12]
   81c72:	4b08      	ldr	r3, [pc, #32]	; (81c94 <generic_isr+0x84>)
   81c74:	4798      	blx	r3
}
   81c76:	bf00      	nop
   81c78:	3718      	adds	r7, #24
   81c7a:	46bd      	mov	sp, r7
   81c7c:	bd80      	pop	{r7, pc}
   81c7e:	bf00      	nop
   81c80:	0008665f 	.word	0x0008665f
   81c84:	00081d27 	.word	0x00081d27
   81c88:	00081dd5 	.word	0x00081dd5
   81c8c:	00081d8b 	.word	0x00081d8b
   81c90:	000866c3 	.word	0x000866c3
   81c94:	0008662f 	.word	0x0008662f

00081c98 <USART0_Handler>:

ISR(USART0_Handler)
{
   81c98:	b580      	push	{r7, lr}
   81c9a:	af00      	add	r7, sp, #0
	generic_isr(USART0, &rx0buf, &tx0buf);
   81c9c:	4a03      	ldr	r2, [pc, #12]	; (81cac <USART0_Handler+0x14>)
   81c9e:	4904      	ldr	r1, [pc, #16]	; (81cb0 <USART0_Handler+0x18>)
   81ca0:	4804      	ldr	r0, [pc, #16]	; (81cb4 <USART0_Handler+0x1c>)
   81ca2:	4b05      	ldr	r3, [pc, #20]	; (81cb8 <USART0_Handler+0x20>)
   81ca4:	4798      	blx	r3
}
   81ca6:	bf00      	nop
   81ca8:	bd80      	pop	{r7, pc}
   81caa:	bf00      	nop
   81cac:	20001790 	.word	0x20001790
   81cb0:	20001448 	.word	0x20001448
   81cb4:	40090000 	.word	0x40090000
   81cb8:	00081c11 	.word	0x00081c11

00081cbc <USART1_Handler>:

ISR(USART1_Handler)
{
   81cbc:	b580      	push	{r7, lr}
   81cbe:	af00      	add	r7, sp, #0
	generic_isr(USART1, &rx1buf, &tx1buf);
   81cc0:	4a03      	ldr	r2, [pc, #12]	; (81cd0 <USART1_Handler+0x14>)
   81cc2:	4904      	ldr	r1, [pc, #16]	; (81cd4 <USART1_Handler+0x18>)
   81cc4:	4804      	ldr	r0, [pc, #16]	; (81cd8 <USART1_Handler+0x1c>)
   81cc6:	4b05      	ldr	r3, [pc, #20]	; (81cdc <USART1_Handler+0x20>)
   81cc8:	4798      	blx	r3
}
   81cca:	bf00      	nop
   81ccc:	bd80      	pop	{r7, pc}
   81cce:	bf00      	nop
   81cd0:	20001560 	.word	0x20001560
   81cd4:	20001704 	.word	0x20001704
   81cd8:	40094000 	.word	0x40094000
   81cdc:	00081c11 	.word	0x00081c11

00081ce0 <USART2_Handler>:
=======
   81b68:	e003      	b.n	81b72 <generic_isr+0x66>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   81b6a:	2102      	movs	r1, #2
   81b6c:	68f8      	ldr	r0, [r7, #12]
   81b6e:	4b08      	ldr	r3, [pc, #32]	; (81b90 <generic_isr+0x84>)
   81b70:	4798      	blx	r3
}
   81b72:	bf00      	nop
   81b74:	3718      	adds	r7, #24
   81b76:	46bd      	mov	sp, r7
   81b78:	bd80      	pop	{r7, pc}
   81b7a:	bf00      	nop
   81b7c:	00081fef 	.word	0x00081fef
   81b80:	000862ff 	.word	0x000862ff
   81b84:	000863ad 	.word	0x000863ad
   81b88:	00086363 	.word	0x00086363
   81b8c:	00082053 	.word	0x00082053
   81b90:	00081fbf 	.word	0x00081fbf

00081b94 <USART0_Handler>:

ISR(USART0_Handler)
{
   81b94:	b580      	push	{r7, lr}
   81b96:	af00      	add	r7, sp, #0
	generic_isr(USART0, &rx0buf, &tx0buf);
   81b98:	4a03      	ldr	r2, [pc, #12]	; (81ba8 <USART0_Handler+0x14>)
   81b9a:	4904      	ldr	r1, [pc, #16]	; (81bac <USART0_Handler+0x18>)
   81b9c:	4804      	ldr	r0, [pc, #16]	; (81bb0 <USART0_Handler+0x1c>)
   81b9e:	4b05      	ldr	r3, [pc, #20]	; (81bb4 <USART0_Handler+0x20>)
   81ba0:	4798      	blx	r3
}
   81ba2:	bf00      	nop
   81ba4:	bd80      	pop	{r7, pc}
   81ba6:	bf00      	nop
   81ba8:	20001784 	.word	0x20001784
   81bac:	2000143c 	.word	0x2000143c
   81bb0:	40090000 	.word	0x40090000
   81bb4:	00081b0d 	.word	0x00081b0d

00081bb8 <USART1_Handler>:

ISR(USART1_Handler)
{
   81bb8:	b580      	push	{r7, lr}
   81bba:	af00      	add	r7, sp, #0
	generic_isr(USART1, &rx1buf, &tx1buf);
   81bbc:	4a03      	ldr	r2, [pc, #12]	; (81bcc <USART1_Handler+0x14>)
   81bbe:	4904      	ldr	r1, [pc, #16]	; (81bd0 <USART1_Handler+0x18>)
   81bc0:	4804      	ldr	r0, [pc, #16]	; (81bd4 <USART1_Handler+0x1c>)
   81bc2:	4b05      	ldr	r3, [pc, #20]	; (81bd8 <USART1_Handler+0x20>)
   81bc4:	4798      	blx	r3
}
   81bc6:	bf00      	nop
   81bc8:	bd80      	pop	{r7, pc}
   81bca:	bf00      	nop
   81bcc:	20001554 	.word	0x20001554
   81bd0:	200016f8 	.word	0x200016f8
   81bd4:	40094000 	.word	0x40094000
   81bd8:	00081b0d 	.word	0x00081b0d

00081bdc <USART2_Handler>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
<<<<<<< HEAD
   81ce0:	b580      	push	{r7, lr}
   81ce2:	af00      	add	r7, sp, #0
	generic_isr(USART2, &rx2buf, &tx2buf);
   81ce4:	4a03      	ldr	r2, [pc, #12]	; (81cf4 <USART2_Handler+0x14>)
   81ce6:	4904      	ldr	r1, [pc, #16]	; (81cf8 <USART2_Handler+0x18>)
   81ce8:	4804      	ldr	r0, [pc, #16]	; (81cfc <USART2_Handler+0x1c>)
   81cea:	4b05      	ldr	r3, [pc, #20]	; (81d00 <USART2_Handler+0x20>)
   81cec:	4798      	blx	r3
}
   81cee:	bf00      	nop
   81cf0:	bd80      	pop	{r7, pc}
   81cf2:	bf00      	nop
   81cf4:	200013bc 	.word	0x200013bc
   81cf8:	20001678 	.word	0x20001678
   81cfc:	40098000 	.word	0x40098000
   81d00:	00081c11 	.word	0x00081c11

00081d04 <init_circ_buf>:
    @brief Initializes the circular buffer.

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
   81d04:	b480      	push	{r7}
   81d06:	b083      	sub	sp, #12
   81d08:	af00      	add	r7, sp, #0
   81d0a:	6078      	str	r0, [r7, #4]
    cbuf->head = cbuf->tail = 0;
   81d0c:	2300      	movs	r3, #0
   81d0e:	687a      	ldr	r2, [r7, #4]
   81d10:	6053      	str	r3, [r2, #4]
   81d12:	687a      	ldr	r2, [r7, #4]
   81d14:	6013      	str	r3, [r2, #0]
    cbuf->dropped = 0;
   81d16:	687b      	ldr	r3, [r7, #4]
   81d18:	2200      	movs	r2, #0
   81d1a:	609a      	str	r2, [r3, #8]
}
   81d1c:	bf00      	nop
   81d1e:	370c      	adds	r7, #12
   81d20:	46bd      	mov	sp, r7
   81d22:	bc80      	pop	{r7}
   81d24:	4770      	bx	lr

00081d26 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   81d26:	b480      	push	{r7}
   81d28:	b085      	sub	sp, #20
   81d2a:	af00      	add	r7, sp, #0
   81d2c:	6078      	str	r0, [r7, #4]
   81d2e:	460b      	mov	r3, r1
   81d30:	70fb      	strb	r3, [r7, #3]
   81d32:	4613      	mov	r3, r2
   81d34:	70bb      	strb	r3, [r7, #2]
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   81d36:	687b      	ldr	r3, [r7, #4]
   81d38:	681b      	ldr	r3, [r3, #0]
   81d3a:	60fb      	str	r3, [r7, #12]
    newhead++;
   81d3c:	68fb      	ldr	r3, [r7, #12]
   81d3e:	3301      	adds	r3, #1
   81d40:	60fb      	str	r3, [r7, #12]
    if (newhead >= CIRCBUFSIZE)
   81d42:	68fb      	ldr	r3, [r7, #12]
   81d44:	2b7f      	cmp	r3, #127	; 0x7f
   81d46:	d90e      	bls.n	81d66 <add_to_circ_buf+0x40>
        newhead = 0;
   81d48:	2300      	movs	r3, #0
   81d4a:	60fb      	str	r3, [r7, #12]
    while (newhead == cbuf->tail)
   81d4c:	e00b      	b.n	81d66 <add_to_circ_buf+0x40>
    {
        if (!block)
   81d4e:	78bb      	ldrb	r3, [r7, #2]
   81d50:	f083 0301 	eor.w	r3, r3, #1
   81d54:	b2db      	uxtb	r3, r3
   81d56:	2b00      	cmp	r3, #0
   81d58:	d005      	beq.n	81d66 <add_to_circ_buf+0x40>
        {
            cbuf->dropped++;
   81d5a:	687b      	ldr	r3, [r7, #4]
   81d5c:	689b      	ldr	r3, [r3, #8]
   81d5e:	1c5a      	adds	r2, r3, #1
   81d60:	687b      	ldr	r3, [r7, #4]
   81d62:	609a      	str	r2, [r3, #8]
            return;
   81d64:	e00d      	b.n	81d82 <add_to_circ_buf+0x5c>
    while (newhead == cbuf->tail)
   81d66:	687b      	ldr	r3, [r7, #4]
   81d68:	685b      	ldr	r3, [r3, #4]
   81d6a:	68fa      	ldr	r2, [r7, #12]
   81d6c:	429a      	cmp	r2, r3
   81d6e:	d0ee      	beq.n	81d4e <add_to_circ_buf+0x28>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   81d70:	687b      	ldr	r3, [r7, #4]
   81d72:	681b      	ldr	r3, [r3, #0]
   81d74:	687a      	ldr	r2, [r7, #4]
   81d76:	4413      	add	r3, r2
   81d78:	78fa      	ldrb	r2, [r7, #3]
   81d7a:	731a      	strb	r2, [r3, #12]
    cbuf->head = newhead;
   81d7c:	687b      	ldr	r3, [r7, #4]
   81d7e:	68fa      	ldr	r2, [r7, #12]
   81d80:	601a      	str	r2, [r3, #0]
}
   81d82:	3714      	adds	r7, #20
   81d84:	46bd      	mov	sp, r7
   81d86:	bc80      	pop	{r7}
   81d88:	4770      	bx	lr

00081d8a <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   81d8a:	b480      	push	{r7}
   81d8c:	b085      	sub	sp, #20
   81d8e:	af00      	add	r7, sp, #0
   81d90:	6078      	str	r0, [r7, #4]
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   81d92:	687b      	ldr	r3, [r7, #4]
   81d94:	685b      	ldr	r3, [r3, #4]
   81d96:	60fb      	str	r3, [r7, #12]
    uint8_t retval = cbuf->buf[newtail];
   81d98:	687a      	ldr	r2, [r7, #4]
   81d9a:	68fb      	ldr	r3, [r7, #12]
   81d9c:	4413      	add	r3, r2
   81d9e:	330c      	adds	r3, #12
   81da0:	781b      	ldrb	r3, [r3, #0]
   81da2:	72fb      	strb	r3, [r7, #11]

    if (newtail == cbuf->head)
   81da4:	687b      	ldr	r3, [r7, #4]
   81da6:	681b      	ldr	r3, [r3, #0]
   81da8:	68fa      	ldr	r2, [r7, #12]
   81daa:	429a      	cmp	r2, r3
   81dac:	d101      	bne.n	81db2 <get_from_circ_buf+0x28>
        return SERIAL_ERR;
   81dae:	23ff      	movs	r3, #255	; 0xff
   81db0:	e00b      	b.n	81dca <get_from_circ_buf+0x40>

    newtail++;
   81db2:	68fb      	ldr	r3, [r7, #12]
   81db4:	3301      	adds	r3, #1
   81db6:	60fb      	str	r3, [r7, #12]
    if (newtail >= CIRCBUFSIZE)
   81db8:	68fb      	ldr	r3, [r7, #12]
   81dba:	2b7f      	cmp	r3, #127	; 0x7f
   81dbc:	d901      	bls.n	81dc2 <get_from_circ_buf+0x38>
        // Rollover
        newtail = 0;
   81dbe:	2300      	movs	r3, #0
   81dc0:	60fb      	str	r3, [r7, #12]
    cbuf->tail = newtail;
   81dc2:	687b      	ldr	r3, [r7, #4]
   81dc4:	68fa      	ldr	r2, [r7, #12]
   81dc6:	605a      	str	r2, [r3, #4]

    return retval;
   81dc8:	7afb      	ldrb	r3, [r7, #11]
}
   81dca:	4618      	mov	r0, r3
   81dcc:	3714      	adds	r7, #20
   81dce:	46bd      	mov	sp, r7
   81dd0:	bc80      	pop	{r7}
   81dd2:	4770      	bx	lr

00081dd4 <circ_buf_has_char>:

    @retval true if buffer contains data.
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
   81dd4:	b480      	push	{r7}
   81dd6:	b085      	sub	sp, #20
   81dd8:	af00      	add	r7, sp, #0
   81dda:	6078      	str	r0, [r7, #4]
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   81ddc:	687b      	ldr	r3, [r7, #4]
   81dde:	681b      	ldr	r3, [r3, #0]
   81de0:	60fb      	str	r3, [r7, #12]
    return (head != cbuf->tail);
   81de2:	687b      	ldr	r3, [r7, #4]
   81de4:	685b      	ldr	r3, [r3, #4]
   81de6:	68fa      	ldr	r2, [r7, #12]
   81de8:	429a      	cmp	r2, r3
   81dea:	bf14      	ite	ne
   81dec:	2301      	movne	r3, #1
   81dee:	2300      	moveq	r3, #0
   81df0:	b2db      	uxtb	r3, r3
}
   81df2:	4618      	mov	r0, r3
   81df4:	3714      	adds	r7, #20
   81df6:	46bd      	mov	sp, r7
   81df8:	bc80      	pop	{r7}
   81dfa:	4770      	bx	lr

00081dfc <circ_buf_count>:
   @param cbuf is the circular buffer to query

   @return count Number of chars in buffer.
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
   81dfc:	b480      	push	{r7}
   81dfe:	b085      	sub	sp, #20
   81e00:	af00      	add	r7, sp, #0
   81e02:	6078      	str	r0, [r7, #4]
    int count;

    count = cbuf->head;
   81e04:	687b      	ldr	r3, [r7, #4]
   81e06:	681b      	ldr	r3, [r3, #0]
   81e08:	60fb      	str	r3, [r7, #12]
    count -= cbuf->tail;
   81e0a:	687b      	ldr	r3, [r7, #4]
   81e0c:	685b      	ldr	r3, [r3, #4]
   81e0e:	68fa      	ldr	r2, [r7, #12]
   81e10:	1ad3      	subs	r3, r2, r3
   81e12:	60fb      	str	r3, [r7, #12]
    if (count < 0)
   81e14:	68fb      	ldr	r3, [r7, #12]
   81e16:	2b00      	cmp	r3, #0
   81e18:	da02      	bge.n	81e20 <circ_buf_count+0x24>
        count += CIRCBUFSIZE;
   81e1a:	68fb      	ldr	r3, [r7, #12]
   81e1c:	3380      	adds	r3, #128	; 0x80
   81e1e:	60fb      	str	r3, [r7, #12]
    return (unsigned int)count;
   81e20:	68fb      	ldr	r3, [r7, #12]
}
   81e22:	4618      	mov	r0, r3
   81e24:	3714      	adds	r7, #20
   81e26:	46bd      	mov	sp, r7
   81e28:	bc80      	pop	{r7}
   81e2a:	4770      	bx	lr

00081e2c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   81e2c:	b480      	push	{r7}
   81e2e:	b083      	sub	sp, #12
   81e30:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81e32:	f3ef 8310 	mrs	r3, PRIMASK
   81e36:	603b      	str	r3, [r7, #0]
  return(result);
   81e38:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   81e3a:	2b00      	cmp	r3, #0
   81e3c:	bf0c      	ite	eq
   81e3e:	2301      	moveq	r3, #1
   81e40:	2300      	movne	r3, #0
   81e42:	b2db      	uxtb	r3, r3
   81e44:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   81e46:	b672      	cpsid	i
}
   81e48:	bf00      	nop
  __ASM volatile ("dmb");
   81e4a:	f3bf 8f5f 	dmb	sy
}
   81e4e:	bf00      	nop
	cpu_irq_disable();
   81e50:	4b04      	ldr	r3, [pc, #16]	; (81e64 <cpu_irq_save+0x38>)
   81e52:	2200      	movs	r2, #0
   81e54:	701a      	strb	r2, [r3, #0]
	return flags;
   81e56:	687b      	ldr	r3, [r7, #4]
}
   81e58:	4618      	mov	r0, r3
   81e5a:	370c      	adds	r7, #12
   81e5c:	46bd      	mov	sp, r7
   81e5e:	bc80      	pop	{r7}
   81e60:	4770      	bx	lr
   81e62:	bf00      	nop
   81e64:	20000284 	.word	0x20000284

00081e68 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   81e68:	b480      	push	{r7}
   81e6a:	b083      	sub	sp, #12
   81e6c:	af00      	add	r7, sp, #0
   81e6e:	6078      	str	r0, [r7, #4]
	return (flags);
   81e70:	687b      	ldr	r3, [r7, #4]
   81e72:	2b00      	cmp	r3, #0
   81e74:	bf14      	ite	ne
   81e76:	2301      	movne	r3, #1
   81e78:	2300      	moveq	r3, #0
   81e7a:	b2db      	uxtb	r3, r3
}
   81e7c:	4618      	mov	r0, r3
   81e7e:	370c      	adds	r7, #12
   81e80:	46bd      	mov	sp, r7
   81e82:	bc80      	pop	{r7}
   81e84:	4770      	bx	lr
   81e86:	0000      	movs	r0, r0

00081e88 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   81e88:	b580      	push	{r7, lr}
   81e8a:	b082      	sub	sp, #8
   81e8c:	af00      	add	r7, sp, #0
   81e8e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   81e90:	6878      	ldr	r0, [r7, #4]
   81e92:	4b08      	ldr	r3, [pc, #32]	; (81eb4 <cpu_irq_restore+0x2c>)
   81e94:	4798      	blx	r3
   81e96:	4603      	mov	r3, r0
   81e98:	2b00      	cmp	r3, #0
   81e9a:	d007      	beq.n	81eac <cpu_irq_restore+0x24>
		cpu_irq_enable();
   81e9c:	4b06      	ldr	r3, [pc, #24]	; (81eb8 <cpu_irq_restore+0x30>)
   81e9e:	2201      	movs	r2, #1
   81ea0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   81ea2:	f3bf 8f5f 	dmb	sy
}
   81ea6:	bf00      	nop
  __ASM volatile ("cpsie i");
   81ea8:	b662      	cpsie	i
}
   81eaa:	bf00      	nop
}
   81eac:	bf00      	nop
   81eae:	3708      	adds	r7, #8
   81eb0:	46bd      	mov	sp, r7
   81eb2:	bd80      	pop	{r7, pc}
   81eb4:	00081e69 	.word	0x00081e69
   81eb8:	20000284 	.word	0x20000284

00081ebc <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   81ebc:	b580      	push	{r7, lr}
   81ebe:	b086      	sub	sp, #24
   81ec0:	af00      	add	r7, sp, #0
   81ec2:	60f8      	str	r0, [r7, #12]
   81ec4:	60b9      	str	r1, [r7, #8]
   81ec6:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   81ec8:	68bb      	ldr	r3, [r7, #8]
   81eca:	2b0e      	cmp	r3, #14
   81ecc:	d002      	beq.n	81ed4 <efc_perform_command+0x18>
   81ece:	68bb      	ldr	r3, [r7, #8]
   81ed0:	2b0f      	cmp	r3, #15
   81ed2:	d102      	bne.n	81eda <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   81ed4:	f04f 33ff 	mov.w	r3, #4294967295
   81ed8:	e016      	b.n	81f08 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   81eda:	4b0d      	ldr	r3, [pc, #52]	; (81f10 <efc_perform_command+0x54>)
   81edc:	4798      	blx	r3
   81ede:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81ee0:	687b      	ldr	r3, [r7, #4]
   81ee2:	021b      	lsls	r3, r3, #8
   81ee4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   81ee8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   81eec:	68ba      	ldr	r2, [r7, #8]
   81eee:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81ef0:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   81ef2:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   81ef6:	4619      	mov	r1, r3
   81ef8:	68f8      	ldr	r0, [r7, #12]
   81efa:	4b06      	ldr	r3, [pc, #24]	; (81f14 <efc_perform_command+0x58>)
   81efc:	4798      	blx	r3
   81efe:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   81f00:	6978      	ldr	r0, [r7, #20]
   81f02:	4b05      	ldr	r3, [pc, #20]	; (81f18 <efc_perform_command+0x5c>)
   81f04:	4798      	blx	r3
	return result;
   81f06:	693b      	ldr	r3, [r7, #16]
}
   81f08:	4618      	mov	r0, r3
   81f0a:	3718      	adds	r7, #24
   81f0c:	46bd      	mov	sp, r7
   81f0e:	bd80      	pop	{r7, pc}
   81f10:	00081e2d 	.word	0x00081e2d
   81f14:	200000bd 	.word	0x200000bd
   81f18:	00081e89 	.word	0x00081e89

00081f1c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81f1c:	b480      	push	{r7}
   81f1e:	af00      	add	r7, sp, #0
	while (1) {
   81f20:	e7fe      	b.n	81f20 <Dummy_Handler+0x4>
   81f22:	0000      	movs	r0, r0

00081f24 <flash_read_unique_id>:
=======
   81bdc:	b580      	push	{r7, lr}
   81bde:	af00      	add	r7, sp, #0
	generic_isr(USART2, &rx2buf, &tx2buf);
   81be0:	4a03      	ldr	r2, [pc, #12]	; (81bf0 <USART2_Handler+0x14>)
   81be2:	4904      	ldr	r1, [pc, #16]	; (81bf4 <USART2_Handler+0x18>)
   81be4:	4804      	ldr	r0, [pc, #16]	; (81bf8 <USART2_Handler+0x1c>)
   81be6:	4b05      	ldr	r3, [pc, #20]	; (81bfc <USART2_Handler+0x20>)
   81be8:	4798      	blx	r3
}
   81bea:	bf00      	nop
   81bec:	bd80      	pop	{r7, pc}
   81bee:	bf00      	nop
   81bf0:	200013b0 	.word	0x200013b0
   81bf4:	2000166c 	.word	0x2000166c
   81bf8:	40098000 	.word	0x40098000
   81bfc:	00081b0d 	.word	0x00081b0d

00081c00 <flash_read_unique_id>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
<<<<<<< HEAD
   81f24:	b590      	push	{r4, r7, lr}
   81f26:	b08b      	sub	sp, #44	; 0x2c
   81f28:	af02      	add	r7, sp, #8
   81f2a:	6078      	str	r0, [r7, #4]
   81f2c:	6039      	str	r1, [r7, #0]
=======
   81c00:	b590      	push	{r4, r7, lr}
   81c02:	b08b      	sub	sp, #44	; 0x2c
   81c04:	af02      	add	r7, sp, #8
   81c06:	6078      	str	r0, [r7, #4]
   81c08:	6039      	str	r1, [r7, #0]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
<<<<<<< HEAD
   81f2e:	f107 030c 	add.w	r3, r7, #12
   81f32:	2204      	movs	r2, #4
   81f34:	9200      	str	r2, [sp, #0]
   81f36:	220f      	movs	r2, #15
   81f38:	210e      	movs	r1, #14
   81f3a:	4814      	ldr	r0, [pc, #80]	; (81f8c <flash_read_unique_id+0x68>)
   81f3c:	4c14      	ldr	r4, [pc, #80]	; (81f90 <flash_read_unique_id+0x6c>)
   81f3e:	47a0      	blx	r4
   81f40:	4603      	mov	r3, r0
   81f42:	2b00      	cmp	r3, #0
   81f44:	d001      	beq.n	81f4a <flash_read_unique_id+0x26>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81f46:	2310      	movs	r3, #16
   81f48:	e01b      	b.n	81f82 <flash_read_unique_id+0x5e>
	}

	if (ul_size > 4) {
   81f4a:	683b      	ldr	r3, [r7, #0]
   81f4c:	2b04      	cmp	r3, #4
   81f4e:	d901      	bls.n	81f54 <flash_read_unique_id+0x30>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   81f50:	2304      	movs	r3, #4
   81f52:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81f54:	2300      	movs	r3, #0
   81f56:	61fb      	str	r3, [r7, #28]
   81f58:	e00e      	b.n	81f78 <flash_read_unique_id+0x54>
		pul_data[ul_idx] = uid_buf[ul_idx];
   81f5a:	69fb      	ldr	r3, [r7, #28]
   81f5c:	009b      	lsls	r3, r3, #2
   81f5e:	687a      	ldr	r2, [r7, #4]
   81f60:	441a      	add	r2, r3
   81f62:	69fb      	ldr	r3, [r7, #28]
   81f64:	009b      	lsls	r3, r3, #2
   81f66:	f107 0120 	add.w	r1, r7, #32
   81f6a:	440b      	add	r3, r1
   81f6c:	f853 3c14 	ldr.w	r3, [r3, #-20]
   81f70:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81f72:	69fb      	ldr	r3, [r7, #28]
   81f74:	3301      	adds	r3, #1
   81f76:	61fb      	str	r3, [r7, #28]
   81f78:	69fa      	ldr	r2, [r7, #28]
   81f7a:	683b      	ldr	r3, [r7, #0]
   81f7c:	429a      	cmp	r2, r3
   81f7e:	d3ec      	bcc.n	81f5a <flash_read_unique_id+0x36>
	}

	return FLASH_RC_OK;
   81f80:	2300      	movs	r3, #0
}
   81f82:	4618      	mov	r0, r3
   81f84:	3724      	adds	r7, #36	; 0x24
   81f86:	46bd      	mov	sp, r7
   81f88:	bd90      	pop	{r4, r7, pc}
   81f8a:	bf00      	nop
   81f8c:	400e0800 	.word	0x400e0800
   81f90:	20000001 	.word	0x20000001

00081f94 <sysclk_enable_peripheral_clock>:
{
   81f94:	b580      	push	{r7, lr}
   81f96:	b082      	sub	sp, #8
   81f98:	af00      	add	r7, sp, #0
   81f9a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81f9c:	6878      	ldr	r0, [r7, #4]
   81f9e:	4b03      	ldr	r3, [pc, #12]	; (81fac <sysclk_enable_peripheral_clock+0x18>)
   81fa0:	4798      	blx	r3
}
   81fa2:	bf00      	nop
   81fa4:	3708      	adds	r7, #8
   81fa6:	46bd      	mov	sp, r7
   81fa8:	bd80      	pop	{r7, pc}
   81faa:	bf00      	nop
   81fac:	000829dd 	.word	0x000829dd

00081fb0 <ioport_init>:
{
   81fb0:	b580      	push	{r7, lr}
   81fb2:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   81fb4:	200a      	movs	r0, #10
   81fb6:	4b04      	ldr	r3, [pc, #16]	; (81fc8 <ioport_init+0x18>)
   81fb8:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   81fba:	200b      	movs	r0, #11
   81fbc:	4b02      	ldr	r3, [pc, #8]	; (81fc8 <ioport_init+0x18>)
   81fbe:	4798      	blx	r3
}
   81fc0:	bf00      	nop
}
   81fc2:	bf00      	nop
   81fc4:	bd80      	pop	{r7, pc}
   81fc6:	bf00      	nop
   81fc8:	00081f95 	.word	0x00081f95

00081fcc <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   81fcc:	b580      	push	{r7, lr}
   81fce:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81fd0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81fd4:	201d      	movs	r0, #29
   81fd6:	4b0d      	ldr	r3, [pc, #52]	; (8200c <iopins_normal+0x40>)
   81fd8:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81fda:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81fde:	201f      	movs	r0, #31
   81fe0:	4b0a      	ldr	r3, [pc, #40]	; (8200c <iopins_normal+0x40>)
   81fe2:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   81fe4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81fe8:	201d      	movs	r0, #29
   81fea:	4b08      	ldr	r3, [pc, #32]	; (8200c <iopins_normal+0x40>)
   81fec:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81fee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81ff2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   81ff6:	4806      	ldr	r0, [pc, #24]	; (82010 <iopins_normal+0x44>)
   81ff8:	4b06      	ldr	r3, [pc, #24]	; (82014 <iopins_normal+0x48>)
   81ffa:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   81ffc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82000:	2038      	movs	r0, #56	; 0x38
   82002:	4b02      	ldr	r3, [pc, #8]	; (8200c <iopins_normal+0x40>)
   82004:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   82006:	bf00      	nop
   82008:	bd80      	pop	{r7, pc}
   8200a:	bf00      	nop
   8200c:	00082379 	.word	0x00082379
   82010:	400e0c00 	.word	0x400e0c00
   82014:	000824a9 	.word	0x000824a9

00082018 <board_init>:

void board_init(void)
{
   82018:	b580      	push	{r7, lr}
   8201a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8201c:	4b04      	ldr	r3, [pc, #16]	; (82030 <board_init+0x18>)
   8201e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82022:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   82024:	4b03      	ldr	r3, [pc, #12]	; (82034 <board_init+0x1c>)
   82026:	4798      	blx	r3

	iopins_normal();
   82028:	4b03      	ldr	r3, [pc, #12]	; (82038 <board_init+0x20>)
   8202a:	4798      	blx	r3
=======
   81c0a:	f107 030c 	add.w	r3, r7, #12
   81c0e:	2204      	movs	r2, #4
   81c10:	9200      	str	r2, [sp, #0]
   81c12:	220f      	movs	r2, #15
   81c14:	210e      	movs	r1, #14
   81c16:	4814      	ldr	r0, [pc, #80]	; (81c68 <flash_read_unique_id+0x68>)
   81c18:	4c14      	ldr	r4, [pc, #80]	; (81c6c <flash_read_unique_id+0x6c>)
   81c1a:	47a0      	blx	r4
   81c1c:	4603      	mov	r3, r0
   81c1e:	2b00      	cmp	r3, #0
   81c20:	d001      	beq.n	81c26 <flash_read_unique_id+0x26>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81c22:	2310      	movs	r3, #16
   81c24:	e01b      	b.n	81c5e <flash_read_unique_id+0x5e>
	}

	if (ul_size > 4) {
   81c26:	683b      	ldr	r3, [r7, #0]
   81c28:	2b04      	cmp	r3, #4
   81c2a:	d901      	bls.n	81c30 <flash_read_unique_id+0x30>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   81c2c:	2304      	movs	r3, #4
   81c2e:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81c30:	2300      	movs	r3, #0
   81c32:	61fb      	str	r3, [r7, #28]
   81c34:	e00e      	b.n	81c54 <flash_read_unique_id+0x54>
		pul_data[ul_idx] = uid_buf[ul_idx];
   81c36:	69fb      	ldr	r3, [r7, #28]
   81c38:	009b      	lsls	r3, r3, #2
   81c3a:	687a      	ldr	r2, [r7, #4]
   81c3c:	441a      	add	r2, r3
   81c3e:	69fb      	ldr	r3, [r7, #28]
   81c40:	009b      	lsls	r3, r3, #2
   81c42:	f107 0120 	add.w	r1, r7, #32
   81c46:	440b      	add	r3, r1
   81c48:	f853 3c14 	ldr.w	r3, [r3, #-20]
   81c4c:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81c4e:	69fb      	ldr	r3, [r7, #28]
   81c50:	3301      	adds	r3, #1
   81c52:	61fb      	str	r3, [r7, #28]
   81c54:	69fa      	ldr	r2, [r7, #28]
   81c56:	683b      	ldr	r3, [r7, #0]
   81c58:	429a      	cmp	r2, r3
   81c5a:	d3ec      	bcc.n	81c36 <flash_read_unique_id+0x36>
	}

	return FLASH_RC_OK;
   81c5c:	2300      	movs	r3, #0
}
   81c5e:	4618      	mov	r0, r3
   81c60:	3724      	adds	r7, #36	; 0x24
   81c62:	46bd      	mov	sp, r7
   81c64:	bd90      	pop	{r4, r7, pc}
   81c66:	bf00      	nop
   81c68:	400e0800 	.word	0x400e0800
   81c6c:	20000001 	.word	0x20000001

00081c70 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   81c70:	b480      	push	{r7}
   81c72:	b089      	sub	sp, #36	; 0x24
   81c74:	af00      	add	r7, sp, #0
   81c76:	60f8      	str	r0, [r7, #12]
   81c78:	60b9      	str	r1, [r7, #8]
   81c7a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   81c7c:	68bb      	ldr	r3, [r7, #8]
   81c7e:	011b      	lsls	r3, r3, #4
   81c80:	687a      	ldr	r2, [r7, #4]
   81c82:	429a      	cmp	r2, r3
   81c84:	d302      	bcc.n	81c8c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   81c86:	2310      	movs	r3, #16
   81c88:	61fb      	str	r3, [r7, #28]
   81c8a:	e001      	b.n	81c90 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   81c8c:	2308      	movs	r3, #8
   81c8e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   81c90:	687b      	ldr	r3, [r7, #4]
   81c92:	00da      	lsls	r2, r3, #3
   81c94:	69fb      	ldr	r3, [r7, #28]
   81c96:	68b9      	ldr	r1, [r7, #8]
   81c98:	fb01 f303 	mul.w	r3, r1, r3
   81c9c:	085b      	lsrs	r3, r3, #1
   81c9e:	441a      	add	r2, r3
   81ca0:	69fb      	ldr	r3, [r7, #28]
   81ca2:	68b9      	ldr	r1, [r7, #8]
   81ca4:	fb01 f303 	mul.w	r3, r1, r3
   81ca8:	fbb2 f3f3 	udiv	r3, r2, r3
   81cac:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   81cae:	69bb      	ldr	r3, [r7, #24]
   81cb0:	08db      	lsrs	r3, r3, #3
   81cb2:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   81cb4:	69bb      	ldr	r3, [r7, #24]
   81cb6:	f003 0307 	and.w	r3, r3, #7
   81cba:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   81cbc:	697b      	ldr	r3, [r7, #20]
   81cbe:	2b00      	cmp	r3, #0
   81cc0:	d003      	beq.n	81cca <usart_set_async_baudrate+0x5a>
   81cc2:	697b      	ldr	r3, [r7, #20]
   81cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   81cc8:	d301      	bcc.n	81cce <usart_set_async_baudrate+0x5e>
		return 1;
   81cca:	2301      	movs	r3, #1
   81ccc:	e00f      	b.n	81cee <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   81cce:	69fb      	ldr	r3, [r7, #28]
   81cd0:	2b08      	cmp	r3, #8
   81cd2:	d105      	bne.n	81ce0 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   81cd4:	68fb      	ldr	r3, [r7, #12]
   81cd6:	685b      	ldr	r3, [r3, #4]
   81cd8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   81cdc:	68fb      	ldr	r3, [r7, #12]
   81cde:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   81ce0:	693b      	ldr	r3, [r7, #16]
   81ce2:	041a      	lsls	r2, r3, #16
   81ce4:	697b      	ldr	r3, [r7, #20]
   81ce6:	431a      	orrs	r2, r3
   81ce8:	68fb      	ldr	r3, [r7, #12]
   81cea:	621a      	str	r2, [r3, #32]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	return 0;
   81cec:	2300      	movs	r3, #0
}
<<<<<<< HEAD
   8202c:	bf00      	nop
   8202e:	bd80      	pop	{r7, pc}
   82030:	400e1250 	.word	0x400e1250
   82034:	00081fb1 	.word	0x00081fb1
   82038:	00081fcd 	.word	0x00081fcd

0008203c <cpu_irq_enter_critical>:
=======
   81cee:	4618      	mov	r0, r3
   81cf0:	3724      	adds	r7, #36	; 0x24
   81cf2:	46bd      	mov	sp, r7
   81cf4:	bc80      	pop	{r7}
   81cf6:	4770      	bx	lr

00081cf8 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
<<<<<<< HEAD
   8203c:	b480      	push	{r7}
   8203e:	b083      	sub	sp, #12
   82040:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   82042:	4b11      	ldr	r3, [pc, #68]	; (82088 <cpu_irq_enter_critical+0x4c>)
   82044:	681b      	ldr	r3, [r3, #0]
   82046:	2b00      	cmp	r3, #0
   82048:	d114      	bne.n	82074 <cpu_irq_enter_critical+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8204a:	f3ef 8310 	mrs	r3, PRIMASK
   8204e:	607b      	str	r3, [r7, #4]
  return(result);
   82050:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   82052:	2b00      	cmp	r3, #0
   82054:	d10b      	bne.n	8206e <cpu_irq_enter_critical+0x32>
  __ASM volatile ("cpsid i");
   82056:	b672      	cpsid	i
}
   82058:	bf00      	nop
  __ASM volatile ("dmb");
   8205a:	f3bf 8f5f 	dmb	sy
}
   8205e:	bf00      	nop
			cpu_irq_disable();
   82060:	4b0a      	ldr	r3, [pc, #40]	; (8208c <cpu_irq_enter_critical+0x50>)
   82062:	2200      	movs	r2, #0
   82064:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   82066:	4b0a      	ldr	r3, [pc, #40]	; (82090 <cpu_irq_enter_critical+0x54>)
   82068:	2201      	movs	r2, #1
   8206a:	701a      	strb	r2, [r3, #0]
   8206c:	e002      	b.n	82074 <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   8206e:	4b08      	ldr	r3, [pc, #32]	; (82090 <cpu_irq_enter_critical+0x54>)
   82070:	2200      	movs	r2, #0
   82072:	701a      	strb	r2, [r3, #0]
		}
=======
   81cf8:	b480      	push	{r7}
   81cfa:	b087      	sub	sp, #28
   81cfc:	af00      	add	r7, sp, #0
   81cfe:	60f8      	str	r0, [r7, #12]
   81d00:	60b9      	str	r1, [r7, #8]
   81d02:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   81d04:	68bb      	ldr	r3, [r7, #8]
   81d06:	085a      	lsrs	r2, r3, #1
   81d08:	687b      	ldr	r3, [r7, #4]
   81d0a:	441a      	add	r2, r3
   81d0c:	68bb      	ldr	r3, [r7, #8]
   81d0e:	fbb2 f3f3 	udiv	r3, r2, r3
   81d12:	617b      	str	r3, [r7, #20]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   81d14:	697b      	ldr	r3, [r7, #20]
   81d16:	2b03      	cmp	r3, #3
   81d18:	d903      	bls.n	81d22 <usart_set_spi_master_baudrate+0x2a>
   81d1a:	697b      	ldr	r3, [r7, #20]
   81d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   81d20:	d301      	bcc.n	81d26 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   81d22:	2301      	movs	r3, #1
   81d24:	e003      	b.n	81d2e <usart_set_spi_master_baudrate+0x36>
	}

<<<<<<< HEAD
	cpu_irq_critical_section_counter++;
   82074:	4b04      	ldr	r3, [pc, #16]	; (82088 <cpu_irq_enter_critical+0x4c>)
   82076:	681b      	ldr	r3, [r3, #0]
   82078:	3301      	adds	r3, #1
   8207a:	4a03      	ldr	r2, [pc, #12]	; (82088 <cpu_irq_enter_critical+0x4c>)
   8207c:	6013      	str	r3, [r2, #0]
}
   8207e:	bf00      	nop
   82080:	370c      	adds	r7, #12
   82082:	46bd      	mov	sp, r7
   82084:	bc80      	pop	{r7}
   82086:	4770      	bx	lr
   82088:	200012b0 	.word	0x200012b0
   8208c:	20000284 	.word	0x20000284
   82090:	200012b4 	.word	0x200012b4

00082094 <cpu_irq_leave_critical>:
=======
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   81d26:	68fb      	ldr	r3, [r7, #12]
   81d28:	697a      	ldr	r2, [r7, #20]
   81d2a:	621a      	str	r2, [r3, #32]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	return 0;
   81d2c:	2300      	movs	r3, #0
}
   81d2e:	4618      	mov	r0, r3
   81d30:	371c      	adds	r7, #28
   81d32:	46bd      	mov	sp, r7
   81d34:	bc80      	pop	{r7}
   81d36:	4770      	bx	lr

00081d38 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
<<<<<<< HEAD
   82094:	b480      	push	{r7}
   82096:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   82098:	4b0c      	ldr	r3, [pc, #48]	; (820cc <cpu_irq_leave_critical+0x38>)
   8209a:	681b      	ldr	r3, [r3, #0]
   8209c:	3b01      	subs	r3, #1
   8209e:	4a0b      	ldr	r2, [pc, #44]	; (820cc <cpu_irq_leave_critical+0x38>)
   820a0:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   820a2:	4b0a      	ldr	r3, [pc, #40]	; (820cc <cpu_irq_leave_critical+0x38>)
   820a4:	681b      	ldr	r3, [r3, #0]
   820a6:	2b00      	cmp	r3, #0
   820a8:	d10c      	bne.n	820c4 <cpu_irq_leave_critical+0x30>
   820aa:	4b09      	ldr	r3, [pc, #36]	; (820d0 <cpu_irq_leave_critical+0x3c>)
   820ac:	781b      	ldrb	r3, [r3, #0]
   820ae:	b2db      	uxtb	r3, r3
   820b0:	2b00      	cmp	r3, #0
   820b2:	d007      	beq.n	820c4 <cpu_irq_leave_critical+0x30>
		cpu_irq_enable();
   820b4:	4b07      	ldr	r3, [pc, #28]	; (820d4 <cpu_irq_leave_critical+0x40>)
   820b6:	2201      	movs	r2, #1
   820b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   820ba:	f3bf 8f5f 	dmb	sy
}
   820be:	bf00      	nop
  __ASM volatile ("cpsie i");
   820c0:	b662      	cpsie	i
}
   820c2:	bf00      	nop
	}
}
   820c4:	bf00      	nop
   820c6:	46bd      	mov	sp, r7
   820c8:	bc80      	pop	{r7}
   820ca:	4770      	bx	lr
   820cc:	200012b0 	.word	0x200012b0
   820d0:	200012b4 	.word	0x200012b4
   820d4:	20000284 	.word	0x20000284

000820d8 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
=======
   81d38:	b580      	push	{r7, lr}
   81d3a:	b082      	sub	sp, #8
   81d3c:	af00      	add	r7, sp, #0
   81d3e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   81d40:	6878      	ldr	r0, [r7, #4]
   81d42:	4b0f      	ldr	r3, [pc, #60]	; (81d80 <usart_reset+0x48>)
   81d44:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   81d46:	687b      	ldr	r3, [r7, #4]
   81d48:	2200      	movs	r2, #0
   81d4a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   81d4c:	687b      	ldr	r3, [r7, #4]
   81d4e:	2200      	movs	r2, #0
   81d50:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   81d52:	687b      	ldr	r3, [r7, #4]
   81d54:	2200      	movs	r2, #0
   81d56:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   81d58:	6878      	ldr	r0, [r7, #4]
   81d5a:	4b0a      	ldr	r3, [pc, #40]	; (81d84 <usart_reset+0x4c>)
   81d5c:	4798      	blx	r3
	usart_reset_rx(p_usart);
   81d5e:	6878      	ldr	r0, [r7, #4]
   81d60:	4b09      	ldr	r3, [pc, #36]	; (81d88 <usart_reset+0x50>)
   81d62:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   81d64:	6878      	ldr	r0, [r7, #4]
   81d66:	4b09      	ldr	r3, [pc, #36]	; (81d8c <usart_reset+0x54>)
   81d68:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   81d6a:	6878      	ldr	r0, [r7, #4]
   81d6c:	4b08      	ldr	r3, [pc, #32]	; (81d90 <usart_reset+0x58>)
   81d6e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   81d70:	6878      	ldr	r0, [r7, #4]
   81d72:	4b08      	ldr	r3, [pc, #32]	; (81d94 <usart_reset+0x5c>)
   81d74:	4798      	blx	r3
#endif
}
   81d76:	bf00      	nop
   81d78:	3708      	adds	r7, #8
   81d7a:	46bd      	mov	sp, r7
   81d7c:	bd80      	pop	{r7, pc}
   81d7e:	bf00      	nop
   81d80:	00082081 	.word	0x00082081
   81d84:	00081f45 	.word	0x00081f45
   81d88:	00081f8d 	.word	0x00081f8d
   81d8c:	00082005 	.word	0x00082005
   81d90:	00082039 	.word	0x00082039
   81d94:	0008201f 	.word	0x0008201f

00081d98 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
<<<<<<< HEAD
   820d8:	b480      	push	{r7}
   820da:	b085      	sub	sp, #20
   820dc:	af00      	add	r7, sp, #0
   820de:	60f8      	str	r0, [r7, #12]
   820e0:	60b9      	str	r1, [r7, #8]
   820e2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   820e4:	687b      	ldr	r3, [r7, #4]
   820e6:	2b00      	cmp	r3, #0
   820e8:	d003      	beq.n	820f2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   820ea:	68fb      	ldr	r3, [r7, #12]
   820ec:	68ba      	ldr	r2, [r7, #8]
   820ee:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   820f0:	e002      	b.n	820f8 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   820f2:	68fb      	ldr	r3, [r7, #12]
   820f4:	68ba      	ldr	r2, [r7, #8]
   820f6:	661a      	str	r2, [r3, #96]	; 0x60
}
   820f8:	bf00      	nop
   820fa:	3714      	adds	r7, #20
   820fc:	46bd      	mov	sp, r7
   820fe:	bc80      	pop	{r7}
   82100:	4770      	bx	lr

00082102 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
=======
   81d98:	b580      	push	{r7, lr}
   81d9a:	b084      	sub	sp, #16
   81d9c:	af00      	add	r7, sp, #0
   81d9e:	60f8      	str	r0, [r7, #12]
   81da0:	60b9      	str	r1, [r7, #8]
   81da2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   81da4:	68f8      	ldr	r0, [r7, #12]
   81da6:	4b1a      	ldr	r3, [pc, #104]	; (81e10 <usart_init_rs232+0x78>)
   81da8:	4798      	blx	r3

	ul_reg_val = 0;
   81daa:	4b1a      	ldr	r3, [pc, #104]	; (81e14 <usart_init_rs232+0x7c>)
   81dac:	2200      	movs	r2, #0
   81dae:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   81db0:	68bb      	ldr	r3, [r7, #8]
   81db2:	2b00      	cmp	r3, #0
   81db4:	d009      	beq.n	81dca <usart_init_rs232+0x32>
   81db6:	68bb      	ldr	r3, [r7, #8]
   81db8:	681b      	ldr	r3, [r3, #0]
   81dba:	687a      	ldr	r2, [r7, #4]
   81dbc:	4619      	mov	r1, r3
   81dbe:	68f8      	ldr	r0, [r7, #12]
   81dc0:	4b15      	ldr	r3, [pc, #84]	; (81e18 <usart_init_rs232+0x80>)
   81dc2:	4798      	blx	r3
   81dc4:	4603      	mov	r3, r0
   81dc6:	2b00      	cmp	r3, #0
   81dc8:	d001      	beq.n	81dce <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   81dca:	2301      	movs	r3, #1
   81dcc:	e01b      	b.n	81e06 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81dce:	68bb      	ldr	r3, [r7, #8]
   81dd0:	685a      	ldr	r2, [r3, #4]
   81dd2:	68bb      	ldr	r3, [r7, #8]
   81dd4:	689b      	ldr	r3, [r3, #8]
   81dd6:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   81dd8:	68bb      	ldr	r3, [r7, #8]
   81dda:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81ddc:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   81dde:	68bb      	ldr	r3, [r7, #8]
   81de0:	68db      	ldr	r3, [r3, #12]
   81de2:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81de4:	4b0b      	ldr	r3, [pc, #44]	; (81e14 <usart_init_rs232+0x7c>)
   81de6:	681b      	ldr	r3, [r3, #0]
   81de8:	4313      	orrs	r3, r2
   81dea:	4a0a      	ldr	r2, [pc, #40]	; (81e14 <usart_init_rs232+0x7c>)
   81dec:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   81dee:	4b09      	ldr	r3, [pc, #36]	; (81e14 <usart_init_rs232+0x7c>)
   81df0:	681b      	ldr	r3, [r3, #0]
   81df2:	4a08      	ldr	r2, [pc, #32]	; (81e14 <usart_init_rs232+0x7c>)
   81df4:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   81df6:	68fb      	ldr	r3, [r7, #12]
   81df8:	685a      	ldr	r2, [r3, #4]
   81dfa:	4b06      	ldr	r3, [pc, #24]	; (81e14 <usart_init_rs232+0x7c>)
   81dfc:	681b      	ldr	r3, [r3, #0]
   81dfe:	431a      	orrs	r2, r3
   81e00:	68fb      	ldr	r3, [r7, #12]
   81e02:	605a      	str	r2, [r3, #4]

	return 0;
   81e04:	2300      	movs	r3, #0
}
   81e06:	4618      	mov	r0, r3
   81e08:	3710      	adds	r7, #16
   81e0a:	46bd      	mov	sp, r7
   81e0c:	bd80      	pop	{r7, pc}
   81e0e:	bf00      	nop
   81e10:	00081d39 	.word	0x00081d39
   81e14:	200012a8 	.word	0x200012a8
   81e18:	00081c71 	.word	0x00081c71

00081e1c <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
<<<<<<< HEAD
   82102:	b480      	push	{r7}
   82104:	b087      	sub	sp, #28
   82106:	af00      	add	r7, sp, #0
   82108:	60f8      	str	r0, [r7, #12]
   8210a:	60b9      	str	r1, [r7, #8]
   8210c:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8210e:	68fb      	ldr	r3, [r7, #12]
   82110:	687a      	ldr	r2, [r7, #4]
   82112:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82114:	68bb      	ldr	r3, [r7, #8]
   82116:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8211a:	d03c      	beq.n	82196 <pio_set_peripheral+0x94>
   8211c:	68bb      	ldr	r3, [r7, #8]
   8211e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82122:	d834      	bhi.n	8218e <pio_set_peripheral+0x8c>
   82124:	68bb      	ldr	r3, [r7, #8]
   82126:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8212a:	d034      	beq.n	82196 <pio_set_peripheral+0x94>
   8212c:	68bb      	ldr	r3, [r7, #8]
   8212e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82132:	d82c      	bhi.n	8218e <pio_set_peripheral+0x8c>
   82134:	68bb      	ldr	r3, [r7, #8]
   82136:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8213a:	d02c      	beq.n	82196 <pio_set_peripheral+0x94>
   8213c:	68bb      	ldr	r3, [r7, #8]
   8213e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82142:	d824      	bhi.n	8218e <pio_set_peripheral+0x8c>
   82144:	68bb      	ldr	r3, [r7, #8]
   82146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8214a:	d017      	beq.n	8217c <pio_set_peripheral+0x7a>
   8214c:	68bb      	ldr	r3, [r7, #8]
   8214e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82152:	d81c      	bhi.n	8218e <pio_set_peripheral+0x8c>
   82154:	68bb      	ldr	r3, [r7, #8]
   82156:	2b00      	cmp	r3, #0
   82158:	d01d      	beq.n	82196 <pio_set_peripheral+0x94>
   8215a:	68bb      	ldr	r3, [r7, #8]
   8215c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82160:	d115      	bne.n	8218e <pio_set_peripheral+0x8c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82162:	68fb      	ldr	r3, [r7, #12]
   82164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82166:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82168:	68fb      	ldr	r3, [r7, #12]
   8216a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8216c:	687b      	ldr	r3, [r7, #4]
   8216e:	43d9      	mvns	r1, r3
   82170:	697b      	ldr	r3, [r7, #20]
   82172:	400b      	ands	r3, r1
   82174:	401a      	ands	r2, r3
   82176:	68fb      	ldr	r3, [r7, #12]
   82178:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   8217a:	e008      	b.n	8218e <pio_set_peripheral+0x8c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8217c:	68fb      	ldr	r3, [r7, #12]
   8217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82180:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82182:	687a      	ldr	r2, [r7, #4]
   82184:	697b      	ldr	r3, [r7, #20]
   82186:	431a      	orrs	r2, r3
   82188:	68fb      	ldr	r3, [r7, #12]
   8218a:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   8218c:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8218e:	68fb      	ldr	r3, [r7, #12]
   82190:	687a      	ldr	r2, [r7, #4]
   82192:	605a      	str	r2, [r3, #4]
   82194:	e000      	b.n	82198 <pio_set_peripheral+0x96>
		return;
   82196:	bf00      	nop
}
   82198:	371c      	adds	r7, #28
   8219a:	46bd      	mov	sp, r7
   8219c:	bc80      	pop	{r7}
   8219e:	4770      	bx	lr

000821a0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   821a0:	b580      	push	{r7, lr}
   821a2:	b084      	sub	sp, #16
   821a4:	af00      	add	r7, sp, #0
   821a6:	60f8      	str	r0, [r7, #12]
   821a8:	60b9      	str	r1, [r7, #8]
   821aa:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   821ac:	68b9      	ldr	r1, [r7, #8]
   821ae:	68f8      	ldr	r0, [r7, #12]
   821b0:	4b19      	ldr	r3, [pc, #100]	; (82218 <pio_set_input+0x78>)
   821b2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   821b4:	687b      	ldr	r3, [r7, #4]
   821b6:	f003 0301 	and.w	r3, r3, #1
   821ba:	461a      	mov	r2, r3
   821bc:	68b9      	ldr	r1, [r7, #8]
   821be:	68f8      	ldr	r0, [r7, #12]
   821c0:	4b16      	ldr	r3, [pc, #88]	; (8221c <pio_set_input+0x7c>)
   821c2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   821c4:	687b      	ldr	r3, [r7, #4]
   821c6:	f003 030a 	and.w	r3, r3, #10
   821ca:	2b00      	cmp	r3, #0
   821cc:	d003      	beq.n	821d6 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   821ce:	68fb      	ldr	r3, [r7, #12]
   821d0:	68ba      	ldr	r2, [r7, #8]
   821d2:	621a      	str	r2, [r3, #32]
   821d4:	e002      	b.n	821dc <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   821d6:	68fb      	ldr	r3, [r7, #12]
   821d8:	68ba      	ldr	r2, [r7, #8]
   821da:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   821dc:	687b      	ldr	r3, [r7, #4]
   821de:	f003 0302 	and.w	r3, r3, #2
   821e2:	2b00      	cmp	r3, #0
   821e4:	d004      	beq.n	821f0 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   821e6:	68fb      	ldr	r3, [r7, #12]
   821e8:	68ba      	ldr	r2, [r7, #8]
   821ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   821ee:	e008      	b.n	82202 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   821f0:	687b      	ldr	r3, [r7, #4]
   821f2:	f003 0308 	and.w	r3, r3, #8
   821f6:	2b00      	cmp	r3, #0
   821f8:	d003      	beq.n	82202 <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   821fa:	68fb      	ldr	r3, [r7, #12]
   821fc:	68ba      	ldr	r2, [r7, #8]
   821fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82202:	68fb      	ldr	r3, [r7, #12]
   82204:	68ba      	ldr	r2, [r7, #8]
   82206:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82208:	68fb      	ldr	r3, [r7, #12]
   8220a:	68ba      	ldr	r2, [r7, #8]
   8220c:	601a      	str	r2, [r3, #0]
}
   8220e:	bf00      	nop
   82210:	3710      	adds	r7, #16
   82212:	46bd      	mov	sp, r7
   82214:	bd80      	pop	{r7, pc}
   82216:	bf00      	nop
   82218:	000822a1 	.word	0x000822a1
   8221c:	000820d9 	.word	0x000820d9

00082220 <pio_set_output>:
=======
   81e1c:	b580      	push	{r7, lr}
   81e1e:	b084      	sub	sp, #16
   81e20:	af00      	add	r7, sp, #0
   81e22:	60f8      	str	r0, [r7, #12]
   81e24:	60b9      	str	r1, [r7, #8]
   81e26:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   81e28:	68f8      	ldr	r0, [r7, #12]
   81e2a:	4b3d      	ldr	r3, [pc, #244]	; (81f20 <usart_init_spi_master+0x104>)
   81e2c:	4798      	blx	r3

	ul_reg_val = 0;
   81e2e:	4b3d      	ldr	r3, [pc, #244]	; (81f24 <usart_init_spi_master+0x108>)
   81e30:	2200      	movs	r2, #0
   81e32:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   81e34:	68bb      	ldr	r3, [r7, #8]
   81e36:	2b00      	cmp	r3, #0
   81e38:	d00d      	beq.n	81e56 <usart_init_spi_master+0x3a>
   81e3a:	68bb      	ldr	r3, [r7, #8]
   81e3c:	689b      	ldr	r3, [r3, #8]
   81e3e:	2b03      	cmp	r3, #3
   81e40:	d809      	bhi.n	81e56 <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   81e42:	68bb      	ldr	r3, [r7, #8]
   81e44:	681b      	ldr	r3, [r3, #0]
   81e46:	687a      	ldr	r2, [r7, #4]
   81e48:	4619      	mov	r1, r3
   81e4a:	68f8      	ldr	r0, [r7, #12]
   81e4c:	4b36      	ldr	r3, [pc, #216]	; (81f28 <usart_init_spi_master+0x10c>)
   81e4e:	4798      	blx	r3
   81e50:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   81e52:	2b00      	cmp	r3, #0
   81e54:	d001      	beq.n	81e5a <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   81e56:	2301      	movs	r3, #1
   81e58:	e05d      	b.n	81f16 <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   81e5a:	68bb      	ldr	r3, [r7, #8]
   81e5c:	685a      	ldr	r2, [r3, #4]
   81e5e:	4b31      	ldr	r3, [pc, #196]	; (81f24 <usart_init_spi_master+0x108>)
   81e60:	681b      	ldr	r3, [r3, #0]
   81e62:	4313      	orrs	r3, r2
   81e64:	4a2f      	ldr	r2, [pc, #188]	; (81f24 <usart_init_spi_master+0x108>)
   81e66:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   81e68:	68bb      	ldr	r3, [r7, #8]
   81e6a:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   81e6c:	4b2d      	ldr	r3, [pc, #180]	; (81f24 <usart_init_spi_master+0x108>)
   81e6e:	681b      	ldr	r3, [r3, #0]
   81e70:	4313      	orrs	r3, r2
   81e72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   81e76:	f043 030e 	orr.w	r3, r3, #14
   81e7a:	4a2a      	ldr	r2, [pc, #168]	; (81f24 <usart_init_spi_master+0x108>)
   81e7c:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   81e7e:	68bb      	ldr	r3, [r7, #8]
   81e80:	689b      	ldr	r3, [r3, #8]
   81e82:	2b03      	cmp	r3, #3
   81e84:	d83e      	bhi.n	81f04 <usart_init_spi_master+0xe8>
   81e86:	a201      	add	r2, pc, #4	; (adr r2, 81e8c <usart_init_spi_master+0x70>)
   81e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81e8c:	00081e9d 	.word	0x00081e9d
   81e90:	00081eb7 	.word	0x00081eb7
   81e94:	00081ed1 	.word	0x00081ed1
   81e98:	00081eeb 	.word	0x00081eeb
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   81e9c:	4b21      	ldr	r3, [pc, #132]	; (81f24 <usart_init_spi_master+0x108>)
   81e9e:	681b      	ldr	r3, [r3, #0]
   81ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   81ea4:	4a1f      	ldr	r2, [pc, #124]	; (81f24 <usart_init_spi_master+0x108>)
   81ea6:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   81ea8:	4b1e      	ldr	r3, [pc, #120]	; (81f24 <usart_init_spi_master+0x108>)
   81eaa:	681b      	ldr	r3, [r3, #0]
   81eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   81eb0:	4a1c      	ldr	r2, [pc, #112]	; (81f24 <usart_init_spi_master+0x108>)
   81eb2:	6013      	str	r3, [r2, #0]
		break;
   81eb4:	e027      	b.n	81f06 <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   81eb6:	4b1b      	ldr	r3, [pc, #108]	; (81f24 <usart_init_spi_master+0x108>)
   81eb8:	681b      	ldr	r3, [r3, #0]
   81eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   81ebe:	4a19      	ldr	r2, [pc, #100]	; (81f24 <usart_init_spi_master+0x108>)
   81ec0:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   81ec2:	4b18      	ldr	r3, [pc, #96]	; (81f24 <usart_init_spi_master+0x108>)
   81ec4:	681b      	ldr	r3, [r3, #0]
   81ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   81eca:	4a16      	ldr	r2, [pc, #88]	; (81f24 <usart_init_spi_master+0x108>)
   81ecc:	6013      	str	r3, [r2, #0]
		break;
   81ece:	e01a      	b.n	81f06 <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   81ed0:	4b14      	ldr	r3, [pc, #80]	; (81f24 <usart_init_spi_master+0x108>)
   81ed2:	681b      	ldr	r3, [r3, #0]
   81ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   81ed8:	4a12      	ldr	r2, [pc, #72]	; (81f24 <usart_init_spi_master+0x108>)
   81eda:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   81edc:	4b11      	ldr	r3, [pc, #68]	; (81f24 <usart_init_spi_master+0x108>)
   81ede:	681b      	ldr	r3, [r3, #0]
   81ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81ee4:	4a0f      	ldr	r2, [pc, #60]	; (81f24 <usart_init_spi_master+0x108>)
   81ee6:	6013      	str	r3, [r2, #0]
		break;
   81ee8:	e00d      	b.n	81f06 <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   81eea:	4b0e      	ldr	r3, [pc, #56]	; (81f24 <usart_init_spi_master+0x108>)
   81eec:	681b      	ldr	r3, [r3, #0]
   81eee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   81ef2:	4a0c      	ldr	r2, [pc, #48]	; (81f24 <usart_init_spi_master+0x108>)
   81ef4:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   81ef6:	4b0b      	ldr	r3, [pc, #44]	; (81f24 <usart_init_spi_master+0x108>)
   81ef8:	681b      	ldr	r3, [r3, #0]
   81efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81efe:	4a09      	ldr	r2, [pc, #36]	; (81f24 <usart_init_spi_master+0x108>)
   81f00:	6013      	str	r3, [r2, #0]
		break;
   81f02:	e000      	b.n	81f06 <usart_init_spi_master+0xea>

	default:
		break;
   81f04:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   81f06:	68fb      	ldr	r3, [r7, #12]
   81f08:	685a      	ldr	r2, [r3, #4]
   81f0a:	4b06      	ldr	r3, [pc, #24]	; (81f24 <usart_init_spi_master+0x108>)
   81f0c:	681b      	ldr	r3, [r3, #0]
   81f0e:	431a      	orrs	r2, r3
   81f10:	68fb      	ldr	r3, [r7, #12]
   81f12:	605a      	str	r2, [r3, #4]

	return 0;
   81f14:	2300      	movs	r3, #0
}
   81f16:	4618      	mov	r0, r3
   81f18:	3710      	adds	r7, #16
   81f1a:	46bd      	mov	sp, r7
   81f1c:	bd80      	pop	{r7, pc}
   81f1e:	bf00      	nop
   81f20:	00081d39 	.word	0x00081d39
   81f24:	200012ac 	.word	0x200012ac
   81f28:	00081cf9 	.word	0x00081cf9

00081f2c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 */
void usart_enable_tx(Usart *p_usart)
{
<<<<<<< HEAD
   82220:	b580      	push	{r7, lr}
   82222:	b084      	sub	sp, #16
   82224:	af00      	add	r7, sp, #0
   82226:	60f8      	str	r0, [r7, #12]
   82228:	60b9      	str	r1, [r7, #8]
   8222a:	607a      	str	r2, [r7, #4]
   8222c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   8222e:	68b9      	ldr	r1, [r7, #8]
   82230:	68f8      	ldr	r0, [r7, #12]
   82232:	4b12      	ldr	r3, [pc, #72]	; (8227c <pio_set_output+0x5c>)
   82234:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   82236:	69ba      	ldr	r2, [r7, #24]
   82238:	68b9      	ldr	r1, [r7, #8]
   8223a:	68f8      	ldr	r0, [r7, #12]
   8223c:	4b10      	ldr	r3, [pc, #64]	; (82280 <pio_set_output+0x60>)
   8223e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82240:	683b      	ldr	r3, [r7, #0]
   82242:	2b00      	cmp	r3, #0
   82244:	d003      	beq.n	8224e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   82246:	68fb      	ldr	r3, [r7, #12]
   82248:	68ba      	ldr	r2, [r7, #8]
   8224a:	651a      	str	r2, [r3, #80]	; 0x50
   8224c:	e002      	b.n	82254 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8224e:	68fb      	ldr	r3, [r7, #12]
   82250:	68ba      	ldr	r2, [r7, #8]
   82252:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82254:	687b      	ldr	r3, [r7, #4]
   82256:	2b00      	cmp	r3, #0
   82258:	d003      	beq.n	82262 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   8225a:	68fb      	ldr	r3, [r7, #12]
   8225c:	68ba      	ldr	r2, [r7, #8]
   8225e:	631a      	str	r2, [r3, #48]	; 0x30
   82260:	e002      	b.n	82268 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82262:	68fb      	ldr	r3, [r7, #12]
   82264:	68ba      	ldr	r2, [r7, #8]
   82266:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82268:	68fb      	ldr	r3, [r7, #12]
   8226a:	68ba      	ldr	r2, [r7, #8]
   8226c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8226e:	68fb      	ldr	r3, [r7, #12]
   82270:	68ba      	ldr	r2, [r7, #8]
   82272:	601a      	str	r2, [r3, #0]
}
   82274:	bf00      	nop
   82276:	3710      	adds	r7, #16
   82278:	46bd      	mov	sp, r7
   8227a:	bd80      	pop	{r7, pc}
   8227c:	000822a1 	.word	0x000822a1
   82280:	000820d9 	.word	0x000820d9

00082284 <pio_enable_output_write>:
=======
   81f2c:	b480      	push	{r7}
   81f2e:	b083      	sub	sp, #12
   81f30:	af00      	add	r7, sp, #0
   81f32:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   81f34:	687b      	ldr	r3, [r7, #4]
   81f36:	2240      	movs	r2, #64	; 0x40
   81f38:	601a      	str	r2, [r3, #0]
}
   81f3a:	bf00      	nop
   81f3c:	370c      	adds	r7, #12
   81f3e:	46bd      	mov	sp, r7
   81f40:	bc80      	pop	{r7}
   81f42:	4770      	bx	lr

00081f44 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
<<<<<<< HEAD
   82284:	b480      	push	{r7}
   82286:	b083      	sub	sp, #12
   82288:	af00      	add	r7, sp, #0
   8228a:	6078      	str	r0, [r7, #4]
   8228c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   8228e:	687b      	ldr	r3, [r7, #4]
   82290:	683a      	ldr	r2, [r7, #0]
   82292:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   82296:	bf00      	nop
   82298:	370c      	adds	r7, #12
   8229a:	46bd      	mov	sp, r7
   8229c:	bc80      	pop	{r7}
   8229e:	4770      	bx	lr

000822a0 <pio_disable_interrupt>:
=======
   81f44:	b480      	push	{r7}
   81f46:	b083      	sub	sp, #12
   81f48:	af00      	add	r7, sp, #0
   81f4a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   81f4c:	687b      	ldr	r3, [r7, #4]
   81f4e:	2288      	movs	r2, #136	; 0x88
   81f50:	601a      	str	r2, [r3, #0]
}
   81f52:	bf00      	nop
   81f54:	370c      	adds	r7, #12
   81f56:	46bd      	mov	sp, r7
   81f58:	bc80      	pop	{r7}
   81f5a:	4770      	bx	lr

00081f5c <usart_enable_rx>:
 * \brief Enable USART receiver.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
<<<<<<< HEAD
   822a0:	b480      	push	{r7}
   822a2:	b083      	sub	sp, #12
   822a4:	af00      	add	r7, sp, #0
   822a6:	6078      	str	r0, [r7, #4]
   822a8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   822aa:	687b      	ldr	r3, [r7, #4]
   822ac:	683a      	ldr	r2, [r7, #0]
   822ae:	645a      	str	r2, [r3, #68]	; 0x44
}
   822b0:	bf00      	nop
   822b2:	370c      	adds	r7, #12
   822b4:	46bd      	mov	sp, r7
   822b6:	bc80      	pop	{r7}
   822b8:	4770      	bx	lr

000822ba <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
=======
   81f5c:	b480      	push	{r7}
   81f5e:	b083      	sub	sp, #12
   81f60:	af00      	add	r7, sp, #0
   81f62:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   81f64:	687b      	ldr	r3, [r7, #4]
   81f66:	2210      	movs	r2, #16
   81f68:	601a      	str	r2, [r3, #0]
}
   81f6a:	bf00      	nop
   81f6c:	370c      	adds	r7, #12
   81f6e:	46bd      	mov	sp, r7
   81f70:	bc80      	pop	{r7}
   81f72:	4770      	bx	lr

00081f74 <usart_disable_rx>:
 * \brief Disable USART receiver.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
<<<<<<< HEAD
   822ba:	b480      	push	{r7}
   822bc:	b083      	sub	sp, #12
   822be:	af00      	add	r7, sp, #0
   822c0:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   822c2:	687b      	ldr	r3, [r7, #4]
   822c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   822c6:	4618      	mov	r0, r3
   822c8:	370c      	adds	r7, #12
   822ca:	46bd      	mov	sp, r7
   822cc:	bc80      	pop	{r7}
   822ce:	4770      	bx	lr

000822d0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
=======
   81f74:	b480      	push	{r7}
   81f76:	b083      	sub	sp, #12
   81f78:	af00      	add	r7, sp, #0
   81f7a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   81f7c:	687b      	ldr	r3, [r7, #4]
   81f7e:	2220      	movs	r2, #32
   81f80:	601a      	str	r2, [r3, #0]
}
   81f82:	bf00      	nop
   81f84:	370c      	adds	r7, #12
   81f86:	46bd      	mov	sp, r7
   81f88:	bc80      	pop	{r7}
   81f8a:	4770      	bx	lr

00081f8c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
<<<<<<< HEAD
   822d0:	b480      	push	{r7}
   822d2:	b083      	sub	sp, #12
   822d4:	af00      	add	r7, sp, #0
   822d6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   822d8:	687b      	ldr	r3, [r7, #4]
   822da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   822dc:	4618      	mov	r0, r3
   822de:	370c      	adds	r7, #12
   822e0:	46bd      	mov	sp, r7
   822e2:	bc80      	pop	{r7}
   822e4:	4770      	bx	lr
   822e6:	0000      	movs	r0, r0

000822e8 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
=======
   81f8c:	b480      	push	{r7}
   81f8e:	b083      	sub	sp, #12
   81f90:	af00      	add	r7, sp, #0
   81f92:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   81f94:	687b      	ldr	r3, [r7, #4]
   81f96:	2224      	movs	r2, #36	; 0x24
   81f98:	601a      	str	r2, [r3, #0]
}
   81f9a:	bf00      	nop
   81f9c:	370c      	adds	r7, #12
   81f9e:	46bd      	mov	sp, r7
   81fa0:	bc80      	pop	{r7}
   81fa2:	4770      	bx	lr

00081fa4 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
<<<<<<< HEAD
   822e8:	b580      	push	{r7, lr}
   822ea:	b084      	sub	sp, #16
   822ec:	af00      	add	r7, sp, #0
   822ee:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   822f0:	6878      	ldr	r0, [r7, #4]
   822f2:	4b08      	ldr	r3, [pc, #32]	; (82314 <pio_get_pin_value+0x2c>)
   822f4:	4798      	blx	r3
   822f6:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   822f8:	68fb      	ldr	r3, [r7, #12]
   822fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   822fc:	687b      	ldr	r3, [r7, #4]
   822fe:	f003 031f 	and.w	r3, r3, #31
   82302:	fa22 f303 	lsr.w	r3, r2, r3
   82306:	f003 0301 	and.w	r3, r3, #1
}
   8230a:	4618      	mov	r0, r3
   8230c:	3710      	adds	r7, #16
   8230e:	46bd      	mov	sp, r7
   82310:	bd80      	pop	{r7, pc}
   82312:	bf00      	nop
   82314:	00082585 	.word	0x00082585

00082318 <pio_set_pin_high>:
 * \param ul_pin The pin index.
=======
   81fa4:	b480      	push	{r7}
   81fa6:	b083      	sub	sp, #12
   81fa8:	af00      	add	r7, sp, #0
   81faa:	6078      	str	r0, [r7, #4]
   81fac:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   81fae:	687b      	ldr	r3, [r7, #4]
   81fb0:	683a      	ldr	r2, [r7, #0]
   81fb2:	609a      	str	r2, [r3, #8]
}
   81fb4:	bf00      	nop
   81fb6:	370c      	adds	r7, #12
   81fb8:	46bd      	mov	sp, r7
   81fba:	bc80      	pop	{r7}
   81fbc:	4770      	bx	lr

00081fbe <usart_disable_interrupt>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
<<<<<<< HEAD
   82318:	b580      	push	{r7, lr}
   8231a:	b084      	sub	sp, #16
   8231c:	af00      	add	r7, sp, #0
   8231e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82320:	6878      	ldr	r0, [r7, #4]
   82322:	4b08      	ldr	r3, [pc, #32]	; (82344 <pio_set_pin_high+0x2c>)
   82324:	4798      	blx	r3
   82326:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   82328:	687b      	ldr	r3, [r7, #4]
   8232a:	f003 031f 	and.w	r3, r3, #31
   8232e:	2201      	movs	r2, #1
   82330:	fa02 f303 	lsl.w	r3, r2, r3
   82334:	461a      	mov	r2, r3
   82336:	68fb      	ldr	r3, [r7, #12]
   82338:	631a      	str	r2, [r3, #48]	; 0x30
}
   8233a:	bf00      	nop
   8233c:	3710      	adds	r7, #16
   8233e:	46bd      	mov	sp, r7
   82340:	bd80      	pop	{r7, pc}
   82342:	bf00      	nop
   82344:	00082585 	.word	0x00082585

00082348 <pio_set_pin_low>:
 * \param ul_pin The pin index.
=======
   81fbe:	b480      	push	{r7}
   81fc0:	b083      	sub	sp, #12
   81fc2:	af00      	add	r7, sp, #0
   81fc4:	6078      	str	r0, [r7, #4]
   81fc6:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   81fc8:	687b      	ldr	r3, [r7, #4]
   81fca:	683a      	ldr	r2, [r7, #0]
   81fcc:	60da      	str	r2, [r3, #12]
}
   81fce:	bf00      	nop
   81fd0:	370c      	adds	r7, #12
   81fd2:	46bd      	mov	sp, r7
   81fd4:	bc80      	pop	{r7}
   81fd6:	4770      	bx	lr

00081fd8 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
<<<<<<< HEAD
   82348:	b580      	push	{r7, lr}
   8234a:	b084      	sub	sp, #16
   8234c:	af00      	add	r7, sp, #0
   8234e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82350:	6878      	ldr	r0, [r7, #4]
   82352:	4b08      	ldr	r3, [pc, #32]	; (82374 <pio_set_pin_low+0x2c>)
   82354:	4798      	blx	r3
   82356:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   82358:	687b      	ldr	r3, [r7, #4]
   8235a:	f003 031f 	and.w	r3, r3, #31
   8235e:	2201      	movs	r2, #1
   82360:	fa02 f303 	lsl.w	r3, r2, r3
   82364:	461a      	mov	r2, r3
   82366:	68fb      	ldr	r3, [r7, #12]
   82368:	635a      	str	r2, [r3, #52]	; 0x34
}
   8236a:	bf00      	nop
   8236c:	3710      	adds	r7, #16
   8236e:	46bd      	mov	sp, r7
   82370:	bd80      	pop	{r7, pc}
   82372:	bf00      	nop
   82374:	00082585 	.word	0x00082585

00082378 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
=======
   81fd8:	b480      	push	{r7}
   81fda:	b083      	sub	sp, #12
   81fdc:	af00      	add	r7, sp, #0
   81fde:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   81fe0:	687b      	ldr	r3, [r7, #4]
   81fe2:	691b      	ldr	r3, [r3, #16]
}
   81fe4:	4618      	mov	r0, r3
   81fe6:	370c      	adds	r7, #12
   81fe8:	46bd      	mov	sp, r7
   81fea:	bc80      	pop	{r7}
   81fec:	4770      	bx	lr

00081fee <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
<<<<<<< HEAD
   82378:	b590      	push	{r4, r7, lr}
   8237a:	b087      	sub	sp, #28
   8237c:	af02      	add	r7, sp, #8
   8237e:	6078      	str	r0, [r7, #4]
   82380:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82382:	6878      	ldr	r0, [r7, #4]
   82384:	4b43      	ldr	r3, [pc, #268]	; (82494 <pio_configure_pin+0x11c>)
   82386:	4798      	blx	r3
   82388:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8238a:	683b      	ldr	r3, [r7, #0]
   8238c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82390:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82394:	d057      	beq.n	82446 <pio_configure_pin+0xce>
   82396:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8239a:	d873      	bhi.n	82484 <pio_configure_pin+0x10c>
   8239c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   823a0:	d051      	beq.n	82446 <pio_configure_pin+0xce>
   823a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   823a6:	d86d      	bhi.n	82484 <pio_configure_pin+0x10c>
   823a8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   823ac:	d03f      	beq.n	8242e <pio_configure_pin+0xb6>
   823ae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   823b2:	d867      	bhi.n	82484 <pio_configure_pin+0x10c>
   823b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   823b8:	d003      	beq.n	823c2 <pio_configure_pin+0x4a>
   823ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   823be:	d01b      	beq.n	823f8 <pio_configure_pin+0x80>
   823c0:	e060      	b.n	82484 <pio_configure_pin+0x10c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   823c2:	687b      	ldr	r3, [r7, #4]
   823c4:	f003 031f 	and.w	r3, r3, #31
   823c8:	2201      	movs	r2, #1
   823ca:	fa02 f303 	lsl.w	r3, r2, r3
   823ce:	461a      	mov	r2, r3
   823d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   823d4:	68f8      	ldr	r0, [r7, #12]
   823d6:	4b30      	ldr	r3, [pc, #192]	; (82498 <pio_configure_pin+0x120>)
   823d8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   823da:	687b      	ldr	r3, [r7, #4]
   823dc:	f003 031f 	and.w	r3, r3, #31
   823e0:	2201      	movs	r2, #1
   823e2:	fa02 f303 	lsl.w	r3, r2, r3
   823e6:	4619      	mov	r1, r3
   823e8:	683b      	ldr	r3, [r7, #0]
   823ea:	f003 0301 	and.w	r3, r3, #1
   823ee:	461a      	mov	r2, r3
   823f0:	68f8      	ldr	r0, [r7, #12]
   823f2:	4b2a      	ldr	r3, [pc, #168]	; (8249c <pio_configure_pin+0x124>)
   823f4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   823f6:	e047      	b.n	82488 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   823f8:	687b      	ldr	r3, [r7, #4]
   823fa:	f003 031f 	and.w	r3, r3, #31
   823fe:	2201      	movs	r2, #1
   82400:	fa02 f303 	lsl.w	r3, r2, r3
   82404:	461a      	mov	r2, r3
   82406:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8240a:	68f8      	ldr	r0, [r7, #12]
   8240c:	4b22      	ldr	r3, [pc, #136]	; (82498 <pio_configure_pin+0x120>)
   8240e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82410:	687b      	ldr	r3, [r7, #4]
   82412:	f003 031f 	and.w	r3, r3, #31
   82416:	2201      	movs	r2, #1
   82418:	fa02 f303 	lsl.w	r3, r2, r3
   8241c:	4619      	mov	r1, r3
   8241e:	683b      	ldr	r3, [r7, #0]
   82420:	f003 0301 	and.w	r3, r3, #1
   82424:	461a      	mov	r2, r3
   82426:	68f8      	ldr	r0, [r7, #12]
   82428:	4b1c      	ldr	r3, [pc, #112]	; (8249c <pio_configure_pin+0x124>)
   8242a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8242c:	e02c      	b.n	82488 <pio_configure_pin+0x110>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8242e:	687b      	ldr	r3, [r7, #4]
   82430:	f003 031f 	and.w	r3, r3, #31
   82434:	2201      	movs	r2, #1
   82436:	fa02 f303 	lsl.w	r3, r2, r3
   8243a:	683a      	ldr	r2, [r7, #0]
   8243c:	4619      	mov	r1, r3
   8243e:	68f8      	ldr	r0, [r7, #12]
   82440:	4b17      	ldr	r3, [pc, #92]	; (824a0 <pio_configure_pin+0x128>)
   82442:	4798      	blx	r3
		break;
   82444:	e020      	b.n	82488 <pio_configure_pin+0x110>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82446:	687b      	ldr	r3, [r7, #4]
   82448:	f003 031f 	and.w	r3, r3, #31
   8244c:	2201      	movs	r2, #1
   8244e:	fa02 f303 	lsl.w	r3, r2, r3
   82452:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82454:	683b      	ldr	r3, [r7, #0]
   82456:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8245a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8245e:	bf0c      	ite	eq
   82460:	2301      	moveq	r3, #1
   82462:	2300      	movne	r3, #0
   82464:	b2db      	uxtb	r3, r3
   82466:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82468:	683b      	ldr	r3, [r7, #0]
   8246a:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8246c:	f003 0201 	and.w	r2, r3, #1
   82470:	683b      	ldr	r3, [r7, #0]
   82472:	f003 0301 	and.w	r3, r3, #1
   82476:	9300      	str	r3, [sp, #0]
   82478:	4613      	mov	r3, r2
   8247a:	4602      	mov	r2, r0
   8247c:	68f8      	ldr	r0, [r7, #12]
   8247e:	4c09      	ldr	r4, [pc, #36]	; (824a4 <pio_configure_pin+0x12c>)
   82480:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82482:	e001      	b.n	82488 <pio_configure_pin+0x110>

	default:
		return 0;
   82484:	2300      	movs	r3, #0
   82486:	e000      	b.n	8248a <pio_configure_pin+0x112>
	}

	return 1;
   82488:	2301      	movs	r3, #1
}
   8248a:	4618      	mov	r0, r3
   8248c:	3714      	adds	r7, #20
   8248e:	46bd      	mov	sp, r7
   82490:	bd90      	pop	{r4, r7, pc}
   82492:	bf00      	nop
   82494:	00082585 	.word	0x00082585
   82498:	00082103 	.word	0x00082103
   8249c:	000820d9 	.word	0x000820d9
   824a0:	000821a1 	.word	0x000821a1
   824a4:	00082221 	.word	0x00082221

000824a8 <pio_configure_pin_group>:
=======
   81fee:	b480      	push	{r7}
   81ff0:	b083      	sub	sp, #12
   81ff2:	af00      	add	r7, sp, #0
   81ff4:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   81ff6:	687b      	ldr	r3, [r7, #4]
   81ff8:	695b      	ldr	r3, [r3, #20]
}
   81ffa:	4618      	mov	r0, r3
   81ffc:	370c      	adds	r7, #12
   81ffe:	46bd      	mov	sp, r7
   82000:	bc80      	pop	{r7}
   82002:	4770      	bx	lr

00082004 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
<<<<<<< HEAD
   824a8:	b590      	push	{r4, r7, lr}
   824aa:	b087      	sub	sp, #28
   824ac:	af02      	add	r7, sp, #8
   824ae:	60f8      	str	r0, [r7, #12]
   824b0:	60b9      	str	r1, [r7, #8]
   824b2:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   824b4:	687b      	ldr	r3, [r7, #4]
   824b6:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   824ba:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   824be:	d039      	beq.n	82534 <pio_configure_pin_group+0x8c>
   824c0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   824c4:	d84f      	bhi.n	82566 <pio_configure_pin_group+0xbe>
   824c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   824ca:	d033      	beq.n	82534 <pio_configure_pin_group+0x8c>
   824cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   824d0:	d849      	bhi.n	82566 <pio_configure_pin_group+0xbe>
   824d2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   824d6:	d027      	beq.n	82528 <pio_configure_pin_group+0x80>
   824d8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   824dc:	d843      	bhi.n	82566 <pio_configure_pin_group+0xbe>
   824de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   824e2:	d003      	beq.n	824ec <pio_configure_pin_group+0x44>
   824e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   824e8:	d00f      	beq.n	8250a <pio_configure_pin_group+0x62>
   824ea:	e03c      	b.n	82566 <pio_configure_pin_group+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   824ec:	68ba      	ldr	r2, [r7, #8]
   824ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   824f2:	68f8      	ldr	r0, [r7, #12]
   824f4:	4b1f      	ldr	r3, [pc, #124]	; (82574 <pio_configure_pin_group+0xcc>)
   824f6:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   824f8:	687b      	ldr	r3, [r7, #4]
   824fa:	f003 0301 	and.w	r3, r3, #1
   824fe:	461a      	mov	r2, r3
   82500:	68b9      	ldr	r1, [r7, #8]
   82502:	68f8      	ldr	r0, [r7, #12]
   82504:	4b1c      	ldr	r3, [pc, #112]	; (82578 <pio_configure_pin_group+0xd0>)
   82506:	4798      	blx	r3
		break;
   82508:	e02f      	b.n	8256a <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8250a:	68ba      	ldr	r2, [r7, #8]
   8250c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82510:	68f8      	ldr	r0, [r7, #12]
   82512:	4b18      	ldr	r3, [pc, #96]	; (82574 <pio_configure_pin_group+0xcc>)
   82514:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82516:	687b      	ldr	r3, [r7, #4]
   82518:	f003 0301 	and.w	r3, r3, #1
   8251c:	461a      	mov	r2, r3
   8251e:	68b9      	ldr	r1, [r7, #8]
   82520:	68f8      	ldr	r0, [r7, #12]
   82522:	4b15      	ldr	r3, [pc, #84]	; (82578 <pio_configure_pin_group+0xd0>)
   82524:	4798      	blx	r3
		break;
   82526:	e020      	b.n	8256a <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82528:	687a      	ldr	r2, [r7, #4]
   8252a:	68b9      	ldr	r1, [r7, #8]
   8252c:	68f8      	ldr	r0, [r7, #12]
   8252e:	4b13      	ldr	r3, [pc, #76]	; (8257c <pio_configure_pin_group+0xd4>)
   82530:	4798      	blx	r3
		break;
   82532:	e01a      	b.n	8256a <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82534:	687b      	ldr	r3, [r7, #4]
   82536:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8253a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8253e:	bf0c      	ite	eq
   82540:	2301      	moveq	r3, #1
   82542:	2300      	movne	r3, #0
   82544:	b2db      	uxtb	r3, r3
   82546:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82548:	687b      	ldr	r3, [r7, #4]
   8254a:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   8254c:	f003 0201 	and.w	r2, r3, #1
   82550:	687b      	ldr	r3, [r7, #4]
   82552:	f003 0301 	and.w	r3, r3, #1
   82556:	9300      	str	r3, [sp, #0]
   82558:	4613      	mov	r3, r2
   8255a:	460a      	mov	r2, r1
   8255c:	68b9      	ldr	r1, [r7, #8]
   8255e:	68f8      	ldr	r0, [r7, #12]
   82560:	4c07      	ldr	r4, [pc, #28]	; (82580 <pio_configure_pin_group+0xd8>)
   82562:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82564:	e001      	b.n	8256a <pio_configure_pin_group+0xc2>

	default:
		return 0;
   82566:	2300      	movs	r3, #0
   82568:	e000      	b.n	8256c <pio_configure_pin_group+0xc4>
	}

	return 1;
   8256a:	2301      	movs	r3, #1
}
   8256c:	4618      	mov	r0, r3
   8256e:	3714      	adds	r7, #20
   82570:	46bd      	mov	sp, r7
   82572:	bd90      	pop	{r4, r7, pc}
   82574:	00082103 	.word	0x00082103
   82578:	000820d9 	.word	0x000820d9
   8257c:	000821a1 	.word	0x000821a1
   82580:	00082221 	.word	0x00082221

00082584 <pio_get_pin_group>:
 * \param ul_pin The pin index.
=======
   82004:	b480      	push	{r7}
   82006:	b083      	sub	sp, #12
   82008:	af00      	add	r7, sp, #0
   8200a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   8200c:	687b      	ldr	r3, [r7, #4]
   8200e:	f44f 7280 	mov.w	r2, #256	; 0x100
   82012:	601a      	str	r2, [r3, #0]
}
   82014:	bf00      	nop
   82016:	370c      	adds	r7, #12
   82018:	46bd      	mov	sp, r7
   8201a:	bc80      	pop	{r7}
   8201c:	4770      	bx	lr

0008201e <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   8201e:	b480      	push	{r7}
   82020:	b083      	sub	sp, #12
   82022:	af00      	add	r7, sp, #0
   82024:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   82026:	687b      	ldr	r3, [r7, #4]
   82028:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   8202c:	601a      	str	r2, [r3, #0]
}
   8202e:	bf00      	nop
   82030:	370c      	adds	r7, #12
   82032:	46bd      	mov	sp, r7
   82034:	bc80      	pop	{r7}
   82036:	4770      	bx	lr

00082038 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
<<<<<<< HEAD
   82584:	b480      	push	{r7}
   82586:	b085      	sub	sp, #20
   82588:	af00      	add	r7, sp, #0
   8258a:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8258c:	687b      	ldr	r3, [r7, #4]
   8258e:	095b      	lsrs	r3, r3, #5
   82590:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82594:	f203 7306 	addw	r3, r3, #1798	; 0x706
   82598:	025b      	lsls	r3, r3, #9
   8259a:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   8259c:	68fb      	ldr	r3, [r7, #12]
}
   8259e:	4618      	mov	r0, r3
   825a0:	3714      	adds	r7, #20
   825a2:	46bd      	mov	sp, r7
   825a4:	bc80      	pop	{r7}
   825a6:	4770      	bx	lr

000825a8 <pio_handler_process>:
=======
   82038:	b480      	push	{r7}
   8203a:	b083      	sub	sp, #12
   8203c:	af00      	add	r7, sp, #0
   8203e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82040:	687b      	ldr	r3, [r7, #4]
   82042:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82046:	601a      	str	r2, [r3, #0]
}
   82048:	bf00      	nop
   8204a:	370c      	adds	r7, #12
   8204c:	46bd      	mov	sp, r7
   8204e:	bc80      	pop	{r7}
   82050:	4770      	bx	lr

00082052 <usart_putchar>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
<<<<<<< HEAD
   825a8:	b580      	push	{r7, lr}
   825aa:	b084      	sub	sp, #16
   825ac:	af00      	add	r7, sp, #0
   825ae:	6078      	str	r0, [r7, #4]
   825b0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   825b2:	6878      	ldr	r0, [r7, #4]
   825b4:	4b26      	ldr	r3, [pc, #152]	; (82650 <pio_handler_process+0xa8>)
   825b6:	4798      	blx	r3
   825b8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   825ba:	6878      	ldr	r0, [r7, #4]
   825bc:	4b25      	ldr	r3, [pc, #148]	; (82654 <pio_handler_process+0xac>)
   825be:	4798      	blx	r3
   825c0:	4602      	mov	r2, r0
   825c2:	68fb      	ldr	r3, [r7, #12]
   825c4:	4013      	ands	r3, r2
   825c6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   825c8:	68fb      	ldr	r3, [r7, #12]
   825ca:	2b00      	cmp	r3, #0
   825cc:	d03c      	beq.n	82648 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   825ce:	2300      	movs	r3, #0
   825d0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   825d2:	e034      	b.n	8263e <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   825d4:	4a20      	ldr	r2, [pc, #128]	; (82658 <pio_handler_process+0xb0>)
   825d6:	68bb      	ldr	r3, [r7, #8]
   825d8:	011b      	lsls	r3, r3, #4
   825da:	4413      	add	r3, r2
   825dc:	681b      	ldr	r3, [r3, #0]
   825de:	683a      	ldr	r2, [r7, #0]
   825e0:	429a      	cmp	r2, r3
   825e2:	d126      	bne.n	82632 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   825e4:	4a1c      	ldr	r2, [pc, #112]	; (82658 <pio_handler_process+0xb0>)
   825e6:	68bb      	ldr	r3, [r7, #8]
   825e8:	011b      	lsls	r3, r3, #4
   825ea:	4413      	add	r3, r2
   825ec:	3304      	adds	r3, #4
   825ee:	681a      	ldr	r2, [r3, #0]
   825f0:	68fb      	ldr	r3, [r7, #12]
   825f2:	4013      	ands	r3, r2
   825f4:	2b00      	cmp	r3, #0
   825f6:	d01c      	beq.n	82632 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   825f8:	4a17      	ldr	r2, [pc, #92]	; (82658 <pio_handler_process+0xb0>)
   825fa:	68bb      	ldr	r3, [r7, #8]
   825fc:	011b      	lsls	r3, r3, #4
   825fe:	4413      	add	r3, r2
   82600:	330c      	adds	r3, #12
   82602:	681b      	ldr	r3, [r3, #0]
   82604:	4914      	ldr	r1, [pc, #80]	; (82658 <pio_handler_process+0xb0>)
   82606:	68ba      	ldr	r2, [r7, #8]
   82608:	0112      	lsls	r2, r2, #4
   8260a:	440a      	add	r2, r1
   8260c:	6810      	ldr	r0, [r2, #0]
   8260e:	4912      	ldr	r1, [pc, #72]	; (82658 <pio_handler_process+0xb0>)
   82610:	68ba      	ldr	r2, [r7, #8]
   82612:	0112      	lsls	r2, r2, #4
   82614:	440a      	add	r2, r1
   82616:	3204      	adds	r2, #4
   82618:	6812      	ldr	r2, [r2, #0]
   8261a:	4611      	mov	r1, r2
   8261c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8261e:	4a0e      	ldr	r2, [pc, #56]	; (82658 <pio_handler_process+0xb0>)
   82620:	68bb      	ldr	r3, [r7, #8]
   82622:	011b      	lsls	r3, r3, #4
   82624:	4413      	add	r3, r2
   82626:	3304      	adds	r3, #4
   82628:	681b      	ldr	r3, [r3, #0]
   8262a:	43db      	mvns	r3, r3
   8262c:	68fa      	ldr	r2, [r7, #12]
   8262e:	4013      	ands	r3, r2
   82630:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   82632:	68bb      	ldr	r3, [r7, #8]
   82634:	3301      	adds	r3, #1
   82636:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   82638:	68bb      	ldr	r3, [r7, #8]
   8263a:	2b06      	cmp	r3, #6
   8263c:	d803      	bhi.n	82646 <pio_handler_process+0x9e>
		while (status != 0) {
   8263e:	68fb      	ldr	r3, [r7, #12]
   82640:	2b00      	cmp	r3, #0
   82642:	d1c7      	bne.n	825d4 <pio_handler_process+0x2c>
=======
   82052:	b480      	push	{r7}
   82054:	b083      	sub	sp, #12
   82056:	af00      	add	r7, sp, #0
   82058:	6078      	str	r0, [r7, #4]
   8205a:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8205c:	bf00      	nop
   8205e:	687b      	ldr	r3, [r7, #4]
   82060:	695b      	ldr	r3, [r3, #20]
   82062:	f003 0302 	and.w	r3, r3, #2
   82066:	2b00      	cmp	r3, #0
   82068:	d0f9      	beq.n	8205e <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8206a:	683b      	ldr	r3, [r7, #0]
   8206c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82070:	687b      	ldr	r3, [r7, #4]
   82072:	61da      	str	r2, [r3, #28]

	return 0;
   82074:	2300      	movs	r3, #0
}
   82076:	4618      	mov	r0, r3
   82078:	370c      	adds	r7, #12
   8207a:	46bd      	mov	sp, r7
   8207c:	bc80      	pop	{r7}
   8207e:	4770      	bx	lr

00082080 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   82080:	b480      	push	{r7}
   82082:	b083      	sub	sp, #12
   82084:	af00      	add	r7, sp, #0
   82086:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   82088:	687b      	ldr	r3, [r7, #4]
   8208a:	4a04      	ldr	r2, [pc, #16]	; (8209c <usart_disable_writeprotect+0x1c>)
   8208c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   82090:	bf00      	nop
   82092:	370c      	adds	r7, #12
   82094:	46bd      	mov	sp, r7
   82096:	bc80      	pop	{r7}
   82098:	4770      	bx	lr
   8209a:	bf00      	nop
   8209c:	55534100 	.word	0x55534100

000820a0 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   820a0:	b480      	push	{r7}
   820a2:	b085      	sub	sp, #20
   820a4:	af00      	add	r7, sp, #0
   820a6:	60f8      	str	r0, [r7, #12]
   820a8:	60b9      	str	r1, [r7, #8]
   820aa:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   820ac:	68f9      	ldr	r1, [r7, #12]
   820ae:	68ba      	ldr	r2, [r7, #8]
   820b0:	4613      	mov	r3, r2
   820b2:	009b      	lsls	r3, r3, #2
   820b4:	4413      	add	r3, r2
   820b6:	009b      	lsls	r3, r3, #2
   820b8:	440b      	add	r3, r1
   820ba:	3370      	adds	r3, #112	; 0x70
   820bc:	687a      	ldr	r2, [r7, #4]
   820be:	601a      	str	r2, [r3, #0]
}
   820c0:	bf00      	nop
   820c2:	3714      	adds	r7, #20
   820c4:	46bd      	mov	sp, r7
   820c6:	bc80      	pop	{r7}
   820c8:	4770      	bx	lr

000820ca <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   820ca:	b480      	push	{r7}
   820cc:	b085      	sub	sp, #20
   820ce:	af00      	add	r7, sp, #0
   820d0:	60f8      	str	r0, [r7, #12]
   820d2:	60b9      	str	r1, [r7, #8]
   820d4:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   820d6:	68f9      	ldr	r1, [r7, #12]
   820d8:	68ba      	ldr	r2, [r7, #8]
   820da:	4613      	mov	r3, r2
   820dc:	009b      	lsls	r3, r3, #2
   820de:	4413      	add	r3, r2
   820e0:	009b      	lsls	r3, r3, #2
   820e2:	440b      	add	r3, r1
   820e4:	3374      	adds	r3, #116	; 0x74
   820e6:	687a      	ldr	r2, [r7, #4]
   820e8:	601a      	str	r2, [r3, #0]
}
   820ea:	bf00      	nop
   820ec:	3714      	adds	r7, #20
   820ee:	46bd      	mov	sp, r7
   820f0:	bc80      	pop	{r7}
   820f2:	4770      	bx	lr

000820f4 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   820f4:	b480      	push	{r7}
   820f6:	b085      	sub	sp, #20
   820f8:	af00      	add	r7, sp, #0
   820fa:	60f8      	str	r0, [r7, #12]
   820fc:	60b9      	str	r1, [r7, #8]
   820fe:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   82100:	68f9      	ldr	r1, [r7, #12]
   82102:	68ba      	ldr	r2, [r7, #8]
   82104:	4613      	mov	r3, r2
   82106:	009b      	lsls	r3, r3, #2
   82108:	4413      	add	r3, r2
   8210a:	009b      	lsls	r3, r3, #2
   8210c:	440b      	add	r3, r1
   8210e:	3378      	adds	r3, #120	; 0x78
   82110:	687a      	ldr	r2, [r7, #4]
   82112:	601a      	str	r2, [r3, #0]
}
   82114:	bf00      	nop
   82116:	3714      	adds	r7, #20
   82118:	46bd      	mov	sp, r7
   8211a:	bc80      	pop	{r7}
   8211c:	4770      	bx	lr

0008211e <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   8211e:	b480      	push	{r7}
   82120:	b085      	sub	sp, #20
   82122:	af00      	add	r7, sp, #0
   82124:	60f8      	str	r0, [r7, #12]
   82126:	60b9      	str	r1, [r7, #8]
   82128:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   8212a:	68f9      	ldr	r1, [r7, #12]
   8212c:	68ba      	ldr	r2, [r7, #8]
   8212e:	4613      	mov	r3, r2
   82130:	009b      	lsls	r3, r3, #2
   82132:	4413      	add	r3, r2
   82134:	009b      	lsls	r3, r3, #2
   82136:	440b      	add	r3, r1
   82138:	3380      	adds	r3, #128	; 0x80
   8213a:	687a      	ldr	r2, [r7, #4]
   8213c:	601a      	str	r2, [r3, #0]
}
   8213e:	bf00      	nop
   82140:	3714      	adds	r7, #20
   82142:	46bd      	mov	sp, r7
   82144:	bc80      	pop	{r7}
   82146:	4770      	bx	lr

00082148 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82148:	b580      	push	{r7, lr}
   8214a:	b084      	sub	sp, #16
   8214c:	af00      	add	r7, sp, #0
   8214e:	6078      	str	r0, [r7, #4]
   82150:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82152:	6878      	ldr	r0, [r7, #4]
   82154:	4b26      	ldr	r3, [pc, #152]	; (821f0 <pio_handler_process+0xa8>)
   82156:	4798      	blx	r3
   82158:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   8215a:	6878      	ldr	r0, [r7, #4]
   8215c:	4b25      	ldr	r3, [pc, #148]	; (821f4 <pio_handler_process+0xac>)
   8215e:	4798      	blx	r3
   82160:	4602      	mov	r2, r0
   82162:	68fb      	ldr	r3, [r7, #12]
   82164:	4013      	ands	r3, r2
   82166:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82168:	68fb      	ldr	r3, [r7, #12]
   8216a:	2b00      	cmp	r3, #0
   8216c:	d03c      	beq.n	821e8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   8216e:	2300      	movs	r3, #0
   82170:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   82172:	e034      	b.n	821de <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82174:	4a20      	ldr	r2, [pc, #128]	; (821f8 <pio_handler_process+0xb0>)
   82176:	68bb      	ldr	r3, [r7, #8]
   82178:	011b      	lsls	r3, r3, #4
   8217a:	4413      	add	r3, r2
   8217c:	681b      	ldr	r3, [r3, #0]
   8217e:	683a      	ldr	r2, [r7, #0]
   82180:	429a      	cmp	r2, r3
   82182:	d126      	bne.n	821d2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82184:	4a1c      	ldr	r2, [pc, #112]	; (821f8 <pio_handler_process+0xb0>)
   82186:	68bb      	ldr	r3, [r7, #8]
   82188:	011b      	lsls	r3, r3, #4
   8218a:	4413      	add	r3, r2
   8218c:	3304      	adds	r3, #4
   8218e:	681a      	ldr	r2, [r3, #0]
   82190:	68fb      	ldr	r3, [r7, #12]
   82192:	4013      	ands	r3, r2
   82194:	2b00      	cmp	r3, #0
   82196:	d01c      	beq.n	821d2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82198:	4a17      	ldr	r2, [pc, #92]	; (821f8 <pio_handler_process+0xb0>)
   8219a:	68bb      	ldr	r3, [r7, #8]
   8219c:	011b      	lsls	r3, r3, #4
   8219e:	4413      	add	r3, r2
   821a0:	330c      	adds	r3, #12
   821a2:	681b      	ldr	r3, [r3, #0]
   821a4:	4914      	ldr	r1, [pc, #80]	; (821f8 <pio_handler_process+0xb0>)
   821a6:	68ba      	ldr	r2, [r7, #8]
   821a8:	0112      	lsls	r2, r2, #4
   821aa:	440a      	add	r2, r1
   821ac:	6810      	ldr	r0, [r2, #0]
   821ae:	4912      	ldr	r1, [pc, #72]	; (821f8 <pio_handler_process+0xb0>)
   821b0:	68ba      	ldr	r2, [r7, #8]
   821b2:	0112      	lsls	r2, r2, #4
   821b4:	440a      	add	r2, r1
   821b6:	3204      	adds	r2, #4
   821b8:	6812      	ldr	r2, [r2, #0]
   821ba:	4611      	mov	r1, r2
   821bc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   821be:	4a0e      	ldr	r2, [pc, #56]	; (821f8 <pio_handler_process+0xb0>)
   821c0:	68bb      	ldr	r3, [r7, #8]
   821c2:	011b      	lsls	r3, r3, #4
   821c4:	4413      	add	r3, r2
   821c6:	3304      	adds	r3, #4
   821c8:	681b      	ldr	r3, [r3, #0]
   821ca:	43db      	mvns	r3, r3
   821cc:	68fa      	ldr	r2, [r7, #12]
   821ce:	4013      	ands	r3, r2
   821d0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   821d2:	68bb      	ldr	r3, [r7, #8]
   821d4:	3301      	adds	r3, #1
   821d6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   821d8:	68bb      	ldr	r3, [r7, #8]
   821da:	2b06      	cmp	r3, #6
   821dc:	d803      	bhi.n	821e6 <pio_handler_process+0x9e>
		while (status != 0) {
   821de:	68fb      	ldr	r3, [r7, #12]
   821e0:	2b00      	cmp	r3, #0
   821e2:	d1c7      	bne.n	82174 <pio_handler_process+0x2c>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
<<<<<<< HEAD
   82644:	e000      	b.n	82648 <pio_handler_process+0xa0>
				break;
   82646:	bf00      	nop
}
   82648:	bf00      	nop
   8264a:	3710      	adds	r7, #16
   8264c:	46bd      	mov	sp, r7
   8264e:	bd80      	pop	{r7, pc}
   82650:	000822bb 	.word	0x000822bb
   82654:	000822d1 	.word	0x000822d1
   82658:	200012b8 	.word	0x200012b8

0008265c <PIOA_Handler>:
=======
   821e4:	e000      	b.n	821e8 <pio_handler_process+0xa0>
				break;
   821e6:	bf00      	nop
}
   821e8:	bf00      	nop
   821ea:	3710      	adds	r7, #16
   821ec:	46bd      	mov	sp, r7
   821ee:	bd80      	pop	{r7, pc}
   821f0:	00084bf7 	.word	0x00084bf7
   821f4:	00084c0d 	.word	0x00084c0d
   821f8:	200012b0 	.word	0x200012b0

000821fc <PIOA_Handler>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
<<<<<<< HEAD
   8265c:	b580      	push	{r7, lr}
   8265e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82660:	210a      	movs	r1, #10
   82662:	4802      	ldr	r0, [pc, #8]	; (8266c <PIOA_Handler+0x10>)
   82664:	4b02      	ldr	r3, [pc, #8]	; (82670 <PIOA_Handler+0x14>)
   82666:	4798      	blx	r3
}
   82668:	bf00      	nop
   8266a:	bd80      	pop	{r7, pc}
   8266c:	400e0c00 	.word	0x400e0c00
   82670:	000825a9 	.word	0x000825a9

00082674 <PIOB_Handler>:
=======
   821fc:	b580      	push	{r7, lr}
   821fe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82200:	210a      	movs	r1, #10
   82202:	4802      	ldr	r0, [pc, #8]	; (8220c <PIOA_Handler+0x10>)
   82204:	4b02      	ldr	r3, [pc, #8]	; (82210 <PIOA_Handler+0x14>)
   82206:	4798      	blx	r3
}
   82208:	bf00      	nop
   8220a:	bd80      	pop	{r7, pc}
   8220c:	400e0c00 	.word	0x400e0c00
   82210:	00082149 	.word	0x00082149

00082214 <PIOB_Handler>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
<<<<<<< HEAD
   82674:	b580      	push	{r7, lr}
   82676:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   82678:	210b      	movs	r1, #11
   8267a:	4802      	ldr	r0, [pc, #8]	; (82684 <PIOB_Handler+0x10>)
   8267c:	4b02      	ldr	r3, [pc, #8]	; (82688 <PIOB_Handler+0x14>)
   8267e:	4798      	blx	r3
}
   82680:	bf00      	nop
   82682:	bd80      	pop	{r7, pc}
   82684:	400e0e00 	.word	0x400e0e00
   82688:	000825a9 	.word	0x000825a9

0008268c <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
=======
   82214:	b580      	push	{r7, lr}
   82216:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   82218:	210b      	movs	r1, #11
   8221a:	4802      	ldr	r0, [pc, #8]	; (82224 <PIOB_Handler+0x10>)
   8221c:	4b02      	ldr	r3, [pc, #8]	; (82228 <PIOB_Handler+0x14>)
   8221e:	4798      	blx	r3
}
   82220:	bf00      	nop
   82222:	bd80      	pop	{r7, pc}
   82224:	400e0e00 	.word	0x400e0e00
   82228:	00082149 	.word	0x00082149

0008222c <NVIC_EnableIRQ>:
{
   8222c:	b480      	push	{r7}
   8222e:	b083      	sub	sp, #12
   82230:	af00      	add	r7, sp, #0
   82232:	4603      	mov	r3, r0
   82234:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82236:	79fb      	ldrb	r3, [r7, #7]
   82238:	f003 031f 	and.w	r3, r3, #31
   8223c:	2201      	movs	r2, #1
   8223e:	fa02 f103 	lsl.w	r1, r2, r3
   82242:	4a05      	ldr	r2, [pc, #20]	; (82258 <NVIC_EnableIRQ+0x2c>)
   82244:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82248:	095b      	lsrs	r3, r3, #5
   8224a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   8224e:	bf00      	nop
   82250:	370c      	adds	r7, #12
   82252:	46bd      	mov	sp, r7
   82254:	bc80      	pop	{r7}
   82256:	4770      	bx	lr
   82258:	e000e100 	.word	0xe000e100

0008225c <NVIC_SetPriority>:
{
   8225c:	b480      	push	{r7}
   8225e:	b083      	sub	sp, #12
   82260:	af00      	add	r7, sp, #0
   82262:	4603      	mov	r3, r0
   82264:	6039      	str	r1, [r7, #0]
   82266:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   82268:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8226c:	2b00      	cmp	r3, #0
   8226e:	da0b      	bge.n	82288 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   82270:	683b      	ldr	r3, [r7, #0]
   82272:	b2da      	uxtb	r2, r3
   82274:	490c      	ldr	r1, [pc, #48]	; (822a8 <NVIC_SetPriority+0x4c>)
   82276:	79fb      	ldrb	r3, [r7, #7]
   82278:	f003 030f 	and.w	r3, r3, #15
   8227c:	3b04      	subs	r3, #4
   8227e:	0112      	lsls	r2, r2, #4
   82280:	b2d2      	uxtb	r2, r2
   82282:	440b      	add	r3, r1
   82284:	761a      	strb	r2, [r3, #24]
}
   82286:	e009      	b.n	8229c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   82288:	683b      	ldr	r3, [r7, #0]
   8228a:	b2da      	uxtb	r2, r3
   8228c:	4907      	ldr	r1, [pc, #28]	; (822ac <NVIC_SetPriority+0x50>)
   8228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82292:	0112      	lsls	r2, r2, #4
   82294:	b2d2      	uxtb	r2, r2
   82296:	440b      	add	r3, r1
   82298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   8229c:	bf00      	nop
   8229e:	370c      	adds	r7, #12
   822a0:	46bd      	mov	sp, r7
   822a2:	bc80      	pop	{r7}
   822a4:	4770      	bx	lr
   822a6:	bf00      	nop
   822a8:	e000ed00 	.word	0xe000ed00
   822ac:	e000e100 	.word	0xe000e100

000822b0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   822b0:	b480      	push	{r7}
   822b2:	b083      	sub	sp, #12
   822b4:	af00      	add	r7, sp, #0
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
<<<<<<< HEAD
   8268c:	b480      	push	{r7}
   8268e:	b085      	sub	sp, #20
   82690:	af00      	add	r7, sp, #0
   82692:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82694:	4b1c      	ldr	r3, [pc, #112]	; (82708 <pmc_switch_mck_to_mainck+0x7c>)
   82696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82698:	f023 0303 	bic.w	r3, r3, #3
   8269c:	4a1a      	ldr	r2, [pc, #104]	; (82708 <pmc_switch_mck_to_mainck+0x7c>)
   8269e:	f043 0301 	orr.w	r3, r3, #1
   826a2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   826a8:	60fb      	str	r3, [r7, #12]
   826aa:	e007      	b.n	826bc <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   826ac:	68fb      	ldr	r3, [r7, #12]
   826ae:	2b00      	cmp	r3, #0
   826b0:	d101      	bne.n	826b6 <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   826b2:	2301      	movs	r3, #1
   826b4:	e023      	b.n	826fe <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   826b6:	68fb      	ldr	r3, [r7, #12]
   826b8:	3b01      	subs	r3, #1
   826ba:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826bc:	4b12      	ldr	r3, [pc, #72]	; (82708 <pmc_switch_mck_to_mainck+0x7c>)
   826be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   826c0:	f003 0308 	and.w	r3, r3, #8
   826c4:	2b00      	cmp	r3, #0
   826c6:	d0f1      	beq.n	826ac <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   826c8:	4b0f      	ldr	r3, [pc, #60]	; (82708 <pmc_switch_mck_to_mainck+0x7c>)
   826ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   826cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   826d0:	490d      	ldr	r1, [pc, #52]	; (82708 <pmc_switch_mck_to_mainck+0x7c>)
   826d2:	687b      	ldr	r3, [r7, #4]
   826d4:	4313      	orrs	r3, r2
   826d6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   826dc:	60fb      	str	r3, [r7, #12]
   826de:	e007      	b.n	826f0 <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   826e0:	68fb      	ldr	r3, [r7, #12]
   826e2:	2b00      	cmp	r3, #0
   826e4:	d101      	bne.n	826ea <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   826e6:	2301      	movs	r3, #1
   826e8:	e009      	b.n	826fe <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   826ea:	68fb      	ldr	r3, [r7, #12]
   826ec:	3b01      	subs	r3, #1
   826ee:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826f0:	4b05      	ldr	r3, [pc, #20]	; (82708 <pmc_switch_mck_to_mainck+0x7c>)
   826f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   826f4:	f003 0308 	and.w	r3, r3, #8
   826f8:	2b00      	cmp	r3, #0
   826fa:	d0f1      	beq.n	826e0 <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   826fc:	2300      	movs	r3, #0
}
   826fe:	4618      	mov	r0, r3
   82700:	3714      	adds	r7, #20
   82702:	46bd      	mov	sp, r7
   82704:	bc80      	pop	{r7}
   82706:	4770      	bx	lr
   82708:	400e0400 	.word	0x400e0400

0008270c <pmc_switch_mck_to_pllack>:
=======
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   822b6:	f3ef 8310 	mrs	r3, PRIMASK
   822ba:	603b      	str	r3, [r7, #0]
  return(result);
   822bc:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   822be:	2b00      	cmp	r3, #0
   822c0:	bf0c      	ite	eq
   822c2:	2301      	moveq	r3, #1
   822c4:	2300      	movne	r3, #0
   822c6:	b2db      	uxtb	r3, r3
   822c8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   822ca:	b672      	cpsid	i
}
   822cc:	bf00      	nop
  __ASM volatile ("dmb");
   822ce:	f3bf 8f5f 	dmb	sy
}
   822d2:	bf00      	nop
	cpu_irq_disable();
   822d4:	4b04      	ldr	r3, [pc, #16]	; (822e8 <cpu_irq_save+0x38>)
   822d6:	2200      	movs	r2, #0
   822d8:	701a      	strb	r2, [r3, #0]
	return flags;
   822da:	687b      	ldr	r3, [r7, #4]
}
   822dc:	4618      	mov	r0, r3
   822de:	370c      	adds	r7, #12
   822e0:	46bd      	mov	sp, r7
   822e2:	bc80      	pop	{r7}
   822e4:	4770      	bx	lr
   822e6:	bf00      	nop
   822e8:	200003aa 	.word	0x200003aa

000822ec <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   822ec:	b480      	push	{r7}
   822ee:	b083      	sub	sp, #12
   822f0:	af00      	add	r7, sp, #0
   822f2:	6078      	str	r0, [r7, #4]
	return (flags);
   822f4:	687b      	ldr	r3, [r7, #4]
   822f6:	2b00      	cmp	r3, #0
   822f8:	bf14      	ite	ne
   822fa:	2301      	movne	r3, #1
   822fc:	2300      	moveq	r3, #0
   822fe:	b2db      	uxtb	r3, r3
}
   82300:	4618      	mov	r0, r3
   82302:	370c      	adds	r7, #12
   82304:	46bd      	mov	sp, r7
   82306:	bc80      	pop	{r7}
   82308:	4770      	bx	lr
   8230a:	0000      	movs	r0, r0

0008230c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   8230c:	b580      	push	{r7, lr}
   8230e:	b082      	sub	sp, #8
   82310:	af00      	add	r7, sp, #0
   82312:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   82314:	6878      	ldr	r0, [r7, #4]
   82316:	4b08      	ldr	r3, [pc, #32]	; (82338 <cpu_irq_restore+0x2c>)
   82318:	4798      	blx	r3
   8231a:	4603      	mov	r3, r0
   8231c:	2b00      	cmp	r3, #0
   8231e:	d007      	beq.n	82330 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   82320:	4b06      	ldr	r3, [pc, #24]	; (8233c <cpu_irq_restore+0x30>)
   82322:	2201      	movs	r2, #1
   82324:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82326:	f3bf 8f5f 	dmb	sy
}
   8232a:	bf00      	nop
  __ASM volatile ("cpsie i");
   8232c:	b662      	cpsie	i
}
   8232e:	bf00      	nop
}
   82330:	bf00      	nop
   82332:	3708      	adds	r7, #8
   82334:	46bd      	mov	sp, r7
   82336:	bd80      	pop	{r7, pc}
   82338:	000822ed 	.word	0x000822ed
   8233c:	200003aa 	.word	0x200003aa

00082340 <sleepmgr_lock_mode>:
{
   82340:	b580      	push	{r7, lr}
   82342:	b084      	sub	sp, #16
   82344:	af00      	add	r7, sp, #0
   82346:	4603      	mov	r3, r0
   82348:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   8234a:	4b08      	ldr	r3, [pc, #32]	; (8236c <sleepmgr_lock_mode+0x2c>)
   8234c:	4798      	blx	r3
   8234e:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   82350:	79fb      	ldrb	r3, [r7, #7]
   82352:	4a07      	ldr	r2, [pc, #28]	; (82370 <sleepmgr_lock_mode+0x30>)
   82354:	5cd2      	ldrb	r2, [r2, r3]
   82356:	3201      	adds	r2, #1
   82358:	b2d1      	uxtb	r1, r2
   8235a:	4a05      	ldr	r2, [pc, #20]	; (82370 <sleepmgr_lock_mode+0x30>)
   8235c:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   8235e:	68f8      	ldr	r0, [r7, #12]
   82360:	4b04      	ldr	r3, [pc, #16]	; (82374 <sleepmgr_lock_mode+0x34>)
   82362:	4798      	blx	r3
}
   82364:	bf00      	nop
   82366:	3710      	adds	r7, #16
   82368:	46bd      	mov	sp, r7
   8236a:	bd80      	pop	{r7, pc}
   8236c:	000822b1 	.word	0x000822b1
   82370:	20001834 	.word	0x20001834
   82374:	0008230d 	.word	0x0008230d

00082378 <sleepmgr_unlock_mode>:
{
   82378:	b580      	push	{r7, lr}
   8237a:	b084      	sub	sp, #16
   8237c:	af00      	add	r7, sp, #0
   8237e:	4603      	mov	r3, r0
   82380:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   82382:	4b08      	ldr	r3, [pc, #32]	; (823a4 <sleepmgr_unlock_mode+0x2c>)
   82384:	4798      	blx	r3
   82386:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   82388:	79fb      	ldrb	r3, [r7, #7]
   8238a:	4a07      	ldr	r2, [pc, #28]	; (823a8 <sleepmgr_unlock_mode+0x30>)
   8238c:	5cd2      	ldrb	r2, [r2, r3]
   8238e:	3a01      	subs	r2, #1
   82390:	b2d1      	uxtb	r1, r2
   82392:	4a05      	ldr	r2, [pc, #20]	; (823a8 <sleepmgr_unlock_mode+0x30>)
   82394:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   82396:	68f8      	ldr	r0, [r7, #12]
   82398:	4b04      	ldr	r3, [pc, #16]	; (823ac <sleepmgr_unlock_mode+0x34>)
   8239a:	4798      	blx	r3
}
   8239c:	bf00      	nop
   8239e:	3710      	adds	r7, #16
   823a0:	46bd      	mov	sp, r7
   823a2:	bd80      	pop	{r7, pc}
   823a4:	000822b1 	.word	0x000822b1
   823a8:	20001834 	.word	0x20001834
   823ac:	0008230d 	.word	0x0008230d

000823b0 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
<<<<<<< HEAD
   8270c:	b480      	push	{r7}
   8270e:	b085      	sub	sp, #20
   82710:	af00      	add	r7, sp, #0
   82712:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82714:	4b1c      	ldr	r3, [pc, #112]	; (82788 <pmc_switch_mck_to_pllack+0x7c>)
   82716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82718:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8271c:	491a      	ldr	r1, [pc, #104]	; (82788 <pmc_switch_mck_to_pllack+0x7c>)
   8271e:	687b      	ldr	r3, [r7, #4]
   82720:	4313      	orrs	r3, r2
   82722:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82724:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82728:	60fb      	str	r3, [r7, #12]
   8272a:	e007      	b.n	8273c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8272c:	68fb      	ldr	r3, [r7, #12]
   8272e:	2b00      	cmp	r3, #0
   82730:	d101      	bne.n	82736 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   82732:	2301      	movs	r3, #1
   82734:	e023      	b.n	8277e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   82736:	68fb      	ldr	r3, [r7, #12]
   82738:	3b01      	subs	r3, #1
   8273a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8273c:	4b12      	ldr	r3, [pc, #72]	; (82788 <pmc_switch_mck_to_pllack+0x7c>)
   8273e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82740:	f003 0308 	and.w	r3, r3, #8
   82744:	2b00      	cmp	r3, #0
   82746:	d0f1      	beq.n	8272c <pmc_switch_mck_to_pllack+0x20>
=======
   823b0:	b580      	push	{r7, lr}
   823b2:	b082      	sub	sp, #8
   823b4:	af00      	add	r7, sp, #0
   823b6:	4603      	mov	r3, r0
   823b8:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   823ba:	79fb      	ldrb	r3, [r7, #7]
   823bc:	f083 0301 	eor.w	r3, r3, #1
   823c0:	b2db      	uxtb	r3, r3
   823c2:	2b00      	cmp	r3, #0
   823c4:	d006      	beq.n	823d4 <udd_sleep_mode+0x24>
   823c6:	4b0d      	ldr	r3, [pc, #52]	; (823fc <udd_sleep_mode+0x4c>)
   823c8:	781b      	ldrb	r3, [r3, #0]
   823ca:	2b00      	cmp	r3, #0
   823cc:	d002      	beq.n	823d4 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   823ce:	2002      	movs	r0, #2
   823d0:	4b0b      	ldr	r3, [pc, #44]	; (82400 <udd_sleep_mode+0x50>)
   823d2:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   823d4:	79fb      	ldrb	r3, [r7, #7]
   823d6:	2b00      	cmp	r3, #0
   823d8:	d009      	beq.n	823ee <udd_sleep_mode+0x3e>
   823da:	4b08      	ldr	r3, [pc, #32]	; (823fc <udd_sleep_mode+0x4c>)
   823dc:	781b      	ldrb	r3, [r3, #0]
   823de:	f083 0301 	eor.w	r3, r3, #1
   823e2:	b2db      	uxtb	r3, r3
   823e4:	2b00      	cmp	r3, #0
   823e6:	d002      	beq.n	823ee <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   823e8:	2002      	movs	r0, #2
   823ea:	4b06      	ldr	r3, [pc, #24]	; (82404 <udd_sleep_mode+0x54>)
   823ec:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   823ee:	4a03      	ldr	r2, [pc, #12]	; (823fc <udd_sleep_mode+0x4c>)
   823f0:	79fb      	ldrb	r3, [r7, #7]
   823f2:	7013      	strb	r3, [r2, #0]
}
   823f4:	bf00      	nop
   823f6:	3708      	adds	r7, #8
   823f8:	46bd      	mov	sp, r7
   823fa:	bd80      	pop	{r7, pc}
   823fc:	20001320 	.word	0x20001320
   82400:	00082379 	.word	0x00082379
   82404:	00082341 	.word	0x00082341

00082408 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   82408:	b580      	push	{r7, lr}
   8240a:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   8240c:	201d      	movs	r0, #29
   8240e:	4b5f      	ldr	r3, [pc, #380]	; (8258c <UDPHS_Handler+0x184>)
   82410:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   82412:	4b5f      	ldr	r3, [pc, #380]	; (82590 <UDPHS_Handler+0x188>)
   82414:	4798      	blx	r3
   82416:	4603      	mov	r3, r0
   82418:	f083 0301 	eor.w	r3, r3, #1
   8241c:	b2db      	uxtb	r3, r3
   8241e:	2b00      	cmp	r3, #0
   82420:	d00e      	beq.n	82440 <UDPHS_Handler+0x38>
   82422:	4b5c      	ldr	r3, [pc, #368]	; (82594 <UDPHS_Handler+0x18c>)
   82424:	695b      	ldr	r3, [r3, #20]
   82426:	f003 0302 	and.w	r3, r3, #2
   8242a:	2b00      	cmp	r3, #0
   8242c:	d108      	bne.n	82440 <UDPHS_Handler+0x38>
  __ASM volatile ("cpsid i");
   8242e:	b672      	cpsid	i
}
   82430:	bf00      	nop
  __ASM volatile ("dmb");
   82432:	f3bf 8f5f 	dmb	sy
}
   82436:	bf00      	nop
		cpu_irq_disable();
   82438:	4b57      	ldr	r3, [pc, #348]	; (82598 <UDPHS_Handler+0x190>)
   8243a:	2200      	movs	r2, #0
   8243c:	701a      	strb	r2, [r3, #0]
		return;
   8243e:	e0a4      	b.n	8258a <UDPHS_Handler+0x182>
	}

	if (Is_udd_sof()) {
   82440:	4b54      	ldr	r3, [pc, #336]	; (82594 <UDPHS_Handler+0x18c>)
   82442:	695b      	ldr	r3, [r3, #20]
   82444:	f003 0308 	and.w	r3, r3, #8
   82448:	2b00      	cmp	r3, #0
   8244a:	d00d      	beq.n	82468 <UDPHS_Handler+0x60>
		udd_ack_sof();
   8244c:	4b51      	ldr	r3, [pc, #324]	; (82594 <UDPHS_Handler+0x18c>)
   8244e:	2208      	movs	r2, #8
   82450:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   82452:	4b50      	ldr	r3, [pc, #320]	; (82594 <UDPHS_Handler+0x18c>)
   82454:	695b      	ldr	r3, [r3, #20]
   82456:	f003 0301 	and.w	r3, r3, #1
   8245a:	2b00      	cmp	r3, #0
   8245c:	d101      	bne.n	82462 <UDPHS_Handler+0x5a>
			udc_sof_notify();
   8245e:	4b4f      	ldr	r3, [pc, #316]	; (8259c <UDPHS_Handler+0x194>)
   82460:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   82462:	4b4f      	ldr	r3, [pc, #316]	; (825a0 <UDPHS_Handler+0x198>)
   82464:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   82466:	e08f      	b.n	82588 <UDPHS_Handler+0x180>
	}

<<<<<<< HEAD
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82748:	4b0f      	ldr	r3, [pc, #60]	; (82788 <pmc_switch_mck_to_pllack+0x7c>)
   8274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8274c:	f023 0303 	bic.w	r3, r3, #3
   82750:	4a0d      	ldr	r2, [pc, #52]	; (82788 <pmc_switch_mck_to_pllack+0x7c>)
   82752:	f043 0302 	orr.w	r3, r3, #2
   82756:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82758:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8275c:	60fb      	str	r3, [r7, #12]
   8275e:	e007      	b.n	82770 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82760:	68fb      	ldr	r3, [r7, #12]
   82762:	2b00      	cmp	r3, #0
   82764:	d101      	bne.n	8276a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   82766:	2301      	movs	r3, #1
   82768:	e009      	b.n	8277e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8276a:	68fb      	ldr	r3, [r7, #12]
   8276c:	3b01      	subs	r3, #1
   8276e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82770:	4b05      	ldr	r3, [pc, #20]	; (82788 <pmc_switch_mck_to_pllack+0x7c>)
   82772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82774:	f003 0308 	and.w	r3, r3, #8
   82778:	2b00      	cmp	r3, #0
   8277a:	d0f1      	beq.n	82760 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   8277c:	2300      	movs	r3, #0
}
   8277e:	4618      	mov	r0, r3
   82780:	3714      	adds	r7, #20
   82782:	46bd      	mov	sp, r7
   82784:	bc80      	pop	{r7}
   82786:	4770      	bx	lr
   82788:	400e0400 	.word	0x400e0400

0008278c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   8278c:	b480      	push	{r7}
   8278e:	b083      	sub	sp, #12
   82790:	af00      	add	r7, sp, #0
   82792:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82794:	687b      	ldr	r3, [r7, #4]
   82796:	2b01      	cmp	r3, #1
   82798:	d107      	bne.n	827aa <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   8279a:	4b08      	ldr	r3, [pc, #32]	; (827bc <pmc_switch_sclk_to_32kxtal+0x30>)
   8279c:	689b      	ldr	r3, [r3, #8]
   8279e:	4a07      	ldr	r2, [pc, #28]	; (827bc <pmc_switch_sclk_to_32kxtal+0x30>)
   827a0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   827a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   827a8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   827aa:	4b04      	ldr	r3, [pc, #16]	; (827bc <pmc_switch_sclk_to_32kxtal+0x30>)
   827ac:	4a04      	ldr	r2, [pc, #16]	; (827c0 <pmc_switch_sclk_to_32kxtal+0x34>)
   827ae:	601a      	str	r2, [r3, #0]
}
   827b0:	bf00      	nop
   827b2:	370c      	adds	r7, #12
   827b4:	46bd      	mov	sp, r7
   827b6:	bc80      	pop	{r7}
   827b8:	4770      	bx	lr
   827ba:	bf00      	nop
   827bc:	400e1210 	.word	0x400e1210
   827c0:	a5000008 	.word	0xa5000008

000827c4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   827c4:	b480      	push	{r7}
   827c6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   827c8:	4b09      	ldr	r3, [pc, #36]	; (827f0 <pmc_osc_is_ready_32kxtal+0x2c>)
   827ca:	695b      	ldr	r3, [r3, #20]
   827cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   827d0:	2b00      	cmp	r3, #0
   827d2:	d007      	beq.n	827e4 <pmc_osc_is_ready_32kxtal+0x20>
   827d4:	4b07      	ldr	r3, [pc, #28]	; (827f4 <pmc_osc_is_ready_32kxtal+0x30>)
   827d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   827d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   827dc:	2b00      	cmp	r3, #0
   827de:	d001      	beq.n	827e4 <pmc_osc_is_ready_32kxtal+0x20>
   827e0:	2301      	movs	r3, #1
   827e2:	e000      	b.n	827e6 <pmc_osc_is_ready_32kxtal+0x22>
   827e4:	2300      	movs	r3, #0
}
   827e6:	4618      	mov	r0, r3
   827e8:	46bd      	mov	sp, r7
   827ea:	bc80      	pop	{r7}
   827ec:	4770      	bx	lr
   827ee:	bf00      	nop
   827f0:	400e1210 	.word	0x400e1210
   827f4:	400e0400 	.word	0x400e0400

000827f8 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   827f8:	b480      	push	{r7}
   827fa:	b083      	sub	sp, #12
   827fc:	af00      	add	r7, sp, #0
   827fe:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   82800:	4b13      	ldr	r3, [pc, #76]	; (82850 <pmc_osc_enable_fastrc+0x58>)
   82802:	6a1b      	ldr	r3, [r3, #32]
   82804:	4a12      	ldr	r2, [pc, #72]	; (82850 <pmc_osc_enable_fastrc+0x58>)
   82806:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8280a:	f043 0308 	orr.w	r3, r3, #8
   8280e:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82810:	bf00      	nop
   82812:	4b0f      	ldr	r3, [pc, #60]	; (82850 <pmc_osc_enable_fastrc+0x58>)
   82814:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8281a:	2b00      	cmp	r3, #0
   8281c:	d0f9      	beq.n	82812 <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8281e:	4b0c      	ldr	r3, [pc, #48]	; (82850 <pmc_osc_enable_fastrc+0x58>)
   82820:	6a1b      	ldr	r3, [r3, #32]
   82822:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   8282a:	687a      	ldr	r2, [r7, #4]
   8282c:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8282e:	4a08      	ldr	r2, [pc, #32]	; (82850 <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   82830:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82834:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82836:	bf00      	nop
   82838:	4b05      	ldr	r3, [pc, #20]	; (82850 <pmc_osc_enable_fastrc+0x58>)
   8283a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82840:	2b00      	cmp	r3, #0
   82842:	d0f9      	beq.n	82838 <pmc_osc_enable_fastrc+0x40>
}
   82844:	bf00      	nop
   82846:	bf00      	nop
   82848:	370c      	adds	r7, #12
   8284a:	46bd      	mov	sp, r7
   8284c:	bc80      	pop	{r7}
   8284e:	4770      	bx	lr
   82850:	400e0400 	.word	0x400e0400

00082854 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   82854:	b480      	push	{r7}
   82856:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   82858:	4b03      	ldr	r3, [pc, #12]	; (82868 <pmc_osc_is_ready_fastrc+0x14>)
   8285a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   82860:	4618      	mov	r0, r3
   82862:	46bd      	mov	sp, r7
   82864:	bc80      	pop	{r7}
   82866:	4770      	bx	lr
   82868:	400e0400 	.word	0x400e0400

0008286c <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   8286c:	b480      	push	{r7}
   8286e:	b085      	sub	sp, #20
   82870:	af00      	add	r7, sp, #0
   82872:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   82874:	4b10      	ldr	r3, [pc, #64]	; (828b8 <pmc_osc_enable_main_xtal+0x4c>)
   82876:	6a1b      	ldr	r3, [r3, #32]
   82878:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   8287a:	68fb      	ldr	r3, [r7, #12]
   8287c:	f023 0303 	bic.w	r3, r3, #3
   82880:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82882:	687b      	ldr	r3, [r7, #4]
   82884:	021b      	lsls	r3, r3, #8
   82886:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82888:	68fb      	ldr	r3, [r7, #12]
   8288a:	4313      	orrs	r3, r2
   8288c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82890:	f043 0301 	orr.w	r3, r3, #1
   82894:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   82896:	4a08      	ldr	r2, [pc, #32]	; (828b8 <pmc_osc_enable_main_xtal+0x4c>)
   82898:	68fb      	ldr	r3, [r7, #12]
   8289a:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8289c:	bf00      	nop
   8289e:	4b06      	ldr	r3, [pc, #24]	; (828b8 <pmc_osc_enable_main_xtal+0x4c>)
   828a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   828a2:	f003 0301 	and.w	r3, r3, #1
   828a6:	2b00      	cmp	r3, #0
   828a8:	d0f9      	beq.n	8289e <pmc_osc_enable_main_xtal+0x32>
}
   828aa:	bf00      	nop
   828ac:	bf00      	nop
   828ae:	3714      	adds	r7, #20
   828b0:	46bd      	mov	sp, r7
   828b2:	bc80      	pop	{r7}
   828b4:	4770      	bx	lr
   828b6:	bf00      	nop
   828b8:	400e0400 	.word	0x400e0400

000828bc <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   828bc:	b480      	push	{r7}
   828be:	b083      	sub	sp, #12
   828c0:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   828c2:	4b0a      	ldr	r3, [pc, #40]	; (828ec <pmc_osc_bypass_main_xtal+0x30>)
   828c4:	6a1b      	ldr	r3, [r3, #32]
   828c6:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   828c8:	687b      	ldr	r3, [r7, #4]
   828ca:	f023 0303 	bic.w	r3, r3, #3
   828ce:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   828d0:	687b      	ldr	r3, [r7, #4]
   828d2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   828d6:	f043 0302 	orr.w	r3, r3, #2
   828da:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   828dc:	4a03      	ldr	r2, [pc, #12]	; (828ec <pmc_osc_bypass_main_xtal+0x30>)
   828de:	687b      	ldr	r3, [r7, #4]
   828e0:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   828e2:	bf00      	nop
   828e4:	370c      	adds	r7, #12
   828e6:	46bd      	mov	sp, r7
   828e8:	bc80      	pop	{r7}
   828ea:	4770      	bx	lr
   828ec:	400e0400 	.word	0x400e0400

000828f0 <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   828f0:	b480      	push	{r7}
   828f2:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   828f4:	4b03      	ldr	r3, [pc, #12]	; (82904 <pmc_osc_is_bypassed_main_xtal+0x14>)
   828f6:	6a1b      	ldr	r3, [r3, #32]
   828f8:	f003 0302 	and.w	r3, r3, #2
}
   828fc:	4618      	mov	r0, r3
   828fe:	46bd      	mov	sp, r7
   82900:	bc80      	pop	{r7}
   82902:	4770      	bx	lr
   82904:	400e0400 	.word	0x400e0400

00082908 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   82908:	b480      	push	{r7}
   8290a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   8290c:	4b03      	ldr	r3, [pc, #12]	; (8291c <pmc_osc_is_ready_main_xtal+0x14>)
   8290e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82910:	f003 0301 	and.w	r3, r3, #1
}
   82914:	4618      	mov	r0, r3
   82916:	46bd      	mov	sp, r7
   82918:	bc80      	pop	{r7}
   8291a:	4770      	bx	lr
   8291c:	400e0400 	.word	0x400e0400

00082920 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82920:	b480      	push	{r7}
   82922:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82924:	4b03      	ldr	r3, [pc, #12]	; (82934 <pmc_osc_is_ready_mainck+0x14>)
   82926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   8292c:	4618      	mov	r0, r3
   8292e:	46bd      	mov	sp, r7
   82930:	bc80      	pop	{r7}
   82932:	4770      	bx	lr
   82934:	400e0400 	.word	0x400e0400

00082938 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   82938:	b480      	push	{r7}
   8293a:	b085      	sub	sp, #20
   8293c:	af00      	add	r7, sp, #0
   8293e:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   82940:	4b0c      	ldr	r3, [pc, #48]	; (82974 <pmc_mainck_osc_select+0x3c>)
   82942:	6a1b      	ldr	r3, [r3, #32]
   82944:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   82946:	687b      	ldr	r3, [r7, #4]
   82948:	2b00      	cmp	r3, #0
   8294a:	d004      	beq.n	82956 <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   8294c:	68fb      	ldr	r3, [r7, #12]
   8294e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   82952:	60fb      	str	r3, [r7, #12]
   82954:	e003      	b.n	8295e <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   82956:	68fb      	ldr	r3, [r7, #12]
   82958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   8295c:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8295e:	4a05      	ldr	r2, [pc, #20]	; (82974 <pmc_mainck_osc_select+0x3c>)
   82960:	68fb      	ldr	r3, [r7, #12]
   82962:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82966:	6213      	str	r3, [r2, #32]
}
   82968:	bf00      	nop
   8296a:	3714      	adds	r7, #20
   8296c:	46bd      	mov	sp, r7
   8296e:	bc80      	pop	{r7}
   82970:	4770      	bx	lr
   82972:	bf00      	nop
   82974:	400e0400 	.word	0x400e0400

00082978 <pmc_disable_pllack>:
=======
	if (Is_udd_msof()) {
   82468:	4b4a      	ldr	r3, [pc, #296]	; (82594 <UDPHS_Handler+0x18c>)
   8246a:	695b      	ldr	r3, [r3, #20]
   8246c:	f003 0304 	and.w	r3, r3, #4
   82470:	2b00      	cmp	r3, #0
   82472:	d005      	beq.n	82480 <UDPHS_Handler+0x78>
		udd_ack_msof();
   82474:	4b47      	ldr	r3, [pc, #284]	; (82594 <UDPHS_Handler+0x18c>)
   82476:	2204      	movs	r2, #4
   82478:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   8247a:	4b48      	ldr	r3, [pc, #288]	; (8259c <UDPHS_Handler+0x194>)
   8247c:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8247e:	e083      	b.n	82588 <UDPHS_Handler+0x180>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   82480:	4b48      	ldr	r3, [pc, #288]	; (825a4 <UDPHS_Handler+0x19c>)
   82482:	4798      	blx	r3
   82484:	4603      	mov	r3, r0
   82486:	2b00      	cmp	r3, #0
   82488:	d179      	bne.n	8257e <UDPHS_Handler+0x176>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   8248a:	4b47      	ldr	r3, [pc, #284]	; (825a8 <UDPHS_Handler+0x1a0>)
   8248c:	4798      	blx	r3
   8248e:	4603      	mov	r3, r0
   82490:	2b00      	cmp	r3, #0
   82492:	d176      	bne.n	82582 <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   82494:	4b3f      	ldr	r3, [pc, #252]	; (82594 <UDPHS_Handler+0x18c>)
   82496:	695b      	ldr	r3, [r3, #20]
   82498:	f003 0310 	and.w	r3, r3, #16
   8249c:	2b00      	cmp	r3, #0
   8249e:	d01d      	beq.n	824dc <UDPHS_Handler+0xd4>
		dbg_print("EoR ");
		udd_ack_reset();
   824a0:	4b3c      	ldr	r3, [pc, #240]	; (82594 <UDPHS_Handler+0x18c>)
   824a2:	2210      	movs	r2, #16
   824a4:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   824a6:	4b41      	ldr	r3, [pc, #260]	; (825ac <UDPHS_Handler+0x1a4>)
   824a8:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   824aa:	4b41      	ldr	r3, [pc, #260]	; (825b0 <UDPHS_Handler+0x1a8>)
   824ac:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   824ae:	4b41      	ldr	r3, [pc, #260]	; (825b4 <UDPHS_Handler+0x1ac>)
   824b0:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   824b2:	4b41      	ldr	r3, [pc, #260]	; (825b8 <UDPHS_Handler+0x1b0>)
   824b4:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   824b6:	4b37      	ldr	r3, [pc, #220]	; (82594 <UDPHS_Handler+0x18c>)
   824b8:	691b      	ldr	r3, [r3, #16]
   824ba:	4a36      	ldr	r2, [pc, #216]	; (82594 <UDPHS_Handler+0x18c>)
   824bc:	f043 0308 	orr.w	r3, r3, #8
   824c0:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   824c2:	4b34      	ldr	r3, [pc, #208]	; (82594 <UDPHS_Handler+0x18c>)
   824c4:	691b      	ldr	r3, [r3, #16]
   824c6:	4a33      	ldr	r2, [pc, #204]	; (82594 <UDPHS_Handler+0x18c>)
   824c8:	f043 0304 	orr.w	r3, r3, #4
   824cc:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   824ce:	4b31      	ldr	r3, [pc, #196]	; (82594 <UDPHS_Handler+0x18c>)
   824d0:	691b      	ldr	r3, [r3, #16]
   824d2:	4a30      	ldr	r2, [pc, #192]	; (82594 <UDPHS_Handler+0x18c>)
   824d4:	f043 0302 	orr.w	r3, r3, #2
   824d8:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   824da:	e055      	b.n	82588 <UDPHS_Handler+0x180>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   824dc:	4b2d      	ldr	r3, [pc, #180]	; (82594 <UDPHS_Handler+0x18c>)
   824de:	691b      	ldr	r3, [r3, #16]
   824e0:	f003 0302 	and.w	r3, r3, #2
   824e4:	2b00      	cmp	r3, #0
   824e6:	d020      	beq.n	8252a <UDPHS_Handler+0x122>
   824e8:	4b2a      	ldr	r3, [pc, #168]	; (82594 <UDPHS_Handler+0x18c>)
   824ea:	695b      	ldr	r3, [r3, #20]
   824ec:	f003 0302 	and.w	r3, r3, #2
   824f0:	2b00      	cmp	r3, #0
   824f2:	d01a      	beq.n	8252a <UDPHS_Handler+0x122>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   824f4:	4b27      	ldr	r3, [pc, #156]	; (82594 <UDPHS_Handler+0x18c>)
   824f6:	2220      	movs	r2, #32
   824f8:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   824fa:	4b26      	ldr	r3, [pc, #152]	; (82594 <UDPHS_Handler+0x18c>)
   824fc:	691b      	ldr	r3, [r3, #16]
   824fe:	4a25      	ldr	r2, [pc, #148]	; (82594 <UDPHS_Handler+0x18c>)
   82500:	f023 0302 	bic.w	r3, r3, #2
   82504:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   82506:	4b23      	ldr	r3, [pc, #140]	; (82594 <UDPHS_Handler+0x18c>)
   82508:	691b      	ldr	r3, [r3, #16]
   8250a:	4a22      	ldr	r2, [pc, #136]	; (82594 <UDPHS_Handler+0x18c>)
   8250c:	f043 0320 	orr.w	r3, r3, #32
   82510:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   82512:	4b20      	ldr	r3, [pc, #128]	; (82594 <UDPHS_Handler+0x18c>)
   82514:	2202      	movs	r2, #2
   82516:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   82518:	201d      	movs	r0, #29
   8251a:	4b28      	ldr	r3, [pc, #160]	; (825bc <UDPHS_Handler+0x1b4>)
   8251c:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   8251e:	4b28      	ldr	r3, [pc, #160]	; (825c0 <UDPHS_Handler+0x1b8>)
   82520:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   82522:	2000      	movs	r0, #0
   82524:	4b27      	ldr	r3, [pc, #156]	; (825c4 <UDPHS_Handler+0x1bc>)
   82526:	4798      	blx	r3
		goto udd_interrupt_end;
   82528:	e02e      	b.n	82588 <UDPHS_Handler+0x180>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   8252a:	4b1a      	ldr	r3, [pc, #104]	; (82594 <UDPHS_Handler+0x18c>)
   8252c:	695b      	ldr	r3, [r3, #20]
   8252e:	f003 0320 	and.w	r3, r3, #32
   82532:	2b00      	cmp	r3, #0
   82534:	d027      	beq.n	82586 <UDPHS_Handler+0x17e>
		udd_sleep_mode(true); // Enter in IDLE mode
   82536:	2001      	movs	r0, #1
   82538:	4b22      	ldr	r3, [pc, #136]	; (825c4 <UDPHS_Handler+0x1bc>)
   8253a:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   8253c:	4b15      	ldr	r3, [pc, #84]	; (82594 <UDPHS_Handler+0x18c>)
   8253e:	2202      	movs	r2, #2
   82540:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   82542:	4b14      	ldr	r3, [pc, #80]	; (82594 <UDPHS_Handler+0x18c>)
   82544:	2220      	movs	r2, #32
   82546:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   82548:	4b12      	ldr	r3, [pc, #72]	; (82594 <UDPHS_Handler+0x18c>)
   8254a:	691b      	ldr	r3, [r3, #16]
   8254c:	4a11      	ldr	r2, [pc, #68]	; (82594 <UDPHS_Handler+0x18c>)
   8254e:	f023 0320 	bic.w	r3, r3, #32
   82552:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   82554:	4b0f      	ldr	r3, [pc, #60]	; (82594 <UDPHS_Handler+0x18c>)
   82556:	691b      	ldr	r3, [r3, #16]
   82558:	4a0e      	ldr	r2, [pc, #56]	; (82594 <UDPHS_Handler+0x18c>)
   8255a:	f043 0302 	orr.w	r3, r3, #2
   8255e:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   82560:	4b0c      	ldr	r3, [pc, #48]	; (82594 <UDPHS_Handler+0x18c>)
   82562:	691b      	ldr	r3, [r3, #16]
   82564:	4a0b      	ldr	r2, [pc, #44]	; (82594 <UDPHS_Handler+0x18c>)
   82566:	f043 0308 	orr.w	r3, r3, #8
   8256a:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   8256c:	4b09      	ldr	r3, [pc, #36]	; (82594 <UDPHS_Handler+0x18c>)
   8256e:	691b      	ldr	r3, [r3, #16]
   82570:	4a08      	ldr	r2, [pc, #32]	; (82594 <UDPHS_Handler+0x18c>)
   82572:	f043 0304 	orr.w	r3, r3, #4
   82576:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   82578:	4b13      	ldr	r3, [pc, #76]	; (825c8 <UDPHS_Handler+0x1c0>)
   8257a:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   8257c:	e004      	b.n	82588 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   8257e:	bf00      	nop
   82580:	e002      	b.n	82588 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   82582:	bf00      	nop
   82584:	e000      	b.n	82588 <UDPHS_Handler+0x180>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   82586:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   82588:	bf00      	nop
}
   8258a:	bd80      	pop	{r7, pc}
   8258c:	000846c5 	.word	0x000846c5
   82590:	00086111 	.word	0x00086111
   82594:	400a4000 	.word	0x400a4000
   82598:	200003aa 	.word	0x200003aa
   8259c:	000851cd 	.word	0x000851cd
   825a0:	00080b5d 	.word	0x00080b5d
   825a4:	0008387d 	.word	0x0008387d
   825a8:	00083c99 	.word	0x00083c99
   825ac:	000839bd 	.word	0x000839bd
   825b0:	00085179 	.word	0x00085179
   825b4:	000831dd 	.word	0x000831dd
   825b8:	0008325d 	.word	0x0008325d
   825bc:	00084711 	.word	0x00084711
   825c0:	00080b45 	.word	0x00080b45
   825c4:	000823b1 	.word	0x000823b1
   825c8:	00080b51 	.word	0x00080b51

000825cc <udd_enable>:
#endif
}


void udd_enable(void)
{
   825cc:	b580      	push	{r7, lr}
   825ce:	b082      	sub	sp, #8
   825d0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   825d2:	4b19      	ldr	r3, [pc, #100]	; (82638 <udd_enable+0x6c>)
   825d4:	4798      	blx	r3

	udd_enable_periph_ck();
   825d6:	201d      	movs	r0, #29
   825d8:	4b18      	ldr	r3, [pc, #96]	; (8263c <udd_enable+0x70>)
   825da:	4798      	blx	r3

	flags = cpu_irq_save();
   825dc:	4b18      	ldr	r3, [pc, #96]	; (82640 <udd_enable+0x74>)
   825de:	4798      	blx	r3
   825e0:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   825e2:	4b18      	ldr	r3, [pc, #96]	; (82644 <udd_enable+0x78>)
   825e4:	681b      	ldr	r3, [r3, #0]
   825e6:	4a17      	ldr	r2, [pc, #92]	; (82644 <udd_enable+0x78>)
   825e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   825ec:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   825ee:	2105      	movs	r1, #5
   825f0:	201d      	movs	r0, #29
   825f2:	4b15      	ldr	r3, [pc, #84]	; (82648 <udd_enable+0x7c>)
   825f4:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   825f6:	201d      	movs	r0, #29
   825f8:	4b14      	ldr	r3, [pc, #80]	; (8264c <udd_enable+0x80>)
   825fa:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   825fc:	4b14      	ldr	r3, [pc, #80]	; (82650 <udd_enable+0x84>)
   825fe:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   82600:	4b10      	ldr	r3, [pc, #64]	; (82644 <udd_enable+0x78>)
   82602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   82606:	4a0f      	ldr	r2, [pc, #60]	; (82644 <udd_enable+0x78>)
   82608:	f023 0303 	bic.w	r3, r3, #3
   8260c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   82610:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   82614:	4b0f      	ldr	r3, [pc, #60]	; (82654 <udd_enable+0x88>)
   82616:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   82618:	4b0f      	ldr	r3, [pc, #60]	; (82658 <udd_enable+0x8c>)
   8261a:	2200      	movs	r2, #0
   8261c:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   8261e:	2003      	movs	r0, #3
   82620:	4b0e      	ldr	r3, [pc, #56]	; (8265c <udd_enable+0x90>)
   82622:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   82624:	4b0e      	ldr	r3, [pc, #56]	; (82660 <udd_enable+0x94>)
   82626:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   82628:	6878      	ldr	r0, [r7, #4]
   8262a:	4b0e      	ldr	r3, [pc, #56]	; (82664 <udd_enable+0x98>)
   8262c:	4798      	blx	r3
}
   8262e:	bf00      	nop
   82630:	3708      	adds	r7, #8
   82632:	46bd      	mov	sp, r7
   82634:	bd80      	pop	{r7, pc}
   82636:	bf00      	nop
   82638:	000842a9 	.word	0x000842a9
   8263c:	000846c5 	.word	0x000846c5
   82640:	000822b1 	.word	0x000822b1
   82644:	400a4000 	.word	0x400a4000
   82648:	0008225d 	.word	0x0008225d
   8264c:	0008222d 	.word	0x0008222d
   82650:	00083961 	.word	0x00083961
   82654:	00084781 	.word	0x00084781
   82658:	20001320 	.word	0x20001320
   8265c:	00082341 	.word	0x00082341
   82660:	00082669 	.word	0x00082669
   82664:	0008230d 	.word	0x0008230d

00082668 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   82668:	b580      	push	{r7, lr}
   8266a:	b082      	sub	sp, #8
   8266c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   8266e:	4b26      	ldr	r3, [pc, #152]	; (82708 <udd_attach+0xa0>)
   82670:	4798      	blx	r3
   82672:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   82674:	2001      	movs	r0, #1
   82676:	4b25      	ldr	r3, [pc, #148]	; (8270c <udd_attach+0xa4>)
   82678:	4798      	blx	r3
	udd_enable_periph_ck();
   8267a:	201d      	movs	r0, #29
   8267c:	4b24      	ldr	r3, [pc, #144]	; (82710 <udd_attach+0xa8>)
   8267e:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   82680:	4b24      	ldr	r3, [pc, #144]	; (82714 <udd_attach+0xac>)
   82682:	681b      	ldr	r3, [r3, #0]
   82684:	4a23      	ldr	r2, [pc, #140]	; (82714 <udd_attach+0xac>)
   82686:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8268a:	6013      	str	r3, [r2, #0]
   8268c:	4b21      	ldr	r3, [pc, #132]	; (82714 <udd_attach+0xac>)
   8268e:	681b      	ldr	r3, [r3, #0]
   82690:	4a20      	ldr	r2, [pc, #128]	; (82714 <udd_attach+0xac>)
   82692:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   82696:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   82698:	4b1e      	ldr	r3, [pc, #120]	; (82714 <udd_attach+0xac>)
   8269a:	691b      	ldr	r3, [r3, #16]
   8269c:	4a1d      	ldr	r2, [pc, #116]	; (82714 <udd_attach+0xac>)
   8269e:	f043 0310 	orr.w	r3, r3, #16
   826a2:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   826a4:	4b1b      	ldr	r3, [pc, #108]	; (82714 <udd_attach+0xac>)
   826a6:	691b      	ldr	r3, [r3, #16]
   826a8:	4a1a      	ldr	r2, [pc, #104]	; (82714 <udd_attach+0xac>)
   826aa:	f043 0302 	orr.w	r3, r3, #2
   826ae:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   826b0:	4b18      	ldr	r3, [pc, #96]	; (82714 <udd_attach+0xac>)
   826b2:	691b      	ldr	r3, [r3, #16]
   826b4:	4a17      	ldr	r2, [pc, #92]	; (82714 <udd_attach+0xac>)
   826b6:	f043 0320 	orr.w	r3, r3, #32
   826ba:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   826bc:	4b15      	ldr	r3, [pc, #84]	; (82714 <udd_attach+0xac>)
   826be:	691b      	ldr	r3, [r3, #16]
   826c0:	4a14      	ldr	r2, [pc, #80]	; (82714 <udd_attach+0xac>)
   826c2:	f043 0308 	orr.w	r3, r3, #8
   826c6:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   826c8:	4b12      	ldr	r3, [pc, #72]	; (82714 <udd_attach+0xac>)
   826ca:	691b      	ldr	r3, [r3, #16]
   826cc:	4a11      	ldr	r2, [pc, #68]	; (82714 <udd_attach+0xac>)
   826ce:	f043 0304 	orr.w	r3, r3, #4
   826d2:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   826d4:	4b0f      	ldr	r3, [pc, #60]	; (82714 <udd_attach+0xac>)
   826d6:	2208      	movs	r2, #8
   826d8:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   826da:	4b0e      	ldr	r3, [pc, #56]	; (82714 <udd_attach+0xac>)
   826dc:	2204      	movs	r2, #4
   826de:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   826e0:	4b0c      	ldr	r3, [pc, #48]	; (82714 <udd_attach+0xac>)
   826e2:	2210      	movs	r2, #16
   826e4:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   826e6:	4b0b      	ldr	r3, [pc, #44]	; (82714 <udd_attach+0xac>)
   826e8:	2202      	movs	r2, #2
   826ea:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   826ec:	4b09      	ldr	r3, [pc, #36]	; (82714 <udd_attach+0xac>)
   826ee:	2220      	movs	r2, #32
   826f0:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   826f2:	201d      	movs	r0, #29
   826f4:	4b08      	ldr	r3, [pc, #32]	; (82718 <udd_attach+0xb0>)
   826f6:	4798      	blx	r3
	cpu_irq_restore(flags);
   826f8:	6878      	ldr	r0, [r7, #4]
   826fa:	4b08      	ldr	r3, [pc, #32]	; (8271c <udd_attach+0xb4>)
   826fc:	4798      	blx	r3
}
   826fe:	bf00      	nop
   82700:	3708      	adds	r7, #8
   82702:	46bd      	mov	sp, r7
   82704:	bd80      	pop	{r7, pc}
   82706:	bf00      	nop
   82708:	000822b1 	.word	0x000822b1
   8270c:	000823b1 	.word	0x000823b1
   82710:	000846c5 	.word	0x000846c5
   82714:	400a4000 	.word	0x400a4000
   82718:	00084711 	.word	0x00084711
   8271c:	0008230d 	.word	0x0008230d

00082720 <udd_detach>:


void udd_detach(void)
{
   82720:	b580      	push	{r7, lr}
   82722:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   82724:	201d      	movs	r0, #29
   82726:	4b0b      	ldr	r3, [pc, #44]	; (82754 <udd_detach+0x34>)
   82728:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   8272a:	4b0b      	ldr	r3, [pc, #44]	; (82758 <udd_detach+0x38>)
   8272c:	681b      	ldr	r3, [r3, #0]
   8272e:	4a0a      	ldr	r2, [pc, #40]	; (82758 <udd_detach+0x38>)
   82730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   82734:	6013      	str	r3, [r2, #0]
   82736:	4b08      	ldr	r3, [pc, #32]	; (82758 <udd_detach+0x38>)
   82738:	681b      	ldr	r3, [r3, #0]
   8273a:	4a07      	ldr	r2, [pc, #28]	; (82758 <udd_detach+0x38>)
   8273c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82740:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   82742:	201d      	movs	r0, #29
   82744:	4b05      	ldr	r3, [pc, #20]	; (8275c <udd_detach+0x3c>)
   82746:	4798      	blx	r3
	udd_sleep_mode(false);
   82748:	2000      	movs	r0, #0
   8274a:	4b05      	ldr	r3, [pc, #20]	; (82760 <udd_detach+0x40>)
   8274c:	4798      	blx	r3
}
   8274e:	bf00      	nop
   82750:	bd80      	pop	{r7, pc}
   82752:	bf00      	nop
   82754:	000846c5 	.word	0x000846c5
   82758:	400a4000 	.word	0x400a4000
   8275c:	00084711 	.word	0x00084711
   82760:	000823b1 	.word	0x000823b1

00082764 <udd_is_high_speed>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68


bool udd_is_high_speed(void)
{
<<<<<<< HEAD
   82978:	b480      	push	{r7}
   8297a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8297c:	4b03      	ldr	r3, [pc, #12]	; (8298c <pmc_disable_pllack+0x14>)
   8297e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82982:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   82984:	bf00      	nop
   82986:	46bd      	mov	sp, r7
   82988:	bc80      	pop	{r7}
   8298a:	4770      	bx	lr
   8298c:	400e0400 	.word	0x400e0400

00082990 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82990:	b480      	push	{r7}
   82992:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82994:	4b03      	ldr	r3, [pc, #12]	; (829a4 <pmc_is_locked_pllack+0x14>)
   82996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82998:	f003 0302 	and.w	r3, r3, #2
}
   8299c:	4618      	mov	r0, r3
   8299e:	46bd      	mov	sp, r7
   829a0:	bc80      	pop	{r7}
   829a2:	4770      	bx	lr
   829a4:	400e0400 	.word	0x400e0400

000829a8 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   829a8:	b480      	push	{r7}
   829aa:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   829ac:	4b04      	ldr	r3, [pc, #16]	; (829c0 <pmc_disable_upll_clock+0x18>)
   829ae:	69db      	ldr	r3, [r3, #28]
   829b0:	4a03      	ldr	r2, [pc, #12]	; (829c0 <pmc_disable_upll_clock+0x18>)
   829b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   829b6:	61d3      	str	r3, [r2, #28]
}
   829b8:	bf00      	nop
   829ba:	46bd      	mov	sp, r7
   829bc:	bc80      	pop	{r7}
   829be:	4770      	bx	lr
   829c0:	400e0400 	.word	0x400e0400

000829c4 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   829c4:	b480      	push	{r7}
   829c6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   829c8:	4b03      	ldr	r3, [pc, #12]	; (829d8 <pmc_is_locked_upll+0x14>)
   829ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   829cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   829d0:	4618      	mov	r0, r3
   829d2:	46bd      	mov	sp, r7
   829d4:	bc80      	pop	{r7}
   829d6:	4770      	bx	lr
   829d8:	400e0400 	.word	0x400e0400

000829dc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   829dc:	b480      	push	{r7}
   829de:	b083      	sub	sp, #12
   829e0:	af00      	add	r7, sp, #0
   829e2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   829e4:	687b      	ldr	r3, [r7, #4]
   829e6:	2b1d      	cmp	r3, #29
   829e8:	d901      	bls.n	829ee <pmc_enable_periph_clk+0x12>
		return 1;
   829ea:	2301      	movs	r3, #1
   829ec:	e015      	b.n	82a1a <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   829ee:	687b      	ldr	r3, [r7, #4]
   829f0:	2b1f      	cmp	r3, #31
   829f2:	d811      	bhi.n	82a18 <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   829f4:	4b0b      	ldr	r3, [pc, #44]	; (82a24 <pmc_enable_periph_clk+0x48>)
   829f6:	699a      	ldr	r2, [r3, #24]
   829f8:	2101      	movs	r1, #1
   829fa:	687b      	ldr	r3, [r7, #4]
   829fc:	fa01 f303 	lsl.w	r3, r1, r3
   82a00:	401a      	ands	r2, r3
   82a02:	2101      	movs	r1, #1
   82a04:	687b      	ldr	r3, [r7, #4]
   82a06:	fa01 f303 	lsl.w	r3, r1, r3
   82a0a:	429a      	cmp	r2, r3
   82a0c:	d004      	beq.n	82a18 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   82a0e:	2201      	movs	r2, #1
   82a10:	687b      	ldr	r3, [r7, #4]
   82a12:	409a      	lsls	r2, r3
   82a14:	4b03      	ldr	r3, [pc, #12]	; (82a24 <pmc_enable_periph_clk+0x48>)
   82a16:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
=======
   82764:	b480      	push	{r7}
   82766:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   82768:	4b06      	ldr	r3, [pc, #24]	; (82784 <udd_is_high_speed+0x20>)
   8276a:	695b      	ldr	r3, [r3, #20]
   8276c:	f003 0301 	and.w	r3, r3, #1
   82770:	2b00      	cmp	r3, #0
   82772:	bf14      	ite	ne
   82774:	2301      	movne	r3, #1
   82776:	2300      	moveq	r3, #0
   82778:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   8277a:	4618      	mov	r0, r3
   8277c:	46bd      	mov	sp, r7
   8277e:	bc80      	pop	{r7}
   82780:	4770      	bx	lr
   82782:	bf00      	nop
   82784:	400a4000 	.word	0x400a4000

00082788 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   82788:	b480      	push	{r7}
   8278a:	b083      	sub	sp, #12
   8278c:	af00      	add	r7, sp, #0
   8278e:	4603      	mov	r3, r0
   82790:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   82792:	4b0d      	ldr	r3, [pc, #52]	; (827c8 <udd_set_address+0x40>)
   82794:	681b      	ldr	r3, [r3, #0]
   82796:	4a0c      	ldr	r2, [pc, #48]	; (827c8 <udd_set_address+0x40>)
   82798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8279c:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   8279e:	4b0a      	ldr	r3, [pc, #40]	; (827c8 <udd_set_address+0x40>)
   827a0:	681b      	ldr	r3, [r3, #0]
   827a2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   827a6:	79fb      	ldrb	r3, [r7, #7]
   827a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   827ac:	4906      	ldr	r1, [pc, #24]	; (827c8 <udd_set_address+0x40>)
   827ae:	4313      	orrs	r3, r2
   827b0:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   827b2:	4b05      	ldr	r3, [pc, #20]	; (827c8 <udd_set_address+0x40>)
   827b4:	681b      	ldr	r3, [r3, #0]
   827b6:	4a04      	ldr	r2, [pc, #16]	; (827c8 <udd_set_address+0x40>)
   827b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   827bc:	6013      	str	r3, [r2, #0]
}
   827be:	bf00      	nop
   827c0:	370c      	adds	r7, #12
   827c2:	46bd      	mov	sp, r7
   827c4:	bc80      	pop	{r7}
   827c6:	4770      	bx	lr
   827c8:	400a4000 	.word	0x400a4000

000827cc <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   827cc:	b480      	push	{r7}
   827ce:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   827d0:	4b04      	ldr	r3, [pc, #16]	; (827e4 <udd_getaddress+0x18>)
   827d2:	681b      	ldr	r3, [r3, #0]
   827d4:	b2db      	uxtb	r3, r3
   827d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   827da:	b2db      	uxtb	r3, r3
}
   827dc:	4618      	mov	r0, r3
   827de:	46bd      	mov	sp, r7
   827e0:	bc80      	pop	{r7}
   827e2:	4770      	bx	lr
   827e4:	400a4000 	.word	0x400a4000

000827e8 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   827e8:	b480      	push	{r7}
   827ea:	b083      	sub	sp, #12
   827ec:	af00      	add	r7, sp, #0
   827ee:	6078      	str	r0, [r7, #4]
   827f0:	460b      	mov	r3, r1
   827f2:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   827f4:	4a05      	ldr	r2, [pc, #20]	; (8280c <udd_set_setup_payload+0x24>)
   827f6:	687b      	ldr	r3, [r7, #4]
   827f8:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   827fa:	4a04      	ldr	r2, [pc, #16]	; (8280c <udd_set_setup_payload+0x24>)
   827fc:	887b      	ldrh	r3, [r7, #2]
   827fe:	8193      	strh	r3, [r2, #12]
}
   82800:	bf00      	nop
   82802:	370c      	adds	r7, #12
   82804:	46bd      	mov	sp, r7
   82806:	bc80      	pop	{r7}
   82808:	4770      	bx	lr
   8280a:	bf00      	nop
   8280c:	20001810 	.word	0x20001810

00082810 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   82810:	b590      	push	{r4, r7, lr}
   82812:	b089      	sub	sp, #36	; 0x24
   82814:	af02      	add	r7, sp, #8
   82816:	4603      	mov	r3, r0
   82818:	71fb      	strb	r3, [r7, #7]
   8281a:	460b      	mov	r3, r1
   8281c:	71bb      	strb	r3, [r7, #6]
   8281e:	4613      	mov	r3, r2
   82820:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   82822:	2300      	movs	r3, #0
   82824:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   82826:	2300      	movs	r3, #0
   82828:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   8282a:	79fb      	ldrb	r3, [r7, #7]
   8282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82830:	2b00      	cmp	r3, #0
   82832:	bf14      	ite	ne
   82834:	2301      	movne	r3, #1
   82836:	2300      	moveq	r3, #0
   82838:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   8283a:	79fb      	ldrb	r3, [r7, #7]
   8283c:	f003 030f 	and.w	r3, r3, #15
   82840:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   82842:	79fb      	ldrb	r3, [r7, #7]
   82844:	2b02      	cmp	r3, #2
   82846:	d901      	bls.n	8284c <udd_ep_alloc+0x3c>
		return false;
   82848:	2300      	movs	r3, #0
   8284a:	e1b4      	b.n	82bb6 <udd_ep_alloc+0x3a6>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   8284c:	4ab3      	ldr	r2, [pc, #716]	; (82b1c <udd_ep_alloc+0x30c>)
   8284e:	79fb      	ldrb	r3, [r7, #7]
   82850:	015b      	lsls	r3, r3, #5
   82852:	4413      	add	r3, r2
   82854:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   82858:	681b      	ldr	r3, [r3, #0]
   8285a:	f003 0301 	and.w	r3, r3, #1
   8285e:	2b00      	cmp	r3, #0
   82860:	d001      	beq.n	82866 <udd_ep_alloc+0x56>
		return false;
   82862:	2300      	movs	r3, #0
   82864:	e1a7      	b.n	82bb6 <udd_ep_alloc+0x3a6>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   82866:	79bb      	ldrb	r3, [r7, #6]
   82868:	f003 0303 	and.w	r3, r3, #3
   8286c:	2b03      	cmp	r3, #3
   8286e:	d01a      	beq.n	828a6 <udd_ep_alloc+0x96>
   82870:	2b03      	cmp	r3, #3
   82872:	dc1e      	bgt.n	828b2 <udd_ep_alloc+0xa2>
   82874:	2b01      	cmp	r3, #1
   82876:	d002      	beq.n	8287e <udd_ep_alloc+0x6e>
   82878:	2b02      	cmp	r3, #2
   8287a:	d017      	beq.n	828ac <udd_ep_alloc+0x9c>
   8287c:	e019      	b.n	828b2 <udd_ep_alloc+0xa2>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   8287e:	79fb      	ldrb	r3, [r7, #7]
   82880:	2b00      	cmp	r3, #0
   82882:	d007      	beq.n	82894 <udd_ep_alloc+0x84>
   82884:	79fb      	ldrb	r3, [r7, #7]
   82886:	2b03      	cmp	r3, #3
   82888:	d004      	beq.n	82894 <udd_ep_alloc+0x84>
   8288a:	79fb      	ldrb	r3, [r7, #7]
   8288c:	2b04      	cmp	r3, #4
   8288e:	d001      	beq.n	82894 <udd_ep_alloc+0x84>
   82890:	2301      	movs	r3, #1
   82892:	e000      	b.n	82896 <udd_ep_alloc+0x86>
   82894:	2300      	movs	r3, #0
   82896:	747b      	strb	r3, [r7, #17]
   82898:	7c7b      	ldrb	r3, [r7, #17]
   8289a:	f003 0301 	and.w	r3, r3, #1
   8289e:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   828a0:	2301      	movs	r3, #1
   828a2:	757b      	strb	r3, [r7, #21]
		break;
   828a4:	e007      	b.n	828b6 <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   828a6:	2301      	movs	r3, #1
   828a8:	757b      	strb	r3, [r7, #21]
		break;
   828aa:	e004      	b.n	828b6 <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   828ac:	2302      	movs	r3, #2
   828ae:	757b      	strb	r3, [r7, #21]
		break;
   828b0:	e001      	b.n	828b6 <udd_ep_alloc+0xa6>
	default:
		Assert(false);
		return false;
   828b2:	2300      	movs	r3, #0
   828b4:	e17f      	b.n	82bb6 <udd_ep_alloc+0x3a6>
	}
	switch (nb_bank) {
   828b6:	7d7b      	ldrb	r3, [r7, #21]
   828b8:	2b03      	cmp	r3, #3
   828ba:	d00c      	beq.n	828d6 <udd_ep_alloc+0xc6>
   828bc:	2b03      	cmp	r3, #3
   828be:	dc0d      	bgt.n	828dc <udd_ep_alloc+0xcc>
   828c0:	2b01      	cmp	r3, #1
   828c2:	d002      	beq.n	828ca <udd_ep_alloc+0xba>
   828c4:	2b02      	cmp	r3, #2
   828c6:	d003      	beq.n	828d0 <udd_ep_alloc+0xc0>
   828c8:	e008      	b.n	828dc <udd_ep_alloc+0xcc>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   828ca:	2301      	movs	r3, #1
   828cc:	753b      	strb	r3, [r7, #20]
		break;
   828ce:	e007      	b.n	828e0 <udd_ep_alloc+0xd0>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   828d0:	2302      	movs	r3, #2
   828d2:	753b      	strb	r3, [r7, #20]
		break;
   828d4:	e004      	b.n	828e0 <udd_ep_alloc+0xd0>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   828d6:	2303      	movs	r3, #3
   828d8:	753b      	strb	r3, [r7, #20]
		break;
   828da:	e001      	b.n	828e0 <udd_ep_alloc+0xd0>
	default:
		Assert(false);
		return false;
   828dc:	2300      	movs	r3, #0
   828de:	e16a      	b.n	82bb6 <udd_ep_alloc+0x3a6>
	}
	if (b_iso_hbw) {
   828e0:	7c7b      	ldrb	r3, [r7, #17]
   828e2:	2b00      	cmp	r3, #0
   828e4:	d017      	beq.n	82916 <udd_ep_alloc+0x106>
		switch(MaxEndpointSize & (0x3u << 11)) {
   828e6:	88bb      	ldrh	r3, [r7, #4]
   828e8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   828ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   828f0:	d003      	beq.n	828fa <udd_ep_alloc+0xea>
   828f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   828f6:	d003      	beq.n	82900 <udd_ep_alloc+0xf0>
   828f8:	e005      	b.n	82906 <udd_ep_alloc+0xf6>
		case (0x1u << 11):
			nb_tran = 2;
   828fa:	2302      	movs	r3, #2
   828fc:	74fb      	strb	r3, [r7, #19]
			break;
   828fe:	e005      	b.n	8290c <udd_ep_alloc+0xfc>
		case (0x2u << 11):
			nb_tran = 3;
   82900:	2303      	movs	r3, #3
   82902:	74fb      	strb	r3, [r7, #19]
			break;
   82904:	e002      	b.n	8290c <udd_ep_alloc+0xfc>
		default:
			nb_tran = 1;
   82906:	2301      	movs	r3, #1
   82908:	74fb      	strb	r3, [r7, #19]
			break;
   8290a:	bf00      	nop
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
		}
		MaxEndpointSize &= ~(0x3u << 11);
   8290c:	88bb      	ldrh	r3, [r7, #4]
   8290e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   82912:	80bb      	strh	r3, [r7, #4]
   82914:	e006      	b.n	82924 <udd_ep_alloc+0x114>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   82916:	88bb      	ldrh	r3, [r7, #4]
   82918:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   8291c:	2b00      	cmp	r3, #0
   8291e:	d001      	beq.n	82924 <udd_ep_alloc+0x114>
		// High BW not supported
		return false;
   82920:	2300      	movs	r3, #0
   82922:	e148      	b.n	82bb6 <udd_ep_alloc+0x3a6>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   82924:	4a7d      	ldr	r2, [pc, #500]	; (82b1c <udd_ep_alloc+0x30c>)
   82926:	79fb      	ldrb	r3, [r7, #7]
   82928:	3308      	adds	r3, #8
   8292a:	015b      	lsls	r3, r3, #5
   8292c:	4413      	add	r3, r2
   8292e:	681b      	ldr	r3, [r3, #0]
   82930:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   82934:	f023 0303 	bic.w	r3, r3, #3
   82938:	79ba      	ldrb	r2, [r7, #6]
   8293a:	0112      	lsls	r2, r2, #4
   8293c:	f002 0230 	and.w	r2, r2, #48	; 0x30
   82940:	7c39      	ldrb	r1, [r7, #16]
   82942:	2900      	cmp	r1, #0
   82944:	d001      	beq.n	8294a <udd_ep_alloc+0x13a>
   82946:	2108      	movs	r1, #8
   82948:	e000      	b.n	8294c <udd_ep_alloc+0x13c>
   8294a:	2100      	movs	r1, #0
   8294c:	4311      	orrs	r1, r2
   8294e:	88ba      	ldrh	r2, [r7, #4]
   82950:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   82954:	d207      	bcs.n	82966 <udd_ep_alloc+0x156>
   82956:	88ba      	ldrh	r2, [r7, #4]
   82958:	2a08      	cmp	r2, #8
   8295a:	bf38      	it	cc
   8295c:	2208      	movcc	r2, #8
   8295e:	b292      	uxth	r2, r2
   82960:	0052      	lsls	r2, r2, #1
   82962:	3a01      	subs	r2, #1
   82964:	e001      	b.n	8296a <udd_ep_alloc+0x15a>
   82966:	f240 72ff 	movw	r2, #2047	; 0x7ff
   8296a:	fab2 f282 	clz	r2, r2
   8296e:	f1c2 021c 	rsb	r2, r2, #28
   82972:	4311      	orrs	r1, r2
   82974:	7d3a      	ldrb	r2, [r7, #20]
   82976:	0192      	lsls	r2, r2, #6
   82978:	b2d2      	uxtb	r2, r2
   8297a:	4311      	orrs	r1, r2
   8297c:	7c7a      	ldrb	r2, [r7, #17]
   8297e:	2a00      	cmp	r2, #0
   82980:	d004      	beq.n	8298c <udd_ep_alloc+0x17c>
   82982:	7cfa      	ldrb	r2, [r7, #19]
   82984:	0212      	lsls	r2, r2, #8
   82986:	f402 7240 	and.w	r2, r2, #768	; 0x300
   8298a:	e000      	b.n	8298e <udd_ep_alloc+0x17e>
   8298c:	2200      	movs	r2, #0
   8298e:	430a      	orrs	r2, r1
   82990:	f3c2 0209 	ubfx	r2, r2, #0, #10
   82994:	4861      	ldr	r0, [pc, #388]	; (82b1c <udd_ep_alloc+0x30c>)
   82996:	79f9      	ldrb	r1, [r7, #7]
   82998:	431a      	orrs	r2, r3
   8299a:	f101 0308 	add.w	r3, r1, #8
   8299e:	015b      	lsls	r3, r3, #5
   829a0:	4403      	add	r3, r0
   829a2:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   829a4:	4a5d      	ldr	r2, [pc, #372]	; (82b1c <udd_ep_alloc+0x30c>)
   829a6:	79fb      	ldrb	r3, [r7, #7]
   829a8:	3308      	adds	r3, #8
   829aa:	015b      	lsls	r3, r3, #5
   829ac:	4413      	add	r3, r2
   829ae:	681b      	ldr	r3, [r3, #0]
   829b0:	2b00      	cmp	r3, #0
   829b2:	db01      	blt.n	829b8 <udd_ep_alloc+0x1a8>
		return false;
   829b4:	2300      	movs	r3, #0
   829b6:	e0fe      	b.n	82bb6 <udd_ep_alloc+0x3a6>
	}
	udd_enable_endpoint(ep);
   829b8:	4a58      	ldr	r2, [pc, #352]	; (82b1c <udd_ep_alloc+0x30c>)
   829ba:	79fb      	ldrb	r3, [r7, #7]
   829bc:	3308      	adds	r3, #8
   829be:	015b      	lsls	r3, r3, #5
   829c0:	4413      	add	r3, r2
   829c2:	3304      	adds	r3, #4
   829c4:	2201      	movs	r2, #1
   829c6:	601a      	str	r2, [r3, #0]

<<<<<<< HEAD
	return 0;
   82a18:	2300      	movs	r3, #0
}
   82a1a:	4618      	mov	r0, r3
   82a1c:	370c      	adds	r7, #12
   82a1e:	46bd      	mov	sp, r7
   82a20:	bc80      	pop	{r7}
   82a22:	4770      	bx	lr
   82a24:	400e0400 	.word	0x400e0400

00082a28 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   82a28:	b480      	push	{r7}
   82a2a:	b083      	sub	sp, #12
   82a2c:	af00      	add	r7, sp, #0
   82a2e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82a30:	687b      	ldr	r3, [r7, #4]
   82a32:	2b1d      	cmp	r3, #29
   82a34:	d901      	bls.n	82a3a <pmc_disable_periph_clk+0x12>
		return 1;
   82a36:	2301      	movs	r3, #1
   82a38:	e015      	b.n	82a66 <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   82a3a:	687b      	ldr	r3, [r7, #4]
   82a3c:	2b1f      	cmp	r3, #31
   82a3e:	d811      	bhi.n	82a64 <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   82a40:	4b0b      	ldr	r3, [pc, #44]	; (82a70 <pmc_disable_periph_clk+0x48>)
   82a42:	699a      	ldr	r2, [r3, #24]
   82a44:	2101      	movs	r1, #1
   82a46:	687b      	ldr	r3, [r7, #4]
   82a48:	fa01 f303 	lsl.w	r3, r1, r3
   82a4c:	401a      	ands	r2, r3
   82a4e:	2101      	movs	r1, #1
   82a50:	687b      	ldr	r3, [r7, #4]
   82a52:	fa01 f303 	lsl.w	r3, r1, r3
   82a56:	429a      	cmp	r2, r3
   82a58:	d104      	bne.n	82a64 <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   82a5a:	2201      	movs	r2, #1
   82a5c:	687b      	ldr	r3, [r7, #4]
   82a5e:	409a      	lsls	r2, r3
   82a60:	4b03      	ldr	r3, [pc, #12]	; (82a70 <pmc_disable_periph_clk+0x48>)
   82a62:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
=======
	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   829c8:	2300      	movs	r3, #0
   829ca:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   829cc:	2302      	movs	r3, #2
   829ce:	74bb      	strb	r3, [r7, #18]
   829d0:	e039      	b.n	82a46 <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
   829d2:	4a52      	ldr	r2, [pc, #328]	; (82b1c <udd_ep_alloc+0x30c>)
   829d4:	7cbb      	ldrb	r3, [r7, #18]
   829d6:	015b      	lsls	r3, r3, #5
   829d8:	4413      	add	r3, r2
   829da:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   829de:	681b      	ldr	r3, [r3, #0]
   829e0:	f003 0301 	and.w	r3, r3, #1
   829e4:	2b00      	cmp	r3, #0
   829e6:	d02b      	beq.n	82a40 <udd_ep_alloc+0x230>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   829e8:	4a4c      	ldr	r2, [pc, #304]	; (82b1c <udd_ep_alloc+0x30c>)
   829ea:	7cbb      	ldrb	r3, [r7, #18]
   829ec:	3308      	adds	r3, #8
   829ee:	015b      	lsls	r3, r3, #5
   829f0:	4413      	add	r3, r2
   829f2:	681b      	ldr	r3, [r3, #0]
   829f4:	099b      	lsrs	r3, r3, #6
   829f6:	b2db      	uxtb	r3, r3
   829f8:	f003 0303 	and.w	r3, r3, #3
   829fc:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   829fe:	7d3a      	ldrb	r2, [r7, #20]
   82a00:	7cbb      	ldrb	r3, [r7, #18]
   82a02:	005b      	lsls	r3, r3, #1
   82a04:	fa02 f303 	lsl.w	r3, r2, r3
   82a08:	b21a      	sxth	r2, r3
   82a0a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   82a0e:	4313      	orrs	r3, r2
   82a10:	b21b      	sxth	r3, r3
   82a12:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   82a14:	4a41      	ldr	r2, [pc, #260]	; (82b1c <udd_ep_alloc+0x30c>)
   82a16:	7cbb      	ldrb	r3, [r7, #18]
   82a18:	015b      	lsls	r3, r3, #5
   82a1a:	4413      	add	r3, r2
   82a1c:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82a20:	2201      	movs	r2, #1
   82a22:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   82a24:	4a3d      	ldr	r2, [pc, #244]	; (82b1c <udd_ep_alloc+0x30c>)
   82a26:	7cbb      	ldrb	r3, [r7, #18]
   82a28:	3308      	adds	r3, #8
   82a2a:	015b      	lsls	r3, r3, #5
   82a2c:	4413      	add	r3, r2
   82a2e:	681a      	ldr	r2, [r3, #0]
   82a30:	493a      	ldr	r1, [pc, #232]	; (82b1c <udd_ep_alloc+0x30c>)
   82a32:	7cbb      	ldrb	r3, [r7, #18]
   82a34:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   82a38:	3308      	adds	r3, #8
   82a3a:	015b      	lsls	r3, r3, #5
   82a3c:	440b      	add	r3, r1
   82a3e:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   82a40:	7cbb      	ldrb	r3, [r7, #18]
   82a42:	3b01      	subs	r3, #1
   82a44:	74bb      	strb	r3, [r7, #18]
   82a46:	7cba      	ldrb	r2, [r7, #18]
   82a48:	79fb      	ldrb	r3, [r7, #7]
   82a4a:	429a      	cmp	r2, r3
   82a4c:	d2c1      	bcs.n	829d2 <udd_ep_alloc+0x1c2>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   82a4e:	79fb      	ldrb	r3, [r7, #7]
   82a50:	74bb      	strb	r3, [r7, #18]
   82a52:	e0ab      	b.n	82bac <udd_ep_alloc+0x39c>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   82a54:	7cbb      	ldrb	r3, [r7, #18]
   82a56:	1e5a      	subs	r2, r3, #1
   82a58:	4613      	mov	r3, r2
   82a5a:	005b      	lsls	r3, r3, #1
   82a5c:	4413      	add	r3, r2
   82a5e:	00db      	lsls	r3, r3, #3
   82a60:	4a2f      	ldr	r2, [pc, #188]	; (82b20 <udd_ep_alloc+0x310>)
   82a62:	4413      	add	r3, r2
   82a64:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   82a66:	68fb      	ldr	r3, [r7, #12]
   82a68:	7d1b      	ldrb	r3, [r3, #20]
   82a6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
   82a6e:	b2db      	uxtb	r3, r3
   82a70:	2b00      	cmp	r3, #0
   82a72:	bf14      	ite	ne
   82a74:	2301      	movne	r3, #1
   82a76:	2300      	moveq	r3, #0
   82a78:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   82a7a:	8afa      	ldrh	r2, [r7, #22]
   82a7c:	7cbb      	ldrb	r3, [r7, #18]
   82a7e:	005b      	lsls	r3, r3, #1
   82a80:	fa42 f303 	asr.w	r3, r2, r3
   82a84:	b2db      	uxtb	r3, r3
   82a86:	f003 0303 	and.w	r3, r3, #3
   82a8a:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   82a8c:	7d3b      	ldrb	r3, [r7, #20]
   82a8e:	2b00      	cmp	r3, #0
   82a90:	f000 8088 	beq.w	82ba4 <udd_ep_alloc+0x394>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   82a94:	68fa      	ldr	r2, [r7, #12]
   82a96:	7d13      	ldrb	r3, [r2, #20]
   82a98:	f36f 0300 	bfc	r3, #0, #1
   82a9c:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   82a9e:	4a1f      	ldr	r2, [pc, #124]	; (82b1c <udd_ep_alloc+0x30c>)
   82aa0:	7cbb      	ldrb	r3, [r7, #18]
   82aa2:	3308      	adds	r3, #8
   82aa4:	015b      	lsls	r3, r3, #5
   82aa6:	4413      	add	r3, r2
   82aa8:	681b      	ldr	r3, [r3, #0]
   82aaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   82aae:	7d3b      	ldrb	r3, [r7, #20]
   82ab0:	019b      	lsls	r3, r3, #6
   82ab2:	b2da      	uxtb	r2, r3
   82ab4:	4819      	ldr	r0, [pc, #100]	; (82b1c <udd_ep_alloc+0x30c>)
   82ab6:	7cbb      	ldrb	r3, [r7, #18]
   82ab8:	430a      	orrs	r2, r1
   82aba:	3308      	adds	r3, #8
   82abc:	015b      	lsls	r3, r3, #5
   82abe:	4403      	add	r3, r0
   82ac0:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   82ac2:	4a16      	ldr	r2, [pc, #88]	; (82b1c <udd_ep_alloc+0x30c>)
   82ac4:	7cbb      	ldrb	r3, [r7, #18]
   82ac6:	3308      	adds	r3, #8
   82ac8:	015b      	lsls	r3, r3, #5
   82aca:	4413      	add	r3, r2
   82acc:	3304      	adds	r3, #4
   82ace:	2201      	movs	r2, #1
   82ad0:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   82ad2:	4a12      	ldr	r2, [pc, #72]	; (82b1c <udd_ep_alloc+0x30c>)
   82ad4:	7cbb      	ldrb	r3, [r7, #18]
   82ad6:	3308      	adds	r3, #8
   82ad8:	015b      	lsls	r3, r3, #5
   82ada:	4413      	add	r3, r2
   82adc:	681b      	ldr	r3, [r3, #0]
   82ade:	2b00      	cmp	r3, #0
   82ae0:	db20      	blt.n	82b24 <udd_ep_alloc+0x314>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   82ae2:	68fb      	ldr	r3, [r7, #12]
   82ae4:	681b      	ldr	r3, [r3, #0]
   82ae6:	2b00      	cmp	r3, #0
   82ae8:	d101      	bne.n	82aee <udd_ep_alloc+0x2de>
				return false;
   82aea:	2300      	movs	r3, #0
   82aec:	e063      	b.n	82bb6 <udd_ep_alloc+0x3a6>
			}
			if (Is_udd_endpoint_in(i)) {
   82aee:	4a0b      	ldr	r2, [pc, #44]	; (82b1c <udd_ep_alloc+0x30c>)
   82af0:	7cbb      	ldrb	r3, [r7, #18]
   82af2:	3308      	adds	r3, #8
   82af4:	015b      	lsls	r3, r3, #5
   82af6:	4413      	add	r3, r2
   82af8:	681b      	ldr	r3, [r3, #0]
   82afa:	f003 0308 	and.w	r3, r3, #8
   82afe:	2b00      	cmp	r3, #0
   82b00:	d003      	beq.n	82b0a <udd_ep_alloc+0x2fa>
				i |= USB_EP_DIR_IN;
   82b02:	7cbb      	ldrb	r3, [r7, #18]
   82b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
   82b08:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   82b0a:	68fb      	ldr	r3, [r7, #12]
   82b0c:	681b      	ldr	r3, [r3, #0]
   82b0e:	68fa      	ldr	r2, [r7, #12]
   82b10:	68d1      	ldr	r1, [r2, #12]
   82b12:	7cba      	ldrb	r2, [r7, #18]
   82b14:	2001      	movs	r0, #1
   82b16:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   82b18:	2300      	movs	r3, #0
   82b1a:	e04c      	b.n	82bb6 <udd_ep_alloc+0x3a6>
   82b1c:	400a4000 	.word	0x400a4000
   82b20:	20001328 	.word	0x20001328
		}
		udd_enable_endpoint_bank_autoswitch(i);
   82b24:	4a26      	ldr	r2, [pc, #152]	; (82bc0 <udd_ep_alloc+0x3b0>)
   82b26:	7cbb      	ldrb	r3, [r7, #18]
   82b28:	3308      	adds	r3, #8
   82b2a:	015b      	lsls	r3, r3, #5
   82b2c:	4413      	add	r3, r2
   82b2e:	3304      	adds	r3, #4
   82b30:	681a      	ldr	r2, [r3, #0]
   82b32:	4923      	ldr	r1, [pc, #140]	; (82bc0 <udd_ep_alloc+0x3b0>)
   82b34:	7cbb      	ldrb	r3, [r7, #18]
   82b36:	f042 0202 	orr.w	r2, r2, #2
   82b3a:	3308      	adds	r3, #8
   82b3c:	015b      	lsls	r3, r3, #5
   82b3e:	440b      	add	r3, r1
   82b40:	3304      	adds	r3, #4
   82b42:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   82b44:	7afb      	ldrb	r3, [r7, #11]
   82b46:	2b00      	cmp	r3, #0
   82b48:	d02d      	beq.n	82ba6 <udd_ep_alloc+0x396>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   82b4a:	68fb      	ldr	r3, [r7, #12]
   82b4c:	68da      	ldr	r2, [r3, #12]
   82b4e:	68fb      	ldr	r3, [r7, #12]
   82b50:	691b      	ldr	r3, [r3, #16]
   82b52:	1ad2      	subs	r2, r2, r3
   82b54:	68fb      	ldr	r3, [r7, #12]
   82b56:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   82b58:	68fb      	ldr	r3, [r7, #12]
   82b5a:	7d1b      	ldrb	r3, [r3, #20]
   82b5c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   82b60:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   82b62:	2b00      	cmp	r3, #0
   82b64:	bf14      	ite	ne
   82b66:	2301      	movne	r3, #1
   82b68:	2300      	moveq	r3, #0
   82b6a:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   82b6c:	68fb      	ldr	r3, [r7, #12]
   82b6e:	685a      	ldr	r2, [r3, #4]
   82b70:	68fb      	ldr	r3, [r7, #12]
   82b72:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   82b74:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   82b76:	68fb      	ldr	r3, [r7, #12]
   82b78:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   82b7a:	68fb      	ldr	r3, [r7, #12]
   82b7c:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   82b7e:	1ad2      	subs	r2, r2, r3
   82b80:	68fb      	ldr	r3, [r7, #12]
   82b82:	681b      	ldr	r3, [r3, #0]
   82b84:	7cb8      	ldrb	r0, [r7, #18]
   82b86:	9300      	str	r3, [sp, #0]
   82b88:	4613      	mov	r3, r2
   82b8a:	4622      	mov	r2, r4
   82b8c:	4c0d      	ldr	r4, [pc, #52]	; (82bc4 <udd_ep_alloc+0x3b4>)
   82b8e:	47a0      	blx	r4
   82b90:	4603      	mov	r3, r0
   82b92:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   82b94:	7afb      	ldrb	r3, [r7, #11]
   82b96:	f083 0301 	eor.w	r3, r3, #1
   82b9a:	b2db      	uxtb	r3, r3
   82b9c:	2b00      	cmp	r3, #0
   82b9e:	d002      	beq.n	82ba6 <udd_ep_alloc+0x396>
				dbg_print("ErrReRun%d ", i);
				return false;
   82ba0:	2300      	movs	r3, #0
   82ba2:	e008      	b.n	82bb6 <udd_ep_alloc+0x3a6>
			continue;
   82ba4:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   82ba6:	7cbb      	ldrb	r3, [r7, #18]
   82ba8:	3301      	adds	r3, #1
   82baa:	74bb      	strb	r3, [r7, #18]
   82bac:	7cbb      	ldrb	r3, [r7, #18]
   82bae:	2b02      	cmp	r3, #2
   82bb0:	f67f af50 	bls.w	82a54 <udd_ep_alloc+0x244>
			}
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
		}
	}
<<<<<<< HEAD
	return 0;
   82a64:	2300      	movs	r3, #0
}
   82a66:	4618      	mov	r0, r3
   82a68:	370c      	adds	r7, #12
   82a6a:	46bd      	mov	sp, r7
   82a6c:	bc80      	pop	{r7}
   82a6e:	4770      	bx	lr
   82a70:	400e0400 	.word	0x400e0400

00082a74 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   82a74:	b480      	push	{r7}
   82a76:	b083      	sub	sp, #12
   82a78:	af00      	add	r7, sp, #0
   82a7a:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   82a7c:	4a05      	ldr	r2, [pc, #20]	; (82a94 <pmc_enable_pck+0x20>)
   82a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
   82a82:	687b      	ldr	r3, [r7, #4]
   82a84:	fa01 f303 	lsl.w	r3, r1, r3
   82a88:	6013      	str	r3, [r2, #0]
}
   82a8a:	bf00      	nop
   82a8c:	370c      	adds	r7, #12
   82a8e:	46bd      	mov	sp, r7
   82a90:	bc80      	pop	{r7}
   82a92:	4770      	bx	lr
   82a94:	400e0400 	.word	0x400e0400

00082a98 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   82a98:	b480      	push	{r7}
   82a9a:	b083      	sub	sp, #12
   82a9c:	af00      	add	r7, sp, #0
   82a9e:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   82aa0:	687b      	ldr	r3, [r7, #4]
   82aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
   82aa6:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   82aa8:	4b05      	ldr	r3, [pc, #20]	; (82ac0 <pmc_set_fast_startup_input+0x28>)
   82aaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82aac:	4904      	ldr	r1, [pc, #16]	; (82ac0 <pmc_set_fast_startup_input+0x28>)
   82aae:	687b      	ldr	r3, [r7, #4]
   82ab0:	4313      	orrs	r3, r2
   82ab2:	670b      	str	r3, [r1, #112]	; 0x70
}
   82ab4:	bf00      	nop
   82ab6:	370c      	adds	r7, #12
   82ab8:	46bd      	mov	sp, r7
   82aba:	bc80      	pop	{r7}
   82abc:	4770      	bx	lr
   82abe:	bf00      	nop
   82ac0:	400e0400 	.word	0x400e0400

00082ac4 <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   82ac4:	b480      	push	{r7}
   82ac6:	b083      	sub	sp, #12
   82ac8:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   82aca:	4b13      	ldr	r3, [pc, #76]	; (82b18 <pmc_enable_waitmode+0x54>)
   82acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82ace:	4a12      	ldr	r2, [pc, #72]	; (82b18 <pmc_enable_waitmode+0x54>)
   82ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82ad4:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   82ad6:	4b11      	ldr	r3, [pc, #68]	; (82b1c <pmc_enable_waitmode+0x58>)
   82ad8:	691b      	ldr	r3, [r3, #16]
   82ada:	4a10      	ldr	r2, [pc, #64]	; (82b1c <pmc_enable_waitmode+0x58>)
   82adc:	f023 0304 	bic.w	r3, r3, #4
   82ae0:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   82ae2:	bf20      	wfe
}
   82ae4:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   82ae6:	2300      	movs	r3, #0
   82ae8:	607b      	str	r3, [r7, #4]
   82aea:	e004      	b.n	82af6 <pmc_enable_waitmode+0x32>
  __ASM volatile ("nop");
   82aec:	bf00      	nop
}
   82aee:	bf00      	nop
   82af0:	687b      	ldr	r3, [r7, #4]
   82af2:	3301      	adds	r3, #1
   82af4:	607b      	str	r3, [r7, #4]
   82af6:	687b      	ldr	r3, [r7, #4]
   82af8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82afc:	d3f6      	bcc.n	82aec <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   82afe:	bf00      	nop
   82b00:	4b05      	ldr	r3, [pc, #20]	; (82b18 <pmc_enable_waitmode+0x54>)
   82b02:	6a1b      	ldr	r3, [r3, #32]
   82b04:	f003 0308 	and.w	r3, r3, #8
   82b08:	2b00      	cmp	r3, #0
   82b0a:	d0f9      	beq.n	82b00 <pmc_enable_waitmode+0x3c>

}
   82b0c:	bf00      	nop
   82b0e:	bf00      	nop
   82b10:	370c      	adds	r7, #12
   82b12:	46bd      	mov	sp, r7
   82b14:	bc80      	pop	{r7}
   82b16:	4770      	bx	lr
   82b18:	400e0400 	.word	0x400e0400
   82b1c:	e000ed00 	.word	0xe000ed00

00082b20 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning
=======
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   82bb4:	2301      	movs	r3, #1
}
   82bb6:	4618      	mov	r0, r3
   82bb8:	371c      	adds	r7, #28
   82bba:	46bd      	mov	sp, r7
   82bbc:	bd90      	pop	{r4, r7, pc}
   82bbe:	bf00      	nop
   82bc0:	400a4000 	.word	0x400a4000
   82bc4:	00082ef5 	.word	0x00082ef5

00082bc8 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   82bc8:	b580      	push	{r7, lr}
   82bca:	b084      	sub	sp, #16
   82bcc:	af00      	add	r7, sp, #0
   82bce:	4603      	mov	r3, r0
   82bd0:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82bd2:	79fb      	ldrb	r3, [r7, #7]
   82bd4:	f003 030f 	and.w	r3, r3, #15
   82bd8:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   82bda:	7bfb      	ldrb	r3, [r7, #15]
   82bdc:	2b02      	cmp	r3, #2
   82bde:	d828      	bhi.n	82c32 <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   82be0:	4a16      	ldr	r2, [pc, #88]	; (82c3c <udd_ep_free+0x74>)
   82be2:	7bfb      	ldrb	r3, [r7, #15]
   82be4:	015b      	lsls	r3, r3, #5
   82be6:	4413      	add	r3, r2
   82be8:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82bec:	2201      	movs	r2, #1
   82bee:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   82bf0:	4a12      	ldr	r2, [pc, #72]	; (82c3c <udd_ep_free+0x74>)
   82bf2:	7bfb      	ldrb	r3, [r7, #15]
   82bf4:	3308      	adds	r3, #8
   82bf6:	015b      	lsls	r3, r3, #5
   82bf8:	4413      	add	r3, r2
   82bfa:	681a      	ldr	r2, [r3, #0]
   82bfc:	490f      	ldr	r1, [pc, #60]	; (82c3c <udd_ep_free+0x74>)
   82bfe:	7bfb      	ldrb	r3, [r7, #15]
   82c00:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   82c04:	3308      	adds	r3, #8
   82c06:	015b      	lsls	r3, r3, #5
   82c08:	440b      	add	r3, r1
   82c0a:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   82c0c:	79fb      	ldrb	r3, [r7, #7]
   82c0e:	4618      	mov	r0, r3
   82c10:	4b0b      	ldr	r3, [pc, #44]	; (82c40 <udd_ep_free+0x78>)
   82c12:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   82c14:	7bfb      	ldrb	r3, [r7, #15]
   82c16:	1e5a      	subs	r2, r3, #1
   82c18:	490a      	ldr	r1, [pc, #40]	; (82c44 <udd_ep_free+0x7c>)
   82c1a:	4613      	mov	r3, r2
   82c1c:	005b      	lsls	r3, r3, #1
   82c1e:	4413      	add	r3, r2
   82c20:	00db      	lsls	r3, r3, #3
   82c22:	440b      	add	r3, r1
   82c24:	f103 0210 	add.w	r2, r3, #16
   82c28:	7913      	ldrb	r3, [r2, #4]
   82c2a:	f36f 0382 	bfc	r3, #2, #1
   82c2e:	7113      	strb	r3, [r2, #4]
   82c30:	e000      	b.n	82c34 <udd_ep_free+0x6c>
		return;
   82c32:	bf00      	nop
}
   82c34:	3710      	adds	r7, #16
   82c36:	46bd      	mov	sp, r7
   82c38:	bd80      	pop	{r7, pc}
   82c3a:	bf00      	nop
   82c3c:	400a4000 	.word	0x400a4000
   82c40:	00083a05 	.word	0x00083a05
   82c44:	20001328 	.word	0x20001328

00082c48 <udd_ep_is_halted>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68


bool udd_ep_is_halted(udd_ep_id_t ep)
{
<<<<<<< HEAD
   82b20:	b580      	push	{r7, lr}
   82b22:	b086      	sub	sp, #24
   82b24:	af00      	add	r7, sp, #0
   82b26:	60f8      	str	r0, [r7, #12]
   82b28:	60b9      	str	r1, [r7, #8]
   82b2a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   82b2c:	2300      	movs	r3, #0
   82b2e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   82b30:	68fb      	ldr	r3, [r7, #12]
   82b32:	2b00      	cmp	r3, #0
   82b34:	d012      	beq.n	82b5c <_read+0x3c>
		return -1;
   82b36:	f04f 33ff 	mov.w	r3, #4294967295
   82b3a:	e013      	b.n	82b64 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   82b3c:	4b0b      	ldr	r3, [pc, #44]	; (82b6c <_read+0x4c>)
   82b3e:	681b      	ldr	r3, [r3, #0]
   82b40:	4a0b      	ldr	r2, [pc, #44]	; (82b70 <_read+0x50>)
   82b42:	6812      	ldr	r2, [r2, #0]
   82b44:	68b9      	ldr	r1, [r7, #8]
   82b46:	4610      	mov	r0, r2
   82b48:	4798      	blx	r3
		ptr++;
   82b4a:	68bb      	ldr	r3, [r7, #8]
   82b4c:	3301      	adds	r3, #1
   82b4e:	60bb      	str	r3, [r7, #8]
		nChars++;
   82b50:	697b      	ldr	r3, [r7, #20]
   82b52:	3301      	adds	r3, #1
   82b54:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   82b56:	687b      	ldr	r3, [r7, #4]
   82b58:	3b01      	subs	r3, #1
   82b5a:	607b      	str	r3, [r7, #4]
   82b5c:	687b      	ldr	r3, [r7, #4]
   82b5e:	2b00      	cmp	r3, #0
   82b60:	dcec      	bgt.n	82b3c <_read+0x1c>
	}
	return nChars;
   82b62:	697b      	ldr	r3, [r7, #20]
}
   82b64:	4618      	mov	r0, r3
   82b66:	3718      	adds	r7, #24
   82b68:	46bd      	mov	sp, r7
   82b6a:	bd80      	pop	{r7, pc}
   82b6c:	2000181c 	.word	0x2000181c
   82b70:	20001844 	.word	0x20001844

00082b74 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   82b74:	b5b0      	push	{r4, r5, r7, lr}
   82b76:	b09c      	sub	sp, #112	; 0x70
   82b78:	af00      	add	r7, sp, #0
   82b7a:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   82b7c:	687b      	ldr	r3, [r7, #4]
   82b7e:	2b05      	cmp	r3, #5
   82b80:	f000 81e8 	beq.w	82f54 <pmc_sleep+0x3e0>
   82b84:	687b      	ldr	r3, [r7, #4]
   82b86:	2b05      	cmp	r3, #5
   82b88:	f300 81f5 	bgt.w	82f76 <pmc_sleep+0x402>
   82b8c:	687b      	ldr	r3, [r7, #4]
   82b8e:	2b02      	cmp	r3, #2
   82b90:	dc03      	bgt.n	82b9a <pmc_sleep+0x26>
   82b92:	687b      	ldr	r3, [r7, #4]
   82b94:	2b00      	cmp	r3, #0
   82b96:	dc06      	bgt.n	82ba6 <pmc_sleep+0x32>
		__WFE() ;
#endif
		break;
#endif
	}
}
   82b98:	e1ed      	b.n	82f76 <pmc_sleep+0x402>
   82b9a:	687b      	ldr	r3, [r7, #4]
   82b9c:	3b03      	subs	r3, #3
	switch (sleep_mode) {
   82b9e:	2b01      	cmp	r3, #1
   82ba0:	f200 81e9 	bhi.w	82f76 <pmc_sleep+0x402>
   82ba4:	e01b      	b.n	82bde <pmc_sleep+0x6a>
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   82ba6:	4b88      	ldr	r3, [pc, #544]	; (82dc8 <pmc_sleep+0x254>)
   82ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82baa:	4a87      	ldr	r2, [pc, #540]	; (82dc8 <pmc_sleep+0x254>)
   82bac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   82bb0:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   82bb2:	4b86      	ldr	r3, [pc, #536]	; (82dcc <pmc_sleep+0x258>)
   82bb4:	691b      	ldr	r3, [r3, #16]
   82bb6:	4a85      	ldr	r2, [pc, #532]	; (82dcc <pmc_sleep+0x258>)
   82bb8:	f023 0304 	bic.w	r3, r3, #4
   82bbc:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   82bbe:	4b84      	ldr	r3, [pc, #528]	; (82dd0 <pmc_sleep+0x25c>)
   82bc0:	2201      	movs	r2, #1
   82bc2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82bc4:	f3bf 8f5f 	dmb	sy
}
   82bc8:	bf00      	nop
  __ASM volatile ("cpsie i");
   82bca:	b662      	cpsie	i
}
   82bcc:	bf00      	nop
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   82bce:	687b      	ldr	r3, [r7, #4]
   82bd0:	2b02      	cmp	r3, #2
   82bd2:	d101      	bne.n	82bd8 <pmc_sleep+0x64>
  __ASM volatile ("wfi");
   82bd4:	bf30      	wfi
}
   82bd6:	e001      	b.n	82bdc <pmc_sleep+0x68>
  __ASM volatile ("wfe");
   82bd8:	bf20      	wfe
}
   82bda:	bf00      	nop
		break;
   82bdc:	e1cb      	b.n	82f76 <pmc_sleep+0x402>
  __ASM volatile ("cpsid i");
   82bde:	b672      	cpsid	i
}
   82be0:	bf00      	nop
  __ASM volatile ("dmb");
   82be2:	f3bf 8f5f 	dmb	sy
}
   82be6:	bf00      	nop
		cpu_irq_disable();
   82be8:	4b79      	ldr	r3, [pc, #484]	; (82dd0 <pmc_sleep+0x25c>)
   82bea:	2200      	movs	r2, #0
   82bec:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   82bee:	4b79      	ldr	r3, [pc, #484]	; (82dd4 <pmc_sleep+0x260>)
   82bf0:	2201      	movs	r2, #1
   82bf2:	701a      	strb	r2, [r3, #0]
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   82bf4:	687b      	ldr	r3, [r7, #4]
   82bf6:	2b04      	cmp	r3, #4
   82bf8:	bf0c      	ite	eq
   82bfa:	2301      	moveq	r3, #1
   82bfc:	2300      	movne	r3, #0
   82bfe:	b2da      	uxtb	r2, r3
   82c00:	f107 0320 	add.w	r3, r7, #32
   82c04:	64fb      	str	r3, [r7, #76]	; 0x4c
   82c06:	f107 031c 	add.w	r3, r7, #28
   82c0a:	64bb      	str	r3, [r7, #72]	; 0x48
   82c0c:	f107 0318 	add.w	r3, r7, #24
   82c10:	647b      	str	r3, [r7, #68]	; 0x44
   82c12:	f107 0314 	add.w	r3, r7, #20
   82c16:	643b      	str	r3, [r7, #64]	; 0x40
   82c18:	f107 0310 	add.w	r3, r7, #16
   82c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   82c1e:	f107 030c 	add.w	r3, r7, #12
   82c22:	63bb      	str	r3, [r7, #56]	; 0x38
   82c24:	4613      	mov	r3, r2
   82c26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   82c2a:	4b67      	ldr	r3, [pc, #412]	; (82dc8 <pmc_sleep+0x254>)
   82c2c:	6a1b      	ldr	r3, [r3, #32]
   82c2e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   82c30:	4b65      	ldr	r3, [pc, #404]	; (82dc8 <pmc_sleep+0x254>)
   82c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82c34:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   82c36:	4b68      	ldr	r3, [pc, #416]	; (82dd8 <pmc_sleep+0x264>)
   82c38:	681b      	ldr	r3, [r3, #0]
   82c3a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   82c3c:	4b67      	ldr	r3, [pc, #412]	; (82ddc <pmc_sleep+0x268>)
   82c3e:	681b      	ldr	r3, [r3, #0]
   82c40:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   82c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   82c44:	2b00      	cmp	r3, #0
   82c46:	d002      	beq.n	82c4e <pmc_sleep+0xda>
		*p_osc_setting = mor;
   82c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   82c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   82c4c:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   82c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   82c50:	2b00      	cmp	r3, #0
   82c52:	d003      	beq.n	82c5c <pmc_sleep+0xe8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   82c54:	4b5c      	ldr	r3, [pc, #368]	; (82dc8 <pmc_sleep+0x254>)
   82c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   82c5a:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   82c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   82c5e:	2b00      	cmp	r3, #0
   82c60:	d003      	beq.n	82c6a <pmc_sleep+0xf6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   82c62:	4b59      	ldr	r3, [pc, #356]	; (82dc8 <pmc_sleep+0x254>)
   82c64:	69da      	ldr	r2, [r3, #28]
   82c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   82c68:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   82c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82c6c:	2b00      	cmp	r3, #0
   82c6e:	d002      	beq.n	82c76 <pmc_sleep+0x102>
		*p_mck_setting  = mckr;
   82c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   82c74:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   82c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82c78:	2b00      	cmp	r3, #0
   82c7a:	d002      	beq.n	82c82 <pmc_sleep+0x10e>
		*p_fmr_setting  = fmr;
   82c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   82c80:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   82c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82c84:	2b00      	cmp	r3, #0
   82c86:	d002      	beq.n	82c8e <pmc_sleep+0x11a>
		*p_fmr_setting1 = fmr1;
   82c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   82c8c:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   82c8e:	4a4e      	ldr	r2, [pc, #312]	; (82dc8 <pmc_sleep+0x254>)
   82c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82c92:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82c96:	f043 0308 	orr.w	r3, r3, #8
   82c9a:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   82c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82c9e:	f003 0302 	and.w	r3, r3, #2
   82ca2:	2b00      	cmp	r3, #0
   82ca4:	d00f      	beq.n	82cc6 <pmc_sleep+0x152>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   82ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82ca8:	f023 0303 	bic.w	r3, r3, #3
   82cac:	f043 0301 	orr.w	r3, r3, #1
   82cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   82cb2:	4a45      	ldr	r2, [pc, #276]	; (82dc8 <pmc_sleep+0x254>)
   82cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82cb6:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82cb8:	bf00      	nop
   82cba:	4b43      	ldr	r3, [pc, #268]	; (82dc8 <pmc_sleep+0x254>)
   82cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82cbe:	f003 0308 	and.w	r3, r3, #8
   82cc2:	2b00      	cmp	r3, #0
   82cc4:	d0f9      	beq.n	82cba <pmc_sleep+0x146>
	if (mckr & PMC_MCKR_PRES_Msk) {
   82cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82ccc:	2b00      	cmp	r3, #0
   82cce:	d00d      	beq.n	82cec <pmc_sleep+0x178>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   82cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   82cd8:	4a3b      	ldr	r2, [pc, #236]	; (82dc8 <pmc_sleep+0x254>)
   82cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82cdc:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82cde:	bf00      	nop
   82ce0:	4b39      	ldr	r3, [pc, #228]	; (82dc8 <pmc_sleep+0x254>)
   82ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82ce4:	f003 0308 	and.w	r3, r3, #8
   82ce8:	2b00      	cmp	r3, #0
   82cea:	d0f9      	beq.n	82ce0 <pmc_sleep+0x16c>
	pmc_disable_pllack();
   82cec:	4b3c      	ldr	r3, [pc, #240]	; (82de0 <pmc_sleep+0x26c>)
   82cee:	4798      	blx	r3
	pmc_disable_upll_clock();
   82cf0:	4b3c      	ldr	r3, [pc, #240]	; (82de4 <pmc_sleep+0x270>)
   82cf2:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82cf4:	bf00      	nop
   82cf6:	4b34      	ldr	r3, [pc, #208]	; (82dc8 <pmc_sleep+0x254>)
   82cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82cfe:	2b00      	cmp	r3, #0
   82d00:	d0f9      	beq.n	82cf6 <pmc_sleep+0x182>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   82d02:	4b31      	ldr	r3, [pc, #196]	; (82dc8 <pmc_sleep+0x254>)
   82d04:	6a1b      	ldr	r3, [r3, #32]
   82d06:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   82d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82d0e:	4a2e      	ldr	r2, [pc, #184]	; (82dc8 <pmc_sleep+0x254>)
   82d10:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82d14:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   82d16:	bf00      	nop
   82d18:	4b2b      	ldr	r3, [pc, #172]	; (82dc8 <pmc_sleep+0x254>)
   82d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82d20:	2b00      	cmp	r3, #0
   82d22:	d0f9      	beq.n	82d18 <pmc_sleep+0x1a4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   82d24:	4a2c      	ldr	r2, [pc, #176]	; (82dd8 <pmc_sleep+0x264>)
   82d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   82d28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   82d2c:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   82d2e:	4a2b      	ldr	r2, [pc, #172]	; (82ddc <pmc_sleep+0x268>)
   82d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82d32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   82d36:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   82d38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   82d3c:	2b00      	cmp	r3, #0
   82d3e:	d009      	beq.n	82d54 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82d40:	4b21      	ldr	r3, [pc, #132]	; (82dc8 <pmc_sleep+0x254>)
   82d42:	6a1b      	ldr	r3, [r3, #32]
   82d44:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82d48:	f023 0301 	bic.w	r3, r3, #1
   82d4c:	4a1e      	ldr	r2, [pc, #120]	; (82dc8 <pmc_sleep+0x254>)
   82d4e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82d52:	6213      	str	r3, [r2, #32]
}
   82d54:	bf00      	nop
		cpu_irq_enable();
   82d56:	4b1e      	ldr	r3, [pc, #120]	; (82dd0 <pmc_sleep+0x25c>)
   82d58:	2201      	movs	r2, #1
   82d5a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82d5c:	f3bf 8f5f 	dmb	sy
}
   82d60:	bf00      	nop
  __ASM volatile ("cpsie i");
   82d62:	b662      	cpsie	i
}
   82d64:	bf00      	nop
		pmc_enable_waitmode();
   82d66:	4b20      	ldr	r3, [pc, #128]	; (82de8 <pmc_sleep+0x274>)
   82d68:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   82d6a:	b672      	cpsid	i
}
   82d6c:	bf00      	nop
  __ASM volatile ("dmb");
   82d6e:	f3bf 8f5f 	dmb	sy
}
   82d72:	bf00      	nop
		cpu_irq_disable();
   82d74:	4b16      	ldr	r3, [pc, #88]	; (82dd0 <pmc_sleep+0x25c>)
   82d76:	2200      	movs	r2, #0
   82d78:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   82d7a:	6a3d      	ldr	r5, [r7, #32]
   82d7c:	69fc      	ldr	r4, [r7, #28]
   82d7e:	69b8      	ldr	r0, [r7, #24]
   82d80:	6979      	ldr	r1, [r7, #20]
   82d82:	693a      	ldr	r2, [r7, #16]
   82d84:	68fb      	ldr	r3, [r7, #12]
   82d86:	66fd      	str	r5, [r7, #108]	; 0x6c
   82d88:	66bc      	str	r4, [r7, #104]	; 0x68
   82d8a:	6678      	str	r0, [r7, #100]	; 0x64
   82d8c:	6639      	str	r1, [r7, #96]	; 0x60
   82d8e:	65fa      	str	r2, [r7, #92]	; 0x5c
   82d90:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   82d92:	2300      	movs	r3, #0
   82d94:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   82d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   82d98:	f003 0302 	and.w	r3, r3, #2
   82d9c:	2b00      	cmp	r3, #0
   82d9e:	d029      	beq.n	82df4 <pmc_sleep+0x280>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82da0:	4b09      	ldr	r3, [pc, #36]	; (82dc8 <pmc_sleep+0x254>)
   82da2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82da4:	4a11      	ldr	r2, [pc, #68]	; (82dec <pmc_sleep+0x278>)
   82da6:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82da8:	4907      	ldr	r1, [pc, #28]	; (82dc8 <pmc_sleep+0x254>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82daa:	4b11      	ldr	r3, [pc, #68]	; (82df0 <pmc_sleep+0x27c>)
   82dac:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82dae:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82db0:	4b05      	ldr	r3, [pc, #20]	; (82dc8 <pmc_sleep+0x254>)
   82db2:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   82db4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82db8:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82dbc:	4a02      	ldr	r2, [pc, #8]	; (82dc8 <pmc_sleep+0x254>)
				| CKGR_MOR_KEY_PASSWD;
   82dbe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82dc2:	6213      	str	r3, [r2, #32]
   82dc4:	e053      	b.n	82e6e <pmc_sleep+0x2fa>
   82dc6:	bf00      	nop
   82dc8:	400e0400 	.word	0x400e0400
   82dcc:	e000ed00 	.word	0xe000ed00
   82dd0:	20000284 	.word	0x20000284
   82dd4:	20001328 	.word	0x20001328
   82dd8:	400e0800 	.word	0x400e0800
   82ddc:	400e0a00 	.word	0x400e0a00
   82de0:	00082979 	.word	0x00082979
   82de4:	000829a9 	.word	0x000829a9
   82de8:	00082ac5 	.word	0x00082ac5
   82dec:	fec8fffc 	.word	0xfec8fffc
   82df0:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   82df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   82df6:	f003 0301 	and.w	r3, r3, #1
   82dfa:	2b00      	cmp	r3, #0
   82dfc:	d037      	beq.n	82e6e <pmc_sleep+0x2fa>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   82dfe:	4b60      	ldr	r3, [pc, #384]	; (82f80 <pmc_sleep+0x40c>)
   82e00:	6a1b      	ldr	r3, [r3, #32]
   82e02:	f003 0301 	and.w	r3, r3, #1
   82e06:	2b00      	cmp	r3, #0
   82e08:	d112      	bne.n	82e30 <pmc_sleep+0x2bc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82e0a:	4b5d      	ldr	r3, [pc, #372]	; (82f80 <pmc_sleep+0x40c>)
   82e0c:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   82e0e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82e12:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82e16:	4a5a      	ldr	r2, [pc, #360]	; (82f80 <pmc_sleep+0x40c>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   82e18:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82e1c:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82e20:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82e22:	bf00      	nop
   82e24:	4b56      	ldr	r3, [pc, #344]	; (82f80 <pmc_sleep+0x40c>)
   82e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82e28:	f003 0301 	and.w	r3, r3, #1
   82e2c:	2b00      	cmp	r3, #0
   82e2e:	d0f9      	beq.n	82e24 <pmc_sleep+0x2b0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   82e30:	4b53      	ldr	r3, [pc, #332]	; (82f80 <pmc_sleep+0x40c>)
   82e32:	6a1b      	ldr	r3, [r3, #32]
   82e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82e38:	2b00      	cmp	r3, #0
   82e3a:	d10e      	bne.n	82e5a <pmc_sleep+0x2e6>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82e3c:	4b50      	ldr	r3, [pc, #320]	; (82f80 <pmc_sleep+0x40c>)
   82e3e:	6a1b      	ldr	r3, [r3, #32]
   82e40:	4a4f      	ldr	r2, [pc, #316]	; (82f80 <pmc_sleep+0x40c>)
   82e42:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82e4a:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   82e4c:	bf00      	nop
   82e4e:	4b4c      	ldr	r3, [pc, #304]	; (82f80 <pmc_sleep+0x40c>)
   82e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82e56:	2b00      	cmp	r3, #0
   82e58:	d0f9      	beq.n	82e4e <pmc_sleep+0x2da>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82e5a:	4b49      	ldr	r3, [pc, #292]	; (82f80 <pmc_sleep+0x40c>)
   82e5c:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   82e5e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82e62:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82e66:	4a46      	ldr	r2, [pc, #280]	; (82f80 <pmc_sleep+0x40c>)
					| CKGR_MOR_KEY_PASSWD;
   82e68:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82e6c:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   82e6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   82e70:	4b44      	ldr	r3, [pc, #272]	; (82f84 <pmc_sleep+0x410>)
   82e72:	4013      	ands	r3, r2
   82e74:	2b00      	cmp	r3, #0
   82e76:	d008      	beq.n	82e8a <pmc_sleep+0x316>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   82e78:	4a41      	ldr	r2, [pc, #260]	; (82f80 <pmc_sleep+0x40c>)
   82e7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   82e7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82e80:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   82e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   82e84:	f043 0302 	orr.w	r3, r3, #2
   82e88:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   82e8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   82e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82e90:	2b00      	cmp	r3, #0
   82e92:	d006      	beq.n	82ea2 <pmc_sleep+0x32e>
		PMC->CKGR_UCKR = pll1_setting;
   82e94:	4a3a      	ldr	r2, [pc, #232]	; (82f80 <pmc_sleep+0x40c>)
   82e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   82e98:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   82e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   82e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82ea0:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   82ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82ea4:	f003 0303 	and.w	r3, r3, #3
   82ea8:	2b02      	cmp	r3, #2
   82eaa:	d002      	beq.n	82eb2 <pmc_sleep+0x33e>
   82eac:	2b03      	cmp	r3, #3
   82eae:	d008      	beq.n	82ec2 <pmc_sleep+0x34e>
   82eb0:	e00f      	b.n	82ed2 <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   82eb2:	bf00      	nop
   82eb4:	4b32      	ldr	r3, [pc, #200]	; (82f80 <pmc_sleep+0x40c>)
   82eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82eb8:	f003 0302 	and.w	r3, r3, #2
   82ebc:	2b00      	cmp	r3, #0
   82ebe:	d0f9      	beq.n	82eb4 <pmc_sleep+0x340>
		break;
   82ec0:	e007      	b.n	82ed2 <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   82ec2:	bf00      	nop
   82ec4:	4b2e      	ldr	r3, [pc, #184]	; (82f80 <pmc_sleep+0x40c>)
   82ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82ecc:	2b00      	cmp	r3, #0
   82ece:	d0f9      	beq.n	82ec4 <pmc_sleep+0x350>
		break;
   82ed0:	bf00      	nop
	mckr = PMC->PMC_MCKR;
   82ed2:	4b2b      	ldr	r3, [pc, #172]	; (82f80 <pmc_sleep+0x40c>)
   82ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ed6:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   82ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   82eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   82ede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82ee0:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   82ee4:	4926      	ldr	r1, [pc, #152]	; (82f80 <pmc_sleep+0x40c>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   82ee6:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   82ee8:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82eea:	bf00      	nop
   82eec:	4b24      	ldr	r3, [pc, #144]	; (82f80 <pmc_sleep+0x40c>)
   82eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82ef0:	f003 0308 	and.w	r3, r3, #8
   82ef4:	2b00      	cmp	r3, #0
   82ef6:	d0f9      	beq.n	82eec <pmc_sleep+0x378>
	EFC0->EEFC_FMR = fmr_setting;
   82ef8:	4a23      	ldr	r2, [pc, #140]	; (82f88 <pmc_sleep+0x414>)
   82efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   82efc:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   82efe:	4a23      	ldr	r2, [pc, #140]	; (82f8c <pmc_sleep+0x418>)
   82f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   82f02:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   82f04:	4a1e      	ldr	r2, [pc, #120]	; (82f80 <pmc_sleep+0x40c>)
   82f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82f08:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82f0a:	bf00      	nop
   82f0c:	4b1c      	ldr	r3, [pc, #112]	; (82f80 <pmc_sleep+0x40c>)
   82f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82f10:	f003 0308 	and.w	r3, r3, #8
   82f14:	2b00      	cmp	r3, #0
   82f16:	d0f9      	beq.n	82f0c <pmc_sleep+0x398>
	while (!(PMC->PMC_SR & pll_sr));
   82f18:	bf00      	nop
   82f1a:	4b19      	ldr	r3, [pc, #100]	; (82f80 <pmc_sleep+0x40c>)
   82f1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   82f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   82f20:	4013      	ands	r3, r2
   82f22:	2b00      	cmp	r3, #0
   82f24:	d0f9      	beq.n	82f1a <pmc_sleep+0x3a6>
}
   82f26:	bf00      	nop
		b_is_sleep_clock_used = false;
   82f28:	4b19      	ldr	r3, [pc, #100]	; (82f90 <pmc_sleep+0x41c>)
   82f2a:	2200      	movs	r2, #0
   82f2c:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   82f2e:	4b19      	ldr	r3, [pc, #100]	; (82f94 <pmc_sleep+0x420>)
   82f30:	681b      	ldr	r3, [r3, #0]
   82f32:	2b00      	cmp	r3, #0
   82f34:	d005      	beq.n	82f42 <pmc_sleep+0x3ce>
			callback_clocks_restored();
   82f36:	4b17      	ldr	r3, [pc, #92]	; (82f94 <pmc_sleep+0x420>)
   82f38:	681b      	ldr	r3, [r3, #0]
   82f3a:	4798      	blx	r3
			callback_clocks_restored = NULL;
   82f3c:	4b15      	ldr	r3, [pc, #84]	; (82f94 <pmc_sleep+0x420>)
   82f3e:	2200      	movs	r2, #0
   82f40:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
   82f42:	4b15      	ldr	r3, [pc, #84]	; (82f98 <pmc_sleep+0x424>)
   82f44:	2201      	movs	r2, #1
   82f46:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82f48:	f3bf 8f5f 	dmb	sy
}
   82f4c:	bf00      	nop
  __ASM volatile ("cpsie i");
   82f4e:	b662      	cpsie	i
}
   82f50:	bf00      	nop
		break;
   82f52:	e010      	b.n	82f76 <pmc_sleep+0x402>
		SCB->SCR |= SCR_SLEEPDEEP;
   82f54:	4b11      	ldr	r3, [pc, #68]	; (82f9c <pmc_sleep+0x428>)
   82f56:	691b      	ldr	r3, [r3, #16]
   82f58:	4a10      	ldr	r2, [pc, #64]	; (82f9c <pmc_sleep+0x428>)
   82f5a:	f043 0304 	orr.w	r3, r3, #4
   82f5e:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   82f60:	4b0d      	ldr	r3, [pc, #52]	; (82f98 <pmc_sleep+0x424>)
   82f62:	2201      	movs	r2, #1
   82f64:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82f66:	f3bf 8f5f 	dmb	sy
}
   82f6a:	bf00      	nop
  __ASM volatile ("cpsie i");
   82f6c:	b662      	cpsie	i
}
   82f6e:	bf00      	nop
  __ASM volatile ("wfe");
   82f70:	bf20      	wfe
}
   82f72:	bf00      	nop
		break;
   82f74:	bf00      	nop
}
   82f76:	bf00      	nop
   82f78:	3770      	adds	r7, #112	; 0x70
   82f7a:	46bd      	mov	sp, r7
   82f7c:	bdb0      	pop	{r4, r5, r7, pc}
   82f7e:	bf00      	nop
   82f80:	400e0400 	.word	0x400e0400
   82f84:	07ff0000 	.word	0x07ff0000
   82f88:	400e0800 	.word	0x400e0800
   82f8c:	400e0a00 	.word	0x400e0a00
   82f90:	20001328 	.word	0x20001328
   82f94:	2000132c 	.word	0x2000132c
   82f98:	20000284 	.word	0x20000284
   82f9c:	e000ed00 	.word	0xe000ed00

00082fa0 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   82fa0:	b480      	push	{r7}
   82fa2:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   82fa4:	4b08      	ldr	r3, [pc, #32]	; (82fc8 <pmc_is_wakeup_clocks_restored+0x28>)
   82fa6:	781b      	ldrb	r3, [r3, #0]
   82fa8:	b2db      	uxtb	r3, r3
   82faa:	2b00      	cmp	r3, #0
   82fac:	bf14      	ite	ne
   82fae:	2301      	movne	r3, #1
   82fb0:	2300      	moveq	r3, #0
   82fb2:	b2db      	uxtb	r3, r3
   82fb4:	f083 0301 	eor.w	r3, r3, #1
   82fb8:	b2db      	uxtb	r3, r3
   82fba:	f003 0301 	and.w	r3, r3, #1
   82fbe:	b2db      	uxtb	r3, r3
}
   82fc0:	4618      	mov	r0, r3
   82fc2:	46bd      	mov	sp, r7
   82fc4:	bc80      	pop	{r7}
   82fc6:	4770      	bx	lr
   82fc8:	20001328 	.word	0x20001328

00082fcc <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   82fcc:	b480      	push	{r7}
   82fce:	b085      	sub	sp, #20
   82fd0:	af00      	add	r7, sp, #0
   82fd2:	60f8      	str	r0, [r7, #12]
   82fd4:	60b9      	str	r1, [r7, #8]
   82fd6:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   82fd8:	68f9      	ldr	r1, [r7, #12]
   82fda:	68ba      	ldr	r2, [r7, #8]
   82fdc:	4613      	mov	r3, r2
   82fde:	009b      	lsls	r3, r3, #2
   82fe0:	4413      	add	r3, r2
   82fe2:	009b      	lsls	r3, r3, #2
   82fe4:	440b      	add	r3, r1
   82fe6:	3370      	adds	r3, #112	; 0x70
   82fe8:	687a      	ldr	r2, [r7, #4]
   82fea:	601a      	str	r2, [r3, #0]
}
   82fec:	bf00      	nop
   82fee:	3714      	adds	r7, #20
   82ff0:	46bd      	mov	sp, r7
   82ff2:	bc80      	pop	{r7}
   82ff4:	4770      	bx	lr

00082ff6 <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   82ff6:	b480      	push	{r7}
   82ff8:	b085      	sub	sp, #20
   82ffa:	af00      	add	r7, sp, #0
   82ffc:	60f8      	str	r0, [r7, #12]
   82ffe:	60b9      	str	r1, [r7, #8]
   83000:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   83002:	68f9      	ldr	r1, [r7, #12]
   83004:	68ba      	ldr	r2, [r7, #8]
   83006:	4613      	mov	r3, r2
   83008:	009b      	lsls	r3, r3, #2
   8300a:	4413      	add	r3, r2
   8300c:	009b      	lsls	r3, r3, #2
   8300e:	440b      	add	r3, r1
   83010:	3374      	adds	r3, #116	; 0x74
   83012:	687a      	ldr	r2, [r7, #4]
   83014:	601a      	str	r2, [r3, #0]
}
   83016:	bf00      	nop
   83018:	3714      	adds	r7, #20
   8301a:	46bd      	mov	sp, r7
   8301c:	bc80      	pop	{r7}
   8301e:	4770      	bx	lr

00083020 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   83020:	b480      	push	{r7}
   83022:	b085      	sub	sp, #20
   83024:	af00      	add	r7, sp, #0
   83026:	60f8      	str	r0, [r7, #12]
   83028:	60b9      	str	r1, [r7, #8]
   8302a:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   8302c:	68f9      	ldr	r1, [r7, #12]
   8302e:	68ba      	ldr	r2, [r7, #8]
   83030:	4613      	mov	r3, r2
   83032:	009b      	lsls	r3, r3, #2
   83034:	4413      	add	r3, r2
   83036:	009b      	lsls	r3, r3, #2
   83038:	440b      	add	r3, r1
   8303a:	3378      	adds	r3, #120	; 0x78
   8303c:	687a      	ldr	r2, [r7, #4]
   8303e:	601a      	str	r2, [r3, #0]
}
   83040:	bf00      	nop
   83042:	3714      	adds	r7, #20
   83044:	46bd      	mov	sp, r7
   83046:	bc80      	pop	{r7}
   83048:	4770      	bx	lr

0008304a <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   8304a:	b480      	push	{r7}
   8304c:	b085      	sub	sp, #20
   8304e:	af00      	add	r7, sp, #0
   83050:	60f8      	str	r0, [r7, #12]
   83052:	60b9      	str	r1, [r7, #8]
   83054:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   83056:	68f9      	ldr	r1, [r7, #12]
   83058:	68ba      	ldr	r2, [r7, #8]
   8305a:	4613      	mov	r3, r2
   8305c:	009b      	lsls	r3, r3, #2
   8305e:	4413      	add	r3, r2
   83060:	009b      	lsls	r3, r3, #2
   83062:	440b      	add	r3, r1
   83064:	3380      	adds	r3, #128	; 0x80
   83066:	687a      	ldr	r2, [r7, #4]
   83068:	601a      	str	r2, [r3, #0]
}
   8306a:	bf00      	nop
   8306c:	3714      	adds	r7, #20
   8306e:	46bd      	mov	sp, r7
   83070:	bc80      	pop	{r7}
   83072:	4770      	bx	lr

00083074 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83074:	b580      	push	{r7, lr}
   83076:	b082      	sub	sp, #8
   83078:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   8307a:	4b1e      	ldr	r3, [pc, #120]	; (830f4 <Reset_Handler+0x80>)
   8307c:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   8307e:	4b1e      	ldr	r3, [pc, #120]	; (830f8 <Reset_Handler+0x84>)
   83080:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83082:	687a      	ldr	r2, [r7, #4]
   83084:	683b      	ldr	r3, [r7, #0]
   83086:	429a      	cmp	r2, r3
   83088:	d00c      	beq.n	830a4 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   8308a:	e007      	b.n	8309c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   8308c:	687a      	ldr	r2, [r7, #4]
   8308e:	1d13      	adds	r3, r2, #4
   83090:	607b      	str	r3, [r7, #4]
   83092:	683b      	ldr	r3, [r7, #0]
   83094:	1d19      	adds	r1, r3, #4
   83096:	6039      	str	r1, [r7, #0]
   83098:	6812      	ldr	r2, [r2, #0]
   8309a:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   8309c:	683b      	ldr	r3, [r7, #0]
   8309e:	4a17      	ldr	r2, [pc, #92]	; (830fc <Reset_Handler+0x88>)
   830a0:	4293      	cmp	r3, r2
   830a2:	d3f3      	bcc.n	8308c <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   830a4:	4b16      	ldr	r3, [pc, #88]	; (83100 <Reset_Handler+0x8c>)
   830a6:	603b      	str	r3, [r7, #0]
   830a8:	e004      	b.n	830b4 <Reset_Handler+0x40>
		*pDest++ = 0;
   830aa:	683b      	ldr	r3, [r7, #0]
   830ac:	1d1a      	adds	r2, r3, #4
   830ae:	603a      	str	r2, [r7, #0]
   830b0:	2200      	movs	r2, #0
   830b2:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   830b4:	683b      	ldr	r3, [r7, #0]
   830b6:	4a13      	ldr	r2, [pc, #76]	; (83104 <Reset_Handler+0x90>)
   830b8:	4293      	cmp	r3, r2
   830ba:	d3f6      	bcc.n	830aa <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   830bc:	4b12      	ldr	r3, [pc, #72]	; (83108 <Reset_Handler+0x94>)
   830be:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   830c0:	687b      	ldr	r3, [r7, #4]
   830c2:	4a12      	ldr	r2, [pc, #72]	; (8310c <Reset_Handler+0x98>)
   830c4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   830c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   830cc:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   830ce:	687b      	ldr	r3, [r7, #4]
   830d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   830d4:	d309      	bcc.n	830ea <Reset_Handler+0x76>
   830d6:	687b      	ldr	r3, [r7, #4]
   830d8:	4a0d      	ldr	r2, [pc, #52]	; (83110 <Reset_Handler+0x9c>)
   830da:	4293      	cmp	r3, r2
   830dc:	d205      	bcs.n	830ea <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   830de:	4b0b      	ldr	r3, [pc, #44]	; (8310c <Reset_Handler+0x98>)
   830e0:	689b      	ldr	r3, [r3, #8]
   830e2:	4a0a      	ldr	r2, [pc, #40]	; (8310c <Reset_Handler+0x98>)
   830e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   830e8:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   830ea:	4b0a      	ldr	r3, [pc, #40]	; (83114 <Reset_Handler+0xa0>)
   830ec:	4798      	blx	r3

	/* Branch to main function */
	main();
   830ee:	4b0a      	ldr	r3, [pc, #40]	; (83118 <Reset_Handler+0xa4>)
   830f0:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   830f2:	e7fe      	b.n	830f2 <Reset_Handler+0x7e>
   830f4:	0008d904 	.word	0x0008d904
   830f8:	20000000 	.word	0x20000000
   830fc:	20000df0 	.word	0x20000df0
   83100:	20000df0 	.word	0x20000df0
   83104:	20001870 	.word	0x20001870
   83108:	00080000 	.word	0x00080000
   8310c:	e000ed00 	.word	0xe000ed00
   83110:	20004000 	.word	0x20004000
   83114:	00086a75 	.word	0x00086a75
   83118:	00080a4d 	.word	0x00080a4d

0008311c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);
=======
   82c48:	b480      	push	{r7}
   82c4a:	b085      	sub	sp, #20
   82c4c:	af00      	add	r7, sp, #0
   82c4e:	4603      	mov	r3, r0
   82c50:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82c52:	79fb      	ldrb	r3, [r7, #7]
   82c54:	f003 030f 	and.w	r3, r3, #15
   82c58:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   82c5a:	7bfb      	ldrb	r3, [r7, #15]
   82c5c:	1e5a      	subs	r2, r3, #1
   82c5e:	4613      	mov	r3, r2
   82c60:	005b      	lsls	r3, r3, #1
   82c62:	4413      	add	r3, r2
   82c64:	00db      	lsls	r3, r3, #3
   82c66:	4a10      	ldr	r2, [pc, #64]	; (82ca8 <udd_ep_is_halted+0x60>)
   82c68:	4413      	add	r3, r2
   82c6a:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   82c6c:	4a0f      	ldr	r2, [pc, #60]	; (82cac <udd_ep_is_halted+0x64>)
   82c6e:	7bfb      	ldrb	r3, [r7, #15]
   82c70:	015b      	lsls	r3, r3, #5
   82c72:	4413      	add	r3, r2
   82c74:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82c78:	681b      	ldr	r3, [r3, #0]
   82c7a:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   82c7e:	2b00      	cmp	r3, #0
   82c80:	d106      	bne.n	82c90 <udd_ep_is_halted+0x48>
   82c82:	68bb      	ldr	r3, [r7, #8]
   82c84:	7d1b      	ldrb	r3, [r3, #20]
   82c86:	f003 0304 	and.w	r3, r3, #4
   82c8a:	b2db      	uxtb	r3, r3
   82c8c:	2b00      	cmp	r3, #0
   82c8e:	d001      	beq.n	82c94 <udd_ep_is_halted+0x4c>
   82c90:	2301      	movs	r3, #1
   82c92:	e000      	b.n	82c96 <udd_ep_is_halted+0x4e>
   82c94:	2300      	movs	r3, #0
   82c96:	f003 0301 	and.w	r3, r3, #1
   82c9a:	b2db      	uxtb	r3, r3
}
   82c9c:	4618      	mov	r0, r3
   82c9e:	3714      	adds	r7, #20
   82ca0:	46bd      	mov	sp, r7
   82ca2:	bc80      	pop	{r7}
   82ca4:	4770      	bx	lr
   82ca6:	bf00      	nop
   82ca8:	20001328 	.word	0x20001328
   82cac:	400a4000 	.word	0x400a4000

00082cb0 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   82cb0:	b480      	push	{r7}
   82cb2:	b085      	sub	sp, #20
   82cb4:	af00      	add	r7, sp, #0
   82cb6:	4603      	mov	r3, r0
   82cb8:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82cba:	79fb      	ldrb	r3, [r7, #7]
   82cbc:	f003 030f 	and.w	r3, r3, #15
   82cc0:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   82cc2:	7bfb      	ldrb	r3, [r7, #15]
   82cc4:	2b02      	cmp	r3, #2
   82cc6:	d901      	bls.n	82ccc <udd_ep_set_halt+0x1c>
		return false;
   82cc8:	2300      	movs	r3, #0
   82cca:	e071      	b.n	82db0 <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   82ccc:	7bfb      	ldrb	r3, [r7, #15]
   82cce:	1e5a      	subs	r2, r3, #1
   82cd0:	4613      	mov	r3, r2
   82cd2:	005b      	lsls	r3, r3, #1
   82cd4:	4413      	add	r3, r2
   82cd6:	00db      	lsls	r3, r3, #3
   82cd8:	4a38      	ldr	r2, [pc, #224]	; (82dbc <udd_ep_set_halt+0x10c>)
   82cda:	4413      	add	r3, r2
   82cdc:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   82cde:	4a38      	ldr	r2, [pc, #224]	; (82dc0 <udd_ep_set_halt+0x110>)
   82ce0:	7bfb      	ldrb	r3, [r7, #15]
   82ce2:	015b      	lsls	r3, r3, #5
   82ce4:	4413      	add	r3, r2
   82ce6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82cea:	681b      	ldr	r3, [r3, #0]
   82cec:	f003 0320 	and.w	r3, r3, #32
   82cf0:	2b00      	cmp	r3, #0
   82cf2:	d106      	bne.n	82d02 <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   82cf4:	68bb      	ldr	r3, [r7, #8]
   82cf6:	7d1b      	ldrb	r3, [r3, #20]
   82cf8:	f003 0304 	and.w	r3, r3, #4
   82cfc:	b2db      	uxtb	r3, r3
   82cfe:	2b00      	cmp	r3, #0
   82d00:	d001      	beq.n	82d06 <udd_ep_set_halt+0x56>
		return true; // Already STALL
   82d02:	2301      	movs	r3, #1
   82d04:	e054      	b.n	82db0 <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   82d06:	68bb      	ldr	r3, [r7, #8]
   82d08:	7d1b      	ldrb	r3, [r3, #20]
   82d0a:	f003 0301 	and.w	r3, r3, #1
   82d0e:	b2db      	uxtb	r3, r3
   82d10:	2b00      	cmp	r3, #0
   82d12:	d001      	beq.n	82d18 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   82d14:	2300      	movs	r3, #0
   82d16:	e04b      	b.n	82db0 <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   82d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82d1c:	2b00      	cmp	r3, #0
   82d1e:	da25      	bge.n	82d6c <udd_ep_set_halt+0xbc>
   82d20:	4a27      	ldr	r2, [pc, #156]	; (82dc0 <udd_ep_set_halt+0x110>)
   82d22:	7bfb      	ldrb	r3, [r7, #15]
   82d24:	015b      	lsls	r3, r3, #5
   82d26:	4413      	add	r3, r2
   82d28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82d2c:	681b      	ldr	r3, [r3, #0]
   82d2e:	0c9b      	lsrs	r3, r3, #18
   82d30:	f003 0303 	and.w	r3, r3, #3
   82d34:	2b00      	cmp	r3, #0
   82d36:	d019      	beq.n	82d6c <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   82d38:	68ba      	ldr	r2, [r7, #8]
   82d3a:	7d13      	ldrb	r3, [r2, #20]
   82d3c:	f043 0304 	orr.w	r3, r3, #4
   82d40:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   82d42:	4a1f      	ldr	r2, [pc, #124]	; (82dc0 <udd_ep_set_halt+0x110>)
   82d44:	7bfb      	ldrb	r3, [r7, #15]
   82d46:	3308      	adds	r3, #8
   82d48:	015b      	lsls	r3, r3, #5
   82d4a:	4413      	add	r3, r2
   82d4c:	3304      	adds	r3, #4
   82d4e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   82d52:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   82d54:	4b1a      	ldr	r3, [pc, #104]	; (82dc0 <udd_ep_set_halt+0x110>)
   82d56:	691a      	ldr	r2, [r3, #16]
   82d58:	7bfb      	ldrb	r3, [r7, #15]
   82d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
   82d5e:	fa01 f303 	lsl.w	r3, r1, r3
   82d62:	4917      	ldr	r1, [pc, #92]	; (82dc0 <udd_ep_set_halt+0x110>)
   82d64:	4313      	orrs	r3, r2
   82d66:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   82d68:	2301      	movs	r3, #1
   82d6a:	e021      	b.n	82db0 <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   82d6c:	4a14      	ldr	r2, [pc, #80]	; (82dc0 <udd_ep_set_halt+0x110>)
   82d6e:	7bfb      	ldrb	r3, [r7, #15]
   82d70:	015b      	lsls	r3, r3, #5
   82d72:	4413      	add	r3, r2
   82d74:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82d78:	681a      	ldr	r2, [r3, #0]
   82d7a:	4911      	ldr	r1, [pc, #68]	; (82dc0 <udd_ep_set_halt+0x110>)
   82d7c:	7bfb      	ldrb	r3, [r7, #15]
   82d7e:	f022 0202 	bic.w	r2, r2, #2
   82d82:	015b      	lsls	r3, r3, #5
   82d84:	440b      	add	r3, r1
   82d86:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82d8a:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   82d8c:	4a0c      	ldr	r2, [pc, #48]	; (82dc0 <udd_ep_set_halt+0x110>)
   82d8e:	7bfb      	ldrb	r3, [r7, #15]
   82d90:	015b      	lsls	r3, r3, #5
   82d92:	4413      	add	r3, r2
   82d94:	f503 738c 	add.w	r3, r3, #280	; 0x118
   82d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   82d9c:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   82d9e:	4a08      	ldr	r2, [pc, #32]	; (82dc0 <udd_ep_set_halt+0x110>)
   82da0:	7bfb      	ldrb	r3, [r7, #15]
   82da2:	015b      	lsls	r3, r3, #5
   82da4:	4413      	add	r3, r2
   82da6:	f503 738a 	add.w	r3, r3, #276	; 0x114
   82daa:	2220      	movs	r2, #32
   82dac:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   82dae:	2301      	movs	r3, #1
}
   82db0:	4618      	mov	r0, r3
   82db2:	3714      	adds	r7, #20
   82db4:	46bd      	mov	sp, r7
   82db6:	bc80      	pop	{r7}
   82db8:	4770      	bx	lr
   82dba:	bf00      	nop
   82dbc:	20001328 	.word	0x20001328
   82dc0:	400a4000 	.word	0x400a4000

00082dc4 <udd_ep_clear_halt>:

>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
<<<<<<< HEAD
   8311c:	b480      	push	{r7}
   8311e:	b085      	sub	sp, #20
   83120:	af00      	add	r7, sp, #0
   83122:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   83124:	4b10      	ldr	r3, [pc, #64]	; (83168 <_sbrk+0x4c>)
   83126:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   83128:	4b10      	ldr	r3, [pc, #64]	; (8316c <_sbrk+0x50>)
   8312a:	681b      	ldr	r3, [r3, #0]
   8312c:	2b00      	cmp	r3, #0
   8312e:	d102      	bne.n	83136 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   83130:	4b0e      	ldr	r3, [pc, #56]	; (8316c <_sbrk+0x50>)
   83132:	4a0f      	ldr	r2, [pc, #60]	; (83170 <_sbrk+0x54>)
   83134:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   83136:	4b0d      	ldr	r3, [pc, #52]	; (8316c <_sbrk+0x50>)
   83138:	681b      	ldr	r3, [r3, #0]
   8313a:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   8313c:	68ba      	ldr	r2, [r7, #8]
   8313e:	687b      	ldr	r3, [r7, #4]
   83140:	4413      	add	r3, r2
   83142:	68fa      	ldr	r2, [r7, #12]
   83144:	429a      	cmp	r2, r3
   83146:	da02      	bge.n	8314e <_sbrk+0x32>
		return (caddr_t) -1;	
   83148:	f04f 33ff 	mov.w	r3, #4294967295
   8314c:	e006      	b.n	8315c <_sbrk+0x40>
=======
   82dc4:	b580      	push	{r7, lr}
   82dc6:	b084      	sub	sp, #16
   82dc8:	af00      	add	r7, sp, #0
   82dca:	4603      	mov	r3, r0
   82dcc:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   82dce:	2300      	movs	r3, #0
   82dd0:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   82dd2:	79fb      	ldrb	r3, [r7, #7]
   82dd4:	f003 030f 	and.w	r3, r3, #15
   82dd8:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   82dda:	79fb      	ldrb	r3, [r7, #7]
   82ddc:	2b02      	cmp	r3, #2
   82dde:	d901      	bls.n	82de4 <udd_ep_clear_halt+0x20>
		return false;
   82de0:	2300      	movs	r3, #0
   82de2:	e07e      	b.n	82ee2 <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   82de4:	79fb      	ldrb	r3, [r7, #7]
   82de6:	1e5a      	subs	r2, r3, #1
   82de8:	4613      	mov	r3, r2
   82dea:	005b      	lsls	r3, r3, #1
   82dec:	4413      	add	r3, r2
   82dee:	00db      	lsls	r3, r3, #3
   82df0:	4a3e      	ldr	r2, [pc, #248]	; (82eec <udd_ep_clear_halt+0x128>)
   82df2:	4413      	add	r3, r2
   82df4:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   82df6:	68bb      	ldr	r3, [r7, #8]
   82df8:	7d1b      	ldrb	r3, [r3, #20]
   82dfa:	f003 0304 	and.w	r3, r3, #4
   82dfe:	b2db      	uxtb	r3, r3
   82e00:	2b00      	cmp	r3, #0
   82e02:	d01a      	beq.n	82e3a <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   82e04:	68ba      	ldr	r2, [r7, #8]
   82e06:	7d13      	ldrb	r3, [r2, #20]
   82e08:	f36f 0382 	bfc	r3, #2, #1
   82e0c:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   82e0e:	4a38      	ldr	r2, [pc, #224]	; (82ef0 <udd_ep_clear_halt+0x12c>)
   82e10:	79fb      	ldrb	r3, [r7, #7]
   82e12:	015b      	lsls	r3, r3, #5
   82e14:	4413      	add	r3, r2
   82e16:	f503 7384 	add.w	r3, r3, #264	; 0x108
   82e1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   82e1e:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   82e20:	4b33      	ldr	r3, [pc, #204]	; (82ef0 <udd_ep_clear_halt+0x12c>)
   82e22:	691a      	ldr	r2, [r3, #16]
   82e24:	79fb      	ldrb	r3, [r7, #7]
   82e26:	f44f 7180 	mov.w	r1, #256	; 0x100
   82e2a:	fa01 f303 	lsl.w	r3, r1, r3
   82e2e:	43db      	mvns	r3, r3
   82e30:	492f      	ldr	r1, [pc, #188]	; (82ef0 <udd_ep_clear_halt+0x12c>)
   82e32:	4013      	ands	r3, r2
   82e34:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   82e36:	2301      	movs	r3, #1
   82e38:	73fb      	strb	r3, [r7, #15]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   82e3a:	4a2d      	ldr	r2, [pc, #180]	; (82ef0 <udd_ep_clear_halt+0x12c>)
   82e3c:	79fb      	ldrb	r3, [r7, #7]
   82e3e:	015b      	lsls	r3, r3, #5
   82e40:	4413      	add	r3, r2
   82e42:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82e46:	681b      	ldr	r3, [r3, #0]
   82e48:	f003 0320 	and.w	r3, r3, #32
   82e4c:	2b00      	cmp	r3, #0
   82e4e:	d035      	beq.n	82ebc <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   82e50:	4a27      	ldr	r2, [pc, #156]	; (82ef0 <udd_ep_clear_halt+0x12c>)
   82e52:	79fb      	ldrb	r3, [r7, #7]
   82e54:	015b      	lsls	r3, r3, #5
   82e56:	4413      	add	r3, r2
   82e58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82e5c:	681b      	ldr	r3, [r3, #0]
   82e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   82e62:	2b00      	cmp	r3, #0
   82e64:	d010      	beq.n	82e88 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   82e66:	4a22      	ldr	r2, [pc, #136]	; (82ef0 <udd_ep_clear_halt+0x12c>)
   82e68:	79fb      	ldrb	r3, [r7, #7]
   82e6a:	015b      	lsls	r3, r3, #5
   82e6c:	4413      	add	r3, r2
   82e6e:	f503 738c 	add.w	r3, r3, #280	; 0x118
   82e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   82e76:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   82e78:	4a1d      	ldr	r2, [pc, #116]	; (82ef0 <udd_ep_clear_halt+0x12c>)
   82e7a:	79fb      	ldrb	r3, [r7, #7]
   82e7c:	015b      	lsls	r3, r3, #5
   82e7e:	4413      	add	r3, r2
   82e80:	f503 738c 	add.w	r3, r3, #280	; 0x118
   82e84:	2240      	movs	r2, #64	; 0x40
   82e86:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   82e88:	4a19      	ldr	r2, [pc, #100]	; (82ef0 <udd_ep_clear_halt+0x12c>)
   82e8a:	79fb      	ldrb	r3, [r7, #7]
   82e8c:	015b      	lsls	r3, r3, #5
   82e8e:	4413      	add	r3, r2
   82e90:	f503 738c 	add.w	r3, r3, #280	; 0x118
   82e94:	2220      	movs	r2, #32
   82e96:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   82e98:	4a15      	ldr	r2, [pc, #84]	; (82ef0 <udd_ep_clear_halt+0x12c>)
   82e9a:	79fb      	ldrb	r3, [r7, #7]
   82e9c:	3308      	adds	r3, #8
   82e9e:	015b      	lsls	r3, r3, #5
   82ea0:	4413      	add	r3, r2
   82ea2:	3304      	adds	r3, #4
   82ea4:	681a      	ldr	r2, [r3, #0]
   82ea6:	4912      	ldr	r1, [pc, #72]	; (82ef0 <udd_ep_clear_halt+0x12c>)
   82ea8:	79fb      	ldrb	r3, [r7, #7]
   82eaa:	f042 0202 	orr.w	r2, r2, #2
   82eae:	3308      	adds	r3, #8
   82eb0:	015b      	lsls	r3, r3, #5
   82eb2:	440b      	add	r3, r1
   82eb4:	3304      	adds	r3, #4
   82eb6:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   82eb8:	2301      	movs	r3, #1
   82eba:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   82ebc:	7bfb      	ldrb	r3, [r7, #15]
   82ebe:	2b00      	cmp	r3, #0
   82ec0:	d00e      	beq.n	82ee0 <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   82ec2:	68bb      	ldr	r3, [r7, #8]
   82ec4:	7d1b      	ldrb	r3, [r3, #20]
   82ec6:	f003 0301 	and.w	r3, r3, #1
   82eca:	b2db      	uxtb	r3, r3
   82ecc:	2b00      	cmp	r3, #0
   82ece:	d007      	beq.n	82ee0 <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   82ed0:	68ba      	ldr	r2, [r7, #8]
   82ed2:	7d13      	ldrb	r3, [r2, #20]
   82ed4:	f36f 0300 	bfc	r3, #0, #1
   82ed8:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   82eda:	68bb      	ldr	r3, [r7, #8]
   82edc:	681b      	ldr	r3, [r3, #0]
   82ede:	4798      	blx	r3
		}
	}
	return true;
   82ee0:	2301      	movs	r3, #1
}
   82ee2:	4618      	mov	r0, r3
   82ee4:	3710      	adds	r7, #16
   82ee6:	46bd      	mov	sp, r7
   82ee8:	bd80      	pop	{r7, pc}
   82eea:	bf00      	nop
   82eec:	20001328 	.word	0x20001328
   82ef0:	400a4000 	.word	0x400a4000

<<<<<<< HEAD
	heap += incr;
   8314e:	4b07      	ldr	r3, [pc, #28]	; (8316c <_sbrk+0x50>)
   83150:	681a      	ldr	r2, [r3, #0]
   83152:	687b      	ldr	r3, [r7, #4]
   83154:	4413      	add	r3, r2
   83156:	4a05      	ldr	r2, [pc, #20]	; (8316c <_sbrk+0x50>)
   83158:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8315a:	68bb      	ldr	r3, [r7, #8]
}
   8315c:	4618      	mov	r0, r3
   8315e:	3714      	adds	r7, #20
   83160:	46bd      	mov	sp, r7
   83162:	bc80      	pop	{r7}
   83164:	4770      	bx	lr
   83166:	bf00      	nop
   83168:	20083ffc 	.word	0x20083ffc
   8316c:	20001330 	.word	0x20001330
   83170:	20084000 	.word	0x20084000

00083174 <_close>:
=======
00082ef4 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
{
   82ef4:	b580      	push	{r7, lr}
   82ef6:	b086      	sub	sp, #24
   82ef8:	af00      	add	r7, sp, #0
   82efa:	60ba      	str	r2, [r7, #8]
   82efc:	607b      	str	r3, [r7, #4]
   82efe:	4603      	mov	r3, r0
   82f00:	73fb      	strb	r3, [r7, #15]
   82f02:	460b      	mov	r3, r1
   82f04:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

<<<<<<< HEAD
extern int _close(int file)
{
   83174:	b480      	push	{r7}
   83176:	b083      	sub	sp, #12
   83178:	af00      	add	r7, sp, #0
   8317a:	6078      	str	r0, [r7, #4]
	return -1;
   8317c:	f04f 33ff 	mov.w	r3, #4294967295
}
   83180:	4618      	mov	r0, r3
   83182:	370c      	adds	r7, #12
   83184:	46bd      	mov	sp, r7
   83186:	bc80      	pop	{r7}
   83188:	4770      	bx	lr

0008318a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   8318a:	b480      	push	{r7}
   8318c:	b083      	sub	sp, #12
   8318e:	af00      	add	r7, sp, #0
   83190:	6078      	str	r0, [r7, #4]
   83192:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   83194:	683b      	ldr	r3, [r7, #0]
   83196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8319a:	605a      	str	r2, [r3, #4]

	return 0;
   8319c:	2300      	movs	r3, #0
}
   8319e:	4618      	mov	r0, r3
   831a0:	370c      	adds	r7, #12
   831a2:	46bd      	mov	sp, r7
   831a4:	bc80      	pop	{r7}
   831a6:	4770      	bx	lr

000831a8 <_isatty>:

extern int _isatty(int file)
{
   831a8:	b480      	push	{r7}
   831aa:	b083      	sub	sp, #12
   831ac:	af00      	add	r7, sp, #0
   831ae:	6078      	str	r0, [r7, #4]
	return 1;
   831b0:	2301      	movs	r3, #1
}
   831b2:	4618      	mov	r0, r3
   831b4:	370c      	adds	r7, #12
   831b6:	46bd      	mov	sp, r7
   831b8:	bc80      	pop	{r7}
   831ba:	4770      	bx	lr

000831bc <_lseek>:
=======
	ep &= USB_EP_ADDR_MASK;
   82f06:	7bfb      	ldrb	r3, [r7, #15]
   82f08:	f003 030f 	and.w	r3, r3, #15
   82f0c:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   82f0e:	7bfb      	ldrb	r3, [r7, #15]
   82f10:	2b02      	cmp	r3, #2
   82f12:	d901      	bls.n	82f18 <udd_ep_run+0x24>
		return false;
   82f14:	2300      	movs	r3, #0
   82f16:	e063      	b.n	82fe0 <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   82f18:	7bfb      	ldrb	r3, [r7, #15]
   82f1a:	1e5a      	subs	r2, r3, #1
   82f1c:	4613      	mov	r3, r2
   82f1e:	005b      	lsls	r3, r3, #1
   82f20:	4413      	add	r3, r2
   82f22:	00db      	lsls	r3, r3, #3
   82f24:	4a30      	ldr	r2, [pc, #192]	; (82fe8 <udd_ep_run+0xf4>)
   82f26:	4413      	add	r3, r2
   82f28:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   82f2a:	4a30      	ldr	r2, [pc, #192]	; (82fec <udd_ep_run+0xf8>)
   82f2c:	7bfb      	ldrb	r3, [r7, #15]
   82f2e:	015b      	lsls	r3, r3, #5
   82f30:	4413      	add	r3, r2
   82f32:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   82f36:	681b      	ldr	r3, [r3, #0]
   82f38:	f003 0301 	and.w	r3, r3, #1
   82f3c:	2b00      	cmp	r3, #0
   82f3e:	d011      	beq.n	82f64 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   82f40:	4a2a      	ldr	r2, [pc, #168]	; (82fec <udd_ep_run+0xf8>)
   82f42:	7bfb      	ldrb	r3, [r7, #15]
   82f44:	015b      	lsls	r3, r3, #5
   82f46:	4413      	add	r3, r2
   82f48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   82f4c:	681b      	ldr	r3, [r3, #0]
   82f4e:	f003 0320 	and.w	r3, r3, #32
   82f52:	2b00      	cmp	r3, #0
   82f54:	d106      	bne.n	82f64 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   82f56:	697b      	ldr	r3, [r7, #20]
   82f58:	7d1b      	ldrb	r3, [r3, #20]
   82f5a:	f003 0304 	and.w	r3, r3, #4
   82f5e:	b2db      	uxtb	r3, r3
   82f60:	2b00      	cmp	r3, #0
   82f62:	d001      	beq.n	82f68 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   82f64:	2300      	movs	r3, #0
   82f66:	e03b      	b.n	82fe0 <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   82f68:	4b21      	ldr	r3, [pc, #132]	; (82ff0 <udd_ep_run+0xfc>)
   82f6a:	4798      	blx	r3
   82f6c:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   82f6e:	697b      	ldr	r3, [r7, #20]
   82f70:	7d1b      	ldrb	r3, [r3, #20]
   82f72:	f003 0301 	and.w	r3, r3, #1
   82f76:	b2db      	uxtb	r3, r3
   82f78:	2b00      	cmp	r3, #0
   82f7a:	d004      	beq.n	82f86 <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   82f7c:	6938      	ldr	r0, [r7, #16]
   82f7e:	4b1d      	ldr	r3, [pc, #116]	; (82ff4 <udd_ep_run+0x100>)
   82f80:	4798      	blx	r3
		return false; // Job already on going
   82f82:	2300      	movs	r3, #0
   82f84:	e02c      	b.n	82fe0 <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   82f86:	697a      	ldr	r2, [r7, #20]
   82f88:	7d13      	ldrb	r3, [r2, #20]
   82f8a:	f043 0301 	orr.w	r3, r3, #1
   82f8e:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   82f90:	6938      	ldr	r0, [r7, #16]
   82f92:	4b18      	ldr	r3, [pc, #96]	; (82ff4 <udd_ep_run+0x100>)
   82f94:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   82f96:	697b      	ldr	r3, [r7, #20]
   82f98:	68ba      	ldr	r2, [r7, #8]
   82f9a:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   82f9c:	697b      	ldr	r3, [r7, #20]
   82f9e:	687a      	ldr	r2, [r7, #4]
   82fa0:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   82fa2:	697b      	ldr	r3, [r7, #20]
   82fa4:	2200      	movs	r2, #0
   82fa6:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   82fa8:	697b      	ldr	r3, [r7, #20]
   82faa:	2200      	movs	r2, #0
   82fac:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   82fae:	697b      	ldr	r3, [r7, #20]
   82fb0:	6a3a      	ldr	r2, [r7, #32]
   82fb2:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   82fb4:	7bbb      	ldrb	r3, [r7, #14]
   82fb6:	2b00      	cmp	r3, #0
   82fb8:	d102      	bne.n	82fc0 <udd_ep_run+0xcc>
   82fba:	687b      	ldr	r3, [r7, #4]
   82fbc:	2b00      	cmp	r3, #0
   82fbe:	d101      	bne.n	82fc4 <udd_ep_run+0xd0>
   82fc0:	2301      	movs	r3, #1
   82fc2:	e000      	b.n	82fc6 <udd_ep_run+0xd2>
   82fc4:	2300      	movs	r3, #0
   82fc6:	f003 0301 	and.w	r3, r3, #1
   82fca:	b2d9      	uxtb	r1, r3
   82fcc:	697a      	ldr	r2, [r7, #20]
   82fce:	7d13      	ldrb	r3, [r2, #20]
   82fd0:	f361 0341 	bfi	r3, r1, #1, #1
   82fd4:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   82fd6:	7bfb      	ldrb	r3, [r7, #15]
   82fd8:	4618      	mov	r0, r3
   82fda:	4b07      	ldr	r3, [pc, #28]	; (82ff8 <udd_ep_run+0x104>)
   82fdc:	4798      	blx	r3
	return true;
   82fde:	2301      	movs	r3, #1
}
   82fe0:	4618      	mov	r0, r3
   82fe2:	3718      	adds	r7, #24
   82fe4:	46bd      	mov	sp, r7
   82fe6:	bd80      	pop	{r7, pc}
   82fe8:	20001328 	.word	0x20001328
   82fec:	400a4000 	.word	0x400a4000
   82ff0:	000822b1 	.word	0x000822b1
   82ff4:	0008230d 	.word	0x0008230d
   82ff8:	00083ab1 	.word	0x00083ab1

00082ffc <udd_ep_abort>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68


void udd_ep_abort(udd_ep_id_t ep)
{
<<<<<<< HEAD
   831bc:	b480      	push	{r7}
   831be:	b085      	sub	sp, #20
   831c0:	af00      	add	r7, sp, #0
   831c2:	60f8      	str	r0, [r7, #12]
   831c4:	60b9      	str	r1, [r7, #8]
   831c6:	607a      	str	r2, [r7, #4]
	return 0;
   831c8:	2300      	movs	r3, #0
}
   831ca:	4618      	mov	r0, r3
   831cc:	3714      	adds	r7, #20
   831ce:	46bd      	mov	sp, r7
   831d0:	bc80      	pop	{r7}
   831d2:	4770      	bx	lr

000831d4 <_exit>:

extern void _exit(int status)
{
   831d4:	b580      	push	{r7, lr}
   831d6:	b082      	sub	sp, #8
   831d8:	af00      	add	r7, sp, #0
   831da:	6078      	str	r0, [r7, #4]
	printf("Exiting with status %d.\n", status);
   831dc:	6879      	ldr	r1, [r7, #4]
   831de:	4802      	ldr	r0, [pc, #8]	; (831e8 <_exit+0x14>)
   831e0:	4b02      	ldr	r3, [pc, #8]	; (831ec <_exit+0x18>)
   831e2:	4798      	blx	r3

	for (;;);
   831e4:	e7fe      	b.n	831e4 <_exit+0x10>
   831e6:	bf00      	nop
   831e8:	0008d468 	.word	0x0008d468
   831ec:	00086abd 	.word	0x00086abd

000831f0 <_kill>:
}
=======
   82ffc:	b580      	push	{r7, lr}
   82ffe:	b084      	sub	sp, #16
   83000:	af00      	add	r7, sp, #0
   83002:	4603      	mov	r3, r0
   83004:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83006:	79fb      	ldrb	r3, [r7, #7]
   83008:	f003 030f 	and.w	r3, r3, #15
   8300c:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   8300e:	7bfb      	ldrb	r3, [r7, #15]
   83010:	011a      	lsls	r2, r3, #4
   83012:	4b19      	ldr	r3, [pc, #100]	; (83078 <udd_ep_abort+0x7c>)
   83014:	4413      	add	r3, r2
   83016:	2200      	movs	r2, #0
   83018:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   8301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8301e:	2b00      	cmp	r3, #0
   83020:	da21      	bge.n	83066 <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   83022:	e014      	b.n	8304e <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   83024:	4a15      	ldr	r2, [pc, #84]	; (8307c <udd_ep_abort+0x80>)
   83026:	7bfb      	ldrb	r3, [r7, #15]
   83028:	015b      	lsls	r3, r3, #5
   8302a:	4413      	add	r3, r2
   8302c:	f503 738a 	add.w	r3, r3, #276	; 0x114
   83030:	f44f 7200 	mov.w	r2, #512	; 0x200
   83034:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   83036:	bf00      	nop
   83038:	4a10      	ldr	r2, [pc, #64]	; (8307c <udd_ep_abort+0x80>)
   8303a:	7bfb      	ldrb	r3, [r7, #15]
   8303c:	015b      	lsls	r3, r3, #5
   8303e:	4413      	add	r3, r2
   83040:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83044:	681b      	ldr	r3, [r3, #0]
   83046:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8304a:	2b00      	cmp	r3, #0
   8304c:	d1f4      	bne.n	83038 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   8304e:	4a0b      	ldr	r2, [pc, #44]	; (8307c <udd_ep_abort+0x80>)
   83050:	7bfb      	ldrb	r3, [r7, #15]
   83052:	015b      	lsls	r3, r3, #5
   83054:	4413      	add	r3, r2
   83056:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8305a:	681b      	ldr	r3, [r3, #0]
   8305c:	0c9b      	lsrs	r3, r3, #18
   8305e:	f003 0303 	and.w	r3, r3, #3
   83062:	2b00      	cmp	r3, #0
   83064:	d1de      	bne.n	83024 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   83066:	79fb      	ldrb	r3, [r7, #7]
   83068:	4618      	mov	r0, r3
   8306a:	4b05      	ldr	r3, [pc, #20]	; (83080 <udd_ep_abort+0x84>)
   8306c:	4798      	blx	r3
}
   8306e:	bf00      	nop
   83070:	3710      	adds	r7, #16
   83072:	46bd      	mov	sp, r7
   83074:	bd80      	pop	{r7, pc}
   83076:	bf00      	nop
   83078:	400a4300 	.word	0x400a4300
   8307c:	400a4000 	.word	0x400a4000
   83080:	00083a05 	.word	0x00083a05

00083084 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

void udd_test_mode_j(void)
{
<<<<<<< HEAD
   831f0:	b480      	push	{r7}
   831f2:	b083      	sub	sp, #12
   831f4:	af00      	add	r7, sp, #0
   831f6:	6078      	str	r0, [r7, #4]
   831f8:	6039      	str	r1, [r7, #0]
	return;
   831fa:	bf00      	nop
}
   831fc:	370c      	adds	r7, #12
   831fe:	46bd      	mov	sp, r7
   83200:	bc80      	pop	{r7}
   83202:	4770      	bx	lr

00083204 <_getpid>:

extern int _getpid(void)
{
   83204:	b480      	push	{r7}
   83206:	af00      	add	r7, sp, #0
	return -1;
   83208:	f04f 33ff 	mov.w	r3, #4294967295
}
   8320c:	4618      	mov	r0, r3
   8320e:	46bd      	mov	sp, r7
   83210:	bc80      	pop	{r7}
   83212:	4770      	bx	lr

00083214 <osc_enable>:
{
   83214:	b580      	push	{r7, lr}
   83216:	b082      	sub	sp, #8
   83218:	af00      	add	r7, sp, #0
   8321a:	6078      	str	r0, [r7, #4]
   8321c:	687b      	ldr	r3, [r7, #4]
   8321e:	2b07      	cmp	r3, #7
   83220:	d82e      	bhi.n	83280 <osc_enable+0x6c>
   83222:	a201      	add	r2, pc, #4	; (adr r2, 83228 <osc_enable+0x14>)
   83224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83228:	0008327f 	.word	0x0008327f
   8322c:	00083249 	.word	0x00083249
   83230:	00083251 	.word	0x00083251
   83234:	00083259 	.word	0x00083259
   83238:	00083261 	.word	0x00083261
   8323c:	00083269 	.word	0x00083269
   83240:	00083271 	.word	0x00083271
   83244:	00083279 	.word	0x00083279
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83248:	2000      	movs	r0, #0
   8324a:	4b0f      	ldr	r3, [pc, #60]	; (83288 <osc_enable+0x74>)
   8324c:	4798      	blx	r3
		break;
   8324e:	e017      	b.n	83280 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   83250:	2001      	movs	r0, #1
   83252:	4b0d      	ldr	r3, [pc, #52]	; (83288 <osc_enable+0x74>)
   83254:	4798      	blx	r3
		break;
   83256:	e013      	b.n	83280 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83258:	2000      	movs	r0, #0
   8325a:	4b0c      	ldr	r3, [pc, #48]	; (8328c <osc_enable+0x78>)
   8325c:	4798      	blx	r3
		break;
   8325e:	e00f      	b.n	83280 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83260:	2010      	movs	r0, #16
   83262:	4b0a      	ldr	r3, [pc, #40]	; (8328c <osc_enable+0x78>)
   83264:	4798      	blx	r3
		break;
   83266:	e00b      	b.n	83280 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83268:	2020      	movs	r0, #32
   8326a:	4b08      	ldr	r3, [pc, #32]	; (8328c <osc_enable+0x78>)
   8326c:	4798      	blx	r3
		break;
   8326e:	e007      	b.n	83280 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83270:	203e      	movs	r0, #62	; 0x3e
   83272:	4b07      	ldr	r3, [pc, #28]	; (83290 <osc_enable+0x7c>)
   83274:	4798      	blx	r3
		break;
   83276:	e003      	b.n	83280 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   83278:	4b06      	ldr	r3, [pc, #24]	; (83294 <osc_enable+0x80>)
   8327a:	4798      	blx	r3
		break;
   8327c:	e000      	b.n	83280 <osc_enable+0x6c>
		break;
   8327e:	bf00      	nop
}
   83280:	bf00      	nop
   83282:	3708      	adds	r7, #8
   83284:	46bd      	mov	sp, r7
   83286:	bd80      	pop	{r7, pc}
   83288:	0008278d 	.word	0x0008278d
   8328c:	000827f9 	.word	0x000827f9
   83290:	0008286d 	.word	0x0008286d
   83294:	000828bd 	.word	0x000828bd

00083298 <osc_is_ready>:
{
   83298:	b580      	push	{r7, lr}
   8329a:	b082      	sub	sp, #8
   8329c:	af00      	add	r7, sp, #0
   8329e:	6078      	str	r0, [r7, #4]
   832a0:	687b      	ldr	r3, [r7, #4]
   832a2:	2b07      	cmp	r3, #7
   832a4:	d82f      	bhi.n	83306 <osc_is_ready+0x6e>
   832a6:	a201      	add	r2, pc, #4	; (adr r2, 832ac <osc_is_ready+0x14>)
   832a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   832ac:	000832cd 	.word	0x000832cd
   832b0:	000832d1 	.word	0x000832d1
   832b4:	000832d1 	.word	0x000832d1
   832b8:	000832e3 	.word	0x000832e3
   832bc:	000832e3 	.word	0x000832e3
   832c0:	000832e3 	.word	0x000832e3
   832c4:	000832f5 	.word	0x000832f5
   832c8:	000832f5 	.word	0x000832f5
		return 1;
   832cc:	2301      	movs	r3, #1
   832ce:	e01b      	b.n	83308 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   832d0:	4b0f      	ldr	r3, [pc, #60]	; (83310 <osc_is_ready+0x78>)
   832d2:	4798      	blx	r3
   832d4:	4603      	mov	r3, r0
   832d6:	2b00      	cmp	r3, #0
   832d8:	bf14      	ite	ne
   832da:	2301      	movne	r3, #1
   832dc:	2300      	moveq	r3, #0
   832de:	b2db      	uxtb	r3, r3
   832e0:	e012      	b.n	83308 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   832e2:	4b0c      	ldr	r3, [pc, #48]	; (83314 <osc_is_ready+0x7c>)
   832e4:	4798      	blx	r3
   832e6:	4603      	mov	r3, r0
   832e8:	2b00      	cmp	r3, #0
   832ea:	bf14      	ite	ne
   832ec:	2301      	movne	r3, #1
   832ee:	2300      	moveq	r3, #0
   832f0:	b2db      	uxtb	r3, r3
   832f2:	e009      	b.n	83308 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   832f4:	4b08      	ldr	r3, [pc, #32]	; (83318 <osc_is_ready+0x80>)
   832f6:	4798      	blx	r3
   832f8:	4603      	mov	r3, r0
   832fa:	2b00      	cmp	r3, #0
   832fc:	bf14      	ite	ne
   832fe:	2301      	movne	r3, #1
   83300:	2300      	moveq	r3, #0
   83302:	b2db      	uxtb	r3, r3
   83304:	e000      	b.n	83308 <osc_is_ready+0x70>
	return 0;
   83306:	2300      	movs	r3, #0
}
   83308:	4618      	mov	r0, r3
   8330a:	3708      	adds	r7, #8
   8330c:	46bd      	mov	sp, r7
   8330e:	bd80      	pop	{r7, pc}
   83310:	000827c5 	.word	0x000827c5
   83314:	00082855 	.word	0x00082855
   83318:	00082909 	.word	0x00082909

0008331c <osc_get_rate>:
{
   8331c:	b480      	push	{r7}
   8331e:	b083      	sub	sp, #12
   83320:	af00      	add	r7, sp, #0
   83322:	6078      	str	r0, [r7, #4]
   83324:	687b      	ldr	r3, [r7, #4]
   83326:	2b07      	cmp	r3, #7
   83328:	d823      	bhi.n	83372 <osc_get_rate+0x56>
   8332a:	a201      	add	r2, pc, #4	; (adr r2, 83330 <osc_get_rate+0x14>)
   8332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83330:	00083351 	.word	0x00083351
   83334:	00083357 	.word	0x00083357
   83338:	0008335b 	.word	0x0008335b
   8333c:	0008335f 	.word	0x0008335f
   83340:	00083363 	.word	0x00083363
   83344:	00083367 	.word	0x00083367
   83348:	0008336b 	.word	0x0008336b
   8334c:	0008336f 	.word	0x0008336f
		return OSC_SLCK_32K_RC_HZ;
   83350:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83354:	e00e      	b.n	83374 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   83356:	2300      	movs	r3, #0
   83358:	e00c      	b.n	83374 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   8335a:	2300      	movs	r3, #0
   8335c:	e00a      	b.n	83374 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8335e:	4b08      	ldr	r3, [pc, #32]	; (83380 <osc_get_rate+0x64>)
   83360:	e008      	b.n	83374 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   83362:	4b08      	ldr	r3, [pc, #32]	; (83384 <osc_get_rate+0x68>)
   83364:	e006      	b.n	83374 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   83366:	4b08      	ldr	r3, [pc, #32]	; (83388 <osc_get_rate+0x6c>)
   83368:	e004      	b.n	83374 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   8336a:	4b07      	ldr	r3, [pc, #28]	; (83388 <osc_get_rate+0x6c>)
   8336c:	e002      	b.n	83374 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   8336e:	4b06      	ldr	r3, [pc, #24]	; (83388 <osc_get_rate+0x6c>)
   83370:	e000      	b.n	83374 <osc_get_rate+0x58>
	return 0;
   83372:	2300      	movs	r3, #0
}
   83374:	4618      	mov	r0, r3
   83376:	370c      	adds	r7, #12
   83378:	46bd      	mov	sp, r7
   8337a:	bc80      	pop	{r7}
   8337c:	4770      	bx	lr
   8337e:	bf00      	nop
   83380:	003d0900 	.word	0x003d0900
   83384:	007a1200 	.word	0x007a1200
   83388:	00b71b00 	.word	0x00b71b00

0008338c <osc_wait_ready>:
{
   8338c:	b580      	push	{r7, lr}
   8338e:	b082      	sub	sp, #8
   83390:	af00      	add	r7, sp, #0
   83392:	4603      	mov	r3, r0
   83394:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   83396:	bf00      	nop
   83398:	79fb      	ldrb	r3, [r7, #7]
   8339a:	4618      	mov	r0, r3
   8339c:	4b06      	ldr	r3, [pc, #24]	; (833b8 <osc_wait_ready+0x2c>)
   8339e:	4798      	blx	r3
   833a0:	4603      	mov	r3, r0
   833a2:	f083 0301 	eor.w	r3, r3, #1
   833a6:	b2db      	uxtb	r3, r3
   833a8:	2b00      	cmp	r3, #0
   833aa:	d1f5      	bne.n	83398 <osc_wait_ready+0xc>
}
   833ac:	bf00      	nop
   833ae:	bf00      	nop
   833b0:	3708      	adds	r7, #8
   833b2:	46bd      	mov	sp, r7
   833b4:	bd80      	pop	{r7, pc}
   833b6:	bf00      	nop
   833b8:	00083299 	.word	0x00083299

000833bc <pll_config_init>:
{
   833bc:	b580      	push	{r7, lr}
   833be:	b086      	sub	sp, #24
   833c0:	af00      	add	r7, sp, #0
   833c2:	60f8      	str	r0, [r7, #12]
   833c4:	607a      	str	r2, [r7, #4]
   833c6:	603b      	str	r3, [r7, #0]
   833c8:	460b      	mov	r3, r1
   833ca:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   833cc:	687b      	ldr	r3, [r7, #4]
   833ce:	2b00      	cmp	r3, #0
   833d0:	d107      	bne.n	833e2 <pll_config_init+0x26>
   833d2:	683b      	ldr	r3, [r7, #0]
   833d4:	2b00      	cmp	r3, #0
   833d6:	d104      	bne.n	833e2 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   833d8:	68fb      	ldr	r3, [r7, #12]
   833da:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   833de:	601a      	str	r2, [r3, #0]
   833e0:	e01a      	b.n	83418 <pll_config_init+0x5c>
		vco_hz = osc_get_rate(e_src) / ul_div;
   833e2:	7afb      	ldrb	r3, [r7, #11]
   833e4:	4618      	mov	r0, r3
   833e6:	4b0e      	ldr	r3, [pc, #56]	; (83420 <pll_config_init+0x64>)
   833e8:	4798      	blx	r3
   833ea:	4602      	mov	r2, r0
   833ec:	687b      	ldr	r3, [r7, #4]
   833ee:	fbb2 f3f3 	udiv	r3, r2, r3
   833f2:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   833f4:	697b      	ldr	r3, [r7, #20]
   833f6:	683a      	ldr	r2, [r7, #0]
   833f8:	fb02 f303 	mul.w	r3, r2, r3
   833fc:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   833fe:	683b      	ldr	r3, [r7, #0]
   83400:	3b01      	subs	r3, #1
   83402:	041a      	lsls	r2, r3, #16
   83404:	4b07      	ldr	r3, [pc, #28]	; (83424 <pll_config_init+0x68>)
   83406:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   83408:	687a      	ldr	r2, [r7, #4]
   8340a:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8340c:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   8340e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83412:	68fb      	ldr	r3, [r7, #12]
   83414:	601a      	str	r2, [r3, #0]
}
   83416:	bf00      	nop
   83418:	bf00      	nop
   8341a:	3718      	adds	r7, #24
   8341c:	46bd      	mov	sp, r7
   8341e:	bd80      	pop	{r7, pc}
   83420:	0008331d 	.word	0x0008331d
   83424:	07ff0000 	.word	0x07ff0000

00083428 <pll_enable>:
{
   83428:	b580      	push	{r7, lr}
   8342a:	b082      	sub	sp, #8
   8342c:	af00      	add	r7, sp, #0
   8342e:	6078      	str	r0, [r7, #4]
   83430:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   83432:	683b      	ldr	r3, [r7, #0]
   83434:	2b00      	cmp	r3, #0
   83436:	d108      	bne.n	8344a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83438:	4b09      	ldr	r3, [pc, #36]	; (83460 <pll_enable+0x38>)
   8343a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8343c:	687b      	ldr	r3, [r7, #4]
   8343e:	681b      	ldr	r3, [r3, #0]
   83440:	4a08      	ldr	r2, [pc, #32]	; (83464 <pll_enable+0x3c>)
   83442:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83446:	6293      	str	r3, [r2, #40]	; 0x28
}
   83448:	e005      	b.n	83456 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8344a:	687b      	ldr	r3, [r7, #4]
   8344c:	681b      	ldr	r3, [r3, #0]
   8344e:	4a05      	ldr	r2, [pc, #20]	; (83464 <pll_enable+0x3c>)
   83450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83454:	61d3      	str	r3, [r2, #28]
}
   83456:	bf00      	nop
   83458:	3708      	adds	r7, #8
   8345a:	46bd      	mov	sp, r7
   8345c:	bd80      	pop	{r7, pc}
   8345e:	bf00      	nop
   83460:	00082979 	.word	0x00082979
   83464:	400e0400 	.word	0x400e0400

00083468 <pll_is_locked>:
{
   83468:	b580      	push	{r7, lr}
   8346a:	b082      	sub	sp, #8
   8346c:	af00      	add	r7, sp, #0
   8346e:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   83470:	687b      	ldr	r3, [r7, #4]
   83472:	2b00      	cmp	r3, #0
   83474:	d103      	bne.n	8347e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   83476:	4b05      	ldr	r3, [pc, #20]	; (8348c <pll_is_locked+0x24>)
   83478:	4798      	blx	r3
   8347a:	4603      	mov	r3, r0
   8347c:	e002      	b.n	83484 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   8347e:	4b04      	ldr	r3, [pc, #16]	; (83490 <pll_is_locked+0x28>)
   83480:	4798      	blx	r3
   83482:	4603      	mov	r3, r0
}
   83484:	4618      	mov	r0, r3
   83486:	3708      	adds	r7, #8
   83488:	46bd      	mov	sp, r7
   8348a:	bd80      	pop	{r7, pc}
   8348c:	00082991 	.word	0x00082991
   83490:	000829c5 	.word	0x000829c5

00083494 <pll_enable_source>:
{
   83494:	b580      	push	{r7, lr}
   83496:	b082      	sub	sp, #8
   83498:	af00      	add	r7, sp, #0
   8349a:	4603      	mov	r3, r0
   8349c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8349e:	79fb      	ldrb	r3, [r7, #7]
   834a0:	3b03      	subs	r3, #3
   834a2:	2b04      	cmp	r3, #4
   834a4:	d808      	bhi.n	834b8 <pll_enable_source+0x24>
		osc_enable(e_src);
   834a6:	79fb      	ldrb	r3, [r7, #7]
   834a8:	4618      	mov	r0, r3
   834aa:	4b06      	ldr	r3, [pc, #24]	; (834c4 <pll_enable_source+0x30>)
   834ac:	4798      	blx	r3
		osc_wait_ready(e_src);
   834ae:	79fb      	ldrb	r3, [r7, #7]
   834b0:	4618      	mov	r0, r3
   834b2:	4b05      	ldr	r3, [pc, #20]	; (834c8 <pll_enable_source+0x34>)
   834b4:	4798      	blx	r3
		break;
   834b6:	e000      	b.n	834ba <pll_enable_source+0x26>
		break;
   834b8:	bf00      	nop
}
   834ba:	bf00      	nop
   834bc:	3708      	adds	r7, #8
   834be:	46bd      	mov	sp, r7
   834c0:	bd80      	pop	{r7, pc}
   834c2:	bf00      	nop
   834c4:	00083215 	.word	0x00083215
   834c8:	0008338d 	.word	0x0008338d

000834cc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   834cc:	b580      	push	{r7, lr}
   834ce:	b082      	sub	sp, #8
   834d0:	af00      	add	r7, sp, #0
   834d2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   834d4:	bf00      	nop
   834d6:	6878      	ldr	r0, [r7, #4]
   834d8:	4b04      	ldr	r3, [pc, #16]	; (834ec <pll_wait_for_lock+0x20>)
   834da:	4798      	blx	r3
   834dc:	4603      	mov	r3, r0
   834de:	2b00      	cmp	r3, #0
   834e0:	d0f9      	beq.n	834d6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   834e2:	2300      	movs	r3, #0
}
   834e4:	4618      	mov	r0, r3
   834e6:	3708      	adds	r7, #8
   834e8:	46bd      	mov	sp, r7
   834ea:	bd80      	pop	{r7, pc}
   834ec:	00083469 	.word	0x00083469

000834f0 <sysclk_get_main_hz>:
{
   834f0:	b580      	push	{r7, lr}
   834f2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   834f4:	2006      	movs	r0, #6
   834f6:	4b03      	ldr	r3, [pc, #12]	; (83504 <sysclk_get_main_hz+0x14>)
   834f8:	4798      	blx	r3
   834fa:	4603      	mov	r3, r0
   834fc:	011b      	lsls	r3, r3, #4
}
   834fe:	4618      	mov	r0, r3
   83500:	bd80      	pop	{r7, pc}
   83502:	bf00      	nop
   83504:	0008331d 	.word	0x0008331d

00083508 <sysclk_get_cpu_hz>:
{
   83508:	b580      	push	{r7, lr}
   8350a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   8350c:	4b02      	ldr	r3, [pc, #8]	; (83518 <sysclk_get_cpu_hz+0x10>)
   8350e:	4798      	blx	r3
   83510:	4603      	mov	r3, r0
   83512:	085b      	lsrs	r3, r3, #1
}
   83514:	4618      	mov	r0, r3
   83516:	bd80      	pop	{r7, pc}
   83518:	000834f1 	.word	0x000834f1

0008351c <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   8351c:	b590      	push	{r4, r7, lr}
   8351e:	b083      	sub	sp, #12
   83520:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   83522:	2006      	movs	r0, #6
   83524:	4b09      	ldr	r3, [pc, #36]	; (8354c <sysclk_enable_usb+0x30>)
   83526:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   83528:	1d38      	adds	r0, r7, #4
   8352a:	2300      	movs	r3, #0
   8352c:	2200      	movs	r2, #0
   8352e:	2106      	movs	r1, #6
   83530:	4c07      	ldr	r4, [pc, #28]	; (83550 <sysclk_enable_usb+0x34>)
   83532:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   83534:	1d3b      	adds	r3, r7, #4
   83536:	2101      	movs	r1, #1
   83538:	4618      	mov	r0, r3
   8353a:	4b06      	ldr	r3, [pc, #24]	; (83554 <sysclk_enable_usb+0x38>)
   8353c:	4798      	blx	r3
	pll_wait_for_lock(1);
   8353e:	2001      	movs	r0, #1
   83540:	4b05      	ldr	r3, [pc, #20]	; (83558 <sysclk_enable_usb+0x3c>)
   83542:	4798      	blx	r3
}
   83544:	bf00      	nop
   83546:	370c      	adds	r7, #12
   83548:	46bd      	mov	sp, r7
   8354a:	bd90      	pop	{r4, r7, pc}
   8354c:	00083495 	.word	0x00083495
   83550:	000833bd 	.word	0x000833bd
   83554:	00083429 	.word	0x00083429
   83558:	000834cd 	.word	0x000834cd

0008355c <sysclk_init>:
		pll_disable(1);
	}
}
=======
   83084:	b480      	push	{r7}
   83086:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   83088:	4b0a      	ldr	r3, [pc, #40]	; (830b4 <udd_test_mode_j+0x30>)
   8308a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8308e:	f023 0303 	bic.w	r3, r3, #3
   83092:	4a08      	ldr	r2, [pc, #32]	; (830b4 <udd_test_mode_j+0x30>)
   83094:	f043 0302 	orr.w	r3, r3, #2
   83098:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   8309c:	4b05      	ldr	r3, [pc, #20]	; (830b4 <udd_test_mode_j+0x30>)
   8309e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   830a2:	4a04      	ldr	r2, [pc, #16]	; (830b4 <udd_test_mode_j+0x30>)
   830a4:	f043 0304 	orr.w	r3, r3, #4
   830a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   830ac:	bf00      	nop
   830ae:	46bd      	mov	sp, r7
   830b0:	bc80      	pop	{r7}
   830b2:	4770      	bx	lr
   830b4:	400a4000 	.word	0x400a4000

000830b8 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   830b8:	b480      	push	{r7}
   830ba:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   830bc:	4b0a      	ldr	r3, [pc, #40]	; (830e8 <udd_test_mode_k+0x30>)
   830be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   830c2:	f023 0303 	bic.w	r3, r3, #3
   830c6:	4a08      	ldr	r2, [pc, #32]	; (830e8 <udd_test_mode_k+0x30>)
   830c8:	f043 0302 	orr.w	r3, r3, #2
   830cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   830d0:	4b05      	ldr	r3, [pc, #20]	; (830e8 <udd_test_mode_k+0x30>)
   830d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   830d6:	4a04      	ldr	r2, [pc, #16]	; (830e8 <udd_test_mode_k+0x30>)
   830d8:	f043 0308 	orr.w	r3, r3, #8
   830dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   830e0:	bf00      	nop
   830e2:	46bd      	mov	sp, r7
   830e4:	bc80      	pop	{r7}
   830e6:	4770      	bx	lr
   830e8:	400a4000 	.word	0x400a4000

000830ec <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   830ec:	b480      	push	{r7}
   830ee:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   830f0:	4b06      	ldr	r3, [pc, #24]	; (8310c <udd_test_mode_se0_nak+0x20>)
   830f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   830f6:	f023 0303 	bic.w	r3, r3, #3
   830fa:	4a04      	ldr	r2, [pc, #16]	; (8310c <udd_test_mode_se0_nak+0x20>)
   830fc:	f043 0302 	orr.w	r3, r3, #2
   83100:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   83104:	bf00      	nop
   83106:	46bd      	mov	sp, r7
   83108:	bc80      	pop	{r7}
   8310a:	4770      	bx	lr
   8310c:	400a4000 	.word	0x400a4000

00083110 <udd_test_mode_packet>:

>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

void udd_test_mode_packet(void)
{
<<<<<<< HEAD
   8355c:	b590      	push	{r4, r7, lr}
   8355e:	b083      	sub	sp, #12
   83560:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83562:	4816      	ldr	r0, [pc, #88]	; (835bc <sysclk_init+0x60>)
   83564:	4b16      	ldr	r3, [pc, #88]	; (835c0 <sysclk_init+0x64>)
   83566:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83568:	2006      	movs	r0, #6
   8356a:	4b16      	ldr	r3, [pc, #88]	; (835c4 <sysclk_init+0x68>)
   8356c:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   8356e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   83572:	4b15      	ldr	r3, [pc, #84]	; (835c8 <sysclk_init+0x6c>)
   83574:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   83576:	bf00      	nop
   83578:	4b14      	ldr	r3, [pc, #80]	; (835cc <sysclk_init+0x70>)
   8357a:	4798      	blx	r3
   8357c:	4603      	mov	r3, r0
   8357e:	2b00      	cmp	r3, #0
   83580:	d0fa      	beq.n	83578 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   83582:	1d38      	adds	r0, r7, #4
   83584:	2310      	movs	r3, #16
   83586:	2201      	movs	r2, #1
   83588:	2106      	movs	r1, #6
   8358a:	4c11      	ldr	r4, [pc, #68]	; (835d0 <sysclk_init+0x74>)
   8358c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8358e:	1d3b      	adds	r3, r7, #4
   83590:	2100      	movs	r1, #0
   83592:	4618      	mov	r0, r3
   83594:	4b0f      	ldr	r3, [pc, #60]	; (835d4 <sysclk_init+0x78>)
   83596:	4798      	blx	r3
		pll_wait_for_lock(0);
   83598:	2000      	movs	r0, #0
   8359a:	4b0f      	ldr	r3, [pc, #60]	; (835d8 <sysclk_init+0x7c>)
   8359c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8359e:	2010      	movs	r0, #16
   835a0:	4b0e      	ldr	r3, [pc, #56]	; (835dc <sysclk_init+0x80>)
   835a2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   835a4:	4b0e      	ldr	r3, [pc, #56]	; (835e0 <sysclk_init+0x84>)
   835a6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   835a8:	4b0e      	ldr	r3, [pc, #56]	; (835e4 <sysclk_init+0x88>)
   835aa:	4798      	blx	r3
   835ac:	4603      	mov	r3, r0
   835ae:	4618      	mov	r0, r3
   835b0:	4b03      	ldr	r3, [pc, #12]	; (835c0 <sysclk_init+0x64>)
   835b2:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   835b4:	bf00      	nop
   835b6:	370c      	adds	r7, #12
   835b8:	46bd      	mov	sp, r7
   835ba:	bd90      	pop	{r4, r7, pc}
   835bc:	05b8d800 	.word	0x05b8d800
   835c0:	200001bd 	.word	0x200001bd
   835c4:	00083495 	.word	0x00083495
   835c8:	00082939 	.word	0x00082939
   835cc:	00082921 	.word	0x00082921
   835d0:	000833bd 	.word	0x000833bd
   835d4:	00083429 	.word	0x00083429
   835d8:	000834cd 	.word	0x000834cd
   835dc:	0008270d 	.word	0x0008270d
   835e0:	000835e9 	.word	0x000835e9
   835e4:	00083509 	.word	0x00083509

000835e8 <SystemCoreClockUpdate>:
=======
   83110:	b4b0      	push	{r4, r5, r7}
   83112:	b093      	sub	sp, #76	; 0x4c
   83114:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   83116:	4b2e      	ldr	r3, [pc, #184]	; (831d0 <udd_test_mode_packet+0xc0>)
   83118:	1d3c      	adds	r4, r7, #4
   8311a:	461d      	mov	r5, r3
   8311c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8311e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83128:	e895 0003 	ldmia.w	r5, {r0, r1}
   8312c:	6020      	str	r0, [r4, #0]
   8312e:	3404      	adds	r4, #4
   83130:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   83132:	4b28      	ldr	r3, [pc, #160]	; (831d4 <udd_test_mode_packet+0xc4>)
   83134:	2201      	movs	r2, #1
   83136:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   8313a:	4b26      	ldr	r3, [pc, #152]	; (831d4 <udd_test_mode_packet+0xc4>)
   8313c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   83140:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   83144:	f023 0303 	bic.w	r3, r3, #3
   83148:	4a22      	ldr	r2, [pc, #136]	; (831d4 <udd_test_mode_packet+0xc4>)
   8314a:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   8314e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   83152:	4b20      	ldr	r3, [pc, #128]	; (831d4 <udd_test_mode_packet+0xc4>)
   83154:	2201      	movs	r2, #1
   83156:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   8315a:	4b1e      	ldr	r3, [pc, #120]	; (831d4 <udd_test_mode_packet+0xc4>)
   8315c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83160:	f023 0303 	bic.w	r3, r3, #3
   83164:	4a1b      	ldr	r2, [pc, #108]	; (831d4 <udd_test_mode_packet+0xc4>)
   83166:	f043 0302 	orr.w	r3, r3, #2
   8316a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   8316e:	4b19      	ldr	r3, [pc, #100]	; (831d4 <udd_test_mode_packet+0xc4>)
   83170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83174:	4a17      	ldr	r2, [pc, #92]	; (831d4 <udd_test_mode_packet+0xc4>)
   83176:	f043 0310 	orr.w	r3, r3, #16
   8317a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8317e:	4b16      	ldr	r3, [pc, #88]	; (831d8 <udd_test_mode_packet+0xc8>)
   83180:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   83182:	1d3b      	adds	r3, r7, #4
   83184:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   83186:	2300      	movs	r3, #0
   83188:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   8318c:	e00c      	b.n	831a8 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   8318e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   83190:	1c53      	adds	r3, r2, #1
   83192:	63fb      	str	r3, [r7, #60]	; 0x3c
   83194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   83196:	1c59      	adds	r1, r3, #1
   83198:	6439      	str	r1, [r7, #64]	; 0x40
   8319a:	7812      	ldrb	r2, [r2, #0]
   8319c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   8319e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   831a2:	3301      	adds	r3, #1
   831a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   831a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   831ac:	2b34      	cmp	r3, #52	; 0x34
   831ae:	d9ee      	bls.n	8318e <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   831b0:	4b08      	ldr	r3, [pc, #32]	; (831d4 <udd_test_mode_packet+0xc4>)
   831b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   831b6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   831ba:	4b06      	ldr	r3, [pc, #24]	; (831d4 <udd_test_mode_packet+0xc4>)
   831bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   831c0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   831c4:	bf00      	nop
   831c6:	374c      	adds	r7, #76	; 0x4c
   831c8:	46bd      	mov	sp, r7
   831ca:	bcb0      	pop	{r4, r5, r7}
   831cc:	4770      	bx	lr
   831ce:	bf00      	nop
   831d0:	0008d368 	.word	0x0008d368
   831d4:	400a4000 	.word	0x400a4000
   831d8:	20180000 	.word	0x20180000

000831dc <udd_reset_ep_ctrl>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
<<<<<<< HEAD
   835e8:	b480      	push	{r7}
   835ea:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   835ec:	4b58      	ldr	r3, [pc, #352]	; (83750 <SystemCoreClockUpdate+0x168>)
   835ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   835f0:	f003 0303 	and.w	r3, r3, #3
   835f4:	2b03      	cmp	r3, #3
   835f6:	f200 808c 	bhi.w	83712 <SystemCoreClockUpdate+0x12a>
   835fa:	2b02      	cmp	r3, #2
   835fc:	d23f      	bcs.n	8367e <SystemCoreClockUpdate+0x96>
   835fe:	2b00      	cmp	r3, #0
   83600:	d002      	beq.n	83608 <SystemCoreClockUpdate+0x20>
   83602:	2b01      	cmp	r3, #1
   83604:	d010      	beq.n	83628 <SystemCoreClockUpdate+0x40>
   83606:	e084      	b.n	83712 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83608:	4b52      	ldr	r3, [pc, #328]	; (83754 <SystemCoreClockUpdate+0x16c>)
   8360a:	695b      	ldr	r3, [r3, #20]
   8360c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83610:	2b00      	cmp	r3, #0
   83612:	d004      	beq.n	8361e <SystemCoreClockUpdate+0x36>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83614:	4b50      	ldr	r3, [pc, #320]	; (83758 <SystemCoreClockUpdate+0x170>)
   83616:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8361a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   8361c:	e079      	b.n	83712 <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8361e:	4b4e      	ldr	r3, [pc, #312]	; (83758 <SystemCoreClockUpdate+0x170>)
   83620:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83624:	601a      	str	r2, [r3, #0]
		break;
   83626:	e074      	b.n	83712 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83628:	4b49      	ldr	r3, [pc, #292]	; (83750 <SystemCoreClockUpdate+0x168>)
   8362a:	6a1b      	ldr	r3, [r3, #32]
   8362c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83630:	2b00      	cmp	r3, #0
   83632:	d003      	beq.n	8363c <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83634:	4b48      	ldr	r3, [pc, #288]	; (83758 <SystemCoreClockUpdate+0x170>)
   83636:	4a49      	ldr	r2, [pc, #292]	; (8375c <SystemCoreClockUpdate+0x174>)
   83638:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   8363a:	e06a      	b.n	83712 <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8363c:	4b46      	ldr	r3, [pc, #280]	; (83758 <SystemCoreClockUpdate+0x170>)
   8363e:	4a48      	ldr	r2, [pc, #288]	; (83760 <SystemCoreClockUpdate+0x178>)
   83640:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83642:	4b43      	ldr	r3, [pc, #268]	; (83750 <SystemCoreClockUpdate+0x168>)
   83644:	6a1b      	ldr	r3, [r3, #32]
   83646:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8364a:	2b20      	cmp	r3, #32
   8364c:	d00b      	beq.n	83666 <SystemCoreClockUpdate+0x7e>
   8364e:	2b20      	cmp	r3, #32
   83650:	d811      	bhi.n	83676 <SystemCoreClockUpdate+0x8e>
   83652:	2b00      	cmp	r3, #0
   83654:	d011      	beq.n	8367a <SystemCoreClockUpdate+0x92>
   83656:	2b10      	cmp	r3, #16
   83658:	d10d      	bne.n	83676 <SystemCoreClockUpdate+0x8e>
				SystemCoreClock *= 2U;
   8365a:	4b3f      	ldr	r3, [pc, #252]	; (83758 <SystemCoreClockUpdate+0x170>)
   8365c:	681b      	ldr	r3, [r3, #0]
   8365e:	005b      	lsls	r3, r3, #1
   83660:	4a3d      	ldr	r2, [pc, #244]	; (83758 <SystemCoreClockUpdate+0x170>)
   83662:	6013      	str	r3, [r2, #0]
				break;
   83664:	e00a      	b.n	8367c <SystemCoreClockUpdate+0x94>
				SystemCoreClock *= 3U;
   83666:	4b3c      	ldr	r3, [pc, #240]	; (83758 <SystemCoreClockUpdate+0x170>)
   83668:	681a      	ldr	r2, [r3, #0]
   8366a:	4613      	mov	r3, r2
   8366c:	005b      	lsls	r3, r3, #1
   8366e:	4413      	add	r3, r2
   83670:	4a39      	ldr	r2, [pc, #228]	; (83758 <SystemCoreClockUpdate+0x170>)
   83672:	6013      	str	r3, [r2, #0]
				break;
   83674:	e002      	b.n	8367c <SystemCoreClockUpdate+0x94>
				break;
   83676:	bf00      	nop
   83678:	e04b      	b.n	83712 <SystemCoreClockUpdate+0x12a>
				break;
   8367a:	bf00      	nop
		break;
   8367c:	e049      	b.n	83712 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8367e:	4b34      	ldr	r3, [pc, #208]	; (83750 <SystemCoreClockUpdate+0x168>)
   83680:	6a1b      	ldr	r3, [r3, #32]
   83682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83686:	2b00      	cmp	r3, #0
   83688:	d003      	beq.n	83692 <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8368a:	4b33      	ldr	r3, [pc, #204]	; (83758 <SystemCoreClockUpdate+0x170>)
   8368c:	4a33      	ldr	r2, [pc, #204]	; (8375c <SystemCoreClockUpdate+0x174>)
   8368e:	601a      	str	r2, [r3, #0]
   83690:	e01f      	b.n	836d2 <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83692:	4b31      	ldr	r3, [pc, #196]	; (83758 <SystemCoreClockUpdate+0x170>)
   83694:	4a32      	ldr	r2, [pc, #200]	; (83760 <SystemCoreClockUpdate+0x178>)
   83696:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83698:	4b2d      	ldr	r3, [pc, #180]	; (83750 <SystemCoreClockUpdate+0x168>)
   8369a:	6a1b      	ldr	r3, [r3, #32]
   8369c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   836a0:	2b20      	cmp	r3, #32
   836a2:	d00b      	beq.n	836bc <SystemCoreClockUpdate+0xd4>
   836a4:	2b20      	cmp	r3, #32
   836a6:	d811      	bhi.n	836cc <SystemCoreClockUpdate+0xe4>
   836a8:	2b00      	cmp	r3, #0
   836aa:	d011      	beq.n	836d0 <SystemCoreClockUpdate+0xe8>
   836ac:	2b10      	cmp	r3, #16
   836ae:	d10d      	bne.n	836cc <SystemCoreClockUpdate+0xe4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   836b0:	4b29      	ldr	r3, [pc, #164]	; (83758 <SystemCoreClockUpdate+0x170>)
   836b2:	681b      	ldr	r3, [r3, #0]
   836b4:	005b      	lsls	r3, r3, #1
   836b6:	4a28      	ldr	r2, [pc, #160]	; (83758 <SystemCoreClockUpdate+0x170>)
   836b8:	6013      	str	r3, [r2, #0]
				break;
   836ba:	e00a      	b.n	836d2 <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   836bc:	4b26      	ldr	r3, [pc, #152]	; (83758 <SystemCoreClockUpdate+0x170>)
   836be:	681a      	ldr	r2, [r3, #0]
   836c0:	4613      	mov	r3, r2
   836c2:	005b      	lsls	r3, r3, #1
   836c4:	4413      	add	r3, r2
   836c6:	4a24      	ldr	r2, [pc, #144]	; (83758 <SystemCoreClockUpdate+0x170>)
   836c8:	6013      	str	r3, [r2, #0]
				break;
   836ca:	e002      	b.n	836d2 <SystemCoreClockUpdate+0xea>
			default:
				break;
   836cc:	bf00      	nop
   836ce:	e000      	b.n	836d2 <SystemCoreClockUpdate+0xea>
				break;
   836d0:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   836d2:	4b1f      	ldr	r3, [pc, #124]	; (83750 <SystemCoreClockUpdate+0x168>)
   836d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   836d6:	f003 0303 	and.w	r3, r3, #3
   836da:	2b02      	cmp	r3, #2
   836dc:	d115      	bne.n	8370a <SystemCoreClockUpdate+0x122>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   836de:	4b1c      	ldr	r3, [pc, #112]	; (83750 <SystemCoreClockUpdate+0x168>)
   836e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   836e2:	0c1b      	lsrs	r3, r3, #16
   836e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   836e8:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   836ea:	4a1b      	ldr	r2, [pc, #108]	; (83758 <SystemCoreClockUpdate+0x170>)
   836ec:	6812      	ldr	r2, [r2, #0]
   836ee:	fb02 f303 	mul.w	r3, r2, r3
   836f2:	4a19      	ldr	r2, [pc, #100]	; (83758 <SystemCoreClockUpdate+0x170>)
   836f4:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   836f6:	4b16      	ldr	r3, [pc, #88]	; (83750 <SystemCoreClockUpdate+0x168>)
   836f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   836fa:	b2db      	uxtb	r3, r3
   836fc:	4a16      	ldr	r2, [pc, #88]	; (83758 <SystemCoreClockUpdate+0x170>)
   836fe:	6812      	ldr	r2, [r2, #0]
   83700:	fbb2 f3f3 	udiv	r3, r2, r3
   83704:	4a14      	ldr	r2, [pc, #80]	; (83758 <SystemCoreClockUpdate+0x170>)
   83706:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   83708:	e002      	b.n	83710 <SystemCoreClockUpdate+0x128>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8370a:	4b13      	ldr	r3, [pc, #76]	; (83758 <SystemCoreClockUpdate+0x170>)
   8370c:	4a15      	ldr	r2, [pc, #84]	; (83764 <SystemCoreClockUpdate+0x17c>)
   8370e:	601a      	str	r2, [r3, #0]
		break;
   83710:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83712:	4b0f      	ldr	r3, [pc, #60]	; (83750 <SystemCoreClockUpdate+0x168>)
   83714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83716:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8371a:	2b70      	cmp	r3, #112	; 0x70
   8371c:	d108      	bne.n	83730 <SystemCoreClockUpdate+0x148>
		SystemCoreClock /= 3U;
   8371e:	4b0e      	ldr	r3, [pc, #56]	; (83758 <SystemCoreClockUpdate+0x170>)
   83720:	681b      	ldr	r3, [r3, #0]
   83722:	4a11      	ldr	r2, [pc, #68]	; (83768 <SystemCoreClockUpdate+0x180>)
   83724:	fba2 2303 	umull	r2, r3, r2, r3
   83728:	085b      	lsrs	r3, r3, #1
   8372a:	4a0b      	ldr	r2, [pc, #44]	; (83758 <SystemCoreClockUpdate+0x170>)
   8372c:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   8372e:	e00a      	b.n	83746 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83730:	4b07      	ldr	r3, [pc, #28]	; (83750 <SystemCoreClockUpdate+0x168>)
   83732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83734:	091b      	lsrs	r3, r3, #4
   83736:	f003 0307 	and.w	r3, r3, #7
   8373a:	4a07      	ldr	r2, [pc, #28]	; (83758 <SystemCoreClockUpdate+0x170>)
   8373c:	6812      	ldr	r2, [r2, #0]
   8373e:	fa22 f303 	lsr.w	r3, r2, r3
   83742:	4a05      	ldr	r2, [pc, #20]	; (83758 <SystemCoreClockUpdate+0x170>)
   83744:	6013      	str	r3, [r2, #0]
}
   83746:	bf00      	nop
   83748:	46bd      	mov	sp, r7
   8374a:	bc80      	pop	{r7}
   8374c:	4770      	bx	lr
   8374e:	bf00      	nop
   83750:	400e0400 	.word	0x400e0400
   83754:	400e1210 	.word	0x400e1210
   83758:	20000288 	.word	0x20000288
   8375c:	00b71b00 	.word	0x00b71b00
   83760:	003d0900 	.word	0x003d0900
   83764:	0e4e1c00 	.word	0x0e4e1c00
   83768:	aaaaaaab 	.word	0xaaaaaaab

0008376c <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   8376c:	b480      	push	{r7}
   8376e:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   83770:	4b02      	ldr	r3, [pc, #8]	; (8377c <udc_get_string_serial_name+0x10>)
	}
   83772:	4618      	mov	r0, r3
   83774:	46bd      	mov	sp, r7
   83776:	bc80      	pop	{r7}
   83778:	4770      	bx	lr
   8377a:	bf00      	nop
   8377c:	2000025c 	.word	0x2000025c

00083780 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   83780:	b480      	push	{r7}
   83782:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   83784:	4b02      	ldr	r3, [pc, #8]	; (83790 <udc_get_interface_desc+0x10>)
   83786:	681b      	ldr	r3, [r3, #0]
}
   83788:	4618      	mov	r0, r3
   8378a:	46bd      	mov	sp, r7
   8378c:	bc80      	pop	{r7}
   8378e:	4770      	bx	lr
   83790:	2000133c 	.word	0x2000133c

00083794 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   83794:	b480      	push	{r7}
   83796:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   83798:	4b06      	ldr	r3, [pc, #24]	; (837b4 <udc_get_eof_conf+0x20>)
   8379a:	681b      	ldr	r3, [r3, #0]
   8379c:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8379e:	4a05      	ldr	r2, [pc, #20]	; (837b4 <udc_get_eof_conf+0x20>)
   837a0:	6812      	ldr	r2, [r2, #0]
   837a2:	6812      	ldr	r2, [r2, #0]
   837a4:	8852      	ldrh	r2, [r2, #2]
   837a6:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   837a8:	4413      	add	r3, r2
}
   837aa:	4618      	mov	r0, r3
   837ac:	46bd      	mov	sp, r7
   837ae:	bc80      	pop	{r7}
   837b0:	4770      	bx	lr
   837b2:	bf00      	nop
   837b4:	20001338 	.word	0x20001338

000837b8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   837b8:	b580      	push	{r7, lr}
   837ba:	b084      	sub	sp, #16
   837bc:	af00      	add	r7, sp, #0
   837be:	6078      	str	r0, [r7, #4]
   837c0:	460b      	mov	r3, r1
   837c2:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   837c4:	4b12      	ldr	r3, [pc, #72]	; (83810 <udc_next_desc_in_iface+0x58>)
   837c6:	4798      	blx	r3
   837c8:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   837ca:	687b      	ldr	r3, [r7, #4]
   837cc:	781b      	ldrb	r3, [r3, #0]
   837ce:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   837d0:	687b      	ldr	r3, [r7, #4]
   837d2:	4413      	add	r3, r2
   837d4:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   837d6:	e010      	b.n	837fa <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   837d8:	687b      	ldr	r3, [r7, #4]
   837da:	785b      	ldrb	r3, [r3, #1]
   837dc:	2b04      	cmp	r3, #4
   837de:	d011      	beq.n	83804 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   837e0:	687b      	ldr	r3, [r7, #4]
   837e2:	785b      	ldrb	r3, [r3, #1]
   837e4:	78fa      	ldrb	r2, [r7, #3]
   837e6:	429a      	cmp	r2, r3
   837e8:	d101      	bne.n	837ee <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   837ea:	687b      	ldr	r3, [r7, #4]
   837ec:	e00c      	b.n	83808 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   837ee:	687b      	ldr	r3, [r7, #4]
   837f0:	781b      	ldrb	r3, [r3, #0]
   837f2:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   837f4:	687b      	ldr	r3, [r7, #4]
   837f6:	4413      	add	r3, r2
   837f8:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   837fa:	68fa      	ldr	r2, [r7, #12]
   837fc:	687b      	ldr	r3, [r7, #4]
   837fe:	429a      	cmp	r2, r3
   83800:	d8ea      	bhi.n	837d8 <udc_next_desc_in_iface+0x20>
   83802:	e000      	b.n	83806 <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   83804:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   83806:	2300      	movs	r3, #0
}
   83808:	4618      	mov	r0, r3
   8380a:	3710      	adds	r7, #16
   8380c:	46bd      	mov	sp, r7
   8380e:	bd80      	pop	{r7, pc}
   83810:	00083795 	.word	0x00083795

00083814 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   83814:	b580      	push	{r7, lr}
   83816:	b084      	sub	sp, #16
   83818:	af00      	add	r7, sp, #0
   8381a:	4603      	mov	r3, r0
   8381c:	460a      	mov	r2, r1
   8381e:	71fb      	strb	r3, [r7, #7]
   83820:	4613      	mov	r3, r2
   83822:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   83824:	4b1e      	ldr	r3, [pc, #120]	; (838a0 <udc_update_iface_desc+0x8c>)
   83826:	781b      	ldrb	r3, [r3, #0]
   83828:	2b00      	cmp	r3, #0
   8382a:	d101      	bne.n	83830 <udc_update_iface_desc+0x1c>
		return false;
   8382c:	2300      	movs	r3, #0
   8382e:	e032      	b.n	83896 <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83830:	4b1c      	ldr	r3, [pc, #112]	; (838a4 <udc_update_iface_desc+0x90>)
   83832:	681b      	ldr	r3, [r3, #0]
   83834:	681b      	ldr	r3, [r3, #0]
   83836:	791b      	ldrb	r3, [r3, #4]
   83838:	79fa      	ldrb	r2, [r7, #7]
   8383a:	429a      	cmp	r2, r3
   8383c:	d301      	bcc.n	83842 <udc_update_iface_desc+0x2e>
		return false;
   8383e:	2300      	movs	r3, #0
   83840:	e029      	b.n	83896 <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   83842:	4b18      	ldr	r3, [pc, #96]	; (838a4 <udc_update_iface_desc+0x90>)
   83844:	681b      	ldr	r3, [r3, #0]
   83846:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   83848:	4a17      	ldr	r2, [pc, #92]	; (838a8 <udc_update_iface_desc+0x94>)
   8384a:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   8384c:	4b17      	ldr	r3, [pc, #92]	; (838ac <udc_update_iface_desc+0x98>)
   8384e:	4798      	blx	r3
   83850:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   83852:	e01a      	b.n	8388a <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   83854:	4b14      	ldr	r3, [pc, #80]	; (838a8 <udc_update_iface_desc+0x94>)
   83856:	681b      	ldr	r3, [r3, #0]
   83858:	785b      	ldrb	r3, [r3, #1]
   8385a:	2b04      	cmp	r3, #4
   8385c:	d10d      	bne.n	8387a <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   8385e:	4b12      	ldr	r3, [pc, #72]	; (838a8 <udc_update_iface_desc+0x94>)
   83860:	681b      	ldr	r3, [r3, #0]
   83862:	789b      	ldrb	r3, [r3, #2]
   83864:	79fa      	ldrb	r2, [r7, #7]
   83866:	429a      	cmp	r2, r3
   83868:	d107      	bne.n	8387a <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   8386a:	4b0f      	ldr	r3, [pc, #60]	; (838a8 <udc_update_iface_desc+0x94>)
   8386c:	681b      	ldr	r3, [r3, #0]
   8386e:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   83870:	79ba      	ldrb	r2, [r7, #6]
   83872:	429a      	cmp	r2, r3
   83874:	d101      	bne.n	8387a <udc_update_iface_desc+0x66>
				return true; // Interface found
   83876:	2301      	movs	r3, #1
   83878:	e00d      	b.n	83896 <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   8387a:	4b0b      	ldr	r3, [pc, #44]	; (838a8 <udc_update_iface_desc+0x94>)
   8387c:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   8387e:	4a0a      	ldr	r2, [pc, #40]	; (838a8 <udc_update_iface_desc+0x94>)
   83880:	6812      	ldr	r2, [r2, #0]
   83882:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   83884:	4413      	add	r3, r2
   83886:	4a08      	ldr	r2, [pc, #32]	; (838a8 <udc_update_iface_desc+0x94>)
   83888:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   8388a:	4b07      	ldr	r3, [pc, #28]	; (838a8 <udc_update_iface_desc+0x94>)
   8388c:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   8388e:	68fa      	ldr	r2, [r7, #12]
   83890:	429a      	cmp	r2, r3
   83892:	d8df      	bhi.n	83854 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   83894:	2300      	movs	r3, #0
}
   83896:	4618      	mov	r0, r3
   83898:	3710      	adds	r7, #16
   8389a:	46bd      	mov	sp, r7
   8389c:	bd80      	pop	{r7, pc}
   8389e:	bf00      	nop
   838a0:	20001336 	.word	0x20001336
   838a4:	20001338 	.word	0x20001338
   838a8:	2000133c 	.word	0x2000133c
   838ac:	00083795 	.word	0x00083795

000838b0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   838b0:	b580      	push	{r7, lr}
   838b2:	b084      	sub	sp, #16
   838b4:	af00      	add	r7, sp, #0
   838b6:	4603      	mov	r3, r0
   838b8:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   838ba:	79fb      	ldrb	r3, [r7, #7]
   838bc:	2100      	movs	r1, #0
   838be:	4618      	mov	r0, r3
   838c0:	4b1e      	ldr	r3, [pc, #120]	; (8393c <udc_iface_disable+0x8c>)
   838c2:	4798      	blx	r3
   838c4:	4603      	mov	r3, r0
   838c6:	f083 0301 	eor.w	r3, r3, #1
   838ca:	b2db      	uxtb	r3, r3
   838cc:	2b00      	cmp	r3, #0
   838ce:	d001      	beq.n	838d4 <udc_iface_disable+0x24>
		return false;
   838d0:	2300      	movs	r3, #0
   838d2:	e02f      	b.n	83934 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   838d4:	4b1a      	ldr	r3, [pc, #104]	; (83940 <udc_iface_disable+0x90>)
   838d6:	681b      	ldr	r3, [r3, #0]
   838d8:	685a      	ldr	r2, [r3, #4]
   838da:	79fb      	ldrb	r3, [r7, #7]
   838dc:	009b      	lsls	r3, r3, #2
   838de:	4413      	add	r3, r2
   838e0:	681b      	ldr	r3, [r3, #0]
   838e2:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   838e4:	68bb      	ldr	r3, [r7, #8]
   838e6:	68db      	ldr	r3, [r3, #12]
   838e8:	4798      	blx	r3
   838ea:	4603      	mov	r3, r0
   838ec:	461a      	mov	r2, r3
   838ee:	79fb      	ldrb	r3, [r7, #7]
   838f0:	4611      	mov	r1, r2
   838f2:	4618      	mov	r0, r3
   838f4:	4b11      	ldr	r3, [pc, #68]	; (8393c <udc_iface_disable+0x8c>)
   838f6:	4798      	blx	r3
   838f8:	4603      	mov	r3, r0
   838fa:	f083 0301 	eor.w	r3, r3, #1
   838fe:	b2db      	uxtb	r3, r3
   83900:	2b00      	cmp	r3, #0
   83902:	d001      	beq.n	83908 <udc_iface_disable+0x58>
		return false;
   83904:	2300      	movs	r3, #0
   83906:	e015      	b.n	83934 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   83908:	4b0e      	ldr	r3, [pc, #56]	; (83944 <udc_iface_disable+0x94>)
   8390a:	681b      	ldr	r3, [r3, #0]
   8390c:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   8390e:	2105      	movs	r1, #5
   83910:	68f8      	ldr	r0, [r7, #12]
   83912:	4b0d      	ldr	r3, [pc, #52]	; (83948 <udc_iface_disable+0x98>)
   83914:	4798      	blx	r3
   83916:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   83918:	68fb      	ldr	r3, [r7, #12]
   8391a:	2b00      	cmp	r3, #0
   8391c:	d005      	beq.n	8392a <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   8391e:	68fb      	ldr	r3, [r7, #12]
   83920:	789b      	ldrb	r3, [r3, #2]
   83922:	4618      	mov	r0, r3
   83924:	4b09      	ldr	r3, [pc, #36]	; (8394c <udc_iface_disable+0x9c>)
   83926:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   83928:	e7f1      	b.n	8390e <udc_iface_disable+0x5e>
				break;
   8392a:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   8392c:	68bb      	ldr	r3, [r7, #8]
   8392e:	685b      	ldr	r3, [r3, #4]
   83930:	4798      	blx	r3
	return true;
   83932:	2301      	movs	r3, #1
}
   83934:	4618      	mov	r0, r3
   83936:	3710      	adds	r7, #16
   83938:	46bd      	mov	sp, r7
   8393a:	bd80      	pop	{r7, pc}
   8393c:	00083815 	.word	0x00083815
   83940:	20001338 	.word	0x20001338
   83944:	2000133c 	.word	0x2000133c
   83948:	000837b9 	.word	0x000837b9
   8394c:	0008501d 	.word	0x0008501d

00083950 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   83950:	b580      	push	{r7, lr}
   83952:	b084      	sub	sp, #16
   83954:	af00      	add	r7, sp, #0
   83956:	4603      	mov	r3, r0
   83958:	460a      	mov	r2, r1
   8395a:	71fb      	strb	r3, [r7, #7]
   8395c:	4613      	mov	r3, r2
   8395e:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   83960:	79ba      	ldrb	r2, [r7, #6]
   83962:	79fb      	ldrb	r3, [r7, #7]
   83964:	4611      	mov	r1, r2
   83966:	4618      	mov	r0, r3
   83968:	4b1a      	ldr	r3, [pc, #104]	; (839d4 <udc_iface_enable+0x84>)
   8396a:	4798      	blx	r3
   8396c:	4603      	mov	r3, r0
   8396e:	f083 0301 	eor.w	r3, r3, #1
   83972:	b2db      	uxtb	r3, r3
   83974:	2b00      	cmp	r3, #0
   83976:	d001      	beq.n	8397c <udc_iface_enable+0x2c>
		return false;
   83978:	2300      	movs	r3, #0
   8397a:	e027      	b.n	839cc <udc_iface_enable+0x7c>
=======
   831dc:	b580      	push	{r7, lr}
   831de:	b082      	sub	sp, #8
   831e0:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   831e2:	4b1b      	ldr	r3, [pc, #108]	; (83250 <udd_reset_ep_ctrl+0x74>)
   831e4:	681b      	ldr	r3, [r3, #0]
   831e6:	4a1a      	ldr	r2, [pc, #104]	; (83250 <udd_reset_ep_ctrl+0x74>)
   831e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   831ec:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   831ee:	4b18      	ldr	r3, [pc, #96]	; (83250 <udd_reset_ep_ctrl+0x74>)
   831f0:	681b      	ldr	r3, [r3, #0]
   831f2:	4a17      	ldr	r2, [pc, #92]	; (83250 <udd_reset_ep_ctrl+0x74>)
   831f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   831f8:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   831fa:	4b15      	ldr	r3, [pc, #84]	; (83250 <udd_reset_ep_ctrl+0x74>)
   831fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   83200:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   83204:	f023 0303 	bic.w	r3, r3, #3
   83208:	4a11      	ldr	r2, [pc, #68]	; (83250 <udd_reset_ep_ctrl+0x74>)
   8320a:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   8320e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   83212:	4b0f      	ldr	r3, [pc, #60]	; (83250 <udd_reset_ep_ctrl+0x74>)
   83214:	2201      	movs	r2, #1
   83216:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   8321a:	4b0e      	ldr	r3, [pc, #56]	; (83254 <udd_reset_ep_ctrl+0x78>)
   8321c:	4798      	blx	r3
   8321e:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   83220:	4b0b      	ldr	r3, [pc, #44]	; (83250 <udd_reset_ep_ctrl+0x74>)
   83222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   83226:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   8322a:	4b09      	ldr	r3, [pc, #36]	; (83250 <udd_reset_ep_ctrl+0x74>)
   8322c:	f44f 7200 	mov.w	r2, #512	; 0x200
   83230:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   83234:	4b06      	ldr	r3, [pc, #24]	; (83250 <udd_reset_ep_ctrl+0x74>)
   83236:	691b      	ldr	r3, [r3, #16]
   83238:	4a05      	ldr	r2, [pc, #20]	; (83250 <udd_reset_ep_ctrl+0x74>)
   8323a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8323e:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   83240:	6878      	ldr	r0, [r7, #4]
   83242:	4b05      	ldr	r3, [pc, #20]	; (83258 <udd_reset_ep_ctrl+0x7c>)
   83244:	4798      	blx	r3
}
   83246:	bf00      	nop
   83248:	3708      	adds	r7, #8
   8324a:	46bd      	mov	sp, r7
   8324c:	bd80      	pop	{r7, pc}
   8324e:	bf00      	nop
   83250:	400a4000 	.word	0x400a4000
   83254:	000822b1 	.word	0x000822b1
   83258:	0008230d 	.word	0x0008230d

0008325c <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   8325c:	b580      	push	{r7, lr}
   8325e:	b082      	sub	sp, #8
   83260:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   83262:	4b10      	ldr	r3, [pc, #64]	; (832a4 <udd_ctrl_init+0x48>)
   83264:	4798      	blx	r3
   83266:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   83268:	4b0f      	ldr	r3, [pc, #60]	; (832a8 <udd_ctrl_init+0x4c>)
   8326a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8326e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   83272:	6878      	ldr	r0, [r7, #4]
   83274:	4b0d      	ldr	r3, [pc, #52]	; (832ac <udd_ctrl_init+0x50>)
   83276:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   83278:	4b0b      	ldr	r3, [pc, #44]	; (832a8 <udd_ctrl_init+0x4c>)
   8327a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8327e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   83282:	4b0b      	ldr	r3, [pc, #44]	; (832b0 <udd_ctrl_init+0x54>)
   83284:	2200      	movs	r2, #0
   83286:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   83288:	4b09      	ldr	r3, [pc, #36]	; (832b0 <udd_ctrl_init+0x54>)
   8328a:	2200      	movs	r2, #0
   8328c:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   8328e:	4b08      	ldr	r3, [pc, #32]	; (832b0 <udd_ctrl_init+0x54>)
   83290:	2200      	movs	r2, #0
   83292:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   83294:	4b07      	ldr	r3, [pc, #28]	; (832b4 <udd_ctrl_init+0x58>)
   83296:	2200      	movs	r2, #0
   83298:	701a      	strb	r2, [r3, #0]
}
   8329a:	bf00      	nop
   8329c:	3708      	adds	r7, #8
   8329e:	46bd      	mov	sp, r7
   832a0:	bd80      	pop	{r7, pc}
   832a2:	bf00      	nop
   832a4:	000822b1 	.word	0x000822b1
   832a8:	400a4000 	.word	0x400a4000
   832ac:	0008230d 	.word	0x0008230d
   832b0:	20001810 	.word	0x20001810
   832b4:	20001321 	.word	0x20001321

000832b8 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   832b8:	b580      	push	{r7, lr}
   832ba:	b084      	sub	sp, #16
   832bc:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   832be:	4b40      	ldr	r3, [pc, #256]	; (833c0 <udd_ctrl_setup_received+0x108>)
   832c0:	781b      	ldrb	r3, [r3, #0]
   832c2:	2b00      	cmp	r3, #0
   832c4:	d003      	beq.n	832ce <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   832c6:	4b3f      	ldr	r3, [pc, #252]	; (833c4 <udd_ctrl_setup_received+0x10c>)
   832c8:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   832ca:	4b3f      	ldr	r3, [pc, #252]	; (833c8 <udd_ctrl_setup_received+0x110>)
   832cc:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   832ce:	4b3f      	ldr	r3, [pc, #252]	; (833cc <udd_ctrl_setup_received+0x114>)
   832d0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   832d4:	0d1b      	lsrs	r3, r3, #20
   832d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
   832da:	2b08      	cmp	r3, #8
   832dc:	d007      	beq.n	832ee <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   832de:	4b3c      	ldr	r3, [pc, #240]	; (833d0 <udd_ctrl_setup_received+0x118>)
   832e0:	4798      	blx	r3
		udd_ack_setup_received(0);
   832e2:	4b3a      	ldr	r3, [pc, #232]	; (833cc <udd_ctrl_setup_received+0x114>)
   832e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   832e8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   832ec:	e064      	b.n	833b8 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   832ee:	4b39      	ldr	r3, [pc, #228]	; (833d4 <udd_ctrl_setup_received+0x11c>)
   832f0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   832f2:	2300      	movs	r3, #0
   832f4:	73fb      	strb	r3, [r7, #15]
   832f6:	e00a      	b.n	8330e <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   832f8:	68bb      	ldr	r3, [r7, #8]
   832fa:	1c5a      	adds	r2, r3, #1
   832fc:	60ba      	str	r2, [r7, #8]
   832fe:	7bfa      	ldrb	r2, [r7, #15]
   83300:	4935      	ldr	r1, [pc, #212]	; (833d8 <udd_ctrl_setup_received+0x120>)
   83302:	440a      	add	r2, r1
   83304:	781b      	ldrb	r3, [r3, #0]
   83306:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   83308:	7bfb      	ldrb	r3, [r7, #15]
   8330a:	3301      	adds	r3, #1
   8330c:	73fb      	strb	r3, [r7, #15]
   8330e:	7bfb      	ldrb	r3, [r7, #15]
   83310:	2b07      	cmp	r3, #7
   83312:	d9f1      	bls.n	832f8 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   83314:	4b30      	ldr	r3, [pc, #192]	; (833d8 <udd_ctrl_setup_received+0x120>)
   83316:	885a      	ldrh	r2, [r3, #2]
   83318:	4b2f      	ldr	r3, [pc, #188]	; (833d8 <udd_ctrl_setup_received+0x120>)
   8331a:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   8331c:	4b2e      	ldr	r3, [pc, #184]	; (833d8 <udd_ctrl_setup_received+0x120>)
   8331e:	889a      	ldrh	r2, [r3, #4]
   83320:	4b2d      	ldr	r3, [pc, #180]	; (833d8 <udd_ctrl_setup_received+0x120>)
   83322:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   83324:	4b2c      	ldr	r3, [pc, #176]	; (833d8 <udd_ctrl_setup_received+0x120>)
   83326:	88da      	ldrh	r2, [r3, #6]
   83328:	4b2b      	ldr	r3, [pc, #172]	; (833d8 <udd_ctrl_setup_received+0x120>)
   8332a:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	// Decode setup request
	if (udc_process_setup() == false) {
   8332c:	4b2b      	ldr	r3, [pc, #172]	; (833dc <udd_ctrl_setup_received+0x124>)
   8332e:	4798      	blx	r3
   83330:	4603      	mov	r3, r0
   83332:	f083 0301 	eor.w	r3, r3, #1
   83336:	b2db      	uxtb	r3, r3
   83338:	2b00      	cmp	r3, #0
   8333a:	d007      	beq.n	8334c <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   8333c:	4b24      	ldr	r3, [pc, #144]	; (833d0 <udd_ctrl_setup_received+0x118>)
   8333e:	4798      	blx	r3
		udd_ack_setup_received(0);
   83340:	4b22      	ldr	r3, [pc, #136]	; (833cc <udd_ctrl_setup_received+0x114>)
   83342:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   83346:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   8334a:	e035      	b.n	833b8 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   8334c:	4b1f      	ldr	r3, [pc, #124]	; (833cc <udd_ctrl_setup_received+0x114>)
   8334e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   83352:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

<<<<<<< HEAD
	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8397c:	4b16      	ldr	r3, [pc, #88]	; (839d8 <udc_iface_enable+0x88>)
   8397e:	681b      	ldr	r3, [r3, #0]
   83980:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   83982:	2105      	movs	r1, #5
   83984:	68f8      	ldr	r0, [r7, #12]
   83986:	4b15      	ldr	r3, [pc, #84]	; (839dc <udc_iface_enable+0x8c>)
   83988:	4798      	blx	r3
   8398a:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   8398c:	68fb      	ldr	r3, [r7, #12]
   8398e:	2b00      	cmp	r3, #0
   83990:	d011      	beq.n	839b6 <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   83992:	68fb      	ldr	r3, [r7, #12]
   83994:	7898      	ldrb	r0, [r3, #2]
   83996:	68fb      	ldr	r3, [r7, #12]
   83998:	78d9      	ldrb	r1, [r3, #3]
   8399a:	68fb      	ldr	r3, [r7, #12]
   8399c:	889b      	ldrh	r3, [r3, #4]
   8399e:	b29b      	uxth	r3, r3
   839a0:	461a      	mov	r2, r3
   839a2:	4b0f      	ldr	r3, [pc, #60]	; (839e0 <udc_iface_enable+0x90>)
   839a4:	4798      	blx	r3
   839a6:	4603      	mov	r3, r0
   839a8:	f083 0301 	eor.w	r3, r3, #1
   839ac:	b2db      	uxtb	r3, r3
   839ae:	2b00      	cmp	r3, #0
   839b0:	d0e7      	beq.n	83982 <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   839b2:	2300      	movs	r3, #0
   839b4:	e00a      	b.n	839cc <udc_iface_enable+0x7c>
			break;
   839b6:	bf00      	nop
=======
	if (Udd_setup_is_in()) {
   83356:	4b20      	ldr	r3, [pc, #128]	; (833d8 <udd_ctrl_setup_received+0x120>)
   83358:	781b      	ldrb	r3, [r3, #0]
   8335a:	b25b      	sxtb	r3, r3
   8335c:	2b00      	cmp	r3, #0
   8335e:	da0b      	bge.n	83378 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   83360:	4b1f      	ldr	r3, [pc, #124]	; (833e0 <udd_ctrl_setup_received+0x128>)
   83362:	2200      	movs	r2, #0
   83364:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   83366:	4b1f      	ldr	r3, [pc, #124]	; (833e4 <udd_ctrl_setup_received+0x12c>)
   83368:	2200      	movs	r2, #0
   8336a:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   8336c:	4b14      	ldr	r3, [pc, #80]	; (833c0 <udd_ctrl_setup_received+0x108>)
   8336e:	2202      	movs	r2, #2
   83370:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   83372:	4b1d      	ldr	r3, [pc, #116]	; (833e8 <udd_ctrl_setup_received+0x130>)
   83374:	4798      	blx	r3
   83376:	e01f      	b.n	833b8 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   83378:	4b17      	ldr	r3, [pc, #92]	; (833d8 <udd_ctrl_setup_received+0x120>)
   8337a:	88db      	ldrh	r3, [r3, #6]
   8337c:	2b00      	cmp	r3, #0
   8337e:	d102      	bne.n	83386 <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   83380:	4b1a      	ldr	r3, [pc, #104]	; (833ec <udd_ctrl_setup_received+0x134>)
   83382:	4798      	blx	r3
			return;
   83384:	e018      	b.n	833b8 <udd_ctrl_setup_received+0x100>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   83386:	4b16      	ldr	r3, [pc, #88]	; (833e0 <udd_ctrl_setup_received+0x128>)
   83388:	2200      	movs	r2, #0
   8338a:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8338c:	4b15      	ldr	r3, [pc, #84]	; (833e4 <udd_ctrl_setup_received+0x12c>)
   8338e:	2200      	movs	r2, #0
   83390:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   83392:	4b0b      	ldr	r3, [pc, #44]	; (833c0 <udd_ctrl_setup_received+0x108>)
   83394:	2201      	movs	r2, #1
   83396:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   83398:	4b0c      	ldr	r3, [pc, #48]	; (833cc <udd_ctrl_setup_received+0x114>)
   8339a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8339e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   833a2:	4b13      	ldr	r3, [pc, #76]	; (833f0 <udd_ctrl_setup_received+0x138>)
   833a4:	4798      	blx	r3
   833a6:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   833a8:	4b08      	ldr	r3, [pc, #32]	; (833cc <udd_ctrl_setup_received+0x114>)
   833aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   833ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   833b2:	6878      	ldr	r0, [r7, #4]
   833b4:	4b0f      	ldr	r3, [pc, #60]	; (833f4 <udd_ctrl_setup_received+0x13c>)
   833b6:	4798      	blx	r3
	}
<<<<<<< HEAD
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   839b8:	4b0a      	ldr	r3, [pc, #40]	; (839e4 <udc_iface_enable+0x94>)
   839ba:	681b      	ldr	r3, [r3, #0]
   839bc:	685a      	ldr	r2, [r3, #4]
   839be:	79fb      	ldrb	r3, [r7, #7]
   839c0:	009b      	lsls	r3, r3, #2
   839c2:	4413      	add	r3, r2
   839c4:	681b      	ldr	r3, [r3, #0]
   839c6:	681b      	ldr	r3, [r3, #0]
   839c8:	4798      	blx	r3
   839ca:	4603      	mov	r3, r0
}
   839cc:	4618      	mov	r0, r3
   839ce:	3710      	adds	r7, #16
   839d0:	46bd      	mov	sp, r7
   839d2:	bd80      	pop	{r7, pc}
   839d4:	00083815 	.word	0x00083815
   839d8:	2000133c 	.word	0x2000133c
   839dc:	000837b9 	.word	0x000837b9
   839e0:	00084c65 	.word	0x00084c65
   839e4:	20001338 	.word	0x20001338

000839e8 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   839e8:	b580      	push	{r7, lr}
   839ea:	af00      	add	r7, sp, #0
	udd_enable();
   839ec:	4b01      	ldr	r3, [pc, #4]	; (839f4 <udc_start+0xc>)
   839ee:	4798      	blx	r3
}
   839f0:	bf00      	nop
   839f2:	bd80      	pop	{r7, pc}
   839f4:	00084a21 	.word	0x00084a21

000839f8 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   839f8:	b580      	push	{r7, lr}
   839fa:	b082      	sub	sp, #8
   839fc:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   839fe:	4b0f      	ldr	r3, [pc, #60]	; (83a3c <udc_reset+0x44>)
   83a00:	781b      	ldrb	r3, [r3, #0]
   83a02:	2b00      	cmp	r3, #0
   83a04:	d010      	beq.n	83a28 <udc_reset+0x30>
		for (iface_num = 0;
   83a06:	2300      	movs	r3, #0
   83a08:	71fb      	strb	r3, [r7, #7]
   83a0a:	e006      	b.n	83a1a <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   83a0c:	79fb      	ldrb	r3, [r7, #7]
   83a0e:	4618      	mov	r0, r3
   83a10:	4b0b      	ldr	r3, [pc, #44]	; (83a40 <udc_reset+0x48>)
   83a12:	4798      	blx	r3
				iface_num++) {
   83a14:	79fb      	ldrb	r3, [r7, #7]
   83a16:	3301      	adds	r3, #1
   83a18:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83a1a:	4b0a      	ldr	r3, [pc, #40]	; (83a44 <udc_reset+0x4c>)
   83a1c:	681b      	ldr	r3, [r3, #0]
   83a1e:	681b      	ldr	r3, [r3, #0]
   83a20:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   83a22:	79fa      	ldrb	r2, [r7, #7]
   83a24:	429a      	cmp	r2, r3
   83a26:	d3f1      	bcc.n	83a0c <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   83a28:	4b04      	ldr	r3, [pc, #16]	; (83a3c <udc_reset+0x44>)
   83a2a:	2200      	movs	r2, #0
   83a2c:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   83a2e:	4b06      	ldr	r3, [pc, #24]	; (83a48 <udc_reset+0x50>)
   83a30:	2200      	movs	r2, #0
   83a32:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   83a34:	bf00      	nop
   83a36:	3708      	adds	r7, #8
   83a38:	46bd      	mov	sp, r7
   83a3a:	bd80      	pop	{r7, pc}
   83a3c:	20001336 	.word	0x20001336
   83a40:	000838b1 	.word	0x000838b1
   83a44:	20001338 	.word	0x20001338
   83a48:	20001334 	.word	0x20001334

00083a4c <udc_sof_notify>:
=======
}
   833b8:	3710      	adds	r7, #16
   833ba:	46bd      	mov	sp, r7
   833bc:	bd80      	pop	{r7, pc}
   833be:	bf00      	nop
   833c0:	20001321 	.word	0x20001321
   833c4:	00083861 	.word	0x00083861
   833c8:	0008325d 	.word	0x0008325d
   833cc:	400a4000 	.word	0x400a4000
   833d0:	00083795 	.word	0x00083795
   833d4:	20180000 	.word	0x20180000
   833d8:	20001810 	.word	0x20001810
   833dc:	00085c31 	.word	0x00085c31
   833e0:	20001322 	.word	0x20001322
   833e4:	20001324 	.word	0x20001324
   833e8:	000833f9 	.word	0x000833f9
   833ec:	000837b9 	.word	0x000837b9
   833f0:	000822b1 	.word	0x000822b1
   833f4:	0008230d 	.word	0x0008230d

000833f8 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   833f8:	b580      	push	{r7, lr}
   833fa:	b084      	sub	sp, #16
   833fc:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   833fe:	4b4c      	ldr	r3, [pc, #304]	; (83530 <udd_ctrl_in_sent+0x138>)
   83400:	4798      	blx	r3
   83402:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   83404:	4b4b      	ldr	r3, [pc, #300]	; (83534 <udd_ctrl_in_sent+0x13c>)
   83406:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8340a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   8340e:	6838      	ldr	r0, [r7, #0]
   83410:	4b49      	ldr	r3, [pc, #292]	; (83538 <udd_ctrl_in_sent+0x140>)
   83412:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83414:	4b49      	ldr	r3, [pc, #292]	; (8353c <udd_ctrl_in_sent+0x144>)
   83416:	781b      	ldrb	r3, [r3, #0]
   83418:	2b03      	cmp	r3, #3
   8341a:	d104      	bne.n	83426 <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   8341c:	4b48      	ldr	r3, [pc, #288]	; (83540 <udd_ctrl_in_sent+0x148>)
   8341e:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   83420:	4b48      	ldr	r3, [pc, #288]	; (83544 <udd_ctrl_in_sent+0x14c>)
   83422:	4798      	blx	r3
		return;
   83424:	e081      	b.n	8352a <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   83426:	4b48      	ldr	r3, [pc, #288]	; (83548 <udd_ctrl_in_sent+0x150>)
   83428:	899a      	ldrh	r2, [r3, #12]
   8342a:	4b48      	ldr	r3, [pc, #288]	; (8354c <udd_ctrl_in_sent+0x154>)
   8342c:	881b      	ldrh	r3, [r3, #0]
   8342e:	1ad3      	subs	r3, r2, r3
   83430:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   83432:	89fb      	ldrh	r3, [r7, #14]
   83434:	2b00      	cmp	r3, #0
   83436:	d127      	bne.n	83488 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83438:	4b45      	ldr	r3, [pc, #276]	; (83550 <udd_ctrl_in_sent+0x158>)
   8343a:	881a      	ldrh	r2, [r3, #0]
   8343c:	4b43      	ldr	r3, [pc, #268]	; (8354c <udd_ctrl_in_sent+0x154>)
   8343e:	881b      	ldrh	r3, [r3, #0]
   83440:	4413      	add	r3, r2
   83442:	b29a      	uxth	r2, r3
   83444:	4b42      	ldr	r3, [pc, #264]	; (83550 <udd_ctrl_in_sent+0x158>)
   83446:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83448:	4b3f      	ldr	r3, [pc, #252]	; (83548 <udd_ctrl_in_sent+0x150>)
   8344a:	88da      	ldrh	r2, [r3, #6]
   8344c:	4b40      	ldr	r3, [pc, #256]	; (83550 <udd_ctrl_in_sent+0x158>)
   8344e:	881b      	ldrh	r3, [r3, #0]
   83450:	429a      	cmp	r2, r3
   83452:	d003      	beq.n	8345c <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   83454:	4b3f      	ldr	r3, [pc, #252]	; (83554 <udd_ctrl_in_sent+0x15c>)
   83456:	781b      	ldrb	r3, [r3, #0]
   83458:	2b00      	cmp	r3, #0
   8345a:	d002      	beq.n	83462 <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   8345c:	4b3e      	ldr	r3, [pc, #248]	; (83558 <udd_ctrl_in_sent+0x160>)
   8345e:	4798      	blx	r3
			return;
   83460:	e063      	b.n	8352a <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   83462:	4b39      	ldr	r3, [pc, #228]	; (83548 <udd_ctrl_in_sent+0x150>)
   83464:	695b      	ldr	r3, [r3, #20]
   83466:	2b00      	cmp	r3, #0
   83468:	d00e      	beq.n	83488 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   8346a:	4b37      	ldr	r3, [pc, #220]	; (83548 <udd_ctrl_in_sent+0x150>)
   8346c:	695b      	ldr	r3, [r3, #20]
   8346e:	4798      	blx	r3
   83470:	4603      	mov	r3, r0
   83472:	f083 0301 	eor.w	r3, r3, #1
   83476:	b2db      	uxtb	r3, r3
   83478:	2b00      	cmp	r3, #0
   8347a:	d105      	bne.n	83488 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   8347c:	4b33      	ldr	r3, [pc, #204]	; (8354c <udd_ctrl_in_sent+0x154>)
   8347e:	2200      	movs	r2, #0
   83480:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   83482:	4b31      	ldr	r3, [pc, #196]	; (83548 <udd_ctrl_in_sent+0x150>)
   83484:	899b      	ldrh	r3, [r3, #12]
   83486:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   83488:	89fb      	ldrh	r3, [r7, #14]
   8348a:	2b3f      	cmp	r3, #63	; 0x3f
   8348c:	d905      	bls.n	8349a <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   8348e:	2340      	movs	r3, #64	; 0x40
   83490:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   83492:	4b30      	ldr	r3, [pc, #192]	; (83554 <udd_ctrl_in_sent+0x15c>)
   83494:	2200      	movs	r2, #0
   83496:	701a      	strb	r2, [r3, #0]
   83498:	e002      	b.n	834a0 <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   8349a:	4b2e      	ldr	r3, [pc, #184]	; (83554 <udd_ctrl_in_sent+0x15c>)
   8349c:	2201      	movs	r2, #1
   8349e:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   834a0:	4b2e      	ldr	r3, [pc, #184]	; (8355c <udd_ctrl_in_sent+0x164>)
   834a2:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   834a4:	4b28      	ldr	r3, [pc, #160]	; (83548 <udd_ctrl_in_sent+0x150>)
   834a6:	689b      	ldr	r3, [r3, #8]
   834a8:	4a28      	ldr	r2, [pc, #160]	; (8354c <udd_ctrl_in_sent+0x154>)
   834aa:	8812      	ldrh	r2, [r2, #0]
   834ac:	4413      	add	r3, r2
   834ae:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   834b0:	4b1f      	ldr	r3, [pc, #124]	; (83530 <udd_ctrl_in_sent+0x138>)
   834b2:	4798      	blx	r3
   834b4:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   834b6:	4b1f      	ldr	r3, [pc, #124]	; (83534 <udd_ctrl_in_sent+0x13c>)
   834b8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   834bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
   834c0:	2b00      	cmp	r3, #0
   834c2:	d006      	beq.n	834d2 <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   834c4:	6838      	ldr	r0, [r7, #0]
   834c6:	4b1c      	ldr	r3, [pc, #112]	; (83538 <udd_ctrl_in_sent+0x140>)
   834c8:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   834ca:	4b1c      	ldr	r3, [pc, #112]	; (8353c <udd_ctrl_in_sent+0x144>)
   834cc:	2204      	movs	r2, #4
   834ce:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   834d0:	e02b      	b.n	8352a <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   834d2:	2300      	movs	r3, #0
   834d4:	737b      	strb	r3, [r7, #13]
   834d6:	e00a      	b.n	834ee <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   834d8:	687a      	ldr	r2, [r7, #4]
   834da:	1c53      	adds	r3, r2, #1
   834dc:	607b      	str	r3, [r7, #4]
   834de:	68bb      	ldr	r3, [r7, #8]
   834e0:	1c59      	adds	r1, r3, #1
   834e2:	60b9      	str	r1, [r7, #8]
   834e4:	7812      	ldrb	r2, [r2, #0]
   834e6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   834e8:	7b7b      	ldrb	r3, [r7, #13]
   834ea:	3301      	adds	r3, #1
   834ec:	737b      	strb	r3, [r7, #13]
   834ee:	7b7b      	ldrb	r3, [r7, #13]
   834f0:	b29b      	uxth	r3, r3
   834f2:	89fa      	ldrh	r2, [r7, #14]
   834f4:	429a      	cmp	r2, r3
   834f6:	d8ef      	bhi.n	834d8 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   834f8:	4b14      	ldr	r3, [pc, #80]	; (8354c <udd_ctrl_in_sent+0x154>)
   834fa:	881a      	ldrh	r2, [r3, #0]
   834fc:	89fb      	ldrh	r3, [r7, #14]
   834fe:	4413      	add	r3, r2
   83500:	b29a      	uxth	r2, r3
   83502:	4b12      	ldr	r3, [pc, #72]	; (8354c <udd_ctrl_in_sent+0x154>)
   83504:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   83506:	4b0b      	ldr	r3, [pc, #44]	; (83534 <udd_ctrl_in_sent+0x13c>)
   83508:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8350c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83510:	4b08      	ldr	r3, [pc, #32]	; (83534 <udd_ctrl_in_sent+0x13c>)
   83512:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83516:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   8351a:	4b06      	ldr	r3, [pc, #24]	; (83534 <udd_ctrl_in_sent+0x13c>)
   8351c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83520:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   83524:	6838      	ldr	r0, [r7, #0]
   83526:	4b04      	ldr	r3, [pc, #16]	; (83538 <udd_ctrl_in_sent+0x140>)
   83528:	4798      	blx	r3
}
   8352a:	3710      	adds	r7, #16
   8352c:	46bd      	mov	sp, r7
   8352e:	bd80      	pop	{r7, pc}
   83530:	000822b1 	.word	0x000822b1
   83534:	400a4000 	.word	0x400a4000
   83538:	0008230d 	.word	0x0008230d
   8353c:	20001321 	.word	0x20001321
   83540:	00083861 	.word	0x00083861
   83544:	0008325d 	.word	0x0008325d
   83548:	20001810 	.word	0x20001810
   8354c:	20001324 	.word	0x20001324
   83550:	20001322 	.word	0x20001322
   83554:	20001358 	.word	0x20001358
   83558:	0008381d 	.word	0x0008381d
   8355c:	20180000 	.word	0x20180000

00083560 <udd_ctrl_out_received>:

>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

static void udd_ctrl_out_received(void)
{
<<<<<<< HEAD
   83a4c:	b580      	push	{r7, lr}
   83a4e:	b082      	sub	sp, #8
   83a50:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   83a52:	4b14      	ldr	r3, [pc, #80]	; (83aa4 <udc_sof_notify+0x58>)
   83a54:	781b      	ldrb	r3, [r3, #0]
   83a56:	2b00      	cmp	r3, #0
   83a58:	d01f      	beq.n	83a9a <udc_sof_notify+0x4e>
		for (iface_num = 0;
   83a5a:	2300      	movs	r3, #0
   83a5c:	71fb      	strb	r3, [r7, #7]
   83a5e:	e015      	b.n	83a8c <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   83a60:	4b11      	ldr	r3, [pc, #68]	; (83aa8 <udc_sof_notify+0x5c>)
   83a62:	681b      	ldr	r3, [r3, #0]
   83a64:	685a      	ldr	r2, [r3, #4]
   83a66:	79fb      	ldrb	r3, [r7, #7]
   83a68:	009b      	lsls	r3, r3, #2
   83a6a:	4413      	add	r3, r2
   83a6c:	681b      	ldr	r3, [r3, #0]
   83a6e:	691b      	ldr	r3, [r3, #16]
   83a70:	2b00      	cmp	r3, #0
   83a72:	d008      	beq.n	83a86 <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   83a74:	4b0c      	ldr	r3, [pc, #48]	; (83aa8 <udc_sof_notify+0x5c>)
   83a76:	681b      	ldr	r3, [r3, #0]
   83a78:	685a      	ldr	r2, [r3, #4]
   83a7a:	79fb      	ldrb	r3, [r7, #7]
   83a7c:	009b      	lsls	r3, r3, #2
   83a7e:	4413      	add	r3, r2
   83a80:	681b      	ldr	r3, [r3, #0]
   83a82:	691b      	ldr	r3, [r3, #16]
   83a84:	4798      	blx	r3
				iface_num++) {
   83a86:	79fb      	ldrb	r3, [r7, #7]
   83a88:	3301      	adds	r3, #1
   83a8a:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83a8c:	4b06      	ldr	r3, [pc, #24]	; (83aa8 <udc_sof_notify+0x5c>)
   83a8e:	681b      	ldr	r3, [r3, #0]
   83a90:	681b      	ldr	r3, [r3, #0]
   83a92:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   83a94:	79fa      	ldrb	r2, [r7, #7]
   83a96:	429a      	cmp	r2, r3
   83a98:	d3e2      	bcc.n	83a60 <udc_sof_notify+0x14>
			}
=======
   83560:	b580      	push	{r7, lr}
   83562:	b084      	sub	sp, #16
   83564:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   83566:	4b61      	ldr	r3, [pc, #388]	; (836ec <udd_ctrl_out_received+0x18c>)
   83568:	781b      	ldrb	r3, [r3, #0]
   8356a:	2b01      	cmp	r3, #1
   8356c:	d00f      	beq.n	8358e <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   8356e:	4b5f      	ldr	r3, [pc, #380]	; (836ec <udd_ctrl_out_received+0x18c>)
   83570:	781b      	ldrb	r3, [r3, #0]
   83572:	2b02      	cmp	r3, #2
   83574:	d003      	beq.n	8357e <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   83576:	4b5d      	ldr	r3, [pc, #372]	; (836ec <udd_ctrl_out_received+0x18c>)
   83578:	781b      	ldrb	r3, [r3, #0]
   8357a:	2b04      	cmp	r3, #4
   8357c:	d102      	bne.n	83584 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   8357e:	4b5c      	ldr	r3, [pc, #368]	; (836f0 <udd_ctrl_out_received+0x190>)
   83580:	4798      	blx	r3
   83582:	e001      	b.n	83588 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   83584:	4b5b      	ldr	r3, [pc, #364]	; (836f4 <udd_ctrl_out_received+0x194>)
   83586:	4798      	blx	r3
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   83588:	4b5b      	ldr	r3, [pc, #364]	; (836f8 <udd_ctrl_out_received+0x198>)
   8358a:	4798      	blx	r3
		return;
   8358c:	e0ab      	b.n	836e6 <udd_ctrl_out_received+0x186>
	}
<<<<<<< HEAD
}
   83a9a:	bf00      	nop
   83a9c:	3708      	adds	r7, #8
   83a9e:	46bd      	mov	sp, r7
   83aa0:	bd80      	pop	{r7, pc}
   83aa2:	bf00      	nop
   83aa4:	20001336 	.word	0x20001336
   83aa8:	20001338 	.word	0x20001338

00083aac <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   83aac:	b580      	push	{r7, lr}
   83aae:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   83ab0:	4b06      	ldr	r3, [pc, #24]	; (83acc <udc_req_std_dev_get_status+0x20>)
   83ab2:	88db      	ldrh	r3, [r3, #6]
   83ab4:	2b02      	cmp	r3, #2
   83ab6:	d001      	beq.n	83abc <udc_req_std_dev_get_status+0x10>
		return false;
   83ab8:	2300      	movs	r3, #0
   83aba:	e004      	b.n	83ac6 <udc_req_std_dev_get_status+0x1a>
=======
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   8358e:	4b5b      	ldr	r3, [pc, #364]	; (836fc <udd_ctrl_out_received+0x19c>)
   83590:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83594:	0d1b      	lsrs	r3, r3, #20
   83596:	b29b      	uxth	r3, r3
   83598:	f3c3 030a 	ubfx	r3, r3, #0, #11
   8359c:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   8359e:	4b58      	ldr	r3, [pc, #352]	; (83700 <udd_ctrl_out_received+0x1a0>)
   835a0:	899b      	ldrh	r3, [r3, #12]
   835a2:	461a      	mov	r2, r3
   835a4:	4b57      	ldr	r3, [pc, #348]	; (83704 <udd_ctrl_out_received+0x1a4>)
   835a6:	881b      	ldrh	r3, [r3, #0]
   835a8:	4619      	mov	r1, r3
   835aa:	89bb      	ldrh	r3, [r7, #12]
   835ac:	440b      	add	r3, r1
   835ae:	429a      	cmp	r2, r3
   835b0:	da05      	bge.n	835be <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   835b2:	4b53      	ldr	r3, [pc, #332]	; (83700 <udd_ctrl_out_received+0x1a0>)
   835b4:	899a      	ldrh	r2, [r3, #12]
   835b6:	4b53      	ldr	r3, [pc, #332]	; (83704 <udd_ctrl_out_received+0x1a4>)
   835b8:	881b      	ldrh	r3, [r3, #0]
   835ba:	1ad3      	subs	r3, r2, r3
   835bc:	81bb      	strh	r3, [r7, #12]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   835be:	4b52      	ldr	r3, [pc, #328]	; (83708 <udd_ctrl_out_received+0x1a8>)
   835c0:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   835c2:	4b4f      	ldr	r3, [pc, #316]	; (83700 <udd_ctrl_out_received+0x1a0>)
   835c4:	689b      	ldr	r3, [r3, #8]
   835c6:	4a4f      	ldr	r2, [pc, #316]	; (83704 <udd_ctrl_out_received+0x1a4>)
   835c8:	8812      	ldrh	r2, [r2, #0]
   835ca:	4413      	add	r3, r2
   835cc:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   835ce:	2300      	movs	r3, #0
   835d0:	73fb      	strb	r3, [r7, #15]
   835d2:	e00a      	b.n	835ea <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   835d4:	68ba      	ldr	r2, [r7, #8]
   835d6:	1c53      	adds	r3, r2, #1
   835d8:	60bb      	str	r3, [r7, #8]
   835da:	687b      	ldr	r3, [r7, #4]
   835dc:	1c59      	adds	r1, r3, #1
   835de:	6079      	str	r1, [r7, #4]
   835e0:	7812      	ldrb	r2, [r2, #0]
   835e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   835e4:	7bfb      	ldrb	r3, [r7, #15]
   835e6:	3301      	adds	r3, #1
   835e8:	73fb      	strb	r3, [r7, #15]
   835ea:	7bfb      	ldrb	r3, [r7, #15]
   835ec:	b29b      	uxth	r3, r3
   835ee:	89ba      	ldrh	r2, [r7, #12]
   835f0:	429a      	cmp	r2, r3
   835f2:	d8ef      	bhi.n	835d4 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   835f4:	4b43      	ldr	r3, [pc, #268]	; (83704 <udd_ctrl_out_received+0x1a4>)
   835f6:	881a      	ldrh	r2, [r3, #0]
   835f8:	89bb      	ldrh	r3, [r7, #12]
   835fa:	4413      	add	r3, r2
   835fc:	b29a      	uxth	r2, r3
   835fe:	4b41      	ldr	r3, [pc, #260]	; (83704 <udd_ctrl_out_received+0x1a4>)
   83600:	801a      	strh	r2, [r3, #0]

<<<<<<< HEAD
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   83abc:	2102      	movs	r1, #2
   83abe:	4804      	ldr	r0, [pc, #16]	; (83ad0 <udc_req_std_dev_get_status+0x24>)
   83ac0:	4b04      	ldr	r3, [pc, #16]	; (83ad4 <udc_req_std_dev_get_status+0x28>)
   83ac2:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   83ac4:	2301      	movs	r3, #1
}
   83ac6:	4618      	mov	r0, r3
   83ac8:	bd80      	pop	{r7, pc}
   83aca:	bf00      	nop
   83acc:	20001828 	.word	0x20001828
   83ad0:	20001334 	.word	0x20001334
   83ad4:	00084c3d 	.word	0x00084c3d

00083ad8 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   83ad8:	b580      	push	{r7, lr}
   83ada:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   83adc:	4b0b      	ldr	r3, [pc, #44]	; (83b0c <udc_req_std_ep_get_status+0x34>)
   83ade:	88db      	ldrh	r3, [r3, #6]
   83ae0:	2b02      	cmp	r3, #2
   83ae2:	d001      	beq.n	83ae8 <udc_req_std_ep_get_status+0x10>
		return false;
   83ae4:	2300      	movs	r3, #0
   83ae6:	e00e      	b.n	83b06 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83ae8:	4b08      	ldr	r3, [pc, #32]	; (83b0c <udc_req_std_ep_get_status+0x34>)
   83aea:	889b      	ldrh	r3, [r3, #4]
   83aec:	b2db      	uxtb	r3, r3
   83aee:	4618      	mov	r0, r3
   83af0:	4b07      	ldr	r3, [pc, #28]	; (83b10 <udc_req_std_ep_get_status+0x38>)
   83af2:	4798      	blx	r3
   83af4:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   83af6:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83af8:	4b06      	ldr	r3, [pc, #24]	; (83b14 <udc_req_std_ep_get_status+0x3c>)
   83afa:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   83afc:	2102      	movs	r1, #2
   83afe:	4805      	ldr	r0, [pc, #20]	; (83b14 <udc_req_std_ep_get_status+0x3c>)
   83b00:	4b05      	ldr	r3, [pc, #20]	; (83b18 <udc_req_std_ep_get_status+0x40>)
   83b02:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   83b04:	2301      	movs	r3, #1
}
   83b06:	4618      	mov	r0, r3
   83b08:	bd80      	pop	{r7, pc}
   83b0a:	bf00      	nop
   83b0c:	20001828 	.word	0x20001828
   83b10:	0008509d 	.word	0x0008509d
   83b14:	20001340 	.word	0x20001340
   83b18:	00084c3d 	.word	0x00084c3d

00083b1c <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   83b1c:	b480      	push	{r7}
   83b1e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83b20:	4b0b      	ldr	r3, [pc, #44]	; (83b50 <udc_req_std_dev_clear_feature+0x34>)
   83b22:	88db      	ldrh	r3, [r3, #6]
   83b24:	2b00      	cmp	r3, #0
   83b26:	d001      	beq.n	83b2c <udc_req_std_dev_clear_feature+0x10>
		return false;
   83b28:	2300      	movs	r3, #0
   83b2a:	e00d      	b.n	83b48 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   83b2c:	4b08      	ldr	r3, [pc, #32]	; (83b50 <udc_req_std_dev_clear_feature+0x34>)
   83b2e:	885b      	ldrh	r3, [r3, #2]
   83b30:	2b01      	cmp	r3, #1
   83b32:	d108      	bne.n	83b46 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   83b34:	4b07      	ldr	r3, [pc, #28]	; (83b54 <udc_req_std_dev_clear_feature+0x38>)
   83b36:	881b      	ldrh	r3, [r3, #0]
   83b38:	f023 0302 	bic.w	r3, r3, #2
   83b3c:	b29a      	uxth	r2, r3
   83b3e:	4b05      	ldr	r3, [pc, #20]	; (83b54 <udc_req_std_dev_clear_feature+0x38>)
   83b40:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   83b42:	2301      	movs	r3, #1
   83b44:	e000      	b.n	83b48 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   83b46:	2300      	movs	r3, #0
}
   83b48:	4618      	mov	r0, r3
   83b4a:	46bd      	mov	sp, r7
   83b4c:	bc80      	pop	{r7}
   83b4e:	4770      	bx	lr
   83b50:	20001828 	.word	0x20001828
   83b54:	20001334 	.word	0x20001334

00083b58 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   83b58:	b580      	push	{r7, lr}
   83b5a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83b5c:	4b0a      	ldr	r3, [pc, #40]	; (83b88 <udc_req_std_ep_clear_feature+0x30>)
   83b5e:	88db      	ldrh	r3, [r3, #6]
   83b60:	2b00      	cmp	r3, #0
   83b62:	d001      	beq.n	83b68 <udc_req_std_ep_clear_feature+0x10>
		return false;
   83b64:	2300      	movs	r3, #0
   83b66:	e00c      	b.n	83b82 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83b68:	4b07      	ldr	r3, [pc, #28]	; (83b88 <udc_req_std_ep_clear_feature+0x30>)
   83b6a:	885b      	ldrh	r3, [r3, #2]
   83b6c:	2b00      	cmp	r3, #0
   83b6e:	d107      	bne.n	83b80 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83b70:	4b05      	ldr	r3, [pc, #20]	; (83b88 <udc_req_std_ep_clear_feature+0x30>)
   83b72:	889b      	ldrh	r3, [r3, #4]
   83b74:	b2db      	uxtb	r3, r3
   83b76:	4618      	mov	r0, r3
   83b78:	4b04      	ldr	r3, [pc, #16]	; (83b8c <udc_req_std_ep_clear_feature+0x34>)
   83b7a:	4798      	blx	r3
   83b7c:	4603      	mov	r3, r0
   83b7e:	e000      	b.n	83b82 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   83b80:	2300      	movs	r3, #0
}
   83b82:	4618      	mov	r0, r3
   83b84:	bd80      	pop	{r7, pc}
   83b86:	bf00      	nop
   83b88:	20001828 	.word	0x20001828
   83b8c:	00085219 	.word	0x00085219

00083b90 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   83b90:	b580      	push	{r7, lr}
   83b92:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83b94:	4b26      	ldr	r3, [pc, #152]	; (83c30 <udc_req_std_dev_set_feature+0xa0>)
   83b96:	88db      	ldrh	r3, [r3, #6]
   83b98:	2b00      	cmp	r3, #0
   83b9a:	d001      	beq.n	83ba0 <udc_req_std_dev_set_feature+0x10>
		return false;
   83b9c:	2300      	movs	r3, #0
   83b9e:	e045      	b.n	83c2c <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   83ba0:	4b23      	ldr	r3, [pc, #140]	; (83c30 <udc_req_std_dev_set_feature+0xa0>)
   83ba2:	885b      	ldrh	r3, [r3, #2]
   83ba4:	2b01      	cmp	r3, #1
   83ba6:	d002      	beq.n	83bae <udc_req_std_dev_set_feature+0x1e>
   83ba8:	2b02      	cmp	r3, #2
   83baa:	d002      	beq.n	83bb2 <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   83bac:	e03d      	b.n	83c2a <udc_req_std_dev_set_feature+0x9a>
		return false;
   83bae:	2300      	movs	r3, #0
   83bb0:	e03c      	b.n	83c2c <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   83bb2:	4b20      	ldr	r3, [pc, #128]	; (83c34 <udc_req_std_dev_set_feature+0xa4>)
   83bb4:	4798      	blx	r3
   83bb6:	4603      	mov	r3, r0
   83bb8:	f083 0301 	eor.w	r3, r3, #1
   83bbc:	b2db      	uxtb	r3, r3
   83bbe:	2b00      	cmp	r3, #0
   83bc0:	d130      	bne.n	83c24 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   83bc2:	4b1b      	ldr	r3, [pc, #108]	; (83c30 <udc_req_std_dev_set_feature+0xa0>)
   83bc4:	889b      	ldrh	r3, [r3, #4]
   83bc6:	b2db      	uxtb	r3, r3
   83bc8:	2b00      	cmp	r3, #0
   83bca:	d12d      	bne.n	83c28 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   83bcc:	4b1a      	ldr	r3, [pc, #104]	; (83c38 <udc_req_std_dev_set_feature+0xa8>)
   83bce:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   83bd0:	4b17      	ldr	r3, [pc, #92]	; (83c30 <udc_req_std_dev_set_feature+0xa0>)
   83bd2:	889b      	ldrh	r3, [r3, #4]
   83bd4:	0a1b      	lsrs	r3, r3, #8
   83bd6:	b29b      	uxth	r3, r3
   83bd8:	b2db      	uxtb	r3, r3
   83bda:	3b01      	subs	r3, #1
   83bdc:	2b03      	cmp	r3, #3
   83bde:	d81f      	bhi.n	83c20 <udc_req_std_dev_set_feature+0x90>
   83be0:	a201      	add	r2, pc, #4	; (adr r2, 83be8 <udc_req_std_dev_set_feature+0x58>)
   83be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83be6:	bf00      	nop
   83be8:	00083bf9 	.word	0x00083bf9
   83bec:	00083c03 	.word	0x00083c03
   83bf0:	00083c0d 	.word	0x00083c0d
   83bf4:	00083c17 	.word	0x00083c17
			udd_g_ctrlreq.callback = udd_test_mode_j;
   83bf8:	4b0d      	ldr	r3, [pc, #52]	; (83c30 <udc_req_std_dev_set_feature+0xa0>)
   83bfa:	4a10      	ldr	r2, [pc, #64]	; (83c3c <udc_req_std_dev_set_feature+0xac>)
   83bfc:	611a      	str	r2, [r3, #16]
			return true;
   83bfe:	2301      	movs	r3, #1
   83c00:	e014      	b.n	83c2c <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   83c02:	4b0b      	ldr	r3, [pc, #44]	; (83c30 <udc_req_std_dev_set_feature+0xa0>)
   83c04:	4a0e      	ldr	r2, [pc, #56]	; (83c40 <udc_req_std_dev_set_feature+0xb0>)
   83c06:	611a      	str	r2, [r3, #16]
			return true;
   83c08:	2301      	movs	r3, #1
   83c0a:	e00f      	b.n	83c2c <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   83c0c:	4b08      	ldr	r3, [pc, #32]	; (83c30 <udc_req_std_dev_set_feature+0xa0>)
   83c0e:	4a0d      	ldr	r2, [pc, #52]	; (83c44 <udc_req_std_dev_set_feature+0xb4>)
   83c10:	611a      	str	r2, [r3, #16]
			return true;
   83c12:	2301      	movs	r3, #1
   83c14:	e00a      	b.n	83c2c <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   83c16:	4b06      	ldr	r3, [pc, #24]	; (83c30 <udc_req_std_dev_set_feature+0xa0>)
   83c18:	4a0b      	ldr	r2, [pc, #44]	; (83c48 <udc_req_std_dev_set_feature+0xb8>)
   83c1a:	611a      	str	r2, [r3, #16]
			return true;
   83c1c:	2301      	movs	r3, #1
   83c1e:	e005      	b.n	83c2c <udc_req_std_dev_set_feature+0x9c>
			break;
   83c20:	bf00      	nop
		break;
   83c22:	e002      	b.n	83c2a <udc_req_std_dev_set_feature+0x9a>
			break;
   83c24:	bf00      	nop
   83c26:	e000      	b.n	83c2a <udc_req_std_dev_set_feature+0x9a>
			break;
   83c28:	bf00      	nop
	}
	return false;
   83c2a:	2300      	movs	r3, #0
}
   83c2c:	4618      	mov	r0, r3
   83c2e:	bd80      	pop	{r7, pc}
   83c30:	20001828 	.word	0x20001828
   83c34:	00084bb9 	.word	0x00084bb9
   83c38:	000839f9 	.word	0x000839f9
   83c3c:	000854d9 	.word	0x000854d9
   83c40:	0008550d 	.word	0x0008550d
   83c44:	00085541 	.word	0x00085541
   83c48:	00085565 	.word	0x00085565

00083c4c <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   83c4c:	b580      	push	{r7, lr}
   83c4e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83c50:	4b0d      	ldr	r3, [pc, #52]	; (83c88 <udc_req_std_ep_set_feature+0x3c>)
   83c52:	88db      	ldrh	r3, [r3, #6]
   83c54:	2b00      	cmp	r3, #0
   83c56:	d001      	beq.n	83c5c <udc_req_std_ep_set_feature+0x10>
		return false;
   83c58:	2300      	movs	r3, #0
   83c5a:	e012      	b.n	83c82 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83c5c:	4b0a      	ldr	r3, [pc, #40]	; (83c88 <udc_req_std_ep_set_feature+0x3c>)
   83c5e:	885b      	ldrh	r3, [r3, #2]
   83c60:	2b00      	cmp	r3, #0
   83c62:	d10d      	bne.n	83c80 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   83c64:	4b08      	ldr	r3, [pc, #32]	; (83c88 <udc_req_std_ep_set_feature+0x3c>)
   83c66:	889b      	ldrh	r3, [r3, #4]
   83c68:	b2db      	uxtb	r3, r3
   83c6a:	4618      	mov	r0, r3
   83c6c:	4b07      	ldr	r3, [pc, #28]	; (83c8c <udc_req_std_ep_set_feature+0x40>)
   83c6e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83c70:	4b05      	ldr	r3, [pc, #20]	; (83c88 <udc_req_std_ep_set_feature+0x3c>)
   83c72:	889b      	ldrh	r3, [r3, #4]
   83c74:	b2db      	uxtb	r3, r3
   83c76:	4618      	mov	r0, r3
   83c78:	4b05      	ldr	r3, [pc, #20]	; (83c90 <udc_req_std_ep_set_feature+0x44>)
   83c7a:	4798      	blx	r3
   83c7c:	4603      	mov	r3, r0
   83c7e:	e000      	b.n	83c82 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   83c80:	2300      	movs	r3, #0
}
   83c82:	4618      	mov	r0, r3
   83c84:	bd80      	pop	{r7, pc}
   83c86:	bf00      	nop
   83c88:	20001828 	.word	0x20001828
   83c8c:	00085451 	.word	0x00085451
   83c90:	00085105 	.word	0x00085105

00083c94 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   83c94:	b580      	push	{r7, lr}
   83c96:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   83c98:	4b05      	ldr	r3, [pc, #20]	; (83cb0 <udc_valid_address+0x1c>)
   83c9a:	885b      	ldrh	r3, [r3, #2]
   83c9c:	b2db      	uxtb	r3, r3
   83c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   83ca2:	b2db      	uxtb	r3, r3
   83ca4:	4618      	mov	r0, r3
   83ca6:	4b03      	ldr	r3, [pc, #12]	; (83cb4 <udc_valid_address+0x20>)
   83ca8:	4798      	blx	r3
}
   83caa:	bf00      	nop
   83cac:	bd80      	pop	{r7, pc}
   83cae:	bf00      	nop
   83cb0:	20001828 	.word	0x20001828
   83cb4:	00084bdd 	.word	0x00084bdd

00083cb8 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   83cb8:	b480      	push	{r7}
   83cba:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83cbc:	4b06      	ldr	r3, [pc, #24]	; (83cd8 <udc_req_std_dev_set_address+0x20>)
   83cbe:	88db      	ldrh	r3, [r3, #6]
   83cc0:	2b00      	cmp	r3, #0
   83cc2:	d001      	beq.n	83cc8 <udc_req_std_dev_set_address+0x10>
		return false;
   83cc4:	2300      	movs	r3, #0
   83cc6:	e003      	b.n	83cd0 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   83cc8:	4b03      	ldr	r3, [pc, #12]	; (83cd8 <udc_req_std_dev_set_address+0x20>)
   83cca:	4a04      	ldr	r2, [pc, #16]	; (83cdc <udc_req_std_dev_set_address+0x24>)
   83ccc:	611a      	str	r2, [r3, #16]
	return true;
   83cce:	2301      	movs	r3, #1
}
   83cd0:	4618      	mov	r0, r3
   83cd2:	46bd      	mov	sp, r7
   83cd4:	bc80      	pop	{r7}
   83cd6:	4770      	bx	lr
   83cd8:	20001828 	.word	0x20001828
   83cdc:	00083c95 	.word	0x00083c95

00083ce0 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   83ce0:	b580      	push	{r7, lr}
   83ce2:	b084      	sub	sp, #16
   83ce4:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   83ce6:	2300      	movs	r3, #0
   83ce8:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   83cea:	4b29      	ldr	r3, [pc, #164]	; (83d90 <udc_req_std_dev_get_str_desc+0xb0>)
   83cec:	885b      	ldrh	r3, [r3, #2]
   83cee:	b2db      	uxtb	r3, r3
   83cf0:	2b03      	cmp	r3, #3
   83cf2:	d820      	bhi.n	83d36 <udc_req_std_dev_get_str_desc+0x56>
   83cf4:	a201      	add	r2, pc, #4	; (adr r2, 83cfc <udc_req_std_dev_get_str_desc+0x1c>)
   83cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83cfa:	bf00      	nop
   83cfc:	00083d0d 	.word	0x00083d0d
   83d00:	00083d17 	.word	0x00083d17
   83d04:	00083d21 	.word	0x00083d21
   83d08:	00083d2b 	.word	0x00083d2b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   83d0c:	2104      	movs	r1, #4
   83d0e:	4821      	ldr	r0, [pc, #132]	; (83d94 <udc_req_std_dev_get_str_desc+0xb4>)
   83d10:	4b21      	ldr	r3, [pc, #132]	; (83d98 <udc_req_std_dev_get_str_desc+0xb8>)
   83d12:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   83d14:	e011      	b.n	83d3a <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   83d16:	2315      	movs	r3, #21
   83d18:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   83d1a:	4b20      	ldr	r3, [pc, #128]	; (83d9c <udc_req_std_dev_get_str_desc+0xbc>)
   83d1c:	60bb      	str	r3, [r7, #8]
		break;
   83d1e:	e00c      	b.n	83d3a <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   83d20:	2313      	movs	r3, #19
   83d22:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   83d24:	4b1e      	ldr	r3, [pc, #120]	; (83da0 <udc_req_std_dev_get_str_desc+0xc0>)
   83d26:	60bb      	str	r3, [r7, #8]
		break;
   83d28:	e007      	b.n	83d3a <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   83d2a:	2320      	movs	r3, #32
   83d2c:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   83d2e:	4b1d      	ldr	r3, [pc, #116]	; (83da4 <udc_req_std_dev_get_str_desc+0xc4>)
   83d30:	4798      	blx	r3
   83d32:	60b8      	str	r0, [r7, #8]
		break;
   83d34:	e001      	b.n	83d3a <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   83d36:	2300      	movs	r3, #0
   83d38:	e026      	b.n	83d88 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   83d3a:	79fb      	ldrb	r3, [r7, #7]
   83d3c:	2b00      	cmp	r3, #0
   83d3e:	d022      	beq.n	83d86 <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   83d40:	2300      	movs	r3, #0
   83d42:	73fb      	strb	r3, [r7, #15]
   83d44:	e00d      	b.n	83d62 <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   83d46:	7bfb      	ldrb	r3, [r7, #15]
   83d48:	68ba      	ldr	r2, [r7, #8]
   83d4a:	4413      	add	r3, r2
   83d4c:	781a      	ldrb	r2, [r3, #0]
   83d4e:	7bfb      	ldrb	r3, [r7, #15]
   83d50:	b291      	uxth	r1, r2
   83d52:	4a15      	ldr	r2, [pc, #84]	; (83da8 <udc_req_std_dev_get_str_desc+0xc8>)
   83d54:	005b      	lsls	r3, r3, #1
   83d56:	4413      	add	r3, r2
   83d58:	460a      	mov	r2, r1
   83d5a:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   83d5c:	7bfb      	ldrb	r3, [r7, #15]
   83d5e:	3301      	adds	r3, #1
   83d60:	73fb      	strb	r3, [r7, #15]
   83d62:	7bfa      	ldrb	r2, [r7, #15]
   83d64:	79fb      	ldrb	r3, [r7, #7]
   83d66:	429a      	cmp	r2, r3
   83d68:	d3ed      	bcc.n	83d46 <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   83d6a:	79fb      	ldrb	r3, [r7, #7]
   83d6c:	3301      	adds	r3, #1
   83d6e:	b2db      	uxtb	r3, r3
   83d70:	005b      	lsls	r3, r3, #1
   83d72:	b2da      	uxtb	r2, r3
   83d74:	4b0c      	ldr	r3, [pc, #48]	; (83da8 <udc_req_std_dev_get_str_desc+0xc8>)
   83d76:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   83d78:	4b0b      	ldr	r3, [pc, #44]	; (83da8 <udc_req_std_dev_get_str_desc+0xc8>)
   83d7a:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   83d7c:	b29b      	uxth	r3, r3
   83d7e:	4619      	mov	r1, r3
   83d80:	4809      	ldr	r0, [pc, #36]	; (83da8 <udc_req_std_dev_get_str_desc+0xc8>)
   83d82:	4b05      	ldr	r3, [pc, #20]	; (83d98 <udc_req_std_dev_get_str_desc+0xb8>)
   83d84:	4798      	blx	r3
	}

	return true;
   83d86:	2301      	movs	r3, #1
}
   83d88:	4618      	mov	r0, r3
   83d8a:	3710      	adds	r7, #16
   83d8c:	46bd      	mov	sp, r7
   83d8e:	bd80      	pop	{r7, pc}
   83d90:	20001828 	.word	0x20001828
   83d94:	2000028c 	.word	0x2000028c
   83d98:	00084c3d 	.word	0x00084c3d
   83d9c:	20000290 	.word	0x20000290
   83da0:	200002a8 	.word	0x200002a8
   83da4:	0008376d 	.word	0x0008376d
   83da8:	200002bc 	.word	0x200002bc

00083dac <udc_req_std_dev_get_descriptor>:
		WINUSB_PLATFORM_DESCRIPTOR_LENGTH, 0x00, //length of other descriptor
		0x01, // when asking for MS 2.0 descriptor, will do bmRequestType = 0xC0, bRequest = this (0x01)
		0x00  // if non 0, Windows will send this before asking for the next descriptor
		};
static bool udc_req_std_dev_get_descriptor(void)
{
   83dac:	b580      	push	{r7, lr}
   83dae:	b082      	sub	sp, #8
   83db0:	af00      	add	r7, sp, #0
	uint8_t conf_num;


	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   83db2:	4b7f      	ldr	r3, [pc, #508]	; (83fb0 <udc_req_std_dev_get_descriptor+0x204>)
   83db4:	885b      	ldrh	r3, [r3, #2]
   83db6:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83db8:	4b7d      	ldr	r3, [pc, #500]	; (83fb0 <udc_req_std_dev_get_descriptor+0x204>)
   83dba:	885b      	ldrh	r3, [r3, #2]
   83dbc:	0a1b      	lsrs	r3, r3, #8
   83dbe:	b29b      	uxth	r3, r3
   83dc0:	b2db      	uxtb	r3, r3
   83dc2:	3b01      	subs	r3, #1
   83dc4:	2b0e      	cmp	r3, #14
   83dc6:	f200 80e0 	bhi.w	83f8a <udc_req_std_dev_get_descriptor+0x1de>
   83dca:	a201      	add	r2, pc, #4	; (adr r2, 83dd0 <udc_req_std_dev_get_descriptor+0x24>)
   83dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83dd0:	00083e0d 	.word	0x00083e0d
   83dd4:	00083e5d 	.word	0x00083e5d
   83dd8:	00083f77 	.word	0x00083f77
   83ddc:	00083f8b 	.word	0x00083f8b
   83de0:	00083f8b 	.word	0x00083f8b
   83de4:	00083ed7 	.word	0x00083ed7
   83de8:	00083eed 	.word	0x00083eed
   83dec:	00083f8b 	.word	0x00083f8b
   83df0:	00083f8b 	.word	0x00083f8b
   83df4:	00083f8b 	.word	0x00083f8b
   83df8:	00083f8b 	.word	0x00083f8b
   83dfc:	00083f8b 	.word	0x00083f8b
   83e00:	00083f8b 	.word	0x00083f8b
   83e04:	00083f8b 	.word	0x00083f8b
   83e08:	00083f6d 	.word	0x00083f6d
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   83e0c:	4b69      	ldr	r3, [pc, #420]	; (83fb4 <udc_req_std_dev_get_descriptor+0x208>)
   83e0e:	4798      	blx	r3
   83e10:	4603      	mov	r3, r0
   83e12:	f083 0301 	eor.w	r3, r3, #1
   83e16:	b2db      	uxtb	r3, r3
   83e18:	2b00      	cmp	r3, #0
   83e1a:	d00a      	beq.n	83e32 <udc_req_std_dev_get_descriptor+0x86>
			//(udc_config.confdev_hs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   83e1c:	4b66      	ldr	r3, [pc, #408]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83e1e:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   83e20:	4b65      	ldr	r3, [pc, #404]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83e22:	689b      	ldr	r3, [r3, #8]
   83e24:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   83e26:	b29b      	uxth	r3, r3
   83e28:	4619      	mov	r1, r3
   83e2a:	4610      	mov	r0, r2
   83e2c:	4b63      	ldr	r3, [pc, #396]	; (83fbc <udc_req_std_dev_get_descriptor+0x210>)
   83e2e:	4798      	blx	r3
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   83e30:	e0ae      	b.n	83f90 <udc_req_std_dev_get_descriptor+0x1e4>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   83e32:	4b61      	ldr	r3, [pc, #388]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83e34:	681b      	ldr	r3, [r3, #0]
   83e36:	2200      	movs	r2, #0
   83e38:	f042 0210 	orr.w	r2, r2, #16
   83e3c:	709a      	strb	r2, [r3, #2]
   83e3e:	2200      	movs	r2, #0
   83e40:	f042 0202 	orr.w	r2, r2, #2
   83e44:	70da      	strb	r2, [r3, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   83e46:	4b5c      	ldr	r3, [pc, #368]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83e48:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   83e4a:	4b5b      	ldr	r3, [pc, #364]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83e4c:	681b      	ldr	r3, [r3, #0]
   83e4e:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   83e50:	b29b      	uxth	r3, r3
   83e52:	4619      	mov	r1, r3
   83e54:	4610      	mov	r0, r2
   83e56:	4b59      	ldr	r3, [pc, #356]	; (83fbc <udc_req_std_dev_get_descriptor+0x210>)
   83e58:	4798      	blx	r3
		break;
   83e5a:	e099      	b.n	83f90 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   83e5c:	4b55      	ldr	r3, [pc, #340]	; (83fb4 <udc_req_std_dev_get_descriptor+0x208>)
   83e5e:	4798      	blx	r3
   83e60:	4603      	mov	r3, r0
   83e62:	2b00      	cmp	r3, #0
   83e64:	d019      	beq.n	83e9a <udc_req_std_dev_get_descriptor+0xee>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   83e66:	4b54      	ldr	r3, [pc, #336]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83e68:	689b      	ldr	r3, [r3, #8]
   83e6a:	7c5b      	ldrb	r3, [r3, #17]
   83e6c:	79fa      	ldrb	r2, [r7, #7]
   83e6e:	429a      	cmp	r2, r3
   83e70:	d301      	bcc.n	83e76 <udc_req_std_dev_get_descriptor+0xca>
					bNumConfigurations) {
				return false;
   83e72:	2300      	movs	r3, #0
   83e74:	e097      	b.n	83fa6 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83e76:	4b50      	ldr	r3, [pc, #320]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83e78:	691a      	ldr	r2, [r3, #16]
   83e7a:	79fb      	ldrb	r3, [r7, #7]
   83e7c:	00db      	lsls	r3, r3, #3
   83e7e:	4413      	add	r3, r2
   83e80:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   83e82:	4b4d      	ldr	r3, [pc, #308]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83e84:	691a      	ldr	r2, [r3, #16]
   83e86:	79fb      	ldrb	r3, [r7, #7]
   83e88:	00db      	lsls	r3, r3, #3
   83e8a:	4413      	add	r3, r2
   83e8c:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83e8e:	885b      	ldrh	r3, [r3, #2]
   83e90:	b29b      	uxth	r3, r3
   83e92:	4619      	mov	r1, r3
   83e94:	4b49      	ldr	r3, [pc, #292]	; (83fbc <udc_req_std_dev_get_descriptor+0x210>)
   83e96:	4798      	blx	r3
   83e98:	e018      	b.n	83ecc <udc_req_std_dev_get_descriptor+0x120>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   83e9a:	4b47      	ldr	r3, [pc, #284]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83e9c:	681b      	ldr	r3, [r3, #0]
   83e9e:	7c5b      	ldrb	r3, [r3, #17]
   83ea0:	79fa      	ldrb	r2, [r7, #7]
   83ea2:	429a      	cmp	r2, r3
   83ea4:	d301      	bcc.n	83eaa <udc_req_std_dev_get_descriptor+0xfe>
					bNumConfigurations) {
				return false;
   83ea6:	2300      	movs	r3, #0
   83ea8:	e07d      	b.n	83fa6 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83eaa:	4b43      	ldr	r3, [pc, #268]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83eac:	685a      	ldr	r2, [r3, #4]
   83eae:	79fb      	ldrb	r3, [r7, #7]
   83eb0:	00db      	lsls	r3, r3, #3
   83eb2:	4413      	add	r3, r2
   83eb4:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   83eb6:	4b40      	ldr	r3, [pc, #256]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83eb8:	685a      	ldr	r2, [r3, #4]
   83eba:	79fb      	ldrb	r3, [r7, #7]
   83ebc:	00db      	lsls	r3, r3, #3
   83ebe:	4413      	add	r3, r2
   83ec0:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83ec2:	885b      	ldrh	r3, [r3, #2]
   83ec4:	b29b      	uxth	r3, r3
   83ec6:	4619      	mov	r1, r3
   83ec8:	4b3c      	ldr	r3, [pc, #240]	; (83fbc <udc_req_std_dev_get_descriptor+0x210>)
   83eca:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83ecc:	4b38      	ldr	r3, [pc, #224]	; (83fb0 <udc_req_std_dev_get_descriptor+0x204>)
   83ece:	689b      	ldr	r3, [r3, #8]
   83ed0:	2202      	movs	r2, #2
   83ed2:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   83ed4:	e05c      	b.n	83f90 <udc_req_std_dev_get_descriptor+0x1e4>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   83ed6:	4b38      	ldr	r3, [pc, #224]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83ed8:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   83eda:	4b37      	ldr	r3, [pc, #220]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83edc:	68db      	ldr	r3, [r3, #12]
   83ede:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   83ee0:	b29b      	uxth	r3, r3
   83ee2:	4619      	mov	r1, r3
   83ee4:	4610      	mov	r0, r2
   83ee6:	4b35      	ldr	r3, [pc, #212]	; (83fbc <udc_req_std_dev_get_descriptor+0x210>)
   83ee8:	4798      	blx	r3
		break;
   83eea:	e051      	b.n	83f90 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   83eec:	4b31      	ldr	r3, [pc, #196]	; (83fb4 <udc_req_std_dev_get_descriptor+0x208>)
   83eee:	4798      	blx	r3
   83ef0:	4603      	mov	r3, r0
   83ef2:	f083 0301 	eor.w	r3, r3, #1
   83ef6:	b2db      	uxtb	r3, r3
   83ef8:	2b00      	cmp	r3, #0
   83efa:	d019      	beq.n	83f30 <udc_req_std_dev_get_descriptor+0x184>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   83efc:	4b2e      	ldr	r3, [pc, #184]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83efe:	689b      	ldr	r3, [r3, #8]
   83f00:	7c5b      	ldrb	r3, [r3, #17]
   83f02:	79fa      	ldrb	r2, [r7, #7]
   83f04:	429a      	cmp	r2, r3
   83f06:	d301      	bcc.n	83f0c <udc_req_std_dev_get_descriptor+0x160>
					bNumConfigurations) {
				return false;
   83f08:	2300      	movs	r3, #0
   83f0a:	e04c      	b.n	83fa6 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83f0c:	4b2a      	ldr	r3, [pc, #168]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83f0e:	691a      	ldr	r2, [r3, #16]
   83f10:	79fb      	ldrb	r3, [r7, #7]
   83f12:	00db      	lsls	r3, r3, #3
   83f14:	4413      	add	r3, r2
   83f16:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   83f18:	4b27      	ldr	r3, [pc, #156]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83f1a:	691a      	ldr	r2, [r3, #16]
   83f1c:	79fb      	ldrb	r3, [r7, #7]
   83f1e:	00db      	lsls	r3, r3, #3
   83f20:	4413      	add	r3, r2
   83f22:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83f24:	885b      	ldrh	r3, [r3, #2]
   83f26:	b29b      	uxth	r3, r3
   83f28:	4619      	mov	r1, r3
   83f2a:	4b24      	ldr	r3, [pc, #144]	; (83fbc <udc_req_std_dev_get_descriptor+0x210>)
   83f2c:	4798      	blx	r3
   83f2e:	e018      	b.n	83f62 <udc_req_std_dev_get_descriptor+0x1b6>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   83f30:	4b21      	ldr	r3, [pc, #132]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83f32:	681b      	ldr	r3, [r3, #0]
   83f34:	7c5b      	ldrb	r3, [r3, #17]
   83f36:	79fa      	ldrb	r2, [r7, #7]
   83f38:	429a      	cmp	r2, r3
   83f3a:	d301      	bcc.n	83f40 <udc_req_std_dev_get_descriptor+0x194>
					bNumConfigurations) {
				return false;
   83f3c:	2300      	movs	r3, #0
   83f3e:	e032      	b.n	83fa6 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83f40:	4b1d      	ldr	r3, [pc, #116]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83f42:	685a      	ldr	r2, [r3, #4]
   83f44:	79fb      	ldrb	r3, [r7, #7]
   83f46:	00db      	lsls	r3, r3, #3
   83f48:	4413      	add	r3, r2
   83f4a:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   83f4c:	4b1a      	ldr	r3, [pc, #104]	; (83fb8 <udc_req_std_dev_get_descriptor+0x20c>)
   83f4e:	685a      	ldr	r2, [r3, #4]
   83f50:	79fb      	ldrb	r3, [r7, #7]
   83f52:	00db      	lsls	r3, r3, #3
   83f54:	4413      	add	r3, r2
   83f56:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83f58:	885b      	ldrh	r3, [r3, #2]
   83f5a:	b29b      	uxth	r3, r3
   83f5c:	4619      	mov	r1, r3
   83f5e:	4b17      	ldr	r3, [pc, #92]	; (83fbc <udc_req_std_dev_get_descriptor+0x210>)
   83f60:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83f62:	4b13      	ldr	r3, [pc, #76]	; (83fb0 <udc_req_std_dev_get_descriptor+0x204>)
   83f64:	689b      	ldr	r3, [r3, #8]
   83f66:	2207      	movs	r2, #7
   83f68:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   83f6a:	e011      	b.n	83f90 <udc_req_std_dev_get_descriptor+0x1e4>
#endif
	case USB_DT_BOS: //bos descriptor
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   83f6c:	2121      	movs	r1, #33	; 0x21
   83f6e:	4814      	ldr	r0, [pc, #80]	; (83fc0 <udc_req_std_dev_get_descriptor+0x214>)
   83f70:	4b12      	ldr	r3, [pc, #72]	; (83fbc <udc_req_std_dev_get_descriptor+0x210>)
   83f72:	4798      	blx	r3
			0x21);
		break;
   83f74:	e00c      	b.n	83f90 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   83f76:	4b13      	ldr	r3, [pc, #76]	; (83fc4 <udc_req_std_dev_get_descriptor+0x218>)
   83f78:	4798      	blx	r3
   83f7a:	4603      	mov	r3, r0
   83f7c:	f083 0301 	eor.w	r3, r3, #1
   83f80:	b2db      	uxtb	r3, r3
   83f82:	2b00      	cmp	r3, #0
   83f84:	d003      	beq.n	83f8e <udc_req_std_dev_get_descriptor+0x1e2>
			return false;
   83f86:	2300      	movs	r3, #0
   83f88:	e00d      	b.n	83fa6 <udc_req_std_dev_get_descriptor+0x1fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   83f8a:	2300      	movs	r3, #0
   83f8c:	e00b      	b.n	83fa6 <udc_req_std_dev_get_descriptor+0x1fa>
		break;
   83f8e:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   83f90:	4b07      	ldr	r3, [pc, #28]	; (83fb0 <udc_req_std_dev_get_descriptor+0x204>)
   83f92:	88da      	ldrh	r2, [r3, #6]
   83f94:	4b06      	ldr	r3, [pc, #24]	; (83fb0 <udc_req_std_dev_get_descriptor+0x204>)
   83f96:	899b      	ldrh	r3, [r3, #12]
   83f98:	429a      	cmp	r2, r3
   83f9a:	d203      	bcs.n	83fa4 <udc_req_std_dev_get_descriptor+0x1f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83f9c:	4b04      	ldr	r3, [pc, #16]	; (83fb0 <udc_req_std_dev_get_descriptor+0x204>)
   83f9e:	88da      	ldrh	r2, [r3, #6]
   83fa0:	4b03      	ldr	r3, [pc, #12]	; (83fb0 <udc_req_std_dev_get_descriptor+0x204>)
   83fa2:	819a      	strh	r2, [r3, #12]
	}
	return true;
   83fa4:	2301      	movs	r3, #1
}
   83fa6:	4618      	mov	r0, r3
   83fa8:	3708      	adds	r7, #8
   83faa:	46bd      	mov	sp, r7
   83fac:	bd80      	pop	{r7, pc}
   83fae:	bf00      	nop
   83fb0:	20001828 	.word	0x20001828
   83fb4:	00084bb9 	.word	0x00084bb9
   83fb8:	20000428 	.word	0x20000428
   83fbc:	00084c3d 	.word	0x00084c3d
   83fc0:	0008d484 	.word	0x0008d484
   83fc4:	00083ce1 	.word	0x00083ce1

00083fc8 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   83fc8:	b580      	push	{r7, lr}
   83fca:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   83fcc:	4b06      	ldr	r3, [pc, #24]	; (83fe8 <udc_req_std_dev_get_configuration+0x20>)
   83fce:	88db      	ldrh	r3, [r3, #6]
   83fd0:	2b01      	cmp	r3, #1
   83fd2:	d001      	beq.n	83fd8 <udc_req_std_dev_get_configuration+0x10>
		return false;
   83fd4:	2300      	movs	r3, #0
   83fd6:	e004      	b.n	83fe2 <udc_req_std_dev_get_configuration+0x1a>
=======
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   83602:	89bb      	ldrh	r3, [r7, #12]
   83604:	2b40      	cmp	r3, #64	; 0x40
   83606:	d10a      	bne.n	8361e <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   83608:	4b3d      	ldr	r3, [pc, #244]	; (83700 <udd_ctrl_out_received+0x1a0>)
   8360a:	88db      	ldrh	r3, [r3, #6]
   8360c:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   8360e:	4b3f      	ldr	r3, [pc, #252]	; (8370c <udd_ctrl_out_received+0x1ac>)
   83610:	881b      	ldrh	r3, [r3, #0]
   83612:	4619      	mov	r1, r3
   83614:	4b3b      	ldr	r3, [pc, #236]	; (83704 <udd_ctrl_out_received+0x1a4>)
   83616:	881b      	ldrh	r3, [r3, #0]
   83618:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   8361a:	429a      	cmp	r2, r3
   8361c:	dc20      	bgt.n	83660 <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   8361e:	4b39      	ldr	r3, [pc, #228]	; (83704 <udd_ctrl_out_received+0x1a4>)
   83620:	881a      	ldrh	r2, [r3, #0]
   83622:	4b37      	ldr	r3, [pc, #220]	; (83700 <udd_ctrl_out_received+0x1a0>)
   83624:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   83626:	4b36      	ldr	r3, [pc, #216]	; (83700 <udd_ctrl_out_received+0x1a0>)
   83628:	695b      	ldr	r3, [r3, #20]
   8362a:	2b00      	cmp	r3, #0
   8362c:	d010      	beq.n	83650 <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   8362e:	4b34      	ldr	r3, [pc, #208]	; (83700 <udd_ctrl_out_received+0x1a0>)
   83630:	695b      	ldr	r3, [r3, #20]
   83632:	4798      	blx	r3
   83634:	4603      	mov	r3, r0
   83636:	f083 0301 	eor.w	r3, r3, #1
   8363a:	b2db      	uxtb	r3, r3
   8363c:	2b00      	cmp	r3, #0
   8363e:	d007      	beq.n	83650 <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   83640:	4b2c      	ldr	r3, [pc, #176]	; (836f4 <udd_ctrl_out_received+0x194>)
   83642:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   83644:	4b2d      	ldr	r3, [pc, #180]	; (836fc <udd_ctrl_out_received+0x19c>)
   83646:	f44f 7200 	mov.w	r2, #512	; 0x200
   8364a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   8364e:	e04a      	b.n	836e6 <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   83650:	4b2a      	ldr	r3, [pc, #168]	; (836fc <udd_ctrl_out_received+0x19c>)
   83652:	f44f 7200 	mov.w	r2, #512	; 0x200
   83656:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   8365a:	4b2d      	ldr	r3, [pc, #180]	; (83710 <udd_ctrl_out_received+0x1b0>)
   8365c:	4798      	blx	r3
		return;
   8365e:	e042      	b.n	836e6 <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   83660:	4b27      	ldr	r3, [pc, #156]	; (83700 <udd_ctrl_out_received+0x1a0>)
   83662:	899a      	ldrh	r2, [r3, #12]
   83664:	4b27      	ldr	r3, [pc, #156]	; (83704 <udd_ctrl_out_received+0x1a4>)
   83666:	881b      	ldrh	r3, [r3, #0]
   83668:	429a      	cmp	r2, r3
   8366a:	d127      	bne.n	836bc <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   8366c:	4b24      	ldr	r3, [pc, #144]	; (83700 <udd_ctrl_out_received+0x1a0>)
   8366e:	695b      	ldr	r3, [r3, #20]
   83670:	2b00      	cmp	r3, #0
   83672:	d107      	bne.n	83684 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   83674:	4b1f      	ldr	r3, [pc, #124]	; (836f4 <udd_ctrl_out_received+0x194>)
   83676:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   83678:	4b20      	ldr	r3, [pc, #128]	; (836fc <udd_ctrl_out_received+0x19c>)
   8367a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8367e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   83682:	e030      	b.n	836e6 <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   83684:	4b1e      	ldr	r3, [pc, #120]	; (83700 <udd_ctrl_out_received+0x1a0>)
   83686:	695b      	ldr	r3, [r3, #20]
   83688:	4798      	blx	r3
   8368a:	4603      	mov	r3, r0
   8368c:	f083 0301 	eor.w	r3, r3, #1
   83690:	b2db      	uxtb	r3, r3
   83692:	2b00      	cmp	r3, #0
   83694:	d007      	beq.n	836a6 <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   83696:	4b17      	ldr	r3, [pc, #92]	; (836f4 <udd_ctrl_out_received+0x194>)
   83698:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   8369a:	4b18      	ldr	r3, [pc, #96]	; (836fc <udd_ctrl_out_received+0x19c>)
   8369c:	f44f 7200 	mov.w	r2, #512	; 0x200
   836a0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   836a4:	e01f      	b.n	836e6 <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   836a6:	4b19      	ldr	r3, [pc, #100]	; (8370c <udd_ctrl_out_received+0x1ac>)
   836a8:	881a      	ldrh	r2, [r3, #0]
   836aa:	4b16      	ldr	r3, [pc, #88]	; (83704 <udd_ctrl_out_received+0x1a4>)
   836ac:	881b      	ldrh	r3, [r3, #0]
   836ae:	4413      	add	r3, r2
   836b0:	b29a      	uxth	r2, r3
   836b2:	4b16      	ldr	r3, [pc, #88]	; (8370c <udd_ctrl_out_received+0x1ac>)
   836b4:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   836b6:	4b13      	ldr	r3, [pc, #76]	; (83704 <udd_ctrl_out_received+0x1a4>)
   836b8:	2200      	movs	r2, #0
   836ba:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   836bc:	4b0f      	ldr	r3, [pc, #60]	; (836fc <udd_ctrl_out_received+0x19c>)
   836be:	f44f 7200 	mov.w	r2, #512	; 0x200
   836c2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   836c6:	4b0d      	ldr	r3, [pc, #52]	; (836fc <udd_ctrl_out_received+0x19c>)
   836c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   836cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   836d0:	4b10      	ldr	r3, [pc, #64]	; (83714 <udd_ctrl_out_received+0x1b4>)
   836d2:	4798      	blx	r3
   836d4:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   836d6:	4b09      	ldr	r3, [pc, #36]	; (836fc <udd_ctrl_out_received+0x19c>)
   836d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   836dc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   836e0:	6838      	ldr	r0, [r7, #0]
   836e2:	4b0d      	ldr	r3, [pc, #52]	; (83718 <udd_ctrl_out_received+0x1b8>)
   836e4:	4798      	blx	r3
}
   836e6:	3710      	adds	r7, #16
   836e8:	46bd      	mov	sp, r7
   836ea:	bd80      	pop	{r7, pc}
   836ec:	20001321 	.word	0x20001321
   836f0:	00083861 	.word	0x00083861
   836f4:	00083795 	.word	0x00083795
   836f8:	0008325d 	.word	0x0008325d
   836fc:	400a4000 	.word	0x400a4000
   83700:	20001810 	.word	0x20001810
   83704:	20001324 	.word	0x20001324
   83708:	20180000 	.word	0x20180000
   8370c:	20001322 	.word	0x20001322
   83710:	000837b9 	.word	0x000837b9
   83714:	000822b1 	.word	0x000822b1
   83718:	0008230d 	.word	0x0008230d

0008371c <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   8371c:	b580      	push	{r7, lr}
   8371e:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   83720:	4b0c      	ldr	r3, [pc, #48]	; (83754 <udd_ctrl_underflow+0x38>)
   83722:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83726:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8372a:	2b00      	cmp	r3, #0
   8372c:	d10f      	bne.n	8374e <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   8372e:	4b0a      	ldr	r3, [pc, #40]	; (83758 <udd_ctrl_underflow+0x3c>)
   83730:	781b      	ldrb	r3, [r3, #0]
   83732:	2b01      	cmp	r3, #1
   83734:	d102      	bne.n	8373c <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   83736:	4b09      	ldr	r3, [pc, #36]	; (8375c <udd_ctrl_underflow+0x40>)
   83738:	4798      	blx	r3
   8373a:	e009      	b.n	83750 <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   8373c:	4b06      	ldr	r3, [pc, #24]	; (83758 <udd_ctrl_underflow+0x3c>)
   8373e:	781b      	ldrb	r3, [r3, #0]
   83740:	2b04      	cmp	r3, #4
   83742:	d105      	bne.n	83750 <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   83744:	4b03      	ldr	r3, [pc, #12]	; (83754 <udd_ctrl_underflow+0x38>)
   83746:	2220      	movs	r2, #32
   83748:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   8374c:	e000      	b.n	83750 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   8374e:	bf00      	nop
	}
}
   83750:	bd80      	pop	{r7, pc}
   83752:	bf00      	nop
   83754:	400a4000 	.word	0x400a4000
   83758:	20001321 	.word	0x20001321
   8375c:	000837b9 	.word	0x000837b9

00083760 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   83760:	b480      	push	{r7}
   83762:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   83764:	4b09      	ldr	r3, [pc, #36]	; (8378c <udd_ctrl_overflow+0x2c>)
   83766:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8376a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   8376e:	2b00      	cmp	r3, #0
   83770:	d108      	bne.n	83784 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83772:	4b07      	ldr	r3, [pc, #28]	; (83790 <udd_ctrl_overflow+0x30>)
   83774:	781b      	ldrb	r3, [r3, #0]
   83776:	2b03      	cmp	r3, #3
   83778:	d105      	bne.n	83786 <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   8377a:	4b04      	ldr	r3, [pc, #16]	; (8378c <udd_ctrl_overflow+0x2c>)
   8377c:	2220      	movs	r2, #32
   8377e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   83782:	e000      	b.n	83786 <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   83784:	bf00      	nop
	}
}
   83786:	46bd      	mov	sp, r7
   83788:	bc80      	pop	{r7}
   8378a:	4770      	bx	lr
   8378c:	400a4000 	.word	0x400a4000
   83790:	20001321 	.word	0x20001321

00083794 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   83794:	b480      	push	{r7}
   83796:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   83798:	4b05      	ldr	r3, [pc, #20]	; (837b0 <udd_ctrl_stall_data+0x1c>)
   8379a:	2205      	movs	r2, #5
   8379c:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8379e:	4b05      	ldr	r3, [pc, #20]	; (837b4 <udd_ctrl_stall_data+0x20>)
   837a0:	2220      	movs	r2, #32
   837a2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   837a6:	bf00      	nop
   837a8:	46bd      	mov	sp, r7
   837aa:	bc80      	pop	{r7}
   837ac:	4770      	bx	lr
   837ae:	bf00      	nop
   837b0:	20001321 	.word	0x20001321
   837b4:	400a4000 	.word	0x400a4000

000837b8 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   837b8:	b580      	push	{r7, lr}
   837ba:	b082      	sub	sp, #8
   837bc:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   837be:	4b13      	ldr	r3, [pc, #76]	; (8380c <udd_ctrl_send_zlp_in+0x54>)
   837c0:	2203      	movs	r2, #3
   837c2:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   837c4:	4b12      	ldr	r3, [pc, #72]	; (83810 <udd_ctrl_send_zlp_in+0x58>)
   837c6:	4798      	blx	r3
   837c8:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   837ca:	4b12      	ldr	r3, [pc, #72]	; (83814 <udd_ctrl_send_zlp_in+0x5c>)
   837cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   837d0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   837d4:	4b0f      	ldr	r3, [pc, #60]	; (83814 <udd_ctrl_send_zlp_in+0x5c>)
   837d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   837da:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   837de:	4b0d      	ldr	r3, [pc, #52]	; (83814 <udd_ctrl_send_zlp_in+0x5c>)
   837e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   837e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   837e8:	4b0a      	ldr	r3, [pc, #40]	; (83814 <udd_ctrl_send_zlp_in+0x5c>)
   837ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   837ee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   837f2:	4b08      	ldr	r3, [pc, #32]	; (83814 <udd_ctrl_send_zlp_in+0x5c>)
   837f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   837f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   837fc:	6878      	ldr	r0, [r7, #4]
   837fe:	4b06      	ldr	r3, [pc, #24]	; (83818 <udd_ctrl_send_zlp_in+0x60>)
   83800:	4798      	blx	r3
}
   83802:	bf00      	nop
   83804:	3708      	adds	r7, #8
   83806:	46bd      	mov	sp, r7
   83808:	bd80      	pop	{r7, pc}
   8380a:	bf00      	nop
   8380c:	20001321 	.word	0x20001321
   83810:	000822b1 	.word	0x000822b1
   83814:	400a4000 	.word	0x400a4000
   83818:	0008230d 	.word	0x0008230d

0008381c <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   8381c:	b580      	push	{r7, lr}
   8381e:	b082      	sub	sp, #8
   83820:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83822:	4b0b      	ldr	r3, [pc, #44]	; (83850 <udd_ctrl_send_zlp_out+0x34>)
   83824:	2204      	movs	r2, #4
   83826:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   83828:	4b0a      	ldr	r3, [pc, #40]	; (83854 <udd_ctrl_send_zlp_out+0x38>)
   8382a:	4798      	blx	r3
   8382c:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   8382e:	4b0a      	ldr	r3, [pc, #40]	; (83858 <udd_ctrl_send_zlp_out+0x3c>)
   83830:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83834:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   83838:	4b07      	ldr	r3, [pc, #28]	; (83858 <udd_ctrl_send_zlp_out+0x3c>)
   8383a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8383e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   83842:	6878      	ldr	r0, [r7, #4]
   83844:	4b05      	ldr	r3, [pc, #20]	; (8385c <udd_ctrl_send_zlp_out+0x40>)
   83846:	4798      	blx	r3
}
   83848:	bf00      	nop
   8384a:	3708      	adds	r7, #8
   8384c:	46bd      	mov	sp, r7
   8384e:	bd80      	pop	{r7, pc}
   83850:	20001321 	.word	0x20001321
   83854:	000822b1 	.word	0x000822b1
   83858:	400a4000 	.word	0x400a4000
   8385c:	0008230d 	.word	0x0008230d

00083860 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   83860:	b580      	push	{r7, lr}
   83862:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   83864:	4b04      	ldr	r3, [pc, #16]	; (83878 <udd_ctrl_endofrequest+0x18>)
   83866:	691b      	ldr	r3, [r3, #16]
   83868:	2b00      	cmp	r3, #0
   8386a:	d002      	beq.n	83872 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   8386c:	4b02      	ldr	r3, [pc, #8]	; (83878 <udd_ctrl_endofrequest+0x18>)
   8386e:	691b      	ldr	r3, [r3, #16]
   83870:	4798      	blx	r3
	}
}
   83872:	bf00      	nop
   83874:	bd80      	pop	{r7, pc}
   83876:	bf00      	nop
   83878:	20001810 	.word	0x20001810

0008387c <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   8387c:	b580      	push	{r7, lr}
   8387e:	b082      	sub	sp, #8
   83880:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   83882:	4b31      	ldr	r3, [pc, #196]	; (83948 <udd_ctrl_interrupt+0xcc>)
   83884:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   83888:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   8388a:	4b2f      	ldr	r3, [pc, #188]	; (83948 <udd_ctrl_interrupt+0xcc>)
   8388c:	695b      	ldr	r3, [r3, #20]
   8388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   83892:	2b00      	cmp	r3, #0
   83894:	d101      	bne.n	8389a <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   83896:	2300      	movs	r3, #0
   83898:	e052      	b.n	83940 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   8389a:	4b2b      	ldr	r3, [pc, #172]	; (83948 <udd_ctrl_interrupt+0xcc>)
   8389c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   838a0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   838a4:	4b28      	ldr	r3, [pc, #160]	; (83948 <udd_ctrl_interrupt+0xcc>)
   838a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   838aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   838ae:	687b      	ldr	r3, [r7, #4]
   838b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   838b4:	2b00      	cmp	r3, #0
   838b6:	d003      	beq.n	838c0 <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   838b8:	4b24      	ldr	r3, [pc, #144]	; (8394c <udd_ctrl_interrupt+0xd0>)
   838ba:	4798      	blx	r3
		return true;
   838bc:	2301      	movs	r3, #1
   838be:	e03f      	b.n	83940 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   838c0:	687b      	ldr	r3, [r7, #4]
   838c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   838c6:	2b00      	cmp	r3, #0
   838c8:	d00a      	beq.n	838e0 <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   838ca:	4b1f      	ldr	r3, [pc, #124]	; (83948 <udd_ctrl_interrupt+0xcc>)
   838cc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   838d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   838d4:	2b00      	cmp	r3, #0
   838d6:	d003      	beq.n	838e0 <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   838d8:	4b1d      	ldr	r3, [pc, #116]	; (83950 <udd_ctrl_interrupt+0xd4>)
   838da:	4798      	blx	r3
		return true;
   838dc:	2301      	movs	r3, #1
   838de:	e02f      	b.n	83940 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   838e0:	687b      	ldr	r3, [r7, #4]
   838e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
   838e6:	2b00      	cmp	r3, #0
   838e8:	d003      	beq.n	838f2 <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   838ea:	4b1a      	ldr	r3, [pc, #104]	; (83954 <udd_ctrl_interrupt+0xd8>)
   838ec:	4798      	blx	r3
		return true;
   838ee:	2301      	movs	r3, #1
   838f0:	e026      	b.n	83940 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   838f2:	687b      	ldr	r3, [r7, #4]
   838f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   838f8:	2b00      	cmp	r3, #0
   838fa:	d004      	beq.n	83906 <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   838fc:	4b12      	ldr	r3, [pc, #72]	; (83948 <udd_ctrl_interrupt+0xcc>)
   838fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83902:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   83906:	687b      	ldr	r3, [r7, #4]
   83908:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   8390c:	2b00      	cmp	r3, #0
   8390e:	d008      	beq.n	83922 <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   83910:	4b0d      	ldr	r3, [pc, #52]	; (83948 <udd_ctrl_interrupt+0xcc>)
   83912:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83916:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   8391a:	4b0f      	ldr	r3, [pc, #60]	; (83958 <udd_ctrl_interrupt+0xdc>)
   8391c:	4798      	blx	r3
		return true;
   8391e:	2301      	movs	r3, #1
   83920:	e00e      	b.n	83940 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   83922:	687b      	ldr	r3, [r7, #4]
   83924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   83928:	2b00      	cmp	r3, #0
   8392a:	d008      	beq.n	8393e <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   8392c:	4b06      	ldr	r3, [pc, #24]	; (83948 <udd_ctrl_interrupt+0xcc>)
   8392e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   83932:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   83936:	4b09      	ldr	r3, [pc, #36]	; (8395c <udd_ctrl_interrupt+0xe0>)
   83938:	4798      	blx	r3
		return true;
   8393a:	2301      	movs	r3, #1
   8393c:	e000      	b.n	83940 <udd_ctrl_interrupt+0xc4>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
	dbg_print("UnH ");
	return false;
   8393e:	2300      	movs	r3, #0
}
   83940:	4618      	mov	r0, r3
   83942:	3708      	adds	r7, #8
   83944:	46bd      	mov	sp, r7
   83946:	bd80      	pop	{r7, pc}
   83948:	400a4000 	.word	0x400a4000
   8394c:	000832b9 	.word	0x000832b9
   83950:	000833f9 	.word	0x000833f9
   83954:	00083561 	.word	0x00083561
   83958:	00083761 	.word	0x00083761
   8395c:	0008371d 	.word	0x0008371d

00083960 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

<<<<<<< HEAD
	udd_set_setup_payload(&udc_num_configuration,1);
   83fd8:	2101      	movs	r1, #1
   83fda:	4804      	ldr	r0, [pc, #16]	; (83fec <udc_req_std_dev_get_configuration+0x24>)
   83fdc:	4b04      	ldr	r3, [pc, #16]	; (83ff0 <udc_req_std_dev_get_configuration+0x28>)
   83fde:	4798      	blx	r3
	return true;
   83fe0:	2301      	movs	r3, #1
}
   83fe2:	4618      	mov	r0, r3
   83fe4:	bd80      	pop	{r7, pc}
   83fe6:	bf00      	nop
   83fe8:	20001828 	.word	0x20001828
   83fec:	20001336 	.word	0x20001336
   83ff0:	00084c3d 	.word	0x00084c3d

00083ff4 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   83ff4:	b580      	push	{r7, lr}
   83ff6:	b082      	sub	sp, #8
   83ff8:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   83ffa:	4b37      	ldr	r3, [pc, #220]	; (840d8 <udc_req_std_dev_set_configuration+0xe4>)
   83ffc:	88db      	ldrh	r3, [r3, #6]
   83ffe:	2b00      	cmp	r3, #0
   84000:	d001      	beq.n	84006 <udc_req_std_dev_set_configuration+0x12>
		return false;
   84002:	2300      	movs	r3, #0
   84004:	e063      	b.n	840ce <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   84006:	4b35      	ldr	r3, [pc, #212]	; (840dc <udc_req_std_dev_set_configuration+0xe8>)
   84008:	4798      	blx	r3
   8400a:	4603      	mov	r3, r0
   8400c:	2b00      	cmp	r3, #0
   8400e:	d101      	bne.n	84014 <udc_req_std_dev_set_configuration+0x20>
		return false;
   84010:	2300      	movs	r3, #0
   84012:	e05c      	b.n	840ce <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84014:	4b32      	ldr	r3, [pc, #200]	; (840e0 <udc_req_std_dev_set_configuration+0xec>)
   84016:	4798      	blx	r3
   84018:	4603      	mov	r3, r0
   8401a:	2b00      	cmp	r3, #0
   8401c:	d009      	beq.n	84032 <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8401e:	4b2e      	ldr	r3, [pc, #184]	; (840d8 <udc_req_std_dev_set_configuration+0xe4>)
   84020:	885b      	ldrh	r3, [r3, #2]
   84022:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   84024:	4a2f      	ldr	r2, [pc, #188]	; (840e4 <udc_req_std_dev_set_configuration+0xf0>)
   84026:	6892      	ldr	r2, [r2, #8]
   84028:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8402a:	4293      	cmp	r3, r2
   8402c:	dd0b      	ble.n	84046 <udc_req_std_dev_set_configuration+0x52>
			return false;
   8402e:	2300      	movs	r3, #0
   84030:	e04d      	b.n	840ce <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84032:	4b29      	ldr	r3, [pc, #164]	; (840d8 <udc_req_std_dev_set_configuration+0xe4>)
   84034:	885b      	ldrh	r3, [r3, #2]
   84036:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   84038:	4a2a      	ldr	r2, [pc, #168]	; (840e4 <udc_req_std_dev_set_configuration+0xf0>)
   8403a:	6812      	ldr	r2, [r2, #0]
   8403c:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8403e:	4293      	cmp	r3, r2
   84040:	dd01      	ble.n	84046 <udc_req_std_dev_set_configuration+0x52>
			return false;
   84042:	2300      	movs	r3, #0
   84044:	e043      	b.n	840ce <udc_req_std_dev_set_configuration+0xda>
		}
=======
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   83960:	b480      	push	{r7}
   83962:	b083      	sub	sp, #12
   83964:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83966:	2300      	movs	r3, #0
   83968:	71fb      	strb	r3, [r7, #7]
   8396a:	e01c      	b.n	839a6 <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   8396c:	79fa      	ldrb	r2, [r7, #7]
   8396e:	4912      	ldr	r1, [pc, #72]	; (839b8 <udd_ep_job_table_reset+0x58>)
   83970:	4613      	mov	r3, r2
   83972:	005b      	lsls	r3, r3, #1
   83974:	4413      	add	r3, r2
   83976:	00db      	lsls	r3, r3, #3
   83978:	440b      	add	r3, r1
   8397a:	f103 0210 	add.w	r2, r3, #16
   8397e:	7913      	ldrb	r3, [r2, #4]
   83980:	f36f 0300 	bfc	r3, #0, #1
   83984:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   83986:	79fa      	ldrb	r2, [r7, #7]
   83988:	490b      	ldr	r1, [pc, #44]	; (839b8 <udd_ep_job_table_reset+0x58>)
   8398a:	4613      	mov	r3, r2
   8398c:	005b      	lsls	r3, r3, #1
   8398e:	4413      	add	r3, r2
   83990:	00db      	lsls	r3, r3, #3
   83992:	440b      	add	r3, r1
   83994:	f103 0210 	add.w	r2, r3, #16
   83998:	7913      	ldrb	r3, [r2, #4]
   8399a:	f36f 0382 	bfc	r3, #2, #1
   8399e:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   839a0:	79fb      	ldrb	r3, [r7, #7]
   839a2:	3301      	adds	r3, #1
   839a4:	71fb      	strb	r3, [r7, #7]
   839a6:	79fb      	ldrb	r3, [r7, #7]
   839a8:	2b01      	cmp	r3, #1
   839aa:	d9df      	bls.n	8396c <udd_ep_job_table_reset+0xc>
	}
}
   839ac:	bf00      	nop
   839ae:	bf00      	nop
   839b0:	370c      	adds	r7, #12
   839b2:	46bd      	mov	sp, r7
   839b4:	bc80      	pop	{r7}
   839b6:	4770      	bx	lr
   839b8:	20001328 	.word	0x20001328

000839bc <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   839bc:	b580      	push	{r7, lr}
   839be:	b082      	sub	sp, #8
   839c0:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   839c2:	2300      	movs	r3, #0
   839c4:	71fb      	strb	r3, [r7, #7]
   839c6:	e010      	b.n	839ea <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   839c8:	79fa      	ldrb	r2, [r7, #7]
   839ca:	4613      	mov	r3, r2
   839cc:	005b      	lsls	r3, r3, #1
   839ce:	4413      	add	r3, r2
   839d0:	00db      	lsls	r3, r3, #3
   839d2:	4a0a      	ldr	r2, [pc, #40]	; (839fc <udd_ep_job_table_kill+0x40>)
   839d4:	1898      	adds	r0, r3, r2
   839d6:	79fb      	ldrb	r3, [r7, #7]
   839d8:	3301      	adds	r3, #1
   839da:	b2db      	uxtb	r3, r3
   839dc:	461a      	mov	r2, r3
   839de:	2101      	movs	r1, #1
   839e0:	4b07      	ldr	r3, [pc, #28]	; (83a00 <udd_ep_job_table_kill+0x44>)
   839e2:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   839e4:	79fb      	ldrb	r3, [r7, #7]
   839e6:	3301      	adds	r3, #1
   839e8:	71fb      	strb	r3, [r7, #7]
   839ea:	79fb      	ldrb	r3, [r7, #7]
   839ec:	2b01      	cmp	r3, #1
   839ee:	d9eb      	bls.n	839c8 <udd_ep_job_table_kill+0xc>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
}
   839f0:	bf00      	nop
   839f2:	bf00      	nop
   839f4:	3708      	adds	r7, #8
   839f6:	46bd      	mov	sp, r7
   839f8:	bd80      	pop	{r7, pc}
   839fa:	bf00      	nop
   839fc:	20001328 	.word	0x20001328
   83a00:	00083a41 	.word	0x00083a41

<<<<<<< HEAD
	// Reset current configuration
	udc_reset();
   84046:	4b28      	ldr	r3, [pc, #160]	; (840e8 <udc_req_std_dev_set_configuration+0xf4>)
   84048:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   8404a:	4b23      	ldr	r3, [pc, #140]	; (840d8 <udc_req_std_dev_set_configuration+0xe4>)
   8404c:	885b      	ldrh	r3, [r3, #2]
   8404e:	b2da      	uxtb	r2, r3
   84050:	4b26      	ldr	r3, [pc, #152]	; (840ec <udc_req_std_dev_set_configuration+0xf8>)
   84052:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   84054:	4b25      	ldr	r3, [pc, #148]	; (840ec <udc_req_std_dev_set_configuration+0xf8>)
   84056:	781b      	ldrb	r3, [r3, #0]
   84058:	2b00      	cmp	r3, #0
   8405a:	d101      	bne.n	84060 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   8405c:	2301      	movs	r3, #1
   8405e:	e036      	b.n	840ce <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84060:	4b1f      	ldr	r3, [pc, #124]	; (840e0 <udc_req_std_dev_set_configuration+0xec>)
   84062:	4798      	blx	r3
   84064:	4603      	mov	r3, r0
   84066:	2b00      	cmp	r3, #0
   84068:	d00b      	beq.n	84082 <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   8406a:	4b1e      	ldr	r3, [pc, #120]	; (840e4 <udc_req_std_dev_set_configuration+0xf0>)
   8406c:	691a      	ldr	r2, [r3, #16]
   8406e:	4b1f      	ldr	r3, [pc, #124]	; (840ec <udc_req_std_dev_set_configuration+0xf8>)
   84070:	781b      	ldrb	r3, [r3, #0]
   84072:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84076:	3b01      	subs	r3, #1
   84078:	00db      	lsls	r3, r3, #3
   8407a:	4413      	add	r3, r2
   8407c:	4a1c      	ldr	r2, [pc, #112]	; (840f0 <udc_req_std_dev_set_configuration+0xfc>)
   8407e:	6013      	str	r3, [r2, #0]
   84080:	e00a      	b.n	84098 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   84082:	4b18      	ldr	r3, [pc, #96]	; (840e4 <udc_req_std_dev_set_configuration+0xf0>)
   84084:	685a      	ldr	r2, [r3, #4]
   84086:	4b19      	ldr	r3, [pc, #100]	; (840ec <udc_req_std_dev_set_configuration+0xf8>)
   84088:	781b      	ldrb	r3, [r3, #0]
   8408a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   8408e:	3b01      	subs	r3, #1
   84090:	00db      	lsls	r3, r3, #3
   84092:	4413      	add	r3, r2
   84094:	4a16      	ldr	r2, [pc, #88]	; (840f0 <udc_req_std_dev_set_configuration+0xfc>)
   84096:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84098:	2300      	movs	r3, #0
   8409a:	71fb      	strb	r3, [r7, #7]
   8409c:	e00f      	b.n	840be <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   8409e:	79fb      	ldrb	r3, [r7, #7]
   840a0:	2100      	movs	r1, #0
   840a2:	4618      	mov	r0, r3
   840a4:	4b13      	ldr	r3, [pc, #76]	; (840f4 <udc_req_std_dev_set_configuration+0x100>)
   840a6:	4798      	blx	r3
   840a8:	4603      	mov	r3, r0
   840aa:	f083 0301 	eor.w	r3, r3, #1
   840ae:	b2db      	uxtb	r3, r3
   840b0:	2b00      	cmp	r3, #0
   840b2:	d001      	beq.n	840b8 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   840b4:	2300      	movs	r3, #0
   840b6:	e00a      	b.n	840ce <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   840b8:	79fb      	ldrb	r3, [r7, #7]
   840ba:	3301      	adds	r3, #1
   840bc:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   840be:	4b0c      	ldr	r3, [pc, #48]	; (840f0 <udc_req_std_dev_set_configuration+0xfc>)
   840c0:	681b      	ldr	r3, [r3, #0]
   840c2:	681b      	ldr	r3, [r3, #0]
   840c4:	791b      	ldrb	r3, [r3, #4]
   840c6:	79fa      	ldrb	r2, [r7, #7]
   840c8:	429a      	cmp	r2, r3
   840ca:	d3e8      	bcc.n	8409e <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   840cc:	2301      	movs	r3, #1
}
   840ce:	4618      	mov	r0, r3
   840d0:	3708      	adds	r7, #8
   840d2:	46bd      	mov	sp, r7
   840d4:	bd80      	pop	{r7, pc}
   840d6:	bf00      	nop
   840d8:	20001828 	.word	0x20001828
   840dc:	00084c21 	.word	0x00084c21
   840e0:	00084bb9 	.word	0x00084bb9
   840e4:	20000428 	.word	0x20000428
   840e8:	000839f9 	.word	0x000839f9
   840ec:	20001336 	.word	0x20001336
   840f0:	20001338 	.word	0x20001338
   840f4:	00083951 	.word	0x00083951

000840f8 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   840f8:	b580      	push	{r7, lr}
   840fa:	b082      	sub	sp, #8
   840fc:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   840fe:	4b1e      	ldr	r3, [pc, #120]	; (84178 <udc_req_std_iface_get_setting+0x80>)
   84100:	88db      	ldrh	r3, [r3, #6]
   84102:	2b01      	cmp	r3, #1
   84104:	d001      	beq.n	8410a <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   84106:	2300      	movs	r3, #0
   84108:	e032      	b.n	84170 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   8410a:	4b1c      	ldr	r3, [pc, #112]	; (8417c <udc_req_std_iface_get_setting+0x84>)
   8410c:	781b      	ldrb	r3, [r3, #0]
   8410e:	2b00      	cmp	r3, #0
   84110:	d101      	bne.n	84116 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   84112:	2300      	movs	r3, #0
   84114:	e02c      	b.n	84170 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84116:	4b18      	ldr	r3, [pc, #96]	; (84178 <udc_req_std_iface_get_setting+0x80>)
   84118:	889b      	ldrh	r3, [r3, #4]
   8411a:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8411c:	4b18      	ldr	r3, [pc, #96]	; (84180 <udc_req_std_iface_get_setting+0x88>)
   8411e:	681b      	ldr	r3, [r3, #0]
   84120:	681b      	ldr	r3, [r3, #0]
   84122:	791b      	ldrb	r3, [r3, #4]
   84124:	79fa      	ldrb	r2, [r7, #7]
   84126:	429a      	cmp	r2, r3
   84128:	d301      	bcc.n	8412e <udc_req_std_iface_get_setting+0x36>
		return false;
   8412a:	2300      	movs	r3, #0
   8412c:	e020      	b.n	84170 <udc_req_std_iface_get_setting+0x78>
=======
00083a04 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   83a04:	b580      	push	{r7, lr}
   83a06:	b082      	sub	sp, #8
   83a08:	af00      	add	r7, sp, #0
   83a0a:	4603      	mov	r3, r0
   83a0c:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   83a0e:	79fb      	ldrb	r3, [r7, #7]
   83a10:	f003 030f 	and.w	r3, r3, #15
   83a14:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   83a16:	79fb      	ldrb	r3, [r7, #7]
   83a18:	1e5a      	subs	r2, r3, #1
   83a1a:	4613      	mov	r3, r2
   83a1c:	005b      	lsls	r3, r3, #1
   83a1e:	4413      	add	r3, r2
   83a20:	00db      	lsls	r3, r3, #3
   83a22:	4a05      	ldr	r2, [pc, #20]	; (83a38 <udd_ep_abort_job+0x34>)
   83a24:	4413      	add	r3, r2
   83a26:	79fa      	ldrb	r2, [r7, #7]
   83a28:	2101      	movs	r1, #1
   83a2a:	4618      	mov	r0, r3
   83a2c:	4b03      	ldr	r3, [pc, #12]	; (83a3c <udd_ep_abort_job+0x38>)
   83a2e:	4798      	blx	r3
}
   83a30:	bf00      	nop
   83a32:	3708      	adds	r7, #8
   83a34:	46bd      	mov	sp, r7
   83a36:	bd80      	pop	{r7, pc}
   83a38:	20001328 	.word	0x20001328
   83a3c:	00083a41 	.word	0x00083a41

00083a40 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   83a40:	b580      	push	{r7, lr}
   83a42:	b082      	sub	sp, #8
   83a44:	af00      	add	r7, sp, #0
   83a46:	6078      	str	r0, [r7, #4]
   83a48:	460b      	mov	r3, r1
   83a4a:	70fb      	strb	r3, [r7, #3]
   83a4c:	4613      	mov	r3, r2
   83a4e:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   83a50:	687b      	ldr	r3, [r7, #4]
   83a52:	7d1b      	ldrb	r3, [r3, #20]
   83a54:	f003 0301 	and.w	r3, r3, #1
   83a58:	b2db      	uxtb	r3, r3
   83a5a:	2b00      	cmp	r3, #0
   83a5c:	d01f      	beq.n	83a9e <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   83a5e:	687a      	ldr	r2, [r7, #4]
   83a60:	7d13      	ldrb	r3, [r2, #20]
   83a62:	f36f 0300 	bfc	r3, #0, #1
   83a66:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   83a68:	687b      	ldr	r3, [r7, #4]
   83a6a:	681b      	ldr	r3, [r3, #0]
   83a6c:	2b00      	cmp	r3, #0
   83a6e:	d018      	beq.n	83aa2 <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   83a70:	4a0e      	ldr	r2, [pc, #56]	; (83aac <udd_ep_finish_job+0x6c>)
   83a72:	78bb      	ldrb	r3, [r7, #2]
   83a74:	3308      	adds	r3, #8
   83a76:	015b      	lsls	r3, r3, #5
   83a78:	4413      	add	r3, r2
   83a7a:	681b      	ldr	r3, [r3, #0]
   83a7c:	f003 0308 	and.w	r3, r3, #8
   83a80:	2b00      	cmp	r3, #0
   83a82:	d003      	beq.n	83a8c <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   83a84:	78bb      	ldrb	r3, [r7, #2]
   83a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
   83a8a:	70bb      	strb	r3, [r7, #2]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83a8c:	687b      	ldr	r3, [r7, #4]
   83a8e:	681b      	ldr	r3, [r3, #0]
   83a90:	78fa      	ldrb	r2, [r7, #3]
   83a92:	4610      	mov	r0, r2
   83a94:	687a      	ldr	r2, [r7, #4]
   83a96:	6891      	ldr	r1, [r2, #8]
   83a98:	78ba      	ldrb	r2, [r7, #2]
   83a9a:	4798      	blx	r3
   83a9c:	e002      	b.n	83aa4 <udd_ep_finish_job+0x64>
		return; // No on-going job
   83a9e:	bf00      	nop
   83aa0:	e000      	b.n	83aa4 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   83aa2:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   83aa4:	3708      	adds	r7, #8
   83aa6:	46bd      	mov	sp, r7
   83aa8:	bd80      	pop	{r7, pc}
   83aaa:	bf00      	nop
   83aac:	400a4000 	.word	0x400a4000

<<<<<<< HEAD
	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   8412e:	79fb      	ldrb	r3, [r7, #7]
   84130:	2100      	movs	r1, #0
   84132:	4618      	mov	r0, r3
   84134:	4b13      	ldr	r3, [pc, #76]	; (84184 <udc_req_std_iface_get_setting+0x8c>)
   84136:	4798      	blx	r3
   84138:	4603      	mov	r3, r0
   8413a:	f083 0301 	eor.w	r3, r3, #1
   8413e:	b2db      	uxtb	r3, r3
   84140:	2b00      	cmp	r3, #0
   84142:	d001      	beq.n	84148 <udc_req_std_iface_get_setting+0x50>
		return false;
   84144:	2300      	movs	r3, #0
   84146:	e013      	b.n	84170 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84148:	4b0d      	ldr	r3, [pc, #52]	; (84180 <udc_req_std_iface_get_setting+0x88>)
   8414a:	681b      	ldr	r3, [r3, #0]
   8414c:	685a      	ldr	r2, [r3, #4]
   8414e:	79fb      	ldrb	r3, [r7, #7]
   84150:	009b      	lsls	r3, r3, #2
   84152:	4413      	add	r3, r2
   84154:	681b      	ldr	r3, [r3, #0]
   84156:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   84158:	683b      	ldr	r3, [r7, #0]
   8415a:	68db      	ldr	r3, [r3, #12]
   8415c:	4798      	blx	r3
   8415e:	4603      	mov	r3, r0
   84160:	461a      	mov	r2, r3
   84162:	4b09      	ldr	r3, [pc, #36]	; (84188 <udc_req_std_iface_get_setting+0x90>)
   84164:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   84166:	2101      	movs	r1, #1
   84168:	4807      	ldr	r0, [pc, #28]	; (84188 <udc_req_std_iface_get_setting+0x90>)
   8416a:	4b08      	ldr	r3, [pc, #32]	; (8418c <udc_req_std_iface_get_setting+0x94>)
   8416c:	4798      	blx	r3
	return true;
   8416e:	2301      	movs	r3, #1
}
   84170:	4618      	mov	r0, r3
   84172:	3708      	adds	r7, #8
   84174:	46bd      	mov	sp, r7
   84176:	bd80      	pop	{r7, pc}
   84178:	20001828 	.word	0x20001828
   8417c:	20001336 	.word	0x20001336
   84180:	20001338 	.word	0x20001338
   84184:	00083815 	.word	0x00083815
   84188:	20001342 	.word	0x20001342
   8418c:	00084c3d 	.word	0x00084c3d

00084190 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   84190:	b580      	push	{r7, lr}
   84192:	b082      	sub	sp, #8
   84194:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   84196:	4b14      	ldr	r3, [pc, #80]	; (841e8 <udc_req_std_iface_set_setting+0x58>)
   84198:	88db      	ldrh	r3, [r3, #6]
   8419a:	2b00      	cmp	r3, #0
   8419c:	d001      	beq.n	841a2 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   8419e:	2300      	movs	r3, #0
   841a0:	e01e      	b.n	841e0 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   841a2:	4b12      	ldr	r3, [pc, #72]	; (841ec <udc_req_std_iface_set_setting+0x5c>)
   841a4:	781b      	ldrb	r3, [r3, #0]
   841a6:	2b00      	cmp	r3, #0
   841a8:	d101      	bne.n	841ae <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   841aa:	2300      	movs	r3, #0
   841ac:	e018      	b.n	841e0 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   841ae:	4b0e      	ldr	r3, [pc, #56]	; (841e8 <udc_req_std_iface_set_setting+0x58>)
   841b0:	889b      	ldrh	r3, [r3, #4]
   841b2:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   841b4:	4b0c      	ldr	r3, [pc, #48]	; (841e8 <udc_req_std_iface_set_setting+0x58>)
   841b6:	885b      	ldrh	r3, [r3, #2]
   841b8:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   841ba:	79fb      	ldrb	r3, [r7, #7]
   841bc:	4618      	mov	r0, r3
   841be:	4b0c      	ldr	r3, [pc, #48]	; (841f0 <udc_req_std_iface_set_setting+0x60>)
   841c0:	4798      	blx	r3
   841c2:	4603      	mov	r3, r0
   841c4:	f083 0301 	eor.w	r3, r3, #1
   841c8:	b2db      	uxtb	r3, r3
   841ca:	2b00      	cmp	r3, #0
   841cc:	d001      	beq.n	841d2 <udc_req_std_iface_set_setting+0x42>
		return false;
   841ce:	2300      	movs	r3, #0
   841d0:	e006      	b.n	841e0 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   841d2:	79ba      	ldrb	r2, [r7, #6]
   841d4:	79fb      	ldrb	r3, [r7, #7]
   841d6:	4611      	mov	r1, r2
   841d8:	4618      	mov	r0, r3
   841da:	4b06      	ldr	r3, [pc, #24]	; (841f4 <udc_req_std_iface_set_setting+0x64>)
   841dc:	4798      	blx	r3
   841de:	4603      	mov	r3, r0
}
   841e0:	4618      	mov	r0, r3
   841e2:	3708      	adds	r7, #8
   841e4:	46bd      	mov	sp, r7
   841e6:	bd80      	pop	{r7, pc}
   841e8:	20001828 	.word	0x20001828
   841ec:	20001336 	.word	0x20001336
   841f0:	000838b1 	.word	0x000838b1
   841f4:	00083951 	.word	0x00083951

000841f8 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   841f8:	b580      	push	{r7, lr}
   841fa:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   841fc:	4b55      	ldr	r3, [pc, #340]	; (84354 <udc_reqstd+0x15c>)
   841fe:	781b      	ldrb	r3, [r3, #0]
   84200:	b25b      	sxtb	r3, r3
   84202:	2b00      	cmp	r3, #0
   84204:	da44      	bge.n	84290 <udc_reqstd+0x98>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   84206:	4b53      	ldr	r3, [pc, #332]	; (84354 <udc_reqstd+0x15c>)
   84208:	88db      	ldrh	r3, [r3, #6]
   8420a:	2b00      	cmp	r3, #0
   8420c:	d101      	bne.n	84212 <udc_reqstd+0x1a>
			return false; // Error for USB host
   8420e:	2300      	movs	r3, #0
   84210:	e09d      	b.n	8434e <udc_reqstd+0x156>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84212:	4b50      	ldr	r3, [pc, #320]	; (84354 <udc_reqstd+0x15c>)
   84214:	781b      	ldrb	r3, [r3, #0]
   84216:	f003 031f 	and.w	r3, r3, #31
   8421a:	2b00      	cmp	r3, #0
   8421c:	d116      	bne.n	8424c <udc_reqstd+0x54>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   8421e:	4b4d      	ldr	r3, [pc, #308]	; (84354 <udc_reqstd+0x15c>)
   84220:	785b      	ldrb	r3, [r3, #1]
   84222:	2b08      	cmp	r3, #8
   84224:	d00e      	beq.n	84244 <udc_reqstd+0x4c>
   84226:	2b08      	cmp	r3, #8
   84228:	dc12      	bgt.n	84250 <udc_reqstd+0x58>
   8422a:	2b00      	cmp	r3, #0
   8422c:	d002      	beq.n	84234 <udc_reqstd+0x3c>
   8422e:	2b06      	cmp	r3, #6
   84230:	d004      	beq.n	8423c <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   84232:	e00d      	b.n	84250 <udc_reqstd+0x58>
				return udc_req_std_dev_get_status();
   84234:	4b48      	ldr	r3, [pc, #288]	; (84358 <udc_reqstd+0x160>)
   84236:	4798      	blx	r3
   84238:	4603      	mov	r3, r0
   8423a:	e088      	b.n	8434e <udc_reqstd+0x156>
				return udc_req_std_dev_get_descriptor();
   8423c:	4b47      	ldr	r3, [pc, #284]	; (8435c <udc_reqstd+0x164>)
   8423e:	4798      	blx	r3
   84240:	4603      	mov	r3, r0
   84242:	e084      	b.n	8434e <udc_reqstd+0x156>
				return udc_req_std_dev_get_configuration();
   84244:	4b46      	ldr	r3, [pc, #280]	; (84360 <udc_reqstd+0x168>)
   84246:	4798      	blx	r3
   84248:	4603      	mov	r3, r0
   8424a:	e080      	b.n	8434e <udc_reqstd+0x156>
			}
		}
   8424c:	bf00      	nop
   8424e:	e000      	b.n	84252 <udc_reqstd+0x5a>
				break;
   84250:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84252:	4b40      	ldr	r3, [pc, #256]	; (84354 <udc_reqstd+0x15c>)
   84254:	781b      	ldrb	r3, [r3, #0]
   84256:	f003 031f 	and.w	r3, r3, #31
   8425a:	2b01      	cmp	r3, #1
   8425c:	d107      	bne.n	8426e <udc_reqstd+0x76>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   8425e:	4b3d      	ldr	r3, [pc, #244]	; (84354 <udc_reqstd+0x15c>)
   84260:	785b      	ldrb	r3, [r3, #1]
   84262:	2b0a      	cmp	r3, #10
   84264:	d105      	bne.n	84272 <udc_reqstd+0x7a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   84266:	4b3f      	ldr	r3, [pc, #252]	; (84364 <udc_reqstd+0x16c>)
   84268:	4798      	blx	r3
   8426a:	4603      	mov	r3, r0
   8426c:	e06f      	b.n	8434e <udc_reqstd+0x156>
			default:
				break;
			}
		}
   8426e:	bf00      	nop
   84270:	e000      	b.n	84274 <udc_reqstd+0x7c>
				break;
   84272:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84274:	4b37      	ldr	r3, [pc, #220]	; (84354 <udc_reqstd+0x15c>)
   84276:	781b      	ldrb	r3, [r3, #0]
   84278:	f003 031f 	and.w	r3, r3, #31
   8427c:	2b02      	cmp	r3, #2
   8427e:	d160      	bne.n	84342 <udc_reqstd+0x14a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   84280:	4b34      	ldr	r3, [pc, #208]	; (84354 <udc_reqstd+0x15c>)
   84282:	785b      	ldrb	r3, [r3, #1]
   84284:	2b00      	cmp	r3, #0
   84286:	d15e      	bne.n	84346 <udc_reqstd+0x14e>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   84288:	4b37      	ldr	r3, [pc, #220]	; (84368 <udc_reqstd+0x170>)
   8428a:	4798      	blx	r3
   8428c:	4603      	mov	r3, r0
   8428e:	e05e      	b.n	8434e <udc_reqstd+0x156>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84290:	4b30      	ldr	r3, [pc, #192]	; (84354 <udc_reqstd+0x15c>)
   84292:	781b      	ldrb	r3, [r3, #0]
   84294:	f003 031f 	and.w	r3, r3, #31
   84298:	2b00      	cmp	r3, #0
   8429a:	d129      	bne.n	842f0 <udc_reqstd+0xf8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   8429c:	4b2d      	ldr	r3, [pc, #180]	; (84354 <udc_reqstd+0x15c>)
   8429e:	785b      	ldrb	r3, [r3, #1]
   842a0:	3b01      	subs	r3, #1
   842a2:	2b08      	cmp	r3, #8
   842a4:	d826      	bhi.n	842f4 <udc_reqstd+0xfc>
   842a6:	a201      	add	r2, pc, #4	; (adr r2, 842ac <udc_reqstd+0xb4>)
   842a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   842ac:	000842d9 	.word	0x000842d9
   842b0:	000842f5 	.word	0x000842f5
   842b4:	000842e1 	.word	0x000842e1
   842b8:	000842f5 	.word	0x000842f5
   842bc:	000842d1 	.word	0x000842d1
   842c0:	000842f5 	.word	0x000842f5
   842c4:	000842f5 	.word	0x000842f5
   842c8:	000842f5 	.word	0x000842f5
   842cc:	000842e9 	.word	0x000842e9
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   842d0:	4b26      	ldr	r3, [pc, #152]	; (8436c <udc_reqstd+0x174>)
   842d2:	4798      	blx	r3
   842d4:	4603      	mov	r3, r0
   842d6:	e03a      	b.n	8434e <udc_reqstd+0x156>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   842d8:	4b25      	ldr	r3, [pc, #148]	; (84370 <udc_reqstd+0x178>)
   842da:	4798      	blx	r3
   842dc:	4603      	mov	r3, r0
   842de:	e036      	b.n	8434e <udc_reqstd+0x156>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   842e0:	4b24      	ldr	r3, [pc, #144]	; (84374 <udc_reqstd+0x17c>)
   842e2:	4798      	blx	r3
   842e4:	4603      	mov	r3, r0
   842e6:	e032      	b.n	8434e <udc_reqstd+0x156>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   842e8:	4b23      	ldr	r3, [pc, #140]	; (84378 <udc_reqstd+0x180>)
   842ea:	4798      	blx	r3
   842ec:	4603      	mov	r3, r0
   842ee:	e02e      	b.n	8434e <udc_reqstd+0x156>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   842f0:	bf00      	nop
   842f2:	e000      	b.n	842f6 <udc_reqstd+0xfe>
				break;
   842f4:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   842f6:	4b17      	ldr	r3, [pc, #92]	; (84354 <udc_reqstd+0x15c>)
   842f8:	781b      	ldrb	r3, [r3, #0]
   842fa:	f003 031f 	and.w	r3, r3, #31
   842fe:	2b01      	cmp	r3, #1
   84300:	d107      	bne.n	84312 <udc_reqstd+0x11a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   84302:	4b14      	ldr	r3, [pc, #80]	; (84354 <udc_reqstd+0x15c>)
   84304:	785b      	ldrb	r3, [r3, #1]
   84306:	2b0b      	cmp	r3, #11
   84308:	d105      	bne.n	84316 <udc_reqstd+0x11e>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   8430a:	4b1c      	ldr	r3, [pc, #112]	; (8437c <udc_reqstd+0x184>)
   8430c:	4798      	blx	r3
   8430e:	4603      	mov	r3, r0
   84310:	e01d      	b.n	8434e <udc_reqstd+0x156>
			default:
				break;
			}
		}
   84312:	bf00      	nop
   84314:	e000      	b.n	84318 <udc_reqstd+0x120>
				break;
   84316:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84318:	4b0e      	ldr	r3, [pc, #56]	; (84354 <udc_reqstd+0x15c>)
   8431a:	781b      	ldrb	r3, [r3, #0]
   8431c:	f003 031f 	and.w	r3, r3, #31
   84320:	2b02      	cmp	r3, #2
   84322:	d112      	bne.n	8434a <udc_reqstd+0x152>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   84324:	4b0b      	ldr	r3, [pc, #44]	; (84354 <udc_reqstd+0x15c>)
   84326:	785b      	ldrb	r3, [r3, #1]
   84328:	2b01      	cmp	r3, #1
   8432a:	d002      	beq.n	84332 <udc_reqstd+0x13a>
   8432c:	2b03      	cmp	r3, #3
   8432e:	d004      	beq.n	8433a <udc_reqstd+0x142>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   84330:	e00c      	b.n	8434c <udc_reqstd+0x154>
				return udc_req_std_ep_clear_feature();
   84332:	4b13      	ldr	r3, [pc, #76]	; (84380 <udc_reqstd+0x188>)
   84334:	4798      	blx	r3
   84336:	4603      	mov	r3, r0
   84338:	e009      	b.n	8434e <udc_reqstd+0x156>
				return udc_req_std_ep_set_feature();
   8433a:	4b12      	ldr	r3, [pc, #72]	; (84384 <udc_reqstd+0x18c>)
   8433c:	4798      	blx	r3
   8433e:	4603      	mov	r3, r0
   84340:	e005      	b.n	8434e <udc_reqstd+0x156>
		}
   84342:	bf00      	nop
   84344:	e002      	b.n	8434c <udc_reqstd+0x154>
				break;
   84346:	bf00      	nop
   84348:	e000      	b.n	8434c <udc_reqstd+0x154>
			}
		}
   8434a:	bf00      	nop
#endif
	}
	return false;
   8434c:	2300      	movs	r3, #0
}
   8434e:	4618      	mov	r0, r3
   84350:	bd80      	pop	{r7, pc}
   84352:	bf00      	nop
   84354:	20001828 	.word	0x20001828
   84358:	00083aad 	.word	0x00083aad
   8435c:	00083dad 	.word	0x00083dad
   84360:	00083fc9 	.word	0x00083fc9
   84364:	000840f9 	.word	0x000840f9
   84368:	00083ad9 	.word	0x00083ad9
   8436c:	00083cb9 	.word	0x00083cb9
   84370:	00083b1d 	.word	0x00083b1d
   84374:	00083b91 	.word	0x00083b91
   84378:	00083ff5 	.word	0x00083ff5
   8437c:	00084191 	.word	0x00084191
   84380:	00083b59 	.word	0x00083b59
   84384:	00083c4d 	.word	0x00083c4d

00084388 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   84388:	b580      	push	{r7, lr}
   8438a:	b082      	sub	sp, #8
   8438c:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   8438e:	4b20      	ldr	r3, [pc, #128]	; (84410 <udc_req_iface+0x88>)
   84390:	781b      	ldrb	r3, [r3, #0]
   84392:	2b00      	cmp	r3, #0
   84394:	d101      	bne.n	8439a <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   84396:	2300      	movs	r3, #0
   84398:	e036      	b.n	84408 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8439a:	4b1e      	ldr	r3, [pc, #120]	; (84414 <udc_req_iface+0x8c>)
   8439c:	889b      	ldrh	r3, [r3, #4]
   8439e:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   843a0:	4b1d      	ldr	r3, [pc, #116]	; (84418 <udc_req_iface+0x90>)
   843a2:	681b      	ldr	r3, [r3, #0]
   843a4:	681b      	ldr	r3, [r3, #0]
   843a6:	791b      	ldrb	r3, [r3, #4]
   843a8:	79fa      	ldrb	r2, [r7, #7]
   843aa:	429a      	cmp	r2, r3
   843ac:	d301      	bcc.n	843b2 <udc_req_iface+0x2a>
		return false;
   843ae:	2300      	movs	r3, #0
   843b0:	e02a      	b.n	84408 <udc_req_iface+0x80>
=======
00083ab0 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   83ab0:	b580      	push	{r7, lr}
   83ab2:	b086      	sub	sp, #24
   83ab4:	af00      	add	r7, sp, #0
   83ab6:	4603      	mov	r3, r0
   83ab8:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   83aba:	2300      	movs	r3, #0
   83abc:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   83abe:	79fb      	ldrb	r3, [r7, #7]
   83ac0:	1e5a      	subs	r2, r3, #1
   83ac2:	4613      	mov	r3, r2
   83ac4:	005b      	lsls	r3, r3, #1
   83ac6:	4413      	add	r3, r2
   83ac8:	00db      	lsls	r3, r3, #3
   83aca:	4a6d      	ldr	r2, [pc, #436]	; (83c80 <udd_ep_trans_done+0x1d0>)
   83acc:	4413      	add	r3, r2
   83ace:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   83ad0:	68fb      	ldr	r3, [r7, #12]
   83ad2:	7d1b      	ldrb	r3, [r3, #20]
   83ad4:	f003 0301 	and.w	r3, r3, #1
   83ad8:	b2db      	uxtb	r3, r3
   83ada:	2b00      	cmp	r3, #0
   83adc:	f000 80cc 	beq.w	83c78 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   83ae0:	68fb      	ldr	r3, [r7, #12]
   83ae2:	68da      	ldr	r2, [r3, #12]
   83ae4:	68fb      	ldr	r3, [r7, #12]
   83ae6:	689b      	ldr	r3, [r3, #8]
   83ae8:	429a      	cmp	r2, r3
   83aea:	f000 8099 	beq.w	83c20 <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   83aee:	68fb      	ldr	r3, [r7, #12]
   83af0:	689a      	ldr	r2, [r3, #8]
   83af2:	68fb      	ldr	r3, [r7, #12]
   83af4:	68db      	ldr	r3, [r3, #12]
   83af6:	1ad3      	subs	r3, r2, r3
   83af8:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   83afa:	693b      	ldr	r3, [r7, #16]
   83afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   83b00:	d905      	bls.n	83b0e <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   83b06:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   83b08:	2300      	movs	r3, #0
   83b0a:	617b      	str	r3, [r7, #20]
   83b0c:	e002      	b.n	83b14 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   83b0e:	693b      	ldr	r3, [r7, #16]
   83b10:	041b      	lsls	r3, r3, #16
   83b12:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   83b14:	4a5b      	ldr	r2, [pc, #364]	; (83c84 <udd_ep_trans_done+0x1d4>)
   83b16:	79fb      	ldrb	r3, [r7, #7]
   83b18:	3308      	adds	r3, #8
   83b1a:	015b      	lsls	r3, r3, #5
   83b1c:	4413      	add	r3, r2
   83b1e:	681b      	ldr	r3, [r3, #0]
   83b20:	f003 0308 	and.w	r3, r3, #8
   83b24:	2b00      	cmp	r3, #0
   83b26:	d01d      	beq.n	83b64 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   83b28:	4a56      	ldr	r2, [pc, #344]	; (83c84 <udd_ep_trans_done+0x1d4>)
   83b2a:	79fb      	ldrb	r3, [r7, #7]
   83b2c:	3308      	adds	r3, #8
   83b2e:	015b      	lsls	r3, r3, #5
   83b30:	4413      	add	r3, r2
   83b32:	681b      	ldr	r3, [r3, #0]
   83b34:	f003 0307 	and.w	r3, r3, #7
   83b38:	2208      	movs	r2, #8
   83b3a:	fa02 f303 	lsl.w	r3, r2, r3
   83b3e:	461a      	mov	r2, r3
   83b40:	693b      	ldr	r3, [r7, #16]
   83b42:	fbb3 f1f2 	udiv	r1, r3, r2
   83b46:	fb02 f201 	mul.w	r2, r2, r1
   83b4a:	1a9b      	subs	r3, r3, r2
   83b4c:	2b00      	cmp	r3, #0
   83b4e:	d027      	beq.n	83ba0 <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   83b50:	697b      	ldr	r3, [r7, #20]
   83b52:	f043 0308 	orr.w	r3, r3, #8
   83b56:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   83b58:	68fa      	ldr	r2, [r7, #12]
   83b5a:	7d13      	ldrb	r3, [r2, #20]
   83b5c:	f36f 0341 	bfc	r3, #1, #1
   83b60:	7513      	strb	r3, [r2, #20]
   83b62:	e01d      	b.n	83ba0 <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   83b64:	4a47      	ldr	r2, [pc, #284]	; (83c84 <udd_ep_trans_done+0x1d4>)
   83b66:	79fb      	ldrb	r3, [r7, #7]
   83b68:	3308      	adds	r3, #8
   83b6a:	015b      	lsls	r3, r3, #5
   83b6c:	4413      	add	r3, r2
   83b6e:	681b      	ldr	r3, [r3, #0]
   83b70:	091b      	lsrs	r3, r3, #4
   83b72:	f003 0303 	and.w	r3, r3, #3
   83b76:	2b01      	cmp	r3, #1
   83b78:	d10e      	bne.n	83b98 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83b7a:	4a42      	ldr	r2, [pc, #264]	; (83c84 <udd_ep_trans_done+0x1d4>)
   83b7c:	79fb      	ldrb	r3, [r7, #7]
   83b7e:	3308      	adds	r3, #8
   83b80:	015b      	lsls	r3, r3, #5
   83b82:	4413      	add	r3, r2
   83b84:	681b      	ldr	r3, [r3, #0]
   83b86:	f003 0307 	and.w	r3, r3, #7
   83b8a:	2208      	movs	r2, #8
   83b8c:	fa02 f303 	lsl.w	r3, r2, r3
   83b90:	461a      	mov	r2, r3
   83b92:	693b      	ldr	r3, [r7, #16]
   83b94:	4293      	cmp	r3, r2
   83b96:	d803      	bhi.n	83ba0 <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   83b98:	697b      	ldr	r3, [r7, #20]
   83b9a:	f043 0314 	orr.w	r3, r3, #20
   83b9e:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   83ba0:	68fb      	ldr	r3, [r7, #12]
   83ba2:	685a      	ldr	r2, [r3, #4]
   83ba4:	68fb      	ldr	r3, [r7, #12]
   83ba6:	68db      	ldr	r3, [r3, #12]
   83ba8:	18d1      	adds	r1, r2, r3
   83baa:	79fb      	ldrb	r3, [r7, #7]
   83bac:	011a      	lsls	r2, r3, #4
   83bae:	4b36      	ldr	r3, [pc, #216]	; (83c88 <udd_ep_trans_done+0x1d8>)
   83bb0:	4413      	add	r3, r2
   83bb2:	460a      	mov	r2, r1
   83bb4:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   83bb6:	697b      	ldr	r3, [r7, #20]
   83bb8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   83bbc:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   83bbe:	4b33      	ldr	r3, [pc, #204]	; (83c8c <udd_ep_trans_done+0x1dc>)
   83bc0:	4798      	blx	r3
   83bc2:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   83bc4:	79fb      	ldrb	r3, [r7, #7]
   83bc6:	011a      	lsls	r2, r3, #4
   83bc8:	4b2f      	ldr	r3, [pc, #188]	; (83c88 <udd_ep_trans_done+0x1d8>)
   83bca:	4413      	add	r3, r2
   83bcc:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   83bce:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   83bd2:	2b00      	cmp	r3, #0
   83bd4:	d11d      	bne.n	83c12 <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   83bd6:	79fb      	ldrb	r3, [r7, #7]
   83bd8:	011a      	lsls	r2, r3, #4
   83bda:	4b2b      	ldr	r3, [pc, #172]	; (83c88 <udd_ep_trans_done+0x1d8>)
   83bdc:	4413      	add	r3, r2
   83bde:	697a      	ldr	r2, [r7, #20]
   83be0:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   83be2:	68fb      	ldr	r3, [r7, #12]
   83be4:	68da      	ldr	r2, [r3, #12]
   83be6:	693b      	ldr	r3, [r7, #16]
   83be8:	441a      	add	r2, r3
   83bea:	68fb      	ldr	r3, [r7, #12]
   83bec:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   83bee:	68fb      	ldr	r3, [r7, #12]
   83bf0:	693a      	ldr	r2, [r7, #16]
   83bf2:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   83bf4:	4b23      	ldr	r3, [pc, #140]	; (83c84 <udd_ep_trans_done+0x1d4>)
   83bf6:	691a      	ldr	r2, [r3, #16]
   83bf8:	79fb      	ldrb	r3, [r7, #7]
   83bfa:	3b01      	subs	r3, #1
   83bfc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83c00:	fa01 f303 	lsl.w	r3, r1, r3
   83c04:	491f      	ldr	r1, [pc, #124]	; (83c84 <udd_ep_trans_done+0x1d4>)
   83c06:	4313      	orrs	r3, r2
   83c08:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   83c0a:	68b8      	ldr	r0, [r7, #8]
   83c0c:	4b20      	ldr	r3, [pc, #128]	; (83c90 <udd_ep_trans_done+0x1e0>)
   83c0e:	4798      	blx	r3
			return;
   83c10:	e033      	b.n	83c7a <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   83c12:	68b8      	ldr	r0, [r7, #8]
   83c14:	4b1e      	ldr	r3, [pc, #120]	; (83c90 <udd_ep_trans_done+0x1e0>)
   83c16:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   83c18:	68fb      	ldr	r3, [r7, #12]
   83c1a:	68da      	ldr	r2, [r3, #12]
   83c1c:	68fb      	ldr	r3, [r7, #12]
   83c1e:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   83c20:	4a18      	ldr	r2, [pc, #96]	; (83c84 <udd_ep_trans_done+0x1d4>)
   83c22:	79fb      	ldrb	r3, [r7, #7]
   83c24:	3308      	adds	r3, #8
   83c26:	015b      	lsls	r3, r3, #5
   83c28:	4413      	add	r3, r2
   83c2a:	681b      	ldr	r3, [r3, #0]
   83c2c:	f003 0308 	and.w	r3, r3, #8
   83c30:	2b00      	cmp	r3, #0
   83c32:	d01a      	beq.n	83c6a <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   83c34:	68fb      	ldr	r3, [r7, #12]
   83c36:	7d1b      	ldrb	r3, [r3, #20]
   83c38:	f003 0302 	and.w	r3, r3, #2
   83c3c:	b2db      	uxtb	r3, r3
   83c3e:	2b00      	cmp	r3, #0
   83c40:	d013      	beq.n	83c6a <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   83c42:	4a10      	ldr	r2, [pc, #64]	; (83c84 <udd_ep_trans_done+0x1d4>)
   83c44:	79fb      	ldrb	r3, [r7, #7]
   83c46:	3308      	adds	r3, #8
   83c48:	015b      	lsls	r3, r3, #5
   83c4a:	4413      	add	r3, r2
   83c4c:	3304      	adds	r3, #4
   83c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83c52:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   83c54:	4b0b      	ldr	r3, [pc, #44]	; (83c84 <udd_ep_trans_done+0x1d4>)
   83c56:	691a      	ldr	r2, [r3, #16]
   83c58:	79fb      	ldrb	r3, [r7, #7]
   83c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
   83c5e:	fa01 f303 	lsl.w	r3, r1, r3
   83c62:	4908      	ldr	r1, [pc, #32]	; (83c84 <udd_ep_trans_done+0x1d4>)
   83c64:	4313      	orrs	r3, r2
   83c66:	610b      	str	r3, [r1, #16]
			return;
   83c68:	e007      	b.n	83c7a <udd_ep_trans_done+0x1ca>
		}
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   83c6a:	79fb      	ldrb	r3, [r7, #7]
   83c6c:	461a      	mov	r2, r3
   83c6e:	2100      	movs	r1, #0
   83c70:	68f8      	ldr	r0, [r7, #12]
   83c72:	4b08      	ldr	r3, [pc, #32]	; (83c94 <udd_ep_trans_done+0x1e4>)
   83c74:	4798      	blx	r3
   83c76:	e000      	b.n	83c7a <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   83c78:	bf00      	nop
}
   83c7a:	3718      	adds	r7, #24
   83c7c:	46bd      	mov	sp, r7
   83c7e:	bd80      	pop	{r7, pc}
   83c80:	20001328 	.word	0x20001328
   83c84:	400a4000 	.word	0x400a4000
   83c88:	400a4300 	.word	0x400a4300
   83c8c:	000822b1 	.word	0x000822b1
   83c90:	0008230d 	.word	0x0008230d
   83c94:	00083a41 	.word	0x00083a41

<<<<<<< HEAD
	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   843b2:	79fb      	ldrb	r3, [r7, #7]
   843b4:	2100      	movs	r1, #0
   843b6:	4618      	mov	r0, r3
   843b8:	4b18      	ldr	r3, [pc, #96]	; (8441c <udc_req_iface+0x94>)
   843ba:	4798      	blx	r3
   843bc:	4603      	mov	r3, r0
   843be:	f083 0301 	eor.w	r3, r3, #1
   843c2:	b2db      	uxtb	r3, r3
   843c4:	2b00      	cmp	r3, #0
   843c6:	d001      	beq.n	843cc <udc_req_iface+0x44>
		return false;
   843c8:	2300      	movs	r3, #0
   843ca:	e01d      	b.n	84408 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   843cc:	4b12      	ldr	r3, [pc, #72]	; (84418 <udc_req_iface+0x90>)
   843ce:	681b      	ldr	r3, [r3, #0]
   843d0:	685a      	ldr	r2, [r3, #4]
   843d2:	79fb      	ldrb	r3, [r7, #7]
   843d4:	009b      	lsls	r3, r3, #2
   843d6:	4413      	add	r3, r2
   843d8:	681b      	ldr	r3, [r3, #0]
   843da:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   843dc:	683b      	ldr	r3, [r7, #0]
   843de:	68db      	ldr	r3, [r3, #12]
   843e0:	4798      	blx	r3
   843e2:	4603      	mov	r3, r0
   843e4:	461a      	mov	r2, r3
   843e6:	79fb      	ldrb	r3, [r7, #7]
   843e8:	4611      	mov	r1, r2
   843ea:	4618      	mov	r0, r3
   843ec:	4b0b      	ldr	r3, [pc, #44]	; (8441c <udc_req_iface+0x94>)
   843ee:	4798      	blx	r3
   843f0:	4603      	mov	r3, r0
   843f2:	f083 0301 	eor.w	r3, r3, #1
   843f6:	b2db      	uxtb	r3, r3
   843f8:	2b00      	cmp	r3, #0
   843fa:	d001      	beq.n	84400 <udc_req_iface+0x78>
		return false;
   843fc:	2300      	movs	r3, #0
   843fe:	e003      	b.n	84408 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   84400:	683b      	ldr	r3, [r7, #0]
   84402:	689b      	ldr	r3, [r3, #8]
   84404:	4798      	blx	r3
   84406:	4603      	mov	r3, r0
}
   84408:	4618      	mov	r0, r3
   8440a:	3708      	adds	r7, #8
   8440c:	46bd      	mov	sp, r7
   8440e:	bd80      	pop	{r7, pc}
   84410:	20001336 	.word	0x20001336
   84414:	20001828 	.word	0x20001828
   84418:	20001338 	.word	0x20001338
   8441c:	00083815 	.word	0x00083815

00084420 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   84420:	b580      	push	{r7, lr}
   84422:	b082      	sub	sp, #8
   84424:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   84426:	4b1e      	ldr	r3, [pc, #120]	; (844a0 <udc_req_ep+0x80>)
   84428:	781b      	ldrb	r3, [r3, #0]
   8442a:	2b00      	cmp	r3, #0
   8442c:	d101      	bne.n	84432 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   8442e:	2300      	movs	r3, #0
   84430:	e032      	b.n	84498 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84432:	4b1c      	ldr	r3, [pc, #112]	; (844a4 <udc_req_ep+0x84>)
   84434:	889b      	ldrh	r3, [r3, #4]
   84436:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84438:	2300      	movs	r3, #0
   8443a:	71fb      	strb	r3, [r7, #7]
   8443c:	e024      	b.n	84488 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   8443e:	4b1a      	ldr	r3, [pc, #104]	; (844a8 <udc_req_ep+0x88>)
   84440:	681b      	ldr	r3, [r3, #0]
   84442:	685a      	ldr	r2, [r3, #4]
   84444:	79fb      	ldrb	r3, [r7, #7]
   84446:	009b      	lsls	r3, r3, #2
   84448:	4413      	add	r3, r2
   8444a:	681b      	ldr	r3, [r3, #0]
   8444c:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8444e:	683b      	ldr	r3, [r7, #0]
   84450:	68db      	ldr	r3, [r3, #12]
   84452:	4798      	blx	r3
   84454:	4603      	mov	r3, r0
   84456:	461a      	mov	r2, r3
   84458:	79fb      	ldrb	r3, [r7, #7]
   8445a:	4611      	mov	r1, r2
   8445c:	4618      	mov	r0, r3
   8445e:	4b13      	ldr	r3, [pc, #76]	; (844ac <udc_req_ep+0x8c>)
   84460:	4798      	blx	r3
   84462:	4603      	mov	r3, r0
   84464:	f083 0301 	eor.w	r3, r3, #1
   84468:	b2db      	uxtb	r3, r3
   8446a:	2b00      	cmp	r3, #0
   8446c:	d001      	beq.n	84472 <udc_req_ep+0x52>
			return false;
   8446e:	2300      	movs	r3, #0
   84470:	e012      	b.n	84498 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   84472:	683b      	ldr	r3, [r7, #0]
   84474:	689b      	ldr	r3, [r3, #8]
   84476:	4798      	blx	r3
   84478:	4603      	mov	r3, r0
   8447a:	2b00      	cmp	r3, #0
   8447c:	d001      	beq.n	84482 <udc_req_ep+0x62>
			return true;
   8447e:	2301      	movs	r3, #1
   84480:	e00a      	b.n	84498 <udc_req_ep+0x78>
			iface_num++) {
   84482:	79fb      	ldrb	r3, [r7, #7]
   84484:	3301      	adds	r3, #1
   84486:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84488:	4b07      	ldr	r3, [pc, #28]	; (844a8 <udc_req_ep+0x88>)
   8448a:	681b      	ldr	r3, [r3, #0]
   8448c:	681b      	ldr	r3, [r3, #0]
   8448e:	791b      	ldrb	r3, [r3, #4]
   84490:	79fa      	ldrb	r2, [r7, #7]
   84492:	429a      	cmp	r2, r3
   84494:	d3d3      	bcc.n	8443e <udc_req_ep+0x1e>
		}
	}
	return false;
   84496:	2300      	movs	r3, #0
}
   84498:	4618      	mov	r0, r3
   8449a:	3708      	adds	r7, #8
   8449c:	46bd      	mov	sp, r7
   8449e:	bd80      	pop	{r7, pc}
   844a0:	20001336 	.word	0x20001336
   844a4:	20001828 	.word	0x20001828
   844a8:	20001338 	.word	0x20001338
   844ac:	00083815 	.word	0x00083815

000844b0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   844b0:	b580      	push	{r7, lr}
   844b2:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   844b4:	4b25      	ldr	r3, [pc, #148]	; (8454c <udc_process_setup+0x9c>)
   844b6:	2200      	movs	r2, #0
   844b8:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   844ba:	4b24      	ldr	r3, [pc, #144]	; (8454c <udc_process_setup+0x9c>)
   844bc:	2200      	movs	r2, #0
   844be:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   844c0:	4b22      	ldr	r3, [pc, #136]	; (8454c <udc_process_setup+0x9c>)
   844c2:	2200      	movs	r2, #0
   844c4:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   844c6:	4b21      	ldr	r3, [pc, #132]	; (8454c <udc_process_setup+0x9c>)
   844c8:	781b      	ldrb	r3, [r3, #0]
   844ca:	2bc0      	cmp	r3, #192	; 0xc0
   844cc:	d109      	bne.n	844e2 <udc_process_setup+0x32>
   844ce:	4b1f      	ldr	r3, [pc, #124]	; (8454c <udc_process_setup+0x9c>)
   844d0:	785b      	ldrb	r3, [r3, #1]
   844d2:	2b01      	cmp	r3, #1
   844d4:	d105      	bne.n	844e2 <udc_process_setup+0x32>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   844d6:	219e      	movs	r1, #158	; 0x9e
   844d8:	481d      	ldr	r0, [pc, #116]	; (84550 <udc_process_setup+0xa0>)
   844da:	4b1e      	ldr	r3, [pc, #120]	; (84554 <udc_process_setup+0xa4>)
   844dc:	4798      	blx	r3
		return true;
   844de:	2301      	movs	r3, #1
   844e0:	e032      	b.n	84548 <udc_process_setup+0x98>
	}

	if (Udd_setup_is_in()) {
   844e2:	4b1a      	ldr	r3, [pc, #104]	; (8454c <udc_process_setup+0x9c>)
   844e4:	781b      	ldrb	r3, [r3, #0]
   844e6:	b25b      	sxtb	r3, r3
   844e8:	2b00      	cmp	r3, #0
   844ea:	da05      	bge.n	844f8 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   844ec:	4b17      	ldr	r3, [pc, #92]	; (8454c <udc_process_setup+0x9c>)
   844ee:	88db      	ldrh	r3, [r3, #6]
   844f0:	2b00      	cmp	r3, #0
   844f2:	d101      	bne.n	844f8 <udc_process_setup+0x48>
			return false; // Error from USB host
   844f4:	2300      	movs	r3, #0
   844f6:	e027      	b.n	84548 <udc_process_setup+0x98>
=======
00083c98 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   83c98:	b580      	push	{r7, lr}
   83c9a:	b084      	sub	sp, #16
   83c9c:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   83c9e:	2301      	movs	r3, #1
   83ca0:	73fb      	strb	r3, [r7, #15]
   83ca2:	e0e0      	b.n	83e66 <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   83ca4:	7bfb      	ldrb	r3, [r7, #15]
   83ca6:	1e5a      	subs	r2, r3, #1
   83ca8:	4613      	mov	r3, r2
   83caa:	005b      	lsls	r3, r3, #1
   83cac:	4413      	add	r3, r2
   83cae:	00db      	lsls	r3, r3, #3
   83cb0:	4a71      	ldr	r2, [pc, #452]	; (83e78 <udd_ep_interrupt+0x1e0>)
   83cb2:	4413      	add	r3, r2
   83cb4:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   83cb6:	4b71      	ldr	r3, [pc, #452]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83cb8:	691a      	ldr	r2, [r3, #16]
   83cba:	7bfb      	ldrb	r3, [r7, #15]
   83cbc:	3b01      	subs	r3, #1
   83cbe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83cc2:	fa01 f303 	lsl.w	r3, r1, r3
   83cc6:	4013      	ands	r3, r2
   83cc8:	2b00      	cmp	r3, #0
   83cca:	d03c      	beq.n	83d46 <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   83ccc:	4b6b      	ldr	r3, [pc, #428]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83cce:	695a      	ldr	r2, [r3, #20]
   83cd0:	7bfb      	ldrb	r3, [r7, #15]
   83cd2:	3b01      	subs	r3, #1
   83cd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83cd8:	fa01 f303 	lsl.w	r3, r1, r3
   83cdc:	4013      	ands	r3, r2
   83cde:	2b00      	cmp	r3, #0
   83ce0:	d031      	beq.n	83d46 <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   83ce2:	7bfb      	ldrb	r3, [r7, #15]
   83ce4:	011a      	lsls	r2, r3, #4
   83ce6:	4b66      	ldr	r3, [pc, #408]	; (83e80 <udd_ep_interrupt+0x1e8>)
   83ce8:	4413      	add	r3, r2
   83cea:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   83cec:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   83cf0:	2b00      	cmp	r3, #0
   83cf2:	d001      	beq.n	83cf8 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   83cf4:	2301      	movs	r3, #1
   83cf6:	e0bb      	b.n	83e70 <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   83cf8:	4b60      	ldr	r3, [pc, #384]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83cfa:	691a      	ldr	r2, [r3, #16]
   83cfc:	7bfb      	ldrb	r3, [r7, #15]
   83cfe:	3b01      	subs	r3, #1
   83d00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   83d04:	fa01 f303 	lsl.w	r3, r1, r3
   83d08:	43db      	mvns	r3, r3
   83d0a:	495c      	ldr	r1, [pc, #368]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83d0c:	4013      	ands	r3, r2
   83d0e:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   83d10:	7bfb      	ldrb	r3, [r7, #15]
   83d12:	011a      	lsls	r2, r3, #4
   83d14:	4b5a      	ldr	r3, [pc, #360]	; (83e80 <udd_ep_interrupt+0x1e8>)
   83d16:	4413      	add	r3, r2
   83d18:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   83d1a:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   83d1c:	b29b      	uxth	r3, r3
   83d1e:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   83d20:	687b      	ldr	r3, [r7, #4]
   83d22:	2b00      	cmp	r3, #0
   83d24:	d009      	beq.n	83d3a <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   83d26:	68bb      	ldr	r3, [r7, #8]
   83d28:	68da      	ldr	r2, [r3, #12]
   83d2a:	687b      	ldr	r3, [r7, #4]
   83d2c:	1ad2      	subs	r2, r2, r3
   83d2e:	68bb      	ldr	r3, [r7, #8]
   83d30:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   83d32:	68bb      	ldr	r3, [r7, #8]
   83d34:	68da      	ldr	r2, [r3, #12]
   83d36:	68bb      	ldr	r3, [r7, #8]
   83d38:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   83d3a:	7bfb      	ldrb	r3, [r7, #15]
   83d3c:	4618      	mov	r0, r3
   83d3e:	4b51      	ldr	r3, [pc, #324]	; (83e84 <udd_ep_interrupt+0x1ec>)
   83d40:	4798      	blx	r3
			return true;
   83d42:	2301      	movs	r3, #1
   83d44:	e094      	b.n	83e70 <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   83d46:	4b4d      	ldr	r3, [pc, #308]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83d48:	691a      	ldr	r2, [r3, #16]
   83d4a:	7bfb      	ldrb	r3, [r7, #15]
   83d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
   83d50:	fa01 f303 	lsl.w	r3, r1, r3
   83d54:	4013      	ands	r3, r2
   83d56:	2b00      	cmp	r3, #0
   83d58:	f000 8082 	beq.w	83e60 <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   83d5c:	4a47      	ldr	r2, [pc, #284]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83d5e:	7bfb      	ldrb	r3, [r7, #15]
   83d60:	015b      	lsls	r3, r3, #5
   83d62:	4413      	add	r3, r2
   83d64:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   83d68:	681b      	ldr	r3, [r3, #0]
   83d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   83d6e:	2b00      	cmp	r3, #0
   83d70:	d024      	beq.n	83dbc <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   83d72:	4a42      	ldr	r2, [pc, #264]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83d74:	7bfb      	ldrb	r3, [r7, #15]
   83d76:	015b      	lsls	r3, r3, #5
   83d78:	4413      	add	r3, r2
   83d7a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83d7e:	681b      	ldr	r3, [r3, #0]
   83d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   83d84:	2b00      	cmp	r3, #0
   83d86:	d119      	bne.n	83dbc <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   83d88:	4a3c      	ldr	r2, [pc, #240]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83d8a:	7bfb      	ldrb	r3, [r7, #15]
   83d8c:	015b      	lsls	r3, r3, #5
   83d8e:	4413      	add	r3, r2
   83d90:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83d94:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83d98:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   83d9a:	4a38      	ldr	r2, [pc, #224]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83d9c:	7bfb      	ldrb	r3, [r7, #15]
   83d9e:	015b      	lsls	r3, r3, #5
   83da0:	4413      	add	r3, r2
   83da2:	f503 738a 	add.w	r3, r3, #276	; 0x114
   83da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83daa:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   83dac:	7bfb      	ldrb	r3, [r7, #15]
   83dae:	461a      	mov	r2, r3
   83db0:	2100      	movs	r1, #0
   83db2:	68b8      	ldr	r0, [r7, #8]
   83db4:	4b34      	ldr	r3, [pc, #208]	; (83e88 <udd_ep_interrupt+0x1f0>)
   83db6:	4798      	blx	r3
				return true;
   83db8:	2301      	movs	r3, #1
   83dba:	e059      	b.n	83e70 <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   83dbc:	4a2f      	ldr	r2, [pc, #188]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83dbe:	7bfb      	ldrb	r3, [r7, #15]
   83dc0:	015b      	lsls	r3, r3, #5
   83dc2:	4413      	add	r3, r2
   83dc4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   83dc8:	681b      	ldr	r3, [r3, #0]
   83dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   83dce:	2b00      	cmp	r3, #0
   83dd0:	d046      	beq.n	83e60 <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   83dd2:	4a2a      	ldr	r2, [pc, #168]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83dd4:	7bfb      	ldrb	r3, [r7, #15]
   83dd6:	015b      	lsls	r3, r3, #5
   83dd8:	4413      	add	r3, r2
   83dda:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83dde:	681b      	ldr	r3, [r3, #0]
   83de0:	0c9b      	lsrs	r3, r3, #18
   83de2:	f003 0303 	and.w	r3, r3, #3
   83de6:	2b00      	cmp	r3, #0
   83de8:	d13a      	bne.n	83e60 <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   83dea:	4a24      	ldr	r2, [pc, #144]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83dec:	7bfb      	ldrb	r3, [r7, #15]
   83dee:	015b      	lsls	r3, r3, #5
   83df0:	4413      	add	r3, r2
   83df2:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83df6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   83dfa:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   83dfc:	4b1f      	ldr	r3, [pc, #124]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83dfe:	691a      	ldr	r2, [r3, #16]
   83e00:	7bfb      	ldrb	r3, [r7, #15]
   83e02:	f44f 7180 	mov.w	r1, #256	; 0x100
   83e06:	fa01 f303 	lsl.w	r3, r1, r3
   83e0a:	43db      	mvns	r3, r3
   83e0c:	491b      	ldr	r1, [pc, #108]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83e0e:	4013      	ands	r3, r2
   83e10:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   83e12:	68ba      	ldr	r2, [r7, #8]
   83e14:	7d13      	ldrb	r3, [r2, #20]
   83e16:	f36f 0382 	bfc	r3, #2, #1
   83e1a:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   83e1c:	4a17      	ldr	r2, [pc, #92]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83e1e:	7bfb      	ldrb	r3, [r7, #15]
   83e20:	015b      	lsls	r3, r3, #5
   83e22:	4413      	add	r3, r2
   83e24:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83e28:	681a      	ldr	r2, [r3, #0]
   83e2a:	4914      	ldr	r1, [pc, #80]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83e2c:	7bfb      	ldrb	r3, [r7, #15]
   83e2e:	f022 0202 	bic.w	r2, r2, #2
   83e32:	015b      	lsls	r3, r3, #5
   83e34:	440b      	add	r3, r1
   83e36:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83e3a:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   83e3c:	4a0f      	ldr	r2, [pc, #60]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83e3e:	7bfb      	ldrb	r3, [r7, #15]
   83e40:	015b      	lsls	r3, r3, #5
   83e42:	4413      	add	r3, r2
   83e44:	f503 738a 	add.w	r3, r3, #276	; 0x114
   83e48:	2220      	movs	r2, #32
   83e4a:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   83e4c:	4a0b      	ldr	r2, [pc, #44]	; (83e7c <udd_ep_interrupt+0x1e4>)
   83e4e:	7bfb      	ldrb	r3, [r7, #15]
   83e50:	015b      	lsls	r3, r3, #5
   83e52:	4413      	add	r3, r2
   83e54:	f503 738c 	add.w	r3, r3, #280	; 0x118
   83e58:	2240      	movs	r2, #64	; 0x40
   83e5a:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   83e5c:	2301      	movs	r3, #1
   83e5e:	e007      	b.n	83e70 <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   83e60:	7bfb      	ldrb	r3, [r7, #15]
   83e62:	3301      	adds	r3, #1
   83e64:	73fb      	strb	r3, [r7, #15]
   83e66:	7bfb      	ldrb	r3, [r7, #15]
   83e68:	2b02      	cmp	r3, #2
   83e6a:	f67f af1b 	bls.w	83ca4 <udd_ep_interrupt+0xc>
			}
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
		}
	}
	return false;
   83e6e:	2300      	movs	r3, #0
}
   83e70:	4618      	mov	r0, r3
   83e72:	3710      	adds	r7, #16
   83e74:	46bd      	mov	sp, r7
   83e76:	bd80      	pop	{r7, pc}
   83e78:	20001328 	.word	0x20001328
   83e7c:	400a4000 	.word	0x400a4000
   83e80:	400a4300 	.word	0x400a4300
   83e84:	00083ab1 	.word	0x00083ab1
   83e88:	00083a41 	.word	0x00083a41

00083e8c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

<<<<<<< HEAD
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   844f8:	4b14      	ldr	r3, [pc, #80]	; (8454c <udc_process_setup+0x9c>)
   844fa:	781b      	ldrb	r3, [r3, #0]
   844fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84500:	2b00      	cmp	r3, #0
   84502:	d106      	bne.n	84512 <udc_process_setup+0x62>
		if (udc_reqstd()) {
   84504:	4b14      	ldr	r3, [pc, #80]	; (84558 <udc_process_setup+0xa8>)
   84506:	4798      	blx	r3
   84508:	4603      	mov	r3, r0
   8450a:	2b00      	cmp	r3, #0
   8450c:	d001      	beq.n	84512 <udc_process_setup+0x62>
			return true;
   8450e:	2301      	movs	r3, #1
   84510:	e01a      	b.n	84548 <udc_process_setup+0x98>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   84512:	4b0e      	ldr	r3, [pc, #56]	; (8454c <udc_process_setup+0x9c>)
   84514:	781b      	ldrb	r3, [r3, #0]
   84516:	f003 031f 	and.w	r3, r3, #31
   8451a:	2b01      	cmp	r3, #1
   8451c:	d106      	bne.n	8452c <udc_process_setup+0x7c>
		if (udc_req_iface()) {
   8451e:	4b0f      	ldr	r3, [pc, #60]	; (8455c <udc_process_setup+0xac>)
   84520:	4798      	blx	r3
   84522:	4603      	mov	r3, r0
   84524:	2b00      	cmp	r3, #0
   84526:	d001      	beq.n	8452c <udc_process_setup+0x7c>
			return true;
   84528:	2301      	movs	r3, #1
   8452a:	e00d      	b.n	84548 <udc_process_setup+0x98>
=======
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   83e8c:	b580      	push	{r7, lr}
   83e8e:	b086      	sub	sp, #24
   83e90:	af00      	add	r7, sp, #0
   83e92:	60f8      	str	r0, [r7, #12]
   83e94:	60b9      	str	r1, [r7, #8]
   83e96:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   83e98:	2300      	movs	r3, #0
   83e9a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   83e9c:	68fb      	ldr	r3, [r7, #12]
   83e9e:	2b01      	cmp	r3, #1
   83ea0:	d01e      	beq.n	83ee0 <_write+0x54>
   83ea2:	68fb      	ldr	r3, [r7, #12]
   83ea4:	2b02      	cmp	r3, #2
   83ea6:	d01b      	beq.n	83ee0 <_write+0x54>
   83ea8:	68fb      	ldr	r3, [r7, #12]
   83eaa:	2b03      	cmp	r3, #3
   83eac:	d018      	beq.n	83ee0 <_write+0x54>
		return -1;
   83eae:	f04f 33ff 	mov.w	r3, #4294967295
   83eb2:	e019      	b.n	83ee8 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   83eb4:	4b0e      	ldr	r3, [pc, #56]	; (83ef0 <_write+0x64>)
   83eb6:	681a      	ldr	r2, [r3, #0]
   83eb8:	4b0e      	ldr	r3, [pc, #56]	; (83ef4 <_write+0x68>)
   83eba:	6818      	ldr	r0, [r3, #0]
   83ebc:	68bb      	ldr	r3, [r7, #8]
   83ebe:	1c59      	adds	r1, r3, #1
   83ec0:	60b9      	str	r1, [r7, #8]
   83ec2:	781b      	ldrb	r3, [r3, #0]
   83ec4:	4619      	mov	r1, r3
   83ec6:	4790      	blx	r2
   83ec8:	4603      	mov	r3, r0
   83eca:	2b00      	cmp	r3, #0
   83ecc:	da02      	bge.n	83ed4 <_write+0x48>
			return -1;
   83ece:	f04f 33ff 	mov.w	r3, #4294967295
   83ed2:	e009      	b.n	83ee8 <_write+0x5c>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
		}
		++nChars;
   83ed4:	697b      	ldr	r3, [r7, #20]
   83ed6:	3301      	adds	r3, #1
   83ed8:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   83eda:	687b      	ldr	r3, [r7, #4]
   83edc:	3b01      	subs	r3, #1
   83ede:	607b      	str	r3, [r7, #4]
   83ee0:	687b      	ldr	r3, [r7, #4]
   83ee2:	2b00      	cmp	r3, #0
   83ee4:	d1e6      	bne.n	83eb4 <_write+0x28>
	}
<<<<<<< HEAD

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   8452c:	4b07      	ldr	r3, [pc, #28]	; (8454c <udc_process_setup+0x9c>)
   8452e:	781b      	ldrb	r3, [r3, #0]
   84530:	f003 031f 	and.w	r3, r3, #31
   84534:	2b02      	cmp	r3, #2
   84536:	d106      	bne.n	84546 <udc_process_setup+0x96>
		if (udc_req_ep()) {
   84538:	4b09      	ldr	r3, [pc, #36]	; (84560 <udc_process_setup+0xb0>)
   8453a:	4798      	blx	r3
   8453c:	4603      	mov	r3, r0
   8453e:	2b00      	cmp	r3, #0
   84540:	d001      	beq.n	84546 <udc_process_setup+0x96>
			return true;
   84542:	2301      	movs	r3, #1
   84544:	e000      	b.n	84548 <udc_process_setup+0x98>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   84546:	2300      	movs	r3, #0
#endif
}
   84548:	4618      	mov	r0, r3
   8454a:	bd80      	pop	{r7, pc}
   8454c:	20001828 	.word	0x20001828
   84550:	20000300 	.word	0x20000300
   84554:	00084c3d 	.word	0x00084c3d
   84558:	000841f9 	.word	0x000841f9
   8455c:	00084389 	.word	0x00084389
   84560:	00084421 	.word	0x00084421

00084564 <udi_vendor_enable>:
=======
	return nChars;
   83ee6:	697b      	ldr	r3, [r7, #20]
}
   83ee8:	4618      	mov	r0, r3
   83eea:	3718      	adds	r7, #24
   83eec:	46bd      	mov	sp, r7
   83eee:	bd80      	pop	{r7, pc}
   83ef0:	20001828 	.word	0x20001828
   83ef4:	2000182c 	.word	0x2000182c

00083ef8 <Reset_Handler>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
<<<<<<< HEAD
   84564:	b580      	push	{r7, lr}
   84566:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   84568:	4b0b      	ldr	r3, [pc, #44]	; (84598 <udi_vendor_enable+0x34>)
   8456a:	4798      	blx	r3
   8456c:	4603      	mov	r3, r0
   8456e:	78da      	ldrb	r2, [r3, #3]
   84570:	4b0a      	ldr	r3, [pc, #40]	; (8459c <udi_vendor_enable+0x38>)
   84572:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   84574:	4b09      	ldr	r3, [pc, #36]	; (8459c <udi_vendor_enable+0x38>)
   84576:	781b      	ldrb	r3, [r3, #0]
   84578:	2b00      	cmp	r3, #0
   8457a:	d109      	bne.n	84590 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   8457c:	4b08      	ldr	r3, [pc, #32]	; (845a0 <udi_vendor_enable+0x3c>)
   8457e:	4798      	blx	r3
   84580:	4603      	mov	r3, r0
   84582:	f083 0301 	eor.w	r3, r3, #1
   84586:	b2db      	uxtb	r3, r3
   84588:	2b00      	cmp	r3, #0
   8458a:	d001      	beq.n	84590 <udi_vendor_enable+0x2c>
			return false;
   8458c:	2300      	movs	r3, #0
   8458e:	e000      	b.n	84592 <udi_vendor_enable+0x2e>
		}
	}
	return true;
   84590:	2301      	movs	r3, #1
}
   84592:	4618      	mov	r0, r3
   84594:	bd80      	pop	{r7, pc}
   84596:	bf00      	nop
   84598:	00083781 	.word	0x00083781
   8459c:	20001343 	.word	0x20001343
   845a0:	00080c7d 	.word	0x00080c7d

000845a4 <udi_vendor_disable>:
=======
   83ef8:	b580      	push	{r7, lr}
   83efa:	b082      	sub	sp, #8
   83efc:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83efe:	4b1e      	ldr	r3, [pc, #120]	; (83f78 <Reset_Handler+0x80>)
   83f00:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83f02:	4b1e      	ldr	r3, [pc, #120]	; (83f7c <Reset_Handler+0x84>)
   83f04:	603b      	str	r3, [r7, #0]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	if (pSrc != pDest) {
   83f06:	687a      	ldr	r2, [r7, #4]
   83f08:	683b      	ldr	r3, [r7, #0]
   83f0a:	429a      	cmp	r2, r3
   83f0c:	d00c      	beq.n	83f28 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83f0e:	e007      	b.n	83f20 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83f10:	687a      	ldr	r2, [r7, #4]
   83f12:	1d13      	adds	r3, r2, #4
   83f14:	607b      	str	r3, [r7, #4]
   83f16:	683b      	ldr	r3, [r7, #0]
   83f18:	1d19      	adds	r1, r3, #4
   83f1a:	6039      	str	r1, [r7, #0]
   83f1c:	6812      	ldr	r2, [r2, #0]
   83f1e:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   83f20:	683b      	ldr	r3, [r7, #0]
   83f22:	4a17      	ldr	r2, [pc, #92]	; (83f80 <Reset_Handler+0x88>)
   83f24:	4293      	cmp	r3, r2
   83f26:	d3f3      	bcc.n	83f10 <Reset_Handler+0x18>
		}
	}

<<<<<<< HEAD
void udi_vendor_disable(void)
{
   845a4:	b580      	push	{r7, lr}
   845a6:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   845a8:	4b03      	ldr	r3, [pc, #12]	; (845b8 <udi_vendor_disable+0x14>)
   845aa:	781b      	ldrb	r3, [r3, #0]
   845ac:	2b00      	cmp	r3, #0
   845ae:	d101      	bne.n	845b4 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   845b0:	4b02      	ldr	r3, [pc, #8]	; (845bc <udi_vendor_disable+0x18>)
   845b2:	4798      	blx	r3
	}
}
   845b4:	bf00      	nop
   845b6:	bd80      	pop	{r7, pc}
   845b8:	20001343 	.word	0x20001343
   845bc:	00080ca9 	.word	0x00080ca9

000845c0 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   845c0:	b580      	push	{r7, lr}
   845c2:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   845c4:	4b10      	ldr	r3, [pc, #64]	; (84608 <udi_vendor_setup+0x48>)
   845c6:	781b      	ldrb	r3, [r3, #0]
   845c8:	b25b      	sxtb	r3, r3
   845ca:	2b00      	cmp	r3, #0
   845cc:	da09      	bge.n	845e2 <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   845ce:	4b0e      	ldr	r3, [pc, #56]	; (84608 <udi_vendor_setup+0x48>)
   845d0:	781b      	ldrb	r3, [r3, #0]
   845d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
   845d6:	2b40      	cmp	r3, #64	; 0x40
   845d8:	d103      	bne.n	845e2 <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   845da:	4b0c      	ldr	r3, [pc, #48]	; (8460c <udi_vendor_setup+0x4c>)
   845dc:	4798      	blx	r3
   845de:	4603      	mov	r3, r0
   845e0:	e00f      	b.n	84602 <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   845e2:	4b09      	ldr	r3, [pc, #36]	; (84608 <udi_vendor_setup+0x48>)
   845e4:	781b      	ldrb	r3, [r3, #0]
   845e6:	b25b      	sxtb	r3, r3
   845e8:	2b00      	cmp	r3, #0
   845ea:	db09      	blt.n	84600 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   845ec:	4b06      	ldr	r3, [pc, #24]	; (84608 <udi_vendor_setup+0x48>)
   845ee:	781b      	ldrb	r3, [r3, #0]
   845f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
   845f4:	2b40      	cmp	r3, #64	; 0x40
   845f6:	d103      	bne.n	84600 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   845f8:	4b05      	ldr	r3, [pc, #20]	; (84610 <udi_vendor_setup+0x50>)
   845fa:	4798      	blx	r3
   845fc:	4603      	mov	r3, r0
   845fe:	e000      	b.n	84602 <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   84600:	2300      	movs	r3, #0
}
   84602:	4618      	mov	r0, r3
   84604:	bd80      	pop	{r7, pc}
   84606:	bf00      	nop
   84608:	20001828 	.word	0x20001828
   8460c:	000810f5 	.word	0x000810f5
   84610:	00080f95 	.word	0x00080f95

00084614 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   84614:	b480      	push	{r7}
   84616:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   84618:	4b02      	ldr	r3, [pc, #8]	; (84624 <udi_vendor_getsetting+0x10>)
   8461a:	781b      	ldrb	r3, [r3, #0]
}
   8461c:	4618      	mov	r0, r3
   8461e:	46bd      	mov	sp, r7
   84620:	bc80      	pop	{r7}
   84622:	4770      	bx	lr
   84624:	20001343 	.word	0x20001343

00084628 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84628:	b590      	push	{r4, r7, lr}
   8462a:	b087      	sub	sp, #28
   8462c:	af02      	add	r7, sp, #8
   8462e:	60f8      	str	r0, [r7, #12]
   84630:	60b9      	str	r1, [r7, #8]
   84632:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   84634:	687b      	ldr	r3, [r7, #4]
   84636:	9300      	str	r3, [sp, #0]
   84638:	68bb      	ldr	r3, [r7, #8]
   8463a:	68fa      	ldr	r2, [r7, #12]
   8463c:	2100      	movs	r1, #0
   8463e:	2081      	movs	r0, #129	; 0x81
   84640:	4c03      	ldr	r4, [pc, #12]	; (84650 <udi_vendor_bulk_in_run+0x28>)
   84642:	47a0      	blx	r4
   84644:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84646:	4618      	mov	r0, r3
   84648:	3714      	adds	r7, #20
   8464a:	46bd      	mov	sp, r7
   8464c:	bd90      	pop	{r4, r7, pc}
   8464e:	bf00      	nop
   84650:	00085349 	.word	0x00085349

00084654 <udi_vendor_bulk_out_run>:
=======
	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83f28:	4b16      	ldr	r3, [pc, #88]	; (83f84 <Reset_Handler+0x8c>)
   83f2a:	603b      	str	r3, [r7, #0]
   83f2c:	e004      	b.n	83f38 <Reset_Handler+0x40>
		*pDest++ = 0;
   83f2e:	683b      	ldr	r3, [r7, #0]
   83f30:	1d1a      	adds	r2, r3, #4
   83f32:	603a      	str	r2, [r7, #0]
   83f34:	2200      	movs	r2, #0
   83f36:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   83f38:	683b      	ldr	r3, [r7, #0]
   83f3a:	4a13      	ldr	r2, [pc, #76]	; (83f88 <Reset_Handler+0x90>)
   83f3c:	4293      	cmp	r3, r2
   83f3e:	d3f6      	bcc.n	83f2e <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83f40:	4b12      	ldr	r3, [pc, #72]	; (83f8c <Reset_Handler+0x94>)
   83f42:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83f44:	687b      	ldr	r3, [r7, #4]
   83f46:	4a12      	ldr	r2, [pc, #72]	; (83f90 <Reset_Handler+0x98>)
   83f48:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83f4c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83f50:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   83f52:	687b      	ldr	r3, [r7, #4]
   83f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83f58:	d309      	bcc.n	83f6e <Reset_Handler+0x76>
   83f5a:	687b      	ldr	r3, [r7, #4]
   83f5c:	4a0d      	ldr	r2, [pc, #52]	; (83f94 <Reset_Handler+0x9c>)
   83f5e:	4293      	cmp	r3, r2
   83f60:	d205      	bcs.n	83f6e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83f62:	4b0b      	ldr	r3, [pc, #44]	; (83f90 <Reset_Handler+0x98>)
   83f64:	689b      	ldr	r3, [r3, #8]
   83f66:	4a0a      	ldr	r2, [pc, #40]	; (83f90 <Reset_Handler+0x98>)
   83f68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83f6c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83f6e:	4b0a      	ldr	r3, [pc, #40]	; (83f98 <Reset_Handler+0xa0>)
   83f70:	4798      	blx	r3

	/* Branch to main function */
	main();
   83f72:	4b0a      	ldr	r3, [pc, #40]	; (83f9c <Reset_Handler+0xa4>)
   83f74:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83f76:	e7fe      	b.n	83f76 <Reset_Handler+0x7e>
   83f78:	0008d804 	.word	0x0008d804
   83f7c:	20000000 	.word	0x20000000
   83f80:	20000de8 	.word	0x20000de8
   83f84:	20000de8 	.word	0x20000de8
   83f88:	20001864 	.word	0x20001864
   83f8c:	00080000 	.word	0x00080000
   83f90:	e000ed00 	.word	0xe000ed00
   83f94:	20004000 	.word	0x20004000
   83f98:	00086679 	.word	0x00086679
   83f9c:	00080949 	.word	0x00080949

00083fa0 <osc_enable>:
{
   83fa0:	b580      	push	{r7, lr}
   83fa2:	b082      	sub	sp, #8
   83fa4:	af00      	add	r7, sp, #0
   83fa6:	6078      	str	r0, [r7, #4]
   83fa8:	687b      	ldr	r3, [r7, #4]
   83faa:	2b07      	cmp	r3, #7
   83fac:	d82e      	bhi.n	8400c <osc_enable+0x6c>
   83fae:	a201      	add	r2, pc, #4	; (adr r2, 83fb4 <osc_enable+0x14>)
   83fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83fb4:	0008400b 	.word	0x0008400b
   83fb8:	00083fd5 	.word	0x00083fd5
   83fbc:	00083fdd 	.word	0x00083fdd
   83fc0:	00083fe5 	.word	0x00083fe5
   83fc4:	00083fed 	.word	0x00083fed
   83fc8:	00083ff5 	.word	0x00083ff5
   83fcc:	00083ffd 	.word	0x00083ffd
   83fd0:	00084005 	.word	0x00084005
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83fd4:	2000      	movs	r0, #0
   83fd6:	4b0f      	ldr	r3, [pc, #60]	; (84014 <osc_enable+0x74>)
   83fd8:	4798      	blx	r3
		break;
   83fda:	e017      	b.n	8400c <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   83fdc:	2001      	movs	r0, #1
   83fde:	4b0d      	ldr	r3, [pc, #52]	; (84014 <osc_enable+0x74>)
   83fe0:	4798      	blx	r3
		break;
   83fe2:	e013      	b.n	8400c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83fe4:	2000      	movs	r0, #0
   83fe6:	4b0c      	ldr	r3, [pc, #48]	; (84018 <osc_enable+0x78>)
   83fe8:	4798      	blx	r3
		break;
   83fea:	e00f      	b.n	8400c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83fec:	2010      	movs	r0, #16
   83fee:	4b0a      	ldr	r3, [pc, #40]	; (84018 <osc_enable+0x78>)
   83ff0:	4798      	blx	r3
		break;
   83ff2:	e00b      	b.n	8400c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83ff4:	2020      	movs	r0, #32
   83ff6:	4b08      	ldr	r3, [pc, #32]	; (84018 <osc_enable+0x78>)
   83ff8:	4798      	blx	r3
		break;
   83ffa:	e007      	b.n	8400c <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83ffc:	203e      	movs	r0, #62	; 0x3e
   83ffe:	4b07      	ldr	r3, [pc, #28]	; (8401c <osc_enable+0x7c>)
   84000:	4798      	blx	r3
		break;
   84002:	e003      	b.n	8400c <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   84004:	4b06      	ldr	r3, [pc, #24]	; (84020 <osc_enable+0x80>)
   84006:	4798      	blx	r3
		break;
   84008:	e000      	b.n	8400c <osc_enable+0x6c>
		break;
   8400a:	bf00      	nop
}
   8400c:	bf00      	nop
   8400e:	3708      	adds	r7, #8
   84010:	46bd      	mov	sp, r7
   84012:	bd80      	pop	{r7, pc}
   84014:	00084475 	.word	0x00084475
   84018:	000844e1 	.word	0x000844e1
   8401c:	00084555 	.word	0x00084555
   84020:	000845a5 	.word	0x000845a5

00084024 <osc_is_ready>:
{
   84024:	b580      	push	{r7, lr}
   84026:	b082      	sub	sp, #8
   84028:	af00      	add	r7, sp, #0
   8402a:	6078      	str	r0, [r7, #4]
   8402c:	687b      	ldr	r3, [r7, #4]
   8402e:	2b07      	cmp	r3, #7
   84030:	d82f      	bhi.n	84092 <osc_is_ready+0x6e>
   84032:	a201      	add	r2, pc, #4	; (adr r2, 84038 <osc_is_ready+0x14>)
   84034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84038:	00084059 	.word	0x00084059
   8403c:	0008405d 	.word	0x0008405d
   84040:	0008405d 	.word	0x0008405d
   84044:	0008406f 	.word	0x0008406f
   84048:	0008406f 	.word	0x0008406f
   8404c:	0008406f 	.word	0x0008406f
   84050:	00084081 	.word	0x00084081
   84054:	00084081 	.word	0x00084081
		return 1;
   84058:	2301      	movs	r3, #1
   8405a:	e01b      	b.n	84094 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   8405c:	4b0f      	ldr	r3, [pc, #60]	; (8409c <osc_is_ready+0x78>)
   8405e:	4798      	blx	r3
   84060:	4603      	mov	r3, r0
   84062:	2b00      	cmp	r3, #0
   84064:	bf14      	ite	ne
   84066:	2301      	movne	r3, #1
   84068:	2300      	moveq	r3, #0
   8406a:	b2db      	uxtb	r3, r3
   8406c:	e012      	b.n	84094 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   8406e:	4b0c      	ldr	r3, [pc, #48]	; (840a0 <osc_is_ready+0x7c>)
   84070:	4798      	blx	r3
   84072:	4603      	mov	r3, r0
   84074:	2b00      	cmp	r3, #0
   84076:	bf14      	ite	ne
   84078:	2301      	movne	r3, #1
   8407a:	2300      	moveq	r3, #0
   8407c:	b2db      	uxtb	r3, r3
   8407e:	e009      	b.n	84094 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   84080:	4b08      	ldr	r3, [pc, #32]	; (840a4 <osc_is_ready+0x80>)
   84082:	4798      	blx	r3
   84084:	4603      	mov	r3, r0
   84086:	2b00      	cmp	r3, #0
   84088:	bf14      	ite	ne
   8408a:	2301      	movne	r3, #1
   8408c:	2300      	moveq	r3, #0
   8408e:	b2db      	uxtb	r3, r3
   84090:	e000      	b.n	84094 <osc_is_ready+0x70>
	return 0;
   84092:	2300      	movs	r3, #0
}
   84094:	4618      	mov	r0, r3
   84096:	3708      	adds	r7, #8
   84098:	46bd      	mov	sp, r7
   8409a:	bd80      	pop	{r7, pc}
   8409c:	000844ad 	.word	0x000844ad
   840a0:	0008453d 	.word	0x0008453d
   840a4:	000845f1 	.word	0x000845f1

000840a8 <osc_get_rate>:
{
   840a8:	b480      	push	{r7}
   840aa:	b083      	sub	sp, #12
   840ac:	af00      	add	r7, sp, #0
   840ae:	6078      	str	r0, [r7, #4]
   840b0:	687b      	ldr	r3, [r7, #4]
   840b2:	2b07      	cmp	r3, #7
   840b4:	d823      	bhi.n	840fe <osc_get_rate+0x56>
   840b6:	a201      	add	r2, pc, #4	; (adr r2, 840bc <osc_get_rate+0x14>)
   840b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   840bc:	000840dd 	.word	0x000840dd
   840c0:	000840e3 	.word	0x000840e3
   840c4:	000840e7 	.word	0x000840e7
   840c8:	000840eb 	.word	0x000840eb
   840cc:	000840ef 	.word	0x000840ef
   840d0:	000840f3 	.word	0x000840f3
   840d4:	000840f7 	.word	0x000840f7
   840d8:	000840fb 	.word	0x000840fb
		return OSC_SLCK_32K_RC_HZ;
   840dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   840e0:	e00e      	b.n	84100 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   840e2:	2300      	movs	r3, #0
   840e4:	e00c      	b.n	84100 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   840e6:	2300      	movs	r3, #0
   840e8:	e00a      	b.n	84100 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   840ea:	4b08      	ldr	r3, [pc, #32]	; (8410c <osc_get_rate+0x64>)
   840ec:	e008      	b.n	84100 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   840ee:	4b08      	ldr	r3, [pc, #32]	; (84110 <osc_get_rate+0x68>)
   840f0:	e006      	b.n	84100 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   840f2:	4b08      	ldr	r3, [pc, #32]	; (84114 <osc_get_rate+0x6c>)
   840f4:	e004      	b.n	84100 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   840f6:	4b07      	ldr	r3, [pc, #28]	; (84114 <osc_get_rate+0x6c>)
   840f8:	e002      	b.n	84100 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   840fa:	4b06      	ldr	r3, [pc, #24]	; (84114 <osc_get_rate+0x6c>)
   840fc:	e000      	b.n	84100 <osc_get_rate+0x58>
	return 0;
   840fe:	2300      	movs	r3, #0
}
   84100:	4618      	mov	r0, r3
   84102:	370c      	adds	r7, #12
   84104:	46bd      	mov	sp, r7
   84106:	bc80      	pop	{r7}
   84108:	4770      	bx	lr
   8410a:	bf00      	nop
   8410c:	003d0900 	.word	0x003d0900
   84110:	007a1200 	.word	0x007a1200
   84114:	00b71b00 	.word	0x00b71b00

00084118 <osc_wait_ready>:
{
   84118:	b580      	push	{r7, lr}
   8411a:	b082      	sub	sp, #8
   8411c:	af00      	add	r7, sp, #0
   8411e:	4603      	mov	r3, r0
   84120:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   84122:	bf00      	nop
   84124:	79fb      	ldrb	r3, [r7, #7]
   84126:	4618      	mov	r0, r3
   84128:	4b06      	ldr	r3, [pc, #24]	; (84144 <osc_wait_ready+0x2c>)
   8412a:	4798      	blx	r3
   8412c:	4603      	mov	r3, r0
   8412e:	f083 0301 	eor.w	r3, r3, #1
   84132:	b2db      	uxtb	r3, r3
   84134:	2b00      	cmp	r3, #0
   84136:	d1f5      	bne.n	84124 <osc_wait_ready+0xc>
}
   84138:	bf00      	nop
   8413a:	bf00      	nop
   8413c:	3708      	adds	r7, #8
   8413e:	46bd      	mov	sp, r7
   84140:	bd80      	pop	{r7, pc}
   84142:	bf00      	nop
   84144:	00084025 	.word	0x00084025

00084148 <pll_config_init>:
{
   84148:	b580      	push	{r7, lr}
   8414a:	b086      	sub	sp, #24
   8414c:	af00      	add	r7, sp, #0
   8414e:	60f8      	str	r0, [r7, #12]
   84150:	607a      	str	r2, [r7, #4]
   84152:	603b      	str	r3, [r7, #0]
   84154:	460b      	mov	r3, r1
   84156:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   84158:	687b      	ldr	r3, [r7, #4]
   8415a:	2b00      	cmp	r3, #0
   8415c:	d107      	bne.n	8416e <pll_config_init+0x26>
   8415e:	683b      	ldr	r3, [r7, #0]
   84160:	2b00      	cmp	r3, #0
   84162:	d104      	bne.n	8416e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   84164:	68fb      	ldr	r3, [r7, #12]
   84166:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8416a:	601a      	str	r2, [r3, #0]
   8416c:	e01a      	b.n	841a4 <pll_config_init+0x5c>
		vco_hz = osc_get_rate(e_src) / ul_div;
   8416e:	7afb      	ldrb	r3, [r7, #11]
   84170:	4618      	mov	r0, r3
   84172:	4b0e      	ldr	r3, [pc, #56]	; (841ac <pll_config_init+0x64>)
   84174:	4798      	blx	r3
   84176:	4602      	mov	r2, r0
   84178:	687b      	ldr	r3, [r7, #4]
   8417a:	fbb2 f3f3 	udiv	r3, r2, r3
   8417e:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   84180:	697b      	ldr	r3, [r7, #20]
   84182:	683a      	ldr	r2, [r7, #0]
   84184:	fb02 f303 	mul.w	r3, r2, r3
   84188:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8418a:	683b      	ldr	r3, [r7, #0]
   8418c:	3b01      	subs	r3, #1
   8418e:	041a      	lsls	r2, r3, #16
   84190:	4b07      	ldr	r3, [pc, #28]	; (841b0 <pll_config_init+0x68>)
   84192:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   84194:	687a      	ldr	r2, [r7, #4]
   84196:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   84198:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   8419a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8419e:	68fb      	ldr	r3, [r7, #12]
   841a0:	601a      	str	r2, [r3, #0]
}
   841a2:	bf00      	nop
   841a4:	bf00      	nop
   841a6:	3718      	adds	r7, #24
   841a8:	46bd      	mov	sp, r7
   841aa:	bd80      	pop	{r7, pc}
   841ac:	000840a9 	.word	0x000840a9
   841b0:	07ff0000 	.word	0x07ff0000

000841b4 <pll_enable>:
{
   841b4:	b580      	push	{r7, lr}
   841b6:	b082      	sub	sp, #8
   841b8:	af00      	add	r7, sp, #0
   841ba:	6078      	str	r0, [r7, #4]
   841bc:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   841be:	683b      	ldr	r3, [r7, #0]
   841c0:	2b00      	cmp	r3, #0
   841c2:	d108      	bne.n	841d6 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   841c4:	4b09      	ldr	r3, [pc, #36]	; (841ec <pll_enable+0x38>)
   841c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   841c8:	687b      	ldr	r3, [r7, #4]
   841ca:	681b      	ldr	r3, [r3, #0]
   841cc:	4a08      	ldr	r2, [pc, #32]	; (841f0 <pll_enable+0x3c>)
   841ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   841d2:	6293      	str	r3, [r2, #40]	; 0x28
}
   841d4:	e005      	b.n	841e2 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   841d6:	687b      	ldr	r3, [r7, #4]
   841d8:	681b      	ldr	r3, [r3, #0]
   841da:	4a05      	ldr	r2, [pc, #20]	; (841f0 <pll_enable+0x3c>)
   841dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   841e0:	61d3      	str	r3, [r2, #28]
}
   841e2:	bf00      	nop
   841e4:	3708      	adds	r7, #8
   841e6:	46bd      	mov	sp, r7
   841e8:	bd80      	pop	{r7, pc}
   841ea:	bf00      	nop
   841ec:	00084661 	.word	0x00084661
   841f0:	400e0400 	.word	0x400e0400

000841f4 <pll_is_locked>:
{
   841f4:	b580      	push	{r7, lr}
   841f6:	b082      	sub	sp, #8
   841f8:	af00      	add	r7, sp, #0
   841fa:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   841fc:	687b      	ldr	r3, [r7, #4]
   841fe:	2b00      	cmp	r3, #0
   84200:	d103      	bne.n	8420a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   84202:	4b05      	ldr	r3, [pc, #20]	; (84218 <pll_is_locked+0x24>)
   84204:	4798      	blx	r3
   84206:	4603      	mov	r3, r0
   84208:	e002      	b.n	84210 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   8420a:	4b04      	ldr	r3, [pc, #16]	; (8421c <pll_is_locked+0x28>)
   8420c:	4798      	blx	r3
   8420e:	4603      	mov	r3, r0
}
   84210:	4618      	mov	r0, r3
   84212:	3708      	adds	r7, #8
   84214:	46bd      	mov	sp, r7
   84216:	bd80      	pop	{r7, pc}
   84218:	00084679 	.word	0x00084679
   8421c:	000846ad 	.word	0x000846ad

00084220 <pll_enable_source>:
{
   84220:	b580      	push	{r7, lr}
   84222:	b082      	sub	sp, #8
   84224:	af00      	add	r7, sp, #0
   84226:	4603      	mov	r3, r0
   84228:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8422a:	79fb      	ldrb	r3, [r7, #7]
   8422c:	3b03      	subs	r3, #3
   8422e:	2b04      	cmp	r3, #4
   84230:	d808      	bhi.n	84244 <pll_enable_source+0x24>
		osc_enable(e_src);
   84232:	79fb      	ldrb	r3, [r7, #7]
   84234:	4618      	mov	r0, r3
   84236:	4b06      	ldr	r3, [pc, #24]	; (84250 <pll_enable_source+0x30>)
   84238:	4798      	blx	r3
		osc_wait_ready(e_src);
   8423a:	79fb      	ldrb	r3, [r7, #7]
   8423c:	4618      	mov	r0, r3
   8423e:	4b05      	ldr	r3, [pc, #20]	; (84254 <pll_enable_source+0x34>)
   84240:	4798      	blx	r3
		break;
   84242:	e000      	b.n	84246 <pll_enable_source+0x26>
		break;
   84244:	bf00      	nop
}
   84246:	bf00      	nop
   84248:	3708      	adds	r7, #8
   8424a:	46bd      	mov	sp, r7
   8424c:	bd80      	pop	{r7, pc}
   8424e:	bf00      	nop
   84250:	00083fa1 	.word	0x00083fa1
   84254:	00084119 	.word	0x00084119

00084258 <pll_wait_for_lock>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
<<<<<<< HEAD
   84654:	b590      	push	{r4, r7, lr}
   84656:	b087      	sub	sp, #28
   84658:	af02      	add	r7, sp, #8
   8465a:	60f8      	str	r0, [r7, #12]
   8465c:	60b9      	str	r1, [r7, #8]
   8465e:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   84660:	687b      	ldr	r3, [r7, #4]
   84662:	9300      	str	r3, [sp, #0]
   84664:	68bb      	ldr	r3, [r7, #8]
   84666:	68fa      	ldr	r2, [r7, #12]
   84668:	2100      	movs	r1, #0
   8466a:	2002      	movs	r0, #2
   8466c:	4c03      	ldr	r4, [pc, #12]	; (8467c <udi_vendor_bulk_out_run+0x28>)
   8466e:	47a0      	blx	r4
   84670:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84672:	4618      	mov	r0, r3
   84674:	3714      	adds	r7, #20
   84676:	46bd      	mov	sp, r7
   84678:	bd90      	pop	{r4, r7, pc}
   8467a:	bf00      	nop
   8467c:	00085349 	.word	0x00085349

00084680 <NVIC_EnableIRQ>:
{
   84680:	b480      	push	{r7}
   84682:	b083      	sub	sp, #12
   84684:	af00      	add	r7, sp, #0
   84686:	4603      	mov	r3, r0
   84688:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8468a:	79fb      	ldrb	r3, [r7, #7]
   8468c:	f003 031f 	and.w	r3, r3, #31
   84690:	2201      	movs	r2, #1
   84692:	fa02 f103 	lsl.w	r1, r2, r3
   84696:	4a05      	ldr	r2, [pc, #20]	; (846ac <NVIC_EnableIRQ+0x2c>)
   84698:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8469c:	095b      	lsrs	r3, r3, #5
   8469e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   846a2:	bf00      	nop
   846a4:	370c      	adds	r7, #12
   846a6:	46bd      	mov	sp, r7
   846a8:	bc80      	pop	{r7}
   846aa:	4770      	bx	lr
   846ac:	e000e100 	.word	0xe000e100

000846b0 <NVIC_SetPriority>:
{
   846b0:	b480      	push	{r7}
   846b2:	b083      	sub	sp, #12
   846b4:	af00      	add	r7, sp, #0
   846b6:	4603      	mov	r3, r0
   846b8:	6039      	str	r1, [r7, #0]
   846ba:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   846bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   846c0:	2b00      	cmp	r3, #0
   846c2:	da0b      	bge.n	846dc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   846c4:	683b      	ldr	r3, [r7, #0]
   846c6:	b2da      	uxtb	r2, r3
   846c8:	490c      	ldr	r1, [pc, #48]	; (846fc <NVIC_SetPriority+0x4c>)
   846ca:	79fb      	ldrb	r3, [r7, #7]
   846cc:	f003 030f 	and.w	r3, r3, #15
   846d0:	3b04      	subs	r3, #4
   846d2:	0112      	lsls	r2, r2, #4
   846d4:	b2d2      	uxtb	r2, r2
   846d6:	440b      	add	r3, r1
   846d8:	761a      	strb	r2, [r3, #24]
}
   846da:	e009      	b.n	846f0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   846dc:	683b      	ldr	r3, [r7, #0]
   846de:	b2da      	uxtb	r2, r3
   846e0:	4907      	ldr	r1, [pc, #28]	; (84700 <NVIC_SetPriority+0x50>)
   846e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   846e6:	0112      	lsls	r2, r2, #4
   846e8:	b2d2      	uxtb	r2, r2
   846ea:	440b      	add	r3, r1
   846ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   846f0:	bf00      	nop
   846f2:	370c      	adds	r7, #12
   846f4:	46bd      	mov	sp, r7
   846f6:	bc80      	pop	{r7}
   846f8:	4770      	bx	lr
   846fa:	bf00      	nop
   846fc:	e000ed00 	.word	0xe000ed00
   84700:	e000e100 	.word	0xe000e100

00084704 <cpu_irq_save>:
{
   84704:	b480      	push	{r7}
   84706:	b083      	sub	sp, #12
   84708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8470a:	f3ef 8310 	mrs	r3, PRIMASK
   8470e:	603b      	str	r3, [r7, #0]
  return(result);
   84710:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   84712:	2b00      	cmp	r3, #0
   84714:	bf0c      	ite	eq
   84716:	2301      	moveq	r3, #1
   84718:	2300      	movne	r3, #0
   8471a:	b2db      	uxtb	r3, r3
   8471c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   8471e:	b672      	cpsid	i
}
   84720:	bf00      	nop
  __ASM volatile ("dmb");
   84722:	f3bf 8f5f 	dmb	sy
}
   84726:	bf00      	nop
	cpu_irq_disable();
   84728:	4b04      	ldr	r3, [pc, #16]	; (8473c <cpu_irq_save+0x38>)
   8472a:	2200      	movs	r2, #0
   8472c:	701a      	strb	r2, [r3, #0]
	return flags;
   8472e:	687b      	ldr	r3, [r7, #4]
}
   84730:	4618      	mov	r0, r3
   84732:	370c      	adds	r7, #12
   84734:	46bd      	mov	sp, r7
   84736:	bc80      	pop	{r7}
   84738:	4770      	bx	lr
   8473a:	bf00      	nop
   8473c:	20000284 	.word	0x20000284

00084740 <cpu_irq_is_enabled_flags>:
{
   84740:	b480      	push	{r7}
   84742:	b083      	sub	sp, #12
   84744:	af00      	add	r7, sp, #0
   84746:	6078      	str	r0, [r7, #4]
	return (flags);
   84748:	687b      	ldr	r3, [r7, #4]
   8474a:	2b00      	cmp	r3, #0
   8474c:	bf14      	ite	ne
   8474e:	2301      	movne	r3, #1
   84750:	2300      	moveq	r3, #0
   84752:	b2db      	uxtb	r3, r3
}
   84754:	4618      	mov	r0, r3
   84756:	370c      	adds	r7, #12
   84758:	46bd      	mov	sp, r7
   8475a:	bc80      	pop	{r7}
   8475c:	4770      	bx	lr
   8475e:	0000      	movs	r0, r0

00084760 <cpu_irq_restore>:
{
   84760:	b580      	push	{r7, lr}
   84762:	b082      	sub	sp, #8
   84764:	af00      	add	r7, sp, #0
   84766:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   84768:	6878      	ldr	r0, [r7, #4]
   8476a:	4b08      	ldr	r3, [pc, #32]	; (8478c <cpu_irq_restore+0x2c>)
   8476c:	4798      	blx	r3
   8476e:	4603      	mov	r3, r0
   84770:	2b00      	cmp	r3, #0
   84772:	d007      	beq.n	84784 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   84774:	4b06      	ldr	r3, [pc, #24]	; (84790 <cpu_irq_restore+0x30>)
   84776:	2201      	movs	r2, #1
   84778:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8477a:	f3bf 8f5f 	dmb	sy
}
   8477e:	bf00      	nop
  __ASM volatile ("cpsie i");
   84780:	b662      	cpsie	i
}
   84782:	bf00      	nop
}
   84784:	bf00      	nop
   84786:	3708      	adds	r7, #8
   84788:	46bd      	mov	sp, r7
   8478a:	bd80      	pop	{r7, pc}
   8478c:	00084741 	.word	0x00084741
   84790:	20000284 	.word	0x20000284

00084794 <sleepmgr_lock_mode>:
{
   84794:	b580      	push	{r7, lr}
   84796:	b084      	sub	sp, #16
   84798:	af00      	add	r7, sp, #0
   8479a:	4603      	mov	r3, r0
   8479c:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   8479e:	4b08      	ldr	r3, [pc, #32]	; (847c0 <sleepmgr_lock_mode+0x2c>)
   847a0:	4798      	blx	r3
   847a2:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   847a4:	79fb      	ldrb	r3, [r7, #7]
   847a6:	4a07      	ldr	r2, [pc, #28]	; (847c4 <sleepmgr_lock_mode+0x30>)
   847a8:	5cd2      	ldrb	r2, [r2, r3]
   847aa:	3201      	adds	r2, #1
   847ac:	b2d1      	uxtb	r1, r2
   847ae:	4a05      	ldr	r2, [pc, #20]	; (847c4 <sleepmgr_lock_mode+0x30>)
   847b0:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   847b2:	68f8      	ldr	r0, [r7, #12]
   847b4:	4b04      	ldr	r3, [pc, #16]	; (847c8 <sleepmgr_lock_mode+0x34>)
   847b6:	4798      	blx	r3
}
   847b8:	bf00      	nop
   847ba:	3710      	adds	r7, #16
   847bc:	46bd      	mov	sp, r7
   847be:	bd80      	pop	{r7, pc}
   847c0:	00084705 	.word	0x00084705
   847c4:	20001820 	.word	0x20001820
   847c8:	00084761 	.word	0x00084761

000847cc <sleepmgr_unlock_mode>:
{
   847cc:	b580      	push	{r7, lr}
   847ce:	b084      	sub	sp, #16
   847d0:	af00      	add	r7, sp, #0
   847d2:	4603      	mov	r3, r0
   847d4:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   847d6:	4b08      	ldr	r3, [pc, #32]	; (847f8 <sleepmgr_unlock_mode+0x2c>)
   847d8:	4798      	blx	r3
   847da:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   847dc:	79fb      	ldrb	r3, [r7, #7]
   847de:	4a07      	ldr	r2, [pc, #28]	; (847fc <sleepmgr_unlock_mode+0x30>)
   847e0:	5cd2      	ldrb	r2, [r2, r3]
   847e2:	3a01      	subs	r2, #1
   847e4:	b2d1      	uxtb	r1, r2
   847e6:	4a05      	ldr	r2, [pc, #20]	; (847fc <sleepmgr_unlock_mode+0x30>)
   847e8:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   847ea:	68f8      	ldr	r0, [r7, #12]
   847ec:	4b04      	ldr	r3, [pc, #16]	; (84800 <sleepmgr_unlock_mode+0x34>)
   847ee:	4798      	blx	r3
}
   847f0:	bf00      	nop
   847f2:	3710      	adds	r7, #16
   847f4:	46bd      	mov	sp, r7
   847f6:	bd80      	pop	{r7, pc}
   847f8:	00084705 	.word	0x00084705
   847fc:	20001820 	.word	0x20001820
   84800:	00084761 	.word	0x00084761

00084804 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
=======
   84258:	b580      	push	{r7, lr}
   8425a:	b082      	sub	sp, #8
   8425c:	af00      	add	r7, sp, #0
   8425e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   84260:	bf00      	nop
   84262:	6878      	ldr	r0, [r7, #4]
   84264:	4b04      	ldr	r3, [pc, #16]	; (84278 <pll_wait_for_lock+0x20>)
   84266:	4798      	blx	r3
   84268:	4603      	mov	r3, r0
   8426a:	2b00      	cmp	r3, #0
   8426c:	d0f9      	beq.n	84262 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8426e:	2300      	movs	r3, #0
}
   84270:	4618      	mov	r0, r3
   84272:	3708      	adds	r7, #8
   84274:	46bd      	mov	sp, r7
   84276:	bd80      	pop	{r7, pc}
   84278:	000841f5 	.word	0x000841f5

0008427c <sysclk_get_main_hz>:
{
   8427c:	b580      	push	{r7, lr}
   8427e:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   84280:	2006      	movs	r0, #6
   84282:	4b03      	ldr	r3, [pc, #12]	; (84290 <sysclk_get_main_hz+0x14>)
   84284:	4798      	blx	r3
   84286:	4603      	mov	r3, r0
   84288:	011b      	lsls	r3, r3, #4
}
   8428a:	4618      	mov	r0, r3
   8428c:	bd80      	pop	{r7, pc}
   8428e:	bf00      	nop
   84290:	000840a9 	.word	0x000840a9

00084294 <sysclk_get_cpu_hz>:
{
   84294:	b580      	push	{r7, lr}
   84296:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   84298:	4b02      	ldr	r3, [pc, #8]	; (842a4 <sysclk_get_cpu_hz+0x10>)
   8429a:	4798      	blx	r3
   8429c:	4603      	mov	r3, r0
   8429e:	085b      	lsrs	r3, r3, #1
}
   842a0:	4618      	mov	r0, r3
   842a2:	bd80      	pop	{r7, pc}
   842a4:	0008427d 	.word	0x0008427d

000842a8 <sysclk_enable_usb>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
<<<<<<< HEAD
   84804:	b580      	push	{r7, lr}
   84806:	b082      	sub	sp, #8
   84808:	af00      	add	r7, sp, #0
   8480a:	4603      	mov	r3, r0
   8480c:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   8480e:	79fb      	ldrb	r3, [r7, #7]
   84810:	f083 0301 	eor.w	r3, r3, #1
   84814:	b2db      	uxtb	r3, r3
   84816:	2b00      	cmp	r3, #0
   84818:	d006      	beq.n	84828 <udd_sleep_mode+0x24>
   8481a:	4b0d      	ldr	r3, [pc, #52]	; (84850 <udd_sleep_mode+0x4c>)
   8481c:	781b      	ldrb	r3, [r3, #0]
   8481e:	2b00      	cmp	r3, #0
   84820:	d002      	beq.n	84828 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   84822:	2002      	movs	r0, #2
   84824:	4b0b      	ldr	r3, [pc, #44]	; (84854 <udd_sleep_mode+0x50>)
   84826:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   84828:	79fb      	ldrb	r3, [r7, #7]
   8482a:	2b00      	cmp	r3, #0
   8482c:	d009      	beq.n	84842 <udd_sleep_mode+0x3e>
   8482e:	4b08      	ldr	r3, [pc, #32]	; (84850 <udd_sleep_mode+0x4c>)
   84830:	781b      	ldrb	r3, [r3, #0]
   84832:	f083 0301 	eor.w	r3, r3, #1
   84836:	b2db      	uxtb	r3, r3
   84838:	2b00      	cmp	r3, #0
   8483a:	d002      	beq.n	84842 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   8483c:	2002      	movs	r0, #2
   8483e:	4b06      	ldr	r3, [pc, #24]	; (84858 <udd_sleep_mode+0x54>)
   84840:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   84842:	4a03      	ldr	r2, [pc, #12]	; (84850 <udd_sleep_mode+0x4c>)
   84844:	79fb      	ldrb	r3, [r7, #7]
   84846:	7013      	strb	r3, [r2, #0]
}
   84848:	bf00      	nop
   8484a:	3708      	adds	r7, #8
   8484c:	46bd      	mov	sp, r7
   8484e:	bd80      	pop	{r7, pc}
   84850:	20001344 	.word	0x20001344
   84854:	000847cd 	.word	0x000847cd
   84858:	00084795 	.word	0x00084795

0008485c <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   8485c:	b580      	push	{r7, lr}
   8485e:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   84860:	201d      	movs	r0, #29
   84862:	4b5f      	ldr	r3, [pc, #380]	; (849e0 <UDPHS_Handler+0x184>)
   84864:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   84866:	4b5f      	ldr	r3, [pc, #380]	; (849e4 <UDPHS_Handler+0x188>)
   84868:	4798      	blx	r3
   8486a:	4603      	mov	r3, r0
   8486c:	f083 0301 	eor.w	r3, r3, #1
   84870:	b2db      	uxtb	r3, r3
   84872:	2b00      	cmp	r3, #0
   84874:	d00e      	beq.n	84894 <UDPHS_Handler+0x38>
   84876:	4b5c      	ldr	r3, [pc, #368]	; (849e8 <UDPHS_Handler+0x18c>)
   84878:	695b      	ldr	r3, [r3, #20]
   8487a:	f003 0302 	and.w	r3, r3, #2
   8487e:	2b00      	cmp	r3, #0
   84880:	d108      	bne.n	84894 <UDPHS_Handler+0x38>
  __ASM volatile ("cpsid i");
   84882:	b672      	cpsid	i
}
   84884:	bf00      	nop
  __ASM volatile ("dmb");
   84886:	f3bf 8f5f 	dmb	sy
}
   8488a:	bf00      	nop
		cpu_irq_disable();
   8488c:	4b57      	ldr	r3, [pc, #348]	; (849ec <UDPHS_Handler+0x190>)
   8488e:	2200      	movs	r2, #0
   84890:	701a      	strb	r2, [r3, #0]
		return;
   84892:	e0a4      	b.n	849de <UDPHS_Handler+0x182>
	}

	if (Is_udd_sof()) {
   84894:	4b54      	ldr	r3, [pc, #336]	; (849e8 <UDPHS_Handler+0x18c>)
   84896:	695b      	ldr	r3, [r3, #20]
   84898:	f003 0308 	and.w	r3, r3, #8
   8489c:	2b00      	cmp	r3, #0
   8489e:	d00d      	beq.n	848bc <UDPHS_Handler+0x60>
		udd_ack_sof();
   848a0:	4b51      	ldr	r3, [pc, #324]	; (849e8 <UDPHS_Handler+0x18c>)
   848a2:	2208      	movs	r2, #8
   848a4:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   848a6:	4b50      	ldr	r3, [pc, #320]	; (849e8 <UDPHS_Handler+0x18c>)
   848a8:	695b      	ldr	r3, [r3, #20]
   848aa:	f003 0301 	and.w	r3, r3, #1
   848ae:	2b00      	cmp	r3, #0
   848b0:	d101      	bne.n	848b6 <UDPHS_Handler+0x5a>
			udc_sof_notify();
   848b2:	4b4f      	ldr	r3, [pc, #316]	; (849f0 <UDPHS_Handler+0x194>)
   848b4:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   848b6:	4b4f      	ldr	r3, [pc, #316]	; (849f4 <UDPHS_Handler+0x198>)
   848b8:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   848ba:	e08f      	b.n	849dc <UDPHS_Handler+0x180>
	}

	if (Is_udd_msof()) {
   848bc:	4b4a      	ldr	r3, [pc, #296]	; (849e8 <UDPHS_Handler+0x18c>)
   848be:	695b      	ldr	r3, [r3, #20]
   848c0:	f003 0304 	and.w	r3, r3, #4
   848c4:	2b00      	cmp	r3, #0
   848c6:	d005      	beq.n	848d4 <UDPHS_Handler+0x78>
		udd_ack_msof();
   848c8:	4b47      	ldr	r3, [pc, #284]	; (849e8 <UDPHS_Handler+0x18c>)
   848ca:	2204      	movs	r2, #4
   848cc:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   848ce:	4b48      	ldr	r3, [pc, #288]	; (849f0 <UDPHS_Handler+0x194>)
   848d0:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   848d2:	e083      	b.n	849dc <UDPHS_Handler+0x180>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   848d4:	4b48      	ldr	r3, [pc, #288]	; (849f8 <UDPHS_Handler+0x19c>)
   848d6:	4798      	blx	r3
   848d8:	4603      	mov	r3, r0
   848da:	2b00      	cmp	r3, #0
   848dc:	d179      	bne.n	849d2 <UDPHS_Handler+0x176>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   848de:	4b47      	ldr	r3, [pc, #284]	; (849fc <UDPHS_Handler+0x1a0>)
   848e0:	4798      	blx	r3
   848e2:	4603      	mov	r3, r0
   848e4:	2b00      	cmp	r3, #0
   848e6:	d176      	bne.n	849d6 <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
=======
   842a8:	b590      	push	{r4, r7, lr}
   842aa:	b083      	sub	sp, #12
   842ac:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   842ae:	2006      	movs	r0, #6
   842b0:	4b09      	ldr	r3, [pc, #36]	; (842d8 <sysclk_enable_usb+0x30>)
   842b2:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   842b4:	1d38      	adds	r0, r7, #4
   842b6:	2300      	movs	r3, #0
   842b8:	2200      	movs	r2, #0
   842ba:	2106      	movs	r1, #6
   842bc:	4c07      	ldr	r4, [pc, #28]	; (842dc <sysclk_enable_usb+0x34>)
   842be:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   842c0:	1d3b      	adds	r3, r7, #4
   842c2:	2101      	movs	r1, #1
   842c4:	4618      	mov	r0, r3
   842c6:	4b06      	ldr	r3, [pc, #24]	; (842e0 <sysclk_enable_usb+0x38>)
   842c8:	4798      	blx	r3
	pll_wait_for_lock(1);
   842ca:	2001      	movs	r0, #1
   842cc:	4b05      	ldr	r3, [pc, #20]	; (842e4 <sysclk_enable_usb+0x3c>)
   842ce:	4798      	blx	r3
}
   842d0:	bf00      	nop
   842d2:	370c      	adds	r7, #12
   842d4:	46bd      	mov	sp, r7
   842d6:	bd90      	pop	{r4, r7, pc}
   842d8:	00084221 	.word	0x00084221
   842dc:	00084149 	.word	0x00084149
   842e0:	000841b5 	.word	0x000841b5
   842e4:	00084259 	.word	0x00084259

000842e8 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   842e8:	b590      	push	{r4, r7, lr}
   842ea:	b083      	sub	sp, #12
   842ec:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   842ee:	4816      	ldr	r0, [pc, #88]	; (84348 <sysclk_init+0x60>)
   842f0:	4b16      	ldr	r3, [pc, #88]	; (8434c <sysclk_init+0x64>)
   842f2:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   842f4:	2006      	movs	r0, #6
   842f6:	4b16      	ldr	r3, [pc, #88]	; (84350 <sysclk_init+0x68>)
   842f8:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   842fa:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   842fe:	4b15      	ldr	r3, [pc, #84]	; (84354 <sysclk_init+0x6c>)
   84300:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   84302:	bf00      	nop
   84304:	4b14      	ldr	r3, [pc, #80]	; (84358 <sysclk_init+0x70>)
   84306:	4798      	blx	r3
   84308:	4603      	mov	r3, r0
   8430a:	2b00      	cmp	r3, #0
   8430c:	d0fa      	beq.n	84304 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   8430e:	1d38      	adds	r0, r7, #4
   84310:	2310      	movs	r3, #16
   84312:	2201      	movs	r2, #1
   84314:	2106      	movs	r1, #6
   84316:	4c11      	ldr	r4, [pc, #68]	; (8435c <sysclk_init+0x74>)
   84318:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8431a:	1d3b      	adds	r3, r7, #4
   8431c:	2100      	movs	r1, #0
   8431e:	4618      	mov	r0, r3
   84320:	4b0f      	ldr	r3, [pc, #60]	; (84360 <sysclk_init+0x78>)
   84322:	4798      	blx	r3
		pll_wait_for_lock(0);
   84324:	2000      	movs	r0, #0
   84326:	4b0f      	ldr	r3, [pc, #60]	; (84364 <sysclk_init+0x7c>)
   84328:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8432a:	2010      	movs	r0, #16
   8432c:	4b0e      	ldr	r3, [pc, #56]	; (84368 <sysclk_init+0x80>)
   8432e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   84330:	4b0e      	ldr	r3, [pc, #56]	; (8436c <sysclk_init+0x84>)
   84332:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   84334:	4b0e      	ldr	r3, [pc, #56]	; (84370 <sysclk_init+0x88>)
   84336:	4798      	blx	r3
   84338:	4603      	mov	r3, r0
   8433a:	4618      	mov	r0, r3
   8433c:	4b03      	ldr	r3, [pc, #12]	; (8434c <sysclk_init+0x64>)
   8433e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
#endif
}
   84340:	bf00      	nop
   84342:	370c      	adds	r7, #12
   84344:	46bd      	mov	sp, r7
   84346:	bd90      	pop	{r4, r7, pc}
   84348:	05b8d800 	.word	0x05b8d800
   8434c:	200001bd 	.word	0x200001bd
   84350:	00084221 	.word	0x00084221
   84354:	00084621 	.word	0x00084621
   84358:	00084609 	.word	0x00084609
   8435c:	00084149 	.word	0x00084149
   84360:	000841b5 	.word	0x000841b5
   84364:	00084259 	.word	0x00084259
   84368:	000843f5 	.word	0x000843f5
   8436c:	000864f5 	.word	0x000864f5
   84370:	00084295 	.word	0x00084295

00084374 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   84374:	b480      	push	{r7}
   84376:	b085      	sub	sp, #20
   84378:	af00      	add	r7, sp, #0
   8437a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

<<<<<<< HEAD
	// USB bus reset detection
	if (Is_udd_reset()) {
   848e8:	4b3f      	ldr	r3, [pc, #252]	; (849e8 <UDPHS_Handler+0x18c>)
   848ea:	695b      	ldr	r3, [r3, #20]
   848ec:	f003 0310 	and.w	r3, r3, #16
   848f0:	2b00      	cmp	r3, #0
   848f2:	d01d      	beq.n	84930 <UDPHS_Handler+0xd4>
		dbg_print("EoR ");
		udd_ack_reset();
   848f4:	4b3c      	ldr	r3, [pc, #240]	; (849e8 <UDPHS_Handler+0x18c>)
   848f6:	2210      	movs	r2, #16
   848f8:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   848fa:	4b41      	ldr	r3, [pc, #260]	; (84a00 <UDPHS_Handler+0x1a4>)
   848fc:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   848fe:	4b41      	ldr	r3, [pc, #260]	; (84a04 <UDPHS_Handler+0x1a8>)
   84900:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   84902:	4b41      	ldr	r3, [pc, #260]	; (84a08 <UDPHS_Handler+0x1ac>)
   84904:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   84906:	4b41      	ldr	r3, [pc, #260]	; (84a0c <UDPHS_Handler+0x1b0>)
   84908:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   8490a:	4b37      	ldr	r3, [pc, #220]	; (849e8 <UDPHS_Handler+0x18c>)
   8490c:	691b      	ldr	r3, [r3, #16]
   8490e:	4a36      	ldr	r2, [pc, #216]	; (849e8 <UDPHS_Handler+0x18c>)
   84910:	f043 0308 	orr.w	r3, r3, #8
   84914:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   84916:	4b34      	ldr	r3, [pc, #208]	; (849e8 <UDPHS_Handler+0x18c>)
   84918:	691b      	ldr	r3, [r3, #16]
   8491a:	4a33      	ldr	r2, [pc, #204]	; (849e8 <UDPHS_Handler+0x18c>)
   8491c:	f043 0304 	orr.w	r3, r3, #4
   84920:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   84922:	4b31      	ldr	r3, [pc, #196]	; (849e8 <UDPHS_Handler+0x18c>)
   84924:	691b      	ldr	r3, [r3, #16]
   84926:	4a30      	ldr	r2, [pc, #192]	; (849e8 <UDPHS_Handler+0x18c>)
   84928:	f043 0302 	orr.w	r3, r3, #2
   8492c:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   8492e:	e055      	b.n	849dc <UDPHS_Handler+0x180>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84930:	4b2d      	ldr	r3, [pc, #180]	; (849e8 <UDPHS_Handler+0x18c>)
   84932:	691b      	ldr	r3, [r3, #16]
   84934:	f003 0302 	and.w	r3, r3, #2
   84938:	2b00      	cmp	r3, #0
   8493a:	d020      	beq.n	8497e <UDPHS_Handler+0x122>
   8493c:	4b2a      	ldr	r3, [pc, #168]	; (849e8 <UDPHS_Handler+0x18c>)
   8493e:	695b      	ldr	r3, [r3, #20]
   84940:	f003 0302 	and.w	r3, r3, #2
   84944:	2b00      	cmp	r3, #0
   84946:	d01a      	beq.n	8497e <UDPHS_Handler+0x122>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   84948:	4b27      	ldr	r3, [pc, #156]	; (849e8 <UDPHS_Handler+0x18c>)
   8494a:	2220      	movs	r2, #32
   8494c:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   8494e:	4b26      	ldr	r3, [pc, #152]	; (849e8 <UDPHS_Handler+0x18c>)
   84950:	691b      	ldr	r3, [r3, #16]
   84952:	4a25      	ldr	r2, [pc, #148]	; (849e8 <UDPHS_Handler+0x18c>)
   84954:	f023 0302 	bic.w	r3, r3, #2
   84958:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   8495a:	4b23      	ldr	r3, [pc, #140]	; (849e8 <UDPHS_Handler+0x18c>)
   8495c:	691b      	ldr	r3, [r3, #16]
   8495e:	4a22      	ldr	r2, [pc, #136]	; (849e8 <UDPHS_Handler+0x18c>)
   84960:	f043 0320 	orr.w	r3, r3, #32
   84964:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   84966:	4b20      	ldr	r3, [pc, #128]	; (849e8 <UDPHS_Handler+0x18c>)
   84968:	2202      	movs	r2, #2
   8496a:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   8496c:	201d      	movs	r0, #29
   8496e:	4b28      	ldr	r3, [pc, #160]	; (84a10 <UDPHS_Handler+0x1b4>)
   84970:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   84972:	4b28      	ldr	r3, [pc, #160]	; (84a14 <UDPHS_Handler+0x1b8>)
   84974:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   84976:	2000      	movs	r0, #0
   84978:	4b27      	ldr	r3, [pc, #156]	; (84a18 <UDPHS_Handler+0x1bc>)
   8497a:	4798      	blx	r3
		goto udd_interrupt_end;
   8497c:	e02e      	b.n	849dc <UDPHS_Handler+0x180>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   8497e:	4b1a      	ldr	r3, [pc, #104]	; (849e8 <UDPHS_Handler+0x18c>)
   84980:	695b      	ldr	r3, [r3, #20]
   84982:	f003 0320 	and.w	r3, r3, #32
   84986:	2b00      	cmp	r3, #0
   84988:	d027      	beq.n	849da <UDPHS_Handler+0x17e>
		udd_sleep_mode(true); // Enter in IDLE mode
   8498a:	2001      	movs	r0, #1
   8498c:	4b22      	ldr	r3, [pc, #136]	; (84a18 <UDPHS_Handler+0x1bc>)
   8498e:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   84990:	4b15      	ldr	r3, [pc, #84]	; (849e8 <UDPHS_Handler+0x18c>)
   84992:	2202      	movs	r2, #2
   84994:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   84996:	4b14      	ldr	r3, [pc, #80]	; (849e8 <UDPHS_Handler+0x18c>)
   84998:	2220      	movs	r2, #32
   8499a:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   8499c:	4b12      	ldr	r3, [pc, #72]	; (849e8 <UDPHS_Handler+0x18c>)
   8499e:	691b      	ldr	r3, [r3, #16]
   849a0:	4a11      	ldr	r2, [pc, #68]	; (849e8 <UDPHS_Handler+0x18c>)
   849a2:	f023 0320 	bic.w	r3, r3, #32
   849a6:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   849a8:	4b0f      	ldr	r3, [pc, #60]	; (849e8 <UDPHS_Handler+0x18c>)
   849aa:	691b      	ldr	r3, [r3, #16]
   849ac:	4a0e      	ldr	r2, [pc, #56]	; (849e8 <UDPHS_Handler+0x18c>)
   849ae:	f043 0302 	orr.w	r3, r3, #2
   849b2:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   849b4:	4b0c      	ldr	r3, [pc, #48]	; (849e8 <UDPHS_Handler+0x18c>)
   849b6:	691b      	ldr	r3, [r3, #16]
   849b8:	4a0b      	ldr	r2, [pc, #44]	; (849e8 <UDPHS_Handler+0x18c>)
   849ba:	f043 0308 	orr.w	r3, r3, #8
   849be:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   849c0:	4b09      	ldr	r3, [pc, #36]	; (849e8 <UDPHS_Handler+0x18c>)
   849c2:	691b      	ldr	r3, [r3, #16]
   849c4:	4a08      	ldr	r2, [pc, #32]	; (849e8 <UDPHS_Handler+0x18c>)
   849c6:	f043 0304 	orr.w	r3, r3, #4
   849ca:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   849cc:	4b13      	ldr	r3, [pc, #76]	; (84a1c <UDPHS_Handler+0x1c0>)
   849ce:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   849d0:	e004      	b.n	849dc <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   849d2:	bf00      	nop
   849d4:	e002      	b.n	849dc <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   849d6:	bf00      	nop
   849d8:	e000      	b.n	849dc <UDPHS_Handler+0x180>
=======
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8437c:	4b1c      	ldr	r3, [pc, #112]	; (843f0 <pmc_switch_mck_to_mainck+0x7c>)
   8437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84380:	f023 0303 	bic.w	r3, r3, #3
   84384:	4a1a      	ldr	r2, [pc, #104]	; (843f0 <pmc_switch_mck_to_mainck+0x7c>)
   84386:	f043 0301 	orr.w	r3, r3, #1
   8438a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8438c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84390:	60fb      	str	r3, [r7, #12]
   84392:	e007      	b.n	843a4 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84394:	68fb      	ldr	r3, [r7, #12]
   84396:	2b00      	cmp	r3, #0
   84398:	d101      	bne.n	8439e <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   8439a:	2301      	movs	r3, #1
   8439c:	e023      	b.n	843e6 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   8439e:	68fb      	ldr	r3, [r7, #12]
   843a0:	3b01      	subs	r3, #1
   843a2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   843a4:	4b12      	ldr	r3, [pc, #72]	; (843f0 <pmc_switch_mck_to_mainck+0x7c>)
   843a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   843a8:	f003 0308 	and.w	r3, r3, #8
   843ac:	2b00      	cmp	r3, #0
   843ae:	d0f1      	beq.n	84394 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   843b0:	4b0f      	ldr	r3, [pc, #60]	; (843f0 <pmc_switch_mck_to_mainck+0x7c>)
   843b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   843b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   843b8:	490d      	ldr	r1, [pc, #52]	; (843f0 <pmc_switch_mck_to_mainck+0x7c>)
   843ba:	687b      	ldr	r3, [r7, #4]
   843bc:	4313      	orrs	r3, r2
   843be:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   843c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   843c4:	60fb      	str	r3, [r7, #12]
   843c6:	e007      	b.n	843d8 <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   843c8:	68fb      	ldr	r3, [r7, #12]
   843ca:	2b00      	cmp	r3, #0
   843cc:	d101      	bne.n	843d2 <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   843ce:	2301      	movs	r3, #1
   843d0:	e009      	b.n	843e6 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   843d2:	68fb      	ldr	r3, [r7, #12]
   843d4:	3b01      	subs	r3, #1
   843d6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   843d8:	4b05      	ldr	r3, [pc, #20]	; (843f0 <pmc_switch_mck_to_mainck+0x7c>)
   843da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   843dc:	f003 0308 	and.w	r3, r3, #8
   843e0:	2b00      	cmp	r3, #0
   843e2:	d0f1      	beq.n	843c8 <pmc_switch_mck_to_mainck+0x54>
		}
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}

<<<<<<< HEAD
udd_interrupt_end:
   849da:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   849dc:	bf00      	nop
}
   849de:	bd80      	pop	{r7, pc}
   849e0:	000829dd 	.word	0x000829dd
   849e4:	00082fa1 	.word	0x00082fa1
   849e8:	400a4000 	.word	0x400a4000
   849ec:	20000284 	.word	0x20000284
   849f0:	00083a4d 	.word	0x00083a4d
   849f4:	00080c61 	.word	0x00080c61
   849f8:	00085cd1 	.word	0x00085cd1
   849fc:	000860ed 	.word	0x000860ed
   84a00:	00085e11 	.word	0x00085e11
   84a04:	000839f9 	.word	0x000839f9
   84a08:	00085631 	.word	0x00085631
   84a0c:	000856b1 	.word	0x000856b1
   84a10:	00082a29 	.word	0x00082a29
   84a14:	00080c49 	.word	0x00080c49
   84a18:	00084805 	.word	0x00084805
   84a1c:	00080c55 	.word	0x00080c55

00084a20 <udd_enable>:
#endif
=======
	return 0;
   843e4:	2300      	movs	r3, #0
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
}
   843e6:	4618      	mov	r0, r3
   843e8:	3714      	adds	r7, #20
   843ea:	46bd      	mov	sp, r7
   843ec:	bc80      	pop	{r7}
   843ee:	4770      	bx	lr
   843f0:	400e0400 	.word	0x400e0400

000843f4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
<<<<<<< HEAD
   84a20:	b580      	push	{r7, lr}
   84a22:	b082      	sub	sp, #8
   84a24:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   84a26:	4b19      	ldr	r3, [pc, #100]	; (84a8c <udd_enable+0x6c>)
   84a28:	4798      	blx	r3

	udd_enable_periph_ck();
   84a2a:	201d      	movs	r0, #29
   84a2c:	4b18      	ldr	r3, [pc, #96]	; (84a90 <udd_enable+0x70>)
   84a2e:	4798      	blx	r3

	flags = cpu_irq_save();
   84a30:	4b18      	ldr	r3, [pc, #96]	; (84a94 <udd_enable+0x74>)
   84a32:	4798      	blx	r3
   84a34:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   84a36:	4b18      	ldr	r3, [pc, #96]	; (84a98 <udd_enable+0x78>)
   84a38:	681b      	ldr	r3, [r3, #0]
   84a3a:	4a17      	ldr	r2, [pc, #92]	; (84a98 <udd_enable+0x78>)
   84a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   84a40:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   84a42:	2105      	movs	r1, #5
   84a44:	201d      	movs	r0, #29
   84a46:	4b15      	ldr	r3, [pc, #84]	; (84a9c <udd_enable+0x7c>)
   84a48:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   84a4a:	201d      	movs	r0, #29
   84a4c:	4b14      	ldr	r3, [pc, #80]	; (84aa0 <udd_enable+0x80>)
   84a4e:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   84a50:	4b14      	ldr	r3, [pc, #80]	; (84aa4 <udd_enable+0x84>)
   84a52:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   84a54:	4b10      	ldr	r3, [pc, #64]	; (84a98 <udd_enable+0x78>)
   84a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84a5a:	4a0f      	ldr	r2, [pc, #60]	; (84a98 <udd_enable+0x78>)
   84a5c:	f023 0303 	bic.w	r3, r3, #3
   84a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84a64:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84a68:	4b0f      	ldr	r3, [pc, #60]	; (84aa8 <udd_enable+0x88>)
   84a6a:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   84a6c:	4b0f      	ldr	r3, [pc, #60]	; (84aac <udd_enable+0x8c>)
   84a6e:	2200      	movs	r2, #0
   84a70:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   84a72:	2003      	movs	r0, #3
   84a74:	4b0e      	ldr	r3, [pc, #56]	; (84ab0 <udd_enable+0x90>)
   84a76:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   84a78:	4b0e      	ldr	r3, [pc, #56]	; (84ab4 <udd_enable+0x94>)
   84a7a:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   84a7c:	6878      	ldr	r0, [r7, #4]
   84a7e:	4b0e      	ldr	r3, [pc, #56]	; (84ab8 <udd_enable+0x98>)
   84a80:	4798      	blx	r3
}
   84a82:	bf00      	nop
   84a84:	3708      	adds	r7, #8
   84a86:	46bd      	mov	sp, r7
   84a88:	bd80      	pop	{r7, pc}
   84a8a:	bf00      	nop
   84a8c:	0008351d 	.word	0x0008351d
   84a90:	000829dd 	.word	0x000829dd
   84a94:	00084705 	.word	0x00084705
   84a98:	400a4000 	.word	0x400a4000
   84a9c:	000846b1 	.word	0x000846b1
   84aa0:	00084681 	.word	0x00084681
   84aa4:	00085db5 	.word	0x00085db5
   84aa8:	00082a99 	.word	0x00082a99
   84aac:	20001344 	.word	0x20001344
   84ab0:	00084795 	.word	0x00084795
   84ab4:	00084abd 	.word	0x00084abd
   84ab8:	00084761 	.word	0x00084761

00084abc <udd_attach>:
	cpu_irq_restore(flags);
=======
   843f4:	b480      	push	{r7}
   843f6:	b085      	sub	sp, #20
   843f8:	af00      	add	r7, sp, #0
   843fa:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   843fc:	4b1c      	ldr	r3, [pc, #112]	; (84470 <pmc_switch_mck_to_pllack+0x7c>)
   843fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84400:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   84404:	491a      	ldr	r1, [pc, #104]	; (84470 <pmc_switch_mck_to_pllack+0x7c>)
   84406:	687b      	ldr	r3, [r7, #4]
   84408:	4313      	orrs	r3, r2
   8440a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8440c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84410:	60fb      	str	r3, [r7, #12]
   84412:	e007      	b.n	84424 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84414:	68fb      	ldr	r3, [r7, #12]
   84416:	2b00      	cmp	r3, #0
   84418:	d101      	bne.n	8441e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8441a:	2301      	movs	r3, #1
   8441c:	e023      	b.n	84466 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8441e:	68fb      	ldr	r3, [r7, #12]
   84420:	3b01      	subs	r3, #1
   84422:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84424:	4b12      	ldr	r3, [pc, #72]	; (84470 <pmc_switch_mck_to_pllack+0x7c>)
   84426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84428:	f003 0308 	and.w	r3, r3, #8
   8442c:	2b00      	cmp	r3, #0
   8442e:	d0f1      	beq.n	84414 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84430:	4b0f      	ldr	r3, [pc, #60]	; (84470 <pmc_switch_mck_to_pllack+0x7c>)
   84432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84434:	f023 0303 	bic.w	r3, r3, #3
   84438:	4a0d      	ldr	r2, [pc, #52]	; (84470 <pmc_switch_mck_to_pllack+0x7c>)
   8443a:	f043 0302 	orr.w	r3, r3, #2
   8443e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84440:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84444:	60fb      	str	r3, [r7, #12]
   84446:	e007      	b.n	84458 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84448:	68fb      	ldr	r3, [r7, #12]
   8444a:	2b00      	cmp	r3, #0
   8444c:	d101      	bne.n	84452 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   8444e:	2301      	movs	r3, #1
   84450:	e009      	b.n	84466 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   84452:	68fb      	ldr	r3, [r7, #12]
   84454:	3b01      	subs	r3, #1
   84456:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84458:	4b05      	ldr	r3, [pc, #20]	; (84470 <pmc_switch_mck_to_pllack+0x7c>)
   8445a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8445c:	f003 0308 	and.w	r3, r3, #8
   84460:	2b00      	cmp	r3, #0
   84462:	d0f1      	beq.n	84448 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   84464:	2300      	movs	r3, #0
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
}
   84466:	4618      	mov	r0, r3
   84468:	3714      	adds	r7, #20
   8446a:	46bd      	mov	sp, r7
   8446c:	bc80      	pop	{r7}
   8446e:	4770      	bx	lr
   84470:	400e0400 	.word	0x400e0400

00084474 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
<<<<<<< HEAD
   84abc:	b580      	push	{r7, lr}
   84abe:	b082      	sub	sp, #8
   84ac0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   84ac2:	4b26      	ldr	r3, [pc, #152]	; (84b5c <udd_attach+0xa0>)
   84ac4:	4798      	blx	r3
   84ac6:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   84ac8:	2001      	movs	r0, #1
   84aca:	4b25      	ldr	r3, [pc, #148]	; (84b60 <udd_attach+0xa4>)
   84acc:	4798      	blx	r3
	udd_enable_periph_ck();
   84ace:	201d      	movs	r0, #29
   84ad0:	4b24      	ldr	r3, [pc, #144]	; (84b64 <udd_attach+0xa8>)
   84ad2:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   84ad4:	4b24      	ldr	r3, [pc, #144]	; (84b68 <udd_attach+0xac>)
   84ad6:	681b      	ldr	r3, [r3, #0]
   84ad8:	4a23      	ldr	r2, [pc, #140]	; (84b68 <udd_attach+0xac>)
   84ada:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84ade:	6013      	str	r3, [r2, #0]
   84ae0:	4b21      	ldr	r3, [pc, #132]	; (84b68 <udd_attach+0xac>)
   84ae2:	681b      	ldr	r3, [r3, #0]
   84ae4:	4a20      	ldr	r2, [pc, #128]	; (84b68 <udd_attach+0xac>)
   84ae6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   84aea:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   84aec:	4b1e      	ldr	r3, [pc, #120]	; (84b68 <udd_attach+0xac>)
   84aee:	691b      	ldr	r3, [r3, #16]
   84af0:	4a1d      	ldr	r2, [pc, #116]	; (84b68 <udd_attach+0xac>)
   84af2:	f043 0310 	orr.w	r3, r3, #16
   84af6:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   84af8:	4b1b      	ldr	r3, [pc, #108]	; (84b68 <udd_attach+0xac>)
   84afa:	691b      	ldr	r3, [r3, #16]
   84afc:	4a1a      	ldr	r2, [pc, #104]	; (84b68 <udd_attach+0xac>)
   84afe:	f043 0302 	orr.w	r3, r3, #2
   84b02:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   84b04:	4b18      	ldr	r3, [pc, #96]	; (84b68 <udd_attach+0xac>)
   84b06:	691b      	ldr	r3, [r3, #16]
   84b08:	4a17      	ldr	r2, [pc, #92]	; (84b68 <udd_attach+0xac>)
   84b0a:	f043 0320 	orr.w	r3, r3, #32
   84b0e:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   84b10:	4b15      	ldr	r3, [pc, #84]	; (84b68 <udd_attach+0xac>)
   84b12:	691b      	ldr	r3, [r3, #16]
   84b14:	4a14      	ldr	r2, [pc, #80]	; (84b68 <udd_attach+0xac>)
   84b16:	f043 0308 	orr.w	r3, r3, #8
   84b1a:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   84b1c:	4b12      	ldr	r3, [pc, #72]	; (84b68 <udd_attach+0xac>)
   84b1e:	691b      	ldr	r3, [r3, #16]
   84b20:	4a11      	ldr	r2, [pc, #68]	; (84b68 <udd_attach+0xac>)
   84b22:	f043 0304 	orr.w	r3, r3, #4
   84b26:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   84b28:	4b0f      	ldr	r3, [pc, #60]	; (84b68 <udd_attach+0xac>)
   84b2a:	2208      	movs	r2, #8
   84b2c:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   84b2e:	4b0e      	ldr	r3, [pc, #56]	; (84b68 <udd_attach+0xac>)
   84b30:	2204      	movs	r2, #4
   84b32:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84b34:	4b0c      	ldr	r3, [pc, #48]	; (84b68 <udd_attach+0xac>)
   84b36:	2210      	movs	r2, #16
   84b38:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   84b3a:	4b0b      	ldr	r3, [pc, #44]	; (84b68 <udd_attach+0xac>)
   84b3c:	2202      	movs	r2, #2
   84b3e:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   84b40:	4b09      	ldr	r3, [pc, #36]	; (84b68 <udd_attach+0xac>)
   84b42:	2220      	movs	r2, #32
   84b44:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   84b46:	201d      	movs	r0, #29
   84b48:	4b08      	ldr	r3, [pc, #32]	; (84b6c <udd_attach+0xb0>)
   84b4a:	4798      	blx	r3
	cpu_irq_restore(flags);
   84b4c:	6878      	ldr	r0, [r7, #4]
   84b4e:	4b08      	ldr	r3, [pc, #32]	; (84b70 <udd_attach+0xb4>)
   84b50:	4798      	blx	r3
}
   84b52:	bf00      	nop
   84b54:	3708      	adds	r7, #8
   84b56:	46bd      	mov	sp, r7
   84b58:	bd80      	pop	{r7, pc}
   84b5a:	bf00      	nop
   84b5c:	00084705 	.word	0x00084705
   84b60:	00084805 	.word	0x00084805
   84b64:	000829dd 	.word	0x000829dd
   84b68:	400a4000 	.word	0x400a4000
   84b6c:	00082a29 	.word	0x00082a29
   84b70:	00084761 	.word	0x00084761

00084b74 <udd_detach>:
=======
   84474:	b480      	push	{r7}
   84476:	b083      	sub	sp, #12
   84478:	af00      	add	r7, sp, #0
   8447a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   8447c:	687b      	ldr	r3, [r7, #4]
   8447e:	2b01      	cmp	r3, #1
   84480:	d107      	bne.n	84492 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   84482:	4b08      	ldr	r3, [pc, #32]	; (844a4 <pmc_switch_sclk_to_32kxtal+0x30>)
   84484:	689b      	ldr	r3, [r3, #8]
   84486:	4a07      	ldr	r2, [pc, #28]	; (844a4 <pmc_switch_sclk_to_32kxtal+0x30>)
   84488:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8448c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   84490:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   84492:	4b04      	ldr	r3, [pc, #16]	; (844a4 <pmc_switch_sclk_to_32kxtal+0x30>)
   84494:	4a04      	ldr	r2, [pc, #16]	; (844a8 <pmc_switch_sclk_to_32kxtal+0x34>)
   84496:	601a      	str	r2, [r3, #0]
}
   84498:	bf00      	nop
   8449a:	370c      	adds	r7, #12
   8449c:	46bd      	mov	sp, r7
   8449e:	bc80      	pop	{r7}
   844a0:	4770      	bx	lr
   844a2:	bf00      	nop
   844a4:	400e1210 	.word	0x400e1210
   844a8:	a5000008 	.word	0xa5000008

000844ac <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   844ac:	b480      	push	{r7}
   844ae:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   844b0:	4b09      	ldr	r3, [pc, #36]	; (844d8 <pmc_osc_is_ready_32kxtal+0x2c>)
   844b2:	695b      	ldr	r3, [r3, #20]
   844b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   844b8:	2b00      	cmp	r3, #0
   844ba:	d007      	beq.n	844cc <pmc_osc_is_ready_32kxtal+0x20>
   844bc:	4b07      	ldr	r3, [pc, #28]	; (844dc <pmc_osc_is_ready_32kxtal+0x30>)
   844be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   844c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   844c4:	2b00      	cmp	r3, #0
   844c6:	d001      	beq.n	844cc <pmc_osc_is_ready_32kxtal+0x20>
   844c8:	2301      	movs	r3, #1
   844ca:	e000      	b.n	844ce <pmc_osc_is_ready_32kxtal+0x22>
   844cc:	2300      	movs	r3, #0
}
   844ce:	4618      	mov	r0, r3
   844d0:	46bd      	mov	sp, r7
   844d2:	bc80      	pop	{r7}
   844d4:	4770      	bx	lr
   844d6:	bf00      	nop
   844d8:	400e1210 	.word	0x400e1210
   844dc:	400e0400 	.word	0x400e0400

000844e0 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   844e0:	b480      	push	{r7}
   844e2:	b083      	sub	sp, #12
   844e4:	af00      	add	r7, sp, #0
   844e6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   844e8:	4b13      	ldr	r3, [pc, #76]	; (84538 <pmc_osc_enable_fastrc+0x58>)
   844ea:	6a1b      	ldr	r3, [r3, #32]
   844ec:	4a12      	ldr	r2, [pc, #72]	; (84538 <pmc_osc_enable_fastrc+0x58>)
   844ee:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   844f2:	f043 0308 	orr.w	r3, r3, #8
   844f6:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   844f8:	bf00      	nop
   844fa:	4b0f      	ldr	r3, [pc, #60]	; (84538 <pmc_osc_enable_fastrc+0x58>)
   844fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   844fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   84502:	2b00      	cmp	r3, #0
   84504:	d0f9      	beq.n	844fa <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   84506:	4b0c      	ldr	r3, [pc, #48]	; (84538 <pmc_osc_enable_fastrc+0x58>)
   84508:	6a1b      	ldr	r3, [r3, #32]
   8450a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   84512:	687a      	ldr	r2, [r7, #4]
   84514:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   84516:	4a08      	ldr	r2, [pc, #32]	; (84538 <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   84518:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8451c:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8451e:	bf00      	nop
   84520:	4b05      	ldr	r3, [pc, #20]	; (84538 <pmc_osc_enable_fastrc+0x58>)
   84522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   84528:	2b00      	cmp	r3, #0
   8452a:	d0f9      	beq.n	84520 <pmc_osc_enable_fastrc+0x40>
}
   8452c:	bf00      	nop
   8452e:	bf00      	nop
   84530:	370c      	adds	r7, #12
   84532:	46bd      	mov	sp, r7
   84534:	bc80      	pop	{r7}
   84536:	4770      	bx	lr
   84538:	400e0400 	.word	0x400e0400

0008453c <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
<<<<<<< HEAD
   84b74:	b580      	push	{r7, lr}
   84b76:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   84b78:	201d      	movs	r0, #29
   84b7a:	4b0b      	ldr	r3, [pc, #44]	; (84ba8 <udd_detach+0x34>)
   84b7c:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   84b7e:	4b0b      	ldr	r3, [pc, #44]	; (84bac <udd_detach+0x38>)
   84b80:	681b      	ldr	r3, [r3, #0]
   84b82:	4a0a      	ldr	r2, [pc, #40]	; (84bac <udd_detach+0x38>)
   84b84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   84b88:	6013      	str	r3, [r2, #0]
   84b8a:	4b08      	ldr	r3, [pc, #32]	; (84bac <udd_detach+0x38>)
   84b8c:	681b      	ldr	r3, [r3, #0]
   84b8e:	4a07      	ldr	r2, [pc, #28]	; (84bac <udd_detach+0x38>)
   84b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84b94:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   84b96:	201d      	movs	r0, #29
   84b98:	4b05      	ldr	r3, [pc, #20]	; (84bb0 <udd_detach+0x3c>)
   84b9a:	4798      	blx	r3
	udd_sleep_mode(false);
   84b9c:	2000      	movs	r0, #0
   84b9e:	4b05      	ldr	r3, [pc, #20]	; (84bb4 <udd_detach+0x40>)
   84ba0:	4798      	blx	r3
}
   84ba2:	bf00      	nop
   84ba4:	bd80      	pop	{r7, pc}
   84ba6:	bf00      	nop
   84ba8:	000829dd 	.word	0x000829dd
   84bac:	400a4000 	.word	0x400a4000
   84bb0:	00082a29 	.word	0x00082a29
   84bb4:	00084805 	.word	0x00084805

00084bb8 <udd_is_high_speed>:
=======
   8453c:	b480      	push	{r7}
   8453e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   84540:	4b03      	ldr	r3, [pc, #12]	; (84550 <pmc_osc_is_ready_fastrc+0x14>)
   84542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   84548:	4618      	mov	r0, r3
   8454a:	46bd      	mov	sp, r7
   8454c:	bc80      	pop	{r7}
   8454e:	4770      	bx	lr
   84550:	400e0400 	.word	0x400e0400

00084554 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   84554:	b480      	push	{r7}
   84556:	b085      	sub	sp, #20
   84558:	af00      	add	r7, sp, #0
   8455a:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   8455c:	4b10      	ldr	r3, [pc, #64]	; (845a0 <pmc_osc_enable_main_xtal+0x4c>)
   8455e:	6a1b      	ldr	r3, [r3, #32]
   84560:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   84562:	68fb      	ldr	r3, [r7, #12]
   84564:	f023 0303 	bic.w	r3, r3, #3
   84568:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8456a:	687b      	ldr	r3, [r7, #4]
   8456c:	021b      	lsls	r3, r3, #8
   8456e:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   84570:	68fb      	ldr	r3, [r7, #12]
   84572:	4313      	orrs	r3, r2
   84574:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84578:	f043 0301 	orr.w	r3, r3, #1
   8457c:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   8457e:	4a08      	ldr	r2, [pc, #32]	; (845a0 <pmc_osc_enable_main_xtal+0x4c>)
   84580:	68fb      	ldr	r3, [r7, #12]
   84582:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   84584:	bf00      	nop
   84586:	4b06      	ldr	r3, [pc, #24]	; (845a0 <pmc_osc_enable_main_xtal+0x4c>)
   84588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8458a:	f003 0301 	and.w	r3, r3, #1
   8458e:	2b00      	cmp	r3, #0
   84590:	d0f9      	beq.n	84586 <pmc_osc_enable_main_xtal+0x32>
}
   84592:	bf00      	nop
   84594:	bf00      	nop
   84596:	3714      	adds	r7, #20
   84598:	46bd      	mov	sp, r7
   8459a:	bc80      	pop	{r7}
   8459c:	4770      	bx	lr
   8459e:	bf00      	nop
   845a0:	400e0400 	.word	0x400e0400
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

000845a4 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
<<<<<<< HEAD
   84bb8:	b480      	push	{r7}
   84bba:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   84bbc:	4b06      	ldr	r3, [pc, #24]	; (84bd8 <udd_is_high_speed+0x20>)
   84bbe:	695b      	ldr	r3, [r3, #20]
   84bc0:	f003 0301 	and.w	r3, r3, #1
   84bc4:	2b00      	cmp	r3, #0
   84bc6:	bf14      	ite	ne
   84bc8:	2301      	movne	r3, #1
   84bca:	2300      	moveq	r3, #0
   84bcc:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   84bce:	4618      	mov	r0, r3
   84bd0:	46bd      	mov	sp, r7
   84bd2:	bc80      	pop	{r7}
   84bd4:	4770      	bx	lr
   84bd6:	bf00      	nop
   84bd8:	400a4000 	.word	0x400a4000

00084bdc <udd_set_address>:
=======
   845a4:	b480      	push	{r7}
   845a6:	b083      	sub	sp, #12
   845a8:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   845aa:	4b0a      	ldr	r3, [pc, #40]	; (845d4 <pmc_osc_bypass_main_xtal+0x30>)
   845ac:	6a1b      	ldr	r3, [r3, #32]
   845ae:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   845b0:	687b      	ldr	r3, [r7, #4]
   845b2:	f023 0303 	bic.w	r3, r3, #3
   845b6:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   845b8:	687b      	ldr	r3, [r7, #4]
   845ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   845be:	f043 0302 	orr.w	r3, r3, #2
   845c2:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   845c4:	4a03      	ldr	r2, [pc, #12]	; (845d4 <pmc_osc_bypass_main_xtal+0x30>)
   845c6:	687b      	ldr	r3, [r7, #4]
   845c8:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   845ca:	bf00      	nop
   845cc:	370c      	adds	r7, #12
   845ce:	46bd      	mov	sp, r7
   845d0:	bc80      	pop	{r7}
   845d2:	4770      	bx	lr
   845d4:	400e0400 	.word	0x400e0400
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

000845d8 <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
<<<<<<< HEAD
   84bdc:	b480      	push	{r7}
   84bde:	b083      	sub	sp, #12
   84be0:	af00      	add	r7, sp, #0
   84be2:	4603      	mov	r3, r0
   84be4:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   84be6:	4b0d      	ldr	r3, [pc, #52]	; (84c1c <udd_set_address+0x40>)
   84be8:	681b      	ldr	r3, [r3, #0]
   84bea:	4a0c      	ldr	r2, [pc, #48]	; (84c1c <udd_set_address+0x40>)
   84bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84bf0:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   84bf2:	4b0a      	ldr	r3, [pc, #40]	; (84c1c <udd_set_address+0x40>)
   84bf4:	681b      	ldr	r3, [r3, #0]
   84bf6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   84bfa:	79fb      	ldrb	r3, [r7, #7]
   84bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   84c00:	4906      	ldr	r1, [pc, #24]	; (84c1c <udd_set_address+0x40>)
   84c02:	4313      	orrs	r3, r2
   84c04:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   84c06:	4b05      	ldr	r3, [pc, #20]	; (84c1c <udd_set_address+0x40>)
   84c08:	681b      	ldr	r3, [r3, #0]
   84c0a:	4a04      	ldr	r2, [pc, #16]	; (84c1c <udd_set_address+0x40>)
   84c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84c10:	6013      	str	r3, [r2, #0]
}
   84c12:	bf00      	nop
   84c14:	370c      	adds	r7, #12
   84c16:	46bd      	mov	sp, r7
   84c18:	bc80      	pop	{r7}
   84c1a:	4770      	bx	lr
   84c1c:	400a4000 	.word	0x400a4000

00084c20 <udd_getaddress>:

=======
   845d8:	b480      	push	{r7}
   845da:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   845dc:	4b03      	ldr	r3, [pc, #12]	; (845ec <pmc_osc_is_bypassed_main_xtal+0x14>)
   845de:	6a1b      	ldr	r3, [r3, #32]
   845e0:	f003 0302 	and.w	r3, r3, #2
}
   845e4:	4618      	mov	r0, r3
   845e6:	46bd      	mov	sp, r7
   845e8:	bc80      	pop	{r7}
   845ea:	4770      	bx	lr
   845ec:	400e0400 	.word	0x400e0400
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

000845f0 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
<<<<<<< HEAD
   84c20:	b480      	push	{r7}
   84c22:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   84c24:	4b04      	ldr	r3, [pc, #16]	; (84c38 <udd_getaddress+0x18>)
   84c26:	681b      	ldr	r3, [r3, #0]
   84c28:	b2db      	uxtb	r3, r3
   84c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   84c2e:	b2db      	uxtb	r3, r3
}
   84c30:	4618      	mov	r0, r3
   84c32:	46bd      	mov	sp, r7
   84c34:	bc80      	pop	{r7}
   84c36:	4770      	bx	lr
   84c38:	400a4000 	.word	0x400a4000

00084c3c <udd_set_setup_payload>:
	}
=======
   845f0:	b480      	push	{r7}
   845f2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   845f4:	4b03      	ldr	r3, [pc, #12]	; (84604 <pmc_osc_is_ready_main_xtal+0x14>)
   845f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   845f8:	f003 0301 	and.w	r3, r3, #1
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
}
   845fc:	4618      	mov	r0, r3
   845fe:	46bd      	mov	sp, r7
   84600:	bc80      	pop	{r7}
   84602:	4770      	bx	lr
   84604:	400e0400 	.word	0x400e0400

<<<<<<< HEAD

void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   84c3c:	b480      	push	{r7}
   84c3e:	b083      	sub	sp, #12
   84c40:	af00      	add	r7, sp, #0
   84c42:	6078      	str	r0, [r7, #4]
   84c44:	460b      	mov	r3, r1
   84c46:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   84c48:	4a05      	ldr	r2, [pc, #20]	; (84c60 <udd_set_setup_payload+0x24>)
   84c4a:	687b      	ldr	r3, [r7, #4]
   84c4c:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   84c4e:	4a04      	ldr	r2, [pc, #16]	; (84c60 <udd_set_setup_payload+0x24>)
   84c50:	887b      	ldrh	r3, [r7, #2]
   84c52:	8193      	strh	r3, [r2, #12]
}
   84c54:	bf00      	nop
   84c56:	370c      	adds	r7, #12
   84c58:	46bd      	mov	sp, r7
   84c5a:	bc80      	pop	{r7}
   84c5c:	4770      	bx	lr
   84c5e:	bf00      	nop
   84c60:	20001828 	.word	0x20001828

00084c64 <udd_ep_alloc>:
=======
00084608 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   84608:	b480      	push	{r7}
   8460a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8460c:	4b03      	ldr	r3, [pc, #12]	; (8461c <pmc_osc_is_ready_mainck+0x14>)
   8460e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   84614:	4618      	mov	r0, r3
   84616:	46bd      	mov	sp, r7
   84618:	bc80      	pop	{r7}
   8461a:	4770      	bx	lr
   8461c:	400e0400 	.word	0x400e0400

00084620 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   84620:	b480      	push	{r7}
   84622:	b085      	sub	sp, #20
   84624:	af00      	add	r7, sp, #0
   84626:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   84628:	4b0c      	ldr	r3, [pc, #48]	; (8465c <pmc_mainck_osc_select+0x3c>)
   8462a:	6a1b      	ldr	r3, [r3, #32]
   8462c:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   8462e:	687b      	ldr	r3, [r7, #4]
   84630:	2b00      	cmp	r3, #0
   84632:	d004      	beq.n	8463e <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   84634:	68fb      	ldr	r3, [r7, #12]
   84636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   8463a:	60fb      	str	r3, [r7, #12]
   8463c:	e003      	b.n	84646 <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   8463e:	68fb      	ldr	r3, [r7, #12]
   84640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   84644:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   84646:	4a05      	ldr	r2, [pc, #20]	; (8465c <pmc_mainck_osc_select+0x3c>)
   84648:	68fb      	ldr	r3, [r7, #12]
   8464a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8464e:	6213      	str	r3, [r2, #32]
}
   84650:	bf00      	nop
   84652:	3714      	adds	r7, #20
   84654:	46bd      	mov	sp, r7
   84656:	bc80      	pop	{r7}
   84658:	4770      	bx	lr
   8465a:	bf00      	nop
   8465c:	400e0400 	.word	0x400e0400
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

00084660 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
<<<<<<< HEAD
   84c64:	b590      	push	{r4, r7, lr}
   84c66:	b089      	sub	sp, #36	; 0x24
   84c68:	af02      	add	r7, sp, #8
   84c6a:	4603      	mov	r3, r0
   84c6c:	71fb      	strb	r3, [r7, #7]
   84c6e:	460b      	mov	r3, r1
   84c70:	71bb      	strb	r3, [r7, #6]
   84c72:	4613      	mov	r3, r2
   84c74:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   84c76:	2300      	movs	r3, #0
   84c78:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   84c7a:	2300      	movs	r3, #0
   84c7c:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   84c7e:	79fb      	ldrb	r3, [r7, #7]
   84c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
   84c84:	2b00      	cmp	r3, #0
   84c86:	bf14      	ite	ne
   84c88:	2301      	movne	r3, #1
   84c8a:	2300      	moveq	r3, #0
   84c8c:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   84c8e:	79fb      	ldrb	r3, [r7, #7]
   84c90:	f003 030f 	and.w	r3, r3, #15
   84c94:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   84c96:	79fb      	ldrb	r3, [r7, #7]
   84c98:	2b02      	cmp	r3, #2
   84c9a:	d901      	bls.n	84ca0 <udd_ep_alloc+0x3c>
		return false;
   84c9c:	2300      	movs	r3, #0
   84c9e:	e1b4      	b.n	8500a <udd_ep_alloc+0x3a6>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   84ca0:	4ab3      	ldr	r2, [pc, #716]	; (84f70 <udd_ep_alloc+0x30c>)
   84ca2:	79fb      	ldrb	r3, [r7, #7]
   84ca4:	015b      	lsls	r3, r3, #5
   84ca6:	4413      	add	r3, r2
   84ca8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84cac:	681b      	ldr	r3, [r3, #0]
   84cae:	f003 0301 	and.w	r3, r3, #1
   84cb2:	2b00      	cmp	r3, #0
   84cb4:	d001      	beq.n	84cba <udd_ep_alloc+0x56>
		return false;
   84cb6:	2300      	movs	r3, #0
   84cb8:	e1a7      	b.n	8500a <udd_ep_alloc+0x3a6>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   84cba:	79bb      	ldrb	r3, [r7, #6]
   84cbc:	f003 0303 	and.w	r3, r3, #3
   84cc0:	2b03      	cmp	r3, #3
   84cc2:	d01a      	beq.n	84cfa <udd_ep_alloc+0x96>
   84cc4:	2b03      	cmp	r3, #3
   84cc6:	dc1e      	bgt.n	84d06 <udd_ep_alloc+0xa2>
   84cc8:	2b01      	cmp	r3, #1
   84cca:	d002      	beq.n	84cd2 <udd_ep_alloc+0x6e>
   84ccc:	2b02      	cmp	r3, #2
   84cce:	d017      	beq.n	84d00 <udd_ep_alloc+0x9c>
   84cd0:	e019      	b.n	84d06 <udd_ep_alloc+0xa2>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   84cd2:	79fb      	ldrb	r3, [r7, #7]
   84cd4:	2b00      	cmp	r3, #0
   84cd6:	d007      	beq.n	84ce8 <udd_ep_alloc+0x84>
   84cd8:	79fb      	ldrb	r3, [r7, #7]
   84cda:	2b03      	cmp	r3, #3
   84cdc:	d004      	beq.n	84ce8 <udd_ep_alloc+0x84>
   84cde:	79fb      	ldrb	r3, [r7, #7]
   84ce0:	2b04      	cmp	r3, #4
   84ce2:	d001      	beq.n	84ce8 <udd_ep_alloc+0x84>
   84ce4:	2301      	movs	r3, #1
   84ce6:	e000      	b.n	84cea <udd_ep_alloc+0x86>
   84ce8:	2300      	movs	r3, #0
   84cea:	747b      	strb	r3, [r7, #17]
   84cec:	7c7b      	ldrb	r3, [r7, #17]
   84cee:	f003 0301 	and.w	r3, r3, #1
   84cf2:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   84cf4:	2301      	movs	r3, #1
   84cf6:	757b      	strb	r3, [r7, #21]
		break;
   84cf8:	e007      	b.n	84d0a <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   84cfa:	2301      	movs	r3, #1
   84cfc:	757b      	strb	r3, [r7, #21]
		break;
   84cfe:	e004      	b.n	84d0a <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   84d00:	2302      	movs	r3, #2
   84d02:	757b      	strb	r3, [r7, #21]
		break;
   84d04:	e001      	b.n	84d0a <udd_ep_alloc+0xa6>
	default:
		Assert(false);
		return false;
   84d06:	2300      	movs	r3, #0
   84d08:	e17f      	b.n	8500a <udd_ep_alloc+0x3a6>
	}
	switch (nb_bank) {
   84d0a:	7d7b      	ldrb	r3, [r7, #21]
   84d0c:	2b03      	cmp	r3, #3
   84d0e:	d00c      	beq.n	84d2a <udd_ep_alloc+0xc6>
   84d10:	2b03      	cmp	r3, #3
   84d12:	dc0d      	bgt.n	84d30 <udd_ep_alloc+0xcc>
   84d14:	2b01      	cmp	r3, #1
   84d16:	d002      	beq.n	84d1e <udd_ep_alloc+0xba>
   84d18:	2b02      	cmp	r3, #2
   84d1a:	d003      	beq.n	84d24 <udd_ep_alloc+0xc0>
   84d1c:	e008      	b.n	84d30 <udd_ep_alloc+0xcc>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84d1e:	2301      	movs	r3, #1
   84d20:	753b      	strb	r3, [r7, #20]
		break;
   84d22:	e007      	b.n	84d34 <udd_ep_alloc+0xd0>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84d24:	2302      	movs	r3, #2
   84d26:	753b      	strb	r3, [r7, #20]
		break;
   84d28:	e004      	b.n	84d34 <udd_ep_alloc+0xd0>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84d2a:	2303      	movs	r3, #3
   84d2c:	753b      	strb	r3, [r7, #20]
		break;
   84d2e:	e001      	b.n	84d34 <udd_ep_alloc+0xd0>
	default:
		Assert(false);
		return false;
   84d30:	2300      	movs	r3, #0
   84d32:	e16a      	b.n	8500a <udd_ep_alloc+0x3a6>
	}
	if (b_iso_hbw) {
   84d34:	7c7b      	ldrb	r3, [r7, #17]
   84d36:	2b00      	cmp	r3, #0
   84d38:	d017      	beq.n	84d6a <udd_ep_alloc+0x106>
		switch(MaxEndpointSize & (0x3u << 11)) {
   84d3a:	88bb      	ldrh	r3, [r7, #4]
   84d3c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   84d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   84d44:	d003      	beq.n	84d4e <udd_ep_alloc+0xea>
   84d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   84d4a:	d003      	beq.n	84d54 <udd_ep_alloc+0xf0>
   84d4c:	e005      	b.n	84d5a <udd_ep_alloc+0xf6>
		case (0x1u << 11):
			nb_tran = 2;
   84d4e:	2302      	movs	r3, #2
   84d50:	74fb      	strb	r3, [r7, #19]
			break;
   84d52:	e005      	b.n	84d60 <udd_ep_alloc+0xfc>
		case (0x2u << 11):
			nb_tran = 3;
   84d54:	2303      	movs	r3, #3
   84d56:	74fb      	strb	r3, [r7, #19]
			break;
   84d58:	e002      	b.n	84d60 <udd_ep_alloc+0xfc>
		default:
			nb_tran = 1;
   84d5a:	2301      	movs	r3, #1
   84d5c:	74fb      	strb	r3, [r7, #19]
			break;
   84d5e:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   84d60:	88bb      	ldrh	r3, [r7, #4]
   84d62:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   84d66:	80bb      	strh	r3, [r7, #4]
   84d68:	e006      	b.n	84d78 <udd_ep_alloc+0x114>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   84d6a:	88bb      	ldrh	r3, [r7, #4]
   84d6c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   84d70:	2b00      	cmp	r3, #0
   84d72:	d001      	beq.n	84d78 <udd_ep_alloc+0x114>
		// High BW not supported
		return false;
   84d74:	2300      	movs	r3, #0
   84d76:	e148      	b.n	8500a <udd_ep_alloc+0x3a6>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   84d78:	4a7d      	ldr	r2, [pc, #500]	; (84f70 <udd_ep_alloc+0x30c>)
   84d7a:	79fb      	ldrb	r3, [r7, #7]
   84d7c:	3308      	adds	r3, #8
   84d7e:	015b      	lsls	r3, r3, #5
   84d80:	4413      	add	r3, r2
   84d82:	681b      	ldr	r3, [r3, #0]
   84d84:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   84d88:	f023 0303 	bic.w	r3, r3, #3
   84d8c:	79ba      	ldrb	r2, [r7, #6]
   84d8e:	0112      	lsls	r2, r2, #4
   84d90:	f002 0230 	and.w	r2, r2, #48	; 0x30
   84d94:	7c39      	ldrb	r1, [r7, #16]
   84d96:	2900      	cmp	r1, #0
   84d98:	d001      	beq.n	84d9e <udd_ep_alloc+0x13a>
   84d9a:	2108      	movs	r1, #8
   84d9c:	e000      	b.n	84da0 <udd_ep_alloc+0x13c>
   84d9e:	2100      	movs	r1, #0
   84da0:	4311      	orrs	r1, r2
   84da2:	88ba      	ldrh	r2, [r7, #4]
   84da4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   84da8:	d207      	bcs.n	84dba <udd_ep_alloc+0x156>
   84daa:	88ba      	ldrh	r2, [r7, #4]
   84dac:	2a08      	cmp	r2, #8
   84dae:	bf38      	it	cc
   84db0:	2208      	movcc	r2, #8
   84db2:	b292      	uxth	r2, r2
   84db4:	0052      	lsls	r2, r2, #1
   84db6:	3a01      	subs	r2, #1
   84db8:	e001      	b.n	84dbe <udd_ep_alloc+0x15a>
   84dba:	f240 72ff 	movw	r2, #2047	; 0x7ff
   84dbe:	fab2 f282 	clz	r2, r2
   84dc2:	f1c2 021c 	rsb	r2, r2, #28
   84dc6:	4311      	orrs	r1, r2
   84dc8:	7d3a      	ldrb	r2, [r7, #20]
   84dca:	0192      	lsls	r2, r2, #6
   84dcc:	b2d2      	uxtb	r2, r2
   84dce:	4311      	orrs	r1, r2
   84dd0:	7c7a      	ldrb	r2, [r7, #17]
   84dd2:	2a00      	cmp	r2, #0
   84dd4:	d004      	beq.n	84de0 <udd_ep_alloc+0x17c>
   84dd6:	7cfa      	ldrb	r2, [r7, #19]
   84dd8:	0212      	lsls	r2, r2, #8
   84dda:	f402 7240 	and.w	r2, r2, #768	; 0x300
   84dde:	e000      	b.n	84de2 <udd_ep_alloc+0x17e>
   84de0:	2200      	movs	r2, #0
   84de2:	430a      	orrs	r2, r1
   84de4:	f3c2 0209 	ubfx	r2, r2, #0, #10
   84de8:	4861      	ldr	r0, [pc, #388]	; (84f70 <udd_ep_alloc+0x30c>)
   84dea:	79f9      	ldrb	r1, [r7, #7]
   84dec:	431a      	orrs	r2, r3
   84dee:	f101 0308 	add.w	r3, r1, #8
   84df2:	015b      	lsls	r3, r3, #5
   84df4:	4403      	add	r3, r0
   84df6:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   84df8:	4a5d      	ldr	r2, [pc, #372]	; (84f70 <udd_ep_alloc+0x30c>)
   84dfa:	79fb      	ldrb	r3, [r7, #7]
   84dfc:	3308      	adds	r3, #8
   84dfe:	015b      	lsls	r3, r3, #5
   84e00:	4413      	add	r3, r2
   84e02:	681b      	ldr	r3, [r3, #0]
   84e04:	2b00      	cmp	r3, #0
   84e06:	db01      	blt.n	84e0c <udd_ep_alloc+0x1a8>
		return false;
   84e08:	2300      	movs	r3, #0
   84e0a:	e0fe      	b.n	8500a <udd_ep_alloc+0x3a6>
	}
	udd_enable_endpoint(ep);
   84e0c:	4a58      	ldr	r2, [pc, #352]	; (84f70 <udd_ep_alloc+0x30c>)
   84e0e:	79fb      	ldrb	r3, [r7, #7]
   84e10:	3308      	adds	r3, #8
   84e12:	015b      	lsls	r3, r3, #5
   84e14:	4413      	add	r3, r2
   84e16:	3304      	adds	r3, #4
   84e18:	2201      	movs	r2, #1
   84e1a:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   84e1c:	2300      	movs	r3, #0
   84e1e:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84e20:	2302      	movs	r3, #2
   84e22:	74bb      	strb	r3, [r7, #18]
   84e24:	e039      	b.n	84e9a <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
   84e26:	4a52      	ldr	r2, [pc, #328]	; (84f70 <udd_ep_alloc+0x30c>)
   84e28:	7cbb      	ldrb	r3, [r7, #18]
   84e2a:	015b      	lsls	r3, r3, #5
   84e2c:	4413      	add	r3, r2
   84e2e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84e32:	681b      	ldr	r3, [r3, #0]
   84e34:	f003 0301 	and.w	r3, r3, #1
   84e38:	2b00      	cmp	r3, #0
   84e3a:	d02b      	beq.n	84e94 <udd_ep_alloc+0x230>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   84e3c:	4a4c      	ldr	r2, [pc, #304]	; (84f70 <udd_ep_alloc+0x30c>)
   84e3e:	7cbb      	ldrb	r3, [r7, #18]
   84e40:	3308      	adds	r3, #8
   84e42:	015b      	lsls	r3, r3, #5
   84e44:	4413      	add	r3, r2
   84e46:	681b      	ldr	r3, [r3, #0]
   84e48:	099b      	lsrs	r3, r3, #6
   84e4a:	b2db      	uxtb	r3, r3
   84e4c:	f003 0303 	and.w	r3, r3, #3
   84e50:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   84e52:	7d3a      	ldrb	r2, [r7, #20]
   84e54:	7cbb      	ldrb	r3, [r7, #18]
   84e56:	005b      	lsls	r3, r3, #1
   84e58:	fa02 f303 	lsl.w	r3, r2, r3
   84e5c:	b21a      	sxth	r2, r3
   84e5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   84e62:	4313      	orrs	r3, r2
   84e64:	b21b      	sxth	r3, r3
   84e66:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   84e68:	4a41      	ldr	r2, [pc, #260]	; (84f70 <udd_ep_alloc+0x30c>)
   84e6a:	7cbb      	ldrb	r3, [r7, #18]
   84e6c:	015b      	lsls	r3, r3, #5
   84e6e:	4413      	add	r3, r2
   84e70:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84e74:	2201      	movs	r2, #1
   84e76:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   84e78:	4a3d      	ldr	r2, [pc, #244]	; (84f70 <udd_ep_alloc+0x30c>)
   84e7a:	7cbb      	ldrb	r3, [r7, #18]
   84e7c:	3308      	adds	r3, #8
   84e7e:	015b      	lsls	r3, r3, #5
   84e80:	4413      	add	r3, r2
   84e82:	681a      	ldr	r2, [r3, #0]
   84e84:	493a      	ldr	r1, [pc, #232]	; (84f70 <udd_ep_alloc+0x30c>)
   84e86:	7cbb      	ldrb	r3, [r7, #18]
   84e88:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   84e8c:	3308      	adds	r3, #8
   84e8e:	015b      	lsls	r3, r3, #5
   84e90:	440b      	add	r3, r1
   84e92:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84e94:	7cbb      	ldrb	r3, [r7, #18]
   84e96:	3b01      	subs	r3, #1
   84e98:	74bb      	strb	r3, [r7, #18]
   84e9a:	7cba      	ldrb	r2, [r7, #18]
   84e9c:	79fb      	ldrb	r3, [r7, #7]
   84e9e:	429a      	cmp	r2, r3
   84ea0:	d2c1      	bcs.n	84e26 <udd_ep_alloc+0x1c2>
=======
   84660:	b480      	push	{r7}
   84662:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   84664:	4b03      	ldr	r3, [pc, #12]	; (84674 <pmc_disable_pllack+0x14>)
   84666:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8466a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   8466c:	bf00      	nop
   8466e:	46bd      	mov	sp, r7
   84670:	bc80      	pop	{r7}
   84672:	4770      	bx	lr
   84674:	400e0400 	.word	0x400e0400

00084678 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   84678:	b480      	push	{r7}
   8467a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8467c:	4b03      	ldr	r3, [pc, #12]	; (8468c <pmc_is_locked_pllack+0x14>)
   8467e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84680:	f003 0302 	and.w	r3, r3, #2
}
   84684:	4618      	mov	r0, r3
   84686:	46bd      	mov	sp, r7
   84688:	bc80      	pop	{r7}
   8468a:	4770      	bx	lr
   8468c:	400e0400 	.word	0x400e0400

00084690 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   84690:	b480      	push	{r7}
   84692:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   84694:	4b04      	ldr	r3, [pc, #16]	; (846a8 <pmc_disable_upll_clock+0x18>)
   84696:	69db      	ldr	r3, [r3, #28]
   84698:	4a03      	ldr	r2, [pc, #12]	; (846a8 <pmc_disable_upll_clock+0x18>)
   8469a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8469e:	61d3      	str	r3, [r2, #28]
}
   846a0:	bf00      	nop
   846a2:	46bd      	mov	sp, r7
   846a4:	bc80      	pop	{r7}
   846a6:	4770      	bx	lr
   846a8:	400e0400 	.word	0x400e0400

000846ac <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   846ac:	b480      	push	{r7}
   846ae:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   846b0:	4b03      	ldr	r3, [pc, #12]	; (846c0 <pmc_is_locked_upll+0x14>)
   846b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   846b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   846b8:	4618      	mov	r0, r3
   846ba:	46bd      	mov	sp, r7
   846bc:	bc80      	pop	{r7}
   846be:	4770      	bx	lr
   846c0:	400e0400 	.word	0x400e0400

000846c4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   846c4:	b480      	push	{r7}
   846c6:	b083      	sub	sp, #12
   846c8:	af00      	add	r7, sp, #0
   846ca:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   846cc:	687b      	ldr	r3, [r7, #4]
   846ce:	2b1d      	cmp	r3, #29
   846d0:	d901      	bls.n	846d6 <pmc_enable_periph_clk+0x12>
		return 1;
   846d2:	2301      	movs	r3, #1
   846d4:	e015      	b.n	84702 <pmc_enable_periph_clk+0x3e>
	}
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	if (ul_id < 32) {
   846d6:	687b      	ldr	r3, [r7, #4]
   846d8:	2b1f      	cmp	r3, #31
   846da:	d811      	bhi.n	84700 <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   846dc:	4b0b      	ldr	r3, [pc, #44]	; (8470c <pmc_enable_periph_clk+0x48>)
   846de:	699a      	ldr	r2, [r3, #24]
   846e0:	2101      	movs	r1, #1
   846e2:	687b      	ldr	r3, [r7, #4]
   846e4:	fa01 f303 	lsl.w	r3, r1, r3
   846e8:	401a      	ands	r2, r3
   846ea:	2101      	movs	r1, #1
   846ec:	687b      	ldr	r3, [r7, #4]
   846ee:	fa01 f303 	lsl.w	r3, r1, r3
   846f2:	429a      	cmp	r2, r3
   846f4:	d004      	beq.n	84700 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   846f6:	2201      	movs	r2, #1
   846f8:	687b      	ldr	r3, [r7, #4]
   846fa:	409a      	lsls	r2, r3
   846fc:	4b03      	ldr	r3, [pc, #12]	; (8470c <pmc_enable_periph_clk+0x48>)
   846fe:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

<<<<<<< HEAD
	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   84ea2:	79fb      	ldrb	r3, [r7, #7]
   84ea4:	74bb      	strb	r3, [r7, #18]
   84ea6:	e0ab      	b.n	85000 <udd_ep_alloc+0x39c>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   84ea8:	7cbb      	ldrb	r3, [r7, #18]
   84eaa:	1e5a      	subs	r2, r3, #1
   84eac:	4613      	mov	r3, r2
   84eae:	005b      	lsls	r3, r3, #1
   84eb0:	4413      	add	r3, r2
   84eb2:	00db      	lsls	r3, r3, #3
   84eb4:	4a2f      	ldr	r2, [pc, #188]	; (84f74 <udd_ep_alloc+0x310>)
   84eb6:	4413      	add	r3, r2
   84eb8:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   84eba:	68fb      	ldr	r3, [r7, #12]
   84ebc:	7d1b      	ldrb	r3, [r3, #20]
   84ebe:	f3c3 0300 	ubfx	r3, r3, #0, #1
   84ec2:	b2db      	uxtb	r3, r3
   84ec4:	2b00      	cmp	r3, #0
   84ec6:	bf14      	ite	ne
   84ec8:	2301      	movne	r3, #1
   84eca:	2300      	moveq	r3, #0
   84ecc:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   84ece:	8afa      	ldrh	r2, [r7, #22]
   84ed0:	7cbb      	ldrb	r3, [r7, #18]
   84ed2:	005b      	lsls	r3, r3, #1
   84ed4:	fa42 f303 	asr.w	r3, r2, r3
   84ed8:	b2db      	uxtb	r3, r3
   84eda:	f003 0303 	and.w	r3, r3, #3
   84ede:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   84ee0:	7d3b      	ldrb	r3, [r7, #20]
   84ee2:	2b00      	cmp	r3, #0
   84ee4:	f000 8088 	beq.w	84ff8 <udd_ep_alloc+0x394>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   84ee8:	68fa      	ldr	r2, [r7, #12]
   84eea:	7d13      	ldrb	r3, [r2, #20]
   84eec:	f36f 0300 	bfc	r3, #0, #1
   84ef0:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   84ef2:	4a1f      	ldr	r2, [pc, #124]	; (84f70 <udd_ep_alloc+0x30c>)
   84ef4:	7cbb      	ldrb	r3, [r7, #18]
   84ef6:	3308      	adds	r3, #8
   84ef8:	015b      	lsls	r3, r3, #5
   84efa:	4413      	add	r3, r2
   84efc:	681b      	ldr	r3, [r3, #0]
   84efe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   84f02:	7d3b      	ldrb	r3, [r7, #20]
   84f04:	019b      	lsls	r3, r3, #6
   84f06:	b2da      	uxtb	r2, r3
   84f08:	4819      	ldr	r0, [pc, #100]	; (84f70 <udd_ep_alloc+0x30c>)
   84f0a:	7cbb      	ldrb	r3, [r7, #18]
   84f0c:	430a      	orrs	r2, r1
   84f0e:	3308      	adds	r3, #8
   84f10:	015b      	lsls	r3, r3, #5
   84f12:	4403      	add	r3, r0
   84f14:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   84f16:	4a16      	ldr	r2, [pc, #88]	; (84f70 <udd_ep_alloc+0x30c>)
   84f18:	7cbb      	ldrb	r3, [r7, #18]
   84f1a:	3308      	adds	r3, #8
   84f1c:	015b      	lsls	r3, r3, #5
   84f1e:	4413      	add	r3, r2
   84f20:	3304      	adds	r3, #4
   84f22:	2201      	movs	r2, #1
   84f24:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   84f26:	4a12      	ldr	r2, [pc, #72]	; (84f70 <udd_ep_alloc+0x30c>)
   84f28:	7cbb      	ldrb	r3, [r7, #18]
   84f2a:	3308      	adds	r3, #8
   84f2c:	015b      	lsls	r3, r3, #5
   84f2e:	4413      	add	r3, r2
   84f30:	681b      	ldr	r3, [r3, #0]
   84f32:	2b00      	cmp	r3, #0
   84f34:	db20      	blt.n	84f78 <udd_ep_alloc+0x314>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   84f36:	68fb      	ldr	r3, [r7, #12]
   84f38:	681b      	ldr	r3, [r3, #0]
   84f3a:	2b00      	cmp	r3, #0
   84f3c:	d101      	bne.n	84f42 <udd_ep_alloc+0x2de>
				return false;
   84f3e:	2300      	movs	r3, #0
   84f40:	e063      	b.n	8500a <udd_ep_alloc+0x3a6>
			}
			if (Is_udd_endpoint_in(i)) {
   84f42:	4a0b      	ldr	r2, [pc, #44]	; (84f70 <udd_ep_alloc+0x30c>)
   84f44:	7cbb      	ldrb	r3, [r7, #18]
   84f46:	3308      	adds	r3, #8
   84f48:	015b      	lsls	r3, r3, #5
   84f4a:	4413      	add	r3, r2
   84f4c:	681b      	ldr	r3, [r3, #0]
   84f4e:	f003 0308 	and.w	r3, r3, #8
   84f52:	2b00      	cmp	r3, #0
   84f54:	d003      	beq.n	84f5e <udd_ep_alloc+0x2fa>
				i |= USB_EP_DIR_IN;
   84f56:	7cbb      	ldrb	r3, [r7, #18]
   84f58:	f063 037f 	orn	r3, r3, #127	; 0x7f
   84f5c:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   84f5e:	68fb      	ldr	r3, [r7, #12]
   84f60:	681b      	ldr	r3, [r3, #0]
   84f62:	68fa      	ldr	r2, [r7, #12]
   84f64:	68d1      	ldr	r1, [r2, #12]
   84f66:	7cba      	ldrb	r2, [r7, #18]
   84f68:	2001      	movs	r0, #1
   84f6a:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   84f6c:	2300      	movs	r3, #0
   84f6e:	e04c      	b.n	8500a <udd_ep_alloc+0x3a6>
   84f70:	400a4000 	.word	0x400a4000
   84f74:	2000134c 	.word	0x2000134c
		}
		udd_enable_endpoint_bank_autoswitch(i);
   84f78:	4a26      	ldr	r2, [pc, #152]	; (85014 <udd_ep_alloc+0x3b0>)
   84f7a:	7cbb      	ldrb	r3, [r7, #18]
   84f7c:	3308      	adds	r3, #8
   84f7e:	015b      	lsls	r3, r3, #5
   84f80:	4413      	add	r3, r2
   84f82:	3304      	adds	r3, #4
   84f84:	681a      	ldr	r2, [r3, #0]
   84f86:	4923      	ldr	r1, [pc, #140]	; (85014 <udd_ep_alloc+0x3b0>)
   84f88:	7cbb      	ldrb	r3, [r7, #18]
   84f8a:	f042 0202 	orr.w	r2, r2, #2
   84f8e:	3308      	adds	r3, #8
   84f90:	015b      	lsls	r3, r3, #5
   84f92:	440b      	add	r3, r1
   84f94:	3304      	adds	r3, #4
   84f96:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   84f98:	7afb      	ldrb	r3, [r7, #11]
   84f9a:	2b00      	cmp	r3, #0
   84f9c:	d02d      	beq.n	84ffa <udd_ep_alloc+0x396>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   84f9e:	68fb      	ldr	r3, [r7, #12]
   84fa0:	68da      	ldr	r2, [r3, #12]
   84fa2:	68fb      	ldr	r3, [r7, #12]
   84fa4:	691b      	ldr	r3, [r3, #16]
   84fa6:	1ad2      	subs	r2, r2, r3
   84fa8:	68fb      	ldr	r3, [r7, #12]
   84faa:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   84fac:	68fb      	ldr	r3, [r7, #12]
   84fae:	7d1b      	ldrb	r3, [r3, #20]
   84fb0:	f3c3 0340 	ubfx	r3, r3, #1, #1
   84fb4:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   84fb6:	2b00      	cmp	r3, #0
   84fb8:	bf14      	ite	ne
   84fba:	2301      	movne	r3, #1
   84fbc:	2300      	moveq	r3, #0
   84fbe:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   84fc0:	68fb      	ldr	r3, [r7, #12]
   84fc2:	685a      	ldr	r2, [r3, #4]
   84fc4:	68fb      	ldr	r3, [r7, #12]
   84fc6:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   84fc8:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   84fca:	68fb      	ldr	r3, [r7, #12]
   84fcc:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   84fce:	68fb      	ldr	r3, [r7, #12]
   84fd0:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   84fd2:	1ad2      	subs	r2, r2, r3
   84fd4:	68fb      	ldr	r3, [r7, #12]
   84fd6:	681b      	ldr	r3, [r3, #0]
   84fd8:	7cb8      	ldrb	r0, [r7, #18]
   84fda:	9300      	str	r3, [sp, #0]
   84fdc:	4613      	mov	r3, r2
   84fde:	4622      	mov	r2, r4
   84fe0:	4c0d      	ldr	r4, [pc, #52]	; (85018 <udd_ep_alloc+0x3b4>)
   84fe2:	47a0      	blx	r4
   84fe4:	4603      	mov	r3, r0
   84fe6:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   84fe8:	7afb      	ldrb	r3, [r7, #11]
   84fea:	f083 0301 	eor.w	r3, r3, #1
   84fee:	b2db      	uxtb	r3, r3
   84ff0:	2b00      	cmp	r3, #0
   84ff2:	d002      	beq.n	84ffa <udd_ep_alloc+0x396>
				dbg_print("ErrReRun%d ", i);
				return false;
   84ff4:	2300      	movs	r3, #0
   84ff6:	e008      	b.n	8500a <udd_ep_alloc+0x3a6>
			continue;
   84ff8:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   84ffa:	7cbb      	ldrb	r3, [r7, #18]
   84ffc:	3301      	adds	r3, #1
   84ffe:	74bb      	strb	r3, [r7, #18]
   85000:	7cbb      	ldrb	r3, [r7, #18]
   85002:	2b02      	cmp	r3, #2
   85004:	f67f af50 	bls.w	84ea8 <udd_ep_alloc+0x244>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   85008:	2301      	movs	r3, #1
}
   8500a:	4618      	mov	r0, r3
   8500c:	371c      	adds	r7, #28
   8500e:	46bd      	mov	sp, r7
   85010:	bd90      	pop	{r4, r7, pc}
   85012:	bf00      	nop
   85014:	400a4000 	.word	0x400a4000
   85018:	00085349 	.word	0x00085349

0008501c <udd_ep_free>:
=======
	return 0;
   84700:	2300      	movs	r3, #0
}
   84702:	4618      	mov	r0, r3
   84704:	370c      	adds	r7, #12
   84706:	46bd      	mov	sp, r7
   84708:	bc80      	pop	{r7}
   8470a:	4770      	bx	lr
   8470c:	400e0400 	.word	0x400e0400
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

00084710 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
<<<<<<< HEAD
   8501c:	b580      	push	{r7, lr}
   8501e:	b084      	sub	sp, #16
   85020:	af00      	add	r7, sp, #0
   85022:	4603      	mov	r3, r0
   85024:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85026:	79fb      	ldrb	r3, [r7, #7]
   85028:	f003 030f 	and.w	r3, r3, #15
   8502c:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   8502e:	7bfb      	ldrb	r3, [r7, #15]
   85030:	2b02      	cmp	r3, #2
   85032:	d828      	bhi.n	85086 <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   85034:	4a16      	ldr	r2, [pc, #88]	; (85090 <udd_ep_free+0x74>)
   85036:	7bfb      	ldrb	r3, [r7, #15]
   85038:	015b      	lsls	r3, r3, #5
   8503a:	4413      	add	r3, r2
   8503c:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85040:	2201      	movs	r2, #1
   85042:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   85044:	4a12      	ldr	r2, [pc, #72]	; (85090 <udd_ep_free+0x74>)
   85046:	7bfb      	ldrb	r3, [r7, #15]
   85048:	3308      	adds	r3, #8
   8504a:	015b      	lsls	r3, r3, #5
   8504c:	4413      	add	r3, r2
   8504e:	681a      	ldr	r2, [r3, #0]
   85050:	490f      	ldr	r1, [pc, #60]	; (85090 <udd_ep_free+0x74>)
   85052:	7bfb      	ldrb	r3, [r7, #15]
   85054:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   85058:	3308      	adds	r3, #8
   8505a:	015b      	lsls	r3, r3, #5
   8505c:	440b      	add	r3, r1
   8505e:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   85060:	79fb      	ldrb	r3, [r7, #7]
   85062:	4618      	mov	r0, r3
   85064:	4b0b      	ldr	r3, [pc, #44]	; (85094 <udd_ep_free+0x78>)
   85066:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   85068:	7bfb      	ldrb	r3, [r7, #15]
   8506a:	1e5a      	subs	r2, r3, #1
   8506c:	490a      	ldr	r1, [pc, #40]	; (85098 <udd_ep_free+0x7c>)
   8506e:	4613      	mov	r3, r2
   85070:	005b      	lsls	r3, r3, #1
   85072:	4413      	add	r3, r2
   85074:	00db      	lsls	r3, r3, #3
   85076:	440b      	add	r3, r1
   85078:	f103 0210 	add.w	r2, r3, #16
   8507c:	7913      	ldrb	r3, [r2, #4]
   8507e:	f36f 0382 	bfc	r3, #2, #1
   85082:	7113      	strb	r3, [r2, #4]
   85084:	e000      	b.n	85088 <udd_ep_free+0x6c>
		return;
   85086:	bf00      	nop
}
   85088:	3710      	adds	r7, #16
   8508a:	46bd      	mov	sp, r7
   8508c:	bd80      	pop	{r7, pc}
   8508e:	bf00      	nop
   85090:	400a4000 	.word	0x400a4000
   85094:	00085e59 	.word	0x00085e59
   85098:	2000134c 	.word	0x2000134c

0008509c <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   8509c:	b480      	push	{r7}
   8509e:	b085      	sub	sp, #20
   850a0:	af00      	add	r7, sp, #0
   850a2:	4603      	mov	r3, r0
   850a4:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   850a6:	79fb      	ldrb	r3, [r7, #7]
   850a8:	f003 030f 	and.w	r3, r3, #15
   850ac:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   850ae:	7bfb      	ldrb	r3, [r7, #15]
   850b0:	1e5a      	subs	r2, r3, #1
   850b2:	4613      	mov	r3, r2
   850b4:	005b      	lsls	r3, r3, #1
   850b6:	4413      	add	r3, r2
   850b8:	00db      	lsls	r3, r3, #3
   850ba:	4a10      	ldr	r2, [pc, #64]	; (850fc <udd_ep_is_halted+0x60>)
   850bc:	4413      	add	r3, r2
   850be:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   850c0:	4a0f      	ldr	r2, [pc, #60]	; (85100 <udd_ep_is_halted+0x64>)
   850c2:	7bfb      	ldrb	r3, [r7, #15]
   850c4:	015b      	lsls	r3, r3, #5
   850c6:	4413      	add	r3, r2
   850c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   850cc:	681b      	ldr	r3, [r3, #0]
   850ce:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   850d2:	2b00      	cmp	r3, #0
   850d4:	d106      	bne.n	850e4 <udd_ep_is_halted+0x48>
   850d6:	68bb      	ldr	r3, [r7, #8]
   850d8:	7d1b      	ldrb	r3, [r3, #20]
   850da:	f003 0304 	and.w	r3, r3, #4
   850de:	b2db      	uxtb	r3, r3
   850e0:	2b00      	cmp	r3, #0
   850e2:	d001      	beq.n	850e8 <udd_ep_is_halted+0x4c>
   850e4:	2301      	movs	r3, #1
   850e6:	e000      	b.n	850ea <udd_ep_is_halted+0x4e>
   850e8:	2300      	movs	r3, #0
   850ea:	f003 0301 	and.w	r3, r3, #1
   850ee:	b2db      	uxtb	r3, r3
}
   850f0:	4618      	mov	r0, r3
   850f2:	3714      	adds	r7, #20
   850f4:	46bd      	mov	sp, r7
   850f6:	bc80      	pop	{r7}
   850f8:	4770      	bx	lr
   850fa:	bf00      	nop
   850fc:	2000134c 	.word	0x2000134c
   85100:	400a4000 	.word	0x400a4000

00085104 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   85104:	b480      	push	{r7}
   85106:	b085      	sub	sp, #20
   85108:	af00      	add	r7, sp, #0
   8510a:	4603      	mov	r3, r0
   8510c:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8510e:	79fb      	ldrb	r3, [r7, #7]
   85110:	f003 030f 	and.w	r3, r3, #15
   85114:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   85116:	7bfb      	ldrb	r3, [r7, #15]
   85118:	2b02      	cmp	r3, #2
   8511a:	d901      	bls.n	85120 <udd_ep_set_halt+0x1c>
		return false;
   8511c:	2300      	movs	r3, #0
   8511e:	e071      	b.n	85204 <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   85120:	7bfb      	ldrb	r3, [r7, #15]
   85122:	1e5a      	subs	r2, r3, #1
   85124:	4613      	mov	r3, r2
   85126:	005b      	lsls	r3, r3, #1
   85128:	4413      	add	r3, r2
   8512a:	00db      	lsls	r3, r3, #3
   8512c:	4a38      	ldr	r2, [pc, #224]	; (85210 <udd_ep_set_halt+0x10c>)
   8512e:	4413      	add	r3, r2
   85130:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   85132:	4a38      	ldr	r2, [pc, #224]	; (85214 <udd_ep_set_halt+0x110>)
   85134:	7bfb      	ldrb	r3, [r7, #15]
   85136:	015b      	lsls	r3, r3, #5
   85138:	4413      	add	r3, r2
   8513a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8513e:	681b      	ldr	r3, [r3, #0]
   85140:	f003 0320 	and.w	r3, r3, #32
   85144:	2b00      	cmp	r3, #0
   85146:	d106      	bne.n	85156 <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   85148:	68bb      	ldr	r3, [r7, #8]
   8514a:	7d1b      	ldrb	r3, [r3, #20]
   8514c:	f003 0304 	and.w	r3, r3, #4
   85150:	b2db      	uxtb	r3, r3
   85152:	2b00      	cmp	r3, #0
   85154:	d001      	beq.n	8515a <udd_ep_set_halt+0x56>
		return true; // Already STALL
   85156:	2301      	movs	r3, #1
   85158:	e054      	b.n	85204 <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   8515a:	68bb      	ldr	r3, [r7, #8]
   8515c:	7d1b      	ldrb	r3, [r3, #20]
   8515e:	f003 0301 	and.w	r3, r3, #1
   85162:	b2db      	uxtb	r3, r3
   85164:	2b00      	cmp	r3, #0
   85166:	d001      	beq.n	8516c <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   85168:	2300      	movs	r3, #0
   8516a:	e04b      	b.n	85204 <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8516c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85170:	2b00      	cmp	r3, #0
   85172:	da25      	bge.n	851c0 <udd_ep_set_halt+0xbc>
   85174:	4a27      	ldr	r2, [pc, #156]	; (85214 <udd_ep_set_halt+0x110>)
   85176:	7bfb      	ldrb	r3, [r7, #15]
   85178:	015b      	lsls	r3, r3, #5
   8517a:	4413      	add	r3, r2
   8517c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85180:	681b      	ldr	r3, [r3, #0]
   85182:	0c9b      	lsrs	r3, r3, #18
   85184:	f003 0303 	and.w	r3, r3, #3
   85188:	2b00      	cmp	r3, #0
   8518a:	d019      	beq.n	851c0 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   8518c:	68ba      	ldr	r2, [r7, #8]
   8518e:	7d13      	ldrb	r3, [r2, #20]
   85190:	f043 0304 	orr.w	r3, r3, #4
   85194:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   85196:	4a1f      	ldr	r2, [pc, #124]	; (85214 <udd_ep_set_halt+0x110>)
   85198:	7bfb      	ldrb	r3, [r7, #15]
   8519a:	3308      	adds	r3, #8
   8519c:	015b      	lsls	r3, r3, #5
   8519e:	4413      	add	r3, r2
   851a0:	3304      	adds	r3, #4
   851a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   851a6:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   851a8:	4b1a      	ldr	r3, [pc, #104]	; (85214 <udd_ep_set_halt+0x110>)
   851aa:	691a      	ldr	r2, [r3, #16]
   851ac:	7bfb      	ldrb	r3, [r7, #15]
   851ae:	f44f 7180 	mov.w	r1, #256	; 0x100
   851b2:	fa01 f303 	lsl.w	r3, r1, r3
   851b6:	4917      	ldr	r1, [pc, #92]	; (85214 <udd_ep_set_halt+0x110>)
   851b8:	4313      	orrs	r3, r2
   851ba:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   851bc:	2301      	movs	r3, #1
   851be:	e021      	b.n	85204 <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   851c0:	4a14      	ldr	r2, [pc, #80]	; (85214 <udd_ep_set_halt+0x110>)
   851c2:	7bfb      	ldrb	r3, [r7, #15]
   851c4:	015b      	lsls	r3, r3, #5
   851c6:	4413      	add	r3, r2
   851c8:	f503 7384 	add.w	r3, r3, #264	; 0x108
   851cc:	681a      	ldr	r2, [r3, #0]
   851ce:	4911      	ldr	r1, [pc, #68]	; (85214 <udd_ep_set_halt+0x110>)
   851d0:	7bfb      	ldrb	r3, [r7, #15]
   851d2:	f022 0202 	bic.w	r2, r2, #2
   851d6:	015b      	lsls	r3, r3, #5
   851d8:	440b      	add	r3, r1
   851da:	f503 7384 	add.w	r3, r3, #264	; 0x108
   851de:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   851e0:	4a0c      	ldr	r2, [pc, #48]	; (85214 <udd_ep_set_halt+0x110>)
   851e2:	7bfb      	ldrb	r3, [r7, #15]
   851e4:	015b      	lsls	r3, r3, #5
   851e6:	4413      	add	r3, r2
   851e8:	f503 738c 	add.w	r3, r3, #280	; 0x118
   851ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   851f0:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   851f2:	4a08      	ldr	r2, [pc, #32]	; (85214 <udd_ep_set_halt+0x110>)
   851f4:	7bfb      	ldrb	r3, [r7, #15]
   851f6:	015b      	lsls	r3, r3, #5
   851f8:	4413      	add	r3, r2
   851fa:	f503 738a 	add.w	r3, r3, #276	; 0x114
   851fe:	2220      	movs	r2, #32
   85200:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   85202:	2301      	movs	r3, #1
}
   85204:	4618      	mov	r0, r3
   85206:	3714      	adds	r7, #20
   85208:	46bd      	mov	sp, r7
   8520a:	bc80      	pop	{r7}
   8520c:	4770      	bx	lr
   8520e:	bf00      	nop
   85210:	2000134c 	.word	0x2000134c
   85214:	400a4000 	.word	0x400a4000

00085218 <udd_ep_clear_halt>:
=======
   84710:	b480      	push	{r7}
   84712:	b083      	sub	sp, #12
   84714:	af00      	add	r7, sp, #0
   84716:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   84718:	687b      	ldr	r3, [r7, #4]
   8471a:	2b1d      	cmp	r3, #29
   8471c:	d901      	bls.n	84722 <pmc_disable_periph_clk+0x12>
		return 1;
   8471e:	2301      	movs	r3, #1
   84720:	e015      	b.n	8474e <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   84722:	687b      	ldr	r3, [r7, #4]
   84724:	2b1f      	cmp	r3, #31
   84726:	d811      	bhi.n	8474c <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   84728:	4b0b      	ldr	r3, [pc, #44]	; (84758 <pmc_disable_periph_clk+0x48>)
   8472a:	699a      	ldr	r2, [r3, #24]
   8472c:	2101      	movs	r1, #1
   8472e:	687b      	ldr	r3, [r7, #4]
   84730:	fa01 f303 	lsl.w	r3, r1, r3
   84734:	401a      	ands	r2, r3
   84736:	2101      	movs	r1, #1
   84738:	687b      	ldr	r3, [r7, #4]
   8473a:	fa01 f303 	lsl.w	r3, r1, r3
   8473e:	429a      	cmp	r2, r3
   84740:	d104      	bne.n	8474c <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   84742:	2201      	movs	r2, #1
   84744:	687b      	ldr	r3, [r7, #4]
   84746:	409a      	lsls	r2, r3
   84748:	4b03      	ldr	r3, [pc, #12]	; (84758 <pmc_disable_periph_clk+0x48>)
   8474a:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   8474c:	2300      	movs	r3, #0
}
   8474e:	4618      	mov	r0, r3
   84750:	370c      	adds	r7, #12
   84752:	46bd      	mov	sp, r7
   84754:	bc80      	pop	{r7}
   84756:	4770      	bx	lr
   84758:	400e0400 	.word	0x400e0400

0008475c <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   8475c:	b480      	push	{r7}
   8475e:	b083      	sub	sp, #12
   84760:	af00      	add	r7, sp, #0
   84762:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   84764:	4a05      	ldr	r2, [pc, #20]	; (8477c <pmc_enable_pck+0x20>)
   84766:	f44f 7180 	mov.w	r1, #256	; 0x100
   8476a:	687b      	ldr	r3, [r7, #4]
   8476c:	fa01 f303 	lsl.w	r3, r1, r3
   84770:	6013      	str	r3, [r2, #0]
}
   84772:	bf00      	nop
   84774:	370c      	adds	r7, #12
   84776:	46bd      	mov	sp, r7
   84778:	bc80      	pop	{r7}
   8477a:	4770      	bx	lr
   8477c:	400e0400 	.word	0x400e0400

00084780 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   84780:	b480      	push	{r7}
   84782:	b083      	sub	sp, #12
   84784:	af00      	add	r7, sp, #0
   84786:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   84788:	687b      	ldr	r3, [r7, #4]
   8478a:	f3c3 0312 	ubfx	r3, r3, #0, #19
   8478e:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   84790:	4b05      	ldr	r3, [pc, #20]	; (847a8 <pmc_set_fast_startup_input+0x28>)
   84792:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   84794:	4904      	ldr	r1, [pc, #16]	; (847a8 <pmc_set_fast_startup_input+0x28>)
   84796:	687b      	ldr	r3, [r7, #4]
   84798:	4313      	orrs	r3, r2
   8479a:	670b      	str	r3, [r1, #112]	; 0x70
}
   8479c:	bf00      	nop
   8479e:	370c      	adds	r7, #12
   847a0:	46bd      	mov	sp, r7
   847a2:	bc80      	pop	{r7}
   847a4:	4770      	bx	lr
   847a6:	bf00      	nop
   847a8:	400e0400 	.word	0x400e0400

000847ac <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   847ac:	b480      	push	{r7}
   847ae:	b083      	sub	sp, #12
   847b0:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   847b2:	4b13      	ldr	r3, [pc, #76]	; (84800 <pmc_enable_waitmode+0x54>)
   847b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   847b6:	4a12      	ldr	r2, [pc, #72]	; (84800 <pmc_enable_waitmode+0x54>)
   847b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   847bc:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   847be:	4b11      	ldr	r3, [pc, #68]	; (84804 <pmc_enable_waitmode+0x58>)
   847c0:	691b      	ldr	r3, [r3, #16]
   847c2:	4a10      	ldr	r2, [pc, #64]	; (84804 <pmc_enable_waitmode+0x58>)
   847c4:	f023 0304 	bic.w	r3, r3, #4
   847c8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   847ca:	bf20      	wfe
}
   847cc:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   847ce:	2300      	movs	r3, #0
   847d0:	607b      	str	r3, [r7, #4]
   847d2:	e004      	b.n	847de <pmc_enable_waitmode+0x32>
  __ASM volatile ("nop");
   847d4:	bf00      	nop
}
   847d6:	bf00      	nop
   847d8:	687b      	ldr	r3, [r7, #4]
   847da:	3301      	adds	r3, #1
   847dc:	607b      	str	r3, [r7, #4]
   847de:	687b      	ldr	r3, [r7, #4]
   847e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   847e4:	d3f6      	bcc.n	847d4 <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   847e6:	bf00      	nop
   847e8:	4b05      	ldr	r3, [pc, #20]	; (84800 <pmc_enable_waitmode+0x54>)
   847ea:	6a1b      	ldr	r3, [r3, #32]
   847ec:	f003 0308 	and.w	r3, r3, #8
   847f0:	2b00      	cmp	r3, #0
   847f2:	d0f9      	beq.n	847e8 <pmc_enable_waitmode+0x3c>

}
   847f4:	bf00      	nop
   847f6:	bf00      	nop
   847f8:	370c      	adds	r7, #12
   847fa:	46bd      	mov	sp, r7
   847fc:	bc80      	pop	{r7}
   847fe:	4770      	bx	lr
   84800:	400e0400 	.word	0x400e0400
   84804:	e000ed00 	.word	0xe000ed00

00084808 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   84808:	b580      	push	{r7, lr}
   8480a:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   8480c:	4b0b      	ldr	r3, [pc, #44]	; (8483c <udi_vendor_enable+0x34>)
   8480e:	4798      	blx	r3
   84810:	4603      	mov	r3, r0
   84812:	78da      	ldrb	r2, [r3, #3]
   84814:	4b0a      	ldr	r3, [pc, #40]	; (84840 <udi_vendor_enable+0x38>)
   84816:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   84818:	4b09      	ldr	r3, [pc, #36]	; (84840 <udi_vendor_enable+0x38>)
   8481a:	781b      	ldrb	r3, [r3, #0]
   8481c:	2b00      	cmp	r3, #0
   8481e:	d109      	bne.n	84834 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   84820:	4b08      	ldr	r3, [pc, #32]	; (84844 <udi_vendor_enable+0x3c>)
   84822:	4798      	blx	r3
   84824:	4603      	mov	r3, r0
   84826:	f083 0301 	eor.w	r3, r3, #1
   8482a:	b2db      	uxtb	r3, r3
   8482c:	2b00      	cmp	r3, #0
   8482e:	d001      	beq.n	84834 <udi_vendor_enable+0x2c>
			return false;
   84830:	2300      	movs	r3, #0
   84832:	e000      	b.n	84836 <udi_vendor_enable+0x2e>
		}
	}
	return true;
   84834:	2301      	movs	r3, #1
}
   84836:	4618      	mov	r0, r3
   84838:	bd80      	pop	{r7, pc}
   8483a:	bf00      	nop
   8483c:	00084f01 	.word	0x00084f01
   84840:	20001359 	.word	0x20001359
   84844:	00080b79 	.word	0x00080b79

00084848 <udi_vendor_disable>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68


void udi_vendor_disable(void)
{
<<<<<<< HEAD
   85218:	b580      	push	{r7, lr}
   8521a:	b084      	sub	sp, #16
   8521c:	af00      	add	r7, sp, #0
   8521e:	4603      	mov	r3, r0
   85220:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   85222:	2300      	movs	r3, #0
   85224:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   85226:	79fb      	ldrb	r3, [r7, #7]
   85228:	f003 030f 	and.w	r3, r3, #15
   8522c:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   8522e:	79fb      	ldrb	r3, [r7, #7]
   85230:	2b02      	cmp	r3, #2
   85232:	d901      	bls.n	85238 <udd_ep_clear_halt+0x20>
		return false;
   85234:	2300      	movs	r3, #0
   85236:	e07e      	b.n	85336 <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   85238:	79fb      	ldrb	r3, [r7, #7]
   8523a:	1e5a      	subs	r2, r3, #1
   8523c:	4613      	mov	r3, r2
   8523e:	005b      	lsls	r3, r3, #1
   85240:	4413      	add	r3, r2
   85242:	00db      	lsls	r3, r3, #3
   85244:	4a3e      	ldr	r2, [pc, #248]	; (85340 <udd_ep_clear_halt+0x128>)
   85246:	4413      	add	r3, r2
   85248:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   8524a:	68bb      	ldr	r3, [r7, #8]
   8524c:	7d1b      	ldrb	r3, [r3, #20]
   8524e:	f003 0304 	and.w	r3, r3, #4
   85252:	b2db      	uxtb	r3, r3
   85254:	2b00      	cmp	r3, #0
   85256:	d01a      	beq.n	8528e <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   85258:	68ba      	ldr	r2, [r7, #8]
   8525a:	7d13      	ldrb	r3, [r2, #20]
   8525c:	f36f 0382 	bfc	r3, #2, #1
   85260:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   85262:	4a38      	ldr	r2, [pc, #224]	; (85344 <udd_ep_clear_halt+0x12c>)
   85264:	79fb      	ldrb	r3, [r7, #7]
   85266:	015b      	lsls	r3, r3, #5
   85268:	4413      	add	r3, r2
   8526a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8526e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   85272:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   85274:	4b33      	ldr	r3, [pc, #204]	; (85344 <udd_ep_clear_halt+0x12c>)
   85276:	691a      	ldr	r2, [r3, #16]
   85278:	79fb      	ldrb	r3, [r7, #7]
   8527a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8527e:	fa01 f303 	lsl.w	r3, r1, r3
   85282:	43db      	mvns	r3, r3
   85284:	492f      	ldr	r1, [pc, #188]	; (85344 <udd_ep_clear_halt+0x12c>)
   85286:	4013      	ands	r3, r2
   85288:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   8528a:	2301      	movs	r3, #1
   8528c:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   8528e:	4a2d      	ldr	r2, [pc, #180]	; (85344 <udd_ep_clear_halt+0x12c>)
   85290:	79fb      	ldrb	r3, [r7, #7]
   85292:	015b      	lsls	r3, r3, #5
   85294:	4413      	add	r3, r2
   85296:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8529a:	681b      	ldr	r3, [r3, #0]
   8529c:	f003 0320 	and.w	r3, r3, #32
   852a0:	2b00      	cmp	r3, #0
   852a2:	d035      	beq.n	85310 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   852a4:	4a27      	ldr	r2, [pc, #156]	; (85344 <udd_ep_clear_halt+0x12c>)
   852a6:	79fb      	ldrb	r3, [r7, #7]
   852a8:	015b      	lsls	r3, r3, #5
   852aa:	4413      	add	r3, r2
   852ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   852b0:	681b      	ldr	r3, [r3, #0]
   852b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   852b6:	2b00      	cmp	r3, #0
   852b8:	d010      	beq.n	852dc <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   852ba:	4a22      	ldr	r2, [pc, #136]	; (85344 <udd_ep_clear_halt+0x12c>)
   852bc:	79fb      	ldrb	r3, [r7, #7]
   852be:	015b      	lsls	r3, r3, #5
   852c0:	4413      	add	r3, r2
   852c2:	f503 738c 	add.w	r3, r3, #280	; 0x118
   852c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   852ca:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   852cc:	4a1d      	ldr	r2, [pc, #116]	; (85344 <udd_ep_clear_halt+0x12c>)
   852ce:	79fb      	ldrb	r3, [r7, #7]
   852d0:	015b      	lsls	r3, r3, #5
   852d2:	4413      	add	r3, r2
   852d4:	f503 738c 	add.w	r3, r3, #280	; 0x118
   852d8:	2240      	movs	r2, #64	; 0x40
   852da:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   852dc:	4a19      	ldr	r2, [pc, #100]	; (85344 <udd_ep_clear_halt+0x12c>)
   852de:	79fb      	ldrb	r3, [r7, #7]
   852e0:	015b      	lsls	r3, r3, #5
   852e2:	4413      	add	r3, r2
   852e4:	f503 738c 	add.w	r3, r3, #280	; 0x118
   852e8:	2220      	movs	r2, #32
   852ea:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   852ec:	4a15      	ldr	r2, [pc, #84]	; (85344 <udd_ep_clear_halt+0x12c>)
   852ee:	79fb      	ldrb	r3, [r7, #7]
   852f0:	3308      	adds	r3, #8
   852f2:	015b      	lsls	r3, r3, #5
   852f4:	4413      	add	r3, r2
   852f6:	3304      	adds	r3, #4
   852f8:	681a      	ldr	r2, [r3, #0]
   852fa:	4912      	ldr	r1, [pc, #72]	; (85344 <udd_ep_clear_halt+0x12c>)
   852fc:	79fb      	ldrb	r3, [r7, #7]
   852fe:	f042 0202 	orr.w	r2, r2, #2
   85302:	3308      	adds	r3, #8
   85304:	015b      	lsls	r3, r3, #5
   85306:	440b      	add	r3, r1
   85308:	3304      	adds	r3, #4
   8530a:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   8530c:	2301      	movs	r3, #1
   8530e:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   85310:	7bfb      	ldrb	r3, [r7, #15]
   85312:	2b00      	cmp	r3, #0
   85314:	d00e      	beq.n	85334 <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   85316:	68bb      	ldr	r3, [r7, #8]
   85318:	7d1b      	ldrb	r3, [r3, #20]
   8531a:	f003 0301 	and.w	r3, r3, #1
   8531e:	b2db      	uxtb	r3, r3
   85320:	2b00      	cmp	r3, #0
   85322:	d007      	beq.n	85334 <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   85324:	68ba      	ldr	r2, [r7, #8]
   85326:	7d13      	ldrb	r3, [r2, #20]
   85328:	f36f 0300 	bfc	r3, #0, #1
   8532c:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   8532e:	68bb      	ldr	r3, [r7, #8]
   85330:	681b      	ldr	r3, [r3, #0]
   85332:	4798      	blx	r3
		}
	}
	return true;
   85334:	2301      	movs	r3, #1
}
   85336:	4618      	mov	r0, r3
   85338:	3710      	adds	r7, #16
   8533a:	46bd      	mov	sp, r7
   8533c:	bd80      	pop	{r7, pc}
   8533e:	bf00      	nop
   85340:	2000134c 	.word	0x2000134c
   85344:	400a4000 	.word	0x400a4000

00085348 <udd_ep_run>:
=======
   84848:	b580      	push	{r7, lr}
   8484a:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   8484c:	4b03      	ldr	r3, [pc, #12]	; (8485c <udi_vendor_disable+0x14>)
   8484e:	781b      	ldrb	r3, [r3, #0]
   84850:	2b00      	cmp	r3, #0
   84852:	d101      	bne.n	84858 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   84854:	4b02      	ldr	r3, [pc, #8]	; (84860 <udi_vendor_disable+0x18>)
   84856:	4798      	blx	r3
	}
}
   84858:	bf00      	nop
   8485a:	bd80      	pop	{r7, pc}
   8485c:	20001359 	.word	0x20001359
   84860:	00080ba5 	.word	0x00080ba5

00084864 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   84864:	b580      	push	{r7, lr}
   84866:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   84868:	4b10      	ldr	r3, [pc, #64]	; (848ac <udi_vendor_setup+0x48>)
   8486a:	781b      	ldrb	r3, [r3, #0]
   8486c:	b25b      	sxtb	r3, r3
   8486e:	2b00      	cmp	r3, #0
   84870:	da09      	bge.n	84886 <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84872:	4b0e      	ldr	r3, [pc, #56]	; (848ac <udi_vendor_setup+0x48>)
   84874:	781b      	ldrb	r3, [r3, #0]
   84876:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8487a:	2b40      	cmp	r3, #64	; 0x40
   8487c:	d103      	bne.n	84886 <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   8487e:	4b0c      	ldr	r3, [pc, #48]	; (848b0 <udi_vendor_setup+0x4c>)
   84880:	4798      	blx	r3
   84882:	4603      	mov	r3, r0
   84884:	e00f      	b.n	848a6 <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   84886:	4b09      	ldr	r3, [pc, #36]	; (848ac <udi_vendor_setup+0x48>)
   84888:	781b      	ldrb	r3, [r3, #0]
   8488a:	b25b      	sxtb	r3, r3
   8488c:	2b00      	cmp	r3, #0
   8488e:	db09      	blt.n	848a4 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84890:	4b06      	ldr	r3, [pc, #24]	; (848ac <udi_vendor_setup+0x48>)
   84892:	781b      	ldrb	r3, [r3, #0]
   84894:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84898:	2b40      	cmp	r3, #64	; 0x40
   8489a:	d103      	bne.n	848a4 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   8489c:	4b05      	ldr	r3, [pc, #20]	; (848b4 <udi_vendor_setup+0x50>)
   8489e:	4798      	blx	r3
   848a0:	4603      	mov	r3, r0
   848a2:	e000      	b.n	848a6 <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   848a4:	2300      	movs	r3, #0
}
   848a6:	4618      	mov	r0, r3
   848a8:	bd80      	pop	{r7, pc}
   848aa:	bf00      	nop
   848ac:	20001810 	.word	0x20001810
   848b0:	00080ff1 	.word	0x00080ff1
   848b4:	00080e91 	.word	0x00080e91

000848b8 <udi_vendor_getsetting>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

uint8_t udi_vendor_getsetting(void)
{
   848b8:	b480      	push	{r7}
   848ba:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   848bc:	4b02      	ldr	r3, [pc, #8]	; (848c8 <udi_vendor_getsetting+0x10>)
   848be:	781b      	ldrb	r3, [r3, #0]
}
   848c0:	4618      	mov	r0, r3
   848c2:	46bd      	mov	sp, r7
   848c4:	bc80      	pop	{r7}
   848c6:	4770      	bx	lr
   848c8:	20001359 	.word	0x20001359

000848cc <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
<<<<<<< HEAD
   85348:	b580      	push	{r7, lr}
   8534a:	b086      	sub	sp, #24
   8534c:	af00      	add	r7, sp, #0
   8534e:	60ba      	str	r2, [r7, #8]
   85350:	607b      	str	r3, [r7, #4]
   85352:	4603      	mov	r3, r0
   85354:	73fb      	strb	r3, [r7, #15]
   85356:	460b      	mov	r3, r1
   85358:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   8535a:	7bfb      	ldrb	r3, [r7, #15]
   8535c:	f003 030f 	and.w	r3, r3, #15
   85360:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   85362:	7bfb      	ldrb	r3, [r7, #15]
   85364:	2b02      	cmp	r3, #2
   85366:	d901      	bls.n	8536c <udd_ep_run+0x24>
		return false;
   85368:	2300      	movs	r3, #0
   8536a:	e063      	b.n	85434 <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8536c:	7bfb      	ldrb	r3, [r7, #15]
   8536e:	1e5a      	subs	r2, r3, #1
   85370:	4613      	mov	r3, r2
   85372:	005b      	lsls	r3, r3, #1
   85374:	4413      	add	r3, r2
   85376:	00db      	lsls	r3, r3, #3
   85378:	4a30      	ldr	r2, [pc, #192]	; (8543c <udd_ep_run+0xf4>)
   8537a:	4413      	add	r3, r2
   8537c:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   8537e:	4a30      	ldr	r2, [pc, #192]	; (85440 <udd_ep_run+0xf8>)
   85380:	7bfb      	ldrb	r3, [r7, #15]
   85382:	015b      	lsls	r3, r3, #5
   85384:	4413      	add	r3, r2
   85386:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   8538a:	681b      	ldr	r3, [r3, #0]
   8538c:	f003 0301 	and.w	r3, r3, #1
   85390:	2b00      	cmp	r3, #0
   85392:	d011      	beq.n	853b8 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   85394:	4a2a      	ldr	r2, [pc, #168]	; (85440 <udd_ep_run+0xf8>)
   85396:	7bfb      	ldrb	r3, [r7, #15]
   85398:	015b      	lsls	r3, r3, #5
   8539a:	4413      	add	r3, r2
   8539c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   853a0:	681b      	ldr	r3, [r3, #0]
   853a2:	f003 0320 	and.w	r3, r3, #32
   853a6:	2b00      	cmp	r3, #0
   853a8:	d106      	bne.n	853b8 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   853aa:	697b      	ldr	r3, [r7, #20]
   853ac:	7d1b      	ldrb	r3, [r3, #20]
   853ae:	f003 0304 	and.w	r3, r3, #4
   853b2:	b2db      	uxtb	r3, r3
   853b4:	2b00      	cmp	r3, #0
   853b6:	d001      	beq.n	853bc <udd_ep_run+0x74>
		return false; // Endpoint is halted
   853b8:	2300      	movs	r3, #0
   853ba:	e03b      	b.n	85434 <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   853bc:	4b21      	ldr	r3, [pc, #132]	; (85444 <udd_ep_run+0xfc>)
   853be:	4798      	blx	r3
   853c0:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   853c2:	697b      	ldr	r3, [r7, #20]
   853c4:	7d1b      	ldrb	r3, [r3, #20]
   853c6:	f003 0301 	and.w	r3, r3, #1
   853ca:	b2db      	uxtb	r3, r3
   853cc:	2b00      	cmp	r3, #0
   853ce:	d004      	beq.n	853da <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   853d0:	6938      	ldr	r0, [r7, #16]
   853d2:	4b1d      	ldr	r3, [pc, #116]	; (85448 <udd_ep_run+0x100>)
   853d4:	4798      	blx	r3
		return false; // Job already on going
   853d6:	2300      	movs	r3, #0
   853d8:	e02c      	b.n	85434 <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   853da:	697a      	ldr	r2, [r7, #20]
   853dc:	7d13      	ldrb	r3, [r2, #20]
   853de:	f043 0301 	orr.w	r3, r3, #1
   853e2:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   853e4:	6938      	ldr	r0, [r7, #16]
   853e6:	4b18      	ldr	r3, [pc, #96]	; (85448 <udd_ep_run+0x100>)
   853e8:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   853ea:	697b      	ldr	r3, [r7, #20]
   853ec:	68ba      	ldr	r2, [r7, #8]
   853ee:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   853f0:	697b      	ldr	r3, [r7, #20]
   853f2:	687a      	ldr	r2, [r7, #4]
   853f4:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   853f6:	697b      	ldr	r3, [r7, #20]
   853f8:	2200      	movs	r2, #0
   853fa:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   853fc:	697b      	ldr	r3, [r7, #20]
   853fe:	2200      	movs	r2, #0
   85400:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   85402:	697b      	ldr	r3, [r7, #20]
   85404:	6a3a      	ldr	r2, [r7, #32]
   85406:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   85408:	7bbb      	ldrb	r3, [r7, #14]
   8540a:	2b00      	cmp	r3, #0
   8540c:	d102      	bne.n	85414 <udd_ep_run+0xcc>
   8540e:	687b      	ldr	r3, [r7, #4]
   85410:	2b00      	cmp	r3, #0
   85412:	d101      	bne.n	85418 <udd_ep_run+0xd0>
   85414:	2301      	movs	r3, #1
   85416:	e000      	b.n	8541a <udd_ep_run+0xd2>
   85418:	2300      	movs	r3, #0
   8541a:	f003 0301 	and.w	r3, r3, #1
   8541e:	b2d9      	uxtb	r1, r3
   85420:	697a      	ldr	r2, [r7, #20]
   85422:	7d13      	ldrb	r3, [r2, #20]
   85424:	f361 0341 	bfi	r3, r1, #1, #1
   85428:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   8542a:	7bfb      	ldrb	r3, [r7, #15]
   8542c:	4618      	mov	r0, r3
   8542e:	4b07      	ldr	r3, [pc, #28]	; (8544c <udd_ep_run+0x104>)
   85430:	4798      	blx	r3
	return true;
   85432:	2301      	movs	r3, #1
}
   85434:	4618      	mov	r0, r3
   85436:	3718      	adds	r7, #24
   85438:	46bd      	mov	sp, r7
   8543a:	bd80      	pop	{r7, pc}
   8543c:	2000134c 	.word	0x2000134c
   85440:	400a4000 	.word	0x400a4000
   85444:	00084705 	.word	0x00084705
   85448:	00084761 	.word	0x00084761
   8544c:	00085f05 	.word	0x00085f05

00085450 <udd_ep_abort>:

=======
   848cc:	b590      	push	{r4, r7, lr}
   848ce:	b087      	sub	sp, #28
   848d0:	af02      	add	r7, sp, #8
   848d2:	60f8      	str	r0, [r7, #12]
   848d4:	60b9      	str	r1, [r7, #8]
   848d6:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   848d8:	687b      	ldr	r3, [r7, #4]
   848da:	9300      	str	r3, [sp, #0]
   848dc:	68bb      	ldr	r3, [r7, #8]
   848de:	68fa      	ldr	r2, [r7, #12]
   848e0:	2100      	movs	r1, #0
   848e2:	2081      	movs	r0, #129	; 0x81
   848e4:	4c03      	ldr	r4, [pc, #12]	; (848f4 <udi_vendor_bulk_in_run+0x28>)
   848e6:	47a0      	blx	r4
   848e8:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   848ea:	4618      	mov	r0, r3
   848ec:	3714      	adds	r7, #20
   848ee:	46bd      	mov	sp, r7
   848f0:	bd90      	pop	{r4, r7, pc}
   848f2:	bf00      	nop
   848f4:	00082ef5 	.word	0x00082ef5

000848f8 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   848f8:	b590      	push	{r4, r7, lr}
   848fa:	b087      	sub	sp, #28
   848fc:	af02      	add	r7, sp, #8
   848fe:	60f8      	str	r0, [r7, #12]
   84900:	60b9      	str	r1, [r7, #8]
   84902:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   84904:	687b      	ldr	r3, [r7, #4]
   84906:	9300      	str	r3, [sp, #0]
   84908:	68bb      	ldr	r3, [r7, #8]
   8490a:	68fa      	ldr	r2, [r7, #12]
   8490c:	2100      	movs	r1, #0
   8490e:	2002      	movs	r0, #2
   84910:	4c03      	ldr	r4, [pc, #12]	; (84920 <udi_vendor_bulk_out_run+0x28>)
   84912:	47a0      	blx	r4
   84914:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   84916:	4618      	mov	r0, r3
   84918:	3714      	adds	r7, #20
   8491a:	46bd      	mov	sp, r7
   8491c:	bd90      	pop	{r4, r7, pc}
   8491e:	bf00      	nop
   84920:	00082ef5 	.word	0x00082ef5

00084924 <cpu_irq_save>:
{
   84924:	b480      	push	{r7}
   84926:	b083      	sub	sp, #12
   84928:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8492a:	f3ef 8310 	mrs	r3, PRIMASK
   8492e:	603b      	str	r3, [r7, #0]
  return(result);
   84930:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   84932:	2b00      	cmp	r3, #0
   84934:	bf0c      	ite	eq
   84936:	2301      	moveq	r3, #1
   84938:	2300      	movne	r3, #0
   8493a:	b2db      	uxtb	r3, r3
   8493c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   8493e:	b672      	cpsid	i
}
   84940:	bf00      	nop
  __ASM volatile ("dmb");
   84942:	f3bf 8f5f 	dmb	sy
}
   84946:	bf00      	nop
	cpu_irq_disable();
   84948:	4b04      	ldr	r3, [pc, #16]	; (8495c <cpu_irq_save+0x38>)
   8494a:	2200      	movs	r2, #0
   8494c:	701a      	strb	r2, [r3, #0]
	return flags;
   8494e:	687b      	ldr	r3, [r7, #4]
}
   84950:	4618      	mov	r0, r3
   84952:	370c      	adds	r7, #12
   84954:	46bd      	mov	sp, r7
   84956:	bc80      	pop	{r7}
   84958:	4770      	bx	lr
   8495a:	bf00      	nop
   8495c:	200003aa 	.word	0x200003aa

00084960 <cpu_irq_is_enabled_flags>:
{
   84960:	b480      	push	{r7}
   84962:	b083      	sub	sp, #12
   84964:	af00      	add	r7, sp, #0
   84966:	6078      	str	r0, [r7, #4]
	return (flags);
   84968:	687b      	ldr	r3, [r7, #4]
   8496a:	2b00      	cmp	r3, #0
   8496c:	bf14      	ite	ne
   8496e:	2301      	movne	r3, #1
   84970:	2300      	moveq	r3, #0
   84972:	b2db      	uxtb	r3, r3
}
   84974:	4618      	mov	r0, r3
   84976:	370c      	adds	r7, #12
   84978:	46bd      	mov	sp, r7
   8497a:	bc80      	pop	{r7}
   8497c:	4770      	bx	lr
   8497e:	0000      	movs	r0, r0

00084980 <cpu_irq_restore>:
{
   84980:	b580      	push	{r7, lr}
   84982:	b082      	sub	sp, #8
   84984:	af00      	add	r7, sp, #0
   84986:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   84988:	6878      	ldr	r0, [r7, #4]
   8498a:	4b08      	ldr	r3, [pc, #32]	; (849ac <cpu_irq_restore+0x2c>)
   8498c:	4798      	blx	r3
   8498e:	4603      	mov	r3, r0
   84990:	2b00      	cmp	r3, #0
   84992:	d007      	beq.n	849a4 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   84994:	4b06      	ldr	r3, [pc, #24]	; (849b0 <cpu_irq_restore+0x30>)
   84996:	2201      	movs	r2, #1
   84998:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8499a:	f3bf 8f5f 	dmb	sy
}
   8499e:	bf00      	nop
  __ASM volatile ("cpsie i");
   849a0:	b662      	cpsie	i
}
   849a2:	bf00      	nop
}
   849a4:	bf00      	nop
   849a6:	3708      	adds	r7, #8
   849a8:	46bd      	mov	sp, r7
   849aa:	bd80      	pop	{r7, pc}
   849ac:	00084961 	.word	0x00084961
   849b0:	200003aa 	.word	0x200003aa

000849b4 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   849b4:	b580      	push	{r7, lr}
   849b6:	b086      	sub	sp, #24
   849b8:	af00      	add	r7, sp, #0
   849ba:	60f8      	str	r0, [r7, #12]
   849bc:	60b9      	str	r1, [r7, #8]
   849be:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   849c0:	68bb      	ldr	r3, [r7, #8]
   849c2:	2b0e      	cmp	r3, #14
   849c4:	d002      	beq.n	849cc <efc_perform_command+0x18>
   849c6:	68bb      	ldr	r3, [r7, #8]
   849c8:	2b0f      	cmp	r3, #15
   849ca:	d102      	bne.n	849d2 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   849cc:	f04f 33ff 	mov.w	r3, #4294967295
   849d0:	e016      	b.n	84a00 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   849d2:	4b0d      	ldr	r3, [pc, #52]	; (84a08 <efc_perform_command+0x54>)
   849d4:	4798      	blx	r3
   849d6:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   849d8:	687b      	ldr	r3, [r7, #4]
   849da:	021b      	lsls	r3, r3, #8
   849dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   849e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   849e4:	68ba      	ldr	r2, [r7, #8]
   849e6:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   849e8:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   849ea:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   849ee:	4619      	mov	r1, r3
   849f0:	68f8      	ldr	r0, [r7, #12]
   849f2:	4b06      	ldr	r3, [pc, #24]	; (84a0c <efc_perform_command+0x58>)
   849f4:	4798      	blx	r3
   849f6:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   849f8:	6978      	ldr	r0, [r7, #20]
   849fa:	4b05      	ldr	r3, [pc, #20]	; (84a10 <efc_perform_command+0x5c>)
   849fc:	4798      	blx	r3
	return result;
   849fe:	693b      	ldr	r3, [r7, #16]
}
   84a00:	4618      	mov	r0, r3
   84a02:	3718      	adds	r7, #24
   84a04:	46bd      	mov	sp, r7
   84a06:	bd80      	pop	{r7, pc}
   84a08:	00084925 	.word	0x00084925
   84a0c:	200000bd 	.word	0x200000bd
   84a10:	00084981 	.word	0x00084981
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

00084a14 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
<<<<<<< HEAD
   85450:	b580      	push	{r7, lr}
   85452:	b084      	sub	sp, #16
   85454:	af00      	add	r7, sp, #0
   85456:	4603      	mov	r3, r0
   85458:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8545a:	79fb      	ldrb	r3, [r7, #7]
   8545c:	f003 030f 	and.w	r3, r3, #15
   85460:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   85462:	7bfb      	ldrb	r3, [r7, #15]
   85464:	011a      	lsls	r2, r3, #4
   85466:	4b19      	ldr	r3, [pc, #100]	; (854cc <udd_ep_abort+0x7c>)
   85468:	4413      	add	r3, r2
   8546a:	2200      	movs	r2, #0
   8546c:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   8546e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85472:	2b00      	cmp	r3, #0
   85474:	da21      	bge.n	854ba <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   85476:	e014      	b.n	854a2 <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   85478:	4a15      	ldr	r2, [pc, #84]	; (854d0 <udd_ep_abort+0x80>)
   8547a:	7bfb      	ldrb	r3, [r7, #15]
   8547c:	015b      	lsls	r3, r3, #5
   8547e:	4413      	add	r3, r2
   85480:	f503 738a 	add.w	r3, r3, #276	; 0x114
   85484:	f44f 7200 	mov.w	r2, #512	; 0x200
   85488:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   8548a:	bf00      	nop
   8548c:	4a10      	ldr	r2, [pc, #64]	; (854d0 <udd_ep_abort+0x80>)
   8548e:	7bfb      	ldrb	r3, [r7, #15]
   85490:	015b      	lsls	r3, r3, #5
   85492:	4413      	add	r3, r2
   85494:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85498:	681b      	ldr	r3, [r3, #0]
   8549a:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8549e:	2b00      	cmp	r3, #0
   854a0:	d1f4      	bne.n	8548c <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   854a2:	4a0b      	ldr	r2, [pc, #44]	; (854d0 <udd_ep_abort+0x80>)
   854a4:	7bfb      	ldrb	r3, [r7, #15]
   854a6:	015b      	lsls	r3, r3, #5
   854a8:	4413      	add	r3, r2
   854aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   854ae:	681b      	ldr	r3, [r3, #0]
   854b0:	0c9b      	lsrs	r3, r3, #18
   854b2:	f003 0303 	and.w	r3, r3, #3
   854b6:	2b00      	cmp	r3, #0
   854b8:	d1de      	bne.n	85478 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   854ba:	79fb      	ldrb	r3, [r7, #7]
   854bc:	4618      	mov	r0, r3
   854be:	4b05      	ldr	r3, [pc, #20]	; (854d4 <udd_ep_abort+0x84>)
   854c0:	4798      	blx	r3
}
   854c2:	bf00      	nop
   854c4:	3710      	adds	r7, #16
   854c6:	46bd      	mov	sp, r7
   854c8:	bd80      	pop	{r7, pc}
   854ca:	bf00      	nop
   854cc:	400a4300 	.word	0x400a4300
   854d0:	400a4000 	.word	0x400a4000
   854d4:	00085e59 	.word	0x00085e59

000854d8 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   854d8:	b480      	push	{r7}
   854da:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   854dc:	4b0a      	ldr	r3, [pc, #40]	; (85508 <udd_test_mode_j+0x30>)
   854de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   854e2:	f023 0303 	bic.w	r3, r3, #3
   854e6:	4a08      	ldr	r2, [pc, #32]	; (85508 <udd_test_mode_j+0x30>)
   854e8:	f043 0302 	orr.w	r3, r3, #2
   854ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   854f0:	4b05      	ldr	r3, [pc, #20]	; (85508 <udd_test_mode_j+0x30>)
   854f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   854f6:	4a04      	ldr	r2, [pc, #16]	; (85508 <udd_test_mode_j+0x30>)
   854f8:	f043 0304 	orr.w	r3, r3, #4
   854fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85500:	bf00      	nop
   85502:	46bd      	mov	sp, r7
   85504:	bc80      	pop	{r7}
   85506:	4770      	bx	lr
   85508:	400a4000 	.word	0x400a4000

0008550c <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   8550c:	b480      	push	{r7}
   8550e:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   85510:	4b0a      	ldr	r3, [pc, #40]	; (8553c <udd_test_mode_k+0x30>)
   85512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   85516:	f023 0303 	bic.w	r3, r3, #3
   8551a:	4a08      	ldr	r2, [pc, #32]	; (8553c <udd_test_mode_k+0x30>)
   8551c:	f043 0302 	orr.w	r3, r3, #2
   85520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   85524:	4b05      	ldr	r3, [pc, #20]	; (8553c <udd_test_mode_k+0x30>)
   85526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8552a:	4a04      	ldr	r2, [pc, #16]	; (8553c <udd_test_mode_k+0x30>)
   8552c:	f043 0308 	orr.w	r3, r3, #8
   85530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85534:	bf00      	nop
   85536:	46bd      	mov	sp, r7
   85538:	bc80      	pop	{r7}
   8553a:	4770      	bx	lr
   8553c:	400a4000 	.word	0x400a4000

00085540 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   85540:	b480      	push	{r7}
   85542:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   85544:	4b06      	ldr	r3, [pc, #24]	; (85560 <udd_test_mode_se0_nak+0x20>)
   85546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8554a:	f023 0303 	bic.w	r3, r3, #3
   8554e:	4a04      	ldr	r2, [pc, #16]	; (85560 <udd_test_mode_se0_nak+0x20>)
   85550:	f043 0302 	orr.w	r3, r3, #2
   85554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85558:	bf00      	nop
   8555a:	46bd      	mov	sp, r7
   8555c:	bc80      	pop	{r7}
   8555e:	4770      	bx	lr
   85560:	400a4000 	.word	0x400a4000

00085564 <udd_test_mode_packet>:
=======
   84a14:	b480      	push	{r7}
   84a16:	b085      	sub	sp, #20
   84a18:	af00      	add	r7, sp, #0
   84a1a:	60f8      	str	r0, [r7, #12]
   84a1c:	60b9      	str	r1, [r7, #8]
   84a1e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   84a20:	687b      	ldr	r3, [r7, #4]
   84a22:	2b00      	cmp	r3, #0
   84a24:	d003      	beq.n	84a2e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   84a26:	68fb      	ldr	r3, [r7, #12]
   84a28:	68ba      	ldr	r2, [r7, #8]
   84a2a:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   84a2c:	e002      	b.n	84a34 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   84a2e:	68fb      	ldr	r3, [r7, #12]
   84a30:	68ba      	ldr	r2, [r7, #8]
   84a32:	661a      	str	r2, [r3, #96]	; 0x60
}
   84a34:	bf00      	nop
   84a36:	3714      	adds	r7, #20
   84a38:	46bd      	mov	sp, r7
   84a3a:	bc80      	pop	{r7}
   84a3c:	4770      	bx	lr

00084a3e <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   84a3e:	b480      	push	{r7}
   84a40:	b087      	sub	sp, #28
   84a42:	af00      	add	r7, sp, #0
   84a44:	60f8      	str	r0, [r7, #12]
   84a46:	60b9      	str	r1, [r7, #8]
   84a48:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   84a4a:	68fb      	ldr	r3, [r7, #12]
   84a4c:	687a      	ldr	r2, [r7, #4]
   84a4e:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   84a50:	68bb      	ldr	r3, [r7, #8]
   84a52:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84a56:	d03c      	beq.n	84ad2 <pio_set_peripheral+0x94>
   84a58:	68bb      	ldr	r3, [r7, #8]
   84a5a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84a5e:	d834      	bhi.n	84aca <pio_set_peripheral+0x8c>
   84a60:	68bb      	ldr	r3, [r7, #8]
   84a62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84a66:	d034      	beq.n	84ad2 <pio_set_peripheral+0x94>
   84a68:	68bb      	ldr	r3, [r7, #8]
   84a6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84a6e:	d82c      	bhi.n	84aca <pio_set_peripheral+0x8c>
   84a70:	68bb      	ldr	r3, [r7, #8]
   84a72:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84a76:	d02c      	beq.n	84ad2 <pio_set_peripheral+0x94>
   84a78:	68bb      	ldr	r3, [r7, #8]
   84a7a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84a7e:	d824      	bhi.n	84aca <pio_set_peripheral+0x8c>
   84a80:	68bb      	ldr	r3, [r7, #8]
   84a82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84a86:	d017      	beq.n	84ab8 <pio_set_peripheral+0x7a>
   84a88:	68bb      	ldr	r3, [r7, #8]
   84a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84a8e:	d81c      	bhi.n	84aca <pio_set_peripheral+0x8c>
   84a90:	68bb      	ldr	r3, [r7, #8]
   84a92:	2b00      	cmp	r3, #0
   84a94:	d01d      	beq.n	84ad2 <pio_set_peripheral+0x94>
   84a96:	68bb      	ldr	r3, [r7, #8]
   84a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84a9c:	d115      	bne.n	84aca <pio_set_peripheral+0x8c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   84a9e:	68fb      	ldr	r3, [r7, #12]
   84aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   84aa2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   84aa4:	68fb      	ldr	r3, [r7, #12]
   84aa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   84aa8:	687b      	ldr	r3, [r7, #4]
   84aaa:	43d9      	mvns	r1, r3
   84aac:	697b      	ldr	r3, [r7, #20]
   84aae:	400b      	ands	r3, r1
   84ab0:	401a      	ands	r2, r3
   84ab2:	68fb      	ldr	r3, [r7, #12]
   84ab4:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   84ab6:	e008      	b.n	84aca <pio_set_peripheral+0x8c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   84ab8:	68fb      	ldr	r3, [r7, #12]
   84aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   84abc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   84abe:	687a      	ldr	r2, [r7, #4]
   84ac0:	697b      	ldr	r3, [r7, #20]
   84ac2:	431a      	orrs	r2, r3
   84ac4:	68fb      	ldr	r3, [r7, #12]
   84ac6:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   84ac8:	bf00      	nop
#else
#error "Unsupported device"
#endif
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   84aca:	68fb      	ldr	r3, [r7, #12]
   84acc:	687a      	ldr	r2, [r7, #4]
   84ace:	605a      	str	r2, [r3, #4]
   84ad0:	e000      	b.n	84ad4 <pio_set_peripheral+0x96>
		return;
   84ad2:	bf00      	nop
}
   84ad4:	371c      	adds	r7, #28
   84ad6:	46bd      	mov	sp, r7
   84ad8:	bc80      	pop	{r7}
   84ada:	4770      	bx	lr

00084adc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
<<<<<<< HEAD
   85564:	b4b0      	push	{r4, r5, r7}
   85566:	b093      	sub	sp, #76	; 0x4c
   85568:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   8556a:	4b2e      	ldr	r3, [pc, #184]	; (85624 <udd_test_mode_packet+0xc0>)
   8556c:	1d3c      	adds	r4, r7, #4
   8556e:	461d      	mov	r5, r3
   85570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8557a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8557c:	e895 0003 	ldmia.w	r5, {r0, r1}
   85580:	6020      	str	r0, [r4, #0]
   85582:	3404      	adds	r4, #4
   85584:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   85586:	4b28      	ldr	r3, [pc, #160]	; (85628 <udd_test_mode_packet+0xc4>)
   85588:	2201      	movs	r2, #1
   8558a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   8558e:	4b26      	ldr	r3, [pc, #152]	; (85628 <udd_test_mode_packet+0xc4>)
   85590:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   85594:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   85598:	f023 0303 	bic.w	r3, r3, #3
   8559c:	4a22      	ldr	r2, [pc, #136]	; (85628 <udd_test_mode_packet+0xc4>)
   8559e:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   855a2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   855a6:	4b20      	ldr	r3, [pc, #128]	; (85628 <udd_test_mode_packet+0xc4>)
   855a8:	2201      	movs	r2, #1
   855aa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   855ae:	4b1e      	ldr	r3, [pc, #120]	; (85628 <udd_test_mode_packet+0xc4>)
   855b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   855b4:	f023 0303 	bic.w	r3, r3, #3
   855b8:	4a1b      	ldr	r2, [pc, #108]	; (85628 <udd_test_mode_packet+0xc4>)
   855ba:	f043 0302 	orr.w	r3, r3, #2
   855be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   855c2:	4b19      	ldr	r3, [pc, #100]	; (85628 <udd_test_mode_packet+0xc4>)
   855c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   855c8:	4a17      	ldr	r2, [pc, #92]	; (85628 <udd_test_mode_packet+0xc4>)
   855ca:	f043 0310 	orr.w	r3, r3, #16
   855ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   855d2:	4b16      	ldr	r3, [pc, #88]	; (8562c <udd_test_mode_packet+0xc8>)
   855d4:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   855d6:	1d3b      	adds	r3, r7, #4
   855d8:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   855da:	2300      	movs	r3, #0
   855dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   855e0:	e00c      	b.n	855fc <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   855e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   855e4:	1c53      	adds	r3, r2, #1
   855e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   855e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   855ea:	1c59      	adds	r1, r3, #1
   855ec:	6439      	str	r1, [r7, #64]	; 0x40
   855ee:	7812      	ldrb	r2, [r2, #0]
   855f0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   855f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   855f6:	3301      	adds	r3, #1
   855f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   855fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   85600:	2b34      	cmp	r3, #52	; 0x34
   85602:	d9ee      	bls.n	855e2 <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   85604:	4b08      	ldr	r3, [pc, #32]	; (85628 <udd_test_mode_packet+0xc4>)
   85606:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8560a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8560e:	4b06      	ldr	r3, [pc, #24]	; (85628 <udd_test_mode_packet+0xc4>)
   85610:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85614:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   85618:	bf00      	nop
   8561a:	374c      	adds	r7, #76	; 0x4c
   8561c:	46bd      	mov	sp, r7
   8561e:	bcb0      	pop	{r4, r5, r7}
   85620:	4770      	bx	lr
   85622:	bf00      	nop
   85624:	0008d4a8 	.word	0x0008d4a8
   85628:	400a4000 	.word	0x400a4000
   8562c:	20180000 	.word	0x20180000

00085630 <udd_reset_ep_ctrl>:
=======
   84adc:	b580      	push	{r7, lr}
   84ade:	b084      	sub	sp, #16
   84ae0:	af00      	add	r7, sp, #0
   84ae2:	60f8      	str	r0, [r7, #12]
   84ae4:	60b9      	str	r1, [r7, #8]
   84ae6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   84ae8:	68b9      	ldr	r1, [r7, #8]
   84aea:	68f8      	ldr	r0, [r7, #12]
   84aec:	4b19      	ldr	r3, [pc, #100]	; (84b54 <pio_set_input+0x78>)
   84aee:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   84af0:	687b      	ldr	r3, [r7, #4]
   84af2:	f003 0301 	and.w	r3, r3, #1
   84af6:	461a      	mov	r2, r3
   84af8:	68b9      	ldr	r1, [r7, #8]
   84afa:	68f8      	ldr	r0, [r7, #12]
   84afc:	4b16      	ldr	r3, [pc, #88]	; (84b58 <pio_set_input+0x7c>)
   84afe:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   84b00:	687b      	ldr	r3, [r7, #4]
   84b02:	f003 030a 	and.w	r3, r3, #10
   84b06:	2b00      	cmp	r3, #0
   84b08:	d003      	beq.n	84b12 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   84b0a:	68fb      	ldr	r3, [r7, #12]
   84b0c:	68ba      	ldr	r2, [r7, #8]
   84b0e:	621a      	str	r2, [r3, #32]
   84b10:	e002      	b.n	84b18 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   84b12:	68fb      	ldr	r3, [r7, #12]
   84b14:	68ba      	ldr	r2, [r7, #8]
   84b16:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   84b18:	687b      	ldr	r3, [r7, #4]
   84b1a:	f003 0302 	and.w	r3, r3, #2
   84b1e:	2b00      	cmp	r3, #0
   84b20:	d004      	beq.n	84b2c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   84b22:	68fb      	ldr	r3, [r7, #12]
   84b24:	68ba      	ldr	r2, [r7, #8]
   84b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   84b2a:	e008      	b.n	84b3e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   84b2c:	687b      	ldr	r3, [r7, #4]
   84b2e:	f003 0308 	and.w	r3, r3, #8
   84b32:	2b00      	cmp	r3, #0
   84b34:	d003      	beq.n	84b3e <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   84b36:	68fb      	ldr	r3, [r7, #12]
   84b38:	68ba      	ldr	r2, [r7, #8]
   84b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   84b3e:	68fb      	ldr	r3, [r7, #12]
   84b40:	68ba      	ldr	r2, [r7, #8]
   84b42:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   84b44:	68fb      	ldr	r3, [r7, #12]
   84b46:	68ba      	ldr	r2, [r7, #8]
   84b48:	601a      	str	r2, [r3, #0]
}
   84b4a:	bf00      	nop
   84b4c:	3710      	adds	r7, #16
   84b4e:	46bd      	mov	sp, r7
   84b50:	bd80      	pop	{r7, pc}
   84b52:	bf00      	nop
   84b54:	00084bdd 	.word	0x00084bdd
   84b58:	00084a15 	.word	0x00084a15

00084b5c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   84b5c:	b580      	push	{r7, lr}
   84b5e:	b084      	sub	sp, #16
   84b60:	af00      	add	r7, sp, #0
   84b62:	60f8      	str	r0, [r7, #12]
   84b64:	60b9      	str	r1, [r7, #8]
   84b66:	607a      	str	r2, [r7, #4]
   84b68:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   84b6a:	68b9      	ldr	r1, [r7, #8]
   84b6c:	68f8      	ldr	r0, [r7, #12]
   84b6e:	4b12      	ldr	r3, [pc, #72]	; (84bb8 <pio_set_output+0x5c>)
   84b70:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   84b72:	69ba      	ldr	r2, [r7, #24]
   84b74:	68b9      	ldr	r1, [r7, #8]
   84b76:	68f8      	ldr	r0, [r7, #12]
   84b78:	4b10      	ldr	r3, [pc, #64]	; (84bbc <pio_set_output+0x60>)
   84b7a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   84b7c:	683b      	ldr	r3, [r7, #0]
   84b7e:	2b00      	cmp	r3, #0
   84b80:	d003      	beq.n	84b8a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   84b82:	68fb      	ldr	r3, [r7, #12]
   84b84:	68ba      	ldr	r2, [r7, #8]
   84b86:	651a      	str	r2, [r3, #80]	; 0x50
   84b88:	e002      	b.n	84b90 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   84b8a:	68fb      	ldr	r3, [r7, #12]
   84b8c:	68ba      	ldr	r2, [r7, #8]
   84b8e:	655a      	str	r2, [r3, #84]	; 0x54
	}
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	/* Set default value */
	if (ul_default_level) {
   84b90:	687b      	ldr	r3, [r7, #4]
   84b92:	2b00      	cmp	r3, #0
   84b94:	d003      	beq.n	84b9e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   84b96:	68fb      	ldr	r3, [r7, #12]
   84b98:	68ba      	ldr	r2, [r7, #8]
   84b9a:	631a      	str	r2, [r3, #48]	; 0x30
   84b9c:	e002      	b.n	84ba4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   84b9e:	68fb      	ldr	r3, [r7, #12]
   84ba0:	68ba      	ldr	r2, [r7, #8]
   84ba2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   84ba4:	68fb      	ldr	r3, [r7, #12]
   84ba6:	68ba      	ldr	r2, [r7, #8]
   84ba8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   84baa:	68fb      	ldr	r3, [r7, #12]
   84bac:	68ba      	ldr	r2, [r7, #8]
   84bae:	601a      	str	r2, [r3, #0]
}
   84bb0:	bf00      	nop
   84bb2:	3710      	adds	r7, #16
   84bb4:	46bd      	mov	sp, r7
   84bb6:	bd80      	pop	{r7, pc}
   84bb8:	00084bdd 	.word	0x00084bdd
   84bbc:	00084a15 	.word	0x00084a15

00084bc0 <pio_enable_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
<<<<<<< HEAD
   85630:	b580      	push	{r7, lr}
   85632:	b082      	sub	sp, #8
   85634:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   85636:	4b1b      	ldr	r3, [pc, #108]	; (856a4 <udd_reset_ep_ctrl+0x74>)
   85638:	681b      	ldr	r3, [r3, #0]
   8563a:	4a1a      	ldr	r2, [pc, #104]	; (856a4 <udd_reset_ep_ctrl+0x74>)
   8563c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   85640:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   85642:	4b18      	ldr	r3, [pc, #96]	; (856a4 <udd_reset_ep_ctrl+0x74>)
   85644:	681b      	ldr	r3, [r3, #0]
   85646:	4a17      	ldr	r2, [pc, #92]	; (856a4 <udd_reset_ep_ctrl+0x74>)
   85648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8564c:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   8564e:	4b15      	ldr	r3, [pc, #84]	; (856a4 <udd_reset_ep_ctrl+0x74>)
   85650:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   85654:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   85658:	f023 0303 	bic.w	r3, r3, #3
   8565c:	4a11      	ldr	r2, [pc, #68]	; (856a4 <udd_reset_ep_ctrl+0x74>)
   8565e:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   85662:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   85666:	4b0f      	ldr	r3, [pc, #60]	; (856a4 <udd_reset_ep_ctrl+0x74>)
   85668:	2201      	movs	r2, #1
   8566a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   8566e:	4b0e      	ldr	r3, [pc, #56]	; (856a8 <udd_reset_ep_ctrl+0x78>)
   85670:	4798      	blx	r3
   85672:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   85674:	4b0b      	ldr	r3, [pc, #44]	; (856a4 <udd_reset_ep_ctrl+0x74>)
   85676:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8567a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   8567e:	4b09      	ldr	r3, [pc, #36]	; (856a4 <udd_reset_ep_ctrl+0x74>)
   85680:	f44f 7200 	mov.w	r2, #512	; 0x200
   85684:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   85688:	4b06      	ldr	r3, [pc, #24]	; (856a4 <udd_reset_ep_ctrl+0x74>)
   8568a:	691b      	ldr	r3, [r3, #16]
   8568c:	4a05      	ldr	r2, [pc, #20]	; (856a4 <udd_reset_ep_ctrl+0x74>)
   8568e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   85692:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   85694:	6878      	ldr	r0, [r7, #4]
   85696:	4b05      	ldr	r3, [pc, #20]	; (856ac <udd_reset_ep_ctrl+0x7c>)
   85698:	4798      	blx	r3
}
   8569a:	bf00      	nop
   8569c:	3708      	adds	r7, #8
   8569e:	46bd      	mov	sp, r7
   856a0:	bd80      	pop	{r7, pc}
   856a2:	bf00      	nop
   856a4:	400a4000 	.word	0x400a4000
   856a8:	00084705 	.word	0x00084705
   856ac:	00084761 	.word	0x00084761

000856b0 <udd_ctrl_init>:
=======
   84bc0:	b480      	push	{r7}
   84bc2:	b083      	sub	sp, #12
   84bc4:	af00      	add	r7, sp, #0
   84bc6:	6078      	str	r0, [r7, #4]
   84bc8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   84bca:	687b      	ldr	r3, [r7, #4]
   84bcc:	683a      	ldr	r2, [r7, #0]
   84bce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   84bd2:	bf00      	nop
   84bd4:	370c      	adds	r7, #12
   84bd6:	46bd      	mov	sp, r7
   84bd8:	bc80      	pop	{r7}
   84bda:	4770      	bx	lr

00084bdc <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   84bdc:	b480      	push	{r7}
   84bde:	b083      	sub	sp, #12
   84be0:	af00      	add	r7, sp, #0
   84be2:	6078      	str	r0, [r7, #4]
   84be4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   84be6:	687b      	ldr	r3, [r7, #4]
   84be8:	683a      	ldr	r2, [r7, #0]
   84bea:	645a      	str	r2, [r3, #68]	; 0x44
}
   84bec:	bf00      	nop
   84bee:	370c      	adds	r7, #12
   84bf0:	46bd      	mov	sp, r7
   84bf2:	bc80      	pop	{r7}
   84bf4:	4770      	bx	lr

00084bf6 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   84bf6:	b480      	push	{r7}
   84bf8:	b083      	sub	sp, #12
   84bfa:	af00      	add	r7, sp, #0
   84bfc:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   84bfe:	687b      	ldr	r3, [r7, #4]
   84c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   84c02:	4618      	mov	r0, r3
   84c04:	370c      	adds	r7, #12
   84c06:	46bd      	mov	sp, r7
   84c08:	bc80      	pop	{r7}
   84c0a:	4770      	bx	lr

00084c0c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   84c0c:	b480      	push	{r7}
   84c0e:	b083      	sub	sp, #12
   84c10:	af00      	add	r7, sp, #0
   84c12:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   84c14:	687b      	ldr	r3, [r7, #4]
   84c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   84c18:	4618      	mov	r0, r3
   84c1a:	370c      	adds	r7, #12
   84c1c:	46bd      	mov	sp, r7
   84c1e:	bc80      	pop	{r7}
   84c20:	4770      	bx	lr
   84c22:	0000      	movs	r0, r0

00084c24 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   84c24:	b580      	push	{r7, lr}
   84c26:	b084      	sub	sp, #16
   84c28:	af00      	add	r7, sp, #0
   84c2a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84c2c:	6878      	ldr	r0, [r7, #4]
   84c2e:	4b08      	ldr	r3, [pc, #32]	; (84c50 <pio_get_pin_value+0x2c>)
   84c30:	4798      	blx	r3
   84c32:	60f8      	str	r0, [r7, #12]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   84c34:	68fb      	ldr	r3, [r7, #12]
   84c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   84c38:	687b      	ldr	r3, [r7, #4]
   84c3a:	f003 031f 	and.w	r3, r3, #31
   84c3e:	fa22 f303 	lsr.w	r3, r2, r3
   84c42:	f003 0301 	and.w	r3, r3, #1
}
   84c46:	4618      	mov	r0, r3
   84c48:	3710      	adds	r7, #16
   84c4a:	46bd      	mov	sp, r7
   84c4c:	bd80      	pop	{r7, pc}
   84c4e:	bf00      	nop
   84c50:	00084ec1 	.word	0x00084ec1

00084c54 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
<<<<<<< HEAD
   856b0:	b580      	push	{r7, lr}
   856b2:	b082      	sub	sp, #8
   856b4:	af00      	add	r7, sp, #0
	irqflags_t flags;
=======
   84c54:	b580      	push	{r7, lr}
   84c56:	b084      	sub	sp, #16
   84c58:	af00      	add	r7, sp, #0
   84c5a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84c5c:	6878      	ldr	r0, [r7, #4]
   84c5e:	4b08      	ldr	r3, [pc, #32]	; (84c80 <pio_set_pin_high+0x2c>)
   84c60:	4798      	blx	r3
   84c62:	60f8      	str	r0, [r7, #12]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   84c64:	687b      	ldr	r3, [r7, #4]
   84c66:	f003 031f 	and.w	r3, r3, #31
   84c6a:	2201      	movs	r2, #1
   84c6c:	fa02 f303 	lsl.w	r3, r2, r3
   84c70:	461a      	mov	r2, r3
   84c72:	68fb      	ldr	r3, [r7, #12]
   84c74:	631a      	str	r2, [r3, #48]	; 0x30
}
   84c76:	bf00      	nop
   84c78:	3710      	adds	r7, #16
   84c7a:	46bd      	mov	sp, r7
   84c7c:	bd80      	pop	{r7, pc}
   84c7e:	bf00      	nop
   84c80:	00084ec1 	.word	0x00084ec1

00084c84 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   84c84:	b580      	push	{r7, lr}
   84c86:	b084      	sub	sp, #16
   84c88:	af00      	add	r7, sp, #0
   84c8a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84c8c:	6878      	ldr	r0, [r7, #4]
   84c8e:	4b08      	ldr	r3, [pc, #32]	; (84cb0 <pio_set_pin_low+0x2c>)
   84c90:	4798      	blx	r3
   84c92:	60f8      	str	r0, [r7, #12]

<<<<<<< HEAD
	flags = cpu_irq_save();
   856b6:	4b10      	ldr	r3, [pc, #64]	; (856f8 <udd_ctrl_init+0x48>)
   856b8:	4798      	blx	r3
   856ba:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   856bc:	4b0f      	ldr	r3, [pc, #60]	; (856fc <udd_ctrl_init+0x4c>)
   856be:	f44f 6280 	mov.w	r2, #1024	; 0x400
   856c2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   856c6:	6878      	ldr	r0, [r7, #4]
   856c8:	4b0d      	ldr	r3, [pc, #52]	; (85700 <udd_ctrl_init+0x50>)
   856ca:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   856cc:	4b0b      	ldr	r3, [pc, #44]	; (856fc <udd_ctrl_init+0x4c>)
   856ce:	f44f 7200 	mov.w	r2, #512	; 0x200
   856d2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   856d6:	4b0b      	ldr	r3, [pc, #44]	; (85704 <udd_ctrl_init+0x54>)
   856d8:	2200      	movs	r2, #0
   856da:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   856dc:	4b09      	ldr	r3, [pc, #36]	; (85704 <udd_ctrl_init+0x54>)
   856de:	2200      	movs	r2, #0
   856e0:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   856e2:	4b08      	ldr	r3, [pc, #32]	; (85704 <udd_ctrl_init+0x54>)
   856e4:	2200      	movs	r2, #0
   856e6:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   856e8:	4b07      	ldr	r3, [pc, #28]	; (85708 <udd_ctrl_init+0x58>)
   856ea:	2200      	movs	r2, #0
   856ec:	701a      	strb	r2, [r3, #0]
}
   856ee:	bf00      	nop
   856f0:	3708      	adds	r7, #8
   856f2:	46bd      	mov	sp, r7
   856f4:	bd80      	pop	{r7, pc}
   856f6:	bf00      	nop
   856f8:	00084705 	.word	0x00084705
   856fc:	400a4000 	.word	0x400a4000
   85700:	00084761 	.word	0x00084761
   85704:	20001828 	.word	0x20001828
   85708:	20001345 	.word	0x20001345

0008570c <udd_ctrl_setup_received>:
=======
	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   84c94:	687b      	ldr	r3, [r7, #4]
   84c96:	f003 031f 	and.w	r3, r3, #31
   84c9a:	2201      	movs	r2, #1
   84c9c:	fa02 f303 	lsl.w	r3, r2, r3
   84ca0:	461a      	mov	r2, r3
   84ca2:	68fb      	ldr	r3, [r7, #12]
   84ca4:	635a      	str	r2, [r3, #52]	; 0x34
}
   84ca6:	bf00      	nop
   84ca8:	3710      	adds	r7, #16
   84caa:	46bd      	mov	sp, r7
   84cac:	bd80      	pop	{r7, pc}
   84cae:	bf00      	nop
   84cb0:	00084ec1 	.word	0x00084ec1

00084cb4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   84cb4:	b590      	push	{r4, r7, lr}
   84cb6:	b087      	sub	sp, #28
   84cb8:	af02      	add	r7, sp, #8
   84cba:	6078      	str	r0, [r7, #4]
   84cbc:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   84cbe:	6878      	ldr	r0, [r7, #4]
   84cc0:	4b43      	ldr	r3, [pc, #268]	; (84dd0 <pio_configure_pin+0x11c>)
   84cc2:	4798      	blx	r3
   84cc4:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   84cc6:	683b      	ldr	r3, [r7, #0]
   84cc8:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   84ccc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84cd0:	d057      	beq.n	84d82 <pio_configure_pin+0xce>
   84cd2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84cd6:	d873      	bhi.n	84dc0 <pio_configure_pin+0x10c>
   84cd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84cdc:	d051      	beq.n	84d82 <pio_configure_pin+0xce>
   84cde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84ce2:	d86d      	bhi.n	84dc0 <pio_configure_pin+0x10c>
   84ce4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84ce8:	d03f      	beq.n	84d6a <pio_configure_pin+0xb6>
   84cea:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84cee:	d867      	bhi.n	84dc0 <pio_configure_pin+0x10c>
   84cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84cf4:	d003      	beq.n	84cfe <pio_configure_pin+0x4a>
   84cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84cfa:	d01b      	beq.n	84d34 <pio_configure_pin+0x80>
   84cfc:	e060      	b.n	84dc0 <pio_configure_pin+0x10c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   84cfe:	687b      	ldr	r3, [r7, #4]
   84d00:	f003 031f 	and.w	r3, r3, #31
   84d04:	2201      	movs	r2, #1
   84d06:	fa02 f303 	lsl.w	r3, r2, r3
   84d0a:	461a      	mov	r2, r3
   84d0c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84d10:	68f8      	ldr	r0, [r7, #12]
   84d12:	4b30      	ldr	r3, [pc, #192]	; (84dd4 <pio_configure_pin+0x120>)
   84d14:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   84d16:	687b      	ldr	r3, [r7, #4]
   84d18:	f003 031f 	and.w	r3, r3, #31
   84d1c:	2201      	movs	r2, #1
   84d1e:	fa02 f303 	lsl.w	r3, r2, r3
   84d22:	4619      	mov	r1, r3
   84d24:	683b      	ldr	r3, [r7, #0]
   84d26:	f003 0301 	and.w	r3, r3, #1
   84d2a:	461a      	mov	r2, r3
   84d2c:	68f8      	ldr	r0, [r7, #12]
   84d2e:	4b2a      	ldr	r3, [pc, #168]	; (84dd8 <pio_configure_pin+0x124>)
   84d30:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   84d32:	e047      	b.n	84dc4 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   84d34:	687b      	ldr	r3, [r7, #4]
   84d36:	f003 031f 	and.w	r3, r3, #31
   84d3a:	2201      	movs	r2, #1
   84d3c:	fa02 f303 	lsl.w	r3, r2, r3
   84d40:	461a      	mov	r2, r3
   84d42:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84d46:	68f8      	ldr	r0, [r7, #12]
   84d48:	4b22      	ldr	r3, [pc, #136]	; (84dd4 <pio_configure_pin+0x120>)
   84d4a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   84d4c:	687b      	ldr	r3, [r7, #4]
   84d4e:	f003 031f 	and.w	r3, r3, #31
   84d52:	2201      	movs	r2, #1
   84d54:	fa02 f303 	lsl.w	r3, r2, r3
   84d58:	4619      	mov	r1, r3
   84d5a:	683b      	ldr	r3, [r7, #0]
   84d5c:	f003 0301 	and.w	r3, r3, #1
   84d60:	461a      	mov	r2, r3
   84d62:	68f8      	ldr	r0, [r7, #12]
   84d64:	4b1c      	ldr	r3, [pc, #112]	; (84dd8 <pio_configure_pin+0x124>)
   84d66:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   84d68:	e02c      	b.n	84dc4 <pio_configure_pin+0x110>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   84d6a:	687b      	ldr	r3, [r7, #4]
   84d6c:	f003 031f 	and.w	r3, r3, #31
   84d70:	2201      	movs	r2, #1
   84d72:	fa02 f303 	lsl.w	r3, r2, r3
   84d76:	683a      	ldr	r2, [r7, #0]
   84d78:	4619      	mov	r1, r3
   84d7a:	68f8      	ldr	r0, [r7, #12]
   84d7c:	4b17      	ldr	r3, [pc, #92]	; (84ddc <pio_configure_pin+0x128>)
   84d7e:	4798      	blx	r3
		break;
   84d80:	e020      	b.n	84dc4 <pio_configure_pin+0x110>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84d82:	687b      	ldr	r3, [r7, #4]
   84d84:	f003 031f 	and.w	r3, r3, #31
   84d88:	2201      	movs	r2, #1
   84d8a:	fa02 f303 	lsl.w	r3, r2, r3
   84d8e:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84d90:	683b      	ldr	r3, [r7, #0]
   84d92:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84d96:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84d9a:	bf0c      	ite	eq
   84d9c:	2301      	moveq	r3, #1
   84d9e:	2300      	movne	r3, #0
   84da0:	b2db      	uxtb	r3, r3
   84da2:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   84da4:	683b      	ldr	r3, [r7, #0]
   84da6:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84da8:	f003 0201 	and.w	r2, r3, #1
   84dac:	683b      	ldr	r3, [r7, #0]
   84dae:	f003 0301 	and.w	r3, r3, #1
   84db2:	9300      	str	r3, [sp, #0]
   84db4:	4613      	mov	r3, r2
   84db6:	4602      	mov	r2, r0
   84db8:	68f8      	ldr	r0, [r7, #12]
   84dba:	4c09      	ldr	r4, [pc, #36]	; (84de0 <pio_configure_pin+0x12c>)
   84dbc:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   84dbe:	e001      	b.n	84dc4 <pio_configure_pin+0x110>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	default:
		return 0;
   84dc0:	2300      	movs	r3, #0
   84dc2:	e000      	b.n	84dc6 <pio_configure_pin+0x112>
	}

	return 1;
   84dc4:	2301      	movs	r3, #1
}
   84dc6:	4618      	mov	r0, r3
   84dc8:	3714      	adds	r7, #20
   84dca:	46bd      	mov	sp, r7
   84dcc:	bd90      	pop	{r4, r7, pc}
   84dce:	bf00      	nop
   84dd0:	00084ec1 	.word	0x00084ec1
   84dd4:	00084a3f 	.word	0x00084a3f
   84dd8:	00084a15 	.word	0x00084a15
   84ddc:	00084add 	.word	0x00084add
   84de0:	00084b5d 	.word	0x00084b5d

00084de4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
<<<<<<< HEAD
   8570c:	b580      	push	{r7, lr}
   8570e:	b084      	sub	sp, #16
   85710:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   85712:	4b40      	ldr	r3, [pc, #256]	; (85814 <udd_ctrl_setup_received+0x108>)
   85714:	781b      	ldrb	r3, [r3, #0]
   85716:	2b00      	cmp	r3, #0
   85718:	d003      	beq.n	85722 <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   8571a:	4b3f      	ldr	r3, [pc, #252]	; (85818 <udd_ctrl_setup_received+0x10c>)
   8571c:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   8571e:	4b3f      	ldr	r3, [pc, #252]	; (8581c <udd_ctrl_setup_received+0x110>)
   85720:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   85722:	4b3f      	ldr	r3, [pc, #252]	; (85820 <udd_ctrl_setup_received+0x114>)
   85724:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85728:	0d1b      	lsrs	r3, r3, #20
   8572a:	f3c3 030a 	ubfx	r3, r3, #0, #11
   8572e:	2b08      	cmp	r3, #8
   85730:	d007      	beq.n	85742 <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   85732:	4b3c      	ldr	r3, [pc, #240]	; (85824 <udd_ctrl_setup_received+0x118>)
   85734:	4798      	blx	r3
		udd_ack_setup_received(0);
   85736:	4b3a      	ldr	r3, [pc, #232]	; (85820 <udd_ctrl_setup_received+0x114>)
   85738:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8573c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   85740:	e064      	b.n	8580c <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85742:	4b39      	ldr	r3, [pc, #228]	; (85828 <udd_ctrl_setup_received+0x11c>)
   85744:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   85746:	2300      	movs	r3, #0
   85748:	73fb      	strb	r3, [r7, #15]
   8574a:	e00a      	b.n	85762 <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   8574c:	68bb      	ldr	r3, [r7, #8]
   8574e:	1c5a      	adds	r2, r3, #1
   85750:	60ba      	str	r2, [r7, #8]
   85752:	7bfa      	ldrb	r2, [r7, #15]
   85754:	4935      	ldr	r1, [pc, #212]	; (8582c <udd_ctrl_setup_received+0x120>)
   85756:	440a      	add	r2, r1
   85758:	781b      	ldrb	r3, [r3, #0]
   8575a:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   8575c:	7bfb      	ldrb	r3, [r7, #15]
   8575e:	3301      	adds	r3, #1
   85760:	73fb      	strb	r3, [r7, #15]
   85762:	7bfb      	ldrb	r3, [r7, #15]
   85764:	2b07      	cmp	r3, #7
   85766:	d9f1      	bls.n	8574c <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   85768:	4b30      	ldr	r3, [pc, #192]	; (8582c <udd_ctrl_setup_received+0x120>)
   8576a:	885a      	ldrh	r2, [r3, #2]
   8576c:	4b2f      	ldr	r3, [pc, #188]	; (8582c <udd_ctrl_setup_received+0x120>)
   8576e:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   85770:	4b2e      	ldr	r3, [pc, #184]	; (8582c <udd_ctrl_setup_received+0x120>)
   85772:	889a      	ldrh	r2, [r3, #4]
   85774:	4b2d      	ldr	r3, [pc, #180]	; (8582c <udd_ctrl_setup_received+0x120>)
   85776:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   85778:	4b2c      	ldr	r3, [pc, #176]	; (8582c <udd_ctrl_setup_received+0x120>)
   8577a:	88da      	ldrh	r2, [r3, #6]
   8577c:	4b2b      	ldr	r3, [pc, #172]	; (8582c <udd_ctrl_setup_received+0x120>)
   8577e:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   85780:	4b2b      	ldr	r3, [pc, #172]	; (85830 <udd_ctrl_setup_received+0x124>)
   85782:	4798      	blx	r3
   85784:	4603      	mov	r3, r0
   85786:	f083 0301 	eor.w	r3, r3, #1
   8578a:	b2db      	uxtb	r3, r3
   8578c:	2b00      	cmp	r3, #0
   8578e:	d007      	beq.n	857a0 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   85790:	4b24      	ldr	r3, [pc, #144]	; (85824 <udd_ctrl_setup_received+0x118>)
   85792:	4798      	blx	r3
		udd_ack_setup_received(0);
   85794:	4b22      	ldr	r3, [pc, #136]	; (85820 <udd_ctrl_setup_received+0x114>)
   85796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8579a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   8579e:	e035      	b.n	8580c <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   857a0:	4b1f      	ldr	r3, [pc, #124]	; (85820 <udd_ctrl_setup_received+0x114>)
   857a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   857a6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   857aa:	4b20      	ldr	r3, [pc, #128]	; (8582c <udd_ctrl_setup_received+0x120>)
   857ac:	781b      	ldrb	r3, [r3, #0]
   857ae:	b25b      	sxtb	r3, r3
   857b0:	2b00      	cmp	r3, #0
   857b2:	da0b      	bge.n	857cc <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   857b4:	4b1f      	ldr	r3, [pc, #124]	; (85834 <udd_ctrl_setup_received+0x128>)
   857b6:	2200      	movs	r2, #0
   857b8:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   857ba:	4b1f      	ldr	r3, [pc, #124]	; (85838 <udd_ctrl_setup_received+0x12c>)
   857bc:	2200      	movs	r2, #0
   857be:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   857c0:	4b14      	ldr	r3, [pc, #80]	; (85814 <udd_ctrl_setup_received+0x108>)
   857c2:	2202      	movs	r2, #2
   857c4:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   857c6:	4b1d      	ldr	r3, [pc, #116]	; (8583c <udd_ctrl_setup_received+0x130>)
   857c8:	4798      	blx	r3
   857ca:	e01f      	b.n	8580c <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   857cc:	4b17      	ldr	r3, [pc, #92]	; (8582c <udd_ctrl_setup_received+0x120>)
   857ce:	88db      	ldrh	r3, [r3, #6]
   857d0:	2b00      	cmp	r3, #0
   857d2:	d102      	bne.n	857da <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   857d4:	4b1a      	ldr	r3, [pc, #104]	; (85840 <udd_ctrl_setup_received+0x134>)
   857d6:	4798      	blx	r3
			return;
   857d8:	e018      	b.n	8580c <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   857da:	4b16      	ldr	r3, [pc, #88]	; (85834 <udd_ctrl_setup_received+0x128>)
   857dc:	2200      	movs	r2, #0
   857de:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   857e0:	4b15      	ldr	r3, [pc, #84]	; (85838 <udd_ctrl_setup_received+0x12c>)
   857e2:	2200      	movs	r2, #0
   857e4:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   857e6:	4b0b      	ldr	r3, [pc, #44]	; (85814 <udd_ctrl_setup_received+0x108>)
   857e8:	2201      	movs	r2, #1
   857ea:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   857ec:	4b0c      	ldr	r3, [pc, #48]	; (85820 <udd_ctrl_setup_received+0x114>)
   857ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   857f2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   857f6:	4b13      	ldr	r3, [pc, #76]	; (85844 <udd_ctrl_setup_received+0x138>)
   857f8:	4798      	blx	r3
   857fa:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   857fc:	4b08      	ldr	r3, [pc, #32]	; (85820 <udd_ctrl_setup_received+0x114>)
   857fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85802:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   85806:	6878      	ldr	r0, [r7, #4]
   85808:	4b0f      	ldr	r3, [pc, #60]	; (85848 <udd_ctrl_setup_received+0x13c>)
   8580a:	4798      	blx	r3
=======
   84de4:	b590      	push	{r4, r7, lr}
   84de6:	b087      	sub	sp, #28
   84de8:	af02      	add	r7, sp, #8
   84dea:	60f8      	str	r0, [r7, #12]
   84dec:	60b9      	str	r1, [r7, #8]
   84dee:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   84df0:	687b      	ldr	r3, [r7, #4]
   84df2:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   84df6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84dfa:	d039      	beq.n	84e70 <pio_configure_pin_group+0x8c>
   84dfc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84e00:	d84f      	bhi.n	84ea2 <pio_configure_pin_group+0xbe>
   84e02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84e06:	d033      	beq.n	84e70 <pio_configure_pin_group+0x8c>
   84e08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   84e0c:	d849      	bhi.n	84ea2 <pio_configure_pin_group+0xbe>
   84e0e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84e12:	d027      	beq.n	84e64 <pio_configure_pin_group+0x80>
   84e14:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   84e18:	d843      	bhi.n	84ea2 <pio_configure_pin_group+0xbe>
   84e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   84e1e:	d003      	beq.n	84e28 <pio_configure_pin_group+0x44>
   84e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   84e24:	d00f      	beq.n	84e46 <pio_configure_pin_group+0x62>
   84e26:	e03c      	b.n	84ea2 <pio_configure_pin_group+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   84e28:	68ba      	ldr	r2, [r7, #8]
   84e2a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   84e2e:	68f8      	ldr	r0, [r7, #12]
   84e30:	4b1f      	ldr	r3, [pc, #124]	; (84eb0 <pio_configure_pin_group+0xcc>)
   84e32:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   84e34:	687b      	ldr	r3, [r7, #4]
   84e36:	f003 0301 	and.w	r3, r3, #1
   84e3a:	461a      	mov	r2, r3
   84e3c:	68b9      	ldr	r1, [r7, #8]
   84e3e:	68f8      	ldr	r0, [r7, #12]
   84e40:	4b1c      	ldr	r3, [pc, #112]	; (84eb4 <pio_configure_pin_group+0xd0>)
   84e42:	4798      	blx	r3
		break;
   84e44:	e02f      	b.n	84ea6 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   84e46:	68ba      	ldr	r2, [r7, #8]
   84e48:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   84e4c:	68f8      	ldr	r0, [r7, #12]
   84e4e:	4b18      	ldr	r3, [pc, #96]	; (84eb0 <pio_configure_pin_group+0xcc>)
   84e50:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   84e52:	687b      	ldr	r3, [r7, #4]
   84e54:	f003 0301 	and.w	r3, r3, #1
   84e58:	461a      	mov	r2, r3
   84e5a:	68b9      	ldr	r1, [r7, #8]
   84e5c:	68f8      	ldr	r0, [r7, #12]
   84e5e:	4b15      	ldr	r3, [pc, #84]	; (84eb4 <pio_configure_pin_group+0xd0>)
   84e60:	4798      	blx	r3
		break;
   84e62:	e020      	b.n	84ea6 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   84e64:	687a      	ldr	r2, [r7, #4]
   84e66:	68b9      	ldr	r1, [r7, #8]
   84e68:	68f8      	ldr	r0, [r7, #12]
   84e6a:	4b13      	ldr	r3, [pc, #76]	; (84eb8 <pio_configure_pin_group+0xd4>)
   84e6c:	4798      	blx	r3
		break;
   84e6e:	e01a      	b.n	84ea6 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84e70:	687b      	ldr	r3, [r7, #4]
   84e72:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   84e76:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   84e7a:	bf0c      	ite	eq
   84e7c:	2301      	moveq	r3, #1
   84e7e:	2300      	movne	r3, #0
   84e80:	b2db      	uxtb	r3, r3
   84e82:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   84e84:	687b      	ldr	r3, [r7, #4]
   84e86:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   84e88:	f003 0201 	and.w	r2, r3, #1
   84e8c:	687b      	ldr	r3, [r7, #4]
   84e8e:	f003 0301 	and.w	r3, r3, #1
   84e92:	9300      	str	r3, [sp, #0]
   84e94:	4613      	mov	r3, r2
   84e96:	460a      	mov	r2, r1
   84e98:	68b9      	ldr	r1, [r7, #8]
   84e9a:	68f8      	ldr	r0, [r7, #12]
   84e9c:	4c07      	ldr	r4, [pc, #28]	; (84ebc <pio_configure_pin_group+0xd8>)
   84e9e:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   84ea0:	e001      	b.n	84ea6 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   84ea2:	2300      	movs	r3, #0
   84ea4:	e000      	b.n	84ea8 <pio_configure_pin_group+0xc4>
	}

	return 1;
   84ea6:	2301      	movs	r3, #1
}
   84ea8:	4618      	mov	r0, r3
   84eaa:	3714      	adds	r7, #20
   84eac:	46bd      	mov	sp, r7
   84eae:	bd90      	pop	{r4, r7, pc}
   84eb0:	00084a3f 	.word	0x00084a3f
   84eb4:	00084a15 	.word	0x00084a15
   84eb8:	00084add 	.word	0x00084add
   84ebc:	00084b5d 	.word	0x00084b5d

00084ec0 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   84ec0:	b480      	push	{r7}
   84ec2:	b085      	sub	sp, #20
   84ec4:	af00      	add	r7, sp, #0
   84ec6:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84ec8:	687b      	ldr	r3, [r7, #4]
   84eca:	095b      	lsrs	r3, r3, #5
   84ecc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84ed0:	f203 7306 	addw	r3, r3, #1798	; 0x706
   84ed4:	025b      	lsls	r3, r3, #9
   84ed6:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   84ed8:	68fb      	ldr	r3, [r7, #12]
}
<<<<<<< HEAD
   8580c:	3710      	adds	r7, #16
   8580e:	46bd      	mov	sp, r7
   85810:	bd80      	pop	{r7, pc}
   85812:	bf00      	nop
   85814:	20001345 	.word	0x20001345
   85818:	00085cb5 	.word	0x00085cb5
   8581c:	000856b1 	.word	0x000856b1
   85820:	400a4000 	.word	0x400a4000
   85824:	00085be9 	.word	0x00085be9
   85828:	20180000 	.word	0x20180000
   8582c:	20001828 	.word	0x20001828
   85830:	000844b1 	.word	0x000844b1
   85834:	20001346 	.word	0x20001346
   85838:	20001348 	.word	0x20001348
   8583c:	0008584d 	.word	0x0008584d
   85840:	00085c0d 	.word	0x00085c0d
   85844:	00084705 	.word	0x00084705
   85848:	00084761 	.word	0x00084761

0008584c <udd_ctrl_in_sent>:
=======
   84eda:	4618      	mov	r0, r3
   84edc:	3714      	adds	r7, #20
   84ede:	46bd      	mov	sp, r7
   84ee0:	bc80      	pop	{r7}
   84ee2:	4770      	bx	lr
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

00084ee4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
<<<<<<< HEAD
   8584c:	b580      	push	{r7, lr}
   8584e:	b084      	sub	sp, #16
   85850:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   85852:	4b4c      	ldr	r3, [pc, #304]	; (85984 <udd_ctrl_in_sent+0x138>)
   85854:	4798      	blx	r3
   85856:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   85858:	4b4b      	ldr	r3, [pc, #300]	; (85988 <udd_ctrl_in_sent+0x13c>)
   8585a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8585e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   85862:	6838      	ldr	r0, [r7, #0]
   85864:	4b49      	ldr	r3, [pc, #292]	; (8598c <udd_ctrl_in_sent+0x140>)
   85866:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85868:	4b49      	ldr	r3, [pc, #292]	; (85990 <udd_ctrl_in_sent+0x144>)
   8586a:	781b      	ldrb	r3, [r3, #0]
   8586c:	2b03      	cmp	r3, #3
   8586e:	d104      	bne.n	8587a <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   85870:	4b48      	ldr	r3, [pc, #288]	; (85994 <udd_ctrl_in_sent+0x148>)
   85872:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   85874:	4b48      	ldr	r3, [pc, #288]	; (85998 <udd_ctrl_in_sent+0x14c>)
   85876:	4798      	blx	r3
		return;
   85878:	e081      	b.n	8597e <udd_ctrl_in_sent+0x132>
=======
   84ee4:	b480      	push	{r7}
   84ee6:	af00      	add	r7, sp, #0
	while (1) {
   84ee8:	e7fe      	b.n	84ee8 <Dummy_Handler+0x4>
   84eea:	0000      	movs	r0, r0

00084eec <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   84eec:	b480      	push	{r7}
   84eee:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   84ef0:	4b02      	ldr	r3, [pc, #8]	; (84efc <udc_get_string_serial_name+0x10>)
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
   84ef2:	4618      	mov	r0, r3
   84ef4:	46bd      	mov	sp, r7
   84ef6:	bc80      	pop	{r7}
   84ef8:	4770      	bx	lr
   84efa:	bf00      	nop
   84efc:	2000025c 	.word	0x2000025c

00084f00 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

<<<<<<< HEAD
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8587a:	4b48      	ldr	r3, [pc, #288]	; (8599c <udd_ctrl_in_sent+0x150>)
   8587c:	899a      	ldrh	r2, [r3, #12]
   8587e:	4b48      	ldr	r3, [pc, #288]	; (859a0 <udd_ctrl_in_sent+0x154>)
   85880:	881b      	ldrh	r3, [r3, #0]
   85882:	1ad3      	subs	r3, r2, r3
   85884:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   85886:	89fb      	ldrh	r3, [r7, #14]
   85888:	2b00      	cmp	r3, #0
   8588a:	d127      	bne.n	858dc <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8588c:	4b45      	ldr	r3, [pc, #276]	; (859a4 <udd_ctrl_in_sent+0x158>)
   8588e:	881a      	ldrh	r2, [r3, #0]
   85890:	4b43      	ldr	r3, [pc, #268]	; (859a0 <udd_ctrl_in_sent+0x154>)
   85892:	881b      	ldrh	r3, [r3, #0]
   85894:	4413      	add	r3, r2
   85896:	b29a      	uxth	r2, r3
   85898:	4b42      	ldr	r3, [pc, #264]	; (859a4 <udd_ctrl_in_sent+0x158>)
   8589a:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   8589c:	4b3f      	ldr	r3, [pc, #252]	; (8599c <udd_ctrl_in_sent+0x150>)
   8589e:	88da      	ldrh	r2, [r3, #6]
   858a0:	4b40      	ldr	r3, [pc, #256]	; (859a4 <udd_ctrl_in_sent+0x158>)
   858a2:	881b      	ldrh	r3, [r3, #0]
   858a4:	429a      	cmp	r2, r3
   858a6:	d003      	beq.n	858b0 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   858a8:	4b3f      	ldr	r3, [pc, #252]	; (859a8 <udd_ctrl_in_sent+0x15c>)
   858aa:	781b      	ldrb	r3, [r3, #0]
   858ac:	2b00      	cmp	r3, #0
   858ae:	d002      	beq.n	858b6 <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   858b0:	4b3e      	ldr	r3, [pc, #248]	; (859ac <udd_ctrl_in_sent+0x160>)
   858b2:	4798      	blx	r3
			return;
   858b4:	e063      	b.n	8597e <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   858b6:	4b39      	ldr	r3, [pc, #228]	; (8599c <udd_ctrl_in_sent+0x150>)
   858b8:	695b      	ldr	r3, [r3, #20]
   858ba:	2b00      	cmp	r3, #0
   858bc:	d00e      	beq.n	858dc <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   858be:	4b37      	ldr	r3, [pc, #220]	; (8599c <udd_ctrl_in_sent+0x150>)
   858c0:	695b      	ldr	r3, [r3, #20]
   858c2:	4798      	blx	r3
   858c4:	4603      	mov	r3, r0
   858c6:	f083 0301 	eor.w	r3, r3, #1
   858ca:	b2db      	uxtb	r3, r3
   858cc:	2b00      	cmp	r3, #0
   858ce:	d105      	bne.n	858dc <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   858d0:	4b33      	ldr	r3, [pc, #204]	; (859a0 <udd_ctrl_in_sent+0x154>)
   858d2:	2200      	movs	r2, #0
   858d4:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   858d6:	4b31      	ldr	r3, [pc, #196]	; (8599c <udd_ctrl_in_sent+0x150>)
   858d8:	899b      	ldrh	r3, [r3, #12]
   858da:	81fb      	strh	r3, [r7, #14]
=======
usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   84f00:	b480      	push	{r7}
   84f02:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   84f04:	4b02      	ldr	r3, [pc, #8]	; (84f10 <udc_get_interface_desc+0x10>)
   84f06:	681b      	ldr	r3, [r3, #0]
}
   84f08:	4618      	mov	r0, r3
   84f0a:	46bd      	mov	sp, r7
   84f0c:	bc80      	pop	{r7}
   84f0e:	4770      	bx	lr
   84f10:	20001364 	.word	0x20001364

00084f14 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   84f14:	b480      	push	{r7}
   84f16:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   84f18:	4b06      	ldr	r3, [pc, #24]	; (84f34 <udc_get_eof_conf+0x20>)
   84f1a:	681b      	ldr	r3, [r3, #0]
   84f1c:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   84f1e:	4a05      	ldr	r2, [pc, #20]	; (84f34 <udc_get_eof_conf+0x20>)
   84f20:	6812      	ldr	r2, [r2, #0]
   84f22:	6812      	ldr	r2, [r2, #0]
   84f24:	8852      	ldrh	r2, [r2, #2]
   84f26:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   84f28:	4413      	add	r3, r2
}
   84f2a:	4618      	mov	r0, r3
   84f2c:	46bd      	mov	sp, r7
   84f2e:	bc80      	pop	{r7}
   84f30:	4770      	bx	lr
   84f32:	bf00      	nop
   84f34:	20001360 	.word	0x20001360

00084f38 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   84f38:	b580      	push	{r7, lr}
   84f3a:	b084      	sub	sp, #16
   84f3c:	af00      	add	r7, sp, #0
   84f3e:	6078      	str	r0, [r7, #4]
   84f40:	460b      	mov	r3, r1
   84f42:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   84f44:	4b12      	ldr	r3, [pc, #72]	; (84f90 <udc_next_desc_in_iface+0x58>)
   84f46:	4798      	blx	r3
   84f48:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   84f4a:	687b      	ldr	r3, [r7, #4]
   84f4c:	781b      	ldrb	r3, [r3, #0]
   84f4e:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   84f50:	687b      	ldr	r3, [r7, #4]
   84f52:	4413      	add	r3, r2
   84f54:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   84f56:	e010      	b.n	84f7a <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   84f58:	687b      	ldr	r3, [r7, #4]
   84f5a:	785b      	ldrb	r3, [r3, #1]
   84f5c:	2b04      	cmp	r3, #4
   84f5e:	d011      	beq.n	84f84 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   84f60:	687b      	ldr	r3, [r7, #4]
   84f62:	785b      	ldrb	r3, [r3, #1]
   84f64:	78fa      	ldrb	r2, [r7, #3]
   84f66:	429a      	cmp	r2, r3
   84f68:	d101      	bne.n	84f6e <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   84f6a:	687b      	ldr	r3, [r7, #4]
   84f6c:	e00c      	b.n	84f88 <udc_next_desc_in_iface+0x50>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   84f6e:	687b      	ldr	r3, [r7, #4]
   84f70:	781b      	ldrb	r3, [r3, #0]
   84f72:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   84f74:	687b      	ldr	r3, [r7, #4]
   84f76:	4413      	add	r3, r2
   84f78:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   84f7a:	68fa      	ldr	r2, [r7, #12]
   84f7c:	687b      	ldr	r3, [r7, #4]
   84f7e:	429a      	cmp	r2, r3
   84f80:	d8ea      	bhi.n	84f58 <udc_next_desc_in_iface+0x20>
   84f82:	e000      	b.n	84f86 <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   84f84:	bf00      	nop
	}
<<<<<<< HEAD
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   858dc:	89fb      	ldrh	r3, [r7, #14]
   858de:	2b3f      	cmp	r3, #63	; 0x3f
   858e0:	d905      	bls.n	858ee <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   858e2:	2340      	movs	r3, #64	; 0x40
   858e4:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   858e6:	4b30      	ldr	r3, [pc, #192]	; (859a8 <udd_ctrl_in_sent+0x15c>)
   858e8:	2200      	movs	r2, #0
   858ea:	701a      	strb	r2, [r3, #0]
   858ec:	e002      	b.n	858f4 <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   858ee:	4b2e      	ldr	r3, [pc, #184]	; (859a8 <udd_ctrl_in_sent+0x15c>)
   858f0:	2201      	movs	r2, #1
   858f2:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   858f4:	4b2e      	ldr	r3, [pc, #184]	; (859b0 <udd_ctrl_in_sent+0x164>)
   858f6:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   858f8:	4b28      	ldr	r3, [pc, #160]	; (8599c <udd_ctrl_in_sent+0x150>)
   858fa:	689b      	ldr	r3, [r3, #8]
   858fc:	4a28      	ldr	r2, [pc, #160]	; (859a0 <udd_ctrl_in_sent+0x154>)
   858fe:	8812      	ldrh	r2, [r2, #0]
   85900:	4413      	add	r3, r2
   85902:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   85904:	4b1f      	ldr	r3, [pc, #124]	; (85984 <udd_ctrl_in_sent+0x138>)
   85906:	4798      	blx	r3
   85908:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   8590a:	4b1f      	ldr	r3, [pc, #124]	; (85988 <udd_ctrl_in_sent+0x13c>)
   8590c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85910:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85914:	2b00      	cmp	r3, #0
   85916:	d006      	beq.n	85926 <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   85918:	6838      	ldr	r0, [r7, #0]
   8591a:	4b1c      	ldr	r3, [pc, #112]	; (8598c <udd_ctrl_in_sent+0x140>)
   8591c:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8591e:	4b1c      	ldr	r3, [pc, #112]	; (85990 <udd_ctrl_in_sent+0x144>)
   85920:	2204      	movs	r2, #4
   85922:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   85924:	e02b      	b.n	8597e <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   85926:	2300      	movs	r3, #0
   85928:	737b      	strb	r3, [r7, #13]
   8592a:	e00a      	b.n	85942 <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   8592c:	687a      	ldr	r2, [r7, #4]
   8592e:	1c53      	adds	r3, r2, #1
   85930:	607b      	str	r3, [r7, #4]
   85932:	68bb      	ldr	r3, [r7, #8]
   85934:	1c59      	adds	r1, r3, #1
   85936:	60b9      	str	r1, [r7, #8]
   85938:	7812      	ldrb	r2, [r2, #0]
   8593a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   8593c:	7b7b      	ldrb	r3, [r7, #13]
   8593e:	3301      	adds	r3, #1
   85940:	737b      	strb	r3, [r7, #13]
   85942:	7b7b      	ldrb	r3, [r7, #13]
   85944:	b29b      	uxth	r3, r3
   85946:	89fa      	ldrh	r2, [r7, #14]
   85948:	429a      	cmp	r2, r3
   8594a:	d8ef      	bhi.n	8592c <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   8594c:	4b14      	ldr	r3, [pc, #80]	; (859a0 <udd_ctrl_in_sent+0x154>)
   8594e:	881a      	ldrh	r2, [r3, #0]
   85950:	89fb      	ldrh	r3, [r7, #14]
   85952:	4413      	add	r3, r2
   85954:	b29a      	uxth	r2, r3
   85956:	4b12      	ldr	r3, [pc, #72]	; (859a0 <udd_ctrl_in_sent+0x154>)
   85958:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   8595a:	4b0b      	ldr	r3, [pc, #44]	; (85988 <udd_ctrl_in_sent+0x13c>)
   8595c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85960:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85964:	4b08      	ldr	r3, [pc, #32]	; (85988 <udd_ctrl_in_sent+0x13c>)
   85966:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8596a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   8596e:	4b06      	ldr	r3, [pc, #24]	; (85988 <udd_ctrl_in_sent+0x13c>)
   85970:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85974:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   85978:	6838      	ldr	r0, [r7, #0]
   8597a:	4b04      	ldr	r3, [pc, #16]	; (8598c <udd_ctrl_in_sent+0x140>)
   8597c:	4798      	blx	r3
}
   8597e:	3710      	adds	r7, #16
   85980:	46bd      	mov	sp, r7
   85982:	bd80      	pop	{r7, pc}
   85984:	00084705 	.word	0x00084705
   85988:	400a4000 	.word	0x400a4000
   8598c:	00084761 	.word	0x00084761
   85990:	20001345 	.word	0x20001345
   85994:	00085cb5 	.word	0x00085cb5
   85998:	000856b1 	.word	0x000856b1
   8599c:	20001828 	.word	0x20001828
   859a0:	20001348 	.word	0x20001348
   859a4:	20001346 	.word	0x20001346
   859a8:	2000137c 	.word	0x2000137c
   859ac:	00085c71 	.word	0x00085c71
   859b0:	20180000 	.word	0x20180000

000859b4 <udd_ctrl_out_received>:
=======
	return NULL; // No specific descriptor found
   84f86:	2300      	movs	r3, #0
}
   84f88:	4618      	mov	r0, r3
   84f8a:	3710      	adds	r7, #16
   84f8c:	46bd      	mov	sp, r7
   84f8e:	bd80      	pop	{r7, pc}
   84f90:	00084f15 	.word	0x00084f15

00084f94 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   84f94:	b580      	push	{r7, lr}
   84f96:	b084      	sub	sp, #16
   84f98:	af00      	add	r7, sp, #0
   84f9a:	4603      	mov	r3, r0
   84f9c:	460a      	mov	r2, r1
   84f9e:	71fb      	strb	r3, [r7, #7]
   84fa0:	4613      	mov	r3, r2
   84fa2:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	if (0 == udc_num_configuration) {
   84fa4:	4b1e      	ldr	r3, [pc, #120]	; (85020 <udc_update_iface_desc+0x8c>)
   84fa6:	781b      	ldrb	r3, [r3, #0]
   84fa8:	2b00      	cmp	r3, #0
   84faa:	d101      	bne.n	84fb0 <udc_update_iface_desc+0x1c>
		return false;
   84fac:	2300      	movs	r3, #0
   84fae:	e032      	b.n	85016 <udc_update_iface_desc+0x82>
	}

<<<<<<< HEAD
static void udd_ctrl_out_received(void)
{
   859b4:	b580      	push	{r7, lr}
   859b6:	b084      	sub	sp, #16
   859b8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   859ba:	4b61      	ldr	r3, [pc, #388]	; (85b40 <udd_ctrl_out_received+0x18c>)
   859bc:	781b      	ldrb	r3, [r3, #0]
   859be:	2b01      	cmp	r3, #1
   859c0:	d00f      	beq.n	859e2 <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   859c2:	4b5f      	ldr	r3, [pc, #380]	; (85b40 <udd_ctrl_out_received+0x18c>)
   859c4:	781b      	ldrb	r3, [r3, #0]
   859c6:	2b02      	cmp	r3, #2
   859c8:	d003      	beq.n	859d2 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   859ca:	4b5d      	ldr	r3, [pc, #372]	; (85b40 <udd_ctrl_out_received+0x18c>)
   859cc:	781b      	ldrb	r3, [r3, #0]
   859ce:	2b04      	cmp	r3, #4
   859d0:	d102      	bne.n	859d8 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   859d2:	4b5c      	ldr	r3, [pc, #368]	; (85b44 <udd_ctrl_out_received+0x190>)
   859d4:	4798      	blx	r3
   859d6:	e001      	b.n	859dc <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   859d8:	4b5b      	ldr	r3, [pc, #364]	; (85b48 <udd_ctrl_out_received+0x194>)
   859da:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   859dc:	4b5b      	ldr	r3, [pc, #364]	; (85b4c <udd_ctrl_out_received+0x198>)
   859de:	4798      	blx	r3
		return;
   859e0:	e0ab      	b.n	85b3a <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   859e2:	4b5b      	ldr	r3, [pc, #364]	; (85b50 <udd_ctrl_out_received+0x19c>)
   859e4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   859e8:	0d1b      	lsrs	r3, r3, #20
   859ea:	b29b      	uxth	r3, r3
   859ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
   859f0:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   859f2:	4b58      	ldr	r3, [pc, #352]	; (85b54 <udd_ctrl_out_received+0x1a0>)
   859f4:	899b      	ldrh	r3, [r3, #12]
   859f6:	461a      	mov	r2, r3
   859f8:	4b57      	ldr	r3, [pc, #348]	; (85b58 <udd_ctrl_out_received+0x1a4>)
   859fa:	881b      	ldrh	r3, [r3, #0]
   859fc:	4619      	mov	r1, r3
   859fe:	89bb      	ldrh	r3, [r7, #12]
   85a00:	440b      	add	r3, r1
   85a02:	429a      	cmp	r2, r3
   85a04:	da05      	bge.n	85a12 <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85a06:	4b53      	ldr	r3, [pc, #332]	; (85b54 <udd_ctrl_out_received+0x1a0>)
   85a08:	899a      	ldrh	r2, [r3, #12]
   85a0a:	4b53      	ldr	r3, [pc, #332]	; (85b58 <udd_ctrl_out_received+0x1a4>)
   85a0c:	881b      	ldrh	r3, [r3, #0]
   85a0e:	1ad3      	subs	r3, r2, r3
   85a10:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85a12:	4b52      	ldr	r3, [pc, #328]	; (85b5c <udd_ctrl_out_received+0x1a8>)
   85a14:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85a16:	4b4f      	ldr	r3, [pc, #316]	; (85b54 <udd_ctrl_out_received+0x1a0>)
   85a18:	689b      	ldr	r3, [r3, #8]
   85a1a:	4a4f      	ldr	r2, [pc, #316]	; (85b58 <udd_ctrl_out_received+0x1a4>)
   85a1c:	8812      	ldrh	r2, [r2, #0]
   85a1e:	4413      	add	r3, r2
   85a20:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   85a22:	2300      	movs	r3, #0
   85a24:	73fb      	strb	r3, [r7, #15]
   85a26:	e00a      	b.n	85a3e <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   85a28:	68ba      	ldr	r2, [r7, #8]
   85a2a:	1c53      	adds	r3, r2, #1
   85a2c:	60bb      	str	r3, [r7, #8]
   85a2e:	687b      	ldr	r3, [r7, #4]
   85a30:	1c59      	adds	r1, r3, #1
   85a32:	6079      	str	r1, [r7, #4]
   85a34:	7812      	ldrb	r2, [r2, #0]
   85a36:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   85a38:	7bfb      	ldrb	r3, [r7, #15]
   85a3a:	3301      	adds	r3, #1
   85a3c:	73fb      	strb	r3, [r7, #15]
   85a3e:	7bfb      	ldrb	r3, [r7, #15]
   85a40:	b29b      	uxth	r3, r3
   85a42:	89ba      	ldrh	r2, [r7, #12]
   85a44:	429a      	cmp	r2, r3
   85a46:	d8ef      	bhi.n	85a28 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   85a48:	4b43      	ldr	r3, [pc, #268]	; (85b58 <udd_ctrl_out_received+0x1a4>)
   85a4a:	881a      	ldrh	r2, [r3, #0]
   85a4c:	89bb      	ldrh	r3, [r7, #12]
   85a4e:	4413      	add	r3, r2
   85a50:	b29a      	uxth	r2, r3
   85a52:	4b41      	ldr	r3, [pc, #260]	; (85b58 <udd_ctrl_out_received+0x1a4>)
   85a54:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85a56:	89bb      	ldrh	r3, [r7, #12]
   85a58:	2b40      	cmp	r3, #64	; 0x40
   85a5a:	d10a      	bne.n	85a72 <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   85a5c:	4b3d      	ldr	r3, [pc, #244]	; (85b54 <udd_ctrl_out_received+0x1a0>)
   85a5e:	88db      	ldrh	r3, [r3, #6]
   85a60:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   85a62:	4b3f      	ldr	r3, [pc, #252]	; (85b60 <udd_ctrl_out_received+0x1ac>)
   85a64:	881b      	ldrh	r3, [r3, #0]
   85a66:	4619      	mov	r1, r3
   85a68:	4b3b      	ldr	r3, [pc, #236]	; (85b58 <udd_ctrl_out_received+0x1a4>)
   85a6a:	881b      	ldrh	r3, [r3, #0]
   85a6c:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   85a6e:	429a      	cmp	r2, r3
   85a70:	dc20      	bgt.n	85ab4 <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   85a72:	4b39      	ldr	r3, [pc, #228]	; (85b58 <udd_ctrl_out_received+0x1a4>)
   85a74:	881a      	ldrh	r2, [r3, #0]
   85a76:	4b37      	ldr	r3, [pc, #220]	; (85b54 <udd_ctrl_out_received+0x1a0>)
   85a78:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85a7a:	4b36      	ldr	r3, [pc, #216]	; (85b54 <udd_ctrl_out_received+0x1a0>)
   85a7c:	695b      	ldr	r3, [r3, #20]
   85a7e:	2b00      	cmp	r3, #0
   85a80:	d010      	beq.n	85aa4 <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   85a82:	4b34      	ldr	r3, [pc, #208]	; (85b54 <udd_ctrl_out_received+0x1a0>)
   85a84:	695b      	ldr	r3, [r3, #20]
   85a86:	4798      	blx	r3
   85a88:	4603      	mov	r3, r0
   85a8a:	f083 0301 	eor.w	r3, r3, #1
   85a8e:	b2db      	uxtb	r3, r3
   85a90:	2b00      	cmp	r3, #0
   85a92:	d007      	beq.n	85aa4 <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   85a94:	4b2c      	ldr	r3, [pc, #176]	; (85b48 <udd_ctrl_out_received+0x194>)
   85a96:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   85a98:	4b2d      	ldr	r3, [pc, #180]	; (85b50 <udd_ctrl_out_received+0x19c>)
   85a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
   85a9e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   85aa2:	e04a      	b.n	85b3a <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   85aa4:	4b2a      	ldr	r3, [pc, #168]	; (85b50 <udd_ctrl_out_received+0x19c>)
   85aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
   85aaa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   85aae:	4b2d      	ldr	r3, [pc, #180]	; (85b64 <udd_ctrl_out_received+0x1b0>)
   85ab0:	4798      	blx	r3
		return;
   85ab2:	e042      	b.n	85b3a <udd_ctrl_out_received+0x186>
=======
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84fb0:	4b1c      	ldr	r3, [pc, #112]	; (85024 <udc_update_iface_desc+0x90>)
   84fb2:	681b      	ldr	r3, [r3, #0]
   84fb4:	681b      	ldr	r3, [r3, #0]
   84fb6:	791b      	ldrb	r3, [r3, #4]
   84fb8:	79fa      	ldrb	r2, [r7, #7]
   84fba:	429a      	cmp	r2, r3
   84fbc:	d301      	bcc.n	84fc2 <udc_update_iface_desc+0x2e>
		return false;
   84fbe:	2300      	movs	r3, #0
   84fc0:	e029      	b.n	85016 <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   84fc2:	4b18      	ldr	r3, [pc, #96]	; (85024 <udc_update_iface_desc+0x90>)
   84fc4:	681b      	ldr	r3, [r3, #0]
   84fc6:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   84fc8:	4a17      	ldr	r2, [pc, #92]	; (85028 <udc_update_iface_desc+0x94>)
   84fca:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   84fcc:	4b17      	ldr	r3, [pc, #92]	; (8502c <udc_update_iface_desc+0x98>)
   84fce:	4798      	blx	r3
   84fd0:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   84fd2:	e01a      	b.n	8500a <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   84fd4:	4b14      	ldr	r3, [pc, #80]	; (85028 <udc_update_iface_desc+0x94>)
   84fd6:	681b      	ldr	r3, [r3, #0]
   84fd8:	785b      	ldrb	r3, [r3, #1]
   84fda:	2b04      	cmp	r3, #4
   84fdc:	d10d      	bne.n	84ffa <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   84fde:	4b12      	ldr	r3, [pc, #72]	; (85028 <udc_update_iface_desc+0x94>)
   84fe0:	681b      	ldr	r3, [r3, #0]
   84fe2:	789b      	ldrb	r3, [r3, #2]
   84fe4:	79fa      	ldrb	r2, [r7, #7]
   84fe6:	429a      	cmp	r2, r3
   84fe8:	d107      	bne.n	84ffa <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   84fea:	4b0f      	ldr	r3, [pc, #60]	; (85028 <udc_update_iface_desc+0x94>)
   84fec:	681b      	ldr	r3, [r3, #0]
   84fee:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   84ff0:	79ba      	ldrb	r2, [r7, #6]
   84ff2:	429a      	cmp	r2, r3
   84ff4:	d101      	bne.n	84ffa <udc_update_iface_desc+0x66>
				return true; // Interface found
   84ff6:	2301      	movs	r3, #1
   84ff8:	e00d      	b.n	85016 <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   84ffa:	4b0b      	ldr	r3, [pc, #44]	; (85028 <udc_update_iface_desc+0x94>)
   84ffc:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   84ffe:	4a0a      	ldr	r2, [pc, #40]	; (85028 <udc_update_iface_desc+0x94>)
   85000:	6812      	ldr	r2, [r2, #0]
   85002:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   85004:	4413      	add	r3, r2
   85006:	4a08      	ldr	r2, [pc, #32]	; (85028 <udc_update_iface_desc+0x94>)
   85008:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   8500a:	4b07      	ldr	r3, [pc, #28]	; (85028 <udc_update_iface_desc+0x94>)
   8500c:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   8500e:	68fa      	ldr	r2, [r7, #12]
   85010:	429a      	cmp	r2, r3
   85012:	d8df      	bhi.n	84fd4 <udc_update_iface_desc+0x40>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
	return false; // Interface not found
   85014:	2300      	movs	r3, #0
}
   85016:	4618      	mov	r0, r3
   85018:	3710      	adds	r7, #16
   8501a:	46bd      	mov	sp, r7
   8501c:	bd80      	pop	{r7, pc}
   8501e:	bf00      	nop
   85020:	2000135c 	.word	0x2000135c
   85024:	20001360 	.word	0x20001360
   85028:	20001364 	.word	0x20001364
   8502c:	00084f15 	.word	0x00084f15

00085030 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   85030:	b580      	push	{r7, lr}
   85032:	b084      	sub	sp, #16
   85034:	af00      	add	r7, sp, #0
   85036:	4603      	mov	r3, r0
   85038:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

<<<<<<< HEAD
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   85ab4:	4b27      	ldr	r3, [pc, #156]	; (85b54 <udd_ctrl_out_received+0x1a0>)
   85ab6:	899a      	ldrh	r2, [r3, #12]
   85ab8:	4b27      	ldr	r3, [pc, #156]	; (85b58 <udd_ctrl_out_received+0x1a4>)
   85aba:	881b      	ldrh	r3, [r3, #0]
   85abc:	429a      	cmp	r2, r3
   85abe:	d127      	bne.n	85b10 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   85ac0:	4b24      	ldr	r3, [pc, #144]	; (85b54 <udd_ctrl_out_received+0x1a0>)
   85ac2:	695b      	ldr	r3, [r3, #20]
   85ac4:	2b00      	cmp	r3, #0
   85ac6:	d107      	bne.n	85ad8 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   85ac8:	4b1f      	ldr	r3, [pc, #124]	; (85b48 <udd_ctrl_out_received+0x194>)
   85aca:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   85acc:	4b20      	ldr	r3, [pc, #128]	; (85b50 <udd_ctrl_out_received+0x19c>)
   85ace:	f44f 7200 	mov.w	r2, #512	; 0x200
   85ad2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85ad6:	e030      	b.n	85b3a <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   85ad8:	4b1e      	ldr	r3, [pc, #120]	; (85b54 <udd_ctrl_out_received+0x1a0>)
   85ada:	695b      	ldr	r3, [r3, #20]
   85adc:	4798      	blx	r3
   85ade:	4603      	mov	r3, r0
   85ae0:	f083 0301 	eor.w	r3, r3, #1
   85ae4:	b2db      	uxtb	r3, r3
   85ae6:	2b00      	cmp	r3, #0
   85ae8:	d007      	beq.n	85afa <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   85aea:	4b17      	ldr	r3, [pc, #92]	; (85b48 <udd_ctrl_out_received+0x194>)
   85aec:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   85aee:	4b18      	ldr	r3, [pc, #96]	; (85b50 <udd_ctrl_out_received+0x19c>)
   85af0:	f44f 7200 	mov.w	r2, #512	; 0x200
   85af4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85af8:	e01f      	b.n	85b3a <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85afa:	4b19      	ldr	r3, [pc, #100]	; (85b60 <udd_ctrl_out_received+0x1ac>)
   85afc:	881a      	ldrh	r2, [r3, #0]
   85afe:	4b16      	ldr	r3, [pc, #88]	; (85b58 <udd_ctrl_out_received+0x1a4>)
   85b00:	881b      	ldrh	r3, [r3, #0]
   85b02:	4413      	add	r3, r2
   85b04:	b29a      	uxth	r2, r3
   85b06:	4b16      	ldr	r3, [pc, #88]	; (85b60 <udd_ctrl_out_received+0x1ac>)
   85b08:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   85b0a:	4b13      	ldr	r3, [pc, #76]	; (85b58 <udd_ctrl_out_received+0x1a4>)
   85b0c:	2200      	movs	r2, #0
   85b0e:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   85b10:	4b0f      	ldr	r3, [pc, #60]	; (85b50 <udd_ctrl_out_received+0x19c>)
   85b12:	f44f 7200 	mov.w	r2, #512	; 0x200
   85b16:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   85b1a:	4b0d      	ldr	r3, [pc, #52]	; (85b50 <udd_ctrl_out_received+0x19c>)
   85b1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85b20:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   85b24:	4b10      	ldr	r3, [pc, #64]	; (85b68 <udd_ctrl_out_received+0x1b4>)
   85b26:	4798      	blx	r3
   85b28:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   85b2a:	4b09      	ldr	r3, [pc, #36]	; (85b50 <udd_ctrl_out_received+0x19c>)
   85b2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85b30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85b34:	6838      	ldr	r0, [r7, #0]
   85b36:	4b0d      	ldr	r3, [pc, #52]	; (85b6c <udd_ctrl_out_received+0x1b8>)
   85b38:	4798      	blx	r3
}
   85b3a:	3710      	adds	r7, #16
   85b3c:	46bd      	mov	sp, r7
   85b3e:	bd80      	pop	{r7, pc}
   85b40:	20001345 	.word	0x20001345
   85b44:	00085cb5 	.word	0x00085cb5
   85b48:	00085be9 	.word	0x00085be9
   85b4c:	000856b1 	.word	0x000856b1
   85b50:	400a4000 	.word	0x400a4000
   85b54:	20001828 	.word	0x20001828
   85b58:	20001348 	.word	0x20001348
   85b5c:	20180000 	.word	0x20180000
   85b60:	20001346 	.word	0x20001346
   85b64:	00085c0d 	.word	0x00085c0d
   85b68:	00084705 	.word	0x00084705
   85b6c:	00084761 	.word	0x00084761

00085b70 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   85b70:	b580      	push	{r7, lr}
   85b72:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   85b74:	4b0c      	ldr	r3, [pc, #48]	; (85ba8 <udd_ctrl_underflow+0x38>)
   85b76:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85b7e:	2b00      	cmp	r3, #0
   85b80:	d10f      	bne.n	85ba2 <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   85b82:	4b0a      	ldr	r3, [pc, #40]	; (85bac <udd_ctrl_underflow+0x3c>)
   85b84:	781b      	ldrb	r3, [r3, #0]
   85b86:	2b01      	cmp	r3, #1
   85b88:	d102      	bne.n	85b90 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   85b8a:	4b09      	ldr	r3, [pc, #36]	; (85bb0 <udd_ctrl_underflow+0x40>)
   85b8c:	4798      	blx	r3
   85b8e:	e009      	b.n	85ba4 <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   85b90:	4b06      	ldr	r3, [pc, #24]	; (85bac <udd_ctrl_underflow+0x3c>)
   85b92:	781b      	ldrb	r3, [r3, #0]
   85b94:	2b04      	cmp	r3, #4
   85b96:	d105      	bne.n	85ba4 <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   85b98:	4b03      	ldr	r3, [pc, #12]	; (85ba8 <udd_ctrl_underflow+0x38>)
   85b9a:	2220      	movs	r2, #32
   85b9c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85ba0:	e000      	b.n	85ba4 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   85ba2:	bf00      	nop
	}
}
   85ba4:	bd80      	pop	{r7, pc}
   85ba6:	bf00      	nop
   85ba8:	400a4000 	.word	0x400a4000
   85bac:	20001345 	.word	0x20001345
   85bb0:	00085c0d 	.word	0x00085c0d

00085bb4 <udd_ctrl_overflow>:
=======
	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   8503a:	79fb      	ldrb	r3, [r7, #7]
   8503c:	2100      	movs	r1, #0
   8503e:	4618      	mov	r0, r3
   85040:	4b1e      	ldr	r3, [pc, #120]	; (850bc <udc_iface_disable+0x8c>)
   85042:	4798      	blx	r3
   85044:	4603      	mov	r3, r0
   85046:	f083 0301 	eor.w	r3, r3, #1
   8504a:	b2db      	uxtb	r3, r3
   8504c:	2b00      	cmp	r3, #0
   8504e:	d001      	beq.n	85054 <udc_iface_disable+0x24>
		return false;
   85050:	2300      	movs	r3, #0
   85052:	e02f      	b.n	850b4 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   85054:	4b1a      	ldr	r3, [pc, #104]	; (850c0 <udc_iface_disable+0x90>)
   85056:	681b      	ldr	r3, [r3, #0]
   85058:	685a      	ldr	r2, [r3, #4]
   8505a:	79fb      	ldrb	r3, [r7, #7]
   8505c:	009b      	lsls	r3, r3, #2
   8505e:	4413      	add	r3, r2
   85060:	681b      	ldr	r3, [r3, #0]
   85062:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   85064:	68bb      	ldr	r3, [r7, #8]
   85066:	68db      	ldr	r3, [r3, #12]
   85068:	4798      	blx	r3
   8506a:	4603      	mov	r3, r0
   8506c:	461a      	mov	r2, r3
   8506e:	79fb      	ldrb	r3, [r7, #7]
   85070:	4611      	mov	r1, r2
   85072:	4618      	mov	r0, r3
   85074:	4b11      	ldr	r3, [pc, #68]	; (850bc <udc_iface_disable+0x8c>)
   85076:	4798      	blx	r3
   85078:	4603      	mov	r3, r0
   8507a:	f083 0301 	eor.w	r3, r3, #1
   8507e:	b2db      	uxtb	r3, r3
   85080:	2b00      	cmp	r3, #0
   85082:	d001      	beq.n	85088 <udc_iface_disable+0x58>
		return false;
   85084:	2300      	movs	r3, #0
   85086:	e015      	b.n	850b4 <udc_iface_disable+0x84>
	}
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   85088:	4b0e      	ldr	r3, [pc, #56]	; (850c4 <udc_iface_disable+0x94>)
   8508a:	681b      	ldr	r3, [r3, #0]
   8508c:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   8508e:	2105      	movs	r1, #5
   85090:	68f8      	ldr	r0, [r7, #12]
   85092:	4b0d      	ldr	r3, [pc, #52]	; (850c8 <udc_iface_disable+0x98>)
   85094:	4798      	blx	r3
   85096:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   85098:	68fb      	ldr	r3, [r7, #12]
   8509a:	2b00      	cmp	r3, #0
   8509c:	d005      	beq.n	850aa <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   8509e:	68fb      	ldr	r3, [r7, #12]
   850a0:	789b      	ldrb	r3, [r3, #2]
   850a2:	4618      	mov	r0, r3
   850a4:	4b09      	ldr	r3, [pc, #36]	; (850cc <udc_iface_disable+0x9c>)
   850a6:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   850a8:	e7f1      	b.n	8508e <udc_iface_disable+0x5e>
				break;
   850aa:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   850ac:	68bb      	ldr	r3, [r7, #8]
   850ae:	685b      	ldr	r3, [r3, #4]
   850b0:	4798      	blx	r3
	return true;
   850b2:	2301      	movs	r3, #1
}
   850b4:	4618      	mov	r0, r3
   850b6:	3710      	adds	r7, #16
   850b8:	46bd      	mov	sp, r7
   850ba:	bd80      	pop	{r7, pc}
   850bc:	00084f95 	.word	0x00084f95
   850c0:	20001360 	.word	0x20001360
   850c4:	20001364 	.word	0x20001364
   850c8:	00084f39 	.word	0x00084f39
   850cc:	00082bc9 	.word	0x00082bc9

000850d0 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
<<<<<<< HEAD
   85bb4:	b480      	push	{r7}
   85bb6:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   85bb8:	4b09      	ldr	r3, [pc, #36]	; (85be0 <udd_ctrl_overflow+0x2c>)
   85bba:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85bc2:	2b00      	cmp	r3, #0
   85bc4:	d108      	bne.n	85bd8 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received
=======
   850d0:	b580      	push	{r7, lr}
   850d2:	b084      	sub	sp, #16
   850d4:	af00      	add	r7, sp, #0
   850d6:	4603      	mov	r3, r0
   850d8:	460a      	mov	r2, r1
   850da:	71fb      	strb	r3, [r7, #7]
   850dc:	4613      	mov	r3, r2
   850de:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   850e0:	79ba      	ldrb	r2, [r7, #6]
   850e2:	79fb      	ldrb	r3, [r7, #7]
   850e4:	4611      	mov	r1, r2
   850e6:	4618      	mov	r0, r3
   850e8:	4b1a      	ldr	r3, [pc, #104]	; (85154 <udc_iface_enable+0x84>)
   850ea:	4798      	blx	r3
   850ec:	4603      	mov	r3, r0
   850ee:	f083 0301 	eor.w	r3, r3, #1
   850f2:	b2db      	uxtb	r3, r3
   850f4:	2b00      	cmp	r3, #0
   850f6:	d001      	beq.n	850fc <udc_iface_enable+0x2c>
		return false;
   850f8:	2300      	movs	r3, #0
   850fa:	e027      	b.n	8514c <udc_iface_enable+0x7c>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

<<<<<<< HEAD
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85bc6:	4b07      	ldr	r3, [pc, #28]	; (85be4 <udd_ctrl_overflow+0x30>)
   85bc8:	781b      	ldrb	r3, [r3, #0]
   85bca:	2b03      	cmp	r3, #3
   85bcc:	d105      	bne.n	85bda <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   85bce:	4b04      	ldr	r3, [pc, #16]	; (85be0 <udd_ctrl_overflow+0x2c>)
   85bd0:	2220      	movs	r2, #32
   85bd2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85bd6:	e000      	b.n	85bda <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   85bd8:	bf00      	nop
=======
	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   850fc:	4b16      	ldr	r3, [pc, #88]	; (85158 <udc_iface_enable+0x88>)
   850fe:	681b      	ldr	r3, [r3, #0]
   85100:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   85102:	2105      	movs	r1, #5
   85104:	68f8      	ldr	r0, [r7, #12]
   85106:	4b15      	ldr	r3, [pc, #84]	; (8515c <udc_iface_enable+0x8c>)
   85108:	4798      	blx	r3
   8510a:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   8510c:	68fb      	ldr	r3, [r7, #12]
   8510e:	2b00      	cmp	r3, #0
   85110:	d011      	beq.n	85136 <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   85112:	68fb      	ldr	r3, [r7, #12]
   85114:	7898      	ldrb	r0, [r3, #2]
   85116:	68fb      	ldr	r3, [r7, #12]
   85118:	78d9      	ldrb	r1, [r3, #3]
   8511a:	68fb      	ldr	r3, [r7, #12]
   8511c:	889b      	ldrh	r3, [r3, #4]
   8511e:	b29b      	uxth	r3, r3
   85120:	461a      	mov	r2, r3
   85122:	4b0f      	ldr	r3, [pc, #60]	; (85160 <udc_iface_enable+0x90>)
   85124:	4798      	blx	r3
   85126:	4603      	mov	r3, r0
   85128:	f083 0301 	eor.w	r3, r3, #1
   8512c:	b2db      	uxtb	r3, r3
   8512e:	2b00      	cmp	r3, #0
   85130:	d0e7      	beq.n	85102 <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   85132:	2300      	movs	r3, #0
   85134:	e00a      	b.n	8514c <udc_iface_enable+0x7c>
			break;
   85136:	bf00      	nop
		}
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   85138:	4b0a      	ldr	r3, [pc, #40]	; (85164 <udc_iface_enable+0x94>)
   8513a:	681b      	ldr	r3, [r3, #0]
   8513c:	685a      	ldr	r2, [r3, #4]
   8513e:	79fb      	ldrb	r3, [r7, #7]
   85140:	009b      	lsls	r3, r3, #2
   85142:	4413      	add	r3, r2
   85144:	681b      	ldr	r3, [r3, #0]
   85146:	681b      	ldr	r3, [r3, #0]
   85148:	4798      	blx	r3
   8514a:	4603      	mov	r3, r0
}
<<<<<<< HEAD
   85bda:	46bd      	mov	sp, r7
   85bdc:	bc80      	pop	{r7}
   85bde:	4770      	bx	lr
   85be0:	400a4000 	.word	0x400a4000
   85be4:	20001345 	.word	0x20001345

00085be8 <udd_ctrl_stall_data>:
=======
   8514c:	4618      	mov	r0, r3
   8514e:	3710      	adds	r7, #16
   85150:	46bd      	mov	sp, r7
   85152:	bd80      	pop	{r7, pc}
   85154:	00084f95 	.word	0x00084f95
   85158:	20001364 	.word	0x20001364
   8515c:	00084f39 	.word	0x00084f39
   85160:	00082811 	.word	0x00082811
   85164:	20001360 	.word	0x20001360
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

00085168 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
<<<<<<< HEAD
   85be8:	b480      	push	{r7}
   85bea:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85bec:	4b05      	ldr	r3, [pc, #20]	; (85c04 <udd_ctrl_stall_data+0x1c>)
   85bee:	2205      	movs	r2, #5
   85bf0:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   85bf2:	4b05      	ldr	r3, [pc, #20]	; (85c08 <udd_ctrl_stall_data+0x20>)
   85bf4:	2220      	movs	r2, #32
   85bf6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   85bfa:	bf00      	nop
   85bfc:	46bd      	mov	sp, r7
   85bfe:	bc80      	pop	{r7}
   85c00:	4770      	bx	lr
   85c02:	bf00      	nop
   85c04:	20001345 	.word	0x20001345
   85c08:	400a4000 	.word	0x400a4000

00085c0c <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   85c0c:	b580      	push	{r7, lr}
   85c0e:	b082      	sub	sp, #8
   85c10:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   85c12:	4b13      	ldr	r3, [pc, #76]	; (85c60 <udd_ctrl_send_zlp_in+0x54>)
   85c14:	2203      	movs	r2, #3
   85c16:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   85c18:	4b12      	ldr	r3, [pc, #72]	; (85c64 <udd_ctrl_send_zlp_in+0x58>)
   85c1a:	4798      	blx	r3
   85c1c:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   85c1e:	4b12      	ldr	r3, [pc, #72]	; (85c68 <udd_ctrl_send_zlp_in+0x5c>)
   85c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85c24:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85c28:	4b0f      	ldr	r3, [pc, #60]	; (85c68 <udd_ctrl_send_zlp_in+0x5c>)
   85c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85c2e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85c32:	4b0d      	ldr	r3, [pc, #52]	; (85c68 <udd_ctrl_send_zlp_in+0x5c>)
   85c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85c38:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   85c3c:	4b0a      	ldr	r3, [pc, #40]	; (85c68 <udd_ctrl_send_zlp_in+0x5c>)
   85c3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85c42:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   85c46:	4b08      	ldr	r3, [pc, #32]	; (85c68 <udd_ctrl_send_zlp_in+0x5c>)
   85c48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85c4c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85c50:	6878      	ldr	r0, [r7, #4]
   85c52:	4b06      	ldr	r3, [pc, #24]	; (85c6c <udd_ctrl_send_zlp_in+0x60>)
   85c54:	4798      	blx	r3
}
   85c56:	bf00      	nop
   85c58:	3708      	adds	r7, #8
   85c5a:	46bd      	mov	sp, r7
   85c5c:	bd80      	pop	{r7, pc}
   85c5e:	bf00      	nop
   85c60:	20001345 	.word	0x20001345
   85c64:	00084705 	.word	0x00084705
   85c68:	400a4000 	.word	0x400a4000
   85c6c:	00084761 	.word	0x00084761

00085c70 <udd_ctrl_send_zlp_out>:
=======
   85168:	b580      	push	{r7, lr}
   8516a:	af00      	add	r7, sp, #0
	udd_enable();
   8516c:	4b01      	ldr	r3, [pc, #4]	; (85174 <udc_start+0xc>)
   8516e:	4798      	blx	r3
}
   85170:	bf00      	nop
   85172:	bd80      	pop	{r7, pc}
   85174:	000825cd 	.word	0x000825cd

00085178 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   85178:	b580      	push	{r7, lr}
   8517a:	b082      	sub	sp, #8
   8517c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   8517e:	4b0f      	ldr	r3, [pc, #60]	; (851bc <udc_reset+0x44>)
   85180:	781b      	ldrb	r3, [r3, #0]
   85182:	2b00      	cmp	r3, #0
   85184:	d010      	beq.n	851a8 <udc_reset+0x30>
		for (iface_num = 0;
   85186:	2300      	movs	r3, #0
   85188:	71fb      	strb	r3, [r7, #7]
   8518a:	e006      	b.n	8519a <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   8518c:	79fb      	ldrb	r3, [r7, #7]
   8518e:	4618      	mov	r0, r3
   85190:	4b0b      	ldr	r3, [pc, #44]	; (851c0 <udc_reset+0x48>)
   85192:	4798      	blx	r3
				iface_num++) {
   85194:	79fb      	ldrb	r3, [r7, #7]
   85196:	3301      	adds	r3, #1
   85198:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8519a:	4b0a      	ldr	r3, [pc, #40]	; (851c4 <udc_reset+0x4c>)
   8519c:	681b      	ldr	r3, [r3, #0]
   8519e:	681b      	ldr	r3, [r3, #0]
   851a0:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   851a2:	79fa      	ldrb	r2, [r7, #7]
   851a4:	429a      	cmp	r2, r3
   851a6:	d3f1      	bcc.n	8518c <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   851a8:	4b04      	ldr	r3, [pc, #16]	; (851bc <udc_reset+0x44>)
   851aa:	2200      	movs	r2, #0
   851ac:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   851ae:	4b06      	ldr	r3, [pc, #24]	; (851c8 <udc_reset+0x50>)
   851b0:	2200      	movs	r2, #0
   851b2:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   851b4:	bf00      	nop
   851b6:	3708      	adds	r7, #8
   851b8:	46bd      	mov	sp, r7
   851ba:	bd80      	pop	{r7, pc}
   851bc:	2000135c 	.word	0x2000135c
   851c0:	00085031 	.word	0x00085031
   851c4:	20001360 	.word	0x20001360
   851c8:	2000135a 	.word	0x2000135a
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

000851cc <udc_sof_notify>:

void udc_sof_notify(void)
{
<<<<<<< HEAD
   85c70:	b580      	push	{r7, lr}
   85c72:	b082      	sub	sp, #8
   85c74:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85c76:	4b0b      	ldr	r3, [pc, #44]	; (85ca4 <udd_ctrl_send_zlp_out+0x34>)
   85c78:	2204      	movs	r2, #4
   85c7a:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   85c7c:	4b0a      	ldr	r3, [pc, #40]	; (85ca8 <udd_ctrl_send_zlp_out+0x38>)
   85c7e:	4798      	blx	r3
   85c80:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   85c82:	4b0a      	ldr	r3, [pc, #40]	; (85cac <udd_ctrl_send_zlp_out+0x3c>)
   85c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85c88:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   85c8c:	4b07      	ldr	r3, [pc, #28]	; (85cac <udd_ctrl_send_zlp_out+0x3c>)
   85c8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85c92:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85c96:	6878      	ldr	r0, [r7, #4]
   85c98:	4b05      	ldr	r3, [pc, #20]	; (85cb0 <udd_ctrl_send_zlp_out+0x40>)
   85c9a:	4798      	blx	r3
}
   85c9c:	bf00      	nop
   85c9e:	3708      	adds	r7, #8
   85ca0:	46bd      	mov	sp, r7
   85ca2:	bd80      	pop	{r7, pc}
   85ca4:	20001345 	.word	0x20001345
   85ca8:	00084705 	.word	0x00084705
   85cac:	400a4000 	.word	0x400a4000
   85cb0:	00084761 	.word	0x00084761

00085cb4 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   85cb4:	b580      	push	{r7, lr}
   85cb6:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   85cb8:	4b04      	ldr	r3, [pc, #16]	; (85ccc <udd_ctrl_endofrequest+0x18>)
   85cba:	691b      	ldr	r3, [r3, #16]
   85cbc:	2b00      	cmp	r3, #0
   85cbe:	d002      	beq.n	85cc6 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   85cc0:	4b02      	ldr	r3, [pc, #8]	; (85ccc <udd_ctrl_endofrequest+0x18>)
   85cc2:	691b      	ldr	r3, [r3, #16]
   85cc4:	4798      	blx	r3
	}
}
   85cc6:	bf00      	nop
   85cc8:	bd80      	pop	{r7, pc}
   85cca:	bf00      	nop
   85ccc:	20001828 	.word	0x20001828

00085cd0 <udd_ctrl_interrupt>:
=======
   851cc:	b580      	push	{r7, lr}
   851ce:	b082      	sub	sp, #8
   851d0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   851d2:	4b14      	ldr	r3, [pc, #80]	; (85224 <udc_sof_notify+0x58>)
   851d4:	781b      	ldrb	r3, [r3, #0]
   851d6:	2b00      	cmp	r3, #0
   851d8:	d01f      	beq.n	8521a <udc_sof_notify+0x4e>
		for (iface_num = 0;
   851da:	2300      	movs	r3, #0
   851dc:	71fb      	strb	r3, [r7, #7]
   851de:	e015      	b.n	8520c <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   851e0:	4b11      	ldr	r3, [pc, #68]	; (85228 <udc_sof_notify+0x5c>)
   851e2:	681b      	ldr	r3, [r3, #0]
   851e4:	685a      	ldr	r2, [r3, #4]
   851e6:	79fb      	ldrb	r3, [r7, #7]
   851e8:	009b      	lsls	r3, r3, #2
   851ea:	4413      	add	r3, r2
   851ec:	681b      	ldr	r3, [r3, #0]
   851ee:	691b      	ldr	r3, [r3, #16]
   851f0:	2b00      	cmp	r3, #0
   851f2:	d008      	beq.n	85206 <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   851f4:	4b0c      	ldr	r3, [pc, #48]	; (85228 <udc_sof_notify+0x5c>)
   851f6:	681b      	ldr	r3, [r3, #0]
   851f8:	685a      	ldr	r2, [r3, #4]
   851fa:	79fb      	ldrb	r3, [r7, #7]
   851fc:	009b      	lsls	r3, r3, #2
   851fe:	4413      	add	r3, r2
   85200:	681b      	ldr	r3, [r3, #0]
   85202:	691b      	ldr	r3, [r3, #16]
   85204:	4798      	blx	r3
				iface_num++) {
   85206:	79fb      	ldrb	r3, [r7, #7]
   85208:	3301      	adds	r3, #1
   8520a:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8520c:	4b06      	ldr	r3, [pc, #24]	; (85228 <udc_sof_notify+0x5c>)
   8520e:	681b      	ldr	r3, [r3, #0]
   85210:	681b      	ldr	r3, [r3, #0]
   85212:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   85214:	79fa      	ldrb	r2, [r7, #7]
   85216:	429a      	cmp	r2, r3
   85218:	d3e2      	bcc.n	851e0 <udc_sof_notify+0x14>
			}
		}
	}
}
   8521a:	bf00      	nop
   8521c:	3708      	adds	r7, #8
   8521e:	46bd      	mov	sp, r7
   85220:	bd80      	pop	{r7, pc}
   85222:	bf00      	nop
   85224:	2000135c 	.word	0x2000135c
   85228:	20001360 	.word	0x20001360

0008522c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   8522c:	b580      	push	{r7, lr}
   8522e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   85230:	4b06      	ldr	r3, [pc, #24]	; (8524c <udc_req_std_dev_get_status+0x20>)
   85232:	88db      	ldrh	r3, [r3, #6]
   85234:	2b02      	cmp	r3, #2
   85236:	d001      	beq.n	8523c <udc_req_std_dev_get_status+0x10>
		return false;
   85238:	2300      	movs	r3, #0
   8523a:	e004      	b.n	85246 <udc_req_std_dev_get_status+0x1a>
	}
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8523c:	2102      	movs	r1, #2
   8523e:	4804      	ldr	r0, [pc, #16]	; (85250 <udc_req_std_dev_get_status+0x24>)
   85240:	4b04      	ldr	r3, [pc, #16]	; (85254 <udc_req_std_dev_get_status+0x28>)
   85242:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   85244:	2301      	movs	r3, #1
}
   85246:	4618      	mov	r0, r3
   85248:	bd80      	pop	{r7, pc}
   8524a:	bf00      	nop
   8524c:	20001810 	.word	0x20001810
   85250:	2000135a 	.word	0x2000135a
   85254:	000827e9 	.word	0x000827e9

00085258 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
<<<<<<< HEAD
   85cd0:	b580      	push	{r7, lr}
   85cd2:	b082      	sub	sp, #8
   85cd4:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   85cd6:	4b31      	ldr	r3, [pc, #196]	; (85d9c <udd_ctrl_interrupt+0xcc>)
   85cd8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85cdc:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   85cde:	4b2f      	ldr	r3, [pc, #188]	; (85d9c <udd_ctrl_interrupt+0xcc>)
   85ce0:	695b      	ldr	r3, [r3, #20]
   85ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
   85ce6:	2b00      	cmp	r3, #0
   85ce8:	d101      	bne.n	85cee <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   85cea:	2300      	movs	r3, #0
   85cec:	e052      	b.n	85d94 <udd_ctrl_interrupt+0xc4>
=======
   85258:	b580      	push	{r7, lr}
   8525a:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   8525c:	4b0b      	ldr	r3, [pc, #44]	; (8528c <udc_req_std_ep_get_status+0x34>)
   8525e:	88db      	ldrh	r3, [r3, #6]
   85260:	2b02      	cmp	r3, #2
   85262:	d001      	beq.n	85268 <udc_req_std_ep_get_status+0x10>
		return false;
   85264:	2300      	movs	r3, #0
   85266:	e00e      	b.n	85286 <udc_req_std_ep_get_status+0x2e>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}

<<<<<<< HEAD
	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   85cee:	4b2b      	ldr	r3, [pc, #172]	; (85d9c <udd_ctrl_interrupt+0xcc>)
   85cf0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85cf4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   85cf8:	4b28      	ldr	r3, [pc, #160]	; (85d9c <udd_ctrl_interrupt+0xcc>)
   85cfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85cfe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   85d02:	687b      	ldr	r3, [r7, #4]
   85d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   85d08:	2b00      	cmp	r3, #0
   85d0a:	d003      	beq.n	85d14 <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   85d0c:	4b24      	ldr	r3, [pc, #144]	; (85da0 <udd_ctrl_interrupt+0xd0>)
   85d0e:	4798      	blx	r3
		return true;
   85d10:	2301      	movs	r3, #1
   85d12:	e03f      	b.n	85d94 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   85d14:	687b      	ldr	r3, [r7, #4]
   85d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85d1a:	2b00      	cmp	r3, #0
   85d1c:	d00a      	beq.n	85d34 <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   85d1e:	4b1f      	ldr	r3, [pc, #124]	; (85d9c <udd_ctrl_interrupt+0xcc>)
   85d20:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   85d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85d28:	2b00      	cmp	r3, #0
   85d2a:	d003      	beq.n	85d34 <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   85d2c:	4b1d      	ldr	r3, [pc, #116]	; (85da4 <udd_ctrl_interrupt+0xd4>)
   85d2e:	4798      	blx	r3
		return true;
   85d30:	2301      	movs	r3, #1
   85d32:	e02f      	b.n	85d94 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   85d34:	687b      	ldr	r3, [r7, #4]
   85d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85d3a:	2b00      	cmp	r3, #0
   85d3c:	d003      	beq.n	85d46 <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   85d3e:	4b1a      	ldr	r3, [pc, #104]	; (85da8 <udd_ctrl_interrupt+0xd8>)
   85d40:	4798      	blx	r3
		return true;
   85d42:	2301      	movs	r3, #1
   85d44:	e026      	b.n	85d94 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   85d46:	687b      	ldr	r3, [r7, #4]
   85d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   85d4c:	2b00      	cmp	r3, #0
   85d4e:	d004      	beq.n	85d5a <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   85d50:	4b12      	ldr	r3, [pc, #72]	; (85d9c <udd_ctrl_interrupt+0xcc>)
   85d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   85d56:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   85d5a:	687b      	ldr	r3, [r7, #4]
   85d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   85d60:	2b00      	cmp	r3, #0
   85d62:	d008      	beq.n	85d76 <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   85d64:	4b0d      	ldr	r3, [pc, #52]	; (85d9c <udd_ctrl_interrupt+0xcc>)
   85d66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85d6a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   85d6e:	4b0f      	ldr	r3, [pc, #60]	; (85dac <udd_ctrl_interrupt+0xdc>)
   85d70:	4798      	blx	r3
		return true;
   85d72:	2301      	movs	r3, #1
   85d74:	e00e      	b.n	85d94 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   85d76:	687b      	ldr	r3, [r7, #4]
   85d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   85d7c:	2b00      	cmp	r3, #0
   85d7e:	d008      	beq.n	85d92 <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   85d80:	4b06      	ldr	r3, [pc, #24]	; (85d9c <udd_ctrl_interrupt+0xcc>)
   85d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85d86:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   85d8a:	4b09      	ldr	r3, [pc, #36]	; (85db0 <udd_ctrl_interrupt+0xe0>)
   85d8c:	4798      	blx	r3
		return true;
   85d8e:	2301      	movs	r3, #1
   85d90:	e000      	b.n	85d94 <udd_ctrl_interrupt+0xc4>
=======
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   85268:	4b08      	ldr	r3, [pc, #32]	; (8528c <udc_req_std_ep_get_status+0x34>)
   8526a:	889b      	ldrh	r3, [r3, #4]
   8526c:	b2db      	uxtb	r3, r3
   8526e:	4618      	mov	r0, r3
   85270:	4b07      	ldr	r3, [pc, #28]	; (85290 <udc_req_std_ep_get_status+0x38>)
   85272:	4798      	blx	r3
   85274:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   85276:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   85278:	4b06      	ldr	r3, [pc, #24]	; (85294 <udc_req_std_ep_get_status+0x3c>)
   8527a:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   8527c:	2102      	movs	r1, #2
   8527e:	4805      	ldr	r0, [pc, #20]	; (85294 <udc_req_std_ep_get_status+0x3c>)
   85280:	4b05      	ldr	r3, [pc, #20]	; (85298 <udc_req_std_ep_get_status+0x40>)
   85282:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   85284:	2301      	movs	r3, #1
}
   85286:	4618      	mov	r0, r3
   85288:	bd80      	pop	{r7, pc}
   8528a:	bf00      	nop
   8528c:	20001810 	.word	0x20001810
   85290:	00082c49 	.word	0x00082c49
   85294:	20001368 	.word	0x20001368
   85298:	000827e9 	.word	0x000827e9

0008529c <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   8529c:	b480      	push	{r7}
   8529e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   852a0:	4b0b      	ldr	r3, [pc, #44]	; (852d0 <udc_req_std_dev_clear_feature+0x34>)
   852a2:	88db      	ldrh	r3, [r3, #6]
   852a4:	2b00      	cmp	r3, #0
   852a6:	d001      	beq.n	852ac <udc_req_std_dev_clear_feature+0x10>
		return false;
   852a8:	2300      	movs	r3, #0
   852aa:	e00d      	b.n	852c8 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   852ac:	4b08      	ldr	r3, [pc, #32]	; (852d0 <udc_req_std_dev_clear_feature+0x34>)
   852ae:	885b      	ldrh	r3, [r3, #2]
   852b0:	2b01      	cmp	r3, #1
   852b2:	d108      	bne.n	852c6 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   852b4:	4b07      	ldr	r3, [pc, #28]	; (852d4 <udc_req_std_dev_clear_feature+0x38>)
   852b6:	881b      	ldrh	r3, [r3, #0]
   852b8:	f023 0302 	bic.w	r3, r3, #2
   852bc:	b29a      	uxth	r2, r3
   852be:	4b05      	ldr	r3, [pc, #20]	; (852d4 <udc_req_std_dev_clear_feature+0x38>)
   852c0:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   852c2:	2301      	movs	r3, #1
   852c4:	e000      	b.n	852c8 <udc_req_std_dev_clear_feature+0x2c>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
	return false;
<<<<<<< HEAD
   85d92:	2300      	movs	r3, #0
}
   85d94:	4618      	mov	r0, r3
   85d96:	3708      	adds	r7, #8
   85d98:	46bd      	mov	sp, r7
   85d9a:	bd80      	pop	{r7, pc}
   85d9c:	400a4000 	.word	0x400a4000
   85da0:	0008570d 	.word	0x0008570d
   85da4:	0008584d 	.word	0x0008584d
   85da8:	000859b5 	.word	0x000859b5
   85dac:	00085bb5 	.word	0x00085bb5
   85db0:	00085b71 	.word	0x00085b71

00085db4 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   85db4:	b480      	push	{r7}
   85db6:	b083      	sub	sp, #12
   85db8:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85dba:	2300      	movs	r3, #0
   85dbc:	71fb      	strb	r3, [r7, #7]
   85dbe:	e01c      	b.n	85dfa <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   85dc0:	79fa      	ldrb	r2, [r7, #7]
   85dc2:	4912      	ldr	r1, [pc, #72]	; (85e0c <udd_ep_job_table_reset+0x58>)
   85dc4:	4613      	mov	r3, r2
   85dc6:	005b      	lsls	r3, r3, #1
   85dc8:	4413      	add	r3, r2
   85dca:	00db      	lsls	r3, r3, #3
   85dcc:	440b      	add	r3, r1
   85dce:	f103 0210 	add.w	r2, r3, #16
   85dd2:	7913      	ldrb	r3, [r2, #4]
   85dd4:	f36f 0300 	bfc	r3, #0, #1
   85dd8:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   85dda:	79fa      	ldrb	r2, [r7, #7]
   85ddc:	490b      	ldr	r1, [pc, #44]	; (85e0c <udd_ep_job_table_reset+0x58>)
   85dde:	4613      	mov	r3, r2
   85de0:	005b      	lsls	r3, r3, #1
   85de2:	4413      	add	r3, r2
   85de4:	00db      	lsls	r3, r3, #3
   85de6:	440b      	add	r3, r1
   85de8:	f103 0210 	add.w	r2, r3, #16
   85dec:	7913      	ldrb	r3, [r2, #4]
   85dee:	f36f 0382 	bfc	r3, #2, #1
   85df2:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85df4:	79fb      	ldrb	r3, [r7, #7]
   85df6:	3301      	adds	r3, #1
   85df8:	71fb      	strb	r3, [r7, #7]
   85dfa:	79fb      	ldrb	r3, [r7, #7]
   85dfc:	2b01      	cmp	r3, #1
   85dfe:	d9df      	bls.n	85dc0 <udd_ep_job_table_reset+0xc>
	}
}
   85e00:	bf00      	nop
   85e02:	bf00      	nop
   85e04:	370c      	adds	r7, #12
   85e06:	46bd      	mov	sp, r7
   85e08:	bc80      	pop	{r7}
   85e0a:	4770      	bx	lr
   85e0c:	2000134c 	.word	0x2000134c

00085e10 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   85e10:	b580      	push	{r7, lr}
   85e12:	b082      	sub	sp, #8
   85e14:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85e16:	2300      	movs	r3, #0
   85e18:	71fb      	strb	r3, [r7, #7]
   85e1a:	e010      	b.n	85e3e <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   85e1c:	79fa      	ldrb	r2, [r7, #7]
   85e1e:	4613      	mov	r3, r2
   85e20:	005b      	lsls	r3, r3, #1
   85e22:	4413      	add	r3, r2
   85e24:	00db      	lsls	r3, r3, #3
   85e26:	4a0a      	ldr	r2, [pc, #40]	; (85e50 <udd_ep_job_table_kill+0x40>)
   85e28:	1898      	adds	r0, r3, r2
   85e2a:	79fb      	ldrb	r3, [r7, #7]
   85e2c:	3301      	adds	r3, #1
   85e2e:	b2db      	uxtb	r3, r3
   85e30:	461a      	mov	r2, r3
   85e32:	2101      	movs	r1, #1
   85e34:	4b07      	ldr	r3, [pc, #28]	; (85e54 <udd_ep_job_table_kill+0x44>)
   85e36:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85e38:	79fb      	ldrb	r3, [r7, #7]
   85e3a:	3301      	adds	r3, #1
   85e3c:	71fb      	strb	r3, [r7, #7]
   85e3e:	79fb      	ldrb	r3, [r7, #7]
   85e40:	2b01      	cmp	r3, #1
   85e42:	d9eb      	bls.n	85e1c <udd_ep_job_table_kill+0xc>
=======
   852c6:	2300      	movs	r3, #0
}
   852c8:	4618      	mov	r0, r3
   852ca:	46bd      	mov	sp, r7
   852cc:	bc80      	pop	{r7}
   852ce:	4770      	bx	lr
   852d0:	20001810 	.word	0x20001810
   852d4:	2000135a 	.word	0x2000135a

000852d8 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   852d8:	b580      	push	{r7, lr}
   852da:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   852dc:	4b0a      	ldr	r3, [pc, #40]	; (85308 <udc_req_std_ep_clear_feature+0x30>)
   852de:	88db      	ldrh	r3, [r3, #6]
   852e0:	2b00      	cmp	r3, #0
   852e2:	d001      	beq.n	852e8 <udc_req_std_ep_clear_feature+0x10>
		return false;
   852e4:	2300      	movs	r3, #0
   852e6:	e00c      	b.n	85302 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   852e8:	4b07      	ldr	r3, [pc, #28]	; (85308 <udc_req_std_ep_clear_feature+0x30>)
   852ea:	885b      	ldrh	r3, [r3, #2]
   852ec:	2b00      	cmp	r3, #0
   852ee:	d107      	bne.n	85300 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   852f0:	4b05      	ldr	r3, [pc, #20]	; (85308 <udc_req_std_ep_clear_feature+0x30>)
   852f2:	889b      	ldrh	r3, [r3, #4]
   852f4:	b2db      	uxtb	r3, r3
   852f6:	4618      	mov	r0, r3
   852f8:	4b04      	ldr	r3, [pc, #16]	; (8530c <udc_req_std_ep_clear_feature+0x34>)
   852fa:	4798      	blx	r3
   852fc:	4603      	mov	r3, r0
   852fe:	e000      	b.n	85302 <udc_req_std_ep_clear_feature+0x2a>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
	return false;
   85300:	2300      	movs	r3, #0
}
<<<<<<< HEAD
   85e44:	bf00      	nop
   85e46:	bf00      	nop
   85e48:	3708      	adds	r7, #8
   85e4a:	46bd      	mov	sp, r7
   85e4c:	bd80      	pop	{r7, pc}
   85e4e:	bf00      	nop
   85e50:	2000134c 	.word	0x2000134c
   85e54:	00085e95 	.word	0x00085e95

00085e58 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   85e58:	b580      	push	{r7, lr}
   85e5a:	b082      	sub	sp, #8
   85e5c:	af00      	add	r7, sp, #0
   85e5e:	4603      	mov	r3, r0
   85e60:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   85e62:	79fb      	ldrb	r3, [r7, #7]
   85e64:	f003 030f 	and.w	r3, r3, #15
   85e68:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85e6a:	79fb      	ldrb	r3, [r7, #7]
   85e6c:	1e5a      	subs	r2, r3, #1
   85e6e:	4613      	mov	r3, r2
   85e70:	005b      	lsls	r3, r3, #1
   85e72:	4413      	add	r3, r2
   85e74:	00db      	lsls	r3, r3, #3
   85e76:	4a05      	ldr	r2, [pc, #20]	; (85e8c <udd_ep_abort_job+0x34>)
   85e78:	4413      	add	r3, r2
   85e7a:	79fa      	ldrb	r2, [r7, #7]
   85e7c:	2101      	movs	r1, #1
   85e7e:	4618      	mov	r0, r3
   85e80:	4b03      	ldr	r3, [pc, #12]	; (85e90 <udd_ep_abort_job+0x38>)
   85e82:	4798      	blx	r3
}
   85e84:	bf00      	nop
   85e86:	3708      	adds	r7, #8
   85e88:	46bd      	mov	sp, r7
   85e8a:	bd80      	pop	{r7, pc}
   85e8c:	2000134c 	.word	0x2000134c
   85e90:	00085e95 	.word	0x00085e95

00085e94 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   85e94:	b580      	push	{r7, lr}
   85e96:	b082      	sub	sp, #8
   85e98:	af00      	add	r7, sp, #0
   85e9a:	6078      	str	r0, [r7, #4]
   85e9c:	460b      	mov	r3, r1
   85e9e:	70fb      	strb	r3, [r7, #3]
   85ea0:	4613      	mov	r3, r2
   85ea2:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   85ea4:	687b      	ldr	r3, [r7, #4]
   85ea6:	7d1b      	ldrb	r3, [r3, #20]
   85ea8:	f003 0301 	and.w	r3, r3, #1
   85eac:	b2db      	uxtb	r3, r3
   85eae:	2b00      	cmp	r3, #0
   85eb0:	d01f      	beq.n	85ef2 <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   85eb2:	687a      	ldr	r2, [r7, #4]
   85eb4:	7d13      	ldrb	r3, [r2, #20]
   85eb6:	f36f 0300 	bfc	r3, #0, #1
   85eba:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   85ebc:	687b      	ldr	r3, [r7, #4]
   85ebe:	681b      	ldr	r3, [r3, #0]
   85ec0:	2b00      	cmp	r3, #0
   85ec2:	d018      	beq.n	85ef6 <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   85ec4:	4a0e      	ldr	r2, [pc, #56]	; (85f00 <udd_ep_finish_job+0x6c>)
   85ec6:	78bb      	ldrb	r3, [r7, #2]
   85ec8:	3308      	adds	r3, #8
   85eca:	015b      	lsls	r3, r3, #5
   85ecc:	4413      	add	r3, r2
   85ece:	681b      	ldr	r3, [r3, #0]
   85ed0:	f003 0308 	and.w	r3, r3, #8
   85ed4:	2b00      	cmp	r3, #0
   85ed6:	d003      	beq.n	85ee0 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   85ed8:	78bb      	ldrb	r3, [r7, #2]
   85eda:	f063 037f 	orn	r3, r3, #127	; 0x7f
   85ede:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   85ee0:	687b      	ldr	r3, [r7, #4]
   85ee2:	681b      	ldr	r3, [r3, #0]
   85ee4:	78fa      	ldrb	r2, [r7, #3]
   85ee6:	4610      	mov	r0, r2
   85ee8:	687a      	ldr	r2, [r7, #4]
   85eea:	6891      	ldr	r1, [r2, #8]
   85eec:	78ba      	ldrb	r2, [r7, #2]
   85eee:	4798      	blx	r3
   85ef0:	e002      	b.n	85ef8 <udd_ep_finish_job+0x64>
		return; // No on-going job
   85ef2:	bf00      	nop
   85ef4:	e000      	b.n	85ef8 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   85ef6:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   85ef8:	3708      	adds	r7, #8
   85efa:	46bd      	mov	sp, r7
   85efc:	bd80      	pop	{r7, pc}
   85efe:	bf00      	nop
   85f00:	400a4000 	.word	0x400a4000

00085f04 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   85f04:	b580      	push	{r7, lr}
   85f06:	b086      	sub	sp, #24
   85f08:	af00      	add	r7, sp, #0
   85f0a:	4603      	mov	r3, r0
   85f0c:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   85f0e:	2300      	movs	r3, #0
   85f10:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   85f12:	79fb      	ldrb	r3, [r7, #7]
   85f14:	1e5a      	subs	r2, r3, #1
   85f16:	4613      	mov	r3, r2
   85f18:	005b      	lsls	r3, r3, #1
   85f1a:	4413      	add	r3, r2
   85f1c:	00db      	lsls	r3, r3, #3
   85f1e:	4a6d      	ldr	r2, [pc, #436]	; (860d4 <udd_ep_trans_done+0x1d0>)
   85f20:	4413      	add	r3, r2
   85f22:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   85f24:	68fb      	ldr	r3, [r7, #12]
   85f26:	7d1b      	ldrb	r3, [r3, #20]
   85f28:	f003 0301 	and.w	r3, r3, #1
   85f2c:	b2db      	uxtb	r3, r3
   85f2e:	2b00      	cmp	r3, #0
   85f30:	f000 80cc 	beq.w	860cc <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   85f34:	68fb      	ldr	r3, [r7, #12]
   85f36:	68da      	ldr	r2, [r3, #12]
   85f38:	68fb      	ldr	r3, [r7, #12]
   85f3a:	689b      	ldr	r3, [r3, #8]
   85f3c:	429a      	cmp	r2, r3
   85f3e:	f000 8099 	beq.w	86074 <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   85f42:	68fb      	ldr	r3, [r7, #12]
   85f44:	689a      	ldr	r2, [r3, #8]
   85f46:	68fb      	ldr	r3, [r7, #12]
   85f48:	68db      	ldr	r3, [r3, #12]
   85f4a:	1ad3      	subs	r3, r2, r3
   85f4c:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   85f4e:	693b      	ldr	r3, [r7, #16]
   85f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   85f54:	d905      	bls.n	85f62 <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   85f5a:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   85f5c:	2300      	movs	r3, #0
   85f5e:	617b      	str	r3, [r7, #20]
   85f60:	e002      	b.n	85f68 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   85f62:	693b      	ldr	r3, [r7, #16]
   85f64:	041b      	lsls	r3, r3, #16
   85f66:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   85f68:	4a5b      	ldr	r2, [pc, #364]	; (860d8 <udd_ep_trans_done+0x1d4>)
   85f6a:	79fb      	ldrb	r3, [r7, #7]
   85f6c:	3308      	adds	r3, #8
   85f6e:	015b      	lsls	r3, r3, #5
   85f70:	4413      	add	r3, r2
   85f72:	681b      	ldr	r3, [r3, #0]
   85f74:	f003 0308 	and.w	r3, r3, #8
   85f78:	2b00      	cmp	r3, #0
   85f7a:	d01d      	beq.n	85fb8 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   85f7c:	4a56      	ldr	r2, [pc, #344]	; (860d8 <udd_ep_trans_done+0x1d4>)
   85f7e:	79fb      	ldrb	r3, [r7, #7]
   85f80:	3308      	adds	r3, #8
   85f82:	015b      	lsls	r3, r3, #5
   85f84:	4413      	add	r3, r2
   85f86:	681b      	ldr	r3, [r3, #0]
   85f88:	f003 0307 	and.w	r3, r3, #7
   85f8c:	2208      	movs	r2, #8
   85f8e:	fa02 f303 	lsl.w	r3, r2, r3
   85f92:	461a      	mov	r2, r3
   85f94:	693b      	ldr	r3, [r7, #16]
   85f96:	fbb3 f1f2 	udiv	r1, r3, r2
   85f9a:	fb02 f201 	mul.w	r2, r2, r1
   85f9e:	1a9b      	subs	r3, r3, r2
   85fa0:	2b00      	cmp	r3, #0
   85fa2:	d027      	beq.n	85ff4 <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   85fa4:	697b      	ldr	r3, [r7, #20]
   85fa6:	f043 0308 	orr.w	r3, r3, #8
   85faa:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   85fac:	68fa      	ldr	r2, [r7, #12]
   85fae:	7d13      	ldrb	r3, [r2, #20]
   85fb0:	f36f 0341 	bfc	r3, #1, #1
   85fb4:	7513      	strb	r3, [r2, #20]
   85fb6:	e01d      	b.n	85ff4 <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   85fb8:	4a47      	ldr	r2, [pc, #284]	; (860d8 <udd_ep_trans_done+0x1d4>)
   85fba:	79fb      	ldrb	r3, [r7, #7]
   85fbc:	3308      	adds	r3, #8
   85fbe:	015b      	lsls	r3, r3, #5
   85fc0:	4413      	add	r3, r2
   85fc2:	681b      	ldr	r3, [r3, #0]
   85fc4:	091b      	lsrs	r3, r3, #4
   85fc6:	f003 0303 	and.w	r3, r3, #3
   85fca:	2b01      	cmp	r3, #1
   85fcc:	d10e      	bne.n	85fec <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   85fce:	4a42      	ldr	r2, [pc, #264]	; (860d8 <udd_ep_trans_done+0x1d4>)
   85fd0:	79fb      	ldrb	r3, [r7, #7]
   85fd2:	3308      	adds	r3, #8
   85fd4:	015b      	lsls	r3, r3, #5
   85fd6:	4413      	add	r3, r2
   85fd8:	681b      	ldr	r3, [r3, #0]
   85fda:	f003 0307 	and.w	r3, r3, #7
   85fde:	2208      	movs	r2, #8
   85fe0:	fa02 f303 	lsl.w	r3, r2, r3
   85fe4:	461a      	mov	r2, r3
   85fe6:	693b      	ldr	r3, [r7, #16]
   85fe8:	4293      	cmp	r3, r2
   85fea:	d803      	bhi.n	85ff4 <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   85fec:	697b      	ldr	r3, [r7, #20]
   85fee:	f043 0314 	orr.w	r3, r3, #20
   85ff2:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   85ff4:	68fb      	ldr	r3, [r7, #12]
   85ff6:	685a      	ldr	r2, [r3, #4]
   85ff8:	68fb      	ldr	r3, [r7, #12]
   85ffa:	68db      	ldr	r3, [r3, #12]
   85ffc:	18d1      	adds	r1, r2, r3
   85ffe:	79fb      	ldrb	r3, [r7, #7]
   86000:	011a      	lsls	r2, r3, #4
   86002:	4b36      	ldr	r3, [pc, #216]	; (860dc <udd_ep_trans_done+0x1d8>)
   86004:	4413      	add	r3, r2
   86006:	460a      	mov	r2, r1
   86008:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   8600a:	697b      	ldr	r3, [r7, #20]
   8600c:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   86010:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   86012:	4b33      	ldr	r3, [pc, #204]	; (860e0 <udd_ep_trans_done+0x1dc>)
   86014:	4798      	blx	r3
   86016:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   86018:	79fb      	ldrb	r3, [r7, #7]
   8601a:	011a      	lsls	r2, r3, #4
   8601c:	4b2f      	ldr	r3, [pc, #188]	; (860dc <udd_ep_trans_done+0x1d8>)
   8601e:	4413      	add	r3, r2
   86020:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   86022:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   86026:	2b00      	cmp	r3, #0
   86028:	d11d      	bne.n	86066 <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   8602a:	79fb      	ldrb	r3, [r7, #7]
   8602c:	011a      	lsls	r2, r3, #4
   8602e:	4b2b      	ldr	r3, [pc, #172]	; (860dc <udd_ep_trans_done+0x1d8>)
   86030:	4413      	add	r3, r2
   86032:	697a      	ldr	r2, [r7, #20]
   86034:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   86036:	68fb      	ldr	r3, [r7, #12]
   86038:	68da      	ldr	r2, [r3, #12]
   8603a:	693b      	ldr	r3, [r7, #16]
   8603c:	441a      	add	r2, r3
   8603e:	68fb      	ldr	r3, [r7, #12]
   86040:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   86042:	68fb      	ldr	r3, [r7, #12]
   86044:	693a      	ldr	r2, [r7, #16]
   86046:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   86048:	4b23      	ldr	r3, [pc, #140]	; (860d8 <udd_ep_trans_done+0x1d4>)
   8604a:	691a      	ldr	r2, [r3, #16]
   8604c:	79fb      	ldrb	r3, [r7, #7]
   8604e:	3b01      	subs	r3, #1
   86050:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   86054:	fa01 f303 	lsl.w	r3, r1, r3
   86058:	491f      	ldr	r1, [pc, #124]	; (860d8 <udd_ep_trans_done+0x1d4>)
   8605a:	4313      	orrs	r3, r2
   8605c:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   8605e:	68b8      	ldr	r0, [r7, #8]
   86060:	4b20      	ldr	r3, [pc, #128]	; (860e4 <udd_ep_trans_done+0x1e0>)
   86062:	4798      	blx	r3
			return;
   86064:	e033      	b.n	860ce <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   86066:	68b8      	ldr	r0, [r7, #8]
   86068:	4b1e      	ldr	r3, [pc, #120]	; (860e4 <udd_ep_trans_done+0x1e0>)
   8606a:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   8606c:	68fb      	ldr	r3, [r7, #12]
   8606e:	68da      	ldr	r2, [r3, #12]
   86070:	68fb      	ldr	r3, [r7, #12]
   86072:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   86074:	4a18      	ldr	r2, [pc, #96]	; (860d8 <udd_ep_trans_done+0x1d4>)
   86076:	79fb      	ldrb	r3, [r7, #7]
   86078:	3308      	adds	r3, #8
   8607a:	015b      	lsls	r3, r3, #5
   8607c:	4413      	add	r3, r2
   8607e:	681b      	ldr	r3, [r3, #0]
   86080:	f003 0308 	and.w	r3, r3, #8
   86084:	2b00      	cmp	r3, #0
   86086:	d01a      	beq.n	860be <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   86088:	68fb      	ldr	r3, [r7, #12]
   8608a:	7d1b      	ldrb	r3, [r3, #20]
   8608c:	f003 0302 	and.w	r3, r3, #2
   86090:	b2db      	uxtb	r3, r3
   86092:	2b00      	cmp	r3, #0
   86094:	d013      	beq.n	860be <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   86096:	4a10      	ldr	r2, [pc, #64]	; (860d8 <udd_ep_trans_done+0x1d4>)
   86098:	79fb      	ldrb	r3, [r7, #7]
   8609a:	3308      	adds	r3, #8
   8609c:	015b      	lsls	r3, r3, #5
   8609e:	4413      	add	r3, r2
   860a0:	3304      	adds	r3, #4
   860a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   860a6:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   860a8:	4b0b      	ldr	r3, [pc, #44]	; (860d8 <udd_ep_trans_done+0x1d4>)
   860aa:	691a      	ldr	r2, [r3, #16]
   860ac:	79fb      	ldrb	r3, [r7, #7]
   860ae:	f44f 7180 	mov.w	r1, #256	; 0x100
   860b2:	fa01 f303 	lsl.w	r3, r1, r3
   860b6:	4908      	ldr	r1, [pc, #32]	; (860d8 <udd_ep_trans_done+0x1d4>)
   860b8:	4313      	orrs	r3, r2
   860ba:	610b      	str	r3, [r1, #16]
			return;
   860bc:	e007      	b.n	860ce <udd_ep_trans_done+0x1ca>
=======
   85302:	4618      	mov	r0, r3
   85304:	bd80      	pop	{r7, pc}
   85306:	bf00      	nop
   85308:	20001810 	.word	0x20001810
   8530c:	00082dc5 	.word	0x00082dc5

00085310 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   85310:	b580      	push	{r7, lr}
   85312:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   85314:	4b26      	ldr	r3, [pc, #152]	; (853b0 <udc_req_std_dev_set_feature+0xa0>)
   85316:	88db      	ldrh	r3, [r3, #6]
   85318:	2b00      	cmp	r3, #0
   8531a:	d001      	beq.n	85320 <udc_req_std_dev_set_feature+0x10>
		return false;
   8531c:	2300      	movs	r3, #0
   8531e:	e045      	b.n	853ac <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   85320:	4b23      	ldr	r3, [pc, #140]	; (853b0 <udc_req_std_dev_set_feature+0xa0>)
   85322:	885b      	ldrh	r3, [r3, #2]
   85324:	2b01      	cmp	r3, #1
   85326:	d002      	beq.n	8532e <udc_req_std_dev_set_feature+0x1e>
   85328:	2b02      	cmp	r3, #2
   8532a:	d002      	beq.n	85332 <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   8532c:	e03d      	b.n	853aa <udc_req_std_dev_set_feature+0x9a>
		return false;
   8532e:	2300      	movs	r3, #0
   85330:	e03c      	b.n	853ac <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   85332:	4b20      	ldr	r3, [pc, #128]	; (853b4 <udc_req_std_dev_set_feature+0xa4>)
   85334:	4798      	blx	r3
   85336:	4603      	mov	r3, r0
   85338:	f083 0301 	eor.w	r3, r3, #1
   8533c:	b2db      	uxtb	r3, r3
   8533e:	2b00      	cmp	r3, #0
   85340:	d130      	bne.n	853a4 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   85342:	4b1b      	ldr	r3, [pc, #108]	; (853b0 <udc_req_std_dev_set_feature+0xa0>)
   85344:	889b      	ldrh	r3, [r3, #4]
   85346:	b2db      	uxtb	r3, r3
   85348:	2b00      	cmp	r3, #0
   8534a:	d12d      	bne.n	853a8 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   8534c:	4b1a      	ldr	r3, [pc, #104]	; (853b8 <udc_req_std_dev_set_feature+0xa8>)
   8534e:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   85350:	4b17      	ldr	r3, [pc, #92]	; (853b0 <udc_req_std_dev_set_feature+0xa0>)
   85352:	889b      	ldrh	r3, [r3, #4]
   85354:	0a1b      	lsrs	r3, r3, #8
   85356:	b29b      	uxth	r3, r3
   85358:	b2db      	uxtb	r3, r3
   8535a:	3b01      	subs	r3, #1
   8535c:	2b03      	cmp	r3, #3
   8535e:	d81f      	bhi.n	853a0 <udc_req_std_dev_set_feature+0x90>
   85360:	a201      	add	r2, pc, #4	; (adr r2, 85368 <udc_req_std_dev_set_feature+0x58>)
   85362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85366:	bf00      	nop
   85368:	00085379 	.word	0x00085379
   8536c:	00085383 	.word	0x00085383
   85370:	0008538d 	.word	0x0008538d
   85374:	00085397 	.word	0x00085397
			udd_g_ctrlreq.callback = udd_test_mode_j;
   85378:	4b0d      	ldr	r3, [pc, #52]	; (853b0 <udc_req_std_dev_set_feature+0xa0>)
   8537a:	4a10      	ldr	r2, [pc, #64]	; (853bc <udc_req_std_dev_set_feature+0xac>)
   8537c:	611a      	str	r2, [r3, #16]
			return true;
   8537e:	2301      	movs	r3, #1
   85380:	e014      	b.n	853ac <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   85382:	4b0b      	ldr	r3, [pc, #44]	; (853b0 <udc_req_std_dev_set_feature+0xa0>)
   85384:	4a0e      	ldr	r2, [pc, #56]	; (853c0 <udc_req_std_dev_set_feature+0xb0>)
   85386:	611a      	str	r2, [r3, #16]
			return true;
   85388:	2301      	movs	r3, #1
   8538a:	e00f      	b.n	853ac <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   8538c:	4b08      	ldr	r3, [pc, #32]	; (853b0 <udc_req_std_dev_set_feature+0xa0>)
   8538e:	4a0d      	ldr	r2, [pc, #52]	; (853c4 <udc_req_std_dev_set_feature+0xb4>)
   85390:	611a      	str	r2, [r3, #16]
			return true;
   85392:	2301      	movs	r3, #1
   85394:	e00a      	b.n	853ac <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   85396:	4b06      	ldr	r3, [pc, #24]	; (853b0 <udc_req_std_dev_set_feature+0xa0>)
   85398:	4a0b      	ldr	r2, [pc, #44]	; (853c8 <udc_req_std_dev_set_feature+0xb8>)
   8539a:	611a      	str	r2, [r3, #16]
			return true;
   8539c:	2301      	movs	r3, #1
   8539e:	e005      	b.n	853ac <udc_req_std_dev_set_feature+0x9c>
			break;
   853a0:	bf00      	nop
		break;
   853a2:	e002      	b.n	853aa <udc_req_std_dev_set_feature+0x9a>
			break;
   853a4:	bf00      	nop
   853a6:	e000      	b.n	853aa <udc_req_std_dev_set_feature+0x9a>
			break;
   853a8:	bf00      	nop
	}
	return false;
   853aa:	2300      	movs	r3, #0
}
   853ac:	4618      	mov	r0, r3
   853ae:	bd80      	pop	{r7, pc}
   853b0:	20001810 	.word	0x20001810
   853b4:	00082765 	.word	0x00082765
   853b8:	00085179 	.word	0x00085179
   853bc:	00083085 	.word	0x00083085
   853c0:	000830b9 	.word	0x000830b9
   853c4:	000830ed 	.word	0x000830ed
   853c8:	00083111 	.word	0x00083111

000853cc <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   853cc:	b580      	push	{r7, lr}
   853ce:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   853d0:	4b0d      	ldr	r3, [pc, #52]	; (85408 <udc_req_std_ep_set_feature+0x3c>)
   853d2:	88db      	ldrh	r3, [r3, #6]
   853d4:	2b00      	cmp	r3, #0
   853d6:	d001      	beq.n	853dc <udc_req_std_ep_set_feature+0x10>
		return false;
   853d8:	2300      	movs	r3, #0
   853da:	e012      	b.n	85402 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   853dc:	4b0a      	ldr	r3, [pc, #40]	; (85408 <udc_req_std_ep_set_feature+0x3c>)
   853de:	885b      	ldrh	r3, [r3, #2]
   853e0:	2b00      	cmp	r3, #0
   853e2:	d10d      	bne.n	85400 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   853e4:	4b08      	ldr	r3, [pc, #32]	; (85408 <udc_req_std_ep_set_feature+0x3c>)
   853e6:	889b      	ldrh	r3, [r3, #4]
   853e8:	b2db      	uxtb	r3, r3
   853ea:	4618      	mov	r0, r3
   853ec:	4b07      	ldr	r3, [pc, #28]	; (8540c <udc_req_std_ep_set_feature+0x40>)
   853ee:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   853f0:	4b05      	ldr	r3, [pc, #20]	; (85408 <udc_req_std_ep_set_feature+0x3c>)
   853f2:	889b      	ldrh	r3, [r3, #4]
   853f4:	b2db      	uxtb	r3, r3
   853f6:	4618      	mov	r0, r3
   853f8:	4b05      	ldr	r3, [pc, #20]	; (85410 <udc_req_std_ep_set_feature+0x44>)
   853fa:	4798      	blx	r3
   853fc:	4603      	mov	r3, r0
   853fe:	e000      	b.n	85402 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   85400:	2300      	movs	r3, #0
}
   85402:	4618      	mov	r0, r3
   85404:	bd80      	pop	{r7, pc}
   85406:	bf00      	nop
   85408:	20001810 	.word	0x20001810
   8540c:	00082ffd 	.word	0x00082ffd
   85410:	00082cb1 	.word	0x00082cb1

00085414 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   85414:	b580      	push	{r7, lr}
   85416:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   85418:	4b05      	ldr	r3, [pc, #20]	; (85430 <udc_valid_address+0x1c>)
   8541a:	885b      	ldrh	r3, [r3, #2]
   8541c:	b2db      	uxtb	r3, r3
   8541e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   85422:	b2db      	uxtb	r3, r3
   85424:	4618      	mov	r0, r3
   85426:	4b03      	ldr	r3, [pc, #12]	; (85434 <udc_valid_address+0x20>)
   85428:	4798      	blx	r3
}
   8542a:	bf00      	nop
   8542c:	bd80      	pop	{r7, pc}
   8542e:	bf00      	nop
   85430:	20001810 	.word	0x20001810
   85434:	00082789 	.word	0x00082789

00085438 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   85438:	b480      	push	{r7}
   8543a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   8543c:	4b06      	ldr	r3, [pc, #24]	; (85458 <udc_req_std_dev_set_address+0x20>)
   8543e:	88db      	ldrh	r3, [r3, #6]
   85440:	2b00      	cmp	r3, #0
   85442:	d001      	beq.n	85448 <udc_req_std_dev_set_address+0x10>
		return false;
   85444:	2300      	movs	r3, #0
   85446:	e003      	b.n	85450 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   85448:	4b03      	ldr	r3, [pc, #12]	; (85458 <udc_req_std_dev_set_address+0x20>)
   8544a:	4a04      	ldr	r2, [pc, #16]	; (8545c <udc_req_std_dev_set_address+0x24>)
   8544c:	611a      	str	r2, [r3, #16]
	return true;
   8544e:	2301      	movs	r3, #1
}
   85450:	4618      	mov	r0, r3
   85452:	46bd      	mov	sp, r7
   85454:	bc80      	pop	{r7}
   85456:	4770      	bx	lr
   85458:	20001810 	.word	0x20001810
   8545c:	00085415 	.word	0x00085415

00085460 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   85460:	b580      	push	{r7, lr}
   85462:	b084      	sub	sp, #16
   85464:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   85466:	2300      	movs	r3, #0
   85468:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8546a:	4b29      	ldr	r3, [pc, #164]	; (85510 <udc_req_std_dev_get_str_desc+0xb0>)
   8546c:	885b      	ldrh	r3, [r3, #2]
   8546e:	b2db      	uxtb	r3, r3
   85470:	2b03      	cmp	r3, #3
   85472:	d820      	bhi.n	854b6 <udc_req_std_dev_get_str_desc+0x56>
   85474:	a201      	add	r2, pc, #4	; (adr r2, 8547c <udc_req_std_dev_get_str_desc+0x1c>)
   85476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8547a:	bf00      	nop
   8547c:	0008548d 	.word	0x0008548d
   85480:	00085497 	.word	0x00085497
   85484:	000854a1 	.word	0x000854a1
   85488:	000854ab 	.word	0x000854ab
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   8548c:	2104      	movs	r1, #4
   8548e:	4821      	ldr	r0, [pc, #132]	; (85514 <udc_req_std_dev_get_str_desc+0xb4>)
   85490:	4b21      	ldr	r3, [pc, #132]	; (85518 <udc_req_std_dev_get_str_desc+0xb8>)
   85492:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   85494:	e011      	b.n	854ba <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   85496:	2315      	movs	r3, #21
   85498:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   8549a:	4b20      	ldr	r3, [pc, #128]	; (8551c <udc_req_std_dev_get_str_desc+0xbc>)
   8549c:	60bb      	str	r3, [r7, #8]
		break;
   8549e:	e00c      	b.n	854ba <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   854a0:	2313      	movs	r3, #19
   854a2:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   854a4:	4b1e      	ldr	r3, [pc, #120]	; (85520 <udc_req_std_dev_get_str_desc+0xc0>)
   854a6:	60bb      	str	r3, [r7, #8]
		break;
   854a8:	e007      	b.n	854ba <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   854aa:	2320      	movs	r3, #32
   854ac:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   854ae:	4b1d      	ldr	r3, [pc, #116]	; (85524 <udc_req_std_dev_get_str_desc+0xc4>)
   854b0:	4798      	blx	r3
   854b2:	60b8      	str	r0, [r7, #8]
		break;
   854b4:	e001      	b.n	854ba <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   854b6:	2300      	movs	r3, #0
   854b8:	e026      	b.n	85508 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   854ba:	79fb      	ldrb	r3, [r7, #7]
   854bc:	2b00      	cmp	r3, #0
   854be:	d022      	beq.n	85506 <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   854c0:	2300      	movs	r3, #0
   854c2:	73fb      	strb	r3, [r7, #15]
   854c4:	e00d      	b.n	854e2 <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   854c6:	7bfb      	ldrb	r3, [r7, #15]
   854c8:	68ba      	ldr	r2, [r7, #8]
   854ca:	4413      	add	r3, r2
   854cc:	781a      	ldrb	r2, [r3, #0]
   854ce:	7bfb      	ldrb	r3, [r7, #15]
   854d0:	b291      	uxth	r1, r2
   854d2:	4a15      	ldr	r2, [pc, #84]	; (85528 <udc_req_std_dev_get_str_desc+0xc8>)
   854d4:	005b      	lsls	r3, r3, #1
   854d6:	4413      	add	r3, r2
   854d8:	460a      	mov	r2, r1
   854da:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   854dc:	7bfb      	ldrb	r3, [r7, #15]
   854de:	3301      	adds	r3, #1
   854e0:	73fb      	strb	r3, [r7, #15]
   854e2:	7bfa      	ldrb	r2, [r7, #15]
   854e4:	79fb      	ldrb	r3, [r7, #7]
   854e6:	429a      	cmp	r2, r3
   854e8:	d3ed      	bcc.n	854c6 <udc_req_std_dev_get_str_desc+0x66>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   854ea:	79fb      	ldrb	r3, [r7, #7]
   854ec:	3301      	adds	r3, #1
   854ee:	b2db      	uxtb	r3, r3
   854f0:	005b      	lsls	r3, r3, #1
   854f2:	b2da      	uxtb	r2, r3
   854f4:	4b0c      	ldr	r3, [pc, #48]	; (85528 <udc_req_std_dev_get_str_desc+0xc8>)
   854f6:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   854f8:	4b0b      	ldr	r3, [pc, #44]	; (85528 <udc_req_std_dev_get_str_desc+0xc8>)
   854fa:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   854fc:	b29b      	uxth	r3, r3
   854fe:	4619      	mov	r1, r3
   85500:	4809      	ldr	r0, [pc, #36]	; (85528 <udc_req_std_dev_get_str_desc+0xc8>)
   85502:	4b05      	ldr	r3, [pc, #20]	; (85518 <udc_req_std_dev_get_str_desc+0xb8>)
   85504:	4798      	blx	r3
	}
<<<<<<< HEAD
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   860be:	79fb      	ldrb	r3, [r7, #7]
   860c0:	461a      	mov	r2, r3
   860c2:	2100      	movs	r1, #0
   860c4:	68f8      	ldr	r0, [r7, #12]
   860c6:	4b08      	ldr	r3, [pc, #32]	; (860e8 <udd_ep_trans_done+0x1e4>)
   860c8:	4798      	blx	r3
   860ca:	e000      	b.n	860ce <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   860cc:	bf00      	nop
}
   860ce:	3718      	adds	r7, #24
   860d0:	46bd      	mov	sp, r7
   860d2:	bd80      	pop	{r7, pc}
   860d4:	2000134c 	.word	0x2000134c
   860d8:	400a4000 	.word	0x400a4000
   860dc:	400a4300 	.word	0x400a4300
   860e0:	00084705 	.word	0x00084705
   860e4:	00084761 	.word	0x00084761
   860e8:	00085e95 	.word	0x00085e95

000860ec <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   860ec:	b580      	push	{r7, lr}
   860ee:	b084      	sub	sp, #16
   860f0:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   860f2:	2301      	movs	r3, #1
   860f4:	73fb      	strb	r3, [r7, #15]
   860f6:	e0e0      	b.n	862ba <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   860f8:	7bfb      	ldrb	r3, [r7, #15]
   860fa:	1e5a      	subs	r2, r3, #1
   860fc:	4613      	mov	r3, r2
   860fe:	005b      	lsls	r3, r3, #1
   86100:	4413      	add	r3, r2
   86102:	00db      	lsls	r3, r3, #3
   86104:	4a71      	ldr	r2, [pc, #452]	; (862cc <udd_ep_interrupt+0x1e0>)
   86106:	4413      	add	r3, r2
   86108:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8610a:	4b71      	ldr	r3, [pc, #452]	; (862d0 <udd_ep_interrupt+0x1e4>)
   8610c:	691a      	ldr	r2, [r3, #16]
   8610e:	7bfb      	ldrb	r3, [r7, #15]
   86110:	3b01      	subs	r3, #1
   86112:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   86116:	fa01 f303 	lsl.w	r3, r1, r3
   8611a:	4013      	ands	r3, r2
   8611c:	2b00      	cmp	r3, #0
   8611e:	d03c      	beq.n	8619a <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   86120:	4b6b      	ldr	r3, [pc, #428]	; (862d0 <udd_ep_interrupt+0x1e4>)
   86122:	695a      	ldr	r2, [r3, #20]
   86124:	7bfb      	ldrb	r3, [r7, #15]
   86126:	3b01      	subs	r3, #1
   86128:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8612c:	fa01 f303 	lsl.w	r3, r1, r3
   86130:	4013      	ands	r3, r2
   86132:	2b00      	cmp	r3, #0
   86134:	d031      	beq.n	8619a <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   86136:	7bfb      	ldrb	r3, [r7, #15]
   86138:	011a      	lsls	r2, r3, #4
   8613a:	4b66      	ldr	r3, [pc, #408]	; (862d4 <udd_ep_interrupt+0x1e8>)
   8613c:	4413      	add	r3, r2
   8613e:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   86140:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   86144:	2b00      	cmp	r3, #0
   86146:	d001      	beq.n	8614c <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   86148:	2301      	movs	r3, #1
   8614a:	e0bb      	b.n	862c4 <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   8614c:	4b60      	ldr	r3, [pc, #384]	; (862d0 <udd_ep_interrupt+0x1e4>)
   8614e:	691a      	ldr	r2, [r3, #16]
   86150:	7bfb      	ldrb	r3, [r7, #15]
   86152:	3b01      	subs	r3, #1
   86154:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   86158:	fa01 f303 	lsl.w	r3, r1, r3
   8615c:	43db      	mvns	r3, r3
   8615e:	495c      	ldr	r1, [pc, #368]	; (862d0 <udd_ep_interrupt+0x1e4>)
   86160:	4013      	ands	r3, r2
   86162:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   86164:	7bfb      	ldrb	r3, [r7, #15]
   86166:	011a      	lsls	r2, r3, #4
   86168:	4b5a      	ldr	r3, [pc, #360]	; (862d4 <udd_ep_interrupt+0x1e8>)
   8616a:	4413      	add	r3, r2
   8616c:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   8616e:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   86170:	b29b      	uxth	r3, r3
   86172:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   86174:	687b      	ldr	r3, [r7, #4]
   86176:	2b00      	cmp	r3, #0
   86178:	d009      	beq.n	8618e <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   8617a:	68bb      	ldr	r3, [r7, #8]
   8617c:	68da      	ldr	r2, [r3, #12]
   8617e:	687b      	ldr	r3, [r7, #4]
   86180:	1ad2      	subs	r2, r2, r3
   86182:	68bb      	ldr	r3, [r7, #8]
   86184:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   86186:	68bb      	ldr	r3, [r7, #8]
   86188:	68da      	ldr	r2, [r3, #12]
   8618a:	68bb      	ldr	r3, [r7, #8]
   8618c:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   8618e:	7bfb      	ldrb	r3, [r7, #15]
   86190:	4618      	mov	r0, r3
   86192:	4b51      	ldr	r3, [pc, #324]	; (862d8 <udd_ep_interrupt+0x1ec>)
   86194:	4798      	blx	r3
			return true;
   86196:	2301      	movs	r3, #1
   86198:	e094      	b.n	862c4 <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8619a:	4b4d      	ldr	r3, [pc, #308]	; (862d0 <udd_ep_interrupt+0x1e4>)
   8619c:	691a      	ldr	r2, [r3, #16]
   8619e:	7bfb      	ldrb	r3, [r7, #15]
   861a0:	f44f 7180 	mov.w	r1, #256	; 0x100
   861a4:	fa01 f303 	lsl.w	r3, r1, r3
   861a8:	4013      	ands	r3, r2
   861aa:	2b00      	cmp	r3, #0
   861ac:	f000 8082 	beq.w	862b4 <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   861b0:	4a47      	ldr	r2, [pc, #284]	; (862d0 <udd_ep_interrupt+0x1e4>)
   861b2:	7bfb      	ldrb	r3, [r7, #15]
   861b4:	015b      	lsls	r3, r3, #5
   861b6:	4413      	add	r3, r2
   861b8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   861bc:	681b      	ldr	r3, [r3, #0]
   861be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   861c2:	2b00      	cmp	r3, #0
   861c4:	d024      	beq.n	86210 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   861c6:	4a42      	ldr	r2, [pc, #264]	; (862d0 <udd_ep_interrupt+0x1e4>)
   861c8:	7bfb      	ldrb	r3, [r7, #15]
   861ca:	015b      	lsls	r3, r3, #5
   861cc:	4413      	add	r3, r2
   861ce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   861d2:	681b      	ldr	r3, [r3, #0]
   861d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   861d8:	2b00      	cmp	r3, #0
   861da:	d119      	bne.n	86210 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   861dc:	4a3c      	ldr	r2, [pc, #240]	; (862d0 <udd_ep_interrupt+0x1e4>)
   861de:	7bfb      	ldrb	r3, [r7, #15]
   861e0:	015b      	lsls	r3, r3, #5
   861e2:	4413      	add	r3, r2
   861e4:	f503 7384 	add.w	r3, r3, #264	; 0x108
   861e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   861ec:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   861ee:	4a38      	ldr	r2, [pc, #224]	; (862d0 <udd_ep_interrupt+0x1e4>)
   861f0:	7bfb      	ldrb	r3, [r7, #15]
   861f2:	015b      	lsls	r3, r3, #5
   861f4:	4413      	add	r3, r2
   861f6:	f503 738a 	add.w	r3, r3, #276	; 0x114
   861fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
   861fe:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   86200:	7bfb      	ldrb	r3, [r7, #15]
   86202:	461a      	mov	r2, r3
   86204:	2100      	movs	r1, #0
   86206:	68b8      	ldr	r0, [r7, #8]
   86208:	4b34      	ldr	r3, [pc, #208]	; (862dc <udd_ep_interrupt+0x1f0>)
   8620a:	4798      	blx	r3
				return true;
   8620c:	2301      	movs	r3, #1
   8620e:	e059      	b.n	862c4 <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   86210:	4a2f      	ldr	r2, [pc, #188]	; (862d0 <udd_ep_interrupt+0x1e4>)
   86212:	7bfb      	ldrb	r3, [r7, #15]
   86214:	015b      	lsls	r3, r3, #5
   86216:	4413      	add	r3, r2
   86218:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   8621c:	681b      	ldr	r3, [r3, #0]
   8621e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   86222:	2b00      	cmp	r3, #0
   86224:	d046      	beq.n	862b4 <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   86226:	4a2a      	ldr	r2, [pc, #168]	; (862d0 <udd_ep_interrupt+0x1e4>)
   86228:	7bfb      	ldrb	r3, [r7, #15]
   8622a:	015b      	lsls	r3, r3, #5
   8622c:	4413      	add	r3, r2
   8622e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   86232:	681b      	ldr	r3, [r3, #0]
   86234:	0c9b      	lsrs	r3, r3, #18
   86236:	f003 0303 	and.w	r3, r3, #3
   8623a:	2b00      	cmp	r3, #0
   8623c:	d13a      	bne.n	862b4 <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   8623e:	4a24      	ldr	r2, [pc, #144]	; (862d0 <udd_ep_interrupt+0x1e4>)
   86240:	7bfb      	ldrb	r3, [r7, #15]
   86242:	015b      	lsls	r3, r3, #5
   86244:	4413      	add	r3, r2
   86246:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8624a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8624e:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   86250:	4b1f      	ldr	r3, [pc, #124]	; (862d0 <udd_ep_interrupt+0x1e4>)
   86252:	691a      	ldr	r2, [r3, #16]
   86254:	7bfb      	ldrb	r3, [r7, #15]
   86256:	f44f 7180 	mov.w	r1, #256	; 0x100
   8625a:	fa01 f303 	lsl.w	r3, r1, r3
   8625e:	43db      	mvns	r3, r3
   86260:	491b      	ldr	r1, [pc, #108]	; (862d0 <udd_ep_interrupt+0x1e4>)
   86262:	4013      	ands	r3, r2
   86264:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   86266:	68ba      	ldr	r2, [r7, #8]
   86268:	7d13      	ldrb	r3, [r2, #20]
   8626a:	f36f 0382 	bfc	r3, #2, #1
   8626e:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   86270:	4a17      	ldr	r2, [pc, #92]	; (862d0 <udd_ep_interrupt+0x1e4>)
   86272:	7bfb      	ldrb	r3, [r7, #15]
   86274:	015b      	lsls	r3, r3, #5
   86276:	4413      	add	r3, r2
   86278:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8627c:	681a      	ldr	r2, [r3, #0]
   8627e:	4914      	ldr	r1, [pc, #80]	; (862d0 <udd_ep_interrupt+0x1e4>)
   86280:	7bfb      	ldrb	r3, [r7, #15]
   86282:	f022 0202 	bic.w	r2, r2, #2
   86286:	015b      	lsls	r3, r3, #5
   86288:	440b      	add	r3, r1
   8628a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8628e:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   86290:	4a0f      	ldr	r2, [pc, #60]	; (862d0 <udd_ep_interrupt+0x1e4>)
   86292:	7bfb      	ldrb	r3, [r7, #15]
   86294:	015b      	lsls	r3, r3, #5
   86296:	4413      	add	r3, r2
   86298:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8629c:	2220      	movs	r2, #32
   8629e:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   862a0:	4a0b      	ldr	r2, [pc, #44]	; (862d0 <udd_ep_interrupt+0x1e4>)
   862a2:	7bfb      	ldrb	r3, [r7, #15]
   862a4:	015b      	lsls	r3, r3, #5
   862a6:	4413      	add	r3, r2
   862a8:	f503 738c 	add.w	r3, r3, #280	; 0x118
   862ac:	2240      	movs	r2, #64	; 0x40
   862ae:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   862b0:	2301      	movs	r3, #1
   862b2:	e007      	b.n	862c4 <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   862b4:	7bfb      	ldrb	r3, [r7, #15]
   862b6:	3301      	adds	r3, #1
   862b8:	73fb      	strb	r3, [r7, #15]
   862ba:	7bfb      	ldrb	r3, [r7, #15]
   862bc:	2b02      	cmp	r3, #2
   862be:	f67f af1b 	bls.w	860f8 <udd_ep_interrupt+0xc>
=======

	return true;
   85506:	2301      	movs	r3, #1
}
   85508:	4618      	mov	r0, r3
   8550a:	3710      	adds	r7, #16
   8550c:	46bd      	mov	sp, r7
   8550e:	bd80      	pop	{r7, pc}
   85510:	20001810 	.word	0x20001810
   85514:	20000298 	.word	0x20000298
   85518:	000827e9 	.word	0x000827e9
   8551c:	2000029c 	.word	0x2000029c
   85520:	200002b4 	.word	0x200002b4
   85524:	00084eed 	.word	0x00084eed
   85528:	200002c8 	.word	0x200002c8

0008552c <udc_req_std_dev_get_descriptor>:
		WINUSB_PLATFORM_DESCRIPTOR_LENGTH, 0x00, //length of other descriptor
		0x01, // when asking for MS 2.0 descriptor, will do bmRequestType = 0xC0, bRequest = this (0x01)
		0x00  // if non 0, Windows will send this before asking for the next descriptor
		};
static bool udc_req_std_dev_get_descriptor(void)
{
   8552c:	b580      	push	{r7, lr}
   8552e:	b082      	sub	sp, #8
   85530:	af00      	add	r7, sp, #0
	uint8_t conf_num;


	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   85532:	4b7f      	ldr	r3, [pc, #508]	; (85730 <udc_req_std_dev_get_descriptor+0x204>)
   85534:	885b      	ldrh	r3, [r3, #2]
   85536:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   85538:	4b7d      	ldr	r3, [pc, #500]	; (85730 <udc_req_std_dev_get_descriptor+0x204>)
   8553a:	885b      	ldrh	r3, [r3, #2]
   8553c:	0a1b      	lsrs	r3, r3, #8
   8553e:	b29b      	uxth	r3, r3
   85540:	b2db      	uxtb	r3, r3
   85542:	3b01      	subs	r3, #1
   85544:	2b0e      	cmp	r3, #14
   85546:	f200 80e0 	bhi.w	8570a <udc_req_std_dev_get_descriptor+0x1de>
   8554a:	a201      	add	r2, pc, #4	; (adr r2, 85550 <udc_req_std_dev_get_descriptor+0x24>)
   8554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85550:	0008558d 	.word	0x0008558d
   85554:	000855dd 	.word	0x000855dd
   85558:	000856f7 	.word	0x000856f7
   8555c:	0008570b 	.word	0x0008570b
   85560:	0008570b 	.word	0x0008570b
   85564:	00085657 	.word	0x00085657
   85568:	0008566d 	.word	0x0008566d
   8556c:	0008570b 	.word	0x0008570b
   85570:	0008570b 	.word	0x0008570b
   85574:	0008570b 	.word	0x0008570b
   85578:	0008570b 	.word	0x0008570b
   8557c:	0008570b 	.word	0x0008570b
   85580:	0008570b 	.word	0x0008570b
   85584:	0008570b 	.word	0x0008570b
   85588:	000856ed 	.word	0x000856ed
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   8558c:	4b69      	ldr	r3, [pc, #420]	; (85734 <udc_req_std_dev_get_descriptor+0x208>)
   8558e:	4798      	blx	r3
   85590:	4603      	mov	r3, r0
   85592:	f083 0301 	eor.w	r3, r3, #1
   85596:	b2db      	uxtb	r3, r3
   85598:	2b00      	cmp	r3, #0
   8559a:	d00a      	beq.n	855b2 <udc_req_std_dev_get_descriptor+0x86>
			//(udc_config.confdev_hs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   8559c:	4b66      	ldr	r3, [pc, #408]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   8559e:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   855a0:	4b65      	ldr	r3, [pc, #404]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   855a2:	689b      	ldr	r3, [r3, #8]
   855a4:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   855a6:	b29b      	uxth	r3, r3
   855a8:	4619      	mov	r1, r3
   855aa:	4610      	mov	r0, r2
   855ac:	4b63      	ldr	r3, [pc, #396]	; (8573c <udc_req_std_dev_get_descriptor+0x210>)
   855ae:	4798      	blx	r3
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   855b0:	e0ae      	b.n	85710 <udc_req_std_dev_get_descriptor+0x1e4>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   855b2:	4b61      	ldr	r3, [pc, #388]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   855b4:	681b      	ldr	r3, [r3, #0]
   855b6:	2200      	movs	r2, #0
   855b8:	f042 0210 	orr.w	r2, r2, #16
   855bc:	709a      	strb	r2, [r3, #2]
   855be:	2200      	movs	r2, #0
   855c0:	f042 0202 	orr.w	r2, r2, #2
   855c4:	70da      	strb	r2, [r3, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   855c6:	4b5c      	ldr	r3, [pc, #368]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   855c8:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   855ca:	4b5b      	ldr	r3, [pc, #364]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   855cc:	681b      	ldr	r3, [r3, #0]
   855ce:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   855d0:	b29b      	uxth	r3, r3
   855d2:	4619      	mov	r1, r3
   855d4:	4610      	mov	r0, r2
   855d6:	4b59      	ldr	r3, [pc, #356]	; (8573c <udc_req_std_dev_get_descriptor+0x210>)
   855d8:	4798      	blx	r3
		break;
   855da:	e099      	b.n	85710 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   855dc:	4b55      	ldr	r3, [pc, #340]	; (85734 <udc_req_std_dev_get_descriptor+0x208>)
   855de:	4798      	blx	r3
   855e0:	4603      	mov	r3, r0
   855e2:	2b00      	cmp	r3, #0
   855e4:	d019      	beq.n	8561a <udc_req_std_dev_get_descriptor+0xee>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   855e6:	4b54      	ldr	r3, [pc, #336]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   855e8:	689b      	ldr	r3, [r3, #8]
   855ea:	7c5b      	ldrb	r3, [r3, #17]
   855ec:	79fa      	ldrb	r2, [r7, #7]
   855ee:	429a      	cmp	r2, r3
   855f0:	d301      	bcc.n	855f6 <udc_req_std_dev_get_descriptor+0xca>
					bNumConfigurations) {
				return false;
   855f2:	2300      	movs	r3, #0
   855f4:	e097      	b.n	85726 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   855f6:	4b50      	ldr	r3, [pc, #320]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   855f8:	691a      	ldr	r2, [r3, #16]
   855fa:	79fb      	ldrb	r3, [r7, #7]
   855fc:	00db      	lsls	r3, r3, #3
   855fe:	4413      	add	r3, r2
   85600:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   85602:	4b4d      	ldr	r3, [pc, #308]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   85604:	691a      	ldr	r2, [r3, #16]
   85606:	79fb      	ldrb	r3, [r7, #7]
   85608:	00db      	lsls	r3, r3, #3
   8560a:	4413      	add	r3, r2
   8560c:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   8560e:	885b      	ldrh	r3, [r3, #2]
   85610:	b29b      	uxth	r3, r3
   85612:	4619      	mov	r1, r3
   85614:	4b49      	ldr	r3, [pc, #292]	; (8573c <udc_req_std_dev_get_descriptor+0x210>)
   85616:	4798      	blx	r3
   85618:	e018      	b.n	8564c <udc_req_std_dev_get_descriptor+0x120>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   8561a:	4b47      	ldr	r3, [pc, #284]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   8561c:	681b      	ldr	r3, [r3, #0]
   8561e:	7c5b      	ldrb	r3, [r3, #17]
   85620:	79fa      	ldrb	r2, [r7, #7]
   85622:	429a      	cmp	r2, r3
   85624:	d301      	bcc.n	8562a <udc_req_std_dev_get_descriptor+0xfe>
					bNumConfigurations) {
				return false;
   85626:	2300      	movs	r3, #0
   85628:	e07d      	b.n	85726 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8562a:	4b43      	ldr	r3, [pc, #268]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   8562c:	685a      	ldr	r2, [r3, #4]
   8562e:	79fb      	ldrb	r3, [r7, #7]
   85630:	00db      	lsls	r3, r3, #3
   85632:	4413      	add	r3, r2
   85634:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   85636:	4b40      	ldr	r3, [pc, #256]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   85638:	685a      	ldr	r2, [r3, #4]
   8563a:	79fb      	ldrb	r3, [r7, #7]
   8563c:	00db      	lsls	r3, r3, #3
   8563e:	4413      	add	r3, r2
   85640:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   85642:	885b      	ldrh	r3, [r3, #2]
   85644:	b29b      	uxth	r3, r3
   85646:	4619      	mov	r1, r3
   85648:	4b3c      	ldr	r3, [pc, #240]	; (8573c <udc_req_std_dev_get_descriptor+0x210>)
   8564a:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8564c:	4b38      	ldr	r3, [pc, #224]	; (85730 <udc_req_std_dev_get_descriptor+0x204>)
   8564e:	689b      	ldr	r3, [r3, #8]
   85650:	2202      	movs	r2, #2
   85652:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   85654:	e05c      	b.n	85710 <udc_req_std_dev_get_descriptor+0x1e4>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   85656:	4b38      	ldr	r3, [pc, #224]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   85658:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   8565a:	4b37      	ldr	r3, [pc, #220]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   8565c:	68db      	ldr	r3, [r3, #12]
   8565e:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   85660:	b29b      	uxth	r3, r3
   85662:	4619      	mov	r1, r3
   85664:	4610      	mov	r0, r2
   85666:	4b35      	ldr	r3, [pc, #212]	; (8573c <udc_req_std_dev_get_descriptor+0x210>)
   85668:	4798      	blx	r3
		break;
   8566a:	e051      	b.n	85710 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   8566c:	4b31      	ldr	r3, [pc, #196]	; (85734 <udc_req_std_dev_get_descriptor+0x208>)
   8566e:	4798      	blx	r3
   85670:	4603      	mov	r3, r0
   85672:	f083 0301 	eor.w	r3, r3, #1
   85676:	b2db      	uxtb	r3, r3
   85678:	2b00      	cmp	r3, #0
   8567a:	d019      	beq.n	856b0 <udc_req_std_dev_get_descriptor+0x184>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   8567c:	4b2e      	ldr	r3, [pc, #184]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   8567e:	689b      	ldr	r3, [r3, #8]
   85680:	7c5b      	ldrb	r3, [r3, #17]
   85682:	79fa      	ldrb	r2, [r7, #7]
   85684:	429a      	cmp	r2, r3
   85686:	d301      	bcc.n	8568c <udc_req_std_dev_get_descriptor+0x160>
					bNumConfigurations) {
				return false;
   85688:	2300      	movs	r3, #0
   8568a:	e04c      	b.n	85726 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8568c:	4b2a      	ldr	r3, [pc, #168]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   8568e:	691a      	ldr	r2, [r3, #16]
   85690:	79fb      	ldrb	r3, [r7, #7]
   85692:	00db      	lsls	r3, r3, #3
   85694:	4413      	add	r3, r2
   85696:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   85698:	4b27      	ldr	r3, [pc, #156]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   8569a:	691a      	ldr	r2, [r3, #16]
   8569c:	79fb      	ldrb	r3, [r7, #7]
   8569e:	00db      	lsls	r3, r3, #3
   856a0:	4413      	add	r3, r2
   856a2:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   856a4:	885b      	ldrh	r3, [r3, #2]
   856a6:	b29b      	uxth	r3, r3
   856a8:	4619      	mov	r1, r3
   856aa:	4b24      	ldr	r3, [pc, #144]	; (8573c <udc_req_std_dev_get_descriptor+0x210>)
   856ac:	4798      	blx	r3
   856ae:	e018      	b.n	856e2 <udc_req_std_dev_get_descriptor+0x1b6>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   856b0:	4b21      	ldr	r3, [pc, #132]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   856b2:	681b      	ldr	r3, [r3, #0]
   856b4:	7c5b      	ldrb	r3, [r3, #17]
   856b6:	79fa      	ldrb	r2, [r7, #7]
   856b8:	429a      	cmp	r2, r3
   856ba:	d301      	bcc.n	856c0 <udc_req_std_dev_get_descriptor+0x194>
					bNumConfigurations) {
				return false;
   856bc:	2300      	movs	r3, #0
   856be:	e032      	b.n	85726 <udc_req_std_dev_get_descriptor+0x1fa>
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   856c0:	4b1d      	ldr	r3, [pc, #116]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   856c2:	685a      	ldr	r2, [r3, #4]
   856c4:	79fb      	ldrb	r3, [r7, #7]
   856c6:	00db      	lsls	r3, r3, #3
   856c8:	4413      	add	r3, r2
   856ca:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   856cc:	4b1a      	ldr	r3, [pc, #104]	; (85738 <udc_req_std_dev_get_descriptor+0x20c>)
   856ce:	685a      	ldr	r2, [r3, #4]
   856d0:	79fb      	ldrb	r3, [r7, #7]
   856d2:	00db      	lsls	r3, r3, #3
   856d4:	4413      	add	r3, r2
   856d6:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   856d8:	885b      	ldrh	r3, [r3, #2]
   856da:	b29b      	uxth	r3, r3
   856dc:	4619      	mov	r1, r3
   856de:	4b17      	ldr	r3, [pc, #92]	; (8573c <udc_req_std_dev_get_descriptor+0x210>)
   856e0:	4798      	blx	r3
		}
<<<<<<< HEAD
	}
	return false;
   862c2:	2300      	movs	r3, #0
}
   862c4:	4618      	mov	r0, r3
   862c6:	3710      	adds	r7, #16
   862c8:	46bd      	mov	sp, r7
   862ca:	bd80      	pop	{r7, pc}
   862cc:	2000134c 	.word	0x2000134c
   862d0:	400a4000 	.word	0x400a4000
   862d4:	400a4300 	.word	0x400a4300
   862d8:	00085f05 	.word	0x00085f05
   862dc:	00085e95 	.word	0x00085e95

000862e0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   862e0:	b480      	push	{r7}
   862e2:	b089      	sub	sp, #36	; 0x24
   862e4:	af00      	add	r7, sp, #0
   862e6:	60f8      	str	r0, [r7, #12]
   862e8:	60b9      	str	r1, [r7, #8]
   862ea:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   862ec:	68bb      	ldr	r3, [r7, #8]
   862ee:	011b      	lsls	r3, r3, #4
   862f0:	687a      	ldr	r2, [r7, #4]
   862f2:	429a      	cmp	r2, r3
   862f4:	d302      	bcc.n	862fc <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   862f6:	2310      	movs	r3, #16
   862f8:	61fb      	str	r3, [r7, #28]
   862fa:	e001      	b.n	86300 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   862fc:	2308      	movs	r3, #8
   862fe:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86300:	687b      	ldr	r3, [r7, #4]
   86302:	00da      	lsls	r2, r3, #3
   86304:	69fb      	ldr	r3, [r7, #28]
   86306:	68b9      	ldr	r1, [r7, #8]
   86308:	fb01 f303 	mul.w	r3, r1, r3
   8630c:	085b      	lsrs	r3, r3, #1
   8630e:	441a      	add	r2, r3
   86310:	69fb      	ldr	r3, [r7, #28]
   86312:	68b9      	ldr	r1, [r7, #8]
   86314:	fb01 f303 	mul.w	r3, r1, r3
   86318:	fbb2 f3f3 	udiv	r3, r2, r3
   8631c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   8631e:	69bb      	ldr	r3, [r7, #24]
   86320:	08db      	lsrs	r3, r3, #3
   86322:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   86324:	69bb      	ldr	r3, [r7, #24]
   86326:	f003 0307 	and.w	r3, r3, #7
   8632a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8632c:	697b      	ldr	r3, [r7, #20]
   8632e:	2b00      	cmp	r3, #0
   86330:	d003      	beq.n	8633a <usart_set_async_baudrate+0x5a>
   86332:	697b      	ldr	r3, [r7, #20]
   86334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   86338:	d301      	bcc.n	8633e <usart_set_async_baudrate+0x5e>
		return 1;
   8633a:	2301      	movs	r3, #1
   8633c:	e00f      	b.n	8635e <usart_set_async_baudrate+0x7e>
=======
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   856e2:	4b13      	ldr	r3, [pc, #76]	; (85730 <udc_req_std_dev_get_descriptor+0x204>)
   856e4:	689b      	ldr	r3, [r3, #8]
   856e6:	2207      	movs	r2, #7
   856e8:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   856ea:	e011      	b.n	85710 <udc_req_std_dev_get_descriptor+0x1e4>
#endif
	case USB_DT_BOS: //bos descriptor
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   856ec:	2121      	movs	r1, #33	; 0x21
   856ee:	4814      	ldr	r0, [pc, #80]	; (85740 <udc_req_std_dev_get_descriptor+0x214>)
   856f0:	4b12      	ldr	r3, [pc, #72]	; (8573c <udc_req_std_dev_get_descriptor+0x210>)
   856f2:	4798      	blx	r3
			0x21);
		break;
   856f4:	e00c      	b.n	85710 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   856f6:	4b13      	ldr	r3, [pc, #76]	; (85744 <udc_req_std_dev_get_descriptor+0x218>)
   856f8:	4798      	blx	r3
   856fa:	4603      	mov	r3, r0
   856fc:	f083 0301 	eor.w	r3, r3, #1
   85700:	b2db      	uxtb	r3, r3
   85702:	2b00      	cmp	r3, #0
   85704:	d003      	beq.n	8570e <udc_req_std_dev_get_descriptor+0x1e2>
			return false;
   85706:	2300      	movs	r3, #0
   85708:	e00d      	b.n	85726 <udc_req_std_dev_get_descriptor+0x1fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   8570a:	2300      	movs	r3, #0
   8570c:	e00b      	b.n	85726 <udc_req_std_dev_get_descriptor+0x1fa>
		break;
   8570e:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   85710:	4b07      	ldr	r3, [pc, #28]	; (85730 <udc_req_std_dev_get_descriptor+0x204>)
   85712:	88da      	ldrh	r2, [r3, #6]
   85714:	4b06      	ldr	r3, [pc, #24]	; (85730 <udc_req_std_dev_get_descriptor+0x204>)
   85716:	899b      	ldrh	r3, [r3, #12]
   85718:	429a      	cmp	r2, r3
   8571a:	d203      	bcs.n	85724 <udc_req_std_dev_get_descriptor+0x1f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8571c:	4b04      	ldr	r3, [pc, #16]	; (85730 <udc_req_std_dev_get_descriptor+0x204>)
   8571e:	88da      	ldrh	r2, [r3, #6]
   85720:	4b03      	ldr	r3, [pc, #12]	; (85730 <udc_req_std_dev_get_descriptor+0x204>)
   85722:	819a      	strh	r2, [r3, #12]
	}
	return true;
   85724:	2301      	movs	r3, #1
}
   85726:	4618      	mov	r0, r3
   85728:	3708      	adds	r7, #8
   8572a:	46bd      	mov	sp, r7
   8572c:	bd80      	pop	{r7, pc}
   8572e:	bf00      	nop
   85730:	20001810 	.word	0x20001810
   85734:	00082765 	.word	0x00082765
   85738:	20000420 	.word	0x20000420
   8573c:	000827e9 	.word	0x000827e9
   85740:	0008d3a0 	.word	0x0008d3a0
   85744:	00085461 	.word	0x00085461

00085748 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   85748:	b580      	push	{r7, lr}
   8574a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   8574c:	4b06      	ldr	r3, [pc, #24]	; (85768 <udc_req_std_dev_get_configuration+0x20>)
   8574e:	88db      	ldrh	r3, [r3, #6]
   85750:	2b01      	cmp	r3, #1
   85752:	d001      	beq.n	85758 <udc_req_std_dev_get_configuration+0x10>
		return false;
   85754:	2300      	movs	r3, #0
   85756:	e004      	b.n	85762 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   85758:	2101      	movs	r1, #1
   8575a:	4804      	ldr	r0, [pc, #16]	; (8576c <udc_req_std_dev_get_configuration+0x24>)
   8575c:	4b04      	ldr	r3, [pc, #16]	; (85770 <udc_req_std_dev_get_configuration+0x28>)
   8575e:	4798      	blx	r3
	return true;
   85760:	2301      	movs	r3, #1
}
   85762:	4618      	mov	r0, r3
   85764:	bd80      	pop	{r7, pc}
   85766:	bf00      	nop
   85768:	20001810 	.word	0x20001810
   8576c:	2000135c 	.word	0x2000135c
   85770:	000827e9 	.word	0x000827e9

00085774 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   85774:	b580      	push	{r7, lr}
   85776:	b082      	sub	sp, #8
   85778:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   8577a:	4b37      	ldr	r3, [pc, #220]	; (85858 <udc_req_std_dev_set_configuration+0xe4>)
   8577c:	88db      	ldrh	r3, [r3, #6]
   8577e:	2b00      	cmp	r3, #0
   85780:	d001      	beq.n	85786 <udc_req_std_dev_set_configuration+0x12>
		return false;
   85782:	2300      	movs	r3, #0
   85784:	e063      	b.n	8584e <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   85786:	4b35      	ldr	r3, [pc, #212]	; (8585c <udc_req_std_dev_set_configuration+0xe8>)
   85788:	4798      	blx	r3
   8578a:	4603      	mov	r3, r0
   8578c:	2b00      	cmp	r3, #0
   8578e:	d101      	bne.n	85794 <udc_req_std_dev_set_configuration+0x20>
		return false;
   85790:	2300      	movs	r3, #0
   85792:	e05c      	b.n	8584e <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   85794:	4b32      	ldr	r3, [pc, #200]	; (85860 <udc_req_std_dev_set_configuration+0xec>)
   85796:	4798      	blx	r3
   85798:	4603      	mov	r3, r0
   8579a:	2b00      	cmp	r3, #0
   8579c:	d009      	beq.n	857b2 <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8579e:	4b2e      	ldr	r3, [pc, #184]	; (85858 <udc_req_std_dev_set_configuration+0xe4>)
   857a0:	885b      	ldrh	r3, [r3, #2]
   857a2:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   857a4:	4a2f      	ldr	r2, [pc, #188]	; (85864 <udc_req_std_dev_set_configuration+0xf0>)
   857a6:	6892      	ldr	r2, [r2, #8]
   857a8:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   857aa:	4293      	cmp	r3, r2
   857ac:	dd0b      	ble.n	857c6 <udc_req_std_dev_set_configuration+0x52>
			return false;
   857ae:	2300      	movs	r3, #0
   857b0:	e04d      	b.n	8584e <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   857b2:	4b29      	ldr	r3, [pc, #164]	; (85858 <udc_req_std_dev_set_configuration+0xe4>)
   857b4:	885b      	ldrh	r3, [r3, #2]
   857b6:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   857b8:	4a2a      	ldr	r2, [pc, #168]	; (85864 <udc_req_std_dev_set_configuration+0xf0>)
   857ba:	6812      	ldr	r2, [r2, #0]
   857bc:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   857be:	4293      	cmp	r3, r2
   857c0:	dd01      	ble.n	857c6 <udc_req_std_dev_set_configuration+0x52>
			return false;
   857c2:	2300      	movs	r3, #0
   857c4:	e043      	b.n	8584e <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   857c6:	4b28      	ldr	r3, [pc, #160]	; (85868 <udc_req_std_dev_set_configuration+0xf4>)
   857c8:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   857ca:	4b23      	ldr	r3, [pc, #140]	; (85858 <udc_req_std_dev_set_configuration+0xe4>)
   857cc:	885b      	ldrh	r3, [r3, #2]
   857ce:	b2da      	uxtb	r2, r3
   857d0:	4b26      	ldr	r3, [pc, #152]	; (8586c <udc_req_std_dev_set_configuration+0xf8>)
   857d2:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   857d4:	4b25      	ldr	r3, [pc, #148]	; (8586c <udc_req_std_dev_set_configuration+0xf8>)
   857d6:	781b      	ldrb	r3, [r3, #0]
   857d8:	2b00      	cmp	r3, #0
   857da:	d101      	bne.n	857e0 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   857dc:	2301      	movs	r3, #1
   857de:	e036      	b.n	8584e <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   857e0:	4b1f      	ldr	r3, [pc, #124]	; (85860 <udc_req_std_dev_set_configuration+0xec>)
   857e2:	4798      	blx	r3
   857e4:	4603      	mov	r3, r0
   857e6:	2b00      	cmp	r3, #0
   857e8:	d00b      	beq.n	85802 <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   857ea:	4b1e      	ldr	r3, [pc, #120]	; (85864 <udc_req_std_dev_set_configuration+0xf0>)
   857ec:	691a      	ldr	r2, [r3, #16]
   857ee:	4b1f      	ldr	r3, [pc, #124]	; (8586c <udc_req_std_dev_set_configuration+0xf8>)
   857f0:	781b      	ldrb	r3, [r3, #0]
   857f2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   857f6:	3b01      	subs	r3, #1
   857f8:	00db      	lsls	r3, r3, #3
   857fa:	4413      	add	r3, r2
   857fc:	4a1c      	ldr	r2, [pc, #112]	; (85870 <udc_req_std_dev_set_configuration+0xfc>)
   857fe:	6013      	str	r3, [r2, #0]
   85800:	e00a      	b.n	85818 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   85802:	4b18      	ldr	r3, [pc, #96]	; (85864 <udc_req_std_dev_set_configuration+0xf0>)
   85804:	685a      	ldr	r2, [r3, #4]
   85806:	4b19      	ldr	r3, [pc, #100]	; (8586c <udc_req_std_dev_set_configuration+0xf8>)
   85808:	781b      	ldrb	r3, [r3, #0]
   8580a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   8580e:	3b01      	subs	r3, #1
   85810:	00db      	lsls	r3, r3, #3
   85812:	4413      	add	r3, r2
   85814:	4a16      	ldr	r2, [pc, #88]	; (85870 <udc_req_std_dev_set_configuration+0xfc>)
   85816:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85818:	2300      	movs	r3, #0
   8581a:	71fb      	strb	r3, [r7, #7]
   8581c:	e00f      	b.n	8583e <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   8581e:	79fb      	ldrb	r3, [r7, #7]
   85820:	2100      	movs	r1, #0
   85822:	4618      	mov	r0, r3
   85824:	4b13      	ldr	r3, [pc, #76]	; (85874 <udc_req_std_dev_set_configuration+0x100>)
   85826:	4798      	blx	r3
   85828:	4603      	mov	r3, r0
   8582a:	f083 0301 	eor.w	r3, r3, #1
   8582e:	b2db      	uxtb	r3, r3
   85830:	2b00      	cmp	r3, #0
   85832:	d001      	beq.n	85838 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   85834:	2300      	movs	r3, #0
   85836:	e00a      	b.n	8584e <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   85838:	79fb      	ldrb	r3, [r7, #7]
   8583a:	3301      	adds	r3, #1
   8583c:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8583e:	4b0c      	ldr	r3, [pc, #48]	; (85870 <udc_req_std_dev_set_configuration+0xfc>)
   85840:	681b      	ldr	r3, [r3, #0]
   85842:	681b      	ldr	r3, [r3, #0]
   85844:	791b      	ldrb	r3, [r3, #4]
   85846:	79fa      	ldrb	r2, [r7, #7]
   85848:	429a      	cmp	r2, r3
   8584a:	d3e8      	bcc.n	8581e <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   8584c:	2301      	movs	r3, #1
}
   8584e:	4618      	mov	r0, r3
   85850:	3708      	adds	r7, #8
   85852:	46bd      	mov	sp, r7
   85854:	bd80      	pop	{r7, pc}
   85856:	bf00      	nop
   85858:	20001810 	.word	0x20001810
   8585c:	000827cd 	.word	0x000827cd
   85860:	00082765 	.word	0x00082765
   85864:	20000420 	.word	0x20000420
   85868:	00085179 	.word	0x00085179
   8586c:	2000135c 	.word	0x2000135c
   85870:	20001360 	.word	0x20001360
   85874:	000850d1 	.word	0x000850d1

00085878 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   85878:	b580      	push	{r7, lr}
   8587a:	b082      	sub	sp, #8
   8587c:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   8587e:	4b1e      	ldr	r3, [pc, #120]	; (858f8 <udc_req_std_iface_get_setting+0x80>)
   85880:	88db      	ldrh	r3, [r3, #6]
   85882:	2b01      	cmp	r3, #1
   85884:	d001      	beq.n	8588a <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   85886:	2300      	movs	r3, #0
   85888:	e032      	b.n	858f0 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   8588a:	4b1c      	ldr	r3, [pc, #112]	; (858fc <udc_req_std_iface_get_setting+0x84>)
   8588c:	781b      	ldrb	r3, [r3, #0]
   8588e:	2b00      	cmp	r3, #0
   85890:	d101      	bne.n	85896 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   85892:	2300      	movs	r3, #0
   85894:	e02c      	b.n	858f0 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   85896:	4b18      	ldr	r3, [pc, #96]	; (858f8 <udc_req_std_iface_get_setting+0x80>)
   85898:	889b      	ldrh	r3, [r3, #4]
   8589a:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8589c:	4b18      	ldr	r3, [pc, #96]	; (85900 <udc_req_std_iface_get_setting+0x88>)
   8589e:	681b      	ldr	r3, [r3, #0]
   858a0:	681b      	ldr	r3, [r3, #0]
   858a2:	791b      	ldrb	r3, [r3, #4]
   858a4:	79fa      	ldrb	r2, [r7, #7]
   858a6:	429a      	cmp	r2, r3
   858a8:	d301      	bcc.n	858ae <udc_req_std_iface_get_setting+0x36>
		return false;
   858aa:	2300      	movs	r3, #0
   858ac:	e020      	b.n	858f0 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   858ae:	79fb      	ldrb	r3, [r7, #7]
   858b0:	2100      	movs	r1, #0
   858b2:	4618      	mov	r0, r3
   858b4:	4b13      	ldr	r3, [pc, #76]	; (85904 <udc_req_std_iface_get_setting+0x8c>)
   858b6:	4798      	blx	r3
   858b8:	4603      	mov	r3, r0
   858ba:	f083 0301 	eor.w	r3, r3, #1
   858be:	b2db      	uxtb	r3, r3
   858c0:	2b00      	cmp	r3, #0
   858c2:	d001      	beq.n	858c8 <udc_req_std_iface_get_setting+0x50>
		return false;
   858c4:	2300      	movs	r3, #0
   858c6:	e013      	b.n	858f0 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   858c8:	4b0d      	ldr	r3, [pc, #52]	; (85900 <udc_req_std_iface_get_setting+0x88>)
   858ca:	681b      	ldr	r3, [r3, #0]
   858cc:	685a      	ldr	r2, [r3, #4]
   858ce:	79fb      	ldrb	r3, [r7, #7]
   858d0:	009b      	lsls	r3, r3, #2
   858d2:	4413      	add	r3, r2
   858d4:	681b      	ldr	r3, [r3, #0]
   858d6:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   858d8:	683b      	ldr	r3, [r7, #0]
   858da:	68db      	ldr	r3, [r3, #12]
   858dc:	4798      	blx	r3
   858de:	4603      	mov	r3, r0
   858e0:	461a      	mov	r2, r3
   858e2:	4b09      	ldr	r3, [pc, #36]	; (85908 <udc_req_std_iface_get_setting+0x90>)
   858e4:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   858e6:	2101      	movs	r1, #1
   858e8:	4807      	ldr	r0, [pc, #28]	; (85908 <udc_req_std_iface_get_setting+0x90>)
   858ea:	4b08      	ldr	r3, [pc, #32]	; (8590c <udc_req_std_iface_get_setting+0x94>)
   858ec:	4798      	blx	r3
	return true;
   858ee:	2301      	movs	r3, #1
}
   858f0:	4618      	mov	r0, r3
   858f2:	3708      	adds	r7, #8
   858f4:	46bd      	mov	sp, r7
   858f6:	bd80      	pop	{r7, pc}
   858f8:	20001810 	.word	0x20001810
   858fc:	2000135c 	.word	0x2000135c
   85900:	20001360 	.word	0x20001360
   85904:	00084f95 	.word	0x00084f95
   85908:	2000136a 	.word	0x2000136a
   8590c:	000827e9 	.word	0x000827e9

00085910 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   85910:	b580      	push	{r7, lr}
   85912:	b082      	sub	sp, #8
   85914:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   85916:	4b14      	ldr	r3, [pc, #80]	; (85968 <udc_req_std_iface_set_setting+0x58>)
   85918:	88db      	ldrh	r3, [r3, #6]
   8591a:	2b00      	cmp	r3, #0
   8591c:	d001      	beq.n	85922 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   8591e:	2300      	movs	r3, #0
   85920:	e01e      	b.n	85960 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   85922:	4b12      	ldr	r3, [pc, #72]	; (8596c <udc_req_std_iface_set_setting+0x5c>)
   85924:	781b      	ldrb	r3, [r3, #0]
   85926:	2b00      	cmp	r3, #0
   85928:	d101      	bne.n	8592e <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   8592a:	2300      	movs	r3, #0
   8592c:	e018      	b.n	85960 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8592e:	4b0e      	ldr	r3, [pc, #56]	; (85968 <udc_req_std_iface_set_setting+0x58>)
   85930:	889b      	ldrh	r3, [r3, #4]
   85932:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   85934:	4b0c      	ldr	r3, [pc, #48]	; (85968 <udc_req_std_iface_set_setting+0x58>)
   85936:	885b      	ldrh	r3, [r3, #2]
   85938:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   8593a:	79fb      	ldrb	r3, [r7, #7]
   8593c:	4618      	mov	r0, r3
   8593e:	4b0c      	ldr	r3, [pc, #48]	; (85970 <udc_req_std_iface_set_setting+0x60>)
   85940:	4798      	blx	r3
   85942:	4603      	mov	r3, r0
   85944:	f083 0301 	eor.w	r3, r3, #1
   85948:	b2db      	uxtb	r3, r3
   8594a:	2b00      	cmp	r3, #0
   8594c:	d001      	beq.n	85952 <udc_req_std_iface_set_setting+0x42>
		return false;
   8594e:	2300      	movs	r3, #0
   85950:	e006      	b.n	85960 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   85952:	79ba      	ldrb	r2, [r7, #6]
   85954:	79fb      	ldrb	r3, [r7, #7]
   85956:	4611      	mov	r1, r2
   85958:	4618      	mov	r0, r3
   8595a:	4b06      	ldr	r3, [pc, #24]	; (85974 <udc_req_std_iface_set_setting+0x64>)
   8595c:	4798      	blx	r3
   8595e:	4603      	mov	r3, r0
}
   85960:	4618      	mov	r0, r3
   85962:	3708      	adds	r7, #8
   85964:	46bd      	mov	sp, r7
   85966:	bd80      	pop	{r7, pc}
   85968:	20001810 	.word	0x20001810
   8596c:	2000135c 	.word	0x2000135c
   85970:	00085031 	.word	0x00085031
   85974:	000850d1 	.word	0x000850d1

00085978 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   85978:	b580      	push	{r7, lr}
   8597a:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   8597c:	4b55      	ldr	r3, [pc, #340]	; (85ad4 <udc_reqstd+0x15c>)
   8597e:	781b      	ldrb	r3, [r3, #0]
   85980:	b25b      	sxtb	r3, r3
   85982:	2b00      	cmp	r3, #0
   85984:	da44      	bge.n	85a10 <udc_reqstd+0x98>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   85986:	4b53      	ldr	r3, [pc, #332]	; (85ad4 <udc_reqstd+0x15c>)
   85988:	88db      	ldrh	r3, [r3, #6]
   8598a:	2b00      	cmp	r3, #0
   8598c:	d101      	bne.n	85992 <udc_reqstd+0x1a>
			return false; // Error for USB host
   8598e:	2300      	movs	r3, #0
   85990:	e09d      	b.n	85ace <udc_reqstd+0x156>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   85992:	4b50      	ldr	r3, [pc, #320]	; (85ad4 <udc_reqstd+0x15c>)
   85994:	781b      	ldrb	r3, [r3, #0]
   85996:	f003 031f 	and.w	r3, r3, #31
   8599a:	2b00      	cmp	r3, #0
   8599c:	d116      	bne.n	859cc <udc_reqstd+0x54>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   8599e:	4b4d      	ldr	r3, [pc, #308]	; (85ad4 <udc_reqstd+0x15c>)
   859a0:	785b      	ldrb	r3, [r3, #1]
   859a2:	2b08      	cmp	r3, #8
   859a4:	d00e      	beq.n	859c4 <udc_reqstd+0x4c>
   859a6:	2b08      	cmp	r3, #8
   859a8:	dc12      	bgt.n	859d0 <udc_reqstd+0x58>
   859aa:	2b00      	cmp	r3, #0
   859ac:	d002      	beq.n	859b4 <udc_reqstd+0x3c>
   859ae:	2b06      	cmp	r3, #6
   859b0:	d004      	beq.n	859bc <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   859b2:	e00d      	b.n	859d0 <udc_reqstd+0x58>
				return udc_req_std_dev_get_status();
   859b4:	4b48      	ldr	r3, [pc, #288]	; (85ad8 <udc_reqstd+0x160>)
   859b6:	4798      	blx	r3
   859b8:	4603      	mov	r3, r0
   859ba:	e088      	b.n	85ace <udc_reqstd+0x156>
				return udc_req_std_dev_get_descriptor();
   859bc:	4b47      	ldr	r3, [pc, #284]	; (85adc <udc_reqstd+0x164>)
   859be:	4798      	blx	r3
   859c0:	4603      	mov	r3, r0
   859c2:	e084      	b.n	85ace <udc_reqstd+0x156>
				return udc_req_std_dev_get_configuration();
   859c4:	4b46      	ldr	r3, [pc, #280]	; (85ae0 <udc_reqstd+0x168>)
   859c6:	4798      	blx	r3
   859c8:	4603      	mov	r3, r0
   859ca:	e080      	b.n	85ace <udc_reqstd+0x156>
			}
		}
   859cc:	bf00      	nop
   859ce:	e000      	b.n	859d2 <udc_reqstd+0x5a>
				break;
   859d0:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   859d2:	4b40      	ldr	r3, [pc, #256]	; (85ad4 <udc_reqstd+0x15c>)
   859d4:	781b      	ldrb	r3, [r3, #0]
   859d6:	f003 031f 	and.w	r3, r3, #31
   859da:	2b01      	cmp	r3, #1
   859dc:	d107      	bne.n	859ee <udc_reqstd+0x76>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   859de:	4b3d      	ldr	r3, [pc, #244]	; (85ad4 <udc_reqstd+0x15c>)
   859e0:	785b      	ldrb	r3, [r3, #1]
   859e2:	2b0a      	cmp	r3, #10
   859e4:	d105      	bne.n	859f2 <udc_reqstd+0x7a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   859e6:	4b3f      	ldr	r3, [pc, #252]	; (85ae4 <udc_reqstd+0x16c>)
   859e8:	4798      	blx	r3
   859ea:	4603      	mov	r3, r0
   859ec:	e06f      	b.n	85ace <udc_reqstd+0x156>
			default:
				break;
			}
		}
   859ee:	bf00      	nop
   859f0:	e000      	b.n	859f4 <udc_reqstd+0x7c>
				break;
   859f2:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   859f4:	4b37      	ldr	r3, [pc, #220]	; (85ad4 <udc_reqstd+0x15c>)
   859f6:	781b      	ldrb	r3, [r3, #0]
   859f8:	f003 031f 	and.w	r3, r3, #31
   859fc:	2b02      	cmp	r3, #2
   859fe:	d160      	bne.n	85ac2 <udc_reqstd+0x14a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   85a00:	4b34      	ldr	r3, [pc, #208]	; (85ad4 <udc_reqstd+0x15c>)
   85a02:	785b      	ldrb	r3, [r3, #1]
   85a04:	2b00      	cmp	r3, #0
   85a06:	d15e      	bne.n	85ac6 <udc_reqstd+0x14e>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   85a08:	4b37      	ldr	r3, [pc, #220]	; (85ae8 <udc_reqstd+0x170>)
   85a0a:	4798      	blx	r3
   85a0c:	4603      	mov	r3, r0
   85a0e:	e05e      	b.n	85ace <udc_reqstd+0x156>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   85a10:	4b30      	ldr	r3, [pc, #192]	; (85ad4 <udc_reqstd+0x15c>)
   85a12:	781b      	ldrb	r3, [r3, #0]
   85a14:	f003 031f 	and.w	r3, r3, #31
   85a18:	2b00      	cmp	r3, #0
   85a1a:	d129      	bne.n	85a70 <udc_reqstd+0xf8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   85a1c:	4b2d      	ldr	r3, [pc, #180]	; (85ad4 <udc_reqstd+0x15c>)
   85a1e:	785b      	ldrb	r3, [r3, #1]
   85a20:	3b01      	subs	r3, #1
   85a22:	2b08      	cmp	r3, #8
   85a24:	d826      	bhi.n	85a74 <udc_reqstd+0xfc>
   85a26:	a201      	add	r2, pc, #4	; (adr r2, 85a2c <udc_reqstd+0xb4>)
   85a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85a2c:	00085a59 	.word	0x00085a59
   85a30:	00085a75 	.word	0x00085a75
   85a34:	00085a61 	.word	0x00085a61
   85a38:	00085a75 	.word	0x00085a75
   85a3c:	00085a51 	.word	0x00085a51
   85a40:	00085a75 	.word	0x00085a75
   85a44:	00085a75 	.word	0x00085a75
   85a48:	00085a75 	.word	0x00085a75
   85a4c:	00085a69 	.word	0x00085a69
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   85a50:	4b26      	ldr	r3, [pc, #152]	; (85aec <udc_reqstd+0x174>)
   85a52:	4798      	blx	r3
   85a54:	4603      	mov	r3, r0
   85a56:	e03a      	b.n	85ace <udc_reqstd+0x156>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   85a58:	4b25      	ldr	r3, [pc, #148]	; (85af0 <udc_reqstd+0x178>)
   85a5a:	4798      	blx	r3
   85a5c:	4603      	mov	r3, r0
   85a5e:	e036      	b.n	85ace <udc_reqstd+0x156>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   85a60:	4b24      	ldr	r3, [pc, #144]	; (85af4 <udc_reqstd+0x17c>)
   85a62:	4798      	blx	r3
   85a64:	4603      	mov	r3, r0
   85a66:	e032      	b.n	85ace <udc_reqstd+0x156>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   85a68:	4b23      	ldr	r3, [pc, #140]	; (85af8 <udc_reqstd+0x180>)
   85a6a:	4798      	blx	r3
   85a6c:	4603      	mov	r3, r0
   85a6e:	e02e      	b.n	85ace <udc_reqstd+0x156>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   85a70:	bf00      	nop
   85a72:	e000      	b.n	85a76 <udc_reqstd+0xfe>
				break;
   85a74:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   85a76:	4b17      	ldr	r3, [pc, #92]	; (85ad4 <udc_reqstd+0x15c>)
   85a78:	781b      	ldrb	r3, [r3, #0]
   85a7a:	f003 031f 	and.w	r3, r3, #31
   85a7e:	2b01      	cmp	r3, #1
   85a80:	d107      	bne.n	85a92 <udc_reqstd+0x11a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   85a82:	4b14      	ldr	r3, [pc, #80]	; (85ad4 <udc_reqstd+0x15c>)
   85a84:	785b      	ldrb	r3, [r3, #1]
   85a86:	2b0b      	cmp	r3, #11
   85a88:	d105      	bne.n	85a96 <udc_reqstd+0x11e>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   85a8a:	4b1c      	ldr	r3, [pc, #112]	; (85afc <udc_reqstd+0x184>)
   85a8c:	4798      	blx	r3
   85a8e:	4603      	mov	r3, r0
   85a90:	e01d      	b.n	85ace <udc_reqstd+0x156>
			default:
				break;
			}
		}
   85a92:	bf00      	nop
   85a94:	e000      	b.n	85a98 <udc_reqstd+0x120>
				break;
   85a96:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   85a98:	4b0e      	ldr	r3, [pc, #56]	; (85ad4 <udc_reqstd+0x15c>)
   85a9a:	781b      	ldrb	r3, [r3, #0]
   85a9c:	f003 031f 	and.w	r3, r3, #31
   85aa0:	2b02      	cmp	r3, #2
   85aa2:	d112      	bne.n	85aca <udc_reqstd+0x152>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   85aa4:	4b0b      	ldr	r3, [pc, #44]	; (85ad4 <udc_reqstd+0x15c>)
   85aa6:	785b      	ldrb	r3, [r3, #1]
   85aa8:	2b01      	cmp	r3, #1
   85aaa:	d002      	beq.n	85ab2 <udc_reqstd+0x13a>
   85aac:	2b03      	cmp	r3, #3
   85aae:	d004      	beq.n	85aba <udc_reqstd+0x142>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   85ab0:	e00c      	b.n	85acc <udc_reqstd+0x154>
				return udc_req_std_ep_clear_feature();
   85ab2:	4b13      	ldr	r3, [pc, #76]	; (85b00 <udc_reqstd+0x188>)
   85ab4:	4798      	blx	r3
   85ab6:	4603      	mov	r3, r0
   85ab8:	e009      	b.n	85ace <udc_reqstd+0x156>
				return udc_req_std_ep_set_feature();
   85aba:	4b12      	ldr	r3, [pc, #72]	; (85b04 <udc_reqstd+0x18c>)
   85abc:	4798      	blx	r3
   85abe:	4603      	mov	r3, r0
   85ac0:	e005      	b.n	85ace <udc_reqstd+0x156>
		}
   85ac2:	bf00      	nop
   85ac4:	e002      	b.n	85acc <udc_reqstd+0x154>
				break;
   85ac6:	bf00      	nop
   85ac8:	e000      	b.n	85acc <udc_reqstd+0x154>
			}
		}
   85aca:	bf00      	nop
#endif
	}
	return false;
   85acc:	2300      	movs	r3, #0
}
   85ace:	4618      	mov	r0, r3
   85ad0:	bd80      	pop	{r7, pc}
   85ad2:	bf00      	nop
   85ad4:	20001810 	.word	0x20001810
   85ad8:	0008522d 	.word	0x0008522d
   85adc:	0008552d 	.word	0x0008552d
   85ae0:	00085749 	.word	0x00085749
   85ae4:	00085879 	.word	0x00085879
   85ae8:	00085259 	.word	0x00085259
   85aec:	00085439 	.word	0x00085439
   85af0:	0008529d 	.word	0x0008529d
   85af4:	00085311 	.word	0x00085311
   85af8:	00085775 	.word	0x00085775
   85afc:	00085911 	.word	0x00085911
   85b00:	000852d9 	.word	0x000852d9
   85b04:	000853cd 	.word	0x000853cd

00085b08 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   85b08:	b580      	push	{r7, lr}
   85b0a:	b082      	sub	sp, #8
   85b0c:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   85b0e:	4b20      	ldr	r3, [pc, #128]	; (85b90 <udc_req_iface+0x88>)
   85b10:	781b      	ldrb	r3, [r3, #0]
   85b12:	2b00      	cmp	r3, #0
   85b14:	d101      	bne.n	85b1a <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   85b16:	2300      	movs	r3, #0
   85b18:	e036      	b.n	85b88 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   85b1a:	4b1e      	ldr	r3, [pc, #120]	; (85b94 <udc_req_iface+0x8c>)
   85b1c:	889b      	ldrh	r3, [r3, #4]
   85b1e:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   85b20:	4b1d      	ldr	r3, [pc, #116]	; (85b98 <udc_req_iface+0x90>)
   85b22:	681b      	ldr	r3, [r3, #0]
   85b24:	681b      	ldr	r3, [r3, #0]
   85b26:	791b      	ldrb	r3, [r3, #4]
   85b28:	79fa      	ldrb	r2, [r7, #7]
   85b2a:	429a      	cmp	r2, r3
   85b2c:	d301      	bcc.n	85b32 <udc_req_iface+0x2a>
		return false;
   85b2e:	2300      	movs	r3, #0
   85b30:	e02a      	b.n	85b88 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   85b32:	79fb      	ldrb	r3, [r7, #7]
   85b34:	2100      	movs	r1, #0
   85b36:	4618      	mov	r0, r3
   85b38:	4b18      	ldr	r3, [pc, #96]	; (85b9c <udc_req_iface+0x94>)
   85b3a:	4798      	blx	r3
   85b3c:	4603      	mov	r3, r0
   85b3e:	f083 0301 	eor.w	r3, r3, #1
   85b42:	b2db      	uxtb	r3, r3
   85b44:	2b00      	cmp	r3, #0
   85b46:	d001      	beq.n	85b4c <udc_req_iface+0x44>
		return false;
   85b48:	2300      	movs	r3, #0
   85b4a:	e01d      	b.n	85b88 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   85b4c:	4b12      	ldr	r3, [pc, #72]	; (85b98 <udc_req_iface+0x90>)
   85b4e:	681b      	ldr	r3, [r3, #0]
   85b50:	685a      	ldr	r2, [r3, #4]
   85b52:	79fb      	ldrb	r3, [r7, #7]
   85b54:	009b      	lsls	r3, r3, #2
   85b56:	4413      	add	r3, r2
   85b58:	681b      	ldr	r3, [r3, #0]
   85b5a:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   85b5c:	683b      	ldr	r3, [r7, #0]
   85b5e:	68db      	ldr	r3, [r3, #12]
   85b60:	4798      	blx	r3
   85b62:	4603      	mov	r3, r0
   85b64:	461a      	mov	r2, r3
   85b66:	79fb      	ldrb	r3, [r7, #7]
   85b68:	4611      	mov	r1, r2
   85b6a:	4618      	mov	r0, r3
   85b6c:	4b0b      	ldr	r3, [pc, #44]	; (85b9c <udc_req_iface+0x94>)
   85b6e:	4798      	blx	r3
   85b70:	4603      	mov	r3, r0
   85b72:	f083 0301 	eor.w	r3, r3, #1
   85b76:	b2db      	uxtb	r3, r3
   85b78:	2b00      	cmp	r3, #0
   85b7a:	d001      	beq.n	85b80 <udc_req_iface+0x78>
		return false;
   85b7c:	2300      	movs	r3, #0
   85b7e:	e003      	b.n	85b88 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   85b80:	683b      	ldr	r3, [r7, #0]
   85b82:	689b      	ldr	r3, [r3, #8]
   85b84:	4798      	blx	r3
   85b86:	4603      	mov	r3, r0
}
   85b88:	4618      	mov	r0, r3
   85b8a:	3708      	adds	r7, #8
   85b8c:	46bd      	mov	sp, r7
   85b8e:	bd80      	pop	{r7, pc}
   85b90:	2000135c 	.word	0x2000135c
   85b94:	20001810 	.word	0x20001810
   85b98:	20001360 	.word	0x20001360
   85b9c:	00084f95 	.word	0x00084f95

00085ba0 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   85ba0:	b580      	push	{r7, lr}
   85ba2:	b082      	sub	sp, #8
   85ba4:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   85ba6:	4b1e      	ldr	r3, [pc, #120]	; (85c20 <udc_req_ep+0x80>)
   85ba8:	781b      	ldrb	r3, [r3, #0]
   85baa:	2b00      	cmp	r3, #0
   85bac:	d101      	bne.n	85bb2 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   85bae:	2300      	movs	r3, #0
   85bb0:	e032      	b.n	85c18 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   85bb2:	4b1c      	ldr	r3, [pc, #112]	; (85c24 <udc_req_ep+0x84>)
   85bb4:	889b      	ldrh	r3, [r3, #4]
   85bb6:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85bb8:	2300      	movs	r3, #0
   85bba:	71fb      	strb	r3, [r7, #7]
   85bbc:	e024      	b.n	85c08 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   85bbe:	4b1a      	ldr	r3, [pc, #104]	; (85c28 <udc_req_ep+0x88>)
   85bc0:	681b      	ldr	r3, [r3, #0]
   85bc2:	685a      	ldr	r2, [r3, #4]
   85bc4:	79fb      	ldrb	r3, [r7, #7]
   85bc6:	009b      	lsls	r3, r3, #2
   85bc8:	4413      	add	r3, r2
   85bca:	681b      	ldr	r3, [r3, #0]
   85bcc:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   85bce:	683b      	ldr	r3, [r7, #0]
   85bd0:	68db      	ldr	r3, [r3, #12]
   85bd2:	4798      	blx	r3
   85bd4:	4603      	mov	r3, r0
   85bd6:	461a      	mov	r2, r3
   85bd8:	79fb      	ldrb	r3, [r7, #7]
   85bda:	4611      	mov	r1, r2
   85bdc:	4618      	mov	r0, r3
   85bde:	4b13      	ldr	r3, [pc, #76]	; (85c2c <udc_req_ep+0x8c>)
   85be0:	4798      	blx	r3
   85be2:	4603      	mov	r3, r0
   85be4:	f083 0301 	eor.w	r3, r3, #1
   85be8:	b2db      	uxtb	r3, r3
   85bea:	2b00      	cmp	r3, #0
   85bec:	d001      	beq.n	85bf2 <udc_req_ep+0x52>
			return false;
   85bee:	2300      	movs	r3, #0
   85bf0:	e012      	b.n	85c18 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   85bf2:	683b      	ldr	r3, [r7, #0]
   85bf4:	689b      	ldr	r3, [r3, #8]
   85bf6:	4798      	blx	r3
   85bf8:	4603      	mov	r3, r0
   85bfa:	2b00      	cmp	r3, #0
   85bfc:	d001      	beq.n	85c02 <udc_req_ep+0x62>
			return true;
   85bfe:	2301      	movs	r3, #1
   85c00:	e00a      	b.n	85c18 <udc_req_ep+0x78>
			iface_num++) {
   85c02:	79fb      	ldrb	r3, [r7, #7]
   85c04:	3301      	adds	r3, #1
   85c06:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   85c08:	4b07      	ldr	r3, [pc, #28]	; (85c28 <udc_req_ep+0x88>)
   85c0a:	681b      	ldr	r3, [r3, #0]
   85c0c:	681b      	ldr	r3, [r3, #0]
   85c0e:	791b      	ldrb	r3, [r3, #4]
   85c10:	79fa      	ldrb	r2, [r7, #7]
   85c12:	429a      	cmp	r2, r3
   85c14:	d3d3      	bcc.n	85bbe <udc_req_ep+0x1e>
		}
	}
	return false;
   85c16:	2300      	movs	r3, #0
}
   85c18:	4618      	mov	r0, r3
   85c1a:	3708      	adds	r7, #8
   85c1c:	46bd      	mov	sp, r7
   85c1e:	bd80      	pop	{r7, pc}
   85c20:	2000135c 	.word	0x2000135c
   85c24:	20001810 	.word	0x20001810
   85c28:	20001360 	.word	0x20001360
   85c2c:	00084f95 	.word	0x00084f95

00085c30 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   85c30:	b580      	push	{r7, lr}
   85c32:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   85c34:	4b25      	ldr	r3, [pc, #148]	; (85ccc <udc_process_setup+0x9c>)
   85c36:	2200      	movs	r2, #0
   85c38:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   85c3a:	4b24      	ldr	r3, [pc, #144]	; (85ccc <udc_process_setup+0x9c>)
   85c3c:	2200      	movs	r2, #0
   85c3e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   85c40:	4b22      	ldr	r3, [pc, #136]	; (85ccc <udc_process_setup+0x9c>)
   85c42:	2200      	movs	r2, #0
   85c44:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   85c46:	4b21      	ldr	r3, [pc, #132]	; (85ccc <udc_process_setup+0x9c>)
   85c48:	781b      	ldrb	r3, [r3, #0]
   85c4a:	2bc0      	cmp	r3, #192	; 0xc0
   85c4c:	d109      	bne.n	85c62 <udc_process_setup+0x32>
   85c4e:	4b1f      	ldr	r3, [pc, #124]	; (85ccc <udc_process_setup+0x9c>)
   85c50:	785b      	ldrb	r3, [r3, #1]
   85c52:	2b01      	cmp	r3, #1
   85c54:	d105      	bne.n	85c62 <udc_process_setup+0x32>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   85c56:	219e      	movs	r1, #158	; 0x9e
   85c58:	481d      	ldr	r0, [pc, #116]	; (85cd0 <udc_process_setup+0xa0>)
   85c5a:	4b1e      	ldr	r3, [pc, #120]	; (85cd4 <udc_process_setup+0xa4>)
   85c5c:	4798      	blx	r3
		return true;
   85c5e:	2301      	movs	r3, #1
   85c60:	e032      	b.n	85cc8 <udc_process_setup+0x98>
	}

	if (Udd_setup_is_in()) {
   85c62:	4b1a      	ldr	r3, [pc, #104]	; (85ccc <udc_process_setup+0x9c>)
   85c64:	781b      	ldrb	r3, [r3, #0]
   85c66:	b25b      	sxtb	r3, r3
   85c68:	2b00      	cmp	r3, #0
   85c6a:	da05      	bge.n	85c78 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   85c6c:	4b17      	ldr	r3, [pc, #92]	; (85ccc <udc_process_setup+0x9c>)
   85c6e:	88db      	ldrh	r3, [r3, #6]
   85c70:	2b00      	cmp	r3, #0
   85c72:	d101      	bne.n	85c78 <udc_process_setup+0x48>
			return false; // Error from USB host
   85c74:	2300      	movs	r3, #0
   85c76:	e027      	b.n	85cc8 <udc_process_setup+0x98>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   85c78:	4b14      	ldr	r3, [pc, #80]	; (85ccc <udc_process_setup+0x9c>)
   85c7a:	781b      	ldrb	r3, [r3, #0]
   85c7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   85c80:	2b00      	cmp	r3, #0
   85c82:	d106      	bne.n	85c92 <udc_process_setup+0x62>
		if (udc_reqstd()) {
   85c84:	4b14      	ldr	r3, [pc, #80]	; (85cd8 <udc_process_setup+0xa8>)
   85c86:	4798      	blx	r3
   85c88:	4603      	mov	r3, r0
   85c8a:	2b00      	cmp	r3, #0
   85c8c:	d001      	beq.n	85c92 <udc_process_setup+0x62>
			return true;
   85c8e:	2301      	movs	r3, #1
   85c90:	e01a      	b.n	85cc8 <udc_process_setup+0x98>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   85c92:	4b0e      	ldr	r3, [pc, #56]	; (85ccc <udc_process_setup+0x9c>)
   85c94:	781b      	ldrb	r3, [r3, #0]
   85c96:	f003 031f 	and.w	r3, r3, #31
   85c9a:	2b01      	cmp	r3, #1
   85c9c:	d106      	bne.n	85cac <udc_process_setup+0x7c>
		if (udc_req_iface()) {
   85c9e:	4b0f      	ldr	r3, [pc, #60]	; (85cdc <udc_process_setup+0xac>)
   85ca0:	4798      	blx	r3
   85ca2:	4603      	mov	r3, r0
   85ca4:	2b00      	cmp	r3, #0
   85ca6:	d001      	beq.n	85cac <udc_process_setup+0x7c>
			return true;
   85ca8:	2301      	movs	r3, #1
   85caa:	e00d      	b.n	85cc8 <udc_process_setup+0x98>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   85cac:	4b07      	ldr	r3, [pc, #28]	; (85ccc <udc_process_setup+0x9c>)
   85cae:	781b      	ldrb	r3, [r3, #0]
   85cb0:	f003 031f 	and.w	r3, r3, #31
   85cb4:	2b02      	cmp	r3, #2
   85cb6:	d106      	bne.n	85cc6 <udc_process_setup+0x96>
		if (udc_req_ep()) {
   85cb8:	4b09      	ldr	r3, [pc, #36]	; (85ce0 <udc_process_setup+0xb0>)
   85cba:	4798      	blx	r3
   85cbc:	4603      	mov	r3, r0
   85cbe:	2b00      	cmp	r3, #0
   85cc0:	d001      	beq.n	85cc6 <udc_process_setup+0x96>
			return true;
   85cc2:	2301      	movs	r3, #1
   85cc4:	e000      	b.n	85cc8 <udc_process_setup+0x98>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   85cc6:	2300      	movs	r3, #0
#endif
}
   85cc8:	4618      	mov	r0, r3
   85cca:	bd80      	pop	{r7, pc}
   85ccc:	20001810 	.word	0x20001810
   85cd0:	2000030c 	.word	0x2000030c
   85cd4:	000827e9 	.word	0x000827e9
   85cd8:	00085979 	.word	0x00085979
   85cdc:	00085b09 	.word	0x00085b09
   85ce0:	00085ba1 	.word	0x00085ba1

00085ce4 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   85ce4:	b5b0      	push	{r4, r5, r7, lr}
   85ce6:	b09c      	sub	sp, #112	; 0x70
   85ce8:	af00      	add	r7, sp, #0
   85cea:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   85cec:	687b      	ldr	r3, [r7, #4]
   85cee:	2b05      	cmp	r3, #5
   85cf0:	f000 81e8 	beq.w	860c4 <pmc_sleep+0x3e0>
   85cf4:	687b      	ldr	r3, [r7, #4]
   85cf6:	2b05      	cmp	r3, #5
   85cf8:	f300 81f5 	bgt.w	860e6 <pmc_sleep+0x402>
   85cfc:	687b      	ldr	r3, [r7, #4]
   85cfe:	2b02      	cmp	r3, #2
   85d00:	dc03      	bgt.n	85d0a <pmc_sleep+0x26>
   85d02:	687b      	ldr	r3, [r7, #4]
   85d04:	2b00      	cmp	r3, #0
   85d06:	dc06      	bgt.n	85d16 <pmc_sleep+0x32>
		__WFE() ;
#endif
		break;
#endif
	}
}
   85d08:	e1ed      	b.n	860e6 <pmc_sleep+0x402>
   85d0a:	687b      	ldr	r3, [r7, #4]
   85d0c:	3b03      	subs	r3, #3
	switch (sleep_mode) {
   85d0e:	2b01      	cmp	r3, #1
   85d10:	f200 81e9 	bhi.w	860e6 <pmc_sleep+0x402>
   85d14:	e01b      	b.n	85d4e <pmc_sleep+0x6a>
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   85d16:	4b88      	ldr	r3, [pc, #544]	; (85f38 <pmc_sleep+0x254>)
   85d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   85d1a:	4a87      	ldr	r2, [pc, #540]	; (85f38 <pmc_sleep+0x254>)
   85d1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   85d20:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   85d22:	4b86      	ldr	r3, [pc, #536]	; (85f3c <pmc_sleep+0x258>)
   85d24:	691b      	ldr	r3, [r3, #16]
   85d26:	4a85      	ldr	r2, [pc, #532]	; (85f3c <pmc_sleep+0x258>)
   85d28:	f023 0304 	bic.w	r3, r3, #4
   85d2c:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   85d2e:	4b84      	ldr	r3, [pc, #528]	; (85f40 <pmc_sleep+0x25c>)
   85d30:	2201      	movs	r2, #1
   85d32:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   85d34:	f3bf 8f5f 	dmb	sy
}
   85d38:	bf00      	nop
  __ASM volatile ("cpsie i");
   85d3a:	b662      	cpsie	i
}
   85d3c:	bf00      	nop
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   85d3e:	687b      	ldr	r3, [r7, #4]
   85d40:	2b02      	cmp	r3, #2
   85d42:	d101      	bne.n	85d48 <pmc_sleep+0x64>
  __ASM volatile ("wfi");
   85d44:	bf30      	wfi
}
   85d46:	e001      	b.n	85d4c <pmc_sleep+0x68>
  __ASM volatile ("wfe");
   85d48:	bf20      	wfe
}
   85d4a:	bf00      	nop
		break;
   85d4c:	e1cb      	b.n	860e6 <pmc_sleep+0x402>
  __ASM volatile ("cpsid i");
   85d4e:	b672      	cpsid	i
}
   85d50:	bf00      	nop
  __ASM volatile ("dmb");
   85d52:	f3bf 8f5f 	dmb	sy
}
   85d56:	bf00      	nop
		cpu_irq_disable();
   85d58:	4b79      	ldr	r3, [pc, #484]	; (85f40 <pmc_sleep+0x25c>)
   85d5a:	2200      	movs	r2, #0
   85d5c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   85d5e:	4b79      	ldr	r3, [pc, #484]	; (85f44 <pmc_sleep+0x260>)
   85d60:	2201      	movs	r2, #1
   85d62:	701a      	strb	r2, [r3, #0]
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   85d64:	687b      	ldr	r3, [r7, #4]
   85d66:	2b04      	cmp	r3, #4
   85d68:	bf0c      	ite	eq
   85d6a:	2301      	moveq	r3, #1
   85d6c:	2300      	movne	r3, #0
   85d6e:	b2da      	uxtb	r2, r3
   85d70:	f107 0320 	add.w	r3, r7, #32
   85d74:	64fb      	str	r3, [r7, #76]	; 0x4c
   85d76:	f107 031c 	add.w	r3, r7, #28
   85d7a:	64bb      	str	r3, [r7, #72]	; 0x48
   85d7c:	f107 0318 	add.w	r3, r7, #24
   85d80:	647b      	str	r3, [r7, #68]	; 0x44
   85d82:	f107 0314 	add.w	r3, r7, #20
   85d86:	643b      	str	r3, [r7, #64]	; 0x40
   85d88:	f107 0310 	add.w	r3, r7, #16
   85d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   85d8e:	f107 030c 	add.w	r3, r7, #12
   85d92:	63bb      	str	r3, [r7, #56]	; 0x38
   85d94:	4613      	mov	r3, r2
   85d96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   85d9a:	4b67      	ldr	r3, [pc, #412]	; (85f38 <pmc_sleep+0x254>)
   85d9c:	6a1b      	ldr	r3, [r3, #32]
   85d9e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   85da0:	4b65      	ldr	r3, [pc, #404]	; (85f38 <pmc_sleep+0x254>)
   85da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85da4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   85da6:	4b68      	ldr	r3, [pc, #416]	; (85f48 <pmc_sleep+0x264>)
   85da8:	681b      	ldr	r3, [r3, #0]
   85daa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   85dac:	4b67      	ldr	r3, [pc, #412]	; (85f4c <pmc_sleep+0x268>)
   85dae:	681b      	ldr	r3, [r3, #0]
   85db0:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   85db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   85db4:	2b00      	cmp	r3, #0
   85db6:	d002      	beq.n	85dbe <pmc_sleep+0xda>
		*p_osc_setting = mor;
   85db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   85dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   85dbc:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   85dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   85dc0:	2b00      	cmp	r3, #0
   85dc2:	d003      	beq.n	85dcc <pmc_sleep+0xe8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   85dc4:	4b5c      	ldr	r3, [pc, #368]	; (85f38 <pmc_sleep+0x254>)
   85dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   85dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   85dca:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   85dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   85dce:	2b00      	cmp	r3, #0
   85dd0:	d003      	beq.n	85dda <pmc_sleep+0xf6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   85dd2:	4b59      	ldr	r3, [pc, #356]	; (85f38 <pmc_sleep+0x254>)
   85dd4:	69da      	ldr	r2, [r3, #28]
   85dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   85dd8:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   85dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85ddc:	2b00      	cmp	r3, #0
   85dde:	d002      	beq.n	85de6 <pmc_sleep+0x102>
		*p_mck_setting  = mckr;
   85de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   85de4:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   85de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   85de8:	2b00      	cmp	r3, #0
   85dea:	d002      	beq.n	85df2 <pmc_sleep+0x10e>
		*p_fmr_setting  = fmr;
   85dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   85dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85df0:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   85df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   85df4:	2b00      	cmp	r3, #0
   85df6:	d002      	beq.n	85dfe <pmc_sleep+0x11a>
		*p_fmr_setting1 = fmr1;
   85df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   85dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   85dfc:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   85dfe:	4a4e      	ldr	r2, [pc, #312]	; (85f38 <pmc_sleep+0x254>)
   85e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   85e02:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85e06:	f043 0308 	orr.w	r3, r3, #8
   85e0a:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   85e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85e0e:	f003 0302 	and.w	r3, r3, #2
   85e12:	2b00      	cmp	r3, #0
   85e14:	d00f      	beq.n	85e36 <pmc_sleep+0x152>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   85e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85e18:	f023 0303 	bic.w	r3, r3, #3
   85e1c:	f043 0301 	orr.w	r3, r3, #1
   85e20:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   85e22:	4a45      	ldr	r2, [pc, #276]	; (85f38 <pmc_sleep+0x254>)
   85e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85e26:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85e28:	bf00      	nop
   85e2a:	4b43      	ldr	r3, [pc, #268]	; (85f38 <pmc_sleep+0x254>)
   85e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85e2e:	f003 0308 	and.w	r3, r3, #8
   85e32:	2b00      	cmp	r3, #0
   85e34:	d0f9      	beq.n	85e2a <pmc_sleep+0x146>
	if (mckr & PMC_MCKR_PRES_Msk) {
   85e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85e38:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85e3c:	2b00      	cmp	r3, #0
   85e3e:	d00d      	beq.n	85e5c <pmc_sleep+0x178>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   85e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   85e46:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   85e48:	4a3b      	ldr	r2, [pc, #236]	; (85f38 <pmc_sleep+0x254>)
   85e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85e4c:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85e4e:	bf00      	nop
   85e50:	4b39      	ldr	r3, [pc, #228]	; (85f38 <pmc_sleep+0x254>)
   85e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85e54:	f003 0308 	and.w	r3, r3, #8
   85e58:	2b00      	cmp	r3, #0
   85e5a:	d0f9      	beq.n	85e50 <pmc_sleep+0x16c>
	pmc_disable_pllack();
   85e5c:	4b3c      	ldr	r3, [pc, #240]	; (85f50 <pmc_sleep+0x26c>)
   85e5e:	4798      	blx	r3
	pmc_disable_upll_clock();
   85e60:	4b3c      	ldr	r3, [pc, #240]	; (85f54 <pmc_sleep+0x270>)
   85e62:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   85e64:	bf00      	nop
   85e66:	4b34      	ldr	r3, [pc, #208]	; (85f38 <pmc_sleep+0x254>)
   85e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   85e6e:	2b00      	cmp	r3, #0
   85e70:	d0f9      	beq.n	85e66 <pmc_sleep+0x182>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   85e72:	4b31      	ldr	r3, [pc, #196]	; (85f38 <pmc_sleep+0x254>)
   85e74:	6a1b      	ldr	r3, [r3, #32]
   85e76:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   85e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   85e7e:	4a2e      	ldr	r2, [pc, #184]	; (85f38 <pmc_sleep+0x254>)
   85e80:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85e84:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   85e86:	bf00      	nop
   85e88:	4b2b      	ldr	r3, [pc, #172]	; (85f38 <pmc_sleep+0x254>)
   85e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   85e90:	2b00      	cmp	r3, #0
   85e92:	d0f9      	beq.n	85e88 <pmc_sleep+0x1a4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   85e94:	4a2c      	ldr	r2, [pc, #176]	; (85f48 <pmc_sleep+0x264>)
   85e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85e98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   85e9c:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   85e9e:	4a2b      	ldr	r2, [pc, #172]	; (85f4c <pmc_sleep+0x268>)
   85ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   85ea2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   85ea6:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   85ea8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   85eac:	2b00      	cmp	r3, #0
   85eae:	d009      	beq.n	85ec4 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85eb0:	4b21      	ldr	r3, [pc, #132]	; (85f38 <pmc_sleep+0x254>)
   85eb2:	6a1b      	ldr	r3, [r3, #32]
   85eb4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85eb8:	f023 0301 	bic.w	r3, r3, #1
   85ebc:	4a1e      	ldr	r2, [pc, #120]	; (85f38 <pmc_sleep+0x254>)
   85ebe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85ec2:	6213      	str	r3, [r2, #32]
}
   85ec4:	bf00      	nop
		cpu_irq_enable();
   85ec6:	4b1e      	ldr	r3, [pc, #120]	; (85f40 <pmc_sleep+0x25c>)
   85ec8:	2201      	movs	r2, #1
   85eca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   85ecc:	f3bf 8f5f 	dmb	sy
}
   85ed0:	bf00      	nop
  __ASM volatile ("cpsie i");
   85ed2:	b662      	cpsie	i
}
   85ed4:	bf00      	nop
		pmc_enable_waitmode();
   85ed6:	4b20      	ldr	r3, [pc, #128]	; (85f58 <pmc_sleep+0x274>)
   85ed8:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   85eda:	b672      	cpsid	i
}
   85edc:	bf00      	nop
  __ASM volatile ("dmb");
   85ede:	f3bf 8f5f 	dmb	sy
}
   85ee2:	bf00      	nop
		cpu_irq_disable();
   85ee4:	4b16      	ldr	r3, [pc, #88]	; (85f40 <pmc_sleep+0x25c>)
   85ee6:	2200      	movs	r2, #0
   85ee8:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   85eea:	6a3d      	ldr	r5, [r7, #32]
   85eec:	69fc      	ldr	r4, [r7, #28]
   85eee:	69b8      	ldr	r0, [r7, #24]
   85ef0:	6979      	ldr	r1, [r7, #20]
   85ef2:	693a      	ldr	r2, [r7, #16]
   85ef4:	68fb      	ldr	r3, [r7, #12]
   85ef6:	66fd      	str	r5, [r7, #108]	; 0x6c
   85ef8:	66bc      	str	r4, [r7, #104]	; 0x68
   85efa:	6678      	str	r0, [r7, #100]	; 0x64
   85efc:	6639      	str	r1, [r7, #96]	; 0x60
   85efe:	65fa      	str	r2, [r7, #92]	; 0x5c
   85f00:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   85f02:	2300      	movs	r3, #0
   85f04:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   85f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   85f08:	f003 0302 	and.w	r3, r3, #2
   85f0c:	2b00      	cmp	r3, #0
   85f0e:	d029      	beq.n	85f64 <pmc_sleep+0x280>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85f10:	4b09      	ldr	r3, [pc, #36]	; (85f38 <pmc_sleep+0x254>)
   85f12:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   85f14:	4a11      	ldr	r2, [pc, #68]	; (85f5c <pmc_sleep+0x278>)
   85f16:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85f18:	4907      	ldr	r1, [pc, #28]	; (85f38 <pmc_sleep+0x254>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   85f1a:	4b11      	ldr	r3, [pc, #68]	; (85f60 <pmc_sleep+0x27c>)
   85f1c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85f1e:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85f20:	4b05      	ldr	r3, [pc, #20]	; (85f38 <pmc_sleep+0x254>)
   85f22:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   85f24:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85f28:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85f2c:	4a02      	ldr	r2, [pc, #8]	; (85f38 <pmc_sleep+0x254>)
				| CKGR_MOR_KEY_PASSWD;
   85f2e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85f32:	6213      	str	r3, [r2, #32]
   85f34:	e053      	b.n	85fde <pmc_sleep+0x2fa>
   85f36:	bf00      	nop
   85f38:	400e0400 	.word	0x400e0400
   85f3c:	e000ed00 	.word	0xe000ed00
   85f40:	200003aa 	.word	0x200003aa
   85f44:	2000136b 	.word	0x2000136b
   85f48:	400e0800 	.word	0x400e0800
   85f4c:	400e0a00 	.word	0x400e0a00
   85f50:	00084661 	.word	0x00084661
   85f54:	00084691 	.word	0x00084691
   85f58:	000847ad 	.word	0x000847ad
   85f5c:	fec8fffc 	.word	0xfec8fffc
   85f60:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   85f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   85f66:	f003 0301 	and.w	r3, r3, #1
   85f6a:	2b00      	cmp	r3, #0
   85f6c:	d037      	beq.n	85fde <pmc_sleep+0x2fa>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   85f6e:	4b60      	ldr	r3, [pc, #384]	; (860f0 <pmc_sleep+0x40c>)
   85f70:	6a1b      	ldr	r3, [r3, #32]
   85f72:	f003 0301 	and.w	r3, r3, #1
   85f76:	2b00      	cmp	r3, #0
   85f78:	d112      	bne.n	85fa0 <pmc_sleep+0x2bc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   85f7a:	4b5d      	ldr	r3, [pc, #372]	; (860f0 <pmc_sleep+0x40c>)
   85f7c:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   85f7e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85f82:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   85f86:	4a5a      	ldr	r2, [pc, #360]	; (860f0 <pmc_sleep+0x40c>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   85f88:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85f8c:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   85f90:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   85f92:	bf00      	nop
   85f94:	4b56      	ldr	r3, [pc, #344]	; (860f0 <pmc_sleep+0x40c>)
   85f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85f98:	f003 0301 	and.w	r3, r3, #1
   85f9c:	2b00      	cmp	r3, #0
   85f9e:	d0f9      	beq.n	85f94 <pmc_sleep+0x2b0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   85fa0:	4b53      	ldr	r3, [pc, #332]	; (860f0 <pmc_sleep+0x40c>)
   85fa2:	6a1b      	ldr	r3, [r3, #32]
   85fa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   85fa8:	2b00      	cmp	r3, #0
   85faa:	d10e      	bne.n	85fca <pmc_sleep+0x2e6>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   85fac:	4b50      	ldr	r3, [pc, #320]	; (860f0 <pmc_sleep+0x40c>)
   85fae:	6a1b      	ldr	r3, [r3, #32]
   85fb0:	4a4f      	ldr	r2, [pc, #316]	; (860f0 <pmc_sleep+0x40c>)
   85fb2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   85fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   85fba:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   85fbc:	bf00      	nop
   85fbe:	4b4c      	ldr	r3, [pc, #304]	; (860f0 <pmc_sleep+0x40c>)
   85fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   85fc6:	2b00      	cmp	r3, #0
   85fc8:	d0f9      	beq.n	85fbe <pmc_sleep+0x2da>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85fca:	4b49      	ldr	r3, [pc, #292]	; (860f0 <pmc_sleep+0x40c>)
   85fcc:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   85fce:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85fd2:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85fd6:	4a46      	ldr	r2, [pc, #280]	; (860f0 <pmc_sleep+0x40c>)
					| CKGR_MOR_KEY_PASSWD;
   85fd8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   85fdc:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   85fde:	6eba      	ldr	r2, [r7, #104]	; 0x68
   85fe0:	4b44      	ldr	r3, [pc, #272]	; (860f4 <pmc_sleep+0x410>)
   85fe2:	4013      	ands	r3, r2
   85fe4:	2b00      	cmp	r3, #0
   85fe6:	d008      	beq.n	85ffa <pmc_sleep+0x316>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   85fe8:	4a41      	ldr	r2, [pc, #260]	; (860f0 <pmc_sleep+0x40c>)
   85fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   85fec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   85ff0:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   85ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   85ff4:	f043 0302 	orr.w	r3, r3, #2
   85ff8:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   85ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   85ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   86000:	2b00      	cmp	r3, #0
   86002:	d006      	beq.n	86012 <pmc_sleep+0x32e>
		PMC->CKGR_UCKR = pll1_setting;
   86004:	4a3a      	ldr	r2, [pc, #232]	; (860f0 <pmc_sleep+0x40c>)
   86006:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   86008:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   8600a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   8600c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86010:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   86012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   86014:	f003 0303 	and.w	r3, r3, #3
   86018:	2b02      	cmp	r3, #2
   8601a:	d002      	beq.n	86022 <pmc_sleep+0x33e>
   8601c:	2b03      	cmp	r3, #3
   8601e:	d008      	beq.n	86032 <pmc_sleep+0x34e>
   86020:	e00f      	b.n	86042 <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   86022:	bf00      	nop
   86024:	4b32      	ldr	r3, [pc, #200]	; (860f0 <pmc_sleep+0x40c>)
   86026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86028:	f003 0302 	and.w	r3, r3, #2
   8602c:	2b00      	cmp	r3, #0
   8602e:	d0f9      	beq.n	86024 <pmc_sleep+0x340>
		break;
   86030:	e007      	b.n	86042 <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   86032:	bf00      	nop
   86034:	4b2e      	ldr	r3, [pc, #184]	; (860f0 <pmc_sleep+0x40c>)
   86036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86038:	f003 0340 	and.w	r3, r3, #64	; 0x40
   8603c:	2b00      	cmp	r3, #0
   8603e:	d0f9      	beq.n	86034 <pmc_sleep+0x350>
		break;
   86040:	bf00      	nop
	mckr = PMC->PMC_MCKR;
   86042:	4b2b      	ldr	r3, [pc, #172]	; (860f0 <pmc_sleep+0x40c>)
   86044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86046:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   86048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   8604a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   8604e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   86050:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   86054:	4926      	ldr	r1, [pc, #152]	; (860f0 <pmc_sleep+0x40c>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   86056:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   86058:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8605a:	bf00      	nop
   8605c:	4b24      	ldr	r3, [pc, #144]	; (860f0 <pmc_sleep+0x40c>)
   8605e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86060:	f003 0308 	and.w	r3, r3, #8
   86064:	2b00      	cmp	r3, #0
   86066:	d0f9      	beq.n	8605c <pmc_sleep+0x378>
	EFC0->EEFC_FMR = fmr_setting;
   86068:	4a23      	ldr	r2, [pc, #140]	; (860f8 <pmc_sleep+0x414>)
   8606a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   8606c:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   8606e:	4a23      	ldr	r2, [pc, #140]	; (860fc <pmc_sleep+0x418>)
   86070:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   86072:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   86074:	4a1e      	ldr	r2, [pc, #120]	; (860f0 <pmc_sleep+0x40c>)
   86076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   86078:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   8607a:	bf00      	nop
   8607c:	4b1c      	ldr	r3, [pc, #112]	; (860f0 <pmc_sleep+0x40c>)
   8607e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86080:	f003 0308 	and.w	r3, r3, #8
   86084:	2b00      	cmp	r3, #0
   86086:	d0f9      	beq.n	8607c <pmc_sleep+0x398>
	while (!(PMC->PMC_SR & pll_sr));
   86088:	bf00      	nop
   8608a:	4b19      	ldr	r3, [pc, #100]	; (860f0 <pmc_sleep+0x40c>)
   8608c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   8608e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   86090:	4013      	ands	r3, r2
   86092:	2b00      	cmp	r3, #0
   86094:	d0f9      	beq.n	8608a <pmc_sleep+0x3a6>
}
   86096:	bf00      	nop
		b_is_sleep_clock_used = false;
   86098:	4b19      	ldr	r3, [pc, #100]	; (86100 <pmc_sleep+0x41c>)
   8609a:	2200      	movs	r2, #0
   8609c:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   8609e:	4b19      	ldr	r3, [pc, #100]	; (86104 <pmc_sleep+0x420>)
   860a0:	681b      	ldr	r3, [r3, #0]
   860a2:	2b00      	cmp	r3, #0
   860a4:	d005      	beq.n	860b2 <pmc_sleep+0x3ce>
			callback_clocks_restored();
   860a6:	4b17      	ldr	r3, [pc, #92]	; (86104 <pmc_sleep+0x420>)
   860a8:	681b      	ldr	r3, [r3, #0]
   860aa:	4798      	blx	r3
			callback_clocks_restored = NULL;
   860ac:	4b15      	ldr	r3, [pc, #84]	; (86104 <pmc_sleep+0x420>)
   860ae:	2200      	movs	r2, #0
   860b0:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
   860b2:	4b15      	ldr	r3, [pc, #84]	; (86108 <pmc_sleep+0x424>)
   860b4:	2201      	movs	r2, #1
   860b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   860b8:	f3bf 8f5f 	dmb	sy
}
   860bc:	bf00      	nop
  __ASM volatile ("cpsie i");
   860be:	b662      	cpsie	i
}
   860c0:	bf00      	nop
		break;
   860c2:	e010      	b.n	860e6 <pmc_sleep+0x402>
		SCB->SCR |= SCR_SLEEPDEEP;
   860c4:	4b11      	ldr	r3, [pc, #68]	; (8610c <pmc_sleep+0x428>)
   860c6:	691b      	ldr	r3, [r3, #16]
   860c8:	4a10      	ldr	r2, [pc, #64]	; (8610c <pmc_sleep+0x428>)
   860ca:	f043 0304 	orr.w	r3, r3, #4
   860ce:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   860d0:	4b0d      	ldr	r3, [pc, #52]	; (86108 <pmc_sleep+0x424>)
   860d2:	2201      	movs	r2, #1
   860d4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   860d6:	f3bf 8f5f 	dmb	sy
}
   860da:	bf00      	nop
  __ASM volatile ("cpsie i");
   860dc:	b662      	cpsie	i
}
   860de:	bf00      	nop
  __ASM volatile ("wfe");
   860e0:	bf20      	wfe
}
   860e2:	bf00      	nop
		break;
   860e4:	bf00      	nop
}
   860e6:	bf00      	nop
   860e8:	3770      	adds	r7, #112	; 0x70
   860ea:	46bd      	mov	sp, r7
   860ec:	bdb0      	pop	{r4, r5, r7, pc}
   860ee:	bf00      	nop
   860f0:	400e0400 	.word	0x400e0400
   860f4:	07ff0000 	.word	0x07ff0000
   860f8:	400e0800 	.word	0x400e0800
   860fc:	400e0a00 	.word	0x400e0a00
   86100:	2000136b 	.word	0x2000136b
   86104:	2000136c 	.word	0x2000136c
   86108:	200003aa 	.word	0x200003aa
   8610c:	e000ed00 	.word	0xe000ed00

00086110 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   86110:	b480      	push	{r7}
   86112:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   86114:	4b08      	ldr	r3, [pc, #32]	; (86138 <pmc_is_wakeup_clocks_restored+0x28>)
   86116:	781b      	ldrb	r3, [r3, #0]
   86118:	b2db      	uxtb	r3, r3
   8611a:	2b00      	cmp	r3, #0
   8611c:	bf14      	ite	ne
   8611e:	2301      	movne	r3, #1
   86120:	2300      	moveq	r3, #0
   86122:	b2db      	uxtb	r3, r3
   86124:	f083 0301 	eor.w	r3, r3, #1
   86128:	b2db      	uxtb	r3, r3
   8612a:	f003 0301 	and.w	r3, r3, #1
   8612e:	b2db      	uxtb	r3, r3
}
   86130:	4618      	mov	r0, r3
   86132:	46bd      	mov	sp, r7
   86134:	bc80      	pop	{r7}
   86136:	4770      	bx	lr
   86138:	2000136b 	.word	0x2000136b

0008613c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   8613c:	b480      	push	{r7}
   8613e:	b085      	sub	sp, #20
   86140:	af00      	add	r7, sp, #0
   86142:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   86144:	4b10      	ldr	r3, [pc, #64]	; (86188 <_sbrk+0x4c>)
   86146:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   86148:	4b10      	ldr	r3, [pc, #64]	; (8618c <_sbrk+0x50>)
   8614a:	681b      	ldr	r3, [r3, #0]
   8614c:	2b00      	cmp	r3, #0
   8614e:	d102      	bne.n	86156 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   86150:	4b0e      	ldr	r3, [pc, #56]	; (8618c <_sbrk+0x50>)
   86152:	4a0f      	ldr	r2, [pc, #60]	; (86190 <_sbrk+0x54>)
   86154:	601a      	str	r2, [r3, #0]
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
	}
	prev_heap = heap;
   86156:	4b0d      	ldr	r3, [pc, #52]	; (8618c <_sbrk+0x50>)
   86158:	681b      	ldr	r3, [r3, #0]
   8615a:	60bb      	str	r3, [r7, #8]

<<<<<<< HEAD
	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   8633e:	69fb      	ldr	r3, [r7, #28]
   86340:	2b08      	cmp	r3, #8
   86342:	d105      	bne.n	86350 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   86344:	68fb      	ldr	r3, [r7, #12]
   86346:	685b      	ldr	r3, [r3, #4]
   86348:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   8634c:	68fb      	ldr	r3, [r7, #12]
   8634e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   86350:	693b      	ldr	r3, [r7, #16]
   86352:	041a      	lsls	r2, r3, #16
   86354:	697b      	ldr	r3, [r7, #20]
   86356:	431a      	orrs	r2, r3
   86358:	68fb      	ldr	r3, [r7, #12]
   8635a:	621a      	str	r2, [r3, #32]

	return 0;
   8635c:	2300      	movs	r3, #0
}
   8635e:	4618      	mov	r0, r3
   86360:	3724      	adds	r7, #36	; 0x24
   86362:	46bd      	mov	sp, r7
   86364:	bc80      	pop	{r7}
   86366:	4770      	bx	lr

00086368 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   86368:	b480      	push	{r7}
   8636a:	b087      	sub	sp, #28
   8636c:	af00      	add	r7, sp, #0
   8636e:	60f8      	str	r0, [r7, #12]
   86370:	60b9      	str	r1, [r7, #8]
   86372:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   86374:	68bb      	ldr	r3, [r7, #8]
   86376:	085a      	lsrs	r2, r3, #1
   86378:	687b      	ldr	r3, [r7, #4]
   8637a:	441a      	add	r2, r3
   8637c:	68bb      	ldr	r3, [r7, #8]
   8637e:	fbb2 f3f3 	udiv	r3, r2, r3
   86382:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   86384:	697b      	ldr	r3, [r7, #20]
   86386:	2b03      	cmp	r3, #3
   86388:	d903      	bls.n	86392 <usart_set_spi_master_baudrate+0x2a>
   8638a:	697b      	ldr	r3, [r7, #20]
   8638c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   86390:	d301      	bcc.n	86396 <usart_set_spi_master_baudrate+0x2e>
		return 1;
   86392:	2301      	movs	r3, #1
   86394:	e003      	b.n	8639e <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   86396:	68fb      	ldr	r3, [r7, #12]
   86398:	697a      	ldr	r2, [r7, #20]
   8639a:	621a      	str	r2, [r3, #32]

	return 0;
   8639c:	2300      	movs	r3, #0
}
   8639e:	4618      	mov	r0, r3
   863a0:	371c      	adds	r7, #28
   863a2:	46bd      	mov	sp, r7
   863a4:	bc80      	pop	{r7}
   863a6:	4770      	bx	lr

000863a8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   863a8:	b580      	push	{r7, lr}
   863aa:	b082      	sub	sp, #8
   863ac:	af00      	add	r7, sp, #0
   863ae:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   863b0:	6878      	ldr	r0, [r7, #4]
   863b2:	4b0f      	ldr	r3, [pc, #60]	; (863f0 <usart_reset+0x48>)
   863b4:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   863b6:	687b      	ldr	r3, [r7, #4]
   863b8:	2200      	movs	r2, #0
   863ba:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   863bc:	687b      	ldr	r3, [r7, #4]
   863be:	2200      	movs	r2, #0
   863c0:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   863c2:	687b      	ldr	r3, [r7, #4]
   863c4:	2200      	movs	r2, #0
   863c6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   863c8:	6878      	ldr	r0, [r7, #4]
   863ca:	4b0a      	ldr	r3, [pc, #40]	; (863f4 <usart_reset+0x4c>)
   863cc:	4798      	blx	r3
	usart_reset_rx(p_usart);
   863ce:	6878      	ldr	r0, [r7, #4]
   863d0:	4b09      	ldr	r3, [pc, #36]	; (863f8 <usart_reset+0x50>)
   863d2:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   863d4:	6878      	ldr	r0, [r7, #4]
   863d6:	4b09      	ldr	r3, [pc, #36]	; (863fc <usart_reset+0x54>)
   863d8:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   863da:	6878      	ldr	r0, [r7, #4]
   863dc:	4b08      	ldr	r3, [pc, #32]	; (86400 <usart_reset+0x58>)
   863de:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   863e0:	6878      	ldr	r0, [r7, #4]
   863e2:	4b08      	ldr	r3, [pc, #32]	; (86404 <usart_reset+0x5c>)
   863e4:	4798      	blx	r3
#endif
}
   863e6:	bf00      	nop
   863e8:	3708      	adds	r7, #8
   863ea:	46bd      	mov	sp, r7
   863ec:	bd80      	pop	{r7, pc}
   863ee:	bf00      	nop
   863f0:	000866f1 	.word	0x000866f1
   863f4:	000865b5 	.word	0x000865b5
   863f8:	000865fd 	.word	0x000865fd
   863fc:	00086675 	.word	0x00086675
   86400:	000866a9 	.word	0x000866a9
   86404:	0008668f 	.word	0x0008668f

00086408 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   86408:	b580      	push	{r7, lr}
   8640a:	b084      	sub	sp, #16
   8640c:	af00      	add	r7, sp, #0
   8640e:	60f8      	str	r0, [r7, #12]
   86410:	60b9      	str	r1, [r7, #8]
   86412:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   86414:	68f8      	ldr	r0, [r7, #12]
   86416:	4b1a      	ldr	r3, [pc, #104]	; (86480 <usart_init_rs232+0x78>)
   86418:	4798      	blx	r3

	ul_reg_val = 0;
   8641a:	4b1a      	ldr	r3, [pc, #104]	; (86484 <usart_init_rs232+0x7c>)
   8641c:	2200      	movs	r2, #0
   8641e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   86420:	68bb      	ldr	r3, [r7, #8]
   86422:	2b00      	cmp	r3, #0
   86424:	d009      	beq.n	8643a <usart_init_rs232+0x32>
   86426:	68bb      	ldr	r3, [r7, #8]
   86428:	681b      	ldr	r3, [r3, #0]
   8642a:	687a      	ldr	r2, [r7, #4]
   8642c:	4619      	mov	r1, r3
   8642e:	68f8      	ldr	r0, [r7, #12]
   86430:	4b15      	ldr	r3, [pc, #84]	; (86488 <usart_init_rs232+0x80>)
   86432:	4798      	blx	r3
   86434:	4603      	mov	r3, r0
   86436:	2b00      	cmp	r3, #0
   86438:	d001      	beq.n	8643e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   8643a:	2301      	movs	r3, #1
   8643c:	e01b      	b.n	86476 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8643e:	68bb      	ldr	r3, [r7, #8]
   86440:	685a      	ldr	r2, [r3, #4]
   86442:	68bb      	ldr	r3, [r7, #8]
   86444:	689b      	ldr	r3, [r3, #8]
   86446:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   86448:	68bb      	ldr	r3, [r7, #8]
   8644a:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8644c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8644e:	68bb      	ldr	r3, [r7, #8]
   86450:	68db      	ldr	r3, [r3, #12]
   86452:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86454:	4b0b      	ldr	r3, [pc, #44]	; (86484 <usart_init_rs232+0x7c>)
   86456:	681b      	ldr	r3, [r3, #0]
   86458:	4313      	orrs	r3, r2
   8645a:	4a0a      	ldr	r2, [pc, #40]	; (86484 <usart_init_rs232+0x7c>)
   8645c:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   8645e:	4b09      	ldr	r3, [pc, #36]	; (86484 <usart_init_rs232+0x7c>)
   86460:	681b      	ldr	r3, [r3, #0]
   86462:	4a08      	ldr	r2, [pc, #32]	; (86484 <usart_init_rs232+0x7c>)
   86464:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   86466:	68fb      	ldr	r3, [r7, #12]
   86468:	685a      	ldr	r2, [r3, #4]
   8646a:	4b06      	ldr	r3, [pc, #24]	; (86484 <usart_init_rs232+0x7c>)
   8646c:	681b      	ldr	r3, [r3, #0]
   8646e:	431a      	orrs	r2, r3
   86470:	68fb      	ldr	r3, [r7, #12]
   86472:	605a      	str	r2, [r3, #4]

	return 0;
   86474:	2300      	movs	r3, #0
}
   86476:	4618      	mov	r0, r3
   86478:	3710      	adds	r7, #16
   8647a:	46bd      	mov	sp, r7
   8647c:	bd80      	pop	{r7, pc}
   8647e:	bf00      	nop
   86480:	000863a9 	.word	0x000863a9
   86484:	20001380 	.word	0x20001380
   86488:	000862e1 	.word	0x000862e1

0008648c <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   8648c:	b580      	push	{r7, lr}
   8648e:	b084      	sub	sp, #16
   86490:	af00      	add	r7, sp, #0
   86492:	60f8      	str	r0, [r7, #12]
   86494:	60b9      	str	r1, [r7, #8]
   86496:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   86498:	68f8      	ldr	r0, [r7, #12]
   8649a:	4b3d      	ldr	r3, [pc, #244]	; (86590 <usart_init_spi_master+0x104>)
   8649c:	4798      	blx	r3

	ul_reg_val = 0;
   8649e:	4b3d      	ldr	r3, [pc, #244]	; (86594 <usart_init_spi_master+0x108>)
   864a0:	2200      	movs	r2, #0
   864a2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   864a4:	68bb      	ldr	r3, [r7, #8]
   864a6:	2b00      	cmp	r3, #0
   864a8:	d00d      	beq.n	864c6 <usart_init_spi_master+0x3a>
   864aa:	68bb      	ldr	r3, [r7, #8]
   864ac:	689b      	ldr	r3, [r3, #8]
   864ae:	2b03      	cmp	r3, #3
   864b0:	d809      	bhi.n	864c6 <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   864b2:	68bb      	ldr	r3, [r7, #8]
   864b4:	681b      	ldr	r3, [r3, #0]
   864b6:	687a      	ldr	r2, [r7, #4]
   864b8:	4619      	mov	r1, r3
   864ba:	68f8      	ldr	r0, [r7, #12]
   864bc:	4b36      	ldr	r3, [pc, #216]	; (86598 <usart_init_spi_master+0x10c>)
   864be:	4798      	blx	r3
   864c0:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   864c2:	2b00      	cmp	r3, #0
   864c4:	d001      	beq.n	864ca <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   864c6:	2301      	movs	r3, #1
   864c8:	e05d      	b.n	86586 <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   864ca:	68bb      	ldr	r3, [r7, #8]
   864cc:	685a      	ldr	r2, [r3, #4]
   864ce:	4b31      	ldr	r3, [pc, #196]	; (86594 <usart_init_spi_master+0x108>)
   864d0:	681b      	ldr	r3, [r3, #0]
   864d2:	4313      	orrs	r3, r2
   864d4:	4a2f      	ldr	r2, [pc, #188]	; (86594 <usart_init_spi_master+0x108>)
   864d6:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   864d8:	68bb      	ldr	r3, [r7, #8]
   864da:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   864dc:	4b2d      	ldr	r3, [pc, #180]	; (86594 <usart_init_spi_master+0x108>)
   864de:	681b      	ldr	r3, [r3, #0]
   864e0:	4313      	orrs	r3, r2
   864e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   864e6:	f043 030e 	orr.w	r3, r3, #14
   864ea:	4a2a      	ldr	r2, [pc, #168]	; (86594 <usart_init_spi_master+0x108>)
   864ec:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   864ee:	68bb      	ldr	r3, [r7, #8]
   864f0:	689b      	ldr	r3, [r3, #8]
   864f2:	2b03      	cmp	r3, #3
   864f4:	d83e      	bhi.n	86574 <usart_init_spi_master+0xe8>
   864f6:	a201      	add	r2, pc, #4	; (adr r2, 864fc <usart_init_spi_master+0x70>)
   864f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   864fc:	0008650d 	.word	0x0008650d
   86500:	00086527 	.word	0x00086527
   86504:	00086541 	.word	0x00086541
   86508:	0008655b 	.word	0x0008655b
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   8650c:	4b21      	ldr	r3, [pc, #132]	; (86594 <usart_init_spi_master+0x108>)
   8650e:	681b      	ldr	r3, [r3, #0]
   86510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86514:	4a1f      	ldr	r2, [pc, #124]	; (86594 <usart_init_spi_master+0x108>)
   86516:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   86518:	4b1e      	ldr	r3, [pc, #120]	; (86594 <usart_init_spi_master+0x108>)
   8651a:	681b      	ldr	r3, [r3, #0]
   8651c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86520:	4a1c      	ldr	r2, [pc, #112]	; (86594 <usart_init_spi_master+0x108>)
   86522:	6013      	str	r3, [r2, #0]
		break;
   86524:	e027      	b.n	86576 <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   86526:	4b1b      	ldr	r3, [pc, #108]	; (86594 <usart_init_spi_master+0x108>)
   86528:	681b      	ldr	r3, [r3, #0]
   8652a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8652e:	4a19      	ldr	r2, [pc, #100]	; (86594 <usart_init_spi_master+0x108>)
   86530:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   86532:	4b18      	ldr	r3, [pc, #96]	; (86594 <usart_init_spi_master+0x108>)
   86534:	681b      	ldr	r3, [r3, #0]
   86536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8653a:	4a16      	ldr	r2, [pc, #88]	; (86594 <usart_init_spi_master+0x108>)
   8653c:	6013      	str	r3, [r2, #0]
		break;
   8653e:	e01a      	b.n	86576 <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   86540:	4b14      	ldr	r3, [pc, #80]	; (86594 <usart_init_spi_master+0x108>)
   86542:	681b      	ldr	r3, [r3, #0]
   86544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86548:	4a12      	ldr	r2, [pc, #72]	; (86594 <usart_init_spi_master+0x108>)
   8654a:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8654c:	4b11      	ldr	r3, [pc, #68]	; (86594 <usart_init_spi_master+0x108>)
   8654e:	681b      	ldr	r3, [r3, #0]
   86550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86554:	4a0f      	ldr	r2, [pc, #60]	; (86594 <usart_init_spi_master+0x108>)
   86556:	6013      	str	r3, [r2, #0]
		break;
   86558:	e00d      	b.n	86576 <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8655a:	4b0e      	ldr	r3, [pc, #56]	; (86594 <usart_init_spi_master+0x108>)
   8655c:	681b      	ldr	r3, [r3, #0]
   8655e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86562:	4a0c      	ldr	r2, [pc, #48]	; (86594 <usart_init_spi_master+0x108>)
   86564:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   86566:	4b0b      	ldr	r3, [pc, #44]	; (86594 <usart_init_spi_master+0x108>)
   86568:	681b      	ldr	r3, [r3, #0]
   8656a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8656e:	4a09      	ldr	r2, [pc, #36]	; (86594 <usart_init_spi_master+0x108>)
   86570:	6013      	str	r3, [r2, #0]
		break;
   86572:	e000      	b.n	86576 <usart_init_spi_master+0xea>

	default:
		break;
   86574:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   86576:	68fb      	ldr	r3, [r7, #12]
   86578:	685a      	ldr	r2, [r3, #4]
   8657a:	4b06      	ldr	r3, [pc, #24]	; (86594 <usart_init_spi_master+0x108>)
   8657c:	681b      	ldr	r3, [r3, #0]
   8657e:	431a      	orrs	r2, r3
   86580:	68fb      	ldr	r3, [r7, #12]
   86582:	605a      	str	r2, [r3, #4]

	return 0;
   86584:	2300      	movs	r3, #0
}
   86586:	4618      	mov	r0, r3
   86588:	3710      	adds	r7, #16
   8658a:	46bd      	mov	sp, r7
   8658c:	bd80      	pop	{r7, pc}
   8658e:	bf00      	nop
   86590:	000863a9 	.word	0x000863a9
   86594:	20001384 	.word	0x20001384
   86598:	00086369 	.word	0x00086369

0008659c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   8659c:	b480      	push	{r7}
   8659e:	b083      	sub	sp, #12
   865a0:	af00      	add	r7, sp, #0
   865a2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   865a4:	687b      	ldr	r3, [r7, #4]
   865a6:	2240      	movs	r2, #64	; 0x40
   865a8:	601a      	str	r2, [r3, #0]
}
   865aa:	bf00      	nop
   865ac:	370c      	adds	r7, #12
   865ae:	46bd      	mov	sp, r7
   865b0:	bc80      	pop	{r7}
   865b2:	4770      	bx	lr

000865b4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
=======
	if (((int)prev_heap + incr) > ramend) {
   8615c:	68ba      	ldr	r2, [r7, #8]
   8615e:	687b      	ldr	r3, [r7, #4]
   86160:	4413      	add	r3, r2
   86162:	68fa      	ldr	r2, [r7, #12]
   86164:	429a      	cmp	r2, r3
   86166:	da02      	bge.n	8616e <_sbrk+0x32>
		return (caddr_t) -1;	
   86168:	f04f 33ff 	mov.w	r3, #4294967295
   8616c:	e006      	b.n	8617c <_sbrk+0x40>
	}

	heap += incr;
   8616e:	4b07      	ldr	r3, [pc, #28]	; (8618c <_sbrk+0x50>)
   86170:	681a      	ldr	r2, [r3, #0]
   86172:	687b      	ldr	r3, [r7, #4]
   86174:	4413      	add	r3, r2
   86176:	4a05      	ldr	r2, [pc, #20]	; (8618c <_sbrk+0x50>)
   86178:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8617a:	68bb      	ldr	r3, [r7, #8]
}
   8617c:	4618      	mov	r0, r3
   8617e:	3714      	adds	r7, #20
   86180:	46bd      	mov	sp, r7
   86182:	bc80      	pop	{r7}
   86184:	4770      	bx	lr
   86186:	bf00      	nop
   86188:	20083ffc 	.word	0x20083ffc
   8618c:	20001370 	.word	0x20001370
   86190:	20084000 	.word	0x20084000

00086194 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   86194:	b480      	push	{r7}
   86196:	b083      	sub	sp, #12
   86198:	af00      	add	r7, sp, #0
   8619a:	6078      	str	r0, [r7, #4]
	return -1;
   8619c:	f04f 33ff 	mov.w	r3, #4294967295
}
   861a0:	4618      	mov	r0, r3
   861a2:	370c      	adds	r7, #12
   861a4:	46bd      	mov	sp, r7
   861a6:	bc80      	pop	{r7}
   861a8:	4770      	bx	lr

000861aa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   861aa:	b480      	push	{r7}
   861ac:	b083      	sub	sp, #12
   861ae:	af00      	add	r7, sp, #0
   861b0:	6078      	str	r0, [r7, #4]
   861b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   861b4:	683b      	ldr	r3, [r7, #0]
   861b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   861ba:	605a      	str	r2, [r3, #4]

	return 0;
   861bc:	2300      	movs	r3, #0
}
   861be:	4618      	mov	r0, r3
   861c0:	370c      	adds	r7, #12
   861c2:	46bd      	mov	sp, r7
   861c4:	bc80      	pop	{r7}
   861c6:	4770      	bx	lr

000861c8 <_isatty>:

extern int _isatty(int file)
{
   861c8:	b480      	push	{r7}
   861ca:	b083      	sub	sp, #12
   861cc:	af00      	add	r7, sp, #0
   861ce:	6078      	str	r0, [r7, #4]
	return 1;
   861d0:	2301      	movs	r3, #1
}
   861d2:	4618      	mov	r0, r3
   861d4:	370c      	adds	r7, #12
   861d6:	46bd      	mov	sp, r7
   861d8:	bc80      	pop	{r7}
   861da:	4770      	bx	lr

000861dc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   861dc:	b480      	push	{r7}
   861de:	b085      	sub	sp, #20
   861e0:	af00      	add	r7, sp, #0
   861e2:	60f8      	str	r0, [r7, #12]
   861e4:	60b9      	str	r1, [r7, #8]
   861e6:	607a      	str	r2, [r7, #4]
	return 0;
   861e8:	2300      	movs	r3, #0
}
   861ea:	4618      	mov	r0, r3
   861ec:	3714      	adds	r7, #20
   861ee:	46bd      	mov	sp, r7
   861f0:	bc80      	pop	{r7}
   861f2:	4770      	bx	lr

000861f4 <_exit>:

extern void _exit(int status)
{
   861f4:	b580      	push	{r7, lr}
   861f6:	b082      	sub	sp, #8
   861f8:	af00      	add	r7, sp, #0
   861fa:	6078      	str	r0, [r7, #4]
	printf("Exiting with status %d.\n", status);
   861fc:	6879      	ldr	r1, [r7, #4]
   861fe:	4802      	ldr	r0, [pc, #8]	; (86208 <_exit+0x14>)
   86200:	4b02      	ldr	r3, [pc, #8]	; (8620c <_exit+0x18>)
   86202:	4798      	blx	r3

	for (;;);
   86204:	e7fe      	b.n	86204 <_exit+0x10>
   86206:	bf00      	nop
   86208:	0008d3c4 	.word	0x0008d3c4
   8620c:	000866c1 	.word	0x000866c1

00086210 <_kill>:
}

extern void _kill(int pid, int sig)
{
   86210:	b480      	push	{r7}
   86212:	b083      	sub	sp, #12
   86214:	af00      	add	r7, sp, #0
   86216:	6078      	str	r0, [r7, #4]
   86218:	6039      	str	r1, [r7, #0]
	return;
   8621a:	bf00      	nop
}
   8621c:	370c      	adds	r7, #12
   8621e:	46bd      	mov	sp, r7
   86220:	bc80      	pop	{r7}
   86222:	4770      	bx	lr

00086224 <_getpid>:

extern int _getpid(void)
{
   86224:	b480      	push	{r7}
   86226:	af00      	add	r7, sp, #0
	return -1;
   86228:	f04f 33ff 	mov.w	r3, #4294967295
}
   8622c:	4618      	mov	r0, r3
   8622e:	46bd      	mov	sp, r7
   86230:	bc80      	pop	{r7}
   86232:	4770      	bx	lr

00086234 <sysclk_enable_peripheral_clock>:
{
   86234:	b580      	push	{r7, lr}
   86236:	b082      	sub	sp, #8
   86238:	af00      	add	r7, sp, #0
   8623a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8623c:	6878      	ldr	r0, [r7, #4]
   8623e:	4b03      	ldr	r3, [pc, #12]	; (8624c <sysclk_enable_peripheral_clock+0x18>)
   86240:	4798      	blx	r3
}
   86242:	bf00      	nop
   86244:	3708      	adds	r7, #8
   86246:	46bd      	mov	sp, r7
   86248:	bd80      	pop	{r7, pc}
   8624a:	bf00      	nop
   8624c:	000846c5 	.word	0x000846c5

00086250 <ioport_init>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
<<<<<<< HEAD
   865b4:	b480      	push	{r7}
   865b6:	b083      	sub	sp, #12
   865b8:	af00      	add	r7, sp, #0
   865ba:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   865bc:	687b      	ldr	r3, [r7, #4]
   865be:	2288      	movs	r2, #136	; 0x88
   865c0:	601a      	str	r2, [r3, #0]
}
   865c2:	bf00      	nop
   865c4:	370c      	adds	r7, #12
   865c6:	46bd      	mov	sp, r7
   865c8:	bc80      	pop	{r7}
   865ca:	4770      	bx	lr

000865cc <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   865cc:	b480      	push	{r7}
   865ce:	b083      	sub	sp, #12
   865d0:	af00      	add	r7, sp, #0
   865d2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   865d4:	687b      	ldr	r3, [r7, #4]
   865d6:	2210      	movs	r2, #16
   865d8:	601a      	str	r2, [r3, #0]
}
   865da:	bf00      	nop
   865dc:	370c      	adds	r7, #12
   865de:	46bd      	mov	sp, r7
   865e0:	bc80      	pop	{r7}
   865e2:	4770      	bx	lr

000865e4 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   865e4:	b480      	push	{r7}
   865e6:	b083      	sub	sp, #12
   865e8:	af00      	add	r7, sp, #0
   865ea:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   865ec:	687b      	ldr	r3, [r7, #4]
   865ee:	2220      	movs	r2, #32
   865f0:	601a      	str	r2, [r3, #0]
}
   865f2:	bf00      	nop
   865f4:	370c      	adds	r7, #12
   865f6:	46bd      	mov	sp, r7
   865f8:	bc80      	pop	{r7}
   865fa:	4770      	bx	lr

000865fc <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   865fc:	b480      	push	{r7}
   865fe:	b083      	sub	sp, #12
   86600:	af00      	add	r7, sp, #0
   86602:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   86604:	687b      	ldr	r3, [r7, #4]
   86606:	2224      	movs	r2, #36	; 0x24
   86608:	601a      	str	r2, [r3, #0]
}
   8660a:	bf00      	nop
   8660c:	370c      	adds	r7, #12
   8660e:	46bd      	mov	sp, r7
   86610:	bc80      	pop	{r7}
   86612:	4770      	bx	lr

00086614 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   86614:	b480      	push	{r7}
   86616:	b083      	sub	sp, #12
   86618:	af00      	add	r7, sp, #0
   8661a:	6078      	str	r0, [r7, #4]
   8661c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   8661e:	687b      	ldr	r3, [r7, #4]
   86620:	683a      	ldr	r2, [r7, #0]
   86622:	609a      	str	r2, [r3, #8]
}
   86624:	bf00      	nop
   86626:	370c      	adds	r7, #12
   86628:	46bd      	mov	sp, r7
   8662a:	bc80      	pop	{r7}
   8662c:	4770      	bx	lr

0008662e <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   8662e:	b480      	push	{r7}
   86630:	b083      	sub	sp, #12
   86632:	af00      	add	r7, sp, #0
   86634:	6078      	str	r0, [r7, #4]
   86636:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   86638:	687b      	ldr	r3, [r7, #4]
   8663a:	683a      	ldr	r2, [r7, #0]
   8663c:	60da      	str	r2, [r3, #12]
}
   8663e:	bf00      	nop
   86640:	370c      	adds	r7, #12
   86642:	46bd      	mov	sp, r7
   86644:	bc80      	pop	{r7}
   86646:	4770      	bx	lr

00086648 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   86648:	b480      	push	{r7}
   8664a:	b083      	sub	sp, #12
   8664c:	af00      	add	r7, sp, #0
   8664e:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   86650:	687b      	ldr	r3, [r7, #4]
   86652:	691b      	ldr	r3, [r3, #16]
}
   86654:	4618      	mov	r0, r3
   86656:	370c      	adds	r7, #12
   86658:	46bd      	mov	sp, r7
   8665a:	bc80      	pop	{r7}
   8665c:	4770      	bx	lr

0008665e <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   8665e:	b480      	push	{r7}
   86660:	b083      	sub	sp, #12
   86662:	af00      	add	r7, sp, #0
   86664:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   86666:	687b      	ldr	r3, [r7, #4]
   86668:	695b      	ldr	r3, [r3, #20]
}
   8666a:	4618      	mov	r0, r3
   8666c:	370c      	adds	r7, #12
   8666e:	46bd      	mov	sp, r7
   86670:	bc80      	pop	{r7}
   86672:	4770      	bx	lr

00086674 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   86674:	b480      	push	{r7}
   86676:	b083      	sub	sp, #12
   86678:	af00      	add	r7, sp, #0
   8667a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   8667c:	687b      	ldr	r3, [r7, #4]
   8667e:	f44f 7280 	mov.w	r2, #256	; 0x100
   86682:	601a      	str	r2, [r3, #0]
}
   86684:	bf00      	nop
   86686:	370c      	adds	r7, #12
   86688:	46bd      	mov	sp, r7
   8668a:	bc80      	pop	{r7}
   8668c:	4770      	bx	lr

0008668e <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
=======
   86250:	b580      	push	{r7, lr}
   86252:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   86254:	200a      	movs	r0, #10
   86256:	4b04      	ldr	r3, [pc, #16]	; (86268 <ioport_init+0x18>)
   86258:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   8625a:	200b      	movs	r0, #11
   8625c:	4b02      	ldr	r3, [pc, #8]	; (86268 <ioport_init+0x18>)
   8625e:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
#endif
#ifdef ID_PIOF
	sysclk_enable_peripheral_clock(ID_PIOF);
#endif
}
   86260:	bf00      	nop
	arch_ioport_init();
}
   86262:	bf00      	nop
   86264:	bd80      	pop	{r7, pc}
   86266:	bf00      	nop
   86268:	00086235 	.word	0x00086235

0008626c <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   8626c:	b580      	push	{r7, lr}
   8626e:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   86270:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   86274:	201d      	movs	r0, #29
   86276:	4b0d      	ldr	r3, [pc, #52]	; (862ac <iopins_normal+0x40>)
   86278:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8627a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8627e:	201f      	movs	r0, #31
   86280:	4b0a      	ldr	r3, [pc, #40]	; (862ac <iopins_normal+0x40>)
   86282:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   86284:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   86288:	2032      	movs	r0, #50	; 0x32
   8628a:	4b08      	ldr	r3, [pc, #32]	; (862ac <iopins_normal+0x40>)
   8628c:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8628e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   86292:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   86296:	4806      	ldr	r0, [pc, #24]	; (862b0 <iopins_normal+0x44>)
   86298:	4b06      	ldr	r3, [pc, #24]	; (862b4 <iopins_normal+0x48>)
   8629a:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   8629c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   862a0:	2038      	movs	r0, #56	; 0x38
   862a2:	4b02      	ldr	r3, [pc, #8]	; (862ac <iopins_normal+0x40>)
   862a4:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   862a6:	bf00      	nop
   862a8:	bd80      	pop	{r7, pc}
   862aa:	bf00      	nop
   862ac:	00084cb5 	.word	0x00084cb5
   862b0:	400e0c00 	.word	0x400e0c00
   862b4:	00084de5 	.word	0x00084de5

000862b8 <board_init>:

void board_init(void)
{
   862b8:	b580      	push	{r7, lr}
   862ba:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   862bc:	4b04      	ldr	r3, [pc, #16]	; (862d0 <board_init+0x18>)
   862be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   862c2:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   862c4:	4b03      	ldr	r3, [pc, #12]	; (862d4 <board_init+0x1c>)
   862c6:	4798      	blx	r3

	iopins_normal();
   862c8:	4b03      	ldr	r3, [pc, #12]	; (862d8 <board_init+0x20>)
   862ca:	4798      	blx	r3

}
   862cc:	bf00      	nop
   862ce:	bd80      	pop	{r7, pc}
   862d0:	400e1250 	.word	0x400e1250
   862d4:	00086251 	.word	0x00086251
   862d8:	0008626d 	.word	0x0008626d

000862dc <init_circ_buf>:
    @brief Initializes the circular buffer.

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
   862dc:	b480      	push	{r7}
   862de:	b083      	sub	sp, #12
   862e0:	af00      	add	r7, sp, #0
   862e2:	6078      	str	r0, [r7, #4]
    cbuf->head = cbuf->tail = 0;
   862e4:	2300      	movs	r3, #0
   862e6:	687a      	ldr	r2, [r7, #4]
   862e8:	6053      	str	r3, [r2, #4]
   862ea:	687a      	ldr	r2, [r7, #4]
   862ec:	6013      	str	r3, [r2, #0]
    cbuf->dropped = 0;
   862ee:	687b      	ldr	r3, [r7, #4]
   862f0:	2200      	movs	r2, #0
   862f2:	609a      	str	r2, [r3, #8]
}
   862f4:	bf00      	nop
   862f6:	370c      	adds	r7, #12
   862f8:	46bd      	mov	sp, r7
   862fa:	bc80      	pop	{r7}
   862fc:	4770      	bx	lr

000862fe <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   862fe:	b480      	push	{r7}
   86300:	b085      	sub	sp, #20
   86302:	af00      	add	r7, sp, #0
   86304:	6078      	str	r0, [r7, #4]
   86306:	460b      	mov	r3, r1
   86308:	70fb      	strb	r3, [r7, #3]
   8630a:	4613      	mov	r3, r2
   8630c:	70bb      	strb	r3, [r7, #2]
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   8630e:	687b      	ldr	r3, [r7, #4]
   86310:	681b      	ldr	r3, [r3, #0]
   86312:	60fb      	str	r3, [r7, #12]
    newhead++;
   86314:	68fb      	ldr	r3, [r7, #12]
   86316:	3301      	adds	r3, #1
   86318:	60fb      	str	r3, [r7, #12]
    if (newhead >= CIRCBUFSIZE)
   8631a:	68fb      	ldr	r3, [r7, #12]
   8631c:	2b7f      	cmp	r3, #127	; 0x7f
   8631e:	d90e      	bls.n	8633e <add_to_circ_buf+0x40>
        newhead = 0;
   86320:	2300      	movs	r3, #0
   86322:	60fb      	str	r3, [r7, #12]
    while (newhead == cbuf->tail)
   86324:	e00b      	b.n	8633e <add_to_circ_buf+0x40>
    {
        if (!block)
   86326:	78bb      	ldrb	r3, [r7, #2]
   86328:	f083 0301 	eor.w	r3, r3, #1
   8632c:	b2db      	uxtb	r3, r3
   8632e:	2b00      	cmp	r3, #0
   86330:	d005      	beq.n	8633e <add_to_circ_buf+0x40>
        {
            cbuf->dropped++;
   86332:	687b      	ldr	r3, [r7, #4]
   86334:	689b      	ldr	r3, [r3, #8]
   86336:	1c5a      	adds	r2, r3, #1
   86338:	687b      	ldr	r3, [r7, #4]
   8633a:	609a      	str	r2, [r3, #8]
            return;
   8633c:	e00d      	b.n	8635a <add_to_circ_buf+0x5c>
    while (newhead == cbuf->tail)
   8633e:	687b      	ldr	r3, [r7, #4]
   86340:	685b      	ldr	r3, [r3, #4]
   86342:	68fa      	ldr	r2, [r7, #12]
   86344:	429a      	cmp	r2, r3
   86346:	d0ee      	beq.n	86326 <add_to_circ_buf+0x28>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   86348:	687b      	ldr	r3, [r7, #4]
   8634a:	681b      	ldr	r3, [r3, #0]
   8634c:	687a      	ldr	r2, [r7, #4]
   8634e:	4413      	add	r3, r2
   86350:	78fa      	ldrb	r2, [r7, #3]
   86352:	731a      	strb	r2, [r3, #12]
    cbuf->head = newhead;
   86354:	687b      	ldr	r3, [r7, #4]
   86356:	68fa      	ldr	r2, [r7, #12]
   86358:	601a      	str	r2, [r3, #0]
}
   8635a:	3714      	adds	r7, #20
   8635c:	46bd      	mov	sp, r7
   8635e:	bc80      	pop	{r7}
   86360:	4770      	bx	lr

00086362 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   86362:	b480      	push	{r7}
   86364:	b085      	sub	sp, #20
   86366:	af00      	add	r7, sp, #0
   86368:	6078      	str	r0, [r7, #4]
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   8636a:	687b      	ldr	r3, [r7, #4]
   8636c:	685b      	ldr	r3, [r3, #4]
   8636e:	60fb      	str	r3, [r7, #12]
    uint8_t retval = cbuf->buf[newtail];
   86370:	687a      	ldr	r2, [r7, #4]
   86372:	68fb      	ldr	r3, [r7, #12]
   86374:	4413      	add	r3, r2
   86376:	330c      	adds	r3, #12
   86378:	781b      	ldrb	r3, [r3, #0]
   8637a:	72fb      	strb	r3, [r7, #11]

    if (newtail == cbuf->head)
   8637c:	687b      	ldr	r3, [r7, #4]
   8637e:	681b      	ldr	r3, [r3, #0]
   86380:	68fa      	ldr	r2, [r7, #12]
   86382:	429a      	cmp	r2, r3
   86384:	d101      	bne.n	8638a <get_from_circ_buf+0x28>
        return SERIAL_ERR;
   86386:	23ff      	movs	r3, #255	; 0xff
   86388:	e00b      	b.n	863a2 <get_from_circ_buf+0x40>

    newtail++;
   8638a:	68fb      	ldr	r3, [r7, #12]
   8638c:	3301      	adds	r3, #1
   8638e:	60fb      	str	r3, [r7, #12]
    if (newtail >= CIRCBUFSIZE)
   86390:	68fb      	ldr	r3, [r7, #12]
   86392:	2b7f      	cmp	r3, #127	; 0x7f
   86394:	d901      	bls.n	8639a <get_from_circ_buf+0x38>
        // Rollover
        newtail = 0;
   86396:	2300      	movs	r3, #0
   86398:	60fb      	str	r3, [r7, #12]
    cbuf->tail = newtail;
   8639a:	687b      	ldr	r3, [r7, #4]
   8639c:	68fa      	ldr	r2, [r7, #12]
   8639e:	605a      	str	r2, [r3, #4]

    return retval;
   863a0:	7afb      	ldrb	r3, [r7, #11]
}
   863a2:	4618      	mov	r0, r3
   863a4:	3714      	adds	r7, #20
   863a6:	46bd      	mov	sp, r7
   863a8:	bc80      	pop	{r7}
   863aa:	4770      	bx	lr

000863ac <circ_buf_has_char>:

    @retval true if buffer contains data.
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
   863ac:	b480      	push	{r7}
   863ae:	b085      	sub	sp, #20
   863b0:	af00      	add	r7, sp, #0
   863b2:	6078      	str	r0, [r7, #4]
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   863b4:	687b      	ldr	r3, [r7, #4]
   863b6:	681b      	ldr	r3, [r3, #0]
   863b8:	60fb      	str	r3, [r7, #12]
    return (head != cbuf->tail);
   863ba:	687b      	ldr	r3, [r7, #4]
   863bc:	685b      	ldr	r3, [r3, #4]
   863be:	68fa      	ldr	r2, [r7, #12]
   863c0:	429a      	cmp	r2, r3
   863c2:	bf14      	ite	ne
   863c4:	2301      	movne	r3, #1
   863c6:	2300      	moveq	r3, #0
   863c8:	b2db      	uxtb	r3, r3
}
   863ca:	4618      	mov	r0, r3
   863cc:	3714      	adds	r7, #20
   863ce:	46bd      	mov	sp, r7
   863d0:	bc80      	pop	{r7}
   863d2:	4770      	bx	lr

000863d4 <circ_buf_count>:
   @param cbuf is the circular buffer to query

   @return count Number of chars in buffer.
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
<<<<<<< HEAD
   8668e:	b480      	push	{r7}
   86690:	b083      	sub	sp, #12
   86692:	af00      	add	r7, sp, #0
   86694:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   86696:	687b      	ldr	r3, [r7, #4]
   86698:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   8669c:	601a      	str	r2, [r3, #0]
}
   8669e:	bf00      	nop
   866a0:	370c      	adds	r7, #12
   866a2:	46bd      	mov	sp, r7
   866a4:	bc80      	pop	{r7}
   866a6:	4770      	bx	lr

000866a8 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
=======
   863d4:	b480      	push	{r7}
   863d6:	b085      	sub	sp, #20
   863d8:	af00      	add	r7, sp, #0
   863da:	6078      	str	r0, [r7, #4]
    int count;

    count = cbuf->head;
   863dc:	687b      	ldr	r3, [r7, #4]
   863de:	681b      	ldr	r3, [r3, #0]
   863e0:	60fb      	str	r3, [r7, #12]
    count -= cbuf->tail;
   863e2:	687b      	ldr	r3, [r7, #4]
   863e4:	685b      	ldr	r3, [r3, #4]
   863e6:	68fa      	ldr	r2, [r7, #12]
   863e8:	1ad3      	subs	r3, r2, r3
   863ea:	60fb      	str	r3, [r7, #12]
    if (count < 0)
   863ec:	68fb      	ldr	r3, [r7, #12]
   863ee:	2b00      	cmp	r3, #0
   863f0:	da02      	bge.n	863f8 <circ_buf_count+0x24>
        count += CIRCBUFSIZE;
   863f2:	68fb      	ldr	r3, [r7, #12]
   863f4:	3380      	adds	r3, #128	; 0x80
   863f6:	60fb      	str	r3, [r7, #12]
    return (unsigned int)count;
   863f8:	68fb      	ldr	r3, [r7, #12]
}
   863fa:	4618      	mov	r0, r3
   863fc:	3714      	adds	r7, #20
   863fe:	46bd      	mov	sp, r7
   86400:	bc80      	pop	{r7}
   86402:	4770      	bx	lr

00086404 <cpu_irq_enter_critical>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
<<<<<<< HEAD
   866a8:	b480      	push	{r7}
   866aa:	b083      	sub	sp, #12
   866ac:	af00      	add	r7, sp, #0
   866ae:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   866b0:	687b      	ldr	r3, [r7, #4]
   866b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   866b6:	601a      	str	r2, [r3, #0]
}
   866b8:	bf00      	nop
   866ba:	370c      	adds	r7, #12
   866bc:	46bd      	mov	sp, r7
   866be:	bc80      	pop	{r7}
   866c0:	4770      	bx	lr

000866c2 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   866c2:	b480      	push	{r7}
   866c4:	b083      	sub	sp, #12
   866c6:	af00      	add	r7, sp, #0
   866c8:	6078      	str	r0, [r7, #4]
   866ca:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   866cc:	bf00      	nop
   866ce:	687b      	ldr	r3, [r7, #4]
   866d0:	695b      	ldr	r3, [r3, #20]
   866d2:	f003 0302 	and.w	r3, r3, #2
   866d6:	2b00      	cmp	r3, #0
   866d8:	d0f9      	beq.n	866ce <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   866da:	683b      	ldr	r3, [r7, #0]
   866dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
   866e0:	687b      	ldr	r3, [r7, #4]
   866e2:	61da      	str	r2, [r3, #28]

	return 0;
   866e4:	2300      	movs	r3, #0
}
   866e6:	4618      	mov	r0, r3
   866e8:	370c      	adds	r7, #12
   866ea:	46bd      	mov	sp, r7
   866ec:	bc80      	pop	{r7}
   866ee:	4770      	bx	lr

000866f0 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   866f0:	b480      	push	{r7}
   866f2:	b083      	sub	sp, #12
   866f4:	af00      	add	r7, sp, #0
   866f6:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   866f8:	687b      	ldr	r3, [r7, #4]
   866fa:	4a04      	ldr	r2, [pc, #16]	; (8670c <usart_disable_writeprotect+0x1c>)
   866fc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   86700:	bf00      	nop
   86702:	370c      	adds	r7, #12
   86704:	46bd      	mov	sp, r7
   86706:	bc80      	pop	{r7}
   86708:	4770      	bx	lr
   8670a:	bf00      	nop
   8670c:	55534100 	.word	0x55534100

00086710 <_write>:
=======
   86404:	b480      	push	{r7}
   86406:	b083      	sub	sp, #12
   86408:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   8640a:	4b11      	ldr	r3, [pc, #68]	; (86450 <cpu_irq_enter_critical+0x4c>)
   8640c:	681b      	ldr	r3, [r3, #0]
   8640e:	2b00      	cmp	r3, #0
   86410:	d114      	bne.n	8643c <cpu_irq_enter_critical+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   86412:	f3ef 8310 	mrs	r3, PRIMASK
   86416:	607b      	str	r3, [r7, #4]
  return(result);
   86418:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   8641a:	2b00      	cmp	r3, #0
   8641c:	d10b      	bne.n	86436 <cpu_irq_enter_critical+0x32>
  __ASM volatile ("cpsid i");
   8641e:	b672      	cpsid	i
}
   86420:	bf00      	nop
  __ASM volatile ("dmb");
   86422:	f3bf 8f5f 	dmb	sy
}
   86426:	bf00      	nop
			cpu_irq_disable();
   86428:	4b0a      	ldr	r3, [pc, #40]	; (86454 <cpu_irq_enter_critical+0x50>)
   8642a:	2200      	movs	r2, #0
   8642c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   8642e:	4b0a      	ldr	r3, [pc, #40]	; (86458 <cpu_irq_enter_critical+0x54>)
   86430:	2201      	movs	r2, #1
   86432:	701a      	strb	r2, [r3, #0]
   86434:	e002      	b.n	8643c <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   86436:	4b08      	ldr	r3, [pc, #32]	; (86458 <cpu_irq_enter_critical+0x54>)
   86438:	2200      	movs	r2, #0
   8643a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   8643c:	4b04      	ldr	r3, [pc, #16]	; (86450 <cpu_irq_enter_critical+0x4c>)
   8643e:	681b      	ldr	r3, [r3, #0]
   86440:	3301      	adds	r3, #1
   86442:	4a03      	ldr	r2, [pc, #12]	; (86450 <cpu_irq_enter_critical+0x4c>)
   86444:	6013      	str	r3, [r2, #0]
}
   86446:	bf00      	nop
   86448:	370c      	adds	r7, #12
   8644a:	46bd      	mov	sp, r7
   8644c:	bc80      	pop	{r7}
   8644e:	4770      	bx	lr
   86450:	20001374 	.word	0x20001374
   86454:	200003aa 	.word	0x200003aa
   86458:	20001378 	.word	0x20001378

0008645c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   8645c:	b480      	push	{r7}
   8645e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   86460:	4b0c      	ldr	r3, [pc, #48]	; (86494 <cpu_irq_leave_critical+0x38>)
   86462:	681b      	ldr	r3, [r3, #0]
   86464:	3b01      	subs	r3, #1
   86466:	4a0b      	ldr	r2, [pc, #44]	; (86494 <cpu_irq_leave_critical+0x38>)
   86468:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   8646a:	4b0a      	ldr	r3, [pc, #40]	; (86494 <cpu_irq_leave_critical+0x38>)
   8646c:	681b      	ldr	r3, [r3, #0]
   8646e:	2b00      	cmp	r3, #0
   86470:	d10c      	bne.n	8648c <cpu_irq_leave_critical+0x30>
   86472:	4b09      	ldr	r3, [pc, #36]	; (86498 <cpu_irq_leave_critical+0x3c>)
   86474:	781b      	ldrb	r3, [r3, #0]
   86476:	b2db      	uxtb	r3, r3
   86478:	2b00      	cmp	r3, #0
   8647a:	d007      	beq.n	8648c <cpu_irq_leave_critical+0x30>
		cpu_irq_enable();
   8647c:	4b07      	ldr	r3, [pc, #28]	; (8649c <cpu_irq_leave_critical+0x40>)
   8647e:	2201      	movs	r2, #1
   86480:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   86482:	f3bf 8f5f 	dmb	sy
}
   86486:	bf00      	nop
  __ASM volatile ("cpsie i");
   86488:	b662      	cpsie	i
}
   8648a:	bf00      	nop
	}
}
   8648c:	bf00      	nop
   8648e:	46bd      	mov	sp, r7
   86490:	bc80      	pop	{r7}
   86492:	4770      	bx	lr
   86494:	20001374 	.word	0x20001374
   86498:	20001378 	.word	0x20001378
   8649c:	200003aa 	.word	0x200003aa

000864a0 <_read>:
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
<<<<<<< HEAD
   86710:	b580      	push	{r7, lr}
   86712:	b086      	sub	sp, #24
   86714:	af00      	add	r7, sp, #0
   86716:	60f8      	str	r0, [r7, #12]
   86718:	60b9      	str	r1, [r7, #8]
   8671a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   8671c:	2300      	movs	r3, #0
   8671e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   86720:	68fb      	ldr	r3, [r7, #12]
   86722:	2b01      	cmp	r3, #1
   86724:	d01e      	beq.n	86764 <_write+0x54>
   86726:	68fb      	ldr	r3, [r7, #12]
   86728:	2b02      	cmp	r3, #2
   8672a:	d01b      	beq.n	86764 <_write+0x54>
   8672c:	68fb      	ldr	r3, [r7, #12]
   8672e:	2b03      	cmp	r3, #3
   86730:	d018      	beq.n	86764 <_write+0x54>
		return -1;
   86732:	f04f 33ff 	mov.w	r3, #4294967295
   86736:	e019      	b.n	8676c <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   86738:	4b0e      	ldr	r3, [pc, #56]	; (86774 <_write+0x64>)
   8673a:	681a      	ldr	r2, [r3, #0]
   8673c:	4b0e      	ldr	r3, [pc, #56]	; (86778 <_write+0x68>)
   8673e:	6818      	ldr	r0, [r3, #0]
   86740:	68bb      	ldr	r3, [r7, #8]
   86742:	1c59      	adds	r1, r3, #1
   86744:	60b9      	str	r1, [r7, #8]
   86746:	781b      	ldrb	r3, [r3, #0]
   86748:	4619      	mov	r1, r3
   8674a:	4790      	blx	r2
   8674c:	4603      	mov	r3, r0
   8674e:	2b00      	cmp	r3, #0
   86750:	da02      	bge.n	86758 <_write+0x48>
			return -1;
   86752:	f04f 33ff 	mov.w	r3, #4294967295
   86756:	e009      	b.n	8676c <_write+0x5c>
		}
		++nChars;
   86758:	697b      	ldr	r3, [r7, #20]
   8675a:	3301      	adds	r3, #1
   8675c:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   8675e:	687b      	ldr	r3, [r7, #4]
   86760:	3b01      	subs	r3, #1
   86762:	607b      	str	r3, [r7, #4]
   86764:	687b      	ldr	r3, [r7, #4]
   86766:	2b00      	cmp	r3, #0
   86768:	d1e6      	bne.n	86738 <_write+0x28>
	}
	return nChars;
   8676a:	697b      	ldr	r3, [r7, #20]
}
   8676c:	4618      	mov	r0, r3
   8676e:	3718      	adds	r7, #24
   86770:	46bd      	mov	sp, r7
   86772:	bd80      	pop	{r7, pc}
   86774:	20001840 	.word	0x20001840
   86778:	20001844 	.word	0x20001844

0008677c <__aeabi_uldivmod>:
   8677c:	b953      	cbnz	r3, 86794 <__aeabi_uldivmod+0x18>
   8677e:	b94a      	cbnz	r2, 86794 <__aeabi_uldivmod+0x18>
   86780:	2900      	cmp	r1, #0
   86782:	bf08      	it	eq
   86784:	2800      	cmpeq	r0, #0
   86786:	bf1c      	itt	ne
   86788:	f04f 31ff 	movne.w	r1, #4294967295
   8678c:	f04f 30ff 	movne.w	r0, #4294967295
   86790:	f000 b96e 	b.w	86a70 <__aeabi_idiv0>
   86794:	f1ad 0c08 	sub.w	ip, sp, #8
   86798:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8679c:	f000 f806 	bl	867ac <__udivmoddi4>
   867a0:	f8dd e004 	ldr.w	lr, [sp, #4]
   867a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   867a8:	b004      	add	sp, #16
   867aa:	4770      	bx	lr

000867ac <__udivmoddi4>:
   867ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   867b0:	9e08      	ldr	r6, [sp, #32]
   867b2:	460d      	mov	r5, r1
   867b4:	4604      	mov	r4, r0
   867b6:	468e      	mov	lr, r1
   867b8:	2b00      	cmp	r3, #0
   867ba:	f040 8083 	bne.w	868c4 <__udivmoddi4+0x118>
   867be:	428a      	cmp	r2, r1
   867c0:	4617      	mov	r7, r2
   867c2:	d947      	bls.n	86854 <__udivmoddi4+0xa8>
   867c4:	fab2 f382 	clz	r3, r2
   867c8:	b14b      	cbz	r3, 867de <__udivmoddi4+0x32>
   867ca:	f1c3 0120 	rsb	r1, r3, #32
   867ce:	fa05 fe03 	lsl.w	lr, r5, r3
   867d2:	fa20 f101 	lsr.w	r1, r0, r1
   867d6:	409f      	lsls	r7, r3
   867d8:	ea41 0e0e 	orr.w	lr, r1, lr
   867dc:	409c      	lsls	r4, r3
   867de:	ea4f 4817 	mov.w	r8, r7, lsr #16
   867e2:	fbbe fcf8 	udiv	ip, lr, r8
   867e6:	fa1f f987 	uxth.w	r9, r7
   867ea:	fb08 e21c 	mls	r2, r8, ip, lr
   867ee:	fb0c f009 	mul.w	r0, ip, r9
   867f2:	0c21      	lsrs	r1, r4, #16
   867f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   867f8:	4290      	cmp	r0, r2
   867fa:	d90a      	bls.n	86812 <__udivmoddi4+0x66>
   867fc:	18ba      	adds	r2, r7, r2
   867fe:	f10c 31ff 	add.w	r1, ip, #4294967295
   86802:	f080 8118 	bcs.w	86a36 <__udivmoddi4+0x28a>
   86806:	4290      	cmp	r0, r2
   86808:	f240 8115 	bls.w	86a36 <__udivmoddi4+0x28a>
   8680c:	f1ac 0c02 	sub.w	ip, ip, #2
   86810:	443a      	add	r2, r7
   86812:	1a12      	subs	r2, r2, r0
   86814:	fbb2 f0f8 	udiv	r0, r2, r8
   86818:	fb08 2210 	mls	r2, r8, r0, r2
   8681c:	fb00 f109 	mul.w	r1, r0, r9
   86820:	b2a4      	uxth	r4, r4
   86822:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   86826:	42a1      	cmp	r1, r4
   86828:	d909      	bls.n	8683e <__udivmoddi4+0x92>
   8682a:	193c      	adds	r4, r7, r4
   8682c:	f100 32ff 	add.w	r2, r0, #4294967295
   86830:	f080 8103 	bcs.w	86a3a <__udivmoddi4+0x28e>
   86834:	42a1      	cmp	r1, r4
   86836:	f240 8100 	bls.w	86a3a <__udivmoddi4+0x28e>
   8683a:	3802      	subs	r0, #2
   8683c:	443c      	add	r4, r7
   8683e:	1a64      	subs	r4, r4, r1
   86840:	2100      	movs	r1, #0
   86842:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   86846:	b11e      	cbz	r6, 86850 <__udivmoddi4+0xa4>
   86848:	2200      	movs	r2, #0
   8684a:	40dc      	lsrs	r4, r3
   8684c:	e9c6 4200 	strd	r4, r2, [r6]
   86850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86854:	b902      	cbnz	r2, 86858 <__udivmoddi4+0xac>
   86856:	deff      	udf	#255	; 0xff
   86858:	fab2 f382 	clz	r3, r2
   8685c:	2b00      	cmp	r3, #0
   8685e:	d14f      	bne.n	86900 <__udivmoddi4+0x154>
   86860:	1a8d      	subs	r5, r1, r2
   86862:	2101      	movs	r1, #1
   86864:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   86868:	fa1f f882 	uxth.w	r8, r2
   8686c:	fbb5 fcfe 	udiv	ip, r5, lr
   86870:	fb0e 551c 	mls	r5, lr, ip, r5
   86874:	fb08 f00c 	mul.w	r0, r8, ip
   86878:	0c22      	lsrs	r2, r4, #16
   8687a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   8687e:	42a8      	cmp	r0, r5
   86880:	d907      	bls.n	86892 <__udivmoddi4+0xe6>
   86882:	197d      	adds	r5, r7, r5
   86884:	f10c 32ff 	add.w	r2, ip, #4294967295
   86888:	d202      	bcs.n	86890 <__udivmoddi4+0xe4>
   8688a:	42a8      	cmp	r0, r5
   8688c:	f200 80e9 	bhi.w	86a62 <__udivmoddi4+0x2b6>
   86890:	4694      	mov	ip, r2
   86892:	1a2d      	subs	r5, r5, r0
   86894:	fbb5 f0fe 	udiv	r0, r5, lr
   86898:	fb0e 5510 	mls	r5, lr, r0, r5
   8689c:	fb08 f800 	mul.w	r8, r8, r0
   868a0:	b2a4      	uxth	r4, r4
   868a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   868a6:	45a0      	cmp	r8, r4
   868a8:	d907      	bls.n	868ba <__udivmoddi4+0x10e>
   868aa:	193c      	adds	r4, r7, r4
   868ac:	f100 32ff 	add.w	r2, r0, #4294967295
   868b0:	d202      	bcs.n	868b8 <__udivmoddi4+0x10c>
   868b2:	45a0      	cmp	r8, r4
   868b4:	f200 80d9 	bhi.w	86a6a <__udivmoddi4+0x2be>
   868b8:	4610      	mov	r0, r2
   868ba:	eba4 0408 	sub.w	r4, r4, r8
   868be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   868c2:	e7c0      	b.n	86846 <__udivmoddi4+0x9a>
   868c4:	428b      	cmp	r3, r1
   868c6:	d908      	bls.n	868da <__udivmoddi4+0x12e>
   868c8:	2e00      	cmp	r6, #0
   868ca:	f000 80b1 	beq.w	86a30 <__udivmoddi4+0x284>
   868ce:	2100      	movs	r1, #0
   868d0:	e9c6 0500 	strd	r0, r5, [r6]
   868d4:	4608      	mov	r0, r1
   868d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   868da:	fab3 f183 	clz	r1, r3
   868de:	2900      	cmp	r1, #0
   868e0:	d14b      	bne.n	8697a <__udivmoddi4+0x1ce>
   868e2:	42ab      	cmp	r3, r5
   868e4:	d302      	bcc.n	868ec <__udivmoddi4+0x140>
   868e6:	4282      	cmp	r2, r0
   868e8:	f200 80b9 	bhi.w	86a5e <__udivmoddi4+0x2b2>
   868ec:	1a84      	subs	r4, r0, r2
   868ee:	eb65 0303 	sbc.w	r3, r5, r3
   868f2:	2001      	movs	r0, #1
   868f4:	469e      	mov	lr, r3
   868f6:	2e00      	cmp	r6, #0
   868f8:	d0aa      	beq.n	86850 <__udivmoddi4+0xa4>
   868fa:	e9c6 4e00 	strd	r4, lr, [r6]
   868fe:	e7a7      	b.n	86850 <__udivmoddi4+0xa4>
   86900:	409f      	lsls	r7, r3
   86902:	f1c3 0220 	rsb	r2, r3, #32
   86906:	40d1      	lsrs	r1, r2
   86908:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   8690c:	fbb1 f0fe 	udiv	r0, r1, lr
   86910:	fa1f f887 	uxth.w	r8, r7
   86914:	fb0e 1110 	mls	r1, lr, r0, r1
   86918:	fa24 f202 	lsr.w	r2, r4, r2
   8691c:	409d      	lsls	r5, r3
   8691e:	fb00 fc08 	mul.w	ip, r0, r8
   86922:	432a      	orrs	r2, r5
   86924:	0c15      	lsrs	r5, r2, #16
   86926:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8692a:	45ac      	cmp	ip, r5
   8692c:	fa04 f403 	lsl.w	r4, r4, r3
   86930:	d909      	bls.n	86946 <__udivmoddi4+0x19a>
   86932:	197d      	adds	r5, r7, r5
   86934:	f100 31ff 	add.w	r1, r0, #4294967295
   86938:	f080 808f 	bcs.w	86a5a <__udivmoddi4+0x2ae>
   8693c:	45ac      	cmp	ip, r5
   8693e:	f240 808c 	bls.w	86a5a <__udivmoddi4+0x2ae>
   86942:	3802      	subs	r0, #2
   86944:	443d      	add	r5, r7
   86946:	eba5 050c 	sub.w	r5, r5, ip
   8694a:	fbb5 f1fe 	udiv	r1, r5, lr
   8694e:	fb0e 5c11 	mls	ip, lr, r1, r5
   86952:	fb01 f908 	mul.w	r9, r1, r8
   86956:	b295      	uxth	r5, r2
   86958:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   8695c:	45a9      	cmp	r9, r5
   8695e:	d907      	bls.n	86970 <__udivmoddi4+0x1c4>
   86960:	197d      	adds	r5, r7, r5
   86962:	f101 32ff 	add.w	r2, r1, #4294967295
   86966:	d274      	bcs.n	86a52 <__udivmoddi4+0x2a6>
   86968:	45a9      	cmp	r9, r5
   8696a:	d972      	bls.n	86a52 <__udivmoddi4+0x2a6>
   8696c:	3902      	subs	r1, #2
   8696e:	443d      	add	r5, r7
   86970:	eba5 0509 	sub.w	r5, r5, r9
   86974:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   86978:	e778      	b.n	8686c <__udivmoddi4+0xc0>
   8697a:	f1c1 0720 	rsb	r7, r1, #32
   8697e:	408b      	lsls	r3, r1
   86980:	fa22 fc07 	lsr.w	ip, r2, r7
   86984:	ea4c 0c03 	orr.w	ip, ip, r3
   86988:	fa25 f407 	lsr.w	r4, r5, r7
   8698c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   86990:	fbb4 f9fe 	udiv	r9, r4, lr
   86994:	fa1f f88c 	uxth.w	r8, ip
   86998:	fb0e 4419 	mls	r4, lr, r9, r4
   8699c:	fa20 f307 	lsr.w	r3, r0, r7
   869a0:	fb09 fa08 	mul.w	sl, r9, r8
   869a4:	408d      	lsls	r5, r1
   869a6:	431d      	orrs	r5, r3
   869a8:	0c2b      	lsrs	r3, r5, #16
   869aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   869ae:	45a2      	cmp	sl, r4
   869b0:	fa02 f201 	lsl.w	r2, r2, r1
   869b4:	fa00 f301 	lsl.w	r3, r0, r1
   869b8:	d909      	bls.n	869ce <__udivmoddi4+0x222>
   869ba:	eb1c 0404 	adds.w	r4, ip, r4
   869be:	f109 30ff 	add.w	r0, r9, #4294967295
   869c2:	d248      	bcs.n	86a56 <__udivmoddi4+0x2aa>
   869c4:	45a2      	cmp	sl, r4
   869c6:	d946      	bls.n	86a56 <__udivmoddi4+0x2aa>
   869c8:	f1a9 0902 	sub.w	r9, r9, #2
   869cc:	4464      	add	r4, ip
   869ce:	eba4 040a 	sub.w	r4, r4, sl
   869d2:	fbb4 f0fe 	udiv	r0, r4, lr
   869d6:	fb0e 4410 	mls	r4, lr, r0, r4
   869da:	fb00 fa08 	mul.w	sl, r0, r8
   869de:	b2ad      	uxth	r5, r5
   869e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   869e4:	45a2      	cmp	sl, r4
   869e6:	d908      	bls.n	869fa <__udivmoddi4+0x24e>
   869e8:	eb1c 0404 	adds.w	r4, ip, r4
   869ec:	f100 35ff 	add.w	r5, r0, #4294967295
   869f0:	d22d      	bcs.n	86a4e <__udivmoddi4+0x2a2>
   869f2:	45a2      	cmp	sl, r4
   869f4:	d92b      	bls.n	86a4e <__udivmoddi4+0x2a2>
   869f6:	3802      	subs	r0, #2
   869f8:	4464      	add	r4, ip
   869fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   869fe:	fba0 8902 	umull	r8, r9, r0, r2
   86a02:	eba4 040a 	sub.w	r4, r4, sl
   86a06:	454c      	cmp	r4, r9
   86a08:	46c6      	mov	lr, r8
   86a0a:	464d      	mov	r5, r9
   86a0c:	d319      	bcc.n	86a42 <__udivmoddi4+0x296>
   86a0e:	d016      	beq.n	86a3e <__udivmoddi4+0x292>
   86a10:	b15e      	cbz	r6, 86a2a <__udivmoddi4+0x27e>
   86a12:	ebb3 020e 	subs.w	r2, r3, lr
   86a16:	eb64 0405 	sbc.w	r4, r4, r5
   86a1a:	fa04 f707 	lsl.w	r7, r4, r7
   86a1e:	fa22 f301 	lsr.w	r3, r2, r1
   86a22:	431f      	orrs	r7, r3
   86a24:	40cc      	lsrs	r4, r1
   86a26:	e9c6 7400 	strd	r7, r4, [r6]
   86a2a:	2100      	movs	r1, #0
   86a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86a30:	4631      	mov	r1, r6
   86a32:	4630      	mov	r0, r6
   86a34:	e70c      	b.n	86850 <__udivmoddi4+0xa4>
   86a36:	468c      	mov	ip, r1
   86a38:	e6eb      	b.n	86812 <__udivmoddi4+0x66>
   86a3a:	4610      	mov	r0, r2
   86a3c:	e6ff      	b.n	8683e <__udivmoddi4+0x92>
   86a3e:	4543      	cmp	r3, r8
   86a40:	d2e6      	bcs.n	86a10 <__udivmoddi4+0x264>
   86a42:	ebb8 0e02 	subs.w	lr, r8, r2
   86a46:	eb69 050c 	sbc.w	r5, r9, ip
   86a4a:	3801      	subs	r0, #1
   86a4c:	e7e0      	b.n	86a10 <__udivmoddi4+0x264>
   86a4e:	4628      	mov	r0, r5
   86a50:	e7d3      	b.n	869fa <__udivmoddi4+0x24e>
   86a52:	4611      	mov	r1, r2
   86a54:	e78c      	b.n	86970 <__udivmoddi4+0x1c4>
   86a56:	4681      	mov	r9, r0
   86a58:	e7b9      	b.n	869ce <__udivmoddi4+0x222>
   86a5a:	4608      	mov	r0, r1
   86a5c:	e773      	b.n	86946 <__udivmoddi4+0x19a>
   86a5e:	4608      	mov	r0, r1
   86a60:	e749      	b.n	868f6 <__udivmoddi4+0x14a>
   86a62:	f1ac 0c02 	sub.w	ip, ip, #2
   86a66:	443d      	add	r5, r7
   86a68:	e713      	b.n	86892 <__udivmoddi4+0xe6>
   86a6a:	3802      	subs	r0, #2
   86a6c:	443c      	add	r4, r7
   86a6e:	e724      	b.n	868ba <__udivmoddi4+0x10e>

00086a70 <__aeabi_idiv0>:
   86a70:	4770      	bx	lr
   86a72:	bf00      	nop

00086a74 <__libc_init_array>:
   86a74:	b570      	push	{r4, r5, r6, lr}
   86a76:	4e0d      	ldr	r6, [pc, #52]	; (86aac <__libc_init_array+0x38>)
   86a78:	4d0d      	ldr	r5, [pc, #52]	; (86ab0 <__libc_init_array+0x3c>)
   86a7a:	1b76      	subs	r6, r6, r5
   86a7c:	10b6      	asrs	r6, r6, #2
   86a7e:	d006      	beq.n	86a8e <__libc_init_array+0x1a>
   86a80:	2400      	movs	r4, #0
   86a82:	f855 3b04 	ldr.w	r3, [r5], #4
   86a86:	3401      	adds	r4, #1
   86a88:	4798      	blx	r3
   86a8a:	42a6      	cmp	r6, r4
   86a8c:	d1f9      	bne.n	86a82 <__libc_init_array+0xe>
   86a8e:	4e09      	ldr	r6, [pc, #36]	; (86ab4 <__libc_init_array+0x40>)
   86a90:	4d09      	ldr	r5, [pc, #36]	; (86ab8 <__libc_init_array+0x44>)
   86a92:	f006 ff21 	bl	8d8d8 <_init>
   86a96:	1b76      	subs	r6, r6, r5
   86a98:	10b6      	asrs	r6, r6, #2
   86a9a:	d006      	beq.n	86aaa <__libc_init_array+0x36>
   86a9c:	2400      	movs	r4, #0
   86a9e:	f855 3b04 	ldr.w	r3, [r5], #4
   86aa2:	3401      	adds	r4, #1
   86aa4:	4798      	blx	r3
   86aa6:	42a6      	cmp	r6, r4
   86aa8:	d1f9      	bne.n	86a9e <__libc_init_array+0x2a>
   86aaa:	bd70      	pop	{r4, r5, r6, pc}
   86aac:	0008d8e4 	.word	0x0008d8e4
   86ab0:	0008d8e4 	.word	0x0008d8e4
   86ab4:	0008d8ec 	.word	0x0008d8ec
   86ab8:	0008d8e4 	.word	0x0008d8e4

00086abc <iprintf>:
   86abc:	b40f      	push	{r0, r1, r2, r3}
   86abe:	b500      	push	{lr}
   86ac0:	4907      	ldr	r1, [pc, #28]	; (86ae0 <iprintf+0x24>)
   86ac2:	b083      	sub	sp, #12
   86ac4:	ab04      	add	r3, sp, #16
   86ac6:	6808      	ldr	r0, [r1, #0]
   86ac8:	f853 2b04 	ldr.w	r2, [r3], #4
   86acc:	6881      	ldr	r1, [r0, #8]
   86ace:	9301      	str	r3, [sp, #4]
   86ad0:	f001 fed4 	bl	8887c <_vfiprintf_r>
   86ad4:	b003      	add	sp, #12
   86ad6:	f85d eb04 	ldr.w	lr, [sp], #4
   86ada:	b004      	add	sp, #16
   86adc:	4770      	bx	lr
   86ade:	bf00      	nop
   86ae0:	20000440 	.word	0x20000440

00086ae4 <memcpy>:
   86ae4:	4684      	mov	ip, r0
   86ae6:	ea41 0300 	orr.w	r3, r1, r0
   86aea:	f013 0303 	ands.w	r3, r3, #3
   86aee:	d149      	bne.n	86b84 <memcpy+0xa0>
   86af0:	3a40      	subs	r2, #64	; 0x40
   86af2:	d323      	bcc.n	86b3c <memcpy+0x58>
   86af4:	680b      	ldr	r3, [r1, #0]
   86af6:	6003      	str	r3, [r0, #0]
   86af8:	684b      	ldr	r3, [r1, #4]
   86afa:	6043      	str	r3, [r0, #4]
   86afc:	688b      	ldr	r3, [r1, #8]
   86afe:	6083      	str	r3, [r0, #8]
   86b00:	68cb      	ldr	r3, [r1, #12]
   86b02:	60c3      	str	r3, [r0, #12]
   86b04:	690b      	ldr	r3, [r1, #16]
   86b06:	6103      	str	r3, [r0, #16]
   86b08:	694b      	ldr	r3, [r1, #20]
   86b0a:	6143      	str	r3, [r0, #20]
   86b0c:	698b      	ldr	r3, [r1, #24]
   86b0e:	6183      	str	r3, [r0, #24]
   86b10:	69cb      	ldr	r3, [r1, #28]
   86b12:	61c3      	str	r3, [r0, #28]
   86b14:	6a0b      	ldr	r3, [r1, #32]
   86b16:	6203      	str	r3, [r0, #32]
   86b18:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86b1a:	6243      	str	r3, [r0, #36]	; 0x24
   86b1c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86b1e:	6283      	str	r3, [r0, #40]	; 0x28
   86b20:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86b22:	62c3      	str	r3, [r0, #44]	; 0x2c
   86b24:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86b26:	6303      	str	r3, [r0, #48]	; 0x30
   86b28:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86b2a:	6343      	str	r3, [r0, #52]	; 0x34
   86b2c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86b2e:	6383      	str	r3, [r0, #56]	; 0x38
   86b30:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86b32:	63c3      	str	r3, [r0, #60]	; 0x3c
   86b34:	3040      	adds	r0, #64	; 0x40
   86b36:	3140      	adds	r1, #64	; 0x40
   86b38:	3a40      	subs	r2, #64	; 0x40
   86b3a:	d2db      	bcs.n	86af4 <memcpy+0x10>
   86b3c:	3230      	adds	r2, #48	; 0x30
   86b3e:	d30b      	bcc.n	86b58 <memcpy+0x74>
   86b40:	680b      	ldr	r3, [r1, #0]
   86b42:	6003      	str	r3, [r0, #0]
   86b44:	684b      	ldr	r3, [r1, #4]
   86b46:	6043      	str	r3, [r0, #4]
   86b48:	688b      	ldr	r3, [r1, #8]
   86b4a:	6083      	str	r3, [r0, #8]
   86b4c:	68cb      	ldr	r3, [r1, #12]
   86b4e:	60c3      	str	r3, [r0, #12]
   86b50:	3010      	adds	r0, #16
   86b52:	3110      	adds	r1, #16
   86b54:	3a10      	subs	r2, #16
   86b56:	d2f3      	bcs.n	86b40 <memcpy+0x5c>
   86b58:	320c      	adds	r2, #12
   86b5a:	d305      	bcc.n	86b68 <memcpy+0x84>
   86b5c:	f851 3b04 	ldr.w	r3, [r1], #4
   86b60:	f840 3b04 	str.w	r3, [r0], #4
   86b64:	3a04      	subs	r2, #4
   86b66:	d2f9      	bcs.n	86b5c <memcpy+0x78>
   86b68:	3204      	adds	r2, #4
   86b6a:	d008      	beq.n	86b7e <memcpy+0x9a>
   86b6c:	07d2      	lsls	r2, r2, #31
   86b6e:	bf1c      	itt	ne
   86b70:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86b74:	f800 3b01 	strbne.w	r3, [r0], #1
   86b78:	d301      	bcc.n	86b7e <memcpy+0x9a>
   86b7a:	880b      	ldrh	r3, [r1, #0]
   86b7c:	8003      	strh	r3, [r0, #0]
   86b7e:	4660      	mov	r0, ip
   86b80:	4770      	bx	lr
   86b82:	bf00      	nop
   86b84:	2a08      	cmp	r2, #8
   86b86:	d313      	bcc.n	86bb0 <memcpy+0xcc>
   86b88:	078b      	lsls	r3, r1, #30
   86b8a:	d0b1      	beq.n	86af0 <memcpy+0xc>
   86b8c:	f010 0303 	ands.w	r3, r0, #3
   86b90:	d0ae      	beq.n	86af0 <memcpy+0xc>
   86b92:	f1c3 0304 	rsb	r3, r3, #4
   86b96:	1ad2      	subs	r2, r2, r3
   86b98:	07db      	lsls	r3, r3, #31
   86b9a:	bf1c      	itt	ne
   86b9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86ba0:	f800 3b01 	strbne.w	r3, [r0], #1
   86ba4:	d3a4      	bcc.n	86af0 <memcpy+0xc>
   86ba6:	f831 3b02 	ldrh.w	r3, [r1], #2
   86baa:	f820 3b02 	strh.w	r3, [r0], #2
   86bae:	e79f      	b.n	86af0 <memcpy+0xc>
   86bb0:	3a04      	subs	r2, #4
   86bb2:	d3d9      	bcc.n	86b68 <memcpy+0x84>
   86bb4:	3a01      	subs	r2, #1
   86bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
   86bba:	f800 3b01 	strb.w	r3, [r0], #1
   86bbe:	d2f9      	bcs.n	86bb4 <memcpy+0xd0>
   86bc0:	780b      	ldrb	r3, [r1, #0]
   86bc2:	7003      	strb	r3, [r0, #0]
   86bc4:	784b      	ldrb	r3, [r1, #1]
   86bc6:	7043      	strb	r3, [r0, #1]
   86bc8:	788b      	ldrb	r3, [r1, #2]
   86bca:	7083      	strb	r3, [r0, #2]
   86bcc:	4660      	mov	r0, ip
   86bce:	4770      	bx	lr

00086bd0 <memset>:
   86bd0:	b4f0      	push	{r4, r5, r6, r7}
   86bd2:	0786      	lsls	r6, r0, #30
   86bd4:	d046      	beq.n	86c64 <memset+0x94>
   86bd6:	1e54      	subs	r4, r2, #1
   86bd8:	2a00      	cmp	r2, #0
   86bda:	d03c      	beq.n	86c56 <memset+0x86>
   86bdc:	4603      	mov	r3, r0
   86bde:	b2ca      	uxtb	r2, r1
   86be0:	e001      	b.n	86be6 <memset+0x16>
   86be2:	3c01      	subs	r4, #1
   86be4:	d337      	bcc.n	86c56 <memset+0x86>
   86be6:	f803 2b01 	strb.w	r2, [r3], #1
   86bea:	079d      	lsls	r5, r3, #30
   86bec:	d1f9      	bne.n	86be2 <memset+0x12>
   86bee:	2c03      	cmp	r4, #3
   86bf0:	d92a      	bls.n	86c48 <memset+0x78>
   86bf2:	b2cd      	uxtb	r5, r1
   86bf4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86bf8:	2c0f      	cmp	r4, #15
   86bfa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86bfe:	d934      	bls.n	86c6a <memset+0x9a>
   86c00:	f1a4 0210 	sub.w	r2, r4, #16
   86c04:	f022 0c0f 	bic.w	ip, r2, #15
   86c08:	f103 0720 	add.w	r7, r3, #32
   86c0c:	0916      	lsrs	r6, r2, #4
   86c0e:	4467      	add	r7, ip
   86c10:	f103 0210 	add.w	r2, r3, #16
   86c14:	e942 5504 	strd	r5, r5, [r2, #-16]
   86c18:	e942 5502 	strd	r5, r5, [r2, #-8]
   86c1c:	3210      	adds	r2, #16
   86c1e:	42ba      	cmp	r2, r7
   86c20:	d1f8      	bne.n	86c14 <memset+0x44>
   86c22:	1c72      	adds	r2, r6, #1
   86c24:	f014 0f0c 	tst.w	r4, #12
   86c28:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   86c2c:	f004 060f 	and.w	r6, r4, #15
   86c30:	d013      	beq.n	86c5a <memset+0x8a>
   86c32:	1f33      	subs	r3, r6, #4
   86c34:	f023 0303 	bic.w	r3, r3, #3
   86c38:	3304      	adds	r3, #4
   86c3a:	4413      	add	r3, r2
   86c3c:	f842 5b04 	str.w	r5, [r2], #4
   86c40:	4293      	cmp	r3, r2
   86c42:	d1fb      	bne.n	86c3c <memset+0x6c>
   86c44:	f006 0403 	and.w	r4, r6, #3
   86c48:	b12c      	cbz	r4, 86c56 <memset+0x86>
   86c4a:	b2ca      	uxtb	r2, r1
   86c4c:	441c      	add	r4, r3
   86c4e:	f803 2b01 	strb.w	r2, [r3], #1
   86c52:	429c      	cmp	r4, r3
   86c54:	d1fb      	bne.n	86c4e <memset+0x7e>
   86c56:	bcf0      	pop	{r4, r5, r6, r7}
   86c58:	4770      	bx	lr
   86c5a:	4634      	mov	r4, r6
   86c5c:	4613      	mov	r3, r2
   86c5e:	2c00      	cmp	r4, #0
   86c60:	d1f3      	bne.n	86c4a <memset+0x7a>
   86c62:	e7f8      	b.n	86c56 <memset+0x86>
   86c64:	4614      	mov	r4, r2
   86c66:	4603      	mov	r3, r0
   86c68:	e7c1      	b.n	86bee <memset+0x1e>
   86c6a:	461a      	mov	r2, r3
   86c6c:	4626      	mov	r6, r4
   86c6e:	e7e0      	b.n	86c32 <memset+0x62>

00086c70 <sprintf>:
   86c70:	b40e      	push	{r1, r2, r3}
   86c72:	4601      	mov	r1, r0
   86c74:	b530      	push	{r4, r5, lr}
   86c76:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   86c7a:	b09c      	sub	sp, #112	; 0x70
   86c7c:	ab1f      	add	r3, sp, #124	; 0x7c
   86c7e:	480b      	ldr	r0, [pc, #44]	; (86cac <sprintf+0x3c>)
   86c80:	f853 2b04 	ldr.w	r2, [r3], #4
   86c84:	4d0a      	ldr	r5, [pc, #40]	; (86cb0 <sprintf+0x40>)
   86c86:	9102      	str	r1, [sp, #8]
   86c88:	9106      	str	r1, [sp, #24]
   86c8a:	6800      	ldr	r0, [r0, #0]
   86c8c:	a902      	add	r1, sp, #8
   86c8e:	9301      	str	r3, [sp, #4]
   86c90:	e9cd 4504 	strd	r4, r5, [sp, #16]
   86c94:	9407      	str	r4, [sp, #28]
   86c96:	f000 f80d 	bl	86cb4 <_svfprintf_r>
   86c9a:	2200      	movs	r2, #0
   86c9c:	9b02      	ldr	r3, [sp, #8]
   86c9e:	701a      	strb	r2, [r3, #0]
   86ca0:	b01c      	add	sp, #112	; 0x70
   86ca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   86ca6:	b003      	add	sp, #12
   86ca8:	4770      	bx	lr
   86caa:	bf00      	nop
   86cac:	20000440 	.word	0x20000440
   86cb0:	ffff0208 	.word	0xffff0208

00086cb4 <_svfprintf_r>:
   86cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86cb8:	b0d7      	sub	sp, #348	; 0x15c
   86cba:	468b      	mov	fp, r1
   86cbc:	4617      	mov	r7, r2
   86cbe:	930e      	str	r3, [sp, #56]	; 0x38
   86cc0:	4681      	mov	r9, r0
   86cc2:	f004 f9df 	bl	8b084 <_localeconv_r>
   86cc6:	6803      	ldr	r3, [r0, #0]
   86cc8:	4618      	mov	r0, r3
   86cca:	9318      	str	r3, [sp, #96]	; 0x60
   86ccc:	f005 fbd4 	bl	8c478 <strlen>
   86cd0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   86cd4:	9017      	str	r0, [sp, #92]	; 0x5c
   86cd6:	061d      	lsls	r5, r3, #24
   86cd8:	d504      	bpl.n	86ce4 <_svfprintf_r+0x30>
   86cda:	f8db 3010 	ldr.w	r3, [fp, #16]
   86cde:	2b00      	cmp	r3, #0
   86ce0:	f000 87df 	beq.w	87ca2 <_svfprintf_r+0xfee>
   86ce4:	2300      	movs	r3, #0
   86ce6:	2100      	movs	r1, #0
   86ce8:	2200      	movs	r2, #0
   86cea:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   86cee:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   86cf2:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   86cf6:	9313      	str	r3, [sp, #76]	; 0x4c
   86cf8:	9319      	str	r3, [sp, #100]	; 0x64
   86cfa:	930a      	str	r3, [sp, #40]	; 0x28
   86cfc:	ab2d      	add	r3, sp, #180	; 0xb4
   86cfe:	4698      	mov	r8, r3
   86d00:	932a      	str	r3, [sp, #168]	; 0xa8
   86d02:	783b      	ldrb	r3, [r7, #0]
   86d04:	46da      	mov	sl, fp
   86d06:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   86d0a:	2b00      	cmp	r3, #0
   86d0c:	f000 81a4 	beq.w	87058 <_svfprintf_r+0x3a4>
   86d10:	463c      	mov	r4, r7
   86d12:	e004      	b.n	86d1e <_svfprintf_r+0x6a>
   86d14:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   86d18:	2b00      	cmp	r3, #0
   86d1a:	f000 80fd 	beq.w	86f18 <_svfprintf_r+0x264>
   86d1e:	2b25      	cmp	r3, #37	; 0x25
   86d20:	d1f8      	bne.n	86d14 <_svfprintf_r+0x60>
   86d22:	1be5      	subs	r5, r4, r7
   86d24:	f040 80fb 	bne.w	86f1e <_svfprintf_r+0x26a>
   86d28:	7823      	ldrb	r3, [r4, #0]
   86d2a:	2b00      	cmp	r3, #0
   86d2c:	f000 8194 	beq.w	87058 <_svfprintf_r+0x3a4>
   86d30:	2300      	movs	r3, #0
   86d32:	930b      	str	r3, [sp, #44]	; 0x2c
   86d34:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   86d38:	9307      	str	r3, [sp, #28]
   86d3a:	f04f 33ff 	mov.w	r3, #4294967295
   86d3e:	7866      	ldrb	r6, [r4, #1]
   86d40:	f104 0b01 	add.w	fp, r4, #1
   86d44:	2120      	movs	r1, #32
   86d46:	242b      	movs	r4, #43	; 0x2b
   86d48:	9309      	str	r3, [sp, #36]	; 0x24
   86d4a:	f10b 0b01 	add.w	fp, fp, #1
   86d4e:	f1a6 0320 	sub.w	r3, r6, #32
   86d52:	2b5a      	cmp	r3, #90	; 0x5a
   86d54:	f200 80ff 	bhi.w	86f56 <_svfprintf_r+0x2a2>
   86d58:	e8df f013 	tbh	[pc, r3, lsl #1]
   86d5c:	00fd02bc 	.word	0x00fd02bc
   86d60:	02b500fd 	.word	0x02b500fd
   86d64:	00fd00fd 	.word	0x00fd00fd
   86d68:	029100fd 	.word	0x029100fd
   86d6c:	00fd00fd 	.word	0x00fd00fd
   86d70:	02e7006a 	.word	0x02e7006a
   86d74:	023400fd 	.word	0x023400fd
   86d78:	00fd02cd 	.word	0x00fd02cd
   86d7c:	005b02c6 	.word	0x005b02c6
   86d80:	005b005b 	.word	0x005b005b
   86d84:	005b005b 	.word	0x005b005b
   86d88:	005b005b 	.word	0x005b005b
   86d8c:	005b005b 	.word	0x005b005b
   86d90:	00fd00fd 	.word	0x00fd00fd
   86d94:	00fd00fd 	.word	0x00fd00fd
   86d98:	00fd00fd 	.word	0x00fd00fd
   86d9c:	019000fd 	.word	0x019000fd
   86da0:	01f700fd 	.word	0x01f700fd
   86da4:	0190007c 	.word	0x0190007c
   86da8:	01900190 	.word	0x01900190
   86dac:	00fd00fd 	.word	0x00fd00fd
   86db0:	00fd00fd 	.word	0x00fd00fd
   86db4:	00fd028a 	.word	0x00fd028a
   86db8:	00a900fd 	.word	0x00a900fd
   86dbc:	00fd00fd 	.word	0x00fd00fd
   86dc0:	020b00fd 	.word	0x020b00fd
   86dc4:	023b00fd 	.word	0x023b00fd
   86dc8:	00fd00fd 	.word	0x00fd00fd
   86dcc:	00fd0781 	.word	0x00fd0781
   86dd0:	00fd00fd 	.word	0x00fd00fd
   86dd4:	00fd00fd 	.word	0x00fd00fd
   86dd8:	00fd00fd 	.word	0x00fd00fd
   86ddc:	019000fd 	.word	0x019000fd
   86de0:	01f700fd 	.word	0x01f700fd
   86de4:	01900080 	.word	0x01900080
   86de8:	01900190 	.word	0x01900190
   86dec:	00800280 	.word	0x00800280
   86df0:	00fd0075 	.word	0x00fd0075
   86df4:	00fd0276 	.word	0x00fd0276
   86df8:	00ad025e 	.word	0x00ad025e
   86dfc:	0075024c 	.word	0x0075024c
   86e00:	020b00fd 	.word	0x020b00fd
   86e04:	075b0072 	.word	0x075b0072
   86e08:	00fd00fd 	.word	0x00fd00fd
   86e0c:	00fd075f 	.word	0x00fd075f
   86e10:	0072      	.short	0x0072
   86e12:	2200      	movs	r2, #0
   86e14:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86e18:	f81b 6b01 	ldrb.w	r6, [fp], #1
   86e1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86e20:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86e24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86e28:	2b09      	cmp	r3, #9
   86e2a:	d9f5      	bls.n	86e18 <_svfprintf_r+0x164>
   86e2c:	920b      	str	r2, [sp, #44]	; 0x2c
   86e2e:	e78e      	b.n	86d4e <_svfprintf_r+0x9a>
   86e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86e32:	f853 2b04 	ldr.w	r2, [r3], #4
   86e36:	2a00      	cmp	r2, #0
   86e38:	920b      	str	r2, [sp, #44]	; 0x2c
   86e3a:	930e      	str	r3, [sp, #56]	; 0x38
   86e3c:	f2c0 81bf 	blt.w	871be <_svfprintf_r+0x50a>
   86e40:	f89b 6000 	ldrb.w	r6, [fp]
   86e44:	e781      	b.n	86d4a <_svfprintf_r+0x96>
   86e46:	9b07      	ldr	r3, [sp, #28]
   86e48:	f89b 6000 	ldrb.w	r6, [fp]
   86e4c:	f043 0320 	orr.w	r3, r3, #32
   86e50:	9307      	str	r3, [sp, #28]
   86e52:	e77a      	b.n	86d4a <_svfprintf_r+0x96>
   86e54:	9b07      	ldr	r3, [sp, #28]
   86e56:	f043 0310 	orr.w	r3, r3, #16
   86e5a:	9307      	str	r3, [sp, #28]
   86e5c:	9b07      	ldr	r3, [sp, #28]
   86e5e:	069c      	lsls	r4, r3, #26
   86e60:	f140 8162 	bpl.w	87128 <_svfprintf_r+0x474>
   86e64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86e66:	3307      	adds	r3, #7
   86e68:	f023 0307 	bic.w	r3, r3, #7
   86e6c:	4619      	mov	r1, r3
   86e6e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86e72:	4614      	mov	r4, r2
   86e74:	461d      	mov	r5, r3
   86e76:	910e      	str	r1, [sp, #56]	; 0x38
   86e78:	2a00      	cmp	r2, #0
   86e7a:	f173 0300 	sbcs.w	r3, r3, #0
   86e7e:	f2c0 85ab 	blt.w	879d8 <_svfprintf_r+0xd24>
   86e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86e84:	3301      	adds	r3, #1
   86e86:	9b07      	ldr	r3, [sp, #28]
   86e88:	f000 8414 	beq.w	876b4 <_svfprintf_r+0xa00>
   86e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86e90:	ea54 0205 	orrs.w	r2, r4, r5
   86e94:	9308      	str	r3, [sp, #32]
   86e96:	f040 840e 	bne.w	876b6 <_svfprintf_r+0xa02>
   86e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86e9c:	2a00      	cmp	r2, #0
   86e9e:	f040 840f 	bne.w	876c0 <_svfprintf_r+0xa0c>
   86ea2:	9307      	str	r3, [sp, #28]
   86ea4:	2300      	movs	r3, #0
   86ea6:	af56      	add	r7, sp, #344	; 0x158
   86ea8:	9309      	str	r3, [sp, #36]	; 0x24
   86eaa:	930c      	str	r3, [sp, #48]	; 0x30
   86eac:	e26b      	b.n	87386 <_svfprintf_r+0x6d2>
   86eae:	9b07      	ldr	r3, [sp, #28]
   86eb0:	f043 0310 	orr.w	r3, r3, #16
   86eb4:	9307      	str	r3, [sp, #28]
   86eb6:	9b07      	ldr	r3, [sp, #28]
   86eb8:	069a      	lsls	r2, r3, #26
   86eba:	f140 8126 	bpl.w	8710a <_svfprintf_r+0x456>
   86ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86ec0:	3307      	adds	r3, #7
   86ec2:	f023 0307 	bic.w	r3, r3, #7
   86ec6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86eca:	930e      	str	r3, [sp, #56]	; 0x38
   86ecc:	9b07      	ldr	r3, [sp, #28]
   86ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   86ed2:	9308      	str	r3, [sp, #32]
   86ed4:	2300      	movs	r3, #0
   86ed6:	2200      	movs	r2, #0
   86ed8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   86edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86ede:	4611      	mov	r1, r2
   86ee0:	3101      	adds	r1, #1
   86ee2:	f000 8231 	beq.w	87348 <_svfprintf_r+0x694>
   86ee6:	9908      	ldr	r1, [sp, #32]
   86ee8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   86eec:	9107      	str	r1, [sp, #28]
   86eee:	ea54 0105 	orrs.w	r1, r4, r5
   86ef2:	f040 8227 	bne.w	87344 <_svfprintf_r+0x690>
   86ef6:	2a00      	cmp	r2, #0
   86ef8:	f040 837d 	bne.w	875f6 <_svfprintf_r+0x942>
   86efc:	2b00      	cmp	r3, #0
   86efe:	d1d1      	bne.n	86ea4 <_svfprintf_r+0x1f0>
   86f00:	9b08      	ldr	r3, [sp, #32]
   86f02:	f013 0301 	ands.w	r3, r3, #1
   86f06:	930c      	str	r3, [sp, #48]	; 0x30
   86f08:	f000 8590 	beq.w	87a2c <_svfprintf_r+0xd78>
   86f0c:	2330      	movs	r3, #48	; 0x30
   86f0e:	f20d 1757 	addw	r7, sp, #343	; 0x157
   86f12:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   86f16:	e236      	b.n	87386 <_svfprintf_r+0x6d2>
   86f18:	1be5      	subs	r5, r4, r7
   86f1a:	f000 809d 	beq.w	87058 <_svfprintf_r+0x3a4>
   86f1e:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   86f22:	3301      	adds	r3, #1
   86f24:	442a      	add	r2, r5
   86f26:	2b07      	cmp	r3, #7
   86f28:	e9c8 7500 	strd	r7, r5, [r8]
   86f2c:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   86f30:	dc06      	bgt.n	86f40 <_svfprintf_r+0x28c>
   86f32:	f108 0808 	add.w	r8, r8, #8
   86f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86f38:	7823      	ldrb	r3, [r4, #0]
   86f3a:	442a      	add	r2, r5
   86f3c:	920a      	str	r2, [sp, #40]	; 0x28
   86f3e:	e6f4      	b.n	86d2a <_svfprintf_r+0x76>
   86f40:	4651      	mov	r1, sl
   86f42:	4648      	mov	r0, r9
   86f44:	aa2a      	add	r2, sp, #168	; 0xa8
   86f46:	f005 faf9 	bl	8c53c <__ssprint_r>
   86f4a:	2800      	cmp	r0, #0
   86f4c:	f041 83ce 	bne.w	886ec <_svfprintf_r+0x1a38>
   86f50:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86f54:	e7ef      	b.n	86f36 <_svfprintf_r+0x282>
   86f56:	2e00      	cmp	r6, #0
   86f58:	d07e      	beq.n	87058 <_svfprintf_r+0x3a4>
   86f5a:	2300      	movs	r3, #0
   86f5c:	2101      	movs	r1, #1
   86f5e:	461a      	mov	r2, r3
   86f60:	9108      	str	r1, [sp, #32]
   86f62:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   86f66:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   86f6a:	930d      	str	r3, [sp, #52]	; 0x34
   86f6c:	9309      	str	r3, [sp, #36]	; 0x24
   86f6e:	9312      	str	r3, [sp, #72]	; 0x48
   86f70:	9316      	str	r3, [sp, #88]	; 0x58
   86f72:	9310      	str	r3, [sp, #64]	; 0x40
   86f74:	910c      	str	r1, [sp, #48]	; 0x30
   86f76:	af3d      	add	r7, sp, #244	; 0xf4
   86f78:	9b07      	ldr	r3, [sp, #28]
   86f7a:	f013 0302 	ands.w	r3, r3, #2
   86f7e:	d002      	beq.n	86f86 <_svfprintf_r+0x2d2>
   86f80:	9908      	ldr	r1, [sp, #32]
   86f82:	3102      	adds	r1, #2
   86f84:	9108      	str	r1, [sp, #32]
   86f86:	9907      	ldr	r1, [sp, #28]
   86f88:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   86f8c:	910f      	str	r1, [sp, #60]	; 0x3c
   86f8e:	d105      	bne.n	86f9c <_svfprintf_r+0x2e8>
   86f90:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86f92:	9808      	ldr	r0, [sp, #32]
   86f94:	1a0d      	subs	r5, r1, r0
   86f96:	2d00      	cmp	r5, #0
   86f98:	f300 834b 	bgt.w	87632 <_svfprintf_r+0x97e>
   86f9c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86f9e:	b172      	cbz	r2, 86fbe <_svfprintf_r+0x30a>
   86fa0:	2001      	movs	r0, #1
   86fa2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86fa4:	4404      	add	r4, r0
   86fa6:	4402      	add	r2, r0
   86fa8:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   86fac:	2a07      	cmp	r2, #7
   86fae:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86fb2:	e9c8 1000 	strd	r1, r0, [r8]
   86fb6:	f300 83cd 	bgt.w	87754 <_svfprintf_r+0xaa0>
   86fba:	f108 0808 	add.w	r8, r8, #8
   86fbe:	b16b      	cbz	r3, 86fdc <_svfprintf_r+0x328>
   86fc0:	2102      	movs	r1, #2
   86fc2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86fc4:	440c      	add	r4, r1
   86fc6:	3301      	adds	r3, #1
   86fc8:	aa23      	add	r2, sp, #140	; 0x8c
   86fca:	2b07      	cmp	r3, #7
   86fcc:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86fd0:	e9c8 2100 	strd	r2, r1, [r8]
   86fd4:	f300 83cc 	bgt.w	87770 <_svfprintf_r+0xabc>
   86fd8:	f108 0808 	add.w	r8, r8, #8
   86fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86fde:	2b80      	cmp	r3, #128	; 0x80
   86fe0:	f000 8234 	beq.w	8744c <_svfprintf_r+0x798>
   86fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86fe8:	1a9d      	subs	r5, r3, r2
   86fea:	2d00      	cmp	r5, #0
   86fec:	f300 826e 	bgt.w	874cc <_svfprintf_r+0x818>
   86ff0:	9b07      	ldr	r3, [sp, #28]
   86ff2:	05d9      	lsls	r1, r3, #23
   86ff4:	f100 81d5 	bmi.w	873a2 <_svfprintf_r+0x6ee>
   86ff8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86ffc:	3301      	adds	r3, #1
   86ffe:	4414      	add	r4, r2
   87000:	2b07      	cmp	r3, #7
   87002:	e9c8 7200 	strd	r7, r2, [r8]
   87006:	942c      	str	r4, [sp, #176]	; 0xb0
   87008:	932b      	str	r3, [sp, #172]	; 0xac
   8700a:	f300 8397 	bgt.w	8773c <_svfprintf_r+0xa88>
   8700e:	f108 0808 	add.w	r8, r8, #8
   87012:	9b07      	ldr	r3, [sp, #28]
   87014:	0759      	lsls	r1, r3, #29
   87016:	d505      	bpl.n	87024 <_svfprintf_r+0x370>
   87018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8701a:	9a08      	ldr	r2, [sp, #32]
   8701c:	1a9d      	subs	r5, r3, r2
   8701e:	2d00      	cmp	r5, #0
   87020:	f300 83b2 	bgt.w	87788 <_svfprintf_r+0xad4>
   87024:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   87028:	9908      	ldr	r1, [sp, #32]
   8702a:	428a      	cmp	r2, r1
   8702c:	bfac      	ite	ge
   8702e:	189b      	addge	r3, r3, r2
   87030:	185b      	addlt	r3, r3, r1
   87032:	930a      	str	r3, [sp, #40]	; 0x28
   87034:	2c00      	cmp	r4, #0
   87036:	f040 827d 	bne.w	87534 <_svfprintf_r+0x880>
   8703a:	2300      	movs	r3, #0
   8703c:	932b      	str	r3, [sp, #172]	; 0xac
   8703e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87040:	b11b      	cbz	r3, 8704a <_svfprintf_r+0x396>
   87042:	4648      	mov	r0, r9
   87044:	990d      	ldr	r1, [sp, #52]	; 0x34
   87046:	f003 fd77 	bl	8ab38 <_free_r>
   8704a:	465f      	mov	r7, fp
   8704c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87050:	783b      	ldrb	r3, [r7, #0]
   87052:	2b00      	cmp	r3, #0
   87054:	f47f ae5c 	bne.w	86d10 <_svfprintf_r+0x5c>
   87058:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8705a:	46d3      	mov	fp, sl
   8705c:	2b00      	cmp	r3, #0
   8705e:	f041 824b 	bne.w	884f8 <_svfprintf_r+0x1844>
   87062:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   87066:	f013 0f40 	tst.w	r3, #64	; 0x40
   8706a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8706c:	bf18      	it	ne
   8706e:	f04f 33ff 	movne.w	r3, #4294967295
   87072:	930a      	str	r3, [sp, #40]	; 0x28
   87074:	980a      	ldr	r0, [sp, #40]	; 0x28
   87076:	b057      	add	sp, #348	; 0x15c
   87078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8707c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8707e:	3307      	adds	r3, #7
   87080:	f023 0307 	bic.w	r3, r3, #7
   87084:	4619      	mov	r1, r3
   87086:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8708a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8708e:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   87092:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   87096:	461d      	mov	r5, r3
   87098:	4618      	mov	r0, r3
   8709a:	910e      	str	r1, [sp, #56]	; 0x38
   8709c:	f04f 32ff 	mov.w	r2, #4294967295
   870a0:	4621      	mov	r1, r4
   870a2:	4ba4      	ldr	r3, [pc, #656]	; (87334 <_svfprintf_r+0x680>)
   870a4:	f006 f97e 	bl	8d3a4 <__aeabi_dcmpun>
   870a8:	2800      	cmp	r0, #0
   870aa:	f040 84d9 	bne.w	87a60 <_svfprintf_r+0xdac>
   870ae:	4628      	mov	r0, r5
   870b0:	4621      	mov	r1, r4
   870b2:	f04f 32ff 	mov.w	r2, #4294967295
   870b6:	4b9f      	ldr	r3, [pc, #636]	; (87334 <_svfprintf_r+0x680>)
   870b8:	f006 f956 	bl	8d368 <__aeabi_dcmple>
   870bc:	2800      	cmp	r0, #0
   870be:	f040 84cf 	bne.w	87a60 <_svfprintf_r+0xdac>
   870c2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   870c6:	2200      	movs	r2, #0
   870c8:	2300      	movs	r3, #0
   870ca:	f006 f943 	bl	8d354 <__aeabi_dcmplt>
   870ce:	2800      	cmp	r0, #0
   870d0:	f041 800e 	bne.w	880f0 <_svfprintf_r+0x143c>
   870d4:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   870d8:	2003      	movs	r0, #3
   870da:	2100      	movs	r1, #0
   870dc:	4f96      	ldr	r7, [pc, #600]	; (87338 <_svfprintf_r+0x684>)
   870de:	4b97      	ldr	r3, [pc, #604]	; (8733c <_svfprintf_r+0x688>)
   870e0:	9008      	str	r0, [sp, #32]
   870e2:	910d      	str	r1, [sp, #52]	; 0x34
   870e4:	2e47      	cmp	r6, #71	; 0x47
   870e6:	bfc8      	it	gt
   870e8:	461f      	movgt	r7, r3
   870ea:	9c07      	ldr	r4, [sp, #28]
   870ec:	900c      	str	r0, [sp, #48]	; 0x30
   870ee:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   870f2:	9407      	str	r4, [sp, #28]
   870f4:	9109      	str	r1, [sp, #36]	; 0x24
   870f6:	9112      	str	r1, [sp, #72]	; 0x48
   870f8:	9116      	str	r1, [sp, #88]	; 0x58
   870fa:	9110      	str	r1, [sp, #64]	; 0x40
   870fc:	2a00      	cmp	r2, #0
   870fe:	f43f af3b 	beq.w	86f78 <_svfprintf_r+0x2c4>
   87102:	9b08      	ldr	r3, [sp, #32]
   87104:	3301      	adds	r3, #1
   87106:	9308      	str	r3, [sp, #32]
   87108:	e736      	b.n	86f78 <_svfprintf_r+0x2c4>
   8710a:	9b07      	ldr	r3, [sp, #28]
   8710c:	06db      	lsls	r3, r3, #27
   8710e:	f100 849c 	bmi.w	87a4a <_svfprintf_r+0xd96>
   87112:	9b07      	ldr	r3, [sp, #28]
   87114:	065f      	lsls	r7, r3, #25
   87116:	f140 87b2 	bpl.w	8807e <_svfprintf_r+0x13ca>
   8711a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8711c:	2500      	movs	r5, #0
   8711e:	f853 4b04 	ldr.w	r4, [r3], #4
   87122:	930e      	str	r3, [sp, #56]	; 0x38
   87124:	b2a4      	uxth	r4, r4
   87126:	e6d1      	b.n	86ecc <_svfprintf_r+0x218>
   87128:	9b07      	ldr	r3, [sp, #28]
   8712a:	06d8      	lsls	r0, r3, #27
   8712c:	f100 8568 	bmi.w	87c00 <_svfprintf_r+0xf4c>
   87130:	9b07      	ldr	r3, [sp, #28]
   87132:	0659      	lsls	r1, r3, #25
   87134:	f140 87be 	bpl.w	880b4 <_svfprintf_r+0x1400>
   87138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8713a:	f853 4b04 	ldr.w	r4, [r3], #4
   8713e:	b224      	sxth	r4, r4
   87140:	17e5      	asrs	r5, r4, #31
   87142:	930e      	str	r3, [sp, #56]	; 0x38
   87144:	4622      	mov	r2, r4
   87146:	462b      	mov	r3, r5
   87148:	e696      	b.n	86e78 <_svfprintf_r+0x1c4>
   8714a:	2100      	movs	r1, #0
   8714c:	2401      	movs	r4, #1
   8714e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87150:	460a      	mov	r2, r1
   87152:	f853 0b04 	ldr.w	r0, [r3], #4
   87156:	9408      	str	r4, [sp, #32]
   87158:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   8715c:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   87160:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   87164:	9109      	str	r1, [sp, #36]	; 0x24
   87166:	9112      	str	r1, [sp, #72]	; 0x48
   87168:	9116      	str	r1, [sp, #88]	; 0x58
   8716a:	9110      	str	r1, [sp, #64]	; 0x40
   8716c:	940c      	str	r4, [sp, #48]	; 0x30
   8716e:	af3d      	add	r7, sp, #244	; 0xf4
   87170:	e702      	b.n	86f78 <_svfprintf_r+0x2c4>
   87172:	2500      	movs	r5, #0
   87174:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   87176:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   8717a:	f854 7b04 	ldr.w	r7, [r4], #4
   8717e:	2f00      	cmp	r7, #0
   87180:	f000 859f 	beq.w	87cc2 <_svfprintf_r+0x100e>
   87184:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87186:	4613      	mov	r3, r2
   87188:	3301      	adds	r3, #1
   8718a:	f000 8770 	beq.w	8806e <_svfprintf_r+0x13ba>
   8718e:	4629      	mov	r1, r5
   87190:	4638      	mov	r0, r7
   87192:	f004 fabf 	bl	8b714 <memchr>
   87196:	900d      	str	r0, [sp, #52]	; 0x34
   87198:	2800      	cmp	r0, #0
   8719a:	f001 80b9 	beq.w	88310 <_svfprintf_r+0x165c>
   8719e:	462b      	mov	r3, r5
   871a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   871a2:	9509      	str	r5, [sp, #36]	; 0x24
   871a4:	1bd2      	subs	r2, r2, r7
   871a6:	920c      	str	r2, [sp, #48]	; 0x30
   871a8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   871ac:	9208      	str	r2, [sp, #32]
   871ae:	940e      	str	r4, [sp, #56]	; 0x38
   871b0:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   871b4:	930d      	str	r3, [sp, #52]	; 0x34
   871b6:	9312      	str	r3, [sp, #72]	; 0x48
   871b8:	9316      	str	r3, [sp, #88]	; 0x58
   871ba:	9310      	str	r3, [sp, #64]	; 0x40
   871bc:	e79e      	b.n	870fc <_svfprintf_r+0x448>
   871be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   871c0:	425b      	negs	r3, r3
   871c2:	930b      	str	r3, [sp, #44]	; 0x2c
   871c4:	9b07      	ldr	r3, [sp, #28]
   871c6:	f89b 6000 	ldrb.w	r6, [fp]
   871ca:	f043 0304 	orr.w	r3, r3, #4
   871ce:	9307      	str	r3, [sp, #28]
   871d0:	e5bb      	b.n	86d4a <_svfprintf_r+0x96>
   871d2:	9b07      	ldr	r3, [sp, #28]
   871d4:	f043 0310 	orr.w	r3, r3, #16
   871d8:	9308      	str	r3, [sp, #32]
   871da:	9b08      	ldr	r3, [sp, #32]
   871dc:	069d      	lsls	r5, r3, #26
   871de:	f140 83ea 	bpl.w	879b6 <_svfprintf_r+0xd02>
   871e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   871e4:	3307      	adds	r3, #7
   871e6:	f023 0307 	bic.w	r3, r3, #7
   871ea:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   871ee:	930e      	str	r3, [sp, #56]	; 0x38
   871f0:	2301      	movs	r3, #1
   871f2:	e670      	b.n	86ed6 <_svfprintf_r+0x222>
   871f4:	f647 0230 	movw	r2, #30768	; 0x7830
   871f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   871fa:	9907      	ldr	r1, [sp, #28]
   871fc:	f853 4b04 	ldr.w	r4, [r3], #4
   87200:	f041 0102 	orr.w	r1, r1, #2
   87204:	930e      	str	r3, [sp, #56]	; 0x38
   87206:	4b4e      	ldr	r3, [pc, #312]	; (87340 <_svfprintf_r+0x68c>)
   87208:	2500      	movs	r5, #0
   8720a:	9319      	str	r3, [sp, #100]	; 0x64
   8720c:	2678      	movs	r6, #120	; 0x78
   8720e:	2302      	movs	r3, #2
   87210:	9108      	str	r1, [sp, #32]
   87212:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   87216:	e65e      	b.n	86ed6 <_svfprintf_r+0x222>
   87218:	9b07      	ldr	r3, [sp, #28]
   8721a:	069d      	lsls	r5, r3, #26
   8721c:	f100 8408 	bmi.w	87a30 <_svfprintf_r+0xd7c>
   87220:	9b07      	ldr	r3, [sp, #28]
   87222:	06dc      	lsls	r4, r3, #27
   87224:	f100 86e1 	bmi.w	87fea <_svfprintf_r+0x1336>
   87228:	9b07      	ldr	r3, [sp, #28]
   8722a:	0658      	lsls	r0, r3, #25
   8722c:	f100 8795 	bmi.w	8815a <_svfprintf_r+0x14a6>
   87230:	9b07      	ldr	r3, [sp, #28]
   87232:	0599      	lsls	r1, r3, #22
   87234:	f140 86d9 	bpl.w	87fea <_svfprintf_r+0x1336>
   87238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8723a:	990a      	ldr	r1, [sp, #40]	; 0x28
   8723c:	f853 2b04 	ldr.w	r2, [r3], #4
   87240:	465f      	mov	r7, fp
   87242:	7011      	strb	r1, [r2, #0]
   87244:	930e      	str	r3, [sp, #56]	; 0x38
   87246:	e703      	b.n	87050 <_svfprintf_r+0x39c>
   87248:	f89b 6000 	ldrb.w	r6, [fp]
   8724c:	9b07      	ldr	r3, [sp, #28]
   8724e:	2e6c      	cmp	r6, #108	; 0x6c
   87250:	f000 8508 	beq.w	87c64 <_svfprintf_r+0xfb0>
   87254:	f043 0310 	orr.w	r3, r3, #16
   87258:	9307      	str	r3, [sp, #28]
   8725a:	e576      	b.n	86d4a <_svfprintf_r+0x96>
   8725c:	f89b 6000 	ldrb.w	r6, [fp]
   87260:	9b07      	ldr	r3, [sp, #28]
   87262:	2e68      	cmp	r6, #104	; 0x68
   87264:	f000 8507 	beq.w	87c76 <_svfprintf_r+0xfc2>
   87268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8726c:	9307      	str	r3, [sp, #28]
   8726e:	e56c      	b.n	86d4a <_svfprintf_r+0x96>
   87270:	9b07      	ldr	r3, [sp, #28]
   87272:	f89b 6000 	ldrb.w	r6, [fp]
   87276:	f043 0308 	orr.w	r3, r3, #8
   8727a:	9307      	str	r3, [sp, #28]
   8727c:	e565      	b.n	86d4a <_svfprintf_r+0x96>
   8727e:	4648      	mov	r0, r9
   87280:	f003 ff00 	bl	8b084 <_localeconv_r>
   87284:	6843      	ldr	r3, [r0, #4]
   87286:	4618      	mov	r0, r3
   87288:	931c      	str	r3, [sp, #112]	; 0x70
   8728a:	f005 f8f5 	bl	8c478 <strlen>
   8728e:	4603      	mov	r3, r0
   87290:	4648      	mov	r0, r9
   87292:	461d      	mov	r5, r3
   87294:	931d      	str	r3, [sp, #116]	; 0x74
   87296:	f003 fef5 	bl	8b084 <_localeconv_r>
   8729a:	6882      	ldr	r2, [r0, #8]
   8729c:	2120      	movs	r1, #32
   8729e:	921a      	str	r2, [sp, #104]	; 0x68
   872a0:	2d00      	cmp	r5, #0
   872a2:	f43f adcd 	beq.w	86e40 <_svfprintf_r+0x18c>
   872a6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   872a8:	2b00      	cmp	r3, #0
   872aa:	f43f adc9 	beq.w	86e40 <_svfprintf_r+0x18c>
   872ae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   872b0:	781b      	ldrb	r3, [r3, #0]
   872b2:	2b00      	cmp	r3, #0
   872b4:	f43f adc4 	beq.w	86e40 <_svfprintf_r+0x18c>
   872b8:	9b07      	ldr	r3, [sp, #28]
   872ba:	f89b 6000 	ldrb.w	r6, [fp]
   872be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   872c2:	9307      	str	r3, [sp, #28]
   872c4:	e541      	b.n	86d4a <_svfprintf_r+0x96>
   872c6:	9b07      	ldr	r3, [sp, #28]
   872c8:	f89b 6000 	ldrb.w	r6, [fp]
   872cc:	f043 0301 	orr.w	r3, r3, #1
   872d0:	9307      	str	r3, [sp, #28]
   872d2:	e53a      	b.n	86d4a <_svfprintf_r+0x96>
   872d4:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   872d8:	2b00      	cmp	r3, #0
   872da:	f47f adb1 	bne.w	86e40 <_svfprintf_r+0x18c>
   872de:	f89b 6000 	ldrb.w	r6, [fp]
   872e2:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   872e6:	e530      	b.n	86d4a <_svfprintf_r+0x96>
   872e8:	9b07      	ldr	r3, [sp, #28]
   872ea:	f89b 6000 	ldrb.w	r6, [fp]
   872ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   872f2:	9307      	str	r3, [sp, #28]
   872f4:	e529      	b.n	86d4a <_svfprintf_r+0x96>
   872f6:	465a      	mov	r2, fp
   872f8:	f812 6b01 	ldrb.w	r6, [r2], #1
   872fc:	2e2a      	cmp	r6, #42	; 0x2a
   872fe:	f001 8251 	beq.w	887a4 <_svfprintf_r+0x1af0>
   87302:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87306:	2b09      	cmp	r3, #9
   87308:	4693      	mov	fp, r2
   8730a:	bf98      	it	ls
   8730c:	2200      	movls	r2, #0
   8730e:	f201 80ef 	bhi.w	884f0 <_svfprintf_r+0x183c>
   87312:	f81b 6b01 	ldrb.w	r6, [fp], #1
   87316:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8731a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8731e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87322:	2b09      	cmp	r3, #9
   87324:	d9f5      	bls.n	87312 <_svfprintf_r+0x65e>
   87326:	9209      	str	r2, [sp, #36]	; 0x24
   87328:	e511      	b.n	86d4e <_svfprintf_r+0x9a>
   8732a:	f89b 6000 	ldrb.w	r6, [fp]
   8732e:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   87332:	e50a      	b.n	86d4a <_svfprintf_r+0x96>
   87334:	7fefffff 	.word	0x7fefffff
   87338:	0008d4e4 	.word	0x0008d4e4
   8733c:	0008d4e8 	.word	0x0008d4e8
   87340:	0008d4f4 	.word	0x0008d4f4
   87344:	9a07      	ldr	r2, [sp, #28]
   87346:	9208      	str	r2, [sp, #32]
   87348:	2b01      	cmp	r3, #1
   8734a:	f000 81b4 	beq.w	876b6 <_svfprintf_r+0xa02>
   8734e:	2b02      	cmp	r3, #2
   87350:	f000 8159 	beq.w	87606 <_svfprintf_r+0x952>
   87354:	af56      	add	r7, sp, #344	; 0x158
   87356:	08e2      	lsrs	r2, r4, #3
   87358:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   8735c:	08e9      	lsrs	r1, r5, #3
   8735e:	f004 0307 	and.w	r3, r4, #7
   87362:	460d      	mov	r5, r1
   87364:	4614      	mov	r4, r2
   87366:	3330      	adds	r3, #48	; 0x30
   87368:	ea54 0105 	orrs.w	r1, r4, r5
   8736c:	463a      	mov	r2, r7
   8736e:	f807 3d01 	strb.w	r3, [r7, #-1]!
   87372:	d1f0      	bne.n	87356 <_svfprintf_r+0x6a2>
   87374:	9908      	ldr	r1, [sp, #32]
   87376:	4608      	mov	r0, r1
   87378:	07c0      	lsls	r0, r0, #31
   8737a:	f100 82b8 	bmi.w	878ee <_svfprintf_r+0xc3a>
   8737e:	ab56      	add	r3, sp, #344	; 0x158
   87380:	1bdb      	subs	r3, r3, r7
   87382:	9107      	str	r1, [sp, #28]
   87384:	930c      	str	r3, [sp, #48]	; 0x30
   87386:	2300      	movs	r3, #0
   87388:	9909      	ldr	r1, [sp, #36]	; 0x24
   8738a:	930d      	str	r3, [sp, #52]	; 0x34
   8738c:	9312      	str	r3, [sp, #72]	; 0x48
   8738e:	9316      	str	r3, [sp, #88]	; 0x58
   87390:	9310      	str	r3, [sp, #64]	; 0x40
   87392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87394:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87398:	428b      	cmp	r3, r1
   8739a:	bfb8      	it	lt
   8739c:	460b      	movlt	r3, r1
   8739e:	9308      	str	r3, [sp, #32]
   873a0:	e6ac      	b.n	870fc <_svfprintf_r+0x448>
   873a2:	2e65      	cmp	r6, #101	; 0x65
   873a4:	f340 80d8 	ble.w	87558 <_svfprintf_r+0x8a4>
   873a8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   873ac:	2200      	movs	r2, #0
   873ae:	2300      	movs	r3, #0
   873b0:	f005 ffc6 	bl	8d340 <__aeabi_dcmpeq>
   873b4:	2800      	cmp	r0, #0
   873b6:	f000 821e 	beq.w	877f6 <_svfprintf_r+0xb42>
   873ba:	2101      	movs	r1, #1
   873bc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   873be:	4ac5      	ldr	r2, [pc, #788]	; (876d4 <_svfprintf_r+0xa20>)
   873c0:	440b      	add	r3, r1
   873c2:	440c      	add	r4, r1
   873c4:	2b07      	cmp	r3, #7
   873c6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   873ca:	e9c8 2100 	strd	r2, r1, [r8]
   873ce:	f300 85bb 	bgt.w	87f48 <_svfprintf_r+0x1294>
   873d2:	f108 0808 	add.w	r8, r8, #8
   873d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   873d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   873da:	4293      	cmp	r3, r2
   873dc:	f280 8321 	bge.w	87a22 <_svfprintf_r+0xd6e>
   873e0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   873e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   873e4:	3301      	adds	r3, #1
   873e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   873e8:	4414      	add	r4, r2
   873ea:	2b07      	cmp	r3, #7
   873ec:	e9c8 1200 	strd	r1, r2, [r8]
   873f0:	942c      	str	r4, [sp, #176]	; 0xb0
   873f2:	932b      	str	r3, [sp, #172]	; 0xac
   873f4:	f300 8448 	bgt.w	87c88 <_svfprintf_r+0xfd4>
   873f8:	f108 0808 	add.w	r8, r8, #8
   873fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   873fe:	1e5d      	subs	r5, r3, #1
   87400:	2d00      	cmp	r5, #0
   87402:	f77f ae06 	ble.w	87012 <_svfprintf_r+0x35e>
   87406:	2d10      	cmp	r5, #16
   87408:	f340 85c7 	ble.w	87f9a <_svfprintf_r+0x12e6>
   8740c:	4fb2      	ldr	r7, [pc, #712]	; (876d8 <_svfprintf_r+0xa24>)
   8740e:	2610      	movs	r6, #16
   87410:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87412:	970f      	str	r7, [sp, #60]	; 0x3c
   87414:	e005      	b.n	87422 <_svfprintf_r+0x76e>
   87416:	f108 0808 	add.w	r8, r8, #8
   8741a:	3d10      	subs	r5, #16
   8741c:	2d10      	cmp	r5, #16
   8741e:	f340 85bf 	ble.w	87fa0 <_svfprintf_r+0x12ec>
   87422:	3301      	adds	r3, #1
   87424:	3410      	adds	r4, #16
   87426:	2b07      	cmp	r3, #7
   87428:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8742c:	e9c8 7600 	strd	r7, r6, [r8]
   87430:	ddf1      	ble.n	87416 <_svfprintf_r+0x762>
   87432:	4651      	mov	r1, sl
   87434:	4648      	mov	r0, r9
   87436:	aa2a      	add	r2, sp, #168	; 0xa8
   87438:	f005 f880 	bl	8c53c <__ssprint_r>
   8743c:	2800      	cmp	r0, #0
   8743e:	f040 8081 	bne.w	87544 <_svfprintf_r+0x890>
   87442:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87446:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8744a:	e7e6      	b.n	8741a <_svfprintf_r+0x766>
   8744c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8744e:	9a08      	ldr	r2, [sp, #32]
   87450:	1a9d      	subs	r5, r3, r2
   87452:	2d00      	cmp	r5, #0
   87454:	f77f adc6 	ble.w	86fe4 <_svfprintf_r+0x330>
   87458:	2d10      	cmp	r5, #16
   8745a:	f341 8069 	ble.w	88530 <_svfprintf_r+0x187c>
   8745e:	489e      	ldr	r0, [pc, #632]	; (876d8 <_svfprintf_r+0xa24>)
   87460:	4621      	mov	r1, r4
   87462:	2310      	movs	r3, #16
   87464:	4604      	mov	r4, r0
   87466:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87468:	900f      	str	r0, [sp, #60]	; 0x3c
   8746a:	e004      	b.n	87476 <_svfprintf_r+0x7c2>
   8746c:	3d10      	subs	r5, #16
   8746e:	2d10      	cmp	r5, #16
   87470:	f108 0808 	add.w	r8, r8, #8
   87474:	dd17      	ble.n	874a6 <_svfprintf_r+0x7f2>
   87476:	3201      	adds	r2, #1
   87478:	3110      	adds	r1, #16
   8747a:	2a07      	cmp	r2, #7
   8747c:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   87480:	e9c8 4300 	strd	r4, r3, [r8]
   87484:	ddf2      	ble.n	8746c <_svfprintf_r+0x7b8>
   87486:	4651      	mov	r1, sl
   87488:	4648      	mov	r0, r9
   8748a:	aa2a      	add	r2, sp, #168	; 0xa8
   8748c:	f005 f856 	bl	8c53c <__ssprint_r>
   87490:	2800      	cmp	r0, #0
   87492:	d157      	bne.n	87544 <_svfprintf_r+0x890>
   87494:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87498:	3d10      	subs	r5, #16
   8749a:	2d10      	cmp	r5, #16
   8749c:	f04f 0310 	mov.w	r3, #16
   874a0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   874a4:	dce7      	bgt.n	87476 <_svfprintf_r+0x7c2>
   874a6:	460c      	mov	r4, r1
   874a8:	3201      	adds	r2, #1
   874aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   874ac:	442c      	add	r4, r5
   874ae:	2a07      	cmp	r2, #7
   874b0:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   874b4:	e9c8 3500 	strd	r3, r5, [r8]
   874b8:	f300 858a 	bgt.w	87fd0 <_svfprintf_r+0x131c>
   874bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   874be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   874c0:	f108 0808 	add.w	r8, r8, #8
   874c4:	1a9d      	subs	r5, r3, r2
   874c6:	2d00      	cmp	r5, #0
   874c8:	f77f ad92 	ble.w	86ff0 <_svfprintf_r+0x33c>
   874cc:	2d10      	cmp	r5, #16
   874ce:	f340 860a 	ble.w	880e6 <_svfprintf_r+0x1432>
   874d2:	4881      	ldr	r0, [pc, #516]	; (876d8 <_svfprintf_r+0xa24>)
   874d4:	4621      	mov	r1, r4
   874d6:	2310      	movs	r3, #16
   874d8:	4604      	mov	r4, r0
   874da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   874dc:	900f      	str	r0, [sp, #60]	; 0x3c
   874de:	e004      	b.n	874ea <_svfprintf_r+0x836>
   874e0:	3d10      	subs	r5, #16
   874e2:	2d10      	cmp	r5, #16
   874e4:	f108 0808 	add.w	r8, r8, #8
   874e8:	dd16      	ble.n	87518 <_svfprintf_r+0x864>
   874ea:	3201      	adds	r2, #1
   874ec:	3110      	adds	r1, #16
   874ee:	2a07      	cmp	r2, #7
   874f0:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   874f4:	e9c8 4300 	strd	r4, r3, [r8]
   874f8:	ddf2      	ble.n	874e0 <_svfprintf_r+0x82c>
   874fa:	4651      	mov	r1, sl
   874fc:	4648      	mov	r0, r9
   874fe:	aa2a      	add	r2, sp, #168	; 0xa8
   87500:	f005 f81c 	bl	8c53c <__ssprint_r>
   87504:	b9f0      	cbnz	r0, 87544 <_svfprintf_r+0x890>
   87506:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8750a:	3d10      	subs	r5, #16
   8750c:	2d10      	cmp	r5, #16
   8750e:	f04f 0310 	mov.w	r3, #16
   87512:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87516:	dce8      	bgt.n	874ea <_svfprintf_r+0x836>
   87518:	460c      	mov	r4, r1
   8751a:	3201      	adds	r2, #1
   8751c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8751e:	442c      	add	r4, r5
   87520:	2a07      	cmp	r2, #7
   87522:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87526:	e9c8 3500 	strd	r3, r5, [r8]
   8752a:	f300 8237 	bgt.w	8799c <_svfprintf_r+0xce8>
   8752e:	f108 0808 	add.w	r8, r8, #8
   87532:	e55d      	b.n	86ff0 <_svfprintf_r+0x33c>
   87534:	4651      	mov	r1, sl
   87536:	4648      	mov	r0, r9
   87538:	aa2a      	add	r2, sp, #168	; 0xa8
   8753a:	f004 ffff 	bl	8c53c <__ssprint_r>
   8753e:	2800      	cmp	r0, #0
   87540:	f43f ad7b 	beq.w	8703a <_svfprintf_r+0x386>
   87544:	46d3      	mov	fp, sl
   87546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87548:	2b00      	cmp	r3, #0
   8754a:	f43f ad8a 	beq.w	87062 <_svfprintf_r+0x3ae>
   8754e:	4648      	mov	r0, r9
   87550:	990d      	ldr	r1, [sp, #52]	; 0x34
   87552:	f003 faf1 	bl	8ab38 <_free_r>
   87556:	e584      	b.n	87062 <_svfprintf_r+0x3ae>
   87558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8755a:	2b01      	cmp	r3, #1
   8755c:	f340 81d5 	ble.w	8790a <_svfprintf_r+0xc56>
   87560:	2301      	movs	r3, #1
   87562:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87564:	441c      	add	r4, r3
   87566:	441d      	add	r5, r3
   87568:	2d07      	cmp	r5, #7
   8756a:	942c      	str	r4, [sp, #176]	; 0xb0
   8756c:	f8c8 7000 	str.w	r7, [r8]
   87570:	952b      	str	r5, [sp, #172]	; 0xac
   87572:	f8c8 3004 	str.w	r3, [r8, #4]
   87576:	f300 823a 	bgt.w	879ee <_svfprintf_r+0xd3a>
   8757a:	f108 0808 	add.w	r8, r8, #8
   8757e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87580:	3501      	adds	r5, #1
   87582:	9a18      	ldr	r2, [sp, #96]	; 0x60
   87584:	441c      	add	r4, r3
   87586:	2d07      	cmp	r5, #7
   87588:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8758c:	e9c8 2300 	strd	r2, r3, [r8]
   87590:	f300 823a 	bgt.w	87a08 <_svfprintf_r+0xd54>
   87594:	f108 0808 	add.w	r8, r8, #8
   87598:	2300      	movs	r3, #0
   8759a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8759e:	2200      	movs	r2, #0
   875a0:	f005 fece 	bl	8d340 <__aeabi_dcmpeq>
   875a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   875a6:	2800      	cmp	r0, #0
   875a8:	f040 81cd 	bne.w	87946 <_svfprintf_r+0xc92>
   875ac:	3b01      	subs	r3, #1
   875ae:	3501      	adds	r5, #1
   875b0:	3701      	adds	r7, #1
   875b2:	441c      	add	r4, r3
   875b4:	2d07      	cmp	r5, #7
   875b6:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   875ba:	f8c8 7000 	str.w	r7, [r8]
   875be:	f8c8 3004 	str.w	r3, [r8, #4]
   875c2:	f300 84dc 	bgt.w	87f7e <_svfprintf_r+0x12ca>
   875c6:	f108 0808 	add.w	r8, r8, #8
   875ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   875cc:	3501      	adds	r5, #1
   875ce:	4414      	add	r4, r2
   875d0:	ab26      	add	r3, sp, #152	; 0x98
   875d2:	2d07      	cmp	r5, #7
   875d4:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   875d8:	e9c8 3200 	strd	r3, r2, [r8]
   875dc:	f77f ad17 	ble.w	8700e <_svfprintf_r+0x35a>
   875e0:	4651      	mov	r1, sl
   875e2:	4648      	mov	r0, r9
   875e4:	aa2a      	add	r2, sp, #168	; 0xa8
   875e6:	f004 ffa9 	bl	8c53c <__ssprint_r>
   875ea:	2800      	cmp	r0, #0
   875ec:	d1aa      	bne.n	87544 <_svfprintf_r+0x890>
   875ee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   875f0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   875f4:	e50d      	b.n	87012 <_svfprintf_r+0x35e>
   875f6:	2b01      	cmp	r3, #1
   875f8:	f000 87ca 	beq.w	88590 <_svfprintf_r+0x18dc>
   875fc:	2b02      	cmp	r3, #2
   875fe:	9b07      	ldr	r3, [sp, #28]
   87600:	9308      	str	r3, [sp, #32]
   87602:	f47f aea7 	bne.w	87354 <_svfprintf_r+0x6a0>
   87606:	9819      	ldr	r0, [sp, #100]	; 0x64
   87608:	af56      	add	r7, sp, #344	; 0x158
   8760a:	0923      	lsrs	r3, r4, #4
   8760c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   87610:	0929      	lsrs	r1, r5, #4
   87612:	f004 020f 	and.w	r2, r4, #15
   87616:	460d      	mov	r5, r1
   87618:	461c      	mov	r4, r3
   8761a:	5c83      	ldrb	r3, [r0, r2]
   8761c:	f807 3d01 	strb.w	r3, [r7, #-1]!
   87620:	ea54 0305 	orrs.w	r3, r4, r5
   87624:	d1f1      	bne.n	8760a <_svfprintf_r+0x956>
   87626:	9b08      	ldr	r3, [sp, #32]
   87628:	9307      	str	r3, [sp, #28]
   8762a:	ab56      	add	r3, sp, #344	; 0x158
   8762c:	1bdb      	subs	r3, r3, r7
   8762e:	930c      	str	r3, [sp, #48]	; 0x30
   87630:	e6a9      	b.n	87386 <_svfprintf_r+0x6d2>
   87632:	2d10      	cmp	r5, #16
   87634:	f340 8668 	ble.w	88308 <_svfprintf_r+0x1654>
   87638:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8763c:	931e      	str	r3, [sp, #120]	; 0x78
   8763e:	460b      	mov	r3, r1
   87640:	4639      	mov	r1, r7
   87642:	2410      	movs	r4, #16
   87644:	4637      	mov	r7, r6
   87646:	4656      	mov	r6, sl
   87648:	46ca      	mov	sl, r9
   8764a:	4689      	mov	r9, r1
   8764c:	e004      	b.n	87658 <_svfprintf_r+0x9a4>
   8764e:	3d10      	subs	r5, #16
   87650:	2d10      	cmp	r5, #16
   87652:	f108 0808 	add.w	r8, r8, #8
   87656:	dd17      	ble.n	87688 <_svfprintf_r+0x9d4>
   87658:	3201      	adds	r2, #1
   8765a:	4920      	ldr	r1, [pc, #128]	; (876dc <_svfprintf_r+0xa28>)
   8765c:	3310      	adds	r3, #16
   8765e:	2a07      	cmp	r2, #7
   87660:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   87664:	e9c8 1400 	strd	r1, r4, [r8]
   87668:	ddf1      	ble.n	8764e <_svfprintf_r+0x99a>
   8766a:	4631      	mov	r1, r6
   8766c:	4650      	mov	r0, sl
   8766e:	aa2a      	add	r2, sp, #168	; 0xa8
   87670:	f004 ff64 	bl	8c53c <__ssprint_r>
   87674:	2800      	cmp	r0, #0
   87676:	f040 8458 	bne.w	87f2a <_svfprintf_r+0x1276>
   8767a:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   8767e:	3d10      	subs	r5, #16
   87680:	2d10      	cmp	r5, #16
   87682:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87686:	dce7      	bgt.n	87658 <_svfprintf_r+0x9a4>
   87688:	4648      	mov	r0, r9
   8768a:	46d1      	mov	r9, sl
   8768c:	46b2      	mov	sl, r6
   8768e:	463e      	mov	r6, r7
   87690:	4607      	mov	r7, r0
   87692:	4619      	mov	r1, r3
   87694:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87696:	194c      	adds	r4, r1, r5
   87698:	3201      	adds	r2, #1
   8769a:	4910      	ldr	r1, [pc, #64]	; (876dc <_svfprintf_r+0xa28>)
   8769c:	2a07      	cmp	r2, #7
   8769e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   876a2:	e9c8 1500 	strd	r1, r5, [r8]
   876a6:	f300 841f 	bgt.w	87ee8 <_svfprintf_r+0x1234>
   876aa:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   876ae:	f108 0808 	add.w	r8, r8, #8
   876b2:	e474      	b.n	86f9e <_svfprintf_r+0x2ea>
   876b4:	9308      	str	r3, [sp, #32]
   876b6:	2d00      	cmp	r5, #0
   876b8:	bf08      	it	eq
   876ba:	2c0a      	cmpeq	r4, #10
   876bc:	f080 83d0 	bcs.w	87e60 <_svfprintf_r+0x11ac>
   876c0:	9b08      	ldr	r3, [sp, #32]
   876c2:	3430      	adds	r4, #48	; 0x30
   876c4:	9307      	str	r3, [sp, #28]
   876c6:	2301      	movs	r3, #1
   876c8:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   876cc:	930c      	str	r3, [sp, #48]	; 0x30
   876ce:	f20d 1757 	addw	r7, sp, #343	; 0x157
   876d2:	e658      	b.n	87386 <_svfprintf_r+0x6d2>
   876d4:	0008d524 	.word	0x0008d524
   876d8:	0008d538 	.word	0x0008d538
   876dc:	0008d528 	.word	0x0008d528
   876e0:	4651      	mov	r1, sl
   876e2:	4648      	mov	r0, r9
   876e4:	aa2a      	add	r2, sp, #168	; 0xa8
   876e6:	f004 ff29 	bl	8c53c <__ssprint_r>
   876ea:	2800      	cmp	r0, #0
   876ec:	f47f af2a 	bne.w	87544 <_svfprintf_r+0x890>
   876f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   876f2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   876f4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   876f8:	2a00      	cmp	r2, #0
   876fa:	f040 847f 	bne.w	87ffc <_svfprintf_r+0x1348>
   876fe:	9b07      	ldr	r3, [sp, #28]
   87700:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87702:	f003 0301 	and.w	r3, r3, #1
   87706:	4313      	orrs	r3, r2
   87708:	f43f ac83 	beq.w	87012 <_svfprintf_r+0x35e>
   8770c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8770e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87710:	3301      	adds	r3, #1
   87712:	9918      	ldr	r1, [sp, #96]	; 0x60
   87714:	4414      	add	r4, r2
   87716:	2b07      	cmp	r3, #7
   87718:	e9c8 1200 	strd	r1, r2, [r8]
   8771c:	942c      	str	r4, [sp, #176]	; 0xb0
   8771e:	932b      	str	r3, [sp, #172]	; 0xac
   87720:	f300 8524 	bgt.w	8816c <_svfprintf_r+0x14b8>
   87724:	f108 0808 	add.w	r8, r8, #8
   87728:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8772a:	3301      	adds	r3, #1
   8772c:	4414      	add	r4, r2
   8772e:	2b07      	cmp	r3, #7
   87730:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87734:	e9c8 7200 	strd	r7, r2, [r8]
   87738:	f77f ac69 	ble.w	8700e <_svfprintf_r+0x35a>
   8773c:	4651      	mov	r1, sl
   8773e:	4648      	mov	r0, r9
   87740:	aa2a      	add	r2, sp, #168	; 0xa8
   87742:	f004 fefb 	bl	8c53c <__ssprint_r>
   87746:	2800      	cmp	r0, #0
   87748:	f47f aefc 	bne.w	87544 <_svfprintf_r+0x890>
   8774c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8774e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87752:	e45e      	b.n	87012 <_svfprintf_r+0x35e>
   87754:	4651      	mov	r1, sl
   87756:	4648      	mov	r0, r9
   87758:	aa2a      	add	r2, sp, #168	; 0xa8
   8775a:	931e      	str	r3, [sp, #120]	; 0x78
   8775c:	f004 feee 	bl	8c53c <__ssprint_r>
   87760:	2800      	cmp	r0, #0
   87762:	f47f aeef 	bne.w	87544 <_svfprintf_r+0x890>
   87766:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87768:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8776a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8776e:	e426      	b.n	86fbe <_svfprintf_r+0x30a>
   87770:	4651      	mov	r1, sl
   87772:	4648      	mov	r0, r9
   87774:	aa2a      	add	r2, sp, #168	; 0xa8
   87776:	f004 fee1 	bl	8c53c <__ssprint_r>
   8777a:	2800      	cmp	r0, #0
   8777c:	f47f aee2 	bne.w	87544 <_svfprintf_r+0x890>
   87780:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87782:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87786:	e429      	b.n	86fdc <_svfprintf_r+0x328>
   87788:	2d10      	cmp	r5, #16
   8778a:	f340 86be 	ble.w	8850a <_svfprintf_r+0x1856>
   8778e:	2610      	movs	r6, #16
   87790:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87792:	e004      	b.n	8779e <_svfprintf_r+0xaea>
   87794:	3d10      	subs	r5, #16
   87796:	2d10      	cmp	r5, #16
   87798:	f108 0808 	add.w	r8, r8, #8
   8779c:	dd17      	ble.n	877ce <_svfprintf_r+0xb1a>
   8779e:	3301      	adds	r3, #1
   877a0:	4aad      	ldr	r2, [pc, #692]	; (87a58 <_svfprintf_r+0xda4>)
   877a2:	3410      	adds	r4, #16
   877a4:	2b07      	cmp	r3, #7
   877a6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   877aa:	e9c8 2600 	strd	r2, r6, [r8]
   877ae:	ddf1      	ble.n	87794 <_svfprintf_r+0xae0>
   877b0:	4651      	mov	r1, sl
   877b2:	4648      	mov	r0, r9
   877b4:	aa2a      	add	r2, sp, #168	; 0xa8
   877b6:	f004 fec1 	bl	8c53c <__ssprint_r>
   877ba:	2800      	cmp	r0, #0
   877bc:	f47f aec2 	bne.w	87544 <_svfprintf_r+0x890>
   877c0:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   877c4:	3d10      	subs	r5, #16
   877c6:	2d10      	cmp	r5, #16
   877c8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   877cc:	dce7      	bgt.n	8779e <_svfprintf_r+0xaea>
   877ce:	3301      	adds	r3, #1
   877d0:	4aa1      	ldr	r2, [pc, #644]	; (87a58 <_svfprintf_r+0xda4>)
   877d2:	442c      	add	r4, r5
   877d4:	2b07      	cmp	r3, #7
   877d6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   877da:	e9c8 2500 	strd	r2, r5, [r8]
   877de:	f77f ac21 	ble.w	87024 <_svfprintf_r+0x370>
   877e2:	4651      	mov	r1, sl
   877e4:	4648      	mov	r0, r9
   877e6:	aa2a      	add	r2, sp, #168	; 0xa8
   877e8:	f004 fea8 	bl	8c53c <__ssprint_r>
   877ec:	2800      	cmp	r0, #0
   877ee:	f47f aea9 	bne.w	87544 <_svfprintf_r+0x890>
   877f2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   877f4:	e416      	b.n	87024 <_svfprintf_r+0x370>
   877f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   877f8:	2a00      	cmp	r2, #0
   877fa:	f340 8386 	ble.w	87f0a <_svfprintf_r+0x1256>
   877fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87800:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87802:	4293      	cmp	r3, r2
   87804:	bfa8      	it	ge
   87806:	4613      	movge	r3, r2
   87808:	2b00      	cmp	r3, #0
   8780a:	461d      	mov	r5, r3
   8780c:	dd0b      	ble.n	87826 <_svfprintf_r+0xb72>
   8780e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87810:	442c      	add	r4, r5
   87812:	3301      	adds	r3, #1
   87814:	2b07      	cmp	r3, #7
   87816:	e9c8 7500 	strd	r7, r5, [r8]
   8781a:	942c      	str	r4, [sp, #176]	; 0xb0
   8781c:	932b      	str	r3, [sp, #172]	; 0xac
   8781e:	f300 851e 	bgt.w	8825e <_svfprintf_r+0x15aa>
   87822:	f108 0808 	add.w	r8, r8, #8
   87826:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87828:	2d00      	cmp	r5, #0
   8782a:	bfa8      	it	ge
   8782c:	1b5b      	subge	r3, r3, r5
   8782e:	2b00      	cmp	r3, #0
   87830:	461d      	mov	r5, r3
   87832:	f300 8256 	bgt.w	87ce2 <_svfprintf_r+0x102e>
   87836:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87838:	443b      	add	r3, r7
   8783a:	461e      	mov	r6, r3
   8783c:	9b07      	ldr	r3, [sp, #28]
   8783e:	055b      	lsls	r3, r3, #21
   87840:	f100 8277 	bmi.w	87d32 <_svfprintf_r+0x107e>
   87844:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87846:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87848:	4293      	cmp	r3, r2
   8784a:	db03      	blt.n	87854 <_svfprintf_r+0xba0>
   8784c:	9a07      	ldr	r2, [sp, #28]
   8784e:	07d5      	lsls	r5, r2, #31
   87850:	f140 847a 	bpl.w	88148 <_svfprintf_r+0x1494>
   87854:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87856:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87858:	3201      	adds	r2, #1
   8785a:	9818      	ldr	r0, [sp, #96]	; 0x60
   8785c:	440c      	add	r4, r1
   8785e:	2a07      	cmp	r2, #7
   87860:	e9c8 0100 	strd	r0, r1, [r8]
   87864:	942c      	str	r4, [sp, #176]	; 0xb0
   87866:	922b      	str	r2, [sp, #172]	; 0xac
   87868:	f300 8506 	bgt.w	88278 <_svfprintf_r+0x15c4>
   8786c:	f108 0808 	add.w	r8, r8, #8
   87870:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87872:	18bd      	adds	r5, r7, r2
   87874:	1bad      	subs	r5, r5, r6
   87876:	1ad3      	subs	r3, r2, r3
   87878:	429d      	cmp	r5, r3
   8787a:	bfa8      	it	ge
   8787c:	461d      	movge	r5, r3
   8787e:	2d00      	cmp	r5, #0
   87880:	dd0b      	ble.n	8789a <_svfprintf_r+0xbe6>
   87882:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87884:	442c      	add	r4, r5
   87886:	3201      	adds	r2, #1
   87888:	2a07      	cmp	r2, #7
   8788a:	e9c8 6500 	strd	r6, r5, [r8]
   8788e:	942c      	str	r4, [sp, #176]	; 0xb0
   87890:	922b      	str	r2, [sp, #172]	; 0xac
   87892:	f300 855f 	bgt.w	88354 <_svfprintf_r+0x16a0>
   87896:	f108 0808 	add.w	r8, r8, #8
   8789a:	2d00      	cmp	r5, #0
   8789c:	bfb4      	ite	lt
   8789e:	461d      	movlt	r5, r3
   878a0:	1b5d      	subge	r5, r3, r5
   878a2:	2d00      	cmp	r5, #0
   878a4:	f77f abb5 	ble.w	87012 <_svfprintf_r+0x35e>
   878a8:	2d10      	cmp	r5, #16
   878aa:	f340 8376 	ble.w	87f9a <_svfprintf_r+0x12e6>
   878ae:	4f6b      	ldr	r7, [pc, #428]	; (87a5c <_svfprintf_r+0xda8>)
   878b0:	2610      	movs	r6, #16
   878b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   878b4:	970f      	str	r7, [sp, #60]	; 0x3c
   878b6:	e005      	b.n	878c4 <_svfprintf_r+0xc10>
   878b8:	f108 0808 	add.w	r8, r8, #8
   878bc:	3d10      	subs	r5, #16
   878be:	2d10      	cmp	r5, #16
   878c0:	f340 836e 	ble.w	87fa0 <_svfprintf_r+0x12ec>
   878c4:	3301      	adds	r3, #1
   878c6:	3410      	adds	r4, #16
   878c8:	2b07      	cmp	r3, #7
   878ca:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   878ce:	e9c8 7600 	strd	r7, r6, [r8]
   878d2:	ddf1      	ble.n	878b8 <_svfprintf_r+0xc04>
   878d4:	4651      	mov	r1, sl
   878d6:	4648      	mov	r0, r9
   878d8:	aa2a      	add	r2, sp, #168	; 0xa8
   878da:	f004 fe2f 	bl	8c53c <__ssprint_r>
   878de:	2800      	cmp	r0, #0
   878e0:	f47f ae30 	bne.w	87544 <_svfprintf_r+0x890>
   878e4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   878e8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   878ec:	e7e6      	b.n	878bc <_svfprintf_r+0xc08>
   878ee:	2b30      	cmp	r3, #48	; 0x30
   878f0:	f43f ae99 	beq.w	87626 <_svfprintf_r+0x972>
   878f4:	2330      	movs	r3, #48	; 0x30
   878f6:	3a02      	subs	r2, #2
   878f8:	f807 3c01 	strb.w	r3, [r7, #-1]
   878fc:	9908      	ldr	r1, [sp, #32]
   878fe:	ab56      	add	r3, sp, #344	; 0x158
   87900:	1a9b      	subs	r3, r3, r2
   87902:	4617      	mov	r7, r2
   87904:	9107      	str	r1, [sp, #28]
   87906:	930c      	str	r3, [sp, #48]	; 0x30
   87908:	e53d      	b.n	87386 <_svfprintf_r+0x6d2>
   8790a:	9b07      	ldr	r3, [sp, #28]
   8790c:	07d8      	lsls	r0, r3, #31
   8790e:	f53f ae27 	bmi.w	87560 <_svfprintf_r+0x8ac>
   87912:	2301      	movs	r3, #1
   87914:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87916:	441c      	add	r4, r3
   87918:	441d      	add	r5, r3
   8791a:	2d07      	cmp	r5, #7
   8791c:	942c      	str	r4, [sp, #176]	; 0xb0
   8791e:	f8c8 7000 	str.w	r7, [r8]
   87922:	952b      	str	r5, [sp, #172]	; 0xac
   87924:	f8c8 3004 	str.w	r3, [r8, #4]
   87928:	f77f ae4d 	ble.w	875c6 <_svfprintf_r+0x912>
   8792c:	4651      	mov	r1, sl
   8792e:	4648      	mov	r0, r9
   87930:	aa2a      	add	r2, sp, #168	; 0xa8
   87932:	f004 fe03 	bl	8c53c <__ssprint_r>
   87936:	2800      	cmp	r0, #0
   87938:	f47f ae04 	bne.w	87544 <_svfprintf_r+0x890>
   8793c:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87940:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87944:	e641      	b.n	875ca <_svfprintf_r+0x916>
   87946:	1e5e      	subs	r6, r3, #1
   87948:	2e00      	cmp	r6, #0
   8794a:	f77f ae3e 	ble.w	875ca <_svfprintf_r+0x916>
   8794e:	2e10      	cmp	r6, #16
   87950:	f340 871e 	ble.w	88790 <_svfprintf_r+0x1adc>
   87954:	4b41      	ldr	r3, [pc, #260]	; (87a5c <_svfprintf_r+0xda8>)
   87956:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   8795a:	2710      	movs	r7, #16
   8795c:	46d3      	mov	fp, sl
   8795e:	930f      	str	r3, [sp, #60]	; 0x3c
   87960:	46ca      	mov	sl, r9
   87962:	4699      	mov	r9, r3
   87964:	e005      	b.n	87972 <_svfprintf_r+0xcbe>
   87966:	f108 0808 	add.w	r8, r8, #8
   8796a:	3e10      	subs	r6, #16
   8796c:	2e10      	cmp	r6, #16
   8796e:	f340 82f8 	ble.w	87f62 <_svfprintf_r+0x12ae>
   87972:	3501      	adds	r5, #1
   87974:	3410      	adds	r4, #16
   87976:	2d07      	cmp	r5, #7
   87978:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8797c:	e9c8 9700 	strd	r9, r7, [r8]
   87980:	ddf1      	ble.n	87966 <_svfprintf_r+0xcb2>
   87982:	4659      	mov	r1, fp
   87984:	4650      	mov	r0, sl
   87986:	aa2a      	add	r2, sp, #168	; 0xa8
   87988:	f004 fdd8 	bl	8c53c <__ssprint_r>
   8798c:	2800      	cmp	r0, #0
   8798e:	f040 85cc 	bne.w	8852a <_svfprintf_r+0x1876>
   87992:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87996:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8799a:	e7e6      	b.n	8796a <_svfprintf_r+0xcb6>
   8799c:	4651      	mov	r1, sl
   8799e:	4648      	mov	r0, r9
   879a0:	aa2a      	add	r2, sp, #168	; 0xa8
   879a2:	f004 fdcb 	bl	8c53c <__ssprint_r>
   879a6:	2800      	cmp	r0, #0
   879a8:	f47f adcc 	bne.w	87544 <_svfprintf_r+0x890>
   879ac:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   879ae:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   879b2:	f7ff bb1d 	b.w	86ff0 <_svfprintf_r+0x33c>
   879b6:	9b08      	ldr	r3, [sp, #32]
   879b8:	06dc      	lsls	r4, r3, #27
   879ba:	f100 8119 	bmi.w	87bf0 <_svfprintf_r+0xf3c>
   879be:	9b08      	ldr	r3, [sp, #32]
   879c0:	0658      	lsls	r0, r3, #25
   879c2:	f140 8368 	bpl.w	88096 <_svfprintf_r+0x13e2>
   879c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   879c8:	2301      	movs	r3, #1
   879ca:	f852 4b04 	ldr.w	r4, [r2], #4
   879ce:	2500      	movs	r5, #0
   879d0:	920e      	str	r2, [sp, #56]	; 0x38
   879d2:	b2a4      	uxth	r4, r4
   879d4:	f7ff ba7f 	b.w	86ed6 <_svfprintf_r+0x222>
   879d8:	232d      	movs	r3, #45	; 0x2d
   879da:	9a07      	ldr	r2, [sp, #28]
   879dc:	4264      	negs	r4, r4
   879de:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   879e2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   879e6:	2301      	movs	r3, #1
   879e8:	9208      	str	r2, [sp, #32]
   879ea:	f7ff ba77 	b.w	86edc <_svfprintf_r+0x228>
   879ee:	4651      	mov	r1, sl
   879f0:	4648      	mov	r0, r9
   879f2:	aa2a      	add	r2, sp, #168	; 0xa8
   879f4:	f004 fda2 	bl	8c53c <__ssprint_r>
   879f8:	2800      	cmp	r0, #0
   879fa:	f47f ada3 	bne.w	87544 <_svfprintf_r+0x890>
   879fe:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87a02:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a06:	e5ba      	b.n	8757e <_svfprintf_r+0x8ca>
   87a08:	4651      	mov	r1, sl
   87a0a:	4648      	mov	r0, r9
   87a0c:	aa2a      	add	r2, sp, #168	; 0xa8
   87a0e:	f004 fd95 	bl	8c53c <__ssprint_r>
   87a12:	2800      	cmp	r0, #0
   87a14:	f47f ad96 	bne.w	87544 <_svfprintf_r+0x890>
   87a18:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87a1c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a20:	e5ba      	b.n	87598 <_svfprintf_r+0x8e4>
   87a22:	9b07      	ldr	r3, [sp, #28]
   87a24:	07da      	lsls	r2, r3, #31
   87a26:	f57f aaf4 	bpl.w	87012 <_svfprintf_r+0x35e>
   87a2a:	e4d9      	b.n	873e0 <_svfprintf_r+0x72c>
   87a2c:	af56      	add	r7, sp, #344	; 0x158
   87a2e:	e4aa      	b.n	87386 <_svfprintf_r+0x6d2>
   87a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87a32:	465f      	mov	r7, fp
   87a34:	f853 1b04 	ldr.w	r1, [r3], #4
   87a38:	930e      	str	r3, [sp, #56]	; 0x38
   87a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87a3c:	17dd      	asrs	r5, r3, #31
   87a3e:	461a      	mov	r2, r3
   87a40:	462b      	mov	r3, r5
   87a42:	e9c1 2300 	strd	r2, r3, [r1]
   87a46:	f7ff bb03 	b.w	87050 <_svfprintf_r+0x39c>
   87a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87a4c:	2500      	movs	r5, #0
   87a4e:	f853 4b04 	ldr.w	r4, [r3], #4
   87a52:	930e      	str	r3, [sp, #56]	; 0x38
   87a54:	f7ff ba3a 	b.w	86ecc <_svfprintf_r+0x218>
   87a58:	0008d528 	.word	0x0008d528
   87a5c:	0008d538 	.word	0x0008d538
   87a60:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87a64:	460b      	mov	r3, r1
   87a66:	4602      	mov	r2, r0
   87a68:	f005 fc9c 	bl	8d3a4 <__aeabi_dcmpun>
   87a6c:	4601      	mov	r1, r0
   87a6e:	2800      	cmp	r0, #0
   87a70:	f040 8643 	bne.w	886fa <_svfprintf_r+0x1a46>
   87a74:	2e61      	cmp	r6, #97	; 0x61
   87a76:	f000 8586 	beq.w	88586 <_svfprintf_r+0x18d2>
   87a7a:	2e41      	cmp	r6, #65	; 0x41
   87a7c:	f000 847a 	beq.w	88374 <_svfprintf_r+0x16c0>
   87a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87a82:	f026 0520 	bic.w	r5, r6, #32
   87a86:	1c5a      	adds	r2, r3, #1
   87a88:	9508      	str	r5, [sp, #32]
   87a8a:	f000 837d 	beq.w	88188 <_svfprintf_r+0x14d4>
   87a8e:	2d47      	cmp	r5, #71	; 0x47
   87a90:	f000 859e 	beq.w	885d0 <_svfprintf_r+0x191c>
   87a94:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87a98:	9b07      	ldr	r3, [sp, #28]
   87a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   87a9e:	9312      	str	r3, [sp, #72]	; 0x48
   87aa0:	460b      	mov	r3, r1
   87aa2:	2b00      	cmp	r3, #0
   87aa4:	f2c0 85ba 	blt.w	8861c <_svfprintf_r+0x1968>
   87aa8:	2200      	movs	r2, #0
   87aaa:	930f      	str	r3, [sp, #60]	; 0x3c
   87aac:	921e      	str	r2, [sp, #120]	; 0x78
   87aae:	920d      	str	r2, [sp, #52]	; 0x34
   87ab0:	900c      	str	r0, [sp, #48]	; 0x30
   87ab2:	2d46      	cmp	r5, #70	; 0x46
   87ab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87ab6:	f000 8407 	beq.w	882c8 <_svfprintf_r+0x1614>
   87aba:	2d45      	cmp	r5, #69	; 0x45
   87abc:	f04f 0002 	mov.w	r0, #2
   87ac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87ac2:	f040 83e7 	bne.w	88294 <_svfprintf_r+0x15e0>
   87ac6:	9909      	ldr	r1, [sp, #36]	; 0x24
   87ac8:	9000      	str	r0, [sp, #0]
   87aca:	1c4c      	adds	r4, r1, #1
   87acc:	a928      	add	r1, sp, #160	; 0xa0
   87ace:	a825      	add	r0, sp, #148	; 0x94
   87ad0:	9104      	str	r1, [sp, #16]
   87ad2:	a924      	add	r1, sp, #144	; 0x90
   87ad4:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87ad8:	9401      	str	r4, [sp, #4]
   87ada:	4648      	mov	r0, r9
   87adc:	f001 feb0 	bl	89840 <_dtoa_r>
   87ae0:	4607      	mov	r7, r0
   87ae2:	4404      	add	r4, r0
   87ae4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87ae6:	9d07      	ldr	r5, [sp, #28]
   87ae8:	9307      	str	r3, [sp, #28]
   87aea:	2200      	movs	r2, #0
   87aec:	2300      	movs	r3, #0
   87aee:	980c      	ldr	r0, [sp, #48]	; 0x30
   87af0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87af2:	f005 fc25 	bl	8d340 <__aeabi_dcmpeq>
   87af6:	2800      	cmp	r0, #0
   87af8:	f000 8398 	beq.w	8822c <_svfprintf_r+0x1578>
   87afc:	4623      	mov	r3, r4
   87afe:	1bdb      	subs	r3, r3, r7
   87b00:	9313      	str	r3, [sp, #76]	; 0x4c
   87b02:	9b08      	ldr	r3, [sp, #32]
   87b04:	2b47      	cmp	r3, #71	; 0x47
   87b06:	f000 835e 	beq.w	881c6 <_svfprintf_r+0x1512>
   87b0a:	9b08      	ldr	r3, [sp, #32]
   87b0c:	2b46      	cmp	r3, #70	; 0x46
   87b0e:	f000 840b 	beq.w	88328 <_svfprintf_r+0x1674>
   87b12:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87b14:	9310      	str	r3, [sp, #64]	; 0x40
   87b16:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87b18:	9a08      	ldr	r2, [sp, #32]
   87b1a:	3b01      	subs	r3, #1
   87b1c:	2a41      	cmp	r2, #65	; 0x41
   87b1e:	9324      	str	r3, [sp, #144]	; 0x90
   87b20:	f000 85ad 	beq.w	8867e <_svfprintf_r+0x19ca>
   87b24:	2100      	movs	r1, #0
   87b26:	b2f2      	uxtb	r2, r6
   87b28:	2b00      	cmp	r3, #0
   87b2a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   87b2e:	bfb6      	itet	lt
   87b30:	222d      	movlt	r2, #45	; 0x2d
   87b32:	222b      	movge	r2, #43	; 0x2b
   87b34:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   87b36:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   87b3a:	bfb8      	it	lt
   87b3c:	f1c3 0301 	rsblt	r3, r3, #1
   87b40:	2b09      	cmp	r3, #9
   87b42:	f340 85a2 	ble.w	8868a <_svfprintf_r+0x19d6>
   87b46:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   87b4a:	4672      	mov	r2, lr
   87b4c:	469c      	mov	ip, r3
   87b4e:	4cbf      	ldr	r4, [pc, #764]	; (87e4c <_svfprintf_r+0x1198>)
   87b50:	4660      	mov	r0, ip
   87b52:	4611      	mov	r1, r2
   87b54:	fb84 230c 	smull	r2, r3, r4, ip
   87b58:	ea4f 72ec 	mov.w	r2, ip, asr #31
   87b5c:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   87b60:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   87b64:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   87b68:	3330      	adds	r3, #48	; 0x30
   87b6a:	2863      	cmp	r0, #99	; 0x63
   87b6c:	4694      	mov	ip, r2
   87b6e:	f801 3c01 	strb.w	r3, [r1, #-1]
   87b72:	f101 32ff 	add.w	r2, r1, #4294967295
   87b76:	dceb      	bgt.n	87b50 <_svfprintf_r+0xe9c>
   87b78:	4663      	mov	r3, ip
   87b7a:	3330      	adds	r3, #48	; 0x30
   87b7c:	b2d8      	uxtb	r0, r3
   87b7e:	1e8b      	subs	r3, r1, #2
   87b80:	459e      	cmp	lr, r3
   87b82:	f802 0c01 	strb.w	r0, [r2, #-1]
   87b86:	f240 862c 	bls.w	887e2 <_svfprintf_r+0x1b2e>
   87b8a:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   87b8e:	e001      	b.n	87b94 <_svfprintf_r+0xee0>
   87b90:	f812 0b01 	ldrb.w	r0, [r2], #1
   87b94:	4596      	cmp	lr, r2
   87b96:	f803 0b01 	strb.w	r0, [r3], #1
   87b9a:	d1f9      	bne.n	87b90 <_svfprintf_r+0xedc>
   87b9c:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   87ba0:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   87ba4:	1a5b      	subs	r3, r3, r1
   87ba6:	4413      	add	r3, r2
   87ba8:	aa26      	add	r2, sp, #152	; 0x98
   87baa:	1a9b      	subs	r3, r3, r2
   87bac:	931b      	str	r3, [sp, #108]	; 0x6c
   87bae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87bb0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   87bb2:	2b01      	cmp	r3, #1
   87bb4:	441a      	add	r2, r3
   87bb6:	920c      	str	r2, [sp, #48]	; 0x30
   87bb8:	f340 85cc 	ble.w	88754 <_svfprintf_r+0x1aa0>
   87bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87bbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87bc0:	4413      	add	r3, r2
   87bc2:	930c      	str	r3, [sp, #48]	; 0x30
   87bc4:	2300      	movs	r3, #0
   87bc6:	9312      	str	r3, [sp, #72]	; 0x48
   87bc8:	9316      	str	r3, [sp, #88]	; 0x58
   87bca:	9310      	str	r3, [sp, #64]	; 0x40
   87bcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87bce:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   87bd2:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   87bd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87bda:	9207      	str	r2, [sp, #28]
   87bdc:	9308      	str	r3, [sp, #32]
   87bde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87be0:	2b00      	cmp	r3, #0
   87be2:	f040 8317 	bne.w	88214 <_svfprintf_r+0x1560>
   87be6:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87bea:	9309      	str	r3, [sp, #36]	; 0x24
   87bec:	f7ff ba86 	b.w	870fc <_svfprintf_r+0x448>
   87bf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87bf2:	2301      	movs	r3, #1
   87bf4:	f852 4b04 	ldr.w	r4, [r2], #4
   87bf8:	2500      	movs	r5, #0
   87bfa:	920e      	str	r2, [sp, #56]	; 0x38
   87bfc:	f7ff b96b 	b.w	86ed6 <_svfprintf_r+0x222>
   87c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87c02:	f853 4b04 	ldr.w	r4, [r3], #4
   87c06:	17e5      	asrs	r5, r4, #31
   87c08:	930e      	str	r3, [sp, #56]	; 0x38
   87c0a:	4622      	mov	r2, r4
   87c0c:	462b      	mov	r3, r5
   87c0e:	f7ff b933 	b.w	86e78 <_svfprintf_r+0x1c4>
   87c12:	9b07      	ldr	r3, [sp, #28]
   87c14:	9308      	str	r3, [sp, #32]
   87c16:	f7ff bae0 	b.w	871da <_svfprintf_r+0x526>
   87c1a:	4b8d      	ldr	r3, [pc, #564]	; (87e50 <_svfprintf_r+0x119c>)
   87c1c:	9319      	str	r3, [sp, #100]	; 0x64
   87c1e:	9b07      	ldr	r3, [sp, #28]
   87c20:	0699      	lsls	r1, r3, #26
   87c22:	f140 80fe 	bpl.w	87e22 <_svfprintf_r+0x116e>
   87c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87c28:	3307      	adds	r3, #7
   87c2a:	f023 0307 	bic.w	r3, r3, #7
   87c2e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87c32:	930e      	str	r3, [sp, #56]	; 0x38
   87c34:	9a07      	ldr	r2, [sp, #28]
   87c36:	07d7      	lsls	r7, r2, #31
   87c38:	d50a      	bpl.n	87c50 <_svfprintf_r+0xf9c>
   87c3a:	ea54 0305 	orrs.w	r3, r4, r5
   87c3e:	d007      	beq.n	87c50 <_svfprintf_r+0xf9c>
   87c40:	2330      	movs	r3, #48	; 0x30
   87c42:	f042 0202 	orr.w	r2, r2, #2
   87c46:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   87c4a:	9207      	str	r2, [sp, #28]
   87c4c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87c50:	9a07      	ldr	r2, [sp, #28]
   87c52:	2302      	movs	r3, #2
   87c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   87c58:	9208      	str	r2, [sp, #32]
   87c5a:	f7ff b93c 	b.w	86ed6 <_svfprintf_r+0x222>
   87c5e:	4b7d      	ldr	r3, [pc, #500]	; (87e54 <_svfprintf_r+0x11a0>)
   87c60:	9319      	str	r3, [sp, #100]	; 0x64
   87c62:	e7dc      	b.n	87c1e <_svfprintf_r+0xf6a>
   87c64:	f043 0320 	orr.w	r3, r3, #32
   87c68:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87c6c:	9307      	str	r3, [sp, #28]
   87c6e:	f10b 0b01 	add.w	fp, fp, #1
   87c72:	f7ff b86a 	b.w	86d4a <_svfprintf_r+0x96>
   87c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   87c7a:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87c7e:	9307      	str	r3, [sp, #28]
   87c80:	f10b 0b01 	add.w	fp, fp, #1
   87c84:	f7ff b861 	b.w	86d4a <_svfprintf_r+0x96>
   87c88:	4651      	mov	r1, sl
   87c8a:	4648      	mov	r0, r9
   87c8c:	aa2a      	add	r2, sp, #168	; 0xa8
   87c8e:	f004 fc55 	bl	8c53c <__ssprint_r>
   87c92:	2800      	cmp	r0, #0
   87c94:	f47f ac56 	bne.w	87544 <_svfprintf_r+0x890>
   87c98:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87c9a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c9e:	f7ff bbad 	b.w	873fc <_svfprintf_r+0x748>
   87ca2:	2140      	movs	r1, #64	; 0x40
   87ca4:	4648      	mov	r0, r9
   87ca6:	f003 fa71 	bl	8b18c <_malloc_r>
   87caa:	f8cb 0000 	str.w	r0, [fp]
   87cae:	f8cb 0010 	str.w	r0, [fp, #16]
   87cb2:	2800      	cmp	r0, #0
   87cb4:	f000 858d 	beq.w	887d2 <_svfprintf_r+0x1b1e>
   87cb8:	2340      	movs	r3, #64	; 0x40
   87cba:	f8cb 3014 	str.w	r3, [fp, #20]
   87cbe:	f7ff b811 	b.w	86ce4 <_svfprintf_r+0x30>
   87cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87cc4:	463a      	mov	r2, r7
   87cc6:	2b06      	cmp	r3, #6
   87cc8:	bf28      	it	cs
   87cca:	2306      	movcs	r3, #6
   87ccc:	9709      	str	r7, [sp, #36]	; 0x24
   87cce:	9712      	str	r7, [sp, #72]	; 0x48
   87cd0:	9716      	str	r7, [sp, #88]	; 0x58
   87cd2:	9710      	str	r7, [sp, #64]	; 0x40
   87cd4:	970d      	str	r7, [sp, #52]	; 0x34
   87cd6:	9308      	str	r3, [sp, #32]
   87cd8:	4f5f      	ldr	r7, [pc, #380]	; (87e58 <_svfprintf_r+0x11a4>)
   87cda:	940e      	str	r4, [sp, #56]	; 0x38
   87cdc:	930c      	str	r3, [sp, #48]	; 0x30
   87cde:	f7ff ba0d 	b.w	870fc <_svfprintf_r+0x448>
   87ce2:	2b10      	cmp	r3, #16
   87ce4:	f340 8558 	ble.w	88798 <_svfprintf_r+0x1ae4>
   87ce8:	4651      	mov	r1, sl
   87cea:	4a5c      	ldr	r2, [pc, #368]	; (87e5c <_svfprintf_r+0x11a8>)
   87cec:	46ca      	mov	sl, r9
   87cee:	9709      	str	r7, [sp, #36]	; 0x24
   87cf0:	2610      	movs	r6, #16
   87cf2:	4617      	mov	r7, r2
   87cf4:	4689      	mov	r9, r1
   87cf6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87cf8:	920f      	str	r2, [sp, #60]	; 0x3c
   87cfa:	e005      	b.n	87d08 <_svfprintf_r+0x1054>
   87cfc:	f108 0808 	add.w	r8, r8, #8
   87d00:	3d10      	subs	r5, #16
   87d02:	2d10      	cmp	r5, #16
   87d04:	f340 81fa 	ble.w	880fc <_svfprintf_r+0x1448>
   87d08:	3301      	adds	r3, #1
   87d0a:	3410      	adds	r4, #16
   87d0c:	2b07      	cmp	r3, #7
   87d0e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87d12:	e9c8 7600 	strd	r7, r6, [r8]
   87d16:	ddf1      	ble.n	87cfc <_svfprintf_r+0x1048>
   87d18:	4649      	mov	r1, r9
   87d1a:	4650      	mov	r0, sl
   87d1c:	aa2a      	add	r2, sp, #168	; 0xa8
   87d1e:	f004 fc0d 	bl	8c53c <__ssprint_r>
   87d22:	2800      	cmp	r0, #0
   87d24:	f040 83fd 	bne.w	88522 <_svfprintf_r+0x186e>
   87d28:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87d2c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87d30:	e7e6      	b.n	87d00 <_svfprintf_r+0x104c>
   87d32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87d34:	4642      	mov	r2, r8
   87d36:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   87d3a:	18fb      	adds	r3, r7, r3
   87d3c:	9309      	str	r3, [sp, #36]	; 0x24
   87d3e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   87d42:	970f      	str	r7, [sp, #60]	; 0x3c
   87d44:	4620      	mov	r0, r4
   87d46:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   87d4a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   87d4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87d4e:	f1b8 0f00 	cmp.w	r8, #0
   87d52:	d02d      	beq.n	87db0 <_svfprintf_r+0x10fc>
   87d54:	bb7b      	cbnz	r3, 87db6 <_svfprintf_r+0x1102>
   87d56:	3f01      	subs	r7, #1
   87d58:	f108 38ff 	add.w	r8, r8, #4294967295
   87d5c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87d5e:	991c      	ldr	r1, [sp, #112]	; 0x70
   87d60:	3301      	adds	r3, #1
   87d62:	4458      	add	r0, fp
   87d64:	2b07      	cmp	r3, #7
   87d66:	e9c2 1b00 	strd	r1, fp, [r2]
   87d6a:	902c      	str	r0, [sp, #176]	; 0xb0
   87d6c:	932b      	str	r3, [sp, #172]	; 0xac
   87d6e:	dc62      	bgt.n	87e36 <_svfprintf_r+0x1182>
   87d70:	3208      	adds	r2, #8
   87d72:	9909      	ldr	r1, [sp, #36]	; 0x24
   87d74:	783b      	ldrb	r3, [r7, #0]
   87d76:	1b8d      	subs	r5, r1, r6
   87d78:	429d      	cmp	r5, r3
   87d7a:	bfa8      	it	ge
   87d7c:	461d      	movge	r5, r3
   87d7e:	2d00      	cmp	r5, #0
   87d80:	dd0b      	ble.n	87d9a <_svfprintf_r+0x10e6>
   87d82:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87d84:	4428      	add	r0, r5
   87d86:	3301      	adds	r3, #1
   87d88:	2b07      	cmp	r3, #7
   87d8a:	e9c2 6500 	strd	r6, r5, [r2]
   87d8e:	902c      	str	r0, [sp, #176]	; 0xb0
   87d90:	932b      	str	r3, [sp, #172]	; 0xac
   87d92:	f300 8111 	bgt.w	87fb8 <_svfprintf_r+0x1304>
   87d96:	783b      	ldrb	r3, [r7, #0]
   87d98:	3208      	adds	r2, #8
   87d9a:	2d00      	cmp	r5, #0
   87d9c:	bfb4      	ite	lt
   87d9e:	461d      	movlt	r5, r3
   87da0:	1b5d      	subge	r5, r3, r5
   87da2:	2d00      	cmp	r5, #0
   87da4:	dc0b      	bgt.n	87dbe <_svfprintf_r+0x110a>
   87da6:	441e      	add	r6, r3
   87da8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87daa:	f1b8 0f00 	cmp.w	r8, #0
   87dae:	d1d1      	bne.n	87d54 <_svfprintf_r+0x10a0>
   87db0:	2b00      	cmp	r3, #0
   87db2:	f000 81f9 	beq.w	881a8 <_svfprintf_r+0x14f4>
   87db6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87db8:	3b01      	subs	r3, #1
   87dba:	9312      	str	r3, [sp, #72]	; 0x48
   87dbc:	e7ce      	b.n	87d5c <_svfprintf_r+0x10a8>
   87dbe:	2d10      	cmp	r5, #16
   87dc0:	f340 84c5 	ble.w	8874e <_svfprintf_r+0x1a9a>
   87dc4:	992b      	ldr	r1, [sp, #172]	; 0xac
   87dc6:	2410      	movs	r4, #16
   87dc8:	460b      	mov	r3, r1
   87dca:	e004      	b.n	87dd6 <_svfprintf_r+0x1122>
   87dcc:	3d10      	subs	r5, #16
   87dce:	2d10      	cmp	r5, #16
   87dd0:	f102 0208 	add.w	r2, r2, #8
   87dd4:	dd16      	ble.n	87e04 <_svfprintf_r+0x1150>
   87dd6:	3301      	adds	r3, #1
   87dd8:	4920      	ldr	r1, [pc, #128]	; (87e5c <_svfprintf_r+0x11a8>)
   87dda:	3010      	adds	r0, #16
   87ddc:	2b07      	cmp	r3, #7
   87dde:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   87de2:	e9c2 1400 	strd	r1, r4, [r2]
   87de6:	ddf1      	ble.n	87dcc <_svfprintf_r+0x1118>
   87de8:	4651      	mov	r1, sl
   87dea:	4648      	mov	r0, r9
   87dec:	aa2a      	add	r2, sp, #168	; 0xa8
   87dee:	f004 fba5 	bl	8c53c <__ssprint_r>
   87df2:	2800      	cmp	r0, #0
   87df4:	f47f aba6 	bne.w	87544 <_svfprintf_r+0x890>
   87df8:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   87dfc:	3d10      	subs	r5, #16
   87dfe:	2d10      	cmp	r5, #16
   87e00:	aa2d      	add	r2, sp, #180	; 0xb4
   87e02:	dce8      	bgt.n	87dd6 <_svfprintf_r+0x1122>
   87e04:	4619      	mov	r1, r3
   87e06:	1c4b      	adds	r3, r1, #1
   87e08:	4914      	ldr	r1, [pc, #80]	; (87e5c <_svfprintf_r+0x11a8>)
   87e0a:	4428      	add	r0, r5
   87e0c:	2b07      	cmp	r3, #7
   87e0e:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   87e12:	e9c2 1500 	strd	r1, r5, [r2]
   87e16:	f300 8215 	bgt.w	88244 <_svfprintf_r+0x1590>
   87e1a:	783b      	ldrb	r3, [r7, #0]
   87e1c:	3208      	adds	r2, #8
   87e1e:	441e      	add	r6, r3
   87e20:	e7c2      	b.n	87da8 <_svfprintf_r+0x10f4>
   87e22:	9b07      	ldr	r3, [sp, #28]
   87e24:	06da      	lsls	r2, r3, #27
   87e26:	f140 8084 	bpl.w	87f32 <_svfprintf_r+0x127e>
   87e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87e2c:	2500      	movs	r5, #0
   87e2e:	f853 4b04 	ldr.w	r4, [r3], #4
   87e32:	930e      	str	r3, [sp, #56]	; 0x38
   87e34:	e6fe      	b.n	87c34 <_svfprintf_r+0xf80>
   87e36:	4651      	mov	r1, sl
   87e38:	4648      	mov	r0, r9
   87e3a:	aa2a      	add	r2, sp, #168	; 0xa8
   87e3c:	f004 fb7e 	bl	8c53c <__ssprint_r>
   87e40:	2800      	cmp	r0, #0
   87e42:	f47f ab7f 	bne.w	87544 <_svfprintf_r+0x890>
   87e46:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87e48:	aa2d      	add	r2, sp, #180	; 0xb4
   87e4a:	e792      	b.n	87d72 <_svfprintf_r+0x10be>
   87e4c:	66666667 	.word	0x66666667
   87e50:	0008d4f4 	.word	0x0008d4f4
   87e54:	0008d508 	.word	0x0008d508
   87e58:	0008d51c 	.word	0x0008d51c
   87e5c:	0008d538 	.word	0x0008d538
   87e60:	2200      	movs	r2, #0
   87e62:	9b08      	ldr	r3, [sp, #32]
   87e64:	f8cd b01c 	str.w	fp, [sp, #28]
   87e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   87e6c:	960c      	str	r6, [sp, #48]	; 0x30
   87e6e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   87e72:	4693      	mov	fp, r2
   87e74:	46ca      	mov	sl, r9
   87e76:	461e      	mov	r6, r3
   87e78:	46c1      	mov	r9, r8
   87e7a:	af56      	add	r7, sp, #344	; 0x158
   87e7c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   87e80:	e00b      	b.n	87e9a <_svfprintf_r+0x11e6>
   87e82:	220a      	movs	r2, #10
   87e84:	2300      	movs	r3, #0
   87e86:	4620      	mov	r0, r4
   87e88:	4629      	mov	r1, r5
   87e8a:	f7fe fc77 	bl	8677c <__aeabi_uldivmod>
   87e8e:	2d00      	cmp	r5, #0
   87e90:	bf08      	it	eq
   87e92:	2c0a      	cmpeq	r4, #10
   87e94:	d31b      	bcc.n	87ece <_svfprintf_r+0x121a>
   87e96:	4604      	mov	r4, r0
   87e98:	460d      	mov	r5, r1
   87e9a:	220a      	movs	r2, #10
   87e9c:	2300      	movs	r3, #0
   87e9e:	4620      	mov	r0, r4
   87ea0:	4629      	mov	r1, r5
   87ea2:	f7fe fc6b 	bl	8677c <__aeabi_uldivmod>
   87ea6:	3230      	adds	r2, #48	; 0x30
   87ea8:	f807 2c01 	strb.w	r2, [r7, #-1]
   87eac:	f10b 0b01 	add.w	fp, fp, #1
   87eb0:	3f01      	subs	r7, #1
   87eb2:	2e00      	cmp	r6, #0
   87eb4:	d0e5      	beq.n	87e82 <_svfprintf_r+0x11ce>
   87eb6:	f898 3000 	ldrb.w	r3, [r8]
   87eba:	459b      	cmp	fp, r3
   87ebc:	d1e1      	bne.n	87e82 <_svfprintf_r+0x11ce>
   87ebe:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   87ec2:	d0de      	beq.n	87e82 <_svfprintf_r+0x11ce>
   87ec4:	2d00      	cmp	r5, #0
   87ec6:	bf08      	it	eq
   87ec8:	2c0a      	cmpeq	r4, #10
   87eca:	f080 8128 	bcs.w	8811e <_svfprintf_r+0x146a>
   87ece:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   87ed2:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   87ed6:	46c8      	mov	r8, r9
   87ed8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   87eda:	46d1      	mov	r9, sl
   87edc:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87ee0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   87ee4:	f7ff bb9f 	b.w	87626 <_svfprintf_r+0x972>
   87ee8:	4651      	mov	r1, sl
   87eea:	4648      	mov	r0, r9
   87eec:	aa2a      	add	r2, sp, #168	; 0xa8
   87eee:	931e      	str	r3, [sp, #120]	; 0x78
   87ef0:	f004 fb24 	bl	8c53c <__ssprint_r>
   87ef4:	2800      	cmp	r0, #0
   87ef6:	f47f ab25 	bne.w	87544 <_svfprintf_r+0x890>
   87efa:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87efe:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87f00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87f02:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f06:	f7ff b84a 	b.w	86f9e <_svfprintf_r+0x2ea>
   87f0a:	2001      	movs	r0, #1
   87f0c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87f0e:	49c5      	ldr	r1, [pc, #788]	; (88224 <_svfprintf_r+0x1570>)
   87f10:	4403      	add	r3, r0
   87f12:	4404      	add	r4, r0
   87f14:	2b07      	cmp	r3, #7
   87f16:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87f1a:	e9c8 1000 	strd	r1, r0, [r8]
   87f1e:	f73f abdf 	bgt.w	876e0 <_svfprintf_r+0xa2c>
   87f22:	f108 0808 	add.w	r8, r8, #8
   87f26:	f7ff bbe7 	b.w	876f8 <_svfprintf_r+0xa44>
   87f2a:	46d1      	mov	r9, sl
   87f2c:	46b3      	mov	fp, r6
   87f2e:	f7ff bb0a 	b.w	87546 <_svfprintf_r+0x892>
   87f32:	9b07      	ldr	r3, [sp, #28]
   87f34:	065b      	lsls	r3, r3, #25
   87f36:	f140 80cb 	bpl.w	880d0 <_svfprintf_r+0x141c>
   87f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87f3c:	2500      	movs	r5, #0
   87f3e:	f853 4b04 	ldr.w	r4, [r3], #4
   87f42:	930e      	str	r3, [sp, #56]	; 0x38
   87f44:	b2a4      	uxth	r4, r4
   87f46:	e675      	b.n	87c34 <_svfprintf_r+0xf80>
   87f48:	4651      	mov	r1, sl
   87f4a:	4648      	mov	r0, r9
   87f4c:	aa2a      	add	r2, sp, #168	; 0xa8
   87f4e:	f004 faf5 	bl	8c53c <__ssprint_r>
   87f52:	2800      	cmp	r0, #0
   87f54:	f47f aaf6 	bne.w	87544 <_svfprintf_r+0x890>
   87f58:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87f5a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f5e:	f7ff ba3a 	b.w	873d6 <_svfprintf_r+0x722>
   87f62:	46d1      	mov	r9, sl
   87f64:	46da      	mov	sl, fp
   87f66:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   87f6a:	3501      	adds	r5, #1
   87f6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87f6e:	4434      	add	r4, r6
   87f70:	2d07      	cmp	r5, #7
   87f72:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87f76:	e9c8 3600 	strd	r3, r6, [r8]
   87f7a:	f77f ab24 	ble.w	875c6 <_svfprintf_r+0x912>
   87f7e:	4651      	mov	r1, sl
   87f80:	4648      	mov	r0, r9
   87f82:	aa2a      	add	r2, sp, #168	; 0xa8
   87f84:	f004 fada 	bl	8c53c <__ssprint_r>
   87f88:	2800      	cmp	r0, #0
   87f8a:	f47f aadb 	bne.w	87544 <_svfprintf_r+0x890>
   87f8e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87f92:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f96:	f7ff bb18 	b.w	875ca <_svfprintf_r+0x916>
   87f9a:	4aa3      	ldr	r2, [pc, #652]	; (88228 <_svfprintf_r+0x1574>)
   87f9c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87f9e:	920f      	str	r2, [sp, #60]	; 0x3c
   87fa0:	3301      	adds	r3, #1
   87fa2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87fa4:	442c      	add	r4, r5
   87fa6:	2b07      	cmp	r3, #7
   87fa8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87fac:	e9c8 2500 	strd	r2, r5, [r8]
   87fb0:	f77f a82d 	ble.w	8700e <_svfprintf_r+0x35a>
   87fb4:	f7ff bbc2 	b.w	8773c <_svfprintf_r+0xa88>
   87fb8:	4651      	mov	r1, sl
   87fba:	4648      	mov	r0, r9
   87fbc:	aa2a      	add	r2, sp, #168	; 0xa8
   87fbe:	f004 fabd 	bl	8c53c <__ssprint_r>
   87fc2:	2800      	cmp	r0, #0
   87fc4:	f47f aabe 	bne.w	87544 <_svfprintf_r+0x890>
   87fc8:	783b      	ldrb	r3, [r7, #0]
   87fca:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87fcc:	aa2d      	add	r2, sp, #180	; 0xb4
   87fce:	e6e4      	b.n	87d9a <_svfprintf_r+0x10e6>
   87fd0:	4651      	mov	r1, sl
   87fd2:	4648      	mov	r0, r9
   87fd4:	aa2a      	add	r2, sp, #168	; 0xa8
   87fd6:	f004 fab1 	bl	8c53c <__ssprint_r>
   87fda:	2800      	cmp	r0, #0
   87fdc:	f47f aab2 	bne.w	87544 <_svfprintf_r+0x890>
   87fe0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87fe2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87fe6:	f7fe bffd 	b.w	86fe4 <_svfprintf_r+0x330>
   87fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87fec:	990a      	ldr	r1, [sp, #40]	; 0x28
   87fee:	f853 2b04 	ldr.w	r2, [r3], #4
   87ff2:	465f      	mov	r7, fp
   87ff4:	6011      	str	r1, [r2, #0]
   87ff6:	930e      	str	r3, [sp, #56]	; 0x38
   87ff8:	f7ff b82a 	b.w	87050 <_svfprintf_r+0x39c>
   87ffc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87ffe:	9917      	ldr	r1, [sp, #92]	; 0x5c
   88000:	3301      	adds	r3, #1
   88002:	9818      	ldr	r0, [sp, #96]	; 0x60
   88004:	440c      	add	r4, r1
   88006:	2b07      	cmp	r3, #7
   88008:	e9c8 0100 	strd	r0, r1, [r8]
   8800c:	942c      	str	r4, [sp, #176]	; 0xb0
   8800e:	932b      	str	r3, [sp, #172]	; 0xac
   88010:	f300 80ac 	bgt.w	8816c <_svfprintf_r+0x14b8>
   88014:	f108 0808 	add.w	r8, r8, #8
   88018:	2a00      	cmp	r2, #0
   8801a:	f6bf ab85 	bge.w	87728 <_svfprintf_r+0xa74>
   8801e:	4255      	negs	r5, r2
   88020:	3210      	adds	r2, #16
   88022:	f280 83d3 	bge.w	887cc <_svfprintf_r+0x1b18>
   88026:	4651      	mov	r1, sl
   88028:	4a7f      	ldr	r2, [pc, #508]	; (88228 <_svfprintf_r+0x1574>)
   8802a:	46ca      	mov	sl, r9
   8802c:	9709      	str	r7, [sp, #36]	; 0x24
   8802e:	2610      	movs	r6, #16
   88030:	4617      	mov	r7, r2
   88032:	4689      	mov	r9, r1
   88034:	920f      	str	r2, [sp, #60]	; 0x3c
   88036:	e005      	b.n	88044 <_svfprintf_r+0x1390>
   88038:	f108 0808 	add.w	r8, r8, #8
   8803c:	3d10      	subs	r5, #16
   8803e:	2d10      	cmp	r5, #16
   88040:	f340 82aa 	ble.w	88598 <_svfprintf_r+0x18e4>
   88044:	3301      	adds	r3, #1
   88046:	3410      	adds	r4, #16
   88048:	2b07      	cmp	r3, #7
   8804a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8804e:	e9c8 7600 	strd	r7, r6, [r8]
   88052:	ddf1      	ble.n	88038 <_svfprintf_r+0x1384>
   88054:	4649      	mov	r1, r9
   88056:	4650      	mov	r0, sl
   88058:	aa2a      	add	r2, sp, #168	; 0xa8
   8805a:	f004 fa6f 	bl	8c53c <__ssprint_r>
   8805e:	2800      	cmp	r0, #0
   88060:	f040 825f 	bne.w	88522 <_svfprintf_r+0x186e>
   88064:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88068:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8806c:	e7e6      	b.n	8803c <_svfprintf_r+0x1388>
   8806e:	4638      	mov	r0, r7
   88070:	f004 fa02 	bl	8c478 <strlen>
   88074:	462b      	mov	r3, r5
   88076:	4602      	mov	r2, r0
   88078:	9509      	str	r5, [sp, #36]	; 0x24
   8807a:	f7ff b894 	b.w	871a6 <_svfprintf_r+0x4f2>
   8807e:	9b07      	ldr	r3, [sp, #28]
   88080:	2500      	movs	r5, #0
   88082:	f413 7f00 	tst.w	r3, #512	; 0x200
   88086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88088:	f853 4b04 	ldr.w	r4, [r3], #4
   8808c:	930e      	str	r3, [sp, #56]	; 0x38
   8808e:	bf18      	it	ne
   88090:	b2e4      	uxtbne	r4, r4
   88092:	f7fe bf1b 	b.w	86ecc <_svfprintf_r+0x218>
   88096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   88098:	9b08      	ldr	r3, [sp, #32]
   8809a:	f852 4b04 	ldr.w	r4, [r2], #4
   8809e:	f413 7f00 	tst.w	r3, #512	; 0x200
   880a2:	f04f 0500 	mov.w	r5, #0
   880a6:	f04f 0301 	mov.w	r3, #1
   880aa:	920e      	str	r2, [sp, #56]	; 0x38
   880ac:	bf18      	it	ne
   880ae:	b2e4      	uxtbne	r4, r4
   880b0:	f7fe bf11 	b.w	86ed6 <_svfprintf_r+0x222>
   880b4:	9b07      	ldr	r3, [sp, #28]
   880b6:	f413 7f00 	tst.w	r3, #512	; 0x200
   880ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   880bc:	f853 4b04 	ldr.w	r4, [r3], #4
   880c0:	bf18      	it	ne
   880c2:	b264      	sxtbne	r4, r4
   880c4:	17e5      	asrs	r5, r4, #31
   880c6:	930e      	str	r3, [sp, #56]	; 0x38
   880c8:	4622      	mov	r2, r4
   880ca:	462b      	mov	r3, r5
   880cc:	f7fe bed4 	b.w	86e78 <_svfprintf_r+0x1c4>
   880d0:	9b07      	ldr	r3, [sp, #28]
   880d2:	2500      	movs	r5, #0
   880d4:	f413 7f00 	tst.w	r3, #512	; 0x200
   880d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   880da:	f853 4b04 	ldr.w	r4, [r3], #4
   880de:	930e      	str	r3, [sp, #56]	; 0x38
   880e0:	bf18      	it	ne
   880e2:	b2e4      	uxtbne	r4, r4
   880e4:	e5a6      	b.n	87c34 <_svfprintf_r+0xf80>
   880e6:	4b50      	ldr	r3, [pc, #320]	; (88228 <_svfprintf_r+0x1574>)
   880e8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   880ea:	930f      	str	r3, [sp, #60]	; 0x3c
   880ec:	f7ff ba15 	b.w	8751a <_svfprintf_r+0x866>
   880f0:	232d      	movs	r3, #45	; 0x2d
   880f2:	461a      	mov	r2, r3
   880f4:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   880f8:	f7fe bfee 	b.w	870d8 <_svfprintf_r+0x424>
   880fc:	464a      	mov	r2, r9
   880fe:	46d1      	mov	r9, sl
   88100:	4692      	mov	sl, r2
   88102:	9f09      	ldr	r7, [sp, #36]	; 0x24
   88104:	3301      	adds	r3, #1
   88106:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   88108:	442c      	add	r4, r5
   8810a:	2b07      	cmp	r3, #7
   8810c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88110:	e9c8 2500 	strd	r2, r5, [r8]
   88114:	dc3b      	bgt.n	8818e <_svfprintf_r+0x14da>
   88116:	f108 0808 	add.w	r8, r8, #8
   8811a:	f7ff bb8c 	b.w	87836 <_svfprintf_r+0xb82>
   8811e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   88120:	991c      	ldr	r1, [sp, #112]	; 0x70
   88122:	1aff      	subs	r7, r7, r3
   88124:	461a      	mov	r2, r3
   88126:	4638      	mov	r0, r7
   88128:	f004 f9d4 	bl	8c4d4 <strncpy>
   8812c:	f898 3001 	ldrb.w	r3, [r8, #1]
   88130:	b10b      	cbz	r3, 88136 <_svfprintf_r+0x1482>
   88132:	f108 0801 	add.w	r8, r8, #1
   88136:	220a      	movs	r2, #10
   88138:	2300      	movs	r3, #0
   8813a:	4620      	mov	r0, r4
   8813c:	4629      	mov	r1, r5
   8813e:	f7fe fb1d 	bl	8677c <__aeabi_uldivmod>
   88142:	f04f 0b00 	mov.w	fp, #0
   88146:	e6a6      	b.n	87e96 <_svfprintf_r+0x11e2>
   88148:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8814a:	18bd      	adds	r5, r7, r2
   8814c:	1bad      	subs	r5, r5, r6
   8814e:	1ad3      	subs	r3, r2, r3
   88150:	429d      	cmp	r5, r3
   88152:	bfa8      	it	ge
   88154:	461d      	movge	r5, r3
   88156:	f7ff bba0 	b.w	8789a <_svfprintf_r+0xbe6>
   8815a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8815c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8815e:	f853 2b04 	ldr.w	r2, [r3], #4
   88162:	465f      	mov	r7, fp
   88164:	8011      	strh	r1, [r2, #0]
   88166:	930e      	str	r3, [sp, #56]	; 0x38
   88168:	f7fe bf72 	b.w	87050 <_svfprintf_r+0x39c>
   8816c:	4651      	mov	r1, sl
   8816e:	4648      	mov	r0, r9
   88170:	aa2a      	add	r2, sp, #168	; 0xa8
   88172:	f004 f9e3 	bl	8c53c <__ssprint_r>
   88176:	2800      	cmp	r0, #0
   88178:	f47f a9e4 	bne.w	87544 <_svfprintf_r+0x890>
   8817c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   88180:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88182:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88186:	e747      	b.n	88018 <_svfprintf_r+0x1364>
   88188:	2306      	movs	r3, #6
   8818a:	9309      	str	r3, [sp, #36]	; 0x24
   8818c:	e482      	b.n	87a94 <_svfprintf_r+0xde0>
   8818e:	4651      	mov	r1, sl
   88190:	4648      	mov	r0, r9
   88192:	aa2a      	add	r2, sp, #168	; 0xa8
   88194:	f004 f9d2 	bl	8c53c <__ssprint_r>
   88198:	2800      	cmp	r0, #0
   8819a:	f47f a9d3 	bne.w	87544 <_svfprintf_r+0x890>
   8819e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   881a0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   881a4:	f7ff bb47 	b.w	87836 <_svfprintf_r+0xb82>
   881a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   881aa:	971a      	str	r7, [sp, #104]	; 0x68
   881ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   881ae:	4690      	mov	r8, r2
   881b0:	18fb      	adds	r3, r7, r3
   881b2:	429e      	cmp	r6, r3
   881b4:	4632      	mov	r2, r6
   881b6:	bf28      	it	cs
   881b8:	461a      	movcs	r2, r3
   881ba:	4604      	mov	r4, r0
   881bc:	4616      	mov	r6, r2
   881be:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   881c2:	f7ff bb3f 	b.w	87844 <_svfprintf_r+0xb90>
   881c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   881c8:	1cd8      	adds	r0, r3, #3
   881ca:	9310      	str	r3, [sp, #64]	; 0x40
   881cc:	db02      	blt.n	881d4 <_svfprintf_r+0x1520>
   881ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   881d0:	4293      	cmp	r3, r2
   881d2:	dd04      	ble.n	881de <_svfprintf_r+0x152a>
   881d4:	3e02      	subs	r6, #2
   881d6:	f026 0320 	bic.w	r3, r6, #32
   881da:	9308      	str	r3, [sp, #32]
   881dc:	e49b      	b.n	87b16 <_svfprintf_r+0xe62>
   881de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   881e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   881e2:	428b      	cmp	r3, r1
   881e4:	f2c0 817a 	blt.w	884dc <_svfprintf_r+0x1828>
   881e8:	07ea      	lsls	r2, r5, #31
   881ea:	f140 8283 	bpl.w	886f4 <_svfprintf_r+0x1a40>
   881ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   881f0:	4413      	add	r3, r2
   881f2:	930c      	str	r3, [sp, #48]	; 0x30
   881f4:	056e      	lsls	r6, r5, #21
   881f6:	f140 8277 	bpl.w	886e8 <_svfprintf_r+0x1a34>
   881fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   881fc:	2b00      	cmp	r3, #0
   881fe:	f300 8210 	bgt.w	88622 <_svfprintf_r+0x196e>
   88202:	2667      	movs	r6, #103	; 0x67
   88204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88206:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8820a:	9308      	str	r3, [sp, #32]
   8820c:	2300      	movs	r3, #0
   8820e:	9312      	str	r3, [sp, #72]	; 0x48
   88210:	9316      	str	r3, [sp, #88]	; 0x58
   88212:	e4e4      	b.n	87bde <_svfprintf_r+0xf2a>
   88214:	222d      	movs	r2, #45	; 0x2d
   88216:	2300      	movs	r3, #0
   88218:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   8821c:	9309      	str	r3, [sp, #36]	; 0x24
   8821e:	f7fe bf70 	b.w	87102 <_svfprintf_r+0x44e>
   88222:	bf00      	nop
   88224:	0008d524 	.word	0x0008d524
   88228:	0008d538 	.word	0x0008d538
   8822c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8822e:	42a3      	cmp	r3, r4
   88230:	f4bf ac65 	bcs.w	87afe <_svfprintf_r+0xe4a>
   88234:	2130      	movs	r1, #48	; 0x30
   88236:	1c5a      	adds	r2, r3, #1
   88238:	9228      	str	r2, [sp, #160]	; 0xa0
   8823a:	7019      	strb	r1, [r3, #0]
   8823c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8823e:	429c      	cmp	r4, r3
   88240:	d8f9      	bhi.n	88236 <_svfprintf_r+0x1582>
   88242:	e45c      	b.n	87afe <_svfprintf_r+0xe4a>
   88244:	4651      	mov	r1, sl
   88246:	4648      	mov	r0, r9
   88248:	aa2a      	add	r2, sp, #168	; 0xa8
   8824a:	f004 f977 	bl	8c53c <__ssprint_r>
   8824e:	2800      	cmp	r0, #0
   88250:	f47f a978 	bne.w	87544 <_svfprintf_r+0x890>
   88254:	783b      	ldrb	r3, [r7, #0]
   88256:	982c      	ldr	r0, [sp, #176]	; 0xb0
   88258:	aa2d      	add	r2, sp, #180	; 0xb4
   8825a:	441e      	add	r6, r3
   8825c:	e5a4      	b.n	87da8 <_svfprintf_r+0x10f4>
   8825e:	4651      	mov	r1, sl
   88260:	4648      	mov	r0, r9
   88262:	aa2a      	add	r2, sp, #168	; 0xa8
   88264:	f004 f96a 	bl	8c53c <__ssprint_r>
   88268:	2800      	cmp	r0, #0
   8826a:	f47f a96b 	bne.w	87544 <_svfprintf_r+0x890>
   8826e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   88270:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88274:	f7ff bad7 	b.w	87826 <_svfprintf_r+0xb72>
   88278:	4651      	mov	r1, sl
   8827a:	4648      	mov	r0, r9
   8827c:	aa2a      	add	r2, sp, #168	; 0xa8
   8827e:	f004 f95d 	bl	8c53c <__ssprint_r>
   88282:	2800      	cmp	r0, #0
   88284:	f47f a95e 	bne.w	87544 <_svfprintf_r+0x890>
   88288:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8828a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8828c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88290:	f7ff baee 	b.w	87870 <_svfprintf_r+0xbbc>
   88294:	9c09      	ldr	r4, [sp, #36]	; 0x24
   88296:	a928      	add	r1, sp, #160	; 0xa0
   88298:	e9cd 0400 	strd	r0, r4, [sp]
   8829c:	9104      	str	r1, [sp, #16]
   8829e:	a825      	add	r0, sp, #148	; 0x94
   882a0:	a924      	add	r1, sp, #144	; 0x90
   882a2:	e9cd 1002 	strd	r1, r0, [sp, #8]
   882a6:	4648      	mov	r0, r9
   882a8:	f001 faca 	bl	89840 <_dtoa_r>
   882ac:	2d47      	cmp	r5, #71	; 0x47
   882ae:	4607      	mov	r7, r0
   882b0:	d119      	bne.n	882e6 <_svfprintf_r+0x1632>
   882b2:	9d07      	ldr	r5, [sp, #28]
   882b4:	462b      	mov	r3, r5
   882b6:	07db      	lsls	r3, r3, #31
   882b8:	f100 812a 	bmi.w	88510 <_svfprintf_r+0x185c>
   882bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   882be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   882c0:	9207      	str	r2, [sp, #28]
   882c2:	2247      	movs	r2, #71	; 0x47
   882c4:	9208      	str	r2, [sp, #32]
   882c6:	e41a      	b.n	87afe <_svfprintf_r+0xe4a>
   882c8:	2003      	movs	r0, #3
   882ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
   882cc:	a928      	add	r1, sp, #160	; 0xa0
   882ce:	e9cd 0400 	strd	r0, r4, [sp]
   882d2:	9104      	str	r1, [sp, #16]
   882d4:	a825      	add	r0, sp, #148	; 0x94
   882d6:	a924      	add	r1, sp, #144	; 0x90
   882d8:	e9cd 1002 	strd	r1, r0, [sp, #8]
   882dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   882de:	4648      	mov	r0, r9
   882e0:	f001 faae 	bl	89840 <_dtoa_r>
   882e4:	4607      	mov	r7, r0
   882e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   882e8:	2d46      	cmp	r5, #70	; 0x46
   882ea:	eb07 0403 	add.w	r4, r7, r3
   882ee:	f47f abf9 	bne.w	87ae4 <_svfprintf_r+0xe30>
   882f2:	783b      	ldrb	r3, [r7, #0]
   882f4:	2b30      	cmp	r3, #48	; 0x30
   882f6:	f000 821c 	beq.w	88732 <_svfprintf_r+0x1a7e>
   882fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   882fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   882fe:	9d07      	ldr	r5, [sp, #28]
   88300:	441c      	add	r4, r3
   88302:	9207      	str	r2, [sp, #28]
   88304:	f7ff bbf1 	b.w	87aea <_svfprintf_r+0xe36>
   88308:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8830c:	f7ff b9c3 	b.w	87696 <_svfprintf_r+0x9e2>
   88310:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88312:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88316:	9308      	str	r3, [sp, #32]
   88318:	930c      	str	r3, [sp, #48]	; 0x30
   8831a:	9009      	str	r0, [sp, #36]	; 0x24
   8831c:	940e      	str	r4, [sp, #56]	; 0x38
   8831e:	9012      	str	r0, [sp, #72]	; 0x48
   88320:	9016      	str	r0, [sp, #88]	; 0x58
   88322:	9010      	str	r0, [sp, #64]	; 0x40
   88324:	f7fe beea 	b.w	870fc <_svfprintf_r+0x448>
   88328:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8832a:	2a00      	cmp	r2, #0
   8832c:	9210      	str	r2, [sp, #64]	; 0x40
   8832e:	f340 821b 	ble.w	88768 <_svfprintf_r+0x1ab4>
   88332:	9909      	ldr	r1, [sp, #36]	; 0x24
   88334:	f005 0301 	and.w	r3, r5, #1
   88338:	430b      	orrs	r3, r1
   8833a:	f040 819a 	bne.w	88672 <_svfprintf_r+0x19be>
   8833e:	2666      	movs	r6, #102	; 0x66
   88340:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88342:	930c      	str	r3, [sp, #48]	; 0x30
   88344:	056a      	lsls	r2, r5, #21
   88346:	f100 816d 	bmi.w	88624 <_svfprintf_r+0x1970>
   8834a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8834c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88350:	9308      	str	r3, [sp, #32]
   88352:	e75b      	b.n	8820c <_svfprintf_r+0x1558>
   88354:	4651      	mov	r1, sl
   88356:	4648      	mov	r0, r9
   88358:	aa2a      	add	r2, sp, #168	; 0xa8
   8835a:	f004 f8ef 	bl	8c53c <__ssprint_r>
   8835e:	2800      	cmp	r0, #0
   88360:	f47f a8f0 	bne.w	87544 <_svfprintf_r+0x890>
   88364:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88366:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88368:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8836a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8836e:	1ad3      	subs	r3, r2, r3
   88370:	f7ff ba93 	b.w	8789a <_svfprintf_r+0xbe6>
   88374:	2330      	movs	r3, #48	; 0x30
   88376:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8837a:	2358      	movs	r3, #88	; 0x58
   8837c:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   88380:	9b07      	ldr	r3, [sp, #28]
   88382:	f043 0402 	orr.w	r4, r3, #2
   88386:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88388:	2b63      	cmp	r3, #99	; 0x63
   8838a:	f300 80f2 	bgt.w	88572 <_svfprintf_r+0x18be>
   8838e:	2300      	movs	r3, #0
   88390:	af3d      	add	r7, sp, #244	; 0xf4
   88392:	930d      	str	r3, [sp, #52]	; 0x34
   88394:	9b07      	ldr	r3, [sp, #28]
   88396:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   8839a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   8839e:	9312      	str	r3, [sp, #72]	; 0x48
   883a0:	4613      	mov	r3, r2
   883a2:	2b00      	cmp	r3, #0
   883a4:	f026 0520 	bic.w	r5, r6, #32
   883a8:	9407      	str	r4, [sp, #28]
   883aa:	f2c0 808d 	blt.w	884c8 <_svfprintf_r+0x1814>
   883ae:	930f      	str	r3, [sp, #60]	; 0x3c
   883b0:	2300      	movs	r3, #0
   883b2:	9508      	str	r5, [sp, #32]
   883b4:	910c      	str	r1, [sp, #48]	; 0x30
   883b6:	931e      	str	r3, [sp, #120]	; 0x78
   883b8:	2e61      	cmp	r6, #97	; 0x61
   883ba:	f000 817d 	beq.w	886b8 <_svfprintf_r+0x1a04>
   883be:	2e41      	cmp	r6, #65	; 0x41
   883c0:	f47f ab77 	bne.w	87ab2 <_svfprintf_r+0xdfe>
   883c4:	aa24      	add	r2, sp, #144	; 0x90
   883c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   883c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   883ca:	f003 ffc5 	bl	8c358 <frexp>
   883ce:	2200      	movs	r2, #0
   883d0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   883d4:	f004 fd4c 	bl	8ce70 <__aeabi_dmul>
   883d8:	4604      	mov	r4, r0
   883da:	460d      	mov	r5, r1
   883dc:	2200      	movs	r2, #0
   883de:	2300      	movs	r3, #0
   883e0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   883e4:	f004 ffac 	bl	8d340 <__aeabi_dcmpeq>
   883e8:	b108      	cbz	r0, 883ee <_svfprintf_r+0x173a>
   883ea:	2301      	movs	r3, #1
   883ec:	9324      	str	r3, [sp, #144]	; 0x90
   883ee:	4bae      	ldr	r3, [pc, #696]	; (886a8 <_svfprintf_r+0x19f4>)
   883f0:	930c      	str	r3, [sp, #48]	; 0x30
   883f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   883f4:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   883f8:	3b01      	subs	r3, #1
   883fa:	9613      	str	r6, [sp, #76]	; 0x4c
   883fc:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   88400:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   88404:	9721      	str	r7, [sp, #132]	; 0x84
   88406:	46ba      	mov	sl, r7
   88408:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   8840c:	4699      	mov	r9, r3
   8840e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   88412:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   88416:	e006      	b.n	88426 <_svfprintf_r+0x1772>
   88418:	2200      	movs	r2, #0
   8841a:	2300      	movs	r3, #0
   8841c:	f004 ff90 	bl	8d340 <__aeabi_dcmpeq>
   88420:	f109 39ff 	add.w	r9, r9, #4294967295
   88424:	b9e8      	cbnz	r0, 88462 <_svfprintf_r+0x17ae>
   88426:	2200      	movs	r2, #0
   88428:	4ba0      	ldr	r3, [pc, #640]	; (886ac <_svfprintf_r+0x19f8>)
   8842a:	4630      	mov	r0, r6
   8842c:	4639      	mov	r1, r7
   8842e:	f004 fd1f 	bl	8ce70 <__aeabi_dmul>
   88432:	460d      	mov	r5, r1
   88434:	4604      	mov	r4, r0
   88436:	f004 ffcb 	bl	8d3d0 <__aeabi_d2iz>
   8843a:	4680      	mov	r8, r0
   8843c:	f004 fcae 	bl	8cd9c <__aeabi_i2d>
   88440:	460b      	mov	r3, r1
   88442:	4602      	mov	r2, r0
   88444:	4629      	mov	r1, r5
   88446:	4620      	mov	r0, r4
   88448:	f004 fb5a 	bl	8cb00 <__aeabi_dsub>
   8844c:	f81b 3008 	ldrb.w	r3, [fp, r8]
   88450:	f1b9 3fff 	cmp.w	r9, #4294967295
   88454:	4655      	mov	r5, sl
   88456:	4606      	mov	r6, r0
   88458:	460f      	mov	r7, r1
   8845a:	464c      	mov	r4, r9
   8845c:	f80a 3b01 	strb.w	r3, [sl], #1
   88460:	d1da      	bne.n	88418 <_svfprintf_r+0x1764>
   88462:	4630      	mov	r0, r6
   88464:	4639      	mov	r1, r7
   88466:	2200      	movs	r2, #0
   88468:	4b91      	ldr	r3, [pc, #580]	; (886b0 <_svfprintf_r+0x19fc>)
   8846a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   8846e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   88470:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   88474:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   88478:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8847c:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   88480:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   88484:	9f21      	ldr	r7, [sp, #132]	; 0x84
   88486:	f004 ff83 	bl	8d390 <__aeabi_dcmpgt>
   8848a:	2800      	cmp	r0, #0
   8848c:	d155      	bne.n	8853a <_svfprintf_r+0x1886>
   8848e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88492:	2200      	movs	r2, #0
   88494:	4b86      	ldr	r3, [pc, #536]	; (886b0 <_svfprintf_r+0x19fc>)
   88496:	f004 ff53 	bl	8d340 <__aeabi_dcmpeq>
   8849a:	b110      	cbz	r0, 884a2 <_svfprintf_r+0x17ee>
   8849c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8849e:	07db      	lsls	r3, r3, #31
   884a0:	d44b      	bmi.n	8853a <_svfprintf_r+0x1886>
   884a2:	2c00      	cmp	r4, #0
   884a4:	db08      	blt.n	884b8 <_svfprintf_r+0x1804>
   884a6:	2230      	movs	r2, #48	; 0x30
   884a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   884aa:	1c63      	adds	r3, r4, #1
   884ac:	440b      	add	r3, r1
   884ae:	f801 2b01 	strb.w	r2, [r1], #1
   884b2:	428b      	cmp	r3, r1
   884b4:	d1fb      	bne.n	884ae <_svfprintf_r+0x17fa>
   884b6:	910f      	str	r1, [sp, #60]	; 0x3c
   884b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   884ba:	9d07      	ldr	r5, [sp, #28]
   884bc:	1bdb      	subs	r3, r3, r7
   884be:	9313      	str	r3, [sp, #76]	; 0x4c
   884c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   884c2:	9307      	str	r3, [sp, #28]
   884c4:	f7ff bb1d 	b.w	87b02 <_svfprintf_r+0xe4e>
   884c8:	9508      	str	r5, [sp, #32]
   884ca:	232d      	movs	r3, #45	; 0x2d
   884cc:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   884d0:	931e      	str	r3, [sp, #120]	; 0x78
   884d2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   884d6:	910c      	str	r1, [sp, #48]	; 0x30
   884d8:	930f      	str	r3, [sp, #60]	; 0x3c
   884da:	e76d      	b.n	883b8 <_svfprintf_r+0x1704>
   884dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   884de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   884e0:	189a      	adds	r2, r3, r2
   884e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   884e4:	920c      	str	r2, [sp, #48]	; 0x30
   884e6:	2b00      	cmp	r3, #0
   884e8:	f340 811a 	ble.w	88720 <_svfprintf_r+0x1a6c>
   884ec:	2667      	movs	r6, #103	; 0x67
   884ee:	e729      	b.n	88344 <_svfprintf_r+0x1690>
   884f0:	2300      	movs	r3, #0
   884f2:	9309      	str	r3, [sp, #36]	; 0x24
   884f4:	f7fe bc2b 	b.w	86d4e <_svfprintf_r+0x9a>
   884f8:	4648      	mov	r0, r9
   884fa:	4651      	mov	r1, sl
   884fc:	aa2a      	add	r2, sp, #168	; 0xa8
   884fe:	f004 f81d 	bl	8c53c <__ssprint_r>
   88502:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88506:	f7fe bdae 	b.w	87066 <_svfprintf_r+0x3b2>
   8850a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8850c:	f7ff b95f 	b.w	877ce <_svfprintf_r+0xb1a>
   88510:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88512:	9d07      	ldr	r5, [sp, #28]
   88514:	18fc      	adds	r4, r7, r3
   88516:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88518:	9307      	str	r3, [sp, #28]
   8851a:	2347      	movs	r3, #71	; 0x47
   8851c:	9308      	str	r3, [sp, #32]
   8851e:	f7ff bae4 	b.w	87aea <_svfprintf_r+0xe36>
   88522:	46cb      	mov	fp, r9
   88524:	46d1      	mov	r9, sl
   88526:	f7ff b80e 	b.w	87546 <_svfprintf_r+0x892>
   8852a:	46d1      	mov	r9, sl
   8852c:	f7ff b80b 	b.w	87546 <_svfprintf_r+0x892>
   88530:	4b60      	ldr	r3, [pc, #384]	; (886b4 <_svfprintf_r+0x1a00>)
   88532:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88534:	930f      	str	r3, [sp, #60]	; 0x3c
   88536:	f7fe bfb7 	b.w	874a8 <_svfprintf_r+0x7f4>
   8853a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8853c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8853e:	9528      	str	r5, [sp, #160]	; 0xa0
   88540:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88544:	7bc9      	ldrb	r1, [r1, #15]
   88546:	428a      	cmp	r2, r1
   88548:	f040 812a 	bne.w	887a0 <_svfprintf_r+0x1aec>
   8854c:	2030      	movs	r0, #48	; 0x30
   8854e:	f803 0c01 	strb.w	r0, [r3, #-1]
   88552:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88554:	1e5a      	subs	r2, r3, #1
   88556:	9228      	str	r2, [sp, #160]	; 0xa0
   88558:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   8855c:	4291      	cmp	r1, r2
   8855e:	d0f6      	beq.n	8854e <_svfprintf_r+0x189a>
   88560:	2a39      	cmp	r2, #57	; 0x39
   88562:	bf0b      	itete	eq
   88564:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   88566:	3201      	addne	r2, #1
   88568:	7a92      	ldrbeq	r2, [r2, #10]
   8856a:	b2d2      	uxtbne	r2, r2
   8856c:	f803 2c01 	strb.w	r2, [r3, #-1]
   88570:	e7a2      	b.n	884b8 <_svfprintf_r+0x1804>
   88572:	4648      	mov	r0, r9
   88574:	1c59      	adds	r1, r3, #1
   88576:	f002 fe09 	bl	8b18c <_malloc_r>
   8857a:	4607      	mov	r7, r0
   8857c:	2800      	cmp	r0, #0
   8857e:	f000 811d 	beq.w	887bc <_svfprintf_r+0x1b08>
   88582:	900d      	str	r0, [sp, #52]	; 0x34
   88584:	e706      	b.n	88394 <_svfprintf_r+0x16e0>
   88586:	2330      	movs	r3, #48	; 0x30
   88588:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8858c:	2378      	movs	r3, #120	; 0x78
   8858e:	e6f5      	b.n	8837c <_svfprintf_r+0x16c8>
   88590:	9b07      	ldr	r3, [sp, #28]
   88592:	9308      	str	r3, [sp, #32]
   88594:	f7ff b894 	b.w	876c0 <_svfprintf_r+0xa0c>
   88598:	464a      	mov	r2, r9
   8859a:	46d1      	mov	r9, sl
   8859c:	4692      	mov	sl, r2
   8859e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   885a0:	3301      	adds	r3, #1
   885a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   885a4:	442c      	add	r4, r5
   885a6:	2b07      	cmp	r3, #7
   885a8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   885ac:	e9c8 2500 	strd	r2, r5, [r8]
   885b0:	f77f a8b8 	ble.w	87724 <_svfprintf_r+0xa70>
   885b4:	4651      	mov	r1, sl
   885b6:	4648      	mov	r0, r9
   885b8:	aa2a      	add	r2, sp, #168	; 0xa8
   885ba:	f003 ffbf 	bl	8c53c <__ssprint_r>
   885be:	2800      	cmp	r0, #0
   885c0:	f47e afc0 	bne.w	87544 <_svfprintf_r+0x890>
   885c4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   885c8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   885cc:	f7ff b8ac 	b.w	87728 <_svfprintf_r+0xa74>
   885d0:	2b00      	cmp	r3, #0
   885d2:	bf08      	it	eq
   885d4:	2301      	moveq	r3, #1
   885d6:	9309      	str	r3, [sp, #36]	; 0x24
   885d8:	9b07      	ldr	r3, [sp, #28]
   885da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   885de:	9312      	str	r3, [sp, #72]	; 0x48
   885e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   885e2:	2b00      	cmp	r3, #0
   885e4:	930c      	str	r3, [sp, #48]	; 0x30
   885e6:	f2c0 80bd 	blt.w	88764 <_svfprintf_r+0x1ab0>
   885ea:	2402      	movs	r4, #2
   885ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
   885ee:	a828      	add	r0, sp, #160	; 0xa0
   885f0:	aa25      	add	r2, sp, #148	; 0x94
   885f2:	ab24      	add	r3, sp, #144	; 0x90
   885f4:	e9cd 2003 	strd	r2, r0, [sp, #12]
   885f8:	e9cd 4500 	strd	r4, r5, [sp]
   885fc:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   88600:	9302      	str	r3, [sp, #8]
   88602:	4622      	mov	r2, r4
   88604:	462b      	mov	r3, r5
   88606:	4648      	mov	r0, r9
   88608:	911e      	str	r1, [sp, #120]	; 0x78
   8860a:	f001 f919 	bl	89840 <_dtoa_r>
   8860e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88610:	4607      	mov	r7, r0
   88612:	930f      	str	r3, [sp, #60]	; 0x3c
   88614:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88616:	940c      	str	r4, [sp, #48]	; 0x30
   88618:	930d      	str	r3, [sp, #52]	; 0x34
   8861a:	e64a      	b.n	882b2 <_svfprintf_r+0x15fe>
   8861c:	2300      	movs	r3, #0
   8861e:	930d      	str	r3, [sp, #52]	; 0x34
   88620:	e753      	b.n	884ca <_svfprintf_r+0x1816>
   88622:	2667      	movs	r6, #103	; 0x67
   88624:	991a      	ldr	r1, [sp, #104]	; 0x68
   88626:	780b      	ldrb	r3, [r1, #0]
   88628:	2bff      	cmp	r3, #255	; 0xff
   8862a:	f000 80de 	beq.w	887ea <_svfprintf_r+0x1b36>
   8862e:	2400      	movs	r4, #0
   88630:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88632:	4620      	mov	r0, r4
   88634:	e003      	b.n	8863e <_svfprintf_r+0x198a>
   88636:	3001      	adds	r0, #1
   88638:	3101      	adds	r1, #1
   8863a:	2bff      	cmp	r3, #255	; 0xff
   8863c:	d008      	beq.n	88650 <_svfprintf_r+0x199c>
   8863e:	4293      	cmp	r3, r2
   88640:	da06      	bge.n	88650 <_svfprintf_r+0x199c>
   88642:	1ad2      	subs	r2, r2, r3
   88644:	784b      	ldrb	r3, [r1, #1]
   88646:	2b00      	cmp	r3, #0
   88648:	d1f5      	bne.n	88636 <_svfprintf_r+0x1982>
   8864a:	780b      	ldrb	r3, [r1, #0]
   8864c:	3401      	adds	r4, #1
   8864e:	e7f4      	b.n	8863a <_svfprintf_r+0x1986>
   88650:	911a      	str	r1, [sp, #104]	; 0x68
   88652:	9210      	str	r2, [sp, #64]	; 0x40
   88654:	9016      	str	r0, [sp, #88]	; 0x58
   88656:	9412      	str	r4, [sp, #72]	; 0x48
   88658:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8865a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8865c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8865e:	4413      	add	r3, r2
   88660:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   88662:	fb02 1303 	mla	r3, r2, r3, r1
   88666:	930c      	str	r3, [sp, #48]	; 0x30
   88668:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8866c:	9308      	str	r3, [sp, #32]
   8866e:	f7ff bab6 	b.w	87bde <_svfprintf_r+0xf2a>
   88672:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88674:	2666      	movs	r6, #102	; 0x66
   88676:	18d3      	adds	r3, r2, r3
   88678:	4419      	add	r1, r3
   8867a:	910c      	str	r1, [sp, #48]	; 0x30
   8867c:	e662      	b.n	88344 <_svfprintf_r+0x1690>
   8867e:	f106 020f 	add.w	r2, r6, #15
   88682:	2101      	movs	r1, #1
   88684:	b2d2      	uxtb	r2, r2
   88686:	f7ff ba4f 	b.w	87b28 <_svfprintf_r+0xe74>
   8868a:	2900      	cmp	r1, #0
   8868c:	d167      	bne.n	8875e <_svfprintf_r+0x1aaa>
   8868e:	2230      	movs	r2, #48	; 0x30
   88690:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   88694:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   88698:	3330      	adds	r3, #48	; 0x30
   8869a:	f802 3b01 	strb.w	r3, [r2], #1
   8869e:	ab26      	add	r3, sp, #152	; 0x98
   886a0:	1ad3      	subs	r3, r2, r3
   886a2:	931b      	str	r3, [sp, #108]	; 0x6c
   886a4:	f7ff ba83 	b.w	87bae <_svfprintf_r+0xefa>
   886a8:	0008d508 	.word	0x0008d508
   886ac:	40300000 	.word	0x40300000
   886b0:	3fe00000 	.word	0x3fe00000
   886b4:	0008d538 	.word	0x0008d538
   886b8:	aa24      	add	r2, sp, #144	; 0x90
   886ba:	980c      	ldr	r0, [sp, #48]	; 0x30
   886bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   886be:	f003 fe4b 	bl	8c358 <frexp>
   886c2:	2200      	movs	r2, #0
   886c4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   886c8:	f004 fbd2 	bl	8ce70 <__aeabi_dmul>
   886cc:	4604      	mov	r4, r0
   886ce:	460d      	mov	r5, r1
   886d0:	2200      	movs	r2, #0
   886d2:	2300      	movs	r3, #0
   886d4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   886d8:	f004 fe32 	bl	8d340 <__aeabi_dcmpeq>
   886dc:	b108      	cbz	r0, 886e2 <_svfprintf_r+0x1a2e>
   886de:	2301      	movs	r3, #1
   886e0:	9324      	str	r3, [sp, #144]	; 0x90
   886e2:	4b44      	ldr	r3, [pc, #272]	; (887f4 <_svfprintf_r+0x1b40>)
   886e4:	930c      	str	r3, [sp, #48]	; 0x30
   886e6:	e684      	b.n	883f2 <_svfprintf_r+0x173e>
   886e8:	2667      	movs	r6, #103	; 0x67
   886ea:	e62e      	b.n	8834a <_svfprintf_r+0x1696>
   886ec:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   886f0:	f7fe bcb9 	b.w	87066 <_svfprintf_r+0x3b2>
   886f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   886f6:	930c      	str	r3, [sp, #48]	; 0x30
   886f8:	e57c      	b.n	881f4 <_svfprintf_r+0x1540>
   886fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   886fc:	2003      	movs	r0, #3
   886fe:	2b00      	cmp	r3, #0
   88700:	bfb8      	it	lt
   88702:	232d      	movlt	r3, #45	; 0x2d
   88704:	f04f 0100 	mov.w	r1, #0
   88708:	bfba      	itte	lt
   8870a:	461a      	movlt	r2, r3
   8870c:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   88710:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   88714:	4f38      	ldr	r7, [pc, #224]	; (887f8 <_svfprintf_r+0x1b44>)
   88716:	4b39      	ldr	r3, [pc, #228]	; (887fc <_svfprintf_r+0x1b48>)
   88718:	9008      	str	r0, [sp, #32]
   8871a:	910d      	str	r1, [sp, #52]	; 0x34
   8871c:	f7fe bce2 	b.w	870e4 <_svfprintf_r+0x430>
   88720:	f1c3 0301 	rsb	r3, r3, #1
   88724:	441a      	add	r2, r3
   88726:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8872a:	2667      	movs	r6, #103	; 0x67
   8872c:	920c      	str	r2, [sp, #48]	; 0x30
   8872e:	9308      	str	r3, [sp, #32]
   88730:	e56c      	b.n	8820c <_svfprintf_r+0x1558>
   88732:	2200      	movs	r2, #0
   88734:	2300      	movs	r3, #0
   88736:	980c      	ldr	r0, [sp, #48]	; 0x30
   88738:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8873a:	f004 fe01 	bl	8d340 <__aeabi_dcmpeq>
   8873e:	2800      	cmp	r0, #0
   88740:	f47f addb 	bne.w	882fa <_svfprintf_r+0x1646>
   88744:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88746:	f1c3 0301 	rsb	r3, r3, #1
   8874a:	9324      	str	r3, [sp, #144]	; 0x90
   8874c:	e5d6      	b.n	882fc <_svfprintf_r+0x1648>
   8874e:	992b      	ldr	r1, [sp, #172]	; 0xac
   88750:	f7ff bb59 	b.w	87e06 <_svfprintf_r+0x1152>
   88754:	07e9      	lsls	r1, r5, #31
   88756:	f57f aa35 	bpl.w	87bc4 <_svfprintf_r+0xf10>
   8875a:	f7ff ba2f 	b.w	87bbc <_svfprintf_r+0xf08>
   8875e:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88762:	e799      	b.n	88698 <_svfprintf_r+0x19e4>
   88764:	900d      	str	r0, [sp, #52]	; 0x34
   88766:	e6b0      	b.n	884ca <_svfprintf_r+0x1816>
   88768:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8876a:	f005 0501 	and.w	r5, r5, #1
   8876e:	4613      	mov	r3, r2
   88770:	432b      	orrs	r3, r5
   88772:	d104      	bne.n	8877e <_svfprintf_r+0x1aca>
   88774:	2301      	movs	r3, #1
   88776:	2666      	movs	r6, #102	; 0x66
   88778:	9308      	str	r3, [sp, #32]
   8877a:	930c      	str	r3, [sp, #48]	; 0x30
   8877c:	e546      	b.n	8820c <_svfprintf_r+0x1558>
   8877e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88780:	2666      	movs	r6, #102	; 0x66
   88782:	3301      	adds	r3, #1
   88784:	441a      	add	r2, r3
   88786:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8878a:	920c      	str	r2, [sp, #48]	; 0x30
   8878c:	9308      	str	r3, [sp, #32]
   8878e:	e53d      	b.n	8820c <_svfprintf_r+0x1558>
   88790:	4b1b      	ldr	r3, [pc, #108]	; (88800 <_svfprintf_r+0x1b4c>)
   88792:	930f      	str	r3, [sp, #60]	; 0x3c
   88794:	f7ff bbe9 	b.w	87f6a <_svfprintf_r+0x12b6>
   88798:	4a19      	ldr	r2, [pc, #100]	; (88800 <_svfprintf_r+0x1b4c>)
   8879a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8879c:	920f      	str	r2, [sp, #60]	; 0x3c
   8879e:	e4b1      	b.n	88104 <_svfprintf_r+0x1450>
   887a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   887a2:	e6dd      	b.n	88560 <_svfprintf_r+0x18ac>
   887a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   887a6:	f89b 6001 	ldrb.w	r6, [fp, #1]
   887aa:	f853 0b04 	ldr.w	r0, [r3], #4
   887ae:	4693      	mov	fp, r2
   887b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   887b4:	9009      	str	r0, [sp, #36]	; 0x24
   887b6:	930e      	str	r3, [sp, #56]	; 0x38
   887b8:	f7fe bac7 	b.w	86d4a <_svfprintf_r+0x96>
   887bc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   887c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   887c4:	f8aa 300c 	strh.w	r3, [sl, #12]
   887c8:	f7fe bc4d 	b.w	87066 <_svfprintf_r+0x3b2>
   887cc:	4a0c      	ldr	r2, [pc, #48]	; (88800 <_svfprintf_r+0x1b4c>)
   887ce:	920f      	str	r2, [sp, #60]	; 0x3c
   887d0:	e6e6      	b.n	885a0 <_svfprintf_r+0x18ec>
   887d2:	230c      	movs	r3, #12
   887d4:	f04f 32ff 	mov.w	r2, #4294967295
   887d8:	f8c9 3000 	str.w	r3, [r9]
   887dc:	920a      	str	r2, [sp, #40]	; 0x28
   887de:	f7fe bc49 	b.w	87074 <_svfprintf_r+0x3c0>
   887e2:	2302      	movs	r3, #2
   887e4:	931b      	str	r3, [sp, #108]	; 0x6c
   887e6:	f7ff b9e2 	b.w	87bae <_svfprintf_r+0xefa>
   887ea:	2300      	movs	r3, #0
   887ec:	9312      	str	r3, [sp, #72]	; 0x48
   887ee:	9316      	str	r3, [sp, #88]	; 0x58
   887f0:	e732      	b.n	88658 <_svfprintf_r+0x19a4>
   887f2:	bf00      	nop
   887f4:	0008d4f4 	.word	0x0008d4f4
   887f8:	0008d4ec 	.word	0x0008d4ec
   887fc:	0008d4f0 	.word	0x0008d4f0
   88800:	0008d538 	.word	0x0008d538

00088804 <__sprint_r.part.0>:
   88804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88808:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8880a:	4690      	mov	r8, r2
   8880c:	049c      	lsls	r4, r3, #18
   8880e:	d52d      	bpl.n	8886c <__sprint_r.part.0+0x68>
   88810:	6893      	ldr	r3, [r2, #8]
   88812:	6812      	ldr	r2, [r2, #0]
   88814:	b343      	cbz	r3, 88868 <__sprint_r.part.0+0x64>
   88816:	468b      	mov	fp, r1
   88818:	4606      	mov	r6, r0
   8881a:	f102 0908 	add.w	r9, r2, #8
   8881e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   88822:	ea5f 079a 	movs.w	r7, sl, lsr #2
   88826:	d015      	beq.n	88854 <__sprint_r.part.0+0x50>
   88828:	2400      	movs	r4, #0
   8882a:	3d04      	subs	r5, #4
   8882c:	e001      	b.n	88832 <__sprint_r.part.0+0x2e>
   8882e:	42a7      	cmp	r7, r4
   88830:	d00e      	beq.n	88850 <__sprint_r.part.0+0x4c>
   88832:	465a      	mov	r2, fp
   88834:	4630      	mov	r0, r6
   88836:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8883a:	f002 f8f9 	bl	8aa30 <_fputwc_r>
   8883e:	1c43      	adds	r3, r0, #1
   88840:	f104 0401 	add.w	r4, r4, #1
   88844:	d1f3      	bne.n	8882e <__sprint_r.part.0+0x2a>
   88846:	2300      	movs	r3, #0
   88848:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8884c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88850:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88854:	f02a 0a03 	bic.w	sl, sl, #3
   88858:	eba3 030a 	sub.w	r3, r3, sl
   8885c:	f8c8 3008 	str.w	r3, [r8, #8]
   88860:	f109 0908 	add.w	r9, r9, #8
   88864:	2b00      	cmp	r3, #0
   88866:	d1da      	bne.n	8881e <__sprint_r.part.0+0x1a>
   88868:	2000      	movs	r0, #0
   8886a:	e7ec      	b.n	88846 <__sprint_r.part.0+0x42>
   8886c:	f002 fa6a 	bl	8ad44 <__sfvwrite_r>
   88870:	2300      	movs	r3, #0
   88872:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88876:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8887a:	bf00      	nop

0008887c <_vfiprintf_r>:
   8887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88880:	b0bb      	sub	sp, #236	; 0xec
   88882:	461c      	mov	r4, r3
   88884:	4689      	mov	r9, r1
   88886:	4690      	mov	r8, r2
   88888:	e9cd 3004 	strd	r3, r0, [sp, #16]
   8888c:	b118      	cbz	r0, 88896 <_vfiprintf_r+0x1a>
   8888e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88890:	2b00      	cmp	r3, #0
   88892:	f000 827a 	beq.w	88d8a <_vfiprintf_r+0x50e>
   88896:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8889a:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   8889e:	07de      	lsls	r6, r3, #31
   888a0:	b28a      	uxth	r2, r1
   888a2:	d402      	bmi.n	888aa <_vfiprintf_r+0x2e>
   888a4:	058d      	lsls	r5, r1, #22
   888a6:	f140 851a 	bpl.w	892de <_vfiprintf_r+0xa62>
   888aa:	0490      	lsls	r0, r2, #18
   888ac:	d40a      	bmi.n	888c4 <_vfiprintf_r+0x48>
   888ae:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   888b2:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   888b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   888ba:	f8a9 200c 	strh.w	r2, [r9, #12]
   888be:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   888c2:	b292      	uxth	r2, r2
   888c4:	0711      	lsls	r1, r2, #28
   888c6:	f140 80f6 	bpl.w	88ab6 <_vfiprintf_r+0x23a>
   888ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
   888ce:	2b00      	cmp	r3, #0
   888d0:	f000 80f1 	beq.w	88ab6 <_vfiprintf_r+0x23a>
   888d4:	f002 031a 	and.w	r3, r2, #26
   888d8:	2b0a      	cmp	r3, #10
   888da:	f000 80fa 	beq.w	88ad2 <_vfiprintf_r+0x256>
   888de:	2300      	movs	r3, #0
   888e0:	46cb      	mov	fp, r9
   888e2:	e9cd 3308 	strd	r3, r3, [sp, #32]
   888e6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   888ea:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   888ee:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   888f2:	9303      	str	r3, [sp, #12]
   888f4:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   888f8:	f898 3000 	ldrb.w	r3, [r8]
   888fc:	2b00      	cmp	r3, #0
   888fe:	f000 81ed 	beq.w	88cdc <_vfiprintf_r+0x460>
   88902:	4644      	mov	r4, r8
   88904:	e004      	b.n	88910 <_vfiprintf_r+0x94>
   88906:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8890a:	2b00      	cmp	r3, #0
   8890c:	f000 8127 	beq.w	88b5e <_vfiprintf_r+0x2e2>
   88910:	2b25      	cmp	r3, #37	; 0x25
   88912:	d1f8      	bne.n	88906 <_vfiprintf_r+0x8a>
   88914:	ebb4 0508 	subs.w	r5, r4, r8
   88918:	f040 8125 	bne.w	88b66 <_vfiprintf_r+0x2ea>
   8891c:	7823      	ldrb	r3, [r4, #0]
   8891e:	2b00      	cmp	r3, #0
   88920:	f000 81dc 	beq.w	88cdc <_vfiprintf_r+0x460>
   88924:	f04f 0200 	mov.w	r2, #0
   88928:	2300      	movs	r3, #0
   8892a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8892e:	f04f 32ff 	mov.w	r2, #4294967295
   88932:	252b      	movs	r5, #43	; 0x2b
   88934:	461f      	mov	r7, r3
   88936:	9302      	str	r3, [sp, #8]
   88938:	7863      	ldrb	r3, [r4, #1]
   8893a:	f104 0801 	add.w	r8, r4, #1
   8893e:	9200      	str	r2, [sp, #0]
   88940:	f108 0801 	add.w	r8, r8, #1
   88944:	f1a3 0220 	sub.w	r2, r3, #32
   88948:	2a5a      	cmp	r2, #90	; 0x5a
   8894a:	f200 8141 	bhi.w	88bd0 <_vfiprintf_r+0x354>
   8894e:	e8df f012 	tbh	[pc, r2, lsl #1]
   88952:	0272      	.short	0x0272
   88954:	013f013f 	.word	0x013f013f
   88958:	013f026d 	.word	0x013f026d
   8895c:	013f013f 	.word	0x013f013f
   88960:	013f024b 	.word	0x013f024b
   88964:	006a013f 	.word	0x006a013f
   88968:	013f0227 	.word	0x013f0227
   8896c:	02310222 	.word	0x02310222
   88970:	022c013f 	.word	0x022c013f
   88974:	005b005b 	.word	0x005b005b
   88978:	005b005b 	.word	0x005b005b
   8897c:	005b005b 	.word	0x005b005b
   88980:	005b005b 	.word	0x005b005b
   88984:	013f005b 	.word	0x013f005b
   88988:	013f013f 	.word	0x013f013f
   8898c:	013f013f 	.word	0x013f013f
   88990:	013f013f 	.word	0x013f013f
   88994:	013f013f 	.word	0x013f013f
   88998:	007a020e 	.word	0x007a020e
   8899c:	013f013f 	.word	0x013f013f
   889a0:	013f013f 	.word	0x013f013f
   889a4:	013f013f 	.word	0x013f013f
   889a8:	013f013f 	.word	0x013f013f
   889ac:	013f013f 	.word	0x013f013f
   889b0:	013f00d7 	.word	0x013f00d7
   889b4:	013f013f 	.word	0x013f013f
   889b8:	013f01f2 	.word	0x013f01f2
   889bc:	013f0297 	.word	0x013f0297
   889c0:	0500013f 	.word	0x0500013f
   889c4:	013f013f 	.word	0x013f013f
   889c8:	013f013f 	.word	0x013f013f
   889cc:	013f013f 	.word	0x013f013f
   889d0:	013f013f 	.word	0x013f013f
   889d4:	013f013f 	.word	0x013f013f
   889d8:	007c020e 	.word	0x007c020e
   889dc:	013f013f 	.word	0x013f013f
   889e0:	028a013f 	.word	0x028a013f
   889e4:	0075007c 	.word	0x0075007c
   889e8:	027d013f 	.word	0x027d013f
   889ec:	02b6013f 	.word	0x02b6013f
   889f0:	02a600d9 	.word	0x02a600d9
   889f4:	013f0075 	.word	0x013f0075
   889f8:	007201f2 	.word	0x007201f2
   889fc:	013f04fe 	.word	0x013f04fe
   88a00:	051c013f 	.word	0x051c013f
   88a04:	0072013f 	.word	0x0072013f
   88a08:	2100      	movs	r1, #0
   88a0a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88a0e:	f818 3b01 	ldrb.w	r3, [r8], #1
   88a12:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88a16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   88a1a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88a1e:	2a09      	cmp	r2, #9
   88a20:	d9f5      	bls.n	88a0e <_vfiprintf_r+0x192>
   88a22:	9102      	str	r1, [sp, #8]
   88a24:	e78e      	b.n	88944 <_vfiprintf_r+0xc8>
   88a26:	9b04      	ldr	r3, [sp, #16]
   88a28:	f853 2b04 	ldr.w	r2, [r3], #4
   88a2c:	2a00      	cmp	r2, #0
   88a2e:	9202      	str	r2, [sp, #8]
   88a30:	9304      	str	r3, [sp, #16]
   88a32:	f2c0 81ad 	blt.w	88d90 <_vfiprintf_r+0x514>
   88a36:	f898 3000 	ldrb.w	r3, [r8]
   88a3a:	e781      	b.n	88940 <_vfiprintf_r+0xc4>
   88a3c:	f898 3000 	ldrb.w	r3, [r8]
   88a40:	f047 0720 	orr.w	r7, r7, #32
   88a44:	e77c      	b.n	88940 <_vfiprintf_r+0xc4>
   88a46:	f047 0710 	orr.w	r7, r7, #16
   88a4a:	06bc      	lsls	r4, r7, #26
   88a4c:	f140 8158 	bpl.w	88d00 <_vfiprintf_r+0x484>
   88a50:	9c04      	ldr	r4, [sp, #16]
   88a52:	3407      	adds	r4, #7
   88a54:	f024 0307 	bic.w	r3, r4, #7
   88a58:	4619      	mov	r1, r3
   88a5a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   88a5e:	4614      	mov	r4, r2
   88a60:	461d      	mov	r5, r3
   88a62:	9104      	str	r1, [sp, #16]
   88a64:	2a00      	cmp	r2, #0
   88a66:	f173 0300 	sbcs.w	r3, r3, #0
   88a6a:	f2c0 841e 	blt.w	892aa <_vfiprintf_r+0xa2e>
   88a6e:	9b00      	ldr	r3, [sp, #0]
   88a70:	3301      	adds	r3, #1
   88a72:	f000 84f0 	beq.w	89456 <_vfiprintf_r+0xbda>
   88a76:	ea54 0305 	orrs.w	r3, r4, r5
   88a7a:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   88a7e:	f000 83fc 	beq.w	8927a <_vfiprintf_r+0x9fe>
   88a82:	2d00      	cmp	r5, #0
   88a84:	bf08      	it	eq
   88a86:	2c0a      	cmpeq	r4, #10
   88a88:	f080 84a9 	bcs.w	893de <_vfiprintf_r+0xb62>
   88a8c:	2301      	movs	r3, #1
   88a8e:	464f      	mov	r7, r9
   88a90:	3430      	adds	r4, #48	; 0x30
   88a92:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   88a96:	9301      	str	r3, [sp, #4]
   88a98:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   88a9c:	e9dd 2100 	ldrd	r2, r1, [sp]
   88aa0:	428a      	cmp	r2, r1
   88aa2:	bfb8      	it	lt
   88aa4:	460a      	movlt	r2, r1
   88aa6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   88aaa:	4615      	mov	r5, r2
   88aac:	2b00      	cmp	r3, #0
   88aae:	f000 809d 	beq.w	88bec <_vfiprintf_r+0x370>
   88ab2:	3501      	adds	r5, #1
   88ab4:	e09a      	b.n	88bec <_vfiprintf_r+0x370>
   88ab6:	4649      	mov	r1, r9
   88ab8:	9805      	ldr	r0, [sp, #20]
   88aba:	f000 fdb9 	bl	89630 <__swsetup_r>
   88abe:	2800      	cmp	r0, #0
   88ac0:	f040 854a 	bne.w	89558 <_vfiprintf_r+0xcdc>
   88ac4:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   88ac8:	f002 031a 	and.w	r3, r2, #26
   88acc:	2b0a      	cmp	r3, #10
   88ace:	f47f af06 	bne.w	888de <_vfiprintf_r+0x62>
   88ad2:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   88ad6:	2b00      	cmp	r3, #0
   88ad8:	f6ff af01 	blt.w	888de <_vfiprintf_r+0x62>
   88adc:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88ae0:	07de      	lsls	r6, r3, #31
   88ae2:	d402      	bmi.n	88aea <_vfiprintf_r+0x26e>
   88ae4:	0595      	lsls	r5, r2, #22
   88ae6:	f140 850e 	bpl.w	89506 <_vfiprintf_r+0xc8a>
   88aea:	4623      	mov	r3, r4
   88aec:	4642      	mov	r2, r8
   88aee:	4649      	mov	r1, r9
   88af0:	9805      	ldr	r0, [sp, #20]
   88af2:	f000 fd59 	bl	895a8 <__sbprintf>
   88af6:	9003      	str	r0, [sp, #12]
   88af8:	9803      	ldr	r0, [sp, #12]
   88afa:	b03b      	add	sp, #236	; 0xec
   88afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88b00:	f047 0710 	orr.w	r7, r7, #16
   88b04:	06b8      	lsls	r0, r7, #26
   88b06:	9c04      	ldr	r4, [sp, #16]
   88b08:	f140 8109 	bpl.w	88d1e <_vfiprintf_r+0x4a2>
   88b0c:	3407      	adds	r4, #7
   88b0e:	f024 0307 	bic.w	r3, r4, #7
   88b12:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88b16:	9304      	str	r3, [sp, #16]
   88b18:	2300      	movs	r3, #0
   88b1a:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   88b1e:	f04f 0200 	mov.w	r2, #0
   88b22:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88b26:	9a00      	ldr	r2, [sp, #0]
   88b28:	4611      	mov	r1, r2
   88b2a:	3101      	adds	r1, #1
   88b2c:	f000 81db 	beq.w	88ee6 <_vfiprintf_r+0x66a>
   88b30:	ea54 0105 	orrs.w	r1, r4, r5
   88b34:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   88b38:	f040 81d4 	bne.w	88ee4 <_vfiprintf_r+0x668>
   88b3c:	2a00      	cmp	r2, #0
   88b3e:	f040 848d 	bne.w	8945c <_vfiprintf_r+0xbe0>
   88b42:	2b00      	cmp	r3, #0
   88b44:	f040 839e 	bne.w	89284 <_vfiprintf_r+0xa08>
   88b48:	f019 0301 	ands.w	r3, r9, #1
   88b4c:	9301      	str	r3, [sp, #4]
   88b4e:	f000 83c3 	beq.w	892d8 <_vfiprintf_r+0xa5c>
   88b52:	2330      	movs	r3, #48	; 0x30
   88b54:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   88b58:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   88b5c:	e79e      	b.n	88a9c <_vfiprintf_r+0x220>
   88b5e:	ebb4 0508 	subs.w	r5, r4, r8
   88b62:	f000 80bb 	beq.w	88cdc <_vfiprintf_r+0x460>
   88b66:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   88b6a:	3301      	adds	r3, #1
   88b6c:	442a      	add	r2, r5
   88b6e:	2b07      	cmp	r3, #7
   88b70:	e9ca 8500 	strd	r8, r5, [sl]
   88b74:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   88b78:	dc06      	bgt.n	88b88 <_vfiprintf_r+0x30c>
   88b7a:	f10a 0a08 	add.w	sl, sl, #8
   88b7e:	9a03      	ldr	r2, [sp, #12]
   88b80:	7823      	ldrb	r3, [r4, #0]
   88b82:	442a      	add	r2, r5
   88b84:	9203      	str	r2, [sp, #12]
   88b86:	e6ca      	b.n	8891e <_vfiprintf_r+0xa2>
   88b88:	2a00      	cmp	r2, #0
   88b8a:	f000 8372 	beq.w	89272 <_vfiprintf_r+0x9f6>
   88b8e:	4659      	mov	r1, fp
   88b90:	9805      	ldr	r0, [sp, #20]
   88b92:	aa0e      	add	r2, sp, #56	; 0x38
   88b94:	f7ff fe36 	bl	88804 <__sprint_r.part.0>
   88b98:	b950      	cbnz	r0, 88bb0 <_vfiprintf_r+0x334>
   88b9a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b9e:	e7ee      	b.n	88b7e <_vfiprintf_r+0x302>
   88ba0:	4659      	mov	r1, fp
   88ba2:	9805      	ldr	r0, [sp, #20]
   88ba4:	aa0e      	add	r2, sp, #56	; 0x38
   88ba6:	f7ff fe2d 	bl	88804 <__sprint_r.part.0>
   88baa:	2800      	cmp	r0, #0
   88bac:	f000 808d 	beq.w	88cca <_vfiprintf_r+0x44e>
   88bb0:	46d9      	mov	r9, fp
   88bb2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88bb6:	f013 0f01 	tst.w	r3, #1
   88bba:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88bbe:	f000 8095 	beq.w	88cec <_vfiprintf_r+0x470>
   88bc2:	065b      	lsls	r3, r3, #25
   88bc4:	f100 84d4 	bmi.w	89570 <_vfiprintf_r+0xcf4>
   88bc8:	9803      	ldr	r0, [sp, #12]
   88bca:	b03b      	add	sp, #236	; 0xec
   88bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88bd0:	2b00      	cmp	r3, #0
   88bd2:	f000 8083 	beq.w	88cdc <_vfiprintf_r+0x460>
   88bd6:	2501      	movs	r5, #1
   88bd8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88bdc:	f04f 0300 	mov.w	r3, #0
   88be0:	9501      	str	r5, [sp, #4]
   88be2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88be6:	ae21      	add	r6, sp, #132	; 0x84
   88be8:	2300      	movs	r3, #0
   88bea:	9300      	str	r3, [sp, #0]
   88bec:	f017 0302 	ands.w	r3, r7, #2
   88bf0:	9307      	str	r3, [sp, #28]
   88bf2:	bf18      	it	ne
   88bf4:	3502      	addne	r5, #2
   88bf6:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   88bfa:	9306      	str	r3, [sp, #24]
   88bfc:	d104      	bne.n	88c08 <_vfiprintf_r+0x38c>
   88bfe:	9b02      	ldr	r3, [sp, #8]
   88c00:	1b5c      	subs	r4, r3, r5
   88c02:	2c00      	cmp	r4, #0
   88c04:	f300 8274 	bgt.w	890f0 <_vfiprintf_r+0x874>
   88c08:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88c0c:	1c48      	adds	r0, r1, #1
   88c0e:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   88c12:	b174      	cbz	r4, 88c32 <_vfiprintf_r+0x3b6>
   88c14:	2101      	movs	r1, #1
   88c16:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   88c1a:	440a      	add	r2, r1
   88c1c:	2807      	cmp	r0, #7
   88c1e:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   88c22:	e9ca 4100 	strd	r4, r1, [sl]
   88c26:	f300 8246 	bgt.w	890b6 <_vfiprintf_r+0x83a>
   88c2a:	4601      	mov	r1, r0
   88c2c:	f10a 0a08 	add.w	sl, sl, #8
   88c30:	3001      	adds	r0, #1
   88c32:	9b07      	ldr	r3, [sp, #28]
   88c34:	b1c3      	cbz	r3, 88c68 <_vfiprintf_r+0x3ec>
   88c36:	2102      	movs	r1, #2
   88c38:	ab0d      	add	r3, sp, #52	; 0x34
   88c3a:	440a      	add	r2, r1
   88c3c:	2807      	cmp	r0, #7
   88c3e:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   88c42:	e9ca 3100 	strd	r3, r1, [sl]
   88c46:	f340 824e 	ble.w	890e6 <_vfiprintf_r+0x86a>
   88c4a:	2a00      	cmp	r2, #0
   88c4c:	f000 830c 	beq.w	89268 <_vfiprintf_r+0x9ec>
   88c50:	4659      	mov	r1, fp
   88c52:	9805      	ldr	r0, [sp, #20]
   88c54:	aa0e      	add	r2, sp, #56	; 0x38
   88c56:	f7ff fdd5 	bl	88804 <__sprint_r.part.0>
   88c5a:	2800      	cmp	r0, #0
   88c5c:	d1a8      	bne.n	88bb0 <_vfiprintf_r+0x334>
   88c5e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88c62:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88c66:	1c48      	adds	r0, r1, #1
   88c68:	9b06      	ldr	r3, [sp, #24]
   88c6a:	2b80      	cmp	r3, #128	; 0x80
   88c6c:	f000 817e 	beq.w	88f6c <_vfiprintf_r+0x6f0>
   88c70:	e9dd 3400 	ldrd	r3, r4, [sp]
   88c74:	1b1c      	subs	r4, r3, r4
   88c76:	2c00      	cmp	r4, #0
   88c78:	f300 81d3 	bgt.w	89022 <_vfiprintf_r+0x7a6>
   88c7c:	9b01      	ldr	r3, [sp, #4]
   88c7e:	2807      	cmp	r0, #7
   88c80:	441a      	add	r2, r3
   88c82:	e9ca 6300 	strd	r6, r3, [sl]
   88c86:	9210      	str	r2, [sp, #64]	; 0x40
   88c88:	900f      	str	r0, [sp, #60]	; 0x3c
   88c8a:	f340 816c 	ble.w	88f66 <_vfiprintf_r+0x6ea>
   88c8e:	2a00      	cmp	r2, #0
   88c90:	f000 8276 	beq.w	89180 <_vfiprintf_r+0x904>
   88c94:	4659      	mov	r1, fp
   88c96:	9805      	ldr	r0, [sp, #20]
   88c98:	aa0e      	add	r2, sp, #56	; 0x38
   88c9a:	f7ff fdb3 	bl	88804 <__sprint_r.part.0>
   88c9e:	2800      	cmp	r0, #0
   88ca0:	d186      	bne.n	88bb0 <_vfiprintf_r+0x334>
   88ca2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88ca4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88ca8:	0779      	lsls	r1, r7, #29
   88caa:	d504      	bpl.n	88cb6 <_vfiprintf_r+0x43a>
   88cac:	9b02      	ldr	r3, [sp, #8]
   88cae:	1b5c      	subs	r4, r3, r5
   88cb0:	2c00      	cmp	r4, #0
   88cb2:	f300 826e 	bgt.w	89192 <_vfiprintf_r+0x916>
   88cb6:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   88cba:	42a9      	cmp	r1, r5
   88cbc:	bfac      	ite	ge
   88cbe:	185b      	addge	r3, r3, r1
   88cc0:	195b      	addlt	r3, r3, r5
   88cc2:	9303      	str	r3, [sp, #12]
   88cc4:	2a00      	cmp	r2, #0
   88cc6:	f47f af6b 	bne.w	88ba0 <_vfiprintf_r+0x324>
   88cca:	2300      	movs	r3, #0
   88ccc:	930f      	str	r3, [sp, #60]	; 0x3c
   88cce:	f898 3000 	ldrb.w	r3, [r8]
   88cd2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88cd6:	2b00      	cmp	r3, #0
   88cd8:	f47f ae13 	bne.w	88902 <_vfiprintf_r+0x86>
   88cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88cde:	46d9      	mov	r9, fp
   88ce0:	2b00      	cmp	r3, #0
   88ce2:	f040 8426 	bne.w	89532 <_vfiprintf_r+0xcb6>
   88ce6:	2300      	movs	r3, #0
   88ce8:	930f      	str	r3, [sp, #60]	; 0x3c
   88cea:	e762      	b.n	88bb2 <_vfiprintf_r+0x336>
   88cec:	059a      	lsls	r2, r3, #22
   88cee:	f53f af68 	bmi.w	88bc2 <_vfiprintf_r+0x346>
   88cf2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88cf6:	f002 f9cf 	bl	8b098 <__retarget_lock_release_recursive>
   88cfa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88cfe:	e760      	b.n	88bc2 <_vfiprintf_r+0x346>
   88d00:	9b04      	ldr	r3, [sp, #16]
   88d02:	06f8      	lsls	r0, r7, #27
   88d04:	f853 4b04 	ldr.w	r4, [r3], #4
   88d08:	f100 8308 	bmi.w	8931c <_vfiprintf_r+0xaa0>
   88d0c:	0679      	lsls	r1, r7, #25
   88d0e:	f140 8302 	bpl.w	89316 <_vfiprintf_r+0xa9a>
   88d12:	b224      	sxth	r4, r4
   88d14:	17e5      	asrs	r5, r4, #31
   88d16:	9304      	str	r3, [sp, #16]
   88d18:	4622      	mov	r2, r4
   88d1a:	462b      	mov	r3, r5
   88d1c:	e6a2      	b.n	88a64 <_vfiprintf_r+0x1e8>
   88d1e:	f854 3b04 	ldr.w	r3, [r4], #4
   88d22:	06f9      	lsls	r1, r7, #27
   88d24:	9404      	str	r4, [sp, #16]
   88d26:	f100 82f3 	bmi.w	89310 <_vfiprintf_r+0xa94>
   88d2a:	067a      	lsls	r2, r7, #25
   88d2c:	f140 82ed 	bpl.w	8930a <_vfiprintf_r+0xa8e>
   88d30:	2500      	movs	r5, #0
   88d32:	b29c      	uxth	r4, r3
   88d34:	e6f0      	b.n	88b18 <_vfiprintf_r+0x29c>
   88d36:	f04f 0300 	mov.w	r3, #0
   88d3a:	9c04      	ldr	r4, [sp, #16]
   88d3c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88d40:	f854 6b04 	ldr.w	r6, [r4], #4
   88d44:	2e00      	cmp	r6, #0
   88d46:	f000 8397 	beq.w	89478 <_vfiprintf_r+0xbfc>
   88d4a:	9a00      	ldr	r2, [sp, #0]
   88d4c:	4613      	mov	r3, r2
   88d4e:	3301      	adds	r3, #1
   88d50:	f000 831e 	beq.w	89390 <_vfiprintf_r+0xb14>
   88d54:	2100      	movs	r1, #0
   88d56:	4630      	mov	r0, r6
   88d58:	f002 fcdc 	bl	8b714 <memchr>
   88d5c:	2800      	cmp	r0, #0
   88d5e:	f000 83d8 	beq.w	89512 <_vfiprintf_r+0xc96>
   88d62:	1b83      	subs	r3, r0, r6
   88d64:	9301      	str	r3, [sp, #4]
   88d66:	2300      	movs	r3, #0
   88d68:	9404      	str	r4, [sp, #16]
   88d6a:	9300      	str	r3, [sp, #0]
   88d6c:	e696      	b.n	88a9c <_vfiprintf_r+0x220>
   88d6e:	2501      	movs	r5, #1
   88d70:	f04f 0200 	mov.w	r2, #0
   88d74:	9c04      	ldr	r4, [sp, #16]
   88d76:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88d7a:	f854 3b04 	ldr.w	r3, [r4], #4
   88d7e:	9501      	str	r5, [sp, #4]
   88d80:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88d84:	9404      	str	r4, [sp, #16]
   88d86:	ae21      	add	r6, sp, #132	; 0x84
   88d88:	e72e      	b.n	88be8 <_vfiprintf_r+0x36c>
   88d8a:	f001 fdb1 	bl	8a8f0 <__sinit>
   88d8e:	e582      	b.n	88896 <_vfiprintf_r+0x1a>
   88d90:	9b02      	ldr	r3, [sp, #8]
   88d92:	425b      	negs	r3, r3
   88d94:	9302      	str	r3, [sp, #8]
   88d96:	f898 3000 	ldrb.w	r3, [r8]
   88d9a:	f047 0704 	orr.w	r7, r7, #4
   88d9e:	e5cf      	b.n	88940 <_vfiprintf_r+0xc4>
   88da0:	f898 3000 	ldrb.w	r3, [r8]
   88da4:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   88da8:	e5ca      	b.n	88940 <_vfiprintf_r+0xc4>
   88daa:	f898 3000 	ldrb.w	r3, [r8]
   88dae:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   88db2:	e5c5      	b.n	88940 <_vfiprintf_r+0xc4>
   88db4:	4641      	mov	r1, r8
   88db6:	f811 3b01 	ldrb.w	r3, [r1], #1
   88dba:	2b2a      	cmp	r3, #42	; 0x2a
   88dbc:	f000 83dd 	beq.w	8957a <_vfiprintf_r+0xcfe>
   88dc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88dc4:	2a09      	cmp	r2, #9
   88dc6:	4688      	mov	r8, r1
   88dc8:	bf98      	it	ls
   88dca:	2100      	movls	r1, #0
   88dcc:	f200 83ad 	bhi.w	8952a <_vfiprintf_r+0xcae>
   88dd0:	f818 3b01 	ldrb.w	r3, [r8], #1
   88dd4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88dd8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   88ddc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88de0:	2a09      	cmp	r2, #9
   88de2:	d9f5      	bls.n	88dd0 <_vfiprintf_r+0x554>
   88de4:	9100      	str	r1, [sp, #0]
   88de6:	e5ad      	b.n	88944 <_vfiprintf_r+0xc8>
   88de8:	9c05      	ldr	r4, [sp, #20]
   88dea:	4620      	mov	r0, r4
   88dec:	f002 f94a 	bl	8b084 <_localeconv_r>
   88df0:	6843      	ldr	r3, [r0, #4]
   88df2:	4618      	mov	r0, r3
   88df4:	930a      	str	r3, [sp, #40]	; 0x28
   88df6:	f003 fb3f 	bl	8c478 <strlen>
   88dfa:	4603      	mov	r3, r0
   88dfc:	4620      	mov	r0, r4
   88dfe:	930b      	str	r3, [sp, #44]	; 0x2c
   88e00:	461c      	mov	r4, r3
   88e02:	f002 f93f 	bl	8b084 <_localeconv_r>
   88e06:	6882      	ldr	r2, [r0, #8]
   88e08:	9209      	str	r2, [sp, #36]	; 0x24
   88e0a:	2c00      	cmp	r4, #0
   88e0c:	f43f ae13 	beq.w	88a36 <_vfiprintf_r+0x1ba>
   88e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88e12:	2b00      	cmp	r3, #0
   88e14:	f43f ae0f 	beq.w	88a36 <_vfiprintf_r+0x1ba>
   88e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88e1a:	781b      	ldrb	r3, [r3, #0]
   88e1c:	2b00      	cmp	r3, #0
   88e1e:	f43f ae0a 	beq.w	88a36 <_vfiprintf_r+0x1ba>
   88e22:	f898 3000 	ldrb.w	r3, [r8]
   88e26:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   88e2a:	e589      	b.n	88940 <_vfiprintf_r+0xc4>
   88e2c:	f898 3000 	ldrb.w	r3, [r8]
   88e30:	f047 0701 	orr.w	r7, r7, #1
   88e34:	e584      	b.n	88940 <_vfiprintf_r+0xc4>
   88e36:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   88e3a:	2b00      	cmp	r3, #0
   88e3c:	f47f adfb 	bne.w	88a36 <_vfiprintf_r+0x1ba>
   88e40:	2320      	movs	r3, #32
   88e42:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88e46:	f898 3000 	ldrb.w	r3, [r8]
   88e4a:	e579      	b.n	88940 <_vfiprintf_r+0xc4>
   88e4c:	f898 3000 	ldrb.w	r3, [r8]
   88e50:	2b6c      	cmp	r3, #108	; 0x6c
   88e52:	bf03      	ittte	eq
   88e54:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88e58:	f047 0720 	orreq.w	r7, r7, #32
   88e5c:	f108 0801 	addeq.w	r8, r8, #1
   88e60:	f047 0710 	orrne.w	r7, r7, #16
   88e64:	e56c      	b.n	88940 <_vfiprintf_r+0xc4>
   88e66:	f898 3000 	ldrb.w	r3, [r8]
   88e6a:	2b68      	cmp	r3, #104	; 0x68
   88e6c:	bf03      	ittte	eq
   88e6e:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88e72:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   88e76:	f108 0801 	addeq.w	r8, r8, #1
   88e7a:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   88e7e:	e55f      	b.n	88940 <_vfiprintf_r+0xc4>
   88e80:	f047 0910 	orr.w	r9, r7, #16
   88e84:	f019 0f20 	tst.w	r9, #32
   88e88:	9c04      	ldr	r4, [sp, #16]
   88e8a:	f000 8200 	beq.w	8928e <_vfiprintf_r+0xa12>
   88e8e:	3407      	adds	r4, #7
   88e90:	f024 0307 	bic.w	r3, r4, #7
   88e94:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88e98:	9304      	str	r3, [sp, #16]
   88e9a:	2301      	movs	r3, #1
   88e9c:	e63f      	b.n	88b1e <_vfiprintf_r+0x2a2>
   88e9e:	f647 0330 	movw	r3, #30768	; 0x7830
   88ea2:	9c04      	ldr	r4, [sp, #16]
   88ea4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   88ea8:	f854 2b04 	ldr.w	r2, [r4], #4
   88eac:	4bbf      	ldr	r3, [pc, #764]	; (891ac <_vfiprintf_r+0x930>)
   88eae:	9404      	str	r4, [sp, #16]
   88eb0:	9308      	str	r3, [sp, #32]
   88eb2:	4614      	mov	r4, r2
   88eb4:	2500      	movs	r5, #0
   88eb6:	2302      	movs	r3, #2
   88eb8:	f047 0902 	orr.w	r9, r7, #2
   88ebc:	e62f      	b.n	88b1e <_vfiprintf_r+0x2a2>
   88ebe:	06bb      	lsls	r3, r7, #26
   88ec0:	f100 8232 	bmi.w	89328 <_vfiprintf_r+0xaac>
   88ec4:	06fe      	lsls	r6, r7, #27
   88ec6:	f100 82cf 	bmi.w	89468 <_vfiprintf_r+0xbec>
   88eca:	067d      	lsls	r5, r7, #25
   88ecc:	f100 8301 	bmi.w	894d2 <_vfiprintf_r+0xc56>
   88ed0:	05bc      	lsls	r4, r7, #22
   88ed2:	f140 82c9 	bpl.w	89468 <_vfiprintf_r+0xbec>
   88ed6:	9c04      	ldr	r4, [sp, #16]
   88ed8:	9a03      	ldr	r2, [sp, #12]
   88eda:	f854 3b04 	ldr.w	r3, [r4], #4
   88ede:	701a      	strb	r2, [r3, #0]
   88ee0:	9404      	str	r4, [sp, #16]
   88ee2:	e509      	b.n	888f8 <_vfiprintf_r+0x7c>
   88ee4:	46b9      	mov	r9, r7
   88ee6:	2b01      	cmp	r3, #1
   88ee8:	f43f adcb 	beq.w	88a82 <_vfiprintf_r+0x206>
   88eec:	2b02      	cmp	r3, #2
   88eee:	ae3a      	add	r6, sp, #232	; 0xe8
   88ef0:	d113      	bne.n	88f1a <_vfiprintf_r+0x69e>
   88ef2:	9808      	ldr	r0, [sp, #32]
   88ef4:	0923      	lsrs	r3, r4, #4
   88ef6:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   88efa:	0929      	lsrs	r1, r5, #4
   88efc:	f004 020f 	and.w	r2, r4, #15
   88f00:	460d      	mov	r5, r1
   88f02:	461c      	mov	r4, r3
   88f04:	5c83      	ldrb	r3, [r0, r2]
   88f06:	f806 3d01 	strb.w	r3, [r6, #-1]!
   88f0a:	ea54 0305 	orrs.w	r3, r4, r5
   88f0e:	d1f1      	bne.n	88ef4 <_vfiprintf_r+0x678>
   88f10:	ab3a      	add	r3, sp, #232	; 0xe8
   88f12:	1b9b      	subs	r3, r3, r6
   88f14:	464f      	mov	r7, r9
   88f16:	9301      	str	r3, [sp, #4]
   88f18:	e5c0      	b.n	88a9c <_vfiprintf_r+0x220>
   88f1a:	08e2      	lsrs	r2, r4, #3
   88f1c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   88f20:	08e9      	lsrs	r1, r5, #3
   88f22:	f004 0307 	and.w	r3, r4, #7
   88f26:	460d      	mov	r5, r1
   88f28:	4614      	mov	r4, r2
   88f2a:	3330      	adds	r3, #48	; 0x30
   88f2c:	ea54 0105 	orrs.w	r1, r4, r5
   88f30:	4632      	mov	r2, r6
   88f32:	f806 3d01 	strb.w	r3, [r6, #-1]!
   88f36:	d1f0      	bne.n	88f1a <_vfiprintf_r+0x69e>
   88f38:	f019 0f01 	tst.w	r9, #1
   88f3c:	d0e8      	beq.n	88f10 <_vfiprintf_r+0x694>
   88f3e:	2b30      	cmp	r3, #48	; 0x30
   88f40:	d0e6      	beq.n	88f10 <_vfiprintf_r+0x694>
   88f42:	2330      	movs	r3, #48	; 0x30
   88f44:	3a02      	subs	r2, #2
   88f46:	f806 3c01 	strb.w	r3, [r6, #-1]
   88f4a:	ab3a      	add	r3, sp, #232	; 0xe8
   88f4c:	1a9b      	subs	r3, r3, r2
   88f4e:	464f      	mov	r7, r9
   88f50:	4616      	mov	r6, r2
   88f52:	9301      	str	r3, [sp, #4]
   88f54:	e5a2      	b.n	88a9c <_vfiprintf_r+0x220>
   88f56:	2301      	movs	r3, #1
   88f58:	9a01      	ldr	r2, [sp, #4]
   88f5a:	930f      	str	r3, [sp, #60]	; 0x3c
   88f5c:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   88f60:	9212      	str	r2, [sp, #72]	; 0x48
   88f62:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88f66:	f10a 0a08 	add.w	sl, sl, #8
   88f6a:	e69d      	b.n	88ca8 <_vfiprintf_r+0x42c>
   88f6c:	9b02      	ldr	r3, [sp, #8]
   88f6e:	1b5c      	subs	r4, r3, r5
   88f70:	2c00      	cmp	r4, #0
   88f72:	f77f ae7d 	ble.w	88c70 <_vfiprintf_r+0x3f4>
   88f76:	2c10      	cmp	r4, #16
   88f78:	f340 82ea 	ble.w	89550 <_vfiprintf_r+0xcd4>
   88f7c:	f8df 9230 	ldr.w	r9, [pc, #560]	; 891b0 <_vfiprintf_r+0x934>
   88f80:	4650      	mov	r0, sl
   88f82:	9706      	str	r7, [sp, #24]
   88f84:	46b2      	mov	sl, r6
   88f86:	464e      	mov	r6, r9
   88f88:	46c1      	mov	r9, r8
   88f8a:	46a8      	mov	r8, r5
   88f8c:	9d05      	ldr	r5, [sp, #20]
   88f8e:	e006      	b.n	88f9e <_vfiprintf_r+0x722>
   88f90:	f101 0c02 	add.w	ip, r1, #2
   88f94:	4619      	mov	r1, r3
   88f96:	3008      	adds	r0, #8
   88f98:	3c10      	subs	r4, #16
   88f9a:	2c10      	cmp	r4, #16
   88f9c:	dd1a      	ble.n	88fd4 <_vfiprintf_r+0x758>
   88f9e:	2710      	movs	r7, #16
   88fa0:	1c4b      	adds	r3, r1, #1
   88fa2:	3210      	adds	r2, #16
   88fa4:	2b07      	cmp	r3, #7
   88fa6:	9210      	str	r2, [sp, #64]	; 0x40
   88fa8:	6006      	str	r6, [r0, #0]
   88faa:	6047      	str	r7, [r0, #4]
   88fac:	930f      	str	r3, [sp, #60]	; 0x3c
   88fae:	ddef      	ble.n	88f90 <_vfiprintf_r+0x714>
   88fb0:	2a00      	cmp	r2, #0
   88fb2:	d07b      	beq.n	890ac <_vfiprintf_r+0x830>
   88fb4:	4659      	mov	r1, fp
   88fb6:	4628      	mov	r0, r5
   88fb8:	aa0e      	add	r2, sp, #56	; 0x38
   88fba:	f7ff fc23 	bl	88804 <__sprint_r.part.0>
   88fbe:	2800      	cmp	r0, #0
   88fc0:	f47f adf6 	bne.w	88bb0 <_vfiprintf_r+0x334>
   88fc4:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88fc8:	3c10      	subs	r4, #16
   88fca:	2c10      	cmp	r4, #16
   88fcc:	a811      	add	r0, sp, #68	; 0x44
   88fce:	f101 0c01 	add.w	ip, r1, #1
   88fd2:	dce4      	bgt.n	88f9e <_vfiprintf_r+0x722>
   88fd4:	4645      	mov	r5, r8
   88fd6:	46c8      	mov	r8, r9
   88fd8:	46b1      	mov	r9, r6
   88fda:	4656      	mov	r6, sl
   88fdc:	4682      	mov	sl, r0
   88fde:	9f06      	ldr	r7, [sp, #24]
   88fe0:	4422      	add	r2, r4
   88fe2:	f1bc 0f07 	cmp.w	ip, #7
   88fe6:	e9ca 9400 	strd	r9, r4, [sl]
   88fea:	9210      	str	r2, [sp, #64]	; 0x40
   88fec:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   88ff0:	f340 817e 	ble.w	892f0 <_vfiprintf_r+0xa74>
   88ff4:	2a00      	cmp	r2, #0
   88ff6:	f000 825c 	beq.w	894b2 <_vfiprintf_r+0xc36>
   88ffa:	4659      	mov	r1, fp
   88ffc:	9805      	ldr	r0, [sp, #20]
   88ffe:	aa0e      	add	r2, sp, #56	; 0x38
   89000:	f7ff fc00 	bl	88804 <__sprint_r.part.0>
   89004:	2800      	cmp	r0, #0
   89006:	f47f add3 	bne.w	88bb0 <_vfiprintf_r+0x334>
   8900a:	e9dd 3400 	ldrd	r3, r4, [sp]
   8900e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89012:	1b1c      	subs	r4, r3, r4
   89014:	2c00      	cmp	r4, #0
   89016:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8901a:	f101 0001 	add.w	r0, r1, #1
   8901e:	f77f ae2d 	ble.w	88c7c <_vfiprintf_r+0x400>
   89022:	2c10      	cmp	r4, #16
   89024:	f8df 9188 	ldr.w	r9, [pc, #392]	; 891b0 <_vfiprintf_r+0x934>
   89028:	dd2f      	ble.n	8908a <_vfiprintf_r+0x80e>
   8902a:	46d4      	mov	ip, sl
   8902c:	46b2      	mov	sl, r6
   8902e:	464e      	mov	r6, r9
   89030:	46c1      	mov	r9, r8
   89032:	46a8      	mov	r8, r5
   89034:	9d05      	ldr	r5, [sp, #20]
   89036:	e006      	b.n	89046 <_vfiprintf_r+0x7ca>
   89038:	1c88      	adds	r0, r1, #2
   8903a:	4619      	mov	r1, r3
   8903c:	f10c 0c08 	add.w	ip, ip, #8
   89040:	3c10      	subs	r4, #16
   89042:	2c10      	cmp	r4, #16
   89044:	dd1c      	ble.n	89080 <_vfiprintf_r+0x804>
   89046:	2010      	movs	r0, #16
   89048:	1c4b      	adds	r3, r1, #1
   8904a:	3210      	adds	r2, #16
   8904c:	2b07      	cmp	r3, #7
   8904e:	9210      	str	r2, [sp, #64]	; 0x40
   89050:	f8cc 6000 	str.w	r6, [ip]
   89054:	f8cc 0004 	str.w	r0, [ip, #4]
   89058:	930f      	str	r3, [sp, #60]	; 0x3c
   8905a:	dded      	ble.n	89038 <_vfiprintf_r+0x7bc>
   8905c:	b30a      	cbz	r2, 890a2 <_vfiprintf_r+0x826>
   8905e:	4659      	mov	r1, fp
   89060:	4628      	mov	r0, r5
   89062:	aa0e      	add	r2, sp, #56	; 0x38
   89064:	f7ff fbce 	bl	88804 <__sprint_r.part.0>
   89068:	2800      	cmp	r0, #0
   8906a:	f47f ada1 	bne.w	88bb0 <_vfiprintf_r+0x334>
   8906e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89072:	3c10      	subs	r4, #16
   89074:	2c10      	cmp	r4, #16
   89076:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8907a:	f101 0001 	add.w	r0, r1, #1
   8907e:	dce2      	bgt.n	89046 <_vfiprintf_r+0x7ca>
   89080:	4645      	mov	r5, r8
   89082:	46c8      	mov	r8, r9
   89084:	46b1      	mov	r9, r6
   89086:	4656      	mov	r6, sl
   89088:	46e2      	mov	sl, ip
   8908a:	4422      	add	r2, r4
   8908c:	2807      	cmp	r0, #7
   8908e:	e9ca 9400 	strd	r9, r4, [sl]
   89092:	9210      	str	r2, [sp, #64]	; 0x40
   89094:	900f      	str	r0, [sp, #60]	; 0x3c
   89096:	f300 80d3 	bgt.w	89240 <_vfiprintf_r+0x9c4>
   8909a:	f10a 0a08 	add.w	sl, sl, #8
   8909e:	3001      	adds	r0, #1
   890a0:	e5ec      	b.n	88c7c <_vfiprintf_r+0x400>
   890a2:	2001      	movs	r0, #1
   890a4:	4611      	mov	r1, r2
   890a6:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   890aa:	e7c9      	b.n	89040 <_vfiprintf_r+0x7c4>
   890ac:	f04f 0c01 	mov.w	ip, #1
   890b0:	4611      	mov	r1, r2
   890b2:	a811      	add	r0, sp, #68	; 0x44
   890b4:	e770      	b.n	88f98 <_vfiprintf_r+0x71c>
   890b6:	2a00      	cmp	r2, #0
   890b8:	f000 80d3 	beq.w	89262 <_vfiprintf_r+0x9e6>
   890bc:	4659      	mov	r1, fp
   890be:	9805      	ldr	r0, [sp, #20]
   890c0:	aa0e      	add	r2, sp, #56	; 0x38
   890c2:	f7ff fb9f 	bl	88804 <__sprint_r.part.0>
   890c6:	2800      	cmp	r0, #0
   890c8:	f47f ad72 	bne.w	88bb0 <_vfiprintf_r+0x334>
   890cc:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   890d0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   890d4:	1c48      	adds	r0, r1, #1
   890d6:	e5ac      	b.n	88c32 <_vfiprintf_r+0x3b6>
   890d8:	2202      	movs	r2, #2
   890da:	2001      	movs	r0, #1
   890dc:	ab0d      	add	r3, sp, #52	; 0x34
   890de:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   890e2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   890e6:	4601      	mov	r1, r0
   890e8:	f10a 0a08 	add.w	sl, sl, #8
   890ec:	1c48      	adds	r0, r1, #1
   890ee:	e5bb      	b.n	88c68 <_vfiprintf_r+0x3ec>
   890f0:	2c10      	cmp	r4, #16
   890f2:	f340 8214 	ble.w	8951e <_vfiprintf_r+0xca2>
   890f6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   890fa:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 891b4 <_vfiprintf_r+0x938>
   890fe:	46d4      	mov	ip, sl
   89100:	46b2      	mov	sl, r6
   89102:	464e      	mov	r6, r9
   89104:	46c1      	mov	r9, r8
   89106:	46a8      	mov	r8, r5
   89108:	9d05      	ldr	r5, [sp, #20]
   8910a:	e006      	b.n	8911a <_vfiprintf_r+0x89e>
   8910c:	1c99      	adds	r1, r3, #2
   8910e:	4603      	mov	r3, r0
   89110:	f10c 0c08 	add.w	ip, ip, #8
   89114:	3c10      	subs	r4, #16
   89116:	2c10      	cmp	r4, #16
   89118:	dd1c      	ble.n	89154 <_vfiprintf_r+0x8d8>
   8911a:	2110      	movs	r1, #16
   8911c:	1c58      	adds	r0, r3, #1
   8911e:	3210      	adds	r2, #16
   89120:	2807      	cmp	r0, #7
   89122:	9210      	str	r2, [sp, #64]	; 0x40
   89124:	f8cc 6000 	str.w	r6, [ip]
   89128:	f8cc 1004 	str.w	r1, [ip, #4]
   8912c:	900f      	str	r0, [sp, #60]	; 0x3c
   8912e:	dded      	ble.n	8910c <_vfiprintf_r+0x890>
   89130:	b30a      	cbz	r2, 89176 <_vfiprintf_r+0x8fa>
   89132:	4659      	mov	r1, fp
   89134:	4628      	mov	r0, r5
   89136:	aa0e      	add	r2, sp, #56	; 0x38
   89138:	f7ff fb64 	bl	88804 <__sprint_r.part.0>
   8913c:	2800      	cmp	r0, #0
   8913e:	f47f ad37 	bne.w	88bb0 <_vfiprintf_r+0x334>
   89142:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   89146:	3c10      	subs	r4, #16
   89148:	2c10      	cmp	r4, #16
   8914a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8914e:	f103 0101 	add.w	r1, r3, #1
   89152:	dce2      	bgt.n	8911a <_vfiprintf_r+0x89e>
   89154:	4645      	mov	r5, r8
   89156:	46c8      	mov	r8, r9
   89158:	46b1      	mov	r9, r6
   8915a:	4656      	mov	r6, sl
   8915c:	46e2      	mov	sl, ip
   8915e:	4422      	add	r2, r4
   89160:	2907      	cmp	r1, #7
   89162:	e9ca 9400 	strd	r9, r4, [sl]
   89166:	9210      	str	r2, [sp, #64]	; 0x40
   89168:	910f      	str	r1, [sp, #60]	; 0x3c
   8916a:	f300 80a8 	bgt.w	892be <_vfiprintf_r+0xa42>
   8916e:	f10a 0a08 	add.w	sl, sl, #8
   89172:	1c48      	adds	r0, r1, #1
   89174:	e54b      	b.n	88c0e <_vfiprintf_r+0x392>
   89176:	4613      	mov	r3, r2
   89178:	2101      	movs	r1, #1
   8917a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   8917e:	e7c9      	b.n	89114 <_vfiprintf_r+0x898>
   89180:	0778      	lsls	r0, r7, #29
   89182:	920f      	str	r2, [sp, #60]	; 0x3c
   89184:	d554      	bpl.n	89230 <_vfiprintf_r+0x9b4>
   89186:	9b02      	ldr	r3, [sp, #8]
   89188:	1b5c      	subs	r4, r3, r5
   8918a:	2c00      	cmp	r4, #0
   8918c:	dd50      	ble.n	89230 <_vfiprintf_r+0x9b4>
   8918e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89192:	2c10      	cmp	r4, #16
   89194:	f340 81d7 	ble.w	89546 <_vfiprintf_r+0xcca>
   89198:	f8df 9018 	ldr.w	r9, [pc, #24]	; 891b4 <_vfiprintf_r+0x938>
   8919c:	2610      	movs	r6, #16
   8919e:	464b      	mov	r3, r9
   891a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   891a2:	46a9      	mov	r9, r5
   891a4:	9f05      	ldr	r7, [sp, #20]
   891a6:	461d      	mov	r5, r3
   891a8:	e00d      	b.n	891c6 <_vfiprintf_r+0x94a>
   891aa:	bf00      	nop
   891ac:	0008d4f4 	.word	0x0008d4f4
   891b0:	0008d558 	.word	0x0008d558
   891b4:	0008d548 	.word	0x0008d548
   891b8:	1c88      	adds	r0, r1, #2
   891ba:	4619      	mov	r1, r3
   891bc:	f10a 0a08 	add.w	sl, sl, #8
   891c0:	3c10      	subs	r4, #16
   891c2:	2c10      	cmp	r4, #16
   891c4:	dd19      	ble.n	891fa <_vfiprintf_r+0x97e>
   891c6:	1c4b      	adds	r3, r1, #1
   891c8:	3210      	adds	r2, #16
   891ca:	2b07      	cmp	r3, #7
   891cc:	e9ca 5600 	strd	r5, r6, [sl]
   891d0:	9210      	str	r2, [sp, #64]	; 0x40
   891d2:	930f      	str	r3, [sp, #60]	; 0x3c
   891d4:	ddf0      	ble.n	891b8 <_vfiprintf_r+0x93c>
   891d6:	b332      	cbz	r2, 89226 <_vfiprintf_r+0x9aa>
   891d8:	4659      	mov	r1, fp
   891da:	4638      	mov	r0, r7
   891dc:	aa0e      	add	r2, sp, #56	; 0x38
   891de:	f7ff fb11 	bl	88804 <__sprint_r.part.0>
   891e2:	2800      	cmp	r0, #0
   891e4:	f47f ace4 	bne.w	88bb0 <_vfiprintf_r+0x334>
   891e8:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   891ec:	3c10      	subs	r4, #16
   891ee:	2c10      	cmp	r4, #16
   891f0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   891f4:	f101 0001 	add.w	r0, r1, #1
   891f8:	dce5      	bgt.n	891c6 <_vfiprintf_r+0x94a>
   891fa:	462b      	mov	r3, r5
   891fc:	464d      	mov	r5, r9
   891fe:	4699      	mov	r9, r3
   89200:	4422      	add	r2, r4
   89202:	2807      	cmp	r0, #7
   89204:	e9ca 9400 	strd	r9, r4, [sl]
   89208:	9210      	str	r2, [sp, #64]	; 0x40
   8920a:	900f      	str	r0, [sp, #60]	; 0x3c
   8920c:	f77f ad53 	ble.w	88cb6 <_vfiprintf_r+0x43a>
   89210:	b172      	cbz	r2, 89230 <_vfiprintf_r+0x9b4>
   89212:	4659      	mov	r1, fp
   89214:	9805      	ldr	r0, [sp, #20]
   89216:	aa0e      	add	r2, sp, #56	; 0x38
   89218:	f7ff faf4 	bl	88804 <__sprint_r.part.0>
   8921c:	2800      	cmp	r0, #0
   8921e:	f47f acc7 	bne.w	88bb0 <_vfiprintf_r+0x334>
   89222:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89224:	e547      	b.n	88cb6 <_vfiprintf_r+0x43a>
   89226:	2001      	movs	r0, #1
   89228:	4611      	mov	r1, r2
   8922a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8922e:	e7c7      	b.n	891c0 <_vfiprintf_r+0x944>
   89230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   89234:	42aa      	cmp	r2, r5
   89236:	bfac      	ite	ge
   89238:	189b      	addge	r3, r3, r2
   8923a:	195b      	addlt	r3, r3, r5
   8923c:	9303      	str	r3, [sp, #12]
   8923e:	e544      	b.n	88cca <_vfiprintf_r+0x44e>
   89240:	2a00      	cmp	r2, #0
   89242:	f43f ae88 	beq.w	88f56 <_vfiprintf_r+0x6da>
   89246:	4659      	mov	r1, fp
   89248:	9805      	ldr	r0, [sp, #20]
   8924a:	aa0e      	add	r2, sp, #56	; 0x38
   8924c:	f7ff fada 	bl	88804 <__sprint_r.part.0>
   89250:	2800      	cmp	r0, #0
   89252:	f47f acad 	bne.w	88bb0 <_vfiprintf_r+0x334>
   89256:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   8925a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8925e:	3001      	adds	r0, #1
   89260:	e50c      	b.n	88c7c <_vfiprintf_r+0x400>
   89262:	9b07      	ldr	r3, [sp, #28]
   89264:	2b00      	cmp	r3, #0
   89266:	d16b      	bne.n	89340 <_vfiprintf_r+0xac4>
   89268:	2001      	movs	r0, #1
   8926a:	4611      	mov	r1, r2
   8926c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89270:	e4fa      	b.n	88c68 <_vfiprintf_r+0x3ec>
   89272:	920f      	str	r2, [sp, #60]	; 0x3c
   89274:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89278:	e481      	b.n	88b7e <_vfiprintf_r+0x302>
   8927a:	9b00      	ldr	r3, [sp, #0]
   8927c:	2b00      	cmp	r3, #0
   8927e:	f47f ac05 	bne.w	88a8c <_vfiprintf_r+0x210>
   89282:	464f      	mov	r7, r9
   89284:	2300      	movs	r3, #0
   89286:	ae3a      	add	r6, sp, #232	; 0xe8
   89288:	9300      	str	r3, [sp, #0]
   8928a:	9301      	str	r3, [sp, #4]
   8928c:	e406      	b.n	88a9c <_vfiprintf_r+0x220>
   8928e:	f854 2b04 	ldr.w	r2, [r4], #4
   89292:	f019 0f10 	tst.w	r9, #16
   89296:	f04f 0301 	mov.w	r3, #1
   8929a:	9404      	str	r4, [sp, #16]
   8929c:	d132      	bne.n	89304 <_vfiprintf_r+0xa88>
   8929e:	f019 0f40 	tst.w	r9, #64	; 0x40
   892a2:	d02b      	beq.n	892fc <_vfiprintf_r+0xa80>
   892a4:	2500      	movs	r5, #0
   892a6:	b294      	uxth	r4, r2
   892a8:	e439      	b.n	88b1e <_vfiprintf_r+0x2a2>
   892aa:	232d      	movs	r3, #45	; 0x2d
   892ac:	4264      	negs	r4, r4
   892ae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   892b2:	46b9      	mov	r9, r7
   892b4:	f04f 0301 	mov.w	r3, #1
   892b8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   892bc:	e433      	b.n	88b26 <_vfiprintf_r+0x2aa>
   892be:	2a00      	cmp	r2, #0
   892c0:	d06f      	beq.n	893a2 <_vfiprintf_r+0xb26>
   892c2:	4659      	mov	r1, fp
   892c4:	9805      	ldr	r0, [sp, #20]
   892c6:	aa0e      	add	r2, sp, #56	; 0x38
   892c8:	f7ff fa9c 	bl	88804 <__sprint_r.part.0>
   892cc:	2800      	cmp	r0, #0
   892ce:	f47f ac6f 	bne.w	88bb0 <_vfiprintf_r+0x334>
   892d2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   892d6:	e497      	b.n	88c08 <_vfiprintf_r+0x38c>
   892d8:	ae3a      	add	r6, sp, #232	; 0xe8
   892da:	f7ff bbdf 	b.w	88a9c <_vfiprintf_r+0x220>
   892de:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   892e2:	f001 fed7 	bl	8b094 <__retarget_lock_acquire_recursive>
   892e6:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   892ea:	b28a      	uxth	r2, r1
   892ec:	f7ff badd 	b.w	888aa <_vfiprintf_r+0x2e>
   892f0:	4661      	mov	r1, ip
   892f2:	f10a 0a08 	add.w	sl, sl, #8
   892f6:	f10c 0001 	add.w	r0, ip, #1
   892fa:	e4b9      	b.n	88c70 <_vfiprintf_r+0x3f4>
   892fc:	f419 7f00 	tst.w	r9, #512	; 0x200
   89300:	f040 80ef 	bne.w	894e2 <_vfiprintf_r+0xc66>
   89304:	4614      	mov	r4, r2
   89306:	2500      	movs	r5, #0
   89308:	e409      	b.n	88b1e <_vfiprintf_r+0x2a2>
   8930a:	05be      	lsls	r6, r7, #22
   8930c:	f100 80f7 	bmi.w	894fe <_vfiprintf_r+0xc82>
   89310:	461c      	mov	r4, r3
   89312:	2500      	movs	r5, #0
   89314:	e400      	b.n	88b18 <_vfiprintf_r+0x29c>
   89316:	05ba      	lsls	r2, r7, #22
   89318:	f100 80ea 	bmi.w	894f0 <_vfiprintf_r+0xc74>
   8931c:	17e5      	asrs	r5, r4, #31
   8931e:	9304      	str	r3, [sp, #16]
   89320:	4622      	mov	r2, r4
   89322:	462b      	mov	r3, r5
   89324:	f7ff bb9e 	b.w	88a64 <_vfiprintf_r+0x1e8>
   89328:	9b03      	ldr	r3, [sp, #12]
   8932a:	9c04      	ldr	r4, [sp, #16]
   8932c:	17dd      	asrs	r5, r3, #31
   8932e:	461a      	mov	r2, r3
   89330:	462b      	mov	r3, r5
   89332:	f854 1b04 	ldr.w	r1, [r4], #4
   89336:	e9c1 2300 	strd	r2, r3, [r1]
   8933a:	9404      	str	r4, [sp, #16]
   8933c:	f7ff badc 	b.w	888f8 <_vfiprintf_r+0x7c>
   89340:	2202      	movs	r2, #2
   89342:	ab0d      	add	r3, sp, #52	; 0x34
   89344:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   89348:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8934c:	e6cc      	b.n	890e8 <_vfiprintf_r+0x86c>
   8934e:	46b9      	mov	r9, r7
   89350:	e598      	b.n	88e84 <_vfiprintf_r+0x608>
   89352:	4a90      	ldr	r2, [pc, #576]	; (89594 <_vfiprintf_r+0xd18>)
   89354:	9208      	str	r2, [sp, #32]
   89356:	06bd      	lsls	r5, r7, #26
   89358:	9c04      	ldr	r4, [sp, #16]
   8935a:	d530      	bpl.n	893be <_vfiprintf_r+0xb42>
   8935c:	3407      	adds	r4, #7
   8935e:	f024 0207 	bic.w	r2, r4, #7
   89362:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   89366:	9204      	str	r2, [sp, #16]
   89368:	07fe      	lsls	r6, r7, #31
   8936a:	d509      	bpl.n	89380 <_vfiprintf_r+0xb04>
   8936c:	ea54 0205 	orrs.w	r2, r4, r5
   89370:	d006      	beq.n	89380 <_vfiprintf_r+0xb04>
   89372:	2230      	movs	r2, #48	; 0x30
   89374:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   89378:	f047 0702 	orr.w	r7, r7, #2
   8937c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   89380:	2302      	movs	r3, #2
   89382:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   89386:	f7ff bbca 	b.w	88b1e <_vfiprintf_r+0x2a2>
   8938a:	4a83      	ldr	r2, [pc, #524]	; (89598 <_vfiprintf_r+0xd1c>)
   8938c:	9208      	str	r2, [sp, #32]
   8938e:	e7e2      	b.n	89356 <_vfiprintf_r+0xada>
   89390:	4630      	mov	r0, r6
   89392:	f003 f871 	bl	8c478 <strlen>
   89396:	2300      	movs	r3, #0
   89398:	9404      	str	r4, [sp, #16]
   8939a:	9001      	str	r0, [sp, #4]
   8939c:	9300      	str	r3, [sp, #0]
   8939e:	f7ff bb7d 	b.w	88a9c <_vfiprintf_r+0x220>
   893a2:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   893a6:	2900      	cmp	r1, #0
   893a8:	f040 8089 	bne.w	894be <_vfiprintf_r+0xc42>
   893ac:	9b07      	ldr	r3, [sp, #28]
   893ae:	2b00      	cmp	r3, #0
   893b0:	f47f ae92 	bne.w	890d8 <_vfiprintf_r+0x85c>
   893b4:	4611      	mov	r1, r2
   893b6:	2001      	movs	r0, #1
   893b8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   893bc:	e458      	b.n	88c70 <_vfiprintf_r+0x3f4>
   893be:	f854 2b04 	ldr.w	r2, [r4], #4
   893c2:	9404      	str	r4, [sp, #16]
   893c4:	06fc      	lsls	r4, r7, #27
   893c6:	d407      	bmi.n	893d8 <_vfiprintf_r+0xb5c>
   893c8:	0678      	lsls	r0, r7, #25
   893ca:	d502      	bpl.n	893d2 <_vfiprintf_r+0xb56>
   893cc:	2500      	movs	r5, #0
   893ce:	b294      	uxth	r4, r2
   893d0:	e7ca      	b.n	89368 <_vfiprintf_r+0xaec>
   893d2:	05b9      	lsls	r1, r7, #22
   893d4:	f100 8089 	bmi.w	894ea <_vfiprintf_r+0xc6e>
   893d8:	4614      	mov	r4, r2
   893da:	2500      	movs	r5, #0
   893dc:	e7c4      	b.n	89368 <_vfiprintf_r+0xaec>
   893de:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   893e2:	f8cd 9004 	str.w	r9, [sp, #4]
   893e6:	f8cd 8018 	str.w	r8, [sp, #24]
   893ea:	2700      	movs	r7, #0
   893ec:	4698      	mov	r8, r3
   893ee:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   893f2:	ae3a      	add	r6, sp, #232	; 0xe8
   893f4:	e00b      	b.n	8940e <_vfiprintf_r+0xb92>
   893f6:	220a      	movs	r2, #10
   893f8:	2300      	movs	r3, #0
   893fa:	4620      	mov	r0, r4
   893fc:	4629      	mov	r1, r5
   893fe:	f7fd f9bd 	bl	8677c <__aeabi_uldivmod>
   89402:	2d00      	cmp	r5, #0
   89404:	bf08      	it	eq
   89406:	2c0a      	cmpeq	r4, #10
   89408:	d319      	bcc.n	8943e <_vfiprintf_r+0xbc2>
   8940a:	4604      	mov	r4, r0
   8940c:	460d      	mov	r5, r1
   8940e:	220a      	movs	r2, #10
   89410:	2300      	movs	r3, #0
   89412:	4620      	mov	r0, r4
   89414:	4629      	mov	r1, r5
   89416:	f7fd f9b1 	bl	8677c <__aeabi_uldivmod>
   8941a:	3230      	adds	r2, #48	; 0x30
   8941c:	f806 2c01 	strb.w	r2, [r6, #-1]
   89420:	3701      	adds	r7, #1
   89422:	3e01      	subs	r6, #1
   89424:	f1b8 0f00 	cmp.w	r8, #0
   89428:	d0e5      	beq.n	893f6 <_vfiprintf_r+0xb7a>
   8942a:	f899 3000 	ldrb.w	r3, [r9]
   8942e:	42bb      	cmp	r3, r7
   89430:	d1e1      	bne.n	893f6 <_vfiprintf_r+0xb7a>
   89432:	2fff      	cmp	r7, #255	; 0xff
   89434:	d0df      	beq.n	893f6 <_vfiprintf_r+0xb7a>
   89436:	2d00      	cmp	r5, #0
   89438:	bf08      	it	eq
   8943a:	2c0a      	cmpeq	r4, #10
   8943c:	d225      	bcs.n	8948a <_vfiprintf_r+0xc0e>
   8943e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   89442:	ab3a      	add	r3, sp, #232	; 0xe8
   89444:	f8dd 9004 	ldr.w	r9, [sp, #4]
   89448:	1b9b      	subs	r3, r3, r6
   8944a:	464f      	mov	r7, r9
   8944c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   89450:	9301      	str	r3, [sp, #4]
   89452:	f7ff bb23 	b.w	88a9c <_vfiprintf_r+0x220>
   89456:	46b9      	mov	r9, r7
   89458:	f7ff bb13 	b.w	88a82 <_vfiprintf_r+0x206>
   8945c:	2b01      	cmp	r3, #1
   8945e:	46b9      	mov	r9, r7
   89460:	f47f ad44 	bne.w	88eec <_vfiprintf_r+0x670>
   89464:	f7ff bb12 	b.w	88a8c <_vfiprintf_r+0x210>
   89468:	9c04      	ldr	r4, [sp, #16]
   8946a:	9a03      	ldr	r2, [sp, #12]
   8946c:	f854 3b04 	ldr.w	r3, [r4], #4
   89470:	601a      	str	r2, [r3, #0]
   89472:	9404      	str	r4, [sp, #16]
   89474:	f7ff ba40 	b.w	888f8 <_vfiprintf_r+0x7c>
   89478:	9d00      	ldr	r5, [sp, #0]
   8947a:	4e48      	ldr	r6, [pc, #288]	; (8959c <_vfiprintf_r+0xd20>)
   8947c:	2d06      	cmp	r5, #6
   8947e:	bf28      	it	cs
   89480:	2506      	movcs	r5, #6
   89482:	9404      	str	r4, [sp, #16]
   89484:	9501      	str	r5, [sp, #4]
   89486:	f7ff bbaf 	b.w	88be8 <_vfiprintf_r+0x36c>
   8948a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8948c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8948e:	1af6      	subs	r6, r6, r3
   89490:	461a      	mov	r2, r3
   89492:	4630      	mov	r0, r6
   89494:	f003 f81e 	bl	8c4d4 <strncpy>
   89498:	f899 3001 	ldrb.w	r3, [r9, #1]
   8949c:	b10b      	cbz	r3, 894a2 <_vfiprintf_r+0xc26>
   8949e:	f109 0901 	add.w	r9, r9, #1
   894a2:	220a      	movs	r2, #10
   894a4:	2300      	movs	r3, #0
   894a6:	4620      	mov	r0, r4
   894a8:	4629      	mov	r1, r5
   894aa:	f7fd f967 	bl	8677c <__aeabi_uldivmod>
   894ae:	2700      	movs	r7, #0
   894b0:	e7ab      	b.n	8940a <_vfiprintf_r+0xb8e>
   894b2:	2001      	movs	r0, #1
   894b4:	4611      	mov	r1, r2
   894b6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   894ba:	f7ff bbd9 	b.w	88c70 <_vfiprintf_r+0x3f4>
   894be:	2201      	movs	r2, #1
   894c0:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   894c4:	4610      	mov	r0, r2
   894c6:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   894ca:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   894ce:	f7ff bbac 	b.w	88c2a <_vfiprintf_r+0x3ae>
   894d2:	9c04      	ldr	r4, [sp, #16]
   894d4:	9a03      	ldr	r2, [sp, #12]
   894d6:	f854 3b04 	ldr.w	r3, [r4], #4
   894da:	801a      	strh	r2, [r3, #0]
   894dc:	9404      	str	r4, [sp, #16]
   894de:	f7ff ba0b 	b.w	888f8 <_vfiprintf_r+0x7c>
   894e2:	2500      	movs	r5, #0
   894e4:	b2d4      	uxtb	r4, r2
   894e6:	f7ff bb1a 	b.w	88b1e <_vfiprintf_r+0x2a2>
   894ea:	2500      	movs	r5, #0
   894ec:	b2d4      	uxtb	r4, r2
   894ee:	e73b      	b.n	89368 <_vfiprintf_r+0xaec>
   894f0:	b264      	sxtb	r4, r4
   894f2:	17e5      	asrs	r5, r4, #31
   894f4:	9304      	str	r3, [sp, #16]
   894f6:	4622      	mov	r2, r4
   894f8:	462b      	mov	r3, r5
   894fa:	f7ff bab3 	b.w	88a64 <_vfiprintf_r+0x1e8>
   894fe:	2500      	movs	r5, #0
   89500:	b2dc      	uxtb	r4, r3
   89502:	f7ff bb09 	b.w	88b18 <_vfiprintf_r+0x29c>
   89506:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8950a:	f001 fdc5 	bl	8b098 <__retarget_lock_release_recursive>
   8950e:	f7ff baec 	b.w	88aea <_vfiprintf_r+0x26e>
   89512:	9b00      	ldr	r3, [sp, #0]
   89514:	9404      	str	r4, [sp, #16]
   89516:	9301      	str	r3, [sp, #4]
   89518:	9000      	str	r0, [sp, #0]
   8951a:	f7ff babf 	b.w	88a9c <_vfiprintf_r+0x220>
   8951e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89522:	f8df 907c 	ldr.w	r9, [pc, #124]	; 895a0 <_vfiprintf_r+0xd24>
   89526:	3101      	adds	r1, #1
   89528:	e619      	b.n	8915e <_vfiprintf_r+0x8e2>
   8952a:	2200      	movs	r2, #0
   8952c:	9200      	str	r2, [sp, #0]
   8952e:	f7ff ba09 	b.w	88944 <_vfiprintf_r+0xc8>
   89532:	4659      	mov	r1, fp
   89534:	9805      	ldr	r0, [sp, #20]
   89536:	aa0e      	add	r2, sp, #56	; 0x38
   89538:	f7ff f964 	bl	88804 <__sprint_r.part.0>
   8953c:	2800      	cmp	r0, #0
   8953e:	f43f abd2 	beq.w	88ce6 <_vfiprintf_r+0x46a>
   89542:	f7ff bb36 	b.w	88bb2 <_vfiprintf_r+0x336>
   89546:	980f      	ldr	r0, [sp, #60]	; 0x3c
   89548:	f8df 9054 	ldr.w	r9, [pc, #84]	; 895a0 <_vfiprintf_r+0xd24>
   8954c:	3001      	adds	r0, #1
   8954e:	e657      	b.n	89200 <_vfiprintf_r+0x984>
   89550:	4684      	mov	ip, r0
   89552:	f8df 9050 	ldr.w	r9, [pc, #80]	; 895a4 <_vfiprintf_r+0xd28>
   89556:	e543      	b.n	88fe0 <_vfiprintf_r+0x764>
   89558:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8955c:	07db      	lsls	r3, r3, #31
   8955e:	d407      	bmi.n	89570 <_vfiprintf_r+0xcf4>
   89560:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89564:	059f      	lsls	r7, r3, #22
   89566:	d403      	bmi.n	89570 <_vfiprintf_r+0xcf4>
   89568:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8956c:	f001 fd94 	bl	8b098 <__retarget_lock_release_recursive>
   89570:	f04f 33ff 	mov.w	r3, #4294967295
   89574:	9303      	str	r3, [sp, #12]
   89576:	f7ff bb27 	b.w	88bc8 <_vfiprintf_r+0x34c>
   8957a:	9a04      	ldr	r2, [sp, #16]
   8957c:	f898 3001 	ldrb.w	r3, [r8, #1]
   89580:	f852 0b04 	ldr.w	r0, [r2], #4
   89584:	4688      	mov	r8, r1
   89586:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8958a:	9000      	str	r0, [sp, #0]
   8958c:	9204      	str	r2, [sp, #16]
   8958e:	f7ff b9d7 	b.w	88940 <_vfiprintf_r+0xc4>
   89592:	bf00      	nop
   89594:	0008d508 	.word	0x0008d508
   89598:	0008d4f4 	.word	0x0008d4f4
   8959c:	0008d51c 	.word	0x0008d51c
   895a0:	0008d548 	.word	0x0008d548
   895a4:	0008d558 	.word	0x0008d558

000895a8 <__sbprintf>:
   895a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   895aa:	460c      	mov	r4, r1
   895ac:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   895b0:	f04f 0e00 	mov.w	lr, #0
   895b4:	4615      	mov	r5, r2
   895b6:	4606      	mov	r6, r0
   895b8:	461f      	mov	r7, r3
   895ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
   895bc:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   895c0:	89e2      	ldrh	r2, [r4, #14]
   895c2:	8989      	ldrh	r1, [r1, #12]
   895c4:	9319      	str	r3, [sp, #100]	; 0x64
   895c6:	69e3      	ldr	r3, [r4, #28]
   895c8:	f8ad 200e 	strh.w	r2, [sp, #14]
   895cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   895ce:	f021 0102 	bic.w	r1, r1, #2
   895d2:	9307      	str	r3, [sp, #28]
   895d4:	a816      	add	r0, sp, #88	; 0x58
   895d6:	ab1a      	add	r3, sp, #104	; 0x68
   895d8:	f8ad 100c 	strh.w	r1, [sp, #12]
   895dc:	f8cd e018 	str.w	lr, [sp, #24]
   895e0:	9209      	str	r2, [sp, #36]	; 0x24
   895e2:	9300      	str	r3, [sp, #0]
   895e4:	9304      	str	r3, [sp, #16]
   895e6:	f8cd c008 	str.w	ip, [sp, #8]
   895ea:	f8cd c014 	str.w	ip, [sp, #20]
   895ee:	f001 fd4d 	bl	8b08c <__retarget_lock_init_recursive>
   895f2:	462a      	mov	r2, r5
   895f4:	463b      	mov	r3, r7
   895f6:	4669      	mov	r1, sp
   895f8:	4630      	mov	r0, r6
   895fa:	f7ff f93f 	bl	8887c <_vfiprintf_r>
   895fe:	1e05      	subs	r5, r0, #0
   89600:	db07      	blt.n	89612 <__sbprintf+0x6a>
   89602:	4630      	mov	r0, r6
   89604:	4669      	mov	r1, sp
   89606:	f001 f917 	bl	8a838 <_fflush_r>
   8960a:	2800      	cmp	r0, #0
   8960c:	bf18      	it	ne
   8960e:	f04f 35ff 	movne.w	r5, #4294967295
   89612:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   89616:	065b      	lsls	r3, r3, #25
   89618:	d503      	bpl.n	89622 <__sbprintf+0x7a>
   8961a:	89a3      	ldrh	r3, [r4, #12]
   8961c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89620:	81a3      	strh	r3, [r4, #12]
   89622:	9816      	ldr	r0, [sp, #88]	; 0x58
   89624:	f001 fd34 	bl	8b090 <__retarget_lock_close_recursive>
   89628:	4628      	mov	r0, r5
   8962a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8962e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00089630 <__swsetup_r>:
   89630:	b538      	push	{r3, r4, r5, lr}
   89632:	4b32      	ldr	r3, [pc, #200]	; (896fc <__swsetup_r+0xcc>)
   89634:	4605      	mov	r5, r0
   89636:	6818      	ldr	r0, [r3, #0]
   89638:	460c      	mov	r4, r1
   8963a:	b110      	cbz	r0, 89642 <__swsetup_r+0x12>
   8963c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8963e:	2b00      	cmp	r3, #0
   89640:	d03c      	beq.n	896bc <__swsetup_r+0x8c>
   89642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89646:	0718      	lsls	r0, r3, #28
   89648:	b29a      	uxth	r2, r3
   8964a:	d50c      	bpl.n	89666 <__swsetup_r+0x36>
   8964c:	6921      	ldr	r1, [r4, #16]
   8964e:	b1a9      	cbz	r1, 8967c <__swsetup_r+0x4c>
   89650:	f012 0001 	ands.w	r0, r2, #1
   89654:	d022      	beq.n	8969c <__swsetup_r+0x6c>
   89656:	2500      	movs	r5, #0
   89658:	6960      	ldr	r0, [r4, #20]
   8965a:	60a5      	str	r5, [r4, #8]
   8965c:	4240      	negs	r0, r0
   8965e:	61a0      	str	r0, [r4, #24]
   89660:	b311      	cbz	r1, 896a8 <__swsetup_r+0x78>
   89662:	2000      	movs	r0, #0
   89664:	bd38      	pop	{r3, r4, r5, pc}
   89666:	06d1      	lsls	r1, r2, #27
   89668:	d53f      	bpl.n	896ea <__swsetup_r+0xba>
   8966a:	0752      	lsls	r2, r2, #29
   8966c:	d429      	bmi.n	896c2 <__swsetup_r+0x92>
   8966e:	6921      	ldr	r1, [r4, #16]
   89670:	f043 0308 	orr.w	r3, r3, #8
   89674:	81a3      	strh	r3, [r4, #12]
   89676:	b29a      	uxth	r2, r3
   89678:	2900      	cmp	r1, #0
   8967a:	d1e9      	bne.n	89650 <__swsetup_r+0x20>
   8967c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   89680:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   89684:	d0e4      	beq.n	89650 <__swsetup_r+0x20>
   89686:	4628      	mov	r0, r5
   89688:	4621      	mov	r1, r4
   8968a:	f001 fd35 	bl	8b0f8 <__smakebuf_r>
   8968e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89692:	6921      	ldr	r1, [r4, #16]
   89694:	b29a      	uxth	r2, r3
   89696:	f012 0001 	ands.w	r0, r2, #1
   8969a:	d1dc      	bne.n	89656 <__swsetup_r+0x26>
   8969c:	0795      	lsls	r5, r2, #30
   8969e:	bf58      	it	pl
   896a0:	6960      	ldrpl	r0, [r4, #20]
   896a2:	60a0      	str	r0, [r4, #8]
   896a4:	2900      	cmp	r1, #0
   896a6:	d1dc      	bne.n	89662 <__swsetup_r+0x32>
   896a8:	0612      	lsls	r2, r2, #24
   896aa:	bf58      	it	pl
   896ac:	4608      	movpl	r0, r1
   896ae:	d5d9      	bpl.n	89664 <__swsetup_r+0x34>
   896b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   896b4:	f04f 30ff 	mov.w	r0, #4294967295
   896b8:	81a3      	strh	r3, [r4, #12]
   896ba:	bd38      	pop	{r3, r4, r5, pc}
   896bc:	f001 f918 	bl	8a8f0 <__sinit>
   896c0:	e7bf      	b.n	89642 <__swsetup_r+0x12>
   896c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   896c4:	b151      	cbz	r1, 896dc <__swsetup_r+0xac>
   896c6:	f104 0240 	add.w	r2, r4, #64	; 0x40
   896ca:	4291      	cmp	r1, r2
   896cc:	d004      	beq.n	896d8 <__swsetup_r+0xa8>
   896ce:	4628      	mov	r0, r5
   896d0:	f001 fa32 	bl	8ab38 <_free_r>
   896d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   896d8:	2200      	movs	r2, #0
   896da:	6322      	str	r2, [r4, #48]	; 0x30
   896dc:	2200      	movs	r2, #0
   896de:	6921      	ldr	r1, [r4, #16]
   896e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   896e4:	e9c4 1200 	strd	r1, r2, [r4]
   896e8:	e7c2      	b.n	89670 <__swsetup_r+0x40>
   896ea:	2209      	movs	r2, #9
   896ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   896f0:	602a      	str	r2, [r5, #0]
   896f2:	f04f 30ff 	mov.w	r0, #4294967295
   896f6:	81a3      	strh	r3, [r4, #12]
   896f8:	bd38      	pop	{r3, r4, r5, pc}
   896fa:	bf00      	nop
   896fc:	20000440 	.word	0x20000440

00089700 <register_fini>:
   89700:	4b02      	ldr	r3, [pc, #8]	; (8970c <register_fini+0xc>)
   89702:	b113      	cbz	r3, 8970a <register_fini+0xa>
   89704:	4802      	ldr	r0, [pc, #8]	; (89710 <register_fini+0x10>)
   89706:	f000 b805 	b.w	89714 <atexit>
   8970a:	4770      	bx	lr
   8970c:	00000000 	.word	0x00000000
   89710:	0008a965 	.word	0x0008a965

00089714 <atexit>:
   89714:	2300      	movs	r3, #0
   89716:	4601      	mov	r1, r0
   89718:	461a      	mov	r2, r3
   8971a:	4618      	mov	r0, r3
   8971c:	f003 b824 	b.w	8c768 <__register_exitproc>

00089720 <quorem>:
   89720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89724:	6903      	ldr	r3, [r0, #16]
   89726:	690d      	ldr	r5, [r1, #16]
   89728:	b083      	sub	sp, #12
   8972a:	42ab      	cmp	r3, r5
   8972c:	f2c0 8084 	blt.w	89838 <quorem+0x118>
   89730:	3d01      	subs	r5, #1
   89732:	f101 0614 	add.w	r6, r1, #20
   89736:	f100 0914 	add.w	r9, r0, #20
   8973a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   8973e:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89742:	3301      	adds	r3, #1
   89744:	468e      	mov	lr, r1
   89746:	00a9      	lsls	r1, r5, #2
   89748:	9100      	str	r1, [sp, #0]
   8974a:	429a      	cmp	r2, r3
   8974c:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   89750:	4682      	mov	sl, r0
   89752:	fbb2 f7f3 	udiv	r7, r2, r3
   89756:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   8975a:	9101      	str	r1, [sp, #4]
   8975c:	d337      	bcc.n	897ce <quorem+0xae>
   8975e:	2200      	movs	r2, #0
   89760:	46b4      	mov	ip, r6
   89762:	4614      	mov	r4, r2
   89764:	4648      	mov	r0, r9
   89766:	f85c 3b04 	ldr.w	r3, [ip], #4
   8976a:	6801      	ldr	r1, [r0, #0]
   8976c:	fa1f fb83 	uxth.w	fp, r3
   89770:	fb07 220b 	mla	r2, r7, fp, r2
   89774:	0c1b      	lsrs	r3, r3, #16
   89776:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   8977a:	fb07 bb03 	mla	fp, r7, r3, fp
   8977e:	b293      	uxth	r3, r2
   89780:	1ae3      	subs	r3, r4, r3
   89782:	b28a      	uxth	r2, r1
   89784:	fa1f f48b 	uxth.w	r4, fp
   89788:	4413      	add	r3, r2
   8978a:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   8978e:	eb04 4423 	add.w	r4, r4, r3, asr #16
   89792:	b29b      	uxth	r3, r3
   89794:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   89798:	45e0      	cmp	r8, ip
   8979a:	f840 3b04 	str.w	r3, [r0], #4
   8979e:	ea4f 4424 	mov.w	r4, r4, asr #16
   897a2:	ea4f 421b 	mov.w	r2, fp, lsr #16
   897a6:	d2de      	bcs.n	89766 <quorem+0x46>
   897a8:	9b00      	ldr	r3, [sp, #0]
   897aa:	f859 3003 	ldr.w	r3, [r9, r3]
   897ae:	b973      	cbnz	r3, 897ce <quorem+0xae>
   897b0:	9b01      	ldr	r3, [sp, #4]
   897b2:	3b04      	subs	r3, #4
   897b4:	4599      	cmp	r9, r3
   897b6:	d304      	bcc.n	897c2 <quorem+0xa2>
   897b8:	e007      	b.n	897ca <quorem+0xaa>
   897ba:	4599      	cmp	r9, r3
   897bc:	f105 35ff 	add.w	r5, r5, #4294967295
   897c0:	d203      	bcs.n	897ca <quorem+0xaa>
   897c2:	f853 2904 	ldr.w	r2, [r3], #-4
   897c6:	2a00      	cmp	r2, #0
   897c8:	d0f7      	beq.n	897ba <quorem+0x9a>
   897ca:	f8ca 5010 	str.w	r5, [sl, #16]
   897ce:	4671      	mov	r1, lr
   897d0:	4650      	mov	r0, sl
   897d2:	f002 faa9 	bl	8bd28 <__mcmp>
   897d6:	2800      	cmp	r0, #0
   897d8:	db2a      	blt.n	89830 <quorem+0x110>
   897da:	4648      	mov	r0, r9
   897dc:	2300      	movs	r3, #0
   897de:	3701      	adds	r7, #1
   897e0:	f856 1b04 	ldr.w	r1, [r6], #4
   897e4:	6804      	ldr	r4, [r0, #0]
   897e6:	b28a      	uxth	r2, r1
   897e8:	1a9a      	subs	r2, r3, r2
   897ea:	0c0b      	lsrs	r3, r1, #16
   897ec:	b2a1      	uxth	r1, r4
   897ee:	440a      	add	r2, r1
   897f0:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   897f4:	eb03 4322 	add.w	r3, r3, r2, asr #16
   897f8:	b292      	uxth	r2, r2
   897fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   897fe:	45b0      	cmp	r8, r6
   89800:	f840 2b04 	str.w	r2, [r0], #4
   89804:	ea4f 4323 	mov.w	r3, r3, asr #16
   89808:	d2ea      	bcs.n	897e0 <quorem+0xc0>
   8980a:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   8980e:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   89812:	b96a      	cbnz	r2, 89830 <quorem+0x110>
   89814:	3b04      	subs	r3, #4
   89816:	4599      	cmp	r9, r3
   89818:	d304      	bcc.n	89824 <quorem+0x104>
   8981a:	e007      	b.n	8982c <quorem+0x10c>
   8981c:	4599      	cmp	r9, r3
   8981e:	f105 35ff 	add.w	r5, r5, #4294967295
   89822:	d203      	bcs.n	8982c <quorem+0x10c>
   89824:	f853 2904 	ldr.w	r2, [r3], #-4
   89828:	2a00      	cmp	r2, #0
   8982a:	d0f7      	beq.n	8981c <quorem+0xfc>
   8982c:	f8ca 5010 	str.w	r5, [sl, #16]
   89830:	4638      	mov	r0, r7
   89832:	b003      	add	sp, #12
   89834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89838:	2000      	movs	r0, #0
   8983a:	b003      	add	sp, #12
   8983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00089840 <_dtoa_r>:
   89840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89844:	4616      	mov	r6, r2
   89846:	461f      	mov	r7, r3
   89848:	6c01      	ldr	r1, [r0, #64]	; 0x40
   8984a:	b09b      	sub	sp, #108	; 0x6c
   8984c:	4604      	mov	r4, r0
   8984e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   89852:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   89854:	b141      	cbz	r1, 89868 <_dtoa_r+0x28>
   89856:	2301      	movs	r3, #1
   89858:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8985a:	4093      	lsls	r3, r2
   8985c:	e9c1 2301 	strd	r2, r3, [r1, #4]
   89860:	f002 f834 	bl	8b8cc <_Bfree>
   89864:	2300      	movs	r3, #0
   89866:	6423      	str	r3, [r4, #64]	; 0x40
   89868:	f1b7 0900 	subs.w	r9, r7, #0
   8986c:	bfb4      	ite	lt
   8986e:	2301      	movlt	r3, #1
   89870:	2300      	movge	r3, #0
   89872:	602b      	str	r3, [r5, #0]
   89874:	4b76      	ldr	r3, [pc, #472]	; (89a50 <_dtoa_r+0x210>)
   89876:	bfbc      	itt	lt
   89878:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   8987c:	f8cd 9014 	strlt.w	r9, [sp, #20]
   89880:	ea33 0309 	bics.w	r3, r3, r9
   89884:	f000 80ab 	beq.w	899de <_dtoa_r+0x19e>
   89888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8988c:	4610      	mov	r0, r2
   8988e:	4619      	mov	r1, r3
   89890:	2200      	movs	r2, #0
   89892:	2300      	movs	r3, #0
   89894:	e9cd 0108 	strd	r0, r1, [sp, #32]
   89898:	f003 fd52 	bl	8d340 <__aeabi_dcmpeq>
   8989c:	4680      	mov	r8, r0
   8989e:	b170      	cbz	r0, 898be <_dtoa_r+0x7e>
   898a0:	2301      	movs	r3, #1
   898a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   898a4:	6013      	str	r3, [r2, #0]
   898a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   898a8:	2b00      	cmp	r3, #0
   898aa:	f000 82c2 	beq.w	89e32 <_dtoa_r+0x5f2>
   898ae:	4869      	ldr	r0, [pc, #420]	; (89a54 <_dtoa_r+0x214>)
   898b0:	6018      	str	r0, [r3, #0]
   898b2:	1e43      	subs	r3, r0, #1
   898b4:	9303      	str	r3, [sp, #12]
   898b6:	9803      	ldr	r0, [sp, #12]
   898b8:	b01b      	add	sp, #108	; 0x6c
   898ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   898be:	aa18      	add	r2, sp, #96	; 0x60
   898c0:	ab19      	add	r3, sp, #100	; 0x64
   898c2:	e9cd 3200 	strd	r3, r2, [sp]
   898c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   898ca:	4620      	mov	r0, r4
   898cc:	f002 faf2 	bl	8beb4 <__d2b>
   898d0:	ea5f 5519 	movs.w	r5, r9, lsr #20
   898d4:	4682      	mov	sl, r0
   898d6:	f040 8098 	bne.w	89a0a <_dtoa_r+0x1ca>
   898da:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   898de:	4445      	add	r5, r8
   898e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
   898e4:	2820      	cmp	r0, #32
   898e6:	f340 8390 	ble.w	8a00a <_dtoa_r+0x7ca>
   898ea:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   898ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
   898f2:	fa09 f903 	lsl.w	r9, r9, r3
   898f6:	fa26 f000 	lsr.w	r0, r6, r0
   898fa:	ea49 0000 	orr.w	r0, r9, r0
   898fe:	f003 fa3d 	bl	8cd7c <__aeabi_ui2d>
   89902:	2201      	movs	r2, #1
   89904:	3d01      	subs	r5, #1
   89906:	920f      	str	r2, [sp, #60]	; 0x3c
   89908:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8990c:	2200      	movs	r2, #0
   8990e:	4b52      	ldr	r3, [pc, #328]	; (89a58 <_dtoa_r+0x218>)
   89910:	f003 f8f6 	bl	8cb00 <__aeabi_dsub>
   89914:	a348      	add	r3, pc, #288	; (adr r3, 89a38 <_dtoa_r+0x1f8>)
   89916:	e9d3 2300 	ldrd	r2, r3, [r3]
   8991a:	f003 faa9 	bl	8ce70 <__aeabi_dmul>
   8991e:	a348      	add	r3, pc, #288	; (adr r3, 89a40 <_dtoa_r+0x200>)
   89920:	e9d3 2300 	ldrd	r2, r3, [r3]
   89924:	f003 f8ee 	bl	8cb04 <__adddf3>
   89928:	4606      	mov	r6, r0
   8992a:	4628      	mov	r0, r5
   8992c:	460f      	mov	r7, r1
   8992e:	f003 fa35 	bl	8cd9c <__aeabi_i2d>
   89932:	a345      	add	r3, pc, #276	; (adr r3, 89a48 <_dtoa_r+0x208>)
   89934:	e9d3 2300 	ldrd	r2, r3, [r3]
   89938:	f003 fa9a 	bl	8ce70 <__aeabi_dmul>
   8993c:	4602      	mov	r2, r0
   8993e:	460b      	mov	r3, r1
   89940:	4630      	mov	r0, r6
   89942:	4639      	mov	r1, r7
   89944:	f003 f8de 	bl	8cb04 <__adddf3>
   89948:	4606      	mov	r6, r0
   8994a:	460f      	mov	r7, r1
   8994c:	f003 fd40 	bl	8d3d0 <__aeabi_d2iz>
   89950:	2200      	movs	r2, #0
   89952:	4683      	mov	fp, r0
   89954:	2300      	movs	r3, #0
   89956:	4630      	mov	r0, r6
   89958:	4639      	mov	r1, r7
   8995a:	f003 fcfb 	bl	8d354 <__aeabi_dcmplt>
   8995e:	2800      	cmp	r0, #0
   89960:	f040 825a 	bne.w	89e18 <_dtoa_r+0x5d8>
   89964:	f1bb 0f16 	cmp.w	fp, #22
   89968:	f200 8248 	bhi.w	89dfc <_dtoa_r+0x5bc>
   8996c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89970:	4b3a      	ldr	r3, [pc, #232]	; (89a5c <_dtoa_r+0x21c>)
   89972:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   89976:	e9d3 2300 	ldrd	r2, r3, [r3]
   8997a:	f003 fceb 	bl	8d354 <__aeabi_dcmplt>
   8997e:	2800      	cmp	r0, #0
   89980:	d072      	beq.n	89a68 <_dtoa_r+0x228>
   89982:	2300      	movs	r3, #0
   89984:	eba8 0505 	sub.w	r5, r8, r5
   89988:	930e      	str	r3, [sp, #56]	; 0x38
   8998a:	1e6b      	subs	r3, r5, #1
   8998c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89990:	9306      	str	r3, [sp, #24]
   89992:	f100 823b 	bmi.w	89e0c <_dtoa_r+0x5cc>
   89996:	2300      	movs	r3, #0
   89998:	930b      	str	r3, [sp, #44]	; 0x2c
   8999a:	f1bb 0f00 	cmp.w	fp, #0
   8999e:	da6b      	bge.n	89a78 <_dtoa_r+0x238>
   899a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   899a2:	f8cd b01c 	str.w	fp, [sp, #28]
   899a6:	eba3 030b 	sub.w	r3, r3, fp
   899aa:	930b      	str	r3, [sp, #44]	; 0x2c
   899ac:	f1cb 0300 	rsb	r3, fp, #0
   899b0:	930d      	str	r3, [sp, #52]	; 0x34
   899b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   899b4:	f04f 0b00 	mov.w	fp, #0
   899b8:	2b09      	cmp	r3, #9
   899ba:	d866      	bhi.n	89a8a <_dtoa_r+0x24a>
   899bc:	2b05      	cmp	r3, #5
   899be:	f340 8322 	ble.w	8a006 <_dtoa_r+0x7c6>
   899c2:	2500      	movs	r5, #0
   899c4:	3b04      	subs	r3, #4
   899c6:	9324      	str	r3, [sp, #144]	; 0x90
   899c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   899ca:	3b02      	subs	r3, #2
   899cc:	2b03      	cmp	r3, #3
   899ce:	f200 866e 	bhi.w	8a6ae <_dtoa_r+0xe6e>
   899d2:	e8df f013 	tbh	[pc, r3, lsl #1]
   899d6:	043b      	.short	0x043b
   899d8:	042f0438 	.word	0x042f0438
   899dc:	0412      	.short	0x0412
   899de:	f242 730f 	movw	r3, #9999	; 0x270f
   899e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   899e4:	f3c9 0913 	ubfx	r9, r9, #0, #20
   899e8:	6013      	str	r3, [r2, #0]
   899ea:	ea59 0306 	orrs.w	r3, r9, r6
   899ee:	d11c      	bne.n	89a2a <_dtoa_r+0x1ea>
   899f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   899f2:	2b00      	cmp	r3, #0
   899f4:	f000 8657 	beq.w	8a6a6 <_dtoa_r+0xe66>
   899f8:	4b19      	ldr	r3, [pc, #100]	; (89a60 <_dtoa_r+0x220>)
   899fa:	9303      	str	r3, [sp, #12]
   899fc:	3308      	adds	r3, #8
   899fe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   89a00:	9803      	ldr	r0, [sp, #12]
   89a02:	6013      	str	r3, [r2, #0]
   89a04:	b01b      	add	sp, #108	; 0x6c
   89a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89a0a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   89a0e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89a12:	4608      	mov	r0, r1
   89a14:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   89a18:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   89a1c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   89a20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   89a24:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   89a28:	e770      	b.n	8990c <_dtoa_r+0xcc>
   89a2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89a2c:	2b00      	cmp	r3, #0
   89a2e:	f040 83c8 	bne.w	8a1c2 <_dtoa_r+0x982>
   89a32:	4b0c      	ldr	r3, [pc, #48]	; (89a64 <_dtoa_r+0x224>)
   89a34:	9303      	str	r3, [sp, #12]
   89a36:	e73e      	b.n	898b6 <_dtoa_r+0x76>
   89a38:	636f4361 	.word	0x636f4361
   89a3c:	3fd287a7 	.word	0x3fd287a7
   89a40:	8b60c8b3 	.word	0x8b60c8b3
   89a44:	3fc68a28 	.word	0x3fc68a28
   89a48:	509f79fb 	.word	0x509f79fb
   89a4c:	3fd34413 	.word	0x3fd34413
   89a50:	7ff00000 	.word	0x7ff00000
   89a54:	0008d525 	.word	0x0008d525
   89a58:	3ff80000 	.word	0x3ff80000
   89a5c:	0008d6c0 	.word	0x0008d6c0
   89a60:	0008d56c 	.word	0x0008d56c
   89a64:	0008d568 	.word	0x0008d568
   89a68:	eba8 0505 	sub.w	r5, r8, r5
   89a6c:	1e6b      	subs	r3, r5, #1
   89a6e:	9306      	str	r3, [sp, #24]
   89a70:	f100 84a9 	bmi.w	8a3c6 <_dtoa_r+0xb86>
   89a74:	900e      	str	r0, [sp, #56]	; 0x38
   89a76:	900b      	str	r0, [sp, #44]	; 0x2c
   89a78:	9b06      	ldr	r3, [sp, #24]
   89a7a:	445b      	add	r3, fp
   89a7c:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   89a80:	2300      	movs	r3, #0
   89a82:	930d      	str	r3, [sp, #52]	; 0x34
   89a84:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89a86:	2b09      	cmp	r3, #9
   89a88:	d998      	bls.n	899bc <_dtoa_r+0x17c>
   89a8a:	2300      	movs	r3, #0
   89a8c:	2501      	movs	r5, #1
   89a8e:	9324      	str	r3, [sp, #144]	; 0x90
   89a90:	9325      	str	r3, [sp, #148]	; 0x94
   89a92:	f04f 33ff 	mov.w	r3, #4294967295
   89a96:	950c      	str	r5, [sp, #48]	; 0x30
   89a98:	930a      	str	r3, [sp, #40]	; 0x28
   89a9a:	2100      	movs	r1, #0
   89a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89a9e:	6461      	str	r1, [r4, #68]	; 0x44
   89aa0:	9312      	str	r3, [sp, #72]	; 0x48
   89aa2:	4620      	mov	r0, r4
   89aa4:	f001 feec 	bl	8b880 <_Balloc>
   89aa8:	9003      	str	r0, [sp, #12]
   89aaa:	2800      	cmp	r0, #0
   89aac:	f000 8607 	beq.w	8a6be <_dtoa_r+0xe7e>
   89ab0:	9b03      	ldr	r3, [sp, #12]
   89ab2:	6423      	str	r3, [r4, #64]	; 0x40
   89ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89ab6:	2b0e      	cmp	r3, #14
   89ab8:	f200 80e9 	bhi.w	89c8e <_dtoa_r+0x44e>
   89abc:	2d00      	cmp	r5, #0
   89abe:	f000 80e6 	beq.w	89c8e <_dtoa_r+0x44e>
   89ac2:	9907      	ldr	r1, [sp, #28]
   89ac4:	2900      	cmp	r1, #0
   89ac6:	f340 8452 	ble.w	8a36e <_dtoa_r+0xb2e>
   89aca:	4bb5      	ldr	r3, [pc, #724]	; (89da0 <_dtoa_r+0x560>)
   89acc:	f001 020f 	and.w	r2, r1, #15
   89ad0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89ad4:	05c8      	lsls	r0, r1, #23
   89ad6:	ea4f 1521 	mov.w	r5, r1, asr #4
   89ada:	e9d3 6700 	ldrd	r6, r7, [r3]
   89ade:	f140 83ee 	bpl.w	8a2be <_dtoa_r+0xa7e>
   89ae2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89ae6:	4baf      	ldr	r3, [pc, #700]	; (89da4 <_dtoa_r+0x564>)
   89ae8:	f04f 0903 	mov.w	r9, #3
   89aec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   89af0:	f003 fae8 	bl	8d0c4 <__aeabi_ddiv>
   89af4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89af8:	f005 050f 	and.w	r5, r5, #15
   89afc:	b18d      	cbz	r5, 89b22 <_dtoa_r+0x2e2>
   89afe:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 89da4 <_dtoa_r+0x564>
   89b02:	07e9      	lsls	r1, r5, #31
   89b04:	d509      	bpl.n	89b1a <_dtoa_r+0x2da>
   89b06:	e9d8 2300 	ldrd	r2, r3, [r8]
   89b0a:	4630      	mov	r0, r6
   89b0c:	4639      	mov	r1, r7
   89b0e:	f003 f9af 	bl	8ce70 <__aeabi_dmul>
   89b12:	4606      	mov	r6, r0
   89b14:	460f      	mov	r7, r1
   89b16:	f109 0901 	add.w	r9, r9, #1
   89b1a:	106d      	asrs	r5, r5, #1
   89b1c:	f108 0808 	add.w	r8, r8, #8
   89b20:	d1ef      	bne.n	89b02 <_dtoa_r+0x2c2>
   89b22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89b26:	4632      	mov	r2, r6
   89b28:	463b      	mov	r3, r7
   89b2a:	f003 facb 	bl	8d0c4 <__aeabi_ddiv>
   89b2e:	4606      	mov	r6, r0
   89b30:	460f      	mov	r7, r1
   89b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89b34:	b143      	cbz	r3, 89b48 <_dtoa_r+0x308>
   89b36:	2200      	movs	r2, #0
   89b38:	4630      	mov	r0, r6
   89b3a:	4639      	mov	r1, r7
   89b3c:	4b9a      	ldr	r3, [pc, #616]	; (89da8 <_dtoa_r+0x568>)
   89b3e:	f003 fc09 	bl	8d354 <__aeabi_dcmplt>
   89b42:	2800      	cmp	r0, #0
   89b44:	f040 853b 	bne.w	8a5be <_dtoa_r+0xd7e>
   89b48:	4648      	mov	r0, r9
   89b4a:	f003 f927 	bl	8cd9c <__aeabi_i2d>
   89b4e:	4632      	mov	r2, r6
   89b50:	463b      	mov	r3, r7
   89b52:	f003 f98d 	bl	8ce70 <__aeabi_dmul>
   89b56:	4b95      	ldr	r3, [pc, #596]	; (89dac <_dtoa_r+0x56c>)
   89b58:	2200      	movs	r2, #0
   89b5a:	f002 ffd3 	bl	8cb04 <__adddf3>
   89b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89b60:	4680      	mov	r8, r0
   89b62:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89b66:	2b00      	cmp	r3, #0
   89b68:	f000 83ce 	beq.w	8a308 <_dtoa_r+0xac8>
   89b6c:	9b07      	ldr	r3, [sp, #28]
   89b6e:	9313      	str	r3, [sp, #76]	; 0x4c
   89b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89b72:	9310      	str	r3, [sp, #64]	; 0x40
   89b74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89b76:	2b00      	cmp	r3, #0
   89b78:	f000 84b7 	beq.w	8a4ea <_dtoa_r+0xcaa>
   89b7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89b7e:	4b88      	ldr	r3, [pc, #544]	; (89da0 <_dtoa_r+0x560>)
   89b80:	2000      	movs	r0, #0
   89b82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89b86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   89b8a:	4989      	ldr	r1, [pc, #548]	; (89db0 <_dtoa_r+0x570>)
   89b8c:	f003 fa9a 	bl	8d0c4 <__aeabi_ddiv>
   89b90:	4642      	mov	r2, r8
   89b92:	464b      	mov	r3, r9
   89b94:	f002 ffb4 	bl	8cb00 <__aeabi_dsub>
   89b98:	4602      	mov	r2, r0
   89b9a:	460b      	mov	r3, r1
   89b9c:	4630      	mov	r0, r6
   89b9e:	4639      	mov	r1, r7
   89ba0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   89ba4:	f003 fc14 	bl	8d3d0 <__aeabi_d2iz>
   89ba8:	4680      	mov	r8, r0
   89baa:	f003 f8f7 	bl	8cd9c <__aeabi_i2d>
   89bae:	4602      	mov	r2, r0
   89bb0:	460b      	mov	r3, r1
   89bb2:	4630      	mov	r0, r6
   89bb4:	4639      	mov	r1, r7
   89bb6:	f002 ffa3 	bl	8cb00 <__aeabi_dsub>
   89bba:	9d03      	ldr	r5, [sp, #12]
   89bbc:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89bc0:	4606      	mov	r6, r0
   89bc2:	460f      	mov	r7, r1
   89bc4:	4602      	mov	r2, r0
   89bc6:	f805 3b01 	strb.w	r3, [r5], #1
   89bca:	460b      	mov	r3, r1
   89bcc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   89bd0:	f003 fbde 	bl	8d390 <__aeabi_dcmpgt>
   89bd4:	2800      	cmp	r0, #0
   89bd6:	f040 853b 	bne.w	8a650 <_dtoa_r+0xe10>
   89bda:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   89bde:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   89be2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   89be6:	f04f 0900 	mov.w	r9, #0
   89bea:	9410      	str	r4, [sp, #64]	; 0x40
   89bec:	e02a      	b.n	89c44 <_dtoa_r+0x404>
   89bee:	f109 0901 	add.w	r9, r9, #1
   89bf2:	45c1      	cmp	r9, r8
   89bf4:	da48      	bge.n	89c88 <_dtoa_r+0x448>
   89bf6:	4650      	mov	r0, sl
   89bf8:	4659      	mov	r1, fp
   89bfa:	2200      	movs	r2, #0
   89bfc:	4b6d      	ldr	r3, [pc, #436]	; (89db4 <_dtoa_r+0x574>)
   89bfe:	f003 f937 	bl	8ce70 <__aeabi_dmul>
   89c02:	2200      	movs	r2, #0
   89c04:	4b6b      	ldr	r3, [pc, #428]	; (89db4 <_dtoa_r+0x574>)
   89c06:	4682      	mov	sl, r0
   89c08:	468b      	mov	fp, r1
   89c0a:	4630      	mov	r0, r6
   89c0c:	4639      	mov	r1, r7
   89c0e:	f003 f92f 	bl	8ce70 <__aeabi_dmul>
   89c12:	460f      	mov	r7, r1
   89c14:	4606      	mov	r6, r0
   89c16:	f003 fbdb 	bl	8d3d0 <__aeabi_d2iz>
   89c1a:	4604      	mov	r4, r0
   89c1c:	f003 f8be 	bl	8cd9c <__aeabi_i2d>
   89c20:	4602      	mov	r2, r0
   89c22:	460b      	mov	r3, r1
   89c24:	4630      	mov	r0, r6
   89c26:	4639      	mov	r1, r7
   89c28:	f002 ff6a 	bl	8cb00 <__aeabi_dsub>
   89c2c:	3430      	adds	r4, #48	; 0x30
   89c2e:	4652      	mov	r2, sl
   89c30:	465b      	mov	r3, fp
   89c32:	f805 4b01 	strb.w	r4, [r5], #1
   89c36:	4606      	mov	r6, r0
   89c38:	460f      	mov	r7, r1
   89c3a:	f003 fb8b 	bl	8d354 <__aeabi_dcmplt>
   89c3e:	2800      	cmp	r0, #0
   89c40:	f040 8503 	bne.w	8a64a <_dtoa_r+0xe0a>
   89c44:	4632      	mov	r2, r6
   89c46:	463b      	mov	r3, r7
   89c48:	2000      	movs	r0, #0
   89c4a:	4957      	ldr	r1, [pc, #348]	; (89da8 <_dtoa_r+0x568>)
   89c4c:	f002 ff58 	bl	8cb00 <__aeabi_dsub>
   89c50:	4652      	mov	r2, sl
   89c52:	465b      	mov	r3, fp
   89c54:	f003 fb7e 	bl	8d354 <__aeabi_dcmplt>
   89c58:	2800      	cmp	r0, #0
   89c5a:	d0c8      	beq.n	89bee <_dtoa_r+0x3ae>
   89c5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89c5e:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   89c62:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89c64:	9a03      	ldr	r2, [sp, #12]
   89c66:	9307      	str	r3, [sp, #28]
   89c68:	e002      	b.n	89c70 <_dtoa_r+0x430>
   89c6a:	4295      	cmp	r5, r2
   89c6c:	f000 84d2 	beq.w	8a614 <_dtoa_r+0xdd4>
   89c70:	46a9      	mov	r9, r5
   89c72:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   89c76:	2b39      	cmp	r3, #57	; 0x39
   89c78:	d0f7      	beq.n	89c6a <_dtoa_r+0x42a>
   89c7a:	3301      	adds	r3, #1
   89c7c:	b2db      	uxtb	r3, r3
   89c7e:	702b      	strb	r3, [r5, #0]
   89c80:	9b07      	ldr	r3, [sp, #28]
   89c82:	3301      	adds	r3, #1
   89c84:	9307      	str	r3, [sp, #28]
   89c86:	e1a0      	b.n	89fca <_dtoa_r+0x78a>
   89c88:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89c8a:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   89c8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   89c90:	2b00      	cmp	r3, #0
   89c92:	f2c0 8093 	blt.w	89dbc <_dtoa_r+0x57c>
   89c96:	9a07      	ldr	r2, [sp, #28]
   89c98:	2a0e      	cmp	r2, #14
   89c9a:	f300 808f 	bgt.w	89dbc <_dtoa_r+0x57c>
   89c9e:	4b40      	ldr	r3, [pc, #256]	; (89da0 <_dtoa_r+0x560>)
   89ca0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
   89ca8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   89cac:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89cae:	2b00      	cmp	r3, #0
   89cb0:	da1a      	bge.n	89ce8 <_dtoa_r+0x4a8>
   89cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89cb4:	2b00      	cmp	r3, #0
   89cb6:	dc17      	bgt.n	89ce8 <_dtoa_r+0x4a8>
   89cb8:	f040 833f 	bne.w	8a33a <_dtoa_r+0xafa>
   89cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   89cc0:	2200      	movs	r2, #0
   89cc2:	4b3d      	ldr	r3, [pc, #244]	; (89db8 <_dtoa_r+0x578>)
   89cc4:	f003 f8d4 	bl	8ce70 <__aeabi_dmul>
   89cc8:	4602      	mov	r2, r0
   89cca:	460b      	mov	r3, r1
   89ccc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89cd0:	f003 fb4a 	bl	8d368 <__aeabi_dcmple>
   89cd4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   89cd8:	4645      	mov	r5, r8
   89cda:	2800      	cmp	r0, #0
   89cdc:	f000 82cd 	beq.w	8a27a <_dtoa_r+0xa3a>
   89ce0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89ce2:	9f03      	ldr	r7, [sp, #12]
   89ce4:	43de      	mvns	r6, r3
   89ce6:	e2d0      	b.n	8a28a <_dtoa_r+0xa4a>
   89ce8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   89cec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89cf0:	4632      	mov	r2, r6
   89cf2:	463b      	mov	r3, r7
   89cf4:	f003 f9e6 	bl	8d0c4 <__aeabi_ddiv>
   89cf8:	f003 fb6a 	bl	8d3d0 <__aeabi_d2iz>
   89cfc:	4680      	mov	r8, r0
   89cfe:	f003 f84d 	bl	8cd9c <__aeabi_i2d>
   89d02:	4632      	mov	r2, r6
   89d04:	463b      	mov	r3, r7
   89d06:	f003 f8b3 	bl	8ce70 <__aeabi_dmul>
   89d0a:	460b      	mov	r3, r1
   89d0c:	4602      	mov	r2, r0
   89d0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89d12:	f002 fef5 	bl	8cb00 <__aeabi_dsub>
   89d16:	9d03      	ldr	r5, [sp, #12]
   89d18:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89d1c:	f805 3b01 	strb.w	r3, [r5], #1
   89d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89d22:	2b01      	cmp	r3, #1
   89d24:	f000 837f 	beq.w	8a426 <_dtoa_r+0xbe6>
   89d28:	f8cd a018 	str.w	sl, [sp, #24]
   89d2c:	f04f 0901 	mov.w	r9, #1
   89d30:	469b      	mov	fp, r3
   89d32:	46aa      	mov	sl, r5
   89d34:	9408      	str	r4, [sp, #32]
   89d36:	e01d      	b.n	89d74 <_dtoa_r+0x534>
   89d38:	4632      	mov	r2, r6
   89d3a:	463b      	mov	r3, r7
   89d3c:	4620      	mov	r0, r4
   89d3e:	4629      	mov	r1, r5
   89d40:	f003 f9c0 	bl	8d0c4 <__aeabi_ddiv>
   89d44:	f003 fb44 	bl	8d3d0 <__aeabi_d2iz>
   89d48:	4680      	mov	r8, r0
   89d4a:	f003 f827 	bl	8cd9c <__aeabi_i2d>
   89d4e:	4632      	mov	r2, r6
   89d50:	463b      	mov	r3, r7
   89d52:	f003 f88d 	bl	8ce70 <__aeabi_dmul>
   89d56:	f109 0901 	add.w	r9, r9, #1
   89d5a:	460b      	mov	r3, r1
   89d5c:	4602      	mov	r2, r0
   89d5e:	4629      	mov	r1, r5
   89d60:	4620      	mov	r0, r4
   89d62:	f002 fecd 	bl	8cb00 <__aeabi_dsub>
   89d66:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89d6a:	45cb      	cmp	fp, r9
   89d6c:	f80a 3b01 	strb.w	r3, [sl], #1
   89d70:	f000 8355 	beq.w	8a41e <_dtoa_r+0xbde>
   89d74:	2200      	movs	r2, #0
   89d76:	4b0f      	ldr	r3, [pc, #60]	; (89db4 <_dtoa_r+0x574>)
   89d78:	f003 f87a 	bl	8ce70 <__aeabi_dmul>
   89d7c:	2200      	movs	r2, #0
   89d7e:	2300      	movs	r3, #0
   89d80:	4604      	mov	r4, r0
   89d82:	460d      	mov	r5, r1
   89d84:	f003 fadc 	bl	8d340 <__aeabi_dcmpeq>
   89d88:	2800      	cmp	r0, #0
   89d8a:	d0d5      	beq.n	89d38 <_dtoa_r+0x4f8>
   89d8c:	4655      	mov	r5, sl
   89d8e:	9c08      	ldr	r4, [sp, #32]
   89d90:	f8dd a018 	ldr.w	sl, [sp, #24]
   89d94:	9b07      	ldr	r3, [sp, #28]
   89d96:	46a9      	mov	r9, r5
   89d98:	3301      	adds	r3, #1
   89d9a:	9307      	str	r3, [sp, #28]
   89d9c:	e115      	b.n	89fca <_dtoa_r+0x78a>
   89d9e:	bf00      	nop
   89da0:	0008d6c0 	.word	0x0008d6c0
   89da4:	0008d698 	.word	0x0008d698
   89da8:	3ff00000 	.word	0x3ff00000
   89dac:	401c0000 	.word	0x401c0000
   89db0:	3fe00000 	.word	0x3fe00000
   89db4:	40240000 	.word	0x40240000
   89db8:	40140000 	.word	0x40140000
   89dbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89dbe:	2a00      	cmp	r2, #0
   89dc0:	d03d      	beq.n	89e3e <_dtoa_r+0x5fe>
   89dc2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   89dc4:	2a01      	cmp	r2, #1
   89dc6:	f340 82bc 	ble.w	8a342 <_dtoa_r+0xb02>
   89dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89dcc:	1e5f      	subs	r7, r3, #1
   89dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89dd0:	42bb      	cmp	r3, r7
   89dd2:	f2c0 826e 	blt.w	8a2b2 <_dtoa_r+0xa72>
   89dd6:	1bdf      	subs	r7, r3, r7
   89dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89dda:	2b00      	cmp	r3, #0
   89ddc:	f2c0 8354 	blt.w	8a488 <_dtoa_r+0xc48>
   89de0:	9a06      	ldr	r2, [sp, #24]
   89de2:	4611      	mov	r1, r2
   89de4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   89de6:	4419      	add	r1, r3
   89de8:	4616      	mov	r6, r2
   89dea:	441a      	add	r2, r3
   89dec:	9106      	str	r1, [sp, #24]
   89dee:	920b      	str	r2, [sp, #44]	; 0x2c
   89df0:	2101      	movs	r1, #1
   89df2:	4620      	mov	r0, r4
   89df4:	f001 fe12 	bl	8ba1c <__i2b>
   89df8:	4605      	mov	r5, r0
   89dfa:	e023      	b.n	89e44 <_dtoa_r+0x604>
   89dfc:	2301      	movs	r3, #1
   89dfe:	eba8 0505 	sub.w	r5, r8, r5
   89e02:	930e      	str	r3, [sp, #56]	; 0x38
   89e04:	1e6b      	subs	r3, r5, #1
   89e06:	9306      	str	r3, [sp, #24]
   89e08:	f57f adc5 	bpl.w	89996 <_dtoa_r+0x156>
   89e0c:	f1c5 0301 	rsb	r3, r5, #1
   89e10:	930b      	str	r3, [sp, #44]	; 0x2c
   89e12:	2300      	movs	r3, #0
   89e14:	9306      	str	r3, [sp, #24]
   89e16:	e5c0      	b.n	8999a <_dtoa_r+0x15a>
   89e18:	4658      	mov	r0, fp
   89e1a:	f002 ffbf 	bl	8cd9c <__aeabi_i2d>
   89e1e:	4632      	mov	r2, r6
   89e20:	463b      	mov	r3, r7
   89e22:	f003 fa8d 	bl	8d340 <__aeabi_dcmpeq>
   89e26:	2800      	cmp	r0, #0
   89e28:	f47f ad9c 	bne.w	89964 <_dtoa_r+0x124>
   89e2c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89e30:	e598      	b.n	89964 <_dtoa_r+0x124>
   89e32:	4bc7      	ldr	r3, [pc, #796]	; (8a150 <_dtoa_r+0x910>)
   89e34:	9303      	str	r3, [sp, #12]
   89e36:	9803      	ldr	r0, [sp, #12]
   89e38:	b01b      	add	sp, #108	; 0x6c
   89e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89e3e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89e40:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   89e44:	2e00      	cmp	r6, #0
   89e46:	dd0c      	ble.n	89e62 <_dtoa_r+0x622>
   89e48:	9a06      	ldr	r2, [sp, #24]
   89e4a:	2a00      	cmp	r2, #0
   89e4c:	dd09      	ble.n	89e62 <_dtoa_r+0x622>
   89e4e:	42b2      	cmp	r2, r6
   89e50:	4613      	mov	r3, r2
   89e52:	bfa8      	it	ge
   89e54:	4633      	movge	r3, r6
   89e56:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89e58:	1af6      	subs	r6, r6, r3
   89e5a:	1ac9      	subs	r1, r1, r3
   89e5c:	1ad3      	subs	r3, r2, r3
   89e5e:	910b      	str	r1, [sp, #44]	; 0x2c
   89e60:	9306      	str	r3, [sp, #24]
   89e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89e64:	b1d3      	cbz	r3, 89e9c <_dtoa_r+0x65c>
   89e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89e68:	2b00      	cmp	r3, #0
   89e6a:	f000 81a3 	beq.w	8a1b4 <_dtoa_r+0x974>
   89e6e:	2f00      	cmp	r7, #0
   89e70:	dd10      	ble.n	89e94 <_dtoa_r+0x654>
   89e72:	4629      	mov	r1, r5
   89e74:	463a      	mov	r2, r7
   89e76:	4620      	mov	r0, r4
   89e78:	f001 fe96 	bl	8bba8 <__pow5mult>
   89e7c:	4652      	mov	r2, sl
   89e7e:	4601      	mov	r1, r0
   89e80:	4605      	mov	r5, r0
   89e82:	4620      	mov	r0, r4
   89e84:	f001 fde0 	bl	8ba48 <__multiply>
   89e88:	4603      	mov	r3, r0
   89e8a:	4651      	mov	r1, sl
   89e8c:	4620      	mov	r0, r4
   89e8e:	469a      	mov	sl, r3
   89e90:	f001 fd1c 	bl	8b8cc <_Bfree>
   89e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89e96:	1bda      	subs	r2, r3, r7
   89e98:	f040 818d 	bne.w	8a1b6 <_dtoa_r+0x976>
   89e9c:	2101      	movs	r1, #1
   89e9e:	4620      	mov	r0, r4
   89ea0:	f001 fdbc 	bl	8ba1c <__i2b>
   89ea4:	f1bb 0f00 	cmp.w	fp, #0
   89ea8:	4680      	mov	r8, r0
   89eaa:	f300 80b3 	bgt.w	8a014 <_dtoa_r+0x7d4>
   89eae:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89eb0:	2b01      	cmp	r3, #1
   89eb2:	f340 818a 	ble.w	8a1ca <_dtoa_r+0x98a>
   89eb6:	f04f 0900 	mov.w	r9, #0
   89eba:	2001      	movs	r0, #1
   89ebc:	f1bb 0f00 	cmp.w	fp, #0
   89ec0:	f040 80b4 	bne.w	8a02c <_dtoa_r+0x7ec>
   89ec4:	9a06      	ldr	r2, [sp, #24]
   89ec6:	4410      	add	r0, r2
   89ec8:	f010 001f 	ands.w	r0, r0, #31
   89ecc:	f000 8092 	beq.w	89ff4 <_dtoa_r+0x7b4>
   89ed0:	f1c0 0320 	rsb	r3, r0, #32
   89ed4:	2b04      	cmp	r3, #4
   89ed6:	f340 83f9 	ble.w	8a6cc <_dtoa_r+0xe8c>
   89eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89edc:	f1c0 001c 	rsb	r0, r0, #28
   89ee0:	4403      	add	r3, r0
   89ee2:	4402      	add	r2, r0
   89ee4:	930b      	str	r3, [sp, #44]	; 0x2c
   89ee6:	4406      	add	r6, r0
   89ee8:	9206      	str	r2, [sp, #24]
   89eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89eec:	2b00      	cmp	r3, #0
   89eee:	dd05      	ble.n	89efc <_dtoa_r+0x6bc>
   89ef0:	4651      	mov	r1, sl
   89ef2:	461a      	mov	r2, r3
   89ef4:	4620      	mov	r0, r4
   89ef6:	f001 fea3 	bl	8bc40 <__lshift>
   89efa:	4682      	mov	sl, r0
   89efc:	9b06      	ldr	r3, [sp, #24]
   89efe:	2b00      	cmp	r3, #0
   89f00:	dd05      	ble.n	89f0e <_dtoa_r+0x6ce>
   89f02:	4641      	mov	r1, r8
   89f04:	461a      	mov	r2, r3
   89f06:	4620      	mov	r0, r4
   89f08:	f001 fe9a 	bl	8bc40 <__lshift>
   89f0c:	4680      	mov	r8, r0
   89f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89f10:	2b00      	cmp	r3, #0
   89f12:	f040 8135 	bne.w	8a180 <_dtoa_r+0x940>
   89f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89f18:	2b00      	cmp	r3, #0
   89f1a:	f340 811b 	ble.w	8a154 <_dtoa_r+0x914>
   89f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89f20:	2b00      	cmp	r3, #0
   89f22:	f040 809a 	bne.w	8a05a <_dtoa_r+0x81a>
   89f26:	9b07      	ldr	r3, [sp, #28]
   89f28:	3301      	adds	r3, #1
   89f2a:	9307      	str	r3, [sp, #28]
   89f2c:	2601      	movs	r6, #1
   89f2e:	9f03      	ldr	r7, [sp, #12]
   89f30:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   89f34:	e007      	b.n	89f46 <_dtoa_r+0x706>
   89f36:	4651      	mov	r1, sl
   89f38:	2300      	movs	r3, #0
   89f3a:	220a      	movs	r2, #10
   89f3c:	4620      	mov	r0, r4
   89f3e:	f001 fccf 	bl	8b8e0 <__multadd>
   89f42:	4682      	mov	sl, r0
   89f44:	3601      	adds	r6, #1
   89f46:	4641      	mov	r1, r8
   89f48:	4650      	mov	r0, sl
   89f4a:	f7ff fbe9 	bl	89720 <quorem>
   89f4e:	454e      	cmp	r6, r9
   89f50:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89f54:	f807 3b01 	strb.w	r3, [r7], #1
   89f58:	dbed      	blt.n	89f36 <_dtoa_r+0x6f6>
   89f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89f5c:	2600      	movs	r6, #0
   89f5e:	2a00      	cmp	r2, #0
   89f60:	bfcc      	ite	gt
   89f62:	4693      	movgt	fp, r2
   89f64:	f04f 0b01 	movle.w	fp, #1
   89f68:	9a03      	ldr	r2, [sp, #12]
   89f6a:	4493      	add	fp, r2
   89f6c:	4651      	mov	r1, sl
   89f6e:	2201      	movs	r2, #1
   89f70:	4620      	mov	r0, r4
   89f72:	9304      	str	r3, [sp, #16]
   89f74:	f001 fe64 	bl	8bc40 <__lshift>
   89f78:	4641      	mov	r1, r8
   89f7a:	4682      	mov	sl, r0
   89f7c:	f001 fed4 	bl	8bd28 <__mcmp>
   89f80:	2800      	cmp	r0, #0
   89f82:	f340 81a8 	ble.w	8a2d6 <_dtoa_r+0xa96>
   89f86:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   89f8a:	9a03      	ldr	r2, [sp, #12]
   89f8c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89f90:	e004      	b.n	89f9c <_dtoa_r+0x75c>
   89f92:	455a      	cmp	r2, fp
   89f94:	f000 81e4 	beq.w	8a360 <_dtoa_r+0xb20>
   89f98:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89f9c:	2b39      	cmp	r3, #57	; 0x39
   89f9e:	f10b 0901 	add.w	r9, fp, #1
   89fa2:	d0f6      	beq.n	89f92 <_dtoa_r+0x752>
   89fa4:	3301      	adds	r3, #1
   89fa6:	f88b 3000 	strb.w	r3, [fp]
   89faa:	4641      	mov	r1, r8
   89fac:	4620      	mov	r0, r4
   89fae:	f001 fc8d 	bl	8b8cc <_Bfree>
   89fb2:	b155      	cbz	r5, 89fca <_dtoa_r+0x78a>
   89fb4:	b12e      	cbz	r6, 89fc2 <_dtoa_r+0x782>
   89fb6:	42ae      	cmp	r6, r5
   89fb8:	d003      	beq.n	89fc2 <_dtoa_r+0x782>
   89fba:	4631      	mov	r1, r6
   89fbc:	4620      	mov	r0, r4
   89fbe:	f001 fc85 	bl	8b8cc <_Bfree>
   89fc2:	4629      	mov	r1, r5
   89fc4:	4620      	mov	r0, r4
   89fc6:	f001 fc81 	bl	8b8cc <_Bfree>
   89fca:	4651      	mov	r1, sl
   89fcc:	4620      	mov	r0, r4
   89fce:	f001 fc7d 	bl	8b8cc <_Bfree>
   89fd2:	2300      	movs	r3, #0
   89fd4:	f889 3000 	strb.w	r3, [r9]
   89fd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89fda:	461a      	mov	r2, r3
   89fdc:	9b07      	ldr	r3, [sp, #28]
   89fde:	6013      	str	r3, [r2, #0]
   89fe0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89fe2:	2b00      	cmp	r3, #0
   89fe4:	f43f ac67 	beq.w	898b6 <_dtoa_r+0x76>
   89fe8:	9803      	ldr	r0, [sp, #12]
   89fea:	f8c3 9000 	str.w	r9, [r3]
   89fee:	b01b      	add	sp, #108	; 0x6c
   89ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89ff4:	201c      	movs	r0, #28
   89ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89ff8:	4406      	add	r6, r0
   89ffa:	4403      	add	r3, r0
   89ffc:	930b      	str	r3, [sp, #44]	; 0x2c
   89ffe:	9b06      	ldr	r3, [sp, #24]
   8a000:	4403      	add	r3, r0
   8a002:	9306      	str	r3, [sp, #24]
   8a004:	e771      	b.n	89eea <_dtoa_r+0x6aa>
   8a006:	2501      	movs	r5, #1
   8a008:	e4de      	b.n	899c8 <_dtoa_r+0x188>
   8a00a:	f1c0 0020 	rsb	r0, r0, #32
   8a00e:	fa06 f000 	lsl.w	r0, r6, r0
   8a012:	e474      	b.n	898fe <_dtoa_r+0xbe>
   8a014:	4601      	mov	r1, r0
   8a016:	465a      	mov	r2, fp
   8a018:	4620      	mov	r0, r4
   8a01a:	f001 fdc5 	bl	8bba8 <__pow5mult>
   8a01e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a020:	4680      	mov	r8, r0
   8a022:	2b01      	cmp	r3, #1
   8a024:	f340 81d1 	ble.w	8a3ca <_dtoa_r+0xb8a>
   8a028:	f04f 0900 	mov.w	r9, #0
   8a02c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8a030:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8a034:	6918      	ldr	r0, [r3, #16]
   8a036:	f001 fca1 	bl	8b97c <__hi0bits>
   8a03a:	f1c0 0020 	rsb	r0, r0, #32
   8a03e:	e741      	b.n	89ec4 <_dtoa_r+0x684>
   8a040:	4629      	mov	r1, r5
   8a042:	2300      	movs	r3, #0
   8a044:	220a      	movs	r2, #10
   8a046:	4620      	mov	r0, r4
   8a048:	f001 fc4a 	bl	8b8e0 <__multadd>
   8a04c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a04e:	4605      	mov	r5, r0
   8a050:	2b00      	cmp	r3, #0
   8a052:	f340 8315 	ble.w	8a680 <_dtoa_r+0xe40>
   8a056:	9707      	str	r7, [sp, #28]
   8a058:	930a      	str	r3, [sp, #40]	; 0x28
   8a05a:	2e00      	cmp	r6, #0
   8a05c:	f300 8122 	bgt.w	8a2a4 <_dtoa_r+0xa64>
   8a060:	f1b9 0f00 	cmp.w	r9, #0
   8a064:	f040 81f9 	bne.w	8a45a <_dtoa_r+0xc1a>
   8a068:	462f      	mov	r7, r5
   8a06a:	9903      	ldr	r1, [sp, #12]
   8a06c:	9b04      	ldr	r3, [sp, #16]
   8a06e:	460e      	mov	r6, r1
   8a070:	f003 0201 	and.w	r2, r3, #1
   8a074:	1e4b      	subs	r3, r1, #1
   8a076:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a078:	920c      	str	r2, [sp, #48]	; 0x30
   8a07a:	430a      	orrs	r2, r1
   8a07c:	920b      	str	r2, [sp, #44]	; 0x2c
   8a07e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a080:	441a      	add	r2, r3
   8a082:	920a      	str	r2, [sp, #40]	; 0x28
   8a084:	4641      	mov	r1, r8
   8a086:	4650      	mov	r0, sl
   8a088:	f7ff fb4a 	bl	89720 <quorem>
   8a08c:	4629      	mov	r1, r5
   8a08e:	4683      	mov	fp, r0
   8a090:	4650      	mov	r0, sl
   8a092:	f001 fe49 	bl	8bd28 <__mcmp>
   8a096:	463a      	mov	r2, r7
   8a098:	4641      	mov	r1, r8
   8a09a:	4681      	mov	r9, r0
   8a09c:	4620      	mov	r0, r4
   8a09e:	f001 fe61 	bl	8bd64 <__mdiff>
   8a0a2:	68c2      	ldr	r2, [r0, #12]
   8a0a4:	4601      	mov	r1, r0
   8a0a6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8a0aa:	2a00      	cmp	r2, #0
   8a0ac:	d142      	bne.n	8a134 <_dtoa_r+0x8f4>
   8a0ae:	9006      	str	r0, [sp, #24]
   8a0b0:	4650      	mov	r0, sl
   8a0b2:	9308      	str	r3, [sp, #32]
   8a0b4:	f001 fe38 	bl	8bd28 <__mcmp>
   8a0b8:	9906      	ldr	r1, [sp, #24]
   8a0ba:	9004      	str	r0, [sp, #16]
   8a0bc:	4620      	mov	r0, r4
   8a0be:	f001 fc05 	bl	8b8cc <_Bfree>
   8a0c2:	9a04      	ldr	r2, [sp, #16]
   8a0c4:	9b08      	ldr	r3, [sp, #32]
   8a0c6:	b91a      	cbnz	r2, 8a0d0 <_dtoa_r+0x890>
   8a0c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8a0ca:	2900      	cmp	r1, #0
   8a0cc:	f000 82cb 	beq.w	8a666 <_dtoa_r+0xe26>
   8a0d0:	f1b9 0f00 	cmp.w	r9, #0
   8a0d4:	f2c0 8185 	blt.w	8a3e2 <_dtoa_r+0xba2>
   8a0d8:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a0da:	ea41 0909 	orr.w	r9, r1, r9
   8a0de:	990c      	ldr	r1, [sp, #48]	; 0x30
   8a0e0:	ea51 0109 	orrs.w	r1, r1, r9
   8a0e4:	f000 817d 	beq.w	8a3e2 <_dtoa_r+0xba2>
   8a0e8:	2a00      	cmp	r2, #0
   8a0ea:	f300 81d1 	bgt.w	8a490 <_dtoa_r+0xc50>
   8a0ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a0f0:	f106 0901 	add.w	r9, r6, #1
   8a0f4:	4296      	cmp	r6, r2
   8a0f6:	46cb      	mov	fp, r9
   8a0f8:	7033      	strb	r3, [r6, #0]
   8a0fa:	f000 81e3 	beq.w	8a4c4 <_dtoa_r+0xc84>
   8a0fe:	4651      	mov	r1, sl
   8a100:	2300      	movs	r3, #0
   8a102:	220a      	movs	r2, #10
   8a104:	4620      	mov	r0, r4
   8a106:	f001 fbeb 	bl	8b8e0 <__multadd>
   8a10a:	42bd      	cmp	r5, r7
   8a10c:	4682      	mov	sl, r0
   8a10e:	4629      	mov	r1, r5
   8a110:	f04f 0300 	mov.w	r3, #0
   8a114:	f04f 020a 	mov.w	r2, #10
   8a118:	4620      	mov	r0, r4
   8a11a:	d012      	beq.n	8a142 <_dtoa_r+0x902>
   8a11c:	f001 fbe0 	bl	8b8e0 <__multadd>
   8a120:	4639      	mov	r1, r7
   8a122:	4605      	mov	r5, r0
   8a124:	2300      	movs	r3, #0
   8a126:	220a      	movs	r2, #10
   8a128:	4620      	mov	r0, r4
   8a12a:	f001 fbd9 	bl	8b8e0 <__multadd>
   8a12e:	464e      	mov	r6, r9
   8a130:	4607      	mov	r7, r0
   8a132:	e7a7      	b.n	8a084 <_dtoa_r+0x844>
   8a134:	4620      	mov	r0, r4
   8a136:	9304      	str	r3, [sp, #16]
   8a138:	f001 fbc8 	bl	8b8cc <_Bfree>
   8a13c:	2201      	movs	r2, #1
   8a13e:	9b04      	ldr	r3, [sp, #16]
   8a140:	e7c6      	b.n	8a0d0 <_dtoa_r+0x890>
   8a142:	f001 fbcd 	bl	8b8e0 <__multadd>
   8a146:	464e      	mov	r6, r9
   8a148:	4605      	mov	r5, r0
   8a14a:	4607      	mov	r7, r0
   8a14c:	e79a      	b.n	8a084 <_dtoa_r+0x844>
   8a14e:	bf00      	nop
   8a150:	0008d524 	.word	0x0008d524
   8a154:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a156:	2b02      	cmp	r3, #2
   8a158:	dc7e      	bgt.n	8a258 <_dtoa_r+0xa18>
   8a15a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a15c:	2b00      	cmp	r3, #0
   8a15e:	f47f af7c 	bne.w	8a05a <_dtoa_r+0x81a>
   8a162:	4641      	mov	r1, r8
   8a164:	4650      	mov	r0, sl
   8a166:	f7ff fadb 	bl	89720 <quorem>
   8a16a:	9a07      	ldr	r2, [sp, #28]
   8a16c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8a170:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8a174:	3201      	adds	r2, #1
   8a176:	2600      	movs	r6, #0
   8a178:	9207      	str	r2, [sp, #28]
   8a17a:	f80b 3b01 	strb.w	r3, [fp], #1
   8a17e:	e6f5      	b.n	89f6c <_dtoa_r+0x72c>
   8a180:	4641      	mov	r1, r8
   8a182:	4650      	mov	r0, sl
   8a184:	f001 fdd0 	bl	8bd28 <__mcmp>
   8a188:	2800      	cmp	r0, #0
   8a18a:	f6bf aec4 	bge.w	89f16 <_dtoa_r+0x6d6>
   8a18e:	4651      	mov	r1, sl
   8a190:	2300      	movs	r3, #0
   8a192:	220a      	movs	r2, #10
   8a194:	4620      	mov	r0, r4
   8a196:	f001 fba3 	bl	8b8e0 <__multadd>
   8a19a:	9b07      	ldr	r3, [sp, #28]
   8a19c:	4682      	mov	sl, r0
   8a19e:	1e5f      	subs	r7, r3, #1
   8a1a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a1a2:	2b00      	cmp	r3, #0
   8a1a4:	f47f af4c 	bne.w	8a040 <_dtoa_r+0x800>
   8a1a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a1aa:	2b00      	cmp	r3, #0
   8a1ac:	f340 8262 	ble.w	8a674 <_dtoa_r+0xe34>
   8a1b0:	930a      	str	r3, [sp, #40]	; 0x28
   8a1b2:	e6bb      	b.n	89f2c <_dtoa_r+0x6ec>
   8a1b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8a1b6:	4651      	mov	r1, sl
   8a1b8:	4620      	mov	r0, r4
   8a1ba:	f001 fcf5 	bl	8bba8 <__pow5mult>
   8a1be:	4682      	mov	sl, r0
   8a1c0:	e66c      	b.n	89e9c <_dtoa_r+0x65c>
   8a1c2:	4bba      	ldr	r3, [pc, #744]	; (8a4ac <_dtoa_r+0xc6c>)
   8a1c4:	9303      	str	r3, [sp, #12]
   8a1c6:	3303      	adds	r3, #3
   8a1c8:	e419      	b.n	899fe <_dtoa_r+0x1be>
   8a1ca:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a1ce:	2900      	cmp	r1, #0
   8a1d0:	f47f ae71 	bne.w	89eb6 <_dtoa_r+0x676>
   8a1d4:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a1d8:	2b00      	cmp	r3, #0
   8a1da:	f47f ae6c 	bne.w	89eb6 <_dtoa_r+0x676>
   8a1de:	4bb4      	ldr	r3, [pc, #720]	; (8a4b0 <_dtoa_r+0xc70>)
   8a1e0:	4013      	ands	r3, r2
   8a1e2:	2b00      	cmp	r3, #0
   8a1e4:	f000 822a 	beq.w	8a63c <_dtoa_r+0xdfc>
   8a1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a1ea:	f04f 0901 	mov.w	r9, #1
   8a1ee:	3301      	adds	r3, #1
   8a1f0:	930b      	str	r3, [sp, #44]	; 0x2c
   8a1f2:	9b06      	ldr	r3, [sp, #24]
   8a1f4:	3301      	adds	r3, #1
   8a1f6:	9306      	str	r3, [sp, #24]
   8a1f8:	e65f      	b.n	89eba <_dtoa_r+0x67a>
   8a1fa:	2301      	movs	r3, #1
   8a1fc:	930c      	str	r3, [sp, #48]	; 0x30
   8a1fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a200:	9a07      	ldr	r2, [sp, #28]
   8a202:	4413      	add	r3, r2
   8a204:	9312      	str	r3, [sp, #72]	; 0x48
   8a206:	3301      	adds	r3, #1
   8a208:	2b01      	cmp	r3, #1
   8a20a:	461e      	mov	r6, r3
   8a20c:	bfb8      	it	lt
   8a20e:	2601      	movlt	r6, #1
   8a210:	930a      	str	r3, [sp, #40]	; 0x28
   8a212:	2100      	movs	r1, #0
   8a214:	2e17      	cmp	r6, #23
   8a216:	6461      	str	r1, [r4, #68]	; 0x44
   8a218:	f77f ac43 	ble.w	89aa2 <_dtoa_r+0x262>
   8a21c:	2201      	movs	r2, #1
   8a21e:	2304      	movs	r3, #4
   8a220:	005b      	lsls	r3, r3, #1
   8a222:	f103 0014 	add.w	r0, r3, #20
   8a226:	42b0      	cmp	r0, r6
   8a228:	4611      	mov	r1, r2
   8a22a:	f102 0201 	add.w	r2, r2, #1
   8a22e:	d9f7      	bls.n	8a220 <_dtoa_r+0x9e0>
   8a230:	6461      	str	r1, [r4, #68]	; 0x44
   8a232:	e436      	b.n	89aa2 <_dtoa_r+0x262>
   8a234:	2301      	movs	r3, #1
   8a236:	930c      	str	r3, [sp, #48]	; 0x30
   8a238:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a23a:	2b00      	cmp	r3, #0
   8a23c:	dd46      	ble.n	8a2cc <_dtoa_r+0xa8c>
   8a23e:	461e      	mov	r6, r3
   8a240:	9312      	str	r3, [sp, #72]	; 0x48
   8a242:	930a      	str	r3, [sp, #40]	; 0x28
   8a244:	e7e5      	b.n	8a212 <_dtoa_r+0x9d2>
   8a246:	2300      	movs	r3, #0
   8a248:	930c      	str	r3, [sp, #48]	; 0x30
   8a24a:	e7d8      	b.n	8a1fe <_dtoa_r+0x9be>
   8a24c:	2300      	movs	r3, #0
   8a24e:	930c      	str	r3, [sp, #48]	; 0x30
   8a250:	e7f2      	b.n	8a238 <_dtoa_r+0x9f8>
   8a252:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a254:	9707      	str	r7, [sp, #28]
   8a256:	930a      	str	r3, [sp, #40]	; 0x28
   8a258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a25a:	2b00      	cmp	r3, #0
   8a25c:	f47f ad40 	bne.w	89ce0 <_dtoa_r+0x4a0>
   8a260:	4641      	mov	r1, r8
   8a262:	2205      	movs	r2, #5
   8a264:	4620      	mov	r0, r4
   8a266:	f001 fb3b 	bl	8b8e0 <__multadd>
   8a26a:	4680      	mov	r8, r0
   8a26c:	4650      	mov	r0, sl
   8a26e:	4641      	mov	r1, r8
   8a270:	f001 fd5a 	bl	8bd28 <__mcmp>
   8a274:	2800      	cmp	r0, #0
   8a276:	f77f ad33 	ble.w	89ce0 <_dtoa_r+0x4a0>
   8a27a:	9f03      	ldr	r7, [sp, #12]
   8a27c:	2231      	movs	r2, #49	; 0x31
   8a27e:	463b      	mov	r3, r7
   8a280:	9e07      	ldr	r6, [sp, #28]
   8a282:	f803 2b01 	strb.w	r2, [r3], #1
   8a286:	3601      	adds	r6, #1
   8a288:	9303      	str	r3, [sp, #12]
   8a28a:	4641      	mov	r1, r8
   8a28c:	4620      	mov	r0, r4
   8a28e:	f001 fb1d 	bl	8b8cc <_Bfree>
   8a292:	1c73      	adds	r3, r6, #1
   8a294:	f8dd 900c 	ldr.w	r9, [sp, #12]
   8a298:	9307      	str	r3, [sp, #28]
   8a29a:	9703      	str	r7, [sp, #12]
   8a29c:	2d00      	cmp	r5, #0
   8a29e:	f47f ae90 	bne.w	89fc2 <_dtoa_r+0x782>
   8a2a2:	e692      	b.n	89fca <_dtoa_r+0x78a>
   8a2a4:	4629      	mov	r1, r5
   8a2a6:	4632      	mov	r2, r6
   8a2a8:	4620      	mov	r0, r4
   8a2aa:	f001 fcc9 	bl	8bc40 <__lshift>
   8a2ae:	4605      	mov	r5, r0
   8a2b0:	e6d6      	b.n	8a060 <_dtoa_r+0x820>
   8a2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a2b4:	970d      	str	r7, [sp, #52]	; 0x34
   8a2b6:	1afb      	subs	r3, r7, r3
   8a2b8:	449b      	add	fp, r3
   8a2ba:	2700      	movs	r7, #0
   8a2bc:	e58c      	b.n	89dd8 <_dtoa_r+0x598>
   8a2be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8a2c2:	f04f 0902 	mov.w	r9, #2
   8a2c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8a2ca:	e417      	b.n	89afc <_dtoa_r+0x2bc>
   8a2cc:	2301      	movs	r3, #1
   8a2ce:	9325      	str	r3, [sp, #148]	; 0x94
   8a2d0:	930a      	str	r3, [sp, #40]	; 0x28
   8a2d2:	f7ff bbe2 	b.w	89a9a <_dtoa_r+0x25a>
   8a2d6:	d103      	bne.n	8a2e0 <_dtoa_r+0xaa0>
   8a2d8:	9b04      	ldr	r3, [sp, #16]
   8a2da:	07db      	lsls	r3, r3, #31
   8a2dc:	f53f ae53 	bmi.w	89f86 <_dtoa_r+0x746>
   8a2e0:	46d9      	mov	r9, fp
   8a2e2:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8a2e6:	2b30      	cmp	r3, #48	; 0x30
   8a2e8:	d0fa      	beq.n	8a2e0 <_dtoa_r+0xaa0>
   8a2ea:	e65e      	b.n	89faa <_dtoa_r+0x76a>
   8a2ec:	4648      	mov	r0, r9
   8a2ee:	f002 fd55 	bl	8cd9c <__aeabi_i2d>
   8a2f2:	4632      	mov	r2, r6
   8a2f4:	463b      	mov	r3, r7
   8a2f6:	f002 fdbb 	bl	8ce70 <__aeabi_dmul>
   8a2fa:	2200      	movs	r2, #0
   8a2fc:	4b6d      	ldr	r3, [pc, #436]	; (8a4b4 <_dtoa_r+0xc74>)
   8a2fe:	f002 fc01 	bl	8cb04 <__adddf3>
   8a302:	4680      	mov	r8, r0
   8a304:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a308:	4630      	mov	r0, r6
   8a30a:	4639      	mov	r1, r7
   8a30c:	2200      	movs	r2, #0
   8a30e:	4b6a      	ldr	r3, [pc, #424]	; (8a4b8 <_dtoa_r+0xc78>)
   8a310:	f002 fbf6 	bl	8cb00 <__aeabi_dsub>
   8a314:	4642      	mov	r2, r8
   8a316:	464b      	mov	r3, r9
   8a318:	4606      	mov	r6, r0
   8a31a:	460f      	mov	r7, r1
   8a31c:	f003 f838 	bl	8d390 <__aeabi_dcmpgt>
   8a320:	2800      	cmp	r0, #0
   8a322:	f040 8187 	bne.w	8a634 <_dtoa_r+0xdf4>
   8a326:	4642      	mov	r2, r8
   8a328:	4630      	mov	r0, r6
   8a32a:	4639      	mov	r1, r7
   8a32c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   8a330:	f003 f810 	bl	8d354 <__aeabi_dcmplt>
   8a334:	2800      	cmp	r0, #0
   8a336:	f43f acaa 	beq.w	89c8e <_dtoa_r+0x44e>
   8a33a:	f04f 0800 	mov.w	r8, #0
   8a33e:	4645      	mov	r5, r8
   8a340:	e4ce      	b.n	89ce0 <_dtoa_r+0x4a0>
   8a342:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8a344:	2a00      	cmp	r2, #0
   8a346:	f000 80c3 	beq.w	8a4d0 <_dtoa_r+0xc90>
   8a34a:	9a06      	ldr	r2, [sp, #24]
   8a34c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8a350:	441a      	add	r2, r3
   8a352:	9206      	str	r2, [sp, #24]
   8a354:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a356:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a358:	4616      	mov	r6, r2
   8a35a:	441a      	add	r2, r3
   8a35c:	920b      	str	r2, [sp, #44]	; 0x2c
   8a35e:	e547      	b.n	89df0 <_dtoa_r+0x5b0>
   8a360:	2331      	movs	r3, #49	; 0x31
   8a362:	9a07      	ldr	r2, [sp, #28]
   8a364:	3201      	adds	r2, #1
   8a366:	9207      	str	r2, [sp, #28]
   8a368:	9a03      	ldr	r2, [sp, #12]
   8a36a:	7013      	strb	r3, [r2, #0]
   8a36c:	e61d      	b.n	89faa <_dtoa_r+0x76a>
   8a36e:	f000 814b 	beq.w	8a608 <_dtoa_r+0xdc8>
   8a372:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a376:	9b07      	ldr	r3, [sp, #28]
   8a378:	425d      	negs	r5, r3
   8a37a:	4b50      	ldr	r3, [pc, #320]	; (8a4bc <_dtoa_r+0xc7c>)
   8a37c:	f005 020f 	and.w	r2, r5, #15
   8a380:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a384:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a388:	f002 fd72 	bl	8ce70 <__aeabi_dmul>
   8a38c:	112d      	asrs	r5, r5, #4
   8a38e:	4606      	mov	r6, r0
   8a390:	460f      	mov	r7, r1
   8a392:	f000 817d 	beq.w	8a690 <_dtoa_r+0xe50>
   8a396:	2300      	movs	r3, #0
   8a398:	f04f 0902 	mov.w	r9, #2
   8a39c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8a4c0 <_dtoa_r+0xc80>
   8a3a0:	07ea      	lsls	r2, r5, #31
   8a3a2:	d505      	bpl.n	8a3b0 <_dtoa_r+0xb70>
   8a3a4:	e9d8 2300 	ldrd	r2, r3, [r8]
   8a3a8:	f002 fd62 	bl	8ce70 <__aeabi_dmul>
   8a3ac:	2301      	movs	r3, #1
   8a3ae:	4499      	add	r9, r3
   8a3b0:	106d      	asrs	r5, r5, #1
   8a3b2:	f108 0808 	add.w	r8, r8, #8
   8a3b6:	d1f3      	bne.n	8a3a0 <_dtoa_r+0xb60>
   8a3b8:	2b00      	cmp	r3, #0
   8a3ba:	f43f abba 	beq.w	89b32 <_dtoa_r+0x2f2>
   8a3be:	4606      	mov	r6, r0
   8a3c0:	460f      	mov	r7, r1
   8a3c2:	f7ff bbb6 	b.w	89b32 <_dtoa_r+0x2f2>
   8a3c6:	900e      	str	r0, [sp, #56]	; 0x38
   8a3c8:	e520      	b.n	89e0c <_dtoa_r+0x5cc>
   8a3ca:	9b04      	ldr	r3, [sp, #16]
   8a3cc:	2b00      	cmp	r3, #0
   8a3ce:	f47f ae2b 	bne.w	8a028 <_dtoa_r+0x7e8>
   8a3d2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a3d6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a3da:	2b00      	cmp	r3, #0
   8a3dc:	f43f aeff 	beq.w	8a1de <_dtoa_r+0x99e>
   8a3e0:	e622      	b.n	8a028 <_dtoa_r+0x7e8>
   8a3e2:	2a00      	cmp	r2, #0
   8a3e4:	dd12      	ble.n	8a40c <_dtoa_r+0xbcc>
   8a3e6:	4651      	mov	r1, sl
   8a3e8:	2201      	movs	r2, #1
   8a3ea:	4620      	mov	r0, r4
   8a3ec:	9304      	str	r3, [sp, #16]
   8a3ee:	f001 fc27 	bl	8bc40 <__lshift>
   8a3f2:	4641      	mov	r1, r8
   8a3f4:	4682      	mov	sl, r0
   8a3f6:	f001 fc97 	bl	8bd28 <__mcmp>
   8a3fa:	2800      	cmp	r0, #0
   8a3fc:	9b04      	ldr	r3, [sp, #16]
   8a3fe:	f340 812c 	ble.w	8a65a <_dtoa_r+0xe1a>
   8a402:	2b39      	cmp	r3, #57	; 0x39
   8a404:	f000 810c 	beq.w	8a620 <_dtoa_r+0xde0>
   8a408:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8a40c:	46b1      	mov	r9, r6
   8a40e:	f809 3b01 	strb.w	r3, [r9], #1
   8a412:	9b07      	ldr	r3, [sp, #28]
   8a414:	462e      	mov	r6, r5
   8a416:	3301      	adds	r3, #1
   8a418:	463d      	mov	r5, r7
   8a41a:	9307      	str	r3, [sp, #28]
   8a41c:	e5c5      	b.n	89faa <_dtoa_r+0x76a>
   8a41e:	4655      	mov	r5, sl
   8a420:	9c08      	ldr	r4, [sp, #32]
   8a422:	f8dd a018 	ldr.w	sl, [sp, #24]
   8a426:	4602      	mov	r2, r0
   8a428:	460b      	mov	r3, r1
   8a42a:	f002 fb6b 	bl	8cb04 <__adddf3>
   8a42e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a432:	4606      	mov	r6, r0
   8a434:	460f      	mov	r7, r1
   8a436:	f002 ffab 	bl	8d390 <__aeabi_dcmpgt>
   8a43a:	b960      	cbnz	r0, 8a456 <_dtoa_r+0xc16>
   8a43c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a440:	4630      	mov	r0, r6
   8a442:	4639      	mov	r1, r7
   8a444:	f002 ff7c 	bl	8d340 <__aeabi_dcmpeq>
   8a448:	2800      	cmp	r0, #0
   8a44a:	f43f aca3 	beq.w	89d94 <_dtoa_r+0x554>
   8a44e:	f018 0f01 	tst.w	r8, #1
   8a452:	f43f ac9f 	beq.w	89d94 <_dtoa_r+0x554>
   8a456:	9a03      	ldr	r2, [sp, #12]
   8a458:	e40a      	b.n	89c70 <_dtoa_r+0x430>
   8a45a:	4620      	mov	r0, r4
   8a45c:	6869      	ldr	r1, [r5, #4]
   8a45e:	f001 fa0f 	bl	8b880 <_Balloc>
   8a462:	4606      	mov	r6, r0
   8a464:	2800      	cmp	r0, #0
   8a466:	f000 8117 	beq.w	8a698 <_dtoa_r+0xe58>
   8a46a:	692b      	ldr	r3, [r5, #16]
   8a46c:	f105 010c 	add.w	r1, r5, #12
   8a470:	3302      	adds	r3, #2
   8a472:	009a      	lsls	r2, r3, #2
   8a474:	300c      	adds	r0, #12
   8a476:	f7fc fb35 	bl	86ae4 <memcpy>
   8a47a:	4631      	mov	r1, r6
   8a47c:	2201      	movs	r2, #1
   8a47e:	4620      	mov	r0, r4
   8a480:	f001 fbde 	bl	8bc40 <__lshift>
   8a484:	4607      	mov	r7, r0
   8a486:	e5f0      	b.n	8a06a <_dtoa_r+0x82a>
   8a488:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8a48c:	1a9e      	subs	r6, r3, r2
   8a48e:	e4af      	b.n	89df0 <_dtoa_r+0x5b0>
   8a490:	2b39      	cmp	r3, #57	; 0x39
   8a492:	f000 80c5 	beq.w	8a620 <_dtoa_r+0xde0>
   8a496:	46b1      	mov	r9, r6
   8a498:	3301      	adds	r3, #1
   8a49a:	f809 3b01 	strb.w	r3, [r9], #1
   8a49e:	9b07      	ldr	r3, [sp, #28]
   8a4a0:	462e      	mov	r6, r5
   8a4a2:	3301      	adds	r3, #1
   8a4a4:	463d      	mov	r5, r7
   8a4a6:	9307      	str	r3, [sp, #28]
   8a4a8:	e57f      	b.n	89faa <_dtoa_r+0x76a>
   8a4aa:	bf00      	nop
   8a4ac:	0008d568 	.word	0x0008d568
   8a4b0:	7ff00000 	.word	0x7ff00000
   8a4b4:	401c0000 	.word	0x401c0000
   8a4b8:	40140000 	.word	0x40140000
   8a4bc:	0008d6c0 	.word	0x0008d6c0
   8a4c0:	0008d698 	.word	0x0008d698
   8a4c4:	9a07      	ldr	r2, [sp, #28]
   8a4c6:	462e      	mov	r6, r5
   8a4c8:	3201      	adds	r2, #1
   8a4ca:	463d      	mov	r5, r7
   8a4cc:	9207      	str	r2, [sp, #28]
   8a4ce:	e54d      	b.n	89f6c <_dtoa_r+0x72c>
   8a4d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8a4d2:	9a06      	ldr	r2, [sp, #24]
   8a4d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8a4d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8a4da:	441a      	add	r2, r3
   8a4dc:	9206      	str	r2, [sp, #24]
   8a4de:	460a      	mov	r2, r1
   8a4e0:	441a      	add	r2, r3
   8a4e2:	460e      	mov	r6, r1
   8a4e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a4e6:	920b      	str	r2, [sp, #44]	; 0x2c
   8a4e8:	e482      	b.n	89df0 <_dtoa_r+0x5b0>
   8a4ea:	9810      	ldr	r0, [sp, #64]	; 0x40
   8a4ec:	497f      	ldr	r1, [pc, #508]	; (8a6ec <_dtoa_r+0xeac>)
   8a4ee:	4642      	mov	r2, r8
   8a4f0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8a4f4:	464b      	mov	r3, r9
   8a4f6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8a4fa:	f002 fcb9 	bl	8ce70 <__aeabi_dmul>
   8a4fe:	4602      	mov	r2, r0
   8a500:	460b      	mov	r3, r1
   8a502:	4630      	mov	r0, r6
   8a504:	4639      	mov	r1, r7
   8a506:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8a50a:	f002 ff61 	bl	8d3d0 <__aeabi_d2iz>
   8a50e:	4680      	mov	r8, r0
   8a510:	f002 fc44 	bl	8cd9c <__aeabi_i2d>
   8a514:	460b      	mov	r3, r1
   8a516:	4602      	mov	r2, r0
   8a518:	4639      	mov	r1, r7
   8a51a:	4630      	mov	r0, r6
   8a51c:	f002 faf0 	bl	8cb00 <__aeabi_dsub>
   8a520:	4606      	mov	r6, r0
   8a522:	9810      	ldr	r0, [sp, #64]	; 0x40
   8a524:	9d03      	ldr	r5, [sp, #12]
   8a526:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a52a:	2801      	cmp	r0, #1
   8a52c:	460f      	mov	r7, r1
   8a52e:	f805 3b01 	strb.w	r3, [r5], #1
   8a532:	d01e      	beq.n	8a572 <_dtoa_r+0xd32>
   8a534:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8a536:	9a03      	ldr	r2, [sp, #12]
   8a538:	4413      	add	r3, r2
   8a53a:	4698      	mov	r8, r3
   8a53c:	2200      	movs	r2, #0
   8a53e:	4b6c      	ldr	r3, [pc, #432]	; (8a6f0 <_dtoa_r+0xeb0>)
   8a540:	4630      	mov	r0, r6
   8a542:	4639      	mov	r1, r7
   8a544:	f002 fc94 	bl	8ce70 <__aeabi_dmul>
   8a548:	460f      	mov	r7, r1
   8a54a:	4606      	mov	r6, r0
   8a54c:	f002 ff40 	bl	8d3d0 <__aeabi_d2iz>
   8a550:	4681      	mov	r9, r0
   8a552:	f002 fc23 	bl	8cd9c <__aeabi_i2d>
   8a556:	4602      	mov	r2, r0
   8a558:	460b      	mov	r3, r1
   8a55a:	4630      	mov	r0, r6
   8a55c:	4639      	mov	r1, r7
   8a55e:	f002 facf 	bl	8cb00 <__aeabi_dsub>
   8a562:	f109 0930 	add.w	r9, r9, #48	; 0x30
   8a566:	f805 9b01 	strb.w	r9, [r5], #1
   8a56a:	4545      	cmp	r5, r8
   8a56c:	4606      	mov	r6, r0
   8a56e:	460f      	mov	r7, r1
   8a570:	d1e4      	bne.n	8a53c <_dtoa_r+0xcfc>
   8a572:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   8a576:	2200      	movs	r2, #0
   8a578:	4b5e      	ldr	r3, [pc, #376]	; (8a6f4 <_dtoa_r+0xeb4>)
   8a57a:	4640      	mov	r0, r8
   8a57c:	4649      	mov	r1, r9
   8a57e:	f002 fac1 	bl	8cb04 <__adddf3>
   8a582:	4632      	mov	r2, r6
   8a584:	463b      	mov	r3, r7
   8a586:	f002 fee5 	bl	8d354 <__aeabi_dcmplt>
   8a58a:	2800      	cmp	r0, #0
   8a58c:	d158      	bne.n	8a640 <_dtoa_r+0xe00>
   8a58e:	4642      	mov	r2, r8
   8a590:	464b      	mov	r3, r9
   8a592:	2000      	movs	r0, #0
   8a594:	4957      	ldr	r1, [pc, #348]	; (8a6f4 <_dtoa_r+0xeb4>)
   8a596:	f002 fab3 	bl	8cb00 <__aeabi_dsub>
   8a59a:	4632      	mov	r2, r6
   8a59c:	463b      	mov	r3, r7
   8a59e:	f002 fef7 	bl	8d390 <__aeabi_dcmpgt>
   8a5a2:	2800      	cmp	r0, #0
   8a5a4:	f43f ab73 	beq.w	89c8e <_dtoa_r+0x44e>
   8a5a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8a5ac:	46a9      	mov	r9, r5
   8a5ae:	2b30      	cmp	r3, #48	; 0x30
   8a5b0:	f105 35ff 	add.w	r5, r5, #4294967295
   8a5b4:	d0f8      	beq.n	8a5a8 <_dtoa_r+0xd68>
   8a5b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a5b8:	3301      	adds	r3, #1
   8a5ba:	9307      	str	r3, [sp, #28]
   8a5bc:	e505      	b.n	89fca <_dtoa_r+0x78a>
   8a5be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a5c0:	2b00      	cmp	r3, #0
   8a5c2:	f43f ae93 	beq.w	8a2ec <_dtoa_r+0xaac>
   8a5c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
   8a5c8:	2d00      	cmp	r5, #0
   8a5ca:	f77f ab60 	ble.w	89c8e <_dtoa_r+0x44e>
   8a5ce:	2200      	movs	r2, #0
   8a5d0:	4b47      	ldr	r3, [pc, #284]	; (8a6f0 <_dtoa_r+0xeb0>)
   8a5d2:	4630      	mov	r0, r6
   8a5d4:	4639      	mov	r1, r7
   8a5d6:	f002 fc4b 	bl	8ce70 <__aeabi_dmul>
   8a5da:	4606      	mov	r6, r0
   8a5dc:	460f      	mov	r7, r1
   8a5de:	f109 0001 	add.w	r0, r9, #1
   8a5e2:	f002 fbdb 	bl	8cd9c <__aeabi_i2d>
   8a5e6:	4632      	mov	r2, r6
   8a5e8:	463b      	mov	r3, r7
   8a5ea:	f002 fc41 	bl	8ce70 <__aeabi_dmul>
   8a5ee:	2200      	movs	r2, #0
   8a5f0:	4b41      	ldr	r3, [pc, #260]	; (8a6f8 <_dtoa_r+0xeb8>)
   8a5f2:	f002 fa87 	bl	8cb04 <__adddf3>
   8a5f6:	9a07      	ldr	r2, [sp, #28]
   8a5f8:	4680      	mov	r8, r0
   8a5fa:	3a01      	subs	r2, #1
   8a5fc:	9213      	str	r2, [sp, #76]	; 0x4c
   8a5fe:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a602:	9510      	str	r5, [sp, #64]	; 0x40
   8a604:	f7ff bab6 	b.w	89b74 <_dtoa_r+0x334>
   8a608:	f04f 0902 	mov.w	r9, #2
   8a60c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   8a610:	f7ff ba8f 	b.w	89b32 <_dtoa_r+0x2f2>
   8a614:	9b07      	ldr	r3, [sp, #28]
   8a616:	3301      	adds	r3, #1
   8a618:	9307      	str	r3, [sp, #28]
   8a61a:	2331      	movs	r3, #49	; 0x31
   8a61c:	f7ff bb2f 	b.w	89c7e <_dtoa_r+0x43e>
   8a620:	46b3      	mov	fp, r6
   8a622:	2339      	movs	r3, #57	; 0x39
   8a624:	9a07      	ldr	r2, [sp, #28]
   8a626:	462e      	mov	r6, r5
   8a628:	3201      	adds	r2, #1
   8a62a:	463d      	mov	r5, r7
   8a62c:	9207      	str	r2, [sp, #28]
   8a62e:	f80b 3b01 	strb.w	r3, [fp], #1
   8a632:	e4aa      	b.n	89f8a <_dtoa_r+0x74a>
   8a634:	f04f 0800 	mov.w	r8, #0
   8a638:	4645      	mov	r5, r8
   8a63a:	e61e      	b.n	8a27a <_dtoa_r+0xa3a>
   8a63c:	4699      	mov	r9, r3
   8a63e:	e43c      	b.n	89eba <_dtoa_r+0x67a>
   8a640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a642:	9a03      	ldr	r2, [sp, #12]
   8a644:	9307      	str	r3, [sp, #28]
   8a646:	f7ff bb13 	b.w	89c70 <_dtoa_r+0x430>
   8a64a:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8a64e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8a650:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a652:	46a9      	mov	r9, r5
   8a654:	3301      	adds	r3, #1
   8a656:	9307      	str	r3, [sp, #28]
   8a658:	e4b7      	b.n	89fca <_dtoa_r+0x78a>
   8a65a:	f47f aed7 	bne.w	8a40c <_dtoa_r+0xbcc>
   8a65e:	07da      	lsls	r2, r3, #31
   8a660:	f57f aed4 	bpl.w	8a40c <_dtoa_r+0xbcc>
   8a664:	e6cd      	b.n	8a402 <_dtoa_r+0xbc2>
   8a666:	2b39      	cmp	r3, #57	; 0x39
   8a668:	d0da      	beq.n	8a620 <_dtoa_r+0xde0>
   8a66a:	f1b9 0f00 	cmp.w	r9, #0
   8a66e:	f73f aecb 	bgt.w	8a408 <_dtoa_r+0xbc8>
   8a672:	e6cb      	b.n	8a40c <_dtoa_r+0xbcc>
   8a674:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a676:	2b02      	cmp	r3, #2
   8a678:	f73f adeb 	bgt.w	8a252 <_dtoa_r+0xa12>
   8a67c:	9707      	str	r7, [sp, #28]
   8a67e:	e570      	b.n	8a162 <_dtoa_r+0x922>
   8a680:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a682:	2b02      	cmp	r3, #2
   8a684:	f73f ade5 	bgt.w	8a252 <_dtoa_r+0xa12>
   8a688:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a68a:	9707      	str	r7, [sp, #28]
   8a68c:	930a      	str	r3, [sp, #40]	; 0x28
   8a68e:	e4e4      	b.n	8a05a <_dtoa_r+0x81a>
   8a690:	f04f 0902 	mov.w	r9, #2
   8a694:	f7ff ba4d 	b.w	89b32 <_dtoa_r+0x2f2>
   8a698:	4602      	mov	r2, r0
   8a69a:	f240 21ea 	movw	r1, #746	; 0x2ea
   8a69e:	4b17      	ldr	r3, [pc, #92]	; (8a6fc <_dtoa_r+0xebc>)
   8a6a0:	4817      	ldr	r0, [pc, #92]	; (8a700 <_dtoa_r+0xec0>)
   8a6a2:	f002 f8a7 	bl	8c7f4 <__assert_func>
   8a6a6:	4b17      	ldr	r3, [pc, #92]	; (8a704 <_dtoa_r+0xec4>)
   8a6a8:	9303      	str	r3, [sp, #12]
   8a6aa:	f7ff b904 	b.w	898b6 <_dtoa_r+0x76>
   8a6ae:	2500      	movs	r5, #0
   8a6b0:	4620      	mov	r0, r4
   8a6b2:	4629      	mov	r1, r5
   8a6b4:	6465      	str	r5, [r4, #68]	; 0x44
   8a6b6:	f001 f8e3 	bl	8b880 <_Balloc>
   8a6ba:	9003      	str	r0, [sp, #12]
   8a6bc:	b958      	cbnz	r0, 8a6d6 <_dtoa_r+0xe96>
   8a6be:	2200      	movs	r2, #0
   8a6c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8a6c4:	4b0d      	ldr	r3, [pc, #52]	; (8a6fc <_dtoa_r+0xebc>)
   8a6c6:	480e      	ldr	r0, [pc, #56]	; (8a700 <_dtoa_r+0xec0>)
   8a6c8:	f002 f894 	bl	8c7f4 <__assert_func>
   8a6cc:	f43f ac0d 	beq.w	89eea <_dtoa_r+0x6aa>
   8a6d0:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8a6d4:	e48f      	b.n	89ff6 <_dtoa_r+0x7b6>
   8a6d6:	f04f 33ff 	mov.w	r3, #4294967295
   8a6da:	9312      	str	r3, [sp, #72]	; 0x48
   8a6dc:	930a      	str	r3, [sp, #40]	; 0x28
   8a6de:	2301      	movs	r3, #1
   8a6e0:	9a03      	ldr	r2, [sp, #12]
   8a6e2:	9525      	str	r5, [sp, #148]	; 0x94
   8a6e4:	6422      	str	r2, [r4, #64]	; 0x40
   8a6e6:	930c      	str	r3, [sp, #48]	; 0x30
   8a6e8:	f7ff bad1 	b.w	89c8e <_dtoa_r+0x44e>
   8a6ec:	0008d6c0 	.word	0x0008d6c0
   8a6f0:	40240000 	.word	0x40240000
   8a6f4:	3fe00000 	.word	0x3fe00000
   8a6f8:	401c0000 	.word	0x401c0000
   8a6fc:	0008d578 	.word	0x0008d578
   8a700:	0008d58c 	.word	0x0008d58c
   8a704:	0008d56c 	.word	0x0008d56c

0008a708 <__sflush_r>:
   8a708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8a70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a710:	460d      	mov	r5, r1
   8a712:	0711      	lsls	r1, r2, #28
   8a714:	4680      	mov	r8, r0
   8a716:	d447      	bmi.n	8a7a8 <__sflush_r+0xa0>
   8a718:	686b      	ldr	r3, [r5, #4]
   8a71a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8a71e:	2b00      	cmp	r3, #0
   8a720:	81aa      	strh	r2, [r5, #12]
   8a722:	dd5e      	ble.n	8a7e2 <__sflush_r+0xda>
   8a724:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a726:	2c00      	cmp	r4, #0
   8a728:	d058      	beq.n	8a7dc <__sflush_r+0xd4>
   8a72a:	2300      	movs	r3, #0
   8a72c:	f8d8 6000 	ldr.w	r6, [r8]
   8a730:	f8c8 3000 	str.w	r3, [r8]
   8a734:	b293      	uxth	r3, r2
   8a736:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8a73a:	d156      	bne.n	8a7ea <__sflush_r+0xe2>
   8a73c:	2301      	movs	r3, #1
   8a73e:	4640      	mov	r0, r8
   8a740:	69e9      	ldr	r1, [r5, #28]
   8a742:	47a0      	blx	r4
   8a744:	1c43      	adds	r3, r0, #1
   8a746:	d067      	beq.n	8a818 <__sflush_r+0x110>
   8a748:	89ab      	ldrh	r3, [r5, #12]
   8a74a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a74c:	075f      	lsls	r7, r3, #29
   8a74e:	d505      	bpl.n	8a75c <__sflush_r+0x54>
   8a750:	686a      	ldr	r2, [r5, #4]
   8a752:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8a754:	1a80      	subs	r0, r0, r2
   8a756:	b10b      	cbz	r3, 8a75c <__sflush_r+0x54>
   8a758:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a75a:	1ac0      	subs	r0, r0, r3
   8a75c:	4602      	mov	r2, r0
   8a75e:	69e9      	ldr	r1, [r5, #28]
   8a760:	2300      	movs	r3, #0
   8a762:	4640      	mov	r0, r8
   8a764:	47a0      	blx	r4
   8a766:	1c41      	adds	r1, r0, #1
   8a768:	d141      	bne.n	8a7ee <__sflush_r+0xe6>
   8a76a:	f8d8 3000 	ldr.w	r3, [r8]
   8a76e:	2b00      	cmp	r3, #0
   8a770:	d03d      	beq.n	8a7ee <__sflush_r+0xe6>
   8a772:	2b1d      	cmp	r3, #29
   8a774:	d001      	beq.n	8a77a <__sflush_r+0x72>
   8a776:	2b16      	cmp	r3, #22
   8a778:	d156      	bne.n	8a828 <__sflush_r+0x120>
   8a77a:	2100      	movs	r1, #0
   8a77c:	692a      	ldr	r2, [r5, #16]
   8a77e:	89ab      	ldrh	r3, [r5, #12]
   8a780:	e9c5 2100 	strd	r2, r1, [r5]
   8a784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a788:	81ab      	strh	r3, [r5, #12]
   8a78a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8a78c:	f8c8 6000 	str.w	r6, [r8]
   8a790:	b321      	cbz	r1, 8a7dc <__sflush_r+0xd4>
   8a792:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8a796:	4299      	cmp	r1, r3
   8a798:	d002      	beq.n	8a7a0 <__sflush_r+0x98>
   8a79a:	4640      	mov	r0, r8
   8a79c:	f000 f9cc 	bl	8ab38 <_free_r>
   8a7a0:	2000      	movs	r0, #0
   8a7a2:	6328      	str	r0, [r5, #48]	; 0x30
   8a7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a7a8:	692f      	ldr	r7, [r5, #16]
   8a7aa:	b1bf      	cbz	r7, 8a7dc <__sflush_r+0xd4>
   8a7ac:	b293      	uxth	r3, r2
   8a7ae:	079a      	lsls	r2, r3, #30
   8a7b0:	bf18      	it	ne
   8a7b2:	2300      	movne	r3, #0
   8a7b4:	682e      	ldr	r6, [r5, #0]
   8a7b6:	bf08      	it	eq
   8a7b8:	696b      	ldreq	r3, [r5, #20]
   8a7ba:	602f      	str	r7, [r5, #0]
   8a7bc:	1bf6      	subs	r6, r6, r7
   8a7be:	60ab      	str	r3, [r5, #8]
   8a7c0:	e00a      	b.n	8a7d8 <__sflush_r+0xd0>
   8a7c2:	4633      	mov	r3, r6
   8a7c4:	463a      	mov	r2, r7
   8a7c6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8a7c8:	4640      	mov	r0, r8
   8a7ca:	69e9      	ldr	r1, [r5, #28]
   8a7cc:	47a0      	blx	r4
   8a7ce:	1e04      	subs	r4, r0, #0
   8a7d0:	eba6 0604 	sub.w	r6, r6, r4
   8a7d4:	4427      	add	r7, r4
   8a7d6:	dd17      	ble.n	8a808 <__sflush_r+0x100>
   8a7d8:	2e00      	cmp	r6, #0
   8a7da:	dcf2      	bgt.n	8a7c2 <__sflush_r+0xba>
   8a7dc:	2000      	movs	r0, #0
   8a7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a7e2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a7e4:	2b00      	cmp	r3, #0
   8a7e6:	dc9d      	bgt.n	8a724 <__sflush_r+0x1c>
   8a7e8:	e7f8      	b.n	8a7dc <__sflush_r+0xd4>
   8a7ea:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8a7ec:	e7ae      	b.n	8a74c <__sflush_r+0x44>
   8a7ee:	2100      	movs	r1, #0
   8a7f0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8a7f4:	692a      	ldr	r2, [r5, #16]
   8a7f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a7fa:	81ab      	strh	r3, [r5, #12]
   8a7fc:	04db      	lsls	r3, r3, #19
   8a7fe:	e9c5 2100 	strd	r2, r1, [r5]
   8a802:	d5c2      	bpl.n	8a78a <__sflush_r+0x82>
   8a804:	6528      	str	r0, [r5, #80]	; 0x50
   8a806:	e7c0      	b.n	8a78a <__sflush_r+0x82>
   8a808:	89ab      	ldrh	r3, [r5, #12]
   8a80a:	f04f 30ff 	mov.w	r0, #4294967295
   8a80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a812:	81ab      	strh	r3, [r5, #12]
   8a814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a818:	f8d8 3000 	ldr.w	r3, [r8]
   8a81c:	2b00      	cmp	r3, #0
   8a81e:	d093      	beq.n	8a748 <__sflush_r+0x40>
   8a820:	2b1d      	cmp	r3, #29
   8a822:	d006      	beq.n	8a832 <__sflush_r+0x12a>
   8a824:	2b16      	cmp	r3, #22
   8a826:	d004      	beq.n	8a832 <__sflush_r+0x12a>
   8a828:	89ab      	ldrh	r3, [r5, #12]
   8a82a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a82e:	81ab      	strh	r3, [r5, #12]
   8a830:	e7d5      	b.n	8a7de <__sflush_r+0xd6>
   8a832:	f8c8 6000 	str.w	r6, [r8]
   8a836:	e7d1      	b.n	8a7dc <__sflush_r+0xd4>

0008a838 <_fflush_r>:
   8a838:	b538      	push	{r3, r4, r5, lr}
   8a83a:	460c      	mov	r4, r1
   8a83c:	4605      	mov	r5, r0
   8a83e:	b108      	cbz	r0, 8a844 <_fflush_r+0xc>
   8a840:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a842:	b1a3      	cbz	r3, 8a86e <_fflush_r+0x36>
   8a844:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a848:	b1b8      	cbz	r0, 8a87a <_fflush_r+0x42>
   8a84a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a84c:	07db      	lsls	r3, r3, #31
   8a84e:	d401      	bmi.n	8a854 <_fflush_r+0x1c>
   8a850:	0581      	lsls	r1, r0, #22
   8a852:	d515      	bpl.n	8a880 <_fflush_r+0x48>
   8a854:	4628      	mov	r0, r5
   8a856:	4621      	mov	r1, r4
   8a858:	f7ff ff56 	bl	8a708 <__sflush_r>
   8a85c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a85e:	4605      	mov	r5, r0
   8a860:	07da      	lsls	r2, r3, #31
   8a862:	d402      	bmi.n	8a86a <_fflush_r+0x32>
   8a864:	89a3      	ldrh	r3, [r4, #12]
   8a866:	059b      	lsls	r3, r3, #22
   8a868:	d50e      	bpl.n	8a888 <_fflush_r+0x50>
   8a86a:	4628      	mov	r0, r5
   8a86c:	bd38      	pop	{r3, r4, r5, pc}
   8a86e:	f000 f83f 	bl	8a8f0 <__sinit>
   8a872:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a876:	2800      	cmp	r0, #0
   8a878:	d1e7      	bne.n	8a84a <_fflush_r+0x12>
   8a87a:	4605      	mov	r5, r0
   8a87c:	4628      	mov	r0, r5
   8a87e:	bd38      	pop	{r3, r4, r5, pc}
   8a880:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a882:	f000 fc07 	bl	8b094 <__retarget_lock_acquire_recursive>
   8a886:	e7e5      	b.n	8a854 <_fflush_r+0x1c>
   8a888:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a88a:	f000 fc05 	bl	8b098 <__retarget_lock_release_recursive>
   8a88e:	4628      	mov	r0, r5
   8a890:	bd38      	pop	{r3, r4, r5, pc}
   8a892:	bf00      	nop

0008a894 <std>:
   8a894:	2300      	movs	r3, #0
   8a896:	b510      	push	{r4, lr}
   8a898:	4604      	mov	r4, r0
   8a89a:	e9c0 3300 	strd	r3, r3, [r0]
   8a89e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8a8a2:	8181      	strh	r1, [r0, #12]
   8a8a4:	81c2      	strh	r2, [r0, #14]
   8a8a6:	4619      	mov	r1, r3
   8a8a8:	6083      	str	r3, [r0, #8]
   8a8aa:	6643      	str	r3, [r0, #100]	; 0x64
   8a8ac:	6183      	str	r3, [r0, #24]
   8a8ae:	2208      	movs	r2, #8
   8a8b0:	305c      	adds	r0, #92	; 0x5c
   8a8b2:	f7fc f98d 	bl	86bd0 <memset>
   8a8b6:	4807      	ldr	r0, [pc, #28]	; (8a8d4 <std+0x40>)
   8a8b8:	4907      	ldr	r1, [pc, #28]	; (8a8d8 <std+0x44>)
   8a8ba:	4a08      	ldr	r2, [pc, #32]	; (8a8dc <std+0x48>)
   8a8bc:	4b08      	ldr	r3, [pc, #32]	; (8a8e0 <std+0x4c>)
   8a8be:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8a8c2:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8a8c6:	62e3      	str	r3, [r4, #44]	; 0x2c
   8a8c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8a8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a8d0:	f000 bbdc 	b.w	8b08c <__retarget_lock_init_recursive>
   8a8d4:	0008c3ed 	.word	0x0008c3ed
   8a8d8:	0008c411 	.word	0x0008c411
   8a8dc:	0008c451 	.word	0x0008c451
   8a8e0:	0008c471 	.word	0x0008c471

0008a8e4 <_cleanup_r>:
   8a8e4:	4901      	ldr	r1, [pc, #4]	; (8a8ec <_cleanup_r+0x8>)
   8a8e6:	f000 bba3 	b.w	8b030 <_fwalk_reent>
   8a8ea:	bf00      	nop
   8a8ec:	0008c8b5 	.word	0x0008c8b5

0008a8f0 <__sinit>:
   8a8f0:	b510      	push	{r4, lr}
   8a8f2:	4604      	mov	r4, r0
   8a8f4:	4813      	ldr	r0, [pc, #76]	; (8a944 <__sinit+0x54>)
   8a8f6:	f000 fbcd 	bl	8b094 <__retarget_lock_acquire_recursive>
   8a8fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8a8fc:	b9ea      	cbnz	r2, 8a93a <__sinit+0x4a>
   8a8fe:	2003      	movs	r0, #3
   8a900:	4911      	ldr	r1, [pc, #68]	; (8a948 <__sinit+0x58>)
   8a902:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8a906:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8a90a:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8a90e:	63e1      	str	r1, [r4, #60]	; 0x3c
   8a910:	6860      	ldr	r0, [r4, #4]
   8a912:	2104      	movs	r1, #4
   8a914:	f7ff ffbe 	bl	8a894 <std>
   8a918:	68a0      	ldr	r0, [r4, #8]
   8a91a:	2201      	movs	r2, #1
   8a91c:	2109      	movs	r1, #9
   8a91e:	f7ff ffb9 	bl	8a894 <std>
   8a922:	68e0      	ldr	r0, [r4, #12]
   8a924:	2202      	movs	r2, #2
   8a926:	2112      	movs	r1, #18
   8a928:	f7ff ffb4 	bl	8a894 <std>
   8a92c:	2301      	movs	r3, #1
   8a92e:	4805      	ldr	r0, [pc, #20]	; (8a944 <__sinit+0x54>)
   8a930:	63a3      	str	r3, [r4, #56]	; 0x38
   8a932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a936:	f000 bbaf 	b.w	8b098 <__retarget_lock_release_recursive>
   8a93a:	4802      	ldr	r0, [pc, #8]	; (8a944 <__sinit+0x54>)
   8a93c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a940:	f000 bbaa 	b.w	8b098 <__retarget_lock_release_recursive>
   8a944:	20001854 	.word	0x20001854
   8a948:	0008a8e5 	.word	0x0008a8e5

0008a94c <__sfp_lock_acquire>:
   8a94c:	4801      	ldr	r0, [pc, #4]	; (8a954 <__sfp_lock_acquire+0x8>)
   8a94e:	f000 bba1 	b.w	8b094 <__retarget_lock_acquire_recursive>
   8a952:	bf00      	nop
   8a954:	20001868 	.word	0x20001868

0008a958 <__sfp_lock_release>:
   8a958:	4801      	ldr	r0, [pc, #4]	; (8a960 <__sfp_lock_release+0x8>)
   8a95a:	f000 bb9d 	b.w	8b098 <__retarget_lock_release_recursive>
   8a95e:	bf00      	nop
   8a960:	20001868 	.word	0x20001868

0008a964 <__libc_fini_array>:
   8a964:	b538      	push	{r3, r4, r5, lr}
   8a966:	4b08      	ldr	r3, [pc, #32]	; (8a988 <__libc_fini_array+0x24>)
   8a968:	4d08      	ldr	r5, [pc, #32]	; (8a98c <__libc_fini_array+0x28>)
   8a96a:	1b5b      	subs	r3, r3, r5
   8a96c:	109c      	asrs	r4, r3, #2
   8a96e:	d007      	beq.n	8a980 <__libc_fini_array+0x1c>
   8a970:	3b04      	subs	r3, #4
   8a972:	441d      	add	r5, r3
   8a974:	3c01      	subs	r4, #1
   8a976:	f855 3904 	ldr.w	r3, [r5], #-4
   8a97a:	4798      	blx	r3
   8a97c:	2c00      	cmp	r4, #0
   8a97e:	d1f9      	bne.n	8a974 <__libc_fini_array+0x10>
   8a980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a984:	f002 bfb2 	b.w	8d8ec <_fini>
   8a988:	0008d8fc 	.word	0x0008d8fc
   8a98c:	0008d8f8 	.word	0x0008d8f8

0008a990 <__fputwc>:
   8a990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8a994:	b083      	sub	sp, #12
   8a996:	4607      	mov	r7, r0
   8a998:	4688      	mov	r8, r1
   8a99a:	4614      	mov	r4, r2
   8a99c:	f000 fb6c 	bl	8b078 <__locale_mb_cur_max>
   8a9a0:	2801      	cmp	r0, #1
   8a9a2:	d103      	bne.n	8a9ac <__fputwc+0x1c>
   8a9a4:	f108 33ff 	add.w	r3, r8, #4294967295
   8a9a8:	2bfe      	cmp	r3, #254	; 0xfe
   8a9aa:	d933      	bls.n	8aa14 <__fputwc+0x84>
   8a9ac:	4642      	mov	r2, r8
   8a9ae:	4638      	mov	r0, r7
   8a9b0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8a9b4:	a901      	add	r1, sp, #4
   8a9b6:	f001 fe95 	bl	8c6e4 <_wcrtomb_r>
   8a9ba:	1c42      	adds	r2, r0, #1
   8a9bc:	4606      	mov	r6, r0
   8a9be:	d02f      	beq.n	8aa20 <__fputwc+0x90>
   8a9c0:	b318      	cbz	r0, 8aa0a <__fputwc+0x7a>
   8a9c2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8a9c6:	2500      	movs	r5, #0
   8a9c8:	f10d 0904 	add.w	r9, sp, #4
   8a9cc:	e008      	b.n	8a9e0 <__fputwc+0x50>
   8a9ce:	6823      	ldr	r3, [r4, #0]
   8a9d0:	1c5a      	adds	r2, r3, #1
   8a9d2:	6022      	str	r2, [r4, #0]
   8a9d4:	7019      	strb	r1, [r3, #0]
   8a9d6:	3501      	adds	r5, #1
   8a9d8:	42b5      	cmp	r5, r6
   8a9da:	d216      	bcs.n	8aa0a <__fputwc+0x7a>
   8a9dc:	f815 1009 	ldrb.w	r1, [r5, r9]
   8a9e0:	68a3      	ldr	r3, [r4, #8]
   8a9e2:	3b01      	subs	r3, #1
   8a9e4:	2b00      	cmp	r3, #0
   8a9e6:	60a3      	str	r3, [r4, #8]
   8a9e8:	daf1      	bge.n	8a9ce <__fputwc+0x3e>
   8a9ea:	69a2      	ldr	r2, [r4, #24]
   8a9ec:	4293      	cmp	r3, r2
   8a9ee:	db01      	blt.n	8a9f4 <__fputwc+0x64>
   8a9f0:	290a      	cmp	r1, #10
   8a9f2:	d1ec      	bne.n	8a9ce <__fputwc+0x3e>
   8a9f4:	4622      	mov	r2, r4
   8a9f6:	4638      	mov	r0, r7
   8a9f8:	f001 fe1c 	bl	8c634 <__swbuf_r>
   8a9fc:	1c43      	adds	r3, r0, #1
   8a9fe:	d1ea      	bne.n	8a9d6 <__fputwc+0x46>
   8aa00:	4606      	mov	r6, r0
   8aa02:	4630      	mov	r0, r6
   8aa04:	b003      	add	sp, #12
   8aa06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8aa0a:	4646      	mov	r6, r8
   8aa0c:	4630      	mov	r0, r6
   8aa0e:	b003      	add	sp, #12
   8aa10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8aa14:	fa5f f188 	uxtb.w	r1, r8
   8aa18:	4606      	mov	r6, r0
   8aa1a:	f88d 1004 	strb.w	r1, [sp, #4]
   8aa1e:	e7d2      	b.n	8a9c6 <__fputwc+0x36>
   8aa20:	4630      	mov	r0, r6
   8aa22:	89a3      	ldrh	r3, [r4, #12]
   8aa24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8aa28:	81a3      	strh	r3, [r4, #12]
   8aa2a:	b003      	add	sp, #12
   8aa2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008aa30 <_fputwc_r>:
   8aa30:	b530      	push	{r4, r5, lr}
   8aa32:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8aa34:	4614      	mov	r4, r2
   8aa36:	f013 0f01 	tst.w	r3, #1
   8aa3a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8aa3e:	4605      	mov	r5, r0
   8aa40:	b083      	sub	sp, #12
   8aa42:	b29a      	uxth	r2, r3
   8aa44:	d101      	bne.n	8aa4a <_fputwc_r+0x1a>
   8aa46:	0598      	lsls	r0, r3, #22
   8aa48:	d51c      	bpl.n	8aa84 <_fputwc_r+0x54>
   8aa4a:	0490      	lsls	r0, r2, #18
   8aa4c:	d406      	bmi.n	8aa5c <_fputwc_r+0x2c>
   8aa4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8aa50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8aa54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8aa58:	81a3      	strh	r3, [r4, #12]
   8aa5a:	6662      	str	r2, [r4, #100]	; 0x64
   8aa5c:	4628      	mov	r0, r5
   8aa5e:	4622      	mov	r2, r4
   8aa60:	f7ff ff96 	bl	8a990 <__fputwc>
   8aa64:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8aa66:	4605      	mov	r5, r0
   8aa68:	07da      	lsls	r2, r3, #31
   8aa6a:	d402      	bmi.n	8aa72 <_fputwc_r+0x42>
   8aa6c:	89a3      	ldrh	r3, [r4, #12]
   8aa6e:	059b      	lsls	r3, r3, #22
   8aa70:	d502      	bpl.n	8aa78 <_fputwc_r+0x48>
   8aa72:	4628      	mov	r0, r5
   8aa74:	b003      	add	sp, #12
   8aa76:	bd30      	pop	{r4, r5, pc}
   8aa78:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8aa7a:	f000 fb0d 	bl	8b098 <__retarget_lock_release_recursive>
   8aa7e:	4628      	mov	r0, r5
   8aa80:	b003      	add	sp, #12
   8aa82:	bd30      	pop	{r4, r5, pc}
   8aa84:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8aa86:	9101      	str	r1, [sp, #4]
   8aa88:	f000 fb04 	bl	8b094 <__retarget_lock_acquire_recursive>
   8aa8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aa90:	9901      	ldr	r1, [sp, #4]
   8aa92:	b29a      	uxth	r2, r3
   8aa94:	e7d9      	b.n	8aa4a <_fputwc_r+0x1a>
   8aa96:	bf00      	nop

0008aa98 <_malloc_trim_r>:
   8aa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aa9a:	460c      	mov	r4, r1
   8aa9c:	4f23      	ldr	r7, [pc, #140]	; (8ab2c <_malloc_trim_r+0x94>)
   8aa9e:	4606      	mov	r6, r0
   8aaa0:	f000 fee2 	bl	8b868 <__malloc_lock>
   8aaa4:	68bb      	ldr	r3, [r7, #8]
   8aaa6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8aaaa:	685d      	ldr	r5, [r3, #4]
   8aaac:	310f      	adds	r1, #15
   8aaae:	f025 0503 	bic.w	r5, r5, #3
   8aab2:	194b      	adds	r3, r1, r5
   8aab4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8aab8:	f023 030f 	bic.w	r3, r3, #15
   8aabc:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8aac0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8aac4:	db07      	blt.n	8aad6 <_malloc_trim_r+0x3e>
   8aac6:	2100      	movs	r1, #0
   8aac8:	4630      	mov	r0, r6
   8aaca:	f001 fc7d 	bl	8c3c8 <_sbrk_r>
   8aace:	68bb      	ldr	r3, [r7, #8]
   8aad0:	442b      	add	r3, r5
   8aad2:	4298      	cmp	r0, r3
   8aad4:	d004      	beq.n	8aae0 <_malloc_trim_r+0x48>
   8aad6:	4630      	mov	r0, r6
   8aad8:	f000 fecc 	bl	8b874 <__malloc_unlock>
   8aadc:	2000      	movs	r0, #0
   8aade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8aae0:	4630      	mov	r0, r6
   8aae2:	4261      	negs	r1, r4
   8aae4:	f001 fc70 	bl	8c3c8 <_sbrk_r>
   8aae8:	3001      	adds	r0, #1
   8aaea:	d00d      	beq.n	8ab08 <_malloc_trim_r+0x70>
   8aaec:	4a10      	ldr	r2, [pc, #64]	; (8ab30 <_malloc_trim_r+0x98>)
   8aaee:	68b9      	ldr	r1, [r7, #8]
   8aaf0:	6813      	ldr	r3, [r2, #0]
   8aaf2:	1b2d      	subs	r5, r5, r4
   8aaf4:	f045 0501 	orr.w	r5, r5, #1
   8aaf8:	4630      	mov	r0, r6
   8aafa:	1b1b      	subs	r3, r3, r4
   8aafc:	604d      	str	r5, [r1, #4]
   8aafe:	6013      	str	r3, [r2, #0]
   8ab00:	f000 feb8 	bl	8b874 <__malloc_unlock>
   8ab04:	2001      	movs	r0, #1
   8ab06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ab08:	2100      	movs	r1, #0
   8ab0a:	4630      	mov	r0, r6
   8ab0c:	f001 fc5c 	bl	8c3c8 <_sbrk_r>
   8ab10:	68ba      	ldr	r2, [r7, #8]
   8ab12:	1a83      	subs	r3, r0, r2
   8ab14:	2b0f      	cmp	r3, #15
   8ab16:	ddde      	ble.n	8aad6 <_malloc_trim_r+0x3e>
   8ab18:	4906      	ldr	r1, [pc, #24]	; (8ab34 <_malloc_trim_r+0x9c>)
   8ab1a:	f043 0301 	orr.w	r3, r3, #1
   8ab1e:	680c      	ldr	r4, [r1, #0]
   8ab20:	4903      	ldr	r1, [pc, #12]	; (8ab30 <_malloc_trim_r+0x98>)
   8ab22:	1b00      	subs	r0, r0, r4
   8ab24:	6053      	str	r3, [r2, #4]
   8ab26:	6008      	str	r0, [r1, #0]
   8ab28:	e7d5      	b.n	8aad6 <_malloc_trim_r+0x3e>
   8ab2a:	bf00      	nop
   8ab2c:	200009e0 	.word	0x200009e0
   8ab30:	20001388 	.word	0x20001388
   8ab34:	20000de8 	.word	0x20000de8

0008ab38 <_free_r>:
   8ab38:	2900      	cmp	r1, #0
   8ab3a:	d05f      	beq.n	8abfc <_free_r+0xc4>
   8ab3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ab3e:	460c      	mov	r4, r1
   8ab40:	4606      	mov	r6, r0
   8ab42:	f000 fe91 	bl	8b868 <__malloc_lock>
   8ab46:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8ab4a:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8ad40 <_free_r+0x208>
   8ab4e:	f1a4 0008 	sub.w	r0, r4, #8
   8ab52:	f023 0101 	bic.w	r1, r3, #1
   8ab56:	1842      	adds	r2, r0, r1
   8ab58:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8ab5c:	6855      	ldr	r5, [r2, #4]
   8ab5e:	4297      	cmp	r7, r2
   8ab60:	f025 0503 	bic.w	r5, r5, #3
   8ab64:	f000 8089 	beq.w	8ac7a <_free_r+0x142>
   8ab68:	07df      	lsls	r7, r3, #31
   8ab6a:	6055      	str	r5, [r2, #4]
   8ab6c:	d434      	bmi.n	8abd8 <_free_r+0xa0>
   8ab6e:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8ab72:	f10c 0408 	add.w	r4, ip, #8
   8ab76:	1bc0      	subs	r0, r0, r7
   8ab78:	6883      	ldr	r3, [r0, #8]
   8ab7a:	4439      	add	r1, r7
   8ab7c:	42a3      	cmp	r3, r4
   8ab7e:	d06a      	beq.n	8ac56 <_free_r+0x11e>
   8ab80:	1957      	adds	r7, r2, r5
   8ab82:	687f      	ldr	r7, [r7, #4]
   8ab84:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8ab88:	f8c3 e00c 	str.w	lr, [r3, #12]
   8ab8c:	f8ce 3008 	str.w	r3, [lr, #8]
   8ab90:	07fb      	lsls	r3, r7, #31
   8ab92:	f140 8097 	bpl.w	8acc4 <_free_r+0x18c>
   8ab96:	f041 0301 	orr.w	r3, r1, #1
   8ab9a:	6043      	str	r3, [r0, #4]
   8ab9c:	6011      	str	r1, [r2, #0]
   8ab9e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8aba2:	d234      	bcs.n	8ac0e <_free_r+0xd6>
   8aba4:	2201      	movs	r2, #1
   8aba6:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8abaa:	08cb      	lsrs	r3, r1, #3
   8abac:	0949      	lsrs	r1, r1, #5
   8abae:	4413      	add	r3, r2
   8abb0:	fa02 f101 	lsl.w	r1, r2, r1
   8abb4:	4321      	orrs	r1, r4
   8abb6:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8abba:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8abbe:	3a08      	subs	r2, #8
   8abc0:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8abc4:	f8cc 1004 	str.w	r1, [ip, #4]
   8abc8:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8abcc:	60e0      	str	r0, [r4, #12]
   8abce:	4630      	mov	r0, r6
   8abd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8abd4:	f000 be4e 	b.w	8b874 <__malloc_unlock>
   8abd8:	1953      	adds	r3, r2, r5
   8abda:	685b      	ldr	r3, [r3, #4]
   8abdc:	07df      	lsls	r7, r3, #31
   8abde:	d40e      	bmi.n	8abfe <_free_r+0xc6>
   8abe0:	4429      	add	r1, r5
   8abe2:	f10c 0408 	add.w	r4, ip, #8
   8abe6:	6893      	ldr	r3, [r2, #8]
   8abe8:	42a3      	cmp	r3, r4
   8abea:	d073      	beq.n	8acd4 <_free_r+0x19c>
   8abec:	68d4      	ldr	r4, [r2, #12]
   8abee:	f041 0201 	orr.w	r2, r1, #1
   8abf2:	60dc      	str	r4, [r3, #12]
   8abf4:	60a3      	str	r3, [r4, #8]
   8abf6:	6042      	str	r2, [r0, #4]
   8abf8:	5041      	str	r1, [r0, r1]
   8abfa:	e7d0      	b.n	8ab9e <_free_r+0x66>
   8abfc:	4770      	bx	lr
   8abfe:	f041 0301 	orr.w	r3, r1, #1
   8ac02:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8ac06:	f844 3c04 	str.w	r3, [r4, #-4]
   8ac0a:	6011      	str	r1, [r2, #0]
   8ac0c:	d3ca      	bcc.n	8aba4 <_free_r+0x6c>
   8ac0e:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8ac12:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8ac16:	d24a      	bcs.n	8acae <_free_r+0x176>
   8ac18:	098b      	lsrs	r3, r1, #6
   8ac1a:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8ac1e:	00ed      	lsls	r5, r5, #3
   8ac20:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8ac24:	f85c 3005 	ldr.w	r3, [ip, r5]
   8ac28:	eb0c 0405 	add.w	r4, ip, r5
   8ac2c:	3c08      	subs	r4, #8
   8ac2e:	429c      	cmp	r4, r3
   8ac30:	d059      	beq.n	8ace6 <_free_r+0x1ae>
   8ac32:	685a      	ldr	r2, [r3, #4]
   8ac34:	f022 0203 	bic.w	r2, r2, #3
   8ac38:	428a      	cmp	r2, r1
   8ac3a:	d902      	bls.n	8ac42 <_free_r+0x10a>
   8ac3c:	689b      	ldr	r3, [r3, #8]
   8ac3e:	429c      	cmp	r4, r3
   8ac40:	d1f7      	bne.n	8ac32 <_free_r+0xfa>
   8ac42:	68dc      	ldr	r4, [r3, #12]
   8ac44:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8ac48:	60a0      	str	r0, [r4, #8]
   8ac4a:	60d8      	str	r0, [r3, #12]
   8ac4c:	4630      	mov	r0, r6
   8ac4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8ac52:	f000 be0f 	b.w	8b874 <__malloc_unlock>
   8ac56:	1953      	adds	r3, r2, r5
   8ac58:	685b      	ldr	r3, [r3, #4]
   8ac5a:	07db      	lsls	r3, r3, #31
   8ac5c:	d466      	bmi.n	8ad2c <_free_r+0x1f4>
   8ac5e:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8ac62:	4429      	add	r1, r5
   8ac64:	f041 0401 	orr.w	r4, r1, #1
   8ac68:	60d3      	str	r3, [r2, #12]
   8ac6a:	609a      	str	r2, [r3, #8]
   8ac6c:	6044      	str	r4, [r0, #4]
   8ac6e:	5041      	str	r1, [r0, r1]
   8ac70:	4630      	mov	r0, r6
   8ac72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8ac76:	f000 bdfd 	b.w	8b874 <__malloc_unlock>
   8ac7a:	07db      	lsls	r3, r3, #31
   8ac7c:	4429      	add	r1, r5
   8ac7e:	d407      	bmi.n	8ac90 <_free_r+0x158>
   8ac80:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8ac84:	1b00      	subs	r0, r0, r4
   8ac86:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8ac8a:	4421      	add	r1, r4
   8ac8c:	60d3      	str	r3, [r2, #12]
   8ac8e:	609a      	str	r2, [r3, #8]
   8ac90:	4b29      	ldr	r3, [pc, #164]	; (8ad38 <_free_r+0x200>)
   8ac92:	f041 0201 	orr.w	r2, r1, #1
   8ac96:	681b      	ldr	r3, [r3, #0]
   8ac98:	6042      	str	r2, [r0, #4]
   8ac9a:	428b      	cmp	r3, r1
   8ac9c:	f8cc 0008 	str.w	r0, [ip, #8]
   8aca0:	d895      	bhi.n	8abce <_free_r+0x96>
   8aca2:	4b26      	ldr	r3, [pc, #152]	; (8ad3c <_free_r+0x204>)
   8aca4:	4630      	mov	r0, r6
   8aca6:	6819      	ldr	r1, [r3, #0]
   8aca8:	f7ff fef6 	bl	8aa98 <_malloc_trim_r>
   8acac:	e78f      	b.n	8abce <_free_r+0x96>
   8acae:	2b14      	cmp	r3, #20
   8acb0:	d90a      	bls.n	8acc8 <_free_r+0x190>
   8acb2:	2b54      	cmp	r3, #84	; 0x54
   8acb4:	d821      	bhi.n	8acfa <_free_r+0x1c2>
   8acb6:	0b0b      	lsrs	r3, r1, #12
   8acb8:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8acbc:	00ed      	lsls	r5, r5, #3
   8acbe:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8acc2:	e7af      	b.n	8ac24 <_free_r+0xec>
   8acc4:	4429      	add	r1, r5
   8acc6:	e78e      	b.n	8abe6 <_free_r+0xae>
   8acc8:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8accc:	00ed      	lsls	r5, r5, #3
   8acce:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8acd2:	e7a7      	b.n	8ac24 <_free_r+0xec>
   8acd4:	f041 0301 	orr.w	r3, r1, #1
   8acd8:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8acdc:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8ace0:	6043      	str	r3, [r0, #4]
   8ace2:	5041      	str	r1, [r0, r1]
   8ace4:	e773      	b.n	8abce <_free_r+0x96>
   8ace6:	2501      	movs	r5, #1
   8ace8:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8acec:	1092      	asrs	r2, r2, #2
   8acee:	fa05 f202 	lsl.w	r2, r5, r2
   8acf2:	430a      	orrs	r2, r1
   8acf4:	f8cc 2004 	str.w	r2, [ip, #4]
   8acf8:	e7a4      	b.n	8ac44 <_free_r+0x10c>
   8acfa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8acfe:	d806      	bhi.n	8ad0e <_free_r+0x1d6>
   8ad00:	0bcb      	lsrs	r3, r1, #15
   8ad02:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8ad06:	00ed      	lsls	r5, r5, #3
   8ad08:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8ad0c:	e78a      	b.n	8ac24 <_free_r+0xec>
   8ad0e:	f240 5254 	movw	r2, #1364	; 0x554
   8ad12:	4293      	cmp	r3, r2
   8ad14:	d806      	bhi.n	8ad24 <_free_r+0x1ec>
   8ad16:	0c8b      	lsrs	r3, r1, #18
   8ad18:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8ad1c:	00ed      	lsls	r5, r5, #3
   8ad1e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8ad22:	e77f      	b.n	8ac24 <_free_r+0xec>
   8ad24:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8ad28:	227e      	movs	r2, #126	; 0x7e
   8ad2a:	e77b      	b.n	8ac24 <_free_r+0xec>
   8ad2c:	f041 0301 	orr.w	r3, r1, #1
   8ad30:	6043      	str	r3, [r0, #4]
   8ad32:	6011      	str	r1, [r2, #0]
   8ad34:	e74b      	b.n	8abce <_free_r+0x96>
   8ad36:	bf00      	nop
   8ad38:	20000dec 	.word	0x20000dec
   8ad3c:	200013b8 	.word	0x200013b8
   8ad40:	200009e0 	.word	0x200009e0

0008ad44 <__sfvwrite_r>:
   8ad44:	6893      	ldr	r3, [r2, #8]
   8ad46:	2b00      	cmp	r3, #0
   8ad48:	f000 80bd 	beq.w	8aec6 <__sfvwrite_r+0x182>
   8ad4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ad50:	4690      	mov	r8, r2
   8ad52:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8ad56:	460c      	mov	r4, r1
   8ad58:	0711      	lsls	r1, r2, #28
   8ad5a:	4681      	mov	r9, r0
   8ad5c:	b083      	sub	sp, #12
   8ad5e:	b293      	uxth	r3, r2
   8ad60:	d527      	bpl.n	8adb2 <__sfvwrite_r+0x6e>
   8ad62:	6922      	ldr	r2, [r4, #16]
   8ad64:	b32a      	cbz	r2, 8adb2 <__sfvwrite_r+0x6e>
   8ad66:	f013 0702 	ands.w	r7, r3, #2
   8ad6a:	f8d8 5000 	ldr.w	r5, [r8]
   8ad6e:	d02f      	beq.n	8add0 <__sfvwrite_r+0x8c>
   8ad70:	f04f 0b00 	mov.w	fp, #0
   8ad74:	465f      	mov	r7, fp
   8ad76:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8b02c <__sfvwrite_r+0x2e8>
   8ad7a:	2f00      	cmp	r7, #0
   8ad7c:	f000 8089 	beq.w	8ae92 <__sfvwrite_r+0x14e>
   8ad80:	4557      	cmp	r7, sl
   8ad82:	463b      	mov	r3, r7
   8ad84:	465a      	mov	r2, fp
   8ad86:	bf28      	it	cs
   8ad88:	4653      	movcs	r3, sl
   8ad8a:	4648      	mov	r0, r9
   8ad8c:	69e1      	ldr	r1, [r4, #28]
   8ad8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8ad90:	47b0      	blx	r6
   8ad92:	2800      	cmp	r0, #0
   8ad94:	f340 808d 	ble.w	8aeb2 <__sfvwrite_r+0x16e>
   8ad98:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8ad9c:	4483      	add	fp, r0
   8ad9e:	1a1b      	subs	r3, r3, r0
   8ada0:	1a3f      	subs	r7, r7, r0
   8ada2:	f8c8 3008 	str.w	r3, [r8, #8]
   8ada6:	2b00      	cmp	r3, #0
   8ada8:	d1e7      	bne.n	8ad7a <__sfvwrite_r+0x36>
   8adaa:	2000      	movs	r0, #0
   8adac:	b003      	add	sp, #12
   8adae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8adb2:	4621      	mov	r1, r4
   8adb4:	4648      	mov	r0, r9
   8adb6:	f7fe fc3b 	bl	89630 <__swsetup_r>
   8adba:	2800      	cmp	r0, #0
   8adbc:	f040 8132 	bne.w	8b024 <__sfvwrite_r+0x2e0>
   8adc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8adc4:	f8d8 5000 	ldr.w	r5, [r8]
   8adc8:	b293      	uxth	r3, r2
   8adca:	f013 0702 	ands.w	r7, r3, #2
   8adce:	d1cf      	bne.n	8ad70 <__sfvwrite_r+0x2c>
   8add0:	f013 0a01 	ands.w	sl, r3, #1
   8add4:	d179      	bne.n	8aeca <__sfvwrite_r+0x186>
   8add6:	4656      	mov	r6, sl
   8add8:	2e00      	cmp	r6, #0
   8adda:	d056      	beq.n	8ae8a <__sfvwrite_r+0x146>
   8addc:	059a      	lsls	r2, r3, #22
   8adde:	68a7      	ldr	r7, [r4, #8]
   8ade0:	f140 80bd 	bpl.w	8af5e <__sfvwrite_r+0x21a>
   8ade4:	42b7      	cmp	r7, r6
   8ade6:	46bb      	mov	fp, r7
   8ade8:	f200 80d2 	bhi.w	8af90 <__sfvwrite_r+0x24c>
   8adec:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8adf0:	f000 80d0 	beq.w	8af94 <__sfvwrite_r+0x250>
   8adf4:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8adf8:	6822      	ldr	r2, [r4, #0]
   8adfa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8adfe:	eba2 0b01 	sub.w	fp, r2, r1
   8ae02:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8ae06:	f10b 0001 	add.w	r0, fp, #1
   8ae0a:	107f      	asrs	r7, r7, #1
   8ae0c:	4430      	add	r0, r6
   8ae0e:	42b8      	cmp	r0, r7
   8ae10:	463a      	mov	r2, r7
   8ae12:	bf84      	itt	hi
   8ae14:	4607      	movhi	r7, r0
   8ae16:	463a      	movhi	r2, r7
   8ae18:	055b      	lsls	r3, r3, #21
   8ae1a:	f140 80e7 	bpl.w	8afec <__sfvwrite_r+0x2a8>
   8ae1e:	4611      	mov	r1, r2
   8ae20:	4648      	mov	r0, r9
   8ae22:	f000 f9b3 	bl	8b18c <_malloc_r>
   8ae26:	2800      	cmp	r0, #0
   8ae28:	f000 80f6 	beq.w	8b018 <__sfvwrite_r+0x2d4>
   8ae2c:	465a      	mov	r2, fp
   8ae2e:	6921      	ldr	r1, [r4, #16]
   8ae30:	9000      	str	r0, [sp, #0]
   8ae32:	f7fb fe57 	bl	86ae4 <memcpy>
   8ae36:	89a2      	ldrh	r2, [r4, #12]
   8ae38:	9b00      	ldr	r3, [sp, #0]
   8ae3a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8ae3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8ae42:	81a2      	strh	r2, [r4, #12]
   8ae44:	eba7 020b 	sub.w	r2, r7, fp
   8ae48:	eb03 000b 	add.w	r0, r3, fp
   8ae4c:	6167      	str	r7, [r4, #20]
   8ae4e:	46b3      	mov	fp, r6
   8ae50:	4637      	mov	r7, r6
   8ae52:	6123      	str	r3, [r4, #16]
   8ae54:	6020      	str	r0, [r4, #0]
   8ae56:	60a2      	str	r2, [r4, #8]
   8ae58:	465a      	mov	r2, fp
   8ae5a:	4651      	mov	r1, sl
   8ae5c:	f000 fc9a 	bl	8b794 <memmove>
   8ae60:	68a2      	ldr	r2, [r4, #8]
   8ae62:	6823      	ldr	r3, [r4, #0]
   8ae64:	1bd2      	subs	r2, r2, r7
   8ae66:	4637      	mov	r7, r6
   8ae68:	2600      	movs	r6, #0
   8ae6a:	445b      	add	r3, fp
   8ae6c:	60a2      	str	r2, [r4, #8]
   8ae6e:	6023      	str	r3, [r4, #0]
   8ae70:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8ae74:	44ba      	add	sl, r7
   8ae76:	1bd7      	subs	r7, r2, r7
   8ae78:	f8c8 7008 	str.w	r7, [r8, #8]
   8ae7c:	2f00      	cmp	r7, #0
   8ae7e:	d094      	beq.n	8adaa <__sfvwrite_r+0x66>
   8ae80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ae84:	b29b      	uxth	r3, r3
   8ae86:	2e00      	cmp	r6, #0
   8ae88:	d1a8      	bne.n	8addc <__sfvwrite_r+0x98>
   8ae8a:	e9d5 a600 	ldrd	sl, r6, [r5]
   8ae8e:	3508      	adds	r5, #8
   8ae90:	e7a2      	b.n	8add8 <__sfvwrite_r+0x94>
   8ae92:	e9d5 b700 	ldrd	fp, r7, [r5]
   8ae96:	3508      	adds	r5, #8
   8ae98:	e76f      	b.n	8ad7a <__sfvwrite_r+0x36>
   8ae9a:	4629      	mov	r1, r5
   8ae9c:	465a      	mov	r2, fp
   8ae9e:	f000 fc79 	bl	8b794 <memmove>
   8aea2:	6823      	ldr	r3, [r4, #0]
   8aea4:	4621      	mov	r1, r4
   8aea6:	445b      	add	r3, fp
   8aea8:	4648      	mov	r0, r9
   8aeaa:	6023      	str	r3, [r4, #0]
   8aeac:	f7ff fcc4 	bl	8a838 <_fflush_r>
   8aeb0:	b358      	cbz	r0, 8af0a <__sfvwrite_r+0x1c6>
   8aeb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aeb6:	f04f 30ff 	mov.w	r0, #4294967295
   8aeba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8aebe:	81a3      	strh	r3, [r4, #12]
   8aec0:	b003      	add	sp, #12
   8aec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aec6:	2000      	movs	r0, #0
   8aec8:	4770      	bx	lr
   8aeca:	463e      	mov	r6, r7
   8aecc:	46aa      	mov	sl, r5
   8aece:	4638      	mov	r0, r7
   8aed0:	463d      	mov	r5, r7
   8aed2:	9700      	str	r7, [sp, #0]
   8aed4:	b36e      	cbz	r6, 8af32 <__sfvwrite_r+0x1ee>
   8aed6:	2800      	cmp	r0, #0
   8aed8:	d035      	beq.n	8af46 <__sfvwrite_r+0x202>
   8aeda:	9a00      	ldr	r2, [sp, #0]
   8aedc:	6820      	ldr	r0, [r4, #0]
   8aede:	6921      	ldr	r1, [r4, #16]
   8aee0:	42b2      	cmp	r2, r6
   8aee2:	bf28      	it	cs
   8aee4:	4632      	movcs	r2, r6
   8aee6:	4288      	cmp	r0, r1
   8aee8:	6963      	ldr	r3, [r4, #20]
   8aeea:	d904      	bls.n	8aef6 <__sfvwrite_r+0x1b2>
   8aeec:	68a1      	ldr	r1, [r4, #8]
   8aeee:	eb03 0b01 	add.w	fp, r3, r1
   8aef2:	455a      	cmp	r2, fp
   8aef4:	dcd1      	bgt.n	8ae9a <__sfvwrite_r+0x156>
   8aef6:	4293      	cmp	r3, r2
   8aef8:	dc6b      	bgt.n	8afd2 <__sfvwrite_r+0x28e>
   8aefa:	462a      	mov	r2, r5
   8aefc:	4648      	mov	r0, r9
   8aefe:	69e1      	ldr	r1, [r4, #28]
   8af00:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8af02:	47b8      	blx	r7
   8af04:	f1b0 0b00 	subs.w	fp, r0, #0
   8af08:	ddd3      	ble.n	8aeb2 <__sfvwrite_r+0x16e>
   8af0a:	9b00      	ldr	r3, [sp, #0]
   8af0c:	ebb3 030b 	subs.w	r3, r3, fp
   8af10:	9300      	str	r3, [sp, #0]
   8af12:	d057      	beq.n	8afc4 <__sfvwrite_r+0x280>
   8af14:	2001      	movs	r0, #1
   8af16:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8af1a:	445d      	add	r5, fp
   8af1c:	eba3 030b 	sub.w	r3, r3, fp
   8af20:	eba6 060b 	sub.w	r6, r6, fp
   8af24:	f8c8 3008 	str.w	r3, [r8, #8]
   8af28:	2b00      	cmp	r3, #0
   8af2a:	f43f af3e 	beq.w	8adaa <__sfvwrite_r+0x66>
   8af2e:	2e00      	cmp	r6, #0
   8af30:	d1d1      	bne.n	8aed6 <__sfvwrite_r+0x192>
   8af32:	f10a 0308 	add.w	r3, sl, #8
   8af36:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8af3a:	469a      	mov	sl, r3
   8af3c:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8af40:	3308      	adds	r3, #8
   8af42:	2e00      	cmp	r6, #0
   8af44:	d0f7      	beq.n	8af36 <__sfvwrite_r+0x1f2>
   8af46:	4632      	mov	r2, r6
   8af48:	210a      	movs	r1, #10
   8af4a:	4628      	mov	r0, r5
   8af4c:	f000 fbe2 	bl	8b714 <memchr>
   8af50:	2800      	cmp	r0, #0
   8af52:	d05e      	beq.n	8b012 <__sfvwrite_r+0x2ce>
   8af54:	3001      	adds	r0, #1
   8af56:	1b43      	subs	r3, r0, r5
   8af58:	461a      	mov	r2, r3
   8af5a:	9300      	str	r3, [sp, #0]
   8af5c:	e7be      	b.n	8aedc <__sfvwrite_r+0x198>
   8af5e:	6820      	ldr	r0, [r4, #0]
   8af60:	6923      	ldr	r3, [r4, #16]
   8af62:	4298      	cmp	r0, r3
   8af64:	d818      	bhi.n	8af98 <__sfvwrite_r+0x254>
   8af66:	6962      	ldr	r2, [r4, #20]
   8af68:	42b2      	cmp	r2, r6
   8af6a:	d815      	bhi.n	8af98 <__sfvwrite_r+0x254>
   8af6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8af70:	42b3      	cmp	r3, r6
   8af72:	bf28      	it	cs
   8af74:	4633      	movcs	r3, r6
   8af76:	fb93 f3f2 	sdiv	r3, r3, r2
   8af7a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8af7c:	fb02 f303 	mul.w	r3, r2, r3
   8af80:	4648      	mov	r0, r9
   8af82:	4652      	mov	r2, sl
   8af84:	69e1      	ldr	r1, [r4, #28]
   8af86:	47b8      	blx	r7
   8af88:	1e07      	subs	r7, r0, #0
   8af8a:	dd92      	ble.n	8aeb2 <__sfvwrite_r+0x16e>
   8af8c:	1bf6      	subs	r6, r6, r7
   8af8e:	e76f      	b.n	8ae70 <__sfvwrite_r+0x12c>
   8af90:	4637      	mov	r7, r6
   8af92:	46b3      	mov	fp, r6
   8af94:	6820      	ldr	r0, [r4, #0]
   8af96:	e75f      	b.n	8ae58 <__sfvwrite_r+0x114>
   8af98:	42b7      	cmp	r7, r6
   8af9a:	bf28      	it	cs
   8af9c:	4637      	movcs	r7, r6
   8af9e:	4651      	mov	r1, sl
   8afa0:	463a      	mov	r2, r7
   8afa2:	f000 fbf7 	bl	8b794 <memmove>
   8afa6:	68a3      	ldr	r3, [r4, #8]
   8afa8:	6822      	ldr	r2, [r4, #0]
   8afaa:	1bdb      	subs	r3, r3, r7
   8afac:	443a      	add	r2, r7
   8afae:	60a3      	str	r3, [r4, #8]
   8afb0:	6022      	str	r2, [r4, #0]
   8afb2:	2b00      	cmp	r3, #0
   8afb4:	d1ea      	bne.n	8af8c <__sfvwrite_r+0x248>
   8afb6:	4621      	mov	r1, r4
   8afb8:	4648      	mov	r0, r9
   8afba:	f7ff fc3d 	bl	8a838 <_fflush_r>
   8afbe:	2800      	cmp	r0, #0
   8afc0:	d0e4      	beq.n	8af8c <__sfvwrite_r+0x248>
   8afc2:	e776      	b.n	8aeb2 <__sfvwrite_r+0x16e>
   8afc4:	4621      	mov	r1, r4
   8afc6:	4648      	mov	r0, r9
   8afc8:	f7ff fc36 	bl	8a838 <_fflush_r>
   8afcc:	2800      	cmp	r0, #0
   8afce:	d0a2      	beq.n	8af16 <__sfvwrite_r+0x1d2>
   8afd0:	e76f      	b.n	8aeb2 <__sfvwrite_r+0x16e>
   8afd2:	4629      	mov	r1, r5
   8afd4:	4693      	mov	fp, r2
   8afd6:	9201      	str	r2, [sp, #4]
   8afd8:	f000 fbdc 	bl	8b794 <memmove>
   8afdc:	68a1      	ldr	r1, [r4, #8]
   8afde:	6823      	ldr	r3, [r4, #0]
   8afe0:	9a01      	ldr	r2, [sp, #4]
   8afe2:	1a89      	subs	r1, r1, r2
   8afe4:	441a      	add	r2, r3
   8afe6:	60a1      	str	r1, [r4, #8]
   8afe8:	6022      	str	r2, [r4, #0]
   8afea:	e78e      	b.n	8af0a <__sfvwrite_r+0x1c6>
   8afec:	4648      	mov	r0, r9
   8afee:	f000 ffc3 	bl	8bf78 <_realloc_r>
   8aff2:	4603      	mov	r3, r0
   8aff4:	2800      	cmp	r0, #0
   8aff6:	f47f af25 	bne.w	8ae44 <__sfvwrite_r+0x100>
   8affa:	4648      	mov	r0, r9
   8affc:	6921      	ldr	r1, [r4, #16]
   8affe:	f7ff fd9b 	bl	8ab38 <_free_r>
   8b002:	220c      	movs	r2, #12
   8b004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b008:	f8c9 2000 	str.w	r2, [r9]
   8b00c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8b010:	e751      	b.n	8aeb6 <__sfvwrite_r+0x172>
   8b012:	1c72      	adds	r2, r6, #1
   8b014:	9200      	str	r2, [sp, #0]
   8b016:	e761      	b.n	8aedc <__sfvwrite_r+0x198>
   8b018:	220c      	movs	r2, #12
   8b01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b01e:	f8c9 2000 	str.w	r2, [r9]
   8b022:	e748      	b.n	8aeb6 <__sfvwrite_r+0x172>
   8b024:	f04f 30ff 	mov.w	r0, #4294967295
   8b028:	e6c0      	b.n	8adac <__sfvwrite_r+0x68>
   8b02a:	bf00      	nop
   8b02c:	7ffffc00 	.word	0x7ffffc00

0008b030 <_fwalk_reent>:
   8b030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b034:	4607      	mov	r7, r0
   8b036:	4688      	mov	r8, r1
   8b038:	f04f 0900 	mov.w	r9, #0
   8b03c:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8b040:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8b044:	3d01      	subs	r5, #1
   8b046:	d410      	bmi.n	8b06a <_fwalk_reent+0x3a>
   8b048:	89a3      	ldrh	r3, [r4, #12]
   8b04a:	3d01      	subs	r5, #1
   8b04c:	2b01      	cmp	r3, #1
   8b04e:	d908      	bls.n	8b062 <_fwalk_reent+0x32>
   8b050:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8b054:	3301      	adds	r3, #1
   8b056:	d004      	beq.n	8b062 <_fwalk_reent+0x32>
   8b058:	4621      	mov	r1, r4
   8b05a:	4638      	mov	r0, r7
   8b05c:	47c0      	blx	r8
   8b05e:	ea49 0900 	orr.w	r9, r9, r0
   8b062:	1c6b      	adds	r3, r5, #1
   8b064:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8b068:	d1ee      	bne.n	8b048 <_fwalk_reent+0x18>
   8b06a:	6836      	ldr	r6, [r6, #0]
   8b06c:	2e00      	cmp	r6, #0
   8b06e:	d1e7      	bne.n	8b040 <_fwalk_reent+0x10>
   8b070:	4648      	mov	r0, r9
   8b072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b076:	bf00      	nop

0008b078 <__locale_mb_cur_max>:
   8b078:	4b01      	ldr	r3, [pc, #4]	; (8b080 <__locale_mb_cur_max+0x8>)
   8b07a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8b07e:	4770      	bx	lr
   8b080:	20000874 	.word	0x20000874

0008b084 <_localeconv_r>:
   8b084:	4800      	ldr	r0, [pc, #0]	; (8b088 <_localeconv_r+0x4>)
   8b086:	4770      	bx	lr
   8b088:	20000964 	.word	0x20000964

0008b08c <__retarget_lock_init_recursive>:
   8b08c:	4770      	bx	lr
   8b08e:	bf00      	nop

0008b090 <__retarget_lock_close_recursive>:
   8b090:	4770      	bx	lr
   8b092:	bf00      	nop

0008b094 <__retarget_lock_acquire_recursive>:
   8b094:	4770      	bx	lr
   8b096:	bf00      	nop

0008b098 <__retarget_lock_release_recursive>:
   8b098:	4770      	bx	lr
   8b09a:	bf00      	nop

0008b09c <__swhatbuf_r>:
   8b09c:	b570      	push	{r4, r5, r6, lr}
   8b09e:	460c      	mov	r4, r1
   8b0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b0a4:	4615      	mov	r5, r2
   8b0a6:	2900      	cmp	r1, #0
   8b0a8:	461e      	mov	r6, r3
   8b0aa:	b096      	sub	sp, #88	; 0x58
   8b0ac:	db14      	blt.n	8b0d8 <__swhatbuf_r+0x3c>
   8b0ae:	466a      	mov	r2, sp
   8b0b0:	f001 fc7a 	bl	8c9a8 <_fstat_r>
   8b0b4:	2800      	cmp	r0, #0
   8b0b6:	db0f      	blt.n	8b0d8 <__swhatbuf_r+0x3c>
   8b0b8:	9a01      	ldr	r2, [sp, #4]
   8b0ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8b0be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8b0c2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8b0c6:	fab2 f282 	clz	r2, r2
   8b0ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8b0ce:	0952      	lsrs	r2, r2, #5
   8b0d0:	6032      	str	r2, [r6, #0]
   8b0d2:	602b      	str	r3, [r5, #0]
   8b0d4:	b016      	add	sp, #88	; 0x58
   8b0d6:	bd70      	pop	{r4, r5, r6, pc}
   8b0d8:	2300      	movs	r3, #0
   8b0da:	89a1      	ldrh	r1, [r4, #12]
   8b0dc:	6033      	str	r3, [r6, #0]
   8b0de:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8b0e2:	d004      	beq.n	8b0ee <__swhatbuf_r+0x52>
   8b0e4:	2240      	movs	r2, #64	; 0x40
   8b0e6:	4618      	mov	r0, r3
   8b0e8:	602a      	str	r2, [r5, #0]
   8b0ea:	b016      	add	sp, #88	; 0x58
   8b0ec:	bd70      	pop	{r4, r5, r6, pc}
   8b0ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8b0f2:	602b      	str	r3, [r5, #0]
   8b0f4:	b016      	add	sp, #88	; 0x58
   8b0f6:	bd70      	pop	{r4, r5, r6, pc}

0008b0f8 <__smakebuf_r>:
   8b0f8:	b570      	push	{r4, r5, r6, lr}
   8b0fa:	898b      	ldrh	r3, [r1, #12]
   8b0fc:	460c      	mov	r4, r1
   8b0fe:	079d      	lsls	r5, r3, #30
   8b100:	b082      	sub	sp, #8
   8b102:	d507      	bpl.n	8b114 <__smakebuf_r+0x1c>
   8b104:	2201      	movs	r2, #1
   8b106:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8b10a:	614a      	str	r2, [r1, #20]
   8b10c:	600b      	str	r3, [r1, #0]
   8b10e:	610b      	str	r3, [r1, #16]
   8b110:	b002      	add	sp, #8
   8b112:	bd70      	pop	{r4, r5, r6, pc}
   8b114:	ab01      	add	r3, sp, #4
   8b116:	466a      	mov	r2, sp
   8b118:	4606      	mov	r6, r0
   8b11a:	f7ff ffbf 	bl	8b09c <__swhatbuf_r>
   8b11e:	9900      	ldr	r1, [sp, #0]
   8b120:	4605      	mov	r5, r0
   8b122:	4630      	mov	r0, r6
   8b124:	f000 f832 	bl	8b18c <_malloc_r>
   8b128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b12c:	b170      	cbz	r0, 8b14c <__smakebuf_r+0x54>
   8b12e:	4916      	ldr	r1, [pc, #88]	; (8b188 <__smakebuf_r+0x90>)
   8b130:	9a00      	ldr	r2, [sp, #0]
   8b132:	63f1      	str	r1, [r6, #60]	; 0x3c
   8b134:	9901      	ldr	r1, [sp, #4]
   8b136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8b13a:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8b13e:	81a3      	strh	r3, [r4, #12]
   8b140:	6020      	str	r0, [r4, #0]
   8b142:	b989      	cbnz	r1, 8b168 <__smakebuf_r+0x70>
   8b144:	432b      	orrs	r3, r5
   8b146:	81a3      	strh	r3, [r4, #12]
   8b148:	b002      	add	sp, #8
   8b14a:	bd70      	pop	{r4, r5, r6, pc}
   8b14c:	059a      	lsls	r2, r3, #22
   8b14e:	d4df      	bmi.n	8b110 <__smakebuf_r+0x18>
   8b150:	2101      	movs	r1, #1
   8b152:	f023 0303 	bic.w	r3, r3, #3
   8b156:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8b15a:	f043 0302 	orr.w	r3, r3, #2
   8b15e:	81a3      	strh	r3, [r4, #12]
   8b160:	6161      	str	r1, [r4, #20]
   8b162:	6022      	str	r2, [r4, #0]
   8b164:	6122      	str	r2, [r4, #16]
   8b166:	e7d3      	b.n	8b110 <__smakebuf_r+0x18>
   8b168:	4630      	mov	r0, r6
   8b16a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b16e:	f001 fc31 	bl	8c9d4 <_isatty_r>
   8b172:	b910      	cbnz	r0, 8b17a <__smakebuf_r+0x82>
   8b174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b178:	e7e4      	b.n	8b144 <__smakebuf_r+0x4c>
   8b17a:	89a2      	ldrh	r2, [r4, #12]
   8b17c:	f022 0203 	bic.w	r2, r2, #3
   8b180:	f042 0201 	orr.w	r2, r2, #1
   8b184:	b213      	sxth	r3, r2
   8b186:	e7dd      	b.n	8b144 <__smakebuf_r+0x4c>
   8b188:	0008a8e5 	.word	0x0008a8e5

0008b18c <_malloc_r>:
   8b18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b190:	f101 050b 	add.w	r5, r1, #11
   8b194:	2d16      	cmp	r5, #22
   8b196:	4606      	mov	r6, r0
   8b198:	b083      	sub	sp, #12
   8b19a:	d824      	bhi.n	8b1e6 <_malloc_r+0x5a>
   8b19c:	2910      	cmp	r1, #16
   8b19e:	f200 80b6 	bhi.w	8b30e <_malloc_r+0x182>
   8b1a2:	f000 fb61 	bl	8b868 <__malloc_lock>
   8b1a6:	2510      	movs	r5, #16
   8b1a8:	2002      	movs	r0, #2
   8b1aa:	2318      	movs	r3, #24
   8b1ac:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8b698 <_malloc_r+0x50c>
   8b1b0:	4443      	add	r3, r8
   8b1b2:	685c      	ldr	r4, [r3, #4]
   8b1b4:	f1a3 0208 	sub.w	r2, r3, #8
   8b1b8:	4294      	cmp	r4, r2
   8b1ba:	f000 80b4 	beq.w	8b326 <_malloc_r+0x19a>
   8b1be:	6863      	ldr	r3, [r4, #4]
   8b1c0:	68e1      	ldr	r1, [r4, #12]
   8b1c2:	f023 0303 	bic.w	r3, r3, #3
   8b1c6:	4423      	add	r3, r4
   8b1c8:	685a      	ldr	r2, [r3, #4]
   8b1ca:	68a5      	ldr	r5, [r4, #8]
   8b1cc:	f042 0201 	orr.w	r2, r2, #1
   8b1d0:	60e9      	str	r1, [r5, #12]
   8b1d2:	4630      	mov	r0, r6
   8b1d4:	608d      	str	r5, [r1, #8]
   8b1d6:	3408      	adds	r4, #8
   8b1d8:	605a      	str	r2, [r3, #4]
   8b1da:	f000 fb4b 	bl	8b874 <__malloc_unlock>
   8b1de:	4620      	mov	r0, r4
   8b1e0:	b003      	add	sp, #12
   8b1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b1e6:	f035 0507 	bics.w	r5, r5, #7
   8b1ea:	f100 8090 	bmi.w	8b30e <_malloc_r+0x182>
   8b1ee:	42a9      	cmp	r1, r5
   8b1f0:	f200 808d 	bhi.w	8b30e <_malloc_r+0x182>
   8b1f4:	f000 fb38 	bl	8b868 <__malloc_lock>
   8b1f8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8b1fc:	f0c0 8185 	bcc.w	8b50a <_malloc_r+0x37e>
   8b200:	0a6b      	lsrs	r3, r5, #9
   8b202:	f000 808b 	beq.w	8b31c <_malloc_r+0x190>
   8b206:	2b04      	cmp	r3, #4
   8b208:	f200 815b 	bhi.w	8b4c2 <_malloc_r+0x336>
   8b20c:	09ab      	lsrs	r3, r5, #6
   8b20e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8b212:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8b216:	00c1      	lsls	r1, r0, #3
   8b218:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8b698 <_malloc_r+0x50c>
   8b21c:	4441      	add	r1, r8
   8b21e:	684c      	ldr	r4, [r1, #4]
   8b220:	3908      	subs	r1, #8
   8b222:	42a1      	cmp	r1, r4
   8b224:	d106      	bne.n	8b234 <_malloc_r+0xa8>
   8b226:	e00c      	b.n	8b242 <_malloc_r+0xb6>
   8b228:	2a00      	cmp	r2, #0
   8b22a:	f280 8122 	bge.w	8b472 <_malloc_r+0x2e6>
   8b22e:	68e4      	ldr	r4, [r4, #12]
   8b230:	42a1      	cmp	r1, r4
   8b232:	d006      	beq.n	8b242 <_malloc_r+0xb6>
   8b234:	6863      	ldr	r3, [r4, #4]
   8b236:	f023 0303 	bic.w	r3, r3, #3
   8b23a:	1b5a      	subs	r2, r3, r5
   8b23c:	2a0f      	cmp	r2, #15
   8b23e:	ddf3      	ble.n	8b228 <_malloc_r+0x9c>
   8b240:	4638      	mov	r0, r7
   8b242:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8b246:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8b69c <_malloc_r+0x510>
   8b24a:	4564      	cmp	r4, ip
   8b24c:	d077      	beq.n	8b33e <_malloc_r+0x1b2>
   8b24e:	6862      	ldr	r2, [r4, #4]
   8b250:	f022 0203 	bic.w	r2, r2, #3
   8b254:	1b53      	subs	r3, r2, r5
   8b256:	2b0f      	cmp	r3, #15
   8b258:	f300 8165 	bgt.w	8b526 <_malloc_r+0x39a>
   8b25c:	2b00      	cmp	r3, #0
   8b25e:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8b262:	f280 8156 	bge.w	8b512 <_malloc_r+0x386>
   8b266:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8b26a:	f080 8106 	bcs.w	8b47a <_malloc_r+0x2ee>
   8b26e:	2101      	movs	r1, #1
   8b270:	08d3      	lsrs	r3, r2, #3
   8b272:	0952      	lsrs	r2, r2, #5
   8b274:	440b      	add	r3, r1
   8b276:	fa01 f202 	lsl.w	r2, r1, r2
   8b27a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8b27e:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8b282:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8b286:	430a      	orrs	r2, r1
   8b288:	f1ae 0108 	sub.w	r1, lr, #8
   8b28c:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8b290:	f8c8 2004 	str.w	r2, [r8, #4]
   8b294:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8b298:	60fc      	str	r4, [r7, #12]
   8b29a:	2101      	movs	r1, #1
   8b29c:	1083      	asrs	r3, r0, #2
   8b29e:	4099      	lsls	r1, r3
   8b2a0:	4291      	cmp	r1, r2
   8b2a2:	d853      	bhi.n	8b34c <_malloc_r+0x1c0>
   8b2a4:	4211      	tst	r1, r2
   8b2a6:	d106      	bne.n	8b2b6 <_malloc_r+0x12a>
   8b2a8:	f020 0003 	bic.w	r0, r0, #3
   8b2ac:	0049      	lsls	r1, r1, #1
   8b2ae:	4211      	tst	r1, r2
   8b2b0:	f100 0004 	add.w	r0, r0, #4
   8b2b4:	d0fa      	beq.n	8b2ac <_malloc_r+0x120>
   8b2b6:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8b2ba:	464c      	mov	r4, r9
   8b2bc:	4686      	mov	lr, r0
   8b2be:	68e7      	ldr	r7, [r4, #12]
   8b2c0:	42bc      	cmp	r4, r7
   8b2c2:	d107      	bne.n	8b2d4 <_malloc_r+0x148>
   8b2c4:	e109      	b.n	8b4da <_malloc_r+0x34e>
   8b2c6:	2b00      	cmp	r3, #0
   8b2c8:	f280 8110 	bge.w	8b4ec <_malloc_r+0x360>
   8b2cc:	68ff      	ldr	r7, [r7, #12]
   8b2ce:	42bc      	cmp	r4, r7
   8b2d0:	f000 8103 	beq.w	8b4da <_malloc_r+0x34e>
   8b2d4:	687a      	ldr	r2, [r7, #4]
   8b2d6:	f022 0203 	bic.w	r2, r2, #3
   8b2da:	1b53      	subs	r3, r2, r5
   8b2dc:	2b0f      	cmp	r3, #15
   8b2de:	ddf2      	ble.n	8b2c6 <_malloc_r+0x13a>
   8b2e0:	f045 0e01 	orr.w	lr, r5, #1
   8b2e4:	4630      	mov	r0, r6
   8b2e6:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8b2ea:	443d      	add	r5, r7
   8b2ec:	f043 0601 	orr.w	r6, r3, #1
   8b2f0:	f8c7 e004 	str.w	lr, [r7, #4]
   8b2f4:	60e1      	str	r1, [r4, #12]
   8b2f6:	608c      	str	r4, [r1, #8]
   8b2f8:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8b2fc:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8b300:	606e      	str	r6, [r5, #4]
   8b302:	50bb      	str	r3, [r7, r2]
   8b304:	f000 fab6 	bl	8b874 <__malloc_unlock>
   8b308:	f107 0408 	add.w	r4, r7, #8
   8b30c:	e002      	b.n	8b314 <_malloc_r+0x188>
   8b30e:	230c      	movs	r3, #12
   8b310:	2400      	movs	r4, #0
   8b312:	6033      	str	r3, [r6, #0]
   8b314:	4620      	mov	r0, r4
   8b316:	b003      	add	sp, #12
   8b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b31c:	f44f 7100 	mov.w	r1, #512	; 0x200
   8b320:	2040      	movs	r0, #64	; 0x40
   8b322:	273f      	movs	r7, #63	; 0x3f
   8b324:	e778      	b.n	8b218 <_malloc_r+0x8c>
   8b326:	68dc      	ldr	r4, [r3, #12]
   8b328:	42a3      	cmp	r3, r4
   8b32a:	bf08      	it	eq
   8b32c:	3002      	addeq	r0, #2
   8b32e:	f47f af46 	bne.w	8b1be <_malloc_r+0x32>
   8b332:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8b336:	f8df c364 	ldr.w	ip, [pc, #868]	; 8b69c <_malloc_r+0x510>
   8b33a:	4564      	cmp	r4, ip
   8b33c:	d187      	bne.n	8b24e <_malloc_r+0xc2>
   8b33e:	2101      	movs	r1, #1
   8b340:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8b344:	1083      	asrs	r3, r0, #2
   8b346:	4099      	lsls	r1, r3
   8b348:	4291      	cmp	r1, r2
   8b34a:	d9ab      	bls.n	8b2a4 <_malloc_r+0x118>
   8b34c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b350:	6867      	ldr	r7, [r4, #4]
   8b352:	f027 0703 	bic.w	r7, r7, #3
   8b356:	42bd      	cmp	r5, r7
   8b358:	d802      	bhi.n	8b360 <_malloc_r+0x1d4>
   8b35a:	1b7b      	subs	r3, r7, r5
   8b35c:	2b0f      	cmp	r3, #15
   8b35e:	dc77      	bgt.n	8b450 <_malloc_r+0x2c4>
   8b360:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8b6a0 <_malloc_r+0x514>
   8b364:	4bc8      	ldr	r3, [pc, #800]	; (8b688 <_malloc_r+0x4fc>)
   8b366:	f8d9 2000 	ldr.w	r2, [r9]
   8b36a:	681b      	ldr	r3, [r3, #0]
   8b36c:	3201      	adds	r2, #1
   8b36e:	442b      	add	r3, r5
   8b370:	eb04 0a07 	add.w	sl, r4, r7
   8b374:	f000 8124 	beq.w	8b5c0 <_malloc_r+0x434>
   8b378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8b37c:	330f      	adds	r3, #15
   8b37e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8b382:	f02b 0b0f 	bic.w	fp, fp, #15
   8b386:	4659      	mov	r1, fp
   8b388:	4630      	mov	r0, r6
   8b38a:	f001 f81d 	bl	8c3c8 <_sbrk_r>
   8b38e:	1c41      	adds	r1, r0, #1
   8b390:	4602      	mov	r2, r0
   8b392:	f000 80e1 	beq.w	8b558 <_malloc_r+0x3cc>
   8b396:	4582      	cmp	sl, r0
   8b398:	f200 80dc 	bhi.w	8b554 <_malloc_r+0x3c8>
   8b39c:	4bbb      	ldr	r3, [pc, #748]	; (8b68c <_malloc_r+0x500>)
   8b39e:	6819      	ldr	r1, [r3, #0]
   8b3a0:	4459      	add	r1, fp
   8b3a2:	4608      	mov	r0, r1
   8b3a4:	6019      	str	r1, [r3, #0]
   8b3a6:	f000 8141 	beq.w	8b62c <_malloc_r+0x4a0>
   8b3aa:	f8d9 1000 	ldr.w	r1, [r9]
   8b3ae:	9301      	str	r3, [sp, #4]
   8b3b0:	3101      	adds	r1, #1
   8b3b2:	bf1b      	ittet	ne
   8b3b4:	eba2 0a0a 	subne.w	sl, r2, sl
   8b3b8:	4450      	addne	r0, sl
   8b3ba:	f8c9 2000 	streq.w	r2, [r9]
   8b3be:	6018      	strne	r0, [r3, #0]
   8b3c0:	f012 0a07 	ands.w	sl, r2, #7
   8b3c4:	f000 810a 	beq.w	8b5dc <_malloc_r+0x450>
   8b3c8:	f1ca 0108 	rsb	r1, sl, #8
   8b3cc:	440a      	add	r2, r1
   8b3ce:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8b3d2:	4493      	add	fp, r2
   8b3d4:	3108      	adds	r1, #8
   8b3d6:	eba1 010b 	sub.w	r1, r1, fp
   8b3da:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8b3de:	4649      	mov	r1, r9
   8b3e0:	4630      	mov	r0, r6
   8b3e2:	9200      	str	r2, [sp, #0]
   8b3e4:	f000 fff0 	bl	8c3c8 <_sbrk_r>
   8b3e8:	1c42      	adds	r2, r0, #1
   8b3ea:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b3ee:	f000 8143 	beq.w	8b678 <_malloc_r+0x4ec>
   8b3f2:	1a80      	subs	r0, r0, r2
   8b3f4:	eb00 0b09 	add.w	fp, r0, r9
   8b3f8:	6819      	ldr	r1, [r3, #0]
   8b3fa:	f04b 0001 	orr.w	r0, fp, #1
   8b3fe:	4449      	add	r1, r9
   8b400:	4544      	cmp	r4, r8
   8b402:	f8c8 2008 	str.w	r2, [r8, #8]
   8b406:	6019      	str	r1, [r3, #0]
   8b408:	6050      	str	r0, [r2, #4]
   8b40a:	f000 811c 	beq.w	8b646 <_malloc_r+0x4ba>
   8b40e:	2f0f      	cmp	r7, #15
   8b410:	f240 811b 	bls.w	8b64a <_malloc_r+0x4be>
   8b414:	f04f 0c05 	mov.w	ip, #5
   8b418:	6860      	ldr	r0, [r4, #4]
   8b41a:	3f0c      	subs	r7, #12
   8b41c:	f027 0707 	bic.w	r7, r7, #7
   8b420:	f000 0001 	and.w	r0, r0, #1
   8b424:	4338      	orrs	r0, r7
   8b426:	eb04 0e07 	add.w	lr, r4, r7
   8b42a:	2f0f      	cmp	r7, #15
   8b42c:	6060      	str	r0, [r4, #4]
   8b42e:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8b432:	f200 8137 	bhi.w	8b6a4 <_malloc_r+0x518>
   8b436:	4614      	mov	r4, r2
   8b438:	6850      	ldr	r0, [r2, #4]
   8b43a:	4b95      	ldr	r3, [pc, #596]	; (8b690 <_malloc_r+0x504>)
   8b43c:	681a      	ldr	r2, [r3, #0]
   8b43e:	428a      	cmp	r2, r1
   8b440:	bf38      	it	cc
   8b442:	6019      	strcc	r1, [r3, #0]
   8b444:	4b93      	ldr	r3, [pc, #588]	; (8b694 <_malloc_r+0x508>)
   8b446:	681a      	ldr	r2, [r3, #0]
   8b448:	428a      	cmp	r2, r1
   8b44a:	bf38      	it	cc
   8b44c:	6019      	strcc	r1, [r3, #0]
   8b44e:	e086      	b.n	8b55e <_malloc_r+0x3d2>
   8b450:	f045 0201 	orr.w	r2, r5, #1
   8b454:	f043 0301 	orr.w	r3, r3, #1
   8b458:	4425      	add	r5, r4
   8b45a:	6062      	str	r2, [r4, #4]
   8b45c:	4630      	mov	r0, r6
   8b45e:	f8c8 5008 	str.w	r5, [r8, #8]
   8b462:	3408      	adds	r4, #8
   8b464:	606b      	str	r3, [r5, #4]
   8b466:	f000 fa05 	bl	8b874 <__malloc_unlock>
   8b46a:	4620      	mov	r0, r4
   8b46c:	b003      	add	sp, #12
   8b46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b472:	4423      	add	r3, r4
   8b474:	685a      	ldr	r2, [r3, #4]
   8b476:	68e1      	ldr	r1, [r4, #12]
   8b478:	e6a7      	b.n	8b1ca <_malloc_r+0x3e>
   8b47a:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8b47e:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8b482:	d361      	bcc.n	8b548 <_malloc_r+0x3bc>
   8b484:	2b14      	cmp	r3, #20
   8b486:	f200 80ba 	bhi.w	8b5fe <_malloc_r+0x472>
   8b48a:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8b48e:	00c9      	lsls	r1, r1, #3
   8b490:	335b      	adds	r3, #91	; 0x5b
   8b492:	eb08 0701 	add.w	r7, r8, r1
   8b496:	f858 1001 	ldr.w	r1, [r8, r1]
   8b49a:	3f08      	subs	r7, #8
   8b49c:	428f      	cmp	r7, r1
   8b49e:	f000 8092 	beq.w	8b5c6 <_malloc_r+0x43a>
   8b4a2:	684b      	ldr	r3, [r1, #4]
   8b4a4:	f023 0303 	bic.w	r3, r3, #3
   8b4a8:	4293      	cmp	r3, r2
   8b4aa:	d902      	bls.n	8b4b2 <_malloc_r+0x326>
   8b4ac:	6889      	ldr	r1, [r1, #8]
   8b4ae:	428f      	cmp	r7, r1
   8b4b0:	d1f7      	bne.n	8b4a2 <_malloc_r+0x316>
   8b4b2:	68cf      	ldr	r7, [r1, #12]
   8b4b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8b4b8:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8b4bc:	60bc      	str	r4, [r7, #8]
   8b4be:	60cc      	str	r4, [r1, #12]
   8b4c0:	e6eb      	b.n	8b29a <_malloc_r+0x10e>
   8b4c2:	2b14      	cmp	r3, #20
   8b4c4:	d959      	bls.n	8b57a <_malloc_r+0x3ee>
   8b4c6:	2b54      	cmp	r3, #84	; 0x54
   8b4c8:	f200 80a1 	bhi.w	8b60e <_malloc_r+0x482>
   8b4cc:	0b2b      	lsrs	r3, r5, #12
   8b4ce:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8b4d2:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8b4d6:	00c1      	lsls	r1, r0, #3
   8b4d8:	e69e      	b.n	8b218 <_malloc_r+0x8c>
   8b4da:	f10e 0e01 	add.w	lr, lr, #1
   8b4de:	f01e 0f03 	tst.w	lr, #3
   8b4e2:	f104 0408 	add.w	r4, r4, #8
   8b4e6:	f47f aeea 	bne.w	8b2be <_malloc_r+0x132>
   8b4ea:	e051      	b.n	8b590 <_malloc_r+0x404>
   8b4ec:	463c      	mov	r4, r7
   8b4ee:	443a      	add	r2, r7
   8b4f0:	6853      	ldr	r3, [r2, #4]
   8b4f2:	68f9      	ldr	r1, [r7, #12]
   8b4f4:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8b4f8:	f043 0301 	orr.w	r3, r3, #1
   8b4fc:	6053      	str	r3, [r2, #4]
   8b4fe:	4630      	mov	r0, r6
   8b500:	60e9      	str	r1, [r5, #12]
   8b502:	608d      	str	r5, [r1, #8]
   8b504:	f000 f9b6 	bl	8b874 <__malloc_unlock>
   8b508:	e704      	b.n	8b314 <_malloc_r+0x188>
   8b50a:	08e8      	lsrs	r0, r5, #3
   8b50c:	f105 0308 	add.w	r3, r5, #8
   8b510:	e64c      	b.n	8b1ac <_malloc_r+0x20>
   8b512:	4422      	add	r2, r4
   8b514:	6853      	ldr	r3, [r2, #4]
   8b516:	4630      	mov	r0, r6
   8b518:	f043 0301 	orr.w	r3, r3, #1
   8b51c:	6053      	str	r3, [r2, #4]
   8b51e:	3408      	adds	r4, #8
   8b520:	f000 f9a8 	bl	8b874 <__malloc_unlock>
   8b524:	e6f6      	b.n	8b314 <_malloc_r+0x188>
   8b526:	f045 0701 	orr.w	r7, r5, #1
   8b52a:	f043 0101 	orr.w	r1, r3, #1
   8b52e:	4425      	add	r5, r4
   8b530:	6067      	str	r7, [r4, #4]
   8b532:	4630      	mov	r0, r6
   8b534:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8b538:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8b53c:	6069      	str	r1, [r5, #4]
   8b53e:	50a3      	str	r3, [r4, r2]
   8b540:	f000 f998 	bl	8b874 <__malloc_unlock>
   8b544:	3408      	adds	r4, #8
   8b546:	e6e5      	b.n	8b314 <_malloc_r+0x188>
   8b548:	0993      	lsrs	r3, r2, #6
   8b54a:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8b54e:	00c9      	lsls	r1, r1, #3
   8b550:	3338      	adds	r3, #56	; 0x38
   8b552:	e79e      	b.n	8b492 <_malloc_r+0x306>
   8b554:	4544      	cmp	r4, r8
   8b556:	d064      	beq.n	8b622 <_malloc_r+0x496>
   8b558:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b55c:	6860      	ldr	r0, [r4, #4]
   8b55e:	f020 0b03 	bic.w	fp, r0, #3
   8b562:	455d      	cmp	r5, fp
   8b564:	ebab 0305 	sub.w	r3, fp, r5
   8b568:	d802      	bhi.n	8b570 <_malloc_r+0x3e4>
   8b56a:	2b0f      	cmp	r3, #15
   8b56c:	f73f af70 	bgt.w	8b450 <_malloc_r+0x2c4>
   8b570:	4630      	mov	r0, r6
   8b572:	f000 f97f 	bl	8b874 <__malloc_unlock>
   8b576:	2400      	movs	r4, #0
   8b578:	e6cc      	b.n	8b314 <_malloc_r+0x188>
   8b57a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8b57e:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8b582:	00c1      	lsls	r1, r0, #3
   8b584:	e648      	b.n	8b218 <_malloc_r+0x8c>
   8b586:	f859 3908 	ldr.w	r3, [r9], #-8
   8b58a:	454b      	cmp	r3, r9
   8b58c:	f040 80a9 	bne.w	8b6e2 <_malloc_r+0x556>
   8b590:	f010 0f03 	tst.w	r0, #3
   8b594:	f100 30ff 	add.w	r0, r0, #4294967295
   8b598:	d1f5      	bne.n	8b586 <_malloc_r+0x3fa>
   8b59a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8b59e:	ea23 0301 	bic.w	r3, r3, r1
   8b5a2:	f8c8 3004 	str.w	r3, [r8, #4]
   8b5a6:	0049      	lsls	r1, r1, #1
   8b5a8:	4299      	cmp	r1, r3
   8b5aa:	f63f aecf 	bhi.w	8b34c <_malloc_r+0x1c0>
   8b5ae:	b919      	cbnz	r1, 8b5b8 <_malloc_r+0x42c>
   8b5b0:	e6cc      	b.n	8b34c <_malloc_r+0x1c0>
   8b5b2:	0049      	lsls	r1, r1, #1
   8b5b4:	f10e 0e04 	add.w	lr, lr, #4
   8b5b8:	4219      	tst	r1, r3
   8b5ba:	d0fa      	beq.n	8b5b2 <_malloc_r+0x426>
   8b5bc:	4670      	mov	r0, lr
   8b5be:	e67a      	b.n	8b2b6 <_malloc_r+0x12a>
   8b5c0:	f103 0b10 	add.w	fp, r3, #16
   8b5c4:	e6df      	b.n	8b386 <_malloc_r+0x1fa>
   8b5c6:	f04f 0e01 	mov.w	lr, #1
   8b5ca:	109a      	asrs	r2, r3, #2
   8b5cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8b5d0:	fa0e f202 	lsl.w	r2, lr, r2
   8b5d4:	431a      	orrs	r2, r3
   8b5d6:	f8c8 2004 	str.w	r2, [r8, #4]
   8b5da:	e76d      	b.n	8b4b8 <_malloc_r+0x32c>
   8b5dc:	eb02 010b 	add.w	r1, r2, fp
   8b5e0:	4249      	negs	r1, r1
   8b5e2:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8b5e6:	4649      	mov	r1, r9
   8b5e8:	4630      	mov	r0, r6
   8b5ea:	9200      	str	r2, [sp, #0]
   8b5ec:	f000 feec 	bl	8c3c8 <_sbrk_r>
   8b5f0:	1c43      	adds	r3, r0, #1
   8b5f2:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b5f6:	f47f aefc 	bne.w	8b3f2 <_malloc_r+0x266>
   8b5fa:	46d1      	mov	r9, sl
   8b5fc:	e6fc      	b.n	8b3f8 <_malloc_r+0x26c>
   8b5fe:	2b54      	cmp	r3, #84	; 0x54
   8b600:	d826      	bhi.n	8b650 <_malloc_r+0x4c4>
   8b602:	0b13      	lsrs	r3, r2, #12
   8b604:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8b608:	00c9      	lsls	r1, r1, #3
   8b60a:	336e      	adds	r3, #110	; 0x6e
   8b60c:	e741      	b.n	8b492 <_malloc_r+0x306>
   8b60e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b612:	d826      	bhi.n	8b662 <_malloc_r+0x4d6>
   8b614:	0beb      	lsrs	r3, r5, #15
   8b616:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8b61a:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8b61e:	00c1      	lsls	r1, r0, #3
   8b620:	e5fa      	b.n	8b218 <_malloc_r+0x8c>
   8b622:	4b1a      	ldr	r3, [pc, #104]	; (8b68c <_malloc_r+0x500>)
   8b624:	6818      	ldr	r0, [r3, #0]
   8b626:	4458      	add	r0, fp
   8b628:	6018      	str	r0, [r3, #0]
   8b62a:	e6be      	b.n	8b3aa <_malloc_r+0x21e>
   8b62c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8b630:	f1bc 0f00 	cmp.w	ip, #0
   8b634:	f47f aeb9 	bne.w	8b3aa <_malloc_r+0x21e>
   8b638:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b63c:	44bb      	add	fp, r7
   8b63e:	f04b 0001 	orr.w	r0, fp, #1
   8b642:	6060      	str	r0, [r4, #4]
   8b644:	e6f9      	b.n	8b43a <_malloc_r+0x2ae>
   8b646:	4614      	mov	r4, r2
   8b648:	e6f7      	b.n	8b43a <_malloc_r+0x2ae>
   8b64a:	2301      	movs	r3, #1
   8b64c:	6053      	str	r3, [r2, #4]
   8b64e:	e78f      	b.n	8b570 <_malloc_r+0x3e4>
   8b650:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b654:	d832      	bhi.n	8b6bc <_malloc_r+0x530>
   8b656:	0bd3      	lsrs	r3, r2, #15
   8b658:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8b65c:	00c9      	lsls	r1, r1, #3
   8b65e:	3377      	adds	r3, #119	; 0x77
   8b660:	e717      	b.n	8b492 <_malloc_r+0x306>
   8b662:	f240 5254 	movw	r2, #1364	; 0x554
   8b666:	4293      	cmp	r3, r2
   8b668:	d832      	bhi.n	8b6d0 <_malloc_r+0x544>
   8b66a:	0cab      	lsrs	r3, r5, #18
   8b66c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8b670:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8b674:	00c1      	lsls	r1, r0, #3
   8b676:	e5cf      	b.n	8b218 <_malloc_r+0x8c>
   8b678:	f1aa 0a08 	sub.w	sl, sl, #8
   8b67c:	44d3      	add	fp, sl
   8b67e:	f04f 0900 	mov.w	r9, #0
   8b682:	ebab 0b02 	sub.w	fp, fp, r2
   8b686:	e6b7      	b.n	8b3f8 <_malloc_r+0x26c>
   8b688:	200013b8 	.word	0x200013b8
   8b68c:	20001388 	.word	0x20001388
   8b690:	200013b0 	.word	0x200013b0
   8b694:	200013b4 	.word	0x200013b4
   8b698:	200009e0 	.word	0x200009e0
   8b69c:	200009e8 	.word	0x200009e8
   8b6a0:	20000de8 	.word	0x20000de8
   8b6a4:	f104 0108 	add.w	r1, r4, #8
   8b6a8:	4630      	mov	r0, r6
   8b6aa:	9300      	str	r3, [sp, #0]
   8b6ac:	f7ff fa44 	bl	8ab38 <_free_r>
   8b6b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b6b4:	9b00      	ldr	r3, [sp, #0]
   8b6b6:	6860      	ldr	r0, [r4, #4]
   8b6b8:	6819      	ldr	r1, [r3, #0]
   8b6ba:	e6be      	b.n	8b43a <_malloc_r+0x2ae>
   8b6bc:	f240 5154 	movw	r1, #1364	; 0x554
   8b6c0:	428b      	cmp	r3, r1
   8b6c2:	d80a      	bhi.n	8b6da <_malloc_r+0x54e>
   8b6c4:	0c93      	lsrs	r3, r2, #18
   8b6c6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8b6ca:	00c9      	lsls	r1, r1, #3
   8b6cc:	337c      	adds	r3, #124	; 0x7c
   8b6ce:	e6e0      	b.n	8b492 <_malloc_r+0x306>
   8b6d0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b6d4:	207f      	movs	r0, #127	; 0x7f
   8b6d6:	277e      	movs	r7, #126	; 0x7e
   8b6d8:	e59e      	b.n	8b218 <_malloc_r+0x8c>
   8b6da:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b6de:	237e      	movs	r3, #126	; 0x7e
   8b6e0:	e6d7      	b.n	8b492 <_malloc_r+0x306>
   8b6e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8b6e6:	e75e      	b.n	8b5a6 <_malloc_r+0x41a>

0008b6e8 <__ascii_mbtowc>:
   8b6e8:	b082      	sub	sp, #8
   8b6ea:	b149      	cbz	r1, 8b700 <__ascii_mbtowc+0x18>
   8b6ec:	b15a      	cbz	r2, 8b706 <__ascii_mbtowc+0x1e>
   8b6ee:	b16b      	cbz	r3, 8b70c <__ascii_mbtowc+0x24>
   8b6f0:	7813      	ldrb	r3, [r2, #0]
   8b6f2:	600b      	str	r3, [r1, #0]
   8b6f4:	7812      	ldrb	r2, [r2, #0]
   8b6f6:	1e10      	subs	r0, r2, #0
   8b6f8:	bf18      	it	ne
   8b6fa:	2001      	movne	r0, #1
   8b6fc:	b002      	add	sp, #8
   8b6fe:	4770      	bx	lr
   8b700:	a901      	add	r1, sp, #4
   8b702:	2a00      	cmp	r2, #0
   8b704:	d1f3      	bne.n	8b6ee <__ascii_mbtowc+0x6>
   8b706:	4610      	mov	r0, r2
   8b708:	b002      	add	sp, #8
   8b70a:	4770      	bx	lr
   8b70c:	f06f 0001 	mvn.w	r0, #1
   8b710:	e7f4      	b.n	8b6fc <__ascii_mbtowc+0x14>
   8b712:	bf00      	nop

0008b714 <memchr>:
   8b714:	b470      	push	{r4, r5, r6}
   8b716:	0784      	lsls	r4, r0, #30
   8b718:	b2cd      	uxtb	r5, r1
   8b71a:	d012      	beq.n	8b742 <memchr+0x2e>
   8b71c:	4603      	mov	r3, r0
   8b71e:	1e54      	subs	r4, r2, #1
   8b720:	b92a      	cbnz	r2, 8b72e <memchr+0x1a>
   8b722:	e00b      	b.n	8b73c <memchr+0x28>
   8b724:	079a      	lsls	r2, r3, #30
   8b726:	4618      	mov	r0, r3
   8b728:	d00c      	beq.n	8b744 <memchr+0x30>
   8b72a:	3c01      	subs	r4, #1
   8b72c:	d306      	bcc.n	8b73c <memchr+0x28>
   8b72e:	4618      	mov	r0, r3
   8b730:	f813 2b01 	ldrb.w	r2, [r3], #1
   8b734:	42aa      	cmp	r2, r5
   8b736:	d1f5      	bne.n	8b724 <memchr+0x10>
   8b738:	bc70      	pop	{r4, r5, r6}
   8b73a:	4770      	bx	lr
   8b73c:	2000      	movs	r0, #0
   8b73e:	bc70      	pop	{r4, r5, r6}
   8b740:	4770      	bx	lr
   8b742:	4614      	mov	r4, r2
   8b744:	2c03      	cmp	r4, #3
   8b746:	d80d      	bhi.n	8b764 <memchr+0x50>
   8b748:	2c00      	cmp	r4, #0
   8b74a:	d0f7      	beq.n	8b73c <memchr+0x28>
   8b74c:	4602      	mov	r2, r0
   8b74e:	1903      	adds	r3, r0, r4
   8b750:	e001      	b.n	8b756 <memchr+0x42>
   8b752:	429a      	cmp	r2, r3
   8b754:	d0f2      	beq.n	8b73c <memchr+0x28>
   8b756:	4610      	mov	r0, r2
   8b758:	f812 1b01 	ldrb.w	r1, [r2], #1
   8b75c:	42a9      	cmp	r1, r5
   8b75e:	d1f8      	bne.n	8b752 <memchr+0x3e>
   8b760:	bc70      	pop	{r4, r5, r6}
   8b762:	4770      	bx	lr
   8b764:	4606      	mov	r6, r0
   8b766:	020a      	lsls	r2, r1, #8
   8b768:	b292      	uxth	r2, r2
   8b76a:	432a      	orrs	r2, r5
   8b76c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8b770:	6833      	ldr	r3, [r6, #0]
   8b772:	4630      	mov	r0, r6
   8b774:	4053      	eors	r3, r2
   8b776:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8b77a:	ea21 0303 	bic.w	r3, r1, r3
   8b77e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8b782:	f106 0604 	add.w	r6, r6, #4
   8b786:	d1e1      	bne.n	8b74c <memchr+0x38>
   8b788:	3c04      	subs	r4, #4
   8b78a:	2c03      	cmp	r4, #3
   8b78c:	4630      	mov	r0, r6
   8b78e:	d8ef      	bhi.n	8b770 <memchr+0x5c>
   8b790:	e7da      	b.n	8b748 <memchr+0x34>
   8b792:	bf00      	nop

0008b794 <memmove>:
   8b794:	4288      	cmp	r0, r1
   8b796:	b4f0      	push	{r4, r5, r6, r7}
   8b798:	d90d      	bls.n	8b7b6 <memmove+0x22>
   8b79a:	188b      	adds	r3, r1, r2
   8b79c:	4283      	cmp	r3, r0
   8b79e:	d90a      	bls.n	8b7b6 <memmove+0x22>
   8b7a0:	1884      	adds	r4, r0, r2
   8b7a2:	b132      	cbz	r2, 8b7b2 <memmove+0x1e>
   8b7a4:	4622      	mov	r2, r4
   8b7a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8b7aa:	4299      	cmp	r1, r3
   8b7ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8b7b0:	d1f9      	bne.n	8b7a6 <memmove+0x12>
   8b7b2:	bcf0      	pop	{r4, r5, r6, r7}
   8b7b4:	4770      	bx	lr
   8b7b6:	2a0f      	cmp	r2, #15
   8b7b8:	d80e      	bhi.n	8b7d8 <memmove+0x44>
   8b7ba:	4603      	mov	r3, r0
   8b7bc:	1e54      	subs	r4, r2, #1
   8b7be:	2a00      	cmp	r2, #0
   8b7c0:	d0f7      	beq.n	8b7b2 <memmove+0x1e>
   8b7c2:	3401      	adds	r4, #1
   8b7c4:	440c      	add	r4, r1
   8b7c6:	3b01      	subs	r3, #1
   8b7c8:	f811 2b01 	ldrb.w	r2, [r1], #1
   8b7cc:	42a1      	cmp	r1, r4
   8b7ce:	f803 2f01 	strb.w	r2, [r3, #1]!
   8b7d2:	d1f9      	bne.n	8b7c8 <memmove+0x34>
   8b7d4:	bcf0      	pop	{r4, r5, r6, r7}
   8b7d6:	4770      	bx	lr
   8b7d8:	ea40 0301 	orr.w	r3, r0, r1
   8b7dc:	079b      	lsls	r3, r3, #30
   8b7de:	d13e      	bne.n	8b85e <memmove+0xca>
   8b7e0:	f1a2 0310 	sub.w	r3, r2, #16
   8b7e4:	f023 040f 	bic.w	r4, r3, #15
   8b7e8:	f101 0720 	add.w	r7, r1, #32
   8b7ec:	4427      	add	r7, r4
   8b7ee:	091b      	lsrs	r3, r3, #4
   8b7f0:	f101 0410 	add.w	r4, r1, #16
   8b7f4:	f100 0510 	add.w	r5, r0, #16
   8b7f8:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8b7fc:	3410      	adds	r4, #16
   8b7fe:	f845 6c10 	str.w	r6, [r5, #-16]
   8b802:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8b806:	3510      	adds	r5, #16
   8b808:	f845 6c1c 	str.w	r6, [r5, #-28]
   8b80c:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8b810:	f845 6c18 	str.w	r6, [r5, #-24]
   8b814:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8b818:	42bc      	cmp	r4, r7
   8b81a:	f845 6c14 	str.w	r6, [r5, #-20]
   8b81e:	d1eb      	bne.n	8b7f8 <memmove+0x64>
   8b820:	3301      	adds	r3, #1
   8b822:	f012 0f0c 	tst.w	r2, #12
   8b826:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8b82a:	f002 040f 	and.w	r4, r2, #15
   8b82e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8b832:	d017      	beq.n	8b864 <memmove+0xd0>
   8b834:	460e      	mov	r6, r1
   8b836:	3c04      	subs	r4, #4
   8b838:	f024 0c03 	bic.w	ip, r4, #3
   8b83c:	08a5      	lsrs	r5, r4, #2
   8b83e:	449c      	add	ip, r3
   8b840:	1f1c      	subs	r4, r3, #4
   8b842:	f856 7b04 	ldr.w	r7, [r6], #4
   8b846:	f844 7f04 	str.w	r7, [r4, #4]!
   8b84a:	4564      	cmp	r4, ip
   8b84c:	d1f9      	bne.n	8b842 <memmove+0xae>
   8b84e:	1c6c      	adds	r4, r5, #1
   8b850:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8b854:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8b858:	f002 0203 	and.w	r2, r2, #3
   8b85c:	e7ae      	b.n	8b7bc <memmove+0x28>
   8b85e:	4603      	mov	r3, r0
   8b860:	1e54      	subs	r4, r2, #1
   8b862:	e7ae      	b.n	8b7c2 <memmove+0x2e>
   8b864:	4622      	mov	r2, r4
   8b866:	e7a9      	b.n	8b7bc <memmove+0x28>

0008b868 <__malloc_lock>:
   8b868:	4801      	ldr	r0, [pc, #4]	; (8b870 <__malloc_lock+0x8>)
   8b86a:	f7ff bc13 	b.w	8b094 <__retarget_lock_acquire_recursive>
   8b86e:	bf00      	nop
   8b870:	20001858 	.word	0x20001858

0008b874 <__malloc_unlock>:
   8b874:	4801      	ldr	r0, [pc, #4]	; (8b87c <__malloc_unlock+0x8>)
   8b876:	f7ff bc0f 	b.w	8b098 <__retarget_lock_release_recursive>
   8b87a:	bf00      	nop
   8b87c:	20001858 	.word	0x20001858

0008b880 <_Balloc>:
   8b880:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b882:	b570      	push	{r4, r5, r6, lr}
   8b884:	4605      	mov	r5, r0
   8b886:	460c      	mov	r4, r1
   8b888:	b14b      	cbz	r3, 8b89e <_Balloc+0x1e>
   8b88a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8b88e:	b180      	cbz	r0, 8b8b2 <_Balloc+0x32>
   8b890:	6802      	ldr	r2, [r0, #0]
   8b892:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8b896:	2300      	movs	r3, #0
   8b898:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8b89c:	bd70      	pop	{r4, r5, r6, pc}
   8b89e:	2221      	movs	r2, #33	; 0x21
   8b8a0:	2104      	movs	r1, #4
   8b8a2:	f000 ffc5 	bl	8c830 <_calloc_r>
   8b8a6:	4603      	mov	r3, r0
   8b8a8:	64e8      	str	r0, [r5, #76]	; 0x4c
   8b8aa:	2800      	cmp	r0, #0
   8b8ac:	d1ed      	bne.n	8b88a <_Balloc+0xa>
   8b8ae:	2000      	movs	r0, #0
   8b8b0:	bd70      	pop	{r4, r5, r6, pc}
   8b8b2:	2101      	movs	r1, #1
   8b8b4:	fa01 f604 	lsl.w	r6, r1, r4
   8b8b8:	1d72      	adds	r2, r6, #5
   8b8ba:	4628      	mov	r0, r5
   8b8bc:	0092      	lsls	r2, r2, #2
   8b8be:	f000 ffb7 	bl	8c830 <_calloc_r>
   8b8c2:	2800      	cmp	r0, #0
   8b8c4:	d0f3      	beq.n	8b8ae <_Balloc+0x2e>
   8b8c6:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8b8ca:	e7e4      	b.n	8b896 <_Balloc+0x16>

0008b8cc <_Bfree>:
   8b8cc:	b131      	cbz	r1, 8b8dc <_Bfree+0x10>
   8b8ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b8d0:	684a      	ldr	r2, [r1, #4]
   8b8d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8b8d6:	6008      	str	r0, [r1, #0]
   8b8d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8b8dc:	4770      	bx	lr
   8b8de:	bf00      	nop

0008b8e0 <__multadd>:
   8b8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b8e4:	4680      	mov	r8, r0
   8b8e6:	461c      	mov	r4, r3
   8b8e8:	2000      	movs	r0, #0
   8b8ea:	460f      	mov	r7, r1
   8b8ec:	690e      	ldr	r6, [r1, #16]
   8b8ee:	3114      	adds	r1, #20
   8b8f0:	680d      	ldr	r5, [r1, #0]
   8b8f2:	3001      	adds	r0, #1
   8b8f4:	b2ab      	uxth	r3, r5
   8b8f6:	fb02 4303 	mla	r3, r2, r3, r4
   8b8fa:	0c2c      	lsrs	r4, r5, #16
   8b8fc:	0c1d      	lsrs	r5, r3, #16
   8b8fe:	fb02 5404 	mla	r4, r2, r4, r5
   8b902:	b29b      	uxth	r3, r3
   8b904:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8b908:	4286      	cmp	r6, r0
   8b90a:	f841 3b04 	str.w	r3, [r1], #4
   8b90e:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8b912:	dced      	bgt.n	8b8f0 <__multadd+0x10>
   8b914:	b13c      	cbz	r4, 8b926 <__multadd+0x46>
   8b916:	68bb      	ldr	r3, [r7, #8]
   8b918:	42b3      	cmp	r3, r6
   8b91a:	dd07      	ble.n	8b92c <__multadd+0x4c>
   8b91c:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b920:	3601      	adds	r6, #1
   8b922:	615c      	str	r4, [r3, #20]
   8b924:	613e      	str	r6, [r7, #16]
   8b926:	4638      	mov	r0, r7
   8b928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b92c:	6879      	ldr	r1, [r7, #4]
   8b92e:	4640      	mov	r0, r8
   8b930:	3101      	adds	r1, #1
   8b932:	f7ff ffa5 	bl	8b880 <_Balloc>
   8b936:	4605      	mov	r5, r0
   8b938:	b1b0      	cbz	r0, 8b968 <__multadd+0x88>
   8b93a:	693a      	ldr	r2, [r7, #16]
   8b93c:	f107 010c 	add.w	r1, r7, #12
   8b940:	3202      	adds	r2, #2
   8b942:	0092      	lsls	r2, r2, #2
   8b944:	300c      	adds	r0, #12
   8b946:	f7fb f8cd 	bl	86ae4 <memcpy>
   8b94a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b94e:	687a      	ldr	r2, [r7, #4]
   8b950:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b954:	6039      	str	r1, [r7, #0]
   8b956:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8b95a:	462f      	mov	r7, r5
   8b95c:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b960:	3601      	adds	r6, #1
   8b962:	615c      	str	r4, [r3, #20]
   8b964:	613e      	str	r6, [r7, #16]
   8b966:	e7de      	b.n	8b926 <__multadd+0x46>
   8b968:	4602      	mov	r2, r0
   8b96a:	21b5      	movs	r1, #181	; 0xb5
   8b96c:	4b01      	ldr	r3, [pc, #4]	; (8b974 <__multadd+0x94>)
   8b96e:	4802      	ldr	r0, [pc, #8]	; (8b978 <__multadd+0x98>)
   8b970:	f000 ff40 	bl	8c7f4 <__assert_func>
   8b974:	0008d578 	.word	0x0008d578
   8b978:	0008d618 	.word	0x0008d618

0008b97c <__hi0bits>:
   8b97c:	0c02      	lsrs	r2, r0, #16
   8b97e:	0412      	lsls	r2, r2, #16
   8b980:	4603      	mov	r3, r0
   8b982:	b9ca      	cbnz	r2, 8b9b8 <__hi0bits+0x3c>
   8b984:	0403      	lsls	r3, r0, #16
   8b986:	2010      	movs	r0, #16
   8b988:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b98c:	bf04      	itt	eq
   8b98e:	021b      	lsleq	r3, r3, #8
   8b990:	3008      	addeq	r0, #8
   8b992:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b996:	bf04      	itt	eq
   8b998:	011b      	lsleq	r3, r3, #4
   8b99a:	3004      	addeq	r0, #4
   8b99c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b9a0:	bf04      	itt	eq
   8b9a2:	009b      	lsleq	r3, r3, #2
   8b9a4:	3002      	addeq	r0, #2
   8b9a6:	2b00      	cmp	r3, #0
   8b9a8:	db05      	blt.n	8b9b6 <__hi0bits+0x3a>
   8b9aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8b9ae:	f100 0001 	add.w	r0, r0, #1
   8b9b2:	bf08      	it	eq
   8b9b4:	2020      	moveq	r0, #32
   8b9b6:	4770      	bx	lr
   8b9b8:	2000      	movs	r0, #0
   8b9ba:	e7e5      	b.n	8b988 <__hi0bits+0xc>

0008b9bc <__lo0bits>:
   8b9bc:	6803      	ldr	r3, [r0, #0]
   8b9be:	4601      	mov	r1, r0
   8b9c0:	f013 0207 	ands.w	r2, r3, #7
   8b9c4:	d007      	beq.n	8b9d6 <__lo0bits+0x1a>
   8b9c6:	07da      	lsls	r2, r3, #31
   8b9c8:	d420      	bmi.n	8ba0c <__lo0bits+0x50>
   8b9ca:	0798      	lsls	r0, r3, #30
   8b9cc:	d522      	bpl.n	8ba14 <__lo0bits+0x58>
   8b9ce:	085b      	lsrs	r3, r3, #1
   8b9d0:	2001      	movs	r0, #1
   8b9d2:	600b      	str	r3, [r1, #0]
   8b9d4:	4770      	bx	lr
   8b9d6:	b298      	uxth	r0, r3
   8b9d8:	b1a8      	cbz	r0, 8ba06 <__lo0bits+0x4a>
   8b9da:	4610      	mov	r0, r2
   8b9dc:	f013 0fff 	tst.w	r3, #255	; 0xff
   8b9e0:	bf04      	itt	eq
   8b9e2:	0a1b      	lsreq	r3, r3, #8
   8b9e4:	3008      	addeq	r0, #8
   8b9e6:	071a      	lsls	r2, r3, #28
   8b9e8:	bf04      	itt	eq
   8b9ea:	091b      	lsreq	r3, r3, #4
   8b9ec:	3004      	addeq	r0, #4
   8b9ee:	079a      	lsls	r2, r3, #30
   8b9f0:	bf04      	itt	eq
   8b9f2:	089b      	lsreq	r3, r3, #2
   8b9f4:	3002      	addeq	r0, #2
   8b9f6:	07da      	lsls	r2, r3, #31
   8b9f8:	d403      	bmi.n	8ba02 <__lo0bits+0x46>
   8b9fa:	085b      	lsrs	r3, r3, #1
   8b9fc:	f100 0001 	add.w	r0, r0, #1
   8ba00:	d006      	beq.n	8ba10 <__lo0bits+0x54>
   8ba02:	600b      	str	r3, [r1, #0]
   8ba04:	4770      	bx	lr
   8ba06:	2010      	movs	r0, #16
   8ba08:	0c1b      	lsrs	r3, r3, #16
   8ba0a:	e7e7      	b.n	8b9dc <__lo0bits+0x20>
   8ba0c:	2000      	movs	r0, #0
   8ba0e:	4770      	bx	lr
   8ba10:	2020      	movs	r0, #32
   8ba12:	4770      	bx	lr
   8ba14:	089b      	lsrs	r3, r3, #2
   8ba16:	2002      	movs	r0, #2
   8ba18:	600b      	str	r3, [r1, #0]
   8ba1a:	4770      	bx	lr

0008ba1c <__i2b>:
   8ba1c:	b510      	push	{r4, lr}
   8ba1e:	460c      	mov	r4, r1
   8ba20:	2101      	movs	r1, #1
   8ba22:	f7ff ff2d 	bl	8b880 <_Balloc>
   8ba26:	4602      	mov	r2, r0
   8ba28:	b118      	cbz	r0, 8ba32 <__i2b+0x16>
   8ba2a:	2301      	movs	r3, #1
   8ba2c:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8ba30:	bd10      	pop	{r4, pc}
   8ba32:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8ba36:	4b02      	ldr	r3, [pc, #8]	; (8ba40 <__i2b+0x24>)
   8ba38:	4802      	ldr	r0, [pc, #8]	; (8ba44 <__i2b+0x28>)
   8ba3a:	f000 fedb 	bl	8c7f4 <__assert_func>
   8ba3e:	bf00      	nop
   8ba40:	0008d578 	.word	0x0008d578
   8ba44:	0008d618 	.word	0x0008d618

0008ba48 <__multiply>:
   8ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ba4c:	690d      	ldr	r5, [r1, #16]
   8ba4e:	6917      	ldr	r7, [r2, #16]
   8ba50:	460e      	mov	r6, r1
   8ba52:	42bd      	cmp	r5, r7
   8ba54:	4614      	mov	r4, r2
   8ba56:	b085      	sub	sp, #20
   8ba58:	db05      	blt.n	8ba66 <__multiply+0x1e>
   8ba5a:	463a      	mov	r2, r7
   8ba5c:	4623      	mov	r3, r4
   8ba5e:	462f      	mov	r7, r5
   8ba60:	460c      	mov	r4, r1
   8ba62:	4615      	mov	r5, r2
   8ba64:	461e      	mov	r6, r3
   8ba66:	68a3      	ldr	r3, [r4, #8]
   8ba68:	6861      	ldr	r1, [r4, #4]
   8ba6a:	eb07 0805 	add.w	r8, r7, r5
   8ba6e:	4543      	cmp	r3, r8
   8ba70:	bfb8      	it	lt
   8ba72:	3101      	addlt	r1, #1
   8ba74:	f7ff ff04 	bl	8b880 <_Balloc>
   8ba78:	9001      	str	r0, [sp, #4]
   8ba7a:	2800      	cmp	r0, #0
   8ba7c:	f000 8088 	beq.w	8bb90 <__multiply+0x148>
   8ba80:	9b01      	ldr	r3, [sp, #4]
   8ba82:	f103 0914 	add.w	r9, r3, #20
   8ba86:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8ba8a:	45d1      	cmp	r9, sl
   8ba8c:	d205      	bcs.n	8ba9a <__multiply+0x52>
   8ba8e:	464b      	mov	r3, r9
   8ba90:	2200      	movs	r2, #0
   8ba92:	f843 2b04 	str.w	r2, [r3], #4
   8ba96:	459a      	cmp	sl, r3
   8ba98:	d8fb      	bhi.n	8ba92 <__multiply+0x4a>
   8ba9a:	f106 0e14 	add.w	lr, r6, #20
   8ba9e:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8baa2:	f104 0314 	add.w	r3, r4, #20
   8baa6:	45de      	cmp	lr, fp
   8baa8:	461a      	mov	r2, r3
   8baaa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8baae:	d23e      	bcs.n	8bb2e <__multiply+0xe6>
   8bab0:	1b3b      	subs	r3, r7, r4
   8bab2:	3b15      	subs	r3, #21
   8bab4:	f023 0303 	bic.w	r3, r3, #3
   8bab8:	3304      	adds	r3, #4
   8baba:	3415      	adds	r4, #21
   8babc:	42a7      	cmp	r7, r4
   8babe:	bf38      	it	cc
   8bac0:	2304      	movcc	r3, #4
   8bac2:	e9cd a802 	strd	sl, r8, [sp, #8]
   8bac6:	4698      	mov	r8, r3
   8bac8:	4692      	mov	sl, r2
   8baca:	e003      	b.n	8bad4 <__multiply+0x8c>
   8bacc:	45f3      	cmp	fp, lr
   8bace:	f109 0904 	add.w	r9, r9, #4
   8bad2:	d92a      	bls.n	8bb2a <__multiply+0xe2>
   8bad4:	f85e 0b04 	ldr.w	r0, [lr], #4
   8bad8:	b286      	uxth	r6, r0
   8bada:	2e00      	cmp	r6, #0
   8badc:	d138      	bne.n	8bb50 <__multiply+0x108>
   8bade:	0c00      	lsrs	r0, r0, #16
   8bae0:	d0f4      	beq.n	8bacc <__multiply+0x84>
   8bae2:	f8d9 3000 	ldr.w	r3, [r9]
   8bae6:	4654      	mov	r4, sl
   8bae8:	461e      	mov	r6, r3
   8baea:	464d      	mov	r5, r9
   8baec:	f04f 0c00 	mov.w	ip, #0
   8baf0:	8822      	ldrh	r2, [r4, #0]
   8baf2:	0c36      	lsrs	r6, r6, #16
   8baf4:	fb00 6602 	mla	r6, r0, r2, r6
   8baf8:	b29b      	uxth	r3, r3
   8bafa:	44b4      	add	ip, r6
   8bafc:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8bb00:	f845 3b04 	str.w	r3, [r5], #4
   8bb04:	f854 3b04 	ldr.w	r3, [r4], #4
   8bb08:	682e      	ldr	r6, [r5, #0]
   8bb0a:	0c1b      	lsrs	r3, r3, #16
   8bb0c:	b2b2      	uxth	r2, r6
   8bb0e:	fb00 2303 	mla	r3, r0, r3, r2
   8bb12:	42a7      	cmp	r7, r4
   8bb14:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8bb18:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8bb1c:	d8e8      	bhi.n	8baf0 <__multiply+0xa8>
   8bb1e:	45f3      	cmp	fp, lr
   8bb20:	f849 3008 	str.w	r3, [r9, r8]
   8bb24:	f109 0904 	add.w	r9, r9, #4
   8bb28:	d8d4      	bhi.n	8bad4 <__multiply+0x8c>
   8bb2a:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8bb2e:	f1b8 0f00 	cmp.w	r8, #0
   8bb32:	dc03      	bgt.n	8bb3c <__multiply+0xf4>
   8bb34:	e006      	b.n	8bb44 <__multiply+0xfc>
   8bb36:	f1b8 0801 	subs.w	r8, r8, #1
   8bb3a:	d003      	beq.n	8bb44 <__multiply+0xfc>
   8bb3c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8bb40:	2b00      	cmp	r3, #0
   8bb42:	d0f8      	beq.n	8bb36 <__multiply+0xee>
   8bb44:	9801      	ldr	r0, [sp, #4]
   8bb46:	f8c0 8010 	str.w	r8, [r0, #16]
   8bb4a:	b005      	add	sp, #20
   8bb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bb50:	4655      	mov	r5, sl
   8bb52:	464c      	mov	r4, r9
   8bb54:	2300      	movs	r3, #0
   8bb56:	f855 1b04 	ldr.w	r1, [r5], #4
   8bb5a:	6820      	ldr	r0, [r4, #0]
   8bb5c:	b28a      	uxth	r2, r1
   8bb5e:	fa1f fc80 	uxth.w	ip, r0
   8bb62:	fb06 c202 	mla	r2, r6, r2, ip
   8bb66:	0c09      	lsrs	r1, r1, #16
   8bb68:	0c00      	lsrs	r0, r0, #16
   8bb6a:	fb06 0101 	mla	r1, r6, r1, r0
   8bb6e:	4413      	add	r3, r2
   8bb70:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8bb74:	b29b      	uxth	r3, r3
   8bb76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8bb7a:	42af      	cmp	r7, r5
   8bb7c:	f844 3b04 	str.w	r3, [r4], #4
   8bb80:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8bb84:	d8e7      	bhi.n	8bb56 <__multiply+0x10e>
   8bb86:	f849 3008 	str.w	r3, [r9, r8]
   8bb8a:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8bb8e:	e7a6      	b.n	8bade <__multiply+0x96>
   8bb90:	4602      	mov	r2, r0
   8bb92:	f240 115d 	movw	r1, #349	; 0x15d
   8bb96:	4b02      	ldr	r3, [pc, #8]	; (8bba0 <__multiply+0x158>)
   8bb98:	4802      	ldr	r0, [pc, #8]	; (8bba4 <__multiply+0x15c>)
   8bb9a:	f000 fe2b 	bl	8c7f4 <__assert_func>
   8bb9e:	bf00      	nop
   8bba0:	0008d578 	.word	0x0008d578
   8bba4:	0008d618 	.word	0x0008d618

0008bba8 <__pow5mult>:
   8bba8:	f012 0303 	ands.w	r3, r2, #3
   8bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bbb0:	4614      	mov	r4, r2
   8bbb2:	4607      	mov	r7, r0
   8bbb4:	d12e      	bne.n	8bc14 <__pow5mult+0x6c>
   8bbb6:	460e      	mov	r6, r1
   8bbb8:	10a4      	asrs	r4, r4, #2
   8bbba:	d01c      	beq.n	8bbf6 <__pow5mult+0x4e>
   8bbbc:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8bbbe:	b395      	cbz	r5, 8bc26 <__pow5mult+0x7e>
   8bbc0:	07e3      	lsls	r3, r4, #31
   8bbc2:	f04f 0800 	mov.w	r8, #0
   8bbc6:	d406      	bmi.n	8bbd6 <__pow5mult+0x2e>
   8bbc8:	1064      	asrs	r4, r4, #1
   8bbca:	d014      	beq.n	8bbf6 <__pow5mult+0x4e>
   8bbcc:	6828      	ldr	r0, [r5, #0]
   8bbce:	b1a8      	cbz	r0, 8bbfc <__pow5mult+0x54>
   8bbd0:	4605      	mov	r5, r0
   8bbd2:	07e3      	lsls	r3, r4, #31
   8bbd4:	d5f8      	bpl.n	8bbc8 <__pow5mult+0x20>
   8bbd6:	462a      	mov	r2, r5
   8bbd8:	4631      	mov	r1, r6
   8bbda:	4638      	mov	r0, r7
   8bbdc:	f7ff ff34 	bl	8ba48 <__multiply>
   8bbe0:	b1b6      	cbz	r6, 8bc10 <__pow5mult+0x68>
   8bbe2:	6871      	ldr	r1, [r6, #4]
   8bbe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8bbe6:	1064      	asrs	r4, r4, #1
   8bbe8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8bbec:	6032      	str	r2, [r6, #0]
   8bbee:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8bbf2:	4606      	mov	r6, r0
   8bbf4:	d1ea      	bne.n	8bbcc <__pow5mult+0x24>
   8bbf6:	4630      	mov	r0, r6
   8bbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8bbfc:	462a      	mov	r2, r5
   8bbfe:	4629      	mov	r1, r5
   8bc00:	4638      	mov	r0, r7
   8bc02:	f7ff ff21 	bl	8ba48 <__multiply>
   8bc06:	6028      	str	r0, [r5, #0]
   8bc08:	4605      	mov	r5, r0
   8bc0a:	f8c0 8000 	str.w	r8, [r0]
   8bc0e:	e7e0      	b.n	8bbd2 <__pow5mult+0x2a>
   8bc10:	4606      	mov	r6, r0
   8bc12:	e7d9      	b.n	8bbc8 <__pow5mult+0x20>
   8bc14:	4a09      	ldr	r2, [pc, #36]	; (8bc3c <__pow5mult+0x94>)
   8bc16:	3b01      	subs	r3, #1
   8bc18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8bc1c:	2300      	movs	r3, #0
   8bc1e:	f7ff fe5f 	bl	8b8e0 <__multadd>
   8bc22:	4606      	mov	r6, r0
   8bc24:	e7c8      	b.n	8bbb8 <__pow5mult+0x10>
   8bc26:	f240 2171 	movw	r1, #625	; 0x271
   8bc2a:	4638      	mov	r0, r7
   8bc2c:	f7ff fef6 	bl	8ba1c <__i2b>
   8bc30:	2300      	movs	r3, #0
   8bc32:	64b8      	str	r0, [r7, #72]	; 0x48
   8bc34:	4605      	mov	r5, r0
   8bc36:	6003      	str	r3, [r0, #0]
   8bc38:	e7c2      	b.n	8bbc0 <__pow5mult+0x18>
   8bc3a:	bf00      	nop
   8bc3c:	0008d788 	.word	0x0008d788

0008bc40 <__lshift>:
   8bc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8bc44:	690f      	ldr	r7, [r1, #16]
   8bc46:	688b      	ldr	r3, [r1, #8]
   8bc48:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8bc4c:	1c7e      	adds	r6, r7, #1
   8bc4e:	429e      	cmp	r6, r3
   8bc50:	460d      	mov	r5, r1
   8bc52:	4691      	mov	r9, r2
   8bc54:	4680      	mov	r8, r0
   8bc56:	6849      	ldr	r1, [r1, #4]
   8bc58:	ea4f 1462 	mov.w	r4, r2, asr #5
   8bc5c:	dd04      	ble.n	8bc68 <__lshift+0x28>
   8bc5e:	005b      	lsls	r3, r3, #1
   8bc60:	429e      	cmp	r6, r3
   8bc62:	f101 0101 	add.w	r1, r1, #1
   8bc66:	dcfa      	bgt.n	8bc5e <__lshift+0x1e>
   8bc68:	4640      	mov	r0, r8
   8bc6a:	f7ff fe09 	bl	8b880 <_Balloc>
   8bc6e:	2800      	cmp	r0, #0
   8bc70:	d04f      	beq.n	8bd12 <__lshift+0xd2>
   8bc72:	2c00      	cmp	r4, #0
   8bc74:	f100 0114 	add.w	r1, r0, #20
   8bc78:	dd0d      	ble.n	8bc96 <__lshift+0x56>
   8bc7a:	460b      	mov	r3, r1
   8bc7c:	2200      	movs	r2, #0
   8bc7e:	3405      	adds	r4, #5
   8bc80:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8bc84:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8bc88:	f843 2b04 	str.w	r2, [r3], #4
   8bc8c:	42a3      	cmp	r3, r4
   8bc8e:	d1fb      	bne.n	8bc88 <__lshift+0x48>
   8bc90:	f1ac 0314 	sub.w	r3, ip, #20
   8bc94:	4419      	add	r1, r3
   8bc96:	692c      	ldr	r4, [r5, #16]
   8bc98:	f105 0314 	add.w	r3, r5, #20
   8bc9c:	f019 091f 	ands.w	r9, r9, #31
   8bca0:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8bca4:	d02d      	beq.n	8bd02 <__lshift+0xc2>
   8bca6:	468e      	mov	lr, r1
   8bca8:	f04f 0a00 	mov.w	sl, #0
   8bcac:	f1c9 0220 	rsb	r2, r9, #32
   8bcb0:	681c      	ldr	r4, [r3, #0]
   8bcb2:	fa04 f409 	lsl.w	r4, r4, r9
   8bcb6:	ea44 040a 	orr.w	r4, r4, sl
   8bcba:	f84e 4b04 	str.w	r4, [lr], #4
   8bcbe:	f853 4b04 	ldr.w	r4, [r3], #4
   8bcc2:	459c      	cmp	ip, r3
   8bcc4:	fa24 fa02 	lsr.w	sl, r4, r2
   8bcc8:	d8f2      	bhi.n	8bcb0 <__lshift+0x70>
   8bcca:	ebac 0305 	sub.w	r3, ip, r5
   8bcce:	3b15      	subs	r3, #21
   8bcd0:	f023 0303 	bic.w	r3, r3, #3
   8bcd4:	3304      	adds	r3, #4
   8bcd6:	f105 0215 	add.w	r2, r5, #21
   8bcda:	4594      	cmp	ip, r2
   8bcdc:	bf38      	it	cc
   8bcde:	2304      	movcc	r3, #4
   8bce0:	f1ba 0f00 	cmp.w	sl, #0
   8bce4:	bf18      	it	ne
   8bce6:	4637      	movne	r7, r6
   8bce8:	f841 a003 	str.w	sl, [r1, r3]
   8bcec:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8bcf0:	686a      	ldr	r2, [r5, #4]
   8bcf2:	6107      	str	r7, [r0, #16]
   8bcf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8bcf8:	6029      	str	r1, [r5, #0]
   8bcfa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8bcfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bd02:	3904      	subs	r1, #4
   8bd04:	f853 2b04 	ldr.w	r2, [r3], #4
   8bd08:	459c      	cmp	ip, r3
   8bd0a:	f841 2f04 	str.w	r2, [r1, #4]!
   8bd0e:	d8f9      	bhi.n	8bd04 <__lshift+0xc4>
   8bd10:	e7ec      	b.n	8bcec <__lshift+0xac>
   8bd12:	4602      	mov	r2, r0
   8bd14:	f240 11d9 	movw	r1, #473	; 0x1d9
   8bd18:	4b01      	ldr	r3, [pc, #4]	; (8bd20 <__lshift+0xe0>)
   8bd1a:	4802      	ldr	r0, [pc, #8]	; (8bd24 <__lshift+0xe4>)
   8bd1c:	f000 fd6a 	bl	8c7f4 <__assert_func>
   8bd20:	0008d578 	.word	0x0008d578
   8bd24:	0008d618 	.word	0x0008d618

0008bd28 <__mcmp>:
   8bd28:	b430      	push	{r4, r5}
   8bd2a:	690b      	ldr	r3, [r1, #16]
   8bd2c:	4605      	mov	r5, r0
   8bd2e:	6900      	ldr	r0, [r0, #16]
   8bd30:	1ac0      	subs	r0, r0, r3
   8bd32:	d111      	bne.n	8bd58 <__mcmp+0x30>
   8bd34:	3514      	adds	r5, #20
   8bd36:	3114      	adds	r1, #20
   8bd38:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8bd3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8bd40:	e001      	b.n	8bd46 <__mcmp+0x1e>
   8bd42:	429d      	cmp	r5, r3
   8bd44:	d208      	bcs.n	8bd58 <__mcmp+0x30>
   8bd46:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8bd4a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8bd4e:	428c      	cmp	r4, r1
   8bd50:	d0f7      	beq.n	8bd42 <__mcmp+0x1a>
   8bd52:	d203      	bcs.n	8bd5c <__mcmp+0x34>
   8bd54:	f04f 30ff 	mov.w	r0, #4294967295
   8bd58:	bc30      	pop	{r4, r5}
   8bd5a:	4770      	bx	lr
   8bd5c:	2001      	movs	r0, #1
   8bd5e:	bc30      	pop	{r4, r5}
   8bd60:	4770      	bx	lr
   8bd62:	bf00      	nop

0008bd64 <__mdiff>:
   8bd64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bd68:	690b      	ldr	r3, [r1, #16]
   8bd6a:	460c      	mov	r4, r1
   8bd6c:	6911      	ldr	r1, [r2, #16]
   8bd6e:	4690      	mov	r8, r2
   8bd70:	eba3 0b01 	sub.w	fp, r3, r1
   8bd74:	f1bb 0f00 	cmp.w	fp, #0
   8bd78:	d17c      	bne.n	8be74 <__mdiff+0x110>
   8bd7a:	f104 0614 	add.w	r6, r4, #20
   8bd7e:	3214      	adds	r2, #20
   8bd80:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8bd84:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8bd88:	e001      	b.n	8bd8e <__mdiff+0x2a>
   8bd8a:	429e      	cmp	r6, r3
   8bd8c:	d276      	bcs.n	8be7c <__mdiff+0x118>
   8bd8e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8bd92:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8bd96:	428d      	cmp	r5, r1
   8bd98:	d0f7      	beq.n	8bd8a <__mdiff+0x26>
   8bd9a:	d365      	bcc.n	8be68 <__mdiff+0x104>
   8bd9c:	6861      	ldr	r1, [r4, #4]
   8bd9e:	f7ff fd6f 	bl	8b880 <_Balloc>
   8bda2:	2800      	cmp	r0, #0
   8bda4:	d074      	beq.n	8be90 <__mdiff+0x12c>
   8bda6:	f100 0614 	add.w	r6, r0, #20
   8bdaa:	46b4      	mov	ip, r6
   8bdac:	2300      	movs	r3, #0
   8bdae:	6927      	ldr	r7, [r4, #16]
   8bdb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8bdb4:	f104 0a14 	add.w	sl, r4, #20
   8bdb8:	f108 0514 	add.w	r5, r8, #20
   8bdbc:	f8c0 b00c 	str.w	fp, [r0, #12]
   8bdc0:	3410      	adds	r4, #16
   8bdc2:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8bdc6:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8bdca:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8bdce:	f855 bb04 	ldr.w	fp, [r5], #4
   8bdd2:	b291      	uxth	r1, r2
   8bdd4:	440b      	add	r3, r1
   8bdd6:	fa1f f18b 	uxth.w	r1, fp
   8bdda:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8bdde:	1a59      	subs	r1, r3, r1
   8bde0:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8bde4:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8bde8:	b289      	uxth	r1, r1
   8bdea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8bdee:	45a9      	cmp	r9, r5
   8bdf0:	f84c 1b04 	str.w	r1, [ip], #4
   8bdf4:	ea4f 4323 	mov.w	r3, r3, asr #16
   8bdf8:	d8e7      	bhi.n	8bdca <__mdiff+0x66>
   8bdfa:	eba9 0208 	sub.w	r2, r9, r8
   8bdfe:	3a15      	subs	r2, #21
   8be00:	f108 0815 	add.w	r8, r8, #21
   8be04:	45c1      	cmp	r9, r8
   8be06:	f022 0403 	bic.w	r4, r2, #3
   8be0a:	f104 0404 	add.w	r4, r4, #4
   8be0e:	bf38      	it	cc
   8be10:	2404      	movcc	r4, #4
   8be12:	f022 0203 	bic.w	r2, r2, #3
   8be16:	bf38      	it	cc
   8be18:	2200      	movcc	r2, #0
   8be1a:	44a2      	add	sl, r4
   8be1c:	45d6      	cmp	lr, sl
   8be1e:	4434      	add	r4, r6
   8be20:	4416      	add	r6, r2
   8be22:	d918      	bls.n	8be56 <__mdiff+0xf2>
   8be24:	4625      	mov	r5, r4
   8be26:	4652      	mov	r2, sl
   8be28:	f852 6b04 	ldr.w	r6, [r2], #4
   8be2c:	b2b1      	uxth	r1, r6
   8be2e:	4419      	add	r1, r3
   8be30:	140b      	asrs	r3, r1, #16
   8be32:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8be36:	b289      	uxth	r1, r1
   8be38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8be3c:	4596      	cmp	lr, r2
   8be3e:	f845 1b04 	str.w	r1, [r5], #4
   8be42:	ea4f 4323 	mov.w	r3, r3, asr #16
   8be46:	d8ef      	bhi.n	8be28 <__mdiff+0xc4>
   8be48:	f10e 36ff 	add.w	r6, lr, #4294967295
   8be4c:	eba6 060a 	sub.w	r6, r6, sl
   8be50:	f026 0603 	bic.w	r6, r6, #3
   8be54:	4426      	add	r6, r4
   8be56:	b921      	cbnz	r1, 8be62 <__mdiff+0xfe>
   8be58:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8be5c:	3f01      	subs	r7, #1
   8be5e:	2b00      	cmp	r3, #0
   8be60:	d0fa      	beq.n	8be58 <__mdiff+0xf4>
   8be62:	6107      	str	r7, [r0, #16]
   8be64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be68:	4623      	mov	r3, r4
   8be6a:	f04f 0b01 	mov.w	fp, #1
   8be6e:	4644      	mov	r4, r8
   8be70:	4698      	mov	r8, r3
   8be72:	e793      	b.n	8bd9c <__mdiff+0x38>
   8be74:	dbf8      	blt.n	8be68 <__mdiff+0x104>
   8be76:	f04f 0b00 	mov.w	fp, #0
   8be7a:	e78f      	b.n	8bd9c <__mdiff+0x38>
   8be7c:	2100      	movs	r1, #0
   8be7e:	f7ff fcff 	bl	8b880 <_Balloc>
   8be82:	b160      	cbz	r0, 8be9e <__mdiff+0x13a>
   8be84:	2201      	movs	r2, #1
   8be86:	2300      	movs	r3, #0
   8be88:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8be8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be90:	4602      	mov	r2, r0
   8be92:	f44f 7110 	mov.w	r1, #576	; 0x240
   8be96:	4b05      	ldr	r3, [pc, #20]	; (8beac <__mdiff+0x148>)
   8be98:	4805      	ldr	r0, [pc, #20]	; (8beb0 <__mdiff+0x14c>)
   8be9a:	f000 fcab 	bl	8c7f4 <__assert_func>
   8be9e:	4602      	mov	r2, r0
   8bea0:	f240 2132 	movw	r1, #562	; 0x232
   8bea4:	4b01      	ldr	r3, [pc, #4]	; (8beac <__mdiff+0x148>)
   8bea6:	4802      	ldr	r0, [pc, #8]	; (8beb0 <__mdiff+0x14c>)
   8bea8:	f000 fca4 	bl	8c7f4 <__assert_func>
   8beac:	0008d578 	.word	0x0008d578
   8beb0:	0008d618 	.word	0x0008d618

0008beb4 <__d2b>:
   8beb4:	b570      	push	{r4, r5, r6, lr}
   8beb6:	2101      	movs	r1, #1
   8beb8:	b082      	sub	sp, #8
   8beba:	4616      	mov	r6, r2
   8bebc:	461d      	mov	r5, r3
   8bebe:	f7ff fcdf 	bl	8b880 <_Balloc>
   8bec2:	4604      	mov	r4, r0
   8bec4:	2800      	cmp	r0, #0
   8bec6:	d04c      	beq.n	8bf62 <__d2b+0xae>
   8bec8:	462b      	mov	r3, r5
   8beca:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8bece:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8bed2:	b10d      	cbz	r5, 8bed8 <__d2b+0x24>
   8bed4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8bed8:	2e00      	cmp	r6, #0
   8beda:	9301      	str	r3, [sp, #4]
   8bedc:	d022      	beq.n	8bf24 <__d2b+0x70>
   8bede:	4668      	mov	r0, sp
   8bee0:	9600      	str	r6, [sp, #0]
   8bee2:	f7ff fd6b 	bl	8b9bc <__lo0bits>
   8bee6:	2800      	cmp	r0, #0
   8bee8:	d037      	beq.n	8bf5a <__d2b+0xa6>
   8beea:	9b01      	ldr	r3, [sp, #4]
   8beec:	9900      	ldr	r1, [sp, #0]
   8beee:	f1c0 0220 	rsb	r2, r0, #32
   8bef2:	fa03 f202 	lsl.w	r2, r3, r2
   8bef6:	430a      	orrs	r2, r1
   8bef8:	40c3      	lsrs	r3, r0
   8befa:	9301      	str	r3, [sp, #4]
   8befc:	6162      	str	r2, [r4, #20]
   8befe:	2b00      	cmp	r3, #0
   8bf00:	bf14      	ite	ne
   8bf02:	2102      	movne	r1, #2
   8bf04:	2101      	moveq	r1, #1
   8bf06:	61a3      	str	r3, [r4, #24]
   8bf08:	6121      	str	r1, [r4, #16]
   8bf0a:	b1b5      	cbz	r5, 8bf3a <__d2b+0x86>
   8bf0c:	9a06      	ldr	r2, [sp, #24]
   8bf0e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8bf12:	4403      	add	r3, r0
   8bf14:	6013      	str	r3, [r2, #0]
   8bf16:	9b07      	ldr	r3, [sp, #28]
   8bf18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8bf1c:	6018      	str	r0, [r3, #0]
   8bf1e:	4620      	mov	r0, r4
   8bf20:	b002      	add	sp, #8
   8bf22:	bd70      	pop	{r4, r5, r6, pc}
   8bf24:	a801      	add	r0, sp, #4
   8bf26:	f7ff fd49 	bl	8b9bc <__lo0bits>
   8bf2a:	2301      	movs	r3, #1
   8bf2c:	9a01      	ldr	r2, [sp, #4]
   8bf2e:	4619      	mov	r1, r3
   8bf30:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8bf34:	3020      	adds	r0, #32
   8bf36:	2d00      	cmp	r5, #0
   8bf38:	d1e8      	bne.n	8bf0c <__d2b+0x58>
   8bf3a:	9a06      	ldr	r2, [sp, #24]
   8bf3c:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8bf40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8bf44:	6010      	str	r0, [r2, #0]
   8bf46:	6918      	ldr	r0, [r3, #16]
   8bf48:	f7ff fd18 	bl	8b97c <__hi0bits>
   8bf4c:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8bf50:	4620      	mov	r0, r4
   8bf52:	9b07      	ldr	r3, [sp, #28]
   8bf54:	6019      	str	r1, [r3, #0]
   8bf56:	b002      	add	sp, #8
   8bf58:	bd70      	pop	{r4, r5, r6, pc}
   8bf5a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8bf5e:	6162      	str	r2, [r4, #20]
   8bf60:	e7cd      	b.n	8befe <__d2b+0x4a>
   8bf62:	4602      	mov	r2, r0
   8bf64:	f240 310a 	movw	r1, #778	; 0x30a
   8bf68:	4b01      	ldr	r3, [pc, #4]	; (8bf70 <__d2b+0xbc>)
   8bf6a:	4802      	ldr	r0, [pc, #8]	; (8bf74 <__d2b+0xc0>)
   8bf6c:	f000 fc42 	bl	8c7f4 <__assert_func>
   8bf70:	0008d578 	.word	0x0008d578
   8bf74:	0008d618 	.word	0x0008d618

0008bf78 <_realloc_r>:
   8bf78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bf7c:	4616      	mov	r6, r2
   8bf7e:	2900      	cmp	r1, #0
   8bf80:	f000 80bd 	beq.w	8c0fe <_realloc_r+0x186>
   8bf84:	f106 050b 	add.w	r5, r6, #11
   8bf88:	460c      	mov	r4, r1
   8bf8a:	4680      	mov	r8, r0
   8bf8c:	f7ff fc6c 	bl	8b868 <__malloc_lock>
   8bf90:	2d16      	cmp	r5, #22
   8bf92:	d85f      	bhi.n	8c054 <_realloc_r+0xdc>
   8bf94:	2510      	movs	r5, #16
   8bf96:	462a      	mov	r2, r5
   8bf98:	42ae      	cmp	r6, r5
   8bf9a:	d860      	bhi.n	8c05e <_realloc_r+0xe6>
   8bf9c:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8bfa0:	f1a4 0908 	sub.w	r9, r4, #8
   8bfa4:	f021 0703 	bic.w	r7, r1, #3
   8bfa8:	4297      	cmp	r7, r2
   8bfaa:	f280 8086 	bge.w	8c0ba <_realloc_r+0x142>
   8bfae:	4bc9      	ldr	r3, [pc, #804]	; (8c2d4 <_realloc_r+0x35c>)
   8bfb0:	eb09 0007 	add.w	r0, r9, r7
   8bfb4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8bfb8:	4584      	cmp	ip, r0
   8bfba:	f000 80b9 	beq.w	8c130 <_realloc_r+0x1b8>
   8bfbe:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8bfc2:	f02c 0301 	bic.w	r3, ip, #1
   8bfc6:	4403      	add	r3, r0
   8bfc8:	685b      	ldr	r3, [r3, #4]
   8bfca:	07db      	lsls	r3, r3, #31
   8bfcc:	f100 808c 	bmi.w	8c0e8 <_realloc_r+0x170>
   8bfd0:	f02c 0c03 	bic.w	ip, ip, #3
   8bfd4:	eb07 030c 	add.w	r3, r7, ip
   8bfd8:	4293      	cmp	r3, r2
   8bfda:	f280 8115 	bge.w	8c208 <_realloc_r+0x290>
   8bfde:	07cb      	lsls	r3, r1, #31
   8bfe0:	d40f      	bmi.n	8c002 <_realloc_r+0x8a>
   8bfe2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8bfe6:	eba9 0a03 	sub.w	sl, r9, r3
   8bfea:	f8da 3004 	ldr.w	r3, [sl, #4]
   8bfee:	f023 0103 	bic.w	r1, r3, #3
   8bff2:	448c      	add	ip, r1
   8bff4:	44bc      	add	ip, r7
   8bff6:	4594      	cmp	ip, r2
   8bff8:	da38      	bge.n	8c06c <_realloc_r+0xf4>
   8bffa:	187b      	adds	r3, r7, r1
   8bffc:	4293      	cmp	r3, r2
   8bffe:	f280 810f 	bge.w	8c220 <_realloc_r+0x2a8>
   8c002:	4631      	mov	r1, r6
   8c004:	4640      	mov	r0, r8
   8c006:	f7ff f8c1 	bl	8b18c <_malloc_r>
   8c00a:	4606      	mov	r6, r0
   8c00c:	b1e0      	cbz	r0, 8c048 <_realloc_r+0xd0>
   8c00e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c012:	f1a0 0208 	sub.w	r2, r0, #8
   8c016:	f023 0301 	bic.w	r3, r3, #1
   8c01a:	444b      	add	r3, r9
   8c01c:	4293      	cmp	r3, r2
   8c01e:	f000 80f9 	beq.w	8c214 <_realloc_r+0x29c>
   8c022:	1f3a      	subs	r2, r7, #4
   8c024:	2a24      	cmp	r2, #36	; 0x24
   8c026:	f200 811c 	bhi.w	8c262 <_realloc_r+0x2ea>
   8c02a:	2a13      	cmp	r2, #19
   8c02c:	f200 80cd 	bhi.w	8c1ca <_realloc_r+0x252>
   8c030:	4603      	mov	r3, r0
   8c032:	4622      	mov	r2, r4
   8c034:	6811      	ldr	r1, [r2, #0]
   8c036:	6019      	str	r1, [r3, #0]
   8c038:	6851      	ldr	r1, [r2, #4]
   8c03a:	6059      	str	r1, [r3, #4]
   8c03c:	6892      	ldr	r2, [r2, #8]
   8c03e:	609a      	str	r2, [r3, #8]
   8c040:	4621      	mov	r1, r4
   8c042:	4640      	mov	r0, r8
   8c044:	f7fe fd78 	bl	8ab38 <_free_r>
   8c048:	4640      	mov	r0, r8
   8c04a:	f7ff fc13 	bl	8b874 <__malloc_unlock>
   8c04e:	4630      	mov	r0, r6
   8c050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c054:	f025 0507 	bic.w	r5, r5, #7
   8c058:	2d00      	cmp	r5, #0
   8c05a:	462a      	mov	r2, r5
   8c05c:	da9c      	bge.n	8bf98 <_realloc_r+0x20>
   8c05e:	230c      	movs	r3, #12
   8c060:	2600      	movs	r6, #0
   8c062:	f8c8 3000 	str.w	r3, [r8]
   8c066:	4630      	mov	r0, r6
   8c068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c06c:	4656      	mov	r6, sl
   8c06e:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8c072:	60cb      	str	r3, [r1, #12]
   8c074:	6099      	str	r1, [r3, #8]
   8c076:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8c07a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8c07e:	1f3a      	subs	r2, r7, #4
   8c080:	2a24      	cmp	r2, #36	; 0x24
   8c082:	60cb      	str	r3, [r1, #12]
   8c084:	6099      	str	r1, [r3, #8]
   8c086:	f200 8107 	bhi.w	8c298 <_realloc_r+0x320>
   8c08a:	2a13      	cmp	r2, #19
   8c08c:	f240 8102 	bls.w	8c294 <_realloc_r+0x31c>
   8c090:	6823      	ldr	r3, [r4, #0]
   8c092:	2a1b      	cmp	r2, #27
   8c094:	f8ca 3008 	str.w	r3, [sl, #8]
   8c098:	6863      	ldr	r3, [r4, #4]
   8c09a:	f8ca 300c 	str.w	r3, [sl, #12]
   8c09e:	f200 811b 	bhi.w	8c2d8 <_realloc_r+0x360>
   8c0a2:	3408      	adds	r4, #8
   8c0a4:	f10a 0310 	add.w	r3, sl, #16
   8c0a8:	6822      	ldr	r2, [r4, #0]
   8c0aa:	4667      	mov	r7, ip
   8c0ac:	601a      	str	r2, [r3, #0]
   8c0ae:	6862      	ldr	r2, [r4, #4]
   8c0b0:	46d1      	mov	r9, sl
   8c0b2:	605a      	str	r2, [r3, #4]
   8c0b4:	68a2      	ldr	r2, [r4, #8]
   8c0b6:	4634      	mov	r4, r6
   8c0b8:	609a      	str	r2, [r3, #8]
   8c0ba:	1b7b      	subs	r3, r7, r5
   8c0bc:	2b0f      	cmp	r3, #15
   8c0be:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8c0c2:	d821      	bhi.n	8c108 <_realloc_r+0x190>
   8c0c4:	f002 0201 	and.w	r2, r2, #1
   8c0c8:	433a      	orrs	r2, r7
   8c0ca:	eb09 0107 	add.w	r1, r9, r7
   8c0ce:	f8c9 2004 	str.w	r2, [r9, #4]
   8c0d2:	684b      	ldr	r3, [r1, #4]
   8c0d4:	f043 0301 	orr.w	r3, r3, #1
   8c0d8:	604b      	str	r3, [r1, #4]
   8c0da:	4626      	mov	r6, r4
   8c0dc:	4640      	mov	r0, r8
   8c0de:	f7ff fbc9 	bl	8b874 <__malloc_unlock>
   8c0e2:	4630      	mov	r0, r6
   8c0e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c0e8:	07c9      	lsls	r1, r1, #31
   8c0ea:	d48a      	bmi.n	8c002 <_realloc_r+0x8a>
   8c0ec:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8c0f0:	eba9 0a03 	sub.w	sl, r9, r3
   8c0f4:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c0f8:	f021 0103 	bic.w	r1, r1, #3
   8c0fc:	e77d      	b.n	8bffa <_realloc_r+0x82>
   8c0fe:	4611      	mov	r1, r2
   8c100:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c104:	f7ff b842 	b.w	8b18c <_malloc_r>
   8c108:	f002 0201 	and.w	r2, r2, #1
   8c10c:	eb09 0105 	add.w	r1, r9, r5
   8c110:	f043 0301 	orr.w	r3, r3, #1
   8c114:	432a      	orrs	r2, r5
   8c116:	f8c9 2004 	str.w	r2, [r9, #4]
   8c11a:	444f      	add	r7, r9
   8c11c:	604b      	str	r3, [r1, #4]
   8c11e:	687b      	ldr	r3, [r7, #4]
   8c120:	4640      	mov	r0, r8
   8c122:	f043 0301 	orr.w	r3, r3, #1
   8c126:	3108      	adds	r1, #8
   8c128:	607b      	str	r3, [r7, #4]
   8c12a:	f7fe fd05 	bl	8ab38 <_free_r>
   8c12e:	e7d4      	b.n	8c0da <_realloc_r+0x162>
   8c130:	f8dc b004 	ldr.w	fp, [ip, #4]
   8c134:	f105 0010 	add.w	r0, r5, #16
   8c138:	f02b 0b03 	bic.w	fp, fp, #3
   8c13c:	eb07 0c0b 	add.w	ip, r7, fp
   8c140:	4584      	cmp	ip, r0
   8c142:	da4d      	bge.n	8c1e0 <_realloc_r+0x268>
   8c144:	07c9      	lsls	r1, r1, #31
   8c146:	f53f af5c 	bmi.w	8c002 <_realloc_r+0x8a>
   8c14a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8c14e:	eba9 0a01 	sub.w	sl, r9, r1
   8c152:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c156:	f021 0103 	bic.w	r1, r1, #3
   8c15a:	448b      	add	fp, r1
   8c15c:	44bb      	add	fp, r7
   8c15e:	4558      	cmp	r0, fp
   8c160:	f73f af4b 	bgt.w	8bffa <_realloc_r+0x82>
   8c164:	4656      	mov	r6, sl
   8c166:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c16a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8c16e:	1f3a      	subs	r2, r7, #4
   8c170:	2a24      	cmp	r2, #36	; 0x24
   8c172:	60c1      	str	r1, [r0, #12]
   8c174:	6088      	str	r0, [r1, #8]
   8c176:	f200 80bd 	bhi.w	8c2f4 <_realloc_r+0x37c>
   8c17a:	2a13      	cmp	r2, #19
   8c17c:	f240 80b8 	bls.w	8c2f0 <_realloc_r+0x378>
   8c180:	6821      	ldr	r1, [r4, #0]
   8c182:	2a1b      	cmp	r2, #27
   8c184:	f8ca 1008 	str.w	r1, [sl, #8]
   8c188:	6861      	ldr	r1, [r4, #4]
   8c18a:	f8ca 100c 	str.w	r1, [sl, #12]
   8c18e:	f200 80c1 	bhi.w	8c314 <_realloc_r+0x39c>
   8c192:	3408      	adds	r4, #8
   8c194:	f10a 0210 	add.w	r2, sl, #16
   8c198:	6821      	ldr	r1, [r4, #0]
   8c19a:	6011      	str	r1, [r2, #0]
   8c19c:	6861      	ldr	r1, [r4, #4]
   8c19e:	6051      	str	r1, [r2, #4]
   8c1a0:	68a1      	ldr	r1, [r4, #8]
   8c1a2:	6091      	str	r1, [r2, #8]
   8c1a4:	ebab 0205 	sub.w	r2, fp, r5
   8c1a8:	eb0a 0105 	add.w	r1, sl, r5
   8c1ac:	f042 0201 	orr.w	r2, r2, #1
   8c1b0:	6099      	str	r1, [r3, #8]
   8c1b2:	604a      	str	r2, [r1, #4]
   8c1b4:	f8da 3004 	ldr.w	r3, [sl, #4]
   8c1b8:	4640      	mov	r0, r8
   8c1ba:	f003 0301 	and.w	r3, r3, #1
   8c1be:	431d      	orrs	r5, r3
   8c1c0:	f8ca 5004 	str.w	r5, [sl, #4]
   8c1c4:	f7ff fb56 	bl	8b874 <__malloc_unlock>
   8c1c8:	e74d      	b.n	8c066 <_realloc_r+0xee>
   8c1ca:	6823      	ldr	r3, [r4, #0]
   8c1cc:	2a1b      	cmp	r2, #27
   8c1ce:	6003      	str	r3, [r0, #0]
   8c1d0:	6863      	ldr	r3, [r4, #4]
   8c1d2:	6043      	str	r3, [r0, #4]
   8c1d4:	d849      	bhi.n	8c26a <_realloc_r+0x2f2>
   8c1d6:	f104 0208 	add.w	r2, r4, #8
   8c1da:	f100 0308 	add.w	r3, r0, #8
   8c1de:	e729      	b.n	8c034 <_realloc_r+0xbc>
   8c1e0:	ebac 0205 	sub.w	r2, ip, r5
   8c1e4:	eb09 0105 	add.w	r1, r9, r5
   8c1e8:	f042 0201 	orr.w	r2, r2, #1
   8c1ec:	6099      	str	r1, [r3, #8]
   8c1ee:	604a      	str	r2, [r1, #4]
   8c1f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c1f4:	4640      	mov	r0, r8
   8c1f6:	f003 0301 	and.w	r3, r3, #1
   8c1fa:	431d      	orrs	r5, r3
   8c1fc:	f844 5c04 	str.w	r5, [r4, #-4]
   8c200:	f7ff fb38 	bl	8b874 <__malloc_unlock>
   8c204:	4626      	mov	r6, r4
   8c206:	e72e      	b.n	8c066 <_realloc_r+0xee>
   8c208:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8c20c:	461f      	mov	r7, r3
   8c20e:	60ca      	str	r2, [r1, #12]
   8c210:	6091      	str	r1, [r2, #8]
   8c212:	e752      	b.n	8c0ba <_realloc_r+0x142>
   8c214:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8c218:	f023 0303 	bic.w	r3, r3, #3
   8c21c:	441f      	add	r7, r3
   8c21e:	e74c      	b.n	8c0ba <_realloc_r+0x142>
   8c220:	4656      	mov	r6, sl
   8c222:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c226:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8c22a:	1f3a      	subs	r2, r7, #4
   8c22c:	2a24      	cmp	r2, #36	; 0x24
   8c22e:	60c1      	str	r1, [r0, #12]
   8c230:	6088      	str	r0, [r1, #8]
   8c232:	d827      	bhi.n	8c284 <_realloc_r+0x30c>
   8c234:	2a13      	cmp	r2, #19
   8c236:	d923      	bls.n	8c280 <_realloc_r+0x308>
   8c238:	6821      	ldr	r1, [r4, #0]
   8c23a:	2a1b      	cmp	r2, #27
   8c23c:	f8ca 1008 	str.w	r1, [sl, #8]
   8c240:	6861      	ldr	r1, [r4, #4]
   8c242:	f8ca 100c 	str.w	r1, [sl, #12]
   8c246:	d82f      	bhi.n	8c2a8 <_realloc_r+0x330>
   8c248:	3408      	adds	r4, #8
   8c24a:	f10a 0210 	add.w	r2, sl, #16
   8c24e:	6821      	ldr	r1, [r4, #0]
   8c250:	461f      	mov	r7, r3
   8c252:	6011      	str	r1, [r2, #0]
   8c254:	6863      	ldr	r3, [r4, #4]
   8c256:	46d1      	mov	r9, sl
   8c258:	6053      	str	r3, [r2, #4]
   8c25a:	68a3      	ldr	r3, [r4, #8]
   8c25c:	4634      	mov	r4, r6
   8c25e:	6093      	str	r3, [r2, #8]
   8c260:	e72b      	b.n	8c0ba <_realloc_r+0x142>
   8c262:	4621      	mov	r1, r4
   8c264:	f7ff fa96 	bl	8b794 <memmove>
   8c268:	e6ea      	b.n	8c040 <_realloc_r+0xc8>
   8c26a:	68a3      	ldr	r3, [r4, #8]
   8c26c:	2a24      	cmp	r2, #36	; 0x24
   8c26e:	6083      	str	r3, [r0, #8]
   8c270:	68e3      	ldr	r3, [r4, #12]
   8c272:	60c3      	str	r3, [r0, #12]
   8c274:	d024      	beq.n	8c2c0 <_realloc_r+0x348>
   8c276:	f104 0210 	add.w	r2, r4, #16
   8c27a:	f100 0310 	add.w	r3, r0, #16
   8c27e:	e6d9      	b.n	8c034 <_realloc_r+0xbc>
   8c280:	4632      	mov	r2, r6
   8c282:	e7e4      	b.n	8c24e <_realloc_r+0x2d6>
   8c284:	4621      	mov	r1, r4
   8c286:	4630      	mov	r0, r6
   8c288:	461f      	mov	r7, r3
   8c28a:	46d1      	mov	r9, sl
   8c28c:	f7ff fa82 	bl	8b794 <memmove>
   8c290:	4634      	mov	r4, r6
   8c292:	e712      	b.n	8c0ba <_realloc_r+0x142>
   8c294:	4633      	mov	r3, r6
   8c296:	e707      	b.n	8c0a8 <_realloc_r+0x130>
   8c298:	4621      	mov	r1, r4
   8c29a:	4630      	mov	r0, r6
   8c29c:	4667      	mov	r7, ip
   8c29e:	46d1      	mov	r9, sl
   8c2a0:	f7ff fa78 	bl	8b794 <memmove>
   8c2a4:	4634      	mov	r4, r6
   8c2a6:	e708      	b.n	8c0ba <_realloc_r+0x142>
   8c2a8:	68a1      	ldr	r1, [r4, #8]
   8c2aa:	2a24      	cmp	r2, #36	; 0x24
   8c2ac:	f8ca 1010 	str.w	r1, [sl, #16]
   8c2b0:	68e1      	ldr	r1, [r4, #12]
   8c2b2:	f8ca 1014 	str.w	r1, [sl, #20]
   8c2b6:	d023      	beq.n	8c300 <_realloc_r+0x388>
   8c2b8:	3410      	adds	r4, #16
   8c2ba:	f10a 0218 	add.w	r2, sl, #24
   8c2be:	e7c6      	b.n	8c24e <_realloc_r+0x2d6>
   8c2c0:	6923      	ldr	r3, [r4, #16]
   8c2c2:	f104 0218 	add.w	r2, r4, #24
   8c2c6:	6103      	str	r3, [r0, #16]
   8c2c8:	6961      	ldr	r1, [r4, #20]
   8c2ca:	f100 0318 	add.w	r3, r0, #24
   8c2ce:	6141      	str	r1, [r0, #20]
   8c2d0:	e6b0      	b.n	8c034 <_realloc_r+0xbc>
   8c2d2:	bf00      	nop
   8c2d4:	200009e0 	.word	0x200009e0
   8c2d8:	68a3      	ldr	r3, [r4, #8]
   8c2da:	2a24      	cmp	r2, #36	; 0x24
   8c2dc:	f8ca 3010 	str.w	r3, [sl, #16]
   8c2e0:	68e3      	ldr	r3, [r4, #12]
   8c2e2:	f8ca 3014 	str.w	r3, [sl, #20]
   8c2e6:	d021      	beq.n	8c32c <_realloc_r+0x3b4>
   8c2e8:	3410      	adds	r4, #16
   8c2ea:	f10a 0318 	add.w	r3, sl, #24
   8c2ee:	e6db      	b.n	8c0a8 <_realloc_r+0x130>
   8c2f0:	4632      	mov	r2, r6
   8c2f2:	e751      	b.n	8c198 <_realloc_r+0x220>
   8c2f4:	4621      	mov	r1, r4
   8c2f6:	4630      	mov	r0, r6
   8c2f8:	f7ff fa4c 	bl	8b794 <memmove>
   8c2fc:	4b15      	ldr	r3, [pc, #84]	; (8c354 <_realloc_r+0x3dc>)
   8c2fe:	e751      	b.n	8c1a4 <_realloc_r+0x22c>
   8c300:	6921      	ldr	r1, [r4, #16]
   8c302:	f10a 0220 	add.w	r2, sl, #32
   8c306:	f8ca 1018 	str.w	r1, [sl, #24]
   8c30a:	6961      	ldr	r1, [r4, #20]
   8c30c:	3418      	adds	r4, #24
   8c30e:	f8ca 101c 	str.w	r1, [sl, #28]
   8c312:	e79c      	b.n	8c24e <_realloc_r+0x2d6>
   8c314:	68a1      	ldr	r1, [r4, #8]
   8c316:	2a24      	cmp	r2, #36	; 0x24
   8c318:	f8ca 1010 	str.w	r1, [sl, #16]
   8c31c:	68e1      	ldr	r1, [r4, #12]
   8c31e:	f8ca 1014 	str.w	r1, [sl, #20]
   8c322:	d00d      	beq.n	8c340 <_realloc_r+0x3c8>
   8c324:	3410      	adds	r4, #16
   8c326:	f10a 0218 	add.w	r2, sl, #24
   8c32a:	e735      	b.n	8c198 <_realloc_r+0x220>
   8c32c:	6922      	ldr	r2, [r4, #16]
   8c32e:	f10a 0320 	add.w	r3, sl, #32
   8c332:	f8ca 2018 	str.w	r2, [sl, #24]
   8c336:	6962      	ldr	r2, [r4, #20]
   8c338:	3418      	adds	r4, #24
   8c33a:	f8ca 201c 	str.w	r2, [sl, #28]
   8c33e:	e6b3      	b.n	8c0a8 <_realloc_r+0x130>
   8c340:	6921      	ldr	r1, [r4, #16]
   8c342:	f10a 0220 	add.w	r2, sl, #32
   8c346:	f8ca 1018 	str.w	r1, [sl, #24]
   8c34a:	6961      	ldr	r1, [r4, #20]
   8c34c:	3418      	adds	r4, #24
   8c34e:	f8ca 101c 	str.w	r1, [sl, #28]
   8c352:	e721      	b.n	8c198 <_realloc_r+0x220>
   8c354:	200009e0 	.word	0x200009e0

0008c358 <frexp>:
   8c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c35a:	4617      	mov	r7, r2
   8c35c:	2200      	movs	r2, #0
   8c35e:	f8df c060 	ldr.w	ip, [pc, #96]	; 8c3c0 <frexp+0x68>
   8c362:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c366:	4563      	cmp	r3, ip
   8c368:	4604      	mov	r4, r0
   8c36a:	460d      	mov	r5, r1
   8c36c:	603a      	str	r2, [r7, #0]
   8c36e:	dc22      	bgt.n	8c3b6 <frexp+0x5e>
   8c370:	4684      	mov	ip, r0
   8c372:	ea53 0c0c 	orrs.w	ip, r3, ip
   8c376:	d01e      	beq.n	8c3b6 <frexp+0x5e>
   8c378:	f8df c048 	ldr.w	ip, [pc, #72]	; 8c3c4 <frexp+0x6c>
   8c37c:	460e      	mov	r6, r1
   8c37e:	ea01 0c0c 	and.w	ip, r1, ip
   8c382:	f1bc 0f00 	cmp.w	ip, #0
   8c386:	d109      	bne.n	8c39c <frexp+0x44>
   8c388:	2200      	movs	r2, #0
   8c38a:	4b0c      	ldr	r3, [pc, #48]	; (8c3bc <frexp+0x64>)
   8c38c:	f000 fd70 	bl	8ce70 <__aeabi_dmul>
   8c390:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8c394:	4604      	mov	r4, r0
   8c396:	460e      	mov	r6, r1
   8c398:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c39c:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8c3a0:	151b      	asrs	r3, r3, #20
   8c3a2:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8c3a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8c3aa:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8c3ae:	4413      	add	r3, r2
   8c3b0:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8c3b4:	603b      	str	r3, [r7, #0]
   8c3b6:	4620      	mov	r0, r4
   8c3b8:	4629      	mov	r1, r5
   8c3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c3bc:	43500000 	.word	0x43500000
   8c3c0:	7fefffff 	.word	0x7fefffff
   8c3c4:	7ff00000 	.word	0x7ff00000

0008c3c8 <_sbrk_r>:
   8c3c8:	2200      	movs	r2, #0
   8c3ca:	b538      	push	{r3, r4, r5, lr}
   8c3cc:	4d06      	ldr	r5, [pc, #24]	; (8c3e8 <_sbrk_r+0x20>)
   8c3ce:	4604      	mov	r4, r0
   8c3d0:	4608      	mov	r0, r1
   8c3d2:	602a      	str	r2, [r5, #0]
   8c3d4:	f7f6 fea2 	bl	8311c <_sbrk>
   8c3d8:	1c43      	adds	r3, r0, #1
   8c3da:	d000      	beq.n	8c3de <_sbrk_r+0x16>
   8c3dc:	bd38      	pop	{r3, r4, r5, pc}
   8c3de:	682b      	ldr	r3, [r5, #0]
   8c3e0:	2b00      	cmp	r3, #0
   8c3e2:	d0fb      	beq.n	8c3dc <_sbrk_r+0x14>
   8c3e4:	6023      	str	r3, [r4, #0]
   8c3e6:	bd38      	pop	{r3, r4, r5, pc}
   8c3e8:	2000186c 	.word	0x2000186c

0008c3ec <__sread>:
   8c3ec:	b510      	push	{r4, lr}
   8c3ee:	460c      	mov	r4, r1
   8c3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c3f4:	f000 fb16 	bl	8ca24 <_read_r>
   8c3f8:	2800      	cmp	r0, #0
   8c3fa:	db03      	blt.n	8c404 <__sread+0x18>
   8c3fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8c3fe:	4403      	add	r3, r0
   8c400:	6523      	str	r3, [r4, #80]	; 0x50
   8c402:	bd10      	pop	{r4, pc}
   8c404:	89a3      	ldrh	r3, [r4, #12]
   8c406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8c40a:	81a3      	strh	r3, [r4, #12]
   8c40c:	bd10      	pop	{r4, pc}
   8c40e:	bf00      	nop

0008c410 <__swrite>:
   8c410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c414:	460c      	mov	r4, r1
   8c416:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8c41a:	461f      	mov	r7, r3
   8c41c:	05cb      	lsls	r3, r1, #23
   8c41e:	4616      	mov	r6, r2
   8c420:	4605      	mov	r5, r0
   8c422:	d40b      	bmi.n	8c43c <__swrite+0x2c>
   8c424:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8c428:	81a1      	strh	r1, [r4, #12]
   8c42a:	463b      	mov	r3, r7
   8c42c:	4632      	mov	r2, r6
   8c42e:	4628      	mov	r0, r5
   8c430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8c438:	f000 b980 	b.w	8c73c <_write_r>
   8c43c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c440:	2302      	movs	r3, #2
   8c442:	2200      	movs	r2, #0
   8c444:	f000 fad8 	bl	8c9f8 <_lseek_r>
   8c448:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8c44c:	e7ea      	b.n	8c424 <__swrite+0x14>
   8c44e:	bf00      	nop

0008c450 <__sseek>:
   8c450:	b510      	push	{r4, lr}
   8c452:	460c      	mov	r4, r1
   8c454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c458:	f000 face 	bl	8c9f8 <_lseek_r>
   8c45c:	89a3      	ldrh	r3, [r4, #12]
   8c45e:	1c42      	adds	r2, r0, #1
   8c460:	bf0e      	itee	eq
   8c462:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8c466:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8c46a:	6520      	strne	r0, [r4, #80]	; 0x50
   8c46c:	81a3      	strh	r3, [r4, #12]
   8c46e:	bd10      	pop	{r4, pc}

0008c470 <__sclose>:
   8c470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c474:	f000 ba0c 	b.w	8c890 <_close_r>

0008c478 <strlen>:
   8c478:	f020 0103 	bic.w	r1, r0, #3
   8c47c:	f010 0003 	ands.w	r0, r0, #3
   8c480:	f1c0 0000 	rsb	r0, r0, #0
   8c484:	f851 3b04 	ldr.w	r3, [r1], #4
   8c488:	f100 0c04 	add.w	ip, r0, #4
   8c48c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8c490:	f06f 0200 	mvn.w	r2, #0
   8c494:	bf1c      	itt	ne
   8c496:	fa22 f20c 	lsrne.w	r2, r2, ip
   8c49a:	4313      	orrne	r3, r2
   8c49c:	f04f 0c01 	mov.w	ip, #1
   8c4a0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8c4a4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8c4a8:	eba3 020c 	sub.w	r2, r3, ip
   8c4ac:	ea22 0203 	bic.w	r2, r2, r3
   8c4b0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8c4b4:	bf04      	itt	eq
   8c4b6:	f851 3b04 	ldreq.w	r3, [r1], #4
   8c4ba:	3004      	addeq	r0, #4
   8c4bc:	d0f4      	beq.n	8c4a8 <strlen+0x30>
   8c4be:	f1c2 0100 	rsb	r1, r2, #0
   8c4c2:	ea02 0201 	and.w	r2, r2, r1
   8c4c6:	fab2 f282 	clz	r2, r2
   8c4ca:	f1c2 021f 	rsb	r2, r2, #31
   8c4ce:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8c4d2:	4770      	bx	lr

0008c4d4 <strncpy>:
   8c4d4:	b470      	push	{r4, r5, r6}
   8c4d6:	ea40 0401 	orr.w	r4, r0, r1
   8c4da:	07a3      	lsls	r3, r4, #30
   8c4dc:	d122      	bne.n	8c524 <strncpy+0x50>
   8c4de:	2a03      	cmp	r2, #3
   8c4e0:	d920      	bls.n	8c524 <strncpy+0x50>
   8c4e2:	460b      	mov	r3, r1
   8c4e4:	4604      	mov	r4, r0
   8c4e6:	4619      	mov	r1, r3
   8c4e8:	f853 6b04 	ldr.w	r6, [r3], #4
   8c4ec:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8c4f0:	ea25 0506 	bic.w	r5, r5, r6
   8c4f4:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8c4f8:	d115      	bne.n	8c526 <strncpy+0x52>
   8c4fa:	3a04      	subs	r2, #4
   8c4fc:	2a03      	cmp	r2, #3
   8c4fe:	4619      	mov	r1, r3
   8c500:	f844 6b04 	str.w	r6, [r4], #4
   8c504:	d8ef      	bhi.n	8c4e6 <strncpy+0x12>
   8c506:	1e4d      	subs	r5, r1, #1
   8c508:	b152      	cbz	r2, 8c520 <strncpy+0x4c>
   8c50a:	4623      	mov	r3, r4
   8c50c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8c510:	1e56      	subs	r6, r2, #1
   8c512:	f803 1b01 	strb.w	r1, [r3], #1
   8c516:	b141      	cbz	r1, 8c52a <strncpy+0x56>
   8c518:	4632      	mov	r2, r6
   8c51a:	461c      	mov	r4, r3
   8c51c:	2a00      	cmp	r2, #0
   8c51e:	d1f4      	bne.n	8c50a <strncpy+0x36>
   8c520:	bc70      	pop	{r4, r5, r6}
   8c522:	4770      	bx	lr
   8c524:	4604      	mov	r4, r0
   8c526:	1e4d      	subs	r5, r1, #1
   8c528:	e7ee      	b.n	8c508 <strncpy+0x34>
   8c52a:	4422      	add	r2, r4
   8c52c:	2e00      	cmp	r6, #0
   8c52e:	d0f7      	beq.n	8c520 <strncpy+0x4c>
   8c530:	f803 1b01 	strb.w	r1, [r3], #1
   8c534:	4293      	cmp	r3, r2
   8c536:	d1fb      	bne.n	8c530 <strncpy+0x5c>
   8c538:	bc70      	pop	{r4, r5, r6}
   8c53a:	4770      	bx	lr

0008c53c <__ssprint_r>:
   8c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c540:	6893      	ldr	r3, [r2, #8]
   8c542:	4691      	mov	r9, r2
   8c544:	b083      	sub	sp, #12
   8c546:	2b00      	cmp	r3, #0
   8c548:	d06d      	beq.n	8c626 <__ssprint_r+0xea>
   8c54a:	6817      	ldr	r7, [r2, #0]
   8c54c:	4680      	mov	r8, r0
   8c54e:	460c      	mov	r4, r1
   8c550:	6808      	ldr	r0, [r1, #0]
   8c552:	688d      	ldr	r5, [r1, #8]
   8c554:	3708      	adds	r7, #8
   8c556:	e043      	b.n	8c5e0 <__ssprint_r+0xa4>
   8c558:	89a3      	ldrh	r3, [r4, #12]
   8c55a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8c55e:	d02e      	beq.n	8c5be <__ssprint_r+0x82>
   8c560:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8c564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8c568:	eba0 0a01 	sub.w	sl, r0, r1
   8c56c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8c570:	eb0a 0006 	add.w	r0, sl, r6
   8c574:	106d      	asrs	r5, r5, #1
   8c576:	3001      	adds	r0, #1
   8c578:	42a8      	cmp	r0, r5
   8c57a:	462a      	mov	r2, r5
   8c57c:	bf84      	itt	hi
   8c57e:	4605      	movhi	r5, r0
   8c580:	462a      	movhi	r2, r5
   8c582:	055b      	lsls	r3, r3, #21
   8c584:	d536      	bpl.n	8c5f4 <__ssprint_r+0xb8>
   8c586:	4611      	mov	r1, r2
   8c588:	4640      	mov	r0, r8
   8c58a:	f7fe fdff 	bl	8b18c <_malloc_r>
   8c58e:	2800      	cmp	r0, #0
   8c590:	d03a      	beq.n	8c608 <__ssprint_r+0xcc>
   8c592:	4652      	mov	r2, sl
   8c594:	6921      	ldr	r1, [r4, #16]
   8c596:	9001      	str	r0, [sp, #4]
   8c598:	f7fa faa4 	bl	86ae4 <memcpy>
   8c59c:	89a2      	ldrh	r2, [r4, #12]
   8c59e:	9b01      	ldr	r3, [sp, #4]
   8c5a0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8c5a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8c5a8:	81a2      	strh	r2, [r4, #12]
   8c5aa:	eba5 020a 	sub.w	r2, r5, sl
   8c5ae:	eb03 000a 	add.w	r0, r3, sl
   8c5b2:	6165      	str	r5, [r4, #20]
   8c5b4:	46b2      	mov	sl, r6
   8c5b6:	4635      	mov	r5, r6
   8c5b8:	6123      	str	r3, [r4, #16]
   8c5ba:	6020      	str	r0, [r4, #0]
   8c5bc:	60a2      	str	r2, [r4, #8]
   8c5be:	4659      	mov	r1, fp
   8c5c0:	4652      	mov	r2, sl
   8c5c2:	f7ff f8e7 	bl	8b794 <memmove>
   8c5c6:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8c5ca:	68a1      	ldr	r1, [r4, #8]
   8c5cc:	6820      	ldr	r0, [r4, #0]
   8c5ce:	1b4d      	subs	r5, r1, r5
   8c5d0:	4450      	add	r0, sl
   8c5d2:	1b9e      	subs	r6, r3, r6
   8c5d4:	60a5      	str	r5, [r4, #8]
   8c5d6:	6020      	str	r0, [r4, #0]
   8c5d8:	f8c9 6008 	str.w	r6, [r9, #8]
   8c5dc:	b31e      	cbz	r6, 8c626 <__ssprint_r+0xea>
   8c5de:	3708      	adds	r7, #8
   8c5e0:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8c5e4:	2e00      	cmp	r6, #0
   8c5e6:	d0fa      	beq.n	8c5de <__ssprint_r+0xa2>
   8c5e8:	42b5      	cmp	r5, r6
   8c5ea:	46aa      	mov	sl, r5
   8c5ec:	d9b4      	bls.n	8c558 <__ssprint_r+0x1c>
   8c5ee:	4635      	mov	r5, r6
   8c5f0:	46b2      	mov	sl, r6
   8c5f2:	e7e4      	b.n	8c5be <__ssprint_r+0x82>
   8c5f4:	4640      	mov	r0, r8
   8c5f6:	f7ff fcbf 	bl	8bf78 <_realloc_r>
   8c5fa:	4603      	mov	r3, r0
   8c5fc:	2800      	cmp	r0, #0
   8c5fe:	d1d4      	bne.n	8c5aa <__ssprint_r+0x6e>
   8c600:	4640      	mov	r0, r8
   8c602:	6921      	ldr	r1, [r4, #16]
   8c604:	f7fe fa98 	bl	8ab38 <_free_r>
   8c608:	230c      	movs	r3, #12
   8c60a:	2200      	movs	r2, #0
   8c60c:	f04f 30ff 	mov.w	r0, #4294967295
   8c610:	f8c8 3000 	str.w	r3, [r8]
   8c614:	89a3      	ldrh	r3, [r4, #12]
   8c616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c61a:	81a3      	strh	r3, [r4, #12]
   8c61c:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8c620:	b003      	add	sp, #12
   8c622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c626:	2000      	movs	r0, #0
   8c628:	f8c9 0004 	str.w	r0, [r9, #4]
   8c62c:	b003      	add	sp, #12
   8c62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c632:	bf00      	nop

0008c634 <__swbuf_r>:
   8c634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c636:	460d      	mov	r5, r1
   8c638:	4614      	mov	r4, r2
   8c63a:	4606      	mov	r6, r0
   8c63c:	b110      	cbz	r0, 8c644 <__swbuf_r+0x10>
   8c63e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c640:	2b00      	cmp	r3, #0
   8c642:	d043      	beq.n	8c6cc <__swbuf_r+0x98>
   8c644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c648:	69a3      	ldr	r3, [r4, #24]
   8c64a:	0717      	lsls	r7, r2, #28
   8c64c:	60a3      	str	r3, [r4, #8]
   8c64e:	b290      	uxth	r0, r2
   8c650:	d51b      	bpl.n	8c68a <__swbuf_r+0x56>
   8c652:	6923      	ldr	r3, [r4, #16]
   8c654:	b1cb      	cbz	r3, 8c68a <__swbuf_r+0x56>
   8c656:	b2ed      	uxtb	r5, r5
   8c658:	0481      	lsls	r1, r0, #18
   8c65a:	462f      	mov	r7, r5
   8c65c:	d522      	bpl.n	8c6a4 <__swbuf_r+0x70>
   8c65e:	6822      	ldr	r2, [r4, #0]
   8c660:	6961      	ldr	r1, [r4, #20]
   8c662:	1ad3      	subs	r3, r2, r3
   8c664:	4299      	cmp	r1, r3
   8c666:	dd29      	ble.n	8c6bc <__swbuf_r+0x88>
   8c668:	3301      	adds	r3, #1
   8c66a:	68a1      	ldr	r1, [r4, #8]
   8c66c:	1c50      	adds	r0, r2, #1
   8c66e:	3901      	subs	r1, #1
   8c670:	60a1      	str	r1, [r4, #8]
   8c672:	6020      	str	r0, [r4, #0]
   8c674:	7015      	strb	r5, [r2, #0]
   8c676:	6962      	ldr	r2, [r4, #20]
   8c678:	429a      	cmp	r2, r3
   8c67a:	d02a      	beq.n	8c6d2 <__swbuf_r+0x9e>
   8c67c:	89a3      	ldrh	r3, [r4, #12]
   8c67e:	07db      	lsls	r3, r3, #31
   8c680:	d501      	bpl.n	8c686 <__swbuf_r+0x52>
   8c682:	2d0a      	cmp	r5, #10
   8c684:	d025      	beq.n	8c6d2 <__swbuf_r+0x9e>
   8c686:	4638      	mov	r0, r7
   8c688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c68a:	4621      	mov	r1, r4
   8c68c:	4630      	mov	r0, r6
   8c68e:	f7fc ffcf 	bl	89630 <__swsetup_r>
   8c692:	bb20      	cbnz	r0, 8c6de <__swbuf_r+0xaa>
   8c694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c698:	b2ed      	uxtb	r5, r5
   8c69a:	b290      	uxth	r0, r2
   8c69c:	0481      	lsls	r1, r0, #18
   8c69e:	462f      	mov	r7, r5
   8c6a0:	6923      	ldr	r3, [r4, #16]
   8c6a2:	d4dc      	bmi.n	8c65e <__swbuf_r+0x2a>
   8c6a4:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8c6a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8c6aa:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8c6ae:	81a2      	strh	r2, [r4, #12]
   8c6b0:	6822      	ldr	r2, [r4, #0]
   8c6b2:	6661      	str	r1, [r4, #100]	; 0x64
   8c6b4:	6961      	ldr	r1, [r4, #20]
   8c6b6:	1ad3      	subs	r3, r2, r3
   8c6b8:	4299      	cmp	r1, r3
   8c6ba:	dcd5      	bgt.n	8c668 <__swbuf_r+0x34>
   8c6bc:	4621      	mov	r1, r4
   8c6be:	4630      	mov	r0, r6
   8c6c0:	f7fe f8ba 	bl	8a838 <_fflush_r>
   8c6c4:	b958      	cbnz	r0, 8c6de <__swbuf_r+0xaa>
   8c6c6:	2301      	movs	r3, #1
   8c6c8:	6822      	ldr	r2, [r4, #0]
   8c6ca:	e7ce      	b.n	8c66a <__swbuf_r+0x36>
   8c6cc:	f7fe f910 	bl	8a8f0 <__sinit>
   8c6d0:	e7b8      	b.n	8c644 <__swbuf_r+0x10>
   8c6d2:	4621      	mov	r1, r4
   8c6d4:	4630      	mov	r0, r6
   8c6d6:	f7fe f8af 	bl	8a838 <_fflush_r>
   8c6da:	2800      	cmp	r0, #0
   8c6dc:	d0d3      	beq.n	8c686 <__swbuf_r+0x52>
   8c6de:	f04f 37ff 	mov.w	r7, #4294967295
   8c6e2:	e7d0      	b.n	8c686 <__swbuf_r+0x52>

0008c6e4 <_wcrtomb_r>:
   8c6e4:	b570      	push	{r4, r5, r6, lr}
   8c6e6:	4606      	mov	r6, r0
   8c6e8:	461d      	mov	r5, r3
   8c6ea:	b084      	sub	sp, #16
   8c6ec:	b139      	cbz	r1, 8c6fe <_wcrtomb_r+0x1a>
   8c6ee:	4c0b      	ldr	r4, [pc, #44]	; (8c71c <_wcrtomb_r+0x38>)
   8c6f0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8c6f4:	47a0      	blx	r4
   8c6f6:	1c43      	adds	r3, r0, #1
   8c6f8:	d00a      	beq.n	8c710 <_wcrtomb_r+0x2c>
   8c6fa:	b004      	add	sp, #16
   8c6fc:	bd70      	pop	{r4, r5, r6, pc}
   8c6fe:	460c      	mov	r4, r1
   8c700:	4906      	ldr	r1, [pc, #24]	; (8c71c <_wcrtomb_r+0x38>)
   8c702:	4622      	mov	r2, r4
   8c704:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8c708:	a901      	add	r1, sp, #4
   8c70a:	47a0      	blx	r4
   8c70c:	1c43      	adds	r3, r0, #1
   8c70e:	d1f4      	bne.n	8c6fa <_wcrtomb_r+0x16>
   8c710:	2200      	movs	r2, #0
   8c712:	238a      	movs	r3, #138	; 0x8a
   8c714:	602a      	str	r2, [r5, #0]
   8c716:	6033      	str	r3, [r6, #0]
   8c718:	b004      	add	sp, #16
   8c71a:	bd70      	pop	{r4, r5, r6, pc}
   8c71c:	20000874 	.word	0x20000874

0008c720 <__ascii_wctomb>:
   8c720:	4603      	mov	r3, r0
   8c722:	b149      	cbz	r1, 8c738 <__ascii_wctomb+0x18>
   8c724:	2aff      	cmp	r2, #255	; 0xff
   8c726:	d802      	bhi.n	8c72e <__ascii_wctomb+0xe>
   8c728:	2001      	movs	r0, #1
   8c72a:	700a      	strb	r2, [r1, #0]
   8c72c:	4770      	bx	lr
   8c72e:	228a      	movs	r2, #138	; 0x8a
   8c730:	f04f 30ff 	mov.w	r0, #4294967295
   8c734:	601a      	str	r2, [r3, #0]
   8c736:	4770      	bx	lr
   8c738:	4608      	mov	r0, r1
   8c73a:	4770      	bx	lr

0008c73c <_write_r>:
   8c73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c73e:	460f      	mov	r7, r1
   8c740:	2600      	movs	r6, #0
   8c742:	4d08      	ldr	r5, [pc, #32]	; (8c764 <_write_r+0x28>)
   8c744:	4611      	mov	r1, r2
   8c746:	4604      	mov	r4, r0
   8c748:	461a      	mov	r2, r3
   8c74a:	4638      	mov	r0, r7
   8c74c:	602e      	str	r6, [r5, #0]
   8c74e:	f7f9 ffdf 	bl	86710 <_write>
   8c752:	1c43      	adds	r3, r0, #1
   8c754:	d000      	beq.n	8c758 <_write_r+0x1c>
   8c756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c758:	682b      	ldr	r3, [r5, #0]
   8c75a:	2b00      	cmp	r3, #0
   8c75c:	d0fb      	beq.n	8c756 <_write_r+0x1a>
   8c75e:	6023      	str	r3, [r4, #0]
   8c760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c762:	bf00      	nop
   8c764:	2000186c 	.word	0x2000186c

0008c768 <__register_exitproc>:
   8c768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c76c:	f8df a080 	ldr.w	sl, [pc, #128]	; 8c7f0 <__register_exitproc+0x88>
   8c770:	4606      	mov	r6, r0
   8c772:	f8da 0000 	ldr.w	r0, [sl]
   8c776:	4698      	mov	r8, r3
   8c778:	460f      	mov	r7, r1
   8c77a:	4691      	mov	r9, r2
   8c77c:	f7fe fc8a 	bl	8b094 <__retarget_lock_acquire_recursive>
   8c780:	4b1a      	ldr	r3, [pc, #104]	; (8c7ec <__register_exitproc+0x84>)
   8c782:	681b      	ldr	r3, [r3, #0]
   8c784:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8c788:	b324      	cbz	r4, 8c7d4 <__register_exitproc+0x6c>
   8c78a:	6865      	ldr	r5, [r4, #4]
   8c78c:	2d1f      	cmp	r5, #31
   8c78e:	dc26      	bgt.n	8c7de <__register_exitproc+0x76>
   8c790:	b95e      	cbnz	r6, 8c7aa <__register_exitproc+0x42>
   8c792:	1c6b      	adds	r3, r5, #1
   8c794:	3502      	adds	r5, #2
   8c796:	f8da 0000 	ldr.w	r0, [sl]
   8c79a:	6063      	str	r3, [r4, #4]
   8c79c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8c7a0:	f7fe fc7a 	bl	8b098 <__retarget_lock_release_recursive>
   8c7a4:	2000      	movs	r0, #0
   8c7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c7aa:	2301      	movs	r3, #1
   8c7ac:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8c7b0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8c7b4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8c7b8:	40ab      	lsls	r3, r5
   8c7ba:	431a      	orrs	r2, r3
   8c7bc:	2e02      	cmp	r6, #2
   8c7be:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8c7c2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8c7c6:	d1e4      	bne.n	8c792 <__register_exitproc+0x2a>
   8c7c8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8c7cc:	4313      	orrs	r3, r2
   8c7ce:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8c7d2:	e7de      	b.n	8c792 <__register_exitproc+0x2a>
   8c7d4:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8c7d8:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8c7dc:	e7d5      	b.n	8c78a <__register_exitproc+0x22>
   8c7de:	f8da 0000 	ldr.w	r0, [sl]
   8c7e2:	f7fe fc59 	bl	8b098 <__retarget_lock_release_recursive>
   8c7e6:	f04f 30ff 	mov.w	r0, #4294967295
   8c7ea:	e7dc      	b.n	8c7a6 <__register_exitproc+0x3e>
   8c7ec:	0008d4e0 	.word	0x0008d4e0
   8c7f0:	20000870 	.word	0x20000870

0008c7f4 <__assert_func>:
   8c7f4:	4614      	mov	r4, r2
   8c7f6:	b500      	push	{lr}
   8c7f8:	4d09      	ldr	r5, [pc, #36]	; (8c820 <__assert_func+0x2c>)
   8c7fa:	461a      	mov	r2, r3
   8c7fc:	4603      	mov	r3, r0
   8c7fe:	6828      	ldr	r0, [r5, #0]
   8c800:	b085      	sub	sp, #20
   8c802:	68c0      	ldr	r0, [r0, #12]
   8c804:	b144      	cbz	r4, 8c818 <__assert_func+0x24>
   8c806:	4d07      	ldr	r5, [pc, #28]	; (8c824 <__assert_func+0x30>)
   8c808:	9100      	str	r1, [sp, #0]
   8c80a:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8c80e:	4906      	ldr	r1, [pc, #24]	; (8c828 <__assert_func+0x34>)
   8c810:	f000 f8b6 	bl	8c980 <fiprintf>
   8c814:	f000 f91c 	bl	8ca50 <abort>
   8c818:	4d04      	ldr	r5, [pc, #16]	; (8c82c <__assert_func+0x38>)
   8c81a:	462c      	mov	r4, r5
   8c81c:	e7f4      	b.n	8c808 <__assert_func+0x14>
   8c81e:	bf00      	nop
   8c820:	20000440 	.word	0x20000440
   8c824:	0008d794 	.word	0x0008d794
   8c828:	0008d7a4 	.word	0x0008d7a4
   8c82c:	0008d7a0 	.word	0x0008d7a0

0008c830 <_calloc_r>:
   8c830:	b510      	push	{r4, lr}
   8c832:	fb02 f101 	mul.w	r1, r2, r1
   8c836:	f7fe fca9 	bl	8b18c <_malloc_r>
   8c83a:	4604      	mov	r4, r0
   8c83c:	b168      	cbz	r0, 8c85a <_calloc_r+0x2a>
   8c83e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8c842:	f022 0203 	bic.w	r2, r2, #3
   8c846:	3a04      	subs	r2, #4
   8c848:	2a24      	cmp	r2, #36	; 0x24
   8c84a:	d818      	bhi.n	8c87e <_calloc_r+0x4e>
   8c84c:	2a13      	cmp	r2, #19
   8c84e:	d806      	bhi.n	8c85e <_calloc_r+0x2e>
   8c850:	4602      	mov	r2, r0
   8c852:	2300      	movs	r3, #0
   8c854:	e9c2 3300 	strd	r3, r3, [r2]
   8c858:	6093      	str	r3, [r2, #8]
   8c85a:	4620      	mov	r0, r4
   8c85c:	bd10      	pop	{r4, pc}
   8c85e:	2300      	movs	r3, #0
   8c860:	2a1b      	cmp	r2, #27
   8c862:	e9c0 3300 	strd	r3, r3, [r0]
   8c866:	d90f      	bls.n	8c888 <_calloc_r+0x58>
   8c868:	2a24      	cmp	r2, #36	; 0x24
   8c86a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8c86e:	bf0a      	itet	eq
   8c870:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8c874:	f100 0210 	addne.w	r2, r0, #16
   8c878:	f100 0218 	addeq.w	r2, r0, #24
   8c87c:	e7e9      	b.n	8c852 <_calloc_r+0x22>
   8c87e:	2100      	movs	r1, #0
   8c880:	f7fa f9a6 	bl	86bd0 <memset>
   8c884:	4620      	mov	r0, r4
   8c886:	bd10      	pop	{r4, pc}
   8c888:	f100 0208 	add.w	r2, r0, #8
   8c88c:	e7e1      	b.n	8c852 <_calloc_r+0x22>
   8c88e:	bf00      	nop

0008c890 <_close_r>:
   8c890:	2200      	movs	r2, #0
   8c892:	b538      	push	{r3, r4, r5, lr}
   8c894:	4d06      	ldr	r5, [pc, #24]	; (8c8b0 <_close_r+0x20>)
   8c896:	4604      	mov	r4, r0
   8c898:	4608      	mov	r0, r1
   8c89a:	602a      	str	r2, [r5, #0]
   8c89c:	f7f6 fc6a 	bl	83174 <_close>
   8c8a0:	1c43      	adds	r3, r0, #1
   8c8a2:	d000      	beq.n	8c8a6 <_close_r+0x16>
   8c8a4:	bd38      	pop	{r3, r4, r5, pc}
   8c8a6:	682b      	ldr	r3, [r5, #0]
   8c8a8:	2b00      	cmp	r3, #0
   8c8aa:	d0fb      	beq.n	8c8a4 <_close_r+0x14>
   8c8ac:	6023      	str	r3, [r4, #0]
   8c8ae:	bd38      	pop	{r3, r4, r5, pc}
   8c8b0:	2000186c 	.word	0x2000186c

0008c8b4 <_fclose_r>:
   8c8b4:	b570      	push	{r4, r5, r6, lr}
   8c8b6:	2900      	cmp	r1, #0
   8c8b8:	d04b      	beq.n	8c952 <_fclose_r+0x9e>
   8c8ba:	460c      	mov	r4, r1
   8c8bc:	4605      	mov	r5, r0
   8c8be:	b110      	cbz	r0, 8c8c6 <_fclose_r+0x12>
   8c8c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c8c2:	2b00      	cmp	r3, #0
   8c8c4:	d048      	beq.n	8c958 <_fclose_r+0xa4>
   8c8c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c8c8:	07d8      	lsls	r0, r3, #31
   8c8ca:	d534      	bpl.n	8c936 <_fclose_r+0x82>
   8c8cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c8d0:	2b00      	cmp	r3, #0
   8c8d2:	d03e      	beq.n	8c952 <_fclose_r+0x9e>
   8c8d4:	4621      	mov	r1, r4
   8c8d6:	4628      	mov	r0, r5
   8c8d8:	f7fd ff16 	bl	8a708 <__sflush_r>
   8c8dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8c8de:	4606      	mov	r6, r0
   8c8e0:	b133      	cbz	r3, 8c8f0 <_fclose_r+0x3c>
   8c8e2:	4628      	mov	r0, r5
   8c8e4:	69e1      	ldr	r1, [r4, #28]
   8c8e6:	4798      	blx	r3
   8c8e8:	2800      	cmp	r0, #0
   8c8ea:	bfb8      	it	lt
   8c8ec:	f04f 36ff 	movlt.w	r6, #4294967295
   8c8f0:	89a3      	ldrh	r3, [r4, #12]
   8c8f2:	061a      	lsls	r2, r3, #24
   8c8f4:	d43b      	bmi.n	8c96e <_fclose_r+0xba>
   8c8f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8c8f8:	b141      	cbz	r1, 8c90c <_fclose_r+0x58>
   8c8fa:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8c8fe:	4299      	cmp	r1, r3
   8c900:	d002      	beq.n	8c908 <_fclose_r+0x54>
   8c902:	4628      	mov	r0, r5
   8c904:	f7fe f918 	bl	8ab38 <_free_r>
   8c908:	2300      	movs	r3, #0
   8c90a:	6323      	str	r3, [r4, #48]	; 0x30
   8c90c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8c90e:	b121      	cbz	r1, 8c91a <_fclose_r+0x66>
   8c910:	4628      	mov	r0, r5
   8c912:	f7fe f911 	bl	8ab38 <_free_r>
   8c916:	2300      	movs	r3, #0
   8c918:	6463      	str	r3, [r4, #68]	; 0x44
   8c91a:	f7fe f817 	bl	8a94c <__sfp_lock_acquire>
   8c91e:	2200      	movs	r2, #0
   8c920:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c922:	81a2      	strh	r2, [r4, #12]
   8c924:	07db      	lsls	r3, r3, #31
   8c926:	d527      	bpl.n	8c978 <_fclose_r+0xc4>
   8c928:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c92a:	f7fe fbb1 	bl	8b090 <__retarget_lock_close_recursive>
   8c92e:	f7fe f813 	bl	8a958 <__sfp_lock_release>
   8c932:	4630      	mov	r0, r6
   8c934:	bd70      	pop	{r4, r5, r6, pc}
   8c936:	89a3      	ldrh	r3, [r4, #12]
   8c938:	0599      	lsls	r1, r3, #22
   8c93a:	d4cb      	bmi.n	8c8d4 <_fclose_r+0x20>
   8c93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c93e:	f7fe fba9 	bl	8b094 <__retarget_lock_acquire_recursive>
   8c942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c946:	2b00      	cmp	r3, #0
   8c948:	d1c4      	bne.n	8c8d4 <_fclose_r+0x20>
   8c94a:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8c94c:	f016 0601 	ands.w	r6, r6, #1
   8c950:	d008      	beq.n	8c964 <_fclose_r+0xb0>
   8c952:	2600      	movs	r6, #0
   8c954:	4630      	mov	r0, r6
   8c956:	bd70      	pop	{r4, r5, r6, pc}
   8c958:	f7fd ffca 	bl	8a8f0 <__sinit>
   8c95c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c95e:	07d8      	lsls	r0, r3, #31
   8c960:	d4b4      	bmi.n	8c8cc <_fclose_r+0x18>
   8c962:	e7e8      	b.n	8c936 <_fclose_r+0x82>
   8c964:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c966:	f7fe fb97 	bl	8b098 <__retarget_lock_release_recursive>
   8c96a:	4630      	mov	r0, r6
   8c96c:	bd70      	pop	{r4, r5, r6, pc}
   8c96e:	4628      	mov	r0, r5
   8c970:	6921      	ldr	r1, [r4, #16]
   8c972:	f7fe f8e1 	bl	8ab38 <_free_r>
   8c976:	e7be      	b.n	8c8f6 <_fclose_r+0x42>
   8c978:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c97a:	f7fe fb8d 	bl	8b098 <__retarget_lock_release_recursive>
   8c97e:	e7d3      	b.n	8c928 <_fclose_r+0x74>

0008c980 <fiprintf>:
   8c980:	b40e      	push	{r1, r2, r3}
   8c982:	b510      	push	{r4, lr}
   8c984:	b083      	sub	sp, #12
   8c986:	ab05      	add	r3, sp, #20
   8c988:	4c06      	ldr	r4, [pc, #24]	; (8c9a4 <fiprintf+0x24>)
   8c98a:	f853 2b04 	ldr.w	r2, [r3], #4
   8c98e:	4601      	mov	r1, r0
   8c990:	6820      	ldr	r0, [r4, #0]
   8c992:	9301      	str	r3, [sp, #4]
   8c994:	f7fb ff72 	bl	8887c <_vfiprintf_r>
   8c998:	b003      	add	sp, #12
   8c99a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8c99e:	b003      	add	sp, #12
   8c9a0:	4770      	bx	lr
   8c9a2:	bf00      	nop
   8c9a4:	20000440 	.word	0x20000440

0008c9a8 <_fstat_r>:
   8c9a8:	b570      	push	{r4, r5, r6, lr}
   8c9aa:	460c      	mov	r4, r1
   8c9ac:	4603      	mov	r3, r0
   8c9ae:	2600      	movs	r6, #0
   8c9b0:	4d07      	ldr	r5, [pc, #28]	; (8c9d0 <_fstat_r+0x28>)
   8c9b2:	4620      	mov	r0, r4
   8c9b4:	4611      	mov	r1, r2
   8c9b6:	461c      	mov	r4, r3
   8c9b8:	602e      	str	r6, [r5, #0]
   8c9ba:	f7f6 fbe6 	bl	8318a <_fstat>
   8c9be:	1c43      	adds	r3, r0, #1
   8c9c0:	d000      	beq.n	8c9c4 <_fstat_r+0x1c>
   8c9c2:	bd70      	pop	{r4, r5, r6, pc}
   8c9c4:	682b      	ldr	r3, [r5, #0]
   8c9c6:	2b00      	cmp	r3, #0
   8c9c8:	d0fb      	beq.n	8c9c2 <_fstat_r+0x1a>
   8c9ca:	6023      	str	r3, [r4, #0]
   8c9cc:	bd70      	pop	{r4, r5, r6, pc}
   8c9ce:	bf00      	nop
   8c9d0:	2000186c 	.word	0x2000186c

0008c9d4 <_isatty_r>:
   8c9d4:	2200      	movs	r2, #0
   8c9d6:	b538      	push	{r3, r4, r5, lr}
   8c9d8:	4d06      	ldr	r5, [pc, #24]	; (8c9f4 <_isatty_r+0x20>)
   8c9da:	4604      	mov	r4, r0
   8c9dc:	4608      	mov	r0, r1
   8c9de:	602a      	str	r2, [r5, #0]
   8c9e0:	f7f6 fbe2 	bl	831a8 <_isatty>
   8c9e4:	1c43      	adds	r3, r0, #1
   8c9e6:	d000      	beq.n	8c9ea <_isatty_r+0x16>
   8c9e8:	bd38      	pop	{r3, r4, r5, pc}
   8c9ea:	682b      	ldr	r3, [r5, #0]
   8c9ec:	2b00      	cmp	r3, #0
   8c9ee:	d0fb      	beq.n	8c9e8 <_isatty_r+0x14>
   8c9f0:	6023      	str	r3, [r4, #0]
   8c9f2:	bd38      	pop	{r3, r4, r5, pc}
   8c9f4:	2000186c 	.word	0x2000186c

0008c9f8 <_lseek_r>:
   8c9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c9fa:	460f      	mov	r7, r1
   8c9fc:	2600      	movs	r6, #0
   8c9fe:	4d08      	ldr	r5, [pc, #32]	; (8ca20 <_lseek_r+0x28>)
   8ca00:	4611      	mov	r1, r2
   8ca02:	4604      	mov	r4, r0
   8ca04:	461a      	mov	r2, r3
   8ca06:	4638      	mov	r0, r7
   8ca08:	602e      	str	r6, [r5, #0]
   8ca0a:	f7f6 fbd7 	bl	831bc <_lseek>
   8ca0e:	1c43      	adds	r3, r0, #1
   8ca10:	d000      	beq.n	8ca14 <_lseek_r+0x1c>
   8ca12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ca14:	682b      	ldr	r3, [r5, #0]
   8ca16:	2b00      	cmp	r3, #0
   8ca18:	d0fb      	beq.n	8ca12 <_lseek_r+0x1a>
   8ca1a:	6023      	str	r3, [r4, #0]
   8ca1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ca1e:	bf00      	nop
   8ca20:	2000186c 	.word	0x2000186c

0008ca24 <_read_r>:
   8ca24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ca26:	460f      	mov	r7, r1
   8ca28:	2600      	movs	r6, #0
   8ca2a:	4d08      	ldr	r5, [pc, #32]	; (8ca4c <_read_r+0x28>)
   8ca2c:	4611      	mov	r1, r2
   8ca2e:	4604      	mov	r4, r0
   8ca30:	461a      	mov	r2, r3
   8ca32:	4638      	mov	r0, r7
   8ca34:	602e      	str	r6, [r5, #0]
   8ca36:	f7f6 f873 	bl	82b20 <_read>
   8ca3a:	1c43      	adds	r3, r0, #1
   8ca3c:	d000      	beq.n	8ca40 <_read_r+0x1c>
   8ca3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ca40:	682b      	ldr	r3, [r5, #0]
   8ca42:	2b00      	cmp	r3, #0
   8ca44:	d0fb      	beq.n	8ca3e <_read_r+0x1a>
   8ca46:	6023      	str	r3, [r4, #0]
   8ca48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ca4a:	bf00      	nop
   8ca4c:	2000186c 	.word	0x2000186c

0008ca50 <abort>:
   8ca50:	2006      	movs	r0, #6
   8ca52:	b508      	push	{r3, lr}
   8ca54:	f000 f830 	bl	8cab8 <raise>
   8ca58:	2001      	movs	r0, #1
   8ca5a:	f7f6 fbbb 	bl	831d4 <_exit>
   8ca5e:	bf00      	nop

0008ca60 <_raise_r>:
   8ca60:	291f      	cmp	r1, #31
   8ca62:	b538      	push	{r3, r4, r5, lr}
   8ca64:	4605      	mov	r5, r0
   8ca66:	d821      	bhi.n	8caac <_raise_r+0x4c>
   8ca68:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8ca6c:	460c      	mov	r4, r1
   8ca6e:	b16a      	cbz	r2, 8ca8c <_raise_r+0x2c>
   8ca70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8ca74:	b153      	cbz	r3, 8ca8c <_raise_r+0x2c>
   8ca76:	2b01      	cmp	r3, #1
   8ca78:	d016      	beq.n	8caa8 <_raise_r+0x48>
   8ca7a:	1c59      	adds	r1, r3, #1
   8ca7c:	d010      	beq.n	8caa0 <_raise_r+0x40>
   8ca7e:	2500      	movs	r5, #0
   8ca80:	4620      	mov	r0, r4
   8ca82:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8ca86:	4798      	blx	r3
   8ca88:	4628      	mov	r0, r5
   8ca8a:	bd38      	pop	{r3, r4, r5, pc}
   8ca8c:	4628      	mov	r0, r5
   8ca8e:	f000 f831 	bl	8caf4 <_getpid_r>
   8ca92:	4622      	mov	r2, r4
   8ca94:	4601      	mov	r1, r0
   8ca96:	4628      	mov	r0, r5
   8ca98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8ca9c:	f000 b814 	b.w	8cac8 <_kill_r>
   8caa0:	2316      	movs	r3, #22
   8caa2:	2001      	movs	r0, #1
   8caa4:	602b      	str	r3, [r5, #0]
   8caa6:	bd38      	pop	{r3, r4, r5, pc}
   8caa8:	2000      	movs	r0, #0
   8caaa:	bd38      	pop	{r3, r4, r5, pc}
   8caac:	2316      	movs	r3, #22
   8caae:	f04f 30ff 	mov.w	r0, #4294967295
   8cab2:	602b      	str	r3, [r5, #0]
   8cab4:	bd38      	pop	{r3, r4, r5, pc}
   8cab6:	bf00      	nop

0008cab8 <raise>:
   8cab8:	4b02      	ldr	r3, [pc, #8]	; (8cac4 <raise+0xc>)
   8caba:	4601      	mov	r1, r0
   8cabc:	6818      	ldr	r0, [r3, #0]
   8cabe:	f7ff bfcf 	b.w	8ca60 <_raise_r>
   8cac2:	bf00      	nop
   8cac4:	20000440 	.word	0x20000440

0008cac8 <_kill_r>:
   8cac8:	b570      	push	{r4, r5, r6, lr}
   8caca:	460c      	mov	r4, r1
   8cacc:	4603      	mov	r3, r0
   8cace:	2600      	movs	r6, #0
   8cad0:	4d07      	ldr	r5, [pc, #28]	; (8caf0 <_kill_r+0x28>)
   8cad2:	4620      	mov	r0, r4
   8cad4:	4611      	mov	r1, r2
   8cad6:	461c      	mov	r4, r3
   8cad8:	602e      	str	r6, [r5, #0]
   8cada:	f7f6 fb89 	bl	831f0 <_kill>
   8cade:	1c43      	adds	r3, r0, #1
   8cae0:	d000      	beq.n	8cae4 <_kill_r+0x1c>
   8cae2:	bd70      	pop	{r4, r5, r6, pc}
   8cae4:	682b      	ldr	r3, [r5, #0]
   8cae6:	2b00      	cmp	r3, #0
   8cae8:	d0fb      	beq.n	8cae2 <_kill_r+0x1a>
   8caea:	6023      	str	r3, [r4, #0]
   8caec:	bd70      	pop	{r4, r5, r6, pc}
   8caee:	bf00      	nop
   8caf0:	2000186c 	.word	0x2000186c

0008caf4 <_getpid_r>:
   8caf4:	f7f6 bb86 	b.w	83204 <_getpid>

0008caf8 <__aeabi_drsub>:
   8caf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8cafc:	e002      	b.n	8cb04 <__adddf3>
   8cafe:	bf00      	nop

0008cb00 <__aeabi_dsub>:
   8cb00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008cb04 <__adddf3>:
   8cb04:	b530      	push	{r4, r5, lr}
   8cb06:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8cb0a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8cb0e:	ea94 0f05 	teq	r4, r5
   8cb12:	bf08      	it	eq
   8cb14:	ea90 0f02 	teqeq	r0, r2
   8cb18:	bf1f      	itttt	ne
   8cb1a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8cb1e:	ea55 0c02 	orrsne.w	ip, r5, r2
   8cb22:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8cb26:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8cb2a:	f000 80e2 	beq.w	8ccf2 <__adddf3+0x1ee>
   8cb2e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8cb32:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8cb36:	bfb8      	it	lt
   8cb38:	426d      	neglt	r5, r5
   8cb3a:	dd0c      	ble.n	8cb56 <__adddf3+0x52>
   8cb3c:	442c      	add	r4, r5
   8cb3e:	ea80 0202 	eor.w	r2, r0, r2
   8cb42:	ea81 0303 	eor.w	r3, r1, r3
   8cb46:	ea82 0000 	eor.w	r0, r2, r0
   8cb4a:	ea83 0101 	eor.w	r1, r3, r1
   8cb4e:	ea80 0202 	eor.w	r2, r0, r2
   8cb52:	ea81 0303 	eor.w	r3, r1, r3
   8cb56:	2d36      	cmp	r5, #54	; 0x36
   8cb58:	bf88      	it	hi
   8cb5a:	bd30      	pophi	{r4, r5, pc}
   8cb5c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8cb60:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8cb64:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8cb68:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8cb6c:	d002      	beq.n	8cb74 <__adddf3+0x70>
   8cb6e:	4240      	negs	r0, r0
   8cb70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8cb74:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8cb78:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8cb7c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8cb80:	d002      	beq.n	8cb88 <__adddf3+0x84>
   8cb82:	4252      	negs	r2, r2
   8cb84:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8cb88:	ea94 0f05 	teq	r4, r5
   8cb8c:	f000 80a7 	beq.w	8ccde <__adddf3+0x1da>
   8cb90:	f1a4 0401 	sub.w	r4, r4, #1
   8cb94:	f1d5 0e20 	rsbs	lr, r5, #32
   8cb98:	db0d      	blt.n	8cbb6 <__adddf3+0xb2>
   8cb9a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8cb9e:	fa22 f205 	lsr.w	r2, r2, r5
   8cba2:	1880      	adds	r0, r0, r2
   8cba4:	f141 0100 	adc.w	r1, r1, #0
   8cba8:	fa03 f20e 	lsl.w	r2, r3, lr
   8cbac:	1880      	adds	r0, r0, r2
   8cbae:	fa43 f305 	asr.w	r3, r3, r5
   8cbb2:	4159      	adcs	r1, r3
   8cbb4:	e00e      	b.n	8cbd4 <__adddf3+0xd0>
   8cbb6:	f1a5 0520 	sub.w	r5, r5, #32
   8cbba:	f10e 0e20 	add.w	lr, lr, #32
   8cbbe:	2a01      	cmp	r2, #1
   8cbc0:	fa03 fc0e 	lsl.w	ip, r3, lr
   8cbc4:	bf28      	it	cs
   8cbc6:	f04c 0c02 	orrcs.w	ip, ip, #2
   8cbca:	fa43 f305 	asr.w	r3, r3, r5
   8cbce:	18c0      	adds	r0, r0, r3
   8cbd0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8cbd4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8cbd8:	d507      	bpl.n	8cbea <__adddf3+0xe6>
   8cbda:	f04f 0e00 	mov.w	lr, #0
   8cbde:	f1dc 0c00 	rsbs	ip, ip, #0
   8cbe2:	eb7e 0000 	sbcs.w	r0, lr, r0
   8cbe6:	eb6e 0101 	sbc.w	r1, lr, r1
   8cbea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8cbee:	d31b      	bcc.n	8cc28 <__adddf3+0x124>
   8cbf0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8cbf4:	d30c      	bcc.n	8cc10 <__adddf3+0x10c>
   8cbf6:	0849      	lsrs	r1, r1, #1
   8cbf8:	ea5f 0030 	movs.w	r0, r0, rrx
   8cbfc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8cc00:	f104 0401 	add.w	r4, r4, #1
   8cc04:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8cc08:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8cc0c:	f080 809a 	bcs.w	8cd44 <__adddf3+0x240>
   8cc10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8cc14:	bf08      	it	eq
   8cc16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8cc1a:	f150 0000 	adcs.w	r0, r0, #0
   8cc1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8cc22:	ea41 0105 	orr.w	r1, r1, r5
   8cc26:	bd30      	pop	{r4, r5, pc}
   8cc28:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8cc2c:	4140      	adcs	r0, r0
   8cc2e:	eb41 0101 	adc.w	r1, r1, r1
   8cc32:	3c01      	subs	r4, #1
   8cc34:	bf28      	it	cs
   8cc36:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8cc3a:	d2e9      	bcs.n	8cc10 <__adddf3+0x10c>
   8cc3c:	f091 0f00 	teq	r1, #0
   8cc40:	bf04      	itt	eq
   8cc42:	4601      	moveq	r1, r0
   8cc44:	2000      	moveq	r0, #0
   8cc46:	fab1 f381 	clz	r3, r1
   8cc4a:	bf08      	it	eq
   8cc4c:	3320      	addeq	r3, #32
   8cc4e:	f1a3 030b 	sub.w	r3, r3, #11
   8cc52:	f1b3 0220 	subs.w	r2, r3, #32
   8cc56:	da0c      	bge.n	8cc72 <__adddf3+0x16e>
   8cc58:	320c      	adds	r2, #12
   8cc5a:	dd08      	ble.n	8cc6e <__adddf3+0x16a>
   8cc5c:	f102 0c14 	add.w	ip, r2, #20
   8cc60:	f1c2 020c 	rsb	r2, r2, #12
   8cc64:	fa01 f00c 	lsl.w	r0, r1, ip
   8cc68:	fa21 f102 	lsr.w	r1, r1, r2
   8cc6c:	e00c      	b.n	8cc88 <__adddf3+0x184>
   8cc6e:	f102 0214 	add.w	r2, r2, #20
   8cc72:	bfd8      	it	le
   8cc74:	f1c2 0c20 	rsble	ip, r2, #32
   8cc78:	fa01 f102 	lsl.w	r1, r1, r2
   8cc7c:	fa20 fc0c 	lsr.w	ip, r0, ip
   8cc80:	bfdc      	itt	le
   8cc82:	ea41 010c 	orrle.w	r1, r1, ip
   8cc86:	4090      	lslle	r0, r2
   8cc88:	1ae4      	subs	r4, r4, r3
   8cc8a:	bfa2      	ittt	ge
   8cc8c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8cc90:	4329      	orrge	r1, r5
   8cc92:	bd30      	popge	{r4, r5, pc}
   8cc94:	ea6f 0404 	mvn.w	r4, r4
   8cc98:	3c1f      	subs	r4, #31
   8cc9a:	da1c      	bge.n	8ccd6 <__adddf3+0x1d2>
   8cc9c:	340c      	adds	r4, #12
   8cc9e:	dc0e      	bgt.n	8ccbe <__adddf3+0x1ba>
   8cca0:	f104 0414 	add.w	r4, r4, #20
   8cca4:	f1c4 0220 	rsb	r2, r4, #32
   8cca8:	fa20 f004 	lsr.w	r0, r0, r4
   8ccac:	fa01 f302 	lsl.w	r3, r1, r2
   8ccb0:	ea40 0003 	orr.w	r0, r0, r3
   8ccb4:	fa21 f304 	lsr.w	r3, r1, r4
   8ccb8:	ea45 0103 	orr.w	r1, r5, r3
   8ccbc:	bd30      	pop	{r4, r5, pc}
   8ccbe:	f1c4 040c 	rsb	r4, r4, #12
   8ccc2:	f1c4 0220 	rsb	r2, r4, #32
   8ccc6:	fa20 f002 	lsr.w	r0, r0, r2
   8ccca:	fa01 f304 	lsl.w	r3, r1, r4
   8ccce:	ea40 0003 	orr.w	r0, r0, r3
   8ccd2:	4629      	mov	r1, r5
   8ccd4:	bd30      	pop	{r4, r5, pc}
   8ccd6:	fa21 f004 	lsr.w	r0, r1, r4
   8ccda:	4629      	mov	r1, r5
   8ccdc:	bd30      	pop	{r4, r5, pc}
   8ccde:	f094 0f00 	teq	r4, #0
   8cce2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8cce6:	bf06      	itte	eq
   8cce8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8ccec:	3401      	addeq	r4, #1
   8ccee:	3d01      	subne	r5, #1
   8ccf0:	e74e      	b.n	8cb90 <__adddf3+0x8c>
   8ccf2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8ccf6:	bf18      	it	ne
   8ccf8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8ccfc:	d029      	beq.n	8cd52 <__adddf3+0x24e>
   8ccfe:	ea94 0f05 	teq	r4, r5
   8cd02:	bf08      	it	eq
   8cd04:	ea90 0f02 	teqeq	r0, r2
   8cd08:	d005      	beq.n	8cd16 <__adddf3+0x212>
   8cd0a:	ea54 0c00 	orrs.w	ip, r4, r0
   8cd0e:	bf04      	itt	eq
   8cd10:	4619      	moveq	r1, r3
   8cd12:	4610      	moveq	r0, r2
   8cd14:	bd30      	pop	{r4, r5, pc}
   8cd16:	ea91 0f03 	teq	r1, r3
   8cd1a:	bf1e      	ittt	ne
   8cd1c:	2100      	movne	r1, #0
   8cd1e:	2000      	movne	r0, #0
   8cd20:	bd30      	popne	{r4, r5, pc}
   8cd22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8cd26:	d105      	bne.n	8cd34 <__adddf3+0x230>
   8cd28:	0040      	lsls	r0, r0, #1
   8cd2a:	4149      	adcs	r1, r1
   8cd2c:	bf28      	it	cs
   8cd2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8cd32:	bd30      	pop	{r4, r5, pc}
   8cd34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8cd38:	bf3c      	itt	cc
   8cd3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8cd3e:	bd30      	popcc	{r4, r5, pc}
   8cd40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8cd44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8cd48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8cd4c:	f04f 0000 	mov.w	r0, #0
   8cd50:	bd30      	pop	{r4, r5, pc}
   8cd52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8cd56:	bf1a      	itte	ne
   8cd58:	4619      	movne	r1, r3
   8cd5a:	4610      	movne	r0, r2
   8cd5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8cd60:	bf1c      	itt	ne
   8cd62:	460b      	movne	r3, r1
   8cd64:	4602      	movne	r2, r0
   8cd66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8cd6a:	bf06      	itte	eq
   8cd6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8cd70:	ea91 0f03 	teqeq	r1, r3
   8cd74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8cd78:	bd30      	pop	{r4, r5, pc}
   8cd7a:	bf00      	nop

0008cd7c <__aeabi_ui2d>:
   8cd7c:	f090 0f00 	teq	r0, #0
   8cd80:	bf04      	itt	eq
   8cd82:	2100      	moveq	r1, #0
   8cd84:	4770      	bxeq	lr
   8cd86:	b530      	push	{r4, r5, lr}
   8cd88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8cd8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8cd90:	f04f 0500 	mov.w	r5, #0
   8cd94:	f04f 0100 	mov.w	r1, #0
   8cd98:	e750      	b.n	8cc3c <__adddf3+0x138>
   8cd9a:	bf00      	nop

0008cd9c <__aeabi_i2d>:
   8cd9c:	f090 0f00 	teq	r0, #0
   8cda0:	bf04      	itt	eq
   8cda2:	2100      	moveq	r1, #0
   8cda4:	4770      	bxeq	lr
   8cda6:	b530      	push	{r4, r5, lr}
   8cda8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8cdac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8cdb0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8cdb4:	bf48      	it	mi
   8cdb6:	4240      	negmi	r0, r0
   8cdb8:	f04f 0100 	mov.w	r1, #0
   8cdbc:	e73e      	b.n	8cc3c <__adddf3+0x138>
   8cdbe:	bf00      	nop

0008cdc0 <__aeabi_f2d>:
   8cdc0:	0042      	lsls	r2, r0, #1
   8cdc2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8cdc6:	ea4f 0131 	mov.w	r1, r1, rrx
   8cdca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8cdce:	bf1f      	itttt	ne
   8cdd0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8cdd4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8cdd8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8cddc:	4770      	bxne	lr
   8cdde:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8cde2:	bf08      	it	eq
   8cde4:	4770      	bxeq	lr
   8cde6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8cdea:	bf04      	itt	eq
   8cdec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8cdf0:	4770      	bxeq	lr
   8cdf2:	b530      	push	{r4, r5, lr}
   8cdf4:	f44f 7460 	mov.w	r4, #896	; 0x380
   8cdf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8cdfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8ce00:	e71c      	b.n	8cc3c <__adddf3+0x138>
   8ce02:	bf00      	nop

0008ce04 <__aeabi_ul2d>:
   8ce04:	ea50 0201 	orrs.w	r2, r0, r1
   8ce08:	bf08      	it	eq
   8ce0a:	4770      	bxeq	lr
   8ce0c:	b530      	push	{r4, r5, lr}
   8ce0e:	f04f 0500 	mov.w	r5, #0
   8ce12:	e00a      	b.n	8ce2a <__aeabi_l2d+0x16>

0008ce14 <__aeabi_l2d>:
   8ce14:	ea50 0201 	orrs.w	r2, r0, r1
   8ce18:	bf08      	it	eq
   8ce1a:	4770      	bxeq	lr
   8ce1c:	b530      	push	{r4, r5, lr}
   8ce1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8ce22:	d502      	bpl.n	8ce2a <__aeabi_l2d+0x16>
   8ce24:	4240      	negs	r0, r0
   8ce26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8ce2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8ce2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8ce32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8ce36:	f43f aed8 	beq.w	8cbea <__adddf3+0xe6>
   8ce3a:	f04f 0203 	mov.w	r2, #3
   8ce3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8ce42:	bf18      	it	ne
   8ce44:	3203      	addne	r2, #3
   8ce46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8ce4a:	bf18      	it	ne
   8ce4c:	3203      	addne	r2, #3
   8ce4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8ce52:	f1c2 0320 	rsb	r3, r2, #32
   8ce56:	fa00 fc03 	lsl.w	ip, r0, r3
   8ce5a:	fa20 f002 	lsr.w	r0, r0, r2
   8ce5e:	fa01 fe03 	lsl.w	lr, r1, r3
   8ce62:	ea40 000e 	orr.w	r0, r0, lr
   8ce66:	fa21 f102 	lsr.w	r1, r1, r2
   8ce6a:	4414      	add	r4, r2
   8ce6c:	e6bd      	b.n	8cbea <__adddf3+0xe6>
   8ce6e:	bf00      	nop

0008ce70 <__aeabi_dmul>:
   8ce70:	b570      	push	{r4, r5, r6, lr}
   8ce72:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8ce76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8ce7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8ce7e:	bf1d      	ittte	ne
   8ce80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8ce84:	ea94 0f0c 	teqne	r4, ip
   8ce88:	ea95 0f0c 	teqne	r5, ip
   8ce8c:	f000 f8de 	bleq	8d04c <__aeabi_dmul+0x1dc>
   8ce90:	442c      	add	r4, r5
   8ce92:	ea81 0603 	eor.w	r6, r1, r3
   8ce96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8ce9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8ce9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8cea2:	bf18      	it	ne
   8cea4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8cea8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8ceac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8ceb0:	d038      	beq.n	8cf24 <__aeabi_dmul+0xb4>
   8ceb2:	fba0 ce02 	umull	ip, lr, r0, r2
   8ceb6:	f04f 0500 	mov.w	r5, #0
   8ceba:	fbe1 e502 	umlal	lr, r5, r1, r2
   8cebe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8cec2:	fbe0 e503 	umlal	lr, r5, r0, r3
   8cec6:	f04f 0600 	mov.w	r6, #0
   8ceca:	fbe1 5603 	umlal	r5, r6, r1, r3
   8cece:	f09c 0f00 	teq	ip, #0
   8ced2:	bf18      	it	ne
   8ced4:	f04e 0e01 	orrne.w	lr, lr, #1
   8ced8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8cedc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8cee0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8cee4:	d204      	bcs.n	8cef0 <__aeabi_dmul+0x80>
   8cee6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8ceea:	416d      	adcs	r5, r5
   8ceec:	eb46 0606 	adc.w	r6, r6, r6
   8cef0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8cef4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8cef8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8cefc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8cf00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8cf04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8cf08:	bf88      	it	hi
   8cf0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8cf0e:	d81e      	bhi.n	8cf4e <__aeabi_dmul+0xde>
   8cf10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8cf14:	bf08      	it	eq
   8cf16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8cf1a:	f150 0000 	adcs.w	r0, r0, #0
   8cf1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8cf22:	bd70      	pop	{r4, r5, r6, pc}
   8cf24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8cf28:	ea46 0101 	orr.w	r1, r6, r1
   8cf2c:	ea40 0002 	orr.w	r0, r0, r2
   8cf30:	ea81 0103 	eor.w	r1, r1, r3
   8cf34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8cf38:	bfc2      	ittt	gt
   8cf3a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8cf3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8cf42:	bd70      	popgt	{r4, r5, r6, pc}
   8cf44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8cf48:	f04f 0e00 	mov.w	lr, #0
   8cf4c:	3c01      	subs	r4, #1
   8cf4e:	f300 80ab 	bgt.w	8d0a8 <__aeabi_dmul+0x238>
   8cf52:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8cf56:	bfde      	ittt	le
   8cf58:	2000      	movle	r0, #0
   8cf5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8cf5e:	bd70      	pople	{r4, r5, r6, pc}
   8cf60:	f1c4 0400 	rsb	r4, r4, #0
   8cf64:	3c20      	subs	r4, #32
   8cf66:	da35      	bge.n	8cfd4 <__aeabi_dmul+0x164>
   8cf68:	340c      	adds	r4, #12
   8cf6a:	dc1b      	bgt.n	8cfa4 <__aeabi_dmul+0x134>
   8cf6c:	f104 0414 	add.w	r4, r4, #20
   8cf70:	f1c4 0520 	rsb	r5, r4, #32
   8cf74:	fa00 f305 	lsl.w	r3, r0, r5
   8cf78:	fa20 f004 	lsr.w	r0, r0, r4
   8cf7c:	fa01 f205 	lsl.w	r2, r1, r5
   8cf80:	ea40 0002 	orr.w	r0, r0, r2
   8cf84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8cf88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8cf8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8cf90:	fa21 f604 	lsr.w	r6, r1, r4
   8cf94:	eb42 0106 	adc.w	r1, r2, r6
   8cf98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8cf9c:	bf08      	it	eq
   8cf9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8cfa2:	bd70      	pop	{r4, r5, r6, pc}
   8cfa4:	f1c4 040c 	rsb	r4, r4, #12
   8cfa8:	f1c4 0520 	rsb	r5, r4, #32
   8cfac:	fa00 f304 	lsl.w	r3, r0, r4
   8cfb0:	fa20 f005 	lsr.w	r0, r0, r5
   8cfb4:	fa01 f204 	lsl.w	r2, r1, r4
   8cfb8:	ea40 0002 	orr.w	r0, r0, r2
   8cfbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cfc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8cfc4:	f141 0100 	adc.w	r1, r1, #0
   8cfc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8cfcc:	bf08      	it	eq
   8cfce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8cfd2:	bd70      	pop	{r4, r5, r6, pc}
   8cfd4:	f1c4 0520 	rsb	r5, r4, #32
   8cfd8:	fa00 f205 	lsl.w	r2, r0, r5
   8cfdc:	ea4e 0e02 	orr.w	lr, lr, r2
   8cfe0:	fa20 f304 	lsr.w	r3, r0, r4
   8cfe4:	fa01 f205 	lsl.w	r2, r1, r5
   8cfe8:	ea43 0302 	orr.w	r3, r3, r2
   8cfec:	fa21 f004 	lsr.w	r0, r1, r4
   8cff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cff4:	fa21 f204 	lsr.w	r2, r1, r4
   8cff8:	ea20 0002 	bic.w	r0, r0, r2
   8cffc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8d000:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d004:	bf08      	it	eq
   8d006:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d00a:	bd70      	pop	{r4, r5, r6, pc}
   8d00c:	f094 0f00 	teq	r4, #0
   8d010:	d10f      	bne.n	8d032 <__aeabi_dmul+0x1c2>
   8d012:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8d016:	0040      	lsls	r0, r0, #1
   8d018:	eb41 0101 	adc.w	r1, r1, r1
   8d01c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d020:	bf08      	it	eq
   8d022:	3c01      	subeq	r4, #1
   8d024:	d0f7      	beq.n	8d016 <__aeabi_dmul+0x1a6>
   8d026:	ea41 0106 	orr.w	r1, r1, r6
   8d02a:	f095 0f00 	teq	r5, #0
   8d02e:	bf18      	it	ne
   8d030:	4770      	bxne	lr
   8d032:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8d036:	0052      	lsls	r2, r2, #1
   8d038:	eb43 0303 	adc.w	r3, r3, r3
   8d03c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8d040:	bf08      	it	eq
   8d042:	3d01      	subeq	r5, #1
   8d044:	d0f7      	beq.n	8d036 <__aeabi_dmul+0x1c6>
   8d046:	ea43 0306 	orr.w	r3, r3, r6
   8d04a:	4770      	bx	lr
   8d04c:	ea94 0f0c 	teq	r4, ip
   8d050:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d054:	bf18      	it	ne
   8d056:	ea95 0f0c 	teqne	r5, ip
   8d05a:	d00c      	beq.n	8d076 <__aeabi_dmul+0x206>
   8d05c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d060:	bf18      	it	ne
   8d062:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d066:	d1d1      	bne.n	8d00c <__aeabi_dmul+0x19c>
   8d068:	ea81 0103 	eor.w	r1, r1, r3
   8d06c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d070:	f04f 0000 	mov.w	r0, #0
   8d074:	bd70      	pop	{r4, r5, r6, pc}
   8d076:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d07a:	bf06      	itte	eq
   8d07c:	4610      	moveq	r0, r2
   8d07e:	4619      	moveq	r1, r3
   8d080:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d084:	d019      	beq.n	8d0ba <__aeabi_dmul+0x24a>
   8d086:	ea94 0f0c 	teq	r4, ip
   8d08a:	d102      	bne.n	8d092 <__aeabi_dmul+0x222>
   8d08c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8d090:	d113      	bne.n	8d0ba <__aeabi_dmul+0x24a>
   8d092:	ea95 0f0c 	teq	r5, ip
   8d096:	d105      	bne.n	8d0a4 <__aeabi_dmul+0x234>
   8d098:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8d09c:	bf1c      	itt	ne
   8d09e:	4610      	movne	r0, r2
   8d0a0:	4619      	movne	r1, r3
   8d0a2:	d10a      	bne.n	8d0ba <__aeabi_dmul+0x24a>
   8d0a4:	ea81 0103 	eor.w	r1, r1, r3
   8d0a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d0ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d0b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d0b4:	f04f 0000 	mov.w	r0, #0
   8d0b8:	bd70      	pop	{r4, r5, r6, pc}
   8d0ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d0be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8d0c2:	bd70      	pop	{r4, r5, r6, pc}

0008d0c4 <__aeabi_ddiv>:
   8d0c4:	b570      	push	{r4, r5, r6, lr}
   8d0c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d0ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d0ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d0d2:	bf1d      	ittte	ne
   8d0d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d0d8:	ea94 0f0c 	teqne	r4, ip
   8d0dc:	ea95 0f0c 	teqne	r5, ip
   8d0e0:	f000 f8a7 	bleq	8d232 <__aeabi_ddiv+0x16e>
   8d0e4:	eba4 0405 	sub.w	r4, r4, r5
   8d0e8:	ea81 0e03 	eor.w	lr, r1, r3
   8d0ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d0f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d0f4:	f000 8088 	beq.w	8d208 <__aeabi_ddiv+0x144>
   8d0f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d0fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8d100:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8d104:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8d108:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8d10c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8d110:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8d114:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8d118:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8d11c:	429d      	cmp	r5, r3
   8d11e:	bf08      	it	eq
   8d120:	4296      	cmpeq	r6, r2
   8d122:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8d126:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8d12a:	d202      	bcs.n	8d132 <__aeabi_ddiv+0x6e>
   8d12c:	085b      	lsrs	r3, r3, #1
   8d12e:	ea4f 0232 	mov.w	r2, r2, rrx
   8d132:	1ab6      	subs	r6, r6, r2
   8d134:	eb65 0503 	sbc.w	r5, r5, r3
   8d138:	085b      	lsrs	r3, r3, #1
   8d13a:	ea4f 0232 	mov.w	r2, r2, rrx
   8d13e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8d142:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8d146:	ebb6 0e02 	subs.w	lr, r6, r2
   8d14a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d14e:	bf22      	ittt	cs
   8d150:	1ab6      	subcs	r6, r6, r2
   8d152:	4675      	movcs	r5, lr
   8d154:	ea40 000c 	orrcs.w	r0, r0, ip
   8d158:	085b      	lsrs	r3, r3, #1
   8d15a:	ea4f 0232 	mov.w	r2, r2, rrx
   8d15e:	ebb6 0e02 	subs.w	lr, r6, r2
   8d162:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d166:	bf22      	ittt	cs
   8d168:	1ab6      	subcs	r6, r6, r2
   8d16a:	4675      	movcs	r5, lr
   8d16c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8d170:	085b      	lsrs	r3, r3, #1
   8d172:	ea4f 0232 	mov.w	r2, r2, rrx
   8d176:	ebb6 0e02 	subs.w	lr, r6, r2
   8d17a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d17e:	bf22      	ittt	cs
   8d180:	1ab6      	subcs	r6, r6, r2
   8d182:	4675      	movcs	r5, lr
   8d184:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8d188:	085b      	lsrs	r3, r3, #1
   8d18a:	ea4f 0232 	mov.w	r2, r2, rrx
   8d18e:	ebb6 0e02 	subs.w	lr, r6, r2
   8d192:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d196:	bf22      	ittt	cs
   8d198:	1ab6      	subcs	r6, r6, r2
   8d19a:	4675      	movcs	r5, lr
   8d19c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8d1a0:	ea55 0e06 	orrs.w	lr, r5, r6
   8d1a4:	d018      	beq.n	8d1d8 <__aeabi_ddiv+0x114>
   8d1a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8d1aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8d1ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8d1b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8d1b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8d1ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8d1be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8d1c2:	d1c0      	bne.n	8d146 <__aeabi_ddiv+0x82>
   8d1c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d1c8:	d10b      	bne.n	8d1e2 <__aeabi_ddiv+0x11e>
   8d1ca:	ea41 0100 	orr.w	r1, r1, r0
   8d1ce:	f04f 0000 	mov.w	r0, #0
   8d1d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8d1d6:	e7b6      	b.n	8d146 <__aeabi_ddiv+0x82>
   8d1d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d1dc:	bf04      	itt	eq
   8d1de:	4301      	orreq	r1, r0
   8d1e0:	2000      	moveq	r0, #0
   8d1e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d1e6:	bf88      	it	hi
   8d1e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d1ec:	f63f aeaf 	bhi.w	8cf4e <__aeabi_dmul+0xde>
   8d1f0:	ebb5 0c03 	subs.w	ip, r5, r3
   8d1f4:	bf04      	itt	eq
   8d1f6:	ebb6 0c02 	subseq.w	ip, r6, r2
   8d1fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d1fe:	f150 0000 	adcs.w	r0, r0, #0
   8d202:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d206:	bd70      	pop	{r4, r5, r6, pc}
   8d208:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8d20c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8d210:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8d214:	bfc2      	ittt	gt
   8d216:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d21a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d21e:	bd70      	popgt	{r4, r5, r6, pc}
   8d220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d224:	f04f 0e00 	mov.w	lr, #0
   8d228:	3c01      	subs	r4, #1
   8d22a:	e690      	b.n	8cf4e <__aeabi_dmul+0xde>
   8d22c:	ea45 0e06 	orr.w	lr, r5, r6
   8d230:	e68d      	b.n	8cf4e <__aeabi_dmul+0xde>
   8d232:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d236:	ea94 0f0c 	teq	r4, ip
   8d23a:	bf08      	it	eq
   8d23c:	ea95 0f0c 	teqeq	r5, ip
   8d240:	f43f af3b 	beq.w	8d0ba <__aeabi_dmul+0x24a>
   8d244:	ea94 0f0c 	teq	r4, ip
   8d248:	d10a      	bne.n	8d260 <__aeabi_ddiv+0x19c>
   8d24a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d24e:	f47f af34 	bne.w	8d0ba <__aeabi_dmul+0x24a>
   8d252:	ea95 0f0c 	teq	r5, ip
   8d256:	f47f af25 	bne.w	8d0a4 <__aeabi_dmul+0x234>
   8d25a:	4610      	mov	r0, r2
   8d25c:	4619      	mov	r1, r3
   8d25e:	e72c      	b.n	8d0ba <__aeabi_dmul+0x24a>
   8d260:	ea95 0f0c 	teq	r5, ip
   8d264:	d106      	bne.n	8d274 <__aeabi_ddiv+0x1b0>
   8d266:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d26a:	f43f aefd 	beq.w	8d068 <__aeabi_dmul+0x1f8>
   8d26e:	4610      	mov	r0, r2
   8d270:	4619      	mov	r1, r3
   8d272:	e722      	b.n	8d0ba <__aeabi_dmul+0x24a>
   8d274:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d278:	bf18      	it	ne
   8d27a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d27e:	f47f aec5 	bne.w	8d00c <__aeabi_dmul+0x19c>
   8d282:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8d286:	f47f af0d 	bne.w	8d0a4 <__aeabi_dmul+0x234>
   8d28a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8d28e:	f47f aeeb 	bne.w	8d068 <__aeabi_dmul+0x1f8>
   8d292:	e712      	b.n	8d0ba <__aeabi_dmul+0x24a>

0008d294 <__gedf2>:
   8d294:	f04f 3cff 	mov.w	ip, #4294967295
   8d298:	e006      	b.n	8d2a8 <__cmpdf2+0x4>
   8d29a:	bf00      	nop

0008d29c <__ledf2>:
   8d29c:	f04f 0c01 	mov.w	ip, #1
   8d2a0:	e002      	b.n	8d2a8 <__cmpdf2+0x4>
   8d2a2:	bf00      	nop

0008d2a4 <__cmpdf2>:
   8d2a4:	f04f 0c01 	mov.w	ip, #1
   8d2a8:	f84d cd04 	str.w	ip, [sp, #-4]!
   8d2ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d2b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d2b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d2b8:	bf18      	it	ne
   8d2ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8d2be:	d01b      	beq.n	8d2f8 <__cmpdf2+0x54>
   8d2c0:	b001      	add	sp, #4
   8d2c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8d2c6:	bf0c      	ite	eq
   8d2c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8d2cc:	ea91 0f03 	teqne	r1, r3
   8d2d0:	bf02      	ittt	eq
   8d2d2:	ea90 0f02 	teqeq	r0, r2
   8d2d6:	2000      	moveq	r0, #0
   8d2d8:	4770      	bxeq	lr
   8d2da:	f110 0f00 	cmn.w	r0, #0
   8d2de:	ea91 0f03 	teq	r1, r3
   8d2e2:	bf58      	it	pl
   8d2e4:	4299      	cmppl	r1, r3
   8d2e6:	bf08      	it	eq
   8d2e8:	4290      	cmpeq	r0, r2
   8d2ea:	bf2c      	ite	cs
   8d2ec:	17d8      	asrcs	r0, r3, #31
   8d2ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8d2f2:	f040 0001 	orr.w	r0, r0, #1
   8d2f6:	4770      	bx	lr
   8d2f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d2fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d300:	d102      	bne.n	8d308 <__cmpdf2+0x64>
   8d302:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d306:	d107      	bne.n	8d318 <__cmpdf2+0x74>
   8d308:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d30c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d310:	d1d6      	bne.n	8d2c0 <__cmpdf2+0x1c>
   8d312:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d316:	d0d3      	beq.n	8d2c0 <__cmpdf2+0x1c>
   8d318:	f85d 0b04 	ldr.w	r0, [sp], #4
   8d31c:	4770      	bx	lr
   8d31e:	bf00      	nop

0008d320 <__aeabi_cdrcmple>:
   8d320:	4684      	mov	ip, r0
   8d322:	4610      	mov	r0, r2
   8d324:	4662      	mov	r2, ip
   8d326:	468c      	mov	ip, r1
   8d328:	4619      	mov	r1, r3
   8d32a:	4663      	mov	r3, ip
   8d32c:	e000      	b.n	8d330 <__aeabi_cdcmpeq>
   8d32e:	bf00      	nop

0008d330 <__aeabi_cdcmpeq>:
   8d330:	b501      	push	{r0, lr}
   8d332:	f7ff ffb7 	bl	8d2a4 <__cmpdf2>
   8d336:	2800      	cmp	r0, #0
   8d338:	bf48      	it	mi
   8d33a:	f110 0f00 	cmnmi.w	r0, #0
   8d33e:	bd01      	pop	{r0, pc}

0008d340 <__aeabi_dcmpeq>:
   8d340:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d344:	f7ff fff4 	bl	8d330 <__aeabi_cdcmpeq>
   8d348:	bf0c      	ite	eq
   8d34a:	2001      	moveq	r0, #1
   8d34c:	2000      	movne	r0, #0
   8d34e:	f85d fb08 	ldr.w	pc, [sp], #8
   8d352:	bf00      	nop

0008d354 <__aeabi_dcmplt>:
   8d354:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d358:	f7ff ffea 	bl	8d330 <__aeabi_cdcmpeq>
   8d35c:	bf34      	ite	cc
   8d35e:	2001      	movcc	r0, #1
   8d360:	2000      	movcs	r0, #0
   8d362:	f85d fb08 	ldr.w	pc, [sp], #8
   8d366:	bf00      	nop

0008d368 <__aeabi_dcmple>:
   8d368:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d36c:	f7ff ffe0 	bl	8d330 <__aeabi_cdcmpeq>
   8d370:	bf94      	ite	ls
   8d372:	2001      	movls	r0, #1
   8d374:	2000      	movhi	r0, #0
   8d376:	f85d fb08 	ldr.w	pc, [sp], #8
   8d37a:	bf00      	nop

0008d37c <__aeabi_dcmpge>:
   8d37c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d380:	f7ff ffce 	bl	8d320 <__aeabi_cdrcmple>
   8d384:	bf94      	ite	ls
   8d386:	2001      	movls	r0, #1
   8d388:	2000      	movhi	r0, #0
   8d38a:	f85d fb08 	ldr.w	pc, [sp], #8
   8d38e:	bf00      	nop

0008d390 <__aeabi_dcmpgt>:
   8d390:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d394:	f7ff ffc4 	bl	8d320 <__aeabi_cdrcmple>
   8d398:	bf34      	ite	cc
   8d39a:	2001      	movcc	r0, #1
   8d39c:	2000      	movcs	r0, #0
   8d39e:	f85d fb08 	ldr.w	pc, [sp], #8
   8d3a2:	bf00      	nop

0008d3a4 <__aeabi_dcmpun>:
   8d3a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d3a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d3ac:	d102      	bne.n	8d3b4 <__aeabi_dcmpun+0x10>
   8d3ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d3b2:	d10a      	bne.n	8d3ca <__aeabi_dcmpun+0x26>
   8d3b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d3b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d3bc:	d102      	bne.n	8d3c4 <__aeabi_dcmpun+0x20>
   8d3be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d3c2:	d102      	bne.n	8d3ca <__aeabi_dcmpun+0x26>
   8d3c4:	f04f 0000 	mov.w	r0, #0
   8d3c8:	4770      	bx	lr
   8d3ca:	f04f 0001 	mov.w	r0, #1
   8d3ce:	4770      	bx	lr

0008d3d0 <__aeabi_d2iz>:
   8d3d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8d3d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8d3d8:	d215      	bcs.n	8d406 <__aeabi_d2iz+0x36>
   8d3da:	d511      	bpl.n	8d400 <__aeabi_d2iz+0x30>
   8d3dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8d3e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8d3e4:	d912      	bls.n	8d40c <__aeabi_d2iz+0x3c>
   8d3e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8d3ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8d3ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8d3f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d3f6:	fa23 f002 	lsr.w	r0, r3, r2
   8d3fa:	bf18      	it	ne
   8d3fc:	4240      	negne	r0, r0
   8d3fe:	4770      	bx	lr
   8d400:	f04f 0000 	mov.w	r0, #0
   8d404:	4770      	bx	lr
   8d406:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8d40a:	d105      	bne.n	8d418 <__aeabi_d2iz+0x48>
   8d40c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8d410:	bf08      	it	eq
   8d412:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8d416:	4770      	bx	lr
   8d418:	f04f 0000 	mov.w	r0, #0
   8d41c:	4770      	bx	lr
   8d41e:	bf00      	nop
   8d420:	78383025 	.word	0x78383025
   8d424:	00000000 	.word	0x00000000
   8d428:	62616e45 	.word	0x62616e45
   8d42c:	676e696c 	.word	0x676e696c
   8d430:	41535520 	.word	0x41535520
   8d434:	0a305452 	.word	0x0a305452
   8d438:	00000000 	.word	0x00000000
   8d43c:	3a525245 	.word	0x3a525245
   8d440:	766e4920 	.word	0x766e4920
   8d444:	64696c61 	.word	0x64696c61
   8d448:	41535520 	.word	0x41535520
   8d44c:	43205452 	.word	0x43205452
   8d450:	69666e6f 	.word	0x69666e6f
   8d454:	61727567 	.word	0x61727567
   8d458:	6e6f6974 	.word	0x6e6f6974
   8d45c:	63617020 	.word	0x63617020
   8d460:	3f74656b 	.word	0x3f74656b
   8d464:	0000000a 	.word	0x0000000a
   8d468:	74697845 	.word	0x74697845
   8d46c:	20676e69 	.word	0x20676e69
   8d470:	68746977 	.word	0x68746977
   8d474:	61747320 	.word	0x61747320
   8d478:	20737574 	.word	0x20737574
   8d47c:	0a2e6425 	.word	0x0a2e6425
   8d480:	00000000 	.word	0x00000000

0008d484 <BOS_DESC>:
   8d484:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8d494:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
   8d4a4:	00000000 00000000 00000000 aaaaaa00     ................
   8d4b4:	aaaaaaaa eeeeeeaa eeeeeeee fffffeee     ................
   8d4c4:	ffffffff ffffffff dfbf7fff fdfbf7ef     ................
   8d4d4:	dfbf7efc fdfbf7ef 0000007e              .~......~...

0008d4e0 <_global_impure_ptr>:
   8d4e0:	20000448 00464e49 00666e69 004e414e     H.. INF.inf.NAN.
   8d4f0:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8d500:	66656463 00000000 33323130 37363534     cdef....01234567
   8d510:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8d520:	0000296c 00000030                       l)..0...

0008d528 <blanks.7335>:
   8d528:	20202020 20202020 20202020 20202020                     

0008d538 <zeroes.7336>:
   8d538:	30303030 30303030 30303030 30303030     0000000000000000

0008d548 <blanks.7328>:
   8d548:	20202020 20202020 20202020 20202020                     

0008d558 <zeroes.7329>:
   8d558:	30303030 30303030 30303030 30303030     0000000000000000
   8d568:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8d578:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8d588:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8d598:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8d5a8:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8d5b8:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8d5c8:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8d5d8:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8d5e8:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8d5f8:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8d608:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8d618:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8d628:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8d638:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8d648:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8d658:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8d668:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8d678:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8d688:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....

0008d698 <__mprec_bigtens>:
   8d698:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8d6a8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8d6b8:	7f73bf3c 75154fdd                       <.s..O.u

0008d6c0 <__mprec_tens>:
   8d6c0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8d6d0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8d6e0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8d6f0:	00000000 412e8480 00000000 416312d0     .......A......cA
   8d700:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8d710:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8d720:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8d730:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8d740:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8d750:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8d760:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8d770:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8d780:	79d99db4 44ea7843                       ...yCx.D

0008d788 <p05.6122>:
   8d788:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8d798:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8d7a8:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8d7b8:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8d7c8:	2520656e 25732564 00000a73              ne %d%s%s...

0008d7d4 <_ctype_>:
   8d7d4:	20202000 20202020 28282020 20282828     .         ((((( 
   8d7e4:	20202020 20202020 20202020 20202020                     
   8d7f4:	10108820 10101010 10101010 10101010      ...............
   8d804:	04040410 04040404 10040404 10101010     ................
   8d814:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8d824:	01010101 01010101 01010101 10101010     ................
   8d834:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8d844:	02020202 02020202 02020202 10101010     ................
   8d854:	00000020 00000000 00000000 00000000      ...............
   8d864:	00000000 00000000 00000000 00000000     ................
   8d874:	00000000 00000000 00000000 00000000     ................
   8d884:	00000000 00000000 00000000 00000000     ................
   8d894:	00000000 00000000 00000000 00000000     ................
   8d8a4:	00000000 00000000 00000000 00000000     ................
   8d8b4:	00000000 00000000 00000000 00000000     ................
   8d8c4:	00000000 00000000 00000000 00000000     ................
   8d8d4:	00000000                                ....

0008d8d8 <_init>:
   8d8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d8da:	bf00      	nop
   8d8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d8de:	bc08      	pop	{r3}
   8d8e0:	469e      	mov	lr, r3
   8d8e2:	4770      	bx	lr

0008d8e4 <__init_array_start>:
   8d8e4:	00089701 	.word	0x00089701

0008d8e8 <__frame_dummy_init_array_entry>:
   8d8e8:	000800e1                                ....

0008d8ec <_fini>:
   8d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d8ee:	bf00      	nop
   8d8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d8f2:	bc08      	pop	{r3}
   8d8f4:	469e      	mov	lr, r3
   8d8f6:	4770      	bx	lr

0008d8f8 <__do_global_dtors_aux_fini_array_entry>:
   8d8f8:	00bd 0008                                   ....
=======
   864a0:	b580      	push	{r7, lr}
   864a2:	b086      	sub	sp, #24
   864a4:	af00      	add	r7, sp, #0
   864a6:	60f8      	str	r0, [r7, #12]
   864a8:	60b9      	str	r1, [r7, #8]
   864aa:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   864ac:	2300      	movs	r3, #0
   864ae:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   864b0:	68fb      	ldr	r3, [r7, #12]
   864b2:	2b00      	cmp	r3, #0
   864b4:	d012      	beq.n	864dc <_read+0x3c>
		return -1;
   864b6:	f04f 33ff 	mov.w	r3, #4294967295
   864ba:	e013      	b.n	864e4 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   864bc:	4b0b      	ldr	r3, [pc, #44]	; (864ec <_read+0x4c>)
   864be:	681b      	ldr	r3, [r3, #0]
   864c0:	4a0b      	ldr	r2, [pc, #44]	; (864f0 <_read+0x50>)
   864c2:	6812      	ldr	r2, [r2, #0]
   864c4:	68b9      	ldr	r1, [r7, #8]
   864c6:	4610      	mov	r0, r2
   864c8:	4798      	blx	r3
		ptr++;
   864ca:	68bb      	ldr	r3, [r7, #8]
   864cc:	3301      	adds	r3, #1
   864ce:	60bb      	str	r3, [r7, #8]
		nChars++;
   864d0:	697b      	ldr	r3, [r7, #20]
   864d2:	3301      	adds	r3, #1
   864d4:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   864d6:	687b      	ldr	r3, [r7, #4]
   864d8:	3b01      	subs	r3, #1
   864da:	607b      	str	r3, [r7, #4]
   864dc:	687b      	ldr	r3, [r7, #4]
   864de:	2b00      	cmp	r3, #0
   864e0:	dcec      	bgt.n	864bc <_read+0x1c>
	}
	return nChars;
   864e2:	697b      	ldr	r3, [r7, #20]
}
   864e4:	4618      	mov	r0, r3
   864e6:	3718      	adds	r7, #24
   864e8:	46bd      	mov	sp, r7
   864ea:	bd80      	pop	{r7, pc}
   864ec:	20001830 	.word	0x20001830
   864f0:	2000182c 	.word	0x2000182c

000864f4 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   864f4:	b480      	push	{r7}
   864f6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   864f8:	4b58      	ldr	r3, [pc, #352]	; (8665c <SystemCoreClockUpdate+0x168>)
   864fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   864fc:	f003 0303 	and.w	r3, r3, #3
   86500:	2b03      	cmp	r3, #3
   86502:	f200 808c 	bhi.w	8661e <SystemCoreClockUpdate+0x12a>
   86506:	2b02      	cmp	r3, #2
   86508:	d23f      	bcs.n	8658a <SystemCoreClockUpdate+0x96>
   8650a:	2b00      	cmp	r3, #0
   8650c:	d002      	beq.n	86514 <SystemCoreClockUpdate+0x20>
   8650e:	2b01      	cmp	r3, #1
   86510:	d010      	beq.n	86534 <SystemCoreClockUpdate+0x40>
   86512:	e084      	b.n	8661e <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   86514:	4b52      	ldr	r3, [pc, #328]	; (86660 <SystemCoreClockUpdate+0x16c>)
   86516:	695b      	ldr	r3, [r3, #20]
   86518:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8651c:	2b00      	cmp	r3, #0
   8651e:	d004      	beq.n	8652a <SystemCoreClockUpdate+0x36>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   86520:	4b50      	ldr	r3, [pc, #320]	; (86664 <SystemCoreClockUpdate+0x170>)
   86522:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   86526:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   86528:	e079      	b.n	8661e <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8652a:	4b4e      	ldr	r3, [pc, #312]	; (86664 <SystemCoreClockUpdate+0x170>)
   8652c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   86530:	601a      	str	r2, [r3, #0]
		break;
   86532:	e074      	b.n	8661e <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   86534:	4b49      	ldr	r3, [pc, #292]	; (8665c <SystemCoreClockUpdate+0x168>)
   86536:	6a1b      	ldr	r3, [r3, #32]
   86538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8653c:	2b00      	cmp	r3, #0
   8653e:	d003      	beq.n	86548 <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   86540:	4b48      	ldr	r3, [pc, #288]	; (86664 <SystemCoreClockUpdate+0x170>)
   86542:	4a49      	ldr	r2, [pc, #292]	; (86668 <SystemCoreClockUpdate+0x174>)
   86544:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   86546:	e06a      	b.n	8661e <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   86548:	4b46      	ldr	r3, [pc, #280]	; (86664 <SystemCoreClockUpdate+0x170>)
   8654a:	4a48      	ldr	r2, [pc, #288]	; (8666c <SystemCoreClockUpdate+0x178>)
   8654c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8654e:	4b43      	ldr	r3, [pc, #268]	; (8665c <SystemCoreClockUpdate+0x168>)
   86550:	6a1b      	ldr	r3, [r3, #32]
   86552:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86556:	2b20      	cmp	r3, #32
   86558:	d00b      	beq.n	86572 <SystemCoreClockUpdate+0x7e>
   8655a:	2b20      	cmp	r3, #32
   8655c:	d811      	bhi.n	86582 <SystemCoreClockUpdate+0x8e>
   8655e:	2b00      	cmp	r3, #0
   86560:	d011      	beq.n	86586 <SystemCoreClockUpdate+0x92>
   86562:	2b10      	cmp	r3, #16
   86564:	d10d      	bne.n	86582 <SystemCoreClockUpdate+0x8e>
				SystemCoreClock *= 2U;
   86566:	4b3f      	ldr	r3, [pc, #252]	; (86664 <SystemCoreClockUpdate+0x170>)
   86568:	681b      	ldr	r3, [r3, #0]
   8656a:	005b      	lsls	r3, r3, #1
   8656c:	4a3d      	ldr	r2, [pc, #244]	; (86664 <SystemCoreClockUpdate+0x170>)
   8656e:	6013      	str	r3, [r2, #0]
				break;
   86570:	e00a      	b.n	86588 <SystemCoreClockUpdate+0x94>
				SystemCoreClock *= 3U;
   86572:	4b3c      	ldr	r3, [pc, #240]	; (86664 <SystemCoreClockUpdate+0x170>)
   86574:	681a      	ldr	r2, [r3, #0]
   86576:	4613      	mov	r3, r2
   86578:	005b      	lsls	r3, r3, #1
   8657a:	4413      	add	r3, r2
   8657c:	4a39      	ldr	r2, [pc, #228]	; (86664 <SystemCoreClockUpdate+0x170>)
   8657e:	6013      	str	r3, [r2, #0]
				break;
   86580:	e002      	b.n	86588 <SystemCoreClockUpdate+0x94>
				break;
   86582:	bf00      	nop
   86584:	e04b      	b.n	8661e <SystemCoreClockUpdate+0x12a>
				break;
   86586:	bf00      	nop
		break;
   86588:	e049      	b.n	8661e <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8658a:	4b34      	ldr	r3, [pc, #208]	; (8665c <SystemCoreClockUpdate+0x168>)
   8658c:	6a1b      	ldr	r3, [r3, #32]
   8658e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   86592:	2b00      	cmp	r3, #0
   86594:	d003      	beq.n	8659e <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   86596:	4b33      	ldr	r3, [pc, #204]	; (86664 <SystemCoreClockUpdate+0x170>)
   86598:	4a33      	ldr	r2, [pc, #204]	; (86668 <SystemCoreClockUpdate+0x174>)
   8659a:	601a      	str	r2, [r3, #0]
   8659c:	e01f      	b.n	865de <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8659e:	4b31      	ldr	r3, [pc, #196]	; (86664 <SystemCoreClockUpdate+0x170>)
   865a0:	4a32      	ldr	r2, [pc, #200]	; (8666c <SystemCoreClockUpdate+0x178>)
   865a2:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   865a4:	4b2d      	ldr	r3, [pc, #180]	; (8665c <SystemCoreClockUpdate+0x168>)
   865a6:	6a1b      	ldr	r3, [r3, #32]
   865a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   865ac:	2b20      	cmp	r3, #32
   865ae:	d00b      	beq.n	865c8 <SystemCoreClockUpdate+0xd4>
   865b0:	2b20      	cmp	r3, #32
   865b2:	d811      	bhi.n	865d8 <SystemCoreClockUpdate+0xe4>
   865b4:	2b00      	cmp	r3, #0
   865b6:	d011      	beq.n	865dc <SystemCoreClockUpdate+0xe8>
   865b8:	2b10      	cmp	r3, #16
   865ba:	d10d      	bne.n	865d8 <SystemCoreClockUpdate+0xe4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   865bc:	4b29      	ldr	r3, [pc, #164]	; (86664 <SystemCoreClockUpdate+0x170>)
   865be:	681b      	ldr	r3, [r3, #0]
   865c0:	005b      	lsls	r3, r3, #1
   865c2:	4a28      	ldr	r2, [pc, #160]	; (86664 <SystemCoreClockUpdate+0x170>)
   865c4:	6013      	str	r3, [r2, #0]
				break;
   865c6:	e00a      	b.n	865de <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   865c8:	4b26      	ldr	r3, [pc, #152]	; (86664 <SystemCoreClockUpdate+0x170>)
   865ca:	681a      	ldr	r2, [r3, #0]
   865cc:	4613      	mov	r3, r2
   865ce:	005b      	lsls	r3, r3, #1
   865d0:	4413      	add	r3, r2
   865d2:	4a24      	ldr	r2, [pc, #144]	; (86664 <SystemCoreClockUpdate+0x170>)
   865d4:	6013      	str	r3, [r2, #0]
				break;
   865d6:	e002      	b.n	865de <SystemCoreClockUpdate+0xea>
			default:
				break;
   865d8:	bf00      	nop
   865da:	e000      	b.n	865de <SystemCoreClockUpdate+0xea>
				break;
   865dc:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   865de:	4b1f      	ldr	r3, [pc, #124]	; (8665c <SystemCoreClockUpdate+0x168>)
   865e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   865e2:	f003 0303 	and.w	r3, r3, #3
   865e6:	2b02      	cmp	r3, #2
   865e8:	d115      	bne.n	86616 <SystemCoreClockUpdate+0x122>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   865ea:	4b1c      	ldr	r3, [pc, #112]	; (8665c <SystemCoreClockUpdate+0x168>)
   865ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   865ee:	0c1b      	lsrs	r3, r3, #16
   865f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   865f4:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   865f6:	4a1b      	ldr	r2, [pc, #108]	; (86664 <SystemCoreClockUpdate+0x170>)
   865f8:	6812      	ldr	r2, [r2, #0]
   865fa:	fb02 f303 	mul.w	r3, r2, r3
   865fe:	4a19      	ldr	r2, [pc, #100]	; (86664 <SystemCoreClockUpdate+0x170>)
   86600:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   86602:	4b16      	ldr	r3, [pc, #88]	; (8665c <SystemCoreClockUpdate+0x168>)
   86604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   86606:	b2db      	uxtb	r3, r3
   86608:	4a16      	ldr	r2, [pc, #88]	; (86664 <SystemCoreClockUpdate+0x170>)
   8660a:	6812      	ldr	r2, [r2, #0]
   8660c:	fbb2 f3f3 	udiv	r3, r2, r3
   86610:	4a14      	ldr	r2, [pc, #80]	; (86664 <SystemCoreClockUpdate+0x170>)
   86612:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   86614:	e002      	b.n	8661c <SystemCoreClockUpdate+0x128>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   86616:	4b13      	ldr	r3, [pc, #76]	; (86664 <SystemCoreClockUpdate+0x170>)
   86618:	4a15      	ldr	r2, [pc, #84]	; (86670 <SystemCoreClockUpdate+0x17c>)
   8661a:	601a      	str	r2, [r3, #0]
		break;
   8661c:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8661e:	4b0f      	ldr	r3, [pc, #60]	; (8665c <SystemCoreClockUpdate+0x168>)
   86620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86622:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86626:	2b70      	cmp	r3, #112	; 0x70
   86628:	d108      	bne.n	8663c <SystemCoreClockUpdate+0x148>
		SystemCoreClock /= 3U;
   8662a:	4b0e      	ldr	r3, [pc, #56]	; (86664 <SystemCoreClockUpdate+0x170>)
   8662c:	681b      	ldr	r3, [r3, #0]
   8662e:	4a11      	ldr	r2, [pc, #68]	; (86674 <SystemCoreClockUpdate+0x180>)
   86630:	fba2 2303 	umull	r2, r3, r2, r3
   86634:	085b      	lsrs	r3, r3, #1
   86636:	4a0b      	ldr	r2, [pc, #44]	; (86664 <SystemCoreClockUpdate+0x170>)
   86638:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   8663a:	e00a      	b.n	86652 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8663c:	4b07      	ldr	r3, [pc, #28]	; (8665c <SystemCoreClockUpdate+0x168>)
   8663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86640:	091b      	lsrs	r3, r3, #4
   86642:	f003 0307 	and.w	r3, r3, #7
   86646:	4a07      	ldr	r2, [pc, #28]	; (86664 <SystemCoreClockUpdate+0x170>)
   86648:	6812      	ldr	r2, [r2, #0]
   8664a:	fa22 f303 	lsr.w	r3, r2, r3
   8664e:	4a05      	ldr	r2, [pc, #20]	; (86664 <SystemCoreClockUpdate+0x170>)
   86650:	6013      	str	r3, [r2, #0]
}
   86652:	bf00      	nop
   86654:	46bd      	mov	sp, r7
   86656:	bc80      	pop	{r7}
   86658:	4770      	bx	lr
   8665a:	bf00      	nop
   8665c:	400e0400 	.word	0x400e0400
   86660:	400e1210 	.word	0x400e1210
   86664:	20000438 	.word	0x20000438
   86668:	00b71b00 	.word	0x00b71b00
   8666c:	003d0900 	.word	0x003d0900
   86670:	0e4e1c00 	.word	0x0e4e1c00
   86674:	aaaaaaab 	.word	0xaaaaaaab

00086678 <__libc_init_array>:
   86678:	b570      	push	{r4, r5, r6, lr}
   8667a:	4e0d      	ldr	r6, [pc, #52]	; (866b0 <__libc_init_array+0x38>)
   8667c:	4d0d      	ldr	r5, [pc, #52]	; (866b4 <__libc_init_array+0x3c>)
   8667e:	1b76      	subs	r6, r6, r5
   86680:	10b6      	asrs	r6, r6, #2
   86682:	d006      	beq.n	86692 <__libc_init_array+0x1a>
   86684:	2400      	movs	r4, #0
   86686:	f855 3b04 	ldr.w	r3, [r5], #4
   8668a:	3401      	adds	r4, #1
   8668c:	4798      	blx	r3
   8668e:	42a6      	cmp	r6, r4
   86690:	d1f9      	bne.n	86686 <__libc_init_array+0xe>
   86692:	4e09      	ldr	r6, [pc, #36]	; (866b8 <__libc_init_array+0x40>)
   86694:	4d09      	ldr	r5, [pc, #36]	; (866bc <__libc_init_array+0x44>)
   86696:	f007 f89f 	bl	8d7d8 <_init>
   8669a:	1b76      	subs	r6, r6, r5
   8669c:	10b6      	asrs	r6, r6, #2
   8669e:	d006      	beq.n	866ae <__libc_init_array+0x36>
   866a0:	2400      	movs	r4, #0
   866a2:	f855 3b04 	ldr.w	r3, [r5], #4
   866a6:	3401      	adds	r4, #1
   866a8:	4798      	blx	r3
   866aa:	42a6      	cmp	r6, r4
   866ac:	d1f9      	bne.n	866a2 <__libc_init_array+0x2a>
   866ae:	bd70      	pop	{r4, r5, r6, pc}
   866b0:	0008d7e4 	.word	0x0008d7e4
   866b4:	0008d7e4 	.word	0x0008d7e4
   866b8:	0008d7ec 	.word	0x0008d7ec
   866bc:	0008d7e4 	.word	0x0008d7e4

000866c0 <iprintf>:
   866c0:	b40f      	push	{r0, r1, r2, r3}
   866c2:	b500      	push	{lr}
   866c4:	4907      	ldr	r1, [pc, #28]	; (866e4 <iprintf+0x24>)
   866c6:	b083      	sub	sp, #12
   866c8:	ab04      	add	r3, sp, #16
   866ca:	6808      	ldr	r0, [r1, #0]
   866cc:	f853 2b04 	ldr.w	r2, [r3], #4
   866d0:	6881      	ldr	r1, [r0, #8]
   866d2:	9301      	str	r3, [sp, #4]
   866d4:	f001 fed4 	bl	88480 <_vfiprintf_r>
   866d8:	b003      	add	sp, #12
   866da:	f85d eb04 	ldr.w	lr, [sp], #4
   866de:	b004      	add	sp, #16
   866e0:	4770      	bx	lr
   866e2:	bf00      	nop
   866e4:	2000043c 	.word	0x2000043c

000866e8 <memcpy>:
   866e8:	4684      	mov	ip, r0
   866ea:	ea41 0300 	orr.w	r3, r1, r0
   866ee:	f013 0303 	ands.w	r3, r3, #3
   866f2:	d149      	bne.n	86788 <memcpy+0xa0>
   866f4:	3a40      	subs	r2, #64	; 0x40
   866f6:	d323      	bcc.n	86740 <memcpy+0x58>
   866f8:	680b      	ldr	r3, [r1, #0]
   866fa:	6003      	str	r3, [r0, #0]
   866fc:	684b      	ldr	r3, [r1, #4]
   866fe:	6043      	str	r3, [r0, #4]
   86700:	688b      	ldr	r3, [r1, #8]
   86702:	6083      	str	r3, [r0, #8]
   86704:	68cb      	ldr	r3, [r1, #12]
   86706:	60c3      	str	r3, [r0, #12]
   86708:	690b      	ldr	r3, [r1, #16]
   8670a:	6103      	str	r3, [r0, #16]
   8670c:	694b      	ldr	r3, [r1, #20]
   8670e:	6143      	str	r3, [r0, #20]
   86710:	698b      	ldr	r3, [r1, #24]
   86712:	6183      	str	r3, [r0, #24]
   86714:	69cb      	ldr	r3, [r1, #28]
   86716:	61c3      	str	r3, [r0, #28]
   86718:	6a0b      	ldr	r3, [r1, #32]
   8671a:	6203      	str	r3, [r0, #32]
   8671c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8671e:	6243      	str	r3, [r0, #36]	; 0x24
   86720:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86722:	6283      	str	r3, [r0, #40]	; 0x28
   86724:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86726:	62c3      	str	r3, [r0, #44]	; 0x2c
   86728:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8672a:	6303      	str	r3, [r0, #48]	; 0x30
   8672c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8672e:	6343      	str	r3, [r0, #52]	; 0x34
   86730:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86732:	6383      	str	r3, [r0, #56]	; 0x38
   86734:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86736:	63c3      	str	r3, [r0, #60]	; 0x3c
   86738:	3040      	adds	r0, #64	; 0x40
   8673a:	3140      	adds	r1, #64	; 0x40
   8673c:	3a40      	subs	r2, #64	; 0x40
   8673e:	d2db      	bcs.n	866f8 <memcpy+0x10>
   86740:	3230      	adds	r2, #48	; 0x30
   86742:	d30b      	bcc.n	8675c <memcpy+0x74>
   86744:	680b      	ldr	r3, [r1, #0]
   86746:	6003      	str	r3, [r0, #0]
   86748:	684b      	ldr	r3, [r1, #4]
   8674a:	6043      	str	r3, [r0, #4]
   8674c:	688b      	ldr	r3, [r1, #8]
   8674e:	6083      	str	r3, [r0, #8]
   86750:	68cb      	ldr	r3, [r1, #12]
   86752:	60c3      	str	r3, [r0, #12]
   86754:	3010      	adds	r0, #16
   86756:	3110      	adds	r1, #16
   86758:	3a10      	subs	r2, #16
   8675a:	d2f3      	bcs.n	86744 <memcpy+0x5c>
   8675c:	320c      	adds	r2, #12
   8675e:	d305      	bcc.n	8676c <memcpy+0x84>
   86760:	f851 3b04 	ldr.w	r3, [r1], #4
   86764:	f840 3b04 	str.w	r3, [r0], #4
   86768:	3a04      	subs	r2, #4
   8676a:	d2f9      	bcs.n	86760 <memcpy+0x78>
   8676c:	3204      	adds	r2, #4
   8676e:	d008      	beq.n	86782 <memcpy+0x9a>
   86770:	07d2      	lsls	r2, r2, #31
   86772:	bf1c      	itt	ne
   86774:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86778:	f800 3b01 	strbne.w	r3, [r0], #1
   8677c:	d301      	bcc.n	86782 <memcpy+0x9a>
   8677e:	880b      	ldrh	r3, [r1, #0]
   86780:	8003      	strh	r3, [r0, #0]
   86782:	4660      	mov	r0, ip
   86784:	4770      	bx	lr
   86786:	bf00      	nop
   86788:	2a08      	cmp	r2, #8
   8678a:	d313      	bcc.n	867b4 <memcpy+0xcc>
   8678c:	078b      	lsls	r3, r1, #30
   8678e:	d0b1      	beq.n	866f4 <memcpy+0xc>
   86790:	f010 0303 	ands.w	r3, r0, #3
   86794:	d0ae      	beq.n	866f4 <memcpy+0xc>
   86796:	f1c3 0304 	rsb	r3, r3, #4
   8679a:	1ad2      	subs	r2, r2, r3
   8679c:	07db      	lsls	r3, r3, #31
   8679e:	bf1c      	itt	ne
   867a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   867a4:	f800 3b01 	strbne.w	r3, [r0], #1
   867a8:	d3a4      	bcc.n	866f4 <memcpy+0xc>
   867aa:	f831 3b02 	ldrh.w	r3, [r1], #2
   867ae:	f820 3b02 	strh.w	r3, [r0], #2
   867b2:	e79f      	b.n	866f4 <memcpy+0xc>
   867b4:	3a04      	subs	r2, #4
   867b6:	d3d9      	bcc.n	8676c <memcpy+0x84>
   867b8:	3a01      	subs	r2, #1
   867ba:	f811 3b01 	ldrb.w	r3, [r1], #1
   867be:	f800 3b01 	strb.w	r3, [r0], #1
   867c2:	d2f9      	bcs.n	867b8 <memcpy+0xd0>
   867c4:	780b      	ldrb	r3, [r1, #0]
   867c6:	7003      	strb	r3, [r0, #0]
   867c8:	784b      	ldrb	r3, [r1, #1]
   867ca:	7043      	strb	r3, [r0, #1]
   867cc:	788b      	ldrb	r3, [r1, #2]
   867ce:	7083      	strb	r3, [r0, #2]
   867d0:	4660      	mov	r0, ip
   867d2:	4770      	bx	lr

000867d4 <memset>:
   867d4:	b4f0      	push	{r4, r5, r6, r7}
   867d6:	0786      	lsls	r6, r0, #30
   867d8:	d046      	beq.n	86868 <memset+0x94>
   867da:	1e54      	subs	r4, r2, #1
   867dc:	2a00      	cmp	r2, #0
   867de:	d03c      	beq.n	8685a <memset+0x86>
   867e0:	4603      	mov	r3, r0
   867e2:	b2ca      	uxtb	r2, r1
   867e4:	e001      	b.n	867ea <memset+0x16>
   867e6:	3c01      	subs	r4, #1
   867e8:	d337      	bcc.n	8685a <memset+0x86>
   867ea:	f803 2b01 	strb.w	r2, [r3], #1
   867ee:	079d      	lsls	r5, r3, #30
   867f0:	d1f9      	bne.n	867e6 <memset+0x12>
   867f2:	2c03      	cmp	r4, #3
   867f4:	d92a      	bls.n	8684c <memset+0x78>
   867f6:	b2cd      	uxtb	r5, r1
   867f8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   867fc:	2c0f      	cmp	r4, #15
   867fe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86802:	d934      	bls.n	8686e <memset+0x9a>
   86804:	f1a4 0210 	sub.w	r2, r4, #16
   86808:	f022 0c0f 	bic.w	ip, r2, #15
   8680c:	f103 0720 	add.w	r7, r3, #32
   86810:	0916      	lsrs	r6, r2, #4
   86812:	4467      	add	r7, ip
   86814:	f103 0210 	add.w	r2, r3, #16
   86818:	e942 5504 	strd	r5, r5, [r2, #-16]
   8681c:	e942 5502 	strd	r5, r5, [r2, #-8]
   86820:	3210      	adds	r2, #16
   86822:	42ba      	cmp	r2, r7
   86824:	d1f8      	bne.n	86818 <memset+0x44>
   86826:	1c72      	adds	r2, r6, #1
   86828:	f014 0f0c 	tst.w	r4, #12
   8682c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   86830:	f004 060f 	and.w	r6, r4, #15
   86834:	d013      	beq.n	8685e <memset+0x8a>
   86836:	1f33      	subs	r3, r6, #4
   86838:	f023 0303 	bic.w	r3, r3, #3
   8683c:	3304      	adds	r3, #4
   8683e:	4413      	add	r3, r2
   86840:	f842 5b04 	str.w	r5, [r2], #4
   86844:	4293      	cmp	r3, r2
   86846:	d1fb      	bne.n	86840 <memset+0x6c>
   86848:	f006 0403 	and.w	r4, r6, #3
   8684c:	b12c      	cbz	r4, 8685a <memset+0x86>
   8684e:	b2ca      	uxtb	r2, r1
   86850:	441c      	add	r4, r3
   86852:	f803 2b01 	strb.w	r2, [r3], #1
   86856:	429c      	cmp	r4, r3
   86858:	d1fb      	bne.n	86852 <memset+0x7e>
   8685a:	bcf0      	pop	{r4, r5, r6, r7}
   8685c:	4770      	bx	lr
   8685e:	4634      	mov	r4, r6
   86860:	4613      	mov	r3, r2
   86862:	2c00      	cmp	r4, #0
   86864:	d1f3      	bne.n	8684e <memset+0x7a>
   86866:	e7f8      	b.n	8685a <memset+0x86>
   86868:	4614      	mov	r4, r2
   8686a:	4603      	mov	r3, r0
   8686c:	e7c1      	b.n	867f2 <memset+0x1e>
   8686e:	461a      	mov	r2, r3
   86870:	4626      	mov	r6, r4
   86872:	e7e0      	b.n	86836 <memset+0x62>

00086874 <sprintf>:
   86874:	b40e      	push	{r1, r2, r3}
   86876:	4601      	mov	r1, r0
   86878:	b530      	push	{r4, r5, lr}
   8687a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   8687e:	b09c      	sub	sp, #112	; 0x70
   86880:	ab1f      	add	r3, sp, #124	; 0x7c
   86882:	480b      	ldr	r0, [pc, #44]	; (868b0 <sprintf+0x3c>)
   86884:	f853 2b04 	ldr.w	r2, [r3], #4
   86888:	4d0a      	ldr	r5, [pc, #40]	; (868b4 <sprintf+0x40>)
   8688a:	9102      	str	r1, [sp, #8]
   8688c:	9106      	str	r1, [sp, #24]
   8688e:	6800      	ldr	r0, [r0, #0]
   86890:	a902      	add	r1, sp, #8
   86892:	9301      	str	r3, [sp, #4]
   86894:	e9cd 4504 	strd	r4, r5, [sp, #16]
   86898:	9407      	str	r4, [sp, #28]
   8689a:	f000 f80d 	bl	868b8 <_svfprintf_r>
   8689e:	2200      	movs	r2, #0
   868a0:	9b02      	ldr	r3, [sp, #8]
   868a2:	701a      	strb	r2, [r3, #0]
   868a4:	b01c      	add	sp, #112	; 0x70
   868a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   868aa:	b003      	add	sp, #12
   868ac:	4770      	bx	lr
   868ae:	bf00      	nop
   868b0:	2000043c 	.word	0x2000043c
   868b4:	ffff0208 	.word	0xffff0208

000868b8 <_svfprintf_r>:
   868b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   868bc:	b0d7      	sub	sp, #348	; 0x15c
   868be:	468b      	mov	fp, r1
   868c0:	4617      	mov	r7, r2
   868c2:	930e      	str	r3, [sp, #56]	; 0x38
   868c4:	4681      	mov	r9, r0
   868c6:	f004 f9e1 	bl	8ac8c <_localeconv_r>
   868ca:	6803      	ldr	r3, [r0, #0]
   868cc:	4618      	mov	r0, r3
   868ce:	9318      	str	r3, [sp, #96]	; 0x60
   868d0:	f005 fbd6 	bl	8c080 <strlen>
   868d4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   868d8:	9017      	str	r0, [sp, #92]	; 0x5c
   868da:	061d      	lsls	r5, r3, #24
   868dc:	d504      	bpl.n	868e8 <_svfprintf_r+0x30>
   868de:	f8db 3010 	ldr.w	r3, [fp, #16]
   868e2:	2b00      	cmp	r3, #0
   868e4:	f000 87df 	beq.w	878a6 <_svfprintf_r+0xfee>
   868e8:	2300      	movs	r3, #0
   868ea:	2100      	movs	r1, #0
   868ec:	2200      	movs	r2, #0
   868ee:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   868f2:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   868f6:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   868fa:	9313      	str	r3, [sp, #76]	; 0x4c
   868fc:	9319      	str	r3, [sp, #100]	; 0x64
   868fe:	930a      	str	r3, [sp, #40]	; 0x28
   86900:	ab2d      	add	r3, sp, #180	; 0xb4
   86902:	4698      	mov	r8, r3
   86904:	932a      	str	r3, [sp, #168]	; 0xa8
   86906:	783b      	ldrb	r3, [r7, #0]
   86908:	46da      	mov	sl, fp
   8690a:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   8690e:	2b00      	cmp	r3, #0
   86910:	f000 81a4 	beq.w	86c5c <_svfprintf_r+0x3a4>
   86914:	463c      	mov	r4, r7
   86916:	e004      	b.n	86922 <_svfprintf_r+0x6a>
   86918:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8691c:	2b00      	cmp	r3, #0
   8691e:	f000 80fd 	beq.w	86b1c <_svfprintf_r+0x264>
   86922:	2b25      	cmp	r3, #37	; 0x25
   86924:	d1f8      	bne.n	86918 <_svfprintf_r+0x60>
   86926:	1be5      	subs	r5, r4, r7
   86928:	f040 80fb 	bne.w	86b22 <_svfprintf_r+0x26a>
   8692c:	7823      	ldrb	r3, [r4, #0]
   8692e:	2b00      	cmp	r3, #0
   86930:	f000 8194 	beq.w	86c5c <_svfprintf_r+0x3a4>
   86934:	2300      	movs	r3, #0
   86936:	930b      	str	r3, [sp, #44]	; 0x2c
   86938:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8693c:	9307      	str	r3, [sp, #28]
   8693e:	f04f 33ff 	mov.w	r3, #4294967295
   86942:	7866      	ldrb	r6, [r4, #1]
   86944:	f104 0b01 	add.w	fp, r4, #1
   86948:	2120      	movs	r1, #32
   8694a:	242b      	movs	r4, #43	; 0x2b
   8694c:	9309      	str	r3, [sp, #36]	; 0x24
   8694e:	f10b 0b01 	add.w	fp, fp, #1
   86952:	f1a6 0320 	sub.w	r3, r6, #32
   86956:	2b5a      	cmp	r3, #90	; 0x5a
   86958:	f200 80ff 	bhi.w	86b5a <_svfprintf_r+0x2a2>
   8695c:	e8df f013 	tbh	[pc, r3, lsl #1]
   86960:	00fd02bc 	.word	0x00fd02bc
   86964:	02b500fd 	.word	0x02b500fd
   86968:	00fd00fd 	.word	0x00fd00fd
   8696c:	029100fd 	.word	0x029100fd
   86970:	00fd00fd 	.word	0x00fd00fd
   86974:	02e7006a 	.word	0x02e7006a
   86978:	023400fd 	.word	0x023400fd
   8697c:	00fd02cd 	.word	0x00fd02cd
   86980:	005b02c6 	.word	0x005b02c6
   86984:	005b005b 	.word	0x005b005b
   86988:	005b005b 	.word	0x005b005b
   8698c:	005b005b 	.word	0x005b005b
   86990:	005b005b 	.word	0x005b005b
   86994:	00fd00fd 	.word	0x00fd00fd
   86998:	00fd00fd 	.word	0x00fd00fd
   8699c:	00fd00fd 	.word	0x00fd00fd
   869a0:	019000fd 	.word	0x019000fd
   869a4:	01f700fd 	.word	0x01f700fd
   869a8:	0190007c 	.word	0x0190007c
   869ac:	01900190 	.word	0x01900190
   869b0:	00fd00fd 	.word	0x00fd00fd
   869b4:	00fd00fd 	.word	0x00fd00fd
   869b8:	00fd028a 	.word	0x00fd028a
   869bc:	00a900fd 	.word	0x00a900fd
   869c0:	00fd00fd 	.word	0x00fd00fd
   869c4:	020b00fd 	.word	0x020b00fd
   869c8:	023b00fd 	.word	0x023b00fd
   869cc:	00fd00fd 	.word	0x00fd00fd
   869d0:	00fd0781 	.word	0x00fd0781
   869d4:	00fd00fd 	.word	0x00fd00fd
   869d8:	00fd00fd 	.word	0x00fd00fd
   869dc:	00fd00fd 	.word	0x00fd00fd
   869e0:	019000fd 	.word	0x019000fd
   869e4:	01f700fd 	.word	0x01f700fd
   869e8:	01900080 	.word	0x01900080
   869ec:	01900190 	.word	0x01900190
   869f0:	00800280 	.word	0x00800280
   869f4:	00fd0075 	.word	0x00fd0075
   869f8:	00fd0276 	.word	0x00fd0276
   869fc:	00ad025e 	.word	0x00ad025e
   86a00:	0075024c 	.word	0x0075024c
   86a04:	020b00fd 	.word	0x020b00fd
   86a08:	075b0072 	.word	0x075b0072
   86a0c:	00fd00fd 	.word	0x00fd00fd
   86a10:	00fd075f 	.word	0x00fd075f
   86a14:	0072      	.short	0x0072
   86a16:	2200      	movs	r2, #0
   86a18:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86a1c:	f81b 6b01 	ldrb.w	r6, [fp], #1
   86a20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86a24:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86a28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86a2c:	2b09      	cmp	r3, #9
   86a2e:	d9f5      	bls.n	86a1c <_svfprintf_r+0x164>
   86a30:	920b      	str	r2, [sp, #44]	; 0x2c
   86a32:	e78e      	b.n	86952 <_svfprintf_r+0x9a>
   86a34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a36:	f853 2b04 	ldr.w	r2, [r3], #4
   86a3a:	2a00      	cmp	r2, #0
   86a3c:	920b      	str	r2, [sp, #44]	; 0x2c
   86a3e:	930e      	str	r3, [sp, #56]	; 0x38
   86a40:	f2c0 81bf 	blt.w	86dc2 <_svfprintf_r+0x50a>
   86a44:	f89b 6000 	ldrb.w	r6, [fp]
   86a48:	e781      	b.n	8694e <_svfprintf_r+0x96>
   86a4a:	9b07      	ldr	r3, [sp, #28]
   86a4c:	f89b 6000 	ldrb.w	r6, [fp]
   86a50:	f043 0320 	orr.w	r3, r3, #32
   86a54:	9307      	str	r3, [sp, #28]
   86a56:	e77a      	b.n	8694e <_svfprintf_r+0x96>
   86a58:	9b07      	ldr	r3, [sp, #28]
   86a5a:	f043 0310 	orr.w	r3, r3, #16
   86a5e:	9307      	str	r3, [sp, #28]
   86a60:	9b07      	ldr	r3, [sp, #28]
   86a62:	069c      	lsls	r4, r3, #26
   86a64:	f140 8162 	bpl.w	86d2c <_svfprintf_r+0x474>
   86a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86a6a:	3307      	adds	r3, #7
   86a6c:	f023 0307 	bic.w	r3, r3, #7
   86a70:	4619      	mov	r1, r3
   86a72:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86a76:	4614      	mov	r4, r2
   86a78:	461d      	mov	r5, r3
   86a7a:	910e      	str	r1, [sp, #56]	; 0x38
   86a7c:	2a00      	cmp	r2, #0
   86a7e:	f173 0300 	sbcs.w	r3, r3, #0
   86a82:	f2c0 85ab 	blt.w	875dc <_svfprintf_r+0xd24>
   86a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86a88:	3301      	adds	r3, #1
   86a8a:	9b07      	ldr	r3, [sp, #28]
   86a8c:	f000 8414 	beq.w	872b8 <_svfprintf_r+0xa00>
   86a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86a94:	ea54 0205 	orrs.w	r2, r4, r5
   86a98:	9308      	str	r3, [sp, #32]
   86a9a:	f040 840e 	bne.w	872ba <_svfprintf_r+0xa02>
   86a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86aa0:	2a00      	cmp	r2, #0
   86aa2:	f040 840f 	bne.w	872c4 <_svfprintf_r+0xa0c>
   86aa6:	9307      	str	r3, [sp, #28]
   86aa8:	2300      	movs	r3, #0
   86aaa:	af56      	add	r7, sp, #344	; 0x158
   86aac:	9309      	str	r3, [sp, #36]	; 0x24
   86aae:	930c      	str	r3, [sp, #48]	; 0x30
   86ab0:	e26b      	b.n	86f8a <_svfprintf_r+0x6d2>
   86ab2:	9b07      	ldr	r3, [sp, #28]
   86ab4:	f043 0310 	orr.w	r3, r3, #16
   86ab8:	9307      	str	r3, [sp, #28]
   86aba:	9b07      	ldr	r3, [sp, #28]
   86abc:	069a      	lsls	r2, r3, #26
   86abe:	f140 8126 	bpl.w	86d0e <_svfprintf_r+0x456>
   86ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86ac4:	3307      	adds	r3, #7
   86ac6:	f023 0307 	bic.w	r3, r3, #7
   86aca:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86ace:	930e      	str	r3, [sp, #56]	; 0x38
   86ad0:	9b07      	ldr	r3, [sp, #28]
   86ad2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   86ad6:	9308      	str	r3, [sp, #32]
   86ad8:	2300      	movs	r3, #0
   86ada:	2200      	movs	r2, #0
   86adc:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   86ae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86ae2:	4611      	mov	r1, r2
   86ae4:	3101      	adds	r1, #1
   86ae6:	f000 8231 	beq.w	86f4c <_svfprintf_r+0x694>
   86aea:	9908      	ldr	r1, [sp, #32]
   86aec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   86af0:	9107      	str	r1, [sp, #28]
   86af2:	ea54 0105 	orrs.w	r1, r4, r5
   86af6:	f040 8227 	bne.w	86f48 <_svfprintf_r+0x690>
   86afa:	2a00      	cmp	r2, #0
   86afc:	f040 837d 	bne.w	871fa <_svfprintf_r+0x942>
   86b00:	2b00      	cmp	r3, #0
   86b02:	d1d1      	bne.n	86aa8 <_svfprintf_r+0x1f0>
   86b04:	9b08      	ldr	r3, [sp, #32]
   86b06:	f013 0301 	ands.w	r3, r3, #1
   86b0a:	930c      	str	r3, [sp, #48]	; 0x30
   86b0c:	f000 8590 	beq.w	87630 <_svfprintf_r+0xd78>
   86b10:	2330      	movs	r3, #48	; 0x30
   86b12:	f20d 1757 	addw	r7, sp, #343	; 0x157
   86b16:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   86b1a:	e236      	b.n	86f8a <_svfprintf_r+0x6d2>
   86b1c:	1be5      	subs	r5, r4, r7
   86b1e:	f000 809d 	beq.w	86c5c <_svfprintf_r+0x3a4>
   86b22:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   86b26:	3301      	adds	r3, #1
   86b28:	442a      	add	r2, r5
   86b2a:	2b07      	cmp	r3, #7
   86b2c:	e9c8 7500 	strd	r7, r5, [r8]
   86b30:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   86b34:	dc06      	bgt.n	86b44 <_svfprintf_r+0x28c>
   86b36:	f108 0808 	add.w	r8, r8, #8
   86b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86b3c:	7823      	ldrb	r3, [r4, #0]
   86b3e:	442a      	add	r2, r5
   86b40:	920a      	str	r2, [sp, #40]	; 0x28
   86b42:	e6f4      	b.n	8692e <_svfprintf_r+0x76>
   86b44:	4651      	mov	r1, sl
   86b46:	4648      	mov	r0, r9
   86b48:	aa2a      	add	r2, sp, #168	; 0xa8
   86b4a:	f005 fafb 	bl	8c144 <__ssprint_r>
   86b4e:	2800      	cmp	r0, #0
   86b50:	f041 83ce 	bne.w	882f0 <_svfprintf_r+0x1a38>
   86b54:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86b58:	e7ef      	b.n	86b3a <_svfprintf_r+0x282>
   86b5a:	2e00      	cmp	r6, #0
   86b5c:	d07e      	beq.n	86c5c <_svfprintf_r+0x3a4>
   86b5e:	2300      	movs	r3, #0
   86b60:	2101      	movs	r1, #1
   86b62:	461a      	mov	r2, r3
   86b64:	9108      	str	r1, [sp, #32]
   86b66:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   86b6a:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   86b6e:	930d      	str	r3, [sp, #52]	; 0x34
   86b70:	9309      	str	r3, [sp, #36]	; 0x24
   86b72:	9312      	str	r3, [sp, #72]	; 0x48
   86b74:	9316      	str	r3, [sp, #88]	; 0x58
   86b76:	9310      	str	r3, [sp, #64]	; 0x40
   86b78:	910c      	str	r1, [sp, #48]	; 0x30
   86b7a:	af3d      	add	r7, sp, #244	; 0xf4
   86b7c:	9b07      	ldr	r3, [sp, #28]
   86b7e:	f013 0302 	ands.w	r3, r3, #2
   86b82:	d002      	beq.n	86b8a <_svfprintf_r+0x2d2>
   86b84:	9908      	ldr	r1, [sp, #32]
   86b86:	3102      	adds	r1, #2
   86b88:	9108      	str	r1, [sp, #32]
   86b8a:	9907      	ldr	r1, [sp, #28]
   86b8c:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   86b90:	910f      	str	r1, [sp, #60]	; 0x3c
   86b92:	d105      	bne.n	86ba0 <_svfprintf_r+0x2e8>
   86b94:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86b96:	9808      	ldr	r0, [sp, #32]
   86b98:	1a0d      	subs	r5, r1, r0
   86b9a:	2d00      	cmp	r5, #0
   86b9c:	f300 834b 	bgt.w	87236 <_svfprintf_r+0x97e>
   86ba0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86ba2:	b172      	cbz	r2, 86bc2 <_svfprintf_r+0x30a>
   86ba4:	2001      	movs	r0, #1
   86ba6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86ba8:	4404      	add	r4, r0
   86baa:	4402      	add	r2, r0
   86bac:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   86bb0:	2a07      	cmp	r2, #7
   86bb2:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86bb6:	e9c8 1000 	strd	r1, r0, [r8]
   86bba:	f300 83cd 	bgt.w	87358 <_svfprintf_r+0xaa0>
   86bbe:	f108 0808 	add.w	r8, r8, #8
   86bc2:	b16b      	cbz	r3, 86be0 <_svfprintf_r+0x328>
   86bc4:	2102      	movs	r1, #2
   86bc6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86bc8:	440c      	add	r4, r1
   86bca:	3301      	adds	r3, #1
   86bcc:	aa23      	add	r2, sp, #140	; 0x8c
   86bce:	2b07      	cmp	r3, #7
   86bd0:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86bd4:	e9c8 2100 	strd	r2, r1, [r8]
   86bd8:	f300 83cc 	bgt.w	87374 <_svfprintf_r+0xabc>
   86bdc:	f108 0808 	add.w	r8, r8, #8
   86be0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86be2:	2b80      	cmp	r3, #128	; 0x80
   86be4:	f000 8234 	beq.w	87050 <_svfprintf_r+0x798>
   86be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86bea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86bec:	1a9d      	subs	r5, r3, r2
   86bee:	2d00      	cmp	r5, #0
   86bf0:	f300 826e 	bgt.w	870d0 <_svfprintf_r+0x818>
   86bf4:	9b07      	ldr	r3, [sp, #28]
   86bf6:	05d9      	lsls	r1, r3, #23
   86bf8:	f100 81d5 	bmi.w	86fa6 <_svfprintf_r+0x6ee>
   86bfc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86c00:	3301      	adds	r3, #1
   86c02:	4414      	add	r4, r2
   86c04:	2b07      	cmp	r3, #7
   86c06:	e9c8 7200 	strd	r7, r2, [r8]
   86c0a:	942c      	str	r4, [sp, #176]	; 0xb0
   86c0c:	932b      	str	r3, [sp, #172]	; 0xac
   86c0e:	f300 8397 	bgt.w	87340 <_svfprintf_r+0xa88>
   86c12:	f108 0808 	add.w	r8, r8, #8
   86c16:	9b07      	ldr	r3, [sp, #28]
   86c18:	0759      	lsls	r1, r3, #29
   86c1a:	d505      	bpl.n	86c28 <_svfprintf_r+0x370>
   86c1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86c1e:	9a08      	ldr	r2, [sp, #32]
   86c20:	1a9d      	subs	r5, r3, r2
   86c22:	2d00      	cmp	r5, #0
   86c24:	f300 83b2 	bgt.w	8738c <_svfprintf_r+0xad4>
   86c28:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   86c2c:	9908      	ldr	r1, [sp, #32]
   86c2e:	428a      	cmp	r2, r1
   86c30:	bfac      	ite	ge
   86c32:	189b      	addge	r3, r3, r2
   86c34:	185b      	addlt	r3, r3, r1
   86c36:	930a      	str	r3, [sp, #40]	; 0x28
   86c38:	2c00      	cmp	r4, #0
   86c3a:	f040 827d 	bne.w	87138 <_svfprintf_r+0x880>
   86c3e:	2300      	movs	r3, #0
   86c40:	932b      	str	r3, [sp, #172]	; 0xac
   86c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86c44:	b11b      	cbz	r3, 86c4e <_svfprintf_r+0x396>
   86c46:	4648      	mov	r0, r9
   86c48:	990d      	ldr	r1, [sp, #52]	; 0x34
   86c4a:	f003 fd79 	bl	8a740 <_free_r>
   86c4e:	465f      	mov	r7, fp
   86c50:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86c54:	783b      	ldrb	r3, [r7, #0]
   86c56:	2b00      	cmp	r3, #0
   86c58:	f47f ae5c 	bne.w	86914 <_svfprintf_r+0x5c>
   86c5c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   86c5e:	46d3      	mov	fp, sl
   86c60:	2b00      	cmp	r3, #0
   86c62:	f041 824b 	bne.w	880fc <_svfprintf_r+0x1844>
   86c66:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   86c6a:	f013 0f40 	tst.w	r3, #64	; 0x40
   86c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86c70:	bf18      	it	ne
   86c72:	f04f 33ff 	movne.w	r3, #4294967295
   86c76:	930a      	str	r3, [sp, #40]	; 0x28
   86c78:	980a      	ldr	r0, [sp, #40]	; 0x28
   86c7a:	b057      	add	sp, #348	; 0x15c
   86c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86c82:	3307      	adds	r3, #7
   86c84:	f023 0307 	bic.w	r3, r3, #7
   86c88:	4619      	mov	r1, r3
   86c8a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86c8e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   86c92:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   86c96:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   86c9a:	461d      	mov	r5, r3
   86c9c:	4618      	mov	r0, r3
   86c9e:	910e      	str	r1, [sp, #56]	; 0x38
   86ca0:	f04f 32ff 	mov.w	r2, #4294967295
   86ca4:	4621      	mov	r1, r4
   86ca6:	4ba4      	ldr	r3, [pc, #656]	; (86f38 <_svfprintf_r+0x680>)
   86ca8:	f006 f980 	bl	8cfac <__aeabi_dcmpun>
   86cac:	2800      	cmp	r0, #0
   86cae:	f040 84d9 	bne.w	87664 <_svfprintf_r+0xdac>
   86cb2:	4628      	mov	r0, r5
   86cb4:	4621      	mov	r1, r4
   86cb6:	f04f 32ff 	mov.w	r2, #4294967295
   86cba:	4b9f      	ldr	r3, [pc, #636]	; (86f38 <_svfprintf_r+0x680>)
   86cbc:	f006 f958 	bl	8cf70 <__aeabi_dcmple>
   86cc0:	2800      	cmp	r0, #0
   86cc2:	f040 84cf 	bne.w	87664 <_svfprintf_r+0xdac>
   86cc6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86cca:	2200      	movs	r2, #0
   86ccc:	2300      	movs	r3, #0
   86cce:	f006 f945 	bl	8cf5c <__aeabi_dcmplt>
   86cd2:	2800      	cmp	r0, #0
   86cd4:	f041 800e 	bne.w	87cf4 <_svfprintf_r+0x143c>
   86cd8:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86cdc:	2003      	movs	r0, #3
   86cde:	2100      	movs	r1, #0
   86ce0:	4f96      	ldr	r7, [pc, #600]	; (86f3c <_svfprintf_r+0x684>)
   86ce2:	4b97      	ldr	r3, [pc, #604]	; (86f40 <_svfprintf_r+0x688>)
   86ce4:	9008      	str	r0, [sp, #32]
   86ce6:	910d      	str	r1, [sp, #52]	; 0x34
   86ce8:	2e47      	cmp	r6, #71	; 0x47
   86cea:	bfc8      	it	gt
   86cec:	461f      	movgt	r7, r3
   86cee:	9c07      	ldr	r4, [sp, #28]
   86cf0:	900c      	str	r0, [sp, #48]	; 0x30
   86cf2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   86cf6:	9407      	str	r4, [sp, #28]
   86cf8:	9109      	str	r1, [sp, #36]	; 0x24
   86cfa:	9112      	str	r1, [sp, #72]	; 0x48
   86cfc:	9116      	str	r1, [sp, #88]	; 0x58
   86cfe:	9110      	str	r1, [sp, #64]	; 0x40
   86d00:	2a00      	cmp	r2, #0
   86d02:	f43f af3b 	beq.w	86b7c <_svfprintf_r+0x2c4>
   86d06:	9b08      	ldr	r3, [sp, #32]
   86d08:	3301      	adds	r3, #1
   86d0a:	9308      	str	r3, [sp, #32]
   86d0c:	e736      	b.n	86b7c <_svfprintf_r+0x2c4>
   86d0e:	9b07      	ldr	r3, [sp, #28]
   86d10:	06db      	lsls	r3, r3, #27
   86d12:	f100 849c 	bmi.w	8764e <_svfprintf_r+0xd96>
   86d16:	9b07      	ldr	r3, [sp, #28]
   86d18:	065f      	lsls	r7, r3, #25
   86d1a:	f140 87b2 	bpl.w	87c82 <_svfprintf_r+0x13ca>
   86d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86d20:	2500      	movs	r5, #0
   86d22:	f853 4b04 	ldr.w	r4, [r3], #4
   86d26:	930e      	str	r3, [sp, #56]	; 0x38
   86d28:	b2a4      	uxth	r4, r4
   86d2a:	e6d1      	b.n	86ad0 <_svfprintf_r+0x218>
   86d2c:	9b07      	ldr	r3, [sp, #28]
   86d2e:	06d8      	lsls	r0, r3, #27
   86d30:	f100 8568 	bmi.w	87804 <_svfprintf_r+0xf4c>
   86d34:	9b07      	ldr	r3, [sp, #28]
   86d36:	0659      	lsls	r1, r3, #25
   86d38:	f140 87be 	bpl.w	87cb8 <_svfprintf_r+0x1400>
   86d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86d3e:	f853 4b04 	ldr.w	r4, [r3], #4
   86d42:	b224      	sxth	r4, r4
   86d44:	17e5      	asrs	r5, r4, #31
   86d46:	930e      	str	r3, [sp, #56]	; 0x38
   86d48:	4622      	mov	r2, r4
   86d4a:	462b      	mov	r3, r5
   86d4c:	e696      	b.n	86a7c <_svfprintf_r+0x1c4>
   86d4e:	2100      	movs	r1, #0
   86d50:	2401      	movs	r4, #1
   86d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86d54:	460a      	mov	r2, r1
   86d56:	f853 0b04 	ldr.w	r0, [r3], #4
   86d5a:	9408      	str	r4, [sp, #32]
   86d5c:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   86d60:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   86d64:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   86d68:	9109      	str	r1, [sp, #36]	; 0x24
   86d6a:	9112      	str	r1, [sp, #72]	; 0x48
   86d6c:	9116      	str	r1, [sp, #88]	; 0x58
   86d6e:	9110      	str	r1, [sp, #64]	; 0x40
   86d70:	940c      	str	r4, [sp, #48]	; 0x30
   86d72:	af3d      	add	r7, sp, #244	; 0xf4
   86d74:	e702      	b.n	86b7c <_svfprintf_r+0x2c4>
   86d76:	2500      	movs	r5, #0
   86d78:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   86d7a:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   86d7e:	f854 7b04 	ldr.w	r7, [r4], #4
   86d82:	2f00      	cmp	r7, #0
   86d84:	f000 859f 	beq.w	878c6 <_svfprintf_r+0x100e>
   86d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86d8a:	4613      	mov	r3, r2
   86d8c:	3301      	adds	r3, #1
   86d8e:	f000 8770 	beq.w	87c72 <_svfprintf_r+0x13ba>
   86d92:	4629      	mov	r1, r5
   86d94:	4638      	mov	r0, r7
   86d96:	f004 fac1 	bl	8b31c <memchr>
   86d9a:	900d      	str	r0, [sp, #52]	; 0x34
   86d9c:	2800      	cmp	r0, #0
   86d9e:	f001 80b9 	beq.w	87f14 <_svfprintf_r+0x165c>
   86da2:	462b      	mov	r3, r5
   86da4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86da6:	9509      	str	r5, [sp, #36]	; 0x24
   86da8:	1bd2      	subs	r2, r2, r7
   86daa:	920c      	str	r2, [sp, #48]	; 0x30
   86dac:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   86db0:	9208      	str	r2, [sp, #32]
   86db2:	940e      	str	r4, [sp, #56]	; 0x38
   86db4:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86db8:	930d      	str	r3, [sp, #52]	; 0x34
   86dba:	9312      	str	r3, [sp, #72]	; 0x48
   86dbc:	9316      	str	r3, [sp, #88]	; 0x58
   86dbe:	9310      	str	r3, [sp, #64]	; 0x40
   86dc0:	e79e      	b.n	86d00 <_svfprintf_r+0x448>
   86dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86dc4:	425b      	negs	r3, r3
   86dc6:	930b      	str	r3, [sp, #44]	; 0x2c
   86dc8:	9b07      	ldr	r3, [sp, #28]
   86dca:	f89b 6000 	ldrb.w	r6, [fp]
   86dce:	f043 0304 	orr.w	r3, r3, #4
   86dd2:	9307      	str	r3, [sp, #28]
   86dd4:	e5bb      	b.n	8694e <_svfprintf_r+0x96>
   86dd6:	9b07      	ldr	r3, [sp, #28]
   86dd8:	f043 0310 	orr.w	r3, r3, #16
   86ddc:	9308      	str	r3, [sp, #32]
   86dde:	9b08      	ldr	r3, [sp, #32]
   86de0:	069d      	lsls	r5, r3, #26
   86de2:	f140 83ea 	bpl.w	875ba <_svfprintf_r+0xd02>
   86de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86de8:	3307      	adds	r3, #7
   86dea:	f023 0307 	bic.w	r3, r3, #7
   86dee:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86df2:	930e      	str	r3, [sp, #56]	; 0x38
   86df4:	2301      	movs	r3, #1
   86df6:	e670      	b.n	86ada <_svfprintf_r+0x222>
   86df8:	f647 0230 	movw	r2, #30768	; 0x7830
   86dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86dfe:	9907      	ldr	r1, [sp, #28]
   86e00:	f853 4b04 	ldr.w	r4, [r3], #4
   86e04:	f041 0102 	orr.w	r1, r1, #2
   86e08:	930e      	str	r3, [sp, #56]	; 0x38
   86e0a:	4b4e      	ldr	r3, [pc, #312]	; (86f44 <_svfprintf_r+0x68c>)
   86e0c:	2500      	movs	r5, #0
   86e0e:	9319      	str	r3, [sp, #100]	; 0x64
   86e10:	2678      	movs	r6, #120	; 0x78
   86e12:	2302      	movs	r3, #2
   86e14:	9108      	str	r1, [sp, #32]
   86e16:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   86e1a:	e65e      	b.n	86ada <_svfprintf_r+0x222>
   86e1c:	9b07      	ldr	r3, [sp, #28]
   86e1e:	069d      	lsls	r5, r3, #26
   86e20:	f100 8408 	bmi.w	87634 <_svfprintf_r+0xd7c>
   86e24:	9b07      	ldr	r3, [sp, #28]
   86e26:	06dc      	lsls	r4, r3, #27
   86e28:	f100 86e1 	bmi.w	87bee <_svfprintf_r+0x1336>
   86e2c:	9b07      	ldr	r3, [sp, #28]
   86e2e:	0658      	lsls	r0, r3, #25
   86e30:	f100 8795 	bmi.w	87d5e <_svfprintf_r+0x14a6>
   86e34:	9b07      	ldr	r3, [sp, #28]
   86e36:	0599      	lsls	r1, r3, #22
   86e38:	f140 86d9 	bpl.w	87bee <_svfprintf_r+0x1336>
   86e3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86e3e:	990a      	ldr	r1, [sp, #40]	; 0x28
   86e40:	f853 2b04 	ldr.w	r2, [r3], #4
   86e44:	465f      	mov	r7, fp
   86e46:	7011      	strb	r1, [r2, #0]
   86e48:	930e      	str	r3, [sp, #56]	; 0x38
   86e4a:	e703      	b.n	86c54 <_svfprintf_r+0x39c>
   86e4c:	f89b 6000 	ldrb.w	r6, [fp]
   86e50:	9b07      	ldr	r3, [sp, #28]
   86e52:	2e6c      	cmp	r6, #108	; 0x6c
   86e54:	f000 8508 	beq.w	87868 <_svfprintf_r+0xfb0>
   86e58:	f043 0310 	orr.w	r3, r3, #16
   86e5c:	9307      	str	r3, [sp, #28]
   86e5e:	e576      	b.n	8694e <_svfprintf_r+0x96>
   86e60:	f89b 6000 	ldrb.w	r6, [fp]
   86e64:	9b07      	ldr	r3, [sp, #28]
   86e66:	2e68      	cmp	r6, #104	; 0x68
   86e68:	f000 8507 	beq.w	8787a <_svfprintf_r+0xfc2>
   86e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86e70:	9307      	str	r3, [sp, #28]
   86e72:	e56c      	b.n	8694e <_svfprintf_r+0x96>
   86e74:	9b07      	ldr	r3, [sp, #28]
   86e76:	f89b 6000 	ldrb.w	r6, [fp]
   86e7a:	f043 0308 	orr.w	r3, r3, #8
   86e7e:	9307      	str	r3, [sp, #28]
   86e80:	e565      	b.n	8694e <_svfprintf_r+0x96>
   86e82:	4648      	mov	r0, r9
   86e84:	f003 ff02 	bl	8ac8c <_localeconv_r>
   86e88:	6843      	ldr	r3, [r0, #4]
   86e8a:	4618      	mov	r0, r3
   86e8c:	931c      	str	r3, [sp, #112]	; 0x70
   86e8e:	f005 f8f7 	bl	8c080 <strlen>
   86e92:	4603      	mov	r3, r0
   86e94:	4648      	mov	r0, r9
   86e96:	461d      	mov	r5, r3
   86e98:	931d      	str	r3, [sp, #116]	; 0x74
   86e9a:	f003 fef7 	bl	8ac8c <_localeconv_r>
   86e9e:	6882      	ldr	r2, [r0, #8]
   86ea0:	2120      	movs	r1, #32
   86ea2:	921a      	str	r2, [sp, #104]	; 0x68
   86ea4:	2d00      	cmp	r5, #0
   86ea6:	f43f adcd 	beq.w	86a44 <_svfprintf_r+0x18c>
   86eaa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86eac:	2b00      	cmp	r3, #0
   86eae:	f43f adc9 	beq.w	86a44 <_svfprintf_r+0x18c>
   86eb2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86eb4:	781b      	ldrb	r3, [r3, #0]
   86eb6:	2b00      	cmp	r3, #0
   86eb8:	f43f adc4 	beq.w	86a44 <_svfprintf_r+0x18c>
   86ebc:	9b07      	ldr	r3, [sp, #28]
   86ebe:	f89b 6000 	ldrb.w	r6, [fp]
   86ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   86ec6:	9307      	str	r3, [sp, #28]
   86ec8:	e541      	b.n	8694e <_svfprintf_r+0x96>
   86eca:	9b07      	ldr	r3, [sp, #28]
   86ecc:	f89b 6000 	ldrb.w	r6, [fp]
   86ed0:	f043 0301 	orr.w	r3, r3, #1
   86ed4:	9307      	str	r3, [sp, #28]
   86ed6:	e53a      	b.n	8694e <_svfprintf_r+0x96>
   86ed8:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   86edc:	2b00      	cmp	r3, #0
   86ede:	f47f adb1 	bne.w	86a44 <_svfprintf_r+0x18c>
   86ee2:	f89b 6000 	ldrb.w	r6, [fp]
   86ee6:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   86eea:	e530      	b.n	8694e <_svfprintf_r+0x96>
   86eec:	9b07      	ldr	r3, [sp, #28]
   86eee:	f89b 6000 	ldrb.w	r6, [fp]
   86ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86ef6:	9307      	str	r3, [sp, #28]
   86ef8:	e529      	b.n	8694e <_svfprintf_r+0x96>
   86efa:	465a      	mov	r2, fp
   86efc:	f812 6b01 	ldrb.w	r6, [r2], #1
   86f00:	2e2a      	cmp	r6, #42	; 0x2a
   86f02:	f001 8251 	beq.w	883a8 <_svfprintf_r+0x1af0>
   86f06:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86f0a:	2b09      	cmp	r3, #9
   86f0c:	4693      	mov	fp, r2
   86f0e:	bf98      	it	ls
   86f10:	2200      	movls	r2, #0
   86f12:	f201 80ef 	bhi.w	880f4 <_svfprintf_r+0x183c>
   86f16:	f81b 6b01 	ldrb.w	r6, [fp], #1
   86f1a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86f1e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86f22:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86f26:	2b09      	cmp	r3, #9
   86f28:	d9f5      	bls.n	86f16 <_svfprintf_r+0x65e>
   86f2a:	9209      	str	r2, [sp, #36]	; 0x24
   86f2c:	e511      	b.n	86952 <_svfprintf_r+0x9a>
   86f2e:	f89b 6000 	ldrb.w	r6, [fp]
   86f32:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   86f36:	e50a      	b.n	8694e <_svfprintf_r+0x96>
   86f38:	7fefffff 	.word	0x7fefffff
   86f3c:	0008d3e4 	.word	0x0008d3e4
   86f40:	0008d3e8 	.word	0x0008d3e8
   86f44:	0008d3f4 	.word	0x0008d3f4
   86f48:	9a07      	ldr	r2, [sp, #28]
   86f4a:	9208      	str	r2, [sp, #32]
   86f4c:	2b01      	cmp	r3, #1
   86f4e:	f000 81b4 	beq.w	872ba <_svfprintf_r+0xa02>
   86f52:	2b02      	cmp	r3, #2
   86f54:	f000 8159 	beq.w	8720a <_svfprintf_r+0x952>
   86f58:	af56      	add	r7, sp, #344	; 0x158
   86f5a:	08e2      	lsrs	r2, r4, #3
   86f5c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   86f60:	08e9      	lsrs	r1, r5, #3
   86f62:	f004 0307 	and.w	r3, r4, #7
   86f66:	460d      	mov	r5, r1
   86f68:	4614      	mov	r4, r2
   86f6a:	3330      	adds	r3, #48	; 0x30
   86f6c:	ea54 0105 	orrs.w	r1, r4, r5
   86f70:	463a      	mov	r2, r7
   86f72:	f807 3d01 	strb.w	r3, [r7, #-1]!
   86f76:	d1f0      	bne.n	86f5a <_svfprintf_r+0x6a2>
   86f78:	9908      	ldr	r1, [sp, #32]
   86f7a:	4608      	mov	r0, r1
   86f7c:	07c0      	lsls	r0, r0, #31
   86f7e:	f100 82b8 	bmi.w	874f2 <_svfprintf_r+0xc3a>
   86f82:	ab56      	add	r3, sp, #344	; 0x158
   86f84:	1bdb      	subs	r3, r3, r7
   86f86:	9107      	str	r1, [sp, #28]
   86f88:	930c      	str	r3, [sp, #48]	; 0x30
   86f8a:	2300      	movs	r3, #0
   86f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
   86f8e:	930d      	str	r3, [sp, #52]	; 0x34
   86f90:	9312      	str	r3, [sp, #72]	; 0x48
   86f92:	9316      	str	r3, [sp, #88]	; 0x58
   86f94:	9310      	str	r3, [sp, #64]	; 0x40
   86f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86f98:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86f9c:	428b      	cmp	r3, r1
   86f9e:	bfb8      	it	lt
   86fa0:	460b      	movlt	r3, r1
   86fa2:	9308      	str	r3, [sp, #32]
   86fa4:	e6ac      	b.n	86d00 <_svfprintf_r+0x448>
   86fa6:	2e65      	cmp	r6, #101	; 0x65
   86fa8:	f340 80d8 	ble.w	8715c <_svfprintf_r+0x8a4>
   86fac:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86fb0:	2200      	movs	r2, #0
   86fb2:	2300      	movs	r3, #0
   86fb4:	f005 ffc8 	bl	8cf48 <__aeabi_dcmpeq>
   86fb8:	2800      	cmp	r0, #0
   86fba:	f000 821e 	beq.w	873fa <_svfprintf_r+0xb42>
   86fbe:	2101      	movs	r1, #1
   86fc0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86fc2:	4ac5      	ldr	r2, [pc, #788]	; (872d8 <_svfprintf_r+0xa20>)
   86fc4:	440b      	add	r3, r1
   86fc6:	440c      	add	r4, r1
   86fc8:	2b07      	cmp	r3, #7
   86fca:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86fce:	e9c8 2100 	strd	r2, r1, [r8]
   86fd2:	f300 85bb 	bgt.w	87b4c <_svfprintf_r+0x1294>
   86fd6:	f108 0808 	add.w	r8, r8, #8
   86fda:	9b24      	ldr	r3, [sp, #144]	; 0x90
   86fdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   86fde:	4293      	cmp	r3, r2
   86fe0:	f280 8321 	bge.w	87626 <_svfprintf_r+0xd6e>
   86fe4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86fe6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86fe8:	3301      	adds	r3, #1
   86fea:	9918      	ldr	r1, [sp, #96]	; 0x60
   86fec:	4414      	add	r4, r2
   86fee:	2b07      	cmp	r3, #7
   86ff0:	e9c8 1200 	strd	r1, r2, [r8]
   86ff4:	942c      	str	r4, [sp, #176]	; 0xb0
   86ff6:	932b      	str	r3, [sp, #172]	; 0xac
   86ff8:	f300 8448 	bgt.w	8788c <_svfprintf_r+0xfd4>
   86ffc:	f108 0808 	add.w	r8, r8, #8
   87000:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87002:	1e5d      	subs	r5, r3, #1
   87004:	2d00      	cmp	r5, #0
   87006:	f77f ae06 	ble.w	86c16 <_svfprintf_r+0x35e>
   8700a:	2d10      	cmp	r5, #16
   8700c:	f340 85c7 	ble.w	87b9e <_svfprintf_r+0x12e6>
   87010:	4fb2      	ldr	r7, [pc, #712]	; (872dc <_svfprintf_r+0xa24>)
   87012:	2610      	movs	r6, #16
   87014:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87016:	970f      	str	r7, [sp, #60]	; 0x3c
   87018:	e005      	b.n	87026 <_svfprintf_r+0x76e>
   8701a:	f108 0808 	add.w	r8, r8, #8
   8701e:	3d10      	subs	r5, #16
   87020:	2d10      	cmp	r5, #16
   87022:	f340 85bf 	ble.w	87ba4 <_svfprintf_r+0x12ec>
   87026:	3301      	adds	r3, #1
   87028:	3410      	adds	r4, #16
   8702a:	2b07      	cmp	r3, #7
   8702c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87030:	e9c8 7600 	strd	r7, r6, [r8]
   87034:	ddf1      	ble.n	8701a <_svfprintf_r+0x762>
   87036:	4651      	mov	r1, sl
   87038:	4648      	mov	r0, r9
   8703a:	aa2a      	add	r2, sp, #168	; 0xa8
   8703c:	f005 f882 	bl	8c144 <__ssprint_r>
   87040:	2800      	cmp	r0, #0
   87042:	f040 8081 	bne.w	87148 <_svfprintf_r+0x890>
   87046:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   8704a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8704e:	e7e6      	b.n	8701e <_svfprintf_r+0x766>
   87050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87052:	9a08      	ldr	r2, [sp, #32]
   87054:	1a9d      	subs	r5, r3, r2
   87056:	2d00      	cmp	r5, #0
   87058:	f77f adc6 	ble.w	86be8 <_svfprintf_r+0x330>
   8705c:	2d10      	cmp	r5, #16
   8705e:	f341 8069 	ble.w	88134 <_svfprintf_r+0x187c>
   87062:	489e      	ldr	r0, [pc, #632]	; (872dc <_svfprintf_r+0xa24>)
   87064:	4621      	mov	r1, r4
   87066:	2310      	movs	r3, #16
   87068:	4604      	mov	r4, r0
   8706a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8706c:	900f      	str	r0, [sp, #60]	; 0x3c
   8706e:	e004      	b.n	8707a <_svfprintf_r+0x7c2>
   87070:	3d10      	subs	r5, #16
   87072:	2d10      	cmp	r5, #16
   87074:	f108 0808 	add.w	r8, r8, #8
   87078:	dd17      	ble.n	870aa <_svfprintf_r+0x7f2>
   8707a:	3201      	adds	r2, #1
   8707c:	3110      	adds	r1, #16
   8707e:	2a07      	cmp	r2, #7
   87080:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   87084:	e9c8 4300 	strd	r4, r3, [r8]
   87088:	ddf2      	ble.n	87070 <_svfprintf_r+0x7b8>
   8708a:	4651      	mov	r1, sl
   8708c:	4648      	mov	r0, r9
   8708e:	aa2a      	add	r2, sp, #168	; 0xa8
   87090:	f005 f858 	bl	8c144 <__ssprint_r>
   87094:	2800      	cmp	r0, #0
   87096:	d157      	bne.n	87148 <_svfprintf_r+0x890>
   87098:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8709c:	3d10      	subs	r5, #16
   8709e:	2d10      	cmp	r5, #16
   870a0:	f04f 0310 	mov.w	r3, #16
   870a4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   870a8:	dce7      	bgt.n	8707a <_svfprintf_r+0x7c2>
   870aa:	460c      	mov	r4, r1
   870ac:	3201      	adds	r2, #1
   870ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   870b0:	442c      	add	r4, r5
   870b2:	2a07      	cmp	r2, #7
   870b4:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   870b8:	e9c8 3500 	strd	r3, r5, [r8]
   870bc:	f300 858a 	bgt.w	87bd4 <_svfprintf_r+0x131c>
   870c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   870c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   870c4:	f108 0808 	add.w	r8, r8, #8
   870c8:	1a9d      	subs	r5, r3, r2
   870ca:	2d00      	cmp	r5, #0
   870cc:	f77f ad92 	ble.w	86bf4 <_svfprintf_r+0x33c>
   870d0:	2d10      	cmp	r5, #16
   870d2:	f340 860a 	ble.w	87cea <_svfprintf_r+0x1432>
   870d6:	4881      	ldr	r0, [pc, #516]	; (872dc <_svfprintf_r+0xa24>)
   870d8:	4621      	mov	r1, r4
   870da:	2310      	movs	r3, #16
   870dc:	4604      	mov	r4, r0
   870de:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   870e0:	900f      	str	r0, [sp, #60]	; 0x3c
   870e2:	e004      	b.n	870ee <_svfprintf_r+0x836>
   870e4:	3d10      	subs	r5, #16
   870e6:	2d10      	cmp	r5, #16
   870e8:	f108 0808 	add.w	r8, r8, #8
   870ec:	dd16      	ble.n	8711c <_svfprintf_r+0x864>
   870ee:	3201      	adds	r2, #1
   870f0:	3110      	adds	r1, #16
   870f2:	2a07      	cmp	r2, #7
   870f4:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   870f8:	e9c8 4300 	strd	r4, r3, [r8]
   870fc:	ddf2      	ble.n	870e4 <_svfprintf_r+0x82c>
   870fe:	4651      	mov	r1, sl
   87100:	4648      	mov	r0, r9
   87102:	aa2a      	add	r2, sp, #168	; 0xa8
   87104:	f005 f81e 	bl	8c144 <__ssprint_r>
   87108:	b9f0      	cbnz	r0, 87148 <_svfprintf_r+0x890>
   8710a:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8710e:	3d10      	subs	r5, #16
   87110:	2d10      	cmp	r5, #16
   87112:	f04f 0310 	mov.w	r3, #16
   87116:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8711a:	dce8      	bgt.n	870ee <_svfprintf_r+0x836>
   8711c:	460c      	mov	r4, r1
   8711e:	3201      	adds	r2, #1
   87120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87122:	442c      	add	r4, r5
   87124:	2a07      	cmp	r2, #7
   87126:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   8712a:	e9c8 3500 	strd	r3, r5, [r8]
   8712e:	f300 8237 	bgt.w	875a0 <_svfprintf_r+0xce8>
   87132:	f108 0808 	add.w	r8, r8, #8
   87136:	e55d      	b.n	86bf4 <_svfprintf_r+0x33c>
   87138:	4651      	mov	r1, sl
   8713a:	4648      	mov	r0, r9
   8713c:	aa2a      	add	r2, sp, #168	; 0xa8
   8713e:	f005 f801 	bl	8c144 <__ssprint_r>
   87142:	2800      	cmp	r0, #0
   87144:	f43f ad7b 	beq.w	86c3e <_svfprintf_r+0x386>
   87148:	46d3      	mov	fp, sl
   8714a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8714c:	2b00      	cmp	r3, #0
   8714e:	f43f ad8a 	beq.w	86c66 <_svfprintf_r+0x3ae>
   87152:	4648      	mov	r0, r9
   87154:	990d      	ldr	r1, [sp, #52]	; 0x34
   87156:	f003 faf3 	bl	8a740 <_free_r>
   8715a:	e584      	b.n	86c66 <_svfprintf_r+0x3ae>
   8715c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8715e:	2b01      	cmp	r3, #1
   87160:	f340 81d5 	ble.w	8750e <_svfprintf_r+0xc56>
   87164:	2301      	movs	r3, #1
   87166:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87168:	441c      	add	r4, r3
   8716a:	441d      	add	r5, r3
   8716c:	2d07      	cmp	r5, #7
   8716e:	942c      	str	r4, [sp, #176]	; 0xb0
   87170:	f8c8 7000 	str.w	r7, [r8]
   87174:	952b      	str	r5, [sp, #172]	; 0xac
   87176:	f8c8 3004 	str.w	r3, [r8, #4]
   8717a:	f300 823a 	bgt.w	875f2 <_svfprintf_r+0xd3a>
   8717e:	f108 0808 	add.w	r8, r8, #8
   87182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87184:	3501      	adds	r5, #1
   87186:	9a18      	ldr	r2, [sp, #96]	; 0x60
   87188:	441c      	add	r4, r3
   8718a:	2d07      	cmp	r5, #7
   8718c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87190:	e9c8 2300 	strd	r2, r3, [r8]
   87194:	f300 823a 	bgt.w	8760c <_svfprintf_r+0xd54>
   87198:	f108 0808 	add.w	r8, r8, #8
   8719c:	2300      	movs	r3, #0
   8719e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   871a2:	2200      	movs	r2, #0
   871a4:	f005 fed0 	bl	8cf48 <__aeabi_dcmpeq>
   871a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   871aa:	2800      	cmp	r0, #0
   871ac:	f040 81cd 	bne.w	8754a <_svfprintf_r+0xc92>
   871b0:	3b01      	subs	r3, #1
   871b2:	3501      	adds	r5, #1
   871b4:	3701      	adds	r7, #1
   871b6:	441c      	add	r4, r3
   871b8:	2d07      	cmp	r5, #7
   871ba:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   871be:	f8c8 7000 	str.w	r7, [r8]
   871c2:	f8c8 3004 	str.w	r3, [r8, #4]
   871c6:	f300 84dc 	bgt.w	87b82 <_svfprintf_r+0x12ca>
   871ca:	f108 0808 	add.w	r8, r8, #8
   871ce:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   871d0:	3501      	adds	r5, #1
   871d2:	4414      	add	r4, r2
   871d4:	ab26      	add	r3, sp, #152	; 0x98
   871d6:	2d07      	cmp	r5, #7
   871d8:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   871dc:	e9c8 3200 	strd	r3, r2, [r8]
   871e0:	f77f ad17 	ble.w	86c12 <_svfprintf_r+0x35a>
   871e4:	4651      	mov	r1, sl
   871e6:	4648      	mov	r0, r9
   871e8:	aa2a      	add	r2, sp, #168	; 0xa8
   871ea:	f004 ffab 	bl	8c144 <__ssprint_r>
   871ee:	2800      	cmp	r0, #0
   871f0:	d1aa      	bne.n	87148 <_svfprintf_r+0x890>
   871f2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   871f4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   871f8:	e50d      	b.n	86c16 <_svfprintf_r+0x35e>
   871fa:	2b01      	cmp	r3, #1
   871fc:	f000 87ca 	beq.w	88194 <_svfprintf_r+0x18dc>
   87200:	2b02      	cmp	r3, #2
   87202:	9b07      	ldr	r3, [sp, #28]
   87204:	9308      	str	r3, [sp, #32]
   87206:	f47f aea7 	bne.w	86f58 <_svfprintf_r+0x6a0>
   8720a:	9819      	ldr	r0, [sp, #100]	; 0x64
   8720c:	af56      	add	r7, sp, #344	; 0x158
   8720e:	0923      	lsrs	r3, r4, #4
   87210:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   87214:	0929      	lsrs	r1, r5, #4
   87216:	f004 020f 	and.w	r2, r4, #15
   8721a:	460d      	mov	r5, r1
   8721c:	461c      	mov	r4, r3
   8721e:	5c83      	ldrb	r3, [r0, r2]
   87220:	f807 3d01 	strb.w	r3, [r7, #-1]!
   87224:	ea54 0305 	orrs.w	r3, r4, r5
   87228:	d1f1      	bne.n	8720e <_svfprintf_r+0x956>
   8722a:	9b08      	ldr	r3, [sp, #32]
   8722c:	9307      	str	r3, [sp, #28]
   8722e:	ab56      	add	r3, sp, #344	; 0x158
   87230:	1bdb      	subs	r3, r3, r7
   87232:	930c      	str	r3, [sp, #48]	; 0x30
   87234:	e6a9      	b.n	86f8a <_svfprintf_r+0x6d2>
   87236:	2d10      	cmp	r5, #16
   87238:	f340 8668 	ble.w	87f0c <_svfprintf_r+0x1654>
   8723c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87240:	931e      	str	r3, [sp, #120]	; 0x78
   87242:	460b      	mov	r3, r1
   87244:	4639      	mov	r1, r7
   87246:	2410      	movs	r4, #16
   87248:	4637      	mov	r7, r6
   8724a:	4656      	mov	r6, sl
   8724c:	46ca      	mov	sl, r9
   8724e:	4689      	mov	r9, r1
   87250:	e004      	b.n	8725c <_svfprintf_r+0x9a4>
   87252:	3d10      	subs	r5, #16
   87254:	2d10      	cmp	r5, #16
   87256:	f108 0808 	add.w	r8, r8, #8
   8725a:	dd17      	ble.n	8728c <_svfprintf_r+0x9d4>
   8725c:	3201      	adds	r2, #1
   8725e:	4920      	ldr	r1, [pc, #128]	; (872e0 <_svfprintf_r+0xa28>)
   87260:	3310      	adds	r3, #16
   87262:	2a07      	cmp	r2, #7
   87264:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   87268:	e9c8 1400 	strd	r1, r4, [r8]
   8726c:	ddf1      	ble.n	87252 <_svfprintf_r+0x99a>
   8726e:	4631      	mov	r1, r6
   87270:	4650      	mov	r0, sl
   87272:	aa2a      	add	r2, sp, #168	; 0xa8
   87274:	f004 ff66 	bl	8c144 <__ssprint_r>
   87278:	2800      	cmp	r0, #0
   8727a:	f040 8458 	bne.w	87b2e <_svfprintf_r+0x1276>
   8727e:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   87282:	3d10      	subs	r5, #16
   87284:	2d10      	cmp	r5, #16
   87286:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8728a:	dce7      	bgt.n	8725c <_svfprintf_r+0x9a4>
   8728c:	4648      	mov	r0, r9
   8728e:	46d1      	mov	r9, sl
   87290:	46b2      	mov	sl, r6
   87292:	463e      	mov	r6, r7
   87294:	4607      	mov	r7, r0
   87296:	4619      	mov	r1, r3
   87298:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8729a:	194c      	adds	r4, r1, r5
   8729c:	3201      	adds	r2, #1
   8729e:	4910      	ldr	r1, [pc, #64]	; (872e0 <_svfprintf_r+0xa28>)
   872a0:	2a07      	cmp	r2, #7
   872a2:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   872a6:	e9c8 1500 	strd	r1, r5, [r8]
   872aa:	f300 841f 	bgt.w	87aec <_svfprintf_r+0x1234>
   872ae:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   872b2:	f108 0808 	add.w	r8, r8, #8
   872b6:	e474      	b.n	86ba2 <_svfprintf_r+0x2ea>
   872b8:	9308      	str	r3, [sp, #32]
   872ba:	2d00      	cmp	r5, #0
   872bc:	bf08      	it	eq
   872be:	2c0a      	cmpeq	r4, #10
   872c0:	f080 83d0 	bcs.w	87a64 <_svfprintf_r+0x11ac>
   872c4:	9b08      	ldr	r3, [sp, #32]
   872c6:	3430      	adds	r4, #48	; 0x30
   872c8:	9307      	str	r3, [sp, #28]
   872ca:	2301      	movs	r3, #1
   872cc:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   872d0:	930c      	str	r3, [sp, #48]	; 0x30
   872d2:	f20d 1757 	addw	r7, sp, #343	; 0x157
   872d6:	e658      	b.n	86f8a <_svfprintf_r+0x6d2>
   872d8:	0008d424 	.word	0x0008d424
   872dc:	0008d438 	.word	0x0008d438
   872e0:	0008d428 	.word	0x0008d428
   872e4:	4651      	mov	r1, sl
   872e6:	4648      	mov	r0, r9
   872e8:	aa2a      	add	r2, sp, #168	; 0xa8
   872ea:	f004 ff2b 	bl	8c144 <__ssprint_r>
   872ee:	2800      	cmp	r0, #0
   872f0:	f47f af2a 	bne.w	87148 <_svfprintf_r+0x890>
   872f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   872f6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   872f8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   872fc:	2a00      	cmp	r2, #0
   872fe:	f040 847f 	bne.w	87c00 <_svfprintf_r+0x1348>
   87302:	9b07      	ldr	r3, [sp, #28]
   87304:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87306:	f003 0301 	and.w	r3, r3, #1
   8730a:	4313      	orrs	r3, r2
   8730c:	f43f ac83 	beq.w	86c16 <_svfprintf_r+0x35e>
   87310:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87312:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87314:	3301      	adds	r3, #1
   87316:	9918      	ldr	r1, [sp, #96]	; 0x60
   87318:	4414      	add	r4, r2
   8731a:	2b07      	cmp	r3, #7
   8731c:	e9c8 1200 	strd	r1, r2, [r8]
   87320:	942c      	str	r4, [sp, #176]	; 0xb0
   87322:	932b      	str	r3, [sp, #172]	; 0xac
   87324:	f300 8524 	bgt.w	87d70 <_svfprintf_r+0x14b8>
   87328:	f108 0808 	add.w	r8, r8, #8
   8732c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8732e:	3301      	adds	r3, #1
   87330:	4414      	add	r4, r2
   87332:	2b07      	cmp	r3, #7
   87334:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87338:	e9c8 7200 	strd	r7, r2, [r8]
   8733c:	f77f ac69 	ble.w	86c12 <_svfprintf_r+0x35a>
   87340:	4651      	mov	r1, sl
   87342:	4648      	mov	r0, r9
   87344:	aa2a      	add	r2, sp, #168	; 0xa8
   87346:	f004 fefd 	bl	8c144 <__ssprint_r>
   8734a:	2800      	cmp	r0, #0
   8734c:	f47f aefc 	bne.w	87148 <_svfprintf_r+0x890>
   87350:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87352:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87356:	e45e      	b.n	86c16 <_svfprintf_r+0x35e>
   87358:	4651      	mov	r1, sl
   8735a:	4648      	mov	r0, r9
   8735c:	aa2a      	add	r2, sp, #168	; 0xa8
   8735e:	931e      	str	r3, [sp, #120]	; 0x78
   87360:	f004 fef0 	bl	8c144 <__ssprint_r>
   87364:	2800      	cmp	r0, #0
   87366:	f47f aeef 	bne.w	87148 <_svfprintf_r+0x890>
   8736a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8736c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8736e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87372:	e426      	b.n	86bc2 <_svfprintf_r+0x30a>
   87374:	4651      	mov	r1, sl
   87376:	4648      	mov	r0, r9
   87378:	aa2a      	add	r2, sp, #168	; 0xa8
   8737a:	f004 fee3 	bl	8c144 <__ssprint_r>
   8737e:	2800      	cmp	r0, #0
   87380:	f47f aee2 	bne.w	87148 <_svfprintf_r+0x890>
   87384:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87386:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8738a:	e429      	b.n	86be0 <_svfprintf_r+0x328>
   8738c:	2d10      	cmp	r5, #16
   8738e:	f340 86be 	ble.w	8810e <_svfprintf_r+0x1856>
   87392:	2610      	movs	r6, #16
   87394:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87396:	e004      	b.n	873a2 <_svfprintf_r+0xaea>
   87398:	3d10      	subs	r5, #16
   8739a:	2d10      	cmp	r5, #16
   8739c:	f108 0808 	add.w	r8, r8, #8
   873a0:	dd17      	ble.n	873d2 <_svfprintf_r+0xb1a>
   873a2:	3301      	adds	r3, #1
   873a4:	4aad      	ldr	r2, [pc, #692]	; (8765c <_svfprintf_r+0xda4>)
   873a6:	3410      	adds	r4, #16
   873a8:	2b07      	cmp	r3, #7
   873aa:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   873ae:	e9c8 2600 	strd	r2, r6, [r8]
   873b2:	ddf1      	ble.n	87398 <_svfprintf_r+0xae0>
   873b4:	4651      	mov	r1, sl
   873b6:	4648      	mov	r0, r9
   873b8:	aa2a      	add	r2, sp, #168	; 0xa8
   873ba:	f004 fec3 	bl	8c144 <__ssprint_r>
   873be:	2800      	cmp	r0, #0
   873c0:	f47f aec2 	bne.w	87148 <_svfprintf_r+0x890>
   873c4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   873c8:	3d10      	subs	r5, #16
   873ca:	2d10      	cmp	r5, #16
   873cc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   873d0:	dce7      	bgt.n	873a2 <_svfprintf_r+0xaea>
   873d2:	3301      	adds	r3, #1
   873d4:	4aa1      	ldr	r2, [pc, #644]	; (8765c <_svfprintf_r+0xda4>)
   873d6:	442c      	add	r4, r5
   873d8:	2b07      	cmp	r3, #7
   873da:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   873de:	e9c8 2500 	strd	r2, r5, [r8]
   873e2:	f77f ac21 	ble.w	86c28 <_svfprintf_r+0x370>
   873e6:	4651      	mov	r1, sl
   873e8:	4648      	mov	r0, r9
   873ea:	aa2a      	add	r2, sp, #168	; 0xa8
   873ec:	f004 feaa 	bl	8c144 <__ssprint_r>
   873f0:	2800      	cmp	r0, #0
   873f2:	f47f aea9 	bne.w	87148 <_svfprintf_r+0x890>
   873f6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   873f8:	e416      	b.n	86c28 <_svfprintf_r+0x370>
   873fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
   873fc:	2a00      	cmp	r2, #0
   873fe:	f340 8386 	ble.w	87b0e <_svfprintf_r+0x1256>
   87402:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87404:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87406:	4293      	cmp	r3, r2
   87408:	bfa8      	it	ge
   8740a:	4613      	movge	r3, r2
   8740c:	2b00      	cmp	r3, #0
   8740e:	461d      	mov	r5, r3
   87410:	dd0b      	ble.n	8742a <_svfprintf_r+0xb72>
   87412:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87414:	442c      	add	r4, r5
   87416:	3301      	adds	r3, #1
   87418:	2b07      	cmp	r3, #7
   8741a:	e9c8 7500 	strd	r7, r5, [r8]
   8741e:	942c      	str	r4, [sp, #176]	; 0xb0
   87420:	932b      	str	r3, [sp, #172]	; 0xac
   87422:	f300 851e 	bgt.w	87e62 <_svfprintf_r+0x15aa>
   87426:	f108 0808 	add.w	r8, r8, #8
   8742a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8742c:	2d00      	cmp	r5, #0
   8742e:	bfa8      	it	ge
   87430:	1b5b      	subge	r3, r3, r5
   87432:	2b00      	cmp	r3, #0
   87434:	461d      	mov	r5, r3
   87436:	f300 8256 	bgt.w	878e6 <_svfprintf_r+0x102e>
   8743a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8743c:	443b      	add	r3, r7
   8743e:	461e      	mov	r6, r3
   87440:	9b07      	ldr	r3, [sp, #28]
   87442:	055b      	lsls	r3, r3, #21
   87444:	f100 8277 	bmi.w	87936 <_svfprintf_r+0x107e>
   87448:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8744a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8744c:	4293      	cmp	r3, r2
   8744e:	db03      	blt.n	87458 <_svfprintf_r+0xba0>
   87450:	9a07      	ldr	r2, [sp, #28]
   87452:	07d5      	lsls	r5, r2, #31
   87454:	f140 847a 	bpl.w	87d4c <_svfprintf_r+0x1494>
   87458:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8745a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   8745c:	3201      	adds	r2, #1
   8745e:	9818      	ldr	r0, [sp, #96]	; 0x60
   87460:	440c      	add	r4, r1
   87462:	2a07      	cmp	r2, #7
   87464:	e9c8 0100 	strd	r0, r1, [r8]
   87468:	942c      	str	r4, [sp, #176]	; 0xb0
   8746a:	922b      	str	r2, [sp, #172]	; 0xac
   8746c:	f300 8506 	bgt.w	87e7c <_svfprintf_r+0x15c4>
   87470:	f108 0808 	add.w	r8, r8, #8
   87474:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87476:	18bd      	adds	r5, r7, r2
   87478:	1bad      	subs	r5, r5, r6
   8747a:	1ad3      	subs	r3, r2, r3
   8747c:	429d      	cmp	r5, r3
   8747e:	bfa8      	it	ge
   87480:	461d      	movge	r5, r3
   87482:	2d00      	cmp	r5, #0
   87484:	dd0b      	ble.n	8749e <_svfprintf_r+0xbe6>
   87486:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87488:	442c      	add	r4, r5
   8748a:	3201      	adds	r2, #1
   8748c:	2a07      	cmp	r2, #7
   8748e:	e9c8 6500 	strd	r6, r5, [r8]
   87492:	942c      	str	r4, [sp, #176]	; 0xb0
   87494:	922b      	str	r2, [sp, #172]	; 0xac
   87496:	f300 855f 	bgt.w	87f58 <_svfprintf_r+0x16a0>
   8749a:	f108 0808 	add.w	r8, r8, #8
   8749e:	2d00      	cmp	r5, #0
   874a0:	bfb4      	ite	lt
   874a2:	461d      	movlt	r5, r3
   874a4:	1b5d      	subge	r5, r3, r5
   874a6:	2d00      	cmp	r5, #0
   874a8:	f77f abb5 	ble.w	86c16 <_svfprintf_r+0x35e>
   874ac:	2d10      	cmp	r5, #16
   874ae:	f340 8376 	ble.w	87b9e <_svfprintf_r+0x12e6>
   874b2:	4f6b      	ldr	r7, [pc, #428]	; (87660 <_svfprintf_r+0xda8>)
   874b4:	2610      	movs	r6, #16
   874b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   874b8:	970f      	str	r7, [sp, #60]	; 0x3c
   874ba:	e005      	b.n	874c8 <_svfprintf_r+0xc10>
   874bc:	f108 0808 	add.w	r8, r8, #8
   874c0:	3d10      	subs	r5, #16
   874c2:	2d10      	cmp	r5, #16
   874c4:	f340 836e 	ble.w	87ba4 <_svfprintf_r+0x12ec>
   874c8:	3301      	adds	r3, #1
   874ca:	3410      	adds	r4, #16
   874cc:	2b07      	cmp	r3, #7
   874ce:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   874d2:	e9c8 7600 	strd	r7, r6, [r8]
   874d6:	ddf1      	ble.n	874bc <_svfprintf_r+0xc04>
   874d8:	4651      	mov	r1, sl
   874da:	4648      	mov	r0, r9
   874dc:	aa2a      	add	r2, sp, #168	; 0xa8
   874de:	f004 fe31 	bl	8c144 <__ssprint_r>
   874e2:	2800      	cmp	r0, #0
   874e4:	f47f ae30 	bne.w	87148 <_svfprintf_r+0x890>
   874e8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   874ec:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   874f0:	e7e6      	b.n	874c0 <_svfprintf_r+0xc08>
   874f2:	2b30      	cmp	r3, #48	; 0x30
   874f4:	f43f ae99 	beq.w	8722a <_svfprintf_r+0x972>
   874f8:	2330      	movs	r3, #48	; 0x30
   874fa:	3a02      	subs	r2, #2
   874fc:	f807 3c01 	strb.w	r3, [r7, #-1]
   87500:	9908      	ldr	r1, [sp, #32]
   87502:	ab56      	add	r3, sp, #344	; 0x158
   87504:	1a9b      	subs	r3, r3, r2
   87506:	4617      	mov	r7, r2
   87508:	9107      	str	r1, [sp, #28]
   8750a:	930c      	str	r3, [sp, #48]	; 0x30
   8750c:	e53d      	b.n	86f8a <_svfprintf_r+0x6d2>
   8750e:	9b07      	ldr	r3, [sp, #28]
   87510:	07d8      	lsls	r0, r3, #31
   87512:	f53f ae27 	bmi.w	87164 <_svfprintf_r+0x8ac>
   87516:	2301      	movs	r3, #1
   87518:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   8751a:	441c      	add	r4, r3
   8751c:	441d      	add	r5, r3
   8751e:	2d07      	cmp	r5, #7
   87520:	942c      	str	r4, [sp, #176]	; 0xb0
   87522:	f8c8 7000 	str.w	r7, [r8]
   87526:	952b      	str	r5, [sp, #172]	; 0xac
   87528:	f8c8 3004 	str.w	r3, [r8, #4]
   8752c:	f77f ae4d 	ble.w	871ca <_svfprintf_r+0x912>
   87530:	4651      	mov	r1, sl
   87532:	4648      	mov	r0, r9
   87534:	aa2a      	add	r2, sp, #168	; 0xa8
   87536:	f004 fe05 	bl	8c144 <__ssprint_r>
   8753a:	2800      	cmp	r0, #0
   8753c:	f47f ae04 	bne.w	87148 <_svfprintf_r+0x890>
   87540:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87544:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87548:	e641      	b.n	871ce <_svfprintf_r+0x916>
   8754a:	1e5e      	subs	r6, r3, #1
   8754c:	2e00      	cmp	r6, #0
   8754e:	f77f ae3e 	ble.w	871ce <_svfprintf_r+0x916>
   87552:	2e10      	cmp	r6, #16
   87554:	f340 871e 	ble.w	88394 <_svfprintf_r+0x1adc>
   87558:	4b41      	ldr	r3, [pc, #260]	; (87660 <_svfprintf_r+0xda8>)
   8755a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   8755e:	2710      	movs	r7, #16
   87560:	46d3      	mov	fp, sl
   87562:	930f      	str	r3, [sp, #60]	; 0x3c
   87564:	46ca      	mov	sl, r9
   87566:	4699      	mov	r9, r3
   87568:	e005      	b.n	87576 <_svfprintf_r+0xcbe>
   8756a:	f108 0808 	add.w	r8, r8, #8
   8756e:	3e10      	subs	r6, #16
   87570:	2e10      	cmp	r6, #16
   87572:	f340 82f8 	ble.w	87b66 <_svfprintf_r+0x12ae>
   87576:	3501      	adds	r5, #1
   87578:	3410      	adds	r4, #16
   8757a:	2d07      	cmp	r5, #7
   8757c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87580:	e9c8 9700 	strd	r9, r7, [r8]
   87584:	ddf1      	ble.n	8756a <_svfprintf_r+0xcb2>
   87586:	4659      	mov	r1, fp
   87588:	4650      	mov	r0, sl
   8758a:	aa2a      	add	r2, sp, #168	; 0xa8
   8758c:	f004 fdda 	bl	8c144 <__ssprint_r>
   87590:	2800      	cmp	r0, #0
   87592:	f040 85cc 	bne.w	8812e <_svfprintf_r+0x1876>
   87596:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8759a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8759e:	e7e6      	b.n	8756e <_svfprintf_r+0xcb6>
   875a0:	4651      	mov	r1, sl
   875a2:	4648      	mov	r0, r9
   875a4:	aa2a      	add	r2, sp, #168	; 0xa8
   875a6:	f004 fdcd 	bl	8c144 <__ssprint_r>
   875aa:	2800      	cmp	r0, #0
   875ac:	f47f adcc 	bne.w	87148 <_svfprintf_r+0x890>
   875b0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   875b2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   875b6:	f7ff bb1d 	b.w	86bf4 <_svfprintf_r+0x33c>
   875ba:	9b08      	ldr	r3, [sp, #32]
   875bc:	06dc      	lsls	r4, r3, #27
   875be:	f100 8119 	bmi.w	877f4 <_svfprintf_r+0xf3c>
   875c2:	9b08      	ldr	r3, [sp, #32]
   875c4:	0658      	lsls	r0, r3, #25
   875c6:	f140 8368 	bpl.w	87c9a <_svfprintf_r+0x13e2>
   875ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   875cc:	2301      	movs	r3, #1
   875ce:	f852 4b04 	ldr.w	r4, [r2], #4
   875d2:	2500      	movs	r5, #0
   875d4:	920e      	str	r2, [sp, #56]	; 0x38
   875d6:	b2a4      	uxth	r4, r4
   875d8:	f7ff ba7f 	b.w	86ada <_svfprintf_r+0x222>
   875dc:	232d      	movs	r3, #45	; 0x2d
   875de:	9a07      	ldr	r2, [sp, #28]
   875e0:	4264      	negs	r4, r4
   875e2:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   875e6:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   875ea:	2301      	movs	r3, #1
   875ec:	9208      	str	r2, [sp, #32]
   875ee:	f7ff ba77 	b.w	86ae0 <_svfprintf_r+0x228>
   875f2:	4651      	mov	r1, sl
   875f4:	4648      	mov	r0, r9
   875f6:	aa2a      	add	r2, sp, #168	; 0xa8
   875f8:	f004 fda4 	bl	8c144 <__ssprint_r>
   875fc:	2800      	cmp	r0, #0
   875fe:	f47f ada3 	bne.w	87148 <_svfprintf_r+0x890>
   87602:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87606:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8760a:	e5ba      	b.n	87182 <_svfprintf_r+0x8ca>
   8760c:	4651      	mov	r1, sl
   8760e:	4648      	mov	r0, r9
   87610:	aa2a      	add	r2, sp, #168	; 0xa8
   87612:	f004 fd97 	bl	8c144 <__ssprint_r>
   87616:	2800      	cmp	r0, #0
   87618:	f47f ad96 	bne.w	87148 <_svfprintf_r+0x890>
   8761c:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87620:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87624:	e5ba      	b.n	8719c <_svfprintf_r+0x8e4>
   87626:	9b07      	ldr	r3, [sp, #28]
   87628:	07da      	lsls	r2, r3, #31
   8762a:	f57f aaf4 	bpl.w	86c16 <_svfprintf_r+0x35e>
   8762e:	e4d9      	b.n	86fe4 <_svfprintf_r+0x72c>
   87630:	af56      	add	r7, sp, #344	; 0x158
   87632:	e4aa      	b.n	86f8a <_svfprintf_r+0x6d2>
   87634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87636:	465f      	mov	r7, fp
   87638:	f853 1b04 	ldr.w	r1, [r3], #4
   8763c:	930e      	str	r3, [sp, #56]	; 0x38
   8763e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87640:	17dd      	asrs	r5, r3, #31
   87642:	461a      	mov	r2, r3
   87644:	462b      	mov	r3, r5
   87646:	e9c1 2300 	strd	r2, r3, [r1]
   8764a:	f7ff bb03 	b.w	86c54 <_svfprintf_r+0x39c>
   8764e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87650:	2500      	movs	r5, #0
   87652:	f853 4b04 	ldr.w	r4, [r3], #4
   87656:	930e      	str	r3, [sp, #56]	; 0x38
   87658:	f7ff ba3a 	b.w	86ad0 <_svfprintf_r+0x218>
   8765c:	0008d428 	.word	0x0008d428
   87660:	0008d438 	.word	0x0008d438
   87664:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87668:	460b      	mov	r3, r1
   8766a:	4602      	mov	r2, r0
   8766c:	f005 fc9e 	bl	8cfac <__aeabi_dcmpun>
   87670:	4601      	mov	r1, r0
   87672:	2800      	cmp	r0, #0
   87674:	f040 8643 	bne.w	882fe <_svfprintf_r+0x1a46>
   87678:	2e61      	cmp	r6, #97	; 0x61
   8767a:	f000 8586 	beq.w	8818a <_svfprintf_r+0x18d2>
   8767e:	2e41      	cmp	r6, #65	; 0x41
   87680:	f000 847a 	beq.w	87f78 <_svfprintf_r+0x16c0>
   87684:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87686:	f026 0520 	bic.w	r5, r6, #32
   8768a:	1c5a      	adds	r2, r3, #1
   8768c:	9508      	str	r5, [sp, #32]
   8768e:	f000 837d 	beq.w	87d8c <_svfprintf_r+0x14d4>
   87692:	2d47      	cmp	r5, #71	; 0x47
   87694:	f000 859e 	beq.w	881d4 <_svfprintf_r+0x191c>
   87698:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8769c:	9b07      	ldr	r3, [sp, #28]
   8769e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   876a2:	9312      	str	r3, [sp, #72]	; 0x48
   876a4:	460b      	mov	r3, r1
   876a6:	2b00      	cmp	r3, #0
   876a8:	f2c0 85ba 	blt.w	88220 <_svfprintf_r+0x1968>
   876ac:	2200      	movs	r2, #0
   876ae:	930f      	str	r3, [sp, #60]	; 0x3c
   876b0:	921e      	str	r2, [sp, #120]	; 0x78
   876b2:	920d      	str	r2, [sp, #52]	; 0x34
   876b4:	900c      	str	r0, [sp, #48]	; 0x30
   876b6:	2d46      	cmp	r5, #70	; 0x46
   876b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   876ba:	f000 8407 	beq.w	87ecc <_svfprintf_r+0x1614>
   876be:	2d45      	cmp	r5, #69	; 0x45
   876c0:	f04f 0002 	mov.w	r0, #2
   876c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   876c6:	f040 83e7 	bne.w	87e98 <_svfprintf_r+0x15e0>
   876ca:	9909      	ldr	r1, [sp, #36]	; 0x24
   876cc:	9000      	str	r0, [sp, #0]
   876ce:	1c4c      	adds	r4, r1, #1
   876d0:	a928      	add	r1, sp, #160	; 0xa0
   876d2:	a825      	add	r0, sp, #148	; 0x94
   876d4:	9104      	str	r1, [sp, #16]
   876d6:	a924      	add	r1, sp, #144	; 0x90
   876d8:	e9cd 1002 	strd	r1, r0, [sp, #8]
   876dc:	9401      	str	r4, [sp, #4]
   876de:	4648      	mov	r0, r9
   876e0:	f001 feb2 	bl	89448 <_dtoa_r>
   876e4:	4607      	mov	r7, r0
   876e6:	4404      	add	r4, r0
   876e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   876ea:	9d07      	ldr	r5, [sp, #28]
   876ec:	9307      	str	r3, [sp, #28]
   876ee:	2200      	movs	r2, #0
   876f0:	2300      	movs	r3, #0
   876f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   876f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   876f6:	f005 fc27 	bl	8cf48 <__aeabi_dcmpeq>
   876fa:	2800      	cmp	r0, #0
   876fc:	f000 8398 	beq.w	87e30 <_svfprintf_r+0x1578>
   87700:	4623      	mov	r3, r4
   87702:	1bdb      	subs	r3, r3, r7
   87704:	9313      	str	r3, [sp, #76]	; 0x4c
   87706:	9b08      	ldr	r3, [sp, #32]
   87708:	2b47      	cmp	r3, #71	; 0x47
   8770a:	f000 835e 	beq.w	87dca <_svfprintf_r+0x1512>
   8770e:	9b08      	ldr	r3, [sp, #32]
   87710:	2b46      	cmp	r3, #70	; 0x46
   87712:	f000 840b 	beq.w	87f2c <_svfprintf_r+0x1674>
   87716:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87718:	9310      	str	r3, [sp, #64]	; 0x40
   8771a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8771c:	9a08      	ldr	r2, [sp, #32]
   8771e:	3b01      	subs	r3, #1
   87720:	2a41      	cmp	r2, #65	; 0x41
   87722:	9324      	str	r3, [sp, #144]	; 0x90
   87724:	f000 85ad 	beq.w	88282 <_svfprintf_r+0x19ca>
   87728:	2100      	movs	r1, #0
   8772a:	b2f2      	uxtb	r2, r6
   8772c:	2b00      	cmp	r3, #0
   8772e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   87732:	bfb6      	itet	lt
   87734:	222d      	movlt	r2, #45	; 0x2d
   87736:	222b      	movge	r2, #43	; 0x2b
   87738:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   8773a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   8773e:	bfb8      	it	lt
   87740:	f1c3 0301 	rsblt	r3, r3, #1
   87744:	2b09      	cmp	r3, #9
   87746:	f340 85a2 	ble.w	8828e <_svfprintf_r+0x19d6>
   8774a:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   8774e:	4672      	mov	r2, lr
   87750:	469c      	mov	ip, r3
   87752:	4cbf      	ldr	r4, [pc, #764]	; (87a50 <_svfprintf_r+0x1198>)
   87754:	4660      	mov	r0, ip
   87756:	4611      	mov	r1, r2
   87758:	fb84 230c 	smull	r2, r3, r4, ip
   8775c:	ea4f 72ec 	mov.w	r2, ip, asr #31
   87760:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   87764:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   87768:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   8776c:	3330      	adds	r3, #48	; 0x30
   8776e:	2863      	cmp	r0, #99	; 0x63
   87770:	4694      	mov	ip, r2
   87772:	f801 3c01 	strb.w	r3, [r1, #-1]
   87776:	f101 32ff 	add.w	r2, r1, #4294967295
   8777a:	dceb      	bgt.n	87754 <_svfprintf_r+0xe9c>
   8777c:	4663      	mov	r3, ip
   8777e:	3330      	adds	r3, #48	; 0x30
   87780:	b2d8      	uxtb	r0, r3
   87782:	1e8b      	subs	r3, r1, #2
   87784:	459e      	cmp	lr, r3
   87786:	f802 0c01 	strb.w	r0, [r2, #-1]
   8778a:	f240 862c 	bls.w	883e6 <_svfprintf_r+0x1b2e>
   8778e:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   87792:	e001      	b.n	87798 <_svfprintf_r+0xee0>
   87794:	f812 0b01 	ldrb.w	r0, [r2], #1
   87798:	4596      	cmp	lr, r2
   8779a:	f803 0b01 	strb.w	r0, [r3], #1
   8779e:	d1f9      	bne.n	87794 <_svfprintf_r+0xedc>
   877a0:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   877a4:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   877a8:	1a5b      	subs	r3, r3, r1
   877aa:	4413      	add	r3, r2
   877ac:	aa26      	add	r2, sp, #152	; 0x98
   877ae:	1a9b      	subs	r3, r3, r2
   877b0:	931b      	str	r3, [sp, #108]	; 0x6c
   877b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   877b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   877b6:	2b01      	cmp	r3, #1
   877b8:	441a      	add	r2, r3
   877ba:	920c      	str	r2, [sp, #48]	; 0x30
   877bc:	f340 85cc 	ble.w	88358 <_svfprintf_r+0x1aa0>
   877c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   877c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   877c4:	4413      	add	r3, r2
   877c6:	930c      	str	r3, [sp, #48]	; 0x30
   877c8:	2300      	movs	r3, #0
   877ca:	9312      	str	r3, [sp, #72]	; 0x48
   877cc:	9316      	str	r3, [sp, #88]	; 0x58
   877ce:	9310      	str	r3, [sp, #64]	; 0x40
   877d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   877d2:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   877d6:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   877da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   877de:	9207      	str	r2, [sp, #28]
   877e0:	9308      	str	r3, [sp, #32]
   877e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   877e4:	2b00      	cmp	r3, #0
   877e6:	f040 8317 	bne.w	87e18 <_svfprintf_r+0x1560>
   877ea:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   877ee:	9309      	str	r3, [sp, #36]	; 0x24
   877f0:	f7ff ba86 	b.w	86d00 <_svfprintf_r+0x448>
   877f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   877f6:	2301      	movs	r3, #1
   877f8:	f852 4b04 	ldr.w	r4, [r2], #4
   877fc:	2500      	movs	r5, #0
   877fe:	920e      	str	r2, [sp, #56]	; 0x38
   87800:	f7ff b96b 	b.w	86ada <_svfprintf_r+0x222>
   87804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87806:	f853 4b04 	ldr.w	r4, [r3], #4
   8780a:	17e5      	asrs	r5, r4, #31
   8780c:	930e      	str	r3, [sp, #56]	; 0x38
   8780e:	4622      	mov	r2, r4
   87810:	462b      	mov	r3, r5
   87812:	f7ff b933 	b.w	86a7c <_svfprintf_r+0x1c4>
   87816:	9b07      	ldr	r3, [sp, #28]
   87818:	9308      	str	r3, [sp, #32]
   8781a:	f7ff bae0 	b.w	86dde <_svfprintf_r+0x526>
   8781e:	4b8d      	ldr	r3, [pc, #564]	; (87a54 <_svfprintf_r+0x119c>)
   87820:	9319      	str	r3, [sp, #100]	; 0x64
   87822:	9b07      	ldr	r3, [sp, #28]
   87824:	0699      	lsls	r1, r3, #26
   87826:	f140 80fe 	bpl.w	87a26 <_svfprintf_r+0x116e>
   8782a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8782c:	3307      	adds	r3, #7
   8782e:	f023 0307 	bic.w	r3, r3, #7
   87832:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87836:	930e      	str	r3, [sp, #56]	; 0x38
   87838:	9a07      	ldr	r2, [sp, #28]
   8783a:	07d7      	lsls	r7, r2, #31
   8783c:	d50a      	bpl.n	87854 <_svfprintf_r+0xf9c>
   8783e:	ea54 0305 	orrs.w	r3, r4, r5
   87842:	d007      	beq.n	87854 <_svfprintf_r+0xf9c>
   87844:	2330      	movs	r3, #48	; 0x30
   87846:	f042 0202 	orr.w	r2, r2, #2
   8784a:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   8784e:	9207      	str	r2, [sp, #28]
   87850:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87854:	9a07      	ldr	r2, [sp, #28]
   87856:	2302      	movs	r3, #2
   87858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   8785c:	9208      	str	r2, [sp, #32]
   8785e:	f7ff b93c 	b.w	86ada <_svfprintf_r+0x222>
   87862:	4b7d      	ldr	r3, [pc, #500]	; (87a58 <_svfprintf_r+0x11a0>)
   87864:	9319      	str	r3, [sp, #100]	; 0x64
   87866:	e7dc      	b.n	87822 <_svfprintf_r+0xf6a>
   87868:	f043 0320 	orr.w	r3, r3, #32
   8786c:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87870:	9307      	str	r3, [sp, #28]
   87872:	f10b 0b01 	add.w	fp, fp, #1
   87876:	f7ff b86a 	b.w	8694e <_svfprintf_r+0x96>
   8787a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8787e:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87882:	9307      	str	r3, [sp, #28]
   87884:	f10b 0b01 	add.w	fp, fp, #1
   87888:	f7ff b861 	b.w	8694e <_svfprintf_r+0x96>
   8788c:	4651      	mov	r1, sl
   8788e:	4648      	mov	r0, r9
   87890:	aa2a      	add	r2, sp, #168	; 0xa8
   87892:	f004 fc57 	bl	8c144 <__ssprint_r>
   87896:	2800      	cmp	r0, #0
   87898:	f47f ac56 	bne.w	87148 <_svfprintf_r+0x890>
   8789c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8789e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   878a2:	f7ff bbad 	b.w	87000 <_svfprintf_r+0x748>
   878a6:	2140      	movs	r1, #64	; 0x40
   878a8:	4648      	mov	r0, r9
   878aa:	f003 fa73 	bl	8ad94 <_malloc_r>
   878ae:	f8cb 0000 	str.w	r0, [fp]
   878b2:	f8cb 0010 	str.w	r0, [fp, #16]
   878b6:	2800      	cmp	r0, #0
   878b8:	f000 858d 	beq.w	883d6 <_svfprintf_r+0x1b1e>
   878bc:	2340      	movs	r3, #64	; 0x40
   878be:	f8cb 3014 	str.w	r3, [fp, #20]
   878c2:	f7ff b811 	b.w	868e8 <_svfprintf_r+0x30>
   878c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   878c8:	463a      	mov	r2, r7
   878ca:	2b06      	cmp	r3, #6
   878cc:	bf28      	it	cs
   878ce:	2306      	movcs	r3, #6
   878d0:	9709      	str	r7, [sp, #36]	; 0x24
   878d2:	9712      	str	r7, [sp, #72]	; 0x48
   878d4:	9716      	str	r7, [sp, #88]	; 0x58
   878d6:	9710      	str	r7, [sp, #64]	; 0x40
   878d8:	970d      	str	r7, [sp, #52]	; 0x34
   878da:	9308      	str	r3, [sp, #32]
   878dc:	4f5f      	ldr	r7, [pc, #380]	; (87a5c <_svfprintf_r+0x11a4>)
   878de:	940e      	str	r4, [sp, #56]	; 0x38
   878e0:	930c      	str	r3, [sp, #48]	; 0x30
   878e2:	f7ff ba0d 	b.w	86d00 <_svfprintf_r+0x448>
   878e6:	2b10      	cmp	r3, #16
   878e8:	f340 8558 	ble.w	8839c <_svfprintf_r+0x1ae4>
   878ec:	4651      	mov	r1, sl
   878ee:	4a5c      	ldr	r2, [pc, #368]	; (87a60 <_svfprintf_r+0x11a8>)
   878f0:	46ca      	mov	sl, r9
   878f2:	9709      	str	r7, [sp, #36]	; 0x24
   878f4:	2610      	movs	r6, #16
   878f6:	4617      	mov	r7, r2
   878f8:	4689      	mov	r9, r1
   878fa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   878fc:	920f      	str	r2, [sp, #60]	; 0x3c
   878fe:	e005      	b.n	8790c <_svfprintf_r+0x1054>
   87900:	f108 0808 	add.w	r8, r8, #8
   87904:	3d10      	subs	r5, #16
   87906:	2d10      	cmp	r5, #16
   87908:	f340 81fa 	ble.w	87d00 <_svfprintf_r+0x1448>
   8790c:	3301      	adds	r3, #1
   8790e:	3410      	adds	r4, #16
   87910:	2b07      	cmp	r3, #7
   87912:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87916:	e9c8 7600 	strd	r7, r6, [r8]
   8791a:	ddf1      	ble.n	87900 <_svfprintf_r+0x1048>
   8791c:	4649      	mov	r1, r9
   8791e:	4650      	mov	r0, sl
   87920:	aa2a      	add	r2, sp, #168	; 0xa8
   87922:	f004 fc0f 	bl	8c144 <__ssprint_r>
   87926:	2800      	cmp	r0, #0
   87928:	f040 83fd 	bne.w	88126 <_svfprintf_r+0x186e>
   8792c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87930:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87934:	e7e6      	b.n	87904 <_svfprintf_r+0x104c>
   87936:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87938:	4642      	mov	r2, r8
   8793a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   8793e:	18fb      	adds	r3, r7, r3
   87940:	9309      	str	r3, [sp, #36]	; 0x24
   87942:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   87946:	970f      	str	r7, [sp, #60]	; 0x3c
   87948:	4620      	mov	r0, r4
   8794a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   8794e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   87950:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87952:	f1b8 0f00 	cmp.w	r8, #0
   87956:	d02d      	beq.n	879b4 <_svfprintf_r+0x10fc>
   87958:	bb7b      	cbnz	r3, 879ba <_svfprintf_r+0x1102>
   8795a:	3f01      	subs	r7, #1
   8795c:	f108 38ff 	add.w	r8, r8, #4294967295
   87960:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87962:	991c      	ldr	r1, [sp, #112]	; 0x70
   87964:	3301      	adds	r3, #1
   87966:	4458      	add	r0, fp
   87968:	2b07      	cmp	r3, #7
   8796a:	e9c2 1b00 	strd	r1, fp, [r2]
   8796e:	902c      	str	r0, [sp, #176]	; 0xb0
   87970:	932b      	str	r3, [sp, #172]	; 0xac
   87972:	dc62      	bgt.n	87a3a <_svfprintf_r+0x1182>
   87974:	3208      	adds	r2, #8
   87976:	9909      	ldr	r1, [sp, #36]	; 0x24
   87978:	783b      	ldrb	r3, [r7, #0]
   8797a:	1b8d      	subs	r5, r1, r6
   8797c:	429d      	cmp	r5, r3
   8797e:	bfa8      	it	ge
   87980:	461d      	movge	r5, r3
   87982:	2d00      	cmp	r5, #0
   87984:	dd0b      	ble.n	8799e <_svfprintf_r+0x10e6>
   87986:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87988:	4428      	add	r0, r5
   8798a:	3301      	adds	r3, #1
   8798c:	2b07      	cmp	r3, #7
   8798e:	e9c2 6500 	strd	r6, r5, [r2]
   87992:	902c      	str	r0, [sp, #176]	; 0xb0
   87994:	932b      	str	r3, [sp, #172]	; 0xac
   87996:	f300 8111 	bgt.w	87bbc <_svfprintf_r+0x1304>
   8799a:	783b      	ldrb	r3, [r7, #0]
   8799c:	3208      	adds	r2, #8
   8799e:	2d00      	cmp	r5, #0
   879a0:	bfb4      	ite	lt
   879a2:	461d      	movlt	r5, r3
   879a4:	1b5d      	subge	r5, r3, r5
   879a6:	2d00      	cmp	r5, #0
   879a8:	dc0b      	bgt.n	879c2 <_svfprintf_r+0x110a>
   879aa:	441e      	add	r6, r3
   879ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   879ae:	f1b8 0f00 	cmp.w	r8, #0
   879b2:	d1d1      	bne.n	87958 <_svfprintf_r+0x10a0>
   879b4:	2b00      	cmp	r3, #0
   879b6:	f000 81f9 	beq.w	87dac <_svfprintf_r+0x14f4>
   879ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   879bc:	3b01      	subs	r3, #1
   879be:	9312      	str	r3, [sp, #72]	; 0x48
   879c0:	e7ce      	b.n	87960 <_svfprintf_r+0x10a8>
   879c2:	2d10      	cmp	r5, #16
   879c4:	f340 84c5 	ble.w	88352 <_svfprintf_r+0x1a9a>
   879c8:	992b      	ldr	r1, [sp, #172]	; 0xac
   879ca:	2410      	movs	r4, #16
   879cc:	460b      	mov	r3, r1
   879ce:	e004      	b.n	879da <_svfprintf_r+0x1122>
   879d0:	3d10      	subs	r5, #16
   879d2:	2d10      	cmp	r5, #16
   879d4:	f102 0208 	add.w	r2, r2, #8
   879d8:	dd16      	ble.n	87a08 <_svfprintf_r+0x1150>
   879da:	3301      	adds	r3, #1
   879dc:	4920      	ldr	r1, [pc, #128]	; (87a60 <_svfprintf_r+0x11a8>)
   879de:	3010      	adds	r0, #16
   879e0:	2b07      	cmp	r3, #7
   879e2:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   879e6:	e9c2 1400 	strd	r1, r4, [r2]
   879ea:	ddf1      	ble.n	879d0 <_svfprintf_r+0x1118>
   879ec:	4651      	mov	r1, sl
   879ee:	4648      	mov	r0, r9
   879f0:	aa2a      	add	r2, sp, #168	; 0xa8
   879f2:	f004 fba7 	bl	8c144 <__ssprint_r>
   879f6:	2800      	cmp	r0, #0
   879f8:	f47f aba6 	bne.w	87148 <_svfprintf_r+0x890>
   879fc:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   87a00:	3d10      	subs	r5, #16
   87a02:	2d10      	cmp	r5, #16
   87a04:	aa2d      	add	r2, sp, #180	; 0xb4
   87a06:	dce8      	bgt.n	879da <_svfprintf_r+0x1122>
   87a08:	4619      	mov	r1, r3
   87a0a:	1c4b      	adds	r3, r1, #1
   87a0c:	4914      	ldr	r1, [pc, #80]	; (87a60 <_svfprintf_r+0x11a8>)
   87a0e:	4428      	add	r0, r5
   87a10:	2b07      	cmp	r3, #7
   87a12:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   87a16:	e9c2 1500 	strd	r1, r5, [r2]
   87a1a:	f300 8215 	bgt.w	87e48 <_svfprintf_r+0x1590>
   87a1e:	783b      	ldrb	r3, [r7, #0]
   87a20:	3208      	adds	r2, #8
   87a22:	441e      	add	r6, r3
   87a24:	e7c2      	b.n	879ac <_svfprintf_r+0x10f4>
   87a26:	9b07      	ldr	r3, [sp, #28]
   87a28:	06da      	lsls	r2, r3, #27
   87a2a:	f140 8084 	bpl.w	87b36 <_svfprintf_r+0x127e>
   87a2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87a30:	2500      	movs	r5, #0
   87a32:	f853 4b04 	ldr.w	r4, [r3], #4
   87a36:	930e      	str	r3, [sp, #56]	; 0x38
   87a38:	e6fe      	b.n	87838 <_svfprintf_r+0xf80>
   87a3a:	4651      	mov	r1, sl
   87a3c:	4648      	mov	r0, r9
   87a3e:	aa2a      	add	r2, sp, #168	; 0xa8
   87a40:	f004 fb80 	bl	8c144 <__ssprint_r>
   87a44:	2800      	cmp	r0, #0
   87a46:	f47f ab7f 	bne.w	87148 <_svfprintf_r+0x890>
   87a4a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87a4c:	aa2d      	add	r2, sp, #180	; 0xb4
   87a4e:	e792      	b.n	87976 <_svfprintf_r+0x10be>
   87a50:	66666667 	.word	0x66666667
   87a54:	0008d3f4 	.word	0x0008d3f4
   87a58:	0008d408 	.word	0x0008d408
   87a5c:	0008d41c 	.word	0x0008d41c
   87a60:	0008d438 	.word	0x0008d438
   87a64:	2200      	movs	r2, #0
   87a66:	9b08      	ldr	r3, [sp, #32]
   87a68:	f8cd b01c 	str.w	fp, [sp, #28]
   87a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   87a70:	960c      	str	r6, [sp, #48]	; 0x30
   87a72:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   87a76:	4693      	mov	fp, r2
   87a78:	46ca      	mov	sl, r9
   87a7a:	461e      	mov	r6, r3
   87a7c:	46c1      	mov	r9, r8
   87a7e:	af56      	add	r7, sp, #344	; 0x158
   87a80:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   87a84:	e00b      	b.n	87a9e <_svfprintf_r+0x11e6>
   87a86:	220a      	movs	r2, #10
   87a88:	2300      	movs	r3, #0
   87a8a:	4620      	mov	r0, r4
   87a8c:	4629      	mov	r1, r5
   87a8e:	f005 facb 	bl	8d028 <__aeabi_uldivmod>
   87a92:	2d00      	cmp	r5, #0
   87a94:	bf08      	it	eq
   87a96:	2c0a      	cmpeq	r4, #10
   87a98:	d31b      	bcc.n	87ad2 <_svfprintf_r+0x121a>
   87a9a:	4604      	mov	r4, r0
   87a9c:	460d      	mov	r5, r1
   87a9e:	220a      	movs	r2, #10
   87aa0:	2300      	movs	r3, #0
   87aa2:	4620      	mov	r0, r4
   87aa4:	4629      	mov	r1, r5
   87aa6:	f005 fabf 	bl	8d028 <__aeabi_uldivmod>
   87aaa:	3230      	adds	r2, #48	; 0x30
   87aac:	f807 2c01 	strb.w	r2, [r7, #-1]
   87ab0:	f10b 0b01 	add.w	fp, fp, #1
   87ab4:	3f01      	subs	r7, #1
   87ab6:	2e00      	cmp	r6, #0
   87ab8:	d0e5      	beq.n	87a86 <_svfprintf_r+0x11ce>
   87aba:	f898 3000 	ldrb.w	r3, [r8]
   87abe:	459b      	cmp	fp, r3
   87ac0:	d1e1      	bne.n	87a86 <_svfprintf_r+0x11ce>
   87ac2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   87ac6:	d0de      	beq.n	87a86 <_svfprintf_r+0x11ce>
   87ac8:	2d00      	cmp	r5, #0
   87aca:	bf08      	it	eq
   87acc:	2c0a      	cmpeq	r4, #10
   87ace:	f080 8128 	bcs.w	87d22 <_svfprintf_r+0x146a>
   87ad2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   87ad6:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   87ada:	46c8      	mov	r8, r9
   87adc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   87ade:	46d1      	mov	r9, sl
   87ae0:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87ae4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   87ae8:	f7ff bb9f 	b.w	8722a <_svfprintf_r+0x972>
   87aec:	4651      	mov	r1, sl
   87aee:	4648      	mov	r0, r9
   87af0:	aa2a      	add	r2, sp, #168	; 0xa8
   87af2:	931e      	str	r3, [sp, #120]	; 0x78
   87af4:	f004 fb26 	bl	8c144 <__ssprint_r>
   87af8:	2800      	cmp	r0, #0
   87afa:	f47f ab25 	bne.w	87148 <_svfprintf_r+0x890>
   87afe:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87b02:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87b04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87b06:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87b0a:	f7ff b84a 	b.w	86ba2 <_svfprintf_r+0x2ea>
   87b0e:	2001      	movs	r0, #1
   87b10:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87b12:	49c5      	ldr	r1, [pc, #788]	; (87e28 <_svfprintf_r+0x1570>)
   87b14:	4403      	add	r3, r0
   87b16:	4404      	add	r4, r0
   87b18:	2b07      	cmp	r3, #7
   87b1a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87b1e:	e9c8 1000 	strd	r1, r0, [r8]
   87b22:	f73f abdf 	bgt.w	872e4 <_svfprintf_r+0xa2c>
   87b26:	f108 0808 	add.w	r8, r8, #8
   87b2a:	f7ff bbe7 	b.w	872fc <_svfprintf_r+0xa44>
   87b2e:	46d1      	mov	r9, sl
   87b30:	46b3      	mov	fp, r6
   87b32:	f7ff bb0a 	b.w	8714a <_svfprintf_r+0x892>
   87b36:	9b07      	ldr	r3, [sp, #28]
   87b38:	065b      	lsls	r3, r3, #25
   87b3a:	f140 80cb 	bpl.w	87cd4 <_svfprintf_r+0x141c>
   87b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87b40:	2500      	movs	r5, #0
   87b42:	f853 4b04 	ldr.w	r4, [r3], #4
   87b46:	930e      	str	r3, [sp, #56]	; 0x38
   87b48:	b2a4      	uxth	r4, r4
   87b4a:	e675      	b.n	87838 <_svfprintf_r+0xf80>
   87b4c:	4651      	mov	r1, sl
   87b4e:	4648      	mov	r0, r9
   87b50:	aa2a      	add	r2, sp, #168	; 0xa8
   87b52:	f004 faf7 	bl	8c144 <__ssprint_r>
   87b56:	2800      	cmp	r0, #0
   87b58:	f47f aaf6 	bne.w	87148 <_svfprintf_r+0x890>
   87b5c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87b5e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87b62:	f7ff ba3a 	b.w	86fda <_svfprintf_r+0x722>
   87b66:	46d1      	mov	r9, sl
   87b68:	46da      	mov	sl, fp
   87b6a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   87b6e:	3501      	adds	r5, #1
   87b70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87b72:	4434      	add	r4, r6
   87b74:	2d07      	cmp	r5, #7
   87b76:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87b7a:	e9c8 3600 	strd	r3, r6, [r8]
   87b7e:	f77f ab24 	ble.w	871ca <_svfprintf_r+0x912>
   87b82:	4651      	mov	r1, sl
   87b84:	4648      	mov	r0, r9
   87b86:	aa2a      	add	r2, sp, #168	; 0xa8
   87b88:	f004 fadc 	bl	8c144 <__ssprint_r>
   87b8c:	2800      	cmp	r0, #0
   87b8e:	f47f aadb 	bne.w	87148 <_svfprintf_r+0x890>
   87b92:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87b96:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87b9a:	f7ff bb18 	b.w	871ce <_svfprintf_r+0x916>
   87b9e:	4aa3      	ldr	r2, [pc, #652]	; (87e2c <_svfprintf_r+0x1574>)
   87ba0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87ba2:	920f      	str	r2, [sp, #60]	; 0x3c
   87ba4:	3301      	adds	r3, #1
   87ba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87ba8:	442c      	add	r4, r5
   87baa:	2b07      	cmp	r3, #7
   87bac:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87bb0:	e9c8 2500 	strd	r2, r5, [r8]
   87bb4:	f77f a82d 	ble.w	86c12 <_svfprintf_r+0x35a>
   87bb8:	f7ff bbc2 	b.w	87340 <_svfprintf_r+0xa88>
   87bbc:	4651      	mov	r1, sl
   87bbe:	4648      	mov	r0, r9
   87bc0:	aa2a      	add	r2, sp, #168	; 0xa8
   87bc2:	f004 fabf 	bl	8c144 <__ssprint_r>
   87bc6:	2800      	cmp	r0, #0
   87bc8:	f47f aabe 	bne.w	87148 <_svfprintf_r+0x890>
   87bcc:	783b      	ldrb	r3, [r7, #0]
   87bce:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87bd0:	aa2d      	add	r2, sp, #180	; 0xb4
   87bd2:	e6e4      	b.n	8799e <_svfprintf_r+0x10e6>
   87bd4:	4651      	mov	r1, sl
   87bd6:	4648      	mov	r0, r9
   87bd8:	aa2a      	add	r2, sp, #168	; 0xa8
   87bda:	f004 fab3 	bl	8c144 <__ssprint_r>
   87bde:	2800      	cmp	r0, #0
   87be0:	f47f aab2 	bne.w	87148 <_svfprintf_r+0x890>
   87be4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87be6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87bea:	f7fe bffd 	b.w	86be8 <_svfprintf_r+0x330>
   87bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87bf0:	990a      	ldr	r1, [sp, #40]	; 0x28
   87bf2:	f853 2b04 	ldr.w	r2, [r3], #4
   87bf6:	465f      	mov	r7, fp
   87bf8:	6011      	str	r1, [r2, #0]
   87bfa:	930e      	str	r3, [sp, #56]	; 0x38
   87bfc:	f7ff b82a 	b.w	86c54 <_svfprintf_r+0x39c>
   87c00:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87c02:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87c04:	3301      	adds	r3, #1
   87c06:	9818      	ldr	r0, [sp, #96]	; 0x60
   87c08:	440c      	add	r4, r1
   87c0a:	2b07      	cmp	r3, #7
   87c0c:	e9c8 0100 	strd	r0, r1, [r8]
   87c10:	942c      	str	r4, [sp, #176]	; 0xb0
   87c12:	932b      	str	r3, [sp, #172]	; 0xac
   87c14:	f300 80ac 	bgt.w	87d70 <_svfprintf_r+0x14b8>
   87c18:	f108 0808 	add.w	r8, r8, #8
   87c1c:	2a00      	cmp	r2, #0
   87c1e:	f6bf ab85 	bge.w	8732c <_svfprintf_r+0xa74>
   87c22:	4255      	negs	r5, r2
   87c24:	3210      	adds	r2, #16
   87c26:	f280 83d3 	bge.w	883d0 <_svfprintf_r+0x1b18>
   87c2a:	4651      	mov	r1, sl
   87c2c:	4a7f      	ldr	r2, [pc, #508]	; (87e2c <_svfprintf_r+0x1574>)
   87c2e:	46ca      	mov	sl, r9
   87c30:	9709      	str	r7, [sp, #36]	; 0x24
   87c32:	2610      	movs	r6, #16
   87c34:	4617      	mov	r7, r2
   87c36:	4689      	mov	r9, r1
   87c38:	920f      	str	r2, [sp, #60]	; 0x3c
   87c3a:	e005      	b.n	87c48 <_svfprintf_r+0x1390>
   87c3c:	f108 0808 	add.w	r8, r8, #8
   87c40:	3d10      	subs	r5, #16
   87c42:	2d10      	cmp	r5, #16
   87c44:	f340 82aa 	ble.w	8819c <_svfprintf_r+0x18e4>
   87c48:	3301      	adds	r3, #1
   87c4a:	3410      	adds	r4, #16
   87c4c:	2b07      	cmp	r3, #7
   87c4e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87c52:	e9c8 7600 	strd	r7, r6, [r8]
   87c56:	ddf1      	ble.n	87c3c <_svfprintf_r+0x1384>
   87c58:	4649      	mov	r1, r9
   87c5a:	4650      	mov	r0, sl
   87c5c:	aa2a      	add	r2, sp, #168	; 0xa8
   87c5e:	f004 fa71 	bl	8c144 <__ssprint_r>
   87c62:	2800      	cmp	r0, #0
   87c64:	f040 825f 	bne.w	88126 <_svfprintf_r+0x186e>
   87c68:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87c6c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c70:	e7e6      	b.n	87c40 <_svfprintf_r+0x1388>
   87c72:	4638      	mov	r0, r7
   87c74:	f004 fa04 	bl	8c080 <strlen>
   87c78:	462b      	mov	r3, r5
   87c7a:	4602      	mov	r2, r0
   87c7c:	9509      	str	r5, [sp, #36]	; 0x24
   87c7e:	f7ff b894 	b.w	86daa <_svfprintf_r+0x4f2>
   87c82:	9b07      	ldr	r3, [sp, #28]
   87c84:	2500      	movs	r5, #0
   87c86:	f413 7f00 	tst.w	r3, #512	; 0x200
   87c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87c8c:	f853 4b04 	ldr.w	r4, [r3], #4
   87c90:	930e      	str	r3, [sp, #56]	; 0x38
   87c92:	bf18      	it	ne
   87c94:	b2e4      	uxtbne	r4, r4
   87c96:	f7fe bf1b 	b.w	86ad0 <_svfprintf_r+0x218>
   87c9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87c9c:	9b08      	ldr	r3, [sp, #32]
   87c9e:	f852 4b04 	ldr.w	r4, [r2], #4
   87ca2:	f413 7f00 	tst.w	r3, #512	; 0x200
   87ca6:	f04f 0500 	mov.w	r5, #0
   87caa:	f04f 0301 	mov.w	r3, #1
   87cae:	920e      	str	r2, [sp, #56]	; 0x38
   87cb0:	bf18      	it	ne
   87cb2:	b2e4      	uxtbne	r4, r4
   87cb4:	f7fe bf11 	b.w	86ada <_svfprintf_r+0x222>
   87cb8:	9b07      	ldr	r3, [sp, #28]
   87cba:	f413 7f00 	tst.w	r3, #512	; 0x200
   87cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87cc0:	f853 4b04 	ldr.w	r4, [r3], #4
   87cc4:	bf18      	it	ne
   87cc6:	b264      	sxtbne	r4, r4
   87cc8:	17e5      	asrs	r5, r4, #31
   87cca:	930e      	str	r3, [sp, #56]	; 0x38
   87ccc:	4622      	mov	r2, r4
   87cce:	462b      	mov	r3, r5
   87cd0:	f7fe bed4 	b.w	86a7c <_svfprintf_r+0x1c4>
   87cd4:	9b07      	ldr	r3, [sp, #28]
   87cd6:	2500      	movs	r5, #0
   87cd8:	f413 7f00 	tst.w	r3, #512	; 0x200
   87cdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87cde:	f853 4b04 	ldr.w	r4, [r3], #4
   87ce2:	930e      	str	r3, [sp, #56]	; 0x38
   87ce4:	bf18      	it	ne
   87ce6:	b2e4      	uxtbne	r4, r4
   87ce8:	e5a6      	b.n	87838 <_svfprintf_r+0xf80>
   87cea:	4b50      	ldr	r3, [pc, #320]	; (87e2c <_svfprintf_r+0x1574>)
   87cec:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87cee:	930f      	str	r3, [sp, #60]	; 0x3c
   87cf0:	f7ff ba15 	b.w	8711e <_svfprintf_r+0x866>
   87cf4:	232d      	movs	r3, #45	; 0x2d
   87cf6:	461a      	mov	r2, r3
   87cf8:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87cfc:	f7fe bfee 	b.w	86cdc <_svfprintf_r+0x424>
   87d00:	464a      	mov	r2, r9
   87d02:	46d1      	mov	r9, sl
   87d04:	4692      	mov	sl, r2
   87d06:	9f09      	ldr	r7, [sp, #36]	; 0x24
   87d08:	3301      	adds	r3, #1
   87d0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87d0c:	442c      	add	r4, r5
   87d0e:	2b07      	cmp	r3, #7
   87d10:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87d14:	e9c8 2500 	strd	r2, r5, [r8]
   87d18:	dc3b      	bgt.n	87d92 <_svfprintf_r+0x14da>
   87d1a:	f108 0808 	add.w	r8, r8, #8
   87d1e:	f7ff bb8c 	b.w	8743a <_svfprintf_r+0xb82>
   87d22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   87d24:	991c      	ldr	r1, [sp, #112]	; 0x70
   87d26:	1aff      	subs	r7, r7, r3
   87d28:	461a      	mov	r2, r3
   87d2a:	4638      	mov	r0, r7
   87d2c:	f004 f9d6 	bl	8c0dc <strncpy>
   87d30:	f898 3001 	ldrb.w	r3, [r8, #1]
   87d34:	b10b      	cbz	r3, 87d3a <_svfprintf_r+0x1482>
   87d36:	f108 0801 	add.w	r8, r8, #1
   87d3a:	220a      	movs	r2, #10
   87d3c:	2300      	movs	r3, #0
   87d3e:	4620      	mov	r0, r4
   87d40:	4629      	mov	r1, r5
   87d42:	f005 f971 	bl	8d028 <__aeabi_uldivmod>
   87d46:	f04f 0b00 	mov.w	fp, #0
   87d4a:	e6a6      	b.n	87a9a <_svfprintf_r+0x11e2>
   87d4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87d4e:	18bd      	adds	r5, r7, r2
   87d50:	1bad      	subs	r5, r5, r6
   87d52:	1ad3      	subs	r3, r2, r3
   87d54:	429d      	cmp	r5, r3
   87d56:	bfa8      	it	ge
   87d58:	461d      	movge	r5, r3
   87d5a:	f7ff bba0 	b.w	8749e <_svfprintf_r+0xbe6>
   87d5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87d60:	990a      	ldr	r1, [sp, #40]	; 0x28
   87d62:	f853 2b04 	ldr.w	r2, [r3], #4
   87d66:	465f      	mov	r7, fp
   87d68:	8011      	strh	r1, [r2, #0]
   87d6a:	930e      	str	r3, [sp, #56]	; 0x38
   87d6c:	f7fe bf72 	b.w	86c54 <_svfprintf_r+0x39c>
   87d70:	4651      	mov	r1, sl
   87d72:	4648      	mov	r0, r9
   87d74:	aa2a      	add	r2, sp, #168	; 0xa8
   87d76:	f004 f9e5 	bl	8c144 <__ssprint_r>
   87d7a:	2800      	cmp	r0, #0
   87d7c:	f47f a9e4 	bne.w	87148 <_svfprintf_r+0x890>
   87d80:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87d84:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87d86:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87d8a:	e747      	b.n	87c1c <_svfprintf_r+0x1364>
   87d8c:	2306      	movs	r3, #6
   87d8e:	9309      	str	r3, [sp, #36]	; 0x24
   87d90:	e482      	b.n	87698 <_svfprintf_r+0xde0>
   87d92:	4651      	mov	r1, sl
   87d94:	4648      	mov	r0, r9
   87d96:	aa2a      	add	r2, sp, #168	; 0xa8
   87d98:	f004 f9d4 	bl	8c144 <__ssprint_r>
   87d9c:	2800      	cmp	r0, #0
   87d9e:	f47f a9d3 	bne.w	87148 <_svfprintf_r+0x890>
   87da2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87da4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87da8:	f7ff bb47 	b.w	8743a <_svfprintf_r+0xb82>
   87dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87dae:	971a      	str	r7, [sp, #104]	; 0x68
   87db0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   87db2:	4690      	mov	r8, r2
   87db4:	18fb      	adds	r3, r7, r3
   87db6:	429e      	cmp	r6, r3
   87db8:	4632      	mov	r2, r6
   87dba:	bf28      	it	cs
   87dbc:	461a      	movcs	r2, r3
   87dbe:	4604      	mov	r4, r0
   87dc0:	4616      	mov	r6, r2
   87dc2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87dc6:	f7ff bb3f 	b.w	87448 <_svfprintf_r+0xb90>
   87dca:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87dcc:	1cd8      	adds	r0, r3, #3
   87dce:	9310      	str	r3, [sp, #64]	; 0x40
   87dd0:	db02      	blt.n	87dd8 <_svfprintf_r+0x1520>
   87dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87dd4:	4293      	cmp	r3, r2
   87dd6:	dd04      	ble.n	87de2 <_svfprintf_r+0x152a>
   87dd8:	3e02      	subs	r6, #2
   87dda:	f026 0320 	bic.w	r3, r6, #32
   87dde:	9308      	str	r3, [sp, #32]
   87de0:	e49b      	b.n	8771a <_svfprintf_r+0xe62>
   87de2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87de4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   87de6:	428b      	cmp	r3, r1
   87de8:	f2c0 817a 	blt.w	880e0 <_svfprintf_r+0x1828>
   87dec:	07ea      	lsls	r2, r5, #31
   87dee:	f140 8283 	bpl.w	882f8 <_svfprintf_r+0x1a40>
   87df2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87df4:	4413      	add	r3, r2
   87df6:	930c      	str	r3, [sp, #48]	; 0x30
   87df8:	056e      	lsls	r6, r5, #21
   87dfa:	f140 8277 	bpl.w	882ec <_svfprintf_r+0x1a34>
   87dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87e00:	2b00      	cmp	r3, #0
   87e02:	f300 8210 	bgt.w	88226 <_svfprintf_r+0x196e>
   87e06:	2667      	movs	r6, #103	; 0x67
   87e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87e0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87e0e:	9308      	str	r3, [sp, #32]
   87e10:	2300      	movs	r3, #0
   87e12:	9312      	str	r3, [sp, #72]	; 0x48
   87e14:	9316      	str	r3, [sp, #88]	; 0x58
   87e16:	e4e4      	b.n	877e2 <_svfprintf_r+0xf2a>
   87e18:	222d      	movs	r2, #45	; 0x2d
   87e1a:	2300      	movs	r3, #0
   87e1c:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   87e20:	9309      	str	r3, [sp, #36]	; 0x24
   87e22:	f7fe bf70 	b.w	86d06 <_svfprintf_r+0x44e>
   87e26:	bf00      	nop
   87e28:	0008d424 	.word	0x0008d424
   87e2c:	0008d438 	.word	0x0008d438
   87e30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87e32:	42a3      	cmp	r3, r4
   87e34:	f4bf ac65 	bcs.w	87702 <_svfprintf_r+0xe4a>
   87e38:	2130      	movs	r1, #48	; 0x30
   87e3a:	1c5a      	adds	r2, r3, #1
   87e3c:	9228      	str	r2, [sp, #160]	; 0xa0
   87e3e:	7019      	strb	r1, [r3, #0]
   87e40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87e42:	429c      	cmp	r4, r3
   87e44:	d8f9      	bhi.n	87e3a <_svfprintf_r+0x1582>
   87e46:	e45c      	b.n	87702 <_svfprintf_r+0xe4a>
   87e48:	4651      	mov	r1, sl
   87e4a:	4648      	mov	r0, r9
   87e4c:	aa2a      	add	r2, sp, #168	; 0xa8
   87e4e:	f004 f979 	bl	8c144 <__ssprint_r>
   87e52:	2800      	cmp	r0, #0
   87e54:	f47f a978 	bne.w	87148 <_svfprintf_r+0x890>
   87e58:	783b      	ldrb	r3, [r7, #0]
   87e5a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87e5c:	aa2d      	add	r2, sp, #180	; 0xb4
   87e5e:	441e      	add	r6, r3
   87e60:	e5a4      	b.n	879ac <_svfprintf_r+0x10f4>
   87e62:	4651      	mov	r1, sl
   87e64:	4648      	mov	r0, r9
   87e66:	aa2a      	add	r2, sp, #168	; 0xa8
   87e68:	f004 f96c 	bl	8c144 <__ssprint_r>
   87e6c:	2800      	cmp	r0, #0
   87e6e:	f47f a96b 	bne.w	87148 <_svfprintf_r+0x890>
   87e72:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87e74:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87e78:	f7ff bad7 	b.w	8742a <_svfprintf_r+0xb72>
   87e7c:	4651      	mov	r1, sl
   87e7e:	4648      	mov	r0, r9
   87e80:	aa2a      	add	r2, sp, #168	; 0xa8
   87e82:	f004 f95f 	bl	8c144 <__ssprint_r>
   87e86:	2800      	cmp	r0, #0
   87e88:	f47f a95e 	bne.w	87148 <_svfprintf_r+0x890>
   87e8c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87e8e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87e90:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87e94:	f7ff baee 	b.w	87474 <_svfprintf_r+0xbbc>
   87e98:	9c09      	ldr	r4, [sp, #36]	; 0x24
   87e9a:	a928      	add	r1, sp, #160	; 0xa0
   87e9c:	e9cd 0400 	strd	r0, r4, [sp]
   87ea0:	9104      	str	r1, [sp, #16]
   87ea2:	a825      	add	r0, sp, #148	; 0x94
   87ea4:	a924      	add	r1, sp, #144	; 0x90
   87ea6:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87eaa:	4648      	mov	r0, r9
   87eac:	f001 facc 	bl	89448 <_dtoa_r>
   87eb0:	2d47      	cmp	r5, #71	; 0x47
   87eb2:	4607      	mov	r7, r0
   87eb4:	d119      	bne.n	87eea <_svfprintf_r+0x1632>
   87eb6:	9d07      	ldr	r5, [sp, #28]
   87eb8:	462b      	mov	r3, r5
   87eba:	07db      	lsls	r3, r3, #31
   87ebc:	f100 812a 	bmi.w	88114 <_svfprintf_r+0x185c>
   87ec0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87ec2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87ec4:	9207      	str	r2, [sp, #28]
   87ec6:	2247      	movs	r2, #71	; 0x47
   87ec8:	9208      	str	r2, [sp, #32]
   87eca:	e41a      	b.n	87702 <_svfprintf_r+0xe4a>
   87ecc:	2003      	movs	r0, #3
   87ece:	9c09      	ldr	r4, [sp, #36]	; 0x24
   87ed0:	a928      	add	r1, sp, #160	; 0xa0
   87ed2:	e9cd 0400 	strd	r0, r4, [sp]
   87ed6:	9104      	str	r1, [sp, #16]
   87ed8:	a825      	add	r0, sp, #148	; 0x94
   87eda:	a924      	add	r1, sp, #144	; 0x90
   87edc:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87ee2:	4648      	mov	r0, r9
   87ee4:	f001 fab0 	bl	89448 <_dtoa_r>
   87ee8:	4607      	mov	r7, r0
   87eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87eec:	2d46      	cmp	r5, #70	; 0x46
   87eee:	eb07 0403 	add.w	r4, r7, r3
   87ef2:	f47f abf9 	bne.w	876e8 <_svfprintf_r+0xe30>
   87ef6:	783b      	ldrb	r3, [r7, #0]
   87ef8:	2b30      	cmp	r3, #48	; 0x30
   87efa:	f000 821c 	beq.w	88336 <_svfprintf_r+0x1a7e>
   87efe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87f00:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87f02:	9d07      	ldr	r5, [sp, #28]
   87f04:	441c      	add	r4, r3
   87f06:	9207      	str	r2, [sp, #28]
   87f08:	f7ff bbf1 	b.w	876ee <_svfprintf_r+0xe36>
   87f0c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87f10:	f7ff b9c3 	b.w	8729a <_svfprintf_r+0x9e2>
   87f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87f16:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87f1a:	9308      	str	r3, [sp, #32]
   87f1c:	930c      	str	r3, [sp, #48]	; 0x30
   87f1e:	9009      	str	r0, [sp, #36]	; 0x24
   87f20:	940e      	str	r4, [sp, #56]	; 0x38
   87f22:	9012      	str	r0, [sp, #72]	; 0x48
   87f24:	9016      	str	r0, [sp, #88]	; 0x58
   87f26:	9010      	str	r0, [sp, #64]	; 0x40
   87f28:	f7fe beea 	b.w	86d00 <_svfprintf_r+0x448>
   87f2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87f2e:	2a00      	cmp	r2, #0
   87f30:	9210      	str	r2, [sp, #64]	; 0x40
   87f32:	f340 821b 	ble.w	8836c <_svfprintf_r+0x1ab4>
   87f36:	9909      	ldr	r1, [sp, #36]	; 0x24
   87f38:	f005 0301 	and.w	r3, r5, #1
   87f3c:	430b      	orrs	r3, r1
   87f3e:	f040 819a 	bne.w	88276 <_svfprintf_r+0x19be>
   87f42:	2666      	movs	r6, #102	; 0x66
   87f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87f46:	930c      	str	r3, [sp, #48]	; 0x30
   87f48:	056a      	lsls	r2, r5, #21
   87f4a:	f100 816d 	bmi.w	88228 <_svfprintf_r+0x1970>
   87f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87f50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87f54:	9308      	str	r3, [sp, #32]
   87f56:	e75b      	b.n	87e10 <_svfprintf_r+0x1558>
   87f58:	4651      	mov	r1, sl
   87f5a:	4648      	mov	r0, r9
   87f5c:	aa2a      	add	r2, sp, #168	; 0xa8
   87f5e:	f004 f8f1 	bl	8c144 <__ssprint_r>
   87f62:	2800      	cmp	r0, #0
   87f64:	f47f a8f0 	bne.w	87148 <_svfprintf_r+0x890>
   87f68:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87f6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87f6c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87f6e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f72:	1ad3      	subs	r3, r2, r3
   87f74:	f7ff ba93 	b.w	8749e <_svfprintf_r+0xbe6>
   87f78:	2330      	movs	r3, #48	; 0x30
   87f7a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87f7e:	2358      	movs	r3, #88	; 0x58
   87f80:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   87f84:	9b07      	ldr	r3, [sp, #28]
   87f86:	f043 0402 	orr.w	r4, r3, #2
   87f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87f8c:	2b63      	cmp	r3, #99	; 0x63
   87f8e:	f300 80f2 	bgt.w	88176 <_svfprintf_r+0x18be>
   87f92:	2300      	movs	r3, #0
   87f94:	af3d      	add	r7, sp, #244	; 0xf4
   87f96:	930d      	str	r3, [sp, #52]	; 0x34
   87f98:	9b07      	ldr	r3, [sp, #28]
   87f9a:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87f9e:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   87fa2:	9312      	str	r3, [sp, #72]	; 0x48
   87fa4:	4613      	mov	r3, r2
   87fa6:	2b00      	cmp	r3, #0
   87fa8:	f026 0520 	bic.w	r5, r6, #32
   87fac:	9407      	str	r4, [sp, #28]
   87fae:	f2c0 808d 	blt.w	880cc <_svfprintf_r+0x1814>
   87fb2:	930f      	str	r3, [sp, #60]	; 0x3c
   87fb4:	2300      	movs	r3, #0
   87fb6:	9508      	str	r5, [sp, #32]
   87fb8:	910c      	str	r1, [sp, #48]	; 0x30
   87fba:	931e      	str	r3, [sp, #120]	; 0x78
   87fbc:	2e61      	cmp	r6, #97	; 0x61
   87fbe:	f000 817d 	beq.w	882bc <_svfprintf_r+0x1a04>
   87fc2:	2e41      	cmp	r6, #65	; 0x41
   87fc4:	f47f ab77 	bne.w	876b6 <_svfprintf_r+0xdfe>
   87fc8:	aa24      	add	r2, sp, #144	; 0x90
   87fca:	980c      	ldr	r0, [sp, #48]	; 0x30
   87fcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87fce:	f003 ffc7 	bl	8bf60 <frexp>
   87fd2:	2200      	movs	r2, #0
   87fd4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87fd8:	f004 fd4e 	bl	8ca78 <__aeabi_dmul>
   87fdc:	4604      	mov	r4, r0
   87fde:	460d      	mov	r5, r1
   87fe0:	2200      	movs	r2, #0
   87fe2:	2300      	movs	r3, #0
   87fe4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   87fe8:	f004 ffae 	bl	8cf48 <__aeabi_dcmpeq>
   87fec:	b108      	cbz	r0, 87ff2 <_svfprintf_r+0x173a>
   87fee:	2301      	movs	r3, #1
   87ff0:	9324      	str	r3, [sp, #144]	; 0x90
   87ff2:	4bae      	ldr	r3, [pc, #696]	; (882ac <_svfprintf_r+0x19f4>)
   87ff4:	930c      	str	r3, [sp, #48]	; 0x30
   87ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87ff8:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   87ffc:	3b01      	subs	r3, #1
   87ffe:	9613      	str	r6, [sp, #76]	; 0x4c
   88000:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   88004:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   88008:	9721      	str	r7, [sp, #132]	; 0x84
   8800a:	46ba      	mov	sl, r7
   8800c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   88010:	4699      	mov	r9, r3
   88012:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   88016:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   8801a:	e006      	b.n	8802a <_svfprintf_r+0x1772>
   8801c:	2200      	movs	r2, #0
   8801e:	2300      	movs	r3, #0
   88020:	f004 ff92 	bl	8cf48 <__aeabi_dcmpeq>
   88024:	f109 39ff 	add.w	r9, r9, #4294967295
   88028:	b9e8      	cbnz	r0, 88066 <_svfprintf_r+0x17ae>
   8802a:	2200      	movs	r2, #0
   8802c:	4ba0      	ldr	r3, [pc, #640]	; (882b0 <_svfprintf_r+0x19f8>)
   8802e:	4630      	mov	r0, r6
   88030:	4639      	mov	r1, r7
   88032:	f004 fd21 	bl	8ca78 <__aeabi_dmul>
   88036:	460d      	mov	r5, r1
   88038:	4604      	mov	r4, r0
   8803a:	f004 ffcd 	bl	8cfd8 <__aeabi_d2iz>
   8803e:	4680      	mov	r8, r0
   88040:	f004 fcb0 	bl	8c9a4 <__aeabi_i2d>
   88044:	460b      	mov	r3, r1
   88046:	4602      	mov	r2, r0
   88048:	4629      	mov	r1, r5
   8804a:	4620      	mov	r0, r4
   8804c:	f004 fb5c 	bl	8c708 <__aeabi_dsub>
   88050:	f81b 3008 	ldrb.w	r3, [fp, r8]
   88054:	f1b9 3fff 	cmp.w	r9, #4294967295
   88058:	4655      	mov	r5, sl
   8805a:	4606      	mov	r6, r0
   8805c:	460f      	mov	r7, r1
   8805e:	464c      	mov	r4, r9
   88060:	f80a 3b01 	strb.w	r3, [sl], #1
   88064:	d1da      	bne.n	8801c <_svfprintf_r+0x1764>
   88066:	4630      	mov	r0, r6
   88068:	4639      	mov	r1, r7
   8806a:	2200      	movs	r2, #0
   8806c:	4b91      	ldr	r3, [pc, #580]	; (882b4 <_svfprintf_r+0x19fc>)
   8806e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   88072:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   88074:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   88078:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   8807c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88080:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   88084:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   88088:	9f21      	ldr	r7, [sp, #132]	; 0x84
   8808a:	f004 ff85 	bl	8cf98 <__aeabi_dcmpgt>
   8808e:	2800      	cmp	r0, #0
   88090:	d155      	bne.n	8813e <_svfprintf_r+0x1886>
   88092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88096:	2200      	movs	r2, #0
   88098:	4b86      	ldr	r3, [pc, #536]	; (882b4 <_svfprintf_r+0x19fc>)
   8809a:	f004 ff55 	bl	8cf48 <__aeabi_dcmpeq>
   8809e:	b110      	cbz	r0, 880a6 <_svfprintf_r+0x17ee>
   880a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   880a2:	07db      	lsls	r3, r3, #31
   880a4:	d44b      	bmi.n	8813e <_svfprintf_r+0x1886>
   880a6:	2c00      	cmp	r4, #0
   880a8:	db08      	blt.n	880bc <_svfprintf_r+0x1804>
   880aa:	2230      	movs	r2, #48	; 0x30
   880ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
   880ae:	1c63      	adds	r3, r4, #1
   880b0:	440b      	add	r3, r1
   880b2:	f801 2b01 	strb.w	r2, [r1], #1
   880b6:	428b      	cmp	r3, r1
   880b8:	d1fb      	bne.n	880b2 <_svfprintf_r+0x17fa>
   880ba:	910f      	str	r1, [sp, #60]	; 0x3c
   880bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   880be:	9d07      	ldr	r5, [sp, #28]
   880c0:	1bdb      	subs	r3, r3, r7
   880c2:	9313      	str	r3, [sp, #76]	; 0x4c
   880c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   880c6:	9307      	str	r3, [sp, #28]
   880c8:	f7ff bb1d 	b.w	87706 <_svfprintf_r+0xe4e>
   880cc:	9508      	str	r5, [sp, #32]
   880ce:	232d      	movs	r3, #45	; 0x2d
   880d0:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   880d4:	931e      	str	r3, [sp, #120]	; 0x78
   880d6:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   880da:	910c      	str	r1, [sp, #48]	; 0x30
   880dc:	930f      	str	r3, [sp, #60]	; 0x3c
   880de:	e76d      	b.n	87fbc <_svfprintf_r+0x1704>
   880e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   880e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   880e4:	189a      	adds	r2, r3, r2
   880e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   880e8:	920c      	str	r2, [sp, #48]	; 0x30
   880ea:	2b00      	cmp	r3, #0
   880ec:	f340 811a 	ble.w	88324 <_svfprintf_r+0x1a6c>
   880f0:	2667      	movs	r6, #103	; 0x67
   880f2:	e729      	b.n	87f48 <_svfprintf_r+0x1690>
   880f4:	2300      	movs	r3, #0
   880f6:	9309      	str	r3, [sp, #36]	; 0x24
   880f8:	f7fe bc2b 	b.w	86952 <_svfprintf_r+0x9a>
   880fc:	4648      	mov	r0, r9
   880fe:	4651      	mov	r1, sl
   88100:	aa2a      	add	r2, sp, #168	; 0xa8
   88102:	f004 f81f 	bl	8c144 <__ssprint_r>
   88106:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   8810a:	f7fe bdae 	b.w	86c6a <_svfprintf_r+0x3b2>
   8810e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88110:	f7ff b95f 	b.w	873d2 <_svfprintf_r+0xb1a>
   88114:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88116:	9d07      	ldr	r5, [sp, #28]
   88118:	18fc      	adds	r4, r7, r3
   8811a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8811c:	9307      	str	r3, [sp, #28]
   8811e:	2347      	movs	r3, #71	; 0x47
   88120:	9308      	str	r3, [sp, #32]
   88122:	f7ff bae4 	b.w	876ee <_svfprintf_r+0xe36>
   88126:	46cb      	mov	fp, r9
   88128:	46d1      	mov	r9, sl
   8812a:	f7ff b80e 	b.w	8714a <_svfprintf_r+0x892>
   8812e:	46d1      	mov	r9, sl
   88130:	f7ff b80b 	b.w	8714a <_svfprintf_r+0x892>
   88134:	4b60      	ldr	r3, [pc, #384]	; (882b8 <_svfprintf_r+0x1a00>)
   88136:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88138:	930f      	str	r3, [sp, #60]	; 0x3c
   8813a:	f7fe bfb7 	b.w	870ac <_svfprintf_r+0x7f4>
   8813e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88140:	990c      	ldr	r1, [sp, #48]	; 0x30
   88142:	9528      	str	r5, [sp, #160]	; 0xa0
   88144:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88148:	7bc9      	ldrb	r1, [r1, #15]
   8814a:	428a      	cmp	r2, r1
   8814c:	f040 812a 	bne.w	883a4 <_svfprintf_r+0x1aec>
   88150:	2030      	movs	r0, #48	; 0x30
   88152:	f803 0c01 	strb.w	r0, [r3, #-1]
   88156:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88158:	1e5a      	subs	r2, r3, #1
   8815a:	9228      	str	r2, [sp, #160]	; 0xa0
   8815c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88160:	4291      	cmp	r1, r2
   88162:	d0f6      	beq.n	88152 <_svfprintf_r+0x189a>
   88164:	2a39      	cmp	r2, #57	; 0x39
   88166:	bf0b      	itete	eq
   88168:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   8816a:	3201      	addne	r2, #1
   8816c:	7a92      	ldrbeq	r2, [r2, #10]
   8816e:	b2d2      	uxtbne	r2, r2
   88170:	f803 2c01 	strb.w	r2, [r3, #-1]
   88174:	e7a2      	b.n	880bc <_svfprintf_r+0x1804>
   88176:	4648      	mov	r0, r9
   88178:	1c59      	adds	r1, r3, #1
   8817a:	f002 fe0b 	bl	8ad94 <_malloc_r>
   8817e:	4607      	mov	r7, r0
   88180:	2800      	cmp	r0, #0
   88182:	f000 811d 	beq.w	883c0 <_svfprintf_r+0x1b08>
   88186:	900d      	str	r0, [sp, #52]	; 0x34
   88188:	e706      	b.n	87f98 <_svfprintf_r+0x16e0>
   8818a:	2330      	movs	r3, #48	; 0x30
   8818c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   88190:	2378      	movs	r3, #120	; 0x78
   88192:	e6f5      	b.n	87f80 <_svfprintf_r+0x16c8>
   88194:	9b07      	ldr	r3, [sp, #28]
   88196:	9308      	str	r3, [sp, #32]
   88198:	f7ff b894 	b.w	872c4 <_svfprintf_r+0xa0c>
   8819c:	464a      	mov	r2, r9
   8819e:	46d1      	mov	r9, sl
   881a0:	4692      	mov	sl, r2
   881a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   881a4:	3301      	adds	r3, #1
   881a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   881a8:	442c      	add	r4, r5
   881aa:	2b07      	cmp	r3, #7
   881ac:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   881b0:	e9c8 2500 	strd	r2, r5, [r8]
   881b4:	f77f a8b8 	ble.w	87328 <_svfprintf_r+0xa70>
   881b8:	4651      	mov	r1, sl
   881ba:	4648      	mov	r0, r9
   881bc:	aa2a      	add	r2, sp, #168	; 0xa8
   881be:	f003 ffc1 	bl	8c144 <__ssprint_r>
   881c2:	2800      	cmp	r0, #0
   881c4:	f47e afc0 	bne.w	87148 <_svfprintf_r+0x890>
   881c8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   881cc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   881d0:	f7ff b8ac 	b.w	8732c <_svfprintf_r+0xa74>
   881d4:	2b00      	cmp	r3, #0
   881d6:	bf08      	it	eq
   881d8:	2301      	moveq	r3, #1
   881da:	9309      	str	r3, [sp, #36]	; 0x24
   881dc:	9b07      	ldr	r3, [sp, #28]
   881de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   881e2:	9312      	str	r3, [sp, #72]	; 0x48
   881e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   881e6:	2b00      	cmp	r3, #0
   881e8:	930c      	str	r3, [sp, #48]	; 0x30
   881ea:	f2c0 80bd 	blt.w	88368 <_svfprintf_r+0x1ab0>
   881ee:	2402      	movs	r4, #2
   881f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   881f2:	a828      	add	r0, sp, #160	; 0xa0
   881f4:	aa25      	add	r2, sp, #148	; 0x94
   881f6:	ab24      	add	r3, sp, #144	; 0x90
   881f8:	e9cd 2003 	strd	r2, r0, [sp, #12]
   881fc:	e9cd 4500 	strd	r4, r5, [sp]
   88200:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   88204:	9302      	str	r3, [sp, #8]
   88206:	4622      	mov	r2, r4
   88208:	462b      	mov	r3, r5
   8820a:	4648      	mov	r0, r9
   8820c:	911e      	str	r1, [sp, #120]	; 0x78
   8820e:	f001 f91b 	bl	89448 <_dtoa_r>
   88212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88214:	4607      	mov	r7, r0
   88216:	930f      	str	r3, [sp, #60]	; 0x3c
   88218:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8821a:	940c      	str	r4, [sp, #48]	; 0x30
   8821c:	930d      	str	r3, [sp, #52]	; 0x34
   8821e:	e64a      	b.n	87eb6 <_svfprintf_r+0x15fe>
   88220:	2300      	movs	r3, #0
   88222:	930d      	str	r3, [sp, #52]	; 0x34
   88224:	e753      	b.n	880ce <_svfprintf_r+0x1816>
   88226:	2667      	movs	r6, #103	; 0x67
   88228:	991a      	ldr	r1, [sp, #104]	; 0x68
   8822a:	780b      	ldrb	r3, [r1, #0]
   8822c:	2bff      	cmp	r3, #255	; 0xff
   8822e:	f000 80de 	beq.w	883ee <_svfprintf_r+0x1b36>
   88232:	2400      	movs	r4, #0
   88234:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88236:	4620      	mov	r0, r4
   88238:	e003      	b.n	88242 <_svfprintf_r+0x198a>
   8823a:	3001      	adds	r0, #1
   8823c:	3101      	adds	r1, #1
   8823e:	2bff      	cmp	r3, #255	; 0xff
   88240:	d008      	beq.n	88254 <_svfprintf_r+0x199c>
   88242:	4293      	cmp	r3, r2
   88244:	da06      	bge.n	88254 <_svfprintf_r+0x199c>
   88246:	1ad2      	subs	r2, r2, r3
   88248:	784b      	ldrb	r3, [r1, #1]
   8824a:	2b00      	cmp	r3, #0
   8824c:	d1f5      	bne.n	8823a <_svfprintf_r+0x1982>
   8824e:	780b      	ldrb	r3, [r1, #0]
   88250:	3401      	adds	r4, #1
   88252:	e7f4      	b.n	8823e <_svfprintf_r+0x1986>
   88254:	911a      	str	r1, [sp, #104]	; 0x68
   88256:	9210      	str	r2, [sp, #64]	; 0x40
   88258:	9016      	str	r0, [sp, #88]	; 0x58
   8825a:	9412      	str	r4, [sp, #72]	; 0x48
   8825c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8825e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   88260:	990c      	ldr	r1, [sp, #48]	; 0x30
   88262:	4413      	add	r3, r2
   88264:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   88266:	fb02 1303 	mla	r3, r2, r3, r1
   8826a:	930c      	str	r3, [sp, #48]	; 0x30
   8826c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88270:	9308      	str	r3, [sp, #32]
   88272:	f7ff bab6 	b.w	877e2 <_svfprintf_r+0xf2a>
   88276:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88278:	2666      	movs	r6, #102	; 0x66
   8827a:	18d3      	adds	r3, r2, r3
   8827c:	4419      	add	r1, r3
   8827e:	910c      	str	r1, [sp, #48]	; 0x30
   88280:	e662      	b.n	87f48 <_svfprintf_r+0x1690>
   88282:	f106 020f 	add.w	r2, r6, #15
   88286:	2101      	movs	r1, #1
   88288:	b2d2      	uxtb	r2, r2
   8828a:	f7ff ba4f 	b.w	8772c <_svfprintf_r+0xe74>
   8828e:	2900      	cmp	r1, #0
   88290:	d167      	bne.n	88362 <_svfprintf_r+0x1aaa>
   88292:	2230      	movs	r2, #48	; 0x30
   88294:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   88298:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   8829c:	3330      	adds	r3, #48	; 0x30
   8829e:	f802 3b01 	strb.w	r3, [r2], #1
   882a2:	ab26      	add	r3, sp, #152	; 0x98
   882a4:	1ad3      	subs	r3, r2, r3
   882a6:	931b      	str	r3, [sp, #108]	; 0x6c
   882a8:	f7ff ba83 	b.w	877b2 <_svfprintf_r+0xefa>
   882ac:	0008d408 	.word	0x0008d408
   882b0:	40300000 	.word	0x40300000
   882b4:	3fe00000 	.word	0x3fe00000
   882b8:	0008d438 	.word	0x0008d438
   882bc:	aa24      	add	r2, sp, #144	; 0x90
   882be:	980c      	ldr	r0, [sp, #48]	; 0x30
   882c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   882c2:	f003 fe4d 	bl	8bf60 <frexp>
   882c6:	2200      	movs	r2, #0
   882c8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   882cc:	f004 fbd4 	bl	8ca78 <__aeabi_dmul>
   882d0:	4604      	mov	r4, r0
   882d2:	460d      	mov	r5, r1
   882d4:	2200      	movs	r2, #0
   882d6:	2300      	movs	r3, #0
   882d8:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   882dc:	f004 fe34 	bl	8cf48 <__aeabi_dcmpeq>
   882e0:	b108      	cbz	r0, 882e6 <_svfprintf_r+0x1a2e>
   882e2:	2301      	movs	r3, #1
   882e4:	9324      	str	r3, [sp, #144]	; 0x90
   882e6:	4b44      	ldr	r3, [pc, #272]	; (883f8 <_svfprintf_r+0x1b40>)
   882e8:	930c      	str	r3, [sp, #48]	; 0x30
   882ea:	e684      	b.n	87ff6 <_svfprintf_r+0x173e>
   882ec:	2667      	movs	r6, #103	; 0x67
   882ee:	e62e      	b.n	87f4e <_svfprintf_r+0x1696>
   882f0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   882f4:	f7fe bcb9 	b.w	86c6a <_svfprintf_r+0x3b2>
   882f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   882fa:	930c      	str	r3, [sp, #48]	; 0x30
   882fc:	e57c      	b.n	87df8 <_svfprintf_r+0x1540>
   882fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88300:	2003      	movs	r0, #3
   88302:	2b00      	cmp	r3, #0
   88304:	bfb8      	it	lt
   88306:	232d      	movlt	r3, #45	; 0x2d
   88308:	f04f 0100 	mov.w	r1, #0
   8830c:	bfba      	itte	lt
   8830e:	461a      	movlt	r2, r3
   88310:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   88314:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   88318:	4f38      	ldr	r7, [pc, #224]	; (883fc <_svfprintf_r+0x1b44>)
   8831a:	4b39      	ldr	r3, [pc, #228]	; (88400 <_svfprintf_r+0x1b48>)
   8831c:	9008      	str	r0, [sp, #32]
   8831e:	910d      	str	r1, [sp, #52]	; 0x34
   88320:	f7fe bce2 	b.w	86ce8 <_svfprintf_r+0x430>
   88324:	f1c3 0301 	rsb	r3, r3, #1
   88328:	441a      	add	r2, r3
   8832a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8832e:	2667      	movs	r6, #103	; 0x67
   88330:	920c      	str	r2, [sp, #48]	; 0x30
   88332:	9308      	str	r3, [sp, #32]
   88334:	e56c      	b.n	87e10 <_svfprintf_r+0x1558>
   88336:	2200      	movs	r2, #0
   88338:	2300      	movs	r3, #0
   8833a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8833c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8833e:	f004 fe03 	bl	8cf48 <__aeabi_dcmpeq>
   88342:	2800      	cmp	r0, #0
   88344:	f47f addb 	bne.w	87efe <_svfprintf_r+0x1646>
   88348:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8834a:	f1c3 0301 	rsb	r3, r3, #1
   8834e:	9324      	str	r3, [sp, #144]	; 0x90
   88350:	e5d6      	b.n	87f00 <_svfprintf_r+0x1648>
   88352:	992b      	ldr	r1, [sp, #172]	; 0xac
   88354:	f7ff bb59 	b.w	87a0a <_svfprintf_r+0x1152>
   88358:	07e9      	lsls	r1, r5, #31
   8835a:	f57f aa35 	bpl.w	877c8 <_svfprintf_r+0xf10>
   8835e:	f7ff ba2f 	b.w	877c0 <_svfprintf_r+0xf08>
   88362:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88366:	e799      	b.n	8829c <_svfprintf_r+0x19e4>
   88368:	900d      	str	r0, [sp, #52]	; 0x34
   8836a:	e6b0      	b.n	880ce <_svfprintf_r+0x1816>
   8836c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8836e:	f005 0501 	and.w	r5, r5, #1
   88372:	4613      	mov	r3, r2
   88374:	432b      	orrs	r3, r5
   88376:	d104      	bne.n	88382 <_svfprintf_r+0x1aca>
   88378:	2301      	movs	r3, #1
   8837a:	2666      	movs	r6, #102	; 0x66
   8837c:	9308      	str	r3, [sp, #32]
   8837e:	930c      	str	r3, [sp, #48]	; 0x30
   88380:	e546      	b.n	87e10 <_svfprintf_r+0x1558>
   88382:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88384:	2666      	movs	r6, #102	; 0x66
   88386:	3301      	adds	r3, #1
   88388:	441a      	add	r2, r3
   8838a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8838e:	920c      	str	r2, [sp, #48]	; 0x30
   88390:	9308      	str	r3, [sp, #32]
   88392:	e53d      	b.n	87e10 <_svfprintf_r+0x1558>
   88394:	4b1b      	ldr	r3, [pc, #108]	; (88404 <_svfprintf_r+0x1b4c>)
   88396:	930f      	str	r3, [sp, #60]	; 0x3c
   88398:	f7ff bbe9 	b.w	87b6e <_svfprintf_r+0x12b6>
   8839c:	4a19      	ldr	r2, [pc, #100]	; (88404 <_svfprintf_r+0x1b4c>)
   8839e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   883a0:	920f      	str	r2, [sp, #60]	; 0x3c
   883a2:	e4b1      	b.n	87d08 <_svfprintf_r+0x1450>
   883a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   883a6:	e6dd      	b.n	88164 <_svfprintf_r+0x18ac>
   883a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   883aa:	f89b 6001 	ldrb.w	r6, [fp, #1]
   883ae:	f853 0b04 	ldr.w	r0, [r3], #4
   883b2:	4693      	mov	fp, r2
   883b4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   883b8:	9009      	str	r0, [sp, #36]	; 0x24
   883ba:	930e      	str	r3, [sp, #56]	; 0x38
   883bc:	f7fe bac7 	b.w	8694e <_svfprintf_r+0x96>
   883c0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   883c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   883c8:	f8aa 300c 	strh.w	r3, [sl, #12]
   883cc:	f7fe bc4d 	b.w	86c6a <_svfprintf_r+0x3b2>
   883d0:	4a0c      	ldr	r2, [pc, #48]	; (88404 <_svfprintf_r+0x1b4c>)
   883d2:	920f      	str	r2, [sp, #60]	; 0x3c
   883d4:	e6e6      	b.n	881a4 <_svfprintf_r+0x18ec>
   883d6:	230c      	movs	r3, #12
   883d8:	f04f 32ff 	mov.w	r2, #4294967295
   883dc:	f8c9 3000 	str.w	r3, [r9]
   883e0:	920a      	str	r2, [sp, #40]	; 0x28
   883e2:	f7fe bc49 	b.w	86c78 <_svfprintf_r+0x3c0>
   883e6:	2302      	movs	r3, #2
   883e8:	931b      	str	r3, [sp, #108]	; 0x6c
   883ea:	f7ff b9e2 	b.w	877b2 <_svfprintf_r+0xefa>
   883ee:	2300      	movs	r3, #0
   883f0:	9312      	str	r3, [sp, #72]	; 0x48
   883f2:	9316      	str	r3, [sp, #88]	; 0x58
   883f4:	e732      	b.n	8825c <_svfprintf_r+0x19a4>
   883f6:	bf00      	nop
   883f8:	0008d3f4 	.word	0x0008d3f4
   883fc:	0008d3ec 	.word	0x0008d3ec
   88400:	0008d3f0 	.word	0x0008d3f0
   88404:	0008d438 	.word	0x0008d438

00088408 <__sprint_r.part.0>:
   88408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8840c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8840e:	4690      	mov	r8, r2
   88410:	049c      	lsls	r4, r3, #18
   88412:	d52d      	bpl.n	88470 <__sprint_r.part.0+0x68>
   88414:	6893      	ldr	r3, [r2, #8]
   88416:	6812      	ldr	r2, [r2, #0]
   88418:	b343      	cbz	r3, 8846c <__sprint_r.part.0+0x64>
   8841a:	468b      	mov	fp, r1
   8841c:	4606      	mov	r6, r0
   8841e:	f102 0908 	add.w	r9, r2, #8
   88422:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   88426:	ea5f 079a 	movs.w	r7, sl, lsr #2
   8842a:	d015      	beq.n	88458 <__sprint_r.part.0+0x50>
   8842c:	2400      	movs	r4, #0
   8842e:	3d04      	subs	r5, #4
   88430:	e001      	b.n	88436 <__sprint_r.part.0+0x2e>
   88432:	42a7      	cmp	r7, r4
   88434:	d00e      	beq.n	88454 <__sprint_r.part.0+0x4c>
   88436:	465a      	mov	r2, fp
   88438:	4630      	mov	r0, r6
   8843a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8843e:	f002 f8fb 	bl	8a638 <_fputwc_r>
   88442:	1c43      	adds	r3, r0, #1
   88444:	f104 0401 	add.w	r4, r4, #1
   88448:	d1f3      	bne.n	88432 <__sprint_r.part.0+0x2a>
   8844a:	2300      	movs	r3, #0
   8844c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88454:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88458:	f02a 0a03 	bic.w	sl, sl, #3
   8845c:	eba3 030a 	sub.w	r3, r3, sl
   88460:	f8c8 3008 	str.w	r3, [r8, #8]
   88464:	f109 0908 	add.w	r9, r9, #8
   88468:	2b00      	cmp	r3, #0
   8846a:	d1da      	bne.n	88422 <__sprint_r.part.0+0x1a>
   8846c:	2000      	movs	r0, #0
   8846e:	e7ec      	b.n	8844a <__sprint_r.part.0+0x42>
   88470:	f002 fa6c 	bl	8a94c <__sfvwrite_r>
   88474:	2300      	movs	r3, #0
   88476:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8847a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8847e:	bf00      	nop

00088480 <_vfiprintf_r>:
   88480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88484:	b0bb      	sub	sp, #236	; 0xec
   88486:	461c      	mov	r4, r3
   88488:	4689      	mov	r9, r1
   8848a:	4690      	mov	r8, r2
   8848c:	e9cd 3004 	strd	r3, r0, [sp, #16]
   88490:	b118      	cbz	r0, 8849a <_vfiprintf_r+0x1a>
   88492:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88494:	2b00      	cmp	r3, #0
   88496:	f000 827a 	beq.w	8898e <_vfiprintf_r+0x50e>
   8849a:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8849e:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   884a2:	07de      	lsls	r6, r3, #31
   884a4:	b28a      	uxth	r2, r1
   884a6:	d402      	bmi.n	884ae <_vfiprintf_r+0x2e>
   884a8:	058d      	lsls	r5, r1, #22
   884aa:	f140 851a 	bpl.w	88ee2 <_vfiprintf_r+0xa62>
   884ae:	0490      	lsls	r0, r2, #18
   884b0:	d40a      	bmi.n	884c8 <_vfiprintf_r+0x48>
   884b2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   884b6:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   884ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   884be:	f8a9 200c 	strh.w	r2, [r9, #12]
   884c2:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   884c6:	b292      	uxth	r2, r2
   884c8:	0711      	lsls	r1, r2, #28
   884ca:	f140 80f6 	bpl.w	886ba <_vfiprintf_r+0x23a>
   884ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
   884d2:	2b00      	cmp	r3, #0
   884d4:	f000 80f1 	beq.w	886ba <_vfiprintf_r+0x23a>
   884d8:	f002 031a 	and.w	r3, r2, #26
   884dc:	2b0a      	cmp	r3, #10
   884de:	f000 80fa 	beq.w	886d6 <_vfiprintf_r+0x256>
   884e2:	2300      	movs	r3, #0
   884e4:	46cb      	mov	fp, r9
   884e6:	e9cd 3308 	strd	r3, r3, [sp, #32]
   884ea:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   884ee:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   884f2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   884f6:	9303      	str	r3, [sp, #12]
   884f8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   884fc:	f898 3000 	ldrb.w	r3, [r8]
   88500:	2b00      	cmp	r3, #0
   88502:	f000 81ed 	beq.w	888e0 <_vfiprintf_r+0x460>
   88506:	4644      	mov	r4, r8
   88508:	e004      	b.n	88514 <_vfiprintf_r+0x94>
   8850a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8850e:	2b00      	cmp	r3, #0
   88510:	f000 8127 	beq.w	88762 <_vfiprintf_r+0x2e2>
   88514:	2b25      	cmp	r3, #37	; 0x25
   88516:	d1f8      	bne.n	8850a <_vfiprintf_r+0x8a>
   88518:	ebb4 0508 	subs.w	r5, r4, r8
   8851c:	f040 8125 	bne.w	8876a <_vfiprintf_r+0x2ea>
   88520:	7823      	ldrb	r3, [r4, #0]
   88522:	2b00      	cmp	r3, #0
   88524:	f000 81dc 	beq.w	888e0 <_vfiprintf_r+0x460>
   88528:	f04f 0200 	mov.w	r2, #0
   8852c:	2300      	movs	r3, #0
   8852e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88532:	f04f 32ff 	mov.w	r2, #4294967295
   88536:	252b      	movs	r5, #43	; 0x2b
   88538:	461f      	mov	r7, r3
   8853a:	9302      	str	r3, [sp, #8]
   8853c:	7863      	ldrb	r3, [r4, #1]
   8853e:	f104 0801 	add.w	r8, r4, #1
   88542:	9200      	str	r2, [sp, #0]
   88544:	f108 0801 	add.w	r8, r8, #1
   88548:	f1a3 0220 	sub.w	r2, r3, #32
   8854c:	2a5a      	cmp	r2, #90	; 0x5a
   8854e:	f200 8141 	bhi.w	887d4 <_vfiprintf_r+0x354>
   88552:	e8df f012 	tbh	[pc, r2, lsl #1]
   88556:	0272      	.short	0x0272
   88558:	013f013f 	.word	0x013f013f
   8855c:	013f026d 	.word	0x013f026d
   88560:	013f013f 	.word	0x013f013f
   88564:	013f024b 	.word	0x013f024b
   88568:	006a013f 	.word	0x006a013f
   8856c:	013f0227 	.word	0x013f0227
   88570:	02310222 	.word	0x02310222
   88574:	022c013f 	.word	0x022c013f
   88578:	005b005b 	.word	0x005b005b
   8857c:	005b005b 	.word	0x005b005b
   88580:	005b005b 	.word	0x005b005b
   88584:	005b005b 	.word	0x005b005b
   88588:	013f005b 	.word	0x013f005b
   8858c:	013f013f 	.word	0x013f013f
   88590:	013f013f 	.word	0x013f013f
   88594:	013f013f 	.word	0x013f013f
   88598:	013f013f 	.word	0x013f013f
   8859c:	007a020e 	.word	0x007a020e
   885a0:	013f013f 	.word	0x013f013f
   885a4:	013f013f 	.word	0x013f013f
   885a8:	013f013f 	.word	0x013f013f
   885ac:	013f013f 	.word	0x013f013f
   885b0:	013f013f 	.word	0x013f013f
   885b4:	013f00d7 	.word	0x013f00d7
   885b8:	013f013f 	.word	0x013f013f
   885bc:	013f01f2 	.word	0x013f01f2
   885c0:	013f0297 	.word	0x013f0297
   885c4:	0500013f 	.word	0x0500013f
   885c8:	013f013f 	.word	0x013f013f
   885cc:	013f013f 	.word	0x013f013f
   885d0:	013f013f 	.word	0x013f013f
   885d4:	013f013f 	.word	0x013f013f
   885d8:	013f013f 	.word	0x013f013f
   885dc:	007c020e 	.word	0x007c020e
   885e0:	013f013f 	.word	0x013f013f
   885e4:	028a013f 	.word	0x028a013f
   885e8:	0075007c 	.word	0x0075007c
   885ec:	027d013f 	.word	0x027d013f
   885f0:	02b6013f 	.word	0x02b6013f
   885f4:	02a600d9 	.word	0x02a600d9
   885f8:	013f0075 	.word	0x013f0075
   885fc:	007201f2 	.word	0x007201f2
   88600:	013f04fe 	.word	0x013f04fe
   88604:	051c013f 	.word	0x051c013f
   88608:	0072013f 	.word	0x0072013f
   8860c:	2100      	movs	r1, #0
   8860e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88612:	f818 3b01 	ldrb.w	r3, [r8], #1
   88616:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8861a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8861e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88622:	2a09      	cmp	r2, #9
   88624:	d9f5      	bls.n	88612 <_vfiprintf_r+0x192>
   88626:	9102      	str	r1, [sp, #8]
   88628:	e78e      	b.n	88548 <_vfiprintf_r+0xc8>
   8862a:	9b04      	ldr	r3, [sp, #16]
   8862c:	f853 2b04 	ldr.w	r2, [r3], #4
   88630:	2a00      	cmp	r2, #0
   88632:	9202      	str	r2, [sp, #8]
   88634:	9304      	str	r3, [sp, #16]
   88636:	f2c0 81ad 	blt.w	88994 <_vfiprintf_r+0x514>
   8863a:	f898 3000 	ldrb.w	r3, [r8]
   8863e:	e781      	b.n	88544 <_vfiprintf_r+0xc4>
   88640:	f898 3000 	ldrb.w	r3, [r8]
   88644:	f047 0720 	orr.w	r7, r7, #32
   88648:	e77c      	b.n	88544 <_vfiprintf_r+0xc4>
   8864a:	f047 0710 	orr.w	r7, r7, #16
   8864e:	06bc      	lsls	r4, r7, #26
   88650:	f140 8158 	bpl.w	88904 <_vfiprintf_r+0x484>
   88654:	9c04      	ldr	r4, [sp, #16]
   88656:	3407      	adds	r4, #7
   88658:	f024 0307 	bic.w	r3, r4, #7
   8865c:	4619      	mov	r1, r3
   8865e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   88662:	4614      	mov	r4, r2
   88664:	461d      	mov	r5, r3
   88666:	9104      	str	r1, [sp, #16]
   88668:	2a00      	cmp	r2, #0
   8866a:	f173 0300 	sbcs.w	r3, r3, #0
   8866e:	f2c0 841e 	blt.w	88eae <_vfiprintf_r+0xa2e>
   88672:	9b00      	ldr	r3, [sp, #0]
   88674:	3301      	adds	r3, #1
   88676:	f000 84f0 	beq.w	8905a <_vfiprintf_r+0xbda>
   8867a:	ea54 0305 	orrs.w	r3, r4, r5
   8867e:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   88682:	f000 83fc 	beq.w	88e7e <_vfiprintf_r+0x9fe>
   88686:	2d00      	cmp	r5, #0
   88688:	bf08      	it	eq
   8868a:	2c0a      	cmpeq	r4, #10
   8868c:	f080 84a9 	bcs.w	88fe2 <_vfiprintf_r+0xb62>
   88690:	2301      	movs	r3, #1
   88692:	464f      	mov	r7, r9
   88694:	3430      	adds	r4, #48	; 0x30
   88696:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   8869a:	9301      	str	r3, [sp, #4]
   8869c:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   886a0:	e9dd 2100 	ldrd	r2, r1, [sp]
   886a4:	428a      	cmp	r2, r1
   886a6:	bfb8      	it	lt
   886a8:	460a      	movlt	r2, r1
   886aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   886ae:	4615      	mov	r5, r2
   886b0:	2b00      	cmp	r3, #0
   886b2:	f000 809d 	beq.w	887f0 <_vfiprintf_r+0x370>
   886b6:	3501      	adds	r5, #1
   886b8:	e09a      	b.n	887f0 <_vfiprintf_r+0x370>
   886ba:	4649      	mov	r1, r9
   886bc:	9805      	ldr	r0, [sp, #20]
   886be:	f000 fdb9 	bl	89234 <__swsetup_r>
   886c2:	2800      	cmp	r0, #0
   886c4:	f040 854a 	bne.w	8915c <_vfiprintf_r+0xcdc>
   886c8:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   886cc:	f002 031a 	and.w	r3, r2, #26
   886d0:	2b0a      	cmp	r3, #10
   886d2:	f47f af06 	bne.w	884e2 <_vfiprintf_r+0x62>
   886d6:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   886da:	2b00      	cmp	r3, #0
   886dc:	f6ff af01 	blt.w	884e2 <_vfiprintf_r+0x62>
   886e0:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   886e4:	07de      	lsls	r6, r3, #31
   886e6:	d402      	bmi.n	886ee <_vfiprintf_r+0x26e>
   886e8:	0595      	lsls	r5, r2, #22
   886ea:	f140 850e 	bpl.w	8910a <_vfiprintf_r+0xc8a>
   886ee:	4623      	mov	r3, r4
   886f0:	4642      	mov	r2, r8
   886f2:	4649      	mov	r1, r9
   886f4:	9805      	ldr	r0, [sp, #20]
   886f6:	f000 fd59 	bl	891ac <__sbprintf>
   886fa:	9003      	str	r0, [sp, #12]
   886fc:	9803      	ldr	r0, [sp, #12]
   886fe:	b03b      	add	sp, #236	; 0xec
   88700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88704:	f047 0710 	orr.w	r7, r7, #16
   88708:	06b8      	lsls	r0, r7, #26
   8870a:	9c04      	ldr	r4, [sp, #16]
   8870c:	f140 8109 	bpl.w	88922 <_vfiprintf_r+0x4a2>
   88710:	3407      	adds	r4, #7
   88712:	f024 0307 	bic.w	r3, r4, #7
   88716:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   8871a:	9304      	str	r3, [sp, #16]
   8871c:	2300      	movs	r3, #0
   8871e:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   88722:	f04f 0200 	mov.w	r2, #0
   88726:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8872a:	9a00      	ldr	r2, [sp, #0]
   8872c:	4611      	mov	r1, r2
   8872e:	3101      	adds	r1, #1
   88730:	f000 81db 	beq.w	88aea <_vfiprintf_r+0x66a>
   88734:	ea54 0105 	orrs.w	r1, r4, r5
   88738:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   8873c:	f040 81d4 	bne.w	88ae8 <_vfiprintf_r+0x668>
   88740:	2a00      	cmp	r2, #0
   88742:	f040 848d 	bne.w	89060 <_vfiprintf_r+0xbe0>
   88746:	2b00      	cmp	r3, #0
   88748:	f040 839e 	bne.w	88e88 <_vfiprintf_r+0xa08>
   8874c:	f019 0301 	ands.w	r3, r9, #1
   88750:	9301      	str	r3, [sp, #4]
   88752:	f000 83c3 	beq.w	88edc <_vfiprintf_r+0xa5c>
   88756:	2330      	movs	r3, #48	; 0x30
   88758:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   8875c:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   88760:	e79e      	b.n	886a0 <_vfiprintf_r+0x220>
   88762:	ebb4 0508 	subs.w	r5, r4, r8
   88766:	f000 80bb 	beq.w	888e0 <_vfiprintf_r+0x460>
   8876a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8876e:	3301      	adds	r3, #1
   88770:	442a      	add	r2, r5
   88772:	2b07      	cmp	r3, #7
   88774:	e9ca 8500 	strd	r8, r5, [sl]
   88778:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   8877c:	dc06      	bgt.n	8878c <_vfiprintf_r+0x30c>
   8877e:	f10a 0a08 	add.w	sl, sl, #8
   88782:	9a03      	ldr	r2, [sp, #12]
   88784:	7823      	ldrb	r3, [r4, #0]
   88786:	442a      	add	r2, r5
   88788:	9203      	str	r2, [sp, #12]
   8878a:	e6ca      	b.n	88522 <_vfiprintf_r+0xa2>
   8878c:	2a00      	cmp	r2, #0
   8878e:	f000 8372 	beq.w	88e76 <_vfiprintf_r+0x9f6>
   88792:	4659      	mov	r1, fp
   88794:	9805      	ldr	r0, [sp, #20]
   88796:	aa0e      	add	r2, sp, #56	; 0x38
   88798:	f7ff fe36 	bl	88408 <__sprint_r.part.0>
   8879c:	b950      	cbnz	r0, 887b4 <_vfiprintf_r+0x334>
   8879e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   887a2:	e7ee      	b.n	88782 <_vfiprintf_r+0x302>
   887a4:	4659      	mov	r1, fp
   887a6:	9805      	ldr	r0, [sp, #20]
   887a8:	aa0e      	add	r2, sp, #56	; 0x38
   887aa:	f7ff fe2d 	bl	88408 <__sprint_r.part.0>
   887ae:	2800      	cmp	r0, #0
   887b0:	f000 808d 	beq.w	888ce <_vfiprintf_r+0x44e>
   887b4:	46d9      	mov	r9, fp
   887b6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   887ba:	f013 0f01 	tst.w	r3, #1
   887be:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   887c2:	f000 8095 	beq.w	888f0 <_vfiprintf_r+0x470>
   887c6:	065b      	lsls	r3, r3, #25
   887c8:	f100 84d4 	bmi.w	89174 <_vfiprintf_r+0xcf4>
   887cc:	9803      	ldr	r0, [sp, #12]
   887ce:	b03b      	add	sp, #236	; 0xec
   887d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   887d4:	2b00      	cmp	r3, #0
   887d6:	f000 8083 	beq.w	888e0 <_vfiprintf_r+0x460>
   887da:	2501      	movs	r5, #1
   887dc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   887e0:	f04f 0300 	mov.w	r3, #0
   887e4:	9501      	str	r5, [sp, #4]
   887e6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   887ea:	ae21      	add	r6, sp, #132	; 0x84
   887ec:	2300      	movs	r3, #0
   887ee:	9300      	str	r3, [sp, #0]
   887f0:	f017 0302 	ands.w	r3, r7, #2
   887f4:	9307      	str	r3, [sp, #28]
   887f6:	bf18      	it	ne
   887f8:	3502      	addne	r5, #2
   887fa:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   887fe:	9306      	str	r3, [sp, #24]
   88800:	d104      	bne.n	8880c <_vfiprintf_r+0x38c>
   88802:	9b02      	ldr	r3, [sp, #8]
   88804:	1b5c      	subs	r4, r3, r5
   88806:	2c00      	cmp	r4, #0
   88808:	f300 8274 	bgt.w	88cf4 <_vfiprintf_r+0x874>
   8880c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88810:	1c48      	adds	r0, r1, #1
   88812:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   88816:	b174      	cbz	r4, 88836 <_vfiprintf_r+0x3b6>
   88818:	2101      	movs	r1, #1
   8881a:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   8881e:	440a      	add	r2, r1
   88820:	2807      	cmp	r0, #7
   88822:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   88826:	e9ca 4100 	strd	r4, r1, [sl]
   8882a:	f300 8246 	bgt.w	88cba <_vfiprintf_r+0x83a>
   8882e:	4601      	mov	r1, r0
   88830:	f10a 0a08 	add.w	sl, sl, #8
   88834:	3001      	adds	r0, #1
   88836:	9b07      	ldr	r3, [sp, #28]
   88838:	b1c3      	cbz	r3, 8886c <_vfiprintf_r+0x3ec>
   8883a:	2102      	movs	r1, #2
   8883c:	ab0d      	add	r3, sp, #52	; 0x34
   8883e:	440a      	add	r2, r1
   88840:	2807      	cmp	r0, #7
   88842:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   88846:	e9ca 3100 	strd	r3, r1, [sl]
   8884a:	f340 824e 	ble.w	88cea <_vfiprintf_r+0x86a>
   8884e:	2a00      	cmp	r2, #0
   88850:	f000 830c 	beq.w	88e6c <_vfiprintf_r+0x9ec>
   88854:	4659      	mov	r1, fp
   88856:	9805      	ldr	r0, [sp, #20]
   88858:	aa0e      	add	r2, sp, #56	; 0x38
   8885a:	f7ff fdd5 	bl	88408 <__sprint_r.part.0>
   8885e:	2800      	cmp	r0, #0
   88860:	d1a8      	bne.n	887b4 <_vfiprintf_r+0x334>
   88862:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88866:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8886a:	1c48      	adds	r0, r1, #1
   8886c:	9b06      	ldr	r3, [sp, #24]
   8886e:	2b80      	cmp	r3, #128	; 0x80
   88870:	f000 817e 	beq.w	88b70 <_vfiprintf_r+0x6f0>
   88874:	e9dd 3400 	ldrd	r3, r4, [sp]
   88878:	1b1c      	subs	r4, r3, r4
   8887a:	2c00      	cmp	r4, #0
   8887c:	f300 81d3 	bgt.w	88c26 <_vfiprintf_r+0x7a6>
   88880:	9b01      	ldr	r3, [sp, #4]
   88882:	2807      	cmp	r0, #7
   88884:	441a      	add	r2, r3
   88886:	e9ca 6300 	strd	r6, r3, [sl]
   8888a:	9210      	str	r2, [sp, #64]	; 0x40
   8888c:	900f      	str	r0, [sp, #60]	; 0x3c
   8888e:	f340 816c 	ble.w	88b6a <_vfiprintf_r+0x6ea>
   88892:	2a00      	cmp	r2, #0
   88894:	f000 8276 	beq.w	88d84 <_vfiprintf_r+0x904>
   88898:	4659      	mov	r1, fp
   8889a:	9805      	ldr	r0, [sp, #20]
   8889c:	aa0e      	add	r2, sp, #56	; 0x38
   8889e:	f7ff fdb3 	bl	88408 <__sprint_r.part.0>
   888a2:	2800      	cmp	r0, #0
   888a4:	d186      	bne.n	887b4 <_vfiprintf_r+0x334>
   888a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   888a8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   888ac:	0779      	lsls	r1, r7, #29
   888ae:	d504      	bpl.n	888ba <_vfiprintf_r+0x43a>
   888b0:	9b02      	ldr	r3, [sp, #8]
   888b2:	1b5c      	subs	r4, r3, r5
   888b4:	2c00      	cmp	r4, #0
   888b6:	f300 826e 	bgt.w	88d96 <_vfiprintf_r+0x916>
   888ba:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   888be:	42a9      	cmp	r1, r5
   888c0:	bfac      	ite	ge
   888c2:	185b      	addge	r3, r3, r1
   888c4:	195b      	addlt	r3, r3, r5
   888c6:	9303      	str	r3, [sp, #12]
   888c8:	2a00      	cmp	r2, #0
   888ca:	f47f af6b 	bne.w	887a4 <_vfiprintf_r+0x324>
   888ce:	2300      	movs	r3, #0
   888d0:	930f      	str	r3, [sp, #60]	; 0x3c
   888d2:	f898 3000 	ldrb.w	r3, [r8]
   888d6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   888da:	2b00      	cmp	r3, #0
   888dc:	f47f ae13 	bne.w	88506 <_vfiprintf_r+0x86>
   888e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   888e2:	46d9      	mov	r9, fp
   888e4:	2b00      	cmp	r3, #0
   888e6:	f040 8426 	bne.w	89136 <_vfiprintf_r+0xcb6>
   888ea:	2300      	movs	r3, #0
   888ec:	930f      	str	r3, [sp, #60]	; 0x3c
   888ee:	e762      	b.n	887b6 <_vfiprintf_r+0x336>
   888f0:	059a      	lsls	r2, r3, #22
   888f2:	f53f af68 	bmi.w	887c6 <_vfiprintf_r+0x346>
   888f6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   888fa:	f002 f9d1 	bl	8aca0 <__retarget_lock_release_recursive>
   888fe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88902:	e760      	b.n	887c6 <_vfiprintf_r+0x346>
   88904:	9b04      	ldr	r3, [sp, #16]
   88906:	06f8      	lsls	r0, r7, #27
   88908:	f853 4b04 	ldr.w	r4, [r3], #4
   8890c:	f100 8308 	bmi.w	88f20 <_vfiprintf_r+0xaa0>
   88910:	0679      	lsls	r1, r7, #25
   88912:	f140 8302 	bpl.w	88f1a <_vfiprintf_r+0xa9a>
   88916:	b224      	sxth	r4, r4
   88918:	17e5      	asrs	r5, r4, #31
   8891a:	9304      	str	r3, [sp, #16]
   8891c:	4622      	mov	r2, r4
   8891e:	462b      	mov	r3, r5
   88920:	e6a2      	b.n	88668 <_vfiprintf_r+0x1e8>
   88922:	f854 3b04 	ldr.w	r3, [r4], #4
   88926:	06f9      	lsls	r1, r7, #27
   88928:	9404      	str	r4, [sp, #16]
   8892a:	f100 82f3 	bmi.w	88f14 <_vfiprintf_r+0xa94>
   8892e:	067a      	lsls	r2, r7, #25
   88930:	f140 82ed 	bpl.w	88f0e <_vfiprintf_r+0xa8e>
   88934:	2500      	movs	r5, #0
   88936:	b29c      	uxth	r4, r3
   88938:	e6f0      	b.n	8871c <_vfiprintf_r+0x29c>
   8893a:	f04f 0300 	mov.w	r3, #0
   8893e:	9c04      	ldr	r4, [sp, #16]
   88940:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88944:	f854 6b04 	ldr.w	r6, [r4], #4
   88948:	2e00      	cmp	r6, #0
   8894a:	f000 8397 	beq.w	8907c <_vfiprintf_r+0xbfc>
   8894e:	9a00      	ldr	r2, [sp, #0]
   88950:	4613      	mov	r3, r2
   88952:	3301      	adds	r3, #1
   88954:	f000 831e 	beq.w	88f94 <_vfiprintf_r+0xb14>
   88958:	2100      	movs	r1, #0
   8895a:	4630      	mov	r0, r6
   8895c:	f002 fcde 	bl	8b31c <memchr>
   88960:	2800      	cmp	r0, #0
   88962:	f000 83d8 	beq.w	89116 <_vfiprintf_r+0xc96>
   88966:	1b83      	subs	r3, r0, r6
   88968:	9301      	str	r3, [sp, #4]
   8896a:	2300      	movs	r3, #0
   8896c:	9404      	str	r4, [sp, #16]
   8896e:	9300      	str	r3, [sp, #0]
   88970:	e696      	b.n	886a0 <_vfiprintf_r+0x220>
   88972:	2501      	movs	r5, #1
   88974:	f04f 0200 	mov.w	r2, #0
   88978:	9c04      	ldr	r4, [sp, #16]
   8897a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8897e:	f854 3b04 	ldr.w	r3, [r4], #4
   88982:	9501      	str	r5, [sp, #4]
   88984:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88988:	9404      	str	r4, [sp, #16]
   8898a:	ae21      	add	r6, sp, #132	; 0x84
   8898c:	e72e      	b.n	887ec <_vfiprintf_r+0x36c>
   8898e:	f001 fdb3 	bl	8a4f8 <__sinit>
   88992:	e582      	b.n	8849a <_vfiprintf_r+0x1a>
   88994:	9b02      	ldr	r3, [sp, #8]
   88996:	425b      	negs	r3, r3
   88998:	9302      	str	r3, [sp, #8]
   8899a:	f898 3000 	ldrb.w	r3, [r8]
   8899e:	f047 0704 	orr.w	r7, r7, #4
   889a2:	e5cf      	b.n	88544 <_vfiprintf_r+0xc4>
   889a4:	f898 3000 	ldrb.w	r3, [r8]
   889a8:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   889ac:	e5ca      	b.n	88544 <_vfiprintf_r+0xc4>
   889ae:	f898 3000 	ldrb.w	r3, [r8]
   889b2:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   889b6:	e5c5      	b.n	88544 <_vfiprintf_r+0xc4>
   889b8:	4641      	mov	r1, r8
   889ba:	f811 3b01 	ldrb.w	r3, [r1], #1
   889be:	2b2a      	cmp	r3, #42	; 0x2a
   889c0:	f000 83dd 	beq.w	8917e <_vfiprintf_r+0xcfe>
   889c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   889c8:	2a09      	cmp	r2, #9
   889ca:	4688      	mov	r8, r1
   889cc:	bf98      	it	ls
   889ce:	2100      	movls	r1, #0
   889d0:	f200 83ad 	bhi.w	8912e <_vfiprintf_r+0xcae>
   889d4:	f818 3b01 	ldrb.w	r3, [r8], #1
   889d8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   889dc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   889e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   889e4:	2a09      	cmp	r2, #9
   889e6:	d9f5      	bls.n	889d4 <_vfiprintf_r+0x554>
   889e8:	9100      	str	r1, [sp, #0]
   889ea:	e5ad      	b.n	88548 <_vfiprintf_r+0xc8>
   889ec:	9c05      	ldr	r4, [sp, #20]
   889ee:	4620      	mov	r0, r4
   889f0:	f002 f94c 	bl	8ac8c <_localeconv_r>
   889f4:	6843      	ldr	r3, [r0, #4]
   889f6:	4618      	mov	r0, r3
   889f8:	930a      	str	r3, [sp, #40]	; 0x28
   889fa:	f003 fb41 	bl	8c080 <strlen>
   889fe:	4603      	mov	r3, r0
   88a00:	4620      	mov	r0, r4
   88a02:	930b      	str	r3, [sp, #44]	; 0x2c
   88a04:	461c      	mov	r4, r3
   88a06:	f002 f941 	bl	8ac8c <_localeconv_r>
   88a0a:	6882      	ldr	r2, [r0, #8]
   88a0c:	9209      	str	r2, [sp, #36]	; 0x24
   88a0e:	2c00      	cmp	r4, #0
   88a10:	f43f ae13 	beq.w	8863a <_vfiprintf_r+0x1ba>
   88a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88a16:	2b00      	cmp	r3, #0
   88a18:	f43f ae0f 	beq.w	8863a <_vfiprintf_r+0x1ba>
   88a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88a1e:	781b      	ldrb	r3, [r3, #0]
   88a20:	2b00      	cmp	r3, #0
   88a22:	f43f ae0a 	beq.w	8863a <_vfiprintf_r+0x1ba>
   88a26:	f898 3000 	ldrb.w	r3, [r8]
   88a2a:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   88a2e:	e589      	b.n	88544 <_vfiprintf_r+0xc4>
   88a30:	f898 3000 	ldrb.w	r3, [r8]
   88a34:	f047 0701 	orr.w	r7, r7, #1
   88a38:	e584      	b.n	88544 <_vfiprintf_r+0xc4>
   88a3a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   88a3e:	2b00      	cmp	r3, #0
   88a40:	f47f adfb 	bne.w	8863a <_vfiprintf_r+0x1ba>
   88a44:	2320      	movs	r3, #32
   88a46:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88a4a:	f898 3000 	ldrb.w	r3, [r8]
   88a4e:	e579      	b.n	88544 <_vfiprintf_r+0xc4>
   88a50:	f898 3000 	ldrb.w	r3, [r8]
   88a54:	2b6c      	cmp	r3, #108	; 0x6c
   88a56:	bf03      	ittte	eq
   88a58:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88a5c:	f047 0720 	orreq.w	r7, r7, #32
   88a60:	f108 0801 	addeq.w	r8, r8, #1
   88a64:	f047 0710 	orrne.w	r7, r7, #16
   88a68:	e56c      	b.n	88544 <_vfiprintf_r+0xc4>
   88a6a:	f898 3000 	ldrb.w	r3, [r8]
   88a6e:	2b68      	cmp	r3, #104	; 0x68
   88a70:	bf03      	ittte	eq
   88a72:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88a76:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   88a7a:	f108 0801 	addeq.w	r8, r8, #1
   88a7e:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   88a82:	e55f      	b.n	88544 <_vfiprintf_r+0xc4>
   88a84:	f047 0910 	orr.w	r9, r7, #16
   88a88:	f019 0f20 	tst.w	r9, #32
   88a8c:	9c04      	ldr	r4, [sp, #16]
   88a8e:	f000 8200 	beq.w	88e92 <_vfiprintf_r+0xa12>
   88a92:	3407      	adds	r4, #7
   88a94:	f024 0307 	bic.w	r3, r4, #7
   88a98:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88a9c:	9304      	str	r3, [sp, #16]
   88a9e:	2301      	movs	r3, #1
   88aa0:	e63f      	b.n	88722 <_vfiprintf_r+0x2a2>
   88aa2:	f647 0330 	movw	r3, #30768	; 0x7830
   88aa6:	9c04      	ldr	r4, [sp, #16]
   88aa8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   88aac:	f854 2b04 	ldr.w	r2, [r4], #4
   88ab0:	4bbf      	ldr	r3, [pc, #764]	; (88db0 <_vfiprintf_r+0x930>)
   88ab2:	9404      	str	r4, [sp, #16]
   88ab4:	9308      	str	r3, [sp, #32]
   88ab6:	4614      	mov	r4, r2
   88ab8:	2500      	movs	r5, #0
   88aba:	2302      	movs	r3, #2
   88abc:	f047 0902 	orr.w	r9, r7, #2
   88ac0:	e62f      	b.n	88722 <_vfiprintf_r+0x2a2>
   88ac2:	06bb      	lsls	r3, r7, #26
   88ac4:	f100 8232 	bmi.w	88f2c <_vfiprintf_r+0xaac>
   88ac8:	06fe      	lsls	r6, r7, #27
   88aca:	f100 82cf 	bmi.w	8906c <_vfiprintf_r+0xbec>
   88ace:	067d      	lsls	r5, r7, #25
   88ad0:	f100 8301 	bmi.w	890d6 <_vfiprintf_r+0xc56>
   88ad4:	05bc      	lsls	r4, r7, #22
   88ad6:	f140 82c9 	bpl.w	8906c <_vfiprintf_r+0xbec>
   88ada:	9c04      	ldr	r4, [sp, #16]
   88adc:	9a03      	ldr	r2, [sp, #12]
   88ade:	f854 3b04 	ldr.w	r3, [r4], #4
   88ae2:	701a      	strb	r2, [r3, #0]
   88ae4:	9404      	str	r4, [sp, #16]
   88ae6:	e509      	b.n	884fc <_vfiprintf_r+0x7c>
   88ae8:	46b9      	mov	r9, r7
   88aea:	2b01      	cmp	r3, #1
   88aec:	f43f adcb 	beq.w	88686 <_vfiprintf_r+0x206>
   88af0:	2b02      	cmp	r3, #2
   88af2:	ae3a      	add	r6, sp, #232	; 0xe8
   88af4:	d113      	bne.n	88b1e <_vfiprintf_r+0x69e>
   88af6:	9808      	ldr	r0, [sp, #32]
   88af8:	0923      	lsrs	r3, r4, #4
   88afa:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   88afe:	0929      	lsrs	r1, r5, #4
   88b00:	f004 020f 	and.w	r2, r4, #15
   88b04:	460d      	mov	r5, r1
   88b06:	461c      	mov	r4, r3
   88b08:	5c83      	ldrb	r3, [r0, r2]
   88b0a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   88b0e:	ea54 0305 	orrs.w	r3, r4, r5
   88b12:	d1f1      	bne.n	88af8 <_vfiprintf_r+0x678>
   88b14:	ab3a      	add	r3, sp, #232	; 0xe8
   88b16:	1b9b      	subs	r3, r3, r6
   88b18:	464f      	mov	r7, r9
   88b1a:	9301      	str	r3, [sp, #4]
   88b1c:	e5c0      	b.n	886a0 <_vfiprintf_r+0x220>
   88b1e:	08e2      	lsrs	r2, r4, #3
   88b20:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   88b24:	08e9      	lsrs	r1, r5, #3
   88b26:	f004 0307 	and.w	r3, r4, #7
   88b2a:	460d      	mov	r5, r1
   88b2c:	4614      	mov	r4, r2
   88b2e:	3330      	adds	r3, #48	; 0x30
   88b30:	ea54 0105 	orrs.w	r1, r4, r5
   88b34:	4632      	mov	r2, r6
   88b36:	f806 3d01 	strb.w	r3, [r6, #-1]!
   88b3a:	d1f0      	bne.n	88b1e <_vfiprintf_r+0x69e>
   88b3c:	f019 0f01 	tst.w	r9, #1
   88b40:	d0e8      	beq.n	88b14 <_vfiprintf_r+0x694>
   88b42:	2b30      	cmp	r3, #48	; 0x30
   88b44:	d0e6      	beq.n	88b14 <_vfiprintf_r+0x694>
   88b46:	2330      	movs	r3, #48	; 0x30
   88b48:	3a02      	subs	r2, #2
   88b4a:	f806 3c01 	strb.w	r3, [r6, #-1]
   88b4e:	ab3a      	add	r3, sp, #232	; 0xe8
   88b50:	1a9b      	subs	r3, r3, r2
   88b52:	464f      	mov	r7, r9
   88b54:	4616      	mov	r6, r2
   88b56:	9301      	str	r3, [sp, #4]
   88b58:	e5a2      	b.n	886a0 <_vfiprintf_r+0x220>
   88b5a:	2301      	movs	r3, #1
   88b5c:	9a01      	ldr	r2, [sp, #4]
   88b5e:	930f      	str	r3, [sp, #60]	; 0x3c
   88b60:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   88b64:	9212      	str	r2, [sp, #72]	; 0x48
   88b66:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b6a:	f10a 0a08 	add.w	sl, sl, #8
   88b6e:	e69d      	b.n	888ac <_vfiprintf_r+0x42c>
   88b70:	9b02      	ldr	r3, [sp, #8]
   88b72:	1b5c      	subs	r4, r3, r5
   88b74:	2c00      	cmp	r4, #0
   88b76:	f77f ae7d 	ble.w	88874 <_vfiprintf_r+0x3f4>
   88b7a:	2c10      	cmp	r4, #16
   88b7c:	f340 82ea 	ble.w	89154 <_vfiprintf_r+0xcd4>
   88b80:	f8df 9230 	ldr.w	r9, [pc, #560]	; 88db4 <_vfiprintf_r+0x934>
   88b84:	4650      	mov	r0, sl
   88b86:	9706      	str	r7, [sp, #24]
   88b88:	46b2      	mov	sl, r6
   88b8a:	464e      	mov	r6, r9
   88b8c:	46c1      	mov	r9, r8
   88b8e:	46a8      	mov	r8, r5
   88b90:	9d05      	ldr	r5, [sp, #20]
   88b92:	e006      	b.n	88ba2 <_vfiprintf_r+0x722>
   88b94:	f101 0c02 	add.w	ip, r1, #2
   88b98:	4619      	mov	r1, r3
   88b9a:	3008      	adds	r0, #8
   88b9c:	3c10      	subs	r4, #16
   88b9e:	2c10      	cmp	r4, #16
   88ba0:	dd1a      	ble.n	88bd8 <_vfiprintf_r+0x758>
   88ba2:	2710      	movs	r7, #16
   88ba4:	1c4b      	adds	r3, r1, #1
   88ba6:	3210      	adds	r2, #16
   88ba8:	2b07      	cmp	r3, #7
   88baa:	9210      	str	r2, [sp, #64]	; 0x40
   88bac:	6006      	str	r6, [r0, #0]
   88bae:	6047      	str	r7, [r0, #4]
   88bb0:	930f      	str	r3, [sp, #60]	; 0x3c
   88bb2:	ddef      	ble.n	88b94 <_vfiprintf_r+0x714>
   88bb4:	2a00      	cmp	r2, #0
   88bb6:	d07b      	beq.n	88cb0 <_vfiprintf_r+0x830>
   88bb8:	4659      	mov	r1, fp
   88bba:	4628      	mov	r0, r5
   88bbc:	aa0e      	add	r2, sp, #56	; 0x38
   88bbe:	f7ff fc23 	bl	88408 <__sprint_r.part.0>
   88bc2:	2800      	cmp	r0, #0
   88bc4:	f47f adf6 	bne.w	887b4 <_vfiprintf_r+0x334>
   88bc8:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88bcc:	3c10      	subs	r4, #16
   88bce:	2c10      	cmp	r4, #16
   88bd0:	a811      	add	r0, sp, #68	; 0x44
   88bd2:	f101 0c01 	add.w	ip, r1, #1
   88bd6:	dce4      	bgt.n	88ba2 <_vfiprintf_r+0x722>
   88bd8:	4645      	mov	r5, r8
   88bda:	46c8      	mov	r8, r9
   88bdc:	46b1      	mov	r9, r6
   88bde:	4656      	mov	r6, sl
   88be0:	4682      	mov	sl, r0
   88be2:	9f06      	ldr	r7, [sp, #24]
   88be4:	4422      	add	r2, r4
   88be6:	f1bc 0f07 	cmp.w	ip, #7
   88bea:	e9ca 9400 	strd	r9, r4, [sl]
   88bee:	9210      	str	r2, [sp, #64]	; 0x40
   88bf0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   88bf4:	f340 817e 	ble.w	88ef4 <_vfiprintf_r+0xa74>
   88bf8:	2a00      	cmp	r2, #0
   88bfa:	f000 825c 	beq.w	890b6 <_vfiprintf_r+0xc36>
   88bfe:	4659      	mov	r1, fp
   88c00:	9805      	ldr	r0, [sp, #20]
   88c02:	aa0e      	add	r2, sp, #56	; 0x38
   88c04:	f7ff fc00 	bl	88408 <__sprint_r.part.0>
   88c08:	2800      	cmp	r0, #0
   88c0a:	f47f add3 	bne.w	887b4 <_vfiprintf_r+0x334>
   88c0e:	e9dd 3400 	ldrd	r3, r4, [sp]
   88c12:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88c16:	1b1c      	subs	r4, r3, r4
   88c18:	2c00      	cmp	r4, #0
   88c1a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88c1e:	f101 0001 	add.w	r0, r1, #1
   88c22:	f77f ae2d 	ble.w	88880 <_vfiprintf_r+0x400>
   88c26:	2c10      	cmp	r4, #16
   88c28:	f8df 9188 	ldr.w	r9, [pc, #392]	; 88db4 <_vfiprintf_r+0x934>
   88c2c:	dd2f      	ble.n	88c8e <_vfiprintf_r+0x80e>
   88c2e:	46d4      	mov	ip, sl
   88c30:	46b2      	mov	sl, r6
   88c32:	464e      	mov	r6, r9
   88c34:	46c1      	mov	r9, r8
   88c36:	46a8      	mov	r8, r5
   88c38:	9d05      	ldr	r5, [sp, #20]
   88c3a:	e006      	b.n	88c4a <_vfiprintf_r+0x7ca>
   88c3c:	1c88      	adds	r0, r1, #2
   88c3e:	4619      	mov	r1, r3
   88c40:	f10c 0c08 	add.w	ip, ip, #8
   88c44:	3c10      	subs	r4, #16
   88c46:	2c10      	cmp	r4, #16
   88c48:	dd1c      	ble.n	88c84 <_vfiprintf_r+0x804>
   88c4a:	2010      	movs	r0, #16
   88c4c:	1c4b      	adds	r3, r1, #1
   88c4e:	3210      	adds	r2, #16
   88c50:	2b07      	cmp	r3, #7
   88c52:	9210      	str	r2, [sp, #64]	; 0x40
   88c54:	f8cc 6000 	str.w	r6, [ip]
   88c58:	f8cc 0004 	str.w	r0, [ip, #4]
   88c5c:	930f      	str	r3, [sp, #60]	; 0x3c
   88c5e:	dded      	ble.n	88c3c <_vfiprintf_r+0x7bc>
   88c60:	b30a      	cbz	r2, 88ca6 <_vfiprintf_r+0x826>
   88c62:	4659      	mov	r1, fp
   88c64:	4628      	mov	r0, r5
   88c66:	aa0e      	add	r2, sp, #56	; 0x38
   88c68:	f7ff fbce 	bl	88408 <__sprint_r.part.0>
   88c6c:	2800      	cmp	r0, #0
   88c6e:	f47f ada1 	bne.w	887b4 <_vfiprintf_r+0x334>
   88c72:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88c76:	3c10      	subs	r4, #16
   88c78:	2c10      	cmp	r4, #16
   88c7a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88c7e:	f101 0001 	add.w	r0, r1, #1
   88c82:	dce2      	bgt.n	88c4a <_vfiprintf_r+0x7ca>
   88c84:	4645      	mov	r5, r8
   88c86:	46c8      	mov	r8, r9
   88c88:	46b1      	mov	r9, r6
   88c8a:	4656      	mov	r6, sl
   88c8c:	46e2      	mov	sl, ip
   88c8e:	4422      	add	r2, r4
   88c90:	2807      	cmp	r0, #7
   88c92:	e9ca 9400 	strd	r9, r4, [sl]
   88c96:	9210      	str	r2, [sp, #64]	; 0x40
   88c98:	900f      	str	r0, [sp, #60]	; 0x3c
   88c9a:	f300 80d3 	bgt.w	88e44 <_vfiprintf_r+0x9c4>
   88c9e:	f10a 0a08 	add.w	sl, sl, #8
   88ca2:	3001      	adds	r0, #1
   88ca4:	e5ec      	b.n	88880 <_vfiprintf_r+0x400>
   88ca6:	2001      	movs	r0, #1
   88ca8:	4611      	mov	r1, r2
   88caa:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88cae:	e7c9      	b.n	88c44 <_vfiprintf_r+0x7c4>
   88cb0:	f04f 0c01 	mov.w	ip, #1
   88cb4:	4611      	mov	r1, r2
   88cb6:	a811      	add	r0, sp, #68	; 0x44
   88cb8:	e770      	b.n	88b9c <_vfiprintf_r+0x71c>
   88cba:	2a00      	cmp	r2, #0
   88cbc:	f000 80d3 	beq.w	88e66 <_vfiprintf_r+0x9e6>
   88cc0:	4659      	mov	r1, fp
   88cc2:	9805      	ldr	r0, [sp, #20]
   88cc4:	aa0e      	add	r2, sp, #56	; 0x38
   88cc6:	f7ff fb9f 	bl	88408 <__sprint_r.part.0>
   88cca:	2800      	cmp	r0, #0
   88ccc:	f47f ad72 	bne.w	887b4 <_vfiprintf_r+0x334>
   88cd0:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88cd4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88cd8:	1c48      	adds	r0, r1, #1
   88cda:	e5ac      	b.n	88836 <_vfiprintf_r+0x3b6>
   88cdc:	2202      	movs	r2, #2
   88cde:	2001      	movs	r0, #1
   88ce0:	ab0d      	add	r3, sp, #52	; 0x34
   88ce2:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   88ce6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88cea:	4601      	mov	r1, r0
   88cec:	f10a 0a08 	add.w	sl, sl, #8
   88cf0:	1c48      	adds	r0, r1, #1
   88cf2:	e5bb      	b.n	8886c <_vfiprintf_r+0x3ec>
   88cf4:	2c10      	cmp	r4, #16
   88cf6:	f340 8214 	ble.w	89122 <_vfiprintf_r+0xca2>
   88cfa:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   88cfe:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 88db8 <_vfiprintf_r+0x938>
   88d02:	46d4      	mov	ip, sl
   88d04:	46b2      	mov	sl, r6
   88d06:	464e      	mov	r6, r9
   88d08:	46c1      	mov	r9, r8
   88d0a:	46a8      	mov	r8, r5
   88d0c:	9d05      	ldr	r5, [sp, #20]
   88d0e:	e006      	b.n	88d1e <_vfiprintf_r+0x89e>
   88d10:	1c99      	adds	r1, r3, #2
   88d12:	4603      	mov	r3, r0
   88d14:	f10c 0c08 	add.w	ip, ip, #8
   88d18:	3c10      	subs	r4, #16
   88d1a:	2c10      	cmp	r4, #16
   88d1c:	dd1c      	ble.n	88d58 <_vfiprintf_r+0x8d8>
   88d1e:	2110      	movs	r1, #16
   88d20:	1c58      	adds	r0, r3, #1
   88d22:	3210      	adds	r2, #16
   88d24:	2807      	cmp	r0, #7
   88d26:	9210      	str	r2, [sp, #64]	; 0x40
   88d28:	f8cc 6000 	str.w	r6, [ip]
   88d2c:	f8cc 1004 	str.w	r1, [ip, #4]
   88d30:	900f      	str	r0, [sp, #60]	; 0x3c
   88d32:	dded      	ble.n	88d10 <_vfiprintf_r+0x890>
   88d34:	b30a      	cbz	r2, 88d7a <_vfiprintf_r+0x8fa>
   88d36:	4659      	mov	r1, fp
   88d38:	4628      	mov	r0, r5
   88d3a:	aa0e      	add	r2, sp, #56	; 0x38
   88d3c:	f7ff fb64 	bl	88408 <__sprint_r.part.0>
   88d40:	2800      	cmp	r0, #0
   88d42:	f47f ad37 	bne.w	887b4 <_vfiprintf_r+0x334>
   88d46:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   88d4a:	3c10      	subs	r4, #16
   88d4c:	2c10      	cmp	r4, #16
   88d4e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88d52:	f103 0101 	add.w	r1, r3, #1
   88d56:	dce2      	bgt.n	88d1e <_vfiprintf_r+0x89e>
   88d58:	4645      	mov	r5, r8
   88d5a:	46c8      	mov	r8, r9
   88d5c:	46b1      	mov	r9, r6
   88d5e:	4656      	mov	r6, sl
   88d60:	46e2      	mov	sl, ip
   88d62:	4422      	add	r2, r4
   88d64:	2907      	cmp	r1, #7
   88d66:	e9ca 9400 	strd	r9, r4, [sl]
   88d6a:	9210      	str	r2, [sp, #64]	; 0x40
   88d6c:	910f      	str	r1, [sp, #60]	; 0x3c
   88d6e:	f300 80a8 	bgt.w	88ec2 <_vfiprintf_r+0xa42>
   88d72:	f10a 0a08 	add.w	sl, sl, #8
   88d76:	1c48      	adds	r0, r1, #1
   88d78:	e54b      	b.n	88812 <_vfiprintf_r+0x392>
   88d7a:	4613      	mov	r3, r2
   88d7c:	2101      	movs	r1, #1
   88d7e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88d82:	e7c9      	b.n	88d18 <_vfiprintf_r+0x898>
   88d84:	0778      	lsls	r0, r7, #29
   88d86:	920f      	str	r2, [sp, #60]	; 0x3c
   88d88:	d554      	bpl.n	88e34 <_vfiprintf_r+0x9b4>
   88d8a:	9b02      	ldr	r3, [sp, #8]
   88d8c:	1b5c      	subs	r4, r3, r5
   88d8e:	2c00      	cmp	r4, #0
   88d90:	dd50      	ble.n	88e34 <_vfiprintf_r+0x9b4>
   88d92:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88d96:	2c10      	cmp	r4, #16
   88d98:	f340 81d7 	ble.w	8914a <_vfiprintf_r+0xcca>
   88d9c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 88db8 <_vfiprintf_r+0x938>
   88da0:	2610      	movs	r6, #16
   88da2:	464b      	mov	r3, r9
   88da4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88da6:	46a9      	mov	r9, r5
   88da8:	9f05      	ldr	r7, [sp, #20]
   88daa:	461d      	mov	r5, r3
   88dac:	e00d      	b.n	88dca <_vfiprintf_r+0x94a>
   88dae:	bf00      	nop
   88db0:	0008d3f4 	.word	0x0008d3f4
   88db4:	0008d458 	.word	0x0008d458
   88db8:	0008d448 	.word	0x0008d448
   88dbc:	1c88      	adds	r0, r1, #2
   88dbe:	4619      	mov	r1, r3
   88dc0:	f10a 0a08 	add.w	sl, sl, #8
   88dc4:	3c10      	subs	r4, #16
   88dc6:	2c10      	cmp	r4, #16
   88dc8:	dd19      	ble.n	88dfe <_vfiprintf_r+0x97e>
   88dca:	1c4b      	adds	r3, r1, #1
   88dcc:	3210      	adds	r2, #16
   88dce:	2b07      	cmp	r3, #7
   88dd0:	e9ca 5600 	strd	r5, r6, [sl]
   88dd4:	9210      	str	r2, [sp, #64]	; 0x40
   88dd6:	930f      	str	r3, [sp, #60]	; 0x3c
   88dd8:	ddf0      	ble.n	88dbc <_vfiprintf_r+0x93c>
   88dda:	b332      	cbz	r2, 88e2a <_vfiprintf_r+0x9aa>
   88ddc:	4659      	mov	r1, fp
   88dde:	4638      	mov	r0, r7
   88de0:	aa0e      	add	r2, sp, #56	; 0x38
   88de2:	f7ff fb11 	bl	88408 <__sprint_r.part.0>
   88de6:	2800      	cmp	r0, #0
   88de8:	f47f ace4 	bne.w	887b4 <_vfiprintf_r+0x334>
   88dec:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88df0:	3c10      	subs	r4, #16
   88df2:	2c10      	cmp	r4, #16
   88df4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88df8:	f101 0001 	add.w	r0, r1, #1
   88dfc:	dce5      	bgt.n	88dca <_vfiprintf_r+0x94a>
   88dfe:	462b      	mov	r3, r5
   88e00:	464d      	mov	r5, r9
   88e02:	4699      	mov	r9, r3
   88e04:	4422      	add	r2, r4
   88e06:	2807      	cmp	r0, #7
   88e08:	e9ca 9400 	strd	r9, r4, [sl]
   88e0c:	9210      	str	r2, [sp, #64]	; 0x40
   88e0e:	900f      	str	r0, [sp, #60]	; 0x3c
   88e10:	f77f ad53 	ble.w	888ba <_vfiprintf_r+0x43a>
   88e14:	b172      	cbz	r2, 88e34 <_vfiprintf_r+0x9b4>
   88e16:	4659      	mov	r1, fp
   88e18:	9805      	ldr	r0, [sp, #20]
   88e1a:	aa0e      	add	r2, sp, #56	; 0x38
   88e1c:	f7ff faf4 	bl	88408 <__sprint_r.part.0>
   88e20:	2800      	cmp	r0, #0
   88e22:	f47f acc7 	bne.w	887b4 <_vfiprintf_r+0x334>
   88e26:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88e28:	e547      	b.n	888ba <_vfiprintf_r+0x43a>
   88e2a:	2001      	movs	r0, #1
   88e2c:	4611      	mov	r1, r2
   88e2e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88e32:	e7c7      	b.n	88dc4 <_vfiprintf_r+0x944>
   88e34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   88e38:	42aa      	cmp	r2, r5
   88e3a:	bfac      	ite	ge
   88e3c:	189b      	addge	r3, r3, r2
   88e3e:	195b      	addlt	r3, r3, r5
   88e40:	9303      	str	r3, [sp, #12]
   88e42:	e544      	b.n	888ce <_vfiprintf_r+0x44e>
   88e44:	2a00      	cmp	r2, #0
   88e46:	f43f ae88 	beq.w	88b5a <_vfiprintf_r+0x6da>
   88e4a:	4659      	mov	r1, fp
   88e4c:	9805      	ldr	r0, [sp, #20]
   88e4e:	aa0e      	add	r2, sp, #56	; 0x38
   88e50:	f7ff fada 	bl	88408 <__sprint_r.part.0>
   88e54:	2800      	cmp	r0, #0
   88e56:	f47f acad 	bne.w	887b4 <_vfiprintf_r+0x334>
   88e5a:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   88e5e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88e62:	3001      	adds	r0, #1
   88e64:	e50c      	b.n	88880 <_vfiprintf_r+0x400>
   88e66:	9b07      	ldr	r3, [sp, #28]
   88e68:	2b00      	cmp	r3, #0
   88e6a:	d16b      	bne.n	88f44 <_vfiprintf_r+0xac4>
   88e6c:	2001      	movs	r0, #1
   88e6e:	4611      	mov	r1, r2
   88e70:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88e74:	e4fa      	b.n	8886c <_vfiprintf_r+0x3ec>
   88e76:	920f      	str	r2, [sp, #60]	; 0x3c
   88e78:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88e7c:	e481      	b.n	88782 <_vfiprintf_r+0x302>
   88e7e:	9b00      	ldr	r3, [sp, #0]
   88e80:	2b00      	cmp	r3, #0
   88e82:	f47f ac05 	bne.w	88690 <_vfiprintf_r+0x210>
   88e86:	464f      	mov	r7, r9
   88e88:	2300      	movs	r3, #0
   88e8a:	ae3a      	add	r6, sp, #232	; 0xe8
   88e8c:	9300      	str	r3, [sp, #0]
   88e8e:	9301      	str	r3, [sp, #4]
   88e90:	e406      	b.n	886a0 <_vfiprintf_r+0x220>
   88e92:	f854 2b04 	ldr.w	r2, [r4], #4
   88e96:	f019 0f10 	tst.w	r9, #16
   88e9a:	f04f 0301 	mov.w	r3, #1
   88e9e:	9404      	str	r4, [sp, #16]
   88ea0:	d132      	bne.n	88f08 <_vfiprintf_r+0xa88>
   88ea2:	f019 0f40 	tst.w	r9, #64	; 0x40
   88ea6:	d02b      	beq.n	88f00 <_vfiprintf_r+0xa80>
   88ea8:	2500      	movs	r5, #0
   88eaa:	b294      	uxth	r4, r2
   88eac:	e439      	b.n	88722 <_vfiprintf_r+0x2a2>
   88eae:	232d      	movs	r3, #45	; 0x2d
   88eb0:	4264      	negs	r4, r4
   88eb2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88eb6:	46b9      	mov	r9, r7
   88eb8:	f04f 0301 	mov.w	r3, #1
   88ebc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   88ec0:	e433      	b.n	8872a <_vfiprintf_r+0x2aa>
   88ec2:	2a00      	cmp	r2, #0
   88ec4:	d06f      	beq.n	88fa6 <_vfiprintf_r+0xb26>
   88ec6:	4659      	mov	r1, fp
   88ec8:	9805      	ldr	r0, [sp, #20]
   88eca:	aa0e      	add	r2, sp, #56	; 0x38
   88ecc:	f7ff fa9c 	bl	88408 <__sprint_r.part.0>
   88ed0:	2800      	cmp	r0, #0
   88ed2:	f47f ac6f 	bne.w	887b4 <_vfiprintf_r+0x334>
   88ed6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88eda:	e497      	b.n	8880c <_vfiprintf_r+0x38c>
   88edc:	ae3a      	add	r6, sp, #232	; 0xe8
   88ede:	f7ff bbdf 	b.w	886a0 <_vfiprintf_r+0x220>
   88ee2:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88ee6:	f001 fed9 	bl	8ac9c <__retarget_lock_acquire_recursive>
   88eea:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   88eee:	b28a      	uxth	r2, r1
   88ef0:	f7ff badd 	b.w	884ae <_vfiprintf_r+0x2e>
   88ef4:	4661      	mov	r1, ip
   88ef6:	f10a 0a08 	add.w	sl, sl, #8
   88efa:	f10c 0001 	add.w	r0, ip, #1
   88efe:	e4b9      	b.n	88874 <_vfiprintf_r+0x3f4>
   88f00:	f419 7f00 	tst.w	r9, #512	; 0x200
   88f04:	f040 80ef 	bne.w	890e6 <_vfiprintf_r+0xc66>
   88f08:	4614      	mov	r4, r2
   88f0a:	2500      	movs	r5, #0
   88f0c:	e409      	b.n	88722 <_vfiprintf_r+0x2a2>
   88f0e:	05be      	lsls	r6, r7, #22
   88f10:	f100 80f7 	bmi.w	89102 <_vfiprintf_r+0xc82>
   88f14:	461c      	mov	r4, r3
   88f16:	2500      	movs	r5, #0
   88f18:	e400      	b.n	8871c <_vfiprintf_r+0x29c>
   88f1a:	05ba      	lsls	r2, r7, #22
   88f1c:	f100 80ea 	bmi.w	890f4 <_vfiprintf_r+0xc74>
   88f20:	17e5      	asrs	r5, r4, #31
   88f22:	9304      	str	r3, [sp, #16]
   88f24:	4622      	mov	r2, r4
   88f26:	462b      	mov	r3, r5
   88f28:	f7ff bb9e 	b.w	88668 <_vfiprintf_r+0x1e8>
   88f2c:	9b03      	ldr	r3, [sp, #12]
   88f2e:	9c04      	ldr	r4, [sp, #16]
   88f30:	17dd      	asrs	r5, r3, #31
   88f32:	461a      	mov	r2, r3
   88f34:	462b      	mov	r3, r5
   88f36:	f854 1b04 	ldr.w	r1, [r4], #4
   88f3a:	e9c1 2300 	strd	r2, r3, [r1]
   88f3e:	9404      	str	r4, [sp, #16]
   88f40:	f7ff badc 	b.w	884fc <_vfiprintf_r+0x7c>
   88f44:	2202      	movs	r2, #2
   88f46:	ab0d      	add	r3, sp, #52	; 0x34
   88f48:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   88f4c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88f50:	e6cc      	b.n	88cec <_vfiprintf_r+0x86c>
   88f52:	46b9      	mov	r9, r7
   88f54:	e598      	b.n	88a88 <_vfiprintf_r+0x608>
   88f56:	4a90      	ldr	r2, [pc, #576]	; (89198 <_vfiprintf_r+0xd18>)
   88f58:	9208      	str	r2, [sp, #32]
   88f5a:	06bd      	lsls	r5, r7, #26
   88f5c:	9c04      	ldr	r4, [sp, #16]
   88f5e:	d530      	bpl.n	88fc2 <_vfiprintf_r+0xb42>
   88f60:	3407      	adds	r4, #7
   88f62:	f024 0207 	bic.w	r2, r4, #7
   88f66:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   88f6a:	9204      	str	r2, [sp, #16]
   88f6c:	07fe      	lsls	r6, r7, #31
   88f6e:	d509      	bpl.n	88f84 <_vfiprintf_r+0xb04>
   88f70:	ea54 0205 	orrs.w	r2, r4, r5
   88f74:	d006      	beq.n	88f84 <_vfiprintf_r+0xb04>
   88f76:	2230      	movs	r2, #48	; 0x30
   88f78:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   88f7c:	f047 0702 	orr.w	r7, r7, #2
   88f80:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   88f84:	2302      	movs	r3, #2
   88f86:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   88f8a:	f7ff bbca 	b.w	88722 <_vfiprintf_r+0x2a2>
   88f8e:	4a83      	ldr	r2, [pc, #524]	; (8919c <_vfiprintf_r+0xd1c>)
   88f90:	9208      	str	r2, [sp, #32]
   88f92:	e7e2      	b.n	88f5a <_vfiprintf_r+0xada>
   88f94:	4630      	mov	r0, r6
   88f96:	f003 f873 	bl	8c080 <strlen>
   88f9a:	2300      	movs	r3, #0
   88f9c:	9404      	str	r4, [sp, #16]
   88f9e:	9001      	str	r0, [sp, #4]
   88fa0:	9300      	str	r3, [sp, #0]
   88fa2:	f7ff bb7d 	b.w	886a0 <_vfiprintf_r+0x220>
   88fa6:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   88faa:	2900      	cmp	r1, #0
   88fac:	f040 8089 	bne.w	890c2 <_vfiprintf_r+0xc42>
   88fb0:	9b07      	ldr	r3, [sp, #28]
   88fb2:	2b00      	cmp	r3, #0
   88fb4:	f47f ae92 	bne.w	88cdc <_vfiprintf_r+0x85c>
   88fb8:	4611      	mov	r1, r2
   88fba:	2001      	movs	r0, #1
   88fbc:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88fc0:	e458      	b.n	88874 <_vfiprintf_r+0x3f4>
   88fc2:	f854 2b04 	ldr.w	r2, [r4], #4
   88fc6:	9404      	str	r4, [sp, #16]
   88fc8:	06fc      	lsls	r4, r7, #27
   88fca:	d407      	bmi.n	88fdc <_vfiprintf_r+0xb5c>
   88fcc:	0678      	lsls	r0, r7, #25
   88fce:	d502      	bpl.n	88fd6 <_vfiprintf_r+0xb56>
   88fd0:	2500      	movs	r5, #0
   88fd2:	b294      	uxth	r4, r2
   88fd4:	e7ca      	b.n	88f6c <_vfiprintf_r+0xaec>
   88fd6:	05b9      	lsls	r1, r7, #22
   88fd8:	f100 8089 	bmi.w	890ee <_vfiprintf_r+0xc6e>
   88fdc:	4614      	mov	r4, r2
   88fde:	2500      	movs	r5, #0
   88fe0:	e7c4      	b.n	88f6c <_vfiprintf_r+0xaec>
   88fe2:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   88fe6:	f8cd 9004 	str.w	r9, [sp, #4]
   88fea:	f8cd 8018 	str.w	r8, [sp, #24]
   88fee:	2700      	movs	r7, #0
   88ff0:	4698      	mov	r8, r3
   88ff2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   88ff6:	ae3a      	add	r6, sp, #232	; 0xe8
   88ff8:	e00b      	b.n	89012 <_vfiprintf_r+0xb92>
   88ffa:	220a      	movs	r2, #10
   88ffc:	2300      	movs	r3, #0
   88ffe:	4620      	mov	r0, r4
   89000:	4629      	mov	r1, r5
   89002:	f004 f811 	bl	8d028 <__aeabi_uldivmod>
   89006:	2d00      	cmp	r5, #0
   89008:	bf08      	it	eq
   8900a:	2c0a      	cmpeq	r4, #10
   8900c:	d319      	bcc.n	89042 <_vfiprintf_r+0xbc2>
   8900e:	4604      	mov	r4, r0
   89010:	460d      	mov	r5, r1
   89012:	220a      	movs	r2, #10
   89014:	2300      	movs	r3, #0
   89016:	4620      	mov	r0, r4
   89018:	4629      	mov	r1, r5
   8901a:	f004 f805 	bl	8d028 <__aeabi_uldivmod>
   8901e:	3230      	adds	r2, #48	; 0x30
   89020:	f806 2c01 	strb.w	r2, [r6, #-1]
   89024:	3701      	adds	r7, #1
   89026:	3e01      	subs	r6, #1
   89028:	f1b8 0f00 	cmp.w	r8, #0
   8902c:	d0e5      	beq.n	88ffa <_vfiprintf_r+0xb7a>
   8902e:	f899 3000 	ldrb.w	r3, [r9]
   89032:	42bb      	cmp	r3, r7
   89034:	d1e1      	bne.n	88ffa <_vfiprintf_r+0xb7a>
   89036:	2fff      	cmp	r7, #255	; 0xff
   89038:	d0df      	beq.n	88ffa <_vfiprintf_r+0xb7a>
   8903a:	2d00      	cmp	r5, #0
   8903c:	bf08      	it	eq
   8903e:	2c0a      	cmpeq	r4, #10
   89040:	d225      	bcs.n	8908e <_vfiprintf_r+0xc0e>
   89042:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   89046:	ab3a      	add	r3, sp, #232	; 0xe8
   89048:	f8dd 9004 	ldr.w	r9, [sp, #4]
   8904c:	1b9b      	subs	r3, r3, r6
   8904e:	464f      	mov	r7, r9
   89050:	f8dd 8018 	ldr.w	r8, [sp, #24]
   89054:	9301      	str	r3, [sp, #4]
   89056:	f7ff bb23 	b.w	886a0 <_vfiprintf_r+0x220>
   8905a:	46b9      	mov	r9, r7
   8905c:	f7ff bb13 	b.w	88686 <_vfiprintf_r+0x206>
   89060:	2b01      	cmp	r3, #1
   89062:	46b9      	mov	r9, r7
   89064:	f47f ad44 	bne.w	88af0 <_vfiprintf_r+0x670>
   89068:	f7ff bb12 	b.w	88690 <_vfiprintf_r+0x210>
   8906c:	9c04      	ldr	r4, [sp, #16]
   8906e:	9a03      	ldr	r2, [sp, #12]
   89070:	f854 3b04 	ldr.w	r3, [r4], #4
   89074:	601a      	str	r2, [r3, #0]
   89076:	9404      	str	r4, [sp, #16]
   89078:	f7ff ba40 	b.w	884fc <_vfiprintf_r+0x7c>
   8907c:	9d00      	ldr	r5, [sp, #0]
   8907e:	4e48      	ldr	r6, [pc, #288]	; (891a0 <_vfiprintf_r+0xd20>)
   89080:	2d06      	cmp	r5, #6
   89082:	bf28      	it	cs
   89084:	2506      	movcs	r5, #6
   89086:	9404      	str	r4, [sp, #16]
   89088:	9501      	str	r5, [sp, #4]
   8908a:	f7ff bbaf 	b.w	887ec <_vfiprintf_r+0x36c>
   8908e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89090:	990a      	ldr	r1, [sp, #40]	; 0x28
   89092:	1af6      	subs	r6, r6, r3
   89094:	461a      	mov	r2, r3
   89096:	4630      	mov	r0, r6
   89098:	f003 f820 	bl	8c0dc <strncpy>
   8909c:	f899 3001 	ldrb.w	r3, [r9, #1]
   890a0:	b10b      	cbz	r3, 890a6 <_vfiprintf_r+0xc26>
   890a2:	f109 0901 	add.w	r9, r9, #1
   890a6:	220a      	movs	r2, #10
   890a8:	2300      	movs	r3, #0
   890aa:	4620      	mov	r0, r4
   890ac:	4629      	mov	r1, r5
   890ae:	f003 ffbb 	bl	8d028 <__aeabi_uldivmod>
   890b2:	2700      	movs	r7, #0
   890b4:	e7ab      	b.n	8900e <_vfiprintf_r+0xb8e>
   890b6:	2001      	movs	r0, #1
   890b8:	4611      	mov	r1, r2
   890ba:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   890be:	f7ff bbd9 	b.w	88874 <_vfiprintf_r+0x3f4>
   890c2:	2201      	movs	r2, #1
   890c4:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   890c8:	4610      	mov	r0, r2
   890ca:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   890ce:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   890d2:	f7ff bbac 	b.w	8882e <_vfiprintf_r+0x3ae>
   890d6:	9c04      	ldr	r4, [sp, #16]
   890d8:	9a03      	ldr	r2, [sp, #12]
   890da:	f854 3b04 	ldr.w	r3, [r4], #4
   890de:	801a      	strh	r2, [r3, #0]
   890e0:	9404      	str	r4, [sp, #16]
   890e2:	f7ff ba0b 	b.w	884fc <_vfiprintf_r+0x7c>
   890e6:	2500      	movs	r5, #0
   890e8:	b2d4      	uxtb	r4, r2
   890ea:	f7ff bb1a 	b.w	88722 <_vfiprintf_r+0x2a2>
   890ee:	2500      	movs	r5, #0
   890f0:	b2d4      	uxtb	r4, r2
   890f2:	e73b      	b.n	88f6c <_vfiprintf_r+0xaec>
   890f4:	b264      	sxtb	r4, r4
   890f6:	17e5      	asrs	r5, r4, #31
   890f8:	9304      	str	r3, [sp, #16]
   890fa:	4622      	mov	r2, r4
   890fc:	462b      	mov	r3, r5
   890fe:	f7ff bab3 	b.w	88668 <_vfiprintf_r+0x1e8>
   89102:	2500      	movs	r5, #0
   89104:	b2dc      	uxtb	r4, r3
   89106:	f7ff bb09 	b.w	8871c <_vfiprintf_r+0x29c>
   8910a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8910e:	f001 fdc7 	bl	8aca0 <__retarget_lock_release_recursive>
   89112:	f7ff baec 	b.w	886ee <_vfiprintf_r+0x26e>
   89116:	9b00      	ldr	r3, [sp, #0]
   89118:	9404      	str	r4, [sp, #16]
   8911a:	9301      	str	r3, [sp, #4]
   8911c:	9000      	str	r0, [sp, #0]
   8911e:	f7ff babf 	b.w	886a0 <_vfiprintf_r+0x220>
   89122:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89126:	f8df 907c 	ldr.w	r9, [pc, #124]	; 891a4 <_vfiprintf_r+0xd24>
   8912a:	3101      	adds	r1, #1
   8912c:	e619      	b.n	88d62 <_vfiprintf_r+0x8e2>
   8912e:	2200      	movs	r2, #0
   89130:	9200      	str	r2, [sp, #0]
   89132:	f7ff ba09 	b.w	88548 <_vfiprintf_r+0xc8>
   89136:	4659      	mov	r1, fp
   89138:	9805      	ldr	r0, [sp, #20]
   8913a:	aa0e      	add	r2, sp, #56	; 0x38
   8913c:	f7ff f964 	bl	88408 <__sprint_r.part.0>
   89140:	2800      	cmp	r0, #0
   89142:	f43f abd2 	beq.w	888ea <_vfiprintf_r+0x46a>
   89146:	f7ff bb36 	b.w	887b6 <_vfiprintf_r+0x336>
   8914a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8914c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 891a4 <_vfiprintf_r+0xd24>
   89150:	3001      	adds	r0, #1
   89152:	e657      	b.n	88e04 <_vfiprintf_r+0x984>
   89154:	4684      	mov	ip, r0
   89156:	f8df 9050 	ldr.w	r9, [pc, #80]	; 891a8 <_vfiprintf_r+0xd28>
   8915a:	e543      	b.n	88be4 <_vfiprintf_r+0x764>
   8915c:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89160:	07db      	lsls	r3, r3, #31
   89162:	d407      	bmi.n	89174 <_vfiprintf_r+0xcf4>
   89164:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89168:	059f      	lsls	r7, r3, #22
   8916a:	d403      	bmi.n	89174 <_vfiprintf_r+0xcf4>
   8916c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89170:	f001 fd96 	bl	8aca0 <__retarget_lock_release_recursive>
   89174:	f04f 33ff 	mov.w	r3, #4294967295
   89178:	9303      	str	r3, [sp, #12]
   8917a:	f7ff bb27 	b.w	887cc <_vfiprintf_r+0x34c>
   8917e:	9a04      	ldr	r2, [sp, #16]
   89180:	f898 3001 	ldrb.w	r3, [r8, #1]
   89184:	f852 0b04 	ldr.w	r0, [r2], #4
   89188:	4688      	mov	r8, r1
   8918a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8918e:	9000      	str	r0, [sp, #0]
   89190:	9204      	str	r2, [sp, #16]
   89192:	f7ff b9d7 	b.w	88544 <_vfiprintf_r+0xc4>
   89196:	bf00      	nop
   89198:	0008d408 	.word	0x0008d408
   8919c:	0008d3f4 	.word	0x0008d3f4
   891a0:	0008d41c 	.word	0x0008d41c
   891a4:	0008d448 	.word	0x0008d448
   891a8:	0008d458 	.word	0x0008d458

000891ac <__sbprintf>:
   891ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   891ae:	460c      	mov	r4, r1
   891b0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   891b4:	f04f 0e00 	mov.w	lr, #0
   891b8:	4615      	mov	r5, r2
   891ba:	4606      	mov	r6, r0
   891bc:	461f      	mov	r7, r3
   891be:	6e63      	ldr	r3, [r4, #100]	; 0x64
   891c0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   891c4:	89e2      	ldrh	r2, [r4, #14]
   891c6:	8989      	ldrh	r1, [r1, #12]
   891c8:	9319      	str	r3, [sp, #100]	; 0x64
   891ca:	69e3      	ldr	r3, [r4, #28]
   891cc:	f8ad 200e 	strh.w	r2, [sp, #14]
   891d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   891d2:	f021 0102 	bic.w	r1, r1, #2
   891d6:	9307      	str	r3, [sp, #28]
   891d8:	a816      	add	r0, sp, #88	; 0x58
   891da:	ab1a      	add	r3, sp, #104	; 0x68
   891dc:	f8ad 100c 	strh.w	r1, [sp, #12]
   891e0:	f8cd e018 	str.w	lr, [sp, #24]
   891e4:	9209      	str	r2, [sp, #36]	; 0x24
   891e6:	9300      	str	r3, [sp, #0]
   891e8:	9304      	str	r3, [sp, #16]
   891ea:	f8cd c008 	str.w	ip, [sp, #8]
   891ee:	f8cd c014 	str.w	ip, [sp, #20]
   891f2:	f001 fd4f 	bl	8ac94 <__retarget_lock_init_recursive>
   891f6:	462a      	mov	r2, r5
   891f8:	463b      	mov	r3, r7
   891fa:	4669      	mov	r1, sp
   891fc:	4630      	mov	r0, r6
   891fe:	f7ff f93f 	bl	88480 <_vfiprintf_r>
   89202:	1e05      	subs	r5, r0, #0
   89204:	db07      	blt.n	89216 <__sbprintf+0x6a>
   89206:	4630      	mov	r0, r6
   89208:	4669      	mov	r1, sp
   8920a:	f001 f919 	bl	8a440 <_fflush_r>
   8920e:	2800      	cmp	r0, #0
   89210:	bf18      	it	ne
   89212:	f04f 35ff 	movne.w	r5, #4294967295
   89216:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8921a:	065b      	lsls	r3, r3, #25
   8921c:	d503      	bpl.n	89226 <__sbprintf+0x7a>
   8921e:	89a3      	ldrh	r3, [r4, #12]
   89220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89224:	81a3      	strh	r3, [r4, #12]
   89226:	9816      	ldr	r0, [sp, #88]	; 0x58
   89228:	f001 fd36 	bl	8ac98 <__retarget_lock_close_recursive>
   8922c:	4628      	mov	r0, r5
   8922e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   89232:	bdf0      	pop	{r4, r5, r6, r7, pc}

00089234 <__swsetup_r>:
   89234:	b538      	push	{r3, r4, r5, lr}
   89236:	4b32      	ldr	r3, [pc, #200]	; (89300 <__swsetup_r+0xcc>)
   89238:	4605      	mov	r5, r0
   8923a:	6818      	ldr	r0, [r3, #0]
   8923c:	460c      	mov	r4, r1
   8923e:	b110      	cbz	r0, 89246 <__swsetup_r+0x12>
   89240:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89242:	2b00      	cmp	r3, #0
   89244:	d03c      	beq.n	892c0 <__swsetup_r+0x8c>
   89246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8924a:	0718      	lsls	r0, r3, #28
   8924c:	b29a      	uxth	r2, r3
   8924e:	d50c      	bpl.n	8926a <__swsetup_r+0x36>
   89250:	6921      	ldr	r1, [r4, #16]
   89252:	b1a9      	cbz	r1, 89280 <__swsetup_r+0x4c>
   89254:	f012 0001 	ands.w	r0, r2, #1
   89258:	d022      	beq.n	892a0 <__swsetup_r+0x6c>
   8925a:	2500      	movs	r5, #0
   8925c:	6960      	ldr	r0, [r4, #20]
   8925e:	60a5      	str	r5, [r4, #8]
   89260:	4240      	negs	r0, r0
   89262:	61a0      	str	r0, [r4, #24]
   89264:	b311      	cbz	r1, 892ac <__swsetup_r+0x78>
   89266:	2000      	movs	r0, #0
   89268:	bd38      	pop	{r3, r4, r5, pc}
   8926a:	06d1      	lsls	r1, r2, #27
   8926c:	d53f      	bpl.n	892ee <__swsetup_r+0xba>
   8926e:	0752      	lsls	r2, r2, #29
   89270:	d429      	bmi.n	892c6 <__swsetup_r+0x92>
   89272:	6921      	ldr	r1, [r4, #16]
   89274:	f043 0308 	orr.w	r3, r3, #8
   89278:	81a3      	strh	r3, [r4, #12]
   8927a:	b29a      	uxth	r2, r3
   8927c:	2900      	cmp	r1, #0
   8927e:	d1e9      	bne.n	89254 <__swsetup_r+0x20>
   89280:	f402 7020 	and.w	r0, r2, #640	; 0x280
   89284:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   89288:	d0e4      	beq.n	89254 <__swsetup_r+0x20>
   8928a:	4628      	mov	r0, r5
   8928c:	4621      	mov	r1, r4
   8928e:	f001 fd37 	bl	8ad00 <__smakebuf_r>
   89292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89296:	6921      	ldr	r1, [r4, #16]
   89298:	b29a      	uxth	r2, r3
   8929a:	f012 0001 	ands.w	r0, r2, #1
   8929e:	d1dc      	bne.n	8925a <__swsetup_r+0x26>
   892a0:	0795      	lsls	r5, r2, #30
   892a2:	bf58      	it	pl
   892a4:	6960      	ldrpl	r0, [r4, #20]
   892a6:	60a0      	str	r0, [r4, #8]
   892a8:	2900      	cmp	r1, #0
   892aa:	d1dc      	bne.n	89266 <__swsetup_r+0x32>
   892ac:	0612      	lsls	r2, r2, #24
   892ae:	bf58      	it	pl
   892b0:	4608      	movpl	r0, r1
   892b2:	d5d9      	bpl.n	89268 <__swsetup_r+0x34>
   892b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   892b8:	f04f 30ff 	mov.w	r0, #4294967295
   892bc:	81a3      	strh	r3, [r4, #12]
   892be:	bd38      	pop	{r3, r4, r5, pc}
   892c0:	f001 f91a 	bl	8a4f8 <__sinit>
   892c4:	e7bf      	b.n	89246 <__swsetup_r+0x12>
   892c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   892c8:	b151      	cbz	r1, 892e0 <__swsetup_r+0xac>
   892ca:	f104 0240 	add.w	r2, r4, #64	; 0x40
   892ce:	4291      	cmp	r1, r2
   892d0:	d004      	beq.n	892dc <__swsetup_r+0xa8>
   892d2:	4628      	mov	r0, r5
   892d4:	f001 fa34 	bl	8a740 <_free_r>
   892d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   892dc:	2200      	movs	r2, #0
   892de:	6322      	str	r2, [r4, #48]	; 0x30
   892e0:	2200      	movs	r2, #0
   892e2:	6921      	ldr	r1, [r4, #16]
   892e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   892e8:	e9c4 1200 	strd	r1, r2, [r4]
   892ec:	e7c2      	b.n	89274 <__swsetup_r+0x40>
   892ee:	2209      	movs	r2, #9
   892f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   892f4:	602a      	str	r2, [r5, #0]
   892f6:	f04f 30ff 	mov.w	r0, #4294967295
   892fa:	81a3      	strh	r3, [r4, #12]
   892fc:	bd38      	pop	{r3, r4, r5, pc}
   892fe:	bf00      	nop
   89300:	2000043c 	.word	0x2000043c

00089304 <register_fini>:
   89304:	4b02      	ldr	r3, [pc, #8]	; (89310 <register_fini+0xc>)
   89306:	b113      	cbz	r3, 8930e <register_fini+0xa>
   89308:	4802      	ldr	r0, [pc, #8]	; (89314 <register_fini+0x10>)
   8930a:	f000 b805 	b.w	89318 <atexit>
   8930e:	4770      	bx	lr
   89310:	00000000 	.word	0x00000000
   89314:	0008a56d 	.word	0x0008a56d

00089318 <atexit>:
   89318:	2300      	movs	r3, #0
   8931a:	4601      	mov	r1, r0
   8931c:	461a      	mov	r2, r3
   8931e:	4618      	mov	r0, r3
   89320:	f003 b826 	b.w	8c370 <__register_exitproc>

00089324 <quorem>:
   89324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89328:	6903      	ldr	r3, [r0, #16]
   8932a:	690d      	ldr	r5, [r1, #16]
   8932c:	b083      	sub	sp, #12
   8932e:	42ab      	cmp	r3, r5
   89330:	f2c0 8084 	blt.w	8943c <quorem+0x118>
   89334:	3d01      	subs	r5, #1
   89336:	f101 0614 	add.w	r6, r1, #20
   8933a:	f100 0914 	add.w	r9, r0, #20
   8933e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   89342:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89346:	3301      	adds	r3, #1
   89348:	468e      	mov	lr, r1
   8934a:	00a9      	lsls	r1, r5, #2
   8934c:	9100      	str	r1, [sp, #0]
   8934e:	429a      	cmp	r2, r3
   89350:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   89354:	4682      	mov	sl, r0
   89356:	fbb2 f7f3 	udiv	r7, r2, r3
   8935a:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   8935e:	9101      	str	r1, [sp, #4]
   89360:	d337      	bcc.n	893d2 <quorem+0xae>
   89362:	2200      	movs	r2, #0
   89364:	46b4      	mov	ip, r6
   89366:	4614      	mov	r4, r2
   89368:	4648      	mov	r0, r9
   8936a:	f85c 3b04 	ldr.w	r3, [ip], #4
   8936e:	6801      	ldr	r1, [r0, #0]
   89370:	fa1f fb83 	uxth.w	fp, r3
   89374:	fb07 220b 	mla	r2, r7, fp, r2
   89378:	0c1b      	lsrs	r3, r3, #16
   8937a:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   8937e:	fb07 bb03 	mla	fp, r7, r3, fp
   89382:	b293      	uxth	r3, r2
   89384:	1ae3      	subs	r3, r4, r3
   89386:	b28a      	uxth	r2, r1
   89388:	fa1f f48b 	uxth.w	r4, fp
   8938c:	4413      	add	r3, r2
   8938e:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   89392:	eb04 4423 	add.w	r4, r4, r3, asr #16
   89396:	b29b      	uxth	r3, r3
   89398:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   8939c:	45e0      	cmp	r8, ip
   8939e:	f840 3b04 	str.w	r3, [r0], #4
   893a2:	ea4f 4424 	mov.w	r4, r4, asr #16
   893a6:	ea4f 421b 	mov.w	r2, fp, lsr #16
   893aa:	d2de      	bcs.n	8936a <quorem+0x46>
   893ac:	9b00      	ldr	r3, [sp, #0]
   893ae:	f859 3003 	ldr.w	r3, [r9, r3]
   893b2:	b973      	cbnz	r3, 893d2 <quorem+0xae>
   893b4:	9b01      	ldr	r3, [sp, #4]
   893b6:	3b04      	subs	r3, #4
   893b8:	4599      	cmp	r9, r3
   893ba:	d304      	bcc.n	893c6 <quorem+0xa2>
   893bc:	e007      	b.n	893ce <quorem+0xaa>
   893be:	4599      	cmp	r9, r3
   893c0:	f105 35ff 	add.w	r5, r5, #4294967295
   893c4:	d203      	bcs.n	893ce <quorem+0xaa>
   893c6:	f853 2904 	ldr.w	r2, [r3], #-4
   893ca:	2a00      	cmp	r2, #0
   893cc:	d0f7      	beq.n	893be <quorem+0x9a>
   893ce:	f8ca 5010 	str.w	r5, [sl, #16]
   893d2:	4671      	mov	r1, lr
   893d4:	4650      	mov	r0, sl
   893d6:	f002 faab 	bl	8b930 <__mcmp>
   893da:	2800      	cmp	r0, #0
   893dc:	db2a      	blt.n	89434 <quorem+0x110>
   893de:	4648      	mov	r0, r9
   893e0:	2300      	movs	r3, #0
   893e2:	3701      	adds	r7, #1
   893e4:	f856 1b04 	ldr.w	r1, [r6], #4
   893e8:	6804      	ldr	r4, [r0, #0]
   893ea:	b28a      	uxth	r2, r1
   893ec:	1a9a      	subs	r2, r3, r2
   893ee:	0c0b      	lsrs	r3, r1, #16
   893f0:	b2a1      	uxth	r1, r4
   893f2:	440a      	add	r2, r1
   893f4:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   893f8:	eb03 4322 	add.w	r3, r3, r2, asr #16
   893fc:	b292      	uxth	r2, r2
   893fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   89402:	45b0      	cmp	r8, r6
   89404:	f840 2b04 	str.w	r2, [r0], #4
   89408:	ea4f 4323 	mov.w	r3, r3, asr #16
   8940c:	d2ea      	bcs.n	893e4 <quorem+0xc0>
   8940e:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89412:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   89416:	b96a      	cbnz	r2, 89434 <quorem+0x110>
   89418:	3b04      	subs	r3, #4
   8941a:	4599      	cmp	r9, r3
   8941c:	d304      	bcc.n	89428 <quorem+0x104>
   8941e:	e007      	b.n	89430 <quorem+0x10c>
   89420:	4599      	cmp	r9, r3
   89422:	f105 35ff 	add.w	r5, r5, #4294967295
   89426:	d203      	bcs.n	89430 <quorem+0x10c>
   89428:	f853 2904 	ldr.w	r2, [r3], #-4
   8942c:	2a00      	cmp	r2, #0
   8942e:	d0f7      	beq.n	89420 <quorem+0xfc>
   89430:	f8ca 5010 	str.w	r5, [sl, #16]
   89434:	4638      	mov	r0, r7
   89436:	b003      	add	sp, #12
   89438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8943c:	2000      	movs	r0, #0
   8943e:	b003      	add	sp, #12
   89440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89444:	0000      	movs	r0, r0
   89446:	0000      	movs	r0, r0

00089448 <_dtoa_r>:
   89448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8944c:	4616      	mov	r6, r2
   8944e:	461f      	mov	r7, r3
   89450:	6c01      	ldr	r1, [r0, #64]	; 0x40
   89452:	b09b      	sub	sp, #108	; 0x6c
   89454:	4604      	mov	r4, r0
   89456:	e9cd 6704 	strd	r6, r7, [sp, #16]
   8945a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   8945c:	b141      	cbz	r1, 89470 <_dtoa_r+0x28>
   8945e:	2301      	movs	r3, #1
   89460:	6c42      	ldr	r2, [r0, #68]	; 0x44
   89462:	4093      	lsls	r3, r2
   89464:	e9c1 2301 	strd	r2, r3, [r1, #4]
   89468:	f002 f834 	bl	8b4d4 <_Bfree>
   8946c:	2300      	movs	r3, #0
   8946e:	6423      	str	r3, [r4, #64]	; 0x40
   89470:	f1b7 0900 	subs.w	r9, r7, #0
   89474:	bfb4      	ite	lt
   89476:	2301      	movlt	r3, #1
   89478:	2300      	movge	r3, #0
   8947a:	602b      	str	r3, [r5, #0]
   8947c:	4b76      	ldr	r3, [pc, #472]	; (89658 <_dtoa_r+0x210>)
   8947e:	bfbc      	itt	lt
   89480:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   89484:	f8cd 9014 	strlt.w	r9, [sp, #20]
   89488:	ea33 0309 	bics.w	r3, r3, r9
   8948c:	f000 80ab 	beq.w	895e6 <_dtoa_r+0x19e>
   89490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   89494:	4610      	mov	r0, r2
   89496:	4619      	mov	r1, r3
   89498:	2200      	movs	r2, #0
   8949a:	2300      	movs	r3, #0
   8949c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   894a0:	f003 fd52 	bl	8cf48 <__aeabi_dcmpeq>
   894a4:	4680      	mov	r8, r0
   894a6:	b170      	cbz	r0, 894c6 <_dtoa_r+0x7e>
   894a8:	2301      	movs	r3, #1
   894aa:	9a26      	ldr	r2, [sp, #152]	; 0x98
   894ac:	6013      	str	r3, [r2, #0]
   894ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   894b0:	2b00      	cmp	r3, #0
   894b2:	f000 82c2 	beq.w	89a3a <_dtoa_r+0x5f2>
   894b6:	4869      	ldr	r0, [pc, #420]	; (8965c <_dtoa_r+0x214>)
   894b8:	6018      	str	r0, [r3, #0]
   894ba:	1e43      	subs	r3, r0, #1
   894bc:	9303      	str	r3, [sp, #12]
   894be:	9803      	ldr	r0, [sp, #12]
   894c0:	b01b      	add	sp, #108	; 0x6c
   894c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   894c6:	aa18      	add	r2, sp, #96	; 0x60
   894c8:	ab19      	add	r3, sp, #100	; 0x64
   894ca:	e9cd 3200 	strd	r3, r2, [sp]
   894ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   894d2:	4620      	mov	r0, r4
   894d4:	f002 faf2 	bl	8babc <__d2b>
   894d8:	ea5f 5519 	movs.w	r5, r9, lsr #20
   894dc:	4682      	mov	sl, r0
   894de:	f040 8098 	bne.w	89612 <_dtoa_r+0x1ca>
   894e2:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   894e6:	4445      	add	r5, r8
   894e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
   894ec:	2820      	cmp	r0, #32
   894ee:	f340 8390 	ble.w	89c12 <_dtoa_r+0x7ca>
   894f2:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   894f6:	f205 4012 	addw	r0, r5, #1042	; 0x412
   894fa:	fa09 f903 	lsl.w	r9, r9, r3
   894fe:	fa26 f000 	lsr.w	r0, r6, r0
   89502:	ea49 0000 	orr.w	r0, r9, r0
   89506:	f003 fa3d 	bl	8c984 <__aeabi_ui2d>
   8950a:	2201      	movs	r2, #1
   8950c:	3d01      	subs	r5, #1
   8950e:	920f      	str	r2, [sp, #60]	; 0x3c
   89510:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   89514:	2200      	movs	r2, #0
   89516:	4b52      	ldr	r3, [pc, #328]	; (89660 <_dtoa_r+0x218>)
   89518:	f003 f8f6 	bl	8c708 <__aeabi_dsub>
   8951c:	a348      	add	r3, pc, #288	; (adr r3, 89640 <_dtoa_r+0x1f8>)
   8951e:	e9d3 2300 	ldrd	r2, r3, [r3]
   89522:	f003 faa9 	bl	8ca78 <__aeabi_dmul>
   89526:	a348      	add	r3, pc, #288	; (adr r3, 89648 <_dtoa_r+0x200>)
   89528:	e9d3 2300 	ldrd	r2, r3, [r3]
   8952c:	f003 f8ee 	bl	8c70c <__adddf3>
   89530:	4606      	mov	r6, r0
   89532:	4628      	mov	r0, r5
   89534:	460f      	mov	r7, r1
   89536:	f003 fa35 	bl	8c9a4 <__aeabi_i2d>
   8953a:	a345      	add	r3, pc, #276	; (adr r3, 89650 <_dtoa_r+0x208>)
   8953c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89540:	f003 fa9a 	bl	8ca78 <__aeabi_dmul>
   89544:	4602      	mov	r2, r0
   89546:	460b      	mov	r3, r1
   89548:	4630      	mov	r0, r6
   8954a:	4639      	mov	r1, r7
   8954c:	f003 f8de 	bl	8c70c <__adddf3>
   89550:	4606      	mov	r6, r0
   89552:	460f      	mov	r7, r1
   89554:	f003 fd40 	bl	8cfd8 <__aeabi_d2iz>
   89558:	2200      	movs	r2, #0
   8955a:	4683      	mov	fp, r0
   8955c:	2300      	movs	r3, #0
   8955e:	4630      	mov	r0, r6
   89560:	4639      	mov	r1, r7
   89562:	f003 fcfb 	bl	8cf5c <__aeabi_dcmplt>
   89566:	2800      	cmp	r0, #0
   89568:	f040 825a 	bne.w	89a20 <_dtoa_r+0x5d8>
   8956c:	f1bb 0f16 	cmp.w	fp, #22
   89570:	f200 8248 	bhi.w	89a04 <_dtoa_r+0x5bc>
   89574:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89578:	4b3a      	ldr	r3, [pc, #232]	; (89664 <_dtoa_r+0x21c>)
   8957a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   8957e:	e9d3 2300 	ldrd	r2, r3, [r3]
   89582:	f003 fceb 	bl	8cf5c <__aeabi_dcmplt>
   89586:	2800      	cmp	r0, #0
   89588:	d072      	beq.n	89670 <_dtoa_r+0x228>
   8958a:	2300      	movs	r3, #0
   8958c:	eba8 0505 	sub.w	r5, r8, r5
   89590:	930e      	str	r3, [sp, #56]	; 0x38
   89592:	1e6b      	subs	r3, r5, #1
   89594:	f10b 3bff 	add.w	fp, fp, #4294967295
   89598:	9306      	str	r3, [sp, #24]
   8959a:	f100 823b 	bmi.w	89a14 <_dtoa_r+0x5cc>
   8959e:	2300      	movs	r3, #0
   895a0:	930b      	str	r3, [sp, #44]	; 0x2c
   895a2:	f1bb 0f00 	cmp.w	fp, #0
   895a6:	da6b      	bge.n	89680 <_dtoa_r+0x238>
   895a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   895aa:	f8cd b01c 	str.w	fp, [sp, #28]
   895ae:	eba3 030b 	sub.w	r3, r3, fp
   895b2:	930b      	str	r3, [sp, #44]	; 0x2c
   895b4:	f1cb 0300 	rsb	r3, fp, #0
   895b8:	930d      	str	r3, [sp, #52]	; 0x34
   895ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   895bc:	f04f 0b00 	mov.w	fp, #0
   895c0:	2b09      	cmp	r3, #9
   895c2:	d866      	bhi.n	89692 <_dtoa_r+0x24a>
   895c4:	2b05      	cmp	r3, #5
   895c6:	f340 8322 	ble.w	89c0e <_dtoa_r+0x7c6>
   895ca:	2500      	movs	r5, #0
   895cc:	3b04      	subs	r3, #4
   895ce:	9324      	str	r3, [sp, #144]	; 0x90
   895d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   895d2:	3b02      	subs	r3, #2
   895d4:	2b03      	cmp	r3, #3
   895d6:	f200 866e 	bhi.w	8a2b6 <_dtoa_r+0xe6e>
   895da:	e8df f013 	tbh	[pc, r3, lsl #1]
   895de:	043b      	.short	0x043b
   895e0:	042f0438 	.word	0x042f0438
   895e4:	0412      	.short	0x0412
   895e6:	f242 730f 	movw	r3, #9999	; 0x270f
   895ea:	9a26      	ldr	r2, [sp, #152]	; 0x98
   895ec:	f3c9 0913 	ubfx	r9, r9, #0, #20
   895f0:	6013      	str	r3, [r2, #0]
   895f2:	ea59 0306 	orrs.w	r3, r9, r6
   895f6:	d11c      	bne.n	89632 <_dtoa_r+0x1ea>
   895f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   895fa:	2b00      	cmp	r3, #0
   895fc:	f000 8657 	beq.w	8a2ae <_dtoa_r+0xe66>
   89600:	4b19      	ldr	r3, [pc, #100]	; (89668 <_dtoa_r+0x220>)
   89602:	9303      	str	r3, [sp, #12]
   89604:	3308      	adds	r3, #8
   89606:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   89608:	9803      	ldr	r0, [sp, #12]
   8960a:	6013      	str	r3, [r2, #0]
   8960c:	b01b      	add	sp, #108	; 0x6c
   8960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89612:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   89616:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8961a:	4608      	mov	r0, r1
   8961c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   89620:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   89624:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   89628:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   8962c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   89630:	e770      	b.n	89514 <_dtoa_r+0xcc>
   89632:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89634:	2b00      	cmp	r3, #0
   89636:	f040 83c8 	bne.w	89dca <_dtoa_r+0x982>
   8963a:	4b0c      	ldr	r3, [pc, #48]	; (8966c <_dtoa_r+0x224>)
   8963c:	9303      	str	r3, [sp, #12]
   8963e:	e73e      	b.n	894be <_dtoa_r+0x76>
   89640:	636f4361 	.word	0x636f4361
   89644:	3fd287a7 	.word	0x3fd287a7
   89648:	8b60c8b3 	.word	0x8b60c8b3
   8964c:	3fc68a28 	.word	0x3fc68a28
   89650:	509f79fb 	.word	0x509f79fb
   89654:	3fd34413 	.word	0x3fd34413
   89658:	7ff00000 	.word	0x7ff00000
   8965c:	0008d425 	.word	0x0008d425
   89660:	3ff80000 	.word	0x3ff80000
   89664:	0008d5c0 	.word	0x0008d5c0
   89668:	0008d46c 	.word	0x0008d46c
   8966c:	0008d468 	.word	0x0008d468
   89670:	eba8 0505 	sub.w	r5, r8, r5
   89674:	1e6b      	subs	r3, r5, #1
   89676:	9306      	str	r3, [sp, #24]
   89678:	f100 84a9 	bmi.w	89fce <_dtoa_r+0xb86>
   8967c:	900e      	str	r0, [sp, #56]	; 0x38
   8967e:	900b      	str	r0, [sp, #44]	; 0x2c
   89680:	9b06      	ldr	r3, [sp, #24]
   89682:	445b      	add	r3, fp
   89684:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   89688:	2300      	movs	r3, #0
   8968a:	930d      	str	r3, [sp, #52]	; 0x34
   8968c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8968e:	2b09      	cmp	r3, #9
   89690:	d998      	bls.n	895c4 <_dtoa_r+0x17c>
   89692:	2300      	movs	r3, #0
   89694:	2501      	movs	r5, #1
   89696:	9324      	str	r3, [sp, #144]	; 0x90
   89698:	9325      	str	r3, [sp, #148]	; 0x94
   8969a:	f04f 33ff 	mov.w	r3, #4294967295
   8969e:	950c      	str	r5, [sp, #48]	; 0x30
   896a0:	930a      	str	r3, [sp, #40]	; 0x28
   896a2:	2100      	movs	r1, #0
   896a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   896a6:	6461      	str	r1, [r4, #68]	; 0x44
   896a8:	9312      	str	r3, [sp, #72]	; 0x48
   896aa:	4620      	mov	r0, r4
   896ac:	f001 feec 	bl	8b488 <_Balloc>
   896b0:	9003      	str	r0, [sp, #12]
   896b2:	2800      	cmp	r0, #0
   896b4:	f000 8607 	beq.w	8a2c6 <_dtoa_r+0xe7e>
   896b8:	9b03      	ldr	r3, [sp, #12]
   896ba:	6423      	str	r3, [r4, #64]	; 0x40
   896bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   896be:	2b0e      	cmp	r3, #14
   896c0:	f200 80e9 	bhi.w	89896 <_dtoa_r+0x44e>
   896c4:	2d00      	cmp	r5, #0
   896c6:	f000 80e6 	beq.w	89896 <_dtoa_r+0x44e>
   896ca:	9907      	ldr	r1, [sp, #28]
   896cc:	2900      	cmp	r1, #0
   896ce:	f340 8452 	ble.w	89f76 <_dtoa_r+0xb2e>
   896d2:	4bb5      	ldr	r3, [pc, #724]	; (899a8 <_dtoa_r+0x560>)
   896d4:	f001 020f 	and.w	r2, r1, #15
   896d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   896dc:	05c8      	lsls	r0, r1, #23
   896de:	ea4f 1521 	mov.w	r5, r1, asr #4
   896e2:	e9d3 6700 	ldrd	r6, r7, [r3]
   896e6:	f140 83ee 	bpl.w	89ec6 <_dtoa_r+0xa7e>
   896ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   896ee:	4baf      	ldr	r3, [pc, #700]	; (899ac <_dtoa_r+0x564>)
   896f0:	f04f 0903 	mov.w	r9, #3
   896f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   896f8:	f003 fae8 	bl	8cccc <__aeabi_ddiv>
   896fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89700:	f005 050f 	and.w	r5, r5, #15
   89704:	b18d      	cbz	r5, 8972a <_dtoa_r+0x2e2>
   89706:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 899ac <_dtoa_r+0x564>
   8970a:	07e9      	lsls	r1, r5, #31
   8970c:	d509      	bpl.n	89722 <_dtoa_r+0x2da>
   8970e:	e9d8 2300 	ldrd	r2, r3, [r8]
   89712:	4630      	mov	r0, r6
   89714:	4639      	mov	r1, r7
   89716:	f003 f9af 	bl	8ca78 <__aeabi_dmul>
   8971a:	4606      	mov	r6, r0
   8971c:	460f      	mov	r7, r1
   8971e:	f109 0901 	add.w	r9, r9, #1
   89722:	106d      	asrs	r5, r5, #1
   89724:	f108 0808 	add.w	r8, r8, #8
   89728:	d1ef      	bne.n	8970a <_dtoa_r+0x2c2>
   8972a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8972e:	4632      	mov	r2, r6
   89730:	463b      	mov	r3, r7
   89732:	f003 facb 	bl	8cccc <__aeabi_ddiv>
   89736:	4606      	mov	r6, r0
   89738:	460f      	mov	r7, r1
   8973a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8973c:	b143      	cbz	r3, 89750 <_dtoa_r+0x308>
   8973e:	2200      	movs	r2, #0
   89740:	4630      	mov	r0, r6
   89742:	4639      	mov	r1, r7
   89744:	4b9a      	ldr	r3, [pc, #616]	; (899b0 <_dtoa_r+0x568>)
   89746:	f003 fc09 	bl	8cf5c <__aeabi_dcmplt>
   8974a:	2800      	cmp	r0, #0
   8974c:	f040 853b 	bne.w	8a1c6 <_dtoa_r+0xd7e>
   89750:	4648      	mov	r0, r9
   89752:	f003 f927 	bl	8c9a4 <__aeabi_i2d>
   89756:	4632      	mov	r2, r6
   89758:	463b      	mov	r3, r7
   8975a:	f003 f98d 	bl	8ca78 <__aeabi_dmul>
   8975e:	4b95      	ldr	r3, [pc, #596]	; (899b4 <_dtoa_r+0x56c>)
   89760:	2200      	movs	r2, #0
   89762:	f002 ffd3 	bl	8c70c <__adddf3>
   89766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89768:	4680      	mov	r8, r0
   8976a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8976e:	2b00      	cmp	r3, #0
   89770:	f000 83ce 	beq.w	89f10 <_dtoa_r+0xac8>
   89774:	9b07      	ldr	r3, [sp, #28]
   89776:	9313      	str	r3, [sp, #76]	; 0x4c
   89778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8977a:	9310      	str	r3, [sp, #64]	; 0x40
   8977c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8977e:	2b00      	cmp	r3, #0
   89780:	f000 84b7 	beq.w	8a0f2 <_dtoa_r+0xcaa>
   89784:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89786:	4b88      	ldr	r3, [pc, #544]	; (899a8 <_dtoa_r+0x560>)
   89788:	2000      	movs	r0, #0
   8978a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8978e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   89792:	4989      	ldr	r1, [pc, #548]	; (899b8 <_dtoa_r+0x570>)
   89794:	f003 fa9a 	bl	8cccc <__aeabi_ddiv>
   89798:	4642      	mov	r2, r8
   8979a:	464b      	mov	r3, r9
   8979c:	f002 ffb4 	bl	8c708 <__aeabi_dsub>
   897a0:	4602      	mov	r2, r0
   897a2:	460b      	mov	r3, r1
   897a4:	4630      	mov	r0, r6
   897a6:	4639      	mov	r1, r7
   897a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   897ac:	f003 fc14 	bl	8cfd8 <__aeabi_d2iz>
   897b0:	4680      	mov	r8, r0
   897b2:	f003 f8f7 	bl	8c9a4 <__aeabi_i2d>
   897b6:	4602      	mov	r2, r0
   897b8:	460b      	mov	r3, r1
   897ba:	4630      	mov	r0, r6
   897bc:	4639      	mov	r1, r7
   897be:	f002 ffa3 	bl	8c708 <__aeabi_dsub>
   897c2:	9d03      	ldr	r5, [sp, #12]
   897c4:	f108 0330 	add.w	r3, r8, #48	; 0x30
   897c8:	4606      	mov	r6, r0
   897ca:	460f      	mov	r7, r1
   897cc:	4602      	mov	r2, r0
   897ce:	f805 3b01 	strb.w	r3, [r5], #1
   897d2:	460b      	mov	r3, r1
   897d4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   897d8:	f003 fbde 	bl	8cf98 <__aeabi_dcmpgt>
   897dc:	2800      	cmp	r0, #0
   897de:	f040 853b 	bne.w	8a258 <_dtoa_r+0xe10>
   897e2:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   897e6:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   897ea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   897ee:	f04f 0900 	mov.w	r9, #0
   897f2:	9410      	str	r4, [sp, #64]	; 0x40
   897f4:	e02a      	b.n	8984c <_dtoa_r+0x404>
   897f6:	f109 0901 	add.w	r9, r9, #1
   897fa:	45c1      	cmp	r9, r8
   897fc:	da48      	bge.n	89890 <_dtoa_r+0x448>
   897fe:	4650      	mov	r0, sl
   89800:	4659      	mov	r1, fp
   89802:	2200      	movs	r2, #0
   89804:	4b6d      	ldr	r3, [pc, #436]	; (899bc <_dtoa_r+0x574>)
   89806:	f003 f937 	bl	8ca78 <__aeabi_dmul>
   8980a:	2200      	movs	r2, #0
   8980c:	4b6b      	ldr	r3, [pc, #428]	; (899bc <_dtoa_r+0x574>)
   8980e:	4682      	mov	sl, r0
   89810:	468b      	mov	fp, r1
   89812:	4630      	mov	r0, r6
   89814:	4639      	mov	r1, r7
   89816:	f003 f92f 	bl	8ca78 <__aeabi_dmul>
   8981a:	460f      	mov	r7, r1
   8981c:	4606      	mov	r6, r0
   8981e:	f003 fbdb 	bl	8cfd8 <__aeabi_d2iz>
   89822:	4604      	mov	r4, r0
   89824:	f003 f8be 	bl	8c9a4 <__aeabi_i2d>
   89828:	4602      	mov	r2, r0
   8982a:	460b      	mov	r3, r1
   8982c:	4630      	mov	r0, r6
   8982e:	4639      	mov	r1, r7
   89830:	f002 ff6a 	bl	8c708 <__aeabi_dsub>
   89834:	3430      	adds	r4, #48	; 0x30
   89836:	4652      	mov	r2, sl
   89838:	465b      	mov	r3, fp
   8983a:	f805 4b01 	strb.w	r4, [r5], #1
   8983e:	4606      	mov	r6, r0
   89840:	460f      	mov	r7, r1
   89842:	f003 fb8b 	bl	8cf5c <__aeabi_dcmplt>
   89846:	2800      	cmp	r0, #0
   89848:	f040 8503 	bne.w	8a252 <_dtoa_r+0xe0a>
   8984c:	4632      	mov	r2, r6
   8984e:	463b      	mov	r3, r7
   89850:	2000      	movs	r0, #0
   89852:	4957      	ldr	r1, [pc, #348]	; (899b0 <_dtoa_r+0x568>)
   89854:	f002 ff58 	bl	8c708 <__aeabi_dsub>
   89858:	4652      	mov	r2, sl
   8985a:	465b      	mov	r3, fp
   8985c:	f003 fb7e 	bl	8cf5c <__aeabi_dcmplt>
   89860:	2800      	cmp	r0, #0
   89862:	d0c8      	beq.n	897f6 <_dtoa_r+0x3ae>
   89864:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89866:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8986a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8986c:	9a03      	ldr	r2, [sp, #12]
   8986e:	9307      	str	r3, [sp, #28]
   89870:	e002      	b.n	89878 <_dtoa_r+0x430>
   89872:	4295      	cmp	r5, r2
   89874:	f000 84d2 	beq.w	8a21c <_dtoa_r+0xdd4>
   89878:	46a9      	mov	r9, r5
   8987a:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   8987e:	2b39      	cmp	r3, #57	; 0x39
   89880:	d0f7      	beq.n	89872 <_dtoa_r+0x42a>
   89882:	3301      	adds	r3, #1
   89884:	b2db      	uxtb	r3, r3
   89886:	702b      	strb	r3, [r5, #0]
   89888:	9b07      	ldr	r3, [sp, #28]
   8988a:	3301      	adds	r3, #1
   8988c:	9307      	str	r3, [sp, #28]
   8988e:	e1a0      	b.n	89bd2 <_dtoa_r+0x78a>
   89890:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89892:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   89896:	9b19      	ldr	r3, [sp, #100]	; 0x64
   89898:	2b00      	cmp	r3, #0
   8989a:	f2c0 8093 	blt.w	899c4 <_dtoa_r+0x57c>
   8989e:	9a07      	ldr	r2, [sp, #28]
   898a0:	2a0e      	cmp	r2, #14
   898a2:	f300 808f 	bgt.w	899c4 <_dtoa_r+0x57c>
   898a6:	4b40      	ldr	r3, [pc, #256]	; (899a8 <_dtoa_r+0x560>)
   898a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   898ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   898b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   898b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   898b6:	2b00      	cmp	r3, #0
   898b8:	da1a      	bge.n	898f0 <_dtoa_r+0x4a8>
   898ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   898bc:	2b00      	cmp	r3, #0
   898be:	dc17      	bgt.n	898f0 <_dtoa_r+0x4a8>
   898c0:	f040 833f 	bne.w	89f42 <_dtoa_r+0xafa>
   898c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   898c8:	2200      	movs	r2, #0
   898ca:	4b3d      	ldr	r3, [pc, #244]	; (899c0 <_dtoa_r+0x578>)
   898cc:	f003 f8d4 	bl	8ca78 <__aeabi_dmul>
   898d0:	4602      	mov	r2, r0
   898d2:	460b      	mov	r3, r1
   898d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   898d8:	f003 fb4a 	bl	8cf70 <__aeabi_dcmple>
   898dc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   898e0:	4645      	mov	r5, r8
   898e2:	2800      	cmp	r0, #0
   898e4:	f000 82cd 	beq.w	89e82 <_dtoa_r+0xa3a>
   898e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   898ea:	9f03      	ldr	r7, [sp, #12]
   898ec:	43de      	mvns	r6, r3
   898ee:	e2d0      	b.n	89e92 <_dtoa_r+0xa4a>
   898f0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   898f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   898f8:	4632      	mov	r2, r6
   898fa:	463b      	mov	r3, r7
   898fc:	f003 f9e6 	bl	8cccc <__aeabi_ddiv>
   89900:	f003 fb6a 	bl	8cfd8 <__aeabi_d2iz>
   89904:	4680      	mov	r8, r0
   89906:	f003 f84d 	bl	8c9a4 <__aeabi_i2d>
   8990a:	4632      	mov	r2, r6
   8990c:	463b      	mov	r3, r7
   8990e:	f003 f8b3 	bl	8ca78 <__aeabi_dmul>
   89912:	460b      	mov	r3, r1
   89914:	4602      	mov	r2, r0
   89916:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8991a:	f002 fef5 	bl	8c708 <__aeabi_dsub>
   8991e:	9d03      	ldr	r5, [sp, #12]
   89920:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89924:	f805 3b01 	strb.w	r3, [r5], #1
   89928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8992a:	2b01      	cmp	r3, #1
   8992c:	f000 837f 	beq.w	8a02e <_dtoa_r+0xbe6>
   89930:	f8cd a018 	str.w	sl, [sp, #24]
   89934:	f04f 0901 	mov.w	r9, #1
   89938:	469b      	mov	fp, r3
   8993a:	46aa      	mov	sl, r5
   8993c:	9408      	str	r4, [sp, #32]
   8993e:	e01d      	b.n	8997c <_dtoa_r+0x534>
   89940:	4632      	mov	r2, r6
   89942:	463b      	mov	r3, r7
   89944:	4620      	mov	r0, r4
   89946:	4629      	mov	r1, r5
   89948:	f003 f9c0 	bl	8cccc <__aeabi_ddiv>
   8994c:	f003 fb44 	bl	8cfd8 <__aeabi_d2iz>
   89950:	4680      	mov	r8, r0
   89952:	f003 f827 	bl	8c9a4 <__aeabi_i2d>
   89956:	4632      	mov	r2, r6
   89958:	463b      	mov	r3, r7
   8995a:	f003 f88d 	bl	8ca78 <__aeabi_dmul>
   8995e:	f109 0901 	add.w	r9, r9, #1
   89962:	460b      	mov	r3, r1
   89964:	4602      	mov	r2, r0
   89966:	4629      	mov	r1, r5
   89968:	4620      	mov	r0, r4
   8996a:	f002 fecd 	bl	8c708 <__aeabi_dsub>
   8996e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89972:	45cb      	cmp	fp, r9
   89974:	f80a 3b01 	strb.w	r3, [sl], #1
   89978:	f000 8355 	beq.w	8a026 <_dtoa_r+0xbde>
   8997c:	2200      	movs	r2, #0
   8997e:	4b0f      	ldr	r3, [pc, #60]	; (899bc <_dtoa_r+0x574>)
   89980:	f003 f87a 	bl	8ca78 <__aeabi_dmul>
   89984:	2200      	movs	r2, #0
   89986:	2300      	movs	r3, #0
   89988:	4604      	mov	r4, r0
   8998a:	460d      	mov	r5, r1
   8998c:	f003 fadc 	bl	8cf48 <__aeabi_dcmpeq>
   89990:	2800      	cmp	r0, #0
   89992:	d0d5      	beq.n	89940 <_dtoa_r+0x4f8>
   89994:	4655      	mov	r5, sl
   89996:	9c08      	ldr	r4, [sp, #32]
   89998:	f8dd a018 	ldr.w	sl, [sp, #24]
   8999c:	9b07      	ldr	r3, [sp, #28]
   8999e:	46a9      	mov	r9, r5
   899a0:	3301      	adds	r3, #1
   899a2:	9307      	str	r3, [sp, #28]
   899a4:	e115      	b.n	89bd2 <_dtoa_r+0x78a>
   899a6:	bf00      	nop
   899a8:	0008d5c0 	.word	0x0008d5c0
   899ac:	0008d598 	.word	0x0008d598
   899b0:	3ff00000 	.word	0x3ff00000
   899b4:	401c0000 	.word	0x401c0000
   899b8:	3fe00000 	.word	0x3fe00000
   899bc:	40240000 	.word	0x40240000
   899c0:	40140000 	.word	0x40140000
   899c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   899c6:	2a00      	cmp	r2, #0
   899c8:	d03d      	beq.n	89a46 <_dtoa_r+0x5fe>
   899ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
   899cc:	2a01      	cmp	r2, #1
   899ce:	f340 82bc 	ble.w	89f4a <_dtoa_r+0xb02>
   899d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   899d4:	1e5f      	subs	r7, r3, #1
   899d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   899d8:	42bb      	cmp	r3, r7
   899da:	f2c0 826e 	blt.w	89eba <_dtoa_r+0xa72>
   899de:	1bdf      	subs	r7, r3, r7
   899e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   899e2:	2b00      	cmp	r3, #0
   899e4:	f2c0 8354 	blt.w	8a090 <_dtoa_r+0xc48>
   899e8:	9a06      	ldr	r2, [sp, #24]
   899ea:	4611      	mov	r1, r2
   899ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   899ee:	4419      	add	r1, r3
   899f0:	4616      	mov	r6, r2
   899f2:	441a      	add	r2, r3
   899f4:	9106      	str	r1, [sp, #24]
   899f6:	920b      	str	r2, [sp, #44]	; 0x2c
   899f8:	2101      	movs	r1, #1
   899fa:	4620      	mov	r0, r4
   899fc:	f001 fe12 	bl	8b624 <__i2b>
   89a00:	4605      	mov	r5, r0
   89a02:	e023      	b.n	89a4c <_dtoa_r+0x604>
   89a04:	2301      	movs	r3, #1
   89a06:	eba8 0505 	sub.w	r5, r8, r5
   89a0a:	930e      	str	r3, [sp, #56]	; 0x38
   89a0c:	1e6b      	subs	r3, r5, #1
   89a0e:	9306      	str	r3, [sp, #24]
   89a10:	f57f adc5 	bpl.w	8959e <_dtoa_r+0x156>
   89a14:	f1c5 0301 	rsb	r3, r5, #1
   89a18:	930b      	str	r3, [sp, #44]	; 0x2c
   89a1a:	2300      	movs	r3, #0
   89a1c:	9306      	str	r3, [sp, #24]
   89a1e:	e5c0      	b.n	895a2 <_dtoa_r+0x15a>
   89a20:	4658      	mov	r0, fp
   89a22:	f002 ffbf 	bl	8c9a4 <__aeabi_i2d>
   89a26:	4632      	mov	r2, r6
   89a28:	463b      	mov	r3, r7
   89a2a:	f003 fa8d 	bl	8cf48 <__aeabi_dcmpeq>
   89a2e:	2800      	cmp	r0, #0
   89a30:	f47f ad9c 	bne.w	8956c <_dtoa_r+0x124>
   89a34:	f10b 3bff 	add.w	fp, fp, #4294967295
   89a38:	e598      	b.n	8956c <_dtoa_r+0x124>
   89a3a:	4bc7      	ldr	r3, [pc, #796]	; (89d58 <_dtoa_r+0x910>)
   89a3c:	9303      	str	r3, [sp, #12]
   89a3e:	9803      	ldr	r0, [sp, #12]
   89a40:	b01b      	add	sp, #108	; 0x6c
   89a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89a46:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89a48:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   89a4c:	2e00      	cmp	r6, #0
   89a4e:	dd0c      	ble.n	89a6a <_dtoa_r+0x622>
   89a50:	9a06      	ldr	r2, [sp, #24]
   89a52:	2a00      	cmp	r2, #0
   89a54:	dd09      	ble.n	89a6a <_dtoa_r+0x622>
   89a56:	42b2      	cmp	r2, r6
   89a58:	4613      	mov	r3, r2
   89a5a:	bfa8      	it	ge
   89a5c:	4633      	movge	r3, r6
   89a5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89a60:	1af6      	subs	r6, r6, r3
   89a62:	1ac9      	subs	r1, r1, r3
   89a64:	1ad3      	subs	r3, r2, r3
   89a66:	910b      	str	r1, [sp, #44]	; 0x2c
   89a68:	9306      	str	r3, [sp, #24]
   89a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89a6c:	b1d3      	cbz	r3, 89aa4 <_dtoa_r+0x65c>
   89a6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89a70:	2b00      	cmp	r3, #0
   89a72:	f000 81a3 	beq.w	89dbc <_dtoa_r+0x974>
   89a76:	2f00      	cmp	r7, #0
   89a78:	dd10      	ble.n	89a9c <_dtoa_r+0x654>
   89a7a:	4629      	mov	r1, r5
   89a7c:	463a      	mov	r2, r7
   89a7e:	4620      	mov	r0, r4
   89a80:	f001 fe96 	bl	8b7b0 <__pow5mult>
   89a84:	4652      	mov	r2, sl
   89a86:	4601      	mov	r1, r0
   89a88:	4605      	mov	r5, r0
   89a8a:	4620      	mov	r0, r4
   89a8c:	f001 fde0 	bl	8b650 <__multiply>
   89a90:	4603      	mov	r3, r0
   89a92:	4651      	mov	r1, sl
   89a94:	4620      	mov	r0, r4
   89a96:	469a      	mov	sl, r3
   89a98:	f001 fd1c 	bl	8b4d4 <_Bfree>
   89a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89a9e:	1bda      	subs	r2, r3, r7
   89aa0:	f040 818d 	bne.w	89dbe <_dtoa_r+0x976>
   89aa4:	2101      	movs	r1, #1
   89aa6:	4620      	mov	r0, r4
   89aa8:	f001 fdbc 	bl	8b624 <__i2b>
   89aac:	f1bb 0f00 	cmp.w	fp, #0
   89ab0:	4680      	mov	r8, r0
   89ab2:	f300 80b3 	bgt.w	89c1c <_dtoa_r+0x7d4>
   89ab6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89ab8:	2b01      	cmp	r3, #1
   89aba:	f340 818a 	ble.w	89dd2 <_dtoa_r+0x98a>
   89abe:	f04f 0900 	mov.w	r9, #0
   89ac2:	2001      	movs	r0, #1
   89ac4:	f1bb 0f00 	cmp.w	fp, #0
   89ac8:	f040 80b4 	bne.w	89c34 <_dtoa_r+0x7ec>
   89acc:	9a06      	ldr	r2, [sp, #24]
   89ace:	4410      	add	r0, r2
   89ad0:	f010 001f 	ands.w	r0, r0, #31
   89ad4:	f000 8092 	beq.w	89bfc <_dtoa_r+0x7b4>
   89ad8:	f1c0 0320 	rsb	r3, r0, #32
   89adc:	2b04      	cmp	r3, #4
   89ade:	f340 83f9 	ble.w	8a2d4 <_dtoa_r+0xe8c>
   89ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89ae4:	f1c0 001c 	rsb	r0, r0, #28
   89ae8:	4403      	add	r3, r0
   89aea:	4402      	add	r2, r0
   89aec:	930b      	str	r3, [sp, #44]	; 0x2c
   89aee:	4406      	add	r6, r0
   89af0:	9206      	str	r2, [sp, #24]
   89af2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89af4:	2b00      	cmp	r3, #0
   89af6:	dd05      	ble.n	89b04 <_dtoa_r+0x6bc>
   89af8:	4651      	mov	r1, sl
   89afa:	461a      	mov	r2, r3
   89afc:	4620      	mov	r0, r4
   89afe:	f001 fea3 	bl	8b848 <__lshift>
   89b02:	4682      	mov	sl, r0
   89b04:	9b06      	ldr	r3, [sp, #24]
   89b06:	2b00      	cmp	r3, #0
   89b08:	dd05      	ble.n	89b16 <_dtoa_r+0x6ce>
   89b0a:	4641      	mov	r1, r8
   89b0c:	461a      	mov	r2, r3
   89b0e:	4620      	mov	r0, r4
   89b10:	f001 fe9a 	bl	8b848 <__lshift>
   89b14:	4680      	mov	r8, r0
   89b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89b18:	2b00      	cmp	r3, #0
   89b1a:	f040 8135 	bne.w	89d88 <_dtoa_r+0x940>
   89b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89b20:	2b00      	cmp	r3, #0
   89b22:	f340 811b 	ble.w	89d5c <_dtoa_r+0x914>
   89b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89b28:	2b00      	cmp	r3, #0
   89b2a:	f040 809a 	bne.w	89c62 <_dtoa_r+0x81a>
   89b2e:	9b07      	ldr	r3, [sp, #28]
   89b30:	3301      	adds	r3, #1
   89b32:	9307      	str	r3, [sp, #28]
   89b34:	2601      	movs	r6, #1
   89b36:	9f03      	ldr	r7, [sp, #12]
   89b38:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   89b3c:	e007      	b.n	89b4e <_dtoa_r+0x706>
   89b3e:	4651      	mov	r1, sl
   89b40:	2300      	movs	r3, #0
   89b42:	220a      	movs	r2, #10
   89b44:	4620      	mov	r0, r4
   89b46:	f001 fccf 	bl	8b4e8 <__multadd>
   89b4a:	4682      	mov	sl, r0
   89b4c:	3601      	adds	r6, #1
   89b4e:	4641      	mov	r1, r8
   89b50:	4650      	mov	r0, sl
   89b52:	f7ff fbe7 	bl	89324 <quorem>
   89b56:	454e      	cmp	r6, r9
   89b58:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89b5c:	f807 3b01 	strb.w	r3, [r7], #1
   89b60:	dbed      	blt.n	89b3e <_dtoa_r+0x6f6>
   89b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89b64:	2600      	movs	r6, #0
   89b66:	2a00      	cmp	r2, #0
   89b68:	bfcc      	ite	gt
   89b6a:	4693      	movgt	fp, r2
   89b6c:	f04f 0b01 	movle.w	fp, #1
   89b70:	9a03      	ldr	r2, [sp, #12]
   89b72:	4493      	add	fp, r2
   89b74:	4651      	mov	r1, sl
   89b76:	2201      	movs	r2, #1
   89b78:	4620      	mov	r0, r4
   89b7a:	9304      	str	r3, [sp, #16]
   89b7c:	f001 fe64 	bl	8b848 <__lshift>
   89b80:	4641      	mov	r1, r8
   89b82:	4682      	mov	sl, r0
   89b84:	f001 fed4 	bl	8b930 <__mcmp>
   89b88:	2800      	cmp	r0, #0
   89b8a:	f340 81a8 	ble.w	89ede <_dtoa_r+0xa96>
   89b8e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   89b92:	9a03      	ldr	r2, [sp, #12]
   89b94:	f10b 3bff 	add.w	fp, fp, #4294967295
   89b98:	e004      	b.n	89ba4 <_dtoa_r+0x75c>
   89b9a:	455a      	cmp	r2, fp
   89b9c:	f000 81e4 	beq.w	89f68 <_dtoa_r+0xb20>
   89ba0:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89ba4:	2b39      	cmp	r3, #57	; 0x39
   89ba6:	f10b 0901 	add.w	r9, fp, #1
   89baa:	d0f6      	beq.n	89b9a <_dtoa_r+0x752>
   89bac:	3301      	adds	r3, #1
   89bae:	f88b 3000 	strb.w	r3, [fp]
   89bb2:	4641      	mov	r1, r8
   89bb4:	4620      	mov	r0, r4
   89bb6:	f001 fc8d 	bl	8b4d4 <_Bfree>
   89bba:	b155      	cbz	r5, 89bd2 <_dtoa_r+0x78a>
   89bbc:	b12e      	cbz	r6, 89bca <_dtoa_r+0x782>
   89bbe:	42ae      	cmp	r6, r5
   89bc0:	d003      	beq.n	89bca <_dtoa_r+0x782>
   89bc2:	4631      	mov	r1, r6
   89bc4:	4620      	mov	r0, r4
   89bc6:	f001 fc85 	bl	8b4d4 <_Bfree>
   89bca:	4629      	mov	r1, r5
   89bcc:	4620      	mov	r0, r4
   89bce:	f001 fc81 	bl	8b4d4 <_Bfree>
   89bd2:	4651      	mov	r1, sl
   89bd4:	4620      	mov	r0, r4
   89bd6:	f001 fc7d 	bl	8b4d4 <_Bfree>
   89bda:	2300      	movs	r3, #0
   89bdc:	f889 3000 	strb.w	r3, [r9]
   89be0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89be2:	461a      	mov	r2, r3
   89be4:	9b07      	ldr	r3, [sp, #28]
   89be6:	6013      	str	r3, [r2, #0]
   89be8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89bea:	2b00      	cmp	r3, #0
   89bec:	f43f ac67 	beq.w	894be <_dtoa_r+0x76>
   89bf0:	9803      	ldr	r0, [sp, #12]
   89bf2:	f8c3 9000 	str.w	r9, [r3]
   89bf6:	b01b      	add	sp, #108	; 0x6c
   89bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89bfc:	201c      	movs	r0, #28
   89bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89c00:	4406      	add	r6, r0
   89c02:	4403      	add	r3, r0
   89c04:	930b      	str	r3, [sp, #44]	; 0x2c
   89c06:	9b06      	ldr	r3, [sp, #24]
   89c08:	4403      	add	r3, r0
   89c0a:	9306      	str	r3, [sp, #24]
   89c0c:	e771      	b.n	89af2 <_dtoa_r+0x6aa>
   89c0e:	2501      	movs	r5, #1
   89c10:	e4de      	b.n	895d0 <_dtoa_r+0x188>
   89c12:	f1c0 0020 	rsb	r0, r0, #32
   89c16:	fa06 f000 	lsl.w	r0, r6, r0
   89c1a:	e474      	b.n	89506 <_dtoa_r+0xbe>
   89c1c:	4601      	mov	r1, r0
   89c1e:	465a      	mov	r2, fp
   89c20:	4620      	mov	r0, r4
   89c22:	f001 fdc5 	bl	8b7b0 <__pow5mult>
   89c26:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89c28:	4680      	mov	r8, r0
   89c2a:	2b01      	cmp	r3, #1
   89c2c:	f340 81d1 	ble.w	89fd2 <_dtoa_r+0xb8a>
   89c30:	f04f 0900 	mov.w	r9, #0
   89c34:	f8d8 3010 	ldr.w	r3, [r8, #16]
   89c38:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   89c3c:	6918      	ldr	r0, [r3, #16]
   89c3e:	f001 fca1 	bl	8b584 <__hi0bits>
   89c42:	f1c0 0020 	rsb	r0, r0, #32
   89c46:	e741      	b.n	89acc <_dtoa_r+0x684>
   89c48:	4629      	mov	r1, r5
   89c4a:	2300      	movs	r3, #0
   89c4c:	220a      	movs	r2, #10
   89c4e:	4620      	mov	r0, r4
   89c50:	f001 fc4a 	bl	8b4e8 <__multadd>
   89c54:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89c56:	4605      	mov	r5, r0
   89c58:	2b00      	cmp	r3, #0
   89c5a:	f340 8315 	ble.w	8a288 <_dtoa_r+0xe40>
   89c5e:	9707      	str	r7, [sp, #28]
   89c60:	930a      	str	r3, [sp, #40]	; 0x28
   89c62:	2e00      	cmp	r6, #0
   89c64:	f300 8122 	bgt.w	89eac <_dtoa_r+0xa64>
   89c68:	f1b9 0f00 	cmp.w	r9, #0
   89c6c:	f040 81f9 	bne.w	8a062 <_dtoa_r+0xc1a>
   89c70:	462f      	mov	r7, r5
   89c72:	9903      	ldr	r1, [sp, #12]
   89c74:	9b04      	ldr	r3, [sp, #16]
   89c76:	460e      	mov	r6, r1
   89c78:	f003 0201 	and.w	r2, r3, #1
   89c7c:	1e4b      	subs	r3, r1, #1
   89c7e:	9924      	ldr	r1, [sp, #144]	; 0x90
   89c80:	920c      	str	r2, [sp, #48]	; 0x30
   89c82:	430a      	orrs	r2, r1
   89c84:	920b      	str	r2, [sp, #44]	; 0x2c
   89c86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89c88:	441a      	add	r2, r3
   89c8a:	920a      	str	r2, [sp, #40]	; 0x28
   89c8c:	4641      	mov	r1, r8
   89c8e:	4650      	mov	r0, sl
   89c90:	f7ff fb48 	bl	89324 <quorem>
   89c94:	4629      	mov	r1, r5
   89c96:	4683      	mov	fp, r0
   89c98:	4650      	mov	r0, sl
   89c9a:	f001 fe49 	bl	8b930 <__mcmp>
   89c9e:	463a      	mov	r2, r7
   89ca0:	4641      	mov	r1, r8
   89ca2:	4681      	mov	r9, r0
   89ca4:	4620      	mov	r0, r4
   89ca6:	f001 fe61 	bl	8b96c <__mdiff>
   89caa:	68c2      	ldr	r2, [r0, #12]
   89cac:	4601      	mov	r1, r0
   89cae:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   89cb2:	2a00      	cmp	r2, #0
   89cb4:	d142      	bne.n	89d3c <_dtoa_r+0x8f4>
   89cb6:	9006      	str	r0, [sp, #24]
   89cb8:	4650      	mov	r0, sl
   89cba:	9308      	str	r3, [sp, #32]
   89cbc:	f001 fe38 	bl	8b930 <__mcmp>
   89cc0:	9906      	ldr	r1, [sp, #24]
   89cc2:	9004      	str	r0, [sp, #16]
   89cc4:	4620      	mov	r0, r4
   89cc6:	f001 fc05 	bl	8b4d4 <_Bfree>
   89cca:	9a04      	ldr	r2, [sp, #16]
   89ccc:	9b08      	ldr	r3, [sp, #32]
   89cce:	b91a      	cbnz	r2, 89cd8 <_dtoa_r+0x890>
   89cd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89cd2:	2900      	cmp	r1, #0
   89cd4:	f000 82cb 	beq.w	8a26e <_dtoa_r+0xe26>
   89cd8:	f1b9 0f00 	cmp.w	r9, #0
   89cdc:	f2c0 8185 	blt.w	89fea <_dtoa_r+0xba2>
   89ce0:	9924      	ldr	r1, [sp, #144]	; 0x90
   89ce2:	ea41 0909 	orr.w	r9, r1, r9
   89ce6:	990c      	ldr	r1, [sp, #48]	; 0x30
   89ce8:	ea51 0109 	orrs.w	r1, r1, r9
   89cec:	f000 817d 	beq.w	89fea <_dtoa_r+0xba2>
   89cf0:	2a00      	cmp	r2, #0
   89cf2:	f300 81d1 	bgt.w	8a098 <_dtoa_r+0xc50>
   89cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89cf8:	f106 0901 	add.w	r9, r6, #1
   89cfc:	4296      	cmp	r6, r2
   89cfe:	46cb      	mov	fp, r9
   89d00:	7033      	strb	r3, [r6, #0]
   89d02:	f000 81e3 	beq.w	8a0cc <_dtoa_r+0xc84>
   89d06:	4651      	mov	r1, sl
   89d08:	2300      	movs	r3, #0
   89d0a:	220a      	movs	r2, #10
   89d0c:	4620      	mov	r0, r4
   89d0e:	f001 fbeb 	bl	8b4e8 <__multadd>
   89d12:	42bd      	cmp	r5, r7
   89d14:	4682      	mov	sl, r0
   89d16:	4629      	mov	r1, r5
   89d18:	f04f 0300 	mov.w	r3, #0
   89d1c:	f04f 020a 	mov.w	r2, #10
   89d20:	4620      	mov	r0, r4
   89d22:	d012      	beq.n	89d4a <_dtoa_r+0x902>
   89d24:	f001 fbe0 	bl	8b4e8 <__multadd>
   89d28:	4639      	mov	r1, r7
   89d2a:	4605      	mov	r5, r0
   89d2c:	2300      	movs	r3, #0
   89d2e:	220a      	movs	r2, #10
   89d30:	4620      	mov	r0, r4
   89d32:	f001 fbd9 	bl	8b4e8 <__multadd>
   89d36:	464e      	mov	r6, r9
   89d38:	4607      	mov	r7, r0
   89d3a:	e7a7      	b.n	89c8c <_dtoa_r+0x844>
   89d3c:	4620      	mov	r0, r4
   89d3e:	9304      	str	r3, [sp, #16]
   89d40:	f001 fbc8 	bl	8b4d4 <_Bfree>
   89d44:	2201      	movs	r2, #1
   89d46:	9b04      	ldr	r3, [sp, #16]
   89d48:	e7c6      	b.n	89cd8 <_dtoa_r+0x890>
   89d4a:	f001 fbcd 	bl	8b4e8 <__multadd>
   89d4e:	464e      	mov	r6, r9
   89d50:	4605      	mov	r5, r0
   89d52:	4607      	mov	r7, r0
   89d54:	e79a      	b.n	89c8c <_dtoa_r+0x844>
   89d56:	bf00      	nop
   89d58:	0008d424 	.word	0x0008d424
   89d5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89d5e:	2b02      	cmp	r3, #2
   89d60:	dc7e      	bgt.n	89e60 <_dtoa_r+0xa18>
   89d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89d64:	2b00      	cmp	r3, #0
   89d66:	f47f af7c 	bne.w	89c62 <_dtoa_r+0x81a>
   89d6a:	4641      	mov	r1, r8
   89d6c:	4650      	mov	r0, sl
   89d6e:	f7ff fad9 	bl	89324 <quorem>
   89d72:	9a07      	ldr	r2, [sp, #28]
   89d74:	f8dd b00c 	ldr.w	fp, [sp, #12]
   89d78:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89d7c:	3201      	adds	r2, #1
   89d7e:	2600      	movs	r6, #0
   89d80:	9207      	str	r2, [sp, #28]
   89d82:	f80b 3b01 	strb.w	r3, [fp], #1
   89d86:	e6f5      	b.n	89b74 <_dtoa_r+0x72c>
   89d88:	4641      	mov	r1, r8
   89d8a:	4650      	mov	r0, sl
   89d8c:	f001 fdd0 	bl	8b930 <__mcmp>
   89d90:	2800      	cmp	r0, #0
   89d92:	f6bf aec4 	bge.w	89b1e <_dtoa_r+0x6d6>
   89d96:	4651      	mov	r1, sl
   89d98:	2300      	movs	r3, #0
   89d9a:	220a      	movs	r2, #10
   89d9c:	4620      	mov	r0, r4
   89d9e:	f001 fba3 	bl	8b4e8 <__multadd>
   89da2:	9b07      	ldr	r3, [sp, #28]
   89da4:	4682      	mov	sl, r0
   89da6:	1e5f      	subs	r7, r3, #1
   89da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89daa:	2b00      	cmp	r3, #0
   89dac:	f47f af4c 	bne.w	89c48 <_dtoa_r+0x800>
   89db0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89db2:	2b00      	cmp	r3, #0
   89db4:	f340 8262 	ble.w	8a27c <_dtoa_r+0xe34>
   89db8:	930a      	str	r3, [sp, #40]	; 0x28
   89dba:	e6bb      	b.n	89b34 <_dtoa_r+0x6ec>
   89dbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89dbe:	4651      	mov	r1, sl
   89dc0:	4620      	mov	r0, r4
   89dc2:	f001 fcf5 	bl	8b7b0 <__pow5mult>
   89dc6:	4682      	mov	sl, r0
   89dc8:	e66c      	b.n	89aa4 <_dtoa_r+0x65c>
   89dca:	4bba      	ldr	r3, [pc, #744]	; (8a0b4 <_dtoa_r+0xc6c>)
   89dcc:	9303      	str	r3, [sp, #12]
   89dce:	3303      	adds	r3, #3
   89dd0:	e419      	b.n	89606 <_dtoa_r+0x1be>
   89dd2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89dd6:	2900      	cmp	r1, #0
   89dd8:	f47f ae71 	bne.w	89abe <_dtoa_r+0x676>
   89ddc:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89de0:	2b00      	cmp	r3, #0
   89de2:	f47f ae6c 	bne.w	89abe <_dtoa_r+0x676>
   89de6:	4bb4      	ldr	r3, [pc, #720]	; (8a0b8 <_dtoa_r+0xc70>)
   89de8:	4013      	ands	r3, r2
   89dea:	2b00      	cmp	r3, #0
   89dec:	f000 822a 	beq.w	8a244 <_dtoa_r+0xdfc>
   89df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89df2:	f04f 0901 	mov.w	r9, #1
   89df6:	3301      	adds	r3, #1
   89df8:	930b      	str	r3, [sp, #44]	; 0x2c
   89dfa:	9b06      	ldr	r3, [sp, #24]
   89dfc:	3301      	adds	r3, #1
   89dfe:	9306      	str	r3, [sp, #24]
   89e00:	e65f      	b.n	89ac2 <_dtoa_r+0x67a>
   89e02:	2301      	movs	r3, #1
   89e04:	930c      	str	r3, [sp, #48]	; 0x30
   89e06:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89e08:	9a07      	ldr	r2, [sp, #28]
   89e0a:	4413      	add	r3, r2
   89e0c:	9312      	str	r3, [sp, #72]	; 0x48
   89e0e:	3301      	adds	r3, #1
   89e10:	2b01      	cmp	r3, #1
   89e12:	461e      	mov	r6, r3
   89e14:	bfb8      	it	lt
   89e16:	2601      	movlt	r6, #1
   89e18:	930a      	str	r3, [sp, #40]	; 0x28
   89e1a:	2100      	movs	r1, #0
   89e1c:	2e17      	cmp	r6, #23
   89e1e:	6461      	str	r1, [r4, #68]	; 0x44
   89e20:	f77f ac43 	ble.w	896aa <_dtoa_r+0x262>
   89e24:	2201      	movs	r2, #1
   89e26:	2304      	movs	r3, #4
   89e28:	005b      	lsls	r3, r3, #1
   89e2a:	f103 0014 	add.w	r0, r3, #20
   89e2e:	42b0      	cmp	r0, r6
   89e30:	4611      	mov	r1, r2
   89e32:	f102 0201 	add.w	r2, r2, #1
   89e36:	d9f7      	bls.n	89e28 <_dtoa_r+0x9e0>
   89e38:	6461      	str	r1, [r4, #68]	; 0x44
   89e3a:	e436      	b.n	896aa <_dtoa_r+0x262>
   89e3c:	2301      	movs	r3, #1
   89e3e:	930c      	str	r3, [sp, #48]	; 0x30
   89e40:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89e42:	2b00      	cmp	r3, #0
   89e44:	dd46      	ble.n	89ed4 <_dtoa_r+0xa8c>
   89e46:	461e      	mov	r6, r3
   89e48:	9312      	str	r3, [sp, #72]	; 0x48
   89e4a:	930a      	str	r3, [sp, #40]	; 0x28
   89e4c:	e7e5      	b.n	89e1a <_dtoa_r+0x9d2>
   89e4e:	2300      	movs	r3, #0
   89e50:	930c      	str	r3, [sp, #48]	; 0x30
   89e52:	e7d8      	b.n	89e06 <_dtoa_r+0x9be>
   89e54:	2300      	movs	r3, #0
   89e56:	930c      	str	r3, [sp, #48]	; 0x30
   89e58:	e7f2      	b.n	89e40 <_dtoa_r+0x9f8>
   89e5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89e5c:	9707      	str	r7, [sp, #28]
   89e5e:	930a      	str	r3, [sp, #40]	; 0x28
   89e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89e62:	2b00      	cmp	r3, #0
   89e64:	f47f ad40 	bne.w	898e8 <_dtoa_r+0x4a0>
   89e68:	4641      	mov	r1, r8
   89e6a:	2205      	movs	r2, #5
   89e6c:	4620      	mov	r0, r4
   89e6e:	f001 fb3b 	bl	8b4e8 <__multadd>
   89e72:	4680      	mov	r8, r0
   89e74:	4650      	mov	r0, sl
   89e76:	4641      	mov	r1, r8
   89e78:	f001 fd5a 	bl	8b930 <__mcmp>
   89e7c:	2800      	cmp	r0, #0
   89e7e:	f77f ad33 	ble.w	898e8 <_dtoa_r+0x4a0>
   89e82:	9f03      	ldr	r7, [sp, #12]
   89e84:	2231      	movs	r2, #49	; 0x31
   89e86:	463b      	mov	r3, r7
   89e88:	9e07      	ldr	r6, [sp, #28]
   89e8a:	f803 2b01 	strb.w	r2, [r3], #1
   89e8e:	3601      	adds	r6, #1
   89e90:	9303      	str	r3, [sp, #12]
   89e92:	4641      	mov	r1, r8
   89e94:	4620      	mov	r0, r4
   89e96:	f001 fb1d 	bl	8b4d4 <_Bfree>
   89e9a:	1c73      	adds	r3, r6, #1
   89e9c:	f8dd 900c 	ldr.w	r9, [sp, #12]
   89ea0:	9307      	str	r3, [sp, #28]
   89ea2:	9703      	str	r7, [sp, #12]
   89ea4:	2d00      	cmp	r5, #0
   89ea6:	f47f ae90 	bne.w	89bca <_dtoa_r+0x782>
   89eaa:	e692      	b.n	89bd2 <_dtoa_r+0x78a>
   89eac:	4629      	mov	r1, r5
   89eae:	4632      	mov	r2, r6
   89eb0:	4620      	mov	r0, r4
   89eb2:	f001 fcc9 	bl	8b848 <__lshift>
   89eb6:	4605      	mov	r5, r0
   89eb8:	e6d6      	b.n	89c68 <_dtoa_r+0x820>
   89eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89ebc:	970d      	str	r7, [sp, #52]	; 0x34
   89ebe:	1afb      	subs	r3, r7, r3
   89ec0:	449b      	add	fp, r3
   89ec2:	2700      	movs	r7, #0
   89ec4:	e58c      	b.n	899e0 <_dtoa_r+0x598>
   89ec6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   89eca:	f04f 0902 	mov.w	r9, #2
   89ece:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   89ed2:	e417      	b.n	89704 <_dtoa_r+0x2bc>
   89ed4:	2301      	movs	r3, #1
   89ed6:	9325      	str	r3, [sp, #148]	; 0x94
   89ed8:	930a      	str	r3, [sp, #40]	; 0x28
   89eda:	f7ff bbe2 	b.w	896a2 <_dtoa_r+0x25a>
   89ede:	d103      	bne.n	89ee8 <_dtoa_r+0xaa0>
   89ee0:	9b04      	ldr	r3, [sp, #16]
   89ee2:	07db      	lsls	r3, r3, #31
   89ee4:	f53f ae53 	bmi.w	89b8e <_dtoa_r+0x746>
   89ee8:	46d9      	mov	r9, fp
   89eea:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89eee:	2b30      	cmp	r3, #48	; 0x30
   89ef0:	d0fa      	beq.n	89ee8 <_dtoa_r+0xaa0>
   89ef2:	e65e      	b.n	89bb2 <_dtoa_r+0x76a>
   89ef4:	4648      	mov	r0, r9
   89ef6:	f002 fd55 	bl	8c9a4 <__aeabi_i2d>
   89efa:	4632      	mov	r2, r6
   89efc:	463b      	mov	r3, r7
   89efe:	f002 fdbb 	bl	8ca78 <__aeabi_dmul>
   89f02:	2200      	movs	r2, #0
   89f04:	4b6d      	ldr	r3, [pc, #436]	; (8a0bc <_dtoa_r+0xc74>)
   89f06:	f002 fc01 	bl	8c70c <__adddf3>
   89f0a:	4680      	mov	r8, r0
   89f0c:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89f10:	4630      	mov	r0, r6
   89f12:	4639      	mov	r1, r7
   89f14:	2200      	movs	r2, #0
   89f16:	4b6a      	ldr	r3, [pc, #424]	; (8a0c0 <_dtoa_r+0xc78>)
   89f18:	f002 fbf6 	bl	8c708 <__aeabi_dsub>
   89f1c:	4642      	mov	r2, r8
   89f1e:	464b      	mov	r3, r9
   89f20:	4606      	mov	r6, r0
   89f22:	460f      	mov	r7, r1
   89f24:	f003 f838 	bl	8cf98 <__aeabi_dcmpgt>
   89f28:	2800      	cmp	r0, #0
   89f2a:	f040 8187 	bne.w	8a23c <_dtoa_r+0xdf4>
   89f2e:	4642      	mov	r2, r8
   89f30:	4630      	mov	r0, r6
   89f32:	4639      	mov	r1, r7
   89f34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   89f38:	f003 f810 	bl	8cf5c <__aeabi_dcmplt>
   89f3c:	2800      	cmp	r0, #0
   89f3e:	f43f acaa 	beq.w	89896 <_dtoa_r+0x44e>
   89f42:	f04f 0800 	mov.w	r8, #0
   89f46:	4645      	mov	r5, r8
   89f48:	e4ce      	b.n	898e8 <_dtoa_r+0x4a0>
   89f4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   89f4c:	2a00      	cmp	r2, #0
   89f4e:	f000 80c3 	beq.w	8a0d8 <_dtoa_r+0xc90>
   89f52:	9a06      	ldr	r2, [sp, #24]
   89f54:	f203 4333 	addw	r3, r3, #1075	; 0x433
   89f58:	441a      	add	r2, r3
   89f5a:	9206      	str	r2, [sp, #24]
   89f5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   89f5e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89f60:	4616      	mov	r6, r2
   89f62:	441a      	add	r2, r3
   89f64:	920b      	str	r2, [sp, #44]	; 0x2c
   89f66:	e547      	b.n	899f8 <_dtoa_r+0x5b0>
   89f68:	2331      	movs	r3, #49	; 0x31
   89f6a:	9a07      	ldr	r2, [sp, #28]
   89f6c:	3201      	adds	r2, #1
   89f6e:	9207      	str	r2, [sp, #28]
   89f70:	9a03      	ldr	r2, [sp, #12]
   89f72:	7013      	strb	r3, [r2, #0]
   89f74:	e61d      	b.n	89bb2 <_dtoa_r+0x76a>
   89f76:	f000 814b 	beq.w	8a210 <_dtoa_r+0xdc8>
   89f7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89f7e:	9b07      	ldr	r3, [sp, #28]
   89f80:	425d      	negs	r5, r3
   89f82:	4b50      	ldr	r3, [pc, #320]	; (8a0c4 <_dtoa_r+0xc7c>)
   89f84:	f005 020f 	and.w	r2, r5, #15
   89f88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89f90:	f002 fd72 	bl	8ca78 <__aeabi_dmul>
   89f94:	112d      	asrs	r5, r5, #4
   89f96:	4606      	mov	r6, r0
   89f98:	460f      	mov	r7, r1
   89f9a:	f000 817d 	beq.w	8a298 <_dtoa_r+0xe50>
   89f9e:	2300      	movs	r3, #0
   89fa0:	f04f 0902 	mov.w	r9, #2
   89fa4:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8a0c8 <_dtoa_r+0xc80>
   89fa8:	07ea      	lsls	r2, r5, #31
   89faa:	d505      	bpl.n	89fb8 <_dtoa_r+0xb70>
   89fac:	e9d8 2300 	ldrd	r2, r3, [r8]
   89fb0:	f002 fd62 	bl	8ca78 <__aeabi_dmul>
   89fb4:	2301      	movs	r3, #1
   89fb6:	4499      	add	r9, r3
   89fb8:	106d      	asrs	r5, r5, #1
   89fba:	f108 0808 	add.w	r8, r8, #8
   89fbe:	d1f3      	bne.n	89fa8 <_dtoa_r+0xb60>
   89fc0:	2b00      	cmp	r3, #0
   89fc2:	f43f abba 	beq.w	8973a <_dtoa_r+0x2f2>
   89fc6:	4606      	mov	r6, r0
   89fc8:	460f      	mov	r7, r1
   89fca:	f7ff bbb6 	b.w	8973a <_dtoa_r+0x2f2>
   89fce:	900e      	str	r0, [sp, #56]	; 0x38
   89fd0:	e520      	b.n	89a14 <_dtoa_r+0x5cc>
   89fd2:	9b04      	ldr	r3, [sp, #16]
   89fd4:	2b00      	cmp	r3, #0
   89fd6:	f47f ae2b 	bne.w	89c30 <_dtoa_r+0x7e8>
   89fda:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89fde:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89fe2:	2b00      	cmp	r3, #0
   89fe4:	f43f aeff 	beq.w	89de6 <_dtoa_r+0x99e>
   89fe8:	e622      	b.n	89c30 <_dtoa_r+0x7e8>
   89fea:	2a00      	cmp	r2, #0
   89fec:	dd12      	ble.n	8a014 <_dtoa_r+0xbcc>
   89fee:	4651      	mov	r1, sl
   89ff0:	2201      	movs	r2, #1
   89ff2:	4620      	mov	r0, r4
   89ff4:	9304      	str	r3, [sp, #16]
   89ff6:	f001 fc27 	bl	8b848 <__lshift>
   89ffa:	4641      	mov	r1, r8
   89ffc:	4682      	mov	sl, r0
   89ffe:	f001 fc97 	bl	8b930 <__mcmp>
   8a002:	2800      	cmp	r0, #0
   8a004:	9b04      	ldr	r3, [sp, #16]
   8a006:	f340 812c 	ble.w	8a262 <_dtoa_r+0xe1a>
   8a00a:	2b39      	cmp	r3, #57	; 0x39
   8a00c:	f000 810c 	beq.w	8a228 <_dtoa_r+0xde0>
   8a010:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8a014:	46b1      	mov	r9, r6
   8a016:	f809 3b01 	strb.w	r3, [r9], #1
   8a01a:	9b07      	ldr	r3, [sp, #28]
   8a01c:	462e      	mov	r6, r5
   8a01e:	3301      	adds	r3, #1
   8a020:	463d      	mov	r5, r7
   8a022:	9307      	str	r3, [sp, #28]
   8a024:	e5c5      	b.n	89bb2 <_dtoa_r+0x76a>
   8a026:	4655      	mov	r5, sl
   8a028:	9c08      	ldr	r4, [sp, #32]
   8a02a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8a02e:	4602      	mov	r2, r0
   8a030:	460b      	mov	r3, r1
   8a032:	f002 fb6b 	bl	8c70c <__adddf3>
   8a036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a03a:	4606      	mov	r6, r0
   8a03c:	460f      	mov	r7, r1
   8a03e:	f002 ffab 	bl	8cf98 <__aeabi_dcmpgt>
   8a042:	b960      	cbnz	r0, 8a05e <_dtoa_r+0xc16>
   8a044:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a048:	4630      	mov	r0, r6
   8a04a:	4639      	mov	r1, r7
   8a04c:	f002 ff7c 	bl	8cf48 <__aeabi_dcmpeq>
   8a050:	2800      	cmp	r0, #0
   8a052:	f43f aca3 	beq.w	8999c <_dtoa_r+0x554>
   8a056:	f018 0f01 	tst.w	r8, #1
   8a05a:	f43f ac9f 	beq.w	8999c <_dtoa_r+0x554>
   8a05e:	9a03      	ldr	r2, [sp, #12]
   8a060:	e40a      	b.n	89878 <_dtoa_r+0x430>
   8a062:	4620      	mov	r0, r4
   8a064:	6869      	ldr	r1, [r5, #4]
   8a066:	f001 fa0f 	bl	8b488 <_Balloc>
   8a06a:	4606      	mov	r6, r0
   8a06c:	2800      	cmp	r0, #0
   8a06e:	f000 8117 	beq.w	8a2a0 <_dtoa_r+0xe58>
   8a072:	692b      	ldr	r3, [r5, #16]
   8a074:	f105 010c 	add.w	r1, r5, #12
   8a078:	3302      	adds	r3, #2
   8a07a:	009a      	lsls	r2, r3, #2
   8a07c:	300c      	adds	r0, #12
   8a07e:	f7fc fb33 	bl	866e8 <memcpy>
   8a082:	4631      	mov	r1, r6
   8a084:	2201      	movs	r2, #1
   8a086:	4620      	mov	r0, r4
   8a088:	f001 fbde 	bl	8b848 <__lshift>
   8a08c:	4607      	mov	r7, r0
   8a08e:	e5f0      	b.n	89c72 <_dtoa_r+0x82a>
   8a090:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8a094:	1a9e      	subs	r6, r3, r2
   8a096:	e4af      	b.n	899f8 <_dtoa_r+0x5b0>
   8a098:	2b39      	cmp	r3, #57	; 0x39
   8a09a:	f000 80c5 	beq.w	8a228 <_dtoa_r+0xde0>
   8a09e:	46b1      	mov	r9, r6
   8a0a0:	3301      	adds	r3, #1
   8a0a2:	f809 3b01 	strb.w	r3, [r9], #1
   8a0a6:	9b07      	ldr	r3, [sp, #28]
   8a0a8:	462e      	mov	r6, r5
   8a0aa:	3301      	adds	r3, #1
   8a0ac:	463d      	mov	r5, r7
   8a0ae:	9307      	str	r3, [sp, #28]
   8a0b0:	e57f      	b.n	89bb2 <_dtoa_r+0x76a>
   8a0b2:	bf00      	nop
   8a0b4:	0008d468 	.word	0x0008d468
   8a0b8:	7ff00000 	.word	0x7ff00000
   8a0bc:	401c0000 	.word	0x401c0000
   8a0c0:	40140000 	.word	0x40140000
   8a0c4:	0008d5c0 	.word	0x0008d5c0
   8a0c8:	0008d598 	.word	0x0008d598
   8a0cc:	9a07      	ldr	r2, [sp, #28]
   8a0ce:	462e      	mov	r6, r5
   8a0d0:	3201      	adds	r2, #1
   8a0d2:	463d      	mov	r5, r7
   8a0d4:	9207      	str	r2, [sp, #28]
   8a0d6:	e54d      	b.n	89b74 <_dtoa_r+0x72c>
   8a0d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8a0da:	9a06      	ldr	r2, [sp, #24]
   8a0dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8a0de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8a0e2:	441a      	add	r2, r3
   8a0e4:	9206      	str	r2, [sp, #24]
   8a0e6:	460a      	mov	r2, r1
   8a0e8:	441a      	add	r2, r3
   8a0ea:	460e      	mov	r6, r1
   8a0ec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a0ee:	920b      	str	r2, [sp, #44]	; 0x2c
   8a0f0:	e482      	b.n	899f8 <_dtoa_r+0x5b0>
   8a0f2:	9810      	ldr	r0, [sp, #64]	; 0x40
   8a0f4:	497f      	ldr	r1, [pc, #508]	; (8a2f4 <_dtoa_r+0xeac>)
   8a0f6:	4642      	mov	r2, r8
   8a0f8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8a0fc:	464b      	mov	r3, r9
   8a0fe:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8a102:	f002 fcb9 	bl	8ca78 <__aeabi_dmul>
   8a106:	4602      	mov	r2, r0
   8a108:	460b      	mov	r3, r1
   8a10a:	4630      	mov	r0, r6
   8a10c:	4639      	mov	r1, r7
   8a10e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8a112:	f002 ff61 	bl	8cfd8 <__aeabi_d2iz>
   8a116:	4680      	mov	r8, r0
   8a118:	f002 fc44 	bl	8c9a4 <__aeabi_i2d>
   8a11c:	460b      	mov	r3, r1
   8a11e:	4602      	mov	r2, r0
   8a120:	4639      	mov	r1, r7
   8a122:	4630      	mov	r0, r6
   8a124:	f002 faf0 	bl	8c708 <__aeabi_dsub>
   8a128:	4606      	mov	r6, r0
   8a12a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8a12c:	9d03      	ldr	r5, [sp, #12]
   8a12e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a132:	2801      	cmp	r0, #1
   8a134:	460f      	mov	r7, r1
   8a136:	f805 3b01 	strb.w	r3, [r5], #1
   8a13a:	d01e      	beq.n	8a17a <_dtoa_r+0xd32>
   8a13c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8a13e:	9a03      	ldr	r2, [sp, #12]
   8a140:	4413      	add	r3, r2
   8a142:	4698      	mov	r8, r3
   8a144:	2200      	movs	r2, #0
   8a146:	4b6c      	ldr	r3, [pc, #432]	; (8a2f8 <_dtoa_r+0xeb0>)
   8a148:	4630      	mov	r0, r6
   8a14a:	4639      	mov	r1, r7
   8a14c:	f002 fc94 	bl	8ca78 <__aeabi_dmul>
   8a150:	460f      	mov	r7, r1
   8a152:	4606      	mov	r6, r0
   8a154:	f002 ff40 	bl	8cfd8 <__aeabi_d2iz>
   8a158:	4681      	mov	r9, r0
   8a15a:	f002 fc23 	bl	8c9a4 <__aeabi_i2d>
   8a15e:	4602      	mov	r2, r0
   8a160:	460b      	mov	r3, r1
   8a162:	4630      	mov	r0, r6
   8a164:	4639      	mov	r1, r7
   8a166:	f002 facf 	bl	8c708 <__aeabi_dsub>
   8a16a:	f109 0930 	add.w	r9, r9, #48	; 0x30
   8a16e:	f805 9b01 	strb.w	r9, [r5], #1
   8a172:	4545      	cmp	r5, r8
   8a174:	4606      	mov	r6, r0
   8a176:	460f      	mov	r7, r1
   8a178:	d1e4      	bne.n	8a144 <_dtoa_r+0xcfc>
   8a17a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   8a17e:	2200      	movs	r2, #0
   8a180:	4b5e      	ldr	r3, [pc, #376]	; (8a2fc <_dtoa_r+0xeb4>)
   8a182:	4640      	mov	r0, r8
   8a184:	4649      	mov	r1, r9
   8a186:	f002 fac1 	bl	8c70c <__adddf3>
   8a18a:	4632      	mov	r2, r6
   8a18c:	463b      	mov	r3, r7
   8a18e:	f002 fee5 	bl	8cf5c <__aeabi_dcmplt>
   8a192:	2800      	cmp	r0, #0
   8a194:	d158      	bne.n	8a248 <_dtoa_r+0xe00>
   8a196:	4642      	mov	r2, r8
   8a198:	464b      	mov	r3, r9
   8a19a:	2000      	movs	r0, #0
   8a19c:	4957      	ldr	r1, [pc, #348]	; (8a2fc <_dtoa_r+0xeb4>)
   8a19e:	f002 fab3 	bl	8c708 <__aeabi_dsub>
   8a1a2:	4632      	mov	r2, r6
   8a1a4:	463b      	mov	r3, r7
   8a1a6:	f002 fef7 	bl	8cf98 <__aeabi_dcmpgt>
   8a1aa:	2800      	cmp	r0, #0
   8a1ac:	f43f ab73 	beq.w	89896 <_dtoa_r+0x44e>
   8a1b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8a1b4:	46a9      	mov	r9, r5
   8a1b6:	2b30      	cmp	r3, #48	; 0x30
   8a1b8:	f105 35ff 	add.w	r5, r5, #4294967295
   8a1bc:	d0f8      	beq.n	8a1b0 <_dtoa_r+0xd68>
   8a1be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a1c0:	3301      	adds	r3, #1
   8a1c2:	9307      	str	r3, [sp, #28]
   8a1c4:	e505      	b.n	89bd2 <_dtoa_r+0x78a>
   8a1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a1c8:	2b00      	cmp	r3, #0
   8a1ca:	f43f ae93 	beq.w	89ef4 <_dtoa_r+0xaac>
   8a1ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
   8a1d0:	2d00      	cmp	r5, #0
   8a1d2:	f77f ab60 	ble.w	89896 <_dtoa_r+0x44e>
   8a1d6:	2200      	movs	r2, #0
   8a1d8:	4b47      	ldr	r3, [pc, #284]	; (8a2f8 <_dtoa_r+0xeb0>)
   8a1da:	4630      	mov	r0, r6
   8a1dc:	4639      	mov	r1, r7
   8a1de:	f002 fc4b 	bl	8ca78 <__aeabi_dmul>
   8a1e2:	4606      	mov	r6, r0
   8a1e4:	460f      	mov	r7, r1
   8a1e6:	f109 0001 	add.w	r0, r9, #1
   8a1ea:	f002 fbdb 	bl	8c9a4 <__aeabi_i2d>
   8a1ee:	4632      	mov	r2, r6
   8a1f0:	463b      	mov	r3, r7
   8a1f2:	f002 fc41 	bl	8ca78 <__aeabi_dmul>
   8a1f6:	2200      	movs	r2, #0
   8a1f8:	4b41      	ldr	r3, [pc, #260]	; (8a300 <_dtoa_r+0xeb8>)
   8a1fa:	f002 fa87 	bl	8c70c <__adddf3>
   8a1fe:	9a07      	ldr	r2, [sp, #28]
   8a200:	4680      	mov	r8, r0
   8a202:	3a01      	subs	r2, #1
   8a204:	9213      	str	r2, [sp, #76]	; 0x4c
   8a206:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a20a:	9510      	str	r5, [sp, #64]	; 0x40
   8a20c:	f7ff bab6 	b.w	8977c <_dtoa_r+0x334>
   8a210:	f04f 0902 	mov.w	r9, #2
   8a214:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   8a218:	f7ff ba8f 	b.w	8973a <_dtoa_r+0x2f2>
   8a21c:	9b07      	ldr	r3, [sp, #28]
   8a21e:	3301      	adds	r3, #1
   8a220:	9307      	str	r3, [sp, #28]
   8a222:	2331      	movs	r3, #49	; 0x31
   8a224:	f7ff bb2f 	b.w	89886 <_dtoa_r+0x43e>
   8a228:	46b3      	mov	fp, r6
   8a22a:	2339      	movs	r3, #57	; 0x39
   8a22c:	9a07      	ldr	r2, [sp, #28]
   8a22e:	462e      	mov	r6, r5
   8a230:	3201      	adds	r2, #1
   8a232:	463d      	mov	r5, r7
   8a234:	9207      	str	r2, [sp, #28]
   8a236:	f80b 3b01 	strb.w	r3, [fp], #1
   8a23a:	e4aa      	b.n	89b92 <_dtoa_r+0x74a>
   8a23c:	f04f 0800 	mov.w	r8, #0
   8a240:	4645      	mov	r5, r8
   8a242:	e61e      	b.n	89e82 <_dtoa_r+0xa3a>
   8a244:	4699      	mov	r9, r3
   8a246:	e43c      	b.n	89ac2 <_dtoa_r+0x67a>
   8a248:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a24a:	9a03      	ldr	r2, [sp, #12]
   8a24c:	9307      	str	r3, [sp, #28]
   8a24e:	f7ff bb13 	b.w	89878 <_dtoa_r+0x430>
   8a252:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8a256:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8a258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a25a:	46a9      	mov	r9, r5
   8a25c:	3301      	adds	r3, #1
   8a25e:	9307      	str	r3, [sp, #28]
   8a260:	e4b7      	b.n	89bd2 <_dtoa_r+0x78a>
   8a262:	f47f aed7 	bne.w	8a014 <_dtoa_r+0xbcc>
   8a266:	07da      	lsls	r2, r3, #31
   8a268:	f57f aed4 	bpl.w	8a014 <_dtoa_r+0xbcc>
   8a26c:	e6cd      	b.n	8a00a <_dtoa_r+0xbc2>
   8a26e:	2b39      	cmp	r3, #57	; 0x39
   8a270:	d0da      	beq.n	8a228 <_dtoa_r+0xde0>
   8a272:	f1b9 0f00 	cmp.w	r9, #0
   8a276:	f73f aecb 	bgt.w	8a010 <_dtoa_r+0xbc8>
   8a27a:	e6cb      	b.n	8a014 <_dtoa_r+0xbcc>
   8a27c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a27e:	2b02      	cmp	r3, #2
   8a280:	f73f adeb 	bgt.w	89e5a <_dtoa_r+0xa12>
   8a284:	9707      	str	r7, [sp, #28]
   8a286:	e570      	b.n	89d6a <_dtoa_r+0x922>
   8a288:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a28a:	2b02      	cmp	r3, #2
   8a28c:	f73f ade5 	bgt.w	89e5a <_dtoa_r+0xa12>
   8a290:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a292:	9707      	str	r7, [sp, #28]
   8a294:	930a      	str	r3, [sp, #40]	; 0x28
   8a296:	e4e4      	b.n	89c62 <_dtoa_r+0x81a>
   8a298:	f04f 0902 	mov.w	r9, #2
   8a29c:	f7ff ba4d 	b.w	8973a <_dtoa_r+0x2f2>
   8a2a0:	4602      	mov	r2, r0
   8a2a2:	f240 21ea 	movw	r1, #746	; 0x2ea
   8a2a6:	4b17      	ldr	r3, [pc, #92]	; (8a304 <_dtoa_r+0xebc>)
   8a2a8:	4817      	ldr	r0, [pc, #92]	; (8a308 <_dtoa_r+0xec0>)
   8a2aa:	f002 f8a7 	bl	8c3fc <__assert_func>
   8a2ae:	4b17      	ldr	r3, [pc, #92]	; (8a30c <_dtoa_r+0xec4>)
   8a2b0:	9303      	str	r3, [sp, #12]
   8a2b2:	f7ff b904 	b.w	894be <_dtoa_r+0x76>
   8a2b6:	2500      	movs	r5, #0
   8a2b8:	4620      	mov	r0, r4
   8a2ba:	4629      	mov	r1, r5
   8a2bc:	6465      	str	r5, [r4, #68]	; 0x44
   8a2be:	f001 f8e3 	bl	8b488 <_Balloc>
   8a2c2:	9003      	str	r0, [sp, #12]
   8a2c4:	b958      	cbnz	r0, 8a2de <_dtoa_r+0xe96>
   8a2c6:	2200      	movs	r2, #0
   8a2c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8a2cc:	4b0d      	ldr	r3, [pc, #52]	; (8a304 <_dtoa_r+0xebc>)
   8a2ce:	480e      	ldr	r0, [pc, #56]	; (8a308 <_dtoa_r+0xec0>)
   8a2d0:	f002 f894 	bl	8c3fc <__assert_func>
   8a2d4:	f43f ac0d 	beq.w	89af2 <_dtoa_r+0x6aa>
   8a2d8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8a2dc:	e48f      	b.n	89bfe <_dtoa_r+0x7b6>
   8a2de:	f04f 33ff 	mov.w	r3, #4294967295
   8a2e2:	9312      	str	r3, [sp, #72]	; 0x48
   8a2e4:	930a      	str	r3, [sp, #40]	; 0x28
   8a2e6:	2301      	movs	r3, #1
   8a2e8:	9a03      	ldr	r2, [sp, #12]
   8a2ea:	9525      	str	r5, [sp, #148]	; 0x94
   8a2ec:	6422      	str	r2, [r4, #64]	; 0x40
   8a2ee:	930c      	str	r3, [sp, #48]	; 0x30
   8a2f0:	f7ff bad1 	b.w	89896 <_dtoa_r+0x44e>
   8a2f4:	0008d5c0 	.word	0x0008d5c0
   8a2f8:	40240000 	.word	0x40240000
   8a2fc:	3fe00000 	.word	0x3fe00000
   8a300:	401c0000 	.word	0x401c0000
   8a304:	0008d478 	.word	0x0008d478
   8a308:	0008d48c 	.word	0x0008d48c
   8a30c:	0008d46c 	.word	0x0008d46c

0008a310 <__sflush_r>:
   8a310:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8a314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a318:	460d      	mov	r5, r1
   8a31a:	0711      	lsls	r1, r2, #28
   8a31c:	4680      	mov	r8, r0
   8a31e:	d447      	bmi.n	8a3b0 <__sflush_r+0xa0>
   8a320:	686b      	ldr	r3, [r5, #4]
   8a322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8a326:	2b00      	cmp	r3, #0
   8a328:	81aa      	strh	r2, [r5, #12]
   8a32a:	dd5e      	ble.n	8a3ea <__sflush_r+0xda>
   8a32c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a32e:	2c00      	cmp	r4, #0
   8a330:	d058      	beq.n	8a3e4 <__sflush_r+0xd4>
   8a332:	2300      	movs	r3, #0
   8a334:	f8d8 6000 	ldr.w	r6, [r8]
   8a338:	f8c8 3000 	str.w	r3, [r8]
   8a33c:	b293      	uxth	r3, r2
   8a33e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8a342:	d156      	bne.n	8a3f2 <__sflush_r+0xe2>
   8a344:	2301      	movs	r3, #1
   8a346:	4640      	mov	r0, r8
   8a348:	69e9      	ldr	r1, [r5, #28]
   8a34a:	47a0      	blx	r4
   8a34c:	1c43      	adds	r3, r0, #1
   8a34e:	d067      	beq.n	8a420 <__sflush_r+0x110>
   8a350:	89ab      	ldrh	r3, [r5, #12]
   8a352:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a354:	075f      	lsls	r7, r3, #29
   8a356:	d505      	bpl.n	8a364 <__sflush_r+0x54>
   8a358:	686a      	ldr	r2, [r5, #4]
   8a35a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8a35c:	1a80      	subs	r0, r0, r2
   8a35e:	b10b      	cbz	r3, 8a364 <__sflush_r+0x54>
   8a360:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a362:	1ac0      	subs	r0, r0, r3
   8a364:	4602      	mov	r2, r0
   8a366:	69e9      	ldr	r1, [r5, #28]
   8a368:	2300      	movs	r3, #0
   8a36a:	4640      	mov	r0, r8
   8a36c:	47a0      	blx	r4
   8a36e:	1c41      	adds	r1, r0, #1
   8a370:	d141      	bne.n	8a3f6 <__sflush_r+0xe6>
   8a372:	f8d8 3000 	ldr.w	r3, [r8]
   8a376:	2b00      	cmp	r3, #0
   8a378:	d03d      	beq.n	8a3f6 <__sflush_r+0xe6>
   8a37a:	2b1d      	cmp	r3, #29
   8a37c:	d001      	beq.n	8a382 <__sflush_r+0x72>
   8a37e:	2b16      	cmp	r3, #22
   8a380:	d156      	bne.n	8a430 <__sflush_r+0x120>
   8a382:	2100      	movs	r1, #0
   8a384:	692a      	ldr	r2, [r5, #16]
   8a386:	89ab      	ldrh	r3, [r5, #12]
   8a388:	e9c5 2100 	strd	r2, r1, [r5]
   8a38c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a390:	81ab      	strh	r3, [r5, #12]
   8a392:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8a394:	f8c8 6000 	str.w	r6, [r8]
   8a398:	b321      	cbz	r1, 8a3e4 <__sflush_r+0xd4>
   8a39a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8a39e:	4299      	cmp	r1, r3
   8a3a0:	d002      	beq.n	8a3a8 <__sflush_r+0x98>
   8a3a2:	4640      	mov	r0, r8
   8a3a4:	f000 f9cc 	bl	8a740 <_free_r>
   8a3a8:	2000      	movs	r0, #0
   8a3aa:	6328      	str	r0, [r5, #48]	; 0x30
   8a3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a3b0:	692f      	ldr	r7, [r5, #16]
   8a3b2:	b1bf      	cbz	r7, 8a3e4 <__sflush_r+0xd4>
   8a3b4:	b293      	uxth	r3, r2
   8a3b6:	079a      	lsls	r2, r3, #30
   8a3b8:	bf18      	it	ne
   8a3ba:	2300      	movne	r3, #0
   8a3bc:	682e      	ldr	r6, [r5, #0]
   8a3be:	bf08      	it	eq
   8a3c0:	696b      	ldreq	r3, [r5, #20]
   8a3c2:	602f      	str	r7, [r5, #0]
   8a3c4:	1bf6      	subs	r6, r6, r7
   8a3c6:	60ab      	str	r3, [r5, #8]
   8a3c8:	e00a      	b.n	8a3e0 <__sflush_r+0xd0>
   8a3ca:	4633      	mov	r3, r6
   8a3cc:	463a      	mov	r2, r7
   8a3ce:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8a3d0:	4640      	mov	r0, r8
   8a3d2:	69e9      	ldr	r1, [r5, #28]
   8a3d4:	47a0      	blx	r4
   8a3d6:	1e04      	subs	r4, r0, #0
   8a3d8:	eba6 0604 	sub.w	r6, r6, r4
   8a3dc:	4427      	add	r7, r4
   8a3de:	dd17      	ble.n	8a410 <__sflush_r+0x100>
   8a3e0:	2e00      	cmp	r6, #0
   8a3e2:	dcf2      	bgt.n	8a3ca <__sflush_r+0xba>
   8a3e4:	2000      	movs	r0, #0
   8a3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a3ea:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a3ec:	2b00      	cmp	r3, #0
   8a3ee:	dc9d      	bgt.n	8a32c <__sflush_r+0x1c>
   8a3f0:	e7f8      	b.n	8a3e4 <__sflush_r+0xd4>
   8a3f2:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8a3f4:	e7ae      	b.n	8a354 <__sflush_r+0x44>
   8a3f6:	2100      	movs	r1, #0
   8a3f8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8a3fc:	692a      	ldr	r2, [r5, #16]
   8a3fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a402:	81ab      	strh	r3, [r5, #12]
   8a404:	04db      	lsls	r3, r3, #19
   8a406:	e9c5 2100 	strd	r2, r1, [r5]
   8a40a:	d5c2      	bpl.n	8a392 <__sflush_r+0x82>
   8a40c:	6528      	str	r0, [r5, #80]	; 0x50
   8a40e:	e7c0      	b.n	8a392 <__sflush_r+0x82>
   8a410:	89ab      	ldrh	r3, [r5, #12]
   8a412:	f04f 30ff 	mov.w	r0, #4294967295
   8a416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a41a:	81ab      	strh	r3, [r5, #12]
   8a41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a420:	f8d8 3000 	ldr.w	r3, [r8]
   8a424:	2b00      	cmp	r3, #0
   8a426:	d093      	beq.n	8a350 <__sflush_r+0x40>
   8a428:	2b1d      	cmp	r3, #29
   8a42a:	d006      	beq.n	8a43a <__sflush_r+0x12a>
   8a42c:	2b16      	cmp	r3, #22
   8a42e:	d004      	beq.n	8a43a <__sflush_r+0x12a>
   8a430:	89ab      	ldrh	r3, [r5, #12]
   8a432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a436:	81ab      	strh	r3, [r5, #12]
   8a438:	e7d5      	b.n	8a3e6 <__sflush_r+0xd6>
   8a43a:	f8c8 6000 	str.w	r6, [r8]
   8a43e:	e7d1      	b.n	8a3e4 <__sflush_r+0xd4>

0008a440 <_fflush_r>:
   8a440:	b538      	push	{r3, r4, r5, lr}
   8a442:	460c      	mov	r4, r1
   8a444:	4605      	mov	r5, r0
   8a446:	b108      	cbz	r0, 8a44c <_fflush_r+0xc>
   8a448:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a44a:	b1a3      	cbz	r3, 8a476 <_fflush_r+0x36>
   8a44c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a450:	b1b8      	cbz	r0, 8a482 <_fflush_r+0x42>
   8a452:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a454:	07db      	lsls	r3, r3, #31
   8a456:	d401      	bmi.n	8a45c <_fflush_r+0x1c>
   8a458:	0581      	lsls	r1, r0, #22
   8a45a:	d515      	bpl.n	8a488 <_fflush_r+0x48>
   8a45c:	4628      	mov	r0, r5
   8a45e:	4621      	mov	r1, r4
   8a460:	f7ff ff56 	bl	8a310 <__sflush_r>
   8a464:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a466:	4605      	mov	r5, r0
   8a468:	07da      	lsls	r2, r3, #31
   8a46a:	d402      	bmi.n	8a472 <_fflush_r+0x32>
   8a46c:	89a3      	ldrh	r3, [r4, #12]
   8a46e:	059b      	lsls	r3, r3, #22
   8a470:	d50e      	bpl.n	8a490 <_fflush_r+0x50>
   8a472:	4628      	mov	r0, r5
   8a474:	bd38      	pop	{r3, r4, r5, pc}
   8a476:	f000 f83f 	bl	8a4f8 <__sinit>
   8a47a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a47e:	2800      	cmp	r0, #0
   8a480:	d1e7      	bne.n	8a452 <_fflush_r+0x12>
   8a482:	4605      	mov	r5, r0
   8a484:	4628      	mov	r0, r5
   8a486:	bd38      	pop	{r3, r4, r5, pc}
   8a488:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a48a:	f000 fc07 	bl	8ac9c <__retarget_lock_acquire_recursive>
   8a48e:	e7e5      	b.n	8a45c <_fflush_r+0x1c>
   8a490:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a492:	f000 fc05 	bl	8aca0 <__retarget_lock_release_recursive>
   8a496:	4628      	mov	r0, r5
   8a498:	bd38      	pop	{r3, r4, r5, pc}
   8a49a:	bf00      	nop

0008a49c <std>:
   8a49c:	2300      	movs	r3, #0
   8a49e:	b510      	push	{r4, lr}
   8a4a0:	4604      	mov	r4, r0
   8a4a2:	e9c0 3300 	strd	r3, r3, [r0]
   8a4a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8a4aa:	8181      	strh	r1, [r0, #12]
   8a4ac:	81c2      	strh	r2, [r0, #14]
   8a4ae:	4619      	mov	r1, r3
   8a4b0:	6083      	str	r3, [r0, #8]
   8a4b2:	6643      	str	r3, [r0, #100]	; 0x64
   8a4b4:	6183      	str	r3, [r0, #24]
   8a4b6:	2208      	movs	r2, #8
   8a4b8:	305c      	adds	r0, #92	; 0x5c
   8a4ba:	f7fc f98b 	bl	867d4 <memset>
   8a4be:	4807      	ldr	r0, [pc, #28]	; (8a4dc <std+0x40>)
   8a4c0:	4907      	ldr	r1, [pc, #28]	; (8a4e0 <std+0x44>)
   8a4c2:	4a08      	ldr	r2, [pc, #32]	; (8a4e4 <std+0x48>)
   8a4c4:	4b08      	ldr	r3, [pc, #32]	; (8a4e8 <std+0x4c>)
   8a4c6:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8a4ca:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8a4ce:	62e3      	str	r3, [r4, #44]	; 0x2c
   8a4d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8a4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a4d8:	f000 bbdc 	b.w	8ac94 <__retarget_lock_init_recursive>
   8a4dc:	0008bff5 	.word	0x0008bff5
   8a4e0:	0008c019 	.word	0x0008c019
   8a4e4:	0008c059 	.word	0x0008c059
   8a4e8:	0008c079 	.word	0x0008c079

0008a4ec <_cleanup_r>:
   8a4ec:	4901      	ldr	r1, [pc, #4]	; (8a4f4 <_cleanup_r+0x8>)
   8a4ee:	f000 bba3 	b.w	8ac38 <_fwalk_reent>
   8a4f2:	bf00      	nop
   8a4f4:	0008c4bd 	.word	0x0008c4bd

0008a4f8 <__sinit>:
   8a4f8:	b510      	push	{r4, lr}
   8a4fa:	4604      	mov	r4, r0
   8a4fc:	4813      	ldr	r0, [pc, #76]	; (8a54c <__sinit+0x54>)
   8a4fe:	f000 fbcd 	bl	8ac9c <__retarget_lock_acquire_recursive>
   8a502:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8a504:	b9ea      	cbnz	r2, 8a542 <__sinit+0x4a>
   8a506:	2003      	movs	r0, #3
   8a508:	4911      	ldr	r1, [pc, #68]	; (8a550 <__sinit+0x58>)
   8a50a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8a50e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8a512:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8a516:	63e1      	str	r1, [r4, #60]	; 0x3c
   8a518:	6860      	ldr	r0, [r4, #4]
   8a51a:	2104      	movs	r1, #4
   8a51c:	f7ff ffbe 	bl	8a49c <std>
   8a520:	68a0      	ldr	r0, [r4, #8]
   8a522:	2201      	movs	r2, #1
   8a524:	2109      	movs	r1, #9
   8a526:	f7ff ffb9 	bl	8a49c <std>
   8a52a:	68e0      	ldr	r0, [r4, #12]
   8a52c:	2202      	movs	r2, #2
   8a52e:	2112      	movs	r1, #18
   8a530:	f7ff ffb4 	bl	8a49c <std>
   8a534:	2301      	movs	r3, #1
   8a536:	4805      	ldr	r0, [pc, #20]	; (8a54c <__sinit+0x54>)
   8a538:	63a3      	str	r3, [r4, #56]	; 0x38
   8a53a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a53e:	f000 bbaf 	b.w	8aca0 <__retarget_lock_release_recursive>
   8a542:	4802      	ldr	r0, [pc, #8]	; (8a54c <__sinit+0x54>)
   8a544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a548:	f000 bbaa 	b.w	8aca0 <__retarget_lock_release_recursive>
   8a54c:	20001848 	.word	0x20001848
   8a550:	0008a4ed 	.word	0x0008a4ed

0008a554 <__sfp_lock_acquire>:
   8a554:	4801      	ldr	r0, [pc, #4]	; (8a55c <__sfp_lock_acquire+0x8>)
   8a556:	f000 bba1 	b.w	8ac9c <__retarget_lock_acquire_recursive>
   8a55a:	bf00      	nop
   8a55c:	2000185c 	.word	0x2000185c

0008a560 <__sfp_lock_release>:
   8a560:	4801      	ldr	r0, [pc, #4]	; (8a568 <__sfp_lock_release+0x8>)
   8a562:	f000 bb9d 	b.w	8aca0 <__retarget_lock_release_recursive>
   8a566:	bf00      	nop
   8a568:	2000185c 	.word	0x2000185c

0008a56c <__libc_fini_array>:
   8a56c:	b538      	push	{r3, r4, r5, lr}
   8a56e:	4b08      	ldr	r3, [pc, #32]	; (8a590 <__libc_fini_array+0x24>)
   8a570:	4d08      	ldr	r5, [pc, #32]	; (8a594 <__libc_fini_array+0x28>)
   8a572:	1b5b      	subs	r3, r3, r5
   8a574:	109c      	asrs	r4, r3, #2
   8a576:	d007      	beq.n	8a588 <__libc_fini_array+0x1c>
   8a578:	3b04      	subs	r3, #4
   8a57a:	441d      	add	r5, r3
   8a57c:	3c01      	subs	r4, #1
   8a57e:	f855 3904 	ldr.w	r3, [r5], #-4
   8a582:	4798      	blx	r3
   8a584:	2c00      	cmp	r4, #0
   8a586:	d1f9      	bne.n	8a57c <__libc_fini_array+0x10>
   8a588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a58c:	f003 b92e 	b.w	8d7ec <_fini>
   8a590:	0008d7fc 	.word	0x0008d7fc
   8a594:	0008d7f8 	.word	0x0008d7f8

0008a598 <__fputwc>:
   8a598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8a59c:	b083      	sub	sp, #12
   8a59e:	4607      	mov	r7, r0
   8a5a0:	4688      	mov	r8, r1
   8a5a2:	4614      	mov	r4, r2
   8a5a4:	f000 fb6c 	bl	8ac80 <__locale_mb_cur_max>
   8a5a8:	2801      	cmp	r0, #1
   8a5aa:	d103      	bne.n	8a5b4 <__fputwc+0x1c>
   8a5ac:	f108 33ff 	add.w	r3, r8, #4294967295
   8a5b0:	2bfe      	cmp	r3, #254	; 0xfe
   8a5b2:	d933      	bls.n	8a61c <__fputwc+0x84>
   8a5b4:	4642      	mov	r2, r8
   8a5b6:	4638      	mov	r0, r7
   8a5b8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8a5bc:	a901      	add	r1, sp, #4
   8a5be:	f001 fe95 	bl	8c2ec <_wcrtomb_r>
   8a5c2:	1c42      	adds	r2, r0, #1
   8a5c4:	4606      	mov	r6, r0
   8a5c6:	d02f      	beq.n	8a628 <__fputwc+0x90>
   8a5c8:	b318      	cbz	r0, 8a612 <__fputwc+0x7a>
   8a5ca:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8a5ce:	2500      	movs	r5, #0
   8a5d0:	f10d 0904 	add.w	r9, sp, #4
   8a5d4:	e008      	b.n	8a5e8 <__fputwc+0x50>
   8a5d6:	6823      	ldr	r3, [r4, #0]
   8a5d8:	1c5a      	adds	r2, r3, #1
   8a5da:	6022      	str	r2, [r4, #0]
   8a5dc:	7019      	strb	r1, [r3, #0]
   8a5de:	3501      	adds	r5, #1
   8a5e0:	42b5      	cmp	r5, r6
   8a5e2:	d216      	bcs.n	8a612 <__fputwc+0x7a>
   8a5e4:	f815 1009 	ldrb.w	r1, [r5, r9]
   8a5e8:	68a3      	ldr	r3, [r4, #8]
   8a5ea:	3b01      	subs	r3, #1
   8a5ec:	2b00      	cmp	r3, #0
   8a5ee:	60a3      	str	r3, [r4, #8]
   8a5f0:	daf1      	bge.n	8a5d6 <__fputwc+0x3e>
   8a5f2:	69a2      	ldr	r2, [r4, #24]
   8a5f4:	4293      	cmp	r3, r2
   8a5f6:	db01      	blt.n	8a5fc <__fputwc+0x64>
   8a5f8:	290a      	cmp	r1, #10
   8a5fa:	d1ec      	bne.n	8a5d6 <__fputwc+0x3e>
   8a5fc:	4622      	mov	r2, r4
   8a5fe:	4638      	mov	r0, r7
   8a600:	f001 fe1c 	bl	8c23c <__swbuf_r>
   8a604:	1c43      	adds	r3, r0, #1
   8a606:	d1ea      	bne.n	8a5de <__fputwc+0x46>
   8a608:	4606      	mov	r6, r0
   8a60a:	4630      	mov	r0, r6
   8a60c:	b003      	add	sp, #12
   8a60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a612:	4646      	mov	r6, r8
   8a614:	4630      	mov	r0, r6
   8a616:	b003      	add	sp, #12
   8a618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a61c:	fa5f f188 	uxtb.w	r1, r8
   8a620:	4606      	mov	r6, r0
   8a622:	f88d 1004 	strb.w	r1, [sp, #4]
   8a626:	e7d2      	b.n	8a5ce <__fputwc+0x36>
   8a628:	4630      	mov	r0, r6
   8a62a:	89a3      	ldrh	r3, [r4, #12]
   8a62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a630:	81a3      	strh	r3, [r4, #12]
   8a632:	b003      	add	sp, #12
   8a634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008a638 <_fputwc_r>:
   8a638:	b530      	push	{r4, r5, lr}
   8a63a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a63c:	4614      	mov	r4, r2
   8a63e:	f013 0f01 	tst.w	r3, #1
   8a642:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8a646:	4605      	mov	r5, r0
   8a648:	b083      	sub	sp, #12
   8a64a:	b29a      	uxth	r2, r3
   8a64c:	d101      	bne.n	8a652 <_fputwc_r+0x1a>
   8a64e:	0598      	lsls	r0, r3, #22
   8a650:	d51c      	bpl.n	8a68c <_fputwc_r+0x54>
   8a652:	0490      	lsls	r0, r2, #18
   8a654:	d406      	bmi.n	8a664 <_fputwc_r+0x2c>
   8a656:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8a658:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8a65c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8a660:	81a3      	strh	r3, [r4, #12]
   8a662:	6662      	str	r2, [r4, #100]	; 0x64
   8a664:	4628      	mov	r0, r5
   8a666:	4622      	mov	r2, r4
   8a668:	f7ff ff96 	bl	8a598 <__fputwc>
   8a66c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a66e:	4605      	mov	r5, r0
   8a670:	07da      	lsls	r2, r3, #31
   8a672:	d402      	bmi.n	8a67a <_fputwc_r+0x42>
   8a674:	89a3      	ldrh	r3, [r4, #12]
   8a676:	059b      	lsls	r3, r3, #22
   8a678:	d502      	bpl.n	8a680 <_fputwc_r+0x48>
   8a67a:	4628      	mov	r0, r5
   8a67c:	b003      	add	sp, #12
   8a67e:	bd30      	pop	{r4, r5, pc}
   8a680:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a682:	f000 fb0d 	bl	8aca0 <__retarget_lock_release_recursive>
   8a686:	4628      	mov	r0, r5
   8a688:	b003      	add	sp, #12
   8a68a:	bd30      	pop	{r4, r5, pc}
   8a68c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a68e:	9101      	str	r1, [sp, #4]
   8a690:	f000 fb04 	bl	8ac9c <__retarget_lock_acquire_recursive>
   8a694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a698:	9901      	ldr	r1, [sp, #4]
   8a69a:	b29a      	uxth	r2, r3
   8a69c:	e7d9      	b.n	8a652 <_fputwc_r+0x1a>
   8a69e:	bf00      	nop

0008a6a0 <_malloc_trim_r>:
   8a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a6a2:	460c      	mov	r4, r1
   8a6a4:	4f23      	ldr	r7, [pc, #140]	; (8a734 <_malloc_trim_r+0x94>)
   8a6a6:	4606      	mov	r6, r0
   8a6a8:	f000 fee2 	bl	8b470 <__malloc_lock>
   8a6ac:	68bb      	ldr	r3, [r7, #8]
   8a6ae:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8a6b2:	685d      	ldr	r5, [r3, #4]
   8a6b4:	310f      	adds	r1, #15
   8a6b6:	f025 0503 	bic.w	r5, r5, #3
   8a6ba:	194b      	adds	r3, r1, r5
   8a6bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8a6c0:	f023 030f 	bic.w	r3, r3, #15
   8a6c4:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8a6c8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8a6cc:	db07      	blt.n	8a6de <_malloc_trim_r+0x3e>
   8a6ce:	2100      	movs	r1, #0
   8a6d0:	4630      	mov	r0, r6
   8a6d2:	f001 fc7d 	bl	8bfd0 <_sbrk_r>
   8a6d6:	68bb      	ldr	r3, [r7, #8]
   8a6d8:	442b      	add	r3, r5
   8a6da:	4298      	cmp	r0, r3
   8a6dc:	d004      	beq.n	8a6e8 <_malloc_trim_r+0x48>
   8a6de:	4630      	mov	r0, r6
   8a6e0:	f000 fecc 	bl	8b47c <__malloc_unlock>
   8a6e4:	2000      	movs	r0, #0
   8a6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a6e8:	4630      	mov	r0, r6
   8a6ea:	4261      	negs	r1, r4
   8a6ec:	f001 fc70 	bl	8bfd0 <_sbrk_r>
   8a6f0:	3001      	adds	r0, #1
   8a6f2:	d00d      	beq.n	8a710 <_malloc_trim_r+0x70>
   8a6f4:	4a10      	ldr	r2, [pc, #64]	; (8a738 <_malloc_trim_r+0x98>)
   8a6f6:	68b9      	ldr	r1, [r7, #8]
   8a6f8:	6813      	ldr	r3, [r2, #0]
   8a6fa:	1b2d      	subs	r5, r5, r4
   8a6fc:	f045 0501 	orr.w	r5, r5, #1
   8a700:	4630      	mov	r0, r6
   8a702:	1b1b      	subs	r3, r3, r4
   8a704:	604d      	str	r5, [r1, #4]
   8a706:	6013      	str	r3, [r2, #0]
   8a708:	f000 feb8 	bl	8b47c <__malloc_unlock>
   8a70c:	2001      	movs	r0, #1
   8a70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a710:	2100      	movs	r1, #0
   8a712:	4630      	mov	r0, r6
   8a714:	f001 fc5c 	bl	8bfd0 <_sbrk_r>
   8a718:	68ba      	ldr	r2, [r7, #8]
   8a71a:	1a83      	subs	r3, r0, r2
   8a71c:	2b0f      	cmp	r3, #15
   8a71e:	ddde      	ble.n	8a6de <_malloc_trim_r+0x3e>
   8a720:	4906      	ldr	r1, [pc, #24]	; (8a73c <_malloc_trim_r+0x9c>)
   8a722:	f043 0301 	orr.w	r3, r3, #1
   8a726:	680c      	ldr	r4, [r1, #0]
   8a728:	4903      	ldr	r1, [pc, #12]	; (8a738 <_malloc_trim_r+0x98>)
   8a72a:	1b00      	subs	r0, r0, r4
   8a72c:	6053      	str	r3, [r2, #4]
   8a72e:	6008      	str	r0, [r1, #0]
   8a730:	e7d5      	b.n	8a6de <_malloc_trim_r+0x3e>
   8a732:	bf00      	nop
   8a734:	200009d8 	.word	0x200009d8
   8a738:	2000137c 	.word	0x2000137c
   8a73c:	20000de0 	.word	0x20000de0

0008a740 <_free_r>:
   8a740:	2900      	cmp	r1, #0
   8a742:	d05f      	beq.n	8a804 <_free_r+0xc4>
   8a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a746:	460c      	mov	r4, r1
   8a748:	4606      	mov	r6, r0
   8a74a:	f000 fe91 	bl	8b470 <__malloc_lock>
   8a74e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a752:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8a948 <_free_r+0x208>
   8a756:	f1a4 0008 	sub.w	r0, r4, #8
   8a75a:	f023 0101 	bic.w	r1, r3, #1
   8a75e:	1842      	adds	r2, r0, r1
   8a760:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8a764:	6855      	ldr	r5, [r2, #4]
   8a766:	4297      	cmp	r7, r2
   8a768:	f025 0503 	bic.w	r5, r5, #3
   8a76c:	f000 8089 	beq.w	8a882 <_free_r+0x142>
   8a770:	07df      	lsls	r7, r3, #31
   8a772:	6055      	str	r5, [r2, #4]
   8a774:	d434      	bmi.n	8a7e0 <_free_r+0xa0>
   8a776:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8a77a:	f10c 0408 	add.w	r4, ip, #8
   8a77e:	1bc0      	subs	r0, r0, r7
   8a780:	6883      	ldr	r3, [r0, #8]
   8a782:	4439      	add	r1, r7
   8a784:	42a3      	cmp	r3, r4
   8a786:	d06a      	beq.n	8a85e <_free_r+0x11e>
   8a788:	1957      	adds	r7, r2, r5
   8a78a:	687f      	ldr	r7, [r7, #4]
   8a78c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8a790:	f8c3 e00c 	str.w	lr, [r3, #12]
   8a794:	f8ce 3008 	str.w	r3, [lr, #8]
   8a798:	07fb      	lsls	r3, r7, #31
   8a79a:	f140 8097 	bpl.w	8a8cc <_free_r+0x18c>
   8a79e:	f041 0301 	orr.w	r3, r1, #1
   8a7a2:	6043      	str	r3, [r0, #4]
   8a7a4:	6011      	str	r1, [r2, #0]
   8a7a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a7aa:	d234      	bcs.n	8a816 <_free_r+0xd6>
   8a7ac:	2201      	movs	r2, #1
   8a7ae:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8a7b2:	08cb      	lsrs	r3, r1, #3
   8a7b4:	0949      	lsrs	r1, r1, #5
   8a7b6:	4413      	add	r3, r2
   8a7b8:	fa02 f101 	lsl.w	r1, r2, r1
   8a7bc:	4321      	orrs	r1, r4
   8a7be:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8a7c2:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8a7c6:	3a08      	subs	r2, #8
   8a7c8:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8a7cc:	f8cc 1004 	str.w	r1, [ip, #4]
   8a7d0:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8a7d4:	60e0      	str	r0, [r4, #12]
   8a7d6:	4630      	mov	r0, r6
   8a7d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a7dc:	f000 be4e 	b.w	8b47c <__malloc_unlock>
   8a7e0:	1953      	adds	r3, r2, r5
   8a7e2:	685b      	ldr	r3, [r3, #4]
   8a7e4:	07df      	lsls	r7, r3, #31
   8a7e6:	d40e      	bmi.n	8a806 <_free_r+0xc6>
   8a7e8:	4429      	add	r1, r5
   8a7ea:	f10c 0408 	add.w	r4, ip, #8
   8a7ee:	6893      	ldr	r3, [r2, #8]
   8a7f0:	42a3      	cmp	r3, r4
   8a7f2:	d073      	beq.n	8a8dc <_free_r+0x19c>
   8a7f4:	68d4      	ldr	r4, [r2, #12]
   8a7f6:	f041 0201 	orr.w	r2, r1, #1
   8a7fa:	60dc      	str	r4, [r3, #12]
   8a7fc:	60a3      	str	r3, [r4, #8]
   8a7fe:	6042      	str	r2, [r0, #4]
   8a800:	5041      	str	r1, [r0, r1]
   8a802:	e7d0      	b.n	8a7a6 <_free_r+0x66>
   8a804:	4770      	bx	lr
   8a806:	f041 0301 	orr.w	r3, r1, #1
   8a80a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a80e:	f844 3c04 	str.w	r3, [r4, #-4]
   8a812:	6011      	str	r1, [r2, #0]
   8a814:	d3ca      	bcc.n	8a7ac <_free_r+0x6c>
   8a816:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8a81a:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8a81e:	d24a      	bcs.n	8a8b6 <_free_r+0x176>
   8a820:	098b      	lsrs	r3, r1, #6
   8a822:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8a826:	00ed      	lsls	r5, r5, #3
   8a828:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8a82c:	f85c 3005 	ldr.w	r3, [ip, r5]
   8a830:	eb0c 0405 	add.w	r4, ip, r5
   8a834:	3c08      	subs	r4, #8
   8a836:	429c      	cmp	r4, r3
   8a838:	d059      	beq.n	8a8ee <_free_r+0x1ae>
   8a83a:	685a      	ldr	r2, [r3, #4]
   8a83c:	f022 0203 	bic.w	r2, r2, #3
   8a840:	428a      	cmp	r2, r1
   8a842:	d902      	bls.n	8a84a <_free_r+0x10a>
   8a844:	689b      	ldr	r3, [r3, #8]
   8a846:	429c      	cmp	r4, r3
   8a848:	d1f7      	bne.n	8a83a <_free_r+0xfa>
   8a84a:	68dc      	ldr	r4, [r3, #12]
   8a84c:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8a850:	60a0      	str	r0, [r4, #8]
   8a852:	60d8      	str	r0, [r3, #12]
   8a854:	4630      	mov	r0, r6
   8a856:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a85a:	f000 be0f 	b.w	8b47c <__malloc_unlock>
   8a85e:	1953      	adds	r3, r2, r5
   8a860:	685b      	ldr	r3, [r3, #4]
   8a862:	07db      	lsls	r3, r3, #31
   8a864:	d466      	bmi.n	8a934 <_free_r+0x1f4>
   8a866:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8a86a:	4429      	add	r1, r5
   8a86c:	f041 0401 	orr.w	r4, r1, #1
   8a870:	60d3      	str	r3, [r2, #12]
   8a872:	609a      	str	r2, [r3, #8]
   8a874:	6044      	str	r4, [r0, #4]
   8a876:	5041      	str	r1, [r0, r1]
   8a878:	4630      	mov	r0, r6
   8a87a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a87e:	f000 bdfd 	b.w	8b47c <__malloc_unlock>
   8a882:	07db      	lsls	r3, r3, #31
   8a884:	4429      	add	r1, r5
   8a886:	d407      	bmi.n	8a898 <_free_r+0x158>
   8a888:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8a88c:	1b00      	subs	r0, r0, r4
   8a88e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8a892:	4421      	add	r1, r4
   8a894:	60d3      	str	r3, [r2, #12]
   8a896:	609a      	str	r2, [r3, #8]
   8a898:	4b29      	ldr	r3, [pc, #164]	; (8a940 <_free_r+0x200>)
   8a89a:	f041 0201 	orr.w	r2, r1, #1
   8a89e:	681b      	ldr	r3, [r3, #0]
   8a8a0:	6042      	str	r2, [r0, #4]
   8a8a2:	428b      	cmp	r3, r1
   8a8a4:	f8cc 0008 	str.w	r0, [ip, #8]
   8a8a8:	d895      	bhi.n	8a7d6 <_free_r+0x96>
   8a8aa:	4b26      	ldr	r3, [pc, #152]	; (8a944 <_free_r+0x204>)
   8a8ac:	4630      	mov	r0, r6
   8a8ae:	6819      	ldr	r1, [r3, #0]
   8a8b0:	f7ff fef6 	bl	8a6a0 <_malloc_trim_r>
   8a8b4:	e78f      	b.n	8a7d6 <_free_r+0x96>
   8a8b6:	2b14      	cmp	r3, #20
   8a8b8:	d90a      	bls.n	8a8d0 <_free_r+0x190>
   8a8ba:	2b54      	cmp	r3, #84	; 0x54
   8a8bc:	d821      	bhi.n	8a902 <_free_r+0x1c2>
   8a8be:	0b0b      	lsrs	r3, r1, #12
   8a8c0:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8a8c4:	00ed      	lsls	r5, r5, #3
   8a8c6:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8a8ca:	e7af      	b.n	8a82c <_free_r+0xec>
   8a8cc:	4429      	add	r1, r5
   8a8ce:	e78e      	b.n	8a7ee <_free_r+0xae>
   8a8d0:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8a8d4:	00ed      	lsls	r5, r5, #3
   8a8d6:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8a8da:	e7a7      	b.n	8a82c <_free_r+0xec>
   8a8dc:	f041 0301 	orr.w	r3, r1, #1
   8a8e0:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8a8e4:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8a8e8:	6043      	str	r3, [r0, #4]
   8a8ea:	5041      	str	r1, [r0, r1]
   8a8ec:	e773      	b.n	8a7d6 <_free_r+0x96>
   8a8ee:	2501      	movs	r5, #1
   8a8f0:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8a8f4:	1092      	asrs	r2, r2, #2
   8a8f6:	fa05 f202 	lsl.w	r2, r5, r2
   8a8fa:	430a      	orrs	r2, r1
   8a8fc:	f8cc 2004 	str.w	r2, [ip, #4]
   8a900:	e7a4      	b.n	8a84c <_free_r+0x10c>
   8a902:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a906:	d806      	bhi.n	8a916 <_free_r+0x1d6>
   8a908:	0bcb      	lsrs	r3, r1, #15
   8a90a:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8a90e:	00ed      	lsls	r5, r5, #3
   8a910:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8a914:	e78a      	b.n	8a82c <_free_r+0xec>
   8a916:	f240 5254 	movw	r2, #1364	; 0x554
   8a91a:	4293      	cmp	r3, r2
   8a91c:	d806      	bhi.n	8a92c <_free_r+0x1ec>
   8a91e:	0c8b      	lsrs	r3, r1, #18
   8a920:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8a924:	00ed      	lsls	r5, r5, #3
   8a926:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8a92a:	e77f      	b.n	8a82c <_free_r+0xec>
   8a92c:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8a930:	227e      	movs	r2, #126	; 0x7e
   8a932:	e77b      	b.n	8a82c <_free_r+0xec>
   8a934:	f041 0301 	orr.w	r3, r1, #1
   8a938:	6043      	str	r3, [r0, #4]
   8a93a:	6011      	str	r1, [r2, #0]
   8a93c:	e74b      	b.n	8a7d6 <_free_r+0x96>
   8a93e:	bf00      	nop
   8a940:	20000de4 	.word	0x20000de4
   8a944:	200013ac 	.word	0x200013ac
   8a948:	200009d8 	.word	0x200009d8

0008a94c <__sfvwrite_r>:
   8a94c:	6893      	ldr	r3, [r2, #8]
   8a94e:	2b00      	cmp	r3, #0
   8a950:	f000 80bd 	beq.w	8aace <__sfvwrite_r+0x182>
   8a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a958:	4690      	mov	r8, r2
   8a95a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8a95e:	460c      	mov	r4, r1
   8a960:	0711      	lsls	r1, r2, #28
   8a962:	4681      	mov	r9, r0
   8a964:	b083      	sub	sp, #12
   8a966:	b293      	uxth	r3, r2
   8a968:	d527      	bpl.n	8a9ba <__sfvwrite_r+0x6e>
   8a96a:	6922      	ldr	r2, [r4, #16]
   8a96c:	b32a      	cbz	r2, 8a9ba <__sfvwrite_r+0x6e>
   8a96e:	f013 0702 	ands.w	r7, r3, #2
   8a972:	f8d8 5000 	ldr.w	r5, [r8]
   8a976:	d02f      	beq.n	8a9d8 <__sfvwrite_r+0x8c>
   8a978:	f04f 0b00 	mov.w	fp, #0
   8a97c:	465f      	mov	r7, fp
   8a97e:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8ac34 <__sfvwrite_r+0x2e8>
   8a982:	2f00      	cmp	r7, #0
   8a984:	f000 8089 	beq.w	8aa9a <__sfvwrite_r+0x14e>
   8a988:	4557      	cmp	r7, sl
   8a98a:	463b      	mov	r3, r7
   8a98c:	465a      	mov	r2, fp
   8a98e:	bf28      	it	cs
   8a990:	4653      	movcs	r3, sl
   8a992:	4648      	mov	r0, r9
   8a994:	69e1      	ldr	r1, [r4, #28]
   8a996:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8a998:	47b0      	blx	r6
   8a99a:	2800      	cmp	r0, #0
   8a99c:	f340 808d 	ble.w	8aaba <__sfvwrite_r+0x16e>
   8a9a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a9a4:	4483      	add	fp, r0
   8a9a6:	1a1b      	subs	r3, r3, r0
   8a9a8:	1a3f      	subs	r7, r7, r0
   8a9aa:	f8c8 3008 	str.w	r3, [r8, #8]
   8a9ae:	2b00      	cmp	r3, #0
   8a9b0:	d1e7      	bne.n	8a982 <__sfvwrite_r+0x36>
   8a9b2:	2000      	movs	r0, #0
   8a9b4:	b003      	add	sp, #12
   8a9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a9ba:	4621      	mov	r1, r4
   8a9bc:	4648      	mov	r0, r9
   8a9be:	f7fe fc39 	bl	89234 <__swsetup_r>
   8a9c2:	2800      	cmp	r0, #0
   8a9c4:	f040 8132 	bne.w	8ac2c <__sfvwrite_r+0x2e0>
   8a9c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8a9cc:	f8d8 5000 	ldr.w	r5, [r8]
   8a9d0:	b293      	uxth	r3, r2
   8a9d2:	f013 0702 	ands.w	r7, r3, #2
   8a9d6:	d1cf      	bne.n	8a978 <__sfvwrite_r+0x2c>
   8a9d8:	f013 0a01 	ands.w	sl, r3, #1
   8a9dc:	d179      	bne.n	8aad2 <__sfvwrite_r+0x186>
   8a9de:	4656      	mov	r6, sl
   8a9e0:	2e00      	cmp	r6, #0
   8a9e2:	d056      	beq.n	8aa92 <__sfvwrite_r+0x146>
   8a9e4:	059a      	lsls	r2, r3, #22
   8a9e6:	68a7      	ldr	r7, [r4, #8]
   8a9e8:	f140 80bd 	bpl.w	8ab66 <__sfvwrite_r+0x21a>
   8a9ec:	42b7      	cmp	r7, r6
   8a9ee:	46bb      	mov	fp, r7
   8a9f0:	f200 80d2 	bhi.w	8ab98 <__sfvwrite_r+0x24c>
   8a9f4:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8a9f8:	f000 80d0 	beq.w	8ab9c <__sfvwrite_r+0x250>
   8a9fc:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8aa00:	6822      	ldr	r2, [r4, #0]
   8aa02:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8aa06:	eba2 0b01 	sub.w	fp, r2, r1
   8aa0a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8aa0e:	f10b 0001 	add.w	r0, fp, #1
   8aa12:	107f      	asrs	r7, r7, #1
   8aa14:	4430      	add	r0, r6
   8aa16:	42b8      	cmp	r0, r7
   8aa18:	463a      	mov	r2, r7
   8aa1a:	bf84      	itt	hi
   8aa1c:	4607      	movhi	r7, r0
   8aa1e:	463a      	movhi	r2, r7
   8aa20:	055b      	lsls	r3, r3, #21
   8aa22:	f140 80e7 	bpl.w	8abf4 <__sfvwrite_r+0x2a8>
   8aa26:	4611      	mov	r1, r2
   8aa28:	4648      	mov	r0, r9
   8aa2a:	f000 f9b3 	bl	8ad94 <_malloc_r>
   8aa2e:	2800      	cmp	r0, #0
   8aa30:	f000 80f6 	beq.w	8ac20 <__sfvwrite_r+0x2d4>
   8aa34:	465a      	mov	r2, fp
   8aa36:	6921      	ldr	r1, [r4, #16]
   8aa38:	9000      	str	r0, [sp, #0]
   8aa3a:	f7fb fe55 	bl	866e8 <memcpy>
   8aa3e:	89a2      	ldrh	r2, [r4, #12]
   8aa40:	9b00      	ldr	r3, [sp, #0]
   8aa42:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8aa46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8aa4a:	81a2      	strh	r2, [r4, #12]
   8aa4c:	eba7 020b 	sub.w	r2, r7, fp
   8aa50:	eb03 000b 	add.w	r0, r3, fp
   8aa54:	6167      	str	r7, [r4, #20]
   8aa56:	46b3      	mov	fp, r6
   8aa58:	4637      	mov	r7, r6
   8aa5a:	6123      	str	r3, [r4, #16]
   8aa5c:	6020      	str	r0, [r4, #0]
   8aa5e:	60a2      	str	r2, [r4, #8]
   8aa60:	465a      	mov	r2, fp
   8aa62:	4651      	mov	r1, sl
   8aa64:	f000 fc9a 	bl	8b39c <memmove>
   8aa68:	68a2      	ldr	r2, [r4, #8]
   8aa6a:	6823      	ldr	r3, [r4, #0]
   8aa6c:	1bd2      	subs	r2, r2, r7
   8aa6e:	4637      	mov	r7, r6
   8aa70:	2600      	movs	r6, #0
   8aa72:	445b      	add	r3, fp
   8aa74:	60a2      	str	r2, [r4, #8]
   8aa76:	6023      	str	r3, [r4, #0]
   8aa78:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8aa7c:	44ba      	add	sl, r7
   8aa7e:	1bd7      	subs	r7, r2, r7
   8aa80:	f8c8 7008 	str.w	r7, [r8, #8]
   8aa84:	2f00      	cmp	r7, #0
   8aa86:	d094      	beq.n	8a9b2 <__sfvwrite_r+0x66>
   8aa88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aa8c:	b29b      	uxth	r3, r3
   8aa8e:	2e00      	cmp	r6, #0
   8aa90:	d1a8      	bne.n	8a9e4 <__sfvwrite_r+0x98>
   8aa92:	e9d5 a600 	ldrd	sl, r6, [r5]
   8aa96:	3508      	adds	r5, #8
   8aa98:	e7a2      	b.n	8a9e0 <__sfvwrite_r+0x94>
   8aa9a:	e9d5 b700 	ldrd	fp, r7, [r5]
   8aa9e:	3508      	adds	r5, #8
   8aaa0:	e76f      	b.n	8a982 <__sfvwrite_r+0x36>
   8aaa2:	4629      	mov	r1, r5
   8aaa4:	465a      	mov	r2, fp
   8aaa6:	f000 fc79 	bl	8b39c <memmove>
   8aaaa:	6823      	ldr	r3, [r4, #0]
   8aaac:	4621      	mov	r1, r4
   8aaae:	445b      	add	r3, fp
   8aab0:	4648      	mov	r0, r9
   8aab2:	6023      	str	r3, [r4, #0]
   8aab4:	f7ff fcc4 	bl	8a440 <_fflush_r>
   8aab8:	b358      	cbz	r0, 8ab12 <__sfvwrite_r+0x1c6>
   8aaba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aabe:	f04f 30ff 	mov.w	r0, #4294967295
   8aac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8aac6:	81a3      	strh	r3, [r4, #12]
   8aac8:	b003      	add	sp, #12
   8aaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aace:	2000      	movs	r0, #0
   8aad0:	4770      	bx	lr
   8aad2:	463e      	mov	r6, r7
   8aad4:	46aa      	mov	sl, r5
   8aad6:	4638      	mov	r0, r7
   8aad8:	463d      	mov	r5, r7
   8aada:	9700      	str	r7, [sp, #0]
   8aadc:	b36e      	cbz	r6, 8ab3a <__sfvwrite_r+0x1ee>
   8aade:	2800      	cmp	r0, #0
   8aae0:	d035      	beq.n	8ab4e <__sfvwrite_r+0x202>
   8aae2:	9a00      	ldr	r2, [sp, #0]
   8aae4:	6820      	ldr	r0, [r4, #0]
   8aae6:	6921      	ldr	r1, [r4, #16]
   8aae8:	42b2      	cmp	r2, r6
   8aaea:	bf28      	it	cs
   8aaec:	4632      	movcs	r2, r6
   8aaee:	4288      	cmp	r0, r1
   8aaf0:	6963      	ldr	r3, [r4, #20]
   8aaf2:	d904      	bls.n	8aafe <__sfvwrite_r+0x1b2>
   8aaf4:	68a1      	ldr	r1, [r4, #8]
   8aaf6:	eb03 0b01 	add.w	fp, r3, r1
   8aafa:	455a      	cmp	r2, fp
   8aafc:	dcd1      	bgt.n	8aaa2 <__sfvwrite_r+0x156>
   8aafe:	4293      	cmp	r3, r2
   8ab00:	dc6b      	bgt.n	8abda <__sfvwrite_r+0x28e>
   8ab02:	462a      	mov	r2, r5
   8ab04:	4648      	mov	r0, r9
   8ab06:	69e1      	ldr	r1, [r4, #28]
   8ab08:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8ab0a:	47b8      	blx	r7
   8ab0c:	f1b0 0b00 	subs.w	fp, r0, #0
   8ab10:	ddd3      	ble.n	8aaba <__sfvwrite_r+0x16e>
   8ab12:	9b00      	ldr	r3, [sp, #0]
   8ab14:	ebb3 030b 	subs.w	r3, r3, fp
   8ab18:	9300      	str	r3, [sp, #0]
   8ab1a:	d057      	beq.n	8abcc <__sfvwrite_r+0x280>
   8ab1c:	2001      	movs	r0, #1
   8ab1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8ab22:	445d      	add	r5, fp
   8ab24:	eba3 030b 	sub.w	r3, r3, fp
   8ab28:	eba6 060b 	sub.w	r6, r6, fp
   8ab2c:	f8c8 3008 	str.w	r3, [r8, #8]
   8ab30:	2b00      	cmp	r3, #0
   8ab32:	f43f af3e 	beq.w	8a9b2 <__sfvwrite_r+0x66>
   8ab36:	2e00      	cmp	r6, #0
   8ab38:	d1d1      	bne.n	8aade <__sfvwrite_r+0x192>
   8ab3a:	f10a 0308 	add.w	r3, sl, #8
   8ab3e:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8ab42:	469a      	mov	sl, r3
   8ab44:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8ab48:	3308      	adds	r3, #8
   8ab4a:	2e00      	cmp	r6, #0
   8ab4c:	d0f7      	beq.n	8ab3e <__sfvwrite_r+0x1f2>
   8ab4e:	4632      	mov	r2, r6
   8ab50:	210a      	movs	r1, #10
   8ab52:	4628      	mov	r0, r5
   8ab54:	f000 fbe2 	bl	8b31c <memchr>
   8ab58:	2800      	cmp	r0, #0
   8ab5a:	d05e      	beq.n	8ac1a <__sfvwrite_r+0x2ce>
   8ab5c:	3001      	adds	r0, #1
   8ab5e:	1b43      	subs	r3, r0, r5
   8ab60:	461a      	mov	r2, r3
   8ab62:	9300      	str	r3, [sp, #0]
   8ab64:	e7be      	b.n	8aae4 <__sfvwrite_r+0x198>
   8ab66:	6820      	ldr	r0, [r4, #0]
   8ab68:	6923      	ldr	r3, [r4, #16]
   8ab6a:	4298      	cmp	r0, r3
   8ab6c:	d818      	bhi.n	8aba0 <__sfvwrite_r+0x254>
   8ab6e:	6962      	ldr	r2, [r4, #20]
   8ab70:	42b2      	cmp	r2, r6
   8ab72:	d815      	bhi.n	8aba0 <__sfvwrite_r+0x254>
   8ab74:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8ab78:	42b3      	cmp	r3, r6
   8ab7a:	bf28      	it	cs
   8ab7c:	4633      	movcs	r3, r6
   8ab7e:	fb93 f3f2 	sdiv	r3, r3, r2
   8ab82:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8ab84:	fb02 f303 	mul.w	r3, r2, r3
   8ab88:	4648      	mov	r0, r9
   8ab8a:	4652      	mov	r2, sl
   8ab8c:	69e1      	ldr	r1, [r4, #28]
   8ab8e:	47b8      	blx	r7
   8ab90:	1e07      	subs	r7, r0, #0
   8ab92:	dd92      	ble.n	8aaba <__sfvwrite_r+0x16e>
   8ab94:	1bf6      	subs	r6, r6, r7
   8ab96:	e76f      	b.n	8aa78 <__sfvwrite_r+0x12c>
   8ab98:	4637      	mov	r7, r6
   8ab9a:	46b3      	mov	fp, r6
   8ab9c:	6820      	ldr	r0, [r4, #0]
   8ab9e:	e75f      	b.n	8aa60 <__sfvwrite_r+0x114>
   8aba0:	42b7      	cmp	r7, r6
   8aba2:	bf28      	it	cs
   8aba4:	4637      	movcs	r7, r6
   8aba6:	4651      	mov	r1, sl
   8aba8:	463a      	mov	r2, r7
   8abaa:	f000 fbf7 	bl	8b39c <memmove>
   8abae:	68a3      	ldr	r3, [r4, #8]
   8abb0:	6822      	ldr	r2, [r4, #0]
   8abb2:	1bdb      	subs	r3, r3, r7
   8abb4:	443a      	add	r2, r7
   8abb6:	60a3      	str	r3, [r4, #8]
   8abb8:	6022      	str	r2, [r4, #0]
   8abba:	2b00      	cmp	r3, #0
   8abbc:	d1ea      	bne.n	8ab94 <__sfvwrite_r+0x248>
   8abbe:	4621      	mov	r1, r4
   8abc0:	4648      	mov	r0, r9
   8abc2:	f7ff fc3d 	bl	8a440 <_fflush_r>
   8abc6:	2800      	cmp	r0, #0
   8abc8:	d0e4      	beq.n	8ab94 <__sfvwrite_r+0x248>
   8abca:	e776      	b.n	8aaba <__sfvwrite_r+0x16e>
   8abcc:	4621      	mov	r1, r4
   8abce:	4648      	mov	r0, r9
   8abd0:	f7ff fc36 	bl	8a440 <_fflush_r>
   8abd4:	2800      	cmp	r0, #0
   8abd6:	d0a2      	beq.n	8ab1e <__sfvwrite_r+0x1d2>
   8abd8:	e76f      	b.n	8aaba <__sfvwrite_r+0x16e>
   8abda:	4629      	mov	r1, r5
   8abdc:	4693      	mov	fp, r2
   8abde:	9201      	str	r2, [sp, #4]
   8abe0:	f000 fbdc 	bl	8b39c <memmove>
   8abe4:	68a1      	ldr	r1, [r4, #8]
   8abe6:	6823      	ldr	r3, [r4, #0]
   8abe8:	9a01      	ldr	r2, [sp, #4]
   8abea:	1a89      	subs	r1, r1, r2
   8abec:	441a      	add	r2, r3
   8abee:	60a1      	str	r1, [r4, #8]
   8abf0:	6022      	str	r2, [r4, #0]
   8abf2:	e78e      	b.n	8ab12 <__sfvwrite_r+0x1c6>
   8abf4:	4648      	mov	r0, r9
   8abf6:	f000 ffc3 	bl	8bb80 <_realloc_r>
   8abfa:	4603      	mov	r3, r0
   8abfc:	2800      	cmp	r0, #0
   8abfe:	f47f af25 	bne.w	8aa4c <__sfvwrite_r+0x100>
   8ac02:	4648      	mov	r0, r9
   8ac04:	6921      	ldr	r1, [r4, #16]
   8ac06:	f7ff fd9b 	bl	8a740 <_free_r>
   8ac0a:	220c      	movs	r2, #12
   8ac0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ac10:	f8c9 2000 	str.w	r2, [r9]
   8ac14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8ac18:	e751      	b.n	8aabe <__sfvwrite_r+0x172>
   8ac1a:	1c72      	adds	r2, r6, #1
   8ac1c:	9200      	str	r2, [sp, #0]
   8ac1e:	e761      	b.n	8aae4 <__sfvwrite_r+0x198>
   8ac20:	220c      	movs	r2, #12
   8ac22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ac26:	f8c9 2000 	str.w	r2, [r9]
   8ac2a:	e748      	b.n	8aabe <__sfvwrite_r+0x172>
   8ac2c:	f04f 30ff 	mov.w	r0, #4294967295
   8ac30:	e6c0      	b.n	8a9b4 <__sfvwrite_r+0x68>
   8ac32:	bf00      	nop
   8ac34:	7ffffc00 	.word	0x7ffffc00

0008ac38 <_fwalk_reent>:
   8ac38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8ac3c:	4607      	mov	r7, r0
   8ac3e:	4688      	mov	r8, r1
   8ac40:	f04f 0900 	mov.w	r9, #0
   8ac44:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8ac48:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8ac4c:	3d01      	subs	r5, #1
   8ac4e:	d410      	bmi.n	8ac72 <_fwalk_reent+0x3a>
   8ac50:	89a3      	ldrh	r3, [r4, #12]
   8ac52:	3d01      	subs	r5, #1
   8ac54:	2b01      	cmp	r3, #1
   8ac56:	d908      	bls.n	8ac6a <_fwalk_reent+0x32>
   8ac58:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8ac5c:	3301      	adds	r3, #1
   8ac5e:	d004      	beq.n	8ac6a <_fwalk_reent+0x32>
   8ac60:	4621      	mov	r1, r4
   8ac62:	4638      	mov	r0, r7
   8ac64:	47c0      	blx	r8
   8ac66:	ea49 0900 	orr.w	r9, r9, r0
   8ac6a:	1c6b      	adds	r3, r5, #1
   8ac6c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8ac70:	d1ee      	bne.n	8ac50 <_fwalk_reent+0x18>
   8ac72:	6836      	ldr	r6, [r6, #0]
   8ac74:	2e00      	cmp	r6, #0
   8ac76:	d1e7      	bne.n	8ac48 <_fwalk_reent+0x10>
   8ac78:	4648      	mov	r0, r9
   8ac7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8ac7e:	bf00      	nop

0008ac80 <__locale_mb_cur_max>:
   8ac80:	4b01      	ldr	r3, [pc, #4]	; (8ac88 <__locale_mb_cur_max+0x8>)
   8ac82:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8ac86:	4770      	bx	lr
   8ac88:	2000086c 	.word	0x2000086c

0008ac8c <_localeconv_r>:
   8ac8c:	4800      	ldr	r0, [pc, #0]	; (8ac90 <_localeconv_r+0x4>)
   8ac8e:	4770      	bx	lr
   8ac90:	2000095c 	.word	0x2000095c

0008ac94 <__retarget_lock_init_recursive>:
   8ac94:	4770      	bx	lr
   8ac96:	bf00      	nop

0008ac98 <__retarget_lock_close_recursive>:
   8ac98:	4770      	bx	lr
   8ac9a:	bf00      	nop

0008ac9c <__retarget_lock_acquire_recursive>:
   8ac9c:	4770      	bx	lr
   8ac9e:	bf00      	nop

0008aca0 <__retarget_lock_release_recursive>:
   8aca0:	4770      	bx	lr
   8aca2:	bf00      	nop

0008aca4 <__swhatbuf_r>:
   8aca4:	b570      	push	{r4, r5, r6, lr}
   8aca6:	460c      	mov	r4, r1
   8aca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8acac:	4615      	mov	r5, r2
   8acae:	2900      	cmp	r1, #0
   8acb0:	461e      	mov	r6, r3
   8acb2:	b096      	sub	sp, #88	; 0x58
   8acb4:	db14      	blt.n	8ace0 <__swhatbuf_r+0x3c>
   8acb6:	466a      	mov	r2, sp
   8acb8:	f001 fc7a 	bl	8c5b0 <_fstat_r>
   8acbc:	2800      	cmp	r0, #0
   8acbe:	db0f      	blt.n	8ace0 <__swhatbuf_r+0x3c>
   8acc0:	9a01      	ldr	r2, [sp, #4]
   8acc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8acc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8acca:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8acce:	fab2 f282 	clz	r2, r2
   8acd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8acd6:	0952      	lsrs	r2, r2, #5
   8acd8:	6032      	str	r2, [r6, #0]
   8acda:	602b      	str	r3, [r5, #0]
   8acdc:	b016      	add	sp, #88	; 0x58
   8acde:	bd70      	pop	{r4, r5, r6, pc}
   8ace0:	2300      	movs	r3, #0
   8ace2:	89a1      	ldrh	r1, [r4, #12]
   8ace4:	6033      	str	r3, [r6, #0]
   8ace6:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8acea:	d004      	beq.n	8acf6 <__swhatbuf_r+0x52>
   8acec:	2240      	movs	r2, #64	; 0x40
   8acee:	4618      	mov	r0, r3
   8acf0:	602a      	str	r2, [r5, #0]
   8acf2:	b016      	add	sp, #88	; 0x58
   8acf4:	bd70      	pop	{r4, r5, r6, pc}
   8acf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8acfa:	602b      	str	r3, [r5, #0]
   8acfc:	b016      	add	sp, #88	; 0x58
   8acfe:	bd70      	pop	{r4, r5, r6, pc}

0008ad00 <__smakebuf_r>:
   8ad00:	b570      	push	{r4, r5, r6, lr}
   8ad02:	898b      	ldrh	r3, [r1, #12]
   8ad04:	460c      	mov	r4, r1
   8ad06:	079d      	lsls	r5, r3, #30
   8ad08:	b082      	sub	sp, #8
   8ad0a:	d507      	bpl.n	8ad1c <__smakebuf_r+0x1c>
   8ad0c:	2201      	movs	r2, #1
   8ad0e:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8ad12:	614a      	str	r2, [r1, #20]
   8ad14:	600b      	str	r3, [r1, #0]
   8ad16:	610b      	str	r3, [r1, #16]
   8ad18:	b002      	add	sp, #8
   8ad1a:	bd70      	pop	{r4, r5, r6, pc}
   8ad1c:	ab01      	add	r3, sp, #4
   8ad1e:	466a      	mov	r2, sp
   8ad20:	4606      	mov	r6, r0
   8ad22:	f7ff ffbf 	bl	8aca4 <__swhatbuf_r>
   8ad26:	9900      	ldr	r1, [sp, #0]
   8ad28:	4605      	mov	r5, r0
   8ad2a:	4630      	mov	r0, r6
   8ad2c:	f000 f832 	bl	8ad94 <_malloc_r>
   8ad30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ad34:	b170      	cbz	r0, 8ad54 <__smakebuf_r+0x54>
   8ad36:	4916      	ldr	r1, [pc, #88]	; (8ad90 <__smakebuf_r+0x90>)
   8ad38:	9a00      	ldr	r2, [sp, #0]
   8ad3a:	63f1      	str	r1, [r6, #60]	; 0x3c
   8ad3c:	9901      	ldr	r1, [sp, #4]
   8ad3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8ad42:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8ad46:	81a3      	strh	r3, [r4, #12]
   8ad48:	6020      	str	r0, [r4, #0]
   8ad4a:	b989      	cbnz	r1, 8ad70 <__smakebuf_r+0x70>
   8ad4c:	432b      	orrs	r3, r5
   8ad4e:	81a3      	strh	r3, [r4, #12]
   8ad50:	b002      	add	sp, #8
   8ad52:	bd70      	pop	{r4, r5, r6, pc}
   8ad54:	059a      	lsls	r2, r3, #22
   8ad56:	d4df      	bmi.n	8ad18 <__smakebuf_r+0x18>
   8ad58:	2101      	movs	r1, #1
   8ad5a:	f023 0303 	bic.w	r3, r3, #3
   8ad5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8ad62:	f043 0302 	orr.w	r3, r3, #2
   8ad66:	81a3      	strh	r3, [r4, #12]
   8ad68:	6161      	str	r1, [r4, #20]
   8ad6a:	6022      	str	r2, [r4, #0]
   8ad6c:	6122      	str	r2, [r4, #16]
   8ad6e:	e7d3      	b.n	8ad18 <__smakebuf_r+0x18>
   8ad70:	4630      	mov	r0, r6
   8ad72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8ad76:	f001 fc31 	bl	8c5dc <_isatty_r>
   8ad7a:	b910      	cbnz	r0, 8ad82 <__smakebuf_r+0x82>
   8ad7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ad80:	e7e4      	b.n	8ad4c <__smakebuf_r+0x4c>
   8ad82:	89a2      	ldrh	r2, [r4, #12]
   8ad84:	f022 0203 	bic.w	r2, r2, #3
   8ad88:	f042 0201 	orr.w	r2, r2, #1
   8ad8c:	b213      	sxth	r3, r2
   8ad8e:	e7dd      	b.n	8ad4c <__smakebuf_r+0x4c>
   8ad90:	0008a4ed 	.word	0x0008a4ed

0008ad94 <_malloc_r>:
   8ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ad98:	f101 050b 	add.w	r5, r1, #11
   8ad9c:	2d16      	cmp	r5, #22
   8ad9e:	4606      	mov	r6, r0
   8ada0:	b083      	sub	sp, #12
   8ada2:	d824      	bhi.n	8adee <_malloc_r+0x5a>
   8ada4:	2910      	cmp	r1, #16
   8ada6:	f200 80b6 	bhi.w	8af16 <_malloc_r+0x182>
   8adaa:	f000 fb61 	bl	8b470 <__malloc_lock>
   8adae:	2510      	movs	r5, #16
   8adb0:	2002      	movs	r0, #2
   8adb2:	2318      	movs	r3, #24
   8adb4:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8b2a0 <_malloc_r+0x50c>
   8adb8:	4443      	add	r3, r8
   8adba:	685c      	ldr	r4, [r3, #4]
   8adbc:	f1a3 0208 	sub.w	r2, r3, #8
   8adc0:	4294      	cmp	r4, r2
   8adc2:	f000 80b4 	beq.w	8af2e <_malloc_r+0x19a>
   8adc6:	6863      	ldr	r3, [r4, #4]
   8adc8:	68e1      	ldr	r1, [r4, #12]
   8adca:	f023 0303 	bic.w	r3, r3, #3
   8adce:	4423      	add	r3, r4
   8add0:	685a      	ldr	r2, [r3, #4]
   8add2:	68a5      	ldr	r5, [r4, #8]
   8add4:	f042 0201 	orr.w	r2, r2, #1
   8add8:	60e9      	str	r1, [r5, #12]
   8adda:	4630      	mov	r0, r6
   8addc:	608d      	str	r5, [r1, #8]
   8adde:	3408      	adds	r4, #8
   8ade0:	605a      	str	r2, [r3, #4]
   8ade2:	f000 fb4b 	bl	8b47c <__malloc_unlock>
   8ade6:	4620      	mov	r0, r4
   8ade8:	b003      	add	sp, #12
   8adea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8adee:	f035 0507 	bics.w	r5, r5, #7
   8adf2:	f100 8090 	bmi.w	8af16 <_malloc_r+0x182>
   8adf6:	42a9      	cmp	r1, r5
   8adf8:	f200 808d 	bhi.w	8af16 <_malloc_r+0x182>
   8adfc:	f000 fb38 	bl	8b470 <__malloc_lock>
   8ae00:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8ae04:	f0c0 8185 	bcc.w	8b112 <_malloc_r+0x37e>
   8ae08:	0a6b      	lsrs	r3, r5, #9
   8ae0a:	f000 808b 	beq.w	8af24 <_malloc_r+0x190>
   8ae0e:	2b04      	cmp	r3, #4
   8ae10:	f200 815b 	bhi.w	8b0ca <_malloc_r+0x336>
   8ae14:	09ab      	lsrs	r3, r5, #6
   8ae16:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8ae1a:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8ae1e:	00c1      	lsls	r1, r0, #3
   8ae20:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8b2a0 <_malloc_r+0x50c>
   8ae24:	4441      	add	r1, r8
   8ae26:	684c      	ldr	r4, [r1, #4]
   8ae28:	3908      	subs	r1, #8
   8ae2a:	42a1      	cmp	r1, r4
   8ae2c:	d106      	bne.n	8ae3c <_malloc_r+0xa8>
   8ae2e:	e00c      	b.n	8ae4a <_malloc_r+0xb6>
   8ae30:	2a00      	cmp	r2, #0
   8ae32:	f280 8122 	bge.w	8b07a <_malloc_r+0x2e6>
   8ae36:	68e4      	ldr	r4, [r4, #12]
   8ae38:	42a1      	cmp	r1, r4
   8ae3a:	d006      	beq.n	8ae4a <_malloc_r+0xb6>
   8ae3c:	6863      	ldr	r3, [r4, #4]
   8ae3e:	f023 0303 	bic.w	r3, r3, #3
   8ae42:	1b5a      	subs	r2, r3, r5
   8ae44:	2a0f      	cmp	r2, #15
   8ae46:	ddf3      	ble.n	8ae30 <_malloc_r+0x9c>
   8ae48:	4638      	mov	r0, r7
   8ae4a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8ae4e:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8b2a4 <_malloc_r+0x510>
   8ae52:	4564      	cmp	r4, ip
   8ae54:	d077      	beq.n	8af46 <_malloc_r+0x1b2>
   8ae56:	6862      	ldr	r2, [r4, #4]
   8ae58:	f022 0203 	bic.w	r2, r2, #3
   8ae5c:	1b53      	subs	r3, r2, r5
   8ae5e:	2b0f      	cmp	r3, #15
   8ae60:	f300 8165 	bgt.w	8b12e <_malloc_r+0x39a>
   8ae64:	2b00      	cmp	r3, #0
   8ae66:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8ae6a:	f280 8156 	bge.w	8b11a <_malloc_r+0x386>
   8ae6e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8ae72:	f080 8106 	bcs.w	8b082 <_malloc_r+0x2ee>
   8ae76:	2101      	movs	r1, #1
   8ae78:	08d3      	lsrs	r3, r2, #3
   8ae7a:	0952      	lsrs	r2, r2, #5
   8ae7c:	440b      	add	r3, r1
   8ae7e:	fa01 f202 	lsl.w	r2, r1, r2
   8ae82:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8ae86:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8ae8a:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8ae8e:	430a      	orrs	r2, r1
   8ae90:	f1ae 0108 	sub.w	r1, lr, #8
   8ae94:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8ae98:	f8c8 2004 	str.w	r2, [r8, #4]
   8ae9c:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8aea0:	60fc      	str	r4, [r7, #12]
   8aea2:	2101      	movs	r1, #1
   8aea4:	1083      	asrs	r3, r0, #2
   8aea6:	4099      	lsls	r1, r3
   8aea8:	4291      	cmp	r1, r2
   8aeaa:	d853      	bhi.n	8af54 <_malloc_r+0x1c0>
   8aeac:	4211      	tst	r1, r2
   8aeae:	d106      	bne.n	8aebe <_malloc_r+0x12a>
   8aeb0:	f020 0003 	bic.w	r0, r0, #3
   8aeb4:	0049      	lsls	r1, r1, #1
   8aeb6:	4211      	tst	r1, r2
   8aeb8:	f100 0004 	add.w	r0, r0, #4
   8aebc:	d0fa      	beq.n	8aeb4 <_malloc_r+0x120>
   8aebe:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8aec2:	464c      	mov	r4, r9
   8aec4:	4686      	mov	lr, r0
   8aec6:	68e7      	ldr	r7, [r4, #12]
   8aec8:	42bc      	cmp	r4, r7
   8aeca:	d107      	bne.n	8aedc <_malloc_r+0x148>
   8aecc:	e109      	b.n	8b0e2 <_malloc_r+0x34e>
   8aece:	2b00      	cmp	r3, #0
   8aed0:	f280 8110 	bge.w	8b0f4 <_malloc_r+0x360>
   8aed4:	68ff      	ldr	r7, [r7, #12]
   8aed6:	42bc      	cmp	r4, r7
   8aed8:	f000 8103 	beq.w	8b0e2 <_malloc_r+0x34e>
   8aedc:	687a      	ldr	r2, [r7, #4]
   8aede:	f022 0203 	bic.w	r2, r2, #3
   8aee2:	1b53      	subs	r3, r2, r5
   8aee4:	2b0f      	cmp	r3, #15
   8aee6:	ddf2      	ble.n	8aece <_malloc_r+0x13a>
   8aee8:	f045 0e01 	orr.w	lr, r5, #1
   8aeec:	4630      	mov	r0, r6
   8aeee:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8aef2:	443d      	add	r5, r7
   8aef4:	f043 0601 	orr.w	r6, r3, #1
   8aef8:	f8c7 e004 	str.w	lr, [r7, #4]
   8aefc:	60e1      	str	r1, [r4, #12]
   8aefe:	608c      	str	r4, [r1, #8]
   8af00:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8af04:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8af08:	606e      	str	r6, [r5, #4]
   8af0a:	50bb      	str	r3, [r7, r2]
   8af0c:	f000 fab6 	bl	8b47c <__malloc_unlock>
   8af10:	f107 0408 	add.w	r4, r7, #8
   8af14:	e002      	b.n	8af1c <_malloc_r+0x188>
   8af16:	230c      	movs	r3, #12
   8af18:	2400      	movs	r4, #0
   8af1a:	6033      	str	r3, [r6, #0]
   8af1c:	4620      	mov	r0, r4
   8af1e:	b003      	add	sp, #12
   8af20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8af24:	f44f 7100 	mov.w	r1, #512	; 0x200
   8af28:	2040      	movs	r0, #64	; 0x40
   8af2a:	273f      	movs	r7, #63	; 0x3f
   8af2c:	e778      	b.n	8ae20 <_malloc_r+0x8c>
   8af2e:	68dc      	ldr	r4, [r3, #12]
   8af30:	42a3      	cmp	r3, r4
   8af32:	bf08      	it	eq
   8af34:	3002      	addeq	r0, #2
   8af36:	f47f af46 	bne.w	8adc6 <_malloc_r+0x32>
   8af3a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8af3e:	f8df c364 	ldr.w	ip, [pc, #868]	; 8b2a4 <_malloc_r+0x510>
   8af42:	4564      	cmp	r4, ip
   8af44:	d187      	bne.n	8ae56 <_malloc_r+0xc2>
   8af46:	2101      	movs	r1, #1
   8af48:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8af4c:	1083      	asrs	r3, r0, #2
   8af4e:	4099      	lsls	r1, r3
   8af50:	4291      	cmp	r1, r2
   8af52:	d9ab      	bls.n	8aeac <_malloc_r+0x118>
   8af54:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8af58:	6867      	ldr	r7, [r4, #4]
   8af5a:	f027 0703 	bic.w	r7, r7, #3
   8af5e:	42bd      	cmp	r5, r7
   8af60:	d802      	bhi.n	8af68 <_malloc_r+0x1d4>
   8af62:	1b7b      	subs	r3, r7, r5
   8af64:	2b0f      	cmp	r3, #15
   8af66:	dc77      	bgt.n	8b058 <_malloc_r+0x2c4>
   8af68:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8b2a8 <_malloc_r+0x514>
   8af6c:	4bc8      	ldr	r3, [pc, #800]	; (8b290 <_malloc_r+0x4fc>)
   8af6e:	f8d9 2000 	ldr.w	r2, [r9]
   8af72:	681b      	ldr	r3, [r3, #0]
   8af74:	3201      	adds	r2, #1
   8af76:	442b      	add	r3, r5
   8af78:	eb04 0a07 	add.w	sl, r4, r7
   8af7c:	f000 8124 	beq.w	8b1c8 <_malloc_r+0x434>
   8af80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8af84:	330f      	adds	r3, #15
   8af86:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8af8a:	f02b 0b0f 	bic.w	fp, fp, #15
   8af8e:	4659      	mov	r1, fp
   8af90:	4630      	mov	r0, r6
   8af92:	f001 f81d 	bl	8bfd0 <_sbrk_r>
   8af96:	1c41      	adds	r1, r0, #1
   8af98:	4602      	mov	r2, r0
   8af9a:	f000 80e1 	beq.w	8b160 <_malloc_r+0x3cc>
   8af9e:	4582      	cmp	sl, r0
   8afa0:	f200 80dc 	bhi.w	8b15c <_malloc_r+0x3c8>
   8afa4:	4bbb      	ldr	r3, [pc, #748]	; (8b294 <_malloc_r+0x500>)
   8afa6:	6819      	ldr	r1, [r3, #0]
   8afa8:	4459      	add	r1, fp
   8afaa:	4608      	mov	r0, r1
   8afac:	6019      	str	r1, [r3, #0]
   8afae:	f000 8141 	beq.w	8b234 <_malloc_r+0x4a0>
   8afb2:	f8d9 1000 	ldr.w	r1, [r9]
   8afb6:	9301      	str	r3, [sp, #4]
   8afb8:	3101      	adds	r1, #1
   8afba:	bf1b      	ittet	ne
   8afbc:	eba2 0a0a 	subne.w	sl, r2, sl
   8afc0:	4450      	addne	r0, sl
   8afc2:	f8c9 2000 	streq.w	r2, [r9]
   8afc6:	6018      	strne	r0, [r3, #0]
   8afc8:	f012 0a07 	ands.w	sl, r2, #7
   8afcc:	f000 810a 	beq.w	8b1e4 <_malloc_r+0x450>
   8afd0:	f1ca 0108 	rsb	r1, sl, #8
   8afd4:	440a      	add	r2, r1
   8afd6:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8afda:	4493      	add	fp, r2
   8afdc:	3108      	adds	r1, #8
   8afde:	eba1 010b 	sub.w	r1, r1, fp
   8afe2:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8afe6:	4649      	mov	r1, r9
   8afe8:	4630      	mov	r0, r6
   8afea:	9200      	str	r2, [sp, #0]
   8afec:	f000 fff0 	bl	8bfd0 <_sbrk_r>
   8aff0:	1c42      	adds	r2, r0, #1
   8aff2:	e9dd 2300 	ldrd	r2, r3, [sp]
   8aff6:	f000 8143 	beq.w	8b280 <_malloc_r+0x4ec>
   8affa:	1a80      	subs	r0, r0, r2
   8affc:	eb00 0b09 	add.w	fp, r0, r9
   8b000:	6819      	ldr	r1, [r3, #0]
   8b002:	f04b 0001 	orr.w	r0, fp, #1
   8b006:	4449      	add	r1, r9
   8b008:	4544      	cmp	r4, r8
   8b00a:	f8c8 2008 	str.w	r2, [r8, #8]
   8b00e:	6019      	str	r1, [r3, #0]
   8b010:	6050      	str	r0, [r2, #4]
   8b012:	f000 811c 	beq.w	8b24e <_malloc_r+0x4ba>
   8b016:	2f0f      	cmp	r7, #15
   8b018:	f240 811b 	bls.w	8b252 <_malloc_r+0x4be>
   8b01c:	f04f 0c05 	mov.w	ip, #5
   8b020:	6860      	ldr	r0, [r4, #4]
   8b022:	3f0c      	subs	r7, #12
   8b024:	f027 0707 	bic.w	r7, r7, #7
   8b028:	f000 0001 	and.w	r0, r0, #1
   8b02c:	4338      	orrs	r0, r7
   8b02e:	eb04 0e07 	add.w	lr, r4, r7
   8b032:	2f0f      	cmp	r7, #15
   8b034:	6060      	str	r0, [r4, #4]
   8b036:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8b03a:	f200 8137 	bhi.w	8b2ac <_malloc_r+0x518>
   8b03e:	4614      	mov	r4, r2
   8b040:	6850      	ldr	r0, [r2, #4]
   8b042:	4b95      	ldr	r3, [pc, #596]	; (8b298 <_malloc_r+0x504>)
   8b044:	681a      	ldr	r2, [r3, #0]
   8b046:	428a      	cmp	r2, r1
   8b048:	bf38      	it	cc
   8b04a:	6019      	strcc	r1, [r3, #0]
   8b04c:	4b93      	ldr	r3, [pc, #588]	; (8b29c <_malloc_r+0x508>)
   8b04e:	681a      	ldr	r2, [r3, #0]
   8b050:	428a      	cmp	r2, r1
   8b052:	bf38      	it	cc
   8b054:	6019      	strcc	r1, [r3, #0]
   8b056:	e086      	b.n	8b166 <_malloc_r+0x3d2>
   8b058:	f045 0201 	orr.w	r2, r5, #1
   8b05c:	f043 0301 	orr.w	r3, r3, #1
   8b060:	4425      	add	r5, r4
   8b062:	6062      	str	r2, [r4, #4]
   8b064:	4630      	mov	r0, r6
   8b066:	f8c8 5008 	str.w	r5, [r8, #8]
   8b06a:	3408      	adds	r4, #8
   8b06c:	606b      	str	r3, [r5, #4]
   8b06e:	f000 fa05 	bl	8b47c <__malloc_unlock>
   8b072:	4620      	mov	r0, r4
   8b074:	b003      	add	sp, #12
   8b076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b07a:	4423      	add	r3, r4
   8b07c:	685a      	ldr	r2, [r3, #4]
   8b07e:	68e1      	ldr	r1, [r4, #12]
   8b080:	e6a7      	b.n	8add2 <_malloc_r+0x3e>
   8b082:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8b086:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8b08a:	d361      	bcc.n	8b150 <_malloc_r+0x3bc>
   8b08c:	2b14      	cmp	r3, #20
   8b08e:	f200 80ba 	bhi.w	8b206 <_malloc_r+0x472>
   8b092:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8b096:	00c9      	lsls	r1, r1, #3
   8b098:	335b      	adds	r3, #91	; 0x5b
   8b09a:	eb08 0701 	add.w	r7, r8, r1
   8b09e:	f858 1001 	ldr.w	r1, [r8, r1]
   8b0a2:	3f08      	subs	r7, #8
   8b0a4:	428f      	cmp	r7, r1
   8b0a6:	f000 8092 	beq.w	8b1ce <_malloc_r+0x43a>
   8b0aa:	684b      	ldr	r3, [r1, #4]
   8b0ac:	f023 0303 	bic.w	r3, r3, #3
   8b0b0:	4293      	cmp	r3, r2
   8b0b2:	d902      	bls.n	8b0ba <_malloc_r+0x326>
   8b0b4:	6889      	ldr	r1, [r1, #8]
   8b0b6:	428f      	cmp	r7, r1
   8b0b8:	d1f7      	bne.n	8b0aa <_malloc_r+0x316>
   8b0ba:	68cf      	ldr	r7, [r1, #12]
   8b0bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8b0c0:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8b0c4:	60bc      	str	r4, [r7, #8]
   8b0c6:	60cc      	str	r4, [r1, #12]
   8b0c8:	e6eb      	b.n	8aea2 <_malloc_r+0x10e>
   8b0ca:	2b14      	cmp	r3, #20
   8b0cc:	d959      	bls.n	8b182 <_malloc_r+0x3ee>
   8b0ce:	2b54      	cmp	r3, #84	; 0x54
   8b0d0:	f200 80a1 	bhi.w	8b216 <_malloc_r+0x482>
   8b0d4:	0b2b      	lsrs	r3, r5, #12
   8b0d6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8b0da:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8b0de:	00c1      	lsls	r1, r0, #3
   8b0e0:	e69e      	b.n	8ae20 <_malloc_r+0x8c>
   8b0e2:	f10e 0e01 	add.w	lr, lr, #1
   8b0e6:	f01e 0f03 	tst.w	lr, #3
   8b0ea:	f104 0408 	add.w	r4, r4, #8
   8b0ee:	f47f aeea 	bne.w	8aec6 <_malloc_r+0x132>
   8b0f2:	e051      	b.n	8b198 <_malloc_r+0x404>
   8b0f4:	463c      	mov	r4, r7
   8b0f6:	443a      	add	r2, r7
   8b0f8:	6853      	ldr	r3, [r2, #4]
   8b0fa:	68f9      	ldr	r1, [r7, #12]
   8b0fc:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8b100:	f043 0301 	orr.w	r3, r3, #1
   8b104:	6053      	str	r3, [r2, #4]
   8b106:	4630      	mov	r0, r6
   8b108:	60e9      	str	r1, [r5, #12]
   8b10a:	608d      	str	r5, [r1, #8]
   8b10c:	f000 f9b6 	bl	8b47c <__malloc_unlock>
   8b110:	e704      	b.n	8af1c <_malloc_r+0x188>
   8b112:	08e8      	lsrs	r0, r5, #3
   8b114:	f105 0308 	add.w	r3, r5, #8
   8b118:	e64c      	b.n	8adb4 <_malloc_r+0x20>
   8b11a:	4422      	add	r2, r4
   8b11c:	6853      	ldr	r3, [r2, #4]
   8b11e:	4630      	mov	r0, r6
   8b120:	f043 0301 	orr.w	r3, r3, #1
   8b124:	6053      	str	r3, [r2, #4]
   8b126:	3408      	adds	r4, #8
   8b128:	f000 f9a8 	bl	8b47c <__malloc_unlock>
   8b12c:	e6f6      	b.n	8af1c <_malloc_r+0x188>
   8b12e:	f045 0701 	orr.w	r7, r5, #1
   8b132:	f043 0101 	orr.w	r1, r3, #1
   8b136:	4425      	add	r5, r4
   8b138:	6067      	str	r7, [r4, #4]
   8b13a:	4630      	mov	r0, r6
   8b13c:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8b140:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8b144:	6069      	str	r1, [r5, #4]
   8b146:	50a3      	str	r3, [r4, r2]
   8b148:	f000 f998 	bl	8b47c <__malloc_unlock>
   8b14c:	3408      	adds	r4, #8
   8b14e:	e6e5      	b.n	8af1c <_malloc_r+0x188>
   8b150:	0993      	lsrs	r3, r2, #6
   8b152:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8b156:	00c9      	lsls	r1, r1, #3
   8b158:	3338      	adds	r3, #56	; 0x38
   8b15a:	e79e      	b.n	8b09a <_malloc_r+0x306>
   8b15c:	4544      	cmp	r4, r8
   8b15e:	d064      	beq.n	8b22a <_malloc_r+0x496>
   8b160:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b164:	6860      	ldr	r0, [r4, #4]
   8b166:	f020 0b03 	bic.w	fp, r0, #3
   8b16a:	455d      	cmp	r5, fp
   8b16c:	ebab 0305 	sub.w	r3, fp, r5
   8b170:	d802      	bhi.n	8b178 <_malloc_r+0x3e4>
   8b172:	2b0f      	cmp	r3, #15
   8b174:	f73f af70 	bgt.w	8b058 <_malloc_r+0x2c4>
   8b178:	4630      	mov	r0, r6
   8b17a:	f000 f97f 	bl	8b47c <__malloc_unlock>
   8b17e:	2400      	movs	r4, #0
   8b180:	e6cc      	b.n	8af1c <_malloc_r+0x188>
   8b182:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8b186:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8b18a:	00c1      	lsls	r1, r0, #3
   8b18c:	e648      	b.n	8ae20 <_malloc_r+0x8c>
   8b18e:	f859 3908 	ldr.w	r3, [r9], #-8
   8b192:	454b      	cmp	r3, r9
   8b194:	f040 80a9 	bne.w	8b2ea <_malloc_r+0x556>
   8b198:	f010 0f03 	tst.w	r0, #3
   8b19c:	f100 30ff 	add.w	r0, r0, #4294967295
   8b1a0:	d1f5      	bne.n	8b18e <_malloc_r+0x3fa>
   8b1a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8b1a6:	ea23 0301 	bic.w	r3, r3, r1
   8b1aa:	f8c8 3004 	str.w	r3, [r8, #4]
   8b1ae:	0049      	lsls	r1, r1, #1
   8b1b0:	4299      	cmp	r1, r3
   8b1b2:	f63f aecf 	bhi.w	8af54 <_malloc_r+0x1c0>
   8b1b6:	b919      	cbnz	r1, 8b1c0 <_malloc_r+0x42c>
   8b1b8:	e6cc      	b.n	8af54 <_malloc_r+0x1c0>
   8b1ba:	0049      	lsls	r1, r1, #1
   8b1bc:	f10e 0e04 	add.w	lr, lr, #4
   8b1c0:	4219      	tst	r1, r3
   8b1c2:	d0fa      	beq.n	8b1ba <_malloc_r+0x426>
   8b1c4:	4670      	mov	r0, lr
   8b1c6:	e67a      	b.n	8aebe <_malloc_r+0x12a>
   8b1c8:	f103 0b10 	add.w	fp, r3, #16
   8b1cc:	e6df      	b.n	8af8e <_malloc_r+0x1fa>
   8b1ce:	f04f 0e01 	mov.w	lr, #1
   8b1d2:	109a      	asrs	r2, r3, #2
   8b1d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8b1d8:	fa0e f202 	lsl.w	r2, lr, r2
   8b1dc:	431a      	orrs	r2, r3
   8b1de:	f8c8 2004 	str.w	r2, [r8, #4]
   8b1e2:	e76d      	b.n	8b0c0 <_malloc_r+0x32c>
   8b1e4:	eb02 010b 	add.w	r1, r2, fp
   8b1e8:	4249      	negs	r1, r1
   8b1ea:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8b1ee:	4649      	mov	r1, r9
   8b1f0:	4630      	mov	r0, r6
   8b1f2:	9200      	str	r2, [sp, #0]
   8b1f4:	f000 feec 	bl	8bfd0 <_sbrk_r>
   8b1f8:	1c43      	adds	r3, r0, #1
   8b1fa:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b1fe:	f47f aefc 	bne.w	8affa <_malloc_r+0x266>
   8b202:	46d1      	mov	r9, sl
   8b204:	e6fc      	b.n	8b000 <_malloc_r+0x26c>
   8b206:	2b54      	cmp	r3, #84	; 0x54
   8b208:	d826      	bhi.n	8b258 <_malloc_r+0x4c4>
   8b20a:	0b13      	lsrs	r3, r2, #12
   8b20c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8b210:	00c9      	lsls	r1, r1, #3
   8b212:	336e      	adds	r3, #110	; 0x6e
   8b214:	e741      	b.n	8b09a <_malloc_r+0x306>
   8b216:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b21a:	d826      	bhi.n	8b26a <_malloc_r+0x4d6>
   8b21c:	0beb      	lsrs	r3, r5, #15
   8b21e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8b222:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8b226:	00c1      	lsls	r1, r0, #3
   8b228:	e5fa      	b.n	8ae20 <_malloc_r+0x8c>
   8b22a:	4b1a      	ldr	r3, [pc, #104]	; (8b294 <_malloc_r+0x500>)
   8b22c:	6818      	ldr	r0, [r3, #0]
   8b22e:	4458      	add	r0, fp
   8b230:	6018      	str	r0, [r3, #0]
   8b232:	e6be      	b.n	8afb2 <_malloc_r+0x21e>
   8b234:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8b238:	f1bc 0f00 	cmp.w	ip, #0
   8b23c:	f47f aeb9 	bne.w	8afb2 <_malloc_r+0x21e>
   8b240:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b244:	44bb      	add	fp, r7
   8b246:	f04b 0001 	orr.w	r0, fp, #1
   8b24a:	6060      	str	r0, [r4, #4]
   8b24c:	e6f9      	b.n	8b042 <_malloc_r+0x2ae>
   8b24e:	4614      	mov	r4, r2
   8b250:	e6f7      	b.n	8b042 <_malloc_r+0x2ae>
   8b252:	2301      	movs	r3, #1
   8b254:	6053      	str	r3, [r2, #4]
   8b256:	e78f      	b.n	8b178 <_malloc_r+0x3e4>
   8b258:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b25c:	d832      	bhi.n	8b2c4 <_malloc_r+0x530>
   8b25e:	0bd3      	lsrs	r3, r2, #15
   8b260:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8b264:	00c9      	lsls	r1, r1, #3
   8b266:	3377      	adds	r3, #119	; 0x77
   8b268:	e717      	b.n	8b09a <_malloc_r+0x306>
   8b26a:	f240 5254 	movw	r2, #1364	; 0x554
   8b26e:	4293      	cmp	r3, r2
   8b270:	d832      	bhi.n	8b2d8 <_malloc_r+0x544>
   8b272:	0cab      	lsrs	r3, r5, #18
   8b274:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8b278:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8b27c:	00c1      	lsls	r1, r0, #3
   8b27e:	e5cf      	b.n	8ae20 <_malloc_r+0x8c>
   8b280:	f1aa 0a08 	sub.w	sl, sl, #8
   8b284:	44d3      	add	fp, sl
   8b286:	f04f 0900 	mov.w	r9, #0
   8b28a:	ebab 0b02 	sub.w	fp, fp, r2
   8b28e:	e6b7      	b.n	8b000 <_malloc_r+0x26c>
   8b290:	200013ac 	.word	0x200013ac
   8b294:	2000137c 	.word	0x2000137c
   8b298:	200013a4 	.word	0x200013a4
   8b29c:	200013a8 	.word	0x200013a8
   8b2a0:	200009d8 	.word	0x200009d8
   8b2a4:	200009e0 	.word	0x200009e0
   8b2a8:	20000de0 	.word	0x20000de0
   8b2ac:	f104 0108 	add.w	r1, r4, #8
   8b2b0:	4630      	mov	r0, r6
   8b2b2:	9300      	str	r3, [sp, #0]
   8b2b4:	f7ff fa44 	bl	8a740 <_free_r>
   8b2b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b2bc:	9b00      	ldr	r3, [sp, #0]
   8b2be:	6860      	ldr	r0, [r4, #4]
   8b2c0:	6819      	ldr	r1, [r3, #0]
   8b2c2:	e6be      	b.n	8b042 <_malloc_r+0x2ae>
   8b2c4:	f240 5154 	movw	r1, #1364	; 0x554
   8b2c8:	428b      	cmp	r3, r1
   8b2ca:	d80a      	bhi.n	8b2e2 <_malloc_r+0x54e>
   8b2cc:	0c93      	lsrs	r3, r2, #18
   8b2ce:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8b2d2:	00c9      	lsls	r1, r1, #3
   8b2d4:	337c      	adds	r3, #124	; 0x7c
   8b2d6:	e6e0      	b.n	8b09a <_malloc_r+0x306>
   8b2d8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b2dc:	207f      	movs	r0, #127	; 0x7f
   8b2de:	277e      	movs	r7, #126	; 0x7e
   8b2e0:	e59e      	b.n	8ae20 <_malloc_r+0x8c>
   8b2e2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b2e6:	237e      	movs	r3, #126	; 0x7e
   8b2e8:	e6d7      	b.n	8b09a <_malloc_r+0x306>
   8b2ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8b2ee:	e75e      	b.n	8b1ae <_malloc_r+0x41a>

0008b2f0 <__ascii_mbtowc>:
   8b2f0:	b082      	sub	sp, #8
   8b2f2:	b149      	cbz	r1, 8b308 <__ascii_mbtowc+0x18>
   8b2f4:	b15a      	cbz	r2, 8b30e <__ascii_mbtowc+0x1e>
   8b2f6:	b16b      	cbz	r3, 8b314 <__ascii_mbtowc+0x24>
   8b2f8:	7813      	ldrb	r3, [r2, #0]
   8b2fa:	600b      	str	r3, [r1, #0]
   8b2fc:	7812      	ldrb	r2, [r2, #0]
   8b2fe:	1e10      	subs	r0, r2, #0
   8b300:	bf18      	it	ne
   8b302:	2001      	movne	r0, #1
   8b304:	b002      	add	sp, #8
   8b306:	4770      	bx	lr
   8b308:	a901      	add	r1, sp, #4
   8b30a:	2a00      	cmp	r2, #0
   8b30c:	d1f3      	bne.n	8b2f6 <__ascii_mbtowc+0x6>
   8b30e:	4610      	mov	r0, r2
   8b310:	b002      	add	sp, #8
   8b312:	4770      	bx	lr
   8b314:	f06f 0001 	mvn.w	r0, #1
   8b318:	e7f4      	b.n	8b304 <__ascii_mbtowc+0x14>
   8b31a:	bf00      	nop

0008b31c <memchr>:
   8b31c:	b470      	push	{r4, r5, r6}
   8b31e:	0784      	lsls	r4, r0, #30
   8b320:	b2cd      	uxtb	r5, r1
   8b322:	d012      	beq.n	8b34a <memchr+0x2e>
   8b324:	4603      	mov	r3, r0
   8b326:	1e54      	subs	r4, r2, #1
   8b328:	b92a      	cbnz	r2, 8b336 <memchr+0x1a>
   8b32a:	e00b      	b.n	8b344 <memchr+0x28>
   8b32c:	079a      	lsls	r2, r3, #30
   8b32e:	4618      	mov	r0, r3
   8b330:	d00c      	beq.n	8b34c <memchr+0x30>
   8b332:	3c01      	subs	r4, #1
   8b334:	d306      	bcc.n	8b344 <memchr+0x28>
   8b336:	4618      	mov	r0, r3
   8b338:	f813 2b01 	ldrb.w	r2, [r3], #1
   8b33c:	42aa      	cmp	r2, r5
   8b33e:	d1f5      	bne.n	8b32c <memchr+0x10>
   8b340:	bc70      	pop	{r4, r5, r6}
   8b342:	4770      	bx	lr
   8b344:	2000      	movs	r0, #0
   8b346:	bc70      	pop	{r4, r5, r6}
   8b348:	4770      	bx	lr
   8b34a:	4614      	mov	r4, r2
   8b34c:	2c03      	cmp	r4, #3
   8b34e:	d80d      	bhi.n	8b36c <memchr+0x50>
   8b350:	2c00      	cmp	r4, #0
   8b352:	d0f7      	beq.n	8b344 <memchr+0x28>
   8b354:	4602      	mov	r2, r0
   8b356:	1903      	adds	r3, r0, r4
   8b358:	e001      	b.n	8b35e <memchr+0x42>
   8b35a:	429a      	cmp	r2, r3
   8b35c:	d0f2      	beq.n	8b344 <memchr+0x28>
   8b35e:	4610      	mov	r0, r2
   8b360:	f812 1b01 	ldrb.w	r1, [r2], #1
   8b364:	42a9      	cmp	r1, r5
   8b366:	d1f8      	bne.n	8b35a <memchr+0x3e>
   8b368:	bc70      	pop	{r4, r5, r6}
   8b36a:	4770      	bx	lr
   8b36c:	4606      	mov	r6, r0
   8b36e:	020a      	lsls	r2, r1, #8
   8b370:	b292      	uxth	r2, r2
   8b372:	432a      	orrs	r2, r5
   8b374:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8b378:	6833      	ldr	r3, [r6, #0]
   8b37a:	4630      	mov	r0, r6
   8b37c:	4053      	eors	r3, r2
   8b37e:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8b382:	ea21 0303 	bic.w	r3, r1, r3
   8b386:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8b38a:	f106 0604 	add.w	r6, r6, #4
   8b38e:	d1e1      	bne.n	8b354 <memchr+0x38>
   8b390:	3c04      	subs	r4, #4
   8b392:	2c03      	cmp	r4, #3
   8b394:	4630      	mov	r0, r6
   8b396:	d8ef      	bhi.n	8b378 <memchr+0x5c>
   8b398:	e7da      	b.n	8b350 <memchr+0x34>
   8b39a:	bf00      	nop

0008b39c <memmove>:
   8b39c:	4288      	cmp	r0, r1
   8b39e:	b4f0      	push	{r4, r5, r6, r7}
   8b3a0:	d90d      	bls.n	8b3be <memmove+0x22>
   8b3a2:	188b      	adds	r3, r1, r2
   8b3a4:	4283      	cmp	r3, r0
   8b3a6:	d90a      	bls.n	8b3be <memmove+0x22>
   8b3a8:	1884      	adds	r4, r0, r2
   8b3aa:	b132      	cbz	r2, 8b3ba <memmove+0x1e>
   8b3ac:	4622      	mov	r2, r4
   8b3ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8b3b2:	4299      	cmp	r1, r3
   8b3b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8b3b8:	d1f9      	bne.n	8b3ae <memmove+0x12>
   8b3ba:	bcf0      	pop	{r4, r5, r6, r7}
   8b3bc:	4770      	bx	lr
   8b3be:	2a0f      	cmp	r2, #15
   8b3c0:	d80e      	bhi.n	8b3e0 <memmove+0x44>
   8b3c2:	4603      	mov	r3, r0
   8b3c4:	1e54      	subs	r4, r2, #1
   8b3c6:	2a00      	cmp	r2, #0
   8b3c8:	d0f7      	beq.n	8b3ba <memmove+0x1e>
   8b3ca:	3401      	adds	r4, #1
   8b3cc:	440c      	add	r4, r1
   8b3ce:	3b01      	subs	r3, #1
   8b3d0:	f811 2b01 	ldrb.w	r2, [r1], #1
   8b3d4:	42a1      	cmp	r1, r4
   8b3d6:	f803 2f01 	strb.w	r2, [r3, #1]!
   8b3da:	d1f9      	bne.n	8b3d0 <memmove+0x34>
   8b3dc:	bcf0      	pop	{r4, r5, r6, r7}
   8b3de:	4770      	bx	lr
   8b3e0:	ea40 0301 	orr.w	r3, r0, r1
   8b3e4:	079b      	lsls	r3, r3, #30
   8b3e6:	d13e      	bne.n	8b466 <memmove+0xca>
   8b3e8:	f1a2 0310 	sub.w	r3, r2, #16
   8b3ec:	f023 040f 	bic.w	r4, r3, #15
   8b3f0:	f101 0720 	add.w	r7, r1, #32
   8b3f4:	4427      	add	r7, r4
   8b3f6:	091b      	lsrs	r3, r3, #4
   8b3f8:	f101 0410 	add.w	r4, r1, #16
   8b3fc:	f100 0510 	add.w	r5, r0, #16
   8b400:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8b404:	3410      	adds	r4, #16
   8b406:	f845 6c10 	str.w	r6, [r5, #-16]
   8b40a:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8b40e:	3510      	adds	r5, #16
   8b410:	f845 6c1c 	str.w	r6, [r5, #-28]
   8b414:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8b418:	f845 6c18 	str.w	r6, [r5, #-24]
   8b41c:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8b420:	42bc      	cmp	r4, r7
   8b422:	f845 6c14 	str.w	r6, [r5, #-20]
   8b426:	d1eb      	bne.n	8b400 <memmove+0x64>
   8b428:	3301      	adds	r3, #1
   8b42a:	f012 0f0c 	tst.w	r2, #12
   8b42e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8b432:	f002 040f 	and.w	r4, r2, #15
   8b436:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8b43a:	d017      	beq.n	8b46c <memmove+0xd0>
   8b43c:	460e      	mov	r6, r1
   8b43e:	3c04      	subs	r4, #4
   8b440:	f024 0c03 	bic.w	ip, r4, #3
   8b444:	08a5      	lsrs	r5, r4, #2
   8b446:	449c      	add	ip, r3
   8b448:	1f1c      	subs	r4, r3, #4
   8b44a:	f856 7b04 	ldr.w	r7, [r6], #4
   8b44e:	f844 7f04 	str.w	r7, [r4, #4]!
   8b452:	4564      	cmp	r4, ip
   8b454:	d1f9      	bne.n	8b44a <memmove+0xae>
   8b456:	1c6c      	adds	r4, r5, #1
   8b458:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8b45c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8b460:	f002 0203 	and.w	r2, r2, #3
   8b464:	e7ae      	b.n	8b3c4 <memmove+0x28>
   8b466:	4603      	mov	r3, r0
   8b468:	1e54      	subs	r4, r2, #1
   8b46a:	e7ae      	b.n	8b3ca <memmove+0x2e>
   8b46c:	4622      	mov	r2, r4
   8b46e:	e7a9      	b.n	8b3c4 <memmove+0x28>

0008b470 <__malloc_lock>:
   8b470:	4801      	ldr	r0, [pc, #4]	; (8b478 <__malloc_lock+0x8>)
   8b472:	f7ff bc13 	b.w	8ac9c <__retarget_lock_acquire_recursive>
   8b476:	bf00      	nop
   8b478:	2000184c 	.word	0x2000184c

0008b47c <__malloc_unlock>:
   8b47c:	4801      	ldr	r0, [pc, #4]	; (8b484 <__malloc_unlock+0x8>)
   8b47e:	f7ff bc0f 	b.w	8aca0 <__retarget_lock_release_recursive>
   8b482:	bf00      	nop
   8b484:	2000184c 	.word	0x2000184c

0008b488 <_Balloc>:
   8b488:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b48a:	b570      	push	{r4, r5, r6, lr}
   8b48c:	4605      	mov	r5, r0
   8b48e:	460c      	mov	r4, r1
   8b490:	b14b      	cbz	r3, 8b4a6 <_Balloc+0x1e>
   8b492:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8b496:	b180      	cbz	r0, 8b4ba <_Balloc+0x32>
   8b498:	6802      	ldr	r2, [r0, #0]
   8b49a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8b49e:	2300      	movs	r3, #0
   8b4a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8b4a4:	bd70      	pop	{r4, r5, r6, pc}
   8b4a6:	2221      	movs	r2, #33	; 0x21
   8b4a8:	2104      	movs	r1, #4
   8b4aa:	f000 ffc5 	bl	8c438 <_calloc_r>
   8b4ae:	4603      	mov	r3, r0
   8b4b0:	64e8      	str	r0, [r5, #76]	; 0x4c
   8b4b2:	2800      	cmp	r0, #0
   8b4b4:	d1ed      	bne.n	8b492 <_Balloc+0xa>
   8b4b6:	2000      	movs	r0, #0
   8b4b8:	bd70      	pop	{r4, r5, r6, pc}
   8b4ba:	2101      	movs	r1, #1
   8b4bc:	fa01 f604 	lsl.w	r6, r1, r4
   8b4c0:	1d72      	adds	r2, r6, #5
   8b4c2:	4628      	mov	r0, r5
   8b4c4:	0092      	lsls	r2, r2, #2
   8b4c6:	f000 ffb7 	bl	8c438 <_calloc_r>
   8b4ca:	2800      	cmp	r0, #0
   8b4cc:	d0f3      	beq.n	8b4b6 <_Balloc+0x2e>
   8b4ce:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8b4d2:	e7e4      	b.n	8b49e <_Balloc+0x16>

0008b4d4 <_Bfree>:
   8b4d4:	b131      	cbz	r1, 8b4e4 <_Bfree+0x10>
   8b4d6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b4d8:	684a      	ldr	r2, [r1, #4]
   8b4da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8b4de:	6008      	str	r0, [r1, #0]
   8b4e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8b4e4:	4770      	bx	lr
   8b4e6:	bf00      	nop

0008b4e8 <__multadd>:
   8b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b4ec:	4680      	mov	r8, r0
   8b4ee:	461c      	mov	r4, r3
   8b4f0:	2000      	movs	r0, #0
   8b4f2:	460f      	mov	r7, r1
   8b4f4:	690e      	ldr	r6, [r1, #16]
   8b4f6:	3114      	adds	r1, #20
   8b4f8:	680d      	ldr	r5, [r1, #0]
   8b4fa:	3001      	adds	r0, #1
   8b4fc:	b2ab      	uxth	r3, r5
   8b4fe:	fb02 4303 	mla	r3, r2, r3, r4
   8b502:	0c2c      	lsrs	r4, r5, #16
   8b504:	0c1d      	lsrs	r5, r3, #16
   8b506:	fb02 5404 	mla	r4, r2, r4, r5
   8b50a:	b29b      	uxth	r3, r3
   8b50c:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8b510:	4286      	cmp	r6, r0
   8b512:	f841 3b04 	str.w	r3, [r1], #4
   8b516:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8b51a:	dced      	bgt.n	8b4f8 <__multadd+0x10>
   8b51c:	b13c      	cbz	r4, 8b52e <__multadd+0x46>
   8b51e:	68bb      	ldr	r3, [r7, #8]
   8b520:	42b3      	cmp	r3, r6
   8b522:	dd07      	ble.n	8b534 <__multadd+0x4c>
   8b524:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b528:	3601      	adds	r6, #1
   8b52a:	615c      	str	r4, [r3, #20]
   8b52c:	613e      	str	r6, [r7, #16]
   8b52e:	4638      	mov	r0, r7
   8b530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b534:	6879      	ldr	r1, [r7, #4]
   8b536:	4640      	mov	r0, r8
   8b538:	3101      	adds	r1, #1
   8b53a:	f7ff ffa5 	bl	8b488 <_Balloc>
   8b53e:	4605      	mov	r5, r0
   8b540:	b1b0      	cbz	r0, 8b570 <__multadd+0x88>
   8b542:	693a      	ldr	r2, [r7, #16]
   8b544:	f107 010c 	add.w	r1, r7, #12
   8b548:	3202      	adds	r2, #2
   8b54a:	0092      	lsls	r2, r2, #2
   8b54c:	300c      	adds	r0, #12
   8b54e:	f7fb f8cb 	bl	866e8 <memcpy>
   8b552:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b556:	687a      	ldr	r2, [r7, #4]
   8b558:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b55c:	6039      	str	r1, [r7, #0]
   8b55e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8b562:	462f      	mov	r7, r5
   8b564:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b568:	3601      	adds	r6, #1
   8b56a:	615c      	str	r4, [r3, #20]
   8b56c:	613e      	str	r6, [r7, #16]
   8b56e:	e7de      	b.n	8b52e <__multadd+0x46>
   8b570:	4602      	mov	r2, r0
   8b572:	21b5      	movs	r1, #181	; 0xb5
   8b574:	4b01      	ldr	r3, [pc, #4]	; (8b57c <__multadd+0x94>)
   8b576:	4802      	ldr	r0, [pc, #8]	; (8b580 <__multadd+0x98>)
   8b578:	f000 ff40 	bl	8c3fc <__assert_func>
   8b57c:	0008d478 	.word	0x0008d478
   8b580:	0008d518 	.word	0x0008d518

0008b584 <__hi0bits>:
   8b584:	0c02      	lsrs	r2, r0, #16
   8b586:	0412      	lsls	r2, r2, #16
   8b588:	4603      	mov	r3, r0
   8b58a:	b9ca      	cbnz	r2, 8b5c0 <__hi0bits+0x3c>
   8b58c:	0403      	lsls	r3, r0, #16
   8b58e:	2010      	movs	r0, #16
   8b590:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b594:	bf04      	itt	eq
   8b596:	021b      	lsleq	r3, r3, #8
   8b598:	3008      	addeq	r0, #8
   8b59a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b59e:	bf04      	itt	eq
   8b5a0:	011b      	lsleq	r3, r3, #4
   8b5a2:	3004      	addeq	r0, #4
   8b5a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b5a8:	bf04      	itt	eq
   8b5aa:	009b      	lsleq	r3, r3, #2
   8b5ac:	3002      	addeq	r0, #2
   8b5ae:	2b00      	cmp	r3, #0
   8b5b0:	db05      	blt.n	8b5be <__hi0bits+0x3a>
   8b5b2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8b5b6:	f100 0001 	add.w	r0, r0, #1
   8b5ba:	bf08      	it	eq
   8b5bc:	2020      	moveq	r0, #32
   8b5be:	4770      	bx	lr
   8b5c0:	2000      	movs	r0, #0
   8b5c2:	e7e5      	b.n	8b590 <__hi0bits+0xc>

0008b5c4 <__lo0bits>:
   8b5c4:	6803      	ldr	r3, [r0, #0]
   8b5c6:	4601      	mov	r1, r0
   8b5c8:	f013 0207 	ands.w	r2, r3, #7
   8b5cc:	d007      	beq.n	8b5de <__lo0bits+0x1a>
   8b5ce:	07da      	lsls	r2, r3, #31
   8b5d0:	d420      	bmi.n	8b614 <__lo0bits+0x50>
   8b5d2:	0798      	lsls	r0, r3, #30
   8b5d4:	d522      	bpl.n	8b61c <__lo0bits+0x58>
   8b5d6:	085b      	lsrs	r3, r3, #1
   8b5d8:	2001      	movs	r0, #1
   8b5da:	600b      	str	r3, [r1, #0]
   8b5dc:	4770      	bx	lr
   8b5de:	b298      	uxth	r0, r3
   8b5e0:	b1a8      	cbz	r0, 8b60e <__lo0bits+0x4a>
   8b5e2:	4610      	mov	r0, r2
   8b5e4:	f013 0fff 	tst.w	r3, #255	; 0xff
   8b5e8:	bf04      	itt	eq
   8b5ea:	0a1b      	lsreq	r3, r3, #8
   8b5ec:	3008      	addeq	r0, #8
   8b5ee:	071a      	lsls	r2, r3, #28
   8b5f0:	bf04      	itt	eq
   8b5f2:	091b      	lsreq	r3, r3, #4
   8b5f4:	3004      	addeq	r0, #4
   8b5f6:	079a      	lsls	r2, r3, #30
   8b5f8:	bf04      	itt	eq
   8b5fa:	089b      	lsreq	r3, r3, #2
   8b5fc:	3002      	addeq	r0, #2
   8b5fe:	07da      	lsls	r2, r3, #31
   8b600:	d403      	bmi.n	8b60a <__lo0bits+0x46>
   8b602:	085b      	lsrs	r3, r3, #1
   8b604:	f100 0001 	add.w	r0, r0, #1
   8b608:	d006      	beq.n	8b618 <__lo0bits+0x54>
   8b60a:	600b      	str	r3, [r1, #0]
   8b60c:	4770      	bx	lr
   8b60e:	2010      	movs	r0, #16
   8b610:	0c1b      	lsrs	r3, r3, #16
   8b612:	e7e7      	b.n	8b5e4 <__lo0bits+0x20>
   8b614:	2000      	movs	r0, #0
   8b616:	4770      	bx	lr
   8b618:	2020      	movs	r0, #32
   8b61a:	4770      	bx	lr
   8b61c:	089b      	lsrs	r3, r3, #2
   8b61e:	2002      	movs	r0, #2
   8b620:	600b      	str	r3, [r1, #0]
   8b622:	4770      	bx	lr

0008b624 <__i2b>:
   8b624:	b510      	push	{r4, lr}
   8b626:	460c      	mov	r4, r1
   8b628:	2101      	movs	r1, #1
   8b62a:	f7ff ff2d 	bl	8b488 <_Balloc>
   8b62e:	4602      	mov	r2, r0
   8b630:	b118      	cbz	r0, 8b63a <__i2b+0x16>
   8b632:	2301      	movs	r3, #1
   8b634:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8b638:	bd10      	pop	{r4, pc}
   8b63a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8b63e:	4b02      	ldr	r3, [pc, #8]	; (8b648 <__i2b+0x24>)
   8b640:	4802      	ldr	r0, [pc, #8]	; (8b64c <__i2b+0x28>)
   8b642:	f000 fedb 	bl	8c3fc <__assert_func>
   8b646:	bf00      	nop
   8b648:	0008d478 	.word	0x0008d478
   8b64c:	0008d518 	.word	0x0008d518

0008b650 <__multiply>:
   8b650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b654:	690d      	ldr	r5, [r1, #16]
   8b656:	6917      	ldr	r7, [r2, #16]
   8b658:	460e      	mov	r6, r1
   8b65a:	42bd      	cmp	r5, r7
   8b65c:	4614      	mov	r4, r2
   8b65e:	b085      	sub	sp, #20
   8b660:	db05      	blt.n	8b66e <__multiply+0x1e>
   8b662:	463a      	mov	r2, r7
   8b664:	4623      	mov	r3, r4
   8b666:	462f      	mov	r7, r5
   8b668:	460c      	mov	r4, r1
   8b66a:	4615      	mov	r5, r2
   8b66c:	461e      	mov	r6, r3
   8b66e:	68a3      	ldr	r3, [r4, #8]
   8b670:	6861      	ldr	r1, [r4, #4]
   8b672:	eb07 0805 	add.w	r8, r7, r5
   8b676:	4543      	cmp	r3, r8
   8b678:	bfb8      	it	lt
   8b67a:	3101      	addlt	r1, #1
   8b67c:	f7ff ff04 	bl	8b488 <_Balloc>
   8b680:	9001      	str	r0, [sp, #4]
   8b682:	2800      	cmp	r0, #0
   8b684:	f000 8088 	beq.w	8b798 <__multiply+0x148>
   8b688:	9b01      	ldr	r3, [sp, #4]
   8b68a:	f103 0914 	add.w	r9, r3, #20
   8b68e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8b692:	45d1      	cmp	r9, sl
   8b694:	d205      	bcs.n	8b6a2 <__multiply+0x52>
   8b696:	464b      	mov	r3, r9
   8b698:	2200      	movs	r2, #0
   8b69a:	f843 2b04 	str.w	r2, [r3], #4
   8b69e:	459a      	cmp	sl, r3
   8b6a0:	d8fb      	bhi.n	8b69a <__multiply+0x4a>
   8b6a2:	f106 0e14 	add.w	lr, r6, #20
   8b6a6:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8b6aa:	f104 0314 	add.w	r3, r4, #20
   8b6ae:	45de      	cmp	lr, fp
   8b6b0:	461a      	mov	r2, r3
   8b6b2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8b6b6:	d23e      	bcs.n	8b736 <__multiply+0xe6>
   8b6b8:	1b3b      	subs	r3, r7, r4
   8b6ba:	3b15      	subs	r3, #21
   8b6bc:	f023 0303 	bic.w	r3, r3, #3
   8b6c0:	3304      	adds	r3, #4
   8b6c2:	3415      	adds	r4, #21
   8b6c4:	42a7      	cmp	r7, r4
   8b6c6:	bf38      	it	cc
   8b6c8:	2304      	movcc	r3, #4
   8b6ca:	e9cd a802 	strd	sl, r8, [sp, #8]
   8b6ce:	4698      	mov	r8, r3
   8b6d0:	4692      	mov	sl, r2
   8b6d2:	e003      	b.n	8b6dc <__multiply+0x8c>
   8b6d4:	45f3      	cmp	fp, lr
   8b6d6:	f109 0904 	add.w	r9, r9, #4
   8b6da:	d92a      	bls.n	8b732 <__multiply+0xe2>
   8b6dc:	f85e 0b04 	ldr.w	r0, [lr], #4
   8b6e0:	b286      	uxth	r6, r0
   8b6e2:	2e00      	cmp	r6, #0
   8b6e4:	d138      	bne.n	8b758 <__multiply+0x108>
   8b6e6:	0c00      	lsrs	r0, r0, #16
   8b6e8:	d0f4      	beq.n	8b6d4 <__multiply+0x84>
   8b6ea:	f8d9 3000 	ldr.w	r3, [r9]
   8b6ee:	4654      	mov	r4, sl
   8b6f0:	461e      	mov	r6, r3
   8b6f2:	464d      	mov	r5, r9
   8b6f4:	f04f 0c00 	mov.w	ip, #0
   8b6f8:	8822      	ldrh	r2, [r4, #0]
   8b6fa:	0c36      	lsrs	r6, r6, #16
   8b6fc:	fb00 6602 	mla	r6, r0, r2, r6
   8b700:	b29b      	uxth	r3, r3
   8b702:	44b4      	add	ip, r6
   8b704:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8b708:	f845 3b04 	str.w	r3, [r5], #4
   8b70c:	f854 3b04 	ldr.w	r3, [r4], #4
   8b710:	682e      	ldr	r6, [r5, #0]
   8b712:	0c1b      	lsrs	r3, r3, #16
   8b714:	b2b2      	uxth	r2, r6
   8b716:	fb00 2303 	mla	r3, r0, r3, r2
   8b71a:	42a7      	cmp	r7, r4
   8b71c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8b720:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8b724:	d8e8      	bhi.n	8b6f8 <__multiply+0xa8>
   8b726:	45f3      	cmp	fp, lr
   8b728:	f849 3008 	str.w	r3, [r9, r8]
   8b72c:	f109 0904 	add.w	r9, r9, #4
   8b730:	d8d4      	bhi.n	8b6dc <__multiply+0x8c>
   8b732:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8b736:	f1b8 0f00 	cmp.w	r8, #0
   8b73a:	dc03      	bgt.n	8b744 <__multiply+0xf4>
   8b73c:	e006      	b.n	8b74c <__multiply+0xfc>
   8b73e:	f1b8 0801 	subs.w	r8, r8, #1
   8b742:	d003      	beq.n	8b74c <__multiply+0xfc>
   8b744:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8b748:	2b00      	cmp	r3, #0
   8b74a:	d0f8      	beq.n	8b73e <__multiply+0xee>
   8b74c:	9801      	ldr	r0, [sp, #4]
   8b74e:	f8c0 8010 	str.w	r8, [r0, #16]
   8b752:	b005      	add	sp, #20
   8b754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b758:	4655      	mov	r5, sl
   8b75a:	464c      	mov	r4, r9
   8b75c:	2300      	movs	r3, #0
   8b75e:	f855 1b04 	ldr.w	r1, [r5], #4
   8b762:	6820      	ldr	r0, [r4, #0]
   8b764:	b28a      	uxth	r2, r1
   8b766:	fa1f fc80 	uxth.w	ip, r0
   8b76a:	fb06 c202 	mla	r2, r6, r2, ip
   8b76e:	0c09      	lsrs	r1, r1, #16
   8b770:	0c00      	lsrs	r0, r0, #16
   8b772:	fb06 0101 	mla	r1, r6, r1, r0
   8b776:	4413      	add	r3, r2
   8b778:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8b77c:	b29b      	uxth	r3, r3
   8b77e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b782:	42af      	cmp	r7, r5
   8b784:	f844 3b04 	str.w	r3, [r4], #4
   8b788:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8b78c:	d8e7      	bhi.n	8b75e <__multiply+0x10e>
   8b78e:	f849 3008 	str.w	r3, [r9, r8]
   8b792:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8b796:	e7a6      	b.n	8b6e6 <__multiply+0x96>
   8b798:	4602      	mov	r2, r0
   8b79a:	f240 115d 	movw	r1, #349	; 0x15d
   8b79e:	4b02      	ldr	r3, [pc, #8]	; (8b7a8 <__multiply+0x158>)
   8b7a0:	4802      	ldr	r0, [pc, #8]	; (8b7ac <__multiply+0x15c>)
   8b7a2:	f000 fe2b 	bl	8c3fc <__assert_func>
   8b7a6:	bf00      	nop
   8b7a8:	0008d478 	.word	0x0008d478
   8b7ac:	0008d518 	.word	0x0008d518

0008b7b0 <__pow5mult>:
   8b7b0:	f012 0303 	ands.w	r3, r2, #3
   8b7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b7b8:	4614      	mov	r4, r2
   8b7ba:	4607      	mov	r7, r0
   8b7bc:	d12e      	bne.n	8b81c <__pow5mult+0x6c>
   8b7be:	460e      	mov	r6, r1
   8b7c0:	10a4      	asrs	r4, r4, #2
   8b7c2:	d01c      	beq.n	8b7fe <__pow5mult+0x4e>
   8b7c4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8b7c6:	b395      	cbz	r5, 8b82e <__pow5mult+0x7e>
   8b7c8:	07e3      	lsls	r3, r4, #31
   8b7ca:	f04f 0800 	mov.w	r8, #0
   8b7ce:	d406      	bmi.n	8b7de <__pow5mult+0x2e>
   8b7d0:	1064      	asrs	r4, r4, #1
   8b7d2:	d014      	beq.n	8b7fe <__pow5mult+0x4e>
   8b7d4:	6828      	ldr	r0, [r5, #0]
   8b7d6:	b1a8      	cbz	r0, 8b804 <__pow5mult+0x54>
   8b7d8:	4605      	mov	r5, r0
   8b7da:	07e3      	lsls	r3, r4, #31
   8b7dc:	d5f8      	bpl.n	8b7d0 <__pow5mult+0x20>
   8b7de:	462a      	mov	r2, r5
   8b7e0:	4631      	mov	r1, r6
   8b7e2:	4638      	mov	r0, r7
   8b7e4:	f7ff ff34 	bl	8b650 <__multiply>
   8b7e8:	b1b6      	cbz	r6, 8b818 <__pow5mult+0x68>
   8b7ea:	6871      	ldr	r1, [r6, #4]
   8b7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b7ee:	1064      	asrs	r4, r4, #1
   8b7f0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8b7f4:	6032      	str	r2, [r6, #0]
   8b7f6:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8b7fa:	4606      	mov	r6, r0
   8b7fc:	d1ea      	bne.n	8b7d4 <__pow5mult+0x24>
   8b7fe:	4630      	mov	r0, r6
   8b800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b804:	462a      	mov	r2, r5
   8b806:	4629      	mov	r1, r5
   8b808:	4638      	mov	r0, r7
   8b80a:	f7ff ff21 	bl	8b650 <__multiply>
   8b80e:	6028      	str	r0, [r5, #0]
   8b810:	4605      	mov	r5, r0
   8b812:	f8c0 8000 	str.w	r8, [r0]
   8b816:	e7e0      	b.n	8b7da <__pow5mult+0x2a>
   8b818:	4606      	mov	r6, r0
   8b81a:	e7d9      	b.n	8b7d0 <__pow5mult+0x20>
   8b81c:	4a09      	ldr	r2, [pc, #36]	; (8b844 <__pow5mult+0x94>)
   8b81e:	3b01      	subs	r3, #1
   8b820:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b824:	2300      	movs	r3, #0
   8b826:	f7ff fe5f 	bl	8b4e8 <__multadd>
   8b82a:	4606      	mov	r6, r0
   8b82c:	e7c8      	b.n	8b7c0 <__pow5mult+0x10>
   8b82e:	f240 2171 	movw	r1, #625	; 0x271
   8b832:	4638      	mov	r0, r7
   8b834:	f7ff fef6 	bl	8b624 <__i2b>
   8b838:	2300      	movs	r3, #0
   8b83a:	64b8      	str	r0, [r7, #72]	; 0x48
   8b83c:	4605      	mov	r5, r0
   8b83e:	6003      	str	r3, [r0, #0]
   8b840:	e7c2      	b.n	8b7c8 <__pow5mult+0x18>
   8b842:	bf00      	nop
   8b844:	0008d688 	.word	0x0008d688

0008b848 <__lshift>:
   8b848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b84c:	690f      	ldr	r7, [r1, #16]
   8b84e:	688b      	ldr	r3, [r1, #8]
   8b850:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8b854:	1c7e      	adds	r6, r7, #1
   8b856:	429e      	cmp	r6, r3
   8b858:	460d      	mov	r5, r1
   8b85a:	4691      	mov	r9, r2
   8b85c:	4680      	mov	r8, r0
   8b85e:	6849      	ldr	r1, [r1, #4]
   8b860:	ea4f 1462 	mov.w	r4, r2, asr #5
   8b864:	dd04      	ble.n	8b870 <__lshift+0x28>
   8b866:	005b      	lsls	r3, r3, #1
   8b868:	429e      	cmp	r6, r3
   8b86a:	f101 0101 	add.w	r1, r1, #1
   8b86e:	dcfa      	bgt.n	8b866 <__lshift+0x1e>
   8b870:	4640      	mov	r0, r8
   8b872:	f7ff fe09 	bl	8b488 <_Balloc>
   8b876:	2800      	cmp	r0, #0
   8b878:	d04f      	beq.n	8b91a <__lshift+0xd2>
   8b87a:	2c00      	cmp	r4, #0
   8b87c:	f100 0114 	add.w	r1, r0, #20
   8b880:	dd0d      	ble.n	8b89e <__lshift+0x56>
   8b882:	460b      	mov	r3, r1
   8b884:	2200      	movs	r2, #0
   8b886:	3405      	adds	r4, #5
   8b888:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8b88c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8b890:	f843 2b04 	str.w	r2, [r3], #4
   8b894:	42a3      	cmp	r3, r4
   8b896:	d1fb      	bne.n	8b890 <__lshift+0x48>
   8b898:	f1ac 0314 	sub.w	r3, ip, #20
   8b89c:	4419      	add	r1, r3
   8b89e:	692c      	ldr	r4, [r5, #16]
   8b8a0:	f105 0314 	add.w	r3, r5, #20
   8b8a4:	f019 091f 	ands.w	r9, r9, #31
   8b8a8:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8b8ac:	d02d      	beq.n	8b90a <__lshift+0xc2>
   8b8ae:	468e      	mov	lr, r1
   8b8b0:	f04f 0a00 	mov.w	sl, #0
   8b8b4:	f1c9 0220 	rsb	r2, r9, #32
   8b8b8:	681c      	ldr	r4, [r3, #0]
   8b8ba:	fa04 f409 	lsl.w	r4, r4, r9
   8b8be:	ea44 040a 	orr.w	r4, r4, sl
   8b8c2:	f84e 4b04 	str.w	r4, [lr], #4
   8b8c6:	f853 4b04 	ldr.w	r4, [r3], #4
   8b8ca:	459c      	cmp	ip, r3
   8b8cc:	fa24 fa02 	lsr.w	sl, r4, r2
   8b8d0:	d8f2      	bhi.n	8b8b8 <__lshift+0x70>
   8b8d2:	ebac 0305 	sub.w	r3, ip, r5
   8b8d6:	3b15      	subs	r3, #21
   8b8d8:	f023 0303 	bic.w	r3, r3, #3
   8b8dc:	3304      	adds	r3, #4
   8b8de:	f105 0215 	add.w	r2, r5, #21
   8b8e2:	4594      	cmp	ip, r2
   8b8e4:	bf38      	it	cc
   8b8e6:	2304      	movcc	r3, #4
   8b8e8:	f1ba 0f00 	cmp.w	sl, #0
   8b8ec:	bf18      	it	ne
   8b8ee:	4637      	movne	r7, r6
   8b8f0:	f841 a003 	str.w	sl, [r1, r3]
   8b8f4:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b8f8:	686a      	ldr	r2, [r5, #4]
   8b8fa:	6107      	str	r7, [r0, #16]
   8b8fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b900:	6029      	str	r1, [r5, #0]
   8b902:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8b906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8b90a:	3904      	subs	r1, #4
   8b90c:	f853 2b04 	ldr.w	r2, [r3], #4
   8b910:	459c      	cmp	ip, r3
   8b912:	f841 2f04 	str.w	r2, [r1, #4]!
   8b916:	d8f9      	bhi.n	8b90c <__lshift+0xc4>
   8b918:	e7ec      	b.n	8b8f4 <__lshift+0xac>
   8b91a:	4602      	mov	r2, r0
   8b91c:	f240 11d9 	movw	r1, #473	; 0x1d9
   8b920:	4b01      	ldr	r3, [pc, #4]	; (8b928 <__lshift+0xe0>)
   8b922:	4802      	ldr	r0, [pc, #8]	; (8b92c <__lshift+0xe4>)
   8b924:	f000 fd6a 	bl	8c3fc <__assert_func>
   8b928:	0008d478 	.word	0x0008d478
   8b92c:	0008d518 	.word	0x0008d518

0008b930 <__mcmp>:
   8b930:	b430      	push	{r4, r5}
   8b932:	690b      	ldr	r3, [r1, #16]
   8b934:	4605      	mov	r5, r0
   8b936:	6900      	ldr	r0, [r0, #16]
   8b938:	1ac0      	subs	r0, r0, r3
   8b93a:	d111      	bne.n	8b960 <__mcmp+0x30>
   8b93c:	3514      	adds	r5, #20
   8b93e:	3114      	adds	r1, #20
   8b940:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8b944:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8b948:	e001      	b.n	8b94e <__mcmp+0x1e>
   8b94a:	429d      	cmp	r5, r3
   8b94c:	d208      	bcs.n	8b960 <__mcmp+0x30>
   8b94e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8b952:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b956:	428c      	cmp	r4, r1
   8b958:	d0f7      	beq.n	8b94a <__mcmp+0x1a>
   8b95a:	d203      	bcs.n	8b964 <__mcmp+0x34>
   8b95c:	f04f 30ff 	mov.w	r0, #4294967295
   8b960:	bc30      	pop	{r4, r5}
   8b962:	4770      	bx	lr
   8b964:	2001      	movs	r0, #1
   8b966:	bc30      	pop	{r4, r5}
   8b968:	4770      	bx	lr
   8b96a:	bf00      	nop

0008b96c <__mdiff>:
   8b96c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b970:	690b      	ldr	r3, [r1, #16]
   8b972:	460c      	mov	r4, r1
   8b974:	6911      	ldr	r1, [r2, #16]
   8b976:	4690      	mov	r8, r2
   8b978:	eba3 0b01 	sub.w	fp, r3, r1
   8b97c:	f1bb 0f00 	cmp.w	fp, #0
   8b980:	d17c      	bne.n	8ba7c <__mdiff+0x110>
   8b982:	f104 0614 	add.w	r6, r4, #20
   8b986:	3214      	adds	r2, #20
   8b988:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8b98c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8b990:	e001      	b.n	8b996 <__mdiff+0x2a>
   8b992:	429e      	cmp	r6, r3
   8b994:	d276      	bcs.n	8ba84 <__mdiff+0x118>
   8b996:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8b99a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8b99e:	428d      	cmp	r5, r1
   8b9a0:	d0f7      	beq.n	8b992 <__mdiff+0x26>
   8b9a2:	d365      	bcc.n	8ba70 <__mdiff+0x104>
   8b9a4:	6861      	ldr	r1, [r4, #4]
   8b9a6:	f7ff fd6f 	bl	8b488 <_Balloc>
   8b9aa:	2800      	cmp	r0, #0
   8b9ac:	d074      	beq.n	8ba98 <__mdiff+0x12c>
   8b9ae:	f100 0614 	add.w	r6, r0, #20
   8b9b2:	46b4      	mov	ip, r6
   8b9b4:	2300      	movs	r3, #0
   8b9b6:	6927      	ldr	r7, [r4, #16]
   8b9b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8b9bc:	f104 0a14 	add.w	sl, r4, #20
   8b9c0:	f108 0514 	add.w	r5, r8, #20
   8b9c4:	f8c0 b00c 	str.w	fp, [r0, #12]
   8b9c8:	3410      	adds	r4, #16
   8b9ca:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8b9ce:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8b9d2:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8b9d6:	f855 bb04 	ldr.w	fp, [r5], #4
   8b9da:	b291      	uxth	r1, r2
   8b9dc:	440b      	add	r3, r1
   8b9de:	fa1f f18b 	uxth.w	r1, fp
   8b9e2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8b9e6:	1a59      	subs	r1, r3, r1
   8b9e8:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8b9ec:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8b9f0:	b289      	uxth	r1, r1
   8b9f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8b9f6:	45a9      	cmp	r9, r5
   8b9f8:	f84c 1b04 	str.w	r1, [ip], #4
   8b9fc:	ea4f 4323 	mov.w	r3, r3, asr #16
   8ba00:	d8e7      	bhi.n	8b9d2 <__mdiff+0x66>
   8ba02:	eba9 0208 	sub.w	r2, r9, r8
   8ba06:	3a15      	subs	r2, #21
   8ba08:	f108 0815 	add.w	r8, r8, #21
   8ba0c:	45c1      	cmp	r9, r8
   8ba0e:	f022 0403 	bic.w	r4, r2, #3
   8ba12:	f104 0404 	add.w	r4, r4, #4
   8ba16:	bf38      	it	cc
   8ba18:	2404      	movcc	r4, #4
   8ba1a:	f022 0203 	bic.w	r2, r2, #3
   8ba1e:	bf38      	it	cc
   8ba20:	2200      	movcc	r2, #0
   8ba22:	44a2      	add	sl, r4
   8ba24:	45d6      	cmp	lr, sl
   8ba26:	4434      	add	r4, r6
   8ba28:	4416      	add	r6, r2
   8ba2a:	d918      	bls.n	8ba5e <__mdiff+0xf2>
   8ba2c:	4625      	mov	r5, r4
   8ba2e:	4652      	mov	r2, sl
   8ba30:	f852 6b04 	ldr.w	r6, [r2], #4
   8ba34:	b2b1      	uxth	r1, r6
   8ba36:	4419      	add	r1, r3
   8ba38:	140b      	asrs	r3, r1, #16
   8ba3a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8ba3e:	b289      	uxth	r1, r1
   8ba40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8ba44:	4596      	cmp	lr, r2
   8ba46:	f845 1b04 	str.w	r1, [r5], #4
   8ba4a:	ea4f 4323 	mov.w	r3, r3, asr #16
   8ba4e:	d8ef      	bhi.n	8ba30 <__mdiff+0xc4>
   8ba50:	f10e 36ff 	add.w	r6, lr, #4294967295
   8ba54:	eba6 060a 	sub.w	r6, r6, sl
   8ba58:	f026 0603 	bic.w	r6, r6, #3
   8ba5c:	4426      	add	r6, r4
   8ba5e:	b921      	cbnz	r1, 8ba6a <__mdiff+0xfe>
   8ba60:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8ba64:	3f01      	subs	r7, #1
   8ba66:	2b00      	cmp	r3, #0
   8ba68:	d0fa      	beq.n	8ba60 <__mdiff+0xf4>
   8ba6a:	6107      	str	r7, [r0, #16]
   8ba6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ba70:	4623      	mov	r3, r4
   8ba72:	f04f 0b01 	mov.w	fp, #1
   8ba76:	4644      	mov	r4, r8
   8ba78:	4698      	mov	r8, r3
   8ba7a:	e793      	b.n	8b9a4 <__mdiff+0x38>
   8ba7c:	dbf8      	blt.n	8ba70 <__mdiff+0x104>
   8ba7e:	f04f 0b00 	mov.w	fp, #0
   8ba82:	e78f      	b.n	8b9a4 <__mdiff+0x38>
   8ba84:	2100      	movs	r1, #0
   8ba86:	f7ff fcff 	bl	8b488 <_Balloc>
   8ba8a:	b160      	cbz	r0, 8baa6 <__mdiff+0x13a>
   8ba8c:	2201      	movs	r2, #1
   8ba8e:	2300      	movs	r3, #0
   8ba90:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8ba94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ba98:	4602      	mov	r2, r0
   8ba9a:	f44f 7110 	mov.w	r1, #576	; 0x240
   8ba9e:	4b05      	ldr	r3, [pc, #20]	; (8bab4 <__mdiff+0x148>)
   8baa0:	4805      	ldr	r0, [pc, #20]	; (8bab8 <__mdiff+0x14c>)
   8baa2:	f000 fcab 	bl	8c3fc <__assert_func>
   8baa6:	4602      	mov	r2, r0
   8baa8:	f240 2132 	movw	r1, #562	; 0x232
   8baac:	4b01      	ldr	r3, [pc, #4]	; (8bab4 <__mdiff+0x148>)
   8baae:	4802      	ldr	r0, [pc, #8]	; (8bab8 <__mdiff+0x14c>)
   8bab0:	f000 fca4 	bl	8c3fc <__assert_func>
   8bab4:	0008d478 	.word	0x0008d478
   8bab8:	0008d518 	.word	0x0008d518

0008babc <__d2b>:
   8babc:	b570      	push	{r4, r5, r6, lr}
   8babe:	2101      	movs	r1, #1
   8bac0:	b082      	sub	sp, #8
   8bac2:	4616      	mov	r6, r2
   8bac4:	461d      	mov	r5, r3
   8bac6:	f7ff fcdf 	bl	8b488 <_Balloc>
   8baca:	4604      	mov	r4, r0
   8bacc:	2800      	cmp	r0, #0
   8bace:	d04c      	beq.n	8bb6a <__d2b+0xae>
   8bad0:	462b      	mov	r3, r5
   8bad2:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8bad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8bada:	b10d      	cbz	r5, 8bae0 <__d2b+0x24>
   8badc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8bae0:	2e00      	cmp	r6, #0
   8bae2:	9301      	str	r3, [sp, #4]
   8bae4:	d022      	beq.n	8bb2c <__d2b+0x70>
   8bae6:	4668      	mov	r0, sp
   8bae8:	9600      	str	r6, [sp, #0]
   8baea:	f7ff fd6b 	bl	8b5c4 <__lo0bits>
   8baee:	2800      	cmp	r0, #0
   8baf0:	d037      	beq.n	8bb62 <__d2b+0xa6>
   8baf2:	9b01      	ldr	r3, [sp, #4]
   8baf4:	9900      	ldr	r1, [sp, #0]
   8baf6:	f1c0 0220 	rsb	r2, r0, #32
   8bafa:	fa03 f202 	lsl.w	r2, r3, r2
   8bafe:	430a      	orrs	r2, r1
   8bb00:	40c3      	lsrs	r3, r0
   8bb02:	9301      	str	r3, [sp, #4]
   8bb04:	6162      	str	r2, [r4, #20]
   8bb06:	2b00      	cmp	r3, #0
   8bb08:	bf14      	ite	ne
   8bb0a:	2102      	movne	r1, #2
   8bb0c:	2101      	moveq	r1, #1
   8bb0e:	61a3      	str	r3, [r4, #24]
   8bb10:	6121      	str	r1, [r4, #16]
   8bb12:	b1b5      	cbz	r5, 8bb42 <__d2b+0x86>
   8bb14:	9a06      	ldr	r2, [sp, #24]
   8bb16:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8bb1a:	4403      	add	r3, r0
   8bb1c:	6013      	str	r3, [r2, #0]
   8bb1e:	9b07      	ldr	r3, [sp, #28]
   8bb20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8bb24:	6018      	str	r0, [r3, #0]
   8bb26:	4620      	mov	r0, r4
   8bb28:	b002      	add	sp, #8
   8bb2a:	bd70      	pop	{r4, r5, r6, pc}
   8bb2c:	a801      	add	r0, sp, #4
   8bb2e:	f7ff fd49 	bl	8b5c4 <__lo0bits>
   8bb32:	2301      	movs	r3, #1
   8bb34:	9a01      	ldr	r2, [sp, #4]
   8bb36:	4619      	mov	r1, r3
   8bb38:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8bb3c:	3020      	adds	r0, #32
   8bb3e:	2d00      	cmp	r5, #0
   8bb40:	d1e8      	bne.n	8bb14 <__d2b+0x58>
   8bb42:	9a06      	ldr	r2, [sp, #24]
   8bb44:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8bb48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8bb4c:	6010      	str	r0, [r2, #0]
   8bb4e:	6918      	ldr	r0, [r3, #16]
   8bb50:	f7ff fd18 	bl	8b584 <__hi0bits>
   8bb54:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8bb58:	4620      	mov	r0, r4
   8bb5a:	9b07      	ldr	r3, [sp, #28]
   8bb5c:	6019      	str	r1, [r3, #0]
   8bb5e:	b002      	add	sp, #8
   8bb60:	bd70      	pop	{r4, r5, r6, pc}
   8bb62:	e9dd 2300 	ldrd	r2, r3, [sp]
   8bb66:	6162      	str	r2, [r4, #20]
   8bb68:	e7cd      	b.n	8bb06 <__d2b+0x4a>
   8bb6a:	4602      	mov	r2, r0
   8bb6c:	f240 310a 	movw	r1, #778	; 0x30a
   8bb70:	4b01      	ldr	r3, [pc, #4]	; (8bb78 <__d2b+0xbc>)
   8bb72:	4802      	ldr	r0, [pc, #8]	; (8bb7c <__d2b+0xc0>)
   8bb74:	f000 fc42 	bl	8c3fc <__assert_func>
   8bb78:	0008d478 	.word	0x0008d478
   8bb7c:	0008d518 	.word	0x0008d518

0008bb80 <_realloc_r>:
   8bb80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bb84:	4616      	mov	r6, r2
   8bb86:	2900      	cmp	r1, #0
   8bb88:	f000 80bd 	beq.w	8bd06 <_realloc_r+0x186>
   8bb8c:	f106 050b 	add.w	r5, r6, #11
   8bb90:	460c      	mov	r4, r1
   8bb92:	4680      	mov	r8, r0
   8bb94:	f7ff fc6c 	bl	8b470 <__malloc_lock>
   8bb98:	2d16      	cmp	r5, #22
   8bb9a:	d85f      	bhi.n	8bc5c <_realloc_r+0xdc>
   8bb9c:	2510      	movs	r5, #16
   8bb9e:	462a      	mov	r2, r5
   8bba0:	42ae      	cmp	r6, r5
   8bba2:	d860      	bhi.n	8bc66 <_realloc_r+0xe6>
   8bba4:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8bba8:	f1a4 0908 	sub.w	r9, r4, #8
   8bbac:	f021 0703 	bic.w	r7, r1, #3
   8bbb0:	4297      	cmp	r7, r2
   8bbb2:	f280 8086 	bge.w	8bcc2 <_realloc_r+0x142>
   8bbb6:	4bc9      	ldr	r3, [pc, #804]	; (8bedc <_realloc_r+0x35c>)
   8bbb8:	eb09 0007 	add.w	r0, r9, r7
   8bbbc:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8bbc0:	4584      	cmp	ip, r0
   8bbc2:	f000 80b9 	beq.w	8bd38 <_realloc_r+0x1b8>
   8bbc6:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8bbca:	f02c 0301 	bic.w	r3, ip, #1
   8bbce:	4403      	add	r3, r0
   8bbd0:	685b      	ldr	r3, [r3, #4]
   8bbd2:	07db      	lsls	r3, r3, #31
   8bbd4:	f100 808c 	bmi.w	8bcf0 <_realloc_r+0x170>
   8bbd8:	f02c 0c03 	bic.w	ip, ip, #3
   8bbdc:	eb07 030c 	add.w	r3, r7, ip
   8bbe0:	4293      	cmp	r3, r2
   8bbe2:	f280 8115 	bge.w	8be10 <_realloc_r+0x290>
   8bbe6:	07cb      	lsls	r3, r1, #31
   8bbe8:	d40f      	bmi.n	8bc0a <_realloc_r+0x8a>
   8bbea:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8bbee:	eba9 0a03 	sub.w	sl, r9, r3
   8bbf2:	f8da 3004 	ldr.w	r3, [sl, #4]
   8bbf6:	f023 0103 	bic.w	r1, r3, #3
   8bbfa:	448c      	add	ip, r1
   8bbfc:	44bc      	add	ip, r7
   8bbfe:	4594      	cmp	ip, r2
   8bc00:	da38      	bge.n	8bc74 <_realloc_r+0xf4>
   8bc02:	187b      	adds	r3, r7, r1
   8bc04:	4293      	cmp	r3, r2
   8bc06:	f280 810f 	bge.w	8be28 <_realloc_r+0x2a8>
   8bc0a:	4631      	mov	r1, r6
   8bc0c:	4640      	mov	r0, r8
   8bc0e:	f7ff f8c1 	bl	8ad94 <_malloc_r>
   8bc12:	4606      	mov	r6, r0
   8bc14:	b1e0      	cbz	r0, 8bc50 <_realloc_r+0xd0>
   8bc16:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8bc1a:	f1a0 0208 	sub.w	r2, r0, #8
   8bc1e:	f023 0301 	bic.w	r3, r3, #1
   8bc22:	444b      	add	r3, r9
   8bc24:	4293      	cmp	r3, r2
   8bc26:	f000 80f9 	beq.w	8be1c <_realloc_r+0x29c>
   8bc2a:	1f3a      	subs	r2, r7, #4
   8bc2c:	2a24      	cmp	r2, #36	; 0x24
   8bc2e:	f200 811c 	bhi.w	8be6a <_realloc_r+0x2ea>
   8bc32:	2a13      	cmp	r2, #19
   8bc34:	f200 80cd 	bhi.w	8bdd2 <_realloc_r+0x252>
   8bc38:	4603      	mov	r3, r0
   8bc3a:	4622      	mov	r2, r4
   8bc3c:	6811      	ldr	r1, [r2, #0]
   8bc3e:	6019      	str	r1, [r3, #0]
   8bc40:	6851      	ldr	r1, [r2, #4]
   8bc42:	6059      	str	r1, [r3, #4]
   8bc44:	6892      	ldr	r2, [r2, #8]
   8bc46:	609a      	str	r2, [r3, #8]
   8bc48:	4621      	mov	r1, r4
   8bc4a:	4640      	mov	r0, r8
   8bc4c:	f7fe fd78 	bl	8a740 <_free_r>
   8bc50:	4640      	mov	r0, r8
   8bc52:	f7ff fc13 	bl	8b47c <__malloc_unlock>
   8bc56:	4630      	mov	r0, r6
   8bc58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bc5c:	f025 0507 	bic.w	r5, r5, #7
   8bc60:	2d00      	cmp	r5, #0
   8bc62:	462a      	mov	r2, r5
   8bc64:	da9c      	bge.n	8bba0 <_realloc_r+0x20>
   8bc66:	230c      	movs	r3, #12
   8bc68:	2600      	movs	r6, #0
   8bc6a:	f8c8 3000 	str.w	r3, [r8]
   8bc6e:	4630      	mov	r0, r6
   8bc70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bc74:	4656      	mov	r6, sl
   8bc76:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8bc7a:	60cb      	str	r3, [r1, #12]
   8bc7c:	6099      	str	r1, [r3, #8]
   8bc7e:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8bc82:	f8da 300c 	ldr.w	r3, [sl, #12]
   8bc86:	1f3a      	subs	r2, r7, #4
   8bc88:	2a24      	cmp	r2, #36	; 0x24
   8bc8a:	60cb      	str	r3, [r1, #12]
   8bc8c:	6099      	str	r1, [r3, #8]
   8bc8e:	f200 8107 	bhi.w	8bea0 <_realloc_r+0x320>
   8bc92:	2a13      	cmp	r2, #19
   8bc94:	f240 8102 	bls.w	8be9c <_realloc_r+0x31c>
   8bc98:	6823      	ldr	r3, [r4, #0]
   8bc9a:	2a1b      	cmp	r2, #27
   8bc9c:	f8ca 3008 	str.w	r3, [sl, #8]
   8bca0:	6863      	ldr	r3, [r4, #4]
   8bca2:	f8ca 300c 	str.w	r3, [sl, #12]
   8bca6:	f200 811b 	bhi.w	8bee0 <_realloc_r+0x360>
   8bcaa:	3408      	adds	r4, #8
   8bcac:	f10a 0310 	add.w	r3, sl, #16
   8bcb0:	6822      	ldr	r2, [r4, #0]
   8bcb2:	4667      	mov	r7, ip
   8bcb4:	601a      	str	r2, [r3, #0]
   8bcb6:	6862      	ldr	r2, [r4, #4]
   8bcb8:	46d1      	mov	r9, sl
   8bcba:	605a      	str	r2, [r3, #4]
   8bcbc:	68a2      	ldr	r2, [r4, #8]
   8bcbe:	4634      	mov	r4, r6
   8bcc0:	609a      	str	r2, [r3, #8]
   8bcc2:	1b7b      	subs	r3, r7, r5
   8bcc4:	2b0f      	cmp	r3, #15
   8bcc6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8bcca:	d821      	bhi.n	8bd10 <_realloc_r+0x190>
   8bccc:	f002 0201 	and.w	r2, r2, #1
   8bcd0:	433a      	orrs	r2, r7
   8bcd2:	eb09 0107 	add.w	r1, r9, r7
   8bcd6:	f8c9 2004 	str.w	r2, [r9, #4]
   8bcda:	684b      	ldr	r3, [r1, #4]
   8bcdc:	f043 0301 	orr.w	r3, r3, #1
   8bce0:	604b      	str	r3, [r1, #4]
   8bce2:	4626      	mov	r6, r4
   8bce4:	4640      	mov	r0, r8
   8bce6:	f7ff fbc9 	bl	8b47c <__malloc_unlock>
   8bcea:	4630      	mov	r0, r6
   8bcec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bcf0:	07c9      	lsls	r1, r1, #31
   8bcf2:	d48a      	bmi.n	8bc0a <_realloc_r+0x8a>
   8bcf4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8bcf8:	eba9 0a03 	sub.w	sl, r9, r3
   8bcfc:	f8da 1004 	ldr.w	r1, [sl, #4]
   8bd00:	f021 0103 	bic.w	r1, r1, #3
   8bd04:	e77d      	b.n	8bc02 <_realloc_r+0x82>
   8bd06:	4611      	mov	r1, r2
   8bd08:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bd0c:	f7ff b842 	b.w	8ad94 <_malloc_r>
   8bd10:	f002 0201 	and.w	r2, r2, #1
   8bd14:	eb09 0105 	add.w	r1, r9, r5
   8bd18:	f043 0301 	orr.w	r3, r3, #1
   8bd1c:	432a      	orrs	r2, r5
   8bd1e:	f8c9 2004 	str.w	r2, [r9, #4]
   8bd22:	444f      	add	r7, r9
   8bd24:	604b      	str	r3, [r1, #4]
   8bd26:	687b      	ldr	r3, [r7, #4]
   8bd28:	4640      	mov	r0, r8
   8bd2a:	f043 0301 	orr.w	r3, r3, #1
   8bd2e:	3108      	adds	r1, #8
   8bd30:	607b      	str	r3, [r7, #4]
   8bd32:	f7fe fd05 	bl	8a740 <_free_r>
   8bd36:	e7d4      	b.n	8bce2 <_realloc_r+0x162>
   8bd38:	f8dc b004 	ldr.w	fp, [ip, #4]
   8bd3c:	f105 0010 	add.w	r0, r5, #16
   8bd40:	f02b 0b03 	bic.w	fp, fp, #3
   8bd44:	eb07 0c0b 	add.w	ip, r7, fp
   8bd48:	4584      	cmp	ip, r0
   8bd4a:	da4d      	bge.n	8bde8 <_realloc_r+0x268>
   8bd4c:	07c9      	lsls	r1, r1, #31
   8bd4e:	f53f af5c 	bmi.w	8bc0a <_realloc_r+0x8a>
   8bd52:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8bd56:	eba9 0a01 	sub.w	sl, r9, r1
   8bd5a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8bd5e:	f021 0103 	bic.w	r1, r1, #3
   8bd62:	448b      	add	fp, r1
   8bd64:	44bb      	add	fp, r7
   8bd66:	4558      	cmp	r0, fp
   8bd68:	f73f af4b 	bgt.w	8bc02 <_realloc_r+0x82>
   8bd6c:	4656      	mov	r6, sl
   8bd6e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8bd72:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8bd76:	1f3a      	subs	r2, r7, #4
   8bd78:	2a24      	cmp	r2, #36	; 0x24
   8bd7a:	60c1      	str	r1, [r0, #12]
   8bd7c:	6088      	str	r0, [r1, #8]
   8bd7e:	f200 80bd 	bhi.w	8befc <_realloc_r+0x37c>
   8bd82:	2a13      	cmp	r2, #19
   8bd84:	f240 80b8 	bls.w	8bef8 <_realloc_r+0x378>
   8bd88:	6821      	ldr	r1, [r4, #0]
   8bd8a:	2a1b      	cmp	r2, #27
   8bd8c:	f8ca 1008 	str.w	r1, [sl, #8]
   8bd90:	6861      	ldr	r1, [r4, #4]
   8bd92:	f8ca 100c 	str.w	r1, [sl, #12]
   8bd96:	f200 80c1 	bhi.w	8bf1c <_realloc_r+0x39c>
   8bd9a:	3408      	adds	r4, #8
   8bd9c:	f10a 0210 	add.w	r2, sl, #16
   8bda0:	6821      	ldr	r1, [r4, #0]
   8bda2:	6011      	str	r1, [r2, #0]
   8bda4:	6861      	ldr	r1, [r4, #4]
   8bda6:	6051      	str	r1, [r2, #4]
   8bda8:	68a1      	ldr	r1, [r4, #8]
   8bdaa:	6091      	str	r1, [r2, #8]
   8bdac:	ebab 0205 	sub.w	r2, fp, r5
   8bdb0:	eb0a 0105 	add.w	r1, sl, r5
   8bdb4:	f042 0201 	orr.w	r2, r2, #1
   8bdb8:	6099      	str	r1, [r3, #8]
   8bdba:	604a      	str	r2, [r1, #4]
   8bdbc:	f8da 3004 	ldr.w	r3, [sl, #4]
   8bdc0:	4640      	mov	r0, r8
   8bdc2:	f003 0301 	and.w	r3, r3, #1
   8bdc6:	431d      	orrs	r5, r3
   8bdc8:	f8ca 5004 	str.w	r5, [sl, #4]
   8bdcc:	f7ff fb56 	bl	8b47c <__malloc_unlock>
   8bdd0:	e74d      	b.n	8bc6e <_realloc_r+0xee>
   8bdd2:	6823      	ldr	r3, [r4, #0]
   8bdd4:	2a1b      	cmp	r2, #27
   8bdd6:	6003      	str	r3, [r0, #0]
   8bdd8:	6863      	ldr	r3, [r4, #4]
   8bdda:	6043      	str	r3, [r0, #4]
   8bddc:	d849      	bhi.n	8be72 <_realloc_r+0x2f2>
   8bdde:	f104 0208 	add.w	r2, r4, #8
   8bde2:	f100 0308 	add.w	r3, r0, #8
   8bde6:	e729      	b.n	8bc3c <_realloc_r+0xbc>
   8bde8:	ebac 0205 	sub.w	r2, ip, r5
   8bdec:	eb09 0105 	add.w	r1, r9, r5
   8bdf0:	f042 0201 	orr.w	r2, r2, #1
   8bdf4:	6099      	str	r1, [r3, #8]
   8bdf6:	604a      	str	r2, [r1, #4]
   8bdf8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8bdfc:	4640      	mov	r0, r8
   8bdfe:	f003 0301 	and.w	r3, r3, #1
   8be02:	431d      	orrs	r5, r3
   8be04:	f844 5c04 	str.w	r5, [r4, #-4]
   8be08:	f7ff fb38 	bl	8b47c <__malloc_unlock>
   8be0c:	4626      	mov	r6, r4
   8be0e:	e72e      	b.n	8bc6e <_realloc_r+0xee>
   8be10:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8be14:	461f      	mov	r7, r3
   8be16:	60ca      	str	r2, [r1, #12]
   8be18:	6091      	str	r1, [r2, #8]
   8be1a:	e752      	b.n	8bcc2 <_realloc_r+0x142>
   8be1c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8be20:	f023 0303 	bic.w	r3, r3, #3
   8be24:	441f      	add	r7, r3
   8be26:	e74c      	b.n	8bcc2 <_realloc_r+0x142>
   8be28:	4656      	mov	r6, sl
   8be2a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8be2e:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8be32:	1f3a      	subs	r2, r7, #4
   8be34:	2a24      	cmp	r2, #36	; 0x24
   8be36:	60c1      	str	r1, [r0, #12]
   8be38:	6088      	str	r0, [r1, #8]
   8be3a:	d827      	bhi.n	8be8c <_realloc_r+0x30c>
   8be3c:	2a13      	cmp	r2, #19
   8be3e:	d923      	bls.n	8be88 <_realloc_r+0x308>
   8be40:	6821      	ldr	r1, [r4, #0]
   8be42:	2a1b      	cmp	r2, #27
   8be44:	f8ca 1008 	str.w	r1, [sl, #8]
   8be48:	6861      	ldr	r1, [r4, #4]
   8be4a:	f8ca 100c 	str.w	r1, [sl, #12]
   8be4e:	d82f      	bhi.n	8beb0 <_realloc_r+0x330>
   8be50:	3408      	adds	r4, #8
   8be52:	f10a 0210 	add.w	r2, sl, #16
   8be56:	6821      	ldr	r1, [r4, #0]
   8be58:	461f      	mov	r7, r3
   8be5a:	6011      	str	r1, [r2, #0]
   8be5c:	6863      	ldr	r3, [r4, #4]
   8be5e:	46d1      	mov	r9, sl
   8be60:	6053      	str	r3, [r2, #4]
   8be62:	68a3      	ldr	r3, [r4, #8]
   8be64:	4634      	mov	r4, r6
   8be66:	6093      	str	r3, [r2, #8]
   8be68:	e72b      	b.n	8bcc2 <_realloc_r+0x142>
   8be6a:	4621      	mov	r1, r4
   8be6c:	f7ff fa96 	bl	8b39c <memmove>
   8be70:	e6ea      	b.n	8bc48 <_realloc_r+0xc8>
   8be72:	68a3      	ldr	r3, [r4, #8]
   8be74:	2a24      	cmp	r2, #36	; 0x24
   8be76:	6083      	str	r3, [r0, #8]
   8be78:	68e3      	ldr	r3, [r4, #12]
   8be7a:	60c3      	str	r3, [r0, #12]
   8be7c:	d024      	beq.n	8bec8 <_realloc_r+0x348>
   8be7e:	f104 0210 	add.w	r2, r4, #16
   8be82:	f100 0310 	add.w	r3, r0, #16
   8be86:	e6d9      	b.n	8bc3c <_realloc_r+0xbc>
   8be88:	4632      	mov	r2, r6
   8be8a:	e7e4      	b.n	8be56 <_realloc_r+0x2d6>
   8be8c:	4621      	mov	r1, r4
   8be8e:	4630      	mov	r0, r6
   8be90:	461f      	mov	r7, r3
   8be92:	46d1      	mov	r9, sl
   8be94:	f7ff fa82 	bl	8b39c <memmove>
   8be98:	4634      	mov	r4, r6
   8be9a:	e712      	b.n	8bcc2 <_realloc_r+0x142>
   8be9c:	4633      	mov	r3, r6
   8be9e:	e707      	b.n	8bcb0 <_realloc_r+0x130>
   8bea0:	4621      	mov	r1, r4
   8bea2:	4630      	mov	r0, r6
   8bea4:	4667      	mov	r7, ip
   8bea6:	46d1      	mov	r9, sl
   8bea8:	f7ff fa78 	bl	8b39c <memmove>
   8beac:	4634      	mov	r4, r6
   8beae:	e708      	b.n	8bcc2 <_realloc_r+0x142>
   8beb0:	68a1      	ldr	r1, [r4, #8]
   8beb2:	2a24      	cmp	r2, #36	; 0x24
   8beb4:	f8ca 1010 	str.w	r1, [sl, #16]
   8beb8:	68e1      	ldr	r1, [r4, #12]
   8beba:	f8ca 1014 	str.w	r1, [sl, #20]
   8bebe:	d023      	beq.n	8bf08 <_realloc_r+0x388>
   8bec0:	3410      	adds	r4, #16
   8bec2:	f10a 0218 	add.w	r2, sl, #24
   8bec6:	e7c6      	b.n	8be56 <_realloc_r+0x2d6>
   8bec8:	6923      	ldr	r3, [r4, #16]
   8beca:	f104 0218 	add.w	r2, r4, #24
   8bece:	6103      	str	r3, [r0, #16]
   8bed0:	6961      	ldr	r1, [r4, #20]
   8bed2:	f100 0318 	add.w	r3, r0, #24
   8bed6:	6141      	str	r1, [r0, #20]
   8bed8:	e6b0      	b.n	8bc3c <_realloc_r+0xbc>
   8beda:	bf00      	nop
   8bedc:	200009d8 	.word	0x200009d8
   8bee0:	68a3      	ldr	r3, [r4, #8]
   8bee2:	2a24      	cmp	r2, #36	; 0x24
   8bee4:	f8ca 3010 	str.w	r3, [sl, #16]
   8bee8:	68e3      	ldr	r3, [r4, #12]
   8beea:	f8ca 3014 	str.w	r3, [sl, #20]
   8beee:	d021      	beq.n	8bf34 <_realloc_r+0x3b4>
   8bef0:	3410      	adds	r4, #16
   8bef2:	f10a 0318 	add.w	r3, sl, #24
   8bef6:	e6db      	b.n	8bcb0 <_realloc_r+0x130>
   8bef8:	4632      	mov	r2, r6
   8befa:	e751      	b.n	8bda0 <_realloc_r+0x220>
   8befc:	4621      	mov	r1, r4
   8befe:	4630      	mov	r0, r6
   8bf00:	f7ff fa4c 	bl	8b39c <memmove>
   8bf04:	4b15      	ldr	r3, [pc, #84]	; (8bf5c <_realloc_r+0x3dc>)
   8bf06:	e751      	b.n	8bdac <_realloc_r+0x22c>
   8bf08:	6921      	ldr	r1, [r4, #16]
   8bf0a:	f10a 0220 	add.w	r2, sl, #32
   8bf0e:	f8ca 1018 	str.w	r1, [sl, #24]
   8bf12:	6961      	ldr	r1, [r4, #20]
   8bf14:	3418      	adds	r4, #24
   8bf16:	f8ca 101c 	str.w	r1, [sl, #28]
   8bf1a:	e79c      	b.n	8be56 <_realloc_r+0x2d6>
   8bf1c:	68a1      	ldr	r1, [r4, #8]
   8bf1e:	2a24      	cmp	r2, #36	; 0x24
   8bf20:	f8ca 1010 	str.w	r1, [sl, #16]
   8bf24:	68e1      	ldr	r1, [r4, #12]
   8bf26:	f8ca 1014 	str.w	r1, [sl, #20]
   8bf2a:	d00d      	beq.n	8bf48 <_realloc_r+0x3c8>
   8bf2c:	3410      	adds	r4, #16
   8bf2e:	f10a 0218 	add.w	r2, sl, #24
   8bf32:	e735      	b.n	8bda0 <_realloc_r+0x220>
   8bf34:	6922      	ldr	r2, [r4, #16]
   8bf36:	f10a 0320 	add.w	r3, sl, #32
   8bf3a:	f8ca 2018 	str.w	r2, [sl, #24]
   8bf3e:	6962      	ldr	r2, [r4, #20]
   8bf40:	3418      	adds	r4, #24
   8bf42:	f8ca 201c 	str.w	r2, [sl, #28]
   8bf46:	e6b3      	b.n	8bcb0 <_realloc_r+0x130>
   8bf48:	6921      	ldr	r1, [r4, #16]
   8bf4a:	f10a 0220 	add.w	r2, sl, #32
   8bf4e:	f8ca 1018 	str.w	r1, [sl, #24]
   8bf52:	6961      	ldr	r1, [r4, #20]
   8bf54:	3418      	adds	r4, #24
   8bf56:	f8ca 101c 	str.w	r1, [sl, #28]
   8bf5a:	e721      	b.n	8bda0 <_realloc_r+0x220>
   8bf5c:	200009d8 	.word	0x200009d8

0008bf60 <frexp>:
   8bf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bf62:	4617      	mov	r7, r2
   8bf64:	2200      	movs	r2, #0
   8bf66:	f8df c060 	ldr.w	ip, [pc, #96]	; 8bfc8 <frexp+0x68>
   8bf6a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8bf6e:	4563      	cmp	r3, ip
   8bf70:	4604      	mov	r4, r0
   8bf72:	460d      	mov	r5, r1
   8bf74:	603a      	str	r2, [r7, #0]
   8bf76:	dc22      	bgt.n	8bfbe <frexp+0x5e>
   8bf78:	4684      	mov	ip, r0
   8bf7a:	ea53 0c0c 	orrs.w	ip, r3, ip
   8bf7e:	d01e      	beq.n	8bfbe <frexp+0x5e>
   8bf80:	f8df c048 	ldr.w	ip, [pc, #72]	; 8bfcc <frexp+0x6c>
   8bf84:	460e      	mov	r6, r1
   8bf86:	ea01 0c0c 	and.w	ip, r1, ip
   8bf8a:	f1bc 0f00 	cmp.w	ip, #0
   8bf8e:	d109      	bne.n	8bfa4 <frexp+0x44>
   8bf90:	2200      	movs	r2, #0
   8bf92:	4b0c      	ldr	r3, [pc, #48]	; (8bfc4 <frexp+0x64>)
   8bf94:	f000 fd70 	bl	8ca78 <__aeabi_dmul>
   8bf98:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8bf9c:	4604      	mov	r4, r0
   8bf9e:	460e      	mov	r6, r1
   8bfa0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8bfa4:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8bfa8:	151b      	asrs	r3, r3, #20
   8bfaa:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8bfae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8bfb2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8bfb6:	4413      	add	r3, r2
   8bfb8:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8bfbc:	603b      	str	r3, [r7, #0]
   8bfbe:	4620      	mov	r0, r4
   8bfc0:	4629      	mov	r1, r5
   8bfc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bfc4:	43500000 	.word	0x43500000
   8bfc8:	7fefffff 	.word	0x7fefffff
   8bfcc:	7ff00000 	.word	0x7ff00000

0008bfd0 <_sbrk_r>:
   8bfd0:	2200      	movs	r2, #0
   8bfd2:	b538      	push	{r3, r4, r5, lr}
   8bfd4:	4d06      	ldr	r5, [pc, #24]	; (8bff0 <_sbrk_r+0x20>)
   8bfd6:	4604      	mov	r4, r0
   8bfd8:	4608      	mov	r0, r1
   8bfda:	602a      	str	r2, [r5, #0]
   8bfdc:	f7fa f8ae 	bl	8613c <_sbrk>
   8bfe0:	1c43      	adds	r3, r0, #1
   8bfe2:	d000      	beq.n	8bfe6 <_sbrk_r+0x16>
   8bfe4:	bd38      	pop	{r3, r4, r5, pc}
   8bfe6:	682b      	ldr	r3, [r5, #0]
   8bfe8:	2b00      	cmp	r3, #0
   8bfea:	d0fb      	beq.n	8bfe4 <_sbrk_r+0x14>
   8bfec:	6023      	str	r3, [r4, #0]
   8bfee:	bd38      	pop	{r3, r4, r5, pc}
   8bff0:	20001860 	.word	0x20001860

0008bff4 <__sread>:
   8bff4:	b510      	push	{r4, lr}
   8bff6:	460c      	mov	r4, r1
   8bff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bffc:	f000 fb16 	bl	8c62c <_read_r>
   8c000:	2800      	cmp	r0, #0
   8c002:	db03      	blt.n	8c00c <__sread+0x18>
   8c004:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8c006:	4403      	add	r3, r0
   8c008:	6523      	str	r3, [r4, #80]	; 0x50
   8c00a:	bd10      	pop	{r4, pc}
   8c00c:	89a3      	ldrh	r3, [r4, #12]
   8c00e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8c012:	81a3      	strh	r3, [r4, #12]
   8c014:	bd10      	pop	{r4, pc}
   8c016:	bf00      	nop

0008c018 <__swrite>:
   8c018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c01c:	460c      	mov	r4, r1
   8c01e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8c022:	461f      	mov	r7, r3
   8c024:	05cb      	lsls	r3, r1, #23
   8c026:	4616      	mov	r6, r2
   8c028:	4605      	mov	r5, r0
   8c02a:	d40b      	bmi.n	8c044 <__swrite+0x2c>
   8c02c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8c030:	81a1      	strh	r1, [r4, #12]
   8c032:	463b      	mov	r3, r7
   8c034:	4632      	mov	r2, r6
   8c036:	4628      	mov	r0, r5
   8c038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c03c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8c040:	f000 b980 	b.w	8c344 <_write_r>
   8c044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c048:	2302      	movs	r3, #2
   8c04a:	2200      	movs	r2, #0
   8c04c:	f000 fad8 	bl	8c600 <_lseek_r>
   8c050:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8c054:	e7ea      	b.n	8c02c <__swrite+0x14>
   8c056:	bf00      	nop

0008c058 <__sseek>:
   8c058:	b510      	push	{r4, lr}
   8c05a:	460c      	mov	r4, r1
   8c05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c060:	f000 face 	bl	8c600 <_lseek_r>
   8c064:	89a3      	ldrh	r3, [r4, #12]
   8c066:	1c42      	adds	r2, r0, #1
   8c068:	bf0e      	itee	eq
   8c06a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8c06e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8c072:	6520      	strne	r0, [r4, #80]	; 0x50
   8c074:	81a3      	strh	r3, [r4, #12]
   8c076:	bd10      	pop	{r4, pc}

0008c078 <__sclose>:
   8c078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c07c:	f000 ba0c 	b.w	8c498 <_close_r>

0008c080 <strlen>:
   8c080:	f020 0103 	bic.w	r1, r0, #3
   8c084:	f010 0003 	ands.w	r0, r0, #3
   8c088:	f1c0 0000 	rsb	r0, r0, #0
   8c08c:	f851 3b04 	ldr.w	r3, [r1], #4
   8c090:	f100 0c04 	add.w	ip, r0, #4
   8c094:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8c098:	f06f 0200 	mvn.w	r2, #0
   8c09c:	bf1c      	itt	ne
   8c09e:	fa22 f20c 	lsrne.w	r2, r2, ip
   8c0a2:	4313      	orrne	r3, r2
   8c0a4:	f04f 0c01 	mov.w	ip, #1
   8c0a8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8c0ac:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8c0b0:	eba3 020c 	sub.w	r2, r3, ip
   8c0b4:	ea22 0203 	bic.w	r2, r2, r3
   8c0b8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8c0bc:	bf04      	itt	eq
   8c0be:	f851 3b04 	ldreq.w	r3, [r1], #4
   8c0c2:	3004      	addeq	r0, #4
   8c0c4:	d0f4      	beq.n	8c0b0 <strlen+0x30>
   8c0c6:	f1c2 0100 	rsb	r1, r2, #0
   8c0ca:	ea02 0201 	and.w	r2, r2, r1
   8c0ce:	fab2 f282 	clz	r2, r2
   8c0d2:	f1c2 021f 	rsb	r2, r2, #31
   8c0d6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8c0da:	4770      	bx	lr

0008c0dc <strncpy>:
   8c0dc:	b470      	push	{r4, r5, r6}
   8c0de:	ea40 0401 	orr.w	r4, r0, r1
   8c0e2:	07a3      	lsls	r3, r4, #30
   8c0e4:	d122      	bne.n	8c12c <strncpy+0x50>
   8c0e6:	2a03      	cmp	r2, #3
   8c0e8:	d920      	bls.n	8c12c <strncpy+0x50>
   8c0ea:	460b      	mov	r3, r1
   8c0ec:	4604      	mov	r4, r0
   8c0ee:	4619      	mov	r1, r3
   8c0f0:	f853 6b04 	ldr.w	r6, [r3], #4
   8c0f4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8c0f8:	ea25 0506 	bic.w	r5, r5, r6
   8c0fc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8c100:	d115      	bne.n	8c12e <strncpy+0x52>
   8c102:	3a04      	subs	r2, #4
   8c104:	2a03      	cmp	r2, #3
   8c106:	4619      	mov	r1, r3
   8c108:	f844 6b04 	str.w	r6, [r4], #4
   8c10c:	d8ef      	bhi.n	8c0ee <strncpy+0x12>
   8c10e:	1e4d      	subs	r5, r1, #1
   8c110:	b152      	cbz	r2, 8c128 <strncpy+0x4c>
   8c112:	4623      	mov	r3, r4
   8c114:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8c118:	1e56      	subs	r6, r2, #1
   8c11a:	f803 1b01 	strb.w	r1, [r3], #1
   8c11e:	b141      	cbz	r1, 8c132 <strncpy+0x56>
   8c120:	4632      	mov	r2, r6
   8c122:	461c      	mov	r4, r3
   8c124:	2a00      	cmp	r2, #0
   8c126:	d1f4      	bne.n	8c112 <strncpy+0x36>
   8c128:	bc70      	pop	{r4, r5, r6}
   8c12a:	4770      	bx	lr
   8c12c:	4604      	mov	r4, r0
   8c12e:	1e4d      	subs	r5, r1, #1
   8c130:	e7ee      	b.n	8c110 <strncpy+0x34>
   8c132:	4422      	add	r2, r4
   8c134:	2e00      	cmp	r6, #0
   8c136:	d0f7      	beq.n	8c128 <strncpy+0x4c>
   8c138:	f803 1b01 	strb.w	r1, [r3], #1
   8c13c:	4293      	cmp	r3, r2
   8c13e:	d1fb      	bne.n	8c138 <strncpy+0x5c>
   8c140:	bc70      	pop	{r4, r5, r6}
   8c142:	4770      	bx	lr

0008c144 <__ssprint_r>:
   8c144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c148:	6893      	ldr	r3, [r2, #8]
   8c14a:	4691      	mov	r9, r2
   8c14c:	b083      	sub	sp, #12
   8c14e:	2b00      	cmp	r3, #0
   8c150:	d06d      	beq.n	8c22e <__ssprint_r+0xea>
   8c152:	6817      	ldr	r7, [r2, #0]
   8c154:	4680      	mov	r8, r0
   8c156:	460c      	mov	r4, r1
   8c158:	6808      	ldr	r0, [r1, #0]
   8c15a:	688d      	ldr	r5, [r1, #8]
   8c15c:	3708      	adds	r7, #8
   8c15e:	e043      	b.n	8c1e8 <__ssprint_r+0xa4>
   8c160:	89a3      	ldrh	r3, [r4, #12]
   8c162:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8c166:	d02e      	beq.n	8c1c6 <__ssprint_r+0x82>
   8c168:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8c16c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8c170:	eba0 0a01 	sub.w	sl, r0, r1
   8c174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8c178:	eb0a 0006 	add.w	r0, sl, r6
   8c17c:	106d      	asrs	r5, r5, #1
   8c17e:	3001      	adds	r0, #1
   8c180:	42a8      	cmp	r0, r5
   8c182:	462a      	mov	r2, r5
   8c184:	bf84      	itt	hi
   8c186:	4605      	movhi	r5, r0
   8c188:	462a      	movhi	r2, r5
   8c18a:	055b      	lsls	r3, r3, #21
   8c18c:	d536      	bpl.n	8c1fc <__ssprint_r+0xb8>
   8c18e:	4611      	mov	r1, r2
   8c190:	4640      	mov	r0, r8
   8c192:	f7fe fdff 	bl	8ad94 <_malloc_r>
   8c196:	2800      	cmp	r0, #0
   8c198:	d03a      	beq.n	8c210 <__ssprint_r+0xcc>
   8c19a:	4652      	mov	r2, sl
   8c19c:	6921      	ldr	r1, [r4, #16]
   8c19e:	9001      	str	r0, [sp, #4]
   8c1a0:	f7fa faa2 	bl	866e8 <memcpy>
   8c1a4:	89a2      	ldrh	r2, [r4, #12]
   8c1a6:	9b01      	ldr	r3, [sp, #4]
   8c1a8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8c1ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8c1b0:	81a2      	strh	r2, [r4, #12]
   8c1b2:	eba5 020a 	sub.w	r2, r5, sl
   8c1b6:	eb03 000a 	add.w	r0, r3, sl
   8c1ba:	6165      	str	r5, [r4, #20]
   8c1bc:	46b2      	mov	sl, r6
   8c1be:	4635      	mov	r5, r6
   8c1c0:	6123      	str	r3, [r4, #16]
   8c1c2:	6020      	str	r0, [r4, #0]
   8c1c4:	60a2      	str	r2, [r4, #8]
   8c1c6:	4659      	mov	r1, fp
   8c1c8:	4652      	mov	r2, sl
   8c1ca:	f7ff f8e7 	bl	8b39c <memmove>
   8c1ce:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8c1d2:	68a1      	ldr	r1, [r4, #8]
   8c1d4:	6820      	ldr	r0, [r4, #0]
   8c1d6:	1b4d      	subs	r5, r1, r5
   8c1d8:	4450      	add	r0, sl
   8c1da:	1b9e      	subs	r6, r3, r6
   8c1dc:	60a5      	str	r5, [r4, #8]
   8c1de:	6020      	str	r0, [r4, #0]
   8c1e0:	f8c9 6008 	str.w	r6, [r9, #8]
   8c1e4:	b31e      	cbz	r6, 8c22e <__ssprint_r+0xea>
   8c1e6:	3708      	adds	r7, #8
   8c1e8:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8c1ec:	2e00      	cmp	r6, #0
   8c1ee:	d0fa      	beq.n	8c1e6 <__ssprint_r+0xa2>
   8c1f0:	42b5      	cmp	r5, r6
   8c1f2:	46aa      	mov	sl, r5
   8c1f4:	d9b4      	bls.n	8c160 <__ssprint_r+0x1c>
   8c1f6:	4635      	mov	r5, r6
   8c1f8:	46b2      	mov	sl, r6
   8c1fa:	e7e4      	b.n	8c1c6 <__ssprint_r+0x82>
   8c1fc:	4640      	mov	r0, r8
   8c1fe:	f7ff fcbf 	bl	8bb80 <_realloc_r>
   8c202:	4603      	mov	r3, r0
   8c204:	2800      	cmp	r0, #0
   8c206:	d1d4      	bne.n	8c1b2 <__ssprint_r+0x6e>
   8c208:	4640      	mov	r0, r8
   8c20a:	6921      	ldr	r1, [r4, #16]
   8c20c:	f7fe fa98 	bl	8a740 <_free_r>
   8c210:	230c      	movs	r3, #12
   8c212:	2200      	movs	r2, #0
   8c214:	f04f 30ff 	mov.w	r0, #4294967295
   8c218:	f8c8 3000 	str.w	r3, [r8]
   8c21c:	89a3      	ldrh	r3, [r4, #12]
   8c21e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c222:	81a3      	strh	r3, [r4, #12]
   8c224:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8c228:	b003      	add	sp, #12
   8c22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c22e:	2000      	movs	r0, #0
   8c230:	f8c9 0004 	str.w	r0, [r9, #4]
   8c234:	b003      	add	sp, #12
   8c236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c23a:	bf00      	nop

0008c23c <__swbuf_r>:
   8c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c23e:	460d      	mov	r5, r1
   8c240:	4614      	mov	r4, r2
   8c242:	4606      	mov	r6, r0
   8c244:	b110      	cbz	r0, 8c24c <__swbuf_r+0x10>
   8c246:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c248:	2b00      	cmp	r3, #0
   8c24a:	d043      	beq.n	8c2d4 <__swbuf_r+0x98>
   8c24c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c250:	69a3      	ldr	r3, [r4, #24]
   8c252:	0717      	lsls	r7, r2, #28
   8c254:	60a3      	str	r3, [r4, #8]
   8c256:	b290      	uxth	r0, r2
   8c258:	d51b      	bpl.n	8c292 <__swbuf_r+0x56>
   8c25a:	6923      	ldr	r3, [r4, #16]
   8c25c:	b1cb      	cbz	r3, 8c292 <__swbuf_r+0x56>
   8c25e:	b2ed      	uxtb	r5, r5
   8c260:	0481      	lsls	r1, r0, #18
   8c262:	462f      	mov	r7, r5
   8c264:	d522      	bpl.n	8c2ac <__swbuf_r+0x70>
   8c266:	6822      	ldr	r2, [r4, #0]
   8c268:	6961      	ldr	r1, [r4, #20]
   8c26a:	1ad3      	subs	r3, r2, r3
   8c26c:	4299      	cmp	r1, r3
   8c26e:	dd29      	ble.n	8c2c4 <__swbuf_r+0x88>
   8c270:	3301      	adds	r3, #1
   8c272:	68a1      	ldr	r1, [r4, #8]
   8c274:	1c50      	adds	r0, r2, #1
   8c276:	3901      	subs	r1, #1
   8c278:	60a1      	str	r1, [r4, #8]
   8c27a:	6020      	str	r0, [r4, #0]
   8c27c:	7015      	strb	r5, [r2, #0]
   8c27e:	6962      	ldr	r2, [r4, #20]
   8c280:	429a      	cmp	r2, r3
   8c282:	d02a      	beq.n	8c2da <__swbuf_r+0x9e>
   8c284:	89a3      	ldrh	r3, [r4, #12]
   8c286:	07db      	lsls	r3, r3, #31
   8c288:	d501      	bpl.n	8c28e <__swbuf_r+0x52>
   8c28a:	2d0a      	cmp	r5, #10
   8c28c:	d025      	beq.n	8c2da <__swbuf_r+0x9e>
   8c28e:	4638      	mov	r0, r7
   8c290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c292:	4621      	mov	r1, r4
   8c294:	4630      	mov	r0, r6
   8c296:	f7fc ffcd 	bl	89234 <__swsetup_r>
   8c29a:	bb20      	cbnz	r0, 8c2e6 <__swbuf_r+0xaa>
   8c29c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c2a0:	b2ed      	uxtb	r5, r5
   8c2a2:	b290      	uxth	r0, r2
   8c2a4:	0481      	lsls	r1, r0, #18
   8c2a6:	462f      	mov	r7, r5
   8c2a8:	6923      	ldr	r3, [r4, #16]
   8c2aa:	d4dc      	bmi.n	8c266 <__swbuf_r+0x2a>
   8c2ac:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8c2ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8c2b2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8c2b6:	81a2      	strh	r2, [r4, #12]
   8c2b8:	6822      	ldr	r2, [r4, #0]
   8c2ba:	6661      	str	r1, [r4, #100]	; 0x64
   8c2bc:	6961      	ldr	r1, [r4, #20]
   8c2be:	1ad3      	subs	r3, r2, r3
   8c2c0:	4299      	cmp	r1, r3
   8c2c2:	dcd5      	bgt.n	8c270 <__swbuf_r+0x34>
   8c2c4:	4621      	mov	r1, r4
   8c2c6:	4630      	mov	r0, r6
   8c2c8:	f7fe f8ba 	bl	8a440 <_fflush_r>
   8c2cc:	b958      	cbnz	r0, 8c2e6 <__swbuf_r+0xaa>
   8c2ce:	2301      	movs	r3, #1
   8c2d0:	6822      	ldr	r2, [r4, #0]
   8c2d2:	e7ce      	b.n	8c272 <__swbuf_r+0x36>
   8c2d4:	f7fe f910 	bl	8a4f8 <__sinit>
   8c2d8:	e7b8      	b.n	8c24c <__swbuf_r+0x10>
   8c2da:	4621      	mov	r1, r4
   8c2dc:	4630      	mov	r0, r6
   8c2de:	f7fe f8af 	bl	8a440 <_fflush_r>
   8c2e2:	2800      	cmp	r0, #0
   8c2e4:	d0d3      	beq.n	8c28e <__swbuf_r+0x52>
   8c2e6:	f04f 37ff 	mov.w	r7, #4294967295
   8c2ea:	e7d0      	b.n	8c28e <__swbuf_r+0x52>

0008c2ec <_wcrtomb_r>:
   8c2ec:	b570      	push	{r4, r5, r6, lr}
   8c2ee:	4606      	mov	r6, r0
   8c2f0:	461d      	mov	r5, r3
   8c2f2:	b084      	sub	sp, #16
   8c2f4:	b139      	cbz	r1, 8c306 <_wcrtomb_r+0x1a>
   8c2f6:	4c0b      	ldr	r4, [pc, #44]	; (8c324 <_wcrtomb_r+0x38>)
   8c2f8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8c2fc:	47a0      	blx	r4
   8c2fe:	1c43      	adds	r3, r0, #1
   8c300:	d00a      	beq.n	8c318 <_wcrtomb_r+0x2c>
   8c302:	b004      	add	sp, #16
   8c304:	bd70      	pop	{r4, r5, r6, pc}
   8c306:	460c      	mov	r4, r1
   8c308:	4906      	ldr	r1, [pc, #24]	; (8c324 <_wcrtomb_r+0x38>)
   8c30a:	4622      	mov	r2, r4
   8c30c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8c310:	a901      	add	r1, sp, #4
   8c312:	47a0      	blx	r4
   8c314:	1c43      	adds	r3, r0, #1
   8c316:	d1f4      	bne.n	8c302 <_wcrtomb_r+0x16>
   8c318:	2200      	movs	r2, #0
   8c31a:	238a      	movs	r3, #138	; 0x8a
   8c31c:	602a      	str	r2, [r5, #0]
   8c31e:	6033      	str	r3, [r6, #0]
   8c320:	b004      	add	sp, #16
   8c322:	bd70      	pop	{r4, r5, r6, pc}
   8c324:	2000086c 	.word	0x2000086c

0008c328 <__ascii_wctomb>:
   8c328:	4603      	mov	r3, r0
   8c32a:	b149      	cbz	r1, 8c340 <__ascii_wctomb+0x18>
   8c32c:	2aff      	cmp	r2, #255	; 0xff
   8c32e:	d802      	bhi.n	8c336 <__ascii_wctomb+0xe>
   8c330:	2001      	movs	r0, #1
   8c332:	700a      	strb	r2, [r1, #0]
   8c334:	4770      	bx	lr
   8c336:	228a      	movs	r2, #138	; 0x8a
   8c338:	f04f 30ff 	mov.w	r0, #4294967295
   8c33c:	601a      	str	r2, [r3, #0]
   8c33e:	4770      	bx	lr
   8c340:	4608      	mov	r0, r1
   8c342:	4770      	bx	lr

0008c344 <_write_r>:
   8c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c346:	460f      	mov	r7, r1
   8c348:	2600      	movs	r6, #0
   8c34a:	4d08      	ldr	r5, [pc, #32]	; (8c36c <_write_r+0x28>)
   8c34c:	4611      	mov	r1, r2
   8c34e:	4604      	mov	r4, r0
   8c350:	461a      	mov	r2, r3
   8c352:	4638      	mov	r0, r7
   8c354:	602e      	str	r6, [r5, #0]
   8c356:	f7f7 fd99 	bl	83e8c <_write>
   8c35a:	1c43      	adds	r3, r0, #1
   8c35c:	d000      	beq.n	8c360 <_write_r+0x1c>
   8c35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c360:	682b      	ldr	r3, [r5, #0]
   8c362:	2b00      	cmp	r3, #0
   8c364:	d0fb      	beq.n	8c35e <_write_r+0x1a>
   8c366:	6023      	str	r3, [r4, #0]
   8c368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c36a:	bf00      	nop
   8c36c:	20001860 	.word	0x20001860

0008c370 <__register_exitproc>:
   8c370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c374:	f8df a080 	ldr.w	sl, [pc, #128]	; 8c3f8 <__register_exitproc+0x88>
   8c378:	4606      	mov	r6, r0
   8c37a:	f8da 0000 	ldr.w	r0, [sl]
   8c37e:	4698      	mov	r8, r3
   8c380:	460f      	mov	r7, r1
   8c382:	4691      	mov	r9, r2
   8c384:	f7fe fc8a 	bl	8ac9c <__retarget_lock_acquire_recursive>
   8c388:	4b1a      	ldr	r3, [pc, #104]	; (8c3f4 <__register_exitproc+0x84>)
   8c38a:	681b      	ldr	r3, [r3, #0]
   8c38c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8c390:	b324      	cbz	r4, 8c3dc <__register_exitproc+0x6c>
   8c392:	6865      	ldr	r5, [r4, #4]
   8c394:	2d1f      	cmp	r5, #31
   8c396:	dc26      	bgt.n	8c3e6 <__register_exitproc+0x76>
   8c398:	b95e      	cbnz	r6, 8c3b2 <__register_exitproc+0x42>
   8c39a:	1c6b      	adds	r3, r5, #1
   8c39c:	3502      	adds	r5, #2
   8c39e:	f8da 0000 	ldr.w	r0, [sl]
   8c3a2:	6063      	str	r3, [r4, #4]
   8c3a4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8c3a8:	f7fe fc7a 	bl	8aca0 <__retarget_lock_release_recursive>
   8c3ac:	2000      	movs	r0, #0
   8c3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c3b2:	2301      	movs	r3, #1
   8c3b4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8c3b8:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8c3bc:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8c3c0:	40ab      	lsls	r3, r5
   8c3c2:	431a      	orrs	r2, r3
   8c3c4:	2e02      	cmp	r6, #2
   8c3c6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8c3ca:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8c3ce:	d1e4      	bne.n	8c39a <__register_exitproc+0x2a>
   8c3d0:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8c3d4:	4313      	orrs	r3, r2
   8c3d6:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8c3da:	e7de      	b.n	8c39a <__register_exitproc+0x2a>
   8c3dc:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8c3e0:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8c3e4:	e7d5      	b.n	8c392 <__register_exitproc+0x22>
   8c3e6:	f8da 0000 	ldr.w	r0, [sl]
   8c3ea:	f7fe fc59 	bl	8aca0 <__retarget_lock_release_recursive>
   8c3ee:	f04f 30ff 	mov.w	r0, #4294967295
   8c3f2:	e7dc      	b.n	8c3ae <__register_exitproc+0x3e>
   8c3f4:	0008d3e0 	.word	0x0008d3e0
   8c3f8:	20000868 	.word	0x20000868

0008c3fc <__assert_func>:
   8c3fc:	4614      	mov	r4, r2
   8c3fe:	b500      	push	{lr}
   8c400:	4d09      	ldr	r5, [pc, #36]	; (8c428 <__assert_func+0x2c>)
   8c402:	461a      	mov	r2, r3
   8c404:	4603      	mov	r3, r0
   8c406:	6828      	ldr	r0, [r5, #0]
   8c408:	b085      	sub	sp, #20
   8c40a:	68c0      	ldr	r0, [r0, #12]
   8c40c:	b144      	cbz	r4, 8c420 <__assert_func+0x24>
   8c40e:	4d07      	ldr	r5, [pc, #28]	; (8c42c <__assert_func+0x30>)
   8c410:	9100      	str	r1, [sp, #0]
   8c412:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8c416:	4906      	ldr	r1, [pc, #24]	; (8c430 <__assert_func+0x34>)
   8c418:	f000 f8b6 	bl	8c588 <fiprintf>
   8c41c:	f000 f91c 	bl	8c658 <abort>
   8c420:	4d04      	ldr	r5, [pc, #16]	; (8c434 <__assert_func+0x38>)
   8c422:	462c      	mov	r4, r5
   8c424:	e7f4      	b.n	8c410 <__assert_func+0x14>
   8c426:	bf00      	nop
   8c428:	2000043c 	.word	0x2000043c
   8c42c:	0008d694 	.word	0x0008d694
   8c430:	0008d6a4 	.word	0x0008d6a4
   8c434:	0008d6a0 	.word	0x0008d6a0

0008c438 <_calloc_r>:
   8c438:	b510      	push	{r4, lr}
   8c43a:	fb02 f101 	mul.w	r1, r2, r1
   8c43e:	f7fe fca9 	bl	8ad94 <_malloc_r>
   8c442:	4604      	mov	r4, r0
   8c444:	b168      	cbz	r0, 8c462 <_calloc_r+0x2a>
   8c446:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8c44a:	f022 0203 	bic.w	r2, r2, #3
   8c44e:	3a04      	subs	r2, #4
   8c450:	2a24      	cmp	r2, #36	; 0x24
   8c452:	d818      	bhi.n	8c486 <_calloc_r+0x4e>
   8c454:	2a13      	cmp	r2, #19
   8c456:	d806      	bhi.n	8c466 <_calloc_r+0x2e>
   8c458:	4602      	mov	r2, r0
   8c45a:	2300      	movs	r3, #0
   8c45c:	e9c2 3300 	strd	r3, r3, [r2]
   8c460:	6093      	str	r3, [r2, #8]
   8c462:	4620      	mov	r0, r4
   8c464:	bd10      	pop	{r4, pc}
   8c466:	2300      	movs	r3, #0
   8c468:	2a1b      	cmp	r2, #27
   8c46a:	e9c0 3300 	strd	r3, r3, [r0]
   8c46e:	d90f      	bls.n	8c490 <_calloc_r+0x58>
   8c470:	2a24      	cmp	r2, #36	; 0x24
   8c472:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8c476:	bf0a      	itet	eq
   8c478:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8c47c:	f100 0210 	addne.w	r2, r0, #16
   8c480:	f100 0218 	addeq.w	r2, r0, #24
   8c484:	e7e9      	b.n	8c45a <_calloc_r+0x22>
   8c486:	2100      	movs	r1, #0
   8c488:	f7fa f9a4 	bl	867d4 <memset>
   8c48c:	4620      	mov	r0, r4
   8c48e:	bd10      	pop	{r4, pc}
   8c490:	f100 0208 	add.w	r2, r0, #8
   8c494:	e7e1      	b.n	8c45a <_calloc_r+0x22>
   8c496:	bf00      	nop

0008c498 <_close_r>:
   8c498:	2200      	movs	r2, #0
   8c49a:	b538      	push	{r3, r4, r5, lr}
   8c49c:	4d06      	ldr	r5, [pc, #24]	; (8c4b8 <_close_r+0x20>)
   8c49e:	4604      	mov	r4, r0
   8c4a0:	4608      	mov	r0, r1
   8c4a2:	602a      	str	r2, [r5, #0]
   8c4a4:	f7f9 fe76 	bl	86194 <_close>
   8c4a8:	1c43      	adds	r3, r0, #1
   8c4aa:	d000      	beq.n	8c4ae <_close_r+0x16>
   8c4ac:	bd38      	pop	{r3, r4, r5, pc}
   8c4ae:	682b      	ldr	r3, [r5, #0]
   8c4b0:	2b00      	cmp	r3, #0
   8c4b2:	d0fb      	beq.n	8c4ac <_close_r+0x14>
   8c4b4:	6023      	str	r3, [r4, #0]
   8c4b6:	bd38      	pop	{r3, r4, r5, pc}
   8c4b8:	20001860 	.word	0x20001860

0008c4bc <_fclose_r>:
   8c4bc:	b570      	push	{r4, r5, r6, lr}
   8c4be:	2900      	cmp	r1, #0
   8c4c0:	d04b      	beq.n	8c55a <_fclose_r+0x9e>
   8c4c2:	460c      	mov	r4, r1
   8c4c4:	4605      	mov	r5, r0
   8c4c6:	b110      	cbz	r0, 8c4ce <_fclose_r+0x12>
   8c4c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c4ca:	2b00      	cmp	r3, #0
   8c4cc:	d048      	beq.n	8c560 <_fclose_r+0xa4>
   8c4ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c4d0:	07d8      	lsls	r0, r3, #31
   8c4d2:	d534      	bpl.n	8c53e <_fclose_r+0x82>
   8c4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c4d8:	2b00      	cmp	r3, #0
   8c4da:	d03e      	beq.n	8c55a <_fclose_r+0x9e>
   8c4dc:	4621      	mov	r1, r4
   8c4de:	4628      	mov	r0, r5
   8c4e0:	f7fd ff16 	bl	8a310 <__sflush_r>
   8c4e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8c4e6:	4606      	mov	r6, r0
   8c4e8:	b133      	cbz	r3, 8c4f8 <_fclose_r+0x3c>
   8c4ea:	4628      	mov	r0, r5
   8c4ec:	69e1      	ldr	r1, [r4, #28]
   8c4ee:	4798      	blx	r3
   8c4f0:	2800      	cmp	r0, #0
   8c4f2:	bfb8      	it	lt
   8c4f4:	f04f 36ff 	movlt.w	r6, #4294967295
   8c4f8:	89a3      	ldrh	r3, [r4, #12]
   8c4fa:	061a      	lsls	r2, r3, #24
   8c4fc:	d43b      	bmi.n	8c576 <_fclose_r+0xba>
   8c4fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8c500:	b141      	cbz	r1, 8c514 <_fclose_r+0x58>
   8c502:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8c506:	4299      	cmp	r1, r3
   8c508:	d002      	beq.n	8c510 <_fclose_r+0x54>
   8c50a:	4628      	mov	r0, r5
   8c50c:	f7fe f918 	bl	8a740 <_free_r>
   8c510:	2300      	movs	r3, #0
   8c512:	6323      	str	r3, [r4, #48]	; 0x30
   8c514:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8c516:	b121      	cbz	r1, 8c522 <_fclose_r+0x66>
   8c518:	4628      	mov	r0, r5
   8c51a:	f7fe f911 	bl	8a740 <_free_r>
   8c51e:	2300      	movs	r3, #0
   8c520:	6463      	str	r3, [r4, #68]	; 0x44
   8c522:	f7fe f817 	bl	8a554 <__sfp_lock_acquire>
   8c526:	2200      	movs	r2, #0
   8c528:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c52a:	81a2      	strh	r2, [r4, #12]
   8c52c:	07db      	lsls	r3, r3, #31
   8c52e:	d527      	bpl.n	8c580 <_fclose_r+0xc4>
   8c530:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c532:	f7fe fbb1 	bl	8ac98 <__retarget_lock_close_recursive>
   8c536:	f7fe f813 	bl	8a560 <__sfp_lock_release>
   8c53a:	4630      	mov	r0, r6
   8c53c:	bd70      	pop	{r4, r5, r6, pc}
   8c53e:	89a3      	ldrh	r3, [r4, #12]
   8c540:	0599      	lsls	r1, r3, #22
   8c542:	d4cb      	bmi.n	8c4dc <_fclose_r+0x20>
   8c544:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c546:	f7fe fba9 	bl	8ac9c <__retarget_lock_acquire_recursive>
   8c54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c54e:	2b00      	cmp	r3, #0
   8c550:	d1c4      	bne.n	8c4dc <_fclose_r+0x20>
   8c552:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8c554:	f016 0601 	ands.w	r6, r6, #1
   8c558:	d008      	beq.n	8c56c <_fclose_r+0xb0>
   8c55a:	2600      	movs	r6, #0
   8c55c:	4630      	mov	r0, r6
   8c55e:	bd70      	pop	{r4, r5, r6, pc}
   8c560:	f7fd ffca 	bl	8a4f8 <__sinit>
   8c564:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c566:	07d8      	lsls	r0, r3, #31
   8c568:	d4b4      	bmi.n	8c4d4 <_fclose_r+0x18>
   8c56a:	e7e8      	b.n	8c53e <_fclose_r+0x82>
   8c56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c56e:	f7fe fb97 	bl	8aca0 <__retarget_lock_release_recursive>
   8c572:	4630      	mov	r0, r6
   8c574:	bd70      	pop	{r4, r5, r6, pc}
   8c576:	4628      	mov	r0, r5
   8c578:	6921      	ldr	r1, [r4, #16]
   8c57a:	f7fe f8e1 	bl	8a740 <_free_r>
   8c57e:	e7be      	b.n	8c4fe <_fclose_r+0x42>
   8c580:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c582:	f7fe fb8d 	bl	8aca0 <__retarget_lock_release_recursive>
   8c586:	e7d3      	b.n	8c530 <_fclose_r+0x74>

0008c588 <fiprintf>:
   8c588:	b40e      	push	{r1, r2, r3}
   8c58a:	b510      	push	{r4, lr}
   8c58c:	b083      	sub	sp, #12
   8c58e:	ab05      	add	r3, sp, #20
   8c590:	4c06      	ldr	r4, [pc, #24]	; (8c5ac <fiprintf+0x24>)
   8c592:	f853 2b04 	ldr.w	r2, [r3], #4
   8c596:	4601      	mov	r1, r0
   8c598:	6820      	ldr	r0, [r4, #0]
   8c59a:	9301      	str	r3, [sp, #4]
   8c59c:	f7fb ff70 	bl	88480 <_vfiprintf_r>
   8c5a0:	b003      	add	sp, #12
   8c5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8c5a6:	b003      	add	sp, #12
   8c5a8:	4770      	bx	lr
   8c5aa:	bf00      	nop
   8c5ac:	2000043c 	.word	0x2000043c

0008c5b0 <_fstat_r>:
   8c5b0:	b570      	push	{r4, r5, r6, lr}
   8c5b2:	460c      	mov	r4, r1
   8c5b4:	4603      	mov	r3, r0
   8c5b6:	2600      	movs	r6, #0
   8c5b8:	4d07      	ldr	r5, [pc, #28]	; (8c5d8 <_fstat_r+0x28>)
   8c5ba:	4620      	mov	r0, r4
   8c5bc:	4611      	mov	r1, r2
   8c5be:	461c      	mov	r4, r3
   8c5c0:	602e      	str	r6, [r5, #0]
   8c5c2:	f7f9 fdf2 	bl	861aa <_fstat>
   8c5c6:	1c43      	adds	r3, r0, #1
   8c5c8:	d000      	beq.n	8c5cc <_fstat_r+0x1c>
   8c5ca:	bd70      	pop	{r4, r5, r6, pc}
   8c5cc:	682b      	ldr	r3, [r5, #0]
   8c5ce:	2b00      	cmp	r3, #0
   8c5d0:	d0fb      	beq.n	8c5ca <_fstat_r+0x1a>
   8c5d2:	6023      	str	r3, [r4, #0]
   8c5d4:	bd70      	pop	{r4, r5, r6, pc}
   8c5d6:	bf00      	nop
   8c5d8:	20001860 	.word	0x20001860

0008c5dc <_isatty_r>:
   8c5dc:	2200      	movs	r2, #0
   8c5de:	b538      	push	{r3, r4, r5, lr}
   8c5e0:	4d06      	ldr	r5, [pc, #24]	; (8c5fc <_isatty_r+0x20>)
   8c5e2:	4604      	mov	r4, r0
   8c5e4:	4608      	mov	r0, r1
   8c5e6:	602a      	str	r2, [r5, #0]
   8c5e8:	f7f9 fdee 	bl	861c8 <_isatty>
   8c5ec:	1c43      	adds	r3, r0, #1
   8c5ee:	d000      	beq.n	8c5f2 <_isatty_r+0x16>
   8c5f0:	bd38      	pop	{r3, r4, r5, pc}
   8c5f2:	682b      	ldr	r3, [r5, #0]
   8c5f4:	2b00      	cmp	r3, #0
   8c5f6:	d0fb      	beq.n	8c5f0 <_isatty_r+0x14>
   8c5f8:	6023      	str	r3, [r4, #0]
   8c5fa:	bd38      	pop	{r3, r4, r5, pc}
   8c5fc:	20001860 	.word	0x20001860

0008c600 <_lseek_r>:
   8c600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c602:	460f      	mov	r7, r1
   8c604:	2600      	movs	r6, #0
   8c606:	4d08      	ldr	r5, [pc, #32]	; (8c628 <_lseek_r+0x28>)
   8c608:	4611      	mov	r1, r2
   8c60a:	4604      	mov	r4, r0
   8c60c:	461a      	mov	r2, r3
   8c60e:	4638      	mov	r0, r7
   8c610:	602e      	str	r6, [r5, #0]
   8c612:	f7f9 fde3 	bl	861dc <_lseek>
   8c616:	1c43      	adds	r3, r0, #1
   8c618:	d000      	beq.n	8c61c <_lseek_r+0x1c>
   8c61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c61c:	682b      	ldr	r3, [r5, #0]
   8c61e:	2b00      	cmp	r3, #0
   8c620:	d0fb      	beq.n	8c61a <_lseek_r+0x1a>
   8c622:	6023      	str	r3, [r4, #0]
   8c624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c626:	bf00      	nop
   8c628:	20001860 	.word	0x20001860

0008c62c <_read_r>:
   8c62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c62e:	460f      	mov	r7, r1
   8c630:	2600      	movs	r6, #0
   8c632:	4d08      	ldr	r5, [pc, #32]	; (8c654 <_read_r+0x28>)
   8c634:	4611      	mov	r1, r2
   8c636:	4604      	mov	r4, r0
   8c638:	461a      	mov	r2, r3
   8c63a:	4638      	mov	r0, r7
   8c63c:	602e      	str	r6, [r5, #0]
   8c63e:	f7f9 ff2f 	bl	864a0 <_read>
   8c642:	1c43      	adds	r3, r0, #1
   8c644:	d000      	beq.n	8c648 <_read_r+0x1c>
   8c646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c648:	682b      	ldr	r3, [r5, #0]
   8c64a:	2b00      	cmp	r3, #0
   8c64c:	d0fb      	beq.n	8c646 <_read_r+0x1a>
   8c64e:	6023      	str	r3, [r4, #0]
   8c650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c652:	bf00      	nop
   8c654:	20001860 	.word	0x20001860

0008c658 <abort>:
   8c658:	2006      	movs	r0, #6
   8c65a:	b508      	push	{r3, lr}
   8c65c:	f000 f830 	bl	8c6c0 <raise>
   8c660:	2001      	movs	r0, #1
   8c662:	f7f9 fdc7 	bl	861f4 <_exit>
   8c666:	bf00      	nop

0008c668 <_raise_r>:
   8c668:	291f      	cmp	r1, #31
   8c66a:	b538      	push	{r3, r4, r5, lr}
   8c66c:	4605      	mov	r5, r0
   8c66e:	d821      	bhi.n	8c6b4 <_raise_r+0x4c>
   8c670:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8c674:	460c      	mov	r4, r1
   8c676:	b16a      	cbz	r2, 8c694 <_raise_r+0x2c>
   8c678:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8c67c:	b153      	cbz	r3, 8c694 <_raise_r+0x2c>
   8c67e:	2b01      	cmp	r3, #1
   8c680:	d016      	beq.n	8c6b0 <_raise_r+0x48>
   8c682:	1c59      	adds	r1, r3, #1
   8c684:	d010      	beq.n	8c6a8 <_raise_r+0x40>
   8c686:	2500      	movs	r5, #0
   8c688:	4620      	mov	r0, r4
   8c68a:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8c68e:	4798      	blx	r3
   8c690:	4628      	mov	r0, r5
   8c692:	bd38      	pop	{r3, r4, r5, pc}
   8c694:	4628      	mov	r0, r5
   8c696:	f000 f831 	bl	8c6fc <_getpid_r>
   8c69a:	4622      	mov	r2, r4
   8c69c:	4601      	mov	r1, r0
   8c69e:	4628      	mov	r0, r5
   8c6a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8c6a4:	f000 b814 	b.w	8c6d0 <_kill_r>
   8c6a8:	2316      	movs	r3, #22
   8c6aa:	2001      	movs	r0, #1
   8c6ac:	602b      	str	r3, [r5, #0]
   8c6ae:	bd38      	pop	{r3, r4, r5, pc}
   8c6b0:	2000      	movs	r0, #0
   8c6b2:	bd38      	pop	{r3, r4, r5, pc}
   8c6b4:	2316      	movs	r3, #22
   8c6b6:	f04f 30ff 	mov.w	r0, #4294967295
   8c6ba:	602b      	str	r3, [r5, #0]
   8c6bc:	bd38      	pop	{r3, r4, r5, pc}
   8c6be:	bf00      	nop

0008c6c0 <raise>:
   8c6c0:	4b02      	ldr	r3, [pc, #8]	; (8c6cc <raise+0xc>)
   8c6c2:	4601      	mov	r1, r0
   8c6c4:	6818      	ldr	r0, [r3, #0]
   8c6c6:	f7ff bfcf 	b.w	8c668 <_raise_r>
   8c6ca:	bf00      	nop
   8c6cc:	2000043c 	.word	0x2000043c

0008c6d0 <_kill_r>:
   8c6d0:	b570      	push	{r4, r5, r6, lr}
   8c6d2:	460c      	mov	r4, r1
   8c6d4:	4603      	mov	r3, r0
   8c6d6:	2600      	movs	r6, #0
   8c6d8:	4d07      	ldr	r5, [pc, #28]	; (8c6f8 <_kill_r+0x28>)
   8c6da:	4620      	mov	r0, r4
   8c6dc:	4611      	mov	r1, r2
   8c6de:	461c      	mov	r4, r3
   8c6e0:	602e      	str	r6, [r5, #0]
   8c6e2:	f7f9 fd95 	bl	86210 <_kill>
   8c6e6:	1c43      	adds	r3, r0, #1
   8c6e8:	d000      	beq.n	8c6ec <_kill_r+0x1c>
   8c6ea:	bd70      	pop	{r4, r5, r6, pc}
   8c6ec:	682b      	ldr	r3, [r5, #0]
   8c6ee:	2b00      	cmp	r3, #0
   8c6f0:	d0fb      	beq.n	8c6ea <_kill_r+0x1a>
   8c6f2:	6023      	str	r3, [r4, #0]
   8c6f4:	bd70      	pop	{r4, r5, r6, pc}
   8c6f6:	bf00      	nop
   8c6f8:	20001860 	.word	0x20001860

0008c6fc <_getpid_r>:
   8c6fc:	f7f9 bd92 	b.w	86224 <_getpid>

0008c700 <__aeabi_drsub>:
   8c700:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8c704:	e002      	b.n	8c70c <__adddf3>
   8c706:	bf00      	nop

0008c708 <__aeabi_dsub>:
   8c708:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008c70c <__adddf3>:
   8c70c:	b530      	push	{r4, r5, lr}
   8c70e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8c712:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8c716:	ea94 0f05 	teq	r4, r5
   8c71a:	bf08      	it	eq
   8c71c:	ea90 0f02 	teqeq	r0, r2
   8c720:	bf1f      	itttt	ne
   8c722:	ea54 0c00 	orrsne.w	ip, r4, r0
   8c726:	ea55 0c02 	orrsne.w	ip, r5, r2
   8c72a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8c72e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c732:	f000 80e2 	beq.w	8c8fa <__adddf3+0x1ee>
   8c736:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8c73a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8c73e:	bfb8      	it	lt
   8c740:	426d      	neglt	r5, r5
   8c742:	dd0c      	ble.n	8c75e <__adddf3+0x52>
   8c744:	442c      	add	r4, r5
   8c746:	ea80 0202 	eor.w	r2, r0, r2
   8c74a:	ea81 0303 	eor.w	r3, r1, r3
   8c74e:	ea82 0000 	eor.w	r0, r2, r0
   8c752:	ea83 0101 	eor.w	r1, r3, r1
   8c756:	ea80 0202 	eor.w	r2, r0, r2
   8c75a:	ea81 0303 	eor.w	r3, r1, r3
   8c75e:	2d36      	cmp	r5, #54	; 0x36
   8c760:	bf88      	it	hi
   8c762:	bd30      	pophi	{r4, r5, pc}
   8c764:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c768:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c76c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8c770:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8c774:	d002      	beq.n	8c77c <__adddf3+0x70>
   8c776:	4240      	negs	r0, r0
   8c778:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c77c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8c780:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c784:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8c788:	d002      	beq.n	8c790 <__adddf3+0x84>
   8c78a:	4252      	negs	r2, r2
   8c78c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c790:	ea94 0f05 	teq	r4, r5
   8c794:	f000 80a7 	beq.w	8c8e6 <__adddf3+0x1da>
   8c798:	f1a4 0401 	sub.w	r4, r4, #1
   8c79c:	f1d5 0e20 	rsbs	lr, r5, #32
   8c7a0:	db0d      	blt.n	8c7be <__adddf3+0xb2>
   8c7a2:	fa02 fc0e 	lsl.w	ip, r2, lr
   8c7a6:	fa22 f205 	lsr.w	r2, r2, r5
   8c7aa:	1880      	adds	r0, r0, r2
   8c7ac:	f141 0100 	adc.w	r1, r1, #0
   8c7b0:	fa03 f20e 	lsl.w	r2, r3, lr
   8c7b4:	1880      	adds	r0, r0, r2
   8c7b6:	fa43 f305 	asr.w	r3, r3, r5
   8c7ba:	4159      	adcs	r1, r3
   8c7bc:	e00e      	b.n	8c7dc <__adddf3+0xd0>
   8c7be:	f1a5 0520 	sub.w	r5, r5, #32
   8c7c2:	f10e 0e20 	add.w	lr, lr, #32
   8c7c6:	2a01      	cmp	r2, #1
   8c7c8:	fa03 fc0e 	lsl.w	ip, r3, lr
   8c7cc:	bf28      	it	cs
   8c7ce:	f04c 0c02 	orrcs.w	ip, ip, #2
   8c7d2:	fa43 f305 	asr.w	r3, r3, r5
   8c7d6:	18c0      	adds	r0, r0, r3
   8c7d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8c7dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c7e0:	d507      	bpl.n	8c7f2 <__adddf3+0xe6>
   8c7e2:	f04f 0e00 	mov.w	lr, #0
   8c7e6:	f1dc 0c00 	rsbs	ip, ip, #0
   8c7ea:	eb7e 0000 	sbcs.w	r0, lr, r0
   8c7ee:	eb6e 0101 	sbc.w	r1, lr, r1
   8c7f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8c7f6:	d31b      	bcc.n	8c830 <__adddf3+0x124>
   8c7f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8c7fc:	d30c      	bcc.n	8c818 <__adddf3+0x10c>
   8c7fe:	0849      	lsrs	r1, r1, #1
   8c800:	ea5f 0030 	movs.w	r0, r0, rrx
   8c804:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8c808:	f104 0401 	add.w	r4, r4, #1
   8c80c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8c810:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8c814:	f080 809a 	bcs.w	8c94c <__adddf3+0x240>
   8c818:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8c81c:	bf08      	it	eq
   8c81e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c822:	f150 0000 	adcs.w	r0, r0, #0
   8c826:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c82a:	ea41 0105 	orr.w	r1, r1, r5
   8c82e:	bd30      	pop	{r4, r5, pc}
   8c830:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8c834:	4140      	adcs	r0, r0
   8c836:	eb41 0101 	adc.w	r1, r1, r1
   8c83a:	3c01      	subs	r4, #1
   8c83c:	bf28      	it	cs
   8c83e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8c842:	d2e9      	bcs.n	8c818 <__adddf3+0x10c>
   8c844:	f091 0f00 	teq	r1, #0
   8c848:	bf04      	itt	eq
   8c84a:	4601      	moveq	r1, r0
   8c84c:	2000      	moveq	r0, #0
   8c84e:	fab1 f381 	clz	r3, r1
   8c852:	bf08      	it	eq
   8c854:	3320      	addeq	r3, #32
   8c856:	f1a3 030b 	sub.w	r3, r3, #11
   8c85a:	f1b3 0220 	subs.w	r2, r3, #32
   8c85e:	da0c      	bge.n	8c87a <__adddf3+0x16e>
   8c860:	320c      	adds	r2, #12
   8c862:	dd08      	ble.n	8c876 <__adddf3+0x16a>
   8c864:	f102 0c14 	add.w	ip, r2, #20
   8c868:	f1c2 020c 	rsb	r2, r2, #12
   8c86c:	fa01 f00c 	lsl.w	r0, r1, ip
   8c870:	fa21 f102 	lsr.w	r1, r1, r2
   8c874:	e00c      	b.n	8c890 <__adddf3+0x184>
   8c876:	f102 0214 	add.w	r2, r2, #20
   8c87a:	bfd8      	it	le
   8c87c:	f1c2 0c20 	rsble	ip, r2, #32
   8c880:	fa01 f102 	lsl.w	r1, r1, r2
   8c884:	fa20 fc0c 	lsr.w	ip, r0, ip
   8c888:	bfdc      	itt	le
   8c88a:	ea41 010c 	orrle.w	r1, r1, ip
   8c88e:	4090      	lslle	r0, r2
   8c890:	1ae4      	subs	r4, r4, r3
   8c892:	bfa2      	ittt	ge
   8c894:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8c898:	4329      	orrge	r1, r5
   8c89a:	bd30      	popge	{r4, r5, pc}
   8c89c:	ea6f 0404 	mvn.w	r4, r4
   8c8a0:	3c1f      	subs	r4, #31
   8c8a2:	da1c      	bge.n	8c8de <__adddf3+0x1d2>
   8c8a4:	340c      	adds	r4, #12
   8c8a6:	dc0e      	bgt.n	8c8c6 <__adddf3+0x1ba>
   8c8a8:	f104 0414 	add.w	r4, r4, #20
   8c8ac:	f1c4 0220 	rsb	r2, r4, #32
   8c8b0:	fa20 f004 	lsr.w	r0, r0, r4
   8c8b4:	fa01 f302 	lsl.w	r3, r1, r2
   8c8b8:	ea40 0003 	orr.w	r0, r0, r3
   8c8bc:	fa21 f304 	lsr.w	r3, r1, r4
   8c8c0:	ea45 0103 	orr.w	r1, r5, r3
   8c8c4:	bd30      	pop	{r4, r5, pc}
   8c8c6:	f1c4 040c 	rsb	r4, r4, #12
   8c8ca:	f1c4 0220 	rsb	r2, r4, #32
   8c8ce:	fa20 f002 	lsr.w	r0, r0, r2
   8c8d2:	fa01 f304 	lsl.w	r3, r1, r4
   8c8d6:	ea40 0003 	orr.w	r0, r0, r3
   8c8da:	4629      	mov	r1, r5
   8c8dc:	bd30      	pop	{r4, r5, pc}
   8c8de:	fa21 f004 	lsr.w	r0, r1, r4
   8c8e2:	4629      	mov	r1, r5
   8c8e4:	bd30      	pop	{r4, r5, pc}
   8c8e6:	f094 0f00 	teq	r4, #0
   8c8ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8c8ee:	bf06      	itte	eq
   8c8f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8c8f4:	3401      	addeq	r4, #1
   8c8f6:	3d01      	subne	r5, #1
   8c8f8:	e74e      	b.n	8c798 <__adddf3+0x8c>
   8c8fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c8fe:	bf18      	it	ne
   8c900:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c904:	d029      	beq.n	8c95a <__adddf3+0x24e>
   8c906:	ea94 0f05 	teq	r4, r5
   8c90a:	bf08      	it	eq
   8c90c:	ea90 0f02 	teqeq	r0, r2
   8c910:	d005      	beq.n	8c91e <__adddf3+0x212>
   8c912:	ea54 0c00 	orrs.w	ip, r4, r0
   8c916:	bf04      	itt	eq
   8c918:	4619      	moveq	r1, r3
   8c91a:	4610      	moveq	r0, r2
   8c91c:	bd30      	pop	{r4, r5, pc}
   8c91e:	ea91 0f03 	teq	r1, r3
   8c922:	bf1e      	ittt	ne
   8c924:	2100      	movne	r1, #0
   8c926:	2000      	movne	r0, #0
   8c928:	bd30      	popne	{r4, r5, pc}
   8c92a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8c92e:	d105      	bne.n	8c93c <__adddf3+0x230>
   8c930:	0040      	lsls	r0, r0, #1
   8c932:	4149      	adcs	r1, r1
   8c934:	bf28      	it	cs
   8c936:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8c93a:	bd30      	pop	{r4, r5, pc}
   8c93c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8c940:	bf3c      	itt	cc
   8c942:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8c946:	bd30      	popcc	{r4, r5, pc}
   8c948:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c94c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8c950:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c954:	f04f 0000 	mov.w	r0, #0
   8c958:	bd30      	pop	{r4, r5, pc}
   8c95a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c95e:	bf1a      	itte	ne
   8c960:	4619      	movne	r1, r3
   8c962:	4610      	movne	r0, r2
   8c964:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8c968:	bf1c      	itt	ne
   8c96a:	460b      	movne	r3, r1
   8c96c:	4602      	movne	r2, r0
   8c96e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c972:	bf06      	itte	eq
   8c974:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8c978:	ea91 0f03 	teqeq	r1, r3
   8c97c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8c980:	bd30      	pop	{r4, r5, pc}
   8c982:	bf00      	nop

0008c984 <__aeabi_ui2d>:
   8c984:	f090 0f00 	teq	r0, #0
   8c988:	bf04      	itt	eq
   8c98a:	2100      	moveq	r1, #0
   8c98c:	4770      	bxeq	lr
   8c98e:	b530      	push	{r4, r5, lr}
   8c990:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c994:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c998:	f04f 0500 	mov.w	r5, #0
   8c99c:	f04f 0100 	mov.w	r1, #0
   8c9a0:	e750      	b.n	8c844 <__adddf3+0x138>
   8c9a2:	bf00      	nop

0008c9a4 <__aeabi_i2d>:
   8c9a4:	f090 0f00 	teq	r0, #0
   8c9a8:	bf04      	itt	eq
   8c9aa:	2100      	moveq	r1, #0
   8c9ac:	4770      	bxeq	lr
   8c9ae:	b530      	push	{r4, r5, lr}
   8c9b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c9b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c9b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8c9bc:	bf48      	it	mi
   8c9be:	4240      	negmi	r0, r0
   8c9c0:	f04f 0100 	mov.w	r1, #0
   8c9c4:	e73e      	b.n	8c844 <__adddf3+0x138>
   8c9c6:	bf00      	nop

0008c9c8 <__aeabi_f2d>:
   8c9c8:	0042      	lsls	r2, r0, #1
   8c9ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8c9ce:	ea4f 0131 	mov.w	r1, r1, rrx
   8c9d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8c9d6:	bf1f      	itttt	ne
   8c9d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8c9dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8c9e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8c9e4:	4770      	bxne	lr
   8c9e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8c9ea:	bf08      	it	eq
   8c9ec:	4770      	bxeq	lr
   8c9ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8c9f2:	bf04      	itt	eq
   8c9f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8c9f8:	4770      	bxeq	lr
   8c9fa:	b530      	push	{r4, r5, lr}
   8c9fc:	f44f 7460 	mov.w	r4, #896	; 0x380
   8ca00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8ca04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8ca08:	e71c      	b.n	8c844 <__adddf3+0x138>
   8ca0a:	bf00      	nop

0008ca0c <__aeabi_ul2d>:
   8ca0c:	ea50 0201 	orrs.w	r2, r0, r1
   8ca10:	bf08      	it	eq
   8ca12:	4770      	bxeq	lr
   8ca14:	b530      	push	{r4, r5, lr}
   8ca16:	f04f 0500 	mov.w	r5, #0
   8ca1a:	e00a      	b.n	8ca32 <__aeabi_l2d+0x16>

0008ca1c <__aeabi_l2d>:
   8ca1c:	ea50 0201 	orrs.w	r2, r0, r1
   8ca20:	bf08      	it	eq
   8ca22:	4770      	bxeq	lr
   8ca24:	b530      	push	{r4, r5, lr}
   8ca26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8ca2a:	d502      	bpl.n	8ca32 <__aeabi_l2d+0x16>
   8ca2c:	4240      	negs	r0, r0
   8ca2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8ca32:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8ca36:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8ca3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8ca3e:	f43f aed8 	beq.w	8c7f2 <__adddf3+0xe6>
   8ca42:	f04f 0203 	mov.w	r2, #3
   8ca46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8ca4a:	bf18      	it	ne
   8ca4c:	3203      	addne	r2, #3
   8ca4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8ca52:	bf18      	it	ne
   8ca54:	3203      	addne	r2, #3
   8ca56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8ca5a:	f1c2 0320 	rsb	r3, r2, #32
   8ca5e:	fa00 fc03 	lsl.w	ip, r0, r3
   8ca62:	fa20 f002 	lsr.w	r0, r0, r2
   8ca66:	fa01 fe03 	lsl.w	lr, r1, r3
   8ca6a:	ea40 000e 	orr.w	r0, r0, lr
   8ca6e:	fa21 f102 	lsr.w	r1, r1, r2
   8ca72:	4414      	add	r4, r2
   8ca74:	e6bd      	b.n	8c7f2 <__adddf3+0xe6>
   8ca76:	bf00      	nop

0008ca78 <__aeabi_dmul>:
   8ca78:	b570      	push	{r4, r5, r6, lr}
   8ca7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8ca7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8ca82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8ca86:	bf1d      	ittte	ne
   8ca88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8ca8c:	ea94 0f0c 	teqne	r4, ip
   8ca90:	ea95 0f0c 	teqne	r5, ip
   8ca94:	f000 f8de 	bleq	8cc54 <__aeabi_dmul+0x1dc>
   8ca98:	442c      	add	r4, r5
   8ca9a:	ea81 0603 	eor.w	r6, r1, r3
   8ca9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8caa2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8caa6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8caaa:	bf18      	it	ne
   8caac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8cab0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8cab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8cab8:	d038      	beq.n	8cb2c <__aeabi_dmul+0xb4>
   8caba:	fba0 ce02 	umull	ip, lr, r0, r2
   8cabe:	f04f 0500 	mov.w	r5, #0
   8cac2:	fbe1 e502 	umlal	lr, r5, r1, r2
   8cac6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8caca:	fbe0 e503 	umlal	lr, r5, r0, r3
   8cace:	f04f 0600 	mov.w	r6, #0
   8cad2:	fbe1 5603 	umlal	r5, r6, r1, r3
   8cad6:	f09c 0f00 	teq	ip, #0
   8cada:	bf18      	it	ne
   8cadc:	f04e 0e01 	orrne.w	lr, lr, #1
   8cae0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8cae4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8cae8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8caec:	d204      	bcs.n	8caf8 <__aeabi_dmul+0x80>
   8caee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8caf2:	416d      	adcs	r5, r5
   8caf4:	eb46 0606 	adc.w	r6, r6, r6
   8caf8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8cafc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8cb00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8cb04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8cb08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8cb0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8cb10:	bf88      	it	hi
   8cb12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8cb16:	d81e      	bhi.n	8cb56 <__aeabi_dmul+0xde>
   8cb18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8cb1c:	bf08      	it	eq
   8cb1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8cb22:	f150 0000 	adcs.w	r0, r0, #0
   8cb26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8cb2a:	bd70      	pop	{r4, r5, r6, pc}
   8cb2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8cb30:	ea46 0101 	orr.w	r1, r6, r1
   8cb34:	ea40 0002 	orr.w	r0, r0, r2
   8cb38:	ea81 0103 	eor.w	r1, r1, r3
   8cb3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8cb40:	bfc2      	ittt	gt
   8cb42:	ebd4 050c 	rsbsgt	r5, r4, ip
   8cb46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8cb4a:	bd70      	popgt	{r4, r5, r6, pc}
   8cb4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8cb50:	f04f 0e00 	mov.w	lr, #0
   8cb54:	3c01      	subs	r4, #1
   8cb56:	f300 80ab 	bgt.w	8ccb0 <__aeabi_dmul+0x238>
   8cb5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8cb5e:	bfde      	ittt	le
   8cb60:	2000      	movle	r0, #0
   8cb62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8cb66:	bd70      	pople	{r4, r5, r6, pc}
   8cb68:	f1c4 0400 	rsb	r4, r4, #0
   8cb6c:	3c20      	subs	r4, #32
   8cb6e:	da35      	bge.n	8cbdc <__aeabi_dmul+0x164>
   8cb70:	340c      	adds	r4, #12
   8cb72:	dc1b      	bgt.n	8cbac <__aeabi_dmul+0x134>
   8cb74:	f104 0414 	add.w	r4, r4, #20
   8cb78:	f1c4 0520 	rsb	r5, r4, #32
   8cb7c:	fa00 f305 	lsl.w	r3, r0, r5
   8cb80:	fa20 f004 	lsr.w	r0, r0, r4
   8cb84:	fa01 f205 	lsl.w	r2, r1, r5
   8cb88:	ea40 0002 	orr.w	r0, r0, r2
   8cb8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8cb90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8cb94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8cb98:	fa21 f604 	lsr.w	r6, r1, r4
   8cb9c:	eb42 0106 	adc.w	r1, r2, r6
   8cba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8cba4:	bf08      	it	eq
   8cba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8cbaa:	bd70      	pop	{r4, r5, r6, pc}
   8cbac:	f1c4 040c 	rsb	r4, r4, #12
   8cbb0:	f1c4 0520 	rsb	r5, r4, #32
   8cbb4:	fa00 f304 	lsl.w	r3, r0, r4
   8cbb8:	fa20 f005 	lsr.w	r0, r0, r5
   8cbbc:	fa01 f204 	lsl.w	r2, r1, r4
   8cbc0:	ea40 0002 	orr.w	r0, r0, r2
   8cbc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cbc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8cbcc:	f141 0100 	adc.w	r1, r1, #0
   8cbd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8cbd4:	bf08      	it	eq
   8cbd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8cbda:	bd70      	pop	{r4, r5, r6, pc}
   8cbdc:	f1c4 0520 	rsb	r5, r4, #32
   8cbe0:	fa00 f205 	lsl.w	r2, r0, r5
   8cbe4:	ea4e 0e02 	orr.w	lr, lr, r2
   8cbe8:	fa20 f304 	lsr.w	r3, r0, r4
   8cbec:	fa01 f205 	lsl.w	r2, r1, r5
   8cbf0:	ea43 0302 	orr.w	r3, r3, r2
   8cbf4:	fa21 f004 	lsr.w	r0, r1, r4
   8cbf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cbfc:	fa21 f204 	lsr.w	r2, r1, r4
   8cc00:	ea20 0002 	bic.w	r0, r0, r2
   8cc04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8cc08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8cc0c:	bf08      	it	eq
   8cc0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8cc12:	bd70      	pop	{r4, r5, r6, pc}
   8cc14:	f094 0f00 	teq	r4, #0
   8cc18:	d10f      	bne.n	8cc3a <__aeabi_dmul+0x1c2>
   8cc1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8cc1e:	0040      	lsls	r0, r0, #1
   8cc20:	eb41 0101 	adc.w	r1, r1, r1
   8cc24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8cc28:	bf08      	it	eq
   8cc2a:	3c01      	subeq	r4, #1
   8cc2c:	d0f7      	beq.n	8cc1e <__aeabi_dmul+0x1a6>
   8cc2e:	ea41 0106 	orr.w	r1, r1, r6
   8cc32:	f095 0f00 	teq	r5, #0
   8cc36:	bf18      	it	ne
   8cc38:	4770      	bxne	lr
   8cc3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8cc3e:	0052      	lsls	r2, r2, #1
   8cc40:	eb43 0303 	adc.w	r3, r3, r3
   8cc44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8cc48:	bf08      	it	eq
   8cc4a:	3d01      	subeq	r5, #1
   8cc4c:	d0f7      	beq.n	8cc3e <__aeabi_dmul+0x1c6>
   8cc4e:	ea43 0306 	orr.w	r3, r3, r6
   8cc52:	4770      	bx	lr
   8cc54:	ea94 0f0c 	teq	r4, ip
   8cc58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8cc5c:	bf18      	it	ne
   8cc5e:	ea95 0f0c 	teqne	r5, ip
   8cc62:	d00c      	beq.n	8cc7e <__aeabi_dmul+0x206>
   8cc64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8cc68:	bf18      	it	ne
   8cc6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8cc6e:	d1d1      	bne.n	8cc14 <__aeabi_dmul+0x19c>
   8cc70:	ea81 0103 	eor.w	r1, r1, r3
   8cc74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cc78:	f04f 0000 	mov.w	r0, #0
   8cc7c:	bd70      	pop	{r4, r5, r6, pc}
   8cc7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8cc82:	bf06      	itte	eq
   8cc84:	4610      	moveq	r0, r2
   8cc86:	4619      	moveq	r1, r3
   8cc88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8cc8c:	d019      	beq.n	8ccc2 <__aeabi_dmul+0x24a>
   8cc8e:	ea94 0f0c 	teq	r4, ip
   8cc92:	d102      	bne.n	8cc9a <__aeabi_dmul+0x222>
   8cc94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8cc98:	d113      	bne.n	8ccc2 <__aeabi_dmul+0x24a>
   8cc9a:	ea95 0f0c 	teq	r5, ip
   8cc9e:	d105      	bne.n	8ccac <__aeabi_dmul+0x234>
   8cca0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8cca4:	bf1c      	itt	ne
   8cca6:	4610      	movne	r0, r2
   8cca8:	4619      	movne	r1, r3
   8ccaa:	d10a      	bne.n	8ccc2 <__aeabi_dmul+0x24a>
   8ccac:	ea81 0103 	eor.w	r1, r1, r3
   8ccb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8ccb4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8ccb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8ccbc:	f04f 0000 	mov.w	r0, #0
   8ccc0:	bd70      	pop	{r4, r5, r6, pc}
   8ccc2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8ccc6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8ccca:	bd70      	pop	{r4, r5, r6, pc}

0008cccc <__aeabi_ddiv>:
   8cccc:	b570      	push	{r4, r5, r6, lr}
   8ccce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8ccd2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8ccd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8ccda:	bf1d      	ittte	ne
   8ccdc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8cce0:	ea94 0f0c 	teqne	r4, ip
   8cce4:	ea95 0f0c 	teqne	r5, ip
   8cce8:	f000 f8a7 	bleq	8ce3a <__aeabi_ddiv+0x16e>
   8ccec:	eba4 0405 	sub.w	r4, r4, r5
   8ccf0:	ea81 0e03 	eor.w	lr, r1, r3
   8ccf4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8ccf8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8ccfc:	f000 8088 	beq.w	8ce10 <__aeabi_ddiv+0x144>
   8cd00:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8cd04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8cd08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8cd0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8cd10:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8cd14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8cd18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8cd1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8cd20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8cd24:	429d      	cmp	r5, r3
   8cd26:	bf08      	it	eq
   8cd28:	4296      	cmpeq	r6, r2
   8cd2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8cd2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8cd32:	d202      	bcs.n	8cd3a <__aeabi_ddiv+0x6e>
   8cd34:	085b      	lsrs	r3, r3, #1
   8cd36:	ea4f 0232 	mov.w	r2, r2, rrx
   8cd3a:	1ab6      	subs	r6, r6, r2
   8cd3c:	eb65 0503 	sbc.w	r5, r5, r3
   8cd40:	085b      	lsrs	r3, r3, #1
   8cd42:	ea4f 0232 	mov.w	r2, r2, rrx
   8cd46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8cd4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8cd4e:	ebb6 0e02 	subs.w	lr, r6, r2
   8cd52:	eb75 0e03 	sbcs.w	lr, r5, r3
   8cd56:	bf22      	ittt	cs
   8cd58:	1ab6      	subcs	r6, r6, r2
   8cd5a:	4675      	movcs	r5, lr
   8cd5c:	ea40 000c 	orrcs.w	r0, r0, ip
   8cd60:	085b      	lsrs	r3, r3, #1
   8cd62:	ea4f 0232 	mov.w	r2, r2, rrx
   8cd66:	ebb6 0e02 	subs.w	lr, r6, r2
   8cd6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8cd6e:	bf22      	ittt	cs
   8cd70:	1ab6      	subcs	r6, r6, r2
   8cd72:	4675      	movcs	r5, lr
   8cd74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8cd78:	085b      	lsrs	r3, r3, #1
   8cd7a:	ea4f 0232 	mov.w	r2, r2, rrx
   8cd7e:	ebb6 0e02 	subs.w	lr, r6, r2
   8cd82:	eb75 0e03 	sbcs.w	lr, r5, r3
   8cd86:	bf22      	ittt	cs
   8cd88:	1ab6      	subcs	r6, r6, r2
   8cd8a:	4675      	movcs	r5, lr
   8cd8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8cd90:	085b      	lsrs	r3, r3, #1
   8cd92:	ea4f 0232 	mov.w	r2, r2, rrx
   8cd96:	ebb6 0e02 	subs.w	lr, r6, r2
   8cd9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8cd9e:	bf22      	ittt	cs
   8cda0:	1ab6      	subcs	r6, r6, r2
   8cda2:	4675      	movcs	r5, lr
   8cda4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8cda8:	ea55 0e06 	orrs.w	lr, r5, r6
   8cdac:	d018      	beq.n	8cde0 <__aeabi_ddiv+0x114>
   8cdae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8cdb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8cdb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8cdba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8cdbe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8cdc2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8cdc6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8cdca:	d1c0      	bne.n	8cd4e <__aeabi_ddiv+0x82>
   8cdcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8cdd0:	d10b      	bne.n	8cdea <__aeabi_ddiv+0x11e>
   8cdd2:	ea41 0100 	orr.w	r1, r1, r0
   8cdd6:	f04f 0000 	mov.w	r0, #0
   8cdda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8cdde:	e7b6      	b.n	8cd4e <__aeabi_ddiv+0x82>
   8cde0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8cde4:	bf04      	itt	eq
   8cde6:	4301      	orreq	r1, r0
   8cde8:	2000      	moveq	r0, #0
   8cdea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8cdee:	bf88      	it	hi
   8cdf0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8cdf4:	f63f aeaf 	bhi.w	8cb56 <__aeabi_dmul+0xde>
   8cdf8:	ebb5 0c03 	subs.w	ip, r5, r3
   8cdfc:	bf04      	itt	eq
   8cdfe:	ebb6 0c02 	subseq.w	ip, r6, r2
   8ce02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8ce06:	f150 0000 	adcs.w	r0, r0, #0
   8ce0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8ce0e:	bd70      	pop	{r4, r5, r6, pc}
   8ce10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8ce14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8ce18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8ce1c:	bfc2      	ittt	gt
   8ce1e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8ce22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8ce26:	bd70      	popgt	{r4, r5, r6, pc}
   8ce28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8ce2c:	f04f 0e00 	mov.w	lr, #0
   8ce30:	3c01      	subs	r4, #1
   8ce32:	e690      	b.n	8cb56 <__aeabi_dmul+0xde>
   8ce34:	ea45 0e06 	orr.w	lr, r5, r6
   8ce38:	e68d      	b.n	8cb56 <__aeabi_dmul+0xde>
   8ce3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8ce3e:	ea94 0f0c 	teq	r4, ip
   8ce42:	bf08      	it	eq
   8ce44:	ea95 0f0c 	teqeq	r5, ip
   8ce48:	f43f af3b 	beq.w	8ccc2 <__aeabi_dmul+0x24a>
   8ce4c:	ea94 0f0c 	teq	r4, ip
   8ce50:	d10a      	bne.n	8ce68 <__aeabi_ddiv+0x19c>
   8ce52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8ce56:	f47f af34 	bne.w	8ccc2 <__aeabi_dmul+0x24a>
   8ce5a:	ea95 0f0c 	teq	r5, ip
   8ce5e:	f47f af25 	bne.w	8ccac <__aeabi_dmul+0x234>
   8ce62:	4610      	mov	r0, r2
   8ce64:	4619      	mov	r1, r3
   8ce66:	e72c      	b.n	8ccc2 <__aeabi_dmul+0x24a>
   8ce68:	ea95 0f0c 	teq	r5, ip
   8ce6c:	d106      	bne.n	8ce7c <__aeabi_ddiv+0x1b0>
   8ce6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8ce72:	f43f aefd 	beq.w	8cc70 <__aeabi_dmul+0x1f8>
   8ce76:	4610      	mov	r0, r2
   8ce78:	4619      	mov	r1, r3
   8ce7a:	e722      	b.n	8ccc2 <__aeabi_dmul+0x24a>
   8ce7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8ce80:	bf18      	it	ne
   8ce82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8ce86:	f47f aec5 	bne.w	8cc14 <__aeabi_dmul+0x19c>
   8ce8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8ce8e:	f47f af0d 	bne.w	8ccac <__aeabi_dmul+0x234>
   8ce92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8ce96:	f47f aeeb 	bne.w	8cc70 <__aeabi_dmul+0x1f8>
   8ce9a:	e712      	b.n	8ccc2 <__aeabi_dmul+0x24a>

0008ce9c <__gedf2>:
   8ce9c:	f04f 3cff 	mov.w	ip, #4294967295
   8cea0:	e006      	b.n	8ceb0 <__cmpdf2+0x4>
   8cea2:	bf00      	nop

0008cea4 <__ledf2>:
   8cea4:	f04f 0c01 	mov.w	ip, #1
   8cea8:	e002      	b.n	8ceb0 <__cmpdf2+0x4>
   8ceaa:	bf00      	nop

0008ceac <__cmpdf2>:
   8ceac:	f04f 0c01 	mov.w	ip, #1
   8ceb0:	f84d cd04 	str.w	ip, [sp, #-4]!
   8ceb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8ceb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cebc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cec0:	bf18      	it	ne
   8cec2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8cec6:	d01b      	beq.n	8cf00 <__cmpdf2+0x54>
   8cec8:	b001      	add	sp, #4
   8ceca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8cece:	bf0c      	ite	eq
   8ced0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8ced4:	ea91 0f03 	teqne	r1, r3
   8ced8:	bf02      	ittt	eq
   8ceda:	ea90 0f02 	teqeq	r0, r2
   8cede:	2000      	moveq	r0, #0
   8cee0:	4770      	bxeq	lr
   8cee2:	f110 0f00 	cmn.w	r0, #0
   8cee6:	ea91 0f03 	teq	r1, r3
   8ceea:	bf58      	it	pl
   8ceec:	4299      	cmppl	r1, r3
   8ceee:	bf08      	it	eq
   8cef0:	4290      	cmpeq	r0, r2
   8cef2:	bf2c      	ite	cs
   8cef4:	17d8      	asrcs	r0, r3, #31
   8cef6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8cefa:	f040 0001 	orr.w	r0, r0, #1
   8cefe:	4770      	bx	lr
   8cf00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8cf04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cf08:	d102      	bne.n	8cf10 <__cmpdf2+0x64>
   8cf0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8cf0e:	d107      	bne.n	8cf20 <__cmpdf2+0x74>
   8cf10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cf14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cf18:	d1d6      	bne.n	8cec8 <__cmpdf2+0x1c>
   8cf1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8cf1e:	d0d3      	beq.n	8cec8 <__cmpdf2+0x1c>
   8cf20:	f85d 0b04 	ldr.w	r0, [sp], #4
   8cf24:	4770      	bx	lr
   8cf26:	bf00      	nop

0008cf28 <__aeabi_cdrcmple>:
   8cf28:	4684      	mov	ip, r0
   8cf2a:	4610      	mov	r0, r2
   8cf2c:	4662      	mov	r2, ip
   8cf2e:	468c      	mov	ip, r1
   8cf30:	4619      	mov	r1, r3
   8cf32:	4663      	mov	r3, ip
   8cf34:	e000      	b.n	8cf38 <__aeabi_cdcmpeq>
   8cf36:	bf00      	nop

0008cf38 <__aeabi_cdcmpeq>:
   8cf38:	b501      	push	{r0, lr}
   8cf3a:	f7ff ffb7 	bl	8ceac <__cmpdf2>
   8cf3e:	2800      	cmp	r0, #0
   8cf40:	bf48      	it	mi
   8cf42:	f110 0f00 	cmnmi.w	r0, #0
   8cf46:	bd01      	pop	{r0, pc}

0008cf48 <__aeabi_dcmpeq>:
   8cf48:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cf4c:	f7ff fff4 	bl	8cf38 <__aeabi_cdcmpeq>
   8cf50:	bf0c      	ite	eq
   8cf52:	2001      	moveq	r0, #1
   8cf54:	2000      	movne	r0, #0
   8cf56:	f85d fb08 	ldr.w	pc, [sp], #8
   8cf5a:	bf00      	nop

0008cf5c <__aeabi_dcmplt>:
   8cf5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cf60:	f7ff ffea 	bl	8cf38 <__aeabi_cdcmpeq>
   8cf64:	bf34      	ite	cc
   8cf66:	2001      	movcc	r0, #1
   8cf68:	2000      	movcs	r0, #0
   8cf6a:	f85d fb08 	ldr.w	pc, [sp], #8
   8cf6e:	bf00      	nop

0008cf70 <__aeabi_dcmple>:
   8cf70:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cf74:	f7ff ffe0 	bl	8cf38 <__aeabi_cdcmpeq>
   8cf78:	bf94      	ite	ls
   8cf7a:	2001      	movls	r0, #1
   8cf7c:	2000      	movhi	r0, #0
   8cf7e:	f85d fb08 	ldr.w	pc, [sp], #8
   8cf82:	bf00      	nop

0008cf84 <__aeabi_dcmpge>:
   8cf84:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cf88:	f7ff ffce 	bl	8cf28 <__aeabi_cdrcmple>
   8cf8c:	bf94      	ite	ls
   8cf8e:	2001      	movls	r0, #1
   8cf90:	2000      	movhi	r0, #0
   8cf92:	f85d fb08 	ldr.w	pc, [sp], #8
   8cf96:	bf00      	nop

0008cf98 <__aeabi_dcmpgt>:
   8cf98:	f84d ed08 	str.w	lr, [sp, #-8]!
   8cf9c:	f7ff ffc4 	bl	8cf28 <__aeabi_cdrcmple>
   8cfa0:	bf34      	ite	cc
   8cfa2:	2001      	movcc	r0, #1
   8cfa4:	2000      	movcs	r0, #0
   8cfa6:	f85d fb08 	ldr.w	pc, [sp], #8
   8cfaa:	bf00      	nop

0008cfac <__aeabi_dcmpun>:
   8cfac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8cfb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cfb4:	d102      	bne.n	8cfbc <__aeabi_dcmpun+0x10>
   8cfb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8cfba:	d10a      	bne.n	8cfd2 <__aeabi_dcmpun+0x26>
   8cfbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cfc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cfc4:	d102      	bne.n	8cfcc <__aeabi_dcmpun+0x20>
   8cfc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8cfca:	d102      	bne.n	8cfd2 <__aeabi_dcmpun+0x26>
   8cfcc:	f04f 0000 	mov.w	r0, #0
   8cfd0:	4770      	bx	lr
   8cfd2:	f04f 0001 	mov.w	r0, #1
   8cfd6:	4770      	bx	lr

0008cfd8 <__aeabi_d2iz>:
   8cfd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8cfdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8cfe0:	d215      	bcs.n	8d00e <__aeabi_d2iz+0x36>
   8cfe2:	d511      	bpl.n	8d008 <__aeabi_d2iz+0x30>
   8cfe4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8cfe8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8cfec:	d912      	bls.n	8d014 <__aeabi_d2iz+0x3c>
   8cfee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8cff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8cff6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8cffa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8cffe:	fa23 f002 	lsr.w	r0, r3, r2
   8d002:	bf18      	it	ne
   8d004:	4240      	negne	r0, r0
   8d006:	4770      	bx	lr
   8d008:	f04f 0000 	mov.w	r0, #0
   8d00c:	4770      	bx	lr
   8d00e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8d012:	d105      	bne.n	8d020 <__aeabi_d2iz+0x48>
   8d014:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8d018:	bf08      	it	eq
   8d01a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8d01e:	4770      	bx	lr
   8d020:	f04f 0000 	mov.w	r0, #0
   8d024:	4770      	bx	lr
   8d026:	bf00      	nop

0008d028 <__aeabi_uldivmod>:
   8d028:	b953      	cbnz	r3, 8d040 <__aeabi_uldivmod+0x18>
   8d02a:	b94a      	cbnz	r2, 8d040 <__aeabi_uldivmod+0x18>
   8d02c:	2900      	cmp	r1, #0
   8d02e:	bf08      	it	eq
   8d030:	2800      	cmpeq	r0, #0
   8d032:	bf1c      	itt	ne
   8d034:	f04f 31ff 	movne.w	r1, #4294967295
   8d038:	f04f 30ff 	movne.w	r0, #4294967295
   8d03c:	f000 b96e 	b.w	8d31c <__aeabi_idiv0>
   8d040:	f1ad 0c08 	sub.w	ip, sp, #8
   8d044:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8d048:	f000 f806 	bl	8d058 <__udivmoddi4>
   8d04c:	f8dd e004 	ldr.w	lr, [sp, #4]
   8d050:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8d054:	b004      	add	sp, #16
   8d056:	4770      	bx	lr

0008d058 <__udivmoddi4>:
   8d058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8d05c:	9e08      	ldr	r6, [sp, #32]
   8d05e:	460d      	mov	r5, r1
   8d060:	4604      	mov	r4, r0
   8d062:	468e      	mov	lr, r1
   8d064:	2b00      	cmp	r3, #0
   8d066:	f040 8083 	bne.w	8d170 <__udivmoddi4+0x118>
   8d06a:	428a      	cmp	r2, r1
   8d06c:	4617      	mov	r7, r2
   8d06e:	d947      	bls.n	8d100 <__udivmoddi4+0xa8>
   8d070:	fab2 f382 	clz	r3, r2
   8d074:	b14b      	cbz	r3, 8d08a <__udivmoddi4+0x32>
   8d076:	f1c3 0120 	rsb	r1, r3, #32
   8d07a:	fa05 fe03 	lsl.w	lr, r5, r3
   8d07e:	fa20 f101 	lsr.w	r1, r0, r1
   8d082:	409f      	lsls	r7, r3
   8d084:	ea41 0e0e 	orr.w	lr, r1, lr
   8d088:	409c      	lsls	r4, r3
   8d08a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   8d08e:	fbbe fcf8 	udiv	ip, lr, r8
   8d092:	fa1f f987 	uxth.w	r9, r7
   8d096:	fb08 e21c 	mls	r2, r8, ip, lr
   8d09a:	fb0c f009 	mul.w	r0, ip, r9
   8d09e:	0c21      	lsrs	r1, r4, #16
   8d0a0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   8d0a4:	4290      	cmp	r0, r2
   8d0a6:	d90a      	bls.n	8d0be <__udivmoddi4+0x66>
   8d0a8:	18ba      	adds	r2, r7, r2
   8d0aa:	f10c 31ff 	add.w	r1, ip, #4294967295
   8d0ae:	f080 8118 	bcs.w	8d2e2 <__udivmoddi4+0x28a>
   8d0b2:	4290      	cmp	r0, r2
   8d0b4:	f240 8115 	bls.w	8d2e2 <__udivmoddi4+0x28a>
   8d0b8:	f1ac 0c02 	sub.w	ip, ip, #2
   8d0bc:	443a      	add	r2, r7
   8d0be:	1a12      	subs	r2, r2, r0
   8d0c0:	fbb2 f0f8 	udiv	r0, r2, r8
   8d0c4:	fb08 2210 	mls	r2, r8, r0, r2
   8d0c8:	fb00 f109 	mul.w	r1, r0, r9
   8d0cc:	b2a4      	uxth	r4, r4
   8d0ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   8d0d2:	42a1      	cmp	r1, r4
   8d0d4:	d909      	bls.n	8d0ea <__udivmoddi4+0x92>
   8d0d6:	193c      	adds	r4, r7, r4
   8d0d8:	f100 32ff 	add.w	r2, r0, #4294967295
   8d0dc:	f080 8103 	bcs.w	8d2e6 <__udivmoddi4+0x28e>
   8d0e0:	42a1      	cmp	r1, r4
   8d0e2:	f240 8100 	bls.w	8d2e6 <__udivmoddi4+0x28e>
   8d0e6:	3802      	subs	r0, #2
   8d0e8:	443c      	add	r4, r7
   8d0ea:	1a64      	subs	r4, r4, r1
   8d0ec:	2100      	movs	r1, #0
   8d0ee:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8d0f2:	b11e      	cbz	r6, 8d0fc <__udivmoddi4+0xa4>
   8d0f4:	2200      	movs	r2, #0
   8d0f6:	40dc      	lsrs	r4, r3
   8d0f8:	e9c6 4200 	strd	r4, r2, [r6]
   8d0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d100:	b902      	cbnz	r2, 8d104 <__udivmoddi4+0xac>
   8d102:	deff      	udf	#255	; 0xff
   8d104:	fab2 f382 	clz	r3, r2
   8d108:	2b00      	cmp	r3, #0
   8d10a:	d14f      	bne.n	8d1ac <__udivmoddi4+0x154>
   8d10c:	1a8d      	subs	r5, r1, r2
   8d10e:	2101      	movs	r1, #1
   8d110:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   8d114:	fa1f f882 	uxth.w	r8, r2
   8d118:	fbb5 fcfe 	udiv	ip, r5, lr
   8d11c:	fb0e 551c 	mls	r5, lr, ip, r5
   8d120:	fb08 f00c 	mul.w	r0, r8, ip
   8d124:	0c22      	lsrs	r2, r4, #16
   8d126:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   8d12a:	42a8      	cmp	r0, r5
   8d12c:	d907      	bls.n	8d13e <__udivmoddi4+0xe6>
   8d12e:	197d      	adds	r5, r7, r5
   8d130:	f10c 32ff 	add.w	r2, ip, #4294967295
   8d134:	d202      	bcs.n	8d13c <__udivmoddi4+0xe4>
   8d136:	42a8      	cmp	r0, r5
   8d138:	f200 80e9 	bhi.w	8d30e <__udivmoddi4+0x2b6>
   8d13c:	4694      	mov	ip, r2
   8d13e:	1a2d      	subs	r5, r5, r0
   8d140:	fbb5 f0fe 	udiv	r0, r5, lr
   8d144:	fb0e 5510 	mls	r5, lr, r0, r5
   8d148:	fb08 f800 	mul.w	r8, r8, r0
   8d14c:	b2a4      	uxth	r4, r4
   8d14e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8d152:	45a0      	cmp	r8, r4
   8d154:	d907      	bls.n	8d166 <__udivmoddi4+0x10e>
   8d156:	193c      	adds	r4, r7, r4
   8d158:	f100 32ff 	add.w	r2, r0, #4294967295
   8d15c:	d202      	bcs.n	8d164 <__udivmoddi4+0x10c>
   8d15e:	45a0      	cmp	r8, r4
   8d160:	f200 80d9 	bhi.w	8d316 <__udivmoddi4+0x2be>
   8d164:	4610      	mov	r0, r2
   8d166:	eba4 0408 	sub.w	r4, r4, r8
   8d16a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8d16e:	e7c0      	b.n	8d0f2 <__udivmoddi4+0x9a>
   8d170:	428b      	cmp	r3, r1
   8d172:	d908      	bls.n	8d186 <__udivmoddi4+0x12e>
   8d174:	2e00      	cmp	r6, #0
   8d176:	f000 80b1 	beq.w	8d2dc <__udivmoddi4+0x284>
   8d17a:	2100      	movs	r1, #0
   8d17c:	e9c6 0500 	strd	r0, r5, [r6]
   8d180:	4608      	mov	r0, r1
   8d182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d186:	fab3 f183 	clz	r1, r3
   8d18a:	2900      	cmp	r1, #0
   8d18c:	d14b      	bne.n	8d226 <__udivmoddi4+0x1ce>
   8d18e:	42ab      	cmp	r3, r5
   8d190:	d302      	bcc.n	8d198 <__udivmoddi4+0x140>
   8d192:	4282      	cmp	r2, r0
   8d194:	f200 80b9 	bhi.w	8d30a <__udivmoddi4+0x2b2>
   8d198:	1a84      	subs	r4, r0, r2
   8d19a:	eb65 0303 	sbc.w	r3, r5, r3
   8d19e:	2001      	movs	r0, #1
   8d1a0:	469e      	mov	lr, r3
   8d1a2:	2e00      	cmp	r6, #0
   8d1a4:	d0aa      	beq.n	8d0fc <__udivmoddi4+0xa4>
   8d1a6:	e9c6 4e00 	strd	r4, lr, [r6]
   8d1aa:	e7a7      	b.n	8d0fc <__udivmoddi4+0xa4>
   8d1ac:	409f      	lsls	r7, r3
   8d1ae:	f1c3 0220 	rsb	r2, r3, #32
   8d1b2:	40d1      	lsrs	r1, r2
   8d1b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   8d1b8:	fbb1 f0fe 	udiv	r0, r1, lr
   8d1bc:	fa1f f887 	uxth.w	r8, r7
   8d1c0:	fb0e 1110 	mls	r1, lr, r0, r1
   8d1c4:	fa24 f202 	lsr.w	r2, r4, r2
   8d1c8:	409d      	lsls	r5, r3
   8d1ca:	fb00 fc08 	mul.w	ip, r0, r8
   8d1ce:	432a      	orrs	r2, r5
   8d1d0:	0c15      	lsrs	r5, r2, #16
   8d1d2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8d1d6:	45ac      	cmp	ip, r5
   8d1d8:	fa04 f403 	lsl.w	r4, r4, r3
   8d1dc:	d909      	bls.n	8d1f2 <__udivmoddi4+0x19a>
   8d1de:	197d      	adds	r5, r7, r5
   8d1e0:	f100 31ff 	add.w	r1, r0, #4294967295
   8d1e4:	f080 808f 	bcs.w	8d306 <__udivmoddi4+0x2ae>
   8d1e8:	45ac      	cmp	ip, r5
   8d1ea:	f240 808c 	bls.w	8d306 <__udivmoddi4+0x2ae>
   8d1ee:	3802      	subs	r0, #2
   8d1f0:	443d      	add	r5, r7
   8d1f2:	eba5 050c 	sub.w	r5, r5, ip
   8d1f6:	fbb5 f1fe 	udiv	r1, r5, lr
   8d1fa:	fb0e 5c11 	mls	ip, lr, r1, r5
   8d1fe:	fb01 f908 	mul.w	r9, r1, r8
   8d202:	b295      	uxth	r5, r2
   8d204:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   8d208:	45a9      	cmp	r9, r5
   8d20a:	d907      	bls.n	8d21c <__udivmoddi4+0x1c4>
   8d20c:	197d      	adds	r5, r7, r5
   8d20e:	f101 32ff 	add.w	r2, r1, #4294967295
   8d212:	d274      	bcs.n	8d2fe <__udivmoddi4+0x2a6>
   8d214:	45a9      	cmp	r9, r5
   8d216:	d972      	bls.n	8d2fe <__udivmoddi4+0x2a6>
   8d218:	3902      	subs	r1, #2
   8d21a:	443d      	add	r5, r7
   8d21c:	eba5 0509 	sub.w	r5, r5, r9
   8d220:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   8d224:	e778      	b.n	8d118 <__udivmoddi4+0xc0>
   8d226:	f1c1 0720 	rsb	r7, r1, #32
   8d22a:	408b      	lsls	r3, r1
   8d22c:	fa22 fc07 	lsr.w	ip, r2, r7
   8d230:	ea4c 0c03 	orr.w	ip, ip, r3
   8d234:	fa25 f407 	lsr.w	r4, r5, r7
   8d238:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   8d23c:	fbb4 f9fe 	udiv	r9, r4, lr
   8d240:	fa1f f88c 	uxth.w	r8, ip
   8d244:	fb0e 4419 	mls	r4, lr, r9, r4
   8d248:	fa20 f307 	lsr.w	r3, r0, r7
   8d24c:	fb09 fa08 	mul.w	sl, r9, r8
   8d250:	408d      	lsls	r5, r1
   8d252:	431d      	orrs	r5, r3
   8d254:	0c2b      	lsrs	r3, r5, #16
   8d256:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   8d25a:	45a2      	cmp	sl, r4
   8d25c:	fa02 f201 	lsl.w	r2, r2, r1
   8d260:	fa00 f301 	lsl.w	r3, r0, r1
   8d264:	d909      	bls.n	8d27a <__udivmoddi4+0x222>
   8d266:	eb1c 0404 	adds.w	r4, ip, r4
   8d26a:	f109 30ff 	add.w	r0, r9, #4294967295
   8d26e:	d248      	bcs.n	8d302 <__udivmoddi4+0x2aa>
   8d270:	45a2      	cmp	sl, r4
   8d272:	d946      	bls.n	8d302 <__udivmoddi4+0x2aa>
   8d274:	f1a9 0902 	sub.w	r9, r9, #2
   8d278:	4464      	add	r4, ip
   8d27a:	eba4 040a 	sub.w	r4, r4, sl
   8d27e:	fbb4 f0fe 	udiv	r0, r4, lr
   8d282:	fb0e 4410 	mls	r4, lr, r0, r4
   8d286:	fb00 fa08 	mul.w	sl, r0, r8
   8d28a:	b2ad      	uxth	r5, r5
   8d28c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8d290:	45a2      	cmp	sl, r4
   8d292:	d908      	bls.n	8d2a6 <__udivmoddi4+0x24e>
   8d294:	eb1c 0404 	adds.w	r4, ip, r4
   8d298:	f100 35ff 	add.w	r5, r0, #4294967295
   8d29c:	d22d      	bcs.n	8d2fa <__udivmoddi4+0x2a2>
   8d29e:	45a2      	cmp	sl, r4
   8d2a0:	d92b      	bls.n	8d2fa <__udivmoddi4+0x2a2>
   8d2a2:	3802      	subs	r0, #2
   8d2a4:	4464      	add	r4, ip
   8d2a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8d2aa:	fba0 8902 	umull	r8, r9, r0, r2
   8d2ae:	eba4 040a 	sub.w	r4, r4, sl
   8d2b2:	454c      	cmp	r4, r9
   8d2b4:	46c6      	mov	lr, r8
   8d2b6:	464d      	mov	r5, r9
   8d2b8:	d319      	bcc.n	8d2ee <__udivmoddi4+0x296>
   8d2ba:	d016      	beq.n	8d2ea <__udivmoddi4+0x292>
   8d2bc:	b15e      	cbz	r6, 8d2d6 <__udivmoddi4+0x27e>
   8d2be:	ebb3 020e 	subs.w	r2, r3, lr
   8d2c2:	eb64 0405 	sbc.w	r4, r4, r5
   8d2c6:	fa04 f707 	lsl.w	r7, r4, r7
   8d2ca:	fa22 f301 	lsr.w	r3, r2, r1
   8d2ce:	431f      	orrs	r7, r3
   8d2d0:	40cc      	lsrs	r4, r1
   8d2d2:	e9c6 7400 	strd	r7, r4, [r6]
   8d2d6:	2100      	movs	r1, #0
   8d2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d2dc:	4631      	mov	r1, r6
   8d2de:	4630      	mov	r0, r6
   8d2e0:	e70c      	b.n	8d0fc <__udivmoddi4+0xa4>
   8d2e2:	468c      	mov	ip, r1
   8d2e4:	e6eb      	b.n	8d0be <__udivmoddi4+0x66>
   8d2e6:	4610      	mov	r0, r2
   8d2e8:	e6ff      	b.n	8d0ea <__udivmoddi4+0x92>
   8d2ea:	4543      	cmp	r3, r8
   8d2ec:	d2e6      	bcs.n	8d2bc <__udivmoddi4+0x264>
   8d2ee:	ebb8 0e02 	subs.w	lr, r8, r2
   8d2f2:	eb69 050c 	sbc.w	r5, r9, ip
   8d2f6:	3801      	subs	r0, #1
   8d2f8:	e7e0      	b.n	8d2bc <__udivmoddi4+0x264>
   8d2fa:	4628      	mov	r0, r5
   8d2fc:	e7d3      	b.n	8d2a6 <__udivmoddi4+0x24e>
   8d2fe:	4611      	mov	r1, r2
   8d300:	e78c      	b.n	8d21c <__udivmoddi4+0x1c4>
   8d302:	4681      	mov	r9, r0
   8d304:	e7b9      	b.n	8d27a <__udivmoddi4+0x222>
   8d306:	4608      	mov	r0, r1
   8d308:	e773      	b.n	8d1f2 <__udivmoddi4+0x19a>
   8d30a:	4608      	mov	r0, r1
   8d30c:	e749      	b.n	8d1a2 <__udivmoddi4+0x14a>
   8d30e:	f1ac 0c02 	sub.w	ip, ip, #2
   8d312:	443d      	add	r5, r7
   8d314:	e713      	b.n	8d13e <__udivmoddi4+0xe6>
   8d316:	3802      	subs	r0, #2
   8d318:	443c      	add	r4, r7
   8d31a:	e724      	b.n	8d166 <__udivmoddi4+0x10e>

0008d31c <__aeabi_idiv0>:
   8d31c:	4770      	bx	lr
   8d31e:	bf00      	nop
   8d320:	78383025 	.word	0x78383025
   8d324:	00000000 	.word	0x00000000
   8d328:	62616e45 	.word	0x62616e45
   8d32c:	676e696c 	.word	0x676e696c
   8d330:	41535520 	.word	0x41535520
   8d334:	0a305452 	.word	0x0a305452
   8d338:	00000000 	.word	0x00000000
   8d33c:	3a525245 	.word	0x3a525245
   8d340:	766e4920 	.word	0x766e4920
   8d344:	64696c61 	.word	0x64696c61
   8d348:	41535520 	.word	0x41535520
   8d34c:	43205452 	.word	0x43205452
   8d350:	69666e6f 	.word	0x69666e6f
   8d354:	61727567 	.word	0x61727567
   8d358:	6e6f6974 	.word	0x6e6f6974
   8d35c:	63617020 	.word	0x63617020
   8d360:	3f74656b 	.word	0x3f74656b
   8d364:	0000000a 	.word	0x0000000a
   8d368:	00000000 	.word	0x00000000
   8d36c:	00000000 	.word	0x00000000
   8d370:	aaaaaa00 	.word	0xaaaaaa00
   8d374:	aaaaaaaa 	.word	0xaaaaaaaa
   8d378:	eeeeeeaa 	.word	0xeeeeeeaa
   8d37c:	eeeeeeee 	.word	0xeeeeeeee
   8d380:	fffffeee 	.word	0xfffffeee
   8d384:	ffffffff 	.word	0xffffffff
   8d388:	ffffffff 	.word	0xffffffff
   8d38c:	dfbf7fff 	.word	0xdfbf7fff
   8d390:	fdfbf7ef 	.word	0xfdfbf7ef
   8d394:	dfbf7efc 	.word	0xdfbf7efc
   8d398:	fdfbf7ef 	.word	0xfdfbf7ef
   8d39c:	0000007e 	.word	0x0000007e

0008d3a0 <BOS_DESC>:
   8d3a0:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8d3b0:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
   8d3c0:	00000000 74697845 20676e69 68746977     ....Exiting with
   8d3d0:	61747320 20737574 0a2e6425 00000000      status %d......

0008d3e0 <_global_impure_ptr>:
   8d3e0:	20000440 00464e49 00666e69 004e414e     @.. INF.inf.NAN.
   8d3f0:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8d400:	66656463 00000000 33323130 37363534     cdef....01234567
   8d410:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8d420:	0000296c 00000030                       l)..0...

0008d428 <blanks.7335>:
   8d428:	20202020 20202020 20202020 20202020                     

0008d438 <zeroes.7336>:
   8d438:	30303030 30303030 30303030 30303030     0000000000000000

0008d448 <blanks.7328>:
   8d448:	20202020 20202020 20202020 20202020                     

0008d458 <zeroes.7329>:
   8d458:	30303030 30303030 30303030 30303030     0000000000000000
   8d468:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8d478:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8d488:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8d498:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8d4a8:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8d4b8:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8d4c8:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8d4d8:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8d4e8:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8d4f8:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8d508:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8d518:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8d528:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8d538:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8d548:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8d558:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8d568:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8d578:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8d588:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....

0008d598 <__mprec_bigtens>:
   8d598:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8d5a8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8d5b8:	7f73bf3c 75154fdd                       <.s..O.u

0008d5c0 <__mprec_tens>:
   8d5c0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8d5d0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8d5e0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8d5f0:	00000000 412e8480 00000000 416312d0     .......A......cA
   8d600:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8d610:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8d620:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8d630:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8d640:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8d650:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8d660:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8d670:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8d680:	79d99db4 44ea7843                       ...yCx.D

0008d688 <p05.6122>:
   8d688:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8d698:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8d6a8:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8d6b8:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8d6c8:	2520656e 25732564 00000a73              ne %d%s%s...

0008d6d4 <_ctype_>:
   8d6d4:	20202000 20202020 28282020 20282828     .         ((((( 
   8d6e4:	20202020 20202020 20202020 20202020                     
   8d6f4:	10108820 10101010 10101010 10101010      ...............
   8d704:	04040410 04040404 10040404 10101010     ................
   8d714:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8d724:	01010101 01010101 01010101 10101010     ................
   8d734:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8d744:	02020202 02020202 02020202 10101010     ................
   8d754:	00000020 00000000 00000000 00000000      ...............
   8d764:	00000000 00000000 00000000 00000000     ................
   8d774:	00000000 00000000 00000000 00000000     ................
   8d784:	00000000 00000000 00000000 00000000     ................
   8d794:	00000000 00000000 00000000 00000000     ................
   8d7a4:	00000000 00000000 00000000 00000000     ................
   8d7b4:	00000000 00000000 00000000 00000000     ................
   8d7c4:	00000000 00000000 00000000 00000000     ................
   8d7d4:	00000000                                ....

0008d7d8 <_init>:
   8d7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d7da:	bf00      	nop
   8d7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d7de:	bc08      	pop	{r3}
   8d7e0:	469e      	mov	lr, r3
   8d7e2:	4770      	bx	lr

0008d7e4 <__init_array_start>:
   8d7e4:	00089305 	.word	0x00089305

0008d7e8 <__frame_dummy_init_array_entry>:
   8d7e8:	000800e1                                ....

0008d7ec <_fini>:
   8d7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d7ee:	bf00      	nop
   8d7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d7f2:	bc08      	pop	{r3}
   8d7f4:	469e      	mov	lr, r3
   8d7f6:	4770      	bx	lr

0008d7f8 <__do_global_dtors_aux_fini_array_entry>:
   8d7f8:	00bd 0008                                   ....
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	20000438 	.word	0x20000438
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d206      	bcs.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d208      	bcs.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e3600 	.word	0x016e3600
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	02625a00 	.word	0x02625a00
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	                                         .

2000027d <main_b_vendor_enable>:
2000027d:	                                         ...

20000280 <xram>:
20000280:	60000000                                ...`

<<<<<<< HEAD
20000284 <g_interrupt_enabled>:
20000284:	00000001                                ....

20000288 <SystemCoreClock>:
20000288:	003d0900                                ..=.

2000028c <udc_string_desc_languageid>:
2000028c:	04090304                                ....

20000290 <udc_string_manufacturer_name>:
20000290:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002a0:	636e4920 0000002e                        Inc....

200002a8 <udc_string_product_name>:
200002a8:	70696843 73696857 65726570 75482d72     ChipWhisperer-Hu
200002b8:	00796b73                                sky.

200002bc <udc_string_desc>:
200002bc:	00000300 00000000 00000000 00000000     ................
200002cc:	00000000 00000000 00000000 00000000     ................
200002dc:	00000000 00000000 00000000 00000000     ................
200002ec:	00000000 00000000 00000000 00000000     ................
200002fc:	00000000                                ....

20000300 <winusb_20_desc>:
20000300:	0000000a 06030000 0014009e 49570003     ..............WI
20000310:	4253554e 00000000 00000000 00800000     NUSB............
20000320:	00010004 00500028 00790068 00680057     ....(.P.h.y.W.h.
20000330:	00730069 00650070 00650072 00550072     i.s.p.e.r.e.r.U.
20000340:	00420053 00000000 00000000 004e0000     S.B...........N.
20000350:	0063007b 00650063 00320035 00310039     {.c.c.e.5.2.9.1.
20000360:	002d0063 00360061 00660039 0034002d     c.-.a.6.9.f.-.4.
20000370:	00390039 002d0035 00340061 00320063     9.9.5.-.a.4.c.2.
20000380:	0032002d 00650061 00370035 00350061     -.2.a.e.5.7.a.5.
20000390:	00610031 00650064 007d0039 00000000     1.a.d.e.9.}.....

200003a0 <udi_api_vendor>:
200003a0:	00084565 000845a5 000845c1 00084615     eE...E...E...F..
200003b0:	00000000                                ....

200003b4 <udc_device_desc>:
200003b4:	02000112 40000000 ace52b3e 02010100     .......@>+......
200003c4:	00000103                                ....

200003c8 <udc_device_qual>:
200003c8:	0200060a 40000000 00000001              .......@....

200003d4 <udc_desc_fs>:
200003d4:	00200209 80000101 000409fa ffff0200     .. .............
200003e4:	050700ff 00400281 02050700 00004002     ......@......@..

200003f4 <udc_desc_hs>:
200003f4:	00200209 80000101 000409fa ffff0200     .. .............
20000404:	050700ff 02000281 02050700 00020002     ................

20000414 <udi_apis>:
20000414:	200003a0                                ... 

20000418 <udc_config_lsfs>:
20000418:	200003d4 20000414                       ... ... 

20000420 <udc_config_hs>:
20000420:	200003f4 20000414                       ... ... 

20000428 <udc_config>:
20000428:	200003b4 20000418 200003b4 200003c8     ... ... ... ... 
20000438:	20000420 00000000                        .. ....

20000440 <_impure_ptr>:
20000440:	20000448 00000000                       H.. ....

20000448 <impure_data>:
20000448:	00000000 20000734 2000079c 20000804     ....4.. ... ... 
20000458:	00000000 00000000 00000000 00000000     ................
20000468:	00000000 00000000 00000000 00000000     ................
20000478:	00000000 00000000 00000000 00000000     ................
20000488:	00000000 00000000 00000000 00000000     ................
20000498:	00000000 00000000 00000000 00000000     ................
200004a8:	00000000 00000000 00000000 00000000     ................
200004b8:	00000000 00000000 00000000 00000000     ................
200004c8:	00000000 00000000 00000000 00000000     ................
200004d8:	00000000 00000000 00000000 00000000     ................
200004e8:	00000000 00000000 00000001 00000000     ................
200004f8:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000508:	00000000 00000000 00000000 00000000     ................
20000518:	00000000 00000000 00000000 00000000     ................
20000528:	00000000 00000000 00000000 00000000     ................
20000538:	00000000 00000000 00000000 00000000     ................
20000548:	00000000 00000000 00000000 00000000     ................
20000558:	00000000 00000000 00000000 00000000     ................
20000568:	00000000 00000000 00000000 00000000     ................
20000578:	00000000 00000000 00000000 00000000     ................
20000588:	00000000 00000000 00000000 00000000     ................
20000598:	00000000 00000000 00000000 00000000     ................
200005a8:	00000000 00000000 00000000 00000000     ................
200005b8:	00000000 00000000 00000000 00000000     ................
200005c8:	00000000 00000000 00000000 00000000     ................
200005d8:	00000000 00000000 00000000 00000000     ................
200005e8:	00000000 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000 00000000 00000000 00000000     ................
20000638:	00000000 00000000 00000000 00000000     ................
20000648:	00000000 00000000 00000000 00000000     ................
20000658:	00000000 00000000 00000000 00000000     ................
20000668:	00000000 00000000 00000000 00000000     ................
20000678:	00000000 00000000 00000000 00000000     ................
20000688:	00000000 00000000 00000000 00000000     ................
20000698:	00000000 00000000 00000000 00000000     ................
200006a8:	00000000 00000000 00000000 00000000     ................
200006b8:	00000000 00000000 00000000 00000000     ................
200006c8:	00000000 00000000 00000000 00000000     ................
200006d8:	00000000 00000000 00000000 00000000     ................
200006e8:	00000000 00000000 00000000 00000000     ................
200006f8:	00000000 00000000 00000000 00000000     ................
20000708:	00000000 00000000 00000000 00000000     ................
20000718:	00000000 00000000 00000000 00000000     ................
20000728:	00000000 00000000 00000000 00000000     ................
20000738:	00000000 00000000 00000000 00000000     ................
20000748:	00000000 00000000 00000000 00000000     ................
20000758:	00000000 00000000 00000000 00000000     ................
20000768:	00000000 00000000 00000000 00000000     ................
20000778:	00000000 00000000 00000000 00000000     ................
20000788:	00000000 00000000 00000000 00000000     ................
20000798:	00000000 00000000 00000000 00000000     ................
200007a8:	00000000 00000000 00000000 00000000     ................
200007b8:	00000000 00000000 00000000 00000000     ................
200007c8:	00000000 00000000 00000000 00000000     ................
200007d8:	00000000 00000000 00000000 00000000     ................
200007e8:	00000000 00000000 00000000 00000000     ................
200007f8:	00000000 00000000 00000000 00000000     ................
20000808:	00000000 00000000 00000000 00000000     ................
20000818:	00000000 00000000 00000000 00000000     ................
20000828:	00000000 00000000 00000000 00000000     ................
20000838:	00000000 00000000 00000000 00000000     ................
20000848:	00000000 00000000 00000000 00000000     ................
20000858:	00000000 00000000 00000000 00000000     ................
20000868:	00000000 00000000                       ........

20000870 <__atexit_recursive_mutex>:
20000870:	20001848                                H.. 

20000874 <__global_locale>:
20000874:	00000043 00000000 00000000 00000000     C...............
20000884:	00000000 00000000 00000000 00000000     ................
20000894:	00000043 00000000 00000000 00000000     C...............
200008a4:	00000000 00000000 00000000 00000000     ................
200008b4:	00000043 00000000 00000000 00000000     C...............
200008c4:	00000000 00000000 00000000 00000000     ................
200008d4:	00000043 00000000 00000000 00000000     C...............
200008e4:	00000000 00000000 00000000 00000000     ................
200008f4:	00000043 00000000 00000000 00000000     C...............
20000904:	00000000 00000000 00000000 00000000     ................
20000914:	00000043 00000000 00000000 00000000     C...............
20000924:	00000000 00000000 00000000 00000000     ................
20000934:	00000043 00000000 00000000 00000000     C...............
20000944:	00000000 00000000 00000000 00000000     ................
20000954:	0008c721 0008b6e9 00000000 0008d7d4     !...............
20000964:	0008d614 0008d7a0 0008d7a0 0008d7a0     ................
20000974:	0008d7a0 0008d7a0 0008d7a0 0008d7a0     ................
20000984:	0008d7a0 0008d7a0 ffffffff ffffffff     ................
20000994:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
200009a4:	00000000 00000000 00000000 00000000     ................
200009b4:	00000000 00000000 53410000 00494943     ..........ASCII.
200009c4:	00000000 00000000 00000000 00000000     ................
200009d4:	00000000 00000000 00000000              ............

200009e0 <__malloc_av_>:
200009e0:	00000000 00000000 200009e0 200009e0     ........... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68 20000d70 20000d70     h.. h.. p.. p.. 
20000d80:	20000d78 20000d78 20000d80 20000d80     x.. x.. ... ... 
20000d90:	20000d88 20000d88 20000d90 20000d90     ... ... ... ... 
20000da0:	20000d98 20000d98 20000da0 20000da0     ... ... ... ... 
20000db0:	20000da8 20000da8 20000db0 20000db0     ... ... ... ... 
20000dc0:	20000db8 20000db8 20000dc0 20000dc0     ... ... ... ... 
20000dd0:	20000dc8 20000dc8 20000dd0 20000dd0     ... ... ... ... 
20000de0:	20000dd8 20000dd8                       ... ... 

20000de8 <__malloc_sbrk_base>:
20000de8:	ffffffff                                ....

20000dec <__malloc_trim_threshold>:
20000dec:	00020000                                ....
=======
20000284 <udi_api_vendor>:
20000284:	00084809 00084849 00084865 000848b9     .H..IH..eH...H..
20000294:	00000000                                ....

20000298 <udc_string_desc_languageid>:
20000298:	04090304                                ....

2000029c <udc_string_manufacturer_name>:
2000029c:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002ac:	636e4920 0000002e                        Inc....

200002b4 <udc_string_product_name>:
200002b4:	70696843 73696857 65726570 75482d72     ChipWhisperer-Hu
200002c4:	00796b73                                sky.

200002c8 <udc_string_desc>:
200002c8:	00000300 00000000 00000000 00000000     ................
200002d8:	00000000 00000000 00000000 00000000     ................
200002e8:	00000000 00000000 00000000 00000000     ................
200002f8:	00000000 00000000 00000000 00000000     ................
20000308:	00000000                                ....

2000030c <winusb_20_desc>:
2000030c:	0000000a 06030000 0014009e 49570003     ..............WI
2000031c:	4253554e 00000000 00000000 00800000     NUSB............
2000032c:	00010004 00500028 00790068 00680057     ....(.P.h.y.W.h.
2000033c:	00730069 00650070 00650072 00550072     i.s.p.e.r.e.r.U.
2000034c:	00420053 00000000 00000000 004e0000     S.B...........N.
2000035c:	0063007b 00650063 00320035 00310039     {.c.c.e.5.2.9.1.
2000036c:	002d0063 00360061 00660039 0034002d     c.-.a.6.9.f.-.4.
2000037c:	00390039 002d0035 00340061 00320063     9.9.5.-.a.4.c.2.
2000038c:	0032002d 00650061 00370035 00350061     -.2.a.e.5.7.a.5.
2000039c:	00610031 00650064 007d0039               1.a.d.e.9.}...

200003aa <g_interrupt_enabled>:
200003aa:	                                         ..

200003ac <udc_device_desc>:
200003ac:	02000112 40000000 ace52b3e 02010100     .......@>+......
200003bc:	00000103                                ....

200003c0 <udc_device_qual>:
200003c0:	0200060a 40000000 00000001              .......@....

200003cc <udc_desc_fs>:
200003cc:	00200209 80000101 000409fa ffff0200     .. .............
200003dc:	050700ff 00400281 02050700 00004002     ......@......@..

200003ec <udc_desc_hs>:
200003ec:	00200209 80000101 000409fa ffff0200     .. .............
200003fc:	050700ff 02000281 02050700 00020002     ................

2000040c <udi_apis>:
2000040c:	20000284                                ... 

20000410 <udc_config_lsfs>:
20000410:	200003cc 2000040c                       ... ... 

20000418 <udc_config_hs>:
20000418:	200003ec 2000040c                       ... ... 

20000420 <udc_config>:
20000420:	200003ac 20000410 200003ac 200003c0     ... ... ... ... 
20000430:	20000418 00000000                       ... ....

20000438 <SystemCoreClock>:
20000438:	003d0900                                ..=.

2000043c <_impure_ptr>:
2000043c:	20000440                                @.. 

20000440 <impure_data>:
20000440:	00000000 2000072c 20000794 200007fc     ....,.. ... ... 
20000450:	00000000 00000000 00000000 00000000     ................
20000460:	00000000 00000000 00000000 00000000     ................
20000470:	00000000 00000000 00000000 00000000     ................
20000480:	00000000 00000000 00000000 00000000     ................
20000490:	00000000 00000000 00000000 00000000     ................
200004a0:	00000000 00000000 00000000 00000000     ................
200004b0:	00000000 00000000 00000000 00000000     ................
200004c0:	00000000 00000000 00000000 00000000     ................
200004d0:	00000000 00000000 00000000 00000000     ................
200004e0:	00000000 00000000 00000001 00000000     ................
200004f0:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000500:	00000000 00000000 00000000 00000000     ................
20000510:	00000000 00000000 00000000 00000000     ................
20000520:	00000000 00000000 00000000 00000000     ................
20000530:	00000000 00000000 00000000 00000000     ................
20000540:	00000000 00000000 00000000 00000000     ................
20000550:	00000000 00000000 00000000 00000000     ................
20000560:	00000000 00000000 00000000 00000000     ................
20000570:	00000000 00000000 00000000 00000000     ................
20000580:	00000000 00000000 00000000 00000000     ................
20000590:	00000000 00000000 00000000 00000000     ................
200005a0:	00000000 00000000 00000000 00000000     ................
200005b0:	00000000 00000000 00000000 00000000     ................
200005c0:	00000000 00000000 00000000 00000000     ................
200005d0:	00000000 00000000 00000000 00000000     ................
200005e0:	00000000 00000000 00000000 00000000     ................
200005f0:	00000000 00000000 00000000 00000000     ................
20000600:	00000000 00000000 00000000 00000000     ................
20000610:	00000000 00000000 00000000 00000000     ................
20000620:	00000000 00000000 00000000 00000000     ................
20000630:	00000000 00000000 00000000 00000000     ................
20000640:	00000000 00000000 00000000 00000000     ................
20000650:	00000000 00000000 00000000 00000000     ................
20000660:	00000000 00000000 00000000 00000000     ................
20000670:	00000000 00000000 00000000 00000000     ................
20000680:	00000000 00000000 00000000 00000000     ................
20000690:	00000000 00000000 00000000 00000000     ................
200006a0:	00000000 00000000 00000000 00000000     ................
200006b0:	00000000 00000000 00000000 00000000     ................
200006c0:	00000000 00000000 00000000 00000000     ................
200006d0:	00000000 00000000 00000000 00000000     ................
200006e0:	00000000 00000000 00000000 00000000     ................
200006f0:	00000000 00000000 00000000 00000000     ................
20000700:	00000000 00000000 00000000 00000000     ................
20000710:	00000000 00000000 00000000 00000000     ................
20000720:	00000000 00000000 00000000 00000000     ................
20000730:	00000000 00000000 00000000 00000000     ................
20000740:	00000000 00000000 00000000 00000000     ................
20000750:	00000000 00000000 00000000 00000000     ................
20000760:	00000000 00000000 00000000 00000000     ................
20000770:	00000000 00000000 00000000 00000000     ................
20000780:	00000000 00000000 00000000 00000000     ................
20000790:	00000000 00000000 00000000 00000000     ................
200007a0:	00000000 00000000 00000000 00000000     ................
200007b0:	00000000 00000000 00000000 00000000     ................
200007c0:	00000000 00000000 00000000 00000000     ................
200007d0:	00000000 00000000 00000000 00000000     ................
200007e0:	00000000 00000000 00000000 00000000     ................
200007f0:	00000000 00000000 00000000 00000000     ................
20000800:	00000000 00000000 00000000 00000000     ................
20000810:	00000000 00000000 00000000 00000000     ................
20000820:	00000000 00000000 00000000 00000000     ................
20000830:	00000000 00000000 00000000 00000000     ................
20000840:	00000000 00000000 00000000 00000000     ................
20000850:	00000000 00000000 00000000 00000000     ................
20000860:	00000000 00000000                       ........

20000868 <__atexit_recursive_mutex>:
20000868:	2000183c                                <.. 

2000086c <__global_locale>:
2000086c:	00000043 00000000 00000000 00000000     C...............
2000087c:	00000000 00000000 00000000 00000000     ................
2000088c:	00000043 00000000 00000000 00000000     C...............
2000089c:	00000000 00000000 00000000 00000000     ................
200008ac:	00000043 00000000 00000000 00000000     C...............
200008bc:	00000000 00000000 00000000 00000000     ................
200008cc:	00000043 00000000 00000000 00000000     C...............
200008dc:	00000000 00000000 00000000 00000000     ................
200008ec:	00000043 00000000 00000000 00000000     C...............
200008fc:	00000000 00000000 00000000 00000000     ................
2000090c:	00000043 00000000 00000000 00000000     C...............
2000091c:	00000000 00000000 00000000 00000000     ................
2000092c:	00000043 00000000 00000000 00000000     C...............
2000093c:	00000000 00000000 00000000 00000000     ................
2000094c:	0008c329 0008b2f1 00000000 0008d6d4     )...............
2000095c:	0008d514 0008d6a0 0008d6a0 0008d6a0     ................
2000096c:	0008d6a0 0008d6a0 0008d6a0 0008d6a0     ................
2000097c:	0008d6a0 0008d6a0 ffffffff ffffffff     ................
2000098c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
2000099c:	00000000 00000000 00000000 00000000     ................
200009ac:	00000000 00000000 53410000 00494943     ..........ASCII.
200009bc:	00000000 00000000 00000000 00000000     ................
200009cc:	00000000 00000000 00000000              ............

200009d8 <__malloc_av_>:
200009d8:	00000000 00000000 200009d8 200009d8     ........... ... 
200009e8:	200009e0 200009e0 200009e8 200009e8     ... ... ... ... 
200009f8:	200009f0 200009f0 200009f8 200009f8     ... ... ... ... 
20000a08:	20000a00 20000a00 20000a08 20000a08     ... ... ... ... 
20000a18:	20000a10 20000a10 20000a18 20000a18     ... ... ... ... 
20000a28:	20000a20 20000a20 20000a28 20000a28      ..  .. (.. (.. 
20000a38:	20000a30 20000a30 20000a38 20000a38     0.. 0.. 8.. 8.. 
20000a48:	20000a40 20000a40 20000a48 20000a48     @.. @.. H.. H.. 
20000a58:	20000a50 20000a50 20000a58 20000a58     P.. P.. X.. X.. 
20000a68:	20000a60 20000a60 20000a68 20000a68     `.. `.. h.. h.. 
20000a78:	20000a70 20000a70 20000a78 20000a78     p.. p.. x.. x.. 
20000a88:	20000a80 20000a80 20000a88 20000a88     ... ... ... ... 
20000a98:	20000a90 20000a90 20000a98 20000a98     ... ... ... ... 
20000aa8:	20000aa0 20000aa0 20000aa8 20000aa8     ... ... ... ... 
20000ab8:	20000ab0 20000ab0 20000ab8 20000ab8     ... ... ... ... 
20000ac8:	20000ac0 20000ac0 20000ac8 20000ac8     ... ... ... ... 
20000ad8:	20000ad0 20000ad0 20000ad8 20000ad8     ... ... ... ... 
20000ae8:	20000ae0 20000ae0 20000ae8 20000ae8     ... ... ... ... 
20000af8:	20000af0 20000af0 20000af8 20000af8     ... ... ... ... 
20000b08:	20000b00 20000b00 20000b08 20000b08     ... ... ... ... 
20000b18:	20000b10 20000b10 20000b18 20000b18     ... ... ... ... 
20000b28:	20000b20 20000b20 20000b28 20000b28      ..  .. (.. (.. 
20000b38:	20000b30 20000b30 20000b38 20000b38     0.. 0.. 8.. 8.. 
20000b48:	20000b40 20000b40 20000b48 20000b48     @.. @.. H.. H.. 
20000b58:	20000b50 20000b50 20000b58 20000b58     P.. P.. X.. X.. 
20000b68:	20000b60 20000b60 20000b68 20000b68     `.. `.. h.. h.. 
20000b78:	20000b70 20000b70 20000b78 20000b78     p.. p.. x.. x.. 
20000b88:	20000b80 20000b80 20000b88 20000b88     ... ... ... ... 
20000b98:	20000b90 20000b90 20000b98 20000b98     ... ... ... ... 
20000ba8:	20000ba0 20000ba0 20000ba8 20000ba8     ... ... ... ... 
20000bb8:	20000bb0 20000bb0 20000bb8 20000bb8     ... ... ... ... 
20000bc8:	20000bc0 20000bc0 20000bc8 20000bc8     ... ... ... ... 
20000bd8:	20000bd0 20000bd0 20000bd8 20000bd8     ... ... ... ... 
20000be8:	20000be0 20000be0 20000be8 20000be8     ... ... ... ... 
20000bf8:	20000bf0 20000bf0 20000bf8 20000bf8     ... ... ... ... 
20000c08:	20000c00 20000c00 20000c08 20000c08     ... ... ... ... 
20000c18:	20000c10 20000c10 20000c18 20000c18     ... ... ... ... 
20000c28:	20000c20 20000c20 20000c28 20000c28      ..  .. (.. (.. 
20000c38:	20000c30 20000c30 20000c38 20000c38     0.. 0.. 8.. 8.. 
20000c48:	20000c40 20000c40 20000c48 20000c48     @.. @.. H.. H.. 
20000c58:	20000c50 20000c50 20000c58 20000c58     P.. P.. X.. X.. 
20000c68:	20000c60 20000c60 20000c68 20000c68     `.. `.. h.. h.. 
20000c78:	20000c70 20000c70 20000c78 20000c78     p.. p.. x.. x.. 
20000c88:	20000c80 20000c80 20000c88 20000c88     ... ... ... ... 
20000c98:	20000c90 20000c90 20000c98 20000c98     ... ... ... ... 
20000ca8:	20000ca0 20000ca0 20000ca8 20000ca8     ... ... ... ... 
20000cb8:	20000cb0 20000cb0 20000cb8 20000cb8     ... ... ... ... 
20000cc8:	20000cc0 20000cc0 20000cc8 20000cc8     ... ... ... ... 
20000cd8:	20000cd0 20000cd0 20000cd8 20000cd8     ... ... ... ... 
20000ce8:	20000ce0 20000ce0 20000ce8 20000ce8     ... ... ... ... 
20000cf8:	20000cf0 20000cf0 20000cf8 20000cf8     ... ... ... ... 
20000d08:	20000d00 20000d00 20000d08 20000d08     ... ... ... ... 
20000d18:	20000d10 20000d10 20000d18 20000d18     ... ... ... ... 
20000d28:	20000d20 20000d20 20000d28 20000d28      ..  .. (.. (.. 
20000d38:	20000d30 20000d30 20000d38 20000d38     0.. 0.. 8.. 8.. 
20000d48:	20000d40 20000d40 20000d48 20000d48     @.. @.. H.. H.. 
20000d58:	20000d50 20000d50 20000d58 20000d58     P.. P.. X.. X.. 
20000d68:	20000d60 20000d60 20000d68 20000d68     `.. `.. h.. h.. 
20000d78:	20000d70 20000d70 20000d78 20000d78     p.. p.. x.. x.. 
20000d88:	20000d80 20000d80 20000d88 20000d88     ... ... ... ... 
20000d98:	20000d90 20000d90 20000d98 20000d98     ... ... ... ... 
20000da8:	20000da0 20000da0 20000da8 20000da8     ... ... ... ... 
20000db8:	20000db0 20000db0 20000db8 20000db8     ... ... ... ... 
20000dc8:	20000dc0 20000dc0 20000dc8 20000dc8     ... ... ... ... 
20000dd8:	20000dd0 20000dd0                       ... ... 

20000de0 <__malloc_sbrk_base>:
20000de0:	ffffffff                                ....

20000de4 <__malloc_trim_threshold>:
20000de4:	00020000                                ....
>>>>>>> 3c4c97c0b5a1df9713d52af7eba97ec04196ae68
