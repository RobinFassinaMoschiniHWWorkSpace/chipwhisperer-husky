
phywhisperer-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d904  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008d904  0008d904  0001d904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000df0  20000000  0008d90c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000a80  20000df0  0008e6fc  00020df0  2**2
                  ALLOC
  4 .stack        00000400  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020df0  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00020e19  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002490f  00000000  00000000  00020e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00004bfa  00000000  00000000  00045774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    00008eb6  00000000  00000000  0004a36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000010f8  00000000  00000000  00053224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000f28  00000000  00000000  0005431c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001961e  00000000  00000000  00055244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00016ac8  00000000  00000000  0006e862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000597c3  00000000  00000000  0008532a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  0000592c  00000000  00000000  000deaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 04 08 20 7d 30 08 00 25 1f 08 00 25 1f 08 00     ... }0..%...%...
   80010:	25 1f 08 00 25 1f 08 00 25 1f 08 00 00 00 00 00     %...%...%.......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 25 1f 08 00     ............%...
   80030:	25 1f 08 00 00 00 00 00 25 1f 08 00 25 1f 08 00     %.......%...%...
   80040:	25 1f 08 00 25 1f 08 00 25 1f 08 00 25 1f 08 00     %...%...%...%...
   80050:	25 1f 08 00 25 1f 08 00 25 1f 08 00 25 1f 08 00     %...%...%...%...
   80060:	25 1f 08 00 25 1f 08 00 65 26 08 00 7d 26 08 00     %...%...e&..}&..
   80070:	25 1f 08 00 a1 1c 08 00 c5 1c 08 00 e9 1c 08 00     %...............
   80080:	25 1f 08 00 25 1f 08 00 25 1f 08 00 25 1f 08 00     %...%...%...%...
   80090:	25 1f 08 00 25 1f 08 00 25 1f 08 00 25 1f 08 00     %...%...%...%...
   800a0:	25 1f 08 00 25 1f 08 00 25 1f 08 00 25 1f 08 00     %...%...%...%...
   800b0:	25 1f 08 00 65 48 08 00 25 1f 08 00                 %...eH..%...

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000df0 	.word	0x20000df0
   800d8:	00000000 	.word	0x00000000
   800dc:	0008d90c 	.word	0x0008d90c

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000df4 	.word	0x20000df4
   800f8:	0008d90c 	.word	0x0008d90c

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
   80170:	00082795 	.word	0x00082795
   80174:	00082801 	.word	0x00082801
   80178:	00082875 	.word	0x00082875
   8017c:	000828c5 	.word	0x000828c5

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
   801f8:	000827cd 	.word	0x000827cd
   801fc:	0008285d 	.word	0x0008285d
   80200:	00082911 	.word	0x00082911

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b06      	ldr	r3, [pc, #24]	; (802a0 <osc_wait_ready+0x2c>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	bf00      	nop
   80298:	3708      	adds	r7, #8
   8029a:	46bd      	mov	sp, r7
   8029c:	bd80      	pop	{r7, pc}
   8029e:	bf00      	nop
   802a0:	00080181 	.word	0x00080181

000802a4 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a4:	b580      	push	{r7, lr}
   802a6:	b086      	sub	sp, #24
   802a8:	af00      	add	r7, sp, #0
   802aa:	60f8      	str	r0, [r7, #12]
   802ac:	607a      	str	r2, [r7, #4]
   802ae:	603b      	str	r3, [r7, #0]
   802b0:	460b      	mov	r3, r1
   802b2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b4:	687b      	ldr	r3, [r7, #4]
   802b6:	2b00      	cmp	r3, #0
   802b8:	d107      	bne.n	802ca <pll_config_init+0x26>
   802ba:	683b      	ldr	r3, [r7, #0]
   802bc:	2b00      	cmp	r3, #0
   802be:	d104      	bne.n	802ca <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802c0:	68fb      	ldr	r3, [r7, #12]
   802c2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c6:	601a      	str	r2, [r3, #0]
   802c8:	e01a      	b.n	80300 <pll_config_init+0x5c>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802ca:	7afb      	ldrb	r3, [r7, #11]
   802cc:	4618      	mov	r0, r3
   802ce:	4b0e      	ldr	r3, [pc, #56]	; (80308 <pll_config_init+0x64>)
   802d0:	4798      	blx	r3
   802d2:	4602      	mov	r2, r0
   802d4:	687b      	ldr	r3, [r7, #4]
   802d6:	fbb2 f3f3 	udiv	r3, r2, r3
   802da:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802dc:	697b      	ldr	r3, [r7, #20]
   802de:	683a      	ldr	r2, [r7, #0]
   802e0:	fb02 f303 	mul.w	r3, r2, r3
   802e4:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e6:	683b      	ldr	r3, [r7, #0]
   802e8:	3b01      	subs	r3, #1
   802ea:	041a      	lsls	r2, r3, #16
   802ec:	4b07      	ldr	r3, [pc, #28]	; (8030c <pll_config_init+0x68>)
   802ee:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f0:	687a      	ldr	r2, [r7, #4]
   802f2:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f4:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802fa:	68fb      	ldr	r3, [r7, #12]
   802fc:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fe:	bf00      	nop
   80300:	bf00      	nop
   80302:	3718      	adds	r7, #24
   80304:	46bd      	mov	sp, r7
   80306:	bd80      	pop	{r7, pc}
   80308:	00080205 	.word	0x00080205
   8030c:	07ff0000 	.word	0x07ff0000

00080310 <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   80310:	b580      	push	{r7, lr}
   80312:	b082      	sub	sp, #8
   80314:	af00      	add	r7, sp, #0
   80316:	6078      	str	r0, [r7, #4]
   80318:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	2b00      	cmp	r3, #0
   8031e:	d108      	bne.n	80332 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <pll_enable+0x38>)
   80322:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80324:	687b      	ldr	r3, [r7, #4]
   80326:	681b      	ldr	r3, [r3, #0]
   80328:	4a08      	ldr	r2, [pc, #32]	; (8034c <pll_enable+0x3c>)
   8032a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80330:	e005      	b.n	8033e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80332:	687b      	ldr	r3, [r7, #4]
   80334:	681b      	ldr	r3, [r3, #0]
   80336:	4a05      	ldr	r2, [pc, #20]	; (8034c <pll_enable+0x3c>)
   80338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8033c:	61d3      	str	r3, [r2, #28]
}
   8033e:	bf00      	nop
   80340:	3708      	adds	r7, #8
   80342:	46bd      	mov	sp, r7
   80344:	bd80      	pop	{r7, pc}
   80346:	bf00      	nop
   80348:	00082981 	.word	0x00082981
   8034c:	400e0400 	.word	0x400e0400

00080350 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80350:	b580      	push	{r7, lr}
   80352:	b082      	sub	sp, #8
   80354:	af00      	add	r7, sp, #0
   80356:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80358:	687b      	ldr	r3, [r7, #4]
   8035a:	2b00      	cmp	r3, #0
   8035c:	d103      	bne.n	80366 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <pll_is_locked+0x24>)
   80360:	4798      	blx	r3
   80362:	4603      	mov	r3, r0
   80364:	e002      	b.n	8036c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80366:	4b04      	ldr	r3, [pc, #16]	; (80378 <pll_is_locked+0x28>)
   80368:	4798      	blx	r3
   8036a:	4603      	mov	r3, r0
	}
}
   8036c:	4618      	mov	r0, r3
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
   80374:	00082999 	.word	0x00082999
   80378:	000829cd 	.word	0x000829cd

0008037c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	4603      	mov	r3, r0
   80384:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80386:	79fb      	ldrb	r3, [r7, #7]
   80388:	3b03      	subs	r3, #3
   8038a:	2b04      	cmp	r3, #4
   8038c:	d808      	bhi.n	803a0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038e:	79fb      	ldrb	r3, [r7, #7]
   80390:	4618      	mov	r0, r3
   80392:	4b06      	ldr	r3, [pc, #24]	; (803ac <pll_enable_source+0x30>)
   80394:	4798      	blx	r3
		osc_wait_ready(e_src);
   80396:	79fb      	ldrb	r3, [r7, #7]
   80398:	4618      	mov	r0, r3
   8039a:	4b05      	ldr	r3, [pc, #20]	; (803b0 <pll_enable_source+0x34>)
   8039c:	4798      	blx	r3
		break;
   8039e:	e000      	b.n	803a2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803a0:	bf00      	nop
	}
}
   803a2:	bf00      	nop
   803a4:	3708      	adds	r7, #8
   803a6:	46bd      	mov	sp, r7
   803a8:	bd80      	pop	{r7, pc}
   803aa:	bf00      	nop
   803ac:	000800fd 	.word	0x000800fd
   803b0:	00080275 	.word	0x00080275

000803b4 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b4:	b590      	push	{r4, r7, lr}
   803b6:	b085      	sub	sp, #20
   803b8:	af00      	add	r7, sp, #0
   803ba:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803bc:	6878      	ldr	r0, [r7, #4]
   803be:	4b21      	ldr	r3, [pc, #132]	; (80444 <pll_enable_config_defaults+0x90>)
   803c0:	4798      	blx	r3
   803c2:	4603      	mov	r3, r0
   803c4:	2b00      	cmp	r3, #0
   803c6:	d139      	bne.n	8043c <pll_enable_config_defaults+0x88>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c8:	687b      	ldr	r3, [r7, #4]
   803ca:	2b00      	cmp	r3, #0
   803cc:	d003      	beq.n	803d6 <pll_enable_config_defaults+0x22>
   803ce:	687b      	ldr	r3, [r7, #4]
   803d0:	2b01      	cmp	r3, #1
   803d2:	d015      	beq.n	80400 <pll_enable_config_defaults+0x4c>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803d4:	e024      	b.n	80420 <pll_enable_config_defaults+0x6c>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d6:	2006      	movs	r0, #6
   803d8:	4b1b      	ldr	r3, [pc, #108]	; (80448 <pll_enable_config_defaults+0x94>)
   803da:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803dc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803e0:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x98>)
   803e2:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803e4:	bf00      	nop
   803e6:	4b1a      	ldr	r3, [pc, #104]	; (80450 <pll_enable_config_defaults+0x9c>)
   803e8:	4798      	blx	r3
   803ea:	4603      	mov	r3, r0
   803ec:	2b00      	cmp	r3, #0
   803ee:	d0fa      	beq.n	803e6 <pll_enable_config_defaults+0x32>
		pll_config_init(&pllcfg,
   803f0:	f107 000c 	add.w	r0, r7, #12
   803f4:	2310      	movs	r3, #16
   803f6:	2201      	movs	r2, #1
   803f8:	2106      	movs	r1, #6
   803fa:	4c16      	ldr	r4, [pc, #88]	; (80454 <pll_enable_config_defaults+0xa0>)
   803fc:	47a0      	blx	r4
		break;
   803fe:	e00f      	b.n	80420 <pll_enable_config_defaults+0x6c>
		if (pmc_osc_is_bypassed_main_xtal()) {
   80400:	4b15      	ldr	r3, [pc, #84]	; (80458 <pll_enable_config_defaults+0xa4>)
   80402:	4798      	blx	r3
   80404:	4603      	mov	r3, r0
   80406:	2b00      	cmp	r3, #0
   80408:	d102      	bne.n	80410 <pll_enable_config_defaults+0x5c>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   8040a:	2006      	movs	r0, #6
   8040c:	4b0e      	ldr	r3, [pc, #56]	; (80448 <pll_enable_config_defaults+0x94>)
   8040e:	4798      	blx	r3
		pll_config_init(&pllcfg,
   80410:	f107 000c 	add.w	r0, r7, #12
   80414:	2300      	movs	r3, #0
   80416:	2200      	movs	r2, #0
   80418:	2106      	movs	r1, #6
   8041a:	4c0e      	ldr	r4, [pc, #56]	; (80454 <pll_enable_config_defaults+0xa0>)
   8041c:	47a0      	blx	r4
		break;
   8041e:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   80420:	f107 030c 	add.w	r3, r7, #12
   80424:	6879      	ldr	r1, [r7, #4]
   80426:	4618      	mov	r0, r3
   80428:	4b0c      	ldr	r3, [pc, #48]	; (8045c <pll_enable_config_defaults+0xa8>)
   8042a:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   8042c:	bf00      	nop
   8042e:	6878      	ldr	r0, [r7, #4]
   80430:	4b04      	ldr	r3, [pc, #16]	; (80444 <pll_enable_config_defaults+0x90>)
   80432:	4798      	blx	r3
   80434:	4603      	mov	r3, r0
   80436:	2b00      	cmp	r3, #0
   80438:	d0f9      	beq.n	8042e <pll_enable_config_defaults+0x7a>
   8043a:	e000      	b.n	8043e <pll_enable_config_defaults+0x8a>
		return; // Pll already running
   8043c:	bf00      	nop
}
   8043e:	3714      	adds	r7, #20
   80440:	46bd      	mov	sp, r7
   80442:	bd90      	pop	{r4, r7, pc}
   80444:	00080351 	.word	0x00080351
   80448:	0008037d 	.word	0x0008037d
   8044c:	00082941 	.word	0x00082941
   80450:	00082929 	.word	0x00082929
   80454:	000802a5 	.word	0x000802a5
   80458:	000828f9 	.word	0x000828f9
   8045c:	00080311 	.word	0x00080311

00080460 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   80460:	b480      	push	{r7}
   80462:	b08d      	sub	sp, #52	; 0x34
   80464:	af00      	add	r7, sp, #0
   80466:	6078      	str	r0, [r7, #4]
   80468:	6039      	str	r1, [r7, #0]
   8046a:	687b      	ldr	r3, [r7, #4]
   8046c:	62fb      	str	r3, [r7, #44]	; 0x2c
   8046e:	683b      	ldr	r3, [r7, #0]
   80470:	62bb      	str	r3, [r7, #40]	; 0x28
   80472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80474:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80478:	095a      	lsrs	r2, r3, #5
   8047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8047c:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8047e:	6a3b      	ldr	r3, [r7, #32]
   80480:	f003 031f 	and.w	r3, r3, #31
   80484:	2101      	movs	r1, #1
   80486:	fa01 f303 	lsl.w	r3, r1, r3
   8048a:	61fa      	str	r2, [r7, #28]
   8048c:	61bb      	str	r3, [r7, #24]
   8048e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80490:	617b      	str	r3, [r7, #20]
   80492:	69fb      	ldr	r3, [r7, #28]
   80494:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80496:	693b      	ldr	r3, [r7, #16]
   80498:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8049c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   804a0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   804a2:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   804a4:	697b      	ldr	r3, [r7, #20]
   804a6:	f003 0308 	and.w	r3, r3, #8
   804aa:	2b00      	cmp	r3, #0
   804ac:	d003      	beq.n	804b6 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   804ae:	68fb      	ldr	r3, [r7, #12]
   804b0:	69ba      	ldr	r2, [r7, #24]
   804b2:	665a      	str	r2, [r3, #100]	; 0x64
   804b4:	e002      	b.n	804bc <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   804b6:	68fb      	ldr	r3, [r7, #12]
   804b8:	69ba      	ldr	r2, [r7, #24]
   804ba:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   804bc:	697b      	ldr	r3, [r7, #20]
   804be:	f003 0320 	and.w	r3, r3, #32
   804c2:	2b00      	cmp	r3, #0
   804c4:	d003      	beq.n	804ce <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   804c6:	68fb      	ldr	r3, [r7, #12]
   804c8:	69ba      	ldr	r2, [r7, #24]
   804ca:	651a      	str	r2, [r3, #80]	; 0x50
   804cc:	e002      	b.n	804d4 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   804ce:	68fb      	ldr	r3, [r7, #12]
   804d0:	69ba      	ldr	r2, [r7, #24]
   804d2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   804d4:	697b      	ldr	r3, [r7, #20]
   804d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   804da:	2b00      	cmp	r3, #0
   804dc:	d003      	beq.n	804e6 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   804de:	68fb      	ldr	r3, [r7, #12]
   804e0:	69ba      	ldr	r2, [r7, #24]
   804e2:	621a      	str	r2, [r3, #32]
   804e4:	e002      	b.n	804ec <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   804e6:	68fb      	ldr	r3, [r7, #12]
   804e8:	69ba      	ldr	r2, [r7, #24]
   804ea:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   804ec:	697b      	ldr	r3, [r7, #20]
   804ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
   804f2:	2b00      	cmp	r3, #0
   804f4:	d004      	beq.n	80500 <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   804f6:	68fb      	ldr	r3, [r7, #12]
   804f8:	69ba      	ldr	r2, [r7, #24]
   804fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   804fe:	e003      	b.n	80508 <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80500:	68fb      	ldr	r3, [r7, #12]
   80502:	69ba      	ldr	r2, [r7, #24]
   80504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80508:	697b      	ldr	r3, [r7, #20]
   8050a:	f003 0301 	and.w	r3, r3, #1
   8050e:	2b00      	cmp	r3, #0
   80510:	d006      	beq.n	80520 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   80512:	68fb      	ldr	r3, [r7, #12]
   80514:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80516:	69bb      	ldr	r3, [r7, #24]
   80518:	431a      	orrs	r2, r3
   8051a:	68fb      	ldr	r3, [r7, #12]
   8051c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
	}
#endif
}
   8051e:	e006      	b.n	8052e <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   80520:	68fb      	ldr	r3, [r7, #12]
   80522:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80524:	69bb      	ldr	r3, [r7, #24]
   80526:	43db      	mvns	r3, r3
   80528:	401a      	ands	r2, r3
   8052a:	68fb      	ldr	r3, [r7, #12]
   8052c:	671a      	str	r2, [r3, #112]	; 0x70
}
   8052e:	bf00      	nop
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
			arch_ioport_pin_to_mask(pin), mode);
}
   80530:	bf00      	nop
	arch_ioport_set_pin_mode(pin, mode);
}
   80532:	bf00      	nop
   80534:	3734      	adds	r7, #52	; 0x34
   80536:	46bd      	mov	sp, r7
   80538:	bc80      	pop	{r7}
   8053a:	4770      	bx	lr

0008053c <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   8053c:	b580      	push	{r7, lr}
   8053e:	b082      	sub	sp, #8
   80540:	af00      	add	r7, sp, #0
   80542:	4603      	mov	r3, r0
   80544:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80546:	b672      	cpsid	i
}
   80548:	bf00      	nop
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8054a:	f3bf 8f5f 	dmb	sy
}
   8054e:	bf00      	nop
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80550:	4b05      	ldr	r3, [pc, #20]	; (80568 <sleepmgr_sleep+0x2c>)
   80552:	2200      	movs	r2, #0
   80554:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   80556:	79fb      	ldrb	r3, [r7, #7]
   80558:	4618      	mov	r0, r3
   8055a:	4b04      	ldr	r3, [pc, #16]	; (8056c <sleepmgr_sleep+0x30>)
   8055c:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   8055e:	bf00      	nop
   80560:	3708      	adds	r7, #8
   80562:	46bd      	mov	sp, r7
   80564:	bd80      	pop	{r7, pc}
   80566:	bf00      	nop
   80568:	20000284 	.word	0x20000284
   8056c:	00082b7d 	.word	0x00082b7d

00080570 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80570:	b480      	push	{r7}
   80572:	b083      	sub	sp, #12
   80574:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80576:	2300      	movs	r3, #0
   80578:	71fb      	strb	r3, [r7, #7]
   8057a:	e006      	b.n	8058a <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   8057c:	79fb      	ldrb	r3, [r7, #7]
   8057e:	4a08      	ldr	r2, [pc, #32]	; (805a0 <sleepmgr_init+0x30>)
   80580:	2100      	movs	r1, #0
   80582:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80584:	79fb      	ldrb	r3, [r7, #7]
   80586:	3301      	adds	r3, #1
   80588:	71fb      	strb	r3, [r7, #7]
   8058a:	79fb      	ldrb	r3, [r7, #7]
   8058c:	2b04      	cmp	r3, #4
   8058e:	d9f5      	bls.n	8057c <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80590:	4b03      	ldr	r3, [pc, #12]	; (805a0 <sleepmgr_init+0x30>)
   80592:	2201      	movs	r2, #1
   80594:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   80596:	bf00      	nop
   80598:	370c      	adds	r7, #12
   8059a:	46bd      	mov	sp, r7
   8059c:	bc80      	pop	{r7}
   8059e:	4770      	bx	lr
   805a0:	20001820 	.word	0x20001820

000805a4 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   805a4:	b480      	push	{r7}
   805a6:	b083      	sub	sp, #12
   805a8:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   805aa:	2300      	movs	r3, #0
   805ac:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   805ae:	4b09      	ldr	r3, [pc, #36]	; (805d4 <sleepmgr_get_sleep_mode+0x30>)
   805b0:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   805b2:	e005      	b.n	805c0 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   805b4:	683b      	ldr	r3, [r7, #0]
   805b6:	3301      	adds	r3, #1
   805b8:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   805ba:	79fb      	ldrb	r3, [r7, #7]
   805bc:	3301      	adds	r3, #1
   805be:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   805c0:	683b      	ldr	r3, [r7, #0]
   805c2:	781b      	ldrb	r3, [r3, #0]
   805c4:	2b00      	cmp	r3, #0
   805c6:	d0f5      	beq.n	805b4 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   805c8:	79fb      	ldrb	r3, [r7, #7]
}
   805ca:	4618      	mov	r0, r3
   805cc:	370c      	adds	r7, #12
   805ce:	46bd      	mov	sp, r7
   805d0:	bc80      	pop	{r7}
   805d2:	4770      	bx	lr
   805d4:	20001820 	.word	0x20001820

000805d8 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   805d8:	b580      	push	{r7, lr}
   805da:	b082      	sub	sp, #8
   805dc:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;

	//cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   805de:	4b0b      	ldr	r3, [pc, #44]	; (8060c <sleepmgr_enter_sleep+0x34>)
   805e0:	4798      	blx	r3
   805e2:	4603      	mov	r3, r0
   805e4:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   805e6:	79fb      	ldrb	r3, [r7, #7]
   805e8:	2b00      	cmp	r3, #0
   805ea:	d108      	bne.n	805fe <sleepmgr_enter_sleep+0x26>
		cpu_irq_enable();
   805ec:	4b08      	ldr	r3, [pc, #32]	; (80610 <sleepmgr_enter_sleep+0x38>)
   805ee:	2201      	movs	r2, #1
   805f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   805f2:	f3bf 8f5f 	dmb	sy
}
   805f6:	bf00      	nop
  __ASM volatile ("cpsie i");
   805f8:	b662      	cpsie	i
}
   805fa:	bf00      	nop
		return;
   805fc:	e003      	b.n	80606 <sleepmgr_enter_sleep+0x2e>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   805fe:	79fb      	ldrb	r3, [r7, #7]
   80600:	4618      	mov	r0, r3
   80602:	4b04      	ldr	r3, [pc, #16]	; (80614 <sleepmgr_enter_sleep+0x3c>)
   80604:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   80606:	3708      	adds	r7, #8
   80608:	46bd      	mov	sp, r7
   8060a:	bd80      	pop	{r7, pc}
   8060c:	000805a5 	.word	0x000805a5
   80610:	20000284 	.word	0x20000284
   80614:	0008053d 	.word	0x0008053d

00080618 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80618:	b480      	push	{r7}
   8061a:	b083      	sub	sp, #12
   8061c:	af00      	add	r7, sp, #0
   8061e:	6078      	str	r0, [r7, #4]
   80620:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   80622:	687b      	ldr	r3, [r7, #4]
   80624:	2200      	movs	r2, #0
   80626:	601a      	str	r2, [r3, #0]
}
   80628:	bf00      	nop
   8062a:	370c      	adds	r7, #12
   8062c:	46bd      	mov	sp, r7
   8062e:	bc80      	pop	{r7}
   80630:	4770      	bx	lr
   80632:	0000      	movs	r0, r0

00080634 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80634:	b480      	push	{r7}
   80636:	b083      	sub	sp, #12
   80638:	af00      	add	r7, sp, #0
   8063a:	6078      	str	r0, [r7, #4]
   8063c:	460b      	mov	r3, r1
   8063e:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   80640:	687b      	ldr	r3, [r7, #4]
   80642:	681b      	ldr	r3, [r3, #0]
   80644:	f023 0207 	bic.w	r2, r3, #7
   80648:	687b      	ldr	r3, [r7, #4]
   8064a:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   8064c:	78fb      	ldrb	r3, [r7, #3]
   8064e:	2b0a      	cmp	r3, #10
   80650:	d839      	bhi.n	806c6 <genclk_config_set_source+0x92>
   80652:	a201      	add	r2, pc, #4	; (adr r2, 80658 <genclk_config_set_source+0x24>)
   80654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80658:	00080685 	.word	0x00080685
   8065c:	00080685 	.word	0x00080685
   80660:	00080685 	.word	0x00080685
   80664:	0008068f 	.word	0x0008068f
   80668:	0008068f 	.word	0x0008068f
   8066c:	0008068f 	.word	0x0008068f
   80670:	0008068f 	.word	0x0008068f
   80674:	0008068f 	.word	0x0008068f
   80678:	0008069d 	.word	0x0008069d
   8067c:	000806ab 	.word	0x000806ab
   80680:	000806b9 	.word	0x000806b9
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   80684:	687b      	ldr	r3, [r7, #4]
   80686:	681a      	ldr	r2, [r3, #0]
   80688:	687b      	ldr	r3, [r7, #4]
   8068a:	601a      	str	r2, [r3, #0]
		break;
   8068c:	e01b      	b.n	806c6 <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   8068e:	687b      	ldr	r3, [r7, #4]
   80690:	681b      	ldr	r3, [r3, #0]
   80692:	f043 0201 	orr.w	r2, r3, #1
   80696:	687b      	ldr	r3, [r7, #4]
   80698:	601a      	str	r2, [r3, #0]
		break;
   8069a:	e014      	b.n	806c6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   8069c:	687b      	ldr	r3, [r7, #4]
   8069e:	681b      	ldr	r3, [r3, #0]
   806a0:	f043 0202 	orr.w	r2, r3, #2
   806a4:	687b      	ldr	r3, [r7, #4]
   806a6:	601a      	str	r2, [r3, #0]
		break;
   806a8:	e00d      	b.n	806c6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   806aa:	687b      	ldr	r3, [r7, #4]
   806ac:	681b      	ldr	r3, [r3, #0]
   806ae:	f043 0203 	orr.w	r2, r3, #3
   806b2:	687b      	ldr	r3, [r7, #4]
   806b4:	601a      	str	r2, [r3, #0]
		break;
   806b6:	e006      	b.n	806c6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   806b8:	687b      	ldr	r3, [r7, #4]
   806ba:	681b      	ldr	r3, [r3, #0]
   806bc:	f043 0204 	orr.w	r2, r3, #4
   806c0:	687b      	ldr	r3, [r7, #4]
   806c2:	601a      	str	r2, [r3, #0]
		break;
   806c4:	bf00      	nop
	}
}
   806c6:	bf00      	nop
   806c8:	370c      	adds	r7, #12
   806ca:	46bd      	mov	sp, r7
   806cc:	bc80      	pop	{r7}
   806ce:	4770      	bx	lr

000806d0 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   806d0:	b480      	push	{r7}
   806d2:	b083      	sub	sp, #12
   806d4:	af00      	add	r7, sp, #0
   806d6:	6078      	str	r0, [r7, #4]
   806d8:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   806da:	687b      	ldr	r3, [r7, #4]
   806dc:	681b      	ldr	r3, [r3, #0]
   806de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   806e2:	687b      	ldr	r3, [r7, #4]
   806e4:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   806e6:	687b      	ldr	r3, [r7, #4]
   806e8:	681a      	ldr	r2, [r3, #0]
   806ea:	683b      	ldr	r3, [r7, #0]
   806ec:	431a      	orrs	r2, r3
   806ee:	687b      	ldr	r3, [r7, #4]
   806f0:	601a      	str	r2, [r3, #0]
}
   806f2:	bf00      	nop
   806f4:	370c      	adds	r7, #12
   806f6:	46bd      	mov	sp, r7
   806f8:	bc80      	pop	{r7}
   806fa:	4770      	bx	lr

000806fc <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   806fc:	b580      	push	{r7, lr}
   806fe:	b082      	sub	sp, #8
   80700:	af00      	add	r7, sp, #0
   80702:	6078      	str	r0, [r7, #4]
   80704:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   80706:	4907      	ldr	r1, [pc, #28]	; (80724 <genclk_enable+0x28>)
   80708:	687b      	ldr	r3, [r7, #4]
   8070a:	681a      	ldr	r2, [r3, #0]
   8070c:	683b      	ldr	r3, [r7, #0]
   8070e:	3310      	adds	r3, #16
   80710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80714:	6838      	ldr	r0, [r7, #0]
   80716:	4b04      	ldr	r3, [pc, #16]	; (80728 <genclk_enable+0x2c>)
   80718:	4798      	blx	r3
}
   8071a:	bf00      	nop
   8071c:	3708      	adds	r7, #8
   8071e:	46bd      	mov	sp, r7
   80720:	bd80      	pop	{r7, pc}
   80722:	bf00      	nop
   80724:	400e0400 	.word	0x400e0400
   80728:	00082a7d 	.word	0x00082a7d

0008072c <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   8072c:	b580      	push	{r7, lr}
   8072e:	b082      	sub	sp, #8
   80730:	af00      	add	r7, sp, #0
   80732:	4603      	mov	r3, r0
   80734:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80736:	79fb      	ldrb	r3, [r7, #7]
   80738:	2b0a      	cmp	r3, #10
   8073a:	f200 80a2 	bhi.w	80882 <genclk_enable_source+0x156>
   8073e:	a201      	add	r2, pc, #4	; (adr r2, 80744 <genclk_enable_source+0x18>)
   80740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80744:	00080771 	.word	0x00080771
   80748:	00080793 	.word	0x00080793
   8074c:	000807b3 	.word	0x000807b3
   80750:	000807d3 	.word	0x000807d3
   80754:	000807f3 	.word	0x000807f3
   80758:	00080813 	.word	0x00080813
   8075c:	00080833 	.word	0x00080833
   80760:	00080853 	.word	0x00080853
   80764:	00080873 	.word	0x00080873
   80768:	0008087b 	.word	0x0008087b
   8076c:	00080883 	.word	0x00080883
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   80770:	2000      	movs	r0, #0
   80772:	4b4e      	ldr	r3, [pc, #312]	; (808ac <genclk_enable_source+0x180>)
   80774:	4798      	blx	r3
   80776:	4603      	mov	r3, r0
   80778:	f083 0301 	eor.w	r3, r3, #1
   8077c:	b2db      	uxtb	r3, r3
   8077e:	2b00      	cmp	r3, #0
   80780:	f000 8081 	beq.w	80886 <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   80784:	2000      	movs	r0, #0
   80786:	4b4a      	ldr	r3, [pc, #296]	; (808b0 <genclk_enable_source+0x184>)
   80788:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   8078a:	2000      	movs	r0, #0
   8078c:	4b49      	ldr	r3, [pc, #292]	; (808b4 <genclk_enable_source+0x188>)
   8078e:	4798      	blx	r3
		}
		break;
   80790:	e079      	b.n	80886 <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   80792:	2001      	movs	r0, #1
   80794:	4b45      	ldr	r3, [pc, #276]	; (808ac <genclk_enable_source+0x180>)
   80796:	4798      	blx	r3
   80798:	4603      	mov	r3, r0
   8079a:	f083 0301 	eor.w	r3, r3, #1
   8079e:	b2db      	uxtb	r3, r3
   807a0:	2b00      	cmp	r3, #0
   807a2:	d072      	beq.n	8088a <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   807a4:	2001      	movs	r0, #1
   807a6:	4b42      	ldr	r3, [pc, #264]	; (808b0 <genclk_enable_source+0x184>)
   807a8:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   807aa:	2001      	movs	r0, #1
   807ac:	4b41      	ldr	r3, [pc, #260]	; (808b4 <genclk_enable_source+0x188>)
   807ae:	4798      	blx	r3
		}
		break;
   807b0:	e06b      	b.n	8088a <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   807b2:	2002      	movs	r0, #2
   807b4:	4b3d      	ldr	r3, [pc, #244]	; (808ac <genclk_enable_source+0x180>)
   807b6:	4798      	blx	r3
   807b8:	4603      	mov	r3, r0
   807ba:	f083 0301 	eor.w	r3, r3, #1
   807be:	b2db      	uxtb	r3, r3
   807c0:	2b00      	cmp	r3, #0
   807c2:	d064      	beq.n	8088e <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   807c4:	2002      	movs	r0, #2
   807c6:	4b3a      	ldr	r3, [pc, #232]	; (808b0 <genclk_enable_source+0x184>)
   807c8:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   807ca:	2002      	movs	r0, #2
   807cc:	4b39      	ldr	r3, [pc, #228]	; (808b4 <genclk_enable_source+0x188>)
   807ce:	4798      	blx	r3
		}
		break;
   807d0:	e05d      	b.n	8088e <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   807d2:	2003      	movs	r0, #3
   807d4:	4b35      	ldr	r3, [pc, #212]	; (808ac <genclk_enable_source+0x180>)
   807d6:	4798      	blx	r3
   807d8:	4603      	mov	r3, r0
   807da:	f083 0301 	eor.w	r3, r3, #1
   807de:	b2db      	uxtb	r3, r3
   807e0:	2b00      	cmp	r3, #0
   807e2:	d056      	beq.n	80892 <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   807e4:	2003      	movs	r0, #3
   807e6:	4b32      	ldr	r3, [pc, #200]	; (808b0 <genclk_enable_source+0x184>)
   807e8:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   807ea:	2003      	movs	r0, #3
   807ec:	4b31      	ldr	r3, [pc, #196]	; (808b4 <genclk_enable_source+0x188>)
   807ee:	4798      	blx	r3
		}
		break;
   807f0:	e04f      	b.n	80892 <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   807f2:	2004      	movs	r0, #4
   807f4:	4b2d      	ldr	r3, [pc, #180]	; (808ac <genclk_enable_source+0x180>)
   807f6:	4798      	blx	r3
   807f8:	4603      	mov	r3, r0
   807fa:	f083 0301 	eor.w	r3, r3, #1
   807fe:	b2db      	uxtb	r3, r3
   80800:	2b00      	cmp	r3, #0
   80802:	d048      	beq.n	80896 <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   80804:	2004      	movs	r0, #4
   80806:	4b2a      	ldr	r3, [pc, #168]	; (808b0 <genclk_enable_source+0x184>)
   80808:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   8080a:	2004      	movs	r0, #4
   8080c:	4b29      	ldr	r3, [pc, #164]	; (808b4 <genclk_enable_source+0x188>)
   8080e:	4798      	blx	r3
		}
		break;
   80810:	e041      	b.n	80896 <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   80812:	2005      	movs	r0, #5
   80814:	4b25      	ldr	r3, [pc, #148]	; (808ac <genclk_enable_source+0x180>)
   80816:	4798      	blx	r3
   80818:	4603      	mov	r3, r0
   8081a:	f083 0301 	eor.w	r3, r3, #1
   8081e:	b2db      	uxtb	r3, r3
   80820:	2b00      	cmp	r3, #0
   80822:	d03a      	beq.n	8089a <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80824:	2005      	movs	r0, #5
   80826:	4b22      	ldr	r3, [pc, #136]	; (808b0 <genclk_enable_source+0x184>)
   80828:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   8082a:	2005      	movs	r0, #5
   8082c:	4b21      	ldr	r3, [pc, #132]	; (808b4 <genclk_enable_source+0x188>)
   8082e:	4798      	blx	r3
		}
		break;
   80830:	e033      	b.n	8089a <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   80832:	2006      	movs	r0, #6
   80834:	4b1d      	ldr	r3, [pc, #116]	; (808ac <genclk_enable_source+0x180>)
   80836:	4798      	blx	r3
   80838:	4603      	mov	r3, r0
   8083a:	f083 0301 	eor.w	r3, r3, #1
   8083e:	b2db      	uxtb	r3, r3
   80840:	2b00      	cmp	r3, #0
   80842:	d02c      	beq.n	8089e <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   80844:	2006      	movs	r0, #6
   80846:	4b1a      	ldr	r3, [pc, #104]	; (808b0 <genclk_enable_source+0x184>)
   80848:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   8084a:	2006      	movs	r0, #6
   8084c:	4b19      	ldr	r3, [pc, #100]	; (808b4 <genclk_enable_source+0x188>)
   8084e:	4798      	blx	r3
		}
		break;
   80850:	e025      	b.n	8089e <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   80852:	2007      	movs	r0, #7
   80854:	4b15      	ldr	r3, [pc, #84]	; (808ac <genclk_enable_source+0x180>)
   80856:	4798      	blx	r3
   80858:	4603      	mov	r3, r0
   8085a:	f083 0301 	eor.w	r3, r3, #1
   8085e:	b2db      	uxtb	r3, r3
   80860:	2b00      	cmp	r3, #0
   80862:	d01e      	beq.n	808a2 <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   80864:	2007      	movs	r0, #7
   80866:	4b12      	ldr	r3, [pc, #72]	; (808b0 <genclk_enable_source+0x184>)
   80868:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   8086a:	2007      	movs	r0, #7
   8086c:	4b11      	ldr	r3, [pc, #68]	; (808b4 <genclk_enable_source+0x188>)
   8086e:	4798      	blx	r3
		}
		break;
   80870:	e017      	b.n	808a2 <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   80872:	2000      	movs	r0, #0
   80874:	4b10      	ldr	r3, [pc, #64]	; (808b8 <genclk_enable_source+0x18c>)
   80876:	4798      	blx	r3
		break;
   80878:	e014      	b.n	808a4 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   8087a:	2001      	movs	r0, #1
   8087c:	4b0e      	ldr	r3, [pc, #56]	; (808b8 <genclk_enable_source+0x18c>)
   8087e:	4798      	blx	r3
		break;
   80880:	e010      	b.n	808a4 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   80882:	bf00      	nop
   80884:	e00e      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   80886:	bf00      	nop
   80888:	e00c      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   8088a:	bf00      	nop
   8088c:	e00a      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   8088e:	bf00      	nop
   80890:	e008      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   80892:	bf00      	nop
   80894:	e006      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   80896:	bf00      	nop
   80898:	e004      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   8089a:	bf00      	nop
   8089c:	e002      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   8089e:	bf00      	nop
   808a0:	e000      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   808a2:	bf00      	nop
	}
}
   808a4:	bf00      	nop
   808a6:	3708      	adds	r7, #8
   808a8:	46bd      	mov	sp, r7
   808aa:	bd80      	pop	{r7, pc}
   808ac:	00080181 	.word	0x00080181
   808b0:	000800fd 	.word	0x000800fd
   808b4:	00080275 	.word	0x00080275
   808b8:	000803b5 	.word	0x000803b5

000808bc <phywhisperer_setup_pins>:
//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";


void phywhisperer_setup_pins(void)
{
   808bc:	b580      	push	{r7, lr}
   808be:	af00      	add	r7, sp, #0
    board_init();
   808c0:	4b39      	ldr	r3, [pc, #228]	; (809a8 <phywhisperer_setup_pins+0xec>)
   808c2:	4798      	blx	r3
    ioport_set_pin_mode(BUTTON_IN, IOPORT_MODE_PULLUP); //(1 << 2) = PULL UP
   808c4:	2108      	movs	r1, #8
   808c6:	2018      	movs	r0, #24
   808c8:	4b38      	ldr	r3, [pc, #224]	; (809ac <phywhisperer_setup_pins+0xf0>)
   808ca:	4798      	blx	r3
    PIOA->PIO_ODR = (1 << BUTTON_IN);
   808cc:	4b38      	ldr	r3, [pc, #224]	; (809b0 <phywhisperer_setup_pins+0xf4>)
   808ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   808d2:	615a      	str	r2, [r3, #20]
    PIOA->PIO_PUER = (1 << BUTTON_IN); // enable pullup
   808d4:	4b36      	ldr	r3, [pc, #216]	; (809b0 <phywhisperer_setup_pins+0xf4>)
   808d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   808da:	665a      	str	r2, [r3, #100]	; 0x64
    PIOA->PIO_DIFSR = (1 << BUTTON_IN); //enable debounce
   808dc:	4b34      	ldr	r3, [pc, #208]	; (809b0 <phywhisperer_setup_pins+0xf4>)
   808de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   808e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    PIOA->PIO_OER = (1 << F_VB5V) | (1 << F_VBHOST); //enable output mode on VBHOST/VBSNIFF pins
   808e6:	4b32      	ldr	r3, [pc, #200]	; (809b0 <phywhisperer_setup_pins+0xf4>)
   808e8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   808ec:	611a      	str	r2, [r3, #16]

    
    //Configure FPGA to allow programming via USB
    fpga_program_init();
   808ee:	4b31      	ldr	r3, [pc, #196]	; (809b4 <phywhisperer_setup_pins+0xf8>)
   808f0:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   808f2:	2009      	movs	r0, #9
   808f4:	4b30      	ldr	r3, [pc, #192]	; (809b8 <phywhisperer_setup_pins+0xfc>)
   808f6:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   808f8:	4930      	ldr	r1, [pc, #192]	; (809bc <phywhisperer_setup_pins+0x100>)
   808fa:	2029      	movs	r0, #41	; 0x29
   808fc:	4b30      	ldr	r3, [pc, #192]	; (809c0 <phywhisperer_setup_pins+0x104>)
   808fe:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   80900:	492e      	ldr	r1, [pc, #184]	; (809bc <phywhisperer_setup_pins+0x100>)
   80902:	202a      	movs	r0, #42	; 0x2a
   80904:	4b2e      	ldr	r3, [pc, #184]	; (809c0 <phywhisperer_setup_pins+0x104>)
   80906:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   80908:	492c      	ldr	r1, [pc, #176]	; (809bc <phywhisperer_setup_pins+0x100>)
   8090a:	202b      	movs	r0, #43	; 0x2b
   8090c:	4b2c      	ldr	r3, [pc, #176]	; (809c0 <phywhisperer_setup_pins+0x104>)
   8090e:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   80910:	492a      	ldr	r1, [pc, #168]	; (809bc <phywhisperer_setup_pins+0x100>)
   80912:	202c      	movs	r0, #44	; 0x2c
   80914:	4b2a      	ldr	r3, [pc, #168]	; (809c0 <phywhisperer_setup_pins+0x104>)
   80916:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   80918:	4928      	ldr	r1, [pc, #160]	; (809bc <phywhisperer_setup_pins+0x100>)
   8091a:	202d      	movs	r0, #45	; 0x2d
   8091c:	4b28      	ldr	r3, [pc, #160]	; (809c0 <phywhisperer_setup_pins+0x104>)
   8091e:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   80920:	4926      	ldr	r1, [pc, #152]	; (809bc <phywhisperer_setup_pins+0x100>)
   80922:	202e      	movs	r0, #46	; 0x2e
   80924:	4b26      	ldr	r3, [pc, #152]	; (809c0 <phywhisperer_setup_pins+0x104>)
   80926:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80928:	4924      	ldr	r1, [pc, #144]	; (809bc <phywhisperer_setup_pins+0x100>)
   8092a:	202f      	movs	r0, #47	; 0x2f
   8092c:	4b24      	ldr	r3, [pc, #144]	; (809c0 <phywhisperer_setup_pins+0x104>)
   8092e:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   80930:	4922      	ldr	r1, [pc, #136]	; (809bc <phywhisperer_setup_pins+0x100>)
   80932:	2030      	movs	r0, #48	; 0x30
   80934:	4b22      	ldr	r3, [pc, #136]	; (809c0 <phywhisperer_setup_pins+0x104>)
   80936:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   80938:	4920      	ldr	r1, [pc, #128]	; (809bc <phywhisperer_setup_pins+0x100>)
   8093a:	2033      	movs	r0, #51	; 0x33
   8093c:	4b20      	ldr	r3, [pc, #128]	; (809c0 <phywhisperer_setup_pins+0x104>)
   8093e:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80940:	491e      	ldr	r1, [pc, #120]	; (809bc <phywhisperer_setup_pins+0x100>)
   80942:	2037      	movs	r0, #55	; 0x37
   80944:	4b1e      	ldr	r3, [pc, #120]	; (809c0 <phywhisperer_setup_pins+0x104>)
   80946:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80948:	491c      	ldr	r1, [pc, #112]	; (809bc <phywhisperer_setup_pins+0x100>)
   8094a:	2034      	movs	r0, #52	; 0x34
   8094c:	4b1c      	ldr	r3, [pc, #112]	; (809c0 <phywhisperer_setup_pins+0x104>)
   8094e:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80950:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   80954:	f240 11bf 	movw	r1, #447	; 0x1bf
   80958:	481a      	ldr	r0, [pc, #104]	; (809c4 <phywhisperer_setup_pins+0x108>)
   8095a:	4b1b      	ldr	r3, [pc, #108]	; (809c8 <phywhisperer_setup_pins+0x10c>)
   8095c:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   8095e:	f240 11bf 	movw	r1, #447	; 0x1bf
   80962:	4818      	ldr	r0, [pc, #96]	; (809c4 <phywhisperer_setup_pins+0x108>)
   80964:	4b19      	ldr	r3, [pc, #100]	; (809cc <phywhisperer_setup_pins+0x110>)
   80966:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
    */

    gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
   80968:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8096c:	2026      	movs	r0, #38	; 0x26
   8096e:	4b14      	ldr	r3, [pc, #80]	; (809c0 <phywhisperer_setup_pins+0x104>)
   80970:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   80972:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80976:	2031      	movs	r0, #49	; 0x31
   80978:	4b11      	ldr	r3, [pc, #68]	; (809c0 <phywhisperer_setup_pins+0x104>)
   8097a:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   8097c:	4a14      	ldr	r2, [pc, #80]	; (809d0 <phywhisperer_setup_pins+0x114>)
   8097e:	2100      	movs	r1, #0
   80980:	4814      	ldr	r0, [pc, #80]	; (809d4 <phywhisperer_setup_pins+0x118>)
   80982:	4b15      	ldr	r3, [pc, #84]	; (809d8 <phywhisperer_setup_pins+0x11c>)
   80984:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(1)
                         | SMC_SETUP_NRD_SETUP(1)
                         | SMC_SETUP_NCS_RD_SETUP(1));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   80986:	4a15      	ldr	r2, [pc, #84]	; (809dc <phywhisperer_setup_pins+0x120>)
   80988:	2100      	movs	r1, #0
   8098a:	4812      	ldr	r0, [pc, #72]	; (809d4 <phywhisperer_setup_pins+0x118>)
   8098c:	4b14      	ldr	r3, [pc, #80]	; (809e0 <phywhisperer_setup_pins+0x124>)
   8098e:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(1)
                         | SMC_PULSE_NRD_PULSE(3)
                         | SMC_PULSE_NCS_RD_PULSE(1));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   80990:	4a14      	ldr	r2, [pc, #80]	; (809e4 <phywhisperer_setup_pins+0x128>)
   80992:	2100      	movs	r1, #0
   80994:	480f      	ldr	r0, [pc, #60]	; (809d4 <phywhisperer_setup_pins+0x118>)
   80996:	4b14      	ldr	r3, [pc, #80]	; (809e8 <phywhisperer_setup_pins+0x12c>)
   80998:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(4));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   8099a:	2203      	movs	r2, #3
   8099c:	2100      	movs	r1, #0
   8099e:	480d      	ldr	r0, [pc, #52]	; (809d4 <phywhisperer_setup_pins+0x118>)
   809a0:	4b12      	ldr	r3, [pc, #72]	; (809ec <phywhisperer_setup_pins+0x130>)
   809a2:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   809a4:	bf00      	nop
   809a6:	bd80      	pop	{r7, pc}
   809a8:	00082021 	.word	0x00082021
   809ac:	00080461 	.word	0x00080461
   809b0:	400e0c00 	.word	0x400e0c00
   809b4:	000814b5 	.word	0x000814b5
   809b8:	000829e5 	.word	0x000829e5
   809bc:	08000001 	.word	0x08000001
   809c0:	00082381 	.word	0x00082381
   809c4:	400e0e00 	.word	0x400e0e00
   809c8:	000824b1 	.word	0x000824b1
   809cc:	0008228d 	.word	0x0008228d
   809d0:	01010100 	.word	0x01010100
   809d4:	400e0000 	.word	0x400e0000
   809d8:	00082fd5 	.word	0x00082fd5
   809dc:	01030101 	.word	0x01030101
   809e0:	00082fff 	.word	0x00082fff
   809e4:	00040002 	.word	0x00040002
   809e8:	00083029 	.word	0x00083029
   809ec:	00083053 	.word	0x00083053

000809f0 <genclk_enable_config>:
{
    for (volatile uint32_t i = 0; i < 250000; i++);
}

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   809f0:	b580      	push	{r7, lr}
   809f2:	b086      	sub	sp, #24
   809f4:	af00      	add	r7, sp, #0
   809f6:	60f8      	str	r0, [r7, #12]
   809f8:	460b      	mov	r3, r1
   809fa:	607a      	str	r2, [r7, #4]
   809fc:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   809fe:	f107 0314 	add.w	r3, r7, #20
   80a02:	68f9      	ldr	r1, [r7, #12]
   80a04:	4618      	mov	r0, r3
   80a06:	4b0e      	ldr	r3, [pc, #56]	; (80a40 <genclk_enable_config+0x50>)
   80a08:	4798      	blx	r3
    genclk_enable_source(src);
   80a0a:	7afb      	ldrb	r3, [r7, #11]
   80a0c:	4618      	mov	r0, r3
   80a0e:	4b0d      	ldr	r3, [pc, #52]	; (80a44 <genclk_enable_config+0x54>)
   80a10:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   80a12:	7afa      	ldrb	r2, [r7, #11]
   80a14:	f107 0314 	add.w	r3, r7, #20
   80a18:	4611      	mov	r1, r2
   80a1a:	4618      	mov	r0, r3
   80a1c:	4b0a      	ldr	r3, [pc, #40]	; (80a48 <genclk_enable_config+0x58>)
   80a1e:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   80a20:	f107 0314 	add.w	r3, r7, #20
   80a24:	6879      	ldr	r1, [r7, #4]
   80a26:	4618      	mov	r0, r3
   80a28:	4b08      	ldr	r3, [pc, #32]	; (80a4c <genclk_enable_config+0x5c>)
   80a2a:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80a2c:	f107 0314 	add.w	r3, r7, #20
   80a30:	68f9      	ldr	r1, [r7, #12]
   80a32:	4618      	mov	r0, r3
   80a34:	4b06      	ldr	r3, [pc, #24]	; (80a50 <genclk_enable_config+0x60>)
   80a36:	4798      	blx	r3
}
   80a38:	bf00      	nop
   80a3a:	3718      	adds	r7, #24
   80a3c:	46bd      	mov	sp, r7
   80a3e:	bd80      	pop	{r7, pc}
   80a40:	00080619 	.word	0x00080619
   80a44:	0008072d 	.word	0x0008072d
   80a48:	00080635 	.word	0x00080635
   80a4c:	000806d1 	.word	0x000806d1
   80a50:	000806fd 	.word	0x000806fd

00080a54 <main>:


int main(void)
{
   80a54:	b580      	push	{r7, lr}
   80a56:	b086      	sub	sp, #24
   80a58:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80a5a:	463b      	mov	r3, r7
   80a5c:	2110      	movs	r1, #16
   80a5e:	4618      	mov	r0, r3
   80a60:	4b1d      	ldr	r3, [pc, #116]	; (80ad8 <main+0x84>)
   80a62:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80a64:	4b1d      	ldr	r3, [pc, #116]	; (80adc <main+0x88>)
   80a66:	2201      	movs	r2, #1
   80a68:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   80a6a:	f3bf 8f5f 	dmb	sy
}
   80a6e:	bf00      	nop
  __ASM volatile ("cpsie i");
   80a70:	b662      	cpsie	i
}
   80a72:	bf00      	nop

    // Initialize the sleep manager
    sleepmgr_init();
   80a74:	4b1a      	ldr	r3, [pc, #104]	; (80ae0 <main+0x8c>)
   80a76:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   80a78:	4b1a      	ldr	r3, [pc, #104]	; (80ae4 <main+0x90>)
   80a7a:	4798      	blx	r3
    phywhisperer_setup_pins();
   80a7c:	4b1a      	ldr	r3, [pc, #104]	; (80ae8 <main+0x94>)
   80a7e:	4798      	blx	r3
#else
    system_init();
#endif

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   80a80:	2300      	movs	r3, #0
   80a82:	617b      	str	r3, [r7, #20]
   80a84:	e011      	b.n	80aaa <main+0x56>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80a86:	697b      	ldr	r3, [r7, #20]
   80a88:	00db      	lsls	r3, r3, #3
   80a8a:	4a18      	ldr	r2, [pc, #96]	; (80aec <main+0x98>)
   80a8c:	1898      	adds	r0, r3, r2
   80a8e:	697b      	ldr	r3, [r7, #20]
   80a90:	009b      	lsls	r3, r3, #2
   80a92:	f107 0218 	add.w	r2, r7, #24
   80a96:	4413      	add	r3, r2
   80a98:	f853 3c18 	ldr.w	r3, [r3, #-24]
   80a9c:	461a      	mov	r2, r3
   80a9e:	4914      	ldr	r1, [pc, #80]	; (80af0 <main+0x9c>)
   80aa0:	4b14      	ldr	r3, [pc, #80]	; (80af4 <main+0xa0>)
   80aa2:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80aa4:	697b      	ldr	r3, [r7, #20]
   80aa6:	3301      	adds	r3, #1
   80aa8:	617b      	str	r3, [r7, #20]
   80aaa:	697b      	ldr	r3, [r7, #20]
   80aac:	2b03      	cmp	r3, #3
   80aae:	d9ea      	bls.n	80a86 <main+0x32>
	}
	usb_serial_number[32] = 0;
   80ab0:	4b0e      	ldr	r3, [pc, #56]	; (80aec <main+0x98>)
   80ab2:	2200      	movs	r2, #0
   80ab4:	f883 2020 	strb.w	r2, [r3, #32]

    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80ab8:	2200      	movs	r2, #0
   80aba:	210a      	movs	r1, #10
   80abc:	2001      	movs	r0, #1
   80abe:	4b0e      	ldr	r3, [pc, #56]	; (80af8 <main+0xa4>)
   80ac0:	4798      	blx	r3
    udc_start();
   80ac2:	4b0e      	ldr	r3, [pc, #56]	; (80afc <main+0xa8>)
   80ac4:	4798      	blx	r3

    USB_PWR_STATE = 0;
   80ac6:	4b0e      	ldr	r3, [pc, #56]	; (80b00 <main+0xac>)
   80ac8:	2200      	movs	r2, #0
   80aca:	701a      	strb	r2, [r3, #0]

    uint8_t curr_pwr_setting = 0;
   80acc:	2300      	movs	r3, #0
   80ace:	74fb      	strb	r3, [r7, #19]
    while(1) {
        sleepmgr_enter_sleep();
   80ad0:	4b0c      	ldr	r3, [pc, #48]	; (80b04 <main+0xb0>)
   80ad2:	4798      	blx	r3
   80ad4:	e7fc      	b.n	80ad0 <main+0x7c>
   80ad6:	bf00      	nop
   80ad8:	00081f2d 	.word	0x00081f2d
   80adc:	20000284 	.word	0x20000284
   80ae0:	00080571 	.word	0x00080571
   80ae4:	00083565 	.word	0x00083565
   80ae8:	000808bd 	.word	0x000808bd
   80aec:	2000025c 	.word	0x2000025c
   80af0:	0008d428 	.word	0x0008d428
   80af4:	00086981 	.word	0x00086981
   80af8:	000809f1 	.word	0x000809f1
   80afc:	000839f1 	.word	0x000839f1
   80b00:	20000e0c 	.word	0x20000e0c
   80b04:	000805d9 	.word	0x000805d9

00080b08 <osc_enable>:
{
   80b08:	b580      	push	{r7, lr}
   80b0a:	b082      	sub	sp, #8
   80b0c:	af00      	add	r7, sp, #0
   80b0e:	6078      	str	r0, [r7, #4]
   80b10:	687b      	ldr	r3, [r7, #4]
   80b12:	2b07      	cmp	r3, #7
   80b14:	d82e      	bhi.n	80b74 <osc_enable+0x6c>
   80b16:	a201      	add	r2, pc, #4	; (adr r2, 80b1c <osc_enable+0x14>)
   80b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b1c:	00080b73 	.word	0x00080b73
   80b20:	00080b3d 	.word	0x00080b3d
   80b24:	00080b45 	.word	0x00080b45
   80b28:	00080b4d 	.word	0x00080b4d
   80b2c:	00080b55 	.word	0x00080b55
   80b30:	00080b5d 	.word	0x00080b5d
   80b34:	00080b65 	.word	0x00080b65
   80b38:	00080b6d 	.word	0x00080b6d
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80b3c:	2000      	movs	r0, #0
   80b3e:	4b0f      	ldr	r3, [pc, #60]	; (80b7c <osc_enable+0x74>)
   80b40:	4798      	blx	r3
		break;
   80b42:	e017      	b.n	80b74 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80b44:	2001      	movs	r0, #1
   80b46:	4b0d      	ldr	r3, [pc, #52]	; (80b7c <osc_enable+0x74>)
   80b48:	4798      	blx	r3
		break;
   80b4a:	e013      	b.n	80b74 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80b4c:	2000      	movs	r0, #0
   80b4e:	4b0c      	ldr	r3, [pc, #48]	; (80b80 <osc_enable+0x78>)
   80b50:	4798      	blx	r3
		break;
   80b52:	e00f      	b.n	80b74 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80b54:	2010      	movs	r0, #16
   80b56:	4b0a      	ldr	r3, [pc, #40]	; (80b80 <osc_enable+0x78>)
   80b58:	4798      	blx	r3
		break;
   80b5a:	e00b      	b.n	80b74 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80b5c:	2020      	movs	r0, #32
   80b5e:	4b08      	ldr	r3, [pc, #32]	; (80b80 <osc_enable+0x78>)
   80b60:	4798      	blx	r3
		break;
   80b62:	e007      	b.n	80b74 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80b64:	203e      	movs	r0, #62	; 0x3e
   80b66:	4b07      	ldr	r3, [pc, #28]	; (80b84 <osc_enable+0x7c>)
   80b68:	4798      	blx	r3
		break;
   80b6a:	e003      	b.n	80b74 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80b6c:	4b06      	ldr	r3, [pc, #24]	; (80b88 <osc_enable+0x80>)
   80b6e:	4798      	blx	r3
		break;
   80b70:	e000      	b.n	80b74 <osc_enable+0x6c>
		break;
   80b72:	bf00      	nop
}
   80b74:	bf00      	nop
   80b76:	3708      	adds	r7, #8
   80b78:	46bd      	mov	sp, r7
   80b7a:	bd80      	pop	{r7, pc}
   80b7c:	00082795 	.word	0x00082795
   80b80:	00082801 	.word	0x00082801
   80b84:	00082875 	.word	0x00082875
   80b88:	000828c5 	.word	0x000828c5

00080b8c <osc_is_ready>:
{
   80b8c:	b580      	push	{r7, lr}
   80b8e:	b082      	sub	sp, #8
   80b90:	af00      	add	r7, sp, #0
   80b92:	6078      	str	r0, [r7, #4]
   80b94:	687b      	ldr	r3, [r7, #4]
   80b96:	2b07      	cmp	r3, #7
   80b98:	d82f      	bhi.n	80bfa <osc_is_ready+0x6e>
   80b9a:	a201      	add	r2, pc, #4	; (adr r2, 80ba0 <osc_is_ready+0x14>)
   80b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80ba0:	00080bc1 	.word	0x00080bc1
   80ba4:	00080bc5 	.word	0x00080bc5
   80ba8:	00080bc5 	.word	0x00080bc5
   80bac:	00080bd7 	.word	0x00080bd7
   80bb0:	00080bd7 	.word	0x00080bd7
   80bb4:	00080bd7 	.word	0x00080bd7
   80bb8:	00080be9 	.word	0x00080be9
   80bbc:	00080be9 	.word	0x00080be9
		return 1;
   80bc0:	2301      	movs	r3, #1
   80bc2:	e01b      	b.n	80bfc <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80bc4:	4b0f      	ldr	r3, [pc, #60]	; (80c04 <osc_is_ready+0x78>)
   80bc6:	4798      	blx	r3
   80bc8:	4603      	mov	r3, r0
   80bca:	2b00      	cmp	r3, #0
   80bcc:	bf14      	ite	ne
   80bce:	2301      	movne	r3, #1
   80bd0:	2300      	moveq	r3, #0
   80bd2:	b2db      	uxtb	r3, r3
   80bd4:	e012      	b.n	80bfc <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80bd6:	4b0c      	ldr	r3, [pc, #48]	; (80c08 <osc_is_ready+0x7c>)
   80bd8:	4798      	blx	r3
   80bda:	4603      	mov	r3, r0
   80bdc:	2b00      	cmp	r3, #0
   80bde:	bf14      	ite	ne
   80be0:	2301      	movne	r3, #1
   80be2:	2300      	moveq	r3, #0
   80be4:	b2db      	uxtb	r3, r3
   80be6:	e009      	b.n	80bfc <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80be8:	4b08      	ldr	r3, [pc, #32]	; (80c0c <osc_is_ready+0x80>)
   80bea:	4798      	blx	r3
   80bec:	4603      	mov	r3, r0
   80bee:	2b00      	cmp	r3, #0
   80bf0:	bf14      	ite	ne
   80bf2:	2301      	movne	r3, #1
   80bf4:	2300      	moveq	r3, #0
   80bf6:	b2db      	uxtb	r3, r3
   80bf8:	e000      	b.n	80bfc <osc_is_ready+0x70>
	return 0;
   80bfa:	2300      	movs	r3, #0
}
   80bfc:	4618      	mov	r0, r3
   80bfe:	3708      	adds	r7, #8
   80c00:	46bd      	mov	sp, r7
   80c02:	bd80      	pop	{r7, pc}
   80c04:	000827cd 	.word	0x000827cd
   80c08:	0008285d 	.word	0x0008285d
   80c0c:	00082911 	.word	0x00082911

00080c10 <osc_wait_ready>:
{
   80c10:	b580      	push	{r7, lr}
   80c12:	b082      	sub	sp, #8
   80c14:	af00      	add	r7, sp, #0
   80c16:	4603      	mov	r3, r0
   80c18:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80c1a:	bf00      	nop
   80c1c:	79fb      	ldrb	r3, [r7, #7]
   80c1e:	4618      	mov	r0, r3
   80c20:	4b06      	ldr	r3, [pc, #24]	; (80c3c <osc_wait_ready+0x2c>)
   80c22:	4798      	blx	r3
   80c24:	4603      	mov	r3, r0
   80c26:	f083 0301 	eor.w	r3, r3, #1
   80c2a:	b2db      	uxtb	r3, r3
   80c2c:	2b00      	cmp	r3, #0
   80c2e:	d1f5      	bne.n	80c1c <osc_wait_ready+0xc>
}
   80c30:	bf00      	nop
   80c32:	bf00      	nop
   80c34:	3708      	adds	r7, #8
   80c36:	46bd      	mov	sp, r7
   80c38:	bd80      	pop	{r7, pc}
   80c3a:	bf00      	nop
   80c3c:	00080b8d 	.word	0x00080b8d

00080c40 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   80c40:	b580      	push	{r7, lr}
   80c42:	af00      	add	r7, sp, #0
	udd_detach();
   80c44:	4b01      	ldr	r3, [pc, #4]	; (80c4c <udc_detach+0xc>)
   80c46:	4798      	blx	r3
}
   80c48:	bf00      	nop
   80c4a:	bd80      	pop	{r7, pc}
   80c4c:	00084b7d 	.word	0x00084b7d

00080c50 <main_suspend_action>:
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80c50:	b480      	push	{r7}
   80c52:	af00      	add	r7, sp, #0
}
   80c54:	bf00      	nop
   80c56:	46bd      	mov	sp, r7
   80c58:	bc80      	pop	{r7}
   80c5a:	4770      	bx	lr

00080c5c <main_resume_action>:

void main_resume_action(void)
{
   80c5c:	b480      	push	{r7}
   80c5e:	af00      	add	r7, sp, #0
}
   80c60:	bf00      	nop
   80c62:	46bd      	mov	sp, r7
   80c64:	bc80      	pop	{r7}
   80c66:	4770      	bx	lr

00080c68 <main_sof_action>:

void main_sof_action(void)
{
   80c68:	b480      	push	{r7}
   80c6a:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80c6c:	4b04      	ldr	r3, [pc, #16]	; (80c80 <main_sof_action+0x18>)
   80c6e:	781b      	ldrb	r3, [r3, #0]
   80c70:	b2db      	uxtb	r3, r3
   80c72:	f083 0301 	eor.w	r3, r3, #1
   80c76:	b2db      	uxtb	r3, r3
   80c78:	2b00      	cmp	r3, #0
        return;
}
   80c7a:	46bd      	mov	sp, r7
   80c7c:	bc80      	pop	{r7}
   80c7e:	4770      	bx	lr
   80c80:	2000027d 	.word	0x2000027d

00080c84 <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80c84:	b580      	push	{r7, lr}
   80c86:	af00      	add	r7, sp, #0
    main_b_vendor_enable = true;
   80c88:	4b05      	ldr	r3, [pc, #20]	; (80ca0 <main_vendor_enable+0x1c>)
   80c8a:	2201      	movs	r2, #1
   80c8c:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
    //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80c8e:	4a05      	ldr	r2, [pc, #20]	; (80ca4 <main_vendor_enable+0x20>)
   80c90:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80c94:	4804      	ldr	r0, [pc, #16]	; (80ca8 <main_vendor_enable+0x24>)
   80c96:	4b05      	ldr	r3, [pc, #20]	; (80cac <main_vendor_enable+0x28>)
   80c98:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
#endif
    return true;
   80c9a:	2301      	movs	r3, #1
}
   80c9c:	4618      	mov	r0, r3
   80c9e:	bd80      	pop	{r7, pc}
   80ca0:	2000027d 	.word	0x2000027d
   80ca4:	00081285 	.word	0x00081285
   80ca8:	20000e10 	.word	0x20000e10
   80cac:	0008465d 	.word	0x0008465d

00080cb0 <main_vendor_disable>:

void main_vendor_disable(void)
{
   80cb0:	b480      	push	{r7}
   80cb2:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80cb4:	4b03      	ldr	r3, [pc, #12]	; (80cc4 <main_vendor_disable+0x14>)
   80cb6:	2200      	movs	r2, #0
   80cb8:	701a      	strb	r2, [r3, #0]
}
   80cba:	bf00      	nop
   80cbc:	46bd      	mov	sp, r7
   80cbe:	bc80      	pop	{r7}
   80cc0:	4770      	bx	lr
   80cc2:	bf00      	nop
   80cc4:	2000027d 	.word	0x2000027d

00080cc8 <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   80cc8:	b580      	push	{r7, lr}
   80cca:	b082      	sub	sp, #8
   80ccc:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80cce:	4b0f      	ldr	r3, [pc, #60]	; (80d0c <ctrl_readmem_bulk+0x44>)
   80cd0:	681b      	ldr	r3, [r3, #0]
   80cd2:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80cd4:	4b0d      	ldr	r3, [pc, #52]	; (80d0c <ctrl_readmem_bulk+0x44>)
   80cd6:	685b      	ldr	r3, [r3, #4]
   80cd8:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80cda:	4b0d      	ldr	r3, [pc, #52]	; (80d10 <ctrl_readmem_bulk+0x48>)
   80cdc:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80cde:	bf00      	nop
   80ce0:	2002      	movs	r0, #2
   80ce2:	4b0c      	ldr	r3, [pc, #48]	; (80d14 <ctrl_readmem_bulk+0x4c>)
   80ce4:	4798      	blx	r3
   80ce6:	4603      	mov	r3, r0
   80ce8:	2b00      	cmp	r3, #0
   80cea:	d0f9      	beq.n	80ce0 <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80cec:	6838      	ldr	r0, [r7, #0]
   80cee:	4b0a      	ldr	r3, [pc, #40]	; (80d18 <ctrl_readmem_bulk+0x50>)
   80cf0:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80cf2:	4a0a      	ldr	r2, [pc, #40]	; (80d1c <ctrl_readmem_bulk+0x54>)
   80cf4:	6879      	ldr	r1, [r7, #4]
   80cf6:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80cfa:	4b09      	ldr	r3, [pc, #36]	; (80d20 <ctrl_readmem_bulk+0x58>)
   80cfc:	4798      	blx	r3
        (uint8_t *) PSRAM_BASE_ADDRESS,
        buflen,
        main_vendor_bulk_in_received
        );
    FPGA_releaselock();
   80cfe:	4b04      	ldr	r3, [pc, #16]	; (80d10 <ctrl_readmem_bulk+0x48>)
   80d00:	4798      	blx	r3
}
   80d02:	bf00      	nop
   80d04:	3708      	adds	r7, #8
   80d06:	46bd      	mov	sp, r7
   80d08:	bd80      	pop	{r7, pc}
   80d0a:	bf00      	nop
   80d0c:	20001210 	.word	0x20001210
   80d10:	00081385 	.word	0x00081385
   80d14:	00081345 	.word	0x00081345
   80d18:	000813b5 	.word	0x000813b5
   80d1c:	0008124d 	.word	0x0008124d
   80d20:	00084631 	.word	0x00084631

00080d24 <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80d24:	b580      	push	{r7, lr}
   80d26:	b082      	sub	sp, #8
   80d28:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80d2a:	4b0f      	ldr	r3, [pc, #60]	; (80d68 <ctrl_readmem_ctrl+0x44>)
   80d2c:	681b      	ldr	r3, [r3, #0]
   80d2e:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80d30:	4b0d      	ldr	r3, [pc, #52]	; (80d68 <ctrl_readmem_ctrl+0x44>)
   80d32:	685b      	ldr	r3, [r3, #4]
   80d34:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80d36:	4b0d      	ldr	r3, [pc, #52]	; (80d6c <ctrl_readmem_ctrl+0x48>)
   80d38:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80d3a:	bf00      	nop
   80d3c:	2005      	movs	r0, #5
   80d3e:	4b0c      	ldr	r3, [pc, #48]	; (80d70 <ctrl_readmem_ctrl+0x4c>)
   80d40:	4798      	blx	r3
   80d42:	4603      	mov	r3, r0
   80d44:	2b00      	cmp	r3, #0
   80d46:	d0f9      	beq.n	80d3c <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80d48:	6838      	ldr	r0, [r7, #0]
   80d4a:	4b0a      	ldr	r3, [pc, #40]	; (80d74 <ctrl_readmem_ctrl+0x50>)
   80d4c:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80d4e:	4b0a      	ldr	r3, [pc, #40]	; (80d78 <ctrl_readmem_ctrl+0x54>)
   80d50:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80d54:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80d56:	4a09      	ldr	r2, [pc, #36]	; (80d7c <ctrl_readmem_ctrl+0x58>)
   80d58:	687b      	ldr	r3, [r7, #4]
   80d5a:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    FPGA_releaselock();
   80d5c:	4b03      	ldr	r3, [pc, #12]	; (80d6c <ctrl_readmem_ctrl+0x48>)
   80d5e:	4798      	blx	r3
}
   80d60:	bf00      	nop
   80d62:	3708      	adds	r7, #8
   80d64:	46bd      	mov	sp, r7
   80d66:	bd80      	pop	{r7, pc}
   80d68:	20001210 	.word	0x20001210
   80d6c:	00081385 	.word	0x00081385
   80d70:	00081345 	.word	0x00081345
   80d74:	000813b5 	.word	0x000813b5
   80d78:	20001254 	.word	0x20001254
   80d7c:	20001258 	.word	0x20001258

00080d80 <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80d80:	b580      	push	{r7, lr}
   80d82:	b084      	sub	sp, #16
   80d84:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80d86:	4b16      	ldr	r3, [pc, #88]	; (80de0 <ctrl_writemem_ctrl+0x60>)
   80d88:	681b      	ldr	r3, [r3, #0]
   80d8a:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80d8c:	4b14      	ldr	r3, [pc, #80]	; (80de0 <ctrl_writemem_ctrl+0x60>)
   80d8e:	685b      	ldr	r3, [r3, #4]
   80d90:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80d92:	4b14      	ldr	r3, [pc, #80]	; (80de4 <ctrl_writemem_ctrl+0x64>)
   80d94:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   80d96:	4b14      	ldr	r3, [pc, #80]	; (80de8 <ctrl_writemem_ctrl+0x68>)
   80d98:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80d9a:	bf00      	nop
   80d9c:	2001      	movs	r0, #1
   80d9e:	4b13      	ldr	r3, [pc, #76]	; (80dec <ctrl_writemem_ctrl+0x6c>)
   80da0:	4798      	blx	r3
   80da2:	4603      	mov	r3, r0
   80da4:	2b00      	cmp	r3, #0
   80da6:	d0f9      	beq.n	80d9c <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   80da8:	6878      	ldr	r0, [r7, #4]
   80daa:	4b11      	ldr	r3, [pc, #68]	; (80df0 <ctrl_writemem_ctrl+0x70>)
   80dac:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   80dae:	2300      	movs	r3, #0
   80db0:	60fb      	str	r3, [r7, #12]
   80db2:	e00b      	b.n	80dcc <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   80db4:	683a      	ldr	r2, [r7, #0]
   80db6:	68fb      	ldr	r3, [r7, #12]
   80db8:	441a      	add	r2, r3
   80dba:	4b0e      	ldr	r3, [pc, #56]	; (80df4 <ctrl_writemem_ctrl+0x74>)
   80dbc:	6819      	ldr	r1, [r3, #0]
   80dbe:	68fb      	ldr	r3, [r7, #12]
   80dc0:	440b      	add	r3, r1
   80dc2:	7812      	ldrb	r2, [r2, #0]
   80dc4:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   80dc6:	68fb      	ldr	r3, [r7, #12]
   80dc8:	3301      	adds	r3, #1
   80dca:	60fb      	str	r3, [r7, #12]
   80dcc:	68fa      	ldr	r2, [r7, #12]
   80dce:	68bb      	ldr	r3, [r7, #8]
   80dd0:	429a      	cmp	r2, r3
   80dd2:	d3ef      	bcc.n	80db4 <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   80dd4:	4b04      	ldr	r3, [pc, #16]	; (80de8 <ctrl_writemem_ctrl+0x68>)
   80dd6:	4798      	blx	r3
}
   80dd8:	bf00      	nop
   80dda:	3710      	adds	r7, #16
   80ddc:	46bd      	mov	sp, r7
   80dde:	bd80      	pop	{r7, pc}
   80de0:	20001210 	.word	0x20001210
   80de4:	20001218 	.word	0x20001218
   80de8:	00081385 	.word	0x00081385
   80dec:	00081345 	.word	0x00081345
   80df0:	000813b5 	.word	0x000813b5
   80df4:	20000280 	.word	0x20000280

00080df8 <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   80df8:	b580      	push	{r7, lr}
   80dfa:	b082      	sub	sp, #8
   80dfc:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80dfe:	4b0a      	ldr	r3, [pc, #40]	; (80e28 <ctrl_writemem_bulk+0x30>)
   80e00:	685b      	ldr	r3, [r3, #4]
   80e02:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   80e04:	4b09      	ldr	r3, [pc, #36]	; (80e2c <ctrl_writemem_bulk+0x34>)
   80e06:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   80e08:	bf00      	nop
   80e0a:	2004      	movs	r0, #4
   80e0c:	4b08      	ldr	r3, [pc, #32]	; (80e30 <ctrl_writemem_bulk+0x38>)
   80e0e:	4798      	blx	r3
   80e10:	4603      	mov	r3, r0
   80e12:	2b00      	cmp	r3, #0
   80e14:	d0f9      	beq.n	80e0a <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   80e16:	6878      	ldr	r0, [r7, #4]
   80e18:	4b06      	ldr	r3, [pc, #24]	; (80e34 <ctrl_writemem_bulk+0x3c>)
   80e1a:	4798      	blx	r3

    /* Transaction done in generic callback */
    FPGA_releaselock();
   80e1c:	4b03      	ldr	r3, [pc, #12]	; (80e2c <ctrl_writemem_bulk+0x34>)
   80e1e:	4798      	blx	r3
}
   80e20:	bf00      	nop
   80e22:	3708      	adds	r7, #8
   80e24:	46bd      	mov	sp, r7
   80e26:	bd80      	pop	{r7, pc}
   80e28:	20001210 	.word	0x20001210
   80e2c:	00081385 	.word	0x00081385
   80e30:	00081345 	.word	0x00081345
   80e34:	000813b5 	.word	0x000813b5

00080e38 <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80e38:	b580      	push	{r7, lr}
   80e3a:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80e3c:	4b19      	ldr	r3, [pc, #100]	; (80ea4 <ctrl_sam3ucfg_cb+0x6c>)
   80e3e:	885b      	ldrh	r3, [r3, #2]
   80e40:	b2db      	uxtb	r3, r3
   80e42:	2b03      	cmp	r3, #3
   80e44:	d014      	beq.n	80e70 <ctrl_sam3ucfg_cb+0x38>
   80e46:	2b03      	cmp	r3, #3
   80e48:	dc29      	bgt.n	80e9e <ctrl_sam3ucfg_cb+0x66>
   80e4a:	2b01      	cmp	r3, #1
   80e4c:	d002      	beq.n	80e54 <ctrl_sam3ucfg_cb+0x1c>
   80e4e:	2b02      	cmp	r3, #2
   80e50:	d00a      	beq.n	80e68 <ctrl_sam3ucfg_cb+0x30>
        /* Make the jump */
        break;

        /* Oh well, sucks to be you */
    default:
        break;
   80e52:	e024      	b.n	80e9e <ctrl_sam3ucfg_cb+0x66>
        osc_enable(OSC_MAINCK_XTAL);
   80e54:	2006      	movs	r0, #6
   80e56:	4b14      	ldr	r3, [pc, #80]	; (80ea8 <ctrl_sam3ucfg_cb+0x70>)
   80e58:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   80e5a:	2006      	movs	r0, #6
   80e5c:	4b13      	ldr	r3, [pc, #76]	; (80eac <ctrl_sam3ucfg_cb+0x74>)
   80e5e:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80e60:	2010      	movs	r0, #16
   80e62:	4b13      	ldr	r3, [pc, #76]	; (80eb0 <ctrl_sam3ucfg_cb+0x78>)
   80e64:	4798      	blx	r3
        break;
   80e66:	e01b      	b.n	80ea0 <ctrl_sam3ucfg_cb+0x68>
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80e68:	2010      	movs	r0, #16
   80e6a:	4b12      	ldr	r3, [pc, #72]	; (80eb4 <ctrl_sam3ucfg_cb+0x7c>)
   80e6c:	4798      	blx	r3
        break;
   80e6e:	e017      	b.n	80ea0 <ctrl_sam3ucfg_cb+0x68>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80e70:	2201      	movs	r2, #1
   80e72:	210c      	movs	r1, #12
   80e74:	4810      	ldr	r0, [pc, #64]	; (80eb8 <ctrl_sam3ucfg_cb+0x80>)
   80e76:	4b11      	ldr	r3, [pc, #68]	; (80ebc <ctrl_sam3ucfg_cb+0x84>)
   80e78:	4798      	blx	r3
        udc_detach();
   80e7a:	4b11      	ldr	r3, [pc, #68]	; (80ec0 <ctrl_sam3ucfg_cb+0x88>)
   80e7c:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80e7e:	bf00      	nop
   80e80:	4b10      	ldr	r3, [pc, #64]	; (80ec4 <ctrl_sam3ucfg_cb+0x8c>)
   80e82:	685b      	ldr	r3, [r3, #4]
   80e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80e88:	2b00      	cmp	r3, #0
   80e8a:	d1f9      	bne.n	80e80 <ctrl_sam3ucfg_cb+0x48>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80e8c:	4b0d      	ldr	r3, [pc, #52]	; (80ec4 <ctrl_sam3ucfg_cb+0x8c>)
   80e8e:	681b      	ldr	r3, [r3, #0]
   80e90:	4a0c      	ldr	r2, [pc, #48]	; (80ec4 <ctrl_sam3ucfg_cb+0x8c>)
   80e92:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80e96:	f043 0305 	orr.w	r3, r3, #5
   80e9a:	6013      	str	r3, [r2, #0]
        while(1);
   80e9c:	e7fe      	b.n	80e9c <ctrl_sam3ucfg_cb+0x64>
        break;
   80e9e:	bf00      	nop
    }
}
   80ea0:	bf00      	nop
   80ea2:	bd80      	pop	{r7, pc}
   80ea4:	20001828 	.word	0x20001828
   80ea8:	00080b09 	.word	0x00080b09
   80eac:	00080c11 	.word	0x00080c11
   80eb0:	00082695 	.word	0x00082695
   80eb4:	00082715 	.word	0x00082715
   80eb8:	400e0800 	.word	0x400e0800
   80ebc:	00081ec5 	.word	0x00081ec5
   80ec0:	00080c41 	.word	0x00080c41
   80ec4:	400e1200 	.word	0x400e1200

00080ec8 <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   80ec8:	b580      	push	{r7, lr}
   80eca:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   80ecc:	4b0d      	ldr	r3, [pc, #52]	; (80f04 <ctrl_progfpga_bulk+0x3c>)
   80ece:	885b      	ldrh	r3, [r3, #2]
   80ed0:	2ba2      	cmp	r3, #162	; 0xa2
   80ed2:	d00f      	beq.n	80ef4 <ctrl_progfpga_bulk+0x2c>
   80ed4:	2ba2      	cmp	r3, #162	; 0xa2
   80ed6:	dc11      	bgt.n	80efc <ctrl_progfpga_bulk+0x34>
   80ed8:	2ba0      	cmp	r3, #160	; 0xa0
   80eda:	d002      	beq.n	80ee2 <ctrl_progfpga_bulk+0x1a>
   80edc:	2ba1      	cmp	r3, #161	; 0xa1
   80ede:	d003      	beq.n	80ee8 <ctrl_progfpga_bulk+0x20>
        /* Done */
        blockendpoint_usage = bep_emem;
        break;

    default:
        break;
   80ee0:	e00c      	b.n	80efc <ctrl_progfpga_bulk+0x34>
        fpga_program_setup1();
   80ee2:	4b09      	ldr	r3, [pc, #36]	; (80f08 <ctrl_progfpga_bulk+0x40>)
   80ee4:	4798      	blx	r3
        break;
   80ee6:	e00a      	b.n	80efe <ctrl_progfpga_bulk+0x36>
        fpga_program_setup2();
   80ee8:	4b08      	ldr	r3, [pc, #32]	; (80f0c <ctrl_progfpga_bulk+0x44>)
   80eea:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   80eec:	4b08      	ldr	r3, [pc, #32]	; (80f10 <ctrl_progfpga_bulk+0x48>)
   80eee:	220a      	movs	r2, #10
   80ef0:	701a      	strb	r2, [r3, #0]
        break;
   80ef2:	e004      	b.n	80efe <ctrl_progfpga_bulk+0x36>
        blockendpoint_usage = bep_emem;
   80ef4:	4b06      	ldr	r3, [pc, #24]	; (80f10 <ctrl_progfpga_bulk+0x48>)
   80ef6:	2200      	movs	r2, #0
   80ef8:	701a      	strb	r2, [r3, #0]
        break;
   80efa:	e000      	b.n	80efe <ctrl_progfpga_bulk+0x36>
        break;
   80efc:	bf00      	nop
    }
}
   80efe:	bf00      	nop
   80f00:	bd80      	pop	{r7, pc}
   80f02:	bf00      	nop
   80f04:	20001828 	.word	0x20001828
   80f08:	000814d5 	.word	0x000814d5
   80f0c:	00081555 	.word	0x00081555
   80f10:	20001250 	.word	0x20001250

00080f14 <ctrl_fpga_reset>:

void ctrl_fpga_reset(void) {
   80f14:	b580      	push	{r7, lr}
   80f16:	af00      	add	r7, sp, #0
  gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   80f18:	2026      	movs	r0, #38	; 0x26
   80f1a:	4b03      	ldr	r3, [pc, #12]	; (80f28 <ctrl_fpga_reset+0x14>)
   80f1c:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   80f1e:	2026      	movs	r0, #38	; 0x26
   80f20:	4b02      	ldr	r3, [pc, #8]	; (80f2c <ctrl_fpga_reset+0x18>)
   80f22:	4798      	blx	r3
}
   80f24:	bf00      	nop
   80f26:	bd80      	pop	{r7, pc}
   80f28:	00082321 	.word	0x00082321
   80f2c:	00082351 	.word	0x00082351

00080f30 <ctrl_usart_cb>:

static void ctrl_usart_cb(void)
{
   80f30:	b580      	push	{r7, lr}
   80f32:	af00      	add	r7, sp, #0
	ctrl_usart(USART_TARGET, false);
   80f34:	2100      	movs	r1, #0
   80f36:	4802      	ldr	r0, [pc, #8]	; (80f40 <ctrl_usart_cb+0x10>)
   80f38:	4b02      	ldr	r3, [pc, #8]	; (80f44 <ctrl_usart_cb+0x14>)
   80f3a:	4798      	blx	r3
}
   80f3c:	bf00      	nop
   80f3e:	bd80      	pop	{r7, pc}
   80f40:	40090000 	.word	0x40090000
   80f44:	0008171d 	.word	0x0008171d

00080f48 <ctrl_usart_cb_data>:

static void ctrl_usart_cb_data(void)
{		
   80f48:	b580      	push	{r7, lr}
   80f4a:	b082      	sub	sp, #8
   80f4c:	af00      	add	r7, sp, #0
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   80f4e:	4b10      	ldr	r3, [pc, #64]	; (80f90 <ctrl_usart_cb_data+0x48>)
   80f50:	88da      	ldrh	r2, [r3, #6]
   80f52:	4b0f      	ldr	r3, [pc, #60]	; (80f90 <ctrl_usart_cb_data+0x48>)
   80f54:	899b      	ldrh	r3, [r3, #12]
   80f56:	429a      	cmp	r2, r3
   80f58:	d816      	bhi.n	80f88 <ctrl_usart_cb_data+0x40>
		return;
	}
	
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   80f5a:	2300      	movs	r3, #0
   80f5c:	607b      	str	r3, [r7, #4]
   80f5e:	e00c      	b.n	80f7a <ctrl_usart_cb_data+0x32>
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   80f60:	4b0b      	ldr	r3, [pc, #44]	; (80f90 <ctrl_usart_cb_data+0x48>)
   80f62:	689a      	ldr	r2, [r3, #8]
   80f64:	687b      	ldr	r3, [r7, #4]
   80f66:	4413      	add	r3, r2
   80f68:	781b      	ldrb	r3, [r3, #0]
   80f6a:	461a      	mov	r2, r3
   80f6c:	2100      	movs	r1, #0
   80f6e:	4809      	ldr	r0, [pc, #36]	; (80f94 <ctrl_usart_cb_data+0x4c>)
   80f70:	4b09      	ldr	r3, [pc, #36]	; (80f98 <ctrl_usart_cb_data+0x50>)
   80f72:	4798      	blx	r3
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   80f74:	687b      	ldr	r3, [r7, #4]
   80f76:	3301      	adds	r3, #1
   80f78:	607b      	str	r3, [r7, #4]
   80f7a:	4b05      	ldr	r3, [pc, #20]	; (80f90 <ctrl_usart_cb_data+0x48>)
   80f7c:	88db      	ldrh	r3, [r3, #6]
   80f7e:	461a      	mov	r2, r3
   80f80:	687b      	ldr	r3, [r7, #4]
   80f82:	4293      	cmp	r3, r2
   80f84:	dbec      	blt.n	80f60 <ctrl_usart_cb_data+0x18>
   80f86:	e000      	b.n	80f8a <ctrl_usart_cb_data+0x42>
		return;
   80f88:	bf00      	nop
	}
}
   80f8a:	3708      	adds	r7, #8
   80f8c:	46bd      	mov	sp, r7
   80f8e:	bd80      	pop	{r7, pc}
   80f90:	20001828 	.word	0x20001828
   80f94:	40090000 	.word	0x40090000
   80f98:	00081b05 	.word	0x00081b05

00080f9c <main_setup_out_received>:
{
	V2Protocol_ProcessCommand();
}

bool main_setup_out_received(void)
{
   80f9c:	b580      	push	{r7, lr}
   80f9e:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   80fa0:	4b49      	ldr	r3, [pc, #292]	; (810c8 <main_setup_out_received+0x12c>)
   80fa2:	4a4a      	ldr	r2, [pc, #296]	; (810cc <main_setup_out_received+0x130>)
   80fa4:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   80fa6:	4b48      	ldr	r3, [pc, #288]	; (810c8 <main_setup_out_received+0x12c>)
   80fa8:	88db      	ldrh	r3, [r3, #6]
   80faa:	2b40      	cmp	r3, #64	; 0x40
   80fac:	bf28      	it	cs
   80fae:	2340      	movcs	r3, #64	; 0x40
   80fb0:	b29a      	uxth	r2, r3
   80fb2:	4b45      	ldr	r3, [pc, #276]	; (810c8 <main_setup_out_received+0x12c>)
   80fb4:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   80fb6:	4b46      	ldr	r3, [pc, #280]	; (810d0 <main_setup_out_received+0x134>)
   80fb8:	2200      	movs	r2, #0
   80fba:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   80fbc:	4b42      	ldr	r3, [pc, #264]	; (810c8 <main_setup_out_received+0x12c>)
   80fbe:	785b      	ldrb	r3, [r3, #1]
   80fc0:	3b10      	subs	r3, #16
   80fc2:	2b15      	cmp	r3, #21
   80fc4:	d873      	bhi.n	810ae <main_setup_out_received+0x112>
   80fc6:	a201      	add	r2, pc, #4	; (adr r2, 80fcc <main_setup_out_received+0x30>)
   80fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80fcc:	00081025 	.word	0x00081025
   80fd0:	00081051 	.word	0x00081051
   80fd4:	0008103b 	.word	0x0008103b
   80fd8:	00081067 	.word	0x00081067
   80fdc:	000810af 	.word	0x000810af
   80fe0:	000810af 	.word	0x000810af
   80fe4:	00081091 	.word	0x00081091
   80fe8:	000810af 	.word	0x000810af
   80fec:	000810af 	.word	0x000810af
   80ff0:	000810af 	.word	0x000810af
   80ff4:	00081087 	.word	0x00081087
   80ff8:	0008107d 	.word	0x0008107d
   80ffc:	000810af 	.word	0x000810af
   81000:	000810af 	.word	0x000810af
   81004:	000810af 	.word	0x000810af
   81008:	000810af 	.word	0x000810af
   8100c:	000810af 	.word	0x000810af
   81010:	000810af 	.word	0x000810af
   81014:	0008109b 	.word	0x0008109b
   81018:	000810af 	.word	0x000810af
   8101c:	000810af 	.word	0x000810af
   81020:	000810a5 	.word	0x000810a5
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   81024:	2006      	movs	r0, #6
   81026:	4b2b      	ldr	r3, [pc, #172]	; (810d4 <main_setup_out_received+0x138>)
   81028:	4798      	blx	r3
   8102a:	4603      	mov	r3, r0
   8102c:	2b00      	cmp	r3, #0
   8102e:	d040      	beq.n	810b2 <main_setup_out_received+0x116>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   81030:	4b25      	ldr	r3, [pc, #148]	; (810c8 <main_setup_out_received+0x12c>)
   81032:	4a29      	ldr	r2, [pc, #164]	; (810d8 <main_setup_out_received+0x13c>)
   81034:	611a      	str	r2, [r3, #16]
            return true;
   81036:	2301      	movs	r3, #1
   81038:	e043      	b.n	810c2 <main_setup_out_received+0x126>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   8103a:	2006      	movs	r0, #6
   8103c:	4b25      	ldr	r3, [pc, #148]	; (810d4 <main_setup_out_received+0x138>)
   8103e:	4798      	blx	r3
   81040:	4603      	mov	r3, r0
   81042:	2b00      	cmp	r3, #0
   81044:	d037      	beq.n	810b6 <main_setup_out_received+0x11a>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   81046:	4b20      	ldr	r3, [pc, #128]	; (810c8 <main_setup_out_received+0x12c>)
   81048:	4a24      	ldr	r2, [pc, #144]	; (810dc <main_setup_out_received+0x140>)
   8104a:	611a      	str	r2, [r3, #16]
            return true;
   8104c:	2301      	movs	r3, #1
   8104e:	e038      	b.n	810c2 <main_setup_out_received+0x126>
        break;


        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   81050:	2006      	movs	r0, #6
   81052:	4b20      	ldr	r3, [pc, #128]	; (810d4 <main_setup_out_received+0x138>)
   81054:	4798      	blx	r3
   81056:	4603      	mov	r3, r0
   81058:	2b00      	cmp	r3, #0
   8105a:	d02e      	beq.n	810ba <main_setup_out_received+0x11e>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   8105c:	4b1a      	ldr	r3, [pc, #104]	; (810c8 <main_setup_out_received+0x12c>)
   8105e:	4a20      	ldr	r2, [pc, #128]	; (810e0 <main_setup_out_received+0x144>)
   81060:	611a      	str	r2, [r3, #16]
            return true;
   81062:	2301      	movs	r3, #1
   81064:	e02d      	b.n	810c2 <main_setup_out_received+0x126>
    //     udd_g_ctrlreq.callback = ctrl_avr_program_void;
    //     return true;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   81066:	2006      	movs	r0, #6
   81068:	4b1a      	ldr	r3, [pc, #104]	; (810d4 <main_setup_out_received+0x138>)
   8106a:	4798      	blx	r3
   8106c:	4603      	mov	r3, r0
   8106e:	2b00      	cmp	r3, #0
   81070:	d025      	beq.n	810be <main_setup_out_received+0x122>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   81072:	4b15      	ldr	r3, [pc, #84]	; (810c8 <main_setup_out_received+0x12c>)
   81074:	4a1b      	ldr	r2, [pc, #108]	; (810e4 <main_setup_out_received+0x148>)
   81076:	611a      	str	r2, [r3, #16]
            return true;
   81078:	2301      	movs	r3, #1
   8107a:	e022      	b.n	810c2 <main_setup_out_received+0x126>
        }
        break;

		/* Target serial */
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   8107c:	4b12      	ldr	r3, [pc, #72]	; (810c8 <main_setup_out_received+0x12c>)
   8107e:	4a1a      	ldr	r2, [pc, #104]	; (810e8 <main_setup_out_received+0x14c>)
   81080:	611a      	str	r2, [r3, #16]
        return true;
   81082:	2301      	movs	r3, #1
   81084:	e01d      	b.n	810c2 <main_setup_out_received+0x126>
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   81086:	4b10      	ldr	r3, [pc, #64]	; (810c8 <main_setup_out_received+0x12c>)
   81088:	4a18      	ldr	r2, [pc, #96]	; (810ec <main_setup_out_received+0x150>)
   8108a:	611a      	str	r2, [r3, #16]
        return true;
   8108c:	2301      	movs	r3, #1
   8108e:	e018      	b.n	810c2 <main_setup_out_received+0x126>

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   81090:	4b0d      	ldr	r3, [pc, #52]	; (810c8 <main_setup_out_received+0x12c>)
   81092:	4a17      	ldr	r2, [pc, #92]	; (810f0 <main_setup_out_received+0x154>)
   81094:	611a      	str	r2, [r3, #16]
        return true;
   81096:	2301      	movs	r3, #1
   81098:	e013      	b.n	810c2 <main_setup_out_received+0x126>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   8109a:	4b0b      	ldr	r3, [pc, #44]	; (810c8 <main_setup_out_received+0x12c>)
   8109c:	4a15      	ldr	r2, [pc, #84]	; (810f4 <main_setup_out_received+0x158>)
   8109e:	611a      	str	r2, [r3, #16]
        return true;
   810a0:	2301      	movs	r3, #1
   810a2:	e00e      	b.n	810c2 <main_setup_out_received+0x126>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   810a4:	4b08      	ldr	r3, [pc, #32]	; (810c8 <main_setup_out_received+0x12c>)
   810a6:	4a14      	ldr	r2, [pc, #80]	; (810f8 <main_setup_out_received+0x15c>)
   810a8:	611a      	str	r2, [r3, #16]
        return true;
   810aa:	2301      	movs	r3, #1
   810ac:	e009      	b.n	810c2 <main_setup_out_received+0x126>

    default:
        return false;
   810ae:	2300      	movs	r3, #0
   810b0:	e007      	b.n	810c2 <main_setup_out_received+0x126>
        break;
   810b2:	bf00      	nop
   810b4:	e004      	b.n	810c0 <main_setup_out_received+0x124>
        break;
   810b6:	bf00      	nop
   810b8:	e002      	b.n	810c0 <main_setup_out_received+0x124>
        break;
   810ba:	bf00      	nop
   810bc:	e000      	b.n	810c0 <main_setup_out_received+0x124>
        break;
   810be:	bf00      	nop
    }

    return false;
   810c0:	2300      	movs	r3, #0
}
   810c2:	4618      	mov	r0, r3
   810c4:	bd80      	pop	{r7, pc}
   810c6:	bf00      	nop
   810c8:	20001828 	.word	0x20001828
   810cc:	20001210 	.word	0x20001210
   810d0:	20001250 	.word	0x20001250
   810d4:	00081345 	.word	0x00081345
   810d8:	00080cc9 	.word	0x00080cc9
   810dc:	00080d25 	.word	0x00080d25
   810e0:	00080df9 	.word	0x00080df9
   810e4:	00080d81 	.word	0x00080d81
   810e8:	00080f31 	.word	0x00080f31
   810ec:	00080f49 	.word	0x00080f49
   810f0:	00080ec9 	.word	0x00080ec9
   810f4:	00080e39 	.word	0x00080e39
   810f8:	00080f15 	.word	0x00080f15

000810fc <main_setup_in_received>:
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   810fc:	b580      	push	{r7, lr}
   810fe:	b082      	sub	sp, #8
   81100:	af00      	add	r7, sp, #0
    */

    static uint8_t  respbuf[64];
    unsigned int cnt;

    switch(udd_g_ctrlreq.req.bRequest){
   81102:	4b48      	ldr	r3, [pc, #288]	; (81224 <main_setup_in_received+0x128>)
   81104:	785b      	ldrb	r3, [r3, #1]
   81106:	3b12      	subs	r3, #18
   81108:	2b09      	cmp	r3, #9
   8110a:	f200 8085 	bhi.w	81218 <main_setup_in_received+0x11c>
   8110e:	a201      	add	r2, pc, #4	; (adr r2, 81114 <main_setup_in_received+0x18>)
   81110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81114:	0008113d 	.word	0x0008113d
   81118:	00081219 	.word	0x00081219
   8111c:	00081219 	.word	0x00081219
   81120:	000811df 	.word	0x000811df
   81124:	00081219 	.word	0x00081219
   81128:	000811bd 	.word	0x000811bd
   8112c:	00081219 	.word	0x00081219
   81130:	00081219 	.word	0x00081219
   81134:	0008117f 	.word	0x0008117f
   81138:	00081169 	.word	0x00081169
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   8113c:	4b3a      	ldr	r3, [pc, #232]	; (81228 <main_setup_in_received+0x12c>)
   8113e:	681b      	ldr	r3, [r3, #0]
   81140:	4a38      	ldr	r2, [pc, #224]	; (81224 <main_setup_in_received+0x128>)
   81142:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81144:	4b39      	ldr	r3, [pc, #228]	; (8122c <main_setup_in_received+0x130>)
   81146:	681b      	ldr	r3, [r3, #0]
   81148:	b29a      	uxth	r2, r3
   8114a:	4b36      	ldr	r3, [pc, #216]	; (81224 <main_setup_in_received+0x128>)
   8114c:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   8114e:	4b37      	ldr	r3, [pc, #220]	; (8122c <main_setup_in_received+0x130>)
   81150:	2200      	movs	r2, #0
   81152:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   81154:	4b36      	ldr	r3, [pc, #216]	; (81230 <main_setup_in_received+0x134>)
   81156:	4798      	blx	r3
   81158:	4603      	mov	r3, r0
   8115a:	2b05      	cmp	r3, #5
   8115c:	d102      	bne.n	81164 <main_setup_in_received+0x68>
            FPGA_setlock(fpga_unlocked);
   8115e:	2000      	movs	r0, #0
   81160:	4b34      	ldr	r3, [pc, #208]	; (81234 <main_setup_in_received+0x138>)
   81162:	4798      	blx	r3
        }

        return true;
   81164:	2301      	movs	r3, #1
   81166:	e058      	b.n	8121a <main_setup_in_received+0x11e>
    //     return V2Protocol_ProcessCommand();
    //     break;
        
        
    case REQ_USART0_CONFIG:
        return ctrl_usart(USART_TARGET, true);
   81168:	2101      	movs	r1, #1
   8116a:	4833      	ldr	r0, [pc, #204]	; (81238 <main_setup_in_received+0x13c>)
   8116c:	4b33      	ldr	r3, [pc, #204]	; (8123c <main_setup_in_received+0x140>)
   8116e:	4798      	blx	r3
   81170:	4603      	mov	r3, r0
   81172:	2b00      	cmp	r3, #0
   81174:	bf14      	ite	ne
   81176:	2301      	movne	r3, #1
   81178:	2300      	moveq	r3, #0
   8117a:	b2db      	uxtb	r3, r3
   8117c:	e04d      	b.n	8121a <main_setup_in_received+0x11e>
        break;
        
    case REQ_USART0_DATA:						
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   8117e:	2300      	movs	r3, #0
   81180:	607b      	str	r3, [r7, #4]
   81182:	e00c      	b.n	8119e <main_setup_in_received+0xa2>
            respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   81184:	482c      	ldr	r0, [pc, #176]	; (81238 <main_setup_in_received+0x13c>)
   81186:	4b2e      	ldr	r3, [pc, #184]	; (81240 <main_setup_in_received+0x144>)
   81188:	4798      	blx	r3
   8118a:	4603      	mov	r3, r0
   8118c:	b2d9      	uxtb	r1, r3
   8118e:	4a2d      	ldr	r2, [pc, #180]	; (81244 <main_setup_in_received+0x148>)
   81190:	687b      	ldr	r3, [r7, #4]
   81192:	4413      	add	r3, r2
   81194:	460a      	mov	r2, r1
   81196:	701a      	strb	r2, [r3, #0]
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   81198:	687b      	ldr	r3, [r7, #4]
   8119a:	3301      	adds	r3, #1
   8119c:	607b      	str	r3, [r7, #4]
   8119e:	4b21      	ldr	r3, [pc, #132]	; (81224 <main_setup_in_received+0x128>)
   811a0:	88db      	ldrh	r3, [r3, #6]
   811a2:	461a      	mov	r2, r3
   811a4:	687b      	ldr	r3, [r7, #4]
   811a6:	4293      	cmp	r3, r2
   811a8:	d3ec      	bcc.n	81184 <main_setup_in_received+0x88>
        }
        udd_g_ctrlreq.payload = respbuf;
   811aa:	4b1e      	ldr	r3, [pc, #120]	; (81224 <main_setup_in_received+0x128>)
   811ac:	4a25      	ldr	r2, [pc, #148]	; (81244 <main_setup_in_received+0x148>)
   811ae:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   811b0:	687b      	ldr	r3, [r7, #4]
   811b2:	b29a      	uxth	r2, r3
   811b4:	4b1b      	ldr	r3, [pc, #108]	; (81224 <main_setup_in_received+0x128>)
   811b6:	819a      	strh	r2, [r3, #12]
        return true;
   811b8:	2301      	movs	r3, #1
   811ba:	e02e      	b.n	8121a <main_setup_in_received+0x11e>
        break;
    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   811bc:	4b21      	ldr	r3, [pc, #132]	; (81244 <main_setup_in_received+0x148>)
   811be:	2201      	movs	r2, #1
   811c0:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   811c2:	4b20      	ldr	r3, [pc, #128]	; (81244 <main_setup_in_received+0x148>)
   811c4:	2201      	movs	r2, #1
   811c6:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   811c8:	4b1e      	ldr	r3, [pc, #120]	; (81244 <main_setup_in_received+0x148>)
   811ca:	2200      	movs	r2, #0
   811cc:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   811ce:	4b15      	ldr	r3, [pc, #84]	; (81224 <main_setup_in_received+0x128>)
   811d0:	4a1c      	ldr	r2, [pc, #112]	; (81244 <main_setup_in_received+0x148>)
   811d2:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   811d4:	4b13      	ldr	r3, [pc, #76]	; (81224 <main_setup_in_received+0x128>)
   811d6:	2203      	movs	r2, #3
   811d8:	819a      	strh	r2, [r3, #12]
        return true;
   811da:	2301      	movs	r3, #1
   811dc:	e01d      	b.n	8121a <main_setup_in_received+0x11e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   811de:	2013      	movs	r0, #19
   811e0:	4b19      	ldr	r3, [pc, #100]	; (81248 <main_setup_in_received+0x14c>)
   811e2:	4798      	blx	r3
   811e4:	4603      	mov	r3, r0
   811e6:	2b00      	cmp	r3, #0
   811e8:	bf14      	ite	ne
   811ea:	2301      	movne	r3, #1
   811ec:	2300      	moveq	r3, #0
   811ee:	b2db      	uxtb	r3, r3
   811f0:	461a      	mov	r2, r3
   811f2:	4b14      	ldr	r3, [pc, #80]	; (81244 <main_setup_in_received+0x148>)
   811f4:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   811f6:	4b13      	ldr	r3, [pc, #76]	; (81244 <main_setup_in_received+0x148>)
   811f8:	2200      	movs	r2, #0
   811fa:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   811fc:	4b11      	ldr	r3, [pc, #68]	; (81244 <main_setup_in_received+0x148>)
   811fe:	2200      	movs	r2, #0
   81200:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   81202:	4b10      	ldr	r3, [pc, #64]	; (81244 <main_setup_in_received+0x148>)
   81204:	2200      	movs	r2, #0
   81206:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81208:	4b06      	ldr	r3, [pc, #24]	; (81224 <main_setup_in_received+0x128>)
   8120a:	4a0e      	ldr	r2, [pc, #56]	; (81244 <main_setup_in_received+0x148>)
   8120c:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   8120e:	4b05      	ldr	r3, [pc, #20]	; (81224 <main_setup_in_received+0x128>)
   81210:	2204      	movs	r2, #4
   81212:	819a      	strh	r2, [r3, #12]
        return true;
   81214:	2301      	movs	r3, #1
   81216:	e000      	b.n	8121a <main_setup_in_received+0x11e>
        break;
    default:
        return false;
   81218:	2300      	movs	r3, #0
    }
    return false;
}
   8121a:	4618      	mov	r0, r3
   8121c:	3708      	adds	r7, #8
   8121e:	46bd      	mov	sp, r7
   81220:	bd80      	pop	{r7, pc}
   81222:	bf00      	nop
   81224:	20001828 	.word	0x20001828
   81228:	20001254 	.word	0x20001254
   8122c:	20001258 	.word	0x20001258
   81230:	0008139d 	.word	0x0008139d
   81234:	00081345 	.word	0x00081345
   81238:	40090000 	.word	0x40090000
   8123c:	0008171d 	.word	0x0008171d
   81240:	00081bad 	.word	0x00081bad
   81244:	2000125c 	.word	0x2000125c
   81248:	000822f1 	.word	0x000822f1

0008124c <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   8124c:	b580      	push	{r7, lr}
   8124e:	b082      	sub	sp, #8
   81250:	af00      	add	r7, sp, #0
   81252:	4603      	mov	r3, r0
   81254:	6039      	str	r1, [r7, #0]
   81256:	71fb      	strb	r3, [r7, #7]
   81258:	4613      	mov	r3, r2
   8125a:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   8125c:	79fb      	ldrb	r3, [r7, #7]
   8125e:	2b00      	cmp	r3, #0
   81260:	d108      	bne.n	81274 <main_vendor_bulk_in_received+0x28>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   81262:	4b06      	ldr	r3, [pc, #24]	; (8127c <main_vendor_bulk_in_received+0x30>)
   81264:	4798      	blx	r3
   81266:	4603      	mov	r3, r0
   81268:	2b02      	cmp	r3, #2
   8126a:	d104      	bne.n	81276 <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   8126c:	2000      	movs	r0, #0
   8126e:	4b04      	ldr	r3, [pc, #16]	; (81280 <main_vendor_bulk_in_received+0x34>)
   81270:	4798      	blx	r3
   81272:	e000      	b.n	81276 <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   81274:	bf00      	nop
    }
}
   81276:	3708      	adds	r7, #8
   81278:	46bd      	mov	sp, r7
   8127a:	bd80      	pop	{r7, pc}
   8127c:	0008139d 	.word	0x0008139d
   81280:	00081345 	.word	0x00081345

00081284 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81284:	b580      	push	{r7, lr}
   81286:	b084      	sub	sp, #16
   81288:	af00      	add	r7, sp, #0
   8128a:	4603      	mov	r3, r0
   8128c:	6039      	str	r1, [r7, #0]
   8128e:	71fb      	strb	r3, [r7, #7]
   81290:	4613      	mov	r3, r2
   81292:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81294:	79fb      	ldrb	r3, [r7, #7]
   81296:	2b00      	cmp	r3, #0
   81298:	d006      	beq.n	812a8 <main_vendor_bulk_out_received+0x24>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   8129a:	4a22      	ldr	r2, [pc, #136]	; (81324 <main_vendor_bulk_out_received+0xa0>)
   8129c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   812a0:	4821      	ldr	r0, [pc, #132]	; (81328 <main_vendor_bulk_out_received+0xa4>)
   812a2:	4b22      	ldr	r3, [pc, #136]	; (8132c <main_vendor_bulk_out_received+0xa8>)
   812a4:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   812a6:	e039      	b.n	8131c <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   812a8:	4b21      	ldr	r3, [pc, #132]	; (81330 <main_vendor_bulk_out_received+0xac>)
   812aa:	781b      	ldrb	r3, [r3, #0]
   812ac:	2b00      	cmp	r3, #0
   812ae:	d11a      	bne.n	812e6 <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   812b0:	2300      	movs	r3, #0
   812b2:	60fb      	str	r3, [r7, #12]
   812b4:	e00b      	b.n	812ce <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   812b6:	4b1f      	ldr	r3, [pc, #124]	; (81334 <main_vendor_bulk_out_received+0xb0>)
   812b8:	681a      	ldr	r2, [r3, #0]
   812ba:	68fb      	ldr	r3, [r7, #12]
   812bc:	4413      	add	r3, r2
   812be:	491a      	ldr	r1, [pc, #104]	; (81328 <main_vendor_bulk_out_received+0xa4>)
   812c0:	68fa      	ldr	r2, [r7, #12]
   812c2:	440a      	add	r2, r1
   812c4:	7812      	ldrb	r2, [r2, #0]
   812c6:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   812c8:	68fb      	ldr	r3, [r7, #12]
   812ca:	3301      	adds	r3, #1
   812cc:	60fb      	str	r3, [r7, #12]
   812ce:	68fa      	ldr	r2, [r7, #12]
   812d0:	683b      	ldr	r3, [r7, #0]
   812d2:	429a      	cmp	r2, r3
   812d4:	d3ef      	bcc.n	812b6 <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   812d6:	4b18      	ldr	r3, [pc, #96]	; (81338 <main_vendor_bulk_out_received+0xb4>)
   812d8:	4798      	blx	r3
   812da:	4603      	mov	r3, r0
   812dc:	2b04      	cmp	r3, #4
   812de:	d117      	bne.n	81310 <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   812e0:	4b16      	ldr	r3, [pc, #88]	; (8133c <main_vendor_bulk_out_received+0xb8>)
   812e2:	4798      	blx	r3
   812e4:	e014      	b.n	81310 <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   812e6:	4b12      	ldr	r3, [pc, #72]	; (81330 <main_vendor_bulk_out_received+0xac>)
   812e8:	781b      	ldrb	r3, [r3, #0]
   812ea:	2b0a      	cmp	r3, #10
   812ec:	d110      	bne.n	81310 <main_vendor_bulk_out_received+0x8c>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   812ee:	2300      	movs	r3, #0
   812f0:	60bb      	str	r3, [r7, #8]
   812f2:	e009      	b.n	81308 <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   812f4:	4a0c      	ldr	r2, [pc, #48]	; (81328 <main_vendor_bulk_out_received+0xa4>)
   812f6:	68bb      	ldr	r3, [r7, #8]
   812f8:	4413      	add	r3, r2
   812fa:	781b      	ldrb	r3, [r3, #0]
   812fc:	4618      	mov	r0, r3
   812fe:	4b10      	ldr	r3, [pc, #64]	; (81340 <main_vendor_bulk_out_received+0xbc>)
   81300:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   81302:	68bb      	ldr	r3, [r7, #8]
   81304:	3301      	adds	r3, #1
   81306:	60bb      	str	r3, [r7, #8]
   81308:	68ba      	ldr	r2, [r7, #8]
   8130a:	683b      	ldr	r3, [r7, #0]
   8130c:	429a      	cmp	r2, r3
   8130e:	d3f1      	bcc.n	812f4 <main_vendor_bulk_out_received+0x70>
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   81310:	4a04      	ldr	r2, [pc, #16]	; (81324 <main_vendor_bulk_out_received+0xa0>)
   81312:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81316:	4804      	ldr	r0, [pc, #16]	; (81328 <main_vendor_bulk_out_received+0xa4>)
   81318:	4b04      	ldr	r3, [pc, #16]	; (8132c <main_vendor_bulk_out_received+0xa8>)
   8131a:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   8131c:	3710      	adds	r7, #16
   8131e:	46bd      	mov	sp, r7
   81320:	bd80      	pop	{r7, pc}
   81322:	bf00      	nop
   81324:	00081285 	.word	0x00081285
   81328:	20000e10 	.word	0x20000e10
   8132c:	0008465d 	.word	0x0008465d
   81330:	20001250 	.word	0x20001250
   81334:	20000280 	.word	0x20000280
   81338:	0008139d 	.word	0x0008139d
   8133c:	00081385 	.word	0x00081385
   81340:	00081569 	.word	0x00081569

00081344 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81344:	b580      	push	{r7, lr}
   81346:	b084      	sub	sp, #16
   81348:	af00      	add	r7, sp, #0
   8134a:	4603      	mov	r3, r0
   8134c:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   8134e:	2300      	movs	r3, #0
   81350:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   81352:	4b09      	ldr	r3, [pc, #36]	; (81378 <FPGA_setlock+0x34>)
   81354:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   81356:	4b09      	ldr	r3, [pc, #36]	; (8137c <FPGA_setlock+0x38>)
   81358:	781b      	ldrb	r3, [r3, #0]
   8135a:	b2db      	uxtb	r3, r3
   8135c:	2b00      	cmp	r3, #0
   8135e:	d104      	bne.n	8136a <FPGA_setlock+0x26>
  {
    ret = 1;
   81360:	2301      	movs	r3, #1
   81362:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   81364:	4a05      	ldr	r2, [pc, #20]	; (8137c <FPGA_setlock+0x38>)
   81366:	79fb      	ldrb	r3, [r7, #7]
   81368:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   8136a:	4b05      	ldr	r3, [pc, #20]	; (81380 <FPGA_setlock+0x3c>)
   8136c:	4798      	blx	r3
  return ret;
   8136e:	68fb      	ldr	r3, [r7, #12]
}
   81370:	4618      	mov	r0, r3
   81372:	3710      	adds	r7, #16
   81374:	46bd      	mov	sp, r7
   81376:	bd80      	pop	{r7, pc}
   81378:	00082045 	.word	0x00082045
   8137c:	2000129c 	.word	0x2000129c
   81380:	0008209d 	.word	0x0008209d

00081384 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   81384:	b480      	push	{r7}
   81386:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   81388:	4b03      	ldr	r3, [pc, #12]	; (81398 <FPGA_releaselock+0x14>)
   8138a:	2200      	movs	r2, #0
   8138c:	701a      	strb	r2, [r3, #0]
}
   8138e:	bf00      	nop
   81390:	46bd      	mov	sp, r7
   81392:	bc80      	pop	{r7}
   81394:	4770      	bx	lr
   81396:	bf00      	nop
   81398:	2000129c 	.word	0x2000129c

0008139c <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   8139c:	b480      	push	{r7}
   8139e:	af00      	add	r7, sp, #0
  return _fpga_locked;
   813a0:	4b03      	ldr	r3, [pc, #12]	; (813b0 <FPGA_lockstatus+0x14>)
   813a2:	781b      	ldrb	r3, [r3, #0]
   813a4:	b2db      	uxtb	r3, r3
}
   813a6:	4618      	mov	r0, r3
   813a8:	46bd      	mov	sp, r7
   813aa:	bc80      	pop	{r7}
   813ac:	4770      	bx	lr
   813ae:	bf00      	nop
   813b0:	2000129c 	.word	0x2000129c

000813b4 <FPGA_setaddr>:
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   813b4:	b580      	push	{r7, lr}
   813b6:	b082      	sub	sp, #8
   813b8:	af00      	add	r7, sp, #0
   813ba:	6078      	str	r0, [r7, #4]
  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
   813bc:	4b0c      	ldr	r3, [pc, #48]	; (813f0 <FPGA_setaddr+0x3c>)
   813be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   813c0:	f003 0240 	and.w	r2, r3, #64	; 0x40
   813c4:	687b      	ldr	r3, [r7, #4]
   813c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   813ca:	431a      	orrs	r2, r3
   813cc:	687b      	ldr	r3, [r7, #4]
   813ce:	005b      	lsls	r3, r3, #1
   813d0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   813d4:	4906      	ldr	r1, [pc, #24]	; (813f0 <FPGA_setaddr+0x3c>)
   813d6:	4313      	orrs	r3, r2
   813d8:	638b      	str	r3, [r1, #56]	; 0x38
  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   813da:	2031      	movs	r0, #49	; 0x31
   813dc:	4b05      	ldr	r3, [pc, #20]	; (813f4 <FPGA_setaddr+0x40>)
   813de:	4798      	blx	r3
  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   813e0:	2031      	movs	r0, #49	; 0x31
   813e2:	4b05      	ldr	r3, [pc, #20]	; (813f8 <FPGA_setaddr+0x44>)
   813e4:	4798      	blx	r3
}
   813e6:	bf00      	nop
   813e8:	3708      	adds	r7, #8
   813ea:	46bd      	mov	sp, r7
   813ec:	bd80      	pop	{r7, pc}
   813ee:	bf00      	nop
   813f0:	400e0e00 	.word	0x400e0e00
   813f4:	00082351 	.word	0x00082351
   813f8:	00082321 	.word	0x00082321

000813fc <osc_get_rate>:
{
   813fc:	b480      	push	{r7}
   813fe:	b083      	sub	sp, #12
   81400:	af00      	add	r7, sp, #0
   81402:	6078      	str	r0, [r7, #4]
   81404:	687b      	ldr	r3, [r7, #4]
   81406:	2b07      	cmp	r3, #7
   81408:	d823      	bhi.n	81452 <osc_get_rate+0x56>
   8140a:	a201      	add	r2, pc, #4	; (adr r2, 81410 <osc_get_rate+0x14>)
   8140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81410:	00081431 	.word	0x00081431
   81414:	00081437 	.word	0x00081437
   81418:	0008143b 	.word	0x0008143b
   8141c:	0008143f 	.word	0x0008143f
   81420:	00081443 	.word	0x00081443
   81424:	00081447 	.word	0x00081447
   81428:	0008144b 	.word	0x0008144b
   8142c:	0008144f 	.word	0x0008144f
		return OSC_SLCK_32K_RC_HZ;
   81430:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81434:	e00e      	b.n	81454 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   81436:	2300      	movs	r3, #0
   81438:	e00c      	b.n	81454 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   8143a:	2300      	movs	r3, #0
   8143c:	e00a      	b.n	81454 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8143e:	4b08      	ldr	r3, [pc, #32]	; (81460 <osc_get_rate+0x64>)
   81440:	e008      	b.n	81454 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   81442:	4b08      	ldr	r3, [pc, #32]	; (81464 <osc_get_rate+0x68>)
   81444:	e006      	b.n	81454 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   81446:	4b08      	ldr	r3, [pc, #32]	; (81468 <osc_get_rate+0x6c>)
   81448:	e004      	b.n	81454 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   8144a:	4b07      	ldr	r3, [pc, #28]	; (81468 <osc_get_rate+0x6c>)
   8144c:	e002      	b.n	81454 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   8144e:	4b06      	ldr	r3, [pc, #24]	; (81468 <osc_get_rate+0x6c>)
   81450:	e000      	b.n	81454 <osc_get_rate+0x58>
	return 0;
   81452:	2300      	movs	r3, #0
}
   81454:	4618      	mov	r0, r3
   81456:	370c      	adds	r7, #12
   81458:	46bd      	mov	sp, r7
   8145a:	bc80      	pop	{r7}
   8145c:	4770      	bx	lr
   8145e:	bf00      	nop
   81460:	003d0900 	.word	0x003d0900
   81464:	007a1200 	.word	0x007a1200
   81468:	00b71b00 	.word	0x00b71b00

0008146c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8146c:	b580      	push	{r7, lr}
   8146e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   81470:	2006      	movs	r0, #6
   81472:	4b03      	ldr	r3, [pc, #12]	; (81480 <sysclk_get_main_hz+0x14>)
   81474:	4798      	blx	r3
   81476:	4603      	mov	r3, r0
   81478:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8147a:	4618      	mov	r0, r3
   8147c:	bd80      	pop	{r7, pc}
   8147e:	bf00      	nop
   81480:	000813fd 	.word	0x000813fd

00081484 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81484:	b580      	push	{r7, lr}
   81486:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   81488:	4b02      	ldr	r3, [pc, #8]	; (81494 <sysclk_get_cpu_hz+0x10>)
   8148a:	4798      	blx	r3
   8148c:	4603      	mov	r3, r0
   8148e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81490:	4618      	mov	r0, r3
   81492:	bd80      	pop	{r7, pc}
   81494:	0008146d 	.word	0x0008146d

00081498 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81498:	b580      	push	{r7, lr}
   8149a:	b082      	sub	sp, #8
   8149c:	af00      	add	r7, sp, #0
   8149e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   814a0:	6878      	ldr	r0, [r7, #4]
   814a2:	4b03      	ldr	r3, [pc, #12]	; (814b0 <sysclk_enable_peripheral_clock+0x18>)
   814a4:	4798      	blx	r3
}
   814a6:	bf00      	nop
   814a8:	3708      	adds	r7, #8
   814aa:	46bd      	mov	sp, r7
   814ac:	bd80      	pop	{r7, pc}
   814ae:	bf00      	nop
   814b0:	000829e5 	.word	0x000829e5

000814b4 <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   814b4:	b580      	push	{r7, lr}
   814b6:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   814b8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   814bc:	2014      	movs	r0, #20
   814be:	4b03      	ldr	r3, [pc, #12]	; (814cc <fpga_program_init+0x18>)
   814c0:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   814c2:	2014      	movs	r0, #20
   814c4:	4b02      	ldr	r3, [pc, #8]	; (814d0 <fpga_program_init+0x1c>)
   814c6:	4798      	blx	r3
}
   814c8:	bf00      	nop
   814ca:	bd80      	pop	{r7, pc}
   814cc:	00082381 	.word	0x00082381
   814d0:	00082321 	.word	0x00082321

000814d4 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   814d4:	b580      	push	{r7, lr}
   814d6:	b084      	sub	sp, #16
   814d8:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   814da:	2014      	movs	r0, #20
   814dc:	4b14      	ldr	r3, [pc, #80]	; (81530 <fpga_program_setup1+0x5c>)
   814de:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   814e0:	4b14      	ldr	r3, [pc, #80]	; (81534 <fpga_program_setup1+0x60>)
   814e2:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   814e4:	23c0      	movs	r3, #192	; 0xc0
   814e6:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   814e8:	2300      	movs	r3, #0
   814ea:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   814ec:	2300      	movs	r3, #0
   814ee:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   814f0:	200d      	movs	r0, #13
   814f2:	4b11      	ldr	r3, [pc, #68]	; (81538 <fpga_program_setup1+0x64>)
   814f4:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   814f6:	4b11      	ldr	r3, [pc, #68]	; (8153c <fpga_program_setup1+0x68>)
   814f8:	4798      	blx	r3
   814fa:	4602      	mov	r2, r0
   814fc:	463b      	mov	r3, r7
   814fe:	4619      	mov	r1, r3
   81500:	480f      	ldr	r0, [pc, #60]	; (81540 <fpga_program_setup1+0x6c>)
   81502:	4b10      	ldr	r3, [pc, #64]	; (81544 <fpga_program_setup1+0x70>)
   81504:	4798      	blx	r3
    FPGA_DO_SETUP();
   81506:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8150a:	2012      	movs	r0, #18
   8150c:	4b0e      	ldr	r3, [pc, #56]	; (81548 <fpga_program_setup1+0x74>)
   8150e:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   81510:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81514:	2011      	movs	r0, #17
   81516:	4b0c      	ldr	r3, [pc, #48]	; (81548 <fpga_program_setup1+0x74>)
   81518:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   8151a:	4b0c      	ldr	r3, [pc, #48]	; (8154c <fpga_program_setup1+0x78>)
   8151c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   81520:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   81522:	4807      	ldr	r0, [pc, #28]	; (81540 <fpga_program_setup1+0x6c>)
   81524:	4b0a      	ldr	r3, [pc, #40]	; (81550 <fpga_program_setup1+0x7c>)
   81526:	4798      	blx	r3
}
   81528:	bf00      	nop
   8152a:	3710      	adds	r7, #16
   8152c:	46bd      	mov	sp, r7
   8152e:	bd80      	pop	{r7, pc}
   81530:	00082351 	.word	0x00082351
   81534:	00989680 	.word	0x00989680
   81538:	00081499 	.word	0x00081499
   8153c:	00081485 	.word	0x00081485
   81540:	40090000 	.word	0x40090000
   81544:	00086495 	.word	0x00086495
   81548:	00082381 	.word	0x00082381
   8154c:	400e0c00 	.word	0x400e0c00
   81550:	000865a5 	.word	0x000865a5

00081554 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   81554:	b580      	push	{r7, lr}
   81556:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   81558:	2014      	movs	r0, #20
   8155a:	4b02      	ldr	r3, [pc, #8]	; (81564 <fpga_program_setup2+0x10>)
   8155c:	4798      	blx	r3
}
   8155e:	bf00      	nop
   81560:	bd80      	pop	{r7, pc}
   81562:	bf00      	nop
   81564:	00082321 	.word	0x00082321

00081568 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   81568:	b580      	push	{r7, lr}
   8156a:	b082      	sub	sp, #8
   8156c:	af00      	add	r7, sp, #0
   8156e:	4603      	mov	r3, r0
   81570:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   81572:	79fb      	ldrb	r3, [r7, #7]
   81574:	4619      	mov	r1, r3
   81576:	4803      	ldr	r0, [pc, #12]	; (81584 <fpga_program_sendbyte+0x1c>)
   81578:	4b03      	ldr	r3, [pc, #12]	; (81588 <fpga_program_sendbyte+0x20>)
   8157a:	4798      	blx	r3
}
   8157c:	bf00      	nop
   8157e:	3708      	adds	r7, #8
   81580:	46bd      	mov	sp, r7
   81582:	bd80      	pop	{r7, pc}
   81584:	40090000 	.word	0x40090000
   81588:	000866cb 	.word	0x000866cb

0008158c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   8158c:	b480      	push	{r7}
   8158e:	b083      	sub	sp, #12
   81590:	af00      	add	r7, sp, #0
   81592:	4603      	mov	r3, r0
   81594:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81596:	79fb      	ldrb	r3, [r7, #7]
   81598:	f003 031f 	and.w	r3, r3, #31
   8159c:	2201      	movs	r2, #1
   8159e:	fa02 f103 	lsl.w	r1, r2, r3
   815a2:	4a05      	ldr	r2, [pc, #20]	; (815b8 <NVIC_EnableIRQ+0x2c>)
   815a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   815a8:	095b      	lsrs	r3, r3, #5
   815aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   815ae:	bf00      	nop
   815b0:	370c      	adds	r7, #12
   815b2:	46bd      	mov	sp, r7
   815b4:	bc80      	pop	{r7}
   815b6:	4770      	bx	lr
   815b8:	e000e100 	.word	0xe000e100

000815bc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   815bc:	b480      	push	{r7}
   815be:	b083      	sub	sp, #12
   815c0:	af00      	add	r7, sp, #0
   815c2:	4603      	mov	r3, r0
   815c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   815c6:	79fb      	ldrb	r3, [r7, #7]
   815c8:	f003 031f 	and.w	r3, r3, #31
   815cc:	2201      	movs	r2, #1
   815ce:	fa02 f103 	lsl.w	r1, r2, r3
   815d2:	4a06      	ldr	r2, [pc, #24]	; (815ec <NVIC_ClearPendingIRQ+0x30>)
   815d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   815d8:	095b      	lsrs	r3, r3, #5
   815da:	3360      	adds	r3, #96	; 0x60
   815dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   815e0:	bf00      	nop
   815e2:	370c      	adds	r7, #12
   815e4:	46bd      	mov	sp, r7
   815e6:	bc80      	pop	{r7}
   815e8:	4770      	bx	lr
   815ea:	bf00      	nop
   815ec:	e000e100 	.word	0xe000e100

000815f0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   815f0:	b480      	push	{r7}
   815f2:	b083      	sub	sp, #12
   815f4:	af00      	add	r7, sp, #0
   815f6:	4603      	mov	r3, r0
   815f8:	6039      	str	r1, [r7, #0]
   815fa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   815fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81600:	2b00      	cmp	r3, #0
   81602:	da0b      	bge.n	8161c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81604:	683b      	ldr	r3, [r7, #0]
   81606:	b2da      	uxtb	r2, r3
   81608:	490c      	ldr	r1, [pc, #48]	; (8163c <NVIC_SetPriority+0x4c>)
   8160a:	79fb      	ldrb	r3, [r7, #7]
   8160c:	f003 030f 	and.w	r3, r3, #15
   81610:	3b04      	subs	r3, #4
   81612:	0112      	lsls	r2, r2, #4
   81614:	b2d2      	uxtb	r2, r2
   81616:	440b      	add	r3, r1
   81618:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   8161a:	e009      	b.n	81630 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8161c:	683b      	ldr	r3, [r7, #0]
   8161e:	b2da      	uxtb	r2, r3
   81620:	4907      	ldr	r1, [pc, #28]	; (81640 <NVIC_SetPriority+0x50>)
   81622:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81626:	0112      	lsls	r2, r2, #4
   81628:	b2d2      	uxtb	r2, r2
   8162a:	440b      	add	r3, r1
   8162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81630:	bf00      	nop
   81632:	370c      	adds	r7, #12
   81634:	46bd      	mov	sp, r7
   81636:	bc80      	pop	{r7}
   81638:	4770      	bx	lr
   8163a:	bf00      	nop
   8163c:	e000ed00 	.word	0xe000ed00
   81640:	e000e100 	.word	0xe000e100

00081644 <osc_get_rate>:
{
   81644:	b480      	push	{r7}
   81646:	b083      	sub	sp, #12
   81648:	af00      	add	r7, sp, #0
   8164a:	6078      	str	r0, [r7, #4]
   8164c:	687b      	ldr	r3, [r7, #4]
   8164e:	2b07      	cmp	r3, #7
   81650:	d823      	bhi.n	8169a <osc_get_rate+0x56>
   81652:	a201      	add	r2, pc, #4	; (adr r2, 81658 <osc_get_rate+0x14>)
   81654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81658:	00081679 	.word	0x00081679
   8165c:	0008167f 	.word	0x0008167f
   81660:	00081683 	.word	0x00081683
   81664:	00081687 	.word	0x00081687
   81668:	0008168b 	.word	0x0008168b
   8166c:	0008168f 	.word	0x0008168f
   81670:	00081693 	.word	0x00081693
   81674:	00081697 	.word	0x00081697
		return OSC_SLCK_32K_RC_HZ;
   81678:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8167c:	e00e      	b.n	8169c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   8167e:	2300      	movs	r3, #0
   81680:	e00c      	b.n	8169c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   81682:	2300      	movs	r3, #0
   81684:	e00a      	b.n	8169c <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   81686:	4b08      	ldr	r3, [pc, #32]	; (816a8 <osc_get_rate+0x64>)
   81688:	e008      	b.n	8169c <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   8168a:	4b08      	ldr	r3, [pc, #32]	; (816ac <osc_get_rate+0x68>)
   8168c:	e006      	b.n	8169c <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   8168e:	4b08      	ldr	r3, [pc, #32]	; (816b0 <osc_get_rate+0x6c>)
   81690:	e004      	b.n	8169c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   81692:	4b07      	ldr	r3, [pc, #28]	; (816b0 <osc_get_rate+0x6c>)
   81694:	e002      	b.n	8169c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   81696:	4b06      	ldr	r3, [pc, #24]	; (816b0 <osc_get_rate+0x6c>)
   81698:	e000      	b.n	8169c <osc_get_rate+0x58>
	return 0;
   8169a:	2300      	movs	r3, #0
}
   8169c:	4618      	mov	r0, r3
   8169e:	370c      	adds	r7, #12
   816a0:	46bd      	mov	sp, r7
   816a2:	bc80      	pop	{r7}
   816a4:	4770      	bx	lr
   816a6:	bf00      	nop
   816a8:	003d0900 	.word	0x003d0900
   816ac:	007a1200 	.word	0x007a1200
   816b0:	00b71b00 	.word	0x00b71b00

000816b4 <sysclk_get_main_hz>:
{
   816b4:	b580      	push	{r7, lr}
   816b6:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   816b8:	2006      	movs	r0, #6
   816ba:	4b03      	ldr	r3, [pc, #12]	; (816c8 <sysclk_get_main_hz+0x14>)
   816bc:	4798      	blx	r3
   816be:	4603      	mov	r3, r0
   816c0:	011b      	lsls	r3, r3, #4
}
   816c2:	4618      	mov	r0, r3
   816c4:	bd80      	pop	{r7, pc}
   816c6:	bf00      	nop
   816c8:	00081645 	.word	0x00081645

000816cc <sysclk_get_cpu_hz>:
{
   816cc:	b580      	push	{r7, lr}
   816ce:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   816d0:	4b02      	ldr	r3, [pc, #8]	; (816dc <sysclk_get_cpu_hz+0x10>)
   816d2:	4798      	blx	r3
   816d4:	4603      	mov	r3, r0
   816d6:	085b      	lsrs	r3, r3, #1
}
   816d8:	4618      	mov	r0, r3
   816da:	bd80      	pop	{r7, pc}
   816dc:	000816b5 	.word	0x000816b5

000816e0 <sysclk_enable_peripheral_clock>:
{
   816e0:	b580      	push	{r7, lr}
   816e2:	b082      	sub	sp, #8
   816e4:	af00      	add	r7, sp, #0
   816e6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   816e8:	6878      	ldr	r0, [r7, #4]
   816ea:	4b03      	ldr	r3, [pc, #12]	; (816f8 <sysclk_enable_peripheral_clock+0x18>)
   816ec:	4798      	blx	r3
}
   816ee:	bf00      	nop
   816f0:	3708      	adds	r7, #8
   816f2:	46bd      	mov	sp, r7
   816f4:	bd80      	pop	{r7, pc}
   816f6:	bf00      	nop
   816f8:	000829e5 	.word	0x000829e5

000816fc <usart0_enableIO>:
tcirc_buf rx1buf, tx1buf;
tcirc_buf rx2buf, tx2buf;
tcirc_buf rx3buf, tx3buf;

static inline void usart0_enableIO(void)
{
   816fc:	b580      	push	{r7, lr}
   816fe:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81700:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81704:	2013      	movs	r0, #19
   81706:	4b04      	ldr	r3, [pc, #16]	; (81718 <usart0_enableIO+0x1c>)
   81708:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   8170a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8170e:	2012      	movs	r0, #18
   81710:	4b01      	ldr	r3, [pc, #4]	; (81718 <usart0_enableIO+0x1c>)
   81712:	4798      	blx	r3
}
   81714:	bf00      	nop
   81716:	bd80      	pop	{r7, pc}
   81718:	00082381 	.word	0x00082381

0008171c <ctrl_usart>:
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
   8171c:	b580      	push	{r7, lr}
   8171e:	b08a      	sub	sp, #40	; 0x28
   81720:	af00      	add	r7, sp, #0
   81722:	6078      	str	r0, [r7, #4]
   81724:	460b      	mov	r3, r1
   81726:	70fb      	strb	r3, [r7, #3]
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81728:	4b99      	ldr	r3, [pc, #612]	; (81990 <ctrl_usart+0x274>)
   8172a:	885b      	ldrh	r3, [r3, #2]
   8172c:	b2db      	uxtb	r3, r3
   8172e:	3b10      	subs	r3, #16
   81730:	2b08      	cmp	r3, #8
   81732:	f200 81cb 	bhi.w	81acc <ctrl_usart+0x3b0>
   81736:	a201      	add	r2, pc, #4	; (adr r2, 8173c <ctrl_usart+0x20>)
   81738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8173c:	00081761 	.word	0x00081761
   81740:	000818b9 	.word	0x000818b9
   81744:	0008193b 	.word	0x0008193b
   81748:	00081acd 	.word	0x00081acd
   8174c:	0008195f 	.word	0x0008195f
   81750:	00081acd 	.word	0x00081acd
   81754:	00081acd 	.word	0x00081acd
   81758:	00081acd 	.word	0x00081acd
   8175c:	00081a47 	.word	0x00081a47
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   81760:	78fb      	ldrb	r3, [r7, #3]
   81762:	2b00      	cmp	r3, #0
   81764:	d006      	beq.n	81774 <ctrl_usart+0x58>
				if (udd_g_ctrlreq.req.wLength == 4){
   81766:	4b8a      	ldr	r3, [pc, #552]	; (81990 <ctrl_usart+0x274>)
   81768:	88db      	ldrh	r3, [r3, #6]
   8176a:	2b04      	cmp	r3, #4
   8176c:	f040 81a5 	bne.w	81aba <ctrl_usart+0x39e>
					/*
					udd_g_ctrlreq.payload_size = 4;
					udd_g_ctrlreq.payload = ctrlbuffer;
					word2buf(ctrlbuffer, baud);
					*/
					return true;
   81770:	2301      	movs	r3, #1
   81772:	e1ac      	b.n	81ace <ctrl_usart+0x3b2>
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   81774:	4b86      	ldr	r3, [pc, #536]	; (81990 <ctrl_usart+0x274>)
   81776:	88db      	ldrh	r3, [r3, #6]
   81778:	2b07      	cmp	r3, #7
   8177a:	f040 8099 	bne.w	818b0 <ctrl_usart+0x194>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   8177e:	4b84      	ldr	r3, [pc, #528]	; (81990 <ctrl_usart+0x274>)
   81780:	689b      	ldr	r3, [r3, #8]
   81782:	681b      	ldr	r3, [r3, #0]
   81784:	627b      	str	r3, [r7, #36]	; 0x24
					
						usartopts.baudrate = baud;
   81786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81788:	60fb      	str	r3, [r7, #12]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   8178a:	4b81      	ldr	r3, [pc, #516]	; (81990 <ctrl_usart+0x274>)
   8178c:	689b      	ldr	r3, [r3, #8]
   8178e:	3304      	adds	r3, #4
   81790:	781b      	ldrb	r3, [r3, #0]
   81792:	2b02      	cmp	r3, #2
   81794:	d00d      	beq.n	817b2 <ctrl_usart+0x96>
   81796:	2b02      	cmp	r3, #2
   81798:	dc0f      	bgt.n	817ba <ctrl_usart+0x9e>
   8179a:	2b00      	cmp	r3, #0
   8179c:	d002      	beq.n	817a4 <ctrl_usart+0x88>
   8179e:	2b01      	cmp	r3, #1
   817a0:	d003      	beq.n	817aa <ctrl_usart+0x8e>
   817a2:	e00a      	b.n	817ba <ctrl_usart+0x9e>
							{
							case 0:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   817a4:	2300      	movs	r3, #0
   817a6:	61bb      	str	r3, [r7, #24]
								break;
   817a8:	e009      	b.n	817be <ctrl_usart+0xa2>
							case 1:
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   817aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   817ae:	61bb      	str	r3, [r7, #24]
								break;
   817b0:	e005      	b.n	817be <ctrl_usart+0xa2>
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   817b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   817b6:	61bb      	str	r3, [r7, #24]
								break;
   817b8:	e001      	b.n	817be <ctrl_usart+0xa2>
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   817ba:	2300      	movs	r3, #0
   817bc:	61bb      	str	r3, [r7, #24]
							}
					
						/* Parity */
						switch(udd_g_ctrlreq.payload[5])
   817be:	4b74      	ldr	r3, [pc, #464]	; (81990 <ctrl_usart+0x274>)
   817c0:	689b      	ldr	r3, [r3, #8]
   817c2:	3305      	adds	r3, #5
   817c4:	781b      	ldrb	r3, [r3, #0]
   817c6:	2b04      	cmp	r3, #4
   817c8:	d81f      	bhi.n	8180a <ctrl_usart+0xee>
   817ca:	a201      	add	r2, pc, #4	; (adr r2, 817d0 <ctrl_usart+0xb4>)
   817cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   817d0:	000817e5 	.word	0x000817e5
   817d4:	000817ed 	.word	0x000817ed
   817d8:	000817f5 	.word	0x000817f5
   817dc:	000817fb 	.word	0x000817fb
   817e0:	00081803 	.word	0x00081803
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   817e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   817e8:	617b      	str	r3, [r7, #20]
								break;
   817ea:	e011      	b.n	81810 <ctrl_usart+0xf4>
							case 1:
								usartopts.parity_type = US_MR_PAR_ODD;
   817ec:	f44f 7300 	mov.w	r3, #512	; 0x200
   817f0:	617b      	str	r3, [r7, #20]
								break;
   817f2:	e00d      	b.n	81810 <ctrl_usart+0xf4>
							case 2:
								usartopts.parity_type = US_MR_PAR_EVEN;
   817f4:	2300      	movs	r3, #0
   817f6:	617b      	str	r3, [r7, #20]
								break;
   817f8:	e00a      	b.n	81810 <ctrl_usart+0xf4>
							case 3:
								usartopts.parity_type = US_MR_PAR_MARK;
   817fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   817fe:	617b      	str	r3, [r7, #20]
								break;
   81800:	e006      	b.n	81810 <ctrl_usart+0xf4>
							case 4:
								usartopts.parity_type = US_MR_PAR_SPACE;
   81802:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81806:	617b      	str	r3, [r7, #20]
								break;							
   81808:	e002      	b.n	81810 <ctrl_usart+0xf4>
							default:
								usartopts.parity_type = US_MR_PAR_NO;
   8180a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8180e:	617b      	str	r3, [r7, #20]
							}
					
						/* Data Bits */
						switch(udd_g_ctrlreq.payload[6])
   81810:	4b5f      	ldr	r3, [pc, #380]	; (81990 <ctrl_usart+0x274>)
   81812:	689b      	ldr	r3, [r3, #8]
   81814:	3306      	adds	r3, #6
   81816:	781b      	ldrb	r3, [r3, #0]
   81818:	2b07      	cmp	r3, #7
   8181a:	d00c      	beq.n	81836 <ctrl_usart+0x11a>
   8181c:	2b07      	cmp	r3, #7
   8181e:	dc0d      	bgt.n	8183c <ctrl_usart+0x120>
   81820:	2b05      	cmp	r3, #5
   81822:	d002      	beq.n	8182a <ctrl_usart+0x10e>
   81824:	2b06      	cmp	r3, #6
   81826:	d003      	beq.n	81830 <ctrl_usart+0x114>
   81828:	e008      	b.n	8183c <ctrl_usart+0x120>
							{
							case 5:
								usartopts.char_length = US_MR_CHRL_5_BIT;
   8182a:	2300      	movs	r3, #0
   8182c:	613b      	str	r3, [r7, #16]
								break;
   8182e:	e007      	b.n	81840 <ctrl_usart+0x124>
							case 6:
								usartopts.char_length = US_MR_CHRL_6_BIT;
   81830:	2340      	movs	r3, #64	; 0x40
   81832:	613b      	str	r3, [r7, #16]
								break;
   81834:	e004      	b.n	81840 <ctrl_usart+0x124>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
   81836:	2380      	movs	r3, #128	; 0x80
   81838:	613b      	str	r3, [r7, #16]
								break;					
   8183a:	e001      	b.n	81840 <ctrl_usart+0x124>
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   8183c:	23c0      	movs	r3, #192	; 0xc0
   8183e:	613b      	str	r3, [r7, #16]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81840:	2300      	movs	r3, #0
   81842:	61fb      	str	r3, [r7, #28]

						if (usart == USART0)
   81844:	687b      	ldr	r3, [r7, #4]
   81846:	4a53      	ldr	r2, [pc, #332]	; (81994 <ctrl_usart+0x278>)
   81848:	4293      	cmp	r3, r2
   8184a:	d10c      	bne.n	81866 <ctrl_usart+0x14a>
						{
							sysclk_enable_peripheral_clock(ID_USART0);
   8184c:	200d      	movs	r0, #13
   8184e:	4b52      	ldr	r3, [pc, #328]	; (81998 <ctrl_usart+0x27c>)
   81850:	4798      	blx	r3
							init_circ_buf(&tx0buf);
   81852:	4852      	ldr	r0, [pc, #328]	; (8199c <ctrl_usart+0x280>)
   81854:	4b52      	ldr	r3, [pc, #328]	; (819a0 <ctrl_usart+0x284>)
   81856:	4798      	blx	r3
							init_circ_buf(&rx0buf);
   81858:	4852      	ldr	r0, [pc, #328]	; (819a4 <ctrl_usart+0x288>)
   8185a:	4b51      	ldr	r3, [pc, #324]	; (819a0 <ctrl_usart+0x284>)
   8185c:	4798      	blx	r3
							printf("Enabling USART0\n");
   8185e:	4852      	ldr	r0, [pc, #328]	; (819a8 <ctrl_usart+0x28c>)
   81860:	4b52      	ldr	r3, [pc, #328]	; (819ac <ctrl_usart+0x290>)
   81862:	4798      	blx	r3
   81864:	e01a      	b.n	8189c <ctrl_usart+0x180>
						} else if (usart == USART1)
   81866:	687b      	ldr	r3, [r7, #4]
   81868:	4a51      	ldr	r2, [pc, #324]	; (819b0 <ctrl_usart+0x294>)
   8186a:	4293      	cmp	r3, r2
   8186c:	d109      	bne.n	81882 <ctrl_usart+0x166>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
   8186e:	200e      	movs	r0, #14
   81870:	4b49      	ldr	r3, [pc, #292]	; (81998 <ctrl_usart+0x27c>)
   81872:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   81874:	484f      	ldr	r0, [pc, #316]	; (819b4 <ctrl_usart+0x298>)
   81876:	4b4a      	ldr	r3, [pc, #296]	; (819a0 <ctrl_usart+0x284>)
   81878:	4798      	blx	r3
							init_circ_buf(&rx1buf);
   8187a:	484f      	ldr	r0, [pc, #316]	; (819b8 <ctrl_usart+0x29c>)
   8187c:	4b48      	ldr	r3, [pc, #288]	; (819a0 <ctrl_usart+0x284>)
   8187e:	4798      	blx	r3
   81880:	e00c      	b.n	8189c <ctrl_usart+0x180>
						} else if (usart == USART2)
   81882:	687b      	ldr	r3, [r7, #4]
   81884:	4a4d      	ldr	r2, [pc, #308]	; (819bc <ctrl_usart+0x2a0>)
   81886:	4293      	cmp	r3, r2
   81888:	d108      	bne.n	8189c <ctrl_usart+0x180>
						{
							sysclk_enable_peripheral_clock(ID_USART2);
   8188a:	200f      	movs	r0, #15
   8188c:	4b42      	ldr	r3, [pc, #264]	; (81998 <ctrl_usart+0x27c>)
   8188e:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   81890:	484b      	ldr	r0, [pc, #300]	; (819c0 <ctrl_usart+0x2a4>)
   81892:	4b43      	ldr	r3, [pc, #268]	; (819a0 <ctrl_usart+0x284>)
   81894:	4798      	blx	r3
							init_circ_buf(&rx2buf);
   81896:	484b      	ldr	r0, [pc, #300]	; (819c4 <ctrl_usart+0x2a8>)
   81898:	4b41      	ldr	r3, [pc, #260]	; (819a0 <ctrl_usart+0x284>)
   8189a:	4798      	blx	r3
							sysclk_enable_peripheral_clock(ID_USART3);
							init_circ_buf(&tx3buf);
							init_circ_buf(&rx3buf);
						}
#endif
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
   8189c:	4b4a      	ldr	r3, [pc, #296]	; (819c8 <ctrl_usart+0x2ac>)
   8189e:	4798      	blx	r3
   818a0:	4602      	mov	r2, r0
   818a2:	f107 030c 	add.w	r3, r7, #12
   818a6:	4619      	mov	r1, r3
   818a8:	6878      	ldr	r0, [r7, #4]
   818aa:	4b48      	ldr	r3, [pc, #288]	; (819cc <ctrl_usart+0x2b0>)
   818ac:	4798      	blx	r3
					} else {
						printf("ERR: Invalid USART Configuration packet?\n");
					}
			}
			break;
   818ae:	e104      	b.n	81aba <ctrl_usart+0x39e>
						printf("ERR: Invalid USART Configuration packet?\n");
   818b0:	4847      	ldr	r0, [pc, #284]	; (819d0 <ctrl_usart+0x2b4>)
   818b2:	4b3e      	ldr	r3, [pc, #248]	; (819ac <ctrl_usart+0x290>)
   818b4:	4798      	blx	r3
			break;
   818b6:	e100      	b.n	81aba <ctrl_usart+0x39e>
			
		case USART_WVREQ_ENABLE:
			if (directionIn == false){
   818b8:	78fb      	ldrb	r3, [r7, #3]
   818ba:	f083 0301 	eor.w	r3, r3, #1
   818be:	b2db      	uxtb	r3, r3
   818c0:	2b00      	cmp	r3, #0
   818c2:	f000 80fc 	beq.w	81abe <ctrl_usart+0x3a2>
				usart_enable_rx(usart);
   818c6:	6878      	ldr	r0, [r7, #4]
   818c8:	4b42      	ldr	r3, [pc, #264]	; (819d4 <ctrl_usart+0x2b8>)
   818ca:	4798      	blx	r3
				usart_enable_tx(usart);
   818cc:	6878      	ldr	r0, [r7, #4]
   818ce:	4b42      	ldr	r3, [pc, #264]	; (819d8 <ctrl_usart+0x2bc>)
   818d0:	4798      	blx	r3
				
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   818d2:	2101      	movs	r1, #1
   818d4:	6878      	ldr	r0, [r7, #4]
   818d6:	4b41      	ldr	r3, [pc, #260]	; (819dc <ctrl_usart+0x2c0>)
   818d8:	4798      	blx	r3
				
				/* Enable IO Pins */
				if (usart == USART0){
   818da:	687b      	ldr	r3, [r7, #4]
   818dc:	4a2d      	ldr	r2, [pc, #180]	; (81994 <ctrl_usart+0x278>)
   818de:	4293      	cmp	r3, r2
   818e0:	d10c      	bne.n	818fc <ctrl_usart+0x1e0>
					usart0_enableIO();
   818e2:	4b3f      	ldr	r3, [pc, #252]	; (819e0 <ctrl_usart+0x2c4>)
   818e4:	4798      	blx	r3
					irq_register_handler(USART0_IRQn, 5);
   818e6:	200d      	movs	r0, #13
   818e8:	4b3e      	ldr	r3, [pc, #248]	; (819e4 <ctrl_usart+0x2c8>)
   818ea:	4798      	blx	r3
   818ec:	2105      	movs	r1, #5
   818ee:	200d      	movs	r0, #13
   818f0:	4b3d      	ldr	r3, [pc, #244]	; (819e8 <ctrl_usart+0x2cc>)
   818f2:	4798      	blx	r3
   818f4:	200d      	movs	r0, #13
   818f6:	4b3d      	ldr	r3, [pc, #244]	; (819ec <ctrl_usart+0x2d0>)
   818f8:	4798      	blx	r3
					usart3_enableIO();
					irq_register_handler(USART3_IRQn, 5);
				}
#endif
			}
			break;
   818fa:	e0e0      	b.n	81abe <ctrl_usart+0x3a2>
				} else if (usart == USART1) {
   818fc:	687b      	ldr	r3, [r7, #4]
   818fe:	4a2c      	ldr	r2, [pc, #176]	; (819b0 <ctrl_usart+0x294>)
   81900:	4293      	cmp	r3, r2
   81902:	d10a      	bne.n	8191a <ctrl_usart+0x1fe>
					irq_register_handler(USART1_IRQn, 5);
   81904:	200e      	movs	r0, #14
   81906:	4b37      	ldr	r3, [pc, #220]	; (819e4 <ctrl_usart+0x2c8>)
   81908:	4798      	blx	r3
   8190a:	2105      	movs	r1, #5
   8190c:	200e      	movs	r0, #14
   8190e:	4b36      	ldr	r3, [pc, #216]	; (819e8 <ctrl_usart+0x2cc>)
   81910:	4798      	blx	r3
   81912:	200e      	movs	r0, #14
   81914:	4b35      	ldr	r3, [pc, #212]	; (819ec <ctrl_usart+0x2d0>)
   81916:	4798      	blx	r3
			break;
   81918:	e0d1      	b.n	81abe <ctrl_usart+0x3a2>
				} else if (usart == USART2) {
   8191a:	687b      	ldr	r3, [r7, #4]
   8191c:	4a27      	ldr	r2, [pc, #156]	; (819bc <ctrl_usart+0x2a0>)
   8191e:	4293      	cmp	r3, r2
   81920:	f040 80cd 	bne.w	81abe <ctrl_usart+0x3a2>
					irq_register_handler(USART2_IRQn, 5);
   81924:	200f      	movs	r0, #15
   81926:	4b2f      	ldr	r3, [pc, #188]	; (819e4 <ctrl_usart+0x2c8>)
   81928:	4798      	blx	r3
   8192a:	2105      	movs	r1, #5
   8192c:	200f      	movs	r0, #15
   8192e:	4b2e      	ldr	r3, [pc, #184]	; (819e8 <ctrl_usart+0x2cc>)
   81930:	4798      	blx	r3
   81932:	200f      	movs	r0, #15
   81934:	4b2d      	ldr	r3, [pc, #180]	; (819ec <ctrl_usart+0x2d0>)
   81936:	4798      	blx	r3
			break;
   81938:	e0c1      	b.n	81abe <ctrl_usart+0x3a2>
						
		case USART_WVREQ_DISABLE:
			if (directionIn == false){
   8193a:	78fb      	ldrb	r3, [r7, #3]
   8193c:	f083 0301 	eor.w	r3, r3, #1
   81940:	b2db      	uxtb	r3, r3
   81942:	2b00      	cmp	r3, #0
   81944:	f000 80bd 	beq.w	81ac2 <ctrl_usart+0x3a6>
				usart_disable_rx(usart);
   81948:	6878      	ldr	r0, [r7, #4]
   8194a:	4b29      	ldr	r3, [pc, #164]	; (819f0 <ctrl_usart+0x2d4>)
   8194c:	4798      	blx	r3
				usart_disable_rx(usart);
   8194e:	6878      	ldr	r0, [r7, #4]
   81950:	4b27      	ldr	r3, [pc, #156]	; (819f0 <ctrl_usart+0x2d4>)
   81952:	4798      	blx	r3
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   81954:	2103      	movs	r1, #3
   81956:	6878      	ldr	r0, [r7, #4]
   81958:	4b26      	ldr	r3, [pc, #152]	; (819f4 <ctrl_usart+0x2d8>)
   8195a:	4798      	blx	r3
			}
		
			break;
   8195c:	e0b1      	b.n	81ac2 <ctrl_usart+0x3a6>
			
		case USART_WVREQ_NUMWAIT:		
			if (directionIn){
   8195e:	78fb      	ldrb	r3, [r7, #3]
   81960:	2b00      	cmp	r3, #0
   81962:	f000 80b0 	beq.w	81ac6 <ctrl_usart+0x3aa>
				if (udd_g_ctrlreq.req.wLength == 4){
   81966:	4b0a      	ldr	r3, [pc, #40]	; (81990 <ctrl_usart+0x274>)
   81968:	88db      	ldrh	r3, [r3, #6]
   8196a:	2b04      	cmp	r3, #4
   8196c:	f040 80ab 	bne.w	81ac6 <ctrl_usart+0x3aa>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81970:	4b07      	ldr	r3, [pc, #28]	; (81990 <ctrl_usart+0x274>)
   81972:	4a21      	ldr	r2, [pc, #132]	; (819f8 <ctrl_usart+0x2dc>)
   81974:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   81976:	4b06      	ldr	r3, [pc, #24]	; (81990 <ctrl_usart+0x274>)
   81978:	2204      	movs	r2, #4
   8197a:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   8197c:	687b      	ldr	r3, [r7, #4]
   8197e:	4a05      	ldr	r2, [pc, #20]	; (81994 <ctrl_usart+0x278>)
   81980:	4293      	cmp	r3, r2
   81982:	d13d      	bne.n	81a00 <ctrl_usart+0x2e4>
						cnt = circ_buf_count(&rx0buf);
   81984:	4807      	ldr	r0, [pc, #28]	; (819a4 <ctrl_usart+0x288>)
   81986:	4b1d      	ldr	r3, [pc, #116]	; (819fc <ctrl_usart+0x2e0>)
   81988:	4798      	blx	r3
   8198a:	4603      	mov	r3, r0
   8198c:	60bb      	str	r3, [r7, #8]
   8198e:	e04a      	b.n	81a26 <ctrl_usart+0x30a>
   81990:	20001828 	.word	0x20001828
   81994:	40090000 	.word	0x40090000
   81998:	000816e1 	.word	0x000816e1
   8199c:	20001790 	.word	0x20001790
   819a0:	00081d0d 	.word	0x00081d0d
   819a4:	20001448 	.word	0x20001448
   819a8:	0008d430 	.word	0x0008d430
   819ac:	000867cd 	.word	0x000867cd
   819b0:	40094000 	.word	0x40094000
   819b4:	20001560 	.word	0x20001560
   819b8:	20001704 	.word	0x20001704
   819bc:	40098000 	.word	0x40098000
   819c0:	200013bc 	.word	0x200013bc
   819c4:	20001678 	.word	0x20001678
   819c8:	000816cd 	.word	0x000816cd
   819cc:	00086411 	.word	0x00086411
   819d0:	0008d444 	.word	0x0008d444
   819d4:	000865d5 	.word	0x000865d5
   819d8:	000865a5 	.word	0x000865a5
   819dc:	0008661d 	.word	0x0008661d
   819e0:	000816fd 	.word	0x000816fd
   819e4:	000815bd 	.word	0x000815bd
   819e8:	000815f1 	.word	0x000815f1
   819ec:	0008158d 	.word	0x0008158d
   819f0:	000865ed 	.word	0x000865ed
   819f4:	00086637 	.word	0x00086637
   819f8:	200012a0 	.word	0x200012a0
   819fc:	00081e05 	.word	0x00081e05
					} else if (usart == USART1){
   81a00:	687b      	ldr	r3, [r7, #4]
   81a02:	4a35      	ldr	r2, [pc, #212]	; (81ad8 <ctrl_usart+0x3bc>)
   81a04:	4293      	cmp	r3, r2
   81a06:	d105      	bne.n	81a14 <ctrl_usart+0x2f8>
						cnt = circ_buf_count(&rx1buf);
   81a08:	4834      	ldr	r0, [pc, #208]	; (81adc <ctrl_usart+0x3c0>)
   81a0a:	4b35      	ldr	r3, [pc, #212]	; (81ae0 <ctrl_usart+0x3c4>)
   81a0c:	4798      	blx	r3
   81a0e:	4603      	mov	r3, r0
   81a10:	60bb      	str	r3, [r7, #8]
   81a12:	e008      	b.n	81a26 <ctrl_usart+0x30a>
					} else if (usart == USART2){
   81a14:	687b      	ldr	r3, [r7, #4]
   81a16:	4a33      	ldr	r2, [pc, #204]	; (81ae4 <ctrl_usart+0x3c8>)
   81a18:	4293      	cmp	r3, r2
   81a1a:	d104      	bne.n	81a26 <ctrl_usart+0x30a>
						cnt = circ_buf_count(&rx2buf);
   81a1c:	4832      	ldr	r0, [pc, #200]	; (81ae8 <ctrl_usart+0x3cc>)
   81a1e:	4b30      	ldr	r3, [pc, #192]	; (81ae0 <ctrl_usart+0x3c4>)
   81a20:	4798      	blx	r3
   81a22:	4603      	mov	r3, r0
   81a24:	60bb      	str	r3, [r7, #8]
					else if (usart == USART3){
						cnt = circ_buf_count(&rx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
   81a26:	f107 0308 	add.w	r3, r7, #8
   81a2a:	781a      	ldrb	r2, [r3, #0]
   81a2c:	4b2f      	ldr	r3, [pc, #188]	; (81aec <ctrl_usart+0x3d0>)
   81a2e:	701a      	strb	r2, [r3, #0]
   81a30:	7a7a      	ldrb	r2, [r7, #9]
   81a32:	4b2e      	ldr	r3, [pc, #184]	; (81aec <ctrl_usart+0x3d0>)
   81a34:	705a      	strb	r2, [r3, #1]
   81a36:	7aba      	ldrb	r2, [r7, #10]
   81a38:	4b2c      	ldr	r3, [pc, #176]	; (81aec <ctrl_usart+0x3d0>)
   81a3a:	709a      	strb	r2, [r3, #2]
   81a3c:	7afa      	ldrb	r2, [r7, #11]
   81a3e:	4b2b      	ldr	r3, [pc, #172]	; (81aec <ctrl_usart+0x3d0>)
   81a40:	70da      	strb	r2, [r3, #3]
			
					return true;
   81a42:	2301      	movs	r3, #1
   81a44:	e043      	b.n	81ace <ctrl_usart+0x3b2>
				}
			}
			break;		
		case USART_WVREQ_NUMWAIT_TX:		
			if (directionIn){
   81a46:	78fb      	ldrb	r3, [r7, #3]
   81a48:	2b00      	cmp	r3, #0
   81a4a:	d03e      	beq.n	81aca <ctrl_usart+0x3ae>
				if (udd_g_ctrlreq.req.wLength == 4){
   81a4c:	4b28      	ldr	r3, [pc, #160]	; (81af0 <ctrl_usart+0x3d4>)
   81a4e:	88db      	ldrh	r3, [r3, #6]
   81a50:	2b04      	cmp	r3, #4
   81a52:	d13a      	bne.n	81aca <ctrl_usart+0x3ae>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81a54:	4b26      	ldr	r3, [pc, #152]	; (81af0 <ctrl_usart+0x3d4>)
   81a56:	4a25      	ldr	r2, [pc, #148]	; (81aec <ctrl_usart+0x3d0>)
   81a58:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   81a5a:	4b25      	ldr	r3, [pc, #148]	; (81af0 <ctrl_usart+0x3d4>)
   81a5c:	2204      	movs	r2, #4
   81a5e:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   81a60:	687b      	ldr	r3, [r7, #4]
   81a62:	4a24      	ldr	r2, [pc, #144]	; (81af4 <ctrl_usart+0x3d8>)
   81a64:	4293      	cmp	r3, r2
   81a66:	d105      	bne.n	81a74 <ctrl_usart+0x358>
						cnt = circ_buf_count(&tx0buf);
   81a68:	4823      	ldr	r0, [pc, #140]	; (81af8 <ctrl_usart+0x3dc>)
   81a6a:	4b1d      	ldr	r3, [pc, #116]	; (81ae0 <ctrl_usart+0x3c4>)
   81a6c:	4798      	blx	r3
   81a6e:	4603      	mov	r3, r0
   81a70:	60bb      	str	r3, [r7, #8]
   81a72:	e012      	b.n	81a9a <ctrl_usart+0x37e>
					} else if (usart == USART1){
   81a74:	687b      	ldr	r3, [r7, #4]
   81a76:	4a18      	ldr	r2, [pc, #96]	; (81ad8 <ctrl_usart+0x3bc>)
   81a78:	4293      	cmp	r3, r2
   81a7a:	d105      	bne.n	81a88 <ctrl_usart+0x36c>
						cnt = circ_buf_count(&tx1buf);
   81a7c:	481f      	ldr	r0, [pc, #124]	; (81afc <ctrl_usart+0x3e0>)
   81a7e:	4b18      	ldr	r3, [pc, #96]	; (81ae0 <ctrl_usart+0x3c4>)
   81a80:	4798      	blx	r3
   81a82:	4603      	mov	r3, r0
   81a84:	60bb      	str	r3, [r7, #8]
   81a86:	e008      	b.n	81a9a <ctrl_usart+0x37e>
					} else if (usart == USART2){
   81a88:	687b      	ldr	r3, [r7, #4]
   81a8a:	4a16      	ldr	r2, [pc, #88]	; (81ae4 <ctrl_usart+0x3c8>)
   81a8c:	4293      	cmp	r3, r2
   81a8e:	d104      	bne.n	81a9a <ctrl_usart+0x37e>
						cnt = circ_buf_count(&tx2buf);
   81a90:	481b      	ldr	r0, [pc, #108]	; (81b00 <ctrl_usart+0x3e4>)
   81a92:	4b13      	ldr	r3, [pc, #76]	; (81ae0 <ctrl_usart+0x3c4>)
   81a94:	4798      	blx	r3
   81a96:	4603      	mov	r3, r0
   81a98:	60bb      	str	r3, [r7, #8]
					else if (usart == USART3){
						cnt = circ_buf_count(&tx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
   81a9a:	f107 0308 	add.w	r3, r7, #8
   81a9e:	781a      	ldrb	r2, [r3, #0]
   81aa0:	4b12      	ldr	r3, [pc, #72]	; (81aec <ctrl_usart+0x3d0>)
   81aa2:	701a      	strb	r2, [r3, #0]
   81aa4:	7a7a      	ldrb	r2, [r7, #9]
   81aa6:	4b11      	ldr	r3, [pc, #68]	; (81aec <ctrl_usart+0x3d0>)
   81aa8:	705a      	strb	r2, [r3, #1]
   81aaa:	7aba      	ldrb	r2, [r7, #10]
   81aac:	4b0f      	ldr	r3, [pc, #60]	; (81aec <ctrl_usart+0x3d0>)
   81aae:	709a      	strb	r2, [r3, #2]
   81ab0:	7afa      	ldrb	r2, [r7, #11]
   81ab2:	4b0e      	ldr	r3, [pc, #56]	; (81aec <ctrl_usart+0x3d0>)
   81ab4:	70da      	strb	r2, [r3, #3]
			
					return true;
   81ab6:	2301      	movs	r3, #1
   81ab8:	e009      	b.n	81ace <ctrl_usart+0x3b2>
			break;
   81aba:	bf00      	nop
   81abc:	e006      	b.n	81acc <ctrl_usart+0x3b0>
			break;
   81abe:	bf00      	nop
   81ac0:	e004      	b.n	81acc <ctrl_usart+0x3b0>
			break;
   81ac2:	bf00      	nop
   81ac4:	e002      	b.n	81acc <ctrl_usart+0x3b0>
			break;		
   81ac6:	bf00      	nop
   81ac8:	e000      	b.n	81acc <ctrl_usart+0x3b0>
				}
			}
			break;		
   81aca:	bf00      	nop
	}
	
	return false;
   81acc:	2300      	movs	r3, #0
}
   81ace:	4618      	mov	r0, r3
   81ad0:	3728      	adds	r7, #40	; 0x28
   81ad2:	46bd      	mov	sp, r7
   81ad4:	bd80      	pop	{r7, pc}
   81ad6:	bf00      	nop
   81ad8:	40094000 	.word	0x40094000
   81adc:	20001704 	.word	0x20001704
   81ae0:	00081e05 	.word	0x00081e05
   81ae4:	40098000 	.word	0x40098000
   81ae8:	20001678 	.word	0x20001678
   81aec:	200012a0 	.word	0x200012a0
   81af0:	20001828 	.word	0x20001828
   81af4:	40090000 	.word	0x40090000
   81af8:	20001790 	.word	0x20001790
   81afc:	20001560 	.word	0x20001560
   81b00:	200013bc 	.word	0x200013bc

00081b04 <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   81b04:	b580      	push	{r7, lr}
   81b06:	b084      	sub	sp, #16
   81b08:	af00      	add	r7, sp, #0
   81b0a:	60f8      	str	r0, [r7, #12]
   81b0c:	60b9      	str	r1, [r7, #8]
   81b0e:	4613      	mov	r3, r2
   81b10:	71fb      	strb	r3, [r7, #7]
	if (txbuf == NULL){
   81b12:	68bb      	ldr	r3, [r7, #8]
   81b14:	2b00      	cmp	r3, #0
   81b16:	d113      	bne.n	81b40 <usart_driver_putchar+0x3c>
		if (usart == USART0) txbuf = &tx0buf;
   81b18:	68fb      	ldr	r3, [r7, #12]
   81b1a:	4a19      	ldr	r2, [pc, #100]	; (81b80 <usart_driver_putchar+0x7c>)
   81b1c:	4293      	cmp	r3, r2
   81b1e:	d102      	bne.n	81b26 <usart_driver_putchar+0x22>
   81b20:	4b18      	ldr	r3, [pc, #96]	; (81b84 <usart_driver_putchar+0x80>)
   81b22:	60bb      	str	r3, [r7, #8]
   81b24:	e00c      	b.n	81b40 <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   81b26:	68fb      	ldr	r3, [r7, #12]
   81b28:	4a17      	ldr	r2, [pc, #92]	; (81b88 <usart_driver_putchar+0x84>)
   81b2a:	4293      	cmp	r3, r2
   81b2c:	d102      	bne.n	81b34 <usart_driver_putchar+0x30>
   81b2e:	4b17      	ldr	r3, [pc, #92]	; (81b8c <usart_driver_putchar+0x88>)
   81b30:	60bb      	str	r3, [r7, #8]
   81b32:	e005      	b.n	81b40 <usart_driver_putchar+0x3c>
		else if (usart == USART2) txbuf = &tx2buf;
   81b34:	68fb      	ldr	r3, [r7, #12]
   81b36:	4a16      	ldr	r2, [pc, #88]	; (81b90 <usart_driver_putchar+0x8c>)
   81b38:	4293      	cmp	r3, r2
   81b3a:	d11c      	bne.n	81b76 <usart_driver_putchar+0x72>
   81b3c:	4b15      	ldr	r3, [pc, #84]	; (81b94 <usart_driver_putchar+0x90>)
   81b3e:	60bb      	str	r3, [r7, #8]
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
   81b40:	79fb      	ldrb	r3, [r7, #7]
   81b42:	2200      	movs	r2, #0
   81b44:	4619      	mov	r1, r3
   81b46:	68b8      	ldr	r0, [r7, #8]
   81b48:	4b13      	ldr	r3, [pc, #76]	; (81b98 <usart_driver_putchar+0x94>)
   81b4a:	4798      	blx	r3

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
   81b4c:	68f8      	ldr	r0, [r7, #12]
   81b4e:	4b13      	ldr	r3, [pc, #76]	; (81b9c <usart_driver_putchar+0x98>)
   81b50:	4798      	blx	r3
   81b52:	4603      	mov	r3, r0
   81b54:	f003 0302 	and.w	r3, r3, #2
   81b58:	2b00      	cmp	r3, #0
   81b5a:	d10d      	bne.n	81b78 <usart_driver_putchar+0x74>
		usart_putchar(usart, get_from_circ_buf(txbuf));
   81b5c:	68b8      	ldr	r0, [r7, #8]
   81b5e:	4b10      	ldr	r3, [pc, #64]	; (81ba0 <usart_driver_putchar+0x9c>)
   81b60:	4798      	blx	r3
   81b62:	4603      	mov	r3, r0
   81b64:	4619      	mov	r1, r3
   81b66:	68f8      	ldr	r0, [r7, #12]
   81b68:	4b0e      	ldr	r3, [pc, #56]	; (81ba4 <usart_driver_putchar+0xa0>)
   81b6a:	4798      	blx	r3
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   81b6c:	2102      	movs	r1, #2
   81b6e:	68f8      	ldr	r0, [r7, #12]
   81b70:	4b0d      	ldr	r3, [pc, #52]	; (81ba8 <usart_driver_putchar+0xa4>)
   81b72:	4798      	blx	r3
   81b74:	e000      	b.n	81b78 <usart_driver_putchar+0x74>
		else return;
   81b76:	bf00      	nop
	}
}
   81b78:	3710      	adds	r7, #16
   81b7a:	46bd      	mov	sp, r7
   81b7c:	bd80      	pop	{r7, pc}
   81b7e:	bf00      	nop
   81b80:	40090000 	.word	0x40090000
   81b84:	20001790 	.word	0x20001790
   81b88:	40094000 	.word	0x40094000
   81b8c:	20001560 	.word	0x20001560
   81b90:	40098000 	.word	0x40098000
   81b94:	200013bc 	.word	0x200013bc
   81b98:	00081d2f 	.word	0x00081d2f
   81b9c:	00086651 	.word	0x00086651
   81ba0:	00081d93 	.word	0x00081d93
   81ba4:	000866cb 	.word	0x000866cb
   81ba8:	0008661d 	.word	0x0008661d

00081bac <usart_driver_getchar>:

uint8_t usart_driver_getchar(Usart * usart)
{
   81bac:	b580      	push	{r7, lr}
   81bae:	b084      	sub	sp, #16
   81bb0:	af00      	add	r7, sp, #0
   81bb2:	6078      	str	r0, [r7, #4]
	tcirc_buf * rxbuf = NULL;	 
   81bb4:	2300      	movs	r3, #0
   81bb6:	60fb      	str	r3, [r7, #12]
	if (rxbuf == NULL){
   81bb8:	68fb      	ldr	r3, [r7, #12]
   81bba:	2b00      	cmp	r3, #0
   81bbc:	d116      	bne.n	81bec <usart_driver_getchar+0x40>
			if (usart == USART0) rxbuf = &rx0buf;
   81bbe:	687b      	ldr	r3, [r7, #4]
   81bc0:	4a0e      	ldr	r2, [pc, #56]	; (81bfc <usart_driver_getchar+0x50>)
   81bc2:	4293      	cmp	r3, r2
   81bc4:	d102      	bne.n	81bcc <usart_driver_getchar+0x20>
   81bc6:	4b0e      	ldr	r3, [pc, #56]	; (81c00 <usart_driver_getchar+0x54>)
   81bc8:	60fb      	str	r3, [r7, #12]
   81bca:	e00f      	b.n	81bec <usart_driver_getchar+0x40>
			else if (usart == USART1) rxbuf = &rx1buf;
   81bcc:	687b      	ldr	r3, [r7, #4]
   81bce:	4a0d      	ldr	r2, [pc, #52]	; (81c04 <usart_driver_getchar+0x58>)
   81bd0:	4293      	cmp	r3, r2
   81bd2:	d102      	bne.n	81bda <usart_driver_getchar+0x2e>
   81bd4:	4b0c      	ldr	r3, [pc, #48]	; (81c08 <usart_driver_getchar+0x5c>)
   81bd6:	60fb      	str	r3, [r7, #12]
   81bd8:	e008      	b.n	81bec <usart_driver_getchar+0x40>
			else if (usart == USART2) rxbuf = &rx2buf;
   81bda:	687b      	ldr	r3, [r7, #4]
   81bdc:	4a0b      	ldr	r2, [pc, #44]	; (81c0c <usart_driver_getchar+0x60>)
   81bde:	4293      	cmp	r3, r2
   81be0:	d102      	bne.n	81be8 <usart_driver_getchar+0x3c>
   81be2:	4b0b      	ldr	r3, [pc, #44]	; (81c10 <usart_driver_getchar+0x64>)
   81be4:	60fb      	str	r3, [r7, #12]
   81be6:	e001      	b.n	81bec <usart_driver_getchar+0x40>
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
   81be8:	23ff      	movs	r3, #255	; 0xff
   81bea:	e003      	b.n	81bf4 <usart_driver_getchar+0x48>
	}
	return get_from_circ_buf(rxbuf);
   81bec:	68f8      	ldr	r0, [r7, #12]
   81bee:	4b09      	ldr	r3, [pc, #36]	; (81c14 <usart_driver_getchar+0x68>)
   81bf0:	4798      	blx	r3
   81bf2:	4603      	mov	r3, r0
}
   81bf4:	4618      	mov	r0, r3
   81bf6:	3710      	adds	r7, #16
   81bf8:	46bd      	mov	sp, r7
   81bfa:	bd80      	pop	{r7, pc}
   81bfc:	40090000 	.word	0x40090000
   81c00:	20001448 	.word	0x20001448
   81c04:	40094000 	.word	0x40094000
   81c08:	20001704 	.word	0x20001704
   81c0c:	40098000 	.word	0x40098000
   81c10:	20001678 	.word	0x20001678
   81c14:	00081d93 	.word	0x00081d93

00081c18 <generic_isr>:

void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   81c18:	b580      	push	{r7, lr}
   81c1a:	b086      	sub	sp, #24
   81c1c:	af00      	add	r7, sp, #0
   81c1e:	60f8      	str	r0, [r7, #12]
   81c20:	60b9      	str	r1, [r7, #8]
   81c22:	607a      	str	r2, [r7, #4]
	uint32_t status;
	status = usart_get_status(usart);
   81c24:	68f8      	ldr	r0, [r7, #12]
   81c26:	4b18      	ldr	r3, [pc, #96]	; (81c88 <generic_isr+0x70>)
   81c28:	4798      	blx	r3
   81c2a:	6178      	str	r0, [r7, #20]
	if (status & US_CSR_RXRDY){
   81c2c:	697b      	ldr	r3, [r7, #20]
   81c2e:	f003 0301 	and.w	r3, r3, #1
   81c32:	2b00      	cmp	r3, #0
   81c34:	d00b      	beq.n	81c4e <generic_isr+0x36>
		uint32_t temp;
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   81c36:	68fb      	ldr	r3, [r7, #12]
   81c38:	699b      	ldr	r3, [r3, #24]
   81c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81c3e:	613b      	str	r3, [r7, #16]
		add_to_circ_buf(rxbuf, temp, false);
   81c40:	693b      	ldr	r3, [r7, #16]
   81c42:	b2db      	uxtb	r3, r3
   81c44:	2200      	movs	r2, #0
   81c46:	4619      	mov	r1, r3
   81c48:	68b8      	ldr	r0, [r7, #8]
   81c4a:	4b10      	ldr	r3, [pc, #64]	; (81c8c <generic_isr+0x74>)
   81c4c:	4798      	blx	r3
	}
	
	if (status & US_CSR_TXRDY){
   81c4e:	697b      	ldr	r3, [r7, #20]
   81c50:	f003 0302 	and.w	r3, r3, #2
   81c54:	2b00      	cmp	r3, #0
   81c56:	d012      	beq.n	81c7e <generic_isr+0x66>
		if (circ_buf_has_char(txbuf)){
   81c58:	6878      	ldr	r0, [r7, #4]
   81c5a:	4b0d      	ldr	r3, [pc, #52]	; (81c90 <generic_isr+0x78>)
   81c5c:	4798      	blx	r3
   81c5e:	4603      	mov	r3, r0
   81c60:	2b00      	cmp	r3, #0
   81c62:	d008      	beq.n	81c76 <generic_isr+0x5e>
			//Still data to send
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   81c64:	6878      	ldr	r0, [r7, #4]
   81c66:	4b0b      	ldr	r3, [pc, #44]	; (81c94 <generic_isr+0x7c>)
   81c68:	4798      	blx	r3
   81c6a:	4603      	mov	r3, r0
   81c6c:	4619      	mov	r1, r3
   81c6e:	68f8      	ldr	r0, [r7, #12]
   81c70:	4b09      	ldr	r3, [pc, #36]	; (81c98 <generic_isr+0x80>)
   81c72:	4798      	blx	r3
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
		}
	}
}
   81c74:	e003      	b.n	81c7e <generic_isr+0x66>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   81c76:	2102      	movs	r1, #2
   81c78:	68f8      	ldr	r0, [r7, #12]
   81c7a:	4b08      	ldr	r3, [pc, #32]	; (81c9c <generic_isr+0x84>)
   81c7c:	4798      	blx	r3
}
   81c7e:	bf00      	nop
   81c80:	3718      	adds	r7, #24
   81c82:	46bd      	mov	sp, r7
   81c84:	bd80      	pop	{r7, pc}
   81c86:	bf00      	nop
   81c88:	00086667 	.word	0x00086667
   81c8c:	00081d2f 	.word	0x00081d2f
   81c90:	00081ddd 	.word	0x00081ddd
   81c94:	00081d93 	.word	0x00081d93
   81c98:	000866cb 	.word	0x000866cb
   81c9c:	00086637 	.word	0x00086637

00081ca0 <USART0_Handler>:

ISR(USART0_Handler)
{
   81ca0:	b580      	push	{r7, lr}
   81ca2:	af00      	add	r7, sp, #0
	generic_isr(USART0, &rx0buf, &tx0buf);
   81ca4:	4a03      	ldr	r2, [pc, #12]	; (81cb4 <USART0_Handler+0x14>)
   81ca6:	4904      	ldr	r1, [pc, #16]	; (81cb8 <USART0_Handler+0x18>)
   81ca8:	4804      	ldr	r0, [pc, #16]	; (81cbc <USART0_Handler+0x1c>)
   81caa:	4b05      	ldr	r3, [pc, #20]	; (81cc0 <USART0_Handler+0x20>)
   81cac:	4798      	blx	r3
}
   81cae:	bf00      	nop
   81cb0:	bd80      	pop	{r7, pc}
   81cb2:	bf00      	nop
   81cb4:	20001790 	.word	0x20001790
   81cb8:	20001448 	.word	0x20001448
   81cbc:	40090000 	.word	0x40090000
   81cc0:	00081c19 	.word	0x00081c19

00081cc4 <USART1_Handler>:

ISR(USART1_Handler)
{
   81cc4:	b580      	push	{r7, lr}
   81cc6:	af00      	add	r7, sp, #0
	generic_isr(USART1, &rx1buf, &tx1buf);
   81cc8:	4a03      	ldr	r2, [pc, #12]	; (81cd8 <USART1_Handler+0x14>)
   81cca:	4904      	ldr	r1, [pc, #16]	; (81cdc <USART1_Handler+0x18>)
   81ccc:	4804      	ldr	r0, [pc, #16]	; (81ce0 <USART1_Handler+0x1c>)
   81cce:	4b05      	ldr	r3, [pc, #20]	; (81ce4 <USART1_Handler+0x20>)
   81cd0:	4798      	blx	r3
}
   81cd2:	bf00      	nop
   81cd4:	bd80      	pop	{r7, pc}
   81cd6:	bf00      	nop
   81cd8:	20001560 	.word	0x20001560
   81cdc:	20001704 	.word	0x20001704
   81ce0:	40094000 	.word	0x40094000
   81ce4:	00081c19 	.word	0x00081c19

00081ce8 <USART2_Handler>:

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
   81ce8:	b580      	push	{r7, lr}
   81cea:	af00      	add	r7, sp, #0
	generic_isr(USART2, &rx2buf, &tx2buf);
   81cec:	4a03      	ldr	r2, [pc, #12]	; (81cfc <USART2_Handler+0x14>)
   81cee:	4904      	ldr	r1, [pc, #16]	; (81d00 <USART2_Handler+0x18>)
   81cf0:	4804      	ldr	r0, [pc, #16]	; (81d04 <USART2_Handler+0x1c>)
   81cf2:	4b05      	ldr	r3, [pc, #20]	; (81d08 <USART2_Handler+0x20>)
   81cf4:	4798      	blx	r3
}
   81cf6:	bf00      	nop
   81cf8:	bd80      	pop	{r7, pc}
   81cfa:	bf00      	nop
   81cfc:	200013bc 	.word	0x200013bc
   81d00:	20001678 	.word	0x20001678
   81d04:	40098000 	.word	0x40098000
   81d08:	00081c19 	.word	0x00081c19

00081d0c <init_circ_buf>:
    @brief Initializes the circular buffer.

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
   81d0c:	b480      	push	{r7}
   81d0e:	b083      	sub	sp, #12
   81d10:	af00      	add	r7, sp, #0
   81d12:	6078      	str	r0, [r7, #4]
    cbuf->head = cbuf->tail = 0;
   81d14:	2300      	movs	r3, #0
   81d16:	687a      	ldr	r2, [r7, #4]
   81d18:	6053      	str	r3, [r2, #4]
   81d1a:	687a      	ldr	r2, [r7, #4]
   81d1c:	6013      	str	r3, [r2, #0]
    cbuf->dropped = 0;
   81d1e:	687b      	ldr	r3, [r7, #4]
   81d20:	2200      	movs	r2, #0
   81d22:	609a      	str	r2, [r3, #8]
}
   81d24:	bf00      	nop
   81d26:	370c      	adds	r7, #12
   81d28:	46bd      	mov	sp, r7
   81d2a:	bc80      	pop	{r7}
   81d2c:	4770      	bx	lr

00081d2e <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   81d2e:	b480      	push	{r7}
   81d30:	b085      	sub	sp, #20
   81d32:	af00      	add	r7, sp, #0
   81d34:	6078      	str	r0, [r7, #4]
   81d36:	460b      	mov	r3, r1
   81d38:	70fb      	strb	r3, [r7, #3]
   81d3a:	4613      	mov	r3, r2
   81d3c:	70bb      	strb	r3, [r7, #2]
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   81d3e:	687b      	ldr	r3, [r7, #4]
   81d40:	681b      	ldr	r3, [r3, #0]
   81d42:	60fb      	str	r3, [r7, #12]
    newhead++;
   81d44:	68fb      	ldr	r3, [r7, #12]
   81d46:	3301      	adds	r3, #1
   81d48:	60fb      	str	r3, [r7, #12]
    if (newhead >= CIRCBUFSIZE)
   81d4a:	68fb      	ldr	r3, [r7, #12]
   81d4c:	2b7f      	cmp	r3, #127	; 0x7f
   81d4e:	d90e      	bls.n	81d6e <add_to_circ_buf+0x40>
        newhead = 0;
   81d50:	2300      	movs	r3, #0
   81d52:	60fb      	str	r3, [r7, #12]
    while (newhead == cbuf->tail)
   81d54:	e00b      	b.n	81d6e <add_to_circ_buf+0x40>
    {
        if (!block)
   81d56:	78bb      	ldrb	r3, [r7, #2]
   81d58:	f083 0301 	eor.w	r3, r3, #1
   81d5c:	b2db      	uxtb	r3, r3
   81d5e:	2b00      	cmp	r3, #0
   81d60:	d005      	beq.n	81d6e <add_to_circ_buf+0x40>
        {
            cbuf->dropped++;
   81d62:	687b      	ldr	r3, [r7, #4]
   81d64:	689b      	ldr	r3, [r3, #8]
   81d66:	1c5a      	adds	r2, r3, #1
   81d68:	687b      	ldr	r3, [r7, #4]
   81d6a:	609a      	str	r2, [r3, #8]
            return;
   81d6c:	e00d      	b.n	81d8a <add_to_circ_buf+0x5c>
    while (newhead == cbuf->tail)
   81d6e:	687b      	ldr	r3, [r7, #4]
   81d70:	685b      	ldr	r3, [r3, #4]
   81d72:	68fa      	ldr	r2, [r7, #12]
   81d74:	429a      	cmp	r2, r3
   81d76:	d0ee      	beq.n	81d56 <add_to_circ_buf+0x28>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   81d78:	687b      	ldr	r3, [r7, #4]
   81d7a:	681b      	ldr	r3, [r3, #0]
   81d7c:	687a      	ldr	r2, [r7, #4]
   81d7e:	4413      	add	r3, r2
   81d80:	78fa      	ldrb	r2, [r7, #3]
   81d82:	731a      	strb	r2, [r3, #12]
    cbuf->head = newhead;
   81d84:	687b      	ldr	r3, [r7, #4]
   81d86:	68fa      	ldr	r2, [r7, #12]
   81d88:	601a      	str	r2, [r3, #0]
}
   81d8a:	3714      	adds	r7, #20
   81d8c:	46bd      	mov	sp, r7
   81d8e:	bc80      	pop	{r7}
   81d90:	4770      	bx	lr

00081d92 <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   81d92:	b480      	push	{r7}
   81d94:	b085      	sub	sp, #20
   81d96:	af00      	add	r7, sp, #0
   81d98:	6078      	str	r0, [r7, #4]
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   81d9a:	687b      	ldr	r3, [r7, #4]
   81d9c:	685b      	ldr	r3, [r3, #4]
   81d9e:	60fb      	str	r3, [r7, #12]
    uint8_t retval = cbuf->buf[newtail];
   81da0:	687a      	ldr	r2, [r7, #4]
   81da2:	68fb      	ldr	r3, [r7, #12]
   81da4:	4413      	add	r3, r2
   81da6:	330c      	adds	r3, #12
   81da8:	781b      	ldrb	r3, [r3, #0]
   81daa:	72fb      	strb	r3, [r7, #11]

    if (newtail == cbuf->head)
   81dac:	687b      	ldr	r3, [r7, #4]
   81dae:	681b      	ldr	r3, [r3, #0]
   81db0:	68fa      	ldr	r2, [r7, #12]
   81db2:	429a      	cmp	r2, r3
   81db4:	d101      	bne.n	81dba <get_from_circ_buf+0x28>
        return SERIAL_ERR;
   81db6:	23ff      	movs	r3, #255	; 0xff
   81db8:	e00b      	b.n	81dd2 <get_from_circ_buf+0x40>

    newtail++;
   81dba:	68fb      	ldr	r3, [r7, #12]
   81dbc:	3301      	adds	r3, #1
   81dbe:	60fb      	str	r3, [r7, #12]
    if (newtail >= CIRCBUFSIZE)
   81dc0:	68fb      	ldr	r3, [r7, #12]
   81dc2:	2b7f      	cmp	r3, #127	; 0x7f
   81dc4:	d901      	bls.n	81dca <get_from_circ_buf+0x38>
        // Rollover
        newtail = 0;
   81dc6:	2300      	movs	r3, #0
   81dc8:	60fb      	str	r3, [r7, #12]
    cbuf->tail = newtail;
   81dca:	687b      	ldr	r3, [r7, #4]
   81dcc:	68fa      	ldr	r2, [r7, #12]
   81dce:	605a      	str	r2, [r3, #4]

    return retval;
   81dd0:	7afb      	ldrb	r3, [r7, #11]
}
   81dd2:	4618      	mov	r0, r3
   81dd4:	3714      	adds	r7, #20
   81dd6:	46bd      	mov	sp, r7
   81dd8:	bc80      	pop	{r7}
   81dda:	4770      	bx	lr

00081ddc <circ_buf_has_char>:

    @retval true if buffer contains data.
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
   81ddc:	b480      	push	{r7}
   81dde:	b085      	sub	sp, #20
   81de0:	af00      	add	r7, sp, #0
   81de2:	6078      	str	r0, [r7, #4]
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   81de4:	687b      	ldr	r3, [r7, #4]
   81de6:	681b      	ldr	r3, [r3, #0]
   81de8:	60fb      	str	r3, [r7, #12]
    return (head != cbuf->tail);
   81dea:	687b      	ldr	r3, [r7, #4]
   81dec:	685b      	ldr	r3, [r3, #4]
   81dee:	68fa      	ldr	r2, [r7, #12]
   81df0:	429a      	cmp	r2, r3
   81df2:	bf14      	ite	ne
   81df4:	2301      	movne	r3, #1
   81df6:	2300      	moveq	r3, #0
   81df8:	b2db      	uxtb	r3, r3
}
   81dfa:	4618      	mov	r0, r3
   81dfc:	3714      	adds	r7, #20
   81dfe:	46bd      	mov	sp, r7
   81e00:	bc80      	pop	{r7}
   81e02:	4770      	bx	lr

00081e04 <circ_buf_count>:
   @param cbuf is the circular buffer to query

   @return count Number of chars in buffer.
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
   81e04:	b480      	push	{r7}
   81e06:	b085      	sub	sp, #20
   81e08:	af00      	add	r7, sp, #0
   81e0a:	6078      	str	r0, [r7, #4]
    int count;

    count = cbuf->head;
   81e0c:	687b      	ldr	r3, [r7, #4]
   81e0e:	681b      	ldr	r3, [r3, #0]
   81e10:	60fb      	str	r3, [r7, #12]
    count -= cbuf->tail;
   81e12:	687b      	ldr	r3, [r7, #4]
   81e14:	685b      	ldr	r3, [r3, #4]
   81e16:	68fa      	ldr	r2, [r7, #12]
   81e18:	1ad3      	subs	r3, r2, r3
   81e1a:	60fb      	str	r3, [r7, #12]
    if (count < 0)
   81e1c:	68fb      	ldr	r3, [r7, #12]
   81e1e:	2b00      	cmp	r3, #0
   81e20:	da02      	bge.n	81e28 <circ_buf_count+0x24>
        count += CIRCBUFSIZE;
   81e22:	68fb      	ldr	r3, [r7, #12]
   81e24:	3380      	adds	r3, #128	; 0x80
   81e26:	60fb      	str	r3, [r7, #12]
    return (unsigned int)count;
   81e28:	68fb      	ldr	r3, [r7, #12]
}
   81e2a:	4618      	mov	r0, r3
   81e2c:	3714      	adds	r7, #20
   81e2e:	46bd      	mov	sp, r7
   81e30:	bc80      	pop	{r7}
   81e32:	4770      	bx	lr

00081e34 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   81e34:	b480      	push	{r7}
   81e36:	b083      	sub	sp, #12
   81e38:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81e3a:	f3ef 8310 	mrs	r3, PRIMASK
   81e3e:	603b      	str	r3, [r7, #0]
  return(result);
   81e40:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   81e42:	2b00      	cmp	r3, #0
   81e44:	bf0c      	ite	eq
   81e46:	2301      	moveq	r3, #1
   81e48:	2300      	movne	r3, #0
   81e4a:	b2db      	uxtb	r3, r3
   81e4c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   81e4e:	b672      	cpsid	i
}
   81e50:	bf00      	nop
  __ASM volatile ("dmb");
   81e52:	f3bf 8f5f 	dmb	sy
}
   81e56:	bf00      	nop
	cpu_irq_disable();
   81e58:	4b04      	ldr	r3, [pc, #16]	; (81e6c <cpu_irq_save+0x38>)
   81e5a:	2200      	movs	r2, #0
   81e5c:	701a      	strb	r2, [r3, #0]
	return flags;
   81e5e:	687b      	ldr	r3, [r7, #4]
}
   81e60:	4618      	mov	r0, r3
   81e62:	370c      	adds	r7, #12
   81e64:	46bd      	mov	sp, r7
   81e66:	bc80      	pop	{r7}
   81e68:	4770      	bx	lr
   81e6a:	bf00      	nop
   81e6c:	20000284 	.word	0x20000284

00081e70 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   81e70:	b480      	push	{r7}
   81e72:	b083      	sub	sp, #12
   81e74:	af00      	add	r7, sp, #0
   81e76:	6078      	str	r0, [r7, #4]
	return (flags);
   81e78:	687b      	ldr	r3, [r7, #4]
   81e7a:	2b00      	cmp	r3, #0
   81e7c:	bf14      	ite	ne
   81e7e:	2301      	movne	r3, #1
   81e80:	2300      	moveq	r3, #0
   81e82:	b2db      	uxtb	r3, r3
}
   81e84:	4618      	mov	r0, r3
   81e86:	370c      	adds	r7, #12
   81e88:	46bd      	mov	sp, r7
   81e8a:	bc80      	pop	{r7}
   81e8c:	4770      	bx	lr
   81e8e:	0000      	movs	r0, r0

00081e90 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   81e90:	b580      	push	{r7, lr}
   81e92:	b082      	sub	sp, #8
   81e94:	af00      	add	r7, sp, #0
   81e96:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   81e98:	6878      	ldr	r0, [r7, #4]
   81e9a:	4b08      	ldr	r3, [pc, #32]	; (81ebc <cpu_irq_restore+0x2c>)
   81e9c:	4798      	blx	r3
   81e9e:	4603      	mov	r3, r0
   81ea0:	2b00      	cmp	r3, #0
   81ea2:	d007      	beq.n	81eb4 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   81ea4:	4b06      	ldr	r3, [pc, #24]	; (81ec0 <cpu_irq_restore+0x30>)
   81ea6:	2201      	movs	r2, #1
   81ea8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   81eaa:	f3bf 8f5f 	dmb	sy
}
   81eae:	bf00      	nop
  __ASM volatile ("cpsie i");
   81eb0:	b662      	cpsie	i
}
   81eb2:	bf00      	nop
}
   81eb4:	bf00      	nop
   81eb6:	3708      	adds	r7, #8
   81eb8:	46bd      	mov	sp, r7
   81eba:	bd80      	pop	{r7, pc}
   81ebc:	00081e71 	.word	0x00081e71
   81ec0:	20000284 	.word	0x20000284

00081ec4 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   81ec4:	b580      	push	{r7, lr}
   81ec6:	b086      	sub	sp, #24
   81ec8:	af00      	add	r7, sp, #0
   81eca:	60f8      	str	r0, [r7, #12]
   81ecc:	60b9      	str	r1, [r7, #8]
   81ece:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   81ed0:	68bb      	ldr	r3, [r7, #8]
   81ed2:	2b0e      	cmp	r3, #14
   81ed4:	d002      	beq.n	81edc <efc_perform_command+0x18>
   81ed6:	68bb      	ldr	r3, [r7, #8]
   81ed8:	2b0f      	cmp	r3, #15
   81eda:	d102      	bne.n	81ee2 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   81edc:	f04f 33ff 	mov.w	r3, #4294967295
   81ee0:	e016      	b.n	81f10 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   81ee2:	4b0d      	ldr	r3, [pc, #52]	; (81f18 <efc_perform_command+0x54>)
   81ee4:	4798      	blx	r3
   81ee6:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81ee8:	687b      	ldr	r3, [r7, #4]
   81eea:	021b      	lsls	r3, r3, #8
   81eec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   81ef0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   81ef4:	68ba      	ldr	r2, [r7, #8]
   81ef6:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81ef8:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   81efa:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   81efe:	4619      	mov	r1, r3
   81f00:	68f8      	ldr	r0, [r7, #12]
   81f02:	4b06      	ldr	r3, [pc, #24]	; (81f1c <efc_perform_command+0x58>)
   81f04:	4798      	blx	r3
   81f06:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   81f08:	6978      	ldr	r0, [r7, #20]
   81f0a:	4b05      	ldr	r3, [pc, #20]	; (81f20 <efc_perform_command+0x5c>)
   81f0c:	4798      	blx	r3
	return result;
   81f0e:	693b      	ldr	r3, [r7, #16]
}
   81f10:	4618      	mov	r0, r3
   81f12:	3718      	adds	r7, #24
   81f14:	46bd      	mov	sp, r7
   81f16:	bd80      	pop	{r7, pc}
   81f18:	00081e35 	.word	0x00081e35
   81f1c:	200000bd 	.word	0x200000bd
   81f20:	00081e91 	.word	0x00081e91

00081f24 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81f24:	b480      	push	{r7}
   81f26:	af00      	add	r7, sp, #0
	while (1) {
   81f28:	e7fe      	b.n	81f28 <Dummy_Handler+0x4>
   81f2a:	0000      	movs	r0, r0

00081f2c <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81f2c:	b590      	push	{r4, r7, lr}
   81f2e:	b08b      	sub	sp, #44	; 0x2c
   81f30:	af02      	add	r7, sp, #8
   81f32:	6078      	str	r0, [r7, #4]
   81f34:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   81f36:	f107 030c 	add.w	r3, r7, #12
   81f3a:	2204      	movs	r2, #4
   81f3c:	9200      	str	r2, [sp, #0]
   81f3e:	220f      	movs	r2, #15
   81f40:	210e      	movs	r1, #14
   81f42:	4814      	ldr	r0, [pc, #80]	; (81f94 <flash_read_unique_id+0x68>)
   81f44:	4c14      	ldr	r4, [pc, #80]	; (81f98 <flash_read_unique_id+0x6c>)
   81f46:	47a0      	blx	r4
   81f48:	4603      	mov	r3, r0
   81f4a:	2b00      	cmp	r3, #0
   81f4c:	d001      	beq.n	81f52 <flash_read_unique_id+0x26>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81f4e:	2310      	movs	r3, #16
   81f50:	e01b      	b.n	81f8a <flash_read_unique_id+0x5e>
	}

	if (ul_size > 4) {
   81f52:	683b      	ldr	r3, [r7, #0]
   81f54:	2b04      	cmp	r3, #4
   81f56:	d901      	bls.n	81f5c <flash_read_unique_id+0x30>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   81f58:	2304      	movs	r3, #4
   81f5a:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81f5c:	2300      	movs	r3, #0
   81f5e:	61fb      	str	r3, [r7, #28]
   81f60:	e00e      	b.n	81f80 <flash_read_unique_id+0x54>
		pul_data[ul_idx] = uid_buf[ul_idx];
   81f62:	69fb      	ldr	r3, [r7, #28]
   81f64:	009b      	lsls	r3, r3, #2
   81f66:	687a      	ldr	r2, [r7, #4]
   81f68:	441a      	add	r2, r3
   81f6a:	69fb      	ldr	r3, [r7, #28]
   81f6c:	009b      	lsls	r3, r3, #2
   81f6e:	f107 0120 	add.w	r1, r7, #32
   81f72:	440b      	add	r3, r1
   81f74:	f853 3c14 	ldr.w	r3, [r3, #-20]
   81f78:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81f7a:	69fb      	ldr	r3, [r7, #28]
   81f7c:	3301      	adds	r3, #1
   81f7e:	61fb      	str	r3, [r7, #28]
   81f80:	69fa      	ldr	r2, [r7, #28]
   81f82:	683b      	ldr	r3, [r7, #0]
   81f84:	429a      	cmp	r2, r3
   81f86:	d3ec      	bcc.n	81f62 <flash_read_unique_id+0x36>
	}

	return FLASH_RC_OK;
   81f88:	2300      	movs	r3, #0
}
   81f8a:	4618      	mov	r0, r3
   81f8c:	3724      	adds	r7, #36	; 0x24
   81f8e:	46bd      	mov	sp, r7
   81f90:	bd90      	pop	{r4, r7, pc}
   81f92:	bf00      	nop
   81f94:	400e0800 	.word	0x400e0800
   81f98:	20000001 	.word	0x20000001

00081f9c <sysclk_enable_peripheral_clock>:
{
   81f9c:	b580      	push	{r7, lr}
   81f9e:	b082      	sub	sp, #8
   81fa0:	af00      	add	r7, sp, #0
   81fa2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81fa4:	6878      	ldr	r0, [r7, #4]
   81fa6:	4b03      	ldr	r3, [pc, #12]	; (81fb4 <sysclk_enable_peripheral_clock+0x18>)
   81fa8:	4798      	blx	r3
}
   81faa:	bf00      	nop
   81fac:	3708      	adds	r7, #8
   81fae:	46bd      	mov	sp, r7
   81fb0:	bd80      	pop	{r7, pc}
   81fb2:	bf00      	nop
   81fb4:	000829e5 	.word	0x000829e5

00081fb8 <ioport_init>:
{
   81fb8:	b580      	push	{r7, lr}
   81fba:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   81fbc:	200a      	movs	r0, #10
   81fbe:	4b04      	ldr	r3, [pc, #16]	; (81fd0 <ioport_init+0x18>)
   81fc0:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   81fc2:	200b      	movs	r0, #11
   81fc4:	4b02      	ldr	r3, [pc, #8]	; (81fd0 <ioport_init+0x18>)
   81fc6:	4798      	blx	r3
}
   81fc8:	bf00      	nop
}
   81fca:	bf00      	nop
   81fcc:	bd80      	pop	{r7, pc}
   81fce:	bf00      	nop
   81fd0:	00081f9d 	.word	0x00081f9d

00081fd4 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   81fd4:	b580      	push	{r7, lr}
   81fd6:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81fd8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81fdc:	201d      	movs	r0, #29
   81fde:	4b0d      	ldr	r3, [pc, #52]	; (82014 <iopins_normal+0x40>)
   81fe0:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81fe2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81fe6:	201f      	movs	r0, #31
   81fe8:	4b0a      	ldr	r3, [pc, #40]	; (82014 <iopins_normal+0x40>)
   81fea:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   81fec:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81ff0:	2018      	movs	r0, #24
   81ff2:	4b08      	ldr	r3, [pc, #32]	; (82014 <iopins_normal+0x40>)
   81ff4:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81ffa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   81ffe:	4806      	ldr	r0, [pc, #24]	; (82018 <iopins_normal+0x44>)
   82000:	4b06      	ldr	r3, [pc, #24]	; (8201c <iopins_normal+0x48>)
   82002:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   82004:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82008:	2038      	movs	r0, #56	; 0x38
   8200a:	4b02      	ldr	r3, [pc, #8]	; (82014 <iopins_normal+0x40>)
   8200c:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   8200e:	bf00      	nop
   82010:	bd80      	pop	{r7, pc}
   82012:	bf00      	nop
   82014:	00082381 	.word	0x00082381
   82018:	400e0c00 	.word	0x400e0c00
   8201c:	000824b1 	.word	0x000824b1

00082020 <board_init>:

void board_init(void)
{
   82020:	b580      	push	{r7, lr}
   82022:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82024:	4b04      	ldr	r3, [pc, #16]	; (82038 <board_init+0x18>)
   82026:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8202a:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   8202c:	4b03      	ldr	r3, [pc, #12]	; (8203c <board_init+0x1c>)
   8202e:	4798      	blx	r3

	iopins_normal();
   82030:	4b03      	ldr	r3, [pc, #12]	; (82040 <board_init+0x20>)
   82032:	4798      	blx	r3

}
   82034:	bf00      	nop
   82036:	bd80      	pop	{r7, pc}
   82038:	400e1250 	.word	0x400e1250
   8203c:	00081fb9 	.word	0x00081fb9
   82040:	00081fd5 	.word	0x00081fd5

00082044 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   82044:	b480      	push	{r7}
   82046:	b083      	sub	sp, #12
   82048:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   8204a:	4b11      	ldr	r3, [pc, #68]	; (82090 <cpu_irq_enter_critical+0x4c>)
   8204c:	681b      	ldr	r3, [r3, #0]
   8204e:	2b00      	cmp	r3, #0
   82050:	d114      	bne.n	8207c <cpu_irq_enter_critical+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82052:	f3ef 8310 	mrs	r3, PRIMASK
   82056:	607b      	str	r3, [r7, #4]
  return(result);
   82058:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   8205a:	2b00      	cmp	r3, #0
   8205c:	d10b      	bne.n	82076 <cpu_irq_enter_critical+0x32>
  __ASM volatile ("cpsid i");
   8205e:	b672      	cpsid	i
}
   82060:	bf00      	nop
  __ASM volatile ("dmb");
   82062:	f3bf 8f5f 	dmb	sy
}
   82066:	bf00      	nop
			cpu_irq_disable();
   82068:	4b0a      	ldr	r3, [pc, #40]	; (82094 <cpu_irq_enter_critical+0x50>)
   8206a:	2200      	movs	r2, #0
   8206c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   8206e:	4b0a      	ldr	r3, [pc, #40]	; (82098 <cpu_irq_enter_critical+0x54>)
   82070:	2201      	movs	r2, #1
   82072:	701a      	strb	r2, [r3, #0]
   82074:	e002      	b.n	8207c <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   82076:	4b08      	ldr	r3, [pc, #32]	; (82098 <cpu_irq_enter_critical+0x54>)
   82078:	2200      	movs	r2, #0
   8207a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   8207c:	4b04      	ldr	r3, [pc, #16]	; (82090 <cpu_irq_enter_critical+0x4c>)
   8207e:	681b      	ldr	r3, [r3, #0]
   82080:	3301      	adds	r3, #1
   82082:	4a03      	ldr	r2, [pc, #12]	; (82090 <cpu_irq_enter_critical+0x4c>)
   82084:	6013      	str	r3, [r2, #0]
}
   82086:	bf00      	nop
   82088:	370c      	adds	r7, #12
   8208a:	46bd      	mov	sp, r7
   8208c:	bc80      	pop	{r7}
   8208e:	4770      	bx	lr
   82090:	200012b0 	.word	0x200012b0
   82094:	20000284 	.word	0x20000284
   82098:	200012b4 	.word	0x200012b4

0008209c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   8209c:	b480      	push	{r7}
   8209e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   820a0:	4b0c      	ldr	r3, [pc, #48]	; (820d4 <cpu_irq_leave_critical+0x38>)
   820a2:	681b      	ldr	r3, [r3, #0]
   820a4:	3b01      	subs	r3, #1
   820a6:	4a0b      	ldr	r2, [pc, #44]	; (820d4 <cpu_irq_leave_critical+0x38>)
   820a8:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   820aa:	4b0a      	ldr	r3, [pc, #40]	; (820d4 <cpu_irq_leave_critical+0x38>)
   820ac:	681b      	ldr	r3, [r3, #0]
   820ae:	2b00      	cmp	r3, #0
   820b0:	d10c      	bne.n	820cc <cpu_irq_leave_critical+0x30>
   820b2:	4b09      	ldr	r3, [pc, #36]	; (820d8 <cpu_irq_leave_critical+0x3c>)
   820b4:	781b      	ldrb	r3, [r3, #0]
   820b6:	b2db      	uxtb	r3, r3
   820b8:	2b00      	cmp	r3, #0
   820ba:	d007      	beq.n	820cc <cpu_irq_leave_critical+0x30>
		cpu_irq_enable();
   820bc:	4b07      	ldr	r3, [pc, #28]	; (820dc <cpu_irq_leave_critical+0x40>)
   820be:	2201      	movs	r2, #1
   820c0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   820c2:	f3bf 8f5f 	dmb	sy
}
   820c6:	bf00      	nop
  __ASM volatile ("cpsie i");
   820c8:	b662      	cpsie	i
}
   820ca:	bf00      	nop
	}
}
   820cc:	bf00      	nop
   820ce:	46bd      	mov	sp, r7
   820d0:	bc80      	pop	{r7}
   820d2:	4770      	bx	lr
   820d4:	200012b0 	.word	0x200012b0
   820d8:	200012b4 	.word	0x200012b4
   820dc:	20000284 	.word	0x20000284

000820e0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   820e0:	b480      	push	{r7}
   820e2:	b085      	sub	sp, #20
   820e4:	af00      	add	r7, sp, #0
   820e6:	60f8      	str	r0, [r7, #12]
   820e8:	60b9      	str	r1, [r7, #8]
   820ea:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   820ec:	687b      	ldr	r3, [r7, #4]
   820ee:	2b00      	cmp	r3, #0
   820f0:	d003      	beq.n	820fa <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   820f2:	68fb      	ldr	r3, [r7, #12]
   820f4:	68ba      	ldr	r2, [r7, #8]
   820f6:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   820f8:	e002      	b.n	82100 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   820fa:	68fb      	ldr	r3, [r7, #12]
   820fc:	68ba      	ldr	r2, [r7, #8]
   820fe:	661a      	str	r2, [r3, #96]	; 0x60
}
   82100:	bf00      	nop
   82102:	3714      	adds	r7, #20
   82104:	46bd      	mov	sp, r7
   82106:	bc80      	pop	{r7}
   82108:	4770      	bx	lr

0008210a <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   8210a:	b480      	push	{r7}
   8210c:	b087      	sub	sp, #28
   8210e:	af00      	add	r7, sp, #0
   82110:	60f8      	str	r0, [r7, #12]
   82112:	60b9      	str	r1, [r7, #8]
   82114:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82116:	68fb      	ldr	r3, [r7, #12]
   82118:	687a      	ldr	r2, [r7, #4]
   8211a:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8211c:	68bb      	ldr	r3, [r7, #8]
   8211e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82122:	d03c      	beq.n	8219e <pio_set_peripheral+0x94>
   82124:	68bb      	ldr	r3, [r7, #8]
   82126:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8212a:	d834      	bhi.n	82196 <pio_set_peripheral+0x8c>
   8212c:	68bb      	ldr	r3, [r7, #8]
   8212e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82132:	d034      	beq.n	8219e <pio_set_peripheral+0x94>
   82134:	68bb      	ldr	r3, [r7, #8]
   82136:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8213a:	d82c      	bhi.n	82196 <pio_set_peripheral+0x8c>
   8213c:	68bb      	ldr	r3, [r7, #8]
   8213e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82142:	d02c      	beq.n	8219e <pio_set_peripheral+0x94>
   82144:	68bb      	ldr	r3, [r7, #8]
   82146:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8214a:	d824      	bhi.n	82196 <pio_set_peripheral+0x8c>
   8214c:	68bb      	ldr	r3, [r7, #8]
   8214e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82152:	d017      	beq.n	82184 <pio_set_peripheral+0x7a>
   82154:	68bb      	ldr	r3, [r7, #8]
   82156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8215a:	d81c      	bhi.n	82196 <pio_set_peripheral+0x8c>
   8215c:	68bb      	ldr	r3, [r7, #8]
   8215e:	2b00      	cmp	r3, #0
   82160:	d01d      	beq.n	8219e <pio_set_peripheral+0x94>
   82162:	68bb      	ldr	r3, [r7, #8]
   82164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82168:	d115      	bne.n	82196 <pio_set_peripheral+0x8c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8216a:	68fb      	ldr	r3, [r7, #12]
   8216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8216e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82170:	68fb      	ldr	r3, [r7, #12]
   82172:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82174:	687b      	ldr	r3, [r7, #4]
   82176:	43d9      	mvns	r1, r3
   82178:	697b      	ldr	r3, [r7, #20]
   8217a:	400b      	ands	r3, r1
   8217c:	401a      	ands	r2, r3
   8217e:	68fb      	ldr	r3, [r7, #12]
   82180:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82182:	e008      	b.n	82196 <pio_set_peripheral+0x8c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82184:	68fb      	ldr	r3, [r7, #12]
   82186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82188:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8218a:	687a      	ldr	r2, [r7, #4]
   8218c:	697b      	ldr	r3, [r7, #20]
   8218e:	431a      	orrs	r2, r3
   82190:	68fb      	ldr	r3, [r7, #12]
   82192:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82194:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82196:	68fb      	ldr	r3, [r7, #12]
   82198:	687a      	ldr	r2, [r7, #4]
   8219a:	605a      	str	r2, [r3, #4]
   8219c:	e000      	b.n	821a0 <pio_set_peripheral+0x96>
		return;
   8219e:	bf00      	nop
}
   821a0:	371c      	adds	r7, #28
   821a2:	46bd      	mov	sp, r7
   821a4:	bc80      	pop	{r7}
   821a6:	4770      	bx	lr

000821a8 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   821a8:	b580      	push	{r7, lr}
   821aa:	b084      	sub	sp, #16
   821ac:	af00      	add	r7, sp, #0
   821ae:	60f8      	str	r0, [r7, #12]
   821b0:	60b9      	str	r1, [r7, #8]
   821b2:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   821b4:	68b9      	ldr	r1, [r7, #8]
   821b6:	68f8      	ldr	r0, [r7, #12]
   821b8:	4b19      	ldr	r3, [pc, #100]	; (82220 <pio_set_input+0x78>)
   821ba:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   821bc:	687b      	ldr	r3, [r7, #4]
   821be:	f003 0301 	and.w	r3, r3, #1
   821c2:	461a      	mov	r2, r3
   821c4:	68b9      	ldr	r1, [r7, #8]
   821c6:	68f8      	ldr	r0, [r7, #12]
   821c8:	4b16      	ldr	r3, [pc, #88]	; (82224 <pio_set_input+0x7c>)
   821ca:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   821cc:	687b      	ldr	r3, [r7, #4]
   821ce:	f003 030a 	and.w	r3, r3, #10
   821d2:	2b00      	cmp	r3, #0
   821d4:	d003      	beq.n	821de <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   821d6:	68fb      	ldr	r3, [r7, #12]
   821d8:	68ba      	ldr	r2, [r7, #8]
   821da:	621a      	str	r2, [r3, #32]
   821dc:	e002      	b.n	821e4 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   821de:	68fb      	ldr	r3, [r7, #12]
   821e0:	68ba      	ldr	r2, [r7, #8]
   821e2:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   821e4:	687b      	ldr	r3, [r7, #4]
   821e6:	f003 0302 	and.w	r3, r3, #2
   821ea:	2b00      	cmp	r3, #0
   821ec:	d004      	beq.n	821f8 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   821ee:	68fb      	ldr	r3, [r7, #12]
   821f0:	68ba      	ldr	r2, [r7, #8]
   821f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   821f6:	e008      	b.n	8220a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   821f8:	687b      	ldr	r3, [r7, #4]
   821fa:	f003 0308 	and.w	r3, r3, #8
   821fe:	2b00      	cmp	r3, #0
   82200:	d003      	beq.n	8220a <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   82202:	68fb      	ldr	r3, [r7, #12]
   82204:	68ba      	ldr	r2, [r7, #8]
   82206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8220a:	68fb      	ldr	r3, [r7, #12]
   8220c:	68ba      	ldr	r2, [r7, #8]
   8220e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82210:	68fb      	ldr	r3, [r7, #12]
   82212:	68ba      	ldr	r2, [r7, #8]
   82214:	601a      	str	r2, [r3, #0]
}
   82216:	bf00      	nop
   82218:	3710      	adds	r7, #16
   8221a:	46bd      	mov	sp, r7
   8221c:	bd80      	pop	{r7, pc}
   8221e:	bf00      	nop
   82220:	000822a9 	.word	0x000822a9
   82224:	000820e1 	.word	0x000820e1

00082228 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82228:	b580      	push	{r7, lr}
   8222a:	b084      	sub	sp, #16
   8222c:	af00      	add	r7, sp, #0
   8222e:	60f8      	str	r0, [r7, #12]
   82230:	60b9      	str	r1, [r7, #8]
   82232:	607a      	str	r2, [r7, #4]
   82234:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   82236:	68b9      	ldr	r1, [r7, #8]
   82238:	68f8      	ldr	r0, [r7, #12]
   8223a:	4b12      	ldr	r3, [pc, #72]	; (82284 <pio_set_output+0x5c>)
   8223c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   8223e:	69ba      	ldr	r2, [r7, #24]
   82240:	68b9      	ldr	r1, [r7, #8]
   82242:	68f8      	ldr	r0, [r7, #12]
   82244:	4b10      	ldr	r3, [pc, #64]	; (82288 <pio_set_output+0x60>)
   82246:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82248:	683b      	ldr	r3, [r7, #0]
   8224a:	2b00      	cmp	r3, #0
   8224c:	d003      	beq.n	82256 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   8224e:	68fb      	ldr	r3, [r7, #12]
   82250:	68ba      	ldr	r2, [r7, #8]
   82252:	651a      	str	r2, [r3, #80]	; 0x50
   82254:	e002      	b.n	8225c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82256:	68fb      	ldr	r3, [r7, #12]
   82258:	68ba      	ldr	r2, [r7, #8]
   8225a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8225c:	687b      	ldr	r3, [r7, #4]
   8225e:	2b00      	cmp	r3, #0
   82260:	d003      	beq.n	8226a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   82262:	68fb      	ldr	r3, [r7, #12]
   82264:	68ba      	ldr	r2, [r7, #8]
   82266:	631a      	str	r2, [r3, #48]	; 0x30
   82268:	e002      	b.n	82270 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8226a:	68fb      	ldr	r3, [r7, #12]
   8226c:	68ba      	ldr	r2, [r7, #8]
   8226e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82270:	68fb      	ldr	r3, [r7, #12]
   82272:	68ba      	ldr	r2, [r7, #8]
   82274:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   82276:	68fb      	ldr	r3, [r7, #12]
   82278:	68ba      	ldr	r2, [r7, #8]
   8227a:	601a      	str	r2, [r3, #0]
}
   8227c:	bf00      	nop
   8227e:	3710      	adds	r7, #16
   82280:	46bd      	mov	sp, r7
   82282:	bd80      	pop	{r7, pc}
   82284:	000822a9 	.word	0x000822a9
   82288:	000820e1 	.word	0x000820e1

0008228c <pio_enable_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   8228c:	b480      	push	{r7}
   8228e:	b083      	sub	sp, #12
   82290:	af00      	add	r7, sp, #0
   82292:	6078      	str	r0, [r7, #4]
   82294:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   82296:	687b      	ldr	r3, [r7, #4]
   82298:	683a      	ldr	r2, [r7, #0]
   8229a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   8229e:	bf00      	nop
   822a0:	370c      	adds	r7, #12
   822a2:	46bd      	mov	sp, r7
   822a4:	bc80      	pop	{r7}
   822a6:	4770      	bx	lr

000822a8 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   822a8:	b480      	push	{r7}
   822aa:	b083      	sub	sp, #12
   822ac:	af00      	add	r7, sp, #0
   822ae:	6078      	str	r0, [r7, #4]
   822b0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   822b2:	687b      	ldr	r3, [r7, #4]
   822b4:	683a      	ldr	r2, [r7, #0]
   822b6:	645a      	str	r2, [r3, #68]	; 0x44
}
   822b8:	bf00      	nop
   822ba:	370c      	adds	r7, #12
   822bc:	46bd      	mov	sp, r7
   822be:	bc80      	pop	{r7}
   822c0:	4770      	bx	lr

000822c2 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   822c2:	b480      	push	{r7}
   822c4:	b083      	sub	sp, #12
   822c6:	af00      	add	r7, sp, #0
   822c8:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   822ca:	687b      	ldr	r3, [r7, #4]
   822cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   822ce:	4618      	mov	r0, r3
   822d0:	370c      	adds	r7, #12
   822d2:	46bd      	mov	sp, r7
   822d4:	bc80      	pop	{r7}
   822d6:	4770      	bx	lr

000822d8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   822d8:	b480      	push	{r7}
   822da:	b083      	sub	sp, #12
   822dc:	af00      	add	r7, sp, #0
   822de:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   822e0:	687b      	ldr	r3, [r7, #4]
   822e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   822e4:	4618      	mov	r0, r3
   822e6:	370c      	adds	r7, #12
   822e8:	46bd      	mov	sp, r7
   822ea:	bc80      	pop	{r7}
   822ec:	4770      	bx	lr
   822ee:	0000      	movs	r0, r0

000822f0 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   822f0:	b580      	push	{r7, lr}
   822f2:	b084      	sub	sp, #16
   822f4:	af00      	add	r7, sp, #0
   822f6:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   822f8:	6878      	ldr	r0, [r7, #4]
   822fa:	4b08      	ldr	r3, [pc, #32]	; (8231c <pio_get_pin_value+0x2c>)
   822fc:	4798      	blx	r3
   822fe:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   82300:	68fb      	ldr	r3, [r7, #12]
   82302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   82304:	687b      	ldr	r3, [r7, #4]
   82306:	f003 031f 	and.w	r3, r3, #31
   8230a:	fa22 f303 	lsr.w	r3, r2, r3
   8230e:	f003 0301 	and.w	r3, r3, #1
}
   82312:	4618      	mov	r0, r3
   82314:	3710      	adds	r7, #16
   82316:	46bd      	mov	sp, r7
   82318:	bd80      	pop	{r7, pc}
   8231a:	bf00      	nop
   8231c:	0008258d 	.word	0x0008258d

00082320 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   82320:	b580      	push	{r7, lr}
   82322:	b084      	sub	sp, #16
   82324:	af00      	add	r7, sp, #0
   82326:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82328:	6878      	ldr	r0, [r7, #4]
   8232a:	4b08      	ldr	r3, [pc, #32]	; (8234c <pio_set_pin_high+0x2c>)
   8232c:	4798      	blx	r3
   8232e:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   82330:	687b      	ldr	r3, [r7, #4]
   82332:	f003 031f 	and.w	r3, r3, #31
   82336:	2201      	movs	r2, #1
   82338:	fa02 f303 	lsl.w	r3, r2, r3
   8233c:	461a      	mov	r2, r3
   8233e:	68fb      	ldr	r3, [r7, #12]
   82340:	631a      	str	r2, [r3, #48]	; 0x30
}
   82342:	bf00      	nop
   82344:	3710      	adds	r7, #16
   82346:	46bd      	mov	sp, r7
   82348:	bd80      	pop	{r7, pc}
   8234a:	bf00      	nop
   8234c:	0008258d 	.word	0x0008258d

00082350 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   82350:	b580      	push	{r7, lr}
   82352:	b084      	sub	sp, #16
   82354:	af00      	add	r7, sp, #0
   82356:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82358:	6878      	ldr	r0, [r7, #4]
   8235a:	4b08      	ldr	r3, [pc, #32]	; (8237c <pio_set_pin_low+0x2c>)
   8235c:	4798      	blx	r3
   8235e:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   82360:	687b      	ldr	r3, [r7, #4]
   82362:	f003 031f 	and.w	r3, r3, #31
   82366:	2201      	movs	r2, #1
   82368:	fa02 f303 	lsl.w	r3, r2, r3
   8236c:	461a      	mov	r2, r3
   8236e:	68fb      	ldr	r3, [r7, #12]
   82370:	635a      	str	r2, [r3, #52]	; 0x34
}
   82372:	bf00      	nop
   82374:	3710      	adds	r7, #16
   82376:	46bd      	mov	sp, r7
   82378:	bd80      	pop	{r7, pc}
   8237a:	bf00      	nop
   8237c:	0008258d 	.word	0x0008258d

00082380 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82380:	b590      	push	{r4, r7, lr}
   82382:	b087      	sub	sp, #28
   82384:	af02      	add	r7, sp, #8
   82386:	6078      	str	r0, [r7, #4]
   82388:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   8238a:	6878      	ldr	r0, [r7, #4]
   8238c:	4b43      	ldr	r3, [pc, #268]	; (8249c <pio_configure_pin+0x11c>)
   8238e:	4798      	blx	r3
   82390:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82392:	683b      	ldr	r3, [r7, #0]
   82394:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82398:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8239c:	d057      	beq.n	8244e <pio_configure_pin+0xce>
   8239e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   823a2:	d873      	bhi.n	8248c <pio_configure_pin+0x10c>
   823a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   823a8:	d051      	beq.n	8244e <pio_configure_pin+0xce>
   823aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   823ae:	d86d      	bhi.n	8248c <pio_configure_pin+0x10c>
   823b0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   823b4:	d03f      	beq.n	82436 <pio_configure_pin+0xb6>
   823b6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   823ba:	d867      	bhi.n	8248c <pio_configure_pin+0x10c>
   823bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   823c0:	d003      	beq.n	823ca <pio_configure_pin+0x4a>
   823c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   823c6:	d01b      	beq.n	82400 <pio_configure_pin+0x80>
   823c8:	e060      	b.n	8248c <pio_configure_pin+0x10c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   823ca:	687b      	ldr	r3, [r7, #4]
   823cc:	f003 031f 	and.w	r3, r3, #31
   823d0:	2201      	movs	r2, #1
   823d2:	fa02 f303 	lsl.w	r3, r2, r3
   823d6:	461a      	mov	r2, r3
   823d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   823dc:	68f8      	ldr	r0, [r7, #12]
   823de:	4b30      	ldr	r3, [pc, #192]	; (824a0 <pio_configure_pin+0x120>)
   823e0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   823e2:	687b      	ldr	r3, [r7, #4]
   823e4:	f003 031f 	and.w	r3, r3, #31
   823e8:	2201      	movs	r2, #1
   823ea:	fa02 f303 	lsl.w	r3, r2, r3
   823ee:	4619      	mov	r1, r3
   823f0:	683b      	ldr	r3, [r7, #0]
   823f2:	f003 0301 	and.w	r3, r3, #1
   823f6:	461a      	mov	r2, r3
   823f8:	68f8      	ldr	r0, [r7, #12]
   823fa:	4b2a      	ldr	r3, [pc, #168]	; (824a4 <pio_configure_pin+0x124>)
   823fc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   823fe:	e047      	b.n	82490 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82400:	687b      	ldr	r3, [r7, #4]
   82402:	f003 031f 	and.w	r3, r3, #31
   82406:	2201      	movs	r2, #1
   82408:	fa02 f303 	lsl.w	r3, r2, r3
   8240c:	461a      	mov	r2, r3
   8240e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82412:	68f8      	ldr	r0, [r7, #12]
   82414:	4b22      	ldr	r3, [pc, #136]	; (824a0 <pio_configure_pin+0x120>)
   82416:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82418:	687b      	ldr	r3, [r7, #4]
   8241a:	f003 031f 	and.w	r3, r3, #31
   8241e:	2201      	movs	r2, #1
   82420:	fa02 f303 	lsl.w	r3, r2, r3
   82424:	4619      	mov	r1, r3
   82426:	683b      	ldr	r3, [r7, #0]
   82428:	f003 0301 	and.w	r3, r3, #1
   8242c:	461a      	mov	r2, r3
   8242e:	68f8      	ldr	r0, [r7, #12]
   82430:	4b1c      	ldr	r3, [pc, #112]	; (824a4 <pio_configure_pin+0x124>)
   82432:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82434:	e02c      	b.n	82490 <pio_configure_pin+0x110>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82436:	687b      	ldr	r3, [r7, #4]
   82438:	f003 031f 	and.w	r3, r3, #31
   8243c:	2201      	movs	r2, #1
   8243e:	fa02 f303 	lsl.w	r3, r2, r3
   82442:	683a      	ldr	r2, [r7, #0]
   82444:	4619      	mov	r1, r3
   82446:	68f8      	ldr	r0, [r7, #12]
   82448:	4b17      	ldr	r3, [pc, #92]	; (824a8 <pio_configure_pin+0x128>)
   8244a:	4798      	blx	r3
		break;
   8244c:	e020      	b.n	82490 <pio_configure_pin+0x110>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8244e:	687b      	ldr	r3, [r7, #4]
   82450:	f003 031f 	and.w	r3, r3, #31
   82454:	2201      	movs	r2, #1
   82456:	fa02 f303 	lsl.w	r3, r2, r3
   8245a:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8245c:	683b      	ldr	r3, [r7, #0]
   8245e:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82462:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82466:	bf0c      	ite	eq
   82468:	2301      	moveq	r3, #1
   8246a:	2300      	movne	r3, #0
   8246c:	b2db      	uxtb	r3, r3
   8246e:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82470:	683b      	ldr	r3, [r7, #0]
   82472:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82474:	f003 0201 	and.w	r2, r3, #1
   82478:	683b      	ldr	r3, [r7, #0]
   8247a:	f003 0301 	and.w	r3, r3, #1
   8247e:	9300      	str	r3, [sp, #0]
   82480:	4613      	mov	r3, r2
   82482:	4602      	mov	r2, r0
   82484:	68f8      	ldr	r0, [r7, #12]
   82486:	4c09      	ldr	r4, [pc, #36]	; (824ac <pio_configure_pin+0x12c>)
   82488:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8248a:	e001      	b.n	82490 <pio_configure_pin+0x110>

	default:
		return 0;
   8248c:	2300      	movs	r3, #0
   8248e:	e000      	b.n	82492 <pio_configure_pin+0x112>
	}

	return 1;
   82490:	2301      	movs	r3, #1
}
   82492:	4618      	mov	r0, r3
   82494:	3714      	adds	r7, #20
   82496:	46bd      	mov	sp, r7
   82498:	bd90      	pop	{r4, r7, pc}
   8249a:	bf00      	nop
   8249c:	0008258d 	.word	0x0008258d
   824a0:	0008210b 	.word	0x0008210b
   824a4:	000820e1 	.word	0x000820e1
   824a8:	000821a9 	.word	0x000821a9
   824ac:	00082229 	.word	0x00082229

000824b0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   824b0:	b590      	push	{r4, r7, lr}
   824b2:	b087      	sub	sp, #28
   824b4:	af02      	add	r7, sp, #8
   824b6:	60f8      	str	r0, [r7, #12]
   824b8:	60b9      	str	r1, [r7, #8]
   824ba:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   824bc:	687b      	ldr	r3, [r7, #4]
   824be:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   824c2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   824c6:	d039      	beq.n	8253c <pio_configure_pin_group+0x8c>
   824c8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   824cc:	d84f      	bhi.n	8256e <pio_configure_pin_group+0xbe>
   824ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   824d2:	d033      	beq.n	8253c <pio_configure_pin_group+0x8c>
   824d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   824d8:	d849      	bhi.n	8256e <pio_configure_pin_group+0xbe>
   824da:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   824de:	d027      	beq.n	82530 <pio_configure_pin_group+0x80>
   824e0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   824e4:	d843      	bhi.n	8256e <pio_configure_pin_group+0xbe>
   824e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   824ea:	d003      	beq.n	824f4 <pio_configure_pin_group+0x44>
   824ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   824f0:	d00f      	beq.n	82512 <pio_configure_pin_group+0x62>
   824f2:	e03c      	b.n	8256e <pio_configure_pin_group+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   824f4:	68ba      	ldr	r2, [r7, #8]
   824f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   824fa:	68f8      	ldr	r0, [r7, #12]
   824fc:	4b1f      	ldr	r3, [pc, #124]	; (8257c <pio_configure_pin_group+0xcc>)
   824fe:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82500:	687b      	ldr	r3, [r7, #4]
   82502:	f003 0301 	and.w	r3, r3, #1
   82506:	461a      	mov	r2, r3
   82508:	68b9      	ldr	r1, [r7, #8]
   8250a:	68f8      	ldr	r0, [r7, #12]
   8250c:	4b1c      	ldr	r3, [pc, #112]	; (82580 <pio_configure_pin_group+0xd0>)
   8250e:	4798      	blx	r3
		break;
   82510:	e02f      	b.n	82572 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82512:	68ba      	ldr	r2, [r7, #8]
   82514:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82518:	68f8      	ldr	r0, [r7, #12]
   8251a:	4b18      	ldr	r3, [pc, #96]	; (8257c <pio_configure_pin_group+0xcc>)
   8251c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8251e:	687b      	ldr	r3, [r7, #4]
   82520:	f003 0301 	and.w	r3, r3, #1
   82524:	461a      	mov	r2, r3
   82526:	68b9      	ldr	r1, [r7, #8]
   82528:	68f8      	ldr	r0, [r7, #12]
   8252a:	4b15      	ldr	r3, [pc, #84]	; (82580 <pio_configure_pin_group+0xd0>)
   8252c:	4798      	blx	r3
		break;
   8252e:	e020      	b.n	82572 <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82530:	687a      	ldr	r2, [r7, #4]
   82532:	68b9      	ldr	r1, [r7, #8]
   82534:	68f8      	ldr	r0, [r7, #12]
   82536:	4b13      	ldr	r3, [pc, #76]	; (82584 <pio_configure_pin_group+0xd4>)
   82538:	4798      	blx	r3
		break;
   8253a:	e01a      	b.n	82572 <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8253c:	687b      	ldr	r3, [r7, #4]
   8253e:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82542:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82546:	bf0c      	ite	eq
   82548:	2301      	moveq	r3, #1
   8254a:	2300      	movne	r3, #0
   8254c:	b2db      	uxtb	r3, r3
   8254e:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82550:	687b      	ldr	r3, [r7, #4]
   82552:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   82554:	f003 0201 	and.w	r2, r3, #1
   82558:	687b      	ldr	r3, [r7, #4]
   8255a:	f003 0301 	and.w	r3, r3, #1
   8255e:	9300      	str	r3, [sp, #0]
   82560:	4613      	mov	r3, r2
   82562:	460a      	mov	r2, r1
   82564:	68b9      	ldr	r1, [r7, #8]
   82566:	68f8      	ldr	r0, [r7, #12]
   82568:	4c07      	ldr	r4, [pc, #28]	; (82588 <pio_configure_pin_group+0xd8>)
   8256a:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8256c:	e001      	b.n	82572 <pio_configure_pin_group+0xc2>

	default:
		return 0;
   8256e:	2300      	movs	r3, #0
   82570:	e000      	b.n	82574 <pio_configure_pin_group+0xc4>
	}

	return 1;
   82572:	2301      	movs	r3, #1
}
   82574:	4618      	mov	r0, r3
   82576:	3714      	adds	r7, #20
   82578:	46bd      	mov	sp, r7
   8257a:	bd90      	pop	{r4, r7, pc}
   8257c:	0008210b 	.word	0x0008210b
   82580:	000820e1 	.word	0x000820e1
   82584:	000821a9 	.word	0x000821a9
   82588:	00082229 	.word	0x00082229

0008258c <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   8258c:	b480      	push	{r7}
   8258e:	b085      	sub	sp, #20
   82590:	af00      	add	r7, sp, #0
   82592:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82594:	687b      	ldr	r3, [r7, #4]
   82596:	095b      	lsrs	r3, r3, #5
   82598:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8259c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   825a0:	025b      	lsls	r3, r3, #9
   825a2:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   825a4:	68fb      	ldr	r3, [r7, #12]
}
   825a6:	4618      	mov	r0, r3
   825a8:	3714      	adds	r7, #20
   825aa:	46bd      	mov	sp, r7
   825ac:	bc80      	pop	{r7}
   825ae:	4770      	bx	lr

000825b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   825b0:	b580      	push	{r7, lr}
   825b2:	b084      	sub	sp, #16
   825b4:	af00      	add	r7, sp, #0
   825b6:	6078      	str	r0, [r7, #4]
   825b8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   825ba:	6878      	ldr	r0, [r7, #4]
   825bc:	4b26      	ldr	r3, [pc, #152]	; (82658 <pio_handler_process+0xa8>)
   825be:	4798      	blx	r3
   825c0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   825c2:	6878      	ldr	r0, [r7, #4]
   825c4:	4b25      	ldr	r3, [pc, #148]	; (8265c <pio_handler_process+0xac>)
   825c6:	4798      	blx	r3
   825c8:	4602      	mov	r2, r0
   825ca:	68fb      	ldr	r3, [r7, #12]
   825cc:	4013      	ands	r3, r2
   825ce:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   825d0:	68fb      	ldr	r3, [r7, #12]
   825d2:	2b00      	cmp	r3, #0
   825d4:	d03c      	beq.n	82650 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   825d6:	2300      	movs	r3, #0
   825d8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   825da:	e034      	b.n	82646 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   825dc:	4a20      	ldr	r2, [pc, #128]	; (82660 <pio_handler_process+0xb0>)
   825de:	68bb      	ldr	r3, [r7, #8]
   825e0:	011b      	lsls	r3, r3, #4
   825e2:	4413      	add	r3, r2
   825e4:	681b      	ldr	r3, [r3, #0]
   825e6:	683a      	ldr	r2, [r7, #0]
   825e8:	429a      	cmp	r2, r3
   825ea:	d126      	bne.n	8263a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   825ec:	4a1c      	ldr	r2, [pc, #112]	; (82660 <pio_handler_process+0xb0>)
   825ee:	68bb      	ldr	r3, [r7, #8]
   825f0:	011b      	lsls	r3, r3, #4
   825f2:	4413      	add	r3, r2
   825f4:	3304      	adds	r3, #4
   825f6:	681a      	ldr	r2, [r3, #0]
   825f8:	68fb      	ldr	r3, [r7, #12]
   825fa:	4013      	ands	r3, r2
   825fc:	2b00      	cmp	r3, #0
   825fe:	d01c      	beq.n	8263a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82600:	4a17      	ldr	r2, [pc, #92]	; (82660 <pio_handler_process+0xb0>)
   82602:	68bb      	ldr	r3, [r7, #8]
   82604:	011b      	lsls	r3, r3, #4
   82606:	4413      	add	r3, r2
   82608:	330c      	adds	r3, #12
   8260a:	681b      	ldr	r3, [r3, #0]
   8260c:	4914      	ldr	r1, [pc, #80]	; (82660 <pio_handler_process+0xb0>)
   8260e:	68ba      	ldr	r2, [r7, #8]
   82610:	0112      	lsls	r2, r2, #4
   82612:	440a      	add	r2, r1
   82614:	6810      	ldr	r0, [r2, #0]
   82616:	4912      	ldr	r1, [pc, #72]	; (82660 <pio_handler_process+0xb0>)
   82618:	68ba      	ldr	r2, [r7, #8]
   8261a:	0112      	lsls	r2, r2, #4
   8261c:	440a      	add	r2, r1
   8261e:	3204      	adds	r2, #4
   82620:	6812      	ldr	r2, [r2, #0]
   82622:	4611      	mov	r1, r2
   82624:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82626:	4a0e      	ldr	r2, [pc, #56]	; (82660 <pio_handler_process+0xb0>)
   82628:	68bb      	ldr	r3, [r7, #8]
   8262a:	011b      	lsls	r3, r3, #4
   8262c:	4413      	add	r3, r2
   8262e:	3304      	adds	r3, #4
   82630:	681b      	ldr	r3, [r3, #0]
   82632:	43db      	mvns	r3, r3
   82634:	68fa      	ldr	r2, [r7, #12]
   82636:	4013      	ands	r3, r2
   82638:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   8263a:	68bb      	ldr	r3, [r7, #8]
   8263c:	3301      	adds	r3, #1
   8263e:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   82640:	68bb      	ldr	r3, [r7, #8]
   82642:	2b06      	cmp	r3, #6
   82644:	d803      	bhi.n	8264e <pio_handler_process+0x9e>
		while (status != 0) {
   82646:	68fb      	ldr	r3, [r7, #12]
   82648:	2b00      	cmp	r3, #0
   8264a:	d1c7      	bne.n	825dc <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   8264c:	e000      	b.n	82650 <pio_handler_process+0xa0>
				break;
   8264e:	bf00      	nop
}
   82650:	bf00      	nop
   82652:	3710      	adds	r7, #16
   82654:	46bd      	mov	sp, r7
   82656:	bd80      	pop	{r7, pc}
   82658:	000822c3 	.word	0x000822c3
   8265c:	000822d9 	.word	0x000822d9
   82660:	200012b8 	.word	0x200012b8

00082664 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82664:	b580      	push	{r7, lr}
   82666:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82668:	210a      	movs	r1, #10
   8266a:	4802      	ldr	r0, [pc, #8]	; (82674 <PIOA_Handler+0x10>)
   8266c:	4b02      	ldr	r3, [pc, #8]	; (82678 <PIOA_Handler+0x14>)
   8266e:	4798      	blx	r3
}
   82670:	bf00      	nop
   82672:	bd80      	pop	{r7, pc}
   82674:	400e0c00 	.word	0x400e0c00
   82678:	000825b1 	.word	0x000825b1

0008267c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8267c:	b580      	push	{r7, lr}
   8267e:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   82680:	210b      	movs	r1, #11
   82682:	4802      	ldr	r0, [pc, #8]	; (8268c <PIOB_Handler+0x10>)
   82684:	4b02      	ldr	r3, [pc, #8]	; (82690 <PIOB_Handler+0x14>)
   82686:	4798      	blx	r3
}
   82688:	bf00      	nop
   8268a:	bd80      	pop	{r7, pc}
   8268c:	400e0e00 	.word	0x400e0e00
   82690:	000825b1 	.word	0x000825b1

00082694 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   82694:	b480      	push	{r7}
   82696:	b085      	sub	sp, #20
   82698:	af00      	add	r7, sp, #0
   8269a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8269c:	4b1c      	ldr	r3, [pc, #112]	; (82710 <pmc_switch_mck_to_mainck+0x7c>)
   8269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   826a0:	f023 0303 	bic.w	r3, r3, #3
   826a4:	4a1a      	ldr	r2, [pc, #104]	; (82710 <pmc_switch_mck_to_mainck+0x7c>)
   826a6:	f043 0301 	orr.w	r3, r3, #1
   826aa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   826b0:	60fb      	str	r3, [r7, #12]
   826b2:	e007      	b.n	826c4 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   826b4:	68fb      	ldr	r3, [r7, #12]
   826b6:	2b00      	cmp	r3, #0
   826b8:	d101      	bne.n	826be <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   826ba:	2301      	movs	r3, #1
   826bc:	e023      	b.n	82706 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   826be:	68fb      	ldr	r3, [r7, #12]
   826c0:	3b01      	subs	r3, #1
   826c2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826c4:	4b12      	ldr	r3, [pc, #72]	; (82710 <pmc_switch_mck_to_mainck+0x7c>)
   826c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   826c8:	f003 0308 	and.w	r3, r3, #8
   826cc:	2b00      	cmp	r3, #0
   826ce:	d0f1      	beq.n	826b4 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   826d0:	4b0f      	ldr	r3, [pc, #60]	; (82710 <pmc_switch_mck_to_mainck+0x7c>)
   826d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   826d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   826d8:	490d      	ldr	r1, [pc, #52]	; (82710 <pmc_switch_mck_to_mainck+0x7c>)
   826da:	687b      	ldr	r3, [r7, #4]
   826dc:	4313      	orrs	r3, r2
   826de:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   826e4:	60fb      	str	r3, [r7, #12]
   826e6:	e007      	b.n	826f8 <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   826e8:	68fb      	ldr	r3, [r7, #12]
   826ea:	2b00      	cmp	r3, #0
   826ec:	d101      	bne.n	826f2 <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   826ee:	2301      	movs	r3, #1
   826f0:	e009      	b.n	82706 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   826f2:	68fb      	ldr	r3, [r7, #12]
   826f4:	3b01      	subs	r3, #1
   826f6:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826f8:	4b05      	ldr	r3, [pc, #20]	; (82710 <pmc_switch_mck_to_mainck+0x7c>)
   826fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   826fc:	f003 0308 	and.w	r3, r3, #8
   82700:	2b00      	cmp	r3, #0
   82702:	d0f1      	beq.n	826e8 <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   82704:	2300      	movs	r3, #0
}
   82706:	4618      	mov	r0, r3
   82708:	3714      	adds	r7, #20
   8270a:	46bd      	mov	sp, r7
   8270c:	bc80      	pop	{r7}
   8270e:	4770      	bx	lr
   82710:	400e0400 	.word	0x400e0400

00082714 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82714:	b480      	push	{r7}
   82716:	b085      	sub	sp, #20
   82718:	af00      	add	r7, sp, #0
   8271a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8271c:	4b1c      	ldr	r3, [pc, #112]	; (82790 <pmc_switch_mck_to_pllack+0x7c>)
   8271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82720:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82724:	491a      	ldr	r1, [pc, #104]	; (82790 <pmc_switch_mck_to_pllack+0x7c>)
   82726:	687b      	ldr	r3, [r7, #4]
   82728:	4313      	orrs	r3, r2
   8272a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8272c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82730:	60fb      	str	r3, [r7, #12]
   82732:	e007      	b.n	82744 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82734:	68fb      	ldr	r3, [r7, #12]
   82736:	2b00      	cmp	r3, #0
   82738:	d101      	bne.n	8273e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8273a:	2301      	movs	r3, #1
   8273c:	e023      	b.n	82786 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8273e:	68fb      	ldr	r3, [r7, #12]
   82740:	3b01      	subs	r3, #1
   82742:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82744:	4b12      	ldr	r3, [pc, #72]	; (82790 <pmc_switch_mck_to_pllack+0x7c>)
   82746:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82748:	f003 0308 	and.w	r3, r3, #8
   8274c:	2b00      	cmp	r3, #0
   8274e:	d0f1      	beq.n	82734 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82750:	4b0f      	ldr	r3, [pc, #60]	; (82790 <pmc_switch_mck_to_pllack+0x7c>)
   82752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82754:	f023 0303 	bic.w	r3, r3, #3
   82758:	4a0d      	ldr	r2, [pc, #52]	; (82790 <pmc_switch_mck_to_pllack+0x7c>)
   8275a:	f043 0302 	orr.w	r3, r3, #2
   8275e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82760:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82764:	60fb      	str	r3, [r7, #12]
   82766:	e007      	b.n	82778 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82768:	68fb      	ldr	r3, [r7, #12]
   8276a:	2b00      	cmp	r3, #0
   8276c:	d101      	bne.n	82772 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   8276e:	2301      	movs	r3, #1
   82770:	e009      	b.n	82786 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   82772:	68fb      	ldr	r3, [r7, #12]
   82774:	3b01      	subs	r3, #1
   82776:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82778:	4b05      	ldr	r3, [pc, #20]	; (82790 <pmc_switch_mck_to_pllack+0x7c>)
   8277a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8277c:	f003 0308 	and.w	r3, r3, #8
   82780:	2b00      	cmp	r3, #0
   82782:	d0f1      	beq.n	82768 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   82784:	2300      	movs	r3, #0
}
   82786:	4618      	mov	r0, r3
   82788:	3714      	adds	r7, #20
   8278a:	46bd      	mov	sp, r7
   8278c:	bc80      	pop	{r7}
   8278e:	4770      	bx	lr
   82790:	400e0400 	.word	0x400e0400

00082794 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   82794:	b480      	push	{r7}
   82796:	b083      	sub	sp, #12
   82798:	af00      	add	r7, sp, #0
   8279a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   8279c:	687b      	ldr	r3, [r7, #4]
   8279e:	2b01      	cmp	r3, #1
   827a0:	d107      	bne.n	827b2 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   827a2:	4b08      	ldr	r3, [pc, #32]	; (827c4 <pmc_switch_sclk_to_32kxtal+0x30>)
   827a4:	689b      	ldr	r3, [r3, #8]
   827a6:	4a07      	ldr	r2, [pc, #28]	; (827c4 <pmc_switch_sclk_to_32kxtal+0x30>)
   827a8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   827ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   827b0:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   827b2:	4b04      	ldr	r3, [pc, #16]	; (827c4 <pmc_switch_sclk_to_32kxtal+0x30>)
   827b4:	4a04      	ldr	r2, [pc, #16]	; (827c8 <pmc_switch_sclk_to_32kxtal+0x34>)
   827b6:	601a      	str	r2, [r3, #0]
}
   827b8:	bf00      	nop
   827ba:	370c      	adds	r7, #12
   827bc:	46bd      	mov	sp, r7
   827be:	bc80      	pop	{r7}
   827c0:	4770      	bx	lr
   827c2:	bf00      	nop
   827c4:	400e1210 	.word	0x400e1210
   827c8:	a5000008 	.word	0xa5000008

000827cc <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   827cc:	b480      	push	{r7}
   827ce:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   827d0:	4b09      	ldr	r3, [pc, #36]	; (827f8 <pmc_osc_is_ready_32kxtal+0x2c>)
   827d2:	695b      	ldr	r3, [r3, #20]
   827d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   827d8:	2b00      	cmp	r3, #0
   827da:	d007      	beq.n	827ec <pmc_osc_is_ready_32kxtal+0x20>
   827dc:	4b07      	ldr	r3, [pc, #28]	; (827fc <pmc_osc_is_ready_32kxtal+0x30>)
   827de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   827e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   827e4:	2b00      	cmp	r3, #0
   827e6:	d001      	beq.n	827ec <pmc_osc_is_ready_32kxtal+0x20>
   827e8:	2301      	movs	r3, #1
   827ea:	e000      	b.n	827ee <pmc_osc_is_ready_32kxtal+0x22>
   827ec:	2300      	movs	r3, #0
}
   827ee:	4618      	mov	r0, r3
   827f0:	46bd      	mov	sp, r7
   827f2:	bc80      	pop	{r7}
   827f4:	4770      	bx	lr
   827f6:	bf00      	nop
   827f8:	400e1210 	.word	0x400e1210
   827fc:	400e0400 	.word	0x400e0400

00082800 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   82800:	b480      	push	{r7}
   82802:	b083      	sub	sp, #12
   82804:	af00      	add	r7, sp, #0
   82806:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   82808:	4b13      	ldr	r3, [pc, #76]	; (82858 <pmc_osc_enable_fastrc+0x58>)
   8280a:	6a1b      	ldr	r3, [r3, #32]
   8280c:	4a12      	ldr	r2, [pc, #72]	; (82858 <pmc_osc_enable_fastrc+0x58>)
   8280e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82812:	f043 0308 	orr.w	r3, r3, #8
   82816:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82818:	bf00      	nop
   8281a:	4b0f      	ldr	r3, [pc, #60]	; (82858 <pmc_osc_enable_fastrc+0x58>)
   8281c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82822:	2b00      	cmp	r3, #0
   82824:	d0f9      	beq.n	8281a <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82826:	4b0c      	ldr	r3, [pc, #48]	; (82858 <pmc_osc_enable_fastrc+0x58>)
   82828:	6a1b      	ldr	r3, [r3, #32]
   8282a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   82832:	687a      	ldr	r2, [r7, #4]
   82834:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82836:	4a08      	ldr	r2, [pc, #32]	; (82858 <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   82838:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8283c:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8283e:	bf00      	nop
   82840:	4b05      	ldr	r3, [pc, #20]	; (82858 <pmc_osc_enable_fastrc+0x58>)
   82842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82848:	2b00      	cmp	r3, #0
   8284a:	d0f9      	beq.n	82840 <pmc_osc_enable_fastrc+0x40>
}
   8284c:	bf00      	nop
   8284e:	bf00      	nop
   82850:	370c      	adds	r7, #12
   82852:	46bd      	mov	sp, r7
   82854:	bc80      	pop	{r7}
   82856:	4770      	bx	lr
   82858:	400e0400 	.word	0x400e0400

0008285c <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   8285c:	b480      	push	{r7}
   8285e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   82860:	4b03      	ldr	r3, [pc, #12]	; (82870 <pmc_osc_is_ready_fastrc+0x14>)
   82862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   82868:	4618      	mov	r0, r3
   8286a:	46bd      	mov	sp, r7
   8286c:	bc80      	pop	{r7}
   8286e:	4770      	bx	lr
   82870:	400e0400 	.word	0x400e0400

00082874 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   82874:	b480      	push	{r7}
   82876:	b085      	sub	sp, #20
   82878:	af00      	add	r7, sp, #0
   8287a:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   8287c:	4b10      	ldr	r3, [pc, #64]	; (828c0 <pmc_osc_enable_main_xtal+0x4c>)
   8287e:	6a1b      	ldr	r3, [r3, #32]
   82880:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   82882:	68fb      	ldr	r3, [r7, #12]
   82884:	f023 0303 	bic.w	r3, r3, #3
   82888:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8288a:	687b      	ldr	r3, [r7, #4]
   8288c:	021b      	lsls	r3, r3, #8
   8288e:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82890:	68fb      	ldr	r3, [r7, #12]
   82892:	4313      	orrs	r3, r2
   82894:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82898:	f043 0301 	orr.w	r3, r3, #1
   8289c:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   8289e:	4a08      	ldr	r2, [pc, #32]	; (828c0 <pmc_osc_enable_main_xtal+0x4c>)
   828a0:	68fb      	ldr	r3, [r7, #12]
   828a2:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   828a4:	bf00      	nop
   828a6:	4b06      	ldr	r3, [pc, #24]	; (828c0 <pmc_osc_enable_main_xtal+0x4c>)
   828a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   828aa:	f003 0301 	and.w	r3, r3, #1
   828ae:	2b00      	cmp	r3, #0
   828b0:	d0f9      	beq.n	828a6 <pmc_osc_enable_main_xtal+0x32>
}
   828b2:	bf00      	nop
   828b4:	bf00      	nop
   828b6:	3714      	adds	r7, #20
   828b8:	46bd      	mov	sp, r7
   828ba:	bc80      	pop	{r7}
   828bc:	4770      	bx	lr
   828be:	bf00      	nop
   828c0:	400e0400 	.word	0x400e0400

000828c4 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   828c4:	b480      	push	{r7}
   828c6:	b083      	sub	sp, #12
   828c8:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   828ca:	4b0a      	ldr	r3, [pc, #40]	; (828f4 <pmc_osc_bypass_main_xtal+0x30>)
   828cc:	6a1b      	ldr	r3, [r3, #32]
   828ce:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   828d0:	687b      	ldr	r3, [r7, #4]
   828d2:	f023 0303 	bic.w	r3, r3, #3
   828d6:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   828d8:	687b      	ldr	r3, [r7, #4]
   828da:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   828de:	f043 0302 	orr.w	r3, r3, #2
   828e2:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   828e4:	4a03      	ldr	r2, [pc, #12]	; (828f4 <pmc_osc_bypass_main_xtal+0x30>)
   828e6:	687b      	ldr	r3, [r7, #4]
   828e8:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   828ea:	bf00      	nop
   828ec:	370c      	adds	r7, #12
   828ee:	46bd      	mov	sp, r7
   828f0:	bc80      	pop	{r7}
   828f2:	4770      	bx	lr
   828f4:	400e0400 	.word	0x400e0400

000828f8 <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   828f8:	b480      	push	{r7}
   828fa:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   828fc:	4b03      	ldr	r3, [pc, #12]	; (8290c <pmc_osc_is_bypassed_main_xtal+0x14>)
   828fe:	6a1b      	ldr	r3, [r3, #32]
   82900:	f003 0302 	and.w	r3, r3, #2
}
   82904:	4618      	mov	r0, r3
   82906:	46bd      	mov	sp, r7
   82908:	bc80      	pop	{r7}
   8290a:	4770      	bx	lr
   8290c:	400e0400 	.word	0x400e0400

00082910 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   82910:	b480      	push	{r7}
   82912:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   82914:	4b03      	ldr	r3, [pc, #12]	; (82924 <pmc_osc_is_ready_main_xtal+0x14>)
   82916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82918:	f003 0301 	and.w	r3, r3, #1
}
   8291c:	4618      	mov	r0, r3
   8291e:	46bd      	mov	sp, r7
   82920:	bc80      	pop	{r7}
   82922:	4770      	bx	lr
   82924:	400e0400 	.word	0x400e0400

00082928 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82928:	b480      	push	{r7}
   8292a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8292c:	4b03      	ldr	r3, [pc, #12]	; (8293c <pmc_osc_is_ready_mainck+0x14>)
   8292e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82934:	4618      	mov	r0, r3
   82936:	46bd      	mov	sp, r7
   82938:	bc80      	pop	{r7}
   8293a:	4770      	bx	lr
   8293c:	400e0400 	.word	0x400e0400

00082940 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   82940:	b480      	push	{r7}
   82942:	b085      	sub	sp, #20
   82944:	af00      	add	r7, sp, #0
   82946:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   82948:	4b0c      	ldr	r3, [pc, #48]	; (8297c <pmc_mainck_osc_select+0x3c>)
   8294a:	6a1b      	ldr	r3, [r3, #32]
   8294c:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   8294e:	687b      	ldr	r3, [r7, #4]
   82950:	2b00      	cmp	r3, #0
   82952:	d004      	beq.n	8295e <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   82954:	68fb      	ldr	r3, [r7, #12]
   82956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   8295a:	60fb      	str	r3, [r7, #12]
   8295c:	e003      	b.n	82966 <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   8295e:	68fb      	ldr	r3, [r7, #12]
   82960:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   82964:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   82966:	4a05      	ldr	r2, [pc, #20]	; (8297c <pmc_mainck_osc_select+0x3c>)
   82968:	68fb      	ldr	r3, [r7, #12]
   8296a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8296e:	6213      	str	r3, [r2, #32]
}
   82970:	bf00      	nop
   82972:	3714      	adds	r7, #20
   82974:	46bd      	mov	sp, r7
   82976:	bc80      	pop	{r7}
   82978:	4770      	bx	lr
   8297a:	bf00      	nop
   8297c:	400e0400 	.word	0x400e0400

00082980 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82980:	b480      	push	{r7}
   82982:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82984:	4b03      	ldr	r3, [pc, #12]	; (82994 <pmc_disable_pllack+0x14>)
   82986:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8298a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   8298c:	bf00      	nop
   8298e:	46bd      	mov	sp, r7
   82990:	bc80      	pop	{r7}
   82992:	4770      	bx	lr
   82994:	400e0400 	.word	0x400e0400

00082998 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82998:	b480      	push	{r7}
   8299a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8299c:	4b03      	ldr	r3, [pc, #12]	; (829ac <pmc_is_locked_pllack+0x14>)
   8299e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   829a0:	f003 0302 	and.w	r3, r3, #2
}
   829a4:	4618      	mov	r0, r3
   829a6:	46bd      	mov	sp, r7
   829a8:	bc80      	pop	{r7}
   829aa:	4770      	bx	lr
   829ac:	400e0400 	.word	0x400e0400

000829b0 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   829b0:	b480      	push	{r7}
   829b2:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   829b4:	4b04      	ldr	r3, [pc, #16]	; (829c8 <pmc_disable_upll_clock+0x18>)
   829b6:	69db      	ldr	r3, [r3, #28]
   829b8:	4a03      	ldr	r2, [pc, #12]	; (829c8 <pmc_disable_upll_clock+0x18>)
   829ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   829be:	61d3      	str	r3, [r2, #28]
}
   829c0:	bf00      	nop
   829c2:	46bd      	mov	sp, r7
   829c4:	bc80      	pop	{r7}
   829c6:	4770      	bx	lr
   829c8:	400e0400 	.word	0x400e0400

000829cc <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   829cc:	b480      	push	{r7}
   829ce:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   829d0:	4b03      	ldr	r3, [pc, #12]	; (829e0 <pmc_is_locked_upll+0x14>)
   829d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   829d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   829d8:	4618      	mov	r0, r3
   829da:	46bd      	mov	sp, r7
   829dc:	bc80      	pop	{r7}
   829de:	4770      	bx	lr
   829e0:	400e0400 	.word	0x400e0400

000829e4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   829e4:	b480      	push	{r7}
   829e6:	b083      	sub	sp, #12
   829e8:	af00      	add	r7, sp, #0
   829ea:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   829ec:	687b      	ldr	r3, [r7, #4]
   829ee:	2b1d      	cmp	r3, #29
   829f0:	d901      	bls.n	829f6 <pmc_enable_periph_clk+0x12>
		return 1;
   829f2:	2301      	movs	r3, #1
   829f4:	e015      	b.n	82a22 <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   829f6:	687b      	ldr	r3, [r7, #4]
   829f8:	2b1f      	cmp	r3, #31
   829fa:	d811      	bhi.n	82a20 <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   829fc:	4b0b      	ldr	r3, [pc, #44]	; (82a2c <pmc_enable_periph_clk+0x48>)
   829fe:	699a      	ldr	r2, [r3, #24]
   82a00:	2101      	movs	r1, #1
   82a02:	687b      	ldr	r3, [r7, #4]
   82a04:	fa01 f303 	lsl.w	r3, r1, r3
   82a08:	401a      	ands	r2, r3
   82a0a:	2101      	movs	r1, #1
   82a0c:	687b      	ldr	r3, [r7, #4]
   82a0e:	fa01 f303 	lsl.w	r3, r1, r3
   82a12:	429a      	cmp	r2, r3
   82a14:	d004      	beq.n	82a20 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   82a16:	2201      	movs	r2, #1
   82a18:	687b      	ldr	r3, [r7, #4]
   82a1a:	409a      	lsls	r2, r3
   82a1c:	4b03      	ldr	r3, [pc, #12]	; (82a2c <pmc_enable_periph_clk+0x48>)
   82a1e:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82a20:	2300      	movs	r3, #0
}
   82a22:	4618      	mov	r0, r3
   82a24:	370c      	adds	r7, #12
   82a26:	46bd      	mov	sp, r7
   82a28:	bc80      	pop	{r7}
   82a2a:	4770      	bx	lr
   82a2c:	400e0400 	.word	0x400e0400

00082a30 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   82a30:	b480      	push	{r7}
   82a32:	b083      	sub	sp, #12
   82a34:	af00      	add	r7, sp, #0
   82a36:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82a38:	687b      	ldr	r3, [r7, #4]
   82a3a:	2b1d      	cmp	r3, #29
   82a3c:	d901      	bls.n	82a42 <pmc_disable_periph_clk+0x12>
		return 1;
   82a3e:	2301      	movs	r3, #1
   82a40:	e015      	b.n	82a6e <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   82a42:	687b      	ldr	r3, [r7, #4]
   82a44:	2b1f      	cmp	r3, #31
   82a46:	d811      	bhi.n	82a6c <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   82a48:	4b0b      	ldr	r3, [pc, #44]	; (82a78 <pmc_disable_periph_clk+0x48>)
   82a4a:	699a      	ldr	r2, [r3, #24]
   82a4c:	2101      	movs	r1, #1
   82a4e:	687b      	ldr	r3, [r7, #4]
   82a50:	fa01 f303 	lsl.w	r3, r1, r3
   82a54:	401a      	ands	r2, r3
   82a56:	2101      	movs	r1, #1
   82a58:	687b      	ldr	r3, [r7, #4]
   82a5a:	fa01 f303 	lsl.w	r3, r1, r3
   82a5e:	429a      	cmp	r2, r3
   82a60:	d104      	bne.n	82a6c <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   82a62:	2201      	movs	r2, #1
   82a64:	687b      	ldr	r3, [r7, #4]
   82a66:	409a      	lsls	r2, r3
   82a68:	4b03      	ldr	r3, [pc, #12]	; (82a78 <pmc_disable_periph_clk+0x48>)
   82a6a:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   82a6c:	2300      	movs	r3, #0
}
   82a6e:	4618      	mov	r0, r3
   82a70:	370c      	adds	r7, #12
   82a72:	46bd      	mov	sp, r7
   82a74:	bc80      	pop	{r7}
   82a76:	4770      	bx	lr
   82a78:	400e0400 	.word	0x400e0400

00082a7c <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   82a7c:	b480      	push	{r7}
   82a7e:	b083      	sub	sp, #12
   82a80:	af00      	add	r7, sp, #0
   82a82:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   82a84:	4a05      	ldr	r2, [pc, #20]	; (82a9c <pmc_enable_pck+0x20>)
   82a86:	f44f 7180 	mov.w	r1, #256	; 0x100
   82a8a:	687b      	ldr	r3, [r7, #4]
   82a8c:	fa01 f303 	lsl.w	r3, r1, r3
   82a90:	6013      	str	r3, [r2, #0]
}
   82a92:	bf00      	nop
   82a94:	370c      	adds	r7, #12
   82a96:	46bd      	mov	sp, r7
   82a98:	bc80      	pop	{r7}
   82a9a:	4770      	bx	lr
   82a9c:	400e0400 	.word	0x400e0400

00082aa0 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   82aa0:	b480      	push	{r7}
   82aa2:	b083      	sub	sp, #12
   82aa4:	af00      	add	r7, sp, #0
   82aa6:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   82aa8:	687b      	ldr	r3, [r7, #4]
   82aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
   82aae:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   82ab0:	4b05      	ldr	r3, [pc, #20]	; (82ac8 <pmc_set_fast_startup_input+0x28>)
   82ab2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82ab4:	4904      	ldr	r1, [pc, #16]	; (82ac8 <pmc_set_fast_startup_input+0x28>)
   82ab6:	687b      	ldr	r3, [r7, #4]
   82ab8:	4313      	orrs	r3, r2
   82aba:	670b      	str	r3, [r1, #112]	; 0x70
}
   82abc:	bf00      	nop
   82abe:	370c      	adds	r7, #12
   82ac0:	46bd      	mov	sp, r7
   82ac2:	bc80      	pop	{r7}
   82ac4:	4770      	bx	lr
   82ac6:	bf00      	nop
   82ac8:	400e0400 	.word	0x400e0400

00082acc <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   82acc:	b480      	push	{r7}
   82ace:	b083      	sub	sp, #12
   82ad0:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   82ad2:	4b13      	ldr	r3, [pc, #76]	; (82b20 <pmc_enable_waitmode+0x54>)
   82ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82ad6:	4a12      	ldr	r2, [pc, #72]	; (82b20 <pmc_enable_waitmode+0x54>)
   82ad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82adc:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   82ade:	4b11      	ldr	r3, [pc, #68]	; (82b24 <pmc_enable_waitmode+0x58>)
   82ae0:	691b      	ldr	r3, [r3, #16]
   82ae2:	4a10      	ldr	r2, [pc, #64]	; (82b24 <pmc_enable_waitmode+0x58>)
   82ae4:	f023 0304 	bic.w	r3, r3, #4
   82ae8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   82aea:	bf20      	wfe
}
   82aec:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   82aee:	2300      	movs	r3, #0
   82af0:	607b      	str	r3, [r7, #4]
   82af2:	e004      	b.n	82afe <pmc_enable_waitmode+0x32>
  __ASM volatile ("nop");
   82af4:	bf00      	nop
}
   82af6:	bf00      	nop
   82af8:	687b      	ldr	r3, [r7, #4]
   82afa:	3301      	adds	r3, #1
   82afc:	607b      	str	r3, [r7, #4]
   82afe:	687b      	ldr	r3, [r7, #4]
   82b00:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82b04:	d3f6      	bcc.n	82af4 <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   82b06:	bf00      	nop
   82b08:	4b05      	ldr	r3, [pc, #20]	; (82b20 <pmc_enable_waitmode+0x54>)
   82b0a:	6a1b      	ldr	r3, [r3, #32]
   82b0c:	f003 0308 	and.w	r3, r3, #8
   82b10:	2b00      	cmp	r3, #0
   82b12:	d0f9      	beq.n	82b08 <pmc_enable_waitmode+0x3c>

}
   82b14:	bf00      	nop
   82b16:	bf00      	nop
   82b18:	370c      	adds	r7, #12
   82b1a:	46bd      	mov	sp, r7
   82b1c:	bc80      	pop	{r7}
   82b1e:	4770      	bx	lr
   82b20:	400e0400 	.word	0x400e0400
   82b24:	e000ed00 	.word	0xe000ed00

00082b28 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   82b28:	b580      	push	{r7, lr}
   82b2a:	b086      	sub	sp, #24
   82b2c:	af00      	add	r7, sp, #0
   82b2e:	60f8      	str	r0, [r7, #12]
   82b30:	60b9      	str	r1, [r7, #8]
   82b32:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   82b34:	2300      	movs	r3, #0
   82b36:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   82b38:	68fb      	ldr	r3, [r7, #12]
   82b3a:	2b00      	cmp	r3, #0
   82b3c:	d012      	beq.n	82b64 <_read+0x3c>
		return -1;
   82b3e:	f04f 33ff 	mov.w	r3, #4294967295
   82b42:	e013      	b.n	82b6c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   82b44:	4b0b      	ldr	r3, [pc, #44]	; (82b74 <_read+0x4c>)
   82b46:	681b      	ldr	r3, [r3, #0]
   82b48:	4a0b      	ldr	r2, [pc, #44]	; (82b78 <_read+0x50>)
   82b4a:	6812      	ldr	r2, [r2, #0]
   82b4c:	68b9      	ldr	r1, [r7, #8]
   82b4e:	4610      	mov	r0, r2
   82b50:	4798      	blx	r3
		ptr++;
   82b52:	68bb      	ldr	r3, [r7, #8]
   82b54:	3301      	adds	r3, #1
   82b56:	60bb      	str	r3, [r7, #8]
		nChars++;
   82b58:	697b      	ldr	r3, [r7, #20]
   82b5a:	3301      	adds	r3, #1
   82b5c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   82b5e:	687b      	ldr	r3, [r7, #4]
   82b60:	3b01      	subs	r3, #1
   82b62:	607b      	str	r3, [r7, #4]
   82b64:	687b      	ldr	r3, [r7, #4]
   82b66:	2b00      	cmp	r3, #0
   82b68:	dcec      	bgt.n	82b44 <_read+0x1c>
	}
	return nChars;
   82b6a:	697b      	ldr	r3, [r7, #20]
}
   82b6c:	4618      	mov	r0, r3
   82b6e:	3718      	adds	r7, #24
   82b70:	46bd      	mov	sp, r7
   82b72:	bd80      	pop	{r7, pc}
   82b74:	2000181c 	.word	0x2000181c
   82b78:	20001844 	.word	0x20001844

00082b7c <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   82b7c:	b5b0      	push	{r4, r5, r7, lr}
   82b7e:	b09c      	sub	sp, #112	; 0x70
   82b80:	af00      	add	r7, sp, #0
   82b82:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   82b84:	687b      	ldr	r3, [r7, #4]
   82b86:	2b05      	cmp	r3, #5
   82b88:	f000 81e8 	beq.w	82f5c <pmc_sleep+0x3e0>
   82b8c:	687b      	ldr	r3, [r7, #4]
   82b8e:	2b05      	cmp	r3, #5
   82b90:	f300 81f5 	bgt.w	82f7e <pmc_sleep+0x402>
   82b94:	687b      	ldr	r3, [r7, #4]
   82b96:	2b02      	cmp	r3, #2
   82b98:	dc03      	bgt.n	82ba2 <pmc_sleep+0x26>
   82b9a:	687b      	ldr	r3, [r7, #4]
   82b9c:	2b00      	cmp	r3, #0
   82b9e:	dc06      	bgt.n	82bae <pmc_sleep+0x32>
		__WFE() ;
#endif
		break;
#endif
	}
}
   82ba0:	e1ed      	b.n	82f7e <pmc_sleep+0x402>
   82ba2:	687b      	ldr	r3, [r7, #4]
   82ba4:	3b03      	subs	r3, #3
	switch (sleep_mode) {
   82ba6:	2b01      	cmp	r3, #1
   82ba8:	f200 81e9 	bhi.w	82f7e <pmc_sleep+0x402>
   82bac:	e01b      	b.n	82be6 <pmc_sleep+0x6a>
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   82bae:	4b88      	ldr	r3, [pc, #544]	; (82dd0 <pmc_sleep+0x254>)
   82bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82bb2:	4a87      	ldr	r2, [pc, #540]	; (82dd0 <pmc_sleep+0x254>)
   82bb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   82bb8:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   82bba:	4b86      	ldr	r3, [pc, #536]	; (82dd4 <pmc_sleep+0x258>)
   82bbc:	691b      	ldr	r3, [r3, #16]
   82bbe:	4a85      	ldr	r2, [pc, #532]	; (82dd4 <pmc_sleep+0x258>)
   82bc0:	f023 0304 	bic.w	r3, r3, #4
   82bc4:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   82bc6:	4b84      	ldr	r3, [pc, #528]	; (82dd8 <pmc_sleep+0x25c>)
   82bc8:	2201      	movs	r2, #1
   82bca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82bcc:	f3bf 8f5f 	dmb	sy
}
   82bd0:	bf00      	nop
  __ASM volatile ("cpsie i");
   82bd2:	b662      	cpsie	i
}
   82bd4:	bf00      	nop
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   82bd6:	687b      	ldr	r3, [r7, #4]
   82bd8:	2b02      	cmp	r3, #2
   82bda:	d101      	bne.n	82be0 <pmc_sleep+0x64>
  __ASM volatile ("wfi");
   82bdc:	bf30      	wfi
}
   82bde:	e001      	b.n	82be4 <pmc_sleep+0x68>
  __ASM volatile ("wfe");
   82be0:	bf20      	wfe
}
   82be2:	bf00      	nop
		break;
   82be4:	e1cb      	b.n	82f7e <pmc_sleep+0x402>
  __ASM volatile ("cpsid i");
   82be6:	b672      	cpsid	i
}
   82be8:	bf00      	nop
  __ASM volatile ("dmb");
   82bea:	f3bf 8f5f 	dmb	sy
}
   82bee:	bf00      	nop
		cpu_irq_disable();
   82bf0:	4b79      	ldr	r3, [pc, #484]	; (82dd8 <pmc_sleep+0x25c>)
   82bf2:	2200      	movs	r2, #0
   82bf4:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   82bf6:	4b79      	ldr	r3, [pc, #484]	; (82ddc <pmc_sleep+0x260>)
   82bf8:	2201      	movs	r2, #1
   82bfa:	701a      	strb	r2, [r3, #0]
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   82bfc:	687b      	ldr	r3, [r7, #4]
   82bfe:	2b04      	cmp	r3, #4
   82c00:	bf0c      	ite	eq
   82c02:	2301      	moveq	r3, #1
   82c04:	2300      	movne	r3, #0
   82c06:	b2da      	uxtb	r2, r3
   82c08:	f107 0320 	add.w	r3, r7, #32
   82c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   82c0e:	f107 031c 	add.w	r3, r7, #28
   82c12:	64bb      	str	r3, [r7, #72]	; 0x48
   82c14:	f107 0318 	add.w	r3, r7, #24
   82c18:	647b      	str	r3, [r7, #68]	; 0x44
   82c1a:	f107 0314 	add.w	r3, r7, #20
   82c1e:	643b      	str	r3, [r7, #64]	; 0x40
   82c20:	f107 0310 	add.w	r3, r7, #16
   82c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   82c26:	f107 030c 	add.w	r3, r7, #12
   82c2a:	63bb      	str	r3, [r7, #56]	; 0x38
   82c2c:	4613      	mov	r3, r2
   82c2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   82c32:	4b67      	ldr	r3, [pc, #412]	; (82dd0 <pmc_sleep+0x254>)
   82c34:	6a1b      	ldr	r3, [r3, #32]
   82c36:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   82c38:	4b65      	ldr	r3, [pc, #404]	; (82dd0 <pmc_sleep+0x254>)
   82c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   82c3e:	4b68      	ldr	r3, [pc, #416]	; (82de0 <pmc_sleep+0x264>)
   82c40:	681b      	ldr	r3, [r3, #0]
   82c42:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   82c44:	4b67      	ldr	r3, [pc, #412]	; (82de4 <pmc_sleep+0x268>)
   82c46:	681b      	ldr	r3, [r3, #0]
   82c48:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   82c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   82c4c:	2b00      	cmp	r3, #0
   82c4e:	d002      	beq.n	82c56 <pmc_sleep+0xda>
		*p_osc_setting = mor;
   82c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   82c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   82c54:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   82c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   82c58:	2b00      	cmp	r3, #0
   82c5a:	d003      	beq.n	82c64 <pmc_sleep+0xe8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   82c5c:	4b5c      	ldr	r3, [pc, #368]	; (82dd0 <pmc_sleep+0x254>)
   82c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   82c62:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   82c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   82c66:	2b00      	cmp	r3, #0
   82c68:	d003      	beq.n	82c72 <pmc_sleep+0xf6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   82c6a:	4b59      	ldr	r3, [pc, #356]	; (82dd0 <pmc_sleep+0x254>)
   82c6c:	69da      	ldr	r2, [r3, #28]
   82c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   82c70:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   82c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82c74:	2b00      	cmp	r3, #0
   82c76:	d002      	beq.n	82c7e <pmc_sleep+0x102>
		*p_mck_setting  = mckr;
   82c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   82c7c:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   82c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82c80:	2b00      	cmp	r3, #0
   82c82:	d002      	beq.n	82c8a <pmc_sleep+0x10e>
		*p_fmr_setting  = fmr;
   82c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
   82c88:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   82c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82c8c:	2b00      	cmp	r3, #0
   82c8e:	d002      	beq.n	82c96 <pmc_sleep+0x11a>
		*p_fmr_setting1 = fmr1;
   82c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   82c94:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   82c96:	4a4e      	ldr	r2, [pc, #312]	; (82dd0 <pmc_sleep+0x254>)
   82c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82c9a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82c9e:	f043 0308 	orr.w	r3, r3, #8
   82ca2:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   82ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82ca6:	f003 0302 	and.w	r3, r3, #2
   82caa:	2b00      	cmp	r3, #0
   82cac:	d00f      	beq.n	82cce <pmc_sleep+0x152>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   82cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82cb0:	f023 0303 	bic.w	r3, r3, #3
   82cb4:	f043 0301 	orr.w	r3, r3, #1
   82cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   82cba:	4a45      	ldr	r2, [pc, #276]	; (82dd0 <pmc_sleep+0x254>)
   82cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82cbe:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82cc0:	bf00      	nop
   82cc2:	4b43      	ldr	r3, [pc, #268]	; (82dd0 <pmc_sleep+0x254>)
   82cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82cc6:	f003 0308 	and.w	r3, r3, #8
   82cca:	2b00      	cmp	r3, #0
   82ccc:	d0f9      	beq.n	82cc2 <pmc_sleep+0x146>
	if (mckr & PMC_MCKR_PRES_Msk) {
   82cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82cd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82cd4:	2b00      	cmp	r3, #0
   82cd6:	d00d      	beq.n	82cf4 <pmc_sleep+0x178>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   82cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82cde:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   82ce0:	4a3b      	ldr	r2, [pc, #236]	; (82dd0 <pmc_sleep+0x254>)
   82ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82ce4:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82ce6:	bf00      	nop
   82ce8:	4b39      	ldr	r3, [pc, #228]	; (82dd0 <pmc_sleep+0x254>)
   82cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82cec:	f003 0308 	and.w	r3, r3, #8
   82cf0:	2b00      	cmp	r3, #0
   82cf2:	d0f9      	beq.n	82ce8 <pmc_sleep+0x16c>
	pmc_disable_pllack();
   82cf4:	4b3c      	ldr	r3, [pc, #240]	; (82de8 <pmc_sleep+0x26c>)
   82cf6:	4798      	blx	r3
	pmc_disable_upll_clock();
   82cf8:	4b3c      	ldr	r3, [pc, #240]	; (82dec <pmc_sleep+0x270>)
   82cfa:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82cfc:	bf00      	nop
   82cfe:	4b34      	ldr	r3, [pc, #208]	; (82dd0 <pmc_sleep+0x254>)
   82d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82d06:	2b00      	cmp	r3, #0
   82d08:	d0f9      	beq.n	82cfe <pmc_sleep+0x182>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   82d0a:	4b31      	ldr	r3, [pc, #196]	; (82dd0 <pmc_sleep+0x254>)
   82d0c:	6a1b      	ldr	r3, [r3, #32]
   82d0e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   82d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82d16:	4a2e      	ldr	r2, [pc, #184]	; (82dd0 <pmc_sleep+0x254>)
   82d18:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82d1c:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   82d1e:	bf00      	nop
   82d20:	4b2b      	ldr	r3, [pc, #172]	; (82dd0 <pmc_sleep+0x254>)
   82d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82d28:	2b00      	cmp	r3, #0
   82d2a:	d0f9      	beq.n	82d20 <pmc_sleep+0x1a4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   82d2c:	4a2c      	ldr	r2, [pc, #176]	; (82de0 <pmc_sleep+0x264>)
   82d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   82d30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   82d34:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   82d36:	4a2b      	ldr	r2, [pc, #172]	; (82de4 <pmc_sleep+0x268>)
   82d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82d3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   82d3e:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   82d40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   82d44:	2b00      	cmp	r3, #0
   82d46:	d009      	beq.n	82d5c <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82d48:	4b21      	ldr	r3, [pc, #132]	; (82dd0 <pmc_sleep+0x254>)
   82d4a:	6a1b      	ldr	r3, [r3, #32]
   82d4c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82d50:	f023 0301 	bic.w	r3, r3, #1
   82d54:	4a1e      	ldr	r2, [pc, #120]	; (82dd0 <pmc_sleep+0x254>)
   82d56:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82d5a:	6213      	str	r3, [r2, #32]
}
   82d5c:	bf00      	nop
		cpu_irq_enable();
   82d5e:	4b1e      	ldr	r3, [pc, #120]	; (82dd8 <pmc_sleep+0x25c>)
   82d60:	2201      	movs	r2, #1
   82d62:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82d64:	f3bf 8f5f 	dmb	sy
}
   82d68:	bf00      	nop
  __ASM volatile ("cpsie i");
   82d6a:	b662      	cpsie	i
}
   82d6c:	bf00      	nop
		pmc_enable_waitmode();
   82d6e:	4b20      	ldr	r3, [pc, #128]	; (82df0 <pmc_sleep+0x274>)
   82d70:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   82d72:	b672      	cpsid	i
}
   82d74:	bf00      	nop
  __ASM volatile ("dmb");
   82d76:	f3bf 8f5f 	dmb	sy
}
   82d7a:	bf00      	nop
		cpu_irq_disable();
   82d7c:	4b16      	ldr	r3, [pc, #88]	; (82dd8 <pmc_sleep+0x25c>)
   82d7e:	2200      	movs	r2, #0
   82d80:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   82d82:	6a3d      	ldr	r5, [r7, #32]
   82d84:	69fc      	ldr	r4, [r7, #28]
   82d86:	69b8      	ldr	r0, [r7, #24]
   82d88:	6979      	ldr	r1, [r7, #20]
   82d8a:	693a      	ldr	r2, [r7, #16]
   82d8c:	68fb      	ldr	r3, [r7, #12]
   82d8e:	66fd      	str	r5, [r7, #108]	; 0x6c
   82d90:	66bc      	str	r4, [r7, #104]	; 0x68
   82d92:	6678      	str	r0, [r7, #100]	; 0x64
   82d94:	6639      	str	r1, [r7, #96]	; 0x60
   82d96:	65fa      	str	r2, [r7, #92]	; 0x5c
   82d98:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   82d9a:	2300      	movs	r3, #0
   82d9c:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   82d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   82da0:	f003 0302 	and.w	r3, r3, #2
   82da4:	2b00      	cmp	r3, #0
   82da6:	d029      	beq.n	82dfc <pmc_sleep+0x280>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82da8:	4b09      	ldr	r3, [pc, #36]	; (82dd0 <pmc_sleep+0x254>)
   82daa:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82dac:	4a11      	ldr	r2, [pc, #68]	; (82df4 <pmc_sleep+0x278>)
   82dae:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82db0:	4907      	ldr	r1, [pc, #28]	; (82dd0 <pmc_sleep+0x254>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82db2:	4b11      	ldr	r3, [pc, #68]	; (82df8 <pmc_sleep+0x27c>)
   82db4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82db6:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82db8:	4b05      	ldr	r3, [pc, #20]	; (82dd0 <pmc_sleep+0x254>)
   82dba:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   82dbc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82dc0:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82dc4:	4a02      	ldr	r2, [pc, #8]	; (82dd0 <pmc_sleep+0x254>)
				| CKGR_MOR_KEY_PASSWD;
   82dc6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82dca:	6213      	str	r3, [r2, #32]
   82dcc:	e053      	b.n	82e76 <pmc_sleep+0x2fa>
   82dce:	bf00      	nop
   82dd0:	400e0400 	.word	0x400e0400
   82dd4:	e000ed00 	.word	0xe000ed00
   82dd8:	20000284 	.word	0x20000284
   82ddc:	20001328 	.word	0x20001328
   82de0:	400e0800 	.word	0x400e0800
   82de4:	400e0a00 	.word	0x400e0a00
   82de8:	00082981 	.word	0x00082981
   82dec:	000829b1 	.word	0x000829b1
   82df0:	00082acd 	.word	0x00082acd
   82df4:	fec8fffc 	.word	0xfec8fffc
   82df8:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   82dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   82dfe:	f003 0301 	and.w	r3, r3, #1
   82e02:	2b00      	cmp	r3, #0
   82e04:	d037      	beq.n	82e76 <pmc_sleep+0x2fa>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   82e06:	4b60      	ldr	r3, [pc, #384]	; (82f88 <pmc_sleep+0x40c>)
   82e08:	6a1b      	ldr	r3, [r3, #32]
   82e0a:	f003 0301 	and.w	r3, r3, #1
   82e0e:	2b00      	cmp	r3, #0
   82e10:	d112      	bne.n	82e38 <pmc_sleep+0x2bc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82e12:	4b5d      	ldr	r3, [pc, #372]	; (82f88 <pmc_sleep+0x40c>)
   82e14:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   82e16:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82e1a:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82e1e:	4a5a      	ldr	r2, [pc, #360]	; (82f88 <pmc_sleep+0x40c>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   82e20:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82e24:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82e28:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82e2a:	bf00      	nop
   82e2c:	4b56      	ldr	r3, [pc, #344]	; (82f88 <pmc_sleep+0x40c>)
   82e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82e30:	f003 0301 	and.w	r3, r3, #1
   82e34:	2b00      	cmp	r3, #0
   82e36:	d0f9      	beq.n	82e2c <pmc_sleep+0x2b0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   82e38:	4b53      	ldr	r3, [pc, #332]	; (82f88 <pmc_sleep+0x40c>)
   82e3a:	6a1b      	ldr	r3, [r3, #32]
   82e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82e40:	2b00      	cmp	r3, #0
   82e42:	d10e      	bne.n	82e62 <pmc_sleep+0x2e6>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82e44:	4b50      	ldr	r3, [pc, #320]	; (82f88 <pmc_sleep+0x40c>)
   82e46:	6a1b      	ldr	r3, [r3, #32]
   82e48:	4a4f      	ldr	r2, [pc, #316]	; (82f88 <pmc_sleep+0x40c>)
   82e4a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82e52:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   82e54:	bf00      	nop
   82e56:	4b4c      	ldr	r3, [pc, #304]	; (82f88 <pmc_sleep+0x40c>)
   82e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82e5e:	2b00      	cmp	r3, #0
   82e60:	d0f9      	beq.n	82e56 <pmc_sleep+0x2da>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82e62:	4b49      	ldr	r3, [pc, #292]	; (82f88 <pmc_sleep+0x40c>)
   82e64:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   82e66:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82e6a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82e6e:	4a46      	ldr	r2, [pc, #280]	; (82f88 <pmc_sleep+0x40c>)
					| CKGR_MOR_KEY_PASSWD;
   82e70:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82e74:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   82e76:	6eba      	ldr	r2, [r7, #104]	; 0x68
   82e78:	4b44      	ldr	r3, [pc, #272]	; (82f8c <pmc_sleep+0x410>)
   82e7a:	4013      	ands	r3, r2
   82e7c:	2b00      	cmp	r3, #0
   82e7e:	d008      	beq.n	82e92 <pmc_sleep+0x316>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   82e80:	4a41      	ldr	r2, [pc, #260]	; (82f88 <pmc_sleep+0x40c>)
   82e82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   82e84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82e88:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   82e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   82e8c:	f043 0302 	orr.w	r3, r3, #2
   82e90:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   82e92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   82e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82e98:	2b00      	cmp	r3, #0
   82e9a:	d006      	beq.n	82eaa <pmc_sleep+0x32e>
		PMC->CKGR_UCKR = pll1_setting;
   82e9c:	4a3a      	ldr	r2, [pc, #232]	; (82f88 <pmc_sleep+0x40c>)
   82e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   82ea0:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   82ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   82ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82ea8:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   82eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82eac:	f003 0303 	and.w	r3, r3, #3
   82eb0:	2b02      	cmp	r3, #2
   82eb2:	d002      	beq.n	82eba <pmc_sleep+0x33e>
   82eb4:	2b03      	cmp	r3, #3
   82eb6:	d008      	beq.n	82eca <pmc_sleep+0x34e>
   82eb8:	e00f      	b.n	82eda <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   82eba:	bf00      	nop
   82ebc:	4b32      	ldr	r3, [pc, #200]	; (82f88 <pmc_sleep+0x40c>)
   82ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82ec0:	f003 0302 	and.w	r3, r3, #2
   82ec4:	2b00      	cmp	r3, #0
   82ec6:	d0f9      	beq.n	82ebc <pmc_sleep+0x340>
		break;
   82ec8:	e007      	b.n	82eda <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   82eca:	bf00      	nop
   82ecc:	4b2e      	ldr	r3, [pc, #184]	; (82f88 <pmc_sleep+0x40c>)
   82ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82ed4:	2b00      	cmp	r3, #0
   82ed6:	d0f9      	beq.n	82ecc <pmc_sleep+0x350>
		break;
   82ed8:	bf00      	nop
	mckr = PMC->PMC_MCKR;
   82eda:	4b2b      	ldr	r3, [pc, #172]	; (82f88 <pmc_sleep+0x40c>)
   82edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ede:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   82ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   82ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   82ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82ee8:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   82eec:	4926      	ldr	r1, [pc, #152]	; (82f88 <pmc_sleep+0x40c>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   82eee:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   82ef0:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82ef2:	bf00      	nop
   82ef4:	4b24      	ldr	r3, [pc, #144]	; (82f88 <pmc_sleep+0x40c>)
   82ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82ef8:	f003 0308 	and.w	r3, r3, #8
   82efc:	2b00      	cmp	r3, #0
   82efe:	d0f9      	beq.n	82ef4 <pmc_sleep+0x378>
	EFC0->EEFC_FMR = fmr_setting;
   82f00:	4a23      	ldr	r2, [pc, #140]	; (82f90 <pmc_sleep+0x414>)
   82f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   82f04:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   82f06:	4a23      	ldr	r2, [pc, #140]	; (82f94 <pmc_sleep+0x418>)
   82f08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   82f0a:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   82f0c:	4a1e      	ldr	r2, [pc, #120]	; (82f88 <pmc_sleep+0x40c>)
   82f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82f10:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82f12:	bf00      	nop
   82f14:	4b1c      	ldr	r3, [pc, #112]	; (82f88 <pmc_sleep+0x40c>)
   82f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82f18:	f003 0308 	and.w	r3, r3, #8
   82f1c:	2b00      	cmp	r3, #0
   82f1e:	d0f9      	beq.n	82f14 <pmc_sleep+0x398>
	while (!(PMC->PMC_SR & pll_sr));
   82f20:	bf00      	nop
   82f22:	4b19      	ldr	r3, [pc, #100]	; (82f88 <pmc_sleep+0x40c>)
   82f24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   82f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   82f28:	4013      	ands	r3, r2
   82f2a:	2b00      	cmp	r3, #0
   82f2c:	d0f9      	beq.n	82f22 <pmc_sleep+0x3a6>
}
   82f2e:	bf00      	nop
		b_is_sleep_clock_used = false;
   82f30:	4b19      	ldr	r3, [pc, #100]	; (82f98 <pmc_sleep+0x41c>)
   82f32:	2200      	movs	r2, #0
   82f34:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   82f36:	4b19      	ldr	r3, [pc, #100]	; (82f9c <pmc_sleep+0x420>)
   82f38:	681b      	ldr	r3, [r3, #0]
   82f3a:	2b00      	cmp	r3, #0
   82f3c:	d005      	beq.n	82f4a <pmc_sleep+0x3ce>
			callback_clocks_restored();
   82f3e:	4b17      	ldr	r3, [pc, #92]	; (82f9c <pmc_sleep+0x420>)
   82f40:	681b      	ldr	r3, [r3, #0]
   82f42:	4798      	blx	r3
			callback_clocks_restored = NULL;
   82f44:	4b15      	ldr	r3, [pc, #84]	; (82f9c <pmc_sleep+0x420>)
   82f46:	2200      	movs	r2, #0
   82f48:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
   82f4a:	4b15      	ldr	r3, [pc, #84]	; (82fa0 <pmc_sleep+0x424>)
   82f4c:	2201      	movs	r2, #1
   82f4e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82f50:	f3bf 8f5f 	dmb	sy
}
   82f54:	bf00      	nop
  __ASM volatile ("cpsie i");
   82f56:	b662      	cpsie	i
}
   82f58:	bf00      	nop
		break;
   82f5a:	e010      	b.n	82f7e <pmc_sleep+0x402>
		SCB->SCR |= SCR_SLEEPDEEP;
   82f5c:	4b11      	ldr	r3, [pc, #68]	; (82fa4 <pmc_sleep+0x428>)
   82f5e:	691b      	ldr	r3, [r3, #16]
   82f60:	4a10      	ldr	r2, [pc, #64]	; (82fa4 <pmc_sleep+0x428>)
   82f62:	f043 0304 	orr.w	r3, r3, #4
   82f66:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   82f68:	4b0d      	ldr	r3, [pc, #52]	; (82fa0 <pmc_sleep+0x424>)
   82f6a:	2201      	movs	r2, #1
   82f6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82f6e:	f3bf 8f5f 	dmb	sy
}
   82f72:	bf00      	nop
  __ASM volatile ("cpsie i");
   82f74:	b662      	cpsie	i
}
   82f76:	bf00      	nop
  __ASM volatile ("wfe");
   82f78:	bf20      	wfe
}
   82f7a:	bf00      	nop
		break;
   82f7c:	bf00      	nop
}
   82f7e:	bf00      	nop
   82f80:	3770      	adds	r7, #112	; 0x70
   82f82:	46bd      	mov	sp, r7
   82f84:	bdb0      	pop	{r4, r5, r7, pc}
   82f86:	bf00      	nop
   82f88:	400e0400 	.word	0x400e0400
   82f8c:	07ff0000 	.word	0x07ff0000
   82f90:	400e0800 	.word	0x400e0800
   82f94:	400e0a00 	.word	0x400e0a00
   82f98:	20001328 	.word	0x20001328
   82f9c:	2000132c 	.word	0x2000132c
   82fa0:	20000284 	.word	0x20000284
   82fa4:	e000ed00 	.word	0xe000ed00

00082fa8 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   82fa8:	b480      	push	{r7}
   82faa:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   82fac:	4b08      	ldr	r3, [pc, #32]	; (82fd0 <pmc_is_wakeup_clocks_restored+0x28>)
   82fae:	781b      	ldrb	r3, [r3, #0]
   82fb0:	b2db      	uxtb	r3, r3
   82fb2:	2b00      	cmp	r3, #0
   82fb4:	bf14      	ite	ne
   82fb6:	2301      	movne	r3, #1
   82fb8:	2300      	moveq	r3, #0
   82fba:	b2db      	uxtb	r3, r3
   82fbc:	f083 0301 	eor.w	r3, r3, #1
   82fc0:	b2db      	uxtb	r3, r3
   82fc2:	f003 0301 	and.w	r3, r3, #1
   82fc6:	b2db      	uxtb	r3, r3
}
   82fc8:	4618      	mov	r0, r3
   82fca:	46bd      	mov	sp, r7
   82fcc:	bc80      	pop	{r7}
   82fce:	4770      	bx	lr
   82fd0:	20001328 	.word	0x20001328

00082fd4 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   82fd4:	b480      	push	{r7}
   82fd6:	b085      	sub	sp, #20
   82fd8:	af00      	add	r7, sp, #0
   82fda:	60f8      	str	r0, [r7, #12]
   82fdc:	60b9      	str	r1, [r7, #8]
   82fde:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   82fe0:	68f9      	ldr	r1, [r7, #12]
   82fe2:	68ba      	ldr	r2, [r7, #8]
   82fe4:	4613      	mov	r3, r2
   82fe6:	009b      	lsls	r3, r3, #2
   82fe8:	4413      	add	r3, r2
   82fea:	009b      	lsls	r3, r3, #2
   82fec:	440b      	add	r3, r1
   82fee:	3370      	adds	r3, #112	; 0x70
   82ff0:	687a      	ldr	r2, [r7, #4]
   82ff2:	601a      	str	r2, [r3, #0]
}
   82ff4:	bf00      	nop
   82ff6:	3714      	adds	r7, #20
   82ff8:	46bd      	mov	sp, r7
   82ffa:	bc80      	pop	{r7}
   82ffc:	4770      	bx	lr

00082ffe <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   82ffe:	b480      	push	{r7}
   83000:	b085      	sub	sp, #20
   83002:	af00      	add	r7, sp, #0
   83004:	60f8      	str	r0, [r7, #12]
   83006:	60b9      	str	r1, [r7, #8]
   83008:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   8300a:	68f9      	ldr	r1, [r7, #12]
   8300c:	68ba      	ldr	r2, [r7, #8]
   8300e:	4613      	mov	r3, r2
   83010:	009b      	lsls	r3, r3, #2
   83012:	4413      	add	r3, r2
   83014:	009b      	lsls	r3, r3, #2
   83016:	440b      	add	r3, r1
   83018:	3374      	adds	r3, #116	; 0x74
   8301a:	687a      	ldr	r2, [r7, #4]
   8301c:	601a      	str	r2, [r3, #0]
}
   8301e:	bf00      	nop
   83020:	3714      	adds	r7, #20
   83022:	46bd      	mov	sp, r7
   83024:	bc80      	pop	{r7}
   83026:	4770      	bx	lr

00083028 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   83028:	b480      	push	{r7}
   8302a:	b085      	sub	sp, #20
   8302c:	af00      	add	r7, sp, #0
   8302e:	60f8      	str	r0, [r7, #12]
   83030:	60b9      	str	r1, [r7, #8]
   83032:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   83034:	68f9      	ldr	r1, [r7, #12]
   83036:	68ba      	ldr	r2, [r7, #8]
   83038:	4613      	mov	r3, r2
   8303a:	009b      	lsls	r3, r3, #2
   8303c:	4413      	add	r3, r2
   8303e:	009b      	lsls	r3, r3, #2
   83040:	440b      	add	r3, r1
   83042:	3378      	adds	r3, #120	; 0x78
   83044:	687a      	ldr	r2, [r7, #4]
   83046:	601a      	str	r2, [r3, #0]
}
   83048:	bf00      	nop
   8304a:	3714      	adds	r7, #20
   8304c:	46bd      	mov	sp, r7
   8304e:	bc80      	pop	{r7}
   83050:	4770      	bx	lr

00083052 <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   83052:	b480      	push	{r7}
   83054:	b085      	sub	sp, #20
   83056:	af00      	add	r7, sp, #0
   83058:	60f8      	str	r0, [r7, #12]
   8305a:	60b9      	str	r1, [r7, #8]
   8305c:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   8305e:	68f9      	ldr	r1, [r7, #12]
   83060:	68ba      	ldr	r2, [r7, #8]
   83062:	4613      	mov	r3, r2
   83064:	009b      	lsls	r3, r3, #2
   83066:	4413      	add	r3, r2
   83068:	009b      	lsls	r3, r3, #2
   8306a:	440b      	add	r3, r1
   8306c:	3380      	adds	r3, #128	; 0x80
   8306e:	687a      	ldr	r2, [r7, #4]
   83070:	601a      	str	r2, [r3, #0]
}
   83072:	bf00      	nop
   83074:	3714      	adds	r7, #20
   83076:	46bd      	mov	sp, r7
   83078:	bc80      	pop	{r7}
   8307a:	4770      	bx	lr

0008307c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8307c:	b580      	push	{r7, lr}
   8307e:	b082      	sub	sp, #8
   83080:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83082:	4b1e      	ldr	r3, [pc, #120]	; (830fc <Reset_Handler+0x80>)
   83084:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83086:	4b1e      	ldr	r3, [pc, #120]	; (83100 <Reset_Handler+0x84>)
   83088:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8308a:	687a      	ldr	r2, [r7, #4]
   8308c:	683b      	ldr	r3, [r7, #0]
   8308e:	429a      	cmp	r2, r3
   83090:	d00c      	beq.n	830ac <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83092:	e007      	b.n	830a4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83094:	687a      	ldr	r2, [r7, #4]
   83096:	1d13      	adds	r3, r2, #4
   83098:	607b      	str	r3, [r7, #4]
   8309a:	683b      	ldr	r3, [r7, #0]
   8309c:	1d19      	adds	r1, r3, #4
   8309e:	6039      	str	r1, [r7, #0]
   830a0:	6812      	ldr	r2, [r2, #0]
   830a2:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   830a4:	683b      	ldr	r3, [r7, #0]
   830a6:	4a17      	ldr	r2, [pc, #92]	; (83104 <Reset_Handler+0x88>)
   830a8:	4293      	cmp	r3, r2
   830aa:	d3f3      	bcc.n	83094 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   830ac:	4b16      	ldr	r3, [pc, #88]	; (83108 <Reset_Handler+0x8c>)
   830ae:	603b      	str	r3, [r7, #0]
   830b0:	e004      	b.n	830bc <Reset_Handler+0x40>
		*pDest++ = 0;
   830b2:	683b      	ldr	r3, [r7, #0]
   830b4:	1d1a      	adds	r2, r3, #4
   830b6:	603a      	str	r2, [r7, #0]
   830b8:	2200      	movs	r2, #0
   830ba:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   830bc:	683b      	ldr	r3, [r7, #0]
   830be:	4a13      	ldr	r2, [pc, #76]	; (8310c <Reset_Handler+0x90>)
   830c0:	4293      	cmp	r3, r2
   830c2:	d3f6      	bcc.n	830b2 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   830c4:	4b12      	ldr	r3, [pc, #72]	; (83110 <Reset_Handler+0x94>)
   830c6:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   830c8:	687b      	ldr	r3, [r7, #4]
   830ca:	4a12      	ldr	r2, [pc, #72]	; (83114 <Reset_Handler+0x98>)
   830cc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   830d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   830d4:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   830d6:	687b      	ldr	r3, [r7, #4]
   830d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   830dc:	d309      	bcc.n	830f2 <Reset_Handler+0x76>
   830de:	687b      	ldr	r3, [r7, #4]
   830e0:	4a0d      	ldr	r2, [pc, #52]	; (83118 <Reset_Handler+0x9c>)
   830e2:	4293      	cmp	r3, r2
   830e4:	d205      	bcs.n	830f2 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   830e6:	4b0b      	ldr	r3, [pc, #44]	; (83114 <Reset_Handler+0x98>)
   830e8:	689b      	ldr	r3, [r3, #8]
   830ea:	4a0a      	ldr	r2, [pc, #40]	; (83114 <Reset_Handler+0x98>)
   830ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   830f0:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   830f2:	4b0a      	ldr	r3, [pc, #40]	; (8311c <Reset_Handler+0xa0>)
   830f4:	4798      	blx	r3

	/* Branch to main function */
	main();
   830f6:	4b0a      	ldr	r3, [pc, #40]	; (83120 <Reset_Handler+0xa4>)
   830f8:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   830fa:	e7fe      	b.n	830fa <Reset_Handler+0x7e>
   830fc:	0008d90c 	.word	0x0008d90c
   83100:	20000000 	.word	0x20000000
   83104:	20000df0 	.word	0x20000df0
   83108:	20000df0 	.word	0x20000df0
   8310c:	20001870 	.word	0x20001870
   83110:	00080000 	.word	0x00080000
   83114:	e000ed00 	.word	0xe000ed00
   83118:	20004000 	.word	0x20004000
   8311c:	00086785 	.word	0x00086785
   83120:	00080a55 	.word	0x00080a55

00083124 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   83124:	b480      	push	{r7}
   83126:	b085      	sub	sp, #20
   83128:	af00      	add	r7, sp, #0
   8312a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   8312c:	4b10      	ldr	r3, [pc, #64]	; (83170 <_sbrk+0x4c>)
   8312e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   83130:	4b10      	ldr	r3, [pc, #64]	; (83174 <_sbrk+0x50>)
   83132:	681b      	ldr	r3, [r3, #0]
   83134:	2b00      	cmp	r3, #0
   83136:	d102      	bne.n	8313e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   83138:	4b0e      	ldr	r3, [pc, #56]	; (83174 <_sbrk+0x50>)
   8313a:	4a0f      	ldr	r2, [pc, #60]	; (83178 <_sbrk+0x54>)
   8313c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8313e:	4b0d      	ldr	r3, [pc, #52]	; (83174 <_sbrk+0x50>)
   83140:	681b      	ldr	r3, [r3, #0]
   83142:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   83144:	68ba      	ldr	r2, [r7, #8]
   83146:	687b      	ldr	r3, [r7, #4]
   83148:	4413      	add	r3, r2
   8314a:	68fa      	ldr	r2, [r7, #12]
   8314c:	429a      	cmp	r2, r3
   8314e:	da02      	bge.n	83156 <_sbrk+0x32>
		return (caddr_t) -1;	
   83150:	f04f 33ff 	mov.w	r3, #4294967295
   83154:	e006      	b.n	83164 <_sbrk+0x40>
	}

	heap += incr;
   83156:	4b07      	ldr	r3, [pc, #28]	; (83174 <_sbrk+0x50>)
   83158:	681a      	ldr	r2, [r3, #0]
   8315a:	687b      	ldr	r3, [r7, #4]
   8315c:	4413      	add	r3, r2
   8315e:	4a05      	ldr	r2, [pc, #20]	; (83174 <_sbrk+0x50>)
   83160:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   83162:	68bb      	ldr	r3, [r7, #8]
}
   83164:	4618      	mov	r0, r3
   83166:	3714      	adds	r7, #20
   83168:	46bd      	mov	sp, r7
   8316a:	bc80      	pop	{r7}
   8316c:	4770      	bx	lr
   8316e:	bf00      	nop
   83170:	20081ffc 	.word	0x20081ffc
   83174:	20001330 	.word	0x20001330
   83178:	20080400 	.word	0x20080400

0008317c <_close>:
{
	return -1;
}

extern int _close(int file)
{
   8317c:	b480      	push	{r7}
   8317e:	b083      	sub	sp, #12
   83180:	af00      	add	r7, sp, #0
   83182:	6078      	str	r0, [r7, #4]
	return -1;
   83184:	f04f 33ff 	mov.w	r3, #4294967295
}
   83188:	4618      	mov	r0, r3
   8318a:	370c      	adds	r7, #12
   8318c:	46bd      	mov	sp, r7
   8318e:	bc80      	pop	{r7}
   83190:	4770      	bx	lr

00083192 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   83192:	b480      	push	{r7}
   83194:	b083      	sub	sp, #12
   83196:	af00      	add	r7, sp, #0
   83198:	6078      	str	r0, [r7, #4]
   8319a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   8319c:	683b      	ldr	r3, [r7, #0]
   8319e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   831a2:	605a      	str	r2, [r3, #4]

	return 0;
   831a4:	2300      	movs	r3, #0
}
   831a6:	4618      	mov	r0, r3
   831a8:	370c      	adds	r7, #12
   831aa:	46bd      	mov	sp, r7
   831ac:	bc80      	pop	{r7}
   831ae:	4770      	bx	lr

000831b0 <_isatty>:

extern int _isatty(int file)
{
   831b0:	b480      	push	{r7}
   831b2:	b083      	sub	sp, #12
   831b4:	af00      	add	r7, sp, #0
   831b6:	6078      	str	r0, [r7, #4]
	return 1;
   831b8:	2301      	movs	r3, #1
}
   831ba:	4618      	mov	r0, r3
   831bc:	370c      	adds	r7, #12
   831be:	46bd      	mov	sp, r7
   831c0:	bc80      	pop	{r7}
   831c2:	4770      	bx	lr

000831c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   831c4:	b480      	push	{r7}
   831c6:	b085      	sub	sp, #20
   831c8:	af00      	add	r7, sp, #0
   831ca:	60f8      	str	r0, [r7, #12]
   831cc:	60b9      	str	r1, [r7, #8]
   831ce:	607a      	str	r2, [r7, #4]
	return 0;
   831d0:	2300      	movs	r3, #0
}
   831d2:	4618      	mov	r0, r3
   831d4:	3714      	adds	r7, #20
   831d6:	46bd      	mov	sp, r7
   831d8:	bc80      	pop	{r7}
   831da:	4770      	bx	lr

000831dc <_exit>:

extern void _exit(int status)
{
   831dc:	b580      	push	{r7, lr}
   831de:	b082      	sub	sp, #8
   831e0:	af00      	add	r7, sp, #0
   831e2:	6078      	str	r0, [r7, #4]
	printf("Exiting with status %d.\n", status);
   831e4:	6879      	ldr	r1, [r7, #4]
   831e6:	4802      	ldr	r0, [pc, #8]	; (831f0 <_exit+0x14>)
   831e8:	4b02      	ldr	r3, [pc, #8]	; (831f4 <_exit+0x18>)
   831ea:	4798      	blx	r3

	for (;;);
   831ec:	e7fe      	b.n	831ec <_exit+0x10>
   831ee:	bf00      	nop
   831f0:	0008d470 	.word	0x0008d470
   831f4:	000867cd 	.word	0x000867cd

000831f8 <_kill>:
}

extern void _kill(int pid, int sig)
{
   831f8:	b480      	push	{r7}
   831fa:	b083      	sub	sp, #12
   831fc:	af00      	add	r7, sp, #0
   831fe:	6078      	str	r0, [r7, #4]
   83200:	6039      	str	r1, [r7, #0]
	return;
   83202:	bf00      	nop
}
   83204:	370c      	adds	r7, #12
   83206:	46bd      	mov	sp, r7
   83208:	bc80      	pop	{r7}
   8320a:	4770      	bx	lr

0008320c <_getpid>:

extern int _getpid(void)
{
   8320c:	b480      	push	{r7}
   8320e:	af00      	add	r7, sp, #0
	return -1;
   83210:	f04f 33ff 	mov.w	r3, #4294967295
}
   83214:	4618      	mov	r0, r3
   83216:	46bd      	mov	sp, r7
   83218:	bc80      	pop	{r7}
   8321a:	4770      	bx	lr

0008321c <osc_enable>:
{
   8321c:	b580      	push	{r7, lr}
   8321e:	b082      	sub	sp, #8
   83220:	af00      	add	r7, sp, #0
   83222:	6078      	str	r0, [r7, #4]
   83224:	687b      	ldr	r3, [r7, #4]
   83226:	2b07      	cmp	r3, #7
   83228:	d82e      	bhi.n	83288 <osc_enable+0x6c>
   8322a:	a201      	add	r2, pc, #4	; (adr r2, 83230 <osc_enable+0x14>)
   8322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83230:	00083287 	.word	0x00083287
   83234:	00083251 	.word	0x00083251
   83238:	00083259 	.word	0x00083259
   8323c:	00083261 	.word	0x00083261
   83240:	00083269 	.word	0x00083269
   83244:	00083271 	.word	0x00083271
   83248:	00083279 	.word	0x00083279
   8324c:	00083281 	.word	0x00083281
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83250:	2000      	movs	r0, #0
   83252:	4b0f      	ldr	r3, [pc, #60]	; (83290 <osc_enable+0x74>)
   83254:	4798      	blx	r3
		break;
   83256:	e017      	b.n	83288 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   83258:	2001      	movs	r0, #1
   8325a:	4b0d      	ldr	r3, [pc, #52]	; (83290 <osc_enable+0x74>)
   8325c:	4798      	blx	r3
		break;
   8325e:	e013      	b.n	83288 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83260:	2000      	movs	r0, #0
   83262:	4b0c      	ldr	r3, [pc, #48]	; (83294 <osc_enable+0x78>)
   83264:	4798      	blx	r3
		break;
   83266:	e00f      	b.n	83288 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83268:	2010      	movs	r0, #16
   8326a:	4b0a      	ldr	r3, [pc, #40]	; (83294 <osc_enable+0x78>)
   8326c:	4798      	blx	r3
		break;
   8326e:	e00b      	b.n	83288 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83270:	2020      	movs	r0, #32
   83272:	4b08      	ldr	r3, [pc, #32]	; (83294 <osc_enable+0x78>)
   83274:	4798      	blx	r3
		break;
   83276:	e007      	b.n	83288 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   83278:	203e      	movs	r0, #62	; 0x3e
   8327a:	4b07      	ldr	r3, [pc, #28]	; (83298 <osc_enable+0x7c>)
   8327c:	4798      	blx	r3
		break;
   8327e:	e003      	b.n	83288 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   83280:	4b06      	ldr	r3, [pc, #24]	; (8329c <osc_enable+0x80>)
   83282:	4798      	blx	r3
		break;
   83284:	e000      	b.n	83288 <osc_enable+0x6c>
		break;
   83286:	bf00      	nop
}
   83288:	bf00      	nop
   8328a:	3708      	adds	r7, #8
   8328c:	46bd      	mov	sp, r7
   8328e:	bd80      	pop	{r7, pc}
   83290:	00082795 	.word	0x00082795
   83294:	00082801 	.word	0x00082801
   83298:	00082875 	.word	0x00082875
   8329c:	000828c5 	.word	0x000828c5

000832a0 <osc_is_ready>:
{
   832a0:	b580      	push	{r7, lr}
   832a2:	b082      	sub	sp, #8
   832a4:	af00      	add	r7, sp, #0
   832a6:	6078      	str	r0, [r7, #4]
   832a8:	687b      	ldr	r3, [r7, #4]
   832aa:	2b07      	cmp	r3, #7
   832ac:	d82f      	bhi.n	8330e <osc_is_ready+0x6e>
   832ae:	a201      	add	r2, pc, #4	; (adr r2, 832b4 <osc_is_ready+0x14>)
   832b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   832b4:	000832d5 	.word	0x000832d5
   832b8:	000832d9 	.word	0x000832d9
   832bc:	000832d9 	.word	0x000832d9
   832c0:	000832eb 	.word	0x000832eb
   832c4:	000832eb 	.word	0x000832eb
   832c8:	000832eb 	.word	0x000832eb
   832cc:	000832fd 	.word	0x000832fd
   832d0:	000832fd 	.word	0x000832fd
		return 1;
   832d4:	2301      	movs	r3, #1
   832d6:	e01b      	b.n	83310 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   832d8:	4b0f      	ldr	r3, [pc, #60]	; (83318 <osc_is_ready+0x78>)
   832da:	4798      	blx	r3
   832dc:	4603      	mov	r3, r0
   832de:	2b00      	cmp	r3, #0
   832e0:	bf14      	ite	ne
   832e2:	2301      	movne	r3, #1
   832e4:	2300      	moveq	r3, #0
   832e6:	b2db      	uxtb	r3, r3
   832e8:	e012      	b.n	83310 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   832ea:	4b0c      	ldr	r3, [pc, #48]	; (8331c <osc_is_ready+0x7c>)
   832ec:	4798      	blx	r3
   832ee:	4603      	mov	r3, r0
   832f0:	2b00      	cmp	r3, #0
   832f2:	bf14      	ite	ne
   832f4:	2301      	movne	r3, #1
   832f6:	2300      	moveq	r3, #0
   832f8:	b2db      	uxtb	r3, r3
   832fa:	e009      	b.n	83310 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   832fc:	4b08      	ldr	r3, [pc, #32]	; (83320 <osc_is_ready+0x80>)
   832fe:	4798      	blx	r3
   83300:	4603      	mov	r3, r0
   83302:	2b00      	cmp	r3, #0
   83304:	bf14      	ite	ne
   83306:	2301      	movne	r3, #1
   83308:	2300      	moveq	r3, #0
   8330a:	b2db      	uxtb	r3, r3
   8330c:	e000      	b.n	83310 <osc_is_ready+0x70>
	return 0;
   8330e:	2300      	movs	r3, #0
}
   83310:	4618      	mov	r0, r3
   83312:	3708      	adds	r7, #8
   83314:	46bd      	mov	sp, r7
   83316:	bd80      	pop	{r7, pc}
   83318:	000827cd 	.word	0x000827cd
   8331c:	0008285d 	.word	0x0008285d
   83320:	00082911 	.word	0x00082911

00083324 <osc_get_rate>:
{
   83324:	b480      	push	{r7}
   83326:	b083      	sub	sp, #12
   83328:	af00      	add	r7, sp, #0
   8332a:	6078      	str	r0, [r7, #4]
   8332c:	687b      	ldr	r3, [r7, #4]
   8332e:	2b07      	cmp	r3, #7
   83330:	d823      	bhi.n	8337a <osc_get_rate+0x56>
   83332:	a201      	add	r2, pc, #4	; (adr r2, 83338 <osc_get_rate+0x14>)
   83334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83338:	00083359 	.word	0x00083359
   8333c:	0008335f 	.word	0x0008335f
   83340:	00083363 	.word	0x00083363
   83344:	00083367 	.word	0x00083367
   83348:	0008336b 	.word	0x0008336b
   8334c:	0008336f 	.word	0x0008336f
   83350:	00083373 	.word	0x00083373
   83354:	00083377 	.word	0x00083377
		return OSC_SLCK_32K_RC_HZ;
   83358:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8335c:	e00e      	b.n	8337c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   8335e:	2300      	movs	r3, #0
   83360:	e00c      	b.n	8337c <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   83362:	2300      	movs	r3, #0
   83364:	e00a      	b.n	8337c <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   83366:	4b08      	ldr	r3, [pc, #32]	; (83388 <osc_get_rate+0x64>)
   83368:	e008      	b.n	8337c <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   8336a:	4b08      	ldr	r3, [pc, #32]	; (8338c <osc_get_rate+0x68>)
   8336c:	e006      	b.n	8337c <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   8336e:	4b08      	ldr	r3, [pc, #32]	; (83390 <osc_get_rate+0x6c>)
   83370:	e004      	b.n	8337c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   83372:	4b07      	ldr	r3, [pc, #28]	; (83390 <osc_get_rate+0x6c>)
   83374:	e002      	b.n	8337c <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   83376:	4b06      	ldr	r3, [pc, #24]	; (83390 <osc_get_rate+0x6c>)
   83378:	e000      	b.n	8337c <osc_get_rate+0x58>
	return 0;
   8337a:	2300      	movs	r3, #0
}
   8337c:	4618      	mov	r0, r3
   8337e:	370c      	adds	r7, #12
   83380:	46bd      	mov	sp, r7
   83382:	bc80      	pop	{r7}
   83384:	4770      	bx	lr
   83386:	bf00      	nop
   83388:	003d0900 	.word	0x003d0900
   8338c:	007a1200 	.word	0x007a1200
   83390:	00b71b00 	.word	0x00b71b00

00083394 <osc_wait_ready>:
{
   83394:	b580      	push	{r7, lr}
   83396:	b082      	sub	sp, #8
   83398:	af00      	add	r7, sp, #0
   8339a:	4603      	mov	r3, r0
   8339c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8339e:	bf00      	nop
   833a0:	79fb      	ldrb	r3, [r7, #7]
   833a2:	4618      	mov	r0, r3
   833a4:	4b06      	ldr	r3, [pc, #24]	; (833c0 <osc_wait_ready+0x2c>)
   833a6:	4798      	blx	r3
   833a8:	4603      	mov	r3, r0
   833aa:	f083 0301 	eor.w	r3, r3, #1
   833ae:	b2db      	uxtb	r3, r3
   833b0:	2b00      	cmp	r3, #0
   833b2:	d1f5      	bne.n	833a0 <osc_wait_ready+0xc>
}
   833b4:	bf00      	nop
   833b6:	bf00      	nop
   833b8:	3708      	adds	r7, #8
   833ba:	46bd      	mov	sp, r7
   833bc:	bd80      	pop	{r7, pc}
   833be:	bf00      	nop
   833c0:	000832a1 	.word	0x000832a1

000833c4 <pll_config_init>:
{
   833c4:	b580      	push	{r7, lr}
   833c6:	b086      	sub	sp, #24
   833c8:	af00      	add	r7, sp, #0
   833ca:	60f8      	str	r0, [r7, #12]
   833cc:	607a      	str	r2, [r7, #4]
   833ce:	603b      	str	r3, [r7, #0]
   833d0:	460b      	mov	r3, r1
   833d2:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   833d4:	687b      	ldr	r3, [r7, #4]
   833d6:	2b00      	cmp	r3, #0
   833d8:	d107      	bne.n	833ea <pll_config_init+0x26>
   833da:	683b      	ldr	r3, [r7, #0]
   833dc:	2b00      	cmp	r3, #0
   833de:	d104      	bne.n	833ea <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   833e0:	68fb      	ldr	r3, [r7, #12]
   833e2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   833e6:	601a      	str	r2, [r3, #0]
   833e8:	e01a      	b.n	83420 <pll_config_init+0x5c>
		vco_hz = osc_get_rate(e_src) / ul_div;
   833ea:	7afb      	ldrb	r3, [r7, #11]
   833ec:	4618      	mov	r0, r3
   833ee:	4b0e      	ldr	r3, [pc, #56]	; (83428 <pll_config_init+0x64>)
   833f0:	4798      	blx	r3
   833f2:	4602      	mov	r2, r0
   833f4:	687b      	ldr	r3, [r7, #4]
   833f6:	fbb2 f3f3 	udiv	r3, r2, r3
   833fa:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   833fc:	697b      	ldr	r3, [r7, #20]
   833fe:	683a      	ldr	r2, [r7, #0]
   83400:	fb02 f303 	mul.w	r3, r2, r3
   83404:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83406:	683b      	ldr	r3, [r7, #0]
   83408:	3b01      	subs	r3, #1
   8340a:	041a      	lsls	r2, r3, #16
   8340c:	4b07      	ldr	r3, [pc, #28]	; (8342c <pll_config_init+0x68>)
   8340e:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   83410:	687a      	ldr	r2, [r7, #4]
   83412:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83414:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   83416:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8341a:	68fb      	ldr	r3, [r7, #12]
   8341c:	601a      	str	r2, [r3, #0]
}
   8341e:	bf00      	nop
   83420:	bf00      	nop
   83422:	3718      	adds	r7, #24
   83424:	46bd      	mov	sp, r7
   83426:	bd80      	pop	{r7, pc}
   83428:	00083325 	.word	0x00083325
   8342c:	07ff0000 	.word	0x07ff0000

00083430 <pll_enable>:
{
   83430:	b580      	push	{r7, lr}
   83432:	b082      	sub	sp, #8
   83434:	af00      	add	r7, sp, #0
   83436:	6078      	str	r0, [r7, #4]
   83438:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   8343a:	683b      	ldr	r3, [r7, #0]
   8343c:	2b00      	cmp	r3, #0
   8343e:	d108      	bne.n	83452 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   83440:	4b09      	ldr	r3, [pc, #36]	; (83468 <pll_enable+0x38>)
   83442:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83444:	687b      	ldr	r3, [r7, #4]
   83446:	681b      	ldr	r3, [r3, #0]
   83448:	4a08      	ldr	r2, [pc, #32]	; (8346c <pll_enable+0x3c>)
   8344a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8344e:	6293      	str	r3, [r2, #40]	; 0x28
}
   83450:	e005      	b.n	8345e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   83452:	687b      	ldr	r3, [r7, #4]
   83454:	681b      	ldr	r3, [r3, #0]
   83456:	4a05      	ldr	r2, [pc, #20]	; (8346c <pll_enable+0x3c>)
   83458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8345c:	61d3      	str	r3, [r2, #28]
}
   8345e:	bf00      	nop
   83460:	3708      	adds	r7, #8
   83462:	46bd      	mov	sp, r7
   83464:	bd80      	pop	{r7, pc}
   83466:	bf00      	nop
   83468:	00082981 	.word	0x00082981
   8346c:	400e0400 	.word	0x400e0400

00083470 <pll_is_locked>:
{
   83470:	b580      	push	{r7, lr}
   83472:	b082      	sub	sp, #8
   83474:	af00      	add	r7, sp, #0
   83476:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   83478:	687b      	ldr	r3, [r7, #4]
   8347a:	2b00      	cmp	r3, #0
   8347c:	d103      	bne.n	83486 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8347e:	4b05      	ldr	r3, [pc, #20]	; (83494 <pll_is_locked+0x24>)
   83480:	4798      	blx	r3
   83482:	4603      	mov	r3, r0
   83484:	e002      	b.n	8348c <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   83486:	4b04      	ldr	r3, [pc, #16]	; (83498 <pll_is_locked+0x28>)
   83488:	4798      	blx	r3
   8348a:	4603      	mov	r3, r0
}
   8348c:	4618      	mov	r0, r3
   8348e:	3708      	adds	r7, #8
   83490:	46bd      	mov	sp, r7
   83492:	bd80      	pop	{r7, pc}
   83494:	00082999 	.word	0x00082999
   83498:	000829cd 	.word	0x000829cd

0008349c <pll_enable_source>:
{
   8349c:	b580      	push	{r7, lr}
   8349e:	b082      	sub	sp, #8
   834a0:	af00      	add	r7, sp, #0
   834a2:	4603      	mov	r3, r0
   834a4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   834a6:	79fb      	ldrb	r3, [r7, #7]
   834a8:	3b03      	subs	r3, #3
   834aa:	2b04      	cmp	r3, #4
   834ac:	d808      	bhi.n	834c0 <pll_enable_source+0x24>
		osc_enable(e_src);
   834ae:	79fb      	ldrb	r3, [r7, #7]
   834b0:	4618      	mov	r0, r3
   834b2:	4b06      	ldr	r3, [pc, #24]	; (834cc <pll_enable_source+0x30>)
   834b4:	4798      	blx	r3
		osc_wait_ready(e_src);
   834b6:	79fb      	ldrb	r3, [r7, #7]
   834b8:	4618      	mov	r0, r3
   834ba:	4b05      	ldr	r3, [pc, #20]	; (834d0 <pll_enable_source+0x34>)
   834bc:	4798      	blx	r3
		break;
   834be:	e000      	b.n	834c2 <pll_enable_source+0x26>
		break;
   834c0:	bf00      	nop
}
   834c2:	bf00      	nop
   834c4:	3708      	adds	r7, #8
   834c6:	46bd      	mov	sp, r7
   834c8:	bd80      	pop	{r7, pc}
   834ca:	bf00      	nop
   834cc:	0008321d 	.word	0x0008321d
   834d0:	00083395 	.word	0x00083395

000834d4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   834d4:	b580      	push	{r7, lr}
   834d6:	b082      	sub	sp, #8
   834d8:	af00      	add	r7, sp, #0
   834da:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   834dc:	bf00      	nop
   834de:	6878      	ldr	r0, [r7, #4]
   834e0:	4b04      	ldr	r3, [pc, #16]	; (834f4 <pll_wait_for_lock+0x20>)
   834e2:	4798      	blx	r3
   834e4:	4603      	mov	r3, r0
   834e6:	2b00      	cmp	r3, #0
   834e8:	d0f9      	beq.n	834de <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   834ea:	2300      	movs	r3, #0
}
   834ec:	4618      	mov	r0, r3
   834ee:	3708      	adds	r7, #8
   834f0:	46bd      	mov	sp, r7
   834f2:	bd80      	pop	{r7, pc}
   834f4:	00083471 	.word	0x00083471

000834f8 <sysclk_get_main_hz>:
{
   834f8:	b580      	push	{r7, lr}
   834fa:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   834fc:	2006      	movs	r0, #6
   834fe:	4b03      	ldr	r3, [pc, #12]	; (8350c <sysclk_get_main_hz+0x14>)
   83500:	4798      	blx	r3
   83502:	4603      	mov	r3, r0
   83504:	011b      	lsls	r3, r3, #4
}
   83506:	4618      	mov	r0, r3
   83508:	bd80      	pop	{r7, pc}
   8350a:	bf00      	nop
   8350c:	00083325 	.word	0x00083325

00083510 <sysclk_get_cpu_hz>:
{
   83510:	b580      	push	{r7, lr}
   83512:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83514:	4b02      	ldr	r3, [pc, #8]	; (83520 <sysclk_get_cpu_hz+0x10>)
   83516:	4798      	blx	r3
   83518:	4603      	mov	r3, r0
   8351a:	085b      	lsrs	r3, r3, #1
}
   8351c:	4618      	mov	r0, r3
   8351e:	bd80      	pop	{r7, pc}
   83520:	000834f9 	.word	0x000834f9

00083524 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   83524:	b590      	push	{r4, r7, lr}
   83526:	b083      	sub	sp, #12
   83528:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   8352a:	2006      	movs	r0, #6
   8352c:	4b09      	ldr	r3, [pc, #36]	; (83554 <sysclk_enable_usb+0x30>)
   8352e:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   83530:	1d38      	adds	r0, r7, #4
   83532:	2300      	movs	r3, #0
   83534:	2200      	movs	r2, #0
   83536:	2106      	movs	r1, #6
   83538:	4c07      	ldr	r4, [pc, #28]	; (83558 <sysclk_enable_usb+0x34>)
   8353a:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   8353c:	1d3b      	adds	r3, r7, #4
   8353e:	2101      	movs	r1, #1
   83540:	4618      	mov	r0, r3
   83542:	4b06      	ldr	r3, [pc, #24]	; (8355c <sysclk_enable_usb+0x38>)
   83544:	4798      	blx	r3
	pll_wait_for_lock(1);
   83546:	2001      	movs	r0, #1
   83548:	4b05      	ldr	r3, [pc, #20]	; (83560 <sysclk_enable_usb+0x3c>)
   8354a:	4798      	blx	r3
}
   8354c:	bf00      	nop
   8354e:	370c      	adds	r7, #12
   83550:	46bd      	mov	sp, r7
   83552:	bd90      	pop	{r4, r7, pc}
   83554:	0008349d 	.word	0x0008349d
   83558:	000833c5 	.word	0x000833c5
   8355c:	00083431 	.word	0x00083431
   83560:	000834d5 	.word	0x000834d5

00083564 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   83564:	b590      	push	{r4, r7, lr}
   83566:	b083      	sub	sp, #12
   83568:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8356a:	4816      	ldr	r0, [pc, #88]	; (835c4 <sysclk_init+0x60>)
   8356c:	4b16      	ldr	r3, [pc, #88]	; (835c8 <sysclk_init+0x64>)
   8356e:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83570:	2006      	movs	r0, #6
   83572:	4b16      	ldr	r3, [pc, #88]	; (835cc <sysclk_init+0x68>)
   83574:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   83576:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   8357a:	4b15      	ldr	r3, [pc, #84]	; (835d0 <sysclk_init+0x6c>)
   8357c:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   8357e:	bf00      	nop
   83580:	4b14      	ldr	r3, [pc, #80]	; (835d4 <sysclk_init+0x70>)
   83582:	4798      	blx	r3
   83584:	4603      	mov	r3, r0
   83586:	2b00      	cmp	r3, #0
   83588:	d0fa      	beq.n	83580 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   8358a:	1d38      	adds	r0, r7, #4
   8358c:	2310      	movs	r3, #16
   8358e:	2201      	movs	r2, #1
   83590:	2106      	movs	r1, #6
   83592:	4c11      	ldr	r4, [pc, #68]	; (835d8 <sysclk_init+0x74>)
   83594:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83596:	1d3b      	adds	r3, r7, #4
   83598:	2100      	movs	r1, #0
   8359a:	4618      	mov	r0, r3
   8359c:	4b0f      	ldr	r3, [pc, #60]	; (835dc <sysclk_init+0x78>)
   8359e:	4798      	blx	r3
		pll_wait_for_lock(0);
   835a0:	2000      	movs	r0, #0
   835a2:	4b0f      	ldr	r3, [pc, #60]	; (835e0 <sysclk_init+0x7c>)
   835a4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   835a6:	2010      	movs	r0, #16
   835a8:	4b0e      	ldr	r3, [pc, #56]	; (835e4 <sysclk_init+0x80>)
   835aa:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   835ac:	4b0e      	ldr	r3, [pc, #56]	; (835e8 <sysclk_init+0x84>)
   835ae:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   835b0:	4b0e      	ldr	r3, [pc, #56]	; (835ec <sysclk_init+0x88>)
   835b2:	4798      	blx	r3
   835b4:	4603      	mov	r3, r0
   835b6:	4618      	mov	r0, r3
   835b8:	4b03      	ldr	r3, [pc, #12]	; (835c8 <sysclk_init+0x64>)
   835ba:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   835bc:	bf00      	nop
   835be:	370c      	adds	r7, #12
   835c0:	46bd      	mov	sp, r7
   835c2:	bd90      	pop	{r4, r7, pc}
   835c4:	05b8d800 	.word	0x05b8d800
   835c8:	200001bd 	.word	0x200001bd
   835cc:	0008349d 	.word	0x0008349d
   835d0:	00082941 	.word	0x00082941
   835d4:	00082929 	.word	0x00082929
   835d8:	000833c5 	.word	0x000833c5
   835dc:	00083431 	.word	0x00083431
   835e0:	000834d5 	.word	0x000834d5
   835e4:	00082715 	.word	0x00082715
   835e8:	000835f1 	.word	0x000835f1
   835ec:	00083511 	.word	0x00083511

000835f0 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   835f0:	b480      	push	{r7}
   835f2:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   835f4:	4b58      	ldr	r3, [pc, #352]	; (83758 <SystemCoreClockUpdate+0x168>)
   835f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   835f8:	f003 0303 	and.w	r3, r3, #3
   835fc:	2b03      	cmp	r3, #3
   835fe:	f200 808c 	bhi.w	8371a <SystemCoreClockUpdate+0x12a>
   83602:	2b02      	cmp	r3, #2
   83604:	d23f      	bcs.n	83686 <SystemCoreClockUpdate+0x96>
   83606:	2b00      	cmp	r3, #0
   83608:	d002      	beq.n	83610 <SystemCoreClockUpdate+0x20>
   8360a:	2b01      	cmp	r3, #1
   8360c:	d010      	beq.n	83630 <SystemCoreClockUpdate+0x40>
   8360e:	e084      	b.n	8371a <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83610:	4b52      	ldr	r3, [pc, #328]	; (8375c <SystemCoreClockUpdate+0x16c>)
   83612:	695b      	ldr	r3, [r3, #20]
   83614:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83618:	2b00      	cmp	r3, #0
   8361a:	d004      	beq.n	83626 <SystemCoreClockUpdate+0x36>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8361c:	4b50      	ldr	r3, [pc, #320]	; (83760 <SystemCoreClockUpdate+0x170>)
   8361e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83622:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83624:	e079      	b.n	8371a <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83626:	4b4e      	ldr	r3, [pc, #312]	; (83760 <SystemCoreClockUpdate+0x170>)
   83628:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   8362c:	601a      	str	r2, [r3, #0]
		break;
   8362e:	e074      	b.n	8371a <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83630:	4b49      	ldr	r3, [pc, #292]	; (83758 <SystemCoreClockUpdate+0x168>)
   83632:	6a1b      	ldr	r3, [r3, #32]
   83634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83638:	2b00      	cmp	r3, #0
   8363a:	d003      	beq.n	83644 <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8363c:	4b48      	ldr	r3, [pc, #288]	; (83760 <SystemCoreClockUpdate+0x170>)
   8363e:	4a49      	ldr	r2, [pc, #292]	; (83764 <SystemCoreClockUpdate+0x174>)
   83640:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   83642:	e06a      	b.n	8371a <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83644:	4b46      	ldr	r3, [pc, #280]	; (83760 <SystemCoreClockUpdate+0x170>)
   83646:	4a48      	ldr	r2, [pc, #288]	; (83768 <SystemCoreClockUpdate+0x178>)
   83648:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8364a:	4b43      	ldr	r3, [pc, #268]	; (83758 <SystemCoreClockUpdate+0x168>)
   8364c:	6a1b      	ldr	r3, [r3, #32]
   8364e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83652:	2b20      	cmp	r3, #32
   83654:	d00b      	beq.n	8366e <SystemCoreClockUpdate+0x7e>
   83656:	2b20      	cmp	r3, #32
   83658:	d811      	bhi.n	8367e <SystemCoreClockUpdate+0x8e>
   8365a:	2b00      	cmp	r3, #0
   8365c:	d011      	beq.n	83682 <SystemCoreClockUpdate+0x92>
   8365e:	2b10      	cmp	r3, #16
   83660:	d10d      	bne.n	8367e <SystemCoreClockUpdate+0x8e>
				SystemCoreClock *= 2U;
   83662:	4b3f      	ldr	r3, [pc, #252]	; (83760 <SystemCoreClockUpdate+0x170>)
   83664:	681b      	ldr	r3, [r3, #0]
   83666:	005b      	lsls	r3, r3, #1
   83668:	4a3d      	ldr	r2, [pc, #244]	; (83760 <SystemCoreClockUpdate+0x170>)
   8366a:	6013      	str	r3, [r2, #0]
				break;
   8366c:	e00a      	b.n	83684 <SystemCoreClockUpdate+0x94>
				SystemCoreClock *= 3U;
   8366e:	4b3c      	ldr	r3, [pc, #240]	; (83760 <SystemCoreClockUpdate+0x170>)
   83670:	681a      	ldr	r2, [r3, #0]
   83672:	4613      	mov	r3, r2
   83674:	005b      	lsls	r3, r3, #1
   83676:	4413      	add	r3, r2
   83678:	4a39      	ldr	r2, [pc, #228]	; (83760 <SystemCoreClockUpdate+0x170>)
   8367a:	6013      	str	r3, [r2, #0]
				break;
   8367c:	e002      	b.n	83684 <SystemCoreClockUpdate+0x94>
				break;
   8367e:	bf00      	nop
   83680:	e04b      	b.n	8371a <SystemCoreClockUpdate+0x12a>
				break;
   83682:	bf00      	nop
		break;
   83684:	e049      	b.n	8371a <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83686:	4b34      	ldr	r3, [pc, #208]	; (83758 <SystemCoreClockUpdate+0x168>)
   83688:	6a1b      	ldr	r3, [r3, #32]
   8368a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8368e:	2b00      	cmp	r3, #0
   83690:	d003      	beq.n	8369a <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83692:	4b33      	ldr	r3, [pc, #204]	; (83760 <SystemCoreClockUpdate+0x170>)
   83694:	4a33      	ldr	r2, [pc, #204]	; (83764 <SystemCoreClockUpdate+0x174>)
   83696:	601a      	str	r2, [r3, #0]
   83698:	e01f      	b.n	836da <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8369a:	4b31      	ldr	r3, [pc, #196]	; (83760 <SystemCoreClockUpdate+0x170>)
   8369c:	4a32      	ldr	r2, [pc, #200]	; (83768 <SystemCoreClockUpdate+0x178>)
   8369e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   836a0:	4b2d      	ldr	r3, [pc, #180]	; (83758 <SystemCoreClockUpdate+0x168>)
   836a2:	6a1b      	ldr	r3, [r3, #32]
   836a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   836a8:	2b20      	cmp	r3, #32
   836aa:	d00b      	beq.n	836c4 <SystemCoreClockUpdate+0xd4>
   836ac:	2b20      	cmp	r3, #32
   836ae:	d811      	bhi.n	836d4 <SystemCoreClockUpdate+0xe4>
   836b0:	2b00      	cmp	r3, #0
   836b2:	d011      	beq.n	836d8 <SystemCoreClockUpdate+0xe8>
   836b4:	2b10      	cmp	r3, #16
   836b6:	d10d      	bne.n	836d4 <SystemCoreClockUpdate+0xe4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   836b8:	4b29      	ldr	r3, [pc, #164]	; (83760 <SystemCoreClockUpdate+0x170>)
   836ba:	681b      	ldr	r3, [r3, #0]
   836bc:	005b      	lsls	r3, r3, #1
   836be:	4a28      	ldr	r2, [pc, #160]	; (83760 <SystemCoreClockUpdate+0x170>)
   836c0:	6013      	str	r3, [r2, #0]
				break;
   836c2:	e00a      	b.n	836da <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   836c4:	4b26      	ldr	r3, [pc, #152]	; (83760 <SystemCoreClockUpdate+0x170>)
   836c6:	681a      	ldr	r2, [r3, #0]
   836c8:	4613      	mov	r3, r2
   836ca:	005b      	lsls	r3, r3, #1
   836cc:	4413      	add	r3, r2
   836ce:	4a24      	ldr	r2, [pc, #144]	; (83760 <SystemCoreClockUpdate+0x170>)
   836d0:	6013      	str	r3, [r2, #0]
				break;
   836d2:	e002      	b.n	836da <SystemCoreClockUpdate+0xea>
			default:
				break;
   836d4:	bf00      	nop
   836d6:	e000      	b.n	836da <SystemCoreClockUpdate+0xea>
				break;
   836d8:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   836da:	4b1f      	ldr	r3, [pc, #124]	; (83758 <SystemCoreClockUpdate+0x168>)
   836dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   836de:	f003 0303 	and.w	r3, r3, #3
   836e2:	2b02      	cmp	r3, #2
   836e4:	d115      	bne.n	83712 <SystemCoreClockUpdate+0x122>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   836e6:	4b1c      	ldr	r3, [pc, #112]	; (83758 <SystemCoreClockUpdate+0x168>)
   836e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   836ea:	0c1b      	lsrs	r3, r3, #16
   836ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   836f0:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   836f2:	4a1b      	ldr	r2, [pc, #108]	; (83760 <SystemCoreClockUpdate+0x170>)
   836f4:	6812      	ldr	r2, [r2, #0]
   836f6:	fb02 f303 	mul.w	r3, r2, r3
   836fa:	4a19      	ldr	r2, [pc, #100]	; (83760 <SystemCoreClockUpdate+0x170>)
   836fc:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   836fe:	4b16      	ldr	r3, [pc, #88]	; (83758 <SystemCoreClockUpdate+0x168>)
   83700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83702:	b2db      	uxtb	r3, r3
   83704:	4a16      	ldr	r2, [pc, #88]	; (83760 <SystemCoreClockUpdate+0x170>)
   83706:	6812      	ldr	r2, [r2, #0]
   83708:	fbb2 f3f3 	udiv	r3, r2, r3
   8370c:	4a14      	ldr	r2, [pc, #80]	; (83760 <SystemCoreClockUpdate+0x170>)
   8370e:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   83710:	e002      	b.n	83718 <SystemCoreClockUpdate+0x128>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83712:	4b13      	ldr	r3, [pc, #76]	; (83760 <SystemCoreClockUpdate+0x170>)
   83714:	4a15      	ldr	r2, [pc, #84]	; (8376c <SystemCoreClockUpdate+0x17c>)
   83716:	601a      	str	r2, [r3, #0]
		break;
   83718:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8371a:	4b0f      	ldr	r3, [pc, #60]	; (83758 <SystemCoreClockUpdate+0x168>)
   8371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8371e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83722:	2b70      	cmp	r3, #112	; 0x70
   83724:	d108      	bne.n	83738 <SystemCoreClockUpdate+0x148>
		SystemCoreClock /= 3U;
   83726:	4b0e      	ldr	r3, [pc, #56]	; (83760 <SystemCoreClockUpdate+0x170>)
   83728:	681b      	ldr	r3, [r3, #0]
   8372a:	4a11      	ldr	r2, [pc, #68]	; (83770 <SystemCoreClockUpdate+0x180>)
   8372c:	fba2 2303 	umull	r2, r3, r2, r3
   83730:	085b      	lsrs	r3, r3, #1
   83732:	4a0b      	ldr	r2, [pc, #44]	; (83760 <SystemCoreClockUpdate+0x170>)
   83734:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   83736:	e00a      	b.n	8374e <SystemCoreClockUpdate+0x15e>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83738:	4b07      	ldr	r3, [pc, #28]	; (83758 <SystemCoreClockUpdate+0x168>)
   8373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8373c:	091b      	lsrs	r3, r3, #4
   8373e:	f003 0307 	and.w	r3, r3, #7
   83742:	4a07      	ldr	r2, [pc, #28]	; (83760 <SystemCoreClockUpdate+0x170>)
   83744:	6812      	ldr	r2, [r2, #0]
   83746:	fa22 f303 	lsr.w	r3, r2, r3
   8374a:	4a05      	ldr	r2, [pc, #20]	; (83760 <SystemCoreClockUpdate+0x170>)
   8374c:	6013      	str	r3, [r2, #0]
}
   8374e:	bf00      	nop
   83750:	46bd      	mov	sp, r7
   83752:	bc80      	pop	{r7}
   83754:	4770      	bx	lr
   83756:	bf00      	nop
   83758:	400e0400 	.word	0x400e0400
   8375c:	400e1210 	.word	0x400e1210
   83760:	20000288 	.word	0x20000288
   83764:	00b71b00 	.word	0x00b71b00
   83768:	003d0900 	.word	0x003d0900
   8376c:	0e4e1c00 	.word	0x0e4e1c00
   83770:	aaaaaaab 	.word	0xaaaaaaab

00083774 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   83774:	b480      	push	{r7}
   83776:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   83778:	4b02      	ldr	r3, [pc, #8]	; (83784 <udc_get_string_serial_name+0x10>)
	}
   8377a:	4618      	mov	r0, r3
   8377c:	46bd      	mov	sp, r7
   8377e:	bc80      	pop	{r7}
   83780:	4770      	bx	lr
   83782:	bf00      	nop
   83784:	2000025c 	.word	0x2000025c

00083788 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   83788:	b480      	push	{r7}
   8378a:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   8378c:	4b02      	ldr	r3, [pc, #8]	; (83798 <udc_get_interface_desc+0x10>)
   8378e:	681b      	ldr	r3, [r3, #0]
}
   83790:	4618      	mov	r0, r3
   83792:	46bd      	mov	sp, r7
   83794:	bc80      	pop	{r7}
   83796:	4770      	bx	lr
   83798:	2000133c 	.word	0x2000133c

0008379c <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   8379c:	b480      	push	{r7}
   8379e:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   837a0:	4b06      	ldr	r3, [pc, #24]	; (837bc <udc_get_eof_conf+0x20>)
   837a2:	681b      	ldr	r3, [r3, #0]
   837a4:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   837a6:	4a05      	ldr	r2, [pc, #20]	; (837bc <udc_get_eof_conf+0x20>)
   837a8:	6812      	ldr	r2, [r2, #0]
   837aa:	6812      	ldr	r2, [r2, #0]
   837ac:	8852      	ldrh	r2, [r2, #2]
   837ae:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   837b0:	4413      	add	r3, r2
}
   837b2:	4618      	mov	r0, r3
   837b4:	46bd      	mov	sp, r7
   837b6:	bc80      	pop	{r7}
   837b8:	4770      	bx	lr
   837ba:	bf00      	nop
   837bc:	20001338 	.word	0x20001338

000837c0 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   837c0:	b580      	push	{r7, lr}
   837c2:	b084      	sub	sp, #16
   837c4:	af00      	add	r7, sp, #0
   837c6:	6078      	str	r0, [r7, #4]
   837c8:	460b      	mov	r3, r1
   837ca:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   837cc:	4b12      	ldr	r3, [pc, #72]	; (83818 <udc_next_desc_in_iface+0x58>)
   837ce:	4798      	blx	r3
   837d0:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   837d2:	687b      	ldr	r3, [r7, #4]
   837d4:	781b      	ldrb	r3, [r3, #0]
   837d6:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   837d8:	687b      	ldr	r3, [r7, #4]
   837da:	4413      	add	r3, r2
   837dc:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   837de:	e010      	b.n	83802 <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   837e0:	687b      	ldr	r3, [r7, #4]
   837e2:	785b      	ldrb	r3, [r3, #1]
   837e4:	2b04      	cmp	r3, #4
   837e6:	d011      	beq.n	8380c <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   837e8:	687b      	ldr	r3, [r7, #4]
   837ea:	785b      	ldrb	r3, [r3, #1]
   837ec:	78fa      	ldrb	r2, [r7, #3]
   837ee:	429a      	cmp	r2, r3
   837f0:	d101      	bne.n	837f6 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   837f2:	687b      	ldr	r3, [r7, #4]
   837f4:	e00c      	b.n	83810 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   837f6:	687b      	ldr	r3, [r7, #4]
   837f8:	781b      	ldrb	r3, [r3, #0]
   837fa:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   837fc:	687b      	ldr	r3, [r7, #4]
   837fe:	4413      	add	r3, r2
   83800:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   83802:	68fa      	ldr	r2, [r7, #12]
   83804:	687b      	ldr	r3, [r7, #4]
   83806:	429a      	cmp	r2, r3
   83808:	d8ea      	bhi.n	837e0 <udc_next_desc_in_iface+0x20>
   8380a:	e000      	b.n	8380e <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   8380c:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   8380e:	2300      	movs	r3, #0
}
   83810:	4618      	mov	r0, r3
   83812:	3710      	adds	r7, #16
   83814:	46bd      	mov	sp, r7
   83816:	bd80      	pop	{r7, pc}
   83818:	0008379d 	.word	0x0008379d

0008381c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   8381c:	b580      	push	{r7, lr}
   8381e:	b084      	sub	sp, #16
   83820:	af00      	add	r7, sp, #0
   83822:	4603      	mov	r3, r0
   83824:	460a      	mov	r2, r1
   83826:	71fb      	strb	r3, [r7, #7]
   83828:	4613      	mov	r3, r2
   8382a:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   8382c:	4b1e      	ldr	r3, [pc, #120]	; (838a8 <udc_update_iface_desc+0x8c>)
   8382e:	781b      	ldrb	r3, [r3, #0]
   83830:	2b00      	cmp	r3, #0
   83832:	d101      	bne.n	83838 <udc_update_iface_desc+0x1c>
		return false;
   83834:	2300      	movs	r3, #0
   83836:	e032      	b.n	8389e <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83838:	4b1c      	ldr	r3, [pc, #112]	; (838ac <udc_update_iface_desc+0x90>)
   8383a:	681b      	ldr	r3, [r3, #0]
   8383c:	681b      	ldr	r3, [r3, #0]
   8383e:	791b      	ldrb	r3, [r3, #4]
   83840:	79fa      	ldrb	r2, [r7, #7]
   83842:	429a      	cmp	r2, r3
   83844:	d301      	bcc.n	8384a <udc_update_iface_desc+0x2e>
		return false;
   83846:	2300      	movs	r3, #0
   83848:	e029      	b.n	8389e <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   8384a:	4b18      	ldr	r3, [pc, #96]	; (838ac <udc_update_iface_desc+0x90>)
   8384c:	681b      	ldr	r3, [r3, #0]
   8384e:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   83850:	4a17      	ldr	r2, [pc, #92]	; (838b0 <udc_update_iface_desc+0x94>)
   83852:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   83854:	4b17      	ldr	r3, [pc, #92]	; (838b4 <udc_update_iface_desc+0x98>)
   83856:	4798      	blx	r3
   83858:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   8385a:	e01a      	b.n	83892 <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8385c:	4b14      	ldr	r3, [pc, #80]	; (838b0 <udc_update_iface_desc+0x94>)
   8385e:	681b      	ldr	r3, [r3, #0]
   83860:	785b      	ldrb	r3, [r3, #1]
   83862:	2b04      	cmp	r3, #4
   83864:	d10d      	bne.n	83882 <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   83866:	4b12      	ldr	r3, [pc, #72]	; (838b0 <udc_update_iface_desc+0x94>)
   83868:	681b      	ldr	r3, [r3, #0]
   8386a:	789b      	ldrb	r3, [r3, #2]
   8386c:	79fa      	ldrb	r2, [r7, #7]
   8386e:	429a      	cmp	r2, r3
   83870:	d107      	bne.n	83882 <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   83872:	4b0f      	ldr	r3, [pc, #60]	; (838b0 <udc_update_iface_desc+0x94>)
   83874:	681b      	ldr	r3, [r3, #0]
   83876:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   83878:	79ba      	ldrb	r2, [r7, #6]
   8387a:	429a      	cmp	r2, r3
   8387c:	d101      	bne.n	83882 <udc_update_iface_desc+0x66>
				return true; // Interface found
   8387e:	2301      	movs	r3, #1
   83880:	e00d      	b.n	8389e <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   83882:	4b0b      	ldr	r3, [pc, #44]	; (838b0 <udc_update_iface_desc+0x94>)
   83884:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   83886:	4a0a      	ldr	r2, [pc, #40]	; (838b0 <udc_update_iface_desc+0x94>)
   83888:	6812      	ldr	r2, [r2, #0]
   8388a:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   8388c:	4413      	add	r3, r2
   8388e:	4a08      	ldr	r2, [pc, #32]	; (838b0 <udc_update_iface_desc+0x94>)
   83890:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   83892:	4b07      	ldr	r3, [pc, #28]	; (838b0 <udc_update_iface_desc+0x94>)
   83894:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   83896:	68fa      	ldr	r2, [r7, #12]
   83898:	429a      	cmp	r2, r3
   8389a:	d8df      	bhi.n	8385c <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   8389c:	2300      	movs	r3, #0
}
   8389e:	4618      	mov	r0, r3
   838a0:	3710      	adds	r7, #16
   838a2:	46bd      	mov	sp, r7
   838a4:	bd80      	pop	{r7, pc}
   838a6:	bf00      	nop
   838a8:	20001336 	.word	0x20001336
   838ac:	20001338 	.word	0x20001338
   838b0:	2000133c 	.word	0x2000133c
   838b4:	0008379d 	.word	0x0008379d

000838b8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   838b8:	b580      	push	{r7, lr}
   838ba:	b084      	sub	sp, #16
   838bc:	af00      	add	r7, sp, #0
   838be:	4603      	mov	r3, r0
   838c0:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   838c2:	79fb      	ldrb	r3, [r7, #7]
   838c4:	2100      	movs	r1, #0
   838c6:	4618      	mov	r0, r3
   838c8:	4b1e      	ldr	r3, [pc, #120]	; (83944 <udc_iface_disable+0x8c>)
   838ca:	4798      	blx	r3
   838cc:	4603      	mov	r3, r0
   838ce:	f083 0301 	eor.w	r3, r3, #1
   838d2:	b2db      	uxtb	r3, r3
   838d4:	2b00      	cmp	r3, #0
   838d6:	d001      	beq.n	838dc <udc_iface_disable+0x24>
		return false;
   838d8:	2300      	movs	r3, #0
   838da:	e02f      	b.n	8393c <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   838dc:	4b1a      	ldr	r3, [pc, #104]	; (83948 <udc_iface_disable+0x90>)
   838de:	681b      	ldr	r3, [r3, #0]
   838e0:	685a      	ldr	r2, [r3, #4]
   838e2:	79fb      	ldrb	r3, [r7, #7]
   838e4:	009b      	lsls	r3, r3, #2
   838e6:	4413      	add	r3, r2
   838e8:	681b      	ldr	r3, [r3, #0]
   838ea:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   838ec:	68bb      	ldr	r3, [r7, #8]
   838ee:	68db      	ldr	r3, [r3, #12]
   838f0:	4798      	blx	r3
   838f2:	4603      	mov	r3, r0
   838f4:	461a      	mov	r2, r3
   838f6:	79fb      	ldrb	r3, [r7, #7]
   838f8:	4611      	mov	r1, r2
   838fa:	4618      	mov	r0, r3
   838fc:	4b11      	ldr	r3, [pc, #68]	; (83944 <udc_iface_disable+0x8c>)
   838fe:	4798      	blx	r3
   83900:	4603      	mov	r3, r0
   83902:	f083 0301 	eor.w	r3, r3, #1
   83906:	b2db      	uxtb	r3, r3
   83908:	2b00      	cmp	r3, #0
   8390a:	d001      	beq.n	83910 <udc_iface_disable+0x58>
		return false;
   8390c:	2300      	movs	r3, #0
   8390e:	e015      	b.n	8393c <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   83910:	4b0e      	ldr	r3, [pc, #56]	; (8394c <udc_iface_disable+0x94>)
   83912:	681b      	ldr	r3, [r3, #0]
   83914:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   83916:	2105      	movs	r1, #5
   83918:	68f8      	ldr	r0, [r7, #12]
   8391a:	4b0d      	ldr	r3, [pc, #52]	; (83950 <udc_iface_disable+0x98>)
   8391c:	4798      	blx	r3
   8391e:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   83920:	68fb      	ldr	r3, [r7, #12]
   83922:	2b00      	cmp	r3, #0
   83924:	d005      	beq.n	83932 <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   83926:	68fb      	ldr	r3, [r7, #12]
   83928:	789b      	ldrb	r3, [r3, #2]
   8392a:	4618      	mov	r0, r3
   8392c:	4b09      	ldr	r3, [pc, #36]	; (83954 <udc_iface_disable+0x9c>)
   8392e:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   83930:	e7f1      	b.n	83916 <udc_iface_disable+0x5e>
				break;
   83932:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   83934:	68bb      	ldr	r3, [r7, #8]
   83936:	685b      	ldr	r3, [r3, #4]
   83938:	4798      	blx	r3
	return true;
   8393a:	2301      	movs	r3, #1
}
   8393c:	4618      	mov	r0, r3
   8393e:	3710      	adds	r7, #16
   83940:	46bd      	mov	sp, r7
   83942:	bd80      	pop	{r7, pc}
   83944:	0008381d 	.word	0x0008381d
   83948:	20001338 	.word	0x20001338
   8394c:	2000133c 	.word	0x2000133c
   83950:	000837c1 	.word	0x000837c1
   83954:	00085025 	.word	0x00085025

00083958 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   83958:	b580      	push	{r7, lr}
   8395a:	b084      	sub	sp, #16
   8395c:	af00      	add	r7, sp, #0
   8395e:	4603      	mov	r3, r0
   83960:	460a      	mov	r2, r1
   83962:	71fb      	strb	r3, [r7, #7]
   83964:	4613      	mov	r3, r2
   83966:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   83968:	79ba      	ldrb	r2, [r7, #6]
   8396a:	79fb      	ldrb	r3, [r7, #7]
   8396c:	4611      	mov	r1, r2
   8396e:	4618      	mov	r0, r3
   83970:	4b1a      	ldr	r3, [pc, #104]	; (839dc <udc_iface_enable+0x84>)
   83972:	4798      	blx	r3
   83974:	4603      	mov	r3, r0
   83976:	f083 0301 	eor.w	r3, r3, #1
   8397a:	b2db      	uxtb	r3, r3
   8397c:	2b00      	cmp	r3, #0
   8397e:	d001      	beq.n	83984 <udc_iface_enable+0x2c>
		return false;
   83980:	2300      	movs	r3, #0
   83982:	e027      	b.n	839d4 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   83984:	4b16      	ldr	r3, [pc, #88]	; (839e0 <udc_iface_enable+0x88>)
   83986:	681b      	ldr	r3, [r3, #0]
   83988:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   8398a:	2105      	movs	r1, #5
   8398c:	68f8      	ldr	r0, [r7, #12]
   8398e:	4b15      	ldr	r3, [pc, #84]	; (839e4 <udc_iface_enable+0x8c>)
   83990:	4798      	blx	r3
   83992:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   83994:	68fb      	ldr	r3, [r7, #12]
   83996:	2b00      	cmp	r3, #0
   83998:	d011      	beq.n	839be <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8399a:	68fb      	ldr	r3, [r7, #12]
   8399c:	7898      	ldrb	r0, [r3, #2]
   8399e:	68fb      	ldr	r3, [r7, #12]
   839a0:	78d9      	ldrb	r1, [r3, #3]
   839a2:	68fb      	ldr	r3, [r7, #12]
   839a4:	889b      	ldrh	r3, [r3, #4]
   839a6:	b29b      	uxth	r3, r3
   839a8:	461a      	mov	r2, r3
   839aa:	4b0f      	ldr	r3, [pc, #60]	; (839e8 <udc_iface_enable+0x90>)
   839ac:	4798      	blx	r3
   839ae:	4603      	mov	r3, r0
   839b0:	f083 0301 	eor.w	r3, r3, #1
   839b4:	b2db      	uxtb	r3, r3
   839b6:	2b00      	cmp	r3, #0
   839b8:	d0e7      	beq.n	8398a <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   839ba:	2300      	movs	r3, #0
   839bc:	e00a      	b.n	839d4 <udc_iface_enable+0x7c>
			break;
   839be:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   839c0:	4b0a      	ldr	r3, [pc, #40]	; (839ec <udc_iface_enable+0x94>)
   839c2:	681b      	ldr	r3, [r3, #0]
   839c4:	685a      	ldr	r2, [r3, #4]
   839c6:	79fb      	ldrb	r3, [r7, #7]
   839c8:	009b      	lsls	r3, r3, #2
   839ca:	4413      	add	r3, r2
   839cc:	681b      	ldr	r3, [r3, #0]
   839ce:	681b      	ldr	r3, [r3, #0]
   839d0:	4798      	blx	r3
   839d2:	4603      	mov	r3, r0
}
   839d4:	4618      	mov	r0, r3
   839d6:	3710      	adds	r7, #16
   839d8:	46bd      	mov	sp, r7
   839da:	bd80      	pop	{r7, pc}
   839dc:	0008381d 	.word	0x0008381d
   839e0:	2000133c 	.word	0x2000133c
   839e4:	000837c1 	.word	0x000837c1
   839e8:	00084c6d 	.word	0x00084c6d
   839ec:	20001338 	.word	0x20001338

000839f0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   839f0:	b580      	push	{r7, lr}
   839f2:	af00      	add	r7, sp, #0
	udd_enable();
   839f4:	4b01      	ldr	r3, [pc, #4]	; (839fc <udc_start+0xc>)
   839f6:	4798      	blx	r3
}
   839f8:	bf00      	nop
   839fa:	bd80      	pop	{r7, pc}
   839fc:	00084a29 	.word	0x00084a29

00083a00 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   83a00:	b580      	push	{r7, lr}
   83a02:	b082      	sub	sp, #8
   83a04:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   83a06:	4b0f      	ldr	r3, [pc, #60]	; (83a44 <udc_reset+0x44>)
   83a08:	781b      	ldrb	r3, [r3, #0]
   83a0a:	2b00      	cmp	r3, #0
   83a0c:	d010      	beq.n	83a30 <udc_reset+0x30>
		for (iface_num = 0;
   83a0e:	2300      	movs	r3, #0
   83a10:	71fb      	strb	r3, [r7, #7]
   83a12:	e006      	b.n	83a22 <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   83a14:	79fb      	ldrb	r3, [r7, #7]
   83a16:	4618      	mov	r0, r3
   83a18:	4b0b      	ldr	r3, [pc, #44]	; (83a48 <udc_reset+0x48>)
   83a1a:	4798      	blx	r3
				iface_num++) {
   83a1c:	79fb      	ldrb	r3, [r7, #7]
   83a1e:	3301      	adds	r3, #1
   83a20:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83a22:	4b0a      	ldr	r3, [pc, #40]	; (83a4c <udc_reset+0x4c>)
   83a24:	681b      	ldr	r3, [r3, #0]
   83a26:	681b      	ldr	r3, [r3, #0]
   83a28:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   83a2a:	79fa      	ldrb	r2, [r7, #7]
   83a2c:	429a      	cmp	r2, r3
   83a2e:	d3f1      	bcc.n	83a14 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   83a30:	4b04      	ldr	r3, [pc, #16]	; (83a44 <udc_reset+0x44>)
   83a32:	2200      	movs	r2, #0
   83a34:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   83a36:	4b06      	ldr	r3, [pc, #24]	; (83a50 <udc_reset+0x50>)
   83a38:	2200      	movs	r2, #0
   83a3a:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   83a3c:	bf00      	nop
   83a3e:	3708      	adds	r7, #8
   83a40:	46bd      	mov	sp, r7
   83a42:	bd80      	pop	{r7, pc}
   83a44:	20001336 	.word	0x20001336
   83a48:	000838b9 	.word	0x000838b9
   83a4c:	20001338 	.word	0x20001338
   83a50:	20001334 	.word	0x20001334

00083a54 <udc_sof_notify>:

void udc_sof_notify(void)
{
   83a54:	b580      	push	{r7, lr}
   83a56:	b082      	sub	sp, #8
   83a58:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   83a5a:	4b14      	ldr	r3, [pc, #80]	; (83aac <udc_sof_notify+0x58>)
   83a5c:	781b      	ldrb	r3, [r3, #0]
   83a5e:	2b00      	cmp	r3, #0
   83a60:	d01f      	beq.n	83aa2 <udc_sof_notify+0x4e>
		for (iface_num = 0;
   83a62:	2300      	movs	r3, #0
   83a64:	71fb      	strb	r3, [r7, #7]
   83a66:	e015      	b.n	83a94 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   83a68:	4b11      	ldr	r3, [pc, #68]	; (83ab0 <udc_sof_notify+0x5c>)
   83a6a:	681b      	ldr	r3, [r3, #0]
   83a6c:	685a      	ldr	r2, [r3, #4]
   83a6e:	79fb      	ldrb	r3, [r7, #7]
   83a70:	009b      	lsls	r3, r3, #2
   83a72:	4413      	add	r3, r2
   83a74:	681b      	ldr	r3, [r3, #0]
   83a76:	691b      	ldr	r3, [r3, #16]
   83a78:	2b00      	cmp	r3, #0
   83a7a:	d008      	beq.n	83a8e <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   83a7c:	4b0c      	ldr	r3, [pc, #48]	; (83ab0 <udc_sof_notify+0x5c>)
   83a7e:	681b      	ldr	r3, [r3, #0]
   83a80:	685a      	ldr	r2, [r3, #4]
   83a82:	79fb      	ldrb	r3, [r7, #7]
   83a84:	009b      	lsls	r3, r3, #2
   83a86:	4413      	add	r3, r2
   83a88:	681b      	ldr	r3, [r3, #0]
   83a8a:	691b      	ldr	r3, [r3, #16]
   83a8c:	4798      	blx	r3
				iface_num++) {
   83a8e:	79fb      	ldrb	r3, [r7, #7]
   83a90:	3301      	adds	r3, #1
   83a92:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83a94:	4b06      	ldr	r3, [pc, #24]	; (83ab0 <udc_sof_notify+0x5c>)
   83a96:	681b      	ldr	r3, [r3, #0]
   83a98:	681b      	ldr	r3, [r3, #0]
   83a9a:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   83a9c:	79fa      	ldrb	r2, [r7, #7]
   83a9e:	429a      	cmp	r2, r3
   83aa0:	d3e2      	bcc.n	83a68 <udc_sof_notify+0x14>
			}
		}
	}
}
   83aa2:	bf00      	nop
   83aa4:	3708      	adds	r7, #8
   83aa6:	46bd      	mov	sp, r7
   83aa8:	bd80      	pop	{r7, pc}
   83aaa:	bf00      	nop
   83aac:	20001336 	.word	0x20001336
   83ab0:	20001338 	.word	0x20001338

00083ab4 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   83ab4:	b580      	push	{r7, lr}
   83ab6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   83ab8:	4b06      	ldr	r3, [pc, #24]	; (83ad4 <udc_req_std_dev_get_status+0x20>)
   83aba:	88db      	ldrh	r3, [r3, #6]
   83abc:	2b02      	cmp	r3, #2
   83abe:	d001      	beq.n	83ac4 <udc_req_std_dev_get_status+0x10>
		return false;
   83ac0:	2300      	movs	r3, #0
   83ac2:	e004      	b.n	83ace <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   83ac4:	2102      	movs	r1, #2
   83ac6:	4804      	ldr	r0, [pc, #16]	; (83ad8 <udc_req_std_dev_get_status+0x24>)
   83ac8:	4b04      	ldr	r3, [pc, #16]	; (83adc <udc_req_std_dev_get_status+0x28>)
   83aca:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   83acc:	2301      	movs	r3, #1
}
   83ace:	4618      	mov	r0, r3
   83ad0:	bd80      	pop	{r7, pc}
   83ad2:	bf00      	nop
   83ad4:	20001828 	.word	0x20001828
   83ad8:	20001334 	.word	0x20001334
   83adc:	00084c45 	.word	0x00084c45

00083ae0 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   83ae0:	b580      	push	{r7, lr}
   83ae2:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   83ae4:	4b0b      	ldr	r3, [pc, #44]	; (83b14 <udc_req_std_ep_get_status+0x34>)
   83ae6:	88db      	ldrh	r3, [r3, #6]
   83ae8:	2b02      	cmp	r3, #2
   83aea:	d001      	beq.n	83af0 <udc_req_std_ep_get_status+0x10>
		return false;
   83aec:	2300      	movs	r3, #0
   83aee:	e00e      	b.n	83b0e <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83af0:	4b08      	ldr	r3, [pc, #32]	; (83b14 <udc_req_std_ep_get_status+0x34>)
   83af2:	889b      	ldrh	r3, [r3, #4]
   83af4:	b2db      	uxtb	r3, r3
   83af6:	4618      	mov	r0, r3
   83af8:	4b07      	ldr	r3, [pc, #28]	; (83b18 <udc_req_std_ep_get_status+0x38>)
   83afa:	4798      	blx	r3
   83afc:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   83afe:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83b00:	4b06      	ldr	r3, [pc, #24]	; (83b1c <udc_req_std_ep_get_status+0x3c>)
   83b02:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   83b04:	2102      	movs	r1, #2
   83b06:	4805      	ldr	r0, [pc, #20]	; (83b1c <udc_req_std_ep_get_status+0x3c>)
   83b08:	4b05      	ldr	r3, [pc, #20]	; (83b20 <udc_req_std_ep_get_status+0x40>)
   83b0a:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   83b0c:	2301      	movs	r3, #1
}
   83b0e:	4618      	mov	r0, r3
   83b10:	bd80      	pop	{r7, pc}
   83b12:	bf00      	nop
   83b14:	20001828 	.word	0x20001828
   83b18:	000850a5 	.word	0x000850a5
   83b1c:	20001340 	.word	0x20001340
   83b20:	00084c45 	.word	0x00084c45

00083b24 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   83b24:	b480      	push	{r7}
   83b26:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83b28:	4b0b      	ldr	r3, [pc, #44]	; (83b58 <udc_req_std_dev_clear_feature+0x34>)
   83b2a:	88db      	ldrh	r3, [r3, #6]
   83b2c:	2b00      	cmp	r3, #0
   83b2e:	d001      	beq.n	83b34 <udc_req_std_dev_clear_feature+0x10>
		return false;
   83b30:	2300      	movs	r3, #0
   83b32:	e00d      	b.n	83b50 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   83b34:	4b08      	ldr	r3, [pc, #32]	; (83b58 <udc_req_std_dev_clear_feature+0x34>)
   83b36:	885b      	ldrh	r3, [r3, #2]
   83b38:	2b01      	cmp	r3, #1
   83b3a:	d108      	bne.n	83b4e <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   83b3c:	4b07      	ldr	r3, [pc, #28]	; (83b5c <udc_req_std_dev_clear_feature+0x38>)
   83b3e:	881b      	ldrh	r3, [r3, #0]
   83b40:	f023 0302 	bic.w	r3, r3, #2
   83b44:	b29a      	uxth	r2, r3
   83b46:	4b05      	ldr	r3, [pc, #20]	; (83b5c <udc_req_std_dev_clear_feature+0x38>)
   83b48:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   83b4a:	2301      	movs	r3, #1
   83b4c:	e000      	b.n	83b50 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   83b4e:	2300      	movs	r3, #0
}
   83b50:	4618      	mov	r0, r3
   83b52:	46bd      	mov	sp, r7
   83b54:	bc80      	pop	{r7}
   83b56:	4770      	bx	lr
   83b58:	20001828 	.word	0x20001828
   83b5c:	20001334 	.word	0x20001334

00083b60 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   83b60:	b580      	push	{r7, lr}
   83b62:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83b64:	4b0a      	ldr	r3, [pc, #40]	; (83b90 <udc_req_std_ep_clear_feature+0x30>)
   83b66:	88db      	ldrh	r3, [r3, #6]
   83b68:	2b00      	cmp	r3, #0
   83b6a:	d001      	beq.n	83b70 <udc_req_std_ep_clear_feature+0x10>
		return false;
   83b6c:	2300      	movs	r3, #0
   83b6e:	e00c      	b.n	83b8a <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83b70:	4b07      	ldr	r3, [pc, #28]	; (83b90 <udc_req_std_ep_clear_feature+0x30>)
   83b72:	885b      	ldrh	r3, [r3, #2]
   83b74:	2b00      	cmp	r3, #0
   83b76:	d107      	bne.n	83b88 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83b78:	4b05      	ldr	r3, [pc, #20]	; (83b90 <udc_req_std_ep_clear_feature+0x30>)
   83b7a:	889b      	ldrh	r3, [r3, #4]
   83b7c:	b2db      	uxtb	r3, r3
   83b7e:	4618      	mov	r0, r3
   83b80:	4b04      	ldr	r3, [pc, #16]	; (83b94 <udc_req_std_ep_clear_feature+0x34>)
   83b82:	4798      	blx	r3
   83b84:	4603      	mov	r3, r0
   83b86:	e000      	b.n	83b8a <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   83b88:	2300      	movs	r3, #0
}
   83b8a:	4618      	mov	r0, r3
   83b8c:	bd80      	pop	{r7, pc}
   83b8e:	bf00      	nop
   83b90:	20001828 	.word	0x20001828
   83b94:	00085221 	.word	0x00085221

00083b98 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   83b98:	b580      	push	{r7, lr}
   83b9a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83b9c:	4b26      	ldr	r3, [pc, #152]	; (83c38 <udc_req_std_dev_set_feature+0xa0>)
   83b9e:	88db      	ldrh	r3, [r3, #6]
   83ba0:	2b00      	cmp	r3, #0
   83ba2:	d001      	beq.n	83ba8 <udc_req_std_dev_set_feature+0x10>
		return false;
   83ba4:	2300      	movs	r3, #0
   83ba6:	e045      	b.n	83c34 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   83ba8:	4b23      	ldr	r3, [pc, #140]	; (83c38 <udc_req_std_dev_set_feature+0xa0>)
   83baa:	885b      	ldrh	r3, [r3, #2]
   83bac:	2b01      	cmp	r3, #1
   83bae:	d002      	beq.n	83bb6 <udc_req_std_dev_set_feature+0x1e>
   83bb0:	2b02      	cmp	r3, #2
   83bb2:	d002      	beq.n	83bba <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   83bb4:	e03d      	b.n	83c32 <udc_req_std_dev_set_feature+0x9a>
		return false;
   83bb6:	2300      	movs	r3, #0
   83bb8:	e03c      	b.n	83c34 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   83bba:	4b20      	ldr	r3, [pc, #128]	; (83c3c <udc_req_std_dev_set_feature+0xa4>)
   83bbc:	4798      	blx	r3
   83bbe:	4603      	mov	r3, r0
   83bc0:	f083 0301 	eor.w	r3, r3, #1
   83bc4:	b2db      	uxtb	r3, r3
   83bc6:	2b00      	cmp	r3, #0
   83bc8:	d130      	bne.n	83c2c <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   83bca:	4b1b      	ldr	r3, [pc, #108]	; (83c38 <udc_req_std_dev_set_feature+0xa0>)
   83bcc:	889b      	ldrh	r3, [r3, #4]
   83bce:	b2db      	uxtb	r3, r3
   83bd0:	2b00      	cmp	r3, #0
   83bd2:	d12d      	bne.n	83c30 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   83bd4:	4b1a      	ldr	r3, [pc, #104]	; (83c40 <udc_req_std_dev_set_feature+0xa8>)
   83bd6:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   83bd8:	4b17      	ldr	r3, [pc, #92]	; (83c38 <udc_req_std_dev_set_feature+0xa0>)
   83bda:	889b      	ldrh	r3, [r3, #4]
   83bdc:	0a1b      	lsrs	r3, r3, #8
   83bde:	b29b      	uxth	r3, r3
   83be0:	b2db      	uxtb	r3, r3
   83be2:	3b01      	subs	r3, #1
   83be4:	2b03      	cmp	r3, #3
   83be6:	d81f      	bhi.n	83c28 <udc_req_std_dev_set_feature+0x90>
   83be8:	a201      	add	r2, pc, #4	; (adr r2, 83bf0 <udc_req_std_dev_set_feature+0x58>)
   83bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83bee:	bf00      	nop
   83bf0:	00083c01 	.word	0x00083c01
   83bf4:	00083c0b 	.word	0x00083c0b
   83bf8:	00083c15 	.word	0x00083c15
   83bfc:	00083c1f 	.word	0x00083c1f
			udd_g_ctrlreq.callback = udd_test_mode_j;
   83c00:	4b0d      	ldr	r3, [pc, #52]	; (83c38 <udc_req_std_dev_set_feature+0xa0>)
   83c02:	4a10      	ldr	r2, [pc, #64]	; (83c44 <udc_req_std_dev_set_feature+0xac>)
   83c04:	611a      	str	r2, [r3, #16]
			return true;
   83c06:	2301      	movs	r3, #1
   83c08:	e014      	b.n	83c34 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   83c0a:	4b0b      	ldr	r3, [pc, #44]	; (83c38 <udc_req_std_dev_set_feature+0xa0>)
   83c0c:	4a0e      	ldr	r2, [pc, #56]	; (83c48 <udc_req_std_dev_set_feature+0xb0>)
   83c0e:	611a      	str	r2, [r3, #16]
			return true;
   83c10:	2301      	movs	r3, #1
   83c12:	e00f      	b.n	83c34 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   83c14:	4b08      	ldr	r3, [pc, #32]	; (83c38 <udc_req_std_dev_set_feature+0xa0>)
   83c16:	4a0d      	ldr	r2, [pc, #52]	; (83c4c <udc_req_std_dev_set_feature+0xb4>)
   83c18:	611a      	str	r2, [r3, #16]
			return true;
   83c1a:	2301      	movs	r3, #1
   83c1c:	e00a      	b.n	83c34 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   83c1e:	4b06      	ldr	r3, [pc, #24]	; (83c38 <udc_req_std_dev_set_feature+0xa0>)
   83c20:	4a0b      	ldr	r2, [pc, #44]	; (83c50 <udc_req_std_dev_set_feature+0xb8>)
   83c22:	611a      	str	r2, [r3, #16]
			return true;
   83c24:	2301      	movs	r3, #1
   83c26:	e005      	b.n	83c34 <udc_req_std_dev_set_feature+0x9c>
			break;
   83c28:	bf00      	nop
		break;
   83c2a:	e002      	b.n	83c32 <udc_req_std_dev_set_feature+0x9a>
			break;
   83c2c:	bf00      	nop
   83c2e:	e000      	b.n	83c32 <udc_req_std_dev_set_feature+0x9a>
			break;
   83c30:	bf00      	nop
	}
	return false;
   83c32:	2300      	movs	r3, #0
}
   83c34:	4618      	mov	r0, r3
   83c36:	bd80      	pop	{r7, pc}
   83c38:	20001828 	.word	0x20001828
   83c3c:	00084bc1 	.word	0x00084bc1
   83c40:	00083a01 	.word	0x00083a01
   83c44:	000854e1 	.word	0x000854e1
   83c48:	00085515 	.word	0x00085515
   83c4c:	00085549 	.word	0x00085549
   83c50:	0008556d 	.word	0x0008556d

00083c54 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   83c54:	b580      	push	{r7, lr}
   83c56:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83c58:	4b0d      	ldr	r3, [pc, #52]	; (83c90 <udc_req_std_ep_set_feature+0x3c>)
   83c5a:	88db      	ldrh	r3, [r3, #6]
   83c5c:	2b00      	cmp	r3, #0
   83c5e:	d001      	beq.n	83c64 <udc_req_std_ep_set_feature+0x10>
		return false;
   83c60:	2300      	movs	r3, #0
   83c62:	e012      	b.n	83c8a <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83c64:	4b0a      	ldr	r3, [pc, #40]	; (83c90 <udc_req_std_ep_set_feature+0x3c>)
   83c66:	885b      	ldrh	r3, [r3, #2]
   83c68:	2b00      	cmp	r3, #0
   83c6a:	d10d      	bne.n	83c88 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   83c6c:	4b08      	ldr	r3, [pc, #32]	; (83c90 <udc_req_std_ep_set_feature+0x3c>)
   83c6e:	889b      	ldrh	r3, [r3, #4]
   83c70:	b2db      	uxtb	r3, r3
   83c72:	4618      	mov	r0, r3
   83c74:	4b07      	ldr	r3, [pc, #28]	; (83c94 <udc_req_std_ep_set_feature+0x40>)
   83c76:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83c78:	4b05      	ldr	r3, [pc, #20]	; (83c90 <udc_req_std_ep_set_feature+0x3c>)
   83c7a:	889b      	ldrh	r3, [r3, #4]
   83c7c:	b2db      	uxtb	r3, r3
   83c7e:	4618      	mov	r0, r3
   83c80:	4b05      	ldr	r3, [pc, #20]	; (83c98 <udc_req_std_ep_set_feature+0x44>)
   83c82:	4798      	blx	r3
   83c84:	4603      	mov	r3, r0
   83c86:	e000      	b.n	83c8a <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   83c88:	2300      	movs	r3, #0
}
   83c8a:	4618      	mov	r0, r3
   83c8c:	bd80      	pop	{r7, pc}
   83c8e:	bf00      	nop
   83c90:	20001828 	.word	0x20001828
   83c94:	00085459 	.word	0x00085459
   83c98:	0008510d 	.word	0x0008510d

00083c9c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   83c9c:	b580      	push	{r7, lr}
   83c9e:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   83ca0:	4b05      	ldr	r3, [pc, #20]	; (83cb8 <udc_valid_address+0x1c>)
   83ca2:	885b      	ldrh	r3, [r3, #2]
   83ca4:	b2db      	uxtb	r3, r3
   83ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   83caa:	b2db      	uxtb	r3, r3
   83cac:	4618      	mov	r0, r3
   83cae:	4b03      	ldr	r3, [pc, #12]	; (83cbc <udc_valid_address+0x20>)
   83cb0:	4798      	blx	r3
}
   83cb2:	bf00      	nop
   83cb4:	bd80      	pop	{r7, pc}
   83cb6:	bf00      	nop
   83cb8:	20001828 	.word	0x20001828
   83cbc:	00084be5 	.word	0x00084be5

00083cc0 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   83cc0:	b480      	push	{r7}
   83cc2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83cc4:	4b06      	ldr	r3, [pc, #24]	; (83ce0 <udc_req_std_dev_set_address+0x20>)
   83cc6:	88db      	ldrh	r3, [r3, #6]
   83cc8:	2b00      	cmp	r3, #0
   83cca:	d001      	beq.n	83cd0 <udc_req_std_dev_set_address+0x10>
		return false;
   83ccc:	2300      	movs	r3, #0
   83cce:	e003      	b.n	83cd8 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   83cd0:	4b03      	ldr	r3, [pc, #12]	; (83ce0 <udc_req_std_dev_set_address+0x20>)
   83cd2:	4a04      	ldr	r2, [pc, #16]	; (83ce4 <udc_req_std_dev_set_address+0x24>)
   83cd4:	611a      	str	r2, [r3, #16]
	return true;
   83cd6:	2301      	movs	r3, #1
}
   83cd8:	4618      	mov	r0, r3
   83cda:	46bd      	mov	sp, r7
   83cdc:	bc80      	pop	{r7}
   83cde:	4770      	bx	lr
   83ce0:	20001828 	.word	0x20001828
   83ce4:	00083c9d 	.word	0x00083c9d

00083ce8 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   83ce8:	b580      	push	{r7, lr}
   83cea:	b084      	sub	sp, #16
   83cec:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   83cee:	2300      	movs	r3, #0
   83cf0:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   83cf2:	4b29      	ldr	r3, [pc, #164]	; (83d98 <udc_req_std_dev_get_str_desc+0xb0>)
   83cf4:	885b      	ldrh	r3, [r3, #2]
   83cf6:	b2db      	uxtb	r3, r3
   83cf8:	2b03      	cmp	r3, #3
   83cfa:	d820      	bhi.n	83d3e <udc_req_std_dev_get_str_desc+0x56>
   83cfc:	a201      	add	r2, pc, #4	; (adr r2, 83d04 <udc_req_std_dev_get_str_desc+0x1c>)
   83cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83d02:	bf00      	nop
   83d04:	00083d15 	.word	0x00083d15
   83d08:	00083d1f 	.word	0x00083d1f
   83d0c:	00083d29 	.word	0x00083d29
   83d10:	00083d33 	.word	0x00083d33
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   83d14:	2104      	movs	r1, #4
   83d16:	4821      	ldr	r0, [pc, #132]	; (83d9c <udc_req_std_dev_get_str_desc+0xb4>)
   83d18:	4b21      	ldr	r3, [pc, #132]	; (83da0 <udc_req_std_dev_get_str_desc+0xb8>)
   83d1a:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   83d1c:	e011      	b.n	83d42 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   83d1e:	2315      	movs	r3, #21
   83d20:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   83d22:	4b20      	ldr	r3, [pc, #128]	; (83da4 <udc_req_std_dev_get_str_desc+0xbc>)
   83d24:	60bb      	str	r3, [r7, #8]
		break;
   83d26:	e00c      	b.n	83d42 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   83d28:	2313      	movs	r3, #19
   83d2a:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   83d2c:	4b1e      	ldr	r3, [pc, #120]	; (83da8 <udc_req_std_dev_get_str_desc+0xc0>)
   83d2e:	60bb      	str	r3, [r7, #8]
		break;
   83d30:	e007      	b.n	83d42 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   83d32:	2320      	movs	r3, #32
   83d34:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   83d36:	4b1d      	ldr	r3, [pc, #116]	; (83dac <udc_req_std_dev_get_str_desc+0xc4>)
   83d38:	4798      	blx	r3
   83d3a:	60b8      	str	r0, [r7, #8]
		break;
   83d3c:	e001      	b.n	83d42 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   83d3e:	2300      	movs	r3, #0
   83d40:	e026      	b.n	83d90 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   83d42:	79fb      	ldrb	r3, [r7, #7]
   83d44:	2b00      	cmp	r3, #0
   83d46:	d022      	beq.n	83d8e <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   83d48:	2300      	movs	r3, #0
   83d4a:	73fb      	strb	r3, [r7, #15]
   83d4c:	e00d      	b.n	83d6a <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   83d4e:	7bfb      	ldrb	r3, [r7, #15]
   83d50:	68ba      	ldr	r2, [r7, #8]
   83d52:	4413      	add	r3, r2
   83d54:	781a      	ldrb	r2, [r3, #0]
   83d56:	7bfb      	ldrb	r3, [r7, #15]
   83d58:	b291      	uxth	r1, r2
   83d5a:	4a15      	ldr	r2, [pc, #84]	; (83db0 <udc_req_std_dev_get_str_desc+0xc8>)
   83d5c:	005b      	lsls	r3, r3, #1
   83d5e:	4413      	add	r3, r2
   83d60:	460a      	mov	r2, r1
   83d62:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   83d64:	7bfb      	ldrb	r3, [r7, #15]
   83d66:	3301      	adds	r3, #1
   83d68:	73fb      	strb	r3, [r7, #15]
   83d6a:	7bfa      	ldrb	r2, [r7, #15]
   83d6c:	79fb      	ldrb	r3, [r7, #7]
   83d6e:	429a      	cmp	r2, r3
   83d70:	d3ed      	bcc.n	83d4e <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   83d72:	79fb      	ldrb	r3, [r7, #7]
   83d74:	3301      	adds	r3, #1
   83d76:	b2db      	uxtb	r3, r3
   83d78:	005b      	lsls	r3, r3, #1
   83d7a:	b2da      	uxtb	r2, r3
   83d7c:	4b0c      	ldr	r3, [pc, #48]	; (83db0 <udc_req_std_dev_get_str_desc+0xc8>)
   83d7e:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   83d80:	4b0b      	ldr	r3, [pc, #44]	; (83db0 <udc_req_std_dev_get_str_desc+0xc8>)
   83d82:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   83d84:	b29b      	uxth	r3, r3
   83d86:	4619      	mov	r1, r3
   83d88:	4809      	ldr	r0, [pc, #36]	; (83db0 <udc_req_std_dev_get_str_desc+0xc8>)
   83d8a:	4b05      	ldr	r3, [pc, #20]	; (83da0 <udc_req_std_dev_get_str_desc+0xb8>)
   83d8c:	4798      	blx	r3
	}

	return true;
   83d8e:	2301      	movs	r3, #1
}
   83d90:	4618      	mov	r0, r3
   83d92:	3710      	adds	r7, #16
   83d94:	46bd      	mov	sp, r7
   83d96:	bd80      	pop	{r7, pc}
   83d98:	20001828 	.word	0x20001828
   83d9c:	2000028c 	.word	0x2000028c
   83da0:	00084c45 	.word	0x00084c45
   83da4:	20000290 	.word	0x20000290
   83da8:	200002a8 	.word	0x200002a8
   83dac:	00083775 	.word	0x00083775
   83db0:	200002bc 	.word	0x200002bc

00083db4 <udc_req_std_dev_get_descriptor>:
		WINUSB_PLATFORM_DESCRIPTOR_LENGTH, 0x00, //length of other descriptor
		0x01, // when asking for MS 2.0 descriptor, will do bmRequestType = 0xC0, bRequest = this (0x01)
		0x00  // if non 0, Windows will send this before asking for the next descriptor
		};
static bool udc_req_std_dev_get_descriptor(void)
{
   83db4:	b580      	push	{r7, lr}
   83db6:	b082      	sub	sp, #8
   83db8:	af00      	add	r7, sp, #0
	uint8_t conf_num;


	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   83dba:	4b7f      	ldr	r3, [pc, #508]	; (83fb8 <udc_req_std_dev_get_descriptor+0x204>)
   83dbc:	885b      	ldrh	r3, [r3, #2]
   83dbe:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83dc0:	4b7d      	ldr	r3, [pc, #500]	; (83fb8 <udc_req_std_dev_get_descriptor+0x204>)
   83dc2:	885b      	ldrh	r3, [r3, #2]
   83dc4:	0a1b      	lsrs	r3, r3, #8
   83dc6:	b29b      	uxth	r3, r3
   83dc8:	b2db      	uxtb	r3, r3
   83dca:	3b01      	subs	r3, #1
   83dcc:	2b0e      	cmp	r3, #14
   83dce:	f200 80e0 	bhi.w	83f92 <udc_req_std_dev_get_descriptor+0x1de>
   83dd2:	a201      	add	r2, pc, #4	; (adr r2, 83dd8 <udc_req_std_dev_get_descriptor+0x24>)
   83dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83dd8:	00083e15 	.word	0x00083e15
   83ddc:	00083e65 	.word	0x00083e65
   83de0:	00083f7f 	.word	0x00083f7f
   83de4:	00083f93 	.word	0x00083f93
   83de8:	00083f93 	.word	0x00083f93
   83dec:	00083edf 	.word	0x00083edf
   83df0:	00083ef5 	.word	0x00083ef5
   83df4:	00083f93 	.word	0x00083f93
   83df8:	00083f93 	.word	0x00083f93
   83dfc:	00083f93 	.word	0x00083f93
   83e00:	00083f93 	.word	0x00083f93
   83e04:	00083f93 	.word	0x00083f93
   83e08:	00083f93 	.word	0x00083f93
   83e0c:	00083f93 	.word	0x00083f93
   83e10:	00083f75 	.word	0x00083f75
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   83e14:	4b69      	ldr	r3, [pc, #420]	; (83fbc <udc_req_std_dev_get_descriptor+0x208>)
   83e16:	4798      	blx	r3
   83e18:	4603      	mov	r3, r0
   83e1a:	f083 0301 	eor.w	r3, r3, #1
   83e1e:	b2db      	uxtb	r3, r3
   83e20:	2b00      	cmp	r3, #0
   83e22:	d00a      	beq.n	83e3a <udc_req_std_dev_get_descriptor+0x86>
			//(udc_config.confdev_hs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   83e24:	4b66      	ldr	r3, [pc, #408]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83e26:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   83e28:	4b65      	ldr	r3, [pc, #404]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83e2a:	689b      	ldr	r3, [r3, #8]
   83e2c:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   83e2e:	b29b      	uxth	r3, r3
   83e30:	4619      	mov	r1, r3
   83e32:	4610      	mov	r0, r2
   83e34:	4b63      	ldr	r3, [pc, #396]	; (83fc4 <udc_req_std_dev_get_descriptor+0x210>)
   83e36:	4798      	blx	r3
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   83e38:	e0ae      	b.n	83f98 <udc_req_std_dev_get_descriptor+0x1e4>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   83e3a:	4b61      	ldr	r3, [pc, #388]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83e3c:	681b      	ldr	r3, [r3, #0]
   83e3e:	2200      	movs	r2, #0
   83e40:	f042 0210 	orr.w	r2, r2, #16
   83e44:	709a      	strb	r2, [r3, #2]
   83e46:	2200      	movs	r2, #0
   83e48:	f042 0202 	orr.w	r2, r2, #2
   83e4c:	70da      	strb	r2, [r3, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   83e4e:	4b5c      	ldr	r3, [pc, #368]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83e50:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   83e52:	4b5b      	ldr	r3, [pc, #364]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83e54:	681b      	ldr	r3, [r3, #0]
   83e56:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   83e58:	b29b      	uxth	r3, r3
   83e5a:	4619      	mov	r1, r3
   83e5c:	4610      	mov	r0, r2
   83e5e:	4b59      	ldr	r3, [pc, #356]	; (83fc4 <udc_req_std_dev_get_descriptor+0x210>)
   83e60:	4798      	blx	r3
		break;
   83e62:	e099      	b.n	83f98 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   83e64:	4b55      	ldr	r3, [pc, #340]	; (83fbc <udc_req_std_dev_get_descriptor+0x208>)
   83e66:	4798      	blx	r3
   83e68:	4603      	mov	r3, r0
   83e6a:	2b00      	cmp	r3, #0
   83e6c:	d019      	beq.n	83ea2 <udc_req_std_dev_get_descriptor+0xee>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   83e6e:	4b54      	ldr	r3, [pc, #336]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83e70:	689b      	ldr	r3, [r3, #8]
   83e72:	7c5b      	ldrb	r3, [r3, #17]
   83e74:	79fa      	ldrb	r2, [r7, #7]
   83e76:	429a      	cmp	r2, r3
   83e78:	d301      	bcc.n	83e7e <udc_req_std_dev_get_descriptor+0xca>
					bNumConfigurations) {
				return false;
   83e7a:	2300      	movs	r3, #0
   83e7c:	e097      	b.n	83fae <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83e7e:	4b50      	ldr	r3, [pc, #320]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83e80:	691a      	ldr	r2, [r3, #16]
   83e82:	79fb      	ldrb	r3, [r7, #7]
   83e84:	00db      	lsls	r3, r3, #3
   83e86:	4413      	add	r3, r2
   83e88:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   83e8a:	4b4d      	ldr	r3, [pc, #308]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83e8c:	691a      	ldr	r2, [r3, #16]
   83e8e:	79fb      	ldrb	r3, [r7, #7]
   83e90:	00db      	lsls	r3, r3, #3
   83e92:	4413      	add	r3, r2
   83e94:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83e96:	885b      	ldrh	r3, [r3, #2]
   83e98:	b29b      	uxth	r3, r3
   83e9a:	4619      	mov	r1, r3
   83e9c:	4b49      	ldr	r3, [pc, #292]	; (83fc4 <udc_req_std_dev_get_descriptor+0x210>)
   83e9e:	4798      	blx	r3
   83ea0:	e018      	b.n	83ed4 <udc_req_std_dev_get_descriptor+0x120>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   83ea2:	4b47      	ldr	r3, [pc, #284]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83ea4:	681b      	ldr	r3, [r3, #0]
   83ea6:	7c5b      	ldrb	r3, [r3, #17]
   83ea8:	79fa      	ldrb	r2, [r7, #7]
   83eaa:	429a      	cmp	r2, r3
   83eac:	d301      	bcc.n	83eb2 <udc_req_std_dev_get_descriptor+0xfe>
					bNumConfigurations) {
				return false;
   83eae:	2300      	movs	r3, #0
   83eb0:	e07d      	b.n	83fae <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83eb2:	4b43      	ldr	r3, [pc, #268]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83eb4:	685a      	ldr	r2, [r3, #4]
   83eb6:	79fb      	ldrb	r3, [r7, #7]
   83eb8:	00db      	lsls	r3, r3, #3
   83eba:	4413      	add	r3, r2
   83ebc:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   83ebe:	4b40      	ldr	r3, [pc, #256]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83ec0:	685a      	ldr	r2, [r3, #4]
   83ec2:	79fb      	ldrb	r3, [r7, #7]
   83ec4:	00db      	lsls	r3, r3, #3
   83ec6:	4413      	add	r3, r2
   83ec8:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83eca:	885b      	ldrh	r3, [r3, #2]
   83ecc:	b29b      	uxth	r3, r3
   83ece:	4619      	mov	r1, r3
   83ed0:	4b3c      	ldr	r3, [pc, #240]	; (83fc4 <udc_req_std_dev_get_descriptor+0x210>)
   83ed2:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83ed4:	4b38      	ldr	r3, [pc, #224]	; (83fb8 <udc_req_std_dev_get_descriptor+0x204>)
   83ed6:	689b      	ldr	r3, [r3, #8]
   83ed8:	2202      	movs	r2, #2
   83eda:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   83edc:	e05c      	b.n	83f98 <udc_req_std_dev_get_descriptor+0x1e4>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   83ede:	4b38      	ldr	r3, [pc, #224]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83ee0:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   83ee2:	4b37      	ldr	r3, [pc, #220]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83ee4:	68db      	ldr	r3, [r3, #12]
   83ee6:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   83ee8:	b29b      	uxth	r3, r3
   83eea:	4619      	mov	r1, r3
   83eec:	4610      	mov	r0, r2
   83eee:	4b35      	ldr	r3, [pc, #212]	; (83fc4 <udc_req_std_dev_get_descriptor+0x210>)
   83ef0:	4798      	blx	r3
		break;
   83ef2:	e051      	b.n	83f98 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   83ef4:	4b31      	ldr	r3, [pc, #196]	; (83fbc <udc_req_std_dev_get_descriptor+0x208>)
   83ef6:	4798      	blx	r3
   83ef8:	4603      	mov	r3, r0
   83efa:	f083 0301 	eor.w	r3, r3, #1
   83efe:	b2db      	uxtb	r3, r3
   83f00:	2b00      	cmp	r3, #0
   83f02:	d019      	beq.n	83f38 <udc_req_std_dev_get_descriptor+0x184>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   83f04:	4b2e      	ldr	r3, [pc, #184]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83f06:	689b      	ldr	r3, [r3, #8]
   83f08:	7c5b      	ldrb	r3, [r3, #17]
   83f0a:	79fa      	ldrb	r2, [r7, #7]
   83f0c:	429a      	cmp	r2, r3
   83f0e:	d301      	bcc.n	83f14 <udc_req_std_dev_get_descriptor+0x160>
					bNumConfigurations) {
				return false;
   83f10:	2300      	movs	r3, #0
   83f12:	e04c      	b.n	83fae <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83f14:	4b2a      	ldr	r3, [pc, #168]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83f16:	691a      	ldr	r2, [r3, #16]
   83f18:	79fb      	ldrb	r3, [r7, #7]
   83f1a:	00db      	lsls	r3, r3, #3
   83f1c:	4413      	add	r3, r2
   83f1e:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   83f20:	4b27      	ldr	r3, [pc, #156]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83f22:	691a      	ldr	r2, [r3, #16]
   83f24:	79fb      	ldrb	r3, [r7, #7]
   83f26:	00db      	lsls	r3, r3, #3
   83f28:	4413      	add	r3, r2
   83f2a:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83f2c:	885b      	ldrh	r3, [r3, #2]
   83f2e:	b29b      	uxth	r3, r3
   83f30:	4619      	mov	r1, r3
   83f32:	4b24      	ldr	r3, [pc, #144]	; (83fc4 <udc_req_std_dev_get_descriptor+0x210>)
   83f34:	4798      	blx	r3
   83f36:	e018      	b.n	83f6a <udc_req_std_dev_get_descriptor+0x1b6>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   83f38:	4b21      	ldr	r3, [pc, #132]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83f3a:	681b      	ldr	r3, [r3, #0]
   83f3c:	7c5b      	ldrb	r3, [r3, #17]
   83f3e:	79fa      	ldrb	r2, [r7, #7]
   83f40:	429a      	cmp	r2, r3
   83f42:	d301      	bcc.n	83f48 <udc_req_std_dev_get_descriptor+0x194>
					bNumConfigurations) {
				return false;
   83f44:	2300      	movs	r3, #0
   83f46:	e032      	b.n	83fae <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83f48:	4b1d      	ldr	r3, [pc, #116]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83f4a:	685a      	ldr	r2, [r3, #4]
   83f4c:	79fb      	ldrb	r3, [r7, #7]
   83f4e:	00db      	lsls	r3, r3, #3
   83f50:	4413      	add	r3, r2
   83f52:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   83f54:	4b1a      	ldr	r3, [pc, #104]	; (83fc0 <udc_req_std_dev_get_descriptor+0x20c>)
   83f56:	685a      	ldr	r2, [r3, #4]
   83f58:	79fb      	ldrb	r3, [r7, #7]
   83f5a:	00db      	lsls	r3, r3, #3
   83f5c:	4413      	add	r3, r2
   83f5e:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83f60:	885b      	ldrh	r3, [r3, #2]
   83f62:	b29b      	uxth	r3, r3
   83f64:	4619      	mov	r1, r3
   83f66:	4b17      	ldr	r3, [pc, #92]	; (83fc4 <udc_req_std_dev_get_descriptor+0x210>)
   83f68:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83f6a:	4b13      	ldr	r3, [pc, #76]	; (83fb8 <udc_req_std_dev_get_descriptor+0x204>)
   83f6c:	689b      	ldr	r3, [r3, #8]
   83f6e:	2207      	movs	r2, #7
   83f70:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   83f72:	e011      	b.n	83f98 <udc_req_std_dev_get_descriptor+0x1e4>
#endif
	case USB_DT_BOS: //bos descriptor
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   83f74:	2121      	movs	r1, #33	; 0x21
   83f76:	4814      	ldr	r0, [pc, #80]	; (83fc8 <udc_req_std_dev_get_descriptor+0x214>)
   83f78:	4b12      	ldr	r3, [pc, #72]	; (83fc4 <udc_req_std_dev_get_descriptor+0x210>)
   83f7a:	4798      	blx	r3
			0x21);
		break;
   83f7c:	e00c      	b.n	83f98 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   83f7e:	4b13      	ldr	r3, [pc, #76]	; (83fcc <udc_req_std_dev_get_descriptor+0x218>)
   83f80:	4798      	blx	r3
   83f82:	4603      	mov	r3, r0
   83f84:	f083 0301 	eor.w	r3, r3, #1
   83f88:	b2db      	uxtb	r3, r3
   83f8a:	2b00      	cmp	r3, #0
   83f8c:	d003      	beq.n	83f96 <udc_req_std_dev_get_descriptor+0x1e2>
			return false;
   83f8e:	2300      	movs	r3, #0
   83f90:	e00d      	b.n	83fae <udc_req_std_dev_get_descriptor+0x1fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   83f92:	2300      	movs	r3, #0
   83f94:	e00b      	b.n	83fae <udc_req_std_dev_get_descriptor+0x1fa>
		break;
   83f96:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   83f98:	4b07      	ldr	r3, [pc, #28]	; (83fb8 <udc_req_std_dev_get_descriptor+0x204>)
   83f9a:	88da      	ldrh	r2, [r3, #6]
   83f9c:	4b06      	ldr	r3, [pc, #24]	; (83fb8 <udc_req_std_dev_get_descriptor+0x204>)
   83f9e:	899b      	ldrh	r3, [r3, #12]
   83fa0:	429a      	cmp	r2, r3
   83fa2:	d203      	bcs.n	83fac <udc_req_std_dev_get_descriptor+0x1f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83fa4:	4b04      	ldr	r3, [pc, #16]	; (83fb8 <udc_req_std_dev_get_descriptor+0x204>)
   83fa6:	88da      	ldrh	r2, [r3, #6]
   83fa8:	4b03      	ldr	r3, [pc, #12]	; (83fb8 <udc_req_std_dev_get_descriptor+0x204>)
   83faa:	819a      	strh	r2, [r3, #12]
	}
	return true;
   83fac:	2301      	movs	r3, #1
}
   83fae:	4618      	mov	r0, r3
   83fb0:	3708      	adds	r7, #8
   83fb2:	46bd      	mov	sp, r7
   83fb4:	bd80      	pop	{r7, pc}
   83fb6:	bf00      	nop
   83fb8:	20001828 	.word	0x20001828
   83fbc:	00084bc1 	.word	0x00084bc1
   83fc0:	20000428 	.word	0x20000428
   83fc4:	00084c45 	.word	0x00084c45
   83fc8:	0008d48c 	.word	0x0008d48c
   83fcc:	00083ce9 	.word	0x00083ce9

00083fd0 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   83fd0:	b580      	push	{r7, lr}
   83fd2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   83fd4:	4b06      	ldr	r3, [pc, #24]	; (83ff0 <udc_req_std_dev_get_configuration+0x20>)
   83fd6:	88db      	ldrh	r3, [r3, #6]
   83fd8:	2b01      	cmp	r3, #1
   83fda:	d001      	beq.n	83fe0 <udc_req_std_dev_get_configuration+0x10>
		return false;
   83fdc:	2300      	movs	r3, #0
   83fde:	e004      	b.n	83fea <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   83fe0:	2101      	movs	r1, #1
   83fe2:	4804      	ldr	r0, [pc, #16]	; (83ff4 <udc_req_std_dev_get_configuration+0x24>)
   83fe4:	4b04      	ldr	r3, [pc, #16]	; (83ff8 <udc_req_std_dev_get_configuration+0x28>)
   83fe6:	4798      	blx	r3
	return true;
   83fe8:	2301      	movs	r3, #1
}
   83fea:	4618      	mov	r0, r3
   83fec:	bd80      	pop	{r7, pc}
   83fee:	bf00      	nop
   83ff0:	20001828 	.word	0x20001828
   83ff4:	20001336 	.word	0x20001336
   83ff8:	00084c45 	.word	0x00084c45

00083ffc <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   83ffc:	b580      	push	{r7, lr}
   83ffe:	b082      	sub	sp, #8
   84000:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   84002:	4b37      	ldr	r3, [pc, #220]	; (840e0 <udc_req_std_dev_set_configuration+0xe4>)
   84004:	88db      	ldrh	r3, [r3, #6]
   84006:	2b00      	cmp	r3, #0
   84008:	d001      	beq.n	8400e <udc_req_std_dev_set_configuration+0x12>
		return false;
   8400a:	2300      	movs	r3, #0
   8400c:	e063      	b.n	840d6 <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   8400e:	4b35      	ldr	r3, [pc, #212]	; (840e4 <udc_req_std_dev_set_configuration+0xe8>)
   84010:	4798      	blx	r3
   84012:	4603      	mov	r3, r0
   84014:	2b00      	cmp	r3, #0
   84016:	d101      	bne.n	8401c <udc_req_std_dev_set_configuration+0x20>
		return false;
   84018:	2300      	movs	r3, #0
   8401a:	e05c      	b.n	840d6 <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   8401c:	4b32      	ldr	r3, [pc, #200]	; (840e8 <udc_req_std_dev_set_configuration+0xec>)
   8401e:	4798      	blx	r3
   84020:	4603      	mov	r3, r0
   84022:	2b00      	cmp	r3, #0
   84024:	d009      	beq.n	8403a <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84026:	4b2e      	ldr	r3, [pc, #184]	; (840e0 <udc_req_std_dev_set_configuration+0xe4>)
   84028:	885b      	ldrh	r3, [r3, #2]
   8402a:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   8402c:	4a2f      	ldr	r2, [pc, #188]	; (840ec <udc_req_std_dev_set_configuration+0xf0>)
   8402e:	6892      	ldr	r2, [r2, #8]
   84030:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84032:	4293      	cmp	r3, r2
   84034:	dd0b      	ble.n	8404e <udc_req_std_dev_set_configuration+0x52>
			return false;
   84036:	2300      	movs	r3, #0
   84038:	e04d      	b.n	840d6 <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8403a:	4b29      	ldr	r3, [pc, #164]	; (840e0 <udc_req_std_dev_set_configuration+0xe4>)
   8403c:	885b      	ldrh	r3, [r3, #2]
   8403e:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   84040:	4a2a      	ldr	r2, [pc, #168]	; (840ec <udc_req_std_dev_set_configuration+0xf0>)
   84042:	6812      	ldr	r2, [r2, #0]
   84044:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   84046:	4293      	cmp	r3, r2
   84048:	dd01      	ble.n	8404e <udc_req_std_dev_set_configuration+0x52>
			return false;
   8404a:	2300      	movs	r3, #0
   8404c:	e043      	b.n	840d6 <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   8404e:	4b28      	ldr	r3, [pc, #160]	; (840f0 <udc_req_std_dev_set_configuration+0xf4>)
   84050:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   84052:	4b23      	ldr	r3, [pc, #140]	; (840e0 <udc_req_std_dev_set_configuration+0xe4>)
   84054:	885b      	ldrh	r3, [r3, #2]
   84056:	b2da      	uxtb	r2, r3
   84058:	4b26      	ldr	r3, [pc, #152]	; (840f4 <udc_req_std_dev_set_configuration+0xf8>)
   8405a:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   8405c:	4b25      	ldr	r3, [pc, #148]	; (840f4 <udc_req_std_dev_set_configuration+0xf8>)
   8405e:	781b      	ldrb	r3, [r3, #0]
   84060:	2b00      	cmp	r3, #0
   84062:	d101      	bne.n	84068 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   84064:	2301      	movs	r3, #1
   84066:	e036      	b.n	840d6 <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   84068:	4b1f      	ldr	r3, [pc, #124]	; (840e8 <udc_req_std_dev_set_configuration+0xec>)
   8406a:	4798      	blx	r3
   8406c:	4603      	mov	r3, r0
   8406e:	2b00      	cmp	r3, #0
   84070:	d00b      	beq.n	8408a <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   84072:	4b1e      	ldr	r3, [pc, #120]	; (840ec <udc_req_std_dev_set_configuration+0xf0>)
   84074:	691a      	ldr	r2, [r3, #16]
   84076:	4b1f      	ldr	r3, [pc, #124]	; (840f4 <udc_req_std_dev_set_configuration+0xf8>)
   84078:	781b      	ldrb	r3, [r3, #0]
   8407a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   8407e:	3b01      	subs	r3, #1
   84080:	00db      	lsls	r3, r3, #3
   84082:	4413      	add	r3, r2
   84084:	4a1c      	ldr	r2, [pc, #112]	; (840f8 <udc_req_std_dev_set_configuration+0xfc>)
   84086:	6013      	str	r3, [r2, #0]
   84088:	e00a      	b.n	840a0 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   8408a:	4b18      	ldr	r3, [pc, #96]	; (840ec <udc_req_std_dev_set_configuration+0xf0>)
   8408c:	685a      	ldr	r2, [r3, #4]
   8408e:	4b19      	ldr	r3, [pc, #100]	; (840f4 <udc_req_std_dev_set_configuration+0xf8>)
   84090:	781b      	ldrb	r3, [r3, #0]
   84092:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   84096:	3b01      	subs	r3, #1
   84098:	00db      	lsls	r3, r3, #3
   8409a:	4413      	add	r3, r2
   8409c:	4a16      	ldr	r2, [pc, #88]	; (840f8 <udc_req_std_dev_set_configuration+0xfc>)
   8409e:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   840a0:	2300      	movs	r3, #0
   840a2:	71fb      	strb	r3, [r7, #7]
   840a4:	e00f      	b.n	840c6 <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   840a6:	79fb      	ldrb	r3, [r7, #7]
   840a8:	2100      	movs	r1, #0
   840aa:	4618      	mov	r0, r3
   840ac:	4b13      	ldr	r3, [pc, #76]	; (840fc <udc_req_std_dev_set_configuration+0x100>)
   840ae:	4798      	blx	r3
   840b0:	4603      	mov	r3, r0
   840b2:	f083 0301 	eor.w	r3, r3, #1
   840b6:	b2db      	uxtb	r3, r3
   840b8:	2b00      	cmp	r3, #0
   840ba:	d001      	beq.n	840c0 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   840bc:	2300      	movs	r3, #0
   840be:	e00a      	b.n	840d6 <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   840c0:	79fb      	ldrb	r3, [r7, #7]
   840c2:	3301      	adds	r3, #1
   840c4:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   840c6:	4b0c      	ldr	r3, [pc, #48]	; (840f8 <udc_req_std_dev_set_configuration+0xfc>)
   840c8:	681b      	ldr	r3, [r3, #0]
   840ca:	681b      	ldr	r3, [r3, #0]
   840cc:	791b      	ldrb	r3, [r3, #4]
   840ce:	79fa      	ldrb	r2, [r7, #7]
   840d0:	429a      	cmp	r2, r3
   840d2:	d3e8      	bcc.n	840a6 <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   840d4:	2301      	movs	r3, #1
}
   840d6:	4618      	mov	r0, r3
   840d8:	3708      	adds	r7, #8
   840da:	46bd      	mov	sp, r7
   840dc:	bd80      	pop	{r7, pc}
   840de:	bf00      	nop
   840e0:	20001828 	.word	0x20001828
   840e4:	00084c29 	.word	0x00084c29
   840e8:	00084bc1 	.word	0x00084bc1
   840ec:	20000428 	.word	0x20000428
   840f0:	00083a01 	.word	0x00083a01
   840f4:	20001336 	.word	0x20001336
   840f8:	20001338 	.word	0x20001338
   840fc:	00083959 	.word	0x00083959

00084100 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   84100:	b580      	push	{r7, lr}
   84102:	b082      	sub	sp, #8
   84104:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   84106:	4b1e      	ldr	r3, [pc, #120]	; (84180 <udc_req_std_iface_get_setting+0x80>)
   84108:	88db      	ldrh	r3, [r3, #6]
   8410a:	2b01      	cmp	r3, #1
   8410c:	d001      	beq.n	84112 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   8410e:	2300      	movs	r3, #0
   84110:	e032      	b.n	84178 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   84112:	4b1c      	ldr	r3, [pc, #112]	; (84184 <udc_req_std_iface_get_setting+0x84>)
   84114:	781b      	ldrb	r3, [r3, #0]
   84116:	2b00      	cmp	r3, #0
   84118:	d101      	bne.n	8411e <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   8411a:	2300      	movs	r3, #0
   8411c:	e02c      	b.n	84178 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8411e:	4b18      	ldr	r3, [pc, #96]	; (84180 <udc_req_std_iface_get_setting+0x80>)
   84120:	889b      	ldrh	r3, [r3, #4]
   84122:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84124:	4b18      	ldr	r3, [pc, #96]	; (84188 <udc_req_std_iface_get_setting+0x88>)
   84126:	681b      	ldr	r3, [r3, #0]
   84128:	681b      	ldr	r3, [r3, #0]
   8412a:	791b      	ldrb	r3, [r3, #4]
   8412c:	79fa      	ldrb	r2, [r7, #7]
   8412e:	429a      	cmp	r2, r3
   84130:	d301      	bcc.n	84136 <udc_req_std_iface_get_setting+0x36>
		return false;
   84132:	2300      	movs	r3, #0
   84134:	e020      	b.n	84178 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   84136:	79fb      	ldrb	r3, [r7, #7]
   84138:	2100      	movs	r1, #0
   8413a:	4618      	mov	r0, r3
   8413c:	4b13      	ldr	r3, [pc, #76]	; (8418c <udc_req_std_iface_get_setting+0x8c>)
   8413e:	4798      	blx	r3
   84140:	4603      	mov	r3, r0
   84142:	f083 0301 	eor.w	r3, r3, #1
   84146:	b2db      	uxtb	r3, r3
   84148:	2b00      	cmp	r3, #0
   8414a:	d001      	beq.n	84150 <udc_req_std_iface_get_setting+0x50>
		return false;
   8414c:	2300      	movs	r3, #0
   8414e:	e013      	b.n	84178 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84150:	4b0d      	ldr	r3, [pc, #52]	; (84188 <udc_req_std_iface_get_setting+0x88>)
   84152:	681b      	ldr	r3, [r3, #0]
   84154:	685a      	ldr	r2, [r3, #4]
   84156:	79fb      	ldrb	r3, [r7, #7]
   84158:	009b      	lsls	r3, r3, #2
   8415a:	4413      	add	r3, r2
   8415c:	681b      	ldr	r3, [r3, #0]
   8415e:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   84160:	683b      	ldr	r3, [r7, #0]
   84162:	68db      	ldr	r3, [r3, #12]
   84164:	4798      	blx	r3
   84166:	4603      	mov	r3, r0
   84168:	461a      	mov	r2, r3
   8416a:	4b09      	ldr	r3, [pc, #36]	; (84190 <udc_req_std_iface_get_setting+0x90>)
   8416c:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   8416e:	2101      	movs	r1, #1
   84170:	4807      	ldr	r0, [pc, #28]	; (84190 <udc_req_std_iface_get_setting+0x90>)
   84172:	4b08      	ldr	r3, [pc, #32]	; (84194 <udc_req_std_iface_get_setting+0x94>)
   84174:	4798      	blx	r3
	return true;
   84176:	2301      	movs	r3, #1
}
   84178:	4618      	mov	r0, r3
   8417a:	3708      	adds	r7, #8
   8417c:	46bd      	mov	sp, r7
   8417e:	bd80      	pop	{r7, pc}
   84180:	20001828 	.word	0x20001828
   84184:	20001336 	.word	0x20001336
   84188:	20001338 	.word	0x20001338
   8418c:	0008381d 	.word	0x0008381d
   84190:	20001342 	.word	0x20001342
   84194:	00084c45 	.word	0x00084c45

00084198 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   84198:	b580      	push	{r7, lr}
   8419a:	b082      	sub	sp, #8
   8419c:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   8419e:	4b14      	ldr	r3, [pc, #80]	; (841f0 <udc_req_std_iface_set_setting+0x58>)
   841a0:	88db      	ldrh	r3, [r3, #6]
   841a2:	2b00      	cmp	r3, #0
   841a4:	d001      	beq.n	841aa <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   841a6:	2300      	movs	r3, #0
   841a8:	e01e      	b.n	841e8 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   841aa:	4b12      	ldr	r3, [pc, #72]	; (841f4 <udc_req_std_iface_set_setting+0x5c>)
   841ac:	781b      	ldrb	r3, [r3, #0]
   841ae:	2b00      	cmp	r3, #0
   841b0:	d101      	bne.n	841b6 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   841b2:	2300      	movs	r3, #0
   841b4:	e018      	b.n	841e8 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   841b6:	4b0e      	ldr	r3, [pc, #56]	; (841f0 <udc_req_std_iface_set_setting+0x58>)
   841b8:	889b      	ldrh	r3, [r3, #4]
   841ba:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   841bc:	4b0c      	ldr	r3, [pc, #48]	; (841f0 <udc_req_std_iface_set_setting+0x58>)
   841be:	885b      	ldrh	r3, [r3, #2]
   841c0:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   841c2:	79fb      	ldrb	r3, [r7, #7]
   841c4:	4618      	mov	r0, r3
   841c6:	4b0c      	ldr	r3, [pc, #48]	; (841f8 <udc_req_std_iface_set_setting+0x60>)
   841c8:	4798      	blx	r3
   841ca:	4603      	mov	r3, r0
   841cc:	f083 0301 	eor.w	r3, r3, #1
   841d0:	b2db      	uxtb	r3, r3
   841d2:	2b00      	cmp	r3, #0
   841d4:	d001      	beq.n	841da <udc_req_std_iface_set_setting+0x42>
		return false;
   841d6:	2300      	movs	r3, #0
   841d8:	e006      	b.n	841e8 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   841da:	79ba      	ldrb	r2, [r7, #6]
   841dc:	79fb      	ldrb	r3, [r7, #7]
   841de:	4611      	mov	r1, r2
   841e0:	4618      	mov	r0, r3
   841e2:	4b06      	ldr	r3, [pc, #24]	; (841fc <udc_req_std_iface_set_setting+0x64>)
   841e4:	4798      	blx	r3
   841e6:	4603      	mov	r3, r0
}
   841e8:	4618      	mov	r0, r3
   841ea:	3708      	adds	r7, #8
   841ec:	46bd      	mov	sp, r7
   841ee:	bd80      	pop	{r7, pc}
   841f0:	20001828 	.word	0x20001828
   841f4:	20001336 	.word	0x20001336
   841f8:	000838b9 	.word	0x000838b9
   841fc:	00083959 	.word	0x00083959

00084200 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   84200:	b580      	push	{r7, lr}
   84202:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   84204:	4b55      	ldr	r3, [pc, #340]	; (8435c <udc_reqstd+0x15c>)
   84206:	781b      	ldrb	r3, [r3, #0]
   84208:	b25b      	sxtb	r3, r3
   8420a:	2b00      	cmp	r3, #0
   8420c:	da44      	bge.n	84298 <udc_reqstd+0x98>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   8420e:	4b53      	ldr	r3, [pc, #332]	; (8435c <udc_reqstd+0x15c>)
   84210:	88db      	ldrh	r3, [r3, #6]
   84212:	2b00      	cmp	r3, #0
   84214:	d101      	bne.n	8421a <udc_reqstd+0x1a>
			return false; // Error for USB host
   84216:	2300      	movs	r3, #0
   84218:	e09d      	b.n	84356 <udc_reqstd+0x156>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   8421a:	4b50      	ldr	r3, [pc, #320]	; (8435c <udc_reqstd+0x15c>)
   8421c:	781b      	ldrb	r3, [r3, #0]
   8421e:	f003 031f 	and.w	r3, r3, #31
   84222:	2b00      	cmp	r3, #0
   84224:	d116      	bne.n	84254 <udc_reqstd+0x54>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   84226:	4b4d      	ldr	r3, [pc, #308]	; (8435c <udc_reqstd+0x15c>)
   84228:	785b      	ldrb	r3, [r3, #1]
   8422a:	2b08      	cmp	r3, #8
   8422c:	d00e      	beq.n	8424c <udc_reqstd+0x4c>
   8422e:	2b08      	cmp	r3, #8
   84230:	dc12      	bgt.n	84258 <udc_reqstd+0x58>
   84232:	2b00      	cmp	r3, #0
   84234:	d002      	beq.n	8423c <udc_reqstd+0x3c>
   84236:	2b06      	cmp	r3, #6
   84238:	d004      	beq.n	84244 <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   8423a:	e00d      	b.n	84258 <udc_reqstd+0x58>
				return udc_req_std_dev_get_status();
   8423c:	4b48      	ldr	r3, [pc, #288]	; (84360 <udc_reqstd+0x160>)
   8423e:	4798      	blx	r3
   84240:	4603      	mov	r3, r0
   84242:	e088      	b.n	84356 <udc_reqstd+0x156>
				return udc_req_std_dev_get_descriptor();
   84244:	4b47      	ldr	r3, [pc, #284]	; (84364 <udc_reqstd+0x164>)
   84246:	4798      	blx	r3
   84248:	4603      	mov	r3, r0
   8424a:	e084      	b.n	84356 <udc_reqstd+0x156>
				return udc_req_std_dev_get_configuration();
   8424c:	4b46      	ldr	r3, [pc, #280]	; (84368 <udc_reqstd+0x168>)
   8424e:	4798      	blx	r3
   84250:	4603      	mov	r3, r0
   84252:	e080      	b.n	84356 <udc_reqstd+0x156>
			}
		}
   84254:	bf00      	nop
   84256:	e000      	b.n	8425a <udc_reqstd+0x5a>
				break;
   84258:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8425a:	4b40      	ldr	r3, [pc, #256]	; (8435c <udc_reqstd+0x15c>)
   8425c:	781b      	ldrb	r3, [r3, #0]
   8425e:	f003 031f 	and.w	r3, r3, #31
   84262:	2b01      	cmp	r3, #1
   84264:	d107      	bne.n	84276 <udc_reqstd+0x76>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   84266:	4b3d      	ldr	r3, [pc, #244]	; (8435c <udc_reqstd+0x15c>)
   84268:	785b      	ldrb	r3, [r3, #1]
   8426a:	2b0a      	cmp	r3, #10
   8426c:	d105      	bne.n	8427a <udc_reqstd+0x7a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   8426e:	4b3f      	ldr	r3, [pc, #252]	; (8436c <udc_reqstd+0x16c>)
   84270:	4798      	blx	r3
   84272:	4603      	mov	r3, r0
   84274:	e06f      	b.n	84356 <udc_reqstd+0x156>
			default:
				break;
			}
		}
   84276:	bf00      	nop
   84278:	e000      	b.n	8427c <udc_reqstd+0x7c>
				break;
   8427a:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   8427c:	4b37      	ldr	r3, [pc, #220]	; (8435c <udc_reqstd+0x15c>)
   8427e:	781b      	ldrb	r3, [r3, #0]
   84280:	f003 031f 	and.w	r3, r3, #31
   84284:	2b02      	cmp	r3, #2
   84286:	d160      	bne.n	8434a <udc_reqstd+0x14a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   84288:	4b34      	ldr	r3, [pc, #208]	; (8435c <udc_reqstd+0x15c>)
   8428a:	785b      	ldrb	r3, [r3, #1]
   8428c:	2b00      	cmp	r3, #0
   8428e:	d15e      	bne.n	8434e <udc_reqstd+0x14e>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   84290:	4b37      	ldr	r3, [pc, #220]	; (84370 <udc_reqstd+0x170>)
   84292:	4798      	blx	r3
   84294:	4603      	mov	r3, r0
   84296:	e05e      	b.n	84356 <udc_reqstd+0x156>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84298:	4b30      	ldr	r3, [pc, #192]	; (8435c <udc_reqstd+0x15c>)
   8429a:	781b      	ldrb	r3, [r3, #0]
   8429c:	f003 031f 	and.w	r3, r3, #31
   842a0:	2b00      	cmp	r3, #0
   842a2:	d129      	bne.n	842f8 <udc_reqstd+0xf8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   842a4:	4b2d      	ldr	r3, [pc, #180]	; (8435c <udc_reqstd+0x15c>)
   842a6:	785b      	ldrb	r3, [r3, #1]
   842a8:	3b01      	subs	r3, #1
   842aa:	2b08      	cmp	r3, #8
   842ac:	d826      	bhi.n	842fc <udc_reqstd+0xfc>
   842ae:	a201      	add	r2, pc, #4	; (adr r2, 842b4 <udc_reqstd+0xb4>)
   842b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   842b4:	000842e1 	.word	0x000842e1
   842b8:	000842fd 	.word	0x000842fd
   842bc:	000842e9 	.word	0x000842e9
   842c0:	000842fd 	.word	0x000842fd
   842c4:	000842d9 	.word	0x000842d9
   842c8:	000842fd 	.word	0x000842fd
   842cc:	000842fd 	.word	0x000842fd
   842d0:	000842fd 	.word	0x000842fd
   842d4:	000842f1 	.word	0x000842f1
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   842d8:	4b26      	ldr	r3, [pc, #152]	; (84374 <udc_reqstd+0x174>)
   842da:	4798      	blx	r3
   842dc:	4603      	mov	r3, r0
   842de:	e03a      	b.n	84356 <udc_reqstd+0x156>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   842e0:	4b25      	ldr	r3, [pc, #148]	; (84378 <udc_reqstd+0x178>)
   842e2:	4798      	blx	r3
   842e4:	4603      	mov	r3, r0
   842e6:	e036      	b.n	84356 <udc_reqstd+0x156>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   842e8:	4b24      	ldr	r3, [pc, #144]	; (8437c <udc_reqstd+0x17c>)
   842ea:	4798      	blx	r3
   842ec:	4603      	mov	r3, r0
   842ee:	e032      	b.n	84356 <udc_reqstd+0x156>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   842f0:	4b23      	ldr	r3, [pc, #140]	; (84380 <udc_reqstd+0x180>)
   842f2:	4798      	blx	r3
   842f4:	4603      	mov	r3, r0
   842f6:	e02e      	b.n	84356 <udc_reqstd+0x156>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   842f8:	bf00      	nop
   842fa:	e000      	b.n	842fe <udc_reqstd+0xfe>
				break;
   842fc:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   842fe:	4b17      	ldr	r3, [pc, #92]	; (8435c <udc_reqstd+0x15c>)
   84300:	781b      	ldrb	r3, [r3, #0]
   84302:	f003 031f 	and.w	r3, r3, #31
   84306:	2b01      	cmp	r3, #1
   84308:	d107      	bne.n	8431a <udc_reqstd+0x11a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   8430a:	4b14      	ldr	r3, [pc, #80]	; (8435c <udc_reqstd+0x15c>)
   8430c:	785b      	ldrb	r3, [r3, #1]
   8430e:	2b0b      	cmp	r3, #11
   84310:	d105      	bne.n	8431e <udc_reqstd+0x11e>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   84312:	4b1c      	ldr	r3, [pc, #112]	; (84384 <udc_reqstd+0x184>)
   84314:	4798      	blx	r3
   84316:	4603      	mov	r3, r0
   84318:	e01d      	b.n	84356 <udc_reqstd+0x156>
			default:
				break;
			}
		}
   8431a:	bf00      	nop
   8431c:	e000      	b.n	84320 <udc_reqstd+0x120>
				break;
   8431e:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   84320:	4b0e      	ldr	r3, [pc, #56]	; (8435c <udc_reqstd+0x15c>)
   84322:	781b      	ldrb	r3, [r3, #0]
   84324:	f003 031f 	and.w	r3, r3, #31
   84328:	2b02      	cmp	r3, #2
   8432a:	d112      	bne.n	84352 <udc_reqstd+0x152>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   8432c:	4b0b      	ldr	r3, [pc, #44]	; (8435c <udc_reqstd+0x15c>)
   8432e:	785b      	ldrb	r3, [r3, #1]
   84330:	2b01      	cmp	r3, #1
   84332:	d002      	beq.n	8433a <udc_reqstd+0x13a>
   84334:	2b03      	cmp	r3, #3
   84336:	d004      	beq.n	84342 <udc_reqstd+0x142>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   84338:	e00c      	b.n	84354 <udc_reqstd+0x154>
				return udc_req_std_ep_clear_feature();
   8433a:	4b13      	ldr	r3, [pc, #76]	; (84388 <udc_reqstd+0x188>)
   8433c:	4798      	blx	r3
   8433e:	4603      	mov	r3, r0
   84340:	e009      	b.n	84356 <udc_reqstd+0x156>
				return udc_req_std_ep_set_feature();
   84342:	4b12      	ldr	r3, [pc, #72]	; (8438c <udc_reqstd+0x18c>)
   84344:	4798      	blx	r3
   84346:	4603      	mov	r3, r0
   84348:	e005      	b.n	84356 <udc_reqstd+0x156>
		}
   8434a:	bf00      	nop
   8434c:	e002      	b.n	84354 <udc_reqstd+0x154>
				break;
   8434e:	bf00      	nop
   84350:	e000      	b.n	84354 <udc_reqstd+0x154>
			}
		}
   84352:	bf00      	nop
#endif
	}
	return false;
   84354:	2300      	movs	r3, #0
}
   84356:	4618      	mov	r0, r3
   84358:	bd80      	pop	{r7, pc}
   8435a:	bf00      	nop
   8435c:	20001828 	.word	0x20001828
   84360:	00083ab5 	.word	0x00083ab5
   84364:	00083db5 	.word	0x00083db5
   84368:	00083fd1 	.word	0x00083fd1
   8436c:	00084101 	.word	0x00084101
   84370:	00083ae1 	.word	0x00083ae1
   84374:	00083cc1 	.word	0x00083cc1
   84378:	00083b25 	.word	0x00083b25
   8437c:	00083b99 	.word	0x00083b99
   84380:	00083ffd 	.word	0x00083ffd
   84384:	00084199 	.word	0x00084199
   84388:	00083b61 	.word	0x00083b61
   8438c:	00083c55 	.word	0x00083c55

00084390 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   84390:	b580      	push	{r7, lr}
   84392:	b082      	sub	sp, #8
   84394:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   84396:	4b20      	ldr	r3, [pc, #128]	; (84418 <udc_req_iface+0x88>)
   84398:	781b      	ldrb	r3, [r3, #0]
   8439a:	2b00      	cmp	r3, #0
   8439c:	d101      	bne.n	843a2 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   8439e:	2300      	movs	r3, #0
   843a0:	e036      	b.n	84410 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   843a2:	4b1e      	ldr	r3, [pc, #120]	; (8441c <udc_req_iface+0x8c>)
   843a4:	889b      	ldrh	r3, [r3, #4]
   843a6:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   843a8:	4b1d      	ldr	r3, [pc, #116]	; (84420 <udc_req_iface+0x90>)
   843aa:	681b      	ldr	r3, [r3, #0]
   843ac:	681b      	ldr	r3, [r3, #0]
   843ae:	791b      	ldrb	r3, [r3, #4]
   843b0:	79fa      	ldrb	r2, [r7, #7]
   843b2:	429a      	cmp	r2, r3
   843b4:	d301      	bcc.n	843ba <udc_req_iface+0x2a>
		return false;
   843b6:	2300      	movs	r3, #0
   843b8:	e02a      	b.n	84410 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   843ba:	79fb      	ldrb	r3, [r7, #7]
   843bc:	2100      	movs	r1, #0
   843be:	4618      	mov	r0, r3
   843c0:	4b18      	ldr	r3, [pc, #96]	; (84424 <udc_req_iface+0x94>)
   843c2:	4798      	blx	r3
   843c4:	4603      	mov	r3, r0
   843c6:	f083 0301 	eor.w	r3, r3, #1
   843ca:	b2db      	uxtb	r3, r3
   843cc:	2b00      	cmp	r3, #0
   843ce:	d001      	beq.n	843d4 <udc_req_iface+0x44>
		return false;
   843d0:	2300      	movs	r3, #0
   843d2:	e01d      	b.n	84410 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   843d4:	4b12      	ldr	r3, [pc, #72]	; (84420 <udc_req_iface+0x90>)
   843d6:	681b      	ldr	r3, [r3, #0]
   843d8:	685a      	ldr	r2, [r3, #4]
   843da:	79fb      	ldrb	r3, [r7, #7]
   843dc:	009b      	lsls	r3, r3, #2
   843de:	4413      	add	r3, r2
   843e0:	681b      	ldr	r3, [r3, #0]
   843e2:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   843e4:	683b      	ldr	r3, [r7, #0]
   843e6:	68db      	ldr	r3, [r3, #12]
   843e8:	4798      	blx	r3
   843ea:	4603      	mov	r3, r0
   843ec:	461a      	mov	r2, r3
   843ee:	79fb      	ldrb	r3, [r7, #7]
   843f0:	4611      	mov	r1, r2
   843f2:	4618      	mov	r0, r3
   843f4:	4b0b      	ldr	r3, [pc, #44]	; (84424 <udc_req_iface+0x94>)
   843f6:	4798      	blx	r3
   843f8:	4603      	mov	r3, r0
   843fa:	f083 0301 	eor.w	r3, r3, #1
   843fe:	b2db      	uxtb	r3, r3
   84400:	2b00      	cmp	r3, #0
   84402:	d001      	beq.n	84408 <udc_req_iface+0x78>
		return false;
   84404:	2300      	movs	r3, #0
   84406:	e003      	b.n	84410 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   84408:	683b      	ldr	r3, [r7, #0]
   8440a:	689b      	ldr	r3, [r3, #8]
   8440c:	4798      	blx	r3
   8440e:	4603      	mov	r3, r0
}
   84410:	4618      	mov	r0, r3
   84412:	3708      	adds	r7, #8
   84414:	46bd      	mov	sp, r7
   84416:	bd80      	pop	{r7, pc}
   84418:	20001336 	.word	0x20001336
   8441c:	20001828 	.word	0x20001828
   84420:	20001338 	.word	0x20001338
   84424:	0008381d 	.word	0x0008381d

00084428 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   84428:	b580      	push	{r7, lr}
   8442a:	b082      	sub	sp, #8
   8442c:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   8442e:	4b1e      	ldr	r3, [pc, #120]	; (844a8 <udc_req_ep+0x80>)
   84430:	781b      	ldrb	r3, [r3, #0]
   84432:	2b00      	cmp	r3, #0
   84434:	d101      	bne.n	8443a <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   84436:	2300      	movs	r3, #0
   84438:	e032      	b.n	844a0 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8443a:	4b1c      	ldr	r3, [pc, #112]	; (844ac <udc_req_ep+0x84>)
   8443c:	889b      	ldrh	r3, [r3, #4]
   8443e:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84440:	2300      	movs	r3, #0
   84442:	71fb      	strb	r3, [r7, #7]
   84444:	e024      	b.n	84490 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   84446:	4b1a      	ldr	r3, [pc, #104]	; (844b0 <udc_req_ep+0x88>)
   84448:	681b      	ldr	r3, [r3, #0]
   8444a:	685a      	ldr	r2, [r3, #4]
   8444c:	79fb      	ldrb	r3, [r7, #7]
   8444e:	009b      	lsls	r3, r3, #2
   84450:	4413      	add	r3, r2
   84452:	681b      	ldr	r3, [r3, #0]
   84454:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84456:	683b      	ldr	r3, [r7, #0]
   84458:	68db      	ldr	r3, [r3, #12]
   8445a:	4798      	blx	r3
   8445c:	4603      	mov	r3, r0
   8445e:	461a      	mov	r2, r3
   84460:	79fb      	ldrb	r3, [r7, #7]
   84462:	4611      	mov	r1, r2
   84464:	4618      	mov	r0, r3
   84466:	4b13      	ldr	r3, [pc, #76]	; (844b4 <udc_req_ep+0x8c>)
   84468:	4798      	blx	r3
   8446a:	4603      	mov	r3, r0
   8446c:	f083 0301 	eor.w	r3, r3, #1
   84470:	b2db      	uxtb	r3, r3
   84472:	2b00      	cmp	r3, #0
   84474:	d001      	beq.n	8447a <udc_req_ep+0x52>
			return false;
   84476:	2300      	movs	r3, #0
   84478:	e012      	b.n	844a0 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   8447a:	683b      	ldr	r3, [r7, #0]
   8447c:	689b      	ldr	r3, [r3, #8]
   8447e:	4798      	blx	r3
   84480:	4603      	mov	r3, r0
   84482:	2b00      	cmp	r3, #0
   84484:	d001      	beq.n	8448a <udc_req_ep+0x62>
			return true;
   84486:	2301      	movs	r3, #1
   84488:	e00a      	b.n	844a0 <udc_req_ep+0x78>
			iface_num++) {
   8448a:	79fb      	ldrb	r3, [r7, #7]
   8448c:	3301      	adds	r3, #1
   8448e:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   84490:	4b07      	ldr	r3, [pc, #28]	; (844b0 <udc_req_ep+0x88>)
   84492:	681b      	ldr	r3, [r3, #0]
   84494:	681b      	ldr	r3, [r3, #0]
   84496:	791b      	ldrb	r3, [r3, #4]
   84498:	79fa      	ldrb	r2, [r7, #7]
   8449a:	429a      	cmp	r2, r3
   8449c:	d3d3      	bcc.n	84446 <udc_req_ep+0x1e>
		}
	}
	return false;
   8449e:	2300      	movs	r3, #0
}
   844a0:	4618      	mov	r0, r3
   844a2:	3708      	adds	r7, #8
   844a4:	46bd      	mov	sp, r7
   844a6:	bd80      	pop	{r7, pc}
   844a8:	20001336 	.word	0x20001336
   844ac:	20001828 	.word	0x20001828
   844b0:	20001338 	.word	0x20001338
   844b4:	0008381d 	.word	0x0008381d

000844b8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   844b8:	b580      	push	{r7, lr}
   844ba:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   844bc:	4b25      	ldr	r3, [pc, #148]	; (84554 <udc_process_setup+0x9c>)
   844be:	2200      	movs	r2, #0
   844c0:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   844c2:	4b24      	ldr	r3, [pc, #144]	; (84554 <udc_process_setup+0x9c>)
   844c4:	2200      	movs	r2, #0
   844c6:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   844c8:	4b22      	ldr	r3, [pc, #136]	; (84554 <udc_process_setup+0x9c>)
   844ca:	2200      	movs	r2, #0
   844cc:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   844ce:	4b21      	ldr	r3, [pc, #132]	; (84554 <udc_process_setup+0x9c>)
   844d0:	781b      	ldrb	r3, [r3, #0]
   844d2:	2bc0      	cmp	r3, #192	; 0xc0
   844d4:	d109      	bne.n	844ea <udc_process_setup+0x32>
   844d6:	4b1f      	ldr	r3, [pc, #124]	; (84554 <udc_process_setup+0x9c>)
   844d8:	785b      	ldrb	r3, [r3, #1]
   844da:	2b01      	cmp	r3, #1
   844dc:	d105      	bne.n	844ea <udc_process_setup+0x32>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   844de:	219e      	movs	r1, #158	; 0x9e
   844e0:	481d      	ldr	r0, [pc, #116]	; (84558 <udc_process_setup+0xa0>)
   844e2:	4b1e      	ldr	r3, [pc, #120]	; (8455c <udc_process_setup+0xa4>)
   844e4:	4798      	blx	r3
		return true;
   844e6:	2301      	movs	r3, #1
   844e8:	e032      	b.n	84550 <udc_process_setup+0x98>
	}

	if (Udd_setup_is_in()) {
   844ea:	4b1a      	ldr	r3, [pc, #104]	; (84554 <udc_process_setup+0x9c>)
   844ec:	781b      	ldrb	r3, [r3, #0]
   844ee:	b25b      	sxtb	r3, r3
   844f0:	2b00      	cmp	r3, #0
   844f2:	da05      	bge.n	84500 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   844f4:	4b17      	ldr	r3, [pc, #92]	; (84554 <udc_process_setup+0x9c>)
   844f6:	88db      	ldrh	r3, [r3, #6]
   844f8:	2b00      	cmp	r3, #0
   844fa:	d101      	bne.n	84500 <udc_process_setup+0x48>
			return false; // Error from USB host
   844fc:	2300      	movs	r3, #0
   844fe:	e027      	b.n	84550 <udc_process_setup+0x98>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   84500:	4b14      	ldr	r3, [pc, #80]	; (84554 <udc_process_setup+0x9c>)
   84502:	781b      	ldrb	r3, [r3, #0]
   84504:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84508:	2b00      	cmp	r3, #0
   8450a:	d106      	bne.n	8451a <udc_process_setup+0x62>
		if (udc_reqstd()) {
   8450c:	4b14      	ldr	r3, [pc, #80]	; (84560 <udc_process_setup+0xa8>)
   8450e:	4798      	blx	r3
   84510:	4603      	mov	r3, r0
   84512:	2b00      	cmp	r3, #0
   84514:	d001      	beq.n	8451a <udc_process_setup+0x62>
			return true;
   84516:	2301      	movs	r3, #1
   84518:	e01a      	b.n	84550 <udc_process_setup+0x98>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   8451a:	4b0e      	ldr	r3, [pc, #56]	; (84554 <udc_process_setup+0x9c>)
   8451c:	781b      	ldrb	r3, [r3, #0]
   8451e:	f003 031f 	and.w	r3, r3, #31
   84522:	2b01      	cmp	r3, #1
   84524:	d106      	bne.n	84534 <udc_process_setup+0x7c>
		if (udc_req_iface()) {
   84526:	4b0f      	ldr	r3, [pc, #60]	; (84564 <udc_process_setup+0xac>)
   84528:	4798      	blx	r3
   8452a:	4603      	mov	r3, r0
   8452c:	2b00      	cmp	r3, #0
   8452e:	d001      	beq.n	84534 <udc_process_setup+0x7c>
			return true;
   84530:	2301      	movs	r3, #1
   84532:	e00d      	b.n	84550 <udc_process_setup+0x98>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   84534:	4b07      	ldr	r3, [pc, #28]	; (84554 <udc_process_setup+0x9c>)
   84536:	781b      	ldrb	r3, [r3, #0]
   84538:	f003 031f 	and.w	r3, r3, #31
   8453c:	2b02      	cmp	r3, #2
   8453e:	d106      	bne.n	8454e <udc_process_setup+0x96>
		if (udc_req_ep()) {
   84540:	4b09      	ldr	r3, [pc, #36]	; (84568 <udc_process_setup+0xb0>)
   84542:	4798      	blx	r3
   84544:	4603      	mov	r3, r0
   84546:	2b00      	cmp	r3, #0
   84548:	d001      	beq.n	8454e <udc_process_setup+0x96>
			return true;
   8454a:	2301      	movs	r3, #1
   8454c:	e000      	b.n	84550 <udc_process_setup+0x98>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   8454e:	2300      	movs	r3, #0
#endif
}
   84550:	4618      	mov	r0, r3
   84552:	bd80      	pop	{r7, pc}
   84554:	20001828 	.word	0x20001828
   84558:	20000300 	.word	0x20000300
   8455c:	00084c45 	.word	0x00084c45
   84560:	00084201 	.word	0x00084201
   84564:	00084391 	.word	0x00084391
   84568:	00084429 	.word	0x00084429

0008456c <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   8456c:	b580      	push	{r7, lr}
   8456e:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   84570:	4b0b      	ldr	r3, [pc, #44]	; (845a0 <udi_vendor_enable+0x34>)
   84572:	4798      	blx	r3
   84574:	4603      	mov	r3, r0
   84576:	78da      	ldrb	r2, [r3, #3]
   84578:	4b0a      	ldr	r3, [pc, #40]	; (845a4 <udi_vendor_enable+0x38>)
   8457a:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   8457c:	4b09      	ldr	r3, [pc, #36]	; (845a4 <udi_vendor_enable+0x38>)
   8457e:	781b      	ldrb	r3, [r3, #0]
   84580:	2b00      	cmp	r3, #0
   84582:	d109      	bne.n	84598 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   84584:	4b08      	ldr	r3, [pc, #32]	; (845a8 <udi_vendor_enable+0x3c>)
   84586:	4798      	blx	r3
   84588:	4603      	mov	r3, r0
   8458a:	f083 0301 	eor.w	r3, r3, #1
   8458e:	b2db      	uxtb	r3, r3
   84590:	2b00      	cmp	r3, #0
   84592:	d001      	beq.n	84598 <udi_vendor_enable+0x2c>
			return false;
   84594:	2300      	movs	r3, #0
   84596:	e000      	b.n	8459a <udi_vendor_enable+0x2e>
		}
	}
	return true;
   84598:	2301      	movs	r3, #1
}
   8459a:	4618      	mov	r0, r3
   8459c:	bd80      	pop	{r7, pc}
   8459e:	bf00      	nop
   845a0:	00083789 	.word	0x00083789
   845a4:	20001343 	.word	0x20001343
   845a8:	00080c85 	.word	0x00080c85

000845ac <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   845ac:	b580      	push	{r7, lr}
   845ae:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   845b0:	4b03      	ldr	r3, [pc, #12]	; (845c0 <udi_vendor_disable+0x14>)
   845b2:	781b      	ldrb	r3, [r3, #0]
   845b4:	2b00      	cmp	r3, #0
   845b6:	d101      	bne.n	845bc <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   845b8:	4b02      	ldr	r3, [pc, #8]	; (845c4 <udi_vendor_disable+0x18>)
   845ba:	4798      	blx	r3
	}
}
   845bc:	bf00      	nop
   845be:	bd80      	pop	{r7, pc}
   845c0:	20001343 	.word	0x20001343
   845c4:	00080cb1 	.word	0x00080cb1

000845c8 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   845c8:	b580      	push	{r7, lr}
   845ca:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   845cc:	4b10      	ldr	r3, [pc, #64]	; (84610 <udi_vendor_setup+0x48>)
   845ce:	781b      	ldrb	r3, [r3, #0]
   845d0:	b25b      	sxtb	r3, r3
   845d2:	2b00      	cmp	r3, #0
   845d4:	da09      	bge.n	845ea <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   845d6:	4b0e      	ldr	r3, [pc, #56]	; (84610 <udi_vendor_setup+0x48>)
   845d8:	781b      	ldrb	r3, [r3, #0]
   845da:	f003 0360 	and.w	r3, r3, #96	; 0x60
   845de:	2b40      	cmp	r3, #64	; 0x40
   845e0:	d103      	bne.n	845ea <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   845e2:	4b0c      	ldr	r3, [pc, #48]	; (84614 <udi_vendor_setup+0x4c>)
   845e4:	4798      	blx	r3
   845e6:	4603      	mov	r3, r0
   845e8:	e00f      	b.n	8460a <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   845ea:	4b09      	ldr	r3, [pc, #36]	; (84610 <udi_vendor_setup+0x48>)
   845ec:	781b      	ldrb	r3, [r3, #0]
   845ee:	b25b      	sxtb	r3, r3
   845f0:	2b00      	cmp	r3, #0
   845f2:	db09      	blt.n	84608 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   845f4:	4b06      	ldr	r3, [pc, #24]	; (84610 <udi_vendor_setup+0x48>)
   845f6:	781b      	ldrb	r3, [r3, #0]
   845f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
   845fc:	2b40      	cmp	r3, #64	; 0x40
   845fe:	d103      	bne.n	84608 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   84600:	4b05      	ldr	r3, [pc, #20]	; (84618 <udi_vendor_setup+0x50>)
   84602:	4798      	blx	r3
   84604:	4603      	mov	r3, r0
   84606:	e000      	b.n	8460a <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   84608:	2300      	movs	r3, #0
}
   8460a:	4618      	mov	r0, r3
   8460c:	bd80      	pop	{r7, pc}
   8460e:	bf00      	nop
   84610:	20001828 	.word	0x20001828
   84614:	000810fd 	.word	0x000810fd
   84618:	00080f9d 	.word	0x00080f9d

0008461c <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   8461c:	b480      	push	{r7}
   8461e:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   84620:	4b02      	ldr	r3, [pc, #8]	; (8462c <udi_vendor_getsetting+0x10>)
   84622:	781b      	ldrb	r3, [r3, #0]
}
   84624:	4618      	mov	r0, r3
   84626:	46bd      	mov	sp, r7
   84628:	bc80      	pop	{r7}
   8462a:	4770      	bx	lr
   8462c:	20001343 	.word	0x20001343

00084630 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84630:	b590      	push	{r4, r7, lr}
   84632:	b087      	sub	sp, #28
   84634:	af02      	add	r7, sp, #8
   84636:	60f8      	str	r0, [r7, #12]
   84638:	60b9      	str	r1, [r7, #8]
   8463a:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   8463c:	687b      	ldr	r3, [r7, #4]
   8463e:	9300      	str	r3, [sp, #0]
   84640:	68bb      	ldr	r3, [r7, #8]
   84642:	68fa      	ldr	r2, [r7, #12]
   84644:	2100      	movs	r1, #0
   84646:	2081      	movs	r0, #129	; 0x81
   84648:	4c03      	ldr	r4, [pc, #12]	; (84658 <udi_vendor_bulk_in_run+0x28>)
   8464a:	47a0      	blx	r4
   8464c:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   8464e:	4618      	mov	r0, r3
   84650:	3714      	adds	r7, #20
   84652:	46bd      	mov	sp, r7
   84654:	bd90      	pop	{r4, r7, pc}
   84656:	bf00      	nop
   84658:	00085351 	.word	0x00085351

0008465c <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8465c:	b590      	push	{r4, r7, lr}
   8465e:	b087      	sub	sp, #28
   84660:	af02      	add	r7, sp, #8
   84662:	60f8      	str	r0, [r7, #12]
   84664:	60b9      	str	r1, [r7, #8]
   84666:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   84668:	687b      	ldr	r3, [r7, #4]
   8466a:	9300      	str	r3, [sp, #0]
   8466c:	68bb      	ldr	r3, [r7, #8]
   8466e:	68fa      	ldr	r2, [r7, #12]
   84670:	2100      	movs	r1, #0
   84672:	2002      	movs	r0, #2
   84674:	4c03      	ldr	r4, [pc, #12]	; (84684 <udi_vendor_bulk_out_run+0x28>)
   84676:	47a0      	blx	r4
   84678:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   8467a:	4618      	mov	r0, r3
   8467c:	3714      	adds	r7, #20
   8467e:	46bd      	mov	sp, r7
   84680:	bd90      	pop	{r4, r7, pc}
   84682:	bf00      	nop
   84684:	00085351 	.word	0x00085351

00084688 <NVIC_EnableIRQ>:
{
   84688:	b480      	push	{r7}
   8468a:	b083      	sub	sp, #12
   8468c:	af00      	add	r7, sp, #0
   8468e:	4603      	mov	r3, r0
   84690:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84692:	79fb      	ldrb	r3, [r7, #7]
   84694:	f003 031f 	and.w	r3, r3, #31
   84698:	2201      	movs	r2, #1
   8469a:	fa02 f103 	lsl.w	r1, r2, r3
   8469e:	4a05      	ldr	r2, [pc, #20]	; (846b4 <NVIC_EnableIRQ+0x2c>)
   846a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   846a4:	095b      	lsrs	r3, r3, #5
   846a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   846aa:	bf00      	nop
   846ac:	370c      	adds	r7, #12
   846ae:	46bd      	mov	sp, r7
   846b0:	bc80      	pop	{r7}
   846b2:	4770      	bx	lr
   846b4:	e000e100 	.word	0xe000e100

000846b8 <NVIC_SetPriority>:
{
   846b8:	b480      	push	{r7}
   846ba:	b083      	sub	sp, #12
   846bc:	af00      	add	r7, sp, #0
   846be:	4603      	mov	r3, r0
   846c0:	6039      	str	r1, [r7, #0]
   846c2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   846c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   846c8:	2b00      	cmp	r3, #0
   846ca:	da0b      	bge.n	846e4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   846cc:	683b      	ldr	r3, [r7, #0]
   846ce:	b2da      	uxtb	r2, r3
   846d0:	490c      	ldr	r1, [pc, #48]	; (84704 <NVIC_SetPriority+0x4c>)
   846d2:	79fb      	ldrb	r3, [r7, #7]
   846d4:	f003 030f 	and.w	r3, r3, #15
   846d8:	3b04      	subs	r3, #4
   846da:	0112      	lsls	r2, r2, #4
   846dc:	b2d2      	uxtb	r2, r2
   846de:	440b      	add	r3, r1
   846e0:	761a      	strb	r2, [r3, #24]
}
   846e2:	e009      	b.n	846f8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   846e4:	683b      	ldr	r3, [r7, #0]
   846e6:	b2da      	uxtb	r2, r3
   846e8:	4907      	ldr	r1, [pc, #28]	; (84708 <NVIC_SetPriority+0x50>)
   846ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
   846ee:	0112      	lsls	r2, r2, #4
   846f0:	b2d2      	uxtb	r2, r2
   846f2:	440b      	add	r3, r1
   846f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   846f8:	bf00      	nop
   846fa:	370c      	adds	r7, #12
   846fc:	46bd      	mov	sp, r7
   846fe:	bc80      	pop	{r7}
   84700:	4770      	bx	lr
   84702:	bf00      	nop
   84704:	e000ed00 	.word	0xe000ed00
   84708:	e000e100 	.word	0xe000e100

0008470c <cpu_irq_save>:
{
   8470c:	b480      	push	{r7}
   8470e:	b083      	sub	sp, #12
   84710:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   84712:	f3ef 8310 	mrs	r3, PRIMASK
   84716:	603b      	str	r3, [r7, #0]
  return(result);
   84718:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   8471a:	2b00      	cmp	r3, #0
   8471c:	bf0c      	ite	eq
   8471e:	2301      	moveq	r3, #1
   84720:	2300      	movne	r3, #0
   84722:	b2db      	uxtb	r3, r3
   84724:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   84726:	b672      	cpsid	i
}
   84728:	bf00      	nop
  __ASM volatile ("dmb");
   8472a:	f3bf 8f5f 	dmb	sy
}
   8472e:	bf00      	nop
	cpu_irq_disable();
   84730:	4b04      	ldr	r3, [pc, #16]	; (84744 <cpu_irq_save+0x38>)
   84732:	2200      	movs	r2, #0
   84734:	701a      	strb	r2, [r3, #0]
	return flags;
   84736:	687b      	ldr	r3, [r7, #4]
}
   84738:	4618      	mov	r0, r3
   8473a:	370c      	adds	r7, #12
   8473c:	46bd      	mov	sp, r7
   8473e:	bc80      	pop	{r7}
   84740:	4770      	bx	lr
   84742:	bf00      	nop
   84744:	20000284 	.word	0x20000284

00084748 <cpu_irq_is_enabled_flags>:
{
   84748:	b480      	push	{r7}
   8474a:	b083      	sub	sp, #12
   8474c:	af00      	add	r7, sp, #0
   8474e:	6078      	str	r0, [r7, #4]
	return (flags);
   84750:	687b      	ldr	r3, [r7, #4]
   84752:	2b00      	cmp	r3, #0
   84754:	bf14      	ite	ne
   84756:	2301      	movne	r3, #1
   84758:	2300      	moveq	r3, #0
   8475a:	b2db      	uxtb	r3, r3
}
   8475c:	4618      	mov	r0, r3
   8475e:	370c      	adds	r7, #12
   84760:	46bd      	mov	sp, r7
   84762:	bc80      	pop	{r7}
   84764:	4770      	bx	lr
   84766:	0000      	movs	r0, r0

00084768 <cpu_irq_restore>:
{
   84768:	b580      	push	{r7, lr}
   8476a:	b082      	sub	sp, #8
   8476c:	af00      	add	r7, sp, #0
   8476e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   84770:	6878      	ldr	r0, [r7, #4]
   84772:	4b08      	ldr	r3, [pc, #32]	; (84794 <cpu_irq_restore+0x2c>)
   84774:	4798      	blx	r3
   84776:	4603      	mov	r3, r0
   84778:	2b00      	cmp	r3, #0
   8477a:	d007      	beq.n	8478c <cpu_irq_restore+0x24>
		cpu_irq_enable();
   8477c:	4b06      	ldr	r3, [pc, #24]	; (84798 <cpu_irq_restore+0x30>)
   8477e:	2201      	movs	r2, #1
   84780:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   84782:	f3bf 8f5f 	dmb	sy
}
   84786:	bf00      	nop
  __ASM volatile ("cpsie i");
   84788:	b662      	cpsie	i
}
   8478a:	bf00      	nop
}
   8478c:	bf00      	nop
   8478e:	3708      	adds	r7, #8
   84790:	46bd      	mov	sp, r7
   84792:	bd80      	pop	{r7, pc}
   84794:	00084749 	.word	0x00084749
   84798:	20000284 	.word	0x20000284

0008479c <sleepmgr_lock_mode>:
{
   8479c:	b580      	push	{r7, lr}
   8479e:	b084      	sub	sp, #16
   847a0:	af00      	add	r7, sp, #0
   847a2:	4603      	mov	r3, r0
   847a4:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   847a6:	4b08      	ldr	r3, [pc, #32]	; (847c8 <sleepmgr_lock_mode+0x2c>)
   847a8:	4798      	blx	r3
   847aa:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   847ac:	79fb      	ldrb	r3, [r7, #7]
   847ae:	4a07      	ldr	r2, [pc, #28]	; (847cc <sleepmgr_lock_mode+0x30>)
   847b0:	5cd2      	ldrb	r2, [r2, r3]
   847b2:	3201      	adds	r2, #1
   847b4:	b2d1      	uxtb	r1, r2
   847b6:	4a05      	ldr	r2, [pc, #20]	; (847cc <sleepmgr_lock_mode+0x30>)
   847b8:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   847ba:	68f8      	ldr	r0, [r7, #12]
   847bc:	4b04      	ldr	r3, [pc, #16]	; (847d0 <sleepmgr_lock_mode+0x34>)
   847be:	4798      	blx	r3
}
   847c0:	bf00      	nop
   847c2:	3710      	adds	r7, #16
   847c4:	46bd      	mov	sp, r7
   847c6:	bd80      	pop	{r7, pc}
   847c8:	0008470d 	.word	0x0008470d
   847cc:	20001820 	.word	0x20001820
   847d0:	00084769 	.word	0x00084769

000847d4 <sleepmgr_unlock_mode>:
{
   847d4:	b580      	push	{r7, lr}
   847d6:	b084      	sub	sp, #16
   847d8:	af00      	add	r7, sp, #0
   847da:	4603      	mov	r3, r0
   847dc:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   847de:	4b08      	ldr	r3, [pc, #32]	; (84800 <sleepmgr_unlock_mode+0x2c>)
   847e0:	4798      	blx	r3
   847e2:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   847e4:	79fb      	ldrb	r3, [r7, #7]
   847e6:	4a07      	ldr	r2, [pc, #28]	; (84804 <sleepmgr_unlock_mode+0x30>)
   847e8:	5cd2      	ldrb	r2, [r2, r3]
   847ea:	3a01      	subs	r2, #1
   847ec:	b2d1      	uxtb	r1, r2
   847ee:	4a05      	ldr	r2, [pc, #20]	; (84804 <sleepmgr_unlock_mode+0x30>)
   847f0:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   847f2:	68f8      	ldr	r0, [r7, #12]
   847f4:	4b04      	ldr	r3, [pc, #16]	; (84808 <sleepmgr_unlock_mode+0x34>)
   847f6:	4798      	blx	r3
}
   847f8:	bf00      	nop
   847fa:	3710      	adds	r7, #16
   847fc:	46bd      	mov	sp, r7
   847fe:	bd80      	pop	{r7, pc}
   84800:	0008470d 	.word	0x0008470d
   84804:	20001820 	.word	0x20001820
   84808:	00084769 	.word	0x00084769

0008480c <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   8480c:	b580      	push	{r7, lr}
   8480e:	b082      	sub	sp, #8
   84810:	af00      	add	r7, sp, #0
   84812:	4603      	mov	r3, r0
   84814:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   84816:	79fb      	ldrb	r3, [r7, #7]
   84818:	f083 0301 	eor.w	r3, r3, #1
   8481c:	b2db      	uxtb	r3, r3
   8481e:	2b00      	cmp	r3, #0
   84820:	d006      	beq.n	84830 <udd_sleep_mode+0x24>
   84822:	4b0d      	ldr	r3, [pc, #52]	; (84858 <udd_sleep_mode+0x4c>)
   84824:	781b      	ldrb	r3, [r3, #0]
   84826:	2b00      	cmp	r3, #0
   84828:	d002      	beq.n	84830 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   8482a:	2002      	movs	r0, #2
   8482c:	4b0b      	ldr	r3, [pc, #44]	; (8485c <udd_sleep_mode+0x50>)
   8482e:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   84830:	79fb      	ldrb	r3, [r7, #7]
   84832:	2b00      	cmp	r3, #0
   84834:	d009      	beq.n	8484a <udd_sleep_mode+0x3e>
   84836:	4b08      	ldr	r3, [pc, #32]	; (84858 <udd_sleep_mode+0x4c>)
   84838:	781b      	ldrb	r3, [r3, #0]
   8483a:	f083 0301 	eor.w	r3, r3, #1
   8483e:	b2db      	uxtb	r3, r3
   84840:	2b00      	cmp	r3, #0
   84842:	d002      	beq.n	8484a <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   84844:	2002      	movs	r0, #2
   84846:	4b06      	ldr	r3, [pc, #24]	; (84860 <udd_sleep_mode+0x54>)
   84848:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   8484a:	4a03      	ldr	r2, [pc, #12]	; (84858 <udd_sleep_mode+0x4c>)
   8484c:	79fb      	ldrb	r3, [r7, #7]
   8484e:	7013      	strb	r3, [r2, #0]
}
   84850:	bf00      	nop
   84852:	3708      	adds	r7, #8
   84854:	46bd      	mov	sp, r7
   84856:	bd80      	pop	{r7, pc}
   84858:	20001344 	.word	0x20001344
   8485c:	000847d5 	.word	0x000847d5
   84860:	0008479d 	.word	0x0008479d

00084864 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   84864:	b580      	push	{r7, lr}
   84866:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   84868:	201d      	movs	r0, #29
   8486a:	4b5f      	ldr	r3, [pc, #380]	; (849e8 <UDPHS_Handler+0x184>)
   8486c:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8486e:	4b5f      	ldr	r3, [pc, #380]	; (849ec <UDPHS_Handler+0x188>)
   84870:	4798      	blx	r3
   84872:	4603      	mov	r3, r0
   84874:	f083 0301 	eor.w	r3, r3, #1
   84878:	b2db      	uxtb	r3, r3
   8487a:	2b00      	cmp	r3, #0
   8487c:	d00e      	beq.n	8489c <UDPHS_Handler+0x38>
   8487e:	4b5c      	ldr	r3, [pc, #368]	; (849f0 <UDPHS_Handler+0x18c>)
   84880:	695b      	ldr	r3, [r3, #20]
   84882:	f003 0302 	and.w	r3, r3, #2
   84886:	2b00      	cmp	r3, #0
   84888:	d108      	bne.n	8489c <UDPHS_Handler+0x38>
  __ASM volatile ("cpsid i");
   8488a:	b672      	cpsid	i
}
   8488c:	bf00      	nop
  __ASM volatile ("dmb");
   8488e:	f3bf 8f5f 	dmb	sy
}
   84892:	bf00      	nop
		cpu_irq_disable();
   84894:	4b57      	ldr	r3, [pc, #348]	; (849f4 <UDPHS_Handler+0x190>)
   84896:	2200      	movs	r2, #0
   84898:	701a      	strb	r2, [r3, #0]
		return;
   8489a:	e0a4      	b.n	849e6 <UDPHS_Handler+0x182>
	}

	if (Is_udd_sof()) {
   8489c:	4b54      	ldr	r3, [pc, #336]	; (849f0 <UDPHS_Handler+0x18c>)
   8489e:	695b      	ldr	r3, [r3, #20]
   848a0:	f003 0308 	and.w	r3, r3, #8
   848a4:	2b00      	cmp	r3, #0
   848a6:	d00d      	beq.n	848c4 <UDPHS_Handler+0x60>
		udd_ack_sof();
   848a8:	4b51      	ldr	r3, [pc, #324]	; (849f0 <UDPHS_Handler+0x18c>)
   848aa:	2208      	movs	r2, #8
   848ac:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   848ae:	4b50      	ldr	r3, [pc, #320]	; (849f0 <UDPHS_Handler+0x18c>)
   848b0:	695b      	ldr	r3, [r3, #20]
   848b2:	f003 0301 	and.w	r3, r3, #1
   848b6:	2b00      	cmp	r3, #0
   848b8:	d101      	bne.n	848be <UDPHS_Handler+0x5a>
			udc_sof_notify();
   848ba:	4b4f      	ldr	r3, [pc, #316]	; (849f8 <UDPHS_Handler+0x194>)
   848bc:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   848be:	4b4f      	ldr	r3, [pc, #316]	; (849fc <UDPHS_Handler+0x198>)
   848c0:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   848c2:	e08f      	b.n	849e4 <UDPHS_Handler+0x180>
	}

	if (Is_udd_msof()) {
   848c4:	4b4a      	ldr	r3, [pc, #296]	; (849f0 <UDPHS_Handler+0x18c>)
   848c6:	695b      	ldr	r3, [r3, #20]
   848c8:	f003 0304 	and.w	r3, r3, #4
   848cc:	2b00      	cmp	r3, #0
   848ce:	d005      	beq.n	848dc <UDPHS_Handler+0x78>
		udd_ack_msof();
   848d0:	4b47      	ldr	r3, [pc, #284]	; (849f0 <UDPHS_Handler+0x18c>)
   848d2:	2204      	movs	r2, #4
   848d4:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   848d6:	4b48      	ldr	r3, [pc, #288]	; (849f8 <UDPHS_Handler+0x194>)
   848d8:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   848da:	e083      	b.n	849e4 <UDPHS_Handler+0x180>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   848dc:	4b48      	ldr	r3, [pc, #288]	; (84a00 <UDPHS_Handler+0x19c>)
   848de:	4798      	blx	r3
   848e0:	4603      	mov	r3, r0
   848e2:	2b00      	cmp	r3, #0
   848e4:	d179      	bne.n	849da <UDPHS_Handler+0x176>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   848e6:	4b47      	ldr	r3, [pc, #284]	; (84a04 <UDPHS_Handler+0x1a0>)
   848e8:	4798      	blx	r3
   848ea:	4603      	mov	r3, r0
   848ec:	2b00      	cmp	r3, #0
   848ee:	d176      	bne.n	849de <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   848f0:	4b3f      	ldr	r3, [pc, #252]	; (849f0 <UDPHS_Handler+0x18c>)
   848f2:	695b      	ldr	r3, [r3, #20]
   848f4:	f003 0310 	and.w	r3, r3, #16
   848f8:	2b00      	cmp	r3, #0
   848fa:	d01d      	beq.n	84938 <UDPHS_Handler+0xd4>
		dbg_print("EoR ");
		udd_ack_reset();
   848fc:	4b3c      	ldr	r3, [pc, #240]	; (849f0 <UDPHS_Handler+0x18c>)
   848fe:	2210      	movs	r2, #16
   84900:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   84902:	4b41      	ldr	r3, [pc, #260]	; (84a08 <UDPHS_Handler+0x1a4>)
   84904:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   84906:	4b41      	ldr	r3, [pc, #260]	; (84a0c <UDPHS_Handler+0x1a8>)
   84908:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   8490a:	4b41      	ldr	r3, [pc, #260]	; (84a10 <UDPHS_Handler+0x1ac>)
   8490c:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   8490e:	4b41      	ldr	r3, [pc, #260]	; (84a14 <UDPHS_Handler+0x1b0>)
   84910:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   84912:	4b37      	ldr	r3, [pc, #220]	; (849f0 <UDPHS_Handler+0x18c>)
   84914:	691b      	ldr	r3, [r3, #16]
   84916:	4a36      	ldr	r2, [pc, #216]	; (849f0 <UDPHS_Handler+0x18c>)
   84918:	f043 0308 	orr.w	r3, r3, #8
   8491c:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   8491e:	4b34      	ldr	r3, [pc, #208]	; (849f0 <UDPHS_Handler+0x18c>)
   84920:	691b      	ldr	r3, [r3, #16]
   84922:	4a33      	ldr	r2, [pc, #204]	; (849f0 <UDPHS_Handler+0x18c>)
   84924:	f043 0304 	orr.w	r3, r3, #4
   84928:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   8492a:	4b31      	ldr	r3, [pc, #196]	; (849f0 <UDPHS_Handler+0x18c>)
   8492c:	691b      	ldr	r3, [r3, #16]
   8492e:	4a30      	ldr	r2, [pc, #192]	; (849f0 <UDPHS_Handler+0x18c>)
   84930:	f043 0302 	orr.w	r3, r3, #2
   84934:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   84936:	e055      	b.n	849e4 <UDPHS_Handler+0x180>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84938:	4b2d      	ldr	r3, [pc, #180]	; (849f0 <UDPHS_Handler+0x18c>)
   8493a:	691b      	ldr	r3, [r3, #16]
   8493c:	f003 0302 	and.w	r3, r3, #2
   84940:	2b00      	cmp	r3, #0
   84942:	d020      	beq.n	84986 <UDPHS_Handler+0x122>
   84944:	4b2a      	ldr	r3, [pc, #168]	; (849f0 <UDPHS_Handler+0x18c>)
   84946:	695b      	ldr	r3, [r3, #20]
   84948:	f003 0302 	and.w	r3, r3, #2
   8494c:	2b00      	cmp	r3, #0
   8494e:	d01a      	beq.n	84986 <UDPHS_Handler+0x122>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   84950:	4b27      	ldr	r3, [pc, #156]	; (849f0 <UDPHS_Handler+0x18c>)
   84952:	2220      	movs	r2, #32
   84954:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   84956:	4b26      	ldr	r3, [pc, #152]	; (849f0 <UDPHS_Handler+0x18c>)
   84958:	691b      	ldr	r3, [r3, #16]
   8495a:	4a25      	ldr	r2, [pc, #148]	; (849f0 <UDPHS_Handler+0x18c>)
   8495c:	f023 0302 	bic.w	r3, r3, #2
   84960:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   84962:	4b23      	ldr	r3, [pc, #140]	; (849f0 <UDPHS_Handler+0x18c>)
   84964:	691b      	ldr	r3, [r3, #16]
   84966:	4a22      	ldr	r2, [pc, #136]	; (849f0 <UDPHS_Handler+0x18c>)
   84968:	f043 0320 	orr.w	r3, r3, #32
   8496c:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   8496e:	4b20      	ldr	r3, [pc, #128]	; (849f0 <UDPHS_Handler+0x18c>)
   84970:	2202      	movs	r2, #2
   84972:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   84974:	201d      	movs	r0, #29
   84976:	4b28      	ldr	r3, [pc, #160]	; (84a18 <UDPHS_Handler+0x1b4>)
   84978:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   8497a:	4b28      	ldr	r3, [pc, #160]	; (84a1c <UDPHS_Handler+0x1b8>)
   8497c:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   8497e:	2000      	movs	r0, #0
   84980:	4b27      	ldr	r3, [pc, #156]	; (84a20 <UDPHS_Handler+0x1bc>)
   84982:	4798      	blx	r3
		goto udd_interrupt_end;
   84984:	e02e      	b.n	849e4 <UDPHS_Handler+0x180>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   84986:	4b1a      	ldr	r3, [pc, #104]	; (849f0 <UDPHS_Handler+0x18c>)
   84988:	695b      	ldr	r3, [r3, #20]
   8498a:	f003 0320 	and.w	r3, r3, #32
   8498e:	2b00      	cmp	r3, #0
   84990:	d027      	beq.n	849e2 <UDPHS_Handler+0x17e>
		udd_sleep_mode(true); // Enter in IDLE mode
   84992:	2001      	movs	r0, #1
   84994:	4b22      	ldr	r3, [pc, #136]	; (84a20 <UDPHS_Handler+0x1bc>)
   84996:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   84998:	4b15      	ldr	r3, [pc, #84]	; (849f0 <UDPHS_Handler+0x18c>)
   8499a:	2202      	movs	r2, #2
   8499c:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   8499e:	4b14      	ldr	r3, [pc, #80]	; (849f0 <UDPHS_Handler+0x18c>)
   849a0:	2220      	movs	r2, #32
   849a2:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   849a4:	4b12      	ldr	r3, [pc, #72]	; (849f0 <UDPHS_Handler+0x18c>)
   849a6:	691b      	ldr	r3, [r3, #16]
   849a8:	4a11      	ldr	r2, [pc, #68]	; (849f0 <UDPHS_Handler+0x18c>)
   849aa:	f023 0320 	bic.w	r3, r3, #32
   849ae:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   849b0:	4b0f      	ldr	r3, [pc, #60]	; (849f0 <UDPHS_Handler+0x18c>)
   849b2:	691b      	ldr	r3, [r3, #16]
   849b4:	4a0e      	ldr	r2, [pc, #56]	; (849f0 <UDPHS_Handler+0x18c>)
   849b6:	f043 0302 	orr.w	r3, r3, #2
   849ba:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   849bc:	4b0c      	ldr	r3, [pc, #48]	; (849f0 <UDPHS_Handler+0x18c>)
   849be:	691b      	ldr	r3, [r3, #16]
   849c0:	4a0b      	ldr	r2, [pc, #44]	; (849f0 <UDPHS_Handler+0x18c>)
   849c2:	f043 0308 	orr.w	r3, r3, #8
   849c6:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   849c8:	4b09      	ldr	r3, [pc, #36]	; (849f0 <UDPHS_Handler+0x18c>)
   849ca:	691b      	ldr	r3, [r3, #16]
   849cc:	4a08      	ldr	r2, [pc, #32]	; (849f0 <UDPHS_Handler+0x18c>)
   849ce:	f043 0304 	orr.w	r3, r3, #4
   849d2:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   849d4:	4b13      	ldr	r3, [pc, #76]	; (84a24 <UDPHS_Handler+0x1c0>)
   849d6:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   849d8:	e004      	b.n	849e4 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   849da:	bf00      	nop
   849dc:	e002      	b.n	849e4 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   849de:	bf00      	nop
   849e0:	e000      	b.n	849e4 <UDPHS_Handler+0x180>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   849e2:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   849e4:	bf00      	nop
}
   849e6:	bd80      	pop	{r7, pc}
   849e8:	000829e5 	.word	0x000829e5
   849ec:	00082fa9 	.word	0x00082fa9
   849f0:	400a4000 	.word	0x400a4000
   849f4:	20000284 	.word	0x20000284
   849f8:	00083a55 	.word	0x00083a55
   849fc:	00080c69 	.word	0x00080c69
   84a00:	00085cd9 	.word	0x00085cd9
   84a04:	000860f5 	.word	0x000860f5
   84a08:	00085e19 	.word	0x00085e19
   84a0c:	00083a01 	.word	0x00083a01
   84a10:	00085639 	.word	0x00085639
   84a14:	000856b9 	.word	0x000856b9
   84a18:	00082a31 	.word	0x00082a31
   84a1c:	00080c51 	.word	0x00080c51
   84a20:	0008480d 	.word	0x0008480d
   84a24:	00080c5d 	.word	0x00080c5d

00084a28 <udd_enable>:
#endif
}


void udd_enable(void)
{
   84a28:	b580      	push	{r7, lr}
   84a2a:	b082      	sub	sp, #8
   84a2c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   84a2e:	4b19      	ldr	r3, [pc, #100]	; (84a94 <udd_enable+0x6c>)
   84a30:	4798      	blx	r3

	udd_enable_periph_ck();
   84a32:	201d      	movs	r0, #29
   84a34:	4b18      	ldr	r3, [pc, #96]	; (84a98 <udd_enable+0x70>)
   84a36:	4798      	blx	r3

	flags = cpu_irq_save();
   84a38:	4b18      	ldr	r3, [pc, #96]	; (84a9c <udd_enable+0x74>)
   84a3a:	4798      	blx	r3
   84a3c:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   84a3e:	4b18      	ldr	r3, [pc, #96]	; (84aa0 <udd_enable+0x78>)
   84a40:	681b      	ldr	r3, [r3, #0]
   84a42:	4a17      	ldr	r2, [pc, #92]	; (84aa0 <udd_enable+0x78>)
   84a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   84a48:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   84a4a:	2105      	movs	r1, #5
   84a4c:	201d      	movs	r0, #29
   84a4e:	4b15      	ldr	r3, [pc, #84]	; (84aa4 <udd_enable+0x7c>)
   84a50:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   84a52:	201d      	movs	r0, #29
   84a54:	4b14      	ldr	r3, [pc, #80]	; (84aa8 <udd_enable+0x80>)
   84a56:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   84a58:	4b14      	ldr	r3, [pc, #80]	; (84aac <udd_enable+0x84>)
   84a5a:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   84a5c:	4b10      	ldr	r3, [pc, #64]	; (84aa0 <udd_enable+0x78>)
   84a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   84a62:	4a0f      	ldr	r2, [pc, #60]	; (84aa0 <udd_enable+0x78>)
   84a64:	f023 0303 	bic.w	r3, r3, #3
   84a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84a6c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   84a70:	4b0f      	ldr	r3, [pc, #60]	; (84ab0 <udd_enable+0x88>)
   84a72:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   84a74:	4b0f      	ldr	r3, [pc, #60]	; (84ab4 <udd_enable+0x8c>)
   84a76:	2200      	movs	r2, #0
   84a78:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   84a7a:	2003      	movs	r0, #3
   84a7c:	4b0e      	ldr	r3, [pc, #56]	; (84ab8 <udd_enable+0x90>)
   84a7e:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   84a80:	4b0e      	ldr	r3, [pc, #56]	; (84abc <udd_enable+0x94>)
   84a82:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   84a84:	6878      	ldr	r0, [r7, #4]
   84a86:	4b0e      	ldr	r3, [pc, #56]	; (84ac0 <udd_enable+0x98>)
   84a88:	4798      	blx	r3
}
   84a8a:	bf00      	nop
   84a8c:	3708      	adds	r7, #8
   84a8e:	46bd      	mov	sp, r7
   84a90:	bd80      	pop	{r7, pc}
   84a92:	bf00      	nop
   84a94:	00083525 	.word	0x00083525
   84a98:	000829e5 	.word	0x000829e5
   84a9c:	0008470d 	.word	0x0008470d
   84aa0:	400a4000 	.word	0x400a4000
   84aa4:	000846b9 	.word	0x000846b9
   84aa8:	00084689 	.word	0x00084689
   84aac:	00085dbd 	.word	0x00085dbd
   84ab0:	00082aa1 	.word	0x00082aa1
   84ab4:	20001344 	.word	0x20001344
   84ab8:	0008479d 	.word	0x0008479d
   84abc:	00084ac5 	.word	0x00084ac5
   84ac0:	00084769 	.word	0x00084769

00084ac4 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   84ac4:	b580      	push	{r7, lr}
   84ac6:	b082      	sub	sp, #8
   84ac8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   84aca:	4b26      	ldr	r3, [pc, #152]	; (84b64 <udd_attach+0xa0>)
   84acc:	4798      	blx	r3
   84ace:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   84ad0:	2001      	movs	r0, #1
   84ad2:	4b25      	ldr	r3, [pc, #148]	; (84b68 <udd_attach+0xa4>)
   84ad4:	4798      	blx	r3
	udd_enable_periph_ck();
   84ad6:	201d      	movs	r0, #29
   84ad8:	4b24      	ldr	r3, [pc, #144]	; (84b6c <udd_attach+0xa8>)
   84ada:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   84adc:	4b24      	ldr	r3, [pc, #144]	; (84b70 <udd_attach+0xac>)
   84ade:	681b      	ldr	r3, [r3, #0]
   84ae0:	4a23      	ldr	r2, [pc, #140]	; (84b70 <udd_attach+0xac>)
   84ae2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84ae6:	6013      	str	r3, [r2, #0]
   84ae8:	4b21      	ldr	r3, [pc, #132]	; (84b70 <udd_attach+0xac>)
   84aea:	681b      	ldr	r3, [r3, #0]
   84aec:	4a20      	ldr	r2, [pc, #128]	; (84b70 <udd_attach+0xac>)
   84aee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   84af2:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   84af4:	4b1e      	ldr	r3, [pc, #120]	; (84b70 <udd_attach+0xac>)
   84af6:	691b      	ldr	r3, [r3, #16]
   84af8:	4a1d      	ldr	r2, [pc, #116]	; (84b70 <udd_attach+0xac>)
   84afa:	f043 0310 	orr.w	r3, r3, #16
   84afe:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   84b00:	4b1b      	ldr	r3, [pc, #108]	; (84b70 <udd_attach+0xac>)
   84b02:	691b      	ldr	r3, [r3, #16]
   84b04:	4a1a      	ldr	r2, [pc, #104]	; (84b70 <udd_attach+0xac>)
   84b06:	f043 0302 	orr.w	r3, r3, #2
   84b0a:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   84b0c:	4b18      	ldr	r3, [pc, #96]	; (84b70 <udd_attach+0xac>)
   84b0e:	691b      	ldr	r3, [r3, #16]
   84b10:	4a17      	ldr	r2, [pc, #92]	; (84b70 <udd_attach+0xac>)
   84b12:	f043 0320 	orr.w	r3, r3, #32
   84b16:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   84b18:	4b15      	ldr	r3, [pc, #84]	; (84b70 <udd_attach+0xac>)
   84b1a:	691b      	ldr	r3, [r3, #16]
   84b1c:	4a14      	ldr	r2, [pc, #80]	; (84b70 <udd_attach+0xac>)
   84b1e:	f043 0308 	orr.w	r3, r3, #8
   84b22:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   84b24:	4b12      	ldr	r3, [pc, #72]	; (84b70 <udd_attach+0xac>)
   84b26:	691b      	ldr	r3, [r3, #16]
   84b28:	4a11      	ldr	r2, [pc, #68]	; (84b70 <udd_attach+0xac>)
   84b2a:	f043 0304 	orr.w	r3, r3, #4
   84b2e:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   84b30:	4b0f      	ldr	r3, [pc, #60]	; (84b70 <udd_attach+0xac>)
   84b32:	2208      	movs	r2, #8
   84b34:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   84b36:	4b0e      	ldr	r3, [pc, #56]	; (84b70 <udd_attach+0xac>)
   84b38:	2204      	movs	r2, #4
   84b3a:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84b3c:	4b0c      	ldr	r3, [pc, #48]	; (84b70 <udd_attach+0xac>)
   84b3e:	2210      	movs	r2, #16
   84b40:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   84b42:	4b0b      	ldr	r3, [pc, #44]	; (84b70 <udd_attach+0xac>)
   84b44:	2202      	movs	r2, #2
   84b46:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   84b48:	4b09      	ldr	r3, [pc, #36]	; (84b70 <udd_attach+0xac>)
   84b4a:	2220      	movs	r2, #32
   84b4c:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   84b4e:	201d      	movs	r0, #29
   84b50:	4b08      	ldr	r3, [pc, #32]	; (84b74 <udd_attach+0xb0>)
   84b52:	4798      	blx	r3
	cpu_irq_restore(flags);
   84b54:	6878      	ldr	r0, [r7, #4]
   84b56:	4b08      	ldr	r3, [pc, #32]	; (84b78 <udd_attach+0xb4>)
   84b58:	4798      	blx	r3
}
   84b5a:	bf00      	nop
   84b5c:	3708      	adds	r7, #8
   84b5e:	46bd      	mov	sp, r7
   84b60:	bd80      	pop	{r7, pc}
   84b62:	bf00      	nop
   84b64:	0008470d 	.word	0x0008470d
   84b68:	0008480d 	.word	0x0008480d
   84b6c:	000829e5 	.word	0x000829e5
   84b70:	400a4000 	.word	0x400a4000
   84b74:	00082a31 	.word	0x00082a31
   84b78:	00084769 	.word	0x00084769

00084b7c <udd_detach>:


void udd_detach(void)
{
   84b7c:	b580      	push	{r7, lr}
   84b7e:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   84b80:	201d      	movs	r0, #29
   84b82:	4b0b      	ldr	r3, [pc, #44]	; (84bb0 <udd_detach+0x34>)
   84b84:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   84b86:	4b0b      	ldr	r3, [pc, #44]	; (84bb4 <udd_detach+0x38>)
   84b88:	681b      	ldr	r3, [r3, #0]
   84b8a:	4a0a      	ldr	r2, [pc, #40]	; (84bb4 <udd_detach+0x38>)
   84b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   84b90:	6013      	str	r3, [r2, #0]
   84b92:	4b08      	ldr	r3, [pc, #32]	; (84bb4 <udd_detach+0x38>)
   84b94:	681b      	ldr	r3, [r3, #0]
   84b96:	4a07      	ldr	r2, [pc, #28]	; (84bb4 <udd_detach+0x38>)
   84b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84b9c:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   84b9e:	201d      	movs	r0, #29
   84ba0:	4b05      	ldr	r3, [pc, #20]	; (84bb8 <udd_detach+0x3c>)
   84ba2:	4798      	blx	r3
	udd_sleep_mode(false);
   84ba4:	2000      	movs	r0, #0
   84ba6:	4b05      	ldr	r3, [pc, #20]	; (84bbc <udd_detach+0x40>)
   84ba8:	4798      	blx	r3
}
   84baa:	bf00      	nop
   84bac:	bd80      	pop	{r7, pc}
   84bae:	bf00      	nop
   84bb0:	000829e5 	.word	0x000829e5
   84bb4:	400a4000 	.word	0x400a4000
   84bb8:	00082a31 	.word	0x00082a31
   84bbc:	0008480d 	.word	0x0008480d

00084bc0 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   84bc0:	b480      	push	{r7}
   84bc2:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   84bc4:	4b06      	ldr	r3, [pc, #24]	; (84be0 <udd_is_high_speed+0x20>)
   84bc6:	695b      	ldr	r3, [r3, #20]
   84bc8:	f003 0301 	and.w	r3, r3, #1
   84bcc:	2b00      	cmp	r3, #0
   84bce:	bf14      	ite	ne
   84bd0:	2301      	movne	r3, #1
   84bd2:	2300      	moveq	r3, #0
   84bd4:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   84bd6:	4618      	mov	r0, r3
   84bd8:	46bd      	mov	sp, r7
   84bda:	bc80      	pop	{r7}
   84bdc:	4770      	bx	lr
   84bde:	bf00      	nop
   84be0:	400a4000 	.word	0x400a4000

00084be4 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   84be4:	b480      	push	{r7}
   84be6:	b083      	sub	sp, #12
   84be8:	af00      	add	r7, sp, #0
   84bea:	4603      	mov	r3, r0
   84bec:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   84bee:	4b0d      	ldr	r3, [pc, #52]	; (84c24 <udd_set_address+0x40>)
   84bf0:	681b      	ldr	r3, [r3, #0]
   84bf2:	4a0c      	ldr	r2, [pc, #48]	; (84c24 <udd_set_address+0x40>)
   84bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84bf8:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   84bfa:	4b0a      	ldr	r3, [pc, #40]	; (84c24 <udd_set_address+0x40>)
   84bfc:	681b      	ldr	r3, [r3, #0]
   84bfe:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   84c02:	79fb      	ldrb	r3, [r7, #7]
   84c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   84c08:	4906      	ldr	r1, [pc, #24]	; (84c24 <udd_set_address+0x40>)
   84c0a:	4313      	orrs	r3, r2
   84c0c:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   84c0e:	4b05      	ldr	r3, [pc, #20]	; (84c24 <udd_set_address+0x40>)
   84c10:	681b      	ldr	r3, [r3, #0]
   84c12:	4a04      	ldr	r2, [pc, #16]	; (84c24 <udd_set_address+0x40>)
   84c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84c18:	6013      	str	r3, [r2, #0]
}
   84c1a:	bf00      	nop
   84c1c:	370c      	adds	r7, #12
   84c1e:	46bd      	mov	sp, r7
   84c20:	bc80      	pop	{r7}
   84c22:	4770      	bx	lr
   84c24:	400a4000 	.word	0x400a4000

00084c28 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   84c28:	b480      	push	{r7}
   84c2a:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   84c2c:	4b04      	ldr	r3, [pc, #16]	; (84c40 <udd_getaddress+0x18>)
   84c2e:	681b      	ldr	r3, [r3, #0]
   84c30:	b2db      	uxtb	r3, r3
   84c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   84c36:	b2db      	uxtb	r3, r3
}
   84c38:	4618      	mov	r0, r3
   84c3a:	46bd      	mov	sp, r7
   84c3c:	bc80      	pop	{r7}
   84c3e:	4770      	bx	lr
   84c40:	400a4000 	.word	0x400a4000

00084c44 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   84c44:	b480      	push	{r7}
   84c46:	b083      	sub	sp, #12
   84c48:	af00      	add	r7, sp, #0
   84c4a:	6078      	str	r0, [r7, #4]
   84c4c:	460b      	mov	r3, r1
   84c4e:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   84c50:	4a05      	ldr	r2, [pc, #20]	; (84c68 <udd_set_setup_payload+0x24>)
   84c52:	687b      	ldr	r3, [r7, #4]
   84c54:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   84c56:	4a04      	ldr	r2, [pc, #16]	; (84c68 <udd_set_setup_payload+0x24>)
   84c58:	887b      	ldrh	r3, [r7, #2]
   84c5a:	8193      	strh	r3, [r2, #12]
}
   84c5c:	bf00      	nop
   84c5e:	370c      	adds	r7, #12
   84c60:	46bd      	mov	sp, r7
   84c62:	bc80      	pop	{r7}
   84c64:	4770      	bx	lr
   84c66:	bf00      	nop
   84c68:	20001828 	.word	0x20001828

00084c6c <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   84c6c:	b590      	push	{r4, r7, lr}
   84c6e:	b089      	sub	sp, #36	; 0x24
   84c70:	af02      	add	r7, sp, #8
   84c72:	4603      	mov	r3, r0
   84c74:	71fb      	strb	r3, [r7, #7]
   84c76:	460b      	mov	r3, r1
   84c78:	71bb      	strb	r3, [r7, #6]
   84c7a:	4613      	mov	r3, r2
   84c7c:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   84c7e:	2300      	movs	r3, #0
   84c80:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   84c82:	2300      	movs	r3, #0
   84c84:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   84c86:	79fb      	ldrb	r3, [r7, #7]
   84c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
   84c8c:	2b00      	cmp	r3, #0
   84c8e:	bf14      	ite	ne
   84c90:	2301      	movne	r3, #1
   84c92:	2300      	moveq	r3, #0
   84c94:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   84c96:	79fb      	ldrb	r3, [r7, #7]
   84c98:	f003 030f 	and.w	r3, r3, #15
   84c9c:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   84c9e:	79fb      	ldrb	r3, [r7, #7]
   84ca0:	2b02      	cmp	r3, #2
   84ca2:	d901      	bls.n	84ca8 <udd_ep_alloc+0x3c>
		return false;
   84ca4:	2300      	movs	r3, #0
   84ca6:	e1b4      	b.n	85012 <udd_ep_alloc+0x3a6>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   84ca8:	4ab3      	ldr	r2, [pc, #716]	; (84f78 <udd_ep_alloc+0x30c>)
   84caa:	79fb      	ldrb	r3, [r7, #7]
   84cac:	015b      	lsls	r3, r3, #5
   84cae:	4413      	add	r3, r2
   84cb0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84cb4:	681b      	ldr	r3, [r3, #0]
   84cb6:	f003 0301 	and.w	r3, r3, #1
   84cba:	2b00      	cmp	r3, #0
   84cbc:	d001      	beq.n	84cc2 <udd_ep_alloc+0x56>
		return false;
   84cbe:	2300      	movs	r3, #0
   84cc0:	e1a7      	b.n	85012 <udd_ep_alloc+0x3a6>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   84cc2:	79bb      	ldrb	r3, [r7, #6]
   84cc4:	f003 0303 	and.w	r3, r3, #3
   84cc8:	2b03      	cmp	r3, #3
   84cca:	d01a      	beq.n	84d02 <udd_ep_alloc+0x96>
   84ccc:	2b03      	cmp	r3, #3
   84cce:	dc1e      	bgt.n	84d0e <udd_ep_alloc+0xa2>
   84cd0:	2b01      	cmp	r3, #1
   84cd2:	d002      	beq.n	84cda <udd_ep_alloc+0x6e>
   84cd4:	2b02      	cmp	r3, #2
   84cd6:	d017      	beq.n	84d08 <udd_ep_alloc+0x9c>
   84cd8:	e019      	b.n	84d0e <udd_ep_alloc+0xa2>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   84cda:	79fb      	ldrb	r3, [r7, #7]
   84cdc:	2b00      	cmp	r3, #0
   84cde:	d007      	beq.n	84cf0 <udd_ep_alloc+0x84>
   84ce0:	79fb      	ldrb	r3, [r7, #7]
   84ce2:	2b03      	cmp	r3, #3
   84ce4:	d004      	beq.n	84cf0 <udd_ep_alloc+0x84>
   84ce6:	79fb      	ldrb	r3, [r7, #7]
   84ce8:	2b04      	cmp	r3, #4
   84cea:	d001      	beq.n	84cf0 <udd_ep_alloc+0x84>
   84cec:	2301      	movs	r3, #1
   84cee:	e000      	b.n	84cf2 <udd_ep_alloc+0x86>
   84cf0:	2300      	movs	r3, #0
   84cf2:	747b      	strb	r3, [r7, #17]
   84cf4:	7c7b      	ldrb	r3, [r7, #17]
   84cf6:	f003 0301 	and.w	r3, r3, #1
   84cfa:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   84cfc:	2301      	movs	r3, #1
   84cfe:	757b      	strb	r3, [r7, #21]
		break;
   84d00:	e007      	b.n	84d12 <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   84d02:	2301      	movs	r3, #1
   84d04:	757b      	strb	r3, [r7, #21]
		break;
   84d06:	e004      	b.n	84d12 <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   84d08:	2302      	movs	r3, #2
   84d0a:	757b      	strb	r3, [r7, #21]
		break;
   84d0c:	e001      	b.n	84d12 <udd_ep_alloc+0xa6>
	default:
		Assert(false);
		return false;
   84d0e:	2300      	movs	r3, #0
   84d10:	e17f      	b.n	85012 <udd_ep_alloc+0x3a6>
	}
	switch (nb_bank) {
   84d12:	7d7b      	ldrb	r3, [r7, #21]
   84d14:	2b03      	cmp	r3, #3
   84d16:	d00c      	beq.n	84d32 <udd_ep_alloc+0xc6>
   84d18:	2b03      	cmp	r3, #3
   84d1a:	dc0d      	bgt.n	84d38 <udd_ep_alloc+0xcc>
   84d1c:	2b01      	cmp	r3, #1
   84d1e:	d002      	beq.n	84d26 <udd_ep_alloc+0xba>
   84d20:	2b02      	cmp	r3, #2
   84d22:	d003      	beq.n	84d2c <udd_ep_alloc+0xc0>
   84d24:	e008      	b.n	84d38 <udd_ep_alloc+0xcc>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84d26:	2301      	movs	r3, #1
   84d28:	753b      	strb	r3, [r7, #20]
		break;
   84d2a:	e007      	b.n	84d3c <udd_ep_alloc+0xd0>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84d2c:	2302      	movs	r3, #2
   84d2e:	753b      	strb	r3, [r7, #20]
		break;
   84d30:	e004      	b.n	84d3c <udd_ep_alloc+0xd0>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84d32:	2303      	movs	r3, #3
   84d34:	753b      	strb	r3, [r7, #20]
		break;
   84d36:	e001      	b.n	84d3c <udd_ep_alloc+0xd0>
	default:
		Assert(false);
		return false;
   84d38:	2300      	movs	r3, #0
   84d3a:	e16a      	b.n	85012 <udd_ep_alloc+0x3a6>
	}
	if (b_iso_hbw) {
   84d3c:	7c7b      	ldrb	r3, [r7, #17]
   84d3e:	2b00      	cmp	r3, #0
   84d40:	d017      	beq.n	84d72 <udd_ep_alloc+0x106>
		switch(MaxEndpointSize & (0x3u << 11)) {
   84d42:	88bb      	ldrh	r3, [r7, #4]
   84d44:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   84d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   84d4c:	d003      	beq.n	84d56 <udd_ep_alloc+0xea>
   84d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   84d52:	d003      	beq.n	84d5c <udd_ep_alloc+0xf0>
   84d54:	e005      	b.n	84d62 <udd_ep_alloc+0xf6>
		case (0x1u << 11):
			nb_tran = 2;
   84d56:	2302      	movs	r3, #2
   84d58:	74fb      	strb	r3, [r7, #19]
			break;
   84d5a:	e005      	b.n	84d68 <udd_ep_alloc+0xfc>
		case (0x2u << 11):
			nb_tran = 3;
   84d5c:	2303      	movs	r3, #3
   84d5e:	74fb      	strb	r3, [r7, #19]
			break;
   84d60:	e002      	b.n	84d68 <udd_ep_alloc+0xfc>
		default:
			nb_tran = 1;
   84d62:	2301      	movs	r3, #1
   84d64:	74fb      	strb	r3, [r7, #19]
			break;
   84d66:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   84d68:	88bb      	ldrh	r3, [r7, #4]
   84d6a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   84d6e:	80bb      	strh	r3, [r7, #4]
   84d70:	e006      	b.n	84d80 <udd_ep_alloc+0x114>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   84d72:	88bb      	ldrh	r3, [r7, #4]
   84d74:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   84d78:	2b00      	cmp	r3, #0
   84d7a:	d001      	beq.n	84d80 <udd_ep_alloc+0x114>
		// High BW not supported
		return false;
   84d7c:	2300      	movs	r3, #0
   84d7e:	e148      	b.n	85012 <udd_ep_alloc+0x3a6>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   84d80:	4a7d      	ldr	r2, [pc, #500]	; (84f78 <udd_ep_alloc+0x30c>)
   84d82:	79fb      	ldrb	r3, [r7, #7]
   84d84:	3308      	adds	r3, #8
   84d86:	015b      	lsls	r3, r3, #5
   84d88:	4413      	add	r3, r2
   84d8a:	681b      	ldr	r3, [r3, #0]
   84d8c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   84d90:	f023 0303 	bic.w	r3, r3, #3
   84d94:	79ba      	ldrb	r2, [r7, #6]
   84d96:	0112      	lsls	r2, r2, #4
   84d98:	f002 0230 	and.w	r2, r2, #48	; 0x30
   84d9c:	7c39      	ldrb	r1, [r7, #16]
   84d9e:	2900      	cmp	r1, #0
   84da0:	d001      	beq.n	84da6 <udd_ep_alloc+0x13a>
   84da2:	2108      	movs	r1, #8
   84da4:	e000      	b.n	84da8 <udd_ep_alloc+0x13c>
   84da6:	2100      	movs	r1, #0
   84da8:	4311      	orrs	r1, r2
   84daa:	88ba      	ldrh	r2, [r7, #4]
   84dac:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   84db0:	d207      	bcs.n	84dc2 <udd_ep_alloc+0x156>
   84db2:	88ba      	ldrh	r2, [r7, #4]
   84db4:	2a08      	cmp	r2, #8
   84db6:	bf38      	it	cc
   84db8:	2208      	movcc	r2, #8
   84dba:	b292      	uxth	r2, r2
   84dbc:	0052      	lsls	r2, r2, #1
   84dbe:	3a01      	subs	r2, #1
   84dc0:	e001      	b.n	84dc6 <udd_ep_alloc+0x15a>
   84dc2:	f240 72ff 	movw	r2, #2047	; 0x7ff
   84dc6:	fab2 f282 	clz	r2, r2
   84dca:	f1c2 021c 	rsb	r2, r2, #28
   84dce:	4311      	orrs	r1, r2
   84dd0:	7d3a      	ldrb	r2, [r7, #20]
   84dd2:	0192      	lsls	r2, r2, #6
   84dd4:	b2d2      	uxtb	r2, r2
   84dd6:	4311      	orrs	r1, r2
   84dd8:	7c7a      	ldrb	r2, [r7, #17]
   84dda:	2a00      	cmp	r2, #0
   84ddc:	d004      	beq.n	84de8 <udd_ep_alloc+0x17c>
   84dde:	7cfa      	ldrb	r2, [r7, #19]
   84de0:	0212      	lsls	r2, r2, #8
   84de2:	f402 7240 	and.w	r2, r2, #768	; 0x300
   84de6:	e000      	b.n	84dea <udd_ep_alloc+0x17e>
   84de8:	2200      	movs	r2, #0
   84dea:	430a      	orrs	r2, r1
   84dec:	f3c2 0209 	ubfx	r2, r2, #0, #10
   84df0:	4861      	ldr	r0, [pc, #388]	; (84f78 <udd_ep_alloc+0x30c>)
   84df2:	79f9      	ldrb	r1, [r7, #7]
   84df4:	431a      	orrs	r2, r3
   84df6:	f101 0308 	add.w	r3, r1, #8
   84dfa:	015b      	lsls	r3, r3, #5
   84dfc:	4403      	add	r3, r0
   84dfe:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   84e00:	4a5d      	ldr	r2, [pc, #372]	; (84f78 <udd_ep_alloc+0x30c>)
   84e02:	79fb      	ldrb	r3, [r7, #7]
   84e04:	3308      	adds	r3, #8
   84e06:	015b      	lsls	r3, r3, #5
   84e08:	4413      	add	r3, r2
   84e0a:	681b      	ldr	r3, [r3, #0]
   84e0c:	2b00      	cmp	r3, #0
   84e0e:	db01      	blt.n	84e14 <udd_ep_alloc+0x1a8>
		return false;
   84e10:	2300      	movs	r3, #0
   84e12:	e0fe      	b.n	85012 <udd_ep_alloc+0x3a6>
	}
	udd_enable_endpoint(ep);
   84e14:	4a58      	ldr	r2, [pc, #352]	; (84f78 <udd_ep_alloc+0x30c>)
   84e16:	79fb      	ldrb	r3, [r7, #7]
   84e18:	3308      	adds	r3, #8
   84e1a:	015b      	lsls	r3, r3, #5
   84e1c:	4413      	add	r3, r2
   84e1e:	3304      	adds	r3, #4
   84e20:	2201      	movs	r2, #1
   84e22:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   84e24:	2300      	movs	r3, #0
   84e26:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84e28:	2302      	movs	r3, #2
   84e2a:	74bb      	strb	r3, [r7, #18]
   84e2c:	e039      	b.n	84ea2 <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
   84e2e:	4a52      	ldr	r2, [pc, #328]	; (84f78 <udd_ep_alloc+0x30c>)
   84e30:	7cbb      	ldrb	r3, [r7, #18]
   84e32:	015b      	lsls	r3, r3, #5
   84e34:	4413      	add	r3, r2
   84e36:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84e3a:	681b      	ldr	r3, [r3, #0]
   84e3c:	f003 0301 	and.w	r3, r3, #1
   84e40:	2b00      	cmp	r3, #0
   84e42:	d02b      	beq.n	84e9c <udd_ep_alloc+0x230>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   84e44:	4a4c      	ldr	r2, [pc, #304]	; (84f78 <udd_ep_alloc+0x30c>)
   84e46:	7cbb      	ldrb	r3, [r7, #18]
   84e48:	3308      	adds	r3, #8
   84e4a:	015b      	lsls	r3, r3, #5
   84e4c:	4413      	add	r3, r2
   84e4e:	681b      	ldr	r3, [r3, #0]
   84e50:	099b      	lsrs	r3, r3, #6
   84e52:	b2db      	uxtb	r3, r3
   84e54:	f003 0303 	and.w	r3, r3, #3
   84e58:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   84e5a:	7d3a      	ldrb	r2, [r7, #20]
   84e5c:	7cbb      	ldrb	r3, [r7, #18]
   84e5e:	005b      	lsls	r3, r3, #1
   84e60:	fa02 f303 	lsl.w	r3, r2, r3
   84e64:	b21a      	sxth	r2, r3
   84e66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   84e6a:	4313      	orrs	r3, r2
   84e6c:	b21b      	sxth	r3, r3
   84e6e:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   84e70:	4a41      	ldr	r2, [pc, #260]	; (84f78 <udd_ep_alloc+0x30c>)
   84e72:	7cbb      	ldrb	r3, [r7, #18]
   84e74:	015b      	lsls	r3, r3, #5
   84e76:	4413      	add	r3, r2
   84e78:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84e7c:	2201      	movs	r2, #1
   84e7e:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   84e80:	4a3d      	ldr	r2, [pc, #244]	; (84f78 <udd_ep_alloc+0x30c>)
   84e82:	7cbb      	ldrb	r3, [r7, #18]
   84e84:	3308      	adds	r3, #8
   84e86:	015b      	lsls	r3, r3, #5
   84e88:	4413      	add	r3, r2
   84e8a:	681a      	ldr	r2, [r3, #0]
   84e8c:	493a      	ldr	r1, [pc, #232]	; (84f78 <udd_ep_alloc+0x30c>)
   84e8e:	7cbb      	ldrb	r3, [r7, #18]
   84e90:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   84e94:	3308      	adds	r3, #8
   84e96:	015b      	lsls	r3, r3, #5
   84e98:	440b      	add	r3, r1
   84e9a:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84e9c:	7cbb      	ldrb	r3, [r7, #18]
   84e9e:	3b01      	subs	r3, #1
   84ea0:	74bb      	strb	r3, [r7, #18]
   84ea2:	7cba      	ldrb	r2, [r7, #18]
   84ea4:	79fb      	ldrb	r3, [r7, #7]
   84ea6:	429a      	cmp	r2, r3
   84ea8:	d2c1      	bcs.n	84e2e <udd_ep_alloc+0x1c2>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   84eaa:	79fb      	ldrb	r3, [r7, #7]
   84eac:	74bb      	strb	r3, [r7, #18]
   84eae:	e0ab      	b.n	85008 <udd_ep_alloc+0x39c>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   84eb0:	7cbb      	ldrb	r3, [r7, #18]
   84eb2:	1e5a      	subs	r2, r3, #1
   84eb4:	4613      	mov	r3, r2
   84eb6:	005b      	lsls	r3, r3, #1
   84eb8:	4413      	add	r3, r2
   84eba:	00db      	lsls	r3, r3, #3
   84ebc:	4a2f      	ldr	r2, [pc, #188]	; (84f7c <udd_ep_alloc+0x310>)
   84ebe:	4413      	add	r3, r2
   84ec0:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   84ec2:	68fb      	ldr	r3, [r7, #12]
   84ec4:	7d1b      	ldrb	r3, [r3, #20]
   84ec6:	f3c3 0300 	ubfx	r3, r3, #0, #1
   84eca:	b2db      	uxtb	r3, r3
   84ecc:	2b00      	cmp	r3, #0
   84ece:	bf14      	ite	ne
   84ed0:	2301      	movne	r3, #1
   84ed2:	2300      	moveq	r3, #0
   84ed4:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   84ed6:	8afa      	ldrh	r2, [r7, #22]
   84ed8:	7cbb      	ldrb	r3, [r7, #18]
   84eda:	005b      	lsls	r3, r3, #1
   84edc:	fa42 f303 	asr.w	r3, r2, r3
   84ee0:	b2db      	uxtb	r3, r3
   84ee2:	f003 0303 	and.w	r3, r3, #3
   84ee6:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   84ee8:	7d3b      	ldrb	r3, [r7, #20]
   84eea:	2b00      	cmp	r3, #0
   84eec:	f000 8088 	beq.w	85000 <udd_ep_alloc+0x394>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   84ef0:	68fa      	ldr	r2, [r7, #12]
   84ef2:	7d13      	ldrb	r3, [r2, #20]
   84ef4:	f36f 0300 	bfc	r3, #0, #1
   84ef8:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   84efa:	4a1f      	ldr	r2, [pc, #124]	; (84f78 <udd_ep_alloc+0x30c>)
   84efc:	7cbb      	ldrb	r3, [r7, #18]
   84efe:	3308      	adds	r3, #8
   84f00:	015b      	lsls	r3, r3, #5
   84f02:	4413      	add	r3, r2
   84f04:	681b      	ldr	r3, [r3, #0]
   84f06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   84f0a:	7d3b      	ldrb	r3, [r7, #20]
   84f0c:	019b      	lsls	r3, r3, #6
   84f0e:	b2da      	uxtb	r2, r3
   84f10:	4819      	ldr	r0, [pc, #100]	; (84f78 <udd_ep_alloc+0x30c>)
   84f12:	7cbb      	ldrb	r3, [r7, #18]
   84f14:	430a      	orrs	r2, r1
   84f16:	3308      	adds	r3, #8
   84f18:	015b      	lsls	r3, r3, #5
   84f1a:	4403      	add	r3, r0
   84f1c:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   84f1e:	4a16      	ldr	r2, [pc, #88]	; (84f78 <udd_ep_alloc+0x30c>)
   84f20:	7cbb      	ldrb	r3, [r7, #18]
   84f22:	3308      	adds	r3, #8
   84f24:	015b      	lsls	r3, r3, #5
   84f26:	4413      	add	r3, r2
   84f28:	3304      	adds	r3, #4
   84f2a:	2201      	movs	r2, #1
   84f2c:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   84f2e:	4a12      	ldr	r2, [pc, #72]	; (84f78 <udd_ep_alloc+0x30c>)
   84f30:	7cbb      	ldrb	r3, [r7, #18]
   84f32:	3308      	adds	r3, #8
   84f34:	015b      	lsls	r3, r3, #5
   84f36:	4413      	add	r3, r2
   84f38:	681b      	ldr	r3, [r3, #0]
   84f3a:	2b00      	cmp	r3, #0
   84f3c:	db20      	blt.n	84f80 <udd_ep_alloc+0x314>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   84f3e:	68fb      	ldr	r3, [r7, #12]
   84f40:	681b      	ldr	r3, [r3, #0]
   84f42:	2b00      	cmp	r3, #0
   84f44:	d101      	bne.n	84f4a <udd_ep_alloc+0x2de>
				return false;
   84f46:	2300      	movs	r3, #0
   84f48:	e063      	b.n	85012 <udd_ep_alloc+0x3a6>
			}
			if (Is_udd_endpoint_in(i)) {
   84f4a:	4a0b      	ldr	r2, [pc, #44]	; (84f78 <udd_ep_alloc+0x30c>)
   84f4c:	7cbb      	ldrb	r3, [r7, #18]
   84f4e:	3308      	adds	r3, #8
   84f50:	015b      	lsls	r3, r3, #5
   84f52:	4413      	add	r3, r2
   84f54:	681b      	ldr	r3, [r3, #0]
   84f56:	f003 0308 	and.w	r3, r3, #8
   84f5a:	2b00      	cmp	r3, #0
   84f5c:	d003      	beq.n	84f66 <udd_ep_alloc+0x2fa>
				i |= USB_EP_DIR_IN;
   84f5e:	7cbb      	ldrb	r3, [r7, #18]
   84f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
   84f64:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   84f66:	68fb      	ldr	r3, [r7, #12]
   84f68:	681b      	ldr	r3, [r3, #0]
   84f6a:	68fa      	ldr	r2, [r7, #12]
   84f6c:	68d1      	ldr	r1, [r2, #12]
   84f6e:	7cba      	ldrb	r2, [r7, #18]
   84f70:	2001      	movs	r0, #1
   84f72:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   84f74:	2300      	movs	r3, #0
   84f76:	e04c      	b.n	85012 <udd_ep_alloc+0x3a6>
   84f78:	400a4000 	.word	0x400a4000
   84f7c:	2000134c 	.word	0x2000134c
		}
		udd_enable_endpoint_bank_autoswitch(i);
   84f80:	4a26      	ldr	r2, [pc, #152]	; (8501c <udd_ep_alloc+0x3b0>)
   84f82:	7cbb      	ldrb	r3, [r7, #18]
   84f84:	3308      	adds	r3, #8
   84f86:	015b      	lsls	r3, r3, #5
   84f88:	4413      	add	r3, r2
   84f8a:	3304      	adds	r3, #4
   84f8c:	681a      	ldr	r2, [r3, #0]
   84f8e:	4923      	ldr	r1, [pc, #140]	; (8501c <udd_ep_alloc+0x3b0>)
   84f90:	7cbb      	ldrb	r3, [r7, #18]
   84f92:	f042 0202 	orr.w	r2, r2, #2
   84f96:	3308      	adds	r3, #8
   84f98:	015b      	lsls	r3, r3, #5
   84f9a:	440b      	add	r3, r1
   84f9c:	3304      	adds	r3, #4
   84f9e:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   84fa0:	7afb      	ldrb	r3, [r7, #11]
   84fa2:	2b00      	cmp	r3, #0
   84fa4:	d02d      	beq.n	85002 <udd_ep_alloc+0x396>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   84fa6:	68fb      	ldr	r3, [r7, #12]
   84fa8:	68da      	ldr	r2, [r3, #12]
   84faa:	68fb      	ldr	r3, [r7, #12]
   84fac:	691b      	ldr	r3, [r3, #16]
   84fae:	1ad2      	subs	r2, r2, r3
   84fb0:	68fb      	ldr	r3, [r7, #12]
   84fb2:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   84fb4:	68fb      	ldr	r3, [r7, #12]
   84fb6:	7d1b      	ldrb	r3, [r3, #20]
   84fb8:	f3c3 0340 	ubfx	r3, r3, #1, #1
   84fbc:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   84fbe:	2b00      	cmp	r3, #0
   84fc0:	bf14      	ite	ne
   84fc2:	2301      	movne	r3, #1
   84fc4:	2300      	moveq	r3, #0
   84fc6:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   84fc8:	68fb      	ldr	r3, [r7, #12]
   84fca:	685a      	ldr	r2, [r3, #4]
   84fcc:	68fb      	ldr	r3, [r7, #12]
   84fce:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   84fd0:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   84fd2:	68fb      	ldr	r3, [r7, #12]
   84fd4:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   84fd6:	68fb      	ldr	r3, [r7, #12]
   84fd8:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   84fda:	1ad2      	subs	r2, r2, r3
   84fdc:	68fb      	ldr	r3, [r7, #12]
   84fde:	681b      	ldr	r3, [r3, #0]
   84fe0:	7cb8      	ldrb	r0, [r7, #18]
   84fe2:	9300      	str	r3, [sp, #0]
   84fe4:	4613      	mov	r3, r2
   84fe6:	4622      	mov	r2, r4
   84fe8:	4c0d      	ldr	r4, [pc, #52]	; (85020 <udd_ep_alloc+0x3b4>)
   84fea:	47a0      	blx	r4
   84fec:	4603      	mov	r3, r0
   84fee:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   84ff0:	7afb      	ldrb	r3, [r7, #11]
   84ff2:	f083 0301 	eor.w	r3, r3, #1
   84ff6:	b2db      	uxtb	r3, r3
   84ff8:	2b00      	cmp	r3, #0
   84ffa:	d002      	beq.n	85002 <udd_ep_alloc+0x396>
				dbg_print("ErrReRun%d ", i);
				return false;
   84ffc:	2300      	movs	r3, #0
   84ffe:	e008      	b.n	85012 <udd_ep_alloc+0x3a6>
			continue;
   85000:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   85002:	7cbb      	ldrb	r3, [r7, #18]
   85004:	3301      	adds	r3, #1
   85006:	74bb      	strb	r3, [r7, #18]
   85008:	7cbb      	ldrb	r3, [r7, #18]
   8500a:	2b02      	cmp	r3, #2
   8500c:	f67f af50 	bls.w	84eb0 <udd_ep_alloc+0x244>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   85010:	2301      	movs	r3, #1
}
   85012:	4618      	mov	r0, r3
   85014:	371c      	adds	r7, #28
   85016:	46bd      	mov	sp, r7
   85018:	bd90      	pop	{r4, r7, pc}
   8501a:	bf00      	nop
   8501c:	400a4000 	.word	0x400a4000
   85020:	00085351 	.word	0x00085351

00085024 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   85024:	b580      	push	{r7, lr}
   85026:	b084      	sub	sp, #16
   85028:	af00      	add	r7, sp, #0
   8502a:	4603      	mov	r3, r0
   8502c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8502e:	79fb      	ldrb	r3, [r7, #7]
   85030:	f003 030f 	and.w	r3, r3, #15
   85034:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   85036:	7bfb      	ldrb	r3, [r7, #15]
   85038:	2b02      	cmp	r3, #2
   8503a:	d828      	bhi.n	8508e <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   8503c:	4a16      	ldr	r2, [pc, #88]	; (85098 <udd_ep_free+0x74>)
   8503e:	7bfb      	ldrb	r3, [r7, #15]
   85040:	015b      	lsls	r3, r3, #5
   85042:	4413      	add	r3, r2
   85044:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85048:	2201      	movs	r2, #1
   8504a:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   8504c:	4a12      	ldr	r2, [pc, #72]	; (85098 <udd_ep_free+0x74>)
   8504e:	7bfb      	ldrb	r3, [r7, #15]
   85050:	3308      	adds	r3, #8
   85052:	015b      	lsls	r3, r3, #5
   85054:	4413      	add	r3, r2
   85056:	681a      	ldr	r2, [r3, #0]
   85058:	490f      	ldr	r1, [pc, #60]	; (85098 <udd_ep_free+0x74>)
   8505a:	7bfb      	ldrb	r3, [r7, #15]
   8505c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   85060:	3308      	adds	r3, #8
   85062:	015b      	lsls	r3, r3, #5
   85064:	440b      	add	r3, r1
   85066:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   85068:	79fb      	ldrb	r3, [r7, #7]
   8506a:	4618      	mov	r0, r3
   8506c:	4b0b      	ldr	r3, [pc, #44]	; (8509c <udd_ep_free+0x78>)
   8506e:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   85070:	7bfb      	ldrb	r3, [r7, #15]
   85072:	1e5a      	subs	r2, r3, #1
   85074:	490a      	ldr	r1, [pc, #40]	; (850a0 <udd_ep_free+0x7c>)
   85076:	4613      	mov	r3, r2
   85078:	005b      	lsls	r3, r3, #1
   8507a:	4413      	add	r3, r2
   8507c:	00db      	lsls	r3, r3, #3
   8507e:	440b      	add	r3, r1
   85080:	f103 0210 	add.w	r2, r3, #16
   85084:	7913      	ldrb	r3, [r2, #4]
   85086:	f36f 0382 	bfc	r3, #2, #1
   8508a:	7113      	strb	r3, [r2, #4]
   8508c:	e000      	b.n	85090 <udd_ep_free+0x6c>
		return;
   8508e:	bf00      	nop
}
   85090:	3710      	adds	r7, #16
   85092:	46bd      	mov	sp, r7
   85094:	bd80      	pop	{r7, pc}
   85096:	bf00      	nop
   85098:	400a4000 	.word	0x400a4000
   8509c:	00085e61 	.word	0x00085e61
   850a0:	2000134c 	.word	0x2000134c

000850a4 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   850a4:	b480      	push	{r7}
   850a6:	b085      	sub	sp, #20
   850a8:	af00      	add	r7, sp, #0
   850aa:	4603      	mov	r3, r0
   850ac:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   850ae:	79fb      	ldrb	r3, [r7, #7]
   850b0:	f003 030f 	and.w	r3, r3, #15
   850b4:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   850b6:	7bfb      	ldrb	r3, [r7, #15]
   850b8:	1e5a      	subs	r2, r3, #1
   850ba:	4613      	mov	r3, r2
   850bc:	005b      	lsls	r3, r3, #1
   850be:	4413      	add	r3, r2
   850c0:	00db      	lsls	r3, r3, #3
   850c2:	4a10      	ldr	r2, [pc, #64]	; (85104 <udd_ep_is_halted+0x60>)
   850c4:	4413      	add	r3, r2
   850c6:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   850c8:	4a0f      	ldr	r2, [pc, #60]	; (85108 <udd_ep_is_halted+0x64>)
   850ca:	7bfb      	ldrb	r3, [r7, #15]
   850cc:	015b      	lsls	r3, r3, #5
   850ce:	4413      	add	r3, r2
   850d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   850d4:	681b      	ldr	r3, [r3, #0]
   850d6:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   850da:	2b00      	cmp	r3, #0
   850dc:	d106      	bne.n	850ec <udd_ep_is_halted+0x48>
   850de:	68bb      	ldr	r3, [r7, #8]
   850e0:	7d1b      	ldrb	r3, [r3, #20]
   850e2:	f003 0304 	and.w	r3, r3, #4
   850e6:	b2db      	uxtb	r3, r3
   850e8:	2b00      	cmp	r3, #0
   850ea:	d001      	beq.n	850f0 <udd_ep_is_halted+0x4c>
   850ec:	2301      	movs	r3, #1
   850ee:	e000      	b.n	850f2 <udd_ep_is_halted+0x4e>
   850f0:	2300      	movs	r3, #0
   850f2:	f003 0301 	and.w	r3, r3, #1
   850f6:	b2db      	uxtb	r3, r3
}
   850f8:	4618      	mov	r0, r3
   850fa:	3714      	adds	r7, #20
   850fc:	46bd      	mov	sp, r7
   850fe:	bc80      	pop	{r7}
   85100:	4770      	bx	lr
   85102:	bf00      	nop
   85104:	2000134c 	.word	0x2000134c
   85108:	400a4000 	.word	0x400a4000

0008510c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   8510c:	b480      	push	{r7}
   8510e:	b085      	sub	sp, #20
   85110:	af00      	add	r7, sp, #0
   85112:	4603      	mov	r3, r0
   85114:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85116:	79fb      	ldrb	r3, [r7, #7]
   85118:	f003 030f 	and.w	r3, r3, #15
   8511c:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   8511e:	7bfb      	ldrb	r3, [r7, #15]
   85120:	2b02      	cmp	r3, #2
   85122:	d901      	bls.n	85128 <udd_ep_set_halt+0x1c>
		return false;
   85124:	2300      	movs	r3, #0
   85126:	e071      	b.n	8520c <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   85128:	7bfb      	ldrb	r3, [r7, #15]
   8512a:	1e5a      	subs	r2, r3, #1
   8512c:	4613      	mov	r3, r2
   8512e:	005b      	lsls	r3, r3, #1
   85130:	4413      	add	r3, r2
   85132:	00db      	lsls	r3, r3, #3
   85134:	4a38      	ldr	r2, [pc, #224]	; (85218 <udd_ep_set_halt+0x10c>)
   85136:	4413      	add	r3, r2
   85138:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   8513a:	4a38      	ldr	r2, [pc, #224]	; (8521c <udd_ep_set_halt+0x110>)
   8513c:	7bfb      	ldrb	r3, [r7, #15]
   8513e:	015b      	lsls	r3, r3, #5
   85140:	4413      	add	r3, r2
   85142:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85146:	681b      	ldr	r3, [r3, #0]
   85148:	f003 0320 	and.w	r3, r3, #32
   8514c:	2b00      	cmp	r3, #0
   8514e:	d106      	bne.n	8515e <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   85150:	68bb      	ldr	r3, [r7, #8]
   85152:	7d1b      	ldrb	r3, [r3, #20]
   85154:	f003 0304 	and.w	r3, r3, #4
   85158:	b2db      	uxtb	r3, r3
   8515a:	2b00      	cmp	r3, #0
   8515c:	d001      	beq.n	85162 <udd_ep_set_halt+0x56>
		return true; // Already STALL
   8515e:	2301      	movs	r3, #1
   85160:	e054      	b.n	8520c <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   85162:	68bb      	ldr	r3, [r7, #8]
   85164:	7d1b      	ldrb	r3, [r3, #20]
   85166:	f003 0301 	and.w	r3, r3, #1
   8516a:	b2db      	uxtb	r3, r3
   8516c:	2b00      	cmp	r3, #0
   8516e:	d001      	beq.n	85174 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   85170:	2300      	movs	r3, #0
   85172:	e04b      	b.n	8520c <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   85174:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85178:	2b00      	cmp	r3, #0
   8517a:	da25      	bge.n	851c8 <udd_ep_set_halt+0xbc>
   8517c:	4a27      	ldr	r2, [pc, #156]	; (8521c <udd_ep_set_halt+0x110>)
   8517e:	7bfb      	ldrb	r3, [r7, #15]
   85180:	015b      	lsls	r3, r3, #5
   85182:	4413      	add	r3, r2
   85184:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85188:	681b      	ldr	r3, [r3, #0]
   8518a:	0c9b      	lsrs	r3, r3, #18
   8518c:	f003 0303 	and.w	r3, r3, #3
   85190:	2b00      	cmp	r3, #0
   85192:	d019      	beq.n	851c8 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   85194:	68ba      	ldr	r2, [r7, #8]
   85196:	7d13      	ldrb	r3, [r2, #20]
   85198:	f043 0304 	orr.w	r3, r3, #4
   8519c:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   8519e:	4a1f      	ldr	r2, [pc, #124]	; (8521c <udd_ep_set_halt+0x110>)
   851a0:	7bfb      	ldrb	r3, [r7, #15]
   851a2:	3308      	adds	r3, #8
   851a4:	015b      	lsls	r3, r3, #5
   851a6:	4413      	add	r3, r2
   851a8:	3304      	adds	r3, #4
   851aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   851ae:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   851b0:	4b1a      	ldr	r3, [pc, #104]	; (8521c <udd_ep_set_halt+0x110>)
   851b2:	691a      	ldr	r2, [r3, #16]
   851b4:	7bfb      	ldrb	r3, [r7, #15]
   851b6:	f44f 7180 	mov.w	r1, #256	; 0x100
   851ba:	fa01 f303 	lsl.w	r3, r1, r3
   851be:	4917      	ldr	r1, [pc, #92]	; (8521c <udd_ep_set_halt+0x110>)
   851c0:	4313      	orrs	r3, r2
   851c2:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   851c4:	2301      	movs	r3, #1
   851c6:	e021      	b.n	8520c <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   851c8:	4a14      	ldr	r2, [pc, #80]	; (8521c <udd_ep_set_halt+0x110>)
   851ca:	7bfb      	ldrb	r3, [r7, #15]
   851cc:	015b      	lsls	r3, r3, #5
   851ce:	4413      	add	r3, r2
   851d0:	f503 7384 	add.w	r3, r3, #264	; 0x108
   851d4:	681a      	ldr	r2, [r3, #0]
   851d6:	4911      	ldr	r1, [pc, #68]	; (8521c <udd_ep_set_halt+0x110>)
   851d8:	7bfb      	ldrb	r3, [r7, #15]
   851da:	f022 0202 	bic.w	r2, r2, #2
   851de:	015b      	lsls	r3, r3, #5
   851e0:	440b      	add	r3, r1
   851e2:	f503 7384 	add.w	r3, r3, #264	; 0x108
   851e6:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   851e8:	4a0c      	ldr	r2, [pc, #48]	; (8521c <udd_ep_set_halt+0x110>)
   851ea:	7bfb      	ldrb	r3, [r7, #15]
   851ec:	015b      	lsls	r3, r3, #5
   851ee:	4413      	add	r3, r2
   851f0:	f503 738c 	add.w	r3, r3, #280	; 0x118
   851f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   851f8:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   851fa:	4a08      	ldr	r2, [pc, #32]	; (8521c <udd_ep_set_halt+0x110>)
   851fc:	7bfb      	ldrb	r3, [r7, #15]
   851fe:	015b      	lsls	r3, r3, #5
   85200:	4413      	add	r3, r2
   85202:	f503 738a 	add.w	r3, r3, #276	; 0x114
   85206:	2220      	movs	r2, #32
   85208:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   8520a:	2301      	movs	r3, #1
}
   8520c:	4618      	mov	r0, r3
   8520e:	3714      	adds	r7, #20
   85210:	46bd      	mov	sp, r7
   85212:	bc80      	pop	{r7}
   85214:	4770      	bx	lr
   85216:	bf00      	nop
   85218:	2000134c 	.word	0x2000134c
   8521c:	400a4000 	.word	0x400a4000

00085220 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   85220:	b580      	push	{r7, lr}
   85222:	b084      	sub	sp, #16
   85224:	af00      	add	r7, sp, #0
   85226:	4603      	mov	r3, r0
   85228:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   8522a:	2300      	movs	r3, #0
   8522c:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   8522e:	79fb      	ldrb	r3, [r7, #7]
   85230:	f003 030f 	and.w	r3, r3, #15
   85234:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   85236:	79fb      	ldrb	r3, [r7, #7]
   85238:	2b02      	cmp	r3, #2
   8523a:	d901      	bls.n	85240 <udd_ep_clear_halt+0x20>
		return false;
   8523c:	2300      	movs	r3, #0
   8523e:	e07e      	b.n	8533e <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   85240:	79fb      	ldrb	r3, [r7, #7]
   85242:	1e5a      	subs	r2, r3, #1
   85244:	4613      	mov	r3, r2
   85246:	005b      	lsls	r3, r3, #1
   85248:	4413      	add	r3, r2
   8524a:	00db      	lsls	r3, r3, #3
   8524c:	4a3e      	ldr	r2, [pc, #248]	; (85348 <udd_ep_clear_halt+0x128>)
   8524e:	4413      	add	r3, r2
   85250:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   85252:	68bb      	ldr	r3, [r7, #8]
   85254:	7d1b      	ldrb	r3, [r3, #20]
   85256:	f003 0304 	and.w	r3, r3, #4
   8525a:	b2db      	uxtb	r3, r3
   8525c:	2b00      	cmp	r3, #0
   8525e:	d01a      	beq.n	85296 <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   85260:	68ba      	ldr	r2, [r7, #8]
   85262:	7d13      	ldrb	r3, [r2, #20]
   85264:	f36f 0382 	bfc	r3, #2, #1
   85268:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   8526a:	4a38      	ldr	r2, [pc, #224]	; (8534c <udd_ep_clear_halt+0x12c>)
   8526c:	79fb      	ldrb	r3, [r7, #7]
   8526e:	015b      	lsls	r3, r3, #5
   85270:	4413      	add	r3, r2
   85272:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85276:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   8527a:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   8527c:	4b33      	ldr	r3, [pc, #204]	; (8534c <udd_ep_clear_halt+0x12c>)
   8527e:	691a      	ldr	r2, [r3, #16]
   85280:	79fb      	ldrb	r3, [r7, #7]
   85282:	f44f 7180 	mov.w	r1, #256	; 0x100
   85286:	fa01 f303 	lsl.w	r3, r1, r3
   8528a:	43db      	mvns	r3, r3
   8528c:	492f      	ldr	r1, [pc, #188]	; (8534c <udd_ep_clear_halt+0x12c>)
   8528e:	4013      	ands	r3, r2
   85290:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   85292:	2301      	movs	r3, #1
   85294:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   85296:	4a2d      	ldr	r2, [pc, #180]	; (8534c <udd_ep_clear_halt+0x12c>)
   85298:	79fb      	ldrb	r3, [r7, #7]
   8529a:	015b      	lsls	r3, r3, #5
   8529c:	4413      	add	r3, r2
   8529e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   852a2:	681b      	ldr	r3, [r3, #0]
   852a4:	f003 0320 	and.w	r3, r3, #32
   852a8:	2b00      	cmp	r3, #0
   852aa:	d035      	beq.n	85318 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   852ac:	4a27      	ldr	r2, [pc, #156]	; (8534c <udd_ep_clear_halt+0x12c>)
   852ae:	79fb      	ldrb	r3, [r7, #7]
   852b0:	015b      	lsls	r3, r3, #5
   852b2:	4413      	add	r3, r2
   852b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   852b8:	681b      	ldr	r3, [r3, #0]
   852ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   852be:	2b00      	cmp	r3, #0
   852c0:	d010      	beq.n	852e4 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   852c2:	4a22      	ldr	r2, [pc, #136]	; (8534c <udd_ep_clear_halt+0x12c>)
   852c4:	79fb      	ldrb	r3, [r7, #7]
   852c6:	015b      	lsls	r3, r3, #5
   852c8:	4413      	add	r3, r2
   852ca:	f503 738c 	add.w	r3, r3, #280	; 0x118
   852ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   852d2:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   852d4:	4a1d      	ldr	r2, [pc, #116]	; (8534c <udd_ep_clear_halt+0x12c>)
   852d6:	79fb      	ldrb	r3, [r7, #7]
   852d8:	015b      	lsls	r3, r3, #5
   852da:	4413      	add	r3, r2
   852dc:	f503 738c 	add.w	r3, r3, #280	; 0x118
   852e0:	2240      	movs	r2, #64	; 0x40
   852e2:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   852e4:	4a19      	ldr	r2, [pc, #100]	; (8534c <udd_ep_clear_halt+0x12c>)
   852e6:	79fb      	ldrb	r3, [r7, #7]
   852e8:	015b      	lsls	r3, r3, #5
   852ea:	4413      	add	r3, r2
   852ec:	f503 738c 	add.w	r3, r3, #280	; 0x118
   852f0:	2220      	movs	r2, #32
   852f2:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   852f4:	4a15      	ldr	r2, [pc, #84]	; (8534c <udd_ep_clear_halt+0x12c>)
   852f6:	79fb      	ldrb	r3, [r7, #7]
   852f8:	3308      	adds	r3, #8
   852fa:	015b      	lsls	r3, r3, #5
   852fc:	4413      	add	r3, r2
   852fe:	3304      	adds	r3, #4
   85300:	681a      	ldr	r2, [r3, #0]
   85302:	4912      	ldr	r1, [pc, #72]	; (8534c <udd_ep_clear_halt+0x12c>)
   85304:	79fb      	ldrb	r3, [r7, #7]
   85306:	f042 0202 	orr.w	r2, r2, #2
   8530a:	3308      	adds	r3, #8
   8530c:	015b      	lsls	r3, r3, #5
   8530e:	440b      	add	r3, r1
   85310:	3304      	adds	r3, #4
   85312:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   85314:	2301      	movs	r3, #1
   85316:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   85318:	7bfb      	ldrb	r3, [r7, #15]
   8531a:	2b00      	cmp	r3, #0
   8531c:	d00e      	beq.n	8533c <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   8531e:	68bb      	ldr	r3, [r7, #8]
   85320:	7d1b      	ldrb	r3, [r3, #20]
   85322:	f003 0301 	and.w	r3, r3, #1
   85326:	b2db      	uxtb	r3, r3
   85328:	2b00      	cmp	r3, #0
   8532a:	d007      	beq.n	8533c <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   8532c:	68ba      	ldr	r2, [r7, #8]
   8532e:	7d13      	ldrb	r3, [r2, #20]
   85330:	f36f 0300 	bfc	r3, #0, #1
   85334:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   85336:	68bb      	ldr	r3, [r7, #8]
   85338:	681b      	ldr	r3, [r3, #0]
   8533a:	4798      	blx	r3
		}
	}
	return true;
   8533c:	2301      	movs	r3, #1
}
   8533e:	4618      	mov	r0, r3
   85340:	3710      	adds	r7, #16
   85342:	46bd      	mov	sp, r7
   85344:	bd80      	pop	{r7, pc}
   85346:	bf00      	nop
   85348:	2000134c 	.word	0x2000134c
   8534c:	400a4000 	.word	0x400a4000

00085350 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   85350:	b580      	push	{r7, lr}
   85352:	b086      	sub	sp, #24
   85354:	af00      	add	r7, sp, #0
   85356:	60ba      	str	r2, [r7, #8]
   85358:	607b      	str	r3, [r7, #4]
   8535a:	4603      	mov	r3, r0
   8535c:	73fb      	strb	r3, [r7, #15]
   8535e:	460b      	mov	r3, r1
   85360:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   85362:	7bfb      	ldrb	r3, [r7, #15]
   85364:	f003 030f 	and.w	r3, r3, #15
   85368:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   8536a:	7bfb      	ldrb	r3, [r7, #15]
   8536c:	2b02      	cmp	r3, #2
   8536e:	d901      	bls.n	85374 <udd_ep_run+0x24>
		return false;
   85370:	2300      	movs	r3, #0
   85372:	e063      	b.n	8543c <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   85374:	7bfb      	ldrb	r3, [r7, #15]
   85376:	1e5a      	subs	r2, r3, #1
   85378:	4613      	mov	r3, r2
   8537a:	005b      	lsls	r3, r3, #1
   8537c:	4413      	add	r3, r2
   8537e:	00db      	lsls	r3, r3, #3
   85380:	4a30      	ldr	r2, [pc, #192]	; (85444 <udd_ep_run+0xf4>)
   85382:	4413      	add	r3, r2
   85384:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   85386:	4a30      	ldr	r2, [pc, #192]	; (85448 <udd_ep_run+0xf8>)
   85388:	7bfb      	ldrb	r3, [r7, #15]
   8538a:	015b      	lsls	r3, r3, #5
   8538c:	4413      	add	r3, r2
   8538e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   85392:	681b      	ldr	r3, [r3, #0]
   85394:	f003 0301 	and.w	r3, r3, #1
   85398:	2b00      	cmp	r3, #0
   8539a:	d011      	beq.n	853c0 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   8539c:	4a2a      	ldr	r2, [pc, #168]	; (85448 <udd_ep_run+0xf8>)
   8539e:	7bfb      	ldrb	r3, [r7, #15]
   853a0:	015b      	lsls	r3, r3, #5
   853a2:	4413      	add	r3, r2
   853a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   853a8:	681b      	ldr	r3, [r3, #0]
   853aa:	f003 0320 	and.w	r3, r3, #32
   853ae:	2b00      	cmp	r3, #0
   853b0:	d106      	bne.n	853c0 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   853b2:	697b      	ldr	r3, [r7, #20]
   853b4:	7d1b      	ldrb	r3, [r3, #20]
   853b6:	f003 0304 	and.w	r3, r3, #4
   853ba:	b2db      	uxtb	r3, r3
   853bc:	2b00      	cmp	r3, #0
   853be:	d001      	beq.n	853c4 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   853c0:	2300      	movs	r3, #0
   853c2:	e03b      	b.n	8543c <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   853c4:	4b21      	ldr	r3, [pc, #132]	; (8544c <udd_ep_run+0xfc>)
   853c6:	4798      	blx	r3
   853c8:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   853ca:	697b      	ldr	r3, [r7, #20]
   853cc:	7d1b      	ldrb	r3, [r3, #20]
   853ce:	f003 0301 	and.w	r3, r3, #1
   853d2:	b2db      	uxtb	r3, r3
   853d4:	2b00      	cmp	r3, #0
   853d6:	d004      	beq.n	853e2 <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   853d8:	6938      	ldr	r0, [r7, #16]
   853da:	4b1d      	ldr	r3, [pc, #116]	; (85450 <udd_ep_run+0x100>)
   853dc:	4798      	blx	r3
		return false; // Job already on going
   853de:	2300      	movs	r3, #0
   853e0:	e02c      	b.n	8543c <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   853e2:	697a      	ldr	r2, [r7, #20]
   853e4:	7d13      	ldrb	r3, [r2, #20]
   853e6:	f043 0301 	orr.w	r3, r3, #1
   853ea:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   853ec:	6938      	ldr	r0, [r7, #16]
   853ee:	4b18      	ldr	r3, [pc, #96]	; (85450 <udd_ep_run+0x100>)
   853f0:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   853f2:	697b      	ldr	r3, [r7, #20]
   853f4:	68ba      	ldr	r2, [r7, #8]
   853f6:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   853f8:	697b      	ldr	r3, [r7, #20]
   853fa:	687a      	ldr	r2, [r7, #4]
   853fc:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   853fe:	697b      	ldr	r3, [r7, #20]
   85400:	2200      	movs	r2, #0
   85402:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   85404:	697b      	ldr	r3, [r7, #20]
   85406:	2200      	movs	r2, #0
   85408:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   8540a:	697b      	ldr	r3, [r7, #20]
   8540c:	6a3a      	ldr	r2, [r7, #32]
   8540e:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   85410:	7bbb      	ldrb	r3, [r7, #14]
   85412:	2b00      	cmp	r3, #0
   85414:	d102      	bne.n	8541c <udd_ep_run+0xcc>
   85416:	687b      	ldr	r3, [r7, #4]
   85418:	2b00      	cmp	r3, #0
   8541a:	d101      	bne.n	85420 <udd_ep_run+0xd0>
   8541c:	2301      	movs	r3, #1
   8541e:	e000      	b.n	85422 <udd_ep_run+0xd2>
   85420:	2300      	movs	r3, #0
   85422:	f003 0301 	and.w	r3, r3, #1
   85426:	b2d9      	uxtb	r1, r3
   85428:	697a      	ldr	r2, [r7, #20]
   8542a:	7d13      	ldrb	r3, [r2, #20]
   8542c:	f361 0341 	bfi	r3, r1, #1, #1
   85430:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   85432:	7bfb      	ldrb	r3, [r7, #15]
   85434:	4618      	mov	r0, r3
   85436:	4b07      	ldr	r3, [pc, #28]	; (85454 <udd_ep_run+0x104>)
   85438:	4798      	blx	r3
	return true;
   8543a:	2301      	movs	r3, #1
}
   8543c:	4618      	mov	r0, r3
   8543e:	3718      	adds	r7, #24
   85440:	46bd      	mov	sp, r7
   85442:	bd80      	pop	{r7, pc}
   85444:	2000134c 	.word	0x2000134c
   85448:	400a4000 	.word	0x400a4000
   8544c:	0008470d 	.word	0x0008470d
   85450:	00084769 	.word	0x00084769
   85454:	00085f0d 	.word	0x00085f0d

00085458 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   85458:	b580      	push	{r7, lr}
   8545a:	b084      	sub	sp, #16
   8545c:	af00      	add	r7, sp, #0
   8545e:	4603      	mov	r3, r0
   85460:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85462:	79fb      	ldrb	r3, [r7, #7]
   85464:	f003 030f 	and.w	r3, r3, #15
   85468:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   8546a:	7bfb      	ldrb	r3, [r7, #15]
   8546c:	011a      	lsls	r2, r3, #4
   8546e:	4b19      	ldr	r3, [pc, #100]	; (854d4 <udd_ep_abort+0x7c>)
   85470:	4413      	add	r3, r2
   85472:	2200      	movs	r2, #0
   85474:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   85476:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8547a:	2b00      	cmp	r3, #0
   8547c:	da21      	bge.n	854c2 <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   8547e:	e014      	b.n	854aa <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   85480:	4a15      	ldr	r2, [pc, #84]	; (854d8 <udd_ep_abort+0x80>)
   85482:	7bfb      	ldrb	r3, [r7, #15]
   85484:	015b      	lsls	r3, r3, #5
   85486:	4413      	add	r3, r2
   85488:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8548c:	f44f 7200 	mov.w	r2, #512	; 0x200
   85490:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   85492:	bf00      	nop
   85494:	4a10      	ldr	r2, [pc, #64]	; (854d8 <udd_ep_abort+0x80>)
   85496:	7bfb      	ldrb	r3, [r7, #15]
   85498:	015b      	lsls	r3, r3, #5
   8549a:	4413      	add	r3, r2
   8549c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   854a0:	681b      	ldr	r3, [r3, #0]
   854a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
   854a6:	2b00      	cmp	r3, #0
   854a8:	d1f4      	bne.n	85494 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   854aa:	4a0b      	ldr	r2, [pc, #44]	; (854d8 <udd_ep_abort+0x80>)
   854ac:	7bfb      	ldrb	r3, [r7, #15]
   854ae:	015b      	lsls	r3, r3, #5
   854b0:	4413      	add	r3, r2
   854b2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   854b6:	681b      	ldr	r3, [r3, #0]
   854b8:	0c9b      	lsrs	r3, r3, #18
   854ba:	f003 0303 	and.w	r3, r3, #3
   854be:	2b00      	cmp	r3, #0
   854c0:	d1de      	bne.n	85480 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   854c2:	79fb      	ldrb	r3, [r7, #7]
   854c4:	4618      	mov	r0, r3
   854c6:	4b05      	ldr	r3, [pc, #20]	; (854dc <udd_ep_abort+0x84>)
   854c8:	4798      	blx	r3
}
   854ca:	bf00      	nop
   854cc:	3710      	adds	r7, #16
   854ce:	46bd      	mov	sp, r7
   854d0:	bd80      	pop	{r7, pc}
   854d2:	bf00      	nop
   854d4:	400a4300 	.word	0x400a4300
   854d8:	400a4000 	.word	0x400a4000
   854dc:	00085e61 	.word	0x00085e61

000854e0 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   854e0:	b480      	push	{r7}
   854e2:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   854e4:	4b0a      	ldr	r3, [pc, #40]	; (85510 <udd_test_mode_j+0x30>)
   854e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   854ea:	f023 0303 	bic.w	r3, r3, #3
   854ee:	4a08      	ldr	r2, [pc, #32]	; (85510 <udd_test_mode_j+0x30>)
   854f0:	f043 0302 	orr.w	r3, r3, #2
   854f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   854f8:	4b05      	ldr	r3, [pc, #20]	; (85510 <udd_test_mode_j+0x30>)
   854fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   854fe:	4a04      	ldr	r2, [pc, #16]	; (85510 <udd_test_mode_j+0x30>)
   85500:	f043 0304 	orr.w	r3, r3, #4
   85504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85508:	bf00      	nop
   8550a:	46bd      	mov	sp, r7
   8550c:	bc80      	pop	{r7}
   8550e:	4770      	bx	lr
   85510:	400a4000 	.word	0x400a4000

00085514 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   85514:	b480      	push	{r7}
   85516:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   85518:	4b0a      	ldr	r3, [pc, #40]	; (85544 <udd_test_mode_k+0x30>)
   8551a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8551e:	f023 0303 	bic.w	r3, r3, #3
   85522:	4a08      	ldr	r2, [pc, #32]	; (85544 <udd_test_mode_k+0x30>)
   85524:	f043 0302 	orr.w	r3, r3, #2
   85528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   8552c:	4b05      	ldr	r3, [pc, #20]	; (85544 <udd_test_mode_k+0x30>)
   8552e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   85532:	4a04      	ldr	r2, [pc, #16]	; (85544 <udd_test_mode_k+0x30>)
   85534:	f043 0308 	orr.w	r3, r3, #8
   85538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8553c:	bf00      	nop
   8553e:	46bd      	mov	sp, r7
   85540:	bc80      	pop	{r7}
   85542:	4770      	bx	lr
   85544:	400a4000 	.word	0x400a4000

00085548 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   85548:	b480      	push	{r7}
   8554a:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   8554c:	4b06      	ldr	r3, [pc, #24]	; (85568 <udd_test_mode_se0_nak+0x20>)
   8554e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   85552:	f023 0303 	bic.w	r3, r3, #3
   85556:	4a04      	ldr	r2, [pc, #16]	; (85568 <udd_test_mode_se0_nak+0x20>)
   85558:	f043 0302 	orr.w	r3, r3, #2
   8555c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85560:	bf00      	nop
   85562:	46bd      	mov	sp, r7
   85564:	bc80      	pop	{r7}
   85566:	4770      	bx	lr
   85568:	400a4000 	.word	0x400a4000

0008556c <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   8556c:	b4b0      	push	{r4, r5, r7}
   8556e:	b093      	sub	sp, #76	; 0x4c
   85570:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   85572:	4b2e      	ldr	r3, [pc, #184]	; (8562c <udd_test_mode_packet+0xc0>)
   85574:	1d3c      	adds	r4, r7, #4
   85576:	461d      	mov	r5, r3
   85578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8557a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8557c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8557e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   85582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   85584:	e895 0003 	ldmia.w	r5, {r0, r1}
   85588:	6020      	str	r0, [r4, #0]
   8558a:	3404      	adds	r4, #4
   8558c:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   8558e:	4b28      	ldr	r3, [pc, #160]	; (85630 <udd_test_mode_packet+0xc4>)
   85590:	2201      	movs	r2, #1
   85592:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   85596:	4b26      	ldr	r3, [pc, #152]	; (85630 <udd_test_mode_packet+0xc4>)
   85598:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   8559c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   855a0:	f023 0303 	bic.w	r3, r3, #3
   855a4:	4a22      	ldr	r2, [pc, #136]	; (85630 <udd_test_mode_packet+0xc4>)
   855a6:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   855aa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   855ae:	4b20      	ldr	r3, [pc, #128]	; (85630 <udd_test_mode_packet+0xc4>)
   855b0:	2201      	movs	r2, #1
   855b2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   855b6:	4b1e      	ldr	r3, [pc, #120]	; (85630 <udd_test_mode_packet+0xc4>)
   855b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   855bc:	f023 0303 	bic.w	r3, r3, #3
   855c0:	4a1b      	ldr	r2, [pc, #108]	; (85630 <udd_test_mode_packet+0xc4>)
   855c2:	f043 0302 	orr.w	r3, r3, #2
   855c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   855ca:	4b19      	ldr	r3, [pc, #100]	; (85630 <udd_test_mode_packet+0xc4>)
   855cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   855d0:	4a17      	ldr	r2, [pc, #92]	; (85630 <udd_test_mode_packet+0xc4>)
   855d2:	f043 0310 	orr.w	r3, r3, #16
   855d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   855da:	4b16      	ldr	r3, [pc, #88]	; (85634 <udd_test_mode_packet+0xc8>)
   855dc:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   855de:	1d3b      	adds	r3, r7, #4
   855e0:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   855e2:	2300      	movs	r3, #0
   855e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   855e8:	e00c      	b.n	85604 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   855ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   855ec:	1c53      	adds	r3, r2, #1
   855ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   855f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   855f2:	1c59      	adds	r1, r3, #1
   855f4:	6439      	str	r1, [r7, #64]	; 0x40
   855f6:	7812      	ldrb	r2, [r2, #0]
   855f8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   855fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   855fe:	3301      	adds	r3, #1
   85600:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   85604:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   85608:	2b34      	cmp	r3, #52	; 0x34
   8560a:	d9ee      	bls.n	855ea <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   8560c:	4b08      	ldr	r3, [pc, #32]	; (85630 <udd_test_mode_packet+0xc4>)
   8560e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85612:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85616:	4b06      	ldr	r3, [pc, #24]	; (85630 <udd_test_mode_packet+0xc4>)
   85618:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8561c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   85620:	bf00      	nop
   85622:	374c      	adds	r7, #76	; 0x4c
   85624:	46bd      	mov	sp, r7
   85626:	bcb0      	pop	{r4, r5, r7}
   85628:	4770      	bx	lr
   8562a:	bf00      	nop
   8562c:	0008d4b0 	.word	0x0008d4b0
   85630:	400a4000 	.word	0x400a4000
   85634:	20180000 	.word	0x20180000

00085638 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   85638:	b580      	push	{r7, lr}
   8563a:	b082      	sub	sp, #8
   8563c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   8563e:	4b1b      	ldr	r3, [pc, #108]	; (856ac <udd_reset_ep_ctrl+0x74>)
   85640:	681b      	ldr	r3, [r3, #0]
   85642:	4a1a      	ldr	r2, [pc, #104]	; (856ac <udd_reset_ep_ctrl+0x74>)
   85644:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   85648:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   8564a:	4b18      	ldr	r3, [pc, #96]	; (856ac <udd_reset_ep_ctrl+0x74>)
   8564c:	681b      	ldr	r3, [r3, #0]
   8564e:	4a17      	ldr	r2, [pc, #92]	; (856ac <udd_reset_ep_ctrl+0x74>)
   85650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85654:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   85656:	4b15      	ldr	r3, [pc, #84]	; (856ac <udd_reset_ep_ctrl+0x74>)
   85658:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   8565c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   85660:	f023 0303 	bic.w	r3, r3, #3
   85664:	4a11      	ldr	r2, [pc, #68]	; (856ac <udd_reset_ep_ctrl+0x74>)
   85666:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   8566a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   8566e:	4b0f      	ldr	r3, [pc, #60]	; (856ac <udd_reset_ep_ctrl+0x74>)
   85670:	2201      	movs	r2, #1
   85672:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   85676:	4b0e      	ldr	r3, [pc, #56]	; (856b0 <udd_reset_ep_ctrl+0x78>)
   85678:	4798      	blx	r3
   8567a:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   8567c:	4b0b      	ldr	r3, [pc, #44]	; (856ac <udd_reset_ep_ctrl+0x74>)
   8567e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85682:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   85686:	4b09      	ldr	r3, [pc, #36]	; (856ac <udd_reset_ep_ctrl+0x74>)
   85688:	f44f 7200 	mov.w	r2, #512	; 0x200
   8568c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   85690:	4b06      	ldr	r3, [pc, #24]	; (856ac <udd_reset_ep_ctrl+0x74>)
   85692:	691b      	ldr	r3, [r3, #16]
   85694:	4a05      	ldr	r2, [pc, #20]	; (856ac <udd_reset_ep_ctrl+0x74>)
   85696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8569a:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   8569c:	6878      	ldr	r0, [r7, #4]
   8569e:	4b05      	ldr	r3, [pc, #20]	; (856b4 <udd_reset_ep_ctrl+0x7c>)
   856a0:	4798      	blx	r3
}
   856a2:	bf00      	nop
   856a4:	3708      	adds	r7, #8
   856a6:	46bd      	mov	sp, r7
   856a8:	bd80      	pop	{r7, pc}
   856aa:	bf00      	nop
   856ac:	400a4000 	.word	0x400a4000
   856b0:	0008470d 	.word	0x0008470d
   856b4:	00084769 	.word	0x00084769

000856b8 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   856b8:	b580      	push	{r7, lr}
   856ba:	b082      	sub	sp, #8
   856bc:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   856be:	4b10      	ldr	r3, [pc, #64]	; (85700 <udd_ctrl_init+0x48>)
   856c0:	4798      	blx	r3
   856c2:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   856c4:	4b0f      	ldr	r3, [pc, #60]	; (85704 <udd_ctrl_init+0x4c>)
   856c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   856ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   856ce:	6878      	ldr	r0, [r7, #4]
   856d0:	4b0d      	ldr	r3, [pc, #52]	; (85708 <udd_ctrl_init+0x50>)
   856d2:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   856d4:	4b0b      	ldr	r3, [pc, #44]	; (85704 <udd_ctrl_init+0x4c>)
   856d6:	f44f 7200 	mov.w	r2, #512	; 0x200
   856da:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   856de:	4b0b      	ldr	r3, [pc, #44]	; (8570c <udd_ctrl_init+0x54>)
   856e0:	2200      	movs	r2, #0
   856e2:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   856e4:	4b09      	ldr	r3, [pc, #36]	; (8570c <udd_ctrl_init+0x54>)
   856e6:	2200      	movs	r2, #0
   856e8:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   856ea:	4b08      	ldr	r3, [pc, #32]	; (8570c <udd_ctrl_init+0x54>)
   856ec:	2200      	movs	r2, #0
   856ee:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   856f0:	4b07      	ldr	r3, [pc, #28]	; (85710 <udd_ctrl_init+0x58>)
   856f2:	2200      	movs	r2, #0
   856f4:	701a      	strb	r2, [r3, #0]
}
   856f6:	bf00      	nop
   856f8:	3708      	adds	r7, #8
   856fa:	46bd      	mov	sp, r7
   856fc:	bd80      	pop	{r7, pc}
   856fe:	bf00      	nop
   85700:	0008470d 	.word	0x0008470d
   85704:	400a4000 	.word	0x400a4000
   85708:	00084769 	.word	0x00084769
   8570c:	20001828 	.word	0x20001828
   85710:	20001345 	.word	0x20001345

00085714 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   85714:	b580      	push	{r7, lr}
   85716:	b084      	sub	sp, #16
   85718:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   8571a:	4b40      	ldr	r3, [pc, #256]	; (8581c <udd_ctrl_setup_received+0x108>)
   8571c:	781b      	ldrb	r3, [r3, #0]
   8571e:	2b00      	cmp	r3, #0
   85720:	d003      	beq.n	8572a <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   85722:	4b3f      	ldr	r3, [pc, #252]	; (85820 <udd_ctrl_setup_received+0x10c>)
   85724:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   85726:	4b3f      	ldr	r3, [pc, #252]	; (85824 <udd_ctrl_setup_received+0x110>)
   85728:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   8572a:	4b3f      	ldr	r3, [pc, #252]	; (85828 <udd_ctrl_setup_received+0x114>)
   8572c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85730:	0d1b      	lsrs	r3, r3, #20
   85732:	f3c3 030a 	ubfx	r3, r3, #0, #11
   85736:	2b08      	cmp	r3, #8
   85738:	d007      	beq.n	8574a <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   8573a:	4b3c      	ldr	r3, [pc, #240]	; (8582c <udd_ctrl_setup_received+0x118>)
   8573c:	4798      	blx	r3
		udd_ack_setup_received(0);
   8573e:	4b3a      	ldr	r3, [pc, #232]	; (85828 <udd_ctrl_setup_received+0x114>)
   85740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85744:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   85748:	e064      	b.n	85814 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8574a:	4b39      	ldr	r3, [pc, #228]	; (85830 <udd_ctrl_setup_received+0x11c>)
   8574c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   8574e:	2300      	movs	r3, #0
   85750:	73fb      	strb	r3, [r7, #15]
   85752:	e00a      	b.n	8576a <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   85754:	68bb      	ldr	r3, [r7, #8]
   85756:	1c5a      	adds	r2, r3, #1
   85758:	60ba      	str	r2, [r7, #8]
   8575a:	7bfa      	ldrb	r2, [r7, #15]
   8575c:	4935      	ldr	r1, [pc, #212]	; (85834 <udd_ctrl_setup_received+0x120>)
   8575e:	440a      	add	r2, r1
   85760:	781b      	ldrb	r3, [r3, #0]
   85762:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   85764:	7bfb      	ldrb	r3, [r7, #15]
   85766:	3301      	adds	r3, #1
   85768:	73fb      	strb	r3, [r7, #15]
   8576a:	7bfb      	ldrb	r3, [r7, #15]
   8576c:	2b07      	cmp	r3, #7
   8576e:	d9f1      	bls.n	85754 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   85770:	4b30      	ldr	r3, [pc, #192]	; (85834 <udd_ctrl_setup_received+0x120>)
   85772:	885a      	ldrh	r2, [r3, #2]
   85774:	4b2f      	ldr	r3, [pc, #188]	; (85834 <udd_ctrl_setup_received+0x120>)
   85776:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   85778:	4b2e      	ldr	r3, [pc, #184]	; (85834 <udd_ctrl_setup_received+0x120>)
   8577a:	889a      	ldrh	r2, [r3, #4]
   8577c:	4b2d      	ldr	r3, [pc, #180]	; (85834 <udd_ctrl_setup_received+0x120>)
   8577e:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   85780:	4b2c      	ldr	r3, [pc, #176]	; (85834 <udd_ctrl_setup_received+0x120>)
   85782:	88da      	ldrh	r2, [r3, #6]
   85784:	4b2b      	ldr	r3, [pc, #172]	; (85834 <udd_ctrl_setup_received+0x120>)
   85786:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   85788:	4b2b      	ldr	r3, [pc, #172]	; (85838 <udd_ctrl_setup_received+0x124>)
   8578a:	4798      	blx	r3
   8578c:	4603      	mov	r3, r0
   8578e:	f083 0301 	eor.w	r3, r3, #1
   85792:	b2db      	uxtb	r3, r3
   85794:	2b00      	cmp	r3, #0
   85796:	d007      	beq.n	857a8 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   85798:	4b24      	ldr	r3, [pc, #144]	; (8582c <udd_ctrl_setup_received+0x118>)
   8579a:	4798      	blx	r3
		udd_ack_setup_received(0);
   8579c:	4b22      	ldr	r3, [pc, #136]	; (85828 <udd_ctrl_setup_received+0x114>)
   8579e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   857a2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   857a6:	e035      	b.n	85814 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   857a8:	4b1f      	ldr	r3, [pc, #124]	; (85828 <udd_ctrl_setup_received+0x114>)
   857aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   857ae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   857b2:	4b20      	ldr	r3, [pc, #128]	; (85834 <udd_ctrl_setup_received+0x120>)
   857b4:	781b      	ldrb	r3, [r3, #0]
   857b6:	b25b      	sxtb	r3, r3
   857b8:	2b00      	cmp	r3, #0
   857ba:	da0b      	bge.n	857d4 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   857bc:	4b1f      	ldr	r3, [pc, #124]	; (8583c <udd_ctrl_setup_received+0x128>)
   857be:	2200      	movs	r2, #0
   857c0:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   857c2:	4b1f      	ldr	r3, [pc, #124]	; (85840 <udd_ctrl_setup_received+0x12c>)
   857c4:	2200      	movs	r2, #0
   857c6:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   857c8:	4b14      	ldr	r3, [pc, #80]	; (8581c <udd_ctrl_setup_received+0x108>)
   857ca:	2202      	movs	r2, #2
   857cc:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   857ce:	4b1d      	ldr	r3, [pc, #116]	; (85844 <udd_ctrl_setup_received+0x130>)
   857d0:	4798      	blx	r3
   857d2:	e01f      	b.n	85814 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   857d4:	4b17      	ldr	r3, [pc, #92]	; (85834 <udd_ctrl_setup_received+0x120>)
   857d6:	88db      	ldrh	r3, [r3, #6]
   857d8:	2b00      	cmp	r3, #0
   857da:	d102      	bne.n	857e2 <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   857dc:	4b1a      	ldr	r3, [pc, #104]	; (85848 <udd_ctrl_setup_received+0x134>)
   857de:	4798      	blx	r3
			return;
   857e0:	e018      	b.n	85814 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   857e2:	4b16      	ldr	r3, [pc, #88]	; (8583c <udd_ctrl_setup_received+0x128>)
   857e4:	2200      	movs	r2, #0
   857e6:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   857e8:	4b15      	ldr	r3, [pc, #84]	; (85840 <udd_ctrl_setup_received+0x12c>)
   857ea:	2200      	movs	r2, #0
   857ec:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   857ee:	4b0b      	ldr	r3, [pc, #44]	; (8581c <udd_ctrl_setup_received+0x108>)
   857f0:	2201      	movs	r2, #1
   857f2:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   857f4:	4b0c      	ldr	r3, [pc, #48]	; (85828 <udd_ctrl_setup_received+0x114>)
   857f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   857fa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   857fe:	4b13      	ldr	r3, [pc, #76]	; (8584c <udd_ctrl_setup_received+0x138>)
   85800:	4798      	blx	r3
   85802:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   85804:	4b08      	ldr	r3, [pc, #32]	; (85828 <udd_ctrl_setup_received+0x114>)
   85806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8580a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   8580e:	6878      	ldr	r0, [r7, #4]
   85810:	4b0f      	ldr	r3, [pc, #60]	; (85850 <udd_ctrl_setup_received+0x13c>)
   85812:	4798      	blx	r3
	}
}
   85814:	3710      	adds	r7, #16
   85816:	46bd      	mov	sp, r7
   85818:	bd80      	pop	{r7, pc}
   8581a:	bf00      	nop
   8581c:	20001345 	.word	0x20001345
   85820:	00085cbd 	.word	0x00085cbd
   85824:	000856b9 	.word	0x000856b9
   85828:	400a4000 	.word	0x400a4000
   8582c:	00085bf1 	.word	0x00085bf1
   85830:	20180000 	.word	0x20180000
   85834:	20001828 	.word	0x20001828
   85838:	000844b9 	.word	0x000844b9
   8583c:	20001346 	.word	0x20001346
   85840:	20001348 	.word	0x20001348
   85844:	00085855 	.word	0x00085855
   85848:	00085c15 	.word	0x00085c15
   8584c:	0008470d 	.word	0x0008470d
   85850:	00084769 	.word	0x00084769

00085854 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   85854:	b580      	push	{r7, lr}
   85856:	b084      	sub	sp, #16
   85858:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   8585a:	4b4c      	ldr	r3, [pc, #304]	; (8598c <udd_ctrl_in_sent+0x138>)
   8585c:	4798      	blx	r3
   8585e:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   85860:	4b4b      	ldr	r3, [pc, #300]	; (85990 <udd_ctrl_in_sent+0x13c>)
   85862:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85866:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   8586a:	6838      	ldr	r0, [r7, #0]
   8586c:	4b49      	ldr	r3, [pc, #292]	; (85994 <udd_ctrl_in_sent+0x140>)
   8586e:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85870:	4b49      	ldr	r3, [pc, #292]	; (85998 <udd_ctrl_in_sent+0x144>)
   85872:	781b      	ldrb	r3, [r3, #0]
   85874:	2b03      	cmp	r3, #3
   85876:	d104      	bne.n	85882 <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   85878:	4b48      	ldr	r3, [pc, #288]	; (8599c <udd_ctrl_in_sent+0x148>)
   8587a:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   8587c:	4b48      	ldr	r3, [pc, #288]	; (859a0 <udd_ctrl_in_sent+0x14c>)
   8587e:	4798      	blx	r3
		return;
   85880:	e081      	b.n	85986 <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85882:	4b48      	ldr	r3, [pc, #288]	; (859a4 <udd_ctrl_in_sent+0x150>)
   85884:	899a      	ldrh	r2, [r3, #12]
   85886:	4b48      	ldr	r3, [pc, #288]	; (859a8 <udd_ctrl_in_sent+0x154>)
   85888:	881b      	ldrh	r3, [r3, #0]
   8588a:	1ad3      	subs	r3, r2, r3
   8588c:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   8588e:	89fb      	ldrh	r3, [r7, #14]
   85890:	2b00      	cmp	r3, #0
   85892:	d127      	bne.n	858e4 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85894:	4b45      	ldr	r3, [pc, #276]	; (859ac <udd_ctrl_in_sent+0x158>)
   85896:	881a      	ldrh	r2, [r3, #0]
   85898:	4b43      	ldr	r3, [pc, #268]	; (859a8 <udd_ctrl_in_sent+0x154>)
   8589a:	881b      	ldrh	r3, [r3, #0]
   8589c:	4413      	add	r3, r2
   8589e:	b29a      	uxth	r2, r3
   858a0:	4b42      	ldr	r3, [pc, #264]	; (859ac <udd_ctrl_in_sent+0x158>)
   858a2:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   858a4:	4b3f      	ldr	r3, [pc, #252]	; (859a4 <udd_ctrl_in_sent+0x150>)
   858a6:	88da      	ldrh	r2, [r3, #6]
   858a8:	4b40      	ldr	r3, [pc, #256]	; (859ac <udd_ctrl_in_sent+0x158>)
   858aa:	881b      	ldrh	r3, [r3, #0]
   858ac:	429a      	cmp	r2, r3
   858ae:	d003      	beq.n	858b8 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   858b0:	4b3f      	ldr	r3, [pc, #252]	; (859b0 <udd_ctrl_in_sent+0x15c>)
   858b2:	781b      	ldrb	r3, [r3, #0]
   858b4:	2b00      	cmp	r3, #0
   858b6:	d002      	beq.n	858be <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   858b8:	4b3e      	ldr	r3, [pc, #248]	; (859b4 <udd_ctrl_in_sent+0x160>)
   858ba:	4798      	blx	r3
			return;
   858bc:	e063      	b.n	85986 <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   858be:	4b39      	ldr	r3, [pc, #228]	; (859a4 <udd_ctrl_in_sent+0x150>)
   858c0:	695b      	ldr	r3, [r3, #20]
   858c2:	2b00      	cmp	r3, #0
   858c4:	d00e      	beq.n	858e4 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   858c6:	4b37      	ldr	r3, [pc, #220]	; (859a4 <udd_ctrl_in_sent+0x150>)
   858c8:	695b      	ldr	r3, [r3, #20]
   858ca:	4798      	blx	r3
   858cc:	4603      	mov	r3, r0
   858ce:	f083 0301 	eor.w	r3, r3, #1
   858d2:	b2db      	uxtb	r3, r3
   858d4:	2b00      	cmp	r3, #0
   858d6:	d105      	bne.n	858e4 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   858d8:	4b33      	ldr	r3, [pc, #204]	; (859a8 <udd_ctrl_in_sent+0x154>)
   858da:	2200      	movs	r2, #0
   858dc:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   858de:	4b31      	ldr	r3, [pc, #196]	; (859a4 <udd_ctrl_in_sent+0x150>)
   858e0:	899b      	ldrh	r3, [r3, #12]
   858e2:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   858e4:	89fb      	ldrh	r3, [r7, #14]
   858e6:	2b3f      	cmp	r3, #63	; 0x3f
   858e8:	d905      	bls.n	858f6 <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   858ea:	2340      	movs	r3, #64	; 0x40
   858ec:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   858ee:	4b30      	ldr	r3, [pc, #192]	; (859b0 <udd_ctrl_in_sent+0x15c>)
   858f0:	2200      	movs	r2, #0
   858f2:	701a      	strb	r2, [r3, #0]
   858f4:	e002      	b.n	858fc <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   858f6:	4b2e      	ldr	r3, [pc, #184]	; (859b0 <udd_ctrl_in_sent+0x15c>)
   858f8:	2201      	movs	r2, #1
   858fa:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   858fc:	4b2e      	ldr	r3, [pc, #184]	; (859b8 <udd_ctrl_in_sent+0x164>)
   858fe:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85900:	4b28      	ldr	r3, [pc, #160]	; (859a4 <udd_ctrl_in_sent+0x150>)
   85902:	689b      	ldr	r3, [r3, #8]
   85904:	4a28      	ldr	r2, [pc, #160]	; (859a8 <udd_ctrl_in_sent+0x154>)
   85906:	8812      	ldrh	r2, [r2, #0]
   85908:	4413      	add	r3, r2
   8590a:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   8590c:	4b1f      	ldr	r3, [pc, #124]	; (8598c <udd_ctrl_in_sent+0x138>)
   8590e:	4798      	blx	r3
   85910:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   85912:	4b1f      	ldr	r3, [pc, #124]	; (85990 <udd_ctrl_in_sent+0x13c>)
   85914:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85918:	f403 7300 	and.w	r3, r3, #512	; 0x200
   8591c:	2b00      	cmp	r3, #0
   8591e:	d006      	beq.n	8592e <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   85920:	6838      	ldr	r0, [r7, #0]
   85922:	4b1c      	ldr	r3, [pc, #112]	; (85994 <udd_ctrl_in_sent+0x140>)
   85924:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85926:	4b1c      	ldr	r3, [pc, #112]	; (85998 <udd_ctrl_in_sent+0x144>)
   85928:	2204      	movs	r2, #4
   8592a:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   8592c:	e02b      	b.n	85986 <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8592e:	2300      	movs	r3, #0
   85930:	737b      	strb	r3, [r7, #13]
   85932:	e00a      	b.n	8594a <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   85934:	687a      	ldr	r2, [r7, #4]
   85936:	1c53      	adds	r3, r2, #1
   85938:	607b      	str	r3, [r7, #4]
   8593a:	68bb      	ldr	r3, [r7, #8]
   8593c:	1c59      	adds	r1, r3, #1
   8593e:	60b9      	str	r1, [r7, #8]
   85940:	7812      	ldrb	r2, [r2, #0]
   85942:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   85944:	7b7b      	ldrb	r3, [r7, #13]
   85946:	3301      	adds	r3, #1
   85948:	737b      	strb	r3, [r7, #13]
   8594a:	7b7b      	ldrb	r3, [r7, #13]
   8594c:	b29b      	uxth	r3, r3
   8594e:	89fa      	ldrh	r2, [r7, #14]
   85950:	429a      	cmp	r2, r3
   85952:	d8ef      	bhi.n	85934 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   85954:	4b14      	ldr	r3, [pc, #80]	; (859a8 <udd_ctrl_in_sent+0x154>)
   85956:	881a      	ldrh	r2, [r3, #0]
   85958:	89fb      	ldrh	r3, [r7, #14]
   8595a:	4413      	add	r3, r2
   8595c:	b29a      	uxth	r2, r3
   8595e:	4b12      	ldr	r3, [pc, #72]	; (859a8 <udd_ctrl_in_sent+0x154>)
   85960:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   85962:	4b0b      	ldr	r3, [pc, #44]	; (85990 <udd_ctrl_in_sent+0x13c>)
   85964:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85968:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8596c:	4b08      	ldr	r3, [pc, #32]	; (85990 <udd_ctrl_in_sent+0x13c>)
   8596e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85972:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85976:	4b06      	ldr	r3, [pc, #24]	; (85990 <udd_ctrl_in_sent+0x13c>)
   85978:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8597c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   85980:	6838      	ldr	r0, [r7, #0]
   85982:	4b04      	ldr	r3, [pc, #16]	; (85994 <udd_ctrl_in_sent+0x140>)
   85984:	4798      	blx	r3
}
   85986:	3710      	adds	r7, #16
   85988:	46bd      	mov	sp, r7
   8598a:	bd80      	pop	{r7, pc}
   8598c:	0008470d 	.word	0x0008470d
   85990:	400a4000 	.word	0x400a4000
   85994:	00084769 	.word	0x00084769
   85998:	20001345 	.word	0x20001345
   8599c:	00085cbd 	.word	0x00085cbd
   859a0:	000856b9 	.word	0x000856b9
   859a4:	20001828 	.word	0x20001828
   859a8:	20001348 	.word	0x20001348
   859ac:	20001346 	.word	0x20001346
   859b0:	2000137c 	.word	0x2000137c
   859b4:	00085c79 	.word	0x00085c79
   859b8:	20180000 	.word	0x20180000

000859bc <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   859bc:	b580      	push	{r7, lr}
   859be:	b084      	sub	sp, #16
   859c0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   859c2:	4b61      	ldr	r3, [pc, #388]	; (85b48 <udd_ctrl_out_received+0x18c>)
   859c4:	781b      	ldrb	r3, [r3, #0]
   859c6:	2b01      	cmp	r3, #1
   859c8:	d00f      	beq.n	859ea <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   859ca:	4b5f      	ldr	r3, [pc, #380]	; (85b48 <udd_ctrl_out_received+0x18c>)
   859cc:	781b      	ldrb	r3, [r3, #0]
   859ce:	2b02      	cmp	r3, #2
   859d0:	d003      	beq.n	859da <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   859d2:	4b5d      	ldr	r3, [pc, #372]	; (85b48 <udd_ctrl_out_received+0x18c>)
   859d4:	781b      	ldrb	r3, [r3, #0]
   859d6:	2b04      	cmp	r3, #4
   859d8:	d102      	bne.n	859e0 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   859da:	4b5c      	ldr	r3, [pc, #368]	; (85b4c <udd_ctrl_out_received+0x190>)
   859dc:	4798      	blx	r3
   859de:	e001      	b.n	859e4 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   859e0:	4b5b      	ldr	r3, [pc, #364]	; (85b50 <udd_ctrl_out_received+0x194>)
   859e2:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   859e4:	4b5b      	ldr	r3, [pc, #364]	; (85b54 <udd_ctrl_out_received+0x198>)
   859e6:	4798      	blx	r3
		return;
   859e8:	e0ab      	b.n	85b42 <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   859ea:	4b5b      	ldr	r3, [pc, #364]	; (85b58 <udd_ctrl_out_received+0x19c>)
   859ec:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   859f0:	0d1b      	lsrs	r3, r3, #20
   859f2:	b29b      	uxth	r3, r3
   859f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
   859f8:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   859fa:	4b58      	ldr	r3, [pc, #352]	; (85b5c <udd_ctrl_out_received+0x1a0>)
   859fc:	899b      	ldrh	r3, [r3, #12]
   859fe:	461a      	mov	r2, r3
   85a00:	4b57      	ldr	r3, [pc, #348]	; (85b60 <udd_ctrl_out_received+0x1a4>)
   85a02:	881b      	ldrh	r3, [r3, #0]
   85a04:	4619      	mov	r1, r3
   85a06:	89bb      	ldrh	r3, [r7, #12]
   85a08:	440b      	add	r3, r1
   85a0a:	429a      	cmp	r2, r3
   85a0c:	da05      	bge.n	85a1a <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85a0e:	4b53      	ldr	r3, [pc, #332]	; (85b5c <udd_ctrl_out_received+0x1a0>)
   85a10:	899a      	ldrh	r2, [r3, #12]
   85a12:	4b53      	ldr	r3, [pc, #332]	; (85b60 <udd_ctrl_out_received+0x1a4>)
   85a14:	881b      	ldrh	r3, [r3, #0]
   85a16:	1ad3      	subs	r3, r2, r3
   85a18:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85a1a:	4b52      	ldr	r3, [pc, #328]	; (85b64 <udd_ctrl_out_received+0x1a8>)
   85a1c:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85a1e:	4b4f      	ldr	r3, [pc, #316]	; (85b5c <udd_ctrl_out_received+0x1a0>)
   85a20:	689b      	ldr	r3, [r3, #8]
   85a22:	4a4f      	ldr	r2, [pc, #316]	; (85b60 <udd_ctrl_out_received+0x1a4>)
   85a24:	8812      	ldrh	r2, [r2, #0]
   85a26:	4413      	add	r3, r2
   85a28:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   85a2a:	2300      	movs	r3, #0
   85a2c:	73fb      	strb	r3, [r7, #15]
   85a2e:	e00a      	b.n	85a46 <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   85a30:	68ba      	ldr	r2, [r7, #8]
   85a32:	1c53      	adds	r3, r2, #1
   85a34:	60bb      	str	r3, [r7, #8]
   85a36:	687b      	ldr	r3, [r7, #4]
   85a38:	1c59      	adds	r1, r3, #1
   85a3a:	6079      	str	r1, [r7, #4]
   85a3c:	7812      	ldrb	r2, [r2, #0]
   85a3e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   85a40:	7bfb      	ldrb	r3, [r7, #15]
   85a42:	3301      	adds	r3, #1
   85a44:	73fb      	strb	r3, [r7, #15]
   85a46:	7bfb      	ldrb	r3, [r7, #15]
   85a48:	b29b      	uxth	r3, r3
   85a4a:	89ba      	ldrh	r2, [r7, #12]
   85a4c:	429a      	cmp	r2, r3
   85a4e:	d8ef      	bhi.n	85a30 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   85a50:	4b43      	ldr	r3, [pc, #268]	; (85b60 <udd_ctrl_out_received+0x1a4>)
   85a52:	881a      	ldrh	r2, [r3, #0]
   85a54:	89bb      	ldrh	r3, [r7, #12]
   85a56:	4413      	add	r3, r2
   85a58:	b29a      	uxth	r2, r3
   85a5a:	4b41      	ldr	r3, [pc, #260]	; (85b60 <udd_ctrl_out_received+0x1a4>)
   85a5c:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85a5e:	89bb      	ldrh	r3, [r7, #12]
   85a60:	2b40      	cmp	r3, #64	; 0x40
   85a62:	d10a      	bne.n	85a7a <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   85a64:	4b3d      	ldr	r3, [pc, #244]	; (85b5c <udd_ctrl_out_received+0x1a0>)
   85a66:	88db      	ldrh	r3, [r3, #6]
   85a68:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   85a6a:	4b3f      	ldr	r3, [pc, #252]	; (85b68 <udd_ctrl_out_received+0x1ac>)
   85a6c:	881b      	ldrh	r3, [r3, #0]
   85a6e:	4619      	mov	r1, r3
   85a70:	4b3b      	ldr	r3, [pc, #236]	; (85b60 <udd_ctrl_out_received+0x1a4>)
   85a72:	881b      	ldrh	r3, [r3, #0]
   85a74:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   85a76:	429a      	cmp	r2, r3
   85a78:	dc20      	bgt.n	85abc <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   85a7a:	4b39      	ldr	r3, [pc, #228]	; (85b60 <udd_ctrl_out_received+0x1a4>)
   85a7c:	881a      	ldrh	r2, [r3, #0]
   85a7e:	4b37      	ldr	r3, [pc, #220]	; (85b5c <udd_ctrl_out_received+0x1a0>)
   85a80:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85a82:	4b36      	ldr	r3, [pc, #216]	; (85b5c <udd_ctrl_out_received+0x1a0>)
   85a84:	695b      	ldr	r3, [r3, #20]
   85a86:	2b00      	cmp	r3, #0
   85a88:	d010      	beq.n	85aac <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   85a8a:	4b34      	ldr	r3, [pc, #208]	; (85b5c <udd_ctrl_out_received+0x1a0>)
   85a8c:	695b      	ldr	r3, [r3, #20]
   85a8e:	4798      	blx	r3
   85a90:	4603      	mov	r3, r0
   85a92:	f083 0301 	eor.w	r3, r3, #1
   85a96:	b2db      	uxtb	r3, r3
   85a98:	2b00      	cmp	r3, #0
   85a9a:	d007      	beq.n	85aac <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   85a9c:	4b2c      	ldr	r3, [pc, #176]	; (85b50 <udd_ctrl_out_received+0x194>)
   85a9e:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   85aa0:	4b2d      	ldr	r3, [pc, #180]	; (85b58 <udd_ctrl_out_received+0x19c>)
   85aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
   85aa6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   85aaa:	e04a      	b.n	85b42 <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   85aac:	4b2a      	ldr	r3, [pc, #168]	; (85b58 <udd_ctrl_out_received+0x19c>)
   85aae:	f44f 7200 	mov.w	r2, #512	; 0x200
   85ab2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   85ab6:	4b2d      	ldr	r3, [pc, #180]	; (85b6c <udd_ctrl_out_received+0x1b0>)
   85ab8:	4798      	blx	r3
		return;
   85aba:	e042      	b.n	85b42 <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   85abc:	4b27      	ldr	r3, [pc, #156]	; (85b5c <udd_ctrl_out_received+0x1a0>)
   85abe:	899a      	ldrh	r2, [r3, #12]
   85ac0:	4b27      	ldr	r3, [pc, #156]	; (85b60 <udd_ctrl_out_received+0x1a4>)
   85ac2:	881b      	ldrh	r3, [r3, #0]
   85ac4:	429a      	cmp	r2, r3
   85ac6:	d127      	bne.n	85b18 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   85ac8:	4b24      	ldr	r3, [pc, #144]	; (85b5c <udd_ctrl_out_received+0x1a0>)
   85aca:	695b      	ldr	r3, [r3, #20]
   85acc:	2b00      	cmp	r3, #0
   85ace:	d107      	bne.n	85ae0 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   85ad0:	4b1f      	ldr	r3, [pc, #124]	; (85b50 <udd_ctrl_out_received+0x194>)
   85ad2:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   85ad4:	4b20      	ldr	r3, [pc, #128]	; (85b58 <udd_ctrl_out_received+0x19c>)
   85ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
   85ada:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85ade:	e030      	b.n	85b42 <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   85ae0:	4b1e      	ldr	r3, [pc, #120]	; (85b5c <udd_ctrl_out_received+0x1a0>)
   85ae2:	695b      	ldr	r3, [r3, #20]
   85ae4:	4798      	blx	r3
   85ae6:	4603      	mov	r3, r0
   85ae8:	f083 0301 	eor.w	r3, r3, #1
   85aec:	b2db      	uxtb	r3, r3
   85aee:	2b00      	cmp	r3, #0
   85af0:	d007      	beq.n	85b02 <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   85af2:	4b17      	ldr	r3, [pc, #92]	; (85b50 <udd_ctrl_out_received+0x194>)
   85af4:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   85af6:	4b18      	ldr	r3, [pc, #96]	; (85b58 <udd_ctrl_out_received+0x19c>)
   85af8:	f44f 7200 	mov.w	r2, #512	; 0x200
   85afc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85b00:	e01f      	b.n	85b42 <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85b02:	4b19      	ldr	r3, [pc, #100]	; (85b68 <udd_ctrl_out_received+0x1ac>)
   85b04:	881a      	ldrh	r2, [r3, #0]
   85b06:	4b16      	ldr	r3, [pc, #88]	; (85b60 <udd_ctrl_out_received+0x1a4>)
   85b08:	881b      	ldrh	r3, [r3, #0]
   85b0a:	4413      	add	r3, r2
   85b0c:	b29a      	uxth	r2, r3
   85b0e:	4b16      	ldr	r3, [pc, #88]	; (85b68 <udd_ctrl_out_received+0x1ac>)
   85b10:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   85b12:	4b13      	ldr	r3, [pc, #76]	; (85b60 <udd_ctrl_out_received+0x1a4>)
   85b14:	2200      	movs	r2, #0
   85b16:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   85b18:	4b0f      	ldr	r3, [pc, #60]	; (85b58 <udd_ctrl_out_received+0x19c>)
   85b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
   85b1e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   85b22:	4b0d      	ldr	r3, [pc, #52]	; (85b58 <udd_ctrl_out_received+0x19c>)
   85b24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85b28:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   85b2c:	4b10      	ldr	r3, [pc, #64]	; (85b70 <udd_ctrl_out_received+0x1b4>)
   85b2e:	4798      	blx	r3
   85b30:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   85b32:	4b09      	ldr	r3, [pc, #36]	; (85b58 <udd_ctrl_out_received+0x19c>)
   85b34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85b38:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85b3c:	6838      	ldr	r0, [r7, #0]
   85b3e:	4b0d      	ldr	r3, [pc, #52]	; (85b74 <udd_ctrl_out_received+0x1b8>)
   85b40:	4798      	blx	r3
}
   85b42:	3710      	adds	r7, #16
   85b44:	46bd      	mov	sp, r7
   85b46:	bd80      	pop	{r7, pc}
   85b48:	20001345 	.word	0x20001345
   85b4c:	00085cbd 	.word	0x00085cbd
   85b50:	00085bf1 	.word	0x00085bf1
   85b54:	000856b9 	.word	0x000856b9
   85b58:	400a4000 	.word	0x400a4000
   85b5c:	20001828 	.word	0x20001828
   85b60:	20001348 	.word	0x20001348
   85b64:	20180000 	.word	0x20180000
   85b68:	20001346 	.word	0x20001346
   85b6c:	00085c15 	.word	0x00085c15
   85b70:	0008470d 	.word	0x0008470d
   85b74:	00084769 	.word	0x00084769

00085b78 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   85b78:	b580      	push	{r7, lr}
   85b7a:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   85b7c:	4b0c      	ldr	r3, [pc, #48]	; (85bb0 <udd_ctrl_underflow+0x38>)
   85b7e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85b86:	2b00      	cmp	r3, #0
   85b88:	d10f      	bne.n	85baa <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   85b8a:	4b0a      	ldr	r3, [pc, #40]	; (85bb4 <udd_ctrl_underflow+0x3c>)
   85b8c:	781b      	ldrb	r3, [r3, #0]
   85b8e:	2b01      	cmp	r3, #1
   85b90:	d102      	bne.n	85b98 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   85b92:	4b09      	ldr	r3, [pc, #36]	; (85bb8 <udd_ctrl_underflow+0x40>)
   85b94:	4798      	blx	r3
   85b96:	e009      	b.n	85bac <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   85b98:	4b06      	ldr	r3, [pc, #24]	; (85bb4 <udd_ctrl_underflow+0x3c>)
   85b9a:	781b      	ldrb	r3, [r3, #0]
   85b9c:	2b04      	cmp	r3, #4
   85b9e:	d105      	bne.n	85bac <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   85ba0:	4b03      	ldr	r3, [pc, #12]	; (85bb0 <udd_ctrl_underflow+0x38>)
   85ba2:	2220      	movs	r2, #32
   85ba4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85ba8:	e000      	b.n	85bac <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   85baa:	bf00      	nop
	}
}
   85bac:	bd80      	pop	{r7, pc}
   85bae:	bf00      	nop
   85bb0:	400a4000 	.word	0x400a4000
   85bb4:	20001345 	.word	0x20001345
   85bb8:	00085c15 	.word	0x00085c15

00085bbc <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   85bbc:	b480      	push	{r7}
   85bbe:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   85bc0:	4b09      	ldr	r3, [pc, #36]	; (85be8 <udd_ctrl_overflow+0x2c>)
   85bc2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85bca:	2b00      	cmp	r3, #0
   85bcc:	d108      	bne.n	85be0 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85bce:	4b07      	ldr	r3, [pc, #28]	; (85bec <udd_ctrl_overflow+0x30>)
   85bd0:	781b      	ldrb	r3, [r3, #0]
   85bd2:	2b03      	cmp	r3, #3
   85bd4:	d105      	bne.n	85be2 <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   85bd6:	4b04      	ldr	r3, [pc, #16]	; (85be8 <udd_ctrl_overflow+0x2c>)
   85bd8:	2220      	movs	r2, #32
   85bda:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85bde:	e000      	b.n	85be2 <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   85be0:	bf00      	nop
	}
}
   85be2:	46bd      	mov	sp, r7
   85be4:	bc80      	pop	{r7}
   85be6:	4770      	bx	lr
   85be8:	400a4000 	.word	0x400a4000
   85bec:	20001345 	.word	0x20001345

00085bf0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   85bf0:	b480      	push	{r7}
   85bf2:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85bf4:	4b05      	ldr	r3, [pc, #20]	; (85c0c <udd_ctrl_stall_data+0x1c>)
   85bf6:	2205      	movs	r2, #5
   85bf8:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   85bfa:	4b05      	ldr	r3, [pc, #20]	; (85c10 <udd_ctrl_stall_data+0x20>)
   85bfc:	2220      	movs	r2, #32
   85bfe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   85c02:	bf00      	nop
   85c04:	46bd      	mov	sp, r7
   85c06:	bc80      	pop	{r7}
   85c08:	4770      	bx	lr
   85c0a:	bf00      	nop
   85c0c:	20001345 	.word	0x20001345
   85c10:	400a4000 	.word	0x400a4000

00085c14 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   85c14:	b580      	push	{r7, lr}
   85c16:	b082      	sub	sp, #8
   85c18:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   85c1a:	4b13      	ldr	r3, [pc, #76]	; (85c68 <udd_ctrl_send_zlp_in+0x54>)
   85c1c:	2203      	movs	r2, #3
   85c1e:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   85c20:	4b12      	ldr	r3, [pc, #72]	; (85c6c <udd_ctrl_send_zlp_in+0x58>)
   85c22:	4798      	blx	r3
   85c24:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   85c26:	4b12      	ldr	r3, [pc, #72]	; (85c70 <udd_ctrl_send_zlp_in+0x5c>)
   85c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85c2c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85c30:	4b0f      	ldr	r3, [pc, #60]	; (85c70 <udd_ctrl_send_zlp_in+0x5c>)
   85c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85c36:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85c3a:	4b0d      	ldr	r3, [pc, #52]	; (85c70 <udd_ctrl_send_zlp_in+0x5c>)
   85c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85c40:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   85c44:	4b0a      	ldr	r3, [pc, #40]	; (85c70 <udd_ctrl_send_zlp_in+0x5c>)
   85c46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85c4a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   85c4e:	4b08      	ldr	r3, [pc, #32]	; (85c70 <udd_ctrl_send_zlp_in+0x5c>)
   85c50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85c54:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85c58:	6878      	ldr	r0, [r7, #4]
   85c5a:	4b06      	ldr	r3, [pc, #24]	; (85c74 <udd_ctrl_send_zlp_in+0x60>)
   85c5c:	4798      	blx	r3
}
   85c5e:	bf00      	nop
   85c60:	3708      	adds	r7, #8
   85c62:	46bd      	mov	sp, r7
   85c64:	bd80      	pop	{r7, pc}
   85c66:	bf00      	nop
   85c68:	20001345 	.word	0x20001345
   85c6c:	0008470d 	.word	0x0008470d
   85c70:	400a4000 	.word	0x400a4000
   85c74:	00084769 	.word	0x00084769

00085c78 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   85c78:	b580      	push	{r7, lr}
   85c7a:	b082      	sub	sp, #8
   85c7c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85c7e:	4b0b      	ldr	r3, [pc, #44]	; (85cac <udd_ctrl_send_zlp_out+0x34>)
   85c80:	2204      	movs	r2, #4
   85c82:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   85c84:	4b0a      	ldr	r3, [pc, #40]	; (85cb0 <udd_ctrl_send_zlp_out+0x38>)
   85c86:	4798      	blx	r3
   85c88:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   85c8a:	4b0a      	ldr	r3, [pc, #40]	; (85cb4 <udd_ctrl_send_zlp_out+0x3c>)
   85c8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85c90:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   85c94:	4b07      	ldr	r3, [pc, #28]	; (85cb4 <udd_ctrl_send_zlp_out+0x3c>)
   85c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85c9a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85c9e:	6878      	ldr	r0, [r7, #4]
   85ca0:	4b05      	ldr	r3, [pc, #20]	; (85cb8 <udd_ctrl_send_zlp_out+0x40>)
   85ca2:	4798      	blx	r3
}
   85ca4:	bf00      	nop
   85ca6:	3708      	adds	r7, #8
   85ca8:	46bd      	mov	sp, r7
   85caa:	bd80      	pop	{r7, pc}
   85cac:	20001345 	.word	0x20001345
   85cb0:	0008470d 	.word	0x0008470d
   85cb4:	400a4000 	.word	0x400a4000
   85cb8:	00084769 	.word	0x00084769

00085cbc <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   85cbc:	b580      	push	{r7, lr}
   85cbe:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   85cc0:	4b04      	ldr	r3, [pc, #16]	; (85cd4 <udd_ctrl_endofrequest+0x18>)
   85cc2:	691b      	ldr	r3, [r3, #16]
   85cc4:	2b00      	cmp	r3, #0
   85cc6:	d002      	beq.n	85cce <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   85cc8:	4b02      	ldr	r3, [pc, #8]	; (85cd4 <udd_ctrl_endofrequest+0x18>)
   85cca:	691b      	ldr	r3, [r3, #16]
   85ccc:	4798      	blx	r3
	}
}
   85cce:	bf00      	nop
   85cd0:	bd80      	pop	{r7, pc}
   85cd2:	bf00      	nop
   85cd4:	20001828 	.word	0x20001828

00085cd8 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   85cd8:	b580      	push	{r7, lr}
   85cda:	b082      	sub	sp, #8
   85cdc:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   85cde:	4b31      	ldr	r3, [pc, #196]	; (85da4 <udd_ctrl_interrupt+0xcc>)
   85ce0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85ce4:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   85ce6:	4b2f      	ldr	r3, [pc, #188]	; (85da4 <udd_ctrl_interrupt+0xcc>)
   85ce8:	695b      	ldr	r3, [r3, #20]
   85cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
   85cee:	2b00      	cmp	r3, #0
   85cf0:	d101      	bne.n	85cf6 <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   85cf2:	2300      	movs	r3, #0
   85cf4:	e052      	b.n	85d9c <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   85cf6:	4b2b      	ldr	r3, [pc, #172]	; (85da4 <udd_ctrl_interrupt+0xcc>)
   85cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85cfc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   85d00:	4b28      	ldr	r3, [pc, #160]	; (85da4 <udd_ctrl_interrupt+0xcc>)
   85d02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85d06:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   85d0a:	687b      	ldr	r3, [r7, #4]
   85d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   85d10:	2b00      	cmp	r3, #0
   85d12:	d003      	beq.n	85d1c <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   85d14:	4b24      	ldr	r3, [pc, #144]	; (85da8 <udd_ctrl_interrupt+0xd0>)
   85d16:	4798      	blx	r3
		return true;
   85d18:	2301      	movs	r3, #1
   85d1a:	e03f      	b.n	85d9c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   85d1c:	687b      	ldr	r3, [r7, #4]
   85d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85d22:	2b00      	cmp	r3, #0
   85d24:	d00a      	beq.n	85d3c <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   85d26:	4b1f      	ldr	r3, [pc, #124]	; (85da4 <udd_ctrl_interrupt+0xcc>)
   85d28:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   85d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85d30:	2b00      	cmp	r3, #0
   85d32:	d003      	beq.n	85d3c <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   85d34:	4b1d      	ldr	r3, [pc, #116]	; (85dac <udd_ctrl_interrupt+0xd4>)
   85d36:	4798      	blx	r3
		return true;
   85d38:	2301      	movs	r3, #1
   85d3a:	e02f      	b.n	85d9c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   85d3c:	687b      	ldr	r3, [r7, #4]
   85d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85d42:	2b00      	cmp	r3, #0
   85d44:	d003      	beq.n	85d4e <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   85d46:	4b1a      	ldr	r3, [pc, #104]	; (85db0 <udd_ctrl_interrupt+0xd8>)
   85d48:	4798      	blx	r3
		return true;
   85d4a:	2301      	movs	r3, #1
   85d4c:	e026      	b.n	85d9c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   85d4e:	687b      	ldr	r3, [r7, #4]
   85d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   85d54:	2b00      	cmp	r3, #0
   85d56:	d004      	beq.n	85d62 <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   85d58:	4b12      	ldr	r3, [pc, #72]	; (85da4 <udd_ctrl_interrupt+0xcc>)
   85d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   85d5e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   85d62:	687b      	ldr	r3, [r7, #4]
   85d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   85d68:	2b00      	cmp	r3, #0
   85d6a:	d008      	beq.n	85d7e <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   85d6c:	4b0d      	ldr	r3, [pc, #52]	; (85da4 <udd_ctrl_interrupt+0xcc>)
   85d6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85d72:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   85d76:	4b0f      	ldr	r3, [pc, #60]	; (85db4 <udd_ctrl_interrupt+0xdc>)
   85d78:	4798      	blx	r3
		return true;
   85d7a:	2301      	movs	r3, #1
   85d7c:	e00e      	b.n	85d9c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   85d7e:	687b      	ldr	r3, [r7, #4]
   85d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   85d84:	2b00      	cmp	r3, #0
   85d86:	d008      	beq.n	85d9a <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   85d88:	4b06      	ldr	r3, [pc, #24]	; (85da4 <udd_ctrl_interrupt+0xcc>)
   85d8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85d8e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   85d92:	4b09      	ldr	r3, [pc, #36]	; (85db8 <udd_ctrl_interrupt+0xe0>)
   85d94:	4798      	blx	r3
		return true;
   85d96:	2301      	movs	r3, #1
   85d98:	e000      	b.n	85d9c <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   85d9a:	2300      	movs	r3, #0
}
   85d9c:	4618      	mov	r0, r3
   85d9e:	3708      	adds	r7, #8
   85da0:	46bd      	mov	sp, r7
   85da2:	bd80      	pop	{r7, pc}
   85da4:	400a4000 	.word	0x400a4000
   85da8:	00085715 	.word	0x00085715
   85dac:	00085855 	.word	0x00085855
   85db0:	000859bd 	.word	0x000859bd
   85db4:	00085bbd 	.word	0x00085bbd
   85db8:	00085b79 	.word	0x00085b79

00085dbc <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   85dbc:	b480      	push	{r7}
   85dbe:	b083      	sub	sp, #12
   85dc0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85dc2:	2300      	movs	r3, #0
   85dc4:	71fb      	strb	r3, [r7, #7]
   85dc6:	e01c      	b.n	85e02 <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   85dc8:	79fa      	ldrb	r2, [r7, #7]
   85dca:	4912      	ldr	r1, [pc, #72]	; (85e14 <udd_ep_job_table_reset+0x58>)
   85dcc:	4613      	mov	r3, r2
   85dce:	005b      	lsls	r3, r3, #1
   85dd0:	4413      	add	r3, r2
   85dd2:	00db      	lsls	r3, r3, #3
   85dd4:	440b      	add	r3, r1
   85dd6:	f103 0210 	add.w	r2, r3, #16
   85dda:	7913      	ldrb	r3, [r2, #4]
   85ddc:	f36f 0300 	bfc	r3, #0, #1
   85de0:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   85de2:	79fa      	ldrb	r2, [r7, #7]
   85de4:	490b      	ldr	r1, [pc, #44]	; (85e14 <udd_ep_job_table_reset+0x58>)
   85de6:	4613      	mov	r3, r2
   85de8:	005b      	lsls	r3, r3, #1
   85dea:	4413      	add	r3, r2
   85dec:	00db      	lsls	r3, r3, #3
   85dee:	440b      	add	r3, r1
   85df0:	f103 0210 	add.w	r2, r3, #16
   85df4:	7913      	ldrb	r3, [r2, #4]
   85df6:	f36f 0382 	bfc	r3, #2, #1
   85dfa:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85dfc:	79fb      	ldrb	r3, [r7, #7]
   85dfe:	3301      	adds	r3, #1
   85e00:	71fb      	strb	r3, [r7, #7]
   85e02:	79fb      	ldrb	r3, [r7, #7]
   85e04:	2b01      	cmp	r3, #1
   85e06:	d9df      	bls.n	85dc8 <udd_ep_job_table_reset+0xc>
	}
}
   85e08:	bf00      	nop
   85e0a:	bf00      	nop
   85e0c:	370c      	adds	r7, #12
   85e0e:	46bd      	mov	sp, r7
   85e10:	bc80      	pop	{r7}
   85e12:	4770      	bx	lr
   85e14:	2000134c 	.word	0x2000134c

00085e18 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   85e18:	b580      	push	{r7, lr}
   85e1a:	b082      	sub	sp, #8
   85e1c:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85e1e:	2300      	movs	r3, #0
   85e20:	71fb      	strb	r3, [r7, #7]
   85e22:	e010      	b.n	85e46 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   85e24:	79fa      	ldrb	r2, [r7, #7]
   85e26:	4613      	mov	r3, r2
   85e28:	005b      	lsls	r3, r3, #1
   85e2a:	4413      	add	r3, r2
   85e2c:	00db      	lsls	r3, r3, #3
   85e2e:	4a0a      	ldr	r2, [pc, #40]	; (85e58 <udd_ep_job_table_kill+0x40>)
   85e30:	1898      	adds	r0, r3, r2
   85e32:	79fb      	ldrb	r3, [r7, #7]
   85e34:	3301      	adds	r3, #1
   85e36:	b2db      	uxtb	r3, r3
   85e38:	461a      	mov	r2, r3
   85e3a:	2101      	movs	r1, #1
   85e3c:	4b07      	ldr	r3, [pc, #28]	; (85e5c <udd_ep_job_table_kill+0x44>)
   85e3e:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85e40:	79fb      	ldrb	r3, [r7, #7]
   85e42:	3301      	adds	r3, #1
   85e44:	71fb      	strb	r3, [r7, #7]
   85e46:	79fb      	ldrb	r3, [r7, #7]
   85e48:	2b01      	cmp	r3, #1
   85e4a:	d9eb      	bls.n	85e24 <udd_ep_job_table_kill+0xc>
	}
}
   85e4c:	bf00      	nop
   85e4e:	bf00      	nop
   85e50:	3708      	adds	r7, #8
   85e52:	46bd      	mov	sp, r7
   85e54:	bd80      	pop	{r7, pc}
   85e56:	bf00      	nop
   85e58:	2000134c 	.word	0x2000134c
   85e5c:	00085e9d 	.word	0x00085e9d

00085e60 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   85e60:	b580      	push	{r7, lr}
   85e62:	b082      	sub	sp, #8
   85e64:	af00      	add	r7, sp, #0
   85e66:	4603      	mov	r3, r0
   85e68:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   85e6a:	79fb      	ldrb	r3, [r7, #7]
   85e6c:	f003 030f 	and.w	r3, r3, #15
   85e70:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85e72:	79fb      	ldrb	r3, [r7, #7]
   85e74:	1e5a      	subs	r2, r3, #1
   85e76:	4613      	mov	r3, r2
   85e78:	005b      	lsls	r3, r3, #1
   85e7a:	4413      	add	r3, r2
   85e7c:	00db      	lsls	r3, r3, #3
   85e7e:	4a05      	ldr	r2, [pc, #20]	; (85e94 <udd_ep_abort_job+0x34>)
   85e80:	4413      	add	r3, r2
   85e82:	79fa      	ldrb	r2, [r7, #7]
   85e84:	2101      	movs	r1, #1
   85e86:	4618      	mov	r0, r3
   85e88:	4b03      	ldr	r3, [pc, #12]	; (85e98 <udd_ep_abort_job+0x38>)
   85e8a:	4798      	blx	r3
}
   85e8c:	bf00      	nop
   85e8e:	3708      	adds	r7, #8
   85e90:	46bd      	mov	sp, r7
   85e92:	bd80      	pop	{r7, pc}
   85e94:	2000134c 	.word	0x2000134c
   85e98:	00085e9d 	.word	0x00085e9d

00085e9c <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   85e9c:	b580      	push	{r7, lr}
   85e9e:	b082      	sub	sp, #8
   85ea0:	af00      	add	r7, sp, #0
   85ea2:	6078      	str	r0, [r7, #4]
   85ea4:	460b      	mov	r3, r1
   85ea6:	70fb      	strb	r3, [r7, #3]
   85ea8:	4613      	mov	r3, r2
   85eaa:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   85eac:	687b      	ldr	r3, [r7, #4]
   85eae:	7d1b      	ldrb	r3, [r3, #20]
   85eb0:	f003 0301 	and.w	r3, r3, #1
   85eb4:	b2db      	uxtb	r3, r3
   85eb6:	2b00      	cmp	r3, #0
   85eb8:	d01f      	beq.n	85efa <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   85eba:	687a      	ldr	r2, [r7, #4]
   85ebc:	7d13      	ldrb	r3, [r2, #20]
   85ebe:	f36f 0300 	bfc	r3, #0, #1
   85ec2:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   85ec4:	687b      	ldr	r3, [r7, #4]
   85ec6:	681b      	ldr	r3, [r3, #0]
   85ec8:	2b00      	cmp	r3, #0
   85eca:	d018      	beq.n	85efe <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   85ecc:	4a0e      	ldr	r2, [pc, #56]	; (85f08 <udd_ep_finish_job+0x6c>)
   85ece:	78bb      	ldrb	r3, [r7, #2]
   85ed0:	3308      	adds	r3, #8
   85ed2:	015b      	lsls	r3, r3, #5
   85ed4:	4413      	add	r3, r2
   85ed6:	681b      	ldr	r3, [r3, #0]
   85ed8:	f003 0308 	and.w	r3, r3, #8
   85edc:	2b00      	cmp	r3, #0
   85ede:	d003      	beq.n	85ee8 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   85ee0:	78bb      	ldrb	r3, [r7, #2]
   85ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   85ee6:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   85ee8:	687b      	ldr	r3, [r7, #4]
   85eea:	681b      	ldr	r3, [r3, #0]
   85eec:	78fa      	ldrb	r2, [r7, #3]
   85eee:	4610      	mov	r0, r2
   85ef0:	687a      	ldr	r2, [r7, #4]
   85ef2:	6891      	ldr	r1, [r2, #8]
   85ef4:	78ba      	ldrb	r2, [r7, #2]
   85ef6:	4798      	blx	r3
   85ef8:	e002      	b.n	85f00 <udd_ep_finish_job+0x64>
		return; // No on-going job
   85efa:	bf00      	nop
   85efc:	e000      	b.n	85f00 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   85efe:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   85f00:	3708      	adds	r7, #8
   85f02:	46bd      	mov	sp, r7
   85f04:	bd80      	pop	{r7, pc}
   85f06:	bf00      	nop
   85f08:	400a4000 	.word	0x400a4000

00085f0c <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   85f0c:	b580      	push	{r7, lr}
   85f0e:	b086      	sub	sp, #24
   85f10:	af00      	add	r7, sp, #0
   85f12:	4603      	mov	r3, r0
   85f14:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   85f16:	2300      	movs	r3, #0
   85f18:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   85f1a:	79fb      	ldrb	r3, [r7, #7]
   85f1c:	1e5a      	subs	r2, r3, #1
   85f1e:	4613      	mov	r3, r2
   85f20:	005b      	lsls	r3, r3, #1
   85f22:	4413      	add	r3, r2
   85f24:	00db      	lsls	r3, r3, #3
   85f26:	4a6d      	ldr	r2, [pc, #436]	; (860dc <udd_ep_trans_done+0x1d0>)
   85f28:	4413      	add	r3, r2
   85f2a:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   85f2c:	68fb      	ldr	r3, [r7, #12]
   85f2e:	7d1b      	ldrb	r3, [r3, #20]
   85f30:	f003 0301 	and.w	r3, r3, #1
   85f34:	b2db      	uxtb	r3, r3
   85f36:	2b00      	cmp	r3, #0
   85f38:	f000 80cc 	beq.w	860d4 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   85f3c:	68fb      	ldr	r3, [r7, #12]
   85f3e:	68da      	ldr	r2, [r3, #12]
   85f40:	68fb      	ldr	r3, [r7, #12]
   85f42:	689b      	ldr	r3, [r3, #8]
   85f44:	429a      	cmp	r2, r3
   85f46:	f000 8099 	beq.w	8607c <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   85f4a:	68fb      	ldr	r3, [r7, #12]
   85f4c:	689a      	ldr	r2, [r3, #8]
   85f4e:	68fb      	ldr	r3, [r7, #12]
   85f50:	68db      	ldr	r3, [r3, #12]
   85f52:	1ad3      	subs	r3, r2, r3
   85f54:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   85f56:	693b      	ldr	r3, [r7, #16]
   85f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   85f5c:	d905      	bls.n	85f6a <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   85f62:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   85f64:	2300      	movs	r3, #0
   85f66:	617b      	str	r3, [r7, #20]
   85f68:	e002      	b.n	85f70 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   85f6a:	693b      	ldr	r3, [r7, #16]
   85f6c:	041b      	lsls	r3, r3, #16
   85f6e:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   85f70:	4a5b      	ldr	r2, [pc, #364]	; (860e0 <udd_ep_trans_done+0x1d4>)
   85f72:	79fb      	ldrb	r3, [r7, #7]
   85f74:	3308      	adds	r3, #8
   85f76:	015b      	lsls	r3, r3, #5
   85f78:	4413      	add	r3, r2
   85f7a:	681b      	ldr	r3, [r3, #0]
   85f7c:	f003 0308 	and.w	r3, r3, #8
   85f80:	2b00      	cmp	r3, #0
   85f82:	d01d      	beq.n	85fc0 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   85f84:	4a56      	ldr	r2, [pc, #344]	; (860e0 <udd_ep_trans_done+0x1d4>)
   85f86:	79fb      	ldrb	r3, [r7, #7]
   85f88:	3308      	adds	r3, #8
   85f8a:	015b      	lsls	r3, r3, #5
   85f8c:	4413      	add	r3, r2
   85f8e:	681b      	ldr	r3, [r3, #0]
   85f90:	f003 0307 	and.w	r3, r3, #7
   85f94:	2208      	movs	r2, #8
   85f96:	fa02 f303 	lsl.w	r3, r2, r3
   85f9a:	461a      	mov	r2, r3
   85f9c:	693b      	ldr	r3, [r7, #16]
   85f9e:	fbb3 f1f2 	udiv	r1, r3, r2
   85fa2:	fb02 f201 	mul.w	r2, r2, r1
   85fa6:	1a9b      	subs	r3, r3, r2
   85fa8:	2b00      	cmp	r3, #0
   85faa:	d027      	beq.n	85ffc <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   85fac:	697b      	ldr	r3, [r7, #20]
   85fae:	f043 0308 	orr.w	r3, r3, #8
   85fb2:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   85fb4:	68fa      	ldr	r2, [r7, #12]
   85fb6:	7d13      	ldrb	r3, [r2, #20]
   85fb8:	f36f 0341 	bfc	r3, #1, #1
   85fbc:	7513      	strb	r3, [r2, #20]
   85fbe:	e01d      	b.n	85ffc <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   85fc0:	4a47      	ldr	r2, [pc, #284]	; (860e0 <udd_ep_trans_done+0x1d4>)
   85fc2:	79fb      	ldrb	r3, [r7, #7]
   85fc4:	3308      	adds	r3, #8
   85fc6:	015b      	lsls	r3, r3, #5
   85fc8:	4413      	add	r3, r2
   85fca:	681b      	ldr	r3, [r3, #0]
   85fcc:	091b      	lsrs	r3, r3, #4
   85fce:	f003 0303 	and.w	r3, r3, #3
   85fd2:	2b01      	cmp	r3, #1
   85fd4:	d10e      	bne.n	85ff4 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   85fd6:	4a42      	ldr	r2, [pc, #264]	; (860e0 <udd_ep_trans_done+0x1d4>)
   85fd8:	79fb      	ldrb	r3, [r7, #7]
   85fda:	3308      	adds	r3, #8
   85fdc:	015b      	lsls	r3, r3, #5
   85fde:	4413      	add	r3, r2
   85fe0:	681b      	ldr	r3, [r3, #0]
   85fe2:	f003 0307 	and.w	r3, r3, #7
   85fe6:	2208      	movs	r2, #8
   85fe8:	fa02 f303 	lsl.w	r3, r2, r3
   85fec:	461a      	mov	r2, r3
   85fee:	693b      	ldr	r3, [r7, #16]
   85ff0:	4293      	cmp	r3, r2
   85ff2:	d803      	bhi.n	85ffc <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   85ff4:	697b      	ldr	r3, [r7, #20]
   85ff6:	f043 0314 	orr.w	r3, r3, #20
   85ffa:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   85ffc:	68fb      	ldr	r3, [r7, #12]
   85ffe:	685a      	ldr	r2, [r3, #4]
   86000:	68fb      	ldr	r3, [r7, #12]
   86002:	68db      	ldr	r3, [r3, #12]
   86004:	18d1      	adds	r1, r2, r3
   86006:	79fb      	ldrb	r3, [r7, #7]
   86008:	011a      	lsls	r2, r3, #4
   8600a:	4b36      	ldr	r3, [pc, #216]	; (860e4 <udd_ep_trans_done+0x1d8>)
   8600c:	4413      	add	r3, r2
   8600e:	460a      	mov	r2, r1
   86010:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   86012:	697b      	ldr	r3, [r7, #20]
   86014:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   86018:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   8601a:	4b33      	ldr	r3, [pc, #204]	; (860e8 <udd_ep_trans_done+0x1dc>)
   8601c:	4798      	blx	r3
   8601e:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   86020:	79fb      	ldrb	r3, [r7, #7]
   86022:	011a      	lsls	r2, r3, #4
   86024:	4b2f      	ldr	r3, [pc, #188]	; (860e4 <udd_ep_trans_done+0x1d8>)
   86026:	4413      	add	r3, r2
   86028:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   8602a:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   8602e:	2b00      	cmp	r3, #0
   86030:	d11d      	bne.n	8606e <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   86032:	79fb      	ldrb	r3, [r7, #7]
   86034:	011a      	lsls	r2, r3, #4
   86036:	4b2b      	ldr	r3, [pc, #172]	; (860e4 <udd_ep_trans_done+0x1d8>)
   86038:	4413      	add	r3, r2
   8603a:	697a      	ldr	r2, [r7, #20]
   8603c:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   8603e:	68fb      	ldr	r3, [r7, #12]
   86040:	68da      	ldr	r2, [r3, #12]
   86042:	693b      	ldr	r3, [r7, #16]
   86044:	441a      	add	r2, r3
   86046:	68fb      	ldr	r3, [r7, #12]
   86048:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   8604a:	68fb      	ldr	r3, [r7, #12]
   8604c:	693a      	ldr	r2, [r7, #16]
   8604e:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   86050:	4b23      	ldr	r3, [pc, #140]	; (860e0 <udd_ep_trans_done+0x1d4>)
   86052:	691a      	ldr	r2, [r3, #16]
   86054:	79fb      	ldrb	r3, [r7, #7]
   86056:	3b01      	subs	r3, #1
   86058:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8605c:	fa01 f303 	lsl.w	r3, r1, r3
   86060:	491f      	ldr	r1, [pc, #124]	; (860e0 <udd_ep_trans_done+0x1d4>)
   86062:	4313      	orrs	r3, r2
   86064:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   86066:	68b8      	ldr	r0, [r7, #8]
   86068:	4b20      	ldr	r3, [pc, #128]	; (860ec <udd_ep_trans_done+0x1e0>)
   8606a:	4798      	blx	r3
			return;
   8606c:	e033      	b.n	860d6 <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   8606e:	68b8      	ldr	r0, [r7, #8]
   86070:	4b1e      	ldr	r3, [pc, #120]	; (860ec <udd_ep_trans_done+0x1e0>)
   86072:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   86074:	68fb      	ldr	r3, [r7, #12]
   86076:	68da      	ldr	r2, [r3, #12]
   86078:	68fb      	ldr	r3, [r7, #12]
   8607a:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   8607c:	4a18      	ldr	r2, [pc, #96]	; (860e0 <udd_ep_trans_done+0x1d4>)
   8607e:	79fb      	ldrb	r3, [r7, #7]
   86080:	3308      	adds	r3, #8
   86082:	015b      	lsls	r3, r3, #5
   86084:	4413      	add	r3, r2
   86086:	681b      	ldr	r3, [r3, #0]
   86088:	f003 0308 	and.w	r3, r3, #8
   8608c:	2b00      	cmp	r3, #0
   8608e:	d01a      	beq.n	860c6 <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   86090:	68fb      	ldr	r3, [r7, #12]
   86092:	7d1b      	ldrb	r3, [r3, #20]
   86094:	f003 0302 	and.w	r3, r3, #2
   86098:	b2db      	uxtb	r3, r3
   8609a:	2b00      	cmp	r3, #0
   8609c:	d013      	beq.n	860c6 <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   8609e:	4a10      	ldr	r2, [pc, #64]	; (860e0 <udd_ep_trans_done+0x1d4>)
   860a0:	79fb      	ldrb	r3, [r7, #7]
   860a2:	3308      	adds	r3, #8
   860a4:	015b      	lsls	r3, r3, #5
   860a6:	4413      	add	r3, r2
   860a8:	3304      	adds	r3, #4
   860aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
   860ae:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   860b0:	4b0b      	ldr	r3, [pc, #44]	; (860e0 <udd_ep_trans_done+0x1d4>)
   860b2:	691a      	ldr	r2, [r3, #16]
   860b4:	79fb      	ldrb	r3, [r7, #7]
   860b6:	f44f 7180 	mov.w	r1, #256	; 0x100
   860ba:	fa01 f303 	lsl.w	r3, r1, r3
   860be:	4908      	ldr	r1, [pc, #32]	; (860e0 <udd_ep_trans_done+0x1d4>)
   860c0:	4313      	orrs	r3, r2
   860c2:	610b      	str	r3, [r1, #16]
			return;
   860c4:	e007      	b.n	860d6 <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   860c6:	79fb      	ldrb	r3, [r7, #7]
   860c8:	461a      	mov	r2, r3
   860ca:	2100      	movs	r1, #0
   860cc:	68f8      	ldr	r0, [r7, #12]
   860ce:	4b08      	ldr	r3, [pc, #32]	; (860f0 <udd_ep_trans_done+0x1e4>)
   860d0:	4798      	blx	r3
   860d2:	e000      	b.n	860d6 <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   860d4:	bf00      	nop
}
   860d6:	3718      	adds	r7, #24
   860d8:	46bd      	mov	sp, r7
   860da:	bd80      	pop	{r7, pc}
   860dc:	2000134c 	.word	0x2000134c
   860e0:	400a4000 	.word	0x400a4000
   860e4:	400a4300 	.word	0x400a4300
   860e8:	0008470d 	.word	0x0008470d
   860ec:	00084769 	.word	0x00084769
   860f0:	00085e9d 	.word	0x00085e9d

000860f4 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   860f4:	b580      	push	{r7, lr}
   860f6:	b084      	sub	sp, #16
   860f8:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   860fa:	2301      	movs	r3, #1
   860fc:	73fb      	strb	r3, [r7, #15]
   860fe:	e0e0      	b.n	862c2 <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   86100:	7bfb      	ldrb	r3, [r7, #15]
   86102:	1e5a      	subs	r2, r3, #1
   86104:	4613      	mov	r3, r2
   86106:	005b      	lsls	r3, r3, #1
   86108:	4413      	add	r3, r2
   8610a:	00db      	lsls	r3, r3, #3
   8610c:	4a71      	ldr	r2, [pc, #452]	; (862d4 <udd_ep_interrupt+0x1e0>)
   8610e:	4413      	add	r3, r2
   86110:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   86112:	4b71      	ldr	r3, [pc, #452]	; (862d8 <udd_ep_interrupt+0x1e4>)
   86114:	691a      	ldr	r2, [r3, #16]
   86116:	7bfb      	ldrb	r3, [r7, #15]
   86118:	3b01      	subs	r3, #1
   8611a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8611e:	fa01 f303 	lsl.w	r3, r1, r3
   86122:	4013      	ands	r3, r2
   86124:	2b00      	cmp	r3, #0
   86126:	d03c      	beq.n	861a2 <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   86128:	4b6b      	ldr	r3, [pc, #428]	; (862d8 <udd_ep_interrupt+0x1e4>)
   8612a:	695a      	ldr	r2, [r3, #20]
   8612c:	7bfb      	ldrb	r3, [r7, #15]
   8612e:	3b01      	subs	r3, #1
   86130:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   86134:	fa01 f303 	lsl.w	r3, r1, r3
   86138:	4013      	ands	r3, r2
   8613a:	2b00      	cmp	r3, #0
   8613c:	d031      	beq.n	861a2 <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   8613e:	7bfb      	ldrb	r3, [r7, #15]
   86140:	011a      	lsls	r2, r3, #4
   86142:	4b66      	ldr	r3, [pc, #408]	; (862dc <udd_ep_interrupt+0x1e8>)
   86144:	4413      	add	r3, r2
   86146:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   86148:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   8614c:	2b00      	cmp	r3, #0
   8614e:	d001      	beq.n	86154 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   86150:	2301      	movs	r3, #1
   86152:	e0bb      	b.n	862cc <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   86154:	4b60      	ldr	r3, [pc, #384]	; (862d8 <udd_ep_interrupt+0x1e4>)
   86156:	691a      	ldr	r2, [r3, #16]
   86158:	7bfb      	ldrb	r3, [r7, #15]
   8615a:	3b01      	subs	r3, #1
   8615c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   86160:	fa01 f303 	lsl.w	r3, r1, r3
   86164:	43db      	mvns	r3, r3
   86166:	495c      	ldr	r1, [pc, #368]	; (862d8 <udd_ep_interrupt+0x1e4>)
   86168:	4013      	ands	r3, r2
   8616a:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8616c:	7bfb      	ldrb	r3, [r7, #15]
   8616e:	011a      	lsls	r2, r3, #4
   86170:	4b5a      	ldr	r3, [pc, #360]	; (862dc <udd_ep_interrupt+0x1e8>)
   86172:	4413      	add	r3, r2
   86174:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   86176:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   86178:	b29b      	uxth	r3, r3
   8617a:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   8617c:	687b      	ldr	r3, [r7, #4]
   8617e:	2b00      	cmp	r3, #0
   86180:	d009      	beq.n	86196 <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   86182:	68bb      	ldr	r3, [r7, #8]
   86184:	68da      	ldr	r2, [r3, #12]
   86186:	687b      	ldr	r3, [r7, #4]
   86188:	1ad2      	subs	r2, r2, r3
   8618a:	68bb      	ldr	r3, [r7, #8]
   8618c:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   8618e:	68bb      	ldr	r3, [r7, #8]
   86190:	68da      	ldr	r2, [r3, #12]
   86192:	68bb      	ldr	r3, [r7, #8]
   86194:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   86196:	7bfb      	ldrb	r3, [r7, #15]
   86198:	4618      	mov	r0, r3
   8619a:	4b51      	ldr	r3, [pc, #324]	; (862e0 <udd_ep_interrupt+0x1ec>)
   8619c:	4798      	blx	r3
			return true;
   8619e:	2301      	movs	r3, #1
   861a0:	e094      	b.n	862cc <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   861a2:	4b4d      	ldr	r3, [pc, #308]	; (862d8 <udd_ep_interrupt+0x1e4>)
   861a4:	691a      	ldr	r2, [r3, #16]
   861a6:	7bfb      	ldrb	r3, [r7, #15]
   861a8:	f44f 7180 	mov.w	r1, #256	; 0x100
   861ac:	fa01 f303 	lsl.w	r3, r1, r3
   861b0:	4013      	ands	r3, r2
   861b2:	2b00      	cmp	r3, #0
   861b4:	f000 8082 	beq.w	862bc <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   861b8:	4a47      	ldr	r2, [pc, #284]	; (862d8 <udd_ep_interrupt+0x1e4>)
   861ba:	7bfb      	ldrb	r3, [r7, #15]
   861bc:	015b      	lsls	r3, r3, #5
   861be:	4413      	add	r3, r2
   861c0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   861c4:	681b      	ldr	r3, [r3, #0]
   861c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   861ca:	2b00      	cmp	r3, #0
   861cc:	d024      	beq.n	86218 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   861ce:	4a42      	ldr	r2, [pc, #264]	; (862d8 <udd_ep_interrupt+0x1e4>)
   861d0:	7bfb      	ldrb	r3, [r7, #15]
   861d2:	015b      	lsls	r3, r3, #5
   861d4:	4413      	add	r3, r2
   861d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   861da:	681b      	ldr	r3, [r3, #0]
   861dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   861e0:	2b00      	cmp	r3, #0
   861e2:	d119      	bne.n	86218 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   861e4:	4a3c      	ldr	r2, [pc, #240]	; (862d8 <udd_ep_interrupt+0x1e4>)
   861e6:	7bfb      	ldrb	r3, [r7, #15]
   861e8:	015b      	lsls	r3, r3, #5
   861ea:	4413      	add	r3, r2
   861ec:	f503 7384 	add.w	r3, r3, #264	; 0x108
   861f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   861f4:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   861f6:	4a38      	ldr	r2, [pc, #224]	; (862d8 <udd_ep_interrupt+0x1e4>)
   861f8:	7bfb      	ldrb	r3, [r7, #15]
   861fa:	015b      	lsls	r3, r3, #5
   861fc:	4413      	add	r3, r2
   861fe:	f503 738a 	add.w	r3, r3, #276	; 0x114
   86202:	f44f 6200 	mov.w	r2, #2048	; 0x800
   86206:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   86208:	7bfb      	ldrb	r3, [r7, #15]
   8620a:	461a      	mov	r2, r3
   8620c:	2100      	movs	r1, #0
   8620e:	68b8      	ldr	r0, [r7, #8]
   86210:	4b34      	ldr	r3, [pc, #208]	; (862e4 <udd_ep_interrupt+0x1f0>)
   86212:	4798      	blx	r3
				return true;
   86214:	2301      	movs	r3, #1
   86216:	e059      	b.n	862cc <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   86218:	4a2f      	ldr	r2, [pc, #188]	; (862d8 <udd_ep_interrupt+0x1e4>)
   8621a:	7bfb      	ldrb	r3, [r7, #15]
   8621c:	015b      	lsls	r3, r3, #5
   8621e:	4413      	add	r3, r2
   86220:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   86224:	681b      	ldr	r3, [r3, #0]
   86226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   8622a:	2b00      	cmp	r3, #0
   8622c:	d046      	beq.n	862bc <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   8622e:	4a2a      	ldr	r2, [pc, #168]	; (862d8 <udd_ep_interrupt+0x1e4>)
   86230:	7bfb      	ldrb	r3, [r7, #15]
   86232:	015b      	lsls	r3, r3, #5
   86234:	4413      	add	r3, r2
   86236:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   8623a:	681b      	ldr	r3, [r3, #0]
   8623c:	0c9b      	lsrs	r3, r3, #18
   8623e:	f003 0303 	and.w	r3, r3, #3
   86242:	2b00      	cmp	r3, #0
   86244:	d13a      	bne.n	862bc <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   86246:	4a24      	ldr	r2, [pc, #144]	; (862d8 <udd_ep_interrupt+0x1e4>)
   86248:	7bfb      	ldrb	r3, [r7, #15]
   8624a:	015b      	lsls	r3, r3, #5
   8624c:	4413      	add	r3, r2
   8624e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   86252:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   86256:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   86258:	4b1f      	ldr	r3, [pc, #124]	; (862d8 <udd_ep_interrupt+0x1e4>)
   8625a:	691a      	ldr	r2, [r3, #16]
   8625c:	7bfb      	ldrb	r3, [r7, #15]
   8625e:	f44f 7180 	mov.w	r1, #256	; 0x100
   86262:	fa01 f303 	lsl.w	r3, r1, r3
   86266:	43db      	mvns	r3, r3
   86268:	491b      	ldr	r1, [pc, #108]	; (862d8 <udd_ep_interrupt+0x1e4>)
   8626a:	4013      	ands	r3, r2
   8626c:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   8626e:	68ba      	ldr	r2, [r7, #8]
   86270:	7d13      	ldrb	r3, [r2, #20]
   86272:	f36f 0382 	bfc	r3, #2, #1
   86276:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   86278:	4a17      	ldr	r2, [pc, #92]	; (862d8 <udd_ep_interrupt+0x1e4>)
   8627a:	7bfb      	ldrb	r3, [r7, #15]
   8627c:	015b      	lsls	r3, r3, #5
   8627e:	4413      	add	r3, r2
   86280:	f503 7384 	add.w	r3, r3, #264	; 0x108
   86284:	681a      	ldr	r2, [r3, #0]
   86286:	4914      	ldr	r1, [pc, #80]	; (862d8 <udd_ep_interrupt+0x1e4>)
   86288:	7bfb      	ldrb	r3, [r7, #15]
   8628a:	f022 0202 	bic.w	r2, r2, #2
   8628e:	015b      	lsls	r3, r3, #5
   86290:	440b      	add	r3, r1
   86292:	f503 7384 	add.w	r3, r3, #264	; 0x108
   86296:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   86298:	4a0f      	ldr	r2, [pc, #60]	; (862d8 <udd_ep_interrupt+0x1e4>)
   8629a:	7bfb      	ldrb	r3, [r7, #15]
   8629c:	015b      	lsls	r3, r3, #5
   8629e:	4413      	add	r3, r2
   862a0:	f503 738a 	add.w	r3, r3, #276	; 0x114
   862a4:	2220      	movs	r2, #32
   862a6:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   862a8:	4a0b      	ldr	r2, [pc, #44]	; (862d8 <udd_ep_interrupt+0x1e4>)
   862aa:	7bfb      	ldrb	r3, [r7, #15]
   862ac:	015b      	lsls	r3, r3, #5
   862ae:	4413      	add	r3, r2
   862b0:	f503 738c 	add.w	r3, r3, #280	; 0x118
   862b4:	2240      	movs	r2, #64	; 0x40
   862b6:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   862b8:	2301      	movs	r3, #1
   862ba:	e007      	b.n	862cc <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   862bc:	7bfb      	ldrb	r3, [r7, #15]
   862be:	3301      	adds	r3, #1
   862c0:	73fb      	strb	r3, [r7, #15]
   862c2:	7bfb      	ldrb	r3, [r7, #15]
   862c4:	2b02      	cmp	r3, #2
   862c6:	f67f af1b 	bls.w	86100 <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   862ca:	2300      	movs	r3, #0
}
   862cc:	4618      	mov	r0, r3
   862ce:	3710      	adds	r7, #16
   862d0:	46bd      	mov	sp, r7
   862d2:	bd80      	pop	{r7, pc}
   862d4:	2000134c 	.word	0x2000134c
   862d8:	400a4000 	.word	0x400a4000
   862dc:	400a4300 	.word	0x400a4300
   862e0:	00085f0d 	.word	0x00085f0d
   862e4:	00085e9d 	.word	0x00085e9d

000862e8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   862e8:	b480      	push	{r7}
   862ea:	b089      	sub	sp, #36	; 0x24
   862ec:	af00      	add	r7, sp, #0
   862ee:	60f8      	str	r0, [r7, #12]
   862f0:	60b9      	str	r1, [r7, #8]
   862f2:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   862f4:	68bb      	ldr	r3, [r7, #8]
   862f6:	011b      	lsls	r3, r3, #4
   862f8:	687a      	ldr	r2, [r7, #4]
   862fa:	429a      	cmp	r2, r3
   862fc:	d302      	bcc.n	86304 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   862fe:	2310      	movs	r3, #16
   86300:	61fb      	str	r3, [r7, #28]
   86302:	e001      	b.n	86308 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   86304:	2308      	movs	r3, #8
   86306:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86308:	687b      	ldr	r3, [r7, #4]
   8630a:	00da      	lsls	r2, r3, #3
   8630c:	69fb      	ldr	r3, [r7, #28]
   8630e:	68b9      	ldr	r1, [r7, #8]
   86310:	fb01 f303 	mul.w	r3, r1, r3
   86314:	085b      	lsrs	r3, r3, #1
   86316:	441a      	add	r2, r3
   86318:	69fb      	ldr	r3, [r7, #28]
   8631a:	68b9      	ldr	r1, [r7, #8]
   8631c:	fb01 f303 	mul.w	r3, r1, r3
   86320:	fbb2 f3f3 	udiv	r3, r2, r3
   86324:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   86326:	69bb      	ldr	r3, [r7, #24]
   86328:	08db      	lsrs	r3, r3, #3
   8632a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   8632c:	69bb      	ldr	r3, [r7, #24]
   8632e:	f003 0307 	and.w	r3, r3, #7
   86332:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86334:	697b      	ldr	r3, [r7, #20]
   86336:	2b00      	cmp	r3, #0
   86338:	d003      	beq.n	86342 <usart_set_async_baudrate+0x5a>
   8633a:	697b      	ldr	r3, [r7, #20]
   8633c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   86340:	d301      	bcc.n	86346 <usart_set_async_baudrate+0x5e>
		return 1;
   86342:	2301      	movs	r3, #1
   86344:	e00f      	b.n	86366 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   86346:	69fb      	ldr	r3, [r7, #28]
   86348:	2b08      	cmp	r3, #8
   8634a:	d105      	bne.n	86358 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   8634c:	68fb      	ldr	r3, [r7, #12]
   8634e:	685b      	ldr	r3, [r3, #4]
   86350:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   86354:	68fb      	ldr	r3, [r7, #12]
   86356:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   86358:	693b      	ldr	r3, [r7, #16]
   8635a:	041a      	lsls	r2, r3, #16
   8635c:	697b      	ldr	r3, [r7, #20]
   8635e:	431a      	orrs	r2, r3
   86360:	68fb      	ldr	r3, [r7, #12]
   86362:	621a      	str	r2, [r3, #32]

	return 0;
   86364:	2300      	movs	r3, #0
}
   86366:	4618      	mov	r0, r3
   86368:	3724      	adds	r7, #36	; 0x24
   8636a:	46bd      	mov	sp, r7
   8636c:	bc80      	pop	{r7}
   8636e:	4770      	bx	lr

00086370 <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   86370:	b480      	push	{r7}
   86372:	b087      	sub	sp, #28
   86374:	af00      	add	r7, sp, #0
   86376:	60f8      	str	r0, [r7, #12]
   86378:	60b9      	str	r1, [r7, #8]
   8637a:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   8637c:	68bb      	ldr	r3, [r7, #8]
   8637e:	085a      	lsrs	r2, r3, #1
   86380:	687b      	ldr	r3, [r7, #4]
   86382:	441a      	add	r2, r3
   86384:	68bb      	ldr	r3, [r7, #8]
   86386:	fbb2 f3f3 	udiv	r3, r2, r3
   8638a:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   8638c:	697b      	ldr	r3, [r7, #20]
   8638e:	2b03      	cmp	r3, #3
   86390:	d903      	bls.n	8639a <usart_set_spi_master_baudrate+0x2a>
   86392:	697b      	ldr	r3, [r7, #20]
   86394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   86398:	d301      	bcc.n	8639e <usart_set_spi_master_baudrate+0x2e>
		return 1;
   8639a:	2301      	movs	r3, #1
   8639c:	e003      	b.n	863a6 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   8639e:	68fb      	ldr	r3, [r7, #12]
   863a0:	697a      	ldr	r2, [r7, #20]
   863a2:	621a      	str	r2, [r3, #32]

	return 0;
   863a4:	2300      	movs	r3, #0
}
   863a6:	4618      	mov	r0, r3
   863a8:	371c      	adds	r7, #28
   863aa:	46bd      	mov	sp, r7
   863ac:	bc80      	pop	{r7}
   863ae:	4770      	bx	lr

000863b0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   863b0:	b580      	push	{r7, lr}
   863b2:	b082      	sub	sp, #8
   863b4:	af00      	add	r7, sp, #0
   863b6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   863b8:	6878      	ldr	r0, [r7, #4]
   863ba:	4b0f      	ldr	r3, [pc, #60]	; (863f8 <usart_reset+0x48>)
   863bc:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   863be:	687b      	ldr	r3, [r7, #4]
   863c0:	2200      	movs	r2, #0
   863c2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   863c4:	687b      	ldr	r3, [r7, #4]
   863c6:	2200      	movs	r2, #0
   863c8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   863ca:	687b      	ldr	r3, [r7, #4]
   863cc:	2200      	movs	r2, #0
   863ce:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   863d0:	6878      	ldr	r0, [r7, #4]
   863d2:	4b0a      	ldr	r3, [pc, #40]	; (863fc <usart_reset+0x4c>)
   863d4:	4798      	blx	r3
	usart_reset_rx(p_usart);
   863d6:	6878      	ldr	r0, [r7, #4]
   863d8:	4b09      	ldr	r3, [pc, #36]	; (86400 <usart_reset+0x50>)
   863da:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   863dc:	6878      	ldr	r0, [r7, #4]
   863de:	4b09      	ldr	r3, [pc, #36]	; (86404 <usart_reset+0x54>)
   863e0:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   863e2:	6878      	ldr	r0, [r7, #4]
   863e4:	4b08      	ldr	r3, [pc, #32]	; (86408 <usart_reset+0x58>)
   863e6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   863e8:	6878      	ldr	r0, [r7, #4]
   863ea:	4b08      	ldr	r3, [pc, #32]	; (8640c <usart_reset+0x5c>)
   863ec:	4798      	blx	r3
#endif
}
   863ee:	bf00      	nop
   863f0:	3708      	adds	r7, #8
   863f2:	46bd      	mov	sp, r7
   863f4:	bd80      	pop	{r7, pc}
   863f6:	bf00      	nop
   863f8:	000866f9 	.word	0x000866f9
   863fc:	000865bd 	.word	0x000865bd
   86400:	00086605 	.word	0x00086605
   86404:	0008667d 	.word	0x0008667d
   86408:	000866b1 	.word	0x000866b1
   8640c:	00086697 	.word	0x00086697

00086410 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   86410:	b580      	push	{r7, lr}
   86412:	b084      	sub	sp, #16
   86414:	af00      	add	r7, sp, #0
   86416:	60f8      	str	r0, [r7, #12]
   86418:	60b9      	str	r1, [r7, #8]
   8641a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   8641c:	68f8      	ldr	r0, [r7, #12]
   8641e:	4b1a      	ldr	r3, [pc, #104]	; (86488 <usart_init_rs232+0x78>)
   86420:	4798      	blx	r3

	ul_reg_val = 0;
   86422:	4b1a      	ldr	r3, [pc, #104]	; (8648c <usart_init_rs232+0x7c>)
   86424:	2200      	movs	r2, #0
   86426:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   86428:	68bb      	ldr	r3, [r7, #8]
   8642a:	2b00      	cmp	r3, #0
   8642c:	d009      	beq.n	86442 <usart_init_rs232+0x32>
   8642e:	68bb      	ldr	r3, [r7, #8]
   86430:	681b      	ldr	r3, [r3, #0]
   86432:	687a      	ldr	r2, [r7, #4]
   86434:	4619      	mov	r1, r3
   86436:	68f8      	ldr	r0, [r7, #12]
   86438:	4b15      	ldr	r3, [pc, #84]	; (86490 <usart_init_rs232+0x80>)
   8643a:	4798      	blx	r3
   8643c:	4603      	mov	r3, r0
   8643e:	2b00      	cmp	r3, #0
   86440:	d001      	beq.n	86446 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   86442:	2301      	movs	r3, #1
   86444:	e01b      	b.n	8647e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86446:	68bb      	ldr	r3, [r7, #8]
   86448:	685a      	ldr	r2, [r3, #4]
   8644a:	68bb      	ldr	r3, [r7, #8]
   8644c:	689b      	ldr	r3, [r3, #8]
   8644e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   86450:	68bb      	ldr	r3, [r7, #8]
   86452:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86454:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   86456:	68bb      	ldr	r3, [r7, #8]
   86458:	68db      	ldr	r3, [r3, #12]
   8645a:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8645c:	4b0b      	ldr	r3, [pc, #44]	; (8648c <usart_init_rs232+0x7c>)
   8645e:	681b      	ldr	r3, [r3, #0]
   86460:	4313      	orrs	r3, r2
   86462:	4a0a      	ldr	r2, [pc, #40]	; (8648c <usart_init_rs232+0x7c>)
   86464:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   86466:	4b09      	ldr	r3, [pc, #36]	; (8648c <usart_init_rs232+0x7c>)
   86468:	681b      	ldr	r3, [r3, #0]
   8646a:	4a08      	ldr	r2, [pc, #32]	; (8648c <usart_init_rs232+0x7c>)
   8646c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   8646e:	68fb      	ldr	r3, [r7, #12]
   86470:	685a      	ldr	r2, [r3, #4]
   86472:	4b06      	ldr	r3, [pc, #24]	; (8648c <usart_init_rs232+0x7c>)
   86474:	681b      	ldr	r3, [r3, #0]
   86476:	431a      	orrs	r2, r3
   86478:	68fb      	ldr	r3, [r7, #12]
   8647a:	605a      	str	r2, [r3, #4]

	return 0;
   8647c:	2300      	movs	r3, #0
}
   8647e:	4618      	mov	r0, r3
   86480:	3710      	adds	r7, #16
   86482:	46bd      	mov	sp, r7
   86484:	bd80      	pop	{r7, pc}
   86486:	bf00      	nop
   86488:	000863b1 	.word	0x000863b1
   8648c:	20001380 	.word	0x20001380
   86490:	000862e9 	.word	0x000862e9

00086494 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   86494:	b580      	push	{r7, lr}
   86496:	b084      	sub	sp, #16
   86498:	af00      	add	r7, sp, #0
   8649a:	60f8      	str	r0, [r7, #12]
   8649c:	60b9      	str	r1, [r7, #8]
   8649e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   864a0:	68f8      	ldr	r0, [r7, #12]
   864a2:	4b3d      	ldr	r3, [pc, #244]	; (86598 <usart_init_spi_master+0x104>)
   864a4:	4798      	blx	r3

	ul_reg_val = 0;
   864a6:	4b3d      	ldr	r3, [pc, #244]	; (8659c <usart_init_spi_master+0x108>)
   864a8:	2200      	movs	r2, #0
   864aa:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   864ac:	68bb      	ldr	r3, [r7, #8]
   864ae:	2b00      	cmp	r3, #0
   864b0:	d00d      	beq.n	864ce <usart_init_spi_master+0x3a>
   864b2:	68bb      	ldr	r3, [r7, #8]
   864b4:	689b      	ldr	r3, [r3, #8]
   864b6:	2b03      	cmp	r3, #3
   864b8:	d809      	bhi.n	864ce <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   864ba:	68bb      	ldr	r3, [r7, #8]
   864bc:	681b      	ldr	r3, [r3, #0]
   864be:	687a      	ldr	r2, [r7, #4]
   864c0:	4619      	mov	r1, r3
   864c2:	68f8      	ldr	r0, [r7, #12]
   864c4:	4b36      	ldr	r3, [pc, #216]	; (865a0 <usart_init_spi_master+0x10c>)
   864c6:	4798      	blx	r3
   864c8:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   864ca:	2b00      	cmp	r3, #0
   864cc:	d001      	beq.n	864d2 <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   864ce:	2301      	movs	r3, #1
   864d0:	e05d      	b.n	8658e <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   864d2:	68bb      	ldr	r3, [r7, #8]
   864d4:	685a      	ldr	r2, [r3, #4]
   864d6:	4b31      	ldr	r3, [pc, #196]	; (8659c <usart_init_spi_master+0x108>)
   864d8:	681b      	ldr	r3, [r3, #0]
   864da:	4313      	orrs	r3, r2
   864dc:	4a2f      	ldr	r2, [pc, #188]	; (8659c <usart_init_spi_master+0x108>)
   864de:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   864e0:	68bb      	ldr	r3, [r7, #8]
   864e2:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   864e4:	4b2d      	ldr	r3, [pc, #180]	; (8659c <usart_init_spi_master+0x108>)
   864e6:	681b      	ldr	r3, [r3, #0]
   864e8:	4313      	orrs	r3, r2
   864ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   864ee:	f043 030e 	orr.w	r3, r3, #14
   864f2:	4a2a      	ldr	r2, [pc, #168]	; (8659c <usart_init_spi_master+0x108>)
   864f4:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   864f6:	68bb      	ldr	r3, [r7, #8]
   864f8:	689b      	ldr	r3, [r3, #8]
   864fa:	2b03      	cmp	r3, #3
   864fc:	d83e      	bhi.n	8657c <usart_init_spi_master+0xe8>
   864fe:	a201      	add	r2, pc, #4	; (adr r2, 86504 <usart_init_spi_master+0x70>)
   86500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86504:	00086515 	.word	0x00086515
   86508:	0008652f 	.word	0x0008652f
   8650c:	00086549 	.word	0x00086549
   86510:	00086563 	.word	0x00086563
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   86514:	4b21      	ldr	r3, [pc, #132]	; (8659c <usart_init_spi_master+0x108>)
   86516:	681b      	ldr	r3, [r3, #0]
   86518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8651c:	4a1f      	ldr	r2, [pc, #124]	; (8659c <usart_init_spi_master+0x108>)
   8651e:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   86520:	4b1e      	ldr	r3, [pc, #120]	; (8659c <usart_init_spi_master+0x108>)
   86522:	681b      	ldr	r3, [r3, #0]
   86524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86528:	4a1c      	ldr	r2, [pc, #112]	; (8659c <usart_init_spi_master+0x108>)
   8652a:	6013      	str	r3, [r2, #0]
		break;
   8652c:	e027      	b.n	8657e <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8652e:	4b1b      	ldr	r3, [pc, #108]	; (8659c <usart_init_spi_master+0x108>)
   86530:	681b      	ldr	r3, [r3, #0]
   86532:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86536:	4a19      	ldr	r2, [pc, #100]	; (8659c <usart_init_spi_master+0x108>)
   86538:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8653a:	4b18      	ldr	r3, [pc, #96]	; (8659c <usart_init_spi_master+0x108>)
   8653c:	681b      	ldr	r3, [r3, #0]
   8653e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86542:	4a16      	ldr	r2, [pc, #88]	; (8659c <usart_init_spi_master+0x108>)
   86544:	6013      	str	r3, [r2, #0]
		break;
   86546:	e01a      	b.n	8657e <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   86548:	4b14      	ldr	r3, [pc, #80]	; (8659c <usart_init_spi_master+0x108>)
   8654a:	681b      	ldr	r3, [r3, #0]
   8654c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86550:	4a12      	ldr	r2, [pc, #72]	; (8659c <usart_init_spi_master+0x108>)
   86552:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   86554:	4b11      	ldr	r3, [pc, #68]	; (8659c <usart_init_spi_master+0x108>)
   86556:	681b      	ldr	r3, [r3, #0]
   86558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8655c:	4a0f      	ldr	r2, [pc, #60]	; (8659c <usart_init_spi_master+0x108>)
   8655e:	6013      	str	r3, [r2, #0]
		break;
   86560:	e00d      	b.n	8657e <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   86562:	4b0e      	ldr	r3, [pc, #56]	; (8659c <usart_init_spi_master+0x108>)
   86564:	681b      	ldr	r3, [r3, #0]
   86566:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   8656a:	4a0c      	ldr	r2, [pc, #48]	; (8659c <usart_init_spi_master+0x108>)
   8656c:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8656e:	4b0b      	ldr	r3, [pc, #44]	; (8659c <usart_init_spi_master+0x108>)
   86570:	681b      	ldr	r3, [r3, #0]
   86572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86576:	4a09      	ldr	r2, [pc, #36]	; (8659c <usart_init_spi_master+0x108>)
   86578:	6013      	str	r3, [r2, #0]
		break;
   8657a:	e000      	b.n	8657e <usart_init_spi_master+0xea>

	default:
		break;
   8657c:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   8657e:	68fb      	ldr	r3, [r7, #12]
   86580:	685a      	ldr	r2, [r3, #4]
   86582:	4b06      	ldr	r3, [pc, #24]	; (8659c <usart_init_spi_master+0x108>)
   86584:	681b      	ldr	r3, [r3, #0]
   86586:	431a      	orrs	r2, r3
   86588:	68fb      	ldr	r3, [r7, #12]
   8658a:	605a      	str	r2, [r3, #4]

	return 0;
   8658c:	2300      	movs	r3, #0
}
   8658e:	4618      	mov	r0, r3
   86590:	3710      	adds	r7, #16
   86592:	46bd      	mov	sp, r7
   86594:	bd80      	pop	{r7, pc}
   86596:	bf00      	nop
   86598:	000863b1 	.word	0x000863b1
   8659c:	20001384 	.word	0x20001384
   865a0:	00086371 	.word	0x00086371

000865a4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   865a4:	b480      	push	{r7}
   865a6:	b083      	sub	sp, #12
   865a8:	af00      	add	r7, sp, #0
   865aa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   865ac:	687b      	ldr	r3, [r7, #4]
   865ae:	2240      	movs	r2, #64	; 0x40
   865b0:	601a      	str	r2, [r3, #0]
}
   865b2:	bf00      	nop
   865b4:	370c      	adds	r7, #12
   865b6:	46bd      	mov	sp, r7
   865b8:	bc80      	pop	{r7}
   865ba:	4770      	bx	lr

000865bc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   865bc:	b480      	push	{r7}
   865be:	b083      	sub	sp, #12
   865c0:	af00      	add	r7, sp, #0
   865c2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   865c4:	687b      	ldr	r3, [r7, #4]
   865c6:	2288      	movs	r2, #136	; 0x88
   865c8:	601a      	str	r2, [r3, #0]
}
   865ca:	bf00      	nop
   865cc:	370c      	adds	r7, #12
   865ce:	46bd      	mov	sp, r7
   865d0:	bc80      	pop	{r7}
   865d2:	4770      	bx	lr

000865d4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   865d4:	b480      	push	{r7}
   865d6:	b083      	sub	sp, #12
   865d8:	af00      	add	r7, sp, #0
   865da:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   865dc:	687b      	ldr	r3, [r7, #4]
   865de:	2210      	movs	r2, #16
   865e0:	601a      	str	r2, [r3, #0]
}
   865e2:	bf00      	nop
   865e4:	370c      	adds	r7, #12
   865e6:	46bd      	mov	sp, r7
   865e8:	bc80      	pop	{r7}
   865ea:	4770      	bx	lr

000865ec <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   865ec:	b480      	push	{r7}
   865ee:	b083      	sub	sp, #12
   865f0:	af00      	add	r7, sp, #0
   865f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   865f4:	687b      	ldr	r3, [r7, #4]
   865f6:	2220      	movs	r2, #32
   865f8:	601a      	str	r2, [r3, #0]
}
   865fa:	bf00      	nop
   865fc:	370c      	adds	r7, #12
   865fe:	46bd      	mov	sp, r7
   86600:	bc80      	pop	{r7}
   86602:	4770      	bx	lr

00086604 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   86604:	b480      	push	{r7}
   86606:	b083      	sub	sp, #12
   86608:	af00      	add	r7, sp, #0
   8660a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8660c:	687b      	ldr	r3, [r7, #4]
   8660e:	2224      	movs	r2, #36	; 0x24
   86610:	601a      	str	r2, [r3, #0]
}
   86612:	bf00      	nop
   86614:	370c      	adds	r7, #12
   86616:	46bd      	mov	sp, r7
   86618:	bc80      	pop	{r7}
   8661a:	4770      	bx	lr

0008661c <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   8661c:	b480      	push	{r7}
   8661e:	b083      	sub	sp, #12
   86620:	af00      	add	r7, sp, #0
   86622:	6078      	str	r0, [r7, #4]
   86624:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   86626:	687b      	ldr	r3, [r7, #4]
   86628:	683a      	ldr	r2, [r7, #0]
   8662a:	609a      	str	r2, [r3, #8]
}
   8662c:	bf00      	nop
   8662e:	370c      	adds	r7, #12
   86630:	46bd      	mov	sp, r7
   86632:	bc80      	pop	{r7}
   86634:	4770      	bx	lr

00086636 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   86636:	b480      	push	{r7}
   86638:	b083      	sub	sp, #12
   8663a:	af00      	add	r7, sp, #0
   8663c:	6078      	str	r0, [r7, #4]
   8663e:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   86640:	687b      	ldr	r3, [r7, #4]
   86642:	683a      	ldr	r2, [r7, #0]
   86644:	60da      	str	r2, [r3, #12]
}
   86646:	bf00      	nop
   86648:	370c      	adds	r7, #12
   8664a:	46bd      	mov	sp, r7
   8664c:	bc80      	pop	{r7}
   8664e:	4770      	bx	lr

00086650 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   86650:	b480      	push	{r7}
   86652:	b083      	sub	sp, #12
   86654:	af00      	add	r7, sp, #0
   86656:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   86658:	687b      	ldr	r3, [r7, #4]
   8665a:	691b      	ldr	r3, [r3, #16]
}
   8665c:	4618      	mov	r0, r3
   8665e:	370c      	adds	r7, #12
   86660:	46bd      	mov	sp, r7
   86662:	bc80      	pop	{r7}
   86664:	4770      	bx	lr

00086666 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   86666:	b480      	push	{r7}
   86668:	b083      	sub	sp, #12
   8666a:	af00      	add	r7, sp, #0
   8666c:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   8666e:	687b      	ldr	r3, [r7, #4]
   86670:	695b      	ldr	r3, [r3, #20]
}
   86672:	4618      	mov	r0, r3
   86674:	370c      	adds	r7, #12
   86676:	46bd      	mov	sp, r7
   86678:	bc80      	pop	{r7}
   8667a:	4770      	bx	lr

0008667c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   8667c:	b480      	push	{r7}
   8667e:	b083      	sub	sp, #12
   86680:	af00      	add	r7, sp, #0
   86682:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   86684:	687b      	ldr	r3, [r7, #4]
   86686:	f44f 7280 	mov.w	r2, #256	; 0x100
   8668a:	601a      	str	r2, [r3, #0]
}
   8668c:	bf00      	nop
   8668e:	370c      	adds	r7, #12
   86690:	46bd      	mov	sp, r7
   86692:	bc80      	pop	{r7}
   86694:	4770      	bx	lr

00086696 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   86696:	b480      	push	{r7}
   86698:	b083      	sub	sp, #12
   8669a:	af00      	add	r7, sp, #0
   8669c:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   8669e:	687b      	ldr	r3, [r7, #4]
   866a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   866a4:	601a      	str	r2, [r3, #0]
}
   866a6:	bf00      	nop
   866a8:	370c      	adds	r7, #12
   866aa:	46bd      	mov	sp, r7
   866ac:	bc80      	pop	{r7}
   866ae:	4770      	bx	lr

000866b0 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   866b0:	b480      	push	{r7}
   866b2:	b083      	sub	sp, #12
   866b4:	af00      	add	r7, sp, #0
   866b6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   866b8:	687b      	ldr	r3, [r7, #4]
   866ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   866be:	601a      	str	r2, [r3, #0]
}
   866c0:	bf00      	nop
   866c2:	370c      	adds	r7, #12
   866c4:	46bd      	mov	sp, r7
   866c6:	bc80      	pop	{r7}
   866c8:	4770      	bx	lr

000866ca <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   866ca:	b480      	push	{r7}
   866cc:	b083      	sub	sp, #12
   866ce:	af00      	add	r7, sp, #0
   866d0:	6078      	str	r0, [r7, #4]
   866d2:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   866d4:	bf00      	nop
   866d6:	687b      	ldr	r3, [r7, #4]
   866d8:	695b      	ldr	r3, [r3, #20]
   866da:	f003 0302 	and.w	r3, r3, #2
   866de:	2b00      	cmp	r3, #0
   866e0:	d0f9      	beq.n	866d6 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   866e2:	683b      	ldr	r3, [r7, #0]
   866e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   866e8:	687b      	ldr	r3, [r7, #4]
   866ea:	61da      	str	r2, [r3, #28]

	return 0;
   866ec:	2300      	movs	r3, #0
}
   866ee:	4618      	mov	r0, r3
   866f0:	370c      	adds	r7, #12
   866f2:	46bd      	mov	sp, r7
   866f4:	bc80      	pop	{r7}
   866f6:	4770      	bx	lr

000866f8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   866f8:	b480      	push	{r7}
   866fa:	b083      	sub	sp, #12
   866fc:	af00      	add	r7, sp, #0
   866fe:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   86700:	687b      	ldr	r3, [r7, #4]
   86702:	4a04      	ldr	r2, [pc, #16]	; (86714 <usart_disable_writeprotect+0x1c>)
   86704:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   86708:	bf00      	nop
   8670a:	370c      	adds	r7, #12
   8670c:	46bd      	mov	sp, r7
   8670e:	bc80      	pop	{r7}
   86710:	4770      	bx	lr
   86712:	bf00      	nop
   86714:	55534100 	.word	0x55534100

00086718 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   86718:	b580      	push	{r7, lr}
   8671a:	b086      	sub	sp, #24
   8671c:	af00      	add	r7, sp, #0
   8671e:	60f8      	str	r0, [r7, #12]
   86720:	60b9      	str	r1, [r7, #8]
   86722:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   86724:	2300      	movs	r3, #0
   86726:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   86728:	68fb      	ldr	r3, [r7, #12]
   8672a:	2b01      	cmp	r3, #1
   8672c:	d01e      	beq.n	8676c <_write+0x54>
   8672e:	68fb      	ldr	r3, [r7, #12]
   86730:	2b02      	cmp	r3, #2
   86732:	d01b      	beq.n	8676c <_write+0x54>
   86734:	68fb      	ldr	r3, [r7, #12]
   86736:	2b03      	cmp	r3, #3
   86738:	d018      	beq.n	8676c <_write+0x54>
		return -1;
   8673a:	f04f 33ff 	mov.w	r3, #4294967295
   8673e:	e019      	b.n	86774 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   86740:	4b0e      	ldr	r3, [pc, #56]	; (8677c <_write+0x64>)
   86742:	681a      	ldr	r2, [r3, #0]
   86744:	4b0e      	ldr	r3, [pc, #56]	; (86780 <_write+0x68>)
   86746:	6818      	ldr	r0, [r3, #0]
   86748:	68bb      	ldr	r3, [r7, #8]
   8674a:	1c59      	adds	r1, r3, #1
   8674c:	60b9      	str	r1, [r7, #8]
   8674e:	781b      	ldrb	r3, [r3, #0]
   86750:	4619      	mov	r1, r3
   86752:	4790      	blx	r2
   86754:	4603      	mov	r3, r0
   86756:	2b00      	cmp	r3, #0
   86758:	da02      	bge.n	86760 <_write+0x48>
			return -1;
   8675a:	f04f 33ff 	mov.w	r3, #4294967295
   8675e:	e009      	b.n	86774 <_write+0x5c>
		}
		++nChars;
   86760:	697b      	ldr	r3, [r7, #20]
   86762:	3301      	adds	r3, #1
   86764:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   86766:	687b      	ldr	r3, [r7, #4]
   86768:	3b01      	subs	r3, #1
   8676a:	607b      	str	r3, [r7, #4]
   8676c:	687b      	ldr	r3, [r7, #4]
   8676e:	2b00      	cmp	r3, #0
   86770:	d1e6      	bne.n	86740 <_write+0x28>
	}
	return nChars;
   86772:	697b      	ldr	r3, [r7, #20]
}
   86774:	4618      	mov	r0, r3
   86776:	3718      	adds	r7, #24
   86778:	46bd      	mov	sp, r7
   8677a:	bd80      	pop	{r7, pc}
   8677c:	20001840 	.word	0x20001840
   86780:	20001844 	.word	0x20001844

00086784 <__libc_init_array>:
   86784:	b570      	push	{r4, r5, r6, lr}
   86786:	4e0d      	ldr	r6, [pc, #52]	; (867bc <__libc_init_array+0x38>)
   86788:	4d0d      	ldr	r5, [pc, #52]	; (867c0 <__libc_init_array+0x3c>)
   8678a:	1b76      	subs	r6, r6, r5
   8678c:	10b6      	asrs	r6, r6, #2
   8678e:	d006      	beq.n	8679e <__libc_init_array+0x1a>
   86790:	2400      	movs	r4, #0
   86792:	f855 3b04 	ldr.w	r3, [r5], #4
   86796:	3401      	adds	r4, #1
   86798:	4798      	blx	r3
   8679a:	42a6      	cmp	r6, r4
   8679c:	d1f9      	bne.n	86792 <__libc_init_array+0xe>
   8679e:	4e09      	ldr	r6, [pc, #36]	; (867c4 <__libc_init_array+0x40>)
   867a0:	4d09      	ldr	r5, [pc, #36]	; (867c8 <__libc_init_array+0x44>)
   867a2:	f007 f89d 	bl	8d8e0 <_init>
   867a6:	1b76      	subs	r6, r6, r5
   867a8:	10b6      	asrs	r6, r6, #2
   867aa:	d006      	beq.n	867ba <__libc_init_array+0x36>
   867ac:	2400      	movs	r4, #0
   867ae:	f855 3b04 	ldr.w	r3, [r5], #4
   867b2:	3401      	adds	r4, #1
   867b4:	4798      	blx	r3
   867b6:	42a6      	cmp	r6, r4
   867b8:	d1f9      	bne.n	867ae <__libc_init_array+0x2a>
   867ba:	bd70      	pop	{r4, r5, r6, pc}
   867bc:	0008d8ec 	.word	0x0008d8ec
   867c0:	0008d8ec 	.word	0x0008d8ec
   867c4:	0008d8f4 	.word	0x0008d8f4
   867c8:	0008d8ec 	.word	0x0008d8ec

000867cc <iprintf>:
   867cc:	b40f      	push	{r0, r1, r2, r3}
   867ce:	b500      	push	{lr}
   867d0:	4907      	ldr	r1, [pc, #28]	; (867f0 <iprintf+0x24>)
   867d2:	b083      	sub	sp, #12
   867d4:	ab04      	add	r3, sp, #16
   867d6:	6808      	ldr	r0, [r1, #0]
   867d8:	f853 2b04 	ldr.w	r2, [r3], #4
   867dc:	6881      	ldr	r1, [r0, #8]
   867de:	9301      	str	r3, [sp, #4]
   867e0:	f001 fed4 	bl	8858c <_vfiprintf_r>
   867e4:	b003      	add	sp, #12
   867e6:	f85d eb04 	ldr.w	lr, [sp], #4
   867ea:	b004      	add	sp, #16
   867ec:	4770      	bx	lr
   867ee:	bf00      	nop
   867f0:	20000440 	.word	0x20000440

000867f4 <memcpy>:
   867f4:	4684      	mov	ip, r0
   867f6:	ea41 0300 	orr.w	r3, r1, r0
   867fa:	f013 0303 	ands.w	r3, r3, #3
   867fe:	d149      	bne.n	86894 <memcpy+0xa0>
   86800:	3a40      	subs	r2, #64	; 0x40
   86802:	d323      	bcc.n	8684c <memcpy+0x58>
   86804:	680b      	ldr	r3, [r1, #0]
   86806:	6003      	str	r3, [r0, #0]
   86808:	684b      	ldr	r3, [r1, #4]
   8680a:	6043      	str	r3, [r0, #4]
   8680c:	688b      	ldr	r3, [r1, #8]
   8680e:	6083      	str	r3, [r0, #8]
   86810:	68cb      	ldr	r3, [r1, #12]
   86812:	60c3      	str	r3, [r0, #12]
   86814:	690b      	ldr	r3, [r1, #16]
   86816:	6103      	str	r3, [r0, #16]
   86818:	694b      	ldr	r3, [r1, #20]
   8681a:	6143      	str	r3, [r0, #20]
   8681c:	698b      	ldr	r3, [r1, #24]
   8681e:	6183      	str	r3, [r0, #24]
   86820:	69cb      	ldr	r3, [r1, #28]
   86822:	61c3      	str	r3, [r0, #28]
   86824:	6a0b      	ldr	r3, [r1, #32]
   86826:	6203      	str	r3, [r0, #32]
   86828:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8682a:	6243      	str	r3, [r0, #36]	; 0x24
   8682c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8682e:	6283      	str	r3, [r0, #40]	; 0x28
   86830:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86832:	62c3      	str	r3, [r0, #44]	; 0x2c
   86834:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86836:	6303      	str	r3, [r0, #48]	; 0x30
   86838:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8683a:	6343      	str	r3, [r0, #52]	; 0x34
   8683c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8683e:	6383      	str	r3, [r0, #56]	; 0x38
   86840:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86842:	63c3      	str	r3, [r0, #60]	; 0x3c
   86844:	3040      	adds	r0, #64	; 0x40
   86846:	3140      	adds	r1, #64	; 0x40
   86848:	3a40      	subs	r2, #64	; 0x40
   8684a:	d2db      	bcs.n	86804 <memcpy+0x10>
   8684c:	3230      	adds	r2, #48	; 0x30
   8684e:	d30b      	bcc.n	86868 <memcpy+0x74>
   86850:	680b      	ldr	r3, [r1, #0]
   86852:	6003      	str	r3, [r0, #0]
   86854:	684b      	ldr	r3, [r1, #4]
   86856:	6043      	str	r3, [r0, #4]
   86858:	688b      	ldr	r3, [r1, #8]
   8685a:	6083      	str	r3, [r0, #8]
   8685c:	68cb      	ldr	r3, [r1, #12]
   8685e:	60c3      	str	r3, [r0, #12]
   86860:	3010      	adds	r0, #16
   86862:	3110      	adds	r1, #16
   86864:	3a10      	subs	r2, #16
   86866:	d2f3      	bcs.n	86850 <memcpy+0x5c>
   86868:	320c      	adds	r2, #12
   8686a:	d305      	bcc.n	86878 <memcpy+0x84>
   8686c:	f851 3b04 	ldr.w	r3, [r1], #4
   86870:	f840 3b04 	str.w	r3, [r0], #4
   86874:	3a04      	subs	r2, #4
   86876:	d2f9      	bcs.n	8686c <memcpy+0x78>
   86878:	3204      	adds	r2, #4
   8687a:	d008      	beq.n	8688e <memcpy+0x9a>
   8687c:	07d2      	lsls	r2, r2, #31
   8687e:	bf1c      	itt	ne
   86880:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86884:	f800 3b01 	strbne.w	r3, [r0], #1
   86888:	d301      	bcc.n	8688e <memcpy+0x9a>
   8688a:	880b      	ldrh	r3, [r1, #0]
   8688c:	8003      	strh	r3, [r0, #0]
   8688e:	4660      	mov	r0, ip
   86890:	4770      	bx	lr
   86892:	bf00      	nop
   86894:	2a08      	cmp	r2, #8
   86896:	d313      	bcc.n	868c0 <memcpy+0xcc>
   86898:	078b      	lsls	r3, r1, #30
   8689a:	d0b1      	beq.n	86800 <memcpy+0xc>
   8689c:	f010 0303 	ands.w	r3, r0, #3
   868a0:	d0ae      	beq.n	86800 <memcpy+0xc>
   868a2:	f1c3 0304 	rsb	r3, r3, #4
   868a6:	1ad2      	subs	r2, r2, r3
   868a8:	07db      	lsls	r3, r3, #31
   868aa:	bf1c      	itt	ne
   868ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
   868b0:	f800 3b01 	strbne.w	r3, [r0], #1
   868b4:	d3a4      	bcc.n	86800 <memcpy+0xc>
   868b6:	f831 3b02 	ldrh.w	r3, [r1], #2
   868ba:	f820 3b02 	strh.w	r3, [r0], #2
   868be:	e79f      	b.n	86800 <memcpy+0xc>
   868c0:	3a04      	subs	r2, #4
   868c2:	d3d9      	bcc.n	86878 <memcpy+0x84>
   868c4:	3a01      	subs	r2, #1
   868c6:	f811 3b01 	ldrb.w	r3, [r1], #1
   868ca:	f800 3b01 	strb.w	r3, [r0], #1
   868ce:	d2f9      	bcs.n	868c4 <memcpy+0xd0>
   868d0:	780b      	ldrb	r3, [r1, #0]
   868d2:	7003      	strb	r3, [r0, #0]
   868d4:	784b      	ldrb	r3, [r1, #1]
   868d6:	7043      	strb	r3, [r0, #1]
   868d8:	788b      	ldrb	r3, [r1, #2]
   868da:	7083      	strb	r3, [r0, #2]
   868dc:	4660      	mov	r0, ip
   868de:	4770      	bx	lr

000868e0 <memset>:
   868e0:	b4f0      	push	{r4, r5, r6, r7}
   868e2:	0786      	lsls	r6, r0, #30
   868e4:	d046      	beq.n	86974 <memset+0x94>
   868e6:	1e54      	subs	r4, r2, #1
   868e8:	2a00      	cmp	r2, #0
   868ea:	d03c      	beq.n	86966 <memset+0x86>
   868ec:	4603      	mov	r3, r0
   868ee:	b2ca      	uxtb	r2, r1
   868f0:	e001      	b.n	868f6 <memset+0x16>
   868f2:	3c01      	subs	r4, #1
   868f4:	d337      	bcc.n	86966 <memset+0x86>
   868f6:	f803 2b01 	strb.w	r2, [r3], #1
   868fa:	079d      	lsls	r5, r3, #30
   868fc:	d1f9      	bne.n	868f2 <memset+0x12>
   868fe:	2c03      	cmp	r4, #3
   86900:	d92a      	bls.n	86958 <memset+0x78>
   86902:	b2cd      	uxtb	r5, r1
   86904:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86908:	2c0f      	cmp	r4, #15
   8690a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8690e:	d934      	bls.n	8697a <memset+0x9a>
   86910:	f1a4 0210 	sub.w	r2, r4, #16
   86914:	f022 0c0f 	bic.w	ip, r2, #15
   86918:	f103 0720 	add.w	r7, r3, #32
   8691c:	0916      	lsrs	r6, r2, #4
   8691e:	4467      	add	r7, ip
   86920:	f103 0210 	add.w	r2, r3, #16
   86924:	e942 5504 	strd	r5, r5, [r2, #-16]
   86928:	e942 5502 	strd	r5, r5, [r2, #-8]
   8692c:	3210      	adds	r2, #16
   8692e:	42ba      	cmp	r2, r7
   86930:	d1f8      	bne.n	86924 <memset+0x44>
   86932:	1c72      	adds	r2, r6, #1
   86934:	f014 0f0c 	tst.w	r4, #12
   86938:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   8693c:	f004 060f 	and.w	r6, r4, #15
   86940:	d013      	beq.n	8696a <memset+0x8a>
   86942:	1f33      	subs	r3, r6, #4
   86944:	f023 0303 	bic.w	r3, r3, #3
   86948:	3304      	adds	r3, #4
   8694a:	4413      	add	r3, r2
   8694c:	f842 5b04 	str.w	r5, [r2], #4
   86950:	4293      	cmp	r3, r2
   86952:	d1fb      	bne.n	8694c <memset+0x6c>
   86954:	f006 0403 	and.w	r4, r6, #3
   86958:	b12c      	cbz	r4, 86966 <memset+0x86>
   8695a:	b2ca      	uxtb	r2, r1
   8695c:	441c      	add	r4, r3
   8695e:	f803 2b01 	strb.w	r2, [r3], #1
   86962:	429c      	cmp	r4, r3
   86964:	d1fb      	bne.n	8695e <memset+0x7e>
   86966:	bcf0      	pop	{r4, r5, r6, r7}
   86968:	4770      	bx	lr
   8696a:	4634      	mov	r4, r6
   8696c:	4613      	mov	r3, r2
   8696e:	2c00      	cmp	r4, #0
   86970:	d1f3      	bne.n	8695a <memset+0x7a>
   86972:	e7f8      	b.n	86966 <memset+0x86>
   86974:	4614      	mov	r4, r2
   86976:	4603      	mov	r3, r0
   86978:	e7c1      	b.n	868fe <memset+0x1e>
   8697a:	461a      	mov	r2, r3
   8697c:	4626      	mov	r6, r4
   8697e:	e7e0      	b.n	86942 <memset+0x62>

00086980 <sprintf>:
   86980:	b40e      	push	{r1, r2, r3}
   86982:	4601      	mov	r1, r0
   86984:	b530      	push	{r4, r5, lr}
   86986:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   8698a:	b09c      	sub	sp, #112	; 0x70
   8698c:	ab1f      	add	r3, sp, #124	; 0x7c
   8698e:	480b      	ldr	r0, [pc, #44]	; (869bc <sprintf+0x3c>)
   86990:	f853 2b04 	ldr.w	r2, [r3], #4
   86994:	4d0a      	ldr	r5, [pc, #40]	; (869c0 <sprintf+0x40>)
   86996:	9102      	str	r1, [sp, #8]
   86998:	9106      	str	r1, [sp, #24]
   8699a:	6800      	ldr	r0, [r0, #0]
   8699c:	a902      	add	r1, sp, #8
   8699e:	9301      	str	r3, [sp, #4]
   869a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
   869a4:	9407      	str	r4, [sp, #28]
   869a6:	f000 f80d 	bl	869c4 <_svfprintf_r>
   869aa:	2200      	movs	r2, #0
   869ac:	9b02      	ldr	r3, [sp, #8]
   869ae:	701a      	strb	r2, [r3, #0]
   869b0:	b01c      	add	sp, #112	; 0x70
   869b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   869b6:	b003      	add	sp, #12
   869b8:	4770      	bx	lr
   869ba:	bf00      	nop
   869bc:	20000440 	.word	0x20000440
   869c0:	ffff0208 	.word	0xffff0208

000869c4 <_svfprintf_r>:
   869c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   869c8:	b0d7      	sub	sp, #348	; 0x15c
   869ca:	468b      	mov	fp, r1
   869cc:	4617      	mov	r7, r2
   869ce:	930e      	str	r3, [sp, #56]	; 0x38
   869d0:	4681      	mov	r9, r0
   869d2:	f004 f9df 	bl	8ad94 <_localeconv_r>
   869d6:	6803      	ldr	r3, [r0, #0]
   869d8:	4618      	mov	r0, r3
   869da:	9318      	str	r3, [sp, #96]	; 0x60
   869dc:	f005 fbd4 	bl	8c188 <strlen>
   869e0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   869e4:	9017      	str	r0, [sp, #92]	; 0x5c
   869e6:	061d      	lsls	r5, r3, #24
   869e8:	d504      	bpl.n	869f4 <_svfprintf_r+0x30>
   869ea:	f8db 3010 	ldr.w	r3, [fp, #16]
   869ee:	2b00      	cmp	r3, #0
   869f0:	f000 87df 	beq.w	879b2 <_svfprintf_r+0xfee>
   869f4:	2300      	movs	r3, #0
   869f6:	2100      	movs	r1, #0
   869f8:	2200      	movs	r2, #0
   869fa:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   869fe:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   86a02:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   86a06:	9313      	str	r3, [sp, #76]	; 0x4c
   86a08:	9319      	str	r3, [sp, #100]	; 0x64
   86a0a:	930a      	str	r3, [sp, #40]	; 0x28
   86a0c:	ab2d      	add	r3, sp, #180	; 0xb4
   86a0e:	4698      	mov	r8, r3
   86a10:	932a      	str	r3, [sp, #168]	; 0xa8
   86a12:	783b      	ldrb	r3, [r7, #0]
   86a14:	46da      	mov	sl, fp
   86a16:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   86a1a:	2b00      	cmp	r3, #0
   86a1c:	f000 81a4 	beq.w	86d68 <_svfprintf_r+0x3a4>
   86a20:	463c      	mov	r4, r7
   86a22:	e004      	b.n	86a2e <_svfprintf_r+0x6a>
   86a24:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   86a28:	2b00      	cmp	r3, #0
   86a2a:	f000 80fd 	beq.w	86c28 <_svfprintf_r+0x264>
   86a2e:	2b25      	cmp	r3, #37	; 0x25
   86a30:	d1f8      	bne.n	86a24 <_svfprintf_r+0x60>
   86a32:	1be5      	subs	r5, r4, r7
   86a34:	f040 80fb 	bne.w	86c2e <_svfprintf_r+0x26a>
   86a38:	7823      	ldrb	r3, [r4, #0]
   86a3a:	2b00      	cmp	r3, #0
   86a3c:	f000 8194 	beq.w	86d68 <_svfprintf_r+0x3a4>
   86a40:	2300      	movs	r3, #0
   86a42:	930b      	str	r3, [sp, #44]	; 0x2c
   86a44:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   86a48:	9307      	str	r3, [sp, #28]
   86a4a:	f04f 33ff 	mov.w	r3, #4294967295
   86a4e:	7866      	ldrb	r6, [r4, #1]
   86a50:	f104 0b01 	add.w	fp, r4, #1
   86a54:	2120      	movs	r1, #32
   86a56:	242b      	movs	r4, #43	; 0x2b
   86a58:	9309      	str	r3, [sp, #36]	; 0x24
   86a5a:	f10b 0b01 	add.w	fp, fp, #1
   86a5e:	f1a6 0320 	sub.w	r3, r6, #32
   86a62:	2b5a      	cmp	r3, #90	; 0x5a
   86a64:	f200 80ff 	bhi.w	86c66 <_svfprintf_r+0x2a2>
   86a68:	e8df f013 	tbh	[pc, r3, lsl #1]
   86a6c:	00fd02bc 	.word	0x00fd02bc
   86a70:	02b500fd 	.word	0x02b500fd
   86a74:	00fd00fd 	.word	0x00fd00fd
   86a78:	029100fd 	.word	0x029100fd
   86a7c:	00fd00fd 	.word	0x00fd00fd
   86a80:	02e7006a 	.word	0x02e7006a
   86a84:	023400fd 	.word	0x023400fd
   86a88:	00fd02cd 	.word	0x00fd02cd
   86a8c:	005b02c6 	.word	0x005b02c6
   86a90:	005b005b 	.word	0x005b005b
   86a94:	005b005b 	.word	0x005b005b
   86a98:	005b005b 	.word	0x005b005b
   86a9c:	005b005b 	.word	0x005b005b
   86aa0:	00fd00fd 	.word	0x00fd00fd
   86aa4:	00fd00fd 	.word	0x00fd00fd
   86aa8:	00fd00fd 	.word	0x00fd00fd
   86aac:	019000fd 	.word	0x019000fd
   86ab0:	01f700fd 	.word	0x01f700fd
   86ab4:	0190007c 	.word	0x0190007c
   86ab8:	01900190 	.word	0x01900190
   86abc:	00fd00fd 	.word	0x00fd00fd
   86ac0:	00fd00fd 	.word	0x00fd00fd
   86ac4:	00fd028a 	.word	0x00fd028a
   86ac8:	00a900fd 	.word	0x00a900fd
   86acc:	00fd00fd 	.word	0x00fd00fd
   86ad0:	020b00fd 	.word	0x020b00fd
   86ad4:	023b00fd 	.word	0x023b00fd
   86ad8:	00fd00fd 	.word	0x00fd00fd
   86adc:	00fd0781 	.word	0x00fd0781
   86ae0:	00fd00fd 	.word	0x00fd00fd
   86ae4:	00fd00fd 	.word	0x00fd00fd
   86ae8:	00fd00fd 	.word	0x00fd00fd
   86aec:	019000fd 	.word	0x019000fd
   86af0:	01f700fd 	.word	0x01f700fd
   86af4:	01900080 	.word	0x01900080
   86af8:	01900190 	.word	0x01900190
   86afc:	00800280 	.word	0x00800280
   86b00:	00fd0075 	.word	0x00fd0075
   86b04:	00fd0276 	.word	0x00fd0276
   86b08:	00ad025e 	.word	0x00ad025e
   86b0c:	0075024c 	.word	0x0075024c
   86b10:	020b00fd 	.word	0x020b00fd
   86b14:	075b0072 	.word	0x075b0072
   86b18:	00fd00fd 	.word	0x00fd00fd
   86b1c:	00fd075f 	.word	0x00fd075f
   86b20:	0072      	.short	0x0072
   86b22:	2200      	movs	r2, #0
   86b24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86b28:	f81b 6b01 	ldrb.w	r6, [fp], #1
   86b2c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86b30:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86b34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86b38:	2b09      	cmp	r3, #9
   86b3a:	d9f5      	bls.n	86b28 <_svfprintf_r+0x164>
   86b3c:	920b      	str	r2, [sp, #44]	; 0x2c
   86b3e:	e78e      	b.n	86a5e <_svfprintf_r+0x9a>
   86b40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86b42:	f853 2b04 	ldr.w	r2, [r3], #4
   86b46:	2a00      	cmp	r2, #0
   86b48:	920b      	str	r2, [sp, #44]	; 0x2c
   86b4a:	930e      	str	r3, [sp, #56]	; 0x38
   86b4c:	f2c0 81bf 	blt.w	86ece <_svfprintf_r+0x50a>
   86b50:	f89b 6000 	ldrb.w	r6, [fp]
   86b54:	e781      	b.n	86a5a <_svfprintf_r+0x96>
   86b56:	9b07      	ldr	r3, [sp, #28]
   86b58:	f89b 6000 	ldrb.w	r6, [fp]
   86b5c:	f043 0320 	orr.w	r3, r3, #32
   86b60:	9307      	str	r3, [sp, #28]
   86b62:	e77a      	b.n	86a5a <_svfprintf_r+0x96>
   86b64:	9b07      	ldr	r3, [sp, #28]
   86b66:	f043 0310 	orr.w	r3, r3, #16
   86b6a:	9307      	str	r3, [sp, #28]
   86b6c:	9b07      	ldr	r3, [sp, #28]
   86b6e:	069c      	lsls	r4, r3, #26
   86b70:	f140 8162 	bpl.w	86e38 <_svfprintf_r+0x474>
   86b74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86b76:	3307      	adds	r3, #7
   86b78:	f023 0307 	bic.w	r3, r3, #7
   86b7c:	4619      	mov	r1, r3
   86b7e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86b82:	4614      	mov	r4, r2
   86b84:	461d      	mov	r5, r3
   86b86:	910e      	str	r1, [sp, #56]	; 0x38
   86b88:	2a00      	cmp	r2, #0
   86b8a:	f173 0300 	sbcs.w	r3, r3, #0
   86b8e:	f2c0 85ab 	blt.w	876e8 <_svfprintf_r+0xd24>
   86b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86b94:	3301      	adds	r3, #1
   86b96:	9b07      	ldr	r3, [sp, #28]
   86b98:	f000 8414 	beq.w	873c4 <_svfprintf_r+0xa00>
   86b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86ba0:	ea54 0205 	orrs.w	r2, r4, r5
   86ba4:	9308      	str	r3, [sp, #32]
   86ba6:	f040 840e 	bne.w	873c6 <_svfprintf_r+0xa02>
   86baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86bac:	2a00      	cmp	r2, #0
   86bae:	f040 840f 	bne.w	873d0 <_svfprintf_r+0xa0c>
   86bb2:	9307      	str	r3, [sp, #28]
   86bb4:	2300      	movs	r3, #0
   86bb6:	af56      	add	r7, sp, #344	; 0x158
   86bb8:	9309      	str	r3, [sp, #36]	; 0x24
   86bba:	930c      	str	r3, [sp, #48]	; 0x30
   86bbc:	e26b      	b.n	87096 <_svfprintf_r+0x6d2>
   86bbe:	9b07      	ldr	r3, [sp, #28]
   86bc0:	f043 0310 	orr.w	r3, r3, #16
   86bc4:	9307      	str	r3, [sp, #28]
   86bc6:	9b07      	ldr	r3, [sp, #28]
   86bc8:	069a      	lsls	r2, r3, #26
   86bca:	f140 8126 	bpl.w	86e1a <_svfprintf_r+0x456>
   86bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86bd0:	3307      	adds	r3, #7
   86bd2:	f023 0307 	bic.w	r3, r3, #7
   86bd6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86bda:	930e      	str	r3, [sp, #56]	; 0x38
   86bdc:	9b07      	ldr	r3, [sp, #28]
   86bde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   86be2:	9308      	str	r3, [sp, #32]
   86be4:	2300      	movs	r3, #0
   86be6:	2200      	movs	r2, #0
   86be8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   86bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86bee:	4611      	mov	r1, r2
   86bf0:	3101      	adds	r1, #1
   86bf2:	f000 8231 	beq.w	87058 <_svfprintf_r+0x694>
   86bf6:	9908      	ldr	r1, [sp, #32]
   86bf8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   86bfc:	9107      	str	r1, [sp, #28]
   86bfe:	ea54 0105 	orrs.w	r1, r4, r5
   86c02:	f040 8227 	bne.w	87054 <_svfprintf_r+0x690>
   86c06:	2a00      	cmp	r2, #0
   86c08:	f040 837d 	bne.w	87306 <_svfprintf_r+0x942>
   86c0c:	2b00      	cmp	r3, #0
   86c0e:	d1d1      	bne.n	86bb4 <_svfprintf_r+0x1f0>
   86c10:	9b08      	ldr	r3, [sp, #32]
   86c12:	f013 0301 	ands.w	r3, r3, #1
   86c16:	930c      	str	r3, [sp, #48]	; 0x30
   86c18:	f000 8590 	beq.w	8773c <_svfprintf_r+0xd78>
   86c1c:	2330      	movs	r3, #48	; 0x30
   86c1e:	f20d 1757 	addw	r7, sp, #343	; 0x157
   86c22:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   86c26:	e236      	b.n	87096 <_svfprintf_r+0x6d2>
   86c28:	1be5      	subs	r5, r4, r7
   86c2a:	f000 809d 	beq.w	86d68 <_svfprintf_r+0x3a4>
   86c2e:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   86c32:	3301      	adds	r3, #1
   86c34:	442a      	add	r2, r5
   86c36:	2b07      	cmp	r3, #7
   86c38:	e9c8 7500 	strd	r7, r5, [r8]
   86c3c:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   86c40:	dc06      	bgt.n	86c50 <_svfprintf_r+0x28c>
   86c42:	f108 0808 	add.w	r8, r8, #8
   86c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86c48:	7823      	ldrb	r3, [r4, #0]
   86c4a:	442a      	add	r2, r5
   86c4c:	920a      	str	r2, [sp, #40]	; 0x28
   86c4e:	e6f4      	b.n	86a3a <_svfprintf_r+0x76>
   86c50:	4651      	mov	r1, sl
   86c52:	4648      	mov	r0, r9
   86c54:	aa2a      	add	r2, sp, #168	; 0xa8
   86c56:	f005 faf9 	bl	8c24c <__ssprint_r>
   86c5a:	2800      	cmp	r0, #0
   86c5c:	f041 83ce 	bne.w	883fc <_svfprintf_r+0x1a38>
   86c60:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86c64:	e7ef      	b.n	86c46 <_svfprintf_r+0x282>
   86c66:	2e00      	cmp	r6, #0
   86c68:	d07e      	beq.n	86d68 <_svfprintf_r+0x3a4>
   86c6a:	2300      	movs	r3, #0
   86c6c:	2101      	movs	r1, #1
   86c6e:	461a      	mov	r2, r3
   86c70:	9108      	str	r1, [sp, #32]
   86c72:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   86c76:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   86c7a:	930d      	str	r3, [sp, #52]	; 0x34
   86c7c:	9309      	str	r3, [sp, #36]	; 0x24
   86c7e:	9312      	str	r3, [sp, #72]	; 0x48
   86c80:	9316      	str	r3, [sp, #88]	; 0x58
   86c82:	9310      	str	r3, [sp, #64]	; 0x40
   86c84:	910c      	str	r1, [sp, #48]	; 0x30
   86c86:	af3d      	add	r7, sp, #244	; 0xf4
   86c88:	9b07      	ldr	r3, [sp, #28]
   86c8a:	f013 0302 	ands.w	r3, r3, #2
   86c8e:	d002      	beq.n	86c96 <_svfprintf_r+0x2d2>
   86c90:	9908      	ldr	r1, [sp, #32]
   86c92:	3102      	adds	r1, #2
   86c94:	9108      	str	r1, [sp, #32]
   86c96:	9907      	ldr	r1, [sp, #28]
   86c98:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   86c9c:	910f      	str	r1, [sp, #60]	; 0x3c
   86c9e:	d105      	bne.n	86cac <_svfprintf_r+0x2e8>
   86ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86ca2:	9808      	ldr	r0, [sp, #32]
   86ca4:	1a0d      	subs	r5, r1, r0
   86ca6:	2d00      	cmp	r5, #0
   86ca8:	f300 834b 	bgt.w	87342 <_svfprintf_r+0x97e>
   86cac:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86cae:	b172      	cbz	r2, 86cce <_svfprintf_r+0x30a>
   86cb0:	2001      	movs	r0, #1
   86cb2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86cb4:	4404      	add	r4, r0
   86cb6:	4402      	add	r2, r0
   86cb8:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   86cbc:	2a07      	cmp	r2, #7
   86cbe:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86cc2:	e9c8 1000 	strd	r1, r0, [r8]
   86cc6:	f300 83cd 	bgt.w	87464 <_svfprintf_r+0xaa0>
   86cca:	f108 0808 	add.w	r8, r8, #8
   86cce:	b16b      	cbz	r3, 86cec <_svfprintf_r+0x328>
   86cd0:	2102      	movs	r1, #2
   86cd2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86cd4:	440c      	add	r4, r1
   86cd6:	3301      	adds	r3, #1
   86cd8:	aa23      	add	r2, sp, #140	; 0x8c
   86cda:	2b07      	cmp	r3, #7
   86cdc:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86ce0:	e9c8 2100 	strd	r2, r1, [r8]
   86ce4:	f300 83cc 	bgt.w	87480 <_svfprintf_r+0xabc>
   86ce8:	f108 0808 	add.w	r8, r8, #8
   86cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86cee:	2b80      	cmp	r3, #128	; 0x80
   86cf0:	f000 8234 	beq.w	8715c <_svfprintf_r+0x798>
   86cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86cf8:	1a9d      	subs	r5, r3, r2
   86cfa:	2d00      	cmp	r5, #0
   86cfc:	f300 826e 	bgt.w	871dc <_svfprintf_r+0x818>
   86d00:	9b07      	ldr	r3, [sp, #28]
   86d02:	05d9      	lsls	r1, r3, #23
   86d04:	f100 81d5 	bmi.w	870b2 <_svfprintf_r+0x6ee>
   86d08:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86d0c:	3301      	adds	r3, #1
   86d0e:	4414      	add	r4, r2
   86d10:	2b07      	cmp	r3, #7
   86d12:	e9c8 7200 	strd	r7, r2, [r8]
   86d16:	942c      	str	r4, [sp, #176]	; 0xb0
   86d18:	932b      	str	r3, [sp, #172]	; 0xac
   86d1a:	f300 8397 	bgt.w	8744c <_svfprintf_r+0xa88>
   86d1e:	f108 0808 	add.w	r8, r8, #8
   86d22:	9b07      	ldr	r3, [sp, #28]
   86d24:	0759      	lsls	r1, r3, #29
   86d26:	d505      	bpl.n	86d34 <_svfprintf_r+0x370>
   86d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86d2a:	9a08      	ldr	r2, [sp, #32]
   86d2c:	1a9d      	subs	r5, r3, r2
   86d2e:	2d00      	cmp	r5, #0
   86d30:	f300 83b2 	bgt.w	87498 <_svfprintf_r+0xad4>
   86d34:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   86d38:	9908      	ldr	r1, [sp, #32]
   86d3a:	428a      	cmp	r2, r1
   86d3c:	bfac      	ite	ge
   86d3e:	189b      	addge	r3, r3, r2
   86d40:	185b      	addlt	r3, r3, r1
   86d42:	930a      	str	r3, [sp, #40]	; 0x28
   86d44:	2c00      	cmp	r4, #0
   86d46:	f040 827d 	bne.w	87244 <_svfprintf_r+0x880>
   86d4a:	2300      	movs	r3, #0
   86d4c:	932b      	str	r3, [sp, #172]	; 0xac
   86d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86d50:	b11b      	cbz	r3, 86d5a <_svfprintf_r+0x396>
   86d52:	4648      	mov	r0, r9
   86d54:	990d      	ldr	r1, [sp, #52]	; 0x34
   86d56:	f003 fd77 	bl	8a848 <_free_r>
   86d5a:	465f      	mov	r7, fp
   86d5c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86d60:	783b      	ldrb	r3, [r7, #0]
   86d62:	2b00      	cmp	r3, #0
   86d64:	f47f ae5c 	bne.w	86a20 <_svfprintf_r+0x5c>
   86d68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   86d6a:	46d3      	mov	fp, sl
   86d6c:	2b00      	cmp	r3, #0
   86d6e:	f041 824b 	bne.w	88208 <_svfprintf_r+0x1844>
   86d72:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   86d76:	f013 0f40 	tst.w	r3, #64	; 0x40
   86d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86d7c:	bf18      	it	ne
   86d7e:	f04f 33ff 	movne.w	r3, #4294967295
   86d82:	930a      	str	r3, [sp, #40]	; 0x28
   86d84:	980a      	ldr	r0, [sp, #40]	; 0x28
   86d86:	b057      	add	sp, #348	; 0x15c
   86d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86d8e:	3307      	adds	r3, #7
   86d90:	f023 0307 	bic.w	r3, r3, #7
   86d94:	4619      	mov	r1, r3
   86d96:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86d9a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   86d9e:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   86da2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   86da6:	461d      	mov	r5, r3
   86da8:	4618      	mov	r0, r3
   86daa:	910e      	str	r1, [sp, #56]	; 0x38
   86dac:	f04f 32ff 	mov.w	r2, #4294967295
   86db0:	4621      	mov	r1, r4
   86db2:	4ba4      	ldr	r3, [pc, #656]	; (87044 <_svfprintf_r+0x680>)
   86db4:	f006 f97e 	bl	8d0b4 <__aeabi_dcmpun>
   86db8:	2800      	cmp	r0, #0
   86dba:	f040 84d9 	bne.w	87770 <_svfprintf_r+0xdac>
   86dbe:	4628      	mov	r0, r5
   86dc0:	4621      	mov	r1, r4
   86dc2:	f04f 32ff 	mov.w	r2, #4294967295
   86dc6:	4b9f      	ldr	r3, [pc, #636]	; (87044 <_svfprintf_r+0x680>)
   86dc8:	f006 f956 	bl	8d078 <__aeabi_dcmple>
   86dcc:	2800      	cmp	r0, #0
   86dce:	f040 84cf 	bne.w	87770 <_svfprintf_r+0xdac>
   86dd2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86dd6:	2200      	movs	r2, #0
   86dd8:	2300      	movs	r3, #0
   86dda:	f006 f943 	bl	8d064 <__aeabi_dcmplt>
   86dde:	2800      	cmp	r0, #0
   86de0:	f041 800e 	bne.w	87e00 <_svfprintf_r+0x143c>
   86de4:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86de8:	2003      	movs	r0, #3
   86dea:	2100      	movs	r1, #0
   86dec:	4f96      	ldr	r7, [pc, #600]	; (87048 <_svfprintf_r+0x684>)
   86dee:	4b97      	ldr	r3, [pc, #604]	; (8704c <_svfprintf_r+0x688>)
   86df0:	9008      	str	r0, [sp, #32]
   86df2:	910d      	str	r1, [sp, #52]	; 0x34
   86df4:	2e47      	cmp	r6, #71	; 0x47
   86df6:	bfc8      	it	gt
   86df8:	461f      	movgt	r7, r3
   86dfa:	9c07      	ldr	r4, [sp, #28]
   86dfc:	900c      	str	r0, [sp, #48]	; 0x30
   86dfe:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   86e02:	9407      	str	r4, [sp, #28]
   86e04:	9109      	str	r1, [sp, #36]	; 0x24
   86e06:	9112      	str	r1, [sp, #72]	; 0x48
   86e08:	9116      	str	r1, [sp, #88]	; 0x58
   86e0a:	9110      	str	r1, [sp, #64]	; 0x40
   86e0c:	2a00      	cmp	r2, #0
   86e0e:	f43f af3b 	beq.w	86c88 <_svfprintf_r+0x2c4>
   86e12:	9b08      	ldr	r3, [sp, #32]
   86e14:	3301      	adds	r3, #1
   86e16:	9308      	str	r3, [sp, #32]
   86e18:	e736      	b.n	86c88 <_svfprintf_r+0x2c4>
   86e1a:	9b07      	ldr	r3, [sp, #28]
   86e1c:	06db      	lsls	r3, r3, #27
   86e1e:	f100 849c 	bmi.w	8775a <_svfprintf_r+0xd96>
   86e22:	9b07      	ldr	r3, [sp, #28]
   86e24:	065f      	lsls	r7, r3, #25
   86e26:	f140 87b2 	bpl.w	87d8e <_svfprintf_r+0x13ca>
   86e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86e2c:	2500      	movs	r5, #0
   86e2e:	f853 4b04 	ldr.w	r4, [r3], #4
   86e32:	930e      	str	r3, [sp, #56]	; 0x38
   86e34:	b2a4      	uxth	r4, r4
   86e36:	e6d1      	b.n	86bdc <_svfprintf_r+0x218>
   86e38:	9b07      	ldr	r3, [sp, #28]
   86e3a:	06d8      	lsls	r0, r3, #27
   86e3c:	f100 8568 	bmi.w	87910 <_svfprintf_r+0xf4c>
   86e40:	9b07      	ldr	r3, [sp, #28]
   86e42:	0659      	lsls	r1, r3, #25
   86e44:	f140 87be 	bpl.w	87dc4 <_svfprintf_r+0x1400>
   86e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86e4a:	f853 4b04 	ldr.w	r4, [r3], #4
   86e4e:	b224      	sxth	r4, r4
   86e50:	17e5      	asrs	r5, r4, #31
   86e52:	930e      	str	r3, [sp, #56]	; 0x38
   86e54:	4622      	mov	r2, r4
   86e56:	462b      	mov	r3, r5
   86e58:	e696      	b.n	86b88 <_svfprintf_r+0x1c4>
   86e5a:	2100      	movs	r1, #0
   86e5c:	2401      	movs	r4, #1
   86e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86e60:	460a      	mov	r2, r1
   86e62:	f853 0b04 	ldr.w	r0, [r3], #4
   86e66:	9408      	str	r4, [sp, #32]
   86e68:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   86e6c:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   86e70:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   86e74:	9109      	str	r1, [sp, #36]	; 0x24
   86e76:	9112      	str	r1, [sp, #72]	; 0x48
   86e78:	9116      	str	r1, [sp, #88]	; 0x58
   86e7a:	9110      	str	r1, [sp, #64]	; 0x40
   86e7c:	940c      	str	r4, [sp, #48]	; 0x30
   86e7e:	af3d      	add	r7, sp, #244	; 0xf4
   86e80:	e702      	b.n	86c88 <_svfprintf_r+0x2c4>
   86e82:	2500      	movs	r5, #0
   86e84:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   86e86:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   86e8a:	f854 7b04 	ldr.w	r7, [r4], #4
   86e8e:	2f00      	cmp	r7, #0
   86e90:	f000 859f 	beq.w	879d2 <_svfprintf_r+0x100e>
   86e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86e96:	4613      	mov	r3, r2
   86e98:	3301      	adds	r3, #1
   86e9a:	f000 8770 	beq.w	87d7e <_svfprintf_r+0x13ba>
   86e9e:	4629      	mov	r1, r5
   86ea0:	4638      	mov	r0, r7
   86ea2:	f004 fabf 	bl	8b424 <memchr>
   86ea6:	900d      	str	r0, [sp, #52]	; 0x34
   86ea8:	2800      	cmp	r0, #0
   86eaa:	f001 80b9 	beq.w	88020 <_svfprintf_r+0x165c>
   86eae:	462b      	mov	r3, r5
   86eb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   86eb2:	9509      	str	r5, [sp, #36]	; 0x24
   86eb4:	1bd2      	subs	r2, r2, r7
   86eb6:	920c      	str	r2, [sp, #48]	; 0x30
   86eb8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   86ebc:	9208      	str	r2, [sp, #32]
   86ebe:	940e      	str	r4, [sp, #56]	; 0x38
   86ec0:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   86ec4:	930d      	str	r3, [sp, #52]	; 0x34
   86ec6:	9312      	str	r3, [sp, #72]	; 0x48
   86ec8:	9316      	str	r3, [sp, #88]	; 0x58
   86eca:	9310      	str	r3, [sp, #64]	; 0x40
   86ecc:	e79e      	b.n	86e0c <_svfprintf_r+0x448>
   86ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86ed0:	425b      	negs	r3, r3
   86ed2:	930b      	str	r3, [sp, #44]	; 0x2c
   86ed4:	9b07      	ldr	r3, [sp, #28]
   86ed6:	f89b 6000 	ldrb.w	r6, [fp]
   86eda:	f043 0304 	orr.w	r3, r3, #4
   86ede:	9307      	str	r3, [sp, #28]
   86ee0:	e5bb      	b.n	86a5a <_svfprintf_r+0x96>
   86ee2:	9b07      	ldr	r3, [sp, #28]
   86ee4:	f043 0310 	orr.w	r3, r3, #16
   86ee8:	9308      	str	r3, [sp, #32]
   86eea:	9b08      	ldr	r3, [sp, #32]
   86eec:	069d      	lsls	r5, r3, #26
   86eee:	f140 83ea 	bpl.w	876c6 <_svfprintf_r+0xd02>
   86ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86ef4:	3307      	adds	r3, #7
   86ef6:	f023 0307 	bic.w	r3, r3, #7
   86efa:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86efe:	930e      	str	r3, [sp, #56]	; 0x38
   86f00:	2301      	movs	r3, #1
   86f02:	e670      	b.n	86be6 <_svfprintf_r+0x222>
   86f04:	f647 0230 	movw	r2, #30768	; 0x7830
   86f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86f0a:	9907      	ldr	r1, [sp, #28]
   86f0c:	f853 4b04 	ldr.w	r4, [r3], #4
   86f10:	f041 0102 	orr.w	r1, r1, #2
   86f14:	930e      	str	r3, [sp, #56]	; 0x38
   86f16:	4b4e      	ldr	r3, [pc, #312]	; (87050 <_svfprintf_r+0x68c>)
   86f18:	2500      	movs	r5, #0
   86f1a:	9319      	str	r3, [sp, #100]	; 0x64
   86f1c:	2678      	movs	r6, #120	; 0x78
   86f1e:	2302      	movs	r3, #2
   86f20:	9108      	str	r1, [sp, #32]
   86f22:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   86f26:	e65e      	b.n	86be6 <_svfprintf_r+0x222>
   86f28:	9b07      	ldr	r3, [sp, #28]
   86f2a:	069d      	lsls	r5, r3, #26
   86f2c:	f100 8408 	bmi.w	87740 <_svfprintf_r+0xd7c>
   86f30:	9b07      	ldr	r3, [sp, #28]
   86f32:	06dc      	lsls	r4, r3, #27
   86f34:	f100 86e1 	bmi.w	87cfa <_svfprintf_r+0x1336>
   86f38:	9b07      	ldr	r3, [sp, #28]
   86f3a:	0658      	lsls	r0, r3, #25
   86f3c:	f100 8795 	bmi.w	87e6a <_svfprintf_r+0x14a6>
   86f40:	9b07      	ldr	r3, [sp, #28]
   86f42:	0599      	lsls	r1, r3, #22
   86f44:	f140 86d9 	bpl.w	87cfa <_svfprintf_r+0x1336>
   86f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86f4a:	990a      	ldr	r1, [sp, #40]	; 0x28
   86f4c:	f853 2b04 	ldr.w	r2, [r3], #4
   86f50:	465f      	mov	r7, fp
   86f52:	7011      	strb	r1, [r2, #0]
   86f54:	930e      	str	r3, [sp, #56]	; 0x38
   86f56:	e703      	b.n	86d60 <_svfprintf_r+0x39c>
   86f58:	f89b 6000 	ldrb.w	r6, [fp]
   86f5c:	9b07      	ldr	r3, [sp, #28]
   86f5e:	2e6c      	cmp	r6, #108	; 0x6c
   86f60:	f000 8508 	beq.w	87974 <_svfprintf_r+0xfb0>
   86f64:	f043 0310 	orr.w	r3, r3, #16
   86f68:	9307      	str	r3, [sp, #28]
   86f6a:	e576      	b.n	86a5a <_svfprintf_r+0x96>
   86f6c:	f89b 6000 	ldrb.w	r6, [fp]
   86f70:	9b07      	ldr	r3, [sp, #28]
   86f72:	2e68      	cmp	r6, #104	; 0x68
   86f74:	f000 8507 	beq.w	87986 <_svfprintf_r+0xfc2>
   86f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86f7c:	9307      	str	r3, [sp, #28]
   86f7e:	e56c      	b.n	86a5a <_svfprintf_r+0x96>
   86f80:	9b07      	ldr	r3, [sp, #28]
   86f82:	f89b 6000 	ldrb.w	r6, [fp]
   86f86:	f043 0308 	orr.w	r3, r3, #8
   86f8a:	9307      	str	r3, [sp, #28]
   86f8c:	e565      	b.n	86a5a <_svfprintf_r+0x96>
   86f8e:	4648      	mov	r0, r9
   86f90:	f003 ff00 	bl	8ad94 <_localeconv_r>
   86f94:	6843      	ldr	r3, [r0, #4]
   86f96:	4618      	mov	r0, r3
   86f98:	931c      	str	r3, [sp, #112]	; 0x70
   86f9a:	f005 f8f5 	bl	8c188 <strlen>
   86f9e:	4603      	mov	r3, r0
   86fa0:	4648      	mov	r0, r9
   86fa2:	461d      	mov	r5, r3
   86fa4:	931d      	str	r3, [sp, #116]	; 0x74
   86fa6:	f003 fef5 	bl	8ad94 <_localeconv_r>
   86faa:	6882      	ldr	r2, [r0, #8]
   86fac:	2120      	movs	r1, #32
   86fae:	921a      	str	r2, [sp, #104]	; 0x68
   86fb0:	2d00      	cmp	r5, #0
   86fb2:	f43f adcd 	beq.w	86b50 <_svfprintf_r+0x18c>
   86fb6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86fb8:	2b00      	cmp	r3, #0
   86fba:	f43f adc9 	beq.w	86b50 <_svfprintf_r+0x18c>
   86fbe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86fc0:	781b      	ldrb	r3, [r3, #0]
   86fc2:	2b00      	cmp	r3, #0
   86fc4:	f43f adc4 	beq.w	86b50 <_svfprintf_r+0x18c>
   86fc8:	9b07      	ldr	r3, [sp, #28]
   86fca:	f89b 6000 	ldrb.w	r6, [fp]
   86fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   86fd2:	9307      	str	r3, [sp, #28]
   86fd4:	e541      	b.n	86a5a <_svfprintf_r+0x96>
   86fd6:	9b07      	ldr	r3, [sp, #28]
   86fd8:	f89b 6000 	ldrb.w	r6, [fp]
   86fdc:	f043 0301 	orr.w	r3, r3, #1
   86fe0:	9307      	str	r3, [sp, #28]
   86fe2:	e53a      	b.n	86a5a <_svfprintf_r+0x96>
   86fe4:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   86fe8:	2b00      	cmp	r3, #0
   86fea:	f47f adb1 	bne.w	86b50 <_svfprintf_r+0x18c>
   86fee:	f89b 6000 	ldrb.w	r6, [fp]
   86ff2:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   86ff6:	e530      	b.n	86a5a <_svfprintf_r+0x96>
   86ff8:	9b07      	ldr	r3, [sp, #28]
   86ffa:	f89b 6000 	ldrb.w	r6, [fp]
   86ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   87002:	9307      	str	r3, [sp, #28]
   87004:	e529      	b.n	86a5a <_svfprintf_r+0x96>
   87006:	465a      	mov	r2, fp
   87008:	f812 6b01 	ldrb.w	r6, [r2], #1
   8700c:	2e2a      	cmp	r6, #42	; 0x2a
   8700e:	f001 8251 	beq.w	884b4 <_svfprintf_r+0x1af0>
   87012:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87016:	2b09      	cmp	r3, #9
   87018:	4693      	mov	fp, r2
   8701a:	bf98      	it	ls
   8701c:	2200      	movls	r2, #0
   8701e:	f201 80ef 	bhi.w	88200 <_svfprintf_r+0x183c>
   87022:	f81b 6b01 	ldrb.w	r6, [fp], #1
   87026:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8702a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8702e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87032:	2b09      	cmp	r3, #9
   87034:	d9f5      	bls.n	87022 <_svfprintf_r+0x65e>
   87036:	9209      	str	r2, [sp, #36]	; 0x24
   87038:	e511      	b.n	86a5e <_svfprintf_r+0x9a>
   8703a:	f89b 6000 	ldrb.w	r6, [fp]
   8703e:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   87042:	e50a      	b.n	86a5a <_svfprintf_r+0x96>
   87044:	7fefffff 	.word	0x7fefffff
   87048:	0008d4ec 	.word	0x0008d4ec
   8704c:	0008d4f0 	.word	0x0008d4f0
   87050:	0008d4fc 	.word	0x0008d4fc
   87054:	9a07      	ldr	r2, [sp, #28]
   87056:	9208      	str	r2, [sp, #32]
   87058:	2b01      	cmp	r3, #1
   8705a:	f000 81b4 	beq.w	873c6 <_svfprintf_r+0xa02>
   8705e:	2b02      	cmp	r3, #2
   87060:	f000 8159 	beq.w	87316 <_svfprintf_r+0x952>
   87064:	af56      	add	r7, sp, #344	; 0x158
   87066:	08e2      	lsrs	r2, r4, #3
   87068:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   8706c:	08e9      	lsrs	r1, r5, #3
   8706e:	f004 0307 	and.w	r3, r4, #7
   87072:	460d      	mov	r5, r1
   87074:	4614      	mov	r4, r2
   87076:	3330      	adds	r3, #48	; 0x30
   87078:	ea54 0105 	orrs.w	r1, r4, r5
   8707c:	463a      	mov	r2, r7
   8707e:	f807 3d01 	strb.w	r3, [r7, #-1]!
   87082:	d1f0      	bne.n	87066 <_svfprintf_r+0x6a2>
   87084:	9908      	ldr	r1, [sp, #32]
   87086:	4608      	mov	r0, r1
   87088:	07c0      	lsls	r0, r0, #31
   8708a:	f100 82b8 	bmi.w	875fe <_svfprintf_r+0xc3a>
   8708e:	ab56      	add	r3, sp, #344	; 0x158
   87090:	1bdb      	subs	r3, r3, r7
   87092:	9107      	str	r1, [sp, #28]
   87094:	930c      	str	r3, [sp, #48]	; 0x30
   87096:	2300      	movs	r3, #0
   87098:	9909      	ldr	r1, [sp, #36]	; 0x24
   8709a:	930d      	str	r3, [sp, #52]	; 0x34
   8709c:	9312      	str	r3, [sp, #72]	; 0x48
   8709e:	9316      	str	r3, [sp, #88]	; 0x58
   870a0:	9310      	str	r3, [sp, #64]	; 0x40
   870a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   870a4:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   870a8:	428b      	cmp	r3, r1
   870aa:	bfb8      	it	lt
   870ac:	460b      	movlt	r3, r1
   870ae:	9308      	str	r3, [sp, #32]
   870b0:	e6ac      	b.n	86e0c <_svfprintf_r+0x448>
   870b2:	2e65      	cmp	r6, #101	; 0x65
   870b4:	f340 80d8 	ble.w	87268 <_svfprintf_r+0x8a4>
   870b8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   870bc:	2200      	movs	r2, #0
   870be:	2300      	movs	r3, #0
   870c0:	f005 ffc6 	bl	8d050 <__aeabi_dcmpeq>
   870c4:	2800      	cmp	r0, #0
   870c6:	f000 821e 	beq.w	87506 <_svfprintf_r+0xb42>
   870ca:	2101      	movs	r1, #1
   870cc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   870ce:	4ac5      	ldr	r2, [pc, #788]	; (873e4 <_svfprintf_r+0xa20>)
   870d0:	440b      	add	r3, r1
   870d2:	440c      	add	r4, r1
   870d4:	2b07      	cmp	r3, #7
   870d6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   870da:	e9c8 2100 	strd	r2, r1, [r8]
   870de:	f300 85bb 	bgt.w	87c58 <_svfprintf_r+0x1294>
   870e2:	f108 0808 	add.w	r8, r8, #8
   870e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   870e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   870ea:	4293      	cmp	r3, r2
   870ec:	f280 8321 	bge.w	87732 <_svfprintf_r+0xd6e>
   870f0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   870f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   870f4:	3301      	adds	r3, #1
   870f6:	9918      	ldr	r1, [sp, #96]	; 0x60
   870f8:	4414      	add	r4, r2
   870fa:	2b07      	cmp	r3, #7
   870fc:	e9c8 1200 	strd	r1, r2, [r8]
   87100:	942c      	str	r4, [sp, #176]	; 0xb0
   87102:	932b      	str	r3, [sp, #172]	; 0xac
   87104:	f300 8448 	bgt.w	87998 <_svfprintf_r+0xfd4>
   87108:	f108 0808 	add.w	r8, r8, #8
   8710c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8710e:	1e5d      	subs	r5, r3, #1
   87110:	2d00      	cmp	r5, #0
   87112:	f77f ae06 	ble.w	86d22 <_svfprintf_r+0x35e>
   87116:	2d10      	cmp	r5, #16
   87118:	f340 85c7 	ble.w	87caa <_svfprintf_r+0x12e6>
   8711c:	4fb2      	ldr	r7, [pc, #712]	; (873e8 <_svfprintf_r+0xa24>)
   8711e:	2610      	movs	r6, #16
   87120:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87122:	970f      	str	r7, [sp, #60]	; 0x3c
   87124:	e005      	b.n	87132 <_svfprintf_r+0x76e>
   87126:	f108 0808 	add.w	r8, r8, #8
   8712a:	3d10      	subs	r5, #16
   8712c:	2d10      	cmp	r5, #16
   8712e:	f340 85bf 	ble.w	87cb0 <_svfprintf_r+0x12ec>
   87132:	3301      	adds	r3, #1
   87134:	3410      	adds	r4, #16
   87136:	2b07      	cmp	r3, #7
   87138:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8713c:	e9c8 7600 	strd	r7, r6, [r8]
   87140:	ddf1      	ble.n	87126 <_svfprintf_r+0x762>
   87142:	4651      	mov	r1, sl
   87144:	4648      	mov	r0, r9
   87146:	aa2a      	add	r2, sp, #168	; 0xa8
   87148:	f005 f880 	bl	8c24c <__ssprint_r>
   8714c:	2800      	cmp	r0, #0
   8714e:	f040 8081 	bne.w	87254 <_svfprintf_r+0x890>
   87152:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87156:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8715a:	e7e6      	b.n	8712a <_svfprintf_r+0x766>
   8715c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8715e:	9a08      	ldr	r2, [sp, #32]
   87160:	1a9d      	subs	r5, r3, r2
   87162:	2d00      	cmp	r5, #0
   87164:	f77f adc6 	ble.w	86cf4 <_svfprintf_r+0x330>
   87168:	2d10      	cmp	r5, #16
   8716a:	f341 8069 	ble.w	88240 <_svfprintf_r+0x187c>
   8716e:	489e      	ldr	r0, [pc, #632]	; (873e8 <_svfprintf_r+0xa24>)
   87170:	4621      	mov	r1, r4
   87172:	2310      	movs	r3, #16
   87174:	4604      	mov	r4, r0
   87176:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87178:	900f      	str	r0, [sp, #60]	; 0x3c
   8717a:	e004      	b.n	87186 <_svfprintf_r+0x7c2>
   8717c:	3d10      	subs	r5, #16
   8717e:	2d10      	cmp	r5, #16
   87180:	f108 0808 	add.w	r8, r8, #8
   87184:	dd17      	ble.n	871b6 <_svfprintf_r+0x7f2>
   87186:	3201      	adds	r2, #1
   87188:	3110      	adds	r1, #16
   8718a:	2a07      	cmp	r2, #7
   8718c:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   87190:	e9c8 4300 	strd	r4, r3, [r8]
   87194:	ddf2      	ble.n	8717c <_svfprintf_r+0x7b8>
   87196:	4651      	mov	r1, sl
   87198:	4648      	mov	r0, r9
   8719a:	aa2a      	add	r2, sp, #168	; 0xa8
   8719c:	f005 f856 	bl	8c24c <__ssprint_r>
   871a0:	2800      	cmp	r0, #0
   871a2:	d157      	bne.n	87254 <_svfprintf_r+0x890>
   871a4:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   871a8:	3d10      	subs	r5, #16
   871aa:	2d10      	cmp	r5, #16
   871ac:	f04f 0310 	mov.w	r3, #16
   871b0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   871b4:	dce7      	bgt.n	87186 <_svfprintf_r+0x7c2>
   871b6:	460c      	mov	r4, r1
   871b8:	3201      	adds	r2, #1
   871ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   871bc:	442c      	add	r4, r5
   871be:	2a07      	cmp	r2, #7
   871c0:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   871c4:	e9c8 3500 	strd	r3, r5, [r8]
   871c8:	f300 858a 	bgt.w	87ce0 <_svfprintf_r+0x131c>
   871cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   871ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   871d0:	f108 0808 	add.w	r8, r8, #8
   871d4:	1a9d      	subs	r5, r3, r2
   871d6:	2d00      	cmp	r5, #0
   871d8:	f77f ad92 	ble.w	86d00 <_svfprintf_r+0x33c>
   871dc:	2d10      	cmp	r5, #16
   871de:	f340 860a 	ble.w	87df6 <_svfprintf_r+0x1432>
   871e2:	4881      	ldr	r0, [pc, #516]	; (873e8 <_svfprintf_r+0xa24>)
   871e4:	4621      	mov	r1, r4
   871e6:	2310      	movs	r3, #16
   871e8:	4604      	mov	r4, r0
   871ea:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   871ec:	900f      	str	r0, [sp, #60]	; 0x3c
   871ee:	e004      	b.n	871fa <_svfprintf_r+0x836>
   871f0:	3d10      	subs	r5, #16
   871f2:	2d10      	cmp	r5, #16
   871f4:	f108 0808 	add.w	r8, r8, #8
   871f8:	dd16      	ble.n	87228 <_svfprintf_r+0x864>
   871fa:	3201      	adds	r2, #1
   871fc:	3110      	adds	r1, #16
   871fe:	2a07      	cmp	r2, #7
   87200:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   87204:	e9c8 4300 	strd	r4, r3, [r8]
   87208:	ddf2      	ble.n	871f0 <_svfprintf_r+0x82c>
   8720a:	4651      	mov	r1, sl
   8720c:	4648      	mov	r0, r9
   8720e:	aa2a      	add	r2, sp, #168	; 0xa8
   87210:	f005 f81c 	bl	8c24c <__ssprint_r>
   87214:	b9f0      	cbnz	r0, 87254 <_svfprintf_r+0x890>
   87216:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8721a:	3d10      	subs	r5, #16
   8721c:	2d10      	cmp	r5, #16
   8721e:	f04f 0310 	mov.w	r3, #16
   87222:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87226:	dce8      	bgt.n	871fa <_svfprintf_r+0x836>
   87228:	460c      	mov	r4, r1
   8722a:	3201      	adds	r2, #1
   8722c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8722e:	442c      	add	r4, r5
   87230:	2a07      	cmp	r2, #7
   87232:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   87236:	e9c8 3500 	strd	r3, r5, [r8]
   8723a:	f300 8237 	bgt.w	876ac <_svfprintf_r+0xce8>
   8723e:	f108 0808 	add.w	r8, r8, #8
   87242:	e55d      	b.n	86d00 <_svfprintf_r+0x33c>
   87244:	4651      	mov	r1, sl
   87246:	4648      	mov	r0, r9
   87248:	aa2a      	add	r2, sp, #168	; 0xa8
   8724a:	f004 ffff 	bl	8c24c <__ssprint_r>
   8724e:	2800      	cmp	r0, #0
   87250:	f43f ad7b 	beq.w	86d4a <_svfprintf_r+0x386>
   87254:	46d3      	mov	fp, sl
   87256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   87258:	2b00      	cmp	r3, #0
   8725a:	f43f ad8a 	beq.w	86d72 <_svfprintf_r+0x3ae>
   8725e:	4648      	mov	r0, r9
   87260:	990d      	ldr	r1, [sp, #52]	; 0x34
   87262:	f003 faf1 	bl	8a848 <_free_r>
   87266:	e584      	b.n	86d72 <_svfprintf_r+0x3ae>
   87268:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8726a:	2b01      	cmp	r3, #1
   8726c:	f340 81d5 	ble.w	8761a <_svfprintf_r+0xc56>
   87270:	2301      	movs	r3, #1
   87272:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87274:	441c      	add	r4, r3
   87276:	441d      	add	r5, r3
   87278:	2d07      	cmp	r5, #7
   8727a:	942c      	str	r4, [sp, #176]	; 0xb0
   8727c:	f8c8 7000 	str.w	r7, [r8]
   87280:	952b      	str	r5, [sp, #172]	; 0xac
   87282:	f8c8 3004 	str.w	r3, [r8, #4]
   87286:	f300 823a 	bgt.w	876fe <_svfprintf_r+0xd3a>
   8728a:	f108 0808 	add.w	r8, r8, #8
   8728e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87290:	3501      	adds	r5, #1
   87292:	9a18      	ldr	r2, [sp, #96]	; 0x60
   87294:	441c      	add	r4, r3
   87296:	2d07      	cmp	r5, #7
   87298:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8729c:	e9c8 2300 	strd	r2, r3, [r8]
   872a0:	f300 823a 	bgt.w	87718 <_svfprintf_r+0xd54>
   872a4:	f108 0808 	add.w	r8, r8, #8
   872a8:	2300      	movs	r3, #0
   872aa:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   872ae:	2200      	movs	r2, #0
   872b0:	f005 fece 	bl	8d050 <__aeabi_dcmpeq>
   872b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   872b6:	2800      	cmp	r0, #0
   872b8:	f040 81cd 	bne.w	87656 <_svfprintf_r+0xc92>
   872bc:	3b01      	subs	r3, #1
   872be:	3501      	adds	r5, #1
   872c0:	3701      	adds	r7, #1
   872c2:	441c      	add	r4, r3
   872c4:	2d07      	cmp	r5, #7
   872c6:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   872ca:	f8c8 7000 	str.w	r7, [r8]
   872ce:	f8c8 3004 	str.w	r3, [r8, #4]
   872d2:	f300 84dc 	bgt.w	87c8e <_svfprintf_r+0x12ca>
   872d6:	f108 0808 	add.w	r8, r8, #8
   872da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   872dc:	3501      	adds	r5, #1
   872de:	4414      	add	r4, r2
   872e0:	ab26      	add	r3, sp, #152	; 0x98
   872e2:	2d07      	cmp	r5, #7
   872e4:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   872e8:	e9c8 3200 	strd	r3, r2, [r8]
   872ec:	f77f ad17 	ble.w	86d1e <_svfprintf_r+0x35a>
   872f0:	4651      	mov	r1, sl
   872f2:	4648      	mov	r0, r9
   872f4:	aa2a      	add	r2, sp, #168	; 0xa8
   872f6:	f004 ffa9 	bl	8c24c <__ssprint_r>
   872fa:	2800      	cmp	r0, #0
   872fc:	d1aa      	bne.n	87254 <_svfprintf_r+0x890>
   872fe:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87300:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87304:	e50d      	b.n	86d22 <_svfprintf_r+0x35e>
   87306:	2b01      	cmp	r3, #1
   87308:	f000 87ca 	beq.w	882a0 <_svfprintf_r+0x18dc>
   8730c:	2b02      	cmp	r3, #2
   8730e:	9b07      	ldr	r3, [sp, #28]
   87310:	9308      	str	r3, [sp, #32]
   87312:	f47f aea7 	bne.w	87064 <_svfprintf_r+0x6a0>
   87316:	9819      	ldr	r0, [sp, #100]	; 0x64
   87318:	af56      	add	r7, sp, #344	; 0x158
   8731a:	0923      	lsrs	r3, r4, #4
   8731c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   87320:	0929      	lsrs	r1, r5, #4
   87322:	f004 020f 	and.w	r2, r4, #15
   87326:	460d      	mov	r5, r1
   87328:	461c      	mov	r4, r3
   8732a:	5c83      	ldrb	r3, [r0, r2]
   8732c:	f807 3d01 	strb.w	r3, [r7, #-1]!
   87330:	ea54 0305 	orrs.w	r3, r4, r5
   87334:	d1f1      	bne.n	8731a <_svfprintf_r+0x956>
   87336:	9b08      	ldr	r3, [sp, #32]
   87338:	9307      	str	r3, [sp, #28]
   8733a:	ab56      	add	r3, sp, #344	; 0x158
   8733c:	1bdb      	subs	r3, r3, r7
   8733e:	930c      	str	r3, [sp, #48]	; 0x30
   87340:	e6a9      	b.n	87096 <_svfprintf_r+0x6d2>
   87342:	2d10      	cmp	r5, #16
   87344:	f340 8668 	ble.w	88018 <_svfprintf_r+0x1654>
   87348:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8734c:	931e      	str	r3, [sp, #120]	; 0x78
   8734e:	460b      	mov	r3, r1
   87350:	4639      	mov	r1, r7
   87352:	2410      	movs	r4, #16
   87354:	4637      	mov	r7, r6
   87356:	4656      	mov	r6, sl
   87358:	46ca      	mov	sl, r9
   8735a:	4689      	mov	r9, r1
   8735c:	e004      	b.n	87368 <_svfprintf_r+0x9a4>
   8735e:	3d10      	subs	r5, #16
   87360:	2d10      	cmp	r5, #16
   87362:	f108 0808 	add.w	r8, r8, #8
   87366:	dd17      	ble.n	87398 <_svfprintf_r+0x9d4>
   87368:	3201      	adds	r2, #1
   8736a:	4920      	ldr	r1, [pc, #128]	; (873ec <_svfprintf_r+0xa28>)
   8736c:	3310      	adds	r3, #16
   8736e:	2a07      	cmp	r2, #7
   87370:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   87374:	e9c8 1400 	strd	r1, r4, [r8]
   87378:	ddf1      	ble.n	8735e <_svfprintf_r+0x99a>
   8737a:	4631      	mov	r1, r6
   8737c:	4650      	mov	r0, sl
   8737e:	aa2a      	add	r2, sp, #168	; 0xa8
   87380:	f004 ff64 	bl	8c24c <__ssprint_r>
   87384:	2800      	cmp	r0, #0
   87386:	f040 8458 	bne.w	87c3a <_svfprintf_r+0x1276>
   8738a:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   8738e:	3d10      	subs	r5, #16
   87390:	2d10      	cmp	r5, #16
   87392:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87396:	dce7      	bgt.n	87368 <_svfprintf_r+0x9a4>
   87398:	4648      	mov	r0, r9
   8739a:	46d1      	mov	r9, sl
   8739c:	46b2      	mov	sl, r6
   8739e:	463e      	mov	r6, r7
   873a0:	4607      	mov	r7, r0
   873a2:	4619      	mov	r1, r3
   873a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   873a6:	194c      	adds	r4, r1, r5
   873a8:	3201      	adds	r2, #1
   873aa:	4910      	ldr	r1, [pc, #64]	; (873ec <_svfprintf_r+0xa28>)
   873ac:	2a07      	cmp	r2, #7
   873ae:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   873b2:	e9c8 1500 	strd	r1, r5, [r8]
   873b6:	f300 841f 	bgt.w	87bf8 <_svfprintf_r+0x1234>
   873ba:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   873be:	f108 0808 	add.w	r8, r8, #8
   873c2:	e474      	b.n	86cae <_svfprintf_r+0x2ea>
   873c4:	9308      	str	r3, [sp, #32]
   873c6:	2d00      	cmp	r5, #0
   873c8:	bf08      	it	eq
   873ca:	2c0a      	cmpeq	r4, #10
   873cc:	f080 83d0 	bcs.w	87b70 <_svfprintf_r+0x11ac>
   873d0:	9b08      	ldr	r3, [sp, #32]
   873d2:	3430      	adds	r4, #48	; 0x30
   873d4:	9307      	str	r3, [sp, #28]
   873d6:	2301      	movs	r3, #1
   873d8:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   873dc:	930c      	str	r3, [sp, #48]	; 0x30
   873de:	f20d 1757 	addw	r7, sp, #343	; 0x157
   873e2:	e658      	b.n	87096 <_svfprintf_r+0x6d2>
   873e4:	0008d52c 	.word	0x0008d52c
   873e8:	0008d540 	.word	0x0008d540
   873ec:	0008d530 	.word	0x0008d530
   873f0:	4651      	mov	r1, sl
   873f2:	4648      	mov	r0, r9
   873f4:	aa2a      	add	r2, sp, #168	; 0xa8
   873f6:	f004 ff29 	bl	8c24c <__ssprint_r>
   873fa:	2800      	cmp	r0, #0
   873fc:	f47f af2a 	bne.w	87254 <_svfprintf_r+0x890>
   87400:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87402:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87404:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87408:	2a00      	cmp	r2, #0
   8740a:	f040 847f 	bne.w	87d0c <_svfprintf_r+0x1348>
   8740e:	9b07      	ldr	r3, [sp, #28]
   87410:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87412:	f003 0301 	and.w	r3, r3, #1
   87416:	4313      	orrs	r3, r2
   87418:	f43f ac83 	beq.w	86d22 <_svfprintf_r+0x35e>
   8741c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8741e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87420:	3301      	adds	r3, #1
   87422:	9918      	ldr	r1, [sp, #96]	; 0x60
   87424:	4414      	add	r4, r2
   87426:	2b07      	cmp	r3, #7
   87428:	e9c8 1200 	strd	r1, r2, [r8]
   8742c:	942c      	str	r4, [sp, #176]	; 0xb0
   8742e:	932b      	str	r3, [sp, #172]	; 0xac
   87430:	f300 8524 	bgt.w	87e7c <_svfprintf_r+0x14b8>
   87434:	f108 0808 	add.w	r8, r8, #8
   87438:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8743a:	3301      	adds	r3, #1
   8743c:	4414      	add	r4, r2
   8743e:	2b07      	cmp	r3, #7
   87440:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87444:	e9c8 7200 	strd	r7, r2, [r8]
   87448:	f77f ac69 	ble.w	86d1e <_svfprintf_r+0x35a>
   8744c:	4651      	mov	r1, sl
   8744e:	4648      	mov	r0, r9
   87450:	aa2a      	add	r2, sp, #168	; 0xa8
   87452:	f004 fefb 	bl	8c24c <__ssprint_r>
   87456:	2800      	cmp	r0, #0
   87458:	f47f aefc 	bne.w	87254 <_svfprintf_r+0x890>
   8745c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8745e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87462:	e45e      	b.n	86d22 <_svfprintf_r+0x35e>
   87464:	4651      	mov	r1, sl
   87466:	4648      	mov	r0, r9
   87468:	aa2a      	add	r2, sp, #168	; 0xa8
   8746a:	931e      	str	r3, [sp, #120]	; 0x78
   8746c:	f004 feee 	bl	8c24c <__ssprint_r>
   87470:	2800      	cmp	r0, #0
   87472:	f47f aeef 	bne.w	87254 <_svfprintf_r+0x890>
   87476:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87478:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8747a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8747e:	e426      	b.n	86cce <_svfprintf_r+0x30a>
   87480:	4651      	mov	r1, sl
   87482:	4648      	mov	r0, r9
   87484:	aa2a      	add	r2, sp, #168	; 0xa8
   87486:	f004 fee1 	bl	8c24c <__ssprint_r>
   8748a:	2800      	cmp	r0, #0
   8748c:	f47f aee2 	bne.w	87254 <_svfprintf_r+0x890>
   87490:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87492:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87496:	e429      	b.n	86cec <_svfprintf_r+0x328>
   87498:	2d10      	cmp	r5, #16
   8749a:	f340 86be 	ble.w	8821a <_svfprintf_r+0x1856>
   8749e:	2610      	movs	r6, #16
   874a0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   874a2:	e004      	b.n	874ae <_svfprintf_r+0xaea>
   874a4:	3d10      	subs	r5, #16
   874a6:	2d10      	cmp	r5, #16
   874a8:	f108 0808 	add.w	r8, r8, #8
   874ac:	dd17      	ble.n	874de <_svfprintf_r+0xb1a>
   874ae:	3301      	adds	r3, #1
   874b0:	4aad      	ldr	r2, [pc, #692]	; (87768 <_svfprintf_r+0xda4>)
   874b2:	3410      	adds	r4, #16
   874b4:	2b07      	cmp	r3, #7
   874b6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   874ba:	e9c8 2600 	strd	r2, r6, [r8]
   874be:	ddf1      	ble.n	874a4 <_svfprintf_r+0xae0>
   874c0:	4651      	mov	r1, sl
   874c2:	4648      	mov	r0, r9
   874c4:	aa2a      	add	r2, sp, #168	; 0xa8
   874c6:	f004 fec1 	bl	8c24c <__ssprint_r>
   874ca:	2800      	cmp	r0, #0
   874cc:	f47f aec2 	bne.w	87254 <_svfprintf_r+0x890>
   874d0:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   874d4:	3d10      	subs	r5, #16
   874d6:	2d10      	cmp	r5, #16
   874d8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   874dc:	dce7      	bgt.n	874ae <_svfprintf_r+0xaea>
   874de:	3301      	adds	r3, #1
   874e0:	4aa1      	ldr	r2, [pc, #644]	; (87768 <_svfprintf_r+0xda4>)
   874e2:	442c      	add	r4, r5
   874e4:	2b07      	cmp	r3, #7
   874e6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   874ea:	e9c8 2500 	strd	r2, r5, [r8]
   874ee:	f77f ac21 	ble.w	86d34 <_svfprintf_r+0x370>
   874f2:	4651      	mov	r1, sl
   874f4:	4648      	mov	r0, r9
   874f6:	aa2a      	add	r2, sp, #168	; 0xa8
   874f8:	f004 fea8 	bl	8c24c <__ssprint_r>
   874fc:	2800      	cmp	r0, #0
   874fe:	f47f aea9 	bne.w	87254 <_svfprintf_r+0x890>
   87502:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87504:	e416      	b.n	86d34 <_svfprintf_r+0x370>
   87506:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87508:	2a00      	cmp	r2, #0
   8750a:	f340 8386 	ble.w	87c1a <_svfprintf_r+0x1256>
   8750e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87510:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87512:	4293      	cmp	r3, r2
   87514:	bfa8      	it	ge
   87516:	4613      	movge	r3, r2
   87518:	2b00      	cmp	r3, #0
   8751a:	461d      	mov	r5, r3
   8751c:	dd0b      	ble.n	87536 <_svfprintf_r+0xb72>
   8751e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87520:	442c      	add	r4, r5
   87522:	3301      	adds	r3, #1
   87524:	2b07      	cmp	r3, #7
   87526:	e9c8 7500 	strd	r7, r5, [r8]
   8752a:	942c      	str	r4, [sp, #176]	; 0xb0
   8752c:	932b      	str	r3, [sp, #172]	; 0xac
   8752e:	f300 851e 	bgt.w	87f6e <_svfprintf_r+0x15aa>
   87532:	f108 0808 	add.w	r8, r8, #8
   87536:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87538:	2d00      	cmp	r5, #0
   8753a:	bfa8      	it	ge
   8753c:	1b5b      	subge	r3, r3, r5
   8753e:	2b00      	cmp	r3, #0
   87540:	461d      	mov	r5, r3
   87542:	f300 8256 	bgt.w	879f2 <_svfprintf_r+0x102e>
   87546:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87548:	443b      	add	r3, r7
   8754a:	461e      	mov	r6, r3
   8754c:	9b07      	ldr	r3, [sp, #28]
   8754e:	055b      	lsls	r3, r3, #21
   87550:	f100 8277 	bmi.w	87a42 <_svfprintf_r+0x107e>
   87554:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87556:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87558:	4293      	cmp	r3, r2
   8755a:	db03      	blt.n	87564 <_svfprintf_r+0xba0>
   8755c:	9a07      	ldr	r2, [sp, #28]
   8755e:	07d5      	lsls	r5, r2, #31
   87560:	f140 847a 	bpl.w	87e58 <_svfprintf_r+0x1494>
   87564:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87566:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87568:	3201      	adds	r2, #1
   8756a:	9818      	ldr	r0, [sp, #96]	; 0x60
   8756c:	440c      	add	r4, r1
   8756e:	2a07      	cmp	r2, #7
   87570:	e9c8 0100 	strd	r0, r1, [r8]
   87574:	942c      	str	r4, [sp, #176]	; 0xb0
   87576:	922b      	str	r2, [sp, #172]	; 0xac
   87578:	f300 8506 	bgt.w	87f88 <_svfprintf_r+0x15c4>
   8757c:	f108 0808 	add.w	r8, r8, #8
   87580:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87582:	18bd      	adds	r5, r7, r2
   87584:	1bad      	subs	r5, r5, r6
   87586:	1ad3      	subs	r3, r2, r3
   87588:	429d      	cmp	r5, r3
   8758a:	bfa8      	it	ge
   8758c:	461d      	movge	r5, r3
   8758e:	2d00      	cmp	r5, #0
   87590:	dd0b      	ble.n	875aa <_svfprintf_r+0xbe6>
   87592:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87594:	442c      	add	r4, r5
   87596:	3201      	adds	r2, #1
   87598:	2a07      	cmp	r2, #7
   8759a:	e9c8 6500 	strd	r6, r5, [r8]
   8759e:	942c      	str	r4, [sp, #176]	; 0xb0
   875a0:	922b      	str	r2, [sp, #172]	; 0xac
   875a2:	f300 855f 	bgt.w	88064 <_svfprintf_r+0x16a0>
   875a6:	f108 0808 	add.w	r8, r8, #8
   875aa:	2d00      	cmp	r5, #0
   875ac:	bfb4      	ite	lt
   875ae:	461d      	movlt	r5, r3
   875b0:	1b5d      	subge	r5, r3, r5
   875b2:	2d00      	cmp	r5, #0
   875b4:	f77f abb5 	ble.w	86d22 <_svfprintf_r+0x35e>
   875b8:	2d10      	cmp	r5, #16
   875ba:	f340 8376 	ble.w	87caa <_svfprintf_r+0x12e6>
   875be:	4f6b      	ldr	r7, [pc, #428]	; (8776c <_svfprintf_r+0xda8>)
   875c0:	2610      	movs	r6, #16
   875c2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   875c4:	970f      	str	r7, [sp, #60]	; 0x3c
   875c6:	e005      	b.n	875d4 <_svfprintf_r+0xc10>
   875c8:	f108 0808 	add.w	r8, r8, #8
   875cc:	3d10      	subs	r5, #16
   875ce:	2d10      	cmp	r5, #16
   875d0:	f340 836e 	ble.w	87cb0 <_svfprintf_r+0x12ec>
   875d4:	3301      	adds	r3, #1
   875d6:	3410      	adds	r4, #16
   875d8:	2b07      	cmp	r3, #7
   875da:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   875de:	e9c8 7600 	strd	r7, r6, [r8]
   875e2:	ddf1      	ble.n	875c8 <_svfprintf_r+0xc04>
   875e4:	4651      	mov	r1, sl
   875e6:	4648      	mov	r0, r9
   875e8:	aa2a      	add	r2, sp, #168	; 0xa8
   875ea:	f004 fe2f 	bl	8c24c <__ssprint_r>
   875ee:	2800      	cmp	r0, #0
   875f0:	f47f ae30 	bne.w	87254 <_svfprintf_r+0x890>
   875f4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   875f8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   875fc:	e7e6      	b.n	875cc <_svfprintf_r+0xc08>
   875fe:	2b30      	cmp	r3, #48	; 0x30
   87600:	f43f ae99 	beq.w	87336 <_svfprintf_r+0x972>
   87604:	2330      	movs	r3, #48	; 0x30
   87606:	3a02      	subs	r2, #2
   87608:	f807 3c01 	strb.w	r3, [r7, #-1]
   8760c:	9908      	ldr	r1, [sp, #32]
   8760e:	ab56      	add	r3, sp, #344	; 0x158
   87610:	1a9b      	subs	r3, r3, r2
   87612:	4617      	mov	r7, r2
   87614:	9107      	str	r1, [sp, #28]
   87616:	930c      	str	r3, [sp, #48]	; 0x30
   87618:	e53d      	b.n	87096 <_svfprintf_r+0x6d2>
   8761a:	9b07      	ldr	r3, [sp, #28]
   8761c:	07d8      	lsls	r0, r3, #31
   8761e:	f53f ae27 	bmi.w	87270 <_svfprintf_r+0x8ac>
   87622:	2301      	movs	r3, #1
   87624:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87626:	441c      	add	r4, r3
   87628:	441d      	add	r5, r3
   8762a:	2d07      	cmp	r5, #7
   8762c:	942c      	str	r4, [sp, #176]	; 0xb0
   8762e:	f8c8 7000 	str.w	r7, [r8]
   87632:	952b      	str	r5, [sp, #172]	; 0xac
   87634:	f8c8 3004 	str.w	r3, [r8, #4]
   87638:	f77f ae4d 	ble.w	872d6 <_svfprintf_r+0x912>
   8763c:	4651      	mov	r1, sl
   8763e:	4648      	mov	r0, r9
   87640:	aa2a      	add	r2, sp, #168	; 0xa8
   87642:	f004 fe03 	bl	8c24c <__ssprint_r>
   87646:	2800      	cmp	r0, #0
   87648:	f47f ae04 	bne.w	87254 <_svfprintf_r+0x890>
   8764c:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87650:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87654:	e641      	b.n	872da <_svfprintf_r+0x916>
   87656:	1e5e      	subs	r6, r3, #1
   87658:	2e00      	cmp	r6, #0
   8765a:	f77f ae3e 	ble.w	872da <_svfprintf_r+0x916>
   8765e:	2e10      	cmp	r6, #16
   87660:	f340 871e 	ble.w	884a0 <_svfprintf_r+0x1adc>
   87664:	4b41      	ldr	r3, [pc, #260]	; (8776c <_svfprintf_r+0xda8>)
   87666:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   8766a:	2710      	movs	r7, #16
   8766c:	46d3      	mov	fp, sl
   8766e:	930f      	str	r3, [sp, #60]	; 0x3c
   87670:	46ca      	mov	sl, r9
   87672:	4699      	mov	r9, r3
   87674:	e005      	b.n	87682 <_svfprintf_r+0xcbe>
   87676:	f108 0808 	add.w	r8, r8, #8
   8767a:	3e10      	subs	r6, #16
   8767c:	2e10      	cmp	r6, #16
   8767e:	f340 82f8 	ble.w	87c72 <_svfprintf_r+0x12ae>
   87682:	3501      	adds	r5, #1
   87684:	3410      	adds	r4, #16
   87686:	2d07      	cmp	r5, #7
   87688:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8768c:	e9c8 9700 	strd	r9, r7, [r8]
   87690:	ddf1      	ble.n	87676 <_svfprintf_r+0xcb2>
   87692:	4659      	mov	r1, fp
   87694:	4650      	mov	r0, sl
   87696:	aa2a      	add	r2, sp, #168	; 0xa8
   87698:	f004 fdd8 	bl	8c24c <__ssprint_r>
   8769c:	2800      	cmp	r0, #0
   8769e:	f040 85cc 	bne.w	8823a <_svfprintf_r+0x1876>
   876a2:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   876a6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   876aa:	e7e6      	b.n	8767a <_svfprintf_r+0xcb6>
   876ac:	4651      	mov	r1, sl
   876ae:	4648      	mov	r0, r9
   876b0:	aa2a      	add	r2, sp, #168	; 0xa8
   876b2:	f004 fdcb 	bl	8c24c <__ssprint_r>
   876b6:	2800      	cmp	r0, #0
   876b8:	f47f adcc 	bne.w	87254 <_svfprintf_r+0x890>
   876bc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   876be:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   876c2:	f7ff bb1d 	b.w	86d00 <_svfprintf_r+0x33c>
   876c6:	9b08      	ldr	r3, [sp, #32]
   876c8:	06dc      	lsls	r4, r3, #27
   876ca:	f100 8119 	bmi.w	87900 <_svfprintf_r+0xf3c>
   876ce:	9b08      	ldr	r3, [sp, #32]
   876d0:	0658      	lsls	r0, r3, #25
   876d2:	f140 8368 	bpl.w	87da6 <_svfprintf_r+0x13e2>
   876d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   876d8:	2301      	movs	r3, #1
   876da:	f852 4b04 	ldr.w	r4, [r2], #4
   876de:	2500      	movs	r5, #0
   876e0:	920e      	str	r2, [sp, #56]	; 0x38
   876e2:	b2a4      	uxth	r4, r4
   876e4:	f7ff ba7f 	b.w	86be6 <_svfprintf_r+0x222>
   876e8:	232d      	movs	r3, #45	; 0x2d
   876ea:	9a07      	ldr	r2, [sp, #28]
   876ec:	4264      	negs	r4, r4
   876ee:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   876f2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   876f6:	2301      	movs	r3, #1
   876f8:	9208      	str	r2, [sp, #32]
   876fa:	f7ff ba77 	b.w	86bec <_svfprintf_r+0x228>
   876fe:	4651      	mov	r1, sl
   87700:	4648      	mov	r0, r9
   87702:	aa2a      	add	r2, sp, #168	; 0xa8
   87704:	f004 fda2 	bl	8c24c <__ssprint_r>
   87708:	2800      	cmp	r0, #0
   8770a:	f47f ada3 	bne.w	87254 <_svfprintf_r+0x890>
   8770e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87712:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87716:	e5ba      	b.n	8728e <_svfprintf_r+0x8ca>
   87718:	4651      	mov	r1, sl
   8771a:	4648      	mov	r0, r9
   8771c:	aa2a      	add	r2, sp, #168	; 0xa8
   8771e:	f004 fd95 	bl	8c24c <__ssprint_r>
   87722:	2800      	cmp	r0, #0
   87724:	f47f ad96 	bne.w	87254 <_svfprintf_r+0x890>
   87728:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   8772c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87730:	e5ba      	b.n	872a8 <_svfprintf_r+0x8e4>
   87732:	9b07      	ldr	r3, [sp, #28]
   87734:	07da      	lsls	r2, r3, #31
   87736:	f57f aaf4 	bpl.w	86d22 <_svfprintf_r+0x35e>
   8773a:	e4d9      	b.n	870f0 <_svfprintf_r+0x72c>
   8773c:	af56      	add	r7, sp, #344	; 0x158
   8773e:	e4aa      	b.n	87096 <_svfprintf_r+0x6d2>
   87740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87742:	465f      	mov	r7, fp
   87744:	f853 1b04 	ldr.w	r1, [r3], #4
   87748:	930e      	str	r3, [sp, #56]	; 0x38
   8774a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8774c:	17dd      	asrs	r5, r3, #31
   8774e:	461a      	mov	r2, r3
   87750:	462b      	mov	r3, r5
   87752:	e9c1 2300 	strd	r2, r3, [r1]
   87756:	f7ff bb03 	b.w	86d60 <_svfprintf_r+0x39c>
   8775a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8775c:	2500      	movs	r5, #0
   8775e:	f853 4b04 	ldr.w	r4, [r3], #4
   87762:	930e      	str	r3, [sp, #56]	; 0x38
   87764:	f7ff ba3a 	b.w	86bdc <_svfprintf_r+0x218>
   87768:	0008d530 	.word	0x0008d530
   8776c:	0008d540 	.word	0x0008d540
   87770:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87774:	460b      	mov	r3, r1
   87776:	4602      	mov	r2, r0
   87778:	f005 fc9c 	bl	8d0b4 <__aeabi_dcmpun>
   8777c:	4601      	mov	r1, r0
   8777e:	2800      	cmp	r0, #0
   87780:	f040 8643 	bne.w	8840a <_svfprintf_r+0x1a46>
   87784:	2e61      	cmp	r6, #97	; 0x61
   87786:	f000 8586 	beq.w	88296 <_svfprintf_r+0x18d2>
   8778a:	2e41      	cmp	r6, #65	; 0x41
   8778c:	f000 847a 	beq.w	88084 <_svfprintf_r+0x16c0>
   87790:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87792:	f026 0520 	bic.w	r5, r6, #32
   87796:	1c5a      	adds	r2, r3, #1
   87798:	9508      	str	r5, [sp, #32]
   8779a:	f000 837d 	beq.w	87e98 <_svfprintf_r+0x14d4>
   8779e:	2d47      	cmp	r5, #71	; 0x47
   877a0:	f000 859e 	beq.w	882e0 <_svfprintf_r+0x191c>
   877a4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   877a8:	9b07      	ldr	r3, [sp, #28]
   877aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   877ae:	9312      	str	r3, [sp, #72]	; 0x48
   877b0:	460b      	mov	r3, r1
   877b2:	2b00      	cmp	r3, #0
   877b4:	f2c0 85ba 	blt.w	8832c <_svfprintf_r+0x1968>
   877b8:	2200      	movs	r2, #0
   877ba:	930f      	str	r3, [sp, #60]	; 0x3c
   877bc:	921e      	str	r2, [sp, #120]	; 0x78
   877be:	920d      	str	r2, [sp, #52]	; 0x34
   877c0:	900c      	str	r0, [sp, #48]	; 0x30
   877c2:	2d46      	cmp	r5, #70	; 0x46
   877c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   877c6:	f000 8407 	beq.w	87fd8 <_svfprintf_r+0x1614>
   877ca:	2d45      	cmp	r5, #69	; 0x45
   877cc:	f04f 0002 	mov.w	r0, #2
   877d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   877d2:	f040 83e7 	bne.w	87fa4 <_svfprintf_r+0x15e0>
   877d6:	9909      	ldr	r1, [sp, #36]	; 0x24
   877d8:	9000      	str	r0, [sp, #0]
   877da:	1c4c      	adds	r4, r1, #1
   877dc:	a928      	add	r1, sp, #160	; 0xa0
   877de:	a825      	add	r0, sp, #148	; 0x94
   877e0:	9104      	str	r1, [sp, #16]
   877e2:	a924      	add	r1, sp, #144	; 0x90
   877e4:	e9cd 1002 	strd	r1, r0, [sp, #8]
   877e8:	9401      	str	r4, [sp, #4]
   877ea:	4648      	mov	r0, r9
   877ec:	f001 feb0 	bl	89550 <_dtoa_r>
   877f0:	4607      	mov	r7, r0
   877f2:	4404      	add	r4, r0
   877f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   877f6:	9d07      	ldr	r5, [sp, #28]
   877f8:	9307      	str	r3, [sp, #28]
   877fa:	2200      	movs	r2, #0
   877fc:	2300      	movs	r3, #0
   877fe:	980c      	ldr	r0, [sp, #48]	; 0x30
   87800:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87802:	f005 fc25 	bl	8d050 <__aeabi_dcmpeq>
   87806:	2800      	cmp	r0, #0
   87808:	f000 8398 	beq.w	87f3c <_svfprintf_r+0x1578>
   8780c:	4623      	mov	r3, r4
   8780e:	1bdb      	subs	r3, r3, r7
   87810:	9313      	str	r3, [sp, #76]	; 0x4c
   87812:	9b08      	ldr	r3, [sp, #32]
   87814:	2b47      	cmp	r3, #71	; 0x47
   87816:	f000 835e 	beq.w	87ed6 <_svfprintf_r+0x1512>
   8781a:	9b08      	ldr	r3, [sp, #32]
   8781c:	2b46      	cmp	r3, #70	; 0x46
   8781e:	f000 840b 	beq.w	88038 <_svfprintf_r+0x1674>
   87822:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87824:	9310      	str	r3, [sp, #64]	; 0x40
   87826:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87828:	9a08      	ldr	r2, [sp, #32]
   8782a:	3b01      	subs	r3, #1
   8782c:	2a41      	cmp	r2, #65	; 0x41
   8782e:	9324      	str	r3, [sp, #144]	; 0x90
   87830:	f000 85ad 	beq.w	8838e <_svfprintf_r+0x19ca>
   87834:	2100      	movs	r1, #0
   87836:	b2f2      	uxtb	r2, r6
   87838:	2b00      	cmp	r3, #0
   8783a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   8783e:	bfb6      	itet	lt
   87840:	222d      	movlt	r2, #45	; 0x2d
   87842:	222b      	movge	r2, #43	; 0x2b
   87844:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   87846:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   8784a:	bfb8      	it	lt
   8784c:	f1c3 0301 	rsblt	r3, r3, #1
   87850:	2b09      	cmp	r3, #9
   87852:	f340 85a2 	ble.w	8839a <_svfprintf_r+0x19d6>
   87856:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   8785a:	4672      	mov	r2, lr
   8785c:	469c      	mov	ip, r3
   8785e:	4cbf      	ldr	r4, [pc, #764]	; (87b5c <_svfprintf_r+0x1198>)
   87860:	4660      	mov	r0, ip
   87862:	4611      	mov	r1, r2
   87864:	fb84 230c 	smull	r2, r3, r4, ip
   87868:	ea4f 72ec 	mov.w	r2, ip, asr #31
   8786c:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   87870:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   87874:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   87878:	3330      	adds	r3, #48	; 0x30
   8787a:	2863      	cmp	r0, #99	; 0x63
   8787c:	4694      	mov	ip, r2
   8787e:	f801 3c01 	strb.w	r3, [r1, #-1]
   87882:	f101 32ff 	add.w	r2, r1, #4294967295
   87886:	dceb      	bgt.n	87860 <_svfprintf_r+0xe9c>
   87888:	4663      	mov	r3, ip
   8788a:	3330      	adds	r3, #48	; 0x30
   8788c:	b2d8      	uxtb	r0, r3
   8788e:	1e8b      	subs	r3, r1, #2
   87890:	459e      	cmp	lr, r3
   87892:	f802 0c01 	strb.w	r0, [r2, #-1]
   87896:	f240 862c 	bls.w	884f2 <_svfprintf_r+0x1b2e>
   8789a:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   8789e:	e001      	b.n	878a4 <_svfprintf_r+0xee0>
   878a0:	f812 0b01 	ldrb.w	r0, [r2], #1
   878a4:	4596      	cmp	lr, r2
   878a6:	f803 0b01 	strb.w	r0, [r3], #1
   878aa:	d1f9      	bne.n	878a0 <_svfprintf_r+0xedc>
   878ac:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   878b0:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   878b4:	1a5b      	subs	r3, r3, r1
   878b6:	4413      	add	r3, r2
   878b8:	aa26      	add	r2, sp, #152	; 0x98
   878ba:	1a9b      	subs	r3, r3, r2
   878bc:	931b      	str	r3, [sp, #108]	; 0x6c
   878be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   878c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   878c2:	2b01      	cmp	r3, #1
   878c4:	441a      	add	r2, r3
   878c6:	920c      	str	r2, [sp, #48]	; 0x30
   878c8:	f340 85cc 	ble.w	88464 <_svfprintf_r+0x1aa0>
   878cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   878ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   878d0:	4413      	add	r3, r2
   878d2:	930c      	str	r3, [sp, #48]	; 0x30
   878d4:	2300      	movs	r3, #0
   878d6:	9312      	str	r3, [sp, #72]	; 0x48
   878d8:	9316      	str	r3, [sp, #88]	; 0x58
   878da:	9310      	str	r3, [sp, #64]	; 0x40
   878dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   878de:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   878e2:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   878e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   878ea:	9207      	str	r2, [sp, #28]
   878ec:	9308      	str	r3, [sp, #32]
   878ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   878f0:	2b00      	cmp	r3, #0
   878f2:	f040 8317 	bne.w	87f24 <_svfprintf_r+0x1560>
   878f6:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   878fa:	9309      	str	r3, [sp, #36]	; 0x24
   878fc:	f7ff ba86 	b.w	86e0c <_svfprintf_r+0x448>
   87900:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87902:	2301      	movs	r3, #1
   87904:	f852 4b04 	ldr.w	r4, [r2], #4
   87908:	2500      	movs	r5, #0
   8790a:	920e      	str	r2, [sp, #56]	; 0x38
   8790c:	f7ff b96b 	b.w	86be6 <_svfprintf_r+0x222>
   87910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87912:	f853 4b04 	ldr.w	r4, [r3], #4
   87916:	17e5      	asrs	r5, r4, #31
   87918:	930e      	str	r3, [sp, #56]	; 0x38
   8791a:	4622      	mov	r2, r4
   8791c:	462b      	mov	r3, r5
   8791e:	f7ff b933 	b.w	86b88 <_svfprintf_r+0x1c4>
   87922:	9b07      	ldr	r3, [sp, #28]
   87924:	9308      	str	r3, [sp, #32]
   87926:	f7ff bae0 	b.w	86eea <_svfprintf_r+0x526>
   8792a:	4b8d      	ldr	r3, [pc, #564]	; (87b60 <_svfprintf_r+0x119c>)
   8792c:	9319      	str	r3, [sp, #100]	; 0x64
   8792e:	9b07      	ldr	r3, [sp, #28]
   87930:	0699      	lsls	r1, r3, #26
   87932:	f140 80fe 	bpl.w	87b32 <_svfprintf_r+0x116e>
   87936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87938:	3307      	adds	r3, #7
   8793a:	f023 0307 	bic.w	r3, r3, #7
   8793e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87942:	930e      	str	r3, [sp, #56]	; 0x38
   87944:	9a07      	ldr	r2, [sp, #28]
   87946:	07d7      	lsls	r7, r2, #31
   87948:	d50a      	bpl.n	87960 <_svfprintf_r+0xf9c>
   8794a:	ea54 0305 	orrs.w	r3, r4, r5
   8794e:	d007      	beq.n	87960 <_svfprintf_r+0xf9c>
   87950:	2330      	movs	r3, #48	; 0x30
   87952:	f042 0202 	orr.w	r2, r2, #2
   87956:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   8795a:	9207      	str	r2, [sp, #28]
   8795c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87960:	9a07      	ldr	r2, [sp, #28]
   87962:	2302      	movs	r3, #2
   87964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   87968:	9208      	str	r2, [sp, #32]
   8796a:	f7ff b93c 	b.w	86be6 <_svfprintf_r+0x222>
   8796e:	4b7d      	ldr	r3, [pc, #500]	; (87b64 <_svfprintf_r+0x11a0>)
   87970:	9319      	str	r3, [sp, #100]	; 0x64
   87972:	e7dc      	b.n	8792e <_svfprintf_r+0xf6a>
   87974:	f043 0320 	orr.w	r3, r3, #32
   87978:	f89b 6001 	ldrb.w	r6, [fp, #1]
   8797c:	9307      	str	r3, [sp, #28]
   8797e:	f10b 0b01 	add.w	fp, fp, #1
   87982:	f7ff b86a 	b.w	86a5a <_svfprintf_r+0x96>
   87986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8798a:	f89b 6001 	ldrb.w	r6, [fp, #1]
   8798e:	9307      	str	r3, [sp, #28]
   87990:	f10b 0b01 	add.w	fp, fp, #1
   87994:	f7ff b861 	b.w	86a5a <_svfprintf_r+0x96>
   87998:	4651      	mov	r1, sl
   8799a:	4648      	mov	r0, r9
   8799c:	aa2a      	add	r2, sp, #168	; 0xa8
   8799e:	f004 fc55 	bl	8c24c <__ssprint_r>
   879a2:	2800      	cmp	r0, #0
   879a4:	f47f ac56 	bne.w	87254 <_svfprintf_r+0x890>
   879a8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   879aa:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   879ae:	f7ff bbad 	b.w	8710c <_svfprintf_r+0x748>
   879b2:	2140      	movs	r1, #64	; 0x40
   879b4:	4648      	mov	r0, r9
   879b6:	f003 fa71 	bl	8ae9c <_malloc_r>
   879ba:	f8cb 0000 	str.w	r0, [fp]
   879be:	f8cb 0010 	str.w	r0, [fp, #16]
   879c2:	2800      	cmp	r0, #0
   879c4:	f000 858d 	beq.w	884e2 <_svfprintf_r+0x1b1e>
   879c8:	2340      	movs	r3, #64	; 0x40
   879ca:	f8cb 3014 	str.w	r3, [fp, #20]
   879ce:	f7ff b811 	b.w	869f4 <_svfprintf_r+0x30>
   879d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   879d4:	463a      	mov	r2, r7
   879d6:	2b06      	cmp	r3, #6
   879d8:	bf28      	it	cs
   879da:	2306      	movcs	r3, #6
   879dc:	9709      	str	r7, [sp, #36]	; 0x24
   879de:	9712      	str	r7, [sp, #72]	; 0x48
   879e0:	9716      	str	r7, [sp, #88]	; 0x58
   879e2:	9710      	str	r7, [sp, #64]	; 0x40
   879e4:	970d      	str	r7, [sp, #52]	; 0x34
   879e6:	9308      	str	r3, [sp, #32]
   879e8:	4f5f      	ldr	r7, [pc, #380]	; (87b68 <_svfprintf_r+0x11a4>)
   879ea:	940e      	str	r4, [sp, #56]	; 0x38
   879ec:	930c      	str	r3, [sp, #48]	; 0x30
   879ee:	f7ff ba0d 	b.w	86e0c <_svfprintf_r+0x448>
   879f2:	2b10      	cmp	r3, #16
   879f4:	f340 8558 	ble.w	884a8 <_svfprintf_r+0x1ae4>
   879f8:	4651      	mov	r1, sl
   879fa:	4a5c      	ldr	r2, [pc, #368]	; (87b6c <_svfprintf_r+0x11a8>)
   879fc:	46ca      	mov	sl, r9
   879fe:	9709      	str	r7, [sp, #36]	; 0x24
   87a00:	2610      	movs	r6, #16
   87a02:	4617      	mov	r7, r2
   87a04:	4689      	mov	r9, r1
   87a06:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87a08:	920f      	str	r2, [sp, #60]	; 0x3c
   87a0a:	e005      	b.n	87a18 <_svfprintf_r+0x1054>
   87a0c:	f108 0808 	add.w	r8, r8, #8
   87a10:	3d10      	subs	r5, #16
   87a12:	2d10      	cmp	r5, #16
   87a14:	f340 81fa 	ble.w	87e0c <_svfprintf_r+0x1448>
   87a18:	3301      	adds	r3, #1
   87a1a:	3410      	adds	r4, #16
   87a1c:	2b07      	cmp	r3, #7
   87a1e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87a22:	e9c8 7600 	strd	r7, r6, [r8]
   87a26:	ddf1      	ble.n	87a0c <_svfprintf_r+0x1048>
   87a28:	4649      	mov	r1, r9
   87a2a:	4650      	mov	r0, sl
   87a2c:	aa2a      	add	r2, sp, #168	; 0xa8
   87a2e:	f004 fc0d 	bl	8c24c <__ssprint_r>
   87a32:	2800      	cmp	r0, #0
   87a34:	f040 83fd 	bne.w	88232 <_svfprintf_r+0x186e>
   87a38:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87a3c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87a40:	e7e6      	b.n	87a10 <_svfprintf_r+0x104c>
   87a42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87a44:	4642      	mov	r2, r8
   87a46:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   87a4a:	18fb      	adds	r3, r7, r3
   87a4c:	9309      	str	r3, [sp, #36]	; 0x24
   87a4e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   87a52:	970f      	str	r7, [sp, #60]	; 0x3c
   87a54:	4620      	mov	r0, r4
   87a56:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   87a5a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   87a5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87a5e:	f1b8 0f00 	cmp.w	r8, #0
   87a62:	d02d      	beq.n	87ac0 <_svfprintf_r+0x10fc>
   87a64:	bb7b      	cbnz	r3, 87ac6 <_svfprintf_r+0x1102>
   87a66:	3f01      	subs	r7, #1
   87a68:	f108 38ff 	add.w	r8, r8, #4294967295
   87a6c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87a6e:	991c      	ldr	r1, [sp, #112]	; 0x70
   87a70:	3301      	adds	r3, #1
   87a72:	4458      	add	r0, fp
   87a74:	2b07      	cmp	r3, #7
   87a76:	e9c2 1b00 	strd	r1, fp, [r2]
   87a7a:	902c      	str	r0, [sp, #176]	; 0xb0
   87a7c:	932b      	str	r3, [sp, #172]	; 0xac
   87a7e:	dc62      	bgt.n	87b46 <_svfprintf_r+0x1182>
   87a80:	3208      	adds	r2, #8
   87a82:	9909      	ldr	r1, [sp, #36]	; 0x24
   87a84:	783b      	ldrb	r3, [r7, #0]
   87a86:	1b8d      	subs	r5, r1, r6
   87a88:	429d      	cmp	r5, r3
   87a8a:	bfa8      	it	ge
   87a8c:	461d      	movge	r5, r3
   87a8e:	2d00      	cmp	r5, #0
   87a90:	dd0b      	ble.n	87aaa <_svfprintf_r+0x10e6>
   87a92:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87a94:	4428      	add	r0, r5
   87a96:	3301      	adds	r3, #1
   87a98:	2b07      	cmp	r3, #7
   87a9a:	e9c2 6500 	strd	r6, r5, [r2]
   87a9e:	902c      	str	r0, [sp, #176]	; 0xb0
   87aa0:	932b      	str	r3, [sp, #172]	; 0xac
   87aa2:	f300 8111 	bgt.w	87cc8 <_svfprintf_r+0x1304>
   87aa6:	783b      	ldrb	r3, [r7, #0]
   87aa8:	3208      	adds	r2, #8
   87aaa:	2d00      	cmp	r5, #0
   87aac:	bfb4      	ite	lt
   87aae:	461d      	movlt	r5, r3
   87ab0:	1b5d      	subge	r5, r3, r5
   87ab2:	2d00      	cmp	r5, #0
   87ab4:	dc0b      	bgt.n	87ace <_svfprintf_r+0x110a>
   87ab6:	441e      	add	r6, r3
   87ab8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87aba:	f1b8 0f00 	cmp.w	r8, #0
   87abe:	d1d1      	bne.n	87a64 <_svfprintf_r+0x10a0>
   87ac0:	2b00      	cmp	r3, #0
   87ac2:	f000 81f9 	beq.w	87eb8 <_svfprintf_r+0x14f4>
   87ac6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87ac8:	3b01      	subs	r3, #1
   87aca:	9312      	str	r3, [sp, #72]	; 0x48
   87acc:	e7ce      	b.n	87a6c <_svfprintf_r+0x10a8>
   87ace:	2d10      	cmp	r5, #16
   87ad0:	f340 84c5 	ble.w	8845e <_svfprintf_r+0x1a9a>
   87ad4:	992b      	ldr	r1, [sp, #172]	; 0xac
   87ad6:	2410      	movs	r4, #16
   87ad8:	460b      	mov	r3, r1
   87ada:	e004      	b.n	87ae6 <_svfprintf_r+0x1122>
   87adc:	3d10      	subs	r5, #16
   87ade:	2d10      	cmp	r5, #16
   87ae0:	f102 0208 	add.w	r2, r2, #8
   87ae4:	dd16      	ble.n	87b14 <_svfprintf_r+0x1150>
   87ae6:	3301      	adds	r3, #1
   87ae8:	4920      	ldr	r1, [pc, #128]	; (87b6c <_svfprintf_r+0x11a8>)
   87aea:	3010      	adds	r0, #16
   87aec:	2b07      	cmp	r3, #7
   87aee:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   87af2:	e9c2 1400 	strd	r1, r4, [r2]
   87af6:	ddf1      	ble.n	87adc <_svfprintf_r+0x1118>
   87af8:	4651      	mov	r1, sl
   87afa:	4648      	mov	r0, r9
   87afc:	aa2a      	add	r2, sp, #168	; 0xa8
   87afe:	f004 fba5 	bl	8c24c <__ssprint_r>
   87b02:	2800      	cmp	r0, #0
   87b04:	f47f aba6 	bne.w	87254 <_svfprintf_r+0x890>
   87b08:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   87b0c:	3d10      	subs	r5, #16
   87b0e:	2d10      	cmp	r5, #16
   87b10:	aa2d      	add	r2, sp, #180	; 0xb4
   87b12:	dce8      	bgt.n	87ae6 <_svfprintf_r+0x1122>
   87b14:	4619      	mov	r1, r3
   87b16:	1c4b      	adds	r3, r1, #1
   87b18:	4914      	ldr	r1, [pc, #80]	; (87b6c <_svfprintf_r+0x11a8>)
   87b1a:	4428      	add	r0, r5
   87b1c:	2b07      	cmp	r3, #7
   87b1e:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   87b22:	e9c2 1500 	strd	r1, r5, [r2]
   87b26:	f300 8215 	bgt.w	87f54 <_svfprintf_r+0x1590>
   87b2a:	783b      	ldrb	r3, [r7, #0]
   87b2c:	3208      	adds	r2, #8
   87b2e:	441e      	add	r6, r3
   87b30:	e7c2      	b.n	87ab8 <_svfprintf_r+0x10f4>
   87b32:	9b07      	ldr	r3, [sp, #28]
   87b34:	06da      	lsls	r2, r3, #27
   87b36:	f140 8084 	bpl.w	87c42 <_svfprintf_r+0x127e>
   87b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87b3c:	2500      	movs	r5, #0
   87b3e:	f853 4b04 	ldr.w	r4, [r3], #4
   87b42:	930e      	str	r3, [sp, #56]	; 0x38
   87b44:	e6fe      	b.n	87944 <_svfprintf_r+0xf80>
   87b46:	4651      	mov	r1, sl
   87b48:	4648      	mov	r0, r9
   87b4a:	aa2a      	add	r2, sp, #168	; 0xa8
   87b4c:	f004 fb7e 	bl	8c24c <__ssprint_r>
   87b50:	2800      	cmp	r0, #0
   87b52:	f47f ab7f 	bne.w	87254 <_svfprintf_r+0x890>
   87b56:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87b58:	aa2d      	add	r2, sp, #180	; 0xb4
   87b5a:	e792      	b.n	87a82 <_svfprintf_r+0x10be>
   87b5c:	66666667 	.word	0x66666667
   87b60:	0008d4fc 	.word	0x0008d4fc
   87b64:	0008d510 	.word	0x0008d510
   87b68:	0008d524 	.word	0x0008d524
   87b6c:	0008d540 	.word	0x0008d540
   87b70:	2200      	movs	r2, #0
   87b72:	9b08      	ldr	r3, [sp, #32]
   87b74:	f8cd b01c 	str.w	fp, [sp, #28]
   87b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   87b7c:	960c      	str	r6, [sp, #48]	; 0x30
   87b7e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   87b82:	4693      	mov	fp, r2
   87b84:	46ca      	mov	sl, r9
   87b86:	461e      	mov	r6, r3
   87b88:	46c1      	mov	r9, r8
   87b8a:	af56      	add	r7, sp, #344	; 0x158
   87b8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   87b90:	e00b      	b.n	87baa <_svfprintf_r+0x11e6>
   87b92:	220a      	movs	r2, #10
   87b94:	2300      	movs	r3, #0
   87b96:	4620      	mov	r0, r4
   87b98:	4629      	mov	r1, r5
   87b9a:	f005 fac9 	bl	8d130 <__aeabi_uldivmod>
   87b9e:	2d00      	cmp	r5, #0
   87ba0:	bf08      	it	eq
   87ba2:	2c0a      	cmpeq	r4, #10
   87ba4:	d31b      	bcc.n	87bde <_svfprintf_r+0x121a>
   87ba6:	4604      	mov	r4, r0
   87ba8:	460d      	mov	r5, r1
   87baa:	220a      	movs	r2, #10
   87bac:	2300      	movs	r3, #0
   87bae:	4620      	mov	r0, r4
   87bb0:	4629      	mov	r1, r5
   87bb2:	f005 fabd 	bl	8d130 <__aeabi_uldivmod>
   87bb6:	3230      	adds	r2, #48	; 0x30
   87bb8:	f807 2c01 	strb.w	r2, [r7, #-1]
   87bbc:	f10b 0b01 	add.w	fp, fp, #1
   87bc0:	3f01      	subs	r7, #1
   87bc2:	2e00      	cmp	r6, #0
   87bc4:	d0e5      	beq.n	87b92 <_svfprintf_r+0x11ce>
   87bc6:	f898 3000 	ldrb.w	r3, [r8]
   87bca:	459b      	cmp	fp, r3
   87bcc:	d1e1      	bne.n	87b92 <_svfprintf_r+0x11ce>
   87bce:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   87bd2:	d0de      	beq.n	87b92 <_svfprintf_r+0x11ce>
   87bd4:	2d00      	cmp	r5, #0
   87bd6:	bf08      	it	eq
   87bd8:	2c0a      	cmpeq	r4, #10
   87bda:	f080 8128 	bcs.w	87e2e <_svfprintf_r+0x146a>
   87bde:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   87be2:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   87be6:	46c8      	mov	r8, r9
   87be8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   87bea:	46d1      	mov	r9, sl
   87bec:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87bf0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   87bf4:	f7ff bb9f 	b.w	87336 <_svfprintf_r+0x972>
   87bf8:	4651      	mov	r1, sl
   87bfa:	4648      	mov	r0, r9
   87bfc:	aa2a      	add	r2, sp, #168	; 0xa8
   87bfe:	931e      	str	r3, [sp, #120]	; 0x78
   87c00:	f004 fb24 	bl	8c24c <__ssprint_r>
   87c04:	2800      	cmp	r0, #0
   87c06:	f47f ab25 	bne.w	87254 <_svfprintf_r+0x890>
   87c0a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87c0e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87c10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87c12:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c16:	f7ff b84a 	b.w	86cae <_svfprintf_r+0x2ea>
   87c1a:	2001      	movs	r0, #1
   87c1c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87c1e:	49c5      	ldr	r1, [pc, #788]	; (87f34 <_svfprintf_r+0x1570>)
   87c20:	4403      	add	r3, r0
   87c22:	4404      	add	r4, r0
   87c24:	2b07      	cmp	r3, #7
   87c26:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87c2a:	e9c8 1000 	strd	r1, r0, [r8]
   87c2e:	f73f abdf 	bgt.w	873f0 <_svfprintf_r+0xa2c>
   87c32:	f108 0808 	add.w	r8, r8, #8
   87c36:	f7ff bbe7 	b.w	87408 <_svfprintf_r+0xa44>
   87c3a:	46d1      	mov	r9, sl
   87c3c:	46b3      	mov	fp, r6
   87c3e:	f7ff bb0a 	b.w	87256 <_svfprintf_r+0x892>
   87c42:	9b07      	ldr	r3, [sp, #28]
   87c44:	065b      	lsls	r3, r3, #25
   87c46:	f140 80cb 	bpl.w	87de0 <_svfprintf_r+0x141c>
   87c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87c4c:	2500      	movs	r5, #0
   87c4e:	f853 4b04 	ldr.w	r4, [r3], #4
   87c52:	930e      	str	r3, [sp, #56]	; 0x38
   87c54:	b2a4      	uxth	r4, r4
   87c56:	e675      	b.n	87944 <_svfprintf_r+0xf80>
   87c58:	4651      	mov	r1, sl
   87c5a:	4648      	mov	r0, r9
   87c5c:	aa2a      	add	r2, sp, #168	; 0xa8
   87c5e:	f004 faf5 	bl	8c24c <__ssprint_r>
   87c62:	2800      	cmp	r0, #0
   87c64:	f47f aaf6 	bne.w	87254 <_svfprintf_r+0x890>
   87c68:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87c6a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c6e:	f7ff ba3a 	b.w	870e6 <_svfprintf_r+0x722>
   87c72:	46d1      	mov	r9, sl
   87c74:	46da      	mov	sl, fp
   87c76:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   87c7a:	3501      	adds	r5, #1
   87c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87c7e:	4434      	add	r4, r6
   87c80:	2d07      	cmp	r5, #7
   87c82:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87c86:	e9c8 3600 	strd	r3, r6, [r8]
   87c8a:	f77f ab24 	ble.w	872d6 <_svfprintf_r+0x912>
   87c8e:	4651      	mov	r1, sl
   87c90:	4648      	mov	r0, r9
   87c92:	aa2a      	add	r2, sp, #168	; 0xa8
   87c94:	f004 fada 	bl	8c24c <__ssprint_r>
   87c98:	2800      	cmp	r0, #0
   87c9a:	f47f aadb 	bne.w	87254 <_svfprintf_r+0x890>
   87c9e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87ca2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87ca6:	f7ff bb18 	b.w	872da <_svfprintf_r+0x916>
   87caa:	4aa3      	ldr	r2, [pc, #652]	; (87f38 <_svfprintf_r+0x1574>)
   87cac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87cae:	920f      	str	r2, [sp, #60]	; 0x3c
   87cb0:	3301      	adds	r3, #1
   87cb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87cb4:	442c      	add	r4, r5
   87cb6:	2b07      	cmp	r3, #7
   87cb8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87cbc:	e9c8 2500 	strd	r2, r5, [r8]
   87cc0:	f77f a82d 	ble.w	86d1e <_svfprintf_r+0x35a>
   87cc4:	f7ff bbc2 	b.w	8744c <_svfprintf_r+0xa88>
   87cc8:	4651      	mov	r1, sl
   87cca:	4648      	mov	r0, r9
   87ccc:	aa2a      	add	r2, sp, #168	; 0xa8
   87cce:	f004 fabd 	bl	8c24c <__ssprint_r>
   87cd2:	2800      	cmp	r0, #0
   87cd4:	f47f aabe 	bne.w	87254 <_svfprintf_r+0x890>
   87cd8:	783b      	ldrb	r3, [r7, #0]
   87cda:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87cdc:	aa2d      	add	r2, sp, #180	; 0xb4
   87cde:	e6e4      	b.n	87aaa <_svfprintf_r+0x10e6>
   87ce0:	4651      	mov	r1, sl
   87ce2:	4648      	mov	r0, r9
   87ce4:	aa2a      	add	r2, sp, #168	; 0xa8
   87ce6:	f004 fab1 	bl	8c24c <__ssprint_r>
   87cea:	2800      	cmp	r0, #0
   87cec:	f47f aab2 	bne.w	87254 <_svfprintf_r+0x890>
   87cf0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87cf2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87cf6:	f7fe bffd 	b.w	86cf4 <_svfprintf_r+0x330>
   87cfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87cfc:	990a      	ldr	r1, [sp, #40]	; 0x28
   87cfe:	f853 2b04 	ldr.w	r2, [r3], #4
   87d02:	465f      	mov	r7, fp
   87d04:	6011      	str	r1, [r2, #0]
   87d06:	930e      	str	r3, [sp, #56]	; 0x38
   87d08:	f7ff b82a 	b.w	86d60 <_svfprintf_r+0x39c>
   87d0c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87d0e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87d10:	3301      	adds	r3, #1
   87d12:	9818      	ldr	r0, [sp, #96]	; 0x60
   87d14:	440c      	add	r4, r1
   87d16:	2b07      	cmp	r3, #7
   87d18:	e9c8 0100 	strd	r0, r1, [r8]
   87d1c:	942c      	str	r4, [sp, #176]	; 0xb0
   87d1e:	932b      	str	r3, [sp, #172]	; 0xac
   87d20:	f300 80ac 	bgt.w	87e7c <_svfprintf_r+0x14b8>
   87d24:	f108 0808 	add.w	r8, r8, #8
   87d28:	2a00      	cmp	r2, #0
   87d2a:	f6bf ab85 	bge.w	87438 <_svfprintf_r+0xa74>
   87d2e:	4255      	negs	r5, r2
   87d30:	3210      	adds	r2, #16
   87d32:	f280 83d3 	bge.w	884dc <_svfprintf_r+0x1b18>
   87d36:	4651      	mov	r1, sl
   87d38:	4a7f      	ldr	r2, [pc, #508]	; (87f38 <_svfprintf_r+0x1574>)
   87d3a:	46ca      	mov	sl, r9
   87d3c:	9709      	str	r7, [sp, #36]	; 0x24
   87d3e:	2610      	movs	r6, #16
   87d40:	4617      	mov	r7, r2
   87d42:	4689      	mov	r9, r1
   87d44:	920f      	str	r2, [sp, #60]	; 0x3c
   87d46:	e005      	b.n	87d54 <_svfprintf_r+0x1390>
   87d48:	f108 0808 	add.w	r8, r8, #8
   87d4c:	3d10      	subs	r5, #16
   87d4e:	2d10      	cmp	r5, #16
   87d50:	f340 82aa 	ble.w	882a8 <_svfprintf_r+0x18e4>
   87d54:	3301      	adds	r3, #1
   87d56:	3410      	adds	r4, #16
   87d58:	2b07      	cmp	r3, #7
   87d5a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87d5e:	e9c8 7600 	strd	r7, r6, [r8]
   87d62:	ddf1      	ble.n	87d48 <_svfprintf_r+0x1384>
   87d64:	4649      	mov	r1, r9
   87d66:	4650      	mov	r0, sl
   87d68:	aa2a      	add	r2, sp, #168	; 0xa8
   87d6a:	f004 fa6f 	bl	8c24c <__ssprint_r>
   87d6e:	2800      	cmp	r0, #0
   87d70:	f040 825f 	bne.w	88232 <_svfprintf_r+0x186e>
   87d74:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87d78:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87d7c:	e7e6      	b.n	87d4c <_svfprintf_r+0x1388>
   87d7e:	4638      	mov	r0, r7
   87d80:	f004 fa02 	bl	8c188 <strlen>
   87d84:	462b      	mov	r3, r5
   87d86:	4602      	mov	r2, r0
   87d88:	9509      	str	r5, [sp, #36]	; 0x24
   87d8a:	f7ff b894 	b.w	86eb6 <_svfprintf_r+0x4f2>
   87d8e:	9b07      	ldr	r3, [sp, #28]
   87d90:	2500      	movs	r5, #0
   87d92:	f413 7f00 	tst.w	r3, #512	; 0x200
   87d96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87d98:	f853 4b04 	ldr.w	r4, [r3], #4
   87d9c:	930e      	str	r3, [sp, #56]	; 0x38
   87d9e:	bf18      	it	ne
   87da0:	b2e4      	uxtbne	r4, r4
   87da2:	f7fe bf1b 	b.w	86bdc <_svfprintf_r+0x218>
   87da6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87da8:	9b08      	ldr	r3, [sp, #32]
   87daa:	f852 4b04 	ldr.w	r4, [r2], #4
   87dae:	f413 7f00 	tst.w	r3, #512	; 0x200
   87db2:	f04f 0500 	mov.w	r5, #0
   87db6:	f04f 0301 	mov.w	r3, #1
   87dba:	920e      	str	r2, [sp, #56]	; 0x38
   87dbc:	bf18      	it	ne
   87dbe:	b2e4      	uxtbne	r4, r4
   87dc0:	f7fe bf11 	b.w	86be6 <_svfprintf_r+0x222>
   87dc4:	9b07      	ldr	r3, [sp, #28]
   87dc6:	f413 7f00 	tst.w	r3, #512	; 0x200
   87dca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87dcc:	f853 4b04 	ldr.w	r4, [r3], #4
   87dd0:	bf18      	it	ne
   87dd2:	b264      	sxtbne	r4, r4
   87dd4:	17e5      	asrs	r5, r4, #31
   87dd6:	930e      	str	r3, [sp, #56]	; 0x38
   87dd8:	4622      	mov	r2, r4
   87dda:	462b      	mov	r3, r5
   87ddc:	f7fe bed4 	b.w	86b88 <_svfprintf_r+0x1c4>
   87de0:	9b07      	ldr	r3, [sp, #28]
   87de2:	2500      	movs	r5, #0
   87de4:	f413 7f00 	tst.w	r3, #512	; 0x200
   87de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87dea:	f853 4b04 	ldr.w	r4, [r3], #4
   87dee:	930e      	str	r3, [sp, #56]	; 0x38
   87df0:	bf18      	it	ne
   87df2:	b2e4      	uxtbne	r4, r4
   87df4:	e5a6      	b.n	87944 <_svfprintf_r+0xf80>
   87df6:	4b50      	ldr	r3, [pc, #320]	; (87f38 <_svfprintf_r+0x1574>)
   87df8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87dfa:	930f      	str	r3, [sp, #60]	; 0x3c
   87dfc:	f7ff ba15 	b.w	8722a <_svfprintf_r+0x866>
   87e00:	232d      	movs	r3, #45	; 0x2d
   87e02:	461a      	mov	r2, r3
   87e04:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87e08:	f7fe bfee 	b.w	86de8 <_svfprintf_r+0x424>
   87e0c:	464a      	mov	r2, r9
   87e0e:	46d1      	mov	r9, sl
   87e10:	4692      	mov	sl, r2
   87e12:	9f09      	ldr	r7, [sp, #36]	; 0x24
   87e14:	3301      	adds	r3, #1
   87e16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87e18:	442c      	add	r4, r5
   87e1a:	2b07      	cmp	r3, #7
   87e1c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87e20:	e9c8 2500 	strd	r2, r5, [r8]
   87e24:	dc3b      	bgt.n	87e9e <_svfprintf_r+0x14da>
   87e26:	f108 0808 	add.w	r8, r8, #8
   87e2a:	f7ff bb8c 	b.w	87546 <_svfprintf_r+0xb82>
   87e2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   87e30:	991c      	ldr	r1, [sp, #112]	; 0x70
   87e32:	1aff      	subs	r7, r7, r3
   87e34:	461a      	mov	r2, r3
   87e36:	4638      	mov	r0, r7
   87e38:	f004 f9d4 	bl	8c1e4 <strncpy>
   87e3c:	f898 3001 	ldrb.w	r3, [r8, #1]
   87e40:	b10b      	cbz	r3, 87e46 <_svfprintf_r+0x1482>
   87e42:	f108 0801 	add.w	r8, r8, #1
   87e46:	220a      	movs	r2, #10
   87e48:	2300      	movs	r3, #0
   87e4a:	4620      	mov	r0, r4
   87e4c:	4629      	mov	r1, r5
   87e4e:	f005 f96f 	bl	8d130 <__aeabi_uldivmod>
   87e52:	f04f 0b00 	mov.w	fp, #0
   87e56:	e6a6      	b.n	87ba6 <_svfprintf_r+0x11e2>
   87e58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87e5a:	18bd      	adds	r5, r7, r2
   87e5c:	1bad      	subs	r5, r5, r6
   87e5e:	1ad3      	subs	r3, r2, r3
   87e60:	429d      	cmp	r5, r3
   87e62:	bfa8      	it	ge
   87e64:	461d      	movge	r5, r3
   87e66:	f7ff bba0 	b.w	875aa <_svfprintf_r+0xbe6>
   87e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87e6c:	990a      	ldr	r1, [sp, #40]	; 0x28
   87e6e:	f853 2b04 	ldr.w	r2, [r3], #4
   87e72:	465f      	mov	r7, fp
   87e74:	8011      	strh	r1, [r2, #0]
   87e76:	930e      	str	r3, [sp, #56]	; 0x38
   87e78:	f7fe bf72 	b.w	86d60 <_svfprintf_r+0x39c>
   87e7c:	4651      	mov	r1, sl
   87e7e:	4648      	mov	r0, r9
   87e80:	aa2a      	add	r2, sp, #168	; 0xa8
   87e82:	f004 f9e3 	bl	8c24c <__ssprint_r>
   87e86:	2800      	cmp	r0, #0
   87e88:	f47f a9e4 	bne.w	87254 <_svfprintf_r+0x890>
   87e8c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87e90:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87e92:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87e96:	e747      	b.n	87d28 <_svfprintf_r+0x1364>
   87e98:	2306      	movs	r3, #6
   87e9a:	9309      	str	r3, [sp, #36]	; 0x24
   87e9c:	e482      	b.n	877a4 <_svfprintf_r+0xde0>
   87e9e:	4651      	mov	r1, sl
   87ea0:	4648      	mov	r0, r9
   87ea2:	aa2a      	add	r2, sp, #168	; 0xa8
   87ea4:	f004 f9d2 	bl	8c24c <__ssprint_r>
   87ea8:	2800      	cmp	r0, #0
   87eaa:	f47f a9d3 	bne.w	87254 <_svfprintf_r+0x890>
   87eae:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87eb0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87eb4:	f7ff bb47 	b.w	87546 <_svfprintf_r+0xb82>
   87eb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87eba:	971a      	str	r7, [sp, #104]	; 0x68
   87ebc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   87ebe:	4690      	mov	r8, r2
   87ec0:	18fb      	adds	r3, r7, r3
   87ec2:	429e      	cmp	r6, r3
   87ec4:	4632      	mov	r2, r6
   87ec6:	bf28      	it	cs
   87ec8:	461a      	movcs	r2, r3
   87eca:	4604      	mov	r4, r0
   87ecc:	4616      	mov	r6, r2
   87ece:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87ed2:	f7ff bb3f 	b.w	87554 <_svfprintf_r+0xb90>
   87ed6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87ed8:	1cd8      	adds	r0, r3, #3
   87eda:	9310      	str	r3, [sp, #64]	; 0x40
   87edc:	db02      	blt.n	87ee4 <_svfprintf_r+0x1520>
   87ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
   87ee0:	4293      	cmp	r3, r2
   87ee2:	dd04      	ble.n	87eee <_svfprintf_r+0x152a>
   87ee4:	3e02      	subs	r6, #2
   87ee6:	f026 0320 	bic.w	r3, r6, #32
   87eea:	9308      	str	r3, [sp, #32]
   87eec:	e49b      	b.n	87826 <_svfprintf_r+0xe62>
   87eee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87ef0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   87ef2:	428b      	cmp	r3, r1
   87ef4:	f2c0 817a 	blt.w	881ec <_svfprintf_r+0x1828>
   87ef8:	07ea      	lsls	r2, r5, #31
   87efa:	f140 8283 	bpl.w	88404 <_svfprintf_r+0x1a40>
   87efe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87f00:	4413      	add	r3, r2
   87f02:	930c      	str	r3, [sp, #48]	; 0x30
   87f04:	056e      	lsls	r6, r5, #21
   87f06:	f140 8277 	bpl.w	883f8 <_svfprintf_r+0x1a34>
   87f0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87f0c:	2b00      	cmp	r3, #0
   87f0e:	f300 8210 	bgt.w	88332 <_svfprintf_r+0x196e>
   87f12:	2667      	movs	r6, #103	; 0x67
   87f14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87f16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87f1a:	9308      	str	r3, [sp, #32]
   87f1c:	2300      	movs	r3, #0
   87f1e:	9312      	str	r3, [sp, #72]	; 0x48
   87f20:	9316      	str	r3, [sp, #88]	; 0x58
   87f22:	e4e4      	b.n	878ee <_svfprintf_r+0xf2a>
   87f24:	222d      	movs	r2, #45	; 0x2d
   87f26:	2300      	movs	r3, #0
   87f28:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   87f2c:	9309      	str	r3, [sp, #36]	; 0x24
   87f2e:	f7fe bf70 	b.w	86e12 <_svfprintf_r+0x44e>
   87f32:	bf00      	nop
   87f34:	0008d52c 	.word	0x0008d52c
   87f38:	0008d540 	.word	0x0008d540
   87f3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87f3e:	42a3      	cmp	r3, r4
   87f40:	f4bf ac65 	bcs.w	8780e <_svfprintf_r+0xe4a>
   87f44:	2130      	movs	r1, #48	; 0x30
   87f46:	1c5a      	adds	r2, r3, #1
   87f48:	9228      	str	r2, [sp, #160]	; 0xa0
   87f4a:	7019      	strb	r1, [r3, #0]
   87f4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87f4e:	429c      	cmp	r4, r3
   87f50:	d8f9      	bhi.n	87f46 <_svfprintf_r+0x1582>
   87f52:	e45c      	b.n	8780e <_svfprintf_r+0xe4a>
   87f54:	4651      	mov	r1, sl
   87f56:	4648      	mov	r0, r9
   87f58:	aa2a      	add	r2, sp, #168	; 0xa8
   87f5a:	f004 f977 	bl	8c24c <__ssprint_r>
   87f5e:	2800      	cmp	r0, #0
   87f60:	f47f a978 	bne.w	87254 <_svfprintf_r+0x890>
   87f64:	783b      	ldrb	r3, [r7, #0]
   87f66:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87f68:	aa2d      	add	r2, sp, #180	; 0xb4
   87f6a:	441e      	add	r6, r3
   87f6c:	e5a4      	b.n	87ab8 <_svfprintf_r+0x10f4>
   87f6e:	4651      	mov	r1, sl
   87f70:	4648      	mov	r0, r9
   87f72:	aa2a      	add	r2, sp, #168	; 0xa8
   87f74:	f004 f96a 	bl	8c24c <__ssprint_r>
   87f78:	2800      	cmp	r0, #0
   87f7a:	f47f a96b 	bne.w	87254 <_svfprintf_r+0x890>
   87f7e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87f80:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f84:	f7ff bad7 	b.w	87536 <_svfprintf_r+0xb72>
   87f88:	4651      	mov	r1, sl
   87f8a:	4648      	mov	r0, r9
   87f8c:	aa2a      	add	r2, sp, #168	; 0xa8
   87f8e:	f004 f95d 	bl	8c24c <__ssprint_r>
   87f92:	2800      	cmp	r0, #0
   87f94:	f47f a95e 	bne.w	87254 <_svfprintf_r+0x890>
   87f98:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87f9a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87f9c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87fa0:	f7ff baee 	b.w	87580 <_svfprintf_r+0xbbc>
   87fa4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   87fa6:	a928      	add	r1, sp, #160	; 0xa0
   87fa8:	e9cd 0400 	strd	r0, r4, [sp]
   87fac:	9104      	str	r1, [sp, #16]
   87fae:	a825      	add	r0, sp, #148	; 0x94
   87fb0:	a924      	add	r1, sp, #144	; 0x90
   87fb2:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87fb6:	4648      	mov	r0, r9
   87fb8:	f001 faca 	bl	89550 <_dtoa_r>
   87fbc:	2d47      	cmp	r5, #71	; 0x47
   87fbe:	4607      	mov	r7, r0
   87fc0:	d119      	bne.n	87ff6 <_svfprintf_r+0x1632>
   87fc2:	9d07      	ldr	r5, [sp, #28]
   87fc4:	462b      	mov	r3, r5
   87fc6:	07db      	lsls	r3, r3, #31
   87fc8:	f100 812a 	bmi.w	88220 <_svfprintf_r+0x185c>
   87fcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87fce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   87fd0:	9207      	str	r2, [sp, #28]
   87fd2:	2247      	movs	r2, #71	; 0x47
   87fd4:	9208      	str	r2, [sp, #32]
   87fd6:	e41a      	b.n	8780e <_svfprintf_r+0xe4a>
   87fd8:	2003      	movs	r0, #3
   87fda:	9c09      	ldr	r4, [sp, #36]	; 0x24
   87fdc:	a928      	add	r1, sp, #160	; 0xa0
   87fde:	e9cd 0400 	strd	r0, r4, [sp]
   87fe2:	9104      	str	r1, [sp, #16]
   87fe4:	a825      	add	r0, sp, #148	; 0x94
   87fe6:	a924      	add	r1, sp, #144	; 0x90
   87fe8:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87fee:	4648      	mov	r0, r9
   87ff0:	f001 faae 	bl	89550 <_dtoa_r>
   87ff4:	4607      	mov	r7, r0
   87ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87ff8:	2d46      	cmp	r5, #70	; 0x46
   87ffa:	eb07 0403 	add.w	r4, r7, r3
   87ffe:	f47f abf9 	bne.w	877f4 <_svfprintf_r+0xe30>
   88002:	783b      	ldrb	r3, [r7, #0]
   88004:	2b30      	cmp	r3, #48	; 0x30
   88006:	f000 821c 	beq.w	88442 <_svfprintf_r+0x1a7e>
   8800a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8800c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8800e:	9d07      	ldr	r5, [sp, #28]
   88010:	441c      	add	r4, r3
   88012:	9207      	str	r2, [sp, #28]
   88014:	f7ff bbf1 	b.w	877fa <_svfprintf_r+0xe36>
   88018:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8801c:	f7ff b9c3 	b.w	873a6 <_svfprintf_r+0x9e2>
   88020:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88022:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   88026:	9308      	str	r3, [sp, #32]
   88028:	930c      	str	r3, [sp, #48]	; 0x30
   8802a:	9009      	str	r0, [sp, #36]	; 0x24
   8802c:	940e      	str	r4, [sp, #56]	; 0x38
   8802e:	9012      	str	r0, [sp, #72]	; 0x48
   88030:	9016      	str	r0, [sp, #88]	; 0x58
   88032:	9010      	str	r0, [sp, #64]	; 0x40
   88034:	f7fe beea 	b.w	86e0c <_svfprintf_r+0x448>
   88038:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8803a:	2a00      	cmp	r2, #0
   8803c:	9210      	str	r2, [sp, #64]	; 0x40
   8803e:	f340 821b 	ble.w	88478 <_svfprintf_r+0x1ab4>
   88042:	9909      	ldr	r1, [sp, #36]	; 0x24
   88044:	f005 0301 	and.w	r3, r5, #1
   88048:	430b      	orrs	r3, r1
   8804a:	f040 819a 	bne.w	88382 <_svfprintf_r+0x19be>
   8804e:	2666      	movs	r6, #102	; 0x66
   88050:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88052:	930c      	str	r3, [sp, #48]	; 0x30
   88054:	056a      	lsls	r2, r5, #21
   88056:	f100 816d 	bmi.w	88334 <_svfprintf_r+0x1970>
   8805a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8805c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88060:	9308      	str	r3, [sp, #32]
   88062:	e75b      	b.n	87f1c <_svfprintf_r+0x1558>
   88064:	4651      	mov	r1, sl
   88066:	4648      	mov	r0, r9
   88068:	aa2a      	add	r2, sp, #168	; 0xa8
   8806a:	f004 f8ef 	bl	8c24c <__ssprint_r>
   8806e:	2800      	cmp	r0, #0
   88070:	f47f a8f0 	bne.w	87254 <_svfprintf_r+0x890>
   88074:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88076:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88078:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8807a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8807e:	1ad3      	subs	r3, r2, r3
   88080:	f7ff ba93 	b.w	875aa <_svfprintf_r+0xbe6>
   88084:	2330      	movs	r3, #48	; 0x30
   88086:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8808a:	2358      	movs	r3, #88	; 0x58
   8808c:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   88090:	9b07      	ldr	r3, [sp, #28]
   88092:	f043 0402 	orr.w	r4, r3, #2
   88096:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88098:	2b63      	cmp	r3, #99	; 0x63
   8809a:	f300 80f2 	bgt.w	88282 <_svfprintf_r+0x18be>
   8809e:	2300      	movs	r3, #0
   880a0:	af3d      	add	r7, sp, #244	; 0xf4
   880a2:	930d      	str	r3, [sp, #52]	; 0x34
   880a4:	9b07      	ldr	r3, [sp, #28]
   880a6:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   880aa:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   880ae:	9312      	str	r3, [sp, #72]	; 0x48
   880b0:	4613      	mov	r3, r2
   880b2:	2b00      	cmp	r3, #0
   880b4:	f026 0520 	bic.w	r5, r6, #32
   880b8:	9407      	str	r4, [sp, #28]
   880ba:	f2c0 808d 	blt.w	881d8 <_svfprintf_r+0x1814>
   880be:	930f      	str	r3, [sp, #60]	; 0x3c
   880c0:	2300      	movs	r3, #0
   880c2:	9508      	str	r5, [sp, #32]
   880c4:	910c      	str	r1, [sp, #48]	; 0x30
   880c6:	931e      	str	r3, [sp, #120]	; 0x78
   880c8:	2e61      	cmp	r6, #97	; 0x61
   880ca:	f000 817d 	beq.w	883c8 <_svfprintf_r+0x1a04>
   880ce:	2e41      	cmp	r6, #65	; 0x41
   880d0:	f47f ab77 	bne.w	877c2 <_svfprintf_r+0xdfe>
   880d4:	aa24      	add	r2, sp, #144	; 0x90
   880d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   880d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   880da:	f003 ffc5 	bl	8c068 <frexp>
   880de:	2200      	movs	r2, #0
   880e0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   880e4:	f004 fd4c 	bl	8cb80 <__aeabi_dmul>
   880e8:	4604      	mov	r4, r0
   880ea:	460d      	mov	r5, r1
   880ec:	2200      	movs	r2, #0
   880ee:	2300      	movs	r3, #0
   880f0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   880f4:	f004 ffac 	bl	8d050 <__aeabi_dcmpeq>
   880f8:	b108      	cbz	r0, 880fe <_svfprintf_r+0x173a>
   880fa:	2301      	movs	r3, #1
   880fc:	9324      	str	r3, [sp, #144]	; 0x90
   880fe:	4bae      	ldr	r3, [pc, #696]	; (883b8 <_svfprintf_r+0x19f4>)
   88100:	930c      	str	r3, [sp, #48]	; 0x30
   88102:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88104:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   88108:	3b01      	subs	r3, #1
   8810a:	9613      	str	r6, [sp, #76]	; 0x4c
   8810c:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   88110:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   88114:	9721      	str	r7, [sp, #132]	; 0x84
   88116:	46ba      	mov	sl, r7
   88118:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   8811c:	4699      	mov	r9, r3
   8811e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   88122:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   88126:	e006      	b.n	88136 <_svfprintf_r+0x1772>
   88128:	2200      	movs	r2, #0
   8812a:	2300      	movs	r3, #0
   8812c:	f004 ff90 	bl	8d050 <__aeabi_dcmpeq>
   88130:	f109 39ff 	add.w	r9, r9, #4294967295
   88134:	b9e8      	cbnz	r0, 88172 <_svfprintf_r+0x17ae>
   88136:	2200      	movs	r2, #0
   88138:	4ba0      	ldr	r3, [pc, #640]	; (883bc <_svfprintf_r+0x19f8>)
   8813a:	4630      	mov	r0, r6
   8813c:	4639      	mov	r1, r7
   8813e:	f004 fd1f 	bl	8cb80 <__aeabi_dmul>
   88142:	460d      	mov	r5, r1
   88144:	4604      	mov	r4, r0
   88146:	f004 ffcb 	bl	8d0e0 <__aeabi_d2iz>
   8814a:	4680      	mov	r8, r0
   8814c:	f004 fcae 	bl	8caac <__aeabi_i2d>
   88150:	460b      	mov	r3, r1
   88152:	4602      	mov	r2, r0
   88154:	4629      	mov	r1, r5
   88156:	4620      	mov	r0, r4
   88158:	f004 fb5a 	bl	8c810 <__aeabi_dsub>
   8815c:	f81b 3008 	ldrb.w	r3, [fp, r8]
   88160:	f1b9 3fff 	cmp.w	r9, #4294967295
   88164:	4655      	mov	r5, sl
   88166:	4606      	mov	r6, r0
   88168:	460f      	mov	r7, r1
   8816a:	464c      	mov	r4, r9
   8816c:	f80a 3b01 	strb.w	r3, [sl], #1
   88170:	d1da      	bne.n	88128 <_svfprintf_r+0x1764>
   88172:	4630      	mov	r0, r6
   88174:	4639      	mov	r1, r7
   88176:	2200      	movs	r2, #0
   88178:	4b91      	ldr	r3, [pc, #580]	; (883c0 <_svfprintf_r+0x19fc>)
   8817a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   8817e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   88180:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   88184:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   88188:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8818c:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   88190:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   88194:	9f21      	ldr	r7, [sp, #132]	; 0x84
   88196:	f004 ff83 	bl	8d0a0 <__aeabi_dcmpgt>
   8819a:	2800      	cmp	r0, #0
   8819c:	d155      	bne.n	8824a <_svfprintf_r+0x1886>
   8819e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   881a2:	2200      	movs	r2, #0
   881a4:	4b86      	ldr	r3, [pc, #536]	; (883c0 <_svfprintf_r+0x19fc>)
   881a6:	f004 ff53 	bl	8d050 <__aeabi_dcmpeq>
   881aa:	b110      	cbz	r0, 881b2 <_svfprintf_r+0x17ee>
   881ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   881ae:	07db      	lsls	r3, r3, #31
   881b0:	d44b      	bmi.n	8824a <_svfprintf_r+0x1886>
   881b2:	2c00      	cmp	r4, #0
   881b4:	db08      	blt.n	881c8 <_svfprintf_r+0x1804>
   881b6:	2230      	movs	r2, #48	; 0x30
   881b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   881ba:	1c63      	adds	r3, r4, #1
   881bc:	440b      	add	r3, r1
   881be:	f801 2b01 	strb.w	r2, [r1], #1
   881c2:	428b      	cmp	r3, r1
   881c4:	d1fb      	bne.n	881be <_svfprintf_r+0x17fa>
   881c6:	910f      	str	r1, [sp, #60]	; 0x3c
   881c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   881ca:	9d07      	ldr	r5, [sp, #28]
   881cc:	1bdb      	subs	r3, r3, r7
   881ce:	9313      	str	r3, [sp, #76]	; 0x4c
   881d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   881d2:	9307      	str	r3, [sp, #28]
   881d4:	f7ff bb1d 	b.w	87812 <_svfprintf_r+0xe4e>
   881d8:	9508      	str	r5, [sp, #32]
   881da:	232d      	movs	r3, #45	; 0x2d
   881dc:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   881e0:	931e      	str	r3, [sp, #120]	; 0x78
   881e2:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   881e6:	910c      	str	r1, [sp, #48]	; 0x30
   881e8:	930f      	str	r3, [sp, #60]	; 0x3c
   881ea:	e76d      	b.n	880c8 <_svfprintf_r+0x1704>
   881ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   881ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   881f0:	189a      	adds	r2, r3, r2
   881f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   881f4:	920c      	str	r2, [sp, #48]	; 0x30
   881f6:	2b00      	cmp	r3, #0
   881f8:	f340 811a 	ble.w	88430 <_svfprintf_r+0x1a6c>
   881fc:	2667      	movs	r6, #103	; 0x67
   881fe:	e729      	b.n	88054 <_svfprintf_r+0x1690>
   88200:	2300      	movs	r3, #0
   88202:	9309      	str	r3, [sp, #36]	; 0x24
   88204:	f7fe bc2b 	b.w	86a5e <_svfprintf_r+0x9a>
   88208:	4648      	mov	r0, r9
   8820a:	4651      	mov	r1, sl
   8820c:	aa2a      	add	r2, sp, #168	; 0xa8
   8820e:	f004 f81d 	bl	8c24c <__ssprint_r>
   88212:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88216:	f7fe bdae 	b.w	86d76 <_svfprintf_r+0x3b2>
   8821a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   8821c:	f7ff b95f 	b.w	874de <_svfprintf_r+0xb1a>
   88220:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88222:	9d07      	ldr	r5, [sp, #28]
   88224:	18fc      	adds	r4, r7, r3
   88226:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88228:	9307      	str	r3, [sp, #28]
   8822a:	2347      	movs	r3, #71	; 0x47
   8822c:	9308      	str	r3, [sp, #32]
   8822e:	f7ff bae4 	b.w	877fa <_svfprintf_r+0xe36>
   88232:	46cb      	mov	fp, r9
   88234:	46d1      	mov	r9, sl
   88236:	f7ff b80e 	b.w	87256 <_svfprintf_r+0x892>
   8823a:	46d1      	mov	r9, sl
   8823c:	f7ff b80b 	b.w	87256 <_svfprintf_r+0x892>
   88240:	4b60      	ldr	r3, [pc, #384]	; (883c4 <_svfprintf_r+0x1a00>)
   88242:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88244:	930f      	str	r3, [sp, #60]	; 0x3c
   88246:	f7fe bfb7 	b.w	871b8 <_svfprintf_r+0x7f4>
   8824a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8824c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8824e:	9528      	str	r5, [sp, #160]	; 0xa0
   88250:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88254:	7bc9      	ldrb	r1, [r1, #15]
   88256:	428a      	cmp	r2, r1
   88258:	f040 812a 	bne.w	884b0 <_svfprintf_r+0x1aec>
   8825c:	2030      	movs	r0, #48	; 0x30
   8825e:	f803 0c01 	strb.w	r0, [r3, #-1]
   88262:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88264:	1e5a      	subs	r2, r3, #1
   88266:	9228      	str	r2, [sp, #160]	; 0xa0
   88268:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   8826c:	4291      	cmp	r1, r2
   8826e:	d0f6      	beq.n	8825e <_svfprintf_r+0x189a>
   88270:	2a39      	cmp	r2, #57	; 0x39
   88272:	bf0b      	itete	eq
   88274:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   88276:	3201      	addne	r2, #1
   88278:	7a92      	ldrbeq	r2, [r2, #10]
   8827a:	b2d2      	uxtbne	r2, r2
   8827c:	f803 2c01 	strb.w	r2, [r3, #-1]
   88280:	e7a2      	b.n	881c8 <_svfprintf_r+0x1804>
   88282:	4648      	mov	r0, r9
   88284:	1c59      	adds	r1, r3, #1
   88286:	f002 fe09 	bl	8ae9c <_malloc_r>
   8828a:	4607      	mov	r7, r0
   8828c:	2800      	cmp	r0, #0
   8828e:	f000 811d 	beq.w	884cc <_svfprintf_r+0x1b08>
   88292:	900d      	str	r0, [sp, #52]	; 0x34
   88294:	e706      	b.n	880a4 <_svfprintf_r+0x16e0>
   88296:	2330      	movs	r3, #48	; 0x30
   88298:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8829c:	2378      	movs	r3, #120	; 0x78
   8829e:	e6f5      	b.n	8808c <_svfprintf_r+0x16c8>
   882a0:	9b07      	ldr	r3, [sp, #28]
   882a2:	9308      	str	r3, [sp, #32]
   882a4:	f7ff b894 	b.w	873d0 <_svfprintf_r+0xa0c>
   882a8:	464a      	mov	r2, r9
   882aa:	46d1      	mov	r9, sl
   882ac:	4692      	mov	sl, r2
   882ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
   882b0:	3301      	adds	r3, #1
   882b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   882b4:	442c      	add	r4, r5
   882b6:	2b07      	cmp	r3, #7
   882b8:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   882bc:	e9c8 2500 	strd	r2, r5, [r8]
   882c0:	f77f a8b8 	ble.w	87434 <_svfprintf_r+0xa70>
   882c4:	4651      	mov	r1, sl
   882c6:	4648      	mov	r0, r9
   882c8:	aa2a      	add	r2, sp, #168	; 0xa8
   882ca:	f003 ffbf 	bl	8c24c <__ssprint_r>
   882ce:	2800      	cmp	r0, #0
   882d0:	f47e afc0 	bne.w	87254 <_svfprintf_r+0x890>
   882d4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   882d8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   882dc:	f7ff b8ac 	b.w	87438 <_svfprintf_r+0xa74>
   882e0:	2b00      	cmp	r3, #0
   882e2:	bf08      	it	eq
   882e4:	2301      	moveq	r3, #1
   882e6:	9309      	str	r3, [sp, #36]	; 0x24
   882e8:	9b07      	ldr	r3, [sp, #28]
   882ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   882ee:	9312      	str	r3, [sp, #72]	; 0x48
   882f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   882f2:	2b00      	cmp	r3, #0
   882f4:	930c      	str	r3, [sp, #48]	; 0x30
   882f6:	f2c0 80bd 	blt.w	88474 <_svfprintf_r+0x1ab0>
   882fa:	2402      	movs	r4, #2
   882fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   882fe:	a828      	add	r0, sp, #160	; 0xa0
   88300:	aa25      	add	r2, sp, #148	; 0x94
   88302:	ab24      	add	r3, sp, #144	; 0x90
   88304:	e9cd 2003 	strd	r2, r0, [sp, #12]
   88308:	e9cd 4500 	strd	r4, r5, [sp]
   8830c:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   88310:	9302      	str	r3, [sp, #8]
   88312:	4622      	mov	r2, r4
   88314:	462b      	mov	r3, r5
   88316:	4648      	mov	r0, r9
   88318:	911e      	str	r1, [sp, #120]	; 0x78
   8831a:	f001 f919 	bl	89550 <_dtoa_r>
   8831e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88320:	4607      	mov	r7, r0
   88322:	930f      	str	r3, [sp, #60]	; 0x3c
   88324:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   88326:	940c      	str	r4, [sp, #48]	; 0x30
   88328:	930d      	str	r3, [sp, #52]	; 0x34
   8832a:	e64a      	b.n	87fc2 <_svfprintf_r+0x15fe>
   8832c:	2300      	movs	r3, #0
   8832e:	930d      	str	r3, [sp, #52]	; 0x34
   88330:	e753      	b.n	881da <_svfprintf_r+0x1816>
   88332:	2667      	movs	r6, #103	; 0x67
   88334:	991a      	ldr	r1, [sp, #104]	; 0x68
   88336:	780b      	ldrb	r3, [r1, #0]
   88338:	2bff      	cmp	r3, #255	; 0xff
   8833a:	f000 80de 	beq.w	884fa <_svfprintf_r+0x1b36>
   8833e:	2400      	movs	r4, #0
   88340:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88342:	4620      	mov	r0, r4
   88344:	e003      	b.n	8834e <_svfprintf_r+0x198a>
   88346:	3001      	adds	r0, #1
   88348:	3101      	adds	r1, #1
   8834a:	2bff      	cmp	r3, #255	; 0xff
   8834c:	d008      	beq.n	88360 <_svfprintf_r+0x199c>
   8834e:	4293      	cmp	r3, r2
   88350:	da06      	bge.n	88360 <_svfprintf_r+0x199c>
   88352:	1ad2      	subs	r2, r2, r3
   88354:	784b      	ldrb	r3, [r1, #1]
   88356:	2b00      	cmp	r3, #0
   88358:	d1f5      	bne.n	88346 <_svfprintf_r+0x1982>
   8835a:	780b      	ldrb	r3, [r1, #0]
   8835c:	3401      	adds	r4, #1
   8835e:	e7f4      	b.n	8834a <_svfprintf_r+0x1986>
   88360:	911a      	str	r1, [sp, #104]	; 0x68
   88362:	9210      	str	r2, [sp, #64]	; 0x40
   88364:	9016      	str	r0, [sp, #88]	; 0x58
   88366:	9412      	str	r4, [sp, #72]	; 0x48
   88368:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8836a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8836c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8836e:	4413      	add	r3, r2
   88370:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   88372:	fb02 1303 	mla	r3, r2, r3, r1
   88376:	930c      	str	r3, [sp, #48]	; 0x30
   88378:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8837c:	9308      	str	r3, [sp, #32]
   8837e:	f7ff bab6 	b.w	878ee <_svfprintf_r+0xf2a>
   88382:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88384:	2666      	movs	r6, #102	; 0x66
   88386:	18d3      	adds	r3, r2, r3
   88388:	4419      	add	r1, r3
   8838a:	910c      	str	r1, [sp, #48]	; 0x30
   8838c:	e662      	b.n	88054 <_svfprintf_r+0x1690>
   8838e:	f106 020f 	add.w	r2, r6, #15
   88392:	2101      	movs	r1, #1
   88394:	b2d2      	uxtb	r2, r2
   88396:	f7ff ba4f 	b.w	87838 <_svfprintf_r+0xe74>
   8839a:	2900      	cmp	r1, #0
   8839c:	d167      	bne.n	8846e <_svfprintf_r+0x1aaa>
   8839e:	2230      	movs	r2, #48	; 0x30
   883a0:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   883a4:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   883a8:	3330      	adds	r3, #48	; 0x30
   883aa:	f802 3b01 	strb.w	r3, [r2], #1
   883ae:	ab26      	add	r3, sp, #152	; 0x98
   883b0:	1ad3      	subs	r3, r2, r3
   883b2:	931b      	str	r3, [sp, #108]	; 0x6c
   883b4:	f7ff ba83 	b.w	878be <_svfprintf_r+0xefa>
   883b8:	0008d510 	.word	0x0008d510
   883bc:	40300000 	.word	0x40300000
   883c0:	3fe00000 	.word	0x3fe00000
   883c4:	0008d540 	.word	0x0008d540
   883c8:	aa24      	add	r2, sp, #144	; 0x90
   883ca:	980c      	ldr	r0, [sp, #48]	; 0x30
   883cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   883ce:	f003 fe4b 	bl	8c068 <frexp>
   883d2:	2200      	movs	r2, #0
   883d4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   883d8:	f004 fbd2 	bl	8cb80 <__aeabi_dmul>
   883dc:	4604      	mov	r4, r0
   883de:	460d      	mov	r5, r1
   883e0:	2200      	movs	r2, #0
   883e2:	2300      	movs	r3, #0
   883e4:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   883e8:	f004 fe32 	bl	8d050 <__aeabi_dcmpeq>
   883ec:	b108      	cbz	r0, 883f2 <_svfprintf_r+0x1a2e>
   883ee:	2301      	movs	r3, #1
   883f0:	9324      	str	r3, [sp, #144]	; 0x90
   883f2:	4b44      	ldr	r3, [pc, #272]	; (88504 <_svfprintf_r+0x1b40>)
   883f4:	930c      	str	r3, [sp, #48]	; 0x30
   883f6:	e684      	b.n	88102 <_svfprintf_r+0x173e>
   883f8:	2667      	movs	r6, #103	; 0x67
   883fa:	e62e      	b.n	8805a <_svfprintf_r+0x1696>
   883fc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88400:	f7fe bcb9 	b.w	86d76 <_svfprintf_r+0x3b2>
   88404:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88406:	930c      	str	r3, [sp, #48]	; 0x30
   88408:	e57c      	b.n	87f04 <_svfprintf_r+0x1540>
   8840a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8840c:	2003      	movs	r0, #3
   8840e:	2b00      	cmp	r3, #0
   88410:	bfb8      	it	lt
   88412:	232d      	movlt	r3, #45	; 0x2d
   88414:	f04f 0100 	mov.w	r1, #0
   88418:	bfba      	itte	lt
   8841a:	461a      	movlt	r2, r3
   8841c:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   88420:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   88424:	4f38      	ldr	r7, [pc, #224]	; (88508 <_svfprintf_r+0x1b44>)
   88426:	4b39      	ldr	r3, [pc, #228]	; (8850c <_svfprintf_r+0x1b48>)
   88428:	9008      	str	r0, [sp, #32]
   8842a:	910d      	str	r1, [sp, #52]	; 0x34
   8842c:	f7fe bce2 	b.w	86df4 <_svfprintf_r+0x430>
   88430:	f1c3 0301 	rsb	r3, r3, #1
   88434:	441a      	add	r2, r3
   88436:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8843a:	2667      	movs	r6, #103	; 0x67
   8843c:	920c      	str	r2, [sp, #48]	; 0x30
   8843e:	9308      	str	r3, [sp, #32]
   88440:	e56c      	b.n	87f1c <_svfprintf_r+0x1558>
   88442:	2200      	movs	r2, #0
   88444:	2300      	movs	r3, #0
   88446:	980c      	ldr	r0, [sp, #48]	; 0x30
   88448:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8844a:	f004 fe01 	bl	8d050 <__aeabi_dcmpeq>
   8844e:	2800      	cmp	r0, #0
   88450:	f47f addb 	bne.w	8800a <_svfprintf_r+0x1646>
   88454:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88456:	f1c3 0301 	rsb	r3, r3, #1
   8845a:	9324      	str	r3, [sp, #144]	; 0x90
   8845c:	e5d6      	b.n	8800c <_svfprintf_r+0x1648>
   8845e:	992b      	ldr	r1, [sp, #172]	; 0xac
   88460:	f7ff bb59 	b.w	87b16 <_svfprintf_r+0x1152>
   88464:	07e9      	lsls	r1, r5, #31
   88466:	f57f aa35 	bpl.w	878d4 <_svfprintf_r+0xf10>
   8846a:	f7ff ba2f 	b.w	878cc <_svfprintf_r+0xf08>
   8846e:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88472:	e799      	b.n	883a8 <_svfprintf_r+0x19e4>
   88474:	900d      	str	r0, [sp, #52]	; 0x34
   88476:	e6b0      	b.n	881da <_svfprintf_r+0x1816>
   88478:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8847a:	f005 0501 	and.w	r5, r5, #1
   8847e:	4613      	mov	r3, r2
   88480:	432b      	orrs	r3, r5
   88482:	d104      	bne.n	8848e <_svfprintf_r+0x1aca>
   88484:	2301      	movs	r3, #1
   88486:	2666      	movs	r6, #102	; 0x66
   88488:	9308      	str	r3, [sp, #32]
   8848a:	930c      	str	r3, [sp, #48]	; 0x30
   8848c:	e546      	b.n	87f1c <_svfprintf_r+0x1558>
   8848e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88490:	2666      	movs	r6, #102	; 0x66
   88492:	3301      	adds	r3, #1
   88494:	441a      	add	r2, r3
   88496:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8849a:	920c      	str	r2, [sp, #48]	; 0x30
   8849c:	9308      	str	r3, [sp, #32]
   8849e:	e53d      	b.n	87f1c <_svfprintf_r+0x1558>
   884a0:	4b1b      	ldr	r3, [pc, #108]	; (88510 <_svfprintf_r+0x1b4c>)
   884a2:	930f      	str	r3, [sp, #60]	; 0x3c
   884a4:	f7ff bbe9 	b.w	87c7a <_svfprintf_r+0x12b6>
   884a8:	4a19      	ldr	r2, [pc, #100]	; (88510 <_svfprintf_r+0x1b4c>)
   884aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   884ac:	920f      	str	r2, [sp, #60]	; 0x3c
   884ae:	e4b1      	b.n	87e14 <_svfprintf_r+0x1450>
   884b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   884b2:	e6dd      	b.n	88270 <_svfprintf_r+0x18ac>
   884b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   884b6:	f89b 6001 	ldrb.w	r6, [fp, #1]
   884ba:	f853 0b04 	ldr.w	r0, [r3], #4
   884be:	4693      	mov	fp, r2
   884c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   884c4:	9009      	str	r0, [sp, #36]	; 0x24
   884c6:	930e      	str	r3, [sp, #56]	; 0x38
   884c8:	f7fe bac7 	b.w	86a5a <_svfprintf_r+0x96>
   884cc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   884d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   884d4:	f8aa 300c 	strh.w	r3, [sl, #12]
   884d8:	f7fe bc4d 	b.w	86d76 <_svfprintf_r+0x3b2>
   884dc:	4a0c      	ldr	r2, [pc, #48]	; (88510 <_svfprintf_r+0x1b4c>)
   884de:	920f      	str	r2, [sp, #60]	; 0x3c
   884e0:	e6e6      	b.n	882b0 <_svfprintf_r+0x18ec>
   884e2:	230c      	movs	r3, #12
   884e4:	f04f 32ff 	mov.w	r2, #4294967295
   884e8:	f8c9 3000 	str.w	r3, [r9]
   884ec:	920a      	str	r2, [sp, #40]	; 0x28
   884ee:	f7fe bc49 	b.w	86d84 <_svfprintf_r+0x3c0>
   884f2:	2302      	movs	r3, #2
   884f4:	931b      	str	r3, [sp, #108]	; 0x6c
   884f6:	f7ff b9e2 	b.w	878be <_svfprintf_r+0xefa>
   884fa:	2300      	movs	r3, #0
   884fc:	9312      	str	r3, [sp, #72]	; 0x48
   884fe:	9316      	str	r3, [sp, #88]	; 0x58
   88500:	e732      	b.n	88368 <_svfprintf_r+0x19a4>
   88502:	bf00      	nop
   88504:	0008d4fc 	.word	0x0008d4fc
   88508:	0008d4f4 	.word	0x0008d4f4
   8850c:	0008d4f8 	.word	0x0008d4f8
   88510:	0008d540 	.word	0x0008d540

00088514 <__sprint_r.part.0>:
   88514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88518:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8851a:	4690      	mov	r8, r2
   8851c:	049c      	lsls	r4, r3, #18
   8851e:	d52d      	bpl.n	8857c <__sprint_r.part.0+0x68>
   88520:	6893      	ldr	r3, [r2, #8]
   88522:	6812      	ldr	r2, [r2, #0]
   88524:	b343      	cbz	r3, 88578 <__sprint_r.part.0+0x64>
   88526:	468b      	mov	fp, r1
   88528:	4606      	mov	r6, r0
   8852a:	f102 0908 	add.w	r9, r2, #8
   8852e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   88532:	ea5f 079a 	movs.w	r7, sl, lsr #2
   88536:	d015      	beq.n	88564 <__sprint_r.part.0+0x50>
   88538:	2400      	movs	r4, #0
   8853a:	3d04      	subs	r5, #4
   8853c:	e001      	b.n	88542 <__sprint_r.part.0+0x2e>
   8853e:	42a7      	cmp	r7, r4
   88540:	d00e      	beq.n	88560 <__sprint_r.part.0+0x4c>
   88542:	465a      	mov	r2, fp
   88544:	4630      	mov	r0, r6
   88546:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8854a:	f002 f8f9 	bl	8a740 <_fputwc_r>
   8854e:	1c43      	adds	r3, r0, #1
   88550:	f104 0401 	add.w	r4, r4, #1
   88554:	d1f3      	bne.n	8853e <__sprint_r.part.0+0x2a>
   88556:	2300      	movs	r3, #0
   88558:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8855c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88560:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88564:	f02a 0a03 	bic.w	sl, sl, #3
   88568:	eba3 030a 	sub.w	r3, r3, sl
   8856c:	f8c8 3008 	str.w	r3, [r8, #8]
   88570:	f109 0908 	add.w	r9, r9, #8
   88574:	2b00      	cmp	r3, #0
   88576:	d1da      	bne.n	8852e <__sprint_r.part.0+0x1a>
   88578:	2000      	movs	r0, #0
   8857a:	e7ec      	b.n	88556 <__sprint_r.part.0+0x42>
   8857c:	f002 fa6a 	bl	8aa54 <__sfvwrite_r>
   88580:	2300      	movs	r3, #0
   88582:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8858a:	bf00      	nop

0008858c <_vfiprintf_r>:
   8858c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88590:	b0bb      	sub	sp, #236	; 0xec
   88592:	461c      	mov	r4, r3
   88594:	4689      	mov	r9, r1
   88596:	4690      	mov	r8, r2
   88598:	e9cd 3004 	strd	r3, r0, [sp, #16]
   8859c:	b118      	cbz	r0, 885a6 <_vfiprintf_r+0x1a>
   8859e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   885a0:	2b00      	cmp	r3, #0
   885a2:	f000 827a 	beq.w	88a9a <_vfiprintf_r+0x50e>
   885a6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   885aa:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   885ae:	07de      	lsls	r6, r3, #31
   885b0:	b28a      	uxth	r2, r1
   885b2:	d402      	bmi.n	885ba <_vfiprintf_r+0x2e>
   885b4:	058d      	lsls	r5, r1, #22
   885b6:	f140 851a 	bpl.w	88fee <_vfiprintf_r+0xa62>
   885ba:	0490      	lsls	r0, r2, #18
   885bc:	d40a      	bmi.n	885d4 <_vfiprintf_r+0x48>
   885be:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   885c2:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   885c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   885ca:	f8a9 200c 	strh.w	r2, [r9, #12]
   885ce:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   885d2:	b292      	uxth	r2, r2
   885d4:	0711      	lsls	r1, r2, #28
   885d6:	f140 80f6 	bpl.w	887c6 <_vfiprintf_r+0x23a>
   885da:	f8d9 3010 	ldr.w	r3, [r9, #16]
   885de:	2b00      	cmp	r3, #0
   885e0:	f000 80f1 	beq.w	887c6 <_vfiprintf_r+0x23a>
   885e4:	f002 031a 	and.w	r3, r2, #26
   885e8:	2b0a      	cmp	r3, #10
   885ea:	f000 80fa 	beq.w	887e2 <_vfiprintf_r+0x256>
   885ee:	2300      	movs	r3, #0
   885f0:	46cb      	mov	fp, r9
   885f2:	e9cd 3308 	strd	r3, r3, [sp, #32]
   885f6:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   885fa:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   885fe:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88602:	9303      	str	r3, [sp, #12]
   88604:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   88608:	f898 3000 	ldrb.w	r3, [r8]
   8860c:	2b00      	cmp	r3, #0
   8860e:	f000 81ed 	beq.w	889ec <_vfiprintf_r+0x460>
   88612:	4644      	mov	r4, r8
   88614:	e004      	b.n	88620 <_vfiprintf_r+0x94>
   88616:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8861a:	2b00      	cmp	r3, #0
   8861c:	f000 8127 	beq.w	8886e <_vfiprintf_r+0x2e2>
   88620:	2b25      	cmp	r3, #37	; 0x25
   88622:	d1f8      	bne.n	88616 <_vfiprintf_r+0x8a>
   88624:	ebb4 0508 	subs.w	r5, r4, r8
   88628:	f040 8125 	bne.w	88876 <_vfiprintf_r+0x2ea>
   8862c:	7823      	ldrb	r3, [r4, #0]
   8862e:	2b00      	cmp	r3, #0
   88630:	f000 81dc 	beq.w	889ec <_vfiprintf_r+0x460>
   88634:	f04f 0200 	mov.w	r2, #0
   88638:	2300      	movs	r3, #0
   8863a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   8863e:	f04f 32ff 	mov.w	r2, #4294967295
   88642:	252b      	movs	r5, #43	; 0x2b
   88644:	461f      	mov	r7, r3
   88646:	9302      	str	r3, [sp, #8]
   88648:	7863      	ldrb	r3, [r4, #1]
   8864a:	f104 0801 	add.w	r8, r4, #1
   8864e:	9200      	str	r2, [sp, #0]
   88650:	f108 0801 	add.w	r8, r8, #1
   88654:	f1a3 0220 	sub.w	r2, r3, #32
   88658:	2a5a      	cmp	r2, #90	; 0x5a
   8865a:	f200 8141 	bhi.w	888e0 <_vfiprintf_r+0x354>
   8865e:	e8df f012 	tbh	[pc, r2, lsl #1]
   88662:	0272      	.short	0x0272
   88664:	013f013f 	.word	0x013f013f
   88668:	013f026d 	.word	0x013f026d
   8866c:	013f013f 	.word	0x013f013f
   88670:	013f024b 	.word	0x013f024b
   88674:	006a013f 	.word	0x006a013f
   88678:	013f0227 	.word	0x013f0227
   8867c:	02310222 	.word	0x02310222
   88680:	022c013f 	.word	0x022c013f
   88684:	005b005b 	.word	0x005b005b
   88688:	005b005b 	.word	0x005b005b
   8868c:	005b005b 	.word	0x005b005b
   88690:	005b005b 	.word	0x005b005b
   88694:	013f005b 	.word	0x013f005b
   88698:	013f013f 	.word	0x013f013f
   8869c:	013f013f 	.word	0x013f013f
   886a0:	013f013f 	.word	0x013f013f
   886a4:	013f013f 	.word	0x013f013f
   886a8:	007a020e 	.word	0x007a020e
   886ac:	013f013f 	.word	0x013f013f
   886b0:	013f013f 	.word	0x013f013f
   886b4:	013f013f 	.word	0x013f013f
   886b8:	013f013f 	.word	0x013f013f
   886bc:	013f013f 	.word	0x013f013f
   886c0:	013f00d7 	.word	0x013f00d7
   886c4:	013f013f 	.word	0x013f013f
   886c8:	013f01f2 	.word	0x013f01f2
   886cc:	013f0297 	.word	0x013f0297
   886d0:	0500013f 	.word	0x0500013f
   886d4:	013f013f 	.word	0x013f013f
   886d8:	013f013f 	.word	0x013f013f
   886dc:	013f013f 	.word	0x013f013f
   886e0:	013f013f 	.word	0x013f013f
   886e4:	013f013f 	.word	0x013f013f
   886e8:	007c020e 	.word	0x007c020e
   886ec:	013f013f 	.word	0x013f013f
   886f0:	028a013f 	.word	0x028a013f
   886f4:	0075007c 	.word	0x0075007c
   886f8:	027d013f 	.word	0x027d013f
   886fc:	02b6013f 	.word	0x02b6013f
   88700:	02a600d9 	.word	0x02a600d9
   88704:	013f0075 	.word	0x013f0075
   88708:	007201f2 	.word	0x007201f2
   8870c:	013f04fe 	.word	0x013f04fe
   88710:	051c013f 	.word	0x051c013f
   88714:	0072013f 	.word	0x0072013f
   88718:	2100      	movs	r1, #0
   8871a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8871e:	f818 3b01 	ldrb.w	r3, [r8], #1
   88722:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88726:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8872a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8872e:	2a09      	cmp	r2, #9
   88730:	d9f5      	bls.n	8871e <_vfiprintf_r+0x192>
   88732:	9102      	str	r1, [sp, #8]
   88734:	e78e      	b.n	88654 <_vfiprintf_r+0xc8>
   88736:	9b04      	ldr	r3, [sp, #16]
   88738:	f853 2b04 	ldr.w	r2, [r3], #4
   8873c:	2a00      	cmp	r2, #0
   8873e:	9202      	str	r2, [sp, #8]
   88740:	9304      	str	r3, [sp, #16]
   88742:	f2c0 81ad 	blt.w	88aa0 <_vfiprintf_r+0x514>
   88746:	f898 3000 	ldrb.w	r3, [r8]
   8874a:	e781      	b.n	88650 <_vfiprintf_r+0xc4>
   8874c:	f898 3000 	ldrb.w	r3, [r8]
   88750:	f047 0720 	orr.w	r7, r7, #32
   88754:	e77c      	b.n	88650 <_vfiprintf_r+0xc4>
   88756:	f047 0710 	orr.w	r7, r7, #16
   8875a:	06bc      	lsls	r4, r7, #26
   8875c:	f140 8158 	bpl.w	88a10 <_vfiprintf_r+0x484>
   88760:	9c04      	ldr	r4, [sp, #16]
   88762:	3407      	adds	r4, #7
   88764:	f024 0307 	bic.w	r3, r4, #7
   88768:	4619      	mov	r1, r3
   8876a:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   8876e:	4614      	mov	r4, r2
   88770:	461d      	mov	r5, r3
   88772:	9104      	str	r1, [sp, #16]
   88774:	2a00      	cmp	r2, #0
   88776:	f173 0300 	sbcs.w	r3, r3, #0
   8877a:	f2c0 841e 	blt.w	88fba <_vfiprintf_r+0xa2e>
   8877e:	9b00      	ldr	r3, [sp, #0]
   88780:	3301      	adds	r3, #1
   88782:	f000 84f0 	beq.w	89166 <_vfiprintf_r+0xbda>
   88786:	ea54 0305 	orrs.w	r3, r4, r5
   8878a:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   8878e:	f000 83fc 	beq.w	88f8a <_vfiprintf_r+0x9fe>
   88792:	2d00      	cmp	r5, #0
   88794:	bf08      	it	eq
   88796:	2c0a      	cmpeq	r4, #10
   88798:	f080 84a9 	bcs.w	890ee <_vfiprintf_r+0xb62>
   8879c:	2301      	movs	r3, #1
   8879e:	464f      	mov	r7, r9
   887a0:	3430      	adds	r4, #48	; 0x30
   887a2:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   887a6:	9301      	str	r3, [sp, #4]
   887a8:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   887ac:	e9dd 2100 	ldrd	r2, r1, [sp]
   887b0:	428a      	cmp	r2, r1
   887b2:	bfb8      	it	lt
   887b4:	460a      	movlt	r2, r1
   887b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   887ba:	4615      	mov	r5, r2
   887bc:	2b00      	cmp	r3, #0
   887be:	f000 809d 	beq.w	888fc <_vfiprintf_r+0x370>
   887c2:	3501      	adds	r5, #1
   887c4:	e09a      	b.n	888fc <_vfiprintf_r+0x370>
   887c6:	4649      	mov	r1, r9
   887c8:	9805      	ldr	r0, [sp, #20]
   887ca:	f000 fdb9 	bl	89340 <__swsetup_r>
   887ce:	2800      	cmp	r0, #0
   887d0:	f040 854a 	bne.w	89268 <_vfiprintf_r+0xcdc>
   887d4:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   887d8:	f002 031a 	and.w	r3, r2, #26
   887dc:	2b0a      	cmp	r3, #10
   887de:	f47f af06 	bne.w	885ee <_vfiprintf_r+0x62>
   887e2:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   887e6:	2b00      	cmp	r3, #0
   887e8:	f6ff af01 	blt.w	885ee <_vfiprintf_r+0x62>
   887ec:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   887f0:	07de      	lsls	r6, r3, #31
   887f2:	d402      	bmi.n	887fa <_vfiprintf_r+0x26e>
   887f4:	0595      	lsls	r5, r2, #22
   887f6:	f140 850e 	bpl.w	89216 <_vfiprintf_r+0xc8a>
   887fa:	4623      	mov	r3, r4
   887fc:	4642      	mov	r2, r8
   887fe:	4649      	mov	r1, r9
   88800:	9805      	ldr	r0, [sp, #20]
   88802:	f000 fd59 	bl	892b8 <__sbprintf>
   88806:	9003      	str	r0, [sp, #12]
   88808:	9803      	ldr	r0, [sp, #12]
   8880a:	b03b      	add	sp, #236	; 0xec
   8880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88810:	f047 0710 	orr.w	r7, r7, #16
   88814:	06b8      	lsls	r0, r7, #26
   88816:	9c04      	ldr	r4, [sp, #16]
   88818:	f140 8109 	bpl.w	88a2e <_vfiprintf_r+0x4a2>
   8881c:	3407      	adds	r4, #7
   8881e:	f024 0307 	bic.w	r3, r4, #7
   88822:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88826:	9304      	str	r3, [sp, #16]
   88828:	2300      	movs	r3, #0
   8882a:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   8882e:	f04f 0200 	mov.w	r2, #0
   88832:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88836:	9a00      	ldr	r2, [sp, #0]
   88838:	4611      	mov	r1, r2
   8883a:	3101      	adds	r1, #1
   8883c:	f000 81db 	beq.w	88bf6 <_vfiprintf_r+0x66a>
   88840:	ea54 0105 	orrs.w	r1, r4, r5
   88844:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   88848:	f040 81d4 	bne.w	88bf4 <_vfiprintf_r+0x668>
   8884c:	2a00      	cmp	r2, #0
   8884e:	f040 848d 	bne.w	8916c <_vfiprintf_r+0xbe0>
   88852:	2b00      	cmp	r3, #0
   88854:	f040 839e 	bne.w	88f94 <_vfiprintf_r+0xa08>
   88858:	f019 0301 	ands.w	r3, r9, #1
   8885c:	9301      	str	r3, [sp, #4]
   8885e:	f000 83c3 	beq.w	88fe8 <_vfiprintf_r+0xa5c>
   88862:	2330      	movs	r3, #48	; 0x30
   88864:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   88868:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   8886c:	e79e      	b.n	887ac <_vfiprintf_r+0x220>
   8886e:	ebb4 0508 	subs.w	r5, r4, r8
   88872:	f000 80bb 	beq.w	889ec <_vfiprintf_r+0x460>
   88876:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8887a:	3301      	adds	r3, #1
   8887c:	442a      	add	r2, r5
   8887e:	2b07      	cmp	r3, #7
   88880:	e9ca 8500 	strd	r8, r5, [sl]
   88884:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   88888:	dc06      	bgt.n	88898 <_vfiprintf_r+0x30c>
   8888a:	f10a 0a08 	add.w	sl, sl, #8
   8888e:	9a03      	ldr	r2, [sp, #12]
   88890:	7823      	ldrb	r3, [r4, #0]
   88892:	442a      	add	r2, r5
   88894:	9203      	str	r2, [sp, #12]
   88896:	e6ca      	b.n	8862e <_vfiprintf_r+0xa2>
   88898:	2a00      	cmp	r2, #0
   8889a:	f000 8372 	beq.w	88f82 <_vfiprintf_r+0x9f6>
   8889e:	4659      	mov	r1, fp
   888a0:	9805      	ldr	r0, [sp, #20]
   888a2:	aa0e      	add	r2, sp, #56	; 0x38
   888a4:	f7ff fe36 	bl	88514 <__sprint_r.part.0>
   888a8:	b950      	cbnz	r0, 888c0 <_vfiprintf_r+0x334>
   888aa:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   888ae:	e7ee      	b.n	8888e <_vfiprintf_r+0x302>
   888b0:	4659      	mov	r1, fp
   888b2:	9805      	ldr	r0, [sp, #20]
   888b4:	aa0e      	add	r2, sp, #56	; 0x38
   888b6:	f7ff fe2d 	bl	88514 <__sprint_r.part.0>
   888ba:	2800      	cmp	r0, #0
   888bc:	f000 808d 	beq.w	889da <_vfiprintf_r+0x44e>
   888c0:	46d9      	mov	r9, fp
   888c2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   888c6:	f013 0f01 	tst.w	r3, #1
   888ca:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   888ce:	f000 8095 	beq.w	889fc <_vfiprintf_r+0x470>
   888d2:	065b      	lsls	r3, r3, #25
   888d4:	f100 84d4 	bmi.w	89280 <_vfiprintf_r+0xcf4>
   888d8:	9803      	ldr	r0, [sp, #12]
   888da:	b03b      	add	sp, #236	; 0xec
   888dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   888e0:	2b00      	cmp	r3, #0
   888e2:	f000 8083 	beq.w	889ec <_vfiprintf_r+0x460>
   888e6:	2501      	movs	r5, #1
   888e8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   888ec:	f04f 0300 	mov.w	r3, #0
   888f0:	9501      	str	r5, [sp, #4]
   888f2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   888f6:	ae21      	add	r6, sp, #132	; 0x84
   888f8:	2300      	movs	r3, #0
   888fa:	9300      	str	r3, [sp, #0]
   888fc:	f017 0302 	ands.w	r3, r7, #2
   88900:	9307      	str	r3, [sp, #28]
   88902:	bf18      	it	ne
   88904:	3502      	addne	r5, #2
   88906:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   8890a:	9306      	str	r3, [sp, #24]
   8890c:	d104      	bne.n	88918 <_vfiprintf_r+0x38c>
   8890e:	9b02      	ldr	r3, [sp, #8]
   88910:	1b5c      	subs	r4, r3, r5
   88912:	2c00      	cmp	r4, #0
   88914:	f300 8274 	bgt.w	88e00 <_vfiprintf_r+0x874>
   88918:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   8891c:	1c48      	adds	r0, r1, #1
   8891e:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   88922:	b174      	cbz	r4, 88942 <_vfiprintf_r+0x3b6>
   88924:	2101      	movs	r1, #1
   88926:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   8892a:	440a      	add	r2, r1
   8892c:	2807      	cmp	r0, #7
   8892e:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   88932:	e9ca 4100 	strd	r4, r1, [sl]
   88936:	f300 8246 	bgt.w	88dc6 <_vfiprintf_r+0x83a>
   8893a:	4601      	mov	r1, r0
   8893c:	f10a 0a08 	add.w	sl, sl, #8
   88940:	3001      	adds	r0, #1
   88942:	9b07      	ldr	r3, [sp, #28]
   88944:	b1c3      	cbz	r3, 88978 <_vfiprintf_r+0x3ec>
   88946:	2102      	movs	r1, #2
   88948:	ab0d      	add	r3, sp, #52	; 0x34
   8894a:	440a      	add	r2, r1
   8894c:	2807      	cmp	r0, #7
   8894e:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   88952:	e9ca 3100 	strd	r3, r1, [sl]
   88956:	f340 824e 	ble.w	88df6 <_vfiprintf_r+0x86a>
   8895a:	2a00      	cmp	r2, #0
   8895c:	f000 830c 	beq.w	88f78 <_vfiprintf_r+0x9ec>
   88960:	4659      	mov	r1, fp
   88962:	9805      	ldr	r0, [sp, #20]
   88964:	aa0e      	add	r2, sp, #56	; 0x38
   88966:	f7ff fdd5 	bl	88514 <__sprint_r.part.0>
   8896a:	2800      	cmp	r0, #0
   8896c:	d1a8      	bne.n	888c0 <_vfiprintf_r+0x334>
   8896e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88972:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88976:	1c48      	adds	r0, r1, #1
   88978:	9b06      	ldr	r3, [sp, #24]
   8897a:	2b80      	cmp	r3, #128	; 0x80
   8897c:	f000 817e 	beq.w	88c7c <_vfiprintf_r+0x6f0>
   88980:	e9dd 3400 	ldrd	r3, r4, [sp]
   88984:	1b1c      	subs	r4, r3, r4
   88986:	2c00      	cmp	r4, #0
   88988:	f300 81d3 	bgt.w	88d32 <_vfiprintf_r+0x7a6>
   8898c:	9b01      	ldr	r3, [sp, #4]
   8898e:	2807      	cmp	r0, #7
   88990:	441a      	add	r2, r3
   88992:	e9ca 6300 	strd	r6, r3, [sl]
   88996:	9210      	str	r2, [sp, #64]	; 0x40
   88998:	900f      	str	r0, [sp, #60]	; 0x3c
   8899a:	f340 816c 	ble.w	88c76 <_vfiprintf_r+0x6ea>
   8899e:	2a00      	cmp	r2, #0
   889a0:	f000 8276 	beq.w	88e90 <_vfiprintf_r+0x904>
   889a4:	4659      	mov	r1, fp
   889a6:	9805      	ldr	r0, [sp, #20]
   889a8:	aa0e      	add	r2, sp, #56	; 0x38
   889aa:	f7ff fdb3 	bl	88514 <__sprint_r.part.0>
   889ae:	2800      	cmp	r0, #0
   889b0:	d186      	bne.n	888c0 <_vfiprintf_r+0x334>
   889b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   889b4:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   889b8:	0779      	lsls	r1, r7, #29
   889ba:	d504      	bpl.n	889c6 <_vfiprintf_r+0x43a>
   889bc:	9b02      	ldr	r3, [sp, #8]
   889be:	1b5c      	subs	r4, r3, r5
   889c0:	2c00      	cmp	r4, #0
   889c2:	f300 826e 	bgt.w	88ea2 <_vfiprintf_r+0x916>
   889c6:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   889ca:	42a9      	cmp	r1, r5
   889cc:	bfac      	ite	ge
   889ce:	185b      	addge	r3, r3, r1
   889d0:	195b      	addlt	r3, r3, r5
   889d2:	9303      	str	r3, [sp, #12]
   889d4:	2a00      	cmp	r2, #0
   889d6:	f47f af6b 	bne.w	888b0 <_vfiprintf_r+0x324>
   889da:	2300      	movs	r3, #0
   889dc:	930f      	str	r3, [sp, #60]	; 0x3c
   889de:	f898 3000 	ldrb.w	r3, [r8]
   889e2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   889e6:	2b00      	cmp	r3, #0
   889e8:	f47f ae13 	bne.w	88612 <_vfiprintf_r+0x86>
   889ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   889ee:	46d9      	mov	r9, fp
   889f0:	2b00      	cmp	r3, #0
   889f2:	f040 8426 	bne.w	89242 <_vfiprintf_r+0xcb6>
   889f6:	2300      	movs	r3, #0
   889f8:	930f      	str	r3, [sp, #60]	; 0x3c
   889fa:	e762      	b.n	888c2 <_vfiprintf_r+0x336>
   889fc:	059a      	lsls	r2, r3, #22
   889fe:	f53f af68 	bmi.w	888d2 <_vfiprintf_r+0x346>
   88a02:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88a06:	f002 f9cf 	bl	8ada8 <__retarget_lock_release_recursive>
   88a0a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88a0e:	e760      	b.n	888d2 <_vfiprintf_r+0x346>
   88a10:	9b04      	ldr	r3, [sp, #16]
   88a12:	06f8      	lsls	r0, r7, #27
   88a14:	f853 4b04 	ldr.w	r4, [r3], #4
   88a18:	f100 8308 	bmi.w	8902c <_vfiprintf_r+0xaa0>
   88a1c:	0679      	lsls	r1, r7, #25
   88a1e:	f140 8302 	bpl.w	89026 <_vfiprintf_r+0xa9a>
   88a22:	b224      	sxth	r4, r4
   88a24:	17e5      	asrs	r5, r4, #31
   88a26:	9304      	str	r3, [sp, #16]
   88a28:	4622      	mov	r2, r4
   88a2a:	462b      	mov	r3, r5
   88a2c:	e6a2      	b.n	88774 <_vfiprintf_r+0x1e8>
   88a2e:	f854 3b04 	ldr.w	r3, [r4], #4
   88a32:	06f9      	lsls	r1, r7, #27
   88a34:	9404      	str	r4, [sp, #16]
   88a36:	f100 82f3 	bmi.w	89020 <_vfiprintf_r+0xa94>
   88a3a:	067a      	lsls	r2, r7, #25
   88a3c:	f140 82ed 	bpl.w	8901a <_vfiprintf_r+0xa8e>
   88a40:	2500      	movs	r5, #0
   88a42:	b29c      	uxth	r4, r3
   88a44:	e6f0      	b.n	88828 <_vfiprintf_r+0x29c>
   88a46:	f04f 0300 	mov.w	r3, #0
   88a4a:	9c04      	ldr	r4, [sp, #16]
   88a4c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88a50:	f854 6b04 	ldr.w	r6, [r4], #4
   88a54:	2e00      	cmp	r6, #0
   88a56:	f000 8397 	beq.w	89188 <_vfiprintf_r+0xbfc>
   88a5a:	9a00      	ldr	r2, [sp, #0]
   88a5c:	4613      	mov	r3, r2
   88a5e:	3301      	adds	r3, #1
   88a60:	f000 831e 	beq.w	890a0 <_vfiprintf_r+0xb14>
   88a64:	2100      	movs	r1, #0
   88a66:	4630      	mov	r0, r6
   88a68:	f002 fcdc 	bl	8b424 <memchr>
   88a6c:	2800      	cmp	r0, #0
   88a6e:	f000 83d8 	beq.w	89222 <_vfiprintf_r+0xc96>
   88a72:	1b83      	subs	r3, r0, r6
   88a74:	9301      	str	r3, [sp, #4]
   88a76:	2300      	movs	r3, #0
   88a78:	9404      	str	r4, [sp, #16]
   88a7a:	9300      	str	r3, [sp, #0]
   88a7c:	e696      	b.n	887ac <_vfiprintf_r+0x220>
   88a7e:	2501      	movs	r5, #1
   88a80:	f04f 0200 	mov.w	r2, #0
   88a84:	9c04      	ldr	r4, [sp, #16]
   88a86:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88a8a:	f854 3b04 	ldr.w	r3, [r4], #4
   88a8e:	9501      	str	r5, [sp, #4]
   88a90:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88a94:	9404      	str	r4, [sp, #16]
   88a96:	ae21      	add	r6, sp, #132	; 0x84
   88a98:	e72e      	b.n	888f8 <_vfiprintf_r+0x36c>
   88a9a:	f001 fdb1 	bl	8a600 <__sinit>
   88a9e:	e582      	b.n	885a6 <_vfiprintf_r+0x1a>
   88aa0:	9b02      	ldr	r3, [sp, #8]
   88aa2:	425b      	negs	r3, r3
   88aa4:	9302      	str	r3, [sp, #8]
   88aa6:	f898 3000 	ldrb.w	r3, [r8]
   88aaa:	f047 0704 	orr.w	r7, r7, #4
   88aae:	e5cf      	b.n	88650 <_vfiprintf_r+0xc4>
   88ab0:	f898 3000 	ldrb.w	r3, [r8]
   88ab4:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   88ab8:	e5ca      	b.n	88650 <_vfiprintf_r+0xc4>
   88aba:	f898 3000 	ldrb.w	r3, [r8]
   88abe:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   88ac2:	e5c5      	b.n	88650 <_vfiprintf_r+0xc4>
   88ac4:	4641      	mov	r1, r8
   88ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
   88aca:	2b2a      	cmp	r3, #42	; 0x2a
   88acc:	f000 83dd 	beq.w	8928a <_vfiprintf_r+0xcfe>
   88ad0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88ad4:	2a09      	cmp	r2, #9
   88ad6:	4688      	mov	r8, r1
   88ad8:	bf98      	it	ls
   88ada:	2100      	movls	r1, #0
   88adc:	f200 83ad 	bhi.w	8923a <_vfiprintf_r+0xcae>
   88ae0:	f818 3b01 	ldrb.w	r3, [r8], #1
   88ae4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88ae8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   88aec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88af0:	2a09      	cmp	r2, #9
   88af2:	d9f5      	bls.n	88ae0 <_vfiprintf_r+0x554>
   88af4:	9100      	str	r1, [sp, #0]
   88af6:	e5ad      	b.n	88654 <_vfiprintf_r+0xc8>
   88af8:	9c05      	ldr	r4, [sp, #20]
   88afa:	4620      	mov	r0, r4
   88afc:	f002 f94a 	bl	8ad94 <_localeconv_r>
   88b00:	6843      	ldr	r3, [r0, #4]
   88b02:	4618      	mov	r0, r3
   88b04:	930a      	str	r3, [sp, #40]	; 0x28
   88b06:	f003 fb3f 	bl	8c188 <strlen>
   88b0a:	4603      	mov	r3, r0
   88b0c:	4620      	mov	r0, r4
   88b0e:	930b      	str	r3, [sp, #44]	; 0x2c
   88b10:	461c      	mov	r4, r3
   88b12:	f002 f93f 	bl	8ad94 <_localeconv_r>
   88b16:	6882      	ldr	r2, [r0, #8]
   88b18:	9209      	str	r2, [sp, #36]	; 0x24
   88b1a:	2c00      	cmp	r4, #0
   88b1c:	f43f ae13 	beq.w	88746 <_vfiprintf_r+0x1ba>
   88b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88b22:	2b00      	cmp	r3, #0
   88b24:	f43f ae0f 	beq.w	88746 <_vfiprintf_r+0x1ba>
   88b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88b2a:	781b      	ldrb	r3, [r3, #0]
   88b2c:	2b00      	cmp	r3, #0
   88b2e:	f43f ae0a 	beq.w	88746 <_vfiprintf_r+0x1ba>
   88b32:	f898 3000 	ldrb.w	r3, [r8]
   88b36:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   88b3a:	e589      	b.n	88650 <_vfiprintf_r+0xc4>
   88b3c:	f898 3000 	ldrb.w	r3, [r8]
   88b40:	f047 0701 	orr.w	r7, r7, #1
   88b44:	e584      	b.n	88650 <_vfiprintf_r+0xc4>
   88b46:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   88b4a:	2b00      	cmp	r3, #0
   88b4c:	f47f adfb 	bne.w	88746 <_vfiprintf_r+0x1ba>
   88b50:	2320      	movs	r3, #32
   88b52:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88b56:	f898 3000 	ldrb.w	r3, [r8]
   88b5a:	e579      	b.n	88650 <_vfiprintf_r+0xc4>
   88b5c:	f898 3000 	ldrb.w	r3, [r8]
   88b60:	2b6c      	cmp	r3, #108	; 0x6c
   88b62:	bf03      	ittte	eq
   88b64:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88b68:	f047 0720 	orreq.w	r7, r7, #32
   88b6c:	f108 0801 	addeq.w	r8, r8, #1
   88b70:	f047 0710 	orrne.w	r7, r7, #16
   88b74:	e56c      	b.n	88650 <_vfiprintf_r+0xc4>
   88b76:	f898 3000 	ldrb.w	r3, [r8]
   88b7a:	2b68      	cmp	r3, #104	; 0x68
   88b7c:	bf03      	ittte	eq
   88b7e:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88b82:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   88b86:	f108 0801 	addeq.w	r8, r8, #1
   88b8a:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   88b8e:	e55f      	b.n	88650 <_vfiprintf_r+0xc4>
   88b90:	f047 0910 	orr.w	r9, r7, #16
   88b94:	f019 0f20 	tst.w	r9, #32
   88b98:	9c04      	ldr	r4, [sp, #16]
   88b9a:	f000 8200 	beq.w	88f9e <_vfiprintf_r+0xa12>
   88b9e:	3407      	adds	r4, #7
   88ba0:	f024 0307 	bic.w	r3, r4, #7
   88ba4:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88ba8:	9304      	str	r3, [sp, #16]
   88baa:	2301      	movs	r3, #1
   88bac:	e63f      	b.n	8882e <_vfiprintf_r+0x2a2>
   88bae:	f647 0330 	movw	r3, #30768	; 0x7830
   88bb2:	9c04      	ldr	r4, [sp, #16]
   88bb4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   88bb8:	f854 2b04 	ldr.w	r2, [r4], #4
   88bbc:	4bbf      	ldr	r3, [pc, #764]	; (88ebc <_vfiprintf_r+0x930>)
   88bbe:	9404      	str	r4, [sp, #16]
   88bc0:	9308      	str	r3, [sp, #32]
   88bc2:	4614      	mov	r4, r2
   88bc4:	2500      	movs	r5, #0
   88bc6:	2302      	movs	r3, #2
   88bc8:	f047 0902 	orr.w	r9, r7, #2
   88bcc:	e62f      	b.n	8882e <_vfiprintf_r+0x2a2>
   88bce:	06bb      	lsls	r3, r7, #26
   88bd0:	f100 8232 	bmi.w	89038 <_vfiprintf_r+0xaac>
   88bd4:	06fe      	lsls	r6, r7, #27
   88bd6:	f100 82cf 	bmi.w	89178 <_vfiprintf_r+0xbec>
   88bda:	067d      	lsls	r5, r7, #25
   88bdc:	f100 8301 	bmi.w	891e2 <_vfiprintf_r+0xc56>
   88be0:	05bc      	lsls	r4, r7, #22
   88be2:	f140 82c9 	bpl.w	89178 <_vfiprintf_r+0xbec>
   88be6:	9c04      	ldr	r4, [sp, #16]
   88be8:	9a03      	ldr	r2, [sp, #12]
   88bea:	f854 3b04 	ldr.w	r3, [r4], #4
   88bee:	701a      	strb	r2, [r3, #0]
   88bf0:	9404      	str	r4, [sp, #16]
   88bf2:	e509      	b.n	88608 <_vfiprintf_r+0x7c>
   88bf4:	46b9      	mov	r9, r7
   88bf6:	2b01      	cmp	r3, #1
   88bf8:	f43f adcb 	beq.w	88792 <_vfiprintf_r+0x206>
   88bfc:	2b02      	cmp	r3, #2
   88bfe:	ae3a      	add	r6, sp, #232	; 0xe8
   88c00:	d113      	bne.n	88c2a <_vfiprintf_r+0x69e>
   88c02:	9808      	ldr	r0, [sp, #32]
   88c04:	0923      	lsrs	r3, r4, #4
   88c06:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   88c0a:	0929      	lsrs	r1, r5, #4
   88c0c:	f004 020f 	and.w	r2, r4, #15
   88c10:	460d      	mov	r5, r1
   88c12:	461c      	mov	r4, r3
   88c14:	5c83      	ldrb	r3, [r0, r2]
   88c16:	f806 3d01 	strb.w	r3, [r6, #-1]!
   88c1a:	ea54 0305 	orrs.w	r3, r4, r5
   88c1e:	d1f1      	bne.n	88c04 <_vfiprintf_r+0x678>
   88c20:	ab3a      	add	r3, sp, #232	; 0xe8
   88c22:	1b9b      	subs	r3, r3, r6
   88c24:	464f      	mov	r7, r9
   88c26:	9301      	str	r3, [sp, #4]
   88c28:	e5c0      	b.n	887ac <_vfiprintf_r+0x220>
   88c2a:	08e2      	lsrs	r2, r4, #3
   88c2c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   88c30:	08e9      	lsrs	r1, r5, #3
   88c32:	f004 0307 	and.w	r3, r4, #7
   88c36:	460d      	mov	r5, r1
   88c38:	4614      	mov	r4, r2
   88c3a:	3330      	adds	r3, #48	; 0x30
   88c3c:	ea54 0105 	orrs.w	r1, r4, r5
   88c40:	4632      	mov	r2, r6
   88c42:	f806 3d01 	strb.w	r3, [r6, #-1]!
   88c46:	d1f0      	bne.n	88c2a <_vfiprintf_r+0x69e>
   88c48:	f019 0f01 	tst.w	r9, #1
   88c4c:	d0e8      	beq.n	88c20 <_vfiprintf_r+0x694>
   88c4e:	2b30      	cmp	r3, #48	; 0x30
   88c50:	d0e6      	beq.n	88c20 <_vfiprintf_r+0x694>
   88c52:	2330      	movs	r3, #48	; 0x30
   88c54:	3a02      	subs	r2, #2
   88c56:	f806 3c01 	strb.w	r3, [r6, #-1]
   88c5a:	ab3a      	add	r3, sp, #232	; 0xe8
   88c5c:	1a9b      	subs	r3, r3, r2
   88c5e:	464f      	mov	r7, r9
   88c60:	4616      	mov	r6, r2
   88c62:	9301      	str	r3, [sp, #4]
   88c64:	e5a2      	b.n	887ac <_vfiprintf_r+0x220>
   88c66:	2301      	movs	r3, #1
   88c68:	9a01      	ldr	r2, [sp, #4]
   88c6a:	930f      	str	r3, [sp, #60]	; 0x3c
   88c6c:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   88c70:	9212      	str	r2, [sp, #72]	; 0x48
   88c72:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88c76:	f10a 0a08 	add.w	sl, sl, #8
   88c7a:	e69d      	b.n	889b8 <_vfiprintf_r+0x42c>
   88c7c:	9b02      	ldr	r3, [sp, #8]
   88c7e:	1b5c      	subs	r4, r3, r5
   88c80:	2c00      	cmp	r4, #0
   88c82:	f77f ae7d 	ble.w	88980 <_vfiprintf_r+0x3f4>
   88c86:	2c10      	cmp	r4, #16
   88c88:	f340 82ea 	ble.w	89260 <_vfiprintf_r+0xcd4>
   88c8c:	f8df 9230 	ldr.w	r9, [pc, #560]	; 88ec0 <_vfiprintf_r+0x934>
   88c90:	4650      	mov	r0, sl
   88c92:	9706      	str	r7, [sp, #24]
   88c94:	46b2      	mov	sl, r6
   88c96:	464e      	mov	r6, r9
   88c98:	46c1      	mov	r9, r8
   88c9a:	46a8      	mov	r8, r5
   88c9c:	9d05      	ldr	r5, [sp, #20]
   88c9e:	e006      	b.n	88cae <_vfiprintf_r+0x722>
   88ca0:	f101 0c02 	add.w	ip, r1, #2
   88ca4:	4619      	mov	r1, r3
   88ca6:	3008      	adds	r0, #8
   88ca8:	3c10      	subs	r4, #16
   88caa:	2c10      	cmp	r4, #16
   88cac:	dd1a      	ble.n	88ce4 <_vfiprintf_r+0x758>
   88cae:	2710      	movs	r7, #16
   88cb0:	1c4b      	adds	r3, r1, #1
   88cb2:	3210      	adds	r2, #16
   88cb4:	2b07      	cmp	r3, #7
   88cb6:	9210      	str	r2, [sp, #64]	; 0x40
   88cb8:	6006      	str	r6, [r0, #0]
   88cba:	6047      	str	r7, [r0, #4]
   88cbc:	930f      	str	r3, [sp, #60]	; 0x3c
   88cbe:	ddef      	ble.n	88ca0 <_vfiprintf_r+0x714>
   88cc0:	2a00      	cmp	r2, #0
   88cc2:	d07b      	beq.n	88dbc <_vfiprintf_r+0x830>
   88cc4:	4659      	mov	r1, fp
   88cc6:	4628      	mov	r0, r5
   88cc8:	aa0e      	add	r2, sp, #56	; 0x38
   88cca:	f7ff fc23 	bl	88514 <__sprint_r.part.0>
   88cce:	2800      	cmp	r0, #0
   88cd0:	f47f adf6 	bne.w	888c0 <_vfiprintf_r+0x334>
   88cd4:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88cd8:	3c10      	subs	r4, #16
   88cda:	2c10      	cmp	r4, #16
   88cdc:	a811      	add	r0, sp, #68	; 0x44
   88cde:	f101 0c01 	add.w	ip, r1, #1
   88ce2:	dce4      	bgt.n	88cae <_vfiprintf_r+0x722>
   88ce4:	4645      	mov	r5, r8
   88ce6:	46c8      	mov	r8, r9
   88ce8:	46b1      	mov	r9, r6
   88cea:	4656      	mov	r6, sl
   88cec:	4682      	mov	sl, r0
   88cee:	9f06      	ldr	r7, [sp, #24]
   88cf0:	4422      	add	r2, r4
   88cf2:	f1bc 0f07 	cmp.w	ip, #7
   88cf6:	e9ca 9400 	strd	r9, r4, [sl]
   88cfa:	9210      	str	r2, [sp, #64]	; 0x40
   88cfc:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   88d00:	f340 817e 	ble.w	89000 <_vfiprintf_r+0xa74>
   88d04:	2a00      	cmp	r2, #0
   88d06:	f000 825c 	beq.w	891c2 <_vfiprintf_r+0xc36>
   88d0a:	4659      	mov	r1, fp
   88d0c:	9805      	ldr	r0, [sp, #20]
   88d0e:	aa0e      	add	r2, sp, #56	; 0x38
   88d10:	f7ff fc00 	bl	88514 <__sprint_r.part.0>
   88d14:	2800      	cmp	r0, #0
   88d16:	f47f add3 	bne.w	888c0 <_vfiprintf_r+0x334>
   88d1a:	e9dd 3400 	ldrd	r3, r4, [sp]
   88d1e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88d22:	1b1c      	subs	r4, r3, r4
   88d24:	2c00      	cmp	r4, #0
   88d26:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88d2a:	f101 0001 	add.w	r0, r1, #1
   88d2e:	f77f ae2d 	ble.w	8898c <_vfiprintf_r+0x400>
   88d32:	2c10      	cmp	r4, #16
   88d34:	f8df 9188 	ldr.w	r9, [pc, #392]	; 88ec0 <_vfiprintf_r+0x934>
   88d38:	dd2f      	ble.n	88d9a <_vfiprintf_r+0x80e>
   88d3a:	46d4      	mov	ip, sl
   88d3c:	46b2      	mov	sl, r6
   88d3e:	464e      	mov	r6, r9
   88d40:	46c1      	mov	r9, r8
   88d42:	46a8      	mov	r8, r5
   88d44:	9d05      	ldr	r5, [sp, #20]
   88d46:	e006      	b.n	88d56 <_vfiprintf_r+0x7ca>
   88d48:	1c88      	adds	r0, r1, #2
   88d4a:	4619      	mov	r1, r3
   88d4c:	f10c 0c08 	add.w	ip, ip, #8
   88d50:	3c10      	subs	r4, #16
   88d52:	2c10      	cmp	r4, #16
   88d54:	dd1c      	ble.n	88d90 <_vfiprintf_r+0x804>
   88d56:	2010      	movs	r0, #16
   88d58:	1c4b      	adds	r3, r1, #1
   88d5a:	3210      	adds	r2, #16
   88d5c:	2b07      	cmp	r3, #7
   88d5e:	9210      	str	r2, [sp, #64]	; 0x40
   88d60:	f8cc 6000 	str.w	r6, [ip]
   88d64:	f8cc 0004 	str.w	r0, [ip, #4]
   88d68:	930f      	str	r3, [sp, #60]	; 0x3c
   88d6a:	dded      	ble.n	88d48 <_vfiprintf_r+0x7bc>
   88d6c:	b30a      	cbz	r2, 88db2 <_vfiprintf_r+0x826>
   88d6e:	4659      	mov	r1, fp
   88d70:	4628      	mov	r0, r5
   88d72:	aa0e      	add	r2, sp, #56	; 0x38
   88d74:	f7ff fbce 	bl	88514 <__sprint_r.part.0>
   88d78:	2800      	cmp	r0, #0
   88d7a:	f47f ada1 	bne.w	888c0 <_vfiprintf_r+0x334>
   88d7e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88d82:	3c10      	subs	r4, #16
   88d84:	2c10      	cmp	r4, #16
   88d86:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88d8a:	f101 0001 	add.w	r0, r1, #1
   88d8e:	dce2      	bgt.n	88d56 <_vfiprintf_r+0x7ca>
   88d90:	4645      	mov	r5, r8
   88d92:	46c8      	mov	r8, r9
   88d94:	46b1      	mov	r9, r6
   88d96:	4656      	mov	r6, sl
   88d98:	46e2      	mov	sl, ip
   88d9a:	4422      	add	r2, r4
   88d9c:	2807      	cmp	r0, #7
   88d9e:	e9ca 9400 	strd	r9, r4, [sl]
   88da2:	9210      	str	r2, [sp, #64]	; 0x40
   88da4:	900f      	str	r0, [sp, #60]	; 0x3c
   88da6:	f300 80d3 	bgt.w	88f50 <_vfiprintf_r+0x9c4>
   88daa:	f10a 0a08 	add.w	sl, sl, #8
   88dae:	3001      	adds	r0, #1
   88db0:	e5ec      	b.n	8898c <_vfiprintf_r+0x400>
   88db2:	2001      	movs	r0, #1
   88db4:	4611      	mov	r1, r2
   88db6:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88dba:	e7c9      	b.n	88d50 <_vfiprintf_r+0x7c4>
   88dbc:	f04f 0c01 	mov.w	ip, #1
   88dc0:	4611      	mov	r1, r2
   88dc2:	a811      	add	r0, sp, #68	; 0x44
   88dc4:	e770      	b.n	88ca8 <_vfiprintf_r+0x71c>
   88dc6:	2a00      	cmp	r2, #0
   88dc8:	f000 80d3 	beq.w	88f72 <_vfiprintf_r+0x9e6>
   88dcc:	4659      	mov	r1, fp
   88dce:	9805      	ldr	r0, [sp, #20]
   88dd0:	aa0e      	add	r2, sp, #56	; 0x38
   88dd2:	f7ff fb9f 	bl	88514 <__sprint_r.part.0>
   88dd6:	2800      	cmp	r0, #0
   88dd8:	f47f ad72 	bne.w	888c0 <_vfiprintf_r+0x334>
   88ddc:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88de0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88de4:	1c48      	adds	r0, r1, #1
   88de6:	e5ac      	b.n	88942 <_vfiprintf_r+0x3b6>
   88de8:	2202      	movs	r2, #2
   88dea:	2001      	movs	r0, #1
   88dec:	ab0d      	add	r3, sp, #52	; 0x34
   88dee:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   88df2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88df6:	4601      	mov	r1, r0
   88df8:	f10a 0a08 	add.w	sl, sl, #8
   88dfc:	1c48      	adds	r0, r1, #1
   88dfe:	e5bb      	b.n	88978 <_vfiprintf_r+0x3ec>
   88e00:	2c10      	cmp	r4, #16
   88e02:	f340 8214 	ble.w	8922e <_vfiprintf_r+0xca2>
   88e06:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   88e0a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 88ec4 <_vfiprintf_r+0x938>
   88e0e:	46d4      	mov	ip, sl
   88e10:	46b2      	mov	sl, r6
   88e12:	464e      	mov	r6, r9
   88e14:	46c1      	mov	r9, r8
   88e16:	46a8      	mov	r8, r5
   88e18:	9d05      	ldr	r5, [sp, #20]
   88e1a:	e006      	b.n	88e2a <_vfiprintf_r+0x89e>
   88e1c:	1c99      	adds	r1, r3, #2
   88e1e:	4603      	mov	r3, r0
   88e20:	f10c 0c08 	add.w	ip, ip, #8
   88e24:	3c10      	subs	r4, #16
   88e26:	2c10      	cmp	r4, #16
   88e28:	dd1c      	ble.n	88e64 <_vfiprintf_r+0x8d8>
   88e2a:	2110      	movs	r1, #16
   88e2c:	1c58      	adds	r0, r3, #1
   88e2e:	3210      	adds	r2, #16
   88e30:	2807      	cmp	r0, #7
   88e32:	9210      	str	r2, [sp, #64]	; 0x40
   88e34:	f8cc 6000 	str.w	r6, [ip]
   88e38:	f8cc 1004 	str.w	r1, [ip, #4]
   88e3c:	900f      	str	r0, [sp, #60]	; 0x3c
   88e3e:	dded      	ble.n	88e1c <_vfiprintf_r+0x890>
   88e40:	b30a      	cbz	r2, 88e86 <_vfiprintf_r+0x8fa>
   88e42:	4659      	mov	r1, fp
   88e44:	4628      	mov	r0, r5
   88e46:	aa0e      	add	r2, sp, #56	; 0x38
   88e48:	f7ff fb64 	bl	88514 <__sprint_r.part.0>
   88e4c:	2800      	cmp	r0, #0
   88e4e:	f47f ad37 	bne.w	888c0 <_vfiprintf_r+0x334>
   88e52:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   88e56:	3c10      	subs	r4, #16
   88e58:	2c10      	cmp	r4, #16
   88e5a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88e5e:	f103 0101 	add.w	r1, r3, #1
   88e62:	dce2      	bgt.n	88e2a <_vfiprintf_r+0x89e>
   88e64:	4645      	mov	r5, r8
   88e66:	46c8      	mov	r8, r9
   88e68:	46b1      	mov	r9, r6
   88e6a:	4656      	mov	r6, sl
   88e6c:	46e2      	mov	sl, ip
   88e6e:	4422      	add	r2, r4
   88e70:	2907      	cmp	r1, #7
   88e72:	e9ca 9400 	strd	r9, r4, [sl]
   88e76:	9210      	str	r2, [sp, #64]	; 0x40
   88e78:	910f      	str	r1, [sp, #60]	; 0x3c
   88e7a:	f300 80a8 	bgt.w	88fce <_vfiprintf_r+0xa42>
   88e7e:	f10a 0a08 	add.w	sl, sl, #8
   88e82:	1c48      	adds	r0, r1, #1
   88e84:	e54b      	b.n	8891e <_vfiprintf_r+0x392>
   88e86:	4613      	mov	r3, r2
   88e88:	2101      	movs	r1, #1
   88e8a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88e8e:	e7c9      	b.n	88e24 <_vfiprintf_r+0x898>
   88e90:	0778      	lsls	r0, r7, #29
   88e92:	920f      	str	r2, [sp, #60]	; 0x3c
   88e94:	d554      	bpl.n	88f40 <_vfiprintf_r+0x9b4>
   88e96:	9b02      	ldr	r3, [sp, #8]
   88e98:	1b5c      	subs	r4, r3, r5
   88e9a:	2c00      	cmp	r4, #0
   88e9c:	dd50      	ble.n	88f40 <_vfiprintf_r+0x9b4>
   88e9e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88ea2:	2c10      	cmp	r4, #16
   88ea4:	f340 81d7 	ble.w	89256 <_vfiprintf_r+0xcca>
   88ea8:	f8df 9018 	ldr.w	r9, [pc, #24]	; 88ec4 <_vfiprintf_r+0x938>
   88eac:	2610      	movs	r6, #16
   88eae:	464b      	mov	r3, r9
   88eb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   88eb2:	46a9      	mov	r9, r5
   88eb4:	9f05      	ldr	r7, [sp, #20]
   88eb6:	461d      	mov	r5, r3
   88eb8:	e00d      	b.n	88ed6 <_vfiprintf_r+0x94a>
   88eba:	bf00      	nop
   88ebc:	0008d4fc 	.word	0x0008d4fc
   88ec0:	0008d560 	.word	0x0008d560
   88ec4:	0008d550 	.word	0x0008d550
   88ec8:	1c88      	adds	r0, r1, #2
   88eca:	4619      	mov	r1, r3
   88ecc:	f10a 0a08 	add.w	sl, sl, #8
   88ed0:	3c10      	subs	r4, #16
   88ed2:	2c10      	cmp	r4, #16
   88ed4:	dd19      	ble.n	88f0a <_vfiprintf_r+0x97e>
   88ed6:	1c4b      	adds	r3, r1, #1
   88ed8:	3210      	adds	r2, #16
   88eda:	2b07      	cmp	r3, #7
   88edc:	e9ca 5600 	strd	r5, r6, [sl]
   88ee0:	9210      	str	r2, [sp, #64]	; 0x40
   88ee2:	930f      	str	r3, [sp, #60]	; 0x3c
   88ee4:	ddf0      	ble.n	88ec8 <_vfiprintf_r+0x93c>
   88ee6:	b332      	cbz	r2, 88f36 <_vfiprintf_r+0x9aa>
   88ee8:	4659      	mov	r1, fp
   88eea:	4638      	mov	r0, r7
   88eec:	aa0e      	add	r2, sp, #56	; 0x38
   88eee:	f7ff fb11 	bl	88514 <__sprint_r.part.0>
   88ef2:	2800      	cmp	r0, #0
   88ef4:	f47f ace4 	bne.w	888c0 <_vfiprintf_r+0x334>
   88ef8:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88efc:	3c10      	subs	r4, #16
   88efe:	2c10      	cmp	r4, #16
   88f00:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88f04:	f101 0001 	add.w	r0, r1, #1
   88f08:	dce5      	bgt.n	88ed6 <_vfiprintf_r+0x94a>
   88f0a:	462b      	mov	r3, r5
   88f0c:	464d      	mov	r5, r9
   88f0e:	4699      	mov	r9, r3
   88f10:	4422      	add	r2, r4
   88f12:	2807      	cmp	r0, #7
   88f14:	e9ca 9400 	strd	r9, r4, [sl]
   88f18:	9210      	str	r2, [sp, #64]	; 0x40
   88f1a:	900f      	str	r0, [sp, #60]	; 0x3c
   88f1c:	f77f ad53 	ble.w	889c6 <_vfiprintf_r+0x43a>
   88f20:	b172      	cbz	r2, 88f40 <_vfiprintf_r+0x9b4>
   88f22:	4659      	mov	r1, fp
   88f24:	9805      	ldr	r0, [sp, #20]
   88f26:	aa0e      	add	r2, sp, #56	; 0x38
   88f28:	f7ff faf4 	bl	88514 <__sprint_r.part.0>
   88f2c:	2800      	cmp	r0, #0
   88f2e:	f47f acc7 	bne.w	888c0 <_vfiprintf_r+0x334>
   88f32:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88f34:	e547      	b.n	889c6 <_vfiprintf_r+0x43a>
   88f36:	2001      	movs	r0, #1
   88f38:	4611      	mov	r1, r2
   88f3a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88f3e:	e7c7      	b.n	88ed0 <_vfiprintf_r+0x944>
   88f40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   88f44:	42aa      	cmp	r2, r5
   88f46:	bfac      	ite	ge
   88f48:	189b      	addge	r3, r3, r2
   88f4a:	195b      	addlt	r3, r3, r5
   88f4c:	9303      	str	r3, [sp, #12]
   88f4e:	e544      	b.n	889da <_vfiprintf_r+0x44e>
   88f50:	2a00      	cmp	r2, #0
   88f52:	f43f ae88 	beq.w	88c66 <_vfiprintf_r+0x6da>
   88f56:	4659      	mov	r1, fp
   88f58:	9805      	ldr	r0, [sp, #20]
   88f5a:	aa0e      	add	r2, sp, #56	; 0x38
   88f5c:	f7ff fada 	bl	88514 <__sprint_r.part.0>
   88f60:	2800      	cmp	r0, #0
   88f62:	f47f acad 	bne.w	888c0 <_vfiprintf_r+0x334>
   88f66:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   88f6a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88f6e:	3001      	adds	r0, #1
   88f70:	e50c      	b.n	8898c <_vfiprintf_r+0x400>
   88f72:	9b07      	ldr	r3, [sp, #28]
   88f74:	2b00      	cmp	r3, #0
   88f76:	d16b      	bne.n	89050 <_vfiprintf_r+0xac4>
   88f78:	2001      	movs	r0, #1
   88f7a:	4611      	mov	r1, r2
   88f7c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88f80:	e4fa      	b.n	88978 <_vfiprintf_r+0x3ec>
   88f82:	920f      	str	r2, [sp, #60]	; 0x3c
   88f84:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88f88:	e481      	b.n	8888e <_vfiprintf_r+0x302>
   88f8a:	9b00      	ldr	r3, [sp, #0]
   88f8c:	2b00      	cmp	r3, #0
   88f8e:	f47f ac05 	bne.w	8879c <_vfiprintf_r+0x210>
   88f92:	464f      	mov	r7, r9
   88f94:	2300      	movs	r3, #0
   88f96:	ae3a      	add	r6, sp, #232	; 0xe8
   88f98:	9300      	str	r3, [sp, #0]
   88f9a:	9301      	str	r3, [sp, #4]
   88f9c:	e406      	b.n	887ac <_vfiprintf_r+0x220>
   88f9e:	f854 2b04 	ldr.w	r2, [r4], #4
   88fa2:	f019 0f10 	tst.w	r9, #16
   88fa6:	f04f 0301 	mov.w	r3, #1
   88faa:	9404      	str	r4, [sp, #16]
   88fac:	d132      	bne.n	89014 <_vfiprintf_r+0xa88>
   88fae:	f019 0f40 	tst.w	r9, #64	; 0x40
   88fb2:	d02b      	beq.n	8900c <_vfiprintf_r+0xa80>
   88fb4:	2500      	movs	r5, #0
   88fb6:	b294      	uxth	r4, r2
   88fb8:	e439      	b.n	8882e <_vfiprintf_r+0x2a2>
   88fba:	232d      	movs	r3, #45	; 0x2d
   88fbc:	4264      	negs	r4, r4
   88fbe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88fc2:	46b9      	mov	r9, r7
   88fc4:	f04f 0301 	mov.w	r3, #1
   88fc8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   88fcc:	e433      	b.n	88836 <_vfiprintf_r+0x2aa>
   88fce:	2a00      	cmp	r2, #0
   88fd0:	d06f      	beq.n	890b2 <_vfiprintf_r+0xb26>
   88fd2:	4659      	mov	r1, fp
   88fd4:	9805      	ldr	r0, [sp, #20]
   88fd6:	aa0e      	add	r2, sp, #56	; 0x38
   88fd8:	f7ff fa9c 	bl	88514 <__sprint_r.part.0>
   88fdc:	2800      	cmp	r0, #0
   88fde:	f47f ac6f 	bne.w	888c0 <_vfiprintf_r+0x334>
   88fe2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88fe6:	e497      	b.n	88918 <_vfiprintf_r+0x38c>
   88fe8:	ae3a      	add	r6, sp, #232	; 0xe8
   88fea:	f7ff bbdf 	b.w	887ac <_vfiprintf_r+0x220>
   88fee:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88ff2:	f001 fed7 	bl	8ada4 <__retarget_lock_acquire_recursive>
   88ff6:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   88ffa:	b28a      	uxth	r2, r1
   88ffc:	f7ff badd 	b.w	885ba <_vfiprintf_r+0x2e>
   89000:	4661      	mov	r1, ip
   89002:	f10a 0a08 	add.w	sl, sl, #8
   89006:	f10c 0001 	add.w	r0, ip, #1
   8900a:	e4b9      	b.n	88980 <_vfiprintf_r+0x3f4>
   8900c:	f419 7f00 	tst.w	r9, #512	; 0x200
   89010:	f040 80ef 	bne.w	891f2 <_vfiprintf_r+0xc66>
   89014:	4614      	mov	r4, r2
   89016:	2500      	movs	r5, #0
   89018:	e409      	b.n	8882e <_vfiprintf_r+0x2a2>
   8901a:	05be      	lsls	r6, r7, #22
   8901c:	f100 80f7 	bmi.w	8920e <_vfiprintf_r+0xc82>
   89020:	461c      	mov	r4, r3
   89022:	2500      	movs	r5, #0
   89024:	e400      	b.n	88828 <_vfiprintf_r+0x29c>
   89026:	05ba      	lsls	r2, r7, #22
   89028:	f100 80ea 	bmi.w	89200 <_vfiprintf_r+0xc74>
   8902c:	17e5      	asrs	r5, r4, #31
   8902e:	9304      	str	r3, [sp, #16]
   89030:	4622      	mov	r2, r4
   89032:	462b      	mov	r3, r5
   89034:	f7ff bb9e 	b.w	88774 <_vfiprintf_r+0x1e8>
   89038:	9b03      	ldr	r3, [sp, #12]
   8903a:	9c04      	ldr	r4, [sp, #16]
   8903c:	17dd      	asrs	r5, r3, #31
   8903e:	461a      	mov	r2, r3
   89040:	462b      	mov	r3, r5
   89042:	f854 1b04 	ldr.w	r1, [r4], #4
   89046:	e9c1 2300 	strd	r2, r3, [r1]
   8904a:	9404      	str	r4, [sp, #16]
   8904c:	f7ff badc 	b.w	88608 <_vfiprintf_r+0x7c>
   89050:	2202      	movs	r2, #2
   89052:	ab0d      	add	r3, sp, #52	; 0x34
   89054:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   89058:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8905c:	e6cc      	b.n	88df8 <_vfiprintf_r+0x86c>
   8905e:	46b9      	mov	r9, r7
   89060:	e598      	b.n	88b94 <_vfiprintf_r+0x608>
   89062:	4a90      	ldr	r2, [pc, #576]	; (892a4 <_vfiprintf_r+0xd18>)
   89064:	9208      	str	r2, [sp, #32]
   89066:	06bd      	lsls	r5, r7, #26
   89068:	9c04      	ldr	r4, [sp, #16]
   8906a:	d530      	bpl.n	890ce <_vfiprintf_r+0xb42>
   8906c:	3407      	adds	r4, #7
   8906e:	f024 0207 	bic.w	r2, r4, #7
   89072:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   89076:	9204      	str	r2, [sp, #16]
   89078:	07fe      	lsls	r6, r7, #31
   8907a:	d509      	bpl.n	89090 <_vfiprintf_r+0xb04>
   8907c:	ea54 0205 	orrs.w	r2, r4, r5
   89080:	d006      	beq.n	89090 <_vfiprintf_r+0xb04>
   89082:	2230      	movs	r2, #48	; 0x30
   89084:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   89088:	f047 0702 	orr.w	r7, r7, #2
   8908c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   89090:	2302      	movs	r3, #2
   89092:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   89096:	f7ff bbca 	b.w	8882e <_vfiprintf_r+0x2a2>
   8909a:	4a83      	ldr	r2, [pc, #524]	; (892a8 <_vfiprintf_r+0xd1c>)
   8909c:	9208      	str	r2, [sp, #32]
   8909e:	e7e2      	b.n	89066 <_vfiprintf_r+0xada>
   890a0:	4630      	mov	r0, r6
   890a2:	f003 f871 	bl	8c188 <strlen>
   890a6:	2300      	movs	r3, #0
   890a8:	9404      	str	r4, [sp, #16]
   890aa:	9001      	str	r0, [sp, #4]
   890ac:	9300      	str	r3, [sp, #0]
   890ae:	f7ff bb7d 	b.w	887ac <_vfiprintf_r+0x220>
   890b2:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   890b6:	2900      	cmp	r1, #0
   890b8:	f040 8089 	bne.w	891ce <_vfiprintf_r+0xc42>
   890bc:	9b07      	ldr	r3, [sp, #28]
   890be:	2b00      	cmp	r3, #0
   890c0:	f47f ae92 	bne.w	88de8 <_vfiprintf_r+0x85c>
   890c4:	4611      	mov	r1, r2
   890c6:	2001      	movs	r0, #1
   890c8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   890cc:	e458      	b.n	88980 <_vfiprintf_r+0x3f4>
   890ce:	f854 2b04 	ldr.w	r2, [r4], #4
   890d2:	9404      	str	r4, [sp, #16]
   890d4:	06fc      	lsls	r4, r7, #27
   890d6:	d407      	bmi.n	890e8 <_vfiprintf_r+0xb5c>
   890d8:	0678      	lsls	r0, r7, #25
   890da:	d502      	bpl.n	890e2 <_vfiprintf_r+0xb56>
   890dc:	2500      	movs	r5, #0
   890de:	b294      	uxth	r4, r2
   890e0:	e7ca      	b.n	89078 <_vfiprintf_r+0xaec>
   890e2:	05b9      	lsls	r1, r7, #22
   890e4:	f100 8089 	bmi.w	891fa <_vfiprintf_r+0xc6e>
   890e8:	4614      	mov	r4, r2
   890ea:	2500      	movs	r5, #0
   890ec:	e7c4      	b.n	89078 <_vfiprintf_r+0xaec>
   890ee:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   890f2:	f8cd 9004 	str.w	r9, [sp, #4]
   890f6:	f8cd 8018 	str.w	r8, [sp, #24]
   890fa:	2700      	movs	r7, #0
   890fc:	4698      	mov	r8, r3
   890fe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   89102:	ae3a      	add	r6, sp, #232	; 0xe8
   89104:	e00b      	b.n	8911e <_vfiprintf_r+0xb92>
   89106:	220a      	movs	r2, #10
   89108:	2300      	movs	r3, #0
   8910a:	4620      	mov	r0, r4
   8910c:	4629      	mov	r1, r5
   8910e:	f004 f80f 	bl	8d130 <__aeabi_uldivmod>
   89112:	2d00      	cmp	r5, #0
   89114:	bf08      	it	eq
   89116:	2c0a      	cmpeq	r4, #10
   89118:	d319      	bcc.n	8914e <_vfiprintf_r+0xbc2>
   8911a:	4604      	mov	r4, r0
   8911c:	460d      	mov	r5, r1
   8911e:	220a      	movs	r2, #10
   89120:	2300      	movs	r3, #0
   89122:	4620      	mov	r0, r4
   89124:	4629      	mov	r1, r5
   89126:	f004 f803 	bl	8d130 <__aeabi_uldivmod>
   8912a:	3230      	adds	r2, #48	; 0x30
   8912c:	f806 2c01 	strb.w	r2, [r6, #-1]
   89130:	3701      	adds	r7, #1
   89132:	3e01      	subs	r6, #1
   89134:	f1b8 0f00 	cmp.w	r8, #0
   89138:	d0e5      	beq.n	89106 <_vfiprintf_r+0xb7a>
   8913a:	f899 3000 	ldrb.w	r3, [r9]
   8913e:	42bb      	cmp	r3, r7
   89140:	d1e1      	bne.n	89106 <_vfiprintf_r+0xb7a>
   89142:	2fff      	cmp	r7, #255	; 0xff
   89144:	d0df      	beq.n	89106 <_vfiprintf_r+0xb7a>
   89146:	2d00      	cmp	r5, #0
   89148:	bf08      	it	eq
   8914a:	2c0a      	cmpeq	r4, #10
   8914c:	d225      	bcs.n	8919a <_vfiprintf_r+0xc0e>
   8914e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   89152:	ab3a      	add	r3, sp, #232	; 0xe8
   89154:	f8dd 9004 	ldr.w	r9, [sp, #4]
   89158:	1b9b      	subs	r3, r3, r6
   8915a:	464f      	mov	r7, r9
   8915c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   89160:	9301      	str	r3, [sp, #4]
   89162:	f7ff bb23 	b.w	887ac <_vfiprintf_r+0x220>
   89166:	46b9      	mov	r9, r7
   89168:	f7ff bb13 	b.w	88792 <_vfiprintf_r+0x206>
   8916c:	2b01      	cmp	r3, #1
   8916e:	46b9      	mov	r9, r7
   89170:	f47f ad44 	bne.w	88bfc <_vfiprintf_r+0x670>
   89174:	f7ff bb12 	b.w	8879c <_vfiprintf_r+0x210>
   89178:	9c04      	ldr	r4, [sp, #16]
   8917a:	9a03      	ldr	r2, [sp, #12]
   8917c:	f854 3b04 	ldr.w	r3, [r4], #4
   89180:	601a      	str	r2, [r3, #0]
   89182:	9404      	str	r4, [sp, #16]
   89184:	f7ff ba40 	b.w	88608 <_vfiprintf_r+0x7c>
   89188:	9d00      	ldr	r5, [sp, #0]
   8918a:	4e48      	ldr	r6, [pc, #288]	; (892ac <_vfiprintf_r+0xd20>)
   8918c:	2d06      	cmp	r5, #6
   8918e:	bf28      	it	cs
   89190:	2506      	movcs	r5, #6
   89192:	9404      	str	r4, [sp, #16]
   89194:	9501      	str	r5, [sp, #4]
   89196:	f7ff bbaf 	b.w	888f8 <_vfiprintf_r+0x36c>
   8919a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8919c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8919e:	1af6      	subs	r6, r6, r3
   891a0:	461a      	mov	r2, r3
   891a2:	4630      	mov	r0, r6
   891a4:	f003 f81e 	bl	8c1e4 <strncpy>
   891a8:	f899 3001 	ldrb.w	r3, [r9, #1]
   891ac:	b10b      	cbz	r3, 891b2 <_vfiprintf_r+0xc26>
   891ae:	f109 0901 	add.w	r9, r9, #1
   891b2:	220a      	movs	r2, #10
   891b4:	2300      	movs	r3, #0
   891b6:	4620      	mov	r0, r4
   891b8:	4629      	mov	r1, r5
   891ba:	f003 ffb9 	bl	8d130 <__aeabi_uldivmod>
   891be:	2700      	movs	r7, #0
   891c0:	e7ab      	b.n	8911a <_vfiprintf_r+0xb8e>
   891c2:	2001      	movs	r0, #1
   891c4:	4611      	mov	r1, r2
   891c6:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   891ca:	f7ff bbd9 	b.w	88980 <_vfiprintf_r+0x3f4>
   891ce:	2201      	movs	r2, #1
   891d0:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   891d4:	4610      	mov	r0, r2
   891d6:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   891da:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   891de:	f7ff bbac 	b.w	8893a <_vfiprintf_r+0x3ae>
   891e2:	9c04      	ldr	r4, [sp, #16]
   891e4:	9a03      	ldr	r2, [sp, #12]
   891e6:	f854 3b04 	ldr.w	r3, [r4], #4
   891ea:	801a      	strh	r2, [r3, #0]
   891ec:	9404      	str	r4, [sp, #16]
   891ee:	f7ff ba0b 	b.w	88608 <_vfiprintf_r+0x7c>
   891f2:	2500      	movs	r5, #0
   891f4:	b2d4      	uxtb	r4, r2
   891f6:	f7ff bb1a 	b.w	8882e <_vfiprintf_r+0x2a2>
   891fa:	2500      	movs	r5, #0
   891fc:	b2d4      	uxtb	r4, r2
   891fe:	e73b      	b.n	89078 <_vfiprintf_r+0xaec>
   89200:	b264      	sxtb	r4, r4
   89202:	17e5      	asrs	r5, r4, #31
   89204:	9304      	str	r3, [sp, #16]
   89206:	4622      	mov	r2, r4
   89208:	462b      	mov	r3, r5
   8920a:	f7ff bab3 	b.w	88774 <_vfiprintf_r+0x1e8>
   8920e:	2500      	movs	r5, #0
   89210:	b2dc      	uxtb	r4, r3
   89212:	f7ff bb09 	b.w	88828 <_vfiprintf_r+0x29c>
   89216:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8921a:	f001 fdc5 	bl	8ada8 <__retarget_lock_release_recursive>
   8921e:	f7ff baec 	b.w	887fa <_vfiprintf_r+0x26e>
   89222:	9b00      	ldr	r3, [sp, #0]
   89224:	9404      	str	r4, [sp, #16]
   89226:	9301      	str	r3, [sp, #4]
   89228:	9000      	str	r0, [sp, #0]
   8922a:	f7ff babf 	b.w	887ac <_vfiprintf_r+0x220>
   8922e:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89232:	f8df 907c 	ldr.w	r9, [pc, #124]	; 892b0 <_vfiprintf_r+0xd24>
   89236:	3101      	adds	r1, #1
   89238:	e619      	b.n	88e6e <_vfiprintf_r+0x8e2>
   8923a:	2200      	movs	r2, #0
   8923c:	9200      	str	r2, [sp, #0]
   8923e:	f7ff ba09 	b.w	88654 <_vfiprintf_r+0xc8>
   89242:	4659      	mov	r1, fp
   89244:	9805      	ldr	r0, [sp, #20]
   89246:	aa0e      	add	r2, sp, #56	; 0x38
   89248:	f7ff f964 	bl	88514 <__sprint_r.part.0>
   8924c:	2800      	cmp	r0, #0
   8924e:	f43f abd2 	beq.w	889f6 <_vfiprintf_r+0x46a>
   89252:	f7ff bb36 	b.w	888c2 <_vfiprintf_r+0x336>
   89256:	980f      	ldr	r0, [sp, #60]	; 0x3c
   89258:	f8df 9054 	ldr.w	r9, [pc, #84]	; 892b0 <_vfiprintf_r+0xd24>
   8925c:	3001      	adds	r0, #1
   8925e:	e657      	b.n	88f10 <_vfiprintf_r+0x984>
   89260:	4684      	mov	ip, r0
   89262:	f8df 9050 	ldr.w	r9, [pc, #80]	; 892b4 <_vfiprintf_r+0xd28>
   89266:	e543      	b.n	88cf0 <_vfiprintf_r+0x764>
   89268:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   8926c:	07db      	lsls	r3, r3, #31
   8926e:	d407      	bmi.n	89280 <_vfiprintf_r+0xcf4>
   89270:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89274:	059f      	lsls	r7, r3, #22
   89276:	d403      	bmi.n	89280 <_vfiprintf_r+0xcf4>
   89278:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8927c:	f001 fd94 	bl	8ada8 <__retarget_lock_release_recursive>
   89280:	f04f 33ff 	mov.w	r3, #4294967295
   89284:	9303      	str	r3, [sp, #12]
   89286:	f7ff bb27 	b.w	888d8 <_vfiprintf_r+0x34c>
   8928a:	9a04      	ldr	r2, [sp, #16]
   8928c:	f898 3001 	ldrb.w	r3, [r8, #1]
   89290:	f852 0b04 	ldr.w	r0, [r2], #4
   89294:	4688      	mov	r8, r1
   89296:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8929a:	9000      	str	r0, [sp, #0]
   8929c:	9204      	str	r2, [sp, #16]
   8929e:	f7ff b9d7 	b.w	88650 <_vfiprintf_r+0xc4>
   892a2:	bf00      	nop
   892a4:	0008d510 	.word	0x0008d510
   892a8:	0008d4fc 	.word	0x0008d4fc
   892ac:	0008d524 	.word	0x0008d524
   892b0:	0008d550 	.word	0x0008d550
   892b4:	0008d560 	.word	0x0008d560

000892b8 <__sbprintf>:
   892b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   892ba:	460c      	mov	r4, r1
   892bc:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   892c0:	f04f 0e00 	mov.w	lr, #0
   892c4:	4615      	mov	r5, r2
   892c6:	4606      	mov	r6, r0
   892c8:	461f      	mov	r7, r3
   892ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
   892cc:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   892d0:	89e2      	ldrh	r2, [r4, #14]
   892d2:	8989      	ldrh	r1, [r1, #12]
   892d4:	9319      	str	r3, [sp, #100]	; 0x64
   892d6:	69e3      	ldr	r3, [r4, #28]
   892d8:	f8ad 200e 	strh.w	r2, [sp, #14]
   892dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   892de:	f021 0102 	bic.w	r1, r1, #2
   892e2:	9307      	str	r3, [sp, #28]
   892e4:	a816      	add	r0, sp, #88	; 0x58
   892e6:	ab1a      	add	r3, sp, #104	; 0x68
   892e8:	f8ad 100c 	strh.w	r1, [sp, #12]
   892ec:	f8cd e018 	str.w	lr, [sp, #24]
   892f0:	9209      	str	r2, [sp, #36]	; 0x24
   892f2:	9300      	str	r3, [sp, #0]
   892f4:	9304      	str	r3, [sp, #16]
   892f6:	f8cd c008 	str.w	ip, [sp, #8]
   892fa:	f8cd c014 	str.w	ip, [sp, #20]
   892fe:	f001 fd4d 	bl	8ad9c <__retarget_lock_init_recursive>
   89302:	462a      	mov	r2, r5
   89304:	463b      	mov	r3, r7
   89306:	4669      	mov	r1, sp
   89308:	4630      	mov	r0, r6
   8930a:	f7ff f93f 	bl	8858c <_vfiprintf_r>
   8930e:	1e05      	subs	r5, r0, #0
   89310:	db07      	blt.n	89322 <__sbprintf+0x6a>
   89312:	4630      	mov	r0, r6
   89314:	4669      	mov	r1, sp
   89316:	f001 f917 	bl	8a548 <_fflush_r>
   8931a:	2800      	cmp	r0, #0
   8931c:	bf18      	it	ne
   8931e:	f04f 35ff 	movne.w	r5, #4294967295
   89322:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   89326:	065b      	lsls	r3, r3, #25
   89328:	d503      	bpl.n	89332 <__sbprintf+0x7a>
   8932a:	89a3      	ldrh	r3, [r4, #12]
   8932c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89330:	81a3      	strh	r3, [r4, #12]
   89332:	9816      	ldr	r0, [sp, #88]	; 0x58
   89334:	f001 fd34 	bl	8ada0 <__retarget_lock_close_recursive>
   89338:	4628      	mov	r0, r5
   8933a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8933e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00089340 <__swsetup_r>:
   89340:	b538      	push	{r3, r4, r5, lr}
   89342:	4b32      	ldr	r3, [pc, #200]	; (8940c <__swsetup_r+0xcc>)
   89344:	4605      	mov	r5, r0
   89346:	6818      	ldr	r0, [r3, #0]
   89348:	460c      	mov	r4, r1
   8934a:	b110      	cbz	r0, 89352 <__swsetup_r+0x12>
   8934c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8934e:	2b00      	cmp	r3, #0
   89350:	d03c      	beq.n	893cc <__swsetup_r+0x8c>
   89352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89356:	0718      	lsls	r0, r3, #28
   89358:	b29a      	uxth	r2, r3
   8935a:	d50c      	bpl.n	89376 <__swsetup_r+0x36>
   8935c:	6921      	ldr	r1, [r4, #16]
   8935e:	b1a9      	cbz	r1, 8938c <__swsetup_r+0x4c>
   89360:	f012 0001 	ands.w	r0, r2, #1
   89364:	d022      	beq.n	893ac <__swsetup_r+0x6c>
   89366:	2500      	movs	r5, #0
   89368:	6960      	ldr	r0, [r4, #20]
   8936a:	60a5      	str	r5, [r4, #8]
   8936c:	4240      	negs	r0, r0
   8936e:	61a0      	str	r0, [r4, #24]
   89370:	b311      	cbz	r1, 893b8 <__swsetup_r+0x78>
   89372:	2000      	movs	r0, #0
   89374:	bd38      	pop	{r3, r4, r5, pc}
   89376:	06d1      	lsls	r1, r2, #27
   89378:	d53f      	bpl.n	893fa <__swsetup_r+0xba>
   8937a:	0752      	lsls	r2, r2, #29
   8937c:	d429      	bmi.n	893d2 <__swsetup_r+0x92>
   8937e:	6921      	ldr	r1, [r4, #16]
   89380:	f043 0308 	orr.w	r3, r3, #8
   89384:	81a3      	strh	r3, [r4, #12]
   89386:	b29a      	uxth	r2, r3
   89388:	2900      	cmp	r1, #0
   8938a:	d1e9      	bne.n	89360 <__swsetup_r+0x20>
   8938c:	f402 7020 	and.w	r0, r2, #640	; 0x280
   89390:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   89394:	d0e4      	beq.n	89360 <__swsetup_r+0x20>
   89396:	4628      	mov	r0, r5
   89398:	4621      	mov	r1, r4
   8939a:	f001 fd35 	bl	8ae08 <__smakebuf_r>
   8939e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   893a2:	6921      	ldr	r1, [r4, #16]
   893a4:	b29a      	uxth	r2, r3
   893a6:	f012 0001 	ands.w	r0, r2, #1
   893aa:	d1dc      	bne.n	89366 <__swsetup_r+0x26>
   893ac:	0795      	lsls	r5, r2, #30
   893ae:	bf58      	it	pl
   893b0:	6960      	ldrpl	r0, [r4, #20]
   893b2:	60a0      	str	r0, [r4, #8]
   893b4:	2900      	cmp	r1, #0
   893b6:	d1dc      	bne.n	89372 <__swsetup_r+0x32>
   893b8:	0612      	lsls	r2, r2, #24
   893ba:	bf58      	it	pl
   893bc:	4608      	movpl	r0, r1
   893be:	d5d9      	bpl.n	89374 <__swsetup_r+0x34>
   893c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   893c4:	f04f 30ff 	mov.w	r0, #4294967295
   893c8:	81a3      	strh	r3, [r4, #12]
   893ca:	bd38      	pop	{r3, r4, r5, pc}
   893cc:	f001 f918 	bl	8a600 <__sinit>
   893d0:	e7bf      	b.n	89352 <__swsetup_r+0x12>
   893d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   893d4:	b151      	cbz	r1, 893ec <__swsetup_r+0xac>
   893d6:	f104 0240 	add.w	r2, r4, #64	; 0x40
   893da:	4291      	cmp	r1, r2
   893dc:	d004      	beq.n	893e8 <__swsetup_r+0xa8>
   893de:	4628      	mov	r0, r5
   893e0:	f001 fa32 	bl	8a848 <_free_r>
   893e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   893e8:	2200      	movs	r2, #0
   893ea:	6322      	str	r2, [r4, #48]	; 0x30
   893ec:	2200      	movs	r2, #0
   893ee:	6921      	ldr	r1, [r4, #16]
   893f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   893f4:	e9c4 1200 	strd	r1, r2, [r4]
   893f8:	e7c2      	b.n	89380 <__swsetup_r+0x40>
   893fa:	2209      	movs	r2, #9
   893fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89400:	602a      	str	r2, [r5, #0]
   89402:	f04f 30ff 	mov.w	r0, #4294967295
   89406:	81a3      	strh	r3, [r4, #12]
   89408:	bd38      	pop	{r3, r4, r5, pc}
   8940a:	bf00      	nop
   8940c:	20000440 	.word	0x20000440

00089410 <register_fini>:
   89410:	4b02      	ldr	r3, [pc, #8]	; (8941c <register_fini+0xc>)
   89412:	b113      	cbz	r3, 8941a <register_fini+0xa>
   89414:	4802      	ldr	r0, [pc, #8]	; (89420 <register_fini+0x10>)
   89416:	f000 b805 	b.w	89424 <atexit>
   8941a:	4770      	bx	lr
   8941c:	00000000 	.word	0x00000000
   89420:	0008a675 	.word	0x0008a675

00089424 <atexit>:
   89424:	2300      	movs	r3, #0
   89426:	4601      	mov	r1, r0
   89428:	461a      	mov	r2, r3
   8942a:	4618      	mov	r0, r3
   8942c:	f003 b824 	b.w	8c478 <__register_exitproc>

00089430 <quorem>:
   89430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89434:	6903      	ldr	r3, [r0, #16]
   89436:	690d      	ldr	r5, [r1, #16]
   89438:	b083      	sub	sp, #12
   8943a:	42ab      	cmp	r3, r5
   8943c:	f2c0 8084 	blt.w	89548 <quorem+0x118>
   89440:	3d01      	subs	r5, #1
   89442:	f101 0614 	add.w	r6, r1, #20
   89446:	f100 0914 	add.w	r9, r0, #20
   8944a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   8944e:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89452:	3301      	adds	r3, #1
   89454:	468e      	mov	lr, r1
   89456:	00a9      	lsls	r1, r5, #2
   89458:	9100      	str	r1, [sp, #0]
   8945a:	429a      	cmp	r2, r3
   8945c:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   89460:	4682      	mov	sl, r0
   89462:	fbb2 f7f3 	udiv	r7, r2, r3
   89466:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   8946a:	9101      	str	r1, [sp, #4]
   8946c:	d337      	bcc.n	894de <quorem+0xae>
   8946e:	2200      	movs	r2, #0
   89470:	46b4      	mov	ip, r6
   89472:	4614      	mov	r4, r2
   89474:	4648      	mov	r0, r9
   89476:	f85c 3b04 	ldr.w	r3, [ip], #4
   8947a:	6801      	ldr	r1, [r0, #0]
   8947c:	fa1f fb83 	uxth.w	fp, r3
   89480:	fb07 220b 	mla	r2, r7, fp, r2
   89484:	0c1b      	lsrs	r3, r3, #16
   89486:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   8948a:	fb07 bb03 	mla	fp, r7, r3, fp
   8948e:	b293      	uxth	r3, r2
   89490:	1ae3      	subs	r3, r4, r3
   89492:	b28a      	uxth	r2, r1
   89494:	fa1f f48b 	uxth.w	r4, fp
   89498:	4413      	add	r3, r2
   8949a:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   8949e:	eb04 4423 	add.w	r4, r4, r3, asr #16
   894a2:	b29b      	uxth	r3, r3
   894a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   894a8:	45e0      	cmp	r8, ip
   894aa:	f840 3b04 	str.w	r3, [r0], #4
   894ae:	ea4f 4424 	mov.w	r4, r4, asr #16
   894b2:	ea4f 421b 	mov.w	r2, fp, lsr #16
   894b6:	d2de      	bcs.n	89476 <quorem+0x46>
   894b8:	9b00      	ldr	r3, [sp, #0]
   894ba:	f859 3003 	ldr.w	r3, [r9, r3]
   894be:	b973      	cbnz	r3, 894de <quorem+0xae>
   894c0:	9b01      	ldr	r3, [sp, #4]
   894c2:	3b04      	subs	r3, #4
   894c4:	4599      	cmp	r9, r3
   894c6:	d304      	bcc.n	894d2 <quorem+0xa2>
   894c8:	e007      	b.n	894da <quorem+0xaa>
   894ca:	4599      	cmp	r9, r3
   894cc:	f105 35ff 	add.w	r5, r5, #4294967295
   894d0:	d203      	bcs.n	894da <quorem+0xaa>
   894d2:	f853 2904 	ldr.w	r2, [r3], #-4
   894d6:	2a00      	cmp	r2, #0
   894d8:	d0f7      	beq.n	894ca <quorem+0x9a>
   894da:	f8ca 5010 	str.w	r5, [sl, #16]
   894de:	4671      	mov	r1, lr
   894e0:	4650      	mov	r0, sl
   894e2:	f002 faa9 	bl	8ba38 <__mcmp>
   894e6:	2800      	cmp	r0, #0
   894e8:	db2a      	blt.n	89540 <quorem+0x110>
   894ea:	4648      	mov	r0, r9
   894ec:	2300      	movs	r3, #0
   894ee:	3701      	adds	r7, #1
   894f0:	f856 1b04 	ldr.w	r1, [r6], #4
   894f4:	6804      	ldr	r4, [r0, #0]
   894f6:	b28a      	uxth	r2, r1
   894f8:	1a9a      	subs	r2, r3, r2
   894fa:	0c0b      	lsrs	r3, r1, #16
   894fc:	b2a1      	uxth	r1, r4
   894fe:	440a      	add	r2, r1
   89500:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   89504:	eb03 4322 	add.w	r3, r3, r2, asr #16
   89508:	b292      	uxth	r2, r2
   8950a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8950e:	45b0      	cmp	r8, r6
   89510:	f840 2b04 	str.w	r2, [r0], #4
   89514:	ea4f 4323 	mov.w	r3, r3, asr #16
   89518:	d2ea      	bcs.n	894f0 <quorem+0xc0>
   8951a:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   8951e:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   89522:	b96a      	cbnz	r2, 89540 <quorem+0x110>
   89524:	3b04      	subs	r3, #4
   89526:	4599      	cmp	r9, r3
   89528:	d304      	bcc.n	89534 <quorem+0x104>
   8952a:	e007      	b.n	8953c <quorem+0x10c>
   8952c:	4599      	cmp	r9, r3
   8952e:	f105 35ff 	add.w	r5, r5, #4294967295
   89532:	d203      	bcs.n	8953c <quorem+0x10c>
   89534:	f853 2904 	ldr.w	r2, [r3], #-4
   89538:	2a00      	cmp	r2, #0
   8953a:	d0f7      	beq.n	8952c <quorem+0xfc>
   8953c:	f8ca 5010 	str.w	r5, [sl, #16]
   89540:	4638      	mov	r0, r7
   89542:	b003      	add	sp, #12
   89544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89548:	2000      	movs	r0, #0
   8954a:	b003      	add	sp, #12
   8954c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00089550 <_dtoa_r>:
   89550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89554:	4616      	mov	r6, r2
   89556:	461f      	mov	r7, r3
   89558:	6c01      	ldr	r1, [r0, #64]	; 0x40
   8955a:	b09b      	sub	sp, #108	; 0x6c
   8955c:	4604      	mov	r4, r0
   8955e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   89562:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   89564:	b141      	cbz	r1, 89578 <_dtoa_r+0x28>
   89566:	2301      	movs	r3, #1
   89568:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8956a:	4093      	lsls	r3, r2
   8956c:	e9c1 2301 	strd	r2, r3, [r1, #4]
   89570:	f002 f834 	bl	8b5dc <_Bfree>
   89574:	2300      	movs	r3, #0
   89576:	6423      	str	r3, [r4, #64]	; 0x40
   89578:	f1b7 0900 	subs.w	r9, r7, #0
   8957c:	bfb4      	ite	lt
   8957e:	2301      	movlt	r3, #1
   89580:	2300      	movge	r3, #0
   89582:	602b      	str	r3, [r5, #0]
   89584:	4b76      	ldr	r3, [pc, #472]	; (89760 <_dtoa_r+0x210>)
   89586:	bfbc      	itt	lt
   89588:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   8958c:	f8cd 9014 	strlt.w	r9, [sp, #20]
   89590:	ea33 0309 	bics.w	r3, r3, r9
   89594:	f000 80ab 	beq.w	896ee <_dtoa_r+0x19e>
   89598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8959c:	4610      	mov	r0, r2
   8959e:	4619      	mov	r1, r3
   895a0:	2200      	movs	r2, #0
   895a2:	2300      	movs	r3, #0
   895a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
   895a8:	f003 fd52 	bl	8d050 <__aeabi_dcmpeq>
   895ac:	4680      	mov	r8, r0
   895ae:	b170      	cbz	r0, 895ce <_dtoa_r+0x7e>
   895b0:	2301      	movs	r3, #1
   895b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   895b4:	6013      	str	r3, [r2, #0]
   895b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   895b8:	2b00      	cmp	r3, #0
   895ba:	f000 82c2 	beq.w	89b42 <_dtoa_r+0x5f2>
   895be:	4869      	ldr	r0, [pc, #420]	; (89764 <_dtoa_r+0x214>)
   895c0:	6018      	str	r0, [r3, #0]
   895c2:	1e43      	subs	r3, r0, #1
   895c4:	9303      	str	r3, [sp, #12]
   895c6:	9803      	ldr	r0, [sp, #12]
   895c8:	b01b      	add	sp, #108	; 0x6c
   895ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   895ce:	aa18      	add	r2, sp, #96	; 0x60
   895d0:	ab19      	add	r3, sp, #100	; 0x64
   895d2:	e9cd 3200 	strd	r3, r2, [sp]
   895d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   895da:	4620      	mov	r0, r4
   895dc:	f002 faf2 	bl	8bbc4 <__d2b>
   895e0:	ea5f 5519 	movs.w	r5, r9, lsr #20
   895e4:	4682      	mov	sl, r0
   895e6:	f040 8098 	bne.w	8971a <_dtoa_r+0x1ca>
   895ea:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   895ee:	4445      	add	r5, r8
   895f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
   895f4:	2820      	cmp	r0, #32
   895f6:	f340 8390 	ble.w	89d1a <_dtoa_r+0x7ca>
   895fa:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   895fe:	f205 4012 	addw	r0, r5, #1042	; 0x412
   89602:	fa09 f903 	lsl.w	r9, r9, r3
   89606:	fa26 f000 	lsr.w	r0, r6, r0
   8960a:	ea49 0000 	orr.w	r0, r9, r0
   8960e:	f003 fa3d 	bl	8ca8c <__aeabi_ui2d>
   89612:	2201      	movs	r2, #1
   89614:	3d01      	subs	r5, #1
   89616:	920f      	str	r2, [sp, #60]	; 0x3c
   89618:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8961c:	2200      	movs	r2, #0
   8961e:	4b52      	ldr	r3, [pc, #328]	; (89768 <_dtoa_r+0x218>)
   89620:	f003 f8f6 	bl	8c810 <__aeabi_dsub>
   89624:	a348      	add	r3, pc, #288	; (adr r3, 89748 <_dtoa_r+0x1f8>)
   89626:	e9d3 2300 	ldrd	r2, r3, [r3]
   8962a:	f003 faa9 	bl	8cb80 <__aeabi_dmul>
   8962e:	a348      	add	r3, pc, #288	; (adr r3, 89750 <_dtoa_r+0x200>)
   89630:	e9d3 2300 	ldrd	r2, r3, [r3]
   89634:	f003 f8ee 	bl	8c814 <__adddf3>
   89638:	4606      	mov	r6, r0
   8963a:	4628      	mov	r0, r5
   8963c:	460f      	mov	r7, r1
   8963e:	f003 fa35 	bl	8caac <__aeabi_i2d>
   89642:	a345      	add	r3, pc, #276	; (adr r3, 89758 <_dtoa_r+0x208>)
   89644:	e9d3 2300 	ldrd	r2, r3, [r3]
   89648:	f003 fa9a 	bl	8cb80 <__aeabi_dmul>
   8964c:	4602      	mov	r2, r0
   8964e:	460b      	mov	r3, r1
   89650:	4630      	mov	r0, r6
   89652:	4639      	mov	r1, r7
   89654:	f003 f8de 	bl	8c814 <__adddf3>
   89658:	4606      	mov	r6, r0
   8965a:	460f      	mov	r7, r1
   8965c:	f003 fd40 	bl	8d0e0 <__aeabi_d2iz>
   89660:	2200      	movs	r2, #0
   89662:	4683      	mov	fp, r0
   89664:	2300      	movs	r3, #0
   89666:	4630      	mov	r0, r6
   89668:	4639      	mov	r1, r7
   8966a:	f003 fcfb 	bl	8d064 <__aeabi_dcmplt>
   8966e:	2800      	cmp	r0, #0
   89670:	f040 825a 	bne.w	89b28 <_dtoa_r+0x5d8>
   89674:	f1bb 0f16 	cmp.w	fp, #22
   89678:	f200 8248 	bhi.w	89b0c <_dtoa_r+0x5bc>
   8967c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89680:	4b3a      	ldr	r3, [pc, #232]	; (8976c <_dtoa_r+0x21c>)
   89682:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   89686:	e9d3 2300 	ldrd	r2, r3, [r3]
   8968a:	f003 fceb 	bl	8d064 <__aeabi_dcmplt>
   8968e:	2800      	cmp	r0, #0
   89690:	d072      	beq.n	89778 <_dtoa_r+0x228>
   89692:	2300      	movs	r3, #0
   89694:	eba8 0505 	sub.w	r5, r8, r5
   89698:	930e      	str	r3, [sp, #56]	; 0x38
   8969a:	1e6b      	subs	r3, r5, #1
   8969c:	f10b 3bff 	add.w	fp, fp, #4294967295
   896a0:	9306      	str	r3, [sp, #24]
   896a2:	f100 823b 	bmi.w	89b1c <_dtoa_r+0x5cc>
   896a6:	2300      	movs	r3, #0
   896a8:	930b      	str	r3, [sp, #44]	; 0x2c
   896aa:	f1bb 0f00 	cmp.w	fp, #0
   896ae:	da6b      	bge.n	89788 <_dtoa_r+0x238>
   896b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   896b2:	f8cd b01c 	str.w	fp, [sp, #28]
   896b6:	eba3 030b 	sub.w	r3, r3, fp
   896ba:	930b      	str	r3, [sp, #44]	; 0x2c
   896bc:	f1cb 0300 	rsb	r3, fp, #0
   896c0:	930d      	str	r3, [sp, #52]	; 0x34
   896c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   896c4:	f04f 0b00 	mov.w	fp, #0
   896c8:	2b09      	cmp	r3, #9
   896ca:	d866      	bhi.n	8979a <_dtoa_r+0x24a>
   896cc:	2b05      	cmp	r3, #5
   896ce:	f340 8322 	ble.w	89d16 <_dtoa_r+0x7c6>
   896d2:	2500      	movs	r5, #0
   896d4:	3b04      	subs	r3, #4
   896d6:	9324      	str	r3, [sp, #144]	; 0x90
   896d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   896da:	3b02      	subs	r3, #2
   896dc:	2b03      	cmp	r3, #3
   896de:	f200 866e 	bhi.w	8a3be <_dtoa_r+0xe6e>
   896e2:	e8df f013 	tbh	[pc, r3, lsl #1]
   896e6:	043b      	.short	0x043b
   896e8:	042f0438 	.word	0x042f0438
   896ec:	0412      	.short	0x0412
   896ee:	f242 730f 	movw	r3, #9999	; 0x270f
   896f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   896f4:	f3c9 0913 	ubfx	r9, r9, #0, #20
   896f8:	6013      	str	r3, [r2, #0]
   896fa:	ea59 0306 	orrs.w	r3, r9, r6
   896fe:	d11c      	bne.n	8973a <_dtoa_r+0x1ea>
   89700:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89702:	2b00      	cmp	r3, #0
   89704:	f000 8657 	beq.w	8a3b6 <_dtoa_r+0xe66>
   89708:	4b19      	ldr	r3, [pc, #100]	; (89770 <_dtoa_r+0x220>)
   8970a:	9303      	str	r3, [sp, #12]
   8970c:	3308      	adds	r3, #8
   8970e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   89710:	9803      	ldr	r0, [sp, #12]
   89712:	6013      	str	r3, [r2, #0]
   89714:	b01b      	add	sp, #108	; 0x6c
   89716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8971a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   8971e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89722:	4608      	mov	r0, r1
   89724:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   89728:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   8972c:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   89730:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   89734:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   89738:	e770      	b.n	8961c <_dtoa_r+0xcc>
   8973a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8973c:	2b00      	cmp	r3, #0
   8973e:	f040 83c8 	bne.w	89ed2 <_dtoa_r+0x982>
   89742:	4b0c      	ldr	r3, [pc, #48]	; (89774 <_dtoa_r+0x224>)
   89744:	9303      	str	r3, [sp, #12]
   89746:	e73e      	b.n	895c6 <_dtoa_r+0x76>
   89748:	636f4361 	.word	0x636f4361
   8974c:	3fd287a7 	.word	0x3fd287a7
   89750:	8b60c8b3 	.word	0x8b60c8b3
   89754:	3fc68a28 	.word	0x3fc68a28
   89758:	509f79fb 	.word	0x509f79fb
   8975c:	3fd34413 	.word	0x3fd34413
   89760:	7ff00000 	.word	0x7ff00000
   89764:	0008d52d 	.word	0x0008d52d
   89768:	3ff80000 	.word	0x3ff80000
   8976c:	0008d6c8 	.word	0x0008d6c8
   89770:	0008d574 	.word	0x0008d574
   89774:	0008d570 	.word	0x0008d570
   89778:	eba8 0505 	sub.w	r5, r8, r5
   8977c:	1e6b      	subs	r3, r5, #1
   8977e:	9306      	str	r3, [sp, #24]
   89780:	f100 84a9 	bmi.w	8a0d6 <_dtoa_r+0xb86>
   89784:	900e      	str	r0, [sp, #56]	; 0x38
   89786:	900b      	str	r0, [sp, #44]	; 0x2c
   89788:	9b06      	ldr	r3, [sp, #24]
   8978a:	445b      	add	r3, fp
   8978c:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   89790:	2300      	movs	r3, #0
   89792:	930d      	str	r3, [sp, #52]	; 0x34
   89794:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89796:	2b09      	cmp	r3, #9
   89798:	d998      	bls.n	896cc <_dtoa_r+0x17c>
   8979a:	2300      	movs	r3, #0
   8979c:	2501      	movs	r5, #1
   8979e:	9324      	str	r3, [sp, #144]	; 0x90
   897a0:	9325      	str	r3, [sp, #148]	; 0x94
   897a2:	f04f 33ff 	mov.w	r3, #4294967295
   897a6:	950c      	str	r5, [sp, #48]	; 0x30
   897a8:	930a      	str	r3, [sp, #40]	; 0x28
   897aa:	2100      	movs	r1, #0
   897ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   897ae:	6461      	str	r1, [r4, #68]	; 0x44
   897b0:	9312      	str	r3, [sp, #72]	; 0x48
   897b2:	4620      	mov	r0, r4
   897b4:	f001 feec 	bl	8b590 <_Balloc>
   897b8:	9003      	str	r0, [sp, #12]
   897ba:	2800      	cmp	r0, #0
   897bc:	f000 8607 	beq.w	8a3ce <_dtoa_r+0xe7e>
   897c0:	9b03      	ldr	r3, [sp, #12]
   897c2:	6423      	str	r3, [r4, #64]	; 0x40
   897c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   897c6:	2b0e      	cmp	r3, #14
   897c8:	f200 80e9 	bhi.w	8999e <_dtoa_r+0x44e>
   897cc:	2d00      	cmp	r5, #0
   897ce:	f000 80e6 	beq.w	8999e <_dtoa_r+0x44e>
   897d2:	9907      	ldr	r1, [sp, #28]
   897d4:	2900      	cmp	r1, #0
   897d6:	f340 8452 	ble.w	8a07e <_dtoa_r+0xb2e>
   897da:	4bb5      	ldr	r3, [pc, #724]	; (89ab0 <_dtoa_r+0x560>)
   897dc:	f001 020f 	and.w	r2, r1, #15
   897e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   897e4:	05c8      	lsls	r0, r1, #23
   897e6:	ea4f 1521 	mov.w	r5, r1, asr #4
   897ea:	e9d3 6700 	ldrd	r6, r7, [r3]
   897ee:	f140 83ee 	bpl.w	89fce <_dtoa_r+0xa7e>
   897f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   897f6:	4baf      	ldr	r3, [pc, #700]	; (89ab4 <_dtoa_r+0x564>)
   897f8:	f04f 0903 	mov.w	r9, #3
   897fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   89800:	f003 fae8 	bl	8cdd4 <__aeabi_ddiv>
   89804:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89808:	f005 050f 	and.w	r5, r5, #15
   8980c:	b18d      	cbz	r5, 89832 <_dtoa_r+0x2e2>
   8980e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 89ab4 <_dtoa_r+0x564>
   89812:	07e9      	lsls	r1, r5, #31
   89814:	d509      	bpl.n	8982a <_dtoa_r+0x2da>
   89816:	e9d8 2300 	ldrd	r2, r3, [r8]
   8981a:	4630      	mov	r0, r6
   8981c:	4639      	mov	r1, r7
   8981e:	f003 f9af 	bl	8cb80 <__aeabi_dmul>
   89822:	4606      	mov	r6, r0
   89824:	460f      	mov	r7, r1
   89826:	f109 0901 	add.w	r9, r9, #1
   8982a:	106d      	asrs	r5, r5, #1
   8982c:	f108 0808 	add.w	r8, r8, #8
   89830:	d1ef      	bne.n	89812 <_dtoa_r+0x2c2>
   89832:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89836:	4632      	mov	r2, r6
   89838:	463b      	mov	r3, r7
   8983a:	f003 facb 	bl	8cdd4 <__aeabi_ddiv>
   8983e:	4606      	mov	r6, r0
   89840:	460f      	mov	r7, r1
   89842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89844:	b143      	cbz	r3, 89858 <_dtoa_r+0x308>
   89846:	2200      	movs	r2, #0
   89848:	4630      	mov	r0, r6
   8984a:	4639      	mov	r1, r7
   8984c:	4b9a      	ldr	r3, [pc, #616]	; (89ab8 <_dtoa_r+0x568>)
   8984e:	f003 fc09 	bl	8d064 <__aeabi_dcmplt>
   89852:	2800      	cmp	r0, #0
   89854:	f040 853b 	bne.w	8a2ce <_dtoa_r+0xd7e>
   89858:	4648      	mov	r0, r9
   8985a:	f003 f927 	bl	8caac <__aeabi_i2d>
   8985e:	4632      	mov	r2, r6
   89860:	463b      	mov	r3, r7
   89862:	f003 f98d 	bl	8cb80 <__aeabi_dmul>
   89866:	4b95      	ldr	r3, [pc, #596]	; (89abc <_dtoa_r+0x56c>)
   89868:	2200      	movs	r2, #0
   8986a:	f002 ffd3 	bl	8c814 <__adddf3>
   8986e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89870:	4680      	mov	r8, r0
   89872:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89876:	2b00      	cmp	r3, #0
   89878:	f000 83ce 	beq.w	8a018 <_dtoa_r+0xac8>
   8987c:	9b07      	ldr	r3, [sp, #28]
   8987e:	9313      	str	r3, [sp, #76]	; 0x4c
   89880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89882:	9310      	str	r3, [sp, #64]	; 0x40
   89884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89886:	2b00      	cmp	r3, #0
   89888:	f000 84b7 	beq.w	8a1fa <_dtoa_r+0xcaa>
   8988c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8988e:	4b88      	ldr	r3, [pc, #544]	; (89ab0 <_dtoa_r+0x560>)
   89890:	2000      	movs	r0, #0
   89892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89896:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   8989a:	4989      	ldr	r1, [pc, #548]	; (89ac0 <_dtoa_r+0x570>)
   8989c:	f003 fa9a 	bl	8cdd4 <__aeabi_ddiv>
   898a0:	4642      	mov	r2, r8
   898a2:	464b      	mov	r3, r9
   898a4:	f002 ffb4 	bl	8c810 <__aeabi_dsub>
   898a8:	4602      	mov	r2, r0
   898aa:	460b      	mov	r3, r1
   898ac:	4630      	mov	r0, r6
   898ae:	4639      	mov	r1, r7
   898b0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   898b4:	f003 fc14 	bl	8d0e0 <__aeabi_d2iz>
   898b8:	4680      	mov	r8, r0
   898ba:	f003 f8f7 	bl	8caac <__aeabi_i2d>
   898be:	4602      	mov	r2, r0
   898c0:	460b      	mov	r3, r1
   898c2:	4630      	mov	r0, r6
   898c4:	4639      	mov	r1, r7
   898c6:	f002 ffa3 	bl	8c810 <__aeabi_dsub>
   898ca:	9d03      	ldr	r5, [sp, #12]
   898cc:	f108 0330 	add.w	r3, r8, #48	; 0x30
   898d0:	4606      	mov	r6, r0
   898d2:	460f      	mov	r7, r1
   898d4:	4602      	mov	r2, r0
   898d6:	f805 3b01 	strb.w	r3, [r5], #1
   898da:	460b      	mov	r3, r1
   898dc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   898e0:	f003 fbde 	bl	8d0a0 <__aeabi_dcmpgt>
   898e4:	2800      	cmp	r0, #0
   898e6:	f040 853b 	bne.w	8a360 <_dtoa_r+0xe10>
   898ea:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   898ee:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   898f2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   898f6:	f04f 0900 	mov.w	r9, #0
   898fa:	9410      	str	r4, [sp, #64]	; 0x40
   898fc:	e02a      	b.n	89954 <_dtoa_r+0x404>
   898fe:	f109 0901 	add.w	r9, r9, #1
   89902:	45c1      	cmp	r9, r8
   89904:	da48      	bge.n	89998 <_dtoa_r+0x448>
   89906:	4650      	mov	r0, sl
   89908:	4659      	mov	r1, fp
   8990a:	2200      	movs	r2, #0
   8990c:	4b6d      	ldr	r3, [pc, #436]	; (89ac4 <_dtoa_r+0x574>)
   8990e:	f003 f937 	bl	8cb80 <__aeabi_dmul>
   89912:	2200      	movs	r2, #0
   89914:	4b6b      	ldr	r3, [pc, #428]	; (89ac4 <_dtoa_r+0x574>)
   89916:	4682      	mov	sl, r0
   89918:	468b      	mov	fp, r1
   8991a:	4630      	mov	r0, r6
   8991c:	4639      	mov	r1, r7
   8991e:	f003 f92f 	bl	8cb80 <__aeabi_dmul>
   89922:	460f      	mov	r7, r1
   89924:	4606      	mov	r6, r0
   89926:	f003 fbdb 	bl	8d0e0 <__aeabi_d2iz>
   8992a:	4604      	mov	r4, r0
   8992c:	f003 f8be 	bl	8caac <__aeabi_i2d>
   89930:	4602      	mov	r2, r0
   89932:	460b      	mov	r3, r1
   89934:	4630      	mov	r0, r6
   89936:	4639      	mov	r1, r7
   89938:	f002 ff6a 	bl	8c810 <__aeabi_dsub>
   8993c:	3430      	adds	r4, #48	; 0x30
   8993e:	4652      	mov	r2, sl
   89940:	465b      	mov	r3, fp
   89942:	f805 4b01 	strb.w	r4, [r5], #1
   89946:	4606      	mov	r6, r0
   89948:	460f      	mov	r7, r1
   8994a:	f003 fb8b 	bl	8d064 <__aeabi_dcmplt>
   8994e:	2800      	cmp	r0, #0
   89950:	f040 8503 	bne.w	8a35a <_dtoa_r+0xe0a>
   89954:	4632      	mov	r2, r6
   89956:	463b      	mov	r3, r7
   89958:	2000      	movs	r0, #0
   8995a:	4957      	ldr	r1, [pc, #348]	; (89ab8 <_dtoa_r+0x568>)
   8995c:	f002 ff58 	bl	8c810 <__aeabi_dsub>
   89960:	4652      	mov	r2, sl
   89962:	465b      	mov	r3, fp
   89964:	f003 fb7e 	bl	8d064 <__aeabi_dcmplt>
   89968:	2800      	cmp	r0, #0
   8996a:	d0c8      	beq.n	898fe <_dtoa_r+0x3ae>
   8996c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8996e:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   89972:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89974:	9a03      	ldr	r2, [sp, #12]
   89976:	9307      	str	r3, [sp, #28]
   89978:	e002      	b.n	89980 <_dtoa_r+0x430>
   8997a:	4295      	cmp	r5, r2
   8997c:	f000 84d2 	beq.w	8a324 <_dtoa_r+0xdd4>
   89980:	46a9      	mov	r9, r5
   89982:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   89986:	2b39      	cmp	r3, #57	; 0x39
   89988:	d0f7      	beq.n	8997a <_dtoa_r+0x42a>
   8998a:	3301      	adds	r3, #1
   8998c:	b2db      	uxtb	r3, r3
   8998e:	702b      	strb	r3, [r5, #0]
   89990:	9b07      	ldr	r3, [sp, #28]
   89992:	3301      	adds	r3, #1
   89994:	9307      	str	r3, [sp, #28]
   89996:	e1a0      	b.n	89cda <_dtoa_r+0x78a>
   89998:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8999a:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   8999e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   899a0:	2b00      	cmp	r3, #0
   899a2:	f2c0 8093 	blt.w	89acc <_dtoa_r+0x57c>
   899a6:	9a07      	ldr	r2, [sp, #28]
   899a8:	2a0e      	cmp	r2, #14
   899aa:	f300 808f 	bgt.w	89acc <_dtoa_r+0x57c>
   899ae:	4b40      	ldr	r3, [pc, #256]	; (89ab0 <_dtoa_r+0x560>)
   899b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   899b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   899b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   899bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   899be:	2b00      	cmp	r3, #0
   899c0:	da1a      	bge.n	899f8 <_dtoa_r+0x4a8>
   899c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   899c4:	2b00      	cmp	r3, #0
   899c6:	dc17      	bgt.n	899f8 <_dtoa_r+0x4a8>
   899c8:	f040 833f 	bne.w	8a04a <_dtoa_r+0xafa>
   899cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   899d0:	2200      	movs	r2, #0
   899d2:	4b3d      	ldr	r3, [pc, #244]	; (89ac8 <_dtoa_r+0x578>)
   899d4:	f003 f8d4 	bl	8cb80 <__aeabi_dmul>
   899d8:	4602      	mov	r2, r0
   899da:	460b      	mov	r3, r1
   899dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   899e0:	f003 fb4a 	bl	8d078 <__aeabi_dcmple>
   899e4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   899e8:	4645      	mov	r5, r8
   899ea:	2800      	cmp	r0, #0
   899ec:	f000 82cd 	beq.w	89f8a <_dtoa_r+0xa3a>
   899f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   899f2:	9f03      	ldr	r7, [sp, #12]
   899f4:	43de      	mvns	r6, r3
   899f6:	e2d0      	b.n	89f9a <_dtoa_r+0xa4a>
   899f8:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   899fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89a00:	4632      	mov	r2, r6
   89a02:	463b      	mov	r3, r7
   89a04:	f003 f9e6 	bl	8cdd4 <__aeabi_ddiv>
   89a08:	f003 fb6a 	bl	8d0e0 <__aeabi_d2iz>
   89a0c:	4680      	mov	r8, r0
   89a0e:	f003 f84d 	bl	8caac <__aeabi_i2d>
   89a12:	4632      	mov	r2, r6
   89a14:	463b      	mov	r3, r7
   89a16:	f003 f8b3 	bl	8cb80 <__aeabi_dmul>
   89a1a:	460b      	mov	r3, r1
   89a1c:	4602      	mov	r2, r0
   89a1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89a22:	f002 fef5 	bl	8c810 <__aeabi_dsub>
   89a26:	9d03      	ldr	r5, [sp, #12]
   89a28:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89a2c:	f805 3b01 	strb.w	r3, [r5], #1
   89a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89a32:	2b01      	cmp	r3, #1
   89a34:	f000 837f 	beq.w	8a136 <_dtoa_r+0xbe6>
   89a38:	f8cd a018 	str.w	sl, [sp, #24]
   89a3c:	f04f 0901 	mov.w	r9, #1
   89a40:	469b      	mov	fp, r3
   89a42:	46aa      	mov	sl, r5
   89a44:	9408      	str	r4, [sp, #32]
   89a46:	e01d      	b.n	89a84 <_dtoa_r+0x534>
   89a48:	4632      	mov	r2, r6
   89a4a:	463b      	mov	r3, r7
   89a4c:	4620      	mov	r0, r4
   89a4e:	4629      	mov	r1, r5
   89a50:	f003 f9c0 	bl	8cdd4 <__aeabi_ddiv>
   89a54:	f003 fb44 	bl	8d0e0 <__aeabi_d2iz>
   89a58:	4680      	mov	r8, r0
   89a5a:	f003 f827 	bl	8caac <__aeabi_i2d>
   89a5e:	4632      	mov	r2, r6
   89a60:	463b      	mov	r3, r7
   89a62:	f003 f88d 	bl	8cb80 <__aeabi_dmul>
   89a66:	f109 0901 	add.w	r9, r9, #1
   89a6a:	460b      	mov	r3, r1
   89a6c:	4602      	mov	r2, r0
   89a6e:	4629      	mov	r1, r5
   89a70:	4620      	mov	r0, r4
   89a72:	f002 fecd 	bl	8c810 <__aeabi_dsub>
   89a76:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89a7a:	45cb      	cmp	fp, r9
   89a7c:	f80a 3b01 	strb.w	r3, [sl], #1
   89a80:	f000 8355 	beq.w	8a12e <_dtoa_r+0xbde>
   89a84:	2200      	movs	r2, #0
   89a86:	4b0f      	ldr	r3, [pc, #60]	; (89ac4 <_dtoa_r+0x574>)
   89a88:	f003 f87a 	bl	8cb80 <__aeabi_dmul>
   89a8c:	2200      	movs	r2, #0
   89a8e:	2300      	movs	r3, #0
   89a90:	4604      	mov	r4, r0
   89a92:	460d      	mov	r5, r1
   89a94:	f003 fadc 	bl	8d050 <__aeabi_dcmpeq>
   89a98:	2800      	cmp	r0, #0
   89a9a:	d0d5      	beq.n	89a48 <_dtoa_r+0x4f8>
   89a9c:	4655      	mov	r5, sl
   89a9e:	9c08      	ldr	r4, [sp, #32]
   89aa0:	f8dd a018 	ldr.w	sl, [sp, #24]
   89aa4:	9b07      	ldr	r3, [sp, #28]
   89aa6:	46a9      	mov	r9, r5
   89aa8:	3301      	adds	r3, #1
   89aaa:	9307      	str	r3, [sp, #28]
   89aac:	e115      	b.n	89cda <_dtoa_r+0x78a>
   89aae:	bf00      	nop
   89ab0:	0008d6c8 	.word	0x0008d6c8
   89ab4:	0008d6a0 	.word	0x0008d6a0
   89ab8:	3ff00000 	.word	0x3ff00000
   89abc:	401c0000 	.word	0x401c0000
   89ac0:	3fe00000 	.word	0x3fe00000
   89ac4:	40240000 	.word	0x40240000
   89ac8:	40140000 	.word	0x40140000
   89acc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89ace:	2a00      	cmp	r2, #0
   89ad0:	d03d      	beq.n	89b4e <_dtoa_r+0x5fe>
   89ad2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   89ad4:	2a01      	cmp	r2, #1
   89ad6:	f340 82bc 	ble.w	8a052 <_dtoa_r+0xb02>
   89ada:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89adc:	1e5f      	subs	r7, r3, #1
   89ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89ae0:	42bb      	cmp	r3, r7
   89ae2:	f2c0 826e 	blt.w	89fc2 <_dtoa_r+0xa72>
   89ae6:	1bdf      	subs	r7, r3, r7
   89ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89aea:	2b00      	cmp	r3, #0
   89aec:	f2c0 8354 	blt.w	8a198 <_dtoa_r+0xc48>
   89af0:	9a06      	ldr	r2, [sp, #24]
   89af2:	4611      	mov	r1, r2
   89af4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   89af6:	4419      	add	r1, r3
   89af8:	4616      	mov	r6, r2
   89afa:	441a      	add	r2, r3
   89afc:	9106      	str	r1, [sp, #24]
   89afe:	920b      	str	r2, [sp, #44]	; 0x2c
   89b00:	2101      	movs	r1, #1
   89b02:	4620      	mov	r0, r4
   89b04:	f001 fe12 	bl	8b72c <__i2b>
   89b08:	4605      	mov	r5, r0
   89b0a:	e023      	b.n	89b54 <_dtoa_r+0x604>
   89b0c:	2301      	movs	r3, #1
   89b0e:	eba8 0505 	sub.w	r5, r8, r5
   89b12:	930e      	str	r3, [sp, #56]	; 0x38
   89b14:	1e6b      	subs	r3, r5, #1
   89b16:	9306      	str	r3, [sp, #24]
   89b18:	f57f adc5 	bpl.w	896a6 <_dtoa_r+0x156>
   89b1c:	f1c5 0301 	rsb	r3, r5, #1
   89b20:	930b      	str	r3, [sp, #44]	; 0x2c
   89b22:	2300      	movs	r3, #0
   89b24:	9306      	str	r3, [sp, #24]
   89b26:	e5c0      	b.n	896aa <_dtoa_r+0x15a>
   89b28:	4658      	mov	r0, fp
   89b2a:	f002 ffbf 	bl	8caac <__aeabi_i2d>
   89b2e:	4632      	mov	r2, r6
   89b30:	463b      	mov	r3, r7
   89b32:	f003 fa8d 	bl	8d050 <__aeabi_dcmpeq>
   89b36:	2800      	cmp	r0, #0
   89b38:	f47f ad9c 	bne.w	89674 <_dtoa_r+0x124>
   89b3c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89b40:	e598      	b.n	89674 <_dtoa_r+0x124>
   89b42:	4bc7      	ldr	r3, [pc, #796]	; (89e60 <_dtoa_r+0x910>)
   89b44:	9303      	str	r3, [sp, #12]
   89b46:	9803      	ldr	r0, [sp, #12]
   89b48:	b01b      	add	sp, #108	; 0x6c
   89b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89b4e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89b50:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   89b54:	2e00      	cmp	r6, #0
   89b56:	dd0c      	ble.n	89b72 <_dtoa_r+0x622>
   89b58:	9a06      	ldr	r2, [sp, #24]
   89b5a:	2a00      	cmp	r2, #0
   89b5c:	dd09      	ble.n	89b72 <_dtoa_r+0x622>
   89b5e:	42b2      	cmp	r2, r6
   89b60:	4613      	mov	r3, r2
   89b62:	bfa8      	it	ge
   89b64:	4633      	movge	r3, r6
   89b66:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89b68:	1af6      	subs	r6, r6, r3
   89b6a:	1ac9      	subs	r1, r1, r3
   89b6c:	1ad3      	subs	r3, r2, r3
   89b6e:	910b      	str	r1, [sp, #44]	; 0x2c
   89b70:	9306      	str	r3, [sp, #24]
   89b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89b74:	b1d3      	cbz	r3, 89bac <_dtoa_r+0x65c>
   89b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89b78:	2b00      	cmp	r3, #0
   89b7a:	f000 81a3 	beq.w	89ec4 <_dtoa_r+0x974>
   89b7e:	2f00      	cmp	r7, #0
   89b80:	dd10      	ble.n	89ba4 <_dtoa_r+0x654>
   89b82:	4629      	mov	r1, r5
   89b84:	463a      	mov	r2, r7
   89b86:	4620      	mov	r0, r4
   89b88:	f001 fe96 	bl	8b8b8 <__pow5mult>
   89b8c:	4652      	mov	r2, sl
   89b8e:	4601      	mov	r1, r0
   89b90:	4605      	mov	r5, r0
   89b92:	4620      	mov	r0, r4
   89b94:	f001 fde0 	bl	8b758 <__multiply>
   89b98:	4603      	mov	r3, r0
   89b9a:	4651      	mov	r1, sl
   89b9c:	4620      	mov	r0, r4
   89b9e:	469a      	mov	sl, r3
   89ba0:	f001 fd1c 	bl	8b5dc <_Bfree>
   89ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89ba6:	1bda      	subs	r2, r3, r7
   89ba8:	f040 818d 	bne.w	89ec6 <_dtoa_r+0x976>
   89bac:	2101      	movs	r1, #1
   89bae:	4620      	mov	r0, r4
   89bb0:	f001 fdbc 	bl	8b72c <__i2b>
   89bb4:	f1bb 0f00 	cmp.w	fp, #0
   89bb8:	4680      	mov	r8, r0
   89bba:	f300 80b3 	bgt.w	89d24 <_dtoa_r+0x7d4>
   89bbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89bc0:	2b01      	cmp	r3, #1
   89bc2:	f340 818a 	ble.w	89eda <_dtoa_r+0x98a>
   89bc6:	f04f 0900 	mov.w	r9, #0
   89bca:	2001      	movs	r0, #1
   89bcc:	f1bb 0f00 	cmp.w	fp, #0
   89bd0:	f040 80b4 	bne.w	89d3c <_dtoa_r+0x7ec>
   89bd4:	9a06      	ldr	r2, [sp, #24]
   89bd6:	4410      	add	r0, r2
   89bd8:	f010 001f 	ands.w	r0, r0, #31
   89bdc:	f000 8092 	beq.w	89d04 <_dtoa_r+0x7b4>
   89be0:	f1c0 0320 	rsb	r3, r0, #32
   89be4:	2b04      	cmp	r3, #4
   89be6:	f340 83f9 	ble.w	8a3dc <_dtoa_r+0xe8c>
   89bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89bec:	f1c0 001c 	rsb	r0, r0, #28
   89bf0:	4403      	add	r3, r0
   89bf2:	4402      	add	r2, r0
   89bf4:	930b      	str	r3, [sp, #44]	; 0x2c
   89bf6:	4406      	add	r6, r0
   89bf8:	9206      	str	r2, [sp, #24]
   89bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89bfc:	2b00      	cmp	r3, #0
   89bfe:	dd05      	ble.n	89c0c <_dtoa_r+0x6bc>
   89c00:	4651      	mov	r1, sl
   89c02:	461a      	mov	r2, r3
   89c04:	4620      	mov	r0, r4
   89c06:	f001 fea3 	bl	8b950 <__lshift>
   89c0a:	4682      	mov	sl, r0
   89c0c:	9b06      	ldr	r3, [sp, #24]
   89c0e:	2b00      	cmp	r3, #0
   89c10:	dd05      	ble.n	89c1e <_dtoa_r+0x6ce>
   89c12:	4641      	mov	r1, r8
   89c14:	461a      	mov	r2, r3
   89c16:	4620      	mov	r0, r4
   89c18:	f001 fe9a 	bl	8b950 <__lshift>
   89c1c:	4680      	mov	r8, r0
   89c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89c20:	2b00      	cmp	r3, #0
   89c22:	f040 8135 	bne.w	89e90 <_dtoa_r+0x940>
   89c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89c28:	2b00      	cmp	r3, #0
   89c2a:	f340 811b 	ble.w	89e64 <_dtoa_r+0x914>
   89c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89c30:	2b00      	cmp	r3, #0
   89c32:	f040 809a 	bne.w	89d6a <_dtoa_r+0x81a>
   89c36:	9b07      	ldr	r3, [sp, #28]
   89c38:	3301      	adds	r3, #1
   89c3a:	9307      	str	r3, [sp, #28]
   89c3c:	2601      	movs	r6, #1
   89c3e:	9f03      	ldr	r7, [sp, #12]
   89c40:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   89c44:	e007      	b.n	89c56 <_dtoa_r+0x706>
   89c46:	4651      	mov	r1, sl
   89c48:	2300      	movs	r3, #0
   89c4a:	220a      	movs	r2, #10
   89c4c:	4620      	mov	r0, r4
   89c4e:	f001 fccf 	bl	8b5f0 <__multadd>
   89c52:	4682      	mov	sl, r0
   89c54:	3601      	adds	r6, #1
   89c56:	4641      	mov	r1, r8
   89c58:	4650      	mov	r0, sl
   89c5a:	f7ff fbe9 	bl	89430 <quorem>
   89c5e:	454e      	cmp	r6, r9
   89c60:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89c64:	f807 3b01 	strb.w	r3, [r7], #1
   89c68:	dbed      	blt.n	89c46 <_dtoa_r+0x6f6>
   89c6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89c6c:	2600      	movs	r6, #0
   89c6e:	2a00      	cmp	r2, #0
   89c70:	bfcc      	ite	gt
   89c72:	4693      	movgt	fp, r2
   89c74:	f04f 0b01 	movle.w	fp, #1
   89c78:	9a03      	ldr	r2, [sp, #12]
   89c7a:	4493      	add	fp, r2
   89c7c:	4651      	mov	r1, sl
   89c7e:	2201      	movs	r2, #1
   89c80:	4620      	mov	r0, r4
   89c82:	9304      	str	r3, [sp, #16]
   89c84:	f001 fe64 	bl	8b950 <__lshift>
   89c88:	4641      	mov	r1, r8
   89c8a:	4682      	mov	sl, r0
   89c8c:	f001 fed4 	bl	8ba38 <__mcmp>
   89c90:	2800      	cmp	r0, #0
   89c92:	f340 81a8 	ble.w	89fe6 <_dtoa_r+0xa96>
   89c96:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   89c9a:	9a03      	ldr	r2, [sp, #12]
   89c9c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89ca0:	e004      	b.n	89cac <_dtoa_r+0x75c>
   89ca2:	455a      	cmp	r2, fp
   89ca4:	f000 81e4 	beq.w	8a070 <_dtoa_r+0xb20>
   89ca8:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89cac:	2b39      	cmp	r3, #57	; 0x39
   89cae:	f10b 0901 	add.w	r9, fp, #1
   89cb2:	d0f6      	beq.n	89ca2 <_dtoa_r+0x752>
   89cb4:	3301      	adds	r3, #1
   89cb6:	f88b 3000 	strb.w	r3, [fp]
   89cba:	4641      	mov	r1, r8
   89cbc:	4620      	mov	r0, r4
   89cbe:	f001 fc8d 	bl	8b5dc <_Bfree>
   89cc2:	b155      	cbz	r5, 89cda <_dtoa_r+0x78a>
   89cc4:	b12e      	cbz	r6, 89cd2 <_dtoa_r+0x782>
   89cc6:	42ae      	cmp	r6, r5
   89cc8:	d003      	beq.n	89cd2 <_dtoa_r+0x782>
   89cca:	4631      	mov	r1, r6
   89ccc:	4620      	mov	r0, r4
   89cce:	f001 fc85 	bl	8b5dc <_Bfree>
   89cd2:	4629      	mov	r1, r5
   89cd4:	4620      	mov	r0, r4
   89cd6:	f001 fc81 	bl	8b5dc <_Bfree>
   89cda:	4651      	mov	r1, sl
   89cdc:	4620      	mov	r0, r4
   89cde:	f001 fc7d 	bl	8b5dc <_Bfree>
   89ce2:	2300      	movs	r3, #0
   89ce4:	f889 3000 	strb.w	r3, [r9]
   89ce8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89cea:	461a      	mov	r2, r3
   89cec:	9b07      	ldr	r3, [sp, #28]
   89cee:	6013      	str	r3, [r2, #0]
   89cf0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89cf2:	2b00      	cmp	r3, #0
   89cf4:	f43f ac67 	beq.w	895c6 <_dtoa_r+0x76>
   89cf8:	9803      	ldr	r0, [sp, #12]
   89cfa:	f8c3 9000 	str.w	r9, [r3]
   89cfe:	b01b      	add	sp, #108	; 0x6c
   89d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89d04:	201c      	movs	r0, #28
   89d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89d08:	4406      	add	r6, r0
   89d0a:	4403      	add	r3, r0
   89d0c:	930b      	str	r3, [sp, #44]	; 0x2c
   89d0e:	9b06      	ldr	r3, [sp, #24]
   89d10:	4403      	add	r3, r0
   89d12:	9306      	str	r3, [sp, #24]
   89d14:	e771      	b.n	89bfa <_dtoa_r+0x6aa>
   89d16:	2501      	movs	r5, #1
   89d18:	e4de      	b.n	896d8 <_dtoa_r+0x188>
   89d1a:	f1c0 0020 	rsb	r0, r0, #32
   89d1e:	fa06 f000 	lsl.w	r0, r6, r0
   89d22:	e474      	b.n	8960e <_dtoa_r+0xbe>
   89d24:	4601      	mov	r1, r0
   89d26:	465a      	mov	r2, fp
   89d28:	4620      	mov	r0, r4
   89d2a:	f001 fdc5 	bl	8b8b8 <__pow5mult>
   89d2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89d30:	4680      	mov	r8, r0
   89d32:	2b01      	cmp	r3, #1
   89d34:	f340 81d1 	ble.w	8a0da <_dtoa_r+0xb8a>
   89d38:	f04f 0900 	mov.w	r9, #0
   89d3c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   89d40:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   89d44:	6918      	ldr	r0, [r3, #16]
   89d46:	f001 fca1 	bl	8b68c <__hi0bits>
   89d4a:	f1c0 0020 	rsb	r0, r0, #32
   89d4e:	e741      	b.n	89bd4 <_dtoa_r+0x684>
   89d50:	4629      	mov	r1, r5
   89d52:	2300      	movs	r3, #0
   89d54:	220a      	movs	r2, #10
   89d56:	4620      	mov	r0, r4
   89d58:	f001 fc4a 	bl	8b5f0 <__multadd>
   89d5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89d5e:	4605      	mov	r5, r0
   89d60:	2b00      	cmp	r3, #0
   89d62:	f340 8315 	ble.w	8a390 <_dtoa_r+0xe40>
   89d66:	9707      	str	r7, [sp, #28]
   89d68:	930a      	str	r3, [sp, #40]	; 0x28
   89d6a:	2e00      	cmp	r6, #0
   89d6c:	f300 8122 	bgt.w	89fb4 <_dtoa_r+0xa64>
   89d70:	f1b9 0f00 	cmp.w	r9, #0
   89d74:	f040 81f9 	bne.w	8a16a <_dtoa_r+0xc1a>
   89d78:	462f      	mov	r7, r5
   89d7a:	9903      	ldr	r1, [sp, #12]
   89d7c:	9b04      	ldr	r3, [sp, #16]
   89d7e:	460e      	mov	r6, r1
   89d80:	f003 0201 	and.w	r2, r3, #1
   89d84:	1e4b      	subs	r3, r1, #1
   89d86:	9924      	ldr	r1, [sp, #144]	; 0x90
   89d88:	920c      	str	r2, [sp, #48]	; 0x30
   89d8a:	430a      	orrs	r2, r1
   89d8c:	920b      	str	r2, [sp, #44]	; 0x2c
   89d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89d90:	441a      	add	r2, r3
   89d92:	920a      	str	r2, [sp, #40]	; 0x28
   89d94:	4641      	mov	r1, r8
   89d96:	4650      	mov	r0, sl
   89d98:	f7ff fb4a 	bl	89430 <quorem>
   89d9c:	4629      	mov	r1, r5
   89d9e:	4683      	mov	fp, r0
   89da0:	4650      	mov	r0, sl
   89da2:	f001 fe49 	bl	8ba38 <__mcmp>
   89da6:	463a      	mov	r2, r7
   89da8:	4641      	mov	r1, r8
   89daa:	4681      	mov	r9, r0
   89dac:	4620      	mov	r0, r4
   89dae:	f001 fe61 	bl	8ba74 <__mdiff>
   89db2:	68c2      	ldr	r2, [r0, #12]
   89db4:	4601      	mov	r1, r0
   89db6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   89dba:	2a00      	cmp	r2, #0
   89dbc:	d142      	bne.n	89e44 <_dtoa_r+0x8f4>
   89dbe:	9006      	str	r0, [sp, #24]
   89dc0:	4650      	mov	r0, sl
   89dc2:	9308      	str	r3, [sp, #32]
   89dc4:	f001 fe38 	bl	8ba38 <__mcmp>
   89dc8:	9906      	ldr	r1, [sp, #24]
   89dca:	9004      	str	r0, [sp, #16]
   89dcc:	4620      	mov	r0, r4
   89dce:	f001 fc05 	bl	8b5dc <_Bfree>
   89dd2:	9a04      	ldr	r2, [sp, #16]
   89dd4:	9b08      	ldr	r3, [sp, #32]
   89dd6:	b91a      	cbnz	r2, 89de0 <_dtoa_r+0x890>
   89dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89dda:	2900      	cmp	r1, #0
   89ddc:	f000 82cb 	beq.w	8a376 <_dtoa_r+0xe26>
   89de0:	f1b9 0f00 	cmp.w	r9, #0
   89de4:	f2c0 8185 	blt.w	8a0f2 <_dtoa_r+0xba2>
   89de8:	9924      	ldr	r1, [sp, #144]	; 0x90
   89dea:	ea41 0909 	orr.w	r9, r1, r9
   89dee:	990c      	ldr	r1, [sp, #48]	; 0x30
   89df0:	ea51 0109 	orrs.w	r1, r1, r9
   89df4:	f000 817d 	beq.w	8a0f2 <_dtoa_r+0xba2>
   89df8:	2a00      	cmp	r2, #0
   89dfa:	f300 81d1 	bgt.w	8a1a0 <_dtoa_r+0xc50>
   89dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89e00:	f106 0901 	add.w	r9, r6, #1
   89e04:	4296      	cmp	r6, r2
   89e06:	46cb      	mov	fp, r9
   89e08:	7033      	strb	r3, [r6, #0]
   89e0a:	f000 81e3 	beq.w	8a1d4 <_dtoa_r+0xc84>
   89e0e:	4651      	mov	r1, sl
   89e10:	2300      	movs	r3, #0
   89e12:	220a      	movs	r2, #10
   89e14:	4620      	mov	r0, r4
   89e16:	f001 fbeb 	bl	8b5f0 <__multadd>
   89e1a:	42bd      	cmp	r5, r7
   89e1c:	4682      	mov	sl, r0
   89e1e:	4629      	mov	r1, r5
   89e20:	f04f 0300 	mov.w	r3, #0
   89e24:	f04f 020a 	mov.w	r2, #10
   89e28:	4620      	mov	r0, r4
   89e2a:	d012      	beq.n	89e52 <_dtoa_r+0x902>
   89e2c:	f001 fbe0 	bl	8b5f0 <__multadd>
   89e30:	4639      	mov	r1, r7
   89e32:	4605      	mov	r5, r0
   89e34:	2300      	movs	r3, #0
   89e36:	220a      	movs	r2, #10
   89e38:	4620      	mov	r0, r4
   89e3a:	f001 fbd9 	bl	8b5f0 <__multadd>
   89e3e:	464e      	mov	r6, r9
   89e40:	4607      	mov	r7, r0
   89e42:	e7a7      	b.n	89d94 <_dtoa_r+0x844>
   89e44:	4620      	mov	r0, r4
   89e46:	9304      	str	r3, [sp, #16]
   89e48:	f001 fbc8 	bl	8b5dc <_Bfree>
   89e4c:	2201      	movs	r2, #1
   89e4e:	9b04      	ldr	r3, [sp, #16]
   89e50:	e7c6      	b.n	89de0 <_dtoa_r+0x890>
   89e52:	f001 fbcd 	bl	8b5f0 <__multadd>
   89e56:	464e      	mov	r6, r9
   89e58:	4605      	mov	r5, r0
   89e5a:	4607      	mov	r7, r0
   89e5c:	e79a      	b.n	89d94 <_dtoa_r+0x844>
   89e5e:	bf00      	nop
   89e60:	0008d52c 	.word	0x0008d52c
   89e64:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89e66:	2b02      	cmp	r3, #2
   89e68:	dc7e      	bgt.n	89f68 <_dtoa_r+0xa18>
   89e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89e6c:	2b00      	cmp	r3, #0
   89e6e:	f47f af7c 	bne.w	89d6a <_dtoa_r+0x81a>
   89e72:	4641      	mov	r1, r8
   89e74:	4650      	mov	r0, sl
   89e76:	f7ff fadb 	bl	89430 <quorem>
   89e7a:	9a07      	ldr	r2, [sp, #28]
   89e7c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   89e80:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89e84:	3201      	adds	r2, #1
   89e86:	2600      	movs	r6, #0
   89e88:	9207      	str	r2, [sp, #28]
   89e8a:	f80b 3b01 	strb.w	r3, [fp], #1
   89e8e:	e6f5      	b.n	89c7c <_dtoa_r+0x72c>
   89e90:	4641      	mov	r1, r8
   89e92:	4650      	mov	r0, sl
   89e94:	f001 fdd0 	bl	8ba38 <__mcmp>
   89e98:	2800      	cmp	r0, #0
   89e9a:	f6bf aec4 	bge.w	89c26 <_dtoa_r+0x6d6>
   89e9e:	4651      	mov	r1, sl
   89ea0:	2300      	movs	r3, #0
   89ea2:	220a      	movs	r2, #10
   89ea4:	4620      	mov	r0, r4
   89ea6:	f001 fba3 	bl	8b5f0 <__multadd>
   89eaa:	9b07      	ldr	r3, [sp, #28]
   89eac:	4682      	mov	sl, r0
   89eae:	1e5f      	subs	r7, r3, #1
   89eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89eb2:	2b00      	cmp	r3, #0
   89eb4:	f47f af4c 	bne.w	89d50 <_dtoa_r+0x800>
   89eb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89eba:	2b00      	cmp	r3, #0
   89ebc:	f340 8262 	ble.w	8a384 <_dtoa_r+0xe34>
   89ec0:	930a      	str	r3, [sp, #40]	; 0x28
   89ec2:	e6bb      	b.n	89c3c <_dtoa_r+0x6ec>
   89ec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89ec6:	4651      	mov	r1, sl
   89ec8:	4620      	mov	r0, r4
   89eca:	f001 fcf5 	bl	8b8b8 <__pow5mult>
   89ece:	4682      	mov	sl, r0
   89ed0:	e66c      	b.n	89bac <_dtoa_r+0x65c>
   89ed2:	4bba      	ldr	r3, [pc, #744]	; (8a1bc <_dtoa_r+0xc6c>)
   89ed4:	9303      	str	r3, [sp, #12]
   89ed6:	3303      	adds	r3, #3
   89ed8:	e419      	b.n	8970e <_dtoa_r+0x1be>
   89eda:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89ede:	2900      	cmp	r1, #0
   89ee0:	f47f ae71 	bne.w	89bc6 <_dtoa_r+0x676>
   89ee4:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89ee8:	2b00      	cmp	r3, #0
   89eea:	f47f ae6c 	bne.w	89bc6 <_dtoa_r+0x676>
   89eee:	4bb4      	ldr	r3, [pc, #720]	; (8a1c0 <_dtoa_r+0xc70>)
   89ef0:	4013      	ands	r3, r2
   89ef2:	2b00      	cmp	r3, #0
   89ef4:	f000 822a 	beq.w	8a34c <_dtoa_r+0xdfc>
   89ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89efa:	f04f 0901 	mov.w	r9, #1
   89efe:	3301      	adds	r3, #1
   89f00:	930b      	str	r3, [sp, #44]	; 0x2c
   89f02:	9b06      	ldr	r3, [sp, #24]
   89f04:	3301      	adds	r3, #1
   89f06:	9306      	str	r3, [sp, #24]
   89f08:	e65f      	b.n	89bca <_dtoa_r+0x67a>
   89f0a:	2301      	movs	r3, #1
   89f0c:	930c      	str	r3, [sp, #48]	; 0x30
   89f0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89f10:	9a07      	ldr	r2, [sp, #28]
   89f12:	4413      	add	r3, r2
   89f14:	9312      	str	r3, [sp, #72]	; 0x48
   89f16:	3301      	adds	r3, #1
   89f18:	2b01      	cmp	r3, #1
   89f1a:	461e      	mov	r6, r3
   89f1c:	bfb8      	it	lt
   89f1e:	2601      	movlt	r6, #1
   89f20:	930a      	str	r3, [sp, #40]	; 0x28
   89f22:	2100      	movs	r1, #0
   89f24:	2e17      	cmp	r6, #23
   89f26:	6461      	str	r1, [r4, #68]	; 0x44
   89f28:	f77f ac43 	ble.w	897b2 <_dtoa_r+0x262>
   89f2c:	2201      	movs	r2, #1
   89f2e:	2304      	movs	r3, #4
   89f30:	005b      	lsls	r3, r3, #1
   89f32:	f103 0014 	add.w	r0, r3, #20
   89f36:	42b0      	cmp	r0, r6
   89f38:	4611      	mov	r1, r2
   89f3a:	f102 0201 	add.w	r2, r2, #1
   89f3e:	d9f7      	bls.n	89f30 <_dtoa_r+0x9e0>
   89f40:	6461      	str	r1, [r4, #68]	; 0x44
   89f42:	e436      	b.n	897b2 <_dtoa_r+0x262>
   89f44:	2301      	movs	r3, #1
   89f46:	930c      	str	r3, [sp, #48]	; 0x30
   89f48:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89f4a:	2b00      	cmp	r3, #0
   89f4c:	dd46      	ble.n	89fdc <_dtoa_r+0xa8c>
   89f4e:	461e      	mov	r6, r3
   89f50:	9312      	str	r3, [sp, #72]	; 0x48
   89f52:	930a      	str	r3, [sp, #40]	; 0x28
   89f54:	e7e5      	b.n	89f22 <_dtoa_r+0x9d2>
   89f56:	2300      	movs	r3, #0
   89f58:	930c      	str	r3, [sp, #48]	; 0x30
   89f5a:	e7d8      	b.n	89f0e <_dtoa_r+0x9be>
   89f5c:	2300      	movs	r3, #0
   89f5e:	930c      	str	r3, [sp, #48]	; 0x30
   89f60:	e7f2      	b.n	89f48 <_dtoa_r+0x9f8>
   89f62:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89f64:	9707      	str	r7, [sp, #28]
   89f66:	930a      	str	r3, [sp, #40]	; 0x28
   89f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89f6a:	2b00      	cmp	r3, #0
   89f6c:	f47f ad40 	bne.w	899f0 <_dtoa_r+0x4a0>
   89f70:	4641      	mov	r1, r8
   89f72:	2205      	movs	r2, #5
   89f74:	4620      	mov	r0, r4
   89f76:	f001 fb3b 	bl	8b5f0 <__multadd>
   89f7a:	4680      	mov	r8, r0
   89f7c:	4650      	mov	r0, sl
   89f7e:	4641      	mov	r1, r8
   89f80:	f001 fd5a 	bl	8ba38 <__mcmp>
   89f84:	2800      	cmp	r0, #0
   89f86:	f77f ad33 	ble.w	899f0 <_dtoa_r+0x4a0>
   89f8a:	9f03      	ldr	r7, [sp, #12]
   89f8c:	2231      	movs	r2, #49	; 0x31
   89f8e:	463b      	mov	r3, r7
   89f90:	9e07      	ldr	r6, [sp, #28]
   89f92:	f803 2b01 	strb.w	r2, [r3], #1
   89f96:	3601      	adds	r6, #1
   89f98:	9303      	str	r3, [sp, #12]
   89f9a:	4641      	mov	r1, r8
   89f9c:	4620      	mov	r0, r4
   89f9e:	f001 fb1d 	bl	8b5dc <_Bfree>
   89fa2:	1c73      	adds	r3, r6, #1
   89fa4:	f8dd 900c 	ldr.w	r9, [sp, #12]
   89fa8:	9307      	str	r3, [sp, #28]
   89faa:	9703      	str	r7, [sp, #12]
   89fac:	2d00      	cmp	r5, #0
   89fae:	f47f ae90 	bne.w	89cd2 <_dtoa_r+0x782>
   89fb2:	e692      	b.n	89cda <_dtoa_r+0x78a>
   89fb4:	4629      	mov	r1, r5
   89fb6:	4632      	mov	r2, r6
   89fb8:	4620      	mov	r0, r4
   89fba:	f001 fcc9 	bl	8b950 <__lshift>
   89fbe:	4605      	mov	r5, r0
   89fc0:	e6d6      	b.n	89d70 <_dtoa_r+0x820>
   89fc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89fc4:	970d      	str	r7, [sp, #52]	; 0x34
   89fc6:	1afb      	subs	r3, r7, r3
   89fc8:	449b      	add	fp, r3
   89fca:	2700      	movs	r7, #0
   89fcc:	e58c      	b.n	89ae8 <_dtoa_r+0x598>
   89fce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   89fd2:	f04f 0902 	mov.w	r9, #2
   89fd6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   89fda:	e417      	b.n	8980c <_dtoa_r+0x2bc>
   89fdc:	2301      	movs	r3, #1
   89fde:	9325      	str	r3, [sp, #148]	; 0x94
   89fe0:	930a      	str	r3, [sp, #40]	; 0x28
   89fe2:	f7ff bbe2 	b.w	897aa <_dtoa_r+0x25a>
   89fe6:	d103      	bne.n	89ff0 <_dtoa_r+0xaa0>
   89fe8:	9b04      	ldr	r3, [sp, #16]
   89fea:	07db      	lsls	r3, r3, #31
   89fec:	f53f ae53 	bmi.w	89c96 <_dtoa_r+0x746>
   89ff0:	46d9      	mov	r9, fp
   89ff2:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89ff6:	2b30      	cmp	r3, #48	; 0x30
   89ff8:	d0fa      	beq.n	89ff0 <_dtoa_r+0xaa0>
   89ffa:	e65e      	b.n	89cba <_dtoa_r+0x76a>
   89ffc:	4648      	mov	r0, r9
   89ffe:	f002 fd55 	bl	8caac <__aeabi_i2d>
   8a002:	4632      	mov	r2, r6
   8a004:	463b      	mov	r3, r7
   8a006:	f002 fdbb 	bl	8cb80 <__aeabi_dmul>
   8a00a:	2200      	movs	r2, #0
   8a00c:	4b6d      	ldr	r3, [pc, #436]	; (8a1c4 <_dtoa_r+0xc74>)
   8a00e:	f002 fc01 	bl	8c814 <__adddf3>
   8a012:	4680      	mov	r8, r0
   8a014:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a018:	4630      	mov	r0, r6
   8a01a:	4639      	mov	r1, r7
   8a01c:	2200      	movs	r2, #0
   8a01e:	4b6a      	ldr	r3, [pc, #424]	; (8a1c8 <_dtoa_r+0xc78>)
   8a020:	f002 fbf6 	bl	8c810 <__aeabi_dsub>
   8a024:	4642      	mov	r2, r8
   8a026:	464b      	mov	r3, r9
   8a028:	4606      	mov	r6, r0
   8a02a:	460f      	mov	r7, r1
   8a02c:	f003 f838 	bl	8d0a0 <__aeabi_dcmpgt>
   8a030:	2800      	cmp	r0, #0
   8a032:	f040 8187 	bne.w	8a344 <_dtoa_r+0xdf4>
   8a036:	4642      	mov	r2, r8
   8a038:	4630      	mov	r0, r6
   8a03a:	4639      	mov	r1, r7
   8a03c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   8a040:	f003 f810 	bl	8d064 <__aeabi_dcmplt>
   8a044:	2800      	cmp	r0, #0
   8a046:	f43f acaa 	beq.w	8999e <_dtoa_r+0x44e>
   8a04a:	f04f 0800 	mov.w	r8, #0
   8a04e:	4645      	mov	r5, r8
   8a050:	e4ce      	b.n	899f0 <_dtoa_r+0x4a0>
   8a052:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8a054:	2a00      	cmp	r2, #0
   8a056:	f000 80c3 	beq.w	8a1e0 <_dtoa_r+0xc90>
   8a05a:	9a06      	ldr	r2, [sp, #24]
   8a05c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8a060:	441a      	add	r2, r3
   8a062:	9206      	str	r2, [sp, #24]
   8a064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a066:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a068:	4616      	mov	r6, r2
   8a06a:	441a      	add	r2, r3
   8a06c:	920b      	str	r2, [sp, #44]	; 0x2c
   8a06e:	e547      	b.n	89b00 <_dtoa_r+0x5b0>
   8a070:	2331      	movs	r3, #49	; 0x31
   8a072:	9a07      	ldr	r2, [sp, #28]
   8a074:	3201      	adds	r2, #1
   8a076:	9207      	str	r2, [sp, #28]
   8a078:	9a03      	ldr	r2, [sp, #12]
   8a07a:	7013      	strb	r3, [r2, #0]
   8a07c:	e61d      	b.n	89cba <_dtoa_r+0x76a>
   8a07e:	f000 814b 	beq.w	8a318 <_dtoa_r+0xdc8>
   8a082:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a086:	9b07      	ldr	r3, [sp, #28]
   8a088:	425d      	negs	r5, r3
   8a08a:	4b50      	ldr	r3, [pc, #320]	; (8a1cc <_dtoa_r+0xc7c>)
   8a08c:	f005 020f 	and.w	r2, r5, #15
   8a090:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a094:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a098:	f002 fd72 	bl	8cb80 <__aeabi_dmul>
   8a09c:	112d      	asrs	r5, r5, #4
   8a09e:	4606      	mov	r6, r0
   8a0a0:	460f      	mov	r7, r1
   8a0a2:	f000 817d 	beq.w	8a3a0 <_dtoa_r+0xe50>
   8a0a6:	2300      	movs	r3, #0
   8a0a8:	f04f 0902 	mov.w	r9, #2
   8a0ac:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8a1d0 <_dtoa_r+0xc80>
   8a0b0:	07ea      	lsls	r2, r5, #31
   8a0b2:	d505      	bpl.n	8a0c0 <_dtoa_r+0xb70>
   8a0b4:	e9d8 2300 	ldrd	r2, r3, [r8]
   8a0b8:	f002 fd62 	bl	8cb80 <__aeabi_dmul>
   8a0bc:	2301      	movs	r3, #1
   8a0be:	4499      	add	r9, r3
   8a0c0:	106d      	asrs	r5, r5, #1
   8a0c2:	f108 0808 	add.w	r8, r8, #8
   8a0c6:	d1f3      	bne.n	8a0b0 <_dtoa_r+0xb60>
   8a0c8:	2b00      	cmp	r3, #0
   8a0ca:	f43f abba 	beq.w	89842 <_dtoa_r+0x2f2>
   8a0ce:	4606      	mov	r6, r0
   8a0d0:	460f      	mov	r7, r1
   8a0d2:	f7ff bbb6 	b.w	89842 <_dtoa_r+0x2f2>
   8a0d6:	900e      	str	r0, [sp, #56]	; 0x38
   8a0d8:	e520      	b.n	89b1c <_dtoa_r+0x5cc>
   8a0da:	9b04      	ldr	r3, [sp, #16]
   8a0dc:	2b00      	cmp	r3, #0
   8a0de:	f47f ae2b 	bne.w	89d38 <_dtoa_r+0x7e8>
   8a0e2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a0e6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a0ea:	2b00      	cmp	r3, #0
   8a0ec:	f43f aeff 	beq.w	89eee <_dtoa_r+0x99e>
   8a0f0:	e622      	b.n	89d38 <_dtoa_r+0x7e8>
   8a0f2:	2a00      	cmp	r2, #0
   8a0f4:	dd12      	ble.n	8a11c <_dtoa_r+0xbcc>
   8a0f6:	4651      	mov	r1, sl
   8a0f8:	2201      	movs	r2, #1
   8a0fa:	4620      	mov	r0, r4
   8a0fc:	9304      	str	r3, [sp, #16]
   8a0fe:	f001 fc27 	bl	8b950 <__lshift>
   8a102:	4641      	mov	r1, r8
   8a104:	4682      	mov	sl, r0
   8a106:	f001 fc97 	bl	8ba38 <__mcmp>
   8a10a:	2800      	cmp	r0, #0
   8a10c:	9b04      	ldr	r3, [sp, #16]
   8a10e:	f340 812c 	ble.w	8a36a <_dtoa_r+0xe1a>
   8a112:	2b39      	cmp	r3, #57	; 0x39
   8a114:	f000 810c 	beq.w	8a330 <_dtoa_r+0xde0>
   8a118:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8a11c:	46b1      	mov	r9, r6
   8a11e:	f809 3b01 	strb.w	r3, [r9], #1
   8a122:	9b07      	ldr	r3, [sp, #28]
   8a124:	462e      	mov	r6, r5
   8a126:	3301      	adds	r3, #1
   8a128:	463d      	mov	r5, r7
   8a12a:	9307      	str	r3, [sp, #28]
   8a12c:	e5c5      	b.n	89cba <_dtoa_r+0x76a>
   8a12e:	4655      	mov	r5, sl
   8a130:	9c08      	ldr	r4, [sp, #32]
   8a132:	f8dd a018 	ldr.w	sl, [sp, #24]
   8a136:	4602      	mov	r2, r0
   8a138:	460b      	mov	r3, r1
   8a13a:	f002 fb6b 	bl	8c814 <__adddf3>
   8a13e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a142:	4606      	mov	r6, r0
   8a144:	460f      	mov	r7, r1
   8a146:	f002 ffab 	bl	8d0a0 <__aeabi_dcmpgt>
   8a14a:	b960      	cbnz	r0, 8a166 <_dtoa_r+0xc16>
   8a14c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a150:	4630      	mov	r0, r6
   8a152:	4639      	mov	r1, r7
   8a154:	f002 ff7c 	bl	8d050 <__aeabi_dcmpeq>
   8a158:	2800      	cmp	r0, #0
   8a15a:	f43f aca3 	beq.w	89aa4 <_dtoa_r+0x554>
   8a15e:	f018 0f01 	tst.w	r8, #1
   8a162:	f43f ac9f 	beq.w	89aa4 <_dtoa_r+0x554>
   8a166:	9a03      	ldr	r2, [sp, #12]
   8a168:	e40a      	b.n	89980 <_dtoa_r+0x430>
   8a16a:	4620      	mov	r0, r4
   8a16c:	6869      	ldr	r1, [r5, #4]
   8a16e:	f001 fa0f 	bl	8b590 <_Balloc>
   8a172:	4606      	mov	r6, r0
   8a174:	2800      	cmp	r0, #0
   8a176:	f000 8117 	beq.w	8a3a8 <_dtoa_r+0xe58>
   8a17a:	692b      	ldr	r3, [r5, #16]
   8a17c:	f105 010c 	add.w	r1, r5, #12
   8a180:	3302      	adds	r3, #2
   8a182:	009a      	lsls	r2, r3, #2
   8a184:	300c      	adds	r0, #12
   8a186:	f7fc fb35 	bl	867f4 <memcpy>
   8a18a:	4631      	mov	r1, r6
   8a18c:	2201      	movs	r2, #1
   8a18e:	4620      	mov	r0, r4
   8a190:	f001 fbde 	bl	8b950 <__lshift>
   8a194:	4607      	mov	r7, r0
   8a196:	e5f0      	b.n	89d7a <_dtoa_r+0x82a>
   8a198:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8a19c:	1a9e      	subs	r6, r3, r2
   8a19e:	e4af      	b.n	89b00 <_dtoa_r+0x5b0>
   8a1a0:	2b39      	cmp	r3, #57	; 0x39
   8a1a2:	f000 80c5 	beq.w	8a330 <_dtoa_r+0xde0>
   8a1a6:	46b1      	mov	r9, r6
   8a1a8:	3301      	adds	r3, #1
   8a1aa:	f809 3b01 	strb.w	r3, [r9], #1
   8a1ae:	9b07      	ldr	r3, [sp, #28]
   8a1b0:	462e      	mov	r6, r5
   8a1b2:	3301      	adds	r3, #1
   8a1b4:	463d      	mov	r5, r7
   8a1b6:	9307      	str	r3, [sp, #28]
   8a1b8:	e57f      	b.n	89cba <_dtoa_r+0x76a>
   8a1ba:	bf00      	nop
   8a1bc:	0008d570 	.word	0x0008d570
   8a1c0:	7ff00000 	.word	0x7ff00000
   8a1c4:	401c0000 	.word	0x401c0000
   8a1c8:	40140000 	.word	0x40140000
   8a1cc:	0008d6c8 	.word	0x0008d6c8
   8a1d0:	0008d6a0 	.word	0x0008d6a0
   8a1d4:	9a07      	ldr	r2, [sp, #28]
   8a1d6:	462e      	mov	r6, r5
   8a1d8:	3201      	adds	r2, #1
   8a1da:	463d      	mov	r5, r7
   8a1dc:	9207      	str	r2, [sp, #28]
   8a1de:	e54d      	b.n	89c7c <_dtoa_r+0x72c>
   8a1e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8a1e2:	9a06      	ldr	r2, [sp, #24]
   8a1e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8a1e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8a1ea:	441a      	add	r2, r3
   8a1ec:	9206      	str	r2, [sp, #24]
   8a1ee:	460a      	mov	r2, r1
   8a1f0:	441a      	add	r2, r3
   8a1f2:	460e      	mov	r6, r1
   8a1f4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a1f6:	920b      	str	r2, [sp, #44]	; 0x2c
   8a1f8:	e482      	b.n	89b00 <_dtoa_r+0x5b0>
   8a1fa:	9810      	ldr	r0, [sp, #64]	; 0x40
   8a1fc:	497f      	ldr	r1, [pc, #508]	; (8a3fc <_dtoa_r+0xeac>)
   8a1fe:	4642      	mov	r2, r8
   8a200:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8a204:	464b      	mov	r3, r9
   8a206:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8a20a:	f002 fcb9 	bl	8cb80 <__aeabi_dmul>
   8a20e:	4602      	mov	r2, r0
   8a210:	460b      	mov	r3, r1
   8a212:	4630      	mov	r0, r6
   8a214:	4639      	mov	r1, r7
   8a216:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8a21a:	f002 ff61 	bl	8d0e0 <__aeabi_d2iz>
   8a21e:	4680      	mov	r8, r0
   8a220:	f002 fc44 	bl	8caac <__aeabi_i2d>
   8a224:	460b      	mov	r3, r1
   8a226:	4602      	mov	r2, r0
   8a228:	4639      	mov	r1, r7
   8a22a:	4630      	mov	r0, r6
   8a22c:	f002 faf0 	bl	8c810 <__aeabi_dsub>
   8a230:	4606      	mov	r6, r0
   8a232:	9810      	ldr	r0, [sp, #64]	; 0x40
   8a234:	9d03      	ldr	r5, [sp, #12]
   8a236:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a23a:	2801      	cmp	r0, #1
   8a23c:	460f      	mov	r7, r1
   8a23e:	f805 3b01 	strb.w	r3, [r5], #1
   8a242:	d01e      	beq.n	8a282 <_dtoa_r+0xd32>
   8a244:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8a246:	9a03      	ldr	r2, [sp, #12]
   8a248:	4413      	add	r3, r2
   8a24a:	4698      	mov	r8, r3
   8a24c:	2200      	movs	r2, #0
   8a24e:	4b6c      	ldr	r3, [pc, #432]	; (8a400 <_dtoa_r+0xeb0>)
   8a250:	4630      	mov	r0, r6
   8a252:	4639      	mov	r1, r7
   8a254:	f002 fc94 	bl	8cb80 <__aeabi_dmul>
   8a258:	460f      	mov	r7, r1
   8a25a:	4606      	mov	r6, r0
   8a25c:	f002 ff40 	bl	8d0e0 <__aeabi_d2iz>
   8a260:	4681      	mov	r9, r0
   8a262:	f002 fc23 	bl	8caac <__aeabi_i2d>
   8a266:	4602      	mov	r2, r0
   8a268:	460b      	mov	r3, r1
   8a26a:	4630      	mov	r0, r6
   8a26c:	4639      	mov	r1, r7
   8a26e:	f002 facf 	bl	8c810 <__aeabi_dsub>
   8a272:	f109 0930 	add.w	r9, r9, #48	; 0x30
   8a276:	f805 9b01 	strb.w	r9, [r5], #1
   8a27a:	4545      	cmp	r5, r8
   8a27c:	4606      	mov	r6, r0
   8a27e:	460f      	mov	r7, r1
   8a280:	d1e4      	bne.n	8a24c <_dtoa_r+0xcfc>
   8a282:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   8a286:	2200      	movs	r2, #0
   8a288:	4b5e      	ldr	r3, [pc, #376]	; (8a404 <_dtoa_r+0xeb4>)
   8a28a:	4640      	mov	r0, r8
   8a28c:	4649      	mov	r1, r9
   8a28e:	f002 fac1 	bl	8c814 <__adddf3>
   8a292:	4632      	mov	r2, r6
   8a294:	463b      	mov	r3, r7
   8a296:	f002 fee5 	bl	8d064 <__aeabi_dcmplt>
   8a29a:	2800      	cmp	r0, #0
   8a29c:	d158      	bne.n	8a350 <_dtoa_r+0xe00>
   8a29e:	4642      	mov	r2, r8
   8a2a0:	464b      	mov	r3, r9
   8a2a2:	2000      	movs	r0, #0
   8a2a4:	4957      	ldr	r1, [pc, #348]	; (8a404 <_dtoa_r+0xeb4>)
   8a2a6:	f002 fab3 	bl	8c810 <__aeabi_dsub>
   8a2aa:	4632      	mov	r2, r6
   8a2ac:	463b      	mov	r3, r7
   8a2ae:	f002 fef7 	bl	8d0a0 <__aeabi_dcmpgt>
   8a2b2:	2800      	cmp	r0, #0
   8a2b4:	f43f ab73 	beq.w	8999e <_dtoa_r+0x44e>
   8a2b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8a2bc:	46a9      	mov	r9, r5
   8a2be:	2b30      	cmp	r3, #48	; 0x30
   8a2c0:	f105 35ff 	add.w	r5, r5, #4294967295
   8a2c4:	d0f8      	beq.n	8a2b8 <_dtoa_r+0xd68>
   8a2c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a2c8:	3301      	adds	r3, #1
   8a2ca:	9307      	str	r3, [sp, #28]
   8a2cc:	e505      	b.n	89cda <_dtoa_r+0x78a>
   8a2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a2d0:	2b00      	cmp	r3, #0
   8a2d2:	f43f ae93 	beq.w	89ffc <_dtoa_r+0xaac>
   8a2d6:	9d12      	ldr	r5, [sp, #72]	; 0x48
   8a2d8:	2d00      	cmp	r5, #0
   8a2da:	f77f ab60 	ble.w	8999e <_dtoa_r+0x44e>
   8a2de:	2200      	movs	r2, #0
   8a2e0:	4b47      	ldr	r3, [pc, #284]	; (8a400 <_dtoa_r+0xeb0>)
   8a2e2:	4630      	mov	r0, r6
   8a2e4:	4639      	mov	r1, r7
   8a2e6:	f002 fc4b 	bl	8cb80 <__aeabi_dmul>
   8a2ea:	4606      	mov	r6, r0
   8a2ec:	460f      	mov	r7, r1
   8a2ee:	f109 0001 	add.w	r0, r9, #1
   8a2f2:	f002 fbdb 	bl	8caac <__aeabi_i2d>
   8a2f6:	4632      	mov	r2, r6
   8a2f8:	463b      	mov	r3, r7
   8a2fa:	f002 fc41 	bl	8cb80 <__aeabi_dmul>
   8a2fe:	2200      	movs	r2, #0
   8a300:	4b41      	ldr	r3, [pc, #260]	; (8a408 <_dtoa_r+0xeb8>)
   8a302:	f002 fa87 	bl	8c814 <__adddf3>
   8a306:	9a07      	ldr	r2, [sp, #28]
   8a308:	4680      	mov	r8, r0
   8a30a:	3a01      	subs	r2, #1
   8a30c:	9213      	str	r2, [sp, #76]	; 0x4c
   8a30e:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a312:	9510      	str	r5, [sp, #64]	; 0x40
   8a314:	f7ff bab6 	b.w	89884 <_dtoa_r+0x334>
   8a318:	f04f 0902 	mov.w	r9, #2
   8a31c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   8a320:	f7ff ba8f 	b.w	89842 <_dtoa_r+0x2f2>
   8a324:	9b07      	ldr	r3, [sp, #28]
   8a326:	3301      	adds	r3, #1
   8a328:	9307      	str	r3, [sp, #28]
   8a32a:	2331      	movs	r3, #49	; 0x31
   8a32c:	f7ff bb2f 	b.w	8998e <_dtoa_r+0x43e>
   8a330:	46b3      	mov	fp, r6
   8a332:	2339      	movs	r3, #57	; 0x39
   8a334:	9a07      	ldr	r2, [sp, #28]
   8a336:	462e      	mov	r6, r5
   8a338:	3201      	adds	r2, #1
   8a33a:	463d      	mov	r5, r7
   8a33c:	9207      	str	r2, [sp, #28]
   8a33e:	f80b 3b01 	strb.w	r3, [fp], #1
   8a342:	e4aa      	b.n	89c9a <_dtoa_r+0x74a>
   8a344:	f04f 0800 	mov.w	r8, #0
   8a348:	4645      	mov	r5, r8
   8a34a:	e61e      	b.n	89f8a <_dtoa_r+0xa3a>
   8a34c:	4699      	mov	r9, r3
   8a34e:	e43c      	b.n	89bca <_dtoa_r+0x67a>
   8a350:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a352:	9a03      	ldr	r2, [sp, #12]
   8a354:	9307      	str	r3, [sp, #28]
   8a356:	f7ff bb13 	b.w	89980 <_dtoa_r+0x430>
   8a35a:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8a35e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8a360:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a362:	46a9      	mov	r9, r5
   8a364:	3301      	adds	r3, #1
   8a366:	9307      	str	r3, [sp, #28]
   8a368:	e4b7      	b.n	89cda <_dtoa_r+0x78a>
   8a36a:	f47f aed7 	bne.w	8a11c <_dtoa_r+0xbcc>
   8a36e:	07da      	lsls	r2, r3, #31
   8a370:	f57f aed4 	bpl.w	8a11c <_dtoa_r+0xbcc>
   8a374:	e6cd      	b.n	8a112 <_dtoa_r+0xbc2>
   8a376:	2b39      	cmp	r3, #57	; 0x39
   8a378:	d0da      	beq.n	8a330 <_dtoa_r+0xde0>
   8a37a:	f1b9 0f00 	cmp.w	r9, #0
   8a37e:	f73f aecb 	bgt.w	8a118 <_dtoa_r+0xbc8>
   8a382:	e6cb      	b.n	8a11c <_dtoa_r+0xbcc>
   8a384:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a386:	2b02      	cmp	r3, #2
   8a388:	f73f adeb 	bgt.w	89f62 <_dtoa_r+0xa12>
   8a38c:	9707      	str	r7, [sp, #28]
   8a38e:	e570      	b.n	89e72 <_dtoa_r+0x922>
   8a390:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a392:	2b02      	cmp	r3, #2
   8a394:	f73f ade5 	bgt.w	89f62 <_dtoa_r+0xa12>
   8a398:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a39a:	9707      	str	r7, [sp, #28]
   8a39c:	930a      	str	r3, [sp, #40]	; 0x28
   8a39e:	e4e4      	b.n	89d6a <_dtoa_r+0x81a>
   8a3a0:	f04f 0902 	mov.w	r9, #2
   8a3a4:	f7ff ba4d 	b.w	89842 <_dtoa_r+0x2f2>
   8a3a8:	4602      	mov	r2, r0
   8a3aa:	f240 21ea 	movw	r1, #746	; 0x2ea
   8a3ae:	4b17      	ldr	r3, [pc, #92]	; (8a40c <_dtoa_r+0xebc>)
   8a3b0:	4817      	ldr	r0, [pc, #92]	; (8a410 <_dtoa_r+0xec0>)
   8a3b2:	f002 f8a7 	bl	8c504 <__assert_func>
   8a3b6:	4b17      	ldr	r3, [pc, #92]	; (8a414 <_dtoa_r+0xec4>)
   8a3b8:	9303      	str	r3, [sp, #12]
   8a3ba:	f7ff b904 	b.w	895c6 <_dtoa_r+0x76>
   8a3be:	2500      	movs	r5, #0
   8a3c0:	4620      	mov	r0, r4
   8a3c2:	4629      	mov	r1, r5
   8a3c4:	6465      	str	r5, [r4, #68]	; 0x44
   8a3c6:	f001 f8e3 	bl	8b590 <_Balloc>
   8a3ca:	9003      	str	r0, [sp, #12]
   8a3cc:	b958      	cbnz	r0, 8a3e6 <_dtoa_r+0xe96>
   8a3ce:	2200      	movs	r2, #0
   8a3d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8a3d4:	4b0d      	ldr	r3, [pc, #52]	; (8a40c <_dtoa_r+0xebc>)
   8a3d6:	480e      	ldr	r0, [pc, #56]	; (8a410 <_dtoa_r+0xec0>)
   8a3d8:	f002 f894 	bl	8c504 <__assert_func>
   8a3dc:	f43f ac0d 	beq.w	89bfa <_dtoa_r+0x6aa>
   8a3e0:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8a3e4:	e48f      	b.n	89d06 <_dtoa_r+0x7b6>
   8a3e6:	f04f 33ff 	mov.w	r3, #4294967295
   8a3ea:	9312      	str	r3, [sp, #72]	; 0x48
   8a3ec:	930a      	str	r3, [sp, #40]	; 0x28
   8a3ee:	2301      	movs	r3, #1
   8a3f0:	9a03      	ldr	r2, [sp, #12]
   8a3f2:	9525      	str	r5, [sp, #148]	; 0x94
   8a3f4:	6422      	str	r2, [r4, #64]	; 0x40
   8a3f6:	930c      	str	r3, [sp, #48]	; 0x30
   8a3f8:	f7ff bad1 	b.w	8999e <_dtoa_r+0x44e>
   8a3fc:	0008d6c8 	.word	0x0008d6c8
   8a400:	40240000 	.word	0x40240000
   8a404:	3fe00000 	.word	0x3fe00000
   8a408:	401c0000 	.word	0x401c0000
   8a40c:	0008d580 	.word	0x0008d580
   8a410:	0008d594 	.word	0x0008d594
   8a414:	0008d574 	.word	0x0008d574

0008a418 <__sflush_r>:
   8a418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8a41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a420:	460d      	mov	r5, r1
   8a422:	0711      	lsls	r1, r2, #28
   8a424:	4680      	mov	r8, r0
   8a426:	d447      	bmi.n	8a4b8 <__sflush_r+0xa0>
   8a428:	686b      	ldr	r3, [r5, #4]
   8a42a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8a42e:	2b00      	cmp	r3, #0
   8a430:	81aa      	strh	r2, [r5, #12]
   8a432:	dd5e      	ble.n	8a4f2 <__sflush_r+0xda>
   8a434:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a436:	2c00      	cmp	r4, #0
   8a438:	d058      	beq.n	8a4ec <__sflush_r+0xd4>
   8a43a:	2300      	movs	r3, #0
   8a43c:	f8d8 6000 	ldr.w	r6, [r8]
   8a440:	f8c8 3000 	str.w	r3, [r8]
   8a444:	b293      	uxth	r3, r2
   8a446:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8a44a:	d156      	bne.n	8a4fa <__sflush_r+0xe2>
   8a44c:	2301      	movs	r3, #1
   8a44e:	4640      	mov	r0, r8
   8a450:	69e9      	ldr	r1, [r5, #28]
   8a452:	47a0      	blx	r4
   8a454:	1c43      	adds	r3, r0, #1
   8a456:	d067      	beq.n	8a528 <__sflush_r+0x110>
   8a458:	89ab      	ldrh	r3, [r5, #12]
   8a45a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a45c:	075f      	lsls	r7, r3, #29
   8a45e:	d505      	bpl.n	8a46c <__sflush_r+0x54>
   8a460:	686a      	ldr	r2, [r5, #4]
   8a462:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8a464:	1a80      	subs	r0, r0, r2
   8a466:	b10b      	cbz	r3, 8a46c <__sflush_r+0x54>
   8a468:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a46a:	1ac0      	subs	r0, r0, r3
   8a46c:	4602      	mov	r2, r0
   8a46e:	69e9      	ldr	r1, [r5, #28]
   8a470:	2300      	movs	r3, #0
   8a472:	4640      	mov	r0, r8
   8a474:	47a0      	blx	r4
   8a476:	1c41      	adds	r1, r0, #1
   8a478:	d141      	bne.n	8a4fe <__sflush_r+0xe6>
   8a47a:	f8d8 3000 	ldr.w	r3, [r8]
   8a47e:	2b00      	cmp	r3, #0
   8a480:	d03d      	beq.n	8a4fe <__sflush_r+0xe6>
   8a482:	2b1d      	cmp	r3, #29
   8a484:	d001      	beq.n	8a48a <__sflush_r+0x72>
   8a486:	2b16      	cmp	r3, #22
   8a488:	d156      	bne.n	8a538 <__sflush_r+0x120>
   8a48a:	2100      	movs	r1, #0
   8a48c:	692a      	ldr	r2, [r5, #16]
   8a48e:	89ab      	ldrh	r3, [r5, #12]
   8a490:	e9c5 2100 	strd	r2, r1, [r5]
   8a494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a498:	81ab      	strh	r3, [r5, #12]
   8a49a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8a49c:	f8c8 6000 	str.w	r6, [r8]
   8a4a0:	b321      	cbz	r1, 8a4ec <__sflush_r+0xd4>
   8a4a2:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8a4a6:	4299      	cmp	r1, r3
   8a4a8:	d002      	beq.n	8a4b0 <__sflush_r+0x98>
   8a4aa:	4640      	mov	r0, r8
   8a4ac:	f000 f9cc 	bl	8a848 <_free_r>
   8a4b0:	2000      	movs	r0, #0
   8a4b2:	6328      	str	r0, [r5, #48]	; 0x30
   8a4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a4b8:	692f      	ldr	r7, [r5, #16]
   8a4ba:	b1bf      	cbz	r7, 8a4ec <__sflush_r+0xd4>
   8a4bc:	b293      	uxth	r3, r2
   8a4be:	079a      	lsls	r2, r3, #30
   8a4c0:	bf18      	it	ne
   8a4c2:	2300      	movne	r3, #0
   8a4c4:	682e      	ldr	r6, [r5, #0]
   8a4c6:	bf08      	it	eq
   8a4c8:	696b      	ldreq	r3, [r5, #20]
   8a4ca:	602f      	str	r7, [r5, #0]
   8a4cc:	1bf6      	subs	r6, r6, r7
   8a4ce:	60ab      	str	r3, [r5, #8]
   8a4d0:	e00a      	b.n	8a4e8 <__sflush_r+0xd0>
   8a4d2:	4633      	mov	r3, r6
   8a4d4:	463a      	mov	r2, r7
   8a4d6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8a4d8:	4640      	mov	r0, r8
   8a4da:	69e9      	ldr	r1, [r5, #28]
   8a4dc:	47a0      	blx	r4
   8a4de:	1e04      	subs	r4, r0, #0
   8a4e0:	eba6 0604 	sub.w	r6, r6, r4
   8a4e4:	4427      	add	r7, r4
   8a4e6:	dd17      	ble.n	8a518 <__sflush_r+0x100>
   8a4e8:	2e00      	cmp	r6, #0
   8a4ea:	dcf2      	bgt.n	8a4d2 <__sflush_r+0xba>
   8a4ec:	2000      	movs	r0, #0
   8a4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a4f2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a4f4:	2b00      	cmp	r3, #0
   8a4f6:	dc9d      	bgt.n	8a434 <__sflush_r+0x1c>
   8a4f8:	e7f8      	b.n	8a4ec <__sflush_r+0xd4>
   8a4fa:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8a4fc:	e7ae      	b.n	8a45c <__sflush_r+0x44>
   8a4fe:	2100      	movs	r1, #0
   8a500:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8a504:	692a      	ldr	r2, [r5, #16]
   8a506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a50a:	81ab      	strh	r3, [r5, #12]
   8a50c:	04db      	lsls	r3, r3, #19
   8a50e:	e9c5 2100 	strd	r2, r1, [r5]
   8a512:	d5c2      	bpl.n	8a49a <__sflush_r+0x82>
   8a514:	6528      	str	r0, [r5, #80]	; 0x50
   8a516:	e7c0      	b.n	8a49a <__sflush_r+0x82>
   8a518:	89ab      	ldrh	r3, [r5, #12]
   8a51a:	f04f 30ff 	mov.w	r0, #4294967295
   8a51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a522:	81ab      	strh	r3, [r5, #12]
   8a524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a528:	f8d8 3000 	ldr.w	r3, [r8]
   8a52c:	2b00      	cmp	r3, #0
   8a52e:	d093      	beq.n	8a458 <__sflush_r+0x40>
   8a530:	2b1d      	cmp	r3, #29
   8a532:	d006      	beq.n	8a542 <__sflush_r+0x12a>
   8a534:	2b16      	cmp	r3, #22
   8a536:	d004      	beq.n	8a542 <__sflush_r+0x12a>
   8a538:	89ab      	ldrh	r3, [r5, #12]
   8a53a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a53e:	81ab      	strh	r3, [r5, #12]
   8a540:	e7d5      	b.n	8a4ee <__sflush_r+0xd6>
   8a542:	f8c8 6000 	str.w	r6, [r8]
   8a546:	e7d1      	b.n	8a4ec <__sflush_r+0xd4>

0008a548 <_fflush_r>:
   8a548:	b538      	push	{r3, r4, r5, lr}
   8a54a:	460c      	mov	r4, r1
   8a54c:	4605      	mov	r5, r0
   8a54e:	b108      	cbz	r0, 8a554 <_fflush_r+0xc>
   8a550:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a552:	b1a3      	cbz	r3, 8a57e <_fflush_r+0x36>
   8a554:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a558:	b1b8      	cbz	r0, 8a58a <_fflush_r+0x42>
   8a55a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a55c:	07db      	lsls	r3, r3, #31
   8a55e:	d401      	bmi.n	8a564 <_fflush_r+0x1c>
   8a560:	0581      	lsls	r1, r0, #22
   8a562:	d515      	bpl.n	8a590 <_fflush_r+0x48>
   8a564:	4628      	mov	r0, r5
   8a566:	4621      	mov	r1, r4
   8a568:	f7ff ff56 	bl	8a418 <__sflush_r>
   8a56c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a56e:	4605      	mov	r5, r0
   8a570:	07da      	lsls	r2, r3, #31
   8a572:	d402      	bmi.n	8a57a <_fflush_r+0x32>
   8a574:	89a3      	ldrh	r3, [r4, #12]
   8a576:	059b      	lsls	r3, r3, #22
   8a578:	d50e      	bpl.n	8a598 <_fflush_r+0x50>
   8a57a:	4628      	mov	r0, r5
   8a57c:	bd38      	pop	{r3, r4, r5, pc}
   8a57e:	f000 f83f 	bl	8a600 <__sinit>
   8a582:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a586:	2800      	cmp	r0, #0
   8a588:	d1e7      	bne.n	8a55a <_fflush_r+0x12>
   8a58a:	4605      	mov	r5, r0
   8a58c:	4628      	mov	r0, r5
   8a58e:	bd38      	pop	{r3, r4, r5, pc}
   8a590:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a592:	f000 fc07 	bl	8ada4 <__retarget_lock_acquire_recursive>
   8a596:	e7e5      	b.n	8a564 <_fflush_r+0x1c>
   8a598:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a59a:	f000 fc05 	bl	8ada8 <__retarget_lock_release_recursive>
   8a59e:	4628      	mov	r0, r5
   8a5a0:	bd38      	pop	{r3, r4, r5, pc}
   8a5a2:	bf00      	nop

0008a5a4 <std>:
   8a5a4:	2300      	movs	r3, #0
   8a5a6:	b510      	push	{r4, lr}
   8a5a8:	4604      	mov	r4, r0
   8a5aa:	e9c0 3300 	strd	r3, r3, [r0]
   8a5ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8a5b2:	8181      	strh	r1, [r0, #12]
   8a5b4:	81c2      	strh	r2, [r0, #14]
   8a5b6:	4619      	mov	r1, r3
   8a5b8:	6083      	str	r3, [r0, #8]
   8a5ba:	6643      	str	r3, [r0, #100]	; 0x64
   8a5bc:	6183      	str	r3, [r0, #24]
   8a5be:	2208      	movs	r2, #8
   8a5c0:	305c      	adds	r0, #92	; 0x5c
   8a5c2:	f7fc f98d 	bl	868e0 <memset>
   8a5c6:	4807      	ldr	r0, [pc, #28]	; (8a5e4 <std+0x40>)
   8a5c8:	4907      	ldr	r1, [pc, #28]	; (8a5e8 <std+0x44>)
   8a5ca:	4a08      	ldr	r2, [pc, #32]	; (8a5ec <std+0x48>)
   8a5cc:	4b08      	ldr	r3, [pc, #32]	; (8a5f0 <std+0x4c>)
   8a5ce:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8a5d2:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8a5d6:	62e3      	str	r3, [r4, #44]	; 0x2c
   8a5d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8a5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a5e0:	f000 bbdc 	b.w	8ad9c <__retarget_lock_init_recursive>
   8a5e4:	0008c0fd 	.word	0x0008c0fd
   8a5e8:	0008c121 	.word	0x0008c121
   8a5ec:	0008c161 	.word	0x0008c161
   8a5f0:	0008c181 	.word	0x0008c181

0008a5f4 <_cleanup_r>:
   8a5f4:	4901      	ldr	r1, [pc, #4]	; (8a5fc <_cleanup_r+0x8>)
   8a5f6:	f000 bba3 	b.w	8ad40 <_fwalk_reent>
   8a5fa:	bf00      	nop
   8a5fc:	0008c5c5 	.word	0x0008c5c5

0008a600 <__sinit>:
   8a600:	b510      	push	{r4, lr}
   8a602:	4604      	mov	r4, r0
   8a604:	4813      	ldr	r0, [pc, #76]	; (8a654 <__sinit+0x54>)
   8a606:	f000 fbcd 	bl	8ada4 <__retarget_lock_acquire_recursive>
   8a60a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8a60c:	b9ea      	cbnz	r2, 8a64a <__sinit+0x4a>
   8a60e:	2003      	movs	r0, #3
   8a610:	4911      	ldr	r1, [pc, #68]	; (8a658 <__sinit+0x58>)
   8a612:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8a616:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8a61a:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8a61e:	63e1      	str	r1, [r4, #60]	; 0x3c
   8a620:	6860      	ldr	r0, [r4, #4]
   8a622:	2104      	movs	r1, #4
   8a624:	f7ff ffbe 	bl	8a5a4 <std>
   8a628:	68a0      	ldr	r0, [r4, #8]
   8a62a:	2201      	movs	r2, #1
   8a62c:	2109      	movs	r1, #9
   8a62e:	f7ff ffb9 	bl	8a5a4 <std>
   8a632:	68e0      	ldr	r0, [r4, #12]
   8a634:	2202      	movs	r2, #2
   8a636:	2112      	movs	r1, #18
   8a638:	f7ff ffb4 	bl	8a5a4 <std>
   8a63c:	2301      	movs	r3, #1
   8a63e:	4805      	ldr	r0, [pc, #20]	; (8a654 <__sinit+0x54>)
   8a640:	63a3      	str	r3, [r4, #56]	; 0x38
   8a642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a646:	f000 bbaf 	b.w	8ada8 <__retarget_lock_release_recursive>
   8a64a:	4802      	ldr	r0, [pc, #8]	; (8a654 <__sinit+0x54>)
   8a64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a650:	f000 bbaa 	b.w	8ada8 <__retarget_lock_release_recursive>
   8a654:	20001854 	.word	0x20001854
   8a658:	0008a5f5 	.word	0x0008a5f5

0008a65c <__sfp_lock_acquire>:
   8a65c:	4801      	ldr	r0, [pc, #4]	; (8a664 <__sfp_lock_acquire+0x8>)
   8a65e:	f000 bba1 	b.w	8ada4 <__retarget_lock_acquire_recursive>
   8a662:	bf00      	nop
   8a664:	20001868 	.word	0x20001868

0008a668 <__sfp_lock_release>:
   8a668:	4801      	ldr	r0, [pc, #4]	; (8a670 <__sfp_lock_release+0x8>)
   8a66a:	f000 bb9d 	b.w	8ada8 <__retarget_lock_release_recursive>
   8a66e:	bf00      	nop
   8a670:	20001868 	.word	0x20001868

0008a674 <__libc_fini_array>:
   8a674:	b538      	push	{r3, r4, r5, lr}
   8a676:	4b08      	ldr	r3, [pc, #32]	; (8a698 <__libc_fini_array+0x24>)
   8a678:	4d08      	ldr	r5, [pc, #32]	; (8a69c <__libc_fini_array+0x28>)
   8a67a:	1b5b      	subs	r3, r3, r5
   8a67c:	109c      	asrs	r4, r3, #2
   8a67e:	d007      	beq.n	8a690 <__libc_fini_array+0x1c>
   8a680:	3b04      	subs	r3, #4
   8a682:	441d      	add	r5, r3
   8a684:	3c01      	subs	r4, #1
   8a686:	f855 3904 	ldr.w	r3, [r5], #-4
   8a68a:	4798      	blx	r3
   8a68c:	2c00      	cmp	r4, #0
   8a68e:	d1f9      	bne.n	8a684 <__libc_fini_array+0x10>
   8a690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a694:	f003 b92e 	b.w	8d8f4 <_fini>
   8a698:	0008d904 	.word	0x0008d904
   8a69c:	0008d900 	.word	0x0008d900

0008a6a0 <__fputwc>:
   8a6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8a6a4:	b083      	sub	sp, #12
   8a6a6:	4607      	mov	r7, r0
   8a6a8:	4688      	mov	r8, r1
   8a6aa:	4614      	mov	r4, r2
   8a6ac:	f000 fb6c 	bl	8ad88 <__locale_mb_cur_max>
   8a6b0:	2801      	cmp	r0, #1
   8a6b2:	d103      	bne.n	8a6bc <__fputwc+0x1c>
   8a6b4:	f108 33ff 	add.w	r3, r8, #4294967295
   8a6b8:	2bfe      	cmp	r3, #254	; 0xfe
   8a6ba:	d933      	bls.n	8a724 <__fputwc+0x84>
   8a6bc:	4642      	mov	r2, r8
   8a6be:	4638      	mov	r0, r7
   8a6c0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8a6c4:	a901      	add	r1, sp, #4
   8a6c6:	f001 fe95 	bl	8c3f4 <_wcrtomb_r>
   8a6ca:	1c42      	adds	r2, r0, #1
   8a6cc:	4606      	mov	r6, r0
   8a6ce:	d02f      	beq.n	8a730 <__fputwc+0x90>
   8a6d0:	b318      	cbz	r0, 8a71a <__fputwc+0x7a>
   8a6d2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8a6d6:	2500      	movs	r5, #0
   8a6d8:	f10d 0904 	add.w	r9, sp, #4
   8a6dc:	e008      	b.n	8a6f0 <__fputwc+0x50>
   8a6de:	6823      	ldr	r3, [r4, #0]
   8a6e0:	1c5a      	adds	r2, r3, #1
   8a6e2:	6022      	str	r2, [r4, #0]
   8a6e4:	7019      	strb	r1, [r3, #0]
   8a6e6:	3501      	adds	r5, #1
   8a6e8:	42b5      	cmp	r5, r6
   8a6ea:	d216      	bcs.n	8a71a <__fputwc+0x7a>
   8a6ec:	f815 1009 	ldrb.w	r1, [r5, r9]
   8a6f0:	68a3      	ldr	r3, [r4, #8]
   8a6f2:	3b01      	subs	r3, #1
   8a6f4:	2b00      	cmp	r3, #0
   8a6f6:	60a3      	str	r3, [r4, #8]
   8a6f8:	daf1      	bge.n	8a6de <__fputwc+0x3e>
   8a6fa:	69a2      	ldr	r2, [r4, #24]
   8a6fc:	4293      	cmp	r3, r2
   8a6fe:	db01      	blt.n	8a704 <__fputwc+0x64>
   8a700:	290a      	cmp	r1, #10
   8a702:	d1ec      	bne.n	8a6de <__fputwc+0x3e>
   8a704:	4622      	mov	r2, r4
   8a706:	4638      	mov	r0, r7
   8a708:	f001 fe1c 	bl	8c344 <__swbuf_r>
   8a70c:	1c43      	adds	r3, r0, #1
   8a70e:	d1ea      	bne.n	8a6e6 <__fputwc+0x46>
   8a710:	4606      	mov	r6, r0
   8a712:	4630      	mov	r0, r6
   8a714:	b003      	add	sp, #12
   8a716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a71a:	4646      	mov	r6, r8
   8a71c:	4630      	mov	r0, r6
   8a71e:	b003      	add	sp, #12
   8a720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a724:	fa5f f188 	uxtb.w	r1, r8
   8a728:	4606      	mov	r6, r0
   8a72a:	f88d 1004 	strb.w	r1, [sp, #4]
   8a72e:	e7d2      	b.n	8a6d6 <__fputwc+0x36>
   8a730:	4630      	mov	r0, r6
   8a732:	89a3      	ldrh	r3, [r4, #12]
   8a734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a738:	81a3      	strh	r3, [r4, #12]
   8a73a:	b003      	add	sp, #12
   8a73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008a740 <_fputwc_r>:
   8a740:	b530      	push	{r4, r5, lr}
   8a742:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a744:	4614      	mov	r4, r2
   8a746:	f013 0f01 	tst.w	r3, #1
   8a74a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8a74e:	4605      	mov	r5, r0
   8a750:	b083      	sub	sp, #12
   8a752:	b29a      	uxth	r2, r3
   8a754:	d101      	bne.n	8a75a <_fputwc_r+0x1a>
   8a756:	0598      	lsls	r0, r3, #22
   8a758:	d51c      	bpl.n	8a794 <_fputwc_r+0x54>
   8a75a:	0490      	lsls	r0, r2, #18
   8a75c:	d406      	bmi.n	8a76c <_fputwc_r+0x2c>
   8a75e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8a760:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8a764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8a768:	81a3      	strh	r3, [r4, #12]
   8a76a:	6662      	str	r2, [r4, #100]	; 0x64
   8a76c:	4628      	mov	r0, r5
   8a76e:	4622      	mov	r2, r4
   8a770:	f7ff ff96 	bl	8a6a0 <__fputwc>
   8a774:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a776:	4605      	mov	r5, r0
   8a778:	07da      	lsls	r2, r3, #31
   8a77a:	d402      	bmi.n	8a782 <_fputwc_r+0x42>
   8a77c:	89a3      	ldrh	r3, [r4, #12]
   8a77e:	059b      	lsls	r3, r3, #22
   8a780:	d502      	bpl.n	8a788 <_fputwc_r+0x48>
   8a782:	4628      	mov	r0, r5
   8a784:	b003      	add	sp, #12
   8a786:	bd30      	pop	{r4, r5, pc}
   8a788:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a78a:	f000 fb0d 	bl	8ada8 <__retarget_lock_release_recursive>
   8a78e:	4628      	mov	r0, r5
   8a790:	b003      	add	sp, #12
   8a792:	bd30      	pop	{r4, r5, pc}
   8a794:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a796:	9101      	str	r1, [sp, #4]
   8a798:	f000 fb04 	bl	8ada4 <__retarget_lock_acquire_recursive>
   8a79c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a7a0:	9901      	ldr	r1, [sp, #4]
   8a7a2:	b29a      	uxth	r2, r3
   8a7a4:	e7d9      	b.n	8a75a <_fputwc_r+0x1a>
   8a7a6:	bf00      	nop

0008a7a8 <_malloc_trim_r>:
   8a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a7aa:	460c      	mov	r4, r1
   8a7ac:	4f23      	ldr	r7, [pc, #140]	; (8a83c <_malloc_trim_r+0x94>)
   8a7ae:	4606      	mov	r6, r0
   8a7b0:	f000 fee2 	bl	8b578 <__malloc_lock>
   8a7b4:	68bb      	ldr	r3, [r7, #8]
   8a7b6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8a7ba:	685d      	ldr	r5, [r3, #4]
   8a7bc:	310f      	adds	r1, #15
   8a7be:	f025 0503 	bic.w	r5, r5, #3
   8a7c2:	194b      	adds	r3, r1, r5
   8a7c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8a7c8:	f023 030f 	bic.w	r3, r3, #15
   8a7cc:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8a7d0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8a7d4:	db07      	blt.n	8a7e6 <_malloc_trim_r+0x3e>
   8a7d6:	2100      	movs	r1, #0
   8a7d8:	4630      	mov	r0, r6
   8a7da:	f001 fc7d 	bl	8c0d8 <_sbrk_r>
   8a7de:	68bb      	ldr	r3, [r7, #8]
   8a7e0:	442b      	add	r3, r5
   8a7e2:	4298      	cmp	r0, r3
   8a7e4:	d004      	beq.n	8a7f0 <_malloc_trim_r+0x48>
   8a7e6:	4630      	mov	r0, r6
   8a7e8:	f000 fecc 	bl	8b584 <__malloc_unlock>
   8a7ec:	2000      	movs	r0, #0
   8a7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a7f0:	4630      	mov	r0, r6
   8a7f2:	4261      	negs	r1, r4
   8a7f4:	f001 fc70 	bl	8c0d8 <_sbrk_r>
   8a7f8:	3001      	adds	r0, #1
   8a7fa:	d00d      	beq.n	8a818 <_malloc_trim_r+0x70>
   8a7fc:	4a10      	ldr	r2, [pc, #64]	; (8a840 <_malloc_trim_r+0x98>)
   8a7fe:	68b9      	ldr	r1, [r7, #8]
   8a800:	6813      	ldr	r3, [r2, #0]
   8a802:	1b2d      	subs	r5, r5, r4
   8a804:	f045 0501 	orr.w	r5, r5, #1
   8a808:	4630      	mov	r0, r6
   8a80a:	1b1b      	subs	r3, r3, r4
   8a80c:	604d      	str	r5, [r1, #4]
   8a80e:	6013      	str	r3, [r2, #0]
   8a810:	f000 feb8 	bl	8b584 <__malloc_unlock>
   8a814:	2001      	movs	r0, #1
   8a816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a818:	2100      	movs	r1, #0
   8a81a:	4630      	mov	r0, r6
   8a81c:	f001 fc5c 	bl	8c0d8 <_sbrk_r>
   8a820:	68ba      	ldr	r2, [r7, #8]
   8a822:	1a83      	subs	r3, r0, r2
   8a824:	2b0f      	cmp	r3, #15
   8a826:	ddde      	ble.n	8a7e6 <_malloc_trim_r+0x3e>
   8a828:	4906      	ldr	r1, [pc, #24]	; (8a844 <_malloc_trim_r+0x9c>)
   8a82a:	f043 0301 	orr.w	r3, r3, #1
   8a82e:	680c      	ldr	r4, [r1, #0]
   8a830:	4903      	ldr	r1, [pc, #12]	; (8a840 <_malloc_trim_r+0x98>)
   8a832:	1b00      	subs	r0, r0, r4
   8a834:	6053      	str	r3, [r2, #4]
   8a836:	6008      	str	r0, [r1, #0]
   8a838:	e7d5      	b.n	8a7e6 <_malloc_trim_r+0x3e>
   8a83a:	bf00      	nop
   8a83c:	200009e0 	.word	0x200009e0
   8a840:	20001388 	.word	0x20001388
   8a844:	20000de8 	.word	0x20000de8

0008a848 <_free_r>:
   8a848:	2900      	cmp	r1, #0
   8a84a:	d05f      	beq.n	8a90c <_free_r+0xc4>
   8a84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a84e:	460c      	mov	r4, r1
   8a850:	4606      	mov	r6, r0
   8a852:	f000 fe91 	bl	8b578 <__malloc_lock>
   8a856:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a85a:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8aa50 <_free_r+0x208>
   8a85e:	f1a4 0008 	sub.w	r0, r4, #8
   8a862:	f023 0101 	bic.w	r1, r3, #1
   8a866:	1842      	adds	r2, r0, r1
   8a868:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8a86c:	6855      	ldr	r5, [r2, #4]
   8a86e:	4297      	cmp	r7, r2
   8a870:	f025 0503 	bic.w	r5, r5, #3
   8a874:	f000 8089 	beq.w	8a98a <_free_r+0x142>
   8a878:	07df      	lsls	r7, r3, #31
   8a87a:	6055      	str	r5, [r2, #4]
   8a87c:	d434      	bmi.n	8a8e8 <_free_r+0xa0>
   8a87e:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8a882:	f10c 0408 	add.w	r4, ip, #8
   8a886:	1bc0      	subs	r0, r0, r7
   8a888:	6883      	ldr	r3, [r0, #8]
   8a88a:	4439      	add	r1, r7
   8a88c:	42a3      	cmp	r3, r4
   8a88e:	d06a      	beq.n	8a966 <_free_r+0x11e>
   8a890:	1957      	adds	r7, r2, r5
   8a892:	687f      	ldr	r7, [r7, #4]
   8a894:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8a898:	f8c3 e00c 	str.w	lr, [r3, #12]
   8a89c:	f8ce 3008 	str.w	r3, [lr, #8]
   8a8a0:	07fb      	lsls	r3, r7, #31
   8a8a2:	f140 8097 	bpl.w	8a9d4 <_free_r+0x18c>
   8a8a6:	f041 0301 	orr.w	r3, r1, #1
   8a8aa:	6043      	str	r3, [r0, #4]
   8a8ac:	6011      	str	r1, [r2, #0]
   8a8ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a8b2:	d234      	bcs.n	8a91e <_free_r+0xd6>
   8a8b4:	2201      	movs	r2, #1
   8a8b6:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8a8ba:	08cb      	lsrs	r3, r1, #3
   8a8bc:	0949      	lsrs	r1, r1, #5
   8a8be:	4413      	add	r3, r2
   8a8c0:	fa02 f101 	lsl.w	r1, r2, r1
   8a8c4:	4321      	orrs	r1, r4
   8a8c6:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8a8ca:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8a8ce:	3a08      	subs	r2, #8
   8a8d0:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8a8d4:	f8cc 1004 	str.w	r1, [ip, #4]
   8a8d8:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8a8dc:	60e0      	str	r0, [r4, #12]
   8a8de:	4630      	mov	r0, r6
   8a8e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a8e4:	f000 be4e 	b.w	8b584 <__malloc_unlock>
   8a8e8:	1953      	adds	r3, r2, r5
   8a8ea:	685b      	ldr	r3, [r3, #4]
   8a8ec:	07df      	lsls	r7, r3, #31
   8a8ee:	d40e      	bmi.n	8a90e <_free_r+0xc6>
   8a8f0:	4429      	add	r1, r5
   8a8f2:	f10c 0408 	add.w	r4, ip, #8
   8a8f6:	6893      	ldr	r3, [r2, #8]
   8a8f8:	42a3      	cmp	r3, r4
   8a8fa:	d073      	beq.n	8a9e4 <_free_r+0x19c>
   8a8fc:	68d4      	ldr	r4, [r2, #12]
   8a8fe:	f041 0201 	orr.w	r2, r1, #1
   8a902:	60dc      	str	r4, [r3, #12]
   8a904:	60a3      	str	r3, [r4, #8]
   8a906:	6042      	str	r2, [r0, #4]
   8a908:	5041      	str	r1, [r0, r1]
   8a90a:	e7d0      	b.n	8a8ae <_free_r+0x66>
   8a90c:	4770      	bx	lr
   8a90e:	f041 0301 	orr.w	r3, r1, #1
   8a912:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a916:	f844 3c04 	str.w	r3, [r4, #-4]
   8a91a:	6011      	str	r1, [r2, #0]
   8a91c:	d3ca      	bcc.n	8a8b4 <_free_r+0x6c>
   8a91e:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8a922:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8a926:	d24a      	bcs.n	8a9be <_free_r+0x176>
   8a928:	098b      	lsrs	r3, r1, #6
   8a92a:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8a92e:	00ed      	lsls	r5, r5, #3
   8a930:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8a934:	f85c 3005 	ldr.w	r3, [ip, r5]
   8a938:	eb0c 0405 	add.w	r4, ip, r5
   8a93c:	3c08      	subs	r4, #8
   8a93e:	429c      	cmp	r4, r3
   8a940:	d059      	beq.n	8a9f6 <_free_r+0x1ae>
   8a942:	685a      	ldr	r2, [r3, #4]
   8a944:	f022 0203 	bic.w	r2, r2, #3
   8a948:	428a      	cmp	r2, r1
   8a94a:	d902      	bls.n	8a952 <_free_r+0x10a>
   8a94c:	689b      	ldr	r3, [r3, #8]
   8a94e:	429c      	cmp	r4, r3
   8a950:	d1f7      	bne.n	8a942 <_free_r+0xfa>
   8a952:	68dc      	ldr	r4, [r3, #12]
   8a954:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8a958:	60a0      	str	r0, [r4, #8]
   8a95a:	60d8      	str	r0, [r3, #12]
   8a95c:	4630      	mov	r0, r6
   8a95e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a962:	f000 be0f 	b.w	8b584 <__malloc_unlock>
   8a966:	1953      	adds	r3, r2, r5
   8a968:	685b      	ldr	r3, [r3, #4]
   8a96a:	07db      	lsls	r3, r3, #31
   8a96c:	d466      	bmi.n	8aa3c <_free_r+0x1f4>
   8a96e:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8a972:	4429      	add	r1, r5
   8a974:	f041 0401 	orr.w	r4, r1, #1
   8a978:	60d3      	str	r3, [r2, #12]
   8a97a:	609a      	str	r2, [r3, #8]
   8a97c:	6044      	str	r4, [r0, #4]
   8a97e:	5041      	str	r1, [r0, r1]
   8a980:	4630      	mov	r0, r6
   8a982:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a986:	f000 bdfd 	b.w	8b584 <__malloc_unlock>
   8a98a:	07db      	lsls	r3, r3, #31
   8a98c:	4429      	add	r1, r5
   8a98e:	d407      	bmi.n	8a9a0 <_free_r+0x158>
   8a990:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8a994:	1b00      	subs	r0, r0, r4
   8a996:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8a99a:	4421      	add	r1, r4
   8a99c:	60d3      	str	r3, [r2, #12]
   8a99e:	609a      	str	r2, [r3, #8]
   8a9a0:	4b29      	ldr	r3, [pc, #164]	; (8aa48 <_free_r+0x200>)
   8a9a2:	f041 0201 	orr.w	r2, r1, #1
   8a9a6:	681b      	ldr	r3, [r3, #0]
   8a9a8:	6042      	str	r2, [r0, #4]
   8a9aa:	428b      	cmp	r3, r1
   8a9ac:	f8cc 0008 	str.w	r0, [ip, #8]
   8a9b0:	d895      	bhi.n	8a8de <_free_r+0x96>
   8a9b2:	4b26      	ldr	r3, [pc, #152]	; (8aa4c <_free_r+0x204>)
   8a9b4:	4630      	mov	r0, r6
   8a9b6:	6819      	ldr	r1, [r3, #0]
   8a9b8:	f7ff fef6 	bl	8a7a8 <_malloc_trim_r>
   8a9bc:	e78f      	b.n	8a8de <_free_r+0x96>
   8a9be:	2b14      	cmp	r3, #20
   8a9c0:	d90a      	bls.n	8a9d8 <_free_r+0x190>
   8a9c2:	2b54      	cmp	r3, #84	; 0x54
   8a9c4:	d821      	bhi.n	8aa0a <_free_r+0x1c2>
   8a9c6:	0b0b      	lsrs	r3, r1, #12
   8a9c8:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8a9cc:	00ed      	lsls	r5, r5, #3
   8a9ce:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8a9d2:	e7af      	b.n	8a934 <_free_r+0xec>
   8a9d4:	4429      	add	r1, r5
   8a9d6:	e78e      	b.n	8a8f6 <_free_r+0xae>
   8a9d8:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8a9dc:	00ed      	lsls	r5, r5, #3
   8a9de:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8a9e2:	e7a7      	b.n	8a934 <_free_r+0xec>
   8a9e4:	f041 0301 	orr.w	r3, r1, #1
   8a9e8:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8a9ec:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8a9f0:	6043      	str	r3, [r0, #4]
   8a9f2:	5041      	str	r1, [r0, r1]
   8a9f4:	e773      	b.n	8a8de <_free_r+0x96>
   8a9f6:	2501      	movs	r5, #1
   8a9f8:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8a9fc:	1092      	asrs	r2, r2, #2
   8a9fe:	fa05 f202 	lsl.w	r2, r5, r2
   8aa02:	430a      	orrs	r2, r1
   8aa04:	f8cc 2004 	str.w	r2, [ip, #4]
   8aa08:	e7a4      	b.n	8a954 <_free_r+0x10c>
   8aa0a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8aa0e:	d806      	bhi.n	8aa1e <_free_r+0x1d6>
   8aa10:	0bcb      	lsrs	r3, r1, #15
   8aa12:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8aa16:	00ed      	lsls	r5, r5, #3
   8aa18:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8aa1c:	e78a      	b.n	8a934 <_free_r+0xec>
   8aa1e:	f240 5254 	movw	r2, #1364	; 0x554
   8aa22:	4293      	cmp	r3, r2
   8aa24:	d806      	bhi.n	8aa34 <_free_r+0x1ec>
   8aa26:	0c8b      	lsrs	r3, r1, #18
   8aa28:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8aa2c:	00ed      	lsls	r5, r5, #3
   8aa2e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8aa32:	e77f      	b.n	8a934 <_free_r+0xec>
   8aa34:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8aa38:	227e      	movs	r2, #126	; 0x7e
   8aa3a:	e77b      	b.n	8a934 <_free_r+0xec>
   8aa3c:	f041 0301 	orr.w	r3, r1, #1
   8aa40:	6043      	str	r3, [r0, #4]
   8aa42:	6011      	str	r1, [r2, #0]
   8aa44:	e74b      	b.n	8a8de <_free_r+0x96>
   8aa46:	bf00      	nop
   8aa48:	20000dec 	.word	0x20000dec
   8aa4c:	200013b8 	.word	0x200013b8
   8aa50:	200009e0 	.word	0x200009e0

0008aa54 <__sfvwrite_r>:
   8aa54:	6893      	ldr	r3, [r2, #8]
   8aa56:	2b00      	cmp	r3, #0
   8aa58:	f000 80bd 	beq.w	8abd6 <__sfvwrite_r+0x182>
   8aa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8aa60:	4690      	mov	r8, r2
   8aa62:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8aa66:	460c      	mov	r4, r1
   8aa68:	0711      	lsls	r1, r2, #28
   8aa6a:	4681      	mov	r9, r0
   8aa6c:	b083      	sub	sp, #12
   8aa6e:	b293      	uxth	r3, r2
   8aa70:	d527      	bpl.n	8aac2 <__sfvwrite_r+0x6e>
   8aa72:	6922      	ldr	r2, [r4, #16]
   8aa74:	b32a      	cbz	r2, 8aac2 <__sfvwrite_r+0x6e>
   8aa76:	f013 0702 	ands.w	r7, r3, #2
   8aa7a:	f8d8 5000 	ldr.w	r5, [r8]
   8aa7e:	d02f      	beq.n	8aae0 <__sfvwrite_r+0x8c>
   8aa80:	f04f 0b00 	mov.w	fp, #0
   8aa84:	465f      	mov	r7, fp
   8aa86:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8ad3c <__sfvwrite_r+0x2e8>
   8aa8a:	2f00      	cmp	r7, #0
   8aa8c:	f000 8089 	beq.w	8aba2 <__sfvwrite_r+0x14e>
   8aa90:	4557      	cmp	r7, sl
   8aa92:	463b      	mov	r3, r7
   8aa94:	465a      	mov	r2, fp
   8aa96:	bf28      	it	cs
   8aa98:	4653      	movcs	r3, sl
   8aa9a:	4648      	mov	r0, r9
   8aa9c:	69e1      	ldr	r1, [r4, #28]
   8aa9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8aaa0:	47b0      	blx	r6
   8aaa2:	2800      	cmp	r0, #0
   8aaa4:	f340 808d 	ble.w	8abc2 <__sfvwrite_r+0x16e>
   8aaa8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8aaac:	4483      	add	fp, r0
   8aaae:	1a1b      	subs	r3, r3, r0
   8aab0:	1a3f      	subs	r7, r7, r0
   8aab2:	f8c8 3008 	str.w	r3, [r8, #8]
   8aab6:	2b00      	cmp	r3, #0
   8aab8:	d1e7      	bne.n	8aa8a <__sfvwrite_r+0x36>
   8aaba:	2000      	movs	r0, #0
   8aabc:	b003      	add	sp, #12
   8aabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aac2:	4621      	mov	r1, r4
   8aac4:	4648      	mov	r0, r9
   8aac6:	f7fe fc3b 	bl	89340 <__swsetup_r>
   8aaca:	2800      	cmp	r0, #0
   8aacc:	f040 8132 	bne.w	8ad34 <__sfvwrite_r+0x2e0>
   8aad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8aad4:	f8d8 5000 	ldr.w	r5, [r8]
   8aad8:	b293      	uxth	r3, r2
   8aada:	f013 0702 	ands.w	r7, r3, #2
   8aade:	d1cf      	bne.n	8aa80 <__sfvwrite_r+0x2c>
   8aae0:	f013 0a01 	ands.w	sl, r3, #1
   8aae4:	d179      	bne.n	8abda <__sfvwrite_r+0x186>
   8aae6:	4656      	mov	r6, sl
   8aae8:	2e00      	cmp	r6, #0
   8aaea:	d056      	beq.n	8ab9a <__sfvwrite_r+0x146>
   8aaec:	059a      	lsls	r2, r3, #22
   8aaee:	68a7      	ldr	r7, [r4, #8]
   8aaf0:	f140 80bd 	bpl.w	8ac6e <__sfvwrite_r+0x21a>
   8aaf4:	42b7      	cmp	r7, r6
   8aaf6:	46bb      	mov	fp, r7
   8aaf8:	f200 80d2 	bhi.w	8aca0 <__sfvwrite_r+0x24c>
   8aafc:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8ab00:	f000 80d0 	beq.w	8aca4 <__sfvwrite_r+0x250>
   8ab04:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8ab08:	6822      	ldr	r2, [r4, #0]
   8ab0a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8ab0e:	eba2 0b01 	sub.w	fp, r2, r1
   8ab12:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8ab16:	f10b 0001 	add.w	r0, fp, #1
   8ab1a:	107f      	asrs	r7, r7, #1
   8ab1c:	4430      	add	r0, r6
   8ab1e:	42b8      	cmp	r0, r7
   8ab20:	463a      	mov	r2, r7
   8ab22:	bf84      	itt	hi
   8ab24:	4607      	movhi	r7, r0
   8ab26:	463a      	movhi	r2, r7
   8ab28:	055b      	lsls	r3, r3, #21
   8ab2a:	f140 80e7 	bpl.w	8acfc <__sfvwrite_r+0x2a8>
   8ab2e:	4611      	mov	r1, r2
   8ab30:	4648      	mov	r0, r9
   8ab32:	f000 f9b3 	bl	8ae9c <_malloc_r>
   8ab36:	2800      	cmp	r0, #0
   8ab38:	f000 80f6 	beq.w	8ad28 <__sfvwrite_r+0x2d4>
   8ab3c:	465a      	mov	r2, fp
   8ab3e:	6921      	ldr	r1, [r4, #16]
   8ab40:	9000      	str	r0, [sp, #0]
   8ab42:	f7fb fe57 	bl	867f4 <memcpy>
   8ab46:	89a2      	ldrh	r2, [r4, #12]
   8ab48:	9b00      	ldr	r3, [sp, #0]
   8ab4a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8ab4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8ab52:	81a2      	strh	r2, [r4, #12]
   8ab54:	eba7 020b 	sub.w	r2, r7, fp
   8ab58:	eb03 000b 	add.w	r0, r3, fp
   8ab5c:	6167      	str	r7, [r4, #20]
   8ab5e:	46b3      	mov	fp, r6
   8ab60:	4637      	mov	r7, r6
   8ab62:	6123      	str	r3, [r4, #16]
   8ab64:	6020      	str	r0, [r4, #0]
   8ab66:	60a2      	str	r2, [r4, #8]
   8ab68:	465a      	mov	r2, fp
   8ab6a:	4651      	mov	r1, sl
   8ab6c:	f000 fc9a 	bl	8b4a4 <memmove>
   8ab70:	68a2      	ldr	r2, [r4, #8]
   8ab72:	6823      	ldr	r3, [r4, #0]
   8ab74:	1bd2      	subs	r2, r2, r7
   8ab76:	4637      	mov	r7, r6
   8ab78:	2600      	movs	r6, #0
   8ab7a:	445b      	add	r3, fp
   8ab7c:	60a2      	str	r2, [r4, #8]
   8ab7e:	6023      	str	r3, [r4, #0]
   8ab80:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8ab84:	44ba      	add	sl, r7
   8ab86:	1bd7      	subs	r7, r2, r7
   8ab88:	f8c8 7008 	str.w	r7, [r8, #8]
   8ab8c:	2f00      	cmp	r7, #0
   8ab8e:	d094      	beq.n	8aaba <__sfvwrite_r+0x66>
   8ab90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ab94:	b29b      	uxth	r3, r3
   8ab96:	2e00      	cmp	r6, #0
   8ab98:	d1a8      	bne.n	8aaec <__sfvwrite_r+0x98>
   8ab9a:	e9d5 a600 	ldrd	sl, r6, [r5]
   8ab9e:	3508      	adds	r5, #8
   8aba0:	e7a2      	b.n	8aae8 <__sfvwrite_r+0x94>
   8aba2:	e9d5 b700 	ldrd	fp, r7, [r5]
   8aba6:	3508      	adds	r5, #8
   8aba8:	e76f      	b.n	8aa8a <__sfvwrite_r+0x36>
   8abaa:	4629      	mov	r1, r5
   8abac:	465a      	mov	r2, fp
   8abae:	f000 fc79 	bl	8b4a4 <memmove>
   8abb2:	6823      	ldr	r3, [r4, #0]
   8abb4:	4621      	mov	r1, r4
   8abb6:	445b      	add	r3, fp
   8abb8:	4648      	mov	r0, r9
   8abba:	6023      	str	r3, [r4, #0]
   8abbc:	f7ff fcc4 	bl	8a548 <_fflush_r>
   8abc0:	b358      	cbz	r0, 8ac1a <__sfvwrite_r+0x1c6>
   8abc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8abc6:	f04f 30ff 	mov.w	r0, #4294967295
   8abca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8abce:	81a3      	strh	r3, [r4, #12]
   8abd0:	b003      	add	sp, #12
   8abd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8abd6:	2000      	movs	r0, #0
   8abd8:	4770      	bx	lr
   8abda:	463e      	mov	r6, r7
   8abdc:	46aa      	mov	sl, r5
   8abde:	4638      	mov	r0, r7
   8abe0:	463d      	mov	r5, r7
   8abe2:	9700      	str	r7, [sp, #0]
   8abe4:	b36e      	cbz	r6, 8ac42 <__sfvwrite_r+0x1ee>
   8abe6:	2800      	cmp	r0, #0
   8abe8:	d035      	beq.n	8ac56 <__sfvwrite_r+0x202>
   8abea:	9a00      	ldr	r2, [sp, #0]
   8abec:	6820      	ldr	r0, [r4, #0]
   8abee:	6921      	ldr	r1, [r4, #16]
   8abf0:	42b2      	cmp	r2, r6
   8abf2:	bf28      	it	cs
   8abf4:	4632      	movcs	r2, r6
   8abf6:	4288      	cmp	r0, r1
   8abf8:	6963      	ldr	r3, [r4, #20]
   8abfa:	d904      	bls.n	8ac06 <__sfvwrite_r+0x1b2>
   8abfc:	68a1      	ldr	r1, [r4, #8]
   8abfe:	eb03 0b01 	add.w	fp, r3, r1
   8ac02:	455a      	cmp	r2, fp
   8ac04:	dcd1      	bgt.n	8abaa <__sfvwrite_r+0x156>
   8ac06:	4293      	cmp	r3, r2
   8ac08:	dc6b      	bgt.n	8ace2 <__sfvwrite_r+0x28e>
   8ac0a:	462a      	mov	r2, r5
   8ac0c:	4648      	mov	r0, r9
   8ac0e:	69e1      	ldr	r1, [r4, #28]
   8ac10:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8ac12:	47b8      	blx	r7
   8ac14:	f1b0 0b00 	subs.w	fp, r0, #0
   8ac18:	ddd3      	ble.n	8abc2 <__sfvwrite_r+0x16e>
   8ac1a:	9b00      	ldr	r3, [sp, #0]
   8ac1c:	ebb3 030b 	subs.w	r3, r3, fp
   8ac20:	9300      	str	r3, [sp, #0]
   8ac22:	d057      	beq.n	8acd4 <__sfvwrite_r+0x280>
   8ac24:	2001      	movs	r0, #1
   8ac26:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8ac2a:	445d      	add	r5, fp
   8ac2c:	eba3 030b 	sub.w	r3, r3, fp
   8ac30:	eba6 060b 	sub.w	r6, r6, fp
   8ac34:	f8c8 3008 	str.w	r3, [r8, #8]
   8ac38:	2b00      	cmp	r3, #0
   8ac3a:	f43f af3e 	beq.w	8aaba <__sfvwrite_r+0x66>
   8ac3e:	2e00      	cmp	r6, #0
   8ac40:	d1d1      	bne.n	8abe6 <__sfvwrite_r+0x192>
   8ac42:	f10a 0308 	add.w	r3, sl, #8
   8ac46:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8ac4a:	469a      	mov	sl, r3
   8ac4c:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8ac50:	3308      	adds	r3, #8
   8ac52:	2e00      	cmp	r6, #0
   8ac54:	d0f7      	beq.n	8ac46 <__sfvwrite_r+0x1f2>
   8ac56:	4632      	mov	r2, r6
   8ac58:	210a      	movs	r1, #10
   8ac5a:	4628      	mov	r0, r5
   8ac5c:	f000 fbe2 	bl	8b424 <memchr>
   8ac60:	2800      	cmp	r0, #0
   8ac62:	d05e      	beq.n	8ad22 <__sfvwrite_r+0x2ce>
   8ac64:	3001      	adds	r0, #1
   8ac66:	1b43      	subs	r3, r0, r5
   8ac68:	461a      	mov	r2, r3
   8ac6a:	9300      	str	r3, [sp, #0]
   8ac6c:	e7be      	b.n	8abec <__sfvwrite_r+0x198>
   8ac6e:	6820      	ldr	r0, [r4, #0]
   8ac70:	6923      	ldr	r3, [r4, #16]
   8ac72:	4298      	cmp	r0, r3
   8ac74:	d818      	bhi.n	8aca8 <__sfvwrite_r+0x254>
   8ac76:	6962      	ldr	r2, [r4, #20]
   8ac78:	42b2      	cmp	r2, r6
   8ac7a:	d815      	bhi.n	8aca8 <__sfvwrite_r+0x254>
   8ac7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8ac80:	42b3      	cmp	r3, r6
   8ac82:	bf28      	it	cs
   8ac84:	4633      	movcs	r3, r6
   8ac86:	fb93 f3f2 	sdiv	r3, r3, r2
   8ac8a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8ac8c:	fb02 f303 	mul.w	r3, r2, r3
   8ac90:	4648      	mov	r0, r9
   8ac92:	4652      	mov	r2, sl
   8ac94:	69e1      	ldr	r1, [r4, #28]
   8ac96:	47b8      	blx	r7
   8ac98:	1e07      	subs	r7, r0, #0
   8ac9a:	dd92      	ble.n	8abc2 <__sfvwrite_r+0x16e>
   8ac9c:	1bf6      	subs	r6, r6, r7
   8ac9e:	e76f      	b.n	8ab80 <__sfvwrite_r+0x12c>
   8aca0:	4637      	mov	r7, r6
   8aca2:	46b3      	mov	fp, r6
   8aca4:	6820      	ldr	r0, [r4, #0]
   8aca6:	e75f      	b.n	8ab68 <__sfvwrite_r+0x114>
   8aca8:	42b7      	cmp	r7, r6
   8acaa:	bf28      	it	cs
   8acac:	4637      	movcs	r7, r6
   8acae:	4651      	mov	r1, sl
   8acb0:	463a      	mov	r2, r7
   8acb2:	f000 fbf7 	bl	8b4a4 <memmove>
   8acb6:	68a3      	ldr	r3, [r4, #8]
   8acb8:	6822      	ldr	r2, [r4, #0]
   8acba:	1bdb      	subs	r3, r3, r7
   8acbc:	443a      	add	r2, r7
   8acbe:	60a3      	str	r3, [r4, #8]
   8acc0:	6022      	str	r2, [r4, #0]
   8acc2:	2b00      	cmp	r3, #0
   8acc4:	d1ea      	bne.n	8ac9c <__sfvwrite_r+0x248>
   8acc6:	4621      	mov	r1, r4
   8acc8:	4648      	mov	r0, r9
   8acca:	f7ff fc3d 	bl	8a548 <_fflush_r>
   8acce:	2800      	cmp	r0, #0
   8acd0:	d0e4      	beq.n	8ac9c <__sfvwrite_r+0x248>
   8acd2:	e776      	b.n	8abc2 <__sfvwrite_r+0x16e>
   8acd4:	4621      	mov	r1, r4
   8acd6:	4648      	mov	r0, r9
   8acd8:	f7ff fc36 	bl	8a548 <_fflush_r>
   8acdc:	2800      	cmp	r0, #0
   8acde:	d0a2      	beq.n	8ac26 <__sfvwrite_r+0x1d2>
   8ace0:	e76f      	b.n	8abc2 <__sfvwrite_r+0x16e>
   8ace2:	4629      	mov	r1, r5
   8ace4:	4693      	mov	fp, r2
   8ace6:	9201      	str	r2, [sp, #4]
   8ace8:	f000 fbdc 	bl	8b4a4 <memmove>
   8acec:	68a1      	ldr	r1, [r4, #8]
   8acee:	6823      	ldr	r3, [r4, #0]
   8acf0:	9a01      	ldr	r2, [sp, #4]
   8acf2:	1a89      	subs	r1, r1, r2
   8acf4:	441a      	add	r2, r3
   8acf6:	60a1      	str	r1, [r4, #8]
   8acf8:	6022      	str	r2, [r4, #0]
   8acfa:	e78e      	b.n	8ac1a <__sfvwrite_r+0x1c6>
   8acfc:	4648      	mov	r0, r9
   8acfe:	f000 ffc3 	bl	8bc88 <_realloc_r>
   8ad02:	4603      	mov	r3, r0
   8ad04:	2800      	cmp	r0, #0
   8ad06:	f47f af25 	bne.w	8ab54 <__sfvwrite_r+0x100>
   8ad0a:	4648      	mov	r0, r9
   8ad0c:	6921      	ldr	r1, [r4, #16]
   8ad0e:	f7ff fd9b 	bl	8a848 <_free_r>
   8ad12:	220c      	movs	r2, #12
   8ad14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ad18:	f8c9 2000 	str.w	r2, [r9]
   8ad1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8ad20:	e751      	b.n	8abc6 <__sfvwrite_r+0x172>
   8ad22:	1c72      	adds	r2, r6, #1
   8ad24:	9200      	str	r2, [sp, #0]
   8ad26:	e761      	b.n	8abec <__sfvwrite_r+0x198>
   8ad28:	220c      	movs	r2, #12
   8ad2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ad2e:	f8c9 2000 	str.w	r2, [r9]
   8ad32:	e748      	b.n	8abc6 <__sfvwrite_r+0x172>
   8ad34:	f04f 30ff 	mov.w	r0, #4294967295
   8ad38:	e6c0      	b.n	8aabc <__sfvwrite_r+0x68>
   8ad3a:	bf00      	nop
   8ad3c:	7ffffc00 	.word	0x7ffffc00

0008ad40 <_fwalk_reent>:
   8ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8ad44:	4607      	mov	r7, r0
   8ad46:	4688      	mov	r8, r1
   8ad48:	f04f 0900 	mov.w	r9, #0
   8ad4c:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8ad50:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8ad54:	3d01      	subs	r5, #1
   8ad56:	d410      	bmi.n	8ad7a <_fwalk_reent+0x3a>
   8ad58:	89a3      	ldrh	r3, [r4, #12]
   8ad5a:	3d01      	subs	r5, #1
   8ad5c:	2b01      	cmp	r3, #1
   8ad5e:	d908      	bls.n	8ad72 <_fwalk_reent+0x32>
   8ad60:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8ad64:	3301      	adds	r3, #1
   8ad66:	d004      	beq.n	8ad72 <_fwalk_reent+0x32>
   8ad68:	4621      	mov	r1, r4
   8ad6a:	4638      	mov	r0, r7
   8ad6c:	47c0      	blx	r8
   8ad6e:	ea49 0900 	orr.w	r9, r9, r0
   8ad72:	1c6b      	adds	r3, r5, #1
   8ad74:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8ad78:	d1ee      	bne.n	8ad58 <_fwalk_reent+0x18>
   8ad7a:	6836      	ldr	r6, [r6, #0]
   8ad7c:	2e00      	cmp	r6, #0
   8ad7e:	d1e7      	bne.n	8ad50 <_fwalk_reent+0x10>
   8ad80:	4648      	mov	r0, r9
   8ad82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8ad86:	bf00      	nop

0008ad88 <__locale_mb_cur_max>:
   8ad88:	4b01      	ldr	r3, [pc, #4]	; (8ad90 <__locale_mb_cur_max+0x8>)
   8ad8a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8ad8e:	4770      	bx	lr
   8ad90:	20000874 	.word	0x20000874

0008ad94 <_localeconv_r>:
   8ad94:	4800      	ldr	r0, [pc, #0]	; (8ad98 <_localeconv_r+0x4>)
   8ad96:	4770      	bx	lr
   8ad98:	20000964 	.word	0x20000964

0008ad9c <__retarget_lock_init_recursive>:
   8ad9c:	4770      	bx	lr
   8ad9e:	bf00      	nop

0008ada0 <__retarget_lock_close_recursive>:
   8ada0:	4770      	bx	lr
   8ada2:	bf00      	nop

0008ada4 <__retarget_lock_acquire_recursive>:
   8ada4:	4770      	bx	lr
   8ada6:	bf00      	nop

0008ada8 <__retarget_lock_release_recursive>:
   8ada8:	4770      	bx	lr
   8adaa:	bf00      	nop

0008adac <__swhatbuf_r>:
   8adac:	b570      	push	{r4, r5, r6, lr}
   8adae:	460c      	mov	r4, r1
   8adb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8adb4:	4615      	mov	r5, r2
   8adb6:	2900      	cmp	r1, #0
   8adb8:	461e      	mov	r6, r3
   8adba:	b096      	sub	sp, #88	; 0x58
   8adbc:	db14      	blt.n	8ade8 <__swhatbuf_r+0x3c>
   8adbe:	466a      	mov	r2, sp
   8adc0:	f001 fc7a 	bl	8c6b8 <_fstat_r>
   8adc4:	2800      	cmp	r0, #0
   8adc6:	db0f      	blt.n	8ade8 <__swhatbuf_r+0x3c>
   8adc8:	9a01      	ldr	r2, [sp, #4]
   8adca:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8adce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8add2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8add6:	fab2 f282 	clz	r2, r2
   8adda:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8adde:	0952      	lsrs	r2, r2, #5
   8ade0:	6032      	str	r2, [r6, #0]
   8ade2:	602b      	str	r3, [r5, #0]
   8ade4:	b016      	add	sp, #88	; 0x58
   8ade6:	bd70      	pop	{r4, r5, r6, pc}
   8ade8:	2300      	movs	r3, #0
   8adea:	89a1      	ldrh	r1, [r4, #12]
   8adec:	6033      	str	r3, [r6, #0]
   8adee:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8adf2:	d004      	beq.n	8adfe <__swhatbuf_r+0x52>
   8adf4:	2240      	movs	r2, #64	; 0x40
   8adf6:	4618      	mov	r0, r3
   8adf8:	602a      	str	r2, [r5, #0]
   8adfa:	b016      	add	sp, #88	; 0x58
   8adfc:	bd70      	pop	{r4, r5, r6, pc}
   8adfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8ae02:	602b      	str	r3, [r5, #0]
   8ae04:	b016      	add	sp, #88	; 0x58
   8ae06:	bd70      	pop	{r4, r5, r6, pc}

0008ae08 <__smakebuf_r>:
   8ae08:	b570      	push	{r4, r5, r6, lr}
   8ae0a:	898b      	ldrh	r3, [r1, #12]
   8ae0c:	460c      	mov	r4, r1
   8ae0e:	079d      	lsls	r5, r3, #30
   8ae10:	b082      	sub	sp, #8
   8ae12:	d507      	bpl.n	8ae24 <__smakebuf_r+0x1c>
   8ae14:	2201      	movs	r2, #1
   8ae16:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8ae1a:	614a      	str	r2, [r1, #20]
   8ae1c:	600b      	str	r3, [r1, #0]
   8ae1e:	610b      	str	r3, [r1, #16]
   8ae20:	b002      	add	sp, #8
   8ae22:	bd70      	pop	{r4, r5, r6, pc}
   8ae24:	ab01      	add	r3, sp, #4
   8ae26:	466a      	mov	r2, sp
   8ae28:	4606      	mov	r6, r0
   8ae2a:	f7ff ffbf 	bl	8adac <__swhatbuf_r>
   8ae2e:	9900      	ldr	r1, [sp, #0]
   8ae30:	4605      	mov	r5, r0
   8ae32:	4630      	mov	r0, r6
   8ae34:	f000 f832 	bl	8ae9c <_malloc_r>
   8ae38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ae3c:	b170      	cbz	r0, 8ae5c <__smakebuf_r+0x54>
   8ae3e:	4916      	ldr	r1, [pc, #88]	; (8ae98 <__smakebuf_r+0x90>)
   8ae40:	9a00      	ldr	r2, [sp, #0]
   8ae42:	63f1      	str	r1, [r6, #60]	; 0x3c
   8ae44:	9901      	ldr	r1, [sp, #4]
   8ae46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8ae4a:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8ae4e:	81a3      	strh	r3, [r4, #12]
   8ae50:	6020      	str	r0, [r4, #0]
   8ae52:	b989      	cbnz	r1, 8ae78 <__smakebuf_r+0x70>
   8ae54:	432b      	orrs	r3, r5
   8ae56:	81a3      	strh	r3, [r4, #12]
   8ae58:	b002      	add	sp, #8
   8ae5a:	bd70      	pop	{r4, r5, r6, pc}
   8ae5c:	059a      	lsls	r2, r3, #22
   8ae5e:	d4df      	bmi.n	8ae20 <__smakebuf_r+0x18>
   8ae60:	2101      	movs	r1, #1
   8ae62:	f023 0303 	bic.w	r3, r3, #3
   8ae66:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8ae6a:	f043 0302 	orr.w	r3, r3, #2
   8ae6e:	81a3      	strh	r3, [r4, #12]
   8ae70:	6161      	str	r1, [r4, #20]
   8ae72:	6022      	str	r2, [r4, #0]
   8ae74:	6122      	str	r2, [r4, #16]
   8ae76:	e7d3      	b.n	8ae20 <__smakebuf_r+0x18>
   8ae78:	4630      	mov	r0, r6
   8ae7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8ae7e:	f001 fc31 	bl	8c6e4 <_isatty_r>
   8ae82:	b910      	cbnz	r0, 8ae8a <__smakebuf_r+0x82>
   8ae84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ae88:	e7e4      	b.n	8ae54 <__smakebuf_r+0x4c>
   8ae8a:	89a2      	ldrh	r2, [r4, #12]
   8ae8c:	f022 0203 	bic.w	r2, r2, #3
   8ae90:	f042 0201 	orr.w	r2, r2, #1
   8ae94:	b213      	sxth	r3, r2
   8ae96:	e7dd      	b.n	8ae54 <__smakebuf_r+0x4c>
   8ae98:	0008a5f5 	.word	0x0008a5f5

0008ae9c <_malloc_r>:
   8ae9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8aea0:	f101 050b 	add.w	r5, r1, #11
   8aea4:	2d16      	cmp	r5, #22
   8aea6:	4606      	mov	r6, r0
   8aea8:	b083      	sub	sp, #12
   8aeaa:	d824      	bhi.n	8aef6 <_malloc_r+0x5a>
   8aeac:	2910      	cmp	r1, #16
   8aeae:	f200 80b6 	bhi.w	8b01e <_malloc_r+0x182>
   8aeb2:	f000 fb61 	bl	8b578 <__malloc_lock>
   8aeb6:	2510      	movs	r5, #16
   8aeb8:	2002      	movs	r0, #2
   8aeba:	2318      	movs	r3, #24
   8aebc:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8b3a8 <_malloc_r+0x50c>
   8aec0:	4443      	add	r3, r8
   8aec2:	685c      	ldr	r4, [r3, #4]
   8aec4:	f1a3 0208 	sub.w	r2, r3, #8
   8aec8:	4294      	cmp	r4, r2
   8aeca:	f000 80b4 	beq.w	8b036 <_malloc_r+0x19a>
   8aece:	6863      	ldr	r3, [r4, #4]
   8aed0:	68e1      	ldr	r1, [r4, #12]
   8aed2:	f023 0303 	bic.w	r3, r3, #3
   8aed6:	4423      	add	r3, r4
   8aed8:	685a      	ldr	r2, [r3, #4]
   8aeda:	68a5      	ldr	r5, [r4, #8]
   8aedc:	f042 0201 	orr.w	r2, r2, #1
   8aee0:	60e9      	str	r1, [r5, #12]
   8aee2:	4630      	mov	r0, r6
   8aee4:	608d      	str	r5, [r1, #8]
   8aee6:	3408      	adds	r4, #8
   8aee8:	605a      	str	r2, [r3, #4]
   8aeea:	f000 fb4b 	bl	8b584 <__malloc_unlock>
   8aeee:	4620      	mov	r0, r4
   8aef0:	b003      	add	sp, #12
   8aef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aef6:	f035 0507 	bics.w	r5, r5, #7
   8aefa:	f100 8090 	bmi.w	8b01e <_malloc_r+0x182>
   8aefe:	42a9      	cmp	r1, r5
   8af00:	f200 808d 	bhi.w	8b01e <_malloc_r+0x182>
   8af04:	f000 fb38 	bl	8b578 <__malloc_lock>
   8af08:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8af0c:	f0c0 8185 	bcc.w	8b21a <_malloc_r+0x37e>
   8af10:	0a6b      	lsrs	r3, r5, #9
   8af12:	f000 808b 	beq.w	8b02c <_malloc_r+0x190>
   8af16:	2b04      	cmp	r3, #4
   8af18:	f200 815b 	bhi.w	8b1d2 <_malloc_r+0x336>
   8af1c:	09ab      	lsrs	r3, r5, #6
   8af1e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8af22:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8af26:	00c1      	lsls	r1, r0, #3
   8af28:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8b3a8 <_malloc_r+0x50c>
   8af2c:	4441      	add	r1, r8
   8af2e:	684c      	ldr	r4, [r1, #4]
   8af30:	3908      	subs	r1, #8
   8af32:	42a1      	cmp	r1, r4
   8af34:	d106      	bne.n	8af44 <_malloc_r+0xa8>
   8af36:	e00c      	b.n	8af52 <_malloc_r+0xb6>
   8af38:	2a00      	cmp	r2, #0
   8af3a:	f280 8122 	bge.w	8b182 <_malloc_r+0x2e6>
   8af3e:	68e4      	ldr	r4, [r4, #12]
   8af40:	42a1      	cmp	r1, r4
   8af42:	d006      	beq.n	8af52 <_malloc_r+0xb6>
   8af44:	6863      	ldr	r3, [r4, #4]
   8af46:	f023 0303 	bic.w	r3, r3, #3
   8af4a:	1b5a      	subs	r2, r3, r5
   8af4c:	2a0f      	cmp	r2, #15
   8af4e:	ddf3      	ble.n	8af38 <_malloc_r+0x9c>
   8af50:	4638      	mov	r0, r7
   8af52:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8af56:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8b3ac <_malloc_r+0x510>
   8af5a:	4564      	cmp	r4, ip
   8af5c:	d077      	beq.n	8b04e <_malloc_r+0x1b2>
   8af5e:	6862      	ldr	r2, [r4, #4]
   8af60:	f022 0203 	bic.w	r2, r2, #3
   8af64:	1b53      	subs	r3, r2, r5
   8af66:	2b0f      	cmp	r3, #15
   8af68:	f300 8165 	bgt.w	8b236 <_malloc_r+0x39a>
   8af6c:	2b00      	cmp	r3, #0
   8af6e:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8af72:	f280 8156 	bge.w	8b222 <_malloc_r+0x386>
   8af76:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8af7a:	f080 8106 	bcs.w	8b18a <_malloc_r+0x2ee>
   8af7e:	2101      	movs	r1, #1
   8af80:	08d3      	lsrs	r3, r2, #3
   8af82:	0952      	lsrs	r2, r2, #5
   8af84:	440b      	add	r3, r1
   8af86:	fa01 f202 	lsl.w	r2, r1, r2
   8af8a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8af8e:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8af92:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8af96:	430a      	orrs	r2, r1
   8af98:	f1ae 0108 	sub.w	r1, lr, #8
   8af9c:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8afa0:	f8c8 2004 	str.w	r2, [r8, #4]
   8afa4:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8afa8:	60fc      	str	r4, [r7, #12]
   8afaa:	2101      	movs	r1, #1
   8afac:	1083      	asrs	r3, r0, #2
   8afae:	4099      	lsls	r1, r3
   8afb0:	4291      	cmp	r1, r2
   8afb2:	d853      	bhi.n	8b05c <_malloc_r+0x1c0>
   8afb4:	4211      	tst	r1, r2
   8afb6:	d106      	bne.n	8afc6 <_malloc_r+0x12a>
   8afb8:	f020 0003 	bic.w	r0, r0, #3
   8afbc:	0049      	lsls	r1, r1, #1
   8afbe:	4211      	tst	r1, r2
   8afc0:	f100 0004 	add.w	r0, r0, #4
   8afc4:	d0fa      	beq.n	8afbc <_malloc_r+0x120>
   8afc6:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8afca:	464c      	mov	r4, r9
   8afcc:	4686      	mov	lr, r0
   8afce:	68e7      	ldr	r7, [r4, #12]
   8afd0:	42bc      	cmp	r4, r7
   8afd2:	d107      	bne.n	8afe4 <_malloc_r+0x148>
   8afd4:	e109      	b.n	8b1ea <_malloc_r+0x34e>
   8afd6:	2b00      	cmp	r3, #0
   8afd8:	f280 8110 	bge.w	8b1fc <_malloc_r+0x360>
   8afdc:	68ff      	ldr	r7, [r7, #12]
   8afde:	42bc      	cmp	r4, r7
   8afe0:	f000 8103 	beq.w	8b1ea <_malloc_r+0x34e>
   8afe4:	687a      	ldr	r2, [r7, #4]
   8afe6:	f022 0203 	bic.w	r2, r2, #3
   8afea:	1b53      	subs	r3, r2, r5
   8afec:	2b0f      	cmp	r3, #15
   8afee:	ddf2      	ble.n	8afd6 <_malloc_r+0x13a>
   8aff0:	f045 0e01 	orr.w	lr, r5, #1
   8aff4:	4630      	mov	r0, r6
   8aff6:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8affa:	443d      	add	r5, r7
   8affc:	f043 0601 	orr.w	r6, r3, #1
   8b000:	f8c7 e004 	str.w	lr, [r7, #4]
   8b004:	60e1      	str	r1, [r4, #12]
   8b006:	608c      	str	r4, [r1, #8]
   8b008:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8b00c:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8b010:	606e      	str	r6, [r5, #4]
   8b012:	50bb      	str	r3, [r7, r2]
   8b014:	f000 fab6 	bl	8b584 <__malloc_unlock>
   8b018:	f107 0408 	add.w	r4, r7, #8
   8b01c:	e002      	b.n	8b024 <_malloc_r+0x188>
   8b01e:	230c      	movs	r3, #12
   8b020:	2400      	movs	r4, #0
   8b022:	6033      	str	r3, [r6, #0]
   8b024:	4620      	mov	r0, r4
   8b026:	b003      	add	sp, #12
   8b028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b02c:	f44f 7100 	mov.w	r1, #512	; 0x200
   8b030:	2040      	movs	r0, #64	; 0x40
   8b032:	273f      	movs	r7, #63	; 0x3f
   8b034:	e778      	b.n	8af28 <_malloc_r+0x8c>
   8b036:	68dc      	ldr	r4, [r3, #12]
   8b038:	42a3      	cmp	r3, r4
   8b03a:	bf08      	it	eq
   8b03c:	3002      	addeq	r0, #2
   8b03e:	f47f af46 	bne.w	8aece <_malloc_r+0x32>
   8b042:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8b046:	f8df c364 	ldr.w	ip, [pc, #868]	; 8b3ac <_malloc_r+0x510>
   8b04a:	4564      	cmp	r4, ip
   8b04c:	d187      	bne.n	8af5e <_malloc_r+0xc2>
   8b04e:	2101      	movs	r1, #1
   8b050:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8b054:	1083      	asrs	r3, r0, #2
   8b056:	4099      	lsls	r1, r3
   8b058:	4291      	cmp	r1, r2
   8b05a:	d9ab      	bls.n	8afb4 <_malloc_r+0x118>
   8b05c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b060:	6867      	ldr	r7, [r4, #4]
   8b062:	f027 0703 	bic.w	r7, r7, #3
   8b066:	42bd      	cmp	r5, r7
   8b068:	d802      	bhi.n	8b070 <_malloc_r+0x1d4>
   8b06a:	1b7b      	subs	r3, r7, r5
   8b06c:	2b0f      	cmp	r3, #15
   8b06e:	dc77      	bgt.n	8b160 <_malloc_r+0x2c4>
   8b070:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8b3b0 <_malloc_r+0x514>
   8b074:	4bc8      	ldr	r3, [pc, #800]	; (8b398 <_malloc_r+0x4fc>)
   8b076:	f8d9 2000 	ldr.w	r2, [r9]
   8b07a:	681b      	ldr	r3, [r3, #0]
   8b07c:	3201      	adds	r2, #1
   8b07e:	442b      	add	r3, r5
   8b080:	eb04 0a07 	add.w	sl, r4, r7
   8b084:	f000 8124 	beq.w	8b2d0 <_malloc_r+0x434>
   8b088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8b08c:	330f      	adds	r3, #15
   8b08e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8b092:	f02b 0b0f 	bic.w	fp, fp, #15
   8b096:	4659      	mov	r1, fp
   8b098:	4630      	mov	r0, r6
   8b09a:	f001 f81d 	bl	8c0d8 <_sbrk_r>
   8b09e:	1c41      	adds	r1, r0, #1
   8b0a0:	4602      	mov	r2, r0
   8b0a2:	f000 80e1 	beq.w	8b268 <_malloc_r+0x3cc>
   8b0a6:	4582      	cmp	sl, r0
   8b0a8:	f200 80dc 	bhi.w	8b264 <_malloc_r+0x3c8>
   8b0ac:	4bbb      	ldr	r3, [pc, #748]	; (8b39c <_malloc_r+0x500>)
   8b0ae:	6819      	ldr	r1, [r3, #0]
   8b0b0:	4459      	add	r1, fp
   8b0b2:	4608      	mov	r0, r1
   8b0b4:	6019      	str	r1, [r3, #0]
   8b0b6:	f000 8141 	beq.w	8b33c <_malloc_r+0x4a0>
   8b0ba:	f8d9 1000 	ldr.w	r1, [r9]
   8b0be:	9301      	str	r3, [sp, #4]
   8b0c0:	3101      	adds	r1, #1
   8b0c2:	bf1b      	ittet	ne
   8b0c4:	eba2 0a0a 	subne.w	sl, r2, sl
   8b0c8:	4450      	addne	r0, sl
   8b0ca:	f8c9 2000 	streq.w	r2, [r9]
   8b0ce:	6018      	strne	r0, [r3, #0]
   8b0d0:	f012 0a07 	ands.w	sl, r2, #7
   8b0d4:	f000 810a 	beq.w	8b2ec <_malloc_r+0x450>
   8b0d8:	f1ca 0108 	rsb	r1, sl, #8
   8b0dc:	440a      	add	r2, r1
   8b0de:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8b0e2:	4493      	add	fp, r2
   8b0e4:	3108      	adds	r1, #8
   8b0e6:	eba1 010b 	sub.w	r1, r1, fp
   8b0ea:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8b0ee:	4649      	mov	r1, r9
   8b0f0:	4630      	mov	r0, r6
   8b0f2:	9200      	str	r2, [sp, #0]
   8b0f4:	f000 fff0 	bl	8c0d8 <_sbrk_r>
   8b0f8:	1c42      	adds	r2, r0, #1
   8b0fa:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b0fe:	f000 8143 	beq.w	8b388 <_malloc_r+0x4ec>
   8b102:	1a80      	subs	r0, r0, r2
   8b104:	eb00 0b09 	add.w	fp, r0, r9
   8b108:	6819      	ldr	r1, [r3, #0]
   8b10a:	f04b 0001 	orr.w	r0, fp, #1
   8b10e:	4449      	add	r1, r9
   8b110:	4544      	cmp	r4, r8
   8b112:	f8c8 2008 	str.w	r2, [r8, #8]
   8b116:	6019      	str	r1, [r3, #0]
   8b118:	6050      	str	r0, [r2, #4]
   8b11a:	f000 811c 	beq.w	8b356 <_malloc_r+0x4ba>
   8b11e:	2f0f      	cmp	r7, #15
   8b120:	f240 811b 	bls.w	8b35a <_malloc_r+0x4be>
   8b124:	f04f 0c05 	mov.w	ip, #5
   8b128:	6860      	ldr	r0, [r4, #4]
   8b12a:	3f0c      	subs	r7, #12
   8b12c:	f027 0707 	bic.w	r7, r7, #7
   8b130:	f000 0001 	and.w	r0, r0, #1
   8b134:	4338      	orrs	r0, r7
   8b136:	eb04 0e07 	add.w	lr, r4, r7
   8b13a:	2f0f      	cmp	r7, #15
   8b13c:	6060      	str	r0, [r4, #4]
   8b13e:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8b142:	f200 8137 	bhi.w	8b3b4 <_malloc_r+0x518>
   8b146:	4614      	mov	r4, r2
   8b148:	6850      	ldr	r0, [r2, #4]
   8b14a:	4b95      	ldr	r3, [pc, #596]	; (8b3a0 <_malloc_r+0x504>)
   8b14c:	681a      	ldr	r2, [r3, #0]
   8b14e:	428a      	cmp	r2, r1
   8b150:	bf38      	it	cc
   8b152:	6019      	strcc	r1, [r3, #0]
   8b154:	4b93      	ldr	r3, [pc, #588]	; (8b3a4 <_malloc_r+0x508>)
   8b156:	681a      	ldr	r2, [r3, #0]
   8b158:	428a      	cmp	r2, r1
   8b15a:	bf38      	it	cc
   8b15c:	6019      	strcc	r1, [r3, #0]
   8b15e:	e086      	b.n	8b26e <_malloc_r+0x3d2>
   8b160:	f045 0201 	orr.w	r2, r5, #1
   8b164:	f043 0301 	orr.w	r3, r3, #1
   8b168:	4425      	add	r5, r4
   8b16a:	6062      	str	r2, [r4, #4]
   8b16c:	4630      	mov	r0, r6
   8b16e:	f8c8 5008 	str.w	r5, [r8, #8]
   8b172:	3408      	adds	r4, #8
   8b174:	606b      	str	r3, [r5, #4]
   8b176:	f000 fa05 	bl	8b584 <__malloc_unlock>
   8b17a:	4620      	mov	r0, r4
   8b17c:	b003      	add	sp, #12
   8b17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b182:	4423      	add	r3, r4
   8b184:	685a      	ldr	r2, [r3, #4]
   8b186:	68e1      	ldr	r1, [r4, #12]
   8b188:	e6a7      	b.n	8aeda <_malloc_r+0x3e>
   8b18a:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8b18e:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8b192:	d361      	bcc.n	8b258 <_malloc_r+0x3bc>
   8b194:	2b14      	cmp	r3, #20
   8b196:	f200 80ba 	bhi.w	8b30e <_malloc_r+0x472>
   8b19a:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8b19e:	00c9      	lsls	r1, r1, #3
   8b1a0:	335b      	adds	r3, #91	; 0x5b
   8b1a2:	eb08 0701 	add.w	r7, r8, r1
   8b1a6:	f858 1001 	ldr.w	r1, [r8, r1]
   8b1aa:	3f08      	subs	r7, #8
   8b1ac:	428f      	cmp	r7, r1
   8b1ae:	f000 8092 	beq.w	8b2d6 <_malloc_r+0x43a>
   8b1b2:	684b      	ldr	r3, [r1, #4]
   8b1b4:	f023 0303 	bic.w	r3, r3, #3
   8b1b8:	4293      	cmp	r3, r2
   8b1ba:	d902      	bls.n	8b1c2 <_malloc_r+0x326>
   8b1bc:	6889      	ldr	r1, [r1, #8]
   8b1be:	428f      	cmp	r7, r1
   8b1c0:	d1f7      	bne.n	8b1b2 <_malloc_r+0x316>
   8b1c2:	68cf      	ldr	r7, [r1, #12]
   8b1c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8b1c8:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8b1cc:	60bc      	str	r4, [r7, #8]
   8b1ce:	60cc      	str	r4, [r1, #12]
   8b1d0:	e6eb      	b.n	8afaa <_malloc_r+0x10e>
   8b1d2:	2b14      	cmp	r3, #20
   8b1d4:	d959      	bls.n	8b28a <_malloc_r+0x3ee>
   8b1d6:	2b54      	cmp	r3, #84	; 0x54
   8b1d8:	f200 80a1 	bhi.w	8b31e <_malloc_r+0x482>
   8b1dc:	0b2b      	lsrs	r3, r5, #12
   8b1de:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8b1e2:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8b1e6:	00c1      	lsls	r1, r0, #3
   8b1e8:	e69e      	b.n	8af28 <_malloc_r+0x8c>
   8b1ea:	f10e 0e01 	add.w	lr, lr, #1
   8b1ee:	f01e 0f03 	tst.w	lr, #3
   8b1f2:	f104 0408 	add.w	r4, r4, #8
   8b1f6:	f47f aeea 	bne.w	8afce <_malloc_r+0x132>
   8b1fa:	e051      	b.n	8b2a0 <_malloc_r+0x404>
   8b1fc:	463c      	mov	r4, r7
   8b1fe:	443a      	add	r2, r7
   8b200:	6853      	ldr	r3, [r2, #4]
   8b202:	68f9      	ldr	r1, [r7, #12]
   8b204:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8b208:	f043 0301 	orr.w	r3, r3, #1
   8b20c:	6053      	str	r3, [r2, #4]
   8b20e:	4630      	mov	r0, r6
   8b210:	60e9      	str	r1, [r5, #12]
   8b212:	608d      	str	r5, [r1, #8]
   8b214:	f000 f9b6 	bl	8b584 <__malloc_unlock>
   8b218:	e704      	b.n	8b024 <_malloc_r+0x188>
   8b21a:	08e8      	lsrs	r0, r5, #3
   8b21c:	f105 0308 	add.w	r3, r5, #8
   8b220:	e64c      	b.n	8aebc <_malloc_r+0x20>
   8b222:	4422      	add	r2, r4
   8b224:	6853      	ldr	r3, [r2, #4]
   8b226:	4630      	mov	r0, r6
   8b228:	f043 0301 	orr.w	r3, r3, #1
   8b22c:	6053      	str	r3, [r2, #4]
   8b22e:	3408      	adds	r4, #8
   8b230:	f000 f9a8 	bl	8b584 <__malloc_unlock>
   8b234:	e6f6      	b.n	8b024 <_malloc_r+0x188>
   8b236:	f045 0701 	orr.w	r7, r5, #1
   8b23a:	f043 0101 	orr.w	r1, r3, #1
   8b23e:	4425      	add	r5, r4
   8b240:	6067      	str	r7, [r4, #4]
   8b242:	4630      	mov	r0, r6
   8b244:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8b248:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8b24c:	6069      	str	r1, [r5, #4]
   8b24e:	50a3      	str	r3, [r4, r2]
   8b250:	f000 f998 	bl	8b584 <__malloc_unlock>
   8b254:	3408      	adds	r4, #8
   8b256:	e6e5      	b.n	8b024 <_malloc_r+0x188>
   8b258:	0993      	lsrs	r3, r2, #6
   8b25a:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8b25e:	00c9      	lsls	r1, r1, #3
   8b260:	3338      	adds	r3, #56	; 0x38
   8b262:	e79e      	b.n	8b1a2 <_malloc_r+0x306>
   8b264:	4544      	cmp	r4, r8
   8b266:	d064      	beq.n	8b332 <_malloc_r+0x496>
   8b268:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b26c:	6860      	ldr	r0, [r4, #4]
   8b26e:	f020 0b03 	bic.w	fp, r0, #3
   8b272:	455d      	cmp	r5, fp
   8b274:	ebab 0305 	sub.w	r3, fp, r5
   8b278:	d802      	bhi.n	8b280 <_malloc_r+0x3e4>
   8b27a:	2b0f      	cmp	r3, #15
   8b27c:	f73f af70 	bgt.w	8b160 <_malloc_r+0x2c4>
   8b280:	4630      	mov	r0, r6
   8b282:	f000 f97f 	bl	8b584 <__malloc_unlock>
   8b286:	2400      	movs	r4, #0
   8b288:	e6cc      	b.n	8b024 <_malloc_r+0x188>
   8b28a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8b28e:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8b292:	00c1      	lsls	r1, r0, #3
   8b294:	e648      	b.n	8af28 <_malloc_r+0x8c>
   8b296:	f859 3908 	ldr.w	r3, [r9], #-8
   8b29a:	454b      	cmp	r3, r9
   8b29c:	f040 80a9 	bne.w	8b3f2 <_malloc_r+0x556>
   8b2a0:	f010 0f03 	tst.w	r0, #3
   8b2a4:	f100 30ff 	add.w	r0, r0, #4294967295
   8b2a8:	d1f5      	bne.n	8b296 <_malloc_r+0x3fa>
   8b2aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8b2ae:	ea23 0301 	bic.w	r3, r3, r1
   8b2b2:	f8c8 3004 	str.w	r3, [r8, #4]
   8b2b6:	0049      	lsls	r1, r1, #1
   8b2b8:	4299      	cmp	r1, r3
   8b2ba:	f63f aecf 	bhi.w	8b05c <_malloc_r+0x1c0>
   8b2be:	b919      	cbnz	r1, 8b2c8 <_malloc_r+0x42c>
   8b2c0:	e6cc      	b.n	8b05c <_malloc_r+0x1c0>
   8b2c2:	0049      	lsls	r1, r1, #1
   8b2c4:	f10e 0e04 	add.w	lr, lr, #4
   8b2c8:	4219      	tst	r1, r3
   8b2ca:	d0fa      	beq.n	8b2c2 <_malloc_r+0x426>
   8b2cc:	4670      	mov	r0, lr
   8b2ce:	e67a      	b.n	8afc6 <_malloc_r+0x12a>
   8b2d0:	f103 0b10 	add.w	fp, r3, #16
   8b2d4:	e6df      	b.n	8b096 <_malloc_r+0x1fa>
   8b2d6:	f04f 0e01 	mov.w	lr, #1
   8b2da:	109a      	asrs	r2, r3, #2
   8b2dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8b2e0:	fa0e f202 	lsl.w	r2, lr, r2
   8b2e4:	431a      	orrs	r2, r3
   8b2e6:	f8c8 2004 	str.w	r2, [r8, #4]
   8b2ea:	e76d      	b.n	8b1c8 <_malloc_r+0x32c>
   8b2ec:	eb02 010b 	add.w	r1, r2, fp
   8b2f0:	4249      	negs	r1, r1
   8b2f2:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8b2f6:	4649      	mov	r1, r9
   8b2f8:	4630      	mov	r0, r6
   8b2fa:	9200      	str	r2, [sp, #0]
   8b2fc:	f000 feec 	bl	8c0d8 <_sbrk_r>
   8b300:	1c43      	adds	r3, r0, #1
   8b302:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b306:	f47f aefc 	bne.w	8b102 <_malloc_r+0x266>
   8b30a:	46d1      	mov	r9, sl
   8b30c:	e6fc      	b.n	8b108 <_malloc_r+0x26c>
   8b30e:	2b54      	cmp	r3, #84	; 0x54
   8b310:	d826      	bhi.n	8b360 <_malloc_r+0x4c4>
   8b312:	0b13      	lsrs	r3, r2, #12
   8b314:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8b318:	00c9      	lsls	r1, r1, #3
   8b31a:	336e      	adds	r3, #110	; 0x6e
   8b31c:	e741      	b.n	8b1a2 <_malloc_r+0x306>
   8b31e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b322:	d826      	bhi.n	8b372 <_malloc_r+0x4d6>
   8b324:	0beb      	lsrs	r3, r5, #15
   8b326:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8b32a:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8b32e:	00c1      	lsls	r1, r0, #3
   8b330:	e5fa      	b.n	8af28 <_malloc_r+0x8c>
   8b332:	4b1a      	ldr	r3, [pc, #104]	; (8b39c <_malloc_r+0x500>)
   8b334:	6818      	ldr	r0, [r3, #0]
   8b336:	4458      	add	r0, fp
   8b338:	6018      	str	r0, [r3, #0]
   8b33a:	e6be      	b.n	8b0ba <_malloc_r+0x21e>
   8b33c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8b340:	f1bc 0f00 	cmp.w	ip, #0
   8b344:	f47f aeb9 	bne.w	8b0ba <_malloc_r+0x21e>
   8b348:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b34c:	44bb      	add	fp, r7
   8b34e:	f04b 0001 	orr.w	r0, fp, #1
   8b352:	6060      	str	r0, [r4, #4]
   8b354:	e6f9      	b.n	8b14a <_malloc_r+0x2ae>
   8b356:	4614      	mov	r4, r2
   8b358:	e6f7      	b.n	8b14a <_malloc_r+0x2ae>
   8b35a:	2301      	movs	r3, #1
   8b35c:	6053      	str	r3, [r2, #4]
   8b35e:	e78f      	b.n	8b280 <_malloc_r+0x3e4>
   8b360:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b364:	d832      	bhi.n	8b3cc <_malloc_r+0x530>
   8b366:	0bd3      	lsrs	r3, r2, #15
   8b368:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8b36c:	00c9      	lsls	r1, r1, #3
   8b36e:	3377      	adds	r3, #119	; 0x77
   8b370:	e717      	b.n	8b1a2 <_malloc_r+0x306>
   8b372:	f240 5254 	movw	r2, #1364	; 0x554
   8b376:	4293      	cmp	r3, r2
   8b378:	d832      	bhi.n	8b3e0 <_malloc_r+0x544>
   8b37a:	0cab      	lsrs	r3, r5, #18
   8b37c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8b380:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8b384:	00c1      	lsls	r1, r0, #3
   8b386:	e5cf      	b.n	8af28 <_malloc_r+0x8c>
   8b388:	f1aa 0a08 	sub.w	sl, sl, #8
   8b38c:	44d3      	add	fp, sl
   8b38e:	f04f 0900 	mov.w	r9, #0
   8b392:	ebab 0b02 	sub.w	fp, fp, r2
   8b396:	e6b7      	b.n	8b108 <_malloc_r+0x26c>
   8b398:	200013b8 	.word	0x200013b8
   8b39c:	20001388 	.word	0x20001388
   8b3a0:	200013b0 	.word	0x200013b0
   8b3a4:	200013b4 	.word	0x200013b4
   8b3a8:	200009e0 	.word	0x200009e0
   8b3ac:	200009e8 	.word	0x200009e8
   8b3b0:	20000de8 	.word	0x20000de8
   8b3b4:	f104 0108 	add.w	r1, r4, #8
   8b3b8:	4630      	mov	r0, r6
   8b3ba:	9300      	str	r3, [sp, #0]
   8b3bc:	f7ff fa44 	bl	8a848 <_free_r>
   8b3c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b3c4:	9b00      	ldr	r3, [sp, #0]
   8b3c6:	6860      	ldr	r0, [r4, #4]
   8b3c8:	6819      	ldr	r1, [r3, #0]
   8b3ca:	e6be      	b.n	8b14a <_malloc_r+0x2ae>
   8b3cc:	f240 5154 	movw	r1, #1364	; 0x554
   8b3d0:	428b      	cmp	r3, r1
   8b3d2:	d80a      	bhi.n	8b3ea <_malloc_r+0x54e>
   8b3d4:	0c93      	lsrs	r3, r2, #18
   8b3d6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8b3da:	00c9      	lsls	r1, r1, #3
   8b3dc:	337c      	adds	r3, #124	; 0x7c
   8b3de:	e6e0      	b.n	8b1a2 <_malloc_r+0x306>
   8b3e0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b3e4:	207f      	movs	r0, #127	; 0x7f
   8b3e6:	277e      	movs	r7, #126	; 0x7e
   8b3e8:	e59e      	b.n	8af28 <_malloc_r+0x8c>
   8b3ea:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b3ee:	237e      	movs	r3, #126	; 0x7e
   8b3f0:	e6d7      	b.n	8b1a2 <_malloc_r+0x306>
   8b3f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8b3f6:	e75e      	b.n	8b2b6 <_malloc_r+0x41a>

0008b3f8 <__ascii_mbtowc>:
   8b3f8:	b082      	sub	sp, #8
   8b3fa:	b149      	cbz	r1, 8b410 <__ascii_mbtowc+0x18>
   8b3fc:	b15a      	cbz	r2, 8b416 <__ascii_mbtowc+0x1e>
   8b3fe:	b16b      	cbz	r3, 8b41c <__ascii_mbtowc+0x24>
   8b400:	7813      	ldrb	r3, [r2, #0]
   8b402:	600b      	str	r3, [r1, #0]
   8b404:	7812      	ldrb	r2, [r2, #0]
   8b406:	1e10      	subs	r0, r2, #0
   8b408:	bf18      	it	ne
   8b40a:	2001      	movne	r0, #1
   8b40c:	b002      	add	sp, #8
   8b40e:	4770      	bx	lr
   8b410:	a901      	add	r1, sp, #4
   8b412:	2a00      	cmp	r2, #0
   8b414:	d1f3      	bne.n	8b3fe <__ascii_mbtowc+0x6>
   8b416:	4610      	mov	r0, r2
   8b418:	b002      	add	sp, #8
   8b41a:	4770      	bx	lr
   8b41c:	f06f 0001 	mvn.w	r0, #1
   8b420:	e7f4      	b.n	8b40c <__ascii_mbtowc+0x14>
   8b422:	bf00      	nop

0008b424 <memchr>:
   8b424:	b470      	push	{r4, r5, r6}
   8b426:	0784      	lsls	r4, r0, #30
   8b428:	b2cd      	uxtb	r5, r1
   8b42a:	d012      	beq.n	8b452 <memchr+0x2e>
   8b42c:	4603      	mov	r3, r0
   8b42e:	1e54      	subs	r4, r2, #1
   8b430:	b92a      	cbnz	r2, 8b43e <memchr+0x1a>
   8b432:	e00b      	b.n	8b44c <memchr+0x28>
   8b434:	079a      	lsls	r2, r3, #30
   8b436:	4618      	mov	r0, r3
   8b438:	d00c      	beq.n	8b454 <memchr+0x30>
   8b43a:	3c01      	subs	r4, #1
   8b43c:	d306      	bcc.n	8b44c <memchr+0x28>
   8b43e:	4618      	mov	r0, r3
   8b440:	f813 2b01 	ldrb.w	r2, [r3], #1
   8b444:	42aa      	cmp	r2, r5
   8b446:	d1f5      	bne.n	8b434 <memchr+0x10>
   8b448:	bc70      	pop	{r4, r5, r6}
   8b44a:	4770      	bx	lr
   8b44c:	2000      	movs	r0, #0
   8b44e:	bc70      	pop	{r4, r5, r6}
   8b450:	4770      	bx	lr
   8b452:	4614      	mov	r4, r2
   8b454:	2c03      	cmp	r4, #3
   8b456:	d80d      	bhi.n	8b474 <memchr+0x50>
   8b458:	2c00      	cmp	r4, #0
   8b45a:	d0f7      	beq.n	8b44c <memchr+0x28>
   8b45c:	4602      	mov	r2, r0
   8b45e:	1903      	adds	r3, r0, r4
   8b460:	e001      	b.n	8b466 <memchr+0x42>
   8b462:	429a      	cmp	r2, r3
   8b464:	d0f2      	beq.n	8b44c <memchr+0x28>
   8b466:	4610      	mov	r0, r2
   8b468:	f812 1b01 	ldrb.w	r1, [r2], #1
   8b46c:	42a9      	cmp	r1, r5
   8b46e:	d1f8      	bne.n	8b462 <memchr+0x3e>
   8b470:	bc70      	pop	{r4, r5, r6}
   8b472:	4770      	bx	lr
   8b474:	4606      	mov	r6, r0
   8b476:	020a      	lsls	r2, r1, #8
   8b478:	b292      	uxth	r2, r2
   8b47a:	432a      	orrs	r2, r5
   8b47c:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8b480:	6833      	ldr	r3, [r6, #0]
   8b482:	4630      	mov	r0, r6
   8b484:	4053      	eors	r3, r2
   8b486:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8b48a:	ea21 0303 	bic.w	r3, r1, r3
   8b48e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8b492:	f106 0604 	add.w	r6, r6, #4
   8b496:	d1e1      	bne.n	8b45c <memchr+0x38>
   8b498:	3c04      	subs	r4, #4
   8b49a:	2c03      	cmp	r4, #3
   8b49c:	4630      	mov	r0, r6
   8b49e:	d8ef      	bhi.n	8b480 <memchr+0x5c>
   8b4a0:	e7da      	b.n	8b458 <memchr+0x34>
   8b4a2:	bf00      	nop

0008b4a4 <memmove>:
   8b4a4:	4288      	cmp	r0, r1
   8b4a6:	b4f0      	push	{r4, r5, r6, r7}
   8b4a8:	d90d      	bls.n	8b4c6 <memmove+0x22>
   8b4aa:	188b      	adds	r3, r1, r2
   8b4ac:	4283      	cmp	r3, r0
   8b4ae:	d90a      	bls.n	8b4c6 <memmove+0x22>
   8b4b0:	1884      	adds	r4, r0, r2
   8b4b2:	b132      	cbz	r2, 8b4c2 <memmove+0x1e>
   8b4b4:	4622      	mov	r2, r4
   8b4b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8b4ba:	4299      	cmp	r1, r3
   8b4bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8b4c0:	d1f9      	bne.n	8b4b6 <memmove+0x12>
   8b4c2:	bcf0      	pop	{r4, r5, r6, r7}
   8b4c4:	4770      	bx	lr
   8b4c6:	2a0f      	cmp	r2, #15
   8b4c8:	d80e      	bhi.n	8b4e8 <memmove+0x44>
   8b4ca:	4603      	mov	r3, r0
   8b4cc:	1e54      	subs	r4, r2, #1
   8b4ce:	2a00      	cmp	r2, #0
   8b4d0:	d0f7      	beq.n	8b4c2 <memmove+0x1e>
   8b4d2:	3401      	adds	r4, #1
   8b4d4:	440c      	add	r4, r1
   8b4d6:	3b01      	subs	r3, #1
   8b4d8:	f811 2b01 	ldrb.w	r2, [r1], #1
   8b4dc:	42a1      	cmp	r1, r4
   8b4de:	f803 2f01 	strb.w	r2, [r3, #1]!
   8b4e2:	d1f9      	bne.n	8b4d8 <memmove+0x34>
   8b4e4:	bcf0      	pop	{r4, r5, r6, r7}
   8b4e6:	4770      	bx	lr
   8b4e8:	ea40 0301 	orr.w	r3, r0, r1
   8b4ec:	079b      	lsls	r3, r3, #30
   8b4ee:	d13e      	bne.n	8b56e <memmove+0xca>
   8b4f0:	f1a2 0310 	sub.w	r3, r2, #16
   8b4f4:	f023 040f 	bic.w	r4, r3, #15
   8b4f8:	f101 0720 	add.w	r7, r1, #32
   8b4fc:	4427      	add	r7, r4
   8b4fe:	091b      	lsrs	r3, r3, #4
   8b500:	f101 0410 	add.w	r4, r1, #16
   8b504:	f100 0510 	add.w	r5, r0, #16
   8b508:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8b50c:	3410      	adds	r4, #16
   8b50e:	f845 6c10 	str.w	r6, [r5, #-16]
   8b512:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8b516:	3510      	adds	r5, #16
   8b518:	f845 6c1c 	str.w	r6, [r5, #-28]
   8b51c:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8b520:	f845 6c18 	str.w	r6, [r5, #-24]
   8b524:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8b528:	42bc      	cmp	r4, r7
   8b52a:	f845 6c14 	str.w	r6, [r5, #-20]
   8b52e:	d1eb      	bne.n	8b508 <memmove+0x64>
   8b530:	3301      	adds	r3, #1
   8b532:	f012 0f0c 	tst.w	r2, #12
   8b536:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8b53a:	f002 040f 	and.w	r4, r2, #15
   8b53e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8b542:	d017      	beq.n	8b574 <memmove+0xd0>
   8b544:	460e      	mov	r6, r1
   8b546:	3c04      	subs	r4, #4
   8b548:	f024 0c03 	bic.w	ip, r4, #3
   8b54c:	08a5      	lsrs	r5, r4, #2
   8b54e:	449c      	add	ip, r3
   8b550:	1f1c      	subs	r4, r3, #4
   8b552:	f856 7b04 	ldr.w	r7, [r6], #4
   8b556:	f844 7f04 	str.w	r7, [r4, #4]!
   8b55a:	4564      	cmp	r4, ip
   8b55c:	d1f9      	bne.n	8b552 <memmove+0xae>
   8b55e:	1c6c      	adds	r4, r5, #1
   8b560:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8b564:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8b568:	f002 0203 	and.w	r2, r2, #3
   8b56c:	e7ae      	b.n	8b4cc <memmove+0x28>
   8b56e:	4603      	mov	r3, r0
   8b570:	1e54      	subs	r4, r2, #1
   8b572:	e7ae      	b.n	8b4d2 <memmove+0x2e>
   8b574:	4622      	mov	r2, r4
   8b576:	e7a9      	b.n	8b4cc <memmove+0x28>

0008b578 <__malloc_lock>:
   8b578:	4801      	ldr	r0, [pc, #4]	; (8b580 <__malloc_lock+0x8>)
   8b57a:	f7ff bc13 	b.w	8ada4 <__retarget_lock_acquire_recursive>
   8b57e:	bf00      	nop
   8b580:	20001858 	.word	0x20001858

0008b584 <__malloc_unlock>:
   8b584:	4801      	ldr	r0, [pc, #4]	; (8b58c <__malloc_unlock+0x8>)
   8b586:	f7ff bc0f 	b.w	8ada8 <__retarget_lock_release_recursive>
   8b58a:	bf00      	nop
   8b58c:	20001858 	.word	0x20001858

0008b590 <_Balloc>:
   8b590:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b592:	b570      	push	{r4, r5, r6, lr}
   8b594:	4605      	mov	r5, r0
   8b596:	460c      	mov	r4, r1
   8b598:	b14b      	cbz	r3, 8b5ae <_Balloc+0x1e>
   8b59a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8b59e:	b180      	cbz	r0, 8b5c2 <_Balloc+0x32>
   8b5a0:	6802      	ldr	r2, [r0, #0]
   8b5a2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8b5a6:	2300      	movs	r3, #0
   8b5a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8b5ac:	bd70      	pop	{r4, r5, r6, pc}
   8b5ae:	2221      	movs	r2, #33	; 0x21
   8b5b0:	2104      	movs	r1, #4
   8b5b2:	f000 ffc5 	bl	8c540 <_calloc_r>
   8b5b6:	4603      	mov	r3, r0
   8b5b8:	64e8      	str	r0, [r5, #76]	; 0x4c
   8b5ba:	2800      	cmp	r0, #0
   8b5bc:	d1ed      	bne.n	8b59a <_Balloc+0xa>
   8b5be:	2000      	movs	r0, #0
   8b5c0:	bd70      	pop	{r4, r5, r6, pc}
   8b5c2:	2101      	movs	r1, #1
   8b5c4:	fa01 f604 	lsl.w	r6, r1, r4
   8b5c8:	1d72      	adds	r2, r6, #5
   8b5ca:	4628      	mov	r0, r5
   8b5cc:	0092      	lsls	r2, r2, #2
   8b5ce:	f000 ffb7 	bl	8c540 <_calloc_r>
   8b5d2:	2800      	cmp	r0, #0
   8b5d4:	d0f3      	beq.n	8b5be <_Balloc+0x2e>
   8b5d6:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8b5da:	e7e4      	b.n	8b5a6 <_Balloc+0x16>

0008b5dc <_Bfree>:
   8b5dc:	b131      	cbz	r1, 8b5ec <_Bfree+0x10>
   8b5de:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b5e0:	684a      	ldr	r2, [r1, #4]
   8b5e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8b5e6:	6008      	str	r0, [r1, #0]
   8b5e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8b5ec:	4770      	bx	lr
   8b5ee:	bf00      	nop

0008b5f0 <__multadd>:
   8b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b5f4:	4680      	mov	r8, r0
   8b5f6:	461c      	mov	r4, r3
   8b5f8:	2000      	movs	r0, #0
   8b5fa:	460f      	mov	r7, r1
   8b5fc:	690e      	ldr	r6, [r1, #16]
   8b5fe:	3114      	adds	r1, #20
   8b600:	680d      	ldr	r5, [r1, #0]
   8b602:	3001      	adds	r0, #1
   8b604:	b2ab      	uxth	r3, r5
   8b606:	fb02 4303 	mla	r3, r2, r3, r4
   8b60a:	0c2c      	lsrs	r4, r5, #16
   8b60c:	0c1d      	lsrs	r5, r3, #16
   8b60e:	fb02 5404 	mla	r4, r2, r4, r5
   8b612:	b29b      	uxth	r3, r3
   8b614:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8b618:	4286      	cmp	r6, r0
   8b61a:	f841 3b04 	str.w	r3, [r1], #4
   8b61e:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8b622:	dced      	bgt.n	8b600 <__multadd+0x10>
   8b624:	b13c      	cbz	r4, 8b636 <__multadd+0x46>
   8b626:	68bb      	ldr	r3, [r7, #8]
   8b628:	42b3      	cmp	r3, r6
   8b62a:	dd07      	ble.n	8b63c <__multadd+0x4c>
   8b62c:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b630:	3601      	adds	r6, #1
   8b632:	615c      	str	r4, [r3, #20]
   8b634:	613e      	str	r6, [r7, #16]
   8b636:	4638      	mov	r0, r7
   8b638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b63c:	6879      	ldr	r1, [r7, #4]
   8b63e:	4640      	mov	r0, r8
   8b640:	3101      	adds	r1, #1
   8b642:	f7ff ffa5 	bl	8b590 <_Balloc>
   8b646:	4605      	mov	r5, r0
   8b648:	b1b0      	cbz	r0, 8b678 <__multadd+0x88>
   8b64a:	693a      	ldr	r2, [r7, #16]
   8b64c:	f107 010c 	add.w	r1, r7, #12
   8b650:	3202      	adds	r2, #2
   8b652:	0092      	lsls	r2, r2, #2
   8b654:	300c      	adds	r0, #12
   8b656:	f7fb f8cd 	bl	867f4 <memcpy>
   8b65a:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b65e:	687a      	ldr	r2, [r7, #4]
   8b660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b664:	6039      	str	r1, [r7, #0]
   8b666:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8b66a:	462f      	mov	r7, r5
   8b66c:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b670:	3601      	adds	r6, #1
   8b672:	615c      	str	r4, [r3, #20]
   8b674:	613e      	str	r6, [r7, #16]
   8b676:	e7de      	b.n	8b636 <__multadd+0x46>
   8b678:	4602      	mov	r2, r0
   8b67a:	21b5      	movs	r1, #181	; 0xb5
   8b67c:	4b01      	ldr	r3, [pc, #4]	; (8b684 <__multadd+0x94>)
   8b67e:	4802      	ldr	r0, [pc, #8]	; (8b688 <__multadd+0x98>)
   8b680:	f000 ff40 	bl	8c504 <__assert_func>
   8b684:	0008d580 	.word	0x0008d580
   8b688:	0008d620 	.word	0x0008d620

0008b68c <__hi0bits>:
   8b68c:	0c02      	lsrs	r2, r0, #16
   8b68e:	0412      	lsls	r2, r2, #16
   8b690:	4603      	mov	r3, r0
   8b692:	b9ca      	cbnz	r2, 8b6c8 <__hi0bits+0x3c>
   8b694:	0403      	lsls	r3, r0, #16
   8b696:	2010      	movs	r0, #16
   8b698:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b69c:	bf04      	itt	eq
   8b69e:	021b      	lsleq	r3, r3, #8
   8b6a0:	3008      	addeq	r0, #8
   8b6a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b6a6:	bf04      	itt	eq
   8b6a8:	011b      	lsleq	r3, r3, #4
   8b6aa:	3004      	addeq	r0, #4
   8b6ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b6b0:	bf04      	itt	eq
   8b6b2:	009b      	lsleq	r3, r3, #2
   8b6b4:	3002      	addeq	r0, #2
   8b6b6:	2b00      	cmp	r3, #0
   8b6b8:	db05      	blt.n	8b6c6 <__hi0bits+0x3a>
   8b6ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8b6be:	f100 0001 	add.w	r0, r0, #1
   8b6c2:	bf08      	it	eq
   8b6c4:	2020      	moveq	r0, #32
   8b6c6:	4770      	bx	lr
   8b6c8:	2000      	movs	r0, #0
   8b6ca:	e7e5      	b.n	8b698 <__hi0bits+0xc>

0008b6cc <__lo0bits>:
   8b6cc:	6803      	ldr	r3, [r0, #0]
   8b6ce:	4601      	mov	r1, r0
   8b6d0:	f013 0207 	ands.w	r2, r3, #7
   8b6d4:	d007      	beq.n	8b6e6 <__lo0bits+0x1a>
   8b6d6:	07da      	lsls	r2, r3, #31
   8b6d8:	d420      	bmi.n	8b71c <__lo0bits+0x50>
   8b6da:	0798      	lsls	r0, r3, #30
   8b6dc:	d522      	bpl.n	8b724 <__lo0bits+0x58>
   8b6de:	085b      	lsrs	r3, r3, #1
   8b6e0:	2001      	movs	r0, #1
   8b6e2:	600b      	str	r3, [r1, #0]
   8b6e4:	4770      	bx	lr
   8b6e6:	b298      	uxth	r0, r3
   8b6e8:	b1a8      	cbz	r0, 8b716 <__lo0bits+0x4a>
   8b6ea:	4610      	mov	r0, r2
   8b6ec:	f013 0fff 	tst.w	r3, #255	; 0xff
   8b6f0:	bf04      	itt	eq
   8b6f2:	0a1b      	lsreq	r3, r3, #8
   8b6f4:	3008      	addeq	r0, #8
   8b6f6:	071a      	lsls	r2, r3, #28
   8b6f8:	bf04      	itt	eq
   8b6fa:	091b      	lsreq	r3, r3, #4
   8b6fc:	3004      	addeq	r0, #4
   8b6fe:	079a      	lsls	r2, r3, #30
   8b700:	bf04      	itt	eq
   8b702:	089b      	lsreq	r3, r3, #2
   8b704:	3002      	addeq	r0, #2
   8b706:	07da      	lsls	r2, r3, #31
   8b708:	d403      	bmi.n	8b712 <__lo0bits+0x46>
   8b70a:	085b      	lsrs	r3, r3, #1
   8b70c:	f100 0001 	add.w	r0, r0, #1
   8b710:	d006      	beq.n	8b720 <__lo0bits+0x54>
   8b712:	600b      	str	r3, [r1, #0]
   8b714:	4770      	bx	lr
   8b716:	2010      	movs	r0, #16
   8b718:	0c1b      	lsrs	r3, r3, #16
   8b71a:	e7e7      	b.n	8b6ec <__lo0bits+0x20>
   8b71c:	2000      	movs	r0, #0
   8b71e:	4770      	bx	lr
   8b720:	2020      	movs	r0, #32
   8b722:	4770      	bx	lr
   8b724:	089b      	lsrs	r3, r3, #2
   8b726:	2002      	movs	r0, #2
   8b728:	600b      	str	r3, [r1, #0]
   8b72a:	4770      	bx	lr

0008b72c <__i2b>:
   8b72c:	b510      	push	{r4, lr}
   8b72e:	460c      	mov	r4, r1
   8b730:	2101      	movs	r1, #1
   8b732:	f7ff ff2d 	bl	8b590 <_Balloc>
   8b736:	4602      	mov	r2, r0
   8b738:	b118      	cbz	r0, 8b742 <__i2b+0x16>
   8b73a:	2301      	movs	r3, #1
   8b73c:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8b740:	bd10      	pop	{r4, pc}
   8b742:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8b746:	4b02      	ldr	r3, [pc, #8]	; (8b750 <__i2b+0x24>)
   8b748:	4802      	ldr	r0, [pc, #8]	; (8b754 <__i2b+0x28>)
   8b74a:	f000 fedb 	bl	8c504 <__assert_func>
   8b74e:	bf00      	nop
   8b750:	0008d580 	.word	0x0008d580
   8b754:	0008d620 	.word	0x0008d620

0008b758 <__multiply>:
   8b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b75c:	690d      	ldr	r5, [r1, #16]
   8b75e:	6917      	ldr	r7, [r2, #16]
   8b760:	460e      	mov	r6, r1
   8b762:	42bd      	cmp	r5, r7
   8b764:	4614      	mov	r4, r2
   8b766:	b085      	sub	sp, #20
   8b768:	db05      	blt.n	8b776 <__multiply+0x1e>
   8b76a:	463a      	mov	r2, r7
   8b76c:	4623      	mov	r3, r4
   8b76e:	462f      	mov	r7, r5
   8b770:	460c      	mov	r4, r1
   8b772:	4615      	mov	r5, r2
   8b774:	461e      	mov	r6, r3
   8b776:	68a3      	ldr	r3, [r4, #8]
   8b778:	6861      	ldr	r1, [r4, #4]
   8b77a:	eb07 0805 	add.w	r8, r7, r5
   8b77e:	4543      	cmp	r3, r8
   8b780:	bfb8      	it	lt
   8b782:	3101      	addlt	r1, #1
   8b784:	f7ff ff04 	bl	8b590 <_Balloc>
   8b788:	9001      	str	r0, [sp, #4]
   8b78a:	2800      	cmp	r0, #0
   8b78c:	f000 8088 	beq.w	8b8a0 <__multiply+0x148>
   8b790:	9b01      	ldr	r3, [sp, #4]
   8b792:	f103 0914 	add.w	r9, r3, #20
   8b796:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8b79a:	45d1      	cmp	r9, sl
   8b79c:	d205      	bcs.n	8b7aa <__multiply+0x52>
   8b79e:	464b      	mov	r3, r9
   8b7a0:	2200      	movs	r2, #0
   8b7a2:	f843 2b04 	str.w	r2, [r3], #4
   8b7a6:	459a      	cmp	sl, r3
   8b7a8:	d8fb      	bhi.n	8b7a2 <__multiply+0x4a>
   8b7aa:	f106 0e14 	add.w	lr, r6, #20
   8b7ae:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8b7b2:	f104 0314 	add.w	r3, r4, #20
   8b7b6:	45de      	cmp	lr, fp
   8b7b8:	461a      	mov	r2, r3
   8b7ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8b7be:	d23e      	bcs.n	8b83e <__multiply+0xe6>
   8b7c0:	1b3b      	subs	r3, r7, r4
   8b7c2:	3b15      	subs	r3, #21
   8b7c4:	f023 0303 	bic.w	r3, r3, #3
   8b7c8:	3304      	adds	r3, #4
   8b7ca:	3415      	adds	r4, #21
   8b7cc:	42a7      	cmp	r7, r4
   8b7ce:	bf38      	it	cc
   8b7d0:	2304      	movcc	r3, #4
   8b7d2:	e9cd a802 	strd	sl, r8, [sp, #8]
   8b7d6:	4698      	mov	r8, r3
   8b7d8:	4692      	mov	sl, r2
   8b7da:	e003      	b.n	8b7e4 <__multiply+0x8c>
   8b7dc:	45f3      	cmp	fp, lr
   8b7de:	f109 0904 	add.w	r9, r9, #4
   8b7e2:	d92a      	bls.n	8b83a <__multiply+0xe2>
   8b7e4:	f85e 0b04 	ldr.w	r0, [lr], #4
   8b7e8:	b286      	uxth	r6, r0
   8b7ea:	2e00      	cmp	r6, #0
   8b7ec:	d138      	bne.n	8b860 <__multiply+0x108>
   8b7ee:	0c00      	lsrs	r0, r0, #16
   8b7f0:	d0f4      	beq.n	8b7dc <__multiply+0x84>
   8b7f2:	f8d9 3000 	ldr.w	r3, [r9]
   8b7f6:	4654      	mov	r4, sl
   8b7f8:	461e      	mov	r6, r3
   8b7fa:	464d      	mov	r5, r9
   8b7fc:	f04f 0c00 	mov.w	ip, #0
   8b800:	8822      	ldrh	r2, [r4, #0]
   8b802:	0c36      	lsrs	r6, r6, #16
   8b804:	fb00 6602 	mla	r6, r0, r2, r6
   8b808:	b29b      	uxth	r3, r3
   8b80a:	44b4      	add	ip, r6
   8b80c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8b810:	f845 3b04 	str.w	r3, [r5], #4
   8b814:	f854 3b04 	ldr.w	r3, [r4], #4
   8b818:	682e      	ldr	r6, [r5, #0]
   8b81a:	0c1b      	lsrs	r3, r3, #16
   8b81c:	b2b2      	uxth	r2, r6
   8b81e:	fb00 2303 	mla	r3, r0, r3, r2
   8b822:	42a7      	cmp	r7, r4
   8b824:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8b828:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8b82c:	d8e8      	bhi.n	8b800 <__multiply+0xa8>
   8b82e:	45f3      	cmp	fp, lr
   8b830:	f849 3008 	str.w	r3, [r9, r8]
   8b834:	f109 0904 	add.w	r9, r9, #4
   8b838:	d8d4      	bhi.n	8b7e4 <__multiply+0x8c>
   8b83a:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8b83e:	f1b8 0f00 	cmp.w	r8, #0
   8b842:	dc03      	bgt.n	8b84c <__multiply+0xf4>
   8b844:	e006      	b.n	8b854 <__multiply+0xfc>
   8b846:	f1b8 0801 	subs.w	r8, r8, #1
   8b84a:	d003      	beq.n	8b854 <__multiply+0xfc>
   8b84c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8b850:	2b00      	cmp	r3, #0
   8b852:	d0f8      	beq.n	8b846 <__multiply+0xee>
   8b854:	9801      	ldr	r0, [sp, #4]
   8b856:	f8c0 8010 	str.w	r8, [r0, #16]
   8b85a:	b005      	add	sp, #20
   8b85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b860:	4655      	mov	r5, sl
   8b862:	464c      	mov	r4, r9
   8b864:	2300      	movs	r3, #0
   8b866:	f855 1b04 	ldr.w	r1, [r5], #4
   8b86a:	6820      	ldr	r0, [r4, #0]
   8b86c:	b28a      	uxth	r2, r1
   8b86e:	fa1f fc80 	uxth.w	ip, r0
   8b872:	fb06 c202 	mla	r2, r6, r2, ip
   8b876:	0c09      	lsrs	r1, r1, #16
   8b878:	0c00      	lsrs	r0, r0, #16
   8b87a:	fb06 0101 	mla	r1, r6, r1, r0
   8b87e:	4413      	add	r3, r2
   8b880:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8b884:	b29b      	uxth	r3, r3
   8b886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b88a:	42af      	cmp	r7, r5
   8b88c:	f844 3b04 	str.w	r3, [r4], #4
   8b890:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8b894:	d8e7      	bhi.n	8b866 <__multiply+0x10e>
   8b896:	f849 3008 	str.w	r3, [r9, r8]
   8b89a:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8b89e:	e7a6      	b.n	8b7ee <__multiply+0x96>
   8b8a0:	4602      	mov	r2, r0
   8b8a2:	f240 115d 	movw	r1, #349	; 0x15d
   8b8a6:	4b02      	ldr	r3, [pc, #8]	; (8b8b0 <__multiply+0x158>)
   8b8a8:	4802      	ldr	r0, [pc, #8]	; (8b8b4 <__multiply+0x15c>)
   8b8aa:	f000 fe2b 	bl	8c504 <__assert_func>
   8b8ae:	bf00      	nop
   8b8b0:	0008d580 	.word	0x0008d580
   8b8b4:	0008d620 	.word	0x0008d620

0008b8b8 <__pow5mult>:
   8b8b8:	f012 0303 	ands.w	r3, r2, #3
   8b8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b8c0:	4614      	mov	r4, r2
   8b8c2:	4607      	mov	r7, r0
   8b8c4:	d12e      	bne.n	8b924 <__pow5mult+0x6c>
   8b8c6:	460e      	mov	r6, r1
   8b8c8:	10a4      	asrs	r4, r4, #2
   8b8ca:	d01c      	beq.n	8b906 <__pow5mult+0x4e>
   8b8cc:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8b8ce:	b395      	cbz	r5, 8b936 <__pow5mult+0x7e>
   8b8d0:	07e3      	lsls	r3, r4, #31
   8b8d2:	f04f 0800 	mov.w	r8, #0
   8b8d6:	d406      	bmi.n	8b8e6 <__pow5mult+0x2e>
   8b8d8:	1064      	asrs	r4, r4, #1
   8b8da:	d014      	beq.n	8b906 <__pow5mult+0x4e>
   8b8dc:	6828      	ldr	r0, [r5, #0]
   8b8de:	b1a8      	cbz	r0, 8b90c <__pow5mult+0x54>
   8b8e0:	4605      	mov	r5, r0
   8b8e2:	07e3      	lsls	r3, r4, #31
   8b8e4:	d5f8      	bpl.n	8b8d8 <__pow5mult+0x20>
   8b8e6:	462a      	mov	r2, r5
   8b8e8:	4631      	mov	r1, r6
   8b8ea:	4638      	mov	r0, r7
   8b8ec:	f7ff ff34 	bl	8b758 <__multiply>
   8b8f0:	b1b6      	cbz	r6, 8b920 <__pow5mult+0x68>
   8b8f2:	6871      	ldr	r1, [r6, #4]
   8b8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b8f6:	1064      	asrs	r4, r4, #1
   8b8f8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8b8fc:	6032      	str	r2, [r6, #0]
   8b8fe:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8b902:	4606      	mov	r6, r0
   8b904:	d1ea      	bne.n	8b8dc <__pow5mult+0x24>
   8b906:	4630      	mov	r0, r6
   8b908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b90c:	462a      	mov	r2, r5
   8b90e:	4629      	mov	r1, r5
   8b910:	4638      	mov	r0, r7
   8b912:	f7ff ff21 	bl	8b758 <__multiply>
   8b916:	6028      	str	r0, [r5, #0]
   8b918:	4605      	mov	r5, r0
   8b91a:	f8c0 8000 	str.w	r8, [r0]
   8b91e:	e7e0      	b.n	8b8e2 <__pow5mult+0x2a>
   8b920:	4606      	mov	r6, r0
   8b922:	e7d9      	b.n	8b8d8 <__pow5mult+0x20>
   8b924:	4a09      	ldr	r2, [pc, #36]	; (8b94c <__pow5mult+0x94>)
   8b926:	3b01      	subs	r3, #1
   8b928:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b92c:	2300      	movs	r3, #0
   8b92e:	f7ff fe5f 	bl	8b5f0 <__multadd>
   8b932:	4606      	mov	r6, r0
   8b934:	e7c8      	b.n	8b8c8 <__pow5mult+0x10>
   8b936:	f240 2171 	movw	r1, #625	; 0x271
   8b93a:	4638      	mov	r0, r7
   8b93c:	f7ff fef6 	bl	8b72c <__i2b>
   8b940:	2300      	movs	r3, #0
   8b942:	64b8      	str	r0, [r7, #72]	; 0x48
   8b944:	4605      	mov	r5, r0
   8b946:	6003      	str	r3, [r0, #0]
   8b948:	e7c2      	b.n	8b8d0 <__pow5mult+0x18>
   8b94a:	bf00      	nop
   8b94c:	0008d790 	.word	0x0008d790

0008b950 <__lshift>:
   8b950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b954:	690f      	ldr	r7, [r1, #16]
   8b956:	688b      	ldr	r3, [r1, #8]
   8b958:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8b95c:	1c7e      	adds	r6, r7, #1
   8b95e:	429e      	cmp	r6, r3
   8b960:	460d      	mov	r5, r1
   8b962:	4691      	mov	r9, r2
   8b964:	4680      	mov	r8, r0
   8b966:	6849      	ldr	r1, [r1, #4]
   8b968:	ea4f 1462 	mov.w	r4, r2, asr #5
   8b96c:	dd04      	ble.n	8b978 <__lshift+0x28>
   8b96e:	005b      	lsls	r3, r3, #1
   8b970:	429e      	cmp	r6, r3
   8b972:	f101 0101 	add.w	r1, r1, #1
   8b976:	dcfa      	bgt.n	8b96e <__lshift+0x1e>
   8b978:	4640      	mov	r0, r8
   8b97a:	f7ff fe09 	bl	8b590 <_Balloc>
   8b97e:	2800      	cmp	r0, #0
   8b980:	d04f      	beq.n	8ba22 <__lshift+0xd2>
   8b982:	2c00      	cmp	r4, #0
   8b984:	f100 0114 	add.w	r1, r0, #20
   8b988:	dd0d      	ble.n	8b9a6 <__lshift+0x56>
   8b98a:	460b      	mov	r3, r1
   8b98c:	2200      	movs	r2, #0
   8b98e:	3405      	adds	r4, #5
   8b990:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8b994:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8b998:	f843 2b04 	str.w	r2, [r3], #4
   8b99c:	42a3      	cmp	r3, r4
   8b99e:	d1fb      	bne.n	8b998 <__lshift+0x48>
   8b9a0:	f1ac 0314 	sub.w	r3, ip, #20
   8b9a4:	4419      	add	r1, r3
   8b9a6:	692c      	ldr	r4, [r5, #16]
   8b9a8:	f105 0314 	add.w	r3, r5, #20
   8b9ac:	f019 091f 	ands.w	r9, r9, #31
   8b9b0:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8b9b4:	d02d      	beq.n	8ba12 <__lshift+0xc2>
   8b9b6:	468e      	mov	lr, r1
   8b9b8:	f04f 0a00 	mov.w	sl, #0
   8b9bc:	f1c9 0220 	rsb	r2, r9, #32
   8b9c0:	681c      	ldr	r4, [r3, #0]
   8b9c2:	fa04 f409 	lsl.w	r4, r4, r9
   8b9c6:	ea44 040a 	orr.w	r4, r4, sl
   8b9ca:	f84e 4b04 	str.w	r4, [lr], #4
   8b9ce:	f853 4b04 	ldr.w	r4, [r3], #4
   8b9d2:	459c      	cmp	ip, r3
   8b9d4:	fa24 fa02 	lsr.w	sl, r4, r2
   8b9d8:	d8f2      	bhi.n	8b9c0 <__lshift+0x70>
   8b9da:	ebac 0305 	sub.w	r3, ip, r5
   8b9de:	3b15      	subs	r3, #21
   8b9e0:	f023 0303 	bic.w	r3, r3, #3
   8b9e4:	3304      	adds	r3, #4
   8b9e6:	f105 0215 	add.w	r2, r5, #21
   8b9ea:	4594      	cmp	ip, r2
   8b9ec:	bf38      	it	cc
   8b9ee:	2304      	movcc	r3, #4
   8b9f0:	f1ba 0f00 	cmp.w	sl, #0
   8b9f4:	bf18      	it	ne
   8b9f6:	4637      	movne	r7, r6
   8b9f8:	f841 a003 	str.w	sl, [r1, r3]
   8b9fc:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8ba00:	686a      	ldr	r2, [r5, #4]
   8ba02:	6107      	str	r7, [r0, #16]
   8ba04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8ba08:	6029      	str	r1, [r5, #0]
   8ba0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8ba0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8ba12:	3904      	subs	r1, #4
   8ba14:	f853 2b04 	ldr.w	r2, [r3], #4
   8ba18:	459c      	cmp	ip, r3
   8ba1a:	f841 2f04 	str.w	r2, [r1, #4]!
   8ba1e:	d8f9      	bhi.n	8ba14 <__lshift+0xc4>
   8ba20:	e7ec      	b.n	8b9fc <__lshift+0xac>
   8ba22:	4602      	mov	r2, r0
   8ba24:	f240 11d9 	movw	r1, #473	; 0x1d9
   8ba28:	4b01      	ldr	r3, [pc, #4]	; (8ba30 <__lshift+0xe0>)
   8ba2a:	4802      	ldr	r0, [pc, #8]	; (8ba34 <__lshift+0xe4>)
   8ba2c:	f000 fd6a 	bl	8c504 <__assert_func>
   8ba30:	0008d580 	.word	0x0008d580
   8ba34:	0008d620 	.word	0x0008d620

0008ba38 <__mcmp>:
   8ba38:	b430      	push	{r4, r5}
   8ba3a:	690b      	ldr	r3, [r1, #16]
   8ba3c:	4605      	mov	r5, r0
   8ba3e:	6900      	ldr	r0, [r0, #16]
   8ba40:	1ac0      	subs	r0, r0, r3
   8ba42:	d111      	bne.n	8ba68 <__mcmp+0x30>
   8ba44:	3514      	adds	r5, #20
   8ba46:	3114      	adds	r1, #20
   8ba48:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8ba4c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8ba50:	e001      	b.n	8ba56 <__mcmp+0x1e>
   8ba52:	429d      	cmp	r5, r3
   8ba54:	d208      	bcs.n	8ba68 <__mcmp+0x30>
   8ba56:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8ba5a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8ba5e:	428c      	cmp	r4, r1
   8ba60:	d0f7      	beq.n	8ba52 <__mcmp+0x1a>
   8ba62:	d203      	bcs.n	8ba6c <__mcmp+0x34>
   8ba64:	f04f 30ff 	mov.w	r0, #4294967295
   8ba68:	bc30      	pop	{r4, r5}
   8ba6a:	4770      	bx	lr
   8ba6c:	2001      	movs	r0, #1
   8ba6e:	bc30      	pop	{r4, r5}
   8ba70:	4770      	bx	lr
   8ba72:	bf00      	nop

0008ba74 <__mdiff>:
   8ba74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ba78:	690b      	ldr	r3, [r1, #16]
   8ba7a:	460c      	mov	r4, r1
   8ba7c:	6911      	ldr	r1, [r2, #16]
   8ba7e:	4690      	mov	r8, r2
   8ba80:	eba3 0b01 	sub.w	fp, r3, r1
   8ba84:	f1bb 0f00 	cmp.w	fp, #0
   8ba88:	d17c      	bne.n	8bb84 <__mdiff+0x110>
   8ba8a:	f104 0614 	add.w	r6, r4, #20
   8ba8e:	3214      	adds	r2, #20
   8ba90:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8ba94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8ba98:	e001      	b.n	8ba9e <__mdiff+0x2a>
   8ba9a:	429e      	cmp	r6, r3
   8ba9c:	d276      	bcs.n	8bb8c <__mdiff+0x118>
   8ba9e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8baa2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8baa6:	428d      	cmp	r5, r1
   8baa8:	d0f7      	beq.n	8ba9a <__mdiff+0x26>
   8baaa:	d365      	bcc.n	8bb78 <__mdiff+0x104>
   8baac:	6861      	ldr	r1, [r4, #4]
   8baae:	f7ff fd6f 	bl	8b590 <_Balloc>
   8bab2:	2800      	cmp	r0, #0
   8bab4:	d074      	beq.n	8bba0 <__mdiff+0x12c>
   8bab6:	f100 0614 	add.w	r6, r0, #20
   8baba:	46b4      	mov	ip, r6
   8babc:	2300      	movs	r3, #0
   8babe:	6927      	ldr	r7, [r4, #16]
   8bac0:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8bac4:	f104 0a14 	add.w	sl, r4, #20
   8bac8:	f108 0514 	add.w	r5, r8, #20
   8bacc:	f8c0 b00c 	str.w	fp, [r0, #12]
   8bad0:	3410      	adds	r4, #16
   8bad2:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8bad6:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8bada:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8bade:	f855 bb04 	ldr.w	fp, [r5], #4
   8bae2:	b291      	uxth	r1, r2
   8bae4:	440b      	add	r3, r1
   8bae6:	fa1f f18b 	uxth.w	r1, fp
   8baea:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8baee:	1a59      	subs	r1, r3, r1
   8baf0:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8baf4:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8baf8:	b289      	uxth	r1, r1
   8bafa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8bafe:	45a9      	cmp	r9, r5
   8bb00:	f84c 1b04 	str.w	r1, [ip], #4
   8bb04:	ea4f 4323 	mov.w	r3, r3, asr #16
   8bb08:	d8e7      	bhi.n	8bada <__mdiff+0x66>
   8bb0a:	eba9 0208 	sub.w	r2, r9, r8
   8bb0e:	3a15      	subs	r2, #21
   8bb10:	f108 0815 	add.w	r8, r8, #21
   8bb14:	45c1      	cmp	r9, r8
   8bb16:	f022 0403 	bic.w	r4, r2, #3
   8bb1a:	f104 0404 	add.w	r4, r4, #4
   8bb1e:	bf38      	it	cc
   8bb20:	2404      	movcc	r4, #4
   8bb22:	f022 0203 	bic.w	r2, r2, #3
   8bb26:	bf38      	it	cc
   8bb28:	2200      	movcc	r2, #0
   8bb2a:	44a2      	add	sl, r4
   8bb2c:	45d6      	cmp	lr, sl
   8bb2e:	4434      	add	r4, r6
   8bb30:	4416      	add	r6, r2
   8bb32:	d918      	bls.n	8bb66 <__mdiff+0xf2>
   8bb34:	4625      	mov	r5, r4
   8bb36:	4652      	mov	r2, sl
   8bb38:	f852 6b04 	ldr.w	r6, [r2], #4
   8bb3c:	b2b1      	uxth	r1, r6
   8bb3e:	4419      	add	r1, r3
   8bb40:	140b      	asrs	r3, r1, #16
   8bb42:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8bb46:	b289      	uxth	r1, r1
   8bb48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8bb4c:	4596      	cmp	lr, r2
   8bb4e:	f845 1b04 	str.w	r1, [r5], #4
   8bb52:	ea4f 4323 	mov.w	r3, r3, asr #16
   8bb56:	d8ef      	bhi.n	8bb38 <__mdiff+0xc4>
   8bb58:	f10e 36ff 	add.w	r6, lr, #4294967295
   8bb5c:	eba6 060a 	sub.w	r6, r6, sl
   8bb60:	f026 0603 	bic.w	r6, r6, #3
   8bb64:	4426      	add	r6, r4
   8bb66:	b921      	cbnz	r1, 8bb72 <__mdiff+0xfe>
   8bb68:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8bb6c:	3f01      	subs	r7, #1
   8bb6e:	2b00      	cmp	r3, #0
   8bb70:	d0fa      	beq.n	8bb68 <__mdiff+0xf4>
   8bb72:	6107      	str	r7, [r0, #16]
   8bb74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bb78:	4623      	mov	r3, r4
   8bb7a:	f04f 0b01 	mov.w	fp, #1
   8bb7e:	4644      	mov	r4, r8
   8bb80:	4698      	mov	r8, r3
   8bb82:	e793      	b.n	8baac <__mdiff+0x38>
   8bb84:	dbf8      	blt.n	8bb78 <__mdiff+0x104>
   8bb86:	f04f 0b00 	mov.w	fp, #0
   8bb8a:	e78f      	b.n	8baac <__mdiff+0x38>
   8bb8c:	2100      	movs	r1, #0
   8bb8e:	f7ff fcff 	bl	8b590 <_Balloc>
   8bb92:	b160      	cbz	r0, 8bbae <__mdiff+0x13a>
   8bb94:	2201      	movs	r2, #1
   8bb96:	2300      	movs	r3, #0
   8bb98:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8bb9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bba0:	4602      	mov	r2, r0
   8bba2:	f44f 7110 	mov.w	r1, #576	; 0x240
   8bba6:	4b05      	ldr	r3, [pc, #20]	; (8bbbc <__mdiff+0x148>)
   8bba8:	4805      	ldr	r0, [pc, #20]	; (8bbc0 <__mdiff+0x14c>)
   8bbaa:	f000 fcab 	bl	8c504 <__assert_func>
   8bbae:	4602      	mov	r2, r0
   8bbb0:	f240 2132 	movw	r1, #562	; 0x232
   8bbb4:	4b01      	ldr	r3, [pc, #4]	; (8bbbc <__mdiff+0x148>)
   8bbb6:	4802      	ldr	r0, [pc, #8]	; (8bbc0 <__mdiff+0x14c>)
   8bbb8:	f000 fca4 	bl	8c504 <__assert_func>
   8bbbc:	0008d580 	.word	0x0008d580
   8bbc0:	0008d620 	.word	0x0008d620

0008bbc4 <__d2b>:
   8bbc4:	b570      	push	{r4, r5, r6, lr}
   8bbc6:	2101      	movs	r1, #1
   8bbc8:	b082      	sub	sp, #8
   8bbca:	4616      	mov	r6, r2
   8bbcc:	461d      	mov	r5, r3
   8bbce:	f7ff fcdf 	bl	8b590 <_Balloc>
   8bbd2:	4604      	mov	r4, r0
   8bbd4:	2800      	cmp	r0, #0
   8bbd6:	d04c      	beq.n	8bc72 <__d2b+0xae>
   8bbd8:	462b      	mov	r3, r5
   8bbda:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8bbde:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8bbe2:	b10d      	cbz	r5, 8bbe8 <__d2b+0x24>
   8bbe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8bbe8:	2e00      	cmp	r6, #0
   8bbea:	9301      	str	r3, [sp, #4]
   8bbec:	d022      	beq.n	8bc34 <__d2b+0x70>
   8bbee:	4668      	mov	r0, sp
   8bbf0:	9600      	str	r6, [sp, #0]
   8bbf2:	f7ff fd6b 	bl	8b6cc <__lo0bits>
   8bbf6:	2800      	cmp	r0, #0
   8bbf8:	d037      	beq.n	8bc6a <__d2b+0xa6>
   8bbfa:	9b01      	ldr	r3, [sp, #4]
   8bbfc:	9900      	ldr	r1, [sp, #0]
   8bbfe:	f1c0 0220 	rsb	r2, r0, #32
   8bc02:	fa03 f202 	lsl.w	r2, r3, r2
   8bc06:	430a      	orrs	r2, r1
   8bc08:	40c3      	lsrs	r3, r0
   8bc0a:	9301      	str	r3, [sp, #4]
   8bc0c:	6162      	str	r2, [r4, #20]
   8bc0e:	2b00      	cmp	r3, #0
   8bc10:	bf14      	ite	ne
   8bc12:	2102      	movne	r1, #2
   8bc14:	2101      	moveq	r1, #1
   8bc16:	61a3      	str	r3, [r4, #24]
   8bc18:	6121      	str	r1, [r4, #16]
   8bc1a:	b1b5      	cbz	r5, 8bc4a <__d2b+0x86>
   8bc1c:	9a06      	ldr	r2, [sp, #24]
   8bc1e:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8bc22:	4403      	add	r3, r0
   8bc24:	6013      	str	r3, [r2, #0]
   8bc26:	9b07      	ldr	r3, [sp, #28]
   8bc28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8bc2c:	6018      	str	r0, [r3, #0]
   8bc2e:	4620      	mov	r0, r4
   8bc30:	b002      	add	sp, #8
   8bc32:	bd70      	pop	{r4, r5, r6, pc}
   8bc34:	a801      	add	r0, sp, #4
   8bc36:	f7ff fd49 	bl	8b6cc <__lo0bits>
   8bc3a:	2301      	movs	r3, #1
   8bc3c:	9a01      	ldr	r2, [sp, #4]
   8bc3e:	4619      	mov	r1, r3
   8bc40:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8bc44:	3020      	adds	r0, #32
   8bc46:	2d00      	cmp	r5, #0
   8bc48:	d1e8      	bne.n	8bc1c <__d2b+0x58>
   8bc4a:	9a06      	ldr	r2, [sp, #24]
   8bc4c:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8bc50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8bc54:	6010      	str	r0, [r2, #0]
   8bc56:	6918      	ldr	r0, [r3, #16]
   8bc58:	f7ff fd18 	bl	8b68c <__hi0bits>
   8bc5c:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8bc60:	4620      	mov	r0, r4
   8bc62:	9b07      	ldr	r3, [sp, #28]
   8bc64:	6019      	str	r1, [r3, #0]
   8bc66:	b002      	add	sp, #8
   8bc68:	bd70      	pop	{r4, r5, r6, pc}
   8bc6a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8bc6e:	6162      	str	r2, [r4, #20]
   8bc70:	e7cd      	b.n	8bc0e <__d2b+0x4a>
   8bc72:	4602      	mov	r2, r0
   8bc74:	f240 310a 	movw	r1, #778	; 0x30a
   8bc78:	4b01      	ldr	r3, [pc, #4]	; (8bc80 <__d2b+0xbc>)
   8bc7a:	4802      	ldr	r0, [pc, #8]	; (8bc84 <__d2b+0xc0>)
   8bc7c:	f000 fc42 	bl	8c504 <__assert_func>
   8bc80:	0008d580 	.word	0x0008d580
   8bc84:	0008d620 	.word	0x0008d620

0008bc88 <_realloc_r>:
   8bc88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bc8c:	4616      	mov	r6, r2
   8bc8e:	2900      	cmp	r1, #0
   8bc90:	f000 80bd 	beq.w	8be0e <_realloc_r+0x186>
   8bc94:	f106 050b 	add.w	r5, r6, #11
   8bc98:	460c      	mov	r4, r1
   8bc9a:	4680      	mov	r8, r0
   8bc9c:	f7ff fc6c 	bl	8b578 <__malloc_lock>
   8bca0:	2d16      	cmp	r5, #22
   8bca2:	d85f      	bhi.n	8bd64 <_realloc_r+0xdc>
   8bca4:	2510      	movs	r5, #16
   8bca6:	462a      	mov	r2, r5
   8bca8:	42ae      	cmp	r6, r5
   8bcaa:	d860      	bhi.n	8bd6e <_realloc_r+0xe6>
   8bcac:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8bcb0:	f1a4 0908 	sub.w	r9, r4, #8
   8bcb4:	f021 0703 	bic.w	r7, r1, #3
   8bcb8:	4297      	cmp	r7, r2
   8bcba:	f280 8086 	bge.w	8bdca <_realloc_r+0x142>
   8bcbe:	4bc9      	ldr	r3, [pc, #804]	; (8bfe4 <_realloc_r+0x35c>)
   8bcc0:	eb09 0007 	add.w	r0, r9, r7
   8bcc4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8bcc8:	4584      	cmp	ip, r0
   8bcca:	f000 80b9 	beq.w	8be40 <_realloc_r+0x1b8>
   8bcce:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8bcd2:	f02c 0301 	bic.w	r3, ip, #1
   8bcd6:	4403      	add	r3, r0
   8bcd8:	685b      	ldr	r3, [r3, #4]
   8bcda:	07db      	lsls	r3, r3, #31
   8bcdc:	f100 808c 	bmi.w	8bdf8 <_realloc_r+0x170>
   8bce0:	f02c 0c03 	bic.w	ip, ip, #3
   8bce4:	eb07 030c 	add.w	r3, r7, ip
   8bce8:	4293      	cmp	r3, r2
   8bcea:	f280 8115 	bge.w	8bf18 <_realloc_r+0x290>
   8bcee:	07cb      	lsls	r3, r1, #31
   8bcf0:	d40f      	bmi.n	8bd12 <_realloc_r+0x8a>
   8bcf2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8bcf6:	eba9 0a03 	sub.w	sl, r9, r3
   8bcfa:	f8da 3004 	ldr.w	r3, [sl, #4]
   8bcfe:	f023 0103 	bic.w	r1, r3, #3
   8bd02:	448c      	add	ip, r1
   8bd04:	44bc      	add	ip, r7
   8bd06:	4594      	cmp	ip, r2
   8bd08:	da38      	bge.n	8bd7c <_realloc_r+0xf4>
   8bd0a:	187b      	adds	r3, r7, r1
   8bd0c:	4293      	cmp	r3, r2
   8bd0e:	f280 810f 	bge.w	8bf30 <_realloc_r+0x2a8>
   8bd12:	4631      	mov	r1, r6
   8bd14:	4640      	mov	r0, r8
   8bd16:	f7ff f8c1 	bl	8ae9c <_malloc_r>
   8bd1a:	4606      	mov	r6, r0
   8bd1c:	b1e0      	cbz	r0, 8bd58 <_realloc_r+0xd0>
   8bd1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8bd22:	f1a0 0208 	sub.w	r2, r0, #8
   8bd26:	f023 0301 	bic.w	r3, r3, #1
   8bd2a:	444b      	add	r3, r9
   8bd2c:	4293      	cmp	r3, r2
   8bd2e:	f000 80f9 	beq.w	8bf24 <_realloc_r+0x29c>
   8bd32:	1f3a      	subs	r2, r7, #4
   8bd34:	2a24      	cmp	r2, #36	; 0x24
   8bd36:	f200 811c 	bhi.w	8bf72 <_realloc_r+0x2ea>
   8bd3a:	2a13      	cmp	r2, #19
   8bd3c:	f200 80cd 	bhi.w	8beda <_realloc_r+0x252>
   8bd40:	4603      	mov	r3, r0
   8bd42:	4622      	mov	r2, r4
   8bd44:	6811      	ldr	r1, [r2, #0]
   8bd46:	6019      	str	r1, [r3, #0]
   8bd48:	6851      	ldr	r1, [r2, #4]
   8bd4a:	6059      	str	r1, [r3, #4]
   8bd4c:	6892      	ldr	r2, [r2, #8]
   8bd4e:	609a      	str	r2, [r3, #8]
   8bd50:	4621      	mov	r1, r4
   8bd52:	4640      	mov	r0, r8
   8bd54:	f7fe fd78 	bl	8a848 <_free_r>
   8bd58:	4640      	mov	r0, r8
   8bd5a:	f7ff fc13 	bl	8b584 <__malloc_unlock>
   8bd5e:	4630      	mov	r0, r6
   8bd60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bd64:	f025 0507 	bic.w	r5, r5, #7
   8bd68:	2d00      	cmp	r5, #0
   8bd6a:	462a      	mov	r2, r5
   8bd6c:	da9c      	bge.n	8bca8 <_realloc_r+0x20>
   8bd6e:	230c      	movs	r3, #12
   8bd70:	2600      	movs	r6, #0
   8bd72:	f8c8 3000 	str.w	r3, [r8]
   8bd76:	4630      	mov	r0, r6
   8bd78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bd7c:	4656      	mov	r6, sl
   8bd7e:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8bd82:	60cb      	str	r3, [r1, #12]
   8bd84:	6099      	str	r1, [r3, #8]
   8bd86:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8bd8a:	f8da 300c 	ldr.w	r3, [sl, #12]
   8bd8e:	1f3a      	subs	r2, r7, #4
   8bd90:	2a24      	cmp	r2, #36	; 0x24
   8bd92:	60cb      	str	r3, [r1, #12]
   8bd94:	6099      	str	r1, [r3, #8]
   8bd96:	f200 8107 	bhi.w	8bfa8 <_realloc_r+0x320>
   8bd9a:	2a13      	cmp	r2, #19
   8bd9c:	f240 8102 	bls.w	8bfa4 <_realloc_r+0x31c>
   8bda0:	6823      	ldr	r3, [r4, #0]
   8bda2:	2a1b      	cmp	r2, #27
   8bda4:	f8ca 3008 	str.w	r3, [sl, #8]
   8bda8:	6863      	ldr	r3, [r4, #4]
   8bdaa:	f8ca 300c 	str.w	r3, [sl, #12]
   8bdae:	f200 811b 	bhi.w	8bfe8 <_realloc_r+0x360>
   8bdb2:	3408      	adds	r4, #8
   8bdb4:	f10a 0310 	add.w	r3, sl, #16
   8bdb8:	6822      	ldr	r2, [r4, #0]
   8bdba:	4667      	mov	r7, ip
   8bdbc:	601a      	str	r2, [r3, #0]
   8bdbe:	6862      	ldr	r2, [r4, #4]
   8bdc0:	46d1      	mov	r9, sl
   8bdc2:	605a      	str	r2, [r3, #4]
   8bdc4:	68a2      	ldr	r2, [r4, #8]
   8bdc6:	4634      	mov	r4, r6
   8bdc8:	609a      	str	r2, [r3, #8]
   8bdca:	1b7b      	subs	r3, r7, r5
   8bdcc:	2b0f      	cmp	r3, #15
   8bdce:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8bdd2:	d821      	bhi.n	8be18 <_realloc_r+0x190>
   8bdd4:	f002 0201 	and.w	r2, r2, #1
   8bdd8:	433a      	orrs	r2, r7
   8bdda:	eb09 0107 	add.w	r1, r9, r7
   8bdde:	f8c9 2004 	str.w	r2, [r9, #4]
   8bde2:	684b      	ldr	r3, [r1, #4]
   8bde4:	f043 0301 	orr.w	r3, r3, #1
   8bde8:	604b      	str	r3, [r1, #4]
   8bdea:	4626      	mov	r6, r4
   8bdec:	4640      	mov	r0, r8
   8bdee:	f7ff fbc9 	bl	8b584 <__malloc_unlock>
   8bdf2:	4630      	mov	r0, r6
   8bdf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bdf8:	07c9      	lsls	r1, r1, #31
   8bdfa:	d48a      	bmi.n	8bd12 <_realloc_r+0x8a>
   8bdfc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8be00:	eba9 0a03 	sub.w	sl, r9, r3
   8be04:	f8da 1004 	ldr.w	r1, [sl, #4]
   8be08:	f021 0103 	bic.w	r1, r1, #3
   8be0c:	e77d      	b.n	8bd0a <_realloc_r+0x82>
   8be0e:	4611      	mov	r1, r2
   8be10:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8be14:	f7ff b842 	b.w	8ae9c <_malloc_r>
   8be18:	f002 0201 	and.w	r2, r2, #1
   8be1c:	eb09 0105 	add.w	r1, r9, r5
   8be20:	f043 0301 	orr.w	r3, r3, #1
   8be24:	432a      	orrs	r2, r5
   8be26:	f8c9 2004 	str.w	r2, [r9, #4]
   8be2a:	444f      	add	r7, r9
   8be2c:	604b      	str	r3, [r1, #4]
   8be2e:	687b      	ldr	r3, [r7, #4]
   8be30:	4640      	mov	r0, r8
   8be32:	f043 0301 	orr.w	r3, r3, #1
   8be36:	3108      	adds	r1, #8
   8be38:	607b      	str	r3, [r7, #4]
   8be3a:	f7fe fd05 	bl	8a848 <_free_r>
   8be3e:	e7d4      	b.n	8bdea <_realloc_r+0x162>
   8be40:	f8dc b004 	ldr.w	fp, [ip, #4]
   8be44:	f105 0010 	add.w	r0, r5, #16
   8be48:	f02b 0b03 	bic.w	fp, fp, #3
   8be4c:	eb07 0c0b 	add.w	ip, r7, fp
   8be50:	4584      	cmp	ip, r0
   8be52:	da4d      	bge.n	8bef0 <_realloc_r+0x268>
   8be54:	07c9      	lsls	r1, r1, #31
   8be56:	f53f af5c 	bmi.w	8bd12 <_realloc_r+0x8a>
   8be5a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8be5e:	eba9 0a01 	sub.w	sl, r9, r1
   8be62:	f8da 1004 	ldr.w	r1, [sl, #4]
   8be66:	f021 0103 	bic.w	r1, r1, #3
   8be6a:	448b      	add	fp, r1
   8be6c:	44bb      	add	fp, r7
   8be6e:	4558      	cmp	r0, fp
   8be70:	f73f af4b 	bgt.w	8bd0a <_realloc_r+0x82>
   8be74:	4656      	mov	r6, sl
   8be76:	f8da 100c 	ldr.w	r1, [sl, #12]
   8be7a:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8be7e:	1f3a      	subs	r2, r7, #4
   8be80:	2a24      	cmp	r2, #36	; 0x24
   8be82:	60c1      	str	r1, [r0, #12]
   8be84:	6088      	str	r0, [r1, #8]
   8be86:	f200 80bd 	bhi.w	8c004 <_realloc_r+0x37c>
   8be8a:	2a13      	cmp	r2, #19
   8be8c:	f240 80b8 	bls.w	8c000 <_realloc_r+0x378>
   8be90:	6821      	ldr	r1, [r4, #0]
   8be92:	2a1b      	cmp	r2, #27
   8be94:	f8ca 1008 	str.w	r1, [sl, #8]
   8be98:	6861      	ldr	r1, [r4, #4]
   8be9a:	f8ca 100c 	str.w	r1, [sl, #12]
   8be9e:	f200 80c1 	bhi.w	8c024 <_realloc_r+0x39c>
   8bea2:	3408      	adds	r4, #8
   8bea4:	f10a 0210 	add.w	r2, sl, #16
   8bea8:	6821      	ldr	r1, [r4, #0]
   8beaa:	6011      	str	r1, [r2, #0]
   8beac:	6861      	ldr	r1, [r4, #4]
   8beae:	6051      	str	r1, [r2, #4]
   8beb0:	68a1      	ldr	r1, [r4, #8]
   8beb2:	6091      	str	r1, [r2, #8]
   8beb4:	ebab 0205 	sub.w	r2, fp, r5
   8beb8:	eb0a 0105 	add.w	r1, sl, r5
   8bebc:	f042 0201 	orr.w	r2, r2, #1
   8bec0:	6099      	str	r1, [r3, #8]
   8bec2:	604a      	str	r2, [r1, #4]
   8bec4:	f8da 3004 	ldr.w	r3, [sl, #4]
   8bec8:	4640      	mov	r0, r8
   8beca:	f003 0301 	and.w	r3, r3, #1
   8bece:	431d      	orrs	r5, r3
   8bed0:	f8ca 5004 	str.w	r5, [sl, #4]
   8bed4:	f7ff fb56 	bl	8b584 <__malloc_unlock>
   8bed8:	e74d      	b.n	8bd76 <_realloc_r+0xee>
   8beda:	6823      	ldr	r3, [r4, #0]
   8bedc:	2a1b      	cmp	r2, #27
   8bede:	6003      	str	r3, [r0, #0]
   8bee0:	6863      	ldr	r3, [r4, #4]
   8bee2:	6043      	str	r3, [r0, #4]
   8bee4:	d849      	bhi.n	8bf7a <_realloc_r+0x2f2>
   8bee6:	f104 0208 	add.w	r2, r4, #8
   8beea:	f100 0308 	add.w	r3, r0, #8
   8beee:	e729      	b.n	8bd44 <_realloc_r+0xbc>
   8bef0:	ebac 0205 	sub.w	r2, ip, r5
   8bef4:	eb09 0105 	add.w	r1, r9, r5
   8bef8:	f042 0201 	orr.w	r2, r2, #1
   8befc:	6099      	str	r1, [r3, #8]
   8befe:	604a      	str	r2, [r1, #4]
   8bf00:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8bf04:	4640      	mov	r0, r8
   8bf06:	f003 0301 	and.w	r3, r3, #1
   8bf0a:	431d      	orrs	r5, r3
   8bf0c:	f844 5c04 	str.w	r5, [r4, #-4]
   8bf10:	f7ff fb38 	bl	8b584 <__malloc_unlock>
   8bf14:	4626      	mov	r6, r4
   8bf16:	e72e      	b.n	8bd76 <_realloc_r+0xee>
   8bf18:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8bf1c:	461f      	mov	r7, r3
   8bf1e:	60ca      	str	r2, [r1, #12]
   8bf20:	6091      	str	r1, [r2, #8]
   8bf22:	e752      	b.n	8bdca <_realloc_r+0x142>
   8bf24:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8bf28:	f023 0303 	bic.w	r3, r3, #3
   8bf2c:	441f      	add	r7, r3
   8bf2e:	e74c      	b.n	8bdca <_realloc_r+0x142>
   8bf30:	4656      	mov	r6, sl
   8bf32:	f8da 100c 	ldr.w	r1, [sl, #12]
   8bf36:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8bf3a:	1f3a      	subs	r2, r7, #4
   8bf3c:	2a24      	cmp	r2, #36	; 0x24
   8bf3e:	60c1      	str	r1, [r0, #12]
   8bf40:	6088      	str	r0, [r1, #8]
   8bf42:	d827      	bhi.n	8bf94 <_realloc_r+0x30c>
   8bf44:	2a13      	cmp	r2, #19
   8bf46:	d923      	bls.n	8bf90 <_realloc_r+0x308>
   8bf48:	6821      	ldr	r1, [r4, #0]
   8bf4a:	2a1b      	cmp	r2, #27
   8bf4c:	f8ca 1008 	str.w	r1, [sl, #8]
   8bf50:	6861      	ldr	r1, [r4, #4]
   8bf52:	f8ca 100c 	str.w	r1, [sl, #12]
   8bf56:	d82f      	bhi.n	8bfb8 <_realloc_r+0x330>
   8bf58:	3408      	adds	r4, #8
   8bf5a:	f10a 0210 	add.w	r2, sl, #16
   8bf5e:	6821      	ldr	r1, [r4, #0]
   8bf60:	461f      	mov	r7, r3
   8bf62:	6011      	str	r1, [r2, #0]
   8bf64:	6863      	ldr	r3, [r4, #4]
   8bf66:	46d1      	mov	r9, sl
   8bf68:	6053      	str	r3, [r2, #4]
   8bf6a:	68a3      	ldr	r3, [r4, #8]
   8bf6c:	4634      	mov	r4, r6
   8bf6e:	6093      	str	r3, [r2, #8]
   8bf70:	e72b      	b.n	8bdca <_realloc_r+0x142>
   8bf72:	4621      	mov	r1, r4
   8bf74:	f7ff fa96 	bl	8b4a4 <memmove>
   8bf78:	e6ea      	b.n	8bd50 <_realloc_r+0xc8>
   8bf7a:	68a3      	ldr	r3, [r4, #8]
   8bf7c:	2a24      	cmp	r2, #36	; 0x24
   8bf7e:	6083      	str	r3, [r0, #8]
   8bf80:	68e3      	ldr	r3, [r4, #12]
   8bf82:	60c3      	str	r3, [r0, #12]
   8bf84:	d024      	beq.n	8bfd0 <_realloc_r+0x348>
   8bf86:	f104 0210 	add.w	r2, r4, #16
   8bf8a:	f100 0310 	add.w	r3, r0, #16
   8bf8e:	e6d9      	b.n	8bd44 <_realloc_r+0xbc>
   8bf90:	4632      	mov	r2, r6
   8bf92:	e7e4      	b.n	8bf5e <_realloc_r+0x2d6>
   8bf94:	4621      	mov	r1, r4
   8bf96:	4630      	mov	r0, r6
   8bf98:	461f      	mov	r7, r3
   8bf9a:	46d1      	mov	r9, sl
   8bf9c:	f7ff fa82 	bl	8b4a4 <memmove>
   8bfa0:	4634      	mov	r4, r6
   8bfa2:	e712      	b.n	8bdca <_realloc_r+0x142>
   8bfa4:	4633      	mov	r3, r6
   8bfa6:	e707      	b.n	8bdb8 <_realloc_r+0x130>
   8bfa8:	4621      	mov	r1, r4
   8bfaa:	4630      	mov	r0, r6
   8bfac:	4667      	mov	r7, ip
   8bfae:	46d1      	mov	r9, sl
   8bfb0:	f7ff fa78 	bl	8b4a4 <memmove>
   8bfb4:	4634      	mov	r4, r6
   8bfb6:	e708      	b.n	8bdca <_realloc_r+0x142>
   8bfb8:	68a1      	ldr	r1, [r4, #8]
   8bfba:	2a24      	cmp	r2, #36	; 0x24
   8bfbc:	f8ca 1010 	str.w	r1, [sl, #16]
   8bfc0:	68e1      	ldr	r1, [r4, #12]
   8bfc2:	f8ca 1014 	str.w	r1, [sl, #20]
   8bfc6:	d023      	beq.n	8c010 <_realloc_r+0x388>
   8bfc8:	3410      	adds	r4, #16
   8bfca:	f10a 0218 	add.w	r2, sl, #24
   8bfce:	e7c6      	b.n	8bf5e <_realloc_r+0x2d6>
   8bfd0:	6923      	ldr	r3, [r4, #16]
   8bfd2:	f104 0218 	add.w	r2, r4, #24
   8bfd6:	6103      	str	r3, [r0, #16]
   8bfd8:	6961      	ldr	r1, [r4, #20]
   8bfda:	f100 0318 	add.w	r3, r0, #24
   8bfde:	6141      	str	r1, [r0, #20]
   8bfe0:	e6b0      	b.n	8bd44 <_realloc_r+0xbc>
   8bfe2:	bf00      	nop
   8bfe4:	200009e0 	.word	0x200009e0
   8bfe8:	68a3      	ldr	r3, [r4, #8]
   8bfea:	2a24      	cmp	r2, #36	; 0x24
   8bfec:	f8ca 3010 	str.w	r3, [sl, #16]
   8bff0:	68e3      	ldr	r3, [r4, #12]
   8bff2:	f8ca 3014 	str.w	r3, [sl, #20]
   8bff6:	d021      	beq.n	8c03c <_realloc_r+0x3b4>
   8bff8:	3410      	adds	r4, #16
   8bffa:	f10a 0318 	add.w	r3, sl, #24
   8bffe:	e6db      	b.n	8bdb8 <_realloc_r+0x130>
   8c000:	4632      	mov	r2, r6
   8c002:	e751      	b.n	8bea8 <_realloc_r+0x220>
   8c004:	4621      	mov	r1, r4
   8c006:	4630      	mov	r0, r6
   8c008:	f7ff fa4c 	bl	8b4a4 <memmove>
   8c00c:	4b15      	ldr	r3, [pc, #84]	; (8c064 <_realloc_r+0x3dc>)
   8c00e:	e751      	b.n	8beb4 <_realloc_r+0x22c>
   8c010:	6921      	ldr	r1, [r4, #16]
   8c012:	f10a 0220 	add.w	r2, sl, #32
   8c016:	f8ca 1018 	str.w	r1, [sl, #24]
   8c01a:	6961      	ldr	r1, [r4, #20]
   8c01c:	3418      	adds	r4, #24
   8c01e:	f8ca 101c 	str.w	r1, [sl, #28]
   8c022:	e79c      	b.n	8bf5e <_realloc_r+0x2d6>
   8c024:	68a1      	ldr	r1, [r4, #8]
   8c026:	2a24      	cmp	r2, #36	; 0x24
   8c028:	f8ca 1010 	str.w	r1, [sl, #16]
   8c02c:	68e1      	ldr	r1, [r4, #12]
   8c02e:	f8ca 1014 	str.w	r1, [sl, #20]
   8c032:	d00d      	beq.n	8c050 <_realloc_r+0x3c8>
   8c034:	3410      	adds	r4, #16
   8c036:	f10a 0218 	add.w	r2, sl, #24
   8c03a:	e735      	b.n	8bea8 <_realloc_r+0x220>
   8c03c:	6922      	ldr	r2, [r4, #16]
   8c03e:	f10a 0320 	add.w	r3, sl, #32
   8c042:	f8ca 2018 	str.w	r2, [sl, #24]
   8c046:	6962      	ldr	r2, [r4, #20]
   8c048:	3418      	adds	r4, #24
   8c04a:	f8ca 201c 	str.w	r2, [sl, #28]
   8c04e:	e6b3      	b.n	8bdb8 <_realloc_r+0x130>
   8c050:	6921      	ldr	r1, [r4, #16]
   8c052:	f10a 0220 	add.w	r2, sl, #32
   8c056:	f8ca 1018 	str.w	r1, [sl, #24]
   8c05a:	6961      	ldr	r1, [r4, #20]
   8c05c:	3418      	adds	r4, #24
   8c05e:	f8ca 101c 	str.w	r1, [sl, #28]
   8c062:	e721      	b.n	8bea8 <_realloc_r+0x220>
   8c064:	200009e0 	.word	0x200009e0

0008c068 <frexp>:
   8c068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c06a:	4617      	mov	r7, r2
   8c06c:	2200      	movs	r2, #0
   8c06e:	f8df c060 	ldr.w	ip, [pc, #96]	; 8c0d0 <frexp+0x68>
   8c072:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c076:	4563      	cmp	r3, ip
   8c078:	4604      	mov	r4, r0
   8c07a:	460d      	mov	r5, r1
   8c07c:	603a      	str	r2, [r7, #0]
   8c07e:	dc22      	bgt.n	8c0c6 <frexp+0x5e>
   8c080:	4684      	mov	ip, r0
   8c082:	ea53 0c0c 	orrs.w	ip, r3, ip
   8c086:	d01e      	beq.n	8c0c6 <frexp+0x5e>
   8c088:	f8df c048 	ldr.w	ip, [pc, #72]	; 8c0d4 <frexp+0x6c>
   8c08c:	460e      	mov	r6, r1
   8c08e:	ea01 0c0c 	and.w	ip, r1, ip
   8c092:	f1bc 0f00 	cmp.w	ip, #0
   8c096:	d109      	bne.n	8c0ac <frexp+0x44>
   8c098:	2200      	movs	r2, #0
   8c09a:	4b0c      	ldr	r3, [pc, #48]	; (8c0cc <frexp+0x64>)
   8c09c:	f000 fd70 	bl	8cb80 <__aeabi_dmul>
   8c0a0:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8c0a4:	4604      	mov	r4, r0
   8c0a6:	460e      	mov	r6, r1
   8c0a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c0ac:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8c0b0:	151b      	asrs	r3, r3, #20
   8c0b2:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8c0b6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8c0ba:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8c0be:	4413      	add	r3, r2
   8c0c0:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8c0c4:	603b      	str	r3, [r7, #0]
   8c0c6:	4620      	mov	r0, r4
   8c0c8:	4629      	mov	r1, r5
   8c0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c0cc:	43500000 	.word	0x43500000
   8c0d0:	7fefffff 	.word	0x7fefffff
   8c0d4:	7ff00000 	.word	0x7ff00000

0008c0d8 <_sbrk_r>:
   8c0d8:	2200      	movs	r2, #0
   8c0da:	b538      	push	{r3, r4, r5, lr}
   8c0dc:	4d06      	ldr	r5, [pc, #24]	; (8c0f8 <_sbrk_r+0x20>)
   8c0de:	4604      	mov	r4, r0
   8c0e0:	4608      	mov	r0, r1
   8c0e2:	602a      	str	r2, [r5, #0]
   8c0e4:	f7f7 f81e 	bl	83124 <_sbrk>
   8c0e8:	1c43      	adds	r3, r0, #1
   8c0ea:	d000      	beq.n	8c0ee <_sbrk_r+0x16>
   8c0ec:	bd38      	pop	{r3, r4, r5, pc}
   8c0ee:	682b      	ldr	r3, [r5, #0]
   8c0f0:	2b00      	cmp	r3, #0
   8c0f2:	d0fb      	beq.n	8c0ec <_sbrk_r+0x14>
   8c0f4:	6023      	str	r3, [r4, #0]
   8c0f6:	bd38      	pop	{r3, r4, r5, pc}
   8c0f8:	2000186c 	.word	0x2000186c

0008c0fc <__sread>:
   8c0fc:	b510      	push	{r4, lr}
   8c0fe:	460c      	mov	r4, r1
   8c100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c104:	f000 fb16 	bl	8c734 <_read_r>
   8c108:	2800      	cmp	r0, #0
   8c10a:	db03      	blt.n	8c114 <__sread+0x18>
   8c10c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8c10e:	4403      	add	r3, r0
   8c110:	6523      	str	r3, [r4, #80]	; 0x50
   8c112:	bd10      	pop	{r4, pc}
   8c114:	89a3      	ldrh	r3, [r4, #12]
   8c116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8c11a:	81a3      	strh	r3, [r4, #12]
   8c11c:	bd10      	pop	{r4, pc}
   8c11e:	bf00      	nop

0008c120 <__swrite>:
   8c120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c124:	460c      	mov	r4, r1
   8c126:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8c12a:	461f      	mov	r7, r3
   8c12c:	05cb      	lsls	r3, r1, #23
   8c12e:	4616      	mov	r6, r2
   8c130:	4605      	mov	r5, r0
   8c132:	d40b      	bmi.n	8c14c <__swrite+0x2c>
   8c134:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8c138:	81a1      	strh	r1, [r4, #12]
   8c13a:	463b      	mov	r3, r7
   8c13c:	4632      	mov	r2, r6
   8c13e:	4628      	mov	r0, r5
   8c140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8c148:	f000 b980 	b.w	8c44c <_write_r>
   8c14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c150:	2302      	movs	r3, #2
   8c152:	2200      	movs	r2, #0
   8c154:	f000 fad8 	bl	8c708 <_lseek_r>
   8c158:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8c15c:	e7ea      	b.n	8c134 <__swrite+0x14>
   8c15e:	bf00      	nop

0008c160 <__sseek>:
   8c160:	b510      	push	{r4, lr}
   8c162:	460c      	mov	r4, r1
   8c164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c168:	f000 face 	bl	8c708 <_lseek_r>
   8c16c:	89a3      	ldrh	r3, [r4, #12]
   8c16e:	1c42      	adds	r2, r0, #1
   8c170:	bf0e      	itee	eq
   8c172:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8c176:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8c17a:	6520      	strne	r0, [r4, #80]	; 0x50
   8c17c:	81a3      	strh	r3, [r4, #12]
   8c17e:	bd10      	pop	{r4, pc}

0008c180 <__sclose>:
   8c180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c184:	f000 ba0c 	b.w	8c5a0 <_close_r>

0008c188 <strlen>:
   8c188:	f020 0103 	bic.w	r1, r0, #3
   8c18c:	f010 0003 	ands.w	r0, r0, #3
   8c190:	f1c0 0000 	rsb	r0, r0, #0
   8c194:	f851 3b04 	ldr.w	r3, [r1], #4
   8c198:	f100 0c04 	add.w	ip, r0, #4
   8c19c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8c1a0:	f06f 0200 	mvn.w	r2, #0
   8c1a4:	bf1c      	itt	ne
   8c1a6:	fa22 f20c 	lsrne.w	r2, r2, ip
   8c1aa:	4313      	orrne	r3, r2
   8c1ac:	f04f 0c01 	mov.w	ip, #1
   8c1b0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8c1b4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8c1b8:	eba3 020c 	sub.w	r2, r3, ip
   8c1bc:	ea22 0203 	bic.w	r2, r2, r3
   8c1c0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8c1c4:	bf04      	itt	eq
   8c1c6:	f851 3b04 	ldreq.w	r3, [r1], #4
   8c1ca:	3004      	addeq	r0, #4
   8c1cc:	d0f4      	beq.n	8c1b8 <strlen+0x30>
   8c1ce:	f1c2 0100 	rsb	r1, r2, #0
   8c1d2:	ea02 0201 	and.w	r2, r2, r1
   8c1d6:	fab2 f282 	clz	r2, r2
   8c1da:	f1c2 021f 	rsb	r2, r2, #31
   8c1de:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8c1e2:	4770      	bx	lr

0008c1e4 <strncpy>:
   8c1e4:	b470      	push	{r4, r5, r6}
   8c1e6:	ea40 0401 	orr.w	r4, r0, r1
   8c1ea:	07a3      	lsls	r3, r4, #30
   8c1ec:	d122      	bne.n	8c234 <strncpy+0x50>
   8c1ee:	2a03      	cmp	r2, #3
   8c1f0:	d920      	bls.n	8c234 <strncpy+0x50>
   8c1f2:	460b      	mov	r3, r1
   8c1f4:	4604      	mov	r4, r0
   8c1f6:	4619      	mov	r1, r3
   8c1f8:	f853 6b04 	ldr.w	r6, [r3], #4
   8c1fc:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8c200:	ea25 0506 	bic.w	r5, r5, r6
   8c204:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8c208:	d115      	bne.n	8c236 <strncpy+0x52>
   8c20a:	3a04      	subs	r2, #4
   8c20c:	2a03      	cmp	r2, #3
   8c20e:	4619      	mov	r1, r3
   8c210:	f844 6b04 	str.w	r6, [r4], #4
   8c214:	d8ef      	bhi.n	8c1f6 <strncpy+0x12>
   8c216:	1e4d      	subs	r5, r1, #1
   8c218:	b152      	cbz	r2, 8c230 <strncpy+0x4c>
   8c21a:	4623      	mov	r3, r4
   8c21c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8c220:	1e56      	subs	r6, r2, #1
   8c222:	f803 1b01 	strb.w	r1, [r3], #1
   8c226:	b141      	cbz	r1, 8c23a <strncpy+0x56>
   8c228:	4632      	mov	r2, r6
   8c22a:	461c      	mov	r4, r3
   8c22c:	2a00      	cmp	r2, #0
   8c22e:	d1f4      	bne.n	8c21a <strncpy+0x36>
   8c230:	bc70      	pop	{r4, r5, r6}
   8c232:	4770      	bx	lr
   8c234:	4604      	mov	r4, r0
   8c236:	1e4d      	subs	r5, r1, #1
   8c238:	e7ee      	b.n	8c218 <strncpy+0x34>
   8c23a:	4422      	add	r2, r4
   8c23c:	2e00      	cmp	r6, #0
   8c23e:	d0f7      	beq.n	8c230 <strncpy+0x4c>
   8c240:	f803 1b01 	strb.w	r1, [r3], #1
   8c244:	4293      	cmp	r3, r2
   8c246:	d1fb      	bne.n	8c240 <strncpy+0x5c>
   8c248:	bc70      	pop	{r4, r5, r6}
   8c24a:	4770      	bx	lr

0008c24c <__ssprint_r>:
   8c24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c250:	6893      	ldr	r3, [r2, #8]
   8c252:	4691      	mov	r9, r2
   8c254:	b083      	sub	sp, #12
   8c256:	2b00      	cmp	r3, #0
   8c258:	d06d      	beq.n	8c336 <__ssprint_r+0xea>
   8c25a:	6817      	ldr	r7, [r2, #0]
   8c25c:	4680      	mov	r8, r0
   8c25e:	460c      	mov	r4, r1
   8c260:	6808      	ldr	r0, [r1, #0]
   8c262:	688d      	ldr	r5, [r1, #8]
   8c264:	3708      	adds	r7, #8
   8c266:	e043      	b.n	8c2f0 <__ssprint_r+0xa4>
   8c268:	89a3      	ldrh	r3, [r4, #12]
   8c26a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8c26e:	d02e      	beq.n	8c2ce <__ssprint_r+0x82>
   8c270:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8c274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8c278:	eba0 0a01 	sub.w	sl, r0, r1
   8c27c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8c280:	eb0a 0006 	add.w	r0, sl, r6
   8c284:	106d      	asrs	r5, r5, #1
   8c286:	3001      	adds	r0, #1
   8c288:	42a8      	cmp	r0, r5
   8c28a:	462a      	mov	r2, r5
   8c28c:	bf84      	itt	hi
   8c28e:	4605      	movhi	r5, r0
   8c290:	462a      	movhi	r2, r5
   8c292:	055b      	lsls	r3, r3, #21
   8c294:	d536      	bpl.n	8c304 <__ssprint_r+0xb8>
   8c296:	4611      	mov	r1, r2
   8c298:	4640      	mov	r0, r8
   8c29a:	f7fe fdff 	bl	8ae9c <_malloc_r>
   8c29e:	2800      	cmp	r0, #0
   8c2a0:	d03a      	beq.n	8c318 <__ssprint_r+0xcc>
   8c2a2:	4652      	mov	r2, sl
   8c2a4:	6921      	ldr	r1, [r4, #16]
   8c2a6:	9001      	str	r0, [sp, #4]
   8c2a8:	f7fa faa4 	bl	867f4 <memcpy>
   8c2ac:	89a2      	ldrh	r2, [r4, #12]
   8c2ae:	9b01      	ldr	r3, [sp, #4]
   8c2b0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8c2b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8c2b8:	81a2      	strh	r2, [r4, #12]
   8c2ba:	eba5 020a 	sub.w	r2, r5, sl
   8c2be:	eb03 000a 	add.w	r0, r3, sl
   8c2c2:	6165      	str	r5, [r4, #20]
   8c2c4:	46b2      	mov	sl, r6
   8c2c6:	4635      	mov	r5, r6
   8c2c8:	6123      	str	r3, [r4, #16]
   8c2ca:	6020      	str	r0, [r4, #0]
   8c2cc:	60a2      	str	r2, [r4, #8]
   8c2ce:	4659      	mov	r1, fp
   8c2d0:	4652      	mov	r2, sl
   8c2d2:	f7ff f8e7 	bl	8b4a4 <memmove>
   8c2d6:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8c2da:	68a1      	ldr	r1, [r4, #8]
   8c2dc:	6820      	ldr	r0, [r4, #0]
   8c2de:	1b4d      	subs	r5, r1, r5
   8c2e0:	4450      	add	r0, sl
   8c2e2:	1b9e      	subs	r6, r3, r6
   8c2e4:	60a5      	str	r5, [r4, #8]
   8c2e6:	6020      	str	r0, [r4, #0]
   8c2e8:	f8c9 6008 	str.w	r6, [r9, #8]
   8c2ec:	b31e      	cbz	r6, 8c336 <__ssprint_r+0xea>
   8c2ee:	3708      	adds	r7, #8
   8c2f0:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8c2f4:	2e00      	cmp	r6, #0
   8c2f6:	d0fa      	beq.n	8c2ee <__ssprint_r+0xa2>
   8c2f8:	42b5      	cmp	r5, r6
   8c2fa:	46aa      	mov	sl, r5
   8c2fc:	d9b4      	bls.n	8c268 <__ssprint_r+0x1c>
   8c2fe:	4635      	mov	r5, r6
   8c300:	46b2      	mov	sl, r6
   8c302:	e7e4      	b.n	8c2ce <__ssprint_r+0x82>
   8c304:	4640      	mov	r0, r8
   8c306:	f7ff fcbf 	bl	8bc88 <_realloc_r>
   8c30a:	4603      	mov	r3, r0
   8c30c:	2800      	cmp	r0, #0
   8c30e:	d1d4      	bne.n	8c2ba <__ssprint_r+0x6e>
   8c310:	4640      	mov	r0, r8
   8c312:	6921      	ldr	r1, [r4, #16]
   8c314:	f7fe fa98 	bl	8a848 <_free_r>
   8c318:	230c      	movs	r3, #12
   8c31a:	2200      	movs	r2, #0
   8c31c:	f04f 30ff 	mov.w	r0, #4294967295
   8c320:	f8c8 3000 	str.w	r3, [r8]
   8c324:	89a3      	ldrh	r3, [r4, #12]
   8c326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c32a:	81a3      	strh	r3, [r4, #12]
   8c32c:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8c330:	b003      	add	sp, #12
   8c332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c336:	2000      	movs	r0, #0
   8c338:	f8c9 0004 	str.w	r0, [r9, #4]
   8c33c:	b003      	add	sp, #12
   8c33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c342:	bf00      	nop

0008c344 <__swbuf_r>:
   8c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c346:	460d      	mov	r5, r1
   8c348:	4614      	mov	r4, r2
   8c34a:	4606      	mov	r6, r0
   8c34c:	b110      	cbz	r0, 8c354 <__swbuf_r+0x10>
   8c34e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c350:	2b00      	cmp	r3, #0
   8c352:	d043      	beq.n	8c3dc <__swbuf_r+0x98>
   8c354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c358:	69a3      	ldr	r3, [r4, #24]
   8c35a:	0717      	lsls	r7, r2, #28
   8c35c:	60a3      	str	r3, [r4, #8]
   8c35e:	b290      	uxth	r0, r2
   8c360:	d51b      	bpl.n	8c39a <__swbuf_r+0x56>
   8c362:	6923      	ldr	r3, [r4, #16]
   8c364:	b1cb      	cbz	r3, 8c39a <__swbuf_r+0x56>
   8c366:	b2ed      	uxtb	r5, r5
   8c368:	0481      	lsls	r1, r0, #18
   8c36a:	462f      	mov	r7, r5
   8c36c:	d522      	bpl.n	8c3b4 <__swbuf_r+0x70>
   8c36e:	6822      	ldr	r2, [r4, #0]
   8c370:	6961      	ldr	r1, [r4, #20]
   8c372:	1ad3      	subs	r3, r2, r3
   8c374:	4299      	cmp	r1, r3
   8c376:	dd29      	ble.n	8c3cc <__swbuf_r+0x88>
   8c378:	3301      	adds	r3, #1
   8c37a:	68a1      	ldr	r1, [r4, #8]
   8c37c:	1c50      	adds	r0, r2, #1
   8c37e:	3901      	subs	r1, #1
   8c380:	60a1      	str	r1, [r4, #8]
   8c382:	6020      	str	r0, [r4, #0]
   8c384:	7015      	strb	r5, [r2, #0]
   8c386:	6962      	ldr	r2, [r4, #20]
   8c388:	429a      	cmp	r2, r3
   8c38a:	d02a      	beq.n	8c3e2 <__swbuf_r+0x9e>
   8c38c:	89a3      	ldrh	r3, [r4, #12]
   8c38e:	07db      	lsls	r3, r3, #31
   8c390:	d501      	bpl.n	8c396 <__swbuf_r+0x52>
   8c392:	2d0a      	cmp	r5, #10
   8c394:	d025      	beq.n	8c3e2 <__swbuf_r+0x9e>
   8c396:	4638      	mov	r0, r7
   8c398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c39a:	4621      	mov	r1, r4
   8c39c:	4630      	mov	r0, r6
   8c39e:	f7fc ffcf 	bl	89340 <__swsetup_r>
   8c3a2:	bb20      	cbnz	r0, 8c3ee <__swbuf_r+0xaa>
   8c3a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c3a8:	b2ed      	uxtb	r5, r5
   8c3aa:	b290      	uxth	r0, r2
   8c3ac:	0481      	lsls	r1, r0, #18
   8c3ae:	462f      	mov	r7, r5
   8c3b0:	6923      	ldr	r3, [r4, #16]
   8c3b2:	d4dc      	bmi.n	8c36e <__swbuf_r+0x2a>
   8c3b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8c3b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8c3ba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8c3be:	81a2      	strh	r2, [r4, #12]
   8c3c0:	6822      	ldr	r2, [r4, #0]
   8c3c2:	6661      	str	r1, [r4, #100]	; 0x64
   8c3c4:	6961      	ldr	r1, [r4, #20]
   8c3c6:	1ad3      	subs	r3, r2, r3
   8c3c8:	4299      	cmp	r1, r3
   8c3ca:	dcd5      	bgt.n	8c378 <__swbuf_r+0x34>
   8c3cc:	4621      	mov	r1, r4
   8c3ce:	4630      	mov	r0, r6
   8c3d0:	f7fe f8ba 	bl	8a548 <_fflush_r>
   8c3d4:	b958      	cbnz	r0, 8c3ee <__swbuf_r+0xaa>
   8c3d6:	2301      	movs	r3, #1
   8c3d8:	6822      	ldr	r2, [r4, #0]
   8c3da:	e7ce      	b.n	8c37a <__swbuf_r+0x36>
   8c3dc:	f7fe f910 	bl	8a600 <__sinit>
   8c3e0:	e7b8      	b.n	8c354 <__swbuf_r+0x10>
   8c3e2:	4621      	mov	r1, r4
   8c3e4:	4630      	mov	r0, r6
   8c3e6:	f7fe f8af 	bl	8a548 <_fflush_r>
   8c3ea:	2800      	cmp	r0, #0
   8c3ec:	d0d3      	beq.n	8c396 <__swbuf_r+0x52>
   8c3ee:	f04f 37ff 	mov.w	r7, #4294967295
   8c3f2:	e7d0      	b.n	8c396 <__swbuf_r+0x52>

0008c3f4 <_wcrtomb_r>:
   8c3f4:	b570      	push	{r4, r5, r6, lr}
   8c3f6:	4606      	mov	r6, r0
   8c3f8:	461d      	mov	r5, r3
   8c3fa:	b084      	sub	sp, #16
   8c3fc:	b139      	cbz	r1, 8c40e <_wcrtomb_r+0x1a>
   8c3fe:	4c0b      	ldr	r4, [pc, #44]	; (8c42c <_wcrtomb_r+0x38>)
   8c400:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8c404:	47a0      	blx	r4
   8c406:	1c43      	adds	r3, r0, #1
   8c408:	d00a      	beq.n	8c420 <_wcrtomb_r+0x2c>
   8c40a:	b004      	add	sp, #16
   8c40c:	bd70      	pop	{r4, r5, r6, pc}
   8c40e:	460c      	mov	r4, r1
   8c410:	4906      	ldr	r1, [pc, #24]	; (8c42c <_wcrtomb_r+0x38>)
   8c412:	4622      	mov	r2, r4
   8c414:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8c418:	a901      	add	r1, sp, #4
   8c41a:	47a0      	blx	r4
   8c41c:	1c43      	adds	r3, r0, #1
   8c41e:	d1f4      	bne.n	8c40a <_wcrtomb_r+0x16>
   8c420:	2200      	movs	r2, #0
   8c422:	238a      	movs	r3, #138	; 0x8a
   8c424:	602a      	str	r2, [r5, #0]
   8c426:	6033      	str	r3, [r6, #0]
   8c428:	b004      	add	sp, #16
   8c42a:	bd70      	pop	{r4, r5, r6, pc}
   8c42c:	20000874 	.word	0x20000874

0008c430 <__ascii_wctomb>:
   8c430:	4603      	mov	r3, r0
   8c432:	b149      	cbz	r1, 8c448 <__ascii_wctomb+0x18>
   8c434:	2aff      	cmp	r2, #255	; 0xff
   8c436:	d802      	bhi.n	8c43e <__ascii_wctomb+0xe>
   8c438:	2001      	movs	r0, #1
   8c43a:	700a      	strb	r2, [r1, #0]
   8c43c:	4770      	bx	lr
   8c43e:	228a      	movs	r2, #138	; 0x8a
   8c440:	f04f 30ff 	mov.w	r0, #4294967295
   8c444:	601a      	str	r2, [r3, #0]
   8c446:	4770      	bx	lr
   8c448:	4608      	mov	r0, r1
   8c44a:	4770      	bx	lr

0008c44c <_write_r>:
   8c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c44e:	460f      	mov	r7, r1
   8c450:	2600      	movs	r6, #0
   8c452:	4d08      	ldr	r5, [pc, #32]	; (8c474 <_write_r+0x28>)
   8c454:	4611      	mov	r1, r2
   8c456:	4604      	mov	r4, r0
   8c458:	461a      	mov	r2, r3
   8c45a:	4638      	mov	r0, r7
   8c45c:	602e      	str	r6, [r5, #0]
   8c45e:	f7fa f95b 	bl	86718 <_write>
   8c462:	1c43      	adds	r3, r0, #1
   8c464:	d000      	beq.n	8c468 <_write_r+0x1c>
   8c466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c468:	682b      	ldr	r3, [r5, #0]
   8c46a:	2b00      	cmp	r3, #0
   8c46c:	d0fb      	beq.n	8c466 <_write_r+0x1a>
   8c46e:	6023      	str	r3, [r4, #0]
   8c470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c472:	bf00      	nop
   8c474:	2000186c 	.word	0x2000186c

0008c478 <__register_exitproc>:
   8c478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c47c:	f8df a080 	ldr.w	sl, [pc, #128]	; 8c500 <__register_exitproc+0x88>
   8c480:	4606      	mov	r6, r0
   8c482:	f8da 0000 	ldr.w	r0, [sl]
   8c486:	4698      	mov	r8, r3
   8c488:	460f      	mov	r7, r1
   8c48a:	4691      	mov	r9, r2
   8c48c:	f7fe fc8a 	bl	8ada4 <__retarget_lock_acquire_recursive>
   8c490:	4b1a      	ldr	r3, [pc, #104]	; (8c4fc <__register_exitproc+0x84>)
   8c492:	681b      	ldr	r3, [r3, #0]
   8c494:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8c498:	b324      	cbz	r4, 8c4e4 <__register_exitproc+0x6c>
   8c49a:	6865      	ldr	r5, [r4, #4]
   8c49c:	2d1f      	cmp	r5, #31
   8c49e:	dc26      	bgt.n	8c4ee <__register_exitproc+0x76>
   8c4a0:	b95e      	cbnz	r6, 8c4ba <__register_exitproc+0x42>
   8c4a2:	1c6b      	adds	r3, r5, #1
   8c4a4:	3502      	adds	r5, #2
   8c4a6:	f8da 0000 	ldr.w	r0, [sl]
   8c4aa:	6063      	str	r3, [r4, #4]
   8c4ac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8c4b0:	f7fe fc7a 	bl	8ada8 <__retarget_lock_release_recursive>
   8c4b4:	2000      	movs	r0, #0
   8c4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c4ba:	2301      	movs	r3, #1
   8c4bc:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8c4c0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8c4c4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8c4c8:	40ab      	lsls	r3, r5
   8c4ca:	431a      	orrs	r2, r3
   8c4cc:	2e02      	cmp	r6, #2
   8c4ce:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8c4d2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8c4d6:	d1e4      	bne.n	8c4a2 <__register_exitproc+0x2a>
   8c4d8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8c4dc:	4313      	orrs	r3, r2
   8c4de:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8c4e2:	e7de      	b.n	8c4a2 <__register_exitproc+0x2a>
   8c4e4:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8c4e8:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8c4ec:	e7d5      	b.n	8c49a <__register_exitproc+0x22>
   8c4ee:	f8da 0000 	ldr.w	r0, [sl]
   8c4f2:	f7fe fc59 	bl	8ada8 <__retarget_lock_release_recursive>
   8c4f6:	f04f 30ff 	mov.w	r0, #4294967295
   8c4fa:	e7dc      	b.n	8c4b6 <__register_exitproc+0x3e>
   8c4fc:	0008d4e8 	.word	0x0008d4e8
   8c500:	20000870 	.word	0x20000870

0008c504 <__assert_func>:
   8c504:	4614      	mov	r4, r2
   8c506:	b500      	push	{lr}
   8c508:	4d09      	ldr	r5, [pc, #36]	; (8c530 <__assert_func+0x2c>)
   8c50a:	461a      	mov	r2, r3
   8c50c:	4603      	mov	r3, r0
   8c50e:	6828      	ldr	r0, [r5, #0]
   8c510:	b085      	sub	sp, #20
   8c512:	68c0      	ldr	r0, [r0, #12]
   8c514:	b144      	cbz	r4, 8c528 <__assert_func+0x24>
   8c516:	4d07      	ldr	r5, [pc, #28]	; (8c534 <__assert_func+0x30>)
   8c518:	9100      	str	r1, [sp, #0]
   8c51a:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8c51e:	4906      	ldr	r1, [pc, #24]	; (8c538 <__assert_func+0x34>)
   8c520:	f000 f8b6 	bl	8c690 <fiprintf>
   8c524:	f000 f91c 	bl	8c760 <abort>
   8c528:	4d04      	ldr	r5, [pc, #16]	; (8c53c <__assert_func+0x38>)
   8c52a:	462c      	mov	r4, r5
   8c52c:	e7f4      	b.n	8c518 <__assert_func+0x14>
   8c52e:	bf00      	nop
   8c530:	20000440 	.word	0x20000440
   8c534:	0008d79c 	.word	0x0008d79c
   8c538:	0008d7ac 	.word	0x0008d7ac
   8c53c:	0008d7a8 	.word	0x0008d7a8

0008c540 <_calloc_r>:
   8c540:	b510      	push	{r4, lr}
   8c542:	fb02 f101 	mul.w	r1, r2, r1
   8c546:	f7fe fca9 	bl	8ae9c <_malloc_r>
   8c54a:	4604      	mov	r4, r0
   8c54c:	b168      	cbz	r0, 8c56a <_calloc_r+0x2a>
   8c54e:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8c552:	f022 0203 	bic.w	r2, r2, #3
   8c556:	3a04      	subs	r2, #4
   8c558:	2a24      	cmp	r2, #36	; 0x24
   8c55a:	d818      	bhi.n	8c58e <_calloc_r+0x4e>
   8c55c:	2a13      	cmp	r2, #19
   8c55e:	d806      	bhi.n	8c56e <_calloc_r+0x2e>
   8c560:	4602      	mov	r2, r0
   8c562:	2300      	movs	r3, #0
   8c564:	e9c2 3300 	strd	r3, r3, [r2]
   8c568:	6093      	str	r3, [r2, #8]
   8c56a:	4620      	mov	r0, r4
   8c56c:	bd10      	pop	{r4, pc}
   8c56e:	2300      	movs	r3, #0
   8c570:	2a1b      	cmp	r2, #27
   8c572:	e9c0 3300 	strd	r3, r3, [r0]
   8c576:	d90f      	bls.n	8c598 <_calloc_r+0x58>
   8c578:	2a24      	cmp	r2, #36	; 0x24
   8c57a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8c57e:	bf0a      	itet	eq
   8c580:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8c584:	f100 0210 	addne.w	r2, r0, #16
   8c588:	f100 0218 	addeq.w	r2, r0, #24
   8c58c:	e7e9      	b.n	8c562 <_calloc_r+0x22>
   8c58e:	2100      	movs	r1, #0
   8c590:	f7fa f9a6 	bl	868e0 <memset>
   8c594:	4620      	mov	r0, r4
   8c596:	bd10      	pop	{r4, pc}
   8c598:	f100 0208 	add.w	r2, r0, #8
   8c59c:	e7e1      	b.n	8c562 <_calloc_r+0x22>
   8c59e:	bf00      	nop

0008c5a0 <_close_r>:
   8c5a0:	2200      	movs	r2, #0
   8c5a2:	b538      	push	{r3, r4, r5, lr}
   8c5a4:	4d06      	ldr	r5, [pc, #24]	; (8c5c0 <_close_r+0x20>)
   8c5a6:	4604      	mov	r4, r0
   8c5a8:	4608      	mov	r0, r1
   8c5aa:	602a      	str	r2, [r5, #0]
   8c5ac:	f7f6 fde6 	bl	8317c <_close>
   8c5b0:	1c43      	adds	r3, r0, #1
   8c5b2:	d000      	beq.n	8c5b6 <_close_r+0x16>
   8c5b4:	bd38      	pop	{r3, r4, r5, pc}
   8c5b6:	682b      	ldr	r3, [r5, #0]
   8c5b8:	2b00      	cmp	r3, #0
   8c5ba:	d0fb      	beq.n	8c5b4 <_close_r+0x14>
   8c5bc:	6023      	str	r3, [r4, #0]
   8c5be:	bd38      	pop	{r3, r4, r5, pc}
   8c5c0:	2000186c 	.word	0x2000186c

0008c5c4 <_fclose_r>:
   8c5c4:	b570      	push	{r4, r5, r6, lr}
   8c5c6:	2900      	cmp	r1, #0
   8c5c8:	d04b      	beq.n	8c662 <_fclose_r+0x9e>
   8c5ca:	460c      	mov	r4, r1
   8c5cc:	4605      	mov	r5, r0
   8c5ce:	b110      	cbz	r0, 8c5d6 <_fclose_r+0x12>
   8c5d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c5d2:	2b00      	cmp	r3, #0
   8c5d4:	d048      	beq.n	8c668 <_fclose_r+0xa4>
   8c5d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c5d8:	07d8      	lsls	r0, r3, #31
   8c5da:	d534      	bpl.n	8c646 <_fclose_r+0x82>
   8c5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c5e0:	2b00      	cmp	r3, #0
   8c5e2:	d03e      	beq.n	8c662 <_fclose_r+0x9e>
   8c5e4:	4621      	mov	r1, r4
   8c5e6:	4628      	mov	r0, r5
   8c5e8:	f7fd ff16 	bl	8a418 <__sflush_r>
   8c5ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8c5ee:	4606      	mov	r6, r0
   8c5f0:	b133      	cbz	r3, 8c600 <_fclose_r+0x3c>
   8c5f2:	4628      	mov	r0, r5
   8c5f4:	69e1      	ldr	r1, [r4, #28]
   8c5f6:	4798      	blx	r3
   8c5f8:	2800      	cmp	r0, #0
   8c5fa:	bfb8      	it	lt
   8c5fc:	f04f 36ff 	movlt.w	r6, #4294967295
   8c600:	89a3      	ldrh	r3, [r4, #12]
   8c602:	061a      	lsls	r2, r3, #24
   8c604:	d43b      	bmi.n	8c67e <_fclose_r+0xba>
   8c606:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8c608:	b141      	cbz	r1, 8c61c <_fclose_r+0x58>
   8c60a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8c60e:	4299      	cmp	r1, r3
   8c610:	d002      	beq.n	8c618 <_fclose_r+0x54>
   8c612:	4628      	mov	r0, r5
   8c614:	f7fe f918 	bl	8a848 <_free_r>
   8c618:	2300      	movs	r3, #0
   8c61a:	6323      	str	r3, [r4, #48]	; 0x30
   8c61c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8c61e:	b121      	cbz	r1, 8c62a <_fclose_r+0x66>
   8c620:	4628      	mov	r0, r5
   8c622:	f7fe f911 	bl	8a848 <_free_r>
   8c626:	2300      	movs	r3, #0
   8c628:	6463      	str	r3, [r4, #68]	; 0x44
   8c62a:	f7fe f817 	bl	8a65c <__sfp_lock_acquire>
   8c62e:	2200      	movs	r2, #0
   8c630:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c632:	81a2      	strh	r2, [r4, #12]
   8c634:	07db      	lsls	r3, r3, #31
   8c636:	d527      	bpl.n	8c688 <_fclose_r+0xc4>
   8c638:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c63a:	f7fe fbb1 	bl	8ada0 <__retarget_lock_close_recursive>
   8c63e:	f7fe f813 	bl	8a668 <__sfp_lock_release>
   8c642:	4630      	mov	r0, r6
   8c644:	bd70      	pop	{r4, r5, r6, pc}
   8c646:	89a3      	ldrh	r3, [r4, #12]
   8c648:	0599      	lsls	r1, r3, #22
   8c64a:	d4cb      	bmi.n	8c5e4 <_fclose_r+0x20>
   8c64c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c64e:	f7fe fba9 	bl	8ada4 <__retarget_lock_acquire_recursive>
   8c652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c656:	2b00      	cmp	r3, #0
   8c658:	d1c4      	bne.n	8c5e4 <_fclose_r+0x20>
   8c65a:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8c65c:	f016 0601 	ands.w	r6, r6, #1
   8c660:	d008      	beq.n	8c674 <_fclose_r+0xb0>
   8c662:	2600      	movs	r6, #0
   8c664:	4630      	mov	r0, r6
   8c666:	bd70      	pop	{r4, r5, r6, pc}
   8c668:	f7fd ffca 	bl	8a600 <__sinit>
   8c66c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c66e:	07d8      	lsls	r0, r3, #31
   8c670:	d4b4      	bmi.n	8c5dc <_fclose_r+0x18>
   8c672:	e7e8      	b.n	8c646 <_fclose_r+0x82>
   8c674:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c676:	f7fe fb97 	bl	8ada8 <__retarget_lock_release_recursive>
   8c67a:	4630      	mov	r0, r6
   8c67c:	bd70      	pop	{r4, r5, r6, pc}
   8c67e:	4628      	mov	r0, r5
   8c680:	6921      	ldr	r1, [r4, #16]
   8c682:	f7fe f8e1 	bl	8a848 <_free_r>
   8c686:	e7be      	b.n	8c606 <_fclose_r+0x42>
   8c688:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c68a:	f7fe fb8d 	bl	8ada8 <__retarget_lock_release_recursive>
   8c68e:	e7d3      	b.n	8c638 <_fclose_r+0x74>

0008c690 <fiprintf>:
   8c690:	b40e      	push	{r1, r2, r3}
   8c692:	b510      	push	{r4, lr}
   8c694:	b083      	sub	sp, #12
   8c696:	ab05      	add	r3, sp, #20
   8c698:	4c06      	ldr	r4, [pc, #24]	; (8c6b4 <fiprintf+0x24>)
   8c69a:	f853 2b04 	ldr.w	r2, [r3], #4
   8c69e:	4601      	mov	r1, r0
   8c6a0:	6820      	ldr	r0, [r4, #0]
   8c6a2:	9301      	str	r3, [sp, #4]
   8c6a4:	f7fb ff72 	bl	8858c <_vfiprintf_r>
   8c6a8:	b003      	add	sp, #12
   8c6aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8c6ae:	b003      	add	sp, #12
   8c6b0:	4770      	bx	lr
   8c6b2:	bf00      	nop
   8c6b4:	20000440 	.word	0x20000440

0008c6b8 <_fstat_r>:
   8c6b8:	b570      	push	{r4, r5, r6, lr}
   8c6ba:	460c      	mov	r4, r1
   8c6bc:	4603      	mov	r3, r0
   8c6be:	2600      	movs	r6, #0
   8c6c0:	4d07      	ldr	r5, [pc, #28]	; (8c6e0 <_fstat_r+0x28>)
   8c6c2:	4620      	mov	r0, r4
   8c6c4:	4611      	mov	r1, r2
   8c6c6:	461c      	mov	r4, r3
   8c6c8:	602e      	str	r6, [r5, #0]
   8c6ca:	f7f6 fd62 	bl	83192 <_fstat>
   8c6ce:	1c43      	adds	r3, r0, #1
   8c6d0:	d000      	beq.n	8c6d4 <_fstat_r+0x1c>
   8c6d2:	bd70      	pop	{r4, r5, r6, pc}
   8c6d4:	682b      	ldr	r3, [r5, #0]
   8c6d6:	2b00      	cmp	r3, #0
   8c6d8:	d0fb      	beq.n	8c6d2 <_fstat_r+0x1a>
   8c6da:	6023      	str	r3, [r4, #0]
   8c6dc:	bd70      	pop	{r4, r5, r6, pc}
   8c6de:	bf00      	nop
   8c6e0:	2000186c 	.word	0x2000186c

0008c6e4 <_isatty_r>:
   8c6e4:	2200      	movs	r2, #0
   8c6e6:	b538      	push	{r3, r4, r5, lr}
   8c6e8:	4d06      	ldr	r5, [pc, #24]	; (8c704 <_isatty_r+0x20>)
   8c6ea:	4604      	mov	r4, r0
   8c6ec:	4608      	mov	r0, r1
   8c6ee:	602a      	str	r2, [r5, #0]
   8c6f0:	f7f6 fd5e 	bl	831b0 <_isatty>
   8c6f4:	1c43      	adds	r3, r0, #1
   8c6f6:	d000      	beq.n	8c6fa <_isatty_r+0x16>
   8c6f8:	bd38      	pop	{r3, r4, r5, pc}
   8c6fa:	682b      	ldr	r3, [r5, #0]
   8c6fc:	2b00      	cmp	r3, #0
   8c6fe:	d0fb      	beq.n	8c6f8 <_isatty_r+0x14>
   8c700:	6023      	str	r3, [r4, #0]
   8c702:	bd38      	pop	{r3, r4, r5, pc}
   8c704:	2000186c 	.word	0x2000186c

0008c708 <_lseek_r>:
   8c708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c70a:	460f      	mov	r7, r1
   8c70c:	2600      	movs	r6, #0
   8c70e:	4d08      	ldr	r5, [pc, #32]	; (8c730 <_lseek_r+0x28>)
   8c710:	4611      	mov	r1, r2
   8c712:	4604      	mov	r4, r0
   8c714:	461a      	mov	r2, r3
   8c716:	4638      	mov	r0, r7
   8c718:	602e      	str	r6, [r5, #0]
   8c71a:	f7f6 fd53 	bl	831c4 <_lseek>
   8c71e:	1c43      	adds	r3, r0, #1
   8c720:	d000      	beq.n	8c724 <_lseek_r+0x1c>
   8c722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c724:	682b      	ldr	r3, [r5, #0]
   8c726:	2b00      	cmp	r3, #0
   8c728:	d0fb      	beq.n	8c722 <_lseek_r+0x1a>
   8c72a:	6023      	str	r3, [r4, #0]
   8c72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c72e:	bf00      	nop
   8c730:	2000186c 	.word	0x2000186c

0008c734 <_read_r>:
   8c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c736:	460f      	mov	r7, r1
   8c738:	2600      	movs	r6, #0
   8c73a:	4d08      	ldr	r5, [pc, #32]	; (8c75c <_read_r+0x28>)
   8c73c:	4611      	mov	r1, r2
   8c73e:	4604      	mov	r4, r0
   8c740:	461a      	mov	r2, r3
   8c742:	4638      	mov	r0, r7
   8c744:	602e      	str	r6, [r5, #0]
   8c746:	f7f6 f9ef 	bl	82b28 <_read>
   8c74a:	1c43      	adds	r3, r0, #1
   8c74c:	d000      	beq.n	8c750 <_read_r+0x1c>
   8c74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c750:	682b      	ldr	r3, [r5, #0]
   8c752:	2b00      	cmp	r3, #0
   8c754:	d0fb      	beq.n	8c74e <_read_r+0x1a>
   8c756:	6023      	str	r3, [r4, #0]
   8c758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c75a:	bf00      	nop
   8c75c:	2000186c 	.word	0x2000186c

0008c760 <abort>:
   8c760:	2006      	movs	r0, #6
   8c762:	b508      	push	{r3, lr}
   8c764:	f000 f830 	bl	8c7c8 <raise>
   8c768:	2001      	movs	r0, #1
   8c76a:	f7f6 fd37 	bl	831dc <_exit>
   8c76e:	bf00      	nop

0008c770 <_raise_r>:
   8c770:	291f      	cmp	r1, #31
   8c772:	b538      	push	{r3, r4, r5, lr}
   8c774:	4605      	mov	r5, r0
   8c776:	d821      	bhi.n	8c7bc <_raise_r+0x4c>
   8c778:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8c77c:	460c      	mov	r4, r1
   8c77e:	b16a      	cbz	r2, 8c79c <_raise_r+0x2c>
   8c780:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8c784:	b153      	cbz	r3, 8c79c <_raise_r+0x2c>
   8c786:	2b01      	cmp	r3, #1
   8c788:	d016      	beq.n	8c7b8 <_raise_r+0x48>
   8c78a:	1c59      	adds	r1, r3, #1
   8c78c:	d010      	beq.n	8c7b0 <_raise_r+0x40>
   8c78e:	2500      	movs	r5, #0
   8c790:	4620      	mov	r0, r4
   8c792:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8c796:	4798      	blx	r3
   8c798:	4628      	mov	r0, r5
   8c79a:	bd38      	pop	{r3, r4, r5, pc}
   8c79c:	4628      	mov	r0, r5
   8c79e:	f000 f831 	bl	8c804 <_getpid_r>
   8c7a2:	4622      	mov	r2, r4
   8c7a4:	4601      	mov	r1, r0
   8c7a6:	4628      	mov	r0, r5
   8c7a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8c7ac:	f000 b814 	b.w	8c7d8 <_kill_r>
   8c7b0:	2316      	movs	r3, #22
   8c7b2:	2001      	movs	r0, #1
   8c7b4:	602b      	str	r3, [r5, #0]
   8c7b6:	bd38      	pop	{r3, r4, r5, pc}
   8c7b8:	2000      	movs	r0, #0
   8c7ba:	bd38      	pop	{r3, r4, r5, pc}
   8c7bc:	2316      	movs	r3, #22
   8c7be:	f04f 30ff 	mov.w	r0, #4294967295
   8c7c2:	602b      	str	r3, [r5, #0]
   8c7c4:	bd38      	pop	{r3, r4, r5, pc}
   8c7c6:	bf00      	nop

0008c7c8 <raise>:
   8c7c8:	4b02      	ldr	r3, [pc, #8]	; (8c7d4 <raise+0xc>)
   8c7ca:	4601      	mov	r1, r0
   8c7cc:	6818      	ldr	r0, [r3, #0]
   8c7ce:	f7ff bfcf 	b.w	8c770 <_raise_r>
   8c7d2:	bf00      	nop
   8c7d4:	20000440 	.word	0x20000440

0008c7d8 <_kill_r>:
   8c7d8:	b570      	push	{r4, r5, r6, lr}
   8c7da:	460c      	mov	r4, r1
   8c7dc:	4603      	mov	r3, r0
   8c7de:	2600      	movs	r6, #0
   8c7e0:	4d07      	ldr	r5, [pc, #28]	; (8c800 <_kill_r+0x28>)
   8c7e2:	4620      	mov	r0, r4
   8c7e4:	4611      	mov	r1, r2
   8c7e6:	461c      	mov	r4, r3
   8c7e8:	602e      	str	r6, [r5, #0]
   8c7ea:	f7f6 fd05 	bl	831f8 <_kill>
   8c7ee:	1c43      	adds	r3, r0, #1
   8c7f0:	d000      	beq.n	8c7f4 <_kill_r+0x1c>
   8c7f2:	bd70      	pop	{r4, r5, r6, pc}
   8c7f4:	682b      	ldr	r3, [r5, #0]
   8c7f6:	2b00      	cmp	r3, #0
   8c7f8:	d0fb      	beq.n	8c7f2 <_kill_r+0x1a>
   8c7fa:	6023      	str	r3, [r4, #0]
   8c7fc:	bd70      	pop	{r4, r5, r6, pc}
   8c7fe:	bf00      	nop
   8c800:	2000186c 	.word	0x2000186c

0008c804 <_getpid_r>:
   8c804:	f7f6 bd02 	b.w	8320c <_getpid>

0008c808 <__aeabi_drsub>:
   8c808:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8c80c:	e002      	b.n	8c814 <__adddf3>
   8c80e:	bf00      	nop

0008c810 <__aeabi_dsub>:
   8c810:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008c814 <__adddf3>:
   8c814:	b530      	push	{r4, r5, lr}
   8c816:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8c81a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8c81e:	ea94 0f05 	teq	r4, r5
   8c822:	bf08      	it	eq
   8c824:	ea90 0f02 	teqeq	r0, r2
   8c828:	bf1f      	itttt	ne
   8c82a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8c82e:	ea55 0c02 	orrsne.w	ip, r5, r2
   8c832:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8c836:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c83a:	f000 80e2 	beq.w	8ca02 <__adddf3+0x1ee>
   8c83e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8c842:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8c846:	bfb8      	it	lt
   8c848:	426d      	neglt	r5, r5
   8c84a:	dd0c      	ble.n	8c866 <__adddf3+0x52>
   8c84c:	442c      	add	r4, r5
   8c84e:	ea80 0202 	eor.w	r2, r0, r2
   8c852:	ea81 0303 	eor.w	r3, r1, r3
   8c856:	ea82 0000 	eor.w	r0, r2, r0
   8c85a:	ea83 0101 	eor.w	r1, r3, r1
   8c85e:	ea80 0202 	eor.w	r2, r0, r2
   8c862:	ea81 0303 	eor.w	r3, r1, r3
   8c866:	2d36      	cmp	r5, #54	; 0x36
   8c868:	bf88      	it	hi
   8c86a:	bd30      	pophi	{r4, r5, pc}
   8c86c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c870:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c874:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8c878:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8c87c:	d002      	beq.n	8c884 <__adddf3+0x70>
   8c87e:	4240      	negs	r0, r0
   8c880:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c884:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8c888:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c88c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8c890:	d002      	beq.n	8c898 <__adddf3+0x84>
   8c892:	4252      	negs	r2, r2
   8c894:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c898:	ea94 0f05 	teq	r4, r5
   8c89c:	f000 80a7 	beq.w	8c9ee <__adddf3+0x1da>
   8c8a0:	f1a4 0401 	sub.w	r4, r4, #1
   8c8a4:	f1d5 0e20 	rsbs	lr, r5, #32
   8c8a8:	db0d      	blt.n	8c8c6 <__adddf3+0xb2>
   8c8aa:	fa02 fc0e 	lsl.w	ip, r2, lr
   8c8ae:	fa22 f205 	lsr.w	r2, r2, r5
   8c8b2:	1880      	adds	r0, r0, r2
   8c8b4:	f141 0100 	adc.w	r1, r1, #0
   8c8b8:	fa03 f20e 	lsl.w	r2, r3, lr
   8c8bc:	1880      	adds	r0, r0, r2
   8c8be:	fa43 f305 	asr.w	r3, r3, r5
   8c8c2:	4159      	adcs	r1, r3
   8c8c4:	e00e      	b.n	8c8e4 <__adddf3+0xd0>
   8c8c6:	f1a5 0520 	sub.w	r5, r5, #32
   8c8ca:	f10e 0e20 	add.w	lr, lr, #32
   8c8ce:	2a01      	cmp	r2, #1
   8c8d0:	fa03 fc0e 	lsl.w	ip, r3, lr
   8c8d4:	bf28      	it	cs
   8c8d6:	f04c 0c02 	orrcs.w	ip, ip, #2
   8c8da:	fa43 f305 	asr.w	r3, r3, r5
   8c8de:	18c0      	adds	r0, r0, r3
   8c8e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8c8e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c8e8:	d507      	bpl.n	8c8fa <__adddf3+0xe6>
   8c8ea:	f04f 0e00 	mov.w	lr, #0
   8c8ee:	f1dc 0c00 	rsbs	ip, ip, #0
   8c8f2:	eb7e 0000 	sbcs.w	r0, lr, r0
   8c8f6:	eb6e 0101 	sbc.w	r1, lr, r1
   8c8fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8c8fe:	d31b      	bcc.n	8c938 <__adddf3+0x124>
   8c900:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8c904:	d30c      	bcc.n	8c920 <__adddf3+0x10c>
   8c906:	0849      	lsrs	r1, r1, #1
   8c908:	ea5f 0030 	movs.w	r0, r0, rrx
   8c90c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8c910:	f104 0401 	add.w	r4, r4, #1
   8c914:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8c918:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8c91c:	f080 809a 	bcs.w	8ca54 <__adddf3+0x240>
   8c920:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8c924:	bf08      	it	eq
   8c926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c92a:	f150 0000 	adcs.w	r0, r0, #0
   8c92e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c932:	ea41 0105 	orr.w	r1, r1, r5
   8c936:	bd30      	pop	{r4, r5, pc}
   8c938:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8c93c:	4140      	adcs	r0, r0
   8c93e:	eb41 0101 	adc.w	r1, r1, r1
   8c942:	3c01      	subs	r4, #1
   8c944:	bf28      	it	cs
   8c946:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8c94a:	d2e9      	bcs.n	8c920 <__adddf3+0x10c>
   8c94c:	f091 0f00 	teq	r1, #0
   8c950:	bf04      	itt	eq
   8c952:	4601      	moveq	r1, r0
   8c954:	2000      	moveq	r0, #0
   8c956:	fab1 f381 	clz	r3, r1
   8c95a:	bf08      	it	eq
   8c95c:	3320      	addeq	r3, #32
   8c95e:	f1a3 030b 	sub.w	r3, r3, #11
   8c962:	f1b3 0220 	subs.w	r2, r3, #32
   8c966:	da0c      	bge.n	8c982 <__adddf3+0x16e>
   8c968:	320c      	adds	r2, #12
   8c96a:	dd08      	ble.n	8c97e <__adddf3+0x16a>
   8c96c:	f102 0c14 	add.w	ip, r2, #20
   8c970:	f1c2 020c 	rsb	r2, r2, #12
   8c974:	fa01 f00c 	lsl.w	r0, r1, ip
   8c978:	fa21 f102 	lsr.w	r1, r1, r2
   8c97c:	e00c      	b.n	8c998 <__adddf3+0x184>
   8c97e:	f102 0214 	add.w	r2, r2, #20
   8c982:	bfd8      	it	le
   8c984:	f1c2 0c20 	rsble	ip, r2, #32
   8c988:	fa01 f102 	lsl.w	r1, r1, r2
   8c98c:	fa20 fc0c 	lsr.w	ip, r0, ip
   8c990:	bfdc      	itt	le
   8c992:	ea41 010c 	orrle.w	r1, r1, ip
   8c996:	4090      	lslle	r0, r2
   8c998:	1ae4      	subs	r4, r4, r3
   8c99a:	bfa2      	ittt	ge
   8c99c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8c9a0:	4329      	orrge	r1, r5
   8c9a2:	bd30      	popge	{r4, r5, pc}
   8c9a4:	ea6f 0404 	mvn.w	r4, r4
   8c9a8:	3c1f      	subs	r4, #31
   8c9aa:	da1c      	bge.n	8c9e6 <__adddf3+0x1d2>
   8c9ac:	340c      	adds	r4, #12
   8c9ae:	dc0e      	bgt.n	8c9ce <__adddf3+0x1ba>
   8c9b0:	f104 0414 	add.w	r4, r4, #20
   8c9b4:	f1c4 0220 	rsb	r2, r4, #32
   8c9b8:	fa20 f004 	lsr.w	r0, r0, r4
   8c9bc:	fa01 f302 	lsl.w	r3, r1, r2
   8c9c0:	ea40 0003 	orr.w	r0, r0, r3
   8c9c4:	fa21 f304 	lsr.w	r3, r1, r4
   8c9c8:	ea45 0103 	orr.w	r1, r5, r3
   8c9cc:	bd30      	pop	{r4, r5, pc}
   8c9ce:	f1c4 040c 	rsb	r4, r4, #12
   8c9d2:	f1c4 0220 	rsb	r2, r4, #32
   8c9d6:	fa20 f002 	lsr.w	r0, r0, r2
   8c9da:	fa01 f304 	lsl.w	r3, r1, r4
   8c9de:	ea40 0003 	orr.w	r0, r0, r3
   8c9e2:	4629      	mov	r1, r5
   8c9e4:	bd30      	pop	{r4, r5, pc}
   8c9e6:	fa21 f004 	lsr.w	r0, r1, r4
   8c9ea:	4629      	mov	r1, r5
   8c9ec:	bd30      	pop	{r4, r5, pc}
   8c9ee:	f094 0f00 	teq	r4, #0
   8c9f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8c9f6:	bf06      	itte	eq
   8c9f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8c9fc:	3401      	addeq	r4, #1
   8c9fe:	3d01      	subne	r5, #1
   8ca00:	e74e      	b.n	8c8a0 <__adddf3+0x8c>
   8ca02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8ca06:	bf18      	it	ne
   8ca08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8ca0c:	d029      	beq.n	8ca62 <__adddf3+0x24e>
   8ca0e:	ea94 0f05 	teq	r4, r5
   8ca12:	bf08      	it	eq
   8ca14:	ea90 0f02 	teqeq	r0, r2
   8ca18:	d005      	beq.n	8ca26 <__adddf3+0x212>
   8ca1a:	ea54 0c00 	orrs.w	ip, r4, r0
   8ca1e:	bf04      	itt	eq
   8ca20:	4619      	moveq	r1, r3
   8ca22:	4610      	moveq	r0, r2
   8ca24:	bd30      	pop	{r4, r5, pc}
   8ca26:	ea91 0f03 	teq	r1, r3
   8ca2a:	bf1e      	ittt	ne
   8ca2c:	2100      	movne	r1, #0
   8ca2e:	2000      	movne	r0, #0
   8ca30:	bd30      	popne	{r4, r5, pc}
   8ca32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8ca36:	d105      	bne.n	8ca44 <__adddf3+0x230>
   8ca38:	0040      	lsls	r0, r0, #1
   8ca3a:	4149      	adcs	r1, r1
   8ca3c:	bf28      	it	cs
   8ca3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8ca42:	bd30      	pop	{r4, r5, pc}
   8ca44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8ca48:	bf3c      	itt	cc
   8ca4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8ca4e:	bd30      	popcc	{r4, r5, pc}
   8ca50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8ca54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8ca58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8ca5c:	f04f 0000 	mov.w	r0, #0
   8ca60:	bd30      	pop	{r4, r5, pc}
   8ca62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8ca66:	bf1a      	itte	ne
   8ca68:	4619      	movne	r1, r3
   8ca6a:	4610      	movne	r0, r2
   8ca6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8ca70:	bf1c      	itt	ne
   8ca72:	460b      	movne	r3, r1
   8ca74:	4602      	movne	r2, r0
   8ca76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8ca7a:	bf06      	itte	eq
   8ca7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8ca80:	ea91 0f03 	teqeq	r1, r3
   8ca84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8ca88:	bd30      	pop	{r4, r5, pc}
   8ca8a:	bf00      	nop

0008ca8c <__aeabi_ui2d>:
   8ca8c:	f090 0f00 	teq	r0, #0
   8ca90:	bf04      	itt	eq
   8ca92:	2100      	moveq	r1, #0
   8ca94:	4770      	bxeq	lr
   8ca96:	b530      	push	{r4, r5, lr}
   8ca98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8ca9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8caa0:	f04f 0500 	mov.w	r5, #0
   8caa4:	f04f 0100 	mov.w	r1, #0
   8caa8:	e750      	b.n	8c94c <__adddf3+0x138>
   8caaa:	bf00      	nop

0008caac <__aeabi_i2d>:
   8caac:	f090 0f00 	teq	r0, #0
   8cab0:	bf04      	itt	eq
   8cab2:	2100      	moveq	r1, #0
   8cab4:	4770      	bxeq	lr
   8cab6:	b530      	push	{r4, r5, lr}
   8cab8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8cabc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8cac0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8cac4:	bf48      	it	mi
   8cac6:	4240      	negmi	r0, r0
   8cac8:	f04f 0100 	mov.w	r1, #0
   8cacc:	e73e      	b.n	8c94c <__adddf3+0x138>
   8cace:	bf00      	nop

0008cad0 <__aeabi_f2d>:
   8cad0:	0042      	lsls	r2, r0, #1
   8cad2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8cad6:	ea4f 0131 	mov.w	r1, r1, rrx
   8cada:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8cade:	bf1f      	itttt	ne
   8cae0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8cae4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8cae8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8caec:	4770      	bxne	lr
   8caee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8caf2:	bf08      	it	eq
   8caf4:	4770      	bxeq	lr
   8caf6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8cafa:	bf04      	itt	eq
   8cafc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8cb00:	4770      	bxeq	lr
   8cb02:	b530      	push	{r4, r5, lr}
   8cb04:	f44f 7460 	mov.w	r4, #896	; 0x380
   8cb08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8cb0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8cb10:	e71c      	b.n	8c94c <__adddf3+0x138>
   8cb12:	bf00      	nop

0008cb14 <__aeabi_ul2d>:
   8cb14:	ea50 0201 	orrs.w	r2, r0, r1
   8cb18:	bf08      	it	eq
   8cb1a:	4770      	bxeq	lr
   8cb1c:	b530      	push	{r4, r5, lr}
   8cb1e:	f04f 0500 	mov.w	r5, #0
   8cb22:	e00a      	b.n	8cb3a <__aeabi_l2d+0x16>

0008cb24 <__aeabi_l2d>:
   8cb24:	ea50 0201 	orrs.w	r2, r0, r1
   8cb28:	bf08      	it	eq
   8cb2a:	4770      	bxeq	lr
   8cb2c:	b530      	push	{r4, r5, lr}
   8cb2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8cb32:	d502      	bpl.n	8cb3a <__aeabi_l2d+0x16>
   8cb34:	4240      	negs	r0, r0
   8cb36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8cb3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8cb3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8cb42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8cb46:	f43f aed8 	beq.w	8c8fa <__adddf3+0xe6>
   8cb4a:	f04f 0203 	mov.w	r2, #3
   8cb4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8cb52:	bf18      	it	ne
   8cb54:	3203      	addne	r2, #3
   8cb56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8cb5a:	bf18      	it	ne
   8cb5c:	3203      	addne	r2, #3
   8cb5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8cb62:	f1c2 0320 	rsb	r3, r2, #32
   8cb66:	fa00 fc03 	lsl.w	ip, r0, r3
   8cb6a:	fa20 f002 	lsr.w	r0, r0, r2
   8cb6e:	fa01 fe03 	lsl.w	lr, r1, r3
   8cb72:	ea40 000e 	orr.w	r0, r0, lr
   8cb76:	fa21 f102 	lsr.w	r1, r1, r2
   8cb7a:	4414      	add	r4, r2
   8cb7c:	e6bd      	b.n	8c8fa <__adddf3+0xe6>
   8cb7e:	bf00      	nop

0008cb80 <__aeabi_dmul>:
   8cb80:	b570      	push	{r4, r5, r6, lr}
   8cb82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8cb86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8cb8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8cb8e:	bf1d      	ittte	ne
   8cb90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8cb94:	ea94 0f0c 	teqne	r4, ip
   8cb98:	ea95 0f0c 	teqne	r5, ip
   8cb9c:	f000 f8de 	bleq	8cd5c <__aeabi_dmul+0x1dc>
   8cba0:	442c      	add	r4, r5
   8cba2:	ea81 0603 	eor.w	r6, r1, r3
   8cba6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8cbaa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8cbae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8cbb2:	bf18      	it	ne
   8cbb4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8cbb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8cbbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8cbc0:	d038      	beq.n	8cc34 <__aeabi_dmul+0xb4>
   8cbc2:	fba0 ce02 	umull	ip, lr, r0, r2
   8cbc6:	f04f 0500 	mov.w	r5, #0
   8cbca:	fbe1 e502 	umlal	lr, r5, r1, r2
   8cbce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8cbd2:	fbe0 e503 	umlal	lr, r5, r0, r3
   8cbd6:	f04f 0600 	mov.w	r6, #0
   8cbda:	fbe1 5603 	umlal	r5, r6, r1, r3
   8cbde:	f09c 0f00 	teq	ip, #0
   8cbe2:	bf18      	it	ne
   8cbe4:	f04e 0e01 	orrne.w	lr, lr, #1
   8cbe8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8cbec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8cbf0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8cbf4:	d204      	bcs.n	8cc00 <__aeabi_dmul+0x80>
   8cbf6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8cbfa:	416d      	adcs	r5, r5
   8cbfc:	eb46 0606 	adc.w	r6, r6, r6
   8cc00:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8cc04:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8cc08:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8cc0c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8cc10:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8cc14:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8cc18:	bf88      	it	hi
   8cc1a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8cc1e:	d81e      	bhi.n	8cc5e <__aeabi_dmul+0xde>
   8cc20:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8cc24:	bf08      	it	eq
   8cc26:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8cc2a:	f150 0000 	adcs.w	r0, r0, #0
   8cc2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8cc32:	bd70      	pop	{r4, r5, r6, pc}
   8cc34:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8cc38:	ea46 0101 	orr.w	r1, r6, r1
   8cc3c:	ea40 0002 	orr.w	r0, r0, r2
   8cc40:	ea81 0103 	eor.w	r1, r1, r3
   8cc44:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8cc48:	bfc2      	ittt	gt
   8cc4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8cc4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8cc52:	bd70      	popgt	{r4, r5, r6, pc}
   8cc54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8cc58:	f04f 0e00 	mov.w	lr, #0
   8cc5c:	3c01      	subs	r4, #1
   8cc5e:	f300 80ab 	bgt.w	8cdb8 <__aeabi_dmul+0x238>
   8cc62:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8cc66:	bfde      	ittt	le
   8cc68:	2000      	movle	r0, #0
   8cc6a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8cc6e:	bd70      	pople	{r4, r5, r6, pc}
   8cc70:	f1c4 0400 	rsb	r4, r4, #0
   8cc74:	3c20      	subs	r4, #32
   8cc76:	da35      	bge.n	8cce4 <__aeabi_dmul+0x164>
   8cc78:	340c      	adds	r4, #12
   8cc7a:	dc1b      	bgt.n	8ccb4 <__aeabi_dmul+0x134>
   8cc7c:	f104 0414 	add.w	r4, r4, #20
   8cc80:	f1c4 0520 	rsb	r5, r4, #32
   8cc84:	fa00 f305 	lsl.w	r3, r0, r5
   8cc88:	fa20 f004 	lsr.w	r0, r0, r4
   8cc8c:	fa01 f205 	lsl.w	r2, r1, r5
   8cc90:	ea40 0002 	orr.w	r0, r0, r2
   8cc94:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8cc98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8cc9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8cca0:	fa21 f604 	lsr.w	r6, r1, r4
   8cca4:	eb42 0106 	adc.w	r1, r2, r6
   8cca8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8ccac:	bf08      	it	eq
   8ccae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8ccb2:	bd70      	pop	{r4, r5, r6, pc}
   8ccb4:	f1c4 040c 	rsb	r4, r4, #12
   8ccb8:	f1c4 0520 	rsb	r5, r4, #32
   8ccbc:	fa00 f304 	lsl.w	r3, r0, r4
   8ccc0:	fa20 f005 	lsr.w	r0, r0, r5
   8ccc4:	fa01 f204 	lsl.w	r2, r1, r4
   8ccc8:	ea40 0002 	orr.w	r0, r0, r2
   8cccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8ccd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8ccd4:	f141 0100 	adc.w	r1, r1, #0
   8ccd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8ccdc:	bf08      	it	eq
   8ccde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8cce2:	bd70      	pop	{r4, r5, r6, pc}
   8cce4:	f1c4 0520 	rsb	r5, r4, #32
   8cce8:	fa00 f205 	lsl.w	r2, r0, r5
   8ccec:	ea4e 0e02 	orr.w	lr, lr, r2
   8ccf0:	fa20 f304 	lsr.w	r3, r0, r4
   8ccf4:	fa01 f205 	lsl.w	r2, r1, r5
   8ccf8:	ea43 0302 	orr.w	r3, r3, r2
   8ccfc:	fa21 f004 	lsr.w	r0, r1, r4
   8cd00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cd04:	fa21 f204 	lsr.w	r2, r1, r4
   8cd08:	ea20 0002 	bic.w	r0, r0, r2
   8cd0c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8cd10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8cd14:	bf08      	it	eq
   8cd16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8cd1a:	bd70      	pop	{r4, r5, r6, pc}
   8cd1c:	f094 0f00 	teq	r4, #0
   8cd20:	d10f      	bne.n	8cd42 <__aeabi_dmul+0x1c2>
   8cd22:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8cd26:	0040      	lsls	r0, r0, #1
   8cd28:	eb41 0101 	adc.w	r1, r1, r1
   8cd2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8cd30:	bf08      	it	eq
   8cd32:	3c01      	subeq	r4, #1
   8cd34:	d0f7      	beq.n	8cd26 <__aeabi_dmul+0x1a6>
   8cd36:	ea41 0106 	orr.w	r1, r1, r6
   8cd3a:	f095 0f00 	teq	r5, #0
   8cd3e:	bf18      	it	ne
   8cd40:	4770      	bxne	lr
   8cd42:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8cd46:	0052      	lsls	r2, r2, #1
   8cd48:	eb43 0303 	adc.w	r3, r3, r3
   8cd4c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8cd50:	bf08      	it	eq
   8cd52:	3d01      	subeq	r5, #1
   8cd54:	d0f7      	beq.n	8cd46 <__aeabi_dmul+0x1c6>
   8cd56:	ea43 0306 	orr.w	r3, r3, r6
   8cd5a:	4770      	bx	lr
   8cd5c:	ea94 0f0c 	teq	r4, ip
   8cd60:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8cd64:	bf18      	it	ne
   8cd66:	ea95 0f0c 	teqne	r5, ip
   8cd6a:	d00c      	beq.n	8cd86 <__aeabi_dmul+0x206>
   8cd6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8cd70:	bf18      	it	ne
   8cd72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8cd76:	d1d1      	bne.n	8cd1c <__aeabi_dmul+0x19c>
   8cd78:	ea81 0103 	eor.w	r1, r1, r3
   8cd7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cd80:	f04f 0000 	mov.w	r0, #0
   8cd84:	bd70      	pop	{r4, r5, r6, pc}
   8cd86:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8cd8a:	bf06      	itte	eq
   8cd8c:	4610      	moveq	r0, r2
   8cd8e:	4619      	moveq	r1, r3
   8cd90:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8cd94:	d019      	beq.n	8cdca <__aeabi_dmul+0x24a>
   8cd96:	ea94 0f0c 	teq	r4, ip
   8cd9a:	d102      	bne.n	8cda2 <__aeabi_dmul+0x222>
   8cd9c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8cda0:	d113      	bne.n	8cdca <__aeabi_dmul+0x24a>
   8cda2:	ea95 0f0c 	teq	r5, ip
   8cda6:	d105      	bne.n	8cdb4 <__aeabi_dmul+0x234>
   8cda8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8cdac:	bf1c      	itt	ne
   8cdae:	4610      	movne	r0, r2
   8cdb0:	4619      	movne	r1, r3
   8cdb2:	d10a      	bne.n	8cdca <__aeabi_dmul+0x24a>
   8cdb4:	ea81 0103 	eor.w	r1, r1, r3
   8cdb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cdbc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8cdc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8cdc4:	f04f 0000 	mov.w	r0, #0
   8cdc8:	bd70      	pop	{r4, r5, r6, pc}
   8cdca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8cdce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8cdd2:	bd70      	pop	{r4, r5, r6, pc}

0008cdd4 <__aeabi_ddiv>:
   8cdd4:	b570      	push	{r4, r5, r6, lr}
   8cdd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8cdda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8cdde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8cde2:	bf1d      	ittte	ne
   8cde4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8cde8:	ea94 0f0c 	teqne	r4, ip
   8cdec:	ea95 0f0c 	teqne	r5, ip
   8cdf0:	f000 f8a7 	bleq	8cf42 <__aeabi_ddiv+0x16e>
   8cdf4:	eba4 0405 	sub.w	r4, r4, r5
   8cdf8:	ea81 0e03 	eor.w	lr, r1, r3
   8cdfc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8ce00:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8ce04:	f000 8088 	beq.w	8cf18 <__aeabi_ddiv+0x144>
   8ce08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8ce0c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8ce10:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8ce14:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8ce18:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8ce1c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8ce20:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8ce24:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8ce28:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8ce2c:	429d      	cmp	r5, r3
   8ce2e:	bf08      	it	eq
   8ce30:	4296      	cmpeq	r6, r2
   8ce32:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8ce36:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8ce3a:	d202      	bcs.n	8ce42 <__aeabi_ddiv+0x6e>
   8ce3c:	085b      	lsrs	r3, r3, #1
   8ce3e:	ea4f 0232 	mov.w	r2, r2, rrx
   8ce42:	1ab6      	subs	r6, r6, r2
   8ce44:	eb65 0503 	sbc.w	r5, r5, r3
   8ce48:	085b      	lsrs	r3, r3, #1
   8ce4a:	ea4f 0232 	mov.w	r2, r2, rrx
   8ce4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8ce52:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8ce56:	ebb6 0e02 	subs.w	lr, r6, r2
   8ce5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8ce5e:	bf22      	ittt	cs
   8ce60:	1ab6      	subcs	r6, r6, r2
   8ce62:	4675      	movcs	r5, lr
   8ce64:	ea40 000c 	orrcs.w	r0, r0, ip
   8ce68:	085b      	lsrs	r3, r3, #1
   8ce6a:	ea4f 0232 	mov.w	r2, r2, rrx
   8ce6e:	ebb6 0e02 	subs.w	lr, r6, r2
   8ce72:	eb75 0e03 	sbcs.w	lr, r5, r3
   8ce76:	bf22      	ittt	cs
   8ce78:	1ab6      	subcs	r6, r6, r2
   8ce7a:	4675      	movcs	r5, lr
   8ce7c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8ce80:	085b      	lsrs	r3, r3, #1
   8ce82:	ea4f 0232 	mov.w	r2, r2, rrx
   8ce86:	ebb6 0e02 	subs.w	lr, r6, r2
   8ce8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8ce8e:	bf22      	ittt	cs
   8ce90:	1ab6      	subcs	r6, r6, r2
   8ce92:	4675      	movcs	r5, lr
   8ce94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8ce98:	085b      	lsrs	r3, r3, #1
   8ce9a:	ea4f 0232 	mov.w	r2, r2, rrx
   8ce9e:	ebb6 0e02 	subs.w	lr, r6, r2
   8cea2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8cea6:	bf22      	ittt	cs
   8cea8:	1ab6      	subcs	r6, r6, r2
   8ceaa:	4675      	movcs	r5, lr
   8ceac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8ceb0:	ea55 0e06 	orrs.w	lr, r5, r6
   8ceb4:	d018      	beq.n	8cee8 <__aeabi_ddiv+0x114>
   8ceb6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8ceba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8cebe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8cec2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8cec6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8ceca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8cece:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8ced2:	d1c0      	bne.n	8ce56 <__aeabi_ddiv+0x82>
   8ced4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8ced8:	d10b      	bne.n	8cef2 <__aeabi_ddiv+0x11e>
   8ceda:	ea41 0100 	orr.w	r1, r1, r0
   8cede:	f04f 0000 	mov.w	r0, #0
   8cee2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8cee6:	e7b6      	b.n	8ce56 <__aeabi_ddiv+0x82>
   8cee8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8ceec:	bf04      	itt	eq
   8ceee:	4301      	orreq	r1, r0
   8cef0:	2000      	moveq	r0, #0
   8cef2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8cef6:	bf88      	it	hi
   8cef8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8cefc:	f63f aeaf 	bhi.w	8cc5e <__aeabi_dmul+0xde>
   8cf00:	ebb5 0c03 	subs.w	ip, r5, r3
   8cf04:	bf04      	itt	eq
   8cf06:	ebb6 0c02 	subseq.w	ip, r6, r2
   8cf0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8cf0e:	f150 0000 	adcs.w	r0, r0, #0
   8cf12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8cf16:	bd70      	pop	{r4, r5, r6, pc}
   8cf18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8cf1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8cf20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8cf24:	bfc2      	ittt	gt
   8cf26:	ebd4 050c 	rsbsgt	r5, r4, ip
   8cf2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8cf2e:	bd70      	popgt	{r4, r5, r6, pc}
   8cf30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8cf34:	f04f 0e00 	mov.w	lr, #0
   8cf38:	3c01      	subs	r4, #1
   8cf3a:	e690      	b.n	8cc5e <__aeabi_dmul+0xde>
   8cf3c:	ea45 0e06 	orr.w	lr, r5, r6
   8cf40:	e68d      	b.n	8cc5e <__aeabi_dmul+0xde>
   8cf42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8cf46:	ea94 0f0c 	teq	r4, ip
   8cf4a:	bf08      	it	eq
   8cf4c:	ea95 0f0c 	teqeq	r5, ip
   8cf50:	f43f af3b 	beq.w	8cdca <__aeabi_dmul+0x24a>
   8cf54:	ea94 0f0c 	teq	r4, ip
   8cf58:	d10a      	bne.n	8cf70 <__aeabi_ddiv+0x19c>
   8cf5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8cf5e:	f47f af34 	bne.w	8cdca <__aeabi_dmul+0x24a>
   8cf62:	ea95 0f0c 	teq	r5, ip
   8cf66:	f47f af25 	bne.w	8cdb4 <__aeabi_dmul+0x234>
   8cf6a:	4610      	mov	r0, r2
   8cf6c:	4619      	mov	r1, r3
   8cf6e:	e72c      	b.n	8cdca <__aeabi_dmul+0x24a>
   8cf70:	ea95 0f0c 	teq	r5, ip
   8cf74:	d106      	bne.n	8cf84 <__aeabi_ddiv+0x1b0>
   8cf76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8cf7a:	f43f aefd 	beq.w	8cd78 <__aeabi_dmul+0x1f8>
   8cf7e:	4610      	mov	r0, r2
   8cf80:	4619      	mov	r1, r3
   8cf82:	e722      	b.n	8cdca <__aeabi_dmul+0x24a>
   8cf84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8cf88:	bf18      	it	ne
   8cf8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8cf8e:	f47f aec5 	bne.w	8cd1c <__aeabi_dmul+0x19c>
   8cf92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8cf96:	f47f af0d 	bne.w	8cdb4 <__aeabi_dmul+0x234>
   8cf9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8cf9e:	f47f aeeb 	bne.w	8cd78 <__aeabi_dmul+0x1f8>
   8cfa2:	e712      	b.n	8cdca <__aeabi_dmul+0x24a>

0008cfa4 <__gedf2>:
   8cfa4:	f04f 3cff 	mov.w	ip, #4294967295
   8cfa8:	e006      	b.n	8cfb8 <__cmpdf2+0x4>
   8cfaa:	bf00      	nop

0008cfac <__ledf2>:
   8cfac:	f04f 0c01 	mov.w	ip, #1
   8cfb0:	e002      	b.n	8cfb8 <__cmpdf2+0x4>
   8cfb2:	bf00      	nop

0008cfb4 <__cmpdf2>:
   8cfb4:	f04f 0c01 	mov.w	ip, #1
   8cfb8:	f84d cd04 	str.w	ip, [sp, #-4]!
   8cfbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8cfc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cfc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cfc8:	bf18      	it	ne
   8cfca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8cfce:	d01b      	beq.n	8d008 <__cmpdf2+0x54>
   8cfd0:	b001      	add	sp, #4
   8cfd2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8cfd6:	bf0c      	ite	eq
   8cfd8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8cfdc:	ea91 0f03 	teqne	r1, r3
   8cfe0:	bf02      	ittt	eq
   8cfe2:	ea90 0f02 	teqeq	r0, r2
   8cfe6:	2000      	moveq	r0, #0
   8cfe8:	4770      	bxeq	lr
   8cfea:	f110 0f00 	cmn.w	r0, #0
   8cfee:	ea91 0f03 	teq	r1, r3
   8cff2:	bf58      	it	pl
   8cff4:	4299      	cmppl	r1, r3
   8cff6:	bf08      	it	eq
   8cff8:	4290      	cmpeq	r0, r2
   8cffa:	bf2c      	ite	cs
   8cffc:	17d8      	asrcs	r0, r3, #31
   8cffe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8d002:	f040 0001 	orr.w	r0, r0, #1
   8d006:	4770      	bx	lr
   8d008:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d00c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d010:	d102      	bne.n	8d018 <__cmpdf2+0x64>
   8d012:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d016:	d107      	bne.n	8d028 <__cmpdf2+0x74>
   8d018:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d01c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d020:	d1d6      	bne.n	8cfd0 <__cmpdf2+0x1c>
   8d022:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d026:	d0d3      	beq.n	8cfd0 <__cmpdf2+0x1c>
   8d028:	f85d 0b04 	ldr.w	r0, [sp], #4
   8d02c:	4770      	bx	lr
   8d02e:	bf00      	nop

0008d030 <__aeabi_cdrcmple>:
   8d030:	4684      	mov	ip, r0
   8d032:	4610      	mov	r0, r2
   8d034:	4662      	mov	r2, ip
   8d036:	468c      	mov	ip, r1
   8d038:	4619      	mov	r1, r3
   8d03a:	4663      	mov	r3, ip
   8d03c:	e000      	b.n	8d040 <__aeabi_cdcmpeq>
   8d03e:	bf00      	nop

0008d040 <__aeabi_cdcmpeq>:
   8d040:	b501      	push	{r0, lr}
   8d042:	f7ff ffb7 	bl	8cfb4 <__cmpdf2>
   8d046:	2800      	cmp	r0, #0
   8d048:	bf48      	it	mi
   8d04a:	f110 0f00 	cmnmi.w	r0, #0
   8d04e:	bd01      	pop	{r0, pc}

0008d050 <__aeabi_dcmpeq>:
   8d050:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d054:	f7ff fff4 	bl	8d040 <__aeabi_cdcmpeq>
   8d058:	bf0c      	ite	eq
   8d05a:	2001      	moveq	r0, #1
   8d05c:	2000      	movne	r0, #0
   8d05e:	f85d fb08 	ldr.w	pc, [sp], #8
   8d062:	bf00      	nop

0008d064 <__aeabi_dcmplt>:
   8d064:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d068:	f7ff ffea 	bl	8d040 <__aeabi_cdcmpeq>
   8d06c:	bf34      	ite	cc
   8d06e:	2001      	movcc	r0, #1
   8d070:	2000      	movcs	r0, #0
   8d072:	f85d fb08 	ldr.w	pc, [sp], #8
   8d076:	bf00      	nop

0008d078 <__aeabi_dcmple>:
   8d078:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d07c:	f7ff ffe0 	bl	8d040 <__aeabi_cdcmpeq>
   8d080:	bf94      	ite	ls
   8d082:	2001      	movls	r0, #1
   8d084:	2000      	movhi	r0, #0
   8d086:	f85d fb08 	ldr.w	pc, [sp], #8
   8d08a:	bf00      	nop

0008d08c <__aeabi_dcmpge>:
   8d08c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d090:	f7ff ffce 	bl	8d030 <__aeabi_cdrcmple>
   8d094:	bf94      	ite	ls
   8d096:	2001      	movls	r0, #1
   8d098:	2000      	movhi	r0, #0
   8d09a:	f85d fb08 	ldr.w	pc, [sp], #8
   8d09e:	bf00      	nop

0008d0a0 <__aeabi_dcmpgt>:
   8d0a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d0a4:	f7ff ffc4 	bl	8d030 <__aeabi_cdrcmple>
   8d0a8:	bf34      	ite	cc
   8d0aa:	2001      	movcc	r0, #1
   8d0ac:	2000      	movcs	r0, #0
   8d0ae:	f85d fb08 	ldr.w	pc, [sp], #8
   8d0b2:	bf00      	nop

0008d0b4 <__aeabi_dcmpun>:
   8d0b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d0b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d0bc:	d102      	bne.n	8d0c4 <__aeabi_dcmpun+0x10>
   8d0be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d0c2:	d10a      	bne.n	8d0da <__aeabi_dcmpun+0x26>
   8d0c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d0c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d0cc:	d102      	bne.n	8d0d4 <__aeabi_dcmpun+0x20>
   8d0ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d0d2:	d102      	bne.n	8d0da <__aeabi_dcmpun+0x26>
   8d0d4:	f04f 0000 	mov.w	r0, #0
   8d0d8:	4770      	bx	lr
   8d0da:	f04f 0001 	mov.w	r0, #1
   8d0de:	4770      	bx	lr

0008d0e0 <__aeabi_d2iz>:
   8d0e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8d0e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8d0e8:	d215      	bcs.n	8d116 <__aeabi_d2iz+0x36>
   8d0ea:	d511      	bpl.n	8d110 <__aeabi_d2iz+0x30>
   8d0ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8d0f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8d0f4:	d912      	bls.n	8d11c <__aeabi_d2iz+0x3c>
   8d0f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8d0fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8d0fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8d102:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d106:	fa23 f002 	lsr.w	r0, r3, r2
   8d10a:	bf18      	it	ne
   8d10c:	4240      	negne	r0, r0
   8d10e:	4770      	bx	lr
   8d110:	f04f 0000 	mov.w	r0, #0
   8d114:	4770      	bx	lr
   8d116:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8d11a:	d105      	bne.n	8d128 <__aeabi_d2iz+0x48>
   8d11c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8d120:	bf08      	it	eq
   8d122:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8d126:	4770      	bx	lr
   8d128:	f04f 0000 	mov.w	r0, #0
   8d12c:	4770      	bx	lr
   8d12e:	bf00      	nop

0008d130 <__aeabi_uldivmod>:
   8d130:	b953      	cbnz	r3, 8d148 <__aeabi_uldivmod+0x18>
   8d132:	b94a      	cbnz	r2, 8d148 <__aeabi_uldivmod+0x18>
   8d134:	2900      	cmp	r1, #0
   8d136:	bf08      	it	eq
   8d138:	2800      	cmpeq	r0, #0
   8d13a:	bf1c      	itt	ne
   8d13c:	f04f 31ff 	movne.w	r1, #4294967295
   8d140:	f04f 30ff 	movne.w	r0, #4294967295
   8d144:	f000 b96e 	b.w	8d424 <__aeabi_idiv0>
   8d148:	f1ad 0c08 	sub.w	ip, sp, #8
   8d14c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8d150:	f000 f806 	bl	8d160 <__udivmoddi4>
   8d154:	f8dd e004 	ldr.w	lr, [sp, #4]
   8d158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8d15c:	b004      	add	sp, #16
   8d15e:	4770      	bx	lr

0008d160 <__udivmoddi4>:
   8d160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8d164:	9e08      	ldr	r6, [sp, #32]
   8d166:	460d      	mov	r5, r1
   8d168:	4604      	mov	r4, r0
   8d16a:	468e      	mov	lr, r1
   8d16c:	2b00      	cmp	r3, #0
   8d16e:	f040 8083 	bne.w	8d278 <__udivmoddi4+0x118>
   8d172:	428a      	cmp	r2, r1
   8d174:	4617      	mov	r7, r2
   8d176:	d947      	bls.n	8d208 <__udivmoddi4+0xa8>
   8d178:	fab2 f382 	clz	r3, r2
   8d17c:	b14b      	cbz	r3, 8d192 <__udivmoddi4+0x32>
   8d17e:	f1c3 0120 	rsb	r1, r3, #32
   8d182:	fa05 fe03 	lsl.w	lr, r5, r3
   8d186:	fa20 f101 	lsr.w	r1, r0, r1
   8d18a:	409f      	lsls	r7, r3
   8d18c:	ea41 0e0e 	orr.w	lr, r1, lr
   8d190:	409c      	lsls	r4, r3
   8d192:	ea4f 4817 	mov.w	r8, r7, lsr #16
   8d196:	fbbe fcf8 	udiv	ip, lr, r8
   8d19a:	fa1f f987 	uxth.w	r9, r7
   8d19e:	fb08 e21c 	mls	r2, r8, ip, lr
   8d1a2:	fb0c f009 	mul.w	r0, ip, r9
   8d1a6:	0c21      	lsrs	r1, r4, #16
   8d1a8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   8d1ac:	4290      	cmp	r0, r2
   8d1ae:	d90a      	bls.n	8d1c6 <__udivmoddi4+0x66>
   8d1b0:	18ba      	adds	r2, r7, r2
   8d1b2:	f10c 31ff 	add.w	r1, ip, #4294967295
   8d1b6:	f080 8118 	bcs.w	8d3ea <__udivmoddi4+0x28a>
   8d1ba:	4290      	cmp	r0, r2
   8d1bc:	f240 8115 	bls.w	8d3ea <__udivmoddi4+0x28a>
   8d1c0:	f1ac 0c02 	sub.w	ip, ip, #2
   8d1c4:	443a      	add	r2, r7
   8d1c6:	1a12      	subs	r2, r2, r0
   8d1c8:	fbb2 f0f8 	udiv	r0, r2, r8
   8d1cc:	fb08 2210 	mls	r2, r8, r0, r2
   8d1d0:	fb00 f109 	mul.w	r1, r0, r9
   8d1d4:	b2a4      	uxth	r4, r4
   8d1d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   8d1da:	42a1      	cmp	r1, r4
   8d1dc:	d909      	bls.n	8d1f2 <__udivmoddi4+0x92>
   8d1de:	193c      	adds	r4, r7, r4
   8d1e0:	f100 32ff 	add.w	r2, r0, #4294967295
   8d1e4:	f080 8103 	bcs.w	8d3ee <__udivmoddi4+0x28e>
   8d1e8:	42a1      	cmp	r1, r4
   8d1ea:	f240 8100 	bls.w	8d3ee <__udivmoddi4+0x28e>
   8d1ee:	3802      	subs	r0, #2
   8d1f0:	443c      	add	r4, r7
   8d1f2:	1a64      	subs	r4, r4, r1
   8d1f4:	2100      	movs	r1, #0
   8d1f6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8d1fa:	b11e      	cbz	r6, 8d204 <__udivmoddi4+0xa4>
   8d1fc:	2200      	movs	r2, #0
   8d1fe:	40dc      	lsrs	r4, r3
   8d200:	e9c6 4200 	strd	r4, r2, [r6]
   8d204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d208:	b902      	cbnz	r2, 8d20c <__udivmoddi4+0xac>
   8d20a:	deff      	udf	#255	; 0xff
   8d20c:	fab2 f382 	clz	r3, r2
   8d210:	2b00      	cmp	r3, #0
   8d212:	d14f      	bne.n	8d2b4 <__udivmoddi4+0x154>
   8d214:	1a8d      	subs	r5, r1, r2
   8d216:	2101      	movs	r1, #1
   8d218:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   8d21c:	fa1f f882 	uxth.w	r8, r2
   8d220:	fbb5 fcfe 	udiv	ip, r5, lr
   8d224:	fb0e 551c 	mls	r5, lr, ip, r5
   8d228:	fb08 f00c 	mul.w	r0, r8, ip
   8d22c:	0c22      	lsrs	r2, r4, #16
   8d22e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   8d232:	42a8      	cmp	r0, r5
   8d234:	d907      	bls.n	8d246 <__udivmoddi4+0xe6>
   8d236:	197d      	adds	r5, r7, r5
   8d238:	f10c 32ff 	add.w	r2, ip, #4294967295
   8d23c:	d202      	bcs.n	8d244 <__udivmoddi4+0xe4>
   8d23e:	42a8      	cmp	r0, r5
   8d240:	f200 80e9 	bhi.w	8d416 <__udivmoddi4+0x2b6>
   8d244:	4694      	mov	ip, r2
   8d246:	1a2d      	subs	r5, r5, r0
   8d248:	fbb5 f0fe 	udiv	r0, r5, lr
   8d24c:	fb0e 5510 	mls	r5, lr, r0, r5
   8d250:	fb08 f800 	mul.w	r8, r8, r0
   8d254:	b2a4      	uxth	r4, r4
   8d256:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8d25a:	45a0      	cmp	r8, r4
   8d25c:	d907      	bls.n	8d26e <__udivmoddi4+0x10e>
   8d25e:	193c      	adds	r4, r7, r4
   8d260:	f100 32ff 	add.w	r2, r0, #4294967295
   8d264:	d202      	bcs.n	8d26c <__udivmoddi4+0x10c>
   8d266:	45a0      	cmp	r8, r4
   8d268:	f200 80d9 	bhi.w	8d41e <__udivmoddi4+0x2be>
   8d26c:	4610      	mov	r0, r2
   8d26e:	eba4 0408 	sub.w	r4, r4, r8
   8d272:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8d276:	e7c0      	b.n	8d1fa <__udivmoddi4+0x9a>
   8d278:	428b      	cmp	r3, r1
   8d27a:	d908      	bls.n	8d28e <__udivmoddi4+0x12e>
   8d27c:	2e00      	cmp	r6, #0
   8d27e:	f000 80b1 	beq.w	8d3e4 <__udivmoddi4+0x284>
   8d282:	2100      	movs	r1, #0
   8d284:	e9c6 0500 	strd	r0, r5, [r6]
   8d288:	4608      	mov	r0, r1
   8d28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d28e:	fab3 f183 	clz	r1, r3
   8d292:	2900      	cmp	r1, #0
   8d294:	d14b      	bne.n	8d32e <__udivmoddi4+0x1ce>
   8d296:	42ab      	cmp	r3, r5
   8d298:	d302      	bcc.n	8d2a0 <__udivmoddi4+0x140>
   8d29a:	4282      	cmp	r2, r0
   8d29c:	f200 80b9 	bhi.w	8d412 <__udivmoddi4+0x2b2>
   8d2a0:	1a84      	subs	r4, r0, r2
   8d2a2:	eb65 0303 	sbc.w	r3, r5, r3
   8d2a6:	2001      	movs	r0, #1
   8d2a8:	469e      	mov	lr, r3
   8d2aa:	2e00      	cmp	r6, #0
   8d2ac:	d0aa      	beq.n	8d204 <__udivmoddi4+0xa4>
   8d2ae:	e9c6 4e00 	strd	r4, lr, [r6]
   8d2b2:	e7a7      	b.n	8d204 <__udivmoddi4+0xa4>
   8d2b4:	409f      	lsls	r7, r3
   8d2b6:	f1c3 0220 	rsb	r2, r3, #32
   8d2ba:	40d1      	lsrs	r1, r2
   8d2bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   8d2c0:	fbb1 f0fe 	udiv	r0, r1, lr
   8d2c4:	fa1f f887 	uxth.w	r8, r7
   8d2c8:	fb0e 1110 	mls	r1, lr, r0, r1
   8d2cc:	fa24 f202 	lsr.w	r2, r4, r2
   8d2d0:	409d      	lsls	r5, r3
   8d2d2:	fb00 fc08 	mul.w	ip, r0, r8
   8d2d6:	432a      	orrs	r2, r5
   8d2d8:	0c15      	lsrs	r5, r2, #16
   8d2da:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8d2de:	45ac      	cmp	ip, r5
   8d2e0:	fa04 f403 	lsl.w	r4, r4, r3
   8d2e4:	d909      	bls.n	8d2fa <__udivmoddi4+0x19a>
   8d2e6:	197d      	adds	r5, r7, r5
   8d2e8:	f100 31ff 	add.w	r1, r0, #4294967295
   8d2ec:	f080 808f 	bcs.w	8d40e <__udivmoddi4+0x2ae>
   8d2f0:	45ac      	cmp	ip, r5
   8d2f2:	f240 808c 	bls.w	8d40e <__udivmoddi4+0x2ae>
   8d2f6:	3802      	subs	r0, #2
   8d2f8:	443d      	add	r5, r7
   8d2fa:	eba5 050c 	sub.w	r5, r5, ip
   8d2fe:	fbb5 f1fe 	udiv	r1, r5, lr
   8d302:	fb0e 5c11 	mls	ip, lr, r1, r5
   8d306:	fb01 f908 	mul.w	r9, r1, r8
   8d30a:	b295      	uxth	r5, r2
   8d30c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   8d310:	45a9      	cmp	r9, r5
   8d312:	d907      	bls.n	8d324 <__udivmoddi4+0x1c4>
   8d314:	197d      	adds	r5, r7, r5
   8d316:	f101 32ff 	add.w	r2, r1, #4294967295
   8d31a:	d274      	bcs.n	8d406 <__udivmoddi4+0x2a6>
   8d31c:	45a9      	cmp	r9, r5
   8d31e:	d972      	bls.n	8d406 <__udivmoddi4+0x2a6>
   8d320:	3902      	subs	r1, #2
   8d322:	443d      	add	r5, r7
   8d324:	eba5 0509 	sub.w	r5, r5, r9
   8d328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   8d32c:	e778      	b.n	8d220 <__udivmoddi4+0xc0>
   8d32e:	f1c1 0720 	rsb	r7, r1, #32
   8d332:	408b      	lsls	r3, r1
   8d334:	fa22 fc07 	lsr.w	ip, r2, r7
   8d338:	ea4c 0c03 	orr.w	ip, ip, r3
   8d33c:	fa25 f407 	lsr.w	r4, r5, r7
   8d340:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   8d344:	fbb4 f9fe 	udiv	r9, r4, lr
   8d348:	fa1f f88c 	uxth.w	r8, ip
   8d34c:	fb0e 4419 	mls	r4, lr, r9, r4
   8d350:	fa20 f307 	lsr.w	r3, r0, r7
   8d354:	fb09 fa08 	mul.w	sl, r9, r8
   8d358:	408d      	lsls	r5, r1
   8d35a:	431d      	orrs	r5, r3
   8d35c:	0c2b      	lsrs	r3, r5, #16
   8d35e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   8d362:	45a2      	cmp	sl, r4
   8d364:	fa02 f201 	lsl.w	r2, r2, r1
   8d368:	fa00 f301 	lsl.w	r3, r0, r1
   8d36c:	d909      	bls.n	8d382 <__udivmoddi4+0x222>
   8d36e:	eb1c 0404 	adds.w	r4, ip, r4
   8d372:	f109 30ff 	add.w	r0, r9, #4294967295
   8d376:	d248      	bcs.n	8d40a <__udivmoddi4+0x2aa>
   8d378:	45a2      	cmp	sl, r4
   8d37a:	d946      	bls.n	8d40a <__udivmoddi4+0x2aa>
   8d37c:	f1a9 0902 	sub.w	r9, r9, #2
   8d380:	4464      	add	r4, ip
   8d382:	eba4 040a 	sub.w	r4, r4, sl
   8d386:	fbb4 f0fe 	udiv	r0, r4, lr
   8d38a:	fb0e 4410 	mls	r4, lr, r0, r4
   8d38e:	fb00 fa08 	mul.w	sl, r0, r8
   8d392:	b2ad      	uxth	r5, r5
   8d394:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8d398:	45a2      	cmp	sl, r4
   8d39a:	d908      	bls.n	8d3ae <__udivmoddi4+0x24e>
   8d39c:	eb1c 0404 	adds.w	r4, ip, r4
   8d3a0:	f100 35ff 	add.w	r5, r0, #4294967295
   8d3a4:	d22d      	bcs.n	8d402 <__udivmoddi4+0x2a2>
   8d3a6:	45a2      	cmp	sl, r4
   8d3a8:	d92b      	bls.n	8d402 <__udivmoddi4+0x2a2>
   8d3aa:	3802      	subs	r0, #2
   8d3ac:	4464      	add	r4, ip
   8d3ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8d3b2:	fba0 8902 	umull	r8, r9, r0, r2
   8d3b6:	eba4 040a 	sub.w	r4, r4, sl
   8d3ba:	454c      	cmp	r4, r9
   8d3bc:	46c6      	mov	lr, r8
   8d3be:	464d      	mov	r5, r9
   8d3c0:	d319      	bcc.n	8d3f6 <__udivmoddi4+0x296>
   8d3c2:	d016      	beq.n	8d3f2 <__udivmoddi4+0x292>
   8d3c4:	b15e      	cbz	r6, 8d3de <__udivmoddi4+0x27e>
   8d3c6:	ebb3 020e 	subs.w	r2, r3, lr
   8d3ca:	eb64 0405 	sbc.w	r4, r4, r5
   8d3ce:	fa04 f707 	lsl.w	r7, r4, r7
   8d3d2:	fa22 f301 	lsr.w	r3, r2, r1
   8d3d6:	431f      	orrs	r7, r3
   8d3d8:	40cc      	lsrs	r4, r1
   8d3da:	e9c6 7400 	strd	r7, r4, [r6]
   8d3de:	2100      	movs	r1, #0
   8d3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d3e4:	4631      	mov	r1, r6
   8d3e6:	4630      	mov	r0, r6
   8d3e8:	e70c      	b.n	8d204 <__udivmoddi4+0xa4>
   8d3ea:	468c      	mov	ip, r1
   8d3ec:	e6eb      	b.n	8d1c6 <__udivmoddi4+0x66>
   8d3ee:	4610      	mov	r0, r2
   8d3f0:	e6ff      	b.n	8d1f2 <__udivmoddi4+0x92>
   8d3f2:	4543      	cmp	r3, r8
   8d3f4:	d2e6      	bcs.n	8d3c4 <__udivmoddi4+0x264>
   8d3f6:	ebb8 0e02 	subs.w	lr, r8, r2
   8d3fa:	eb69 050c 	sbc.w	r5, r9, ip
   8d3fe:	3801      	subs	r0, #1
   8d400:	e7e0      	b.n	8d3c4 <__udivmoddi4+0x264>
   8d402:	4628      	mov	r0, r5
   8d404:	e7d3      	b.n	8d3ae <__udivmoddi4+0x24e>
   8d406:	4611      	mov	r1, r2
   8d408:	e78c      	b.n	8d324 <__udivmoddi4+0x1c4>
   8d40a:	4681      	mov	r9, r0
   8d40c:	e7b9      	b.n	8d382 <__udivmoddi4+0x222>
   8d40e:	4608      	mov	r0, r1
   8d410:	e773      	b.n	8d2fa <__udivmoddi4+0x19a>
   8d412:	4608      	mov	r0, r1
   8d414:	e749      	b.n	8d2aa <__udivmoddi4+0x14a>
   8d416:	f1ac 0c02 	sub.w	ip, ip, #2
   8d41a:	443d      	add	r5, r7
   8d41c:	e713      	b.n	8d246 <__udivmoddi4+0xe6>
   8d41e:	3802      	subs	r0, #2
   8d420:	443c      	add	r4, r7
   8d422:	e724      	b.n	8d26e <__udivmoddi4+0x10e>

0008d424 <__aeabi_idiv0>:
   8d424:	4770      	bx	lr
   8d426:	bf00      	nop
   8d428:	78383025 	.word	0x78383025
   8d42c:	00000000 	.word	0x00000000
   8d430:	62616e45 	.word	0x62616e45
   8d434:	676e696c 	.word	0x676e696c
   8d438:	41535520 	.word	0x41535520
   8d43c:	0a305452 	.word	0x0a305452
   8d440:	00000000 	.word	0x00000000
   8d444:	3a525245 	.word	0x3a525245
   8d448:	766e4920 	.word	0x766e4920
   8d44c:	64696c61 	.word	0x64696c61
   8d450:	41535520 	.word	0x41535520
   8d454:	43205452 	.word	0x43205452
   8d458:	69666e6f 	.word	0x69666e6f
   8d45c:	61727567 	.word	0x61727567
   8d460:	6e6f6974 	.word	0x6e6f6974
   8d464:	63617020 	.word	0x63617020
   8d468:	3f74656b 	.word	0x3f74656b
   8d46c:	0000000a 	.word	0x0000000a
   8d470:	74697845 	.word	0x74697845
   8d474:	20676e69 	.word	0x20676e69
   8d478:	68746977 	.word	0x68746977
   8d47c:	61747320 	.word	0x61747320
   8d480:	20737574 	.word	0x20737574
   8d484:	0a2e6425 	.word	0x0a2e6425
   8d488:	00000000 	.word	0x00000000

0008d48c <BOS_DESC>:
   8d48c:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8d49c:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
   8d4ac:	00000000 00000000 00000000 aaaaaa00     ................
   8d4bc:	aaaaaaaa eeeeeeaa eeeeeeee fffffeee     ................
   8d4cc:	ffffffff ffffffff dfbf7fff fdfbf7ef     ................
   8d4dc:	dfbf7efc fdfbf7ef 0000007e              .~......~...

0008d4e8 <_global_impure_ptr>:
   8d4e8:	20000448 00464e49 00666e69 004e414e     H.. INF.inf.NAN.
   8d4f8:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8d508:	66656463 00000000 33323130 37363534     cdef....01234567
   8d518:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8d528:	0000296c 00000030                       l)..0...

0008d530 <blanks.7335>:
   8d530:	20202020 20202020 20202020 20202020                     

0008d540 <zeroes.7336>:
   8d540:	30303030 30303030 30303030 30303030     0000000000000000

0008d550 <blanks.7328>:
   8d550:	20202020 20202020 20202020 20202020                     

0008d560 <zeroes.7329>:
   8d560:	30303030 30303030 30303030 30303030     0000000000000000
   8d570:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8d580:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8d590:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8d5a0:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8d5b0:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8d5c0:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8d5d0:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8d5e0:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8d5f0:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8d600:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8d610:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8d620:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8d630:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8d640:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8d650:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8d660:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8d670:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8d680:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8d690:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....

0008d6a0 <__mprec_bigtens>:
   8d6a0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8d6b0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8d6c0:	7f73bf3c 75154fdd                       <.s..O.u

0008d6c8 <__mprec_tens>:
   8d6c8:	00000000 3ff00000 00000000 40240000     .......?......$@
   8d6d8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8d6e8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8d6f8:	00000000 412e8480 00000000 416312d0     .......A......cA
   8d708:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8d718:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8d728:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8d738:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8d748:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8d758:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8d768:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8d778:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8d788:	79d99db4 44ea7843                       ...yCx.D

0008d790 <p05.6122>:
   8d790:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8d7a0:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8d7b0:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8d7c0:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8d7d0:	2520656e 25732564 00000a73              ne %d%s%s...

0008d7dc <_ctype_>:
   8d7dc:	20202000 20202020 28282020 20282828     .         ((((( 
   8d7ec:	20202020 20202020 20202020 20202020                     
   8d7fc:	10108820 10101010 10101010 10101010      ...............
   8d80c:	04040410 04040404 10040404 10101010     ................
   8d81c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8d82c:	01010101 01010101 01010101 10101010     ................
   8d83c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8d84c:	02020202 02020202 02020202 10101010     ................
   8d85c:	00000020 00000000 00000000 00000000      ...............
   8d86c:	00000000 00000000 00000000 00000000     ................
   8d87c:	00000000 00000000 00000000 00000000     ................
   8d88c:	00000000 00000000 00000000 00000000     ................
   8d89c:	00000000 00000000 00000000 00000000     ................
   8d8ac:	00000000 00000000 00000000 00000000     ................
   8d8bc:	00000000 00000000 00000000 00000000     ................
   8d8cc:	00000000 00000000 00000000 00000000     ................
   8d8dc:	00000000                                ....

0008d8e0 <_init>:
   8d8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d8e2:	bf00      	nop
   8d8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d8e6:	bc08      	pop	{r3}
   8d8e8:	469e      	mov	lr, r3
   8d8ea:	4770      	bx	lr

0008d8ec <__init_array_start>:
   8d8ec:	00089411 	.word	0x00089411

0008d8f0 <__frame_dummy_init_array_entry>:
   8d8f0:	000800e1                                ....

0008d8f4 <_fini>:
   8d8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d8f6:	bf00      	nop
   8d8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d8fa:	bc08      	pop	{r3}
   8d8fc:	469e      	mov	lr, r3
   8d8fe:	4770      	bx	lr

0008d900 <__do_global_dtors_aux_fini_array_entry>:
   8d900:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	20000288 	.word	0x20000288
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d206      	bcs.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d208      	bcs.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e3600 	.word	0x016e3600
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	02625a00 	.word	0x02625a00
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	                                         .

2000027d <main_b_vendor_enable>:
2000027d:	                                         ...

20000280 <xram>:
20000280:	60000000                                ...`

20000284 <g_interrupt_enabled>:
20000284:	00000001                                ....

20000288 <SystemCoreClock>:
20000288:	003d0900                                ..=.

2000028c <udc_string_desc_languageid>:
2000028c:	04090304                                ....

20000290 <udc_string_manufacturer_name>:
20000290:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002a0:	636e4920 0000002e                        Inc....

200002a8 <udc_string_product_name>:
200002a8:	70696843 73696857 65726570 75482d72     ChipWhisperer-Hu
200002b8:	00796b73                                sky.

200002bc <udc_string_desc>:
200002bc:	00000300 00000000 00000000 00000000     ................
200002cc:	00000000 00000000 00000000 00000000     ................
200002dc:	00000000 00000000 00000000 00000000     ................
200002ec:	00000000 00000000 00000000 00000000     ................
200002fc:	00000000                                ....

20000300 <winusb_20_desc>:
20000300:	0000000a 06030000 0014009e 49570003     ..............WI
20000310:	4253554e 00000000 00000000 00800000     NUSB............
20000320:	00010004 00500028 00790068 00680057     ....(.P.h.y.W.h.
20000330:	00730069 00650070 00650072 00550072     i.s.p.e.r.e.r.U.
20000340:	00420053 00000000 00000000 004e0000     S.B...........N.
20000350:	0063007b 00650063 00320035 00310039     {.c.c.e.5.2.9.1.
20000360:	002d0063 00360061 00660039 0034002d     c.-.a.6.9.f.-.4.
20000370:	00390039 002d0035 00340061 00320063     9.9.5.-.a.4.c.2.
20000380:	0032002d 00650061 00370035 00350061     -.2.a.e.5.7.a.5.
20000390:	00610031 00650064 007d0039 00000000     1.a.d.e.9.}.....

200003a0 <udi_api_vendor>:
200003a0:	0008456d 000845ad 000845c9 0008461d     mE...E...E...F..
200003b0:	00000000                                ....

200003b4 <udc_device_desc>:
200003b4:	02000112 40000000 ace52b3e 02010100     .......@>+......
200003c4:	00000103                                ....

200003c8 <udc_device_qual>:
200003c8:	0200060a 40000000 00000001              .......@....

200003d4 <udc_desc_fs>:
200003d4:	00200209 80000101 000409fa ffff0200     .. .............
200003e4:	050700ff 00400281 02050700 00004002     ......@......@..

200003f4 <udc_desc_hs>:
200003f4:	00200209 80000101 000409fa ffff0200     .. .............
20000404:	050700ff 02000281 02050700 00020002     ................

20000414 <udi_apis>:
20000414:	200003a0                                ... 

20000418 <udc_config_lsfs>:
20000418:	200003d4 20000414                       ... ... 

20000420 <udc_config_hs>:
20000420:	200003f4 20000414                       ... ... 

20000428 <udc_config>:
20000428:	200003b4 20000418 200003b4 200003c8     ... ... ... ... 
20000438:	20000420 00000000                        .. ....

20000440 <_impure_ptr>:
20000440:	20000448 00000000                       H.. ....

20000448 <impure_data>:
20000448:	00000000 20000734 2000079c 20000804     ....4.. ... ... 
20000458:	00000000 00000000 00000000 00000000     ................
20000468:	00000000 00000000 00000000 00000000     ................
20000478:	00000000 00000000 00000000 00000000     ................
20000488:	00000000 00000000 00000000 00000000     ................
20000498:	00000000 00000000 00000000 00000000     ................
200004a8:	00000000 00000000 00000000 00000000     ................
200004b8:	00000000 00000000 00000000 00000000     ................
200004c8:	00000000 00000000 00000000 00000000     ................
200004d8:	00000000 00000000 00000000 00000000     ................
200004e8:	00000000 00000000 00000001 00000000     ................
200004f8:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000508:	00000000 00000000 00000000 00000000     ................
20000518:	00000000 00000000 00000000 00000000     ................
20000528:	00000000 00000000 00000000 00000000     ................
20000538:	00000000 00000000 00000000 00000000     ................
20000548:	00000000 00000000 00000000 00000000     ................
20000558:	00000000 00000000 00000000 00000000     ................
20000568:	00000000 00000000 00000000 00000000     ................
20000578:	00000000 00000000 00000000 00000000     ................
20000588:	00000000 00000000 00000000 00000000     ................
20000598:	00000000 00000000 00000000 00000000     ................
200005a8:	00000000 00000000 00000000 00000000     ................
200005b8:	00000000 00000000 00000000 00000000     ................
200005c8:	00000000 00000000 00000000 00000000     ................
200005d8:	00000000 00000000 00000000 00000000     ................
200005e8:	00000000 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000 00000000 00000000 00000000     ................
20000638:	00000000 00000000 00000000 00000000     ................
20000648:	00000000 00000000 00000000 00000000     ................
20000658:	00000000 00000000 00000000 00000000     ................
20000668:	00000000 00000000 00000000 00000000     ................
20000678:	00000000 00000000 00000000 00000000     ................
20000688:	00000000 00000000 00000000 00000000     ................
20000698:	00000000 00000000 00000000 00000000     ................
200006a8:	00000000 00000000 00000000 00000000     ................
200006b8:	00000000 00000000 00000000 00000000     ................
200006c8:	00000000 00000000 00000000 00000000     ................
200006d8:	00000000 00000000 00000000 00000000     ................
200006e8:	00000000 00000000 00000000 00000000     ................
200006f8:	00000000 00000000 00000000 00000000     ................
20000708:	00000000 00000000 00000000 00000000     ................
20000718:	00000000 00000000 00000000 00000000     ................
20000728:	00000000 00000000 00000000 00000000     ................
20000738:	00000000 00000000 00000000 00000000     ................
20000748:	00000000 00000000 00000000 00000000     ................
20000758:	00000000 00000000 00000000 00000000     ................
20000768:	00000000 00000000 00000000 00000000     ................
20000778:	00000000 00000000 00000000 00000000     ................
20000788:	00000000 00000000 00000000 00000000     ................
20000798:	00000000 00000000 00000000 00000000     ................
200007a8:	00000000 00000000 00000000 00000000     ................
200007b8:	00000000 00000000 00000000 00000000     ................
200007c8:	00000000 00000000 00000000 00000000     ................
200007d8:	00000000 00000000 00000000 00000000     ................
200007e8:	00000000 00000000 00000000 00000000     ................
200007f8:	00000000 00000000 00000000 00000000     ................
20000808:	00000000 00000000 00000000 00000000     ................
20000818:	00000000 00000000 00000000 00000000     ................
20000828:	00000000 00000000 00000000 00000000     ................
20000838:	00000000 00000000 00000000 00000000     ................
20000848:	00000000 00000000 00000000 00000000     ................
20000858:	00000000 00000000 00000000 00000000     ................
20000868:	00000000 00000000                       ........

20000870 <__atexit_recursive_mutex>:
20000870:	20001848                                H.. 

20000874 <__global_locale>:
20000874:	00000043 00000000 00000000 00000000     C...............
20000884:	00000000 00000000 00000000 00000000     ................
20000894:	00000043 00000000 00000000 00000000     C...............
200008a4:	00000000 00000000 00000000 00000000     ................
200008b4:	00000043 00000000 00000000 00000000     C...............
200008c4:	00000000 00000000 00000000 00000000     ................
200008d4:	00000043 00000000 00000000 00000000     C...............
200008e4:	00000000 00000000 00000000 00000000     ................
200008f4:	00000043 00000000 00000000 00000000     C...............
20000904:	00000000 00000000 00000000 00000000     ................
20000914:	00000043 00000000 00000000 00000000     C...............
20000924:	00000000 00000000 00000000 00000000     ................
20000934:	00000043 00000000 00000000 00000000     C...............
20000944:	00000000 00000000 00000000 00000000     ................
20000954:	0008c431 0008b3f9 00000000 0008d7dc     1...............
20000964:	0008d61c 0008d7a8 0008d7a8 0008d7a8     ................
20000974:	0008d7a8 0008d7a8 0008d7a8 0008d7a8     ................
20000984:	0008d7a8 0008d7a8 ffffffff ffffffff     ................
20000994:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
200009a4:	00000000 00000000 00000000 00000000     ................
200009b4:	00000000 00000000 53410000 00494943     ..........ASCII.
200009c4:	00000000 00000000 00000000 00000000     ................
200009d4:	00000000 00000000 00000000              ............

200009e0 <__malloc_av_>:
200009e0:	00000000 00000000 200009e0 200009e0     ........... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68 20000d70 20000d70     h.. h.. p.. p.. 
20000d80:	20000d78 20000d78 20000d80 20000d80     x.. x.. ... ... 
20000d90:	20000d88 20000d88 20000d90 20000d90     ... ... ... ... 
20000da0:	20000d98 20000d98 20000da0 20000da0     ... ... ... ... 
20000db0:	20000da8 20000da8 20000db0 20000db0     ... ... ... ... 
20000dc0:	20000db8 20000db8 20000dc0 20000dc0     ... ... ... ... 
20000dd0:	20000dc8 20000dc8 20000dd0 20000dd0     ... ... ... ... 
20000de0:	20000dd8 20000dd8                       ... ... 

20000de8 <__malloc_sbrk_base>:
20000de8:	ffffffff                                ....

20000dec <__malloc_trim_threshold>:
20000dec:	00020000                                ....
