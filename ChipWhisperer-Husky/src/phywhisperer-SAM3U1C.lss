
phywhisperer-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d834  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008d834  0008d834  0001d834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000df0  20000000  0008d83c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000a80  20000df0  0008e62c  00020df0  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020df0  2**0
                  CONTENTS, READONLY
  6 .comment      0000004c  00000000  00000000  00020e19  2**0
                  CONTENTS, READONLY
  7 .debug_info   000247a5  00000000  00000000  00020e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00004b78  00000000  00000000  0004560a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    00008e5a  00000000  00000000  0004a182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000010f0  00000000  00000000  00052fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000f20  00000000  00000000  000540cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001973f  00000000  00000000  00054fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000168f5  00000000  00000000  0006e72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00059c0f  00000000  00000000  00085020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00005904  00000000  00000000  000dec30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 a9 2f 08 00 51 1e 08 00 51 1e 08 00     .@. ./..Q...Q...
   80010:	51 1e 08 00 51 1e 08 00 51 1e 08 00 00 00 00 00     Q...Q...Q.......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 51 1e 08 00     ............Q...
   80030:	51 1e 08 00 00 00 00 00 51 1e 08 00 51 1e 08 00     Q.......Q...Q...
   80040:	51 1e 08 00 51 1e 08 00 51 1e 08 00 51 1e 08 00     Q...Q...Q...Q...
   80050:	51 1e 08 00 51 1e 08 00 51 1e 08 00 51 1e 08 00     Q...Q...Q...Q...
   80060:	51 1e 08 00 51 1e 08 00 91 25 08 00 a9 25 08 00     Q...Q....%...%..
   80070:	51 1e 08 00 cd 1b 08 00 f1 1b 08 00 15 1c 08 00     Q...............
   80080:	51 1e 08 00 51 1e 08 00 51 1e 08 00 51 1e 08 00     Q...Q...Q...Q...
   80090:	51 1e 08 00 51 1e 08 00 51 1e 08 00 51 1e 08 00     Q...Q...Q...Q...
   800a0:	51 1e 08 00 51 1e 08 00 51 1e 08 00 51 1e 08 00     Q...Q...Q...Q...
   800b0:	51 1e 08 00 91 47 08 00 51 1e 08 00                 Q....G..Q...

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000df0 	.word	0x20000df0
   800d8:	00000000 	.word	0x00000000
   800dc:	0008d83c 	.word	0x0008d83c

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000df4 	.word	0x20000df4
   800f8:	0008d83c 	.word	0x0008d83c

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
   80170:	000826c1 	.word	0x000826c1
   80174:	0008272d 	.word	0x0008272d
   80178:	000827a1 	.word	0x000827a1
   8017c:	000827f1 	.word	0x000827f1

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
   801f8:	000826f9 	.word	0x000826f9
   801fc:	00082789 	.word	0x00082789
   80200:	0008283d 	.word	0x0008283d

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b06      	ldr	r3, [pc, #24]	; (802a0 <osc_wait_ready+0x2c>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	bf00      	nop
   80298:	3708      	adds	r7, #8
   8029a:	46bd      	mov	sp, r7
   8029c:	bd80      	pop	{r7, pc}
   8029e:	bf00      	nop
   802a0:	00080181 	.word	0x00080181

000802a4 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a4:	b580      	push	{r7, lr}
   802a6:	b086      	sub	sp, #24
   802a8:	af00      	add	r7, sp, #0
   802aa:	60f8      	str	r0, [r7, #12]
   802ac:	607a      	str	r2, [r7, #4]
   802ae:	603b      	str	r3, [r7, #0]
   802b0:	460b      	mov	r3, r1
   802b2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b4:	687b      	ldr	r3, [r7, #4]
   802b6:	2b00      	cmp	r3, #0
   802b8:	d107      	bne.n	802ca <pll_config_init+0x26>
   802ba:	683b      	ldr	r3, [r7, #0]
   802bc:	2b00      	cmp	r3, #0
   802be:	d104      	bne.n	802ca <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802c0:	68fb      	ldr	r3, [r7, #12]
   802c2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c6:	601a      	str	r2, [r3, #0]
   802c8:	e01a      	b.n	80300 <pll_config_init+0x5c>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802ca:	7afb      	ldrb	r3, [r7, #11]
   802cc:	4618      	mov	r0, r3
   802ce:	4b0e      	ldr	r3, [pc, #56]	; (80308 <pll_config_init+0x64>)
   802d0:	4798      	blx	r3
   802d2:	4602      	mov	r2, r0
   802d4:	687b      	ldr	r3, [r7, #4]
   802d6:	fbb2 f3f3 	udiv	r3, r2, r3
   802da:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802dc:	697b      	ldr	r3, [r7, #20]
   802de:	683a      	ldr	r2, [r7, #0]
   802e0:	fb02 f303 	mul.w	r3, r2, r3
   802e4:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e6:	683b      	ldr	r3, [r7, #0]
   802e8:	3b01      	subs	r3, #1
   802ea:	041a      	lsls	r2, r3, #16
   802ec:	4b07      	ldr	r3, [pc, #28]	; (8030c <pll_config_init+0x68>)
   802ee:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f0:	687a      	ldr	r2, [r7, #4]
   802f2:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f4:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802fa:	68fb      	ldr	r3, [r7, #12]
   802fc:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fe:	bf00      	nop
   80300:	bf00      	nop
   80302:	3718      	adds	r7, #24
   80304:	46bd      	mov	sp, r7
   80306:	bd80      	pop	{r7, pc}
   80308:	00080205 	.word	0x00080205
   8030c:	07ff0000 	.word	0x07ff0000

00080310 <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   80310:	b580      	push	{r7, lr}
   80312:	b082      	sub	sp, #8
   80314:	af00      	add	r7, sp, #0
   80316:	6078      	str	r0, [r7, #4]
   80318:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	2b00      	cmp	r3, #0
   8031e:	d108      	bne.n	80332 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <pll_enable+0x38>)
   80322:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80324:	687b      	ldr	r3, [r7, #4]
   80326:	681b      	ldr	r3, [r3, #0]
   80328:	4a08      	ldr	r2, [pc, #32]	; (8034c <pll_enable+0x3c>)
   8032a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80330:	e005      	b.n	8033e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80332:	687b      	ldr	r3, [r7, #4]
   80334:	681b      	ldr	r3, [r3, #0]
   80336:	4a05      	ldr	r2, [pc, #20]	; (8034c <pll_enable+0x3c>)
   80338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8033c:	61d3      	str	r3, [r2, #28]
}
   8033e:	bf00      	nop
   80340:	3708      	adds	r7, #8
   80342:	46bd      	mov	sp, r7
   80344:	bd80      	pop	{r7, pc}
   80346:	bf00      	nop
   80348:	000828ad 	.word	0x000828ad
   8034c:	400e0400 	.word	0x400e0400

00080350 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80350:	b580      	push	{r7, lr}
   80352:	b082      	sub	sp, #8
   80354:	af00      	add	r7, sp, #0
   80356:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80358:	687b      	ldr	r3, [r7, #4]
   8035a:	2b00      	cmp	r3, #0
   8035c:	d103      	bne.n	80366 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <pll_is_locked+0x24>)
   80360:	4798      	blx	r3
   80362:	4603      	mov	r3, r0
   80364:	e002      	b.n	8036c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80366:	4b04      	ldr	r3, [pc, #16]	; (80378 <pll_is_locked+0x28>)
   80368:	4798      	blx	r3
   8036a:	4603      	mov	r3, r0
	}
}
   8036c:	4618      	mov	r0, r3
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
   80374:	000828c5 	.word	0x000828c5
   80378:	000828f9 	.word	0x000828f9

0008037c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	4603      	mov	r3, r0
   80384:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80386:	79fb      	ldrb	r3, [r7, #7]
   80388:	3b03      	subs	r3, #3
   8038a:	2b04      	cmp	r3, #4
   8038c:	d808      	bhi.n	803a0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038e:	79fb      	ldrb	r3, [r7, #7]
   80390:	4618      	mov	r0, r3
   80392:	4b06      	ldr	r3, [pc, #24]	; (803ac <pll_enable_source+0x30>)
   80394:	4798      	blx	r3
		osc_wait_ready(e_src);
   80396:	79fb      	ldrb	r3, [r7, #7]
   80398:	4618      	mov	r0, r3
   8039a:	4b05      	ldr	r3, [pc, #20]	; (803b0 <pll_enable_source+0x34>)
   8039c:	4798      	blx	r3
		break;
   8039e:	e000      	b.n	803a2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803a0:	bf00      	nop
	}
}
   803a2:	bf00      	nop
   803a4:	3708      	adds	r7, #8
   803a6:	46bd      	mov	sp, r7
   803a8:	bd80      	pop	{r7, pc}
   803aa:	bf00      	nop
   803ac:	000800fd 	.word	0x000800fd
   803b0:	00080275 	.word	0x00080275

000803b4 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b4:	b590      	push	{r4, r7, lr}
   803b6:	b085      	sub	sp, #20
   803b8:	af00      	add	r7, sp, #0
   803ba:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803bc:	6878      	ldr	r0, [r7, #4]
   803be:	4b21      	ldr	r3, [pc, #132]	; (80444 <pll_enable_config_defaults+0x90>)
   803c0:	4798      	blx	r3
   803c2:	4603      	mov	r3, r0
   803c4:	2b00      	cmp	r3, #0
   803c6:	d139      	bne.n	8043c <pll_enable_config_defaults+0x88>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c8:	687b      	ldr	r3, [r7, #4]
   803ca:	2b00      	cmp	r3, #0
   803cc:	d003      	beq.n	803d6 <pll_enable_config_defaults+0x22>
   803ce:	687b      	ldr	r3, [r7, #4]
   803d0:	2b01      	cmp	r3, #1
   803d2:	d015      	beq.n	80400 <pll_enable_config_defaults+0x4c>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803d4:	e024      	b.n	80420 <pll_enable_config_defaults+0x6c>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d6:	2006      	movs	r0, #6
   803d8:	4b1b      	ldr	r3, [pc, #108]	; (80448 <pll_enable_config_defaults+0x94>)
   803da:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803dc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803e0:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x98>)
   803e2:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803e4:	bf00      	nop
   803e6:	4b1a      	ldr	r3, [pc, #104]	; (80450 <pll_enable_config_defaults+0x9c>)
   803e8:	4798      	blx	r3
   803ea:	4603      	mov	r3, r0
   803ec:	2b00      	cmp	r3, #0
   803ee:	d0fa      	beq.n	803e6 <pll_enable_config_defaults+0x32>
		pll_config_init(&pllcfg,
   803f0:	f107 000c 	add.w	r0, r7, #12
   803f4:	2310      	movs	r3, #16
   803f6:	2201      	movs	r2, #1
   803f8:	2106      	movs	r1, #6
   803fa:	4c16      	ldr	r4, [pc, #88]	; (80454 <pll_enable_config_defaults+0xa0>)
   803fc:	47a0      	blx	r4
		break;
   803fe:	e00f      	b.n	80420 <pll_enable_config_defaults+0x6c>
		if (pmc_osc_is_bypassed_main_xtal()) {
   80400:	4b15      	ldr	r3, [pc, #84]	; (80458 <pll_enable_config_defaults+0xa4>)
   80402:	4798      	blx	r3
   80404:	4603      	mov	r3, r0
   80406:	2b00      	cmp	r3, #0
   80408:	d102      	bne.n	80410 <pll_enable_config_defaults+0x5c>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   8040a:	2006      	movs	r0, #6
   8040c:	4b0e      	ldr	r3, [pc, #56]	; (80448 <pll_enable_config_defaults+0x94>)
   8040e:	4798      	blx	r3
		pll_config_init(&pllcfg,
   80410:	f107 000c 	add.w	r0, r7, #12
   80414:	2300      	movs	r3, #0
   80416:	2200      	movs	r2, #0
   80418:	2106      	movs	r1, #6
   8041a:	4c0e      	ldr	r4, [pc, #56]	; (80454 <pll_enable_config_defaults+0xa0>)
   8041c:	47a0      	blx	r4
		break;
   8041e:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   80420:	f107 030c 	add.w	r3, r7, #12
   80424:	6879      	ldr	r1, [r7, #4]
   80426:	4618      	mov	r0, r3
   80428:	4b0c      	ldr	r3, [pc, #48]	; (8045c <pll_enable_config_defaults+0xa8>)
   8042a:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   8042c:	bf00      	nop
   8042e:	6878      	ldr	r0, [r7, #4]
   80430:	4b04      	ldr	r3, [pc, #16]	; (80444 <pll_enable_config_defaults+0x90>)
   80432:	4798      	blx	r3
   80434:	4603      	mov	r3, r0
   80436:	2b00      	cmp	r3, #0
   80438:	d0f9      	beq.n	8042e <pll_enable_config_defaults+0x7a>
   8043a:	e000      	b.n	8043e <pll_enable_config_defaults+0x8a>
		return; // Pll already running
   8043c:	bf00      	nop
}
   8043e:	3714      	adds	r7, #20
   80440:	46bd      	mov	sp, r7
   80442:	bd90      	pop	{r4, r7, pc}
   80444:	00080351 	.word	0x00080351
   80448:	0008037d 	.word	0x0008037d
   8044c:	0008286d 	.word	0x0008286d
   80450:	00082855 	.word	0x00082855
   80454:	000802a5 	.word	0x000802a5
   80458:	00082825 	.word	0x00082825
   8045c:	00080311 	.word	0x00080311

00080460 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   80460:	b580      	push	{r7, lr}
   80462:	b082      	sub	sp, #8
   80464:	af00      	add	r7, sp, #0
   80466:	4603      	mov	r3, r0
   80468:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8046a:	b672      	cpsid	i
}
   8046c:	bf00      	nop
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8046e:	f3bf 8f5f 	dmb	sy
}
   80472:	bf00      	nop
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80474:	4b05      	ldr	r3, [pc, #20]	; (8048c <sleepmgr_sleep+0x2c>)
   80476:	2200      	movs	r2, #0
   80478:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   8047a:	79fb      	ldrb	r3, [r7, #7]
   8047c:	4618      	mov	r0, r3
   8047e:	4b04      	ldr	r3, [pc, #16]	; (80490 <sleepmgr_sleep+0x30>)
   80480:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   80482:	bf00      	nop
   80484:	3708      	adds	r7, #8
   80486:	46bd      	mov	sp, r7
   80488:	bd80      	pop	{r7, pc}
   8048a:	bf00      	nop
   8048c:	20000284 	.word	0x20000284
   80490:	00082aa9 	.word	0x00082aa9

00080494 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80494:	b480      	push	{r7}
   80496:	b083      	sub	sp, #12
   80498:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   8049a:	2300      	movs	r3, #0
   8049c:	71fb      	strb	r3, [r7, #7]
   8049e:	e006      	b.n	804ae <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   804a0:	79fb      	ldrb	r3, [r7, #7]
   804a2:	4a08      	ldr	r2, [pc, #32]	; (804c4 <sleepmgr_init+0x30>)
   804a4:	2100      	movs	r1, #0
   804a6:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   804a8:	79fb      	ldrb	r3, [r7, #7]
   804aa:	3301      	adds	r3, #1
   804ac:	71fb      	strb	r3, [r7, #7]
   804ae:	79fb      	ldrb	r3, [r7, #7]
   804b0:	2b04      	cmp	r3, #4
   804b2:	d9f5      	bls.n	804a0 <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   804b4:	4b03      	ldr	r3, [pc, #12]	; (804c4 <sleepmgr_init+0x30>)
   804b6:	2201      	movs	r2, #1
   804b8:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   804ba:	bf00      	nop
   804bc:	370c      	adds	r7, #12
   804be:	46bd      	mov	sp, r7
   804c0:	bc80      	pop	{r7}
   804c2:	4770      	bx	lr
   804c4:	20001820 	.word	0x20001820

000804c8 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   804c8:	b480      	push	{r7}
   804ca:	b083      	sub	sp, #12
   804cc:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   804ce:	2300      	movs	r3, #0
   804d0:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   804d2:	4b09      	ldr	r3, [pc, #36]	; (804f8 <sleepmgr_get_sleep_mode+0x30>)
   804d4:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   804d6:	e005      	b.n	804e4 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   804d8:	683b      	ldr	r3, [r7, #0]
   804da:	3301      	adds	r3, #1
   804dc:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   804de:	79fb      	ldrb	r3, [r7, #7]
   804e0:	3301      	adds	r3, #1
   804e2:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   804e4:	683b      	ldr	r3, [r7, #0]
   804e6:	781b      	ldrb	r3, [r3, #0]
   804e8:	2b00      	cmp	r3, #0
   804ea:	d0f5      	beq.n	804d8 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   804ec:	79fb      	ldrb	r3, [r7, #7]
}
   804ee:	4618      	mov	r0, r3
   804f0:	370c      	adds	r7, #12
   804f2:	46bd      	mov	sp, r7
   804f4:	bc80      	pop	{r7}
   804f6:	4770      	bx	lr
   804f8:	20001820 	.word	0x20001820

000804fc <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   804fc:	b580      	push	{r7, lr}
   804fe:	b082      	sub	sp, #8
   80500:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;

	//cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   80502:	4b0b      	ldr	r3, [pc, #44]	; (80530 <sleepmgr_enter_sleep+0x34>)
   80504:	4798      	blx	r3
   80506:	4603      	mov	r3, r0
   80508:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   8050a:	79fb      	ldrb	r3, [r7, #7]
   8050c:	2b00      	cmp	r3, #0
   8050e:	d108      	bne.n	80522 <sleepmgr_enter_sleep+0x26>
		cpu_irq_enable();
   80510:	4b08      	ldr	r3, [pc, #32]	; (80534 <sleepmgr_enter_sleep+0x38>)
   80512:	2201      	movs	r2, #1
   80514:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   80516:	f3bf 8f5f 	dmb	sy
}
   8051a:	bf00      	nop
  __ASM volatile ("cpsie i");
   8051c:	b662      	cpsie	i
}
   8051e:	bf00      	nop
		return;
   80520:	e003      	b.n	8052a <sleepmgr_enter_sleep+0x2e>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   80522:	79fb      	ldrb	r3, [r7, #7]
   80524:	4618      	mov	r0, r3
   80526:	4b04      	ldr	r3, [pc, #16]	; (80538 <sleepmgr_enter_sleep+0x3c>)
   80528:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   8052a:	3708      	adds	r7, #8
   8052c:	46bd      	mov	sp, r7
   8052e:	bd80      	pop	{r7, pc}
   80530:	000804c9 	.word	0x000804c9
   80534:	20000284 	.word	0x20000284
   80538:	00080461 	.word	0x00080461

0008053c <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   8053c:	b480      	push	{r7}
   8053e:	b083      	sub	sp, #12
   80540:	af00      	add	r7, sp, #0
   80542:	6078      	str	r0, [r7, #4]
   80544:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   80546:	687b      	ldr	r3, [r7, #4]
   80548:	2200      	movs	r2, #0
   8054a:	601a      	str	r2, [r3, #0]
}
   8054c:	bf00      	nop
   8054e:	370c      	adds	r7, #12
   80550:	46bd      	mov	sp, r7
   80552:	bc80      	pop	{r7}
   80554:	4770      	bx	lr
   80556:	0000      	movs	r0, r0

00080558 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80558:	b480      	push	{r7}
   8055a:	b083      	sub	sp, #12
   8055c:	af00      	add	r7, sp, #0
   8055e:	6078      	str	r0, [r7, #4]
   80560:	460b      	mov	r3, r1
   80562:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   80564:	687b      	ldr	r3, [r7, #4]
   80566:	681b      	ldr	r3, [r3, #0]
   80568:	f023 0207 	bic.w	r2, r3, #7
   8056c:	687b      	ldr	r3, [r7, #4]
   8056e:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   80570:	78fb      	ldrb	r3, [r7, #3]
   80572:	2b0a      	cmp	r3, #10
   80574:	d839      	bhi.n	805ea <genclk_config_set_source+0x92>
   80576:	a201      	add	r2, pc, #4	; (adr r2, 8057c <genclk_config_set_source+0x24>)
   80578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8057c:	000805a9 	.word	0x000805a9
   80580:	000805a9 	.word	0x000805a9
   80584:	000805a9 	.word	0x000805a9
   80588:	000805b3 	.word	0x000805b3
   8058c:	000805b3 	.word	0x000805b3
   80590:	000805b3 	.word	0x000805b3
   80594:	000805b3 	.word	0x000805b3
   80598:	000805b3 	.word	0x000805b3
   8059c:	000805c1 	.word	0x000805c1
   805a0:	000805cf 	.word	0x000805cf
   805a4:	000805dd 	.word	0x000805dd
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   805a8:	687b      	ldr	r3, [r7, #4]
   805aa:	681a      	ldr	r2, [r3, #0]
   805ac:	687b      	ldr	r3, [r7, #4]
   805ae:	601a      	str	r2, [r3, #0]
		break;
   805b0:	e01b      	b.n	805ea <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   805b2:	687b      	ldr	r3, [r7, #4]
   805b4:	681b      	ldr	r3, [r3, #0]
   805b6:	f043 0201 	orr.w	r2, r3, #1
   805ba:	687b      	ldr	r3, [r7, #4]
   805bc:	601a      	str	r2, [r3, #0]
		break;
   805be:	e014      	b.n	805ea <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   805c0:	687b      	ldr	r3, [r7, #4]
   805c2:	681b      	ldr	r3, [r3, #0]
   805c4:	f043 0202 	orr.w	r2, r3, #2
   805c8:	687b      	ldr	r3, [r7, #4]
   805ca:	601a      	str	r2, [r3, #0]
		break;
   805cc:	e00d      	b.n	805ea <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   805ce:	687b      	ldr	r3, [r7, #4]
   805d0:	681b      	ldr	r3, [r3, #0]
   805d2:	f043 0203 	orr.w	r2, r3, #3
   805d6:	687b      	ldr	r3, [r7, #4]
   805d8:	601a      	str	r2, [r3, #0]
		break;
   805da:	e006      	b.n	805ea <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   805dc:	687b      	ldr	r3, [r7, #4]
   805de:	681b      	ldr	r3, [r3, #0]
   805e0:	f043 0204 	orr.w	r2, r3, #4
   805e4:	687b      	ldr	r3, [r7, #4]
   805e6:	601a      	str	r2, [r3, #0]
		break;
   805e8:	bf00      	nop
	}
}
   805ea:	bf00      	nop
   805ec:	370c      	adds	r7, #12
   805ee:	46bd      	mov	sp, r7
   805f0:	bc80      	pop	{r7}
   805f2:	4770      	bx	lr

000805f4 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   805f4:	b480      	push	{r7}
   805f6:	b083      	sub	sp, #12
   805f8:	af00      	add	r7, sp, #0
   805fa:	6078      	str	r0, [r7, #4]
   805fc:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   805fe:	687b      	ldr	r3, [r7, #4]
   80600:	681b      	ldr	r3, [r3, #0]
   80602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   80606:	687b      	ldr	r3, [r7, #4]
   80608:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   8060a:	687b      	ldr	r3, [r7, #4]
   8060c:	681a      	ldr	r2, [r3, #0]
   8060e:	683b      	ldr	r3, [r7, #0]
   80610:	431a      	orrs	r2, r3
   80612:	687b      	ldr	r3, [r7, #4]
   80614:	601a      	str	r2, [r3, #0]
}
   80616:	bf00      	nop
   80618:	370c      	adds	r7, #12
   8061a:	46bd      	mov	sp, r7
   8061c:	bc80      	pop	{r7}
   8061e:	4770      	bx	lr

00080620 <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80620:	b580      	push	{r7, lr}
   80622:	b082      	sub	sp, #8
   80624:	af00      	add	r7, sp, #0
   80626:	6078      	str	r0, [r7, #4]
   80628:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   8062a:	4907      	ldr	r1, [pc, #28]	; (80648 <genclk_enable+0x28>)
   8062c:	687b      	ldr	r3, [r7, #4]
   8062e:	681a      	ldr	r2, [r3, #0]
   80630:	683b      	ldr	r3, [r7, #0]
   80632:	3310      	adds	r3, #16
   80634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80638:	6838      	ldr	r0, [r7, #0]
   8063a:	4b04      	ldr	r3, [pc, #16]	; (8064c <genclk_enable+0x2c>)
   8063c:	4798      	blx	r3
}
   8063e:	bf00      	nop
   80640:	3708      	adds	r7, #8
   80642:	46bd      	mov	sp, r7
   80644:	bd80      	pop	{r7, pc}
   80646:	bf00      	nop
   80648:	400e0400 	.word	0x400e0400
   8064c:	000829a9 	.word	0x000829a9

00080650 <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   80650:	b580      	push	{r7, lr}
   80652:	b082      	sub	sp, #8
   80654:	af00      	add	r7, sp, #0
   80656:	4603      	mov	r3, r0
   80658:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8065a:	79fb      	ldrb	r3, [r7, #7]
   8065c:	2b0a      	cmp	r3, #10
   8065e:	f200 80a2 	bhi.w	807a6 <genclk_enable_source+0x156>
   80662:	a201      	add	r2, pc, #4	; (adr r2, 80668 <genclk_enable_source+0x18>)
   80664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80668:	00080695 	.word	0x00080695
   8066c:	000806b7 	.word	0x000806b7
   80670:	000806d7 	.word	0x000806d7
   80674:	000806f7 	.word	0x000806f7
   80678:	00080717 	.word	0x00080717
   8067c:	00080737 	.word	0x00080737
   80680:	00080757 	.word	0x00080757
   80684:	00080777 	.word	0x00080777
   80688:	00080797 	.word	0x00080797
   8068c:	0008079f 	.word	0x0008079f
   80690:	000807a7 	.word	0x000807a7
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   80694:	2000      	movs	r0, #0
   80696:	4b4e      	ldr	r3, [pc, #312]	; (807d0 <genclk_enable_source+0x180>)
   80698:	4798      	blx	r3
   8069a:	4603      	mov	r3, r0
   8069c:	f083 0301 	eor.w	r3, r3, #1
   806a0:	b2db      	uxtb	r3, r3
   806a2:	2b00      	cmp	r3, #0
   806a4:	f000 8081 	beq.w	807aa <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   806a8:	2000      	movs	r0, #0
   806aa:	4b4a      	ldr	r3, [pc, #296]	; (807d4 <genclk_enable_source+0x184>)
   806ac:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   806ae:	2000      	movs	r0, #0
   806b0:	4b49      	ldr	r3, [pc, #292]	; (807d8 <genclk_enable_source+0x188>)
   806b2:	4798      	blx	r3
		}
		break;
   806b4:	e079      	b.n	807aa <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   806b6:	2001      	movs	r0, #1
   806b8:	4b45      	ldr	r3, [pc, #276]	; (807d0 <genclk_enable_source+0x180>)
   806ba:	4798      	blx	r3
   806bc:	4603      	mov	r3, r0
   806be:	f083 0301 	eor.w	r3, r3, #1
   806c2:	b2db      	uxtb	r3, r3
   806c4:	2b00      	cmp	r3, #0
   806c6:	d072      	beq.n	807ae <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   806c8:	2001      	movs	r0, #1
   806ca:	4b42      	ldr	r3, [pc, #264]	; (807d4 <genclk_enable_source+0x184>)
   806cc:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   806ce:	2001      	movs	r0, #1
   806d0:	4b41      	ldr	r3, [pc, #260]	; (807d8 <genclk_enable_source+0x188>)
   806d2:	4798      	blx	r3
		}
		break;
   806d4:	e06b      	b.n	807ae <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   806d6:	2002      	movs	r0, #2
   806d8:	4b3d      	ldr	r3, [pc, #244]	; (807d0 <genclk_enable_source+0x180>)
   806da:	4798      	blx	r3
   806dc:	4603      	mov	r3, r0
   806de:	f083 0301 	eor.w	r3, r3, #1
   806e2:	b2db      	uxtb	r3, r3
   806e4:	2b00      	cmp	r3, #0
   806e6:	d064      	beq.n	807b2 <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   806e8:	2002      	movs	r0, #2
   806ea:	4b3a      	ldr	r3, [pc, #232]	; (807d4 <genclk_enable_source+0x184>)
   806ec:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   806ee:	2002      	movs	r0, #2
   806f0:	4b39      	ldr	r3, [pc, #228]	; (807d8 <genclk_enable_source+0x188>)
   806f2:	4798      	blx	r3
		}
		break;
   806f4:	e05d      	b.n	807b2 <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   806f6:	2003      	movs	r0, #3
   806f8:	4b35      	ldr	r3, [pc, #212]	; (807d0 <genclk_enable_source+0x180>)
   806fa:	4798      	blx	r3
   806fc:	4603      	mov	r3, r0
   806fe:	f083 0301 	eor.w	r3, r3, #1
   80702:	b2db      	uxtb	r3, r3
   80704:	2b00      	cmp	r3, #0
   80706:	d056      	beq.n	807b6 <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   80708:	2003      	movs	r0, #3
   8070a:	4b32      	ldr	r3, [pc, #200]	; (807d4 <genclk_enable_source+0x184>)
   8070c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   8070e:	2003      	movs	r0, #3
   80710:	4b31      	ldr	r3, [pc, #196]	; (807d8 <genclk_enable_source+0x188>)
   80712:	4798      	blx	r3
		}
		break;
   80714:	e04f      	b.n	807b6 <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   80716:	2004      	movs	r0, #4
   80718:	4b2d      	ldr	r3, [pc, #180]	; (807d0 <genclk_enable_source+0x180>)
   8071a:	4798      	blx	r3
   8071c:	4603      	mov	r3, r0
   8071e:	f083 0301 	eor.w	r3, r3, #1
   80722:	b2db      	uxtb	r3, r3
   80724:	2b00      	cmp	r3, #0
   80726:	d048      	beq.n	807ba <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   80728:	2004      	movs	r0, #4
   8072a:	4b2a      	ldr	r3, [pc, #168]	; (807d4 <genclk_enable_source+0x184>)
   8072c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   8072e:	2004      	movs	r0, #4
   80730:	4b29      	ldr	r3, [pc, #164]	; (807d8 <genclk_enable_source+0x188>)
   80732:	4798      	blx	r3
		}
		break;
   80734:	e041      	b.n	807ba <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   80736:	2005      	movs	r0, #5
   80738:	4b25      	ldr	r3, [pc, #148]	; (807d0 <genclk_enable_source+0x180>)
   8073a:	4798      	blx	r3
   8073c:	4603      	mov	r3, r0
   8073e:	f083 0301 	eor.w	r3, r3, #1
   80742:	b2db      	uxtb	r3, r3
   80744:	2b00      	cmp	r3, #0
   80746:	d03a      	beq.n	807be <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80748:	2005      	movs	r0, #5
   8074a:	4b22      	ldr	r3, [pc, #136]	; (807d4 <genclk_enable_source+0x184>)
   8074c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   8074e:	2005      	movs	r0, #5
   80750:	4b21      	ldr	r3, [pc, #132]	; (807d8 <genclk_enable_source+0x188>)
   80752:	4798      	blx	r3
		}
		break;
   80754:	e033      	b.n	807be <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   80756:	2006      	movs	r0, #6
   80758:	4b1d      	ldr	r3, [pc, #116]	; (807d0 <genclk_enable_source+0x180>)
   8075a:	4798      	blx	r3
   8075c:	4603      	mov	r3, r0
   8075e:	f083 0301 	eor.w	r3, r3, #1
   80762:	b2db      	uxtb	r3, r3
   80764:	2b00      	cmp	r3, #0
   80766:	d02c      	beq.n	807c2 <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   80768:	2006      	movs	r0, #6
   8076a:	4b1a      	ldr	r3, [pc, #104]	; (807d4 <genclk_enable_source+0x184>)
   8076c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   8076e:	2006      	movs	r0, #6
   80770:	4b19      	ldr	r3, [pc, #100]	; (807d8 <genclk_enable_source+0x188>)
   80772:	4798      	blx	r3
		}
		break;
   80774:	e025      	b.n	807c2 <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   80776:	2007      	movs	r0, #7
   80778:	4b15      	ldr	r3, [pc, #84]	; (807d0 <genclk_enable_source+0x180>)
   8077a:	4798      	blx	r3
   8077c:	4603      	mov	r3, r0
   8077e:	f083 0301 	eor.w	r3, r3, #1
   80782:	b2db      	uxtb	r3, r3
   80784:	2b00      	cmp	r3, #0
   80786:	d01e      	beq.n	807c6 <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   80788:	2007      	movs	r0, #7
   8078a:	4b12      	ldr	r3, [pc, #72]	; (807d4 <genclk_enable_source+0x184>)
   8078c:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   8078e:	2007      	movs	r0, #7
   80790:	4b11      	ldr	r3, [pc, #68]	; (807d8 <genclk_enable_source+0x188>)
   80792:	4798      	blx	r3
		}
		break;
   80794:	e017      	b.n	807c6 <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   80796:	2000      	movs	r0, #0
   80798:	4b10      	ldr	r3, [pc, #64]	; (807dc <genclk_enable_source+0x18c>)
   8079a:	4798      	blx	r3
		break;
   8079c:	e014      	b.n	807c8 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   8079e:	2001      	movs	r0, #1
   807a0:	4b0e      	ldr	r3, [pc, #56]	; (807dc <genclk_enable_source+0x18c>)
   807a2:	4798      	blx	r3
		break;
   807a4:	e010      	b.n	807c8 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   807a6:	bf00      	nop
   807a8:	e00e      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807aa:	bf00      	nop
   807ac:	e00c      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807ae:	bf00      	nop
   807b0:	e00a      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807b2:	bf00      	nop
   807b4:	e008      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807b6:	bf00      	nop
   807b8:	e006      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807ba:	bf00      	nop
   807bc:	e004      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807be:	bf00      	nop
   807c0:	e002      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807c2:	bf00      	nop
   807c4:	e000      	b.n	807c8 <genclk_enable_source+0x178>
		break;
   807c6:	bf00      	nop
	}
}
   807c8:	bf00      	nop
   807ca:	3708      	adds	r7, #8
   807cc:	46bd      	mov	sp, r7
   807ce:	bd80      	pop	{r7, pc}
   807d0:	00080181 	.word	0x00080181
   807d4:	000800fd 	.word	0x000800fd
   807d8:	00080275 	.word	0x00080275
   807dc:	000803b5 	.word	0x000803b5

000807e0 <phywhisperer_setup_pins>:
//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";


void phywhisperer_setup_pins(void)
{
   807e0:	b580      	push	{r7, lr}
   807e2:	af00      	add	r7, sp, #0
    board_init();
   807e4:	4b3f      	ldr	r3, [pc, #252]	; (808e4 <phywhisperer_setup_pins+0x104>)
   807e6:	4798      	blx	r3

    
    //Configure FPGA to allow programming via USB
    fpga_program_init();
   807e8:	4b3f      	ldr	r3, [pc, #252]	; (808e8 <phywhisperer_setup_pins+0x108>)
   807ea:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   807ec:	2009      	movs	r0, #9
   807ee:	4b3f      	ldr	r3, [pc, #252]	; (808ec <phywhisperer_setup_pins+0x10c>)
   807f0:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   807f2:	493f      	ldr	r1, [pc, #252]	; (808f0 <phywhisperer_setup_pins+0x110>)
   807f4:	2029      	movs	r0, #41	; 0x29
   807f6:	4b3f      	ldr	r3, [pc, #252]	; (808f4 <phywhisperer_setup_pins+0x114>)
   807f8:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   807fa:	493d      	ldr	r1, [pc, #244]	; (808f0 <phywhisperer_setup_pins+0x110>)
   807fc:	202a      	movs	r0, #42	; 0x2a
   807fe:	4b3d      	ldr	r3, [pc, #244]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80800:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   80802:	493b      	ldr	r1, [pc, #236]	; (808f0 <phywhisperer_setup_pins+0x110>)
   80804:	202b      	movs	r0, #43	; 0x2b
   80806:	4b3b      	ldr	r3, [pc, #236]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80808:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   8080a:	4939      	ldr	r1, [pc, #228]	; (808f0 <phywhisperer_setup_pins+0x110>)
   8080c:	202c      	movs	r0, #44	; 0x2c
   8080e:	4b39      	ldr	r3, [pc, #228]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80810:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   80812:	4937      	ldr	r1, [pc, #220]	; (808f0 <phywhisperer_setup_pins+0x110>)
   80814:	202d      	movs	r0, #45	; 0x2d
   80816:	4b37      	ldr	r3, [pc, #220]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80818:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   8081a:	4935      	ldr	r1, [pc, #212]	; (808f0 <phywhisperer_setup_pins+0x110>)
   8081c:	202e      	movs	r0, #46	; 0x2e
   8081e:	4b35      	ldr	r3, [pc, #212]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80820:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80822:	4933      	ldr	r1, [pc, #204]	; (808f0 <phywhisperer_setup_pins+0x110>)
   80824:	202f      	movs	r0, #47	; 0x2f
   80826:	4b33      	ldr	r3, [pc, #204]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80828:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   8082a:	4931      	ldr	r1, [pc, #196]	; (808f0 <phywhisperer_setup_pins+0x110>)
   8082c:	2030      	movs	r0, #48	; 0x30
   8082e:	4b31      	ldr	r3, [pc, #196]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80830:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   80832:	492f      	ldr	r1, [pc, #188]	; (808f0 <phywhisperer_setup_pins+0x110>)
   80834:	2033      	movs	r0, #51	; 0x33
   80836:	4b2f      	ldr	r3, [pc, #188]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80838:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   8083a:	492d      	ldr	r1, [pc, #180]	; (808f0 <phywhisperer_setup_pins+0x110>)
   8083c:	2037      	movs	r0, #55	; 0x37
   8083e:	4b2d      	ldr	r3, [pc, #180]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80840:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80842:	492b      	ldr	r1, [pc, #172]	; (808f0 <phywhisperer_setup_pins+0x110>)
   80844:	2034      	movs	r0, #52	; 0x34
   80846:	4b2b      	ldr	r3, [pc, #172]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80848:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   8084a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   8084e:	f240 11bf 	movw	r1, #447	; 0x1bf
   80852:	4829      	ldr	r0, [pc, #164]	; (808f8 <phywhisperer_setup_pins+0x118>)
   80854:	4b29      	ldr	r3, [pc, #164]	; (808fc <phywhisperer_setup_pins+0x11c>)
   80856:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   80858:	f240 11bf 	movw	r1, #447	; 0x1bf
   8085c:	4826      	ldr	r0, [pc, #152]	; (808f8 <phywhisperer_setup_pins+0x118>)
   8085e:	4b28      	ldr	r3, [pc, #160]	; (80900 <phywhisperer_setup_pins+0x120>)
   80860:	4798      	blx	r3

    gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_ADDR_BUS_FLAG1);
   80862:	4928      	ldr	r1, [pc, #160]	; (80904 <phywhisperer_setup_pins+0x124>)
   80864:	2027      	movs	r0, #39	; 0x27
   80866:	4b23      	ldr	r3, [pc, #140]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80868:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_ADDR_BUS_FLAG1);
   8086a:	4926      	ldr	r1, [pc, #152]	; (80904 <phywhisperer_setup_pins+0x124>)
   8086c:	2028      	movs	r0, #40	; 0x28
   8086e:	4b21      	ldr	r3, [pc, #132]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80870:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_ADDR_BUS_FLAG1);
   80872:	4924      	ldr	r1, [pc, #144]	; (80904 <phywhisperer_setup_pins+0x124>)
   80874:	2020      	movs	r0, #32
   80876:	4b1f      	ldr	r3, [pc, #124]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80878:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_ADDR_BUS_FLAG1);
   8087a:	4922      	ldr	r1, [pc, #136]	; (80904 <phywhisperer_setup_pins+0x124>)
   8087c:	2021      	movs	r0, #33	; 0x21
   8087e:	4b1d      	ldr	r3, [pc, #116]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80880:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_ADDR_BUS_FLAG1);
   80882:	4920      	ldr	r1, [pc, #128]	; (80904 <phywhisperer_setup_pins+0x124>)
   80884:	2022      	movs	r0, #34	; 0x22
   80886:	4b1b      	ldr	r3, [pc, #108]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80888:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
   8088a:	491e      	ldr	r1, [pc, #120]	; (80904 <phywhisperer_setup_pins+0x124>)
   8088c:	2023      	movs	r0, #35	; 0x23
   8088e:	4b19      	ldr	r3, [pc, #100]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80890:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
   80892:	491c      	ldr	r1, [pc, #112]	; (80904 <phywhisperer_setup_pins+0x124>)
   80894:	2024      	movs	r0, #36	; 0x24
   80896:	4b17      	ldr	r3, [pc, #92]	; (808f4 <phywhisperer_setup_pins+0x114>)
   80898:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
   8089a:	491a      	ldr	r1, [pc, #104]	; (80904 <phywhisperer_setup_pins+0x124>)
   8089c:	2025      	movs	r0, #37	; 0x25
   8089e:	4b15      	ldr	r3, [pc, #84]	; (808f4 <phywhisperer_setup_pins+0x114>)
   808a0:	4798      	blx	r3

    gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
   808a2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   808a6:	2026      	movs	r0, #38	; 0x26
   808a8:	4b12      	ldr	r3, [pc, #72]	; (808f4 <phywhisperer_setup_pins+0x114>)
   808aa:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   808ac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808b0:	2031      	movs	r0, #49	; 0x31
   808b2:	4b10      	ldr	r3, [pc, #64]	; (808f4 <phywhisperer_setup_pins+0x114>)
   808b4:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   808b6:	2200      	movs	r2, #0
   808b8:	2100      	movs	r1, #0
   808ba:	4813      	ldr	r0, [pc, #76]	; (80908 <phywhisperer_setup_pins+0x128>)
   808bc:	4b13      	ldr	r3, [pc, #76]	; (8090c <phywhisperer_setup_pins+0x12c>)
   808be:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(0)
                         | SMC_SETUP_NRD_SETUP(0)
                         | SMC_SETUP_NCS_RD_SETUP(0));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(0)
   808c0:	2200      	movs	r2, #0
   808c2:	2100      	movs	r1, #0
   808c4:	4810      	ldr	r0, [pc, #64]	; (80908 <phywhisperer_setup_pins+0x128>)
   808c6:	4b12      	ldr	r3, [pc, #72]	; (80910 <phywhisperer_setup_pins+0x130>)
   808c8:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(0)
                         | SMC_PULSE_NRD_PULSE(0)
                         | SMC_PULSE_NCS_RD_PULSE(0));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(1)
   808ca:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   808ce:	2100      	movs	r1, #0
   808d0:	480d      	ldr	r0, [pc, #52]	; (80908 <phywhisperer_setup_pins+0x128>)
   808d2:	4b10      	ldr	r3, [pc, #64]	; (80914 <phywhisperer_setup_pins+0x134>)
   808d4:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(1));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   808d6:	2203      	movs	r2, #3
   808d8:	2100      	movs	r1, #0
   808da:	480b      	ldr	r0, [pc, #44]	; (80908 <phywhisperer_setup_pins+0x128>)
   808dc:	4b0e      	ldr	r3, [pc, #56]	; (80918 <phywhisperer_setup_pins+0x138>)
   808de:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   808e0:	bf00      	nop
   808e2:	bd80      	pop	{r7, pc}
   808e4:	00081f4d 	.word	0x00081f4d
   808e8:	000813e1 	.word	0x000813e1
   808ec:	00082911 	.word	0x00082911
   808f0:	08000001 	.word	0x08000001
   808f4:	000822ad 	.word	0x000822ad
   808f8:	400e0e00 	.word	0x400e0e00
   808fc:	000823dd 	.word	0x000823dd
   80900:	000821b9 	.word	0x000821b9
   80904:	10000001 	.word	0x10000001
   80908:	400e0000 	.word	0x400e0000
   8090c:	00082f01 	.word	0x00082f01
   80910:	00082f2b 	.word	0x00082f2b
   80914:	00082f55 	.word	0x00082f55
   80918:	00082f7f 	.word	0x00082f7f

0008091c <genclk_enable_config>:
{
    for (volatile uint32_t i = 0; i < 250000; i++);
}

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   8091c:	b580      	push	{r7, lr}
   8091e:	b086      	sub	sp, #24
   80920:	af00      	add	r7, sp, #0
   80922:	60f8      	str	r0, [r7, #12]
   80924:	460b      	mov	r3, r1
   80926:	607a      	str	r2, [r7, #4]
   80928:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   8092a:	f107 0314 	add.w	r3, r7, #20
   8092e:	68f9      	ldr	r1, [r7, #12]
   80930:	4618      	mov	r0, r3
   80932:	4b0e      	ldr	r3, [pc, #56]	; (8096c <genclk_enable_config+0x50>)
   80934:	4798      	blx	r3
    genclk_enable_source(src);
   80936:	7afb      	ldrb	r3, [r7, #11]
   80938:	4618      	mov	r0, r3
   8093a:	4b0d      	ldr	r3, [pc, #52]	; (80970 <genclk_enable_config+0x54>)
   8093c:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   8093e:	7afa      	ldrb	r2, [r7, #11]
   80940:	f107 0314 	add.w	r3, r7, #20
   80944:	4611      	mov	r1, r2
   80946:	4618      	mov	r0, r3
   80948:	4b0a      	ldr	r3, [pc, #40]	; (80974 <genclk_enable_config+0x58>)
   8094a:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   8094c:	f107 0314 	add.w	r3, r7, #20
   80950:	6879      	ldr	r1, [r7, #4]
   80952:	4618      	mov	r0, r3
   80954:	4b08      	ldr	r3, [pc, #32]	; (80978 <genclk_enable_config+0x5c>)
   80956:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80958:	f107 0314 	add.w	r3, r7, #20
   8095c:	68f9      	ldr	r1, [r7, #12]
   8095e:	4618      	mov	r0, r3
   80960:	4b06      	ldr	r3, [pc, #24]	; (8097c <genclk_enable_config+0x60>)
   80962:	4798      	blx	r3
}
   80964:	bf00      	nop
   80966:	3718      	adds	r7, #24
   80968:	46bd      	mov	sp, r7
   8096a:	bd80      	pop	{r7, pc}
   8096c:	0008053d 	.word	0x0008053d
   80970:	00080651 	.word	0x00080651
   80974:	00080559 	.word	0x00080559
   80978:	000805f5 	.word	0x000805f5
   8097c:	00080621 	.word	0x00080621

00080980 <main>:


int main(void)
{
   80980:	b580      	push	{r7, lr}
   80982:	b086      	sub	sp, #24
   80984:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80986:	463b      	mov	r3, r7
   80988:	2110      	movs	r1, #16
   8098a:	4618      	mov	r0, r3
   8098c:	4b1d      	ldr	r3, [pc, #116]	; (80a04 <main+0x84>)
   8098e:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80990:	4b1d      	ldr	r3, [pc, #116]	; (80a08 <main+0x88>)
   80992:	2201      	movs	r2, #1
   80994:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   80996:	f3bf 8f5f 	dmb	sy
}
   8099a:	bf00      	nop
  __ASM volatile ("cpsie i");
   8099c:	b662      	cpsie	i
}
   8099e:	bf00      	nop

    // Initialize the sleep manager
    sleepmgr_init();
   809a0:	4b1a      	ldr	r3, [pc, #104]	; (80a0c <main+0x8c>)
   809a2:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   809a4:	4b1a      	ldr	r3, [pc, #104]	; (80a10 <main+0x90>)
   809a6:	4798      	blx	r3
    phywhisperer_setup_pins();
   809a8:	4b1a      	ldr	r3, [pc, #104]	; (80a14 <main+0x94>)
   809aa:	4798      	blx	r3
#else
    system_init();
#endif

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   809ac:	2300      	movs	r3, #0
   809ae:	617b      	str	r3, [r7, #20]
   809b0:	e011      	b.n	809d6 <main+0x56>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   809b2:	697b      	ldr	r3, [r7, #20]
   809b4:	00db      	lsls	r3, r3, #3
   809b6:	4a18      	ldr	r2, [pc, #96]	; (80a18 <main+0x98>)
   809b8:	1898      	adds	r0, r3, r2
   809ba:	697b      	ldr	r3, [r7, #20]
   809bc:	009b      	lsls	r3, r3, #2
   809be:	f107 0218 	add.w	r2, r7, #24
   809c2:	4413      	add	r3, r2
   809c4:	f853 3c18 	ldr.w	r3, [r3, #-24]
   809c8:	461a      	mov	r2, r3
   809ca:	4914      	ldr	r1, [pc, #80]	; (80a1c <main+0x9c>)
   809cc:	4b14      	ldr	r3, [pc, #80]	; (80a20 <main+0xa0>)
   809ce:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   809d0:	697b      	ldr	r3, [r7, #20]
   809d2:	3301      	adds	r3, #1
   809d4:	617b      	str	r3, [r7, #20]
   809d6:	697b      	ldr	r3, [r7, #20]
   809d8:	2b03      	cmp	r3, #3
   809da:	d9ea      	bls.n	809b2 <main+0x32>
	}
	usb_serial_number[32] = 0;
   809dc:	4b0e      	ldr	r3, [pc, #56]	; (80a18 <main+0x98>)
   809de:	2200      	movs	r2, #0
   809e0:	f883 2020 	strb.w	r2, [r3, #32]

    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   809e4:	2200      	movs	r2, #0
   809e6:	210a      	movs	r1, #10
   809e8:	2001      	movs	r0, #1
   809ea:	4b0e      	ldr	r3, [pc, #56]	; (80a24 <main+0xa4>)
   809ec:	4798      	blx	r3
    udc_start();
   809ee:	4b0e      	ldr	r3, [pc, #56]	; (80a28 <main+0xa8>)
   809f0:	4798      	blx	r3

    USB_PWR_STATE = 0;
   809f2:	4b0e      	ldr	r3, [pc, #56]	; (80a2c <main+0xac>)
   809f4:	2200      	movs	r2, #0
   809f6:	701a      	strb	r2, [r3, #0]

    uint8_t curr_pwr_setting = 0;
   809f8:	2300      	movs	r3, #0
   809fa:	74fb      	strb	r3, [r7, #19]
    while(1) {
        sleepmgr_enter_sleep();
   809fc:	4b0c      	ldr	r3, [pc, #48]	; (80a30 <main+0xb0>)
   809fe:	4798      	blx	r3
   80a00:	e7fc      	b.n	809fc <main+0x7c>
   80a02:	bf00      	nop
   80a04:	00081e59 	.word	0x00081e59
   80a08:	20000284 	.word	0x20000284
   80a0c:	00080495 	.word	0x00080495
   80a10:	00083491 	.word	0x00083491
   80a14:	000807e1 	.word	0x000807e1
   80a18:	2000025c 	.word	0x2000025c
   80a1c:	0008d358 	.word	0x0008d358
   80a20:	00086ba5 	.word	0x00086ba5
   80a24:	0008091d 	.word	0x0008091d
   80a28:	0008391d 	.word	0x0008391d
   80a2c:	20000e0c 	.word	0x20000e0c
   80a30:	000804fd 	.word	0x000804fd

00080a34 <osc_enable>:
{
   80a34:	b580      	push	{r7, lr}
   80a36:	b082      	sub	sp, #8
   80a38:	af00      	add	r7, sp, #0
   80a3a:	6078      	str	r0, [r7, #4]
   80a3c:	687b      	ldr	r3, [r7, #4]
   80a3e:	2b07      	cmp	r3, #7
   80a40:	d82e      	bhi.n	80aa0 <osc_enable+0x6c>
   80a42:	a201      	add	r2, pc, #4	; (adr r2, 80a48 <osc_enable+0x14>)
   80a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a48:	00080a9f 	.word	0x00080a9f
   80a4c:	00080a69 	.word	0x00080a69
   80a50:	00080a71 	.word	0x00080a71
   80a54:	00080a79 	.word	0x00080a79
   80a58:	00080a81 	.word	0x00080a81
   80a5c:	00080a89 	.word	0x00080a89
   80a60:	00080a91 	.word	0x00080a91
   80a64:	00080a99 	.word	0x00080a99
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80a68:	2000      	movs	r0, #0
   80a6a:	4b0f      	ldr	r3, [pc, #60]	; (80aa8 <osc_enable+0x74>)
   80a6c:	4798      	blx	r3
		break;
   80a6e:	e017      	b.n	80aa0 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80a70:	2001      	movs	r0, #1
   80a72:	4b0d      	ldr	r3, [pc, #52]	; (80aa8 <osc_enable+0x74>)
   80a74:	4798      	blx	r3
		break;
   80a76:	e013      	b.n	80aa0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80a78:	2000      	movs	r0, #0
   80a7a:	4b0c      	ldr	r3, [pc, #48]	; (80aac <osc_enable+0x78>)
   80a7c:	4798      	blx	r3
		break;
   80a7e:	e00f      	b.n	80aa0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80a80:	2010      	movs	r0, #16
   80a82:	4b0a      	ldr	r3, [pc, #40]	; (80aac <osc_enable+0x78>)
   80a84:	4798      	blx	r3
		break;
   80a86:	e00b      	b.n	80aa0 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80a88:	2020      	movs	r0, #32
   80a8a:	4b08      	ldr	r3, [pc, #32]	; (80aac <osc_enable+0x78>)
   80a8c:	4798      	blx	r3
		break;
   80a8e:	e007      	b.n	80aa0 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80a90:	203e      	movs	r0, #62	; 0x3e
   80a92:	4b07      	ldr	r3, [pc, #28]	; (80ab0 <osc_enable+0x7c>)
   80a94:	4798      	blx	r3
		break;
   80a96:	e003      	b.n	80aa0 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   80a98:	4b06      	ldr	r3, [pc, #24]	; (80ab4 <osc_enable+0x80>)
   80a9a:	4798      	blx	r3
		break;
   80a9c:	e000      	b.n	80aa0 <osc_enable+0x6c>
		break;
   80a9e:	bf00      	nop
}
   80aa0:	bf00      	nop
   80aa2:	3708      	adds	r7, #8
   80aa4:	46bd      	mov	sp, r7
   80aa6:	bd80      	pop	{r7, pc}
   80aa8:	000826c1 	.word	0x000826c1
   80aac:	0008272d 	.word	0x0008272d
   80ab0:	000827a1 	.word	0x000827a1
   80ab4:	000827f1 	.word	0x000827f1

00080ab8 <osc_is_ready>:
{
   80ab8:	b580      	push	{r7, lr}
   80aba:	b082      	sub	sp, #8
   80abc:	af00      	add	r7, sp, #0
   80abe:	6078      	str	r0, [r7, #4]
   80ac0:	687b      	ldr	r3, [r7, #4]
   80ac2:	2b07      	cmp	r3, #7
   80ac4:	d82f      	bhi.n	80b26 <osc_is_ready+0x6e>
   80ac6:	a201      	add	r2, pc, #4	; (adr r2, 80acc <osc_is_ready+0x14>)
   80ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80acc:	00080aed 	.word	0x00080aed
   80ad0:	00080af1 	.word	0x00080af1
   80ad4:	00080af1 	.word	0x00080af1
   80ad8:	00080b03 	.word	0x00080b03
   80adc:	00080b03 	.word	0x00080b03
   80ae0:	00080b03 	.word	0x00080b03
   80ae4:	00080b15 	.word	0x00080b15
   80ae8:	00080b15 	.word	0x00080b15
		return 1;
   80aec:	2301      	movs	r3, #1
   80aee:	e01b      	b.n	80b28 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   80af0:	4b0f      	ldr	r3, [pc, #60]	; (80b30 <osc_is_ready+0x78>)
   80af2:	4798      	blx	r3
   80af4:	4603      	mov	r3, r0
   80af6:	2b00      	cmp	r3, #0
   80af8:	bf14      	ite	ne
   80afa:	2301      	movne	r3, #1
   80afc:	2300      	moveq	r3, #0
   80afe:	b2db      	uxtb	r3, r3
   80b00:	e012      	b.n	80b28 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   80b02:	4b0c      	ldr	r3, [pc, #48]	; (80b34 <osc_is_ready+0x7c>)
   80b04:	4798      	blx	r3
   80b06:	4603      	mov	r3, r0
   80b08:	2b00      	cmp	r3, #0
   80b0a:	bf14      	ite	ne
   80b0c:	2301      	movne	r3, #1
   80b0e:	2300      	moveq	r3, #0
   80b10:	b2db      	uxtb	r3, r3
   80b12:	e009      	b.n	80b28 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   80b14:	4b08      	ldr	r3, [pc, #32]	; (80b38 <osc_is_ready+0x80>)
   80b16:	4798      	blx	r3
   80b18:	4603      	mov	r3, r0
   80b1a:	2b00      	cmp	r3, #0
   80b1c:	bf14      	ite	ne
   80b1e:	2301      	movne	r3, #1
   80b20:	2300      	moveq	r3, #0
   80b22:	b2db      	uxtb	r3, r3
   80b24:	e000      	b.n	80b28 <osc_is_ready+0x70>
	return 0;
   80b26:	2300      	movs	r3, #0
}
   80b28:	4618      	mov	r0, r3
   80b2a:	3708      	adds	r7, #8
   80b2c:	46bd      	mov	sp, r7
   80b2e:	bd80      	pop	{r7, pc}
   80b30:	000826f9 	.word	0x000826f9
   80b34:	00082789 	.word	0x00082789
   80b38:	0008283d 	.word	0x0008283d

00080b3c <osc_wait_ready>:
{
   80b3c:	b580      	push	{r7, lr}
   80b3e:	b082      	sub	sp, #8
   80b40:	af00      	add	r7, sp, #0
   80b42:	4603      	mov	r3, r0
   80b44:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80b46:	bf00      	nop
   80b48:	79fb      	ldrb	r3, [r7, #7]
   80b4a:	4618      	mov	r0, r3
   80b4c:	4b06      	ldr	r3, [pc, #24]	; (80b68 <osc_wait_ready+0x2c>)
   80b4e:	4798      	blx	r3
   80b50:	4603      	mov	r3, r0
   80b52:	f083 0301 	eor.w	r3, r3, #1
   80b56:	b2db      	uxtb	r3, r3
   80b58:	2b00      	cmp	r3, #0
   80b5a:	d1f5      	bne.n	80b48 <osc_wait_ready+0xc>
}
   80b5c:	bf00      	nop
   80b5e:	bf00      	nop
   80b60:	3708      	adds	r7, #8
   80b62:	46bd      	mov	sp, r7
   80b64:	bd80      	pop	{r7, pc}
   80b66:	bf00      	nop
   80b68:	00080ab9 	.word	0x00080ab9

00080b6c <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   80b6c:	b580      	push	{r7, lr}
   80b6e:	af00      	add	r7, sp, #0
	udd_detach();
   80b70:	4b01      	ldr	r3, [pc, #4]	; (80b78 <udc_detach+0xc>)
   80b72:	4798      	blx	r3
}
   80b74:	bf00      	nop
   80b76:	bd80      	pop	{r7, pc}
   80b78:	00084aa9 	.word	0x00084aa9

00080b7c <main_suspend_action>:
void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   80b7c:	b480      	push	{r7}
   80b7e:	af00      	add	r7, sp, #0
}
   80b80:	bf00      	nop
   80b82:	46bd      	mov	sp, r7
   80b84:	bc80      	pop	{r7}
   80b86:	4770      	bx	lr

00080b88 <main_resume_action>:

void main_resume_action(void)
{
   80b88:	b480      	push	{r7}
   80b8a:	af00      	add	r7, sp, #0
}
   80b8c:	bf00      	nop
   80b8e:	46bd      	mov	sp, r7
   80b90:	bc80      	pop	{r7}
   80b92:	4770      	bx	lr

00080b94 <main_sof_action>:

void main_sof_action(void)
{
   80b94:	b480      	push	{r7}
   80b96:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   80b98:	4b04      	ldr	r3, [pc, #16]	; (80bac <main_sof_action+0x18>)
   80b9a:	781b      	ldrb	r3, [r3, #0]
   80b9c:	b2db      	uxtb	r3, r3
   80b9e:	f083 0301 	eor.w	r3, r3, #1
   80ba2:	b2db      	uxtb	r3, r3
   80ba4:	2b00      	cmp	r3, #0
        return;
}
   80ba6:	46bd      	mov	sp, r7
   80ba8:	bc80      	pop	{r7}
   80baa:	4770      	bx	lr
   80bac:	2000027d 	.word	0x2000027d

00080bb0 <main_vendor_enable>:

bool main_vendor_enable(void)
{
   80bb0:	b580      	push	{r7, lr}
   80bb2:	af00      	add	r7, sp, #0
    main_b_vendor_enable = true;
   80bb4:	4b05      	ldr	r3, [pc, #20]	; (80bcc <main_vendor_enable+0x1c>)
   80bb6:	2201      	movs	r2, #1
   80bb8:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
#if UDI_VENDOR_EPS_SIZE_BULK_FS
    //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   80bba:	4a05      	ldr	r2, [pc, #20]	; (80bd0 <main_vendor_enable+0x20>)
   80bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   80bc0:	4804      	ldr	r0, [pc, #16]	; (80bd4 <main_vendor_enable+0x24>)
   80bc2:	4b05      	ldr	r3, [pc, #20]	; (80bd8 <main_vendor_enable+0x28>)
   80bc4:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
#endif
    return true;
   80bc6:	2301      	movs	r3, #1
}
   80bc8:	4618      	mov	r0, r3
   80bca:	bd80      	pop	{r7, pc}
   80bcc:	2000027d 	.word	0x2000027d
   80bd0:	000811b1 	.word	0x000811b1
   80bd4:	20000e10 	.word	0x20000e10
   80bd8:	00084589 	.word	0x00084589

00080bdc <main_vendor_disable>:

void main_vendor_disable(void)
{
   80bdc:	b480      	push	{r7}
   80bde:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   80be0:	4b03      	ldr	r3, [pc, #12]	; (80bf0 <main_vendor_disable+0x14>)
   80be2:	2200      	movs	r2, #0
   80be4:	701a      	strb	r2, [r3, #0]
}
   80be6:	bf00      	nop
   80be8:	46bd      	mov	sp, r7
   80bea:	bc80      	pop	{r7}
   80bec:	4770      	bx	lr
   80bee:	bf00      	nop
   80bf0:	2000027d 	.word	0x2000027d

00080bf4 <ctrl_readmem_bulk>:
void ctrl_writemem_bulk(void);
void ctrl_writemem_ctrl(void);
void ctrl_progfpga_bulk(void);


void ctrl_readmem_bulk(void){
   80bf4:	b580      	push	{r7, lr}
   80bf6:	b082      	sub	sp, #8
   80bf8:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80bfa:	4b0f      	ldr	r3, [pc, #60]	; (80c38 <ctrl_readmem_bulk+0x44>)
   80bfc:	681b      	ldr	r3, [r3, #0]
   80bfe:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80c00:	4b0d      	ldr	r3, [pc, #52]	; (80c38 <ctrl_readmem_bulk+0x44>)
   80c02:	685b      	ldr	r3, [r3, #4]
   80c04:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80c06:	4b0d      	ldr	r3, [pc, #52]	; (80c3c <ctrl_readmem_bulk+0x48>)
   80c08:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   80c0a:	bf00      	nop
   80c0c:	2002      	movs	r0, #2
   80c0e:	4b0c      	ldr	r3, [pc, #48]	; (80c40 <ctrl_readmem_bulk+0x4c>)
   80c10:	4798      	blx	r3
   80c12:	4603      	mov	r3, r0
   80c14:	2b00      	cmp	r3, #0
   80c16:	d0f9      	beq.n	80c0c <ctrl_readmem_bulk+0x18>

    FPGA_setaddr(address);
   80c18:	6838      	ldr	r0, [r7, #0]
   80c1a:	4b0a      	ldr	r3, [pc, #40]	; (80c44 <ctrl_readmem_bulk+0x50>)
   80c1c:	4798      	blx	r3

    /* Do memory read */
    udi_vendor_bulk_in_run(
   80c1e:	4a0a      	ldr	r2, [pc, #40]	; (80c48 <ctrl_readmem_bulk+0x54>)
   80c20:	6879      	ldr	r1, [r7, #4]
   80c22:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   80c26:	4b09      	ldr	r3, [pc, #36]	; (80c4c <ctrl_readmem_bulk+0x58>)
   80c28:	4798      	blx	r3
        (uint8_t *) PSRAM_BASE_ADDRESS,
        buflen,
        main_vendor_bulk_in_received
        );
    FPGA_releaselock();
   80c2a:	4b04      	ldr	r3, [pc, #16]	; (80c3c <ctrl_readmem_bulk+0x48>)
   80c2c:	4798      	blx	r3
}
   80c2e:	bf00      	nop
   80c30:	3708      	adds	r7, #8
   80c32:	46bd      	mov	sp, r7
   80c34:	bd80      	pop	{r7, pc}
   80c36:	bf00      	nop
   80c38:	20001210 	.word	0x20001210
   80c3c:	000812b1 	.word	0x000812b1
   80c40:	00081271 	.word	0x00081271
   80c44:	000812e1 	.word	0x000812e1
   80c48:	00081179 	.word	0x00081179
   80c4c:	0008455d 	.word	0x0008455d

00080c50 <ctrl_readmem_ctrl>:

void ctrl_readmem_ctrl(void){
   80c50:	b580      	push	{r7, lr}
   80c52:	b082      	sub	sp, #8
   80c54:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80c56:	4b0f      	ldr	r3, [pc, #60]	; (80c94 <ctrl_readmem_ctrl+0x44>)
   80c58:	681b      	ldr	r3, [r3, #0]
   80c5a:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80c5c:	4b0d      	ldr	r3, [pc, #52]	; (80c94 <ctrl_readmem_ctrl+0x44>)
   80c5e:	685b      	ldr	r3, [r3, #4]
   80c60:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   80c62:	4b0d      	ldr	r3, [pc, #52]	; (80c98 <ctrl_readmem_ctrl+0x48>)
   80c64:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   80c66:	bf00      	nop
   80c68:	2005      	movs	r0, #5
   80c6a:	4b0c      	ldr	r3, [pc, #48]	; (80c9c <ctrl_readmem_ctrl+0x4c>)
   80c6c:	4798      	blx	r3
   80c6e:	4603      	mov	r3, r0
   80c70:	2b00      	cmp	r3, #0
   80c72:	d0f9      	beq.n	80c68 <ctrl_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   80c74:	6838      	ldr	r0, [r7, #0]
   80c76:	4b0a      	ldr	r3, [pc, #40]	; (80ca0 <ctrl_readmem_ctrl+0x50>)
   80c78:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   80c7a:	4b0a      	ldr	r3, [pc, #40]	; (80ca4 <ctrl_readmem_ctrl+0x54>)
   80c7c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   80c80:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   80c82:	4a09      	ldr	r2, [pc, #36]	; (80ca8 <ctrl_readmem_ctrl+0x58>)
   80c84:	687b      	ldr	r3, [r7, #4]
   80c86:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    FPGA_releaselock();
   80c88:	4b03      	ldr	r3, [pc, #12]	; (80c98 <ctrl_readmem_ctrl+0x48>)
   80c8a:	4798      	blx	r3
}
   80c8c:	bf00      	nop
   80c8e:	3708      	adds	r7, #8
   80c90:	46bd      	mov	sp, r7
   80c92:	bd80      	pop	{r7, pc}
   80c94:	20001210 	.word	0x20001210
   80c98:	000812b1 	.word	0x000812b1
   80c9c:	00081271 	.word	0x00081271
   80ca0:	000812e1 	.word	0x000812e1
   80ca4:	20001254 	.word	0x20001254
   80ca8:	20001258 	.word	0x20001258

00080cac <ctrl_writemem_ctrl>:


void ctrl_writemem_ctrl(void){
   80cac:	b580      	push	{r7, lr}
   80cae:	b084      	sub	sp, #16
   80cb0:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   80cb2:	4b16      	ldr	r3, [pc, #88]	; (80d0c <ctrl_writemem_ctrl+0x60>)
   80cb4:	681b      	ldr	r3, [r3, #0]
   80cb6:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80cb8:	4b14      	ldr	r3, [pc, #80]	; (80d0c <ctrl_writemem_ctrl+0x60>)
   80cba:	685b      	ldr	r3, [r3, #4]
   80cbc:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   80cbe:	4b14      	ldr	r3, [pc, #80]	; (80d10 <ctrl_writemem_ctrl+0x64>)
   80cc0:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   80cc2:	4b14      	ldr	r3, [pc, #80]	; (80d14 <ctrl_writemem_ctrl+0x68>)
   80cc4:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   80cc6:	bf00      	nop
   80cc8:	2001      	movs	r0, #1
   80cca:	4b13      	ldr	r3, [pc, #76]	; (80d18 <ctrl_writemem_ctrl+0x6c>)
   80ccc:	4798      	blx	r3
   80cce:	4603      	mov	r3, r0
   80cd0:	2b00      	cmp	r3, #0
   80cd2:	d0f9      	beq.n	80cc8 <ctrl_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   80cd4:	6878      	ldr	r0, [r7, #4]
   80cd6:	4b11      	ldr	r3, [pc, #68]	; (80d1c <ctrl_writemem_ctrl+0x70>)
   80cd8:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   80cda:	2300      	movs	r3, #0
   80cdc:	60fb      	str	r3, [r7, #12]
   80cde:	e00b      	b.n	80cf8 <ctrl_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   80ce0:	683a      	ldr	r2, [r7, #0]
   80ce2:	68fb      	ldr	r3, [r7, #12]
   80ce4:	441a      	add	r2, r3
   80ce6:	4b0e      	ldr	r3, [pc, #56]	; (80d20 <ctrl_writemem_ctrl+0x74>)
   80ce8:	6819      	ldr	r1, [r3, #0]
   80cea:	68fb      	ldr	r3, [r7, #12]
   80cec:	440b      	add	r3, r1
   80cee:	7812      	ldrb	r2, [r2, #0]
   80cf0:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   80cf2:	68fb      	ldr	r3, [r7, #12]
   80cf4:	3301      	adds	r3, #1
   80cf6:	60fb      	str	r3, [r7, #12]
   80cf8:	68fa      	ldr	r2, [r7, #12]
   80cfa:	68bb      	ldr	r3, [r7, #8]
   80cfc:	429a      	cmp	r2, r3
   80cfe:	d3ef      	bcc.n	80ce0 <ctrl_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   80d00:	4b04      	ldr	r3, [pc, #16]	; (80d14 <ctrl_writemem_ctrl+0x68>)
   80d02:	4798      	blx	r3
}
   80d04:	bf00      	nop
   80d06:	3710      	adds	r7, #16
   80d08:	46bd      	mov	sp, r7
   80d0a:	bd80      	pop	{r7, pc}
   80d0c:	20001210 	.word	0x20001210
   80d10:	20001218 	.word	0x20001218
   80d14:	000812b1 	.word	0x000812b1
   80d18:	00081271 	.word	0x00081271
   80d1c:	000812e1 	.word	0x000812e1
   80d20:	20000280 	.word	0x20000280

00080d24 <ctrl_writemem_bulk>:

static uint32_t bulkread_address = 0;
static uint32_t bulkread_len = 0;

void ctrl_writemem_bulk(void){
   80d24:	b580      	push	{r7, lr}
   80d26:	b082      	sub	sp, #8
   80d28:	af00      	add	r7, sp, #0
//uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   80d2a:	4b0a      	ldr	r3, [pc, #40]	; (80d54 <ctrl_writemem_bulk+0x30>)
   80d2c:	685b      	ldr	r3, [r3, #4]
   80d2e:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   80d30:	4b09      	ldr	r3, [pc, #36]	; (80d58 <ctrl_writemem_bulk+0x34>)
   80d32:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   80d34:	bf00      	nop
   80d36:	2004      	movs	r0, #4
   80d38:	4b08      	ldr	r3, [pc, #32]	; (80d5c <ctrl_writemem_bulk+0x38>)
   80d3a:	4798      	blx	r3
   80d3c:	4603      	mov	r3, r0
   80d3e:	2b00      	cmp	r3, #0
   80d40:	d0f9      	beq.n	80d36 <ctrl_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   80d42:	6878      	ldr	r0, [r7, #4]
   80d44:	4b06      	ldr	r3, [pc, #24]	; (80d60 <ctrl_writemem_bulk+0x3c>)
   80d46:	4798      	blx	r3

    /* Transaction done in generic callback */
    FPGA_releaselock();
   80d48:	4b03      	ldr	r3, [pc, #12]	; (80d58 <ctrl_writemem_bulk+0x34>)
   80d4a:	4798      	blx	r3
}
   80d4c:	bf00      	nop
   80d4e:	3708      	adds	r7, #8
   80d50:	46bd      	mov	sp, r7
   80d52:	bd80      	pop	{r7, pc}
   80d54:	20001210 	.word	0x20001210
   80d58:	000812b1 	.word	0x000812b1
   80d5c:	00081271 	.word	0x00081271
   80d60:	000812e1 	.word	0x000812e1

00080d64 <ctrl_sam3ucfg_cb>:

static void ctrl_sam3ucfg_cb(void)
{
   80d64:	b580      	push	{r7, lr}
   80d66:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   80d68:	4b19      	ldr	r3, [pc, #100]	; (80dd0 <ctrl_sam3ucfg_cb+0x6c>)
   80d6a:	885b      	ldrh	r3, [r3, #2]
   80d6c:	b2db      	uxtb	r3, r3
   80d6e:	2b03      	cmp	r3, #3
   80d70:	d014      	beq.n	80d9c <ctrl_sam3ucfg_cb+0x38>
   80d72:	2b03      	cmp	r3, #3
   80d74:	dc29      	bgt.n	80dca <ctrl_sam3ucfg_cb+0x66>
   80d76:	2b01      	cmp	r3, #1
   80d78:	d002      	beq.n	80d80 <ctrl_sam3ucfg_cb+0x1c>
   80d7a:	2b02      	cmp	r3, #2
   80d7c:	d00a      	beq.n	80d94 <ctrl_sam3ucfg_cb+0x30>
        /* Make the jump */
        break;

        /* Oh well, sucks to be you */
    default:
        break;
   80d7e:	e024      	b.n	80dca <ctrl_sam3ucfg_cb+0x66>
        osc_enable(OSC_MAINCK_XTAL);
   80d80:	2006      	movs	r0, #6
   80d82:	4b14      	ldr	r3, [pc, #80]	; (80dd4 <ctrl_sam3ucfg_cb+0x70>)
   80d84:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   80d86:	2006      	movs	r0, #6
   80d88:	4b13      	ldr	r3, [pc, #76]	; (80dd8 <ctrl_sam3ucfg_cb+0x74>)
   80d8a:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   80d8c:	2010      	movs	r0, #16
   80d8e:	4b13      	ldr	r3, [pc, #76]	; (80ddc <ctrl_sam3ucfg_cb+0x78>)
   80d90:	4798      	blx	r3
        break;
   80d92:	e01b      	b.n	80dcc <ctrl_sam3ucfg_cb+0x68>
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80d94:	2010      	movs	r0, #16
   80d96:	4b12      	ldr	r3, [pc, #72]	; (80de0 <ctrl_sam3ucfg_cb+0x7c>)
   80d98:	4798      	blx	r3
        break;
   80d9a:	e017      	b.n	80dcc <ctrl_sam3ucfg_cb+0x68>
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   80d9c:	2201      	movs	r2, #1
   80d9e:	210c      	movs	r1, #12
   80da0:	4810      	ldr	r0, [pc, #64]	; (80de4 <ctrl_sam3ucfg_cb+0x80>)
   80da2:	4b11      	ldr	r3, [pc, #68]	; (80de8 <ctrl_sam3ucfg_cb+0x84>)
   80da4:	4798      	blx	r3
        udc_detach();
   80da6:	4b11      	ldr	r3, [pc, #68]	; (80dec <ctrl_sam3ucfg_cb+0x88>)
   80da8:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   80daa:	bf00      	nop
   80dac:	4b10      	ldr	r3, [pc, #64]	; (80df0 <ctrl_sam3ucfg_cb+0x8c>)
   80dae:	685b      	ldr	r3, [r3, #4]
   80db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80db4:	2b00      	cmp	r3, #0
   80db6:	d1f9      	bne.n	80dac <ctrl_sam3ucfg_cb+0x48>
        RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   80db8:	4b0d      	ldr	r3, [pc, #52]	; (80df0 <ctrl_sam3ucfg_cb+0x8c>)
   80dba:	681b      	ldr	r3, [r3, #0]
   80dbc:	4a0c      	ldr	r2, [pc, #48]	; (80df0 <ctrl_sam3ucfg_cb+0x8c>)
   80dbe:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80dc2:	f043 0305 	orr.w	r3, r3, #5
   80dc6:	6013      	str	r3, [r2, #0]
        while(1);
   80dc8:	e7fe      	b.n	80dc8 <ctrl_sam3ucfg_cb+0x64>
        break;
   80dca:	bf00      	nop
    }
}
   80dcc:	bf00      	nop
   80dce:	bd80      	pop	{r7, pc}
   80dd0:	20001828 	.word	0x20001828
   80dd4:	00080a35 	.word	0x00080a35
   80dd8:	00080b3d 	.word	0x00080b3d
   80ddc:	000825c1 	.word	0x000825c1
   80de0:	00082641 	.word	0x00082641
   80de4:	400e0800 	.word	0x400e0800
   80de8:	00081df1 	.word	0x00081df1
   80dec:	00080b6d 	.word	0x00080b6d
   80df0:	400e1200 	.word	0x400e1200

00080df4 <ctrl_progfpga_bulk>:

void ctrl_progfpga_bulk(void){
   80df4:	b580      	push	{r7, lr}
   80df6:	af00      	add	r7, sp, #0

    switch(udd_g_ctrlreq.req.wValue){
   80df8:	4b0d      	ldr	r3, [pc, #52]	; (80e30 <ctrl_progfpga_bulk+0x3c>)
   80dfa:	885b      	ldrh	r3, [r3, #2]
   80dfc:	2ba2      	cmp	r3, #162	; 0xa2
   80dfe:	d00f      	beq.n	80e20 <ctrl_progfpga_bulk+0x2c>
   80e00:	2ba2      	cmp	r3, #162	; 0xa2
   80e02:	dc11      	bgt.n	80e28 <ctrl_progfpga_bulk+0x34>
   80e04:	2ba0      	cmp	r3, #160	; 0xa0
   80e06:	d002      	beq.n	80e0e <ctrl_progfpga_bulk+0x1a>
   80e08:	2ba1      	cmp	r3, #161	; 0xa1
   80e0a:	d003      	beq.n	80e14 <ctrl_progfpga_bulk+0x20>
        /* Done */
        blockendpoint_usage = bep_emem;
        break;

    default:
        break;
   80e0c:	e00c      	b.n	80e28 <ctrl_progfpga_bulk+0x34>
        fpga_program_setup1();
   80e0e:	4b09      	ldr	r3, [pc, #36]	; (80e34 <ctrl_progfpga_bulk+0x40>)
   80e10:	4798      	blx	r3
        break;
   80e12:	e00a      	b.n	80e2a <ctrl_progfpga_bulk+0x36>
        fpga_program_setup2();
   80e14:	4b08      	ldr	r3, [pc, #32]	; (80e38 <ctrl_progfpga_bulk+0x44>)
   80e16:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   80e18:	4b08      	ldr	r3, [pc, #32]	; (80e3c <ctrl_progfpga_bulk+0x48>)
   80e1a:	220a      	movs	r2, #10
   80e1c:	701a      	strb	r2, [r3, #0]
        break;
   80e1e:	e004      	b.n	80e2a <ctrl_progfpga_bulk+0x36>
        blockendpoint_usage = bep_emem;
   80e20:	4b06      	ldr	r3, [pc, #24]	; (80e3c <ctrl_progfpga_bulk+0x48>)
   80e22:	2200      	movs	r2, #0
   80e24:	701a      	strb	r2, [r3, #0]
        break;
   80e26:	e000      	b.n	80e2a <ctrl_progfpga_bulk+0x36>
        break;
   80e28:	bf00      	nop
    }
}
   80e2a:	bf00      	nop
   80e2c:	bd80      	pop	{r7, pc}
   80e2e:	bf00      	nop
   80e30:	20001828 	.word	0x20001828
   80e34:	00081401 	.word	0x00081401
   80e38:	00081481 	.word	0x00081481
   80e3c:	20001250 	.word	0x20001250

00080e40 <ctrl_fpga_reset>:

void ctrl_fpga_reset(void) {
   80e40:	b580      	push	{r7, lr}
   80e42:	af00      	add	r7, sp, #0
  gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   80e44:	2026      	movs	r0, #38	; 0x26
   80e46:	4b03      	ldr	r3, [pc, #12]	; (80e54 <ctrl_fpga_reset+0x14>)
   80e48:	4798      	blx	r3
  gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   80e4a:	2026      	movs	r0, #38	; 0x26
   80e4c:	4b02      	ldr	r3, [pc, #8]	; (80e58 <ctrl_fpga_reset+0x18>)
   80e4e:	4798      	blx	r3
}
   80e50:	bf00      	nop
   80e52:	bd80      	pop	{r7, pc}
   80e54:	0008224d 	.word	0x0008224d
   80e58:	0008227d 	.word	0x0008227d

00080e5c <ctrl_usart_cb>:

static void ctrl_usart_cb(void)
{
   80e5c:	b580      	push	{r7, lr}
   80e5e:	af00      	add	r7, sp, #0
	ctrl_usart(USART_TARGET, false);
   80e60:	2100      	movs	r1, #0
   80e62:	4802      	ldr	r0, [pc, #8]	; (80e6c <ctrl_usart_cb+0x10>)
   80e64:	4b02      	ldr	r3, [pc, #8]	; (80e70 <ctrl_usart_cb+0x14>)
   80e66:	4798      	blx	r3
}
   80e68:	bf00      	nop
   80e6a:	bd80      	pop	{r7, pc}
   80e6c:	40090000 	.word	0x40090000
   80e70:	00081649 	.word	0x00081649

00080e74 <ctrl_usart_cb_data>:

static void ctrl_usart_cb_data(void)
{		
   80e74:	b580      	push	{r7, lr}
   80e76:	b082      	sub	sp, #8
   80e78:	af00      	add	r7, sp, #0
	//Catch heartbleed-style error
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   80e7a:	4b10      	ldr	r3, [pc, #64]	; (80ebc <ctrl_usart_cb_data+0x48>)
   80e7c:	88da      	ldrh	r2, [r3, #6]
   80e7e:	4b0f      	ldr	r3, [pc, #60]	; (80ebc <ctrl_usart_cb_data+0x48>)
   80e80:	899b      	ldrh	r3, [r3, #12]
   80e82:	429a      	cmp	r2, r3
   80e84:	d816      	bhi.n	80eb4 <ctrl_usart_cb_data+0x40>
		return;
	}
	
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   80e86:	2300      	movs	r3, #0
   80e88:	607b      	str	r3, [r7, #4]
   80e8a:	e00c      	b.n	80ea6 <ctrl_usart_cb_data+0x32>
		usart_driver_putchar(USART_TARGET, NULL, udd_g_ctrlreq.payload[i]);
   80e8c:	4b0b      	ldr	r3, [pc, #44]	; (80ebc <ctrl_usart_cb_data+0x48>)
   80e8e:	689a      	ldr	r2, [r3, #8]
   80e90:	687b      	ldr	r3, [r7, #4]
   80e92:	4413      	add	r3, r2
   80e94:	781b      	ldrb	r3, [r3, #0]
   80e96:	461a      	mov	r2, r3
   80e98:	2100      	movs	r1, #0
   80e9a:	4809      	ldr	r0, [pc, #36]	; (80ec0 <ctrl_usart_cb_data+0x4c>)
   80e9c:	4b09      	ldr	r3, [pc, #36]	; (80ec4 <ctrl_usart_cb_data+0x50>)
   80e9e:	4798      	blx	r3
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   80ea0:	687b      	ldr	r3, [r7, #4]
   80ea2:	3301      	adds	r3, #1
   80ea4:	607b      	str	r3, [r7, #4]
   80ea6:	4b05      	ldr	r3, [pc, #20]	; (80ebc <ctrl_usart_cb_data+0x48>)
   80ea8:	88db      	ldrh	r3, [r3, #6]
   80eaa:	461a      	mov	r2, r3
   80eac:	687b      	ldr	r3, [r7, #4]
   80eae:	4293      	cmp	r3, r2
   80eb0:	dbec      	blt.n	80e8c <ctrl_usart_cb_data+0x18>
   80eb2:	e000      	b.n	80eb6 <ctrl_usart_cb_data+0x42>
		return;
   80eb4:	bf00      	nop
	}
}
   80eb6:	3708      	adds	r7, #8
   80eb8:	46bd      	mov	sp, r7
   80eba:	bd80      	pop	{r7, pc}
   80ebc:	20001828 	.word	0x20001828
   80ec0:	40090000 	.word	0x40090000
   80ec4:	00081a31 	.word	0x00081a31

00080ec8 <main_setup_out_received>:
{
	V2Protocol_ProcessCommand();
}

bool main_setup_out_received(void)
{
   80ec8:	b580      	push	{r7, lr}
   80eca:	af00      	add	r7, sp, #0
    //Add buffer if used
    udd_g_ctrlreq.payload = ctrlbuffer;
   80ecc:	4b49      	ldr	r3, [pc, #292]	; (80ff4 <main_setup_out_received+0x12c>)
   80ece:	4a4a      	ldr	r2, [pc, #296]	; (80ff8 <main_setup_out_received+0x130>)
   80ed0:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   80ed2:	4b48      	ldr	r3, [pc, #288]	; (80ff4 <main_setup_out_received+0x12c>)
   80ed4:	88db      	ldrh	r3, [r3, #6]
   80ed6:	2b40      	cmp	r3, #64	; 0x40
   80ed8:	bf28      	it	cs
   80eda:	2340      	movcs	r3, #64	; 0x40
   80edc:	b29a      	uxth	r2, r3
   80ede:	4b45      	ldr	r3, [pc, #276]	; (80ff4 <main_setup_out_received+0x12c>)
   80ee0:	819a      	strh	r2, [r3, #12]

    blockendpoint_usage = bep_emem;
   80ee2:	4b46      	ldr	r3, [pc, #280]	; (80ffc <main_setup_out_received+0x134>)
   80ee4:	2200      	movs	r2, #0
   80ee6:	701a      	strb	r2, [r3, #0]
    static uint8_t  respbuf[128];
    switch(udd_g_ctrlreq.req.bRequest){
   80ee8:	4b42      	ldr	r3, [pc, #264]	; (80ff4 <main_setup_out_received+0x12c>)
   80eea:	785b      	ldrb	r3, [r3, #1]
   80eec:	3b10      	subs	r3, #16
   80eee:	2b15      	cmp	r3, #21
   80ef0:	d873      	bhi.n	80fda <main_setup_out_received+0x112>
   80ef2:	a201      	add	r2, pc, #4	; (adr r2, 80ef8 <main_setup_out_received+0x30>)
   80ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80ef8:	00080f51 	.word	0x00080f51
   80efc:	00080f7d 	.word	0x00080f7d
   80f00:	00080f67 	.word	0x00080f67
   80f04:	00080f93 	.word	0x00080f93
   80f08:	00080fdb 	.word	0x00080fdb
   80f0c:	00080fdb 	.word	0x00080fdb
   80f10:	00080fbd 	.word	0x00080fbd
   80f14:	00080fdb 	.word	0x00080fdb
   80f18:	00080fdb 	.word	0x00080fdb
   80f1c:	00080fdb 	.word	0x00080fdb
   80f20:	00080fb3 	.word	0x00080fb3
   80f24:	00080fa9 	.word	0x00080fa9
   80f28:	00080fdb 	.word	0x00080fdb
   80f2c:	00080fdb 	.word	0x00080fdb
   80f30:	00080fdb 	.word	0x00080fdb
   80f34:	00080fdb 	.word	0x00080fdb
   80f38:	00080fdb 	.word	0x00080fdb
   80f3c:	00080fdb 	.word	0x00080fdb
   80f40:	00080fc7 	.word	0x00080fc7
   80f44:	00080fdb 	.word	0x00080fdb
   80f48:	00080fdb 	.word	0x00080fdb
   80f4c:	00080fd1 	.word	0x00080fd1
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   80f50:	2006      	movs	r0, #6
   80f52:	4b2b      	ldr	r3, [pc, #172]	; (81000 <main_setup_out_received+0x138>)
   80f54:	4798      	blx	r3
   80f56:	4603      	mov	r3, r0
   80f58:	2b00      	cmp	r3, #0
   80f5a:	d040      	beq.n	80fde <main_setup_out_received+0x116>
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   80f5c:	4b25      	ldr	r3, [pc, #148]	; (80ff4 <main_setup_out_received+0x12c>)
   80f5e:	4a29      	ldr	r2, [pc, #164]	; (81004 <main_setup_out_received+0x13c>)
   80f60:	611a      	str	r2, [r3, #16]
            return true;
   80f62:	2301      	movs	r3, #1
   80f64:	e043      	b.n	80fee <main_setup_out_received+0x126>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   80f66:	2006      	movs	r0, #6
   80f68:	4b25      	ldr	r3, [pc, #148]	; (81000 <main_setup_out_received+0x138>)
   80f6a:	4798      	blx	r3
   80f6c:	4603      	mov	r3, r0
   80f6e:	2b00      	cmp	r3, #0
   80f70:	d037      	beq.n	80fe2 <main_setup_out_received+0x11a>
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   80f72:	4b20      	ldr	r3, [pc, #128]	; (80ff4 <main_setup_out_received+0x12c>)
   80f74:	4a24      	ldr	r2, [pc, #144]	; (81008 <main_setup_out_received+0x140>)
   80f76:	611a      	str	r2, [r3, #16]
            return true;
   80f78:	2301      	movs	r3, #1
   80f7a:	e038      	b.n	80fee <main_setup_out_received+0x126>
        break;


        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   80f7c:	2006      	movs	r0, #6
   80f7e:	4b20      	ldr	r3, [pc, #128]	; (81000 <main_setup_out_received+0x138>)
   80f80:	4798      	blx	r3
   80f82:	4603      	mov	r3, r0
   80f84:	2b00      	cmp	r3, #0
   80f86:	d02e      	beq.n	80fe6 <main_setup_out_received+0x11e>
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   80f88:	4b1a      	ldr	r3, [pc, #104]	; (80ff4 <main_setup_out_received+0x12c>)
   80f8a:	4a20      	ldr	r2, [pc, #128]	; (8100c <main_setup_out_received+0x144>)
   80f8c:	611a      	str	r2, [r3, #16]
            return true;
   80f8e:	2301      	movs	r3, #1
   80f90:	e02d      	b.n	80fee <main_setup_out_received+0x126>
    //     udd_g_ctrlreq.callback = ctrl_avr_program_void;
    //     return true;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   80f92:	2006      	movs	r0, #6
   80f94:	4b1a      	ldr	r3, [pc, #104]	; (81000 <main_setup_out_received+0x138>)
   80f96:	4798      	blx	r3
   80f98:	4603      	mov	r3, r0
   80f9a:	2b00      	cmp	r3, #0
   80f9c:	d025      	beq.n	80fea <main_setup_out_received+0x122>
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   80f9e:	4b15      	ldr	r3, [pc, #84]	; (80ff4 <main_setup_out_received+0x12c>)
   80fa0:	4a1b      	ldr	r2, [pc, #108]	; (81010 <main_setup_out_received+0x148>)
   80fa2:	611a      	str	r2, [r3, #16]
            return true;
   80fa4:	2301      	movs	r3, #1
   80fa6:	e022      	b.n	80fee <main_setup_out_received+0x126>
        }
        break;

		/* Target serial */
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   80fa8:	4b12      	ldr	r3, [pc, #72]	; (80ff4 <main_setup_out_received+0x12c>)
   80faa:	4a1a      	ldr	r2, [pc, #104]	; (81014 <main_setup_out_received+0x14c>)
   80fac:	611a      	str	r2, [r3, #16]
        return true;
   80fae:	2301      	movs	r3, #1
   80fb0:	e01d      	b.n	80fee <main_setup_out_received+0x126>
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   80fb2:	4b10      	ldr	r3, [pc, #64]	; (80ff4 <main_setup_out_received+0x12c>)
   80fb4:	4a18      	ldr	r2, [pc, #96]	; (81018 <main_setup_out_received+0x150>)
   80fb6:	611a      	str	r2, [r3, #16]
        return true;
   80fb8:	2301      	movs	r3, #1
   80fba:	e018      	b.n	80fee <main_setup_out_received+0x126>

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   80fbc:	4b0d      	ldr	r3, [pc, #52]	; (80ff4 <main_setup_out_received+0x12c>)
   80fbe:	4a17      	ldr	r2, [pc, #92]	; (8101c <main_setup_out_received+0x154>)
   80fc0:	611a      	str	r2, [r3, #16]
        return true;
   80fc2:	2301      	movs	r3, #1
   80fc4:	e013      	b.n	80fee <main_setup_out_received+0x126>

    case REQ_SAM3U_CFG:
        udd_g_ctrlreq.callback = ctrl_sam3ucfg_cb;
   80fc6:	4b0b      	ldr	r3, [pc, #44]	; (80ff4 <main_setup_out_received+0x12c>)
   80fc8:	4a15      	ldr	r2, [pc, #84]	; (81020 <main_setup_out_received+0x158>)
   80fca:	611a      	str	r2, [r3, #16]
        return true;
   80fcc:	2301      	movs	r3, #1
   80fce:	e00e      	b.n	80fee <main_setup_out_received+0x126>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   80fd0:	4b08      	ldr	r3, [pc, #32]	; (80ff4 <main_setup_out_received+0x12c>)
   80fd2:	4a14      	ldr	r2, [pc, #80]	; (81024 <main_setup_out_received+0x15c>)
   80fd4:	611a      	str	r2, [r3, #16]
        return true;
   80fd6:	2301      	movs	r3, #1
   80fd8:	e009      	b.n	80fee <main_setup_out_received+0x126>

    default:
        return false;
   80fda:	2300      	movs	r3, #0
   80fdc:	e007      	b.n	80fee <main_setup_out_received+0x126>
        break;
   80fde:	bf00      	nop
   80fe0:	e004      	b.n	80fec <main_setup_out_received+0x124>
        break;
   80fe2:	bf00      	nop
   80fe4:	e002      	b.n	80fec <main_setup_out_received+0x124>
        break;
   80fe6:	bf00      	nop
   80fe8:	e000      	b.n	80fec <main_setup_out_received+0x124>
        break;
   80fea:	bf00      	nop
    }

    return false;
   80fec:	2300      	movs	r3, #0
}
   80fee:	4618      	mov	r0, r3
   80ff0:	bd80      	pop	{r7, pc}
   80ff2:	bf00      	nop
   80ff4:	20001828 	.word	0x20001828
   80ff8:	20001210 	.word	0x20001210
   80ffc:	20001250 	.word	0x20001250
   81000:	00081271 	.word	0x00081271
   81004:	00080bf5 	.word	0x00080bf5
   81008:	00080c51 	.word	0x00080c51
   8100c:	00080d25 	.word	0x00080d25
   81010:	00080cad 	.word	0x00080cad
   81014:	00080e5d 	.word	0x00080e5d
   81018:	00080e75 	.word	0x00080e75
   8101c:	00080df5 	.word	0x00080df5
   81020:	00080d65 	.word	0x00080d65
   81024:	00080e41 	.word	0x00080e41

00081028 <main_setup_in_received>:
  && (udd_g_ctrlreq.req.bRequest == 0)
  && (0 != udd_g_ctrlreq.req.wLength)
*/

bool main_setup_in_received(void)
{
   81028:	b580      	push	{r7, lr}
   8102a:	b082      	sub	sp, #8
   8102c:	af00      	add	r7, sp, #0
    */

    static uint8_t  respbuf[64];
    unsigned int cnt;

    switch(udd_g_ctrlreq.req.bRequest){
   8102e:	4b48      	ldr	r3, [pc, #288]	; (81150 <main_setup_in_received+0x128>)
   81030:	785b      	ldrb	r3, [r3, #1]
   81032:	3b12      	subs	r3, #18
   81034:	2b09      	cmp	r3, #9
   81036:	f200 8085 	bhi.w	81144 <main_setup_in_received+0x11c>
   8103a:	a201      	add	r2, pc, #4	; (adr r2, 81040 <main_setup_in_received+0x18>)
   8103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81040:	00081069 	.word	0x00081069
   81044:	00081145 	.word	0x00081145
   81048:	00081145 	.word	0x00081145
   8104c:	0008110b 	.word	0x0008110b
   81050:	00081145 	.word	0x00081145
   81054:	000810e9 	.word	0x000810e9
   81058:	00081145 	.word	0x00081145
   8105c:	00081145 	.word	0x00081145
   81060:	000810ab 	.word	0x000810ab
   81064:	00081095 	.word	0x00081095
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   81068:	4b3a      	ldr	r3, [pc, #232]	; (81154 <main_setup_in_received+0x12c>)
   8106a:	681b      	ldr	r3, [r3, #0]
   8106c:	4a38      	ldr	r2, [pc, #224]	; (81150 <main_setup_in_received+0x128>)
   8106e:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81070:	4b39      	ldr	r3, [pc, #228]	; (81158 <main_setup_in_received+0x130>)
   81072:	681b      	ldr	r3, [r3, #0]
   81074:	b29a      	uxth	r2, r3
   81076:	4b36      	ldr	r3, [pc, #216]	; (81150 <main_setup_in_received+0x128>)
   81078:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   8107a:	4b37      	ldr	r3, [pc, #220]	; (81158 <main_setup_in_received+0x130>)
   8107c:	2200      	movs	r2, #0
   8107e:	601a      	str	r2, [r3, #0]

        if (FPGA_lockstatus() == fpga_ctrlmem){
   81080:	4b36      	ldr	r3, [pc, #216]	; (8115c <main_setup_in_received+0x134>)
   81082:	4798      	blx	r3
   81084:	4603      	mov	r3, r0
   81086:	2b05      	cmp	r3, #5
   81088:	d102      	bne.n	81090 <main_setup_in_received+0x68>
            FPGA_setlock(fpga_unlocked);
   8108a:	2000      	movs	r0, #0
   8108c:	4b34      	ldr	r3, [pc, #208]	; (81160 <main_setup_in_received+0x138>)
   8108e:	4798      	blx	r3
        }

        return true;
   81090:	2301      	movs	r3, #1
   81092:	e058      	b.n	81146 <main_setup_in_received+0x11e>
    //     return V2Protocol_ProcessCommand();
    //     break;
        
        
    case REQ_USART0_CONFIG:
        return ctrl_usart(USART_TARGET, true);
   81094:	2101      	movs	r1, #1
   81096:	4833      	ldr	r0, [pc, #204]	; (81164 <main_setup_in_received+0x13c>)
   81098:	4b33      	ldr	r3, [pc, #204]	; (81168 <main_setup_in_received+0x140>)
   8109a:	4798      	blx	r3
   8109c:	4603      	mov	r3, r0
   8109e:	2b00      	cmp	r3, #0
   810a0:	bf14      	ite	ne
   810a2:	2301      	movne	r3, #1
   810a4:	2300      	moveq	r3, #0
   810a6:	b2db      	uxtb	r3, r3
   810a8:	e04d      	b.n	81146 <main_setup_in_received+0x11e>
        break;
        
    case REQ_USART0_DATA:						
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   810aa:	2300      	movs	r3, #0
   810ac:	607b      	str	r3, [r7, #4]
   810ae:	e00c      	b.n	810ca <main_setup_in_received+0xa2>
            respbuf[cnt] = usart_driver_getchar(USART_TARGET);
   810b0:	482c      	ldr	r0, [pc, #176]	; (81164 <main_setup_in_received+0x13c>)
   810b2:	4b2e      	ldr	r3, [pc, #184]	; (8116c <main_setup_in_received+0x144>)
   810b4:	4798      	blx	r3
   810b6:	4603      	mov	r3, r0
   810b8:	b2d9      	uxtb	r1, r3
   810ba:	4a2d      	ldr	r2, [pc, #180]	; (81170 <main_setup_in_received+0x148>)
   810bc:	687b      	ldr	r3, [r7, #4]
   810be:	4413      	add	r3, r2
   810c0:	460a      	mov	r2, r1
   810c2:	701a      	strb	r2, [r3, #0]
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   810c4:	687b      	ldr	r3, [r7, #4]
   810c6:	3301      	adds	r3, #1
   810c8:	607b      	str	r3, [r7, #4]
   810ca:	4b21      	ldr	r3, [pc, #132]	; (81150 <main_setup_in_received+0x128>)
   810cc:	88db      	ldrh	r3, [r3, #6]
   810ce:	461a      	mov	r2, r3
   810d0:	687b      	ldr	r3, [r7, #4]
   810d2:	4293      	cmp	r3, r2
   810d4:	d3ec      	bcc.n	810b0 <main_setup_in_received+0x88>
        }
        udd_g_ctrlreq.payload = respbuf;
   810d6:	4b1e      	ldr	r3, [pc, #120]	; (81150 <main_setup_in_received+0x128>)
   810d8:	4a25      	ldr	r2, [pc, #148]	; (81170 <main_setup_in_received+0x148>)
   810da:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = cnt;
   810dc:	687b      	ldr	r3, [r7, #4]
   810de:	b29a      	uxth	r2, r3
   810e0:	4b1b      	ldr	r3, [pc, #108]	; (81150 <main_setup_in_received+0x128>)
   810e2:	819a      	strh	r2, [r3, #12]
        return true;
   810e4:	2301      	movs	r3, #1
   810e6:	e02e      	b.n	81146 <main_setup_in_received+0x11e>
        break;
    case REQ_FW_VERSION:
        respbuf[0] = FW_VER_MAJOR;
   810e8:	4b21      	ldr	r3, [pc, #132]	; (81170 <main_setup_in_received+0x148>)
   810ea:	2201      	movs	r2, #1
   810ec:	701a      	strb	r2, [r3, #0]
        respbuf[1] = FW_VER_MINOR;
   810ee:	4b20      	ldr	r3, [pc, #128]	; (81170 <main_setup_in_received+0x148>)
   810f0:	2201      	movs	r2, #1
   810f2:	705a      	strb	r2, [r3, #1]
        respbuf[2] = FW_VER_DEBUG;
   810f4:	4b1e      	ldr	r3, [pc, #120]	; (81170 <main_setup_in_received+0x148>)
   810f6:	2200      	movs	r2, #0
   810f8:	709a      	strb	r2, [r3, #2]
        udd_g_ctrlreq.payload = respbuf;
   810fa:	4b15      	ldr	r3, [pc, #84]	; (81150 <main_setup_in_received+0x128>)
   810fc:	4a1c      	ldr	r2, [pc, #112]	; (81170 <main_setup_in_received+0x148>)
   810fe:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 3;
   81100:	4b13      	ldr	r3, [pc, #76]	; (81150 <main_setup_in_received+0x128>)
   81102:	2203      	movs	r2, #3
   81104:	819a      	strh	r2, [r3, #12]
        return true;
   81106:	2301      	movs	r3, #1
   81108:	e01d      	b.n	81146 <main_setup_in_received+0x11e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   8110a:	2007      	movs	r0, #7
   8110c:	4b19      	ldr	r3, [pc, #100]	; (81174 <main_setup_in_received+0x14c>)
   8110e:	4798      	blx	r3
   81110:	4603      	mov	r3, r0
   81112:	2b00      	cmp	r3, #0
   81114:	bf14      	ite	ne
   81116:	2301      	movne	r3, #1
   81118:	2300      	moveq	r3, #0
   8111a:	b2db      	uxtb	r3, r3
   8111c:	461a      	mov	r2, r3
   8111e:	4b14      	ldr	r3, [pc, #80]	; (81170 <main_setup_in_received+0x148>)
   81120:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   81122:	4b13      	ldr	r3, [pc, #76]	; (81170 <main_setup_in_received+0x148>)
   81124:	2200      	movs	r2, #0
   81126:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   81128:	4b11      	ldr	r3, [pc, #68]	; (81170 <main_setup_in_received+0x148>)
   8112a:	2200      	movs	r2, #0
   8112c:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   8112e:	4b10      	ldr	r3, [pc, #64]	; (81170 <main_setup_in_received+0x148>)
   81130:	2200      	movs	r2, #0
   81132:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81134:	4b06      	ldr	r3, [pc, #24]	; (81150 <main_setup_in_received+0x128>)
   81136:	4a0e      	ldr	r2, [pc, #56]	; (81170 <main_setup_in_received+0x148>)
   81138:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   8113a:	4b05      	ldr	r3, [pc, #20]	; (81150 <main_setup_in_received+0x128>)
   8113c:	2204      	movs	r2, #4
   8113e:	819a      	strh	r2, [r3, #12]
        return true;
   81140:	2301      	movs	r3, #1
   81142:	e000      	b.n	81146 <main_setup_in_received+0x11e>
        break;
    default:
        return false;
   81144:	2300      	movs	r3, #0
    }
    return false;
}
   81146:	4618      	mov	r0, r3
   81148:	3708      	adds	r7, #8
   8114a:	46bd      	mov	sp, r7
   8114c:	bd80      	pop	{r7, pc}
   8114e:	bf00      	nop
   81150:	20001828 	.word	0x20001828
   81154:	20001254 	.word	0x20001254
   81158:	20001258 	.word	0x20001258
   8115c:	000812c9 	.word	0x000812c9
   81160:	00081271 	.word	0x00081271
   81164:	40090000 	.word	0x40090000
   81168:	00081649 	.word	0x00081649
   8116c:	00081ad9 	.word	0x00081ad9
   81170:	2000125c 	.word	0x2000125c
   81174:	0008221d 	.word	0x0008221d

00081178 <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81178:	b580      	push	{r7, lr}
   8117a:	b082      	sub	sp, #8
   8117c:	af00      	add	r7, sp, #0
   8117e:	4603      	mov	r3, r0
   81180:	6039      	str	r1, [r7, #0]
   81182:	71fb      	strb	r3, [r7, #7]
   81184:	4613      	mov	r3, r2
   81186:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   81188:	79fb      	ldrb	r3, [r7, #7]
   8118a:	2b00      	cmp	r3, #0
   8118c:	d108      	bne.n	811a0 <main_vendor_bulk_in_received+0x28>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   8118e:	4b06      	ldr	r3, [pc, #24]	; (811a8 <main_vendor_bulk_in_received+0x30>)
   81190:	4798      	blx	r3
   81192:	4603      	mov	r3, r0
   81194:	2b02      	cmp	r3, #2
   81196:	d104      	bne.n	811a2 <main_vendor_bulk_in_received+0x2a>
        FPGA_setlock(fpga_unlocked);
   81198:	2000      	movs	r0, #0
   8119a:	4b04      	ldr	r3, [pc, #16]	; (811ac <main_vendor_bulk_in_received+0x34>)
   8119c:	4798      	blx	r3
   8119e:	e000      	b.n	811a2 <main_vendor_bulk_in_received+0x2a>
        return; // Transfer aborted/error
   811a0:	bf00      	nop
    }
}
   811a2:	3708      	adds	r7, #8
   811a4:	46bd      	mov	sp, r7
   811a6:	bd80      	pop	{r7, pc}
   811a8:	000812c9 	.word	0x000812c9
   811ac:	00081271 	.word	0x00081271

000811b0 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   811b0:	b580      	push	{r7, lr}
   811b2:	b084      	sub	sp, #16
   811b4:	af00      	add	r7, sp, #0
   811b6:	4603      	mov	r3, r0
   811b8:	6039      	str	r1, [r7, #0]
   811ba:	71fb      	strb	r3, [r7, #7]
   811bc:	4613      	mov	r3, r2
   811be:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    if (UDD_EP_TRANSFER_OK != status) {
   811c0:	79fb      	ldrb	r3, [r7, #7]
   811c2:	2b00      	cmp	r3, #0
   811c4:	d006      	beq.n	811d4 <main_vendor_bulk_out_received+0x24>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   811c6:	4a22      	ldr	r2, [pc, #136]	; (81250 <main_vendor_bulk_out_received+0xa0>)
   811c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
   811cc:	4821      	ldr	r0, [pc, #132]	; (81254 <main_vendor_bulk_out_received+0xa4>)
   811ce:	4b22      	ldr	r3, [pc, #136]	; (81258 <main_vendor_bulk_out_received+0xa8>)
   811d0:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   811d2:	e039      	b.n	81248 <main_vendor_bulk_out_received+0x98>
    }

    if (blockendpoint_usage == bep_emem){
   811d4:	4b21      	ldr	r3, [pc, #132]	; (8125c <main_vendor_bulk_out_received+0xac>)
   811d6:	781b      	ldrb	r3, [r3, #0]
   811d8:	2b00      	cmp	r3, #0
   811da:	d11a      	bne.n	81212 <main_vendor_bulk_out_received+0x62>
        for(unsigned int i = 0; i < nb_transfered; i++){
   811dc:	2300      	movs	r3, #0
   811de:	60fb      	str	r3, [r7, #12]
   811e0:	e00b      	b.n	811fa <main_vendor_bulk_out_received+0x4a>
            xram[i] = main_buf_loopback[i];
   811e2:	4b1f      	ldr	r3, [pc, #124]	; (81260 <main_vendor_bulk_out_received+0xb0>)
   811e4:	681a      	ldr	r2, [r3, #0]
   811e6:	68fb      	ldr	r3, [r7, #12]
   811e8:	4413      	add	r3, r2
   811ea:	491a      	ldr	r1, [pc, #104]	; (81254 <main_vendor_bulk_out_received+0xa4>)
   811ec:	68fa      	ldr	r2, [r7, #12]
   811ee:	440a      	add	r2, r1
   811f0:	7812      	ldrb	r2, [r2, #0]
   811f2:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   811f4:	68fb      	ldr	r3, [r7, #12]
   811f6:	3301      	adds	r3, #1
   811f8:	60fb      	str	r3, [r7, #12]
   811fa:	68fa      	ldr	r2, [r7, #12]
   811fc:	683b      	ldr	r3, [r7, #0]
   811fe:	429a      	cmp	r2, r3
   81200:	d3ef      	bcc.n	811e2 <main_vendor_bulk_out_received+0x32>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   81202:	4b18      	ldr	r3, [pc, #96]	; (81264 <main_vendor_bulk_out_received+0xb4>)
   81204:	4798      	blx	r3
   81206:	4603      	mov	r3, r0
   81208:	2b04      	cmp	r3, #4
   8120a:	d117      	bne.n	8123c <main_vendor_bulk_out_received+0x8c>
            FPGA_releaselock();
   8120c:	4b16      	ldr	r3, [pc, #88]	; (81268 <main_vendor_bulk_out_received+0xb8>)
   8120e:	4798      	blx	r3
   81210:	e014      	b.n	8123c <main_vendor_bulk_out_received+0x8c>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   81212:	4b12      	ldr	r3, [pc, #72]	; (8125c <main_vendor_bulk_out_received+0xac>)
   81214:	781b      	ldrb	r3, [r3, #0]
   81216:	2b0a      	cmp	r3, #10
   81218:	d110      	bne.n	8123c <main_vendor_bulk_out_received+0x8c>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   8121a:	2300      	movs	r3, #0
   8121c:	60bb      	str	r3, [r7, #8]
   8121e:	e009      	b.n	81234 <main_vendor_bulk_out_received+0x84>
            fpga_program_sendbyte(main_buf_loopback[i]);
   81220:	4a0c      	ldr	r2, [pc, #48]	; (81254 <main_vendor_bulk_out_received+0xa4>)
   81222:	68bb      	ldr	r3, [r7, #8]
   81224:	4413      	add	r3, r2
   81226:	781b      	ldrb	r3, [r3, #0]
   81228:	4618      	mov	r0, r3
   8122a:	4b10      	ldr	r3, [pc, #64]	; (8126c <main_vendor_bulk_out_received+0xbc>)
   8122c:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   8122e:	68bb      	ldr	r3, [r7, #8]
   81230:	3301      	adds	r3, #1
   81232:	60bb      	str	r3, [r7, #8]
   81234:	68ba      	ldr	r2, [r7, #8]
   81236:	683b      	ldr	r3, [r7, #0]
   81238:	429a      	cmp	r2, r3
   8123a:	d3f1      	bcc.n	81220 <main_vendor_bulk_out_received+0x70>
#endif
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   8123c:	4a04      	ldr	r2, [pc, #16]	; (81250 <main_vendor_bulk_out_received+0xa0>)
   8123e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81242:	4804      	ldr	r0, [pc, #16]	; (81254 <main_vendor_bulk_out_received+0xa4>)
   81244:	4b04      	ldr	r3, [pc, #16]	; (81258 <main_vendor_bulk_out_received+0xa8>)
   81246:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   81248:	3710      	adds	r7, #16
   8124a:	46bd      	mov	sp, r7
   8124c:	bd80      	pop	{r7, pc}
   8124e:	bf00      	nop
   81250:	000811b1 	.word	0x000811b1
   81254:	20000e10 	.word	0x20000e10
   81258:	00084589 	.word	0x00084589
   8125c:	20001250 	.word	0x20001250
   81260:	20000280 	.word	0x20000280
   81264:	000812c9 	.word	0x000812c9
   81268:	000812b1 	.word	0x000812b1
   8126c:	00081495 	.word	0x00081495

00081270 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   81270:	b580      	push	{r7, lr}
   81272:	b084      	sub	sp, #16
   81274:	af00      	add	r7, sp, #0
   81276:	4603      	mov	r3, r0
   81278:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   8127a:	2300      	movs	r3, #0
   8127c:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   8127e:	4b09      	ldr	r3, [pc, #36]	; (812a4 <FPGA_setlock+0x34>)
   81280:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   81282:	4b09      	ldr	r3, [pc, #36]	; (812a8 <FPGA_setlock+0x38>)
   81284:	781b      	ldrb	r3, [r3, #0]
   81286:	b2db      	uxtb	r3, r3
   81288:	2b00      	cmp	r3, #0
   8128a:	d104      	bne.n	81296 <FPGA_setlock+0x26>
  {
    ret = 1;
   8128c:	2301      	movs	r3, #1
   8128e:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   81290:	4a05      	ldr	r2, [pc, #20]	; (812a8 <FPGA_setlock+0x38>)
   81292:	79fb      	ldrb	r3, [r7, #7]
   81294:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   81296:	4b05      	ldr	r3, [pc, #20]	; (812ac <FPGA_setlock+0x3c>)
   81298:	4798      	blx	r3
  return ret;
   8129a:	68fb      	ldr	r3, [r7, #12]
}
   8129c:	4618      	mov	r0, r3
   8129e:	3710      	adds	r7, #16
   812a0:	46bd      	mov	sp, r7
   812a2:	bd80      	pop	{r7, pc}
   812a4:	00081f71 	.word	0x00081f71
   812a8:	2000129c 	.word	0x2000129c
   812ac:	00081fc9 	.word	0x00081fc9

000812b0 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   812b0:	b480      	push	{r7}
   812b2:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   812b4:	4b03      	ldr	r3, [pc, #12]	; (812c4 <FPGA_releaselock+0x14>)
   812b6:	2200      	movs	r2, #0
   812b8:	701a      	strb	r2, [r3, #0]
}
   812ba:	bf00      	nop
   812bc:	46bd      	mov	sp, r7
   812be:	bc80      	pop	{r7}
   812c0:	4770      	bx	lr
   812c2:	bf00      	nop
   812c4:	2000129c 	.word	0x2000129c

000812c8 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   812c8:	b480      	push	{r7}
   812ca:	af00      	add	r7, sp, #0
  return _fpga_locked;
   812cc:	4b03      	ldr	r3, [pc, #12]	; (812dc <FPGA_lockstatus+0x14>)
   812ce:	781b      	ldrb	r3, [r3, #0]
   812d0:	b2db      	uxtb	r3, r3
}
   812d2:	4618      	mov	r0, r3
   812d4:	46bd      	mov	sp, r7
   812d6:	bc80      	pop	{r7}
   812d8:	4770      	bx	lr
   812da:	bf00      	nop
   812dc:	2000129c 	.word	0x2000129c

000812e0 <FPGA_setaddr>:
  FPGA_releaselock();
  cpu_irq_leave_critical();
}

void FPGA_setaddr(uint32_t addr)
{
   812e0:	b580      	push	{r7, lr}
   812e2:	b082      	sub	sp, #8
   812e4:	af00      	add	r7, sp, #0
   812e6:	6078      	str	r0, [r7, #4]
  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
   812e8:	4b0c      	ldr	r3, [pc, #48]	; (8131c <FPGA_setaddr+0x3c>)
   812ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   812ec:	f003 0240 	and.w	r2, r3, #64	; 0x40
   812f0:	687b      	ldr	r3, [r7, #4]
   812f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   812f6:	431a      	orrs	r2, r3
   812f8:	687b      	ldr	r3, [r7, #4]
   812fa:	005b      	lsls	r3, r3, #1
   812fc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   81300:	4906      	ldr	r1, [pc, #24]	; (8131c <FPGA_setaddr+0x3c>)
   81302:	4313      	orrs	r3, r2
   81304:	638b      	str	r3, [r1, #56]	; 0x38
  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   81306:	2031      	movs	r0, #49	; 0x31
   81308:	4b05      	ldr	r3, [pc, #20]	; (81320 <FPGA_setaddr+0x40>)
   8130a:	4798      	blx	r3
  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   8130c:	2031      	movs	r0, #49	; 0x31
   8130e:	4b05      	ldr	r3, [pc, #20]	; (81324 <FPGA_setaddr+0x44>)
   81310:	4798      	blx	r3
}
   81312:	bf00      	nop
   81314:	3708      	adds	r7, #8
   81316:	46bd      	mov	sp, r7
   81318:	bd80      	pop	{r7, pc}
   8131a:	bf00      	nop
   8131c:	400e0e00 	.word	0x400e0e00
   81320:	0008227d 	.word	0x0008227d
   81324:	0008224d 	.word	0x0008224d

00081328 <osc_get_rate>:
{
   81328:	b480      	push	{r7}
   8132a:	b083      	sub	sp, #12
   8132c:	af00      	add	r7, sp, #0
   8132e:	6078      	str	r0, [r7, #4]
   81330:	687b      	ldr	r3, [r7, #4]
   81332:	2b07      	cmp	r3, #7
   81334:	d823      	bhi.n	8137e <osc_get_rate+0x56>
   81336:	a201      	add	r2, pc, #4	; (adr r2, 8133c <osc_get_rate+0x14>)
   81338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8133c:	0008135d 	.word	0x0008135d
   81340:	00081363 	.word	0x00081363
   81344:	00081367 	.word	0x00081367
   81348:	0008136b 	.word	0x0008136b
   8134c:	0008136f 	.word	0x0008136f
   81350:	00081373 	.word	0x00081373
   81354:	00081377 	.word	0x00081377
   81358:	0008137b 	.word	0x0008137b
		return OSC_SLCK_32K_RC_HZ;
   8135c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81360:	e00e      	b.n	81380 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   81362:	2300      	movs	r3, #0
   81364:	e00c      	b.n	81380 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   81366:	2300      	movs	r3, #0
   81368:	e00a      	b.n	81380 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   8136a:	4b08      	ldr	r3, [pc, #32]	; (8138c <osc_get_rate+0x64>)
   8136c:	e008      	b.n	81380 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   8136e:	4b08      	ldr	r3, [pc, #32]	; (81390 <osc_get_rate+0x68>)
   81370:	e006      	b.n	81380 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   81372:	4b08      	ldr	r3, [pc, #32]	; (81394 <osc_get_rate+0x6c>)
   81374:	e004      	b.n	81380 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   81376:	4b07      	ldr	r3, [pc, #28]	; (81394 <osc_get_rate+0x6c>)
   81378:	e002      	b.n	81380 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   8137a:	4b06      	ldr	r3, [pc, #24]	; (81394 <osc_get_rate+0x6c>)
   8137c:	e000      	b.n	81380 <osc_get_rate+0x58>
	return 0;
   8137e:	2300      	movs	r3, #0
}
   81380:	4618      	mov	r0, r3
   81382:	370c      	adds	r7, #12
   81384:	46bd      	mov	sp, r7
   81386:	bc80      	pop	{r7}
   81388:	4770      	bx	lr
   8138a:	bf00      	nop
   8138c:	003d0900 	.word	0x003d0900
   81390:	007a1200 	.word	0x007a1200
   81394:	00b71b00 	.word	0x00b71b00

00081398 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81398:	b580      	push	{r7, lr}
   8139a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   8139c:	2006      	movs	r0, #6
   8139e:	4b03      	ldr	r3, [pc, #12]	; (813ac <sysclk_get_main_hz+0x14>)
   813a0:	4798      	blx	r3
   813a2:	4603      	mov	r3, r0
   813a4:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   813a6:	4618      	mov	r0, r3
   813a8:	bd80      	pop	{r7, pc}
   813aa:	bf00      	nop
   813ac:	00081329 	.word	0x00081329

000813b0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   813b0:	b580      	push	{r7, lr}
   813b2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   813b4:	4b02      	ldr	r3, [pc, #8]	; (813c0 <sysclk_get_cpu_hz+0x10>)
   813b6:	4798      	blx	r3
   813b8:	4603      	mov	r3, r0
   813ba:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   813bc:	4618      	mov	r0, r3
   813be:	bd80      	pop	{r7, pc}
   813c0:	00081399 	.word	0x00081399

000813c4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   813c4:	b580      	push	{r7, lr}
   813c6:	b082      	sub	sp, #8
   813c8:	af00      	add	r7, sp, #0
   813ca:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   813cc:	6878      	ldr	r0, [r7, #4]
   813ce:	4b03      	ldr	r3, [pc, #12]	; (813dc <sysclk_enable_peripheral_clock+0x18>)
   813d0:	4798      	blx	r3
}
   813d2:	bf00      	nop
   813d4:	3708      	adds	r7, #8
   813d6:	46bd      	mov	sp, r7
   813d8:	bd80      	pop	{r7, pc}
   813da:	bf00      	nop
   813dc:	00082911 	.word	0x00082911

000813e0 <fpga_program_init>:
#include "fpga_program.h"
#include "spi.h"

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   813e0:	b580      	push	{r7, lr}
   813e2:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   813e4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   813e8:	2019      	movs	r0, #25
   813ea:	4b03      	ldr	r3, [pc, #12]	; (813f8 <fpga_program_init+0x18>)
   813ec:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   813ee:	2019      	movs	r0, #25
   813f0:	4b02      	ldr	r3, [pc, #8]	; (813fc <fpga_program_init+0x1c>)
   813f2:	4798      	blx	r3
}
   813f4:	bf00      	nop
   813f6:	bd80      	pop	{r7, pc}
   813f8:	000822ad 	.word	0x000822ad
   813fc:	0008224d 	.word	0x0008224d

00081400 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(void)
{
   81400:	b580      	push	{r7, lr}
   81402:	b084      	sub	sp, #16
   81404:	af00      	add	r7, sp, #0
    /* Init - set program low to erase FPGA */
    FPGA_NPROG_LOW();
   81406:	2019      	movs	r0, #25
   81408:	4b14      	ldr	r3, [pc, #80]	; (8145c <fpga_program_setup1+0x5c>)
   8140a:	4798      	blx	r3

    usart_spi_opt_t spiopts;
    spiopts.baudrate = 10000000UL;
   8140c:	4b14      	ldr	r3, [pc, #80]	; (81460 <fpga_program_setup1+0x60>)
   8140e:	603b      	str	r3, [r7, #0]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   81410:	23c0      	movs	r3, #192	; 0xc0
   81412:	607b      	str	r3, [r7, #4]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   81414:	2300      	movs	r3, #0
   81416:	60fb      	str	r3, [r7, #12]
    spiopts.spi_mode = SPI_MODE_0;
   81418:	2300      	movs	r3, #0
   8141a:	60bb      	str	r3, [r7, #8]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   8141c:	200d      	movs	r0, #13
   8141e:	4b11      	ldr	r3, [pc, #68]	; (81464 <fpga_program_setup1+0x64>)
   81420:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   81422:	4b11      	ldr	r3, [pc, #68]	; (81468 <fpga_program_setup1+0x68>)
   81424:	4798      	blx	r3
   81426:	4602      	mov	r2, r0
   81428:	463b      	mov	r3, r7
   8142a:	4619      	mov	r1, r3
   8142c:	480f      	ldr	r0, [pc, #60]	; (8146c <fpga_program_setup1+0x6c>)
   8142e:	4b10      	ldr	r3, [pc, #64]	; (81470 <fpga_program_setup1+0x70>)
   81430:	4798      	blx	r3
    FPGA_DO_SETUP();
   81432:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81436:	2012      	movs	r0, #18
   81438:	4b0e      	ldr	r3, [pc, #56]	; (81474 <fpga_program_setup1+0x74>)
   8143a:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   8143c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81440:	2011      	movs	r0, #17
   81442:	4b0c      	ldr	r3, [pc, #48]	; (81474 <fpga_program_setup1+0x74>)
   81444:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   81446:	4b0c      	ldr	r3, [pc, #48]	; (81478 <fpga_program_setup1+0x78>)
   81448:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8144c:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   8144e:	4807      	ldr	r0, [pc, #28]	; (8146c <fpga_program_setup1+0x6c>)
   81450:	4b0a      	ldr	r3, [pc, #40]	; (8147c <fpga_program_setup1+0x7c>)
   81452:	4798      	blx	r3
}
   81454:	bf00      	nop
   81456:	3710      	adds	r7, #16
   81458:	46bd      	mov	sp, r7
   8145a:	bd80      	pop	{r7, pc}
   8145c:	0008227d 	.word	0x0008227d
   81460:	00989680 	.word	0x00989680
   81464:	000813c5 	.word	0x000813c5
   81468:	000813b1 	.word	0x000813b1
   8146c:	40090000 	.word	0x40090000
   81470:	000863c1 	.word	0x000863c1
   81474:	000822ad 	.word	0x000822ad
   81478:	400e0c00 	.word	0x400e0c00
   8147c:	000864d1 	.word	0x000864d1

00081480 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   81480:	b580      	push	{r7, lr}
   81482:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   81484:	2019      	movs	r0, #25
   81486:	4b02      	ldr	r3, [pc, #8]	; (81490 <fpga_program_setup2+0x10>)
   81488:	4798      	blx	r3
}
   8148a:	bf00      	nop
   8148c:	bd80      	pop	{r7, pc}
   8148e:	bf00      	nop
   81490:	0008224d 	.word	0x0008224d

00081494 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   81494:	b580      	push	{r7, lr}
   81496:	b082      	sub	sp, #8
   81498:	af00      	add	r7, sp, #0
   8149a:	4603      	mov	r3, r0
   8149c:	71fb      	strb	r3, [r7, #7]
    //For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   8149e:	79fb      	ldrb	r3, [r7, #7]
   814a0:	4619      	mov	r1, r3
   814a2:	4803      	ldr	r0, [pc, #12]	; (814b0 <fpga_program_sendbyte+0x1c>)
   814a4:	4b03      	ldr	r3, [pc, #12]	; (814b4 <fpga_program_sendbyte+0x20>)
   814a6:	4798      	blx	r3
}
   814a8:	bf00      	nop
   814aa:	3708      	adds	r7, #8
   814ac:	46bd      	mov	sp, r7
   814ae:	bd80      	pop	{r7, pc}
   814b0:	40090000 	.word	0x40090000
   814b4:	000865f7 	.word	0x000865f7

000814b8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   814b8:	b480      	push	{r7}
   814ba:	b083      	sub	sp, #12
   814bc:	af00      	add	r7, sp, #0
   814be:	4603      	mov	r3, r0
   814c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   814c2:	79fb      	ldrb	r3, [r7, #7]
   814c4:	f003 031f 	and.w	r3, r3, #31
   814c8:	2201      	movs	r2, #1
   814ca:	fa02 f103 	lsl.w	r1, r2, r3
   814ce:	4a05      	ldr	r2, [pc, #20]	; (814e4 <NVIC_EnableIRQ+0x2c>)
   814d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   814d4:	095b      	lsrs	r3, r3, #5
   814d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   814da:	bf00      	nop
   814dc:	370c      	adds	r7, #12
   814de:	46bd      	mov	sp, r7
   814e0:	bc80      	pop	{r7}
   814e2:	4770      	bx	lr
   814e4:	e000e100 	.word	0xe000e100

000814e8 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   814e8:	b480      	push	{r7}
   814ea:	b083      	sub	sp, #12
   814ec:	af00      	add	r7, sp, #0
   814ee:	4603      	mov	r3, r0
   814f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   814f2:	79fb      	ldrb	r3, [r7, #7]
   814f4:	f003 031f 	and.w	r3, r3, #31
   814f8:	2201      	movs	r2, #1
   814fa:	fa02 f103 	lsl.w	r1, r2, r3
   814fe:	4a06      	ldr	r2, [pc, #24]	; (81518 <NVIC_ClearPendingIRQ+0x30>)
   81500:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81504:	095b      	lsrs	r3, r3, #5
   81506:	3360      	adds	r3, #96	; 0x60
   81508:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   8150c:	bf00      	nop
   8150e:	370c      	adds	r7, #12
   81510:	46bd      	mov	sp, r7
   81512:	bc80      	pop	{r7}
   81514:	4770      	bx	lr
   81516:	bf00      	nop
   81518:	e000e100 	.word	0xe000e100

0008151c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   8151c:	b480      	push	{r7}
   8151e:	b083      	sub	sp, #12
   81520:	af00      	add	r7, sp, #0
   81522:	4603      	mov	r3, r0
   81524:	6039      	str	r1, [r7, #0]
   81526:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81528:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8152c:	2b00      	cmp	r3, #0
   8152e:	da0b      	bge.n	81548 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81530:	683b      	ldr	r3, [r7, #0]
   81532:	b2da      	uxtb	r2, r3
   81534:	490c      	ldr	r1, [pc, #48]	; (81568 <NVIC_SetPriority+0x4c>)
   81536:	79fb      	ldrb	r3, [r7, #7]
   81538:	f003 030f 	and.w	r3, r3, #15
   8153c:	3b04      	subs	r3, #4
   8153e:	0112      	lsls	r2, r2, #4
   81540:	b2d2      	uxtb	r2, r2
   81542:	440b      	add	r3, r1
   81544:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   81546:	e009      	b.n	8155c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81548:	683b      	ldr	r3, [r7, #0]
   8154a:	b2da      	uxtb	r2, r3
   8154c:	4907      	ldr	r1, [pc, #28]	; (8156c <NVIC_SetPriority+0x50>)
   8154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81552:	0112      	lsls	r2, r2, #4
   81554:	b2d2      	uxtb	r2, r2
   81556:	440b      	add	r3, r1
   81558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   8155c:	bf00      	nop
   8155e:	370c      	adds	r7, #12
   81560:	46bd      	mov	sp, r7
   81562:	bc80      	pop	{r7}
   81564:	4770      	bx	lr
   81566:	bf00      	nop
   81568:	e000ed00 	.word	0xe000ed00
   8156c:	e000e100 	.word	0xe000e100

00081570 <osc_get_rate>:
{
   81570:	b480      	push	{r7}
   81572:	b083      	sub	sp, #12
   81574:	af00      	add	r7, sp, #0
   81576:	6078      	str	r0, [r7, #4]
   81578:	687b      	ldr	r3, [r7, #4]
   8157a:	2b07      	cmp	r3, #7
   8157c:	d823      	bhi.n	815c6 <osc_get_rate+0x56>
   8157e:	a201      	add	r2, pc, #4	; (adr r2, 81584 <osc_get_rate+0x14>)
   81580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81584:	000815a5 	.word	0x000815a5
   81588:	000815ab 	.word	0x000815ab
   8158c:	000815af 	.word	0x000815af
   81590:	000815b3 	.word	0x000815b3
   81594:	000815b7 	.word	0x000815b7
   81598:	000815bb 	.word	0x000815bb
   8159c:	000815bf 	.word	0x000815bf
   815a0:	000815c3 	.word	0x000815c3
		return OSC_SLCK_32K_RC_HZ;
   815a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   815a8:	e00e      	b.n	815c8 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   815aa:	2300      	movs	r3, #0
   815ac:	e00c      	b.n	815c8 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   815ae:	2300      	movs	r3, #0
   815b0:	e00a      	b.n	815c8 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   815b2:	4b08      	ldr	r3, [pc, #32]	; (815d4 <osc_get_rate+0x64>)
   815b4:	e008      	b.n	815c8 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   815b6:	4b08      	ldr	r3, [pc, #32]	; (815d8 <osc_get_rate+0x68>)
   815b8:	e006      	b.n	815c8 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   815ba:	4b08      	ldr	r3, [pc, #32]	; (815dc <osc_get_rate+0x6c>)
   815bc:	e004      	b.n	815c8 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   815be:	4b07      	ldr	r3, [pc, #28]	; (815dc <osc_get_rate+0x6c>)
   815c0:	e002      	b.n	815c8 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   815c2:	4b06      	ldr	r3, [pc, #24]	; (815dc <osc_get_rate+0x6c>)
   815c4:	e000      	b.n	815c8 <osc_get_rate+0x58>
	return 0;
   815c6:	2300      	movs	r3, #0
}
   815c8:	4618      	mov	r0, r3
   815ca:	370c      	adds	r7, #12
   815cc:	46bd      	mov	sp, r7
   815ce:	bc80      	pop	{r7}
   815d0:	4770      	bx	lr
   815d2:	bf00      	nop
   815d4:	003d0900 	.word	0x003d0900
   815d8:	007a1200 	.word	0x007a1200
   815dc:	00b71b00 	.word	0x00b71b00

000815e0 <sysclk_get_main_hz>:
{
   815e0:	b580      	push	{r7, lr}
   815e2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   815e4:	2006      	movs	r0, #6
   815e6:	4b03      	ldr	r3, [pc, #12]	; (815f4 <sysclk_get_main_hz+0x14>)
   815e8:	4798      	blx	r3
   815ea:	4603      	mov	r3, r0
   815ec:	011b      	lsls	r3, r3, #4
}
   815ee:	4618      	mov	r0, r3
   815f0:	bd80      	pop	{r7, pc}
   815f2:	bf00      	nop
   815f4:	00081571 	.word	0x00081571

000815f8 <sysclk_get_cpu_hz>:
{
   815f8:	b580      	push	{r7, lr}
   815fa:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   815fc:	4b02      	ldr	r3, [pc, #8]	; (81608 <sysclk_get_cpu_hz+0x10>)
   815fe:	4798      	blx	r3
   81600:	4603      	mov	r3, r0
   81602:	085b      	lsrs	r3, r3, #1
}
   81604:	4618      	mov	r0, r3
   81606:	bd80      	pop	{r7, pc}
   81608:	000815e1 	.word	0x000815e1

0008160c <sysclk_enable_peripheral_clock>:
{
   8160c:	b580      	push	{r7, lr}
   8160e:	b082      	sub	sp, #8
   81610:	af00      	add	r7, sp, #0
   81612:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81614:	6878      	ldr	r0, [r7, #4]
   81616:	4b03      	ldr	r3, [pc, #12]	; (81624 <sysclk_enable_peripheral_clock+0x18>)
   81618:	4798      	blx	r3
}
   8161a:	bf00      	nop
   8161c:	3708      	adds	r7, #8
   8161e:	46bd      	mov	sp, r7
   81620:	bd80      	pop	{r7, pc}
   81622:	bf00      	nop
   81624:	00082911 	.word	0x00082911

00081628 <usart0_enableIO>:
tcirc_buf rx1buf, tx1buf;
tcirc_buf rx2buf, tx2buf;
tcirc_buf rx3buf, tx3buf;

static inline void usart0_enableIO(void)
{
   81628:	b580      	push	{r7, lr}
   8162a:	af00      	add	r7, sp, #0
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   8162c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81630:	2013      	movs	r0, #19
   81632:	4b04      	ldr	r3, [pc, #16]	; (81644 <usart0_enableIO+0x1c>)
   81634:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81636:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8163a:	2012      	movs	r0, #18
   8163c:	4b01      	ldr	r3, [pc, #4]	; (81644 <usart0_enableIO+0x1c>)
   8163e:	4798      	blx	r3
}
   81640:	bf00      	nop
   81642:	bd80      	pop	{r7, pc}
   81644:	000822ad 	.word	0x000822ad

00081648 <ctrl_usart>:
	gpio_configure_pin(PIN_USART3_TXD, PIN_USART3_TXD_FLAGS);
}
#endif

bool ctrl_usart(Usart * usart, bool directionIn)
{
   81648:	b580      	push	{r7, lr}
   8164a:	b08a      	sub	sp, #40	; 0x28
   8164c:	af00      	add	r7, sp, #0
   8164e:	6078      	str	r0, [r7, #4]
   81650:	460b      	mov	r3, r1
   81652:	70fb      	strb	r3, [r7, #3]
	uint8_t 	bParityType //Partity Type, 0=None, 1=Odd, 2=Even, 3=Mark, 4=Space
	uint8_t 	bDataBits //Data bits 5,6,7,8
	
	*/
	
	switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81654:	4b99      	ldr	r3, [pc, #612]	; (818bc <ctrl_usart+0x274>)
   81656:	885b      	ldrh	r3, [r3, #2]
   81658:	b2db      	uxtb	r3, r3
   8165a:	3b10      	subs	r3, #16
   8165c:	2b08      	cmp	r3, #8
   8165e:	f200 81cb 	bhi.w	819f8 <ctrl_usart+0x3b0>
   81662:	a201      	add	r2, pc, #4	; (adr r2, 81668 <ctrl_usart+0x20>)
   81664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81668:	0008168d 	.word	0x0008168d
   8166c:	000817e5 	.word	0x000817e5
   81670:	00081867 	.word	0x00081867
   81674:	000819f9 	.word	0x000819f9
   81678:	0008188b 	.word	0x0008188b
   8167c:	000819f9 	.word	0x000819f9
   81680:	000819f9 	.word	0x000819f9
   81684:	000819f9 	.word	0x000819f9
   81688:	00081973 	.word	0x00081973
	{
		case USART_WVREQ_INIT:
			if (directionIn){
   8168c:	78fb      	ldrb	r3, [r7, #3]
   8168e:	2b00      	cmp	r3, #0
   81690:	d006      	beq.n	816a0 <ctrl_usart+0x58>
				if (udd_g_ctrlreq.req.wLength == 4){
   81692:	4b8a      	ldr	r3, [pc, #552]	; (818bc <ctrl_usart+0x274>)
   81694:	88db      	ldrh	r3, [r3, #6]
   81696:	2b04      	cmp	r3, #4
   81698:	f040 81a5 	bne.w	819e6 <ctrl_usart+0x39e>
					/*
					udd_g_ctrlreq.payload_size = 4;
					udd_g_ctrlreq.payload = ctrlbuffer;
					word2buf(ctrlbuffer, baud);
					*/
					return true;
   8169c:	2301      	movs	r3, #1
   8169e:	e1ac      	b.n	819fa <ctrl_usart+0x3b2>
				}
			} else {	
					if (udd_g_ctrlreq.req.wLength == 7) 
   816a0:	4b86      	ldr	r3, [pc, #536]	; (818bc <ctrl_usart+0x274>)
   816a2:	88db      	ldrh	r3, [r3, #6]
   816a4:	2b07      	cmp	r3, #7
   816a6:	f040 8099 	bne.w	817dc <ctrl_usart+0x194>
						{
					
						buf2word(baud, udd_g_ctrlreq.payload);	
   816aa:	4b84      	ldr	r3, [pc, #528]	; (818bc <ctrl_usart+0x274>)
   816ac:	689b      	ldr	r3, [r3, #8]
   816ae:	681b      	ldr	r3, [r3, #0]
   816b0:	627b      	str	r3, [r7, #36]	; 0x24
					
						usartopts.baudrate = baud;
   816b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   816b4:	60fb      	str	r3, [r7, #12]
						
						/* Stop Bits */
						switch(udd_g_ctrlreq.payload[4])
   816b6:	4b81      	ldr	r3, [pc, #516]	; (818bc <ctrl_usart+0x274>)
   816b8:	689b      	ldr	r3, [r3, #8]
   816ba:	3304      	adds	r3, #4
   816bc:	781b      	ldrb	r3, [r3, #0]
   816be:	2b02      	cmp	r3, #2
   816c0:	d00d      	beq.n	816de <ctrl_usart+0x96>
   816c2:	2b02      	cmp	r3, #2
   816c4:	dc0f      	bgt.n	816e6 <ctrl_usart+0x9e>
   816c6:	2b00      	cmp	r3, #0
   816c8:	d002      	beq.n	816d0 <ctrl_usart+0x88>
   816ca:	2b01      	cmp	r3, #1
   816cc:	d003      	beq.n	816d6 <ctrl_usart+0x8e>
   816ce:	e00a      	b.n	816e6 <ctrl_usart+0x9e>
							{
							case 0:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   816d0:	2300      	movs	r3, #0
   816d2:	61bb      	str	r3, [r7, #24]
								break;
   816d4:	e009      	b.n	816ea <ctrl_usart+0xa2>
							case 1:
								usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   816d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   816da:	61bb      	str	r3, [r7, #24]
								break;
   816dc:	e005      	b.n	816ea <ctrl_usart+0xa2>
							case 2:
								usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   816de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   816e2:	61bb      	str	r3, [r7, #24]
								break;
   816e4:	e001      	b.n	816ea <ctrl_usart+0xa2>
							default:
								usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   816e6:	2300      	movs	r3, #0
   816e8:	61bb      	str	r3, [r7, #24]
							}
					
						/* Parity */
						switch(udd_g_ctrlreq.payload[5])
   816ea:	4b74      	ldr	r3, [pc, #464]	; (818bc <ctrl_usart+0x274>)
   816ec:	689b      	ldr	r3, [r3, #8]
   816ee:	3305      	adds	r3, #5
   816f0:	781b      	ldrb	r3, [r3, #0]
   816f2:	2b04      	cmp	r3, #4
   816f4:	d81f      	bhi.n	81736 <ctrl_usart+0xee>
   816f6:	a201      	add	r2, pc, #4	; (adr r2, 816fc <ctrl_usart+0xb4>)
   816f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   816fc:	00081711 	.word	0x00081711
   81700:	00081719 	.word	0x00081719
   81704:	00081721 	.word	0x00081721
   81708:	00081727 	.word	0x00081727
   8170c:	0008172f 	.word	0x0008172f
							{
							case 0:
								usartopts.parity_type = US_MR_PAR_NO;
   81710:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81714:	617b      	str	r3, [r7, #20]
								break;
   81716:	e011      	b.n	8173c <ctrl_usart+0xf4>
							case 1:
								usartopts.parity_type = US_MR_PAR_ODD;
   81718:	f44f 7300 	mov.w	r3, #512	; 0x200
   8171c:	617b      	str	r3, [r7, #20]
								break;
   8171e:	e00d      	b.n	8173c <ctrl_usart+0xf4>
							case 2:
								usartopts.parity_type = US_MR_PAR_EVEN;
   81720:	2300      	movs	r3, #0
   81722:	617b      	str	r3, [r7, #20]
								break;
   81724:	e00a      	b.n	8173c <ctrl_usart+0xf4>
							case 3:
								usartopts.parity_type = US_MR_PAR_MARK;
   81726:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   8172a:	617b      	str	r3, [r7, #20]
								break;
   8172c:	e006      	b.n	8173c <ctrl_usart+0xf4>
							case 4:
								usartopts.parity_type = US_MR_PAR_SPACE;
   8172e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81732:	617b      	str	r3, [r7, #20]
								break;							
   81734:	e002      	b.n	8173c <ctrl_usart+0xf4>
							default:
								usartopts.parity_type = US_MR_PAR_NO;
   81736:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8173a:	617b      	str	r3, [r7, #20]
							}
					
						/* Data Bits */
						switch(udd_g_ctrlreq.payload[6])
   8173c:	4b5f      	ldr	r3, [pc, #380]	; (818bc <ctrl_usart+0x274>)
   8173e:	689b      	ldr	r3, [r3, #8]
   81740:	3306      	adds	r3, #6
   81742:	781b      	ldrb	r3, [r3, #0]
   81744:	2b07      	cmp	r3, #7
   81746:	d00c      	beq.n	81762 <ctrl_usart+0x11a>
   81748:	2b07      	cmp	r3, #7
   8174a:	dc0d      	bgt.n	81768 <ctrl_usart+0x120>
   8174c:	2b05      	cmp	r3, #5
   8174e:	d002      	beq.n	81756 <ctrl_usart+0x10e>
   81750:	2b06      	cmp	r3, #6
   81752:	d003      	beq.n	8175c <ctrl_usart+0x114>
   81754:	e008      	b.n	81768 <ctrl_usart+0x120>
							{
							case 5:
								usartopts.char_length = US_MR_CHRL_5_BIT;
   81756:	2300      	movs	r3, #0
   81758:	613b      	str	r3, [r7, #16]
								break;
   8175a:	e007      	b.n	8176c <ctrl_usart+0x124>
							case 6:
								usartopts.char_length = US_MR_CHRL_6_BIT;
   8175c:	2340      	movs	r3, #64	; 0x40
   8175e:	613b      	str	r3, [r7, #16]
								break;
   81760:	e004      	b.n	8176c <ctrl_usart+0x124>
							case 7:
								usartopts.char_length = US_MR_CHRL_7_BIT;
   81762:	2380      	movs	r3, #128	; 0x80
   81764:	613b      	str	r3, [r7, #16]
								break;					
   81766:	e001      	b.n	8176c <ctrl_usart+0x124>
							case 8:							
							default:
								usartopts.char_length = US_MR_CHRL_8_BIT;
   81768:	23c0      	movs	r3, #192	; 0xc0
   8176a:	613b      	str	r3, [r7, #16]
							}
							
						usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   8176c:	2300      	movs	r3, #0
   8176e:	61fb      	str	r3, [r7, #28]

						if (usart == USART0)
   81770:	687b      	ldr	r3, [r7, #4]
   81772:	4a53      	ldr	r2, [pc, #332]	; (818c0 <ctrl_usart+0x278>)
   81774:	4293      	cmp	r3, r2
   81776:	d10c      	bne.n	81792 <ctrl_usart+0x14a>
						{
							sysclk_enable_peripheral_clock(ID_USART0);
   81778:	200d      	movs	r0, #13
   8177a:	4b52      	ldr	r3, [pc, #328]	; (818c4 <ctrl_usart+0x27c>)
   8177c:	4798      	blx	r3
							init_circ_buf(&tx0buf);
   8177e:	4852      	ldr	r0, [pc, #328]	; (818c8 <ctrl_usart+0x280>)
   81780:	4b52      	ldr	r3, [pc, #328]	; (818cc <ctrl_usart+0x284>)
   81782:	4798      	blx	r3
							init_circ_buf(&rx0buf);
   81784:	4852      	ldr	r0, [pc, #328]	; (818d0 <ctrl_usart+0x288>)
   81786:	4b51      	ldr	r3, [pc, #324]	; (818cc <ctrl_usart+0x284>)
   81788:	4798      	blx	r3
							printf("Enabling USART0\n");
   8178a:	4852      	ldr	r0, [pc, #328]	; (818d4 <ctrl_usart+0x28c>)
   8178c:	4b52      	ldr	r3, [pc, #328]	; (818d8 <ctrl_usart+0x290>)
   8178e:	4798      	blx	r3
   81790:	e01a      	b.n	817c8 <ctrl_usart+0x180>
						} else if (usart == USART1)
   81792:	687b      	ldr	r3, [r7, #4]
   81794:	4a51      	ldr	r2, [pc, #324]	; (818dc <ctrl_usart+0x294>)
   81796:	4293      	cmp	r3, r2
   81798:	d109      	bne.n	817ae <ctrl_usart+0x166>
						{
							sysclk_enable_peripheral_clock(ID_USART1);
   8179a:	200e      	movs	r0, #14
   8179c:	4b49      	ldr	r3, [pc, #292]	; (818c4 <ctrl_usart+0x27c>)
   8179e:	4798      	blx	r3
							init_circ_buf(&tx1buf);
   817a0:	484f      	ldr	r0, [pc, #316]	; (818e0 <ctrl_usart+0x298>)
   817a2:	4b4a      	ldr	r3, [pc, #296]	; (818cc <ctrl_usart+0x284>)
   817a4:	4798      	blx	r3
							init_circ_buf(&rx1buf);
   817a6:	484f      	ldr	r0, [pc, #316]	; (818e4 <ctrl_usart+0x29c>)
   817a8:	4b48      	ldr	r3, [pc, #288]	; (818cc <ctrl_usart+0x284>)
   817aa:	4798      	blx	r3
   817ac:	e00c      	b.n	817c8 <ctrl_usart+0x180>
						} else if (usart == USART2)
   817ae:	687b      	ldr	r3, [r7, #4]
   817b0:	4a4d      	ldr	r2, [pc, #308]	; (818e8 <ctrl_usart+0x2a0>)
   817b2:	4293      	cmp	r3, r2
   817b4:	d108      	bne.n	817c8 <ctrl_usart+0x180>
						{
							sysclk_enable_peripheral_clock(ID_USART2);
   817b6:	200f      	movs	r0, #15
   817b8:	4b42      	ldr	r3, [pc, #264]	; (818c4 <ctrl_usart+0x27c>)
   817ba:	4798      	blx	r3
							init_circ_buf(&tx2buf);
   817bc:	484b      	ldr	r0, [pc, #300]	; (818ec <ctrl_usart+0x2a4>)
   817be:	4b43      	ldr	r3, [pc, #268]	; (818cc <ctrl_usart+0x284>)
   817c0:	4798      	blx	r3
							init_circ_buf(&rx2buf);
   817c2:	484b      	ldr	r0, [pc, #300]	; (818f0 <ctrl_usart+0x2a8>)
   817c4:	4b41      	ldr	r3, [pc, #260]	; (818cc <ctrl_usart+0x284>)
   817c6:	4798      	blx	r3
							sysclk_enable_peripheral_clock(ID_USART3);
							init_circ_buf(&tx3buf);
							init_circ_buf(&rx3buf);
						}
#endif
						usart_init_rs232(usart, &usartopts,  sysclk_get_cpu_hz());						 
   817c8:	4b4a      	ldr	r3, [pc, #296]	; (818f4 <ctrl_usart+0x2ac>)
   817ca:	4798      	blx	r3
   817cc:	4602      	mov	r2, r0
   817ce:	f107 030c 	add.w	r3, r7, #12
   817d2:	4619      	mov	r1, r3
   817d4:	6878      	ldr	r0, [r7, #4]
   817d6:	4b48      	ldr	r3, [pc, #288]	; (818f8 <ctrl_usart+0x2b0>)
   817d8:	4798      	blx	r3
					} else {
						printf("ERR: Invalid USART Configuration packet?\n");
					}
			}
			break;
   817da:	e104      	b.n	819e6 <ctrl_usart+0x39e>
						printf("ERR: Invalid USART Configuration packet?\n");
   817dc:	4847      	ldr	r0, [pc, #284]	; (818fc <ctrl_usart+0x2b4>)
   817de:	4b3e      	ldr	r3, [pc, #248]	; (818d8 <ctrl_usart+0x290>)
   817e0:	4798      	blx	r3
			break;
   817e2:	e100      	b.n	819e6 <ctrl_usart+0x39e>
			
		case USART_WVREQ_ENABLE:
			if (directionIn == false){
   817e4:	78fb      	ldrb	r3, [r7, #3]
   817e6:	f083 0301 	eor.w	r3, r3, #1
   817ea:	b2db      	uxtb	r3, r3
   817ec:	2b00      	cmp	r3, #0
   817ee:	f000 80fc 	beq.w	819ea <ctrl_usart+0x3a2>
				usart_enable_rx(usart);
   817f2:	6878      	ldr	r0, [r7, #4]
   817f4:	4b42      	ldr	r3, [pc, #264]	; (81900 <ctrl_usart+0x2b8>)
   817f6:	4798      	blx	r3
				usart_enable_tx(usart);
   817f8:	6878      	ldr	r0, [r7, #4]
   817fa:	4b42      	ldr	r3, [pc, #264]	; (81904 <ctrl_usart+0x2bc>)
   817fc:	4798      	blx	r3
				
				usart_enable_interrupt(usart, UART_IER_RXRDY);
   817fe:	2101      	movs	r1, #1
   81800:	6878      	ldr	r0, [r7, #4]
   81802:	4b41      	ldr	r3, [pc, #260]	; (81908 <ctrl_usart+0x2c0>)
   81804:	4798      	blx	r3
				
				/* Enable IO Pins */
				if (usart == USART0){
   81806:	687b      	ldr	r3, [r7, #4]
   81808:	4a2d      	ldr	r2, [pc, #180]	; (818c0 <ctrl_usart+0x278>)
   8180a:	4293      	cmp	r3, r2
   8180c:	d10c      	bne.n	81828 <ctrl_usart+0x1e0>
					usart0_enableIO();
   8180e:	4b3f      	ldr	r3, [pc, #252]	; (8190c <ctrl_usart+0x2c4>)
   81810:	4798      	blx	r3
					irq_register_handler(USART0_IRQn, 5);
   81812:	200d      	movs	r0, #13
   81814:	4b3e      	ldr	r3, [pc, #248]	; (81910 <ctrl_usart+0x2c8>)
   81816:	4798      	blx	r3
   81818:	2105      	movs	r1, #5
   8181a:	200d      	movs	r0, #13
   8181c:	4b3d      	ldr	r3, [pc, #244]	; (81914 <ctrl_usart+0x2cc>)
   8181e:	4798      	blx	r3
   81820:	200d      	movs	r0, #13
   81822:	4b3d      	ldr	r3, [pc, #244]	; (81918 <ctrl_usart+0x2d0>)
   81824:	4798      	blx	r3
					usart3_enableIO();
					irq_register_handler(USART3_IRQn, 5);
				}
#endif
			}
			break;
   81826:	e0e0      	b.n	819ea <ctrl_usart+0x3a2>
				} else if (usart == USART1) {
   81828:	687b      	ldr	r3, [r7, #4]
   8182a:	4a2c      	ldr	r2, [pc, #176]	; (818dc <ctrl_usart+0x294>)
   8182c:	4293      	cmp	r3, r2
   8182e:	d10a      	bne.n	81846 <ctrl_usart+0x1fe>
					irq_register_handler(USART1_IRQn, 5);
   81830:	200e      	movs	r0, #14
   81832:	4b37      	ldr	r3, [pc, #220]	; (81910 <ctrl_usart+0x2c8>)
   81834:	4798      	blx	r3
   81836:	2105      	movs	r1, #5
   81838:	200e      	movs	r0, #14
   8183a:	4b36      	ldr	r3, [pc, #216]	; (81914 <ctrl_usart+0x2cc>)
   8183c:	4798      	blx	r3
   8183e:	200e      	movs	r0, #14
   81840:	4b35      	ldr	r3, [pc, #212]	; (81918 <ctrl_usart+0x2d0>)
   81842:	4798      	blx	r3
			break;
   81844:	e0d1      	b.n	819ea <ctrl_usart+0x3a2>
				} else if (usart == USART2) {
   81846:	687b      	ldr	r3, [r7, #4]
   81848:	4a27      	ldr	r2, [pc, #156]	; (818e8 <ctrl_usart+0x2a0>)
   8184a:	4293      	cmp	r3, r2
   8184c:	f040 80cd 	bne.w	819ea <ctrl_usart+0x3a2>
					irq_register_handler(USART2_IRQn, 5);
   81850:	200f      	movs	r0, #15
   81852:	4b2f      	ldr	r3, [pc, #188]	; (81910 <ctrl_usart+0x2c8>)
   81854:	4798      	blx	r3
   81856:	2105      	movs	r1, #5
   81858:	200f      	movs	r0, #15
   8185a:	4b2e      	ldr	r3, [pc, #184]	; (81914 <ctrl_usart+0x2cc>)
   8185c:	4798      	blx	r3
   8185e:	200f      	movs	r0, #15
   81860:	4b2d      	ldr	r3, [pc, #180]	; (81918 <ctrl_usart+0x2d0>)
   81862:	4798      	blx	r3
			break;
   81864:	e0c1      	b.n	819ea <ctrl_usart+0x3a2>
						
		case USART_WVREQ_DISABLE:
			if (directionIn == false){
   81866:	78fb      	ldrb	r3, [r7, #3]
   81868:	f083 0301 	eor.w	r3, r3, #1
   8186c:	b2db      	uxtb	r3, r3
   8186e:	2b00      	cmp	r3, #0
   81870:	f000 80bd 	beq.w	819ee <ctrl_usart+0x3a6>
				usart_disable_rx(usart);
   81874:	6878      	ldr	r0, [r7, #4]
   81876:	4b29      	ldr	r3, [pc, #164]	; (8191c <ctrl_usart+0x2d4>)
   81878:	4798      	blx	r3
				usart_disable_rx(usart);
   8187a:	6878      	ldr	r0, [r7, #4]
   8187c:	4b27      	ldr	r3, [pc, #156]	; (8191c <ctrl_usart+0x2d4>)
   8187e:	4798      	blx	r3
				usart_disable_interrupt(usart, UART_IER_RXRDY|UART_IER_TXRDY);
   81880:	2103      	movs	r1, #3
   81882:	6878      	ldr	r0, [r7, #4]
   81884:	4b26      	ldr	r3, [pc, #152]	; (81920 <ctrl_usart+0x2d8>)
   81886:	4798      	blx	r3
			}
		
			break;
   81888:	e0b1      	b.n	819ee <ctrl_usart+0x3a6>
			
		case USART_WVREQ_NUMWAIT:		
			if (directionIn){
   8188a:	78fb      	ldrb	r3, [r7, #3]
   8188c:	2b00      	cmp	r3, #0
   8188e:	f000 80b0 	beq.w	819f2 <ctrl_usart+0x3aa>
				if (udd_g_ctrlreq.req.wLength == 4){
   81892:	4b0a      	ldr	r3, [pc, #40]	; (818bc <ctrl_usart+0x274>)
   81894:	88db      	ldrh	r3, [r3, #6]
   81896:	2b04      	cmp	r3, #4
   81898:	f040 80ab 	bne.w	819f2 <ctrl_usart+0x3aa>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   8189c:	4b07      	ldr	r3, [pc, #28]	; (818bc <ctrl_usart+0x274>)
   8189e:	4a21      	ldr	r2, [pc, #132]	; (81924 <ctrl_usart+0x2dc>)
   818a0:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   818a2:	4b06      	ldr	r3, [pc, #24]	; (818bc <ctrl_usart+0x274>)
   818a4:	2204      	movs	r2, #4
   818a6:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   818a8:	687b      	ldr	r3, [r7, #4]
   818aa:	4a05      	ldr	r2, [pc, #20]	; (818c0 <ctrl_usart+0x278>)
   818ac:	4293      	cmp	r3, r2
   818ae:	d13d      	bne.n	8192c <ctrl_usart+0x2e4>
						cnt = circ_buf_count(&rx0buf);
   818b0:	4807      	ldr	r0, [pc, #28]	; (818d0 <ctrl_usart+0x288>)
   818b2:	4b1d      	ldr	r3, [pc, #116]	; (81928 <ctrl_usart+0x2e0>)
   818b4:	4798      	blx	r3
   818b6:	4603      	mov	r3, r0
   818b8:	60bb      	str	r3, [r7, #8]
   818ba:	e04a      	b.n	81952 <ctrl_usart+0x30a>
   818bc:	20001828 	.word	0x20001828
   818c0:	40090000 	.word	0x40090000
   818c4:	0008160d 	.word	0x0008160d
   818c8:	20001790 	.word	0x20001790
   818cc:	00081c39 	.word	0x00081c39
   818d0:	20001448 	.word	0x20001448
   818d4:	0008d360 	.word	0x0008d360
   818d8:	000869f1 	.word	0x000869f1
   818dc:	40094000 	.word	0x40094000
   818e0:	20001560 	.word	0x20001560
   818e4:	20001704 	.word	0x20001704
   818e8:	40098000 	.word	0x40098000
   818ec:	200013bc 	.word	0x200013bc
   818f0:	20001678 	.word	0x20001678
   818f4:	000815f9 	.word	0x000815f9
   818f8:	0008633d 	.word	0x0008633d
   818fc:	0008d374 	.word	0x0008d374
   81900:	00086501 	.word	0x00086501
   81904:	000864d1 	.word	0x000864d1
   81908:	00086549 	.word	0x00086549
   8190c:	00081629 	.word	0x00081629
   81910:	000814e9 	.word	0x000814e9
   81914:	0008151d 	.word	0x0008151d
   81918:	000814b9 	.word	0x000814b9
   8191c:	00086519 	.word	0x00086519
   81920:	00086563 	.word	0x00086563
   81924:	200012a0 	.word	0x200012a0
   81928:	00081d31 	.word	0x00081d31
					} else if (usart == USART1){
   8192c:	687b      	ldr	r3, [r7, #4]
   8192e:	4a35      	ldr	r2, [pc, #212]	; (81a04 <ctrl_usart+0x3bc>)
   81930:	4293      	cmp	r3, r2
   81932:	d105      	bne.n	81940 <ctrl_usart+0x2f8>
						cnt = circ_buf_count(&rx1buf);
   81934:	4834      	ldr	r0, [pc, #208]	; (81a08 <ctrl_usart+0x3c0>)
   81936:	4b35      	ldr	r3, [pc, #212]	; (81a0c <ctrl_usart+0x3c4>)
   81938:	4798      	blx	r3
   8193a:	4603      	mov	r3, r0
   8193c:	60bb      	str	r3, [r7, #8]
   8193e:	e008      	b.n	81952 <ctrl_usart+0x30a>
					} else if (usart == USART2){
   81940:	687b      	ldr	r3, [r7, #4]
   81942:	4a33      	ldr	r2, [pc, #204]	; (81a10 <ctrl_usart+0x3c8>)
   81944:	4293      	cmp	r3, r2
   81946:	d104      	bne.n	81952 <ctrl_usart+0x30a>
						cnt = circ_buf_count(&rx2buf);
   81948:	4832      	ldr	r0, [pc, #200]	; (81a14 <ctrl_usart+0x3cc>)
   8194a:	4b30      	ldr	r3, [pc, #192]	; (81a0c <ctrl_usart+0x3c4>)
   8194c:	4798      	blx	r3
   8194e:	4603      	mov	r3, r0
   81950:	60bb      	str	r3, [r7, #8]
					else if (usart == USART3){
						cnt = circ_buf_count(&rx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
   81952:	f107 0308 	add.w	r3, r7, #8
   81956:	781a      	ldrb	r2, [r3, #0]
   81958:	4b2f      	ldr	r3, [pc, #188]	; (81a18 <ctrl_usart+0x3d0>)
   8195a:	701a      	strb	r2, [r3, #0]
   8195c:	7a7a      	ldrb	r2, [r7, #9]
   8195e:	4b2e      	ldr	r3, [pc, #184]	; (81a18 <ctrl_usart+0x3d0>)
   81960:	705a      	strb	r2, [r3, #1]
   81962:	7aba      	ldrb	r2, [r7, #10]
   81964:	4b2c      	ldr	r3, [pc, #176]	; (81a18 <ctrl_usart+0x3d0>)
   81966:	709a      	strb	r2, [r3, #2]
   81968:	7afa      	ldrb	r2, [r7, #11]
   8196a:	4b2b      	ldr	r3, [pc, #172]	; (81a18 <ctrl_usart+0x3d0>)
   8196c:	70da      	strb	r2, [r3, #3]
			
					return true;
   8196e:	2301      	movs	r3, #1
   81970:	e043      	b.n	819fa <ctrl_usart+0x3b2>
				}
			}
			break;		
		case USART_WVREQ_NUMWAIT_TX:		
			if (directionIn){
   81972:	78fb      	ldrb	r3, [r7, #3]
   81974:	2b00      	cmp	r3, #0
   81976:	d03e      	beq.n	819f6 <ctrl_usart+0x3ae>
				if (udd_g_ctrlreq.req.wLength == 4){
   81978:	4b28      	ldr	r3, [pc, #160]	; (81a1c <ctrl_usart+0x3d4>)
   8197a:	88db      	ldrh	r3, [r3, #6]
   8197c:	2b04      	cmp	r3, #4
   8197e:	d13a      	bne.n	819f6 <ctrl_usart+0x3ae>
		
					udd_g_ctrlreq.payload = ctrlbuffer;
   81980:	4b26      	ldr	r3, [pc, #152]	; (81a1c <ctrl_usart+0x3d4>)
   81982:	4a25      	ldr	r2, [pc, #148]	; (81a18 <ctrl_usart+0x3d0>)
   81984:	609a      	str	r2, [r3, #8]
					udd_g_ctrlreq.payload_size = 4;
   81986:	4b25      	ldr	r3, [pc, #148]	; (81a1c <ctrl_usart+0x3d4>)
   81988:	2204      	movs	r2, #4
   8198a:	819a      	strh	r2, [r3, #12]

					if (usart == USART0){
   8198c:	687b      	ldr	r3, [r7, #4]
   8198e:	4a24      	ldr	r2, [pc, #144]	; (81a20 <ctrl_usart+0x3d8>)
   81990:	4293      	cmp	r3, r2
   81992:	d105      	bne.n	819a0 <ctrl_usart+0x358>
						cnt = circ_buf_count(&tx0buf);
   81994:	4823      	ldr	r0, [pc, #140]	; (81a24 <ctrl_usart+0x3dc>)
   81996:	4b1d      	ldr	r3, [pc, #116]	; (81a0c <ctrl_usart+0x3c4>)
   81998:	4798      	blx	r3
   8199a:	4603      	mov	r3, r0
   8199c:	60bb      	str	r3, [r7, #8]
   8199e:	e012      	b.n	819c6 <ctrl_usart+0x37e>
					} else if (usart == USART1){
   819a0:	687b      	ldr	r3, [r7, #4]
   819a2:	4a18      	ldr	r2, [pc, #96]	; (81a04 <ctrl_usart+0x3bc>)
   819a4:	4293      	cmp	r3, r2
   819a6:	d105      	bne.n	819b4 <ctrl_usart+0x36c>
						cnt = circ_buf_count(&tx1buf);
   819a8:	481f      	ldr	r0, [pc, #124]	; (81a28 <ctrl_usart+0x3e0>)
   819aa:	4b18      	ldr	r3, [pc, #96]	; (81a0c <ctrl_usart+0x3c4>)
   819ac:	4798      	blx	r3
   819ae:	4603      	mov	r3, r0
   819b0:	60bb      	str	r3, [r7, #8]
   819b2:	e008      	b.n	819c6 <ctrl_usart+0x37e>
					} else if (usart == USART2){
   819b4:	687b      	ldr	r3, [r7, #4]
   819b6:	4a16      	ldr	r2, [pc, #88]	; (81a10 <ctrl_usart+0x3c8>)
   819b8:	4293      	cmp	r3, r2
   819ba:	d104      	bne.n	819c6 <ctrl_usart+0x37e>
						cnt = circ_buf_count(&tx2buf);
   819bc:	481b      	ldr	r0, [pc, #108]	; (81a2c <ctrl_usart+0x3e4>)
   819be:	4b13      	ldr	r3, [pc, #76]	; (81a0c <ctrl_usart+0x3c4>)
   819c0:	4798      	blx	r3
   819c2:	4603      	mov	r3, r0
   819c4:	60bb      	str	r3, [r7, #8]
					else if (usart == USART3){
						cnt = circ_buf_count(&tx3buf);
					}			
#endif
					
					word2buf(ctrlbuffer, cnt);
   819c6:	f107 0308 	add.w	r3, r7, #8
   819ca:	781a      	ldrb	r2, [r3, #0]
   819cc:	4b12      	ldr	r3, [pc, #72]	; (81a18 <ctrl_usart+0x3d0>)
   819ce:	701a      	strb	r2, [r3, #0]
   819d0:	7a7a      	ldrb	r2, [r7, #9]
   819d2:	4b11      	ldr	r3, [pc, #68]	; (81a18 <ctrl_usart+0x3d0>)
   819d4:	705a      	strb	r2, [r3, #1]
   819d6:	7aba      	ldrb	r2, [r7, #10]
   819d8:	4b0f      	ldr	r3, [pc, #60]	; (81a18 <ctrl_usart+0x3d0>)
   819da:	709a      	strb	r2, [r3, #2]
   819dc:	7afa      	ldrb	r2, [r7, #11]
   819de:	4b0e      	ldr	r3, [pc, #56]	; (81a18 <ctrl_usart+0x3d0>)
   819e0:	70da      	strb	r2, [r3, #3]
			
					return true;
   819e2:	2301      	movs	r3, #1
   819e4:	e009      	b.n	819fa <ctrl_usart+0x3b2>
			break;
   819e6:	bf00      	nop
   819e8:	e006      	b.n	819f8 <ctrl_usart+0x3b0>
			break;
   819ea:	bf00      	nop
   819ec:	e004      	b.n	819f8 <ctrl_usart+0x3b0>
			break;
   819ee:	bf00      	nop
   819f0:	e002      	b.n	819f8 <ctrl_usart+0x3b0>
			break;		
   819f2:	bf00      	nop
   819f4:	e000      	b.n	819f8 <ctrl_usart+0x3b0>
				}
			}
			break;		
   819f6:	bf00      	nop
	}
	
	return false;
   819f8:	2300      	movs	r3, #0
}
   819fa:	4618      	mov	r0, r3
   819fc:	3728      	adds	r7, #40	; 0x28
   819fe:	46bd      	mov	sp, r7
   81a00:	bd80      	pop	{r7, pc}
   81a02:	bf00      	nop
   81a04:	40094000 	.word	0x40094000
   81a08:	20001704 	.word	0x20001704
   81a0c:	00081d31 	.word	0x00081d31
   81a10:	40098000 	.word	0x40098000
   81a14:	20001678 	.word	0x20001678
   81a18:	200012a0 	.word	0x200012a0
   81a1c:	20001828 	.word	0x20001828
   81a20:	40090000 	.word	0x40090000
   81a24:	20001790 	.word	0x20001790
   81a28:	20001560 	.word	0x20001560
   81a2c:	200013bc 	.word	0x200013bc

00081a30 <usart_driver_putchar>:

void usart_driver_putchar(Usart * usart, tcirc_buf * txbuf, uint8_t data)
{
   81a30:	b580      	push	{r7, lr}
   81a32:	b084      	sub	sp, #16
   81a34:	af00      	add	r7, sp, #0
   81a36:	60f8      	str	r0, [r7, #12]
   81a38:	60b9      	str	r1, [r7, #8]
   81a3a:	4613      	mov	r3, r2
   81a3c:	71fb      	strb	r3, [r7, #7]
	if (txbuf == NULL){
   81a3e:	68bb      	ldr	r3, [r7, #8]
   81a40:	2b00      	cmp	r3, #0
   81a42:	d113      	bne.n	81a6c <usart_driver_putchar+0x3c>
		if (usart == USART0) txbuf = &tx0buf;
   81a44:	68fb      	ldr	r3, [r7, #12]
   81a46:	4a19      	ldr	r2, [pc, #100]	; (81aac <usart_driver_putchar+0x7c>)
   81a48:	4293      	cmp	r3, r2
   81a4a:	d102      	bne.n	81a52 <usart_driver_putchar+0x22>
   81a4c:	4b18      	ldr	r3, [pc, #96]	; (81ab0 <usart_driver_putchar+0x80>)
   81a4e:	60bb      	str	r3, [r7, #8]
   81a50:	e00c      	b.n	81a6c <usart_driver_putchar+0x3c>
		else if (usart == USART1) txbuf = &tx1buf;
   81a52:	68fb      	ldr	r3, [r7, #12]
   81a54:	4a17      	ldr	r2, [pc, #92]	; (81ab4 <usart_driver_putchar+0x84>)
   81a56:	4293      	cmp	r3, r2
   81a58:	d102      	bne.n	81a60 <usart_driver_putchar+0x30>
   81a5a:	4b17      	ldr	r3, [pc, #92]	; (81ab8 <usart_driver_putchar+0x88>)
   81a5c:	60bb      	str	r3, [r7, #8]
   81a5e:	e005      	b.n	81a6c <usart_driver_putchar+0x3c>
		else if (usart == USART2) txbuf = &tx2buf;
   81a60:	68fb      	ldr	r3, [r7, #12]
   81a62:	4a16      	ldr	r2, [pc, #88]	; (81abc <usart_driver_putchar+0x8c>)
   81a64:	4293      	cmp	r3, r2
   81a66:	d11c      	bne.n	81aa2 <usart_driver_putchar+0x72>
   81a68:	4b15      	ldr	r3, [pc, #84]	; (81ac0 <usart_driver_putchar+0x90>)
   81a6a:	60bb      	str	r3, [r7, #8]
#endif
		else return;
	}
	
	// Add byte to transmit buffer
	add_to_circ_buf(txbuf, data, false);
   81a6c:	79fb      	ldrb	r3, [r7, #7]
   81a6e:	2200      	movs	r2, #0
   81a70:	4619      	mov	r1, r3
   81a72:	68b8      	ldr	r0, [r7, #8]
   81a74:	4b13      	ldr	r3, [pc, #76]	; (81ac4 <usart_driver_putchar+0x94>)
   81a76:	4798      	blx	r3

	// Send the first byte if nothing is yet being sent
	// This is determined by seeing if the TX complete interrupt is
	// enabled.
	if ((usart_get_interrupt_mask(usart) & US_CSR_TXRDY) == 0) {
   81a78:	68f8      	ldr	r0, [r7, #12]
   81a7a:	4b13      	ldr	r3, [pc, #76]	; (81ac8 <usart_driver_putchar+0x98>)
   81a7c:	4798      	blx	r3
   81a7e:	4603      	mov	r3, r0
   81a80:	f003 0302 	and.w	r3, r3, #2
   81a84:	2b00      	cmp	r3, #0
   81a86:	d10d      	bne.n	81aa4 <usart_driver_putchar+0x74>
		usart_putchar(usart, get_from_circ_buf(txbuf));
   81a88:	68b8      	ldr	r0, [r7, #8]
   81a8a:	4b10      	ldr	r3, [pc, #64]	; (81acc <usart_driver_putchar+0x9c>)
   81a8c:	4798      	blx	r3
   81a8e:	4603      	mov	r3, r0
   81a90:	4619      	mov	r1, r3
   81a92:	68f8      	ldr	r0, [r7, #12]
   81a94:	4b0e      	ldr	r3, [pc, #56]	; (81ad0 <usart_driver_putchar+0xa0>)
   81a96:	4798      	blx	r3
		usart_enable_interrupt(usart, US_CSR_TXRDY);
   81a98:	2102      	movs	r1, #2
   81a9a:	68f8      	ldr	r0, [r7, #12]
   81a9c:	4b0d      	ldr	r3, [pc, #52]	; (81ad4 <usart_driver_putchar+0xa4>)
   81a9e:	4798      	blx	r3
   81aa0:	e000      	b.n	81aa4 <usart_driver_putchar+0x74>
		else return;
   81aa2:	bf00      	nop
	}
}
   81aa4:	3710      	adds	r7, #16
   81aa6:	46bd      	mov	sp, r7
   81aa8:	bd80      	pop	{r7, pc}
   81aaa:	bf00      	nop
   81aac:	40090000 	.word	0x40090000
   81ab0:	20001790 	.word	0x20001790
   81ab4:	40094000 	.word	0x40094000
   81ab8:	20001560 	.word	0x20001560
   81abc:	40098000 	.word	0x40098000
   81ac0:	200013bc 	.word	0x200013bc
   81ac4:	00081c5b 	.word	0x00081c5b
   81ac8:	0008657d 	.word	0x0008657d
   81acc:	00081cbf 	.word	0x00081cbf
   81ad0:	000865f7 	.word	0x000865f7
   81ad4:	00086549 	.word	0x00086549

00081ad8 <usart_driver_getchar>:

uint8_t usart_driver_getchar(Usart * usart)
{
   81ad8:	b580      	push	{r7, lr}
   81ada:	b084      	sub	sp, #16
   81adc:	af00      	add	r7, sp, #0
   81ade:	6078      	str	r0, [r7, #4]
	tcirc_buf * rxbuf = NULL;	 
   81ae0:	2300      	movs	r3, #0
   81ae2:	60fb      	str	r3, [r7, #12]
	if (rxbuf == NULL){
   81ae4:	68fb      	ldr	r3, [r7, #12]
   81ae6:	2b00      	cmp	r3, #0
   81ae8:	d116      	bne.n	81b18 <usart_driver_getchar+0x40>
			if (usart == USART0) rxbuf = &rx0buf;
   81aea:	687b      	ldr	r3, [r7, #4]
   81aec:	4a0e      	ldr	r2, [pc, #56]	; (81b28 <usart_driver_getchar+0x50>)
   81aee:	4293      	cmp	r3, r2
   81af0:	d102      	bne.n	81af8 <usart_driver_getchar+0x20>
   81af2:	4b0e      	ldr	r3, [pc, #56]	; (81b2c <usart_driver_getchar+0x54>)
   81af4:	60fb      	str	r3, [r7, #12]
   81af6:	e00f      	b.n	81b18 <usart_driver_getchar+0x40>
			else if (usart == USART1) rxbuf = &rx1buf;
   81af8:	687b      	ldr	r3, [r7, #4]
   81afa:	4a0d      	ldr	r2, [pc, #52]	; (81b30 <usart_driver_getchar+0x58>)
   81afc:	4293      	cmp	r3, r2
   81afe:	d102      	bne.n	81b06 <usart_driver_getchar+0x2e>
   81b00:	4b0c      	ldr	r3, [pc, #48]	; (81b34 <usart_driver_getchar+0x5c>)
   81b02:	60fb      	str	r3, [r7, #12]
   81b04:	e008      	b.n	81b18 <usart_driver_getchar+0x40>
			else if (usart == USART2) rxbuf = &rx2buf;
   81b06:	687b      	ldr	r3, [r7, #4]
   81b08:	4a0b      	ldr	r2, [pc, #44]	; (81b38 <usart_driver_getchar+0x60>)
   81b0a:	4293      	cmp	r3, r2
   81b0c:	d102      	bne.n	81b14 <usart_driver_getchar+0x3c>
   81b0e:	4b0b      	ldr	r3, [pc, #44]	; (81b3c <usart_driver_getchar+0x64>)
   81b10:	60fb      	str	r3, [r7, #12]
   81b12:	e001      	b.n	81b18 <usart_driver_getchar+0x40>
#ifdef USART3
			else if (usart == USART3) rxbuf = &rx3buf;
#endif
			else return 0xFF;
   81b14:	23ff      	movs	r3, #255	; 0xff
   81b16:	e003      	b.n	81b20 <usart_driver_getchar+0x48>
	}
	return get_from_circ_buf(rxbuf);
   81b18:	68f8      	ldr	r0, [r7, #12]
   81b1a:	4b09      	ldr	r3, [pc, #36]	; (81b40 <usart_driver_getchar+0x68>)
   81b1c:	4798      	blx	r3
   81b1e:	4603      	mov	r3, r0
}
   81b20:	4618      	mov	r0, r3
   81b22:	3710      	adds	r7, #16
   81b24:	46bd      	mov	sp, r7
   81b26:	bd80      	pop	{r7, pc}
   81b28:	40090000 	.word	0x40090000
   81b2c:	20001448 	.word	0x20001448
   81b30:	40094000 	.word	0x40094000
   81b34:	20001704 	.word	0x20001704
   81b38:	40098000 	.word	0x40098000
   81b3c:	20001678 	.word	0x20001678
   81b40:	00081cbf 	.word	0x00081cbf

00081b44 <generic_isr>:

void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf);
void generic_isr(Usart * usart, tcirc_buf * rxbuf, tcirc_buf * txbuf)
{
   81b44:	b580      	push	{r7, lr}
   81b46:	b086      	sub	sp, #24
   81b48:	af00      	add	r7, sp, #0
   81b4a:	60f8      	str	r0, [r7, #12]
   81b4c:	60b9      	str	r1, [r7, #8]
   81b4e:	607a      	str	r2, [r7, #4]
	uint32_t status;
	status = usart_get_status(usart);
   81b50:	68f8      	ldr	r0, [r7, #12]
   81b52:	4b18      	ldr	r3, [pc, #96]	; (81bb4 <generic_isr+0x70>)
   81b54:	4798      	blx	r3
   81b56:	6178      	str	r0, [r7, #20]
	if (status & US_CSR_RXRDY){
   81b58:	697b      	ldr	r3, [r7, #20]
   81b5a:	f003 0301 	and.w	r3, r3, #1
   81b5e:	2b00      	cmp	r3, #0
   81b60:	d00b      	beq.n	81b7a <generic_isr+0x36>
		uint32_t temp;
		temp = usart->US_RHR & US_RHR_RXCHR_Msk;
   81b62:	68fb      	ldr	r3, [r7, #12]
   81b64:	699b      	ldr	r3, [r3, #24]
   81b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81b6a:	613b      	str	r3, [r7, #16]
		add_to_circ_buf(rxbuf, temp, false);
   81b6c:	693b      	ldr	r3, [r7, #16]
   81b6e:	b2db      	uxtb	r3, r3
   81b70:	2200      	movs	r2, #0
   81b72:	4619      	mov	r1, r3
   81b74:	68b8      	ldr	r0, [r7, #8]
   81b76:	4b10      	ldr	r3, [pc, #64]	; (81bb8 <generic_isr+0x74>)
   81b78:	4798      	blx	r3
	}
	
	if (status & US_CSR_TXRDY){
   81b7a:	697b      	ldr	r3, [r7, #20]
   81b7c:	f003 0302 	and.w	r3, r3, #2
   81b80:	2b00      	cmp	r3, #0
   81b82:	d012      	beq.n	81baa <generic_isr+0x66>
		if (circ_buf_has_char(txbuf)){
   81b84:	6878      	ldr	r0, [r7, #4]
   81b86:	4b0d      	ldr	r3, [pc, #52]	; (81bbc <generic_isr+0x78>)
   81b88:	4798      	blx	r3
   81b8a:	4603      	mov	r3, r0
   81b8c:	2b00      	cmp	r3, #0
   81b8e:	d008      	beq.n	81ba2 <generic_isr+0x5e>
			//Still data to send
			usart_putchar(usart, get_from_circ_buf(txbuf));			
   81b90:	6878      	ldr	r0, [r7, #4]
   81b92:	4b0b      	ldr	r3, [pc, #44]	; (81bc0 <generic_isr+0x7c>)
   81b94:	4798      	blx	r3
   81b96:	4603      	mov	r3, r0
   81b98:	4619      	mov	r1, r3
   81b9a:	68f8      	ldr	r0, [r7, #12]
   81b9c:	4b09      	ldr	r3, [pc, #36]	; (81bc4 <generic_isr+0x80>)
   81b9e:	4798      	blx	r3
		} else {
			//No more data, stop this madness
			usart_disable_interrupt(usart, UART_IER_TXRDY);
		}
	}
}
   81ba0:	e003      	b.n	81baa <generic_isr+0x66>
			usart_disable_interrupt(usart, UART_IER_TXRDY);
   81ba2:	2102      	movs	r1, #2
   81ba4:	68f8      	ldr	r0, [r7, #12]
   81ba6:	4b08      	ldr	r3, [pc, #32]	; (81bc8 <generic_isr+0x84>)
   81ba8:	4798      	blx	r3
}
   81baa:	bf00      	nop
   81bac:	3718      	adds	r7, #24
   81bae:	46bd      	mov	sp, r7
   81bb0:	bd80      	pop	{r7, pc}
   81bb2:	bf00      	nop
   81bb4:	00086593 	.word	0x00086593
   81bb8:	00081c5b 	.word	0x00081c5b
   81bbc:	00081d09 	.word	0x00081d09
   81bc0:	00081cbf 	.word	0x00081cbf
   81bc4:	000865f7 	.word	0x000865f7
   81bc8:	00086563 	.word	0x00086563

00081bcc <USART0_Handler>:

ISR(USART0_Handler)
{
   81bcc:	b580      	push	{r7, lr}
   81bce:	af00      	add	r7, sp, #0
	generic_isr(USART0, &rx0buf, &tx0buf);
   81bd0:	4a03      	ldr	r2, [pc, #12]	; (81be0 <USART0_Handler+0x14>)
   81bd2:	4904      	ldr	r1, [pc, #16]	; (81be4 <USART0_Handler+0x18>)
   81bd4:	4804      	ldr	r0, [pc, #16]	; (81be8 <USART0_Handler+0x1c>)
   81bd6:	4b05      	ldr	r3, [pc, #20]	; (81bec <USART0_Handler+0x20>)
   81bd8:	4798      	blx	r3
}
   81bda:	bf00      	nop
   81bdc:	bd80      	pop	{r7, pc}
   81bde:	bf00      	nop
   81be0:	20001790 	.word	0x20001790
   81be4:	20001448 	.word	0x20001448
   81be8:	40090000 	.word	0x40090000
   81bec:	00081b45 	.word	0x00081b45

00081bf0 <USART1_Handler>:

ISR(USART1_Handler)
{
   81bf0:	b580      	push	{r7, lr}
   81bf2:	af00      	add	r7, sp, #0
	generic_isr(USART1, &rx1buf, &tx1buf);
   81bf4:	4a03      	ldr	r2, [pc, #12]	; (81c04 <USART1_Handler+0x14>)
   81bf6:	4904      	ldr	r1, [pc, #16]	; (81c08 <USART1_Handler+0x18>)
   81bf8:	4804      	ldr	r0, [pc, #16]	; (81c0c <USART1_Handler+0x1c>)
   81bfa:	4b05      	ldr	r3, [pc, #20]	; (81c10 <USART1_Handler+0x20>)
   81bfc:	4798      	blx	r3
}
   81bfe:	bf00      	nop
   81c00:	bd80      	pop	{r7, pc}
   81c02:	bf00      	nop
   81c04:	20001560 	.word	0x20001560
   81c08:	20001704 	.word	0x20001704
   81c0c:	40094000 	.word	0x40094000
   81c10:	00081b45 	.word	0x00081b45

00081c14 <USART2_Handler>:

#ifndef USART2_SPIDUMP
ISR(USART2_Handler)
{
   81c14:	b580      	push	{r7, lr}
   81c16:	af00      	add	r7, sp, #0
	generic_isr(USART2, &rx2buf, &tx2buf);
   81c18:	4a03      	ldr	r2, [pc, #12]	; (81c28 <USART2_Handler+0x14>)
   81c1a:	4904      	ldr	r1, [pc, #16]	; (81c2c <USART2_Handler+0x18>)
   81c1c:	4804      	ldr	r0, [pc, #16]	; (81c30 <USART2_Handler+0x1c>)
   81c1e:	4b05      	ldr	r3, [pc, #20]	; (81c34 <USART2_Handler+0x20>)
   81c20:	4798      	blx	r3
}
   81c22:	bf00      	nop
   81c24:	bd80      	pop	{r7, pc}
   81c26:	bf00      	nop
   81c28:	200013bc 	.word	0x200013bc
   81c2c:	20001678 	.word	0x20001678
   81c30:	40098000 	.word	0x40098000
   81c34:	00081b45 	.word	0x00081b45

00081c38 <init_circ_buf>:
    @brief Initializes the circular buffer.

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
   81c38:	b480      	push	{r7}
   81c3a:	b083      	sub	sp, #12
   81c3c:	af00      	add	r7, sp, #0
   81c3e:	6078      	str	r0, [r7, #4]
    cbuf->head = cbuf->tail = 0;
   81c40:	2300      	movs	r3, #0
   81c42:	687a      	ldr	r2, [r7, #4]
   81c44:	6053      	str	r3, [r2, #4]
   81c46:	687a      	ldr	r2, [r7, #4]
   81c48:	6013      	str	r3, [r2, #0]
    cbuf->dropped = 0;
   81c4a:	687b      	ldr	r3, [r7, #4]
   81c4c:	2200      	movs	r2, #0
   81c4e:	609a      	str	r2, [r3, #8]
}
   81c50:	bf00      	nop
   81c52:	370c      	adds	r7, #12
   81c54:	46bd      	mov	sp, r7
   81c56:	bc80      	pop	{r7}
   81c58:	4770      	bx	lr

00081c5a <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   81c5a:	b480      	push	{r7}
   81c5c:	b085      	sub	sp, #20
   81c5e:	af00      	add	r7, sp, #0
   81c60:	6078      	str	r0, [r7, #4]
   81c62:	460b      	mov	r3, r1
   81c64:	70fb      	strb	r3, [r7, #3]
   81c66:	4613      	mov	r3, r2
   81c68:	70bb      	strb	r3, [r7, #2]
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   81c6a:	687b      	ldr	r3, [r7, #4]
   81c6c:	681b      	ldr	r3, [r3, #0]
   81c6e:	60fb      	str	r3, [r7, #12]
    newhead++;
   81c70:	68fb      	ldr	r3, [r7, #12]
   81c72:	3301      	adds	r3, #1
   81c74:	60fb      	str	r3, [r7, #12]
    if (newhead >= CIRCBUFSIZE)
   81c76:	68fb      	ldr	r3, [r7, #12]
   81c78:	2b7f      	cmp	r3, #127	; 0x7f
   81c7a:	d90e      	bls.n	81c9a <add_to_circ_buf+0x40>
        newhead = 0;
   81c7c:	2300      	movs	r3, #0
   81c7e:	60fb      	str	r3, [r7, #12]
    while (newhead == cbuf->tail)
   81c80:	e00b      	b.n	81c9a <add_to_circ_buf+0x40>
    {
        if (!block)
   81c82:	78bb      	ldrb	r3, [r7, #2]
   81c84:	f083 0301 	eor.w	r3, r3, #1
   81c88:	b2db      	uxtb	r3, r3
   81c8a:	2b00      	cmp	r3, #0
   81c8c:	d005      	beq.n	81c9a <add_to_circ_buf+0x40>
        {
            cbuf->dropped++;
   81c8e:	687b      	ldr	r3, [r7, #4]
   81c90:	689b      	ldr	r3, [r3, #8]
   81c92:	1c5a      	adds	r2, r3, #1
   81c94:	687b      	ldr	r3, [r7, #4]
   81c96:	609a      	str	r2, [r3, #8]
            return;
   81c98:	e00d      	b.n	81cb6 <add_to_circ_buf+0x5c>
    while (newhead == cbuf->tail)
   81c9a:	687b      	ldr	r3, [r7, #4]
   81c9c:	685b      	ldr	r3, [r3, #4]
   81c9e:	68fa      	ldr	r2, [r7, #12]
   81ca0:	429a      	cmp	r2, r3
   81ca2:	d0ee      	beq.n	81c82 <add_to_circ_buf+0x28>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   81ca4:	687b      	ldr	r3, [r7, #4]
   81ca6:	681b      	ldr	r3, [r3, #0]
   81ca8:	687a      	ldr	r2, [r7, #4]
   81caa:	4413      	add	r3, r2
   81cac:	78fa      	ldrb	r2, [r7, #3]
   81cae:	731a      	strb	r2, [r3, #12]
    cbuf->head = newhead;
   81cb0:	687b      	ldr	r3, [r7, #4]
   81cb2:	68fa      	ldr	r2, [r7, #12]
   81cb4:	601a      	str	r2, [r3, #0]
}
   81cb6:	3714      	adds	r7, #20
   81cb8:	46bd      	mov	sp, r7
   81cba:	bc80      	pop	{r7}
   81cbc:	4770      	bx	lr

00081cbe <get_from_circ_buf>:

    @return retval Character to be returned from buffer.  If no char
    is available, returns SERIAL_ERR.
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
   81cbe:	b480      	push	{r7}
   81cc0:	b085      	sub	sp, #20
   81cc2:	af00      	add	r7, sp, #0
   81cc4:	6078      	str	r0, [r7, #4]
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   81cc6:	687b      	ldr	r3, [r7, #4]
   81cc8:	685b      	ldr	r3, [r3, #4]
   81cca:	60fb      	str	r3, [r7, #12]
    uint8_t retval = cbuf->buf[newtail];
   81ccc:	687a      	ldr	r2, [r7, #4]
   81cce:	68fb      	ldr	r3, [r7, #12]
   81cd0:	4413      	add	r3, r2
   81cd2:	330c      	adds	r3, #12
   81cd4:	781b      	ldrb	r3, [r3, #0]
   81cd6:	72fb      	strb	r3, [r7, #11]

    if (newtail == cbuf->head)
   81cd8:	687b      	ldr	r3, [r7, #4]
   81cda:	681b      	ldr	r3, [r3, #0]
   81cdc:	68fa      	ldr	r2, [r7, #12]
   81cde:	429a      	cmp	r2, r3
   81ce0:	d101      	bne.n	81ce6 <get_from_circ_buf+0x28>
        return SERIAL_ERR;
   81ce2:	23ff      	movs	r3, #255	; 0xff
   81ce4:	e00b      	b.n	81cfe <get_from_circ_buf+0x40>

    newtail++;
   81ce6:	68fb      	ldr	r3, [r7, #12]
   81ce8:	3301      	adds	r3, #1
   81cea:	60fb      	str	r3, [r7, #12]
    if (newtail >= CIRCBUFSIZE)
   81cec:	68fb      	ldr	r3, [r7, #12]
   81cee:	2b7f      	cmp	r3, #127	; 0x7f
   81cf0:	d901      	bls.n	81cf6 <get_from_circ_buf+0x38>
        // Rollover
        newtail = 0;
   81cf2:	2300      	movs	r3, #0
   81cf4:	60fb      	str	r3, [r7, #12]
    cbuf->tail = newtail;
   81cf6:	687b      	ldr	r3, [r7, #4]
   81cf8:	68fa      	ldr	r2, [r7, #12]
   81cfa:	605a      	str	r2, [r3, #4]

    return retval;
   81cfc:	7afb      	ldrb	r3, [r7, #11]
}
   81cfe:	4618      	mov	r0, r3
   81d00:	3714      	adds	r7, #20
   81d02:	46bd      	mov	sp, r7
   81d04:	bc80      	pop	{r7}
   81d06:	4770      	bx	lr

00081d08 <circ_buf_has_char>:

    @retval true if buffer contains data.
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
   81d08:	b480      	push	{r7}
   81d0a:	b085      	sub	sp, #20
   81d0c:	af00      	add	r7, sp, #0
   81d0e:	6078      	str	r0, [r7, #4]
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   81d10:	687b      	ldr	r3, [r7, #4]
   81d12:	681b      	ldr	r3, [r3, #0]
   81d14:	60fb      	str	r3, [r7, #12]
    return (head != cbuf->tail);
   81d16:	687b      	ldr	r3, [r7, #4]
   81d18:	685b      	ldr	r3, [r3, #4]
   81d1a:	68fa      	ldr	r2, [r7, #12]
   81d1c:	429a      	cmp	r2, r3
   81d1e:	bf14      	ite	ne
   81d20:	2301      	movne	r3, #1
   81d22:	2300      	moveq	r3, #0
   81d24:	b2db      	uxtb	r3, r3
}
   81d26:	4618      	mov	r0, r3
   81d28:	3714      	adds	r7, #20
   81d2a:	46bd      	mov	sp, r7
   81d2c:	bc80      	pop	{r7}
   81d2e:	4770      	bx	lr

00081d30 <circ_buf_count>:
   @param cbuf is the circular buffer to query

   @return count Number of chars in buffer.
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
   81d30:	b480      	push	{r7}
   81d32:	b085      	sub	sp, #20
   81d34:	af00      	add	r7, sp, #0
   81d36:	6078      	str	r0, [r7, #4]
    int count;

    count = cbuf->head;
   81d38:	687b      	ldr	r3, [r7, #4]
   81d3a:	681b      	ldr	r3, [r3, #0]
   81d3c:	60fb      	str	r3, [r7, #12]
    count -= cbuf->tail;
   81d3e:	687b      	ldr	r3, [r7, #4]
   81d40:	685b      	ldr	r3, [r3, #4]
   81d42:	68fa      	ldr	r2, [r7, #12]
   81d44:	1ad3      	subs	r3, r2, r3
   81d46:	60fb      	str	r3, [r7, #12]
    if (count < 0)
   81d48:	68fb      	ldr	r3, [r7, #12]
   81d4a:	2b00      	cmp	r3, #0
   81d4c:	da02      	bge.n	81d54 <circ_buf_count+0x24>
        count += CIRCBUFSIZE;
   81d4e:	68fb      	ldr	r3, [r7, #12]
   81d50:	3380      	adds	r3, #128	; 0x80
   81d52:	60fb      	str	r3, [r7, #12]
    return (unsigned int)count;
   81d54:	68fb      	ldr	r3, [r7, #12]
}
   81d56:	4618      	mov	r0, r3
   81d58:	3714      	adds	r7, #20
   81d5a:	46bd      	mov	sp, r7
   81d5c:	bc80      	pop	{r7}
   81d5e:	4770      	bx	lr

00081d60 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   81d60:	b480      	push	{r7}
   81d62:	b083      	sub	sp, #12
   81d64:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81d66:	f3ef 8310 	mrs	r3, PRIMASK
   81d6a:	603b      	str	r3, [r7, #0]
  return(result);
   81d6c:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   81d6e:	2b00      	cmp	r3, #0
   81d70:	bf0c      	ite	eq
   81d72:	2301      	moveq	r3, #1
   81d74:	2300      	movne	r3, #0
   81d76:	b2db      	uxtb	r3, r3
   81d78:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   81d7a:	b672      	cpsid	i
}
   81d7c:	bf00      	nop
  __ASM volatile ("dmb");
   81d7e:	f3bf 8f5f 	dmb	sy
}
   81d82:	bf00      	nop
	cpu_irq_disable();
   81d84:	4b04      	ldr	r3, [pc, #16]	; (81d98 <cpu_irq_save+0x38>)
   81d86:	2200      	movs	r2, #0
   81d88:	701a      	strb	r2, [r3, #0]
	return flags;
   81d8a:	687b      	ldr	r3, [r7, #4]
}
   81d8c:	4618      	mov	r0, r3
   81d8e:	370c      	adds	r7, #12
   81d90:	46bd      	mov	sp, r7
   81d92:	bc80      	pop	{r7}
   81d94:	4770      	bx	lr
   81d96:	bf00      	nop
   81d98:	20000284 	.word	0x20000284

00081d9c <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   81d9c:	b480      	push	{r7}
   81d9e:	b083      	sub	sp, #12
   81da0:	af00      	add	r7, sp, #0
   81da2:	6078      	str	r0, [r7, #4]
	return (flags);
   81da4:	687b      	ldr	r3, [r7, #4]
   81da6:	2b00      	cmp	r3, #0
   81da8:	bf14      	ite	ne
   81daa:	2301      	movne	r3, #1
   81dac:	2300      	moveq	r3, #0
   81dae:	b2db      	uxtb	r3, r3
}
   81db0:	4618      	mov	r0, r3
   81db2:	370c      	adds	r7, #12
   81db4:	46bd      	mov	sp, r7
   81db6:	bc80      	pop	{r7}
   81db8:	4770      	bx	lr
   81dba:	0000      	movs	r0, r0

00081dbc <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   81dbc:	b580      	push	{r7, lr}
   81dbe:	b082      	sub	sp, #8
   81dc0:	af00      	add	r7, sp, #0
   81dc2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   81dc4:	6878      	ldr	r0, [r7, #4]
   81dc6:	4b08      	ldr	r3, [pc, #32]	; (81de8 <cpu_irq_restore+0x2c>)
   81dc8:	4798      	blx	r3
   81dca:	4603      	mov	r3, r0
   81dcc:	2b00      	cmp	r3, #0
   81dce:	d007      	beq.n	81de0 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   81dd0:	4b06      	ldr	r3, [pc, #24]	; (81dec <cpu_irq_restore+0x30>)
   81dd2:	2201      	movs	r2, #1
   81dd4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   81dd6:	f3bf 8f5f 	dmb	sy
}
   81dda:	bf00      	nop
  __ASM volatile ("cpsie i");
   81ddc:	b662      	cpsie	i
}
   81dde:	bf00      	nop
}
   81de0:	bf00      	nop
   81de2:	3708      	adds	r7, #8
   81de4:	46bd      	mov	sp, r7
   81de6:	bd80      	pop	{r7, pc}
   81de8:	00081d9d 	.word	0x00081d9d
   81dec:	20000284 	.word	0x20000284

00081df0 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   81df0:	b580      	push	{r7, lr}
   81df2:	b086      	sub	sp, #24
   81df4:	af00      	add	r7, sp, #0
   81df6:	60f8      	str	r0, [r7, #12]
   81df8:	60b9      	str	r1, [r7, #8]
   81dfa:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   81dfc:	68bb      	ldr	r3, [r7, #8]
   81dfe:	2b0e      	cmp	r3, #14
   81e00:	d002      	beq.n	81e08 <efc_perform_command+0x18>
   81e02:	68bb      	ldr	r3, [r7, #8]
   81e04:	2b0f      	cmp	r3, #15
   81e06:	d102      	bne.n	81e0e <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   81e08:	f04f 33ff 	mov.w	r3, #4294967295
   81e0c:	e016      	b.n	81e3c <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   81e0e:	4b0d      	ldr	r3, [pc, #52]	; (81e44 <efc_perform_command+0x54>)
   81e10:	4798      	blx	r3
   81e12:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81e14:	687b      	ldr	r3, [r7, #4]
   81e16:	021b      	lsls	r3, r3, #8
   81e18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   81e1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   81e20:	68ba      	ldr	r2, [r7, #8]
   81e22:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   81e24:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   81e26:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   81e2a:	4619      	mov	r1, r3
   81e2c:	68f8      	ldr	r0, [r7, #12]
   81e2e:	4b06      	ldr	r3, [pc, #24]	; (81e48 <efc_perform_command+0x58>)
   81e30:	4798      	blx	r3
   81e32:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   81e34:	6978      	ldr	r0, [r7, #20]
   81e36:	4b05      	ldr	r3, [pc, #20]	; (81e4c <efc_perform_command+0x5c>)
   81e38:	4798      	blx	r3
	return result;
   81e3a:	693b      	ldr	r3, [r7, #16]
}
   81e3c:	4618      	mov	r0, r3
   81e3e:	3718      	adds	r7, #24
   81e40:	46bd      	mov	sp, r7
   81e42:	bd80      	pop	{r7, pc}
   81e44:	00081d61 	.word	0x00081d61
   81e48:	200000bd 	.word	0x200000bd
   81e4c:	00081dbd 	.word	0x00081dbd

00081e50 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81e50:	b480      	push	{r7}
   81e52:	af00      	add	r7, sp, #0
	while (1) {
   81e54:	e7fe      	b.n	81e54 <Dummy_Handler+0x4>
   81e56:	0000      	movs	r0, r0

00081e58 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   81e58:	b590      	push	{r4, r7, lr}
   81e5a:	b08b      	sub	sp, #44	; 0x2c
   81e5c:	af02      	add	r7, sp, #8
   81e5e:	6078      	str	r0, [r7, #4]
   81e60:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   81e62:	f107 030c 	add.w	r3, r7, #12
   81e66:	2204      	movs	r2, #4
   81e68:	9200      	str	r2, [sp, #0]
   81e6a:	220f      	movs	r2, #15
   81e6c:	210e      	movs	r1, #14
   81e6e:	4814      	ldr	r0, [pc, #80]	; (81ec0 <flash_read_unique_id+0x68>)
   81e70:	4c14      	ldr	r4, [pc, #80]	; (81ec4 <flash_read_unique_id+0x6c>)
   81e72:	47a0      	blx	r4
   81e74:	4603      	mov	r3, r0
   81e76:	2b00      	cmp	r3, #0
   81e78:	d001      	beq.n	81e7e <flash_read_unique_id+0x26>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   81e7a:	2310      	movs	r3, #16
   81e7c:	e01b      	b.n	81eb6 <flash_read_unique_id+0x5e>
	}

	if (ul_size > 4) {
   81e7e:	683b      	ldr	r3, [r7, #0]
   81e80:	2b04      	cmp	r3, #4
   81e82:	d901      	bls.n	81e88 <flash_read_unique_id+0x30>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   81e84:	2304      	movs	r3, #4
   81e86:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81e88:	2300      	movs	r3, #0
   81e8a:	61fb      	str	r3, [r7, #28]
   81e8c:	e00e      	b.n	81eac <flash_read_unique_id+0x54>
		pul_data[ul_idx] = uid_buf[ul_idx];
   81e8e:	69fb      	ldr	r3, [r7, #28]
   81e90:	009b      	lsls	r3, r3, #2
   81e92:	687a      	ldr	r2, [r7, #4]
   81e94:	441a      	add	r2, r3
   81e96:	69fb      	ldr	r3, [r7, #28]
   81e98:	009b      	lsls	r3, r3, #2
   81e9a:	f107 0120 	add.w	r1, r7, #32
   81e9e:	440b      	add	r3, r1
   81ea0:	f853 3c14 	ldr.w	r3, [r3, #-20]
   81ea4:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   81ea6:	69fb      	ldr	r3, [r7, #28]
   81ea8:	3301      	adds	r3, #1
   81eaa:	61fb      	str	r3, [r7, #28]
   81eac:	69fa      	ldr	r2, [r7, #28]
   81eae:	683b      	ldr	r3, [r7, #0]
   81eb0:	429a      	cmp	r2, r3
   81eb2:	d3ec      	bcc.n	81e8e <flash_read_unique_id+0x36>
	}

	return FLASH_RC_OK;
   81eb4:	2300      	movs	r3, #0
}
   81eb6:	4618      	mov	r0, r3
   81eb8:	3724      	adds	r7, #36	; 0x24
   81eba:	46bd      	mov	sp, r7
   81ebc:	bd90      	pop	{r4, r7, pc}
   81ebe:	bf00      	nop
   81ec0:	400e0800 	.word	0x400e0800
   81ec4:	20000001 	.word	0x20000001

00081ec8 <sysclk_enable_peripheral_clock>:
{
   81ec8:	b580      	push	{r7, lr}
   81eca:	b082      	sub	sp, #8
   81ecc:	af00      	add	r7, sp, #0
   81ece:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81ed0:	6878      	ldr	r0, [r7, #4]
   81ed2:	4b03      	ldr	r3, [pc, #12]	; (81ee0 <sysclk_enable_peripheral_clock+0x18>)
   81ed4:	4798      	blx	r3
}
   81ed6:	bf00      	nop
   81ed8:	3708      	adds	r7, #8
   81eda:	46bd      	mov	sp, r7
   81edc:	bd80      	pop	{r7, pc}
   81ede:	bf00      	nop
   81ee0:	00082911 	.word	0x00082911

00081ee4 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   81ee4:	b580      	push	{r7, lr}
   81ee6:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   81ee8:	200a      	movs	r0, #10
   81eea:	4b04      	ldr	r3, [pc, #16]	; (81efc <ioport_init+0x18>)
   81eec:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   81eee:	200b      	movs	r0, #11
   81ef0:	4b02      	ldr	r3, [pc, #8]	; (81efc <ioport_init+0x18>)
   81ef2:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
#endif
#ifdef ID_PIOF
	sysclk_enable_peripheral_clock(ID_PIOF);
#endif
}
   81ef4:	bf00      	nop
	arch_ioport_init();
}
   81ef6:	bf00      	nop
   81ef8:	bd80      	pop	{r7, pc}
   81efa:	bf00      	nop
   81efc:	00081ec9 	.word	0x00081ec9

00081f00 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   81f00:	b580      	push	{r7, lr}
   81f02:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81f04:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f08:	201d      	movs	r0, #29
   81f0a:	4b0d      	ldr	r3, [pc, #52]	; (81f40 <iopins_normal+0x40>)
   81f0c:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81f0e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f12:	201f      	movs	r0, #31
   81f14:	4b0a      	ldr	r3, [pc, #40]	; (81f40 <iopins_normal+0x40>)
   81f16:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   81f18:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81f1c:	201d      	movs	r0, #29
   81f1e:	4b08      	ldr	r3, [pc, #32]	; (81f40 <iopins_normal+0x40>)
   81f20:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81f26:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   81f2a:	4806      	ldr	r0, [pc, #24]	; (81f44 <iopins_normal+0x44>)
   81f2c:	4b06      	ldr	r3, [pc, #24]	; (81f48 <iopins_normal+0x48>)
   81f2e:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   81f30:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81f34:	2038      	movs	r0, #56	; 0x38
   81f36:	4b02      	ldr	r3, [pc, #8]	; (81f40 <iopins_normal+0x40>)
   81f38:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   81f3a:	bf00      	nop
   81f3c:	bd80      	pop	{r7, pc}
   81f3e:	bf00      	nop
   81f40:	000822ad 	.word	0x000822ad
   81f44:	400e0c00 	.word	0x400e0c00
   81f48:	000823dd 	.word	0x000823dd

00081f4c <board_init>:

void board_init(void)
{
   81f4c:	b580      	push	{r7, lr}
   81f4e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81f50:	4b04      	ldr	r3, [pc, #16]	; (81f64 <board_init+0x18>)
   81f52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81f56:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   81f58:	4b03      	ldr	r3, [pc, #12]	; (81f68 <board_init+0x1c>)
   81f5a:	4798      	blx	r3

	iopins_normal();
   81f5c:	4b03      	ldr	r3, [pc, #12]	; (81f6c <board_init+0x20>)
   81f5e:	4798      	blx	r3

}
   81f60:	bf00      	nop
   81f62:	bd80      	pop	{r7, pc}
   81f64:	400e1250 	.word	0x400e1250
   81f68:	00081ee5 	.word	0x00081ee5
   81f6c:	00081f01 	.word	0x00081f01

00081f70 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   81f70:	b480      	push	{r7}
   81f72:	b083      	sub	sp, #12
   81f74:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   81f76:	4b11      	ldr	r3, [pc, #68]	; (81fbc <cpu_irq_enter_critical+0x4c>)
   81f78:	681b      	ldr	r3, [r3, #0]
   81f7a:	2b00      	cmp	r3, #0
   81f7c:	d114      	bne.n	81fa8 <cpu_irq_enter_critical+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81f7e:	f3ef 8310 	mrs	r3, PRIMASK
   81f82:	607b      	str	r3, [r7, #4]
  return(result);
   81f84:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   81f86:	2b00      	cmp	r3, #0
   81f88:	d10b      	bne.n	81fa2 <cpu_irq_enter_critical+0x32>
  __ASM volatile ("cpsid i");
   81f8a:	b672      	cpsid	i
}
   81f8c:	bf00      	nop
  __ASM volatile ("dmb");
   81f8e:	f3bf 8f5f 	dmb	sy
}
   81f92:	bf00      	nop
			cpu_irq_disable();
   81f94:	4b0a      	ldr	r3, [pc, #40]	; (81fc0 <cpu_irq_enter_critical+0x50>)
   81f96:	2200      	movs	r2, #0
   81f98:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   81f9a:	4b0a      	ldr	r3, [pc, #40]	; (81fc4 <cpu_irq_enter_critical+0x54>)
   81f9c:	2201      	movs	r2, #1
   81f9e:	701a      	strb	r2, [r3, #0]
   81fa0:	e002      	b.n	81fa8 <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   81fa2:	4b08      	ldr	r3, [pc, #32]	; (81fc4 <cpu_irq_enter_critical+0x54>)
   81fa4:	2200      	movs	r2, #0
   81fa6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   81fa8:	4b04      	ldr	r3, [pc, #16]	; (81fbc <cpu_irq_enter_critical+0x4c>)
   81faa:	681b      	ldr	r3, [r3, #0]
   81fac:	3301      	adds	r3, #1
   81fae:	4a03      	ldr	r2, [pc, #12]	; (81fbc <cpu_irq_enter_critical+0x4c>)
   81fb0:	6013      	str	r3, [r2, #0]
}
   81fb2:	bf00      	nop
   81fb4:	370c      	adds	r7, #12
   81fb6:	46bd      	mov	sp, r7
   81fb8:	bc80      	pop	{r7}
   81fba:	4770      	bx	lr
   81fbc:	200012b0 	.word	0x200012b0
   81fc0:	20000284 	.word	0x20000284
   81fc4:	200012b4 	.word	0x200012b4

00081fc8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   81fc8:	b480      	push	{r7}
   81fca:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   81fcc:	4b0c      	ldr	r3, [pc, #48]	; (82000 <cpu_irq_leave_critical+0x38>)
   81fce:	681b      	ldr	r3, [r3, #0]
   81fd0:	3b01      	subs	r3, #1
   81fd2:	4a0b      	ldr	r2, [pc, #44]	; (82000 <cpu_irq_leave_critical+0x38>)
   81fd4:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   81fd6:	4b0a      	ldr	r3, [pc, #40]	; (82000 <cpu_irq_leave_critical+0x38>)
   81fd8:	681b      	ldr	r3, [r3, #0]
   81fda:	2b00      	cmp	r3, #0
   81fdc:	d10c      	bne.n	81ff8 <cpu_irq_leave_critical+0x30>
   81fde:	4b09      	ldr	r3, [pc, #36]	; (82004 <cpu_irq_leave_critical+0x3c>)
   81fe0:	781b      	ldrb	r3, [r3, #0]
   81fe2:	b2db      	uxtb	r3, r3
   81fe4:	2b00      	cmp	r3, #0
   81fe6:	d007      	beq.n	81ff8 <cpu_irq_leave_critical+0x30>
		cpu_irq_enable();
   81fe8:	4b07      	ldr	r3, [pc, #28]	; (82008 <cpu_irq_leave_critical+0x40>)
   81fea:	2201      	movs	r2, #1
   81fec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   81fee:	f3bf 8f5f 	dmb	sy
}
   81ff2:	bf00      	nop
  __ASM volatile ("cpsie i");
   81ff4:	b662      	cpsie	i
}
   81ff6:	bf00      	nop
	}
}
   81ff8:	bf00      	nop
   81ffa:	46bd      	mov	sp, r7
   81ffc:	bc80      	pop	{r7}
   81ffe:	4770      	bx	lr
   82000:	200012b0 	.word	0x200012b0
   82004:	200012b4 	.word	0x200012b4
   82008:	20000284 	.word	0x20000284

0008200c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   8200c:	b480      	push	{r7}
   8200e:	b085      	sub	sp, #20
   82010:	af00      	add	r7, sp, #0
   82012:	60f8      	str	r0, [r7, #12]
   82014:	60b9      	str	r1, [r7, #8]
   82016:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82018:	687b      	ldr	r3, [r7, #4]
   8201a:	2b00      	cmp	r3, #0
   8201c:	d003      	beq.n	82026 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   8201e:	68fb      	ldr	r3, [r7, #12]
   82020:	68ba      	ldr	r2, [r7, #8]
   82022:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   82024:	e002      	b.n	8202c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   82026:	68fb      	ldr	r3, [r7, #12]
   82028:	68ba      	ldr	r2, [r7, #8]
   8202a:	661a      	str	r2, [r3, #96]	; 0x60
}
   8202c:	bf00      	nop
   8202e:	3714      	adds	r7, #20
   82030:	46bd      	mov	sp, r7
   82032:	bc80      	pop	{r7}
   82034:	4770      	bx	lr

00082036 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   82036:	b480      	push	{r7}
   82038:	b087      	sub	sp, #28
   8203a:	af00      	add	r7, sp, #0
   8203c:	60f8      	str	r0, [r7, #12]
   8203e:	60b9      	str	r1, [r7, #8]
   82040:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82042:	68fb      	ldr	r3, [r7, #12]
   82044:	687a      	ldr	r2, [r7, #4]
   82046:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82048:	68bb      	ldr	r3, [r7, #8]
   8204a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8204e:	d03c      	beq.n	820ca <pio_set_peripheral+0x94>
   82050:	68bb      	ldr	r3, [r7, #8]
   82052:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82056:	d834      	bhi.n	820c2 <pio_set_peripheral+0x8c>
   82058:	68bb      	ldr	r3, [r7, #8]
   8205a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8205e:	d034      	beq.n	820ca <pio_set_peripheral+0x94>
   82060:	68bb      	ldr	r3, [r7, #8]
   82062:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82066:	d82c      	bhi.n	820c2 <pio_set_peripheral+0x8c>
   82068:	68bb      	ldr	r3, [r7, #8]
   8206a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8206e:	d02c      	beq.n	820ca <pio_set_peripheral+0x94>
   82070:	68bb      	ldr	r3, [r7, #8]
   82072:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82076:	d824      	bhi.n	820c2 <pio_set_peripheral+0x8c>
   82078:	68bb      	ldr	r3, [r7, #8]
   8207a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8207e:	d017      	beq.n	820b0 <pio_set_peripheral+0x7a>
   82080:	68bb      	ldr	r3, [r7, #8]
   82082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82086:	d81c      	bhi.n	820c2 <pio_set_peripheral+0x8c>
   82088:	68bb      	ldr	r3, [r7, #8]
   8208a:	2b00      	cmp	r3, #0
   8208c:	d01d      	beq.n	820ca <pio_set_peripheral+0x94>
   8208e:	68bb      	ldr	r3, [r7, #8]
   82090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82094:	d115      	bne.n	820c2 <pio_set_peripheral+0x8c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82096:	68fb      	ldr	r3, [r7, #12]
   82098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8209a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8209c:	68fb      	ldr	r3, [r7, #12]
   8209e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   820a0:	687b      	ldr	r3, [r7, #4]
   820a2:	43d9      	mvns	r1, r3
   820a4:	697b      	ldr	r3, [r7, #20]
   820a6:	400b      	ands	r3, r1
   820a8:	401a      	ands	r2, r3
   820aa:	68fb      	ldr	r3, [r7, #12]
   820ac:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   820ae:	e008      	b.n	820c2 <pio_set_peripheral+0x8c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   820b0:	68fb      	ldr	r3, [r7, #12]
   820b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   820b4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   820b6:	687a      	ldr	r2, [r7, #4]
   820b8:	697b      	ldr	r3, [r7, #20]
   820ba:	431a      	orrs	r2, r3
   820bc:	68fb      	ldr	r3, [r7, #12]
   820be:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   820c0:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   820c2:	68fb      	ldr	r3, [r7, #12]
   820c4:	687a      	ldr	r2, [r7, #4]
   820c6:	605a      	str	r2, [r3, #4]
   820c8:	e000      	b.n	820cc <pio_set_peripheral+0x96>
		return;
   820ca:	bf00      	nop
}
   820cc:	371c      	adds	r7, #28
   820ce:	46bd      	mov	sp, r7
   820d0:	bc80      	pop	{r7}
   820d2:	4770      	bx	lr

000820d4 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   820d4:	b580      	push	{r7, lr}
   820d6:	b084      	sub	sp, #16
   820d8:	af00      	add	r7, sp, #0
   820da:	60f8      	str	r0, [r7, #12]
   820dc:	60b9      	str	r1, [r7, #8]
   820de:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   820e0:	68b9      	ldr	r1, [r7, #8]
   820e2:	68f8      	ldr	r0, [r7, #12]
   820e4:	4b19      	ldr	r3, [pc, #100]	; (8214c <pio_set_input+0x78>)
   820e6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   820e8:	687b      	ldr	r3, [r7, #4]
   820ea:	f003 0301 	and.w	r3, r3, #1
   820ee:	461a      	mov	r2, r3
   820f0:	68b9      	ldr	r1, [r7, #8]
   820f2:	68f8      	ldr	r0, [r7, #12]
   820f4:	4b16      	ldr	r3, [pc, #88]	; (82150 <pio_set_input+0x7c>)
   820f6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   820f8:	687b      	ldr	r3, [r7, #4]
   820fa:	f003 030a 	and.w	r3, r3, #10
   820fe:	2b00      	cmp	r3, #0
   82100:	d003      	beq.n	8210a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   82102:	68fb      	ldr	r3, [r7, #12]
   82104:	68ba      	ldr	r2, [r7, #8]
   82106:	621a      	str	r2, [r3, #32]
   82108:	e002      	b.n	82110 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8210a:	68fb      	ldr	r3, [r7, #12]
   8210c:	68ba      	ldr	r2, [r7, #8]
   8210e:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82110:	687b      	ldr	r3, [r7, #4]
   82112:	f003 0302 	and.w	r3, r3, #2
   82116:	2b00      	cmp	r3, #0
   82118:	d004      	beq.n	82124 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   8211a:	68fb      	ldr	r3, [r7, #12]
   8211c:	68ba      	ldr	r2, [r7, #8]
   8211e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82122:	e008      	b.n	82136 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82124:	687b      	ldr	r3, [r7, #4]
   82126:	f003 0308 	and.w	r3, r3, #8
   8212a:	2b00      	cmp	r3, #0
   8212c:	d003      	beq.n	82136 <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   8212e:	68fb      	ldr	r3, [r7, #12]
   82130:	68ba      	ldr	r2, [r7, #8]
   82132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82136:	68fb      	ldr	r3, [r7, #12]
   82138:	68ba      	ldr	r2, [r7, #8]
   8213a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   8213c:	68fb      	ldr	r3, [r7, #12]
   8213e:	68ba      	ldr	r2, [r7, #8]
   82140:	601a      	str	r2, [r3, #0]
}
   82142:	bf00      	nop
   82144:	3710      	adds	r7, #16
   82146:	46bd      	mov	sp, r7
   82148:	bd80      	pop	{r7, pc}
   8214a:	bf00      	nop
   8214c:	000821d5 	.word	0x000821d5
   82150:	0008200d 	.word	0x0008200d

00082154 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82154:	b580      	push	{r7, lr}
   82156:	b084      	sub	sp, #16
   82158:	af00      	add	r7, sp, #0
   8215a:	60f8      	str	r0, [r7, #12]
   8215c:	60b9      	str	r1, [r7, #8]
   8215e:	607a      	str	r2, [r7, #4]
   82160:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   82162:	68b9      	ldr	r1, [r7, #8]
   82164:	68f8      	ldr	r0, [r7, #12]
   82166:	4b12      	ldr	r3, [pc, #72]	; (821b0 <pio_set_output+0x5c>)
   82168:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   8216a:	69ba      	ldr	r2, [r7, #24]
   8216c:	68b9      	ldr	r1, [r7, #8]
   8216e:	68f8      	ldr	r0, [r7, #12]
   82170:	4b10      	ldr	r3, [pc, #64]	; (821b4 <pio_set_output+0x60>)
   82172:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82174:	683b      	ldr	r3, [r7, #0]
   82176:	2b00      	cmp	r3, #0
   82178:	d003      	beq.n	82182 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   8217a:	68fb      	ldr	r3, [r7, #12]
   8217c:	68ba      	ldr	r2, [r7, #8]
   8217e:	651a      	str	r2, [r3, #80]	; 0x50
   82180:	e002      	b.n	82188 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82182:	68fb      	ldr	r3, [r7, #12]
   82184:	68ba      	ldr	r2, [r7, #8]
   82186:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82188:	687b      	ldr	r3, [r7, #4]
   8218a:	2b00      	cmp	r3, #0
   8218c:	d003      	beq.n	82196 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   8218e:	68fb      	ldr	r3, [r7, #12]
   82190:	68ba      	ldr	r2, [r7, #8]
   82192:	631a      	str	r2, [r3, #48]	; 0x30
   82194:	e002      	b.n	8219c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82196:	68fb      	ldr	r3, [r7, #12]
   82198:	68ba      	ldr	r2, [r7, #8]
   8219a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8219c:	68fb      	ldr	r3, [r7, #12]
   8219e:	68ba      	ldr	r2, [r7, #8]
   821a0:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   821a2:	68fb      	ldr	r3, [r7, #12]
   821a4:	68ba      	ldr	r2, [r7, #8]
   821a6:	601a      	str	r2, [r3, #0]
}
   821a8:	bf00      	nop
   821aa:	3710      	adds	r7, #16
   821ac:	46bd      	mov	sp, r7
   821ae:	bd80      	pop	{r7, pc}
   821b0:	000821d5 	.word	0x000821d5
   821b4:	0008200d 	.word	0x0008200d

000821b8 <pio_enable_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   821b8:	b480      	push	{r7}
   821ba:	b083      	sub	sp, #12
   821bc:	af00      	add	r7, sp, #0
   821be:	6078      	str	r0, [r7, #4]
   821c0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   821c2:	687b      	ldr	r3, [r7, #4]
   821c4:	683a      	ldr	r2, [r7, #0]
   821c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   821ca:	bf00      	nop
   821cc:	370c      	adds	r7, #12
   821ce:	46bd      	mov	sp, r7
   821d0:	bc80      	pop	{r7}
   821d2:	4770      	bx	lr

000821d4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   821d4:	b480      	push	{r7}
   821d6:	b083      	sub	sp, #12
   821d8:	af00      	add	r7, sp, #0
   821da:	6078      	str	r0, [r7, #4]
   821dc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   821de:	687b      	ldr	r3, [r7, #4]
   821e0:	683a      	ldr	r2, [r7, #0]
   821e2:	645a      	str	r2, [r3, #68]	; 0x44
}
   821e4:	bf00      	nop
   821e6:	370c      	adds	r7, #12
   821e8:	46bd      	mov	sp, r7
   821ea:	bc80      	pop	{r7}
   821ec:	4770      	bx	lr

000821ee <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   821ee:	b480      	push	{r7}
   821f0:	b083      	sub	sp, #12
   821f2:	af00      	add	r7, sp, #0
   821f4:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   821f6:	687b      	ldr	r3, [r7, #4]
   821f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   821fa:	4618      	mov	r0, r3
   821fc:	370c      	adds	r7, #12
   821fe:	46bd      	mov	sp, r7
   82200:	bc80      	pop	{r7}
   82202:	4770      	bx	lr

00082204 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   82204:	b480      	push	{r7}
   82206:	b083      	sub	sp, #12
   82208:	af00      	add	r7, sp, #0
   8220a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   8220c:	687b      	ldr	r3, [r7, #4]
   8220e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   82210:	4618      	mov	r0, r3
   82212:	370c      	adds	r7, #12
   82214:	46bd      	mov	sp, r7
   82216:	bc80      	pop	{r7}
   82218:	4770      	bx	lr
   8221a:	0000      	movs	r0, r0

0008221c <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   8221c:	b580      	push	{r7, lr}
   8221e:	b084      	sub	sp, #16
   82220:	af00      	add	r7, sp, #0
   82222:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82224:	6878      	ldr	r0, [r7, #4]
   82226:	4b08      	ldr	r3, [pc, #32]	; (82248 <pio_get_pin_value+0x2c>)
   82228:	4798      	blx	r3
   8222a:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   8222c:	68fb      	ldr	r3, [r7, #12]
   8222e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   82230:	687b      	ldr	r3, [r7, #4]
   82232:	f003 031f 	and.w	r3, r3, #31
   82236:	fa22 f303 	lsr.w	r3, r2, r3
   8223a:	f003 0301 	and.w	r3, r3, #1
}
   8223e:	4618      	mov	r0, r3
   82240:	3710      	adds	r7, #16
   82242:	46bd      	mov	sp, r7
   82244:	bd80      	pop	{r7, pc}
   82246:	bf00      	nop
   82248:	000824b9 	.word	0x000824b9

0008224c <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   8224c:	b580      	push	{r7, lr}
   8224e:	b084      	sub	sp, #16
   82250:	af00      	add	r7, sp, #0
   82252:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82254:	6878      	ldr	r0, [r7, #4]
   82256:	4b08      	ldr	r3, [pc, #32]	; (82278 <pio_set_pin_high+0x2c>)
   82258:	4798      	blx	r3
   8225a:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8225c:	687b      	ldr	r3, [r7, #4]
   8225e:	f003 031f 	and.w	r3, r3, #31
   82262:	2201      	movs	r2, #1
   82264:	fa02 f303 	lsl.w	r3, r2, r3
   82268:	461a      	mov	r2, r3
   8226a:	68fb      	ldr	r3, [r7, #12]
   8226c:	631a      	str	r2, [r3, #48]	; 0x30
}
   8226e:	bf00      	nop
   82270:	3710      	adds	r7, #16
   82272:	46bd      	mov	sp, r7
   82274:	bd80      	pop	{r7, pc}
   82276:	bf00      	nop
   82278:	000824b9 	.word	0x000824b9

0008227c <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   8227c:	b580      	push	{r7, lr}
   8227e:	b084      	sub	sp, #16
   82280:	af00      	add	r7, sp, #0
   82282:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   82284:	6878      	ldr	r0, [r7, #4]
   82286:	4b08      	ldr	r3, [pc, #32]	; (822a8 <pio_set_pin_low+0x2c>)
   82288:	4798      	blx	r3
   8228a:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8228c:	687b      	ldr	r3, [r7, #4]
   8228e:	f003 031f 	and.w	r3, r3, #31
   82292:	2201      	movs	r2, #1
   82294:	fa02 f303 	lsl.w	r3, r2, r3
   82298:	461a      	mov	r2, r3
   8229a:	68fb      	ldr	r3, [r7, #12]
   8229c:	635a      	str	r2, [r3, #52]	; 0x34
}
   8229e:	bf00      	nop
   822a0:	3710      	adds	r7, #16
   822a2:	46bd      	mov	sp, r7
   822a4:	bd80      	pop	{r7, pc}
   822a6:	bf00      	nop
   822a8:	000824b9 	.word	0x000824b9

000822ac <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   822ac:	b590      	push	{r4, r7, lr}
   822ae:	b087      	sub	sp, #28
   822b0:	af02      	add	r7, sp, #8
   822b2:	6078      	str	r0, [r7, #4]
   822b4:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   822b6:	6878      	ldr	r0, [r7, #4]
   822b8:	4b43      	ldr	r3, [pc, #268]	; (823c8 <pio_configure_pin+0x11c>)
   822ba:	4798      	blx	r3
   822bc:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   822be:	683b      	ldr	r3, [r7, #0]
   822c0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   822c4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   822c8:	d057      	beq.n	8237a <pio_configure_pin+0xce>
   822ca:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   822ce:	d873      	bhi.n	823b8 <pio_configure_pin+0x10c>
   822d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   822d4:	d051      	beq.n	8237a <pio_configure_pin+0xce>
   822d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   822da:	d86d      	bhi.n	823b8 <pio_configure_pin+0x10c>
   822dc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   822e0:	d03f      	beq.n	82362 <pio_configure_pin+0xb6>
   822e2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   822e6:	d867      	bhi.n	823b8 <pio_configure_pin+0x10c>
   822e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   822ec:	d003      	beq.n	822f6 <pio_configure_pin+0x4a>
   822ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   822f2:	d01b      	beq.n	8232c <pio_configure_pin+0x80>
   822f4:	e060      	b.n	823b8 <pio_configure_pin+0x10c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   822f6:	687b      	ldr	r3, [r7, #4]
   822f8:	f003 031f 	and.w	r3, r3, #31
   822fc:	2201      	movs	r2, #1
   822fe:	fa02 f303 	lsl.w	r3, r2, r3
   82302:	461a      	mov	r2, r3
   82304:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82308:	68f8      	ldr	r0, [r7, #12]
   8230a:	4b30      	ldr	r3, [pc, #192]	; (823cc <pio_configure_pin+0x120>)
   8230c:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8230e:	687b      	ldr	r3, [r7, #4]
   82310:	f003 031f 	and.w	r3, r3, #31
   82314:	2201      	movs	r2, #1
   82316:	fa02 f303 	lsl.w	r3, r2, r3
   8231a:	4619      	mov	r1, r3
   8231c:	683b      	ldr	r3, [r7, #0]
   8231e:	f003 0301 	and.w	r3, r3, #1
   82322:	461a      	mov	r2, r3
   82324:	68f8      	ldr	r0, [r7, #12]
   82326:	4b2a      	ldr	r3, [pc, #168]	; (823d0 <pio_configure_pin+0x124>)
   82328:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8232a:	e047      	b.n	823bc <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8232c:	687b      	ldr	r3, [r7, #4]
   8232e:	f003 031f 	and.w	r3, r3, #31
   82332:	2201      	movs	r2, #1
   82334:	fa02 f303 	lsl.w	r3, r2, r3
   82338:	461a      	mov	r2, r3
   8233a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8233e:	68f8      	ldr	r0, [r7, #12]
   82340:	4b22      	ldr	r3, [pc, #136]	; (823cc <pio_configure_pin+0x120>)
   82342:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82344:	687b      	ldr	r3, [r7, #4]
   82346:	f003 031f 	and.w	r3, r3, #31
   8234a:	2201      	movs	r2, #1
   8234c:	fa02 f303 	lsl.w	r3, r2, r3
   82350:	4619      	mov	r1, r3
   82352:	683b      	ldr	r3, [r7, #0]
   82354:	f003 0301 	and.w	r3, r3, #1
   82358:	461a      	mov	r2, r3
   8235a:	68f8      	ldr	r0, [r7, #12]
   8235c:	4b1c      	ldr	r3, [pc, #112]	; (823d0 <pio_configure_pin+0x124>)
   8235e:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82360:	e02c      	b.n	823bc <pio_configure_pin+0x110>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82362:	687b      	ldr	r3, [r7, #4]
   82364:	f003 031f 	and.w	r3, r3, #31
   82368:	2201      	movs	r2, #1
   8236a:	fa02 f303 	lsl.w	r3, r2, r3
   8236e:	683a      	ldr	r2, [r7, #0]
   82370:	4619      	mov	r1, r3
   82372:	68f8      	ldr	r0, [r7, #12]
   82374:	4b17      	ldr	r3, [pc, #92]	; (823d4 <pio_configure_pin+0x128>)
   82376:	4798      	blx	r3
		break;
   82378:	e020      	b.n	823bc <pio_configure_pin+0x110>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8237a:	687b      	ldr	r3, [r7, #4]
   8237c:	f003 031f 	and.w	r3, r3, #31
   82380:	2201      	movs	r2, #1
   82382:	fa02 f303 	lsl.w	r3, r2, r3
   82386:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82388:	683b      	ldr	r3, [r7, #0]
   8238a:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8238e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82392:	bf0c      	ite	eq
   82394:	2301      	moveq	r3, #1
   82396:	2300      	movne	r3, #0
   82398:	b2db      	uxtb	r3, r3
   8239a:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8239c:	683b      	ldr	r3, [r7, #0]
   8239e:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   823a0:	f003 0201 	and.w	r2, r3, #1
   823a4:	683b      	ldr	r3, [r7, #0]
   823a6:	f003 0301 	and.w	r3, r3, #1
   823aa:	9300      	str	r3, [sp, #0]
   823ac:	4613      	mov	r3, r2
   823ae:	4602      	mov	r2, r0
   823b0:	68f8      	ldr	r0, [r7, #12]
   823b2:	4c09      	ldr	r4, [pc, #36]	; (823d8 <pio_configure_pin+0x12c>)
   823b4:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   823b6:	e001      	b.n	823bc <pio_configure_pin+0x110>

	default:
		return 0;
   823b8:	2300      	movs	r3, #0
   823ba:	e000      	b.n	823be <pio_configure_pin+0x112>
	}

	return 1;
   823bc:	2301      	movs	r3, #1
}
   823be:	4618      	mov	r0, r3
   823c0:	3714      	adds	r7, #20
   823c2:	46bd      	mov	sp, r7
   823c4:	bd90      	pop	{r4, r7, pc}
   823c6:	bf00      	nop
   823c8:	000824b9 	.word	0x000824b9
   823cc:	00082037 	.word	0x00082037
   823d0:	0008200d 	.word	0x0008200d
   823d4:	000820d5 	.word	0x000820d5
   823d8:	00082155 	.word	0x00082155

000823dc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   823dc:	b590      	push	{r4, r7, lr}
   823de:	b087      	sub	sp, #28
   823e0:	af02      	add	r7, sp, #8
   823e2:	60f8      	str	r0, [r7, #12]
   823e4:	60b9      	str	r1, [r7, #8]
   823e6:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   823e8:	687b      	ldr	r3, [r7, #4]
   823ea:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   823ee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   823f2:	d039      	beq.n	82468 <pio_configure_pin_group+0x8c>
   823f4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   823f8:	d84f      	bhi.n	8249a <pio_configure_pin_group+0xbe>
   823fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   823fe:	d033      	beq.n	82468 <pio_configure_pin_group+0x8c>
   82400:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82404:	d849      	bhi.n	8249a <pio_configure_pin_group+0xbe>
   82406:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8240a:	d027      	beq.n	8245c <pio_configure_pin_group+0x80>
   8240c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82410:	d843      	bhi.n	8249a <pio_configure_pin_group+0xbe>
   82412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82416:	d003      	beq.n	82420 <pio_configure_pin_group+0x44>
   82418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8241c:	d00f      	beq.n	8243e <pio_configure_pin_group+0x62>
   8241e:	e03c      	b.n	8249a <pio_configure_pin_group+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82420:	68ba      	ldr	r2, [r7, #8]
   82422:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82426:	68f8      	ldr	r0, [r7, #12]
   82428:	4b1f      	ldr	r3, [pc, #124]	; (824a8 <pio_configure_pin_group+0xcc>)
   8242a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8242c:	687b      	ldr	r3, [r7, #4]
   8242e:	f003 0301 	and.w	r3, r3, #1
   82432:	461a      	mov	r2, r3
   82434:	68b9      	ldr	r1, [r7, #8]
   82436:	68f8      	ldr	r0, [r7, #12]
   82438:	4b1c      	ldr	r3, [pc, #112]	; (824ac <pio_configure_pin_group+0xd0>)
   8243a:	4798      	blx	r3
		break;
   8243c:	e02f      	b.n	8249e <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8243e:	68ba      	ldr	r2, [r7, #8]
   82440:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82444:	68f8      	ldr	r0, [r7, #12]
   82446:	4b18      	ldr	r3, [pc, #96]	; (824a8 <pio_configure_pin_group+0xcc>)
   82448:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8244a:	687b      	ldr	r3, [r7, #4]
   8244c:	f003 0301 	and.w	r3, r3, #1
   82450:	461a      	mov	r2, r3
   82452:	68b9      	ldr	r1, [r7, #8]
   82454:	68f8      	ldr	r0, [r7, #12]
   82456:	4b15      	ldr	r3, [pc, #84]	; (824ac <pio_configure_pin_group+0xd0>)
   82458:	4798      	blx	r3
		break;
   8245a:	e020      	b.n	8249e <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8245c:	687a      	ldr	r2, [r7, #4]
   8245e:	68b9      	ldr	r1, [r7, #8]
   82460:	68f8      	ldr	r0, [r7, #12]
   82462:	4b13      	ldr	r3, [pc, #76]	; (824b0 <pio_configure_pin_group+0xd4>)
   82464:	4798      	blx	r3
		break;
   82466:	e01a      	b.n	8249e <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82468:	687b      	ldr	r3, [r7, #4]
   8246a:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8246e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82472:	bf0c      	ite	eq
   82474:	2301      	moveq	r3, #1
   82476:	2300      	movne	r3, #0
   82478:	b2db      	uxtb	r3, r3
   8247a:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8247c:	687b      	ldr	r3, [r7, #4]
   8247e:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   82480:	f003 0201 	and.w	r2, r3, #1
   82484:	687b      	ldr	r3, [r7, #4]
   82486:	f003 0301 	and.w	r3, r3, #1
   8248a:	9300      	str	r3, [sp, #0]
   8248c:	4613      	mov	r3, r2
   8248e:	460a      	mov	r2, r1
   82490:	68b9      	ldr	r1, [r7, #8]
   82492:	68f8      	ldr	r0, [r7, #12]
   82494:	4c07      	ldr	r4, [pc, #28]	; (824b4 <pio_configure_pin_group+0xd8>)
   82496:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82498:	e001      	b.n	8249e <pio_configure_pin_group+0xc2>

	default:
		return 0;
   8249a:	2300      	movs	r3, #0
   8249c:	e000      	b.n	824a0 <pio_configure_pin_group+0xc4>
	}

	return 1;
   8249e:	2301      	movs	r3, #1
}
   824a0:	4618      	mov	r0, r3
   824a2:	3714      	adds	r7, #20
   824a4:	46bd      	mov	sp, r7
   824a6:	bd90      	pop	{r4, r7, pc}
   824a8:	00082037 	.word	0x00082037
   824ac:	0008200d 	.word	0x0008200d
   824b0:	000820d5 	.word	0x000820d5
   824b4:	00082155 	.word	0x00082155

000824b8 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   824b8:	b480      	push	{r7}
   824ba:	b085      	sub	sp, #20
   824bc:	af00      	add	r7, sp, #0
   824be:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   824c0:	687b      	ldr	r3, [r7, #4]
   824c2:	095b      	lsrs	r3, r3, #5
   824c4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   824c8:	f203 7306 	addw	r3, r3, #1798	; 0x706
   824cc:	025b      	lsls	r3, r3, #9
   824ce:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   824d0:	68fb      	ldr	r3, [r7, #12]
}
   824d2:	4618      	mov	r0, r3
   824d4:	3714      	adds	r7, #20
   824d6:	46bd      	mov	sp, r7
   824d8:	bc80      	pop	{r7}
   824da:	4770      	bx	lr

000824dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   824dc:	b580      	push	{r7, lr}
   824de:	b084      	sub	sp, #16
   824e0:	af00      	add	r7, sp, #0
   824e2:	6078      	str	r0, [r7, #4]
   824e4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   824e6:	6878      	ldr	r0, [r7, #4]
   824e8:	4b26      	ldr	r3, [pc, #152]	; (82584 <pio_handler_process+0xa8>)
   824ea:	4798      	blx	r3
   824ec:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   824ee:	6878      	ldr	r0, [r7, #4]
   824f0:	4b25      	ldr	r3, [pc, #148]	; (82588 <pio_handler_process+0xac>)
   824f2:	4798      	blx	r3
   824f4:	4602      	mov	r2, r0
   824f6:	68fb      	ldr	r3, [r7, #12]
   824f8:	4013      	ands	r3, r2
   824fa:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   824fc:	68fb      	ldr	r3, [r7, #12]
   824fe:	2b00      	cmp	r3, #0
   82500:	d03c      	beq.n	8257c <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   82502:	2300      	movs	r3, #0
   82504:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   82506:	e034      	b.n	82572 <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82508:	4a20      	ldr	r2, [pc, #128]	; (8258c <pio_handler_process+0xb0>)
   8250a:	68bb      	ldr	r3, [r7, #8]
   8250c:	011b      	lsls	r3, r3, #4
   8250e:	4413      	add	r3, r2
   82510:	681b      	ldr	r3, [r3, #0]
   82512:	683a      	ldr	r2, [r7, #0]
   82514:	429a      	cmp	r2, r3
   82516:	d126      	bne.n	82566 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82518:	4a1c      	ldr	r2, [pc, #112]	; (8258c <pio_handler_process+0xb0>)
   8251a:	68bb      	ldr	r3, [r7, #8]
   8251c:	011b      	lsls	r3, r3, #4
   8251e:	4413      	add	r3, r2
   82520:	3304      	adds	r3, #4
   82522:	681a      	ldr	r2, [r3, #0]
   82524:	68fb      	ldr	r3, [r7, #12]
   82526:	4013      	ands	r3, r2
   82528:	2b00      	cmp	r3, #0
   8252a:	d01c      	beq.n	82566 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8252c:	4a17      	ldr	r2, [pc, #92]	; (8258c <pio_handler_process+0xb0>)
   8252e:	68bb      	ldr	r3, [r7, #8]
   82530:	011b      	lsls	r3, r3, #4
   82532:	4413      	add	r3, r2
   82534:	330c      	adds	r3, #12
   82536:	681b      	ldr	r3, [r3, #0]
   82538:	4914      	ldr	r1, [pc, #80]	; (8258c <pio_handler_process+0xb0>)
   8253a:	68ba      	ldr	r2, [r7, #8]
   8253c:	0112      	lsls	r2, r2, #4
   8253e:	440a      	add	r2, r1
   82540:	6810      	ldr	r0, [r2, #0]
   82542:	4912      	ldr	r1, [pc, #72]	; (8258c <pio_handler_process+0xb0>)
   82544:	68ba      	ldr	r2, [r7, #8]
   82546:	0112      	lsls	r2, r2, #4
   82548:	440a      	add	r2, r1
   8254a:	3204      	adds	r2, #4
   8254c:	6812      	ldr	r2, [r2, #0]
   8254e:	4611      	mov	r1, r2
   82550:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82552:	4a0e      	ldr	r2, [pc, #56]	; (8258c <pio_handler_process+0xb0>)
   82554:	68bb      	ldr	r3, [r7, #8]
   82556:	011b      	lsls	r3, r3, #4
   82558:	4413      	add	r3, r2
   8255a:	3304      	adds	r3, #4
   8255c:	681b      	ldr	r3, [r3, #0]
   8255e:	43db      	mvns	r3, r3
   82560:	68fa      	ldr	r2, [r7, #12]
   82562:	4013      	ands	r3, r2
   82564:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   82566:	68bb      	ldr	r3, [r7, #8]
   82568:	3301      	adds	r3, #1
   8256a:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   8256c:	68bb      	ldr	r3, [r7, #8]
   8256e:	2b06      	cmp	r3, #6
   82570:	d803      	bhi.n	8257a <pio_handler_process+0x9e>
		while (status != 0) {
   82572:	68fb      	ldr	r3, [r7, #12]
   82574:	2b00      	cmp	r3, #0
   82576:	d1c7      	bne.n	82508 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   82578:	e000      	b.n	8257c <pio_handler_process+0xa0>
				break;
   8257a:	bf00      	nop
}
   8257c:	bf00      	nop
   8257e:	3710      	adds	r7, #16
   82580:	46bd      	mov	sp, r7
   82582:	bd80      	pop	{r7, pc}
   82584:	000821ef 	.word	0x000821ef
   82588:	00082205 	.word	0x00082205
   8258c:	200012b8 	.word	0x200012b8

00082590 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82590:	b580      	push	{r7, lr}
   82592:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82594:	210a      	movs	r1, #10
   82596:	4802      	ldr	r0, [pc, #8]	; (825a0 <PIOA_Handler+0x10>)
   82598:	4b02      	ldr	r3, [pc, #8]	; (825a4 <PIOA_Handler+0x14>)
   8259a:	4798      	blx	r3
}
   8259c:	bf00      	nop
   8259e:	bd80      	pop	{r7, pc}
   825a0:	400e0c00 	.word	0x400e0c00
   825a4:	000824dd 	.word	0x000824dd

000825a8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   825a8:	b580      	push	{r7, lr}
   825aa:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   825ac:	210b      	movs	r1, #11
   825ae:	4802      	ldr	r0, [pc, #8]	; (825b8 <PIOB_Handler+0x10>)
   825b0:	4b02      	ldr	r3, [pc, #8]	; (825bc <PIOB_Handler+0x14>)
   825b2:	4798      	blx	r3
}
   825b4:	bf00      	nop
   825b6:	bd80      	pop	{r7, pc}
   825b8:	400e0e00 	.word	0x400e0e00
   825bc:	000824dd 	.word	0x000824dd

000825c0 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   825c0:	b480      	push	{r7}
   825c2:	b085      	sub	sp, #20
   825c4:	af00      	add	r7, sp, #0
   825c6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   825c8:	4b1c      	ldr	r3, [pc, #112]	; (8263c <pmc_switch_mck_to_mainck+0x7c>)
   825ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   825cc:	f023 0303 	bic.w	r3, r3, #3
   825d0:	4a1a      	ldr	r2, [pc, #104]	; (8263c <pmc_switch_mck_to_mainck+0x7c>)
   825d2:	f043 0301 	orr.w	r3, r3, #1
   825d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   825d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   825dc:	60fb      	str	r3, [r7, #12]
   825de:	e007      	b.n	825f0 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   825e0:	68fb      	ldr	r3, [r7, #12]
   825e2:	2b00      	cmp	r3, #0
   825e4:	d101      	bne.n	825ea <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   825e6:	2301      	movs	r3, #1
   825e8:	e023      	b.n	82632 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   825ea:	68fb      	ldr	r3, [r7, #12]
   825ec:	3b01      	subs	r3, #1
   825ee:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   825f0:	4b12      	ldr	r3, [pc, #72]	; (8263c <pmc_switch_mck_to_mainck+0x7c>)
   825f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   825f4:	f003 0308 	and.w	r3, r3, #8
   825f8:	2b00      	cmp	r3, #0
   825fa:	d0f1      	beq.n	825e0 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   825fc:	4b0f      	ldr	r3, [pc, #60]	; (8263c <pmc_switch_mck_to_mainck+0x7c>)
   825fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82600:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82604:	490d      	ldr	r1, [pc, #52]	; (8263c <pmc_switch_mck_to_mainck+0x7c>)
   82606:	687b      	ldr	r3, [r7, #4]
   82608:	4313      	orrs	r3, r2
   8260a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8260c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82610:	60fb      	str	r3, [r7, #12]
   82612:	e007      	b.n	82624 <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82614:	68fb      	ldr	r3, [r7, #12]
   82616:	2b00      	cmp	r3, #0
   82618:	d101      	bne.n	8261e <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   8261a:	2301      	movs	r3, #1
   8261c:	e009      	b.n	82632 <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   8261e:	68fb      	ldr	r3, [r7, #12]
   82620:	3b01      	subs	r3, #1
   82622:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82624:	4b05      	ldr	r3, [pc, #20]	; (8263c <pmc_switch_mck_to_mainck+0x7c>)
   82626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82628:	f003 0308 	and.w	r3, r3, #8
   8262c:	2b00      	cmp	r3, #0
   8262e:	d0f1      	beq.n	82614 <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   82630:	2300      	movs	r3, #0
}
   82632:	4618      	mov	r0, r3
   82634:	3714      	adds	r7, #20
   82636:	46bd      	mov	sp, r7
   82638:	bc80      	pop	{r7}
   8263a:	4770      	bx	lr
   8263c:	400e0400 	.word	0x400e0400

00082640 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82640:	b480      	push	{r7}
   82642:	b085      	sub	sp, #20
   82644:	af00      	add	r7, sp, #0
   82646:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82648:	4b1c      	ldr	r3, [pc, #112]	; (826bc <pmc_switch_mck_to_pllack+0x7c>)
   8264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8264c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82650:	491a      	ldr	r1, [pc, #104]	; (826bc <pmc_switch_mck_to_pllack+0x7c>)
   82652:	687b      	ldr	r3, [r7, #4]
   82654:	4313      	orrs	r3, r2
   82656:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82658:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8265c:	60fb      	str	r3, [r7, #12]
   8265e:	e007      	b.n	82670 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82660:	68fb      	ldr	r3, [r7, #12]
   82662:	2b00      	cmp	r3, #0
   82664:	d101      	bne.n	8266a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   82666:	2301      	movs	r3, #1
   82668:	e023      	b.n	826b2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8266a:	68fb      	ldr	r3, [r7, #12]
   8266c:	3b01      	subs	r3, #1
   8266e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82670:	4b12      	ldr	r3, [pc, #72]	; (826bc <pmc_switch_mck_to_pllack+0x7c>)
   82672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82674:	f003 0308 	and.w	r3, r3, #8
   82678:	2b00      	cmp	r3, #0
   8267a:	d0f1      	beq.n	82660 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8267c:	4b0f      	ldr	r3, [pc, #60]	; (826bc <pmc_switch_mck_to_pllack+0x7c>)
   8267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82680:	f023 0303 	bic.w	r3, r3, #3
   82684:	4a0d      	ldr	r2, [pc, #52]	; (826bc <pmc_switch_mck_to_pllack+0x7c>)
   82686:	f043 0302 	orr.w	r3, r3, #2
   8268a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8268c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82690:	60fb      	str	r3, [r7, #12]
   82692:	e007      	b.n	826a4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82694:	68fb      	ldr	r3, [r7, #12]
   82696:	2b00      	cmp	r3, #0
   82698:	d101      	bne.n	8269e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   8269a:	2301      	movs	r3, #1
   8269c:	e009      	b.n	826b2 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   8269e:	68fb      	ldr	r3, [r7, #12]
   826a0:	3b01      	subs	r3, #1
   826a2:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   826a4:	4b05      	ldr	r3, [pc, #20]	; (826bc <pmc_switch_mck_to_pllack+0x7c>)
   826a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   826a8:	f003 0308 	and.w	r3, r3, #8
   826ac:	2b00      	cmp	r3, #0
   826ae:	d0f1      	beq.n	82694 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   826b0:	2300      	movs	r3, #0
}
   826b2:	4618      	mov	r0, r3
   826b4:	3714      	adds	r7, #20
   826b6:	46bd      	mov	sp, r7
   826b8:	bc80      	pop	{r7}
   826ba:	4770      	bx	lr
   826bc:	400e0400 	.word	0x400e0400

000826c0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   826c0:	b480      	push	{r7}
   826c2:	b083      	sub	sp, #12
   826c4:	af00      	add	r7, sp, #0
   826c6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   826c8:	687b      	ldr	r3, [r7, #4]
   826ca:	2b01      	cmp	r3, #1
   826cc:	d107      	bne.n	826de <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   826ce:	4b08      	ldr	r3, [pc, #32]	; (826f0 <pmc_switch_sclk_to_32kxtal+0x30>)
   826d0:	689b      	ldr	r3, [r3, #8]
   826d2:	4a07      	ldr	r2, [pc, #28]	; (826f0 <pmc_switch_sclk_to_32kxtal+0x30>)
   826d4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   826d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   826dc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   826de:	4b04      	ldr	r3, [pc, #16]	; (826f0 <pmc_switch_sclk_to_32kxtal+0x30>)
   826e0:	4a04      	ldr	r2, [pc, #16]	; (826f4 <pmc_switch_sclk_to_32kxtal+0x34>)
   826e2:	601a      	str	r2, [r3, #0]
}
   826e4:	bf00      	nop
   826e6:	370c      	adds	r7, #12
   826e8:	46bd      	mov	sp, r7
   826ea:	bc80      	pop	{r7}
   826ec:	4770      	bx	lr
   826ee:	bf00      	nop
   826f0:	400e1210 	.word	0x400e1210
   826f4:	a5000008 	.word	0xa5000008

000826f8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   826f8:	b480      	push	{r7}
   826fa:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   826fc:	4b09      	ldr	r3, [pc, #36]	; (82724 <pmc_osc_is_ready_32kxtal+0x2c>)
   826fe:	695b      	ldr	r3, [r3, #20]
   82700:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   82704:	2b00      	cmp	r3, #0
   82706:	d007      	beq.n	82718 <pmc_osc_is_ready_32kxtal+0x20>
   82708:	4b07      	ldr	r3, [pc, #28]	; (82728 <pmc_osc_is_ready_32kxtal+0x30>)
   8270a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82710:	2b00      	cmp	r3, #0
   82712:	d001      	beq.n	82718 <pmc_osc_is_ready_32kxtal+0x20>
   82714:	2301      	movs	r3, #1
   82716:	e000      	b.n	8271a <pmc_osc_is_ready_32kxtal+0x22>
   82718:	2300      	movs	r3, #0
}
   8271a:	4618      	mov	r0, r3
   8271c:	46bd      	mov	sp, r7
   8271e:	bc80      	pop	{r7}
   82720:	4770      	bx	lr
   82722:	bf00      	nop
   82724:	400e1210 	.word	0x400e1210
   82728:	400e0400 	.word	0x400e0400

0008272c <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   8272c:	b480      	push	{r7}
   8272e:	b083      	sub	sp, #12
   82730:	af00      	add	r7, sp, #0
   82732:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   82734:	4b13      	ldr	r3, [pc, #76]	; (82784 <pmc_osc_enable_fastrc+0x58>)
   82736:	6a1b      	ldr	r3, [r3, #32]
   82738:	4a12      	ldr	r2, [pc, #72]	; (82784 <pmc_osc_enable_fastrc+0x58>)
   8273a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8273e:	f043 0308 	orr.w	r3, r3, #8
   82742:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82744:	bf00      	nop
   82746:	4b0f      	ldr	r3, [pc, #60]	; (82784 <pmc_osc_enable_fastrc+0x58>)
   82748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8274e:	2b00      	cmp	r3, #0
   82750:	d0f9      	beq.n	82746 <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82752:	4b0c      	ldr	r3, [pc, #48]	; (82784 <pmc_osc_enable_fastrc+0x58>)
   82754:	6a1b      	ldr	r3, [r3, #32]
   82756:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8275a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   8275e:	687a      	ldr	r2, [r7, #4]
   82760:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82762:	4a08      	ldr	r2, [pc, #32]	; (82784 <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   82764:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82768:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8276a:	bf00      	nop
   8276c:	4b05      	ldr	r3, [pc, #20]	; (82784 <pmc_osc_enable_fastrc+0x58>)
   8276e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82774:	2b00      	cmp	r3, #0
   82776:	d0f9      	beq.n	8276c <pmc_osc_enable_fastrc+0x40>
}
   82778:	bf00      	nop
   8277a:	bf00      	nop
   8277c:	370c      	adds	r7, #12
   8277e:	46bd      	mov	sp, r7
   82780:	bc80      	pop	{r7}
   82782:	4770      	bx	lr
   82784:	400e0400 	.word	0x400e0400

00082788 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   82788:	b480      	push	{r7}
   8278a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   8278c:	4b03      	ldr	r3, [pc, #12]	; (8279c <pmc_osc_is_ready_fastrc+0x14>)
   8278e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   82794:	4618      	mov	r0, r3
   82796:	46bd      	mov	sp, r7
   82798:	bc80      	pop	{r7}
   8279a:	4770      	bx	lr
   8279c:	400e0400 	.word	0x400e0400

000827a0 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   827a0:	b480      	push	{r7}
   827a2:	b085      	sub	sp, #20
   827a4:	af00      	add	r7, sp, #0
   827a6:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   827a8:	4b10      	ldr	r3, [pc, #64]	; (827ec <pmc_osc_enable_main_xtal+0x4c>)
   827aa:	6a1b      	ldr	r3, [r3, #32]
   827ac:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   827ae:	68fb      	ldr	r3, [r7, #12]
   827b0:	f023 0303 	bic.w	r3, r3, #3
   827b4:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   827b6:	687b      	ldr	r3, [r7, #4]
   827b8:	021b      	lsls	r3, r3, #8
   827ba:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   827bc:	68fb      	ldr	r3, [r7, #12]
   827be:	4313      	orrs	r3, r2
   827c0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   827c4:	f043 0301 	orr.w	r3, r3, #1
   827c8:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   827ca:	4a08      	ldr	r2, [pc, #32]	; (827ec <pmc_osc_enable_main_xtal+0x4c>)
   827cc:	68fb      	ldr	r3, [r7, #12]
   827ce:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   827d0:	bf00      	nop
   827d2:	4b06      	ldr	r3, [pc, #24]	; (827ec <pmc_osc_enable_main_xtal+0x4c>)
   827d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   827d6:	f003 0301 	and.w	r3, r3, #1
   827da:	2b00      	cmp	r3, #0
   827dc:	d0f9      	beq.n	827d2 <pmc_osc_enable_main_xtal+0x32>
}
   827de:	bf00      	nop
   827e0:	bf00      	nop
   827e2:	3714      	adds	r7, #20
   827e4:	46bd      	mov	sp, r7
   827e6:	bc80      	pop	{r7}
   827e8:	4770      	bx	lr
   827ea:	bf00      	nop
   827ec:	400e0400 	.word	0x400e0400

000827f0 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   827f0:	b480      	push	{r7}
   827f2:	b083      	sub	sp, #12
   827f4:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   827f6:	4b0a      	ldr	r3, [pc, #40]	; (82820 <pmc_osc_bypass_main_xtal+0x30>)
   827f8:	6a1b      	ldr	r3, [r3, #32]
   827fa:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   827fc:	687b      	ldr	r3, [r7, #4]
   827fe:	f023 0303 	bic.w	r3, r3, #3
   82802:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   82804:	687b      	ldr	r3, [r7, #4]
   82806:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8280a:	f043 0302 	orr.w	r3, r3, #2
   8280e:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   82810:	4a03      	ldr	r2, [pc, #12]	; (82820 <pmc_osc_bypass_main_xtal+0x30>)
   82812:	687b      	ldr	r3, [r7, #4]
   82814:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   82816:	bf00      	nop
   82818:	370c      	adds	r7, #12
   8281a:	46bd      	mov	sp, r7
   8281c:	bc80      	pop	{r7}
   8281e:	4770      	bx	lr
   82820:	400e0400 	.word	0x400e0400

00082824 <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   82824:	b480      	push	{r7}
   82826:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   82828:	4b03      	ldr	r3, [pc, #12]	; (82838 <pmc_osc_is_bypassed_main_xtal+0x14>)
   8282a:	6a1b      	ldr	r3, [r3, #32]
   8282c:	f003 0302 	and.w	r3, r3, #2
}
   82830:	4618      	mov	r0, r3
   82832:	46bd      	mov	sp, r7
   82834:	bc80      	pop	{r7}
   82836:	4770      	bx	lr
   82838:	400e0400 	.word	0x400e0400

0008283c <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   8283c:	b480      	push	{r7}
   8283e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   82840:	4b03      	ldr	r3, [pc, #12]	; (82850 <pmc_osc_is_ready_main_xtal+0x14>)
   82842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82844:	f003 0301 	and.w	r3, r3, #1
}
   82848:	4618      	mov	r0, r3
   8284a:	46bd      	mov	sp, r7
   8284c:	bc80      	pop	{r7}
   8284e:	4770      	bx	lr
   82850:	400e0400 	.word	0x400e0400

00082854 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82854:	b480      	push	{r7}
   82856:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82858:	4b03      	ldr	r3, [pc, #12]	; (82868 <pmc_osc_is_ready_mainck+0x14>)
   8285a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82860:	4618      	mov	r0, r3
   82862:	46bd      	mov	sp, r7
   82864:	bc80      	pop	{r7}
   82866:	4770      	bx	lr
   82868:	400e0400 	.word	0x400e0400

0008286c <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   8286c:	b480      	push	{r7}
   8286e:	b085      	sub	sp, #20
   82870:	af00      	add	r7, sp, #0
   82872:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   82874:	4b0c      	ldr	r3, [pc, #48]	; (828a8 <pmc_mainck_osc_select+0x3c>)
   82876:	6a1b      	ldr	r3, [r3, #32]
   82878:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   8287a:	687b      	ldr	r3, [r7, #4]
   8287c:	2b00      	cmp	r3, #0
   8287e:	d004      	beq.n	8288a <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   82880:	68fb      	ldr	r3, [r7, #12]
   82882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   82886:	60fb      	str	r3, [r7, #12]
   82888:	e003      	b.n	82892 <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   8288a:	68fb      	ldr	r3, [r7, #12]
   8288c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   82890:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   82892:	4a05      	ldr	r2, [pc, #20]	; (828a8 <pmc_mainck_osc_select+0x3c>)
   82894:	68fb      	ldr	r3, [r7, #12]
   82896:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8289a:	6213      	str	r3, [r2, #32]
}
   8289c:	bf00      	nop
   8289e:	3714      	adds	r7, #20
   828a0:	46bd      	mov	sp, r7
   828a2:	bc80      	pop	{r7}
   828a4:	4770      	bx	lr
   828a6:	bf00      	nop
   828a8:	400e0400 	.word	0x400e0400

000828ac <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   828ac:	b480      	push	{r7}
   828ae:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   828b0:	4b03      	ldr	r3, [pc, #12]	; (828c0 <pmc_disable_pllack+0x14>)
   828b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   828b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   828b8:	bf00      	nop
   828ba:	46bd      	mov	sp, r7
   828bc:	bc80      	pop	{r7}
   828be:	4770      	bx	lr
   828c0:	400e0400 	.word	0x400e0400

000828c4 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   828c4:	b480      	push	{r7}
   828c6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   828c8:	4b03      	ldr	r3, [pc, #12]	; (828d8 <pmc_is_locked_pllack+0x14>)
   828ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   828cc:	f003 0302 	and.w	r3, r3, #2
}
   828d0:	4618      	mov	r0, r3
   828d2:	46bd      	mov	sp, r7
   828d4:	bc80      	pop	{r7}
   828d6:	4770      	bx	lr
   828d8:	400e0400 	.word	0x400e0400

000828dc <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   828dc:	b480      	push	{r7}
   828de:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   828e0:	4b04      	ldr	r3, [pc, #16]	; (828f4 <pmc_disable_upll_clock+0x18>)
   828e2:	69db      	ldr	r3, [r3, #28]
   828e4:	4a03      	ldr	r2, [pc, #12]	; (828f4 <pmc_disable_upll_clock+0x18>)
   828e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   828ea:	61d3      	str	r3, [r2, #28]
}
   828ec:	bf00      	nop
   828ee:	46bd      	mov	sp, r7
   828f0:	bc80      	pop	{r7}
   828f2:	4770      	bx	lr
   828f4:	400e0400 	.word	0x400e0400

000828f8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   828f8:	b480      	push	{r7}
   828fa:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   828fc:	4b03      	ldr	r3, [pc, #12]	; (8290c <pmc_is_locked_upll+0x14>)
   828fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82900:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82904:	4618      	mov	r0, r3
   82906:	46bd      	mov	sp, r7
   82908:	bc80      	pop	{r7}
   8290a:	4770      	bx	lr
   8290c:	400e0400 	.word	0x400e0400

00082910 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82910:	b480      	push	{r7}
   82912:	b083      	sub	sp, #12
   82914:	af00      	add	r7, sp, #0
   82916:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82918:	687b      	ldr	r3, [r7, #4]
   8291a:	2b1d      	cmp	r3, #29
   8291c:	d901      	bls.n	82922 <pmc_enable_periph_clk+0x12>
		return 1;
   8291e:	2301      	movs	r3, #1
   82920:	e015      	b.n	8294e <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   82922:	687b      	ldr	r3, [r7, #4]
   82924:	2b1f      	cmp	r3, #31
   82926:	d811      	bhi.n	8294c <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82928:	4b0b      	ldr	r3, [pc, #44]	; (82958 <pmc_enable_periph_clk+0x48>)
   8292a:	699a      	ldr	r2, [r3, #24]
   8292c:	2101      	movs	r1, #1
   8292e:	687b      	ldr	r3, [r7, #4]
   82930:	fa01 f303 	lsl.w	r3, r1, r3
   82934:	401a      	ands	r2, r3
   82936:	2101      	movs	r1, #1
   82938:	687b      	ldr	r3, [r7, #4]
   8293a:	fa01 f303 	lsl.w	r3, r1, r3
   8293e:	429a      	cmp	r2, r3
   82940:	d004      	beq.n	8294c <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   82942:	2201      	movs	r2, #1
   82944:	687b      	ldr	r3, [r7, #4]
   82946:	409a      	lsls	r2, r3
   82948:	4b03      	ldr	r3, [pc, #12]	; (82958 <pmc_enable_periph_clk+0x48>)
   8294a:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8294c:	2300      	movs	r3, #0
}
   8294e:	4618      	mov	r0, r3
   82950:	370c      	adds	r7, #12
   82952:	46bd      	mov	sp, r7
   82954:	bc80      	pop	{r7}
   82956:	4770      	bx	lr
   82958:	400e0400 	.word	0x400e0400

0008295c <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   8295c:	b480      	push	{r7}
   8295e:	b083      	sub	sp, #12
   82960:	af00      	add	r7, sp, #0
   82962:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82964:	687b      	ldr	r3, [r7, #4]
   82966:	2b1d      	cmp	r3, #29
   82968:	d901      	bls.n	8296e <pmc_disable_periph_clk+0x12>
		return 1;
   8296a:	2301      	movs	r3, #1
   8296c:	e015      	b.n	8299a <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   8296e:	687b      	ldr	r3, [r7, #4]
   82970:	2b1f      	cmp	r3, #31
   82972:	d811      	bhi.n	82998 <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   82974:	4b0b      	ldr	r3, [pc, #44]	; (829a4 <pmc_disable_periph_clk+0x48>)
   82976:	699a      	ldr	r2, [r3, #24]
   82978:	2101      	movs	r1, #1
   8297a:	687b      	ldr	r3, [r7, #4]
   8297c:	fa01 f303 	lsl.w	r3, r1, r3
   82980:	401a      	ands	r2, r3
   82982:	2101      	movs	r1, #1
   82984:	687b      	ldr	r3, [r7, #4]
   82986:	fa01 f303 	lsl.w	r3, r1, r3
   8298a:	429a      	cmp	r2, r3
   8298c:	d104      	bne.n	82998 <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   8298e:	2201      	movs	r2, #1
   82990:	687b      	ldr	r3, [r7, #4]
   82992:	409a      	lsls	r2, r3
   82994:	4b03      	ldr	r3, [pc, #12]	; (829a4 <pmc_disable_periph_clk+0x48>)
   82996:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   82998:	2300      	movs	r3, #0
}
   8299a:	4618      	mov	r0, r3
   8299c:	370c      	adds	r7, #12
   8299e:	46bd      	mov	sp, r7
   829a0:	bc80      	pop	{r7}
   829a2:	4770      	bx	lr
   829a4:	400e0400 	.word	0x400e0400

000829a8 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   829a8:	b480      	push	{r7}
   829aa:	b083      	sub	sp, #12
   829ac:	af00      	add	r7, sp, #0
   829ae:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   829b0:	4a05      	ldr	r2, [pc, #20]	; (829c8 <pmc_enable_pck+0x20>)
   829b2:	f44f 7180 	mov.w	r1, #256	; 0x100
   829b6:	687b      	ldr	r3, [r7, #4]
   829b8:	fa01 f303 	lsl.w	r3, r1, r3
   829bc:	6013      	str	r3, [r2, #0]
}
   829be:	bf00      	nop
   829c0:	370c      	adds	r7, #12
   829c2:	46bd      	mov	sp, r7
   829c4:	bc80      	pop	{r7}
   829c6:	4770      	bx	lr
   829c8:	400e0400 	.word	0x400e0400

000829cc <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   829cc:	b480      	push	{r7}
   829ce:	b083      	sub	sp, #12
   829d0:	af00      	add	r7, sp, #0
   829d2:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   829d4:	687b      	ldr	r3, [r7, #4]
   829d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
   829da:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   829dc:	4b05      	ldr	r3, [pc, #20]	; (829f4 <pmc_set_fast_startup_input+0x28>)
   829de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   829e0:	4904      	ldr	r1, [pc, #16]	; (829f4 <pmc_set_fast_startup_input+0x28>)
   829e2:	687b      	ldr	r3, [r7, #4]
   829e4:	4313      	orrs	r3, r2
   829e6:	670b      	str	r3, [r1, #112]	; 0x70
}
   829e8:	bf00      	nop
   829ea:	370c      	adds	r7, #12
   829ec:	46bd      	mov	sp, r7
   829ee:	bc80      	pop	{r7}
   829f0:	4770      	bx	lr
   829f2:	bf00      	nop
   829f4:	400e0400 	.word	0x400e0400

000829f8 <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   829f8:	b480      	push	{r7}
   829fa:	b083      	sub	sp, #12
   829fc:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   829fe:	4b13      	ldr	r3, [pc, #76]	; (82a4c <pmc_enable_waitmode+0x54>)
   82a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82a02:	4a12      	ldr	r2, [pc, #72]	; (82a4c <pmc_enable_waitmode+0x54>)
   82a04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82a08:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   82a0a:	4b11      	ldr	r3, [pc, #68]	; (82a50 <pmc_enable_waitmode+0x58>)
   82a0c:	691b      	ldr	r3, [r3, #16]
   82a0e:	4a10      	ldr	r2, [pc, #64]	; (82a50 <pmc_enable_waitmode+0x58>)
   82a10:	f023 0304 	bic.w	r3, r3, #4
   82a14:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   82a16:	bf20      	wfe
}
   82a18:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   82a1a:	2300      	movs	r3, #0
   82a1c:	607b      	str	r3, [r7, #4]
   82a1e:	e004      	b.n	82a2a <pmc_enable_waitmode+0x32>
  __ASM volatile ("nop");
   82a20:	bf00      	nop
}
   82a22:	bf00      	nop
   82a24:	687b      	ldr	r3, [r7, #4]
   82a26:	3301      	adds	r3, #1
   82a28:	607b      	str	r3, [r7, #4]
   82a2a:	687b      	ldr	r3, [r7, #4]
   82a2c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   82a30:	d3f6      	bcc.n	82a20 <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   82a32:	bf00      	nop
   82a34:	4b05      	ldr	r3, [pc, #20]	; (82a4c <pmc_enable_waitmode+0x54>)
   82a36:	6a1b      	ldr	r3, [r3, #32]
   82a38:	f003 0308 	and.w	r3, r3, #8
   82a3c:	2b00      	cmp	r3, #0
   82a3e:	d0f9      	beq.n	82a34 <pmc_enable_waitmode+0x3c>

}
   82a40:	bf00      	nop
   82a42:	bf00      	nop
   82a44:	370c      	adds	r7, #12
   82a46:	46bd      	mov	sp, r7
   82a48:	bc80      	pop	{r7}
   82a4a:	4770      	bx	lr
   82a4c:	400e0400 	.word	0x400e0400
   82a50:	e000ed00 	.word	0xe000ed00

00082a54 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   82a54:	b580      	push	{r7, lr}
   82a56:	b086      	sub	sp, #24
   82a58:	af00      	add	r7, sp, #0
   82a5a:	60f8      	str	r0, [r7, #12]
   82a5c:	60b9      	str	r1, [r7, #8]
   82a5e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   82a60:	2300      	movs	r3, #0
   82a62:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   82a64:	68fb      	ldr	r3, [r7, #12]
   82a66:	2b00      	cmp	r3, #0
   82a68:	d012      	beq.n	82a90 <_read+0x3c>
		return -1;
   82a6a:	f04f 33ff 	mov.w	r3, #4294967295
   82a6e:	e013      	b.n	82a98 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   82a70:	4b0b      	ldr	r3, [pc, #44]	; (82aa0 <_read+0x4c>)
   82a72:	681b      	ldr	r3, [r3, #0]
   82a74:	4a0b      	ldr	r2, [pc, #44]	; (82aa4 <_read+0x50>)
   82a76:	6812      	ldr	r2, [r2, #0]
   82a78:	68b9      	ldr	r1, [r7, #8]
   82a7a:	4610      	mov	r0, r2
   82a7c:	4798      	blx	r3
		ptr++;
   82a7e:	68bb      	ldr	r3, [r7, #8]
   82a80:	3301      	adds	r3, #1
   82a82:	60bb      	str	r3, [r7, #8]
		nChars++;
   82a84:	697b      	ldr	r3, [r7, #20]
   82a86:	3301      	adds	r3, #1
   82a88:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   82a8a:	687b      	ldr	r3, [r7, #4]
   82a8c:	3b01      	subs	r3, #1
   82a8e:	607b      	str	r3, [r7, #4]
   82a90:	687b      	ldr	r3, [r7, #4]
   82a92:	2b00      	cmp	r3, #0
   82a94:	dcec      	bgt.n	82a70 <_read+0x1c>
	}
	return nChars;
   82a96:	697b      	ldr	r3, [r7, #20]
}
   82a98:	4618      	mov	r0, r3
   82a9a:	3718      	adds	r7, #24
   82a9c:	46bd      	mov	sp, r7
   82a9e:	bd80      	pop	{r7, pc}
   82aa0:	2000181c 	.word	0x2000181c
   82aa4:	20001844 	.word	0x20001844

00082aa8 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   82aa8:	b5b0      	push	{r4, r5, r7, lr}
   82aaa:	b09c      	sub	sp, #112	; 0x70
   82aac:	af00      	add	r7, sp, #0
   82aae:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   82ab0:	687b      	ldr	r3, [r7, #4]
   82ab2:	2b05      	cmp	r3, #5
   82ab4:	f000 81e8 	beq.w	82e88 <pmc_sleep+0x3e0>
   82ab8:	687b      	ldr	r3, [r7, #4]
   82aba:	2b05      	cmp	r3, #5
   82abc:	f300 81f5 	bgt.w	82eaa <pmc_sleep+0x402>
   82ac0:	687b      	ldr	r3, [r7, #4]
   82ac2:	2b02      	cmp	r3, #2
   82ac4:	dc03      	bgt.n	82ace <pmc_sleep+0x26>
   82ac6:	687b      	ldr	r3, [r7, #4]
   82ac8:	2b00      	cmp	r3, #0
   82aca:	dc06      	bgt.n	82ada <pmc_sleep+0x32>
		__WFE() ;
#endif
		break;
#endif
	}
}
   82acc:	e1ed      	b.n	82eaa <pmc_sleep+0x402>
   82ace:	687b      	ldr	r3, [r7, #4]
   82ad0:	3b03      	subs	r3, #3
	switch (sleep_mode) {
   82ad2:	2b01      	cmp	r3, #1
   82ad4:	f200 81e9 	bhi.w	82eaa <pmc_sleep+0x402>
   82ad8:	e01b      	b.n	82b12 <pmc_sleep+0x6a>
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   82ada:	4b88      	ldr	r3, [pc, #544]	; (82cfc <pmc_sleep+0x254>)
   82adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82ade:	4a87      	ldr	r2, [pc, #540]	; (82cfc <pmc_sleep+0x254>)
   82ae0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   82ae4:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   82ae6:	4b86      	ldr	r3, [pc, #536]	; (82d00 <pmc_sleep+0x258>)
   82ae8:	691b      	ldr	r3, [r3, #16]
   82aea:	4a85      	ldr	r2, [pc, #532]	; (82d00 <pmc_sleep+0x258>)
   82aec:	f023 0304 	bic.w	r3, r3, #4
   82af0:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   82af2:	4b84      	ldr	r3, [pc, #528]	; (82d04 <pmc_sleep+0x25c>)
   82af4:	2201      	movs	r2, #1
   82af6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82af8:	f3bf 8f5f 	dmb	sy
}
   82afc:	bf00      	nop
  __ASM volatile ("cpsie i");
   82afe:	b662      	cpsie	i
}
   82b00:	bf00      	nop
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   82b02:	687b      	ldr	r3, [r7, #4]
   82b04:	2b02      	cmp	r3, #2
   82b06:	d101      	bne.n	82b0c <pmc_sleep+0x64>
  __ASM volatile ("wfi");
   82b08:	bf30      	wfi
}
   82b0a:	e001      	b.n	82b10 <pmc_sleep+0x68>
  __ASM volatile ("wfe");
   82b0c:	bf20      	wfe
}
   82b0e:	bf00      	nop
		break;
   82b10:	e1cb      	b.n	82eaa <pmc_sleep+0x402>
  __ASM volatile ("cpsid i");
   82b12:	b672      	cpsid	i
}
   82b14:	bf00      	nop
  __ASM volatile ("dmb");
   82b16:	f3bf 8f5f 	dmb	sy
}
   82b1a:	bf00      	nop
		cpu_irq_disable();
   82b1c:	4b79      	ldr	r3, [pc, #484]	; (82d04 <pmc_sleep+0x25c>)
   82b1e:	2200      	movs	r2, #0
   82b20:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   82b22:	4b79      	ldr	r3, [pc, #484]	; (82d08 <pmc_sleep+0x260>)
   82b24:	2201      	movs	r2, #1
   82b26:	701a      	strb	r2, [r3, #0]
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   82b28:	687b      	ldr	r3, [r7, #4]
   82b2a:	2b04      	cmp	r3, #4
   82b2c:	bf0c      	ite	eq
   82b2e:	2301      	moveq	r3, #1
   82b30:	2300      	movne	r3, #0
   82b32:	b2da      	uxtb	r2, r3
   82b34:	f107 0320 	add.w	r3, r7, #32
   82b38:	64fb      	str	r3, [r7, #76]	; 0x4c
   82b3a:	f107 031c 	add.w	r3, r7, #28
   82b3e:	64bb      	str	r3, [r7, #72]	; 0x48
   82b40:	f107 0318 	add.w	r3, r7, #24
   82b44:	647b      	str	r3, [r7, #68]	; 0x44
   82b46:	f107 0314 	add.w	r3, r7, #20
   82b4a:	643b      	str	r3, [r7, #64]	; 0x40
   82b4c:	f107 0310 	add.w	r3, r7, #16
   82b50:	63fb      	str	r3, [r7, #60]	; 0x3c
   82b52:	f107 030c 	add.w	r3, r7, #12
   82b56:	63bb      	str	r3, [r7, #56]	; 0x38
   82b58:	4613      	mov	r3, r2
   82b5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   82b5e:	4b67      	ldr	r3, [pc, #412]	; (82cfc <pmc_sleep+0x254>)
   82b60:	6a1b      	ldr	r3, [r3, #32]
   82b62:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   82b64:	4b65      	ldr	r3, [pc, #404]	; (82cfc <pmc_sleep+0x254>)
   82b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82b68:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   82b6a:	4b68      	ldr	r3, [pc, #416]	; (82d0c <pmc_sleep+0x264>)
   82b6c:	681b      	ldr	r3, [r3, #0]
   82b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   82b70:	4b67      	ldr	r3, [pc, #412]	; (82d10 <pmc_sleep+0x268>)
   82b72:	681b      	ldr	r3, [r3, #0]
   82b74:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   82b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   82b78:	2b00      	cmp	r3, #0
   82b7a:	d002      	beq.n	82b82 <pmc_sleep+0xda>
		*p_osc_setting = mor;
   82b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   82b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   82b80:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   82b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   82b84:	2b00      	cmp	r3, #0
   82b86:	d003      	beq.n	82b90 <pmc_sleep+0xe8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   82b88:	4b5c      	ldr	r3, [pc, #368]	; (82cfc <pmc_sleep+0x254>)
   82b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   82b8e:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   82b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   82b92:	2b00      	cmp	r3, #0
   82b94:	d003      	beq.n	82b9e <pmc_sleep+0xf6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   82b96:	4b59      	ldr	r3, [pc, #356]	; (82cfc <pmc_sleep+0x254>)
   82b98:	69da      	ldr	r2, [r3, #28]
   82b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   82b9c:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   82b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82ba0:	2b00      	cmp	r3, #0
   82ba2:	d002      	beq.n	82baa <pmc_sleep+0x102>
		*p_mck_setting  = mckr;
   82ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   82ba8:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   82baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82bac:	2b00      	cmp	r3, #0
   82bae:	d002      	beq.n	82bb6 <pmc_sleep+0x10e>
		*p_fmr_setting  = fmr;
   82bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   82bb4:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   82bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82bb8:	2b00      	cmp	r3, #0
   82bba:	d002      	beq.n	82bc2 <pmc_sleep+0x11a>
		*p_fmr_setting1 = fmr1;
   82bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   82bc0:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   82bc2:	4a4e      	ldr	r2, [pc, #312]	; (82cfc <pmc_sleep+0x254>)
   82bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82bc6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82bca:	f043 0308 	orr.w	r3, r3, #8
   82bce:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   82bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82bd2:	f003 0302 	and.w	r3, r3, #2
   82bd6:	2b00      	cmp	r3, #0
   82bd8:	d00f      	beq.n	82bfa <pmc_sleep+0x152>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   82bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82bdc:	f023 0303 	bic.w	r3, r3, #3
   82be0:	f043 0301 	orr.w	r3, r3, #1
   82be4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   82be6:	4a45      	ldr	r2, [pc, #276]	; (82cfc <pmc_sleep+0x254>)
   82be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82bea:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82bec:	bf00      	nop
   82bee:	4b43      	ldr	r3, [pc, #268]	; (82cfc <pmc_sleep+0x254>)
   82bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82bf2:	f003 0308 	and.w	r3, r3, #8
   82bf6:	2b00      	cmp	r3, #0
   82bf8:	d0f9      	beq.n	82bee <pmc_sleep+0x146>
	if (mckr & PMC_MCKR_PRES_Msk) {
   82bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82bfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82c00:	2b00      	cmp	r3, #0
   82c02:	d00d      	beq.n	82c20 <pmc_sleep+0x178>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   82c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   82c0c:	4a3b      	ldr	r2, [pc, #236]	; (82cfc <pmc_sleep+0x254>)
   82c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82c10:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82c12:	bf00      	nop
   82c14:	4b39      	ldr	r3, [pc, #228]	; (82cfc <pmc_sleep+0x254>)
   82c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82c18:	f003 0308 	and.w	r3, r3, #8
   82c1c:	2b00      	cmp	r3, #0
   82c1e:	d0f9      	beq.n	82c14 <pmc_sleep+0x16c>
	pmc_disable_pllack();
   82c20:	4b3c      	ldr	r3, [pc, #240]	; (82d14 <pmc_sleep+0x26c>)
   82c22:	4798      	blx	r3
	pmc_disable_upll_clock();
   82c24:	4b3c      	ldr	r3, [pc, #240]	; (82d18 <pmc_sleep+0x270>)
   82c26:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82c28:	bf00      	nop
   82c2a:	4b34      	ldr	r3, [pc, #208]	; (82cfc <pmc_sleep+0x254>)
   82c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82c32:	2b00      	cmp	r3, #0
   82c34:	d0f9      	beq.n	82c2a <pmc_sleep+0x182>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   82c36:	4b31      	ldr	r3, [pc, #196]	; (82cfc <pmc_sleep+0x254>)
   82c38:	6a1b      	ldr	r3, [r3, #32]
   82c3a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   82c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82c42:	4a2e      	ldr	r2, [pc, #184]	; (82cfc <pmc_sleep+0x254>)
   82c44:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82c48:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   82c4a:	bf00      	nop
   82c4c:	4b2b      	ldr	r3, [pc, #172]	; (82cfc <pmc_sleep+0x254>)
   82c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82c54:	2b00      	cmp	r3, #0
   82c56:	d0f9      	beq.n	82c4c <pmc_sleep+0x1a4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   82c58:	4a2c      	ldr	r2, [pc, #176]	; (82d0c <pmc_sleep+0x264>)
   82c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   82c5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   82c60:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   82c62:	4a2b      	ldr	r2, [pc, #172]	; (82d10 <pmc_sleep+0x268>)
   82c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82c66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   82c6a:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   82c6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   82c70:	2b00      	cmp	r3, #0
   82c72:	d009      	beq.n	82c88 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82c74:	4b21      	ldr	r3, [pc, #132]	; (82cfc <pmc_sleep+0x254>)
   82c76:	6a1b      	ldr	r3, [r3, #32]
   82c78:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82c7c:	f023 0301 	bic.w	r3, r3, #1
   82c80:	4a1e      	ldr	r2, [pc, #120]	; (82cfc <pmc_sleep+0x254>)
   82c82:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82c86:	6213      	str	r3, [r2, #32]
}
   82c88:	bf00      	nop
		cpu_irq_enable();
   82c8a:	4b1e      	ldr	r3, [pc, #120]	; (82d04 <pmc_sleep+0x25c>)
   82c8c:	2201      	movs	r2, #1
   82c8e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82c90:	f3bf 8f5f 	dmb	sy
}
   82c94:	bf00      	nop
  __ASM volatile ("cpsie i");
   82c96:	b662      	cpsie	i
}
   82c98:	bf00      	nop
		pmc_enable_waitmode();
   82c9a:	4b20      	ldr	r3, [pc, #128]	; (82d1c <pmc_sleep+0x274>)
   82c9c:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   82c9e:	b672      	cpsid	i
}
   82ca0:	bf00      	nop
  __ASM volatile ("dmb");
   82ca2:	f3bf 8f5f 	dmb	sy
}
   82ca6:	bf00      	nop
		cpu_irq_disable();
   82ca8:	4b16      	ldr	r3, [pc, #88]	; (82d04 <pmc_sleep+0x25c>)
   82caa:	2200      	movs	r2, #0
   82cac:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   82cae:	6a3d      	ldr	r5, [r7, #32]
   82cb0:	69fc      	ldr	r4, [r7, #28]
   82cb2:	69b8      	ldr	r0, [r7, #24]
   82cb4:	6979      	ldr	r1, [r7, #20]
   82cb6:	693a      	ldr	r2, [r7, #16]
   82cb8:	68fb      	ldr	r3, [r7, #12]
   82cba:	66fd      	str	r5, [r7, #108]	; 0x6c
   82cbc:	66bc      	str	r4, [r7, #104]	; 0x68
   82cbe:	6678      	str	r0, [r7, #100]	; 0x64
   82cc0:	6639      	str	r1, [r7, #96]	; 0x60
   82cc2:	65fa      	str	r2, [r7, #92]	; 0x5c
   82cc4:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   82cc6:	2300      	movs	r3, #0
   82cc8:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   82cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   82ccc:	f003 0302 	and.w	r3, r3, #2
   82cd0:	2b00      	cmp	r3, #0
   82cd2:	d029      	beq.n	82d28 <pmc_sleep+0x280>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82cd4:	4b09      	ldr	r3, [pc, #36]	; (82cfc <pmc_sleep+0x254>)
   82cd6:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82cd8:	4a11      	ldr	r2, [pc, #68]	; (82d20 <pmc_sleep+0x278>)
   82cda:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82cdc:	4907      	ldr	r1, [pc, #28]	; (82cfc <pmc_sleep+0x254>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82cde:	4b11      	ldr	r3, [pc, #68]	; (82d24 <pmc_sleep+0x27c>)
   82ce0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82ce2:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82ce4:	4b05      	ldr	r3, [pc, #20]	; (82cfc <pmc_sleep+0x254>)
   82ce6:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   82ce8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82cec:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82cf0:	4a02      	ldr	r2, [pc, #8]	; (82cfc <pmc_sleep+0x254>)
				| CKGR_MOR_KEY_PASSWD;
   82cf2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82cf6:	6213      	str	r3, [r2, #32]
   82cf8:	e053      	b.n	82da2 <pmc_sleep+0x2fa>
   82cfa:	bf00      	nop
   82cfc:	400e0400 	.word	0x400e0400
   82d00:	e000ed00 	.word	0xe000ed00
   82d04:	20000284 	.word	0x20000284
   82d08:	20001328 	.word	0x20001328
   82d0c:	400e0800 	.word	0x400e0800
   82d10:	400e0a00 	.word	0x400e0a00
   82d14:	000828ad 	.word	0x000828ad
   82d18:	000828dd 	.word	0x000828dd
   82d1c:	000829f9 	.word	0x000829f9
   82d20:	fec8fffc 	.word	0xfec8fffc
   82d24:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   82d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   82d2a:	f003 0301 	and.w	r3, r3, #1
   82d2e:	2b00      	cmp	r3, #0
   82d30:	d037      	beq.n	82da2 <pmc_sleep+0x2fa>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   82d32:	4b60      	ldr	r3, [pc, #384]	; (82eb4 <pmc_sleep+0x40c>)
   82d34:	6a1b      	ldr	r3, [r3, #32]
   82d36:	f003 0301 	and.w	r3, r3, #1
   82d3a:	2b00      	cmp	r3, #0
   82d3c:	d112      	bne.n	82d64 <pmc_sleep+0x2bc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82d3e:	4b5d      	ldr	r3, [pc, #372]	; (82eb4 <pmc_sleep+0x40c>)
   82d40:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   82d42:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82d46:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82d4a:	4a5a      	ldr	r2, [pc, #360]	; (82eb4 <pmc_sleep+0x40c>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   82d4c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82d50:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82d54:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82d56:	bf00      	nop
   82d58:	4b56      	ldr	r3, [pc, #344]	; (82eb4 <pmc_sleep+0x40c>)
   82d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82d5c:	f003 0301 	and.w	r3, r3, #1
   82d60:	2b00      	cmp	r3, #0
   82d62:	d0f9      	beq.n	82d58 <pmc_sleep+0x2b0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   82d64:	4b53      	ldr	r3, [pc, #332]	; (82eb4 <pmc_sleep+0x40c>)
   82d66:	6a1b      	ldr	r3, [r3, #32]
   82d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82d6c:	2b00      	cmp	r3, #0
   82d6e:	d10e      	bne.n	82d8e <pmc_sleep+0x2e6>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82d70:	4b50      	ldr	r3, [pc, #320]	; (82eb4 <pmc_sleep+0x40c>)
   82d72:	6a1b      	ldr	r3, [r3, #32]
   82d74:	4a4f      	ldr	r2, [pc, #316]	; (82eb4 <pmc_sleep+0x40c>)
   82d76:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82d7e:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   82d80:	bf00      	nop
   82d82:	4b4c      	ldr	r3, [pc, #304]	; (82eb4 <pmc_sleep+0x40c>)
   82d84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82d8a:	2b00      	cmp	r3, #0
   82d8c:	d0f9      	beq.n	82d82 <pmc_sleep+0x2da>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82d8e:	4b49      	ldr	r3, [pc, #292]	; (82eb4 <pmc_sleep+0x40c>)
   82d90:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   82d92:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82d96:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82d9a:	4a46      	ldr	r2, [pc, #280]	; (82eb4 <pmc_sleep+0x40c>)
					| CKGR_MOR_KEY_PASSWD;
   82d9c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   82da0:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   82da2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   82da4:	4b44      	ldr	r3, [pc, #272]	; (82eb8 <pmc_sleep+0x410>)
   82da6:	4013      	ands	r3, r2
   82da8:	2b00      	cmp	r3, #0
   82daa:	d008      	beq.n	82dbe <pmc_sleep+0x316>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   82dac:	4a41      	ldr	r2, [pc, #260]	; (82eb4 <pmc_sleep+0x40c>)
   82dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   82db0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82db4:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   82db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   82db8:	f043 0302 	orr.w	r3, r3, #2
   82dbc:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   82dbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   82dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82dc4:	2b00      	cmp	r3, #0
   82dc6:	d006      	beq.n	82dd6 <pmc_sleep+0x32e>
		PMC->CKGR_UCKR = pll1_setting;
   82dc8:	4a3a      	ldr	r2, [pc, #232]	; (82eb4 <pmc_sleep+0x40c>)
   82dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   82dcc:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   82dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   82dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82dd4:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   82dd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82dd8:	f003 0303 	and.w	r3, r3, #3
   82ddc:	2b02      	cmp	r3, #2
   82dde:	d002      	beq.n	82de6 <pmc_sleep+0x33e>
   82de0:	2b03      	cmp	r3, #3
   82de2:	d008      	beq.n	82df6 <pmc_sleep+0x34e>
   82de4:	e00f      	b.n	82e06 <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   82de6:	bf00      	nop
   82de8:	4b32      	ldr	r3, [pc, #200]	; (82eb4 <pmc_sleep+0x40c>)
   82dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82dec:	f003 0302 	and.w	r3, r3, #2
   82df0:	2b00      	cmp	r3, #0
   82df2:	d0f9      	beq.n	82de8 <pmc_sleep+0x340>
		break;
   82df4:	e007      	b.n	82e06 <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   82df6:	bf00      	nop
   82df8:	4b2e      	ldr	r3, [pc, #184]	; (82eb4 <pmc_sleep+0x40c>)
   82dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82e00:	2b00      	cmp	r3, #0
   82e02:	d0f9      	beq.n	82df8 <pmc_sleep+0x350>
		break;
   82e04:	bf00      	nop
	mckr = PMC->PMC_MCKR;
   82e06:	4b2b      	ldr	r3, [pc, #172]	; (82eb4 <pmc_sleep+0x40c>)
   82e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e0a:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   82e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   82e0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   82e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82e14:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   82e18:	4926      	ldr	r1, [pc, #152]	; (82eb4 <pmc_sleep+0x40c>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   82e1a:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   82e1c:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82e1e:	bf00      	nop
   82e20:	4b24      	ldr	r3, [pc, #144]	; (82eb4 <pmc_sleep+0x40c>)
   82e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82e24:	f003 0308 	and.w	r3, r3, #8
   82e28:	2b00      	cmp	r3, #0
   82e2a:	d0f9      	beq.n	82e20 <pmc_sleep+0x378>
	EFC0->EEFC_FMR = fmr_setting;
   82e2c:	4a23      	ldr	r2, [pc, #140]	; (82ebc <pmc_sleep+0x414>)
   82e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   82e30:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   82e32:	4a23      	ldr	r2, [pc, #140]	; (82ec0 <pmc_sleep+0x418>)
   82e34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   82e36:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   82e38:	4a1e      	ldr	r2, [pc, #120]	; (82eb4 <pmc_sleep+0x40c>)
   82e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   82e3c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   82e3e:	bf00      	nop
   82e40:	4b1c      	ldr	r3, [pc, #112]	; (82eb4 <pmc_sleep+0x40c>)
   82e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82e44:	f003 0308 	and.w	r3, r3, #8
   82e48:	2b00      	cmp	r3, #0
   82e4a:	d0f9      	beq.n	82e40 <pmc_sleep+0x398>
	while (!(PMC->PMC_SR & pll_sr));
   82e4c:	bf00      	nop
   82e4e:	4b19      	ldr	r3, [pc, #100]	; (82eb4 <pmc_sleep+0x40c>)
   82e50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   82e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   82e54:	4013      	ands	r3, r2
   82e56:	2b00      	cmp	r3, #0
   82e58:	d0f9      	beq.n	82e4e <pmc_sleep+0x3a6>
}
   82e5a:	bf00      	nop
		b_is_sleep_clock_used = false;
   82e5c:	4b19      	ldr	r3, [pc, #100]	; (82ec4 <pmc_sleep+0x41c>)
   82e5e:	2200      	movs	r2, #0
   82e60:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   82e62:	4b19      	ldr	r3, [pc, #100]	; (82ec8 <pmc_sleep+0x420>)
   82e64:	681b      	ldr	r3, [r3, #0]
   82e66:	2b00      	cmp	r3, #0
   82e68:	d005      	beq.n	82e76 <pmc_sleep+0x3ce>
			callback_clocks_restored();
   82e6a:	4b17      	ldr	r3, [pc, #92]	; (82ec8 <pmc_sleep+0x420>)
   82e6c:	681b      	ldr	r3, [r3, #0]
   82e6e:	4798      	blx	r3
			callback_clocks_restored = NULL;
   82e70:	4b15      	ldr	r3, [pc, #84]	; (82ec8 <pmc_sleep+0x420>)
   82e72:	2200      	movs	r2, #0
   82e74:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
   82e76:	4b15      	ldr	r3, [pc, #84]	; (82ecc <pmc_sleep+0x424>)
   82e78:	2201      	movs	r2, #1
   82e7a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82e7c:	f3bf 8f5f 	dmb	sy
}
   82e80:	bf00      	nop
  __ASM volatile ("cpsie i");
   82e82:	b662      	cpsie	i
}
   82e84:	bf00      	nop
		break;
   82e86:	e010      	b.n	82eaa <pmc_sleep+0x402>
		SCB->SCR |= SCR_SLEEPDEEP;
   82e88:	4b11      	ldr	r3, [pc, #68]	; (82ed0 <pmc_sleep+0x428>)
   82e8a:	691b      	ldr	r3, [r3, #16]
   82e8c:	4a10      	ldr	r2, [pc, #64]	; (82ed0 <pmc_sleep+0x428>)
   82e8e:	f043 0304 	orr.w	r3, r3, #4
   82e92:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   82e94:	4b0d      	ldr	r3, [pc, #52]	; (82ecc <pmc_sleep+0x424>)
   82e96:	2201      	movs	r2, #1
   82e98:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   82e9a:	f3bf 8f5f 	dmb	sy
}
   82e9e:	bf00      	nop
  __ASM volatile ("cpsie i");
   82ea0:	b662      	cpsie	i
}
   82ea2:	bf00      	nop
  __ASM volatile ("wfe");
   82ea4:	bf20      	wfe
}
   82ea6:	bf00      	nop
		break;
   82ea8:	bf00      	nop
}
   82eaa:	bf00      	nop
   82eac:	3770      	adds	r7, #112	; 0x70
   82eae:	46bd      	mov	sp, r7
   82eb0:	bdb0      	pop	{r4, r5, r7, pc}
   82eb2:	bf00      	nop
   82eb4:	400e0400 	.word	0x400e0400
   82eb8:	07ff0000 	.word	0x07ff0000
   82ebc:	400e0800 	.word	0x400e0800
   82ec0:	400e0a00 	.word	0x400e0a00
   82ec4:	20001328 	.word	0x20001328
   82ec8:	2000132c 	.word	0x2000132c
   82ecc:	20000284 	.word	0x20000284
   82ed0:	e000ed00 	.word	0xe000ed00

00082ed4 <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   82ed4:	b480      	push	{r7}
   82ed6:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   82ed8:	4b08      	ldr	r3, [pc, #32]	; (82efc <pmc_is_wakeup_clocks_restored+0x28>)
   82eda:	781b      	ldrb	r3, [r3, #0]
   82edc:	b2db      	uxtb	r3, r3
   82ede:	2b00      	cmp	r3, #0
   82ee0:	bf14      	ite	ne
   82ee2:	2301      	movne	r3, #1
   82ee4:	2300      	moveq	r3, #0
   82ee6:	b2db      	uxtb	r3, r3
   82ee8:	f083 0301 	eor.w	r3, r3, #1
   82eec:	b2db      	uxtb	r3, r3
   82eee:	f003 0301 	and.w	r3, r3, #1
   82ef2:	b2db      	uxtb	r3, r3
}
   82ef4:	4618      	mov	r0, r3
   82ef6:	46bd      	mov	sp, r7
   82ef8:	bc80      	pop	{r7}
   82efa:	4770      	bx	lr
   82efc:	20001328 	.word	0x20001328

00082f00 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   82f00:	b480      	push	{r7}
   82f02:	b085      	sub	sp, #20
   82f04:	af00      	add	r7, sp, #0
   82f06:	60f8      	str	r0, [r7, #12]
   82f08:	60b9      	str	r1, [r7, #8]
   82f0a:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   82f0c:	68f9      	ldr	r1, [r7, #12]
   82f0e:	68ba      	ldr	r2, [r7, #8]
   82f10:	4613      	mov	r3, r2
   82f12:	009b      	lsls	r3, r3, #2
   82f14:	4413      	add	r3, r2
   82f16:	009b      	lsls	r3, r3, #2
   82f18:	440b      	add	r3, r1
   82f1a:	3370      	adds	r3, #112	; 0x70
   82f1c:	687a      	ldr	r2, [r7, #4]
   82f1e:	601a      	str	r2, [r3, #0]
}
   82f20:	bf00      	nop
   82f22:	3714      	adds	r7, #20
   82f24:	46bd      	mov	sp, r7
   82f26:	bc80      	pop	{r7}
   82f28:	4770      	bx	lr

00082f2a <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   82f2a:	b480      	push	{r7}
   82f2c:	b085      	sub	sp, #20
   82f2e:	af00      	add	r7, sp, #0
   82f30:	60f8      	str	r0, [r7, #12]
   82f32:	60b9      	str	r1, [r7, #8]
   82f34:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   82f36:	68f9      	ldr	r1, [r7, #12]
   82f38:	68ba      	ldr	r2, [r7, #8]
   82f3a:	4613      	mov	r3, r2
   82f3c:	009b      	lsls	r3, r3, #2
   82f3e:	4413      	add	r3, r2
   82f40:	009b      	lsls	r3, r3, #2
   82f42:	440b      	add	r3, r1
   82f44:	3374      	adds	r3, #116	; 0x74
   82f46:	687a      	ldr	r2, [r7, #4]
   82f48:	601a      	str	r2, [r3, #0]
}
   82f4a:	bf00      	nop
   82f4c:	3714      	adds	r7, #20
   82f4e:	46bd      	mov	sp, r7
   82f50:	bc80      	pop	{r7}
   82f52:	4770      	bx	lr

00082f54 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   82f54:	b480      	push	{r7}
   82f56:	b085      	sub	sp, #20
   82f58:	af00      	add	r7, sp, #0
   82f5a:	60f8      	str	r0, [r7, #12]
   82f5c:	60b9      	str	r1, [r7, #8]
   82f5e:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   82f60:	68f9      	ldr	r1, [r7, #12]
   82f62:	68ba      	ldr	r2, [r7, #8]
   82f64:	4613      	mov	r3, r2
   82f66:	009b      	lsls	r3, r3, #2
   82f68:	4413      	add	r3, r2
   82f6a:	009b      	lsls	r3, r3, #2
   82f6c:	440b      	add	r3, r1
   82f6e:	3378      	adds	r3, #120	; 0x78
   82f70:	687a      	ldr	r2, [r7, #4]
   82f72:	601a      	str	r2, [r3, #0]
}
   82f74:	bf00      	nop
   82f76:	3714      	adds	r7, #20
   82f78:	46bd      	mov	sp, r7
   82f7a:	bc80      	pop	{r7}
   82f7c:	4770      	bx	lr

00082f7e <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   82f7e:	b480      	push	{r7}
   82f80:	b085      	sub	sp, #20
   82f82:	af00      	add	r7, sp, #0
   82f84:	60f8      	str	r0, [r7, #12]
   82f86:	60b9      	str	r1, [r7, #8]
   82f88:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   82f8a:	68f9      	ldr	r1, [r7, #12]
   82f8c:	68ba      	ldr	r2, [r7, #8]
   82f8e:	4613      	mov	r3, r2
   82f90:	009b      	lsls	r3, r3, #2
   82f92:	4413      	add	r3, r2
   82f94:	009b      	lsls	r3, r3, #2
   82f96:	440b      	add	r3, r1
   82f98:	3380      	adds	r3, #128	; 0x80
   82f9a:	687a      	ldr	r2, [r7, #4]
   82f9c:	601a      	str	r2, [r3, #0]
}
   82f9e:	bf00      	nop
   82fa0:	3714      	adds	r7, #20
   82fa2:	46bd      	mov	sp, r7
   82fa4:	bc80      	pop	{r7}
   82fa6:	4770      	bx	lr

00082fa8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82fa8:	b580      	push	{r7, lr}
   82faa:	b082      	sub	sp, #8
   82fac:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   82fae:	4b1e      	ldr	r3, [pc, #120]	; (83028 <Reset_Handler+0x80>)
   82fb0:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   82fb2:	4b1e      	ldr	r3, [pc, #120]	; (8302c <Reset_Handler+0x84>)
   82fb4:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   82fb6:	687a      	ldr	r2, [r7, #4]
   82fb8:	683b      	ldr	r3, [r7, #0]
   82fba:	429a      	cmp	r2, r3
   82fbc:	d00c      	beq.n	82fd8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   82fbe:	e007      	b.n	82fd0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   82fc0:	687a      	ldr	r2, [r7, #4]
   82fc2:	1d13      	adds	r3, r2, #4
   82fc4:	607b      	str	r3, [r7, #4]
   82fc6:	683b      	ldr	r3, [r7, #0]
   82fc8:	1d19      	adds	r1, r3, #4
   82fca:	6039      	str	r1, [r7, #0]
   82fcc:	6812      	ldr	r2, [r2, #0]
   82fce:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   82fd0:	683b      	ldr	r3, [r7, #0]
   82fd2:	4a17      	ldr	r2, [pc, #92]	; (83030 <Reset_Handler+0x88>)
   82fd4:	4293      	cmp	r3, r2
   82fd6:	d3f3      	bcc.n	82fc0 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82fd8:	4b16      	ldr	r3, [pc, #88]	; (83034 <Reset_Handler+0x8c>)
   82fda:	603b      	str	r3, [r7, #0]
   82fdc:	e004      	b.n	82fe8 <Reset_Handler+0x40>
		*pDest++ = 0;
   82fde:	683b      	ldr	r3, [r7, #0]
   82fe0:	1d1a      	adds	r2, r3, #4
   82fe2:	603a      	str	r2, [r7, #0]
   82fe4:	2200      	movs	r2, #0
   82fe6:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   82fe8:	683b      	ldr	r3, [r7, #0]
   82fea:	4a13      	ldr	r2, [pc, #76]	; (83038 <Reset_Handler+0x90>)
   82fec:	4293      	cmp	r3, r2
   82fee:	d3f6      	bcc.n	82fde <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   82ff0:	4b12      	ldr	r3, [pc, #72]	; (8303c <Reset_Handler+0x94>)
   82ff2:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82ff4:	687b      	ldr	r3, [r7, #4]
   82ff6:	4a12      	ldr	r2, [pc, #72]	; (83040 <Reset_Handler+0x98>)
   82ff8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82ffc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83000:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   83002:	687b      	ldr	r3, [r7, #4]
   83004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83008:	d309      	bcc.n	8301e <Reset_Handler+0x76>
   8300a:	687b      	ldr	r3, [r7, #4]
   8300c:	4a0d      	ldr	r2, [pc, #52]	; (83044 <Reset_Handler+0x9c>)
   8300e:	4293      	cmp	r3, r2
   83010:	d205      	bcs.n	8301e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83012:	4b0b      	ldr	r3, [pc, #44]	; (83040 <Reset_Handler+0x98>)
   83014:	689b      	ldr	r3, [r3, #8]
   83016:	4a0a      	ldr	r2, [pc, #40]	; (83040 <Reset_Handler+0x98>)
   83018:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8301c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8301e:	4b0a      	ldr	r3, [pc, #40]	; (83048 <Reset_Handler+0xa0>)
   83020:	4798      	blx	r3

	/* Branch to main function */
	main();
   83022:	4b0a      	ldr	r3, [pc, #40]	; (8304c <Reset_Handler+0xa4>)
   83024:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83026:	e7fe      	b.n	83026 <Reset_Handler+0x7e>
   83028:	0008d83c 	.word	0x0008d83c
   8302c:	20000000 	.word	0x20000000
   83030:	20000df0 	.word	0x20000df0
   83034:	20000df0 	.word	0x20000df0
   83038:	20001870 	.word	0x20001870
   8303c:	00080000 	.word	0x00080000
   83040:	e000ed00 	.word	0xe000ed00
   83044:	20004000 	.word	0x20004000
   83048:	000869a9 	.word	0x000869a9
   8304c:	00080981 	.word	0x00080981

00083050 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   83050:	b480      	push	{r7}
   83052:	b085      	sub	sp, #20
   83054:	af00      	add	r7, sp, #0
   83056:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   83058:	4b10      	ldr	r3, [pc, #64]	; (8309c <_sbrk+0x4c>)
   8305a:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   8305c:	4b10      	ldr	r3, [pc, #64]	; (830a0 <_sbrk+0x50>)
   8305e:	681b      	ldr	r3, [r3, #0]
   83060:	2b00      	cmp	r3, #0
   83062:	d102      	bne.n	8306a <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   83064:	4b0e      	ldr	r3, [pc, #56]	; (830a0 <_sbrk+0x50>)
   83066:	4a0f      	ldr	r2, [pc, #60]	; (830a4 <_sbrk+0x54>)
   83068:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8306a:	4b0d      	ldr	r3, [pc, #52]	; (830a0 <_sbrk+0x50>)
   8306c:	681b      	ldr	r3, [r3, #0]
   8306e:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   83070:	68ba      	ldr	r2, [r7, #8]
   83072:	687b      	ldr	r3, [r7, #4]
   83074:	4413      	add	r3, r2
   83076:	68fa      	ldr	r2, [r7, #12]
   83078:	429a      	cmp	r2, r3
   8307a:	da02      	bge.n	83082 <_sbrk+0x32>
		return (caddr_t) -1;	
   8307c:	f04f 33ff 	mov.w	r3, #4294967295
   83080:	e006      	b.n	83090 <_sbrk+0x40>
	}

	heap += incr;
   83082:	4b07      	ldr	r3, [pc, #28]	; (830a0 <_sbrk+0x50>)
   83084:	681a      	ldr	r2, [r3, #0]
   83086:	687b      	ldr	r3, [r7, #4]
   83088:	4413      	add	r3, r2
   8308a:	4a05      	ldr	r2, [pc, #20]	; (830a0 <_sbrk+0x50>)
   8308c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8308e:	68bb      	ldr	r3, [r7, #8]
}
   83090:	4618      	mov	r0, r3
   83092:	3714      	adds	r7, #20
   83094:	46bd      	mov	sp, r7
   83096:	bc80      	pop	{r7}
   83098:	4770      	bx	lr
   8309a:	bf00      	nop
   8309c:	20083ffc 	.word	0x20083ffc
   830a0:	20001330 	.word	0x20001330
   830a4:	20084000 	.word	0x20084000

000830a8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   830a8:	b480      	push	{r7}
   830aa:	b083      	sub	sp, #12
   830ac:	af00      	add	r7, sp, #0
   830ae:	6078      	str	r0, [r7, #4]
	return -1;
   830b0:	f04f 33ff 	mov.w	r3, #4294967295
}
   830b4:	4618      	mov	r0, r3
   830b6:	370c      	adds	r7, #12
   830b8:	46bd      	mov	sp, r7
   830ba:	bc80      	pop	{r7}
   830bc:	4770      	bx	lr

000830be <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   830be:	b480      	push	{r7}
   830c0:	b083      	sub	sp, #12
   830c2:	af00      	add	r7, sp, #0
   830c4:	6078      	str	r0, [r7, #4]
   830c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   830c8:	683b      	ldr	r3, [r7, #0]
   830ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   830ce:	605a      	str	r2, [r3, #4]

	return 0;
   830d0:	2300      	movs	r3, #0
}
   830d2:	4618      	mov	r0, r3
   830d4:	370c      	adds	r7, #12
   830d6:	46bd      	mov	sp, r7
   830d8:	bc80      	pop	{r7}
   830da:	4770      	bx	lr

000830dc <_isatty>:

extern int _isatty(int file)
{
   830dc:	b480      	push	{r7}
   830de:	b083      	sub	sp, #12
   830e0:	af00      	add	r7, sp, #0
   830e2:	6078      	str	r0, [r7, #4]
	return 1;
   830e4:	2301      	movs	r3, #1
}
   830e6:	4618      	mov	r0, r3
   830e8:	370c      	adds	r7, #12
   830ea:	46bd      	mov	sp, r7
   830ec:	bc80      	pop	{r7}
   830ee:	4770      	bx	lr

000830f0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   830f0:	b480      	push	{r7}
   830f2:	b085      	sub	sp, #20
   830f4:	af00      	add	r7, sp, #0
   830f6:	60f8      	str	r0, [r7, #12]
   830f8:	60b9      	str	r1, [r7, #8]
   830fa:	607a      	str	r2, [r7, #4]
	return 0;
   830fc:	2300      	movs	r3, #0
}
   830fe:	4618      	mov	r0, r3
   83100:	3714      	adds	r7, #20
   83102:	46bd      	mov	sp, r7
   83104:	bc80      	pop	{r7}
   83106:	4770      	bx	lr

00083108 <_exit>:

extern void _exit(int status)
{
   83108:	b580      	push	{r7, lr}
   8310a:	b082      	sub	sp, #8
   8310c:	af00      	add	r7, sp, #0
   8310e:	6078      	str	r0, [r7, #4]
	printf("Exiting with status %d.\n", status);
   83110:	6879      	ldr	r1, [r7, #4]
   83112:	4802      	ldr	r0, [pc, #8]	; (8311c <_exit+0x14>)
   83114:	4b02      	ldr	r3, [pc, #8]	; (83120 <_exit+0x18>)
   83116:	4798      	blx	r3

	for (;;);
   83118:	e7fe      	b.n	83118 <_exit+0x10>
   8311a:	bf00      	nop
   8311c:	0008d3a0 	.word	0x0008d3a0
   83120:	000869f1 	.word	0x000869f1

00083124 <_kill>:
}

extern void _kill(int pid, int sig)
{
   83124:	b480      	push	{r7}
   83126:	b083      	sub	sp, #12
   83128:	af00      	add	r7, sp, #0
   8312a:	6078      	str	r0, [r7, #4]
   8312c:	6039      	str	r1, [r7, #0]
	return;
   8312e:	bf00      	nop
}
   83130:	370c      	adds	r7, #12
   83132:	46bd      	mov	sp, r7
   83134:	bc80      	pop	{r7}
   83136:	4770      	bx	lr

00083138 <_getpid>:

extern int _getpid(void)
{
   83138:	b480      	push	{r7}
   8313a:	af00      	add	r7, sp, #0
	return -1;
   8313c:	f04f 33ff 	mov.w	r3, #4294967295
}
   83140:	4618      	mov	r0, r3
   83142:	46bd      	mov	sp, r7
   83144:	bc80      	pop	{r7}
   83146:	4770      	bx	lr

00083148 <osc_enable>:
{
   83148:	b580      	push	{r7, lr}
   8314a:	b082      	sub	sp, #8
   8314c:	af00      	add	r7, sp, #0
   8314e:	6078      	str	r0, [r7, #4]
   83150:	687b      	ldr	r3, [r7, #4]
   83152:	2b07      	cmp	r3, #7
   83154:	d82e      	bhi.n	831b4 <osc_enable+0x6c>
   83156:	a201      	add	r2, pc, #4	; (adr r2, 8315c <osc_enable+0x14>)
   83158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8315c:	000831b3 	.word	0x000831b3
   83160:	0008317d 	.word	0x0008317d
   83164:	00083185 	.word	0x00083185
   83168:	0008318d 	.word	0x0008318d
   8316c:	00083195 	.word	0x00083195
   83170:	0008319d 	.word	0x0008319d
   83174:	000831a5 	.word	0x000831a5
   83178:	000831ad 	.word	0x000831ad
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8317c:	2000      	movs	r0, #0
   8317e:	4b0f      	ldr	r3, [pc, #60]	; (831bc <osc_enable+0x74>)
   83180:	4798      	blx	r3
		break;
   83182:	e017      	b.n	831b4 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   83184:	2001      	movs	r0, #1
   83186:	4b0d      	ldr	r3, [pc, #52]	; (831bc <osc_enable+0x74>)
   83188:	4798      	blx	r3
		break;
   8318a:	e013      	b.n	831b4 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8318c:	2000      	movs	r0, #0
   8318e:	4b0c      	ldr	r3, [pc, #48]	; (831c0 <osc_enable+0x78>)
   83190:	4798      	blx	r3
		break;
   83192:	e00f      	b.n	831b4 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   83194:	2010      	movs	r0, #16
   83196:	4b0a      	ldr	r3, [pc, #40]	; (831c0 <osc_enable+0x78>)
   83198:	4798      	blx	r3
		break;
   8319a:	e00b      	b.n	831b4 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8319c:	2020      	movs	r0, #32
   8319e:	4b08      	ldr	r3, [pc, #32]	; (831c0 <osc_enable+0x78>)
   831a0:	4798      	blx	r3
		break;
   831a2:	e007      	b.n	831b4 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   831a4:	203e      	movs	r0, #62	; 0x3e
   831a6:	4b07      	ldr	r3, [pc, #28]	; (831c4 <osc_enable+0x7c>)
   831a8:	4798      	blx	r3
		break;
   831aa:	e003      	b.n	831b4 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   831ac:	4b06      	ldr	r3, [pc, #24]	; (831c8 <osc_enable+0x80>)
   831ae:	4798      	blx	r3
		break;
   831b0:	e000      	b.n	831b4 <osc_enable+0x6c>
		break;
   831b2:	bf00      	nop
}
   831b4:	bf00      	nop
   831b6:	3708      	adds	r7, #8
   831b8:	46bd      	mov	sp, r7
   831ba:	bd80      	pop	{r7, pc}
   831bc:	000826c1 	.word	0x000826c1
   831c0:	0008272d 	.word	0x0008272d
   831c4:	000827a1 	.word	0x000827a1
   831c8:	000827f1 	.word	0x000827f1

000831cc <osc_is_ready>:
{
   831cc:	b580      	push	{r7, lr}
   831ce:	b082      	sub	sp, #8
   831d0:	af00      	add	r7, sp, #0
   831d2:	6078      	str	r0, [r7, #4]
   831d4:	687b      	ldr	r3, [r7, #4]
   831d6:	2b07      	cmp	r3, #7
   831d8:	d82f      	bhi.n	8323a <osc_is_ready+0x6e>
   831da:	a201      	add	r2, pc, #4	; (adr r2, 831e0 <osc_is_ready+0x14>)
   831dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   831e0:	00083201 	.word	0x00083201
   831e4:	00083205 	.word	0x00083205
   831e8:	00083205 	.word	0x00083205
   831ec:	00083217 	.word	0x00083217
   831f0:	00083217 	.word	0x00083217
   831f4:	00083217 	.word	0x00083217
   831f8:	00083229 	.word	0x00083229
   831fc:	00083229 	.word	0x00083229
		return 1;
   83200:	2301      	movs	r3, #1
   83202:	e01b      	b.n	8323c <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   83204:	4b0f      	ldr	r3, [pc, #60]	; (83244 <osc_is_ready+0x78>)
   83206:	4798      	blx	r3
   83208:	4603      	mov	r3, r0
   8320a:	2b00      	cmp	r3, #0
   8320c:	bf14      	ite	ne
   8320e:	2301      	movne	r3, #1
   83210:	2300      	moveq	r3, #0
   83212:	b2db      	uxtb	r3, r3
   83214:	e012      	b.n	8323c <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   83216:	4b0c      	ldr	r3, [pc, #48]	; (83248 <osc_is_ready+0x7c>)
   83218:	4798      	blx	r3
   8321a:	4603      	mov	r3, r0
   8321c:	2b00      	cmp	r3, #0
   8321e:	bf14      	ite	ne
   83220:	2301      	movne	r3, #1
   83222:	2300      	moveq	r3, #0
   83224:	b2db      	uxtb	r3, r3
   83226:	e009      	b.n	8323c <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   83228:	4b08      	ldr	r3, [pc, #32]	; (8324c <osc_is_ready+0x80>)
   8322a:	4798      	blx	r3
   8322c:	4603      	mov	r3, r0
   8322e:	2b00      	cmp	r3, #0
   83230:	bf14      	ite	ne
   83232:	2301      	movne	r3, #1
   83234:	2300      	moveq	r3, #0
   83236:	b2db      	uxtb	r3, r3
   83238:	e000      	b.n	8323c <osc_is_ready+0x70>
	return 0;
   8323a:	2300      	movs	r3, #0
}
   8323c:	4618      	mov	r0, r3
   8323e:	3708      	adds	r7, #8
   83240:	46bd      	mov	sp, r7
   83242:	bd80      	pop	{r7, pc}
   83244:	000826f9 	.word	0x000826f9
   83248:	00082789 	.word	0x00082789
   8324c:	0008283d 	.word	0x0008283d

00083250 <osc_get_rate>:
{
   83250:	b480      	push	{r7}
   83252:	b083      	sub	sp, #12
   83254:	af00      	add	r7, sp, #0
   83256:	6078      	str	r0, [r7, #4]
   83258:	687b      	ldr	r3, [r7, #4]
   8325a:	2b07      	cmp	r3, #7
   8325c:	d823      	bhi.n	832a6 <osc_get_rate+0x56>
   8325e:	a201      	add	r2, pc, #4	; (adr r2, 83264 <osc_get_rate+0x14>)
   83260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83264:	00083285 	.word	0x00083285
   83268:	0008328b 	.word	0x0008328b
   8326c:	0008328f 	.word	0x0008328f
   83270:	00083293 	.word	0x00083293
   83274:	00083297 	.word	0x00083297
   83278:	0008329b 	.word	0x0008329b
   8327c:	0008329f 	.word	0x0008329f
   83280:	000832a3 	.word	0x000832a3
		return OSC_SLCK_32K_RC_HZ;
   83284:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83288:	e00e      	b.n	832a8 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   8328a:	2300      	movs	r3, #0
   8328c:	e00c      	b.n	832a8 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   8328e:	2300      	movs	r3, #0
   83290:	e00a      	b.n	832a8 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   83292:	4b08      	ldr	r3, [pc, #32]	; (832b4 <osc_get_rate+0x64>)
   83294:	e008      	b.n	832a8 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   83296:	4b08      	ldr	r3, [pc, #32]	; (832b8 <osc_get_rate+0x68>)
   83298:	e006      	b.n	832a8 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   8329a:	4b08      	ldr	r3, [pc, #32]	; (832bc <osc_get_rate+0x6c>)
   8329c:	e004      	b.n	832a8 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   8329e:	4b07      	ldr	r3, [pc, #28]	; (832bc <osc_get_rate+0x6c>)
   832a0:	e002      	b.n	832a8 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   832a2:	4b06      	ldr	r3, [pc, #24]	; (832bc <osc_get_rate+0x6c>)
   832a4:	e000      	b.n	832a8 <osc_get_rate+0x58>
	return 0;
   832a6:	2300      	movs	r3, #0
}
   832a8:	4618      	mov	r0, r3
   832aa:	370c      	adds	r7, #12
   832ac:	46bd      	mov	sp, r7
   832ae:	bc80      	pop	{r7}
   832b0:	4770      	bx	lr
   832b2:	bf00      	nop
   832b4:	003d0900 	.word	0x003d0900
   832b8:	007a1200 	.word	0x007a1200
   832bc:	00b71b00 	.word	0x00b71b00

000832c0 <osc_wait_ready>:
{
   832c0:	b580      	push	{r7, lr}
   832c2:	b082      	sub	sp, #8
   832c4:	af00      	add	r7, sp, #0
   832c6:	4603      	mov	r3, r0
   832c8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   832ca:	bf00      	nop
   832cc:	79fb      	ldrb	r3, [r7, #7]
   832ce:	4618      	mov	r0, r3
   832d0:	4b06      	ldr	r3, [pc, #24]	; (832ec <osc_wait_ready+0x2c>)
   832d2:	4798      	blx	r3
   832d4:	4603      	mov	r3, r0
   832d6:	f083 0301 	eor.w	r3, r3, #1
   832da:	b2db      	uxtb	r3, r3
   832dc:	2b00      	cmp	r3, #0
   832de:	d1f5      	bne.n	832cc <osc_wait_ready+0xc>
}
   832e0:	bf00      	nop
   832e2:	bf00      	nop
   832e4:	3708      	adds	r7, #8
   832e6:	46bd      	mov	sp, r7
   832e8:	bd80      	pop	{r7, pc}
   832ea:	bf00      	nop
   832ec:	000831cd 	.word	0x000831cd

000832f0 <pll_config_init>:
{
   832f0:	b580      	push	{r7, lr}
   832f2:	b086      	sub	sp, #24
   832f4:	af00      	add	r7, sp, #0
   832f6:	60f8      	str	r0, [r7, #12]
   832f8:	607a      	str	r2, [r7, #4]
   832fa:	603b      	str	r3, [r7, #0]
   832fc:	460b      	mov	r3, r1
   832fe:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   83300:	687b      	ldr	r3, [r7, #4]
   83302:	2b00      	cmp	r3, #0
   83304:	d107      	bne.n	83316 <pll_config_init+0x26>
   83306:	683b      	ldr	r3, [r7, #0]
   83308:	2b00      	cmp	r3, #0
   8330a:	d104      	bne.n	83316 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   8330c:	68fb      	ldr	r3, [r7, #12]
   8330e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   83312:	601a      	str	r2, [r3, #0]
   83314:	e01a      	b.n	8334c <pll_config_init+0x5c>
		vco_hz = osc_get_rate(e_src) / ul_div;
   83316:	7afb      	ldrb	r3, [r7, #11]
   83318:	4618      	mov	r0, r3
   8331a:	4b0e      	ldr	r3, [pc, #56]	; (83354 <pll_config_init+0x64>)
   8331c:	4798      	blx	r3
   8331e:	4602      	mov	r2, r0
   83320:	687b      	ldr	r3, [r7, #4]
   83322:	fbb2 f3f3 	udiv	r3, r2, r3
   83326:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   83328:	697b      	ldr	r3, [r7, #20]
   8332a:	683a      	ldr	r2, [r7, #0]
   8332c:	fb02 f303 	mul.w	r3, r2, r3
   83330:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83332:	683b      	ldr	r3, [r7, #0]
   83334:	3b01      	subs	r3, #1
   83336:	041a      	lsls	r2, r3, #16
   83338:	4b07      	ldr	r3, [pc, #28]	; (83358 <pll_config_init+0x68>)
   8333a:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   8333c:	687a      	ldr	r2, [r7, #4]
   8333e:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83340:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   83342:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   83346:	68fb      	ldr	r3, [r7, #12]
   83348:	601a      	str	r2, [r3, #0]
}
   8334a:	bf00      	nop
   8334c:	bf00      	nop
   8334e:	3718      	adds	r7, #24
   83350:	46bd      	mov	sp, r7
   83352:	bd80      	pop	{r7, pc}
   83354:	00083251 	.word	0x00083251
   83358:	07ff0000 	.word	0x07ff0000

0008335c <pll_enable>:
{
   8335c:	b580      	push	{r7, lr}
   8335e:	b082      	sub	sp, #8
   83360:	af00      	add	r7, sp, #0
   83362:	6078      	str	r0, [r7, #4]
   83364:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   83366:	683b      	ldr	r3, [r7, #0]
   83368:	2b00      	cmp	r3, #0
   8336a:	d108      	bne.n	8337e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8336c:	4b09      	ldr	r3, [pc, #36]	; (83394 <pll_enable+0x38>)
   8336e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83370:	687b      	ldr	r3, [r7, #4]
   83372:	681b      	ldr	r3, [r3, #0]
   83374:	4a08      	ldr	r2, [pc, #32]	; (83398 <pll_enable+0x3c>)
   83376:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8337a:	6293      	str	r3, [r2, #40]	; 0x28
}
   8337c:	e005      	b.n	8338a <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8337e:	687b      	ldr	r3, [r7, #4]
   83380:	681b      	ldr	r3, [r3, #0]
   83382:	4a05      	ldr	r2, [pc, #20]	; (83398 <pll_enable+0x3c>)
   83384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83388:	61d3      	str	r3, [r2, #28]
}
   8338a:	bf00      	nop
   8338c:	3708      	adds	r7, #8
   8338e:	46bd      	mov	sp, r7
   83390:	bd80      	pop	{r7, pc}
   83392:	bf00      	nop
   83394:	000828ad 	.word	0x000828ad
   83398:	400e0400 	.word	0x400e0400

0008339c <pll_is_locked>:
{
   8339c:	b580      	push	{r7, lr}
   8339e:	b082      	sub	sp, #8
   833a0:	af00      	add	r7, sp, #0
   833a2:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   833a4:	687b      	ldr	r3, [r7, #4]
   833a6:	2b00      	cmp	r3, #0
   833a8:	d103      	bne.n	833b2 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   833aa:	4b05      	ldr	r3, [pc, #20]	; (833c0 <pll_is_locked+0x24>)
   833ac:	4798      	blx	r3
   833ae:	4603      	mov	r3, r0
   833b0:	e002      	b.n	833b8 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   833b2:	4b04      	ldr	r3, [pc, #16]	; (833c4 <pll_is_locked+0x28>)
   833b4:	4798      	blx	r3
   833b6:	4603      	mov	r3, r0
}
   833b8:	4618      	mov	r0, r3
   833ba:	3708      	adds	r7, #8
   833bc:	46bd      	mov	sp, r7
   833be:	bd80      	pop	{r7, pc}
   833c0:	000828c5 	.word	0x000828c5
   833c4:	000828f9 	.word	0x000828f9

000833c8 <pll_enable_source>:
{
   833c8:	b580      	push	{r7, lr}
   833ca:	b082      	sub	sp, #8
   833cc:	af00      	add	r7, sp, #0
   833ce:	4603      	mov	r3, r0
   833d0:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   833d2:	79fb      	ldrb	r3, [r7, #7]
   833d4:	3b03      	subs	r3, #3
   833d6:	2b04      	cmp	r3, #4
   833d8:	d808      	bhi.n	833ec <pll_enable_source+0x24>
		osc_enable(e_src);
   833da:	79fb      	ldrb	r3, [r7, #7]
   833dc:	4618      	mov	r0, r3
   833de:	4b06      	ldr	r3, [pc, #24]	; (833f8 <pll_enable_source+0x30>)
   833e0:	4798      	blx	r3
		osc_wait_ready(e_src);
   833e2:	79fb      	ldrb	r3, [r7, #7]
   833e4:	4618      	mov	r0, r3
   833e6:	4b05      	ldr	r3, [pc, #20]	; (833fc <pll_enable_source+0x34>)
   833e8:	4798      	blx	r3
		break;
   833ea:	e000      	b.n	833ee <pll_enable_source+0x26>
		break;
   833ec:	bf00      	nop
}
   833ee:	bf00      	nop
   833f0:	3708      	adds	r7, #8
   833f2:	46bd      	mov	sp, r7
   833f4:	bd80      	pop	{r7, pc}
   833f6:	bf00      	nop
   833f8:	00083149 	.word	0x00083149
   833fc:	000832c1 	.word	0x000832c1

00083400 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   83400:	b580      	push	{r7, lr}
   83402:	b082      	sub	sp, #8
   83404:	af00      	add	r7, sp, #0
   83406:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83408:	bf00      	nop
   8340a:	6878      	ldr	r0, [r7, #4]
   8340c:	4b04      	ldr	r3, [pc, #16]	; (83420 <pll_wait_for_lock+0x20>)
   8340e:	4798      	blx	r3
   83410:	4603      	mov	r3, r0
   83412:	2b00      	cmp	r3, #0
   83414:	d0f9      	beq.n	8340a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   83416:	2300      	movs	r3, #0
}
   83418:	4618      	mov	r0, r3
   8341a:	3708      	adds	r7, #8
   8341c:	46bd      	mov	sp, r7
   8341e:	bd80      	pop	{r7, pc}
   83420:	0008339d 	.word	0x0008339d

00083424 <sysclk_get_main_hz>:
{
   83424:	b580      	push	{r7, lr}
   83426:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   83428:	2006      	movs	r0, #6
   8342a:	4b03      	ldr	r3, [pc, #12]	; (83438 <sysclk_get_main_hz+0x14>)
   8342c:	4798      	blx	r3
   8342e:	4603      	mov	r3, r0
   83430:	011b      	lsls	r3, r3, #4
}
   83432:	4618      	mov	r0, r3
   83434:	bd80      	pop	{r7, pc}
   83436:	bf00      	nop
   83438:	00083251 	.word	0x00083251

0008343c <sysclk_get_cpu_hz>:
{
   8343c:	b580      	push	{r7, lr}
   8343e:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   83440:	4b02      	ldr	r3, [pc, #8]	; (8344c <sysclk_get_cpu_hz+0x10>)
   83442:	4798      	blx	r3
   83444:	4603      	mov	r3, r0
   83446:	085b      	lsrs	r3, r3, #1
}
   83448:	4618      	mov	r0, r3
   8344a:	bd80      	pop	{r7, pc}
   8344c:	00083425 	.word	0x00083425

00083450 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   83450:	b590      	push	{r4, r7, lr}
   83452:	b083      	sub	sp, #12
   83454:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   83456:	2006      	movs	r0, #6
   83458:	4b09      	ldr	r3, [pc, #36]	; (83480 <sysclk_enable_usb+0x30>)
   8345a:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   8345c:	1d38      	adds	r0, r7, #4
   8345e:	2300      	movs	r3, #0
   83460:	2200      	movs	r2, #0
   83462:	2106      	movs	r1, #6
   83464:	4c07      	ldr	r4, [pc, #28]	; (83484 <sysclk_enable_usb+0x34>)
   83466:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   83468:	1d3b      	adds	r3, r7, #4
   8346a:	2101      	movs	r1, #1
   8346c:	4618      	mov	r0, r3
   8346e:	4b06      	ldr	r3, [pc, #24]	; (83488 <sysclk_enable_usb+0x38>)
   83470:	4798      	blx	r3
	pll_wait_for_lock(1);
   83472:	2001      	movs	r0, #1
   83474:	4b05      	ldr	r3, [pc, #20]	; (8348c <sysclk_enable_usb+0x3c>)
   83476:	4798      	blx	r3
}
   83478:	bf00      	nop
   8347a:	370c      	adds	r7, #12
   8347c:	46bd      	mov	sp, r7
   8347e:	bd90      	pop	{r4, r7, pc}
   83480:	000833c9 	.word	0x000833c9
   83484:	000832f1 	.word	0x000832f1
   83488:	0008335d 	.word	0x0008335d
   8348c:	00083401 	.word	0x00083401

00083490 <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   83490:	b590      	push	{r4, r7, lr}
   83492:	b083      	sub	sp, #12
   83494:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83496:	4816      	ldr	r0, [pc, #88]	; (834f0 <sysclk_init+0x60>)
   83498:	4b16      	ldr	r3, [pc, #88]	; (834f4 <sysclk_init+0x64>)
   8349a:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8349c:	2006      	movs	r0, #6
   8349e:	4b16      	ldr	r3, [pc, #88]	; (834f8 <sysclk_init+0x68>)
   834a0:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   834a2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   834a6:	4b15      	ldr	r3, [pc, #84]	; (834fc <sysclk_init+0x6c>)
   834a8:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   834aa:	bf00      	nop
   834ac:	4b14      	ldr	r3, [pc, #80]	; (83500 <sysclk_init+0x70>)
   834ae:	4798      	blx	r3
   834b0:	4603      	mov	r3, r0
   834b2:	2b00      	cmp	r3, #0
   834b4:	d0fa      	beq.n	834ac <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   834b6:	1d38      	adds	r0, r7, #4
   834b8:	2310      	movs	r3, #16
   834ba:	2201      	movs	r2, #1
   834bc:	2106      	movs	r1, #6
   834be:	4c11      	ldr	r4, [pc, #68]	; (83504 <sysclk_init+0x74>)
   834c0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   834c2:	1d3b      	adds	r3, r7, #4
   834c4:	2100      	movs	r1, #0
   834c6:	4618      	mov	r0, r3
   834c8:	4b0f      	ldr	r3, [pc, #60]	; (83508 <sysclk_init+0x78>)
   834ca:	4798      	blx	r3
		pll_wait_for_lock(0);
   834cc:	2000      	movs	r0, #0
   834ce:	4b0f      	ldr	r3, [pc, #60]	; (8350c <sysclk_init+0x7c>)
   834d0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   834d2:	2010      	movs	r0, #16
   834d4:	4b0e      	ldr	r3, [pc, #56]	; (83510 <sysclk_init+0x80>)
   834d6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   834d8:	4b0e      	ldr	r3, [pc, #56]	; (83514 <sysclk_init+0x84>)
   834da:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   834dc:	4b0e      	ldr	r3, [pc, #56]	; (83518 <sysclk_init+0x88>)
   834de:	4798      	blx	r3
   834e0:	4603      	mov	r3, r0
   834e2:	4618      	mov	r0, r3
   834e4:	4b03      	ldr	r3, [pc, #12]	; (834f4 <sysclk_init+0x64>)
   834e6:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   834e8:	bf00      	nop
   834ea:	370c      	adds	r7, #12
   834ec:	46bd      	mov	sp, r7
   834ee:	bd90      	pop	{r4, r7, pc}
   834f0:	05b8d800 	.word	0x05b8d800
   834f4:	200001bd 	.word	0x200001bd
   834f8:	000833c9 	.word	0x000833c9
   834fc:	0008286d 	.word	0x0008286d
   83500:	00082855 	.word	0x00082855
   83504:	000832f1 	.word	0x000832f1
   83508:	0008335d 	.word	0x0008335d
   8350c:	00083401 	.word	0x00083401
   83510:	00082641 	.word	0x00082641
   83514:	0008351d 	.word	0x0008351d
   83518:	0008343d 	.word	0x0008343d

0008351c <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   8351c:	b480      	push	{r7}
   8351e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83520:	4b58      	ldr	r3, [pc, #352]	; (83684 <SystemCoreClockUpdate+0x168>)
   83522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83524:	f003 0303 	and.w	r3, r3, #3
   83528:	2b03      	cmp	r3, #3
   8352a:	f200 808c 	bhi.w	83646 <SystemCoreClockUpdate+0x12a>
   8352e:	2b02      	cmp	r3, #2
   83530:	d23f      	bcs.n	835b2 <SystemCoreClockUpdate+0x96>
   83532:	2b00      	cmp	r3, #0
   83534:	d002      	beq.n	8353c <SystemCoreClockUpdate+0x20>
   83536:	2b01      	cmp	r3, #1
   83538:	d010      	beq.n	8355c <SystemCoreClockUpdate+0x40>
   8353a:	e084      	b.n	83646 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8353c:	4b52      	ldr	r3, [pc, #328]	; (83688 <SystemCoreClockUpdate+0x16c>)
   8353e:	695b      	ldr	r3, [r3, #20]
   83540:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83544:	2b00      	cmp	r3, #0
   83546:	d004      	beq.n	83552 <SystemCoreClockUpdate+0x36>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83548:	4b50      	ldr	r3, [pc, #320]	; (8368c <SystemCoreClockUpdate+0x170>)
   8354a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8354e:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83550:	e079      	b.n	83646 <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83552:	4b4e      	ldr	r3, [pc, #312]	; (8368c <SystemCoreClockUpdate+0x170>)
   83554:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83558:	601a      	str	r2, [r3, #0]
		break;
   8355a:	e074      	b.n	83646 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8355c:	4b49      	ldr	r3, [pc, #292]	; (83684 <SystemCoreClockUpdate+0x168>)
   8355e:	6a1b      	ldr	r3, [r3, #32]
   83560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83564:	2b00      	cmp	r3, #0
   83566:	d003      	beq.n	83570 <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83568:	4b48      	ldr	r3, [pc, #288]	; (8368c <SystemCoreClockUpdate+0x170>)
   8356a:	4a49      	ldr	r2, [pc, #292]	; (83690 <SystemCoreClockUpdate+0x174>)
   8356c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   8356e:	e06a      	b.n	83646 <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83570:	4b46      	ldr	r3, [pc, #280]	; (8368c <SystemCoreClockUpdate+0x170>)
   83572:	4a48      	ldr	r2, [pc, #288]	; (83694 <SystemCoreClockUpdate+0x178>)
   83574:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83576:	4b43      	ldr	r3, [pc, #268]	; (83684 <SystemCoreClockUpdate+0x168>)
   83578:	6a1b      	ldr	r3, [r3, #32]
   8357a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8357e:	2b20      	cmp	r3, #32
   83580:	d00b      	beq.n	8359a <SystemCoreClockUpdate+0x7e>
   83582:	2b20      	cmp	r3, #32
   83584:	d811      	bhi.n	835aa <SystemCoreClockUpdate+0x8e>
   83586:	2b00      	cmp	r3, #0
   83588:	d011      	beq.n	835ae <SystemCoreClockUpdate+0x92>
   8358a:	2b10      	cmp	r3, #16
   8358c:	d10d      	bne.n	835aa <SystemCoreClockUpdate+0x8e>
				SystemCoreClock *= 2U;
   8358e:	4b3f      	ldr	r3, [pc, #252]	; (8368c <SystemCoreClockUpdate+0x170>)
   83590:	681b      	ldr	r3, [r3, #0]
   83592:	005b      	lsls	r3, r3, #1
   83594:	4a3d      	ldr	r2, [pc, #244]	; (8368c <SystemCoreClockUpdate+0x170>)
   83596:	6013      	str	r3, [r2, #0]
				break;
   83598:	e00a      	b.n	835b0 <SystemCoreClockUpdate+0x94>
				SystemCoreClock *= 3U;
   8359a:	4b3c      	ldr	r3, [pc, #240]	; (8368c <SystemCoreClockUpdate+0x170>)
   8359c:	681a      	ldr	r2, [r3, #0]
   8359e:	4613      	mov	r3, r2
   835a0:	005b      	lsls	r3, r3, #1
   835a2:	4413      	add	r3, r2
   835a4:	4a39      	ldr	r2, [pc, #228]	; (8368c <SystemCoreClockUpdate+0x170>)
   835a6:	6013      	str	r3, [r2, #0]
				break;
   835a8:	e002      	b.n	835b0 <SystemCoreClockUpdate+0x94>
				break;
   835aa:	bf00      	nop
   835ac:	e04b      	b.n	83646 <SystemCoreClockUpdate+0x12a>
				break;
   835ae:	bf00      	nop
		break;
   835b0:	e049      	b.n	83646 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   835b2:	4b34      	ldr	r3, [pc, #208]	; (83684 <SystemCoreClockUpdate+0x168>)
   835b4:	6a1b      	ldr	r3, [r3, #32]
   835b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   835ba:	2b00      	cmp	r3, #0
   835bc:	d003      	beq.n	835c6 <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   835be:	4b33      	ldr	r3, [pc, #204]	; (8368c <SystemCoreClockUpdate+0x170>)
   835c0:	4a33      	ldr	r2, [pc, #204]	; (83690 <SystemCoreClockUpdate+0x174>)
   835c2:	601a      	str	r2, [r3, #0]
   835c4:	e01f      	b.n	83606 <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   835c6:	4b31      	ldr	r3, [pc, #196]	; (8368c <SystemCoreClockUpdate+0x170>)
   835c8:	4a32      	ldr	r2, [pc, #200]	; (83694 <SystemCoreClockUpdate+0x178>)
   835ca:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   835cc:	4b2d      	ldr	r3, [pc, #180]	; (83684 <SystemCoreClockUpdate+0x168>)
   835ce:	6a1b      	ldr	r3, [r3, #32]
   835d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   835d4:	2b20      	cmp	r3, #32
   835d6:	d00b      	beq.n	835f0 <SystemCoreClockUpdate+0xd4>
   835d8:	2b20      	cmp	r3, #32
   835da:	d811      	bhi.n	83600 <SystemCoreClockUpdate+0xe4>
   835dc:	2b00      	cmp	r3, #0
   835de:	d011      	beq.n	83604 <SystemCoreClockUpdate+0xe8>
   835e0:	2b10      	cmp	r3, #16
   835e2:	d10d      	bne.n	83600 <SystemCoreClockUpdate+0xe4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   835e4:	4b29      	ldr	r3, [pc, #164]	; (8368c <SystemCoreClockUpdate+0x170>)
   835e6:	681b      	ldr	r3, [r3, #0]
   835e8:	005b      	lsls	r3, r3, #1
   835ea:	4a28      	ldr	r2, [pc, #160]	; (8368c <SystemCoreClockUpdate+0x170>)
   835ec:	6013      	str	r3, [r2, #0]
				break;
   835ee:	e00a      	b.n	83606 <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   835f0:	4b26      	ldr	r3, [pc, #152]	; (8368c <SystemCoreClockUpdate+0x170>)
   835f2:	681a      	ldr	r2, [r3, #0]
   835f4:	4613      	mov	r3, r2
   835f6:	005b      	lsls	r3, r3, #1
   835f8:	4413      	add	r3, r2
   835fa:	4a24      	ldr	r2, [pc, #144]	; (8368c <SystemCoreClockUpdate+0x170>)
   835fc:	6013      	str	r3, [r2, #0]
				break;
   835fe:	e002      	b.n	83606 <SystemCoreClockUpdate+0xea>
			default:
				break;
   83600:	bf00      	nop
   83602:	e000      	b.n	83606 <SystemCoreClockUpdate+0xea>
				break;
   83604:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83606:	4b1f      	ldr	r3, [pc, #124]	; (83684 <SystemCoreClockUpdate+0x168>)
   83608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8360a:	f003 0303 	and.w	r3, r3, #3
   8360e:	2b02      	cmp	r3, #2
   83610:	d115      	bne.n	8363e <SystemCoreClockUpdate+0x122>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83612:	4b1c      	ldr	r3, [pc, #112]	; (83684 <SystemCoreClockUpdate+0x168>)
   83614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83616:	0c1b      	lsrs	r3, r3, #16
   83618:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   8361c:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8361e:	4a1b      	ldr	r2, [pc, #108]	; (8368c <SystemCoreClockUpdate+0x170>)
   83620:	6812      	ldr	r2, [r2, #0]
   83622:	fb02 f303 	mul.w	r3, r2, r3
   83626:	4a19      	ldr	r2, [pc, #100]	; (8368c <SystemCoreClockUpdate+0x170>)
   83628:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   8362a:	4b16      	ldr	r3, [pc, #88]	; (83684 <SystemCoreClockUpdate+0x168>)
   8362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8362e:	b2db      	uxtb	r3, r3
   83630:	4a16      	ldr	r2, [pc, #88]	; (8368c <SystemCoreClockUpdate+0x170>)
   83632:	6812      	ldr	r2, [r2, #0]
   83634:	fbb2 f3f3 	udiv	r3, r2, r3
   83638:	4a14      	ldr	r2, [pc, #80]	; (8368c <SystemCoreClockUpdate+0x170>)
   8363a:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   8363c:	e002      	b.n	83644 <SystemCoreClockUpdate+0x128>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8363e:	4b13      	ldr	r3, [pc, #76]	; (8368c <SystemCoreClockUpdate+0x170>)
   83640:	4a15      	ldr	r2, [pc, #84]	; (83698 <SystemCoreClockUpdate+0x17c>)
   83642:	601a      	str	r2, [r3, #0]
		break;
   83644:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83646:	4b0f      	ldr	r3, [pc, #60]	; (83684 <SystemCoreClockUpdate+0x168>)
   83648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8364a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8364e:	2b70      	cmp	r3, #112	; 0x70
   83650:	d108      	bne.n	83664 <SystemCoreClockUpdate+0x148>
		SystemCoreClock /= 3U;
   83652:	4b0e      	ldr	r3, [pc, #56]	; (8368c <SystemCoreClockUpdate+0x170>)
   83654:	681b      	ldr	r3, [r3, #0]
   83656:	4a11      	ldr	r2, [pc, #68]	; (8369c <SystemCoreClockUpdate+0x180>)
   83658:	fba2 2303 	umull	r2, r3, r2, r3
   8365c:	085b      	lsrs	r3, r3, #1
   8365e:	4a0b      	ldr	r2, [pc, #44]	; (8368c <SystemCoreClockUpdate+0x170>)
   83660:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   83662:	e00a      	b.n	8367a <SystemCoreClockUpdate+0x15e>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83664:	4b07      	ldr	r3, [pc, #28]	; (83684 <SystemCoreClockUpdate+0x168>)
   83666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83668:	091b      	lsrs	r3, r3, #4
   8366a:	f003 0307 	and.w	r3, r3, #7
   8366e:	4a07      	ldr	r2, [pc, #28]	; (8368c <SystemCoreClockUpdate+0x170>)
   83670:	6812      	ldr	r2, [r2, #0]
   83672:	fa22 f303 	lsr.w	r3, r2, r3
   83676:	4a05      	ldr	r2, [pc, #20]	; (8368c <SystemCoreClockUpdate+0x170>)
   83678:	6013      	str	r3, [r2, #0]
}
   8367a:	bf00      	nop
   8367c:	46bd      	mov	sp, r7
   8367e:	bc80      	pop	{r7}
   83680:	4770      	bx	lr
   83682:	bf00      	nop
   83684:	400e0400 	.word	0x400e0400
   83688:	400e1210 	.word	0x400e1210
   8368c:	20000288 	.word	0x20000288
   83690:	00b71b00 	.word	0x00b71b00
   83694:	003d0900 	.word	0x003d0900
   83698:	0e4e1c00 	.word	0x0e4e1c00
   8369c:	aaaaaaab 	.word	0xaaaaaaab

000836a0 <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   836a0:	b480      	push	{r7}
   836a2:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   836a4:	4b02      	ldr	r3, [pc, #8]	; (836b0 <udc_get_string_serial_name+0x10>)
	}
   836a6:	4618      	mov	r0, r3
   836a8:	46bd      	mov	sp, r7
   836aa:	bc80      	pop	{r7}
   836ac:	4770      	bx	lr
   836ae:	bf00      	nop
   836b0:	2000025c 	.word	0x2000025c

000836b4 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   836b4:	b480      	push	{r7}
   836b6:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   836b8:	4b02      	ldr	r3, [pc, #8]	; (836c4 <udc_get_interface_desc+0x10>)
   836ba:	681b      	ldr	r3, [r3, #0]
}
   836bc:	4618      	mov	r0, r3
   836be:	46bd      	mov	sp, r7
   836c0:	bc80      	pop	{r7}
   836c2:	4770      	bx	lr
   836c4:	2000133c 	.word	0x2000133c

000836c8 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   836c8:	b480      	push	{r7}
   836ca:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   836cc:	4b06      	ldr	r3, [pc, #24]	; (836e8 <udc_get_eof_conf+0x20>)
   836ce:	681b      	ldr	r3, [r3, #0]
   836d0:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   836d2:	4a05      	ldr	r2, [pc, #20]	; (836e8 <udc_get_eof_conf+0x20>)
   836d4:	6812      	ldr	r2, [r2, #0]
   836d6:	6812      	ldr	r2, [r2, #0]
   836d8:	8852      	ldrh	r2, [r2, #2]
   836da:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   836dc:	4413      	add	r3, r2
}
   836de:	4618      	mov	r0, r3
   836e0:	46bd      	mov	sp, r7
   836e2:	bc80      	pop	{r7}
   836e4:	4770      	bx	lr
   836e6:	bf00      	nop
   836e8:	20001338 	.word	0x20001338

000836ec <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   836ec:	b580      	push	{r7, lr}
   836ee:	b084      	sub	sp, #16
   836f0:	af00      	add	r7, sp, #0
   836f2:	6078      	str	r0, [r7, #4]
   836f4:	460b      	mov	r3, r1
   836f6:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   836f8:	4b12      	ldr	r3, [pc, #72]	; (83744 <udc_next_desc_in_iface+0x58>)
   836fa:	4798      	blx	r3
   836fc:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   836fe:	687b      	ldr	r3, [r7, #4]
   83700:	781b      	ldrb	r3, [r3, #0]
   83702:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   83704:	687b      	ldr	r3, [r7, #4]
   83706:	4413      	add	r3, r2
   83708:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   8370a:	e010      	b.n	8372e <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   8370c:	687b      	ldr	r3, [r7, #4]
   8370e:	785b      	ldrb	r3, [r3, #1]
   83710:	2b04      	cmp	r3, #4
   83712:	d011      	beq.n	83738 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   83714:	687b      	ldr	r3, [r7, #4]
   83716:	785b      	ldrb	r3, [r3, #1]
   83718:	78fa      	ldrb	r2, [r7, #3]
   8371a:	429a      	cmp	r2, r3
   8371c:	d101      	bne.n	83722 <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   8371e:	687b      	ldr	r3, [r7, #4]
   83720:	e00c      	b.n	8373c <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   83722:	687b      	ldr	r3, [r7, #4]
   83724:	781b      	ldrb	r3, [r3, #0]
   83726:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   83728:	687b      	ldr	r3, [r7, #4]
   8372a:	4413      	add	r3, r2
   8372c:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   8372e:	68fa      	ldr	r2, [r7, #12]
   83730:	687b      	ldr	r3, [r7, #4]
   83732:	429a      	cmp	r2, r3
   83734:	d8ea      	bhi.n	8370c <udc_next_desc_in_iface+0x20>
   83736:	e000      	b.n	8373a <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   83738:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   8373a:	2300      	movs	r3, #0
}
   8373c:	4618      	mov	r0, r3
   8373e:	3710      	adds	r7, #16
   83740:	46bd      	mov	sp, r7
   83742:	bd80      	pop	{r7, pc}
   83744:	000836c9 	.word	0x000836c9

00083748 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   83748:	b580      	push	{r7, lr}
   8374a:	b084      	sub	sp, #16
   8374c:	af00      	add	r7, sp, #0
   8374e:	4603      	mov	r3, r0
   83750:	460a      	mov	r2, r1
   83752:	71fb      	strb	r3, [r7, #7]
   83754:	4613      	mov	r3, r2
   83756:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   83758:	4b1e      	ldr	r3, [pc, #120]	; (837d4 <udc_update_iface_desc+0x8c>)
   8375a:	781b      	ldrb	r3, [r3, #0]
   8375c:	2b00      	cmp	r3, #0
   8375e:	d101      	bne.n	83764 <udc_update_iface_desc+0x1c>
		return false;
   83760:	2300      	movs	r3, #0
   83762:	e032      	b.n	837ca <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   83764:	4b1c      	ldr	r3, [pc, #112]	; (837d8 <udc_update_iface_desc+0x90>)
   83766:	681b      	ldr	r3, [r3, #0]
   83768:	681b      	ldr	r3, [r3, #0]
   8376a:	791b      	ldrb	r3, [r3, #4]
   8376c:	79fa      	ldrb	r2, [r7, #7]
   8376e:	429a      	cmp	r2, r3
   83770:	d301      	bcc.n	83776 <udc_update_iface_desc+0x2e>
		return false;
   83772:	2300      	movs	r3, #0
   83774:	e029      	b.n	837ca <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   83776:	4b18      	ldr	r3, [pc, #96]	; (837d8 <udc_update_iface_desc+0x90>)
   83778:	681b      	ldr	r3, [r3, #0]
   8377a:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   8377c:	4a17      	ldr	r2, [pc, #92]	; (837dc <udc_update_iface_desc+0x94>)
   8377e:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   83780:	4b17      	ldr	r3, [pc, #92]	; (837e0 <udc_update_iface_desc+0x98>)
   83782:	4798      	blx	r3
   83784:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   83786:	e01a      	b.n	837be <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   83788:	4b14      	ldr	r3, [pc, #80]	; (837dc <udc_update_iface_desc+0x94>)
   8378a:	681b      	ldr	r3, [r3, #0]
   8378c:	785b      	ldrb	r3, [r3, #1]
   8378e:	2b04      	cmp	r3, #4
   83790:	d10d      	bne.n	837ae <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   83792:	4b12      	ldr	r3, [pc, #72]	; (837dc <udc_update_iface_desc+0x94>)
   83794:	681b      	ldr	r3, [r3, #0]
   83796:	789b      	ldrb	r3, [r3, #2]
   83798:	79fa      	ldrb	r2, [r7, #7]
   8379a:	429a      	cmp	r2, r3
   8379c:	d107      	bne.n	837ae <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   8379e:	4b0f      	ldr	r3, [pc, #60]	; (837dc <udc_update_iface_desc+0x94>)
   837a0:	681b      	ldr	r3, [r3, #0]
   837a2:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   837a4:	79ba      	ldrb	r2, [r7, #6]
   837a6:	429a      	cmp	r2, r3
   837a8:	d101      	bne.n	837ae <udc_update_iface_desc+0x66>
				return true; // Interface found
   837aa:	2301      	movs	r3, #1
   837ac:	e00d      	b.n	837ca <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   837ae:	4b0b      	ldr	r3, [pc, #44]	; (837dc <udc_update_iface_desc+0x94>)
   837b0:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   837b2:	4a0a      	ldr	r2, [pc, #40]	; (837dc <udc_update_iface_desc+0x94>)
   837b4:	6812      	ldr	r2, [r2, #0]
   837b6:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   837b8:	4413      	add	r3, r2
   837ba:	4a08      	ldr	r2, [pc, #32]	; (837dc <udc_update_iface_desc+0x94>)
   837bc:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   837be:	4b07      	ldr	r3, [pc, #28]	; (837dc <udc_update_iface_desc+0x94>)
   837c0:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   837c2:	68fa      	ldr	r2, [r7, #12]
   837c4:	429a      	cmp	r2, r3
   837c6:	d8df      	bhi.n	83788 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   837c8:	2300      	movs	r3, #0
}
   837ca:	4618      	mov	r0, r3
   837cc:	3710      	adds	r7, #16
   837ce:	46bd      	mov	sp, r7
   837d0:	bd80      	pop	{r7, pc}
   837d2:	bf00      	nop
   837d4:	20001336 	.word	0x20001336
   837d8:	20001338 	.word	0x20001338
   837dc:	2000133c 	.word	0x2000133c
   837e0:	000836c9 	.word	0x000836c9

000837e4 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   837e4:	b580      	push	{r7, lr}
   837e6:	b084      	sub	sp, #16
   837e8:	af00      	add	r7, sp, #0
   837ea:	4603      	mov	r3, r0
   837ec:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   837ee:	79fb      	ldrb	r3, [r7, #7]
   837f0:	2100      	movs	r1, #0
   837f2:	4618      	mov	r0, r3
   837f4:	4b1e      	ldr	r3, [pc, #120]	; (83870 <udc_iface_disable+0x8c>)
   837f6:	4798      	blx	r3
   837f8:	4603      	mov	r3, r0
   837fa:	f083 0301 	eor.w	r3, r3, #1
   837fe:	b2db      	uxtb	r3, r3
   83800:	2b00      	cmp	r3, #0
   83802:	d001      	beq.n	83808 <udc_iface_disable+0x24>
		return false;
   83804:	2300      	movs	r3, #0
   83806:	e02f      	b.n	83868 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   83808:	4b1a      	ldr	r3, [pc, #104]	; (83874 <udc_iface_disable+0x90>)
   8380a:	681b      	ldr	r3, [r3, #0]
   8380c:	685a      	ldr	r2, [r3, #4]
   8380e:	79fb      	ldrb	r3, [r7, #7]
   83810:	009b      	lsls	r3, r3, #2
   83812:	4413      	add	r3, r2
   83814:	681b      	ldr	r3, [r3, #0]
   83816:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   83818:	68bb      	ldr	r3, [r7, #8]
   8381a:	68db      	ldr	r3, [r3, #12]
   8381c:	4798      	blx	r3
   8381e:	4603      	mov	r3, r0
   83820:	461a      	mov	r2, r3
   83822:	79fb      	ldrb	r3, [r7, #7]
   83824:	4611      	mov	r1, r2
   83826:	4618      	mov	r0, r3
   83828:	4b11      	ldr	r3, [pc, #68]	; (83870 <udc_iface_disable+0x8c>)
   8382a:	4798      	blx	r3
   8382c:	4603      	mov	r3, r0
   8382e:	f083 0301 	eor.w	r3, r3, #1
   83832:	b2db      	uxtb	r3, r3
   83834:	2b00      	cmp	r3, #0
   83836:	d001      	beq.n	8383c <udc_iface_disable+0x58>
		return false;
   83838:	2300      	movs	r3, #0
   8383a:	e015      	b.n	83868 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8383c:	4b0e      	ldr	r3, [pc, #56]	; (83878 <udc_iface_disable+0x94>)
   8383e:	681b      	ldr	r3, [r3, #0]
   83840:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   83842:	2105      	movs	r1, #5
   83844:	68f8      	ldr	r0, [r7, #12]
   83846:	4b0d      	ldr	r3, [pc, #52]	; (8387c <udc_iface_disable+0x98>)
   83848:	4798      	blx	r3
   8384a:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   8384c:	68fb      	ldr	r3, [r7, #12]
   8384e:	2b00      	cmp	r3, #0
   83850:	d005      	beq.n	8385e <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   83852:	68fb      	ldr	r3, [r7, #12]
   83854:	789b      	ldrb	r3, [r3, #2]
   83856:	4618      	mov	r0, r3
   83858:	4b09      	ldr	r3, [pc, #36]	; (83880 <udc_iface_disable+0x9c>)
   8385a:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8385c:	e7f1      	b.n	83842 <udc_iface_disable+0x5e>
				break;
   8385e:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   83860:	68bb      	ldr	r3, [r7, #8]
   83862:	685b      	ldr	r3, [r3, #4]
   83864:	4798      	blx	r3
	return true;
   83866:	2301      	movs	r3, #1
}
   83868:	4618      	mov	r0, r3
   8386a:	3710      	adds	r7, #16
   8386c:	46bd      	mov	sp, r7
   8386e:	bd80      	pop	{r7, pc}
   83870:	00083749 	.word	0x00083749
   83874:	20001338 	.word	0x20001338
   83878:	2000133c 	.word	0x2000133c
   8387c:	000836ed 	.word	0x000836ed
   83880:	00084f51 	.word	0x00084f51

00083884 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   83884:	b580      	push	{r7, lr}
   83886:	b084      	sub	sp, #16
   83888:	af00      	add	r7, sp, #0
   8388a:	4603      	mov	r3, r0
   8388c:	460a      	mov	r2, r1
   8388e:	71fb      	strb	r3, [r7, #7]
   83890:	4613      	mov	r3, r2
   83892:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   83894:	79ba      	ldrb	r2, [r7, #6]
   83896:	79fb      	ldrb	r3, [r7, #7]
   83898:	4611      	mov	r1, r2
   8389a:	4618      	mov	r0, r3
   8389c:	4b1a      	ldr	r3, [pc, #104]	; (83908 <udc_iface_enable+0x84>)
   8389e:	4798      	blx	r3
   838a0:	4603      	mov	r3, r0
   838a2:	f083 0301 	eor.w	r3, r3, #1
   838a6:	b2db      	uxtb	r3, r3
   838a8:	2b00      	cmp	r3, #0
   838aa:	d001      	beq.n	838b0 <udc_iface_enable+0x2c>
		return false;
   838ac:	2300      	movs	r3, #0
   838ae:	e027      	b.n	83900 <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   838b0:	4b16      	ldr	r3, [pc, #88]	; (8390c <udc_iface_enable+0x88>)
   838b2:	681b      	ldr	r3, [r3, #0]
   838b4:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   838b6:	2105      	movs	r1, #5
   838b8:	68f8      	ldr	r0, [r7, #12]
   838ba:	4b15      	ldr	r3, [pc, #84]	; (83910 <udc_iface_enable+0x8c>)
   838bc:	4798      	blx	r3
   838be:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   838c0:	68fb      	ldr	r3, [r7, #12]
   838c2:	2b00      	cmp	r3, #0
   838c4:	d011      	beq.n	838ea <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   838c6:	68fb      	ldr	r3, [r7, #12]
   838c8:	7898      	ldrb	r0, [r3, #2]
   838ca:	68fb      	ldr	r3, [r7, #12]
   838cc:	78d9      	ldrb	r1, [r3, #3]
   838ce:	68fb      	ldr	r3, [r7, #12]
   838d0:	889b      	ldrh	r3, [r3, #4]
   838d2:	b29b      	uxth	r3, r3
   838d4:	461a      	mov	r2, r3
   838d6:	4b0f      	ldr	r3, [pc, #60]	; (83914 <udc_iface_enable+0x90>)
   838d8:	4798      	blx	r3
   838da:	4603      	mov	r3, r0
   838dc:	f083 0301 	eor.w	r3, r3, #1
   838e0:	b2db      	uxtb	r3, r3
   838e2:	2b00      	cmp	r3, #0
   838e4:	d0e7      	beq.n	838b6 <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   838e6:	2300      	movs	r3, #0
   838e8:	e00a      	b.n	83900 <udc_iface_enable+0x7c>
			break;
   838ea:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   838ec:	4b0a      	ldr	r3, [pc, #40]	; (83918 <udc_iface_enable+0x94>)
   838ee:	681b      	ldr	r3, [r3, #0]
   838f0:	685a      	ldr	r2, [r3, #4]
   838f2:	79fb      	ldrb	r3, [r7, #7]
   838f4:	009b      	lsls	r3, r3, #2
   838f6:	4413      	add	r3, r2
   838f8:	681b      	ldr	r3, [r3, #0]
   838fa:	681b      	ldr	r3, [r3, #0]
   838fc:	4798      	blx	r3
   838fe:	4603      	mov	r3, r0
}
   83900:	4618      	mov	r0, r3
   83902:	3710      	adds	r7, #16
   83904:	46bd      	mov	sp, r7
   83906:	bd80      	pop	{r7, pc}
   83908:	00083749 	.word	0x00083749
   8390c:	2000133c 	.word	0x2000133c
   83910:	000836ed 	.word	0x000836ed
   83914:	00084b99 	.word	0x00084b99
   83918:	20001338 	.word	0x20001338

0008391c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   8391c:	b580      	push	{r7, lr}
   8391e:	af00      	add	r7, sp, #0
	udd_enable();
   83920:	4b01      	ldr	r3, [pc, #4]	; (83928 <udc_start+0xc>)
   83922:	4798      	blx	r3
}
   83924:	bf00      	nop
   83926:	bd80      	pop	{r7, pc}
   83928:	00084955 	.word	0x00084955

0008392c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   8392c:	b580      	push	{r7, lr}
   8392e:	b082      	sub	sp, #8
   83930:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   83932:	4b0f      	ldr	r3, [pc, #60]	; (83970 <udc_reset+0x44>)
   83934:	781b      	ldrb	r3, [r3, #0]
   83936:	2b00      	cmp	r3, #0
   83938:	d010      	beq.n	8395c <udc_reset+0x30>
		for (iface_num = 0;
   8393a:	2300      	movs	r3, #0
   8393c:	71fb      	strb	r3, [r7, #7]
   8393e:	e006      	b.n	8394e <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   83940:	79fb      	ldrb	r3, [r7, #7]
   83942:	4618      	mov	r0, r3
   83944:	4b0b      	ldr	r3, [pc, #44]	; (83974 <udc_reset+0x48>)
   83946:	4798      	blx	r3
				iface_num++) {
   83948:	79fb      	ldrb	r3, [r7, #7]
   8394a:	3301      	adds	r3, #1
   8394c:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8394e:	4b0a      	ldr	r3, [pc, #40]	; (83978 <udc_reset+0x4c>)
   83950:	681b      	ldr	r3, [r3, #0]
   83952:	681b      	ldr	r3, [r3, #0]
   83954:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   83956:	79fa      	ldrb	r2, [r7, #7]
   83958:	429a      	cmp	r2, r3
   8395a:	d3f1      	bcc.n	83940 <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   8395c:	4b04      	ldr	r3, [pc, #16]	; (83970 <udc_reset+0x44>)
   8395e:	2200      	movs	r2, #0
   83960:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   83962:	4b06      	ldr	r3, [pc, #24]	; (8397c <udc_reset+0x50>)
   83964:	2200      	movs	r2, #0
   83966:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   83968:	bf00      	nop
   8396a:	3708      	adds	r7, #8
   8396c:	46bd      	mov	sp, r7
   8396e:	bd80      	pop	{r7, pc}
   83970:	20001336 	.word	0x20001336
   83974:	000837e5 	.word	0x000837e5
   83978:	20001338 	.word	0x20001338
   8397c:	20001334 	.word	0x20001334

00083980 <udc_sof_notify>:

void udc_sof_notify(void)
{
   83980:	b580      	push	{r7, lr}
   83982:	b082      	sub	sp, #8
   83984:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   83986:	4b14      	ldr	r3, [pc, #80]	; (839d8 <udc_sof_notify+0x58>)
   83988:	781b      	ldrb	r3, [r3, #0]
   8398a:	2b00      	cmp	r3, #0
   8398c:	d01f      	beq.n	839ce <udc_sof_notify+0x4e>
		for (iface_num = 0;
   8398e:	2300      	movs	r3, #0
   83990:	71fb      	strb	r3, [r7, #7]
   83992:	e015      	b.n	839c0 <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   83994:	4b11      	ldr	r3, [pc, #68]	; (839dc <udc_sof_notify+0x5c>)
   83996:	681b      	ldr	r3, [r3, #0]
   83998:	685a      	ldr	r2, [r3, #4]
   8399a:	79fb      	ldrb	r3, [r7, #7]
   8399c:	009b      	lsls	r3, r3, #2
   8399e:	4413      	add	r3, r2
   839a0:	681b      	ldr	r3, [r3, #0]
   839a2:	691b      	ldr	r3, [r3, #16]
   839a4:	2b00      	cmp	r3, #0
   839a6:	d008      	beq.n	839ba <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   839a8:	4b0c      	ldr	r3, [pc, #48]	; (839dc <udc_sof_notify+0x5c>)
   839aa:	681b      	ldr	r3, [r3, #0]
   839ac:	685a      	ldr	r2, [r3, #4]
   839ae:	79fb      	ldrb	r3, [r7, #7]
   839b0:	009b      	lsls	r3, r3, #2
   839b2:	4413      	add	r3, r2
   839b4:	681b      	ldr	r3, [r3, #0]
   839b6:	691b      	ldr	r3, [r3, #16]
   839b8:	4798      	blx	r3
				iface_num++) {
   839ba:	79fb      	ldrb	r3, [r7, #7]
   839bc:	3301      	adds	r3, #1
   839be:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   839c0:	4b06      	ldr	r3, [pc, #24]	; (839dc <udc_sof_notify+0x5c>)
   839c2:	681b      	ldr	r3, [r3, #0]
   839c4:	681b      	ldr	r3, [r3, #0]
   839c6:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   839c8:	79fa      	ldrb	r2, [r7, #7]
   839ca:	429a      	cmp	r2, r3
   839cc:	d3e2      	bcc.n	83994 <udc_sof_notify+0x14>
			}
		}
	}
}
   839ce:	bf00      	nop
   839d0:	3708      	adds	r7, #8
   839d2:	46bd      	mov	sp, r7
   839d4:	bd80      	pop	{r7, pc}
   839d6:	bf00      	nop
   839d8:	20001336 	.word	0x20001336
   839dc:	20001338 	.word	0x20001338

000839e0 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   839e0:	b580      	push	{r7, lr}
   839e2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   839e4:	4b06      	ldr	r3, [pc, #24]	; (83a00 <udc_req_std_dev_get_status+0x20>)
   839e6:	88db      	ldrh	r3, [r3, #6]
   839e8:	2b02      	cmp	r3, #2
   839ea:	d001      	beq.n	839f0 <udc_req_std_dev_get_status+0x10>
		return false;
   839ec:	2300      	movs	r3, #0
   839ee:	e004      	b.n	839fa <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   839f0:	2102      	movs	r1, #2
   839f2:	4804      	ldr	r0, [pc, #16]	; (83a04 <udc_req_std_dev_get_status+0x24>)
   839f4:	4b04      	ldr	r3, [pc, #16]	; (83a08 <udc_req_std_dev_get_status+0x28>)
   839f6:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   839f8:	2301      	movs	r3, #1
}
   839fa:	4618      	mov	r0, r3
   839fc:	bd80      	pop	{r7, pc}
   839fe:	bf00      	nop
   83a00:	20001828 	.word	0x20001828
   83a04:	20001334 	.word	0x20001334
   83a08:	00084b71 	.word	0x00084b71

00083a0c <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   83a0c:	b580      	push	{r7, lr}
   83a0e:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   83a10:	4b0b      	ldr	r3, [pc, #44]	; (83a40 <udc_req_std_ep_get_status+0x34>)
   83a12:	88db      	ldrh	r3, [r3, #6]
   83a14:	2b02      	cmp	r3, #2
   83a16:	d001      	beq.n	83a1c <udc_req_std_ep_get_status+0x10>
		return false;
   83a18:	2300      	movs	r3, #0
   83a1a:	e00e      	b.n	83a3a <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83a1c:	4b08      	ldr	r3, [pc, #32]	; (83a40 <udc_req_std_ep_get_status+0x34>)
   83a1e:	889b      	ldrh	r3, [r3, #4]
   83a20:	b2db      	uxtb	r3, r3
   83a22:	4618      	mov	r0, r3
   83a24:	4b07      	ldr	r3, [pc, #28]	; (83a44 <udc_req_std_ep_get_status+0x38>)
   83a26:	4798      	blx	r3
   83a28:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   83a2a:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   83a2c:	4b06      	ldr	r3, [pc, #24]	; (83a48 <udc_req_std_ep_get_status+0x3c>)
   83a2e:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   83a30:	2102      	movs	r1, #2
   83a32:	4805      	ldr	r0, [pc, #20]	; (83a48 <udc_req_std_ep_get_status+0x3c>)
   83a34:	4b05      	ldr	r3, [pc, #20]	; (83a4c <udc_req_std_ep_get_status+0x40>)
   83a36:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   83a38:	2301      	movs	r3, #1
}
   83a3a:	4618      	mov	r0, r3
   83a3c:	bd80      	pop	{r7, pc}
   83a3e:	bf00      	nop
   83a40:	20001828 	.word	0x20001828
   83a44:	00084fd1 	.word	0x00084fd1
   83a48:	20001340 	.word	0x20001340
   83a4c:	00084b71 	.word	0x00084b71

00083a50 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   83a50:	b480      	push	{r7}
   83a52:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83a54:	4b0b      	ldr	r3, [pc, #44]	; (83a84 <udc_req_std_dev_clear_feature+0x34>)
   83a56:	88db      	ldrh	r3, [r3, #6]
   83a58:	2b00      	cmp	r3, #0
   83a5a:	d001      	beq.n	83a60 <udc_req_std_dev_clear_feature+0x10>
		return false;
   83a5c:	2300      	movs	r3, #0
   83a5e:	e00d      	b.n	83a7c <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   83a60:	4b08      	ldr	r3, [pc, #32]	; (83a84 <udc_req_std_dev_clear_feature+0x34>)
   83a62:	885b      	ldrh	r3, [r3, #2]
   83a64:	2b01      	cmp	r3, #1
   83a66:	d108      	bne.n	83a7a <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   83a68:	4b07      	ldr	r3, [pc, #28]	; (83a88 <udc_req_std_dev_clear_feature+0x38>)
   83a6a:	881b      	ldrh	r3, [r3, #0]
   83a6c:	f023 0302 	bic.w	r3, r3, #2
   83a70:	b29a      	uxth	r2, r3
   83a72:	4b05      	ldr	r3, [pc, #20]	; (83a88 <udc_req_std_dev_clear_feature+0x38>)
   83a74:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   83a76:	2301      	movs	r3, #1
   83a78:	e000      	b.n	83a7c <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   83a7a:	2300      	movs	r3, #0
}
   83a7c:	4618      	mov	r0, r3
   83a7e:	46bd      	mov	sp, r7
   83a80:	bc80      	pop	{r7}
   83a82:	4770      	bx	lr
   83a84:	20001828 	.word	0x20001828
   83a88:	20001334 	.word	0x20001334

00083a8c <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   83a8c:	b580      	push	{r7, lr}
   83a8e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83a90:	4b0a      	ldr	r3, [pc, #40]	; (83abc <udc_req_std_ep_clear_feature+0x30>)
   83a92:	88db      	ldrh	r3, [r3, #6]
   83a94:	2b00      	cmp	r3, #0
   83a96:	d001      	beq.n	83a9c <udc_req_std_ep_clear_feature+0x10>
		return false;
   83a98:	2300      	movs	r3, #0
   83a9a:	e00c      	b.n	83ab6 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83a9c:	4b07      	ldr	r3, [pc, #28]	; (83abc <udc_req_std_ep_clear_feature+0x30>)
   83a9e:	885b      	ldrh	r3, [r3, #2]
   83aa0:	2b00      	cmp	r3, #0
   83aa2:	d107      	bne.n	83ab4 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83aa4:	4b05      	ldr	r3, [pc, #20]	; (83abc <udc_req_std_ep_clear_feature+0x30>)
   83aa6:	889b      	ldrh	r3, [r3, #4]
   83aa8:	b2db      	uxtb	r3, r3
   83aaa:	4618      	mov	r0, r3
   83aac:	4b04      	ldr	r3, [pc, #16]	; (83ac0 <udc_req_std_ep_clear_feature+0x34>)
   83aae:	4798      	blx	r3
   83ab0:	4603      	mov	r3, r0
   83ab2:	e000      	b.n	83ab6 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   83ab4:	2300      	movs	r3, #0
}
   83ab6:	4618      	mov	r0, r3
   83ab8:	bd80      	pop	{r7, pc}
   83aba:	bf00      	nop
   83abc:	20001828 	.word	0x20001828
   83ac0:	0008514d 	.word	0x0008514d

00083ac4 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   83ac4:	b580      	push	{r7, lr}
   83ac6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83ac8:	4b26      	ldr	r3, [pc, #152]	; (83b64 <udc_req_std_dev_set_feature+0xa0>)
   83aca:	88db      	ldrh	r3, [r3, #6]
   83acc:	2b00      	cmp	r3, #0
   83ace:	d001      	beq.n	83ad4 <udc_req_std_dev_set_feature+0x10>
		return false;
   83ad0:	2300      	movs	r3, #0
   83ad2:	e045      	b.n	83b60 <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   83ad4:	4b23      	ldr	r3, [pc, #140]	; (83b64 <udc_req_std_dev_set_feature+0xa0>)
   83ad6:	885b      	ldrh	r3, [r3, #2]
   83ad8:	2b01      	cmp	r3, #1
   83ada:	d002      	beq.n	83ae2 <udc_req_std_dev_set_feature+0x1e>
   83adc:	2b02      	cmp	r3, #2
   83ade:	d002      	beq.n	83ae6 <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   83ae0:	e03d      	b.n	83b5e <udc_req_std_dev_set_feature+0x9a>
		return false;
   83ae2:	2300      	movs	r3, #0
   83ae4:	e03c      	b.n	83b60 <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   83ae6:	4b20      	ldr	r3, [pc, #128]	; (83b68 <udc_req_std_dev_set_feature+0xa4>)
   83ae8:	4798      	blx	r3
   83aea:	4603      	mov	r3, r0
   83aec:	f083 0301 	eor.w	r3, r3, #1
   83af0:	b2db      	uxtb	r3, r3
   83af2:	2b00      	cmp	r3, #0
   83af4:	d130      	bne.n	83b58 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   83af6:	4b1b      	ldr	r3, [pc, #108]	; (83b64 <udc_req_std_dev_set_feature+0xa0>)
   83af8:	889b      	ldrh	r3, [r3, #4]
   83afa:	b2db      	uxtb	r3, r3
   83afc:	2b00      	cmp	r3, #0
   83afe:	d12d      	bne.n	83b5c <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   83b00:	4b1a      	ldr	r3, [pc, #104]	; (83b6c <udc_req_std_dev_set_feature+0xa8>)
   83b02:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   83b04:	4b17      	ldr	r3, [pc, #92]	; (83b64 <udc_req_std_dev_set_feature+0xa0>)
   83b06:	889b      	ldrh	r3, [r3, #4]
   83b08:	0a1b      	lsrs	r3, r3, #8
   83b0a:	b29b      	uxth	r3, r3
   83b0c:	b2db      	uxtb	r3, r3
   83b0e:	3b01      	subs	r3, #1
   83b10:	2b03      	cmp	r3, #3
   83b12:	d81f      	bhi.n	83b54 <udc_req_std_dev_set_feature+0x90>
   83b14:	a201      	add	r2, pc, #4	; (adr r2, 83b1c <udc_req_std_dev_set_feature+0x58>)
   83b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83b1a:	bf00      	nop
   83b1c:	00083b2d 	.word	0x00083b2d
   83b20:	00083b37 	.word	0x00083b37
   83b24:	00083b41 	.word	0x00083b41
   83b28:	00083b4b 	.word	0x00083b4b
			udd_g_ctrlreq.callback = udd_test_mode_j;
   83b2c:	4b0d      	ldr	r3, [pc, #52]	; (83b64 <udc_req_std_dev_set_feature+0xa0>)
   83b2e:	4a10      	ldr	r2, [pc, #64]	; (83b70 <udc_req_std_dev_set_feature+0xac>)
   83b30:	611a      	str	r2, [r3, #16]
			return true;
   83b32:	2301      	movs	r3, #1
   83b34:	e014      	b.n	83b60 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   83b36:	4b0b      	ldr	r3, [pc, #44]	; (83b64 <udc_req_std_dev_set_feature+0xa0>)
   83b38:	4a0e      	ldr	r2, [pc, #56]	; (83b74 <udc_req_std_dev_set_feature+0xb0>)
   83b3a:	611a      	str	r2, [r3, #16]
			return true;
   83b3c:	2301      	movs	r3, #1
   83b3e:	e00f      	b.n	83b60 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   83b40:	4b08      	ldr	r3, [pc, #32]	; (83b64 <udc_req_std_dev_set_feature+0xa0>)
   83b42:	4a0d      	ldr	r2, [pc, #52]	; (83b78 <udc_req_std_dev_set_feature+0xb4>)
   83b44:	611a      	str	r2, [r3, #16]
			return true;
   83b46:	2301      	movs	r3, #1
   83b48:	e00a      	b.n	83b60 <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   83b4a:	4b06      	ldr	r3, [pc, #24]	; (83b64 <udc_req_std_dev_set_feature+0xa0>)
   83b4c:	4a0b      	ldr	r2, [pc, #44]	; (83b7c <udc_req_std_dev_set_feature+0xb8>)
   83b4e:	611a      	str	r2, [r3, #16]
			return true;
   83b50:	2301      	movs	r3, #1
   83b52:	e005      	b.n	83b60 <udc_req_std_dev_set_feature+0x9c>
			break;
   83b54:	bf00      	nop
		break;
   83b56:	e002      	b.n	83b5e <udc_req_std_dev_set_feature+0x9a>
			break;
   83b58:	bf00      	nop
   83b5a:	e000      	b.n	83b5e <udc_req_std_dev_set_feature+0x9a>
			break;
   83b5c:	bf00      	nop
	}
	return false;
   83b5e:	2300      	movs	r3, #0
}
   83b60:	4618      	mov	r0, r3
   83b62:	bd80      	pop	{r7, pc}
   83b64:	20001828 	.word	0x20001828
   83b68:	00084aed 	.word	0x00084aed
   83b6c:	0008392d 	.word	0x0008392d
   83b70:	0008540d 	.word	0x0008540d
   83b74:	00085441 	.word	0x00085441
   83b78:	00085475 	.word	0x00085475
   83b7c:	00085499 	.word	0x00085499

00083b80 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   83b80:	b580      	push	{r7, lr}
   83b82:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83b84:	4b0d      	ldr	r3, [pc, #52]	; (83bbc <udc_req_std_ep_set_feature+0x3c>)
   83b86:	88db      	ldrh	r3, [r3, #6]
   83b88:	2b00      	cmp	r3, #0
   83b8a:	d001      	beq.n	83b90 <udc_req_std_ep_set_feature+0x10>
		return false;
   83b8c:	2300      	movs	r3, #0
   83b8e:	e012      	b.n	83bb6 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   83b90:	4b0a      	ldr	r3, [pc, #40]	; (83bbc <udc_req_std_ep_set_feature+0x3c>)
   83b92:	885b      	ldrh	r3, [r3, #2]
   83b94:	2b00      	cmp	r3, #0
   83b96:	d10d      	bne.n	83bb4 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   83b98:	4b08      	ldr	r3, [pc, #32]	; (83bbc <udc_req_std_ep_set_feature+0x3c>)
   83b9a:	889b      	ldrh	r3, [r3, #4]
   83b9c:	b2db      	uxtb	r3, r3
   83b9e:	4618      	mov	r0, r3
   83ba0:	4b07      	ldr	r3, [pc, #28]	; (83bc0 <udc_req_std_ep_set_feature+0x40>)
   83ba2:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   83ba4:	4b05      	ldr	r3, [pc, #20]	; (83bbc <udc_req_std_ep_set_feature+0x3c>)
   83ba6:	889b      	ldrh	r3, [r3, #4]
   83ba8:	b2db      	uxtb	r3, r3
   83baa:	4618      	mov	r0, r3
   83bac:	4b05      	ldr	r3, [pc, #20]	; (83bc4 <udc_req_std_ep_set_feature+0x44>)
   83bae:	4798      	blx	r3
   83bb0:	4603      	mov	r3, r0
   83bb2:	e000      	b.n	83bb6 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   83bb4:	2300      	movs	r3, #0
}
   83bb6:	4618      	mov	r0, r3
   83bb8:	bd80      	pop	{r7, pc}
   83bba:	bf00      	nop
   83bbc:	20001828 	.word	0x20001828
   83bc0:	00085385 	.word	0x00085385
   83bc4:	00085039 	.word	0x00085039

00083bc8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   83bc8:	b580      	push	{r7, lr}
   83bca:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   83bcc:	4b05      	ldr	r3, [pc, #20]	; (83be4 <udc_valid_address+0x1c>)
   83bce:	885b      	ldrh	r3, [r3, #2]
   83bd0:	b2db      	uxtb	r3, r3
   83bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   83bd6:	b2db      	uxtb	r3, r3
   83bd8:	4618      	mov	r0, r3
   83bda:	4b03      	ldr	r3, [pc, #12]	; (83be8 <udc_valid_address+0x20>)
   83bdc:	4798      	blx	r3
}
   83bde:	bf00      	nop
   83be0:	bd80      	pop	{r7, pc}
   83be2:	bf00      	nop
   83be4:	20001828 	.word	0x20001828
   83be8:	00084b11 	.word	0x00084b11

00083bec <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   83bec:	b480      	push	{r7}
   83bee:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   83bf0:	4b06      	ldr	r3, [pc, #24]	; (83c0c <udc_req_std_dev_set_address+0x20>)
   83bf2:	88db      	ldrh	r3, [r3, #6]
   83bf4:	2b00      	cmp	r3, #0
   83bf6:	d001      	beq.n	83bfc <udc_req_std_dev_set_address+0x10>
		return false;
   83bf8:	2300      	movs	r3, #0
   83bfa:	e003      	b.n	83c04 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   83bfc:	4b03      	ldr	r3, [pc, #12]	; (83c0c <udc_req_std_dev_set_address+0x20>)
   83bfe:	4a04      	ldr	r2, [pc, #16]	; (83c10 <udc_req_std_dev_set_address+0x24>)
   83c00:	611a      	str	r2, [r3, #16]
	return true;
   83c02:	2301      	movs	r3, #1
}
   83c04:	4618      	mov	r0, r3
   83c06:	46bd      	mov	sp, r7
   83c08:	bc80      	pop	{r7}
   83c0a:	4770      	bx	lr
   83c0c:	20001828 	.word	0x20001828
   83c10:	00083bc9 	.word	0x00083bc9

00083c14 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   83c14:	b580      	push	{r7, lr}
   83c16:	b084      	sub	sp, #16
   83c18:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   83c1a:	2300      	movs	r3, #0
   83c1c:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   83c1e:	4b29      	ldr	r3, [pc, #164]	; (83cc4 <udc_req_std_dev_get_str_desc+0xb0>)
   83c20:	885b      	ldrh	r3, [r3, #2]
   83c22:	b2db      	uxtb	r3, r3
   83c24:	2b03      	cmp	r3, #3
   83c26:	d820      	bhi.n	83c6a <udc_req_std_dev_get_str_desc+0x56>
   83c28:	a201      	add	r2, pc, #4	; (adr r2, 83c30 <udc_req_std_dev_get_str_desc+0x1c>)
   83c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83c2e:	bf00      	nop
   83c30:	00083c41 	.word	0x00083c41
   83c34:	00083c4b 	.word	0x00083c4b
   83c38:	00083c55 	.word	0x00083c55
   83c3c:	00083c5f 	.word	0x00083c5f
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   83c40:	2104      	movs	r1, #4
   83c42:	4821      	ldr	r0, [pc, #132]	; (83cc8 <udc_req_std_dev_get_str_desc+0xb4>)
   83c44:	4b21      	ldr	r3, [pc, #132]	; (83ccc <udc_req_std_dev_get_str_desc+0xb8>)
   83c46:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   83c48:	e011      	b.n	83c6e <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   83c4a:	2315      	movs	r3, #21
   83c4c:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   83c4e:	4b20      	ldr	r3, [pc, #128]	; (83cd0 <udc_req_std_dev_get_str_desc+0xbc>)
   83c50:	60bb      	str	r3, [r7, #8]
		break;
   83c52:	e00c      	b.n	83c6e <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   83c54:	2313      	movs	r3, #19
   83c56:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   83c58:	4b1e      	ldr	r3, [pc, #120]	; (83cd4 <udc_req_std_dev_get_str_desc+0xc0>)
   83c5a:	60bb      	str	r3, [r7, #8]
		break;
   83c5c:	e007      	b.n	83c6e <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   83c5e:	2320      	movs	r3, #32
   83c60:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   83c62:	4b1d      	ldr	r3, [pc, #116]	; (83cd8 <udc_req_std_dev_get_str_desc+0xc4>)
   83c64:	4798      	blx	r3
   83c66:	60b8      	str	r0, [r7, #8]
		break;
   83c68:	e001      	b.n	83c6e <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   83c6a:	2300      	movs	r3, #0
   83c6c:	e026      	b.n	83cbc <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   83c6e:	79fb      	ldrb	r3, [r7, #7]
   83c70:	2b00      	cmp	r3, #0
   83c72:	d022      	beq.n	83cba <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   83c74:	2300      	movs	r3, #0
   83c76:	73fb      	strb	r3, [r7, #15]
   83c78:	e00d      	b.n	83c96 <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   83c7a:	7bfb      	ldrb	r3, [r7, #15]
   83c7c:	68ba      	ldr	r2, [r7, #8]
   83c7e:	4413      	add	r3, r2
   83c80:	781a      	ldrb	r2, [r3, #0]
   83c82:	7bfb      	ldrb	r3, [r7, #15]
   83c84:	b291      	uxth	r1, r2
   83c86:	4a15      	ldr	r2, [pc, #84]	; (83cdc <udc_req_std_dev_get_str_desc+0xc8>)
   83c88:	005b      	lsls	r3, r3, #1
   83c8a:	4413      	add	r3, r2
   83c8c:	460a      	mov	r2, r1
   83c8e:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   83c90:	7bfb      	ldrb	r3, [r7, #15]
   83c92:	3301      	adds	r3, #1
   83c94:	73fb      	strb	r3, [r7, #15]
   83c96:	7bfa      	ldrb	r2, [r7, #15]
   83c98:	79fb      	ldrb	r3, [r7, #7]
   83c9a:	429a      	cmp	r2, r3
   83c9c:	d3ed      	bcc.n	83c7a <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   83c9e:	79fb      	ldrb	r3, [r7, #7]
   83ca0:	3301      	adds	r3, #1
   83ca2:	b2db      	uxtb	r3, r3
   83ca4:	005b      	lsls	r3, r3, #1
   83ca6:	b2da      	uxtb	r2, r3
   83ca8:	4b0c      	ldr	r3, [pc, #48]	; (83cdc <udc_req_std_dev_get_str_desc+0xc8>)
   83caa:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   83cac:	4b0b      	ldr	r3, [pc, #44]	; (83cdc <udc_req_std_dev_get_str_desc+0xc8>)
   83cae:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   83cb0:	b29b      	uxth	r3, r3
   83cb2:	4619      	mov	r1, r3
   83cb4:	4809      	ldr	r0, [pc, #36]	; (83cdc <udc_req_std_dev_get_str_desc+0xc8>)
   83cb6:	4b05      	ldr	r3, [pc, #20]	; (83ccc <udc_req_std_dev_get_str_desc+0xb8>)
   83cb8:	4798      	blx	r3
	}

	return true;
   83cba:	2301      	movs	r3, #1
}
   83cbc:	4618      	mov	r0, r3
   83cbe:	3710      	adds	r7, #16
   83cc0:	46bd      	mov	sp, r7
   83cc2:	bd80      	pop	{r7, pc}
   83cc4:	20001828 	.word	0x20001828
   83cc8:	2000028c 	.word	0x2000028c
   83ccc:	00084b71 	.word	0x00084b71
   83cd0:	20000290 	.word	0x20000290
   83cd4:	200002a8 	.word	0x200002a8
   83cd8:	000836a1 	.word	0x000836a1
   83cdc:	200002bc 	.word	0x200002bc

00083ce0 <udc_req_std_dev_get_descriptor>:
		WINUSB_PLATFORM_DESCRIPTOR_LENGTH, 0x00, //length of other descriptor
		0x01, // when asking for MS 2.0 descriptor, will do bmRequestType = 0xC0, bRequest = this (0x01)
		0x00  // if non 0, Windows will send this before asking for the next descriptor
		};
static bool udc_req_std_dev_get_descriptor(void)
{
   83ce0:	b580      	push	{r7, lr}
   83ce2:	b082      	sub	sp, #8
   83ce4:	af00      	add	r7, sp, #0
	uint8_t conf_num;


	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   83ce6:	4b7f      	ldr	r3, [pc, #508]	; (83ee4 <udc_req_std_dev_get_descriptor+0x204>)
   83ce8:	885b      	ldrh	r3, [r3, #2]
   83cea:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   83cec:	4b7d      	ldr	r3, [pc, #500]	; (83ee4 <udc_req_std_dev_get_descriptor+0x204>)
   83cee:	885b      	ldrh	r3, [r3, #2]
   83cf0:	0a1b      	lsrs	r3, r3, #8
   83cf2:	b29b      	uxth	r3, r3
   83cf4:	b2db      	uxtb	r3, r3
   83cf6:	3b01      	subs	r3, #1
   83cf8:	2b0e      	cmp	r3, #14
   83cfa:	f200 80e0 	bhi.w	83ebe <udc_req_std_dev_get_descriptor+0x1de>
   83cfe:	a201      	add	r2, pc, #4	; (adr r2, 83d04 <udc_req_std_dev_get_descriptor+0x24>)
   83d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83d04:	00083d41 	.word	0x00083d41
   83d08:	00083d91 	.word	0x00083d91
   83d0c:	00083eab 	.word	0x00083eab
   83d10:	00083ebf 	.word	0x00083ebf
   83d14:	00083ebf 	.word	0x00083ebf
   83d18:	00083e0b 	.word	0x00083e0b
   83d1c:	00083e21 	.word	0x00083e21
   83d20:	00083ebf 	.word	0x00083ebf
   83d24:	00083ebf 	.word	0x00083ebf
   83d28:	00083ebf 	.word	0x00083ebf
   83d2c:	00083ebf 	.word	0x00083ebf
   83d30:	00083ebf 	.word	0x00083ebf
   83d34:	00083ebf 	.word	0x00083ebf
   83d38:	00083ebf 	.word	0x00083ebf
   83d3c:	00083ea1 	.word	0x00083ea1
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   83d40:	4b69      	ldr	r3, [pc, #420]	; (83ee8 <udc_req_std_dev_get_descriptor+0x208>)
   83d42:	4798      	blx	r3
   83d44:	4603      	mov	r3, r0
   83d46:	f083 0301 	eor.w	r3, r3, #1
   83d4a:	b2db      	uxtb	r3, r3
   83d4c:	2b00      	cmp	r3, #0
   83d4e:	d00a      	beq.n	83d66 <udc_req_std_dev_get_descriptor+0x86>
			//(udc_config.confdev_hs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   83d50:	4b66      	ldr	r3, [pc, #408]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83d52:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   83d54:	4b65      	ldr	r3, [pc, #404]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83d56:	689b      	ldr	r3, [r3, #8]
   83d58:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   83d5a:	b29b      	uxth	r3, r3
   83d5c:	4619      	mov	r1, r3
   83d5e:	4610      	mov	r0, r2
   83d60:	4b63      	ldr	r3, [pc, #396]	; (83ef0 <udc_req_std_dev_get_descriptor+0x210>)
   83d62:	4798      	blx	r3
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   83d64:	e0ae      	b.n	83ec4 <udc_req_std_dev_get_descriptor+0x1e4>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   83d66:	4b61      	ldr	r3, [pc, #388]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83d68:	681b      	ldr	r3, [r3, #0]
   83d6a:	2200      	movs	r2, #0
   83d6c:	f042 0210 	orr.w	r2, r2, #16
   83d70:	709a      	strb	r2, [r3, #2]
   83d72:	2200      	movs	r2, #0
   83d74:	f042 0202 	orr.w	r2, r2, #2
   83d78:	70da      	strb	r2, [r3, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   83d7a:	4b5c      	ldr	r3, [pc, #368]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83d7c:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   83d7e:	4b5b      	ldr	r3, [pc, #364]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83d80:	681b      	ldr	r3, [r3, #0]
   83d82:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   83d84:	b29b      	uxth	r3, r3
   83d86:	4619      	mov	r1, r3
   83d88:	4610      	mov	r0, r2
   83d8a:	4b59      	ldr	r3, [pc, #356]	; (83ef0 <udc_req_std_dev_get_descriptor+0x210>)
   83d8c:	4798      	blx	r3
		break;
   83d8e:	e099      	b.n	83ec4 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   83d90:	4b55      	ldr	r3, [pc, #340]	; (83ee8 <udc_req_std_dev_get_descriptor+0x208>)
   83d92:	4798      	blx	r3
   83d94:	4603      	mov	r3, r0
   83d96:	2b00      	cmp	r3, #0
   83d98:	d019      	beq.n	83dce <udc_req_std_dev_get_descriptor+0xee>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   83d9a:	4b54      	ldr	r3, [pc, #336]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83d9c:	689b      	ldr	r3, [r3, #8]
   83d9e:	7c5b      	ldrb	r3, [r3, #17]
   83da0:	79fa      	ldrb	r2, [r7, #7]
   83da2:	429a      	cmp	r2, r3
   83da4:	d301      	bcc.n	83daa <udc_req_std_dev_get_descriptor+0xca>
					bNumConfigurations) {
				return false;
   83da6:	2300      	movs	r3, #0
   83da8:	e097      	b.n	83eda <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83daa:	4b50      	ldr	r3, [pc, #320]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83dac:	691a      	ldr	r2, [r3, #16]
   83dae:	79fb      	ldrb	r3, [r7, #7]
   83db0:	00db      	lsls	r3, r3, #3
   83db2:	4413      	add	r3, r2
   83db4:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   83db6:	4b4d      	ldr	r3, [pc, #308]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83db8:	691a      	ldr	r2, [r3, #16]
   83dba:	79fb      	ldrb	r3, [r7, #7]
   83dbc:	00db      	lsls	r3, r3, #3
   83dbe:	4413      	add	r3, r2
   83dc0:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83dc2:	885b      	ldrh	r3, [r3, #2]
   83dc4:	b29b      	uxth	r3, r3
   83dc6:	4619      	mov	r1, r3
   83dc8:	4b49      	ldr	r3, [pc, #292]	; (83ef0 <udc_req_std_dev_get_descriptor+0x210>)
   83dca:	4798      	blx	r3
   83dcc:	e018      	b.n	83e00 <udc_req_std_dev_get_descriptor+0x120>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   83dce:	4b47      	ldr	r3, [pc, #284]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83dd0:	681b      	ldr	r3, [r3, #0]
   83dd2:	7c5b      	ldrb	r3, [r3, #17]
   83dd4:	79fa      	ldrb	r2, [r7, #7]
   83dd6:	429a      	cmp	r2, r3
   83dd8:	d301      	bcc.n	83dde <udc_req_std_dev_get_descriptor+0xfe>
					bNumConfigurations) {
				return false;
   83dda:	2300      	movs	r3, #0
   83ddc:	e07d      	b.n	83eda <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83dde:	4b43      	ldr	r3, [pc, #268]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83de0:	685a      	ldr	r2, [r3, #4]
   83de2:	79fb      	ldrb	r3, [r7, #7]
   83de4:	00db      	lsls	r3, r3, #3
   83de6:	4413      	add	r3, r2
   83de8:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   83dea:	4b40      	ldr	r3, [pc, #256]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83dec:	685a      	ldr	r2, [r3, #4]
   83dee:	79fb      	ldrb	r3, [r7, #7]
   83df0:	00db      	lsls	r3, r3, #3
   83df2:	4413      	add	r3, r2
   83df4:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83df6:	885b      	ldrh	r3, [r3, #2]
   83df8:	b29b      	uxth	r3, r3
   83dfa:	4619      	mov	r1, r3
   83dfc:	4b3c      	ldr	r3, [pc, #240]	; (83ef0 <udc_req_std_dev_get_descriptor+0x210>)
   83dfe:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83e00:	4b38      	ldr	r3, [pc, #224]	; (83ee4 <udc_req_std_dev_get_descriptor+0x204>)
   83e02:	689b      	ldr	r3, [r3, #8]
   83e04:	2202      	movs	r2, #2
   83e06:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   83e08:	e05c      	b.n	83ec4 <udc_req_std_dev_get_descriptor+0x1e4>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   83e0a:	4b38      	ldr	r3, [pc, #224]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83e0c:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   83e0e:	4b37      	ldr	r3, [pc, #220]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83e10:	68db      	ldr	r3, [r3, #12]
   83e12:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   83e14:	b29b      	uxth	r3, r3
   83e16:	4619      	mov	r1, r3
   83e18:	4610      	mov	r0, r2
   83e1a:	4b35      	ldr	r3, [pc, #212]	; (83ef0 <udc_req_std_dev_get_descriptor+0x210>)
   83e1c:	4798      	blx	r3
		break;
   83e1e:	e051      	b.n	83ec4 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   83e20:	4b31      	ldr	r3, [pc, #196]	; (83ee8 <udc_req_std_dev_get_descriptor+0x208>)
   83e22:	4798      	blx	r3
   83e24:	4603      	mov	r3, r0
   83e26:	f083 0301 	eor.w	r3, r3, #1
   83e2a:	b2db      	uxtb	r3, r3
   83e2c:	2b00      	cmp	r3, #0
   83e2e:	d019      	beq.n	83e64 <udc_req_std_dev_get_descriptor+0x184>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   83e30:	4b2e      	ldr	r3, [pc, #184]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83e32:	689b      	ldr	r3, [r3, #8]
   83e34:	7c5b      	ldrb	r3, [r3, #17]
   83e36:	79fa      	ldrb	r2, [r7, #7]
   83e38:	429a      	cmp	r2, r3
   83e3a:	d301      	bcc.n	83e40 <udc_req_std_dev_get_descriptor+0x160>
					bNumConfigurations) {
				return false;
   83e3c:	2300      	movs	r3, #0
   83e3e:	e04c      	b.n	83eda <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   83e40:	4b2a      	ldr	r3, [pc, #168]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83e42:	691a      	ldr	r2, [r3, #16]
   83e44:	79fb      	ldrb	r3, [r7, #7]
   83e46:	00db      	lsls	r3, r3, #3
   83e48:	4413      	add	r3, r2
   83e4a:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   83e4c:	4b27      	ldr	r3, [pc, #156]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83e4e:	691a      	ldr	r2, [r3, #16]
   83e50:	79fb      	ldrb	r3, [r7, #7]
   83e52:	00db      	lsls	r3, r3, #3
   83e54:	4413      	add	r3, r2
   83e56:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83e58:	885b      	ldrh	r3, [r3, #2]
   83e5a:	b29b      	uxth	r3, r3
   83e5c:	4619      	mov	r1, r3
   83e5e:	4b24      	ldr	r3, [pc, #144]	; (83ef0 <udc_req_std_dev_get_descriptor+0x210>)
   83e60:	4798      	blx	r3
   83e62:	e018      	b.n	83e96 <udc_req_std_dev_get_descriptor+0x1b6>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   83e64:	4b21      	ldr	r3, [pc, #132]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83e66:	681b      	ldr	r3, [r3, #0]
   83e68:	7c5b      	ldrb	r3, [r3, #17]
   83e6a:	79fa      	ldrb	r2, [r7, #7]
   83e6c:	429a      	cmp	r2, r3
   83e6e:	d301      	bcc.n	83e74 <udc_req_std_dev_get_descriptor+0x194>
					bNumConfigurations) {
				return false;
   83e70:	2300      	movs	r3, #0
   83e72:	e032      	b.n	83eda <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   83e74:	4b1d      	ldr	r3, [pc, #116]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83e76:	685a      	ldr	r2, [r3, #4]
   83e78:	79fb      	ldrb	r3, [r7, #7]
   83e7a:	00db      	lsls	r3, r3, #3
   83e7c:	4413      	add	r3, r2
   83e7e:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   83e80:	4b1a      	ldr	r3, [pc, #104]	; (83eec <udc_req_std_dev_get_descriptor+0x20c>)
   83e82:	685a      	ldr	r2, [r3, #4]
   83e84:	79fb      	ldrb	r3, [r7, #7]
   83e86:	00db      	lsls	r3, r3, #3
   83e88:	4413      	add	r3, r2
   83e8a:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   83e8c:	885b      	ldrh	r3, [r3, #2]
   83e8e:	b29b      	uxth	r3, r3
   83e90:	4619      	mov	r1, r3
   83e92:	4b17      	ldr	r3, [pc, #92]	; (83ef0 <udc_req_std_dev_get_descriptor+0x210>)
   83e94:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   83e96:	4b13      	ldr	r3, [pc, #76]	; (83ee4 <udc_req_std_dev_get_descriptor+0x204>)
   83e98:	689b      	ldr	r3, [r3, #8]
   83e9a:	2207      	movs	r2, #7
   83e9c:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   83e9e:	e011      	b.n	83ec4 <udc_req_std_dev_get_descriptor+0x1e4>
#endif
	case USB_DT_BOS: //bos descriptor
		udd_set_setup_payload( (uint8_t *) BOS_DESC,
   83ea0:	2121      	movs	r1, #33	; 0x21
   83ea2:	4814      	ldr	r0, [pc, #80]	; (83ef4 <udc_req_std_dev_get_descriptor+0x214>)
   83ea4:	4b12      	ldr	r3, [pc, #72]	; (83ef0 <udc_req_std_dev_get_descriptor+0x210>)
   83ea6:	4798      	blx	r3
			0x21);
		break;
   83ea8:	e00c      	b.n	83ec4 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   83eaa:	4b13      	ldr	r3, [pc, #76]	; (83ef8 <udc_req_std_dev_get_descriptor+0x218>)
   83eac:	4798      	blx	r3
   83eae:	4603      	mov	r3, r0
   83eb0:	f083 0301 	eor.w	r3, r3, #1
   83eb4:	b2db      	uxtb	r3, r3
   83eb6:	2b00      	cmp	r3, #0
   83eb8:	d003      	beq.n	83ec2 <udc_req_std_dev_get_descriptor+0x1e2>
			return false;
   83eba:	2300      	movs	r3, #0
   83ebc:	e00d      	b.n	83eda <udc_req_std_dev_get_descriptor+0x1fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   83ebe:	2300      	movs	r3, #0
   83ec0:	e00b      	b.n	83eda <udc_req_std_dev_get_descriptor+0x1fa>
		break;
   83ec2:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   83ec4:	4b07      	ldr	r3, [pc, #28]	; (83ee4 <udc_req_std_dev_get_descriptor+0x204>)
   83ec6:	88da      	ldrh	r2, [r3, #6]
   83ec8:	4b06      	ldr	r3, [pc, #24]	; (83ee4 <udc_req_std_dev_get_descriptor+0x204>)
   83eca:	899b      	ldrh	r3, [r3, #12]
   83ecc:	429a      	cmp	r2, r3
   83ece:	d203      	bcs.n	83ed8 <udc_req_std_dev_get_descriptor+0x1f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83ed0:	4b04      	ldr	r3, [pc, #16]	; (83ee4 <udc_req_std_dev_get_descriptor+0x204>)
   83ed2:	88da      	ldrh	r2, [r3, #6]
   83ed4:	4b03      	ldr	r3, [pc, #12]	; (83ee4 <udc_req_std_dev_get_descriptor+0x204>)
   83ed6:	819a      	strh	r2, [r3, #12]
	}
	return true;
   83ed8:	2301      	movs	r3, #1
}
   83eda:	4618      	mov	r0, r3
   83edc:	3708      	adds	r7, #8
   83ede:	46bd      	mov	sp, r7
   83ee0:	bd80      	pop	{r7, pc}
   83ee2:	bf00      	nop
   83ee4:	20001828 	.word	0x20001828
   83ee8:	00084aed 	.word	0x00084aed
   83eec:	20000428 	.word	0x20000428
   83ef0:	00084b71 	.word	0x00084b71
   83ef4:	0008d3bc 	.word	0x0008d3bc
   83ef8:	00083c15 	.word	0x00083c15

00083efc <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   83efc:	b580      	push	{r7, lr}
   83efe:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   83f00:	4b06      	ldr	r3, [pc, #24]	; (83f1c <udc_req_std_dev_get_configuration+0x20>)
   83f02:	88db      	ldrh	r3, [r3, #6]
   83f04:	2b01      	cmp	r3, #1
   83f06:	d001      	beq.n	83f0c <udc_req_std_dev_get_configuration+0x10>
		return false;
   83f08:	2300      	movs	r3, #0
   83f0a:	e004      	b.n	83f16 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   83f0c:	2101      	movs	r1, #1
   83f0e:	4804      	ldr	r0, [pc, #16]	; (83f20 <udc_req_std_dev_get_configuration+0x24>)
   83f10:	4b04      	ldr	r3, [pc, #16]	; (83f24 <udc_req_std_dev_get_configuration+0x28>)
   83f12:	4798      	blx	r3
	return true;
   83f14:	2301      	movs	r3, #1
}
   83f16:	4618      	mov	r0, r3
   83f18:	bd80      	pop	{r7, pc}
   83f1a:	bf00      	nop
   83f1c:	20001828 	.word	0x20001828
   83f20:	20001336 	.word	0x20001336
   83f24:	00084b71 	.word	0x00084b71

00083f28 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   83f28:	b580      	push	{r7, lr}
   83f2a:	b082      	sub	sp, #8
   83f2c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   83f2e:	4b37      	ldr	r3, [pc, #220]	; (8400c <udc_req_std_dev_set_configuration+0xe4>)
   83f30:	88db      	ldrh	r3, [r3, #6]
   83f32:	2b00      	cmp	r3, #0
   83f34:	d001      	beq.n	83f3a <udc_req_std_dev_set_configuration+0x12>
		return false;
   83f36:	2300      	movs	r3, #0
   83f38:	e063      	b.n	84002 <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   83f3a:	4b35      	ldr	r3, [pc, #212]	; (84010 <udc_req_std_dev_set_configuration+0xe8>)
   83f3c:	4798      	blx	r3
   83f3e:	4603      	mov	r3, r0
   83f40:	2b00      	cmp	r3, #0
   83f42:	d101      	bne.n	83f48 <udc_req_std_dev_set_configuration+0x20>
		return false;
   83f44:	2300      	movs	r3, #0
   83f46:	e05c      	b.n	84002 <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   83f48:	4b32      	ldr	r3, [pc, #200]	; (84014 <udc_req_std_dev_set_configuration+0xec>)
   83f4a:	4798      	blx	r3
   83f4c:	4603      	mov	r3, r0
   83f4e:	2b00      	cmp	r3, #0
   83f50:	d009      	beq.n	83f66 <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83f52:	4b2e      	ldr	r3, [pc, #184]	; (8400c <udc_req_std_dev_set_configuration+0xe4>)
   83f54:	885b      	ldrh	r3, [r3, #2]
   83f56:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   83f58:	4a2f      	ldr	r2, [pc, #188]	; (84018 <udc_req_std_dev_set_configuration+0xf0>)
   83f5a:	6892      	ldr	r2, [r2, #8]
   83f5c:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83f5e:	4293      	cmp	r3, r2
   83f60:	dd0b      	ble.n	83f7a <udc_req_std_dev_set_configuration+0x52>
			return false;
   83f62:	2300      	movs	r3, #0
   83f64:	e04d      	b.n	84002 <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83f66:	4b29      	ldr	r3, [pc, #164]	; (8400c <udc_req_std_dev_set_configuration+0xe4>)
   83f68:	885b      	ldrh	r3, [r3, #2]
   83f6a:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   83f6c:	4a2a      	ldr	r2, [pc, #168]	; (84018 <udc_req_std_dev_set_configuration+0xf0>)
   83f6e:	6812      	ldr	r2, [r2, #0]
   83f70:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   83f72:	4293      	cmp	r3, r2
   83f74:	dd01      	ble.n	83f7a <udc_req_std_dev_set_configuration+0x52>
			return false;
   83f76:	2300      	movs	r3, #0
   83f78:	e043      	b.n	84002 <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   83f7a:	4b28      	ldr	r3, [pc, #160]	; (8401c <udc_req_std_dev_set_configuration+0xf4>)
   83f7c:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   83f7e:	4b23      	ldr	r3, [pc, #140]	; (8400c <udc_req_std_dev_set_configuration+0xe4>)
   83f80:	885b      	ldrh	r3, [r3, #2]
   83f82:	b2da      	uxtb	r2, r3
   83f84:	4b26      	ldr	r3, [pc, #152]	; (84020 <udc_req_std_dev_set_configuration+0xf8>)
   83f86:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   83f88:	4b25      	ldr	r3, [pc, #148]	; (84020 <udc_req_std_dev_set_configuration+0xf8>)
   83f8a:	781b      	ldrb	r3, [r3, #0]
   83f8c:	2b00      	cmp	r3, #0
   83f8e:	d101      	bne.n	83f94 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   83f90:	2301      	movs	r3, #1
   83f92:	e036      	b.n	84002 <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   83f94:	4b1f      	ldr	r3, [pc, #124]	; (84014 <udc_req_std_dev_set_configuration+0xec>)
   83f96:	4798      	blx	r3
   83f98:	4603      	mov	r3, r0
   83f9a:	2b00      	cmp	r3, #0
   83f9c:	d00b      	beq.n	83fb6 <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   83f9e:	4b1e      	ldr	r3, [pc, #120]	; (84018 <udc_req_std_dev_set_configuration+0xf0>)
   83fa0:	691a      	ldr	r2, [r3, #16]
   83fa2:	4b1f      	ldr	r3, [pc, #124]	; (84020 <udc_req_std_dev_set_configuration+0xf8>)
   83fa4:	781b      	ldrb	r3, [r3, #0]
   83fa6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   83faa:	3b01      	subs	r3, #1
   83fac:	00db      	lsls	r3, r3, #3
   83fae:	4413      	add	r3, r2
   83fb0:	4a1c      	ldr	r2, [pc, #112]	; (84024 <udc_req_std_dev_set_configuration+0xfc>)
   83fb2:	6013      	str	r3, [r2, #0]
   83fb4:	e00a      	b.n	83fcc <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   83fb6:	4b18      	ldr	r3, [pc, #96]	; (84018 <udc_req_std_dev_set_configuration+0xf0>)
   83fb8:	685a      	ldr	r2, [r3, #4]
   83fba:	4b19      	ldr	r3, [pc, #100]	; (84020 <udc_req_std_dev_set_configuration+0xf8>)
   83fbc:	781b      	ldrb	r3, [r3, #0]
   83fbe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   83fc2:	3b01      	subs	r3, #1
   83fc4:	00db      	lsls	r3, r3, #3
   83fc6:	4413      	add	r3, r2
   83fc8:	4a16      	ldr	r2, [pc, #88]	; (84024 <udc_req_std_dev_set_configuration+0xfc>)
   83fca:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83fcc:	2300      	movs	r3, #0
   83fce:	71fb      	strb	r3, [r7, #7]
   83fd0:	e00f      	b.n	83ff2 <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   83fd2:	79fb      	ldrb	r3, [r7, #7]
   83fd4:	2100      	movs	r1, #0
   83fd6:	4618      	mov	r0, r3
   83fd8:	4b13      	ldr	r3, [pc, #76]	; (84028 <udc_req_std_dev_set_configuration+0x100>)
   83fda:	4798      	blx	r3
   83fdc:	4603      	mov	r3, r0
   83fde:	f083 0301 	eor.w	r3, r3, #1
   83fe2:	b2db      	uxtb	r3, r3
   83fe4:	2b00      	cmp	r3, #0
   83fe6:	d001      	beq.n	83fec <udc_req_std_dev_set_configuration+0xc4>
			return false;
   83fe8:	2300      	movs	r3, #0
   83fea:	e00a      	b.n	84002 <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   83fec:	79fb      	ldrb	r3, [r7, #7]
   83fee:	3301      	adds	r3, #1
   83ff0:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   83ff2:	4b0c      	ldr	r3, [pc, #48]	; (84024 <udc_req_std_dev_set_configuration+0xfc>)
   83ff4:	681b      	ldr	r3, [r3, #0]
   83ff6:	681b      	ldr	r3, [r3, #0]
   83ff8:	791b      	ldrb	r3, [r3, #4]
   83ffa:	79fa      	ldrb	r2, [r7, #7]
   83ffc:	429a      	cmp	r2, r3
   83ffe:	d3e8      	bcc.n	83fd2 <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   84000:	2301      	movs	r3, #1
}
   84002:	4618      	mov	r0, r3
   84004:	3708      	adds	r7, #8
   84006:	46bd      	mov	sp, r7
   84008:	bd80      	pop	{r7, pc}
   8400a:	bf00      	nop
   8400c:	20001828 	.word	0x20001828
   84010:	00084b55 	.word	0x00084b55
   84014:	00084aed 	.word	0x00084aed
   84018:	20000428 	.word	0x20000428
   8401c:	0008392d 	.word	0x0008392d
   84020:	20001336 	.word	0x20001336
   84024:	20001338 	.word	0x20001338
   84028:	00083885 	.word	0x00083885

0008402c <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   8402c:	b580      	push	{r7, lr}
   8402e:	b082      	sub	sp, #8
   84030:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   84032:	4b1e      	ldr	r3, [pc, #120]	; (840ac <udc_req_std_iface_get_setting+0x80>)
   84034:	88db      	ldrh	r3, [r3, #6]
   84036:	2b01      	cmp	r3, #1
   84038:	d001      	beq.n	8403e <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   8403a:	2300      	movs	r3, #0
   8403c:	e032      	b.n	840a4 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   8403e:	4b1c      	ldr	r3, [pc, #112]	; (840b0 <udc_req_std_iface_get_setting+0x84>)
   84040:	781b      	ldrb	r3, [r3, #0]
   84042:	2b00      	cmp	r3, #0
   84044:	d101      	bne.n	8404a <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   84046:	2300      	movs	r3, #0
   84048:	e02c      	b.n	840a4 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8404a:	4b18      	ldr	r3, [pc, #96]	; (840ac <udc_req_std_iface_get_setting+0x80>)
   8404c:	889b      	ldrh	r3, [r3, #4]
   8404e:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   84050:	4b18      	ldr	r3, [pc, #96]	; (840b4 <udc_req_std_iface_get_setting+0x88>)
   84052:	681b      	ldr	r3, [r3, #0]
   84054:	681b      	ldr	r3, [r3, #0]
   84056:	791b      	ldrb	r3, [r3, #4]
   84058:	79fa      	ldrb	r2, [r7, #7]
   8405a:	429a      	cmp	r2, r3
   8405c:	d301      	bcc.n	84062 <udc_req_std_iface_get_setting+0x36>
		return false;
   8405e:	2300      	movs	r3, #0
   84060:	e020      	b.n	840a4 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   84062:	79fb      	ldrb	r3, [r7, #7]
   84064:	2100      	movs	r1, #0
   84066:	4618      	mov	r0, r3
   84068:	4b13      	ldr	r3, [pc, #76]	; (840b8 <udc_req_std_iface_get_setting+0x8c>)
   8406a:	4798      	blx	r3
   8406c:	4603      	mov	r3, r0
   8406e:	f083 0301 	eor.w	r3, r3, #1
   84072:	b2db      	uxtb	r3, r3
   84074:	2b00      	cmp	r3, #0
   84076:	d001      	beq.n	8407c <udc_req_std_iface_get_setting+0x50>
		return false;
   84078:	2300      	movs	r3, #0
   8407a:	e013      	b.n	840a4 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8407c:	4b0d      	ldr	r3, [pc, #52]	; (840b4 <udc_req_std_iface_get_setting+0x88>)
   8407e:	681b      	ldr	r3, [r3, #0]
   84080:	685a      	ldr	r2, [r3, #4]
   84082:	79fb      	ldrb	r3, [r7, #7]
   84084:	009b      	lsls	r3, r3, #2
   84086:	4413      	add	r3, r2
   84088:	681b      	ldr	r3, [r3, #0]
   8408a:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   8408c:	683b      	ldr	r3, [r7, #0]
   8408e:	68db      	ldr	r3, [r3, #12]
   84090:	4798      	blx	r3
   84092:	4603      	mov	r3, r0
   84094:	461a      	mov	r2, r3
   84096:	4b09      	ldr	r3, [pc, #36]	; (840bc <udc_req_std_iface_get_setting+0x90>)
   84098:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   8409a:	2101      	movs	r1, #1
   8409c:	4807      	ldr	r0, [pc, #28]	; (840bc <udc_req_std_iface_get_setting+0x90>)
   8409e:	4b08      	ldr	r3, [pc, #32]	; (840c0 <udc_req_std_iface_get_setting+0x94>)
   840a0:	4798      	blx	r3
	return true;
   840a2:	2301      	movs	r3, #1
}
   840a4:	4618      	mov	r0, r3
   840a6:	3708      	adds	r7, #8
   840a8:	46bd      	mov	sp, r7
   840aa:	bd80      	pop	{r7, pc}
   840ac:	20001828 	.word	0x20001828
   840b0:	20001336 	.word	0x20001336
   840b4:	20001338 	.word	0x20001338
   840b8:	00083749 	.word	0x00083749
   840bc:	20001342 	.word	0x20001342
   840c0:	00084b71 	.word	0x00084b71

000840c4 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   840c4:	b580      	push	{r7, lr}
   840c6:	b082      	sub	sp, #8
   840c8:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   840ca:	4b14      	ldr	r3, [pc, #80]	; (8411c <udc_req_std_iface_set_setting+0x58>)
   840cc:	88db      	ldrh	r3, [r3, #6]
   840ce:	2b00      	cmp	r3, #0
   840d0:	d001      	beq.n	840d6 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   840d2:	2300      	movs	r3, #0
   840d4:	e01e      	b.n	84114 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   840d6:	4b12      	ldr	r3, [pc, #72]	; (84120 <udc_req_std_iface_set_setting+0x5c>)
   840d8:	781b      	ldrb	r3, [r3, #0]
   840da:	2b00      	cmp	r3, #0
   840dc:	d101      	bne.n	840e2 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   840de:	2300      	movs	r3, #0
   840e0:	e018      	b.n	84114 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   840e2:	4b0e      	ldr	r3, [pc, #56]	; (8411c <udc_req_std_iface_set_setting+0x58>)
   840e4:	889b      	ldrh	r3, [r3, #4]
   840e6:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   840e8:	4b0c      	ldr	r3, [pc, #48]	; (8411c <udc_req_std_iface_set_setting+0x58>)
   840ea:	885b      	ldrh	r3, [r3, #2]
   840ec:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   840ee:	79fb      	ldrb	r3, [r7, #7]
   840f0:	4618      	mov	r0, r3
   840f2:	4b0c      	ldr	r3, [pc, #48]	; (84124 <udc_req_std_iface_set_setting+0x60>)
   840f4:	4798      	blx	r3
   840f6:	4603      	mov	r3, r0
   840f8:	f083 0301 	eor.w	r3, r3, #1
   840fc:	b2db      	uxtb	r3, r3
   840fe:	2b00      	cmp	r3, #0
   84100:	d001      	beq.n	84106 <udc_req_std_iface_set_setting+0x42>
		return false;
   84102:	2300      	movs	r3, #0
   84104:	e006      	b.n	84114 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   84106:	79ba      	ldrb	r2, [r7, #6]
   84108:	79fb      	ldrb	r3, [r7, #7]
   8410a:	4611      	mov	r1, r2
   8410c:	4618      	mov	r0, r3
   8410e:	4b06      	ldr	r3, [pc, #24]	; (84128 <udc_req_std_iface_set_setting+0x64>)
   84110:	4798      	blx	r3
   84112:	4603      	mov	r3, r0
}
   84114:	4618      	mov	r0, r3
   84116:	3708      	adds	r7, #8
   84118:	46bd      	mov	sp, r7
   8411a:	bd80      	pop	{r7, pc}
   8411c:	20001828 	.word	0x20001828
   84120:	20001336 	.word	0x20001336
   84124:	000837e5 	.word	0x000837e5
   84128:	00083885 	.word	0x00083885

0008412c <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   8412c:	b580      	push	{r7, lr}
   8412e:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   84130:	4b55      	ldr	r3, [pc, #340]	; (84288 <udc_reqstd+0x15c>)
   84132:	781b      	ldrb	r3, [r3, #0]
   84134:	b25b      	sxtb	r3, r3
   84136:	2b00      	cmp	r3, #0
   84138:	da44      	bge.n	841c4 <udc_reqstd+0x98>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   8413a:	4b53      	ldr	r3, [pc, #332]	; (84288 <udc_reqstd+0x15c>)
   8413c:	88db      	ldrh	r3, [r3, #6]
   8413e:	2b00      	cmp	r3, #0
   84140:	d101      	bne.n	84146 <udc_reqstd+0x1a>
			return false; // Error for USB host
   84142:	2300      	movs	r3, #0
   84144:	e09d      	b.n	84282 <udc_reqstd+0x156>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   84146:	4b50      	ldr	r3, [pc, #320]	; (84288 <udc_reqstd+0x15c>)
   84148:	781b      	ldrb	r3, [r3, #0]
   8414a:	f003 031f 	and.w	r3, r3, #31
   8414e:	2b00      	cmp	r3, #0
   84150:	d116      	bne.n	84180 <udc_reqstd+0x54>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   84152:	4b4d      	ldr	r3, [pc, #308]	; (84288 <udc_reqstd+0x15c>)
   84154:	785b      	ldrb	r3, [r3, #1]
   84156:	2b08      	cmp	r3, #8
   84158:	d00e      	beq.n	84178 <udc_reqstd+0x4c>
   8415a:	2b08      	cmp	r3, #8
   8415c:	dc12      	bgt.n	84184 <udc_reqstd+0x58>
   8415e:	2b00      	cmp	r3, #0
   84160:	d002      	beq.n	84168 <udc_reqstd+0x3c>
   84162:	2b06      	cmp	r3, #6
   84164:	d004      	beq.n	84170 <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   84166:	e00d      	b.n	84184 <udc_reqstd+0x58>
				return udc_req_std_dev_get_status();
   84168:	4b48      	ldr	r3, [pc, #288]	; (8428c <udc_reqstd+0x160>)
   8416a:	4798      	blx	r3
   8416c:	4603      	mov	r3, r0
   8416e:	e088      	b.n	84282 <udc_reqstd+0x156>
				return udc_req_std_dev_get_descriptor();
   84170:	4b47      	ldr	r3, [pc, #284]	; (84290 <udc_reqstd+0x164>)
   84172:	4798      	blx	r3
   84174:	4603      	mov	r3, r0
   84176:	e084      	b.n	84282 <udc_reqstd+0x156>
				return udc_req_std_dev_get_configuration();
   84178:	4b46      	ldr	r3, [pc, #280]	; (84294 <udc_reqstd+0x168>)
   8417a:	4798      	blx	r3
   8417c:	4603      	mov	r3, r0
   8417e:	e080      	b.n	84282 <udc_reqstd+0x156>
			}
		}
   84180:	bf00      	nop
   84182:	e000      	b.n	84186 <udc_reqstd+0x5a>
				break;
   84184:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   84186:	4b40      	ldr	r3, [pc, #256]	; (84288 <udc_reqstd+0x15c>)
   84188:	781b      	ldrb	r3, [r3, #0]
   8418a:	f003 031f 	and.w	r3, r3, #31
   8418e:	2b01      	cmp	r3, #1
   84190:	d107      	bne.n	841a2 <udc_reqstd+0x76>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   84192:	4b3d      	ldr	r3, [pc, #244]	; (84288 <udc_reqstd+0x15c>)
   84194:	785b      	ldrb	r3, [r3, #1]
   84196:	2b0a      	cmp	r3, #10
   84198:	d105      	bne.n	841a6 <udc_reqstd+0x7a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   8419a:	4b3f      	ldr	r3, [pc, #252]	; (84298 <udc_reqstd+0x16c>)
   8419c:	4798      	blx	r3
   8419e:	4603      	mov	r3, r0
   841a0:	e06f      	b.n	84282 <udc_reqstd+0x156>
			default:
				break;
			}
		}
   841a2:	bf00      	nop
   841a4:	e000      	b.n	841a8 <udc_reqstd+0x7c>
				break;
   841a6:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   841a8:	4b37      	ldr	r3, [pc, #220]	; (84288 <udc_reqstd+0x15c>)
   841aa:	781b      	ldrb	r3, [r3, #0]
   841ac:	f003 031f 	and.w	r3, r3, #31
   841b0:	2b02      	cmp	r3, #2
   841b2:	d160      	bne.n	84276 <udc_reqstd+0x14a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   841b4:	4b34      	ldr	r3, [pc, #208]	; (84288 <udc_reqstd+0x15c>)
   841b6:	785b      	ldrb	r3, [r3, #1]
   841b8:	2b00      	cmp	r3, #0
   841ba:	d15e      	bne.n	8427a <udc_reqstd+0x14e>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   841bc:	4b37      	ldr	r3, [pc, #220]	; (8429c <udc_reqstd+0x170>)
   841be:	4798      	blx	r3
   841c0:	4603      	mov	r3, r0
   841c2:	e05e      	b.n	84282 <udc_reqstd+0x156>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   841c4:	4b30      	ldr	r3, [pc, #192]	; (84288 <udc_reqstd+0x15c>)
   841c6:	781b      	ldrb	r3, [r3, #0]
   841c8:	f003 031f 	and.w	r3, r3, #31
   841cc:	2b00      	cmp	r3, #0
   841ce:	d129      	bne.n	84224 <udc_reqstd+0xf8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   841d0:	4b2d      	ldr	r3, [pc, #180]	; (84288 <udc_reqstd+0x15c>)
   841d2:	785b      	ldrb	r3, [r3, #1]
   841d4:	3b01      	subs	r3, #1
   841d6:	2b08      	cmp	r3, #8
   841d8:	d826      	bhi.n	84228 <udc_reqstd+0xfc>
   841da:	a201      	add	r2, pc, #4	; (adr r2, 841e0 <udc_reqstd+0xb4>)
   841dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   841e0:	0008420d 	.word	0x0008420d
   841e4:	00084229 	.word	0x00084229
   841e8:	00084215 	.word	0x00084215
   841ec:	00084229 	.word	0x00084229
   841f0:	00084205 	.word	0x00084205
   841f4:	00084229 	.word	0x00084229
   841f8:	00084229 	.word	0x00084229
   841fc:	00084229 	.word	0x00084229
   84200:	0008421d 	.word	0x0008421d
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   84204:	4b26      	ldr	r3, [pc, #152]	; (842a0 <udc_reqstd+0x174>)
   84206:	4798      	blx	r3
   84208:	4603      	mov	r3, r0
   8420a:	e03a      	b.n	84282 <udc_reqstd+0x156>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   8420c:	4b25      	ldr	r3, [pc, #148]	; (842a4 <udc_reqstd+0x178>)
   8420e:	4798      	blx	r3
   84210:	4603      	mov	r3, r0
   84212:	e036      	b.n	84282 <udc_reqstd+0x156>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   84214:	4b24      	ldr	r3, [pc, #144]	; (842a8 <udc_reqstd+0x17c>)
   84216:	4798      	blx	r3
   84218:	4603      	mov	r3, r0
   8421a:	e032      	b.n	84282 <udc_reqstd+0x156>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   8421c:	4b23      	ldr	r3, [pc, #140]	; (842ac <udc_reqstd+0x180>)
   8421e:	4798      	blx	r3
   84220:	4603      	mov	r3, r0
   84222:	e02e      	b.n	84282 <udc_reqstd+0x156>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   84224:	bf00      	nop
   84226:	e000      	b.n	8422a <udc_reqstd+0xfe>
				break;
   84228:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8422a:	4b17      	ldr	r3, [pc, #92]	; (84288 <udc_reqstd+0x15c>)
   8422c:	781b      	ldrb	r3, [r3, #0]
   8422e:	f003 031f 	and.w	r3, r3, #31
   84232:	2b01      	cmp	r3, #1
   84234:	d107      	bne.n	84246 <udc_reqstd+0x11a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   84236:	4b14      	ldr	r3, [pc, #80]	; (84288 <udc_reqstd+0x15c>)
   84238:	785b      	ldrb	r3, [r3, #1]
   8423a:	2b0b      	cmp	r3, #11
   8423c:	d105      	bne.n	8424a <udc_reqstd+0x11e>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   8423e:	4b1c      	ldr	r3, [pc, #112]	; (842b0 <udc_reqstd+0x184>)
   84240:	4798      	blx	r3
   84242:	4603      	mov	r3, r0
   84244:	e01d      	b.n	84282 <udc_reqstd+0x156>
			default:
				break;
			}
		}
   84246:	bf00      	nop
   84248:	e000      	b.n	8424c <udc_reqstd+0x120>
				break;
   8424a:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   8424c:	4b0e      	ldr	r3, [pc, #56]	; (84288 <udc_reqstd+0x15c>)
   8424e:	781b      	ldrb	r3, [r3, #0]
   84250:	f003 031f 	and.w	r3, r3, #31
   84254:	2b02      	cmp	r3, #2
   84256:	d112      	bne.n	8427e <udc_reqstd+0x152>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   84258:	4b0b      	ldr	r3, [pc, #44]	; (84288 <udc_reqstd+0x15c>)
   8425a:	785b      	ldrb	r3, [r3, #1]
   8425c:	2b01      	cmp	r3, #1
   8425e:	d002      	beq.n	84266 <udc_reqstd+0x13a>
   84260:	2b03      	cmp	r3, #3
   84262:	d004      	beq.n	8426e <udc_reqstd+0x142>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   84264:	e00c      	b.n	84280 <udc_reqstd+0x154>
				return udc_req_std_ep_clear_feature();
   84266:	4b13      	ldr	r3, [pc, #76]	; (842b4 <udc_reqstd+0x188>)
   84268:	4798      	blx	r3
   8426a:	4603      	mov	r3, r0
   8426c:	e009      	b.n	84282 <udc_reqstd+0x156>
				return udc_req_std_ep_set_feature();
   8426e:	4b12      	ldr	r3, [pc, #72]	; (842b8 <udc_reqstd+0x18c>)
   84270:	4798      	blx	r3
   84272:	4603      	mov	r3, r0
   84274:	e005      	b.n	84282 <udc_reqstd+0x156>
		}
   84276:	bf00      	nop
   84278:	e002      	b.n	84280 <udc_reqstd+0x154>
				break;
   8427a:	bf00      	nop
   8427c:	e000      	b.n	84280 <udc_reqstd+0x154>
			}
		}
   8427e:	bf00      	nop
#endif
	}
	return false;
   84280:	2300      	movs	r3, #0
}
   84282:	4618      	mov	r0, r3
   84284:	bd80      	pop	{r7, pc}
   84286:	bf00      	nop
   84288:	20001828 	.word	0x20001828
   8428c:	000839e1 	.word	0x000839e1
   84290:	00083ce1 	.word	0x00083ce1
   84294:	00083efd 	.word	0x00083efd
   84298:	0008402d 	.word	0x0008402d
   8429c:	00083a0d 	.word	0x00083a0d
   842a0:	00083bed 	.word	0x00083bed
   842a4:	00083a51 	.word	0x00083a51
   842a8:	00083ac5 	.word	0x00083ac5
   842ac:	00083f29 	.word	0x00083f29
   842b0:	000840c5 	.word	0x000840c5
   842b4:	00083a8d 	.word	0x00083a8d
   842b8:	00083b81 	.word	0x00083b81

000842bc <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   842bc:	b580      	push	{r7, lr}
   842be:	b082      	sub	sp, #8
   842c0:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   842c2:	4b20      	ldr	r3, [pc, #128]	; (84344 <udc_req_iface+0x88>)
   842c4:	781b      	ldrb	r3, [r3, #0]
   842c6:	2b00      	cmp	r3, #0
   842c8:	d101      	bne.n	842ce <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   842ca:	2300      	movs	r3, #0
   842cc:	e036      	b.n	8433c <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   842ce:	4b1e      	ldr	r3, [pc, #120]	; (84348 <udc_req_iface+0x8c>)
   842d0:	889b      	ldrh	r3, [r3, #4]
   842d2:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   842d4:	4b1d      	ldr	r3, [pc, #116]	; (8434c <udc_req_iface+0x90>)
   842d6:	681b      	ldr	r3, [r3, #0]
   842d8:	681b      	ldr	r3, [r3, #0]
   842da:	791b      	ldrb	r3, [r3, #4]
   842dc:	79fa      	ldrb	r2, [r7, #7]
   842de:	429a      	cmp	r2, r3
   842e0:	d301      	bcc.n	842e6 <udc_req_iface+0x2a>
		return false;
   842e2:	2300      	movs	r3, #0
   842e4:	e02a      	b.n	8433c <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   842e6:	79fb      	ldrb	r3, [r7, #7]
   842e8:	2100      	movs	r1, #0
   842ea:	4618      	mov	r0, r3
   842ec:	4b18      	ldr	r3, [pc, #96]	; (84350 <udc_req_iface+0x94>)
   842ee:	4798      	blx	r3
   842f0:	4603      	mov	r3, r0
   842f2:	f083 0301 	eor.w	r3, r3, #1
   842f6:	b2db      	uxtb	r3, r3
   842f8:	2b00      	cmp	r3, #0
   842fa:	d001      	beq.n	84300 <udc_req_iface+0x44>
		return false;
   842fc:	2300      	movs	r3, #0
   842fe:	e01d      	b.n	8433c <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   84300:	4b12      	ldr	r3, [pc, #72]	; (8434c <udc_req_iface+0x90>)
   84302:	681b      	ldr	r3, [r3, #0]
   84304:	685a      	ldr	r2, [r3, #4]
   84306:	79fb      	ldrb	r3, [r7, #7]
   84308:	009b      	lsls	r3, r3, #2
   8430a:	4413      	add	r3, r2
   8430c:	681b      	ldr	r3, [r3, #0]
   8430e:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84310:	683b      	ldr	r3, [r7, #0]
   84312:	68db      	ldr	r3, [r3, #12]
   84314:	4798      	blx	r3
   84316:	4603      	mov	r3, r0
   84318:	461a      	mov	r2, r3
   8431a:	79fb      	ldrb	r3, [r7, #7]
   8431c:	4611      	mov	r1, r2
   8431e:	4618      	mov	r0, r3
   84320:	4b0b      	ldr	r3, [pc, #44]	; (84350 <udc_req_iface+0x94>)
   84322:	4798      	blx	r3
   84324:	4603      	mov	r3, r0
   84326:	f083 0301 	eor.w	r3, r3, #1
   8432a:	b2db      	uxtb	r3, r3
   8432c:	2b00      	cmp	r3, #0
   8432e:	d001      	beq.n	84334 <udc_req_iface+0x78>
		return false;
   84330:	2300      	movs	r3, #0
   84332:	e003      	b.n	8433c <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   84334:	683b      	ldr	r3, [r7, #0]
   84336:	689b      	ldr	r3, [r3, #8]
   84338:	4798      	blx	r3
   8433a:	4603      	mov	r3, r0
}
   8433c:	4618      	mov	r0, r3
   8433e:	3708      	adds	r7, #8
   84340:	46bd      	mov	sp, r7
   84342:	bd80      	pop	{r7, pc}
   84344:	20001336 	.word	0x20001336
   84348:	20001828 	.word	0x20001828
   8434c:	20001338 	.word	0x20001338
   84350:	00083749 	.word	0x00083749

00084354 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   84354:	b580      	push	{r7, lr}
   84356:	b082      	sub	sp, #8
   84358:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   8435a:	4b1e      	ldr	r3, [pc, #120]	; (843d4 <udc_req_ep+0x80>)
   8435c:	781b      	ldrb	r3, [r3, #0]
   8435e:	2b00      	cmp	r3, #0
   84360:	d101      	bne.n	84366 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   84362:	2300      	movs	r3, #0
   84364:	e032      	b.n	843cc <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   84366:	4b1c      	ldr	r3, [pc, #112]	; (843d8 <udc_req_ep+0x84>)
   84368:	889b      	ldrh	r3, [r3, #4]
   8436a:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8436c:	2300      	movs	r3, #0
   8436e:	71fb      	strb	r3, [r7, #7]
   84370:	e024      	b.n	843bc <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   84372:	4b1a      	ldr	r3, [pc, #104]	; (843dc <udc_req_ep+0x88>)
   84374:	681b      	ldr	r3, [r3, #0]
   84376:	685a      	ldr	r2, [r3, #4]
   84378:	79fb      	ldrb	r3, [r7, #7]
   8437a:	009b      	lsls	r3, r3, #2
   8437c:	4413      	add	r3, r2
   8437e:	681b      	ldr	r3, [r3, #0]
   84380:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   84382:	683b      	ldr	r3, [r7, #0]
   84384:	68db      	ldr	r3, [r3, #12]
   84386:	4798      	blx	r3
   84388:	4603      	mov	r3, r0
   8438a:	461a      	mov	r2, r3
   8438c:	79fb      	ldrb	r3, [r7, #7]
   8438e:	4611      	mov	r1, r2
   84390:	4618      	mov	r0, r3
   84392:	4b13      	ldr	r3, [pc, #76]	; (843e0 <udc_req_ep+0x8c>)
   84394:	4798      	blx	r3
   84396:	4603      	mov	r3, r0
   84398:	f083 0301 	eor.w	r3, r3, #1
   8439c:	b2db      	uxtb	r3, r3
   8439e:	2b00      	cmp	r3, #0
   843a0:	d001      	beq.n	843a6 <udc_req_ep+0x52>
			return false;
   843a2:	2300      	movs	r3, #0
   843a4:	e012      	b.n	843cc <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   843a6:	683b      	ldr	r3, [r7, #0]
   843a8:	689b      	ldr	r3, [r3, #8]
   843aa:	4798      	blx	r3
   843ac:	4603      	mov	r3, r0
   843ae:	2b00      	cmp	r3, #0
   843b0:	d001      	beq.n	843b6 <udc_req_ep+0x62>
			return true;
   843b2:	2301      	movs	r3, #1
   843b4:	e00a      	b.n	843cc <udc_req_ep+0x78>
			iface_num++) {
   843b6:	79fb      	ldrb	r3, [r7, #7]
   843b8:	3301      	adds	r3, #1
   843ba:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   843bc:	4b07      	ldr	r3, [pc, #28]	; (843dc <udc_req_ep+0x88>)
   843be:	681b      	ldr	r3, [r3, #0]
   843c0:	681b      	ldr	r3, [r3, #0]
   843c2:	791b      	ldrb	r3, [r3, #4]
   843c4:	79fa      	ldrb	r2, [r7, #7]
   843c6:	429a      	cmp	r2, r3
   843c8:	d3d3      	bcc.n	84372 <udc_req_ep+0x1e>
		}
	}
	return false;
   843ca:	2300      	movs	r3, #0
}
   843cc:	4618      	mov	r0, r3
   843ce:	3708      	adds	r7, #8
   843d0:	46bd      	mov	sp, r7
   843d2:	bd80      	pop	{r7, pc}
   843d4:	20001336 	.word	0x20001336
   843d8:	20001828 	.word	0x20001828
   843dc:	20001338 	.word	0x20001338
   843e0:	00083749 	.word	0x00083749

000843e4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   843e4:	b580      	push	{r7, lr}
   843e6:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   843e8:	4b25      	ldr	r3, [pc, #148]	; (84480 <udc_process_setup+0x9c>)
   843ea:	2200      	movs	r2, #0
   843ec:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   843ee:	4b24      	ldr	r3, [pc, #144]	; (84480 <udc_process_setup+0x9c>)
   843f0:	2200      	movs	r2, #0
   843f2:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   843f4:	4b22      	ldr	r3, [pc, #136]	; (84480 <udc_process_setup+0x9c>)
   843f6:	2200      	movs	r2, #0
   843f8:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   843fa:	4b21      	ldr	r3, [pc, #132]	; (84480 <udc_process_setup+0x9c>)
   843fc:	781b      	ldrb	r3, [r3, #0]
   843fe:	2bc0      	cmp	r3, #192	; 0xc0
   84400:	d109      	bne.n	84416 <udc_process_setup+0x32>
   84402:	4b1f      	ldr	r3, [pc, #124]	; (84480 <udc_process_setup+0x9c>)
   84404:	785b      	ldrb	r3, [r3, #1]
   84406:	2b01      	cmp	r3, #1
   84408:	d105      	bne.n	84416 <udc_process_setup+0x32>
		udd_set_setup_payload(winusb_20_desc, WINUSB_PLATFORM_DESCRIPTOR_LENGTH);
   8440a:	219e      	movs	r1, #158	; 0x9e
   8440c:	481d      	ldr	r0, [pc, #116]	; (84484 <udc_process_setup+0xa0>)
   8440e:	4b1e      	ldr	r3, [pc, #120]	; (84488 <udc_process_setup+0xa4>)
   84410:	4798      	blx	r3
		return true;
   84412:	2301      	movs	r3, #1
   84414:	e032      	b.n	8447c <udc_process_setup+0x98>
	}

	if (Udd_setup_is_in()) {
   84416:	4b1a      	ldr	r3, [pc, #104]	; (84480 <udc_process_setup+0x9c>)
   84418:	781b      	ldrb	r3, [r3, #0]
   8441a:	b25b      	sxtb	r3, r3
   8441c:	2b00      	cmp	r3, #0
   8441e:	da05      	bge.n	8442c <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   84420:	4b17      	ldr	r3, [pc, #92]	; (84480 <udc_process_setup+0x9c>)
   84422:	88db      	ldrh	r3, [r3, #6]
   84424:	2b00      	cmp	r3, #0
   84426:	d101      	bne.n	8442c <udc_process_setup+0x48>
			return false; // Error from USB host
   84428:	2300      	movs	r3, #0
   8442a:	e027      	b.n	8447c <udc_process_setup+0x98>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8442c:	4b14      	ldr	r3, [pc, #80]	; (84480 <udc_process_setup+0x9c>)
   8442e:	781b      	ldrb	r3, [r3, #0]
   84430:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84434:	2b00      	cmp	r3, #0
   84436:	d106      	bne.n	84446 <udc_process_setup+0x62>
		if (udc_reqstd()) {
   84438:	4b14      	ldr	r3, [pc, #80]	; (8448c <udc_process_setup+0xa8>)
   8443a:	4798      	blx	r3
   8443c:	4603      	mov	r3, r0
   8443e:	2b00      	cmp	r3, #0
   84440:	d001      	beq.n	84446 <udc_process_setup+0x62>
			return true;
   84442:	2301      	movs	r3, #1
   84444:	e01a      	b.n	8447c <udc_process_setup+0x98>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   84446:	4b0e      	ldr	r3, [pc, #56]	; (84480 <udc_process_setup+0x9c>)
   84448:	781b      	ldrb	r3, [r3, #0]
   8444a:	f003 031f 	and.w	r3, r3, #31
   8444e:	2b01      	cmp	r3, #1
   84450:	d106      	bne.n	84460 <udc_process_setup+0x7c>
		if (udc_req_iface()) {
   84452:	4b0f      	ldr	r3, [pc, #60]	; (84490 <udc_process_setup+0xac>)
   84454:	4798      	blx	r3
   84456:	4603      	mov	r3, r0
   84458:	2b00      	cmp	r3, #0
   8445a:	d001      	beq.n	84460 <udc_process_setup+0x7c>
			return true;
   8445c:	2301      	movs	r3, #1
   8445e:	e00d      	b.n	8447c <udc_process_setup+0x98>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   84460:	4b07      	ldr	r3, [pc, #28]	; (84480 <udc_process_setup+0x9c>)
   84462:	781b      	ldrb	r3, [r3, #0]
   84464:	f003 031f 	and.w	r3, r3, #31
   84468:	2b02      	cmp	r3, #2
   8446a:	d106      	bne.n	8447a <udc_process_setup+0x96>
		if (udc_req_ep()) {
   8446c:	4b09      	ldr	r3, [pc, #36]	; (84494 <udc_process_setup+0xb0>)
   8446e:	4798      	blx	r3
   84470:	4603      	mov	r3, r0
   84472:	2b00      	cmp	r3, #0
   84474:	d001      	beq.n	8447a <udc_process_setup+0x96>
			return true;
   84476:	2301      	movs	r3, #1
   84478:	e000      	b.n	8447c <udc_process_setup+0x98>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   8447a:	2300      	movs	r3, #0
#endif
}
   8447c:	4618      	mov	r0, r3
   8447e:	bd80      	pop	{r7, pc}
   84480:	20001828 	.word	0x20001828
   84484:	20000300 	.word	0x20000300
   84488:	00084b71 	.word	0x00084b71
   8448c:	0008412d 	.word	0x0008412d
   84490:	000842bd 	.word	0x000842bd
   84494:	00084355 	.word	0x00084355

00084498 <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   84498:	b580      	push	{r7, lr}
   8449a:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   8449c:	4b0b      	ldr	r3, [pc, #44]	; (844cc <udi_vendor_enable+0x34>)
   8449e:	4798      	blx	r3
   844a0:	4603      	mov	r3, r0
   844a2:	78da      	ldrb	r2, [r3, #3]
   844a4:	4b0a      	ldr	r3, [pc, #40]	; (844d0 <udi_vendor_enable+0x38>)
   844a6:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   844a8:	4b09      	ldr	r3, [pc, #36]	; (844d0 <udi_vendor_enable+0x38>)
   844aa:	781b      	ldrb	r3, [r3, #0]
   844ac:	2b00      	cmp	r3, #0
   844ae:	d109      	bne.n	844c4 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   844b0:	4b08      	ldr	r3, [pc, #32]	; (844d4 <udi_vendor_enable+0x3c>)
   844b2:	4798      	blx	r3
   844b4:	4603      	mov	r3, r0
   844b6:	f083 0301 	eor.w	r3, r3, #1
   844ba:	b2db      	uxtb	r3, r3
   844bc:	2b00      	cmp	r3, #0
   844be:	d001      	beq.n	844c4 <udi_vendor_enable+0x2c>
			return false;
   844c0:	2300      	movs	r3, #0
   844c2:	e000      	b.n	844c6 <udi_vendor_enable+0x2e>
		}
	}
	return true;
   844c4:	2301      	movs	r3, #1
}
   844c6:	4618      	mov	r0, r3
   844c8:	bd80      	pop	{r7, pc}
   844ca:	bf00      	nop
   844cc:	000836b5 	.word	0x000836b5
   844d0:	20001343 	.word	0x20001343
   844d4:	00080bb1 	.word	0x00080bb1

000844d8 <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   844d8:	b580      	push	{r7, lr}
   844da:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   844dc:	4b03      	ldr	r3, [pc, #12]	; (844ec <udi_vendor_disable+0x14>)
   844de:	781b      	ldrb	r3, [r3, #0]
   844e0:	2b00      	cmp	r3, #0
   844e2:	d101      	bne.n	844e8 <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   844e4:	4b02      	ldr	r3, [pc, #8]	; (844f0 <udi_vendor_disable+0x18>)
   844e6:	4798      	blx	r3
	}
}
   844e8:	bf00      	nop
   844ea:	bd80      	pop	{r7, pc}
   844ec:	20001343 	.word	0x20001343
   844f0:	00080bdd 	.word	0x00080bdd

000844f4 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   844f4:	b580      	push	{r7, lr}
   844f6:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   844f8:	4b10      	ldr	r3, [pc, #64]	; (8453c <udi_vendor_setup+0x48>)
   844fa:	781b      	ldrb	r3, [r3, #0]
   844fc:	b25b      	sxtb	r3, r3
   844fe:	2b00      	cmp	r3, #0
   84500:	da09      	bge.n	84516 <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84502:	4b0e      	ldr	r3, [pc, #56]	; (8453c <udi_vendor_setup+0x48>)
   84504:	781b      	ldrb	r3, [r3, #0]
   84506:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8450a:	2b40      	cmp	r3, #64	; 0x40
   8450c:	d103      	bne.n	84516 <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   8450e:	4b0c      	ldr	r3, [pc, #48]	; (84540 <udi_vendor_setup+0x4c>)
   84510:	4798      	blx	r3
   84512:	4603      	mov	r3, r0
   84514:	e00f      	b.n	84536 <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   84516:	4b09      	ldr	r3, [pc, #36]	; (8453c <udi_vendor_setup+0x48>)
   84518:	781b      	ldrb	r3, [r3, #0]
   8451a:	b25b      	sxtb	r3, r3
   8451c:	2b00      	cmp	r3, #0
   8451e:	db09      	blt.n	84534 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84520:	4b06      	ldr	r3, [pc, #24]	; (8453c <udi_vendor_setup+0x48>)
   84522:	781b      	ldrb	r3, [r3, #0]
   84524:	f003 0360 	and.w	r3, r3, #96	; 0x60
   84528:	2b40      	cmp	r3, #64	; 0x40
   8452a:	d103      	bne.n	84534 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   8452c:	4b05      	ldr	r3, [pc, #20]	; (84544 <udi_vendor_setup+0x50>)
   8452e:	4798      	blx	r3
   84530:	4603      	mov	r3, r0
   84532:	e000      	b.n	84536 <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   84534:	2300      	movs	r3, #0
}
   84536:	4618      	mov	r0, r3
   84538:	bd80      	pop	{r7, pc}
   8453a:	bf00      	nop
   8453c:	20001828 	.word	0x20001828
   84540:	00081029 	.word	0x00081029
   84544:	00080ec9 	.word	0x00080ec9

00084548 <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   84548:	b480      	push	{r7}
   8454a:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   8454c:	4b02      	ldr	r3, [pc, #8]	; (84558 <udi_vendor_getsetting+0x10>)
   8454e:	781b      	ldrb	r3, [r3, #0]
}
   84550:	4618      	mov	r0, r3
   84552:	46bd      	mov	sp, r7
   84554:	bc80      	pop	{r7}
   84556:	4770      	bx	lr
   84558:	20001343 	.word	0x20001343

0008455c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8455c:	b590      	push	{r4, r7, lr}
   8455e:	b087      	sub	sp, #28
   84560:	af02      	add	r7, sp, #8
   84562:	60f8      	str	r0, [r7, #12]
   84564:	60b9      	str	r1, [r7, #8]
   84566:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   84568:	687b      	ldr	r3, [r7, #4]
   8456a:	9300      	str	r3, [sp, #0]
   8456c:	68bb      	ldr	r3, [r7, #8]
   8456e:	68fa      	ldr	r2, [r7, #12]
   84570:	2100      	movs	r1, #0
   84572:	2081      	movs	r0, #129	; 0x81
   84574:	4c03      	ldr	r4, [pc, #12]	; (84584 <udi_vendor_bulk_in_run+0x28>)
   84576:	47a0      	blx	r4
   84578:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   8457a:	4618      	mov	r0, r3
   8457c:	3714      	adds	r7, #20
   8457e:	46bd      	mov	sp, r7
   84580:	bd90      	pop	{r4, r7, pc}
   84582:	bf00      	nop
   84584:	0008527d 	.word	0x0008527d

00084588 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   84588:	b590      	push	{r4, r7, lr}
   8458a:	b087      	sub	sp, #28
   8458c:	af02      	add	r7, sp, #8
   8458e:	60f8      	str	r0, [r7, #12]
   84590:	60b9      	str	r1, [r7, #8]
   84592:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   84594:	687b      	ldr	r3, [r7, #4]
   84596:	9300      	str	r3, [sp, #0]
   84598:	68bb      	ldr	r3, [r7, #8]
   8459a:	68fa      	ldr	r2, [r7, #12]
   8459c:	2100      	movs	r1, #0
   8459e:	2002      	movs	r0, #2
   845a0:	4c03      	ldr	r4, [pc, #12]	; (845b0 <udi_vendor_bulk_out_run+0x28>)
   845a2:	47a0      	blx	r4
   845a4:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   845a6:	4618      	mov	r0, r3
   845a8:	3714      	adds	r7, #20
   845aa:	46bd      	mov	sp, r7
   845ac:	bd90      	pop	{r4, r7, pc}
   845ae:	bf00      	nop
   845b0:	0008527d 	.word	0x0008527d

000845b4 <NVIC_EnableIRQ>:
{
   845b4:	b480      	push	{r7}
   845b6:	b083      	sub	sp, #12
   845b8:	af00      	add	r7, sp, #0
   845ba:	4603      	mov	r3, r0
   845bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   845be:	79fb      	ldrb	r3, [r7, #7]
   845c0:	f003 031f 	and.w	r3, r3, #31
   845c4:	2201      	movs	r2, #1
   845c6:	fa02 f103 	lsl.w	r1, r2, r3
   845ca:	4a05      	ldr	r2, [pc, #20]	; (845e0 <NVIC_EnableIRQ+0x2c>)
   845cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   845d0:	095b      	lsrs	r3, r3, #5
   845d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   845d6:	bf00      	nop
   845d8:	370c      	adds	r7, #12
   845da:	46bd      	mov	sp, r7
   845dc:	bc80      	pop	{r7}
   845de:	4770      	bx	lr
   845e0:	e000e100 	.word	0xe000e100

000845e4 <NVIC_SetPriority>:
{
   845e4:	b480      	push	{r7}
   845e6:	b083      	sub	sp, #12
   845e8:	af00      	add	r7, sp, #0
   845ea:	4603      	mov	r3, r0
   845ec:	6039      	str	r1, [r7, #0]
   845ee:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   845f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   845f4:	2b00      	cmp	r3, #0
   845f6:	da0b      	bge.n	84610 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   845f8:	683b      	ldr	r3, [r7, #0]
   845fa:	b2da      	uxtb	r2, r3
   845fc:	490c      	ldr	r1, [pc, #48]	; (84630 <NVIC_SetPriority+0x4c>)
   845fe:	79fb      	ldrb	r3, [r7, #7]
   84600:	f003 030f 	and.w	r3, r3, #15
   84604:	3b04      	subs	r3, #4
   84606:	0112      	lsls	r2, r2, #4
   84608:	b2d2      	uxtb	r2, r2
   8460a:	440b      	add	r3, r1
   8460c:	761a      	strb	r2, [r3, #24]
}
   8460e:	e009      	b.n	84624 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84610:	683b      	ldr	r3, [r7, #0]
   84612:	b2da      	uxtb	r2, r3
   84614:	4907      	ldr	r1, [pc, #28]	; (84634 <NVIC_SetPriority+0x50>)
   84616:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8461a:	0112      	lsls	r2, r2, #4
   8461c:	b2d2      	uxtb	r2, r2
   8461e:	440b      	add	r3, r1
   84620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   84624:	bf00      	nop
   84626:	370c      	adds	r7, #12
   84628:	46bd      	mov	sp, r7
   8462a:	bc80      	pop	{r7}
   8462c:	4770      	bx	lr
   8462e:	bf00      	nop
   84630:	e000ed00 	.word	0xe000ed00
   84634:	e000e100 	.word	0xe000e100

00084638 <cpu_irq_save>:
{
   84638:	b480      	push	{r7}
   8463a:	b083      	sub	sp, #12
   8463c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8463e:	f3ef 8310 	mrs	r3, PRIMASK
   84642:	603b      	str	r3, [r7, #0]
  return(result);
   84644:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   84646:	2b00      	cmp	r3, #0
   84648:	bf0c      	ite	eq
   8464a:	2301      	moveq	r3, #1
   8464c:	2300      	movne	r3, #0
   8464e:	b2db      	uxtb	r3, r3
   84650:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   84652:	b672      	cpsid	i
}
   84654:	bf00      	nop
  __ASM volatile ("dmb");
   84656:	f3bf 8f5f 	dmb	sy
}
   8465a:	bf00      	nop
	cpu_irq_disable();
   8465c:	4b04      	ldr	r3, [pc, #16]	; (84670 <cpu_irq_save+0x38>)
   8465e:	2200      	movs	r2, #0
   84660:	701a      	strb	r2, [r3, #0]
	return flags;
   84662:	687b      	ldr	r3, [r7, #4]
}
   84664:	4618      	mov	r0, r3
   84666:	370c      	adds	r7, #12
   84668:	46bd      	mov	sp, r7
   8466a:	bc80      	pop	{r7}
   8466c:	4770      	bx	lr
   8466e:	bf00      	nop
   84670:	20000284 	.word	0x20000284

00084674 <cpu_irq_is_enabled_flags>:
{
   84674:	b480      	push	{r7}
   84676:	b083      	sub	sp, #12
   84678:	af00      	add	r7, sp, #0
   8467a:	6078      	str	r0, [r7, #4]
	return (flags);
   8467c:	687b      	ldr	r3, [r7, #4]
   8467e:	2b00      	cmp	r3, #0
   84680:	bf14      	ite	ne
   84682:	2301      	movne	r3, #1
   84684:	2300      	moveq	r3, #0
   84686:	b2db      	uxtb	r3, r3
}
   84688:	4618      	mov	r0, r3
   8468a:	370c      	adds	r7, #12
   8468c:	46bd      	mov	sp, r7
   8468e:	bc80      	pop	{r7}
   84690:	4770      	bx	lr
   84692:	0000      	movs	r0, r0

00084694 <cpu_irq_restore>:
{
   84694:	b580      	push	{r7, lr}
   84696:	b082      	sub	sp, #8
   84698:	af00      	add	r7, sp, #0
   8469a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   8469c:	6878      	ldr	r0, [r7, #4]
   8469e:	4b08      	ldr	r3, [pc, #32]	; (846c0 <cpu_irq_restore+0x2c>)
   846a0:	4798      	blx	r3
   846a2:	4603      	mov	r3, r0
   846a4:	2b00      	cmp	r3, #0
   846a6:	d007      	beq.n	846b8 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   846a8:	4b06      	ldr	r3, [pc, #24]	; (846c4 <cpu_irq_restore+0x30>)
   846aa:	2201      	movs	r2, #1
   846ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   846ae:	f3bf 8f5f 	dmb	sy
}
   846b2:	bf00      	nop
  __ASM volatile ("cpsie i");
   846b4:	b662      	cpsie	i
}
   846b6:	bf00      	nop
}
   846b8:	bf00      	nop
   846ba:	3708      	adds	r7, #8
   846bc:	46bd      	mov	sp, r7
   846be:	bd80      	pop	{r7, pc}
   846c0:	00084675 	.word	0x00084675
   846c4:	20000284 	.word	0x20000284

000846c8 <sleepmgr_lock_mode>:
{
   846c8:	b580      	push	{r7, lr}
   846ca:	b084      	sub	sp, #16
   846cc:	af00      	add	r7, sp, #0
   846ce:	4603      	mov	r3, r0
   846d0:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   846d2:	4b08      	ldr	r3, [pc, #32]	; (846f4 <sleepmgr_lock_mode+0x2c>)
   846d4:	4798      	blx	r3
   846d6:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   846d8:	79fb      	ldrb	r3, [r7, #7]
   846da:	4a07      	ldr	r2, [pc, #28]	; (846f8 <sleepmgr_lock_mode+0x30>)
   846dc:	5cd2      	ldrb	r2, [r2, r3]
   846de:	3201      	adds	r2, #1
   846e0:	b2d1      	uxtb	r1, r2
   846e2:	4a05      	ldr	r2, [pc, #20]	; (846f8 <sleepmgr_lock_mode+0x30>)
   846e4:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   846e6:	68f8      	ldr	r0, [r7, #12]
   846e8:	4b04      	ldr	r3, [pc, #16]	; (846fc <sleepmgr_lock_mode+0x34>)
   846ea:	4798      	blx	r3
}
   846ec:	bf00      	nop
   846ee:	3710      	adds	r7, #16
   846f0:	46bd      	mov	sp, r7
   846f2:	bd80      	pop	{r7, pc}
   846f4:	00084639 	.word	0x00084639
   846f8:	20001820 	.word	0x20001820
   846fc:	00084695 	.word	0x00084695

00084700 <sleepmgr_unlock_mode>:
{
   84700:	b580      	push	{r7, lr}
   84702:	b084      	sub	sp, #16
   84704:	af00      	add	r7, sp, #0
   84706:	4603      	mov	r3, r0
   84708:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   8470a:	4b08      	ldr	r3, [pc, #32]	; (8472c <sleepmgr_unlock_mode+0x2c>)
   8470c:	4798      	blx	r3
   8470e:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   84710:	79fb      	ldrb	r3, [r7, #7]
   84712:	4a07      	ldr	r2, [pc, #28]	; (84730 <sleepmgr_unlock_mode+0x30>)
   84714:	5cd2      	ldrb	r2, [r2, r3]
   84716:	3a01      	subs	r2, #1
   84718:	b2d1      	uxtb	r1, r2
   8471a:	4a05      	ldr	r2, [pc, #20]	; (84730 <sleepmgr_unlock_mode+0x30>)
   8471c:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   8471e:	68f8      	ldr	r0, [r7, #12]
   84720:	4b04      	ldr	r3, [pc, #16]	; (84734 <sleepmgr_unlock_mode+0x34>)
   84722:	4798      	blx	r3
}
   84724:	bf00      	nop
   84726:	3710      	adds	r7, #16
   84728:	46bd      	mov	sp, r7
   8472a:	bd80      	pop	{r7, pc}
   8472c:	00084639 	.word	0x00084639
   84730:	20001820 	.word	0x20001820
   84734:	00084695 	.word	0x00084695

00084738 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   84738:	b580      	push	{r7, lr}
   8473a:	b082      	sub	sp, #8
   8473c:	af00      	add	r7, sp, #0
   8473e:	4603      	mov	r3, r0
   84740:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   84742:	79fb      	ldrb	r3, [r7, #7]
   84744:	f083 0301 	eor.w	r3, r3, #1
   84748:	b2db      	uxtb	r3, r3
   8474a:	2b00      	cmp	r3, #0
   8474c:	d006      	beq.n	8475c <udd_sleep_mode+0x24>
   8474e:	4b0d      	ldr	r3, [pc, #52]	; (84784 <udd_sleep_mode+0x4c>)
   84750:	781b      	ldrb	r3, [r3, #0]
   84752:	2b00      	cmp	r3, #0
   84754:	d002      	beq.n	8475c <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   84756:	2002      	movs	r0, #2
   84758:	4b0b      	ldr	r3, [pc, #44]	; (84788 <udd_sleep_mode+0x50>)
   8475a:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   8475c:	79fb      	ldrb	r3, [r7, #7]
   8475e:	2b00      	cmp	r3, #0
   84760:	d009      	beq.n	84776 <udd_sleep_mode+0x3e>
   84762:	4b08      	ldr	r3, [pc, #32]	; (84784 <udd_sleep_mode+0x4c>)
   84764:	781b      	ldrb	r3, [r3, #0]
   84766:	f083 0301 	eor.w	r3, r3, #1
   8476a:	b2db      	uxtb	r3, r3
   8476c:	2b00      	cmp	r3, #0
   8476e:	d002      	beq.n	84776 <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   84770:	2002      	movs	r0, #2
   84772:	4b06      	ldr	r3, [pc, #24]	; (8478c <udd_sleep_mode+0x54>)
   84774:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   84776:	4a03      	ldr	r2, [pc, #12]	; (84784 <udd_sleep_mode+0x4c>)
   84778:	79fb      	ldrb	r3, [r7, #7]
   8477a:	7013      	strb	r3, [r2, #0]
}
   8477c:	bf00      	nop
   8477e:	3708      	adds	r7, #8
   84780:	46bd      	mov	sp, r7
   84782:	bd80      	pop	{r7, pc}
   84784:	20001344 	.word	0x20001344
   84788:	00084701 	.word	0x00084701
   8478c:	000846c9 	.word	0x000846c9

00084790 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   84790:	b580      	push	{r7, lr}
   84792:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   84794:	201d      	movs	r0, #29
   84796:	4b5f      	ldr	r3, [pc, #380]	; (84914 <UDPHS_Handler+0x184>)
   84798:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8479a:	4b5f      	ldr	r3, [pc, #380]	; (84918 <UDPHS_Handler+0x188>)
   8479c:	4798      	blx	r3
   8479e:	4603      	mov	r3, r0
   847a0:	f083 0301 	eor.w	r3, r3, #1
   847a4:	b2db      	uxtb	r3, r3
   847a6:	2b00      	cmp	r3, #0
   847a8:	d00e      	beq.n	847c8 <UDPHS_Handler+0x38>
   847aa:	4b5c      	ldr	r3, [pc, #368]	; (8491c <UDPHS_Handler+0x18c>)
   847ac:	695b      	ldr	r3, [r3, #20]
   847ae:	f003 0302 	and.w	r3, r3, #2
   847b2:	2b00      	cmp	r3, #0
   847b4:	d108      	bne.n	847c8 <UDPHS_Handler+0x38>
  __ASM volatile ("cpsid i");
   847b6:	b672      	cpsid	i
}
   847b8:	bf00      	nop
  __ASM volatile ("dmb");
   847ba:	f3bf 8f5f 	dmb	sy
}
   847be:	bf00      	nop
		cpu_irq_disable();
   847c0:	4b57      	ldr	r3, [pc, #348]	; (84920 <UDPHS_Handler+0x190>)
   847c2:	2200      	movs	r2, #0
   847c4:	701a      	strb	r2, [r3, #0]
		return;
   847c6:	e0a4      	b.n	84912 <UDPHS_Handler+0x182>
	}

	if (Is_udd_sof()) {
   847c8:	4b54      	ldr	r3, [pc, #336]	; (8491c <UDPHS_Handler+0x18c>)
   847ca:	695b      	ldr	r3, [r3, #20]
   847cc:	f003 0308 	and.w	r3, r3, #8
   847d0:	2b00      	cmp	r3, #0
   847d2:	d00d      	beq.n	847f0 <UDPHS_Handler+0x60>
		udd_ack_sof();
   847d4:	4b51      	ldr	r3, [pc, #324]	; (8491c <UDPHS_Handler+0x18c>)
   847d6:	2208      	movs	r2, #8
   847d8:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   847da:	4b50      	ldr	r3, [pc, #320]	; (8491c <UDPHS_Handler+0x18c>)
   847dc:	695b      	ldr	r3, [r3, #20]
   847de:	f003 0301 	and.w	r3, r3, #1
   847e2:	2b00      	cmp	r3, #0
   847e4:	d101      	bne.n	847ea <UDPHS_Handler+0x5a>
			udc_sof_notify();
   847e6:	4b4f      	ldr	r3, [pc, #316]	; (84924 <UDPHS_Handler+0x194>)
   847e8:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   847ea:	4b4f      	ldr	r3, [pc, #316]	; (84928 <UDPHS_Handler+0x198>)
   847ec:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   847ee:	e08f      	b.n	84910 <UDPHS_Handler+0x180>
	}

	if (Is_udd_msof()) {
   847f0:	4b4a      	ldr	r3, [pc, #296]	; (8491c <UDPHS_Handler+0x18c>)
   847f2:	695b      	ldr	r3, [r3, #20]
   847f4:	f003 0304 	and.w	r3, r3, #4
   847f8:	2b00      	cmp	r3, #0
   847fa:	d005      	beq.n	84808 <UDPHS_Handler+0x78>
		udd_ack_msof();
   847fc:	4b47      	ldr	r3, [pc, #284]	; (8491c <UDPHS_Handler+0x18c>)
   847fe:	2204      	movs	r2, #4
   84800:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   84802:	4b48      	ldr	r3, [pc, #288]	; (84924 <UDPHS_Handler+0x194>)
   84804:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   84806:	e083      	b.n	84910 <UDPHS_Handler+0x180>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   84808:	4b48      	ldr	r3, [pc, #288]	; (8492c <UDPHS_Handler+0x19c>)
   8480a:	4798      	blx	r3
   8480c:	4603      	mov	r3, r0
   8480e:	2b00      	cmp	r3, #0
   84810:	d179      	bne.n	84906 <UDPHS_Handler+0x176>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   84812:	4b47      	ldr	r3, [pc, #284]	; (84930 <UDPHS_Handler+0x1a0>)
   84814:	4798      	blx	r3
   84816:	4603      	mov	r3, r0
   84818:	2b00      	cmp	r3, #0
   8481a:	d176      	bne.n	8490a <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   8481c:	4b3f      	ldr	r3, [pc, #252]	; (8491c <UDPHS_Handler+0x18c>)
   8481e:	695b      	ldr	r3, [r3, #20]
   84820:	f003 0310 	and.w	r3, r3, #16
   84824:	2b00      	cmp	r3, #0
   84826:	d01d      	beq.n	84864 <UDPHS_Handler+0xd4>
		dbg_print("EoR ");
		udd_ack_reset();
   84828:	4b3c      	ldr	r3, [pc, #240]	; (8491c <UDPHS_Handler+0x18c>)
   8482a:	2210      	movs	r2, #16
   8482c:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   8482e:	4b41      	ldr	r3, [pc, #260]	; (84934 <UDPHS_Handler+0x1a4>)
   84830:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   84832:	4b41      	ldr	r3, [pc, #260]	; (84938 <UDPHS_Handler+0x1a8>)
   84834:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   84836:	4b41      	ldr	r3, [pc, #260]	; (8493c <UDPHS_Handler+0x1ac>)
   84838:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   8483a:	4b41      	ldr	r3, [pc, #260]	; (84940 <UDPHS_Handler+0x1b0>)
   8483c:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   8483e:	4b37      	ldr	r3, [pc, #220]	; (8491c <UDPHS_Handler+0x18c>)
   84840:	691b      	ldr	r3, [r3, #16]
   84842:	4a36      	ldr	r2, [pc, #216]	; (8491c <UDPHS_Handler+0x18c>)
   84844:	f043 0308 	orr.w	r3, r3, #8
   84848:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   8484a:	4b34      	ldr	r3, [pc, #208]	; (8491c <UDPHS_Handler+0x18c>)
   8484c:	691b      	ldr	r3, [r3, #16]
   8484e:	4a33      	ldr	r2, [pc, #204]	; (8491c <UDPHS_Handler+0x18c>)
   84850:	f043 0304 	orr.w	r3, r3, #4
   84854:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   84856:	4b31      	ldr	r3, [pc, #196]	; (8491c <UDPHS_Handler+0x18c>)
   84858:	691b      	ldr	r3, [r3, #16]
   8485a:	4a30      	ldr	r2, [pc, #192]	; (8491c <UDPHS_Handler+0x18c>)
   8485c:	f043 0302 	orr.w	r3, r3, #2
   84860:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   84862:	e055      	b.n	84910 <UDPHS_Handler+0x180>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84864:	4b2d      	ldr	r3, [pc, #180]	; (8491c <UDPHS_Handler+0x18c>)
   84866:	691b      	ldr	r3, [r3, #16]
   84868:	f003 0302 	and.w	r3, r3, #2
   8486c:	2b00      	cmp	r3, #0
   8486e:	d020      	beq.n	848b2 <UDPHS_Handler+0x122>
   84870:	4b2a      	ldr	r3, [pc, #168]	; (8491c <UDPHS_Handler+0x18c>)
   84872:	695b      	ldr	r3, [r3, #20]
   84874:	f003 0302 	and.w	r3, r3, #2
   84878:	2b00      	cmp	r3, #0
   8487a:	d01a      	beq.n	848b2 <UDPHS_Handler+0x122>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   8487c:	4b27      	ldr	r3, [pc, #156]	; (8491c <UDPHS_Handler+0x18c>)
   8487e:	2220      	movs	r2, #32
   84880:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   84882:	4b26      	ldr	r3, [pc, #152]	; (8491c <UDPHS_Handler+0x18c>)
   84884:	691b      	ldr	r3, [r3, #16]
   84886:	4a25      	ldr	r2, [pc, #148]	; (8491c <UDPHS_Handler+0x18c>)
   84888:	f023 0302 	bic.w	r3, r3, #2
   8488c:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   8488e:	4b23      	ldr	r3, [pc, #140]	; (8491c <UDPHS_Handler+0x18c>)
   84890:	691b      	ldr	r3, [r3, #16]
   84892:	4a22      	ldr	r2, [pc, #136]	; (8491c <UDPHS_Handler+0x18c>)
   84894:	f043 0320 	orr.w	r3, r3, #32
   84898:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   8489a:	4b20      	ldr	r3, [pc, #128]	; (8491c <UDPHS_Handler+0x18c>)
   8489c:	2202      	movs	r2, #2
   8489e:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   848a0:	201d      	movs	r0, #29
   848a2:	4b28      	ldr	r3, [pc, #160]	; (84944 <UDPHS_Handler+0x1b4>)
   848a4:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   848a6:	4b28      	ldr	r3, [pc, #160]	; (84948 <UDPHS_Handler+0x1b8>)
   848a8:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   848aa:	2000      	movs	r0, #0
   848ac:	4b27      	ldr	r3, [pc, #156]	; (8494c <UDPHS_Handler+0x1bc>)
   848ae:	4798      	blx	r3
		goto udd_interrupt_end;
   848b0:	e02e      	b.n	84910 <UDPHS_Handler+0x180>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   848b2:	4b1a      	ldr	r3, [pc, #104]	; (8491c <UDPHS_Handler+0x18c>)
   848b4:	695b      	ldr	r3, [r3, #20]
   848b6:	f003 0320 	and.w	r3, r3, #32
   848ba:	2b00      	cmp	r3, #0
   848bc:	d027      	beq.n	8490e <UDPHS_Handler+0x17e>
		udd_sleep_mode(true); // Enter in IDLE mode
   848be:	2001      	movs	r0, #1
   848c0:	4b22      	ldr	r3, [pc, #136]	; (8494c <UDPHS_Handler+0x1bc>)
   848c2:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   848c4:	4b15      	ldr	r3, [pc, #84]	; (8491c <UDPHS_Handler+0x18c>)
   848c6:	2202      	movs	r2, #2
   848c8:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   848ca:	4b14      	ldr	r3, [pc, #80]	; (8491c <UDPHS_Handler+0x18c>)
   848cc:	2220      	movs	r2, #32
   848ce:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   848d0:	4b12      	ldr	r3, [pc, #72]	; (8491c <UDPHS_Handler+0x18c>)
   848d2:	691b      	ldr	r3, [r3, #16]
   848d4:	4a11      	ldr	r2, [pc, #68]	; (8491c <UDPHS_Handler+0x18c>)
   848d6:	f023 0320 	bic.w	r3, r3, #32
   848da:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   848dc:	4b0f      	ldr	r3, [pc, #60]	; (8491c <UDPHS_Handler+0x18c>)
   848de:	691b      	ldr	r3, [r3, #16]
   848e0:	4a0e      	ldr	r2, [pc, #56]	; (8491c <UDPHS_Handler+0x18c>)
   848e2:	f043 0302 	orr.w	r3, r3, #2
   848e6:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   848e8:	4b0c      	ldr	r3, [pc, #48]	; (8491c <UDPHS_Handler+0x18c>)
   848ea:	691b      	ldr	r3, [r3, #16]
   848ec:	4a0b      	ldr	r2, [pc, #44]	; (8491c <UDPHS_Handler+0x18c>)
   848ee:	f043 0308 	orr.w	r3, r3, #8
   848f2:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   848f4:	4b09      	ldr	r3, [pc, #36]	; (8491c <UDPHS_Handler+0x18c>)
   848f6:	691b      	ldr	r3, [r3, #16]
   848f8:	4a08      	ldr	r2, [pc, #32]	; (8491c <UDPHS_Handler+0x18c>)
   848fa:	f043 0304 	orr.w	r3, r3, #4
   848fe:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   84900:	4b13      	ldr	r3, [pc, #76]	; (84950 <UDPHS_Handler+0x1c0>)
   84902:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   84904:	e004      	b.n	84910 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   84906:	bf00      	nop
   84908:	e002      	b.n	84910 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   8490a:	bf00      	nop
   8490c:	e000      	b.n	84910 <UDPHS_Handler+0x180>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   8490e:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   84910:	bf00      	nop
}
   84912:	bd80      	pop	{r7, pc}
   84914:	00082911 	.word	0x00082911
   84918:	00082ed5 	.word	0x00082ed5
   8491c:	400a4000 	.word	0x400a4000
   84920:	20000284 	.word	0x20000284
   84924:	00083981 	.word	0x00083981
   84928:	00080b95 	.word	0x00080b95
   8492c:	00085c05 	.word	0x00085c05
   84930:	00086021 	.word	0x00086021
   84934:	00085d45 	.word	0x00085d45
   84938:	0008392d 	.word	0x0008392d
   8493c:	00085565 	.word	0x00085565
   84940:	000855e5 	.word	0x000855e5
   84944:	0008295d 	.word	0x0008295d
   84948:	00080b7d 	.word	0x00080b7d
   8494c:	00084739 	.word	0x00084739
   84950:	00080b89 	.word	0x00080b89

00084954 <udd_enable>:
#endif
}


void udd_enable(void)
{
   84954:	b580      	push	{r7, lr}
   84956:	b082      	sub	sp, #8
   84958:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   8495a:	4b19      	ldr	r3, [pc, #100]	; (849c0 <udd_enable+0x6c>)
   8495c:	4798      	blx	r3

	udd_enable_periph_ck();
   8495e:	201d      	movs	r0, #29
   84960:	4b18      	ldr	r3, [pc, #96]	; (849c4 <udd_enable+0x70>)
   84962:	4798      	blx	r3

	flags = cpu_irq_save();
   84964:	4b18      	ldr	r3, [pc, #96]	; (849c8 <udd_enable+0x74>)
   84966:	4798      	blx	r3
   84968:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   8496a:	4b18      	ldr	r3, [pc, #96]	; (849cc <udd_enable+0x78>)
   8496c:	681b      	ldr	r3, [r3, #0]
   8496e:	4a17      	ldr	r2, [pc, #92]	; (849cc <udd_enable+0x78>)
   84970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   84974:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   84976:	2105      	movs	r1, #5
   84978:	201d      	movs	r0, #29
   8497a:	4b15      	ldr	r3, [pc, #84]	; (849d0 <udd_enable+0x7c>)
   8497c:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   8497e:	201d      	movs	r0, #29
   84980:	4b14      	ldr	r3, [pc, #80]	; (849d4 <udd_enable+0x80>)
   84982:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   84984:	4b14      	ldr	r3, [pc, #80]	; (849d8 <udd_enable+0x84>)
   84986:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   84988:	4b10      	ldr	r3, [pc, #64]	; (849cc <udd_enable+0x78>)
   8498a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8498e:	4a0f      	ldr	r2, [pc, #60]	; (849cc <udd_enable+0x78>)
   84990:	f023 0303 	bic.w	r3, r3, #3
   84994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84998:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8499c:	4b0f      	ldr	r3, [pc, #60]	; (849dc <udd_enable+0x88>)
   8499e:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   849a0:	4b0f      	ldr	r3, [pc, #60]	; (849e0 <udd_enable+0x8c>)
   849a2:	2200      	movs	r2, #0
   849a4:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   849a6:	2003      	movs	r0, #3
   849a8:	4b0e      	ldr	r3, [pc, #56]	; (849e4 <udd_enable+0x90>)
   849aa:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   849ac:	4b0e      	ldr	r3, [pc, #56]	; (849e8 <udd_enable+0x94>)
   849ae:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   849b0:	6878      	ldr	r0, [r7, #4]
   849b2:	4b0e      	ldr	r3, [pc, #56]	; (849ec <udd_enable+0x98>)
   849b4:	4798      	blx	r3
}
   849b6:	bf00      	nop
   849b8:	3708      	adds	r7, #8
   849ba:	46bd      	mov	sp, r7
   849bc:	bd80      	pop	{r7, pc}
   849be:	bf00      	nop
   849c0:	00083451 	.word	0x00083451
   849c4:	00082911 	.word	0x00082911
   849c8:	00084639 	.word	0x00084639
   849cc:	400a4000 	.word	0x400a4000
   849d0:	000845e5 	.word	0x000845e5
   849d4:	000845b5 	.word	0x000845b5
   849d8:	00085ce9 	.word	0x00085ce9
   849dc:	000829cd 	.word	0x000829cd
   849e0:	20001344 	.word	0x20001344
   849e4:	000846c9 	.word	0x000846c9
   849e8:	000849f1 	.word	0x000849f1
   849ec:	00084695 	.word	0x00084695

000849f0 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   849f0:	b580      	push	{r7, lr}
   849f2:	b082      	sub	sp, #8
   849f4:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   849f6:	4b26      	ldr	r3, [pc, #152]	; (84a90 <udd_attach+0xa0>)
   849f8:	4798      	blx	r3
   849fa:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   849fc:	2001      	movs	r0, #1
   849fe:	4b25      	ldr	r3, [pc, #148]	; (84a94 <udd_attach+0xa4>)
   84a00:	4798      	blx	r3
	udd_enable_periph_ck();
   84a02:	201d      	movs	r0, #29
   84a04:	4b24      	ldr	r3, [pc, #144]	; (84a98 <udd_attach+0xa8>)
   84a06:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   84a08:	4b24      	ldr	r3, [pc, #144]	; (84a9c <udd_attach+0xac>)
   84a0a:	681b      	ldr	r3, [r3, #0]
   84a0c:	4a23      	ldr	r2, [pc, #140]	; (84a9c <udd_attach+0xac>)
   84a0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84a12:	6013      	str	r3, [r2, #0]
   84a14:	4b21      	ldr	r3, [pc, #132]	; (84a9c <udd_attach+0xac>)
   84a16:	681b      	ldr	r3, [r3, #0]
   84a18:	4a20      	ldr	r2, [pc, #128]	; (84a9c <udd_attach+0xac>)
   84a1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   84a1e:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   84a20:	4b1e      	ldr	r3, [pc, #120]	; (84a9c <udd_attach+0xac>)
   84a22:	691b      	ldr	r3, [r3, #16]
   84a24:	4a1d      	ldr	r2, [pc, #116]	; (84a9c <udd_attach+0xac>)
   84a26:	f043 0310 	orr.w	r3, r3, #16
   84a2a:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   84a2c:	4b1b      	ldr	r3, [pc, #108]	; (84a9c <udd_attach+0xac>)
   84a2e:	691b      	ldr	r3, [r3, #16]
   84a30:	4a1a      	ldr	r2, [pc, #104]	; (84a9c <udd_attach+0xac>)
   84a32:	f043 0302 	orr.w	r3, r3, #2
   84a36:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   84a38:	4b18      	ldr	r3, [pc, #96]	; (84a9c <udd_attach+0xac>)
   84a3a:	691b      	ldr	r3, [r3, #16]
   84a3c:	4a17      	ldr	r2, [pc, #92]	; (84a9c <udd_attach+0xac>)
   84a3e:	f043 0320 	orr.w	r3, r3, #32
   84a42:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   84a44:	4b15      	ldr	r3, [pc, #84]	; (84a9c <udd_attach+0xac>)
   84a46:	691b      	ldr	r3, [r3, #16]
   84a48:	4a14      	ldr	r2, [pc, #80]	; (84a9c <udd_attach+0xac>)
   84a4a:	f043 0308 	orr.w	r3, r3, #8
   84a4e:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   84a50:	4b12      	ldr	r3, [pc, #72]	; (84a9c <udd_attach+0xac>)
   84a52:	691b      	ldr	r3, [r3, #16]
   84a54:	4a11      	ldr	r2, [pc, #68]	; (84a9c <udd_attach+0xac>)
   84a56:	f043 0304 	orr.w	r3, r3, #4
   84a5a:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   84a5c:	4b0f      	ldr	r3, [pc, #60]	; (84a9c <udd_attach+0xac>)
   84a5e:	2208      	movs	r2, #8
   84a60:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   84a62:	4b0e      	ldr	r3, [pc, #56]	; (84a9c <udd_attach+0xac>)
   84a64:	2204      	movs	r2, #4
   84a66:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   84a68:	4b0c      	ldr	r3, [pc, #48]	; (84a9c <udd_attach+0xac>)
   84a6a:	2210      	movs	r2, #16
   84a6c:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   84a6e:	4b0b      	ldr	r3, [pc, #44]	; (84a9c <udd_attach+0xac>)
   84a70:	2202      	movs	r2, #2
   84a72:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   84a74:	4b09      	ldr	r3, [pc, #36]	; (84a9c <udd_attach+0xac>)
   84a76:	2220      	movs	r2, #32
   84a78:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   84a7a:	201d      	movs	r0, #29
   84a7c:	4b08      	ldr	r3, [pc, #32]	; (84aa0 <udd_attach+0xb0>)
   84a7e:	4798      	blx	r3
	cpu_irq_restore(flags);
   84a80:	6878      	ldr	r0, [r7, #4]
   84a82:	4b08      	ldr	r3, [pc, #32]	; (84aa4 <udd_attach+0xb4>)
   84a84:	4798      	blx	r3
}
   84a86:	bf00      	nop
   84a88:	3708      	adds	r7, #8
   84a8a:	46bd      	mov	sp, r7
   84a8c:	bd80      	pop	{r7, pc}
   84a8e:	bf00      	nop
   84a90:	00084639 	.word	0x00084639
   84a94:	00084739 	.word	0x00084739
   84a98:	00082911 	.word	0x00082911
   84a9c:	400a4000 	.word	0x400a4000
   84aa0:	0008295d 	.word	0x0008295d
   84aa4:	00084695 	.word	0x00084695

00084aa8 <udd_detach>:


void udd_detach(void)
{
   84aa8:	b580      	push	{r7, lr}
   84aaa:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   84aac:	201d      	movs	r0, #29
   84aae:	4b0b      	ldr	r3, [pc, #44]	; (84adc <udd_detach+0x34>)
   84ab0:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   84ab2:	4b0b      	ldr	r3, [pc, #44]	; (84ae0 <udd_detach+0x38>)
   84ab4:	681b      	ldr	r3, [r3, #0]
   84ab6:	4a0a      	ldr	r2, [pc, #40]	; (84ae0 <udd_detach+0x38>)
   84ab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   84abc:	6013      	str	r3, [r2, #0]
   84abe:	4b08      	ldr	r3, [pc, #32]	; (84ae0 <udd_detach+0x38>)
   84ac0:	681b      	ldr	r3, [r3, #0]
   84ac2:	4a07      	ldr	r2, [pc, #28]	; (84ae0 <udd_detach+0x38>)
   84ac4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84ac8:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   84aca:	201d      	movs	r0, #29
   84acc:	4b05      	ldr	r3, [pc, #20]	; (84ae4 <udd_detach+0x3c>)
   84ace:	4798      	blx	r3
	udd_sleep_mode(false);
   84ad0:	2000      	movs	r0, #0
   84ad2:	4b05      	ldr	r3, [pc, #20]	; (84ae8 <udd_detach+0x40>)
   84ad4:	4798      	blx	r3
}
   84ad6:	bf00      	nop
   84ad8:	bd80      	pop	{r7, pc}
   84ada:	bf00      	nop
   84adc:	00082911 	.word	0x00082911
   84ae0:	400a4000 	.word	0x400a4000
   84ae4:	0008295d 	.word	0x0008295d
   84ae8:	00084739 	.word	0x00084739

00084aec <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   84aec:	b480      	push	{r7}
   84aee:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   84af0:	4b06      	ldr	r3, [pc, #24]	; (84b0c <udd_is_high_speed+0x20>)
   84af2:	695b      	ldr	r3, [r3, #20]
   84af4:	f003 0301 	and.w	r3, r3, #1
   84af8:	2b00      	cmp	r3, #0
   84afa:	bf14      	ite	ne
   84afc:	2301      	movne	r3, #1
   84afe:	2300      	moveq	r3, #0
   84b00:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   84b02:	4618      	mov	r0, r3
   84b04:	46bd      	mov	sp, r7
   84b06:	bc80      	pop	{r7}
   84b08:	4770      	bx	lr
   84b0a:	bf00      	nop
   84b0c:	400a4000 	.word	0x400a4000

00084b10 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   84b10:	b480      	push	{r7}
   84b12:	b083      	sub	sp, #12
   84b14:	af00      	add	r7, sp, #0
   84b16:	4603      	mov	r3, r0
   84b18:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   84b1a:	4b0d      	ldr	r3, [pc, #52]	; (84b50 <udd_set_address+0x40>)
   84b1c:	681b      	ldr	r3, [r3, #0]
   84b1e:	4a0c      	ldr	r2, [pc, #48]	; (84b50 <udd_set_address+0x40>)
   84b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84b24:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   84b26:	4b0a      	ldr	r3, [pc, #40]	; (84b50 <udd_set_address+0x40>)
   84b28:	681b      	ldr	r3, [r3, #0]
   84b2a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   84b2e:	79fb      	ldrb	r3, [r7, #7]
   84b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   84b34:	4906      	ldr	r1, [pc, #24]	; (84b50 <udd_set_address+0x40>)
   84b36:	4313      	orrs	r3, r2
   84b38:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   84b3a:	4b05      	ldr	r3, [pc, #20]	; (84b50 <udd_set_address+0x40>)
   84b3c:	681b      	ldr	r3, [r3, #0]
   84b3e:	4a04      	ldr	r2, [pc, #16]	; (84b50 <udd_set_address+0x40>)
   84b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84b44:	6013      	str	r3, [r2, #0]
}
   84b46:	bf00      	nop
   84b48:	370c      	adds	r7, #12
   84b4a:	46bd      	mov	sp, r7
   84b4c:	bc80      	pop	{r7}
   84b4e:	4770      	bx	lr
   84b50:	400a4000 	.word	0x400a4000

00084b54 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   84b54:	b480      	push	{r7}
   84b56:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   84b58:	4b04      	ldr	r3, [pc, #16]	; (84b6c <udd_getaddress+0x18>)
   84b5a:	681b      	ldr	r3, [r3, #0]
   84b5c:	b2db      	uxtb	r3, r3
   84b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   84b62:	b2db      	uxtb	r3, r3
}
   84b64:	4618      	mov	r0, r3
   84b66:	46bd      	mov	sp, r7
   84b68:	bc80      	pop	{r7}
   84b6a:	4770      	bx	lr
   84b6c:	400a4000 	.word	0x400a4000

00084b70 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   84b70:	b480      	push	{r7}
   84b72:	b083      	sub	sp, #12
   84b74:	af00      	add	r7, sp, #0
   84b76:	6078      	str	r0, [r7, #4]
   84b78:	460b      	mov	r3, r1
   84b7a:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   84b7c:	4a05      	ldr	r2, [pc, #20]	; (84b94 <udd_set_setup_payload+0x24>)
   84b7e:	687b      	ldr	r3, [r7, #4]
   84b80:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   84b82:	4a04      	ldr	r2, [pc, #16]	; (84b94 <udd_set_setup_payload+0x24>)
   84b84:	887b      	ldrh	r3, [r7, #2]
   84b86:	8193      	strh	r3, [r2, #12]
}
   84b88:	bf00      	nop
   84b8a:	370c      	adds	r7, #12
   84b8c:	46bd      	mov	sp, r7
   84b8e:	bc80      	pop	{r7}
   84b90:	4770      	bx	lr
   84b92:	bf00      	nop
   84b94:	20001828 	.word	0x20001828

00084b98 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   84b98:	b590      	push	{r4, r7, lr}
   84b9a:	b089      	sub	sp, #36	; 0x24
   84b9c:	af02      	add	r7, sp, #8
   84b9e:	4603      	mov	r3, r0
   84ba0:	71fb      	strb	r3, [r7, #7]
   84ba2:	460b      	mov	r3, r1
   84ba4:	71bb      	strb	r3, [r7, #6]
   84ba6:	4613      	mov	r3, r2
   84ba8:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   84baa:	2300      	movs	r3, #0
   84bac:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   84bae:	2300      	movs	r3, #0
   84bb0:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   84bb2:	79fb      	ldrb	r3, [r7, #7]
   84bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   84bb8:	2b00      	cmp	r3, #0
   84bba:	bf14      	ite	ne
   84bbc:	2301      	movne	r3, #1
   84bbe:	2300      	moveq	r3, #0
   84bc0:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   84bc2:	79fb      	ldrb	r3, [r7, #7]
   84bc4:	f003 030f 	and.w	r3, r3, #15
   84bc8:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   84bca:	79fb      	ldrb	r3, [r7, #7]
   84bcc:	2b02      	cmp	r3, #2
   84bce:	d901      	bls.n	84bd4 <udd_ep_alloc+0x3c>
		return false;
   84bd0:	2300      	movs	r3, #0
   84bd2:	e1b4      	b.n	84f3e <udd_ep_alloc+0x3a6>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   84bd4:	4ab3      	ldr	r2, [pc, #716]	; (84ea4 <udd_ep_alloc+0x30c>)
   84bd6:	79fb      	ldrb	r3, [r7, #7]
   84bd8:	015b      	lsls	r3, r3, #5
   84bda:	4413      	add	r3, r2
   84bdc:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84be0:	681b      	ldr	r3, [r3, #0]
   84be2:	f003 0301 	and.w	r3, r3, #1
   84be6:	2b00      	cmp	r3, #0
   84be8:	d001      	beq.n	84bee <udd_ep_alloc+0x56>
		return false;
   84bea:	2300      	movs	r3, #0
   84bec:	e1a7      	b.n	84f3e <udd_ep_alloc+0x3a6>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   84bee:	79bb      	ldrb	r3, [r7, #6]
   84bf0:	f003 0303 	and.w	r3, r3, #3
   84bf4:	2b03      	cmp	r3, #3
   84bf6:	d01a      	beq.n	84c2e <udd_ep_alloc+0x96>
   84bf8:	2b03      	cmp	r3, #3
   84bfa:	dc1e      	bgt.n	84c3a <udd_ep_alloc+0xa2>
   84bfc:	2b01      	cmp	r3, #1
   84bfe:	d002      	beq.n	84c06 <udd_ep_alloc+0x6e>
   84c00:	2b02      	cmp	r3, #2
   84c02:	d017      	beq.n	84c34 <udd_ep_alloc+0x9c>
   84c04:	e019      	b.n	84c3a <udd_ep_alloc+0xa2>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   84c06:	79fb      	ldrb	r3, [r7, #7]
   84c08:	2b00      	cmp	r3, #0
   84c0a:	d007      	beq.n	84c1c <udd_ep_alloc+0x84>
   84c0c:	79fb      	ldrb	r3, [r7, #7]
   84c0e:	2b03      	cmp	r3, #3
   84c10:	d004      	beq.n	84c1c <udd_ep_alloc+0x84>
   84c12:	79fb      	ldrb	r3, [r7, #7]
   84c14:	2b04      	cmp	r3, #4
   84c16:	d001      	beq.n	84c1c <udd_ep_alloc+0x84>
   84c18:	2301      	movs	r3, #1
   84c1a:	e000      	b.n	84c1e <udd_ep_alloc+0x86>
   84c1c:	2300      	movs	r3, #0
   84c1e:	747b      	strb	r3, [r7, #17]
   84c20:	7c7b      	ldrb	r3, [r7, #17]
   84c22:	f003 0301 	and.w	r3, r3, #1
   84c26:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   84c28:	2301      	movs	r3, #1
   84c2a:	757b      	strb	r3, [r7, #21]
		break;
   84c2c:	e007      	b.n	84c3e <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   84c2e:	2301      	movs	r3, #1
   84c30:	757b      	strb	r3, [r7, #21]
		break;
   84c32:	e004      	b.n	84c3e <udd_ep_alloc+0xa6>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   84c34:	2302      	movs	r3, #2
   84c36:	757b      	strb	r3, [r7, #21]
		break;
   84c38:	e001      	b.n	84c3e <udd_ep_alloc+0xa6>
	default:
		Assert(false);
		return false;
   84c3a:	2300      	movs	r3, #0
   84c3c:	e17f      	b.n	84f3e <udd_ep_alloc+0x3a6>
	}
	switch (nb_bank) {
   84c3e:	7d7b      	ldrb	r3, [r7, #21]
   84c40:	2b03      	cmp	r3, #3
   84c42:	d00c      	beq.n	84c5e <udd_ep_alloc+0xc6>
   84c44:	2b03      	cmp	r3, #3
   84c46:	dc0d      	bgt.n	84c64 <udd_ep_alloc+0xcc>
   84c48:	2b01      	cmp	r3, #1
   84c4a:	d002      	beq.n	84c52 <udd_ep_alloc+0xba>
   84c4c:	2b02      	cmp	r3, #2
   84c4e:	d003      	beq.n	84c58 <udd_ep_alloc+0xc0>
   84c50:	e008      	b.n	84c64 <udd_ep_alloc+0xcc>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84c52:	2301      	movs	r3, #1
   84c54:	753b      	strb	r3, [r7, #20]
		break;
   84c56:	e007      	b.n	84c68 <udd_ep_alloc+0xd0>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84c58:	2302      	movs	r3, #2
   84c5a:	753b      	strb	r3, [r7, #20]
		break;
   84c5c:	e004      	b.n	84c68 <udd_ep_alloc+0xd0>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   84c5e:	2303      	movs	r3, #3
   84c60:	753b      	strb	r3, [r7, #20]
		break;
   84c62:	e001      	b.n	84c68 <udd_ep_alloc+0xd0>
	default:
		Assert(false);
		return false;
   84c64:	2300      	movs	r3, #0
   84c66:	e16a      	b.n	84f3e <udd_ep_alloc+0x3a6>
	}
	if (b_iso_hbw) {
   84c68:	7c7b      	ldrb	r3, [r7, #17]
   84c6a:	2b00      	cmp	r3, #0
   84c6c:	d017      	beq.n	84c9e <udd_ep_alloc+0x106>
		switch(MaxEndpointSize & (0x3u << 11)) {
   84c6e:	88bb      	ldrh	r3, [r7, #4]
   84c70:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   84c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   84c78:	d003      	beq.n	84c82 <udd_ep_alloc+0xea>
   84c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   84c7e:	d003      	beq.n	84c88 <udd_ep_alloc+0xf0>
   84c80:	e005      	b.n	84c8e <udd_ep_alloc+0xf6>
		case (0x1u << 11):
			nb_tran = 2;
   84c82:	2302      	movs	r3, #2
   84c84:	74fb      	strb	r3, [r7, #19]
			break;
   84c86:	e005      	b.n	84c94 <udd_ep_alloc+0xfc>
		case (0x2u << 11):
			nb_tran = 3;
   84c88:	2303      	movs	r3, #3
   84c8a:	74fb      	strb	r3, [r7, #19]
			break;
   84c8c:	e002      	b.n	84c94 <udd_ep_alloc+0xfc>
		default:
			nb_tran = 1;
   84c8e:	2301      	movs	r3, #1
   84c90:	74fb      	strb	r3, [r7, #19]
			break;
   84c92:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   84c94:	88bb      	ldrh	r3, [r7, #4]
   84c96:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   84c9a:	80bb      	strh	r3, [r7, #4]
   84c9c:	e006      	b.n	84cac <udd_ep_alloc+0x114>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   84c9e:	88bb      	ldrh	r3, [r7, #4]
   84ca0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   84ca4:	2b00      	cmp	r3, #0
   84ca6:	d001      	beq.n	84cac <udd_ep_alloc+0x114>
		// High BW not supported
		return false;
   84ca8:	2300      	movs	r3, #0
   84caa:	e148      	b.n	84f3e <udd_ep_alloc+0x3a6>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   84cac:	4a7d      	ldr	r2, [pc, #500]	; (84ea4 <udd_ep_alloc+0x30c>)
   84cae:	79fb      	ldrb	r3, [r7, #7]
   84cb0:	3308      	adds	r3, #8
   84cb2:	015b      	lsls	r3, r3, #5
   84cb4:	4413      	add	r3, r2
   84cb6:	681b      	ldr	r3, [r3, #0]
   84cb8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   84cbc:	f023 0303 	bic.w	r3, r3, #3
   84cc0:	79ba      	ldrb	r2, [r7, #6]
   84cc2:	0112      	lsls	r2, r2, #4
   84cc4:	f002 0230 	and.w	r2, r2, #48	; 0x30
   84cc8:	7c39      	ldrb	r1, [r7, #16]
   84cca:	2900      	cmp	r1, #0
   84ccc:	d001      	beq.n	84cd2 <udd_ep_alloc+0x13a>
   84cce:	2108      	movs	r1, #8
   84cd0:	e000      	b.n	84cd4 <udd_ep_alloc+0x13c>
   84cd2:	2100      	movs	r1, #0
   84cd4:	4311      	orrs	r1, r2
   84cd6:	88ba      	ldrh	r2, [r7, #4]
   84cd8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   84cdc:	d207      	bcs.n	84cee <udd_ep_alloc+0x156>
   84cde:	88ba      	ldrh	r2, [r7, #4]
   84ce0:	2a08      	cmp	r2, #8
   84ce2:	bf38      	it	cc
   84ce4:	2208      	movcc	r2, #8
   84ce6:	b292      	uxth	r2, r2
   84ce8:	0052      	lsls	r2, r2, #1
   84cea:	3a01      	subs	r2, #1
   84cec:	e001      	b.n	84cf2 <udd_ep_alloc+0x15a>
   84cee:	f240 72ff 	movw	r2, #2047	; 0x7ff
   84cf2:	fab2 f282 	clz	r2, r2
   84cf6:	f1c2 021c 	rsb	r2, r2, #28
   84cfa:	4311      	orrs	r1, r2
   84cfc:	7d3a      	ldrb	r2, [r7, #20]
   84cfe:	0192      	lsls	r2, r2, #6
   84d00:	b2d2      	uxtb	r2, r2
   84d02:	4311      	orrs	r1, r2
   84d04:	7c7a      	ldrb	r2, [r7, #17]
   84d06:	2a00      	cmp	r2, #0
   84d08:	d004      	beq.n	84d14 <udd_ep_alloc+0x17c>
   84d0a:	7cfa      	ldrb	r2, [r7, #19]
   84d0c:	0212      	lsls	r2, r2, #8
   84d0e:	f402 7240 	and.w	r2, r2, #768	; 0x300
   84d12:	e000      	b.n	84d16 <udd_ep_alloc+0x17e>
   84d14:	2200      	movs	r2, #0
   84d16:	430a      	orrs	r2, r1
   84d18:	f3c2 0209 	ubfx	r2, r2, #0, #10
   84d1c:	4861      	ldr	r0, [pc, #388]	; (84ea4 <udd_ep_alloc+0x30c>)
   84d1e:	79f9      	ldrb	r1, [r7, #7]
   84d20:	431a      	orrs	r2, r3
   84d22:	f101 0308 	add.w	r3, r1, #8
   84d26:	015b      	lsls	r3, r3, #5
   84d28:	4403      	add	r3, r0
   84d2a:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   84d2c:	4a5d      	ldr	r2, [pc, #372]	; (84ea4 <udd_ep_alloc+0x30c>)
   84d2e:	79fb      	ldrb	r3, [r7, #7]
   84d30:	3308      	adds	r3, #8
   84d32:	015b      	lsls	r3, r3, #5
   84d34:	4413      	add	r3, r2
   84d36:	681b      	ldr	r3, [r3, #0]
   84d38:	2b00      	cmp	r3, #0
   84d3a:	db01      	blt.n	84d40 <udd_ep_alloc+0x1a8>
		return false;
   84d3c:	2300      	movs	r3, #0
   84d3e:	e0fe      	b.n	84f3e <udd_ep_alloc+0x3a6>
	}
	udd_enable_endpoint(ep);
   84d40:	4a58      	ldr	r2, [pc, #352]	; (84ea4 <udd_ep_alloc+0x30c>)
   84d42:	79fb      	ldrb	r3, [r7, #7]
   84d44:	3308      	adds	r3, #8
   84d46:	015b      	lsls	r3, r3, #5
   84d48:	4413      	add	r3, r2
   84d4a:	3304      	adds	r3, #4
   84d4c:	2201      	movs	r2, #1
   84d4e:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   84d50:	2300      	movs	r3, #0
   84d52:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84d54:	2302      	movs	r3, #2
   84d56:	74bb      	strb	r3, [r7, #18]
   84d58:	e039      	b.n	84dce <udd_ep_alloc+0x236>
		if (Is_udd_endpoint_enabled(i)) {
   84d5a:	4a52      	ldr	r2, [pc, #328]	; (84ea4 <udd_ep_alloc+0x30c>)
   84d5c:	7cbb      	ldrb	r3, [r7, #18]
   84d5e:	015b      	lsls	r3, r3, #5
   84d60:	4413      	add	r3, r2
   84d62:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84d66:	681b      	ldr	r3, [r3, #0]
   84d68:	f003 0301 	and.w	r3, r3, #1
   84d6c:	2b00      	cmp	r3, #0
   84d6e:	d02b      	beq.n	84dc8 <udd_ep_alloc+0x230>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   84d70:	4a4c      	ldr	r2, [pc, #304]	; (84ea4 <udd_ep_alloc+0x30c>)
   84d72:	7cbb      	ldrb	r3, [r7, #18]
   84d74:	3308      	adds	r3, #8
   84d76:	015b      	lsls	r3, r3, #5
   84d78:	4413      	add	r3, r2
   84d7a:	681b      	ldr	r3, [r3, #0]
   84d7c:	099b      	lsrs	r3, r3, #6
   84d7e:	b2db      	uxtb	r3, r3
   84d80:	f003 0303 	and.w	r3, r3, #3
   84d84:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   84d86:	7d3a      	ldrb	r2, [r7, #20]
   84d88:	7cbb      	ldrb	r3, [r7, #18]
   84d8a:	005b      	lsls	r3, r3, #1
   84d8c:	fa02 f303 	lsl.w	r3, r2, r3
   84d90:	b21a      	sxth	r2, r3
   84d92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   84d96:	4313      	orrs	r3, r2
   84d98:	b21b      	sxth	r3, r3
   84d9a:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   84d9c:	4a41      	ldr	r2, [pc, #260]	; (84ea4 <udd_ep_alloc+0x30c>)
   84d9e:	7cbb      	ldrb	r3, [r7, #18]
   84da0:	015b      	lsls	r3, r3, #5
   84da2:	4413      	add	r3, r2
   84da4:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84da8:	2201      	movs	r2, #1
   84daa:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   84dac:	4a3d      	ldr	r2, [pc, #244]	; (84ea4 <udd_ep_alloc+0x30c>)
   84dae:	7cbb      	ldrb	r3, [r7, #18]
   84db0:	3308      	adds	r3, #8
   84db2:	015b      	lsls	r3, r3, #5
   84db4:	4413      	add	r3, r2
   84db6:	681a      	ldr	r2, [r3, #0]
   84db8:	493a      	ldr	r1, [pc, #232]	; (84ea4 <udd_ep_alloc+0x30c>)
   84dba:	7cbb      	ldrb	r3, [r7, #18]
   84dbc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   84dc0:	3308      	adds	r3, #8
   84dc2:	015b      	lsls	r3, r3, #5
   84dc4:	440b      	add	r3, r1
   84dc6:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   84dc8:	7cbb      	ldrb	r3, [r7, #18]
   84dca:	3b01      	subs	r3, #1
   84dcc:	74bb      	strb	r3, [r7, #18]
   84dce:	7cba      	ldrb	r2, [r7, #18]
   84dd0:	79fb      	ldrb	r3, [r7, #7]
   84dd2:	429a      	cmp	r2, r3
   84dd4:	d2c1      	bcs.n	84d5a <udd_ep_alloc+0x1c2>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   84dd6:	79fb      	ldrb	r3, [r7, #7]
   84dd8:	74bb      	strb	r3, [r7, #18]
   84dda:	e0ab      	b.n	84f34 <udd_ep_alloc+0x39c>
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   84ddc:	7cbb      	ldrb	r3, [r7, #18]
   84dde:	1e5a      	subs	r2, r3, #1
   84de0:	4613      	mov	r3, r2
   84de2:	005b      	lsls	r3, r3, #1
   84de4:	4413      	add	r3, r2
   84de6:	00db      	lsls	r3, r3, #3
   84de8:	4a2f      	ldr	r2, [pc, #188]	; (84ea8 <udd_ep_alloc+0x310>)
   84dea:	4413      	add	r3, r2
   84dec:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   84dee:	68fb      	ldr	r3, [r7, #12]
   84df0:	7d1b      	ldrb	r3, [r3, #20]
   84df2:	f3c3 0300 	ubfx	r3, r3, #0, #1
   84df6:	b2db      	uxtb	r3, r3
   84df8:	2b00      	cmp	r3, #0
   84dfa:	bf14      	ite	ne
   84dfc:	2301      	movne	r3, #1
   84dfe:	2300      	moveq	r3, #0
   84e00:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   84e02:	8afa      	ldrh	r2, [r7, #22]
   84e04:	7cbb      	ldrb	r3, [r7, #18]
   84e06:	005b      	lsls	r3, r3, #1
   84e08:	fa42 f303 	asr.w	r3, r2, r3
   84e0c:	b2db      	uxtb	r3, r3
   84e0e:	f003 0303 	and.w	r3, r3, #3
   84e12:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   84e14:	7d3b      	ldrb	r3, [r7, #20]
   84e16:	2b00      	cmp	r3, #0
   84e18:	f000 8088 	beq.w	84f2c <udd_ep_alloc+0x394>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   84e1c:	68fa      	ldr	r2, [r7, #12]
   84e1e:	7d13      	ldrb	r3, [r2, #20]
   84e20:	f36f 0300 	bfc	r3, #0, #1
   84e24:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   84e26:	4a1f      	ldr	r2, [pc, #124]	; (84ea4 <udd_ep_alloc+0x30c>)
   84e28:	7cbb      	ldrb	r3, [r7, #18]
   84e2a:	3308      	adds	r3, #8
   84e2c:	015b      	lsls	r3, r3, #5
   84e2e:	4413      	add	r3, r2
   84e30:	681b      	ldr	r3, [r3, #0]
   84e32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   84e36:	7d3b      	ldrb	r3, [r7, #20]
   84e38:	019b      	lsls	r3, r3, #6
   84e3a:	b2da      	uxtb	r2, r3
   84e3c:	4819      	ldr	r0, [pc, #100]	; (84ea4 <udd_ep_alloc+0x30c>)
   84e3e:	7cbb      	ldrb	r3, [r7, #18]
   84e40:	430a      	orrs	r2, r1
   84e42:	3308      	adds	r3, #8
   84e44:	015b      	lsls	r3, r3, #5
   84e46:	4403      	add	r3, r0
   84e48:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   84e4a:	4a16      	ldr	r2, [pc, #88]	; (84ea4 <udd_ep_alloc+0x30c>)
   84e4c:	7cbb      	ldrb	r3, [r7, #18]
   84e4e:	3308      	adds	r3, #8
   84e50:	015b      	lsls	r3, r3, #5
   84e52:	4413      	add	r3, r2
   84e54:	3304      	adds	r3, #4
   84e56:	2201      	movs	r2, #1
   84e58:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   84e5a:	4a12      	ldr	r2, [pc, #72]	; (84ea4 <udd_ep_alloc+0x30c>)
   84e5c:	7cbb      	ldrb	r3, [r7, #18]
   84e5e:	3308      	adds	r3, #8
   84e60:	015b      	lsls	r3, r3, #5
   84e62:	4413      	add	r3, r2
   84e64:	681b      	ldr	r3, [r3, #0]
   84e66:	2b00      	cmp	r3, #0
   84e68:	db20      	blt.n	84eac <udd_ep_alloc+0x314>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   84e6a:	68fb      	ldr	r3, [r7, #12]
   84e6c:	681b      	ldr	r3, [r3, #0]
   84e6e:	2b00      	cmp	r3, #0
   84e70:	d101      	bne.n	84e76 <udd_ep_alloc+0x2de>
				return false;
   84e72:	2300      	movs	r3, #0
   84e74:	e063      	b.n	84f3e <udd_ep_alloc+0x3a6>
			}
			if (Is_udd_endpoint_in(i)) {
   84e76:	4a0b      	ldr	r2, [pc, #44]	; (84ea4 <udd_ep_alloc+0x30c>)
   84e78:	7cbb      	ldrb	r3, [r7, #18]
   84e7a:	3308      	adds	r3, #8
   84e7c:	015b      	lsls	r3, r3, #5
   84e7e:	4413      	add	r3, r2
   84e80:	681b      	ldr	r3, [r3, #0]
   84e82:	f003 0308 	and.w	r3, r3, #8
   84e86:	2b00      	cmp	r3, #0
   84e88:	d003      	beq.n	84e92 <udd_ep_alloc+0x2fa>
				i |= USB_EP_DIR_IN;
   84e8a:	7cbb      	ldrb	r3, [r7, #18]
   84e8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   84e90:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   84e92:	68fb      	ldr	r3, [r7, #12]
   84e94:	681b      	ldr	r3, [r3, #0]
   84e96:	68fa      	ldr	r2, [r7, #12]
   84e98:	68d1      	ldr	r1, [r2, #12]
   84e9a:	7cba      	ldrb	r2, [r7, #18]
   84e9c:	2001      	movs	r0, #1
   84e9e:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   84ea0:	2300      	movs	r3, #0
   84ea2:	e04c      	b.n	84f3e <udd_ep_alloc+0x3a6>
   84ea4:	400a4000 	.word	0x400a4000
   84ea8:	2000134c 	.word	0x2000134c
		}
		udd_enable_endpoint_bank_autoswitch(i);
   84eac:	4a26      	ldr	r2, [pc, #152]	; (84f48 <udd_ep_alloc+0x3b0>)
   84eae:	7cbb      	ldrb	r3, [r7, #18]
   84eb0:	3308      	adds	r3, #8
   84eb2:	015b      	lsls	r3, r3, #5
   84eb4:	4413      	add	r3, r2
   84eb6:	3304      	adds	r3, #4
   84eb8:	681a      	ldr	r2, [r3, #0]
   84eba:	4923      	ldr	r1, [pc, #140]	; (84f48 <udd_ep_alloc+0x3b0>)
   84ebc:	7cbb      	ldrb	r3, [r7, #18]
   84ebe:	f042 0202 	orr.w	r2, r2, #2
   84ec2:	3308      	adds	r3, #8
   84ec4:	015b      	lsls	r3, r3, #5
   84ec6:	440b      	add	r3, r1
   84ec8:	3304      	adds	r3, #4
   84eca:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   84ecc:	7afb      	ldrb	r3, [r7, #11]
   84ece:	2b00      	cmp	r3, #0
   84ed0:	d02d      	beq.n	84f2e <udd_ep_alloc+0x396>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   84ed2:	68fb      	ldr	r3, [r7, #12]
   84ed4:	68da      	ldr	r2, [r3, #12]
   84ed6:	68fb      	ldr	r3, [r7, #12]
   84ed8:	691b      	ldr	r3, [r3, #16]
   84eda:	1ad2      	subs	r2, r2, r3
   84edc:	68fb      	ldr	r3, [r7, #12]
   84ede:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   84ee0:	68fb      	ldr	r3, [r7, #12]
   84ee2:	7d1b      	ldrb	r3, [r3, #20]
   84ee4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   84ee8:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   84eea:	2b00      	cmp	r3, #0
   84eec:	bf14      	ite	ne
   84eee:	2301      	movne	r3, #1
   84ef0:	2300      	moveq	r3, #0
   84ef2:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   84ef4:	68fb      	ldr	r3, [r7, #12]
   84ef6:	685a      	ldr	r2, [r3, #4]
   84ef8:	68fb      	ldr	r3, [r7, #12]
   84efa:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   84efc:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   84efe:	68fb      	ldr	r3, [r7, #12]
   84f00:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   84f02:	68fb      	ldr	r3, [r7, #12]
   84f04:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   84f06:	1ad2      	subs	r2, r2, r3
   84f08:	68fb      	ldr	r3, [r7, #12]
   84f0a:	681b      	ldr	r3, [r3, #0]
   84f0c:	7cb8      	ldrb	r0, [r7, #18]
   84f0e:	9300      	str	r3, [sp, #0]
   84f10:	4613      	mov	r3, r2
   84f12:	4622      	mov	r2, r4
   84f14:	4c0d      	ldr	r4, [pc, #52]	; (84f4c <udd_ep_alloc+0x3b4>)
   84f16:	47a0      	blx	r4
   84f18:	4603      	mov	r3, r0
   84f1a:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   84f1c:	7afb      	ldrb	r3, [r7, #11]
   84f1e:	f083 0301 	eor.w	r3, r3, #1
   84f22:	b2db      	uxtb	r3, r3
   84f24:	2b00      	cmp	r3, #0
   84f26:	d002      	beq.n	84f2e <udd_ep_alloc+0x396>
				dbg_print("ErrReRun%d ", i);
				return false;
   84f28:	2300      	movs	r3, #0
   84f2a:	e008      	b.n	84f3e <udd_ep_alloc+0x3a6>
			continue;
   84f2c:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   84f2e:	7cbb      	ldrb	r3, [r7, #18]
   84f30:	3301      	adds	r3, #1
   84f32:	74bb      	strb	r3, [r7, #18]
   84f34:	7cbb      	ldrb	r3, [r7, #18]
   84f36:	2b02      	cmp	r3, #2
   84f38:	f67f af50 	bls.w	84ddc <udd_ep_alloc+0x244>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   84f3c:	2301      	movs	r3, #1
}
   84f3e:	4618      	mov	r0, r3
   84f40:	371c      	adds	r7, #28
   84f42:	46bd      	mov	sp, r7
   84f44:	bd90      	pop	{r4, r7, pc}
   84f46:	bf00      	nop
   84f48:	400a4000 	.word	0x400a4000
   84f4c:	0008527d 	.word	0x0008527d

00084f50 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   84f50:	b580      	push	{r7, lr}
   84f52:	b084      	sub	sp, #16
   84f54:	af00      	add	r7, sp, #0
   84f56:	4603      	mov	r3, r0
   84f58:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84f5a:	79fb      	ldrb	r3, [r7, #7]
   84f5c:	f003 030f 	and.w	r3, r3, #15
   84f60:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   84f62:	7bfb      	ldrb	r3, [r7, #15]
   84f64:	2b02      	cmp	r3, #2
   84f66:	d828      	bhi.n	84fba <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   84f68:	4a16      	ldr	r2, [pc, #88]	; (84fc4 <udd_ep_free+0x74>)
   84f6a:	7bfb      	ldrb	r3, [r7, #15]
   84f6c:	015b      	lsls	r3, r3, #5
   84f6e:	4413      	add	r3, r2
   84f70:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84f74:	2201      	movs	r2, #1
   84f76:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   84f78:	4a12      	ldr	r2, [pc, #72]	; (84fc4 <udd_ep_free+0x74>)
   84f7a:	7bfb      	ldrb	r3, [r7, #15]
   84f7c:	3308      	adds	r3, #8
   84f7e:	015b      	lsls	r3, r3, #5
   84f80:	4413      	add	r3, r2
   84f82:	681a      	ldr	r2, [r3, #0]
   84f84:	490f      	ldr	r1, [pc, #60]	; (84fc4 <udd_ep_free+0x74>)
   84f86:	7bfb      	ldrb	r3, [r7, #15]
   84f88:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   84f8c:	3308      	adds	r3, #8
   84f8e:	015b      	lsls	r3, r3, #5
   84f90:	440b      	add	r3, r1
   84f92:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   84f94:	79fb      	ldrb	r3, [r7, #7]
   84f96:	4618      	mov	r0, r3
   84f98:	4b0b      	ldr	r3, [pc, #44]	; (84fc8 <udd_ep_free+0x78>)
   84f9a:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   84f9c:	7bfb      	ldrb	r3, [r7, #15]
   84f9e:	1e5a      	subs	r2, r3, #1
   84fa0:	490a      	ldr	r1, [pc, #40]	; (84fcc <udd_ep_free+0x7c>)
   84fa2:	4613      	mov	r3, r2
   84fa4:	005b      	lsls	r3, r3, #1
   84fa6:	4413      	add	r3, r2
   84fa8:	00db      	lsls	r3, r3, #3
   84faa:	440b      	add	r3, r1
   84fac:	f103 0210 	add.w	r2, r3, #16
   84fb0:	7913      	ldrb	r3, [r2, #4]
   84fb2:	f36f 0382 	bfc	r3, #2, #1
   84fb6:	7113      	strb	r3, [r2, #4]
   84fb8:	e000      	b.n	84fbc <udd_ep_free+0x6c>
		return;
   84fba:	bf00      	nop
}
   84fbc:	3710      	adds	r7, #16
   84fbe:	46bd      	mov	sp, r7
   84fc0:	bd80      	pop	{r7, pc}
   84fc2:	bf00      	nop
   84fc4:	400a4000 	.word	0x400a4000
   84fc8:	00085d8d 	.word	0x00085d8d
   84fcc:	2000134c 	.word	0x2000134c

00084fd0 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   84fd0:	b480      	push	{r7}
   84fd2:	b085      	sub	sp, #20
   84fd4:	af00      	add	r7, sp, #0
   84fd6:	4603      	mov	r3, r0
   84fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84fda:	79fb      	ldrb	r3, [r7, #7]
   84fdc:	f003 030f 	and.w	r3, r3, #15
   84fe0:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   84fe2:	7bfb      	ldrb	r3, [r7, #15]
   84fe4:	1e5a      	subs	r2, r3, #1
   84fe6:	4613      	mov	r3, r2
   84fe8:	005b      	lsls	r3, r3, #1
   84fea:	4413      	add	r3, r2
   84fec:	00db      	lsls	r3, r3, #3
   84fee:	4a10      	ldr	r2, [pc, #64]	; (85030 <udd_ep_is_halted+0x60>)
   84ff0:	4413      	add	r3, r2
   84ff2:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   84ff4:	4a0f      	ldr	r2, [pc, #60]	; (85034 <udd_ep_is_halted+0x64>)
   84ff6:	7bfb      	ldrb	r3, [r7, #15]
   84ff8:	015b      	lsls	r3, r3, #5
   84ffa:	4413      	add	r3, r2
   84ffc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85000:	681b      	ldr	r3, [r3, #0]
   85002:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   85006:	2b00      	cmp	r3, #0
   85008:	d106      	bne.n	85018 <udd_ep_is_halted+0x48>
   8500a:	68bb      	ldr	r3, [r7, #8]
   8500c:	7d1b      	ldrb	r3, [r3, #20]
   8500e:	f003 0304 	and.w	r3, r3, #4
   85012:	b2db      	uxtb	r3, r3
   85014:	2b00      	cmp	r3, #0
   85016:	d001      	beq.n	8501c <udd_ep_is_halted+0x4c>
   85018:	2301      	movs	r3, #1
   8501a:	e000      	b.n	8501e <udd_ep_is_halted+0x4e>
   8501c:	2300      	movs	r3, #0
   8501e:	f003 0301 	and.w	r3, r3, #1
   85022:	b2db      	uxtb	r3, r3
}
   85024:	4618      	mov	r0, r3
   85026:	3714      	adds	r7, #20
   85028:	46bd      	mov	sp, r7
   8502a:	bc80      	pop	{r7}
   8502c:	4770      	bx	lr
   8502e:	bf00      	nop
   85030:	2000134c 	.word	0x2000134c
   85034:	400a4000 	.word	0x400a4000

00085038 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   85038:	b480      	push	{r7}
   8503a:	b085      	sub	sp, #20
   8503c:	af00      	add	r7, sp, #0
   8503e:	4603      	mov	r3, r0
   85040:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85042:	79fb      	ldrb	r3, [r7, #7]
   85044:	f003 030f 	and.w	r3, r3, #15
   85048:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   8504a:	7bfb      	ldrb	r3, [r7, #15]
   8504c:	2b02      	cmp	r3, #2
   8504e:	d901      	bls.n	85054 <udd_ep_set_halt+0x1c>
		return false;
   85050:	2300      	movs	r3, #0
   85052:	e071      	b.n	85138 <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   85054:	7bfb      	ldrb	r3, [r7, #15]
   85056:	1e5a      	subs	r2, r3, #1
   85058:	4613      	mov	r3, r2
   8505a:	005b      	lsls	r3, r3, #1
   8505c:	4413      	add	r3, r2
   8505e:	00db      	lsls	r3, r3, #3
   85060:	4a38      	ldr	r2, [pc, #224]	; (85144 <udd_ep_set_halt+0x10c>)
   85062:	4413      	add	r3, r2
   85064:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   85066:	4a38      	ldr	r2, [pc, #224]	; (85148 <udd_ep_set_halt+0x110>)
   85068:	7bfb      	ldrb	r3, [r7, #15]
   8506a:	015b      	lsls	r3, r3, #5
   8506c:	4413      	add	r3, r2
   8506e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   85072:	681b      	ldr	r3, [r3, #0]
   85074:	f003 0320 	and.w	r3, r3, #32
   85078:	2b00      	cmp	r3, #0
   8507a:	d106      	bne.n	8508a <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   8507c:	68bb      	ldr	r3, [r7, #8]
   8507e:	7d1b      	ldrb	r3, [r3, #20]
   85080:	f003 0304 	and.w	r3, r3, #4
   85084:	b2db      	uxtb	r3, r3
   85086:	2b00      	cmp	r3, #0
   85088:	d001      	beq.n	8508e <udd_ep_set_halt+0x56>
		return true; // Already STALL
   8508a:	2301      	movs	r3, #1
   8508c:	e054      	b.n	85138 <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   8508e:	68bb      	ldr	r3, [r7, #8]
   85090:	7d1b      	ldrb	r3, [r3, #20]
   85092:	f003 0301 	and.w	r3, r3, #1
   85096:	b2db      	uxtb	r3, r3
   85098:	2b00      	cmp	r3, #0
   8509a:	d001      	beq.n	850a0 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   8509c:	2300      	movs	r3, #0
   8509e:	e04b      	b.n	85138 <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   850a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   850a4:	2b00      	cmp	r3, #0
   850a6:	da25      	bge.n	850f4 <udd_ep_set_halt+0xbc>
   850a8:	4a27      	ldr	r2, [pc, #156]	; (85148 <udd_ep_set_halt+0x110>)
   850aa:	7bfb      	ldrb	r3, [r7, #15]
   850ac:	015b      	lsls	r3, r3, #5
   850ae:	4413      	add	r3, r2
   850b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   850b4:	681b      	ldr	r3, [r3, #0]
   850b6:	0c9b      	lsrs	r3, r3, #18
   850b8:	f003 0303 	and.w	r3, r3, #3
   850bc:	2b00      	cmp	r3, #0
   850be:	d019      	beq.n	850f4 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   850c0:	68ba      	ldr	r2, [r7, #8]
   850c2:	7d13      	ldrb	r3, [r2, #20]
   850c4:	f043 0304 	orr.w	r3, r3, #4
   850c8:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   850ca:	4a1f      	ldr	r2, [pc, #124]	; (85148 <udd_ep_set_halt+0x110>)
   850cc:	7bfb      	ldrb	r3, [r7, #15]
   850ce:	3308      	adds	r3, #8
   850d0:	015b      	lsls	r3, r3, #5
   850d2:	4413      	add	r3, r2
   850d4:	3304      	adds	r3, #4
   850d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   850da:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   850dc:	4b1a      	ldr	r3, [pc, #104]	; (85148 <udd_ep_set_halt+0x110>)
   850de:	691a      	ldr	r2, [r3, #16]
   850e0:	7bfb      	ldrb	r3, [r7, #15]
   850e2:	f44f 7180 	mov.w	r1, #256	; 0x100
   850e6:	fa01 f303 	lsl.w	r3, r1, r3
   850ea:	4917      	ldr	r1, [pc, #92]	; (85148 <udd_ep_set_halt+0x110>)
   850ec:	4313      	orrs	r3, r2
   850ee:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   850f0:	2301      	movs	r3, #1
   850f2:	e021      	b.n	85138 <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   850f4:	4a14      	ldr	r2, [pc, #80]	; (85148 <udd_ep_set_halt+0x110>)
   850f6:	7bfb      	ldrb	r3, [r7, #15]
   850f8:	015b      	lsls	r3, r3, #5
   850fa:	4413      	add	r3, r2
   850fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85100:	681a      	ldr	r2, [r3, #0]
   85102:	4911      	ldr	r1, [pc, #68]	; (85148 <udd_ep_set_halt+0x110>)
   85104:	7bfb      	ldrb	r3, [r7, #15]
   85106:	f022 0202 	bic.w	r2, r2, #2
   8510a:	015b      	lsls	r3, r3, #5
   8510c:	440b      	add	r3, r1
   8510e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   85112:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   85114:	4a0c      	ldr	r2, [pc, #48]	; (85148 <udd_ep_set_halt+0x110>)
   85116:	7bfb      	ldrb	r3, [r7, #15]
   85118:	015b      	lsls	r3, r3, #5
   8511a:	4413      	add	r3, r2
   8511c:	f503 738c 	add.w	r3, r3, #280	; 0x118
   85120:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   85124:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   85126:	4a08      	ldr	r2, [pc, #32]	; (85148 <udd_ep_set_halt+0x110>)
   85128:	7bfb      	ldrb	r3, [r7, #15]
   8512a:	015b      	lsls	r3, r3, #5
   8512c:	4413      	add	r3, r2
   8512e:	f503 738a 	add.w	r3, r3, #276	; 0x114
   85132:	2220      	movs	r2, #32
   85134:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   85136:	2301      	movs	r3, #1
}
   85138:	4618      	mov	r0, r3
   8513a:	3714      	adds	r7, #20
   8513c:	46bd      	mov	sp, r7
   8513e:	bc80      	pop	{r7}
   85140:	4770      	bx	lr
   85142:	bf00      	nop
   85144:	2000134c 	.word	0x2000134c
   85148:	400a4000 	.word	0x400a4000

0008514c <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   8514c:	b580      	push	{r7, lr}
   8514e:	b084      	sub	sp, #16
   85150:	af00      	add	r7, sp, #0
   85152:	4603      	mov	r3, r0
   85154:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   85156:	2300      	movs	r3, #0
   85158:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   8515a:	79fb      	ldrb	r3, [r7, #7]
   8515c:	f003 030f 	and.w	r3, r3, #15
   85160:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   85162:	79fb      	ldrb	r3, [r7, #7]
   85164:	2b02      	cmp	r3, #2
   85166:	d901      	bls.n	8516c <udd_ep_clear_halt+0x20>
		return false;
   85168:	2300      	movs	r3, #0
   8516a:	e07e      	b.n	8526a <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   8516c:	79fb      	ldrb	r3, [r7, #7]
   8516e:	1e5a      	subs	r2, r3, #1
   85170:	4613      	mov	r3, r2
   85172:	005b      	lsls	r3, r3, #1
   85174:	4413      	add	r3, r2
   85176:	00db      	lsls	r3, r3, #3
   85178:	4a3e      	ldr	r2, [pc, #248]	; (85274 <udd_ep_clear_halt+0x128>)
   8517a:	4413      	add	r3, r2
   8517c:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   8517e:	68bb      	ldr	r3, [r7, #8]
   85180:	7d1b      	ldrb	r3, [r3, #20]
   85182:	f003 0304 	and.w	r3, r3, #4
   85186:	b2db      	uxtb	r3, r3
   85188:	2b00      	cmp	r3, #0
   8518a:	d01a      	beq.n	851c2 <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   8518c:	68ba      	ldr	r2, [r7, #8]
   8518e:	7d13      	ldrb	r3, [r2, #20]
   85190:	f36f 0382 	bfc	r3, #2, #1
   85194:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   85196:	4a38      	ldr	r2, [pc, #224]	; (85278 <udd_ep_clear_halt+0x12c>)
   85198:	79fb      	ldrb	r3, [r7, #7]
   8519a:	015b      	lsls	r3, r3, #5
   8519c:	4413      	add	r3, r2
   8519e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   851a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   851a6:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   851a8:	4b33      	ldr	r3, [pc, #204]	; (85278 <udd_ep_clear_halt+0x12c>)
   851aa:	691a      	ldr	r2, [r3, #16]
   851ac:	79fb      	ldrb	r3, [r7, #7]
   851ae:	f44f 7180 	mov.w	r1, #256	; 0x100
   851b2:	fa01 f303 	lsl.w	r3, r1, r3
   851b6:	43db      	mvns	r3, r3
   851b8:	492f      	ldr	r1, [pc, #188]	; (85278 <udd_ep_clear_halt+0x12c>)
   851ba:	4013      	ands	r3, r2
   851bc:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   851be:	2301      	movs	r3, #1
   851c0:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   851c2:	4a2d      	ldr	r2, [pc, #180]	; (85278 <udd_ep_clear_halt+0x12c>)
   851c4:	79fb      	ldrb	r3, [r7, #7]
   851c6:	015b      	lsls	r3, r3, #5
   851c8:	4413      	add	r3, r2
   851ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   851ce:	681b      	ldr	r3, [r3, #0]
   851d0:	f003 0320 	and.w	r3, r3, #32
   851d4:	2b00      	cmp	r3, #0
   851d6:	d035      	beq.n	85244 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   851d8:	4a27      	ldr	r2, [pc, #156]	; (85278 <udd_ep_clear_halt+0x12c>)
   851da:	79fb      	ldrb	r3, [r7, #7]
   851dc:	015b      	lsls	r3, r3, #5
   851de:	4413      	add	r3, r2
   851e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   851e4:	681b      	ldr	r3, [r3, #0]
   851e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   851ea:	2b00      	cmp	r3, #0
   851ec:	d010      	beq.n	85210 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   851ee:	4a22      	ldr	r2, [pc, #136]	; (85278 <udd_ep_clear_halt+0x12c>)
   851f0:	79fb      	ldrb	r3, [r7, #7]
   851f2:	015b      	lsls	r3, r3, #5
   851f4:	4413      	add	r3, r2
   851f6:	f503 738c 	add.w	r3, r3, #280	; 0x118
   851fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   851fe:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   85200:	4a1d      	ldr	r2, [pc, #116]	; (85278 <udd_ep_clear_halt+0x12c>)
   85202:	79fb      	ldrb	r3, [r7, #7]
   85204:	015b      	lsls	r3, r3, #5
   85206:	4413      	add	r3, r2
   85208:	f503 738c 	add.w	r3, r3, #280	; 0x118
   8520c:	2240      	movs	r2, #64	; 0x40
   8520e:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   85210:	4a19      	ldr	r2, [pc, #100]	; (85278 <udd_ep_clear_halt+0x12c>)
   85212:	79fb      	ldrb	r3, [r7, #7]
   85214:	015b      	lsls	r3, r3, #5
   85216:	4413      	add	r3, r2
   85218:	f503 738c 	add.w	r3, r3, #280	; 0x118
   8521c:	2220      	movs	r2, #32
   8521e:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   85220:	4a15      	ldr	r2, [pc, #84]	; (85278 <udd_ep_clear_halt+0x12c>)
   85222:	79fb      	ldrb	r3, [r7, #7]
   85224:	3308      	adds	r3, #8
   85226:	015b      	lsls	r3, r3, #5
   85228:	4413      	add	r3, r2
   8522a:	3304      	adds	r3, #4
   8522c:	681a      	ldr	r2, [r3, #0]
   8522e:	4912      	ldr	r1, [pc, #72]	; (85278 <udd_ep_clear_halt+0x12c>)
   85230:	79fb      	ldrb	r3, [r7, #7]
   85232:	f042 0202 	orr.w	r2, r2, #2
   85236:	3308      	adds	r3, #8
   85238:	015b      	lsls	r3, r3, #5
   8523a:	440b      	add	r3, r1
   8523c:	3304      	adds	r3, #4
   8523e:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   85240:	2301      	movs	r3, #1
   85242:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   85244:	7bfb      	ldrb	r3, [r7, #15]
   85246:	2b00      	cmp	r3, #0
   85248:	d00e      	beq.n	85268 <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   8524a:	68bb      	ldr	r3, [r7, #8]
   8524c:	7d1b      	ldrb	r3, [r3, #20]
   8524e:	f003 0301 	and.w	r3, r3, #1
   85252:	b2db      	uxtb	r3, r3
   85254:	2b00      	cmp	r3, #0
   85256:	d007      	beq.n	85268 <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   85258:	68ba      	ldr	r2, [r7, #8]
   8525a:	7d13      	ldrb	r3, [r2, #20]
   8525c:	f36f 0300 	bfc	r3, #0, #1
   85260:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   85262:	68bb      	ldr	r3, [r7, #8]
   85264:	681b      	ldr	r3, [r3, #0]
   85266:	4798      	blx	r3
		}
	}
	return true;
   85268:	2301      	movs	r3, #1
}
   8526a:	4618      	mov	r0, r3
   8526c:	3710      	adds	r7, #16
   8526e:	46bd      	mov	sp, r7
   85270:	bd80      	pop	{r7, pc}
   85272:	bf00      	nop
   85274:	2000134c 	.word	0x2000134c
   85278:	400a4000 	.word	0x400a4000

0008527c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8527c:	b580      	push	{r7, lr}
   8527e:	b086      	sub	sp, #24
   85280:	af00      	add	r7, sp, #0
   85282:	60ba      	str	r2, [r7, #8]
   85284:	607b      	str	r3, [r7, #4]
   85286:	4603      	mov	r3, r0
   85288:	73fb      	strb	r3, [r7, #15]
   8528a:	460b      	mov	r3, r1
   8528c:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   8528e:	7bfb      	ldrb	r3, [r7, #15]
   85290:	f003 030f 	and.w	r3, r3, #15
   85294:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   85296:	7bfb      	ldrb	r3, [r7, #15]
   85298:	2b02      	cmp	r3, #2
   8529a:	d901      	bls.n	852a0 <udd_ep_run+0x24>
		return false;
   8529c:	2300      	movs	r3, #0
   8529e:	e063      	b.n	85368 <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   852a0:	7bfb      	ldrb	r3, [r7, #15]
   852a2:	1e5a      	subs	r2, r3, #1
   852a4:	4613      	mov	r3, r2
   852a6:	005b      	lsls	r3, r3, #1
   852a8:	4413      	add	r3, r2
   852aa:	00db      	lsls	r3, r3, #3
   852ac:	4a30      	ldr	r2, [pc, #192]	; (85370 <udd_ep_run+0xf4>)
   852ae:	4413      	add	r3, r2
   852b0:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   852b2:	4a30      	ldr	r2, [pc, #192]	; (85374 <udd_ep_run+0xf8>)
   852b4:	7bfb      	ldrb	r3, [r7, #15]
   852b6:	015b      	lsls	r3, r3, #5
   852b8:	4413      	add	r3, r2
   852ba:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   852be:	681b      	ldr	r3, [r3, #0]
   852c0:	f003 0301 	and.w	r3, r3, #1
   852c4:	2b00      	cmp	r3, #0
   852c6:	d011      	beq.n	852ec <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   852c8:	4a2a      	ldr	r2, [pc, #168]	; (85374 <udd_ep_run+0xf8>)
   852ca:	7bfb      	ldrb	r3, [r7, #15]
   852cc:	015b      	lsls	r3, r3, #5
   852ce:	4413      	add	r3, r2
   852d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   852d4:	681b      	ldr	r3, [r3, #0]
   852d6:	f003 0320 	and.w	r3, r3, #32
   852da:	2b00      	cmp	r3, #0
   852dc:	d106      	bne.n	852ec <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   852de:	697b      	ldr	r3, [r7, #20]
   852e0:	7d1b      	ldrb	r3, [r3, #20]
   852e2:	f003 0304 	and.w	r3, r3, #4
   852e6:	b2db      	uxtb	r3, r3
   852e8:	2b00      	cmp	r3, #0
   852ea:	d001      	beq.n	852f0 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   852ec:	2300      	movs	r3, #0
   852ee:	e03b      	b.n	85368 <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   852f0:	4b21      	ldr	r3, [pc, #132]	; (85378 <udd_ep_run+0xfc>)
   852f2:	4798      	blx	r3
   852f4:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   852f6:	697b      	ldr	r3, [r7, #20]
   852f8:	7d1b      	ldrb	r3, [r3, #20]
   852fa:	f003 0301 	and.w	r3, r3, #1
   852fe:	b2db      	uxtb	r3, r3
   85300:	2b00      	cmp	r3, #0
   85302:	d004      	beq.n	8530e <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   85304:	6938      	ldr	r0, [r7, #16]
   85306:	4b1d      	ldr	r3, [pc, #116]	; (8537c <udd_ep_run+0x100>)
   85308:	4798      	blx	r3
		return false; // Job already on going
   8530a:	2300      	movs	r3, #0
   8530c:	e02c      	b.n	85368 <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   8530e:	697a      	ldr	r2, [r7, #20]
   85310:	7d13      	ldrb	r3, [r2, #20]
   85312:	f043 0301 	orr.w	r3, r3, #1
   85316:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   85318:	6938      	ldr	r0, [r7, #16]
   8531a:	4b18      	ldr	r3, [pc, #96]	; (8537c <udd_ep_run+0x100>)
   8531c:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   8531e:	697b      	ldr	r3, [r7, #20]
   85320:	68ba      	ldr	r2, [r7, #8]
   85322:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   85324:	697b      	ldr	r3, [r7, #20]
   85326:	687a      	ldr	r2, [r7, #4]
   85328:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   8532a:	697b      	ldr	r3, [r7, #20]
   8532c:	2200      	movs	r2, #0
   8532e:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   85330:	697b      	ldr	r3, [r7, #20]
   85332:	2200      	movs	r2, #0
   85334:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   85336:	697b      	ldr	r3, [r7, #20]
   85338:	6a3a      	ldr	r2, [r7, #32]
   8533a:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8533c:	7bbb      	ldrb	r3, [r7, #14]
   8533e:	2b00      	cmp	r3, #0
   85340:	d102      	bne.n	85348 <udd_ep_run+0xcc>
   85342:	687b      	ldr	r3, [r7, #4]
   85344:	2b00      	cmp	r3, #0
   85346:	d101      	bne.n	8534c <udd_ep_run+0xd0>
   85348:	2301      	movs	r3, #1
   8534a:	e000      	b.n	8534e <udd_ep_run+0xd2>
   8534c:	2300      	movs	r3, #0
   8534e:	f003 0301 	and.w	r3, r3, #1
   85352:	b2d9      	uxtb	r1, r3
   85354:	697a      	ldr	r2, [r7, #20]
   85356:	7d13      	ldrb	r3, [r2, #20]
   85358:	f361 0341 	bfi	r3, r1, #1, #1
   8535c:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   8535e:	7bfb      	ldrb	r3, [r7, #15]
   85360:	4618      	mov	r0, r3
   85362:	4b07      	ldr	r3, [pc, #28]	; (85380 <udd_ep_run+0x104>)
   85364:	4798      	blx	r3
	return true;
   85366:	2301      	movs	r3, #1
}
   85368:	4618      	mov	r0, r3
   8536a:	3718      	adds	r7, #24
   8536c:	46bd      	mov	sp, r7
   8536e:	bd80      	pop	{r7, pc}
   85370:	2000134c 	.word	0x2000134c
   85374:	400a4000 	.word	0x400a4000
   85378:	00084639 	.word	0x00084639
   8537c:	00084695 	.word	0x00084695
   85380:	00085e39 	.word	0x00085e39

00085384 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   85384:	b580      	push	{r7, lr}
   85386:	b084      	sub	sp, #16
   85388:	af00      	add	r7, sp, #0
   8538a:	4603      	mov	r3, r0
   8538c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8538e:	79fb      	ldrb	r3, [r7, #7]
   85390:	f003 030f 	and.w	r3, r3, #15
   85394:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   85396:	7bfb      	ldrb	r3, [r7, #15]
   85398:	011a      	lsls	r2, r3, #4
   8539a:	4b19      	ldr	r3, [pc, #100]	; (85400 <udd_ep_abort+0x7c>)
   8539c:	4413      	add	r3, r2
   8539e:	2200      	movs	r2, #0
   853a0:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   853a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   853a6:	2b00      	cmp	r3, #0
   853a8:	da21      	bge.n	853ee <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   853aa:	e014      	b.n	853d6 <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   853ac:	4a15      	ldr	r2, [pc, #84]	; (85404 <udd_ep_abort+0x80>)
   853ae:	7bfb      	ldrb	r3, [r7, #15]
   853b0:	015b      	lsls	r3, r3, #5
   853b2:	4413      	add	r3, r2
   853b4:	f503 738a 	add.w	r3, r3, #276	; 0x114
   853b8:	f44f 7200 	mov.w	r2, #512	; 0x200
   853bc:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   853be:	bf00      	nop
   853c0:	4a10      	ldr	r2, [pc, #64]	; (85404 <udd_ep_abort+0x80>)
   853c2:	7bfb      	ldrb	r3, [r7, #15]
   853c4:	015b      	lsls	r3, r3, #5
   853c6:	4413      	add	r3, r2
   853c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   853cc:	681b      	ldr	r3, [r3, #0]
   853ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
   853d2:	2b00      	cmp	r3, #0
   853d4:	d1f4      	bne.n	853c0 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   853d6:	4a0b      	ldr	r2, [pc, #44]	; (85404 <udd_ep_abort+0x80>)
   853d8:	7bfb      	ldrb	r3, [r7, #15]
   853da:	015b      	lsls	r3, r3, #5
   853dc:	4413      	add	r3, r2
   853de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   853e2:	681b      	ldr	r3, [r3, #0]
   853e4:	0c9b      	lsrs	r3, r3, #18
   853e6:	f003 0303 	and.w	r3, r3, #3
   853ea:	2b00      	cmp	r3, #0
   853ec:	d1de      	bne.n	853ac <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   853ee:	79fb      	ldrb	r3, [r7, #7]
   853f0:	4618      	mov	r0, r3
   853f2:	4b05      	ldr	r3, [pc, #20]	; (85408 <udd_ep_abort+0x84>)
   853f4:	4798      	blx	r3
}
   853f6:	bf00      	nop
   853f8:	3710      	adds	r7, #16
   853fa:	46bd      	mov	sp, r7
   853fc:	bd80      	pop	{r7, pc}
   853fe:	bf00      	nop
   85400:	400a4300 	.word	0x400a4300
   85404:	400a4000 	.word	0x400a4000
   85408:	00085d8d 	.word	0x00085d8d

0008540c <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   8540c:	b480      	push	{r7}
   8540e:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   85410:	4b0a      	ldr	r3, [pc, #40]	; (8543c <udd_test_mode_j+0x30>)
   85412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   85416:	f023 0303 	bic.w	r3, r3, #3
   8541a:	4a08      	ldr	r2, [pc, #32]	; (8543c <udd_test_mode_j+0x30>)
   8541c:	f043 0302 	orr.w	r3, r3, #2
   85420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   85424:	4b05      	ldr	r3, [pc, #20]	; (8543c <udd_test_mode_j+0x30>)
   85426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8542a:	4a04      	ldr	r2, [pc, #16]	; (8543c <udd_test_mode_j+0x30>)
   8542c:	f043 0304 	orr.w	r3, r3, #4
   85430:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85434:	bf00      	nop
   85436:	46bd      	mov	sp, r7
   85438:	bc80      	pop	{r7}
   8543a:	4770      	bx	lr
   8543c:	400a4000 	.word	0x400a4000

00085440 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   85440:	b480      	push	{r7}
   85442:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   85444:	4b0a      	ldr	r3, [pc, #40]	; (85470 <udd_test_mode_k+0x30>)
   85446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8544a:	f023 0303 	bic.w	r3, r3, #3
   8544e:	4a08      	ldr	r2, [pc, #32]	; (85470 <udd_test_mode_k+0x30>)
   85450:	f043 0302 	orr.w	r3, r3, #2
   85454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   85458:	4b05      	ldr	r3, [pc, #20]	; (85470 <udd_test_mode_k+0x30>)
   8545a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8545e:	4a04      	ldr	r2, [pc, #16]	; (85470 <udd_test_mode_k+0x30>)
   85460:	f043 0308 	orr.w	r3, r3, #8
   85464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   85468:	bf00      	nop
   8546a:	46bd      	mov	sp, r7
   8546c:	bc80      	pop	{r7}
   8546e:	4770      	bx	lr
   85470:	400a4000 	.word	0x400a4000

00085474 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   85474:	b480      	push	{r7}
   85476:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   85478:	4b06      	ldr	r3, [pc, #24]	; (85494 <udd_test_mode_se0_nak+0x20>)
   8547a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   8547e:	f023 0303 	bic.w	r3, r3, #3
   85482:	4a04      	ldr	r2, [pc, #16]	; (85494 <udd_test_mode_se0_nak+0x20>)
   85484:	f043 0302 	orr.w	r3, r3, #2
   85488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   8548c:	bf00      	nop
   8548e:	46bd      	mov	sp, r7
   85490:	bc80      	pop	{r7}
   85492:	4770      	bx	lr
   85494:	400a4000 	.word	0x400a4000

00085498 <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   85498:	b4b0      	push	{r4, r5, r7}
   8549a:	b093      	sub	sp, #76	; 0x4c
   8549c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   8549e:	4b2e      	ldr	r3, [pc, #184]	; (85558 <udd_test_mode_packet+0xc0>)
   854a0:	1d3c      	adds	r4, r7, #4
   854a2:	461d      	mov	r5, r3
   854a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   854a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   854a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   854aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   854ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   854ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   854b0:	e895 0003 	ldmia.w	r5, {r0, r1}
   854b4:	6020      	str	r0, [r4, #0]
   854b6:	3404      	adds	r4, #4
   854b8:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   854ba:	4b28      	ldr	r3, [pc, #160]	; (8555c <udd_test_mode_packet+0xc4>)
   854bc:	2201      	movs	r2, #1
   854be:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   854c2:	4b26      	ldr	r3, [pc, #152]	; (8555c <udd_test_mode_packet+0xc4>)
   854c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   854c8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   854cc:	f023 0303 	bic.w	r3, r3, #3
   854d0:	4a22      	ldr	r2, [pc, #136]	; (8555c <udd_test_mode_packet+0xc4>)
   854d2:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   854d6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   854da:	4b20      	ldr	r3, [pc, #128]	; (8555c <udd_test_mode_packet+0xc4>)
   854dc:	2201      	movs	r2, #1
   854de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   854e2:	4b1e      	ldr	r3, [pc, #120]	; (8555c <udd_test_mode_packet+0xc4>)
   854e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   854e8:	f023 0303 	bic.w	r3, r3, #3
   854ec:	4a1b      	ldr	r2, [pc, #108]	; (8555c <udd_test_mode_packet+0xc4>)
   854ee:	f043 0302 	orr.w	r3, r3, #2
   854f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   854f6:	4b19      	ldr	r3, [pc, #100]	; (8555c <udd_test_mode_packet+0xc4>)
   854f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   854fc:	4a17      	ldr	r2, [pc, #92]	; (8555c <udd_test_mode_packet+0xc4>)
   854fe:	f043 0310 	orr.w	r3, r3, #16
   85502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85506:	4b16      	ldr	r3, [pc, #88]	; (85560 <udd_test_mode_packet+0xc8>)
   85508:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   8550a:	1d3b      	adds	r3, r7, #4
   8550c:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   8550e:	2300      	movs	r3, #0
   85510:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   85514:	e00c      	b.n	85530 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   85516:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   85518:	1c53      	adds	r3, r2, #1
   8551a:	63fb      	str	r3, [r7, #60]	; 0x3c
   8551c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8551e:	1c59      	adds	r1, r3, #1
   85520:	6439      	str	r1, [r7, #64]	; 0x40
   85522:	7812      	ldrb	r2, [r2, #0]
   85524:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   85526:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   8552a:	3301      	adds	r3, #1
   8552c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   85530:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   85534:	2b34      	cmp	r3, #52	; 0x34
   85536:	d9ee      	bls.n	85516 <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   85538:	4b08      	ldr	r3, [pc, #32]	; (8555c <udd_test_mode_packet+0xc4>)
   8553a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8553e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85542:	4b06      	ldr	r3, [pc, #24]	; (8555c <udd_test_mode_packet+0xc4>)
   85544:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85548:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   8554c:	bf00      	nop
   8554e:	374c      	adds	r7, #76	; 0x4c
   85550:	46bd      	mov	sp, r7
   85552:	bcb0      	pop	{r4, r5, r7}
   85554:	4770      	bx	lr
   85556:	bf00      	nop
   85558:	0008d3e0 	.word	0x0008d3e0
   8555c:	400a4000 	.word	0x400a4000
   85560:	20180000 	.word	0x20180000

00085564 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   85564:	b580      	push	{r7, lr}
   85566:	b082      	sub	sp, #8
   85568:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   8556a:	4b1b      	ldr	r3, [pc, #108]	; (855d8 <udd_reset_ep_ctrl+0x74>)
   8556c:	681b      	ldr	r3, [r3, #0]
   8556e:	4a1a      	ldr	r2, [pc, #104]	; (855d8 <udd_reset_ep_ctrl+0x74>)
   85570:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   85574:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   85576:	4b18      	ldr	r3, [pc, #96]	; (855d8 <udd_reset_ep_ctrl+0x74>)
   85578:	681b      	ldr	r3, [r3, #0]
   8557a:	4a17      	ldr	r2, [pc, #92]	; (855d8 <udd_reset_ep_ctrl+0x74>)
   8557c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85580:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   85582:	4b15      	ldr	r3, [pc, #84]	; (855d8 <udd_reset_ep_ctrl+0x74>)
   85584:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   85588:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   8558c:	f023 0303 	bic.w	r3, r3, #3
   85590:	4a11      	ldr	r2, [pc, #68]	; (855d8 <udd_reset_ep_ctrl+0x74>)
   85592:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   85596:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   8559a:	4b0f      	ldr	r3, [pc, #60]	; (855d8 <udd_reset_ep_ctrl+0x74>)
   8559c:	2201      	movs	r2, #1
   8559e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   855a2:	4b0e      	ldr	r3, [pc, #56]	; (855dc <udd_reset_ep_ctrl+0x78>)
   855a4:	4798      	blx	r3
   855a6:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   855a8:	4b0b      	ldr	r3, [pc, #44]	; (855d8 <udd_reset_ep_ctrl+0x74>)
   855aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   855ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   855b2:	4b09      	ldr	r3, [pc, #36]	; (855d8 <udd_reset_ep_ctrl+0x74>)
   855b4:	f44f 7200 	mov.w	r2, #512	; 0x200
   855b8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   855bc:	4b06      	ldr	r3, [pc, #24]	; (855d8 <udd_reset_ep_ctrl+0x74>)
   855be:	691b      	ldr	r3, [r3, #16]
   855c0:	4a05      	ldr	r2, [pc, #20]	; (855d8 <udd_reset_ep_ctrl+0x74>)
   855c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   855c6:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   855c8:	6878      	ldr	r0, [r7, #4]
   855ca:	4b05      	ldr	r3, [pc, #20]	; (855e0 <udd_reset_ep_ctrl+0x7c>)
   855cc:	4798      	blx	r3
}
   855ce:	bf00      	nop
   855d0:	3708      	adds	r7, #8
   855d2:	46bd      	mov	sp, r7
   855d4:	bd80      	pop	{r7, pc}
   855d6:	bf00      	nop
   855d8:	400a4000 	.word	0x400a4000
   855dc:	00084639 	.word	0x00084639
   855e0:	00084695 	.word	0x00084695

000855e4 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   855e4:	b580      	push	{r7, lr}
   855e6:	b082      	sub	sp, #8
   855e8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   855ea:	4b10      	ldr	r3, [pc, #64]	; (8562c <udd_ctrl_init+0x48>)
   855ec:	4798      	blx	r3
   855ee:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   855f0:	4b0f      	ldr	r3, [pc, #60]	; (85630 <udd_ctrl_init+0x4c>)
   855f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   855f6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   855fa:	6878      	ldr	r0, [r7, #4]
   855fc:	4b0d      	ldr	r3, [pc, #52]	; (85634 <udd_ctrl_init+0x50>)
   855fe:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   85600:	4b0b      	ldr	r3, [pc, #44]	; (85630 <udd_ctrl_init+0x4c>)
   85602:	f44f 7200 	mov.w	r2, #512	; 0x200
   85606:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   8560a:	4b0b      	ldr	r3, [pc, #44]	; (85638 <udd_ctrl_init+0x54>)
   8560c:	2200      	movs	r2, #0
   8560e:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   85610:	4b09      	ldr	r3, [pc, #36]	; (85638 <udd_ctrl_init+0x54>)
   85612:	2200      	movs	r2, #0
   85614:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   85616:	4b08      	ldr	r3, [pc, #32]	; (85638 <udd_ctrl_init+0x54>)
   85618:	2200      	movs	r2, #0
   8561a:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   8561c:	4b07      	ldr	r3, [pc, #28]	; (8563c <udd_ctrl_init+0x58>)
   8561e:	2200      	movs	r2, #0
   85620:	701a      	strb	r2, [r3, #0]
}
   85622:	bf00      	nop
   85624:	3708      	adds	r7, #8
   85626:	46bd      	mov	sp, r7
   85628:	bd80      	pop	{r7, pc}
   8562a:	bf00      	nop
   8562c:	00084639 	.word	0x00084639
   85630:	400a4000 	.word	0x400a4000
   85634:	00084695 	.word	0x00084695
   85638:	20001828 	.word	0x20001828
   8563c:	20001345 	.word	0x20001345

00085640 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   85640:	b580      	push	{r7, lr}
   85642:	b084      	sub	sp, #16
   85644:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   85646:	4b40      	ldr	r3, [pc, #256]	; (85748 <udd_ctrl_setup_received+0x108>)
   85648:	781b      	ldrb	r3, [r3, #0]
   8564a:	2b00      	cmp	r3, #0
   8564c:	d003      	beq.n	85656 <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   8564e:	4b3f      	ldr	r3, [pc, #252]	; (8574c <udd_ctrl_setup_received+0x10c>)
   85650:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   85652:	4b3f      	ldr	r3, [pc, #252]	; (85750 <udd_ctrl_setup_received+0x110>)
   85654:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   85656:	4b3f      	ldr	r3, [pc, #252]	; (85754 <udd_ctrl_setup_received+0x114>)
   85658:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8565c:	0d1b      	lsrs	r3, r3, #20
   8565e:	f3c3 030a 	ubfx	r3, r3, #0, #11
   85662:	2b08      	cmp	r3, #8
   85664:	d007      	beq.n	85676 <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   85666:	4b3c      	ldr	r3, [pc, #240]	; (85758 <udd_ctrl_setup_received+0x118>)
   85668:	4798      	blx	r3
		udd_ack_setup_received(0);
   8566a:	4b3a      	ldr	r3, [pc, #232]	; (85754 <udd_ctrl_setup_received+0x114>)
   8566c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   85670:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   85674:	e064      	b.n	85740 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85676:	4b39      	ldr	r3, [pc, #228]	; (8575c <udd_ctrl_setup_received+0x11c>)
   85678:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   8567a:	2300      	movs	r3, #0
   8567c:	73fb      	strb	r3, [r7, #15]
   8567e:	e00a      	b.n	85696 <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   85680:	68bb      	ldr	r3, [r7, #8]
   85682:	1c5a      	adds	r2, r3, #1
   85684:	60ba      	str	r2, [r7, #8]
   85686:	7bfa      	ldrb	r2, [r7, #15]
   85688:	4935      	ldr	r1, [pc, #212]	; (85760 <udd_ctrl_setup_received+0x120>)
   8568a:	440a      	add	r2, r1
   8568c:	781b      	ldrb	r3, [r3, #0]
   8568e:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   85690:	7bfb      	ldrb	r3, [r7, #15]
   85692:	3301      	adds	r3, #1
   85694:	73fb      	strb	r3, [r7, #15]
   85696:	7bfb      	ldrb	r3, [r7, #15]
   85698:	2b07      	cmp	r3, #7
   8569a:	d9f1      	bls.n	85680 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   8569c:	4b30      	ldr	r3, [pc, #192]	; (85760 <udd_ctrl_setup_received+0x120>)
   8569e:	885a      	ldrh	r2, [r3, #2]
   856a0:	4b2f      	ldr	r3, [pc, #188]	; (85760 <udd_ctrl_setup_received+0x120>)
   856a2:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   856a4:	4b2e      	ldr	r3, [pc, #184]	; (85760 <udd_ctrl_setup_received+0x120>)
   856a6:	889a      	ldrh	r2, [r3, #4]
   856a8:	4b2d      	ldr	r3, [pc, #180]	; (85760 <udd_ctrl_setup_received+0x120>)
   856aa:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   856ac:	4b2c      	ldr	r3, [pc, #176]	; (85760 <udd_ctrl_setup_received+0x120>)
   856ae:	88da      	ldrh	r2, [r3, #6]
   856b0:	4b2b      	ldr	r3, [pc, #172]	; (85760 <udd_ctrl_setup_received+0x120>)
   856b2:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   856b4:	4b2b      	ldr	r3, [pc, #172]	; (85764 <udd_ctrl_setup_received+0x124>)
   856b6:	4798      	blx	r3
   856b8:	4603      	mov	r3, r0
   856ba:	f083 0301 	eor.w	r3, r3, #1
   856be:	b2db      	uxtb	r3, r3
   856c0:	2b00      	cmp	r3, #0
   856c2:	d007      	beq.n	856d4 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   856c4:	4b24      	ldr	r3, [pc, #144]	; (85758 <udd_ctrl_setup_received+0x118>)
   856c6:	4798      	blx	r3
		udd_ack_setup_received(0);
   856c8:	4b22      	ldr	r3, [pc, #136]	; (85754 <udd_ctrl_setup_received+0x114>)
   856ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   856ce:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   856d2:	e035      	b.n	85740 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   856d4:	4b1f      	ldr	r3, [pc, #124]	; (85754 <udd_ctrl_setup_received+0x114>)
   856d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   856da:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   856de:	4b20      	ldr	r3, [pc, #128]	; (85760 <udd_ctrl_setup_received+0x120>)
   856e0:	781b      	ldrb	r3, [r3, #0]
   856e2:	b25b      	sxtb	r3, r3
   856e4:	2b00      	cmp	r3, #0
   856e6:	da0b      	bge.n	85700 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   856e8:	4b1f      	ldr	r3, [pc, #124]	; (85768 <udd_ctrl_setup_received+0x128>)
   856ea:	2200      	movs	r2, #0
   856ec:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   856ee:	4b1f      	ldr	r3, [pc, #124]	; (8576c <udd_ctrl_setup_received+0x12c>)
   856f0:	2200      	movs	r2, #0
   856f2:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   856f4:	4b14      	ldr	r3, [pc, #80]	; (85748 <udd_ctrl_setup_received+0x108>)
   856f6:	2202      	movs	r2, #2
   856f8:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   856fa:	4b1d      	ldr	r3, [pc, #116]	; (85770 <udd_ctrl_setup_received+0x130>)
   856fc:	4798      	blx	r3
   856fe:	e01f      	b.n	85740 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   85700:	4b17      	ldr	r3, [pc, #92]	; (85760 <udd_ctrl_setup_received+0x120>)
   85702:	88db      	ldrh	r3, [r3, #6]
   85704:	2b00      	cmp	r3, #0
   85706:	d102      	bne.n	8570e <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   85708:	4b1a      	ldr	r3, [pc, #104]	; (85774 <udd_ctrl_setup_received+0x134>)
   8570a:	4798      	blx	r3
			return;
   8570c:	e018      	b.n	85740 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   8570e:	4b16      	ldr	r3, [pc, #88]	; (85768 <udd_ctrl_setup_received+0x128>)
   85710:	2200      	movs	r2, #0
   85712:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85714:	4b15      	ldr	r3, [pc, #84]	; (8576c <udd_ctrl_setup_received+0x12c>)
   85716:	2200      	movs	r2, #0
   85718:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   8571a:	4b0b      	ldr	r3, [pc, #44]	; (85748 <udd_ctrl_setup_received+0x108>)
   8571c:	2201      	movs	r2, #1
   8571e:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   85720:	4b0c      	ldr	r3, [pc, #48]	; (85754 <udd_ctrl_setup_received+0x114>)
   85722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85726:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   8572a:	4b13      	ldr	r3, [pc, #76]	; (85778 <udd_ctrl_setup_received+0x138>)
   8572c:	4798      	blx	r3
   8572e:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   85730:	4b08      	ldr	r3, [pc, #32]	; (85754 <udd_ctrl_setup_received+0x114>)
   85732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85736:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   8573a:	6878      	ldr	r0, [r7, #4]
   8573c:	4b0f      	ldr	r3, [pc, #60]	; (8577c <udd_ctrl_setup_received+0x13c>)
   8573e:	4798      	blx	r3
	}
}
   85740:	3710      	adds	r7, #16
   85742:	46bd      	mov	sp, r7
   85744:	bd80      	pop	{r7, pc}
   85746:	bf00      	nop
   85748:	20001345 	.word	0x20001345
   8574c:	00085be9 	.word	0x00085be9
   85750:	000855e5 	.word	0x000855e5
   85754:	400a4000 	.word	0x400a4000
   85758:	00085b1d 	.word	0x00085b1d
   8575c:	20180000 	.word	0x20180000
   85760:	20001828 	.word	0x20001828
   85764:	000843e5 	.word	0x000843e5
   85768:	20001346 	.word	0x20001346
   8576c:	20001348 	.word	0x20001348
   85770:	00085781 	.word	0x00085781
   85774:	00085b41 	.word	0x00085b41
   85778:	00084639 	.word	0x00084639
   8577c:	00084695 	.word	0x00084695

00085780 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   85780:	b580      	push	{r7, lr}
   85782:	b084      	sub	sp, #16
   85784:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   85786:	4b4c      	ldr	r3, [pc, #304]	; (858b8 <udd_ctrl_in_sent+0x138>)
   85788:	4798      	blx	r3
   8578a:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   8578c:	4b4b      	ldr	r3, [pc, #300]	; (858bc <udd_ctrl_in_sent+0x13c>)
   8578e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85792:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   85796:	6838      	ldr	r0, [r7, #0]
   85798:	4b49      	ldr	r3, [pc, #292]	; (858c0 <udd_ctrl_in_sent+0x140>)
   8579a:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8579c:	4b49      	ldr	r3, [pc, #292]	; (858c4 <udd_ctrl_in_sent+0x144>)
   8579e:	781b      	ldrb	r3, [r3, #0]
   857a0:	2b03      	cmp	r3, #3
   857a2:	d104      	bne.n	857ae <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   857a4:	4b48      	ldr	r3, [pc, #288]	; (858c8 <udd_ctrl_in_sent+0x148>)
   857a6:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   857a8:	4b48      	ldr	r3, [pc, #288]	; (858cc <udd_ctrl_in_sent+0x14c>)
   857aa:	4798      	blx	r3
		return;
   857ac:	e081      	b.n	858b2 <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   857ae:	4b48      	ldr	r3, [pc, #288]	; (858d0 <udd_ctrl_in_sent+0x150>)
   857b0:	899a      	ldrh	r2, [r3, #12]
   857b2:	4b48      	ldr	r3, [pc, #288]	; (858d4 <udd_ctrl_in_sent+0x154>)
   857b4:	881b      	ldrh	r3, [r3, #0]
   857b6:	1ad3      	subs	r3, r2, r3
   857b8:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   857ba:	89fb      	ldrh	r3, [r7, #14]
   857bc:	2b00      	cmp	r3, #0
   857be:	d127      	bne.n	85810 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   857c0:	4b45      	ldr	r3, [pc, #276]	; (858d8 <udd_ctrl_in_sent+0x158>)
   857c2:	881a      	ldrh	r2, [r3, #0]
   857c4:	4b43      	ldr	r3, [pc, #268]	; (858d4 <udd_ctrl_in_sent+0x154>)
   857c6:	881b      	ldrh	r3, [r3, #0]
   857c8:	4413      	add	r3, r2
   857ca:	b29a      	uxth	r2, r3
   857cc:	4b42      	ldr	r3, [pc, #264]	; (858d8 <udd_ctrl_in_sent+0x158>)
   857ce:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   857d0:	4b3f      	ldr	r3, [pc, #252]	; (858d0 <udd_ctrl_in_sent+0x150>)
   857d2:	88da      	ldrh	r2, [r3, #6]
   857d4:	4b40      	ldr	r3, [pc, #256]	; (858d8 <udd_ctrl_in_sent+0x158>)
   857d6:	881b      	ldrh	r3, [r3, #0]
   857d8:	429a      	cmp	r2, r3
   857da:	d003      	beq.n	857e4 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   857dc:	4b3f      	ldr	r3, [pc, #252]	; (858dc <udd_ctrl_in_sent+0x15c>)
   857de:	781b      	ldrb	r3, [r3, #0]
   857e0:	2b00      	cmp	r3, #0
   857e2:	d002      	beq.n	857ea <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   857e4:	4b3e      	ldr	r3, [pc, #248]	; (858e0 <udd_ctrl_in_sent+0x160>)
   857e6:	4798      	blx	r3
			return;
   857e8:	e063      	b.n	858b2 <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   857ea:	4b39      	ldr	r3, [pc, #228]	; (858d0 <udd_ctrl_in_sent+0x150>)
   857ec:	695b      	ldr	r3, [r3, #20]
   857ee:	2b00      	cmp	r3, #0
   857f0:	d00e      	beq.n	85810 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   857f2:	4b37      	ldr	r3, [pc, #220]	; (858d0 <udd_ctrl_in_sent+0x150>)
   857f4:	695b      	ldr	r3, [r3, #20]
   857f6:	4798      	blx	r3
   857f8:	4603      	mov	r3, r0
   857fa:	f083 0301 	eor.w	r3, r3, #1
   857fe:	b2db      	uxtb	r3, r3
   85800:	2b00      	cmp	r3, #0
   85802:	d105      	bne.n	85810 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   85804:	4b33      	ldr	r3, [pc, #204]	; (858d4 <udd_ctrl_in_sent+0x154>)
   85806:	2200      	movs	r2, #0
   85808:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   8580a:	4b31      	ldr	r3, [pc, #196]	; (858d0 <udd_ctrl_in_sent+0x150>)
   8580c:	899b      	ldrh	r3, [r3, #12]
   8580e:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   85810:	89fb      	ldrh	r3, [r7, #14]
   85812:	2b3f      	cmp	r3, #63	; 0x3f
   85814:	d905      	bls.n	85822 <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   85816:	2340      	movs	r3, #64	; 0x40
   85818:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   8581a:	4b30      	ldr	r3, [pc, #192]	; (858dc <udd_ctrl_in_sent+0x15c>)
   8581c:	2200      	movs	r2, #0
   8581e:	701a      	strb	r2, [r3, #0]
   85820:	e002      	b.n	85828 <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   85822:	4b2e      	ldr	r3, [pc, #184]	; (858dc <udd_ctrl_in_sent+0x15c>)
   85824:	2201      	movs	r2, #1
   85826:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85828:	4b2e      	ldr	r3, [pc, #184]	; (858e4 <udd_ctrl_in_sent+0x164>)
   8582a:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8582c:	4b28      	ldr	r3, [pc, #160]	; (858d0 <udd_ctrl_in_sent+0x150>)
   8582e:	689b      	ldr	r3, [r3, #8]
   85830:	4a28      	ldr	r2, [pc, #160]	; (858d4 <udd_ctrl_in_sent+0x154>)
   85832:	8812      	ldrh	r2, [r2, #0]
   85834:	4413      	add	r3, r2
   85836:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   85838:	4b1f      	ldr	r3, [pc, #124]	; (858b8 <udd_ctrl_in_sent+0x138>)
   8583a:	4798      	blx	r3
   8583c:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   8583e:	4b1f      	ldr	r3, [pc, #124]	; (858bc <udd_ctrl_in_sent+0x13c>)
   85840:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85844:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85848:	2b00      	cmp	r3, #0
   8584a:	d006      	beq.n	8585a <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   8584c:	6838      	ldr	r0, [r7, #0]
   8584e:	4b1c      	ldr	r3, [pc, #112]	; (858c0 <udd_ctrl_in_sent+0x140>)
   85850:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85852:	4b1c      	ldr	r3, [pc, #112]	; (858c4 <udd_ctrl_in_sent+0x144>)
   85854:	2204      	movs	r2, #4
   85856:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   85858:	e02b      	b.n	858b2 <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8585a:	2300      	movs	r3, #0
   8585c:	737b      	strb	r3, [r7, #13]
   8585e:	e00a      	b.n	85876 <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   85860:	687a      	ldr	r2, [r7, #4]
   85862:	1c53      	adds	r3, r2, #1
   85864:	607b      	str	r3, [r7, #4]
   85866:	68bb      	ldr	r3, [r7, #8]
   85868:	1c59      	adds	r1, r3, #1
   8586a:	60b9      	str	r1, [r7, #8]
   8586c:	7812      	ldrb	r2, [r2, #0]
   8586e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   85870:	7b7b      	ldrb	r3, [r7, #13]
   85872:	3301      	adds	r3, #1
   85874:	737b      	strb	r3, [r7, #13]
   85876:	7b7b      	ldrb	r3, [r7, #13]
   85878:	b29b      	uxth	r3, r3
   8587a:	89fa      	ldrh	r2, [r7, #14]
   8587c:	429a      	cmp	r2, r3
   8587e:	d8ef      	bhi.n	85860 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   85880:	4b14      	ldr	r3, [pc, #80]	; (858d4 <udd_ctrl_in_sent+0x154>)
   85882:	881a      	ldrh	r2, [r3, #0]
   85884:	89fb      	ldrh	r3, [r7, #14]
   85886:	4413      	add	r3, r2
   85888:	b29a      	uxth	r2, r3
   8588a:	4b12      	ldr	r3, [pc, #72]	; (858d4 <udd_ctrl_in_sent+0x154>)
   8588c:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   8588e:	4b0b      	ldr	r3, [pc, #44]	; (858bc <udd_ctrl_in_sent+0x13c>)
   85890:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85894:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85898:	4b08      	ldr	r3, [pc, #32]	; (858bc <udd_ctrl_in_sent+0x13c>)
   8589a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8589e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   858a2:	4b06      	ldr	r3, [pc, #24]	; (858bc <udd_ctrl_in_sent+0x13c>)
   858a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   858a8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   858ac:	6838      	ldr	r0, [r7, #0]
   858ae:	4b04      	ldr	r3, [pc, #16]	; (858c0 <udd_ctrl_in_sent+0x140>)
   858b0:	4798      	blx	r3
}
   858b2:	3710      	adds	r7, #16
   858b4:	46bd      	mov	sp, r7
   858b6:	bd80      	pop	{r7, pc}
   858b8:	00084639 	.word	0x00084639
   858bc:	400a4000 	.word	0x400a4000
   858c0:	00084695 	.word	0x00084695
   858c4:	20001345 	.word	0x20001345
   858c8:	00085be9 	.word	0x00085be9
   858cc:	000855e5 	.word	0x000855e5
   858d0:	20001828 	.word	0x20001828
   858d4:	20001348 	.word	0x20001348
   858d8:	20001346 	.word	0x20001346
   858dc:	2000137c 	.word	0x2000137c
   858e0:	00085ba5 	.word	0x00085ba5
   858e4:	20180000 	.word	0x20180000

000858e8 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   858e8:	b580      	push	{r7, lr}
   858ea:	b084      	sub	sp, #16
   858ec:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   858ee:	4b61      	ldr	r3, [pc, #388]	; (85a74 <udd_ctrl_out_received+0x18c>)
   858f0:	781b      	ldrb	r3, [r3, #0]
   858f2:	2b01      	cmp	r3, #1
   858f4:	d00f      	beq.n	85916 <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   858f6:	4b5f      	ldr	r3, [pc, #380]	; (85a74 <udd_ctrl_out_received+0x18c>)
   858f8:	781b      	ldrb	r3, [r3, #0]
   858fa:	2b02      	cmp	r3, #2
   858fc:	d003      	beq.n	85906 <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   858fe:	4b5d      	ldr	r3, [pc, #372]	; (85a74 <udd_ctrl_out_received+0x18c>)
   85900:	781b      	ldrb	r3, [r3, #0]
   85902:	2b04      	cmp	r3, #4
   85904:	d102      	bne.n	8590c <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   85906:	4b5c      	ldr	r3, [pc, #368]	; (85a78 <udd_ctrl_out_received+0x190>)
   85908:	4798      	blx	r3
   8590a:	e001      	b.n	85910 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   8590c:	4b5b      	ldr	r3, [pc, #364]	; (85a7c <udd_ctrl_out_received+0x194>)
   8590e:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   85910:	4b5b      	ldr	r3, [pc, #364]	; (85a80 <udd_ctrl_out_received+0x198>)
   85912:	4798      	blx	r3
		return;
   85914:	e0ab      	b.n	85a6e <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   85916:	4b5b      	ldr	r3, [pc, #364]	; (85a84 <udd_ctrl_out_received+0x19c>)
   85918:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   8591c:	0d1b      	lsrs	r3, r3, #20
   8591e:	b29b      	uxth	r3, r3
   85920:	f3c3 030a 	ubfx	r3, r3, #0, #11
   85924:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85926:	4b58      	ldr	r3, [pc, #352]	; (85a88 <udd_ctrl_out_received+0x1a0>)
   85928:	899b      	ldrh	r3, [r3, #12]
   8592a:	461a      	mov	r2, r3
   8592c:	4b57      	ldr	r3, [pc, #348]	; (85a8c <udd_ctrl_out_received+0x1a4>)
   8592e:	881b      	ldrh	r3, [r3, #0]
   85930:	4619      	mov	r1, r3
   85932:	89bb      	ldrh	r3, [r7, #12]
   85934:	440b      	add	r3, r1
   85936:	429a      	cmp	r2, r3
   85938:	da05      	bge.n	85946 <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8593a:	4b53      	ldr	r3, [pc, #332]	; (85a88 <udd_ctrl_out_received+0x1a0>)
   8593c:	899a      	ldrh	r2, [r3, #12]
   8593e:	4b53      	ldr	r3, [pc, #332]	; (85a8c <udd_ctrl_out_received+0x1a4>)
   85940:	881b      	ldrh	r3, [r3, #0]
   85942:	1ad3      	subs	r3, r2, r3
   85944:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85946:	4b52      	ldr	r3, [pc, #328]	; (85a90 <udd_ctrl_out_received+0x1a8>)
   85948:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   8594a:	4b4f      	ldr	r3, [pc, #316]	; (85a88 <udd_ctrl_out_received+0x1a0>)
   8594c:	689b      	ldr	r3, [r3, #8]
   8594e:	4a4f      	ldr	r2, [pc, #316]	; (85a8c <udd_ctrl_out_received+0x1a4>)
   85950:	8812      	ldrh	r2, [r2, #0]
   85952:	4413      	add	r3, r2
   85954:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   85956:	2300      	movs	r3, #0
   85958:	73fb      	strb	r3, [r7, #15]
   8595a:	e00a      	b.n	85972 <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   8595c:	68ba      	ldr	r2, [r7, #8]
   8595e:	1c53      	adds	r3, r2, #1
   85960:	60bb      	str	r3, [r7, #8]
   85962:	687b      	ldr	r3, [r7, #4]
   85964:	1c59      	adds	r1, r3, #1
   85966:	6079      	str	r1, [r7, #4]
   85968:	7812      	ldrb	r2, [r2, #0]
   8596a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   8596c:	7bfb      	ldrb	r3, [r7, #15]
   8596e:	3301      	adds	r3, #1
   85970:	73fb      	strb	r3, [r7, #15]
   85972:	7bfb      	ldrb	r3, [r7, #15]
   85974:	b29b      	uxth	r3, r3
   85976:	89ba      	ldrh	r2, [r7, #12]
   85978:	429a      	cmp	r2, r3
   8597a:	d8ef      	bhi.n	8595c <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   8597c:	4b43      	ldr	r3, [pc, #268]	; (85a8c <udd_ctrl_out_received+0x1a4>)
   8597e:	881a      	ldrh	r2, [r3, #0]
   85980:	89bb      	ldrh	r3, [r7, #12]
   85982:	4413      	add	r3, r2
   85984:	b29a      	uxth	r2, r3
   85986:	4b41      	ldr	r3, [pc, #260]	; (85a8c <udd_ctrl_out_received+0x1a4>)
   85988:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   8598a:	89bb      	ldrh	r3, [r7, #12]
   8598c:	2b40      	cmp	r3, #64	; 0x40
   8598e:	d10a      	bne.n	859a6 <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   85990:	4b3d      	ldr	r3, [pc, #244]	; (85a88 <udd_ctrl_out_received+0x1a0>)
   85992:	88db      	ldrh	r3, [r3, #6]
   85994:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   85996:	4b3f      	ldr	r3, [pc, #252]	; (85a94 <udd_ctrl_out_received+0x1ac>)
   85998:	881b      	ldrh	r3, [r3, #0]
   8599a:	4619      	mov	r1, r3
   8599c:	4b3b      	ldr	r3, [pc, #236]	; (85a8c <udd_ctrl_out_received+0x1a4>)
   8599e:	881b      	ldrh	r3, [r3, #0]
   859a0:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   859a2:	429a      	cmp	r2, r3
   859a4:	dc20      	bgt.n	859e8 <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   859a6:	4b39      	ldr	r3, [pc, #228]	; (85a8c <udd_ctrl_out_received+0x1a4>)
   859a8:	881a      	ldrh	r2, [r3, #0]
   859aa:	4b37      	ldr	r3, [pc, #220]	; (85a88 <udd_ctrl_out_received+0x1a0>)
   859ac:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   859ae:	4b36      	ldr	r3, [pc, #216]	; (85a88 <udd_ctrl_out_received+0x1a0>)
   859b0:	695b      	ldr	r3, [r3, #20]
   859b2:	2b00      	cmp	r3, #0
   859b4:	d010      	beq.n	859d8 <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   859b6:	4b34      	ldr	r3, [pc, #208]	; (85a88 <udd_ctrl_out_received+0x1a0>)
   859b8:	695b      	ldr	r3, [r3, #20]
   859ba:	4798      	blx	r3
   859bc:	4603      	mov	r3, r0
   859be:	f083 0301 	eor.w	r3, r3, #1
   859c2:	b2db      	uxtb	r3, r3
   859c4:	2b00      	cmp	r3, #0
   859c6:	d007      	beq.n	859d8 <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   859c8:	4b2c      	ldr	r3, [pc, #176]	; (85a7c <udd_ctrl_out_received+0x194>)
   859ca:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   859cc:	4b2d      	ldr	r3, [pc, #180]	; (85a84 <udd_ctrl_out_received+0x19c>)
   859ce:	f44f 7200 	mov.w	r2, #512	; 0x200
   859d2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   859d6:	e04a      	b.n	85a6e <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   859d8:	4b2a      	ldr	r3, [pc, #168]	; (85a84 <udd_ctrl_out_received+0x19c>)
   859da:	f44f 7200 	mov.w	r2, #512	; 0x200
   859de:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   859e2:	4b2d      	ldr	r3, [pc, #180]	; (85a98 <udd_ctrl_out_received+0x1b0>)
   859e4:	4798      	blx	r3
		return;
   859e6:	e042      	b.n	85a6e <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   859e8:	4b27      	ldr	r3, [pc, #156]	; (85a88 <udd_ctrl_out_received+0x1a0>)
   859ea:	899a      	ldrh	r2, [r3, #12]
   859ec:	4b27      	ldr	r3, [pc, #156]	; (85a8c <udd_ctrl_out_received+0x1a4>)
   859ee:	881b      	ldrh	r3, [r3, #0]
   859f0:	429a      	cmp	r2, r3
   859f2:	d127      	bne.n	85a44 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   859f4:	4b24      	ldr	r3, [pc, #144]	; (85a88 <udd_ctrl_out_received+0x1a0>)
   859f6:	695b      	ldr	r3, [r3, #20]
   859f8:	2b00      	cmp	r3, #0
   859fa:	d107      	bne.n	85a0c <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   859fc:	4b1f      	ldr	r3, [pc, #124]	; (85a7c <udd_ctrl_out_received+0x194>)
   859fe:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   85a00:	4b20      	ldr	r3, [pc, #128]	; (85a84 <udd_ctrl_out_received+0x19c>)
   85a02:	f44f 7200 	mov.w	r2, #512	; 0x200
   85a06:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85a0a:	e030      	b.n	85a6e <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   85a0c:	4b1e      	ldr	r3, [pc, #120]	; (85a88 <udd_ctrl_out_received+0x1a0>)
   85a0e:	695b      	ldr	r3, [r3, #20]
   85a10:	4798      	blx	r3
   85a12:	4603      	mov	r3, r0
   85a14:	f083 0301 	eor.w	r3, r3, #1
   85a18:	b2db      	uxtb	r3, r3
   85a1a:	2b00      	cmp	r3, #0
   85a1c:	d007      	beq.n	85a2e <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   85a1e:	4b17      	ldr	r3, [pc, #92]	; (85a7c <udd_ctrl_out_received+0x194>)
   85a20:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   85a22:	4b18      	ldr	r3, [pc, #96]	; (85a84 <udd_ctrl_out_received+0x19c>)
   85a24:	f44f 7200 	mov.w	r2, #512	; 0x200
   85a28:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   85a2c:	e01f      	b.n	85a6e <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85a2e:	4b19      	ldr	r3, [pc, #100]	; (85a94 <udd_ctrl_out_received+0x1ac>)
   85a30:	881a      	ldrh	r2, [r3, #0]
   85a32:	4b16      	ldr	r3, [pc, #88]	; (85a8c <udd_ctrl_out_received+0x1a4>)
   85a34:	881b      	ldrh	r3, [r3, #0]
   85a36:	4413      	add	r3, r2
   85a38:	b29a      	uxth	r2, r3
   85a3a:	4b16      	ldr	r3, [pc, #88]	; (85a94 <udd_ctrl_out_received+0x1ac>)
   85a3c:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   85a3e:	4b13      	ldr	r3, [pc, #76]	; (85a8c <udd_ctrl_out_received+0x1a4>)
   85a40:	2200      	movs	r2, #0
   85a42:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   85a44:	4b0f      	ldr	r3, [pc, #60]	; (85a84 <udd_ctrl_out_received+0x19c>)
   85a46:	f44f 7200 	mov.w	r2, #512	; 0x200
   85a4a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   85a4e:	4b0d      	ldr	r3, [pc, #52]	; (85a84 <udd_ctrl_out_received+0x19c>)
   85a50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85a54:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   85a58:	4b10      	ldr	r3, [pc, #64]	; (85a9c <udd_ctrl_out_received+0x1b4>)
   85a5a:	4798      	blx	r3
   85a5c:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   85a5e:	4b09      	ldr	r3, [pc, #36]	; (85a84 <udd_ctrl_out_received+0x19c>)
   85a60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85a64:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85a68:	6838      	ldr	r0, [r7, #0]
   85a6a:	4b0d      	ldr	r3, [pc, #52]	; (85aa0 <udd_ctrl_out_received+0x1b8>)
   85a6c:	4798      	blx	r3
}
   85a6e:	3710      	adds	r7, #16
   85a70:	46bd      	mov	sp, r7
   85a72:	bd80      	pop	{r7, pc}
   85a74:	20001345 	.word	0x20001345
   85a78:	00085be9 	.word	0x00085be9
   85a7c:	00085b1d 	.word	0x00085b1d
   85a80:	000855e5 	.word	0x000855e5
   85a84:	400a4000 	.word	0x400a4000
   85a88:	20001828 	.word	0x20001828
   85a8c:	20001348 	.word	0x20001348
   85a90:	20180000 	.word	0x20180000
   85a94:	20001346 	.word	0x20001346
   85a98:	00085b41 	.word	0x00085b41
   85a9c:	00084639 	.word	0x00084639
   85aa0:	00084695 	.word	0x00084695

00085aa4 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   85aa4:	b580      	push	{r7, lr}
   85aa6:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   85aa8:	4b0c      	ldr	r3, [pc, #48]	; (85adc <udd_ctrl_underflow+0x38>)
   85aaa:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85ab2:	2b00      	cmp	r3, #0
   85ab4:	d10f      	bne.n	85ad6 <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   85ab6:	4b0a      	ldr	r3, [pc, #40]	; (85ae0 <udd_ctrl_underflow+0x3c>)
   85ab8:	781b      	ldrb	r3, [r3, #0]
   85aba:	2b01      	cmp	r3, #1
   85abc:	d102      	bne.n	85ac4 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   85abe:	4b09      	ldr	r3, [pc, #36]	; (85ae4 <udd_ctrl_underflow+0x40>)
   85ac0:	4798      	blx	r3
   85ac2:	e009      	b.n	85ad8 <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   85ac4:	4b06      	ldr	r3, [pc, #24]	; (85ae0 <udd_ctrl_underflow+0x3c>)
   85ac6:	781b      	ldrb	r3, [r3, #0]
   85ac8:	2b04      	cmp	r3, #4
   85aca:	d105      	bne.n	85ad8 <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   85acc:	4b03      	ldr	r3, [pc, #12]	; (85adc <udd_ctrl_underflow+0x38>)
   85ace:	2220      	movs	r2, #32
   85ad0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85ad4:	e000      	b.n	85ad8 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   85ad6:	bf00      	nop
	}
}
   85ad8:	bd80      	pop	{r7, pc}
   85ada:	bf00      	nop
   85adc:	400a4000 	.word	0x400a4000
   85ae0:	20001345 	.word	0x20001345
   85ae4:	00085b41 	.word	0x00085b41

00085ae8 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   85ae8:	b480      	push	{r7}
   85aea:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   85aec:	4b09      	ldr	r3, [pc, #36]	; (85b14 <udd_ctrl_overflow+0x2c>)
   85aee:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85af6:	2b00      	cmp	r3, #0
   85af8:	d108      	bne.n	85b0c <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85afa:	4b07      	ldr	r3, [pc, #28]	; (85b18 <udd_ctrl_overflow+0x30>)
   85afc:	781b      	ldrb	r3, [r3, #0]
   85afe:	2b03      	cmp	r3, #3
   85b00:	d105      	bne.n	85b0e <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   85b02:	4b04      	ldr	r3, [pc, #16]	; (85b14 <udd_ctrl_overflow+0x2c>)
   85b04:	2220      	movs	r2, #32
   85b06:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   85b0a:	e000      	b.n	85b0e <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   85b0c:	bf00      	nop
	}
}
   85b0e:	46bd      	mov	sp, r7
   85b10:	bc80      	pop	{r7}
   85b12:	4770      	bx	lr
   85b14:	400a4000 	.word	0x400a4000
   85b18:	20001345 	.word	0x20001345

00085b1c <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   85b1c:	b480      	push	{r7}
   85b1e:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85b20:	4b05      	ldr	r3, [pc, #20]	; (85b38 <udd_ctrl_stall_data+0x1c>)
   85b22:	2205      	movs	r2, #5
   85b24:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   85b26:	4b05      	ldr	r3, [pc, #20]	; (85b3c <udd_ctrl_stall_data+0x20>)
   85b28:	2220      	movs	r2, #32
   85b2a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   85b2e:	bf00      	nop
   85b30:	46bd      	mov	sp, r7
   85b32:	bc80      	pop	{r7}
   85b34:	4770      	bx	lr
   85b36:	bf00      	nop
   85b38:	20001345 	.word	0x20001345
   85b3c:	400a4000 	.word	0x400a4000

00085b40 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   85b40:	b580      	push	{r7, lr}
   85b42:	b082      	sub	sp, #8
   85b44:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   85b46:	4b13      	ldr	r3, [pc, #76]	; (85b94 <udd_ctrl_send_zlp_in+0x54>)
   85b48:	2203      	movs	r2, #3
   85b4a:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   85b4c:	4b12      	ldr	r3, [pc, #72]	; (85b98 <udd_ctrl_send_zlp_in+0x58>)
   85b4e:	4798      	blx	r3
   85b50:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   85b52:	4b12      	ldr	r3, [pc, #72]	; (85b9c <udd_ctrl_send_zlp_in+0x5c>)
   85b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85b58:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   85b5c:	4b0f      	ldr	r3, [pc, #60]	; (85b9c <udd_ctrl_send_zlp_in+0x5c>)
   85b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85b62:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   85b66:	4b0d      	ldr	r3, [pc, #52]	; (85b9c <udd_ctrl_send_zlp_in+0x5c>)
   85b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
   85b6c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   85b70:	4b0a      	ldr	r3, [pc, #40]	; (85b9c <udd_ctrl_send_zlp_in+0x5c>)
   85b72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85b76:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   85b7a:	4b08      	ldr	r3, [pc, #32]	; (85b9c <udd_ctrl_send_zlp_in+0x5c>)
   85b7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85b80:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85b84:	6878      	ldr	r0, [r7, #4]
   85b86:	4b06      	ldr	r3, [pc, #24]	; (85ba0 <udd_ctrl_send_zlp_in+0x60>)
   85b88:	4798      	blx	r3
}
   85b8a:	bf00      	nop
   85b8c:	3708      	adds	r7, #8
   85b8e:	46bd      	mov	sp, r7
   85b90:	bd80      	pop	{r7, pc}
   85b92:	bf00      	nop
   85b94:	20001345 	.word	0x20001345
   85b98:	00084639 	.word	0x00084639
   85b9c:	400a4000 	.word	0x400a4000
   85ba0:	00084695 	.word	0x00084695

00085ba4 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   85ba4:	b580      	push	{r7, lr}
   85ba6:	b082      	sub	sp, #8
   85ba8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   85baa:	4b0b      	ldr	r3, [pc, #44]	; (85bd8 <udd_ctrl_send_zlp_out+0x34>)
   85bac:	2204      	movs	r2, #4
   85bae:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   85bb0:	4b0a      	ldr	r3, [pc, #40]	; (85bdc <udd_ctrl_send_zlp_out+0x38>)
   85bb2:	4798      	blx	r3
   85bb4:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   85bb6:	4b0a      	ldr	r3, [pc, #40]	; (85be0 <udd_ctrl_send_zlp_out+0x3c>)
   85bb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85bbc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   85bc0:	4b07      	ldr	r3, [pc, #28]	; (85be0 <udd_ctrl_send_zlp_out+0x3c>)
   85bc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85bc6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   85bca:	6878      	ldr	r0, [r7, #4]
   85bcc:	4b05      	ldr	r3, [pc, #20]	; (85be4 <udd_ctrl_send_zlp_out+0x40>)
   85bce:	4798      	blx	r3
}
   85bd0:	bf00      	nop
   85bd2:	3708      	adds	r7, #8
   85bd4:	46bd      	mov	sp, r7
   85bd6:	bd80      	pop	{r7, pc}
   85bd8:	20001345 	.word	0x20001345
   85bdc:	00084639 	.word	0x00084639
   85be0:	400a4000 	.word	0x400a4000
   85be4:	00084695 	.word	0x00084695

00085be8 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   85be8:	b580      	push	{r7, lr}
   85bea:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   85bec:	4b04      	ldr	r3, [pc, #16]	; (85c00 <udd_ctrl_endofrequest+0x18>)
   85bee:	691b      	ldr	r3, [r3, #16]
   85bf0:	2b00      	cmp	r3, #0
   85bf2:	d002      	beq.n	85bfa <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   85bf4:	4b02      	ldr	r3, [pc, #8]	; (85c00 <udd_ctrl_endofrequest+0x18>)
   85bf6:	691b      	ldr	r3, [r3, #16]
   85bf8:	4798      	blx	r3
	}
}
   85bfa:	bf00      	nop
   85bfc:	bd80      	pop	{r7, pc}
   85bfe:	bf00      	nop
   85c00:	20001828 	.word	0x20001828

00085c04 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   85c04:	b580      	push	{r7, lr}
   85c06:	b082      	sub	sp, #8
   85c08:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   85c0a:	4b31      	ldr	r3, [pc, #196]	; (85cd0 <udd_ctrl_interrupt+0xcc>)
   85c0c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   85c10:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   85c12:	4b2f      	ldr	r3, [pc, #188]	; (85cd0 <udd_ctrl_interrupt+0xcc>)
   85c14:	695b      	ldr	r3, [r3, #20]
   85c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
   85c1a:	2b00      	cmp	r3, #0
   85c1c:	d101      	bne.n	85c22 <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   85c1e:	2300      	movs	r3, #0
   85c20:	e052      	b.n	85cc8 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   85c22:	4b2b      	ldr	r3, [pc, #172]	; (85cd0 <udd_ctrl_interrupt+0xcc>)
   85c24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85c28:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   85c2c:	4b28      	ldr	r3, [pc, #160]	; (85cd0 <udd_ctrl_interrupt+0xcc>)
   85c2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85c32:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   85c36:	687b      	ldr	r3, [r7, #4]
   85c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   85c3c:	2b00      	cmp	r3, #0
   85c3e:	d003      	beq.n	85c48 <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   85c40:	4b24      	ldr	r3, [pc, #144]	; (85cd4 <udd_ctrl_interrupt+0xd0>)
   85c42:	4798      	blx	r3
		return true;
   85c44:	2301      	movs	r3, #1
   85c46:	e03f      	b.n	85cc8 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   85c48:	687b      	ldr	r3, [r7, #4]
   85c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85c4e:	2b00      	cmp	r3, #0
   85c50:	d00a      	beq.n	85c68 <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   85c52:	4b1f      	ldr	r3, [pc, #124]	; (85cd0 <udd_ctrl_interrupt+0xcc>)
   85c54:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   85c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   85c5c:	2b00      	cmp	r3, #0
   85c5e:	d003      	beq.n	85c68 <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   85c60:	4b1d      	ldr	r3, [pc, #116]	; (85cd8 <udd_ctrl_interrupt+0xd4>)
   85c62:	4798      	blx	r3
		return true;
   85c64:	2301      	movs	r3, #1
   85c66:	e02f      	b.n	85cc8 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   85c68:	687b      	ldr	r3, [r7, #4]
   85c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
   85c6e:	2b00      	cmp	r3, #0
   85c70:	d003      	beq.n	85c7a <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   85c72:	4b1a      	ldr	r3, [pc, #104]	; (85cdc <udd_ctrl_interrupt+0xd8>)
   85c74:	4798      	blx	r3
		return true;
   85c76:	2301      	movs	r3, #1
   85c78:	e026      	b.n	85cc8 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   85c7a:	687b      	ldr	r3, [r7, #4]
   85c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   85c80:	2b00      	cmp	r3, #0
   85c82:	d004      	beq.n	85c8e <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   85c84:	4b12      	ldr	r3, [pc, #72]	; (85cd0 <udd_ctrl_interrupt+0xcc>)
   85c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   85c8a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   85c8e:	687b      	ldr	r3, [r7, #4]
   85c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   85c94:	2b00      	cmp	r3, #0
   85c96:	d008      	beq.n	85caa <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   85c98:	4b0d      	ldr	r3, [pc, #52]	; (85cd0 <udd_ctrl_interrupt+0xcc>)
   85c9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   85c9e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   85ca2:	4b0f      	ldr	r3, [pc, #60]	; (85ce0 <udd_ctrl_interrupt+0xdc>)
   85ca4:	4798      	blx	r3
		return true;
   85ca6:	2301      	movs	r3, #1
   85ca8:	e00e      	b.n	85cc8 <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   85caa:	687b      	ldr	r3, [r7, #4]
   85cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   85cb0:	2b00      	cmp	r3, #0
   85cb2:	d008      	beq.n	85cc6 <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   85cb4:	4b06      	ldr	r3, [pc, #24]	; (85cd0 <udd_ctrl_interrupt+0xcc>)
   85cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85cba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   85cbe:	4b09      	ldr	r3, [pc, #36]	; (85ce4 <udd_ctrl_interrupt+0xe0>)
   85cc0:	4798      	blx	r3
		return true;
   85cc2:	2301      	movs	r3, #1
   85cc4:	e000      	b.n	85cc8 <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   85cc6:	2300      	movs	r3, #0
}
   85cc8:	4618      	mov	r0, r3
   85cca:	3708      	adds	r7, #8
   85ccc:	46bd      	mov	sp, r7
   85cce:	bd80      	pop	{r7, pc}
   85cd0:	400a4000 	.word	0x400a4000
   85cd4:	00085641 	.word	0x00085641
   85cd8:	00085781 	.word	0x00085781
   85cdc:	000858e9 	.word	0x000858e9
   85ce0:	00085ae9 	.word	0x00085ae9
   85ce4:	00085aa5 	.word	0x00085aa5

00085ce8 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   85ce8:	b480      	push	{r7}
   85cea:	b083      	sub	sp, #12
   85cec:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85cee:	2300      	movs	r3, #0
   85cf0:	71fb      	strb	r3, [r7, #7]
   85cf2:	e01c      	b.n	85d2e <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   85cf4:	79fa      	ldrb	r2, [r7, #7]
   85cf6:	4912      	ldr	r1, [pc, #72]	; (85d40 <udd_ep_job_table_reset+0x58>)
   85cf8:	4613      	mov	r3, r2
   85cfa:	005b      	lsls	r3, r3, #1
   85cfc:	4413      	add	r3, r2
   85cfe:	00db      	lsls	r3, r3, #3
   85d00:	440b      	add	r3, r1
   85d02:	f103 0210 	add.w	r2, r3, #16
   85d06:	7913      	ldrb	r3, [r2, #4]
   85d08:	f36f 0300 	bfc	r3, #0, #1
   85d0c:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   85d0e:	79fa      	ldrb	r2, [r7, #7]
   85d10:	490b      	ldr	r1, [pc, #44]	; (85d40 <udd_ep_job_table_reset+0x58>)
   85d12:	4613      	mov	r3, r2
   85d14:	005b      	lsls	r3, r3, #1
   85d16:	4413      	add	r3, r2
   85d18:	00db      	lsls	r3, r3, #3
   85d1a:	440b      	add	r3, r1
   85d1c:	f103 0210 	add.w	r2, r3, #16
   85d20:	7913      	ldrb	r3, [r2, #4]
   85d22:	f36f 0382 	bfc	r3, #2, #1
   85d26:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85d28:	79fb      	ldrb	r3, [r7, #7]
   85d2a:	3301      	adds	r3, #1
   85d2c:	71fb      	strb	r3, [r7, #7]
   85d2e:	79fb      	ldrb	r3, [r7, #7]
   85d30:	2b01      	cmp	r3, #1
   85d32:	d9df      	bls.n	85cf4 <udd_ep_job_table_reset+0xc>
	}
}
   85d34:	bf00      	nop
   85d36:	bf00      	nop
   85d38:	370c      	adds	r7, #12
   85d3a:	46bd      	mov	sp, r7
   85d3c:	bc80      	pop	{r7}
   85d3e:	4770      	bx	lr
   85d40:	2000134c 	.word	0x2000134c

00085d44 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   85d44:	b580      	push	{r7, lr}
   85d46:	b082      	sub	sp, #8
   85d48:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85d4a:	2300      	movs	r3, #0
   85d4c:	71fb      	strb	r3, [r7, #7]
   85d4e:	e010      	b.n	85d72 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   85d50:	79fa      	ldrb	r2, [r7, #7]
   85d52:	4613      	mov	r3, r2
   85d54:	005b      	lsls	r3, r3, #1
   85d56:	4413      	add	r3, r2
   85d58:	00db      	lsls	r3, r3, #3
   85d5a:	4a0a      	ldr	r2, [pc, #40]	; (85d84 <udd_ep_job_table_kill+0x40>)
   85d5c:	1898      	adds	r0, r3, r2
   85d5e:	79fb      	ldrb	r3, [r7, #7]
   85d60:	3301      	adds	r3, #1
   85d62:	b2db      	uxtb	r3, r3
   85d64:	461a      	mov	r2, r3
   85d66:	2101      	movs	r1, #1
   85d68:	4b07      	ldr	r3, [pc, #28]	; (85d88 <udd_ep_job_table_kill+0x44>)
   85d6a:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85d6c:	79fb      	ldrb	r3, [r7, #7]
   85d6e:	3301      	adds	r3, #1
   85d70:	71fb      	strb	r3, [r7, #7]
   85d72:	79fb      	ldrb	r3, [r7, #7]
   85d74:	2b01      	cmp	r3, #1
   85d76:	d9eb      	bls.n	85d50 <udd_ep_job_table_kill+0xc>
	}
}
   85d78:	bf00      	nop
   85d7a:	bf00      	nop
   85d7c:	3708      	adds	r7, #8
   85d7e:	46bd      	mov	sp, r7
   85d80:	bd80      	pop	{r7, pc}
   85d82:	bf00      	nop
   85d84:	2000134c 	.word	0x2000134c
   85d88:	00085dc9 	.word	0x00085dc9

00085d8c <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   85d8c:	b580      	push	{r7, lr}
   85d8e:	b082      	sub	sp, #8
   85d90:	af00      	add	r7, sp, #0
   85d92:	4603      	mov	r3, r0
   85d94:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   85d96:	79fb      	ldrb	r3, [r7, #7]
   85d98:	f003 030f 	and.w	r3, r3, #15
   85d9c:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85d9e:	79fb      	ldrb	r3, [r7, #7]
   85da0:	1e5a      	subs	r2, r3, #1
   85da2:	4613      	mov	r3, r2
   85da4:	005b      	lsls	r3, r3, #1
   85da6:	4413      	add	r3, r2
   85da8:	00db      	lsls	r3, r3, #3
   85daa:	4a05      	ldr	r2, [pc, #20]	; (85dc0 <udd_ep_abort_job+0x34>)
   85dac:	4413      	add	r3, r2
   85dae:	79fa      	ldrb	r2, [r7, #7]
   85db0:	2101      	movs	r1, #1
   85db2:	4618      	mov	r0, r3
   85db4:	4b03      	ldr	r3, [pc, #12]	; (85dc4 <udd_ep_abort_job+0x38>)
   85db6:	4798      	blx	r3
}
   85db8:	bf00      	nop
   85dba:	3708      	adds	r7, #8
   85dbc:	46bd      	mov	sp, r7
   85dbe:	bd80      	pop	{r7, pc}
   85dc0:	2000134c 	.word	0x2000134c
   85dc4:	00085dc9 	.word	0x00085dc9

00085dc8 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   85dc8:	b580      	push	{r7, lr}
   85dca:	b082      	sub	sp, #8
   85dcc:	af00      	add	r7, sp, #0
   85dce:	6078      	str	r0, [r7, #4]
   85dd0:	460b      	mov	r3, r1
   85dd2:	70fb      	strb	r3, [r7, #3]
   85dd4:	4613      	mov	r3, r2
   85dd6:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   85dd8:	687b      	ldr	r3, [r7, #4]
   85dda:	7d1b      	ldrb	r3, [r3, #20]
   85ddc:	f003 0301 	and.w	r3, r3, #1
   85de0:	b2db      	uxtb	r3, r3
   85de2:	2b00      	cmp	r3, #0
   85de4:	d01f      	beq.n	85e26 <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   85de6:	687a      	ldr	r2, [r7, #4]
   85de8:	7d13      	ldrb	r3, [r2, #20]
   85dea:	f36f 0300 	bfc	r3, #0, #1
   85dee:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   85df0:	687b      	ldr	r3, [r7, #4]
   85df2:	681b      	ldr	r3, [r3, #0]
   85df4:	2b00      	cmp	r3, #0
   85df6:	d018      	beq.n	85e2a <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   85df8:	4a0e      	ldr	r2, [pc, #56]	; (85e34 <udd_ep_finish_job+0x6c>)
   85dfa:	78bb      	ldrb	r3, [r7, #2]
   85dfc:	3308      	adds	r3, #8
   85dfe:	015b      	lsls	r3, r3, #5
   85e00:	4413      	add	r3, r2
   85e02:	681b      	ldr	r3, [r3, #0]
   85e04:	f003 0308 	and.w	r3, r3, #8
   85e08:	2b00      	cmp	r3, #0
   85e0a:	d003      	beq.n	85e14 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   85e0c:	78bb      	ldrb	r3, [r7, #2]
   85e0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   85e12:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   85e14:	687b      	ldr	r3, [r7, #4]
   85e16:	681b      	ldr	r3, [r3, #0]
   85e18:	78fa      	ldrb	r2, [r7, #3]
   85e1a:	4610      	mov	r0, r2
   85e1c:	687a      	ldr	r2, [r7, #4]
   85e1e:	6891      	ldr	r1, [r2, #8]
   85e20:	78ba      	ldrb	r2, [r7, #2]
   85e22:	4798      	blx	r3
   85e24:	e002      	b.n	85e2c <udd_ep_finish_job+0x64>
		return; // No on-going job
   85e26:	bf00      	nop
   85e28:	e000      	b.n	85e2c <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   85e2a:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   85e2c:	3708      	adds	r7, #8
   85e2e:	46bd      	mov	sp, r7
   85e30:	bd80      	pop	{r7, pc}
   85e32:	bf00      	nop
   85e34:	400a4000 	.word	0x400a4000

00085e38 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   85e38:	b580      	push	{r7, lr}
   85e3a:	b086      	sub	sp, #24
   85e3c:	af00      	add	r7, sp, #0
   85e3e:	4603      	mov	r3, r0
   85e40:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   85e42:	2300      	movs	r3, #0
   85e44:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   85e46:	79fb      	ldrb	r3, [r7, #7]
   85e48:	1e5a      	subs	r2, r3, #1
   85e4a:	4613      	mov	r3, r2
   85e4c:	005b      	lsls	r3, r3, #1
   85e4e:	4413      	add	r3, r2
   85e50:	00db      	lsls	r3, r3, #3
   85e52:	4a6d      	ldr	r2, [pc, #436]	; (86008 <udd_ep_trans_done+0x1d0>)
   85e54:	4413      	add	r3, r2
   85e56:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   85e58:	68fb      	ldr	r3, [r7, #12]
   85e5a:	7d1b      	ldrb	r3, [r3, #20]
   85e5c:	f003 0301 	and.w	r3, r3, #1
   85e60:	b2db      	uxtb	r3, r3
   85e62:	2b00      	cmp	r3, #0
   85e64:	f000 80cc 	beq.w	86000 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   85e68:	68fb      	ldr	r3, [r7, #12]
   85e6a:	68da      	ldr	r2, [r3, #12]
   85e6c:	68fb      	ldr	r3, [r7, #12]
   85e6e:	689b      	ldr	r3, [r3, #8]
   85e70:	429a      	cmp	r2, r3
   85e72:	f000 8099 	beq.w	85fa8 <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   85e76:	68fb      	ldr	r3, [r7, #12]
   85e78:	689a      	ldr	r2, [r3, #8]
   85e7a:	68fb      	ldr	r3, [r7, #12]
   85e7c:	68db      	ldr	r3, [r3, #12]
   85e7e:	1ad3      	subs	r3, r2, r3
   85e80:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   85e82:	693b      	ldr	r3, [r7, #16]
   85e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   85e88:	d905      	bls.n	85e96 <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   85e8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   85e8e:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   85e90:	2300      	movs	r3, #0
   85e92:	617b      	str	r3, [r7, #20]
   85e94:	e002      	b.n	85e9c <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   85e96:	693b      	ldr	r3, [r7, #16]
   85e98:	041b      	lsls	r3, r3, #16
   85e9a:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   85e9c:	4a5b      	ldr	r2, [pc, #364]	; (8600c <udd_ep_trans_done+0x1d4>)
   85e9e:	79fb      	ldrb	r3, [r7, #7]
   85ea0:	3308      	adds	r3, #8
   85ea2:	015b      	lsls	r3, r3, #5
   85ea4:	4413      	add	r3, r2
   85ea6:	681b      	ldr	r3, [r3, #0]
   85ea8:	f003 0308 	and.w	r3, r3, #8
   85eac:	2b00      	cmp	r3, #0
   85eae:	d01d      	beq.n	85eec <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   85eb0:	4a56      	ldr	r2, [pc, #344]	; (8600c <udd_ep_trans_done+0x1d4>)
   85eb2:	79fb      	ldrb	r3, [r7, #7]
   85eb4:	3308      	adds	r3, #8
   85eb6:	015b      	lsls	r3, r3, #5
   85eb8:	4413      	add	r3, r2
   85eba:	681b      	ldr	r3, [r3, #0]
   85ebc:	f003 0307 	and.w	r3, r3, #7
   85ec0:	2208      	movs	r2, #8
   85ec2:	fa02 f303 	lsl.w	r3, r2, r3
   85ec6:	461a      	mov	r2, r3
   85ec8:	693b      	ldr	r3, [r7, #16]
   85eca:	fbb3 f1f2 	udiv	r1, r3, r2
   85ece:	fb02 f201 	mul.w	r2, r2, r1
   85ed2:	1a9b      	subs	r3, r3, r2
   85ed4:	2b00      	cmp	r3, #0
   85ed6:	d027      	beq.n	85f28 <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   85ed8:	697b      	ldr	r3, [r7, #20]
   85eda:	f043 0308 	orr.w	r3, r3, #8
   85ede:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   85ee0:	68fa      	ldr	r2, [r7, #12]
   85ee2:	7d13      	ldrb	r3, [r2, #20]
   85ee4:	f36f 0341 	bfc	r3, #1, #1
   85ee8:	7513      	strb	r3, [r2, #20]
   85eea:	e01d      	b.n	85f28 <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   85eec:	4a47      	ldr	r2, [pc, #284]	; (8600c <udd_ep_trans_done+0x1d4>)
   85eee:	79fb      	ldrb	r3, [r7, #7]
   85ef0:	3308      	adds	r3, #8
   85ef2:	015b      	lsls	r3, r3, #5
   85ef4:	4413      	add	r3, r2
   85ef6:	681b      	ldr	r3, [r3, #0]
   85ef8:	091b      	lsrs	r3, r3, #4
   85efa:	f003 0303 	and.w	r3, r3, #3
   85efe:	2b01      	cmp	r3, #1
   85f00:	d10e      	bne.n	85f20 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   85f02:	4a42      	ldr	r2, [pc, #264]	; (8600c <udd_ep_trans_done+0x1d4>)
   85f04:	79fb      	ldrb	r3, [r7, #7]
   85f06:	3308      	adds	r3, #8
   85f08:	015b      	lsls	r3, r3, #5
   85f0a:	4413      	add	r3, r2
   85f0c:	681b      	ldr	r3, [r3, #0]
   85f0e:	f003 0307 	and.w	r3, r3, #7
   85f12:	2208      	movs	r2, #8
   85f14:	fa02 f303 	lsl.w	r3, r2, r3
   85f18:	461a      	mov	r2, r3
   85f1a:	693b      	ldr	r3, [r7, #16]
   85f1c:	4293      	cmp	r3, r2
   85f1e:	d803      	bhi.n	85f28 <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   85f20:	697b      	ldr	r3, [r7, #20]
   85f22:	f043 0314 	orr.w	r3, r3, #20
   85f26:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   85f28:	68fb      	ldr	r3, [r7, #12]
   85f2a:	685a      	ldr	r2, [r3, #4]
   85f2c:	68fb      	ldr	r3, [r7, #12]
   85f2e:	68db      	ldr	r3, [r3, #12]
   85f30:	18d1      	adds	r1, r2, r3
   85f32:	79fb      	ldrb	r3, [r7, #7]
   85f34:	011a      	lsls	r2, r3, #4
   85f36:	4b36      	ldr	r3, [pc, #216]	; (86010 <udd_ep_trans_done+0x1d8>)
   85f38:	4413      	add	r3, r2
   85f3a:	460a      	mov	r2, r1
   85f3c:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   85f3e:	697b      	ldr	r3, [r7, #20]
   85f40:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   85f44:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   85f46:	4b33      	ldr	r3, [pc, #204]	; (86014 <udd_ep_trans_done+0x1dc>)
   85f48:	4798      	blx	r3
   85f4a:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   85f4c:	79fb      	ldrb	r3, [r7, #7]
   85f4e:	011a      	lsls	r2, r3, #4
   85f50:	4b2f      	ldr	r3, [pc, #188]	; (86010 <udd_ep_trans_done+0x1d8>)
   85f52:	4413      	add	r3, r2
   85f54:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   85f56:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   85f5a:	2b00      	cmp	r3, #0
   85f5c:	d11d      	bne.n	85f9a <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   85f5e:	79fb      	ldrb	r3, [r7, #7]
   85f60:	011a      	lsls	r2, r3, #4
   85f62:	4b2b      	ldr	r3, [pc, #172]	; (86010 <udd_ep_trans_done+0x1d8>)
   85f64:	4413      	add	r3, r2
   85f66:	697a      	ldr	r2, [r7, #20]
   85f68:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   85f6a:	68fb      	ldr	r3, [r7, #12]
   85f6c:	68da      	ldr	r2, [r3, #12]
   85f6e:	693b      	ldr	r3, [r7, #16]
   85f70:	441a      	add	r2, r3
   85f72:	68fb      	ldr	r3, [r7, #12]
   85f74:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   85f76:	68fb      	ldr	r3, [r7, #12]
   85f78:	693a      	ldr	r2, [r7, #16]
   85f7a:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   85f7c:	4b23      	ldr	r3, [pc, #140]	; (8600c <udd_ep_trans_done+0x1d4>)
   85f7e:	691a      	ldr	r2, [r3, #16]
   85f80:	79fb      	ldrb	r3, [r7, #7]
   85f82:	3b01      	subs	r3, #1
   85f84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   85f88:	fa01 f303 	lsl.w	r3, r1, r3
   85f8c:	491f      	ldr	r1, [pc, #124]	; (8600c <udd_ep_trans_done+0x1d4>)
   85f8e:	4313      	orrs	r3, r2
   85f90:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   85f92:	68b8      	ldr	r0, [r7, #8]
   85f94:	4b20      	ldr	r3, [pc, #128]	; (86018 <udd_ep_trans_done+0x1e0>)
   85f96:	4798      	blx	r3
			return;
   85f98:	e033      	b.n	86002 <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   85f9a:	68b8      	ldr	r0, [r7, #8]
   85f9c:	4b1e      	ldr	r3, [pc, #120]	; (86018 <udd_ep_trans_done+0x1e0>)
   85f9e:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   85fa0:	68fb      	ldr	r3, [r7, #12]
   85fa2:	68da      	ldr	r2, [r3, #12]
   85fa4:	68fb      	ldr	r3, [r7, #12]
   85fa6:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   85fa8:	4a18      	ldr	r2, [pc, #96]	; (8600c <udd_ep_trans_done+0x1d4>)
   85faa:	79fb      	ldrb	r3, [r7, #7]
   85fac:	3308      	adds	r3, #8
   85fae:	015b      	lsls	r3, r3, #5
   85fb0:	4413      	add	r3, r2
   85fb2:	681b      	ldr	r3, [r3, #0]
   85fb4:	f003 0308 	and.w	r3, r3, #8
   85fb8:	2b00      	cmp	r3, #0
   85fba:	d01a      	beq.n	85ff2 <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   85fbc:	68fb      	ldr	r3, [r7, #12]
   85fbe:	7d1b      	ldrb	r3, [r3, #20]
   85fc0:	f003 0302 	and.w	r3, r3, #2
   85fc4:	b2db      	uxtb	r3, r3
   85fc6:	2b00      	cmp	r3, #0
   85fc8:	d013      	beq.n	85ff2 <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   85fca:	4a10      	ldr	r2, [pc, #64]	; (8600c <udd_ep_trans_done+0x1d4>)
   85fcc:	79fb      	ldrb	r3, [r7, #7]
   85fce:	3308      	adds	r3, #8
   85fd0:	015b      	lsls	r3, r3, #5
   85fd2:	4413      	add	r3, r2
   85fd4:	3304      	adds	r3, #4
   85fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   85fda:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   85fdc:	4b0b      	ldr	r3, [pc, #44]	; (8600c <udd_ep_trans_done+0x1d4>)
   85fde:	691a      	ldr	r2, [r3, #16]
   85fe0:	79fb      	ldrb	r3, [r7, #7]
   85fe2:	f44f 7180 	mov.w	r1, #256	; 0x100
   85fe6:	fa01 f303 	lsl.w	r3, r1, r3
   85fea:	4908      	ldr	r1, [pc, #32]	; (8600c <udd_ep_trans_done+0x1d4>)
   85fec:	4313      	orrs	r3, r2
   85fee:	610b      	str	r3, [r1, #16]
			return;
   85ff0:	e007      	b.n	86002 <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   85ff2:	79fb      	ldrb	r3, [r7, #7]
   85ff4:	461a      	mov	r2, r3
   85ff6:	2100      	movs	r1, #0
   85ff8:	68f8      	ldr	r0, [r7, #12]
   85ffa:	4b08      	ldr	r3, [pc, #32]	; (8601c <udd_ep_trans_done+0x1e4>)
   85ffc:	4798      	blx	r3
   85ffe:	e000      	b.n	86002 <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   86000:	bf00      	nop
}
   86002:	3718      	adds	r7, #24
   86004:	46bd      	mov	sp, r7
   86006:	bd80      	pop	{r7, pc}
   86008:	2000134c 	.word	0x2000134c
   8600c:	400a4000 	.word	0x400a4000
   86010:	400a4300 	.word	0x400a4300
   86014:	00084639 	.word	0x00084639
   86018:	00084695 	.word	0x00084695
   8601c:	00085dc9 	.word	0x00085dc9

00086020 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   86020:	b580      	push	{r7, lr}
   86022:	b084      	sub	sp, #16
   86024:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   86026:	2301      	movs	r3, #1
   86028:	73fb      	strb	r3, [r7, #15]
   8602a:	e0e0      	b.n	861ee <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   8602c:	7bfb      	ldrb	r3, [r7, #15]
   8602e:	1e5a      	subs	r2, r3, #1
   86030:	4613      	mov	r3, r2
   86032:	005b      	lsls	r3, r3, #1
   86034:	4413      	add	r3, r2
   86036:	00db      	lsls	r3, r3, #3
   86038:	4a71      	ldr	r2, [pc, #452]	; (86200 <udd_ep_interrupt+0x1e0>)
   8603a:	4413      	add	r3, r2
   8603c:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8603e:	4b71      	ldr	r3, [pc, #452]	; (86204 <udd_ep_interrupt+0x1e4>)
   86040:	691a      	ldr	r2, [r3, #16]
   86042:	7bfb      	ldrb	r3, [r7, #15]
   86044:	3b01      	subs	r3, #1
   86046:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8604a:	fa01 f303 	lsl.w	r3, r1, r3
   8604e:	4013      	ands	r3, r2
   86050:	2b00      	cmp	r3, #0
   86052:	d03c      	beq.n	860ce <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   86054:	4b6b      	ldr	r3, [pc, #428]	; (86204 <udd_ep_interrupt+0x1e4>)
   86056:	695a      	ldr	r2, [r3, #20]
   86058:	7bfb      	ldrb	r3, [r7, #15]
   8605a:	3b01      	subs	r3, #1
   8605c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   86060:	fa01 f303 	lsl.w	r3, r1, r3
   86064:	4013      	ands	r3, r2
   86066:	2b00      	cmp	r3, #0
   86068:	d031      	beq.n	860ce <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   8606a:	7bfb      	ldrb	r3, [r7, #15]
   8606c:	011a      	lsls	r2, r3, #4
   8606e:	4b66      	ldr	r3, [pc, #408]	; (86208 <udd_ep_interrupt+0x1e8>)
   86070:	4413      	add	r3, r2
   86072:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   86074:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   86078:	2b00      	cmp	r3, #0
   8607a:	d001      	beq.n	86080 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   8607c:	2301      	movs	r3, #1
   8607e:	e0bb      	b.n	861f8 <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   86080:	4b60      	ldr	r3, [pc, #384]	; (86204 <udd_ep_interrupt+0x1e4>)
   86082:	691a      	ldr	r2, [r3, #16]
   86084:	7bfb      	ldrb	r3, [r7, #15]
   86086:	3b01      	subs	r3, #1
   86088:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8608c:	fa01 f303 	lsl.w	r3, r1, r3
   86090:	43db      	mvns	r3, r3
   86092:	495c      	ldr	r1, [pc, #368]	; (86204 <udd_ep_interrupt+0x1e4>)
   86094:	4013      	ands	r3, r2
   86096:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   86098:	7bfb      	ldrb	r3, [r7, #15]
   8609a:	011a      	lsls	r2, r3, #4
   8609c:	4b5a      	ldr	r3, [pc, #360]	; (86208 <udd_ep_interrupt+0x1e8>)
   8609e:	4413      	add	r3, r2
   860a0:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   860a2:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   860a4:	b29b      	uxth	r3, r3
   860a6:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   860a8:	687b      	ldr	r3, [r7, #4]
   860aa:	2b00      	cmp	r3, #0
   860ac:	d009      	beq.n	860c2 <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   860ae:	68bb      	ldr	r3, [r7, #8]
   860b0:	68da      	ldr	r2, [r3, #12]
   860b2:	687b      	ldr	r3, [r7, #4]
   860b4:	1ad2      	subs	r2, r2, r3
   860b6:	68bb      	ldr	r3, [r7, #8]
   860b8:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   860ba:	68bb      	ldr	r3, [r7, #8]
   860bc:	68da      	ldr	r2, [r3, #12]
   860be:	68bb      	ldr	r3, [r7, #8]
   860c0:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   860c2:	7bfb      	ldrb	r3, [r7, #15]
   860c4:	4618      	mov	r0, r3
   860c6:	4b51      	ldr	r3, [pc, #324]	; (8620c <udd_ep_interrupt+0x1ec>)
   860c8:	4798      	blx	r3
			return true;
   860ca:	2301      	movs	r3, #1
   860cc:	e094      	b.n	861f8 <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   860ce:	4b4d      	ldr	r3, [pc, #308]	; (86204 <udd_ep_interrupt+0x1e4>)
   860d0:	691a      	ldr	r2, [r3, #16]
   860d2:	7bfb      	ldrb	r3, [r7, #15]
   860d4:	f44f 7180 	mov.w	r1, #256	; 0x100
   860d8:	fa01 f303 	lsl.w	r3, r1, r3
   860dc:	4013      	ands	r3, r2
   860de:	2b00      	cmp	r3, #0
   860e0:	f000 8082 	beq.w	861e8 <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   860e4:	4a47      	ldr	r2, [pc, #284]	; (86204 <udd_ep_interrupt+0x1e4>)
   860e6:	7bfb      	ldrb	r3, [r7, #15]
   860e8:	015b      	lsls	r3, r3, #5
   860ea:	4413      	add	r3, r2
   860ec:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   860f0:	681b      	ldr	r3, [r3, #0]
   860f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   860f6:	2b00      	cmp	r3, #0
   860f8:	d024      	beq.n	86144 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   860fa:	4a42      	ldr	r2, [pc, #264]	; (86204 <udd_ep_interrupt+0x1e4>)
   860fc:	7bfb      	ldrb	r3, [r7, #15]
   860fe:	015b      	lsls	r3, r3, #5
   86100:	4413      	add	r3, r2
   86102:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   86106:	681b      	ldr	r3, [r3, #0]
   86108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   8610c:	2b00      	cmp	r3, #0
   8610e:	d119      	bne.n	86144 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   86110:	4a3c      	ldr	r2, [pc, #240]	; (86204 <udd_ep_interrupt+0x1e4>)
   86112:	7bfb      	ldrb	r3, [r7, #15]
   86114:	015b      	lsls	r3, r3, #5
   86116:	4413      	add	r3, r2
   86118:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8611c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   86120:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   86122:	4a38      	ldr	r2, [pc, #224]	; (86204 <udd_ep_interrupt+0x1e4>)
   86124:	7bfb      	ldrb	r3, [r7, #15]
   86126:	015b      	lsls	r3, r3, #5
   86128:	4413      	add	r3, r2
   8612a:	f503 738a 	add.w	r3, r3, #276	; 0x114
   8612e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   86132:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   86134:	7bfb      	ldrb	r3, [r7, #15]
   86136:	461a      	mov	r2, r3
   86138:	2100      	movs	r1, #0
   8613a:	68b8      	ldr	r0, [r7, #8]
   8613c:	4b34      	ldr	r3, [pc, #208]	; (86210 <udd_ep_interrupt+0x1f0>)
   8613e:	4798      	blx	r3
				return true;
   86140:	2301      	movs	r3, #1
   86142:	e059      	b.n	861f8 <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   86144:	4a2f      	ldr	r2, [pc, #188]	; (86204 <udd_ep_interrupt+0x1e4>)
   86146:	7bfb      	ldrb	r3, [r7, #15]
   86148:	015b      	lsls	r3, r3, #5
   8614a:	4413      	add	r3, r2
   8614c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   86150:	681b      	ldr	r3, [r3, #0]
   86152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   86156:	2b00      	cmp	r3, #0
   86158:	d046      	beq.n	861e8 <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   8615a:	4a2a      	ldr	r2, [pc, #168]	; (86204 <udd_ep_interrupt+0x1e4>)
   8615c:	7bfb      	ldrb	r3, [r7, #15]
   8615e:	015b      	lsls	r3, r3, #5
   86160:	4413      	add	r3, r2
   86162:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   86166:	681b      	ldr	r3, [r3, #0]
   86168:	0c9b      	lsrs	r3, r3, #18
   8616a:	f003 0303 	and.w	r3, r3, #3
   8616e:	2b00      	cmp	r3, #0
   86170:	d13a      	bne.n	861e8 <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   86172:	4a24      	ldr	r2, [pc, #144]	; (86204 <udd_ep_interrupt+0x1e4>)
   86174:	7bfb      	ldrb	r3, [r7, #15]
   86176:	015b      	lsls	r3, r3, #5
   86178:	4413      	add	r3, r2
   8617a:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8617e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   86182:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   86184:	4b1f      	ldr	r3, [pc, #124]	; (86204 <udd_ep_interrupt+0x1e4>)
   86186:	691a      	ldr	r2, [r3, #16]
   86188:	7bfb      	ldrb	r3, [r7, #15]
   8618a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8618e:	fa01 f303 	lsl.w	r3, r1, r3
   86192:	43db      	mvns	r3, r3
   86194:	491b      	ldr	r1, [pc, #108]	; (86204 <udd_ep_interrupt+0x1e4>)
   86196:	4013      	ands	r3, r2
   86198:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   8619a:	68ba      	ldr	r2, [r7, #8]
   8619c:	7d13      	ldrb	r3, [r2, #20]
   8619e:	f36f 0382 	bfc	r3, #2, #1
   861a2:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   861a4:	4a17      	ldr	r2, [pc, #92]	; (86204 <udd_ep_interrupt+0x1e4>)
   861a6:	7bfb      	ldrb	r3, [r7, #15]
   861a8:	015b      	lsls	r3, r3, #5
   861aa:	4413      	add	r3, r2
   861ac:	f503 7384 	add.w	r3, r3, #264	; 0x108
   861b0:	681a      	ldr	r2, [r3, #0]
   861b2:	4914      	ldr	r1, [pc, #80]	; (86204 <udd_ep_interrupt+0x1e4>)
   861b4:	7bfb      	ldrb	r3, [r7, #15]
   861b6:	f022 0202 	bic.w	r2, r2, #2
   861ba:	015b      	lsls	r3, r3, #5
   861bc:	440b      	add	r3, r1
   861be:	f503 7384 	add.w	r3, r3, #264	; 0x108
   861c2:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   861c4:	4a0f      	ldr	r2, [pc, #60]	; (86204 <udd_ep_interrupt+0x1e4>)
   861c6:	7bfb      	ldrb	r3, [r7, #15]
   861c8:	015b      	lsls	r3, r3, #5
   861ca:	4413      	add	r3, r2
   861cc:	f503 738a 	add.w	r3, r3, #276	; 0x114
   861d0:	2220      	movs	r2, #32
   861d2:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   861d4:	4a0b      	ldr	r2, [pc, #44]	; (86204 <udd_ep_interrupt+0x1e4>)
   861d6:	7bfb      	ldrb	r3, [r7, #15]
   861d8:	015b      	lsls	r3, r3, #5
   861da:	4413      	add	r3, r2
   861dc:	f503 738c 	add.w	r3, r3, #280	; 0x118
   861e0:	2240      	movs	r2, #64	; 0x40
   861e2:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   861e4:	2301      	movs	r3, #1
   861e6:	e007      	b.n	861f8 <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   861e8:	7bfb      	ldrb	r3, [r7, #15]
   861ea:	3301      	adds	r3, #1
   861ec:	73fb      	strb	r3, [r7, #15]
   861ee:	7bfb      	ldrb	r3, [r7, #15]
   861f0:	2b02      	cmp	r3, #2
   861f2:	f67f af1b 	bls.w	8602c <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   861f6:	2300      	movs	r3, #0
}
   861f8:	4618      	mov	r0, r3
   861fa:	3710      	adds	r7, #16
   861fc:	46bd      	mov	sp, r7
   861fe:	bd80      	pop	{r7, pc}
   86200:	2000134c 	.word	0x2000134c
   86204:	400a4000 	.word	0x400a4000
   86208:	400a4300 	.word	0x400a4300
   8620c:	00085e39 	.word	0x00085e39
   86210:	00085dc9 	.word	0x00085dc9

00086214 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   86214:	b480      	push	{r7}
   86216:	b089      	sub	sp, #36	; 0x24
   86218:	af00      	add	r7, sp, #0
   8621a:	60f8      	str	r0, [r7, #12]
   8621c:	60b9      	str	r1, [r7, #8]
   8621e:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   86220:	68bb      	ldr	r3, [r7, #8]
   86222:	011b      	lsls	r3, r3, #4
   86224:	687a      	ldr	r2, [r7, #4]
   86226:	429a      	cmp	r2, r3
   86228:	d302      	bcc.n	86230 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   8622a:	2310      	movs	r3, #16
   8622c:	61fb      	str	r3, [r7, #28]
   8622e:	e001      	b.n	86234 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   86230:	2308      	movs	r3, #8
   86232:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   86234:	687b      	ldr	r3, [r7, #4]
   86236:	00da      	lsls	r2, r3, #3
   86238:	69fb      	ldr	r3, [r7, #28]
   8623a:	68b9      	ldr	r1, [r7, #8]
   8623c:	fb01 f303 	mul.w	r3, r1, r3
   86240:	085b      	lsrs	r3, r3, #1
   86242:	441a      	add	r2, r3
   86244:	69fb      	ldr	r3, [r7, #28]
   86246:	68b9      	ldr	r1, [r7, #8]
   86248:	fb01 f303 	mul.w	r3, r1, r3
   8624c:	fbb2 f3f3 	udiv	r3, r2, r3
   86250:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   86252:	69bb      	ldr	r3, [r7, #24]
   86254:	08db      	lsrs	r3, r3, #3
   86256:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   86258:	69bb      	ldr	r3, [r7, #24]
   8625a:	f003 0307 	and.w	r3, r3, #7
   8625e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   86260:	697b      	ldr	r3, [r7, #20]
   86262:	2b00      	cmp	r3, #0
   86264:	d003      	beq.n	8626e <usart_set_async_baudrate+0x5a>
   86266:	697b      	ldr	r3, [r7, #20]
   86268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8626c:	d301      	bcc.n	86272 <usart_set_async_baudrate+0x5e>
		return 1;
   8626e:	2301      	movs	r3, #1
   86270:	e00f      	b.n	86292 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   86272:	69fb      	ldr	r3, [r7, #28]
   86274:	2b08      	cmp	r3, #8
   86276:	d105      	bne.n	86284 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   86278:	68fb      	ldr	r3, [r7, #12]
   8627a:	685b      	ldr	r3, [r3, #4]
   8627c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   86280:	68fb      	ldr	r3, [r7, #12]
   86282:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   86284:	693b      	ldr	r3, [r7, #16]
   86286:	041a      	lsls	r2, r3, #16
   86288:	697b      	ldr	r3, [r7, #20]
   8628a:	431a      	orrs	r2, r3
   8628c:	68fb      	ldr	r3, [r7, #12]
   8628e:	621a      	str	r2, [r3, #32]

	return 0;
   86290:	2300      	movs	r3, #0
}
   86292:	4618      	mov	r0, r3
   86294:	3724      	adds	r7, #36	; 0x24
   86296:	46bd      	mov	sp, r7
   86298:	bc80      	pop	{r7}
   8629a:	4770      	bx	lr

0008629c <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8629c:	b480      	push	{r7}
   8629e:	b087      	sub	sp, #28
   862a0:	af00      	add	r7, sp, #0
   862a2:	60f8      	str	r0, [r7, #12]
   862a4:	60b9      	str	r1, [r7, #8]
   862a6:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   862a8:	68bb      	ldr	r3, [r7, #8]
   862aa:	085a      	lsrs	r2, r3, #1
   862ac:	687b      	ldr	r3, [r7, #4]
   862ae:	441a      	add	r2, r3
   862b0:	68bb      	ldr	r3, [r7, #8]
   862b2:	fbb2 f3f3 	udiv	r3, r2, r3
   862b6:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   862b8:	697b      	ldr	r3, [r7, #20]
   862ba:	2b03      	cmp	r3, #3
   862bc:	d903      	bls.n	862c6 <usart_set_spi_master_baudrate+0x2a>
   862be:	697b      	ldr	r3, [r7, #20]
   862c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   862c4:	d301      	bcc.n	862ca <usart_set_spi_master_baudrate+0x2e>
		return 1;
   862c6:	2301      	movs	r3, #1
   862c8:	e003      	b.n	862d2 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   862ca:	68fb      	ldr	r3, [r7, #12]
   862cc:	697a      	ldr	r2, [r7, #20]
   862ce:	621a      	str	r2, [r3, #32]

	return 0;
   862d0:	2300      	movs	r3, #0
}
   862d2:	4618      	mov	r0, r3
   862d4:	371c      	adds	r7, #28
   862d6:	46bd      	mov	sp, r7
   862d8:	bc80      	pop	{r7}
   862da:	4770      	bx	lr

000862dc <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   862dc:	b580      	push	{r7, lr}
   862de:	b082      	sub	sp, #8
   862e0:	af00      	add	r7, sp, #0
   862e2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   862e4:	6878      	ldr	r0, [r7, #4]
   862e6:	4b0f      	ldr	r3, [pc, #60]	; (86324 <usart_reset+0x48>)
   862e8:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   862ea:	687b      	ldr	r3, [r7, #4]
   862ec:	2200      	movs	r2, #0
   862ee:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   862f0:	687b      	ldr	r3, [r7, #4]
   862f2:	2200      	movs	r2, #0
   862f4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   862f6:	687b      	ldr	r3, [r7, #4]
   862f8:	2200      	movs	r2, #0
   862fa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   862fc:	6878      	ldr	r0, [r7, #4]
   862fe:	4b0a      	ldr	r3, [pc, #40]	; (86328 <usart_reset+0x4c>)
   86300:	4798      	blx	r3
	usart_reset_rx(p_usart);
   86302:	6878      	ldr	r0, [r7, #4]
   86304:	4b09      	ldr	r3, [pc, #36]	; (8632c <usart_reset+0x50>)
   86306:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   86308:	6878      	ldr	r0, [r7, #4]
   8630a:	4b09      	ldr	r3, [pc, #36]	; (86330 <usart_reset+0x54>)
   8630c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8630e:	6878      	ldr	r0, [r7, #4]
   86310:	4b08      	ldr	r3, [pc, #32]	; (86334 <usart_reset+0x58>)
   86312:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   86314:	6878      	ldr	r0, [r7, #4]
   86316:	4b08      	ldr	r3, [pc, #32]	; (86338 <usart_reset+0x5c>)
   86318:	4798      	blx	r3
#endif
}
   8631a:	bf00      	nop
   8631c:	3708      	adds	r7, #8
   8631e:	46bd      	mov	sp, r7
   86320:	bd80      	pop	{r7, pc}
   86322:	bf00      	nop
   86324:	00086625 	.word	0x00086625
   86328:	000864e9 	.word	0x000864e9
   8632c:	00086531 	.word	0x00086531
   86330:	000865a9 	.word	0x000865a9
   86334:	000865dd 	.word	0x000865dd
   86338:	000865c3 	.word	0x000865c3

0008633c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   8633c:	b580      	push	{r7, lr}
   8633e:	b084      	sub	sp, #16
   86340:	af00      	add	r7, sp, #0
   86342:	60f8      	str	r0, [r7, #12]
   86344:	60b9      	str	r1, [r7, #8]
   86346:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   86348:	68f8      	ldr	r0, [r7, #12]
   8634a:	4b1a      	ldr	r3, [pc, #104]	; (863b4 <usart_init_rs232+0x78>)
   8634c:	4798      	blx	r3

	ul_reg_val = 0;
   8634e:	4b1a      	ldr	r3, [pc, #104]	; (863b8 <usart_init_rs232+0x7c>)
   86350:	2200      	movs	r2, #0
   86352:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   86354:	68bb      	ldr	r3, [r7, #8]
   86356:	2b00      	cmp	r3, #0
   86358:	d009      	beq.n	8636e <usart_init_rs232+0x32>
   8635a:	68bb      	ldr	r3, [r7, #8]
   8635c:	681b      	ldr	r3, [r3, #0]
   8635e:	687a      	ldr	r2, [r7, #4]
   86360:	4619      	mov	r1, r3
   86362:	68f8      	ldr	r0, [r7, #12]
   86364:	4b15      	ldr	r3, [pc, #84]	; (863bc <usart_init_rs232+0x80>)
   86366:	4798      	blx	r3
   86368:	4603      	mov	r3, r0
   8636a:	2b00      	cmp	r3, #0
   8636c:	d001      	beq.n	86372 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   8636e:	2301      	movs	r3, #1
   86370:	e01b      	b.n	863aa <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86372:	68bb      	ldr	r3, [r7, #8]
   86374:	685a      	ldr	r2, [r3, #4]
   86376:	68bb      	ldr	r3, [r7, #8]
   86378:	689b      	ldr	r3, [r3, #8]
   8637a:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8637c:	68bb      	ldr	r3, [r7, #8]
   8637e:	691b      	ldr	r3, [r3, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86380:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   86382:	68bb      	ldr	r3, [r7, #8]
   86384:	68db      	ldr	r3, [r3, #12]
   86386:	431a      	orrs	r2, r3
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   86388:	4b0b      	ldr	r3, [pc, #44]	; (863b8 <usart_init_rs232+0x7c>)
   8638a:	681b      	ldr	r3, [r3, #0]
   8638c:	4313      	orrs	r3, r2
   8638e:	4a0a      	ldr	r2, [pc, #40]	; (863b8 <usart_init_rs232+0x7c>)
   86390:	6013      	str	r3, [r2, #0]

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   86392:	4b09      	ldr	r3, [pc, #36]	; (863b8 <usart_init_rs232+0x7c>)
   86394:	681b      	ldr	r3, [r3, #0]
   86396:	4a08      	ldr	r2, [pc, #32]	; (863b8 <usart_init_rs232+0x7c>)
   86398:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   8639a:	68fb      	ldr	r3, [r7, #12]
   8639c:	685a      	ldr	r2, [r3, #4]
   8639e:	4b06      	ldr	r3, [pc, #24]	; (863b8 <usart_init_rs232+0x7c>)
   863a0:	681b      	ldr	r3, [r3, #0]
   863a2:	431a      	orrs	r2, r3
   863a4:	68fb      	ldr	r3, [r7, #12]
   863a6:	605a      	str	r2, [r3, #4]

	return 0;
   863a8:	2300      	movs	r3, #0
}
   863aa:	4618      	mov	r0, r3
   863ac:	3710      	adds	r7, #16
   863ae:	46bd      	mov	sp, r7
   863b0:	bd80      	pop	{r7, pc}
   863b2:	bf00      	nop
   863b4:	000862dd 	.word	0x000862dd
   863b8:	20001380 	.word	0x20001380
   863bc:	00086215 	.word	0x00086215

000863c0 <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   863c0:	b580      	push	{r7, lr}
   863c2:	b084      	sub	sp, #16
   863c4:	af00      	add	r7, sp, #0
   863c6:	60f8      	str	r0, [r7, #12]
   863c8:	60b9      	str	r1, [r7, #8]
   863ca:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   863cc:	68f8      	ldr	r0, [r7, #12]
   863ce:	4b3d      	ldr	r3, [pc, #244]	; (864c4 <usart_init_spi_master+0x104>)
   863d0:	4798      	blx	r3

	ul_reg_val = 0;
   863d2:	4b3d      	ldr	r3, [pc, #244]	; (864c8 <usart_init_spi_master+0x108>)
   863d4:	2200      	movs	r2, #0
   863d6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   863d8:	68bb      	ldr	r3, [r7, #8]
   863da:	2b00      	cmp	r3, #0
   863dc:	d00d      	beq.n	863fa <usart_init_spi_master+0x3a>
   863de:	68bb      	ldr	r3, [r7, #8]
   863e0:	689b      	ldr	r3, [r3, #8]
   863e2:	2b03      	cmp	r3, #3
   863e4:	d809      	bhi.n	863fa <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   863e6:	68bb      	ldr	r3, [r7, #8]
   863e8:	681b      	ldr	r3, [r3, #0]
   863ea:	687a      	ldr	r2, [r7, #4]
   863ec:	4619      	mov	r1, r3
   863ee:	68f8      	ldr	r0, [r7, #12]
   863f0:	4b36      	ldr	r3, [pc, #216]	; (864cc <usart_init_spi_master+0x10c>)
   863f2:	4798      	blx	r3
   863f4:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   863f6:	2b00      	cmp	r3, #0
   863f8:	d001      	beq.n	863fe <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   863fa:	2301      	movs	r3, #1
   863fc:	e05d      	b.n	864ba <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   863fe:	68bb      	ldr	r3, [r7, #8]
   86400:	685a      	ldr	r2, [r3, #4]
   86402:	4b31      	ldr	r3, [pc, #196]	; (864c8 <usart_init_spi_master+0x108>)
   86404:	681b      	ldr	r3, [r3, #0]
   86406:	4313      	orrs	r3, r2
   86408:	4a2f      	ldr	r2, [pc, #188]	; (864c8 <usart_init_spi_master+0x108>)
   8640a:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   8640c:	68bb      	ldr	r3, [r7, #8]
   8640e:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   86410:	4b2d      	ldr	r3, [pc, #180]	; (864c8 <usart_init_spi_master+0x108>)
   86412:	681b      	ldr	r3, [r3, #0]
   86414:	4313      	orrs	r3, r2
   86416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   8641a:	f043 030e 	orr.w	r3, r3, #14
   8641e:	4a2a      	ldr	r2, [pc, #168]	; (864c8 <usart_init_spi_master+0x108>)
   86420:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   86422:	68bb      	ldr	r3, [r7, #8]
   86424:	689b      	ldr	r3, [r3, #8]
   86426:	2b03      	cmp	r3, #3
   86428:	d83e      	bhi.n	864a8 <usart_init_spi_master+0xe8>
   8642a:	a201      	add	r2, pc, #4	; (adr r2, 86430 <usart_init_spi_master+0x70>)
   8642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86430:	00086441 	.word	0x00086441
   86434:	0008645b 	.word	0x0008645b
   86438:	00086475 	.word	0x00086475
   8643c:	0008648f 	.word	0x0008648f
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   86440:	4b21      	ldr	r3, [pc, #132]	; (864c8 <usart_init_spi_master+0x108>)
   86442:	681b      	ldr	r3, [r3, #0]
   86444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   86448:	4a1f      	ldr	r2, [pc, #124]	; (864c8 <usart_init_spi_master+0x108>)
   8644a:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   8644c:	4b1e      	ldr	r3, [pc, #120]	; (864c8 <usart_init_spi_master+0x108>)
   8644e:	681b      	ldr	r3, [r3, #0]
   86450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   86454:	4a1c      	ldr	r2, [pc, #112]	; (864c8 <usart_init_spi_master+0x108>)
   86456:	6013      	str	r3, [r2, #0]
		break;
   86458:	e027      	b.n	864aa <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   8645a:	4b1b      	ldr	r3, [pc, #108]	; (864c8 <usart_init_spi_master+0x108>)
   8645c:	681b      	ldr	r3, [r3, #0]
   8645e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86462:	4a19      	ldr	r2, [pc, #100]	; (864c8 <usart_init_spi_master+0x108>)
   86464:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   86466:	4b18      	ldr	r3, [pc, #96]	; (864c8 <usart_init_spi_master+0x108>)
   86468:	681b      	ldr	r3, [r3, #0]
   8646a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8646e:	4a16      	ldr	r2, [pc, #88]	; (864c8 <usart_init_spi_master+0x108>)
   86470:	6013      	str	r3, [r2, #0]
		break;
   86472:	e01a      	b.n	864aa <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   86474:	4b14      	ldr	r3, [pc, #80]	; (864c8 <usart_init_spi_master+0x108>)
   86476:	681b      	ldr	r3, [r3, #0]
   86478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8647c:	4a12      	ldr	r2, [pc, #72]	; (864c8 <usart_init_spi_master+0x108>)
   8647e:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   86480:	4b11      	ldr	r3, [pc, #68]	; (864c8 <usart_init_spi_master+0x108>)
   86482:	681b      	ldr	r3, [r3, #0]
   86484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   86488:	4a0f      	ldr	r2, [pc, #60]	; (864c8 <usart_init_spi_master+0x108>)
   8648a:	6013      	str	r3, [r2, #0]
		break;
   8648c:	e00d      	b.n	864aa <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   8648e:	4b0e      	ldr	r3, [pc, #56]	; (864c8 <usart_init_spi_master+0x108>)
   86490:	681b      	ldr	r3, [r3, #0]
   86492:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   86496:	4a0c      	ldr	r2, [pc, #48]	; (864c8 <usart_init_spi_master+0x108>)
   86498:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   8649a:	4b0b      	ldr	r3, [pc, #44]	; (864c8 <usart_init_spi_master+0x108>)
   8649c:	681b      	ldr	r3, [r3, #0]
   8649e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   864a2:	4a09      	ldr	r2, [pc, #36]	; (864c8 <usart_init_spi_master+0x108>)
   864a4:	6013      	str	r3, [r2, #0]
		break;
   864a6:	e000      	b.n	864aa <usart_init_spi_master+0xea>

	default:
		break;
   864a8:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   864aa:	68fb      	ldr	r3, [r7, #12]
   864ac:	685a      	ldr	r2, [r3, #4]
   864ae:	4b06      	ldr	r3, [pc, #24]	; (864c8 <usart_init_spi_master+0x108>)
   864b0:	681b      	ldr	r3, [r3, #0]
   864b2:	431a      	orrs	r2, r3
   864b4:	68fb      	ldr	r3, [r7, #12]
   864b6:	605a      	str	r2, [r3, #4]

	return 0;
   864b8:	2300      	movs	r3, #0
}
   864ba:	4618      	mov	r0, r3
   864bc:	3710      	adds	r7, #16
   864be:	46bd      	mov	sp, r7
   864c0:	bd80      	pop	{r7, pc}
   864c2:	bf00      	nop
   864c4:	000862dd 	.word	0x000862dd
   864c8:	20001384 	.word	0x20001384
   864cc:	0008629d 	.word	0x0008629d

000864d0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   864d0:	b480      	push	{r7}
   864d2:	b083      	sub	sp, #12
   864d4:	af00      	add	r7, sp, #0
   864d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   864d8:	687b      	ldr	r3, [r7, #4]
   864da:	2240      	movs	r2, #64	; 0x40
   864dc:	601a      	str	r2, [r3, #0]
}
   864de:	bf00      	nop
   864e0:	370c      	adds	r7, #12
   864e2:	46bd      	mov	sp, r7
   864e4:	bc80      	pop	{r7}
   864e6:	4770      	bx	lr

000864e8 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   864e8:	b480      	push	{r7}
   864ea:	b083      	sub	sp, #12
   864ec:	af00      	add	r7, sp, #0
   864ee:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   864f0:	687b      	ldr	r3, [r7, #4]
   864f2:	2288      	movs	r2, #136	; 0x88
   864f4:	601a      	str	r2, [r3, #0]
}
   864f6:	bf00      	nop
   864f8:	370c      	adds	r7, #12
   864fa:	46bd      	mov	sp, r7
   864fc:	bc80      	pop	{r7}
   864fe:	4770      	bx	lr

00086500 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   86500:	b480      	push	{r7}
   86502:	b083      	sub	sp, #12
   86504:	af00      	add	r7, sp, #0
   86506:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   86508:	687b      	ldr	r3, [r7, #4]
   8650a:	2210      	movs	r2, #16
   8650c:	601a      	str	r2, [r3, #0]
}
   8650e:	bf00      	nop
   86510:	370c      	adds	r7, #12
   86512:	46bd      	mov	sp, r7
   86514:	bc80      	pop	{r7}
   86516:	4770      	bx	lr

00086518 <usart_disable_rx>:
 * \brief Disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
   86518:	b480      	push	{r7}
   8651a:	b083      	sub	sp, #12
   8651c:	af00      	add	r7, sp, #0
   8651e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXDIS;
   86520:	687b      	ldr	r3, [r7, #4]
   86522:	2220      	movs	r2, #32
   86524:	601a      	str	r2, [r3, #0]
}
   86526:	bf00      	nop
   86528:	370c      	adds	r7, #12
   8652a:	46bd      	mov	sp, r7
   8652c:	bc80      	pop	{r7}
   8652e:	4770      	bx	lr

00086530 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   86530:	b480      	push	{r7}
   86532:	b083      	sub	sp, #12
   86534:	af00      	add	r7, sp, #0
   86536:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   86538:	687b      	ldr	r3, [r7, #4]
   8653a:	2224      	movs	r2, #36	; 0x24
   8653c:	601a      	str	r2, [r3, #0]
}
   8653e:	bf00      	nop
   86540:	370c      	adds	r7, #12
   86542:	46bd      	mov	sp, r7
   86544:	bc80      	pop	{r7}
   86546:	4770      	bx	lr

00086548 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   86548:	b480      	push	{r7}
   8654a:	b083      	sub	sp, #12
   8654c:	af00      	add	r7, sp, #0
   8654e:	6078      	str	r0, [r7, #4]
   86550:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   86552:	687b      	ldr	r3, [r7, #4]
   86554:	683a      	ldr	r2, [r7, #0]
   86556:	609a      	str	r2, [r3, #8]
}
   86558:	bf00      	nop
   8655a:	370c      	adds	r7, #12
   8655c:	46bd      	mov	sp, r7
   8655e:	bc80      	pop	{r7}
   86560:	4770      	bx	lr

00086562 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   86562:	b480      	push	{r7}
   86564:	b083      	sub	sp, #12
   86566:	af00      	add	r7, sp, #0
   86568:	6078      	str	r0, [r7, #4]
   8656a:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   8656c:	687b      	ldr	r3, [r7, #4]
   8656e:	683a      	ldr	r2, [r7, #0]
   86570:	60da      	str	r2, [r3, #12]
}
   86572:	bf00      	nop
   86574:	370c      	adds	r7, #12
   86576:	46bd      	mov	sp, r7
   86578:	bc80      	pop	{r7}
   8657a:	4770      	bx	lr

0008657c <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   8657c:	b480      	push	{r7}
   8657e:	b083      	sub	sp, #12
   86580:	af00      	add	r7, sp, #0
   86582:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   86584:	687b      	ldr	r3, [r7, #4]
   86586:	691b      	ldr	r3, [r3, #16]
}
   86588:	4618      	mov	r0, r3
   8658a:	370c      	adds	r7, #12
   8658c:	46bd      	mov	sp, r7
   8658e:	bc80      	pop	{r7}
   86590:	4770      	bx	lr

00086592 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   86592:	b480      	push	{r7}
   86594:	b083      	sub	sp, #12
   86596:	af00      	add	r7, sp, #0
   86598:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   8659a:	687b      	ldr	r3, [r7, #4]
   8659c:	695b      	ldr	r3, [r3, #20]
}
   8659e:	4618      	mov	r0, r3
   865a0:	370c      	adds	r7, #12
   865a2:	46bd      	mov	sp, r7
   865a4:	bc80      	pop	{r7}
   865a6:	4770      	bx	lr

000865a8 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   865a8:	b480      	push	{r7}
   865aa:	b083      	sub	sp, #12
   865ac:	af00      	add	r7, sp, #0
   865ae:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   865b0:	687b      	ldr	r3, [r7, #4]
   865b2:	f44f 7280 	mov.w	r2, #256	; 0x100
   865b6:	601a      	str	r2, [r3, #0]
}
   865b8:	bf00      	nop
   865ba:	370c      	adds	r7, #12
   865bc:	46bd      	mov	sp, r7
   865be:	bc80      	pop	{r7}
   865c0:	4770      	bx	lr

000865c2 <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   865c2:	b480      	push	{r7}
   865c4:	b083      	sub	sp, #12
   865c6:	af00      	add	r7, sp, #0
   865c8:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   865ca:	687b      	ldr	r3, [r7, #4]
   865cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   865d0:	601a      	str	r2, [r3, #0]
}
   865d2:	bf00      	nop
   865d4:	370c      	adds	r7, #12
   865d6:	46bd      	mov	sp, r7
   865d8:	bc80      	pop	{r7}
   865da:	4770      	bx	lr

000865dc <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   865dc:	b480      	push	{r7}
   865de:	b083      	sub	sp, #12
   865e0:	af00      	add	r7, sp, #0
   865e2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   865e4:	687b      	ldr	r3, [r7, #4]
   865e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   865ea:	601a      	str	r2, [r3, #0]
}
   865ec:	bf00      	nop
   865ee:	370c      	adds	r7, #12
   865f0:	46bd      	mov	sp, r7
   865f2:	bc80      	pop	{r7}
   865f4:	4770      	bx	lr

000865f6 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   865f6:	b480      	push	{r7}
   865f8:	b083      	sub	sp, #12
   865fa:	af00      	add	r7, sp, #0
   865fc:	6078      	str	r0, [r7, #4]
   865fe:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   86600:	bf00      	nop
   86602:	687b      	ldr	r3, [r7, #4]
   86604:	695b      	ldr	r3, [r3, #20]
   86606:	f003 0302 	and.w	r3, r3, #2
   8660a:	2b00      	cmp	r3, #0
   8660c:	d0f9      	beq.n	86602 <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8660e:	683b      	ldr	r3, [r7, #0]
   86610:	f3c3 0208 	ubfx	r2, r3, #0, #9
   86614:	687b      	ldr	r3, [r7, #4]
   86616:	61da      	str	r2, [r3, #28]

	return 0;
   86618:	2300      	movs	r3, #0
}
   8661a:	4618      	mov	r0, r3
   8661c:	370c      	adds	r7, #12
   8661e:	46bd      	mov	sp, r7
   86620:	bc80      	pop	{r7}
   86622:	4770      	bx	lr

00086624 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   86624:	b480      	push	{r7}
   86626:	b083      	sub	sp, #12
   86628:	af00      	add	r7, sp, #0
   8662a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   8662c:	687b      	ldr	r3, [r7, #4]
   8662e:	4a04      	ldr	r2, [pc, #16]	; (86640 <usart_disable_writeprotect+0x1c>)
   86630:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   86634:	bf00      	nop
   86636:	370c      	adds	r7, #12
   86638:	46bd      	mov	sp, r7
   8663a:	bc80      	pop	{r7}
   8663c:	4770      	bx	lr
   8663e:	bf00      	nop
   86640:	55534100 	.word	0x55534100

00086644 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   86644:	b580      	push	{r7, lr}
   86646:	b086      	sub	sp, #24
   86648:	af00      	add	r7, sp, #0
   8664a:	60f8      	str	r0, [r7, #12]
   8664c:	60b9      	str	r1, [r7, #8]
   8664e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   86650:	2300      	movs	r3, #0
   86652:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   86654:	68fb      	ldr	r3, [r7, #12]
   86656:	2b01      	cmp	r3, #1
   86658:	d01e      	beq.n	86698 <_write+0x54>
   8665a:	68fb      	ldr	r3, [r7, #12]
   8665c:	2b02      	cmp	r3, #2
   8665e:	d01b      	beq.n	86698 <_write+0x54>
   86660:	68fb      	ldr	r3, [r7, #12]
   86662:	2b03      	cmp	r3, #3
   86664:	d018      	beq.n	86698 <_write+0x54>
		return -1;
   86666:	f04f 33ff 	mov.w	r3, #4294967295
   8666a:	e019      	b.n	866a0 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8666c:	4b0e      	ldr	r3, [pc, #56]	; (866a8 <_write+0x64>)
   8666e:	681a      	ldr	r2, [r3, #0]
   86670:	4b0e      	ldr	r3, [pc, #56]	; (866ac <_write+0x68>)
   86672:	6818      	ldr	r0, [r3, #0]
   86674:	68bb      	ldr	r3, [r7, #8]
   86676:	1c59      	adds	r1, r3, #1
   86678:	60b9      	str	r1, [r7, #8]
   8667a:	781b      	ldrb	r3, [r3, #0]
   8667c:	4619      	mov	r1, r3
   8667e:	4790      	blx	r2
   86680:	4603      	mov	r3, r0
   86682:	2b00      	cmp	r3, #0
   86684:	da02      	bge.n	8668c <_write+0x48>
			return -1;
   86686:	f04f 33ff 	mov.w	r3, #4294967295
   8668a:	e009      	b.n	866a0 <_write+0x5c>
		}
		++nChars;
   8668c:	697b      	ldr	r3, [r7, #20]
   8668e:	3301      	adds	r3, #1
   86690:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   86692:	687b      	ldr	r3, [r7, #4]
   86694:	3b01      	subs	r3, #1
   86696:	607b      	str	r3, [r7, #4]
   86698:	687b      	ldr	r3, [r7, #4]
   8669a:	2b00      	cmp	r3, #0
   8669c:	d1e6      	bne.n	8666c <_write+0x28>
	}
	return nChars;
   8669e:	697b      	ldr	r3, [r7, #20]
}
   866a0:	4618      	mov	r0, r3
   866a2:	3718      	adds	r7, #24
   866a4:	46bd      	mov	sp, r7
   866a6:	bd80      	pop	{r7, pc}
   866a8:	20001840 	.word	0x20001840
   866ac:	20001844 	.word	0x20001844

000866b0 <__aeabi_uldivmod>:
   866b0:	b953      	cbnz	r3, 866c8 <__aeabi_uldivmod+0x18>
   866b2:	b94a      	cbnz	r2, 866c8 <__aeabi_uldivmod+0x18>
   866b4:	2900      	cmp	r1, #0
   866b6:	bf08      	it	eq
   866b8:	2800      	cmpeq	r0, #0
   866ba:	bf1c      	itt	ne
   866bc:	f04f 31ff 	movne.w	r1, #4294967295
   866c0:	f04f 30ff 	movne.w	r0, #4294967295
   866c4:	f000 b96e 	b.w	869a4 <__aeabi_idiv0>
   866c8:	f1ad 0c08 	sub.w	ip, sp, #8
   866cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   866d0:	f000 f806 	bl	866e0 <__udivmoddi4>
   866d4:	f8dd e004 	ldr.w	lr, [sp, #4]
   866d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   866dc:	b004      	add	sp, #16
   866de:	4770      	bx	lr

000866e0 <__udivmoddi4>:
   866e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   866e4:	9e08      	ldr	r6, [sp, #32]
   866e6:	460d      	mov	r5, r1
   866e8:	4604      	mov	r4, r0
   866ea:	468e      	mov	lr, r1
   866ec:	2b00      	cmp	r3, #0
   866ee:	f040 8083 	bne.w	867f8 <__udivmoddi4+0x118>
   866f2:	428a      	cmp	r2, r1
   866f4:	4617      	mov	r7, r2
   866f6:	d947      	bls.n	86788 <__udivmoddi4+0xa8>
   866f8:	fab2 f382 	clz	r3, r2
   866fc:	b14b      	cbz	r3, 86712 <__udivmoddi4+0x32>
   866fe:	f1c3 0120 	rsb	r1, r3, #32
   86702:	fa05 fe03 	lsl.w	lr, r5, r3
   86706:	fa20 f101 	lsr.w	r1, r0, r1
   8670a:	409f      	lsls	r7, r3
   8670c:	ea41 0e0e 	orr.w	lr, r1, lr
   86710:	409c      	lsls	r4, r3
   86712:	ea4f 4817 	mov.w	r8, r7, lsr #16
   86716:	fbbe fcf8 	udiv	ip, lr, r8
   8671a:	fa1f f987 	uxth.w	r9, r7
   8671e:	fb08 e21c 	mls	r2, r8, ip, lr
   86722:	fb0c f009 	mul.w	r0, ip, r9
   86726:	0c21      	lsrs	r1, r4, #16
   86728:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   8672c:	4290      	cmp	r0, r2
   8672e:	d90a      	bls.n	86746 <__udivmoddi4+0x66>
   86730:	18ba      	adds	r2, r7, r2
   86732:	f10c 31ff 	add.w	r1, ip, #4294967295
   86736:	f080 8118 	bcs.w	8696a <__udivmoddi4+0x28a>
   8673a:	4290      	cmp	r0, r2
   8673c:	f240 8115 	bls.w	8696a <__udivmoddi4+0x28a>
   86740:	f1ac 0c02 	sub.w	ip, ip, #2
   86744:	443a      	add	r2, r7
   86746:	1a12      	subs	r2, r2, r0
   86748:	fbb2 f0f8 	udiv	r0, r2, r8
   8674c:	fb08 2210 	mls	r2, r8, r0, r2
   86750:	fb00 f109 	mul.w	r1, r0, r9
   86754:	b2a4      	uxth	r4, r4
   86756:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   8675a:	42a1      	cmp	r1, r4
   8675c:	d909      	bls.n	86772 <__udivmoddi4+0x92>
   8675e:	193c      	adds	r4, r7, r4
   86760:	f100 32ff 	add.w	r2, r0, #4294967295
   86764:	f080 8103 	bcs.w	8696e <__udivmoddi4+0x28e>
   86768:	42a1      	cmp	r1, r4
   8676a:	f240 8100 	bls.w	8696e <__udivmoddi4+0x28e>
   8676e:	3802      	subs	r0, #2
   86770:	443c      	add	r4, r7
   86772:	1a64      	subs	r4, r4, r1
   86774:	2100      	movs	r1, #0
   86776:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   8677a:	b11e      	cbz	r6, 86784 <__udivmoddi4+0xa4>
   8677c:	2200      	movs	r2, #0
   8677e:	40dc      	lsrs	r4, r3
   86780:	e9c6 4200 	strd	r4, r2, [r6]
   86784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86788:	b902      	cbnz	r2, 8678c <__udivmoddi4+0xac>
   8678a:	deff      	udf	#255	; 0xff
   8678c:	fab2 f382 	clz	r3, r2
   86790:	2b00      	cmp	r3, #0
   86792:	d14f      	bne.n	86834 <__udivmoddi4+0x154>
   86794:	1a8d      	subs	r5, r1, r2
   86796:	2101      	movs	r1, #1
   86798:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   8679c:	fa1f f882 	uxth.w	r8, r2
   867a0:	fbb5 fcfe 	udiv	ip, r5, lr
   867a4:	fb0e 551c 	mls	r5, lr, ip, r5
   867a8:	fb08 f00c 	mul.w	r0, r8, ip
   867ac:	0c22      	lsrs	r2, r4, #16
   867ae:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   867b2:	42a8      	cmp	r0, r5
   867b4:	d907      	bls.n	867c6 <__udivmoddi4+0xe6>
   867b6:	197d      	adds	r5, r7, r5
   867b8:	f10c 32ff 	add.w	r2, ip, #4294967295
   867bc:	d202      	bcs.n	867c4 <__udivmoddi4+0xe4>
   867be:	42a8      	cmp	r0, r5
   867c0:	f200 80e9 	bhi.w	86996 <__udivmoddi4+0x2b6>
   867c4:	4694      	mov	ip, r2
   867c6:	1a2d      	subs	r5, r5, r0
   867c8:	fbb5 f0fe 	udiv	r0, r5, lr
   867cc:	fb0e 5510 	mls	r5, lr, r0, r5
   867d0:	fb08 f800 	mul.w	r8, r8, r0
   867d4:	b2a4      	uxth	r4, r4
   867d6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   867da:	45a0      	cmp	r8, r4
   867dc:	d907      	bls.n	867ee <__udivmoddi4+0x10e>
   867de:	193c      	adds	r4, r7, r4
   867e0:	f100 32ff 	add.w	r2, r0, #4294967295
   867e4:	d202      	bcs.n	867ec <__udivmoddi4+0x10c>
   867e6:	45a0      	cmp	r8, r4
   867e8:	f200 80d9 	bhi.w	8699e <__udivmoddi4+0x2be>
   867ec:	4610      	mov	r0, r2
   867ee:	eba4 0408 	sub.w	r4, r4, r8
   867f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   867f6:	e7c0      	b.n	8677a <__udivmoddi4+0x9a>
   867f8:	428b      	cmp	r3, r1
   867fa:	d908      	bls.n	8680e <__udivmoddi4+0x12e>
   867fc:	2e00      	cmp	r6, #0
   867fe:	f000 80b1 	beq.w	86964 <__udivmoddi4+0x284>
   86802:	2100      	movs	r1, #0
   86804:	e9c6 0500 	strd	r0, r5, [r6]
   86808:	4608      	mov	r0, r1
   8680a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8680e:	fab3 f183 	clz	r1, r3
   86812:	2900      	cmp	r1, #0
   86814:	d14b      	bne.n	868ae <__udivmoddi4+0x1ce>
   86816:	42ab      	cmp	r3, r5
   86818:	d302      	bcc.n	86820 <__udivmoddi4+0x140>
   8681a:	4282      	cmp	r2, r0
   8681c:	f200 80b9 	bhi.w	86992 <__udivmoddi4+0x2b2>
   86820:	1a84      	subs	r4, r0, r2
   86822:	eb65 0303 	sbc.w	r3, r5, r3
   86826:	2001      	movs	r0, #1
   86828:	469e      	mov	lr, r3
   8682a:	2e00      	cmp	r6, #0
   8682c:	d0aa      	beq.n	86784 <__udivmoddi4+0xa4>
   8682e:	e9c6 4e00 	strd	r4, lr, [r6]
   86832:	e7a7      	b.n	86784 <__udivmoddi4+0xa4>
   86834:	409f      	lsls	r7, r3
   86836:	f1c3 0220 	rsb	r2, r3, #32
   8683a:	40d1      	lsrs	r1, r2
   8683c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   86840:	fbb1 f0fe 	udiv	r0, r1, lr
   86844:	fa1f f887 	uxth.w	r8, r7
   86848:	fb0e 1110 	mls	r1, lr, r0, r1
   8684c:	fa24 f202 	lsr.w	r2, r4, r2
   86850:	409d      	lsls	r5, r3
   86852:	fb00 fc08 	mul.w	ip, r0, r8
   86856:	432a      	orrs	r2, r5
   86858:	0c15      	lsrs	r5, r2, #16
   8685a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8685e:	45ac      	cmp	ip, r5
   86860:	fa04 f403 	lsl.w	r4, r4, r3
   86864:	d909      	bls.n	8687a <__udivmoddi4+0x19a>
   86866:	197d      	adds	r5, r7, r5
   86868:	f100 31ff 	add.w	r1, r0, #4294967295
   8686c:	f080 808f 	bcs.w	8698e <__udivmoddi4+0x2ae>
   86870:	45ac      	cmp	ip, r5
   86872:	f240 808c 	bls.w	8698e <__udivmoddi4+0x2ae>
   86876:	3802      	subs	r0, #2
   86878:	443d      	add	r5, r7
   8687a:	eba5 050c 	sub.w	r5, r5, ip
   8687e:	fbb5 f1fe 	udiv	r1, r5, lr
   86882:	fb0e 5c11 	mls	ip, lr, r1, r5
   86886:	fb01 f908 	mul.w	r9, r1, r8
   8688a:	b295      	uxth	r5, r2
   8688c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   86890:	45a9      	cmp	r9, r5
   86892:	d907      	bls.n	868a4 <__udivmoddi4+0x1c4>
   86894:	197d      	adds	r5, r7, r5
   86896:	f101 32ff 	add.w	r2, r1, #4294967295
   8689a:	d274      	bcs.n	86986 <__udivmoddi4+0x2a6>
   8689c:	45a9      	cmp	r9, r5
   8689e:	d972      	bls.n	86986 <__udivmoddi4+0x2a6>
   868a0:	3902      	subs	r1, #2
   868a2:	443d      	add	r5, r7
   868a4:	eba5 0509 	sub.w	r5, r5, r9
   868a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   868ac:	e778      	b.n	867a0 <__udivmoddi4+0xc0>
   868ae:	f1c1 0720 	rsb	r7, r1, #32
   868b2:	408b      	lsls	r3, r1
   868b4:	fa22 fc07 	lsr.w	ip, r2, r7
   868b8:	ea4c 0c03 	orr.w	ip, ip, r3
   868bc:	fa25 f407 	lsr.w	r4, r5, r7
   868c0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   868c4:	fbb4 f9fe 	udiv	r9, r4, lr
   868c8:	fa1f f88c 	uxth.w	r8, ip
   868cc:	fb0e 4419 	mls	r4, lr, r9, r4
   868d0:	fa20 f307 	lsr.w	r3, r0, r7
   868d4:	fb09 fa08 	mul.w	sl, r9, r8
   868d8:	408d      	lsls	r5, r1
   868da:	431d      	orrs	r5, r3
   868dc:	0c2b      	lsrs	r3, r5, #16
   868de:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   868e2:	45a2      	cmp	sl, r4
   868e4:	fa02 f201 	lsl.w	r2, r2, r1
   868e8:	fa00 f301 	lsl.w	r3, r0, r1
   868ec:	d909      	bls.n	86902 <__udivmoddi4+0x222>
   868ee:	eb1c 0404 	adds.w	r4, ip, r4
   868f2:	f109 30ff 	add.w	r0, r9, #4294967295
   868f6:	d248      	bcs.n	8698a <__udivmoddi4+0x2aa>
   868f8:	45a2      	cmp	sl, r4
   868fa:	d946      	bls.n	8698a <__udivmoddi4+0x2aa>
   868fc:	f1a9 0902 	sub.w	r9, r9, #2
   86900:	4464      	add	r4, ip
   86902:	eba4 040a 	sub.w	r4, r4, sl
   86906:	fbb4 f0fe 	udiv	r0, r4, lr
   8690a:	fb0e 4410 	mls	r4, lr, r0, r4
   8690e:	fb00 fa08 	mul.w	sl, r0, r8
   86912:	b2ad      	uxth	r5, r5
   86914:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   86918:	45a2      	cmp	sl, r4
   8691a:	d908      	bls.n	8692e <__udivmoddi4+0x24e>
   8691c:	eb1c 0404 	adds.w	r4, ip, r4
   86920:	f100 35ff 	add.w	r5, r0, #4294967295
   86924:	d22d      	bcs.n	86982 <__udivmoddi4+0x2a2>
   86926:	45a2      	cmp	sl, r4
   86928:	d92b      	bls.n	86982 <__udivmoddi4+0x2a2>
   8692a:	3802      	subs	r0, #2
   8692c:	4464      	add	r4, ip
   8692e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86932:	fba0 8902 	umull	r8, r9, r0, r2
   86936:	eba4 040a 	sub.w	r4, r4, sl
   8693a:	454c      	cmp	r4, r9
   8693c:	46c6      	mov	lr, r8
   8693e:	464d      	mov	r5, r9
   86940:	d319      	bcc.n	86976 <__udivmoddi4+0x296>
   86942:	d016      	beq.n	86972 <__udivmoddi4+0x292>
   86944:	b15e      	cbz	r6, 8695e <__udivmoddi4+0x27e>
   86946:	ebb3 020e 	subs.w	r2, r3, lr
   8694a:	eb64 0405 	sbc.w	r4, r4, r5
   8694e:	fa04 f707 	lsl.w	r7, r4, r7
   86952:	fa22 f301 	lsr.w	r3, r2, r1
   86956:	431f      	orrs	r7, r3
   86958:	40cc      	lsrs	r4, r1
   8695a:	e9c6 7400 	strd	r7, r4, [r6]
   8695e:	2100      	movs	r1, #0
   86960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86964:	4631      	mov	r1, r6
   86966:	4630      	mov	r0, r6
   86968:	e70c      	b.n	86784 <__udivmoddi4+0xa4>
   8696a:	468c      	mov	ip, r1
   8696c:	e6eb      	b.n	86746 <__udivmoddi4+0x66>
   8696e:	4610      	mov	r0, r2
   86970:	e6ff      	b.n	86772 <__udivmoddi4+0x92>
   86972:	4543      	cmp	r3, r8
   86974:	d2e6      	bcs.n	86944 <__udivmoddi4+0x264>
   86976:	ebb8 0e02 	subs.w	lr, r8, r2
   8697a:	eb69 050c 	sbc.w	r5, r9, ip
   8697e:	3801      	subs	r0, #1
   86980:	e7e0      	b.n	86944 <__udivmoddi4+0x264>
   86982:	4628      	mov	r0, r5
   86984:	e7d3      	b.n	8692e <__udivmoddi4+0x24e>
   86986:	4611      	mov	r1, r2
   86988:	e78c      	b.n	868a4 <__udivmoddi4+0x1c4>
   8698a:	4681      	mov	r9, r0
   8698c:	e7b9      	b.n	86902 <__udivmoddi4+0x222>
   8698e:	4608      	mov	r0, r1
   86990:	e773      	b.n	8687a <__udivmoddi4+0x19a>
   86992:	4608      	mov	r0, r1
   86994:	e749      	b.n	8682a <__udivmoddi4+0x14a>
   86996:	f1ac 0c02 	sub.w	ip, ip, #2
   8699a:	443d      	add	r5, r7
   8699c:	e713      	b.n	867c6 <__udivmoddi4+0xe6>
   8699e:	3802      	subs	r0, #2
   869a0:	443c      	add	r4, r7
   869a2:	e724      	b.n	867ee <__udivmoddi4+0x10e>

000869a4 <__aeabi_idiv0>:
   869a4:	4770      	bx	lr
   869a6:	bf00      	nop

000869a8 <__libc_init_array>:
   869a8:	b570      	push	{r4, r5, r6, lr}
   869aa:	4e0d      	ldr	r6, [pc, #52]	; (869e0 <__libc_init_array+0x38>)
   869ac:	4d0d      	ldr	r5, [pc, #52]	; (869e4 <__libc_init_array+0x3c>)
   869ae:	1b76      	subs	r6, r6, r5
   869b0:	10b6      	asrs	r6, r6, #2
   869b2:	d006      	beq.n	869c2 <__libc_init_array+0x1a>
   869b4:	2400      	movs	r4, #0
   869b6:	f855 3b04 	ldr.w	r3, [r5], #4
   869ba:	3401      	adds	r4, #1
   869bc:	4798      	blx	r3
   869be:	42a6      	cmp	r6, r4
   869c0:	d1f9      	bne.n	869b6 <__libc_init_array+0xe>
   869c2:	4e09      	ldr	r6, [pc, #36]	; (869e8 <__libc_init_array+0x40>)
   869c4:	4d09      	ldr	r5, [pc, #36]	; (869ec <__libc_init_array+0x44>)
   869c6:	f006 ff23 	bl	8d810 <_init>
   869ca:	1b76      	subs	r6, r6, r5
   869cc:	10b6      	asrs	r6, r6, #2
   869ce:	d006      	beq.n	869de <__libc_init_array+0x36>
   869d0:	2400      	movs	r4, #0
   869d2:	f855 3b04 	ldr.w	r3, [r5], #4
   869d6:	3401      	adds	r4, #1
   869d8:	4798      	blx	r3
   869da:	42a6      	cmp	r6, r4
   869dc:	d1f9      	bne.n	869d2 <__libc_init_array+0x2a>
   869de:	bd70      	pop	{r4, r5, r6, pc}
   869e0:	0008d81c 	.word	0x0008d81c
   869e4:	0008d81c 	.word	0x0008d81c
   869e8:	0008d824 	.word	0x0008d824
   869ec:	0008d81c 	.word	0x0008d81c

000869f0 <iprintf>:
   869f0:	b40f      	push	{r0, r1, r2, r3}
   869f2:	b500      	push	{lr}
   869f4:	4907      	ldr	r1, [pc, #28]	; (86a14 <iprintf+0x24>)
   869f6:	b083      	sub	sp, #12
   869f8:	ab04      	add	r3, sp, #16
   869fa:	6808      	ldr	r0, [r1, #0]
   869fc:	f853 2b04 	ldr.w	r2, [r3], #4
   86a00:	6881      	ldr	r1, [r0, #8]
   86a02:	9301      	str	r3, [sp, #4]
   86a04:	f001 fed4 	bl	887b0 <_vfiprintf_r>
   86a08:	b003      	add	sp, #12
   86a0a:	f85d eb04 	ldr.w	lr, [sp], #4
   86a0e:	b004      	add	sp, #16
   86a10:	4770      	bx	lr
   86a12:	bf00      	nop
   86a14:	20000440 	.word	0x20000440

00086a18 <memcpy>:
   86a18:	4684      	mov	ip, r0
   86a1a:	ea41 0300 	orr.w	r3, r1, r0
   86a1e:	f013 0303 	ands.w	r3, r3, #3
   86a22:	d149      	bne.n	86ab8 <memcpy+0xa0>
   86a24:	3a40      	subs	r2, #64	; 0x40
   86a26:	d323      	bcc.n	86a70 <memcpy+0x58>
   86a28:	680b      	ldr	r3, [r1, #0]
   86a2a:	6003      	str	r3, [r0, #0]
   86a2c:	684b      	ldr	r3, [r1, #4]
   86a2e:	6043      	str	r3, [r0, #4]
   86a30:	688b      	ldr	r3, [r1, #8]
   86a32:	6083      	str	r3, [r0, #8]
   86a34:	68cb      	ldr	r3, [r1, #12]
   86a36:	60c3      	str	r3, [r0, #12]
   86a38:	690b      	ldr	r3, [r1, #16]
   86a3a:	6103      	str	r3, [r0, #16]
   86a3c:	694b      	ldr	r3, [r1, #20]
   86a3e:	6143      	str	r3, [r0, #20]
   86a40:	698b      	ldr	r3, [r1, #24]
   86a42:	6183      	str	r3, [r0, #24]
   86a44:	69cb      	ldr	r3, [r1, #28]
   86a46:	61c3      	str	r3, [r0, #28]
   86a48:	6a0b      	ldr	r3, [r1, #32]
   86a4a:	6203      	str	r3, [r0, #32]
   86a4c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86a4e:	6243      	str	r3, [r0, #36]	; 0x24
   86a50:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86a52:	6283      	str	r3, [r0, #40]	; 0x28
   86a54:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86a56:	62c3      	str	r3, [r0, #44]	; 0x2c
   86a58:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86a5a:	6303      	str	r3, [r0, #48]	; 0x30
   86a5c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86a5e:	6343      	str	r3, [r0, #52]	; 0x34
   86a60:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86a62:	6383      	str	r3, [r0, #56]	; 0x38
   86a64:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86a66:	63c3      	str	r3, [r0, #60]	; 0x3c
   86a68:	3040      	adds	r0, #64	; 0x40
   86a6a:	3140      	adds	r1, #64	; 0x40
   86a6c:	3a40      	subs	r2, #64	; 0x40
   86a6e:	d2db      	bcs.n	86a28 <memcpy+0x10>
   86a70:	3230      	adds	r2, #48	; 0x30
   86a72:	d30b      	bcc.n	86a8c <memcpy+0x74>
   86a74:	680b      	ldr	r3, [r1, #0]
   86a76:	6003      	str	r3, [r0, #0]
   86a78:	684b      	ldr	r3, [r1, #4]
   86a7a:	6043      	str	r3, [r0, #4]
   86a7c:	688b      	ldr	r3, [r1, #8]
   86a7e:	6083      	str	r3, [r0, #8]
   86a80:	68cb      	ldr	r3, [r1, #12]
   86a82:	60c3      	str	r3, [r0, #12]
   86a84:	3010      	adds	r0, #16
   86a86:	3110      	adds	r1, #16
   86a88:	3a10      	subs	r2, #16
   86a8a:	d2f3      	bcs.n	86a74 <memcpy+0x5c>
   86a8c:	320c      	adds	r2, #12
   86a8e:	d305      	bcc.n	86a9c <memcpy+0x84>
   86a90:	f851 3b04 	ldr.w	r3, [r1], #4
   86a94:	f840 3b04 	str.w	r3, [r0], #4
   86a98:	3a04      	subs	r2, #4
   86a9a:	d2f9      	bcs.n	86a90 <memcpy+0x78>
   86a9c:	3204      	adds	r2, #4
   86a9e:	d008      	beq.n	86ab2 <memcpy+0x9a>
   86aa0:	07d2      	lsls	r2, r2, #31
   86aa2:	bf1c      	itt	ne
   86aa4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86aa8:	f800 3b01 	strbne.w	r3, [r0], #1
   86aac:	d301      	bcc.n	86ab2 <memcpy+0x9a>
   86aae:	880b      	ldrh	r3, [r1, #0]
   86ab0:	8003      	strh	r3, [r0, #0]
   86ab2:	4660      	mov	r0, ip
   86ab4:	4770      	bx	lr
   86ab6:	bf00      	nop
   86ab8:	2a08      	cmp	r2, #8
   86aba:	d313      	bcc.n	86ae4 <memcpy+0xcc>
   86abc:	078b      	lsls	r3, r1, #30
   86abe:	d0b1      	beq.n	86a24 <memcpy+0xc>
   86ac0:	f010 0303 	ands.w	r3, r0, #3
   86ac4:	d0ae      	beq.n	86a24 <memcpy+0xc>
   86ac6:	f1c3 0304 	rsb	r3, r3, #4
   86aca:	1ad2      	subs	r2, r2, r3
   86acc:	07db      	lsls	r3, r3, #31
   86ace:	bf1c      	itt	ne
   86ad0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86ad4:	f800 3b01 	strbne.w	r3, [r0], #1
   86ad8:	d3a4      	bcc.n	86a24 <memcpy+0xc>
   86ada:	f831 3b02 	ldrh.w	r3, [r1], #2
   86ade:	f820 3b02 	strh.w	r3, [r0], #2
   86ae2:	e79f      	b.n	86a24 <memcpy+0xc>
   86ae4:	3a04      	subs	r2, #4
   86ae6:	d3d9      	bcc.n	86a9c <memcpy+0x84>
   86ae8:	3a01      	subs	r2, #1
   86aea:	f811 3b01 	ldrb.w	r3, [r1], #1
   86aee:	f800 3b01 	strb.w	r3, [r0], #1
   86af2:	d2f9      	bcs.n	86ae8 <memcpy+0xd0>
   86af4:	780b      	ldrb	r3, [r1, #0]
   86af6:	7003      	strb	r3, [r0, #0]
   86af8:	784b      	ldrb	r3, [r1, #1]
   86afa:	7043      	strb	r3, [r0, #1]
   86afc:	788b      	ldrb	r3, [r1, #2]
   86afe:	7083      	strb	r3, [r0, #2]
   86b00:	4660      	mov	r0, ip
   86b02:	4770      	bx	lr

00086b04 <memset>:
   86b04:	b4f0      	push	{r4, r5, r6, r7}
   86b06:	0786      	lsls	r6, r0, #30
   86b08:	d046      	beq.n	86b98 <memset+0x94>
   86b0a:	1e54      	subs	r4, r2, #1
   86b0c:	2a00      	cmp	r2, #0
   86b0e:	d03c      	beq.n	86b8a <memset+0x86>
   86b10:	4603      	mov	r3, r0
   86b12:	b2ca      	uxtb	r2, r1
   86b14:	e001      	b.n	86b1a <memset+0x16>
   86b16:	3c01      	subs	r4, #1
   86b18:	d337      	bcc.n	86b8a <memset+0x86>
   86b1a:	f803 2b01 	strb.w	r2, [r3], #1
   86b1e:	079d      	lsls	r5, r3, #30
   86b20:	d1f9      	bne.n	86b16 <memset+0x12>
   86b22:	2c03      	cmp	r4, #3
   86b24:	d92a      	bls.n	86b7c <memset+0x78>
   86b26:	b2cd      	uxtb	r5, r1
   86b28:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86b2c:	2c0f      	cmp	r4, #15
   86b2e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86b32:	d934      	bls.n	86b9e <memset+0x9a>
   86b34:	f1a4 0210 	sub.w	r2, r4, #16
   86b38:	f022 0c0f 	bic.w	ip, r2, #15
   86b3c:	f103 0720 	add.w	r7, r3, #32
   86b40:	0916      	lsrs	r6, r2, #4
   86b42:	4467      	add	r7, ip
   86b44:	f103 0210 	add.w	r2, r3, #16
   86b48:	e942 5504 	strd	r5, r5, [r2, #-16]
   86b4c:	e942 5502 	strd	r5, r5, [r2, #-8]
   86b50:	3210      	adds	r2, #16
   86b52:	42ba      	cmp	r2, r7
   86b54:	d1f8      	bne.n	86b48 <memset+0x44>
   86b56:	1c72      	adds	r2, r6, #1
   86b58:	f014 0f0c 	tst.w	r4, #12
   86b5c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   86b60:	f004 060f 	and.w	r6, r4, #15
   86b64:	d013      	beq.n	86b8e <memset+0x8a>
   86b66:	1f33      	subs	r3, r6, #4
   86b68:	f023 0303 	bic.w	r3, r3, #3
   86b6c:	3304      	adds	r3, #4
   86b6e:	4413      	add	r3, r2
   86b70:	f842 5b04 	str.w	r5, [r2], #4
   86b74:	4293      	cmp	r3, r2
   86b76:	d1fb      	bne.n	86b70 <memset+0x6c>
   86b78:	f006 0403 	and.w	r4, r6, #3
   86b7c:	b12c      	cbz	r4, 86b8a <memset+0x86>
   86b7e:	b2ca      	uxtb	r2, r1
   86b80:	441c      	add	r4, r3
   86b82:	f803 2b01 	strb.w	r2, [r3], #1
   86b86:	429c      	cmp	r4, r3
   86b88:	d1fb      	bne.n	86b82 <memset+0x7e>
   86b8a:	bcf0      	pop	{r4, r5, r6, r7}
   86b8c:	4770      	bx	lr
   86b8e:	4634      	mov	r4, r6
   86b90:	4613      	mov	r3, r2
   86b92:	2c00      	cmp	r4, #0
   86b94:	d1f3      	bne.n	86b7e <memset+0x7a>
   86b96:	e7f8      	b.n	86b8a <memset+0x86>
   86b98:	4614      	mov	r4, r2
   86b9a:	4603      	mov	r3, r0
   86b9c:	e7c1      	b.n	86b22 <memset+0x1e>
   86b9e:	461a      	mov	r2, r3
   86ba0:	4626      	mov	r6, r4
   86ba2:	e7e0      	b.n	86b66 <memset+0x62>

00086ba4 <sprintf>:
   86ba4:	b40e      	push	{r1, r2, r3}
   86ba6:	4601      	mov	r1, r0
   86ba8:	b530      	push	{r4, r5, lr}
   86baa:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   86bae:	b09c      	sub	sp, #112	; 0x70
   86bb0:	ab1f      	add	r3, sp, #124	; 0x7c
   86bb2:	480b      	ldr	r0, [pc, #44]	; (86be0 <sprintf+0x3c>)
   86bb4:	f853 2b04 	ldr.w	r2, [r3], #4
   86bb8:	4d0a      	ldr	r5, [pc, #40]	; (86be4 <sprintf+0x40>)
   86bba:	9102      	str	r1, [sp, #8]
   86bbc:	9106      	str	r1, [sp, #24]
   86bbe:	6800      	ldr	r0, [r0, #0]
   86bc0:	a902      	add	r1, sp, #8
   86bc2:	9301      	str	r3, [sp, #4]
   86bc4:	e9cd 4504 	strd	r4, r5, [sp, #16]
   86bc8:	9407      	str	r4, [sp, #28]
   86bca:	f000 f80d 	bl	86be8 <_svfprintf_r>
   86bce:	2200      	movs	r2, #0
   86bd0:	9b02      	ldr	r3, [sp, #8]
   86bd2:	701a      	strb	r2, [r3, #0]
   86bd4:	b01c      	add	sp, #112	; 0x70
   86bd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   86bda:	b003      	add	sp, #12
   86bdc:	4770      	bx	lr
   86bde:	bf00      	nop
   86be0:	20000440 	.word	0x20000440
   86be4:	ffff0208 	.word	0xffff0208

00086be8 <_svfprintf_r>:
   86be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86bec:	b0d7      	sub	sp, #348	; 0x15c
   86bee:	468b      	mov	fp, r1
   86bf0:	4617      	mov	r7, r2
   86bf2:	930e      	str	r3, [sp, #56]	; 0x38
   86bf4:	4681      	mov	r9, r0
   86bf6:	f004 f9e1 	bl	8afbc <_localeconv_r>
   86bfa:	6803      	ldr	r3, [r0, #0]
   86bfc:	4618      	mov	r0, r3
   86bfe:	9318      	str	r3, [sp, #96]	; 0x60
   86c00:	f005 fbd6 	bl	8c3b0 <strlen>
   86c04:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   86c08:	9017      	str	r0, [sp, #92]	; 0x5c
   86c0a:	061d      	lsls	r5, r3, #24
   86c0c:	d504      	bpl.n	86c18 <_svfprintf_r+0x30>
   86c0e:	f8db 3010 	ldr.w	r3, [fp, #16]
   86c12:	2b00      	cmp	r3, #0
   86c14:	f000 87df 	beq.w	87bd6 <_svfprintf_r+0xfee>
   86c18:	2300      	movs	r3, #0
   86c1a:	2100      	movs	r1, #0
   86c1c:	2200      	movs	r2, #0
   86c1e:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
   86c22:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
   86c26:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
   86c2a:	9313      	str	r3, [sp, #76]	; 0x4c
   86c2c:	9319      	str	r3, [sp, #100]	; 0x64
   86c2e:	930a      	str	r3, [sp, #40]	; 0x28
   86c30:	ab2d      	add	r3, sp, #180	; 0xb4
   86c32:	4698      	mov	r8, r3
   86c34:	932a      	str	r3, [sp, #168]	; 0xa8
   86c36:	783b      	ldrb	r3, [r7, #0]
   86c38:	46da      	mov	sl, fp
   86c3a:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   86c3e:	2b00      	cmp	r3, #0
   86c40:	f000 81a4 	beq.w	86f8c <_svfprintf_r+0x3a4>
   86c44:	463c      	mov	r4, r7
   86c46:	e004      	b.n	86c52 <_svfprintf_r+0x6a>
   86c48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   86c4c:	2b00      	cmp	r3, #0
   86c4e:	f000 80fd 	beq.w	86e4c <_svfprintf_r+0x264>
   86c52:	2b25      	cmp	r3, #37	; 0x25
   86c54:	d1f8      	bne.n	86c48 <_svfprintf_r+0x60>
   86c56:	1be5      	subs	r5, r4, r7
   86c58:	f040 80fb 	bne.w	86e52 <_svfprintf_r+0x26a>
   86c5c:	7823      	ldrb	r3, [r4, #0]
   86c5e:	2b00      	cmp	r3, #0
   86c60:	f000 8194 	beq.w	86f8c <_svfprintf_r+0x3a4>
   86c64:	2300      	movs	r3, #0
   86c66:	930b      	str	r3, [sp, #44]	; 0x2c
   86c68:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   86c6c:	9307      	str	r3, [sp, #28]
   86c6e:	f04f 33ff 	mov.w	r3, #4294967295
   86c72:	7866      	ldrb	r6, [r4, #1]
   86c74:	f104 0b01 	add.w	fp, r4, #1
   86c78:	2120      	movs	r1, #32
   86c7a:	242b      	movs	r4, #43	; 0x2b
   86c7c:	9309      	str	r3, [sp, #36]	; 0x24
   86c7e:	f10b 0b01 	add.w	fp, fp, #1
   86c82:	f1a6 0320 	sub.w	r3, r6, #32
   86c86:	2b5a      	cmp	r3, #90	; 0x5a
   86c88:	f200 80ff 	bhi.w	86e8a <_svfprintf_r+0x2a2>
   86c8c:	e8df f013 	tbh	[pc, r3, lsl #1]
   86c90:	00fd02bc 	.word	0x00fd02bc
   86c94:	02b500fd 	.word	0x02b500fd
   86c98:	00fd00fd 	.word	0x00fd00fd
   86c9c:	029100fd 	.word	0x029100fd
   86ca0:	00fd00fd 	.word	0x00fd00fd
   86ca4:	02e7006a 	.word	0x02e7006a
   86ca8:	023400fd 	.word	0x023400fd
   86cac:	00fd02cd 	.word	0x00fd02cd
   86cb0:	005b02c6 	.word	0x005b02c6
   86cb4:	005b005b 	.word	0x005b005b
   86cb8:	005b005b 	.word	0x005b005b
   86cbc:	005b005b 	.word	0x005b005b
   86cc0:	005b005b 	.word	0x005b005b
   86cc4:	00fd00fd 	.word	0x00fd00fd
   86cc8:	00fd00fd 	.word	0x00fd00fd
   86ccc:	00fd00fd 	.word	0x00fd00fd
   86cd0:	019000fd 	.word	0x019000fd
   86cd4:	01f700fd 	.word	0x01f700fd
   86cd8:	0190007c 	.word	0x0190007c
   86cdc:	01900190 	.word	0x01900190
   86ce0:	00fd00fd 	.word	0x00fd00fd
   86ce4:	00fd00fd 	.word	0x00fd00fd
   86ce8:	00fd028a 	.word	0x00fd028a
   86cec:	00a900fd 	.word	0x00a900fd
   86cf0:	00fd00fd 	.word	0x00fd00fd
   86cf4:	020b00fd 	.word	0x020b00fd
   86cf8:	023b00fd 	.word	0x023b00fd
   86cfc:	00fd00fd 	.word	0x00fd00fd
   86d00:	00fd0781 	.word	0x00fd0781
   86d04:	00fd00fd 	.word	0x00fd00fd
   86d08:	00fd00fd 	.word	0x00fd00fd
   86d0c:	00fd00fd 	.word	0x00fd00fd
   86d10:	019000fd 	.word	0x019000fd
   86d14:	01f700fd 	.word	0x01f700fd
   86d18:	01900080 	.word	0x01900080
   86d1c:	01900190 	.word	0x01900190
   86d20:	00800280 	.word	0x00800280
   86d24:	00fd0075 	.word	0x00fd0075
   86d28:	00fd0276 	.word	0x00fd0276
   86d2c:	00ad025e 	.word	0x00ad025e
   86d30:	0075024c 	.word	0x0075024c
   86d34:	020b00fd 	.word	0x020b00fd
   86d38:	075b0072 	.word	0x075b0072
   86d3c:	00fd00fd 	.word	0x00fd00fd
   86d40:	00fd075f 	.word	0x00fd075f
   86d44:	0072      	.short	0x0072
   86d46:	2200      	movs	r2, #0
   86d48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86d4c:	f81b 6b01 	ldrb.w	r6, [fp], #1
   86d50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86d54:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86d58:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86d5c:	2b09      	cmp	r3, #9
   86d5e:	d9f5      	bls.n	86d4c <_svfprintf_r+0x164>
   86d60:	920b      	str	r2, [sp, #44]	; 0x2c
   86d62:	e78e      	b.n	86c82 <_svfprintf_r+0x9a>
   86d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86d66:	f853 2b04 	ldr.w	r2, [r3], #4
   86d6a:	2a00      	cmp	r2, #0
   86d6c:	920b      	str	r2, [sp, #44]	; 0x2c
   86d6e:	930e      	str	r3, [sp, #56]	; 0x38
   86d70:	f2c0 81bf 	blt.w	870f2 <_svfprintf_r+0x50a>
   86d74:	f89b 6000 	ldrb.w	r6, [fp]
   86d78:	e781      	b.n	86c7e <_svfprintf_r+0x96>
   86d7a:	9b07      	ldr	r3, [sp, #28]
   86d7c:	f89b 6000 	ldrb.w	r6, [fp]
   86d80:	f043 0320 	orr.w	r3, r3, #32
   86d84:	9307      	str	r3, [sp, #28]
   86d86:	e77a      	b.n	86c7e <_svfprintf_r+0x96>
   86d88:	9b07      	ldr	r3, [sp, #28]
   86d8a:	f043 0310 	orr.w	r3, r3, #16
   86d8e:	9307      	str	r3, [sp, #28]
   86d90:	9b07      	ldr	r3, [sp, #28]
   86d92:	069c      	lsls	r4, r3, #26
   86d94:	f140 8162 	bpl.w	8705c <_svfprintf_r+0x474>
   86d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86d9a:	3307      	adds	r3, #7
   86d9c:	f023 0307 	bic.w	r3, r3, #7
   86da0:	4619      	mov	r1, r3
   86da2:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86da6:	4614      	mov	r4, r2
   86da8:	461d      	mov	r5, r3
   86daa:	910e      	str	r1, [sp, #56]	; 0x38
   86dac:	2a00      	cmp	r2, #0
   86dae:	f173 0300 	sbcs.w	r3, r3, #0
   86db2:	f2c0 85ab 	blt.w	8790c <_svfprintf_r+0xd24>
   86db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86db8:	3301      	adds	r3, #1
   86dba:	9b07      	ldr	r3, [sp, #28]
   86dbc:	f000 8414 	beq.w	875e8 <_svfprintf_r+0xa00>
   86dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86dc4:	ea54 0205 	orrs.w	r2, r4, r5
   86dc8:	9308      	str	r3, [sp, #32]
   86dca:	f040 840e 	bne.w	875ea <_svfprintf_r+0xa02>
   86dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86dd0:	2a00      	cmp	r2, #0
   86dd2:	f040 840f 	bne.w	875f4 <_svfprintf_r+0xa0c>
   86dd6:	9307      	str	r3, [sp, #28]
   86dd8:	2300      	movs	r3, #0
   86dda:	af56      	add	r7, sp, #344	; 0x158
   86ddc:	9309      	str	r3, [sp, #36]	; 0x24
   86dde:	930c      	str	r3, [sp, #48]	; 0x30
   86de0:	e26b      	b.n	872ba <_svfprintf_r+0x6d2>
   86de2:	9b07      	ldr	r3, [sp, #28]
   86de4:	f043 0310 	orr.w	r3, r3, #16
   86de8:	9307      	str	r3, [sp, #28]
   86dea:	9b07      	ldr	r3, [sp, #28]
   86dec:	069a      	lsls	r2, r3, #26
   86dee:	f140 8126 	bpl.w	8703e <_svfprintf_r+0x456>
   86df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86df4:	3307      	adds	r3, #7
   86df6:	f023 0307 	bic.w	r3, r3, #7
   86dfa:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   86dfe:	930e      	str	r3, [sp, #56]	; 0x38
   86e00:	9b07      	ldr	r3, [sp, #28]
   86e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   86e06:	9308      	str	r3, [sp, #32]
   86e08:	2300      	movs	r3, #0
   86e0a:	2200      	movs	r2, #0
   86e0c:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   86e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
   86e12:	4611      	mov	r1, r2
   86e14:	3101      	adds	r1, #1
   86e16:	f000 8231 	beq.w	8727c <_svfprintf_r+0x694>
   86e1a:	9908      	ldr	r1, [sp, #32]
   86e1c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   86e20:	9107      	str	r1, [sp, #28]
   86e22:	ea54 0105 	orrs.w	r1, r4, r5
   86e26:	f040 8227 	bne.w	87278 <_svfprintf_r+0x690>
   86e2a:	2a00      	cmp	r2, #0
   86e2c:	f040 837d 	bne.w	8752a <_svfprintf_r+0x942>
   86e30:	2b00      	cmp	r3, #0
   86e32:	d1d1      	bne.n	86dd8 <_svfprintf_r+0x1f0>
   86e34:	9b08      	ldr	r3, [sp, #32]
   86e36:	f013 0301 	ands.w	r3, r3, #1
   86e3a:	930c      	str	r3, [sp, #48]	; 0x30
   86e3c:	f000 8590 	beq.w	87960 <_svfprintf_r+0xd78>
   86e40:	2330      	movs	r3, #48	; 0x30
   86e42:	f20d 1757 	addw	r7, sp, #343	; 0x157
   86e46:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   86e4a:	e236      	b.n	872ba <_svfprintf_r+0x6d2>
   86e4c:	1be5      	subs	r5, r4, r7
   86e4e:	f000 809d 	beq.w	86f8c <_svfprintf_r+0x3a4>
   86e52:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   86e56:	3301      	adds	r3, #1
   86e58:	442a      	add	r2, r5
   86e5a:	2b07      	cmp	r3, #7
   86e5c:	e9c8 7500 	strd	r7, r5, [r8]
   86e60:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   86e64:	dc06      	bgt.n	86e74 <_svfprintf_r+0x28c>
   86e66:	f108 0808 	add.w	r8, r8, #8
   86e6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   86e6c:	7823      	ldrb	r3, [r4, #0]
   86e6e:	442a      	add	r2, r5
   86e70:	920a      	str	r2, [sp, #40]	; 0x28
   86e72:	e6f4      	b.n	86c5e <_svfprintf_r+0x76>
   86e74:	4651      	mov	r1, sl
   86e76:	4648      	mov	r0, r9
   86e78:	aa2a      	add	r2, sp, #168	; 0xa8
   86e7a:	f005 fafb 	bl	8c474 <__ssprint_r>
   86e7e:	2800      	cmp	r0, #0
   86e80:	f041 83ce 	bne.w	88620 <_svfprintf_r+0x1a38>
   86e84:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86e88:	e7ef      	b.n	86e6a <_svfprintf_r+0x282>
   86e8a:	2e00      	cmp	r6, #0
   86e8c:	d07e      	beq.n	86f8c <_svfprintf_r+0x3a4>
   86e8e:	2300      	movs	r3, #0
   86e90:	2101      	movs	r1, #1
   86e92:	461a      	mov	r2, r3
   86e94:	9108      	str	r1, [sp, #32]
   86e96:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
   86e9a:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   86e9e:	930d      	str	r3, [sp, #52]	; 0x34
   86ea0:	9309      	str	r3, [sp, #36]	; 0x24
   86ea2:	9312      	str	r3, [sp, #72]	; 0x48
   86ea4:	9316      	str	r3, [sp, #88]	; 0x58
   86ea6:	9310      	str	r3, [sp, #64]	; 0x40
   86ea8:	910c      	str	r1, [sp, #48]	; 0x30
   86eaa:	af3d      	add	r7, sp, #244	; 0xf4
   86eac:	9b07      	ldr	r3, [sp, #28]
   86eae:	f013 0302 	ands.w	r3, r3, #2
   86eb2:	d002      	beq.n	86eba <_svfprintf_r+0x2d2>
   86eb4:	9908      	ldr	r1, [sp, #32]
   86eb6:	3102      	adds	r1, #2
   86eb8:	9108      	str	r1, [sp, #32]
   86eba:	9907      	ldr	r1, [sp, #28]
   86ebc:	f011 0184 	ands.w	r1, r1, #132	; 0x84
   86ec0:	910f      	str	r1, [sp, #60]	; 0x3c
   86ec2:	d105      	bne.n	86ed0 <_svfprintf_r+0x2e8>
   86ec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86ec6:	9808      	ldr	r0, [sp, #32]
   86ec8:	1a0d      	subs	r5, r1, r0
   86eca:	2d00      	cmp	r5, #0
   86ecc:	f300 834b 	bgt.w	87566 <_svfprintf_r+0x97e>
   86ed0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   86ed2:	b172      	cbz	r2, 86ef2 <_svfprintf_r+0x30a>
   86ed4:	2001      	movs	r0, #1
   86ed6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   86ed8:	4404      	add	r4, r0
   86eda:	4402      	add	r2, r0
   86edc:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   86ee0:	2a07      	cmp	r2, #7
   86ee2:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   86ee6:	e9c8 1000 	strd	r1, r0, [r8]
   86eea:	f300 83cd 	bgt.w	87688 <_svfprintf_r+0xaa0>
   86eee:	f108 0808 	add.w	r8, r8, #8
   86ef2:	b16b      	cbz	r3, 86f10 <_svfprintf_r+0x328>
   86ef4:	2102      	movs	r1, #2
   86ef6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86ef8:	440c      	add	r4, r1
   86efa:	3301      	adds	r3, #1
   86efc:	aa23      	add	r2, sp, #140	; 0x8c
   86efe:	2b07      	cmp	r3, #7
   86f00:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   86f04:	e9c8 2100 	strd	r2, r1, [r8]
   86f08:	f300 83cc 	bgt.w	876a4 <_svfprintf_r+0xabc>
   86f0c:	f108 0808 	add.w	r8, r8, #8
   86f10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86f12:	2b80      	cmp	r3, #128	; 0x80
   86f14:	f000 8234 	beq.w	87380 <_svfprintf_r+0x798>
   86f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86f1c:	1a9d      	subs	r5, r3, r2
   86f1e:	2d00      	cmp	r5, #0
   86f20:	f300 826e 	bgt.w	87400 <_svfprintf_r+0x818>
   86f24:	9b07      	ldr	r3, [sp, #28]
   86f26:	05d9      	lsls	r1, r3, #23
   86f28:	f100 81d5 	bmi.w	872d6 <_svfprintf_r+0x6ee>
   86f2c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   86f2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86f30:	3301      	adds	r3, #1
   86f32:	4414      	add	r4, r2
   86f34:	2b07      	cmp	r3, #7
   86f36:	e9c8 7200 	strd	r7, r2, [r8]
   86f3a:	942c      	str	r4, [sp, #176]	; 0xb0
   86f3c:	932b      	str	r3, [sp, #172]	; 0xac
   86f3e:	f300 8397 	bgt.w	87670 <_svfprintf_r+0xa88>
   86f42:	f108 0808 	add.w	r8, r8, #8
   86f46:	9b07      	ldr	r3, [sp, #28]
   86f48:	0759      	lsls	r1, r3, #29
   86f4a:	d505      	bpl.n	86f58 <_svfprintf_r+0x370>
   86f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86f4e:	9a08      	ldr	r2, [sp, #32]
   86f50:	1a9d      	subs	r5, r3, r2
   86f52:	2d00      	cmp	r5, #0
   86f54:	f300 83b2 	bgt.w	876bc <_svfprintf_r+0xad4>
   86f58:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   86f5c:	9908      	ldr	r1, [sp, #32]
   86f5e:	428a      	cmp	r2, r1
   86f60:	bfac      	ite	ge
   86f62:	189b      	addge	r3, r3, r2
   86f64:	185b      	addlt	r3, r3, r1
   86f66:	930a      	str	r3, [sp, #40]	; 0x28
   86f68:	2c00      	cmp	r4, #0
   86f6a:	f040 827d 	bne.w	87468 <_svfprintf_r+0x880>
   86f6e:	2300      	movs	r3, #0
   86f70:	932b      	str	r3, [sp, #172]	; 0xac
   86f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86f74:	b11b      	cbz	r3, 86f7e <_svfprintf_r+0x396>
   86f76:	4648      	mov	r0, r9
   86f78:	990d      	ldr	r1, [sp, #52]	; 0x34
   86f7a:	f003 fd79 	bl	8aa70 <_free_r>
   86f7e:	465f      	mov	r7, fp
   86f80:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   86f84:	783b      	ldrb	r3, [r7, #0]
   86f86:	2b00      	cmp	r3, #0
   86f88:	f47f ae5c 	bne.w	86c44 <_svfprintf_r+0x5c>
   86f8c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   86f8e:	46d3      	mov	fp, sl
   86f90:	2b00      	cmp	r3, #0
   86f92:	f041 824b 	bne.w	8842c <_svfprintf_r+0x1844>
   86f96:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   86f9a:	f013 0f40 	tst.w	r3, #64	; 0x40
   86f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   86fa0:	bf18      	it	ne
   86fa2:	f04f 33ff 	movne.w	r3, #4294967295
   86fa6:	930a      	str	r3, [sp, #40]	; 0x28
   86fa8:	980a      	ldr	r0, [sp, #40]	; 0x28
   86faa:	b057      	add	sp, #348	; 0x15c
   86fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86fb2:	3307      	adds	r3, #7
   86fb4:	f023 0307 	bic.w	r3, r3, #7
   86fb8:	4619      	mov	r1, r3
   86fba:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   86fbe:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   86fc2:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   86fc6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   86fca:	461d      	mov	r5, r3
   86fcc:	4618      	mov	r0, r3
   86fce:	910e      	str	r1, [sp, #56]	; 0x38
   86fd0:	f04f 32ff 	mov.w	r2, #4294967295
   86fd4:	4621      	mov	r1, r4
   86fd6:	4ba4      	ldr	r3, [pc, #656]	; (87268 <_svfprintf_r+0x680>)
   86fd8:	f006 f980 	bl	8d2dc <__aeabi_dcmpun>
   86fdc:	2800      	cmp	r0, #0
   86fde:	f040 84d9 	bne.w	87994 <_svfprintf_r+0xdac>
   86fe2:	4628      	mov	r0, r5
   86fe4:	4621      	mov	r1, r4
   86fe6:	f04f 32ff 	mov.w	r2, #4294967295
   86fea:	4b9f      	ldr	r3, [pc, #636]	; (87268 <_svfprintf_r+0x680>)
   86fec:	f006 f958 	bl	8d2a0 <__aeabi_dcmple>
   86ff0:	2800      	cmp	r0, #0
   86ff2:	f040 84cf 	bne.w	87994 <_svfprintf_r+0xdac>
   86ff6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86ffa:	2200      	movs	r2, #0
   86ffc:	2300      	movs	r3, #0
   86ffe:	f006 f945 	bl	8d28c <__aeabi_dcmplt>
   87002:	2800      	cmp	r0, #0
   87004:	f041 800e 	bne.w	88024 <_svfprintf_r+0x143c>
   87008:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8700c:	2003      	movs	r0, #3
   8700e:	2100      	movs	r1, #0
   87010:	4f96      	ldr	r7, [pc, #600]	; (8726c <_svfprintf_r+0x684>)
   87012:	4b97      	ldr	r3, [pc, #604]	; (87270 <_svfprintf_r+0x688>)
   87014:	9008      	str	r0, [sp, #32]
   87016:	910d      	str	r1, [sp, #52]	; 0x34
   87018:	2e47      	cmp	r6, #71	; 0x47
   8701a:	bfc8      	it	gt
   8701c:	461f      	movgt	r7, r3
   8701e:	9c07      	ldr	r4, [sp, #28]
   87020:	900c      	str	r0, [sp, #48]	; 0x30
   87022:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   87026:	9407      	str	r4, [sp, #28]
   87028:	9109      	str	r1, [sp, #36]	; 0x24
   8702a:	9112      	str	r1, [sp, #72]	; 0x48
   8702c:	9116      	str	r1, [sp, #88]	; 0x58
   8702e:	9110      	str	r1, [sp, #64]	; 0x40
   87030:	2a00      	cmp	r2, #0
   87032:	f43f af3b 	beq.w	86eac <_svfprintf_r+0x2c4>
   87036:	9b08      	ldr	r3, [sp, #32]
   87038:	3301      	adds	r3, #1
   8703a:	9308      	str	r3, [sp, #32]
   8703c:	e736      	b.n	86eac <_svfprintf_r+0x2c4>
   8703e:	9b07      	ldr	r3, [sp, #28]
   87040:	06db      	lsls	r3, r3, #27
   87042:	f100 849c 	bmi.w	8797e <_svfprintf_r+0xd96>
   87046:	9b07      	ldr	r3, [sp, #28]
   87048:	065f      	lsls	r7, r3, #25
   8704a:	f140 87b2 	bpl.w	87fb2 <_svfprintf_r+0x13ca>
   8704e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87050:	2500      	movs	r5, #0
   87052:	f853 4b04 	ldr.w	r4, [r3], #4
   87056:	930e      	str	r3, [sp, #56]	; 0x38
   87058:	b2a4      	uxth	r4, r4
   8705a:	e6d1      	b.n	86e00 <_svfprintf_r+0x218>
   8705c:	9b07      	ldr	r3, [sp, #28]
   8705e:	06d8      	lsls	r0, r3, #27
   87060:	f100 8568 	bmi.w	87b34 <_svfprintf_r+0xf4c>
   87064:	9b07      	ldr	r3, [sp, #28]
   87066:	0659      	lsls	r1, r3, #25
   87068:	f140 87be 	bpl.w	87fe8 <_svfprintf_r+0x1400>
   8706c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8706e:	f853 4b04 	ldr.w	r4, [r3], #4
   87072:	b224      	sxth	r4, r4
   87074:	17e5      	asrs	r5, r4, #31
   87076:	930e      	str	r3, [sp, #56]	; 0x38
   87078:	4622      	mov	r2, r4
   8707a:	462b      	mov	r3, r5
   8707c:	e696      	b.n	86dac <_svfprintf_r+0x1c4>
   8707e:	2100      	movs	r1, #0
   87080:	2401      	movs	r4, #1
   87082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87084:	460a      	mov	r2, r1
   87086:	f853 0b04 	ldr.w	r0, [r3], #4
   8708a:	9408      	str	r4, [sp, #32]
   8708c:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   87090:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   87094:	f88d 00f4 	strb.w	r0, [sp, #244]	; 0xf4
   87098:	9109      	str	r1, [sp, #36]	; 0x24
   8709a:	9112      	str	r1, [sp, #72]	; 0x48
   8709c:	9116      	str	r1, [sp, #88]	; 0x58
   8709e:	9110      	str	r1, [sp, #64]	; 0x40
   870a0:	940c      	str	r4, [sp, #48]	; 0x30
   870a2:	af3d      	add	r7, sp, #244	; 0xf4
   870a4:	e702      	b.n	86eac <_svfprintf_r+0x2c4>
   870a6:	2500      	movs	r5, #0
   870a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   870aa:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
   870ae:	f854 7b04 	ldr.w	r7, [r4], #4
   870b2:	2f00      	cmp	r7, #0
   870b4:	f000 859f 	beq.w	87bf6 <_svfprintf_r+0x100e>
   870b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   870ba:	4613      	mov	r3, r2
   870bc:	3301      	adds	r3, #1
   870be:	f000 8770 	beq.w	87fa2 <_svfprintf_r+0x13ba>
   870c2:	4629      	mov	r1, r5
   870c4:	4638      	mov	r0, r7
   870c6:	f004 fac1 	bl	8b64c <memchr>
   870ca:	900d      	str	r0, [sp, #52]	; 0x34
   870cc:	2800      	cmp	r0, #0
   870ce:	f001 80b9 	beq.w	88244 <_svfprintf_r+0x165c>
   870d2:	462b      	mov	r3, r5
   870d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   870d6:	9509      	str	r5, [sp, #36]	; 0x24
   870d8:	1bd2      	subs	r2, r2, r7
   870da:	920c      	str	r2, [sp, #48]	; 0x30
   870dc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   870e0:	9208      	str	r2, [sp, #32]
   870e2:	940e      	str	r4, [sp, #56]	; 0x38
   870e4:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   870e8:	930d      	str	r3, [sp, #52]	; 0x34
   870ea:	9312      	str	r3, [sp, #72]	; 0x48
   870ec:	9316      	str	r3, [sp, #88]	; 0x58
   870ee:	9310      	str	r3, [sp, #64]	; 0x40
   870f0:	e79e      	b.n	87030 <_svfprintf_r+0x448>
   870f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   870f4:	425b      	negs	r3, r3
   870f6:	930b      	str	r3, [sp, #44]	; 0x2c
   870f8:	9b07      	ldr	r3, [sp, #28]
   870fa:	f89b 6000 	ldrb.w	r6, [fp]
   870fe:	f043 0304 	orr.w	r3, r3, #4
   87102:	9307      	str	r3, [sp, #28]
   87104:	e5bb      	b.n	86c7e <_svfprintf_r+0x96>
   87106:	9b07      	ldr	r3, [sp, #28]
   87108:	f043 0310 	orr.w	r3, r3, #16
   8710c:	9308      	str	r3, [sp, #32]
   8710e:	9b08      	ldr	r3, [sp, #32]
   87110:	069d      	lsls	r5, r3, #26
   87112:	f140 83ea 	bpl.w	878ea <_svfprintf_r+0xd02>
   87116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87118:	3307      	adds	r3, #7
   8711a:	f023 0307 	bic.w	r3, r3, #7
   8711e:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87122:	930e      	str	r3, [sp, #56]	; 0x38
   87124:	2301      	movs	r3, #1
   87126:	e670      	b.n	86e0a <_svfprintf_r+0x222>
   87128:	f647 0230 	movw	r2, #30768	; 0x7830
   8712c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8712e:	9907      	ldr	r1, [sp, #28]
   87130:	f853 4b04 	ldr.w	r4, [r3], #4
   87134:	f041 0102 	orr.w	r1, r1, #2
   87138:	930e      	str	r3, [sp, #56]	; 0x38
   8713a:	4b4e      	ldr	r3, [pc, #312]	; (87274 <_svfprintf_r+0x68c>)
   8713c:	2500      	movs	r5, #0
   8713e:	9319      	str	r3, [sp, #100]	; 0x64
   87140:	2678      	movs	r6, #120	; 0x78
   87142:	2302      	movs	r3, #2
   87144:	9108      	str	r1, [sp, #32]
   87146:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
   8714a:	e65e      	b.n	86e0a <_svfprintf_r+0x222>
   8714c:	9b07      	ldr	r3, [sp, #28]
   8714e:	069d      	lsls	r5, r3, #26
   87150:	f100 8408 	bmi.w	87964 <_svfprintf_r+0xd7c>
   87154:	9b07      	ldr	r3, [sp, #28]
   87156:	06dc      	lsls	r4, r3, #27
   87158:	f100 86e1 	bmi.w	87f1e <_svfprintf_r+0x1336>
   8715c:	9b07      	ldr	r3, [sp, #28]
   8715e:	0658      	lsls	r0, r3, #25
   87160:	f100 8795 	bmi.w	8808e <_svfprintf_r+0x14a6>
   87164:	9b07      	ldr	r3, [sp, #28]
   87166:	0599      	lsls	r1, r3, #22
   87168:	f140 86d9 	bpl.w	87f1e <_svfprintf_r+0x1336>
   8716c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8716e:	990a      	ldr	r1, [sp, #40]	; 0x28
   87170:	f853 2b04 	ldr.w	r2, [r3], #4
   87174:	465f      	mov	r7, fp
   87176:	7011      	strb	r1, [r2, #0]
   87178:	930e      	str	r3, [sp, #56]	; 0x38
   8717a:	e703      	b.n	86f84 <_svfprintf_r+0x39c>
   8717c:	f89b 6000 	ldrb.w	r6, [fp]
   87180:	9b07      	ldr	r3, [sp, #28]
   87182:	2e6c      	cmp	r6, #108	; 0x6c
   87184:	f000 8508 	beq.w	87b98 <_svfprintf_r+0xfb0>
   87188:	f043 0310 	orr.w	r3, r3, #16
   8718c:	9307      	str	r3, [sp, #28]
   8718e:	e576      	b.n	86c7e <_svfprintf_r+0x96>
   87190:	f89b 6000 	ldrb.w	r6, [fp]
   87194:	9b07      	ldr	r3, [sp, #28]
   87196:	2e68      	cmp	r6, #104	; 0x68
   87198:	f000 8507 	beq.w	87baa <_svfprintf_r+0xfc2>
   8719c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   871a0:	9307      	str	r3, [sp, #28]
   871a2:	e56c      	b.n	86c7e <_svfprintf_r+0x96>
   871a4:	9b07      	ldr	r3, [sp, #28]
   871a6:	f89b 6000 	ldrb.w	r6, [fp]
   871aa:	f043 0308 	orr.w	r3, r3, #8
   871ae:	9307      	str	r3, [sp, #28]
   871b0:	e565      	b.n	86c7e <_svfprintf_r+0x96>
   871b2:	4648      	mov	r0, r9
   871b4:	f003 ff02 	bl	8afbc <_localeconv_r>
   871b8:	6843      	ldr	r3, [r0, #4]
   871ba:	4618      	mov	r0, r3
   871bc:	931c      	str	r3, [sp, #112]	; 0x70
   871be:	f005 f8f7 	bl	8c3b0 <strlen>
   871c2:	4603      	mov	r3, r0
   871c4:	4648      	mov	r0, r9
   871c6:	461d      	mov	r5, r3
   871c8:	931d      	str	r3, [sp, #116]	; 0x74
   871ca:	f003 fef7 	bl	8afbc <_localeconv_r>
   871ce:	6882      	ldr	r2, [r0, #8]
   871d0:	2120      	movs	r1, #32
   871d2:	921a      	str	r2, [sp, #104]	; 0x68
   871d4:	2d00      	cmp	r5, #0
   871d6:	f43f adcd 	beq.w	86d74 <_svfprintf_r+0x18c>
   871da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   871dc:	2b00      	cmp	r3, #0
   871de:	f43f adc9 	beq.w	86d74 <_svfprintf_r+0x18c>
   871e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   871e4:	781b      	ldrb	r3, [r3, #0]
   871e6:	2b00      	cmp	r3, #0
   871e8:	f43f adc4 	beq.w	86d74 <_svfprintf_r+0x18c>
   871ec:	9b07      	ldr	r3, [sp, #28]
   871ee:	f89b 6000 	ldrb.w	r6, [fp]
   871f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   871f6:	9307      	str	r3, [sp, #28]
   871f8:	e541      	b.n	86c7e <_svfprintf_r+0x96>
   871fa:	9b07      	ldr	r3, [sp, #28]
   871fc:	f89b 6000 	ldrb.w	r6, [fp]
   87200:	f043 0301 	orr.w	r3, r3, #1
   87204:	9307      	str	r3, [sp, #28]
   87206:	e53a      	b.n	86c7e <_svfprintf_r+0x96>
   87208:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   8720c:	2b00      	cmp	r3, #0
   8720e:	f47f adb1 	bne.w	86d74 <_svfprintf_r+0x18c>
   87212:	f89b 6000 	ldrb.w	r6, [fp]
   87216:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   8721a:	e530      	b.n	86c7e <_svfprintf_r+0x96>
   8721c:	9b07      	ldr	r3, [sp, #28]
   8721e:	f89b 6000 	ldrb.w	r6, [fp]
   87222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   87226:	9307      	str	r3, [sp, #28]
   87228:	e529      	b.n	86c7e <_svfprintf_r+0x96>
   8722a:	465a      	mov	r2, fp
   8722c:	f812 6b01 	ldrb.w	r6, [r2], #1
   87230:	2e2a      	cmp	r6, #42	; 0x2a
   87232:	f001 8251 	beq.w	886d8 <_svfprintf_r+0x1af0>
   87236:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8723a:	2b09      	cmp	r3, #9
   8723c:	4693      	mov	fp, r2
   8723e:	bf98      	it	ls
   87240:	2200      	movls	r2, #0
   87242:	f201 80ef 	bhi.w	88424 <_svfprintf_r+0x183c>
   87246:	f81b 6b01 	ldrb.w	r6, [fp], #1
   8724a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8724e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   87252:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87256:	2b09      	cmp	r3, #9
   87258:	d9f5      	bls.n	87246 <_svfprintf_r+0x65e>
   8725a:	9209      	str	r2, [sp, #36]	; 0x24
   8725c:	e511      	b.n	86c82 <_svfprintf_r+0x9a>
   8725e:	f89b 6000 	ldrb.w	r6, [fp]
   87262:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   87266:	e50a      	b.n	86c7e <_svfprintf_r+0x96>
   87268:	7fefffff 	.word	0x7fefffff
   8726c:	0008d41c 	.word	0x0008d41c
   87270:	0008d420 	.word	0x0008d420
   87274:	0008d42c 	.word	0x0008d42c
   87278:	9a07      	ldr	r2, [sp, #28]
   8727a:	9208      	str	r2, [sp, #32]
   8727c:	2b01      	cmp	r3, #1
   8727e:	f000 81b4 	beq.w	875ea <_svfprintf_r+0xa02>
   87282:	2b02      	cmp	r3, #2
   87284:	f000 8159 	beq.w	8753a <_svfprintf_r+0x952>
   87288:	af56      	add	r7, sp, #344	; 0x158
   8728a:	08e2      	lsrs	r2, r4, #3
   8728c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   87290:	08e9      	lsrs	r1, r5, #3
   87292:	f004 0307 	and.w	r3, r4, #7
   87296:	460d      	mov	r5, r1
   87298:	4614      	mov	r4, r2
   8729a:	3330      	adds	r3, #48	; 0x30
   8729c:	ea54 0105 	orrs.w	r1, r4, r5
   872a0:	463a      	mov	r2, r7
   872a2:	f807 3d01 	strb.w	r3, [r7, #-1]!
   872a6:	d1f0      	bne.n	8728a <_svfprintf_r+0x6a2>
   872a8:	9908      	ldr	r1, [sp, #32]
   872aa:	4608      	mov	r0, r1
   872ac:	07c0      	lsls	r0, r0, #31
   872ae:	f100 82b8 	bmi.w	87822 <_svfprintf_r+0xc3a>
   872b2:	ab56      	add	r3, sp, #344	; 0x158
   872b4:	1bdb      	subs	r3, r3, r7
   872b6:	9107      	str	r1, [sp, #28]
   872b8:	930c      	str	r3, [sp, #48]	; 0x30
   872ba:	2300      	movs	r3, #0
   872bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   872be:	930d      	str	r3, [sp, #52]	; 0x34
   872c0:	9312      	str	r3, [sp, #72]	; 0x48
   872c2:	9316      	str	r3, [sp, #88]	; 0x58
   872c4:	9310      	str	r3, [sp, #64]	; 0x40
   872c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   872c8:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   872cc:	428b      	cmp	r3, r1
   872ce:	bfb8      	it	lt
   872d0:	460b      	movlt	r3, r1
   872d2:	9308      	str	r3, [sp, #32]
   872d4:	e6ac      	b.n	87030 <_svfprintf_r+0x448>
   872d6:	2e65      	cmp	r6, #101	; 0x65
   872d8:	f340 80d8 	ble.w	8748c <_svfprintf_r+0x8a4>
   872dc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   872e0:	2200      	movs	r2, #0
   872e2:	2300      	movs	r3, #0
   872e4:	f005 ffc8 	bl	8d278 <__aeabi_dcmpeq>
   872e8:	2800      	cmp	r0, #0
   872ea:	f000 821e 	beq.w	8772a <_svfprintf_r+0xb42>
   872ee:	2101      	movs	r1, #1
   872f0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   872f2:	4ac5      	ldr	r2, [pc, #788]	; (87608 <_svfprintf_r+0xa20>)
   872f4:	440b      	add	r3, r1
   872f6:	440c      	add	r4, r1
   872f8:	2b07      	cmp	r3, #7
   872fa:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   872fe:	e9c8 2100 	strd	r2, r1, [r8]
   87302:	f300 85bb 	bgt.w	87e7c <_svfprintf_r+0x1294>
   87306:	f108 0808 	add.w	r8, r8, #8
   8730a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8730c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8730e:	4293      	cmp	r3, r2
   87310:	f280 8321 	bge.w	87956 <_svfprintf_r+0xd6e>
   87314:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87316:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87318:	3301      	adds	r3, #1
   8731a:	9918      	ldr	r1, [sp, #96]	; 0x60
   8731c:	4414      	add	r4, r2
   8731e:	2b07      	cmp	r3, #7
   87320:	e9c8 1200 	strd	r1, r2, [r8]
   87324:	942c      	str	r4, [sp, #176]	; 0xb0
   87326:	932b      	str	r3, [sp, #172]	; 0xac
   87328:	f300 8448 	bgt.w	87bbc <_svfprintf_r+0xfd4>
   8732c:	f108 0808 	add.w	r8, r8, #8
   87330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87332:	1e5d      	subs	r5, r3, #1
   87334:	2d00      	cmp	r5, #0
   87336:	f77f ae06 	ble.w	86f46 <_svfprintf_r+0x35e>
   8733a:	2d10      	cmp	r5, #16
   8733c:	f340 85c7 	ble.w	87ece <_svfprintf_r+0x12e6>
   87340:	4fb2      	ldr	r7, [pc, #712]	; (8760c <_svfprintf_r+0xa24>)
   87342:	2610      	movs	r6, #16
   87344:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87346:	970f      	str	r7, [sp, #60]	; 0x3c
   87348:	e005      	b.n	87356 <_svfprintf_r+0x76e>
   8734a:	f108 0808 	add.w	r8, r8, #8
   8734e:	3d10      	subs	r5, #16
   87350:	2d10      	cmp	r5, #16
   87352:	f340 85bf 	ble.w	87ed4 <_svfprintf_r+0x12ec>
   87356:	3301      	adds	r3, #1
   87358:	3410      	adds	r4, #16
   8735a:	2b07      	cmp	r3, #7
   8735c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87360:	e9c8 7600 	strd	r7, r6, [r8]
   87364:	ddf1      	ble.n	8734a <_svfprintf_r+0x762>
   87366:	4651      	mov	r1, sl
   87368:	4648      	mov	r0, r9
   8736a:	aa2a      	add	r2, sp, #168	; 0xa8
   8736c:	f005 f882 	bl	8c474 <__ssprint_r>
   87370:	2800      	cmp	r0, #0
   87372:	f040 8081 	bne.w	87478 <_svfprintf_r+0x890>
   87376:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   8737a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8737e:	e7e6      	b.n	8734e <_svfprintf_r+0x766>
   87380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87382:	9a08      	ldr	r2, [sp, #32]
   87384:	1a9d      	subs	r5, r3, r2
   87386:	2d00      	cmp	r5, #0
   87388:	f77f adc6 	ble.w	86f18 <_svfprintf_r+0x330>
   8738c:	2d10      	cmp	r5, #16
   8738e:	f341 8069 	ble.w	88464 <_svfprintf_r+0x187c>
   87392:	489e      	ldr	r0, [pc, #632]	; (8760c <_svfprintf_r+0xa24>)
   87394:	4621      	mov	r1, r4
   87396:	2310      	movs	r3, #16
   87398:	4604      	mov	r4, r0
   8739a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8739c:	900f      	str	r0, [sp, #60]	; 0x3c
   8739e:	e004      	b.n	873aa <_svfprintf_r+0x7c2>
   873a0:	3d10      	subs	r5, #16
   873a2:	2d10      	cmp	r5, #16
   873a4:	f108 0808 	add.w	r8, r8, #8
   873a8:	dd17      	ble.n	873da <_svfprintf_r+0x7f2>
   873aa:	3201      	adds	r2, #1
   873ac:	3110      	adds	r1, #16
   873ae:	2a07      	cmp	r2, #7
   873b0:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   873b4:	e9c8 4300 	strd	r4, r3, [r8]
   873b8:	ddf2      	ble.n	873a0 <_svfprintf_r+0x7b8>
   873ba:	4651      	mov	r1, sl
   873bc:	4648      	mov	r0, r9
   873be:	aa2a      	add	r2, sp, #168	; 0xa8
   873c0:	f005 f858 	bl	8c474 <__ssprint_r>
   873c4:	2800      	cmp	r0, #0
   873c6:	d157      	bne.n	87478 <_svfprintf_r+0x890>
   873c8:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   873cc:	3d10      	subs	r5, #16
   873ce:	2d10      	cmp	r5, #16
   873d0:	f04f 0310 	mov.w	r3, #16
   873d4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   873d8:	dce7      	bgt.n	873aa <_svfprintf_r+0x7c2>
   873da:	460c      	mov	r4, r1
   873dc:	3201      	adds	r2, #1
   873de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   873e0:	442c      	add	r4, r5
   873e2:	2a07      	cmp	r2, #7
   873e4:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   873e8:	e9c8 3500 	strd	r3, r5, [r8]
   873ec:	f300 858a 	bgt.w	87f04 <_svfprintf_r+0x131c>
   873f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   873f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   873f4:	f108 0808 	add.w	r8, r8, #8
   873f8:	1a9d      	subs	r5, r3, r2
   873fa:	2d00      	cmp	r5, #0
   873fc:	f77f ad92 	ble.w	86f24 <_svfprintf_r+0x33c>
   87400:	2d10      	cmp	r5, #16
   87402:	f340 860a 	ble.w	8801a <_svfprintf_r+0x1432>
   87406:	4881      	ldr	r0, [pc, #516]	; (8760c <_svfprintf_r+0xa24>)
   87408:	4621      	mov	r1, r4
   8740a:	2310      	movs	r3, #16
   8740c:	4604      	mov	r4, r0
   8740e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   87410:	900f      	str	r0, [sp, #60]	; 0x3c
   87412:	e004      	b.n	8741e <_svfprintf_r+0x836>
   87414:	3d10      	subs	r5, #16
   87416:	2d10      	cmp	r5, #16
   87418:	f108 0808 	add.w	r8, r8, #8
   8741c:	dd16      	ble.n	8744c <_svfprintf_r+0x864>
   8741e:	3201      	adds	r2, #1
   87420:	3110      	adds	r1, #16
   87422:	2a07      	cmp	r2, #7
   87424:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   87428:	e9c8 4300 	strd	r4, r3, [r8]
   8742c:	ddf2      	ble.n	87414 <_svfprintf_r+0x82c>
   8742e:	4651      	mov	r1, sl
   87430:	4648      	mov	r0, r9
   87432:	aa2a      	add	r2, sp, #168	; 0xa8
   87434:	f005 f81e 	bl	8c474 <__ssprint_r>
   87438:	b9f0      	cbnz	r0, 87478 <_svfprintf_r+0x890>
   8743a:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   8743e:	3d10      	subs	r5, #16
   87440:	2d10      	cmp	r5, #16
   87442:	f04f 0310 	mov.w	r3, #16
   87446:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8744a:	dce8      	bgt.n	8741e <_svfprintf_r+0x836>
   8744c:	460c      	mov	r4, r1
   8744e:	3201      	adds	r2, #1
   87450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87452:	442c      	add	r4, r5
   87454:	2a07      	cmp	r2, #7
   87456:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   8745a:	e9c8 3500 	strd	r3, r5, [r8]
   8745e:	f300 8237 	bgt.w	878d0 <_svfprintf_r+0xce8>
   87462:	f108 0808 	add.w	r8, r8, #8
   87466:	e55d      	b.n	86f24 <_svfprintf_r+0x33c>
   87468:	4651      	mov	r1, sl
   8746a:	4648      	mov	r0, r9
   8746c:	aa2a      	add	r2, sp, #168	; 0xa8
   8746e:	f005 f801 	bl	8c474 <__ssprint_r>
   87472:	2800      	cmp	r0, #0
   87474:	f43f ad7b 	beq.w	86f6e <_svfprintf_r+0x386>
   87478:	46d3      	mov	fp, sl
   8747a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8747c:	2b00      	cmp	r3, #0
   8747e:	f43f ad8a 	beq.w	86f96 <_svfprintf_r+0x3ae>
   87482:	4648      	mov	r0, r9
   87484:	990d      	ldr	r1, [sp, #52]	; 0x34
   87486:	f003 faf3 	bl	8aa70 <_free_r>
   8748a:	e584      	b.n	86f96 <_svfprintf_r+0x3ae>
   8748c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8748e:	2b01      	cmp	r3, #1
   87490:	f340 81d5 	ble.w	8783e <_svfprintf_r+0xc56>
   87494:	2301      	movs	r3, #1
   87496:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   87498:	441c      	add	r4, r3
   8749a:	441d      	add	r5, r3
   8749c:	2d07      	cmp	r5, #7
   8749e:	942c      	str	r4, [sp, #176]	; 0xb0
   874a0:	f8c8 7000 	str.w	r7, [r8]
   874a4:	952b      	str	r5, [sp, #172]	; 0xac
   874a6:	f8c8 3004 	str.w	r3, [r8, #4]
   874aa:	f300 823a 	bgt.w	87922 <_svfprintf_r+0xd3a>
   874ae:	f108 0808 	add.w	r8, r8, #8
   874b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   874b4:	3501      	adds	r5, #1
   874b6:	9a18      	ldr	r2, [sp, #96]	; 0x60
   874b8:	441c      	add	r4, r3
   874ba:	2d07      	cmp	r5, #7
   874bc:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   874c0:	e9c8 2300 	strd	r2, r3, [r8]
   874c4:	f300 823a 	bgt.w	8793c <_svfprintf_r+0xd54>
   874c8:	f108 0808 	add.w	r8, r8, #8
   874cc:	2300      	movs	r3, #0
   874ce:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   874d2:	2200      	movs	r2, #0
   874d4:	f005 fed0 	bl	8d278 <__aeabi_dcmpeq>
   874d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   874da:	2800      	cmp	r0, #0
   874dc:	f040 81cd 	bne.w	8787a <_svfprintf_r+0xc92>
   874e0:	3b01      	subs	r3, #1
   874e2:	3501      	adds	r5, #1
   874e4:	3701      	adds	r7, #1
   874e6:	441c      	add	r4, r3
   874e8:	2d07      	cmp	r5, #7
   874ea:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   874ee:	f8c8 7000 	str.w	r7, [r8]
   874f2:	f8c8 3004 	str.w	r3, [r8, #4]
   874f6:	f300 84dc 	bgt.w	87eb2 <_svfprintf_r+0x12ca>
   874fa:	f108 0808 	add.w	r8, r8, #8
   874fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   87500:	3501      	adds	r5, #1
   87502:	4414      	add	r4, r2
   87504:	ab26      	add	r3, sp, #152	; 0x98
   87506:	2d07      	cmp	r5, #7
   87508:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   8750c:	e9c8 3200 	strd	r3, r2, [r8]
   87510:	f77f ad17 	ble.w	86f42 <_svfprintf_r+0x35a>
   87514:	4651      	mov	r1, sl
   87516:	4648      	mov	r0, r9
   87518:	aa2a      	add	r2, sp, #168	; 0xa8
   8751a:	f004 ffab 	bl	8c474 <__ssprint_r>
   8751e:	2800      	cmp	r0, #0
   87520:	d1aa      	bne.n	87478 <_svfprintf_r+0x890>
   87522:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87524:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87528:	e50d      	b.n	86f46 <_svfprintf_r+0x35e>
   8752a:	2b01      	cmp	r3, #1
   8752c:	f000 87ca 	beq.w	884c4 <_svfprintf_r+0x18dc>
   87530:	2b02      	cmp	r3, #2
   87532:	9b07      	ldr	r3, [sp, #28]
   87534:	9308      	str	r3, [sp, #32]
   87536:	f47f aea7 	bne.w	87288 <_svfprintf_r+0x6a0>
   8753a:	9819      	ldr	r0, [sp, #100]	; 0x64
   8753c:	af56      	add	r7, sp, #344	; 0x158
   8753e:	0923      	lsrs	r3, r4, #4
   87540:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   87544:	0929      	lsrs	r1, r5, #4
   87546:	f004 020f 	and.w	r2, r4, #15
   8754a:	460d      	mov	r5, r1
   8754c:	461c      	mov	r4, r3
   8754e:	5c83      	ldrb	r3, [r0, r2]
   87550:	f807 3d01 	strb.w	r3, [r7, #-1]!
   87554:	ea54 0305 	orrs.w	r3, r4, r5
   87558:	d1f1      	bne.n	8753e <_svfprintf_r+0x956>
   8755a:	9b08      	ldr	r3, [sp, #32]
   8755c:	9307      	str	r3, [sp, #28]
   8755e:	ab56      	add	r3, sp, #344	; 0x158
   87560:	1bdb      	subs	r3, r3, r7
   87562:	930c      	str	r3, [sp, #48]	; 0x30
   87564:	e6a9      	b.n	872ba <_svfprintf_r+0x6d2>
   87566:	2d10      	cmp	r5, #16
   87568:	f340 8668 	ble.w	8823c <_svfprintf_r+0x1654>
   8756c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   87570:	931e      	str	r3, [sp, #120]	; 0x78
   87572:	460b      	mov	r3, r1
   87574:	4639      	mov	r1, r7
   87576:	2410      	movs	r4, #16
   87578:	4637      	mov	r7, r6
   8757a:	4656      	mov	r6, sl
   8757c:	46ca      	mov	sl, r9
   8757e:	4689      	mov	r9, r1
   87580:	e004      	b.n	8758c <_svfprintf_r+0x9a4>
   87582:	3d10      	subs	r5, #16
   87584:	2d10      	cmp	r5, #16
   87586:	f108 0808 	add.w	r8, r8, #8
   8758a:	dd17      	ble.n	875bc <_svfprintf_r+0x9d4>
   8758c:	3201      	adds	r2, #1
   8758e:	4920      	ldr	r1, [pc, #128]	; (87610 <_svfprintf_r+0xa28>)
   87590:	3310      	adds	r3, #16
   87592:	2a07      	cmp	r2, #7
   87594:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
   87598:	e9c8 1400 	strd	r1, r4, [r8]
   8759c:	ddf1      	ble.n	87582 <_svfprintf_r+0x99a>
   8759e:	4631      	mov	r1, r6
   875a0:	4650      	mov	r0, sl
   875a2:	aa2a      	add	r2, sp, #168	; 0xa8
   875a4:	f004 ff66 	bl	8c474 <__ssprint_r>
   875a8:	2800      	cmp	r0, #0
   875aa:	f040 8458 	bne.w	87e5e <_svfprintf_r+0x1276>
   875ae:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
   875b2:	3d10      	subs	r5, #16
   875b4:	2d10      	cmp	r5, #16
   875b6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   875ba:	dce7      	bgt.n	8758c <_svfprintf_r+0x9a4>
   875bc:	4648      	mov	r0, r9
   875be:	46d1      	mov	r9, sl
   875c0:	46b2      	mov	sl, r6
   875c2:	463e      	mov	r6, r7
   875c4:	4607      	mov	r7, r0
   875c6:	4619      	mov	r1, r3
   875c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   875ca:	194c      	adds	r4, r1, r5
   875cc:	3201      	adds	r2, #1
   875ce:	4910      	ldr	r1, [pc, #64]	; (87610 <_svfprintf_r+0xa28>)
   875d0:	2a07      	cmp	r2, #7
   875d2:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   875d6:	e9c8 1500 	strd	r1, r5, [r8]
   875da:	f300 841f 	bgt.w	87e1c <_svfprintf_r+0x1234>
   875de:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   875e2:	f108 0808 	add.w	r8, r8, #8
   875e6:	e474      	b.n	86ed2 <_svfprintf_r+0x2ea>
   875e8:	9308      	str	r3, [sp, #32]
   875ea:	2d00      	cmp	r5, #0
   875ec:	bf08      	it	eq
   875ee:	2c0a      	cmpeq	r4, #10
   875f0:	f080 83d0 	bcs.w	87d94 <_svfprintf_r+0x11ac>
   875f4:	9b08      	ldr	r3, [sp, #32]
   875f6:	3430      	adds	r4, #48	; 0x30
   875f8:	9307      	str	r3, [sp, #28]
   875fa:	2301      	movs	r3, #1
   875fc:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   87600:	930c      	str	r3, [sp, #48]	; 0x30
   87602:	f20d 1757 	addw	r7, sp, #343	; 0x157
   87606:	e658      	b.n	872ba <_svfprintf_r+0x6d2>
   87608:	0008d45c 	.word	0x0008d45c
   8760c:	0008d470 	.word	0x0008d470
   87610:	0008d460 	.word	0x0008d460
   87614:	4651      	mov	r1, sl
   87616:	4648      	mov	r0, r9
   87618:	aa2a      	add	r2, sp, #168	; 0xa8
   8761a:	f004 ff2b 	bl	8c474 <__ssprint_r>
   8761e:	2800      	cmp	r0, #0
   87620:	f47f af2a 	bne.w	87478 <_svfprintf_r+0x890>
   87624:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87626:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87628:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8762c:	2a00      	cmp	r2, #0
   8762e:	f040 847f 	bne.w	87f30 <_svfprintf_r+0x1348>
   87632:	9b07      	ldr	r3, [sp, #28]
   87634:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87636:	f003 0301 	and.w	r3, r3, #1
   8763a:	4313      	orrs	r3, r2
   8763c:	f43f ac83 	beq.w	86f46 <_svfprintf_r+0x35e>
   87640:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87642:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87644:	3301      	adds	r3, #1
   87646:	9918      	ldr	r1, [sp, #96]	; 0x60
   87648:	4414      	add	r4, r2
   8764a:	2b07      	cmp	r3, #7
   8764c:	e9c8 1200 	strd	r1, r2, [r8]
   87650:	942c      	str	r4, [sp, #176]	; 0xb0
   87652:	932b      	str	r3, [sp, #172]	; 0xac
   87654:	f300 8524 	bgt.w	880a0 <_svfprintf_r+0x14b8>
   87658:	f108 0808 	add.w	r8, r8, #8
   8765c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8765e:	3301      	adds	r3, #1
   87660:	4414      	add	r4, r2
   87662:	2b07      	cmp	r3, #7
   87664:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87668:	e9c8 7200 	strd	r7, r2, [r8]
   8766c:	f77f ac69 	ble.w	86f42 <_svfprintf_r+0x35a>
   87670:	4651      	mov	r1, sl
   87672:	4648      	mov	r0, r9
   87674:	aa2a      	add	r2, sp, #168	; 0xa8
   87676:	f004 fefd 	bl	8c474 <__ssprint_r>
   8767a:	2800      	cmp	r0, #0
   8767c:	f47f aefc 	bne.w	87478 <_svfprintf_r+0x890>
   87680:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87682:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87686:	e45e      	b.n	86f46 <_svfprintf_r+0x35e>
   87688:	4651      	mov	r1, sl
   8768a:	4648      	mov	r0, r9
   8768c:	aa2a      	add	r2, sp, #168	; 0xa8
   8768e:	931e      	str	r3, [sp, #120]	; 0x78
   87690:	f004 fef0 	bl	8c474 <__ssprint_r>
   87694:	2800      	cmp	r0, #0
   87696:	f47f aeef 	bne.w	87478 <_svfprintf_r+0x890>
   8769a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8769c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8769e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   876a2:	e426      	b.n	86ef2 <_svfprintf_r+0x30a>
   876a4:	4651      	mov	r1, sl
   876a6:	4648      	mov	r0, r9
   876a8:	aa2a      	add	r2, sp, #168	; 0xa8
   876aa:	f004 fee3 	bl	8c474 <__ssprint_r>
   876ae:	2800      	cmp	r0, #0
   876b0:	f47f aee2 	bne.w	87478 <_svfprintf_r+0x890>
   876b4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   876b6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   876ba:	e429      	b.n	86f10 <_svfprintf_r+0x328>
   876bc:	2d10      	cmp	r5, #16
   876be:	f340 86be 	ble.w	8843e <_svfprintf_r+0x1856>
   876c2:	2610      	movs	r6, #16
   876c4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   876c6:	e004      	b.n	876d2 <_svfprintf_r+0xaea>
   876c8:	3d10      	subs	r5, #16
   876ca:	2d10      	cmp	r5, #16
   876cc:	f108 0808 	add.w	r8, r8, #8
   876d0:	dd17      	ble.n	87702 <_svfprintf_r+0xb1a>
   876d2:	3301      	adds	r3, #1
   876d4:	4aad      	ldr	r2, [pc, #692]	; (8798c <_svfprintf_r+0xda4>)
   876d6:	3410      	adds	r4, #16
   876d8:	2b07      	cmp	r3, #7
   876da:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   876de:	e9c8 2600 	strd	r2, r6, [r8]
   876e2:	ddf1      	ble.n	876c8 <_svfprintf_r+0xae0>
   876e4:	4651      	mov	r1, sl
   876e6:	4648      	mov	r0, r9
   876e8:	aa2a      	add	r2, sp, #168	; 0xa8
   876ea:	f004 fec3 	bl	8c474 <__ssprint_r>
   876ee:	2800      	cmp	r0, #0
   876f0:	f47f aec2 	bne.w	87478 <_svfprintf_r+0x890>
   876f4:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   876f8:	3d10      	subs	r5, #16
   876fa:	2d10      	cmp	r5, #16
   876fc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87700:	dce7      	bgt.n	876d2 <_svfprintf_r+0xaea>
   87702:	3301      	adds	r3, #1
   87704:	4aa1      	ldr	r2, [pc, #644]	; (8798c <_svfprintf_r+0xda4>)
   87706:	442c      	add	r4, r5
   87708:	2b07      	cmp	r3, #7
   8770a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   8770e:	e9c8 2500 	strd	r2, r5, [r8]
   87712:	f77f ac21 	ble.w	86f58 <_svfprintf_r+0x370>
   87716:	4651      	mov	r1, sl
   87718:	4648      	mov	r0, r9
   8771a:	aa2a      	add	r2, sp, #168	; 0xa8
   8771c:	f004 feaa 	bl	8c474 <__ssprint_r>
   87720:	2800      	cmp	r0, #0
   87722:	f47f aea9 	bne.w	87478 <_svfprintf_r+0x890>
   87726:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87728:	e416      	b.n	86f58 <_svfprintf_r+0x370>
   8772a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8772c:	2a00      	cmp	r2, #0
   8772e:	f340 8386 	ble.w	87e3e <_svfprintf_r+0x1256>
   87732:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87734:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87736:	4293      	cmp	r3, r2
   87738:	bfa8      	it	ge
   8773a:	4613      	movge	r3, r2
   8773c:	2b00      	cmp	r3, #0
   8773e:	461d      	mov	r5, r3
   87740:	dd0b      	ble.n	8775a <_svfprintf_r+0xb72>
   87742:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87744:	442c      	add	r4, r5
   87746:	3301      	adds	r3, #1
   87748:	2b07      	cmp	r3, #7
   8774a:	e9c8 7500 	strd	r7, r5, [r8]
   8774e:	942c      	str	r4, [sp, #176]	; 0xb0
   87750:	932b      	str	r3, [sp, #172]	; 0xac
   87752:	f300 851e 	bgt.w	88192 <_svfprintf_r+0x15aa>
   87756:	f108 0808 	add.w	r8, r8, #8
   8775a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8775c:	2d00      	cmp	r5, #0
   8775e:	bfa8      	it	ge
   87760:	1b5b      	subge	r3, r3, r5
   87762:	2b00      	cmp	r3, #0
   87764:	461d      	mov	r5, r3
   87766:	f300 8256 	bgt.w	87c16 <_svfprintf_r+0x102e>
   8776a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8776c:	443b      	add	r3, r7
   8776e:	461e      	mov	r6, r3
   87770:	9b07      	ldr	r3, [sp, #28]
   87772:	055b      	lsls	r3, r3, #21
   87774:	f100 8277 	bmi.w	87c66 <_svfprintf_r+0x107e>
   87778:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8777a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8777c:	4293      	cmp	r3, r2
   8777e:	db03      	blt.n	87788 <_svfprintf_r+0xba0>
   87780:	9a07      	ldr	r2, [sp, #28]
   87782:	07d5      	lsls	r5, r2, #31
   87784:	f140 847a 	bpl.w	8807c <_svfprintf_r+0x1494>
   87788:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8778a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   8778c:	3201      	adds	r2, #1
   8778e:	9818      	ldr	r0, [sp, #96]	; 0x60
   87790:	440c      	add	r4, r1
   87792:	2a07      	cmp	r2, #7
   87794:	e9c8 0100 	strd	r0, r1, [r8]
   87798:	942c      	str	r4, [sp, #176]	; 0xb0
   8779a:	922b      	str	r2, [sp, #172]	; 0xac
   8779c:	f300 8506 	bgt.w	881ac <_svfprintf_r+0x15c4>
   877a0:	f108 0808 	add.w	r8, r8, #8
   877a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   877a6:	18bd      	adds	r5, r7, r2
   877a8:	1bad      	subs	r5, r5, r6
   877aa:	1ad3      	subs	r3, r2, r3
   877ac:	429d      	cmp	r5, r3
   877ae:	bfa8      	it	ge
   877b0:	461d      	movge	r5, r3
   877b2:	2d00      	cmp	r5, #0
   877b4:	dd0b      	ble.n	877ce <_svfprintf_r+0xbe6>
   877b6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   877b8:	442c      	add	r4, r5
   877ba:	3201      	adds	r2, #1
   877bc:	2a07      	cmp	r2, #7
   877be:	e9c8 6500 	strd	r6, r5, [r8]
   877c2:	942c      	str	r4, [sp, #176]	; 0xb0
   877c4:	922b      	str	r2, [sp, #172]	; 0xac
   877c6:	f300 855f 	bgt.w	88288 <_svfprintf_r+0x16a0>
   877ca:	f108 0808 	add.w	r8, r8, #8
   877ce:	2d00      	cmp	r5, #0
   877d0:	bfb4      	ite	lt
   877d2:	461d      	movlt	r5, r3
   877d4:	1b5d      	subge	r5, r3, r5
   877d6:	2d00      	cmp	r5, #0
   877d8:	f77f abb5 	ble.w	86f46 <_svfprintf_r+0x35e>
   877dc:	2d10      	cmp	r5, #16
   877de:	f340 8376 	ble.w	87ece <_svfprintf_r+0x12e6>
   877e2:	4f6b      	ldr	r7, [pc, #428]	; (87990 <_svfprintf_r+0xda8>)
   877e4:	2610      	movs	r6, #16
   877e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   877e8:	970f      	str	r7, [sp, #60]	; 0x3c
   877ea:	e005      	b.n	877f8 <_svfprintf_r+0xc10>
   877ec:	f108 0808 	add.w	r8, r8, #8
   877f0:	3d10      	subs	r5, #16
   877f2:	2d10      	cmp	r5, #16
   877f4:	f340 836e 	ble.w	87ed4 <_svfprintf_r+0x12ec>
   877f8:	3301      	adds	r3, #1
   877fa:	3410      	adds	r4, #16
   877fc:	2b07      	cmp	r3, #7
   877fe:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87802:	e9c8 7600 	strd	r7, r6, [r8]
   87806:	ddf1      	ble.n	877ec <_svfprintf_r+0xc04>
   87808:	4651      	mov	r1, sl
   8780a:	4648      	mov	r0, r9
   8780c:	aa2a      	add	r2, sp, #168	; 0xa8
   8780e:	f004 fe31 	bl	8c474 <__ssprint_r>
   87812:	2800      	cmp	r0, #0
   87814:	f47f ae30 	bne.w	87478 <_svfprintf_r+0x890>
   87818:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   8781c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87820:	e7e6      	b.n	877f0 <_svfprintf_r+0xc08>
   87822:	2b30      	cmp	r3, #48	; 0x30
   87824:	f43f ae99 	beq.w	8755a <_svfprintf_r+0x972>
   87828:	2330      	movs	r3, #48	; 0x30
   8782a:	3a02      	subs	r2, #2
   8782c:	f807 3c01 	strb.w	r3, [r7, #-1]
   87830:	9908      	ldr	r1, [sp, #32]
   87832:	ab56      	add	r3, sp, #344	; 0x158
   87834:	1a9b      	subs	r3, r3, r2
   87836:	4617      	mov	r7, r2
   87838:	9107      	str	r1, [sp, #28]
   8783a:	930c      	str	r3, [sp, #48]	; 0x30
   8783c:	e53d      	b.n	872ba <_svfprintf_r+0x6d2>
   8783e:	9b07      	ldr	r3, [sp, #28]
   87840:	07d8      	lsls	r0, r3, #31
   87842:	f53f ae27 	bmi.w	87494 <_svfprintf_r+0x8ac>
   87846:	2301      	movs	r3, #1
   87848:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   8784a:	441c      	add	r4, r3
   8784c:	441d      	add	r5, r3
   8784e:	2d07      	cmp	r5, #7
   87850:	942c      	str	r4, [sp, #176]	; 0xb0
   87852:	f8c8 7000 	str.w	r7, [r8]
   87856:	952b      	str	r5, [sp, #172]	; 0xac
   87858:	f8c8 3004 	str.w	r3, [r8, #4]
   8785c:	f77f ae4d 	ble.w	874fa <_svfprintf_r+0x912>
   87860:	4651      	mov	r1, sl
   87862:	4648      	mov	r0, r9
   87864:	aa2a      	add	r2, sp, #168	; 0xa8
   87866:	f004 fe05 	bl	8c474 <__ssprint_r>
   8786a:	2800      	cmp	r0, #0
   8786c:	f47f ae04 	bne.w	87478 <_svfprintf_r+0x890>
   87870:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87874:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87878:	e641      	b.n	874fe <_svfprintf_r+0x916>
   8787a:	1e5e      	subs	r6, r3, #1
   8787c:	2e00      	cmp	r6, #0
   8787e:	f77f ae3e 	ble.w	874fe <_svfprintf_r+0x916>
   87882:	2e10      	cmp	r6, #16
   87884:	f340 871e 	ble.w	886c4 <_svfprintf_r+0x1adc>
   87888:	4b41      	ldr	r3, [pc, #260]	; (87990 <_svfprintf_r+0xda8>)
   8788a:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   8788e:	2710      	movs	r7, #16
   87890:	46d3      	mov	fp, sl
   87892:	930f      	str	r3, [sp, #60]	; 0x3c
   87894:	46ca      	mov	sl, r9
   87896:	4699      	mov	r9, r3
   87898:	e005      	b.n	878a6 <_svfprintf_r+0xcbe>
   8789a:	f108 0808 	add.w	r8, r8, #8
   8789e:	3e10      	subs	r6, #16
   878a0:	2e10      	cmp	r6, #16
   878a2:	f340 82f8 	ble.w	87e96 <_svfprintf_r+0x12ae>
   878a6:	3501      	adds	r5, #1
   878a8:	3410      	adds	r4, #16
   878aa:	2d07      	cmp	r5, #7
   878ac:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   878b0:	e9c8 9700 	strd	r9, r7, [r8]
   878b4:	ddf1      	ble.n	8789a <_svfprintf_r+0xcb2>
   878b6:	4659      	mov	r1, fp
   878b8:	4650      	mov	r0, sl
   878ba:	aa2a      	add	r2, sp, #168	; 0xa8
   878bc:	f004 fdda 	bl	8c474 <__ssprint_r>
   878c0:	2800      	cmp	r0, #0
   878c2:	f040 85cc 	bne.w	8845e <_svfprintf_r+0x1876>
   878c6:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   878ca:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   878ce:	e7e6      	b.n	8789e <_svfprintf_r+0xcb6>
   878d0:	4651      	mov	r1, sl
   878d2:	4648      	mov	r0, r9
   878d4:	aa2a      	add	r2, sp, #168	; 0xa8
   878d6:	f004 fdcd 	bl	8c474 <__ssprint_r>
   878da:	2800      	cmp	r0, #0
   878dc:	f47f adcc 	bne.w	87478 <_svfprintf_r+0x890>
   878e0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   878e2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   878e6:	f7ff bb1d 	b.w	86f24 <_svfprintf_r+0x33c>
   878ea:	9b08      	ldr	r3, [sp, #32]
   878ec:	06dc      	lsls	r4, r3, #27
   878ee:	f100 8119 	bmi.w	87b24 <_svfprintf_r+0xf3c>
   878f2:	9b08      	ldr	r3, [sp, #32]
   878f4:	0658      	lsls	r0, r3, #25
   878f6:	f140 8368 	bpl.w	87fca <_svfprintf_r+0x13e2>
   878fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   878fc:	2301      	movs	r3, #1
   878fe:	f852 4b04 	ldr.w	r4, [r2], #4
   87902:	2500      	movs	r5, #0
   87904:	920e      	str	r2, [sp, #56]	; 0x38
   87906:	b2a4      	uxth	r4, r4
   87908:	f7ff ba7f 	b.w	86e0a <_svfprintf_r+0x222>
   8790c:	232d      	movs	r3, #45	; 0x2d
   8790e:	9a07      	ldr	r2, [sp, #28]
   87910:	4264      	negs	r4, r4
   87912:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   87916:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8791a:	2301      	movs	r3, #1
   8791c:	9208      	str	r2, [sp, #32]
   8791e:	f7ff ba77 	b.w	86e10 <_svfprintf_r+0x228>
   87922:	4651      	mov	r1, sl
   87924:	4648      	mov	r0, r9
   87926:	aa2a      	add	r2, sp, #168	; 0xa8
   87928:	f004 fda4 	bl	8c474 <__ssprint_r>
   8792c:	2800      	cmp	r0, #0
   8792e:	f47f ada3 	bne.w	87478 <_svfprintf_r+0x890>
   87932:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87936:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   8793a:	e5ba      	b.n	874b2 <_svfprintf_r+0x8ca>
   8793c:	4651      	mov	r1, sl
   8793e:	4648      	mov	r0, r9
   87940:	aa2a      	add	r2, sp, #168	; 0xa8
   87942:	f004 fd97 	bl	8c474 <__ssprint_r>
   87946:	2800      	cmp	r0, #0
   87948:	f47f ad96 	bne.w	87478 <_svfprintf_r+0x890>
   8794c:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87950:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87954:	e5ba      	b.n	874cc <_svfprintf_r+0x8e4>
   87956:	9b07      	ldr	r3, [sp, #28]
   87958:	07da      	lsls	r2, r3, #31
   8795a:	f57f aaf4 	bpl.w	86f46 <_svfprintf_r+0x35e>
   8795e:	e4d9      	b.n	87314 <_svfprintf_r+0x72c>
   87960:	af56      	add	r7, sp, #344	; 0x158
   87962:	e4aa      	b.n	872ba <_svfprintf_r+0x6d2>
   87964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87966:	465f      	mov	r7, fp
   87968:	f853 1b04 	ldr.w	r1, [r3], #4
   8796c:	930e      	str	r3, [sp, #56]	; 0x38
   8796e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   87970:	17dd      	asrs	r5, r3, #31
   87972:	461a      	mov	r2, r3
   87974:	462b      	mov	r3, r5
   87976:	e9c1 2300 	strd	r2, r3, [r1]
   8797a:	f7ff bb03 	b.w	86f84 <_svfprintf_r+0x39c>
   8797e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87980:	2500      	movs	r5, #0
   87982:	f853 4b04 	ldr.w	r4, [r3], #4
   87986:	930e      	str	r3, [sp, #56]	; 0x38
   87988:	f7ff ba3a 	b.w	86e00 <_svfprintf_r+0x218>
   8798c:	0008d460 	.word	0x0008d460
   87990:	0008d470 	.word	0x0008d470
   87994:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87998:	460b      	mov	r3, r1
   8799a:	4602      	mov	r2, r0
   8799c:	f005 fc9e 	bl	8d2dc <__aeabi_dcmpun>
   879a0:	4601      	mov	r1, r0
   879a2:	2800      	cmp	r0, #0
   879a4:	f040 8643 	bne.w	8862e <_svfprintf_r+0x1a46>
   879a8:	2e61      	cmp	r6, #97	; 0x61
   879aa:	f000 8586 	beq.w	884ba <_svfprintf_r+0x18d2>
   879ae:	2e41      	cmp	r6, #65	; 0x41
   879b0:	f000 847a 	beq.w	882a8 <_svfprintf_r+0x16c0>
   879b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   879b6:	f026 0520 	bic.w	r5, r6, #32
   879ba:	1c5a      	adds	r2, r3, #1
   879bc:	9508      	str	r5, [sp, #32]
   879be:	f000 837d 	beq.w	880bc <_svfprintf_r+0x14d4>
   879c2:	2d47      	cmp	r5, #71	; 0x47
   879c4:	f000 859e 	beq.w	88504 <_svfprintf_r+0x191c>
   879c8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   879cc:	9b07      	ldr	r3, [sp, #28]
   879ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   879d2:	9312      	str	r3, [sp, #72]	; 0x48
   879d4:	460b      	mov	r3, r1
   879d6:	2b00      	cmp	r3, #0
   879d8:	f2c0 85ba 	blt.w	88550 <_svfprintf_r+0x1968>
   879dc:	2200      	movs	r2, #0
   879de:	930f      	str	r3, [sp, #60]	; 0x3c
   879e0:	921e      	str	r2, [sp, #120]	; 0x78
   879e2:	920d      	str	r2, [sp, #52]	; 0x34
   879e4:	900c      	str	r0, [sp, #48]	; 0x30
   879e6:	2d46      	cmp	r5, #70	; 0x46
   879e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   879ea:	f000 8407 	beq.w	881fc <_svfprintf_r+0x1614>
   879ee:	2d45      	cmp	r5, #69	; 0x45
   879f0:	f04f 0002 	mov.w	r0, #2
   879f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   879f6:	f040 83e7 	bne.w	881c8 <_svfprintf_r+0x15e0>
   879fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   879fc:	9000      	str	r0, [sp, #0]
   879fe:	1c4c      	adds	r4, r1, #1
   87a00:	a928      	add	r1, sp, #160	; 0xa0
   87a02:	a825      	add	r0, sp, #148	; 0x94
   87a04:	9104      	str	r1, [sp, #16]
   87a06:	a924      	add	r1, sp, #144	; 0x90
   87a08:	e9cd 1002 	strd	r1, r0, [sp, #8]
   87a0c:	9401      	str	r4, [sp, #4]
   87a0e:	4648      	mov	r0, r9
   87a10:	f001 feb2 	bl	89778 <_dtoa_r>
   87a14:	4607      	mov	r7, r0
   87a16:	4404      	add	r4, r0
   87a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87a1a:	9d07      	ldr	r5, [sp, #28]
   87a1c:	9307      	str	r3, [sp, #28]
   87a1e:	2200      	movs	r2, #0
   87a20:	2300      	movs	r3, #0
   87a22:	980c      	ldr	r0, [sp, #48]	; 0x30
   87a24:	990f      	ldr	r1, [sp, #60]	; 0x3c
   87a26:	f005 fc27 	bl	8d278 <__aeabi_dcmpeq>
   87a2a:	2800      	cmp	r0, #0
   87a2c:	f000 8398 	beq.w	88160 <_svfprintf_r+0x1578>
   87a30:	4623      	mov	r3, r4
   87a32:	1bdb      	subs	r3, r3, r7
   87a34:	9313      	str	r3, [sp, #76]	; 0x4c
   87a36:	9b08      	ldr	r3, [sp, #32]
   87a38:	2b47      	cmp	r3, #71	; 0x47
   87a3a:	f000 835e 	beq.w	880fa <_svfprintf_r+0x1512>
   87a3e:	9b08      	ldr	r3, [sp, #32]
   87a40:	2b46      	cmp	r3, #70	; 0x46
   87a42:	f000 840b 	beq.w	8825c <_svfprintf_r+0x1674>
   87a46:	9b24      	ldr	r3, [sp, #144]	; 0x90
   87a48:	9310      	str	r3, [sp, #64]	; 0x40
   87a4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87a4c:	9a08      	ldr	r2, [sp, #32]
   87a4e:	3b01      	subs	r3, #1
   87a50:	2a41      	cmp	r2, #65	; 0x41
   87a52:	9324      	str	r3, [sp, #144]	; 0x90
   87a54:	f000 85ad 	beq.w	885b2 <_svfprintf_r+0x19ca>
   87a58:	2100      	movs	r1, #0
   87a5a:	b2f2      	uxtb	r2, r6
   87a5c:	2b00      	cmp	r3, #0
   87a5e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   87a62:	bfb6      	itet	lt
   87a64:	222d      	movlt	r2, #45	; 0x2d
   87a66:	222b      	movge	r2, #43	; 0x2b
   87a68:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   87a6a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   87a6e:	bfb8      	it	lt
   87a70:	f1c3 0301 	rsblt	r3, r3, #1
   87a74:	2b09      	cmp	r3, #9
   87a76:	f340 85a2 	ble.w	885be <_svfprintf_r+0x19d6>
   87a7a:	f10d 0ea7 	add.w	lr, sp, #167	; 0xa7
   87a7e:	4672      	mov	r2, lr
   87a80:	469c      	mov	ip, r3
   87a82:	4cbf      	ldr	r4, [pc, #764]	; (87d80 <_svfprintf_r+0x1198>)
   87a84:	4660      	mov	r0, ip
   87a86:	4611      	mov	r1, r2
   87a88:	fb84 230c 	smull	r2, r3, r4, ip
   87a8c:	ea4f 72ec 	mov.w	r2, ip, asr #31
   87a90:	ebc2 02a3 	rsb	r2, r2, r3, asr #2
   87a94:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   87a98:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
   87a9c:	3330      	adds	r3, #48	; 0x30
   87a9e:	2863      	cmp	r0, #99	; 0x63
   87aa0:	4694      	mov	ip, r2
   87aa2:	f801 3c01 	strb.w	r3, [r1, #-1]
   87aa6:	f101 32ff 	add.w	r2, r1, #4294967295
   87aaa:	dceb      	bgt.n	87a84 <_svfprintf_r+0xe9c>
   87aac:	4663      	mov	r3, ip
   87aae:	3330      	adds	r3, #48	; 0x30
   87ab0:	b2d8      	uxtb	r0, r3
   87ab2:	1e8b      	subs	r3, r1, #2
   87ab4:	459e      	cmp	lr, r3
   87ab6:	f802 0c01 	strb.w	r0, [r2, #-1]
   87aba:	f240 862c 	bls.w	88716 <_svfprintf_r+0x1b2e>
   87abe:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
   87ac2:	e001      	b.n	87ac8 <_svfprintf_r+0xee0>
   87ac4:	f812 0b01 	ldrb.w	r0, [r2], #1
   87ac8:	4596      	cmp	lr, r2
   87aca:	f803 0b01 	strb.w	r0, [r3], #1
   87ace:	d1f9      	bne.n	87ac4 <_svfprintf_r+0xedc>
   87ad0:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   87ad4:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   87ad8:	1a5b      	subs	r3, r3, r1
   87ada:	4413      	add	r3, r2
   87adc:	aa26      	add	r2, sp, #152	; 0x98
   87ade:	1a9b      	subs	r3, r3, r2
   87ae0:	931b      	str	r3, [sp, #108]	; 0x6c
   87ae2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87ae4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   87ae6:	2b01      	cmp	r3, #1
   87ae8:	441a      	add	r2, r3
   87aea:	920c      	str	r2, [sp, #48]	; 0x30
   87aec:	f340 85cc 	ble.w	88688 <_svfprintf_r+0x1aa0>
   87af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87af2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87af4:	4413      	add	r3, r2
   87af6:	930c      	str	r3, [sp, #48]	; 0x30
   87af8:	2300      	movs	r3, #0
   87afa:	9312      	str	r3, [sp, #72]	; 0x48
   87afc:	9316      	str	r3, [sp, #88]	; 0x58
   87afe:	9310      	str	r3, [sp, #64]	; 0x40
   87b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87b02:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
   87b06:	f445 7280 	orr.w	r2, r5, #256	; 0x100
   87b0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87b0e:	9207      	str	r2, [sp, #28]
   87b10:	9308      	str	r3, [sp, #32]
   87b12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87b14:	2b00      	cmp	r3, #0
   87b16:	f040 8317 	bne.w	88148 <_svfprintf_r+0x1560>
   87b1a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87b1e:	9309      	str	r3, [sp, #36]	; 0x24
   87b20:	f7ff ba86 	b.w	87030 <_svfprintf_r+0x448>
   87b24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87b26:	2301      	movs	r3, #1
   87b28:	f852 4b04 	ldr.w	r4, [r2], #4
   87b2c:	2500      	movs	r5, #0
   87b2e:	920e      	str	r2, [sp, #56]	; 0x38
   87b30:	f7ff b96b 	b.w	86e0a <_svfprintf_r+0x222>
   87b34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87b36:	f853 4b04 	ldr.w	r4, [r3], #4
   87b3a:	17e5      	asrs	r5, r4, #31
   87b3c:	930e      	str	r3, [sp, #56]	; 0x38
   87b3e:	4622      	mov	r2, r4
   87b40:	462b      	mov	r3, r5
   87b42:	f7ff b933 	b.w	86dac <_svfprintf_r+0x1c4>
   87b46:	9b07      	ldr	r3, [sp, #28]
   87b48:	9308      	str	r3, [sp, #32]
   87b4a:	f7ff bae0 	b.w	8710e <_svfprintf_r+0x526>
   87b4e:	4b8d      	ldr	r3, [pc, #564]	; (87d84 <_svfprintf_r+0x119c>)
   87b50:	9319      	str	r3, [sp, #100]	; 0x64
   87b52:	9b07      	ldr	r3, [sp, #28]
   87b54:	0699      	lsls	r1, r3, #26
   87b56:	f140 80fe 	bpl.w	87d56 <_svfprintf_r+0x116e>
   87b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87b5c:	3307      	adds	r3, #7
   87b5e:	f023 0307 	bic.w	r3, r3, #7
   87b62:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   87b66:	930e      	str	r3, [sp, #56]	; 0x38
   87b68:	9a07      	ldr	r2, [sp, #28]
   87b6a:	07d7      	lsls	r7, r2, #31
   87b6c:	d50a      	bpl.n	87b84 <_svfprintf_r+0xf9c>
   87b6e:	ea54 0305 	orrs.w	r3, r4, r5
   87b72:	d007      	beq.n	87b84 <_svfprintf_r+0xf9c>
   87b74:	2330      	movs	r3, #48	; 0x30
   87b76:	f042 0202 	orr.w	r2, r2, #2
   87b7a:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
   87b7e:	9207      	str	r2, [sp, #28]
   87b80:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   87b84:	9a07      	ldr	r2, [sp, #28]
   87b86:	2302      	movs	r3, #2
   87b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
   87b8c:	9208      	str	r2, [sp, #32]
   87b8e:	f7ff b93c 	b.w	86e0a <_svfprintf_r+0x222>
   87b92:	4b7d      	ldr	r3, [pc, #500]	; (87d88 <_svfprintf_r+0x11a0>)
   87b94:	9319      	str	r3, [sp, #100]	; 0x64
   87b96:	e7dc      	b.n	87b52 <_svfprintf_r+0xf6a>
   87b98:	f043 0320 	orr.w	r3, r3, #32
   87b9c:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87ba0:	9307      	str	r3, [sp, #28]
   87ba2:	f10b 0b01 	add.w	fp, fp, #1
   87ba6:	f7ff b86a 	b.w	86c7e <_svfprintf_r+0x96>
   87baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   87bae:	f89b 6001 	ldrb.w	r6, [fp, #1]
   87bb2:	9307      	str	r3, [sp, #28]
   87bb4:	f10b 0b01 	add.w	fp, fp, #1
   87bb8:	f7ff b861 	b.w	86c7e <_svfprintf_r+0x96>
   87bbc:	4651      	mov	r1, sl
   87bbe:	4648      	mov	r0, r9
   87bc0:	aa2a      	add	r2, sp, #168	; 0xa8
   87bc2:	f004 fc57 	bl	8c474 <__ssprint_r>
   87bc6:	2800      	cmp	r0, #0
   87bc8:	f47f ac56 	bne.w	87478 <_svfprintf_r+0x890>
   87bcc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87bce:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87bd2:	f7ff bbad 	b.w	87330 <_svfprintf_r+0x748>
   87bd6:	2140      	movs	r1, #64	; 0x40
   87bd8:	4648      	mov	r0, r9
   87bda:	f003 fa73 	bl	8b0c4 <_malloc_r>
   87bde:	f8cb 0000 	str.w	r0, [fp]
   87be2:	f8cb 0010 	str.w	r0, [fp, #16]
   87be6:	2800      	cmp	r0, #0
   87be8:	f000 858d 	beq.w	88706 <_svfprintf_r+0x1b1e>
   87bec:	2340      	movs	r3, #64	; 0x40
   87bee:	f8cb 3014 	str.w	r3, [fp, #20]
   87bf2:	f7ff b811 	b.w	86c18 <_svfprintf_r+0x30>
   87bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87bf8:	463a      	mov	r2, r7
   87bfa:	2b06      	cmp	r3, #6
   87bfc:	bf28      	it	cs
   87bfe:	2306      	movcs	r3, #6
   87c00:	9709      	str	r7, [sp, #36]	; 0x24
   87c02:	9712      	str	r7, [sp, #72]	; 0x48
   87c04:	9716      	str	r7, [sp, #88]	; 0x58
   87c06:	9710      	str	r7, [sp, #64]	; 0x40
   87c08:	970d      	str	r7, [sp, #52]	; 0x34
   87c0a:	9308      	str	r3, [sp, #32]
   87c0c:	4f5f      	ldr	r7, [pc, #380]	; (87d8c <_svfprintf_r+0x11a4>)
   87c0e:	940e      	str	r4, [sp, #56]	; 0x38
   87c10:	930c      	str	r3, [sp, #48]	; 0x30
   87c12:	f7ff ba0d 	b.w	87030 <_svfprintf_r+0x448>
   87c16:	2b10      	cmp	r3, #16
   87c18:	f340 8558 	ble.w	886cc <_svfprintf_r+0x1ae4>
   87c1c:	4651      	mov	r1, sl
   87c1e:	4a5c      	ldr	r2, [pc, #368]	; (87d90 <_svfprintf_r+0x11a8>)
   87c20:	46ca      	mov	sl, r9
   87c22:	9709      	str	r7, [sp, #36]	; 0x24
   87c24:	2610      	movs	r6, #16
   87c26:	4617      	mov	r7, r2
   87c28:	4689      	mov	r9, r1
   87c2a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87c2c:	920f      	str	r2, [sp, #60]	; 0x3c
   87c2e:	e005      	b.n	87c3c <_svfprintf_r+0x1054>
   87c30:	f108 0808 	add.w	r8, r8, #8
   87c34:	3d10      	subs	r5, #16
   87c36:	2d10      	cmp	r5, #16
   87c38:	f340 81fa 	ble.w	88030 <_svfprintf_r+0x1448>
   87c3c:	3301      	adds	r3, #1
   87c3e:	3410      	adds	r4, #16
   87c40:	2b07      	cmp	r3, #7
   87c42:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87c46:	e9c8 7600 	strd	r7, r6, [r8]
   87c4a:	ddf1      	ble.n	87c30 <_svfprintf_r+0x1048>
   87c4c:	4649      	mov	r1, r9
   87c4e:	4650      	mov	r0, sl
   87c50:	aa2a      	add	r2, sp, #168	; 0xa8
   87c52:	f004 fc0f 	bl	8c474 <__ssprint_r>
   87c56:	2800      	cmp	r0, #0
   87c58:	f040 83fd 	bne.w	88456 <_svfprintf_r+0x186e>
   87c5c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87c60:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87c64:	e7e6      	b.n	87c34 <_svfprintf_r+0x104c>
   87c66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87c68:	4642      	mov	r2, r8
   87c6a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   87c6e:	18fb      	adds	r3, r7, r3
   87c70:	9309      	str	r3, [sp, #36]	; 0x24
   87c72:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   87c76:	970f      	str	r7, [sp, #60]	; 0x3c
   87c78:	4620      	mov	r0, r4
   87c7a:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
   87c7e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   87c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87c82:	f1b8 0f00 	cmp.w	r8, #0
   87c86:	d02d      	beq.n	87ce4 <_svfprintf_r+0x10fc>
   87c88:	bb7b      	cbnz	r3, 87cea <_svfprintf_r+0x1102>
   87c8a:	3f01      	subs	r7, #1
   87c8c:	f108 38ff 	add.w	r8, r8, #4294967295
   87c90:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87c92:	991c      	ldr	r1, [sp, #112]	; 0x70
   87c94:	3301      	adds	r3, #1
   87c96:	4458      	add	r0, fp
   87c98:	2b07      	cmp	r3, #7
   87c9a:	e9c2 1b00 	strd	r1, fp, [r2]
   87c9e:	902c      	str	r0, [sp, #176]	; 0xb0
   87ca0:	932b      	str	r3, [sp, #172]	; 0xac
   87ca2:	dc62      	bgt.n	87d6a <_svfprintf_r+0x1182>
   87ca4:	3208      	adds	r2, #8
   87ca6:	9909      	ldr	r1, [sp, #36]	; 0x24
   87ca8:	783b      	ldrb	r3, [r7, #0]
   87caa:	1b8d      	subs	r5, r1, r6
   87cac:	429d      	cmp	r5, r3
   87cae:	bfa8      	it	ge
   87cb0:	461d      	movge	r5, r3
   87cb2:	2d00      	cmp	r5, #0
   87cb4:	dd0b      	ble.n	87cce <_svfprintf_r+0x10e6>
   87cb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87cb8:	4428      	add	r0, r5
   87cba:	3301      	adds	r3, #1
   87cbc:	2b07      	cmp	r3, #7
   87cbe:	e9c2 6500 	strd	r6, r5, [r2]
   87cc2:	902c      	str	r0, [sp, #176]	; 0xb0
   87cc4:	932b      	str	r3, [sp, #172]	; 0xac
   87cc6:	f300 8111 	bgt.w	87eec <_svfprintf_r+0x1304>
   87cca:	783b      	ldrb	r3, [r7, #0]
   87ccc:	3208      	adds	r2, #8
   87cce:	2d00      	cmp	r5, #0
   87cd0:	bfb4      	ite	lt
   87cd2:	461d      	movlt	r5, r3
   87cd4:	1b5d      	subge	r5, r3, r5
   87cd6:	2d00      	cmp	r5, #0
   87cd8:	dc0b      	bgt.n	87cf2 <_svfprintf_r+0x110a>
   87cda:	441e      	add	r6, r3
   87cdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87cde:	f1b8 0f00 	cmp.w	r8, #0
   87ce2:	d1d1      	bne.n	87c88 <_svfprintf_r+0x10a0>
   87ce4:	2b00      	cmp	r3, #0
   87ce6:	f000 81f9 	beq.w	880dc <_svfprintf_r+0x14f4>
   87cea:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87cec:	3b01      	subs	r3, #1
   87cee:	9312      	str	r3, [sp, #72]	; 0x48
   87cf0:	e7ce      	b.n	87c90 <_svfprintf_r+0x10a8>
   87cf2:	2d10      	cmp	r5, #16
   87cf4:	f340 84c5 	ble.w	88682 <_svfprintf_r+0x1a9a>
   87cf8:	992b      	ldr	r1, [sp, #172]	; 0xac
   87cfa:	2410      	movs	r4, #16
   87cfc:	460b      	mov	r3, r1
   87cfe:	e004      	b.n	87d0a <_svfprintf_r+0x1122>
   87d00:	3d10      	subs	r5, #16
   87d02:	2d10      	cmp	r5, #16
   87d04:	f102 0208 	add.w	r2, r2, #8
   87d08:	dd16      	ble.n	87d38 <_svfprintf_r+0x1150>
   87d0a:	3301      	adds	r3, #1
   87d0c:	4920      	ldr	r1, [pc, #128]	; (87d90 <_svfprintf_r+0x11a8>)
   87d0e:	3010      	adds	r0, #16
   87d10:	2b07      	cmp	r3, #7
   87d12:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   87d16:	e9c2 1400 	strd	r1, r4, [r2]
   87d1a:	ddf1      	ble.n	87d00 <_svfprintf_r+0x1118>
   87d1c:	4651      	mov	r1, sl
   87d1e:	4648      	mov	r0, r9
   87d20:	aa2a      	add	r2, sp, #168	; 0xa8
   87d22:	f004 fba7 	bl	8c474 <__ssprint_r>
   87d26:	2800      	cmp	r0, #0
   87d28:	f47f aba6 	bne.w	87478 <_svfprintf_r+0x890>
   87d2c:	e9dd 302b 	ldrd	r3, r0, [sp, #172]	; 0xac
   87d30:	3d10      	subs	r5, #16
   87d32:	2d10      	cmp	r5, #16
   87d34:	aa2d      	add	r2, sp, #180	; 0xb4
   87d36:	dce8      	bgt.n	87d0a <_svfprintf_r+0x1122>
   87d38:	4619      	mov	r1, r3
   87d3a:	1c4b      	adds	r3, r1, #1
   87d3c:	4914      	ldr	r1, [pc, #80]	; (87d90 <_svfprintf_r+0x11a8>)
   87d3e:	4428      	add	r0, r5
   87d40:	2b07      	cmp	r3, #7
   87d42:	e9cd 302b 	strd	r3, r0, [sp, #172]	; 0xac
   87d46:	e9c2 1500 	strd	r1, r5, [r2]
   87d4a:	f300 8215 	bgt.w	88178 <_svfprintf_r+0x1590>
   87d4e:	783b      	ldrb	r3, [r7, #0]
   87d50:	3208      	adds	r2, #8
   87d52:	441e      	add	r6, r3
   87d54:	e7c2      	b.n	87cdc <_svfprintf_r+0x10f4>
   87d56:	9b07      	ldr	r3, [sp, #28]
   87d58:	06da      	lsls	r2, r3, #27
   87d5a:	f140 8084 	bpl.w	87e66 <_svfprintf_r+0x127e>
   87d5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87d60:	2500      	movs	r5, #0
   87d62:	f853 4b04 	ldr.w	r4, [r3], #4
   87d66:	930e      	str	r3, [sp, #56]	; 0x38
   87d68:	e6fe      	b.n	87b68 <_svfprintf_r+0xf80>
   87d6a:	4651      	mov	r1, sl
   87d6c:	4648      	mov	r0, r9
   87d6e:	aa2a      	add	r2, sp, #168	; 0xa8
   87d70:	f004 fb80 	bl	8c474 <__ssprint_r>
   87d74:	2800      	cmp	r0, #0
   87d76:	f47f ab7f 	bne.w	87478 <_svfprintf_r+0x890>
   87d7a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87d7c:	aa2d      	add	r2, sp, #180	; 0xb4
   87d7e:	e792      	b.n	87ca6 <_svfprintf_r+0x10be>
   87d80:	66666667 	.word	0x66666667
   87d84:	0008d42c 	.word	0x0008d42c
   87d88:	0008d440 	.word	0x0008d440
   87d8c:	0008d454 	.word	0x0008d454
   87d90:	0008d470 	.word	0x0008d470
   87d94:	2200      	movs	r2, #0
   87d96:	9b08      	ldr	r3, [sp, #32]
   87d98:	f8cd b01c 	str.w	fp, [sp, #28]
   87d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   87da0:	960c      	str	r6, [sp, #48]	; 0x30
   87da2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   87da6:	4693      	mov	fp, r2
   87da8:	46ca      	mov	sl, r9
   87daa:	461e      	mov	r6, r3
   87dac:	46c1      	mov	r9, r8
   87dae:	af56      	add	r7, sp, #344	; 0x158
   87db0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   87db4:	e00b      	b.n	87dce <_svfprintf_r+0x11e6>
   87db6:	220a      	movs	r2, #10
   87db8:	2300      	movs	r3, #0
   87dba:	4620      	mov	r0, r4
   87dbc:	4629      	mov	r1, r5
   87dbe:	f7fe fc77 	bl	866b0 <__aeabi_uldivmod>
   87dc2:	2d00      	cmp	r5, #0
   87dc4:	bf08      	it	eq
   87dc6:	2c0a      	cmpeq	r4, #10
   87dc8:	d31b      	bcc.n	87e02 <_svfprintf_r+0x121a>
   87dca:	4604      	mov	r4, r0
   87dcc:	460d      	mov	r5, r1
   87dce:	220a      	movs	r2, #10
   87dd0:	2300      	movs	r3, #0
   87dd2:	4620      	mov	r0, r4
   87dd4:	4629      	mov	r1, r5
   87dd6:	f7fe fc6b 	bl	866b0 <__aeabi_uldivmod>
   87dda:	3230      	adds	r2, #48	; 0x30
   87ddc:	f807 2c01 	strb.w	r2, [r7, #-1]
   87de0:	f10b 0b01 	add.w	fp, fp, #1
   87de4:	3f01      	subs	r7, #1
   87de6:	2e00      	cmp	r6, #0
   87de8:	d0e5      	beq.n	87db6 <_svfprintf_r+0x11ce>
   87dea:	f898 3000 	ldrb.w	r3, [r8]
   87dee:	459b      	cmp	fp, r3
   87df0:	d1e1      	bne.n	87db6 <_svfprintf_r+0x11ce>
   87df2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   87df6:	d0de      	beq.n	87db6 <_svfprintf_r+0x11ce>
   87df8:	2d00      	cmp	r5, #0
   87dfa:	bf08      	it	eq
   87dfc:	2c0a      	cmpeq	r4, #10
   87dfe:	f080 8128 	bcs.w	88052 <_svfprintf_r+0x146a>
   87e02:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   87e06:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
   87e0a:	46c8      	mov	r8, r9
   87e0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   87e0e:	46d1      	mov	r9, sl
   87e10:	f8dd b01c 	ldr.w	fp, [sp, #28]
   87e14:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   87e18:	f7ff bb9f 	b.w	8755a <_svfprintf_r+0x972>
   87e1c:	4651      	mov	r1, sl
   87e1e:	4648      	mov	r0, r9
   87e20:	aa2a      	add	r2, sp, #168	; 0xa8
   87e22:	931e      	str	r3, [sp, #120]	; 0x78
   87e24:	f004 fb26 	bl	8c474 <__ssprint_r>
   87e28:	2800      	cmp	r0, #0
   87e2a:	f47f ab25 	bne.w	87478 <_svfprintf_r+0x890>
   87e2e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   87e32:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87e34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   87e36:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87e3a:	f7ff b84a 	b.w	86ed2 <_svfprintf_r+0x2ea>
   87e3e:	2001      	movs	r0, #1
   87e40:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87e42:	49c5      	ldr	r1, [pc, #788]	; (88158 <_svfprintf_r+0x1570>)
   87e44:	4403      	add	r3, r0
   87e46:	4404      	add	r4, r0
   87e48:	2b07      	cmp	r3, #7
   87e4a:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87e4e:	e9c8 1000 	strd	r1, r0, [r8]
   87e52:	f73f abdf 	bgt.w	87614 <_svfprintf_r+0xa2c>
   87e56:	f108 0808 	add.w	r8, r8, #8
   87e5a:	f7ff bbe7 	b.w	8762c <_svfprintf_r+0xa44>
   87e5e:	46d1      	mov	r9, sl
   87e60:	46b3      	mov	fp, r6
   87e62:	f7ff bb0a 	b.w	8747a <_svfprintf_r+0x892>
   87e66:	9b07      	ldr	r3, [sp, #28]
   87e68:	065b      	lsls	r3, r3, #25
   87e6a:	f140 80cb 	bpl.w	88004 <_svfprintf_r+0x141c>
   87e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87e70:	2500      	movs	r5, #0
   87e72:	f853 4b04 	ldr.w	r4, [r3], #4
   87e76:	930e      	str	r3, [sp, #56]	; 0x38
   87e78:	b2a4      	uxth	r4, r4
   87e7a:	e675      	b.n	87b68 <_svfprintf_r+0xf80>
   87e7c:	4651      	mov	r1, sl
   87e7e:	4648      	mov	r0, r9
   87e80:	aa2a      	add	r2, sp, #168	; 0xa8
   87e82:	f004 faf7 	bl	8c474 <__ssprint_r>
   87e86:	2800      	cmp	r0, #0
   87e88:	f47f aaf6 	bne.w	87478 <_svfprintf_r+0x890>
   87e8c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87e8e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87e92:	f7ff ba3a 	b.w	8730a <_svfprintf_r+0x722>
   87e96:	46d1      	mov	r9, sl
   87e98:	46da      	mov	sl, fp
   87e9a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   87e9e:	3501      	adds	r5, #1
   87ea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87ea2:	4434      	add	r4, r6
   87ea4:	2d07      	cmp	r5, #7
   87ea6:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
   87eaa:	e9c8 3600 	strd	r3, r6, [r8]
   87eae:	f77f ab24 	ble.w	874fa <_svfprintf_r+0x912>
   87eb2:	4651      	mov	r1, sl
   87eb4:	4648      	mov	r0, r9
   87eb6:	aa2a      	add	r2, sp, #168	; 0xa8
   87eb8:	f004 fadc 	bl	8c474 <__ssprint_r>
   87ebc:	2800      	cmp	r0, #0
   87ebe:	f47f aadb 	bne.w	87478 <_svfprintf_r+0x890>
   87ec2:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
   87ec6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87eca:	f7ff bb18 	b.w	874fe <_svfprintf_r+0x916>
   87ece:	4aa3      	ldr	r2, [pc, #652]	; (8815c <_svfprintf_r+0x1574>)
   87ed0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87ed2:	920f      	str	r2, [sp, #60]	; 0x3c
   87ed4:	3301      	adds	r3, #1
   87ed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87ed8:	442c      	add	r4, r5
   87eda:	2b07      	cmp	r3, #7
   87edc:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87ee0:	e9c8 2500 	strd	r2, r5, [r8]
   87ee4:	f77f a82d 	ble.w	86f42 <_svfprintf_r+0x35a>
   87ee8:	f7ff bbc2 	b.w	87670 <_svfprintf_r+0xa88>
   87eec:	4651      	mov	r1, sl
   87eee:	4648      	mov	r0, r9
   87ef0:	aa2a      	add	r2, sp, #168	; 0xa8
   87ef2:	f004 fabf 	bl	8c474 <__ssprint_r>
   87ef6:	2800      	cmp	r0, #0
   87ef8:	f47f aabe 	bne.w	87478 <_svfprintf_r+0x890>
   87efc:	783b      	ldrb	r3, [r7, #0]
   87efe:	982c      	ldr	r0, [sp, #176]	; 0xb0
   87f00:	aa2d      	add	r2, sp, #180	; 0xb4
   87f02:	e6e4      	b.n	87cce <_svfprintf_r+0x10e6>
   87f04:	4651      	mov	r1, sl
   87f06:	4648      	mov	r0, r9
   87f08:	aa2a      	add	r2, sp, #168	; 0xa8
   87f0a:	f004 fab3 	bl	8c474 <__ssprint_r>
   87f0e:	2800      	cmp	r0, #0
   87f10:	f47f aab2 	bne.w	87478 <_svfprintf_r+0x890>
   87f14:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   87f16:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87f1a:	f7fe bffd 	b.w	86f18 <_svfprintf_r+0x330>
   87f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87f20:	990a      	ldr	r1, [sp, #40]	; 0x28
   87f22:	f853 2b04 	ldr.w	r2, [r3], #4
   87f26:	465f      	mov	r7, fp
   87f28:	6011      	str	r1, [r2, #0]
   87f2a:	930e      	str	r3, [sp, #56]	; 0x38
   87f2c:	f7ff b82a 	b.w	86f84 <_svfprintf_r+0x39c>
   87f30:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   87f32:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87f34:	3301      	adds	r3, #1
   87f36:	9818      	ldr	r0, [sp, #96]	; 0x60
   87f38:	440c      	add	r4, r1
   87f3a:	2b07      	cmp	r3, #7
   87f3c:	e9c8 0100 	strd	r0, r1, [r8]
   87f40:	942c      	str	r4, [sp, #176]	; 0xb0
   87f42:	932b      	str	r3, [sp, #172]	; 0xac
   87f44:	f300 80ac 	bgt.w	880a0 <_svfprintf_r+0x14b8>
   87f48:	f108 0808 	add.w	r8, r8, #8
   87f4c:	2a00      	cmp	r2, #0
   87f4e:	f6bf ab85 	bge.w	8765c <_svfprintf_r+0xa74>
   87f52:	4255      	negs	r5, r2
   87f54:	3210      	adds	r2, #16
   87f56:	f280 83d3 	bge.w	88700 <_svfprintf_r+0x1b18>
   87f5a:	4651      	mov	r1, sl
   87f5c:	4a7f      	ldr	r2, [pc, #508]	; (8815c <_svfprintf_r+0x1574>)
   87f5e:	46ca      	mov	sl, r9
   87f60:	9709      	str	r7, [sp, #36]	; 0x24
   87f62:	2610      	movs	r6, #16
   87f64:	4617      	mov	r7, r2
   87f66:	4689      	mov	r9, r1
   87f68:	920f      	str	r2, [sp, #60]	; 0x3c
   87f6a:	e005      	b.n	87f78 <_svfprintf_r+0x1390>
   87f6c:	f108 0808 	add.w	r8, r8, #8
   87f70:	3d10      	subs	r5, #16
   87f72:	2d10      	cmp	r5, #16
   87f74:	f340 82aa 	ble.w	884cc <_svfprintf_r+0x18e4>
   87f78:	3301      	adds	r3, #1
   87f7a:	3410      	adds	r4, #16
   87f7c:	2b07      	cmp	r3, #7
   87f7e:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   87f82:	e9c8 7600 	strd	r7, r6, [r8]
   87f86:	ddf1      	ble.n	87f6c <_svfprintf_r+0x1384>
   87f88:	4649      	mov	r1, r9
   87f8a:	4650      	mov	r0, sl
   87f8c:	aa2a      	add	r2, sp, #168	; 0xa8
   87f8e:	f004 fa71 	bl	8c474 <__ssprint_r>
   87f92:	2800      	cmp	r0, #0
   87f94:	f040 825f 	bne.w	88456 <_svfprintf_r+0x186e>
   87f98:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   87f9c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   87fa0:	e7e6      	b.n	87f70 <_svfprintf_r+0x1388>
   87fa2:	4638      	mov	r0, r7
   87fa4:	f004 fa04 	bl	8c3b0 <strlen>
   87fa8:	462b      	mov	r3, r5
   87faa:	4602      	mov	r2, r0
   87fac:	9509      	str	r5, [sp, #36]	; 0x24
   87fae:	f7ff b894 	b.w	870da <_svfprintf_r+0x4f2>
   87fb2:	9b07      	ldr	r3, [sp, #28]
   87fb4:	2500      	movs	r5, #0
   87fb6:	f413 7f00 	tst.w	r3, #512	; 0x200
   87fba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87fbc:	f853 4b04 	ldr.w	r4, [r3], #4
   87fc0:	930e      	str	r3, [sp, #56]	; 0x38
   87fc2:	bf18      	it	ne
   87fc4:	b2e4      	uxtbne	r4, r4
   87fc6:	f7fe bf1b 	b.w	86e00 <_svfprintf_r+0x218>
   87fca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87fcc:	9b08      	ldr	r3, [sp, #32]
   87fce:	f852 4b04 	ldr.w	r4, [r2], #4
   87fd2:	f413 7f00 	tst.w	r3, #512	; 0x200
   87fd6:	f04f 0500 	mov.w	r5, #0
   87fda:	f04f 0301 	mov.w	r3, #1
   87fde:	920e      	str	r2, [sp, #56]	; 0x38
   87fe0:	bf18      	it	ne
   87fe2:	b2e4      	uxtbne	r4, r4
   87fe4:	f7fe bf11 	b.w	86e0a <_svfprintf_r+0x222>
   87fe8:	9b07      	ldr	r3, [sp, #28]
   87fea:	f413 7f00 	tst.w	r3, #512	; 0x200
   87fee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87ff0:	f853 4b04 	ldr.w	r4, [r3], #4
   87ff4:	bf18      	it	ne
   87ff6:	b264      	sxtbne	r4, r4
   87ff8:	17e5      	asrs	r5, r4, #31
   87ffa:	930e      	str	r3, [sp, #56]	; 0x38
   87ffc:	4622      	mov	r2, r4
   87ffe:	462b      	mov	r3, r5
   88000:	f7fe bed4 	b.w	86dac <_svfprintf_r+0x1c4>
   88004:	9b07      	ldr	r3, [sp, #28]
   88006:	2500      	movs	r5, #0
   88008:	f413 7f00 	tst.w	r3, #512	; 0x200
   8800c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8800e:	f853 4b04 	ldr.w	r4, [r3], #4
   88012:	930e      	str	r3, [sp, #56]	; 0x38
   88014:	bf18      	it	ne
   88016:	b2e4      	uxtbne	r4, r4
   88018:	e5a6      	b.n	87b68 <_svfprintf_r+0xf80>
   8801a:	4b50      	ldr	r3, [pc, #320]	; (8815c <_svfprintf_r+0x1574>)
   8801c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   8801e:	930f      	str	r3, [sp, #60]	; 0x3c
   88020:	f7ff ba15 	b.w	8744e <_svfprintf_r+0x866>
   88024:	232d      	movs	r3, #45	; 0x2d
   88026:	461a      	mov	r2, r3
   88028:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   8802c:	f7fe bfee 	b.w	8700c <_svfprintf_r+0x424>
   88030:	464a      	mov	r2, r9
   88032:	46d1      	mov	r9, sl
   88034:	4692      	mov	sl, r2
   88036:	9f09      	ldr	r7, [sp, #36]	; 0x24
   88038:	3301      	adds	r3, #1
   8803a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8803c:	442c      	add	r4, r5
   8803e:	2b07      	cmp	r3, #7
   88040:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   88044:	e9c8 2500 	strd	r2, r5, [r8]
   88048:	dc3b      	bgt.n	880c2 <_svfprintf_r+0x14da>
   8804a:	f108 0808 	add.w	r8, r8, #8
   8804e:	f7ff bb8c 	b.w	8776a <_svfprintf_r+0xb82>
   88052:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   88054:	991c      	ldr	r1, [sp, #112]	; 0x70
   88056:	1aff      	subs	r7, r7, r3
   88058:	461a      	mov	r2, r3
   8805a:	4638      	mov	r0, r7
   8805c:	f004 f9d6 	bl	8c40c <strncpy>
   88060:	f898 3001 	ldrb.w	r3, [r8, #1]
   88064:	b10b      	cbz	r3, 8806a <_svfprintf_r+0x1482>
   88066:	f108 0801 	add.w	r8, r8, #1
   8806a:	220a      	movs	r2, #10
   8806c:	2300      	movs	r3, #0
   8806e:	4620      	mov	r0, r4
   88070:	4629      	mov	r1, r5
   88072:	f7fe fb1d 	bl	866b0 <__aeabi_uldivmod>
   88076:	f04f 0b00 	mov.w	fp, #0
   8807a:	e6a6      	b.n	87dca <_svfprintf_r+0x11e2>
   8807c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8807e:	18bd      	adds	r5, r7, r2
   88080:	1bad      	subs	r5, r5, r6
   88082:	1ad3      	subs	r3, r2, r3
   88084:	429d      	cmp	r5, r3
   88086:	bfa8      	it	ge
   88088:	461d      	movge	r5, r3
   8808a:	f7ff bba0 	b.w	877ce <_svfprintf_r+0xbe6>
   8808e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88090:	990a      	ldr	r1, [sp, #40]	; 0x28
   88092:	f853 2b04 	ldr.w	r2, [r3], #4
   88096:	465f      	mov	r7, fp
   88098:	8011      	strh	r1, [r2, #0]
   8809a:	930e      	str	r3, [sp, #56]	; 0x38
   8809c:	f7fe bf72 	b.w	86f84 <_svfprintf_r+0x39c>
   880a0:	4651      	mov	r1, sl
   880a2:	4648      	mov	r0, r9
   880a4:	aa2a      	add	r2, sp, #168	; 0xa8
   880a6:	f004 f9e5 	bl	8c474 <__ssprint_r>
   880aa:	2800      	cmp	r0, #0
   880ac:	f47f a9e4 	bne.w	87478 <_svfprintf_r+0x890>
   880b0:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   880b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   880b6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   880ba:	e747      	b.n	87f4c <_svfprintf_r+0x1364>
   880bc:	2306      	movs	r3, #6
   880be:	9309      	str	r3, [sp, #36]	; 0x24
   880c0:	e482      	b.n	879c8 <_svfprintf_r+0xde0>
   880c2:	4651      	mov	r1, sl
   880c4:	4648      	mov	r0, r9
   880c6:	aa2a      	add	r2, sp, #168	; 0xa8
   880c8:	f004 f9d4 	bl	8c474 <__ssprint_r>
   880cc:	2800      	cmp	r0, #0
   880ce:	f47f a9d3 	bne.w	87478 <_svfprintf_r+0x890>
   880d2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   880d4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   880d8:	f7ff bb47 	b.w	8776a <_svfprintf_r+0xb82>
   880dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   880de:	971a      	str	r7, [sp, #104]	; 0x68
   880e0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   880e2:	4690      	mov	r8, r2
   880e4:	18fb      	adds	r3, r7, r3
   880e6:	429e      	cmp	r6, r3
   880e8:	4632      	mov	r2, r6
   880ea:	bf28      	it	cs
   880ec:	461a      	movcs	r2, r3
   880ee:	4604      	mov	r4, r0
   880f0:	4616      	mov	r6, r2
   880f2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   880f6:	f7ff bb3f 	b.w	87778 <_svfprintf_r+0xb90>
   880fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   880fc:	1cd8      	adds	r0, r3, #3
   880fe:	9310      	str	r3, [sp, #64]	; 0x40
   88100:	db02      	blt.n	88108 <_svfprintf_r+0x1520>
   88102:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88104:	4293      	cmp	r3, r2
   88106:	dd04      	ble.n	88112 <_svfprintf_r+0x152a>
   88108:	3e02      	subs	r6, #2
   8810a:	f026 0320 	bic.w	r3, r6, #32
   8810e:	9308      	str	r3, [sp, #32]
   88110:	e49b      	b.n	87a4a <_svfprintf_r+0xe62>
   88112:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88114:	9913      	ldr	r1, [sp, #76]	; 0x4c
   88116:	428b      	cmp	r3, r1
   88118:	f2c0 817a 	blt.w	88410 <_svfprintf_r+0x1828>
   8811c:	07ea      	lsls	r2, r5, #31
   8811e:	f140 8283 	bpl.w	88628 <_svfprintf_r+0x1a40>
   88122:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88124:	4413      	add	r3, r2
   88126:	930c      	str	r3, [sp, #48]	; 0x30
   88128:	056e      	lsls	r6, r5, #21
   8812a:	f140 8277 	bpl.w	8861c <_svfprintf_r+0x1a34>
   8812e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88130:	2b00      	cmp	r3, #0
   88132:	f300 8210 	bgt.w	88556 <_svfprintf_r+0x196e>
   88136:	2667      	movs	r6, #103	; 0x67
   88138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8813a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8813e:	9308      	str	r3, [sp, #32]
   88140:	2300      	movs	r3, #0
   88142:	9312      	str	r3, [sp, #72]	; 0x48
   88144:	9316      	str	r3, [sp, #88]	; 0x58
   88146:	e4e4      	b.n	87b12 <_svfprintf_r+0xf2a>
   88148:	222d      	movs	r2, #45	; 0x2d
   8814a:	2300      	movs	r3, #0
   8814c:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   88150:	9309      	str	r3, [sp, #36]	; 0x24
   88152:	f7fe bf70 	b.w	87036 <_svfprintf_r+0x44e>
   88156:	bf00      	nop
   88158:	0008d45c 	.word	0x0008d45c
   8815c:	0008d470 	.word	0x0008d470
   88160:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88162:	42a3      	cmp	r3, r4
   88164:	f4bf ac65 	bcs.w	87a32 <_svfprintf_r+0xe4a>
   88168:	2130      	movs	r1, #48	; 0x30
   8816a:	1c5a      	adds	r2, r3, #1
   8816c:	9228      	str	r2, [sp, #160]	; 0xa0
   8816e:	7019      	strb	r1, [r3, #0]
   88170:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88172:	429c      	cmp	r4, r3
   88174:	d8f9      	bhi.n	8816a <_svfprintf_r+0x1582>
   88176:	e45c      	b.n	87a32 <_svfprintf_r+0xe4a>
   88178:	4651      	mov	r1, sl
   8817a:	4648      	mov	r0, r9
   8817c:	aa2a      	add	r2, sp, #168	; 0xa8
   8817e:	f004 f979 	bl	8c474 <__ssprint_r>
   88182:	2800      	cmp	r0, #0
   88184:	f47f a978 	bne.w	87478 <_svfprintf_r+0x890>
   88188:	783b      	ldrb	r3, [r7, #0]
   8818a:	982c      	ldr	r0, [sp, #176]	; 0xb0
   8818c:	aa2d      	add	r2, sp, #180	; 0xb4
   8818e:	441e      	add	r6, r3
   88190:	e5a4      	b.n	87cdc <_svfprintf_r+0x10f4>
   88192:	4651      	mov	r1, sl
   88194:	4648      	mov	r0, r9
   88196:	aa2a      	add	r2, sp, #168	; 0xa8
   88198:	f004 f96c 	bl	8c474 <__ssprint_r>
   8819c:	2800      	cmp	r0, #0
   8819e:	f47f a96b 	bne.w	87478 <_svfprintf_r+0x890>
   881a2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   881a4:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   881a8:	f7ff bad7 	b.w	8775a <_svfprintf_r+0xb72>
   881ac:	4651      	mov	r1, sl
   881ae:	4648      	mov	r0, r9
   881b0:	aa2a      	add	r2, sp, #168	; 0xa8
   881b2:	f004 f95f 	bl	8c474 <__ssprint_r>
   881b6:	2800      	cmp	r0, #0
   881b8:	f47f a95e 	bne.w	87478 <_svfprintf_r+0x890>
   881bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   881be:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   881c0:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   881c4:	f7ff baee 	b.w	877a4 <_svfprintf_r+0xbbc>
   881c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   881ca:	a928      	add	r1, sp, #160	; 0xa0
   881cc:	e9cd 0400 	strd	r0, r4, [sp]
   881d0:	9104      	str	r1, [sp, #16]
   881d2:	a825      	add	r0, sp, #148	; 0x94
   881d4:	a924      	add	r1, sp, #144	; 0x90
   881d6:	e9cd 1002 	strd	r1, r0, [sp, #8]
   881da:	4648      	mov	r0, r9
   881dc:	f001 facc 	bl	89778 <_dtoa_r>
   881e0:	2d47      	cmp	r5, #71	; 0x47
   881e2:	4607      	mov	r7, r0
   881e4:	d119      	bne.n	8821a <_svfprintf_r+0x1632>
   881e6:	9d07      	ldr	r5, [sp, #28]
   881e8:	462b      	mov	r3, r5
   881ea:	07db      	lsls	r3, r3, #31
   881ec:	f100 812a 	bmi.w	88444 <_svfprintf_r+0x185c>
   881f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   881f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   881f4:	9207      	str	r2, [sp, #28]
   881f6:	2247      	movs	r2, #71	; 0x47
   881f8:	9208      	str	r2, [sp, #32]
   881fa:	e41a      	b.n	87a32 <_svfprintf_r+0xe4a>
   881fc:	2003      	movs	r0, #3
   881fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
   88200:	a928      	add	r1, sp, #160	; 0xa0
   88202:	e9cd 0400 	strd	r0, r4, [sp]
   88206:	9104      	str	r1, [sp, #16]
   88208:	a825      	add	r0, sp, #148	; 0x94
   8820a:	a924      	add	r1, sp, #144	; 0x90
   8820c:	e9cd 1002 	strd	r1, r0, [sp, #8]
   88210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88212:	4648      	mov	r0, r9
   88214:	f001 fab0 	bl	89778 <_dtoa_r>
   88218:	4607      	mov	r7, r0
   8821a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8821c:	2d46      	cmp	r5, #70	; 0x46
   8821e:	eb07 0403 	add.w	r4, r7, r3
   88222:	f47f abf9 	bne.w	87a18 <_svfprintf_r+0xe30>
   88226:	783b      	ldrb	r3, [r7, #0]
   88228:	2b30      	cmp	r3, #48	; 0x30
   8822a:	f000 821c 	beq.w	88666 <_svfprintf_r+0x1a7e>
   8822e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88230:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88232:	9d07      	ldr	r5, [sp, #28]
   88234:	441c      	add	r4, r3
   88236:	9207      	str	r2, [sp, #28]
   88238:	f7ff bbf1 	b.w	87a1e <_svfprintf_r+0xe36>
   8823c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   88240:	f7ff b9c3 	b.w	875ca <_svfprintf_r+0x9e2>
   88244:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88246:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   8824a:	9308      	str	r3, [sp, #32]
   8824c:	930c      	str	r3, [sp, #48]	; 0x30
   8824e:	9009      	str	r0, [sp, #36]	; 0x24
   88250:	940e      	str	r4, [sp, #56]	; 0x38
   88252:	9012      	str	r0, [sp, #72]	; 0x48
   88254:	9016      	str	r0, [sp, #88]	; 0x58
   88256:	9010      	str	r0, [sp, #64]	; 0x40
   88258:	f7fe beea 	b.w	87030 <_svfprintf_r+0x448>
   8825c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   8825e:	2a00      	cmp	r2, #0
   88260:	9210      	str	r2, [sp, #64]	; 0x40
   88262:	f340 821b 	ble.w	8869c <_svfprintf_r+0x1ab4>
   88266:	9909      	ldr	r1, [sp, #36]	; 0x24
   88268:	f005 0301 	and.w	r3, r5, #1
   8826c:	430b      	orrs	r3, r1
   8826e:	f040 819a 	bne.w	885a6 <_svfprintf_r+0x19be>
   88272:	2666      	movs	r6, #102	; 0x66
   88274:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88276:	930c      	str	r3, [sp, #48]	; 0x30
   88278:	056a      	lsls	r2, r5, #21
   8827a:	f100 816d 	bmi.w	88558 <_svfprintf_r+0x1970>
   8827e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88284:	9308      	str	r3, [sp, #32]
   88286:	e75b      	b.n	88140 <_svfprintf_r+0x1558>
   88288:	4651      	mov	r1, sl
   8828a:	4648      	mov	r0, r9
   8828c:	aa2a      	add	r2, sp, #168	; 0xa8
   8828e:	f004 f8f1 	bl	8c474 <__ssprint_r>
   88292:	2800      	cmp	r0, #0
   88294:	f47f a8f0 	bne.w	87478 <_svfprintf_r+0x890>
   88298:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8829a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8829c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8829e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   882a2:	1ad3      	subs	r3, r2, r3
   882a4:	f7ff ba93 	b.w	877ce <_svfprintf_r+0xbe6>
   882a8:	2330      	movs	r3, #48	; 0x30
   882aa:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   882ae:	2358      	movs	r3, #88	; 0x58
   882b0:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   882b4:	9b07      	ldr	r3, [sp, #28]
   882b6:	f043 0402 	orr.w	r4, r3, #2
   882ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
   882bc:	2b63      	cmp	r3, #99	; 0x63
   882be:	f300 80f2 	bgt.w	884a6 <_svfprintf_r+0x18be>
   882c2:	2300      	movs	r3, #0
   882c4:	af3d      	add	r7, sp, #244	; 0xf4
   882c6:	930d      	str	r3, [sp, #52]	; 0x34
   882c8:	9b07      	ldr	r3, [sp, #28]
   882ca:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   882ce:	f443 7381 	orr.w	r3, r3, #258	; 0x102
   882d2:	9312      	str	r3, [sp, #72]	; 0x48
   882d4:	4613      	mov	r3, r2
   882d6:	2b00      	cmp	r3, #0
   882d8:	f026 0520 	bic.w	r5, r6, #32
   882dc:	9407      	str	r4, [sp, #28]
   882de:	f2c0 808d 	blt.w	883fc <_svfprintf_r+0x1814>
   882e2:	930f      	str	r3, [sp, #60]	; 0x3c
   882e4:	2300      	movs	r3, #0
   882e6:	9508      	str	r5, [sp, #32]
   882e8:	910c      	str	r1, [sp, #48]	; 0x30
   882ea:	931e      	str	r3, [sp, #120]	; 0x78
   882ec:	2e61      	cmp	r6, #97	; 0x61
   882ee:	f000 817d 	beq.w	885ec <_svfprintf_r+0x1a04>
   882f2:	2e41      	cmp	r6, #65	; 0x41
   882f4:	f47f ab77 	bne.w	879e6 <_svfprintf_r+0xdfe>
   882f8:	aa24      	add	r2, sp, #144	; 0x90
   882fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   882fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   882fe:	f003 ffc7 	bl	8c290 <frexp>
   88302:	2200      	movs	r2, #0
   88304:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   88308:	f004 fd4e 	bl	8cda8 <__aeabi_dmul>
   8830c:	4604      	mov	r4, r0
   8830e:	460d      	mov	r5, r1
   88310:	2200      	movs	r2, #0
   88312:	2300      	movs	r3, #0
   88314:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   88318:	f004 ffae 	bl	8d278 <__aeabi_dcmpeq>
   8831c:	b108      	cbz	r0, 88322 <_svfprintf_r+0x173a>
   8831e:	2301      	movs	r3, #1
   88320:	9324      	str	r3, [sp, #144]	; 0x90
   88322:	4bae      	ldr	r3, [pc, #696]	; (885dc <_svfprintf_r+0x19f4>)
   88324:	930c      	str	r3, [sp, #48]	; 0x30
   88326:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88328:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   8832c:	3b01      	subs	r3, #1
   8832e:	9613      	str	r6, [sp, #76]	; 0x4c
   88330:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
   88334:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
   88338:	9721      	str	r7, [sp, #132]	; 0x84
   8833a:	46ba      	mov	sl, r7
   8833c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   88340:	4699      	mov	r9, r3
   88342:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   88346:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   8834a:	e006      	b.n	8835a <_svfprintf_r+0x1772>
   8834c:	2200      	movs	r2, #0
   8834e:	2300      	movs	r3, #0
   88350:	f004 ff92 	bl	8d278 <__aeabi_dcmpeq>
   88354:	f109 39ff 	add.w	r9, r9, #4294967295
   88358:	b9e8      	cbnz	r0, 88396 <_svfprintf_r+0x17ae>
   8835a:	2200      	movs	r2, #0
   8835c:	4ba0      	ldr	r3, [pc, #640]	; (885e0 <_svfprintf_r+0x19f8>)
   8835e:	4630      	mov	r0, r6
   88360:	4639      	mov	r1, r7
   88362:	f004 fd21 	bl	8cda8 <__aeabi_dmul>
   88366:	460d      	mov	r5, r1
   88368:	4604      	mov	r4, r0
   8836a:	f004 ffcd 	bl	8d308 <__aeabi_d2iz>
   8836e:	4680      	mov	r8, r0
   88370:	f004 fcb0 	bl	8ccd4 <__aeabi_i2d>
   88374:	460b      	mov	r3, r1
   88376:	4602      	mov	r2, r0
   88378:	4629      	mov	r1, r5
   8837a:	4620      	mov	r0, r4
   8837c:	f004 fb5c 	bl	8ca38 <__aeabi_dsub>
   88380:	f81b 3008 	ldrb.w	r3, [fp, r8]
   88384:	f1b9 3fff 	cmp.w	r9, #4294967295
   88388:	4655      	mov	r5, sl
   8838a:	4606      	mov	r6, r0
   8838c:	460f      	mov	r7, r1
   8838e:	464c      	mov	r4, r9
   88390:	f80a 3b01 	strb.w	r3, [sl], #1
   88394:	d1da      	bne.n	8834c <_svfprintf_r+0x1764>
   88396:	4630      	mov	r0, r6
   88398:	4639      	mov	r1, r7
   8839a:	2200      	movs	r2, #0
   8839c:	4b91      	ldr	r3, [pc, #580]	; (885e4 <_svfprintf_r+0x19fc>)
   8839e:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   883a2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   883a4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   883a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   883ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   883b0:	e9dd 9a1f 	ldrd	r9, sl, [sp, #124]	; 0x7c
   883b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   883b8:	9f21      	ldr	r7, [sp, #132]	; 0x84
   883ba:	f004 ff85 	bl	8d2c8 <__aeabi_dcmpgt>
   883be:	2800      	cmp	r0, #0
   883c0:	d155      	bne.n	8846e <_svfprintf_r+0x1886>
   883c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   883c6:	2200      	movs	r2, #0
   883c8:	4b86      	ldr	r3, [pc, #536]	; (885e4 <_svfprintf_r+0x19fc>)
   883ca:	f004 ff55 	bl	8d278 <__aeabi_dcmpeq>
   883ce:	b110      	cbz	r0, 883d6 <_svfprintf_r+0x17ee>
   883d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   883d2:	07db      	lsls	r3, r3, #31
   883d4:	d44b      	bmi.n	8846e <_svfprintf_r+0x1886>
   883d6:	2c00      	cmp	r4, #0
   883d8:	db08      	blt.n	883ec <_svfprintf_r+0x1804>
   883da:	2230      	movs	r2, #48	; 0x30
   883dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   883de:	1c63      	adds	r3, r4, #1
   883e0:	440b      	add	r3, r1
   883e2:	f801 2b01 	strb.w	r2, [r1], #1
   883e6:	428b      	cmp	r3, r1
   883e8:	d1fb      	bne.n	883e2 <_svfprintf_r+0x17fa>
   883ea:	910f      	str	r1, [sp, #60]	; 0x3c
   883ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   883ee:	9d07      	ldr	r5, [sp, #28]
   883f0:	1bdb      	subs	r3, r3, r7
   883f2:	9313      	str	r3, [sp, #76]	; 0x4c
   883f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   883f6:	9307      	str	r3, [sp, #28]
   883f8:	f7ff bb1d 	b.w	87a36 <_svfprintf_r+0xe4e>
   883fc:	9508      	str	r5, [sp, #32]
   883fe:	232d      	movs	r3, #45	; 0x2d
   88400:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   88404:	931e      	str	r3, [sp, #120]	; 0x78
   88406:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   8840a:	910c      	str	r1, [sp, #48]	; 0x30
   8840c:	930f      	str	r3, [sp, #60]	; 0x3c
   8840e:	e76d      	b.n	882ec <_svfprintf_r+0x1704>
   88410:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   88412:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   88414:	189a      	adds	r2, r3, r2
   88416:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88418:	920c      	str	r2, [sp, #48]	; 0x30
   8841a:	2b00      	cmp	r3, #0
   8841c:	f340 811a 	ble.w	88654 <_svfprintf_r+0x1a6c>
   88420:	2667      	movs	r6, #103	; 0x67
   88422:	e729      	b.n	88278 <_svfprintf_r+0x1690>
   88424:	2300      	movs	r3, #0
   88426:	9309      	str	r3, [sp, #36]	; 0x24
   88428:	f7fe bc2b 	b.w	86c82 <_svfprintf_r+0x9a>
   8842c:	4648      	mov	r0, r9
   8842e:	4651      	mov	r1, sl
   88430:	aa2a      	add	r2, sp, #168	; 0xa8
   88432:	f004 f81f 	bl	8c474 <__ssprint_r>
   88436:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   8843a:	f7fe bdae 	b.w	86f9a <_svfprintf_r+0x3b2>
   8843e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   88440:	f7ff b95f 	b.w	87702 <_svfprintf_r+0xb1a>
   88444:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88446:	9d07      	ldr	r5, [sp, #28]
   88448:	18fc      	adds	r4, r7, r3
   8844a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8844c:	9307      	str	r3, [sp, #28]
   8844e:	2347      	movs	r3, #71	; 0x47
   88450:	9308      	str	r3, [sp, #32]
   88452:	f7ff bae4 	b.w	87a1e <_svfprintf_r+0xe36>
   88456:	46cb      	mov	fp, r9
   88458:	46d1      	mov	r9, sl
   8845a:	f7ff b80e 	b.w	8747a <_svfprintf_r+0x892>
   8845e:	46d1      	mov	r9, sl
   88460:	f7ff b80b 	b.w	8747a <_svfprintf_r+0x892>
   88464:	4b60      	ldr	r3, [pc, #384]	; (885e8 <_svfprintf_r+0x1a00>)
   88466:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   88468:	930f      	str	r3, [sp, #60]	; 0x3c
   8846a:	f7fe bfb7 	b.w	873dc <_svfprintf_r+0x7f4>
   8846e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88470:	990c      	ldr	r1, [sp, #48]	; 0x30
   88472:	9528      	str	r5, [sp, #160]	; 0xa0
   88474:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88478:	7bc9      	ldrb	r1, [r1, #15]
   8847a:	428a      	cmp	r2, r1
   8847c:	f040 812a 	bne.w	886d4 <_svfprintf_r+0x1aec>
   88480:	2030      	movs	r0, #48	; 0x30
   88482:	f803 0c01 	strb.w	r0, [r3, #-1]
   88486:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   88488:	1e5a      	subs	r2, r3, #1
   8848a:	9228      	str	r2, [sp, #160]	; 0xa0
   8848c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88490:	4291      	cmp	r1, r2
   88492:	d0f6      	beq.n	88482 <_svfprintf_r+0x189a>
   88494:	2a39      	cmp	r2, #57	; 0x39
   88496:	bf0b      	itete	eq
   88498:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   8849a:	3201      	addne	r2, #1
   8849c:	7a92      	ldrbeq	r2, [r2, #10]
   8849e:	b2d2      	uxtbne	r2, r2
   884a0:	f803 2c01 	strb.w	r2, [r3, #-1]
   884a4:	e7a2      	b.n	883ec <_svfprintf_r+0x1804>
   884a6:	4648      	mov	r0, r9
   884a8:	1c59      	adds	r1, r3, #1
   884aa:	f002 fe0b 	bl	8b0c4 <_malloc_r>
   884ae:	4607      	mov	r7, r0
   884b0:	2800      	cmp	r0, #0
   884b2:	f000 811d 	beq.w	886f0 <_svfprintf_r+0x1b08>
   884b6:	900d      	str	r0, [sp, #52]	; 0x34
   884b8:	e706      	b.n	882c8 <_svfprintf_r+0x16e0>
   884ba:	2330      	movs	r3, #48	; 0x30
   884bc:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   884c0:	2378      	movs	r3, #120	; 0x78
   884c2:	e6f5      	b.n	882b0 <_svfprintf_r+0x16c8>
   884c4:	9b07      	ldr	r3, [sp, #28]
   884c6:	9308      	str	r3, [sp, #32]
   884c8:	f7ff b894 	b.w	875f4 <_svfprintf_r+0xa0c>
   884cc:	464a      	mov	r2, r9
   884ce:	46d1      	mov	r9, sl
   884d0:	4692      	mov	sl, r2
   884d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   884d4:	3301      	adds	r3, #1
   884d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   884d8:	442c      	add	r4, r5
   884da:	2b07      	cmp	r3, #7
   884dc:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   884e0:	e9c8 2500 	strd	r2, r5, [r8]
   884e4:	f77f a8b8 	ble.w	87658 <_svfprintf_r+0xa70>
   884e8:	4651      	mov	r1, sl
   884ea:	4648      	mov	r0, r9
   884ec:	aa2a      	add	r2, sp, #168	; 0xa8
   884ee:	f003 ffc1 	bl	8c474 <__ssprint_r>
   884f2:	2800      	cmp	r0, #0
   884f4:	f47e afc0 	bne.w	87478 <_svfprintf_r+0x890>
   884f8:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   884fc:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   88500:	f7ff b8ac 	b.w	8765c <_svfprintf_r+0xa74>
   88504:	2b00      	cmp	r3, #0
   88506:	bf08      	it	eq
   88508:	2301      	moveq	r3, #1
   8850a:	9309      	str	r3, [sp, #36]	; 0x24
   8850c:	9b07      	ldr	r3, [sp, #28]
   8850e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   88512:	9312      	str	r3, [sp, #72]	; 0x48
   88514:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88516:	2b00      	cmp	r3, #0
   88518:	930c      	str	r3, [sp, #48]	; 0x30
   8851a:	f2c0 80bd 	blt.w	88698 <_svfprintf_r+0x1ab0>
   8851e:	2402      	movs	r4, #2
   88520:	9d09      	ldr	r5, [sp, #36]	; 0x24
   88522:	a828      	add	r0, sp, #160	; 0xa0
   88524:	aa25      	add	r2, sp, #148	; 0x94
   88526:	ab24      	add	r3, sp, #144	; 0x90
   88528:	e9cd 2003 	strd	r2, r0, [sp, #12]
   8852c:	e9cd 4500 	strd	r4, r5, [sp]
   88530:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
   88534:	9302      	str	r3, [sp, #8]
   88536:	4622      	mov	r2, r4
   88538:	462b      	mov	r3, r5
   8853a:	4648      	mov	r0, r9
   8853c:	911e      	str	r1, [sp, #120]	; 0x78
   8853e:	f001 f91b 	bl	89778 <_dtoa_r>
   88542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88544:	4607      	mov	r7, r0
   88546:	930f      	str	r3, [sp, #60]	; 0x3c
   88548:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   8854a:	940c      	str	r4, [sp, #48]	; 0x30
   8854c:	930d      	str	r3, [sp, #52]	; 0x34
   8854e:	e64a      	b.n	881e6 <_svfprintf_r+0x15fe>
   88550:	2300      	movs	r3, #0
   88552:	930d      	str	r3, [sp, #52]	; 0x34
   88554:	e753      	b.n	883fe <_svfprintf_r+0x1816>
   88556:	2667      	movs	r6, #103	; 0x67
   88558:	991a      	ldr	r1, [sp, #104]	; 0x68
   8855a:	780b      	ldrb	r3, [r1, #0]
   8855c:	2bff      	cmp	r3, #255	; 0xff
   8855e:	f000 80de 	beq.w	8871e <_svfprintf_r+0x1b36>
   88562:	2400      	movs	r4, #0
   88564:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88566:	4620      	mov	r0, r4
   88568:	e003      	b.n	88572 <_svfprintf_r+0x198a>
   8856a:	3001      	adds	r0, #1
   8856c:	3101      	adds	r1, #1
   8856e:	2bff      	cmp	r3, #255	; 0xff
   88570:	d008      	beq.n	88584 <_svfprintf_r+0x199c>
   88572:	4293      	cmp	r3, r2
   88574:	da06      	bge.n	88584 <_svfprintf_r+0x199c>
   88576:	1ad2      	subs	r2, r2, r3
   88578:	784b      	ldrb	r3, [r1, #1]
   8857a:	2b00      	cmp	r3, #0
   8857c:	d1f5      	bne.n	8856a <_svfprintf_r+0x1982>
   8857e:	780b      	ldrb	r3, [r1, #0]
   88580:	3401      	adds	r4, #1
   88582:	e7f4      	b.n	8856e <_svfprintf_r+0x1986>
   88584:	911a      	str	r1, [sp, #104]	; 0x68
   88586:	9210      	str	r2, [sp, #64]	; 0x40
   88588:	9016      	str	r0, [sp, #88]	; 0x58
   8858a:	9412      	str	r4, [sp, #72]	; 0x48
   8858c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8858e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   88590:	990c      	ldr	r1, [sp, #48]	; 0x30
   88592:	4413      	add	r3, r2
   88594:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   88596:	fb02 1303 	mla	r3, r2, r3, r1
   8859a:	930c      	str	r3, [sp, #48]	; 0x30
   8859c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   885a0:	9308      	str	r3, [sp, #32]
   885a2:	f7ff bab6 	b.w	87b12 <_svfprintf_r+0xf2a>
   885a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   885a8:	2666      	movs	r6, #102	; 0x66
   885aa:	18d3      	adds	r3, r2, r3
   885ac:	4419      	add	r1, r3
   885ae:	910c      	str	r1, [sp, #48]	; 0x30
   885b0:	e662      	b.n	88278 <_svfprintf_r+0x1690>
   885b2:	f106 020f 	add.w	r2, r6, #15
   885b6:	2101      	movs	r1, #1
   885b8:	b2d2      	uxtb	r2, r2
   885ba:	f7ff ba4f 	b.w	87a5c <_svfprintf_r+0xe74>
   885be:	2900      	cmp	r1, #0
   885c0:	d167      	bne.n	88692 <_svfprintf_r+0x1aaa>
   885c2:	2230      	movs	r2, #48	; 0x30
   885c4:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   885c8:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   885cc:	3330      	adds	r3, #48	; 0x30
   885ce:	f802 3b01 	strb.w	r3, [r2], #1
   885d2:	ab26      	add	r3, sp, #152	; 0x98
   885d4:	1ad3      	subs	r3, r2, r3
   885d6:	931b      	str	r3, [sp, #108]	; 0x6c
   885d8:	f7ff ba83 	b.w	87ae2 <_svfprintf_r+0xefa>
   885dc:	0008d440 	.word	0x0008d440
   885e0:	40300000 	.word	0x40300000
   885e4:	3fe00000 	.word	0x3fe00000
   885e8:	0008d470 	.word	0x0008d470
   885ec:	aa24      	add	r2, sp, #144	; 0x90
   885ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   885f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   885f2:	f003 fe4d 	bl	8c290 <frexp>
   885f6:	2200      	movs	r2, #0
   885f8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   885fc:	f004 fbd4 	bl	8cda8 <__aeabi_dmul>
   88600:	4604      	mov	r4, r0
   88602:	460d      	mov	r5, r1
   88604:	2200      	movs	r2, #0
   88606:	2300      	movs	r3, #0
   88608:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
   8860c:	f004 fe34 	bl	8d278 <__aeabi_dcmpeq>
   88610:	b108      	cbz	r0, 88616 <_svfprintf_r+0x1a2e>
   88612:	2301      	movs	r3, #1
   88614:	9324      	str	r3, [sp, #144]	; 0x90
   88616:	4b44      	ldr	r3, [pc, #272]	; (88728 <_svfprintf_r+0x1b40>)
   88618:	930c      	str	r3, [sp, #48]	; 0x30
   8861a:	e684      	b.n	88326 <_svfprintf_r+0x173e>
   8861c:	2667      	movs	r6, #103	; 0x67
   8861e:	e62e      	b.n	8827e <_svfprintf_r+0x1696>
   88620:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   88624:	f7fe bcb9 	b.w	86f9a <_svfprintf_r+0x3b2>
   88628:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8862a:	930c      	str	r3, [sp, #48]	; 0x30
   8862c:	e57c      	b.n	88128 <_svfprintf_r+0x1540>
   8862e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88630:	2003      	movs	r0, #3
   88632:	2b00      	cmp	r3, #0
   88634:	bfb8      	it	lt
   88636:	232d      	movlt	r3, #45	; 0x2d
   88638:	f04f 0100 	mov.w	r1, #0
   8863c:	bfba      	itte	lt
   8863e:	461a      	movlt	r2, r3
   88640:	f88d 308b 	strblt.w	r3, [sp, #139]	; 0x8b
   88644:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   88648:	4f38      	ldr	r7, [pc, #224]	; (8872c <_svfprintf_r+0x1b44>)
   8864a:	4b39      	ldr	r3, [pc, #228]	; (88730 <_svfprintf_r+0x1b48>)
   8864c:	9008      	str	r0, [sp, #32]
   8864e:	910d      	str	r1, [sp, #52]	; 0x34
   88650:	f7fe bce2 	b.w	87018 <_svfprintf_r+0x430>
   88654:	f1c3 0301 	rsb	r3, r3, #1
   88658:	441a      	add	r2, r3
   8865a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8865e:	2667      	movs	r6, #103	; 0x67
   88660:	920c      	str	r2, [sp, #48]	; 0x30
   88662:	9308      	str	r3, [sp, #32]
   88664:	e56c      	b.n	88140 <_svfprintf_r+0x1558>
   88666:	2200      	movs	r2, #0
   88668:	2300      	movs	r3, #0
   8866a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8866c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8866e:	f004 fe03 	bl	8d278 <__aeabi_dcmpeq>
   88672:	2800      	cmp	r0, #0
   88674:	f47f addb 	bne.w	8822e <_svfprintf_r+0x1646>
   88678:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8867a:	f1c3 0301 	rsb	r3, r3, #1
   8867e:	9324      	str	r3, [sp, #144]	; 0x90
   88680:	e5d6      	b.n	88230 <_svfprintf_r+0x1648>
   88682:	992b      	ldr	r1, [sp, #172]	; 0xac
   88684:	f7ff bb59 	b.w	87d3a <_svfprintf_r+0x1152>
   88688:	07e9      	lsls	r1, r5, #31
   8868a:	f57f aa35 	bpl.w	87af8 <_svfprintf_r+0xf10>
   8868e:	f7ff ba2f 	b.w	87af0 <_svfprintf_r+0xf08>
   88692:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   88696:	e799      	b.n	885cc <_svfprintf_r+0x19e4>
   88698:	900d      	str	r0, [sp, #52]	; 0x34
   8869a:	e6b0      	b.n	883fe <_svfprintf_r+0x1816>
   8869c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8869e:	f005 0501 	and.w	r5, r5, #1
   886a2:	4613      	mov	r3, r2
   886a4:	432b      	orrs	r3, r5
   886a6:	d104      	bne.n	886b2 <_svfprintf_r+0x1aca>
   886a8:	2301      	movs	r3, #1
   886aa:	2666      	movs	r6, #102	; 0x66
   886ac:	9308      	str	r3, [sp, #32]
   886ae:	930c      	str	r3, [sp, #48]	; 0x30
   886b0:	e546      	b.n	88140 <_svfprintf_r+0x1558>
   886b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   886b4:	2666      	movs	r6, #102	; 0x66
   886b6:	3301      	adds	r3, #1
   886b8:	441a      	add	r2, r3
   886ba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   886be:	920c      	str	r2, [sp, #48]	; 0x30
   886c0:	9308      	str	r3, [sp, #32]
   886c2:	e53d      	b.n	88140 <_svfprintf_r+0x1558>
   886c4:	4b1b      	ldr	r3, [pc, #108]	; (88734 <_svfprintf_r+0x1b4c>)
   886c6:	930f      	str	r3, [sp, #60]	; 0x3c
   886c8:	f7ff bbe9 	b.w	87e9e <_svfprintf_r+0x12b6>
   886cc:	4a19      	ldr	r2, [pc, #100]	; (88734 <_svfprintf_r+0x1b4c>)
   886ce:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   886d0:	920f      	str	r2, [sp, #60]	; 0x3c
   886d2:	e4b1      	b.n	88038 <_svfprintf_r+0x1450>
   886d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   886d6:	e6dd      	b.n	88494 <_svfprintf_r+0x18ac>
   886d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   886da:	f89b 6001 	ldrb.w	r6, [fp, #1]
   886de:	f853 0b04 	ldr.w	r0, [r3], #4
   886e2:	4693      	mov	fp, r2
   886e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   886e8:	9009      	str	r0, [sp, #36]	; 0x24
   886ea:	930e      	str	r3, [sp, #56]	; 0x38
   886ec:	f7fe bac7 	b.w	86c7e <_svfprintf_r+0x96>
   886f0:	f8ba 300c 	ldrh.w	r3, [sl, #12]
   886f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   886f8:	f8aa 300c 	strh.w	r3, [sl, #12]
   886fc:	f7fe bc4d 	b.w	86f9a <_svfprintf_r+0x3b2>
   88700:	4a0c      	ldr	r2, [pc, #48]	; (88734 <_svfprintf_r+0x1b4c>)
   88702:	920f      	str	r2, [sp, #60]	; 0x3c
   88704:	e6e6      	b.n	884d4 <_svfprintf_r+0x18ec>
   88706:	230c      	movs	r3, #12
   88708:	f04f 32ff 	mov.w	r2, #4294967295
   8870c:	f8c9 3000 	str.w	r3, [r9]
   88710:	920a      	str	r2, [sp, #40]	; 0x28
   88712:	f7fe bc49 	b.w	86fa8 <_svfprintf_r+0x3c0>
   88716:	2302      	movs	r3, #2
   88718:	931b      	str	r3, [sp, #108]	; 0x6c
   8871a:	f7ff b9e2 	b.w	87ae2 <_svfprintf_r+0xefa>
   8871e:	2300      	movs	r3, #0
   88720:	9312      	str	r3, [sp, #72]	; 0x48
   88722:	9316      	str	r3, [sp, #88]	; 0x58
   88724:	e732      	b.n	8858c <_svfprintf_r+0x19a4>
   88726:	bf00      	nop
   88728:	0008d42c 	.word	0x0008d42c
   8872c:	0008d424 	.word	0x0008d424
   88730:	0008d428 	.word	0x0008d428
   88734:	0008d470 	.word	0x0008d470

00088738 <__sprint_r.part.0>:
   88738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8873c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8873e:	4690      	mov	r8, r2
   88740:	049c      	lsls	r4, r3, #18
   88742:	d52d      	bpl.n	887a0 <__sprint_r.part.0+0x68>
   88744:	6893      	ldr	r3, [r2, #8]
   88746:	6812      	ldr	r2, [r2, #0]
   88748:	b343      	cbz	r3, 8879c <__sprint_r.part.0+0x64>
   8874a:	468b      	mov	fp, r1
   8874c:	4606      	mov	r6, r0
   8874e:	f102 0908 	add.w	r9, r2, #8
   88752:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   88756:	ea5f 079a 	movs.w	r7, sl, lsr #2
   8875a:	d015      	beq.n	88788 <__sprint_r.part.0+0x50>
   8875c:	2400      	movs	r4, #0
   8875e:	3d04      	subs	r5, #4
   88760:	e001      	b.n	88766 <__sprint_r.part.0+0x2e>
   88762:	42a7      	cmp	r7, r4
   88764:	d00e      	beq.n	88784 <__sprint_r.part.0+0x4c>
   88766:	465a      	mov	r2, fp
   88768:	4630      	mov	r0, r6
   8876a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8876e:	f002 f8fb 	bl	8a968 <_fputwc_r>
   88772:	1c43      	adds	r3, r0, #1
   88774:	f104 0401 	add.w	r4, r4, #1
   88778:	d1f3      	bne.n	88762 <__sprint_r.part.0+0x2a>
   8877a:	2300      	movs	r3, #0
   8877c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   88780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88784:	f8d8 3008 	ldr.w	r3, [r8, #8]
   88788:	f02a 0a03 	bic.w	sl, sl, #3
   8878c:	eba3 030a 	sub.w	r3, r3, sl
   88790:	f8c8 3008 	str.w	r3, [r8, #8]
   88794:	f109 0908 	add.w	r9, r9, #8
   88798:	2b00      	cmp	r3, #0
   8879a:	d1da      	bne.n	88752 <__sprint_r.part.0+0x1a>
   8879c:	2000      	movs	r0, #0
   8879e:	e7ec      	b.n	8877a <__sprint_r.part.0+0x42>
   887a0:	f002 fa6c 	bl	8ac7c <__sfvwrite_r>
   887a4:	2300      	movs	r3, #0
   887a6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   887aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   887ae:	bf00      	nop

000887b0 <_vfiprintf_r>:
   887b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   887b4:	b0bb      	sub	sp, #236	; 0xec
   887b6:	461c      	mov	r4, r3
   887b8:	4689      	mov	r9, r1
   887ba:	4690      	mov	r8, r2
   887bc:	e9cd 3004 	strd	r3, r0, [sp, #16]
   887c0:	b118      	cbz	r0, 887ca <_vfiprintf_r+0x1a>
   887c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   887c4:	2b00      	cmp	r3, #0
   887c6:	f000 827a 	beq.w	88cbe <_vfiprintf_r+0x50e>
   887ca:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   887ce:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   887d2:	07de      	lsls	r6, r3, #31
   887d4:	b28a      	uxth	r2, r1
   887d6:	d402      	bmi.n	887de <_vfiprintf_r+0x2e>
   887d8:	058d      	lsls	r5, r1, #22
   887da:	f140 851a 	bpl.w	89212 <_vfiprintf_r+0xa62>
   887de:	0490      	lsls	r0, r2, #18
   887e0:	d40a      	bmi.n	887f8 <_vfiprintf_r+0x48>
   887e2:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   887e6:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   887ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   887ee:	f8a9 200c 	strh.w	r2, [r9, #12]
   887f2:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
   887f6:	b292      	uxth	r2, r2
   887f8:	0711      	lsls	r1, r2, #28
   887fa:	f140 80f6 	bpl.w	889ea <_vfiprintf_r+0x23a>
   887fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
   88802:	2b00      	cmp	r3, #0
   88804:	f000 80f1 	beq.w	889ea <_vfiprintf_r+0x23a>
   88808:	f002 031a 	and.w	r3, r2, #26
   8880c:	2b0a      	cmp	r3, #10
   8880e:	f000 80fa 	beq.w	88a06 <_vfiprintf_r+0x256>
   88812:	2300      	movs	r3, #0
   88814:	46cb      	mov	fp, r9
   88816:	e9cd 3308 	strd	r3, r3, [sp, #32]
   8881a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   8881e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   88822:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88826:	9303      	str	r3, [sp, #12]
   88828:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   8882c:	f898 3000 	ldrb.w	r3, [r8]
   88830:	2b00      	cmp	r3, #0
   88832:	f000 81ed 	beq.w	88c10 <_vfiprintf_r+0x460>
   88836:	4644      	mov	r4, r8
   88838:	e004      	b.n	88844 <_vfiprintf_r+0x94>
   8883a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8883e:	2b00      	cmp	r3, #0
   88840:	f000 8127 	beq.w	88a92 <_vfiprintf_r+0x2e2>
   88844:	2b25      	cmp	r3, #37	; 0x25
   88846:	d1f8      	bne.n	8883a <_vfiprintf_r+0x8a>
   88848:	ebb4 0508 	subs.w	r5, r4, r8
   8884c:	f040 8125 	bne.w	88a9a <_vfiprintf_r+0x2ea>
   88850:	7823      	ldrb	r3, [r4, #0]
   88852:	2b00      	cmp	r3, #0
   88854:	f000 81dc 	beq.w	88c10 <_vfiprintf_r+0x460>
   88858:	f04f 0200 	mov.w	r2, #0
   8885c:	2300      	movs	r3, #0
   8885e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88862:	f04f 32ff 	mov.w	r2, #4294967295
   88866:	252b      	movs	r5, #43	; 0x2b
   88868:	461f      	mov	r7, r3
   8886a:	9302      	str	r3, [sp, #8]
   8886c:	7863      	ldrb	r3, [r4, #1]
   8886e:	f104 0801 	add.w	r8, r4, #1
   88872:	9200      	str	r2, [sp, #0]
   88874:	f108 0801 	add.w	r8, r8, #1
   88878:	f1a3 0220 	sub.w	r2, r3, #32
   8887c:	2a5a      	cmp	r2, #90	; 0x5a
   8887e:	f200 8141 	bhi.w	88b04 <_vfiprintf_r+0x354>
   88882:	e8df f012 	tbh	[pc, r2, lsl #1]
   88886:	0272      	.short	0x0272
   88888:	013f013f 	.word	0x013f013f
   8888c:	013f026d 	.word	0x013f026d
   88890:	013f013f 	.word	0x013f013f
   88894:	013f024b 	.word	0x013f024b
   88898:	006a013f 	.word	0x006a013f
   8889c:	013f0227 	.word	0x013f0227
   888a0:	02310222 	.word	0x02310222
   888a4:	022c013f 	.word	0x022c013f
   888a8:	005b005b 	.word	0x005b005b
   888ac:	005b005b 	.word	0x005b005b
   888b0:	005b005b 	.word	0x005b005b
   888b4:	005b005b 	.word	0x005b005b
   888b8:	013f005b 	.word	0x013f005b
   888bc:	013f013f 	.word	0x013f013f
   888c0:	013f013f 	.word	0x013f013f
   888c4:	013f013f 	.word	0x013f013f
   888c8:	013f013f 	.word	0x013f013f
   888cc:	007a020e 	.word	0x007a020e
   888d0:	013f013f 	.word	0x013f013f
   888d4:	013f013f 	.word	0x013f013f
   888d8:	013f013f 	.word	0x013f013f
   888dc:	013f013f 	.word	0x013f013f
   888e0:	013f013f 	.word	0x013f013f
   888e4:	013f00d7 	.word	0x013f00d7
   888e8:	013f013f 	.word	0x013f013f
   888ec:	013f01f2 	.word	0x013f01f2
   888f0:	013f0297 	.word	0x013f0297
   888f4:	0500013f 	.word	0x0500013f
   888f8:	013f013f 	.word	0x013f013f
   888fc:	013f013f 	.word	0x013f013f
   88900:	013f013f 	.word	0x013f013f
   88904:	013f013f 	.word	0x013f013f
   88908:	013f013f 	.word	0x013f013f
   8890c:	007c020e 	.word	0x007c020e
   88910:	013f013f 	.word	0x013f013f
   88914:	028a013f 	.word	0x028a013f
   88918:	0075007c 	.word	0x0075007c
   8891c:	027d013f 	.word	0x027d013f
   88920:	02b6013f 	.word	0x02b6013f
   88924:	02a600d9 	.word	0x02a600d9
   88928:	013f0075 	.word	0x013f0075
   8892c:	007201f2 	.word	0x007201f2
   88930:	013f04fe 	.word	0x013f04fe
   88934:	051c013f 	.word	0x051c013f
   88938:	0072013f 	.word	0x0072013f
   8893c:	2100      	movs	r1, #0
   8893e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88942:	f818 3b01 	ldrb.w	r3, [r8], #1
   88946:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8894a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8894e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88952:	2a09      	cmp	r2, #9
   88954:	d9f5      	bls.n	88942 <_vfiprintf_r+0x192>
   88956:	9102      	str	r1, [sp, #8]
   88958:	e78e      	b.n	88878 <_vfiprintf_r+0xc8>
   8895a:	9b04      	ldr	r3, [sp, #16]
   8895c:	f853 2b04 	ldr.w	r2, [r3], #4
   88960:	2a00      	cmp	r2, #0
   88962:	9202      	str	r2, [sp, #8]
   88964:	9304      	str	r3, [sp, #16]
   88966:	f2c0 81ad 	blt.w	88cc4 <_vfiprintf_r+0x514>
   8896a:	f898 3000 	ldrb.w	r3, [r8]
   8896e:	e781      	b.n	88874 <_vfiprintf_r+0xc4>
   88970:	f898 3000 	ldrb.w	r3, [r8]
   88974:	f047 0720 	orr.w	r7, r7, #32
   88978:	e77c      	b.n	88874 <_vfiprintf_r+0xc4>
   8897a:	f047 0710 	orr.w	r7, r7, #16
   8897e:	06bc      	lsls	r4, r7, #26
   88980:	f140 8158 	bpl.w	88c34 <_vfiprintf_r+0x484>
   88984:	9c04      	ldr	r4, [sp, #16]
   88986:	3407      	adds	r4, #7
   88988:	f024 0307 	bic.w	r3, r4, #7
   8898c:	4619      	mov	r1, r3
   8898e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
   88992:	4614      	mov	r4, r2
   88994:	461d      	mov	r5, r3
   88996:	9104      	str	r1, [sp, #16]
   88998:	2a00      	cmp	r2, #0
   8899a:	f173 0300 	sbcs.w	r3, r3, #0
   8899e:	f2c0 841e 	blt.w	891de <_vfiprintf_r+0xa2e>
   889a2:	9b00      	ldr	r3, [sp, #0]
   889a4:	3301      	adds	r3, #1
   889a6:	f000 84f0 	beq.w	8938a <_vfiprintf_r+0xbda>
   889aa:	ea54 0305 	orrs.w	r3, r4, r5
   889ae:	f027 0980 	bic.w	r9, r7, #128	; 0x80
   889b2:	f000 83fc 	beq.w	891ae <_vfiprintf_r+0x9fe>
   889b6:	2d00      	cmp	r5, #0
   889b8:	bf08      	it	eq
   889ba:	2c0a      	cmpeq	r4, #10
   889bc:	f080 84a9 	bcs.w	89312 <_vfiprintf_r+0xb62>
   889c0:	2301      	movs	r3, #1
   889c2:	464f      	mov	r7, r9
   889c4:	3430      	adds	r4, #48	; 0x30
   889c6:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
   889ca:	9301      	str	r3, [sp, #4]
   889cc:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   889d0:	e9dd 2100 	ldrd	r2, r1, [sp]
   889d4:	428a      	cmp	r2, r1
   889d6:	bfb8      	it	lt
   889d8:	460a      	movlt	r2, r1
   889da:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   889de:	4615      	mov	r5, r2
   889e0:	2b00      	cmp	r3, #0
   889e2:	f000 809d 	beq.w	88b20 <_vfiprintf_r+0x370>
   889e6:	3501      	adds	r5, #1
   889e8:	e09a      	b.n	88b20 <_vfiprintf_r+0x370>
   889ea:	4649      	mov	r1, r9
   889ec:	9805      	ldr	r0, [sp, #20]
   889ee:	f000 fdb9 	bl	89564 <__swsetup_r>
   889f2:	2800      	cmp	r0, #0
   889f4:	f040 854a 	bne.w	8948c <_vfiprintf_r+0xcdc>
   889f8:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   889fc:	f002 031a 	and.w	r3, r2, #26
   88a00:	2b0a      	cmp	r3, #10
   88a02:	f47f af06 	bne.w	88812 <_vfiprintf_r+0x62>
   88a06:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
   88a0a:	2b00      	cmp	r3, #0
   88a0c:	f6ff af01 	blt.w	88812 <_vfiprintf_r+0x62>
   88a10:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88a14:	07de      	lsls	r6, r3, #31
   88a16:	d402      	bmi.n	88a1e <_vfiprintf_r+0x26e>
   88a18:	0595      	lsls	r5, r2, #22
   88a1a:	f140 850e 	bpl.w	8943a <_vfiprintf_r+0xc8a>
   88a1e:	4623      	mov	r3, r4
   88a20:	4642      	mov	r2, r8
   88a22:	4649      	mov	r1, r9
   88a24:	9805      	ldr	r0, [sp, #20]
   88a26:	f000 fd59 	bl	894dc <__sbprintf>
   88a2a:	9003      	str	r0, [sp, #12]
   88a2c:	9803      	ldr	r0, [sp, #12]
   88a2e:	b03b      	add	sp, #236	; 0xec
   88a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88a34:	f047 0710 	orr.w	r7, r7, #16
   88a38:	06b8      	lsls	r0, r7, #26
   88a3a:	9c04      	ldr	r4, [sp, #16]
   88a3c:	f140 8109 	bpl.w	88c52 <_vfiprintf_r+0x4a2>
   88a40:	3407      	adds	r4, #7
   88a42:	f024 0307 	bic.w	r3, r4, #7
   88a46:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88a4a:	9304      	str	r3, [sp, #16]
   88a4c:	2300      	movs	r3, #0
   88a4e:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   88a52:	f04f 0200 	mov.w	r2, #0
   88a56:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88a5a:	9a00      	ldr	r2, [sp, #0]
   88a5c:	4611      	mov	r1, r2
   88a5e:	3101      	adds	r1, #1
   88a60:	f000 81db 	beq.w	88e1a <_vfiprintf_r+0x66a>
   88a64:	ea54 0105 	orrs.w	r1, r4, r5
   88a68:	f029 0780 	bic.w	r7, r9, #128	; 0x80
   88a6c:	f040 81d4 	bne.w	88e18 <_vfiprintf_r+0x668>
   88a70:	2a00      	cmp	r2, #0
   88a72:	f040 848d 	bne.w	89390 <_vfiprintf_r+0xbe0>
   88a76:	2b00      	cmp	r3, #0
   88a78:	f040 839e 	bne.w	891b8 <_vfiprintf_r+0xa08>
   88a7c:	f019 0301 	ands.w	r3, r9, #1
   88a80:	9301      	str	r3, [sp, #4]
   88a82:	f000 83c3 	beq.w	8920c <_vfiprintf_r+0xa5c>
   88a86:	2330      	movs	r3, #48	; 0x30
   88a88:	f10d 06e7 	add.w	r6, sp, #231	; 0xe7
   88a8c:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   88a90:	e79e      	b.n	889d0 <_vfiprintf_r+0x220>
   88a92:	ebb4 0508 	subs.w	r5, r4, r8
   88a96:	f000 80bb 	beq.w	88c10 <_vfiprintf_r+0x460>
   88a9a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   88a9e:	3301      	adds	r3, #1
   88aa0:	442a      	add	r2, r5
   88aa2:	2b07      	cmp	r3, #7
   88aa4:	e9ca 8500 	strd	r8, r5, [sl]
   88aa8:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
   88aac:	dc06      	bgt.n	88abc <_vfiprintf_r+0x30c>
   88aae:	f10a 0a08 	add.w	sl, sl, #8
   88ab2:	9a03      	ldr	r2, [sp, #12]
   88ab4:	7823      	ldrb	r3, [r4, #0]
   88ab6:	442a      	add	r2, r5
   88ab8:	9203      	str	r2, [sp, #12]
   88aba:	e6ca      	b.n	88852 <_vfiprintf_r+0xa2>
   88abc:	2a00      	cmp	r2, #0
   88abe:	f000 8372 	beq.w	891a6 <_vfiprintf_r+0x9f6>
   88ac2:	4659      	mov	r1, fp
   88ac4:	9805      	ldr	r0, [sp, #20]
   88ac6:	aa0e      	add	r2, sp, #56	; 0x38
   88ac8:	f7ff fe36 	bl	88738 <__sprint_r.part.0>
   88acc:	b950      	cbnz	r0, 88ae4 <_vfiprintf_r+0x334>
   88ace:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88ad2:	e7ee      	b.n	88ab2 <_vfiprintf_r+0x302>
   88ad4:	4659      	mov	r1, fp
   88ad6:	9805      	ldr	r0, [sp, #20]
   88ad8:	aa0e      	add	r2, sp, #56	; 0x38
   88ada:	f7ff fe2d 	bl	88738 <__sprint_r.part.0>
   88ade:	2800      	cmp	r0, #0
   88ae0:	f000 808d 	beq.w	88bfe <_vfiprintf_r+0x44e>
   88ae4:	46d9      	mov	r9, fp
   88ae6:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   88aea:	f013 0f01 	tst.w	r3, #1
   88aee:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88af2:	f000 8095 	beq.w	88c20 <_vfiprintf_r+0x470>
   88af6:	065b      	lsls	r3, r3, #25
   88af8:	f100 84d4 	bmi.w	894a4 <_vfiprintf_r+0xcf4>
   88afc:	9803      	ldr	r0, [sp, #12]
   88afe:	b03b      	add	sp, #236	; 0xec
   88b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88b04:	2b00      	cmp	r3, #0
   88b06:	f000 8083 	beq.w	88c10 <_vfiprintf_r+0x460>
   88b0a:	2501      	movs	r5, #1
   88b0c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88b10:	f04f 0300 	mov.w	r3, #0
   88b14:	9501      	str	r5, [sp, #4]
   88b16:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88b1a:	ae21      	add	r6, sp, #132	; 0x84
   88b1c:	2300      	movs	r3, #0
   88b1e:	9300      	str	r3, [sp, #0]
   88b20:	f017 0302 	ands.w	r3, r7, #2
   88b24:	9307      	str	r3, [sp, #28]
   88b26:	bf18      	it	ne
   88b28:	3502      	addne	r5, #2
   88b2a:	f017 0384 	ands.w	r3, r7, #132	; 0x84
   88b2e:	9306      	str	r3, [sp, #24]
   88b30:	d104      	bne.n	88b3c <_vfiprintf_r+0x38c>
   88b32:	9b02      	ldr	r3, [sp, #8]
   88b34:	1b5c      	subs	r4, r3, r5
   88b36:	2c00      	cmp	r4, #0
   88b38:	f300 8274 	bgt.w	89024 <_vfiprintf_r+0x874>
   88b3c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88b40:	1c48      	adds	r0, r1, #1
   88b42:	f89d 4033 	ldrb.w	r4, [sp, #51]	; 0x33
   88b46:	b174      	cbz	r4, 88b66 <_vfiprintf_r+0x3b6>
   88b48:	2101      	movs	r1, #1
   88b4a:	f10d 0433 	add.w	r4, sp, #51	; 0x33
   88b4e:	440a      	add	r2, r1
   88b50:	2807      	cmp	r0, #7
   88b52:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   88b56:	e9ca 4100 	strd	r4, r1, [sl]
   88b5a:	f300 8246 	bgt.w	88fea <_vfiprintf_r+0x83a>
   88b5e:	4601      	mov	r1, r0
   88b60:	f10a 0a08 	add.w	sl, sl, #8
   88b64:	3001      	adds	r0, #1
   88b66:	9b07      	ldr	r3, [sp, #28]
   88b68:	b1c3      	cbz	r3, 88b9c <_vfiprintf_r+0x3ec>
   88b6a:	2102      	movs	r1, #2
   88b6c:	ab0d      	add	r3, sp, #52	; 0x34
   88b6e:	440a      	add	r2, r1
   88b70:	2807      	cmp	r0, #7
   88b72:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   88b76:	e9ca 3100 	strd	r3, r1, [sl]
   88b7a:	f340 824e 	ble.w	8901a <_vfiprintf_r+0x86a>
   88b7e:	2a00      	cmp	r2, #0
   88b80:	f000 830c 	beq.w	8919c <_vfiprintf_r+0x9ec>
   88b84:	4659      	mov	r1, fp
   88b86:	9805      	ldr	r0, [sp, #20]
   88b88:	aa0e      	add	r2, sp, #56	; 0x38
   88b8a:	f7ff fdd5 	bl	88738 <__sprint_r.part.0>
   88b8e:	2800      	cmp	r0, #0
   88b90:	d1a8      	bne.n	88ae4 <_vfiprintf_r+0x334>
   88b92:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88b96:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88b9a:	1c48      	adds	r0, r1, #1
   88b9c:	9b06      	ldr	r3, [sp, #24]
   88b9e:	2b80      	cmp	r3, #128	; 0x80
   88ba0:	f000 817e 	beq.w	88ea0 <_vfiprintf_r+0x6f0>
   88ba4:	e9dd 3400 	ldrd	r3, r4, [sp]
   88ba8:	1b1c      	subs	r4, r3, r4
   88baa:	2c00      	cmp	r4, #0
   88bac:	f300 81d3 	bgt.w	88f56 <_vfiprintf_r+0x7a6>
   88bb0:	9b01      	ldr	r3, [sp, #4]
   88bb2:	2807      	cmp	r0, #7
   88bb4:	441a      	add	r2, r3
   88bb6:	e9ca 6300 	strd	r6, r3, [sl]
   88bba:	9210      	str	r2, [sp, #64]	; 0x40
   88bbc:	900f      	str	r0, [sp, #60]	; 0x3c
   88bbe:	f340 816c 	ble.w	88e9a <_vfiprintf_r+0x6ea>
   88bc2:	2a00      	cmp	r2, #0
   88bc4:	f000 8276 	beq.w	890b4 <_vfiprintf_r+0x904>
   88bc8:	4659      	mov	r1, fp
   88bca:	9805      	ldr	r0, [sp, #20]
   88bcc:	aa0e      	add	r2, sp, #56	; 0x38
   88bce:	f7ff fdb3 	bl	88738 <__sprint_r.part.0>
   88bd2:	2800      	cmp	r0, #0
   88bd4:	d186      	bne.n	88ae4 <_vfiprintf_r+0x334>
   88bd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88bd8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88bdc:	0779      	lsls	r1, r7, #29
   88bde:	d504      	bpl.n	88bea <_vfiprintf_r+0x43a>
   88be0:	9b02      	ldr	r3, [sp, #8]
   88be2:	1b5c      	subs	r4, r3, r5
   88be4:	2c00      	cmp	r4, #0
   88be6:	f300 826e 	bgt.w	890c6 <_vfiprintf_r+0x916>
   88bea:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
   88bee:	42a9      	cmp	r1, r5
   88bf0:	bfac      	ite	ge
   88bf2:	185b      	addge	r3, r3, r1
   88bf4:	195b      	addlt	r3, r3, r5
   88bf6:	9303      	str	r3, [sp, #12]
   88bf8:	2a00      	cmp	r2, #0
   88bfa:	f47f af6b 	bne.w	88ad4 <_vfiprintf_r+0x324>
   88bfe:	2300      	movs	r3, #0
   88c00:	930f      	str	r3, [sp, #60]	; 0x3c
   88c02:	f898 3000 	ldrb.w	r3, [r8]
   88c06:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88c0a:	2b00      	cmp	r3, #0
   88c0c:	f47f ae13 	bne.w	88836 <_vfiprintf_r+0x86>
   88c10:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88c12:	46d9      	mov	r9, fp
   88c14:	2b00      	cmp	r3, #0
   88c16:	f040 8426 	bne.w	89466 <_vfiprintf_r+0xcb6>
   88c1a:	2300      	movs	r3, #0
   88c1c:	930f      	str	r3, [sp, #60]	; 0x3c
   88c1e:	e762      	b.n	88ae6 <_vfiprintf_r+0x336>
   88c20:	059a      	lsls	r2, r3, #22
   88c22:	f53f af68 	bmi.w	88af6 <_vfiprintf_r+0x346>
   88c26:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   88c2a:	f002 f9d1 	bl	8afd0 <__retarget_lock_release_recursive>
   88c2e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   88c32:	e760      	b.n	88af6 <_vfiprintf_r+0x346>
   88c34:	9b04      	ldr	r3, [sp, #16]
   88c36:	06f8      	lsls	r0, r7, #27
   88c38:	f853 4b04 	ldr.w	r4, [r3], #4
   88c3c:	f100 8308 	bmi.w	89250 <_vfiprintf_r+0xaa0>
   88c40:	0679      	lsls	r1, r7, #25
   88c42:	f140 8302 	bpl.w	8924a <_vfiprintf_r+0xa9a>
   88c46:	b224      	sxth	r4, r4
   88c48:	17e5      	asrs	r5, r4, #31
   88c4a:	9304      	str	r3, [sp, #16]
   88c4c:	4622      	mov	r2, r4
   88c4e:	462b      	mov	r3, r5
   88c50:	e6a2      	b.n	88998 <_vfiprintf_r+0x1e8>
   88c52:	f854 3b04 	ldr.w	r3, [r4], #4
   88c56:	06f9      	lsls	r1, r7, #27
   88c58:	9404      	str	r4, [sp, #16]
   88c5a:	f100 82f3 	bmi.w	89244 <_vfiprintf_r+0xa94>
   88c5e:	067a      	lsls	r2, r7, #25
   88c60:	f140 82ed 	bpl.w	8923e <_vfiprintf_r+0xa8e>
   88c64:	2500      	movs	r5, #0
   88c66:	b29c      	uxth	r4, r3
   88c68:	e6f0      	b.n	88a4c <_vfiprintf_r+0x29c>
   88c6a:	f04f 0300 	mov.w	r3, #0
   88c6e:	9c04      	ldr	r4, [sp, #16]
   88c70:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88c74:	f854 6b04 	ldr.w	r6, [r4], #4
   88c78:	2e00      	cmp	r6, #0
   88c7a:	f000 8397 	beq.w	893ac <_vfiprintf_r+0xbfc>
   88c7e:	9a00      	ldr	r2, [sp, #0]
   88c80:	4613      	mov	r3, r2
   88c82:	3301      	adds	r3, #1
   88c84:	f000 831e 	beq.w	892c4 <_vfiprintf_r+0xb14>
   88c88:	2100      	movs	r1, #0
   88c8a:	4630      	mov	r0, r6
   88c8c:	f002 fcde 	bl	8b64c <memchr>
   88c90:	2800      	cmp	r0, #0
   88c92:	f000 83d8 	beq.w	89446 <_vfiprintf_r+0xc96>
   88c96:	1b83      	subs	r3, r0, r6
   88c98:	9301      	str	r3, [sp, #4]
   88c9a:	2300      	movs	r3, #0
   88c9c:	9404      	str	r4, [sp, #16]
   88c9e:	9300      	str	r3, [sp, #0]
   88ca0:	e696      	b.n	889d0 <_vfiprintf_r+0x220>
   88ca2:	2501      	movs	r5, #1
   88ca4:	f04f 0200 	mov.w	r2, #0
   88ca8:	9c04      	ldr	r4, [sp, #16]
   88caa:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   88cae:	f854 3b04 	ldr.w	r3, [r4], #4
   88cb2:	9501      	str	r5, [sp, #4]
   88cb4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88cb8:	9404      	str	r4, [sp, #16]
   88cba:	ae21      	add	r6, sp, #132	; 0x84
   88cbc:	e72e      	b.n	88b1c <_vfiprintf_r+0x36c>
   88cbe:	f001 fdb3 	bl	8a828 <__sinit>
   88cc2:	e582      	b.n	887ca <_vfiprintf_r+0x1a>
   88cc4:	9b02      	ldr	r3, [sp, #8]
   88cc6:	425b      	negs	r3, r3
   88cc8:	9302      	str	r3, [sp, #8]
   88cca:	f898 3000 	ldrb.w	r3, [r8]
   88cce:	f047 0704 	orr.w	r7, r7, #4
   88cd2:	e5cf      	b.n	88874 <_vfiprintf_r+0xc4>
   88cd4:	f898 3000 	ldrb.w	r3, [r8]
   88cd8:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
   88cdc:	e5ca      	b.n	88874 <_vfiprintf_r+0xc4>
   88cde:	f898 3000 	ldrb.w	r3, [r8]
   88ce2:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   88ce6:	e5c5      	b.n	88874 <_vfiprintf_r+0xc4>
   88ce8:	4641      	mov	r1, r8
   88cea:	f811 3b01 	ldrb.w	r3, [r1], #1
   88cee:	2b2a      	cmp	r3, #42	; 0x2a
   88cf0:	f000 83dd 	beq.w	894ae <_vfiprintf_r+0xcfe>
   88cf4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88cf8:	2a09      	cmp	r2, #9
   88cfa:	4688      	mov	r8, r1
   88cfc:	bf98      	it	ls
   88cfe:	2100      	movls	r1, #0
   88d00:	f200 83ad 	bhi.w	8945e <_vfiprintf_r+0xcae>
   88d04:	f818 3b01 	ldrb.w	r3, [r8], #1
   88d08:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88d0c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   88d10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88d14:	2a09      	cmp	r2, #9
   88d16:	d9f5      	bls.n	88d04 <_vfiprintf_r+0x554>
   88d18:	9100      	str	r1, [sp, #0]
   88d1a:	e5ad      	b.n	88878 <_vfiprintf_r+0xc8>
   88d1c:	9c05      	ldr	r4, [sp, #20]
   88d1e:	4620      	mov	r0, r4
   88d20:	f002 f94c 	bl	8afbc <_localeconv_r>
   88d24:	6843      	ldr	r3, [r0, #4]
   88d26:	4618      	mov	r0, r3
   88d28:	930a      	str	r3, [sp, #40]	; 0x28
   88d2a:	f003 fb41 	bl	8c3b0 <strlen>
   88d2e:	4603      	mov	r3, r0
   88d30:	4620      	mov	r0, r4
   88d32:	930b      	str	r3, [sp, #44]	; 0x2c
   88d34:	461c      	mov	r4, r3
   88d36:	f002 f941 	bl	8afbc <_localeconv_r>
   88d3a:	6882      	ldr	r2, [r0, #8]
   88d3c:	9209      	str	r2, [sp, #36]	; 0x24
   88d3e:	2c00      	cmp	r4, #0
   88d40:	f43f ae13 	beq.w	8896a <_vfiprintf_r+0x1ba>
   88d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88d46:	2b00      	cmp	r3, #0
   88d48:	f43f ae0f 	beq.w	8896a <_vfiprintf_r+0x1ba>
   88d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88d4e:	781b      	ldrb	r3, [r3, #0]
   88d50:	2b00      	cmp	r3, #0
   88d52:	f43f ae0a 	beq.w	8896a <_vfiprintf_r+0x1ba>
   88d56:	f898 3000 	ldrb.w	r3, [r8]
   88d5a:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   88d5e:	e589      	b.n	88874 <_vfiprintf_r+0xc4>
   88d60:	f898 3000 	ldrb.w	r3, [r8]
   88d64:	f047 0701 	orr.w	r7, r7, #1
   88d68:	e584      	b.n	88874 <_vfiprintf_r+0xc4>
   88d6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   88d6e:	2b00      	cmp	r3, #0
   88d70:	f47f adfb 	bne.w	8896a <_vfiprintf_r+0x1ba>
   88d74:	2320      	movs	r3, #32
   88d76:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   88d7a:	f898 3000 	ldrb.w	r3, [r8]
   88d7e:	e579      	b.n	88874 <_vfiprintf_r+0xc4>
   88d80:	f898 3000 	ldrb.w	r3, [r8]
   88d84:	2b6c      	cmp	r3, #108	; 0x6c
   88d86:	bf03      	ittte	eq
   88d88:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88d8c:	f047 0720 	orreq.w	r7, r7, #32
   88d90:	f108 0801 	addeq.w	r8, r8, #1
   88d94:	f047 0710 	orrne.w	r7, r7, #16
   88d98:	e56c      	b.n	88874 <_vfiprintf_r+0xc4>
   88d9a:	f898 3000 	ldrb.w	r3, [r8]
   88d9e:	2b68      	cmp	r3, #104	; 0x68
   88da0:	bf03      	ittte	eq
   88da2:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   88da6:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   88daa:	f108 0801 	addeq.w	r8, r8, #1
   88dae:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   88db2:	e55f      	b.n	88874 <_vfiprintf_r+0xc4>
   88db4:	f047 0910 	orr.w	r9, r7, #16
   88db8:	f019 0f20 	tst.w	r9, #32
   88dbc:	9c04      	ldr	r4, [sp, #16]
   88dbe:	f000 8200 	beq.w	891c2 <_vfiprintf_r+0xa12>
   88dc2:	3407      	adds	r4, #7
   88dc4:	f024 0307 	bic.w	r3, r4, #7
   88dc8:	e8f3 4502 	ldrd	r4, r5, [r3], #8
   88dcc:	9304      	str	r3, [sp, #16]
   88dce:	2301      	movs	r3, #1
   88dd0:	e63f      	b.n	88a52 <_vfiprintf_r+0x2a2>
   88dd2:	f647 0330 	movw	r3, #30768	; 0x7830
   88dd6:	9c04      	ldr	r4, [sp, #16]
   88dd8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   88ddc:	f854 2b04 	ldr.w	r2, [r4], #4
   88de0:	4bbf      	ldr	r3, [pc, #764]	; (890e0 <_vfiprintf_r+0x930>)
   88de2:	9404      	str	r4, [sp, #16]
   88de4:	9308      	str	r3, [sp, #32]
   88de6:	4614      	mov	r4, r2
   88de8:	2500      	movs	r5, #0
   88dea:	2302      	movs	r3, #2
   88dec:	f047 0902 	orr.w	r9, r7, #2
   88df0:	e62f      	b.n	88a52 <_vfiprintf_r+0x2a2>
   88df2:	06bb      	lsls	r3, r7, #26
   88df4:	f100 8232 	bmi.w	8925c <_vfiprintf_r+0xaac>
   88df8:	06fe      	lsls	r6, r7, #27
   88dfa:	f100 82cf 	bmi.w	8939c <_vfiprintf_r+0xbec>
   88dfe:	067d      	lsls	r5, r7, #25
   88e00:	f100 8301 	bmi.w	89406 <_vfiprintf_r+0xc56>
   88e04:	05bc      	lsls	r4, r7, #22
   88e06:	f140 82c9 	bpl.w	8939c <_vfiprintf_r+0xbec>
   88e0a:	9c04      	ldr	r4, [sp, #16]
   88e0c:	9a03      	ldr	r2, [sp, #12]
   88e0e:	f854 3b04 	ldr.w	r3, [r4], #4
   88e12:	701a      	strb	r2, [r3, #0]
   88e14:	9404      	str	r4, [sp, #16]
   88e16:	e509      	b.n	8882c <_vfiprintf_r+0x7c>
   88e18:	46b9      	mov	r9, r7
   88e1a:	2b01      	cmp	r3, #1
   88e1c:	f43f adcb 	beq.w	889b6 <_vfiprintf_r+0x206>
   88e20:	2b02      	cmp	r3, #2
   88e22:	ae3a      	add	r6, sp, #232	; 0xe8
   88e24:	d113      	bne.n	88e4e <_vfiprintf_r+0x69e>
   88e26:	9808      	ldr	r0, [sp, #32]
   88e28:	0923      	lsrs	r3, r4, #4
   88e2a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   88e2e:	0929      	lsrs	r1, r5, #4
   88e30:	f004 020f 	and.w	r2, r4, #15
   88e34:	460d      	mov	r5, r1
   88e36:	461c      	mov	r4, r3
   88e38:	5c83      	ldrb	r3, [r0, r2]
   88e3a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   88e3e:	ea54 0305 	orrs.w	r3, r4, r5
   88e42:	d1f1      	bne.n	88e28 <_vfiprintf_r+0x678>
   88e44:	ab3a      	add	r3, sp, #232	; 0xe8
   88e46:	1b9b      	subs	r3, r3, r6
   88e48:	464f      	mov	r7, r9
   88e4a:	9301      	str	r3, [sp, #4]
   88e4c:	e5c0      	b.n	889d0 <_vfiprintf_r+0x220>
   88e4e:	08e2      	lsrs	r2, r4, #3
   88e50:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   88e54:	08e9      	lsrs	r1, r5, #3
   88e56:	f004 0307 	and.w	r3, r4, #7
   88e5a:	460d      	mov	r5, r1
   88e5c:	4614      	mov	r4, r2
   88e5e:	3330      	adds	r3, #48	; 0x30
   88e60:	ea54 0105 	orrs.w	r1, r4, r5
   88e64:	4632      	mov	r2, r6
   88e66:	f806 3d01 	strb.w	r3, [r6, #-1]!
   88e6a:	d1f0      	bne.n	88e4e <_vfiprintf_r+0x69e>
   88e6c:	f019 0f01 	tst.w	r9, #1
   88e70:	d0e8      	beq.n	88e44 <_vfiprintf_r+0x694>
   88e72:	2b30      	cmp	r3, #48	; 0x30
   88e74:	d0e6      	beq.n	88e44 <_vfiprintf_r+0x694>
   88e76:	2330      	movs	r3, #48	; 0x30
   88e78:	3a02      	subs	r2, #2
   88e7a:	f806 3c01 	strb.w	r3, [r6, #-1]
   88e7e:	ab3a      	add	r3, sp, #232	; 0xe8
   88e80:	1a9b      	subs	r3, r3, r2
   88e82:	464f      	mov	r7, r9
   88e84:	4616      	mov	r6, r2
   88e86:	9301      	str	r3, [sp, #4]
   88e88:	e5a2      	b.n	889d0 <_vfiprintf_r+0x220>
   88e8a:	2301      	movs	r3, #1
   88e8c:	9a01      	ldr	r2, [sp, #4]
   88e8e:	930f      	str	r3, [sp, #60]	; 0x3c
   88e90:	e9cd 2610 	strd	r2, r6, [sp, #64]	; 0x40
   88e94:	9212      	str	r2, [sp, #72]	; 0x48
   88e96:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88e9a:	f10a 0a08 	add.w	sl, sl, #8
   88e9e:	e69d      	b.n	88bdc <_vfiprintf_r+0x42c>
   88ea0:	9b02      	ldr	r3, [sp, #8]
   88ea2:	1b5c      	subs	r4, r3, r5
   88ea4:	2c00      	cmp	r4, #0
   88ea6:	f77f ae7d 	ble.w	88ba4 <_vfiprintf_r+0x3f4>
   88eaa:	2c10      	cmp	r4, #16
   88eac:	f340 82ea 	ble.w	89484 <_vfiprintf_r+0xcd4>
   88eb0:	f8df 9230 	ldr.w	r9, [pc, #560]	; 890e4 <_vfiprintf_r+0x934>
   88eb4:	4650      	mov	r0, sl
   88eb6:	9706      	str	r7, [sp, #24]
   88eb8:	46b2      	mov	sl, r6
   88eba:	464e      	mov	r6, r9
   88ebc:	46c1      	mov	r9, r8
   88ebe:	46a8      	mov	r8, r5
   88ec0:	9d05      	ldr	r5, [sp, #20]
   88ec2:	e006      	b.n	88ed2 <_vfiprintf_r+0x722>
   88ec4:	f101 0c02 	add.w	ip, r1, #2
   88ec8:	4619      	mov	r1, r3
   88eca:	3008      	adds	r0, #8
   88ecc:	3c10      	subs	r4, #16
   88ece:	2c10      	cmp	r4, #16
   88ed0:	dd1a      	ble.n	88f08 <_vfiprintf_r+0x758>
   88ed2:	2710      	movs	r7, #16
   88ed4:	1c4b      	adds	r3, r1, #1
   88ed6:	3210      	adds	r2, #16
   88ed8:	2b07      	cmp	r3, #7
   88eda:	9210      	str	r2, [sp, #64]	; 0x40
   88edc:	6006      	str	r6, [r0, #0]
   88ede:	6047      	str	r7, [r0, #4]
   88ee0:	930f      	str	r3, [sp, #60]	; 0x3c
   88ee2:	ddef      	ble.n	88ec4 <_vfiprintf_r+0x714>
   88ee4:	2a00      	cmp	r2, #0
   88ee6:	d07b      	beq.n	88fe0 <_vfiprintf_r+0x830>
   88ee8:	4659      	mov	r1, fp
   88eea:	4628      	mov	r0, r5
   88eec:	aa0e      	add	r2, sp, #56	; 0x38
   88eee:	f7ff fc23 	bl	88738 <__sprint_r.part.0>
   88ef2:	2800      	cmp	r0, #0
   88ef4:	f47f adf6 	bne.w	88ae4 <_vfiprintf_r+0x334>
   88ef8:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88efc:	3c10      	subs	r4, #16
   88efe:	2c10      	cmp	r4, #16
   88f00:	a811      	add	r0, sp, #68	; 0x44
   88f02:	f101 0c01 	add.w	ip, r1, #1
   88f06:	dce4      	bgt.n	88ed2 <_vfiprintf_r+0x722>
   88f08:	4645      	mov	r5, r8
   88f0a:	46c8      	mov	r8, r9
   88f0c:	46b1      	mov	r9, r6
   88f0e:	4656      	mov	r6, sl
   88f10:	4682      	mov	sl, r0
   88f12:	9f06      	ldr	r7, [sp, #24]
   88f14:	4422      	add	r2, r4
   88f16:	f1bc 0f07 	cmp.w	ip, #7
   88f1a:	e9ca 9400 	strd	r9, r4, [sl]
   88f1e:	9210      	str	r2, [sp, #64]	; 0x40
   88f20:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   88f24:	f340 817e 	ble.w	89224 <_vfiprintf_r+0xa74>
   88f28:	2a00      	cmp	r2, #0
   88f2a:	f000 825c 	beq.w	893e6 <_vfiprintf_r+0xc36>
   88f2e:	4659      	mov	r1, fp
   88f30:	9805      	ldr	r0, [sp, #20]
   88f32:	aa0e      	add	r2, sp, #56	; 0x38
   88f34:	f7ff fc00 	bl	88738 <__sprint_r.part.0>
   88f38:	2800      	cmp	r0, #0
   88f3a:	f47f add3 	bne.w	88ae4 <_vfiprintf_r+0x334>
   88f3e:	e9dd 3400 	ldrd	r3, r4, [sp]
   88f42:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88f46:	1b1c      	subs	r4, r3, r4
   88f48:	2c00      	cmp	r4, #0
   88f4a:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   88f4e:	f101 0001 	add.w	r0, r1, #1
   88f52:	f77f ae2d 	ble.w	88bb0 <_vfiprintf_r+0x400>
   88f56:	2c10      	cmp	r4, #16
   88f58:	f8df 9188 	ldr.w	r9, [pc, #392]	; 890e4 <_vfiprintf_r+0x934>
   88f5c:	dd2f      	ble.n	88fbe <_vfiprintf_r+0x80e>
   88f5e:	46d4      	mov	ip, sl
   88f60:	46b2      	mov	sl, r6
   88f62:	464e      	mov	r6, r9
   88f64:	46c1      	mov	r9, r8
   88f66:	46a8      	mov	r8, r5
   88f68:	9d05      	ldr	r5, [sp, #20]
   88f6a:	e006      	b.n	88f7a <_vfiprintf_r+0x7ca>
   88f6c:	1c88      	adds	r0, r1, #2
   88f6e:	4619      	mov	r1, r3
   88f70:	f10c 0c08 	add.w	ip, ip, #8
   88f74:	3c10      	subs	r4, #16
   88f76:	2c10      	cmp	r4, #16
   88f78:	dd1c      	ble.n	88fb4 <_vfiprintf_r+0x804>
   88f7a:	2010      	movs	r0, #16
   88f7c:	1c4b      	adds	r3, r1, #1
   88f7e:	3210      	adds	r2, #16
   88f80:	2b07      	cmp	r3, #7
   88f82:	9210      	str	r2, [sp, #64]	; 0x40
   88f84:	f8cc 6000 	str.w	r6, [ip]
   88f88:	f8cc 0004 	str.w	r0, [ip, #4]
   88f8c:	930f      	str	r3, [sp, #60]	; 0x3c
   88f8e:	dded      	ble.n	88f6c <_vfiprintf_r+0x7bc>
   88f90:	b30a      	cbz	r2, 88fd6 <_vfiprintf_r+0x826>
   88f92:	4659      	mov	r1, fp
   88f94:	4628      	mov	r0, r5
   88f96:	aa0e      	add	r2, sp, #56	; 0x38
   88f98:	f7ff fbce 	bl	88738 <__sprint_r.part.0>
   88f9c:	2800      	cmp	r0, #0
   88f9e:	f47f ada1 	bne.w	88ae4 <_vfiprintf_r+0x334>
   88fa2:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   88fa6:	3c10      	subs	r4, #16
   88fa8:	2c10      	cmp	r4, #16
   88faa:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88fae:	f101 0001 	add.w	r0, r1, #1
   88fb2:	dce2      	bgt.n	88f7a <_vfiprintf_r+0x7ca>
   88fb4:	4645      	mov	r5, r8
   88fb6:	46c8      	mov	r8, r9
   88fb8:	46b1      	mov	r9, r6
   88fba:	4656      	mov	r6, sl
   88fbc:	46e2      	mov	sl, ip
   88fbe:	4422      	add	r2, r4
   88fc0:	2807      	cmp	r0, #7
   88fc2:	e9ca 9400 	strd	r9, r4, [sl]
   88fc6:	9210      	str	r2, [sp, #64]	; 0x40
   88fc8:	900f      	str	r0, [sp, #60]	; 0x3c
   88fca:	f300 80d3 	bgt.w	89174 <_vfiprintf_r+0x9c4>
   88fce:	f10a 0a08 	add.w	sl, sl, #8
   88fd2:	3001      	adds	r0, #1
   88fd4:	e5ec      	b.n	88bb0 <_vfiprintf_r+0x400>
   88fd6:	2001      	movs	r0, #1
   88fd8:	4611      	mov	r1, r2
   88fda:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   88fde:	e7c9      	b.n	88f74 <_vfiprintf_r+0x7c4>
   88fe0:	f04f 0c01 	mov.w	ip, #1
   88fe4:	4611      	mov	r1, r2
   88fe6:	a811      	add	r0, sp, #68	; 0x44
   88fe8:	e770      	b.n	88ecc <_vfiprintf_r+0x71c>
   88fea:	2a00      	cmp	r2, #0
   88fec:	f000 80d3 	beq.w	89196 <_vfiprintf_r+0x9e6>
   88ff0:	4659      	mov	r1, fp
   88ff2:	9805      	ldr	r0, [sp, #20]
   88ff4:	aa0e      	add	r2, sp, #56	; 0x38
   88ff6:	f7ff fb9f 	bl	88738 <__sprint_r.part.0>
   88ffa:	2800      	cmp	r0, #0
   88ffc:	f47f ad72 	bne.w	88ae4 <_vfiprintf_r+0x334>
   89000:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89004:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89008:	1c48      	adds	r0, r1, #1
   8900a:	e5ac      	b.n	88b66 <_vfiprintf_r+0x3b6>
   8900c:	2202      	movs	r2, #2
   8900e:	2001      	movs	r0, #1
   89010:	ab0d      	add	r3, sp, #52	; 0x34
   89012:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   89016:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8901a:	4601      	mov	r1, r0
   8901c:	f10a 0a08 	add.w	sl, sl, #8
   89020:	1c48      	adds	r0, r1, #1
   89022:	e5bb      	b.n	88b9c <_vfiprintf_r+0x3ec>
   89024:	2c10      	cmp	r4, #16
   89026:	f340 8214 	ble.w	89452 <_vfiprintf_r+0xca2>
   8902a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8902e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 890e8 <_vfiprintf_r+0x938>
   89032:	46d4      	mov	ip, sl
   89034:	46b2      	mov	sl, r6
   89036:	464e      	mov	r6, r9
   89038:	46c1      	mov	r9, r8
   8903a:	46a8      	mov	r8, r5
   8903c:	9d05      	ldr	r5, [sp, #20]
   8903e:	e006      	b.n	8904e <_vfiprintf_r+0x89e>
   89040:	1c99      	adds	r1, r3, #2
   89042:	4603      	mov	r3, r0
   89044:	f10c 0c08 	add.w	ip, ip, #8
   89048:	3c10      	subs	r4, #16
   8904a:	2c10      	cmp	r4, #16
   8904c:	dd1c      	ble.n	89088 <_vfiprintf_r+0x8d8>
   8904e:	2110      	movs	r1, #16
   89050:	1c58      	adds	r0, r3, #1
   89052:	3210      	adds	r2, #16
   89054:	2807      	cmp	r0, #7
   89056:	9210      	str	r2, [sp, #64]	; 0x40
   89058:	f8cc 6000 	str.w	r6, [ip]
   8905c:	f8cc 1004 	str.w	r1, [ip, #4]
   89060:	900f      	str	r0, [sp, #60]	; 0x3c
   89062:	dded      	ble.n	89040 <_vfiprintf_r+0x890>
   89064:	b30a      	cbz	r2, 890aa <_vfiprintf_r+0x8fa>
   89066:	4659      	mov	r1, fp
   89068:	4628      	mov	r0, r5
   8906a:	aa0e      	add	r2, sp, #56	; 0x38
   8906c:	f7ff fb64 	bl	88738 <__sprint_r.part.0>
   89070:	2800      	cmp	r0, #0
   89072:	f47f ad37 	bne.w	88ae4 <_vfiprintf_r+0x334>
   89076:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
   8907a:	3c10      	subs	r4, #16
   8907c:	2c10      	cmp	r4, #16
   8907e:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   89082:	f103 0101 	add.w	r1, r3, #1
   89086:	dce2      	bgt.n	8904e <_vfiprintf_r+0x89e>
   89088:	4645      	mov	r5, r8
   8908a:	46c8      	mov	r8, r9
   8908c:	46b1      	mov	r9, r6
   8908e:	4656      	mov	r6, sl
   89090:	46e2      	mov	sl, ip
   89092:	4422      	add	r2, r4
   89094:	2907      	cmp	r1, #7
   89096:	e9ca 9400 	strd	r9, r4, [sl]
   8909a:	9210      	str	r2, [sp, #64]	; 0x40
   8909c:	910f      	str	r1, [sp, #60]	; 0x3c
   8909e:	f300 80a8 	bgt.w	891f2 <_vfiprintf_r+0xa42>
   890a2:	f10a 0a08 	add.w	sl, sl, #8
   890a6:	1c48      	adds	r0, r1, #1
   890a8:	e54b      	b.n	88b42 <_vfiprintf_r+0x392>
   890aa:	4613      	mov	r3, r2
   890ac:	2101      	movs	r1, #1
   890ae:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   890b2:	e7c9      	b.n	89048 <_vfiprintf_r+0x898>
   890b4:	0778      	lsls	r0, r7, #29
   890b6:	920f      	str	r2, [sp, #60]	; 0x3c
   890b8:	d554      	bpl.n	89164 <_vfiprintf_r+0x9b4>
   890ba:	9b02      	ldr	r3, [sp, #8]
   890bc:	1b5c      	subs	r4, r3, r5
   890be:	2c00      	cmp	r4, #0
   890c0:	dd50      	ble.n	89164 <_vfiprintf_r+0x9b4>
   890c2:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   890c6:	2c10      	cmp	r4, #16
   890c8:	f340 81d7 	ble.w	8947a <_vfiprintf_r+0xcca>
   890cc:	f8df 9018 	ldr.w	r9, [pc, #24]	; 890e8 <_vfiprintf_r+0x938>
   890d0:	2610      	movs	r6, #16
   890d2:	464b      	mov	r3, r9
   890d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   890d6:	46a9      	mov	r9, r5
   890d8:	9f05      	ldr	r7, [sp, #20]
   890da:	461d      	mov	r5, r3
   890dc:	e00d      	b.n	890fa <_vfiprintf_r+0x94a>
   890de:	bf00      	nop
   890e0:	0008d42c 	.word	0x0008d42c
   890e4:	0008d490 	.word	0x0008d490
   890e8:	0008d480 	.word	0x0008d480
   890ec:	1c88      	adds	r0, r1, #2
   890ee:	4619      	mov	r1, r3
   890f0:	f10a 0a08 	add.w	sl, sl, #8
   890f4:	3c10      	subs	r4, #16
   890f6:	2c10      	cmp	r4, #16
   890f8:	dd19      	ble.n	8912e <_vfiprintf_r+0x97e>
   890fa:	1c4b      	adds	r3, r1, #1
   890fc:	3210      	adds	r2, #16
   890fe:	2b07      	cmp	r3, #7
   89100:	e9ca 5600 	strd	r5, r6, [sl]
   89104:	9210      	str	r2, [sp, #64]	; 0x40
   89106:	930f      	str	r3, [sp, #60]	; 0x3c
   89108:	ddf0      	ble.n	890ec <_vfiprintf_r+0x93c>
   8910a:	b332      	cbz	r2, 8915a <_vfiprintf_r+0x9aa>
   8910c:	4659      	mov	r1, fp
   8910e:	4638      	mov	r0, r7
   89110:	aa0e      	add	r2, sp, #56	; 0x38
   89112:	f7ff fb11 	bl	88738 <__sprint_r.part.0>
   89116:	2800      	cmp	r0, #0
   89118:	f47f ace4 	bne.w	88ae4 <_vfiprintf_r+0x334>
   8911c:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89120:	3c10      	subs	r4, #16
   89122:	2c10      	cmp	r4, #16
   89124:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89128:	f101 0001 	add.w	r0, r1, #1
   8912c:	dce5      	bgt.n	890fa <_vfiprintf_r+0x94a>
   8912e:	462b      	mov	r3, r5
   89130:	464d      	mov	r5, r9
   89132:	4699      	mov	r9, r3
   89134:	4422      	add	r2, r4
   89136:	2807      	cmp	r0, #7
   89138:	e9ca 9400 	strd	r9, r4, [sl]
   8913c:	9210      	str	r2, [sp, #64]	; 0x40
   8913e:	900f      	str	r0, [sp, #60]	; 0x3c
   89140:	f77f ad53 	ble.w	88bea <_vfiprintf_r+0x43a>
   89144:	b172      	cbz	r2, 89164 <_vfiprintf_r+0x9b4>
   89146:	4659      	mov	r1, fp
   89148:	9805      	ldr	r0, [sp, #20]
   8914a:	aa0e      	add	r2, sp, #56	; 0x38
   8914c:	f7ff faf4 	bl	88738 <__sprint_r.part.0>
   89150:	2800      	cmp	r0, #0
   89152:	f47f acc7 	bne.w	88ae4 <_vfiprintf_r+0x334>
   89156:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89158:	e547      	b.n	88bea <_vfiprintf_r+0x43a>
   8915a:	2001      	movs	r0, #1
   8915c:	4611      	mov	r1, r2
   8915e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89162:	e7c7      	b.n	890f4 <_vfiprintf_r+0x944>
   89164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   89168:	42aa      	cmp	r2, r5
   8916a:	bfac      	ite	ge
   8916c:	189b      	addge	r3, r3, r2
   8916e:	195b      	addlt	r3, r3, r5
   89170:	9303      	str	r3, [sp, #12]
   89172:	e544      	b.n	88bfe <_vfiprintf_r+0x44e>
   89174:	2a00      	cmp	r2, #0
   89176:	f43f ae88 	beq.w	88e8a <_vfiprintf_r+0x6da>
   8917a:	4659      	mov	r1, fp
   8917c:	9805      	ldr	r0, [sp, #20]
   8917e:	aa0e      	add	r2, sp, #56	; 0x38
   89180:	f7ff fada 	bl	88738 <__sprint_r.part.0>
   89184:	2800      	cmp	r0, #0
   89186:	f47f acad 	bne.w	88ae4 <_vfiprintf_r+0x334>
   8918a:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	; 0x3c
   8918e:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89192:	3001      	adds	r0, #1
   89194:	e50c      	b.n	88bb0 <_vfiprintf_r+0x400>
   89196:	9b07      	ldr	r3, [sp, #28]
   89198:	2b00      	cmp	r3, #0
   8919a:	d16b      	bne.n	89274 <_vfiprintf_r+0xac4>
   8919c:	2001      	movs	r0, #1
   8919e:	4611      	mov	r1, r2
   891a0:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   891a4:	e4fa      	b.n	88b9c <_vfiprintf_r+0x3ec>
   891a6:	920f      	str	r2, [sp, #60]	; 0x3c
   891a8:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   891ac:	e481      	b.n	88ab2 <_vfiprintf_r+0x302>
   891ae:	9b00      	ldr	r3, [sp, #0]
   891b0:	2b00      	cmp	r3, #0
   891b2:	f47f ac05 	bne.w	889c0 <_vfiprintf_r+0x210>
   891b6:	464f      	mov	r7, r9
   891b8:	2300      	movs	r3, #0
   891ba:	ae3a      	add	r6, sp, #232	; 0xe8
   891bc:	9300      	str	r3, [sp, #0]
   891be:	9301      	str	r3, [sp, #4]
   891c0:	e406      	b.n	889d0 <_vfiprintf_r+0x220>
   891c2:	f854 2b04 	ldr.w	r2, [r4], #4
   891c6:	f019 0f10 	tst.w	r9, #16
   891ca:	f04f 0301 	mov.w	r3, #1
   891ce:	9404      	str	r4, [sp, #16]
   891d0:	d132      	bne.n	89238 <_vfiprintf_r+0xa88>
   891d2:	f019 0f40 	tst.w	r9, #64	; 0x40
   891d6:	d02b      	beq.n	89230 <_vfiprintf_r+0xa80>
   891d8:	2500      	movs	r5, #0
   891da:	b294      	uxth	r4, r2
   891dc:	e439      	b.n	88a52 <_vfiprintf_r+0x2a2>
   891de:	232d      	movs	r3, #45	; 0x2d
   891e0:	4264      	negs	r4, r4
   891e2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   891e6:	46b9      	mov	r9, r7
   891e8:	f04f 0301 	mov.w	r3, #1
   891ec:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   891f0:	e433      	b.n	88a5a <_vfiprintf_r+0x2aa>
   891f2:	2a00      	cmp	r2, #0
   891f4:	d06f      	beq.n	892d6 <_vfiprintf_r+0xb26>
   891f6:	4659      	mov	r1, fp
   891f8:	9805      	ldr	r0, [sp, #20]
   891fa:	aa0e      	add	r2, sp, #56	; 0x38
   891fc:	f7ff fa9c 	bl	88738 <__sprint_r.part.0>
   89200:	2800      	cmp	r0, #0
   89202:	f47f ac6f 	bne.w	88ae4 <_vfiprintf_r+0x334>
   89206:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   8920a:	e497      	b.n	88b3c <_vfiprintf_r+0x38c>
   8920c:	ae3a      	add	r6, sp, #232	; 0xe8
   8920e:	f7ff bbdf 	b.w	889d0 <_vfiprintf_r+0x220>
   89212:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   89216:	f001 fed9 	bl	8afcc <__retarget_lock_acquire_recursive>
   8921a:	f9b9 100c 	ldrsh.w	r1, [r9, #12]
   8921e:	b28a      	uxth	r2, r1
   89220:	f7ff badd 	b.w	887de <_vfiprintf_r+0x2e>
   89224:	4661      	mov	r1, ip
   89226:	f10a 0a08 	add.w	sl, sl, #8
   8922a:	f10c 0001 	add.w	r0, ip, #1
   8922e:	e4b9      	b.n	88ba4 <_vfiprintf_r+0x3f4>
   89230:	f419 7f00 	tst.w	r9, #512	; 0x200
   89234:	f040 80ef 	bne.w	89416 <_vfiprintf_r+0xc66>
   89238:	4614      	mov	r4, r2
   8923a:	2500      	movs	r5, #0
   8923c:	e409      	b.n	88a52 <_vfiprintf_r+0x2a2>
   8923e:	05be      	lsls	r6, r7, #22
   89240:	f100 80f7 	bmi.w	89432 <_vfiprintf_r+0xc82>
   89244:	461c      	mov	r4, r3
   89246:	2500      	movs	r5, #0
   89248:	e400      	b.n	88a4c <_vfiprintf_r+0x29c>
   8924a:	05ba      	lsls	r2, r7, #22
   8924c:	f100 80ea 	bmi.w	89424 <_vfiprintf_r+0xc74>
   89250:	17e5      	asrs	r5, r4, #31
   89252:	9304      	str	r3, [sp, #16]
   89254:	4622      	mov	r2, r4
   89256:	462b      	mov	r3, r5
   89258:	f7ff bb9e 	b.w	88998 <_vfiprintf_r+0x1e8>
   8925c:	9b03      	ldr	r3, [sp, #12]
   8925e:	9c04      	ldr	r4, [sp, #16]
   89260:	17dd      	asrs	r5, r3, #31
   89262:	461a      	mov	r2, r3
   89264:	462b      	mov	r3, r5
   89266:	f854 1b04 	ldr.w	r1, [r4], #4
   8926a:	e9c1 2300 	strd	r2, r3, [r1]
   8926e:	9404      	str	r4, [sp, #16]
   89270:	f7ff badc 	b.w	8882c <_vfiprintf_r+0x7c>
   89274:	2202      	movs	r2, #2
   89276:	ab0d      	add	r3, sp, #52	; 0x34
   89278:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8927c:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89280:	e6cc      	b.n	8901c <_vfiprintf_r+0x86c>
   89282:	46b9      	mov	r9, r7
   89284:	e598      	b.n	88db8 <_vfiprintf_r+0x608>
   89286:	4a90      	ldr	r2, [pc, #576]	; (894c8 <_vfiprintf_r+0xd18>)
   89288:	9208      	str	r2, [sp, #32]
   8928a:	06bd      	lsls	r5, r7, #26
   8928c:	9c04      	ldr	r4, [sp, #16]
   8928e:	d530      	bpl.n	892f2 <_vfiprintf_r+0xb42>
   89290:	3407      	adds	r4, #7
   89292:	f024 0207 	bic.w	r2, r4, #7
   89296:	e8f2 4502 	ldrd	r4, r5, [r2], #8
   8929a:	9204      	str	r2, [sp, #16]
   8929c:	07fe      	lsls	r6, r7, #31
   8929e:	d509      	bpl.n	892b4 <_vfiprintf_r+0xb04>
   892a0:	ea54 0205 	orrs.w	r2, r4, r5
   892a4:	d006      	beq.n	892b4 <_vfiprintf_r+0xb04>
   892a6:	2230      	movs	r2, #48	; 0x30
   892a8:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   892ac:	f047 0702 	orr.w	r7, r7, #2
   892b0:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
   892b4:	2302      	movs	r3, #2
   892b6:	f427 6980 	bic.w	r9, r7, #1024	; 0x400
   892ba:	f7ff bbca 	b.w	88a52 <_vfiprintf_r+0x2a2>
   892be:	4a83      	ldr	r2, [pc, #524]	; (894cc <_vfiprintf_r+0xd1c>)
   892c0:	9208      	str	r2, [sp, #32]
   892c2:	e7e2      	b.n	8928a <_vfiprintf_r+0xada>
   892c4:	4630      	mov	r0, r6
   892c6:	f003 f873 	bl	8c3b0 <strlen>
   892ca:	2300      	movs	r3, #0
   892cc:	9404      	str	r4, [sp, #16]
   892ce:	9001      	str	r0, [sp, #4]
   892d0:	9300      	str	r3, [sp, #0]
   892d2:	f7ff bb7d 	b.w	889d0 <_vfiprintf_r+0x220>
   892d6:	f89d 1033 	ldrb.w	r1, [sp, #51]	; 0x33
   892da:	2900      	cmp	r1, #0
   892dc:	f040 8089 	bne.w	893f2 <_vfiprintf_r+0xc42>
   892e0:	9b07      	ldr	r3, [sp, #28]
   892e2:	2b00      	cmp	r3, #0
   892e4:	f47f ae92 	bne.w	8900c <_vfiprintf_r+0x85c>
   892e8:	4611      	mov	r1, r2
   892ea:	2001      	movs	r0, #1
   892ec:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   892f0:	e458      	b.n	88ba4 <_vfiprintf_r+0x3f4>
   892f2:	f854 2b04 	ldr.w	r2, [r4], #4
   892f6:	9404      	str	r4, [sp, #16]
   892f8:	06fc      	lsls	r4, r7, #27
   892fa:	d407      	bmi.n	8930c <_vfiprintf_r+0xb5c>
   892fc:	0678      	lsls	r0, r7, #25
   892fe:	d502      	bpl.n	89306 <_vfiprintf_r+0xb56>
   89300:	2500      	movs	r5, #0
   89302:	b294      	uxth	r4, r2
   89304:	e7ca      	b.n	8929c <_vfiprintf_r+0xaec>
   89306:	05b9      	lsls	r1, r7, #22
   89308:	f100 8089 	bmi.w	8941e <_vfiprintf_r+0xc6e>
   8930c:	4614      	mov	r4, r2
   8930e:	2500      	movs	r5, #0
   89310:	e7c4      	b.n	8929c <_vfiprintf_r+0xaec>
   89312:	f409 6380 	and.w	r3, r9, #1024	; 0x400
   89316:	f8cd 9004 	str.w	r9, [sp, #4]
   8931a:	f8cd 8018 	str.w	r8, [sp, #24]
   8931e:	2700      	movs	r7, #0
   89320:	4698      	mov	r8, r3
   89322:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   89326:	ae3a      	add	r6, sp, #232	; 0xe8
   89328:	e00b      	b.n	89342 <_vfiprintf_r+0xb92>
   8932a:	220a      	movs	r2, #10
   8932c:	2300      	movs	r3, #0
   8932e:	4620      	mov	r0, r4
   89330:	4629      	mov	r1, r5
   89332:	f7fd f9bd 	bl	866b0 <__aeabi_uldivmod>
   89336:	2d00      	cmp	r5, #0
   89338:	bf08      	it	eq
   8933a:	2c0a      	cmpeq	r4, #10
   8933c:	d319      	bcc.n	89372 <_vfiprintf_r+0xbc2>
   8933e:	4604      	mov	r4, r0
   89340:	460d      	mov	r5, r1
   89342:	220a      	movs	r2, #10
   89344:	2300      	movs	r3, #0
   89346:	4620      	mov	r0, r4
   89348:	4629      	mov	r1, r5
   8934a:	f7fd f9b1 	bl	866b0 <__aeabi_uldivmod>
   8934e:	3230      	adds	r2, #48	; 0x30
   89350:	f806 2c01 	strb.w	r2, [r6, #-1]
   89354:	3701      	adds	r7, #1
   89356:	3e01      	subs	r6, #1
   89358:	f1b8 0f00 	cmp.w	r8, #0
   8935c:	d0e5      	beq.n	8932a <_vfiprintf_r+0xb7a>
   8935e:	f899 3000 	ldrb.w	r3, [r9]
   89362:	42bb      	cmp	r3, r7
   89364:	d1e1      	bne.n	8932a <_vfiprintf_r+0xb7a>
   89366:	2fff      	cmp	r7, #255	; 0xff
   89368:	d0df      	beq.n	8932a <_vfiprintf_r+0xb7a>
   8936a:	2d00      	cmp	r5, #0
   8936c:	bf08      	it	eq
   8936e:	2c0a      	cmpeq	r4, #10
   89370:	d225      	bcs.n	893be <_vfiprintf_r+0xc0e>
   89372:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   89376:	ab3a      	add	r3, sp, #232	; 0xe8
   89378:	f8dd 9004 	ldr.w	r9, [sp, #4]
   8937c:	1b9b      	subs	r3, r3, r6
   8937e:	464f      	mov	r7, r9
   89380:	f8dd 8018 	ldr.w	r8, [sp, #24]
   89384:	9301      	str	r3, [sp, #4]
   89386:	f7ff bb23 	b.w	889d0 <_vfiprintf_r+0x220>
   8938a:	46b9      	mov	r9, r7
   8938c:	f7ff bb13 	b.w	889b6 <_vfiprintf_r+0x206>
   89390:	2b01      	cmp	r3, #1
   89392:	46b9      	mov	r9, r7
   89394:	f47f ad44 	bne.w	88e20 <_vfiprintf_r+0x670>
   89398:	f7ff bb12 	b.w	889c0 <_vfiprintf_r+0x210>
   8939c:	9c04      	ldr	r4, [sp, #16]
   8939e:	9a03      	ldr	r2, [sp, #12]
   893a0:	f854 3b04 	ldr.w	r3, [r4], #4
   893a4:	601a      	str	r2, [r3, #0]
   893a6:	9404      	str	r4, [sp, #16]
   893a8:	f7ff ba40 	b.w	8882c <_vfiprintf_r+0x7c>
   893ac:	9d00      	ldr	r5, [sp, #0]
   893ae:	4e48      	ldr	r6, [pc, #288]	; (894d0 <_vfiprintf_r+0xd20>)
   893b0:	2d06      	cmp	r5, #6
   893b2:	bf28      	it	cs
   893b4:	2506      	movcs	r5, #6
   893b6:	9404      	str	r4, [sp, #16]
   893b8:	9501      	str	r5, [sp, #4]
   893ba:	f7ff bbaf 	b.w	88b1c <_vfiprintf_r+0x36c>
   893be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   893c0:	990a      	ldr	r1, [sp, #40]	; 0x28
   893c2:	1af6      	subs	r6, r6, r3
   893c4:	461a      	mov	r2, r3
   893c6:	4630      	mov	r0, r6
   893c8:	f003 f820 	bl	8c40c <strncpy>
   893cc:	f899 3001 	ldrb.w	r3, [r9, #1]
   893d0:	b10b      	cbz	r3, 893d6 <_vfiprintf_r+0xc26>
   893d2:	f109 0901 	add.w	r9, r9, #1
   893d6:	220a      	movs	r2, #10
   893d8:	2300      	movs	r3, #0
   893da:	4620      	mov	r0, r4
   893dc:	4629      	mov	r1, r5
   893de:	f7fd f967 	bl	866b0 <__aeabi_uldivmod>
   893e2:	2700      	movs	r7, #0
   893e4:	e7ab      	b.n	8933e <_vfiprintf_r+0xb8e>
   893e6:	2001      	movs	r0, #1
   893e8:	4611      	mov	r1, r2
   893ea:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   893ee:	f7ff bbd9 	b.w	88ba4 <_vfiprintf_r+0x3f4>
   893f2:	2201      	movs	r2, #1
   893f4:	f10d 0133 	add.w	r1, sp, #51	; 0x33
   893f8:	4610      	mov	r0, r2
   893fa:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   893fe:	f10d 0a44 	add.w	sl, sp, #68	; 0x44
   89402:	f7ff bbac 	b.w	88b5e <_vfiprintf_r+0x3ae>
   89406:	9c04      	ldr	r4, [sp, #16]
   89408:	9a03      	ldr	r2, [sp, #12]
   8940a:	f854 3b04 	ldr.w	r3, [r4], #4
   8940e:	801a      	strh	r2, [r3, #0]
   89410:	9404      	str	r4, [sp, #16]
   89412:	f7ff ba0b 	b.w	8882c <_vfiprintf_r+0x7c>
   89416:	2500      	movs	r5, #0
   89418:	b2d4      	uxtb	r4, r2
   8941a:	f7ff bb1a 	b.w	88a52 <_vfiprintf_r+0x2a2>
   8941e:	2500      	movs	r5, #0
   89420:	b2d4      	uxtb	r4, r2
   89422:	e73b      	b.n	8929c <_vfiprintf_r+0xaec>
   89424:	b264      	sxtb	r4, r4
   89426:	17e5      	asrs	r5, r4, #31
   89428:	9304      	str	r3, [sp, #16]
   8942a:	4622      	mov	r2, r4
   8942c:	462b      	mov	r3, r5
   8942e:	f7ff bab3 	b.w	88998 <_vfiprintf_r+0x1e8>
   89432:	2500      	movs	r5, #0
   89434:	b2dc      	uxtb	r4, r3
   89436:	f7ff bb09 	b.w	88a4c <_vfiprintf_r+0x29c>
   8943a:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   8943e:	f001 fdc7 	bl	8afd0 <__retarget_lock_release_recursive>
   89442:	f7ff baec 	b.w	88a1e <_vfiprintf_r+0x26e>
   89446:	9b00      	ldr	r3, [sp, #0]
   89448:	9404      	str	r4, [sp, #16]
   8944a:	9301      	str	r3, [sp, #4]
   8944c:	9000      	str	r0, [sp, #0]
   8944e:	f7ff babf 	b.w	889d0 <_vfiprintf_r+0x220>
   89452:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
   89456:	f8df 907c 	ldr.w	r9, [pc, #124]	; 894d4 <_vfiprintf_r+0xd24>
   8945a:	3101      	adds	r1, #1
   8945c:	e619      	b.n	89092 <_vfiprintf_r+0x8e2>
   8945e:	2200      	movs	r2, #0
   89460:	9200      	str	r2, [sp, #0]
   89462:	f7ff ba09 	b.w	88878 <_vfiprintf_r+0xc8>
   89466:	4659      	mov	r1, fp
   89468:	9805      	ldr	r0, [sp, #20]
   8946a:	aa0e      	add	r2, sp, #56	; 0x38
   8946c:	f7ff f964 	bl	88738 <__sprint_r.part.0>
   89470:	2800      	cmp	r0, #0
   89472:	f43f abd2 	beq.w	88c1a <_vfiprintf_r+0x46a>
   89476:	f7ff bb36 	b.w	88ae6 <_vfiprintf_r+0x336>
   8947a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8947c:	f8df 9054 	ldr.w	r9, [pc, #84]	; 894d4 <_vfiprintf_r+0xd24>
   89480:	3001      	adds	r0, #1
   89482:	e657      	b.n	89134 <_vfiprintf_r+0x984>
   89484:	4684      	mov	ip, r0
   89486:	f8df 9050 	ldr.w	r9, [pc, #80]	; 894d8 <_vfiprintf_r+0xd28>
   8948a:	e543      	b.n	88f14 <_vfiprintf_r+0x764>
   8948c:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
   89490:	07db      	lsls	r3, r3, #31
   89492:	d407      	bmi.n	894a4 <_vfiprintf_r+0xcf4>
   89494:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   89498:	059f      	lsls	r7, r3, #22
   8949a:	d403      	bmi.n	894a4 <_vfiprintf_r+0xcf4>
   8949c:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
   894a0:	f001 fd96 	bl	8afd0 <__retarget_lock_release_recursive>
   894a4:	f04f 33ff 	mov.w	r3, #4294967295
   894a8:	9303      	str	r3, [sp, #12]
   894aa:	f7ff bb27 	b.w	88afc <_vfiprintf_r+0x34c>
   894ae:	9a04      	ldr	r2, [sp, #16]
   894b0:	f898 3001 	ldrb.w	r3, [r8, #1]
   894b4:	f852 0b04 	ldr.w	r0, [r2], #4
   894b8:	4688      	mov	r8, r1
   894ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   894be:	9000      	str	r0, [sp, #0]
   894c0:	9204      	str	r2, [sp, #16]
   894c2:	f7ff b9d7 	b.w	88874 <_vfiprintf_r+0xc4>
   894c6:	bf00      	nop
   894c8:	0008d440 	.word	0x0008d440
   894cc:	0008d42c 	.word	0x0008d42c
   894d0:	0008d454 	.word	0x0008d454
   894d4:	0008d480 	.word	0x0008d480
   894d8:	0008d490 	.word	0x0008d490

000894dc <__sbprintf>:
   894dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   894de:	460c      	mov	r4, r1
   894e0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   894e4:	f04f 0e00 	mov.w	lr, #0
   894e8:	4615      	mov	r5, r2
   894ea:	4606      	mov	r6, r0
   894ec:	461f      	mov	r7, r3
   894ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
   894f0:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   894f4:	89e2      	ldrh	r2, [r4, #14]
   894f6:	8989      	ldrh	r1, [r1, #12]
   894f8:	9319      	str	r3, [sp, #100]	; 0x64
   894fa:	69e3      	ldr	r3, [r4, #28]
   894fc:	f8ad 200e 	strh.w	r2, [sp, #14]
   89500:	6a62      	ldr	r2, [r4, #36]	; 0x24
   89502:	f021 0102 	bic.w	r1, r1, #2
   89506:	9307      	str	r3, [sp, #28]
   89508:	a816      	add	r0, sp, #88	; 0x58
   8950a:	ab1a      	add	r3, sp, #104	; 0x68
   8950c:	f8ad 100c 	strh.w	r1, [sp, #12]
   89510:	f8cd e018 	str.w	lr, [sp, #24]
   89514:	9209      	str	r2, [sp, #36]	; 0x24
   89516:	9300      	str	r3, [sp, #0]
   89518:	9304      	str	r3, [sp, #16]
   8951a:	f8cd c008 	str.w	ip, [sp, #8]
   8951e:	f8cd c014 	str.w	ip, [sp, #20]
   89522:	f001 fd4f 	bl	8afc4 <__retarget_lock_init_recursive>
   89526:	462a      	mov	r2, r5
   89528:	463b      	mov	r3, r7
   8952a:	4669      	mov	r1, sp
   8952c:	4630      	mov	r0, r6
   8952e:	f7ff f93f 	bl	887b0 <_vfiprintf_r>
   89532:	1e05      	subs	r5, r0, #0
   89534:	db07      	blt.n	89546 <__sbprintf+0x6a>
   89536:	4630      	mov	r0, r6
   89538:	4669      	mov	r1, sp
   8953a:	f001 f919 	bl	8a770 <_fflush_r>
   8953e:	2800      	cmp	r0, #0
   89540:	bf18      	it	ne
   89542:	f04f 35ff 	movne.w	r5, #4294967295
   89546:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8954a:	065b      	lsls	r3, r3, #25
   8954c:	d503      	bpl.n	89556 <__sbprintf+0x7a>
   8954e:	89a3      	ldrh	r3, [r4, #12]
   89550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89554:	81a3      	strh	r3, [r4, #12]
   89556:	9816      	ldr	r0, [sp, #88]	; 0x58
   89558:	f001 fd36 	bl	8afc8 <__retarget_lock_close_recursive>
   8955c:	4628      	mov	r0, r5
   8955e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   89562:	bdf0      	pop	{r4, r5, r6, r7, pc}

00089564 <__swsetup_r>:
   89564:	b538      	push	{r3, r4, r5, lr}
   89566:	4b32      	ldr	r3, [pc, #200]	; (89630 <__swsetup_r+0xcc>)
   89568:	4605      	mov	r5, r0
   8956a:	6818      	ldr	r0, [r3, #0]
   8956c:	460c      	mov	r4, r1
   8956e:	b110      	cbz	r0, 89576 <__swsetup_r+0x12>
   89570:	6b83      	ldr	r3, [r0, #56]	; 0x38
   89572:	2b00      	cmp	r3, #0
   89574:	d03c      	beq.n	895f0 <__swsetup_r+0x8c>
   89576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8957a:	0718      	lsls	r0, r3, #28
   8957c:	b29a      	uxth	r2, r3
   8957e:	d50c      	bpl.n	8959a <__swsetup_r+0x36>
   89580:	6921      	ldr	r1, [r4, #16]
   89582:	b1a9      	cbz	r1, 895b0 <__swsetup_r+0x4c>
   89584:	f012 0001 	ands.w	r0, r2, #1
   89588:	d022      	beq.n	895d0 <__swsetup_r+0x6c>
   8958a:	2500      	movs	r5, #0
   8958c:	6960      	ldr	r0, [r4, #20]
   8958e:	60a5      	str	r5, [r4, #8]
   89590:	4240      	negs	r0, r0
   89592:	61a0      	str	r0, [r4, #24]
   89594:	b311      	cbz	r1, 895dc <__swsetup_r+0x78>
   89596:	2000      	movs	r0, #0
   89598:	bd38      	pop	{r3, r4, r5, pc}
   8959a:	06d1      	lsls	r1, r2, #27
   8959c:	d53f      	bpl.n	8961e <__swsetup_r+0xba>
   8959e:	0752      	lsls	r2, r2, #29
   895a0:	d429      	bmi.n	895f6 <__swsetup_r+0x92>
   895a2:	6921      	ldr	r1, [r4, #16]
   895a4:	f043 0308 	orr.w	r3, r3, #8
   895a8:	81a3      	strh	r3, [r4, #12]
   895aa:	b29a      	uxth	r2, r3
   895ac:	2900      	cmp	r1, #0
   895ae:	d1e9      	bne.n	89584 <__swsetup_r+0x20>
   895b0:	f402 7020 	and.w	r0, r2, #640	; 0x280
   895b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   895b8:	d0e4      	beq.n	89584 <__swsetup_r+0x20>
   895ba:	4628      	mov	r0, r5
   895bc:	4621      	mov	r1, r4
   895be:	f001 fd37 	bl	8b030 <__smakebuf_r>
   895c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   895c6:	6921      	ldr	r1, [r4, #16]
   895c8:	b29a      	uxth	r2, r3
   895ca:	f012 0001 	ands.w	r0, r2, #1
   895ce:	d1dc      	bne.n	8958a <__swsetup_r+0x26>
   895d0:	0795      	lsls	r5, r2, #30
   895d2:	bf58      	it	pl
   895d4:	6960      	ldrpl	r0, [r4, #20]
   895d6:	60a0      	str	r0, [r4, #8]
   895d8:	2900      	cmp	r1, #0
   895da:	d1dc      	bne.n	89596 <__swsetup_r+0x32>
   895dc:	0612      	lsls	r2, r2, #24
   895de:	bf58      	it	pl
   895e0:	4608      	movpl	r0, r1
   895e2:	d5d9      	bpl.n	89598 <__swsetup_r+0x34>
   895e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   895e8:	f04f 30ff 	mov.w	r0, #4294967295
   895ec:	81a3      	strh	r3, [r4, #12]
   895ee:	bd38      	pop	{r3, r4, r5, pc}
   895f0:	f001 f91a 	bl	8a828 <__sinit>
   895f4:	e7bf      	b.n	89576 <__swsetup_r+0x12>
   895f6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   895f8:	b151      	cbz	r1, 89610 <__swsetup_r+0xac>
   895fa:	f104 0240 	add.w	r2, r4, #64	; 0x40
   895fe:	4291      	cmp	r1, r2
   89600:	d004      	beq.n	8960c <__swsetup_r+0xa8>
   89602:	4628      	mov	r0, r5
   89604:	f001 fa34 	bl	8aa70 <_free_r>
   89608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8960c:	2200      	movs	r2, #0
   8960e:	6322      	str	r2, [r4, #48]	; 0x30
   89610:	2200      	movs	r2, #0
   89612:	6921      	ldr	r1, [r4, #16]
   89614:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   89618:	e9c4 1200 	strd	r1, r2, [r4]
   8961c:	e7c2      	b.n	895a4 <__swsetup_r+0x40>
   8961e:	2209      	movs	r2, #9
   89620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89624:	602a      	str	r2, [r5, #0]
   89626:	f04f 30ff 	mov.w	r0, #4294967295
   8962a:	81a3      	strh	r3, [r4, #12]
   8962c:	bd38      	pop	{r3, r4, r5, pc}
   8962e:	bf00      	nop
   89630:	20000440 	.word	0x20000440

00089634 <register_fini>:
   89634:	4b02      	ldr	r3, [pc, #8]	; (89640 <register_fini+0xc>)
   89636:	b113      	cbz	r3, 8963e <register_fini+0xa>
   89638:	4802      	ldr	r0, [pc, #8]	; (89644 <register_fini+0x10>)
   8963a:	f000 b805 	b.w	89648 <atexit>
   8963e:	4770      	bx	lr
   89640:	00000000 	.word	0x00000000
   89644:	0008a89d 	.word	0x0008a89d

00089648 <atexit>:
   89648:	2300      	movs	r3, #0
   8964a:	4601      	mov	r1, r0
   8964c:	461a      	mov	r2, r3
   8964e:	4618      	mov	r0, r3
   89650:	f003 b826 	b.w	8c6a0 <__register_exitproc>

00089654 <quorem>:
   89654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89658:	6903      	ldr	r3, [r0, #16]
   8965a:	690d      	ldr	r5, [r1, #16]
   8965c:	b083      	sub	sp, #12
   8965e:	42ab      	cmp	r3, r5
   89660:	f2c0 8084 	blt.w	8976c <quorem+0x118>
   89664:	3d01      	subs	r5, #1
   89666:	f101 0614 	add.w	r6, r1, #20
   8966a:	f100 0914 	add.w	r9, r0, #20
   8966e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   89672:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89676:	3301      	adds	r3, #1
   89678:	468e      	mov	lr, r1
   8967a:	00a9      	lsls	r1, r5, #2
   8967c:	9100      	str	r1, [sp, #0]
   8967e:	429a      	cmp	r2, r3
   89680:	eb09 0185 	add.w	r1, r9, r5, lsl #2
   89684:	4682      	mov	sl, r0
   89686:	fbb2 f7f3 	udiv	r7, r2, r3
   8968a:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   8968e:	9101      	str	r1, [sp, #4]
   89690:	d337      	bcc.n	89702 <quorem+0xae>
   89692:	2200      	movs	r2, #0
   89694:	46b4      	mov	ip, r6
   89696:	4614      	mov	r4, r2
   89698:	4648      	mov	r0, r9
   8969a:	f85c 3b04 	ldr.w	r3, [ip], #4
   8969e:	6801      	ldr	r1, [r0, #0]
   896a0:	fa1f fb83 	uxth.w	fp, r3
   896a4:	fb07 220b 	mla	r2, r7, fp, r2
   896a8:	0c1b      	lsrs	r3, r3, #16
   896aa:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   896ae:	fb07 bb03 	mla	fp, r7, r3, fp
   896b2:	b293      	uxth	r3, r2
   896b4:	1ae3      	subs	r3, r4, r3
   896b6:	b28a      	uxth	r2, r1
   896b8:	fa1f f48b 	uxth.w	r4, fp
   896bc:	4413      	add	r3, r2
   896be:	ebc4 4411 	rsb	r4, r4, r1, lsr #16
   896c2:	eb04 4423 	add.w	r4, r4, r3, asr #16
   896c6:	b29b      	uxth	r3, r3
   896c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   896cc:	45e0      	cmp	r8, ip
   896ce:	f840 3b04 	str.w	r3, [r0], #4
   896d2:	ea4f 4424 	mov.w	r4, r4, asr #16
   896d6:	ea4f 421b 	mov.w	r2, fp, lsr #16
   896da:	d2de      	bcs.n	8969a <quorem+0x46>
   896dc:	9b00      	ldr	r3, [sp, #0]
   896de:	f859 3003 	ldr.w	r3, [r9, r3]
   896e2:	b973      	cbnz	r3, 89702 <quorem+0xae>
   896e4:	9b01      	ldr	r3, [sp, #4]
   896e6:	3b04      	subs	r3, #4
   896e8:	4599      	cmp	r9, r3
   896ea:	d304      	bcc.n	896f6 <quorem+0xa2>
   896ec:	e007      	b.n	896fe <quorem+0xaa>
   896ee:	4599      	cmp	r9, r3
   896f0:	f105 35ff 	add.w	r5, r5, #4294967295
   896f4:	d203      	bcs.n	896fe <quorem+0xaa>
   896f6:	f853 2904 	ldr.w	r2, [r3], #-4
   896fa:	2a00      	cmp	r2, #0
   896fc:	d0f7      	beq.n	896ee <quorem+0x9a>
   896fe:	f8ca 5010 	str.w	r5, [sl, #16]
   89702:	4671      	mov	r1, lr
   89704:	4650      	mov	r0, sl
   89706:	f002 faab 	bl	8bc60 <__mcmp>
   8970a:	2800      	cmp	r0, #0
   8970c:	db2a      	blt.n	89764 <quorem+0x110>
   8970e:	4648      	mov	r0, r9
   89710:	2300      	movs	r3, #0
   89712:	3701      	adds	r7, #1
   89714:	f856 1b04 	ldr.w	r1, [r6], #4
   89718:	6804      	ldr	r4, [r0, #0]
   8971a:	b28a      	uxth	r2, r1
   8971c:	1a9a      	subs	r2, r3, r2
   8971e:	0c0b      	lsrs	r3, r1, #16
   89720:	b2a1      	uxth	r1, r4
   89722:	440a      	add	r2, r1
   89724:	ebc3 4314 	rsb	r3, r3, r4, lsr #16
   89728:	eb03 4322 	add.w	r3, r3, r2, asr #16
   8972c:	b292      	uxth	r2, r2
   8972e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   89732:	45b0      	cmp	r8, r6
   89734:	f840 2b04 	str.w	r2, [r0], #4
   89738:	ea4f 4323 	mov.w	r3, r3, asr #16
   8973c:	d2ea      	bcs.n	89714 <quorem+0xc0>
   8973e:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
   89742:	eb09 0385 	add.w	r3, r9, r5, lsl #2
   89746:	b96a      	cbnz	r2, 89764 <quorem+0x110>
   89748:	3b04      	subs	r3, #4
   8974a:	4599      	cmp	r9, r3
   8974c:	d304      	bcc.n	89758 <quorem+0x104>
   8974e:	e007      	b.n	89760 <quorem+0x10c>
   89750:	4599      	cmp	r9, r3
   89752:	f105 35ff 	add.w	r5, r5, #4294967295
   89756:	d203      	bcs.n	89760 <quorem+0x10c>
   89758:	f853 2904 	ldr.w	r2, [r3], #-4
   8975c:	2a00      	cmp	r2, #0
   8975e:	d0f7      	beq.n	89750 <quorem+0xfc>
   89760:	f8ca 5010 	str.w	r5, [sl, #16]
   89764:	4638      	mov	r0, r7
   89766:	b003      	add	sp, #12
   89768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8976c:	2000      	movs	r0, #0
   8976e:	b003      	add	sp, #12
   89770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89774:	0000      	movs	r0, r0
   89776:	0000      	movs	r0, r0

00089778 <_dtoa_r>:
   89778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8977c:	4616      	mov	r6, r2
   8977e:	461f      	mov	r7, r3
   89780:	6c01      	ldr	r1, [r0, #64]	; 0x40
   89782:	b09b      	sub	sp, #108	; 0x6c
   89784:	4604      	mov	r4, r0
   89786:	e9cd 6704 	strd	r6, r7, [sp, #16]
   8978a:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   8978c:	b141      	cbz	r1, 897a0 <_dtoa_r+0x28>
   8978e:	2301      	movs	r3, #1
   89790:	6c42      	ldr	r2, [r0, #68]	; 0x44
   89792:	4093      	lsls	r3, r2
   89794:	e9c1 2301 	strd	r2, r3, [r1, #4]
   89798:	f002 f834 	bl	8b804 <_Bfree>
   8979c:	2300      	movs	r3, #0
   8979e:	6423      	str	r3, [r4, #64]	; 0x40
   897a0:	f1b7 0900 	subs.w	r9, r7, #0
   897a4:	bfb4      	ite	lt
   897a6:	2301      	movlt	r3, #1
   897a8:	2300      	movge	r3, #0
   897aa:	602b      	str	r3, [r5, #0]
   897ac:	4b76      	ldr	r3, [pc, #472]	; (89988 <_dtoa_r+0x210>)
   897ae:	bfbc      	itt	lt
   897b0:	f029 4900 	biclt.w	r9, r9, #2147483648	; 0x80000000
   897b4:	f8cd 9014 	strlt.w	r9, [sp, #20]
   897b8:	ea33 0309 	bics.w	r3, r3, r9
   897bc:	f000 80ab 	beq.w	89916 <_dtoa_r+0x19e>
   897c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   897c4:	4610      	mov	r0, r2
   897c6:	4619      	mov	r1, r3
   897c8:	2200      	movs	r2, #0
   897ca:	2300      	movs	r3, #0
   897cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   897d0:	f003 fd52 	bl	8d278 <__aeabi_dcmpeq>
   897d4:	4680      	mov	r8, r0
   897d6:	b170      	cbz	r0, 897f6 <_dtoa_r+0x7e>
   897d8:	2301      	movs	r3, #1
   897da:	9a26      	ldr	r2, [sp, #152]	; 0x98
   897dc:	6013      	str	r3, [r2, #0]
   897de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   897e0:	2b00      	cmp	r3, #0
   897e2:	f000 82c2 	beq.w	89d6a <_dtoa_r+0x5f2>
   897e6:	4869      	ldr	r0, [pc, #420]	; (8998c <_dtoa_r+0x214>)
   897e8:	6018      	str	r0, [r3, #0]
   897ea:	1e43      	subs	r3, r0, #1
   897ec:	9303      	str	r3, [sp, #12]
   897ee:	9803      	ldr	r0, [sp, #12]
   897f0:	b01b      	add	sp, #108	; 0x6c
   897f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   897f6:	aa18      	add	r2, sp, #96	; 0x60
   897f8:	ab19      	add	r3, sp, #100	; 0x64
   897fa:	e9cd 3200 	strd	r3, r2, [sp]
   897fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   89802:	4620      	mov	r0, r4
   89804:	f002 faf2 	bl	8bdec <__d2b>
   89808:	ea5f 5519 	movs.w	r5, r9, lsr #20
   8980c:	4682      	mov	sl, r0
   8980e:	f040 8098 	bne.w	89942 <_dtoa_r+0x1ca>
   89812:	e9dd 8518 	ldrd	r8, r5, [sp, #96]	; 0x60
   89816:	4445      	add	r5, r8
   89818:	f205 4032 	addw	r0, r5, #1074	; 0x432
   8981c:	2820      	cmp	r0, #32
   8981e:	f340 8390 	ble.w	89f42 <_dtoa_r+0x7ca>
   89822:	f1c0 0340 	rsb	r3, r0, #64	; 0x40
   89826:	f205 4012 	addw	r0, r5, #1042	; 0x412
   8982a:	fa09 f903 	lsl.w	r9, r9, r3
   8982e:	fa26 f000 	lsr.w	r0, r6, r0
   89832:	ea49 0000 	orr.w	r0, r9, r0
   89836:	f003 fa3d 	bl	8ccb4 <__aeabi_ui2d>
   8983a:	2201      	movs	r2, #1
   8983c:	3d01      	subs	r5, #1
   8983e:	920f      	str	r2, [sp, #60]	; 0x3c
   89840:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   89844:	2200      	movs	r2, #0
   89846:	4b52      	ldr	r3, [pc, #328]	; (89990 <_dtoa_r+0x218>)
   89848:	f003 f8f6 	bl	8ca38 <__aeabi_dsub>
   8984c:	a348      	add	r3, pc, #288	; (adr r3, 89970 <_dtoa_r+0x1f8>)
   8984e:	e9d3 2300 	ldrd	r2, r3, [r3]
   89852:	f003 faa9 	bl	8cda8 <__aeabi_dmul>
   89856:	a348      	add	r3, pc, #288	; (adr r3, 89978 <_dtoa_r+0x200>)
   89858:	e9d3 2300 	ldrd	r2, r3, [r3]
   8985c:	f003 f8ee 	bl	8ca3c <__adddf3>
   89860:	4606      	mov	r6, r0
   89862:	4628      	mov	r0, r5
   89864:	460f      	mov	r7, r1
   89866:	f003 fa35 	bl	8ccd4 <__aeabi_i2d>
   8986a:	a345      	add	r3, pc, #276	; (adr r3, 89980 <_dtoa_r+0x208>)
   8986c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89870:	f003 fa9a 	bl	8cda8 <__aeabi_dmul>
   89874:	4602      	mov	r2, r0
   89876:	460b      	mov	r3, r1
   89878:	4630      	mov	r0, r6
   8987a:	4639      	mov	r1, r7
   8987c:	f003 f8de 	bl	8ca3c <__adddf3>
   89880:	4606      	mov	r6, r0
   89882:	460f      	mov	r7, r1
   89884:	f003 fd40 	bl	8d308 <__aeabi_d2iz>
   89888:	2200      	movs	r2, #0
   8988a:	4683      	mov	fp, r0
   8988c:	2300      	movs	r3, #0
   8988e:	4630      	mov	r0, r6
   89890:	4639      	mov	r1, r7
   89892:	f003 fcfb 	bl	8d28c <__aeabi_dcmplt>
   89896:	2800      	cmp	r0, #0
   89898:	f040 825a 	bne.w	89d50 <_dtoa_r+0x5d8>
   8989c:	f1bb 0f16 	cmp.w	fp, #22
   898a0:	f200 8248 	bhi.w	89d34 <_dtoa_r+0x5bc>
   898a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   898a8:	4b3a      	ldr	r3, [pc, #232]	; (89994 <_dtoa_r+0x21c>)
   898aa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   898ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   898b2:	f003 fceb 	bl	8d28c <__aeabi_dcmplt>
   898b6:	2800      	cmp	r0, #0
   898b8:	d072      	beq.n	899a0 <_dtoa_r+0x228>
   898ba:	2300      	movs	r3, #0
   898bc:	eba8 0505 	sub.w	r5, r8, r5
   898c0:	930e      	str	r3, [sp, #56]	; 0x38
   898c2:	1e6b      	subs	r3, r5, #1
   898c4:	f10b 3bff 	add.w	fp, fp, #4294967295
   898c8:	9306      	str	r3, [sp, #24]
   898ca:	f100 823b 	bmi.w	89d44 <_dtoa_r+0x5cc>
   898ce:	2300      	movs	r3, #0
   898d0:	930b      	str	r3, [sp, #44]	; 0x2c
   898d2:	f1bb 0f00 	cmp.w	fp, #0
   898d6:	da6b      	bge.n	899b0 <_dtoa_r+0x238>
   898d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   898da:	f8cd b01c 	str.w	fp, [sp, #28]
   898de:	eba3 030b 	sub.w	r3, r3, fp
   898e2:	930b      	str	r3, [sp, #44]	; 0x2c
   898e4:	f1cb 0300 	rsb	r3, fp, #0
   898e8:	930d      	str	r3, [sp, #52]	; 0x34
   898ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
   898ec:	f04f 0b00 	mov.w	fp, #0
   898f0:	2b09      	cmp	r3, #9
   898f2:	d866      	bhi.n	899c2 <_dtoa_r+0x24a>
   898f4:	2b05      	cmp	r3, #5
   898f6:	f340 8322 	ble.w	89f3e <_dtoa_r+0x7c6>
   898fa:	2500      	movs	r5, #0
   898fc:	3b04      	subs	r3, #4
   898fe:	9324      	str	r3, [sp, #144]	; 0x90
   89900:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89902:	3b02      	subs	r3, #2
   89904:	2b03      	cmp	r3, #3
   89906:	f200 866e 	bhi.w	8a5e6 <_dtoa_r+0xe6e>
   8990a:	e8df f013 	tbh	[pc, r3, lsl #1]
   8990e:	043b      	.short	0x043b
   89910:	042f0438 	.word	0x042f0438
   89914:	0412      	.short	0x0412
   89916:	f242 730f 	movw	r3, #9999	; 0x270f
   8991a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8991c:	f3c9 0913 	ubfx	r9, r9, #0, #20
   89920:	6013      	str	r3, [r2, #0]
   89922:	ea59 0306 	orrs.w	r3, r9, r6
   89926:	d11c      	bne.n	89962 <_dtoa_r+0x1ea>
   89928:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8992a:	2b00      	cmp	r3, #0
   8992c:	f000 8657 	beq.w	8a5de <_dtoa_r+0xe66>
   89930:	4b19      	ldr	r3, [pc, #100]	; (89998 <_dtoa_r+0x220>)
   89932:	9303      	str	r3, [sp, #12]
   89934:	3308      	adds	r3, #8
   89936:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   89938:	9803      	ldr	r0, [sp, #12]
   8993a:	6013      	str	r3, [r2, #0]
   8993c:	b01b      	add	sp, #108	; 0x6c
   8993e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89942:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   89946:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8994a:	4608      	mov	r0, r1
   8994c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   89950:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   89954:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   89958:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   8995c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   89960:	e770      	b.n	89844 <_dtoa_r+0xcc>
   89962:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89964:	2b00      	cmp	r3, #0
   89966:	f040 83c8 	bne.w	8a0fa <_dtoa_r+0x982>
   8996a:	4b0c      	ldr	r3, [pc, #48]	; (8999c <_dtoa_r+0x224>)
   8996c:	9303      	str	r3, [sp, #12]
   8996e:	e73e      	b.n	897ee <_dtoa_r+0x76>
   89970:	636f4361 	.word	0x636f4361
   89974:	3fd287a7 	.word	0x3fd287a7
   89978:	8b60c8b3 	.word	0x8b60c8b3
   8997c:	3fc68a28 	.word	0x3fc68a28
   89980:	509f79fb 	.word	0x509f79fb
   89984:	3fd34413 	.word	0x3fd34413
   89988:	7ff00000 	.word	0x7ff00000
   8998c:	0008d45d 	.word	0x0008d45d
   89990:	3ff80000 	.word	0x3ff80000
   89994:	0008d5f8 	.word	0x0008d5f8
   89998:	0008d4a4 	.word	0x0008d4a4
   8999c:	0008d4a0 	.word	0x0008d4a0
   899a0:	eba8 0505 	sub.w	r5, r8, r5
   899a4:	1e6b      	subs	r3, r5, #1
   899a6:	9306      	str	r3, [sp, #24]
   899a8:	f100 84a9 	bmi.w	8a2fe <_dtoa_r+0xb86>
   899ac:	900e      	str	r0, [sp, #56]	; 0x38
   899ae:	900b      	str	r0, [sp, #44]	; 0x2c
   899b0:	9b06      	ldr	r3, [sp, #24]
   899b2:	445b      	add	r3, fp
   899b4:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   899b8:	2300      	movs	r3, #0
   899ba:	930d      	str	r3, [sp, #52]	; 0x34
   899bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   899be:	2b09      	cmp	r3, #9
   899c0:	d998      	bls.n	898f4 <_dtoa_r+0x17c>
   899c2:	2300      	movs	r3, #0
   899c4:	2501      	movs	r5, #1
   899c6:	9324      	str	r3, [sp, #144]	; 0x90
   899c8:	9325      	str	r3, [sp, #148]	; 0x94
   899ca:	f04f 33ff 	mov.w	r3, #4294967295
   899ce:	950c      	str	r5, [sp, #48]	; 0x30
   899d0:	930a      	str	r3, [sp, #40]	; 0x28
   899d2:	2100      	movs	r1, #0
   899d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   899d6:	6461      	str	r1, [r4, #68]	; 0x44
   899d8:	9312      	str	r3, [sp, #72]	; 0x48
   899da:	4620      	mov	r0, r4
   899dc:	f001 feec 	bl	8b7b8 <_Balloc>
   899e0:	9003      	str	r0, [sp, #12]
   899e2:	2800      	cmp	r0, #0
   899e4:	f000 8607 	beq.w	8a5f6 <_dtoa_r+0xe7e>
   899e8:	9b03      	ldr	r3, [sp, #12]
   899ea:	6423      	str	r3, [r4, #64]	; 0x40
   899ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   899ee:	2b0e      	cmp	r3, #14
   899f0:	f200 80e9 	bhi.w	89bc6 <_dtoa_r+0x44e>
   899f4:	2d00      	cmp	r5, #0
   899f6:	f000 80e6 	beq.w	89bc6 <_dtoa_r+0x44e>
   899fa:	9907      	ldr	r1, [sp, #28]
   899fc:	2900      	cmp	r1, #0
   899fe:	f340 8452 	ble.w	8a2a6 <_dtoa_r+0xb2e>
   89a02:	4bb5      	ldr	r3, [pc, #724]	; (89cd8 <_dtoa_r+0x560>)
   89a04:	f001 020f 	and.w	r2, r1, #15
   89a08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89a0c:	05c8      	lsls	r0, r1, #23
   89a0e:	ea4f 1521 	mov.w	r5, r1, asr #4
   89a12:	e9d3 6700 	ldrd	r6, r7, [r3]
   89a16:	f140 83ee 	bpl.w	8a1f6 <_dtoa_r+0xa7e>
   89a1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89a1e:	4baf      	ldr	r3, [pc, #700]	; (89cdc <_dtoa_r+0x564>)
   89a20:	f04f 0903 	mov.w	r9, #3
   89a24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   89a28:	f003 fae8 	bl	8cffc <__aeabi_ddiv>
   89a2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89a30:	f005 050f 	and.w	r5, r5, #15
   89a34:	b18d      	cbz	r5, 89a5a <_dtoa_r+0x2e2>
   89a36:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 89cdc <_dtoa_r+0x564>
   89a3a:	07e9      	lsls	r1, r5, #31
   89a3c:	d509      	bpl.n	89a52 <_dtoa_r+0x2da>
   89a3e:	e9d8 2300 	ldrd	r2, r3, [r8]
   89a42:	4630      	mov	r0, r6
   89a44:	4639      	mov	r1, r7
   89a46:	f003 f9af 	bl	8cda8 <__aeabi_dmul>
   89a4a:	4606      	mov	r6, r0
   89a4c:	460f      	mov	r7, r1
   89a4e:	f109 0901 	add.w	r9, r9, #1
   89a52:	106d      	asrs	r5, r5, #1
   89a54:	f108 0808 	add.w	r8, r8, #8
   89a58:	d1ef      	bne.n	89a3a <_dtoa_r+0x2c2>
   89a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89a5e:	4632      	mov	r2, r6
   89a60:	463b      	mov	r3, r7
   89a62:	f003 facb 	bl	8cffc <__aeabi_ddiv>
   89a66:	4606      	mov	r6, r0
   89a68:	460f      	mov	r7, r1
   89a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89a6c:	b143      	cbz	r3, 89a80 <_dtoa_r+0x308>
   89a6e:	2200      	movs	r2, #0
   89a70:	4630      	mov	r0, r6
   89a72:	4639      	mov	r1, r7
   89a74:	4b9a      	ldr	r3, [pc, #616]	; (89ce0 <_dtoa_r+0x568>)
   89a76:	f003 fc09 	bl	8d28c <__aeabi_dcmplt>
   89a7a:	2800      	cmp	r0, #0
   89a7c:	f040 853b 	bne.w	8a4f6 <_dtoa_r+0xd7e>
   89a80:	4648      	mov	r0, r9
   89a82:	f003 f927 	bl	8ccd4 <__aeabi_i2d>
   89a86:	4632      	mov	r2, r6
   89a88:	463b      	mov	r3, r7
   89a8a:	f003 f98d 	bl	8cda8 <__aeabi_dmul>
   89a8e:	4b95      	ldr	r3, [pc, #596]	; (89ce4 <_dtoa_r+0x56c>)
   89a90:	2200      	movs	r2, #0
   89a92:	f002 ffd3 	bl	8ca3c <__adddf3>
   89a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89a98:	4680      	mov	r8, r0
   89a9a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   89a9e:	2b00      	cmp	r3, #0
   89aa0:	f000 83ce 	beq.w	8a240 <_dtoa_r+0xac8>
   89aa4:	9b07      	ldr	r3, [sp, #28]
   89aa6:	9313      	str	r3, [sp, #76]	; 0x4c
   89aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89aaa:	9310      	str	r3, [sp, #64]	; 0x40
   89aac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89aae:	2b00      	cmp	r3, #0
   89ab0:	f000 84b7 	beq.w	8a422 <_dtoa_r+0xcaa>
   89ab4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   89ab6:	4b88      	ldr	r3, [pc, #544]	; (89cd8 <_dtoa_r+0x560>)
   89ab8:	2000      	movs	r0, #0
   89aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89abe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   89ac2:	4989      	ldr	r1, [pc, #548]	; (89ce8 <_dtoa_r+0x570>)
   89ac4:	f003 fa9a 	bl	8cffc <__aeabi_ddiv>
   89ac8:	4642      	mov	r2, r8
   89aca:	464b      	mov	r3, r9
   89acc:	f002 ffb4 	bl	8ca38 <__aeabi_dsub>
   89ad0:	4602      	mov	r2, r0
   89ad2:	460b      	mov	r3, r1
   89ad4:	4630      	mov	r0, r6
   89ad6:	4639      	mov	r1, r7
   89ad8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   89adc:	f003 fc14 	bl	8d308 <__aeabi_d2iz>
   89ae0:	4680      	mov	r8, r0
   89ae2:	f003 f8f7 	bl	8ccd4 <__aeabi_i2d>
   89ae6:	4602      	mov	r2, r0
   89ae8:	460b      	mov	r3, r1
   89aea:	4630      	mov	r0, r6
   89aec:	4639      	mov	r1, r7
   89aee:	f002 ffa3 	bl	8ca38 <__aeabi_dsub>
   89af2:	9d03      	ldr	r5, [sp, #12]
   89af4:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89af8:	4606      	mov	r6, r0
   89afa:	460f      	mov	r7, r1
   89afc:	4602      	mov	r2, r0
   89afe:	f805 3b01 	strb.w	r3, [r5], #1
   89b02:	460b      	mov	r3, r1
   89b04:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   89b08:	f003 fbde 	bl	8d2c8 <__aeabi_dcmpgt>
   89b0c:	2800      	cmp	r0, #0
   89b0e:	f040 853b 	bne.w	8a588 <_dtoa_r+0xe10>
   89b12:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
   89b16:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
   89b1a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   89b1e:	f04f 0900 	mov.w	r9, #0
   89b22:	9410      	str	r4, [sp, #64]	; 0x40
   89b24:	e02a      	b.n	89b7c <_dtoa_r+0x404>
   89b26:	f109 0901 	add.w	r9, r9, #1
   89b2a:	45c1      	cmp	r9, r8
   89b2c:	da48      	bge.n	89bc0 <_dtoa_r+0x448>
   89b2e:	4650      	mov	r0, sl
   89b30:	4659      	mov	r1, fp
   89b32:	2200      	movs	r2, #0
   89b34:	4b6d      	ldr	r3, [pc, #436]	; (89cec <_dtoa_r+0x574>)
   89b36:	f003 f937 	bl	8cda8 <__aeabi_dmul>
   89b3a:	2200      	movs	r2, #0
   89b3c:	4b6b      	ldr	r3, [pc, #428]	; (89cec <_dtoa_r+0x574>)
   89b3e:	4682      	mov	sl, r0
   89b40:	468b      	mov	fp, r1
   89b42:	4630      	mov	r0, r6
   89b44:	4639      	mov	r1, r7
   89b46:	f003 f92f 	bl	8cda8 <__aeabi_dmul>
   89b4a:	460f      	mov	r7, r1
   89b4c:	4606      	mov	r6, r0
   89b4e:	f003 fbdb 	bl	8d308 <__aeabi_d2iz>
   89b52:	4604      	mov	r4, r0
   89b54:	f003 f8be 	bl	8ccd4 <__aeabi_i2d>
   89b58:	4602      	mov	r2, r0
   89b5a:	460b      	mov	r3, r1
   89b5c:	4630      	mov	r0, r6
   89b5e:	4639      	mov	r1, r7
   89b60:	f002 ff6a 	bl	8ca38 <__aeabi_dsub>
   89b64:	3430      	adds	r4, #48	; 0x30
   89b66:	4652      	mov	r2, sl
   89b68:	465b      	mov	r3, fp
   89b6a:	f805 4b01 	strb.w	r4, [r5], #1
   89b6e:	4606      	mov	r6, r0
   89b70:	460f      	mov	r7, r1
   89b72:	f003 fb8b 	bl	8d28c <__aeabi_dcmplt>
   89b76:	2800      	cmp	r0, #0
   89b78:	f040 8503 	bne.w	8a582 <_dtoa_r+0xe0a>
   89b7c:	4632      	mov	r2, r6
   89b7e:	463b      	mov	r3, r7
   89b80:	2000      	movs	r0, #0
   89b82:	4957      	ldr	r1, [pc, #348]	; (89ce0 <_dtoa_r+0x568>)
   89b84:	f002 ff58 	bl	8ca38 <__aeabi_dsub>
   89b88:	4652      	mov	r2, sl
   89b8a:	465b      	mov	r3, fp
   89b8c:	f003 fb7e 	bl	8d28c <__aeabi_dcmplt>
   89b90:	2800      	cmp	r0, #0
   89b92:	d0c8      	beq.n	89b26 <_dtoa_r+0x3ae>
   89b94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   89b96:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   89b9a:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89b9c:	9a03      	ldr	r2, [sp, #12]
   89b9e:	9307      	str	r3, [sp, #28]
   89ba0:	e002      	b.n	89ba8 <_dtoa_r+0x430>
   89ba2:	4295      	cmp	r5, r2
   89ba4:	f000 84d2 	beq.w	8a54c <_dtoa_r+0xdd4>
   89ba8:	46a9      	mov	r9, r5
   89baa:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
   89bae:	2b39      	cmp	r3, #57	; 0x39
   89bb0:	d0f7      	beq.n	89ba2 <_dtoa_r+0x42a>
   89bb2:	3301      	adds	r3, #1
   89bb4:	b2db      	uxtb	r3, r3
   89bb6:	702b      	strb	r3, [r5, #0]
   89bb8:	9b07      	ldr	r3, [sp, #28]
   89bba:	3301      	adds	r3, #1
   89bbc:	9307      	str	r3, [sp, #28]
   89bbe:	e1a0      	b.n	89f02 <_dtoa_r+0x78a>
   89bc0:	9c10      	ldr	r4, [sp, #64]	; 0x40
   89bc2:	e9dd ab16 	ldrd	sl, fp, [sp, #88]	; 0x58
   89bc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   89bc8:	2b00      	cmp	r3, #0
   89bca:	f2c0 8093 	blt.w	89cf4 <_dtoa_r+0x57c>
   89bce:	9a07      	ldr	r2, [sp, #28]
   89bd0:	2a0e      	cmp	r2, #14
   89bd2:	f300 808f 	bgt.w	89cf4 <_dtoa_r+0x57c>
   89bd6:	4b40      	ldr	r3, [pc, #256]	; (89cd8 <_dtoa_r+0x560>)
   89bd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   89be0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   89be4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89be6:	2b00      	cmp	r3, #0
   89be8:	da1a      	bge.n	89c20 <_dtoa_r+0x4a8>
   89bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89bec:	2b00      	cmp	r3, #0
   89bee:	dc17      	bgt.n	89c20 <_dtoa_r+0x4a8>
   89bf0:	f040 833f 	bne.w	8a272 <_dtoa_r+0xafa>
   89bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   89bf8:	2200      	movs	r2, #0
   89bfa:	4b3d      	ldr	r3, [pc, #244]	; (89cf0 <_dtoa_r+0x578>)
   89bfc:	f003 f8d4 	bl	8cda8 <__aeabi_dmul>
   89c00:	4602      	mov	r2, r0
   89c02:	460b      	mov	r3, r1
   89c04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89c08:	f003 fb4a 	bl	8d2a0 <__aeabi_dcmple>
   89c0c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   89c10:	4645      	mov	r5, r8
   89c12:	2800      	cmp	r0, #0
   89c14:	f000 82cd 	beq.w	8a1b2 <_dtoa_r+0xa3a>
   89c18:	9b25      	ldr	r3, [sp, #148]	; 0x94
   89c1a:	9f03      	ldr	r7, [sp, #12]
   89c1c:	43de      	mvns	r6, r3
   89c1e:	e2d0      	b.n	8a1c2 <_dtoa_r+0xa4a>
   89c20:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   89c24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89c28:	4632      	mov	r2, r6
   89c2a:	463b      	mov	r3, r7
   89c2c:	f003 f9e6 	bl	8cffc <__aeabi_ddiv>
   89c30:	f003 fb6a 	bl	8d308 <__aeabi_d2iz>
   89c34:	4680      	mov	r8, r0
   89c36:	f003 f84d 	bl	8ccd4 <__aeabi_i2d>
   89c3a:	4632      	mov	r2, r6
   89c3c:	463b      	mov	r3, r7
   89c3e:	f003 f8b3 	bl	8cda8 <__aeabi_dmul>
   89c42:	460b      	mov	r3, r1
   89c44:	4602      	mov	r2, r0
   89c46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   89c4a:	f002 fef5 	bl	8ca38 <__aeabi_dsub>
   89c4e:	9d03      	ldr	r5, [sp, #12]
   89c50:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89c54:	f805 3b01 	strb.w	r3, [r5], #1
   89c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89c5a:	2b01      	cmp	r3, #1
   89c5c:	f000 837f 	beq.w	8a35e <_dtoa_r+0xbe6>
   89c60:	f8cd a018 	str.w	sl, [sp, #24]
   89c64:	f04f 0901 	mov.w	r9, #1
   89c68:	469b      	mov	fp, r3
   89c6a:	46aa      	mov	sl, r5
   89c6c:	9408      	str	r4, [sp, #32]
   89c6e:	e01d      	b.n	89cac <_dtoa_r+0x534>
   89c70:	4632      	mov	r2, r6
   89c72:	463b      	mov	r3, r7
   89c74:	4620      	mov	r0, r4
   89c76:	4629      	mov	r1, r5
   89c78:	f003 f9c0 	bl	8cffc <__aeabi_ddiv>
   89c7c:	f003 fb44 	bl	8d308 <__aeabi_d2iz>
   89c80:	4680      	mov	r8, r0
   89c82:	f003 f827 	bl	8ccd4 <__aeabi_i2d>
   89c86:	4632      	mov	r2, r6
   89c88:	463b      	mov	r3, r7
   89c8a:	f003 f88d 	bl	8cda8 <__aeabi_dmul>
   89c8e:	f109 0901 	add.w	r9, r9, #1
   89c92:	460b      	mov	r3, r1
   89c94:	4602      	mov	r2, r0
   89c96:	4629      	mov	r1, r5
   89c98:	4620      	mov	r0, r4
   89c9a:	f002 fecd 	bl	8ca38 <__aeabi_dsub>
   89c9e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   89ca2:	45cb      	cmp	fp, r9
   89ca4:	f80a 3b01 	strb.w	r3, [sl], #1
   89ca8:	f000 8355 	beq.w	8a356 <_dtoa_r+0xbde>
   89cac:	2200      	movs	r2, #0
   89cae:	4b0f      	ldr	r3, [pc, #60]	; (89cec <_dtoa_r+0x574>)
   89cb0:	f003 f87a 	bl	8cda8 <__aeabi_dmul>
   89cb4:	2200      	movs	r2, #0
   89cb6:	2300      	movs	r3, #0
   89cb8:	4604      	mov	r4, r0
   89cba:	460d      	mov	r5, r1
   89cbc:	f003 fadc 	bl	8d278 <__aeabi_dcmpeq>
   89cc0:	2800      	cmp	r0, #0
   89cc2:	d0d5      	beq.n	89c70 <_dtoa_r+0x4f8>
   89cc4:	4655      	mov	r5, sl
   89cc6:	9c08      	ldr	r4, [sp, #32]
   89cc8:	f8dd a018 	ldr.w	sl, [sp, #24]
   89ccc:	9b07      	ldr	r3, [sp, #28]
   89cce:	46a9      	mov	r9, r5
   89cd0:	3301      	adds	r3, #1
   89cd2:	9307      	str	r3, [sp, #28]
   89cd4:	e115      	b.n	89f02 <_dtoa_r+0x78a>
   89cd6:	bf00      	nop
   89cd8:	0008d5f8 	.word	0x0008d5f8
   89cdc:	0008d5d0 	.word	0x0008d5d0
   89ce0:	3ff00000 	.word	0x3ff00000
   89ce4:	401c0000 	.word	0x401c0000
   89ce8:	3fe00000 	.word	0x3fe00000
   89cec:	40240000 	.word	0x40240000
   89cf0:	40140000 	.word	0x40140000
   89cf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89cf6:	2a00      	cmp	r2, #0
   89cf8:	d03d      	beq.n	89d76 <_dtoa_r+0x5fe>
   89cfa:	9a24      	ldr	r2, [sp, #144]	; 0x90
   89cfc:	2a01      	cmp	r2, #1
   89cfe:	f340 82bc 	ble.w	8a27a <_dtoa_r+0xb02>
   89d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89d04:	1e5f      	subs	r7, r3, #1
   89d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89d08:	42bb      	cmp	r3, r7
   89d0a:	f2c0 826e 	blt.w	8a1ea <_dtoa_r+0xa72>
   89d0e:	1bdf      	subs	r7, r3, r7
   89d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89d12:	2b00      	cmp	r3, #0
   89d14:	f2c0 8354 	blt.w	8a3c0 <_dtoa_r+0xc48>
   89d18:	9a06      	ldr	r2, [sp, #24]
   89d1a:	4611      	mov	r1, r2
   89d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   89d1e:	4419      	add	r1, r3
   89d20:	4616      	mov	r6, r2
   89d22:	441a      	add	r2, r3
   89d24:	9106      	str	r1, [sp, #24]
   89d26:	920b      	str	r2, [sp, #44]	; 0x2c
   89d28:	2101      	movs	r1, #1
   89d2a:	4620      	mov	r0, r4
   89d2c:	f001 fe12 	bl	8b954 <__i2b>
   89d30:	4605      	mov	r5, r0
   89d32:	e023      	b.n	89d7c <_dtoa_r+0x604>
   89d34:	2301      	movs	r3, #1
   89d36:	eba8 0505 	sub.w	r5, r8, r5
   89d3a:	930e      	str	r3, [sp, #56]	; 0x38
   89d3c:	1e6b      	subs	r3, r5, #1
   89d3e:	9306      	str	r3, [sp, #24]
   89d40:	f57f adc5 	bpl.w	898ce <_dtoa_r+0x156>
   89d44:	f1c5 0301 	rsb	r3, r5, #1
   89d48:	930b      	str	r3, [sp, #44]	; 0x2c
   89d4a:	2300      	movs	r3, #0
   89d4c:	9306      	str	r3, [sp, #24]
   89d4e:	e5c0      	b.n	898d2 <_dtoa_r+0x15a>
   89d50:	4658      	mov	r0, fp
   89d52:	f002 ffbf 	bl	8ccd4 <__aeabi_i2d>
   89d56:	4632      	mov	r2, r6
   89d58:	463b      	mov	r3, r7
   89d5a:	f003 fa8d 	bl	8d278 <__aeabi_dcmpeq>
   89d5e:	2800      	cmp	r0, #0
   89d60:	f47f ad9c 	bne.w	8989c <_dtoa_r+0x124>
   89d64:	f10b 3bff 	add.w	fp, fp, #4294967295
   89d68:	e598      	b.n	8989c <_dtoa_r+0x124>
   89d6a:	4bc7      	ldr	r3, [pc, #796]	; (8a088 <_dtoa_r+0x910>)
   89d6c:	9303      	str	r3, [sp, #12]
   89d6e:	9803      	ldr	r0, [sp, #12]
   89d70:	b01b      	add	sp, #108	; 0x6c
   89d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89d76:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   89d78:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
   89d7c:	2e00      	cmp	r6, #0
   89d7e:	dd0c      	ble.n	89d9a <_dtoa_r+0x622>
   89d80:	9a06      	ldr	r2, [sp, #24]
   89d82:	2a00      	cmp	r2, #0
   89d84:	dd09      	ble.n	89d9a <_dtoa_r+0x622>
   89d86:	42b2      	cmp	r2, r6
   89d88:	4613      	mov	r3, r2
   89d8a:	bfa8      	it	ge
   89d8c:	4633      	movge	r3, r6
   89d8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89d90:	1af6      	subs	r6, r6, r3
   89d92:	1ac9      	subs	r1, r1, r3
   89d94:	1ad3      	subs	r3, r2, r3
   89d96:	910b      	str	r1, [sp, #44]	; 0x2c
   89d98:	9306      	str	r3, [sp, #24]
   89d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89d9c:	b1d3      	cbz	r3, 89dd4 <_dtoa_r+0x65c>
   89d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89da0:	2b00      	cmp	r3, #0
   89da2:	f000 81a3 	beq.w	8a0ec <_dtoa_r+0x974>
   89da6:	2f00      	cmp	r7, #0
   89da8:	dd10      	ble.n	89dcc <_dtoa_r+0x654>
   89daa:	4629      	mov	r1, r5
   89dac:	463a      	mov	r2, r7
   89dae:	4620      	mov	r0, r4
   89db0:	f001 fe96 	bl	8bae0 <__pow5mult>
   89db4:	4652      	mov	r2, sl
   89db6:	4601      	mov	r1, r0
   89db8:	4605      	mov	r5, r0
   89dba:	4620      	mov	r0, r4
   89dbc:	f001 fde0 	bl	8b980 <__multiply>
   89dc0:	4603      	mov	r3, r0
   89dc2:	4651      	mov	r1, sl
   89dc4:	4620      	mov	r0, r4
   89dc6:	469a      	mov	sl, r3
   89dc8:	f001 fd1c 	bl	8b804 <_Bfree>
   89dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89dce:	1bda      	subs	r2, r3, r7
   89dd0:	f040 818d 	bne.w	8a0ee <_dtoa_r+0x976>
   89dd4:	2101      	movs	r1, #1
   89dd6:	4620      	mov	r0, r4
   89dd8:	f001 fdbc 	bl	8b954 <__i2b>
   89ddc:	f1bb 0f00 	cmp.w	fp, #0
   89de0:	4680      	mov	r8, r0
   89de2:	f300 80b3 	bgt.w	89f4c <_dtoa_r+0x7d4>
   89de6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89de8:	2b01      	cmp	r3, #1
   89dea:	f340 818a 	ble.w	8a102 <_dtoa_r+0x98a>
   89dee:	f04f 0900 	mov.w	r9, #0
   89df2:	2001      	movs	r0, #1
   89df4:	f1bb 0f00 	cmp.w	fp, #0
   89df8:	f040 80b4 	bne.w	89f64 <_dtoa_r+0x7ec>
   89dfc:	9a06      	ldr	r2, [sp, #24]
   89dfe:	4410      	add	r0, r2
   89e00:	f010 001f 	ands.w	r0, r0, #31
   89e04:	f000 8092 	beq.w	89f2c <_dtoa_r+0x7b4>
   89e08:	f1c0 0320 	rsb	r3, r0, #32
   89e0c:	2b04      	cmp	r3, #4
   89e0e:	f340 83f9 	ble.w	8a604 <_dtoa_r+0xe8c>
   89e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89e14:	f1c0 001c 	rsb	r0, r0, #28
   89e18:	4403      	add	r3, r0
   89e1a:	4402      	add	r2, r0
   89e1c:	930b      	str	r3, [sp, #44]	; 0x2c
   89e1e:	4406      	add	r6, r0
   89e20:	9206      	str	r2, [sp, #24]
   89e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89e24:	2b00      	cmp	r3, #0
   89e26:	dd05      	ble.n	89e34 <_dtoa_r+0x6bc>
   89e28:	4651      	mov	r1, sl
   89e2a:	461a      	mov	r2, r3
   89e2c:	4620      	mov	r0, r4
   89e2e:	f001 fea3 	bl	8bb78 <__lshift>
   89e32:	4682      	mov	sl, r0
   89e34:	9b06      	ldr	r3, [sp, #24]
   89e36:	2b00      	cmp	r3, #0
   89e38:	dd05      	ble.n	89e46 <_dtoa_r+0x6ce>
   89e3a:	4641      	mov	r1, r8
   89e3c:	461a      	mov	r2, r3
   89e3e:	4620      	mov	r0, r4
   89e40:	f001 fe9a 	bl	8bb78 <__lshift>
   89e44:	4680      	mov	r8, r0
   89e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89e48:	2b00      	cmp	r3, #0
   89e4a:	f040 8135 	bne.w	8a0b8 <_dtoa_r+0x940>
   89e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   89e50:	2b00      	cmp	r3, #0
   89e52:	f340 811b 	ble.w	8a08c <_dtoa_r+0x914>
   89e56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89e58:	2b00      	cmp	r3, #0
   89e5a:	f040 809a 	bne.w	89f92 <_dtoa_r+0x81a>
   89e5e:	9b07      	ldr	r3, [sp, #28]
   89e60:	3301      	adds	r3, #1
   89e62:	9307      	str	r3, [sp, #28]
   89e64:	2601      	movs	r6, #1
   89e66:	9f03      	ldr	r7, [sp, #12]
   89e68:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   89e6c:	e007      	b.n	89e7e <_dtoa_r+0x706>
   89e6e:	4651      	mov	r1, sl
   89e70:	2300      	movs	r3, #0
   89e72:	220a      	movs	r2, #10
   89e74:	4620      	mov	r0, r4
   89e76:	f001 fccf 	bl	8b818 <__multadd>
   89e7a:	4682      	mov	sl, r0
   89e7c:	3601      	adds	r6, #1
   89e7e:	4641      	mov	r1, r8
   89e80:	4650      	mov	r0, sl
   89e82:	f7ff fbe7 	bl	89654 <quorem>
   89e86:	454e      	cmp	r6, r9
   89e88:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89e8c:	f807 3b01 	strb.w	r3, [r7], #1
   89e90:	dbed      	blt.n	89e6e <_dtoa_r+0x6f6>
   89e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89e94:	2600      	movs	r6, #0
   89e96:	2a00      	cmp	r2, #0
   89e98:	bfcc      	ite	gt
   89e9a:	4693      	movgt	fp, r2
   89e9c:	f04f 0b01 	movle.w	fp, #1
   89ea0:	9a03      	ldr	r2, [sp, #12]
   89ea2:	4493      	add	fp, r2
   89ea4:	4651      	mov	r1, sl
   89ea6:	2201      	movs	r2, #1
   89ea8:	4620      	mov	r0, r4
   89eaa:	9304      	str	r3, [sp, #16]
   89eac:	f001 fe64 	bl	8bb78 <__lshift>
   89eb0:	4641      	mov	r1, r8
   89eb2:	4682      	mov	sl, r0
   89eb4:	f001 fed4 	bl	8bc60 <__mcmp>
   89eb8:	2800      	cmp	r0, #0
   89eba:	f340 81a8 	ble.w	8a20e <_dtoa_r+0xa96>
   89ebe:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   89ec2:	9a03      	ldr	r2, [sp, #12]
   89ec4:	f10b 3bff 	add.w	fp, fp, #4294967295
   89ec8:	e004      	b.n	89ed4 <_dtoa_r+0x75c>
   89eca:	455a      	cmp	r2, fp
   89ecc:	f000 81e4 	beq.w	8a298 <_dtoa_r+0xb20>
   89ed0:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89ed4:	2b39      	cmp	r3, #57	; 0x39
   89ed6:	f10b 0901 	add.w	r9, fp, #1
   89eda:	d0f6      	beq.n	89eca <_dtoa_r+0x752>
   89edc:	3301      	adds	r3, #1
   89ede:	f88b 3000 	strb.w	r3, [fp]
   89ee2:	4641      	mov	r1, r8
   89ee4:	4620      	mov	r0, r4
   89ee6:	f001 fc8d 	bl	8b804 <_Bfree>
   89eea:	b155      	cbz	r5, 89f02 <_dtoa_r+0x78a>
   89eec:	b12e      	cbz	r6, 89efa <_dtoa_r+0x782>
   89eee:	42ae      	cmp	r6, r5
   89ef0:	d003      	beq.n	89efa <_dtoa_r+0x782>
   89ef2:	4631      	mov	r1, r6
   89ef4:	4620      	mov	r0, r4
   89ef6:	f001 fc85 	bl	8b804 <_Bfree>
   89efa:	4629      	mov	r1, r5
   89efc:	4620      	mov	r0, r4
   89efe:	f001 fc81 	bl	8b804 <_Bfree>
   89f02:	4651      	mov	r1, sl
   89f04:	4620      	mov	r0, r4
   89f06:	f001 fc7d 	bl	8b804 <_Bfree>
   89f0a:	2300      	movs	r3, #0
   89f0c:	f889 3000 	strb.w	r3, [r9]
   89f10:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89f12:	461a      	mov	r2, r3
   89f14:	9b07      	ldr	r3, [sp, #28]
   89f16:	6013      	str	r3, [r2, #0]
   89f18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   89f1a:	2b00      	cmp	r3, #0
   89f1c:	f43f ac67 	beq.w	897ee <_dtoa_r+0x76>
   89f20:	9803      	ldr	r0, [sp, #12]
   89f22:	f8c3 9000 	str.w	r9, [r3]
   89f26:	b01b      	add	sp, #108	; 0x6c
   89f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89f2c:	201c      	movs	r0, #28
   89f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   89f30:	4406      	add	r6, r0
   89f32:	4403      	add	r3, r0
   89f34:	930b      	str	r3, [sp, #44]	; 0x2c
   89f36:	9b06      	ldr	r3, [sp, #24]
   89f38:	4403      	add	r3, r0
   89f3a:	9306      	str	r3, [sp, #24]
   89f3c:	e771      	b.n	89e22 <_dtoa_r+0x6aa>
   89f3e:	2501      	movs	r5, #1
   89f40:	e4de      	b.n	89900 <_dtoa_r+0x188>
   89f42:	f1c0 0020 	rsb	r0, r0, #32
   89f46:	fa06 f000 	lsl.w	r0, r6, r0
   89f4a:	e474      	b.n	89836 <_dtoa_r+0xbe>
   89f4c:	4601      	mov	r1, r0
   89f4e:	465a      	mov	r2, fp
   89f50:	4620      	mov	r0, r4
   89f52:	f001 fdc5 	bl	8bae0 <__pow5mult>
   89f56:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89f58:	4680      	mov	r8, r0
   89f5a:	2b01      	cmp	r3, #1
   89f5c:	f340 81d1 	ble.w	8a302 <_dtoa_r+0xb8a>
   89f60:	f04f 0900 	mov.w	r9, #0
   89f64:	f8d8 3010 	ldr.w	r3, [r8, #16]
   89f68:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   89f6c:	6918      	ldr	r0, [r3, #16]
   89f6e:	f001 fca1 	bl	8b8b4 <__hi0bits>
   89f72:	f1c0 0020 	rsb	r0, r0, #32
   89f76:	e741      	b.n	89dfc <_dtoa_r+0x684>
   89f78:	4629      	mov	r1, r5
   89f7a:	2300      	movs	r3, #0
   89f7c:	220a      	movs	r2, #10
   89f7e:	4620      	mov	r0, r4
   89f80:	f001 fc4a 	bl	8b818 <__multadd>
   89f84:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89f86:	4605      	mov	r5, r0
   89f88:	2b00      	cmp	r3, #0
   89f8a:	f340 8315 	ble.w	8a5b8 <_dtoa_r+0xe40>
   89f8e:	9707      	str	r7, [sp, #28]
   89f90:	930a      	str	r3, [sp, #40]	; 0x28
   89f92:	2e00      	cmp	r6, #0
   89f94:	f300 8122 	bgt.w	8a1dc <_dtoa_r+0xa64>
   89f98:	f1b9 0f00 	cmp.w	r9, #0
   89f9c:	f040 81f9 	bne.w	8a392 <_dtoa_r+0xc1a>
   89fa0:	462f      	mov	r7, r5
   89fa2:	9903      	ldr	r1, [sp, #12]
   89fa4:	9b04      	ldr	r3, [sp, #16]
   89fa6:	460e      	mov	r6, r1
   89fa8:	f003 0201 	and.w	r2, r3, #1
   89fac:	1e4b      	subs	r3, r1, #1
   89fae:	9924      	ldr	r1, [sp, #144]	; 0x90
   89fb0:	920c      	str	r2, [sp, #48]	; 0x30
   89fb2:	430a      	orrs	r2, r1
   89fb4:	920b      	str	r2, [sp, #44]	; 0x2c
   89fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   89fb8:	441a      	add	r2, r3
   89fba:	920a      	str	r2, [sp, #40]	; 0x28
   89fbc:	4641      	mov	r1, r8
   89fbe:	4650      	mov	r0, sl
   89fc0:	f7ff fb48 	bl	89654 <quorem>
   89fc4:	4629      	mov	r1, r5
   89fc6:	4683      	mov	fp, r0
   89fc8:	4650      	mov	r0, sl
   89fca:	f001 fe49 	bl	8bc60 <__mcmp>
   89fce:	463a      	mov	r2, r7
   89fd0:	4641      	mov	r1, r8
   89fd2:	4681      	mov	r9, r0
   89fd4:	4620      	mov	r0, r4
   89fd6:	f001 fe61 	bl	8bc9c <__mdiff>
   89fda:	68c2      	ldr	r2, [r0, #12]
   89fdc:	4601      	mov	r1, r0
   89fde:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   89fe2:	2a00      	cmp	r2, #0
   89fe4:	d142      	bne.n	8a06c <_dtoa_r+0x8f4>
   89fe6:	9006      	str	r0, [sp, #24]
   89fe8:	4650      	mov	r0, sl
   89fea:	9308      	str	r3, [sp, #32]
   89fec:	f001 fe38 	bl	8bc60 <__mcmp>
   89ff0:	9906      	ldr	r1, [sp, #24]
   89ff2:	9004      	str	r0, [sp, #16]
   89ff4:	4620      	mov	r0, r4
   89ff6:	f001 fc05 	bl	8b804 <_Bfree>
   89ffa:	9a04      	ldr	r2, [sp, #16]
   89ffc:	9b08      	ldr	r3, [sp, #32]
   89ffe:	b91a      	cbnz	r2, 8a008 <_dtoa_r+0x890>
   8a000:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8a002:	2900      	cmp	r1, #0
   8a004:	f000 82cb 	beq.w	8a59e <_dtoa_r+0xe26>
   8a008:	f1b9 0f00 	cmp.w	r9, #0
   8a00c:	f2c0 8185 	blt.w	8a31a <_dtoa_r+0xba2>
   8a010:	9924      	ldr	r1, [sp, #144]	; 0x90
   8a012:	ea41 0909 	orr.w	r9, r1, r9
   8a016:	990c      	ldr	r1, [sp, #48]	; 0x30
   8a018:	ea51 0109 	orrs.w	r1, r1, r9
   8a01c:	f000 817d 	beq.w	8a31a <_dtoa_r+0xba2>
   8a020:	2a00      	cmp	r2, #0
   8a022:	f300 81d1 	bgt.w	8a3c8 <_dtoa_r+0xc50>
   8a026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8a028:	f106 0901 	add.w	r9, r6, #1
   8a02c:	4296      	cmp	r6, r2
   8a02e:	46cb      	mov	fp, r9
   8a030:	7033      	strb	r3, [r6, #0]
   8a032:	f000 81e3 	beq.w	8a3fc <_dtoa_r+0xc84>
   8a036:	4651      	mov	r1, sl
   8a038:	2300      	movs	r3, #0
   8a03a:	220a      	movs	r2, #10
   8a03c:	4620      	mov	r0, r4
   8a03e:	f001 fbeb 	bl	8b818 <__multadd>
   8a042:	42bd      	cmp	r5, r7
   8a044:	4682      	mov	sl, r0
   8a046:	4629      	mov	r1, r5
   8a048:	f04f 0300 	mov.w	r3, #0
   8a04c:	f04f 020a 	mov.w	r2, #10
   8a050:	4620      	mov	r0, r4
   8a052:	d012      	beq.n	8a07a <_dtoa_r+0x902>
   8a054:	f001 fbe0 	bl	8b818 <__multadd>
   8a058:	4639      	mov	r1, r7
   8a05a:	4605      	mov	r5, r0
   8a05c:	2300      	movs	r3, #0
   8a05e:	220a      	movs	r2, #10
   8a060:	4620      	mov	r0, r4
   8a062:	f001 fbd9 	bl	8b818 <__multadd>
   8a066:	464e      	mov	r6, r9
   8a068:	4607      	mov	r7, r0
   8a06a:	e7a7      	b.n	89fbc <_dtoa_r+0x844>
   8a06c:	4620      	mov	r0, r4
   8a06e:	9304      	str	r3, [sp, #16]
   8a070:	f001 fbc8 	bl	8b804 <_Bfree>
   8a074:	2201      	movs	r2, #1
   8a076:	9b04      	ldr	r3, [sp, #16]
   8a078:	e7c6      	b.n	8a008 <_dtoa_r+0x890>
   8a07a:	f001 fbcd 	bl	8b818 <__multadd>
   8a07e:	464e      	mov	r6, r9
   8a080:	4605      	mov	r5, r0
   8a082:	4607      	mov	r7, r0
   8a084:	e79a      	b.n	89fbc <_dtoa_r+0x844>
   8a086:	bf00      	nop
   8a088:	0008d45c 	.word	0x0008d45c
   8a08c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a08e:	2b02      	cmp	r3, #2
   8a090:	dc7e      	bgt.n	8a190 <_dtoa_r+0xa18>
   8a092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a094:	2b00      	cmp	r3, #0
   8a096:	f47f af7c 	bne.w	89f92 <_dtoa_r+0x81a>
   8a09a:	4641      	mov	r1, r8
   8a09c:	4650      	mov	r0, sl
   8a09e:	f7ff fad9 	bl	89654 <quorem>
   8a0a2:	9a07      	ldr	r2, [sp, #28]
   8a0a4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8a0a8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8a0ac:	3201      	adds	r2, #1
   8a0ae:	2600      	movs	r6, #0
   8a0b0:	9207      	str	r2, [sp, #28]
   8a0b2:	f80b 3b01 	strb.w	r3, [fp], #1
   8a0b6:	e6f5      	b.n	89ea4 <_dtoa_r+0x72c>
   8a0b8:	4641      	mov	r1, r8
   8a0ba:	4650      	mov	r0, sl
   8a0bc:	f001 fdd0 	bl	8bc60 <__mcmp>
   8a0c0:	2800      	cmp	r0, #0
   8a0c2:	f6bf aec4 	bge.w	89e4e <_dtoa_r+0x6d6>
   8a0c6:	4651      	mov	r1, sl
   8a0c8:	2300      	movs	r3, #0
   8a0ca:	220a      	movs	r2, #10
   8a0cc:	4620      	mov	r0, r4
   8a0ce:	f001 fba3 	bl	8b818 <__multadd>
   8a0d2:	9b07      	ldr	r3, [sp, #28]
   8a0d4:	4682      	mov	sl, r0
   8a0d6:	1e5f      	subs	r7, r3, #1
   8a0d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8a0da:	2b00      	cmp	r3, #0
   8a0dc:	f47f af4c 	bne.w	89f78 <_dtoa_r+0x800>
   8a0e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a0e2:	2b00      	cmp	r3, #0
   8a0e4:	f340 8262 	ble.w	8a5ac <_dtoa_r+0xe34>
   8a0e8:	930a      	str	r3, [sp, #40]	; 0x28
   8a0ea:	e6bb      	b.n	89e64 <_dtoa_r+0x6ec>
   8a0ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8a0ee:	4651      	mov	r1, sl
   8a0f0:	4620      	mov	r0, r4
   8a0f2:	f001 fcf5 	bl	8bae0 <__pow5mult>
   8a0f6:	4682      	mov	sl, r0
   8a0f8:	e66c      	b.n	89dd4 <_dtoa_r+0x65c>
   8a0fa:	4bba      	ldr	r3, [pc, #744]	; (8a3e4 <_dtoa_r+0xc6c>)
   8a0fc:	9303      	str	r3, [sp, #12]
   8a0fe:	3303      	adds	r3, #3
   8a100:	e419      	b.n	89936 <_dtoa_r+0x1be>
   8a102:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a106:	2900      	cmp	r1, #0
   8a108:	f47f ae71 	bne.w	89dee <_dtoa_r+0x676>
   8a10c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a110:	2b00      	cmp	r3, #0
   8a112:	f47f ae6c 	bne.w	89dee <_dtoa_r+0x676>
   8a116:	4bb4      	ldr	r3, [pc, #720]	; (8a3e8 <_dtoa_r+0xc70>)
   8a118:	4013      	ands	r3, r2
   8a11a:	2b00      	cmp	r3, #0
   8a11c:	f000 822a 	beq.w	8a574 <_dtoa_r+0xdfc>
   8a120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8a122:	f04f 0901 	mov.w	r9, #1
   8a126:	3301      	adds	r3, #1
   8a128:	930b      	str	r3, [sp, #44]	; 0x2c
   8a12a:	9b06      	ldr	r3, [sp, #24]
   8a12c:	3301      	adds	r3, #1
   8a12e:	9306      	str	r3, [sp, #24]
   8a130:	e65f      	b.n	89df2 <_dtoa_r+0x67a>
   8a132:	2301      	movs	r3, #1
   8a134:	930c      	str	r3, [sp, #48]	; 0x30
   8a136:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a138:	9a07      	ldr	r2, [sp, #28]
   8a13a:	4413      	add	r3, r2
   8a13c:	9312      	str	r3, [sp, #72]	; 0x48
   8a13e:	3301      	adds	r3, #1
   8a140:	2b01      	cmp	r3, #1
   8a142:	461e      	mov	r6, r3
   8a144:	bfb8      	it	lt
   8a146:	2601      	movlt	r6, #1
   8a148:	930a      	str	r3, [sp, #40]	; 0x28
   8a14a:	2100      	movs	r1, #0
   8a14c:	2e17      	cmp	r6, #23
   8a14e:	6461      	str	r1, [r4, #68]	; 0x44
   8a150:	f77f ac43 	ble.w	899da <_dtoa_r+0x262>
   8a154:	2201      	movs	r2, #1
   8a156:	2304      	movs	r3, #4
   8a158:	005b      	lsls	r3, r3, #1
   8a15a:	f103 0014 	add.w	r0, r3, #20
   8a15e:	42b0      	cmp	r0, r6
   8a160:	4611      	mov	r1, r2
   8a162:	f102 0201 	add.w	r2, r2, #1
   8a166:	d9f7      	bls.n	8a158 <_dtoa_r+0x9e0>
   8a168:	6461      	str	r1, [r4, #68]	; 0x44
   8a16a:	e436      	b.n	899da <_dtoa_r+0x262>
   8a16c:	2301      	movs	r3, #1
   8a16e:	930c      	str	r3, [sp, #48]	; 0x30
   8a170:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8a172:	2b00      	cmp	r3, #0
   8a174:	dd46      	ble.n	8a204 <_dtoa_r+0xa8c>
   8a176:	461e      	mov	r6, r3
   8a178:	9312      	str	r3, [sp, #72]	; 0x48
   8a17a:	930a      	str	r3, [sp, #40]	; 0x28
   8a17c:	e7e5      	b.n	8a14a <_dtoa_r+0x9d2>
   8a17e:	2300      	movs	r3, #0
   8a180:	930c      	str	r3, [sp, #48]	; 0x30
   8a182:	e7d8      	b.n	8a136 <_dtoa_r+0x9be>
   8a184:	2300      	movs	r3, #0
   8a186:	930c      	str	r3, [sp, #48]	; 0x30
   8a188:	e7f2      	b.n	8a170 <_dtoa_r+0x9f8>
   8a18a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a18c:	9707      	str	r7, [sp, #28]
   8a18e:	930a      	str	r3, [sp, #40]	; 0x28
   8a190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a192:	2b00      	cmp	r3, #0
   8a194:	f47f ad40 	bne.w	89c18 <_dtoa_r+0x4a0>
   8a198:	4641      	mov	r1, r8
   8a19a:	2205      	movs	r2, #5
   8a19c:	4620      	mov	r0, r4
   8a19e:	f001 fb3b 	bl	8b818 <__multadd>
   8a1a2:	4680      	mov	r8, r0
   8a1a4:	4650      	mov	r0, sl
   8a1a6:	4641      	mov	r1, r8
   8a1a8:	f001 fd5a 	bl	8bc60 <__mcmp>
   8a1ac:	2800      	cmp	r0, #0
   8a1ae:	f77f ad33 	ble.w	89c18 <_dtoa_r+0x4a0>
   8a1b2:	9f03      	ldr	r7, [sp, #12]
   8a1b4:	2231      	movs	r2, #49	; 0x31
   8a1b6:	463b      	mov	r3, r7
   8a1b8:	9e07      	ldr	r6, [sp, #28]
   8a1ba:	f803 2b01 	strb.w	r2, [r3], #1
   8a1be:	3601      	adds	r6, #1
   8a1c0:	9303      	str	r3, [sp, #12]
   8a1c2:	4641      	mov	r1, r8
   8a1c4:	4620      	mov	r0, r4
   8a1c6:	f001 fb1d 	bl	8b804 <_Bfree>
   8a1ca:	1c73      	adds	r3, r6, #1
   8a1cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
   8a1d0:	9307      	str	r3, [sp, #28]
   8a1d2:	9703      	str	r7, [sp, #12]
   8a1d4:	2d00      	cmp	r5, #0
   8a1d6:	f47f ae90 	bne.w	89efa <_dtoa_r+0x782>
   8a1da:	e692      	b.n	89f02 <_dtoa_r+0x78a>
   8a1dc:	4629      	mov	r1, r5
   8a1de:	4632      	mov	r2, r6
   8a1e0:	4620      	mov	r0, r4
   8a1e2:	f001 fcc9 	bl	8bb78 <__lshift>
   8a1e6:	4605      	mov	r5, r0
   8a1e8:	e6d6      	b.n	89f98 <_dtoa_r+0x820>
   8a1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a1ec:	970d      	str	r7, [sp, #52]	; 0x34
   8a1ee:	1afb      	subs	r3, r7, r3
   8a1f0:	449b      	add	fp, r3
   8a1f2:	2700      	movs	r7, #0
   8a1f4:	e58c      	b.n	89d10 <_dtoa_r+0x598>
   8a1f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8a1fa:	f04f 0902 	mov.w	r9, #2
   8a1fe:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8a202:	e417      	b.n	89a34 <_dtoa_r+0x2bc>
   8a204:	2301      	movs	r3, #1
   8a206:	9325      	str	r3, [sp, #148]	; 0x94
   8a208:	930a      	str	r3, [sp, #40]	; 0x28
   8a20a:	f7ff bbe2 	b.w	899d2 <_dtoa_r+0x25a>
   8a20e:	d103      	bne.n	8a218 <_dtoa_r+0xaa0>
   8a210:	9b04      	ldr	r3, [sp, #16]
   8a212:	07db      	lsls	r3, r3, #31
   8a214:	f53f ae53 	bmi.w	89ebe <_dtoa_r+0x746>
   8a218:	46d9      	mov	r9, fp
   8a21a:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8a21e:	2b30      	cmp	r3, #48	; 0x30
   8a220:	d0fa      	beq.n	8a218 <_dtoa_r+0xaa0>
   8a222:	e65e      	b.n	89ee2 <_dtoa_r+0x76a>
   8a224:	4648      	mov	r0, r9
   8a226:	f002 fd55 	bl	8ccd4 <__aeabi_i2d>
   8a22a:	4632      	mov	r2, r6
   8a22c:	463b      	mov	r3, r7
   8a22e:	f002 fdbb 	bl	8cda8 <__aeabi_dmul>
   8a232:	2200      	movs	r2, #0
   8a234:	4b6d      	ldr	r3, [pc, #436]	; (8a3ec <_dtoa_r+0xc74>)
   8a236:	f002 fc01 	bl	8ca3c <__adddf3>
   8a23a:	4680      	mov	r8, r0
   8a23c:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a240:	4630      	mov	r0, r6
   8a242:	4639      	mov	r1, r7
   8a244:	2200      	movs	r2, #0
   8a246:	4b6a      	ldr	r3, [pc, #424]	; (8a3f0 <_dtoa_r+0xc78>)
   8a248:	f002 fbf6 	bl	8ca38 <__aeabi_dsub>
   8a24c:	4642      	mov	r2, r8
   8a24e:	464b      	mov	r3, r9
   8a250:	4606      	mov	r6, r0
   8a252:	460f      	mov	r7, r1
   8a254:	f003 f838 	bl	8d2c8 <__aeabi_dcmpgt>
   8a258:	2800      	cmp	r0, #0
   8a25a:	f040 8187 	bne.w	8a56c <_dtoa_r+0xdf4>
   8a25e:	4642      	mov	r2, r8
   8a260:	4630      	mov	r0, r6
   8a262:	4639      	mov	r1, r7
   8a264:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   8a268:	f003 f810 	bl	8d28c <__aeabi_dcmplt>
   8a26c:	2800      	cmp	r0, #0
   8a26e:	f43f acaa 	beq.w	89bc6 <_dtoa_r+0x44e>
   8a272:	f04f 0800 	mov.w	r8, #0
   8a276:	4645      	mov	r5, r8
   8a278:	e4ce      	b.n	89c18 <_dtoa_r+0x4a0>
   8a27a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8a27c:	2a00      	cmp	r2, #0
   8a27e:	f000 80c3 	beq.w	8a408 <_dtoa_r+0xc90>
   8a282:	9a06      	ldr	r2, [sp, #24]
   8a284:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8a288:	441a      	add	r2, r3
   8a28a:	9206      	str	r2, [sp, #24]
   8a28c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8a28e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a290:	4616      	mov	r6, r2
   8a292:	441a      	add	r2, r3
   8a294:	920b      	str	r2, [sp, #44]	; 0x2c
   8a296:	e547      	b.n	89d28 <_dtoa_r+0x5b0>
   8a298:	2331      	movs	r3, #49	; 0x31
   8a29a:	9a07      	ldr	r2, [sp, #28]
   8a29c:	3201      	adds	r2, #1
   8a29e:	9207      	str	r2, [sp, #28]
   8a2a0:	9a03      	ldr	r2, [sp, #12]
   8a2a2:	7013      	strb	r3, [r2, #0]
   8a2a4:	e61d      	b.n	89ee2 <_dtoa_r+0x76a>
   8a2a6:	f000 814b 	beq.w	8a540 <_dtoa_r+0xdc8>
   8a2aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8a2ae:	9b07      	ldr	r3, [sp, #28]
   8a2b0:	425d      	negs	r5, r3
   8a2b2:	4b50      	ldr	r3, [pc, #320]	; (8a3f4 <_dtoa_r+0xc7c>)
   8a2b4:	f005 020f 	and.w	r2, r5, #15
   8a2b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a2c0:	f002 fd72 	bl	8cda8 <__aeabi_dmul>
   8a2c4:	112d      	asrs	r5, r5, #4
   8a2c6:	4606      	mov	r6, r0
   8a2c8:	460f      	mov	r7, r1
   8a2ca:	f000 817d 	beq.w	8a5c8 <_dtoa_r+0xe50>
   8a2ce:	2300      	movs	r3, #0
   8a2d0:	f04f 0902 	mov.w	r9, #2
   8a2d4:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8a3f8 <_dtoa_r+0xc80>
   8a2d8:	07ea      	lsls	r2, r5, #31
   8a2da:	d505      	bpl.n	8a2e8 <_dtoa_r+0xb70>
   8a2dc:	e9d8 2300 	ldrd	r2, r3, [r8]
   8a2e0:	f002 fd62 	bl	8cda8 <__aeabi_dmul>
   8a2e4:	2301      	movs	r3, #1
   8a2e6:	4499      	add	r9, r3
   8a2e8:	106d      	asrs	r5, r5, #1
   8a2ea:	f108 0808 	add.w	r8, r8, #8
   8a2ee:	d1f3      	bne.n	8a2d8 <_dtoa_r+0xb60>
   8a2f0:	2b00      	cmp	r3, #0
   8a2f2:	f43f abba 	beq.w	89a6a <_dtoa_r+0x2f2>
   8a2f6:	4606      	mov	r6, r0
   8a2f8:	460f      	mov	r7, r1
   8a2fa:	f7ff bbb6 	b.w	89a6a <_dtoa_r+0x2f2>
   8a2fe:	900e      	str	r0, [sp, #56]	; 0x38
   8a300:	e520      	b.n	89d44 <_dtoa_r+0x5cc>
   8a302:	9b04      	ldr	r3, [sp, #16]
   8a304:	2b00      	cmp	r3, #0
   8a306:	f47f ae2b 	bne.w	89f60 <_dtoa_r+0x7e8>
   8a30a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a30e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a312:	2b00      	cmp	r3, #0
   8a314:	f43f aeff 	beq.w	8a116 <_dtoa_r+0x99e>
   8a318:	e622      	b.n	89f60 <_dtoa_r+0x7e8>
   8a31a:	2a00      	cmp	r2, #0
   8a31c:	dd12      	ble.n	8a344 <_dtoa_r+0xbcc>
   8a31e:	4651      	mov	r1, sl
   8a320:	2201      	movs	r2, #1
   8a322:	4620      	mov	r0, r4
   8a324:	9304      	str	r3, [sp, #16]
   8a326:	f001 fc27 	bl	8bb78 <__lshift>
   8a32a:	4641      	mov	r1, r8
   8a32c:	4682      	mov	sl, r0
   8a32e:	f001 fc97 	bl	8bc60 <__mcmp>
   8a332:	2800      	cmp	r0, #0
   8a334:	9b04      	ldr	r3, [sp, #16]
   8a336:	f340 812c 	ble.w	8a592 <_dtoa_r+0xe1a>
   8a33a:	2b39      	cmp	r3, #57	; 0x39
   8a33c:	f000 810c 	beq.w	8a558 <_dtoa_r+0xde0>
   8a340:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8a344:	46b1      	mov	r9, r6
   8a346:	f809 3b01 	strb.w	r3, [r9], #1
   8a34a:	9b07      	ldr	r3, [sp, #28]
   8a34c:	462e      	mov	r6, r5
   8a34e:	3301      	adds	r3, #1
   8a350:	463d      	mov	r5, r7
   8a352:	9307      	str	r3, [sp, #28]
   8a354:	e5c5      	b.n	89ee2 <_dtoa_r+0x76a>
   8a356:	4655      	mov	r5, sl
   8a358:	9c08      	ldr	r4, [sp, #32]
   8a35a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8a35e:	4602      	mov	r2, r0
   8a360:	460b      	mov	r3, r1
   8a362:	f002 fb6b 	bl	8ca3c <__adddf3>
   8a366:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a36a:	4606      	mov	r6, r0
   8a36c:	460f      	mov	r7, r1
   8a36e:	f002 ffab 	bl	8d2c8 <__aeabi_dcmpgt>
   8a372:	b960      	cbnz	r0, 8a38e <_dtoa_r+0xc16>
   8a374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8a378:	4630      	mov	r0, r6
   8a37a:	4639      	mov	r1, r7
   8a37c:	f002 ff7c 	bl	8d278 <__aeabi_dcmpeq>
   8a380:	2800      	cmp	r0, #0
   8a382:	f43f aca3 	beq.w	89ccc <_dtoa_r+0x554>
   8a386:	f018 0f01 	tst.w	r8, #1
   8a38a:	f43f ac9f 	beq.w	89ccc <_dtoa_r+0x554>
   8a38e:	9a03      	ldr	r2, [sp, #12]
   8a390:	e40a      	b.n	89ba8 <_dtoa_r+0x430>
   8a392:	4620      	mov	r0, r4
   8a394:	6869      	ldr	r1, [r5, #4]
   8a396:	f001 fa0f 	bl	8b7b8 <_Balloc>
   8a39a:	4606      	mov	r6, r0
   8a39c:	2800      	cmp	r0, #0
   8a39e:	f000 8117 	beq.w	8a5d0 <_dtoa_r+0xe58>
   8a3a2:	692b      	ldr	r3, [r5, #16]
   8a3a4:	f105 010c 	add.w	r1, r5, #12
   8a3a8:	3302      	adds	r3, #2
   8a3aa:	009a      	lsls	r2, r3, #2
   8a3ac:	300c      	adds	r0, #12
   8a3ae:	f7fc fb33 	bl	86a18 <memcpy>
   8a3b2:	4631      	mov	r1, r6
   8a3b4:	2201      	movs	r2, #1
   8a3b6:	4620      	mov	r0, r4
   8a3b8:	f001 fbde 	bl	8bb78 <__lshift>
   8a3bc:	4607      	mov	r7, r0
   8a3be:	e5f0      	b.n	89fa2 <_dtoa_r+0x82a>
   8a3c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8a3c4:	1a9e      	subs	r6, r3, r2
   8a3c6:	e4af      	b.n	89d28 <_dtoa_r+0x5b0>
   8a3c8:	2b39      	cmp	r3, #57	; 0x39
   8a3ca:	f000 80c5 	beq.w	8a558 <_dtoa_r+0xde0>
   8a3ce:	46b1      	mov	r9, r6
   8a3d0:	3301      	adds	r3, #1
   8a3d2:	f809 3b01 	strb.w	r3, [r9], #1
   8a3d6:	9b07      	ldr	r3, [sp, #28]
   8a3d8:	462e      	mov	r6, r5
   8a3da:	3301      	adds	r3, #1
   8a3dc:	463d      	mov	r5, r7
   8a3de:	9307      	str	r3, [sp, #28]
   8a3e0:	e57f      	b.n	89ee2 <_dtoa_r+0x76a>
   8a3e2:	bf00      	nop
   8a3e4:	0008d4a0 	.word	0x0008d4a0
   8a3e8:	7ff00000 	.word	0x7ff00000
   8a3ec:	401c0000 	.word	0x401c0000
   8a3f0:	40140000 	.word	0x40140000
   8a3f4:	0008d5f8 	.word	0x0008d5f8
   8a3f8:	0008d5d0 	.word	0x0008d5d0
   8a3fc:	9a07      	ldr	r2, [sp, #28]
   8a3fe:	462e      	mov	r6, r5
   8a400:	3201      	adds	r2, #1
   8a402:	463d      	mov	r5, r7
   8a404:	9207      	str	r2, [sp, #28]
   8a406:	e54d      	b.n	89ea4 <_dtoa_r+0x72c>
   8a408:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8a40a:	9a06      	ldr	r2, [sp, #24]
   8a40c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8a40e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8a412:	441a      	add	r2, r3
   8a414:	9206      	str	r2, [sp, #24]
   8a416:	460a      	mov	r2, r1
   8a418:	441a      	add	r2, r3
   8a41a:	460e      	mov	r6, r1
   8a41c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   8a41e:	920b      	str	r2, [sp, #44]	; 0x2c
   8a420:	e482      	b.n	89d28 <_dtoa_r+0x5b0>
   8a422:	9810      	ldr	r0, [sp, #64]	; 0x40
   8a424:	497f      	ldr	r1, [pc, #508]	; (8a624 <_dtoa_r+0xeac>)
   8a426:	4642      	mov	r2, r8
   8a428:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8a42c:	464b      	mov	r3, r9
   8a42e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8a432:	f002 fcb9 	bl	8cda8 <__aeabi_dmul>
   8a436:	4602      	mov	r2, r0
   8a438:	460b      	mov	r3, r1
   8a43a:	4630      	mov	r0, r6
   8a43c:	4639      	mov	r1, r7
   8a43e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   8a442:	f002 ff61 	bl	8d308 <__aeabi_d2iz>
   8a446:	4680      	mov	r8, r0
   8a448:	f002 fc44 	bl	8ccd4 <__aeabi_i2d>
   8a44c:	460b      	mov	r3, r1
   8a44e:	4602      	mov	r2, r0
   8a450:	4639      	mov	r1, r7
   8a452:	4630      	mov	r0, r6
   8a454:	f002 faf0 	bl	8ca38 <__aeabi_dsub>
   8a458:	4606      	mov	r6, r0
   8a45a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8a45c:	9d03      	ldr	r5, [sp, #12]
   8a45e:	f108 0330 	add.w	r3, r8, #48	; 0x30
   8a462:	2801      	cmp	r0, #1
   8a464:	460f      	mov	r7, r1
   8a466:	f805 3b01 	strb.w	r3, [r5], #1
   8a46a:	d01e      	beq.n	8a4aa <_dtoa_r+0xd32>
   8a46c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8a46e:	9a03      	ldr	r2, [sp, #12]
   8a470:	4413      	add	r3, r2
   8a472:	4698      	mov	r8, r3
   8a474:	2200      	movs	r2, #0
   8a476:	4b6c      	ldr	r3, [pc, #432]	; (8a628 <_dtoa_r+0xeb0>)
   8a478:	4630      	mov	r0, r6
   8a47a:	4639      	mov	r1, r7
   8a47c:	f002 fc94 	bl	8cda8 <__aeabi_dmul>
   8a480:	460f      	mov	r7, r1
   8a482:	4606      	mov	r6, r0
   8a484:	f002 ff40 	bl	8d308 <__aeabi_d2iz>
   8a488:	4681      	mov	r9, r0
   8a48a:	f002 fc23 	bl	8ccd4 <__aeabi_i2d>
   8a48e:	4602      	mov	r2, r0
   8a490:	460b      	mov	r3, r1
   8a492:	4630      	mov	r0, r6
   8a494:	4639      	mov	r1, r7
   8a496:	f002 facf 	bl	8ca38 <__aeabi_dsub>
   8a49a:	f109 0930 	add.w	r9, r9, #48	; 0x30
   8a49e:	f805 9b01 	strb.w	r9, [r5], #1
   8a4a2:	4545      	cmp	r5, r8
   8a4a4:	4606      	mov	r6, r0
   8a4a6:	460f      	mov	r7, r1
   8a4a8:	d1e4      	bne.n	8a474 <_dtoa_r+0xcfc>
   8a4aa:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   8a4ae:	2200      	movs	r2, #0
   8a4b0:	4b5e      	ldr	r3, [pc, #376]	; (8a62c <_dtoa_r+0xeb4>)
   8a4b2:	4640      	mov	r0, r8
   8a4b4:	4649      	mov	r1, r9
   8a4b6:	f002 fac1 	bl	8ca3c <__adddf3>
   8a4ba:	4632      	mov	r2, r6
   8a4bc:	463b      	mov	r3, r7
   8a4be:	f002 fee5 	bl	8d28c <__aeabi_dcmplt>
   8a4c2:	2800      	cmp	r0, #0
   8a4c4:	d158      	bne.n	8a578 <_dtoa_r+0xe00>
   8a4c6:	4642      	mov	r2, r8
   8a4c8:	464b      	mov	r3, r9
   8a4ca:	2000      	movs	r0, #0
   8a4cc:	4957      	ldr	r1, [pc, #348]	; (8a62c <_dtoa_r+0xeb4>)
   8a4ce:	f002 fab3 	bl	8ca38 <__aeabi_dsub>
   8a4d2:	4632      	mov	r2, r6
   8a4d4:	463b      	mov	r3, r7
   8a4d6:	f002 fef7 	bl	8d2c8 <__aeabi_dcmpgt>
   8a4da:	2800      	cmp	r0, #0
   8a4dc:	f43f ab73 	beq.w	89bc6 <_dtoa_r+0x44e>
   8a4e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8a4e4:	46a9      	mov	r9, r5
   8a4e6:	2b30      	cmp	r3, #48	; 0x30
   8a4e8:	f105 35ff 	add.w	r5, r5, #4294967295
   8a4ec:	d0f8      	beq.n	8a4e0 <_dtoa_r+0xd68>
   8a4ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a4f0:	3301      	adds	r3, #1
   8a4f2:	9307      	str	r3, [sp, #28]
   8a4f4:	e505      	b.n	89f02 <_dtoa_r+0x78a>
   8a4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a4f8:	2b00      	cmp	r3, #0
   8a4fa:	f43f ae93 	beq.w	8a224 <_dtoa_r+0xaac>
   8a4fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
   8a500:	2d00      	cmp	r5, #0
   8a502:	f77f ab60 	ble.w	89bc6 <_dtoa_r+0x44e>
   8a506:	2200      	movs	r2, #0
   8a508:	4b47      	ldr	r3, [pc, #284]	; (8a628 <_dtoa_r+0xeb0>)
   8a50a:	4630      	mov	r0, r6
   8a50c:	4639      	mov	r1, r7
   8a50e:	f002 fc4b 	bl	8cda8 <__aeabi_dmul>
   8a512:	4606      	mov	r6, r0
   8a514:	460f      	mov	r7, r1
   8a516:	f109 0001 	add.w	r0, r9, #1
   8a51a:	f002 fbdb 	bl	8ccd4 <__aeabi_i2d>
   8a51e:	4632      	mov	r2, r6
   8a520:	463b      	mov	r3, r7
   8a522:	f002 fc41 	bl	8cda8 <__aeabi_dmul>
   8a526:	2200      	movs	r2, #0
   8a528:	4b41      	ldr	r3, [pc, #260]	; (8a630 <_dtoa_r+0xeb8>)
   8a52a:	f002 fa87 	bl	8ca3c <__adddf3>
   8a52e:	9a07      	ldr	r2, [sp, #28]
   8a530:	4680      	mov	r8, r0
   8a532:	3a01      	subs	r2, #1
   8a534:	9213      	str	r2, [sp, #76]	; 0x4c
   8a536:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   8a53a:	9510      	str	r5, [sp, #64]	; 0x40
   8a53c:	f7ff bab6 	b.w	89aac <_dtoa_r+0x334>
   8a540:	f04f 0902 	mov.w	r9, #2
   8a544:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   8a548:	f7ff ba8f 	b.w	89a6a <_dtoa_r+0x2f2>
   8a54c:	9b07      	ldr	r3, [sp, #28]
   8a54e:	3301      	adds	r3, #1
   8a550:	9307      	str	r3, [sp, #28]
   8a552:	2331      	movs	r3, #49	; 0x31
   8a554:	f7ff bb2f 	b.w	89bb6 <_dtoa_r+0x43e>
   8a558:	46b3      	mov	fp, r6
   8a55a:	2339      	movs	r3, #57	; 0x39
   8a55c:	9a07      	ldr	r2, [sp, #28]
   8a55e:	462e      	mov	r6, r5
   8a560:	3201      	adds	r2, #1
   8a562:	463d      	mov	r5, r7
   8a564:	9207      	str	r2, [sp, #28]
   8a566:	f80b 3b01 	strb.w	r3, [fp], #1
   8a56a:	e4aa      	b.n	89ec2 <_dtoa_r+0x74a>
   8a56c:	f04f 0800 	mov.w	r8, #0
   8a570:	4645      	mov	r5, r8
   8a572:	e61e      	b.n	8a1b2 <_dtoa_r+0xa3a>
   8a574:	4699      	mov	r9, r3
   8a576:	e43c      	b.n	89df2 <_dtoa_r+0x67a>
   8a578:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a57a:	9a03      	ldr	r2, [sp, #12]
   8a57c:	9307      	str	r3, [sp, #28]
   8a57e:	f7ff bb13 	b.w	89ba8 <_dtoa_r+0x430>
   8a582:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   8a586:	9c10      	ldr	r4, [sp, #64]	; 0x40
   8a588:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8a58a:	46a9      	mov	r9, r5
   8a58c:	3301      	adds	r3, #1
   8a58e:	9307      	str	r3, [sp, #28]
   8a590:	e4b7      	b.n	89f02 <_dtoa_r+0x78a>
   8a592:	f47f aed7 	bne.w	8a344 <_dtoa_r+0xbcc>
   8a596:	07da      	lsls	r2, r3, #31
   8a598:	f57f aed4 	bpl.w	8a344 <_dtoa_r+0xbcc>
   8a59c:	e6cd      	b.n	8a33a <_dtoa_r+0xbc2>
   8a59e:	2b39      	cmp	r3, #57	; 0x39
   8a5a0:	d0da      	beq.n	8a558 <_dtoa_r+0xde0>
   8a5a2:	f1b9 0f00 	cmp.w	r9, #0
   8a5a6:	f73f aecb 	bgt.w	8a340 <_dtoa_r+0xbc8>
   8a5aa:	e6cb      	b.n	8a344 <_dtoa_r+0xbcc>
   8a5ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a5ae:	2b02      	cmp	r3, #2
   8a5b0:	f73f adeb 	bgt.w	8a18a <_dtoa_r+0xa12>
   8a5b4:	9707      	str	r7, [sp, #28]
   8a5b6:	e570      	b.n	8a09a <_dtoa_r+0x922>
   8a5b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8a5ba:	2b02      	cmp	r3, #2
   8a5bc:	f73f ade5 	bgt.w	8a18a <_dtoa_r+0xa12>
   8a5c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a5c2:	9707      	str	r7, [sp, #28]
   8a5c4:	930a      	str	r3, [sp, #40]	; 0x28
   8a5c6:	e4e4      	b.n	89f92 <_dtoa_r+0x81a>
   8a5c8:	f04f 0902 	mov.w	r9, #2
   8a5cc:	f7ff ba4d 	b.w	89a6a <_dtoa_r+0x2f2>
   8a5d0:	4602      	mov	r2, r0
   8a5d2:	f240 21ea 	movw	r1, #746	; 0x2ea
   8a5d6:	4b17      	ldr	r3, [pc, #92]	; (8a634 <_dtoa_r+0xebc>)
   8a5d8:	4817      	ldr	r0, [pc, #92]	; (8a638 <_dtoa_r+0xec0>)
   8a5da:	f002 f8a7 	bl	8c72c <__assert_func>
   8a5de:	4b17      	ldr	r3, [pc, #92]	; (8a63c <_dtoa_r+0xec4>)
   8a5e0:	9303      	str	r3, [sp, #12]
   8a5e2:	f7ff b904 	b.w	897ee <_dtoa_r+0x76>
   8a5e6:	2500      	movs	r5, #0
   8a5e8:	4620      	mov	r0, r4
   8a5ea:	4629      	mov	r1, r5
   8a5ec:	6465      	str	r5, [r4, #68]	; 0x44
   8a5ee:	f001 f8e3 	bl	8b7b8 <_Balloc>
   8a5f2:	9003      	str	r0, [sp, #12]
   8a5f4:	b958      	cbnz	r0, 8a60e <_dtoa_r+0xe96>
   8a5f6:	2200      	movs	r2, #0
   8a5f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8a5fc:	4b0d      	ldr	r3, [pc, #52]	; (8a634 <_dtoa_r+0xebc>)
   8a5fe:	480e      	ldr	r0, [pc, #56]	; (8a638 <_dtoa_r+0xec0>)
   8a600:	f002 f894 	bl	8c72c <__assert_func>
   8a604:	f43f ac0d 	beq.w	89e22 <_dtoa_r+0x6aa>
   8a608:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8a60c:	e48f      	b.n	89f2e <_dtoa_r+0x7b6>
   8a60e:	f04f 33ff 	mov.w	r3, #4294967295
   8a612:	9312      	str	r3, [sp, #72]	; 0x48
   8a614:	930a      	str	r3, [sp, #40]	; 0x28
   8a616:	2301      	movs	r3, #1
   8a618:	9a03      	ldr	r2, [sp, #12]
   8a61a:	9525      	str	r5, [sp, #148]	; 0x94
   8a61c:	6422      	str	r2, [r4, #64]	; 0x40
   8a61e:	930c      	str	r3, [sp, #48]	; 0x30
   8a620:	f7ff bad1 	b.w	89bc6 <_dtoa_r+0x44e>
   8a624:	0008d5f8 	.word	0x0008d5f8
   8a628:	40240000 	.word	0x40240000
   8a62c:	3fe00000 	.word	0x3fe00000
   8a630:	401c0000 	.word	0x401c0000
   8a634:	0008d4b0 	.word	0x0008d4b0
   8a638:	0008d4c4 	.word	0x0008d4c4
   8a63c:	0008d4a4 	.word	0x0008d4a4

0008a640 <__sflush_r>:
   8a640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8a644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a648:	460d      	mov	r5, r1
   8a64a:	0711      	lsls	r1, r2, #28
   8a64c:	4680      	mov	r8, r0
   8a64e:	d447      	bmi.n	8a6e0 <__sflush_r+0xa0>
   8a650:	686b      	ldr	r3, [r5, #4]
   8a652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8a656:	2b00      	cmp	r3, #0
   8a658:	81aa      	strh	r2, [r5, #12]
   8a65a:	dd5e      	ble.n	8a71a <__sflush_r+0xda>
   8a65c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a65e:	2c00      	cmp	r4, #0
   8a660:	d058      	beq.n	8a714 <__sflush_r+0xd4>
   8a662:	2300      	movs	r3, #0
   8a664:	f8d8 6000 	ldr.w	r6, [r8]
   8a668:	f8c8 3000 	str.w	r3, [r8]
   8a66c:	b293      	uxth	r3, r2
   8a66e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8a672:	d156      	bne.n	8a722 <__sflush_r+0xe2>
   8a674:	2301      	movs	r3, #1
   8a676:	4640      	mov	r0, r8
   8a678:	69e9      	ldr	r1, [r5, #28]
   8a67a:	47a0      	blx	r4
   8a67c:	1c43      	adds	r3, r0, #1
   8a67e:	d067      	beq.n	8a750 <__sflush_r+0x110>
   8a680:	89ab      	ldrh	r3, [r5, #12]
   8a682:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8a684:	075f      	lsls	r7, r3, #29
   8a686:	d505      	bpl.n	8a694 <__sflush_r+0x54>
   8a688:	686a      	ldr	r2, [r5, #4]
   8a68a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8a68c:	1a80      	subs	r0, r0, r2
   8a68e:	b10b      	cbz	r3, 8a694 <__sflush_r+0x54>
   8a690:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a692:	1ac0      	subs	r0, r0, r3
   8a694:	4602      	mov	r2, r0
   8a696:	69e9      	ldr	r1, [r5, #28]
   8a698:	2300      	movs	r3, #0
   8a69a:	4640      	mov	r0, r8
   8a69c:	47a0      	blx	r4
   8a69e:	1c41      	adds	r1, r0, #1
   8a6a0:	d141      	bne.n	8a726 <__sflush_r+0xe6>
   8a6a2:	f8d8 3000 	ldr.w	r3, [r8]
   8a6a6:	2b00      	cmp	r3, #0
   8a6a8:	d03d      	beq.n	8a726 <__sflush_r+0xe6>
   8a6aa:	2b1d      	cmp	r3, #29
   8a6ac:	d001      	beq.n	8a6b2 <__sflush_r+0x72>
   8a6ae:	2b16      	cmp	r3, #22
   8a6b0:	d156      	bne.n	8a760 <__sflush_r+0x120>
   8a6b2:	2100      	movs	r1, #0
   8a6b4:	692a      	ldr	r2, [r5, #16]
   8a6b6:	89ab      	ldrh	r3, [r5, #12]
   8a6b8:	e9c5 2100 	strd	r2, r1, [r5]
   8a6bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a6c0:	81ab      	strh	r3, [r5, #12]
   8a6c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8a6c4:	f8c8 6000 	str.w	r6, [r8]
   8a6c8:	b321      	cbz	r1, 8a714 <__sflush_r+0xd4>
   8a6ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8a6ce:	4299      	cmp	r1, r3
   8a6d0:	d002      	beq.n	8a6d8 <__sflush_r+0x98>
   8a6d2:	4640      	mov	r0, r8
   8a6d4:	f000 f9cc 	bl	8aa70 <_free_r>
   8a6d8:	2000      	movs	r0, #0
   8a6da:	6328      	str	r0, [r5, #48]	; 0x30
   8a6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a6e0:	692f      	ldr	r7, [r5, #16]
   8a6e2:	b1bf      	cbz	r7, 8a714 <__sflush_r+0xd4>
   8a6e4:	b293      	uxth	r3, r2
   8a6e6:	079a      	lsls	r2, r3, #30
   8a6e8:	bf18      	it	ne
   8a6ea:	2300      	movne	r3, #0
   8a6ec:	682e      	ldr	r6, [r5, #0]
   8a6ee:	bf08      	it	eq
   8a6f0:	696b      	ldreq	r3, [r5, #20]
   8a6f2:	602f      	str	r7, [r5, #0]
   8a6f4:	1bf6      	subs	r6, r6, r7
   8a6f6:	60ab      	str	r3, [r5, #8]
   8a6f8:	e00a      	b.n	8a710 <__sflush_r+0xd0>
   8a6fa:	4633      	mov	r3, r6
   8a6fc:	463a      	mov	r2, r7
   8a6fe:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   8a700:	4640      	mov	r0, r8
   8a702:	69e9      	ldr	r1, [r5, #28]
   8a704:	47a0      	blx	r4
   8a706:	1e04      	subs	r4, r0, #0
   8a708:	eba6 0604 	sub.w	r6, r6, r4
   8a70c:	4427      	add	r7, r4
   8a70e:	dd17      	ble.n	8a740 <__sflush_r+0x100>
   8a710:	2e00      	cmp	r6, #0
   8a712:	dcf2      	bgt.n	8a6fa <__sflush_r+0xba>
   8a714:	2000      	movs	r0, #0
   8a716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a71a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8a71c:	2b00      	cmp	r3, #0
   8a71e:	dc9d      	bgt.n	8a65c <__sflush_r+0x1c>
   8a720:	e7f8      	b.n	8a714 <__sflush_r+0xd4>
   8a722:	6d28      	ldr	r0, [r5, #80]	; 0x50
   8a724:	e7ae      	b.n	8a684 <__sflush_r+0x44>
   8a726:	2100      	movs	r1, #0
   8a728:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8a72c:	692a      	ldr	r2, [r5, #16]
   8a72e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a732:	81ab      	strh	r3, [r5, #12]
   8a734:	04db      	lsls	r3, r3, #19
   8a736:	e9c5 2100 	strd	r2, r1, [r5]
   8a73a:	d5c2      	bpl.n	8a6c2 <__sflush_r+0x82>
   8a73c:	6528      	str	r0, [r5, #80]	; 0x50
   8a73e:	e7c0      	b.n	8a6c2 <__sflush_r+0x82>
   8a740:	89ab      	ldrh	r3, [r5, #12]
   8a742:	f04f 30ff 	mov.w	r0, #4294967295
   8a746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a74a:	81ab      	strh	r3, [r5, #12]
   8a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a750:	f8d8 3000 	ldr.w	r3, [r8]
   8a754:	2b00      	cmp	r3, #0
   8a756:	d093      	beq.n	8a680 <__sflush_r+0x40>
   8a758:	2b1d      	cmp	r3, #29
   8a75a:	d006      	beq.n	8a76a <__sflush_r+0x12a>
   8a75c:	2b16      	cmp	r3, #22
   8a75e:	d004      	beq.n	8a76a <__sflush_r+0x12a>
   8a760:	89ab      	ldrh	r3, [r5, #12]
   8a762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a766:	81ab      	strh	r3, [r5, #12]
   8a768:	e7d5      	b.n	8a716 <__sflush_r+0xd6>
   8a76a:	f8c8 6000 	str.w	r6, [r8]
   8a76e:	e7d1      	b.n	8a714 <__sflush_r+0xd4>

0008a770 <_fflush_r>:
   8a770:	b538      	push	{r3, r4, r5, lr}
   8a772:	460c      	mov	r4, r1
   8a774:	4605      	mov	r5, r0
   8a776:	b108      	cbz	r0, 8a77c <_fflush_r+0xc>
   8a778:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a77a:	b1a3      	cbz	r3, 8a7a6 <_fflush_r+0x36>
   8a77c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a780:	b1b8      	cbz	r0, 8a7b2 <_fflush_r+0x42>
   8a782:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a784:	07db      	lsls	r3, r3, #31
   8a786:	d401      	bmi.n	8a78c <_fflush_r+0x1c>
   8a788:	0581      	lsls	r1, r0, #22
   8a78a:	d515      	bpl.n	8a7b8 <_fflush_r+0x48>
   8a78c:	4628      	mov	r0, r5
   8a78e:	4621      	mov	r1, r4
   8a790:	f7ff ff56 	bl	8a640 <__sflush_r>
   8a794:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a796:	4605      	mov	r5, r0
   8a798:	07da      	lsls	r2, r3, #31
   8a79a:	d402      	bmi.n	8a7a2 <_fflush_r+0x32>
   8a79c:	89a3      	ldrh	r3, [r4, #12]
   8a79e:	059b      	lsls	r3, r3, #22
   8a7a0:	d50e      	bpl.n	8a7c0 <_fflush_r+0x50>
   8a7a2:	4628      	mov	r0, r5
   8a7a4:	bd38      	pop	{r3, r4, r5, pc}
   8a7a6:	f000 f83f 	bl	8a828 <__sinit>
   8a7aa:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a7ae:	2800      	cmp	r0, #0
   8a7b0:	d1e7      	bne.n	8a782 <_fflush_r+0x12>
   8a7b2:	4605      	mov	r5, r0
   8a7b4:	4628      	mov	r0, r5
   8a7b6:	bd38      	pop	{r3, r4, r5, pc}
   8a7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a7ba:	f000 fc07 	bl	8afcc <__retarget_lock_acquire_recursive>
   8a7be:	e7e5      	b.n	8a78c <_fflush_r+0x1c>
   8a7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a7c2:	f000 fc05 	bl	8afd0 <__retarget_lock_release_recursive>
   8a7c6:	4628      	mov	r0, r5
   8a7c8:	bd38      	pop	{r3, r4, r5, pc}
   8a7ca:	bf00      	nop

0008a7cc <std>:
   8a7cc:	2300      	movs	r3, #0
   8a7ce:	b510      	push	{r4, lr}
   8a7d0:	4604      	mov	r4, r0
   8a7d2:	e9c0 3300 	strd	r3, r3, [r0]
   8a7d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   8a7da:	8181      	strh	r1, [r0, #12]
   8a7dc:	81c2      	strh	r2, [r0, #14]
   8a7de:	4619      	mov	r1, r3
   8a7e0:	6083      	str	r3, [r0, #8]
   8a7e2:	6643      	str	r3, [r0, #100]	; 0x64
   8a7e4:	6183      	str	r3, [r0, #24]
   8a7e6:	2208      	movs	r2, #8
   8a7e8:	305c      	adds	r0, #92	; 0x5c
   8a7ea:	f7fc f98b 	bl	86b04 <memset>
   8a7ee:	4807      	ldr	r0, [pc, #28]	; (8a80c <std+0x40>)
   8a7f0:	4907      	ldr	r1, [pc, #28]	; (8a810 <std+0x44>)
   8a7f2:	4a08      	ldr	r2, [pc, #32]	; (8a814 <std+0x48>)
   8a7f4:	4b08      	ldr	r3, [pc, #32]	; (8a818 <std+0x4c>)
   8a7f6:	e9c4 4007 	strd	r4, r0, [r4, #28]
   8a7fa:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
   8a7fe:	62e3      	str	r3, [r4, #44]	; 0x2c
   8a800:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8a804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a808:	f000 bbdc 	b.w	8afc4 <__retarget_lock_init_recursive>
   8a80c:	0008c325 	.word	0x0008c325
   8a810:	0008c349 	.word	0x0008c349
   8a814:	0008c389 	.word	0x0008c389
   8a818:	0008c3a9 	.word	0x0008c3a9

0008a81c <_cleanup_r>:
   8a81c:	4901      	ldr	r1, [pc, #4]	; (8a824 <_cleanup_r+0x8>)
   8a81e:	f000 bba3 	b.w	8af68 <_fwalk_reent>
   8a822:	bf00      	nop
   8a824:	0008c7ed 	.word	0x0008c7ed

0008a828 <__sinit>:
   8a828:	b510      	push	{r4, lr}
   8a82a:	4604      	mov	r4, r0
   8a82c:	4813      	ldr	r0, [pc, #76]	; (8a87c <__sinit+0x54>)
   8a82e:	f000 fbcd 	bl	8afcc <__retarget_lock_acquire_recursive>
   8a832:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8a834:	b9ea      	cbnz	r2, 8a872 <__sinit+0x4a>
   8a836:	2003      	movs	r0, #3
   8a838:	4911      	ldr	r1, [pc, #68]	; (8a880 <__sinit+0x58>)
   8a83a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8a83e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8a842:	e9c4 20b8 	strd	r2, r0, [r4, #736]	; 0x2e0
   8a846:	63e1      	str	r1, [r4, #60]	; 0x3c
   8a848:	6860      	ldr	r0, [r4, #4]
   8a84a:	2104      	movs	r1, #4
   8a84c:	f7ff ffbe 	bl	8a7cc <std>
   8a850:	68a0      	ldr	r0, [r4, #8]
   8a852:	2201      	movs	r2, #1
   8a854:	2109      	movs	r1, #9
   8a856:	f7ff ffb9 	bl	8a7cc <std>
   8a85a:	68e0      	ldr	r0, [r4, #12]
   8a85c:	2202      	movs	r2, #2
   8a85e:	2112      	movs	r1, #18
   8a860:	f7ff ffb4 	bl	8a7cc <std>
   8a864:	2301      	movs	r3, #1
   8a866:	4805      	ldr	r0, [pc, #20]	; (8a87c <__sinit+0x54>)
   8a868:	63a3      	str	r3, [r4, #56]	; 0x38
   8a86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a86e:	f000 bbaf 	b.w	8afd0 <__retarget_lock_release_recursive>
   8a872:	4802      	ldr	r0, [pc, #8]	; (8a87c <__sinit+0x54>)
   8a874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8a878:	f000 bbaa 	b.w	8afd0 <__retarget_lock_release_recursive>
   8a87c:	20001854 	.word	0x20001854
   8a880:	0008a81d 	.word	0x0008a81d

0008a884 <__sfp_lock_acquire>:
   8a884:	4801      	ldr	r0, [pc, #4]	; (8a88c <__sfp_lock_acquire+0x8>)
   8a886:	f000 bba1 	b.w	8afcc <__retarget_lock_acquire_recursive>
   8a88a:	bf00      	nop
   8a88c:	20001868 	.word	0x20001868

0008a890 <__sfp_lock_release>:
   8a890:	4801      	ldr	r0, [pc, #4]	; (8a898 <__sfp_lock_release+0x8>)
   8a892:	f000 bb9d 	b.w	8afd0 <__retarget_lock_release_recursive>
   8a896:	bf00      	nop
   8a898:	20001868 	.word	0x20001868

0008a89c <__libc_fini_array>:
   8a89c:	b538      	push	{r3, r4, r5, lr}
   8a89e:	4b08      	ldr	r3, [pc, #32]	; (8a8c0 <__libc_fini_array+0x24>)
   8a8a0:	4d08      	ldr	r5, [pc, #32]	; (8a8c4 <__libc_fini_array+0x28>)
   8a8a2:	1b5b      	subs	r3, r3, r5
   8a8a4:	109c      	asrs	r4, r3, #2
   8a8a6:	d007      	beq.n	8a8b8 <__libc_fini_array+0x1c>
   8a8a8:	3b04      	subs	r3, #4
   8a8aa:	441d      	add	r5, r3
   8a8ac:	3c01      	subs	r4, #1
   8a8ae:	f855 3904 	ldr.w	r3, [r5], #-4
   8a8b2:	4798      	blx	r3
   8a8b4:	2c00      	cmp	r4, #0
   8a8b6:	d1f9      	bne.n	8a8ac <__libc_fini_array+0x10>
   8a8b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a8bc:	f002 bfb2 	b.w	8d824 <_fini>
   8a8c0:	0008d834 	.word	0x0008d834
   8a8c4:	0008d830 	.word	0x0008d830

0008a8c8 <__fputwc>:
   8a8c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8a8cc:	b083      	sub	sp, #12
   8a8ce:	4607      	mov	r7, r0
   8a8d0:	4688      	mov	r8, r1
   8a8d2:	4614      	mov	r4, r2
   8a8d4:	f000 fb6c 	bl	8afb0 <__locale_mb_cur_max>
   8a8d8:	2801      	cmp	r0, #1
   8a8da:	d103      	bne.n	8a8e4 <__fputwc+0x1c>
   8a8dc:	f108 33ff 	add.w	r3, r8, #4294967295
   8a8e0:	2bfe      	cmp	r3, #254	; 0xfe
   8a8e2:	d933      	bls.n	8a94c <__fputwc+0x84>
   8a8e4:	4642      	mov	r2, r8
   8a8e6:	4638      	mov	r0, r7
   8a8e8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8a8ec:	a901      	add	r1, sp, #4
   8a8ee:	f001 fe95 	bl	8c61c <_wcrtomb_r>
   8a8f2:	1c42      	adds	r2, r0, #1
   8a8f4:	4606      	mov	r6, r0
   8a8f6:	d02f      	beq.n	8a958 <__fputwc+0x90>
   8a8f8:	b318      	cbz	r0, 8a942 <__fputwc+0x7a>
   8a8fa:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8a8fe:	2500      	movs	r5, #0
   8a900:	f10d 0904 	add.w	r9, sp, #4
   8a904:	e008      	b.n	8a918 <__fputwc+0x50>
   8a906:	6823      	ldr	r3, [r4, #0]
   8a908:	1c5a      	adds	r2, r3, #1
   8a90a:	6022      	str	r2, [r4, #0]
   8a90c:	7019      	strb	r1, [r3, #0]
   8a90e:	3501      	adds	r5, #1
   8a910:	42b5      	cmp	r5, r6
   8a912:	d216      	bcs.n	8a942 <__fputwc+0x7a>
   8a914:	f815 1009 	ldrb.w	r1, [r5, r9]
   8a918:	68a3      	ldr	r3, [r4, #8]
   8a91a:	3b01      	subs	r3, #1
   8a91c:	2b00      	cmp	r3, #0
   8a91e:	60a3      	str	r3, [r4, #8]
   8a920:	daf1      	bge.n	8a906 <__fputwc+0x3e>
   8a922:	69a2      	ldr	r2, [r4, #24]
   8a924:	4293      	cmp	r3, r2
   8a926:	db01      	blt.n	8a92c <__fputwc+0x64>
   8a928:	290a      	cmp	r1, #10
   8a92a:	d1ec      	bne.n	8a906 <__fputwc+0x3e>
   8a92c:	4622      	mov	r2, r4
   8a92e:	4638      	mov	r0, r7
   8a930:	f001 fe1c 	bl	8c56c <__swbuf_r>
   8a934:	1c43      	adds	r3, r0, #1
   8a936:	d1ea      	bne.n	8a90e <__fputwc+0x46>
   8a938:	4606      	mov	r6, r0
   8a93a:	4630      	mov	r0, r6
   8a93c:	b003      	add	sp, #12
   8a93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a942:	4646      	mov	r6, r8
   8a944:	4630      	mov	r0, r6
   8a946:	b003      	add	sp, #12
   8a948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a94c:	fa5f f188 	uxtb.w	r1, r8
   8a950:	4606      	mov	r6, r0
   8a952:	f88d 1004 	strb.w	r1, [sp, #4]
   8a956:	e7d2      	b.n	8a8fe <__fputwc+0x36>
   8a958:	4630      	mov	r0, r6
   8a95a:	89a3      	ldrh	r3, [r4, #12]
   8a95c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a960:	81a3      	strh	r3, [r4, #12]
   8a962:	b003      	add	sp, #12
   8a964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008a968 <_fputwc_r>:
   8a968:	b530      	push	{r4, r5, lr}
   8a96a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a96c:	4614      	mov	r4, r2
   8a96e:	f013 0f01 	tst.w	r3, #1
   8a972:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8a976:	4605      	mov	r5, r0
   8a978:	b083      	sub	sp, #12
   8a97a:	b29a      	uxth	r2, r3
   8a97c:	d101      	bne.n	8a982 <_fputwc_r+0x1a>
   8a97e:	0598      	lsls	r0, r3, #22
   8a980:	d51c      	bpl.n	8a9bc <_fputwc_r+0x54>
   8a982:	0490      	lsls	r0, r2, #18
   8a984:	d406      	bmi.n	8a994 <_fputwc_r+0x2c>
   8a986:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8a988:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8a98c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8a990:	81a3      	strh	r3, [r4, #12]
   8a992:	6662      	str	r2, [r4, #100]	; 0x64
   8a994:	4628      	mov	r0, r5
   8a996:	4622      	mov	r2, r4
   8a998:	f7ff ff96 	bl	8a8c8 <__fputwc>
   8a99c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a99e:	4605      	mov	r5, r0
   8a9a0:	07da      	lsls	r2, r3, #31
   8a9a2:	d402      	bmi.n	8a9aa <_fputwc_r+0x42>
   8a9a4:	89a3      	ldrh	r3, [r4, #12]
   8a9a6:	059b      	lsls	r3, r3, #22
   8a9a8:	d502      	bpl.n	8a9b0 <_fputwc_r+0x48>
   8a9aa:	4628      	mov	r0, r5
   8a9ac:	b003      	add	sp, #12
   8a9ae:	bd30      	pop	{r4, r5, pc}
   8a9b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a9b2:	f000 fb0d 	bl	8afd0 <__retarget_lock_release_recursive>
   8a9b6:	4628      	mov	r0, r5
   8a9b8:	b003      	add	sp, #12
   8a9ba:	bd30      	pop	{r4, r5, pc}
   8a9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a9be:	9101      	str	r1, [sp, #4]
   8a9c0:	f000 fb04 	bl	8afcc <__retarget_lock_acquire_recursive>
   8a9c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a9c8:	9901      	ldr	r1, [sp, #4]
   8a9ca:	b29a      	uxth	r2, r3
   8a9cc:	e7d9      	b.n	8a982 <_fputwc_r+0x1a>
   8a9ce:	bf00      	nop

0008a9d0 <_malloc_trim_r>:
   8a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a9d2:	460c      	mov	r4, r1
   8a9d4:	4f23      	ldr	r7, [pc, #140]	; (8aa64 <_malloc_trim_r+0x94>)
   8a9d6:	4606      	mov	r6, r0
   8a9d8:	f000 fee2 	bl	8b7a0 <__malloc_lock>
   8a9dc:	68bb      	ldr	r3, [r7, #8]
   8a9de:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8a9e2:	685d      	ldr	r5, [r3, #4]
   8a9e4:	310f      	adds	r1, #15
   8a9e6:	f025 0503 	bic.w	r5, r5, #3
   8a9ea:	194b      	adds	r3, r1, r5
   8a9ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8a9f0:	f023 030f 	bic.w	r3, r3, #15
   8a9f4:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8a9f8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8a9fc:	db07      	blt.n	8aa0e <_malloc_trim_r+0x3e>
   8a9fe:	2100      	movs	r1, #0
   8aa00:	4630      	mov	r0, r6
   8aa02:	f001 fc7d 	bl	8c300 <_sbrk_r>
   8aa06:	68bb      	ldr	r3, [r7, #8]
   8aa08:	442b      	add	r3, r5
   8aa0a:	4298      	cmp	r0, r3
   8aa0c:	d004      	beq.n	8aa18 <_malloc_trim_r+0x48>
   8aa0e:	4630      	mov	r0, r6
   8aa10:	f000 fecc 	bl	8b7ac <__malloc_unlock>
   8aa14:	2000      	movs	r0, #0
   8aa16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8aa18:	4630      	mov	r0, r6
   8aa1a:	4261      	negs	r1, r4
   8aa1c:	f001 fc70 	bl	8c300 <_sbrk_r>
   8aa20:	3001      	adds	r0, #1
   8aa22:	d00d      	beq.n	8aa40 <_malloc_trim_r+0x70>
   8aa24:	4a10      	ldr	r2, [pc, #64]	; (8aa68 <_malloc_trim_r+0x98>)
   8aa26:	68b9      	ldr	r1, [r7, #8]
   8aa28:	6813      	ldr	r3, [r2, #0]
   8aa2a:	1b2d      	subs	r5, r5, r4
   8aa2c:	f045 0501 	orr.w	r5, r5, #1
   8aa30:	4630      	mov	r0, r6
   8aa32:	1b1b      	subs	r3, r3, r4
   8aa34:	604d      	str	r5, [r1, #4]
   8aa36:	6013      	str	r3, [r2, #0]
   8aa38:	f000 feb8 	bl	8b7ac <__malloc_unlock>
   8aa3c:	2001      	movs	r0, #1
   8aa3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8aa40:	2100      	movs	r1, #0
   8aa42:	4630      	mov	r0, r6
   8aa44:	f001 fc5c 	bl	8c300 <_sbrk_r>
   8aa48:	68ba      	ldr	r2, [r7, #8]
   8aa4a:	1a83      	subs	r3, r0, r2
   8aa4c:	2b0f      	cmp	r3, #15
   8aa4e:	ddde      	ble.n	8aa0e <_malloc_trim_r+0x3e>
   8aa50:	4906      	ldr	r1, [pc, #24]	; (8aa6c <_malloc_trim_r+0x9c>)
   8aa52:	f043 0301 	orr.w	r3, r3, #1
   8aa56:	680c      	ldr	r4, [r1, #0]
   8aa58:	4903      	ldr	r1, [pc, #12]	; (8aa68 <_malloc_trim_r+0x98>)
   8aa5a:	1b00      	subs	r0, r0, r4
   8aa5c:	6053      	str	r3, [r2, #4]
   8aa5e:	6008      	str	r0, [r1, #0]
   8aa60:	e7d5      	b.n	8aa0e <_malloc_trim_r+0x3e>
   8aa62:	bf00      	nop
   8aa64:	200009e0 	.word	0x200009e0
   8aa68:	20001388 	.word	0x20001388
   8aa6c:	20000de8 	.word	0x20000de8

0008aa70 <_free_r>:
   8aa70:	2900      	cmp	r1, #0
   8aa72:	d05f      	beq.n	8ab34 <_free_r+0xc4>
   8aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aa76:	460c      	mov	r4, r1
   8aa78:	4606      	mov	r6, r0
   8aa7a:	f000 fe91 	bl	8b7a0 <__malloc_lock>
   8aa7e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8aa82:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8ac78 <_free_r+0x208>
   8aa86:	f1a4 0008 	sub.w	r0, r4, #8
   8aa8a:	f023 0101 	bic.w	r1, r3, #1
   8aa8e:	1842      	adds	r2, r0, r1
   8aa90:	f8dc 7008 	ldr.w	r7, [ip, #8]
   8aa94:	6855      	ldr	r5, [r2, #4]
   8aa96:	4297      	cmp	r7, r2
   8aa98:	f025 0503 	bic.w	r5, r5, #3
   8aa9c:	f000 8089 	beq.w	8abb2 <_free_r+0x142>
   8aaa0:	07df      	lsls	r7, r3, #31
   8aaa2:	6055      	str	r5, [r2, #4]
   8aaa4:	d434      	bmi.n	8ab10 <_free_r+0xa0>
   8aaa6:	f854 7c08 	ldr.w	r7, [r4, #-8]
   8aaaa:	f10c 0408 	add.w	r4, ip, #8
   8aaae:	1bc0      	subs	r0, r0, r7
   8aab0:	6883      	ldr	r3, [r0, #8]
   8aab2:	4439      	add	r1, r7
   8aab4:	42a3      	cmp	r3, r4
   8aab6:	d06a      	beq.n	8ab8e <_free_r+0x11e>
   8aab8:	1957      	adds	r7, r2, r5
   8aaba:	687f      	ldr	r7, [r7, #4]
   8aabc:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   8aac0:	f8c3 e00c 	str.w	lr, [r3, #12]
   8aac4:	f8ce 3008 	str.w	r3, [lr, #8]
   8aac8:	07fb      	lsls	r3, r7, #31
   8aaca:	f140 8097 	bpl.w	8abfc <_free_r+0x18c>
   8aace:	f041 0301 	orr.w	r3, r1, #1
   8aad2:	6043      	str	r3, [r0, #4]
   8aad4:	6011      	str	r1, [r2, #0]
   8aad6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8aada:	d234      	bcs.n	8ab46 <_free_r+0xd6>
   8aadc:	2201      	movs	r2, #1
   8aade:	f8dc 4004 	ldr.w	r4, [ip, #4]
   8aae2:	08cb      	lsrs	r3, r1, #3
   8aae4:	0949      	lsrs	r1, r1, #5
   8aae6:	4413      	add	r3, r2
   8aae8:	fa02 f101 	lsl.w	r1, r2, r1
   8aaec:	4321      	orrs	r1, r4
   8aaee:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   8aaf2:	f85c 4033 	ldr.w	r4, [ip, r3, lsl #3]
   8aaf6:	3a08      	subs	r2, #8
   8aaf8:	e9c0 4202 	strd	r4, r2, [r0, #8]
   8aafc:	f8cc 1004 	str.w	r1, [ip, #4]
   8ab00:	f84c 0033 	str.w	r0, [ip, r3, lsl #3]
   8ab04:	60e0      	str	r0, [r4, #12]
   8ab06:	4630      	mov	r0, r6
   8ab08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8ab0c:	f000 be4e 	b.w	8b7ac <__malloc_unlock>
   8ab10:	1953      	adds	r3, r2, r5
   8ab12:	685b      	ldr	r3, [r3, #4]
   8ab14:	07df      	lsls	r7, r3, #31
   8ab16:	d40e      	bmi.n	8ab36 <_free_r+0xc6>
   8ab18:	4429      	add	r1, r5
   8ab1a:	f10c 0408 	add.w	r4, ip, #8
   8ab1e:	6893      	ldr	r3, [r2, #8]
   8ab20:	42a3      	cmp	r3, r4
   8ab22:	d073      	beq.n	8ac0c <_free_r+0x19c>
   8ab24:	68d4      	ldr	r4, [r2, #12]
   8ab26:	f041 0201 	orr.w	r2, r1, #1
   8ab2a:	60dc      	str	r4, [r3, #12]
   8ab2c:	60a3      	str	r3, [r4, #8]
   8ab2e:	6042      	str	r2, [r0, #4]
   8ab30:	5041      	str	r1, [r0, r1]
   8ab32:	e7d0      	b.n	8aad6 <_free_r+0x66>
   8ab34:	4770      	bx	lr
   8ab36:	f041 0301 	orr.w	r3, r1, #1
   8ab3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8ab3e:	f844 3c04 	str.w	r3, [r4, #-4]
   8ab42:	6011      	str	r1, [r2, #0]
   8ab44:	d3ca      	bcc.n	8aadc <_free_r+0x6c>
   8ab46:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8ab4a:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8ab4e:	d24a      	bcs.n	8abe6 <_free_r+0x176>
   8ab50:	098b      	lsrs	r3, r1, #6
   8ab52:	f103 0539 	add.w	r5, r3, #57	; 0x39
   8ab56:	00ed      	lsls	r5, r5, #3
   8ab58:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8ab5c:	f85c 3005 	ldr.w	r3, [ip, r5]
   8ab60:	eb0c 0405 	add.w	r4, ip, r5
   8ab64:	3c08      	subs	r4, #8
   8ab66:	429c      	cmp	r4, r3
   8ab68:	d059      	beq.n	8ac1e <_free_r+0x1ae>
   8ab6a:	685a      	ldr	r2, [r3, #4]
   8ab6c:	f022 0203 	bic.w	r2, r2, #3
   8ab70:	428a      	cmp	r2, r1
   8ab72:	d902      	bls.n	8ab7a <_free_r+0x10a>
   8ab74:	689b      	ldr	r3, [r3, #8]
   8ab76:	429c      	cmp	r4, r3
   8ab78:	d1f7      	bne.n	8ab6a <_free_r+0xfa>
   8ab7a:	68dc      	ldr	r4, [r3, #12]
   8ab7c:	e9c0 3402 	strd	r3, r4, [r0, #8]
   8ab80:	60a0      	str	r0, [r4, #8]
   8ab82:	60d8      	str	r0, [r3, #12]
   8ab84:	4630      	mov	r0, r6
   8ab86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8ab8a:	f000 be0f 	b.w	8b7ac <__malloc_unlock>
   8ab8e:	1953      	adds	r3, r2, r5
   8ab90:	685b      	ldr	r3, [r3, #4]
   8ab92:	07db      	lsls	r3, r3, #31
   8ab94:	d466      	bmi.n	8ac64 <_free_r+0x1f4>
   8ab96:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   8ab9a:	4429      	add	r1, r5
   8ab9c:	f041 0401 	orr.w	r4, r1, #1
   8aba0:	60d3      	str	r3, [r2, #12]
   8aba2:	609a      	str	r2, [r3, #8]
   8aba4:	6044      	str	r4, [r0, #4]
   8aba6:	5041      	str	r1, [r0, r1]
   8aba8:	4630      	mov	r0, r6
   8abaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8abae:	f000 bdfd 	b.w	8b7ac <__malloc_unlock>
   8abb2:	07db      	lsls	r3, r3, #31
   8abb4:	4429      	add	r1, r5
   8abb6:	d407      	bmi.n	8abc8 <_free_r+0x158>
   8abb8:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8abbc:	1b00      	subs	r0, r0, r4
   8abbe:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8abc2:	4421      	add	r1, r4
   8abc4:	60d3      	str	r3, [r2, #12]
   8abc6:	609a      	str	r2, [r3, #8]
   8abc8:	4b29      	ldr	r3, [pc, #164]	; (8ac70 <_free_r+0x200>)
   8abca:	f041 0201 	orr.w	r2, r1, #1
   8abce:	681b      	ldr	r3, [r3, #0]
   8abd0:	6042      	str	r2, [r0, #4]
   8abd2:	428b      	cmp	r3, r1
   8abd4:	f8cc 0008 	str.w	r0, [ip, #8]
   8abd8:	d895      	bhi.n	8ab06 <_free_r+0x96>
   8abda:	4b26      	ldr	r3, [pc, #152]	; (8ac74 <_free_r+0x204>)
   8abdc:	4630      	mov	r0, r6
   8abde:	6819      	ldr	r1, [r3, #0]
   8abe0:	f7ff fef6 	bl	8a9d0 <_malloc_trim_r>
   8abe4:	e78f      	b.n	8ab06 <_free_r+0x96>
   8abe6:	2b14      	cmp	r3, #20
   8abe8:	d90a      	bls.n	8ac00 <_free_r+0x190>
   8abea:	2b54      	cmp	r3, #84	; 0x54
   8abec:	d821      	bhi.n	8ac32 <_free_r+0x1c2>
   8abee:	0b0b      	lsrs	r3, r1, #12
   8abf0:	f103 056f 	add.w	r5, r3, #111	; 0x6f
   8abf4:	00ed      	lsls	r5, r5, #3
   8abf6:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8abfa:	e7af      	b.n	8ab5c <_free_r+0xec>
   8abfc:	4429      	add	r1, r5
   8abfe:	e78e      	b.n	8ab1e <_free_r+0xae>
   8ac00:	f103 055c 	add.w	r5, r3, #92	; 0x5c
   8ac04:	00ed      	lsls	r5, r5, #3
   8ac06:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8ac0a:	e7a7      	b.n	8ab5c <_free_r+0xec>
   8ac0c:	f041 0301 	orr.w	r3, r1, #1
   8ac10:	e9cc 0004 	strd	r0, r0, [ip, #16]
   8ac14:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8ac18:	6043      	str	r3, [r0, #4]
   8ac1a:	5041      	str	r1, [r0, r1]
   8ac1c:	e773      	b.n	8ab06 <_free_r+0x96>
   8ac1e:	2501      	movs	r5, #1
   8ac20:	f8dc 1004 	ldr.w	r1, [ip, #4]
   8ac24:	1092      	asrs	r2, r2, #2
   8ac26:	fa05 f202 	lsl.w	r2, r5, r2
   8ac2a:	430a      	orrs	r2, r1
   8ac2c:	f8cc 2004 	str.w	r2, [ip, #4]
   8ac30:	e7a4      	b.n	8ab7c <_free_r+0x10c>
   8ac32:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8ac36:	d806      	bhi.n	8ac46 <_free_r+0x1d6>
   8ac38:	0bcb      	lsrs	r3, r1, #15
   8ac3a:	f103 0578 	add.w	r5, r3, #120	; 0x78
   8ac3e:	00ed      	lsls	r5, r5, #3
   8ac40:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8ac44:	e78a      	b.n	8ab5c <_free_r+0xec>
   8ac46:	f240 5254 	movw	r2, #1364	; 0x554
   8ac4a:	4293      	cmp	r3, r2
   8ac4c:	d806      	bhi.n	8ac5c <_free_r+0x1ec>
   8ac4e:	0c8b      	lsrs	r3, r1, #18
   8ac50:	f103 057d 	add.w	r5, r3, #125	; 0x7d
   8ac54:	00ed      	lsls	r5, r5, #3
   8ac56:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8ac5a:	e77f      	b.n	8ab5c <_free_r+0xec>
   8ac5c:	f44f 757e 	mov.w	r5, #1016	; 0x3f8
   8ac60:	227e      	movs	r2, #126	; 0x7e
   8ac62:	e77b      	b.n	8ab5c <_free_r+0xec>
   8ac64:	f041 0301 	orr.w	r3, r1, #1
   8ac68:	6043      	str	r3, [r0, #4]
   8ac6a:	6011      	str	r1, [r2, #0]
   8ac6c:	e74b      	b.n	8ab06 <_free_r+0x96>
   8ac6e:	bf00      	nop
   8ac70:	20000dec 	.word	0x20000dec
   8ac74:	200013b8 	.word	0x200013b8
   8ac78:	200009e0 	.word	0x200009e0

0008ac7c <__sfvwrite_r>:
   8ac7c:	6893      	ldr	r3, [r2, #8]
   8ac7e:	2b00      	cmp	r3, #0
   8ac80:	f000 80bd 	beq.w	8adfe <__sfvwrite_r+0x182>
   8ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ac88:	4690      	mov	r8, r2
   8ac8a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8ac8e:	460c      	mov	r4, r1
   8ac90:	0711      	lsls	r1, r2, #28
   8ac92:	4681      	mov	r9, r0
   8ac94:	b083      	sub	sp, #12
   8ac96:	b293      	uxth	r3, r2
   8ac98:	d527      	bpl.n	8acea <__sfvwrite_r+0x6e>
   8ac9a:	6922      	ldr	r2, [r4, #16]
   8ac9c:	b32a      	cbz	r2, 8acea <__sfvwrite_r+0x6e>
   8ac9e:	f013 0702 	ands.w	r7, r3, #2
   8aca2:	f8d8 5000 	ldr.w	r5, [r8]
   8aca6:	d02f      	beq.n	8ad08 <__sfvwrite_r+0x8c>
   8aca8:	f04f 0b00 	mov.w	fp, #0
   8acac:	465f      	mov	r7, fp
   8acae:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8af64 <__sfvwrite_r+0x2e8>
   8acb2:	2f00      	cmp	r7, #0
   8acb4:	f000 8089 	beq.w	8adca <__sfvwrite_r+0x14e>
   8acb8:	4557      	cmp	r7, sl
   8acba:	463b      	mov	r3, r7
   8acbc:	465a      	mov	r2, fp
   8acbe:	bf28      	it	cs
   8acc0:	4653      	movcs	r3, sl
   8acc2:	4648      	mov	r0, r9
   8acc4:	69e1      	ldr	r1, [r4, #28]
   8acc6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8acc8:	47b0      	blx	r6
   8acca:	2800      	cmp	r0, #0
   8accc:	f340 808d 	ble.w	8adea <__sfvwrite_r+0x16e>
   8acd0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8acd4:	4483      	add	fp, r0
   8acd6:	1a1b      	subs	r3, r3, r0
   8acd8:	1a3f      	subs	r7, r7, r0
   8acda:	f8c8 3008 	str.w	r3, [r8, #8]
   8acde:	2b00      	cmp	r3, #0
   8ace0:	d1e7      	bne.n	8acb2 <__sfvwrite_r+0x36>
   8ace2:	2000      	movs	r0, #0
   8ace4:	b003      	add	sp, #12
   8ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8acea:	4621      	mov	r1, r4
   8acec:	4648      	mov	r0, r9
   8acee:	f7fe fc39 	bl	89564 <__swsetup_r>
   8acf2:	2800      	cmp	r0, #0
   8acf4:	f040 8132 	bne.w	8af5c <__sfvwrite_r+0x2e0>
   8acf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8acfc:	f8d8 5000 	ldr.w	r5, [r8]
   8ad00:	b293      	uxth	r3, r2
   8ad02:	f013 0702 	ands.w	r7, r3, #2
   8ad06:	d1cf      	bne.n	8aca8 <__sfvwrite_r+0x2c>
   8ad08:	f013 0a01 	ands.w	sl, r3, #1
   8ad0c:	d179      	bne.n	8ae02 <__sfvwrite_r+0x186>
   8ad0e:	4656      	mov	r6, sl
   8ad10:	2e00      	cmp	r6, #0
   8ad12:	d056      	beq.n	8adc2 <__sfvwrite_r+0x146>
   8ad14:	059a      	lsls	r2, r3, #22
   8ad16:	68a7      	ldr	r7, [r4, #8]
   8ad18:	f140 80bd 	bpl.w	8ae96 <__sfvwrite_r+0x21a>
   8ad1c:	42b7      	cmp	r7, r6
   8ad1e:	46bb      	mov	fp, r7
   8ad20:	f200 80d2 	bhi.w	8aec8 <__sfvwrite_r+0x24c>
   8ad24:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8ad28:	f000 80d0 	beq.w	8aecc <__sfvwrite_r+0x250>
   8ad2c:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
   8ad30:	6822      	ldr	r2, [r4, #0]
   8ad32:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8ad36:	eba2 0b01 	sub.w	fp, r2, r1
   8ad3a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8ad3e:	f10b 0001 	add.w	r0, fp, #1
   8ad42:	107f      	asrs	r7, r7, #1
   8ad44:	4430      	add	r0, r6
   8ad46:	42b8      	cmp	r0, r7
   8ad48:	463a      	mov	r2, r7
   8ad4a:	bf84      	itt	hi
   8ad4c:	4607      	movhi	r7, r0
   8ad4e:	463a      	movhi	r2, r7
   8ad50:	055b      	lsls	r3, r3, #21
   8ad52:	f140 80e7 	bpl.w	8af24 <__sfvwrite_r+0x2a8>
   8ad56:	4611      	mov	r1, r2
   8ad58:	4648      	mov	r0, r9
   8ad5a:	f000 f9b3 	bl	8b0c4 <_malloc_r>
   8ad5e:	2800      	cmp	r0, #0
   8ad60:	f000 80f6 	beq.w	8af50 <__sfvwrite_r+0x2d4>
   8ad64:	465a      	mov	r2, fp
   8ad66:	6921      	ldr	r1, [r4, #16]
   8ad68:	9000      	str	r0, [sp, #0]
   8ad6a:	f7fb fe55 	bl	86a18 <memcpy>
   8ad6e:	89a2      	ldrh	r2, [r4, #12]
   8ad70:	9b00      	ldr	r3, [sp, #0]
   8ad72:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8ad76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8ad7a:	81a2      	strh	r2, [r4, #12]
   8ad7c:	eba7 020b 	sub.w	r2, r7, fp
   8ad80:	eb03 000b 	add.w	r0, r3, fp
   8ad84:	6167      	str	r7, [r4, #20]
   8ad86:	46b3      	mov	fp, r6
   8ad88:	4637      	mov	r7, r6
   8ad8a:	6123      	str	r3, [r4, #16]
   8ad8c:	6020      	str	r0, [r4, #0]
   8ad8e:	60a2      	str	r2, [r4, #8]
   8ad90:	465a      	mov	r2, fp
   8ad92:	4651      	mov	r1, sl
   8ad94:	f000 fc9a 	bl	8b6cc <memmove>
   8ad98:	68a2      	ldr	r2, [r4, #8]
   8ad9a:	6823      	ldr	r3, [r4, #0]
   8ad9c:	1bd2      	subs	r2, r2, r7
   8ad9e:	4637      	mov	r7, r6
   8ada0:	2600      	movs	r6, #0
   8ada2:	445b      	add	r3, fp
   8ada4:	60a2      	str	r2, [r4, #8]
   8ada6:	6023      	str	r3, [r4, #0]
   8ada8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   8adac:	44ba      	add	sl, r7
   8adae:	1bd7      	subs	r7, r2, r7
   8adb0:	f8c8 7008 	str.w	r7, [r8, #8]
   8adb4:	2f00      	cmp	r7, #0
   8adb6:	d094      	beq.n	8ace2 <__sfvwrite_r+0x66>
   8adb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8adbc:	b29b      	uxth	r3, r3
   8adbe:	2e00      	cmp	r6, #0
   8adc0:	d1a8      	bne.n	8ad14 <__sfvwrite_r+0x98>
   8adc2:	e9d5 a600 	ldrd	sl, r6, [r5]
   8adc6:	3508      	adds	r5, #8
   8adc8:	e7a2      	b.n	8ad10 <__sfvwrite_r+0x94>
   8adca:	e9d5 b700 	ldrd	fp, r7, [r5]
   8adce:	3508      	adds	r5, #8
   8add0:	e76f      	b.n	8acb2 <__sfvwrite_r+0x36>
   8add2:	4629      	mov	r1, r5
   8add4:	465a      	mov	r2, fp
   8add6:	f000 fc79 	bl	8b6cc <memmove>
   8adda:	6823      	ldr	r3, [r4, #0]
   8addc:	4621      	mov	r1, r4
   8adde:	445b      	add	r3, fp
   8ade0:	4648      	mov	r0, r9
   8ade2:	6023      	str	r3, [r4, #0]
   8ade4:	f7ff fcc4 	bl	8a770 <_fflush_r>
   8ade8:	b358      	cbz	r0, 8ae42 <__sfvwrite_r+0x1c6>
   8adea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8adee:	f04f 30ff 	mov.w	r0, #4294967295
   8adf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8adf6:	81a3      	strh	r3, [r4, #12]
   8adf8:	b003      	add	sp, #12
   8adfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8adfe:	2000      	movs	r0, #0
   8ae00:	4770      	bx	lr
   8ae02:	463e      	mov	r6, r7
   8ae04:	46aa      	mov	sl, r5
   8ae06:	4638      	mov	r0, r7
   8ae08:	463d      	mov	r5, r7
   8ae0a:	9700      	str	r7, [sp, #0]
   8ae0c:	b36e      	cbz	r6, 8ae6a <__sfvwrite_r+0x1ee>
   8ae0e:	2800      	cmp	r0, #0
   8ae10:	d035      	beq.n	8ae7e <__sfvwrite_r+0x202>
   8ae12:	9a00      	ldr	r2, [sp, #0]
   8ae14:	6820      	ldr	r0, [r4, #0]
   8ae16:	6921      	ldr	r1, [r4, #16]
   8ae18:	42b2      	cmp	r2, r6
   8ae1a:	bf28      	it	cs
   8ae1c:	4632      	movcs	r2, r6
   8ae1e:	4288      	cmp	r0, r1
   8ae20:	6963      	ldr	r3, [r4, #20]
   8ae22:	d904      	bls.n	8ae2e <__sfvwrite_r+0x1b2>
   8ae24:	68a1      	ldr	r1, [r4, #8]
   8ae26:	eb03 0b01 	add.w	fp, r3, r1
   8ae2a:	455a      	cmp	r2, fp
   8ae2c:	dcd1      	bgt.n	8add2 <__sfvwrite_r+0x156>
   8ae2e:	4293      	cmp	r3, r2
   8ae30:	dc6b      	bgt.n	8af0a <__sfvwrite_r+0x28e>
   8ae32:	462a      	mov	r2, r5
   8ae34:	4648      	mov	r0, r9
   8ae36:	69e1      	ldr	r1, [r4, #28]
   8ae38:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8ae3a:	47b8      	blx	r7
   8ae3c:	f1b0 0b00 	subs.w	fp, r0, #0
   8ae40:	ddd3      	ble.n	8adea <__sfvwrite_r+0x16e>
   8ae42:	9b00      	ldr	r3, [sp, #0]
   8ae44:	ebb3 030b 	subs.w	r3, r3, fp
   8ae48:	9300      	str	r3, [sp, #0]
   8ae4a:	d057      	beq.n	8aefc <__sfvwrite_r+0x280>
   8ae4c:	2001      	movs	r0, #1
   8ae4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8ae52:	445d      	add	r5, fp
   8ae54:	eba3 030b 	sub.w	r3, r3, fp
   8ae58:	eba6 060b 	sub.w	r6, r6, fp
   8ae5c:	f8c8 3008 	str.w	r3, [r8, #8]
   8ae60:	2b00      	cmp	r3, #0
   8ae62:	f43f af3e 	beq.w	8ace2 <__sfvwrite_r+0x66>
   8ae66:	2e00      	cmp	r6, #0
   8ae68:	d1d1      	bne.n	8ae0e <__sfvwrite_r+0x192>
   8ae6a:	f10a 0308 	add.w	r3, sl, #8
   8ae6e:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8ae72:	469a      	mov	sl, r3
   8ae74:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8ae78:	3308      	adds	r3, #8
   8ae7a:	2e00      	cmp	r6, #0
   8ae7c:	d0f7      	beq.n	8ae6e <__sfvwrite_r+0x1f2>
   8ae7e:	4632      	mov	r2, r6
   8ae80:	210a      	movs	r1, #10
   8ae82:	4628      	mov	r0, r5
   8ae84:	f000 fbe2 	bl	8b64c <memchr>
   8ae88:	2800      	cmp	r0, #0
   8ae8a:	d05e      	beq.n	8af4a <__sfvwrite_r+0x2ce>
   8ae8c:	3001      	adds	r0, #1
   8ae8e:	1b43      	subs	r3, r0, r5
   8ae90:	461a      	mov	r2, r3
   8ae92:	9300      	str	r3, [sp, #0]
   8ae94:	e7be      	b.n	8ae14 <__sfvwrite_r+0x198>
   8ae96:	6820      	ldr	r0, [r4, #0]
   8ae98:	6923      	ldr	r3, [r4, #16]
   8ae9a:	4298      	cmp	r0, r3
   8ae9c:	d818      	bhi.n	8aed0 <__sfvwrite_r+0x254>
   8ae9e:	6962      	ldr	r2, [r4, #20]
   8aea0:	42b2      	cmp	r2, r6
   8aea2:	d815      	bhi.n	8aed0 <__sfvwrite_r+0x254>
   8aea4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   8aea8:	42b3      	cmp	r3, r6
   8aeaa:	bf28      	it	cs
   8aeac:	4633      	movcs	r3, r6
   8aeae:	fb93 f3f2 	sdiv	r3, r3, r2
   8aeb2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8aeb4:	fb02 f303 	mul.w	r3, r2, r3
   8aeb8:	4648      	mov	r0, r9
   8aeba:	4652      	mov	r2, sl
   8aebc:	69e1      	ldr	r1, [r4, #28]
   8aebe:	47b8      	blx	r7
   8aec0:	1e07      	subs	r7, r0, #0
   8aec2:	dd92      	ble.n	8adea <__sfvwrite_r+0x16e>
   8aec4:	1bf6      	subs	r6, r6, r7
   8aec6:	e76f      	b.n	8ada8 <__sfvwrite_r+0x12c>
   8aec8:	4637      	mov	r7, r6
   8aeca:	46b3      	mov	fp, r6
   8aecc:	6820      	ldr	r0, [r4, #0]
   8aece:	e75f      	b.n	8ad90 <__sfvwrite_r+0x114>
   8aed0:	42b7      	cmp	r7, r6
   8aed2:	bf28      	it	cs
   8aed4:	4637      	movcs	r7, r6
   8aed6:	4651      	mov	r1, sl
   8aed8:	463a      	mov	r2, r7
   8aeda:	f000 fbf7 	bl	8b6cc <memmove>
   8aede:	68a3      	ldr	r3, [r4, #8]
   8aee0:	6822      	ldr	r2, [r4, #0]
   8aee2:	1bdb      	subs	r3, r3, r7
   8aee4:	443a      	add	r2, r7
   8aee6:	60a3      	str	r3, [r4, #8]
   8aee8:	6022      	str	r2, [r4, #0]
   8aeea:	2b00      	cmp	r3, #0
   8aeec:	d1ea      	bne.n	8aec4 <__sfvwrite_r+0x248>
   8aeee:	4621      	mov	r1, r4
   8aef0:	4648      	mov	r0, r9
   8aef2:	f7ff fc3d 	bl	8a770 <_fflush_r>
   8aef6:	2800      	cmp	r0, #0
   8aef8:	d0e4      	beq.n	8aec4 <__sfvwrite_r+0x248>
   8aefa:	e776      	b.n	8adea <__sfvwrite_r+0x16e>
   8aefc:	4621      	mov	r1, r4
   8aefe:	4648      	mov	r0, r9
   8af00:	f7ff fc36 	bl	8a770 <_fflush_r>
   8af04:	2800      	cmp	r0, #0
   8af06:	d0a2      	beq.n	8ae4e <__sfvwrite_r+0x1d2>
   8af08:	e76f      	b.n	8adea <__sfvwrite_r+0x16e>
   8af0a:	4629      	mov	r1, r5
   8af0c:	4693      	mov	fp, r2
   8af0e:	9201      	str	r2, [sp, #4]
   8af10:	f000 fbdc 	bl	8b6cc <memmove>
   8af14:	68a1      	ldr	r1, [r4, #8]
   8af16:	6823      	ldr	r3, [r4, #0]
   8af18:	9a01      	ldr	r2, [sp, #4]
   8af1a:	1a89      	subs	r1, r1, r2
   8af1c:	441a      	add	r2, r3
   8af1e:	60a1      	str	r1, [r4, #8]
   8af20:	6022      	str	r2, [r4, #0]
   8af22:	e78e      	b.n	8ae42 <__sfvwrite_r+0x1c6>
   8af24:	4648      	mov	r0, r9
   8af26:	f000 ffc3 	bl	8beb0 <_realloc_r>
   8af2a:	4603      	mov	r3, r0
   8af2c:	2800      	cmp	r0, #0
   8af2e:	f47f af25 	bne.w	8ad7c <__sfvwrite_r+0x100>
   8af32:	4648      	mov	r0, r9
   8af34:	6921      	ldr	r1, [r4, #16]
   8af36:	f7ff fd9b 	bl	8aa70 <_free_r>
   8af3a:	220c      	movs	r2, #12
   8af3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8af40:	f8c9 2000 	str.w	r2, [r9]
   8af44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8af48:	e751      	b.n	8adee <__sfvwrite_r+0x172>
   8af4a:	1c72      	adds	r2, r6, #1
   8af4c:	9200      	str	r2, [sp, #0]
   8af4e:	e761      	b.n	8ae14 <__sfvwrite_r+0x198>
   8af50:	220c      	movs	r2, #12
   8af52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8af56:	f8c9 2000 	str.w	r2, [r9]
   8af5a:	e748      	b.n	8adee <__sfvwrite_r+0x172>
   8af5c:	f04f 30ff 	mov.w	r0, #4294967295
   8af60:	e6c0      	b.n	8ace4 <__sfvwrite_r+0x68>
   8af62:	bf00      	nop
   8af64:	7ffffc00 	.word	0x7ffffc00

0008af68 <_fwalk_reent>:
   8af68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8af6c:	4607      	mov	r7, r0
   8af6e:	4688      	mov	r8, r1
   8af70:	f04f 0900 	mov.w	r9, #0
   8af74:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8af78:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8af7c:	3d01      	subs	r5, #1
   8af7e:	d410      	bmi.n	8afa2 <_fwalk_reent+0x3a>
   8af80:	89a3      	ldrh	r3, [r4, #12]
   8af82:	3d01      	subs	r5, #1
   8af84:	2b01      	cmp	r3, #1
   8af86:	d908      	bls.n	8af9a <_fwalk_reent+0x32>
   8af88:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8af8c:	3301      	adds	r3, #1
   8af8e:	d004      	beq.n	8af9a <_fwalk_reent+0x32>
   8af90:	4621      	mov	r1, r4
   8af92:	4638      	mov	r0, r7
   8af94:	47c0      	blx	r8
   8af96:	ea49 0900 	orr.w	r9, r9, r0
   8af9a:	1c6b      	adds	r3, r5, #1
   8af9c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8afa0:	d1ee      	bne.n	8af80 <_fwalk_reent+0x18>
   8afa2:	6836      	ldr	r6, [r6, #0]
   8afa4:	2e00      	cmp	r6, #0
   8afa6:	d1e7      	bne.n	8af78 <_fwalk_reent+0x10>
   8afa8:	4648      	mov	r0, r9
   8afaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8afae:	bf00      	nop

0008afb0 <__locale_mb_cur_max>:
   8afb0:	4b01      	ldr	r3, [pc, #4]	; (8afb8 <__locale_mb_cur_max+0x8>)
   8afb2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8afb6:	4770      	bx	lr
   8afb8:	20000874 	.word	0x20000874

0008afbc <_localeconv_r>:
   8afbc:	4800      	ldr	r0, [pc, #0]	; (8afc0 <_localeconv_r+0x4>)
   8afbe:	4770      	bx	lr
   8afc0:	20000964 	.word	0x20000964

0008afc4 <__retarget_lock_init_recursive>:
   8afc4:	4770      	bx	lr
   8afc6:	bf00      	nop

0008afc8 <__retarget_lock_close_recursive>:
   8afc8:	4770      	bx	lr
   8afca:	bf00      	nop

0008afcc <__retarget_lock_acquire_recursive>:
   8afcc:	4770      	bx	lr
   8afce:	bf00      	nop

0008afd0 <__retarget_lock_release_recursive>:
   8afd0:	4770      	bx	lr
   8afd2:	bf00      	nop

0008afd4 <__swhatbuf_r>:
   8afd4:	b570      	push	{r4, r5, r6, lr}
   8afd6:	460c      	mov	r4, r1
   8afd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8afdc:	4615      	mov	r5, r2
   8afde:	2900      	cmp	r1, #0
   8afe0:	461e      	mov	r6, r3
   8afe2:	b096      	sub	sp, #88	; 0x58
   8afe4:	db14      	blt.n	8b010 <__swhatbuf_r+0x3c>
   8afe6:	466a      	mov	r2, sp
   8afe8:	f001 fc7a 	bl	8c8e0 <_fstat_r>
   8afec:	2800      	cmp	r0, #0
   8afee:	db0f      	blt.n	8b010 <__swhatbuf_r+0x3c>
   8aff0:	9a01      	ldr	r2, [sp, #4]
   8aff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8aff6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8affa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8affe:	fab2 f282 	clz	r2, r2
   8b002:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8b006:	0952      	lsrs	r2, r2, #5
   8b008:	6032      	str	r2, [r6, #0]
   8b00a:	602b      	str	r3, [r5, #0]
   8b00c:	b016      	add	sp, #88	; 0x58
   8b00e:	bd70      	pop	{r4, r5, r6, pc}
   8b010:	2300      	movs	r3, #0
   8b012:	89a1      	ldrh	r1, [r4, #12]
   8b014:	6033      	str	r3, [r6, #0]
   8b016:	f011 0080 	ands.w	r0, r1, #128	; 0x80
   8b01a:	d004      	beq.n	8b026 <__swhatbuf_r+0x52>
   8b01c:	2240      	movs	r2, #64	; 0x40
   8b01e:	4618      	mov	r0, r3
   8b020:	602a      	str	r2, [r5, #0]
   8b022:	b016      	add	sp, #88	; 0x58
   8b024:	bd70      	pop	{r4, r5, r6, pc}
   8b026:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8b02a:	602b      	str	r3, [r5, #0]
   8b02c:	b016      	add	sp, #88	; 0x58
   8b02e:	bd70      	pop	{r4, r5, r6, pc}

0008b030 <__smakebuf_r>:
   8b030:	b570      	push	{r4, r5, r6, lr}
   8b032:	898b      	ldrh	r3, [r1, #12]
   8b034:	460c      	mov	r4, r1
   8b036:	079d      	lsls	r5, r3, #30
   8b038:	b082      	sub	sp, #8
   8b03a:	d507      	bpl.n	8b04c <__smakebuf_r+0x1c>
   8b03c:	2201      	movs	r2, #1
   8b03e:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8b042:	614a      	str	r2, [r1, #20]
   8b044:	600b      	str	r3, [r1, #0]
   8b046:	610b      	str	r3, [r1, #16]
   8b048:	b002      	add	sp, #8
   8b04a:	bd70      	pop	{r4, r5, r6, pc}
   8b04c:	ab01      	add	r3, sp, #4
   8b04e:	466a      	mov	r2, sp
   8b050:	4606      	mov	r6, r0
   8b052:	f7ff ffbf 	bl	8afd4 <__swhatbuf_r>
   8b056:	9900      	ldr	r1, [sp, #0]
   8b058:	4605      	mov	r5, r0
   8b05a:	4630      	mov	r0, r6
   8b05c:	f000 f832 	bl	8b0c4 <_malloc_r>
   8b060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b064:	b170      	cbz	r0, 8b084 <__smakebuf_r+0x54>
   8b066:	4916      	ldr	r1, [pc, #88]	; (8b0c0 <__smakebuf_r+0x90>)
   8b068:	9a00      	ldr	r2, [sp, #0]
   8b06a:	63f1      	str	r1, [r6, #60]	; 0x3c
   8b06c:	9901      	ldr	r1, [sp, #4]
   8b06e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8b072:	e9c4 0204 	strd	r0, r2, [r4, #16]
   8b076:	81a3      	strh	r3, [r4, #12]
   8b078:	6020      	str	r0, [r4, #0]
   8b07a:	b989      	cbnz	r1, 8b0a0 <__smakebuf_r+0x70>
   8b07c:	432b      	orrs	r3, r5
   8b07e:	81a3      	strh	r3, [r4, #12]
   8b080:	b002      	add	sp, #8
   8b082:	bd70      	pop	{r4, r5, r6, pc}
   8b084:	059a      	lsls	r2, r3, #22
   8b086:	d4df      	bmi.n	8b048 <__smakebuf_r+0x18>
   8b088:	2101      	movs	r1, #1
   8b08a:	f023 0303 	bic.w	r3, r3, #3
   8b08e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8b092:	f043 0302 	orr.w	r3, r3, #2
   8b096:	81a3      	strh	r3, [r4, #12]
   8b098:	6161      	str	r1, [r4, #20]
   8b09a:	6022      	str	r2, [r4, #0]
   8b09c:	6122      	str	r2, [r4, #16]
   8b09e:	e7d3      	b.n	8b048 <__smakebuf_r+0x18>
   8b0a0:	4630      	mov	r0, r6
   8b0a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b0a6:	f001 fc31 	bl	8c90c <_isatty_r>
   8b0aa:	b910      	cbnz	r0, 8b0b2 <__smakebuf_r+0x82>
   8b0ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b0b0:	e7e4      	b.n	8b07c <__smakebuf_r+0x4c>
   8b0b2:	89a2      	ldrh	r2, [r4, #12]
   8b0b4:	f022 0203 	bic.w	r2, r2, #3
   8b0b8:	f042 0201 	orr.w	r2, r2, #1
   8b0bc:	b213      	sxth	r3, r2
   8b0be:	e7dd      	b.n	8b07c <__smakebuf_r+0x4c>
   8b0c0:	0008a81d 	.word	0x0008a81d

0008b0c4 <_malloc_r>:
   8b0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b0c8:	f101 050b 	add.w	r5, r1, #11
   8b0cc:	2d16      	cmp	r5, #22
   8b0ce:	4606      	mov	r6, r0
   8b0d0:	b083      	sub	sp, #12
   8b0d2:	d824      	bhi.n	8b11e <_malloc_r+0x5a>
   8b0d4:	2910      	cmp	r1, #16
   8b0d6:	f200 80b6 	bhi.w	8b246 <_malloc_r+0x182>
   8b0da:	f000 fb61 	bl	8b7a0 <__malloc_lock>
   8b0de:	2510      	movs	r5, #16
   8b0e0:	2002      	movs	r0, #2
   8b0e2:	2318      	movs	r3, #24
   8b0e4:	f8df 84e8 	ldr.w	r8, [pc, #1256]	; 8b5d0 <_malloc_r+0x50c>
   8b0e8:	4443      	add	r3, r8
   8b0ea:	685c      	ldr	r4, [r3, #4]
   8b0ec:	f1a3 0208 	sub.w	r2, r3, #8
   8b0f0:	4294      	cmp	r4, r2
   8b0f2:	f000 80b4 	beq.w	8b25e <_malloc_r+0x19a>
   8b0f6:	6863      	ldr	r3, [r4, #4]
   8b0f8:	68e1      	ldr	r1, [r4, #12]
   8b0fa:	f023 0303 	bic.w	r3, r3, #3
   8b0fe:	4423      	add	r3, r4
   8b100:	685a      	ldr	r2, [r3, #4]
   8b102:	68a5      	ldr	r5, [r4, #8]
   8b104:	f042 0201 	orr.w	r2, r2, #1
   8b108:	60e9      	str	r1, [r5, #12]
   8b10a:	4630      	mov	r0, r6
   8b10c:	608d      	str	r5, [r1, #8]
   8b10e:	3408      	adds	r4, #8
   8b110:	605a      	str	r2, [r3, #4]
   8b112:	f000 fb4b 	bl	8b7ac <__malloc_unlock>
   8b116:	4620      	mov	r0, r4
   8b118:	b003      	add	sp, #12
   8b11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b11e:	f035 0507 	bics.w	r5, r5, #7
   8b122:	f100 8090 	bmi.w	8b246 <_malloc_r+0x182>
   8b126:	42a9      	cmp	r1, r5
   8b128:	f200 808d 	bhi.w	8b246 <_malloc_r+0x182>
   8b12c:	f000 fb38 	bl	8b7a0 <__malloc_lock>
   8b130:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8b134:	f0c0 8185 	bcc.w	8b442 <_malloc_r+0x37e>
   8b138:	0a6b      	lsrs	r3, r5, #9
   8b13a:	f000 808b 	beq.w	8b254 <_malloc_r+0x190>
   8b13e:	2b04      	cmp	r3, #4
   8b140:	f200 815b 	bhi.w	8b3fa <_malloc_r+0x336>
   8b144:	09ab      	lsrs	r3, r5, #6
   8b146:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8b14a:	f103 0738 	add.w	r7, r3, #56	; 0x38
   8b14e:	00c1      	lsls	r1, r0, #3
   8b150:	f8df 847c 	ldr.w	r8, [pc, #1148]	; 8b5d0 <_malloc_r+0x50c>
   8b154:	4441      	add	r1, r8
   8b156:	684c      	ldr	r4, [r1, #4]
   8b158:	3908      	subs	r1, #8
   8b15a:	42a1      	cmp	r1, r4
   8b15c:	d106      	bne.n	8b16c <_malloc_r+0xa8>
   8b15e:	e00c      	b.n	8b17a <_malloc_r+0xb6>
   8b160:	2a00      	cmp	r2, #0
   8b162:	f280 8122 	bge.w	8b3aa <_malloc_r+0x2e6>
   8b166:	68e4      	ldr	r4, [r4, #12]
   8b168:	42a1      	cmp	r1, r4
   8b16a:	d006      	beq.n	8b17a <_malloc_r+0xb6>
   8b16c:	6863      	ldr	r3, [r4, #4]
   8b16e:	f023 0303 	bic.w	r3, r3, #3
   8b172:	1b5a      	subs	r2, r3, r5
   8b174:	2a0f      	cmp	r2, #15
   8b176:	ddf3      	ble.n	8b160 <_malloc_r+0x9c>
   8b178:	4638      	mov	r0, r7
   8b17a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8b17e:	f8df c454 	ldr.w	ip, [pc, #1108]	; 8b5d4 <_malloc_r+0x510>
   8b182:	4564      	cmp	r4, ip
   8b184:	d077      	beq.n	8b276 <_malloc_r+0x1b2>
   8b186:	6862      	ldr	r2, [r4, #4]
   8b188:	f022 0203 	bic.w	r2, r2, #3
   8b18c:	1b53      	subs	r3, r2, r5
   8b18e:	2b0f      	cmp	r3, #15
   8b190:	f300 8165 	bgt.w	8b45e <_malloc_r+0x39a>
   8b194:	2b00      	cmp	r3, #0
   8b196:	e9c8 cc04 	strd	ip, ip, [r8, #16]
   8b19a:	f280 8156 	bge.w	8b44a <_malloc_r+0x386>
   8b19e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8b1a2:	f080 8106 	bcs.w	8b3b2 <_malloc_r+0x2ee>
   8b1a6:	2101      	movs	r1, #1
   8b1a8:	08d3      	lsrs	r3, r2, #3
   8b1aa:	0952      	lsrs	r2, r2, #5
   8b1ac:	440b      	add	r3, r1
   8b1ae:	fa01 f202 	lsl.w	r2, r1, r2
   8b1b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   8b1b6:	f858 7033 	ldr.w	r7, [r8, r3, lsl #3]
   8b1ba:	eb08 0ec3 	add.w	lr, r8, r3, lsl #3
   8b1be:	430a      	orrs	r2, r1
   8b1c0:	f1ae 0108 	sub.w	r1, lr, #8
   8b1c4:	e9c4 7102 	strd	r7, r1, [r4, #8]
   8b1c8:	f8c8 2004 	str.w	r2, [r8, #4]
   8b1cc:	f848 4033 	str.w	r4, [r8, r3, lsl #3]
   8b1d0:	60fc      	str	r4, [r7, #12]
   8b1d2:	2101      	movs	r1, #1
   8b1d4:	1083      	asrs	r3, r0, #2
   8b1d6:	4099      	lsls	r1, r3
   8b1d8:	4291      	cmp	r1, r2
   8b1da:	d853      	bhi.n	8b284 <_malloc_r+0x1c0>
   8b1dc:	4211      	tst	r1, r2
   8b1de:	d106      	bne.n	8b1ee <_malloc_r+0x12a>
   8b1e0:	f020 0003 	bic.w	r0, r0, #3
   8b1e4:	0049      	lsls	r1, r1, #1
   8b1e6:	4211      	tst	r1, r2
   8b1e8:	f100 0004 	add.w	r0, r0, #4
   8b1ec:	d0fa      	beq.n	8b1e4 <_malloc_r+0x120>
   8b1ee:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   8b1f2:	464c      	mov	r4, r9
   8b1f4:	4686      	mov	lr, r0
   8b1f6:	68e7      	ldr	r7, [r4, #12]
   8b1f8:	42bc      	cmp	r4, r7
   8b1fa:	d107      	bne.n	8b20c <_malloc_r+0x148>
   8b1fc:	e109      	b.n	8b412 <_malloc_r+0x34e>
   8b1fe:	2b00      	cmp	r3, #0
   8b200:	f280 8110 	bge.w	8b424 <_malloc_r+0x360>
   8b204:	68ff      	ldr	r7, [r7, #12]
   8b206:	42bc      	cmp	r4, r7
   8b208:	f000 8103 	beq.w	8b412 <_malloc_r+0x34e>
   8b20c:	687a      	ldr	r2, [r7, #4]
   8b20e:	f022 0203 	bic.w	r2, r2, #3
   8b212:	1b53      	subs	r3, r2, r5
   8b214:	2b0f      	cmp	r3, #15
   8b216:	ddf2      	ble.n	8b1fe <_malloc_r+0x13a>
   8b218:	f045 0e01 	orr.w	lr, r5, #1
   8b21c:	4630      	mov	r0, r6
   8b21e:	e9d7 4102 	ldrd	r4, r1, [r7, #8]
   8b222:	443d      	add	r5, r7
   8b224:	f043 0601 	orr.w	r6, r3, #1
   8b228:	f8c7 e004 	str.w	lr, [r7, #4]
   8b22c:	60e1      	str	r1, [r4, #12]
   8b22e:	608c      	str	r4, [r1, #8]
   8b230:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8b234:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8b238:	606e      	str	r6, [r5, #4]
   8b23a:	50bb      	str	r3, [r7, r2]
   8b23c:	f000 fab6 	bl	8b7ac <__malloc_unlock>
   8b240:	f107 0408 	add.w	r4, r7, #8
   8b244:	e002      	b.n	8b24c <_malloc_r+0x188>
   8b246:	230c      	movs	r3, #12
   8b248:	2400      	movs	r4, #0
   8b24a:	6033      	str	r3, [r6, #0]
   8b24c:	4620      	mov	r0, r4
   8b24e:	b003      	add	sp, #12
   8b250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b254:	f44f 7100 	mov.w	r1, #512	; 0x200
   8b258:	2040      	movs	r0, #64	; 0x40
   8b25a:	273f      	movs	r7, #63	; 0x3f
   8b25c:	e778      	b.n	8b150 <_malloc_r+0x8c>
   8b25e:	68dc      	ldr	r4, [r3, #12]
   8b260:	42a3      	cmp	r3, r4
   8b262:	bf08      	it	eq
   8b264:	3002      	addeq	r0, #2
   8b266:	f47f af46 	bne.w	8b0f6 <_malloc_r+0x32>
   8b26a:	f8d8 4010 	ldr.w	r4, [r8, #16]
   8b26e:	f8df c364 	ldr.w	ip, [pc, #868]	; 8b5d4 <_malloc_r+0x510>
   8b272:	4564      	cmp	r4, ip
   8b274:	d187      	bne.n	8b186 <_malloc_r+0xc2>
   8b276:	2101      	movs	r1, #1
   8b278:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8b27c:	1083      	asrs	r3, r0, #2
   8b27e:	4099      	lsls	r1, r3
   8b280:	4291      	cmp	r1, r2
   8b282:	d9ab      	bls.n	8b1dc <_malloc_r+0x118>
   8b284:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b288:	6867      	ldr	r7, [r4, #4]
   8b28a:	f027 0703 	bic.w	r7, r7, #3
   8b28e:	42bd      	cmp	r5, r7
   8b290:	d802      	bhi.n	8b298 <_malloc_r+0x1d4>
   8b292:	1b7b      	subs	r3, r7, r5
   8b294:	2b0f      	cmp	r3, #15
   8b296:	dc77      	bgt.n	8b388 <_malloc_r+0x2c4>
   8b298:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8b5d8 <_malloc_r+0x514>
   8b29c:	4bc8      	ldr	r3, [pc, #800]	; (8b5c0 <_malloc_r+0x4fc>)
   8b29e:	f8d9 2000 	ldr.w	r2, [r9]
   8b2a2:	681b      	ldr	r3, [r3, #0]
   8b2a4:	3201      	adds	r2, #1
   8b2a6:	442b      	add	r3, r5
   8b2a8:	eb04 0a07 	add.w	sl, r4, r7
   8b2ac:	f000 8124 	beq.w	8b4f8 <_malloc_r+0x434>
   8b2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8b2b4:	330f      	adds	r3, #15
   8b2b6:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   8b2ba:	f02b 0b0f 	bic.w	fp, fp, #15
   8b2be:	4659      	mov	r1, fp
   8b2c0:	4630      	mov	r0, r6
   8b2c2:	f001 f81d 	bl	8c300 <_sbrk_r>
   8b2c6:	1c41      	adds	r1, r0, #1
   8b2c8:	4602      	mov	r2, r0
   8b2ca:	f000 80e1 	beq.w	8b490 <_malloc_r+0x3cc>
   8b2ce:	4582      	cmp	sl, r0
   8b2d0:	f200 80dc 	bhi.w	8b48c <_malloc_r+0x3c8>
   8b2d4:	4bbb      	ldr	r3, [pc, #748]	; (8b5c4 <_malloc_r+0x500>)
   8b2d6:	6819      	ldr	r1, [r3, #0]
   8b2d8:	4459      	add	r1, fp
   8b2da:	4608      	mov	r0, r1
   8b2dc:	6019      	str	r1, [r3, #0]
   8b2de:	f000 8141 	beq.w	8b564 <_malloc_r+0x4a0>
   8b2e2:	f8d9 1000 	ldr.w	r1, [r9]
   8b2e6:	9301      	str	r3, [sp, #4]
   8b2e8:	3101      	adds	r1, #1
   8b2ea:	bf1b      	ittet	ne
   8b2ec:	eba2 0a0a 	subne.w	sl, r2, sl
   8b2f0:	4450      	addne	r0, sl
   8b2f2:	f8c9 2000 	streq.w	r2, [r9]
   8b2f6:	6018      	strne	r0, [r3, #0]
   8b2f8:	f012 0a07 	ands.w	sl, r2, #7
   8b2fc:	f000 810a 	beq.w	8b514 <_malloc_r+0x450>
   8b300:	f1ca 0108 	rsb	r1, sl, #8
   8b304:	440a      	add	r2, r1
   8b306:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
   8b30a:	4493      	add	fp, r2
   8b30c:	3108      	adds	r1, #8
   8b30e:	eba1 010b 	sub.w	r1, r1, fp
   8b312:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8b316:	4649      	mov	r1, r9
   8b318:	4630      	mov	r0, r6
   8b31a:	9200      	str	r2, [sp, #0]
   8b31c:	f000 fff0 	bl	8c300 <_sbrk_r>
   8b320:	1c42      	adds	r2, r0, #1
   8b322:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b326:	f000 8143 	beq.w	8b5b0 <_malloc_r+0x4ec>
   8b32a:	1a80      	subs	r0, r0, r2
   8b32c:	eb00 0b09 	add.w	fp, r0, r9
   8b330:	6819      	ldr	r1, [r3, #0]
   8b332:	f04b 0001 	orr.w	r0, fp, #1
   8b336:	4449      	add	r1, r9
   8b338:	4544      	cmp	r4, r8
   8b33a:	f8c8 2008 	str.w	r2, [r8, #8]
   8b33e:	6019      	str	r1, [r3, #0]
   8b340:	6050      	str	r0, [r2, #4]
   8b342:	f000 811c 	beq.w	8b57e <_malloc_r+0x4ba>
   8b346:	2f0f      	cmp	r7, #15
   8b348:	f240 811b 	bls.w	8b582 <_malloc_r+0x4be>
   8b34c:	f04f 0c05 	mov.w	ip, #5
   8b350:	6860      	ldr	r0, [r4, #4]
   8b352:	3f0c      	subs	r7, #12
   8b354:	f027 0707 	bic.w	r7, r7, #7
   8b358:	f000 0001 	and.w	r0, r0, #1
   8b35c:	4338      	orrs	r0, r7
   8b35e:	eb04 0e07 	add.w	lr, r4, r7
   8b362:	2f0f      	cmp	r7, #15
   8b364:	6060      	str	r0, [r4, #4]
   8b366:	e9ce cc01 	strd	ip, ip, [lr, #4]
   8b36a:	f200 8137 	bhi.w	8b5dc <_malloc_r+0x518>
   8b36e:	4614      	mov	r4, r2
   8b370:	6850      	ldr	r0, [r2, #4]
   8b372:	4b95      	ldr	r3, [pc, #596]	; (8b5c8 <_malloc_r+0x504>)
   8b374:	681a      	ldr	r2, [r3, #0]
   8b376:	428a      	cmp	r2, r1
   8b378:	bf38      	it	cc
   8b37a:	6019      	strcc	r1, [r3, #0]
   8b37c:	4b93      	ldr	r3, [pc, #588]	; (8b5cc <_malloc_r+0x508>)
   8b37e:	681a      	ldr	r2, [r3, #0]
   8b380:	428a      	cmp	r2, r1
   8b382:	bf38      	it	cc
   8b384:	6019      	strcc	r1, [r3, #0]
   8b386:	e086      	b.n	8b496 <_malloc_r+0x3d2>
   8b388:	f045 0201 	orr.w	r2, r5, #1
   8b38c:	f043 0301 	orr.w	r3, r3, #1
   8b390:	4425      	add	r5, r4
   8b392:	6062      	str	r2, [r4, #4]
   8b394:	4630      	mov	r0, r6
   8b396:	f8c8 5008 	str.w	r5, [r8, #8]
   8b39a:	3408      	adds	r4, #8
   8b39c:	606b      	str	r3, [r5, #4]
   8b39e:	f000 fa05 	bl	8b7ac <__malloc_unlock>
   8b3a2:	4620      	mov	r0, r4
   8b3a4:	b003      	add	sp, #12
   8b3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b3aa:	4423      	add	r3, r4
   8b3ac:	685a      	ldr	r2, [r3, #4]
   8b3ae:	68e1      	ldr	r1, [r4, #12]
   8b3b0:	e6a7      	b.n	8b102 <_malloc_r+0x3e>
   8b3b2:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8b3b6:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8b3ba:	d361      	bcc.n	8b480 <_malloc_r+0x3bc>
   8b3bc:	2b14      	cmp	r3, #20
   8b3be:	f200 80ba 	bhi.w	8b536 <_malloc_r+0x472>
   8b3c2:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8b3c6:	00c9      	lsls	r1, r1, #3
   8b3c8:	335b      	adds	r3, #91	; 0x5b
   8b3ca:	eb08 0701 	add.w	r7, r8, r1
   8b3ce:	f858 1001 	ldr.w	r1, [r8, r1]
   8b3d2:	3f08      	subs	r7, #8
   8b3d4:	428f      	cmp	r7, r1
   8b3d6:	f000 8092 	beq.w	8b4fe <_malloc_r+0x43a>
   8b3da:	684b      	ldr	r3, [r1, #4]
   8b3dc:	f023 0303 	bic.w	r3, r3, #3
   8b3e0:	4293      	cmp	r3, r2
   8b3e2:	d902      	bls.n	8b3ea <_malloc_r+0x326>
   8b3e4:	6889      	ldr	r1, [r1, #8]
   8b3e6:	428f      	cmp	r7, r1
   8b3e8:	d1f7      	bne.n	8b3da <_malloc_r+0x316>
   8b3ea:	68cf      	ldr	r7, [r1, #12]
   8b3ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8b3f0:	e9c4 1702 	strd	r1, r7, [r4, #8]
   8b3f4:	60bc      	str	r4, [r7, #8]
   8b3f6:	60cc      	str	r4, [r1, #12]
   8b3f8:	e6eb      	b.n	8b1d2 <_malloc_r+0x10e>
   8b3fa:	2b14      	cmp	r3, #20
   8b3fc:	d959      	bls.n	8b4b2 <_malloc_r+0x3ee>
   8b3fe:	2b54      	cmp	r3, #84	; 0x54
   8b400:	f200 80a1 	bhi.w	8b546 <_malloc_r+0x482>
   8b404:	0b2b      	lsrs	r3, r5, #12
   8b406:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8b40a:	f103 076e 	add.w	r7, r3, #110	; 0x6e
   8b40e:	00c1      	lsls	r1, r0, #3
   8b410:	e69e      	b.n	8b150 <_malloc_r+0x8c>
   8b412:	f10e 0e01 	add.w	lr, lr, #1
   8b416:	f01e 0f03 	tst.w	lr, #3
   8b41a:	f104 0408 	add.w	r4, r4, #8
   8b41e:	f47f aeea 	bne.w	8b1f6 <_malloc_r+0x132>
   8b422:	e051      	b.n	8b4c8 <_malloc_r+0x404>
   8b424:	463c      	mov	r4, r7
   8b426:	443a      	add	r2, r7
   8b428:	6853      	ldr	r3, [r2, #4]
   8b42a:	68f9      	ldr	r1, [r7, #12]
   8b42c:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8b430:	f043 0301 	orr.w	r3, r3, #1
   8b434:	6053      	str	r3, [r2, #4]
   8b436:	4630      	mov	r0, r6
   8b438:	60e9      	str	r1, [r5, #12]
   8b43a:	608d      	str	r5, [r1, #8]
   8b43c:	f000 f9b6 	bl	8b7ac <__malloc_unlock>
   8b440:	e704      	b.n	8b24c <_malloc_r+0x188>
   8b442:	08e8      	lsrs	r0, r5, #3
   8b444:	f105 0308 	add.w	r3, r5, #8
   8b448:	e64c      	b.n	8b0e4 <_malloc_r+0x20>
   8b44a:	4422      	add	r2, r4
   8b44c:	6853      	ldr	r3, [r2, #4]
   8b44e:	4630      	mov	r0, r6
   8b450:	f043 0301 	orr.w	r3, r3, #1
   8b454:	6053      	str	r3, [r2, #4]
   8b456:	3408      	adds	r4, #8
   8b458:	f000 f9a8 	bl	8b7ac <__malloc_unlock>
   8b45c:	e6f6      	b.n	8b24c <_malloc_r+0x188>
   8b45e:	f045 0701 	orr.w	r7, r5, #1
   8b462:	f043 0101 	orr.w	r1, r3, #1
   8b466:	4425      	add	r5, r4
   8b468:	6067      	str	r7, [r4, #4]
   8b46a:	4630      	mov	r0, r6
   8b46c:	e9c8 5504 	strd	r5, r5, [r8, #16]
   8b470:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   8b474:	6069      	str	r1, [r5, #4]
   8b476:	50a3      	str	r3, [r4, r2]
   8b478:	f000 f998 	bl	8b7ac <__malloc_unlock>
   8b47c:	3408      	adds	r4, #8
   8b47e:	e6e5      	b.n	8b24c <_malloc_r+0x188>
   8b480:	0993      	lsrs	r3, r2, #6
   8b482:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8b486:	00c9      	lsls	r1, r1, #3
   8b488:	3338      	adds	r3, #56	; 0x38
   8b48a:	e79e      	b.n	8b3ca <_malloc_r+0x306>
   8b48c:	4544      	cmp	r4, r8
   8b48e:	d064      	beq.n	8b55a <_malloc_r+0x496>
   8b490:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b494:	6860      	ldr	r0, [r4, #4]
   8b496:	f020 0b03 	bic.w	fp, r0, #3
   8b49a:	455d      	cmp	r5, fp
   8b49c:	ebab 0305 	sub.w	r3, fp, r5
   8b4a0:	d802      	bhi.n	8b4a8 <_malloc_r+0x3e4>
   8b4a2:	2b0f      	cmp	r3, #15
   8b4a4:	f73f af70 	bgt.w	8b388 <_malloc_r+0x2c4>
   8b4a8:	4630      	mov	r0, r6
   8b4aa:	f000 f97f 	bl	8b7ac <__malloc_unlock>
   8b4ae:	2400      	movs	r4, #0
   8b4b0:	e6cc      	b.n	8b24c <_malloc_r+0x188>
   8b4b2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8b4b6:	f103 075b 	add.w	r7, r3, #91	; 0x5b
   8b4ba:	00c1      	lsls	r1, r0, #3
   8b4bc:	e648      	b.n	8b150 <_malloc_r+0x8c>
   8b4be:	f859 3908 	ldr.w	r3, [r9], #-8
   8b4c2:	454b      	cmp	r3, r9
   8b4c4:	f040 80a9 	bne.w	8b61a <_malloc_r+0x556>
   8b4c8:	f010 0f03 	tst.w	r0, #3
   8b4cc:	f100 30ff 	add.w	r0, r0, #4294967295
   8b4d0:	d1f5      	bne.n	8b4be <_malloc_r+0x3fa>
   8b4d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8b4d6:	ea23 0301 	bic.w	r3, r3, r1
   8b4da:	f8c8 3004 	str.w	r3, [r8, #4]
   8b4de:	0049      	lsls	r1, r1, #1
   8b4e0:	4299      	cmp	r1, r3
   8b4e2:	f63f aecf 	bhi.w	8b284 <_malloc_r+0x1c0>
   8b4e6:	b919      	cbnz	r1, 8b4f0 <_malloc_r+0x42c>
   8b4e8:	e6cc      	b.n	8b284 <_malloc_r+0x1c0>
   8b4ea:	0049      	lsls	r1, r1, #1
   8b4ec:	f10e 0e04 	add.w	lr, lr, #4
   8b4f0:	4219      	tst	r1, r3
   8b4f2:	d0fa      	beq.n	8b4ea <_malloc_r+0x426>
   8b4f4:	4670      	mov	r0, lr
   8b4f6:	e67a      	b.n	8b1ee <_malloc_r+0x12a>
   8b4f8:	f103 0b10 	add.w	fp, r3, #16
   8b4fc:	e6df      	b.n	8b2be <_malloc_r+0x1fa>
   8b4fe:	f04f 0e01 	mov.w	lr, #1
   8b502:	109a      	asrs	r2, r3, #2
   8b504:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8b508:	fa0e f202 	lsl.w	r2, lr, r2
   8b50c:	431a      	orrs	r2, r3
   8b50e:	f8c8 2004 	str.w	r2, [r8, #4]
   8b512:	e76d      	b.n	8b3f0 <_malloc_r+0x32c>
   8b514:	eb02 010b 	add.w	r1, r2, fp
   8b518:	4249      	negs	r1, r1
   8b51a:	f3c1 090b 	ubfx	r9, r1, #0, #12
   8b51e:	4649      	mov	r1, r9
   8b520:	4630      	mov	r0, r6
   8b522:	9200      	str	r2, [sp, #0]
   8b524:	f000 feec 	bl	8c300 <_sbrk_r>
   8b528:	1c43      	adds	r3, r0, #1
   8b52a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b52e:	f47f aefc 	bne.w	8b32a <_malloc_r+0x266>
   8b532:	46d1      	mov	r9, sl
   8b534:	e6fc      	b.n	8b330 <_malloc_r+0x26c>
   8b536:	2b54      	cmp	r3, #84	; 0x54
   8b538:	d826      	bhi.n	8b588 <_malloc_r+0x4c4>
   8b53a:	0b13      	lsrs	r3, r2, #12
   8b53c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8b540:	00c9      	lsls	r1, r1, #3
   8b542:	336e      	adds	r3, #110	; 0x6e
   8b544:	e741      	b.n	8b3ca <_malloc_r+0x306>
   8b546:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b54a:	d826      	bhi.n	8b59a <_malloc_r+0x4d6>
   8b54c:	0beb      	lsrs	r3, r5, #15
   8b54e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8b552:	f103 0777 	add.w	r7, r3, #119	; 0x77
   8b556:	00c1      	lsls	r1, r0, #3
   8b558:	e5fa      	b.n	8b150 <_malloc_r+0x8c>
   8b55a:	4b1a      	ldr	r3, [pc, #104]	; (8b5c4 <_malloc_r+0x500>)
   8b55c:	6818      	ldr	r0, [r3, #0]
   8b55e:	4458      	add	r0, fp
   8b560:	6018      	str	r0, [r3, #0]
   8b562:	e6be      	b.n	8b2e2 <_malloc_r+0x21e>
   8b564:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8b568:	f1bc 0f00 	cmp.w	ip, #0
   8b56c:	f47f aeb9 	bne.w	8b2e2 <_malloc_r+0x21e>
   8b570:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b574:	44bb      	add	fp, r7
   8b576:	f04b 0001 	orr.w	r0, fp, #1
   8b57a:	6060      	str	r0, [r4, #4]
   8b57c:	e6f9      	b.n	8b372 <_malloc_r+0x2ae>
   8b57e:	4614      	mov	r4, r2
   8b580:	e6f7      	b.n	8b372 <_malloc_r+0x2ae>
   8b582:	2301      	movs	r3, #1
   8b584:	6053      	str	r3, [r2, #4]
   8b586:	e78f      	b.n	8b4a8 <_malloc_r+0x3e4>
   8b588:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b58c:	d832      	bhi.n	8b5f4 <_malloc_r+0x530>
   8b58e:	0bd3      	lsrs	r3, r2, #15
   8b590:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8b594:	00c9      	lsls	r1, r1, #3
   8b596:	3377      	adds	r3, #119	; 0x77
   8b598:	e717      	b.n	8b3ca <_malloc_r+0x306>
   8b59a:	f240 5254 	movw	r2, #1364	; 0x554
   8b59e:	4293      	cmp	r3, r2
   8b5a0:	d832      	bhi.n	8b608 <_malloc_r+0x544>
   8b5a2:	0cab      	lsrs	r3, r5, #18
   8b5a4:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8b5a8:	f103 077c 	add.w	r7, r3, #124	; 0x7c
   8b5ac:	00c1      	lsls	r1, r0, #3
   8b5ae:	e5cf      	b.n	8b150 <_malloc_r+0x8c>
   8b5b0:	f1aa 0a08 	sub.w	sl, sl, #8
   8b5b4:	44d3      	add	fp, sl
   8b5b6:	f04f 0900 	mov.w	r9, #0
   8b5ba:	ebab 0b02 	sub.w	fp, fp, r2
   8b5be:	e6b7      	b.n	8b330 <_malloc_r+0x26c>
   8b5c0:	200013b8 	.word	0x200013b8
   8b5c4:	20001388 	.word	0x20001388
   8b5c8:	200013b0 	.word	0x200013b0
   8b5cc:	200013b4 	.word	0x200013b4
   8b5d0:	200009e0 	.word	0x200009e0
   8b5d4:	200009e8 	.word	0x200009e8
   8b5d8:	20000de8 	.word	0x20000de8
   8b5dc:	f104 0108 	add.w	r1, r4, #8
   8b5e0:	4630      	mov	r0, r6
   8b5e2:	9300      	str	r3, [sp, #0]
   8b5e4:	f7ff fa44 	bl	8aa70 <_free_r>
   8b5e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   8b5ec:	9b00      	ldr	r3, [sp, #0]
   8b5ee:	6860      	ldr	r0, [r4, #4]
   8b5f0:	6819      	ldr	r1, [r3, #0]
   8b5f2:	e6be      	b.n	8b372 <_malloc_r+0x2ae>
   8b5f4:	f240 5154 	movw	r1, #1364	; 0x554
   8b5f8:	428b      	cmp	r3, r1
   8b5fa:	d80a      	bhi.n	8b612 <_malloc_r+0x54e>
   8b5fc:	0c93      	lsrs	r3, r2, #18
   8b5fe:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8b602:	00c9      	lsls	r1, r1, #3
   8b604:	337c      	adds	r3, #124	; 0x7c
   8b606:	e6e0      	b.n	8b3ca <_malloc_r+0x306>
   8b608:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b60c:	207f      	movs	r0, #127	; 0x7f
   8b60e:	277e      	movs	r7, #126	; 0x7e
   8b610:	e59e      	b.n	8b150 <_malloc_r+0x8c>
   8b612:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b616:	237e      	movs	r3, #126	; 0x7e
   8b618:	e6d7      	b.n	8b3ca <_malloc_r+0x306>
   8b61a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   8b61e:	e75e      	b.n	8b4de <_malloc_r+0x41a>

0008b620 <__ascii_mbtowc>:
   8b620:	b082      	sub	sp, #8
   8b622:	b149      	cbz	r1, 8b638 <__ascii_mbtowc+0x18>
   8b624:	b15a      	cbz	r2, 8b63e <__ascii_mbtowc+0x1e>
   8b626:	b16b      	cbz	r3, 8b644 <__ascii_mbtowc+0x24>
   8b628:	7813      	ldrb	r3, [r2, #0]
   8b62a:	600b      	str	r3, [r1, #0]
   8b62c:	7812      	ldrb	r2, [r2, #0]
   8b62e:	1e10      	subs	r0, r2, #0
   8b630:	bf18      	it	ne
   8b632:	2001      	movne	r0, #1
   8b634:	b002      	add	sp, #8
   8b636:	4770      	bx	lr
   8b638:	a901      	add	r1, sp, #4
   8b63a:	2a00      	cmp	r2, #0
   8b63c:	d1f3      	bne.n	8b626 <__ascii_mbtowc+0x6>
   8b63e:	4610      	mov	r0, r2
   8b640:	b002      	add	sp, #8
   8b642:	4770      	bx	lr
   8b644:	f06f 0001 	mvn.w	r0, #1
   8b648:	e7f4      	b.n	8b634 <__ascii_mbtowc+0x14>
   8b64a:	bf00      	nop

0008b64c <memchr>:
   8b64c:	b470      	push	{r4, r5, r6}
   8b64e:	0784      	lsls	r4, r0, #30
   8b650:	b2cd      	uxtb	r5, r1
   8b652:	d012      	beq.n	8b67a <memchr+0x2e>
   8b654:	4603      	mov	r3, r0
   8b656:	1e54      	subs	r4, r2, #1
   8b658:	b92a      	cbnz	r2, 8b666 <memchr+0x1a>
   8b65a:	e00b      	b.n	8b674 <memchr+0x28>
   8b65c:	079a      	lsls	r2, r3, #30
   8b65e:	4618      	mov	r0, r3
   8b660:	d00c      	beq.n	8b67c <memchr+0x30>
   8b662:	3c01      	subs	r4, #1
   8b664:	d306      	bcc.n	8b674 <memchr+0x28>
   8b666:	4618      	mov	r0, r3
   8b668:	f813 2b01 	ldrb.w	r2, [r3], #1
   8b66c:	42aa      	cmp	r2, r5
   8b66e:	d1f5      	bne.n	8b65c <memchr+0x10>
   8b670:	bc70      	pop	{r4, r5, r6}
   8b672:	4770      	bx	lr
   8b674:	2000      	movs	r0, #0
   8b676:	bc70      	pop	{r4, r5, r6}
   8b678:	4770      	bx	lr
   8b67a:	4614      	mov	r4, r2
   8b67c:	2c03      	cmp	r4, #3
   8b67e:	d80d      	bhi.n	8b69c <memchr+0x50>
   8b680:	2c00      	cmp	r4, #0
   8b682:	d0f7      	beq.n	8b674 <memchr+0x28>
   8b684:	4602      	mov	r2, r0
   8b686:	1903      	adds	r3, r0, r4
   8b688:	e001      	b.n	8b68e <memchr+0x42>
   8b68a:	429a      	cmp	r2, r3
   8b68c:	d0f2      	beq.n	8b674 <memchr+0x28>
   8b68e:	4610      	mov	r0, r2
   8b690:	f812 1b01 	ldrb.w	r1, [r2], #1
   8b694:	42a9      	cmp	r1, r5
   8b696:	d1f8      	bne.n	8b68a <memchr+0x3e>
   8b698:	bc70      	pop	{r4, r5, r6}
   8b69a:	4770      	bx	lr
   8b69c:	4606      	mov	r6, r0
   8b69e:	020a      	lsls	r2, r1, #8
   8b6a0:	b292      	uxth	r2, r2
   8b6a2:	432a      	orrs	r2, r5
   8b6a4:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   8b6a8:	6833      	ldr	r3, [r6, #0]
   8b6aa:	4630      	mov	r0, r6
   8b6ac:	4053      	eors	r3, r2
   8b6ae:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   8b6b2:	ea21 0303 	bic.w	r3, r1, r3
   8b6b6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8b6ba:	f106 0604 	add.w	r6, r6, #4
   8b6be:	d1e1      	bne.n	8b684 <memchr+0x38>
   8b6c0:	3c04      	subs	r4, #4
   8b6c2:	2c03      	cmp	r4, #3
   8b6c4:	4630      	mov	r0, r6
   8b6c6:	d8ef      	bhi.n	8b6a8 <memchr+0x5c>
   8b6c8:	e7da      	b.n	8b680 <memchr+0x34>
   8b6ca:	bf00      	nop

0008b6cc <memmove>:
   8b6cc:	4288      	cmp	r0, r1
   8b6ce:	b4f0      	push	{r4, r5, r6, r7}
   8b6d0:	d90d      	bls.n	8b6ee <memmove+0x22>
   8b6d2:	188b      	adds	r3, r1, r2
   8b6d4:	4283      	cmp	r3, r0
   8b6d6:	d90a      	bls.n	8b6ee <memmove+0x22>
   8b6d8:	1884      	adds	r4, r0, r2
   8b6da:	b132      	cbz	r2, 8b6ea <memmove+0x1e>
   8b6dc:	4622      	mov	r2, r4
   8b6de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8b6e2:	4299      	cmp	r1, r3
   8b6e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8b6e8:	d1f9      	bne.n	8b6de <memmove+0x12>
   8b6ea:	bcf0      	pop	{r4, r5, r6, r7}
   8b6ec:	4770      	bx	lr
   8b6ee:	2a0f      	cmp	r2, #15
   8b6f0:	d80e      	bhi.n	8b710 <memmove+0x44>
   8b6f2:	4603      	mov	r3, r0
   8b6f4:	1e54      	subs	r4, r2, #1
   8b6f6:	2a00      	cmp	r2, #0
   8b6f8:	d0f7      	beq.n	8b6ea <memmove+0x1e>
   8b6fa:	3401      	adds	r4, #1
   8b6fc:	440c      	add	r4, r1
   8b6fe:	3b01      	subs	r3, #1
   8b700:	f811 2b01 	ldrb.w	r2, [r1], #1
   8b704:	42a1      	cmp	r1, r4
   8b706:	f803 2f01 	strb.w	r2, [r3, #1]!
   8b70a:	d1f9      	bne.n	8b700 <memmove+0x34>
   8b70c:	bcf0      	pop	{r4, r5, r6, r7}
   8b70e:	4770      	bx	lr
   8b710:	ea40 0301 	orr.w	r3, r0, r1
   8b714:	079b      	lsls	r3, r3, #30
   8b716:	d13e      	bne.n	8b796 <memmove+0xca>
   8b718:	f1a2 0310 	sub.w	r3, r2, #16
   8b71c:	f023 040f 	bic.w	r4, r3, #15
   8b720:	f101 0720 	add.w	r7, r1, #32
   8b724:	4427      	add	r7, r4
   8b726:	091b      	lsrs	r3, r3, #4
   8b728:	f101 0410 	add.w	r4, r1, #16
   8b72c:	f100 0510 	add.w	r5, r0, #16
   8b730:	f854 6c10 	ldr.w	r6, [r4, #-16]
   8b734:	3410      	adds	r4, #16
   8b736:	f845 6c10 	str.w	r6, [r5, #-16]
   8b73a:	f854 6c1c 	ldr.w	r6, [r4, #-28]
   8b73e:	3510      	adds	r5, #16
   8b740:	f845 6c1c 	str.w	r6, [r5, #-28]
   8b744:	f854 6c18 	ldr.w	r6, [r4, #-24]
   8b748:	f845 6c18 	str.w	r6, [r5, #-24]
   8b74c:	f854 6c14 	ldr.w	r6, [r4, #-20]
   8b750:	42bc      	cmp	r4, r7
   8b752:	f845 6c14 	str.w	r6, [r5, #-20]
   8b756:	d1eb      	bne.n	8b730 <memmove+0x64>
   8b758:	3301      	adds	r3, #1
   8b75a:	f012 0f0c 	tst.w	r2, #12
   8b75e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8b762:	f002 040f 	and.w	r4, r2, #15
   8b766:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8b76a:	d017      	beq.n	8b79c <memmove+0xd0>
   8b76c:	460e      	mov	r6, r1
   8b76e:	3c04      	subs	r4, #4
   8b770:	f024 0c03 	bic.w	ip, r4, #3
   8b774:	08a5      	lsrs	r5, r4, #2
   8b776:	449c      	add	ip, r3
   8b778:	1f1c      	subs	r4, r3, #4
   8b77a:	f856 7b04 	ldr.w	r7, [r6], #4
   8b77e:	f844 7f04 	str.w	r7, [r4, #4]!
   8b782:	4564      	cmp	r4, ip
   8b784:	d1f9      	bne.n	8b77a <memmove+0xae>
   8b786:	1c6c      	adds	r4, r5, #1
   8b788:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8b78c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8b790:	f002 0203 	and.w	r2, r2, #3
   8b794:	e7ae      	b.n	8b6f4 <memmove+0x28>
   8b796:	4603      	mov	r3, r0
   8b798:	1e54      	subs	r4, r2, #1
   8b79a:	e7ae      	b.n	8b6fa <memmove+0x2e>
   8b79c:	4622      	mov	r2, r4
   8b79e:	e7a9      	b.n	8b6f4 <memmove+0x28>

0008b7a0 <__malloc_lock>:
   8b7a0:	4801      	ldr	r0, [pc, #4]	; (8b7a8 <__malloc_lock+0x8>)
   8b7a2:	f7ff bc13 	b.w	8afcc <__retarget_lock_acquire_recursive>
   8b7a6:	bf00      	nop
   8b7a8:	20001858 	.word	0x20001858

0008b7ac <__malloc_unlock>:
   8b7ac:	4801      	ldr	r0, [pc, #4]	; (8b7b4 <__malloc_unlock+0x8>)
   8b7ae:	f7ff bc0f 	b.w	8afd0 <__retarget_lock_release_recursive>
   8b7b2:	bf00      	nop
   8b7b4:	20001858 	.word	0x20001858

0008b7b8 <_Balloc>:
   8b7b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b7ba:	b570      	push	{r4, r5, r6, lr}
   8b7bc:	4605      	mov	r5, r0
   8b7be:	460c      	mov	r4, r1
   8b7c0:	b14b      	cbz	r3, 8b7d6 <_Balloc+0x1e>
   8b7c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8b7c6:	b180      	cbz	r0, 8b7ea <_Balloc+0x32>
   8b7c8:	6802      	ldr	r2, [r0, #0]
   8b7ca:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8b7ce:	2300      	movs	r3, #0
   8b7d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8b7d4:	bd70      	pop	{r4, r5, r6, pc}
   8b7d6:	2221      	movs	r2, #33	; 0x21
   8b7d8:	2104      	movs	r1, #4
   8b7da:	f000 ffc5 	bl	8c768 <_calloc_r>
   8b7de:	4603      	mov	r3, r0
   8b7e0:	64e8      	str	r0, [r5, #76]	; 0x4c
   8b7e2:	2800      	cmp	r0, #0
   8b7e4:	d1ed      	bne.n	8b7c2 <_Balloc+0xa>
   8b7e6:	2000      	movs	r0, #0
   8b7e8:	bd70      	pop	{r4, r5, r6, pc}
   8b7ea:	2101      	movs	r1, #1
   8b7ec:	fa01 f604 	lsl.w	r6, r1, r4
   8b7f0:	1d72      	adds	r2, r6, #5
   8b7f2:	4628      	mov	r0, r5
   8b7f4:	0092      	lsls	r2, r2, #2
   8b7f6:	f000 ffb7 	bl	8c768 <_calloc_r>
   8b7fa:	2800      	cmp	r0, #0
   8b7fc:	d0f3      	beq.n	8b7e6 <_Balloc+0x2e>
   8b7fe:	e9c0 4601 	strd	r4, r6, [r0, #4]
   8b802:	e7e4      	b.n	8b7ce <_Balloc+0x16>

0008b804 <_Bfree>:
   8b804:	b131      	cbz	r1, 8b814 <_Bfree+0x10>
   8b806:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b808:	684a      	ldr	r2, [r1, #4]
   8b80a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8b80e:	6008      	str	r0, [r1, #0]
   8b810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8b814:	4770      	bx	lr
   8b816:	bf00      	nop

0008b818 <__multadd>:
   8b818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b81c:	4680      	mov	r8, r0
   8b81e:	461c      	mov	r4, r3
   8b820:	2000      	movs	r0, #0
   8b822:	460f      	mov	r7, r1
   8b824:	690e      	ldr	r6, [r1, #16]
   8b826:	3114      	adds	r1, #20
   8b828:	680d      	ldr	r5, [r1, #0]
   8b82a:	3001      	adds	r0, #1
   8b82c:	b2ab      	uxth	r3, r5
   8b82e:	fb02 4303 	mla	r3, r2, r3, r4
   8b832:	0c2c      	lsrs	r4, r5, #16
   8b834:	0c1d      	lsrs	r5, r3, #16
   8b836:	fb02 5404 	mla	r4, r2, r4, r5
   8b83a:	b29b      	uxth	r3, r3
   8b83c:	eb03 4304 	add.w	r3, r3, r4, lsl #16
   8b840:	4286      	cmp	r6, r0
   8b842:	f841 3b04 	str.w	r3, [r1], #4
   8b846:	ea4f 4414 	mov.w	r4, r4, lsr #16
   8b84a:	dced      	bgt.n	8b828 <__multadd+0x10>
   8b84c:	b13c      	cbz	r4, 8b85e <__multadd+0x46>
   8b84e:	68bb      	ldr	r3, [r7, #8]
   8b850:	42b3      	cmp	r3, r6
   8b852:	dd07      	ble.n	8b864 <__multadd+0x4c>
   8b854:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b858:	3601      	adds	r6, #1
   8b85a:	615c      	str	r4, [r3, #20]
   8b85c:	613e      	str	r6, [r7, #16]
   8b85e:	4638      	mov	r0, r7
   8b860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b864:	6879      	ldr	r1, [r7, #4]
   8b866:	4640      	mov	r0, r8
   8b868:	3101      	adds	r1, #1
   8b86a:	f7ff ffa5 	bl	8b7b8 <_Balloc>
   8b86e:	4605      	mov	r5, r0
   8b870:	b1b0      	cbz	r0, 8b8a0 <__multadd+0x88>
   8b872:	693a      	ldr	r2, [r7, #16]
   8b874:	f107 010c 	add.w	r1, r7, #12
   8b878:	3202      	adds	r2, #2
   8b87a:	0092      	lsls	r2, r2, #2
   8b87c:	300c      	adds	r0, #12
   8b87e:	f7fb f8cb 	bl	86a18 <memcpy>
   8b882:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8b886:	687a      	ldr	r2, [r7, #4]
   8b888:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b88c:	6039      	str	r1, [r7, #0]
   8b88e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8b892:	462f      	mov	r7, r5
   8b894:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   8b898:	3601      	adds	r6, #1
   8b89a:	615c      	str	r4, [r3, #20]
   8b89c:	613e      	str	r6, [r7, #16]
   8b89e:	e7de      	b.n	8b85e <__multadd+0x46>
   8b8a0:	4602      	mov	r2, r0
   8b8a2:	21b5      	movs	r1, #181	; 0xb5
   8b8a4:	4b01      	ldr	r3, [pc, #4]	; (8b8ac <__multadd+0x94>)
   8b8a6:	4802      	ldr	r0, [pc, #8]	; (8b8b0 <__multadd+0x98>)
   8b8a8:	f000 ff40 	bl	8c72c <__assert_func>
   8b8ac:	0008d4b0 	.word	0x0008d4b0
   8b8b0:	0008d550 	.word	0x0008d550

0008b8b4 <__hi0bits>:
   8b8b4:	0c02      	lsrs	r2, r0, #16
   8b8b6:	0412      	lsls	r2, r2, #16
   8b8b8:	4603      	mov	r3, r0
   8b8ba:	b9ca      	cbnz	r2, 8b8f0 <__hi0bits+0x3c>
   8b8bc:	0403      	lsls	r3, r0, #16
   8b8be:	2010      	movs	r0, #16
   8b8c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b8c4:	bf04      	itt	eq
   8b8c6:	021b      	lsleq	r3, r3, #8
   8b8c8:	3008      	addeq	r0, #8
   8b8ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b8ce:	bf04      	itt	eq
   8b8d0:	011b      	lsleq	r3, r3, #4
   8b8d2:	3004      	addeq	r0, #4
   8b8d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b8d8:	bf04      	itt	eq
   8b8da:	009b      	lsleq	r3, r3, #2
   8b8dc:	3002      	addeq	r0, #2
   8b8de:	2b00      	cmp	r3, #0
   8b8e0:	db05      	blt.n	8b8ee <__hi0bits+0x3a>
   8b8e2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8b8e6:	f100 0001 	add.w	r0, r0, #1
   8b8ea:	bf08      	it	eq
   8b8ec:	2020      	moveq	r0, #32
   8b8ee:	4770      	bx	lr
   8b8f0:	2000      	movs	r0, #0
   8b8f2:	e7e5      	b.n	8b8c0 <__hi0bits+0xc>

0008b8f4 <__lo0bits>:
   8b8f4:	6803      	ldr	r3, [r0, #0]
   8b8f6:	4601      	mov	r1, r0
   8b8f8:	f013 0207 	ands.w	r2, r3, #7
   8b8fc:	d007      	beq.n	8b90e <__lo0bits+0x1a>
   8b8fe:	07da      	lsls	r2, r3, #31
   8b900:	d420      	bmi.n	8b944 <__lo0bits+0x50>
   8b902:	0798      	lsls	r0, r3, #30
   8b904:	d522      	bpl.n	8b94c <__lo0bits+0x58>
   8b906:	085b      	lsrs	r3, r3, #1
   8b908:	2001      	movs	r0, #1
   8b90a:	600b      	str	r3, [r1, #0]
   8b90c:	4770      	bx	lr
   8b90e:	b298      	uxth	r0, r3
   8b910:	b1a8      	cbz	r0, 8b93e <__lo0bits+0x4a>
   8b912:	4610      	mov	r0, r2
   8b914:	f013 0fff 	tst.w	r3, #255	; 0xff
   8b918:	bf04      	itt	eq
   8b91a:	0a1b      	lsreq	r3, r3, #8
   8b91c:	3008      	addeq	r0, #8
   8b91e:	071a      	lsls	r2, r3, #28
   8b920:	bf04      	itt	eq
   8b922:	091b      	lsreq	r3, r3, #4
   8b924:	3004      	addeq	r0, #4
   8b926:	079a      	lsls	r2, r3, #30
   8b928:	bf04      	itt	eq
   8b92a:	089b      	lsreq	r3, r3, #2
   8b92c:	3002      	addeq	r0, #2
   8b92e:	07da      	lsls	r2, r3, #31
   8b930:	d403      	bmi.n	8b93a <__lo0bits+0x46>
   8b932:	085b      	lsrs	r3, r3, #1
   8b934:	f100 0001 	add.w	r0, r0, #1
   8b938:	d006      	beq.n	8b948 <__lo0bits+0x54>
   8b93a:	600b      	str	r3, [r1, #0]
   8b93c:	4770      	bx	lr
   8b93e:	2010      	movs	r0, #16
   8b940:	0c1b      	lsrs	r3, r3, #16
   8b942:	e7e7      	b.n	8b914 <__lo0bits+0x20>
   8b944:	2000      	movs	r0, #0
   8b946:	4770      	bx	lr
   8b948:	2020      	movs	r0, #32
   8b94a:	4770      	bx	lr
   8b94c:	089b      	lsrs	r3, r3, #2
   8b94e:	2002      	movs	r0, #2
   8b950:	600b      	str	r3, [r1, #0]
   8b952:	4770      	bx	lr

0008b954 <__i2b>:
   8b954:	b510      	push	{r4, lr}
   8b956:	460c      	mov	r4, r1
   8b958:	2101      	movs	r1, #1
   8b95a:	f7ff ff2d 	bl	8b7b8 <_Balloc>
   8b95e:	4602      	mov	r2, r0
   8b960:	b118      	cbz	r0, 8b96a <__i2b+0x16>
   8b962:	2301      	movs	r3, #1
   8b964:	e9c0 3404 	strd	r3, r4, [r0, #16]
   8b968:	bd10      	pop	{r4, pc}
   8b96a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8b96e:	4b02      	ldr	r3, [pc, #8]	; (8b978 <__i2b+0x24>)
   8b970:	4802      	ldr	r0, [pc, #8]	; (8b97c <__i2b+0x28>)
   8b972:	f000 fedb 	bl	8c72c <__assert_func>
   8b976:	bf00      	nop
   8b978:	0008d4b0 	.word	0x0008d4b0
   8b97c:	0008d550 	.word	0x0008d550

0008b980 <__multiply>:
   8b980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b984:	690d      	ldr	r5, [r1, #16]
   8b986:	6917      	ldr	r7, [r2, #16]
   8b988:	460e      	mov	r6, r1
   8b98a:	42bd      	cmp	r5, r7
   8b98c:	4614      	mov	r4, r2
   8b98e:	b085      	sub	sp, #20
   8b990:	db05      	blt.n	8b99e <__multiply+0x1e>
   8b992:	463a      	mov	r2, r7
   8b994:	4623      	mov	r3, r4
   8b996:	462f      	mov	r7, r5
   8b998:	460c      	mov	r4, r1
   8b99a:	4615      	mov	r5, r2
   8b99c:	461e      	mov	r6, r3
   8b99e:	68a3      	ldr	r3, [r4, #8]
   8b9a0:	6861      	ldr	r1, [r4, #4]
   8b9a2:	eb07 0805 	add.w	r8, r7, r5
   8b9a6:	4543      	cmp	r3, r8
   8b9a8:	bfb8      	it	lt
   8b9aa:	3101      	addlt	r1, #1
   8b9ac:	f7ff ff04 	bl	8b7b8 <_Balloc>
   8b9b0:	9001      	str	r0, [sp, #4]
   8b9b2:	2800      	cmp	r0, #0
   8b9b4:	f000 8088 	beq.w	8bac8 <__multiply+0x148>
   8b9b8:	9b01      	ldr	r3, [sp, #4]
   8b9ba:	f103 0914 	add.w	r9, r3, #20
   8b9be:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   8b9c2:	45d1      	cmp	r9, sl
   8b9c4:	d205      	bcs.n	8b9d2 <__multiply+0x52>
   8b9c6:	464b      	mov	r3, r9
   8b9c8:	2200      	movs	r2, #0
   8b9ca:	f843 2b04 	str.w	r2, [r3], #4
   8b9ce:	459a      	cmp	sl, r3
   8b9d0:	d8fb      	bhi.n	8b9ca <__multiply+0x4a>
   8b9d2:	f106 0e14 	add.w	lr, r6, #20
   8b9d6:	eb0e 0b85 	add.w	fp, lr, r5, lsl #2
   8b9da:	f104 0314 	add.w	r3, r4, #20
   8b9de:	45de      	cmp	lr, fp
   8b9e0:	461a      	mov	r2, r3
   8b9e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   8b9e6:	d23e      	bcs.n	8ba66 <__multiply+0xe6>
   8b9e8:	1b3b      	subs	r3, r7, r4
   8b9ea:	3b15      	subs	r3, #21
   8b9ec:	f023 0303 	bic.w	r3, r3, #3
   8b9f0:	3304      	adds	r3, #4
   8b9f2:	3415      	adds	r4, #21
   8b9f4:	42a7      	cmp	r7, r4
   8b9f6:	bf38      	it	cc
   8b9f8:	2304      	movcc	r3, #4
   8b9fa:	e9cd a802 	strd	sl, r8, [sp, #8]
   8b9fe:	4698      	mov	r8, r3
   8ba00:	4692      	mov	sl, r2
   8ba02:	e003      	b.n	8ba0c <__multiply+0x8c>
   8ba04:	45f3      	cmp	fp, lr
   8ba06:	f109 0904 	add.w	r9, r9, #4
   8ba0a:	d92a      	bls.n	8ba62 <__multiply+0xe2>
   8ba0c:	f85e 0b04 	ldr.w	r0, [lr], #4
   8ba10:	b286      	uxth	r6, r0
   8ba12:	2e00      	cmp	r6, #0
   8ba14:	d138      	bne.n	8ba88 <__multiply+0x108>
   8ba16:	0c00      	lsrs	r0, r0, #16
   8ba18:	d0f4      	beq.n	8ba04 <__multiply+0x84>
   8ba1a:	f8d9 3000 	ldr.w	r3, [r9]
   8ba1e:	4654      	mov	r4, sl
   8ba20:	461e      	mov	r6, r3
   8ba22:	464d      	mov	r5, r9
   8ba24:	f04f 0c00 	mov.w	ip, #0
   8ba28:	8822      	ldrh	r2, [r4, #0]
   8ba2a:	0c36      	lsrs	r6, r6, #16
   8ba2c:	fb00 6602 	mla	r6, r0, r2, r6
   8ba30:	b29b      	uxth	r3, r3
   8ba32:	44b4      	add	ip, r6
   8ba34:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   8ba38:	f845 3b04 	str.w	r3, [r5], #4
   8ba3c:	f854 3b04 	ldr.w	r3, [r4], #4
   8ba40:	682e      	ldr	r6, [r5, #0]
   8ba42:	0c1b      	lsrs	r3, r3, #16
   8ba44:	b2b2      	uxth	r2, r6
   8ba46:	fb00 2303 	mla	r3, r0, r3, r2
   8ba4a:	42a7      	cmp	r7, r4
   8ba4c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
   8ba50:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8ba54:	d8e8      	bhi.n	8ba28 <__multiply+0xa8>
   8ba56:	45f3      	cmp	fp, lr
   8ba58:	f849 3008 	str.w	r3, [r9, r8]
   8ba5c:	f109 0904 	add.w	r9, r9, #4
   8ba60:	d8d4      	bhi.n	8ba0c <__multiply+0x8c>
   8ba62:	e9dd a802 	ldrd	sl, r8, [sp, #8]
   8ba66:	f1b8 0f00 	cmp.w	r8, #0
   8ba6a:	dc03      	bgt.n	8ba74 <__multiply+0xf4>
   8ba6c:	e006      	b.n	8ba7c <__multiply+0xfc>
   8ba6e:	f1b8 0801 	subs.w	r8, r8, #1
   8ba72:	d003      	beq.n	8ba7c <__multiply+0xfc>
   8ba74:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8ba78:	2b00      	cmp	r3, #0
   8ba7a:	d0f8      	beq.n	8ba6e <__multiply+0xee>
   8ba7c:	9801      	ldr	r0, [sp, #4]
   8ba7e:	f8c0 8010 	str.w	r8, [r0, #16]
   8ba82:	b005      	add	sp, #20
   8ba84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ba88:	4655      	mov	r5, sl
   8ba8a:	464c      	mov	r4, r9
   8ba8c:	2300      	movs	r3, #0
   8ba8e:	f855 1b04 	ldr.w	r1, [r5], #4
   8ba92:	6820      	ldr	r0, [r4, #0]
   8ba94:	b28a      	uxth	r2, r1
   8ba96:	fa1f fc80 	uxth.w	ip, r0
   8ba9a:	fb06 c202 	mla	r2, r6, r2, ip
   8ba9e:	0c09      	lsrs	r1, r1, #16
   8baa0:	0c00      	lsrs	r0, r0, #16
   8baa2:	fb06 0101 	mla	r1, r6, r1, r0
   8baa6:	4413      	add	r3, r2
   8baa8:	eb01 4213 	add.w	r2, r1, r3, lsr #16
   8baac:	b29b      	uxth	r3, r3
   8baae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8bab2:	42af      	cmp	r7, r5
   8bab4:	f844 3b04 	str.w	r3, [r4], #4
   8bab8:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8babc:	d8e7      	bhi.n	8ba8e <__multiply+0x10e>
   8babe:	f849 3008 	str.w	r3, [r9, r8]
   8bac2:	f85e 0c04 	ldr.w	r0, [lr, #-4]
   8bac6:	e7a6      	b.n	8ba16 <__multiply+0x96>
   8bac8:	4602      	mov	r2, r0
   8baca:	f240 115d 	movw	r1, #349	; 0x15d
   8bace:	4b02      	ldr	r3, [pc, #8]	; (8bad8 <__multiply+0x158>)
   8bad0:	4802      	ldr	r0, [pc, #8]	; (8badc <__multiply+0x15c>)
   8bad2:	f000 fe2b 	bl	8c72c <__assert_func>
   8bad6:	bf00      	nop
   8bad8:	0008d4b0 	.word	0x0008d4b0
   8badc:	0008d550 	.word	0x0008d550

0008bae0 <__pow5mult>:
   8bae0:	f012 0303 	ands.w	r3, r2, #3
   8bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bae8:	4614      	mov	r4, r2
   8baea:	4607      	mov	r7, r0
   8baec:	d12e      	bne.n	8bb4c <__pow5mult+0x6c>
   8baee:	460e      	mov	r6, r1
   8baf0:	10a4      	asrs	r4, r4, #2
   8baf2:	d01c      	beq.n	8bb2e <__pow5mult+0x4e>
   8baf4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8baf6:	b395      	cbz	r5, 8bb5e <__pow5mult+0x7e>
   8baf8:	07e3      	lsls	r3, r4, #31
   8bafa:	f04f 0800 	mov.w	r8, #0
   8bafe:	d406      	bmi.n	8bb0e <__pow5mult+0x2e>
   8bb00:	1064      	asrs	r4, r4, #1
   8bb02:	d014      	beq.n	8bb2e <__pow5mult+0x4e>
   8bb04:	6828      	ldr	r0, [r5, #0]
   8bb06:	b1a8      	cbz	r0, 8bb34 <__pow5mult+0x54>
   8bb08:	4605      	mov	r5, r0
   8bb0a:	07e3      	lsls	r3, r4, #31
   8bb0c:	d5f8      	bpl.n	8bb00 <__pow5mult+0x20>
   8bb0e:	462a      	mov	r2, r5
   8bb10:	4631      	mov	r1, r6
   8bb12:	4638      	mov	r0, r7
   8bb14:	f7ff ff34 	bl	8b980 <__multiply>
   8bb18:	b1b6      	cbz	r6, 8bb48 <__pow5mult+0x68>
   8bb1a:	6871      	ldr	r1, [r6, #4]
   8bb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8bb1e:	1064      	asrs	r4, r4, #1
   8bb20:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8bb24:	6032      	str	r2, [r6, #0]
   8bb26:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8bb2a:	4606      	mov	r6, r0
   8bb2c:	d1ea      	bne.n	8bb04 <__pow5mult+0x24>
   8bb2e:	4630      	mov	r0, r6
   8bb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8bb34:	462a      	mov	r2, r5
   8bb36:	4629      	mov	r1, r5
   8bb38:	4638      	mov	r0, r7
   8bb3a:	f7ff ff21 	bl	8b980 <__multiply>
   8bb3e:	6028      	str	r0, [r5, #0]
   8bb40:	4605      	mov	r5, r0
   8bb42:	f8c0 8000 	str.w	r8, [r0]
   8bb46:	e7e0      	b.n	8bb0a <__pow5mult+0x2a>
   8bb48:	4606      	mov	r6, r0
   8bb4a:	e7d9      	b.n	8bb00 <__pow5mult+0x20>
   8bb4c:	4a09      	ldr	r2, [pc, #36]	; (8bb74 <__pow5mult+0x94>)
   8bb4e:	3b01      	subs	r3, #1
   8bb50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8bb54:	2300      	movs	r3, #0
   8bb56:	f7ff fe5f 	bl	8b818 <__multadd>
   8bb5a:	4606      	mov	r6, r0
   8bb5c:	e7c8      	b.n	8baf0 <__pow5mult+0x10>
   8bb5e:	f240 2171 	movw	r1, #625	; 0x271
   8bb62:	4638      	mov	r0, r7
   8bb64:	f7ff fef6 	bl	8b954 <__i2b>
   8bb68:	2300      	movs	r3, #0
   8bb6a:	64b8      	str	r0, [r7, #72]	; 0x48
   8bb6c:	4605      	mov	r5, r0
   8bb6e:	6003      	str	r3, [r0, #0]
   8bb70:	e7c2      	b.n	8baf8 <__pow5mult+0x18>
   8bb72:	bf00      	nop
   8bb74:	0008d6c0 	.word	0x0008d6c0

0008bb78 <__lshift>:
   8bb78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8bb7c:	690f      	ldr	r7, [r1, #16]
   8bb7e:	688b      	ldr	r3, [r1, #8]
   8bb80:	eb07 1762 	add.w	r7, r7, r2, asr #5
   8bb84:	1c7e      	adds	r6, r7, #1
   8bb86:	429e      	cmp	r6, r3
   8bb88:	460d      	mov	r5, r1
   8bb8a:	4691      	mov	r9, r2
   8bb8c:	4680      	mov	r8, r0
   8bb8e:	6849      	ldr	r1, [r1, #4]
   8bb90:	ea4f 1462 	mov.w	r4, r2, asr #5
   8bb94:	dd04      	ble.n	8bba0 <__lshift+0x28>
   8bb96:	005b      	lsls	r3, r3, #1
   8bb98:	429e      	cmp	r6, r3
   8bb9a:	f101 0101 	add.w	r1, r1, #1
   8bb9e:	dcfa      	bgt.n	8bb96 <__lshift+0x1e>
   8bba0:	4640      	mov	r0, r8
   8bba2:	f7ff fe09 	bl	8b7b8 <_Balloc>
   8bba6:	2800      	cmp	r0, #0
   8bba8:	d04f      	beq.n	8bc4a <__lshift+0xd2>
   8bbaa:	2c00      	cmp	r4, #0
   8bbac:	f100 0114 	add.w	r1, r0, #20
   8bbb0:	dd0d      	ble.n	8bbce <__lshift+0x56>
   8bbb2:	460b      	mov	r3, r1
   8bbb4:	2200      	movs	r2, #0
   8bbb6:	3405      	adds	r4, #5
   8bbb8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
   8bbbc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   8bbc0:	f843 2b04 	str.w	r2, [r3], #4
   8bbc4:	42a3      	cmp	r3, r4
   8bbc6:	d1fb      	bne.n	8bbc0 <__lshift+0x48>
   8bbc8:	f1ac 0314 	sub.w	r3, ip, #20
   8bbcc:	4419      	add	r1, r3
   8bbce:	692c      	ldr	r4, [r5, #16]
   8bbd0:	f105 0314 	add.w	r3, r5, #20
   8bbd4:	f019 091f 	ands.w	r9, r9, #31
   8bbd8:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
   8bbdc:	d02d      	beq.n	8bc3a <__lshift+0xc2>
   8bbde:	468e      	mov	lr, r1
   8bbe0:	f04f 0a00 	mov.w	sl, #0
   8bbe4:	f1c9 0220 	rsb	r2, r9, #32
   8bbe8:	681c      	ldr	r4, [r3, #0]
   8bbea:	fa04 f409 	lsl.w	r4, r4, r9
   8bbee:	ea44 040a 	orr.w	r4, r4, sl
   8bbf2:	f84e 4b04 	str.w	r4, [lr], #4
   8bbf6:	f853 4b04 	ldr.w	r4, [r3], #4
   8bbfa:	459c      	cmp	ip, r3
   8bbfc:	fa24 fa02 	lsr.w	sl, r4, r2
   8bc00:	d8f2      	bhi.n	8bbe8 <__lshift+0x70>
   8bc02:	ebac 0305 	sub.w	r3, ip, r5
   8bc06:	3b15      	subs	r3, #21
   8bc08:	f023 0303 	bic.w	r3, r3, #3
   8bc0c:	3304      	adds	r3, #4
   8bc0e:	f105 0215 	add.w	r2, r5, #21
   8bc12:	4594      	cmp	ip, r2
   8bc14:	bf38      	it	cc
   8bc16:	2304      	movcc	r3, #4
   8bc18:	f1ba 0f00 	cmp.w	sl, #0
   8bc1c:	bf18      	it	ne
   8bc1e:	4637      	movne	r7, r6
   8bc20:	f841 a003 	str.w	sl, [r1, r3]
   8bc24:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   8bc28:	686a      	ldr	r2, [r5, #4]
   8bc2a:	6107      	str	r7, [r0, #16]
   8bc2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8bc30:	6029      	str	r1, [r5, #0]
   8bc32:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   8bc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bc3a:	3904      	subs	r1, #4
   8bc3c:	f853 2b04 	ldr.w	r2, [r3], #4
   8bc40:	459c      	cmp	ip, r3
   8bc42:	f841 2f04 	str.w	r2, [r1, #4]!
   8bc46:	d8f9      	bhi.n	8bc3c <__lshift+0xc4>
   8bc48:	e7ec      	b.n	8bc24 <__lshift+0xac>
   8bc4a:	4602      	mov	r2, r0
   8bc4c:	f240 11d9 	movw	r1, #473	; 0x1d9
   8bc50:	4b01      	ldr	r3, [pc, #4]	; (8bc58 <__lshift+0xe0>)
   8bc52:	4802      	ldr	r0, [pc, #8]	; (8bc5c <__lshift+0xe4>)
   8bc54:	f000 fd6a 	bl	8c72c <__assert_func>
   8bc58:	0008d4b0 	.word	0x0008d4b0
   8bc5c:	0008d550 	.word	0x0008d550

0008bc60 <__mcmp>:
   8bc60:	b430      	push	{r4, r5}
   8bc62:	690b      	ldr	r3, [r1, #16]
   8bc64:	4605      	mov	r5, r0
   8bc66:	6900      	ldr	r0, [r0, #16]
   8bc68:	1ac0      	subs	r0, r0, r3
   8bc6a:	d111      	bne.n	8bc90 <__mcmp+0x30>
   8bc6c:	3514      	adds	r5, #20
   8bc6e:	3114      	adds	r1, #20
   8bc70:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   8bc74:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   8bc78:	e001      	b.n	8bc7e <__mcmp+0x1e>
   8bc7a:	429d      	cmp	r5, r3
   8bc7c:	d208      	bcs.n	8bc90 <__mcmp+0x30>
   8bc7e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   8bc82:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8bc86:	428c      	cmp	r4, r1
   8bc88:	d0f7      	beq.n	8bc7a <__mcmp+0x1a>
   8bc8a:	d203      	bcs.n	8bc94 <__mcmp+0x34>
   8bc8c:	f04f 30ff 	mov.w	r0, #4294967295
   8bc90:	bc30      	pop	{r4, r5}
   8bc92:	4770      	bx	lr
   8bc94:	2001      	movs	r0, #1
   8bc96:	bc30      	pop	{r4, r5}
   8bc98:	4770      	bx	lr
   8bc9a:	bf00      	nop

0008bc9c <__mdiff>:
   8bc9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bca0:	690b      	ldr	r3, [r1, #16]
   8bca2:	460c      	mov	r4, r1
   8bca4:	6911      	ldr	r1, [r2, #16]
   8bca6:	4690      	mov	r8, r2
   8bca8:	eba3 0b01 	sub.w	fp, r3, r1
   8bcac:	f1bb 0f00 	cmp.w	fp, #0
   8bcb0:	d17c      	bne.n	8bdac <__mdiff+0x110>
   8bcb2:	f104 0614 	add.w	r6, r4, #20
   8bcb6:	3214      	adds	r2, #20
   8bcb8:	eb06 0381 	add.w	r3, r6, r1, lsl #2
   8bcbc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8bcc0:	e001      	b.n	8bcc6 <__mdiff+0x2a>
   8bcc2:	429e      	cmp	r6, r3
   8bcc4:	d276      	bcs.n	8bdb4 <__mdiff+0x118>
   8bcc6:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8bcca:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8bcce:	428d      	cmp	r5, r1
   8bcd0:	d0f7      	beq.n	8bcc2 <__mdiff+0x26>
   8bcd2:	d365      	bcc.n	8bda0 <__mdiff+0x104>
   8bcd4:	6861      	ldr	r1, [r4, #4]
   8bcd6:	f7ff fd6f 	bl	8b7b8 <_Balloc>
   8bcda:	2800      	cmp	r0, #0
   8bcdc:	d074      	beq.n	8bdc8 <__mdiff+0x12c>
   8bcde:	f100 0614 	add.w	r6, r0, #20
   8bce2:	46b4      	mov	ip, r6
   8bce4:	2300      	movs	r3, #0
   8bce6:	6927      	ldr	r7, [r4, #16]
   8bce8:	f8d8 2010 	ldr.w	r2, [r8, #16]
   8bcec:	f104 0a14 	add.w	sl, r4, #20
   8bcf0:	f108 0514 	add.w	r5, r8, #20
   8bcf4:	f8c0 b00c 	str.w	fp, [r0, #12]
   8bcf8:	3410      	adds	r4, #16
   8bcfa:	eb0a 0e87 	add.w	lr, sl, r7, lsl #2
   8bcfe:	eb05 0982 	add.w	r9, r5, r2, lsl #2
   8bd02:	f854 2f04 	ldr.w	r2, [r4, #4]!
   8bd06:	f855 bb04 	ldr.w	fp, [r5], #4
   8bd0a:	b291      	uxth	r1, r2
   8bd0c:	440b      	add	r3, r1
   8bd0e:	fa1f f18b 	uxth.w	r1, fp
   8bd12:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   8bd16:	1a59      	subs	r1, r3, r1
   8bd18:	ebcb 4312 	rsb	r3, fp, r2, lsr #16
   8bd1c:	eb03 4321 	add.w	r3, r3, r1, asr #16
   8bd20:	b289      	uxth	r1, r1
   8bd22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8bd26:	45a9      	cmp	r9, r5
   8bd28:	f84c 1b04 	str.w	r1, [ip], #4
   8bd2c:	ea4f 4323 	mov.w	r3, r3, asr #16
   8bd30:	d8e7      	bhi.n	8bd02 <__mdiff+0x66>
   8bd32:	eba9 0208 	sub.w	r2, r9, r8
   8bd36:	3a15      	subs	r2, #21
   8bd38:	f108 0815 	add.w	r8, r8, #21
   8bd3c:	45c1      	cmp	r9, r8
   8bd3e:	f022 0403 	bic.w	r4, r2, #3
   8bd42:	f104 0404 	add.w	r4, r4, #4
   8bd46:	bf38      	it	cc
   8bd48:	2404      	movcc	r4, #4
   8bd4a:	f022 0203 	bic.w	r2, r2, #3
   8bd4e:	bf38      	it	cc
   8bd50:	2200      	movcc	r2, #0
   8bd52:	44a2      	add	sl, r4
   8bd54:	45d6      	cmp	lr, sl
   8bd56:	4434      	add	r4, r6
   8bd58:	4416      	add	r6, r2
   8bd5a:	d918      	bls.n	8bd8e <__mdiff+0xf2>
   8bd5c:	4625      	mov	r5, r4
   8bd5e:	4652      	mov	r2, sl
   8bd60:	f852 6b04 	ldr.w	r6, [r2], #4
   8bd64:	b2b1      	uxth	r1, r6
   8bd66:	4419      	add	r1, r3
   8bd68:	140b      	asrs	r3, r1, #16
   8bd6a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   8bd6e:	b289      	uxth	r1, r1
   8bd70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   8bd74:	4596      	cmp	lr, r2
   8bd76:	f845 1b04 	str.w	r1, [r5], #4
   8bd7a:	ea4f 4323 	mov.w	r3, r3, asr #16
   8bd7e:	d8ef      	bhi.n	8bd60 <__mdiff+0xc4>
   8bd80:	f10e 36ff 	add.w	r6, lr, #4294967295
   8bd84:	eba6 060a 	sub.w	r6, r6, sl
   8bd88:	f026 0603 	bic.w	r6, r6, #3
   8bd8c:	4426      	add	r6, r4
   8bd8e:	b921      	cbnz	r1, 8bd9a <__mdiff+0xfe>
   8bd90:	f856 3d04 	ldr.w	r3, [r6, #-4]!
   8bd94:	3f01      	subs	r7, #1
   8bd96:	2b00      	cmp	r3, #0
   8bd98:	d0fa      	beq.n	8bd90 <__mdiff+0xf4>
   8bd9a:	6107      	str	r7, [r0, #16]
   8bd9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bda0:	4623      	mov	r3, r4
   8bda2:	f04f 0b01 	mov.w	fp, #1
   8bda6:	4644      	mov	r4, r8
   8bda8:	4698      	mov	r8, r3
   8bdaa:	e793      	b.n	8bcd4 <__mdiff+0x38>
   8bdac:	dbf8      	blt.n	8bda0 <__mdiff+0x104>
   8bdae:	f04f 0b00 	mov.w	fp, #0
   8bdb2:	e78f      	b.n	8bcd4 <__mdiff+0x38>
   8bdb4:	2100      	movs	r1, #0
   8bdb6:	f7ff fcff 	bl	8b7b8 <_Balloc>
   8bdba:	b160      	cbz	r0, 8bdd6 <__mdiff+0x13a>
   8bdbc:	2201      	movs	r2, #1
   8bdbe:	2300      	movs	r3, #0
   8bdc0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8bdc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bdc8:	4602      	mov	r2, r0
   8bdca:	f44f 7110 	mov.w	r1, #576	; 0x240
   8bdce:	4b05      	ldr	r3, [pc, #20]	; (8bde4 <__mdiff+0x148>)
   8bdd0:	4805      	ldr	r0, [pc, #20]	; (8bde8 <__mdiff+0x14c>)
   8bdd2:	f000 fcab 	bl	8c72c <__assert_func>
   8bdd6:	4602      	mov	r2, r0
   8bdd8:	f240 2132 	movw	r1, #562	; 0x232
   8bddc:	4b01      	ldr	r3, [pc, #4]	; (8bde4 <__mdiff+0x148>)
   8bdde:	4802      	ldr	r0, [pc, #8]	; (8bde8 <__mdiff+0x14c>)
   8bde0:	f000 fca4 	bl	8c72c <__assert_func>
   8bde4:	0008d4b0 	.word	0x0008d4b0
   8bde8:	0008d550 	.word	0x0008d550

0008bdec <__d2b>:
   8bdec:	b570      	push	{r4, r5, r6, lr}
   8bdee:	2101      	movs	r1, #1
   8bdf0:	b082      	sub	sp, #8
   8bdf2:	4616      	mov	r6, r2
   8bdf4:	461d      	mov	r5, r3
   8bdf6:	f7ff fcdf 	bl	8b7b8 <_Balloc>
   8bdfa:	4604      	mov	r4, r0
   8bdfc:	2800      	cmp	r0, #0
   8bdfe:	d04c      	beq.n	8be9a <__d2b+0xae>
   8be00:	462b      	mov	r3, r5
   8be02:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8be06:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8be0a:	b10d      	cbz	r5, 8be10 <__d2b+0x24>
   8be0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8be10:	2e00      	cmp	r6, #0
   8be12:	9301      	str	r3, [sp, #4]
   8be14:	d022      	beq.n	8be5c <__d2b+0x70>
   8be16:	4668      	mov	r0, sp
   8be18:	9600      	str	r6, [sp, #0]
   8be1a:	f7ff fd6b 	bl	8b8f4 <__lo0bits>
   8be1e:	2800      	cmp	r0, #0
   8be20:	d037      	beq.n	8be92 <__d2b+0xa6>
   8be22:	9b01      	ldr	r3, [sp, #4]
   8be24:	9900      	ldr	r1, [sp, #0]
   8be26:	f1c0 0220 	rsb	r2, r0, #32
   8be2a:	fa03 f202 	lsl.w	r2, r3, r2
   8be2e:	430a      	orrs	r2, r1
   8be30:	40c3      	lsrs	r3, r0
   8be32:	9301      	str	r3, [sp, #4]
   8be34:	6162      	str	r2, [r4, #20]
   8be36:	2b00      	cmp	r3, #0
   8be38:	bf14      	ite	ne
   8be3a:	2102      	movne	r1, #2
   8be3c:	2101      	moveq	r1, #1
   8be3e:	61a3      	str	r3, [r4, #24]
   8be40:	6121      	str	r1, [r4, #16]
   8be42:	b1b5      	cbz	r5, 8be72 <__d2b+0x86>
   8be44:	9a06      	ldr	r2, [sp, #24]
   8be46:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8be4a:	4403      	add	r3, r0
   8be4c:	6013      	str	r3, [r2, #0]
   8be4e:	9b07      	ldr	r3, [sp, #28]
   8be50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8be54:	6018      	str	r0, [r3, #0]
   8be56:	4620      	mov	r0, r4
   8be58:	b002      	add	sp, #8
   8be5a:	bd70      	pop	{r4, r5, r6, pc}
   8be5c:	a801      	add	r0, sp, #4
   8be5e:	f7ff fd49 	bl	8b8f4 <__lo0bits>
   8be62:	2301      	movs	r3, #1
   8be64:	9a01      	ldr	r2, [sp, #4]
   8be66:	4619      	mov	r1, r3
   8be68:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8be6c:	3020      	adds	r0, #32
   8be6e:	2d00      	cmp	r5, #0
   8be70:	d1e8      	bne.n	8be44 <__d2b+0x58>
   8be72:	9a06      	ldr	r2, [sp, #24]
   8be74:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   8be78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8be7c:	6010      	str	r0, [r2, #0]
   8be7e:	6918      	ldr	r0, [r3, #16]
   8be80:	f7ff fd18 	bl	8b8b4 <__hi0bits>
   8be84:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8be88:	4620      	mov	r0, r4
   8be8a:	9b07      	ldr	r3, [sp, #28]
   8be8c:	6019      	str	r1, [r3, #0]
   8be8e:	b002      	add	sp, #8
   8be90:	bd70      	pop	{r4, r5, r6, pc}
   8be92:	e9dd 2300 	ldrd	r2, r3, [sp]
   8be96:	6162      	str	r2, [r4, #20]
   8be98:	e7cd      	b.n	8be36 <__d2b+0x4a>
   8be9a:	4602      	mov	r2, r0
   8be9c:	f240 310a 	movw	r1, #778	; 0x30a
   8bea0:	4b01      	ldr	r3, [pc, #4]	; (8bea8 <__d2b+0xbc>)
   8bea2:	4802      	ldr	r0, [pc, #8]	; (8beac <__d2b+0xc0>)
   8bea4:	f000 fc42 	bl	8c72c <__assert_func>
   8bea8:	0008d4b0 	.word	0x0008d4b0
   8beac:	0008d550 	.word	0x0008d550

0008beb0 <_realloc_r>:
   8beb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8beb4:	4616      	mov	r6, r2
   8beb6:	2900      	cmp	r1, #0
   8beb8:	f000 80bd 	beq.w	8c036 <_realloc_r+0x186>
   8bebc:	f106 050b 	add.w	r5, r6, #11
   8bec0:	460c      	mov	r4, r1
   8bec2:	4680      	mov	r8, r0
   8bec4:	f7ff fc6c 	bl	8b7a0 <__malloc_lock>
   8bec8:	2d16      	cmp	r5, #22
   8beca:	d85f      	bhi.n	8bf8c <_realloc_r+0xdc>
   8becc:	2510      	movs	r5, #16
   8bece:	462a      	mov	r2, r5
   8bed0:	42ae      	cmp	r6, r5
   8bed2:	d860      	bhi.n	8bf96 <_realloc_r+0xe6>
   8bed4:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8bed8:	f1a4 0908 	sub.w	r9, r4, #8
   8bedc:	f021 0703 	bic.w	r7, r1, #3
   8bee0:	4297      	cmp	r7, r2
   8bee2:	f280 8086 	bge.w	8bff2 <_realloc_r+0x142>
   8bee6:	4bc9      	ldr	r3, [pc, #804]	; (8c20c <_realloc_r+0x35c>)
   8bee8:	eb09 0007 	add.w	r0, r9, r7
   8beec:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8bef0:	4584      	cmp	ip, r0
   8bef2:	f000 80b9 	beq.w	8c068 <_realloc_r+0x1b8>
   8bef6:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8befa:	f02c 0301 	bic.w	r3, ip, #1
   8befe:	4403      	add	r3, r0
   8bf00:	685b      	ldr	r3, [r3, #4]
   8bf02:	07db      	lsls	r3, r3, #31
   8bf04:	f100 808c 	bmi.w	8c020 <_realloc_r+0x170>
   8bf08:	f02c 0c03 	bic.w	ip, ip, #3
   8bf0c:	eb07 030c 	add.w	r3, r7, ip
   8bf10:	4293      	cmp	r3, r2
   8bf12:	f280 8115 	bge.w	8c140 <_realloc_r+0x290>
   8bf16:	07cb      	lsls	r3, r1, #31
   8bf18:	d40f      	bmi.n	8bf3a <_realloc_r+0x8a>
   8bf1a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8bf1e:	eba9 0a03 	sub.w	sl, r9, r3
   8bf22:	f8da 3004 	ldr.w	r3, [sl, #4]
   8bf26:	f023 0103 	bic.w	r1, r3, #3
   8bf2a:	448c      	add	ip, r1
   8bf2c:	44bc      	add	ip, r7
   8bf2e:	4594      	cmp	ip, r2
   8bf30:	da38      	bge.n	8bfa4 <_realloc_r+0xf4>
   8bf32:	187b      	adds	r3, r7, r1
   8bf34:	4293      	cmp	r3, r2
   8bf36:	f280 810f 	bge.w	8c158 <_realloc_r+0x2a8>
   8bf3a:	4631      	mov	r1, r6
   8bf3c:	4640      	mov	r0, r8
   8bf3e:	f7ff f8c1 	bl	8b0c4 <_malloc_r>
   8bf42:	4606      	mov	r6, r0
   8bf44:	b1e0      	cbz	r0, 8bf80 <_realloc_r+0xd0>
   8bf46:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8bf4a:	f1a0 0208 	sub.w	r2, r0, #8
   8bf4e:	f023 0301 	bic.w	r3, r3, #1
   8bf52:	444b      	add	r3, r9
   8bf54:	4293      	cmp	r3, r2
   8bf56:	f000 80f9 	beq.w	8c14c <_realloc_r+0x29c>
   8bf5a:	1f3a      	subs	r2, r7, #4
   8bf5c:	2a24      	cmp	r2, #36	; 0x24
   8bf5e:	f200 811c 	bhi.w	8c19a <_realloc_r+0x2ea>
   8bf62:	2a13      	cmp	r2, #19
   8bf64:	f200 80cd 	bhi.w	8c102 <_realloc_r+0x252>
   8bf68:	4603      	mov	r3, r0
   8bf6a:	4622      	mov	r2, r4
   8bf6c:	6811      	ldr	r1, [r2, #0]
   8bf6e:	6019      	str	r1, [r3, #0]
   8bf70:	6851      	ldr	r1, [r2, #4]
   8bf72:	6059      	str	r1, [r3, #4]
   8bf74:	6892      	ldr	r2, [r2, #8]
   8bf76:	609a      	str	r2, [r3, #8]
   8bf78:	4621      	mov	r1, r4
   8bf7a:	4640      	mov	r0, r8
   8bf7c:	f7fe fd78 	bl	8aa70 <_free_r>
   8bf80:	4640      	mov	r0, r8
   8bf82:	f7ff fc13 	bl	8b7ac <__malloc_unlock>
   8bf86:	4630      	mov	r0, r6
   8bf88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bf8c:	f025 0507 	bic.w	r5, r5, #7
   8bf90:	2d00      	cmp	r5, #0
   8bf92:	462a      	mov	r2, r5
   8bf94:	da9c      	bge.n	8bed0 <_realloc_r+0x20>
   8bf96:	230c      	movs	r3, #12
   8bf98:	2600      	movs	r6, #0
   8bf9a:	f8c8 3000 	str.w	r3, [r8]
   8bf9e:	4630      	mov	r0, r6
   8bfa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bfa4:	4656      	mov	r6, sl
   8bfa6:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8bfaa:	60cb      	str	r3, [r1, #12]
   8bfac:	6099      	str	r1, [r3, #8]
   8bfae:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8bfb2:	f8da 300c 	ldr.w	r3, [sl, #12]
   8bfb6:	1f3a      	subs	r2, r7, #4
   8bfb8:	2a24      	cmp	r2, #36	; 0x24
   8bfba:	60cb      	str	r3, [r1, #12]
   8bfbc:	6099      	str	r1, [r3, #8]
   8bfbe:	f200 8107 	bhi.w	8c1d0 <_realloc_r+0x320>
   8bfc2:	2a13      	cmp	r2, #19
   8bfc4:	f240 8102 	bls.w	8c1cc <_realloc_r+0x31c>
   8bfc8:	6823      	ldr	r3, [r4, #0]
   8bfca:	2a1b      	cmp	r2, #27
   8bfcc:	f8ca 3008 	str.w	r3, [sl, #8]
   8bfd0:	6863      	ldr	r3, [r4, #4]
   8bfd2:	f8ca 300c 	str.w	r3, [sl, #12]
   8bfd6:	f200 811b 	bhi.w	8c210 <_realloc_r+0x360>
   8bfda:	3408      	adds	r4, #8
   8bfdc:	f10a 0310 	add.w	r3, sl, #16
   8bfe0:	6822      	ldr	r2, [r4, #0]
   8bfe2:	4667      	mov	r7, ip
   8bfe4:	601a      	str	r2, [r3, #0]
   8bfe6:	6862      	ldr	r2, [r4, #4]
   8bfe8:	46d1      	mov	r9, sl
   8bfea:	605a      	str	r2, [r3, #4]
   8bfec:	68a2      	ldr	r2, [r4, #8]
   8bfee:	4634      	mov	r4, r6
   8bff0:	609a      	str	r2, [r3, #8]
   8bff2:	1b7b      	subs	r3, r7, r5
   8bff4:	2b0f      	cmp	r3, #15
   8bff6:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8bffa:	d821      	bhi.n	8c040 <_realloc_r+0x190>
   8bffc:	f002 0201 	and.w	r2, r2, #1
   8c000:	433a      	orrs	r2, r7
   8c002:	eb09 0107 	add.w	r1, r9, r7
   8c006:	f8c9 2004 	str.w	r2, [r9, #4]
   8c00a:	684b      	ldr	r3, [r1, #4]
   8c00c:	f043 0301 	orr.w	r3, r3, #1
   8c010:	604b      	str	r3, [r1, #4]
   8c012:	4626      	mov	r6, r4
   8c014:	4640      	mov	r0, r8
   8c016:	f7ff fbc9 	bl	8b7ac <__malloc_unlock>
   8c01a:	4630      	mov	r0, r6
   8c01c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c020:	07c9      	lsls	r1, r1, #31
   8c022:	d48a      	bmi.n	8bf3a <_realloc_r+0x8a>
   8c024:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8c028:	eba9 0a03 	sub.w	sl, r9, r3
   8c02c:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c030:	f021 0103 	bic.w	r1, r1, #3
   8c034:	e77d      	b.n	8bf32 <_realloc_r+0x82>
   8c036:	4611      	mov	r1, r2
   8c038:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c03c:	f7ff b842 	b.w	8b0c4 <_malloc_r>
   8c040:	f002 0201 	and.w	r2, r2, #1
   8c044:	eb09 0105 	add.w	r1, r9, r5
   8c048:	f043 0301 	orr.w	r3, r3, #1
   8c04c:	432a      	orrs	r2, r5
   8c04e:	f8c9 2004 	str.w	r2, [r9, #4]
   8c052:	444f      	add	r7, r9
   8c054:	604b      	str	r3, [r1, #4]
   8c056:	687b      	ldr	r3, [r7, #4]
   8c058:	4640      	mov	r0, r8
   8c05a:	f043 0301 	orr.w	r3, r3, #1
   8c05e:	3108      	adds	r1, #8
   8c060:	607b      	str	r3, [r7, #4]
   8c062:	f7fe fd05 	bl	8aa70 <_free_r>
   8c066:	e7d4      	b.n	8c012 <_realloc_r+0x162>
   8c068:	f8dc b004 	ldr.w	fp, [ip, #4]
   8c06c:	f105 0010 	add.w	r0, r5, #16
   8c070:	f02b 0b03 	bic.w	fp, fp, #3
   8c074:	eb07 0c0b 	add.w	ip, r7, fp
   8c078:	4584      	cmp	ip, r0
   8c07a:	da4d      	bge.n	8c118 <_realloc_r+0x268>
   8c07c:	07c9      	lsls	r1, r1, #31
   8c07e:	f53f af5c 	bmi.w	8bf3a <_realloc_r+0x8a>
   8c082:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8c086:	eba9 0a01 	sub.w	sl, r9, r1
   8c08a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8c08e:	f021 0103 	bic.w	r1, r1, #3
   8c092:	448b      	add	fp, r1
   8c094:	44bb      	add	fp, r7
   8c096:	4558      	cmp	r0, fp
   8c098:	f73f af4b 	bgt.w	8bf32 <_realloc_r+0x82>
   8c09c:	4656      	mov	r6, sl
   8c09e:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c0a2:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8c0a6:	1f3a      	subs	r2, r7, #4
   8c0a8:	2a24      	cmp	r2, #36	; 0x24
   8c0aa:	60c1      	str	r1, [r0, #12]
   8c0ac:	6088      	str	r0, [r1, #8]
   8c0ae:	f200 80bd 	bhi.w	8c22c <_realloc_r+0x37c>
   8c0b2:	2a13      	cmp	r2, #19
   8c0b4:	f240 80b8 	bls.w	8c228 <_realloc_r+0x378>
   8c0b8:	6821      	ldr	r1, [r4, #0]
   8c0ba:	2a1b      	cmp	r2, #27
   8c0bc:	f8ca 1008 	str.w	r1, [sl, #8]
   8c0c0:	6861      	ldr	r1, [r4, #4]
   8c0c2:	f8ca 100c 	str.w	r1, [sl, #12]
   8c0c6:	f200 80c1 	bhi.w	8c24c <_realloc_r+0x39c>
   8c0ca:	3408      	adds	r4, #8
   8c0cc:	f10a 0210 	add.w	r2, sl, #16
   8c0d0:	6821      	ldr	r1, [r4, #0]
   8c0d2:	6011      	str	r1, [r2, #0]
   8c0d4:	6861      	ldr	r1, [r4, #4]
   8c0d6:	6051      	str	r1, [r2, #4]
   8c0d8:	68a1      	ldr	r1, [r4, #8]
   8c0da:	6091      	str	r1, [r2, #8]
   8c0dc:	ebab 0205 	sub.w	r2, fp, r5
   8c0e0:	eb0a 0105 	add.w	r1, sl, r5
   8c0e4:	f042 0201 	orr.w	r2, r2, #1
   8c0e8:	6099      	str	r1, [r3, #8]
   8c0ea:	604a      	str	r2, [r1, #4]
   8c0ec:	f8da 3004 	ldr.w	r3, [sl, #4]
   8c0f0:	4640      	mov	r0, r8
   8c0f2:	f003 0301 	and.w	r3, r3, #1
   8c0f6:	431d      	orrs	r5, r3
   8c0f8:	f8ca 5004 	str.w	r5, [sl, #4]
   8c0fc:	f7ff fb56 	bl	8b7ac <__malloc_unlock>
   8c100:	e74d      	b.n	8bf9e <_realloc_r+0xee>
   8c102:	6823      	ldr	r3, [r4, #0]
   8c104:	2a1b      	cmp	r2, #27
   8c106:	6003      	str	r3, [r0, #0]
   8c108:	6863      	ldr	r3, [r4, #4]
   8c10a:	6043      	str	r3, [r0, #4]
   8c10c:	d849      	bhi.n	8c1a2 <_realloc_r+0x2f2>
   8c10e:	f104 0208 	add.w	r2, r4, #8
   8c112:	f100 0308 	add.w	r3, r0, #8
   8c116:	e729      	b.n	8bf6c <_realloc_r+0xbc>
   8c118:	ebac 0205 	sub.w	r2, ip, r5
   8c11c:	eb09 0105 	add.w	r1, r9, r5
   8c120:	f042 0201 	orr.w	r2, r2, #1
   8c124:	6099      	str	r1, [r3, #8]
   8c126:	604a      	str	r2, [r1, #4]
   8c128:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c12c:	4640      	mov	r0, r8
   8c12e:	f003 0301 	and.w	r3, r3, #1
   8c132:	431d      	orrs	r5, r3
   8c134:	f844 5c04 	str.w	r5, [r4, #-4]
   8c138:	f7ff fb38 	bl	8b7ac <__malloc_unlock>
   8c13c:	4626      	mov	r6, r4
   8c13e:	e72e      	b.n	8bf9e <_realloc_r+0xee>
   8c140:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8c144:	461f      	mov	r7, r3
   8c146:	60ca      	str	r2, [r1, #12]
   8c148:	6091      	str	r1, [r2, #8]
   8c14a:	e752      	b.n	8bff2 <_realloc_r+0x142>
   8c14c:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8c150:	f023 0303 	bic.w	r3, r3, #3
   8c154:	441f      	add	r7, r3
   8c156:	e74c      	b.n	8bff2 <_realloc_r+0x142>
   8c158:	4656      	mov	r6, sl
   8c15a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8c15e:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8c162:	1f3a      	subs	r2, r7, #4
   8c164:	2a24      	cmp	r2, #36	; 0x24
   8c166:	60c1      	str	r1, [r0, #12]
   8c168:	6088      	str	r0, [r1, #8]
   8c16a:	d827      	bhi.n	8c1bc <_realloc_r+0x30c>
   8c16c:	2a13      	cmp	r2, #19
   8c16e:	d923      	bls.n	8c1b8 <_realloc_r+0x308>
   8c170:	6821      	ldr	r1, [r4, #0]
   8c172:	2a1b      	cmp	r2, #27
   8c174:	f8ca 1008 	str.w	r1, [sl, #8]
   8c178:	6861      	ldr	r1, [r4, #4]
   8c17a:	f8ca 100c 	str.w	r1, [sl, #12]
   8c17e:	d82f      	bhi.n	8c1e0 <_realloc_r+0x330>
   8c180:	3408      	adds	r4, #8
   8c182:	f10a 0210 	add.w	r2, sl, #16
   8c186:	6821      	ldr	r1, [r4, #0]
   8c188:	461f      	mov	r7, r3
   8c18a:	6011      	str	r1, [r2, #0]
   8c18c:	6863      	ldr	r3, [r4, #4]
   8c18e:	46d1      	mov	r9, sl
   8c190:	6053      	str	r3, [r2, #4]
   8c192:	68a3      	ldr	r3, [r4, #8]
   8c194:	4634      	mov	r4, r6
   8c196:	6093      	str	r3, [r2, #8]
   8c198:	e72b      	b.n	8bff2 <_realloc_r+0x142>
   8c19a:	4621      	mov	r1, r4
   8c19c:	f7ff fa96 	bl	8b6cc <memmove>
   8c1a0:	e6ea      	b.n	8bf78 <_realloc_r+0xc8>
   8c1a2:	68a3      	ldr	r3, [r4, #8]
   8c1a4:	2a24      	cmp	r2, #36	; 0x24
   8c1a6:	6083      	str	r3, [r0, #8]
   8c1a8:	68e3      	ldr	r3, [r4, #12]
   8c1aa:	60c3      	str	r3, [r0, #12]
   8c1ac:	d024      	beq.n	8c1f8 <_realloc_r+0x348>
   8c1ae:	f104 0210 	add.w	r2, r4, #16
   8c1b2:	f100 0310 	add.w	r3, r0, #16
   8c1b6:	e6d9      	b.n	8bf6c <_realloc_r+0xbc>
   8c1b8:	4632      	mov	r2, r6
   8c1ba:	e7e4      	b.n	8c186 <_realloc_r+0x2d6>
   8c1bc:	4621      	mov	r1, r4
   8c1be:	4630      	mov	r0, r6
   8c1c0:	461f      	mov	r7, r3
   8c1c2:	46d1      	mov	r9, sl
   8c1c4:	f7ff fa82 	bl	8b6cc <memmove>
   8c1c8:	4634      	mov	r4, r6
   8c1ca:	e712      	b.n	8bff2 <_realloc_r+0x142>
   8c1cc:	4633      	mov	r3, r6
   8c1ce:	e707      	b.n	8bfe0 <_realloc_r+0x130>
   8c1d0:	4621      	mov	r1, r4
   8c1d2:	4630      	mov	r0, r6
   8c1d4:	4667      	mov	r7, ip
   8c1d6:	46d1      	mov	r9, sl
   8c1d8:	f7ff fa78 	bl	8b6cc <memmove>
   8c1dc:	4634      	mov	r4, r6
   8c1de:	e708      	b.n	8bff2 <_realloc_r+0x142>
   8c1e0:	68a1      	ldr	r1, [r4, #8]
   8c1e2:	2a24      	cmp	r2, #36	; 0x24
   8c1e4:	f8ca 1010 	str.w	r1, [sl, #16]
   8c1e8:	68e1      	ldr	r1, [r4, #12]
   8c1ea:	f8ca 1014 	str.w	r1, [sl, #20]
   8c1ee:	d023      	beq.n	8c238 <_realloc_r+0x388>
   8c1f0:	3410      	adds	r4, #16
   8c1f2:	f10a 0218 	add.w	r2, sl, #24
   8c1f6:	e7c6      	b.n	8c186 <_realloc_r+0x2d6>
   8c1f8:	6923      	ldr	r3, [r4, #16]
   8c1fa:	f104 0218 	add.w	r2, r4, #24
   8c1fe:	6103      	str	r3, [r0, #16]
   8c200:	6961      	ldr	r1, [r4, #20]
   8c202:	f100 0318 	add.w	r3, r0, #24
   8c206:	6141      	str	r1, [r0, #20]
   8c208:	e6b0      	b.n	8bf6c <_realloc_r+0xbc>
   8c20a:	bf00      	nop
   8c20c:	200009e0 	.word	0x200009e0
   8c210:	68a3      	ldr	r3, [r4, #8]
   8c212:	2a24      	cmp	r2, #36	; 0x24
   8c214:	f8ca 3010 	str.w	r3, [sl, #16]
   8c218:	68e3      	ldr	r3, [r4, #12]
   8c21a:	f8ca 3014 	str.w	r3, [sl, #20]
   8c21e:	d021      	beq.n	8c264 <_realloc_r+0x3b4>
   8c220:	3410      	adds	r4, #16
   8c222:	f10a 0318 	add.w	r3, sl, #24
   8c226:	e6db      	b.n	8bfe0 <_realloc_r+0x130>
   8c228:	4632      	mov	r2, r6
   8c22a:	e751      	b.n	8c0d0 <_realloc_r+0x220>
   8c22c:	4621      	mov	r1, r4
   8c22e:	4630      	mov	r0, r6
   8c230:	f7ff fa4c 	bl	8b6cc <memmove>
   8c234:	4b15      	ldr	r3, [pc, #84]	; (8c28c <_realloc_r+0x3dc>)
   8c236:	e751      	b.n	8c0dc <_realloc_r+0x22c>
   8c238:	6921      	ldr	r1, [r4, #16]
   8c23a:	f10a 0220 	add.w	r2, sl, #32
   8c23e:	f8ca 1018 	str.w	r1, [sl, #24]
   8c242:	6961      	ldr	r1, [r4, #20]
   8c244:	3418      	adds	r4, #24
   8c246:	f8ca 101c 	str.w	r1, [sl, #28]
   8c24a:	e79c      	b.n	8c186 <_realloc_r+0x2d6>
   8c24c:	68a1      	ldr	r1, [r4, #8]
   8c24e:	2a24      	cmp	r2, #36	; 0x24
   8c250:	f8ca 1010 	str.w	r1, [sl, #16]
   8c254:	68e1      	ldr	r1, [r4, #12]
   8c256:	f8ca 1014 	str.w	r1, [sl, #20]
   8c25a:	d00d      	beq.n	8c278 <_realloc_r+0x3c8>
   8c25c:	3410      	adds	r4, #16
   8c25e:	f10a 0218 	add.w	r2, sl, #24
   8c262:	e735      	b.n	8c0d0 <_realloc_r+0x220>
   8c264:	6922      	ldr	r2, [r4, #16]
   8c266:	f10a 0320 	add.w	r3, sl, #32
   8c26a:	f8ca 2018 	str.w	r2, [sl, #24]
   8c26e:	6962      	ldr	r2, [r4, #20]
   8c270:	3418      	adds	r4, #24
   8c272:	f8ca 201c 	str.w	r2, [sl, #28]
   8c276:	e6b3      	b.n	8bfe0 <_realloc_r+0x130>
   8c278:	6921      	ldr	r1, [r4, #16]
   8c27a:	f10a 0220 	add.w	r2, sl, #32
   8c27e:	f8ca 1018 	str.w	r1, [sl, #24]
   8c282:	6961      	ldr	r1, [r4, #20]
   8c284:	3418      	adds	r4, #24
   8c286:	f8ca 101c 	str.w	r1, [sl, #28]
   8c28a:	e721      	b.n	8c0d0 <_realloc_r+0x220>
   8c28c:	200009e0 	.word	0x200009e0

0008c290 <frexp>:
   8c290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c292:	4617      	mov	r7, r2
   8c294:	2200      	movs	r2, #0
   8c296:	f8df c060 	ldr.w	ip, [pc, #96]	; 8c2f8 <frexp+0x68>
   8c29a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c29e:	4563      	cmp	r3, ip
   8c2a0:	4604      	mov	r4, r0
   8c2a2:	460d      	mov	r5, r1
   8c2a4:	603a      	str	r2, [r7, #0]
   8c2a6:	dc22      	bgt.n	8c2ee <frexp+0x5e>
   8c2a8:	4684      	mov	ip, r0
   8c2aa:	ea53 0c0c 	orrs.w	ip, r3, ip
   8c2ae:	d01e      	beq.n	8c2ee <frexp+0x5e>
   8c2b0:	f8df c048 	ldr.w	ip, [pc, #72]	; 8c2fc <frexp+0x6c>
   8c2b4:	460e      	mov	r6, r1
   8c2b6:	ea01 0c0c 	and.w	ip, r1, ip
   8c2ba:	f1bc 0f00 	cmp.w	ip, #0
   8c2be:	d109      	bne.n	8c2d4 <frexp+0x44>
   8c2c0:	2200      	movs	r2, #0
   8c2c2:	4b0c      	ldr	r3, [pc, #48]	; (8c2f4 <frexp+0x64>)
   8c2c4:	f000 fd70 	bl	8cda8 <__aeabi_dmul>
   8c2c8:	f06f 0235 	mvn.w	r2, #53	; 0x35
   8c2cc:	4604      	mov	r4, r0
   8c2ce:	460e      	mov	r6, r1
   8c2d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c2d4:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   8c2d8:	151b      	asrs	r3, r3, #20
   8c2da:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   8c2de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8c2e2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
   8c2e6:	4413      	add	r3, r2
   8c2e8:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8c2ec:	603b      	str	r3, [r7, #0]
   8c2ee:	4620      	mov	r0, r4
   8c2f0:	4629      	mov	r1, r5
   8c2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c2f4:	43500000 	.word	0x43500000
   8c2f8:	7fefffff 	.word	0x7fefffff
   8c2fc:	7ff00000 	.word	0x7ff00000

0008c300 <_sbrk_r>:
   8c300:	2200      	movs	r2, #0
   8c302:	b538      	push	{r3, r4, r5, lr}
   8c304:	4d06      	ldr	r5, [pc, #24]	; (8c320 <_sbrk_r+0x20>)
   8c306:	4604      	mov	r4, r0
   8c308:	4608      	mov	r0, r1
   8c30a:	602a      	str	r2, [r5, #0]
   8c30c:	f7f6 fea0 	bl	83050 <_sbrk>
   8c310:	1c43      	adds	r3, r0, #1
   8c312:	d000      	beq.n	8c316 <_sbrk_r+0x16>
   8c314:	bd38      	pop	{r3, r4, r5, pc}
   8c316:	682b      	ldr	r3, [r5, #0]
   8c318:	2b00      	cmp	r3, #0
   8c31a:	d0fb      	beq.n	8c314 <_sbrk_r+0x14>
   8c31c:	6023      	str	r3, [r4, #0]
   8c31e:	bd38      	pop	{r3, r4, r5, pc}
   8c320:	2000186c 	.word	0x2000186c

0008c324 <__sread>:
   8c324:	b510      	push	{r4, lr}
   8c326:	460c      	mov	r4, r1
   8c328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c32c:	f000 fb16 	bl	8c95c <_read_r>
   8c330:	2800      	cmp	r0, #0
   8c332:	db03      	blt.n	8c33c <__sread+0x18>
   8c334:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8c336:	4403      	add	r3, r0
   8c338:	6523      	str	r3, [r4, #80]	; 0x50
   8c33a:	bd10      	pop	{r4, pc}
   8c33c:	89a3      	ldrh	r3, [r4, #12]
   8c33e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8c342:	81a3      	strh	r3, [r4, #12]
   8c344:	bd10      	pop	{r4, pc}
   8c346:	bf00      	nop

0008c348 <__swrite>:
   8c348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c34c:	460c      	mov	r4, r1
   8c34e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8c352:	461f      	mov	r7, r3
   8c354:	05cb      	lsls	r3, r1, #23
   8c356:	4616      	mov	r6, r2
   8c358:	4605      	mov	r5, r0
   8c35a:	d40b      	bmi.n	8c374 <__swrite+0x2c>
   8c35c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8c360:	81a1      	strh	r1, [r4, #12]
   8c362:	463b      	mov	r3, r7
   8c364:	4632      	mov	r2, r6
   8c366:	4628      	mov	r0, r5
   8c368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c36c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8c370:	f000 b980 	b.w	8c674 <_write_r>
   8c374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c378:	2302      	movs	r3, #2
   8c37a:	2200      	movs	r2, #0
   8c37c:	f000 fad8 	bl	8c930 <_lseek_r>
   8c380:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8c384:	e7ea      	b.n	8c35c <__swrite+0x14>
   8c386:	bf00      	nop

0008c388 <__sseek>:
   8c388:	b510      	push	{r4, lr}
   8c38a:	460c      	mov	r4, r1
   8c38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c390:	f000 face 	bl	8c930 <_lseek_r>
   8c394:	89a3      	ldrh	r3, [r4, #12]
   8c396:	1c42      	adds	r2, r0, #1
   8c398:	bf0e      	itee	eq
   8c39a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8c39e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8c3a2:	6520      	strne	r0, [r4, #80]	; 0x50
   8c3a4:	81a3      	strh	r3, [r4, #12]
   8c3a6:	bd10      	pop	{r4, pc}

0008c3a8 <__sclose>:
   8c3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c3ac:	f000 ba0c 	b.w	8c7c8 <_close_r>

0008c3b0 <strlen>:
   8c3b0:	f020 0103 	bic.w	r1, r0, #3
   8c3b4:	f010 0003 	ands.w	r0, r0, #3
   8c3b8:	f1c0 0000 	rsb	r0, r0, #0
   8c3bc:	f851 3b04 	ldr.w	r3, [r1], #4
   8c3c0:	f100 0c04 	add.w	ip, r0, #4
   8c3c4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8c3c8:	f06f 0200 	mvn.w	r2, #0
   8c3cc:	bf1c      	itt	ne
   8c3ce:	fa22 f20c 	lsrne.w	r2, r2, ip
   8c3d2:	4313      	orrne	r3, r2
   8c3d4:	f04f 0c01 	mov.w	ip, #1
   8c3d8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8c3dc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8c3e0:	eba3 020c 	sub.w	r2, r3, ip
   8c3e4:	ea22 0203 	bic.w	r2, r2, r3
   8c3e8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8c3ec:	bf04      	itt	eq
   8c3ee:	f851 3b04 	ldreq.w	r3, [r1], #4
   8c3f2:	3004      	addeq	r0, #4
   8c3f4:	d0f4      	beq.n	8c3e0 <strlen+0x30>
   8c3f6:	f1c2 0100 	rsb	r1, r2, #0
   8c3fa:	ea02 0201 	and.w	r2, r2, r1
   8c3fe:	fab2 f282 	clz	r2, r2
   8c402:	f1c2 021f 	rsb	r2, r2, #31
   8c406:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8c40a:	4770      	bx	lr

0008c40c <strncpy>:
   8c40c:	b470      	push	{r4, r5, r6}
   8c40e:	ea40 0401 	orr.w	r4, r0, r1
   8c412:	07a3      	lsls	r3, r4, #30
   8c414:	d122      	bne.n	8c45c <strncpy+0x50>
   8c416:	2a03      	cmp	r2, #3
   8c418:	d920      	bls.n	8c45c <strncpy+0x50>
   8c41a:	460b      	mov	r3, r1
   8c41c:	4604      	mov	r4, r0
   8c41e:	4619      	mov	r1, r3
   8c420:	f853 6b04 	ldr.w	r6, [r3], #4
   8c424:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   8c428:	ea25 0506 	bic.w	r5, r5, r6
   8c42c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   8c430:	d115      	bne.n	8c45e <strncpy+0x52>
   8c432:	3a04      	subs	r2, #4
   8c434:	2a03      	cmp	r2, #3
   8c436:	4619      	mov	r1, r3
   8c438:	f844 6b04 	str.w	r6, [r4], #4
   8c43c:	d8ef      	bhi.n	8c41e <strncpy+0x12>
   8c43e:	1e4d      	subs	r5, r1, #1
   8c440:	b152      	cbz	r2, 8c458 <strncpy+0x4c>
   8c442:	4623      	mov	r3, r4
   8c444:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   8c448:	1e56      	subs	r6, r2, #1
   8c44a:	f803 1b01 	strb.w	r1, [r3], #1
   8c44e:	b141      	cbz	r1, 8c462 <strncpy+0x56>
   8c450:	4632      	mov	r2, r6
   8c452:	461c      	mov	r4, r3
   8c454:	2a00      	cmp	r2, #0
   8c456:	d1f4      	bne.n	8c442 <strncpy+0x36>
   8c458:	bc70      	pop	{r4, r5, r6}
   8c45a:	4770      	bx	lr
   8c45c:	4604      	mov	r4, r0
   8c45e:	1e4d      	subs	r5, r1, #1
   8c460:	e7ee      	b.n	8c440 <strncpy+0x34>
   8c462:	4422      	add	r2, r4
   8c464:	2e00      	cmp	r6, #0
   8c466:	d0f7      	beq.n	8c458 <strncpy+0x4c>
   8c468:	f803 1b01 	strb.w	r1, [r3], #1
   8c46c:	4293      	cmp	r3, r2
   8c46e:	d1fb      	bne.n	8c468 <strncpy+0x5c>
   8c470:	bc70      	pop	{r4, r5, r6}
   8c472:	4770      	bx	lr

0008c474 <__ssprint_r>:
   8c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c478:	6893      	ldr	r3, [r2, #8]
   8c47a:	4691      	mov	r9, r2
   8c47c:	b083      	sub	sp, #12
   8c47e:	2b00      	cmp	r3, #0
   8c480:	d06d      	beq.n	8c55e <__ssprint_r+0xea>
   8c482:	6817      	ldr	r7, [r2, #0]
   8c484:	4680      	mov	r8, r0
   8c486:	460c      	mov	r4, r1
   8c488:	6808      	ldr	r0, [r1, #0]
   8c48a:	688d      	ldr	r5, [r1, #8]
   8c48c:	3708      	adds	r7, #8
   8c48e:	e043      	b.n	8c518 <__ssprint_r+0xa4>
   8c490:	89a3      	ldrh	r3, [r4, #12]
   8c492:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8c496:	d02e      	beq.n	8c4f6 <__ssprint_r+0x82>
   8c498:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   8c49c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8c4a0:	eba0 0a01 	sub.w	sl, r0, r1
   8c4a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8c4a8:	eb0a 0006 	add.w	r0, sl, r6
   8c4ac:	106d      	asrs	r5, r5, #1
   8c4ae:	3001      	adds	r0, #1
   8c4b0:	42a8      	cmp	r0, r5
   8c4b2:	462a      	mov	r2, r5
   8c4b4:	bf84      	itt	hi
   8c4b6:	4605      	movhi	r5, r0
   8c4b8:	462a      	movhi	r2, r5
   8c4ba:	055b      	lsls	r3, r3, #21
   8c4bc:	d536      	bpl.n	8c52c <__ssprint_r+0xb8>
   8c4be:	4611      	mov	r1, r2
   8c4c0:	4640      	mov	r0, r8
   8c4c2:	f7fe fdff 	bl	8b0c4 <_malloc_r>
   8c4c6:	2800      	cmp	r0, #0
   8c4c8:	d03a      	beq.n	8c540 <__ssprint_r+0xcc>
   8c4ca:	4652      	mov	r2, sl
   8c4cc:	6921      	ldr	r1, [r4, #16]
   8c4ce:	9001      	str	r0, [sp, #4]
   8c4d0:	f7fa faa2 	bl	86a18 <memcpy>
   8c4d4:	89a2      	ldrh	r2, [r4, #12]
   8c4d6:	9b01      	ldr	r3, [sp, #4]
   8c4d8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8c4dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8c4e0:	81a2      	strh	r2, [r4, #12]
   8c4e2:	eba5 020a 	sub.w	r2, r5, sl
   8c4e6:	eb03 000a 	add.w	r0, r3, sl
   8c4ea:	6165      	str	r5, [r4, #20]
   8c4ec:	46b2      	mov	sl, r6
   8c4ee:	4635      	mov	r5, r6
   8c4f0:	6123      	str	r3, [r4, #16]
   8c4f2:	6020      	str	r0, [r4, #0]
   8c4f4:	60a2      	str	r2, [r4, #8]
   8c4f6:	4659      	mov	r1, fp
   8c4f8:	4652      	mov	r2, sl
   8c4fa:	f7ff f8e7 	bl	8b6cc <memmove>
   8c4fe:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8c502:	68a1      	ldr	r1, [r4, #8]
   8c504:	6820      	ldr	r0, [r4, #0]
   8c506:	1b4d      	subs	r5, r1, r5
   8c508:	4450      	add	r0, sl
   8c50a:	1b9e      	subs	r6, r3, r6
   8c50c:	60a5      	str	r5, [r4, #8]
   8c50e:	6020      	str	r0, [r4, #0]
   8c510:	f8c9 6008 	str.w	r6, [r9, #8]
   8c514:	b31e      	cbz	r6, 8c55e <__ssprint_r+0xea>
   8c516:	3708      	adds	r7, #8
   8c518:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8c51c:	2e00      	cmp	r6, #0
   8c51e:	d0fa      	beq.n	8c516 <__ssprint_r+0xa2>
   8c520:	42b5      	cmp	r5, r6
   8c522:	46aa      	mov	sl, r5
   8c524:	d9b4      	bls.n	8c490 <__ssprint_r+0x1c>
   8c526:	4635      	mov	r5, r6
   8c528:	46b2      	mov	sl, r6
   8c52a:	e7e4      	b.n	8c4f6 <__ssprint_r+0x82>
   8c52c:	4640      	mov	r0, r8
   8c52e:	f7ff fcbf 	bl	8beb0 <_realloc_r>
   8c532:	4603      	mov	r3, r0
   8c534:	2800      	cmp	r0, #0
   8c536:	d1d4      	bne.n	8c4e2 <__ssprint_r+0x6e>
   8c538:	4640      	mov	r0, r8
   8c53a:	6921      	ldr	r1, [r4, #16]
   8c53c:	f7fe fa98 	bl	8aa70 <_free_r>
   8c540:	230c      	movs	r3, #12
   8c542:	2200      	movs	r2, #0
   8c544:	f04f 30ff 	mov.w	r0, #4294967295
   8c548:	f8c8 3000 	str.w	r3, [r8]
   8c54c:	89a3      	ldrh	r3, [r4, #12]
   8c54e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c552:	81a3      	strh	r3, [r4, #12]
   8c554:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8c558:	b003      	add	sp, #12
   8c55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c55e:	2000      	movs	r0, #0
   8c560:	f8c9 0004 	str.w	r0, [r9, #4]
   8c564:	b003      	add	sp, #12
   8c566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c56a:	bf00      	nop

0008c56c <__swbuf_r>:
   8c56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c56e:	460d      	mov	r5, r1
   8c570:	4614      	mov	r4, r2
   8c572:	4606      	mov	r6, r0
   8c574:	b110      	cbz	r0, 8c57c <__swbuf_r+0x10>
   8c576:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c578:	2b00      	cmp	r3, #0
   8c57a:	d043      	beq.n	8c604 <__swbuf_r+0x98>
   8c57c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c580:	69a3      	ldr	r3, [r4, #24]
   8c582:	0717      	lsls	r7, r2, #28
   8c584:	60a3      	str	r3, [r4, #8]
   8c586:	b290      	uxth	r0, r2
   8c588:	d51b      	bpl.n	8c5c2 <__swbuf_r+0x56>
   8c58a:	6923      	ldr	r3, [r4, #16]
   8c58c:	b1cb      	cbz	r3, 8c5c2 <__swbuf_r+0x56>
   8c58e:	b2ed      	uxtb	r5, r5
   8c590:	0481      	lsls	r1, r0, #18
   8c592:	462f      	mov	r7, r5
   8c594:	d522      	bpl.n	8c5dc <__swbuf_r+0x70>
   8c596:	6822      	ldr	r2, [r4, #0]
   8c598:	6961      	ldr	r1, [r4, #20]
   8c59a:	1ad3      	subs	r3, r2, r3
   8c59c:	4299      	cmp	r1, r3
   8c59e:	dd29      	ble.n	8c5f4 <__swbuf_r+0x88>
   8c5a0:	3301      	adds	r3, #1
   8c5a2:	68a1      	ldr	r1, [r4, #8]
   8c5a4:	1c50      	adds	r0, r2, #1
   8c5a6:	3901      	subs	r1, #1
   8c5a8:	60a1      	str	r1, [r4, #8]
   8c5aa:	6020      	str	r0, [r4, #0]
   8c5ac:	7015      	strb	r5, [r2, #0]
   8c5ae:	6962      	ldr	r2, [r4, #20]
   8c5b0:	429a      	cmp	r2, r3
   8c5b2:	d02a      	beq.n	8c60a <__swbuf_r+0x9e>
   8c5b4:	89a3      	ldrh	r3, [r4, #12]
   8c5b6:	07db      	lsls	r3, r3, #31
   8c5b8:	d501      	bpl.n	8c5be <__swbuf_r+0x52>
   8c5ba:	2d0a      	cmp	r5, #10
   8c5bc:	d025      	beq.n	8c60a <__swbuf_r+0x9e>
   8c5be:	4638      	mov	r0, r7
   8c5c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c5c2:	4621      	mov	r1, r4
   8c5c4:	4630      	mov	r0, r6
   8c5c6:	f7fc ffcd 	bl	89564 <__swsetup_r>
   8c5ca:	bb20      	cbnz	r0, 8c616 <__swbuf_r+0xaa>
   8c5cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c5d0:	b2ed      	uxtb	r5, r5
   8c5d2:	b290      	uxth	r0, r2
   8c5d4:	0481      	lsls	r1, r0, #18
   8c5d6:	462f      	mov	r7, r5
   8c5d8:	6923      	ldr	r3, [r4, #16]
   8c5da:	d4dc      	bmi.n	8c596 <__swbuf_r+0x2a>
   8c5dc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8c5de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8c5e2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8c5e6:	81a2      	strh	r2, [r4, #12]
   8c5e8:	6822      	ldr	r2, [r4, #0]
   8c5ea:	6661      	str	r1, [r4, #100]	; 0x64
   8c5ec:	6961      	ldr	r1, [r4, #20]
   8c5ee:	1ad3      	subs	r3, r2, r3
   8c5f0:	4299      	cmp	r1, r3
   8c5f2:	dcd5      	bgt.n	8c5a0 <__swbuf_r+0x34>
   8c5f4:	4621      	mov	r1, r4
   8c5f6:	4630      	mov	r0, r6
   8c5f8:	f7fe f8ba 	bl	8a770 <_fflush_r>
   8c5fc:	b958      	cbnz	r0, 8c616 <__swbuf_r+0xaa>
   8c5fe:	2301      	movs	r3, #1
   8c600:	6822      	ldr	r2, [r4, #0]
   8c602:	e7ce      	b.n	8c5a2 <__swbuf_r+0x36>
   8c604:	f7fe f910 	bl	8a828 <__sinit>
   8c608:	e7b8      	b.n	8c57c <__swbuf_r+0x10>
   8c60a:	4621      	mov	r1, r4
   8c60c:	4630      	mov	r0, r6
   8c60e:	f7fe f8af 	bl	8a770 <_fflush_r>
   8c612:	2800      	cmp	r0, #0
   8c614:	d0d3      	beq.n	8c5be <__swbuf_r+0x52>
   8c616:	f04f 37ff 	mov.w	r7, #4294967295
   8c61a:	e7d0      	b.n	8c5be <__swbuf_r+0x52>

0008c61c <_wcrtomb_r>:
   8c61c:	b570      	push	{r4, r5, r6, lr}
   8c61e:	4606      	mov	r6, r0
   8c620:	461d      	mov	r5, r3
   8c622:	b084      	sub	sp, #16
   8c624:	b139      	cbz	r1, 8c636 <_wcrtomb_r+0x1a>
   8c626:	4c0b      	ldr	r4, [pc, #44]	; (8c654 <_wcrtomb_r+0x38>)
   8c628:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8c62c:	47a0      	blx	r4
   8c62e:	1c43      	adds	r3, r0, #1
   8c630:	d00a      	beq.n	8c648 <_wcrtomb_r+0x2c>
   8c632:	b004      	add	sp, #16
   8c634:	bd70      	pop	{r4, r5, r6, pc}
   8c636:	460c      	mov	r4, r1
   8c638:	4906      	ldr	r1, [pc, #24]	; (8c654 <_wcrtomb_r+0x38>)
   8c63a:	4622      	mov	r2, r4
   8c63c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
   8c640:	a901      	add	r1, sp, #4
   8c642:	47a0      	blx	r4
   8c644:	1c43      	adds	r3, r0, #1
   8c646:	d1f4      	bne.n	8c632 <_wcrtomb_r+0x16>
   8c648:	2200      	movs	r2, #0
   8c64a:	238a      	movs	r3, #138	; 0x8a
   8c64c:	602a      	str	r2, [r5, #0]
   8c64e:	6033      	str	r3, [r6, #0]
   8c650:	b004      	add	sp, #16
   8c652:	bd70      	pop	{r4, r5, r6, pc}
   8c654:	20000874 	.word	0x20000874

0008c658 <__ascii_wctomb>:
   8c658:	4603      	mov	r3, r0
   8c65a:	b149      	cbz	r1, 8c670 <__ascii_wctomb+0x18>
   8c65c:	2aff      	cmp	r2, #255	; 0xff
   8c65e:	d802      	bhi.n	8c666 <__ascii_wctomb+0xe>
   8c660:	2001      	movs	r0, #1
   8c662:	700a      	strb	r2, [r1, #0]
   8c664:	4770      	bx	lr
   8c666:	228a      	movs	r2, #138	; 0x8a
   8c668:	f04f 30ff 	mov.w	r0, #4294967295
   8c66c:	601a      	str	r2, [r3, #0]
   8c66e:	4770      	bx	lr
   8c670:	4608      	mov	r0, r1
   8c672:	4770      	bx	lr

0008c674 <_write_r>:
   8c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c676:	460f      	mov	r7, r1
   8c678:	2600      	movs	r6, #0
   8c67a:	4d08      	ldr	r5, [pc, #32]	; (8c69c <_write_r+0x28>)
   8c67c:	4611      	mov	r1, r2
   8c67e:	4604      	mov	r4, r0
   8c680:	461a      	mov	r2, r3
   8c682:	4638      	mov	r0, r7
   8c684:	602e      	str	r6, [r5, #0]
   8c686:	f7f9 ffdd 	bl	86644 <_write>
   8c68a:	1c43      	adds	r3, r0, #1
   8c68c:	d000      	beq.n	8c690 <_write_r+0x1c>
   8c68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c690:	682b      	ldr	r3, [r5, #0]
   8c692:	2b00      	cmp	r3, #0
   8c694:	d0fb      	beq.n	8c68e <_write_r+0x1a>
   8c696:	6023      	str	r3, [r4, #0]
   8c698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c69a:	bf00      	nop
   8c69c:	2000186c 	.word	0x2000186c

0008c6a0 <__register_exitproc>:
   8c6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c6a4:	f8df a080 	ldr.w	sl, [pc, #128]	; 8c728 <__register_exitproc+0x88>
   8c6a8:	4606      	mov	r6, r0
   8c6aa:	f8da 0000 	ldr.w	r0, [sl]
   8c6ae:	4698      	mov	r8, r3
   8c6b0:	460f      	mov	r7, r1
   8c6b2:	4691      	mov	r9, r2
   8c6b4:	f7fe fc8a 	bl	8afcc <__retarget_lock_acquire_recursive>
   8c6b8:	4b1a      	ldr	r3, [pc, #104]	; (8c724 <__register_exitproc+0x84>)
   8c6ba:	681b      	ldr	r3, [r3, #0]
   8c6bc:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8c6c0:	b324      	cbz	r4, 8c70c <__register_exitproc+0x6c>
   8c6c2:	6865      	ldr	r5, [r4, #4]
   8c6c4:	2d1f      	cmp	r5, #31
   8c6c6:	dc26      	bgt.n	8c716 <__register_exitproc+0x76>
   8c6c8:	b95e      	cbnz	r6, 8c6e2 <__register_exitproc+0x42>
   8c6ca:	1c6b      	adds	r3, r5, #1
   8c6cc:	3502      	adds	r5, #2
   8c6ce:	f8da 0000 	ldr.w	r0, [sl]
   8c6d2:	6063      	str	r3, [r4, #4]
   8c6d4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8c6d8:	f7fe fc7a 	bl	8afd0 <__retarget_lock_release_recursive>
   8c6dc:	2000      	movs	r0, #0
   8c6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c6e2:	2301      	movs	r3, #1
   8c6e4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8c6e8:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8c6ec:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8c6f0:	40ab      	lsls	r3, r5
   8c6f2:	431a      	orrs	r2, r3
   8c6f4:	2e02      	cmp	r6, #2
   8c6f6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8c6fa:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8c6fe:	d1e4      	bne.n	8c6ca <__register_exitproc+0x2a>
   8c700:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8c704:	4313      	orrs	r3, r2
   8c706:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8c70a:	e7de      	b.n	8c6ca <__register_exitproc+0x2a>
   8c70c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8c710:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8c714:	e7d5      	b.n	8c6c2 <__register_exitproc+0x22>
   8c716:	f8da 0000 	ldr.w	r0, [sl]
   8c71a:	f7fe fc59 	bl	8afd0 <__retarget_lock_release_recursive>
   8c71e:	f04f 30ff 	mov.w	r0, #4294967295
   8c722:	e7dc      	b.n	8c6de <__register_exitproc+0x3e>
   8c724:	0008d418 	.word	0x0008d418
   8c728:	20000870 	.word	0x20000870

0008c72c <__assert_func>:
   8c72c:	4614      	mov	r4, r2
   8c72e:	b500      	push	{lr}
   8c730:	4d09      	ldr	r5, [pc, #36]	; (8c758 <__assert_func+0x2c>)
   8c732:	461a      	mov	r2, r3
   8c734:	4603      	mov	r3, r0
   8c736:	6828      	ldr	r0, [r5, #0]
   8c738:	b085      	sub	sp, #20
   8c73a:	68c0      	ldr	r0, [r0, #12]
   8c73c:	b144      	cbz	r4, 8c750 <__assert_func+0x24>
   8c73e:	4d07      	ldr	r5, [pc, #28]	; (8c75c <__assert_func+0x30>)
   8c740:	9100      	str	r1, [sp, #0]
   8c742:	e9cd 5401 	strd	r5, r4, [sp, #4]
   8c746:	4906      	ldr	r1, [pc, #24]	; (8c760 <__assert_func+0x34>)
   8c748:	f000 f8b6 	bl	8c8b8 <fiprintf>
   8c74c:	f000 f91c 	bl	8c988 <abort>
   8c750:	4d04      	ldr	r5, [pc, #16]	; (8c764 <__assert_func+0x38>)
   8c752:	462c      	mov	r4, r5
   8c754:	e7f4      	b.n	8c740 <__assert_func+0x14>
   8c756:	bf00      	nop
   8c758:	20000440 	.word	0x20000440
   8c75c:	0008d6cc 	.word	0x0008d6cc
   8c760:	0008d6dc 	.word	0x0008d6dc
   8c764:	0008d6d8 	.word	0x0008d6d8

0008c768 <_calloc_r>:
   8c768:	b510      	push	{r4, lr}
   8c76a:	fb02 f101 	mul.w	r1, r2, r1
   8c76e:	f7fe fca9 	bl	8b0c4 <_malloc_r>
   8c772:	4604      	mov	r4, r0
   8c774:	b168      	cbz	r0, 8c792 <_calloc_r+0x2a>
   8c776:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8c77a:	f022 0203 	bic.w	r2, r2, #3
   8c77e:	3a04      	subs	r2, #4
   8c780:	2a24      	cmp	r2, #36	; 0x24
   8c782:	d818      	bhi.n	8c7b6 <_calloc_r+0x4e>
   8c784:	2a13      	cmp	r2, #19
   8c786:	d806      	bhi.n	8c796 <_calloc_r+0x2e>
   8c788:	4602      	mov	r2, r0
   8c78a:	2300      	movs	r3, #0
   8c78c:	e9c2 3300 	strd	r3, r3, [r2]
   8c790:	6093      	str	r3, [r2, #8]
   8c792:	4620      	mov	r0, r4
   8c794:	bd10      	pop	{r4, pc}
   8c796:	2300      	movs	r3, #0
   8c798:	2a1b      	cmp	r2, #27
   8c79a:	e9c0 3300 	strd	r3, r3, [r0]
   8c79e:	d90f      	bls.n	8c7c0 <_calloc_r+0x58>
   8c7a0:	2a24      	cmp	r2, #36	; 0x24
   8c7a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   8c7a6:	bf0a      	itet	eq
   8c7a8:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
   8c7ac:	f100 0210 	addne.w	r2, r0, #16
   8c7b0:	f100 0218 	addeq.w	r2, r0, #24
   8c7b4:	e7e9      	b.n	8c78a <_calloc_r+0x22>
   8c7b6:	2100      	movs	r1, #0
   8c7b8:	f7fa f9a4 	bl	86b04 <memset>
   8c7bc:	4620      	mov	r0, r4
   8c7be:	bd10      	pop	{r4, pc}
   8c7c0:	f100 0208 	add.w	r2, r0, #8
   8c7c4:	e7e1      	b.n	8c78a <_calloc_r+0x22>
   8c7c6:	bf00      	nop

0008c7c8 <_close_r>:
   8c7c8:	2200      	movs	r2, #0
   8c7ca:	b538      	push	{r3, r4, r5, lr}
   8c7cc:	4d06      	ldr	r5, [pc, #24]	; (8c7e8 <_close_r+0x20>)
   8c7ce:	4604      	mov	r4, r0
   8c7d0:	4608      	mov	r0, r1
   8c7d2:	602a      	str	r2, [r5, #0]
   8c7d4:	f7f6 fc68 	bl	830a8 <_close>
   8c7d8:	1c43      	adds	r3, r0, #1
   8c7da:	d000      	beq.n	8c7de <_close_r+0x16>
   8c7dc:	bd38      	pop	{r3, r4, r5, pc}
   8c7de:	682b      	ldr	r3, [r5, #0]
   8c7e0:	2b00      	cmp	r3, #0
   8c7e2:	d0fb      	beq.n	8c7dc <_close_r+0x14>
   8c7e4:	6023      	str	r3, [r4, #0]
   8c7e6:	bd38      	pop	{r3, r4, r5, pc}
   8c7e8:	2000186c 	.word	0x2000186c

0008c7ec <_fclose_r>:
   8c7ec:	b570      	push	{r4, r5, r6, lr}
   8c7ee:	2900      	cmp	r1, #0
   8c7f0:	d04b      	beq.n	8c88a <_fclose_r+0x9e>
   8c7f2:	460c      	mov	r4, r1
   8c7f4:	4605      	mov	r5, r0
   8c7f6:	b110      	cbz	r0, 8c7fe <_fclose_r+0x12>
   8c7f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c7fa:	2b00      	cmp	r3, #0
   8c7fc:	d048      	beq.n	8c890 <_fclose_r+0xa4>
   8c7fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c800:	07d8      	lsls	r0, r3, #31
   8c802:	d534      	bpl.n	8c86e <_fclose_r+0x82>
   8c804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c808:	2b00      	cmp	r3, #0
   8c80a:	d03e      	beq.n	8c88a <_fclose_r+0x9e>
   8c80c:	4621      	mov	r1, r4
   8c80e:	4628      	mov	r0, r5
   8c810:	f7fd ff16 	bl	8a640 <__sflush_r>
   8c814:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8c816:	4606      	mov	r6, r0
   8c818:	b133      	cbz	r3, 8c828 <_fclose_r+0x3c>
   8c81a:	4628      	mov	r0, r5
   8c81c:	69e1      	ldr	r1, [r4, #28]
   8c81e:	4798      	blx	r3
   8c820:	2800      	cmp	r0, #0
   8c822:	bfb8      	it	lt
   8c824:	f04f 36ff 	movlt.w	r6, #4294967295
   8c828:	89a3      	ldrh	r3, [r4, #12]
   8c82a:	061a      	lsls	r2, r3, #24
   8c82c:	d43b      	bmi.n	8c8a6 <_fclose_r+0xba>
   8c82e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8c830:	b141      	cbz	r1, 8c844 <_fclose_r+0x58>
   8c832:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8c836:	4299      	cmp	r1, r3
   8c838:	d002      	beq.n	8c840 <_fclose_r+0x54>
   8c83a:	4628      	mov	r0, r5
   8c83c:	f7fe f918 	bl	8aa70 <_free_r>
   8c840:	2300      	movs	r3, #0
   8c842:	6323      	str	r3, [r4, #48]	; 0x30
   8c844:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8c846:	b121      	cbz	r1, 8c852 <_fclose_r+0x66>
   8c848:	4628      	mov	r0, r5
   8c84a:	f7fe f911 	bl	8aa70 <_free_r>
   8c84e:	2300      	movs	r3, #0
   8c850:	6463      	str	r3, [r4, #68]	; 0x44
   8c852:	f7fe f817 	bl	8a884 <__sfp_lock_acquire>
   8c856:	2200      	movs	r2, #0
   8c858:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c85a:	81a2      	strh	r2, [r4, #12]
   8c85c:	07db      	lsls	r3, r3, #31
   8c85e:	d527      	bpl.n	8c8b0 <_fclose_r+0xc4>
   8c860:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c862:	f7fe fbb1 	bl	8afc8 <__retarget_lock_close_recursive>
   8c866:	f7fe f813 	bl	8a890 <__sfp_lock_release>
   8c86a:	4630      	mov	r0, r6
   8c86c:	bd70      	pop	{r4, r5, r6, pc}
   8c86e:	89a3      	ldrh	r3, [r4, #12]
   8c870:	0599      	lsls	r1, r3, #22
   8c872:	d4cb      	bmi.n	8c80c <_fclose_r+0x20>
   8c874:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c876:	f7fe fba9 	bl	8afcc <__retarget_lock_acquire_recursive>
   8c87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c87e:	2b00      	cmp	r3, #0
   8c880:	d1c4      	bne.n	8c80c <_fclose_r+0x20>
   8c882:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8c884:	f016 0601 	ands.w	r6, r6, #1
   8c888:	d008      	beq.n	8c89c <_fclose_r+0xb0>
   8c88a:	2600      	movs	r6, #0
   8c88c:	4630      	mov	r0, r6
   8c88e:	bd70      	pop	{r4, r5, r6, pc}
   8c890:	f7fd ffca 	bl	8a828 <__sinit>
   8c894:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c896:	07d8      	lsls	r0, r3, #31
   8c898:	d4b4      	bmi.n	8c804 <_fclose_r+0x18>
   8c89a:	e7e8      	b.n	8c86e <_fclose_r+0x82>
   8c89c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c89e:	f7fe fb97 	bl	8afd0 <__retarget_lock_release_recursive>
   8c8a2:	4630      	mov	r0, r6
   8c8a4:	bd70      	pop	{r4, r5, r6, pc}
   8c8a6:	4628      	mov	r0, r5
   8c8a8:	6921      	ldr	r1, [r4, #16]
   8c8aa:	f7fe f8e1 	bl	8aa70 <_free_r>
   8c8ae:	e7be      	b.n	8c82e <_fclose_r+0x42>
   8c8b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c8b2:	f7fe fb8d 	bl	8afd0 <__retarget_lock_release_recursive>
   8c8b6:	e7d3      	b.n	8c860 <_fclose_r+0x74>

0008c8b8 <fiprintf>:
   8c8b8:	b40e      	push	{r1, r2, r3}
   8c8ba:	b510      	push	{r4, lr}
   8c8bc:	b083      	sub	sp, #12
   8c8be:	ab05      	add	r3, sp, #20
   8c8c0:	4c06      	ldr	r4, [pc, #24]	; (8c8dc <fiprintf+0x24>)
   8c8c2:	f853 2b04 	ldr.w	r2, [r3], #4
   8c8c6:	4601      	mov	r1, r0
   8c8c8:	6820      	ldr	r0, [r4, #0]
   8c8ca:	9301      	str	r3, [sp, #4]
   8c8cc:	f7fb ff70 	bl	887b0 <_vfiprintf_r>
   8c8d0:	b003      	add	sp, #12
   8c8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8c8d6:	b003      	add	sp, #12
   8c8d8:	4770      	bx	lr
   8c8da:	bf00      	nop
   8c8dc:	20000440 	.word	0x20000440

0008c8e0 <_fstat_r>:
   8c8e0:	b570      	push	{r4, r5, r6, lr}
   8c8e2:	460c      	mov	r4, r1
   8c8e4:	4603      	mov	r3, r0
   8c8e6:	2600      	movs	r6, #0
   8c8e8:	4d07      	ldr	r5, [pc, #28]	; (8c908 <_fstat_r+0x28>)
   8c8ea:	4620      	mov	r0, r4
   8c8ec:	4611      	mov	r1, r2
   8c8ee:	461c      	mov	r4, r3
   8c8f0:	602e      	str	r6, [r5, #0]
   8c8f2:	f7f6 fbe4 	bl	830be <_fstat>
   8c8f6:	1c43      	adds	r3, r0, #1
   8c8f8:	d000      	beq.n	8c8fc <_fstat_r+0x1c>
   8c8fa:	bd70      	pop	{r4, r5, r6, pc}
   8c8fc:	682b      	ldr	r3, [r5, #0]
   8c8fe:	2b00      	cmp	r3, #0
   8c900:	d0fb      	beq.n	8c8fa <_fstat_r+0x1a>
   8c902:	6023      	str	r3, [r4, #0]
   8c904:	bd70      	pop	{r4, r5, r6, pc}
   8c906:	bf00      	nop
   8c908:	2000186c 	.word	0x2000186c

0008c90c <_isatty_r>:
   8c90c:	2200      	movs	r2, #0
   8c90e:	b538      	push	{r3, r4, r5, lr}
   8c910:	4d06      	ldr	r5, [pc, #24]	; (8c92c <_isatty_r+0x20>)
   8c912:	4604      	mov	r4, r0
   8c914:	4608      	mov	r0, r1
   8c916:	602a      	str	r2, [r5, #0]
   8c918:	f7f6 fbe0 	bl	830dc <_isatty>
   8c91c:	1c43      	adds	r3, r0, #1
   8c91e:	d000      	beq.n	8c922 <_isatty_r+0x16>
   8c920:	bd38      	pop	{r3, r4, r5, pc}
   8c922:	682b      	ldr	r3, [r5, #0]
   8c924:	2b00      	cmp	r3, #0
   8c926:	d0fb      	beq.n	8c920 <_isatty_r+0x14>
   8c928:	6023      	str	r3, [r4, #0]
   8c92a:	bd38      	pop	{r3, r4, r5, pc}
   8c92c:	2000186c 	.word	0x2000186c

0008c930 <_lseek_r>:
   8c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c932:	460f      	mov	r7, r1
   8c934:	2600      	movs	r6, #0
   8c936:	4d08      	ldr	r5, [pc, #32]	; (8c958 <_lseek_r+0x28>)
   8c938:	4611      	mov	r1, r2
   8c93a:	4604      	mov	r4, r0
   8c93c:	461a      	mov	r2, r3
   8c93e:	4638      	mov	r0, r7
   8c940:	602e      	str	r6, [r5, #0]
   8c942:	f7f6 fbd5 	bl	830f0 <_lseek>
   8c946:	1c43      	adds	r3, r0, #1
   8c948:	d000      	beq.n	8c94c <_lseek_r+0x1c>
   8c94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c94c:	682b      	ldr	r3, [r5, #0]
   8c94e:	2b00      	cmp	r3, #0
   8c950:	d0fb      	beq.n	8c94a <_lseek_r+0x1a>
   8c952:	6023      	str	r3, [r4, #0]
   8c954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c956:	bf00      	nop
   8c958:	2000186c 	.word	0x2000186c

0008c95c <_read_r>:
   8c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c95e:	460f      	mov	r7, r1
   8c960:	2600      	movs	r6, #0
   8c962:	4d08      	ldr	r5, [pc, #32]	; (8c984 <_read_r+0x28>)
   8c964:	4611      	mov	r1, r2
   8c966:	4604      	mov	r4, r0
   8c968:	461a      	mov	r2, r3
   8c96a:	4638      	mov	r0, r7
   8c96c:	602e      	str	r6, [r5, #0]
   8c96e:	f7f6 f871 	bl	82a54 <_read>
   8c972:	1c43      	adds	r3, r0, #1
   8c974:	d000      	beq.n	8c978 <_read_r+0x1c>
   8c976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c978:	682b      	ldr	r3, [r5, #0]
   8c97a:	2b00      	cmp	r3, #0
   8c97c:	d0fb      	beq.n	8c976 <_read_r+0x1a>
   8c97e:	6023      	str	r3, [r4, #0]
   8c980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c982:	bf00      	nop
   8c984:	2000186c 	.word	0x2000186c

0008c988 <abort>:
   8c988:	2006      	movs	r0, #6
   8c98a:	b508      	push	{r3, lr}
   8c98c:	f000 f830 	bl	8c9f0 <raise>
   8c990:	2001      	movs	r0, #1
   8c992:	f7f6 fbb9 	bl	83108 <_exit>
   8c996:	bf00      	nop

0008c998 <_raise_r>:
   8c998:	291f      	cmp	r1, #31
   8c99a:	b538      	push	{r3, r4, r5, lr}
   8c99c:	4605      	mov	r5, r0
   8c99e:	d821      	bhi.n	8c9e4 <_raise_r+0x4c>
   8c9a0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
   8c9a4:	460c      	mov	r4, r1
   8c9a6:	b16a      	cbz	r2, 8c9c4 <_raise_r+0x2c>
   8c9a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   8c9ac:	b153      	cbz	r3, 8c9c4 <_raise_r+0x2c>
   8c9ae:	2b01      	cmp	r3, #1
   8c9b0:	d016      	beq.n	8c9e0 <_raise_r+0x48>
   8c9b2:	1c59      	adds	r1, r3, #1
   8c9b4:	d010      	beq.n	8c9d8 <_raise_r+0x40>
   8c9b6:	2500      	movs	r5, #0
   8c9b8:	4620      	mov	r0, r4
   8c9ba:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   8c9be:	4798      	blx	r3
   8c9c0:	4628      	mov	r0, r5
   8c9c2:	bd38      	pop	{r3, r4, r5, pc}
   8c9c4:	4628      	mov	r0, r5
   8c9c6:	f000 f831 	bl	8ca2c <_getpid_r>
   8c9ca:	4622      	mov	r2, r4
   8c9cc:	4601      	mov	r1, r0
   8c9ce:	4628      	mov	r0, r5
   8c9d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8c9d4:	f000 b814 	b.w	8ca00 <_kill_r>
   8c9d8:	2316      	movs	r3, #22
   8c9da:	2001      	movs	r0, #1
   8c9dc:	602b      	str	r3, [r5, #0]
   8c9de:	bd38      	pop	{r3, r4, r5, pc}
   8c9e0:	2000      	movs	r0, #0
   8c9e2:	bd38      	pop	{r3, r4, r5, pc}
   8c9e4:	2316      	movs	r3, #22
   8c9e6:	f04f 30ff 	mov.w	r0, #4294967295
   8c9ea:	602b      	str	r3, [r5, #0]
   8c9ec:	bd38      	pop	{r3, r4, r5, pc}
   8c9ee:	bf00      	nop

0008c9f0 <raise>:
   8c9f0:	4b02      	ldr	r3, [pc, #8]	; (8c9fc <raise+0xc>)
   8c9f2:	4601      	mov	r1, r0
   8c9f4:	6818      	ldr	r0, [r3, #0]
   8c9f6:	f7ff bfcf 	b.w	8c998 <_raise_r>
   8c9fa:	bf00      	nop
   8c9fc:	20000440 	.word	0x20000440

0008ca00 <_kill_r>:
   8ca00:	b570      	push	{r4, r5, r6, lr}
   8ca02:	460c      	mov	r4, r1
   8ca04:	4603      	mov	r3, r0
   8ca06:	2600      	movs	r6, #0
   8ca08:	4d07      	ldr	r5, [pc, #28]	; (8ca28 <_kill_r+0x28>)
   8ca0a:	4620      	mov	r0, r4
   8ca0c:	4611      	mov	r1, r2
   8ca0e:	461c      	mov	r4, r3
   8ca10:	602e      	str	r6, [r5, #0]
   8ca12:	f7f6 fb87 	bl	83124 <_kill>
   8ca16:	1c43      	adds	r3, r0, #1
   8ca18:	d000      	beq.n	8ca1c <_kill_r+0x1c>
   8ca1a:	bd70      	pop	{r4, r5, r6, pc}
   8ca1c:	682b      	ldr	r3, [r5, #0]
   8ca1e:	2b00      	cmp	r3, #0
   8ca20:	d0fb      	beq.n	8ca1a <_kill_r+0x1a>
   8ca22:	6023      	str	r3, [r4, #0]
   8ca24:	bd70      	pop	{r4, r5, r6, pc}
   8ca26:	bf00      	nop
   8ca28:	2000186c 	.word	0x2000186c

0008ca2c <_getpid_r>:
   8ca2c:	f7f6 bb84 	b.w	83138 <_getpid>

0008ca30 <__aeabi_drsub>:
   8ca30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8ca34:	e002      	b.n	8ca3c <__adddf3>
   8ca36:	bf00      	nop

0008ca38 <__aeabi_dsub>:
   8ca38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008ca3c <__adddf3>:
   8ca3c:	b530      	push	{r4, r5, lr}
   8ca3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8ca42:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8ca46:	ea94 0f05 	teq	r4, r5
   8ca4a:	bf08      	it	eq
   8ca4c:	ea90 0f02 	teqeq	r0, r2
   8ca50:	bf1f      	itttt	ne
   8ca52:	ea54 0c00 	orrsne.w	ip, r4, r0
   8ca56:	ea55 0c02 	orrsne.w	ip, r5, r2
   8ca5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8ca5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8ca62:	f000 80e2 	beq.w	8cc2a <__adddf3+0x1ee>
   8ca66:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8ca6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8ca6e:	bfb8      	it	lt
   8ca70:	426d      	neglt	r5, r5
   8ca72:	dd0c      	ble.n	8ca8e <__adddf3+0x52>
   8ca74:	442c      	add	r4, r5
   8ca76:	ea80 0202 	eor.w	r2, r0, r2
   8ca7a:	ea81 0303 	eor.w	r3, r1, r3
   8ca7e:	ea82 0000 	eor.w	r0, r2, r0
   8ca82:	ea83 0101 	eor.w	r1, r3, r1
   8ca86:	ea80 0202 	eor.w	r2, r0, r2
   8ca8a:	ea81 0303 	eor.w	r3, r1, r3
   8ca8e:	2d36      	cmp	r5, #54	; 0x36
   8ca90:	bf88      	it	hi
   8ca92:	bd30      	pophi	{r4, r5, pc}
   8ca94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8ca98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8ca9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8caa0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8caa4:	d002      	beq.n	8caac <__adddf3+0x70>
   8caa6:	4240      	negs	r0, r0
   8caa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8caac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8cab0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8cab4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8cab8:	d002      	beq.n	8cac0 <__adddf3+0x84>
   8caba:	4252      	negs	r2, r2
   8cabc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8cac0:	ea94 0f05 	teq	r4, r5
   8cac4:	f000 80a7 	beq.w	8cc16 <__adddf3+0x1da>
   8cac8:	f1a4 0401 	sub.w	r4, r4, #1
   8cacc:	f1d5 0e20 	rsbs	lr, r5, #32
   8cad0:	db0d      	blt.n	8caee <__adddf3+0xb2>
   8cad2:	fa02 fc0e 	lsl.w	ip, r2, lr
   8cad6:	fa22 f205 	lsr.w	r2, r2, r5
   8cada:	1880      	adds	r0, r0, r2
   8cadc:	f141 0100 	adc.w	r1, r1, #0
   8cae0:	fa03 f20e 	lsl.w	r2, r3, lr
   8cae4:	1880      	adds	r0, r0, r2
   8cae6:	fa43 f305 	asr.w	r3, r3, r5
   8caea:	4159      	adcs	r1, r3
   8caec:	e00e      	b.n	8cb0c <__adddf3+0xd0>
   8caee:	f1a5 0520 	sub.w	r5, r5, #32
   8caf2:	f10e 0e20 	add.w	lr, lr, #32
   8caf6:	2a01      	cmp	r2, #1
   8caf8:	fa03 fc0e 	lsl.w	ip, r3, lr
   8cafc:	bf28      	it	cs
   8cafe:	f04c 0c02 	orrcs.w	ip, ip, #2
   8cb02:	fa43 f305 	asr.w	r3, r3, r5
   8cb06:	18c0      	adds	r0, r0, r3
   8cb08:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8cb0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8cb10:	d507      	bpl.n	8cb22 <__adddf3+0xe6>
   8cb12:	f04f 0e00 	mov.w	lr, #0
   8cb16:	f1dc 0c00 	rsbs	ip, ip, #0
   8cb1a:	eb7e 0000 	sbcs.w	r0, lr, r0
   8cb1e:	eb6e 0101 	sbc.w	r1, lr, r1
   8cb22:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8cb26:	d31b      	bcc.n	8cb60 <__adddf3+0x124>
   8cb28:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8cb2c:	d30c      	bcc.n	8cb48 <__adddf3+0x10c>
   8cb2e:	0849      	lsrs	r1, r1, #1
   8cb30:	ea5f 0030 	movs.w	r0, r0, rrx
   8cb34:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8cb38:	f104 0401 	add.w	r4, r4, #1
   8cb3c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8cb40:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8cb44:	f080 809a 	bcs.w	8cc7c <__adddf3+0x240>
   8cb48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8cb4c:	bf08      	it	eq
   8cb4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8cb52:	f150 0000 	adcs.w	r0, r0, #0
   8cb56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8cb5a:	ea41 0105 	orr.w	r1, r1, r5
   8cb5e:	bd30      	pop	{r4, r5, pc}
   8cb60:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8cb64:	4140      	adcs	r0, r0
   8cb66:	eb41 0101 	adc.w	r1, r1, r1
   8cb6a:	3c01      	subs	r4, #1
   8cb6c:	bf28      	it	cs
   8cb6e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8cb72:	d2e9      	bcs.n	8cb48 <__adddf3+0x10c>
   8cb74:	f091 0f00 	teq	r1, #0
   8cb78:	bf04      	itt	eq
   8cb7a:	4601      	moveq	r1, r0
   8cb7c:	2000      	moveq	r0, #0
   8cb7e:	fab1 f381 	clz	r3, r1
   8cb82:	bf08      	it	eq
   8cb84:	3320      	addeq	r3, #32
   8cb86:	f1a3 030b 	sub.w	r3, r3, #11
   8cb8a:	f1b3 0220 	subs.w	r2, r3, #32
   8cb8e:	da0c      	bge.n	8cbaa <__adddf3+0x16e>
   8cb90:	320c      	adds	r2, #12
   8cb92:	dd08      	ble.n	8cba6 <__adddf3+0x16a>
   8cb94:	f102 0c14 	add.w	ip, r2, #20
   8cb98:	f1c2 020c 	rsb	r2, r2, #12
   8cb9c:	fa01 f00c 	lsl.w	r0, r1, ip
   8cba0:	fa21 f102 	lsr.w	r1, r1, r2
   8cba4:	e00c      	b.n	8cbc0 <__adddf3+0x184>
   8cba6:	f102 0214 	add.w	r2, r2, #20
   8cbaa:	bfd8      	it	le
   8cbac:	f1c2 0c20 	rsble	ip, r2, #32
   8cbb0:	fa01 f102 	lsl.w	r1, r1, r2
   8cbb4:	fa20 fc0c 	lsr.w	ip, r0, ip
   8cbb8:	bfdc      	itt	le
   8cbba:	ea41 010c 	orrle.w	r1, r1, ip
   8cbbe:	4090      	lslle	r0, r2
   8cbc0:	1ae4      	subs	r4, r4, r3
   8cbc2:	bfa2      	ittt	ge
   8cbc4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8cbc8:	4329      	orrge	r1, r5
   8cbca:	bd30      	popge	{r4, r5, pc}
   8cbcc:	ea6f 0404 	mvn.w	r4, r4
   8cbd0:	3c1f      	subs	r4, #31
   8cbd2:	da1c      	bge.n	8cc0e <__adddf3+0x1d2>
   8cbd4:	340c      	adds	r4, #12
   8cbd6:	dc0e      	bgt.n	8cbf6 <__adddf3+0x1ba>
   8cbd8:	f104 0414 	add.w	r4, r4, #20
   8cbdc:	f1c4 0220 	rsb	r2, r4, #32
   8cbe0:	fa20 f004 	lsr.w	r0, r0, r4
   8cbe4:	fa01 f302 	lsl.w	r3, r1, r2
   8cbe8:	ea40 0003 	orr.w	r0, r0, r3
   8cbec:	fa21 f304 	lsr.w	r3, r1, r4
   8cbf0:	ea45 0103 	orr.w	r1, r5, r3
   8cbf4:	bd30      	pop	{r4, r5, pc}
   8cbf6:	f1c4 040c 	rsb	r4, r4, #12
   8cbfa:	f1c4 0220 	rsb	r2, r4, #32
   8cbfe:	fa20 f002 	lsr.w	r0, r0, r2
   8cc02:	fa01 f304 	lsl.w	r3, r1, r4
   8cc06:	ea40 0003 	orr.w	r0, r0, r3
   8cc0a:	4629      	mov	r1, r5
   8cc0c:	bd30      	pop	{r4, r5, pc}
   8cc0e:	fa21 f004 	lsr.w	r0, r1, r4
   8cc12:	4629      	mov	r1, r5
   8cc14:	bd30      	pop	{r4, r5, pc}
   8cc16:	f094 0f00 	teq	r4, #0
   8cc1a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8cc1e:	bf06      	itte	eq
   8cc20:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8cc24:	3401      	addeq	r4, #1
   8cc26:	3d01      	subne	r5, #1
   8cc28:	e74e      	b.n	8cac8 <__adddf3+0x8c>
   8cc2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8cc2e:	bf18      	it	ne
   8cc30:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8cc34:	d029      	beq.n	8cc8a <__adddf3+0x24e>
   8cc36:	ea94 0f05 	teq	r4, r5
   8cc3a:	bf08      	it	eq
   8cc3c:	ea90 0f02 	teqeq	r0, r2
   8cc40:	d005      	beq.n	8cc4e <__adddf3+0x212>
   8cc42:	ea54 0c00 	orrs.w	ip, r4, r0
   8cc46:	bf04      	itt	eq
   8cc48:	4619      	moveq	r1, r3
   8cc4a:	4610      	moveq	r0, r2
   8cc4c:	bd30      	pop	{r4, r5, pc}
   8cc4e:	ea91 0f03 	teq	r1, r3
   8cc52:	bf1e      	ittt	ne
   8cc54:	2100      	movne	r1, #0
   8cc56:	2000      	movne	r0, #0
   8cc58:	bd30      	popne	{r4, r5, pc}
   8cc5a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8cc5e:	d105      	bne.n	8cc6c <__adddf3+0x230>
   8cc60:	0040      	lsls	r0, r0, #1
   8cc62:	4149      	adcs	r1, r1
   8cc64:	bf28      	it	cs
   8cc66:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8cc6a:	bd30      	pop	{r4, r5, pc}
   8cc6c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8cc70:	bf3c      	itt	cc
   8cc72:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8cc76:	bd30      	popcc	{r4, r5, pc}
   8cc78:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8cc7c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8cc80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8cc84:	f04f 0000 	mov.w	r0, #0
   8cc88:	bd30      	pop	{r4, r5, pc}
   8cc8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8cc8e:	bf1a      	itte	ne
   8cc90:	4619      	movne	r1, r3
   8cc92:	4610      	movne	r0, r2
   8cc94:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8cc98:	bf1c      	itt	ne
   8cc9a:	460b      	movne	r3, r1
   8cc9c:	4602      	movne	r2, r0
   8cc9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8cca2:	bf06      	itte	eq
   8cca4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8cca8:	ea91 0f03 	teqeq	r1, r3
   8ccac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8ccb0:	bd30      	pop	{r4, r5, pc}
   8ccb2:	bf00      	nop

0008ccb4 <__aeabi_ui2d>:
   8ccb4:	f090 0f00 	teq	r0, #0
   8ccb8:	bf04      	itt	eq
   8ccba:	2100      	moveq	r1, #0
   8ccbc:	4770      	bxeq	lr
   8ccbe:	b530      	push	{r4, r5, lr}
   8ccc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8ccc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8ccc8:	f04f 0500 	mov.w	r5, #0
   8cccc:	f04f 0100 	mov.w	r1, #0
   8ccd0:	e750      	b.n	8cb74 <__adddf3+0x138>
   8ccd2:	bf00      	nop

0008ccd4 <__aeabi_i2d>:
   8ccd4:	f090 0f00 	teq	r0, #0
   8ccd8:	bf04      	itt	eq
   8ccda:	2100      	moveq	r1, #0
   8ccdc:	4770      	bxeq	lr
   8ccde:	b530      	push	{r4, r5, lr}
   8cce0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8cce4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8cce8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8ccec:	bf48      	it	mi
   8ccee:	4240      	negmi	r0, r0
   8ccf0:	f04f 0100 	mov.w	r1, #0
   8ccf4:	e73e      	b.n	8cb74 <__adddf3+0x138>
   8ccf6:	bf00      	nop

0008ccf8 <__aeabi_f2d>:
   8ccf8:	0042      	lsls	r2, r0, #1
   8ccfa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8ccfe:	ea4f 0131 	mov.w	r1, r1, rrx
   8cd02:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8cd06:	bf1f      	itttt	ne
   8cd08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8cd0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8cd10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8cd14:	4770      	bxne	lr
   8cd16:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8cd1a:	bf08      	it	eq
   8cd1c:	4770      	bxeq	lr
   8cd1e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8cd22:	bf04      	itt	eq
   8cd24:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8cd28:	4770      	bxeq	lr
   8cd2a:	b530      	push	{r4, r5, lr}
   8cd2c:	f44f 7460 	mov.w	r4, #896	; 0x380
   8cd30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8cd34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8cd38:	e71c      	b.n	8cb74 <__adddf3+0x138>
   8cd3a:	bf00      	nop

0008cd3c <__aeabi_ul2d>:
   8cd3c:	ea50 0201 	orrs.w	r2, r0, r1
   8cd40:	bf08      	it	eq
   8cd42:	4770      	bxeq	lr
   8cd44:	b530      	push	{r4, r5, lr}
   8cd46:	f04f 0500 	mov.w	r5, #0
   8cd4a:	e00a      	b.n	8cd62 <__aeabi_l2d+0x16>

0008cd4c <__aeabi_l2d>:
   8cd4c:	ea50 0201 	orrs.w	r2, r0, r1
   8cd50:	bf08      	it	eq
   8cd52:	4770      	bxeq	lr
   8cd54:	b530      	push	{r4, r5, lr}
   8cd56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8cd5a:	d502      	bpl.n	8cd62 <__aeabi_l2d+0x16>
   8cd5c:	4240      	negs	r0, r0
   8cd5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8cd62:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8cd66:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8cd6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8cd6e:	f43f aed8 	beq.w	8cb22 <__adddf3+0xe6>
   8cd72:	f04f 0203 	mov.w	r2, #3
   8cd76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8cd7a:	bf18      	it	ne
   8cd7c:	3203      	addne	r2, #3
   8cd7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8cd82:	bf18      	it	ne
   8cd84:	3203      	addne	r2, #3
   8cd86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8cd8a:	f1c2 0320 	rsb	r3, r2, #32
   8cd8e:	fa00 fc03 	lsl.w	ip, r0, r3
   8cd92:	fa20 f002 	lsr.w	r0, r0, r2
   8cd96:	fa01 fe03 	lsl.w	lr, r1, r3
   8cd9a:	ea40 000e 	orr.w	r0, r0, lr
   8cd9e:	fa21 f102 	lsr.w	r1, r1, r2
   8cda2:	4414      	add	r4, r2
   8cda4:	e6bd      	b.n	8cb22 <__adddf3+0xe6>
   8cda6:	bf00      	nop

0008cda8 <__aeabi_dmul>:
   8cda8:	b570      	push	{r4, r5, r6, lr}
   8cdaa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8cdae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8cdb2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8cdb6:	bf1d      	ittte	ne
   8cdb8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8cdbc:	ea94 0f0c 	teqne	r4, ip
   8cdc0:	ea95 0f0c 	teqne	r5, ip
   8cdc4:	f000 f8de 	bleq	8cf84 <__aeabi_dmul+0x1dc>
   8cdc8:	442c      	add	r4, r5
   8cdca:	ea81 0603 	eor.w	r6, r1, r3
   8cdce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8cdd2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8cdd6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8cdda:	bf18      	it	ne
   8cddc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8cde0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8cde4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8cde8:	d038      	beq.n	8ce5c <__aeabi_dmul+0xb4>
   8cdea:	fba0 ce02 	umull	ip, lr, r0, r2
   8cdee:	f04f 0500 	mov.w	r5, #0
   8cdf2:	fbe1 e502 	umlal	lr, r5, r1, r2
   8cdf6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8cdfa:	fbe0 e503 	umlal	lr, r5, r0, r3
   8cdfe:	f04f 0600 	mov.w	r6, #0
   8ce02:	fbe1 5603 	umlal	r5, r6, r1, r3
   8ce06:	f09c 0f00 	teq	ip, #0
   8ce0a:	bf18      	it	ne
   8ce0c:	f04e 0e01 	orrne.w	lr, lr, #1
   8ce10:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8ce14:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8ce18:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8ce1c:	d204      	bcs.n	8ce28 <__aeabi_dmul+0x80>
   8ce1e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8ce22:	416d      	adcs	r5, r5
   8ce24:	eb46 0606 	adc.w	r6, r6, r6
   8ce28:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8ce2c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8ce30:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8ce34:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8ce38:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8ce3c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8ce40:	bf88      	it	hi
   8ce42:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8ce46:	d81e      	bhi.n	8ce86 <__aeabi_dmul+0xde>
   8ce48:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8ce4c:	bf08      	it	eq
   8ce4e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8ce52:	f150 0000 	adcs.w	r0, r0, #0
   8ce56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8ce5a:	bd70      	pop	{r4, r5, r6, pc}
   8ce5c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8ce60:	ea46 0101 	orr.w	r1, r6, r1
   8ce64:	ea40 0002 	orr.w	r0, r0, r2
   8ce68:	ea81 0103 	eor.w	r1, r1, r3
   8ce6c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8ce70:	bfc2      	ittt	gt
   8ce72:	ebd4 050c 	rsbsgt	r5, r4, ip
   8ce76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8ce7a:	bd70      	popgt	{r4, r5, r6, pc}
   8ce7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8ce80:	f04f 0e00 	mov.w	lr, #0
   8ce84:	3c01      	subs	r4, #1
   8ce86:	f300 80ab 	bgt.w	8cfe0 <__aeabi_dmul+0x238>
   8ce8a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8ce8e:	bfde      	ittt	le
   8ce90:	2000      	movle	r0, #0
   8ce92:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8ce96:	bd70      	pople	{r4, r5, r6, pc}
   8ce98:	f1c4 0400 	rsb	r4, r4, #0
   8ce9c:	3c20      	subs	r4, #32
   8ce9e:	da35      	bge.n	8cf0c <__aeabi_dmul+0x164>
   8cea0:	340c      	adds	r4, #12
   8cea2:	dc1b      	bgt.n	8cedc <__aeabi_dmul+0x134>
   8cea4:	f104 0414 	add.w	r4, r4, #20
   8cea8:	f1c4 0520 	rsb	r5, r4, #32
   8ceac:	fa00 f305 	lsl.w	r3, r0, r5
   8ceb0:	fa20 f004 	lsr.w	r0, r0, r4
   8ceb4:	fa01 f205 	lsl.w	r2, r1, r5
   8ceb8:	ea40 0002 	orr.w	r0, r0, r2
   8cebc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8cec0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8cec4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8cec8:	fa21 f604 	lsr.w	r6, r1, r4
   8cecc:	eb42 0106 	adc.w	r1, r2, r6
   8ced0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8ced4:	bf08      	it	eq
   8ced6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8ceda:	bd70      	pop	{r4, r5, r6, pc}
   8cedc:	f1c4 040c 	rsb	r4, r4, #12
   8cee0:	f1c4 0520 	rsb	r5, r4, #32
   8cee4:	fa00 f304 	lsl.w	r3, r0, r4
   8cee8:	fa20 f005 	lsr.w	r0, r0, r5
   8ceec:	fa01 f204 	lsl.w	r2, r1, r4
   8cef0:	ea40 0002 	orr.w	r0, r0, r2
   8cef4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cef8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8cefc:	f141 0100 	adc.w	r1, r1, #0
   8cf00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8cf04:	bf08      	it	eq
   8cf06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8cf0a:	bd70      	pop	{r4, r5, r6, pc}
   8cf0c:	f1c4 0520 	rsb	r5, r4, #32
   8cf10:	fa00 f205 	lsl.w	r2, r0, r5
   8cf14:	ea4e 0e02 	orr.w	lr, lr, r2
   8cf18:	fa20 f304 	lsr.w	r3, r0, r4
   8cf1c:	fa01 f205 	lsl.w	r2, r1, r5
   8cf20:	ea43 0302 	orr.w	r3, r3, r2
   8cf24:	fa21 f004 	lsr.w	r0, r1, r4
   8cf28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cf2c:	fa21 f204 	lsr.w	r2, r1, r4
   8cf30:	ea20 0002 	bic.w	r0, r0, r2
   8cf34:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8cf38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8cf3c:	bf08      	it	eq
   8cf3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8cf42:	bd70      	pop	{r4, r5, r6, pc}
   8cf44:	f094 0f00 	teq	r4, #0
   8cf48:	d10f      	bne.n	8cf6a <__aeabi_dmul+0x1c2>
   8cf4a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8cf4e:	0040      	lsls	r0, r0, #1
   8cf50:	eb41 0101 	adc.w	r1, r1, r1
   8cf54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8cf58:	bf08      	it	eq
   8cf5a:	3c01      	subeq	r4, #1
   8cf5c:	d0f7      	beq.n	8cf4e <__aeabi_dmul+0x1a6>
   8cf5e:	ea41 0106 	orr.w	r1, r1, r6
   8cf62:	f095 0f00 	teq	r5, #0
   8cf66:	bf18      	it	ne
   8cf68:	4770      	bxne	lr
   8cf6a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8cf6e:	0052      	lsls	r2, r2, #1
   8cf70:	eb43 0303 	adc.w	r3, r3, r3
   8cf74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8cf78:	bf08      	it	eq
   8cf7a:	3d01      	subeq	r5, #1
   8cf7c:	d0f7      	beq.n	8cf6e <__aeabi_dmul+0x1c6>
   8cf7e:	ea43 0306 	orr.w	r3, r3, r6
   8cf82:	4770      	bx	lr
   8cf84:	ea94 0f0c 	teq	r4, ip
   8cf88:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8cf8c:	bf18      	it	ne
   8cf8e:	ea95 0f0c 	teqne	r5, ip
   8cf92:	d00c      	beq.n	8cfae <__aeabi_dmul+0x206>
   8cf94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8cf98:	bf18      	it	ne
   8cf9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8cf9e:	d1d1      	bne.n	8cf44 <__aeabi_dmul+0x19c>
   8cfa0:	ea81 0103 	eor.w	r1, r1, r3
   8cfa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cfa8:	f04f 0000 	mov.w	r0, #0
   8cfac:	bd70      	pop	{r4, r5, r6, pc}
   8cfae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8cfb2:	bf06      	itte	eq
   8cfb4:	4610      	moveq	r0, r2
   8cfb6:	4619      	moveq	r1, r3
   8cfb8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8cfbc:	d019      	beq.n	8cff2 <__aeabi_dmul+0x24a>
   8cfbe:	ea94 0f0c 	teq	r4, ip
   8cfc2:	d102      	bne.n	8cfca <__aeabi_dmul+0x222>
   8cfc4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8cfc8:	d113      	bne.n	8cff2 <__aeabi_dmul+0x24a>
   8cfca:	ea95 0f0c 	teq	r5, ip
   8cfce:	d105      	bne.n	8cfdc <__aeabi_dmul+0x234>
   8cfd0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8cfd4:	bf1c      	itt	ne
   8cfd6:	4610      	movne	r0, r2
   8cfd8:	4619      	movne	r1, r3
   8cfda:	d10a      	bne.n	8cff2 <__aeabi_dmul+0x24a>
   8cfdc:	ea81 0103 	eor.w	r1, r1, r3
   8cfe0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cfe4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8cfe8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8cfec:	f04f 0000 	mov.w	r0, #0
   8cff0:	bd70      	pop	{r4, r5, r6, pc}
   8cff2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8cff6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8cffa:	bd70      	pop	{r4, r5, r6, pc}

0008cffc <__aeabi_ddiv>:
   8cffc:	b570      	push	{r4, r5, r6, lr}
   8cffe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d002:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d006:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d00a:	bf1d      	ittte	ne
   8d00c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d010:	ea94 0f0c 	teqne	r4, ip
   8d014:	ea95 0f0c 	teqne	r5, ip
   8d018:	f000 f8a7 	bleq	8d16a <__aeabi_ddiv+0x16e>
   8d01c:	eba4 0405 	sub.w	r4, r4, r5
   8d020:	ea81 0e03 	eor.w	lr, r1, r3
   8d024:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d028:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d02c:	f000 8088 	beq.w	8d140 <__aeabi_ddiv+0x144>
   8d030:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d034:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8d038:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8d03c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8d040:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8d044:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8d048:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8d04c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8d050:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8d054:	429d      	cmp	r5, r3
   8d056:	bf08      	it	eq
   8d058:	4296      	cmpeq	r6, r2
   8d05a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8d05e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8d062:	d202      	bcs.n	8d06a <__aeabi_ddiv+0x6e>
   8d064:	085b      	lsrs	r3, r3, #1
   8d066:	ea4f 0232 	mov.w	r2, r2, rrx
   8d06a:	1ab6      	subs	r6, r6, r2
   8d06c:	eb65 0503 	sbc.w	r5, r5, r3
   8d070:	085b      	lsrs	r3, r3, #1
   8d072:	ea4f 0232 	mov.w	r2, r2, rrx
   8d076:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8d07a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8d07e:	ebb6 0e02 	subs.w	lr, r6, r2
   8d082:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d086:	bf22      	ittt	cs
   8d088:	1ab6      	subcs	r6, r6, r2
   8d08a:	4675      	movcs	r5, lr
   8d08c:	ea40 000c 	orrcs.w	r0, r0, ip
   8d090:	085b      	lsrs	r3, r3, #1
   8d092:	ea4f 0232 	mov.w	r2, r2, rrx
   8d096:	ebb6 0e02 	subs.w	lr, r6, r2
   8d09a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d09e:	bf22      	ittt	cs
   8d0a0:	1ab6      	subcs	r6, r6, r2
   8d0a2:	4675      	movcs	r5, lr
   8d0a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8d0a8:	085b      	lsrs	r3, r3, #1
   8d0aa:	ea4f 0232 	mov.w	r2, r2, rrx
   8d0ae:	ebb6 0e02 	subs.w	lr, r6, r2
   8d0b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d0b6:	bf22      	ittt	cs
   8d0b8:	1ab6      	subcs	r6, r6, r2
   8d0ba:	4675      	movcs	r5, lr
   8d0bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8d0c0:	085b      	lsrs	r3, r3, #1
   8d0c2:	ea4f 0232 	mov.w	r2, r2, rrx
   8d0c6:	ebb6 0e02 	subs.w	lr, r6, r2
   8d0ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d0ce:	bf22      	ittt	cs
   8d0d0:	1ab6      	subcs	r6, r6, r2
   8d0d2:	4675      	movcs	r5, lr
   8d0d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8d0d8:	ea55 0e06 	orrs.w	lr, r5, r6
   8d0dc:	d018      	beq.n	8d110 <__aeabi_ddiv+0x114>
   8d0de:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8d0e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8d0e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8d0ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8d0ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8d0f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8d0f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8d0fa:	d1c0      	bne.n	8d07e <__aeabi_ddiv+0x82>
   8d0fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d100:	d10b      	bne.n	8d11a <__aeabi_ddiv+0x11e>
   8d102:	ea41 0100 	orr.w	r1, r1, r0
   8d106:	f04f 0000 	mov.w	r0, #0
   8d10a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8d10e:	e7b6      	b.n	8d07e <__aeabi_ddiv+0x82>
   8d110:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d114:	bf04      	itt	eq
   8d116:	4301      	orreq	r1, r0
   8d118:	2000      	moveq	r0, #0
   8d11a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d11e:	bf88      	it	hi
   8d120:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d124:	f63f aeaf 	bhi.w	8ce86 <__aeabi_dmul+0xde>
   8d128:	ebb5 0c03 	subs.w	ip, r5, r3
   8d12c:	bf04      	itt	eq
   8d12e:	ebb6 0c02 	subseq.w	ip, r6, r2
   8d132:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d136:	f150 0000 	adcs.w	r0, r0, #0
   8d13a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d13e:	bd70      	pop	{r4, r5, r6, pc}
   8d140:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8d144:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8d148:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8d14c:	bfc2      	ittt	gt
   8d14e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d152:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d156:	bd70      	popgt	{r4, r5, r6, pc}
   8d158:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d15c:	f04f 0e00 	mov.w	lr, #0
   8d160:	3c01      	subs	r4, #1
   8d162:	e690      	b.n	8ce86 <__aeabi_dmul+0xde>
   8d164:	ea45 0e06 	orr.w	lr, r5, r6
   8d168:	e68d      	b.n	8ce86 <__aeabi_dmul+0xde>
   8d16a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d16e:	ea94 0f0c 	teq	r4, ip
   8d172:	bf08      	it	eq
   8d174:	ea95 0f0c 	teqeq	r5, ip
   8d178:	f43f af3b 	beq.w	8cff2 <__aeabi_dmul+0x24a>
   8d17c:	ea94 0f0c 	teq	r4, ip
   8d180:	d10a      	bne.n	8d198 <__aeabi_ddiv+0x19c>
   8d182:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d186:	f47f af34 	bne.w	8cff2 <__aeabi_dmul+0x24a>
   8d18a:	ea95 0f0c 	teq	r5, ip
   8d18e:	f47f af25 	bne.w	8cfdc <__aeabi_dmul+0x234>
   8d192:	4610      	mov	r0, r2
   8d194:	4619      	mov	r1, r3
   8d196:	e72c      	b.n	8cff2 <__aeabi_dmul+0x24a>
   8d198:	ea95 0f0c 	teq	r5, ip
   8d19c:	d106      	bne.n	8d1ac <__aeabi_ddiv+0x1b0>
   8d19e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d1a2:	f43f aefd 	beq.w	8cfa0 <__aeabi_dmul+0x1f8>
   8d1a6:	4610      	mov	r0, r2
   8d1a8:	4619      	mov	r1, r3
   8d1aa:	e722      	b.n	8cff2 <__aeabi_dmul+0x24a>
   8d1ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d1b0:	bf18      	it	ne
   8d1b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d1b6:	f47f aec5 	bne.w	8cf44 <__aeabi_dmul+0x19c>
   8d1ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8d1be:	f47f af0d 	bne.w	8cfdc <__aeabi_dmul+0x234>
   8d1c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8d1c6:	f47f aeeb 	bne.w	8cfa0 <__aeabi_dmul+0x1f8>
   8d1ca:	e712      	b.n	8cff2 <__aeabi_dmul+0x24a>

0008d1cc <__gedf2>:
   8d1cc:	f04f 3cff 	mov.w	ip, #4294967295
   8d1d0:	e006      	b.n	8d1e0 <__cmpdf2+0x4>
   8d1d2:	bf00      	nop

0008d1d4 <__ledf2>:
   8d1d4:	f04f 0c01 	mov.w	ip, #1
   8d1d8:	e002      	b.n	8d1e0 <__cmpdf2+0x4>
   8d1da:	bf00      	nop

0008d1dc <__cmpdf2>:
   8d1dc:	f04f 0c01 	mov.w	ip, #1
   8d1e0:	f84d cd04 	str.w	ip, [sp, #-4]!
   8d1e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d1e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d1ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d1f0:	bf18      	it	ne
   8d1f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8d1f6:	d01b      	beq.n	8d230 <__cmpdf2+0x54>
   8d1f8:	b001      	add	sp, #4
   8d1fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8d1fe:	bf0c      	ite	eq
   8d200:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8d204:	ea91 0f03 	teqne	r1, r3
   8d208:	bf02      	ittt	eq
   8d20a:	ea90 0f02 	teqeq	r0, r2
   8d20e:	2000      	moveq	r0, #0
   8d210:	4770      	bxeq	lr
   8d212:	f110 0f00 	cmn.w	r0, #0
   8d216:	ea91 0f03 	teq	r1, r3
   8d21a:	bf58      	it	pl
   8d21c:	4299      	cmppl	r1, r3
   8d21e:	bf08      	it	eq
   8d220:	4290      	cmpeq	r0, r2
   8d222:	bf2c      	ite	cs
   8d224:	17d8      	asrcs	r0, r3, #31
   8d226:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8d22a:	f040 0001 	orr.w	r0, r0, #1
   8d22e:	4770      	bx	lr
   8d230:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d234:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d238:	d102      	bne.n	8d240 <__cmpdf2+0x64>
   8d23a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d23e:	d107      	bne.n	8d250 <__cmpdf2+0x74>
   8d240:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d244:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d248:	d1d6      	bne.n	8d1f8 <__cmpdf2+0x1c>
   8d24a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d24e:	d0d3      	beq.n	8d1f8 <__cmpdf2+0x1c>
   8d250:	f85d 0b04 	ldr.w	r0, [sp], #4
   8d254:	4770      	bx	lr
   8d256:	bf00      	nop

0008d258 <__aeabi_cdrcmple>:
   8d258:	4684      	mov	ip, r0
   8d25a:	4610      	mov	r0, r2
   8d25c:	4662      	mov	r2, ip
   8d25e:	468c      	mov	ip, r1
   8d260:	4619      	mov	r1, r3
   8d262:	4663      	mov	r3, ip
   8d264:	e000      	b.n	8d268 <__aeabi_cdcmpeq>
   8d266:	bf00      	nop

0008d268 <__aeabi_cdcmpeq>:
   8d268:	b501      	push	{r0, lr}
   8d26a:	f7ff ffb7 	bl	8d1dc <__cmpdf2>
   8d26e:	2800      	cmp	r0, #0
   8d270:	bf48      	it	mi
   8d272:	f110 0f00 	cmnmi.w	r0, #0
   8d276:	bd01      	pop	{r0, pc}

0008d278 <__aeabi_dcmpeq>:
   8d278:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d27c:	f7ff fff4 	bl	8d268 <__aeabi_cdcmpeq>
   8d280:	bf0c      	ite	eq
   8d282:	2001      	moveq	r0, #1
   8d284:	2000      	movne	r0, #0
   8d286:	f85d fb08 	ldr.w	pc, [sp], #8
   8d28a:	bf00      	nop

0008d28c <__aeabi_dcmplt>:
   8d28c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d290:	f7ff ffea 	bl	8d268 <__aeabi_cdcmpeq>
   8d294:	bf34      	ite	cc
   8d296:	2001      	movcc	r0, #1
   8d298:	2000      	movcs	r0, #0
   8d29a:	f85d fb08 	ldr.w	pc, [sp], #8
   8d29e:	bf00      	nop

0008d2a0 <__aeabi_dcmple>:
   8d2a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d2a4:	f7ff ffe0 	bl	8d268 <__aeabi_cdcmpeq>
   8d2a8:	bf94      	ite	ls
   8d2aa:	2001      	movls	r0, #1
   8d2ac:	2000      	movhi	r0, #0
   8d2ae:	f85d fb08 	ldr.w	pc, [sp], #8
   8d2b2:	bf00      	nop

0008d2b4 <__aeabi_dcmpge>:
   8d2b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d2b8:	f7ff ffce 	bl	8d258 <__aeabi_cdrcmple>
   8d2bc:	bf94      	ite	ls
   8d2be:	2001      	movls	r0, #1
   8d2c0:	2000      	movhi	r0, #0
   8d2c2:	f85d fb08 	ldr.w	pc, [sp], #8
   8d2c6:	bf00      	nop

0008d2c8 <__aeabi_dcmpgt>:
   8d2c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d2cc:	f7ff ffc4 	bl	8d258 <__aeabi_cdrcmple>
   8d2d0:	bf34      	ite	cc
   8d2d2:	2001      	movcc	r0, #1
   8d2d4:	2000      	movcs	r0, #0
   8d2d6:	f85d fb08 	ldr.w	pc, [sp], #8
   8d2da:	bf00      	nop

0008d2dc <__aeabi_dcmpun>:
   8d2dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d2e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d2e4:	d102      	bne.n	8d2ec <__aeabi_dcmpun+0x10>
   8d2e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d2ea:	d10a      	bne.n	8d302 <__aeabi_dcmpun+0x26>
   8d2ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d2f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d2f4:	d102      	bne.n	8d2fc <__aeabi_dcmpun+0x20>
   8d2f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d2fa:	d102      	bne.n	8d302 <__aeabi_dcmpun+0x26>
   8d2fc:	f04f 0000 	mov.w	r0, #0
   8d300:	4770      	bx	lr
   8d302:	f04f 0001 	mov.w	r0, #1
   8d306:	4770      	bx	lr

0008d308 <__aeabi_d2iz>:
   8d308:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8d30c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8d310:	d215      	bcs.n	8d33e <__aeabi_d2iz+0x36>
   8d312:	d511      	bpl.n	8d338 <__aeabi_d2iz+0x30>
   8d314:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8d318:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8d31c:	d912      	bls.n	8d344 <__aeabi_d2iz+0x3c>
   8d31e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8d322:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8d326:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8d32a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d32e:	fa23 f002 	lsr.w	r0, r3, r2
   8d332:	bf18      	it	ne
   8d334:	4240      	negne	r0, r0
   8d336:	4770      	bx	lr
   8d338:	f04f 0000 	mov.w	r0, #0
   8d33c:	4770      	bx	lr
   8d33e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8d342:	d105      	bne.n	8d350 <__aeabi_d2iz+0x48>
   8d344:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8d348:	bf08      	it	eq
   8d34a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8d34e:	4770      	bx	lr
   8d350:	f04f 0000 	mov.w	r0, #0
   8d354:	4770      	bx	lr
   8d356:	bf00      	nop
   8d358:	78383025 	.word	0x78383025
   8d35c:	00000000 	.word	0x00000000
   8d360:	62616e45 	.word	0x62616e45
   8d364:	676e696c 	.word	0x676e696c
   8d368:	41535520 	.word	0x41535520
   8d36c:	0a305452 	.word	0x0a305452
   8d370:	00000000 	.word	0x00000000
   8d374:	3a525245 	.word	0x3a525245
   8d378:	766e4920 	.word	0x766e4920
   8d37c:	64696c61 	.word	0x64696c61
   8d380:	41535520 	.word	0x41535520
   8d384:	43205452 	.word	0x43205452
   8d388:	69666e6f 	.word	0x69666e6f
   8d38c:	61727567 	.word	0x61727567
   8d390:	6e6f6974 	.word	0x6e6f6974
   8d394:	63617020 	.word	0x63617020
   8d398:	3f74656b 	.word	0x3f74656b
   8d39c:	0000000a 	.word	0x0000000a
   8d3a0:	74697845 	.word	0x74697845
   8d3a4:	20676e69 	.word	0x20676e69
   8d3a8:	68746977 	.word	0x68746977
   8d3ac:	61747320 	.word	0x61747320
   8d3b0:	20737574 	.word	0x20737574
   8d3b4:	0a2e6425 	.word	0x0a2e6425
   8d3b8:	00000000 	.word	0x00000000

0008d3bc <BOS_DESC>:
   8d3bc:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
   8d3cc:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
   8d3dc:	00000000 00000000 00000000 aaaaaa00     ................
   8d3ec:	aaaaaaaa eeeeeeaa eeeeeeee fffffeee     ................
   8d3fc:	ffffffff ffffffff dfbf7fff fdfbf7ef     ................
   8d40c:	dfbf7efc fdfbf7ef 0000007e              .~......~...

0008d418 <_global_impure_ptr>:
   8d418:	20000448 00464e49 00666e69 004e414e     H.. INF.inf.NAN.
   8d428:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8d438:	66656463 00000000 33323130 37363534     cdef....01234567
   8d448:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8d458:	0000296c 00000030                       l)..0...

0008d460 <blanks.7335>:
   8d460:	20202020 20202020 20202020 20202020                     

0008d470 <zeroes.7336>:
   8d470:	30303030 30303030 30303030 30303030     0000000000000000

0008d480 <blanks.7328>:
   8d480:	20202020 20202020 20202020 20202020                     

0008d490 <zeroes.7329>:
   8d490:	30303030 30303030 30303030 30303030     0000000000000000
   8d4a0:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8d4b0:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8d4c0:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8d4d0:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8d4e0:	702d392d 6c657069 2f656e69 6b6e656a     -9-pipeline/jenk
   8d4f0:	2d736e69 2d434347 69702d39 696c6570     ins-GCC-9-pipeli
   8d500:	322d656e 325f3030 30303230 5f313235     ne-200_20200521_
   8d510:	30393531 33333530 732f3437 6e2f6372     1590053374/src/n
   8d520:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   8d530:	74732f63 62696c64 6f74642f 00632e61     c/stdlib/dtoa.c.
   8d540:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   8d550:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   8d560:	736b726f 65636170 4343472f 702d392d     orkspace/GCC-9-p
   8d570:	6c657069 2f656e69 6b6e656a 2d736e69     ipeline/jenkins-
   8d580:	2d434347 69702d39 696c6570 322d656e     GCC-9-pipeline-2
   8d590:	325f3030 30303230 5f313235 30393531     00_20200521_1590
   8d5a0:	33333530 732f3437 6e2f6372 696c7765     053374/src/newli
   8d5b0:	656e2f62 62696c77 62696c2f 74732f63     b/newlib/libc/st
   8d5c0:	62696c64 72706d2f 632e6365 00000000     dlib/mprec.c....

0008d5d0 <__mprec_bigtens>:
   8d5d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8d5e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8d5f0:	7f73bf3c 75154fdd                       <.s..O.u

0008d5f8 <__mprec_tens>:
   8d5f8:	00000000 3ff00000 00000000 40240000     .......?......$@
   8d608:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8d618:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8d628:	00000000 412e8480 00000000 416312d0     .......A......cA
   8d638:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8d648:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8d658:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8d668:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8d678:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8d688:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8d698:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8d6a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8d6b8:	79d99db4 44ea7843                       ...yCx.D

0008d6c0 <p05.6122>:
   8d6c0:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8d6d0:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8d6e0:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8d6f0:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8d700:	2520656e 25732564 00000a73              ne %d%s%s...

0008d70c <_ctype_>:
   8d70c:	20202000 20202020 28282020 20282828     .         ((((( 
   8d71c:	20202020 20202020 20202020 20202020                     
   8d72c:	10108820 10101010 10101010 10101010      ...............
   8d73c:	04040410 04040404 10040404 10101010     ................
   8d74c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8d75c:	01010101 01010101 01010101 10101010     ................
   8d76c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8d77c:	02020202 02020202 02020202 10101010     ................
   8d78c:	00000020 00000000 00000000 00000000      ...............
   8d79c:	00000000 00000000 00000000 00000000     ................
   8d7ac:	00000000 00000000 00000000 00000000     ................
   8d7bc:	00000000 00000000 00000000 00000000     ................
   8d7cc:	00000000 00000000 00000000 00000000     ................
   8d7dc:	00000000 00000000 00000000 00000000     ................
   8d7ec:	00000000 00000000 00000000 00000000     ................
   8d7fc:	00000000 00000000 00000000 00000000     ................
   8d80c:	00000000                                ....

0008d810 <_init>:
   8d810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d812:	bf00      	nop
   8d814:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d816:	bc08      	pop	{r3}
   8d818:	469e      	mov	lr, r3
   8d81a:	4770      	bx	lr

0008d81c <__init_array_start>:
   8d81c:	00089635 	.word	0x00089635

0008d820 <__frame_dummy_init_array_entry>:
   8d820:	000800e1                                ....

0008d824 <_fini>:
   8d824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d826:	bf00      	nop
   8d828:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d82a:	bc08      	pop	{r3}
   8d82c:	469e      	mov	lr, r3
   8d82e:	4770      	bx	lr

0008d830 <__do_global_dtors_aux_fini_array_entry>:
   8d830:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	20000288 	.word	0x20000288
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d206      	bcs.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d208      	bcs.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e3600 	.word	0x016e3600
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	02625a00 	.word	0x02625a00
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	                                         .

2000027d <main_b_vendor_enable>:
2000027d:	                                         ...

20000280 <xram>:
20000280:	60000000                                ...`

20000284 <g_interrupt_enabled>:
20000284:	00000001                                ....

20000288 <SystemCoreClock>:
20000288:	003d0900                                ..=.

2000028c <udc_string_desc_languageid>:
2000028c:	04090304                                ....

20000290 <udc_string_manufacturer_name>:
20000290:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
200002a0:	636e4920 0000002e                        Inc....

200002a8 <udc_string_product_name>:
200002a8:	70696843 73696857 65726570 75482d72     ChipWhisperer-Hu
200002b8:	00796b73                                sky.

200002bc <udc_string_desc>:
200002bc:	00000300 00000000 00000000 00000000     ................
200002cc:	00000000 00000000 00000000 00000000     ................
200002dc:	00000000 00000000 00000000 00000000     ................
200002ec:	00000000 00000000 00000000 00000000     ................
200002fc:	00000000                                ....

20000300 <winusb_20_desc>:
20000300:	0000000a 06030000 0014009e 49570003     ..............WI
20000310:	4253554e 00000000 00000000 00800000     NUSB............
20000320:	00010004 00500028 00790068 00680057     ....(.P.h.y.W.h.
20000330:	00730069 00650070 00650072 00550072     i.s.p.e.r.e.r.U.
20000340:	00420053 00000000 00000000 004e0000     S.B...........N.
20000350:	0063007b 00650063 00320035 00310039     {.c.c.e.5.2.9.1.
20000360:	002d0063 00360061 00660039 0034002d     c.-.a.6.9.f.-.4.
20000370:	00390039 002d0035 00340061 00320063     9.9.5.-.a.4.c.2.
20000380:	0032002d 00650061 00370035 00350061     -.2.a.e.5.7.a.5.
20000390:	00610031 00650064 007d0039 00000000     1.a.d.e.9.}.....

200003a0 <udi_api_vendor>:
200003a0:	00084499 000844d9 000844f5 00084549     .D...D...D..IE..
200003b0:	00000000                                ....

200003b4 <udc_device_desc>:
200003b4:	02000112 40000000 ace52b3e 02010100     .......@>+......
200003c4:	00000103                                ....

200003c8 <udc_device_qual>:
200003c8:	0200060a 40000000 00000001              .......@....

200003d4 <udc_desc_fs>:
200003d4:	00200209 80000101 000409fa ffff0200     .. .............
200003e4:	050700ff 00400281 02050700 00004002     ......@......@..

200003f4 <udc_desc_hs>:
200003f4:	00200209 80000101 000409fa ffff0200     .. .............
20000404:	050700ff 02000281 02050700 00020002     ................

20000414 <udi_apis>:
20000414:	200003a0                                ... 

20000418 <udc_config_lsfs>:
20000418:	200003d4 20000414                       ... ... 

20000420 <udc_config_hs>:
20000420:	200003f4 20000414                       ... ... 

20000428 <udc_config>:
20000428:	200003b4 20000418 200003b4 200003c8     ... ... ... ... 
20000438:	20000420 00000000                        .. ....

20000440 <_impure_ptr>:
20000440:	20000448 00000000                       H.. ....

20000448 <impure_data>:
20000448:	00000000 20000734 2000079c 20000804     ....4.. ... ... 
20000458:	00000000 00000000 00000000 00000000     ................
20000468:	00000000 00000000 00000000 00000000     ................
20000478:	00000000 00000000 00000000 00000000     ................
20000488:	00000000 00000000 00000000 00000000     ................
20000498:	00000000 00000000 00000000 00000000     ................
200004a8:	00000000 00000000 00000000 00000000     ................
200004b8:	00000000 00000000 00000000 00000000     ................
200004c8:	00000000 00000000 00000000 00000000     ................
200004d8:	00000000 00000000 00000000 00000000     ................
200004e8:	00000000 00000000 00000001 00000000     ................
200004f8:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000508:	00000000 00000000 00000000 00000000     ................
20000518:	00000000 00000000 00000000 00000000     ................
20000528:	00000000 00000000 00000000 00000000     ................
20000538:	00000000 00000000 00000000 00000000     ................
20000548:	00000000 00000000 00000000 00000000     ................
20000558:	00000000 00000000 00000000 00000000     ................
20000568:	00000000 00000000 00000000 00000000     ................
20000578:	00000000 00000000 00000000 00000000     ................
20000588:	00000000 00000000 00000000 00000000     ................
20000598:	00000000 00000000 00000000 00000000     ................
200005a8:	00000000 00000000 00000000 00000000     ................
200005b8:	00000000 00000000 00000000 00000000     ................
200005c8:	00000000 00000000 00000000 00000000     ................
200005d8:	00000000 00000000 00000000 00000000     ................
200005e8:	00000000 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000 00000000 00000000 00000000     ................
20000638:	00000000 00000000 00000000 00000000     ................
20000648:	00000000 00000000 00000000 00000000     ................
20000658:	00000000 00000000 00000000 00000000     ................
20000668:	00000000 00000000 00000000 00000000     ................
20000678:	00000000 00000000 00000000 00000000     ................
20000688:	00000000 00000000 00000000 00000000     ................
20000698:	00000000 00000000 00000000 00000000     ................
200006a8:	00000000 00000000 00000000 00000000     ................
200006b8:	00000000 00000000 00000000 00000000     ................
200006c8:	00000000 00000000 00000000 00000000     ................
200006d8:	00000000 00000000 00000000 00000000     ................
200006e8:	00000000 00000000 00000000 00000000     ................
200006f8:	00000000 00000000 00000000 00000000     ................
20000708:	00000000 00000000 00000000 00000000     ................
20000718:	00000000 00000000 00000000 00000000     ................
20000728:	00000000 00000000 00000000 00000000     ................
20000738:	00000000 00000000 00000000 00000000     ................
20000748:	00000000 00000000 00000000 00000000     ................
20000758:	00000000 00000000 00000000 00000000     ................
20000768:	00000000 00000000 00000000 00000000     ................
20000778:	00000000 00000000 00000000 00000000     ................
20000788:	00000000 00000000 00000000 00000000     ................
20000798:	00000000 00000000 00000000 00000000     ................
200007a8:	00000000 00000000 00000000 00000000     ................
200007b8:	00000000 00000000 00000000 00000000     ................
200007c8:	00000000 00000000 00000000 00000000     ................
200007d8:	00000000 00000000 00000000 00000000     ................
200007e8:	00000000 00000000 00000000 00000000     ................
200007f8:	00000000 00000000 00000000 00000000     ................
20000808:	00000000 00000000 00000000 00000000     ................
20000818:	00000000 00000000 00000000 00000000     ................
20000828:	00000000 00000000 00000000 00000000     ................
20000838:	00000000 00000000 00000000 00000000     ................
20000848:	00000000 00000000 00000000 00000000     ................
20000858:	00000000 00000000 00000000 00000000     ................
20000868:	00000000 00000000                       ........

20000870 <__atexit_recursive_mutex>:
20000870:	20001848                                H.. 

20000874 <__global_locale>:
20000874:	00000043 00000000 00000000 00000000     C...............
20000884:	00000000 00000000 00000000 00000000     ................
20000894:	00000043 00000000 00000000 00000000     C...............
200008a4:	00000000 00000000 00000000 00000000     ................
200008b4:	00000043 00000000 00000000 00000000     C...............
200008c4:	00000000 00000000 00000000 00000000     ................
200008d4:	00000043 00000000 00000000 00000000     C...............
200008e4:	00000000 00000000 00000000 00000000     ................
200008f4:	00000043 00000000 00000000 00000000     C...............
20000904:	00000000 00000000 00000000 00000000     ................
20000914:	00000043 00000000 00000000 00000000     C...............
20000924:	00000000 00000000 00000000 00000000     ................
20000934:	00000043 00000000 00000000 00000000     C...............
20000944:	00000000 00000000 00000000 00000000     ................
20000954:	0008c659 0008b621 00000000 0008d70c     Y...!...........
20000964:	0008d54c 0008d6d8 0008d6d8 0008d6d8     L...............
20000974:	0008d6d8 0008d6d8 0008d6d8 0008d6d8     ................
20000984:	0008d6d8 0008d6d8 ffffffff ffffffff     ................
20000994:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
200009a4:	00000000 00000000 00000000 00000000     ................
200009b4:	00000000 00000000 53410000 00494943     ..........ASCII.
200009c4:	00000000 00000000 00000000 00000000     ................
200009d4:	00000000 00000000 00000000              ............

200009e0 <__malloc_av_>:
200009e0:	00000000 00000000 200009e0 200009e0     ........... ... 
200009f0:	200009e8 200009e8 200009f0 200009f0     ... ... ... ... 
20000a00:	200009f8 200009f8 20000a00 20000a00     ... ... ... ... 
20000a10:	20000a08 20000a08 20000a10 20000a10     ... ... ... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68 20000d70 20000d70     h.. h.. p.. p.. 
20000d80:	20000d78 20000d78 20000d80 20000d80     x.. x.. ... ... 
20000d90:	20000d88 20000d88 20000d90 20000d90     ... ... ... ... 
20000da0:	20000d98 20000d98 20000da0 20000da0     ... ... ... ... 
20000db0:	20000da8 20000da8 20000db0 20000db0     ... ... ... ... 
20000dc0:	20000db8 20000db8 20000dc0 20000dc0     ... ... ... ... 
20000dd0:	20000dc8 20000dc8 20000dd0 20000dd0     ... ... ... ... 
20000de0:	20000dd8 20000dd8                       ... ... 

20000de8 <__malloc_sbrk_base>:
20000de8:	ffffffff                                ....

20000dec <__malloc_trim_threshold>:
20000dec:	00020000                                ....
